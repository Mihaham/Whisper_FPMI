[00:00.000 --> 00:14.000]  Всем добрый день. Продолжим говорить про графы. В прошлый раз мы знакомились с обходом графа в глубину,
[00:14.000 --> 00:21.000]  просмотрели его простейшие применения, которые, собственно, основаны на лемме о белых путях.
[00:21.000 --> 00:27.000]  Давайте вкратце напомним, если у вас есть обход в глубину, то, соответственно, с помощью него можно
[00:27.000 --> 00:33.000]  решать предыдущие задачи, а именно искать множество достижимых вершин, то есть вам дана какая-то вершина,
[00:33.000 --> 00:39.000]  вам нужно понять, до каких вершин вы, в принципе, можете дотянуться. Плюс можете искать компоненты связности
[00:39.000 --> 00:43.000]  в неориентированном графе, в ориентированном графе можете искать компоненты слабой связности,
[00:43.000 --> 00:47.000]  и, наверное, самое главное применение – это, соответственно, проверка графа на ацикличность.
[00:47.000 --> 00:50.000]  То есть вам дан граф, вы хотите проверить, есть ли в нем цикла или нет.
[00:50.000 --> 00:55.000]  Проверяться довольно просто. Просто если в процессе обхода вы находите какую-то серую вершину,
[00:55.000 --> 01:00.000]  то, соответственно, цикл в ней есть. Если серая вершина не была найдена, только белый и черный,
[01:00.000 --> 01:03.000]  то, соответственно, цикла в таком графе у вас нет.
[01:03.000 --> 01:09.000]  Сегодня рассмотрим еще несколько задач. Ну и, собственно, первая простая задача на графах,
[01:09.000 --> 01:15.000]  которая тоже, собственно, решается с помощью обхода в глубину – это задача стопологической сортировки.
[01:15.000 --> 01:21.000]  Это вообще говоря про что? Ну тут можно рассмотреть вполне себе две жизненные задачи.
[01:21.000 --> 01:26.000]  Первая задача такая. Представьте, у вас есть какой-нибудь квест, компьютерная игра и так далее,
[01:26.000 --> 01:29.000]  в которой у вас есть какое-то количество заданий.
[01:29.000 --> 01:34.000]  Ну и, собственно, часто так бывает, что чтобы выполнить какое-то определенное задание,
[01:34.000 --> 01:38.000]  чтобы пользователь получил возможность открыть к нему доступ и так далее,
[01:38.000 --> 01:41.000]  нужно выполнить какие-то предыдущие квесты или какие-то предыдущие задания.
[01:41.000 --> 01:45.000]  Соответственно, кемоверз у нас получается такой граф зависимости.
[01:45.000 --> 01:51.000]  То есть, скажем, чтобы выполнить задание B, нужно выполнить задание A и C.
[01:51.000 --> 01:57.000]  Те в свою очередь зависят от каких-то других заданий, а может также зависеть от C и так далее.
[01:57.000 --> 01:59.000]  В общем, получается такой вот сложный граф.
[01:59.000 --> 02:04.000]  Соответственно, естественно, чего хочется, хочется какого-то линейного прохождения.
[02:04.000 --> 02:07.000]  Хочется понять, а в какой последовательности выполнять задание, чтобы в любое время и время
[02:07.000 --> 02:10.000]  каждое задание, которое вы выполняете, оно было так или иначе доступно.
[02:10.000 --> 02:13.000]  Второй пример, тоже жизненный, скажем.
[02:13.000 --> 02:16.000]  Вот, допустим, у вас есть какой-то большой граф вычислений.
[02:16.000 --> 02:17.000]  Что такое граф вычислений?
[02:17.000 --> 02:20.000]  У вас есть какая-нибудь сложная функция, которую нужно вычислить.
[02:20.000 --> 02:23.000]  И вы, соответственно, ее разбиваете на последовательности выполнения операции.
[02:23.000 --> 02:27.000]  Скажем, условно, в листьях есть какие-то константы или какие-то переменные.
[02:27.000 --> 02:30.000]  Дальше они объединяются в какие-то более сложные выражения
[02:30.000 --> 02:33.000]  с помощью каких-то бинарных конструкций или унарных операций.
[02:33.000 --> 02:34.000]  Ну и так далее, и так далее.
[02:34.000 --> 02:38.000]  Кемоверз выстроить большое сложное вычисление.
[02:39.000 --> 02:42.000]  Соответственно, естественно, тут ставится та же самая задача.
[02:42.000 --> 02:45.000]  Понятное дело, что чтобы вычислить значения вот в этом узле,
[02:45.000 --> 02:49.000]  необходимо, чтобы были вычислены значения по всех предыдущих узлах.
[02:49.000 --> 02:51.000]  Соответственно, задача ставится следующим образом.
[02:51.000 --> 02:54.000]  Нужно каким-то образом порядочить свои вычисления так,
[02:54.000 --> 02:57.000]  что в любой момент времени у вас вычисление было корректно.
[02:57.000 --> 03:00.000]  В том смысле, что когда вы вычисляете очередную операцию,
[03:00.000 --> 03:03.000]  у вас все ее операнды уже должны быть вычислены.
[03:03.000 --> 03:06.000]  Ну и на самом деле, что-то похожее происходит, не знаю,
[03:06.000 --> 03:08.000]  с какими-то пакетными менеджерами.
[03:08.000 --> 03:10.000]  Например, вы установились в какой-то пакет
[03:10.000 --> 03:12.000]  или установились в какую-нибудь программу.
[03:12.000 --> 03:15.000]  Соответственно, ей нужны другие программы в качестве зависимости.
[03:15.000 --> 03:17.000]  Соответственно, нужно установиться под программы,
[03:17.000 --> 03:19.000]  эти соответственно под пакеты или программы,
[03:19.000 --> 03:21.000]  они зависит от каких-то других программ,
[03:21.000 --> 03:23.000]  соответственно, тоже нужно каком-то образом задать порядок,
[03:23.000 --> 03:25.000]  которому нужно эти все программы устанавливать,
