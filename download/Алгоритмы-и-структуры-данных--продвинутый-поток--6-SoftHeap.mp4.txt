[00:00.000 --> 00:10.520]  то пока я сразу предупреждаю значит то что мы сегодня будем изучать так это будет сложная
[00:10.520 --> 00:16.720]  структура да я всегда так говорю потом она как с халявой но это реально сложно вот поэтому
[00:16.720 --> 00:22.760]  если вы хотите чтобы на слово оказалось халявой от вас потребуется максимальная мобилизация вот
[00:22.760 --> 00:33.440]  то есть да потому что скажем так знаете как был петр митричев до алгоритмы в реальной жизни они
[00:33.440 --> 00:41.240]  но они другие вот совсем другие вот сегодня будет совсем другой алгоритм то есть поэтому
[00:41.240 --> 00:47.520]  олимпиадах не знаю где вам может такое пригодится но у нас курс алгоритмов они курс олимпиадного
[00:47.520 --> 00:56.640]  программирование все-таки поэтому скажем так это ну скажем так используется правда
[00:56.640 --> 01:03.920]  видимо правда возможно в теории хотя какое-то практическое применение эта структура иметь
[01:03.920 --> 01:10.920]  может на самом деле и весьма неожидан нет ну что такое может быть ну как сказать минус
[01:10.920 --> 01:17.720]  с помощью искать можно код в общем-то тоже если разобраться не сильно сложный вот ну если там
[01:17.720 --> 01:25.560]  во всех деталях разобраться конечно вот вот ноха но с другой стороны сразу предупреждаю разрыв
[01:25.560 --> 01:32.520]  шаблона начинается прям вот с самого начала просто на уровне просто определение вообще задание
[01:32.520 --> 01:41.720]  интерфейса типа что она вообще что эта структура вообще делает вот собственно
[01:41.720 --> 01:46.720]  да чтобы было максимально понятнее сегодня вот принес 8 маркеров они четыре то есть надеюсь что
[01:46.720 --> 01:56.600]  8 цветов нам поможет так и так значит внимание значит наша структура данных называется мягкая
[01:56.600 --> 02:06.040]  куча вот ну скажет мне неизвестен официальный перевод на русский язык поэтому приходится
[02:06.040 --> 02:13.000]  говорить так вот официально английское название вот такое ну вот ну как бы вот софт понятно
[02:13.000 --> 02:21.880]  мягкий ну собственно микрософт вот поэтому то же самое там и так далее вот и так что же делает
[02:21.880 --> 02:33.160]  это куча вот ну как следует из названия она хранит себе какие-то элементы
[02:33.160 --> 02:44.560]  хранит себе какие-то элементы и делает следующие операции
[02:44.560 --> 02:56.600]  ну во первых вставка ну логично да что она еще должна делать ну естественно get mean
[02:56.600 --> 03:10.400]  но что еще более важно экстракт mean вот так к сожалению мы обойдем тебе без диски ски
[03:10.400 --> 03:22.720]  ну слету непонятно хотя может мы с вами придумаем как это всегда и
[03:22.720 --> 03:27.680]  бывает возможно как можно как надо подумать вполне вероятно что мы как в кучу по ночи
[03:27.680 --> 03:36.320]  выкрутимся вот хотя вот вот хотя скажу так официально интерпретация этого не требует вот
[03:36.320 --> 03:43.720]  значит что у нас еще есть у нас есть мэлт да это куча сливаемая ну собственно как и все
[03:43.720 --> 03:56.400]  хоть насколько приличные куча в нашем курсе вот и и и и а в общем-то и все а чем не хватает
[03:56.400 --> 04:10.840]  действительно рейс но вот как бы декрески и с рейсом у нас напряг так что вы ну-ка давайте
[04:10.840 --> 04:18.200]  клея как это да как бы сегодня настолько сложная структура данных что я буду подглядывать иногда
[04:18.200 --> 04:27.320]  вот и так значит вот такой вот у нас интерфейс но
[04:27.320 --> 04:42.360]  но хотя но хотя в прочем посмотрим что там нам предлагается делать мы мы попробуем сделать так
[04:42.360 --> 04:49.600]  и так как же нам это сделать но тут вопрос конечно никак как реализовать как хотя бы
[04:49.600 --> 05:02.080]  что-то подобное это у нас в общем-то дело известное правда вот хотя хотя самое смешное что да ладно
[05:02.080 --> 05:11.920]  декрески к ну ладно там ну да декрески конечно будет проблемно сделать ладно пожалуй давайте
[05:11.920 --> 05:19.320]  дилит мы пожалуй сделаем потому что на самом деле не так-то сложно это и будет сейчас вы
[05:19.320 --> 05:27.440]  увидите неожиданно почему вот там просто сейчас смешного будет значит смотреть но фишка какая же
[05:27.440 --> 05:32.720]  как это делать но у нас конечно уже было на прошлом уже на прошлом занятии как минимум три кучи если
[05:32.720 --> 05:41.760]  не больше которая все это прекрасно делали за разного рода крутости асимптотику то есть были у
[05:41.760 --> 05:46.720]  нас честные кучи которые это делали были у нас амортизированные кучи ну конечно была ее величество
[05:46.720 --> 05:52.520]  кучи фибоначии которая делала все кроме удалений за единицу а удаление за логариф мы помним что
[05:52.520 --> 05:58.440]  да это у нас было круто вот круче конечно было бы если куча была еще и не амортизированная но
[05:58.440 --> 06:03.560]  здесь просто скажем что по идее существует на самом деле и не амортизированной версии кучи
[06:03.560 --> 06:10.160]  с такой асимптотикой то есть все вот все делается честно но там первой кучи была где-то в 90-х
[06:10.160 --> 06:17.680]  годах куча продала акасаки исторически первой такой кучи но в 2012 году вышла статья видимо
[06:17.680 --> 06:22.560]  тарьяна и там неизвестного мне товарища скорее всего его ученика с названием строгая куча
[06:22.560 --> 06:28.000]  фибоначии то есть видимо в 2020 году они все-таки допилили но в принципе статью можно найти и
[06:28.000 --> 06:37.480]  подсчитать вот но значит сейчас мы будем делать значит поставим себе более высокую цель значит
[06:37.480 --> 06:50.560]  у нас структура данных софт хип принимает константу эпсилон значит эпсилон у нас будет от нуля не
[06:50.560 --> 06:59.280]  включить на до одной второй включить да так у нас да в шаблонах у нас крыша даблы не принято
[06:59.280 --> 07:08.280]  ставить но мы будем вот внимание значит что же это за эпсилон их фишка будет весьма неожиданный
[07:08.280 --> 07:22.200]  все операции будут работать за от единицы амортизировано кроме им сорта
[07:22.200 --> 07:38.080]  нет логарифом дворечный один но просто логарифом один делить на эпсилон по сути
[07:38.080 --> 07:44.760]  да но у нас репсел меньше единицы поэтому шута но обычно но то обычно чаще пишут все-таки так и
[07:44.760 --> 07:52.800]  мы будем этого придерживать то есть это будет то самая какая-то тактика вот но возникает вопрос
[07:52.800 --> 07:59.640]  да то есть да это выглядит как мы зафиксируем эпсилон сейчас будет зафиксируем эпсилон и
[07:59.640 --> 08:09.360]  забабахаем кучу которая будет работать вот так ну например мы можем забабахать кучу но можем
[08:09.360 --> 08:18.760]  взять маленький эпсилон например 1 делить на н тогда получится инстинкт логарифом а все остальное
[08:18.760 --> 08:31.760]  за от единицы были ли у нас кучи которые умеют такое ну ну как сказать если выкинуть мэлт то
[08:31.760 --> 08:38.880]  были потому что мы выяснили что там если выкинуть мэлт то даже обычная куча на самом деле работает
[08:38.880 --> 08:44.760]  с логарифом инсерта и все остальное за от единицы просто надо делать правильную амортизацию но
[08:44.760 --> 08:51.160]  реализация менять не надо да то есть если этот то есть как это получается на уровне такого мозга
[08:51.160 --> 08:56.800]  интеллектуального чита но вот они на еще там реальной какой-то эффективности то есть тут
[08:56.800 --> 09:03.320]  уже реально какой-то там перегладываем куча каких-то попахивает вот но правда с мэлтом конечно
[09:03.320 --> 09:15.280]  сложнее нет декрески за единицу то ты прикол да крутизна кучи фибоначи основная в том что
[09:15.280 --> 09:22.600]  у нас декрески за от единицы работает вот так она вот мы больше ради этого пришлось там кучи
[09:22.600 --> 09:28.760]  фибоначи реально переделывать вот в этом и фишка вот в принципе можно сказать что и кучи фибоначи
[09:28.760 --> 09:40.080]  обладала бы такой симпатикой септу сказала стоял лог двоичный n правда а а фишка такая
[09:40.080 --> 09:48.080]  смотрите идея нет а значит кучи фибоначи давайте напомним давайте вот напомним так была у нас
[09:48.080 --> 10:06.440]  такая красивая фиолетовая куча ой ой а тут видно что начинается картинка картинка называется только
[10:06.440 --> 10:14.560]  открыл маркер они уже не пишут замечательно хотя нет он черный классный ладно так вот вот он вот он
[10:14.560 --> 10:24.880]  цвет моей мечты вот он да вот значит давайте напомним официально 7 точка кучи фибоначи говорит
[10:24.880 --> 10:38.280]  так мы все делаем за единицу кроме удалений которые мы делаем за логарифом вот но там есть какие-то
[10:38.280 --> 10:43.280]  потенциалы которые позволяют вот оставлять стоимость вот такую но на самом деле идея такая
[10:43.280 --> 10:50.160]  сверху этого потенциала можно еще навесить такой потенциал чтобы в инсорте был логарифом а экстракт
[10:50.160 --> 11:00.080]  мины дилит были единиц так это сделать да то есть да технология уже мы прошлый раз а по прекрасно
[11:00.080 --> 11:04.520]  пробировали то есть помимо вот у нас там были какие-то там монетки вот эти да то есть это был
[11:04.520 --> 11:10.000]  там какой-то потенциал да то есть типа там на каждое дерево кладем монетку и там на каждую
[11:10.000 --> 11:15.840]  помеченную мершину кладем по две монетки было да ну там были какие-то там их монетки так вот
[11:15.840 --> 11:23.080]  давайте введем еще монеток то есть давайте на каждый элемент будем класть логарифом n рыжих
[11:23.080 --> 11:30.480]  монеток ну где рыжий этот цвет который не встречался у монеток раньше вот то есть получается
[11:30.480 --> 11:36.440]  инсор получится за логарифом да но при этом до 4 экстракт мины дилит мы будем просто оплачивать
[11:36.440 --> 11:42.960]  вот этими монетками и получится кайф то есть принципе то есть так вот то есть как вы понимаете
[11:42.960 --> 11:50.480]  сам по себе все кроме инсорта там все кроме инсорта заединито это само по себе не достижение
[11:50.480 --> 12:05.800]  но имеется в виду следующее мы нет мы когда анализируем на самом деле то есть это все уже
[12:05.800 --> 12:10.400]  при анализе проходит то есть мы говорим что у нас там есть куча с которой мы там с нуля сделали
[12:10.400 --> 12:16.440]  несколько последовательных операций даже системой куча да если мы знаем что суммарно в ней элементов
[12:16.440 --> 12:21.960]  было не более чем n то есть не более чем он элементов принципе добавлялась то а симптотики все
[12:21.960 --> 12:29.080]  вот такие потому что мы можем загим числом условия еще раз пробежаться по там всем выполненным
[12:29.080 --> 12:36.600]  действием и собственно оплачивать их вот этими монетками вот кстати до это логика будет применяться
[12:36.600 --> 12:43.920]  и здесь то есть нам по большому счету нужно будет показать что все операции то есть по сам но то
[12:43.920 --> 12:48.840]  есть по большому счету будет сделано так что если у нас в кучи суммарно было вставлено вот столько
[12:48.840 --> 12:57.840]  там как-то n n элементов то все операции суммарно вообще с кучами были выполнены за n лог 1 дилит на
[12:57.840 --> 13:06.160]  epsilon плюс ну количество вызова вот этих операций вот такая с целью нас будет вот такая но то есть
[13:06.160 --> 13:13.280]  идей на амортизационный анализ в общем-то именно в этом и состоит вот понятно и деда
[13:13.280 --> 13:27.800]  вот нет проблема в том что есть такой вопрос действительно нет я не в смысле ругаюсь
[13:28.160 --> 13:35.200]  плохой вопрос вопрос прям суто выше действительно то есть проблема то есть я просто как раз предыдущего
[13:35.200 --> 13:40.200]  проблема не в том что у нас все за единицу а тут инсад это само по себе уже не новость для нас но
[13:40.200 --> 13:46.440]  проблема действительно в том что я все можно ставить и побольше например одну ладно страшно
[13:46.440 --> 13:56.760]  вторую третью и тогда кажется что мы все умеем делать за вот единица а с точностью
[13:56.840 --> 14:10.120]  что такое точность но вот но на самом деле да но то есть конечно понятно что нет самое
[14:10.120 --> 14:15.520]  смешное что нет мы не собираемся хранить какие-то даблы в которых хотим угроблять точность хотя
[14:15.520 --> 14:21.360]  возможно идти оттуда и бралась забираю вперед мы хотим хранить какие-то камешки ну как всегда
[14:21.360 --> 14:26.240]  мы кладем камешки достаем минимумы дам про камешки мы только умеем взять два камешки
[14:26.240 --> 14:37.760]  сказать кто из них меньше капсу вот вот ну-ка и ноутрич на укул так же такое невозможно но
[14:37.760 --> 14:46.880]  мягкая куча с этим и не спорит она заявляет следующее что не не я не гарантирую что вам
[14:47.360 --> 14:58.200]  когда будет вам гетмины экстракт мин то вам достанут именно экстракт мин но но да более
[14:58.200 --> 15:02.440]  того она может вообще никогда не угадать ну кроме случая когда она вы прям последний элемент
[15:02.440 --> 15:07.320]  достанете но когда вы достает последний элемент он понятно минимальный да там больше никого нет
[15:07.320 --> 15:18.240]  значит внимание внимание значит смотрите значит но здесь здесь на самом деле соблюдано но куча
[15:18.240 --> 15:30.680]  достаточно хорошая в определенном смысле оптимальная но вот но она требует значит соблюдать
[15:30.680 --> 15:37.720]  следующий вариант смотрите дело в том значит у нас есть вот элементы элемент мы будем
[15:37.720 --> 15:48.240]  называть ки ну ключик вот так вот внимание вот сейчас максимально внимательно смотрите
[15:48.240 --> 15:54.560]  у каждого элемента будет псевдоним
[15:54.560 --> 16:14.000]  да официальное название сите и почему-то да вот он будет больше либо равен ключа
[16:14.000 --> 16:24.400]  всегда то есть у каждого элемента ну то есть у каждого элемента на самом деле есть вот псевдоним
[16:24.400 --> 16:36.400]  вот то и значит вот я как вот я как раз это объясняю так что не волнуйтесь как бы да
[16:36.400 --> 16:41.600]  так как бы не волнуйтесь просто из той мысли которые хотел сказать я сказал только первое
[16:41.600 --> 16:48.880]  предложение а мысль длинная что нередко у меня наблюдается ну в общем вы я думаю если вы
[16:48.880 --> 16:54.160]  ходите на лекции то ну вообще в принципе на лекции ходите же иногда да вот то как бы вы можете
[16:54.160 --> 16:59.840]  заметить что у лекторов часто это встречается ну потому что да тут вот как бы уже вы поступили
[16:59.840 --> 17:05.320]  на фистех тут соответственно как бы это подозревает что вы готовы собственно понимать более продвинутые
[17:05.320 --> 17:18.600]  мысли чем в три слова логично правда ну ну вообще говоря подразумевается что 10 если честно так
[17:18.880 --> 17:26.760]  вот так вот значит смотрите значит мысль такая смотрите значит куча значит куча хранит в себе
[17:26.760 --> 17:35.040]  значит эти ключи и каждому ключу присваивает псевдоним вот ну какой-то псевдоним с который
[17:35.040 --> 17:42.560]  ей удобно работать гарантируется что для каждого элемента его псевдоним не меньше чем его реальное
[17:42.560 --> 17:51.760]  значение по факту на самом деле псевдоним это тоже ключ но просто возможно какой-то другой кстати
[17:51.760 --> 18:07.440]  чего бывает более того чаще всего ключ и псевдоним будут совпадать да ой такое бывает более того
[18:07.440 --> 18:14.520]  такой часто будет ровно за счет этого у нас и крутая симптутика достигается вот там более
[18:14.520 --> 18:22.080]  того там за агим псевдонимом они там целыми автобусами ехать будут на самом деле вот так
[18:22.080 --> 18:29.160]  вот но пока на уровне инварианта у каждого значит значит у каждого этого товарища значит
[18:29.600 --> 18:38.440]  значит все такое и теперь верен инвариант вот сейчас максимально вот сейчас надо
[18:38.440 --> 18:42.040]  понимать прям максимально буквально потому что вот шаг влево шаг вправо это не про и будет
[18:42.040 --> 19:05.400]  неправда значит будет такой инвариант значит если в кучу или енот или ее точнее и или в ее
[19:05.760 --> 19:20.520]  но от позже слитые части было с магно было добавлено
[19:20.520 --> 19:26.720]  но добавлено в смысле инсерта именно инсерта это важно
[19:35.400 --> 19:45.080]  там суммарно n элементов
[19:45.080 --> 19:57.000]  будет ров и он элементов то
[20:07.160 --> 20:10.400]  но вот то в текущий момент времени
[20:15.080 --> 20:31.040]  в куче не более чем
[20:31.040 --> 20:48.480]  epsilon n ну давайте так и введем но официально видимо по-русски это называть испорченных
[20:48.480 --> 20:56.640]  элементов хотя после английской статью очень хочется звать по коррапчинах но потому что
[20:56.640 --> 21:01.520]  английский термин коррапт вот поэтому как бы поэтому я иногда видимо будет по коррапчины
[21:01.520 --> 21:12.120]  но тот самый главный вопрос что это значит но как уже как вы уже наверное догадались
[21:12.120 --> 21:23.360]  элемент называется испорченным если его псевдоним с ним не совпадает то есть условно говоря то есть
[21:23.360 --> 21:36.280]  мы пишем что там и там меньше этого сети это значит испорченный давайте так и напишем испорченный
[21:36.280 --> 21:54.160]  то есть коррапт это типа корумпированный так а вот такие элементы официального названия даже
[21:54.160 --> 22:01.760]  не имею ну то есть это просто нормально и честные обыватели ну посмотрим но честными
[22:01.760 --> 22:10.400]  хорошими как это честные хорошие красивые умные и самые самые самые самые вот так в
[22:10.400 --> 22:20.640]  кавычках я конечно пишу но и так далее вот так теперь давайте вот внимательно посмотрим да вот
[22:20.640 --> 22:27.640]  еще что да то есть обратите внимание то есть тут очень легко ошибиться да потому что вам может
[22:27.640 --> 22:32.800]  показаться что там гарантируется что в каждый момент времени в куче то есть там допустим если
[22:32.800 --> 22:38.920]  epsilon 1 5 то есть вам может показаться что там вариант говорит о том что в каждый момент времени в
[22:38.920 --> 22:51.880]  куче по коррапче на не более пятой части элемент так вот нет это не так то есть ну потому что в
[22:51.880 --> 23:05.400]  будущем то мы можем добавлять чем проблема ну нет ну можно сказать и так то так неудобно
[23:05.400 --> 23:10.080]  мысли мне кажется почему потому что мы тот и прикол что мы же в будущем будем что-то добавлять
[23:10.080 --> 23:24.480]  добавлять удалять что-то делать там могли быть совершенно верно да и вот это я хочу обратить
[23:24.480 --> 23:30.120]  внимание спасибо именно именно потому что обретите то есть например пусть epsilon 1 5 допустим вы
[23:30.120 --> 23:35.200]  добавили то есть это лишь означает то есть если epsilon 1 5 то есть если вы добавили туда 100 500
[23:35.200 --> 23:41.480]  элементов то это означает что гарантируется что пока вы не добавите 100 501 по крайней мере
[23:41.480 --> 23:49.000]  гарантируется что в каждый момент времени у вас в куче не более чем 100 500 поделить на 5
[23:49.000 --> 24:00.800]  испорченных элементов да именно да вот именно такая подлянка то есть в карте в принципе
[24:00.800 --> 24:05.000]  самой внутри самой кучи если было добавлено сильно больше элементов по коррапчиной могут
[24:05.000 --> 24:11.480]  быть хоть все вот куча в этом смысле вообще удобно работать конечно все коррапчины так давайте
[24:11.480 --> 24:20.080]  выдавать все подряд потому что куча до куча официально объявляет я даже это здесь напишу
[24:20.080 --> 24:31.760]  то где-то мим и экстракт мим реально куча будет выдавать по сетею то есть она присвоит то есть
[24:31.760 --> 24:37.520]  она присвоит какой-то псевдогим более того гарантируется лишь что псевдоним она присвоит
[24:37.520 --> 24:45.720]  один раз и навсегда ответ нет псевдоним может в процессе ну то есть и так изначально когда
[24:45.720 --> 24:52.720]  она его примет она будет называть элемент по имени ну то есть забирай вперед скажи но потом
[24:52.720 --> 24:59.840]  она будет присваить ему все больше и больше псевдонима вот и можно да изначально элемент
[24:59.840 --> 25:04.000]  может романтично думать что просто она будет больше поэтому будет называть его более красивыми
[25:04.000 --> 25:12.080]  именами ну вы типа там вася василий василий петрович там вот это все но по факту там будет
[25:12.080 --> 25:22.560]  работать немножко по-другому нет она и будет хотите сбавиться она просто нет она просто говорит так
[25:22.560 --> 25:28.920]  значит так ты вася а ты петь а нам так значит идите к садитесь к автобус и теперь вы все будете
[25:28.920 --> 25:34.920]  так кто из вас меньше петь а значит в оба там так кто из вас больше петь а так в оба будете петь
[25:34.920 --> 25:47.040]  автозак такой будет условно вот более того к ним теоретически может присоединиться коля и он
[25:47.040 --> 25:57.680]  тогда тоже будет петь а да более того в какой-то момент обнаружено что есть вася петь а коля но
[25:57.680 --> 26:05.600]  вот а подъехал еще один какой-нибудь автобус сережей витей значит мы за от единицы сумеем
[26:05.600 --> 26:17.000]  объединить эти два автобуса ну или кто там больше да может быть сережа я не знаю вот то есть вот
[26:17.000 --> 26:22.120]  оказывается но вот очень удобно но как вы уже поняли автобус будет реализован как как
[26:22.120 --> 26:27.600]  двухсвязанный список но для того чтобы там два автобуса объединять за вот единиц
[26:27.600 --> 26:40.880]  вот казалось бы зачем все это надо вот зачем эти автобусы дизельно то есть зачем это
[26:40.880 --> 26:47.560]  действительно надо ну то есть это позволит кош работать быстрее но возникнет вопрос а какой
[26:48.440 --> 26:59.480]  глубокий смысл в этом сём нет нет нет но смысл такой на самом деле да то есть конечно все но то
[26:59.480 --> 27:04.440]  есть крейша автобусы будут объединяться что будет очень удобно да то есть зато сказано так как
[27:04.440 --> 27:08.280]  достать экстракт мино то есть как достать минимально очень просто мы берем автобус с
[27:08.280 --> 27:14.720]  минимальным сетам с минимальным псевдонимом и просто выводим оттуда одного человека
[27:14.720 --> 27:23.640]  но если это ну как бы понятно если но то есть если где-то минуту просто его показа просто
[27:23.640 --> 27:30.040]  его демонстрируем вот что да но а если его но а если экстракт мим то соответственно его
[27:30.040 --> 27:37.000]  отпускаем вот то есть в общем тогда если вам дальше выдадут экстракт мим то в общем-то
[27:37.000 --> 27:44.160]  достаем из того же автобуса еще человека и так пока не там не закончится да но с нашей точки
[27:44.160 --> 27:56.560]  зрения они все уже на одно лицо вот поэтому тут получается так вот значит соответственно
[28:03.960 --> 28:07.560]  вот то есть вот такая вот дичь и так красота получается
[28:07.560 --> 28:21.680]  вот так что же у нас тогда получается но то есть как бы да давайте сначала подумаю как это
[28:21.680 --> 28:27.680]  вообще нам поможет хоть где-нибудь то есть зачем нужна это вообще страшная технология с автобусами
[28:27.680 --> 28:38.240]  но вот нет упростить тогда но тут возникает вопрос нужно и про да это позволит там упросить
[28:38.240 --> 28:43.400]  жизнь по оси в точке но как бы какой-то смысл нам даст потому что так-то теоретически можно
[28:43.400 --> 28:57.480]  было упростить себе жизнь уже полюбившись методом ну вот но вот но на самом деле но вот но
[28:57.480 --> 29:02.440]  оказывается что если внимательно как бы работать с этим вариантом то какой-то смысл это нам даст
[29:02.440 --> 29:12.400]  потому что но потому что нет потому что на самом деле там идея может быть на самом деле достаточно
[29:12.480 --> 29:19.600] ростая все нот и то есть там и там идея может быть достаточная пр Feldman первая идея которая
[29:19.600 --> 29:27.580]  может возникнуть это ну там вот вот классический нод то есть ты там какая-то про простая такая
[29:27.580 --> 29:34.380]  вещь на идей но то есть надо хочется например там допустим добавите ли это есть там дано
[29:34.380 --> 29:40.460]  эн элементов вам нужно но там допустим вас на insan студентов вам нужно номинировать кого-то
[29:40.460 --> 29:46.260]  стипендию кого-нибудь, ну вы думаете кого? Ну ладно, ну вот, конечно, в идеале, конечно,
[29:46.260 --> 29:51.420]  хочется самого лучшего, но самого лучшего, это прям вот, прям надо действительно, там совсем
[29:51.420 --> 29:57.220]  всех там прям по пунктикам сравнивать, это сложно, поэтому ладно, нам пойдет, ну давайте возьмем
[29:57.220 --> 30:04.340]  кого-нибудь топ-10 процентов, просто кого-нибудь из топ-10 процентов. Если у вас есть вот такой аппарат,
[30:04.340 --> 30:11.620]  то это сделать очень легко. Берем epsilon равно, там, к чему-нибудь, к чему оно там равно, 1 десятая,
[30:11.620 --> 30:22.740]  и добавим туда всех товарищей. Вот, понятно, да? Ну потом будем считать, что у него ключ чем
[30:22.740 --> 30:35.460]  меньше, тем лучше. Ну сейчас дойдем. Вот, давайте добавили все элементы, а после этого взяли и
[30:35.460 --> 30:45.380]  достали какой-то элемент, первый попавшийся. Я утверждаю, что этот элемент попадает в топ-10
[30:45.380 --> 30:55.300]  процентов, если epsilon равно 1 десятая. Так, вот давайте подумаем, вот попробуем понять,
[30:55.300 --> 30:58.140]  почему это логично или нелогично.
[30:58.140 --> 31:11.460]  Положим противно, тогда у нас в автобусе есть размер автобуса из порченных элементов.
[31:11.460 --> 31:22.140]  Нету, ну, во-первых, автобусов несколько, во-вторых, давайте их все-таки списка называть. Вот. А так что-то
[31:22.140 --> 31:28.140]  я прошу, у кого-то там мало ли какие-то ассоциации, кто-то возникнуть просто. Вот. Так вот. Так,
[31:28.140 --> 31:32.380]  ну, во-вторых, списков несколько, на всякий случай. Вот. Так, и чего?
[31:32.380 --> 31:47.820]  Пусть мы получили из не только 10. Так. Но у нас из порченных элементов не больше, чем это, на 10.
[31:47.820 --> 31:55.860]  Значит, все остальные честно упорядочены по ключу. Вот. Значит, среди не из порченных элементов у нас
[31:55.860 --> 32:09.580]  будет элемент, который не позже, чем тут есть. То есть гарантируется то, что между списками корректно.
[32:09.580 --> 32:16.900]  Что корректно? Ну, гарантируется, что мы достанем элемент, у которого псевдоним среди всех минималем.
[32:16.900 --> 32:23.260]  Это все, это все, что гарантируется. Это вообще все, что гарантируется.
[32:23.260 --> 32:29.940]  Нет, псевдоним уже совпадает с какими-то другими ключами. Ну, могут, ну да. И что?
[32:29.940 --> 32:37.940]  Нет, ну, то есть, да, мы показали, что среди не из порченных у нас есть. Давайте рассмотрим минимальный не из порченных элемент, он точно не в топ-10.
[32:37.940 --> 32:47.340]  Так, минимальный. Не из порченных. Так, ну, минимальный из не из порченных, ну, да, в топ-10. Там, ну, в топ-10, да.
[32:47.340 --> 32:58.420]  Ровно на конце топ-10. Он не больше еще на конце топ-10 находится. Да. А мы достанем либо его, либо элемент с меньшим псевдонимом. Да.
[32:58.420 --> 33:07.820]  Но если мы достанем элемент с меньшим псевдонимом, то он меньше чем минимум. Да, да, да. Так, ну, вот, ну, давайте попробую еще раз.
[33:07.820 --> 33:13.900]  Попробую сказать то же самое, может быть, чуть-чуть другими словами. Да, хотя идея абсолютно верная.
[33:13.900 --> 33:18.060]  Действительно. То есть, давайте подумать, то есть, фишка на самом деле такая.
[33:20.420 --> 33:25.420]  Итак, предположим, что мы достали действительно какой-то, то есть, какой-то элемент.
[33:28.340 --> 33:33.980]  Допустим, у нас вот этот вот какой-нибудь кеймин вот такой оказался. Теперь внимание, вопрос.
[33:33.980 --> 33:38.900]  Нас интересует, сколько элементов может быть меньше его?
[33:44.620 --> 33:50.460]  Ну, вот, ну, хочется сказать сколько. Ну, давайте подумаем сначала, а сколько элементов может быть больше его?
[33:52.300 --> 34:03.260]  Ну, опять же, утверждается, можно гарантировать следующее, что когда мы просто достали из кучи элемент, то утверждается, что все неиспорченные элементы заведомо больше его.
[34:05.500 --> 34:11.220]  Почему? Ну, потому что этот элемент меньше либо равен, я не знаю, испорченный он или нет.
[34:12.020 --> 34:17.620]  Но я знаю, что он меньше либо равен своего вот этого сикея, который реально минимальный, да.
[34:19.180 --> 34:24.020]  То есть, получается, давайте вот сейчас это вот внимательно надо просто вот, я лучше там три раза повторю.
[34:26.020 --> 34:27.500]  Значит, сикей мим.
[34:29.180 --> 34:31.580]  Тут у нас это меньше либо равно сикей.
[34:32.980 --> 34:39.780]  Просто, ну, вот, равно кей. Вот, допустим, то есть, если мы берем какой-нибудь другу там неиспорченный элемент.
[34:41.420 --> 34:50.100]  То мы гарантируем, то по вот этой вот цепочке неравенств мы гарантируем, что вот этот элемент точно не хуже, даже, если он испорченный.
[34:53.620 --> 35:02.500]  То есть, это в принципе означает следующее, что так как у нас, но теперь замечаем, что так как у нас неиспорченных элементов не менее чем 1 минус эпсилон на n,
[35:03.100 --> 35:15.660]  ну, то есть, в нашем случае 90 процентов, ну, там точнее 90, там, 9 десятых n, то тогда отсюда получается, то есть, что этот элемент, то есть, слева, справа от этого элемента находится там 9 десятых элементов.
[35:16.500 --> 35:19.180]  Это означает, что слева находится не более чем 1 десятая.
[35:23.620 --> 35:25.940]  Да, мы просто добавили пока n элемент, да.
[35:28.820 --> 35:29.220]  Вот.
[35:30.020 --> 35:42.380]  Хотя, ну, в принципе сейчас мы посмотрим, что будет, когда, если мы будем доставать там второй, третий и так далее, но общая суть действительно такая, то есть, получается, как минимум, на вот такую халяву мы можем найти элементы с топ-10 процентов.
[35:43.020 --> 35:49.100]  То есть, есть уже аппарат такой есть, просто все добавили, один достали, возрадовались и все сделали, кстати, за линию.
[35:49.620 --> 35:50.220]  Понимаете, да?
[35:51.660 --> 35:52.180]  Понимаете?
[35:54.140 --> 35:54.740]  Вот.
[35:55.180 --> 35:55.860]  Вот.
[35:58.460 --> 36:02.060]  Но попробуем усилить, вот правильно действительно упоминался partition.
[36:04.780 --> 36:08.140]  А теперь вот давайте подумайте, ну-ка давайте я вам даже дам пару минут на подумать.
[36:09.540 --> 36:13.140]  Смотрите, вот у нас есть, там, действительно у нас бывает задача.
[36:15.020 --> 36:18.500]  Вот, то есть, у нас была задача посортировать числа.
[36:19.860 --> 36:21.660]  И в ней был метод решения qsort.
[36:23.180 --> 36:24.340]  Ну-ка, помните, как он работал.
[36:25.740 --> 36:32.940]  Да, он там выбирался какой-то pivot и, соответственно, там массив пилился на две части, да?
[36:34.180 --> 36:38.620]  Ну или, например, если вы ищете какую-нибудь катовую порядку и статистику, тоже выбирался pivot и мы шли в нужную часть.
[36:39.580 --> 36:46.620]  И мы отмечали, что мы выигрываем, если на каждом шаге все элементы делятся на две части, на две равные части.
[36:47.060 --> 37:02.260]  Но также мы отмечали, что если они делятся на почти равные части, причем почти, так достаточно растяжимо, на самом деле, да, то есть, там, например, если они отличаются заведомо не более чем два к одному, там, или три к одному, то есть, константа какая-то, то все равно все будет работать за линию, правда?
[37:03.460 --> 37:04.780]  Ну а сортировка там за n log.
[37:06.060 --> 37:07.260]  А теперь внимание, вопрос.
[37:08.060 --> 37:11.060]  Как можно с помощью, как можно выполнить такой partition?
[37:11.060 --> 37:16.420]  То есть, как можно поделить массив за линию теперь с помощью, как можно поделить массив за линию?
[37:16.620 --> 37:24.580]  Еще такой штуки на две, ну там, в этом, в указанном выше смысле, примерно равные части.
[37:28.940 --> 37:30.020]  Так, и что даст это?
[37:30.260 --> 37:32.380]  Вот, допустим, возьмем epsilon на вторая, что дальше?
[37:37.700 --> 37:38.020]  Так.
[37:38.260 --> 37:40.540]  Первый элемент, который мы рассадим, будет точно в первой части.
[37:41.180 --> 37:49.220]  Так, он будет где-то, заведомо, да, первый элемент может быть где-то, будет где-то в первой половине, да, это мы уже выяснили, да.
[37:50.740 --> 37:52.980]  Но как бы, насколько в первой части?
[37:56.420 --> 38:00.500]  Ну в первой половине, да, но как бы, близко к середине или далеко?
[38:02.460 --> 38:03.860]  Вот, проблема.
[38:04.860 --> 38:07.860]  Да, такая проблема действительно есть.
[38:13.300 --> 38:14.300]  И что нам это даст?
[38:15.300 --> 38:19.940]  А вот, кстати, давайте подумаем, хорошо, про первое мы что-то гарантируем, а что будет, если мы достанем второй элемент?
[38:26.740 --> 38:27.460]  Ну да.
[38:27.460 --> 38:28.300]  Так, да.
[38:32.300 --> 38:32.980]  Чего?
[38:35.460 --> 38:36.060]  И что?
[38:37.620 --> 38:42.260]  Да ладно, но в идеале, так, заметим, что куча не запрещала себе работать правильно.
[38:44.180 --> 38:49.620]  Поэтому если вы просто достали 10 минимумов и взяли их медиану, то ну поздравляю, вы достали пятый элемент.
[38:49.620 --> 38:50.020]  И что?
[38:50.740 --> 38:56.780]  То есть это, конечно, если вы Bruce Willis, это, наверно, круто, но если вы просто достали 10 минимумов и взяли их медиану, то ну поздравляю, вы достали пятый элемент.
[38:56.780 --> 38:59.780]  То есть это, наверно, круто, но как бы для наших целей это не работает.
[39:01.780 --> 39:02.780]  Если поставить их сам на четвертый, и...
[39:04.780 --> 39:05.780]  Так.
[39:06.780 --> 39:12.780]  Первый раз берем элемент, который находится среди первых четверти. Второй раз берем элемент, который находится среди первых четверти плюс один.
[39:12.780 --> 39:13.780]  Так.
[39:15.780 --> 39:17.780]  И у нас, вроде, все элементы будут среди первых половины.
[39:18.780 --> 39:19.780]  Первые как прям вообще все?
[39:20.780 --> 39:21.780]  Нет, первые...
[39:22.780 --> 39:23.780]  Так.
[39:23.780 --> 39:24.780]  И?
[39:24.780 --> 39:25.780]  И че...
[39:25.780 --> 39:26.780]  Да, первые четверти, да.
[39:26.780 --> 39:27.780]  Так.
[39:27.780 --> 39:29.780]  Ну и нам хватит, мы же отсчитывали...
[39:29.780 --> 39:30.780]  А что хватит?
[39:30.780 --> 39:31.780]  Мы разбили на 3 к 1.
[39:31.780 --> 39:34.780]  Мы разбили первые четверти элементов, которые находятся в первой половине массива.
[39:34.780 --> 39:35.780]  Не поймете, зачем, правда, да?
[39:35.780 --> 39:36.780]  Так.
[39:36.780 --> 39:37.780]  Все оставшиеся, обратите.
[39:37.780 --> 39:38.780]  И что нам это даст?
[39:39.780 --> 39:40.780]  Мы разбили массив на 3 к 1.
[39:40.780 --> 39:42.780]  Пока мы еще не... Пока мы еще ничего не разбили.
[39:42.780 --> 39:45.780]  Первые четверти находятся в первой половине до максимума.
[39:45.780 --> 39:46.780]  А, во.
[39:47.780 --> 39:48.780]  Да, да, да.
[39:49.780 --> 39:50.780]  Право.
[39:50.780 --> 39:51.780]  То есть, ну вот правильно.
[39:51.780 --> 39:52.780]  Нет, просто идея действительно такая.
[39:52.780 --> 39:54.780]  Вот предлагается давайте вот такая.
[39:54.780 --> 39:57.780]  Давайте пусть у нас epsilon равно 1 четверть.
[39:58.780 --> 40:02.780]  И мы достанем из кучи n поделить на 4 элементов.
[40:06.780 --> 40:08.780]  Потому что как же было правильно сказано?
[40:08.780 --> 40:10.780]  Первый элемент, он находится...
[40:10.780 --> 40:14.780]  Он, ну как порядковая статистика, не более чем n поделить на четвертый, правда?
[40:16.780 --> 40:17.780]  Вот.
[40:18.780 --> 40:21.780]  То есть, когда второй, который мы достали,
[40:21.780 --> 40:24.280]  он, как порядковая статистика, не более чем
[40:24.280 --> 40:26.780]  n поделить на 4 плюс 1.
[40:28.780 --> 40:30.780]  А причина такая же, потому что, смотрите.
[40:30.780 --> 40:32.780]  Почему первый не более, чем n поделить на 4?
[40:32.780 --> 40:34.780]  Потому что мы знаем, что...
[40:35.780 --> 40:36.780]  Вот.
[40:36.780 --> 40:38.780]  Потому что мы знаем, что у нас в куче есть
[40:38.780 --> 40:42.780]  не менее, чем 3 четверти n неиспорченных элементов.
[40:42.780 --> 40:44.780]  И все эти элементы, больше ли бы равли нас.
[40:45.780 --> 40:47.780]  Значит, мы не более, чем n поделить на четвертый.
[40:47.780 --> 40:50.780]  Ну может быть, не более, чем n поделить на 4 плюс 1?
[40:50.780 --> 40:58.660]  Но каждый раз, когда мы достаем элемент, как бы у нас есть ограничение сверху на количество
[40:58.660 --> 41:04.420]  испорченных, значит ограничение снизу на количество не испорченных уменьшается на 1.
[41:04.420 --> 41:10.020]  То есть поэтому получается, что следующий элемент, если предыдущий был n поделить до 4 плюс 1,
[41:10.020 --> 41:19.500]  то не позже, чем n поделить до 4 плюс 1, то этот будет не более, чем n поделить до 4 плюс 2,
[41:19.500 --> 41:28.180]  этот n поделить до 4 плюс 3 и так далее. То есть вот такая логика. Если мы так достанем n поделить
[41:29.180 --> 41:40.820]  то получится n поделить на 2. То есть это означает, что мы достали n поделить до 4 элементов из кучи,
[41:40.820 --> 41:50.540]  и мы гарантируем, что они все в отсортированном порядке находились бы в первой половине. А теперь
[41:50.540 --> 41:56.340]  эта идея такая, давайте рассмотрим эти n поделить до 4 элемента и найдем из них честный максимум.
[41:56.340 --> 42:02.100]  То есть мы не тротуарь последний, который куча сказала, куча нам там гонит на пропалу,
[42:02.100 --> 42:06.780]  и мы это знаем. Но мы же можем просто из всех этих элементов пробежаться по ним и выбрать честный
[42:06.780 --> 42:21.860]  максимум, правда? К чему это нас приводит? Не умирайте. Вот, то есть это означает маленькая
[42:21.860 --> 42:29.100]  прятная вещь, что этот элемент с одной стороны лежит в первой половине, с другой стороны не в
[42:29.100 --> 42:35.580]  первой четверти. Ну ладно, он может лежать, он может быть n поделить на 4. То есть мы попали в
[42:35.580 --> 42:41.220]  элемент, который как катая порядковая статистика, то есть там катая порядковая статистика, где k от n
[42:41.220 --> 42:49.220]  поделить на 4 до n поделить на 2. То есть в принципе все, берем этот элемент, объявляем его пивотом,
[42:49.220 --> 42:54.500]  и тогда получается, что у нас на каждом шаге от массива будет отпиливаться не менее чем четверть.
[42:54.500 --> 43:04.300]  Так что вот такая вот неожиданная идея. Более того, на самом деле в оригинале предлагается
[43:04.300 --> 43:12.700]  брать константовый опсил не 1 делить на 4, а n поделить на 3. И тогда вот таким образом вы
[43:12.700 --> 43:19.060]  гарантируете, что у вас элемент попадет условно в среднюю треть, и отпиливаться будет уже не одна
[43:19.060 --> 43:28.260]  четверть, а одна треть. Вот. Ну для того, чтобы вот как у нас катая порядковая статистика
[43:28.260 --> 43:34.500]  ищется. Берем пивот, первый какой-то каким-то образом за линию выбранный пивот, и пилим массив
[43:34.500 --> 43:39.580]  на две части. Кто меньше, кто мы и кто больше. И в зависимости от того, сколько элементов оказалось,
[43:39.580 --> 43:44.380]  мы там в нужном под массиве что-то еще рекурсивно. Но оказывалось, что если мы пивот будем находить,
[43:44.380 --> 43:51.300]  что массив делится примерно пополам, то будет хорошо. Да, но это нас тоже устраивает,
[43:51.300 --> 43:57.660]  потому что массив уменьшается хотя бы там в четыре третьих раза. Это означает, что как бы у нас
[43:57.660 --> 44:02.900]  будет выполнено, то есть получается он работает, первая итерация работает за n, вторая за три четверти,
[44:02.900 --> 44:07.140]  следующая за три четверти в продрати и так далее. Если это просуммировать, получится линия.
[44:07.140 --> 44:26.260]  Зачем мы все это делаем? На самом деле мы делаем это для развилочки, чтобы понять
[44:26.260 --> 44:31.700]  действительно лучше, что куча может. То есть да, у нас, конечно, есть более простая алгоритма,
[44:31.700 --> 44:36.060]  действительно, как это делать, не вводящий какие-то мозговзрывательные структуры данных,
[44:36.060 --> 44:44.980]  но тем не менее. Если у вас черный ящик есть, то воспользоваться им очень просто. Более того,
[44:44.980 --> 44:50.620]  на самом деле мы даже можем попробовать пойти дальше, потому что эта структура на самом деле
[44:50.620 --> 44:57.700]  о чем? Она на самом деле вот действительно, она о приблизительности. То есть смысл в том,
[44:57.700 --> 45:04.140]  что чем более точно вы хотите что-то сделать, тем больше итерации вам нужно поделить. Вот
[45:04.140 --> 45:14.460]  погибите руки. Кто когда-нибудь писал бинарный поиск по ответу? Логично. А бинпоиск по ответу,
[45:14.460 --> 45:23.340]  где ответ? Добловый. Какая неожиданность. Вот смотрите, вы тогда можете заметить,
[45:23.340 --> 45:27.580]  что чем больше вам нужна точность ответа, тем больше вам нужно сделать итерации бинарного поиска.
[45:27.580 --> 45:32.700]  То есть если вам до третьего знака, то там одно дело. Если там до седьмого, то значит еще
[45:32.700 --> 45:41.940]  там больше итерации надо. Ну как полемиально? Формально в 8-м точке там будет на самом деле
[45:41.940 --> 45:51.740]  количество итерации. Это там вот тот самый логарифм 1 делить на эпсилон по факту. Но в некотором смысле
[45:51.740 --> 45:57.300]  да. Правда во входных данных вам еще дан эпсилон и вы должны тоже его учесть. Тогда правда будет
[45:57.300 --> 46:02.820]  логарифм что-то типа там там max c поделить на эпсилон, но это уже там. Ну max ответ поделить
[46:02.820 --> 46:18.140]  на эпсилон обычно, но суть такая. Нет, ну эпсилон, ну это уж другое. Ну вот. И так. То есть так на самом
[46:18.140 --> 46:23.900]  деле получается и здесь. То есть куча позволяет вам сказать, если вам не нужен идеальный максимум,
[46:23.900 --> 46:31.420]  а нужно что-нибудь типа там это топ один процент, то куча сделает чуть меньше действий. Да,
[46:31.420 --> 46:37.300]  там ответ чуть-чуть неправильный, но как бы чуть-чуть регулируется. Но чем более, но как бы тут вы
[46:37.300 --> 46:45.980]  подкручиваете вот это вот как-то. Там вот это колесико вот это вот. И соответственно, чем более
[46:45.980 --> 46:51.900]  расплывчатым становится чуть-чуть, тем более быстро она вам тычит. То есть в идеале совсем,
[46:51.940 --> 46:58.340]  когда эпсилон бывает, иногда бывает нас там, но вот эпсилон мы пишем одна-вторая. Но совсем вот
[46:58.340 --> 47:03.500]  когда эпсилон одна-вторая то есть это что означает? То есть у вас там половина элементов может быть
[47:03.500 --> 47:10.620]  попорчена. Вот, в принципе да. То есть, к сожалению, если бы, то есть, если бы эпсилон был совсем,
[47:10.620 --> 47:18.260]  то есть если бы эпсилон был совсем один допустим, то тогда получается, что структура работала бы
[47:18.260 --> 47:25.300]  вообще за ноль, но при этом испорченными могут быть все. То есть тогда куча, тогда
[47:25.300 --> 47:31.140]  по сути просто куча будет может там работать просто как очередь. Или просто
[47:31.140 --> 47:37.780]  приоритетная очередь с роддомным приоритетом. То есть она может там, ну это
[47:37.780 --> 47:42.220]  если Эпчел совсем равно один, когда Эпчел равно одна вторая, конечно такого нет.
[47:42.220 --> 47:46.580]  Почему? Потому что мы все-таки должны гарантировать, что первый элемент все-таки
[47:46.580 --> 47:51.580]  где-то из первой половины. Ну то есть это мы гарантируем, что если мы таким
[47:51.580 --> 47:56.380]  образом выбираем лучшего, значит он не хуже, чем середнячок. Но тоже в принципе
[47:56.380 --> 48:02.420]  неплохо, на самом деле во многих случаях. Вот. Гарантия по крайней мере какая-то
[48:02.420 --> 48:11.380]  дается. Так что вот такая вот красота. Вот. Ну то есть поэтому тут вот настроечка.
[48:11.940 --> 48:16.860]  Вот. Поэтому в принципе эта структура действует о том, чтобы делать какие-то
[48:16.860 --> 48:22.980]  неправильные ответы, но почти правильные. Но иногда этого может и хватать. Вот.
[48:22.980 --> 48:27.220]  Потому что, как бы напомним, вообще для чего эту кучу создавали, зачем-то
[48:27.220 --> 48:32.020]  страдали в конце 2000 году. Ну ладно, ее там наверное чуть раньше
[48:32.020 --> 48:36.900]  создали, но те минуты. Значит зачем это создавали? Ну как бы в идеале, как мы уже
[48:36.900 --> 48:40.460]  сказали, то есть у нее основное ее достижение это уметь строить минус
[48:40.460 --> 48:47.540]  100. Значить точек везде на обратную функцию О'Кирмана. Да с помощью вот этого, да.
[48:47.540 --> 48:54.820]  В чем там отдельная песня как? Может быть мы когда-нибудь до нее даже доберемся.
[48:56.020 --> 49:02.420]  Нет, он абсолютно точный. Другой вопрос, куда куча дает не совсем точные
[49:02.420 --> 49:10.220]  данные, но видимо там как-то прореживать ребра это позволяет. Вот. То есть там
[49:10.220 --> 49:16.140]  отдельная песня как это используется, там это все, но вот. Так что соответственно?
[49:16.140 --> 49:28.060]  Так, тихо, тихо, тихо. Так что там за полтология пошла? Вот. То есть на самом деле
[49:28.060 --> 49:34.220]  следующая вещь могла быть такая. Как бы давайте, то есть можно, то есть на самом деле еще
[49:34.220 --> 49:39.660]  предлагается рассмотреть чуть более сложные алгоритмы. Например около сортировка.
[49:39.660 --> 49:55.700]  Но нет, near sort. Вот. Вот near sort. Нет, то не в смысле сортировка это такого парня,
[49:55.700 --> 50:04.780]  который л поймал, конечно, да. Вот. А вот near sort. Вот. Что она значит? Нет, это, ну вот.
[50:04.780 --> 50:11.340]  Он говорит так, а что такое сортировать? Так, то от сортировать, а ну чтобы элементы шли порядка,
[50:11.340 --> 50:18.300]  а типа чтобы инвекции не было, да? Тогда я предлагаю около сортировку. Давайте скажем,
[50:18.300 --> 50:27.820]  что я гарантирую, что у меня инвекций будет немного. Ну не более чем, но, например,
[50:27.820 --> 50:44.380]  нет, просто epsilon squared. Вот давайте думать, а как это сделать? Да, запихнем все элементы в кучу,
[50:44.380 --> 50:52.460]  достанем их, и что мы тогда можем гарантировать? Да, мы гарантируем, тогда про каждый элемент мы
[50:52.460 --> 50:58.660]  гарантируем, про каждый достанный элемент мы гарантируем, что справа от нее, что в куче меньше
[50:58.660 --> 51:05.820]  его осталось не более чем, сколько, epsilon n. Как мы внезапно убедились, да? То есть вариант можно
[51:05.820 --> 51:12.100]  переформулировать так. Когда вы достаете элемент, какой-нибудь в куче оказалось меньше его не более
[51:12.100 --> 51:20.580]  чем epsilon n. Ну то есть это не вариант, конечно, боже упаси, но соответственно. Но тогда получается,
[51:20.580 --> 51:24.780]  что каждый элемент дается элементами справа не более чем epsilon n инверсией, а их всего n
[51:24.780 --> 51:39.900]  получается радость. Ну, а теперь баги. На самом деле вам в качестве упражнения может дать задачу.
[51:39.900 --> 51:47.060]  Дан массив? Нет, вот задача. Дан массив. Гарантируется, что в нем не более чем n инверсий.
[51:47.060 --> 51:58.540]  Отсортировать массив за o от n. Нет, по факту да. Самое смешное, что вставками в том виде,
[51:58.540 --> 52:03.900]  в котором мы описывали, то есть мы идем слева направо и пытаемся справа налево просвапивать,
[52:03.900 --> 52:12.180]  то да, это будет работать за линию. Да, потому что помним, мы работаем за о от n плюс число инверсий.
[52:12.180 --> 52:16.900]  Потому что свапов мы делаем ровно столько, сколько инверсий. То есть там фактически это
[52:16.900 --> 52:20.700]  можно интерпретировать так, что если есть два соседних элемента такие, что левый больше правого,
[52:20.700 --> 52:28.140]  давайте их посвапаем. То есть в принципе, если у нас осталось не более чем n инверсии,
[52:28.140 --> 52:38.700]  то как бы мы за линию все сделаем хорошо. На самом деле мы можем не остановиться и на этом,
[52:38.700 --> 52:46.540]  потому что если мы сейчас придумаем более нетривиальный алгоритм, то окажется следующая вещь.
[52:46.540 --> 52:55.380]  Тут мы просто говорим, что инверсии не более чем epsilon квадрат, а можно потребовать более
[52:55.380 --> 53:11.540]  продвинутую вещь. Можно потребовать, чтобы для любого элемента x расстояние до от получившейся
[53:11.540 --> 53:35.780]  позиции x до правильной, позиции x до правильной, не более чем epsilon n. Нет, у нас задача была
[53:36.340 --> 53:45.460]  напарник. У нас в домашнем задании была задачка, которую можно формулировать так. Допустим,
[53:45.460 --> 53:51.860]  нам уже дано, что расстояние от каждой вершины до правильной позиции не более чем epsilon n. Ну-ка
[53:51.860 --> 53:58.500]  давайте, за какую симпточку можно отсортировать? Да, как выяснилось, в том домашнем задании это
[53:58.500 --> 54:07.460]  было бы там n логарифом двоичный epsilon n. Ну там было число k, ну вот вы там,
[54:07.460 --> 54:15.860]  собственно, доказали, что идеальная симпточка это n лог k. А ну-ка, кто решил эту задачу, кстати?
[54:15.860 --> 54:29.380]  Ух ты, классно, простая задача. Ну вот, молодцы. Значит, смотрите, ну а теперь идея такая-то,
[54:29.380 --> 54:36.580]  как довести массив до такого состояния? Ну утверждается, что да, что Куча может нам в
[54:36.580 --> 54:42.220]  этом помочь и дать нам асимптотику n логарифом двоичный 1 делить на epsilon, но заметим, что если
[54:42.220 --> 54:50.860]  мы сложим вот это и это, то мы, в общем-то, n лог n и получим. Нет, ну понятно, ну лучше n лог n мы,
[54:50.860 --> 54:57.020]  идеальную сортировку точную мы лучше, чем за n лог n, и не сделаем. Но просто фишка в том,
[54:57.020 --> 55:01.340]  что мы теперь разбили ее на две части, и каждую из этих частей, видимо, умеем делать оптимально.
[55:01.340 --> 55:07.620]  Ну потому что про это вы уже доказали, что это оптимально, ну а про это, соответственно, отсюда.
[55:07.620 --> 55:16.820]  Следует, что, как бы, вот можно сделать вот за столько, но быстрее нельзя. Ну да, ну как вычислить,
[55:16.820 --> 55:20.900]  ну не вычислить, но как бы, если мы сумеем вот эту часть делать быстрее, чем за вот столько,
[55:20.900 --> 55:27.660]  то вот это плюс это будет быстрее, чем за n лог n противоречия. Формально вот. Да, вот.
[55:27.660 --> 55:34.140]  Но остался только вопрос, как мы это будем делать. Ну тут, к сожалению, как мы уже поняли,
[55:34.140 --> 55:45.260]  просто пихнуть все элементы, а потом достать не получится. Ну потому что, ну если просто подоставать,
[55:45.260 --> 55:49.900]  то, ну там просто подоставать, то как бы каждый конкретно, то есть, на самом деле,
[55:49.900 --> 55:55.580]  проблема такая, что каждый элемент, он как бы не сильно правее правильной позиции, там может быть,
[55:55.580 --> 56:02.620]  ну там вот ошибка будет такая, в одну сторону. То есть, условно говоря, там больше элементы,
[56:02.620 --> 56:10.060]  сейчас как бы это сказать-то. Ну, короче говоря, минимум, то есть, на самом деле,
[56:10.060 --> 56:16.340]  минимальный элемент может отказаться практически в конце массива. Ну может же быть так,
[56:16.340 --> 56:23.300]  что вы там, допустим, при epsilon будете доставать, там вот при epsilon равном, там какого-нибудь там
[56:23.300 --> 56:28.820]  n-птичка, здесь будете доставать, там этот n-птичка, там давайте, а нет, лучше по-другому, давайте так вот.
[56:28.820 --> 56:39.540]  Пусть у вас epsilon равно, допустим, нет, то ладно, лучше в терминах этих. У нас просто ошибка едет на 1 каждый раз.
[56:39.540 --> 56:46.500]  Ну по сути, да. То есть, как бы вы, то есть, допустим, если epsilon n у вас, допустим, epsilon n равно, допустим, 57,
[56:46.500 --> 56:52.260]  оказалось, да, то что это означает? Это значит, что вы на первой трассе можете достать 58 элемент, потом 59,
[56:52.260 --> 57:00.260]  потом 60 и так далее, а потом в самом конце неожиданно останутся элементы с первого по 57. То есть, более
[57:00.260 --> 57:04.500]  того, они как-то моментом будут уже совсем все попорчены, поэтому они в принципе могут уже быть
[57:04.500 --> 57:11.060]  даже пошафлены, минимальный элемент может вообще в конце прийти. Вот, то есть, может быть такое,
[57:11.060 --> 57:19.180]  по крайней мере, вариант не запрещает. Вот, то есть, поэтому, то есть, получается, что, то есть,
[57:19.180 --> 57:24.340]  с другой стороны, да, мы гарантируем, что там каждый элемент, видимо, там сильно левее своей
[57:24.340 --> 57:31.740]  правильной позиции не окажется. Вот, то есть, потому что мы знаем, что элементов, то есть,
[57:31.740 --> 57:36.660]  элементов, меньших его, оказывается, сейчас в куче осталось немного. То есть, это означает,
[57:36.660 --> 57:42.740]  что он там левее своей позиции, там на, больше чем на epsilon n не окажется. Но у нас две стороны.
[57:42.740 --> 57:49.020]  А может это сдвинуть, короче, записать, в какую позицию мы хотим записать, но сдвинуть это,
[57:49.020 --> 57:57.420]  понятное дело, на epsilon n по полам влево и запустить поэтому с консортом каким-нибудь. С консортом чего?
[57:57.420 --> 58:07.060]  Нет, ну, короче, мы же можем как-то сортировать числа быстрее, чем за n чисел? Нет. Нет, жаль.
[58:07.060 --> 58:19.620]  Это камешки, это те самые камешки, да. А что позиции? Мы ж заранее не знаем, какие позиции правильные.
[58:19.620 --> 58:28.100]  Нет, если на каждом, нет, знаете, очень легко сортировать камешки, если на каждом
[58:28.100 --> 58:33.620]  камешке написано, куда он при сортировке должен стать, знаете. Я больше скажу, куча для этого не
[58:33.620 --> 58:43.740]  нужна никакая. Нет, ну, по приколу-то может и можно. Ну, знаете, да, сортировка с подсказкой, да.
[58:43.740 --> 58:54.860]  Да, да, да, знаете, это что-то типа, да. Ну да, как это да, это называется вода. Вот вам вопрос,
[58:54.860 --> 59:04.660]  вот вам 4 варианта ответа. Я беру, можно подсказку? Конечно. Ну, это как-то так будет, видимо, да.
[59:24.860 --> 59:41.220]  Вот. Итак, значит, что сейчас будет предлагаться? Сейчас будет предлагаться такой тоже неожиданный
[59:41.220 --> 59:49.340]  достаточно алгоритм, но нет. Скажем так, он, конечно, вам честно это предложит. То есть предложит,
[59:49.340 --> 59:56.900]  но предложит в том плане, что да, мы засунем все элементы в кучу с параметром epsilon, ну или подумаем
[59:56.900 --> 01:00:08.780]  там каким, может быть, там плюс-минус. Вот. И после этого их все выпишем. Понятно, да? Что нам это даст?
[01:00:08.780 --> 01:00:15.500]  Вот давайте, выписали элементы, они нам даны вот в эти порядки. А теперь фишка такая, мы их будем
[01:00:15.500 --> 01:00:22.820]  не просто выписывать. Дело в том, что как мы убьемся позже, у нас мы про каждый элемент, да,
[01:00:22.820 --> 01:00:31.620]  то есть каждый элемент мог быть испорчен, но мы можем записать когда. То есть когда его конкретно,
[01:00:31.620 --> 01:00:44.780]  собственно, так сказать, объявили испорченным. Вот. То есть куча в принципе может это честно
[01:00:44.780 --> 01:00:54.700]  записать. Ну, скорее наоборот. Стали, да, то есть это когда он стал тем самым китайцем,
[01:00:54.700 --> 01:01:05.500]  которого официально стали на одно лицо путать. Вот. Значит, да. То есть как бы позже убедимся,
[01:01:05.500 --> 01:01:11.740]  в принципе, эта куча умеет. Ну да, идея очень простая, просто на самом деле, как бы более все
[01:01:11.740 --> 01:01:18.020]  элементы у нас сидят в этих листах. И на самом деле пока лист находится, ну там скорее всего так,
[01:01:18.020 --> 01:01:22.380]  изначально лист находится просто в листе из себя любимого и как бы все с ним общаются по его
[01:01:22.380 --> 01:01:29.020]  имени и отчеству. Но, ну вот, то есть проблемы начинаются только как только там этот автобус
[01:01:29.020 --> 01:01:35.660]  объединяется с каким-то другим листом. В этот момент тогда как бы испорчены все кроме одного,
[01:01:35.660 --> 01:01:43.380]  но там уже для простоты можно считать, что испорчены все. Потому что так как мы минимум,
[01:01:43.380 --> 01:01:47.020]  так как мы элементы можем достать, вот, кстати, обратите внимание, так как у нас
[01:01:47.020 --> 01:01:53.220]  элементы хранятся в автобусах, в листах, то, кстати, вот доставать элемент по итератору на самом
[01:01:53.220 --> 01:01:59.100]  деле очень просто. То есть это может просто привести к тому, что мы тут попытались достать
[01:01:59.100 --> 01:02:08.700]  минимум из какого-то листа, а он опа, пустой, там все уже это убежали. Вот, ну в этом случае мы
[01:02:08.700 --> 01:02:14.780]  говорим, ладно, так убираем этот автобус, достаем еще. И так пока, ну где-то у нас элементы были,
[01:02:14.780 --> 01:02:19.740]  поэтому там удалять, на самом деле, да, мы оставим. Вот, да, то есть не путать с дикриски им, пожалуйста.
[01:02:19.740 --> 01:02:26.420]  То есть мы как бы не можем сказать там человеку лучше, потому что там, ну, то есть так, дикриски,
[01:02:26.500 --> 01:02:38.740]  хотя дикриски сделать можно, ладно. Ну, давайте, ладно, на всякий случай в кавычках напишу,
[01:02:38.740 --> 01:02:44.380]  потому что это небезопасная операция, конечно, вот, но хотя, то есть в принципе, то есть она там
[01:02:44.380 --> 01:02:48.500]  в потенциал тоже нам кое-что испортит, поэтому там, поэтому, может, лучше на всякий случай,
[01:02:48.500 --> 01:02:57.940]  давайте мы ее не будем говорить, вот. Хотя, ничего, нет, понимаете, нет, то есть теоретически можно
[01:02:57.940 --> 01:03:04.020]  сказать, если элемент уже находится в автобусе, в котором находится еще кто-то кроме него, то в
[01:03:04.020 --> 01:03:11.140]  принципе, да, его можно уже сделать дикриски, в общем-то, ничего не поменяется. Да, но проблема,
[01:03:11.140 --> 01:03:15.340]  но если он максимальный, а он, в общем-то, тоже, кстати, с точки зрения анализа будет считаться
[01:03:15.340 --> 01:03:19.900]  испорченным, на самом деле, я вам забираю вперед скажу, поэтому проблема будет только в том,
[01:03:19.900 --> 01:03:30.620]  что если этот элемент на самом деле еще не попорчен. Чего? Ну, тогда, понимаете,
[01:03:30.620 --> 01:03:36.220]  но эти автобусы тоже в какой-то структуре сранятся, вот чем проблема, и тогда, и это там то,
[01:03:36.220 --> 01:03:43.500]  что он стал меньше, может, ты там, можешь привести каким-то нетривиальным сфтапом, и это, и это не
[01:03:43.500 --> 01:03:57.900]  очень хорошо. Чего? Какую? Ну, это будет другая структура. Нет, просто это будет другой структуре.
[01:03:57.900 --> 01:04:02.180]  Нет, понятно, что дикриски можно сделать за, там, выпили этот элемент и вставь его под новым
[01:04:02.180 --> 01:04:07.900]  именем, конечно, но тогда это как бы будет не завод единица, а завод вот этой варианте будет,
[01:04:07.900 --> 01:04:14.460]  получается, если вставлен, там, получается, дикриски тоже нужно считать вставкой. Вот,
[01:04:14.460 --> 01:04:19.980]  поэтому тут вот с этим аккурат, то есть в конце мы можем подумать на тему того, нельзя ли сделать
[01:04:19.980 --> 01:04:33.260]  дикриски. Так, тихо, тихо, тихо. Нет, там вообще другая технология и даже другая обратная функция
[01:04:33.260 --> 01:04:41.860]  термана. Тем более, да, Torub работает на числах, то есть там, напоминаю, мы ищем кратчайшее
[01:04:41.860 --> 01:04:47.140]  расстояние, только когда веса А не отрицательные, В вкладываются в битность вашего компилятора,
[01:04:47.140 --> 01:04:55.980]  но других ограничений нет, тогда мы гарантируем, что мы все найдем за В плюс Е. Да, в общем,
[01:04:55.980 --> 01:04:59.660]  где битность может быть там какая-то в каждое время и ограниченной, но сколь угодно большой.
[01:04:59.660 --> 01:05:06.220]  Вот, но об этом мы там, о таких вещах мы будем еще отдельно разговаривать, так сейчас мы говорим
[01:05:06.220 --> 01:05:12.860]  о камешках. Значит, камешка предлагается делать так, значит, внимание, сейчас вот такая первая
[01:05:12.860 --> 01:05:21.500]  нетривиальность будет, смотрите. Давайте попилим, то есть попилим эти вот блоки элементов, то есть
[01:05:21.980 --> 01:05:38.780]  элементы попилим на блоки. В каждом блоке будет два Эпсилон-Н элементов. Да, да, мы все еще,
[01:05:38.780 --> 01:05:45.260]  мы решаем задачу Нирсорда. Значит, в каждом блоке будет, допустим, два Эпсилон-Н элементов,
[01:05:45.340 --> 01:05:54.140]  допустим, округленных век. Вот, без особого, ну там так, да, можно, видимо, без особого
[01:05:54.140 --> 01:06:06.740]  ограничения обществе там считать, что во всех блоках ровно столько элементов. Вот. И возникаю,
[01:06:06.740 --> 01:06:20.300]  ну вот, значит, что с ними теперь хочется делать? Вот. Значит, хочется с ними делать вот что. Так
[01:06:20.300 --> 01:06:26.140]  как их два Эпсилон-Н, то заметим, что в момент начала работы с каждым блоком, то есть откуда эти
[01:06:26.140 --> 01:06:31.300]  последствия элементов бралась, мы их пихнули, еще раз напомню, да, мы все элементы наши Н,
[01:06:31.300 --> 01:06:36.780]  этих элементов, которые мы хотим типа сортировать, значит, мы их пихнули в кучу,
[01:06:36.780 --> 01:06:44.820]  просто Эпсилон-Н элементов, а потом достали и выписали. То есть такой софт-хипсорт опять
[01:06:44.820 --> 01:06:57.940]  выполнили, да. Вот. Но про каждый элемент мы знали, когда он испортился. Понятно, да? Так вот,
[01:06:58.740 --> 01:07:03.740]  нам интересное следующее. Заметим, что вот в момент начала обработки, скажем, вот этого блока,
[01:07:03.740 --> 01:07:16.180]  да, то есть как минимум Эпсилон-Н элементов были не испорчены, правда? То есть какие-то элементы
[01:07:16.180 --> 01:07:20.340]  так и не испортились, то есть может быть кто-то под своим именем, собственно, всю эту систему
[01:07:20.340 --> 01:07:34.260]  прошел. Вот. То есть как-то вот. А кто-то наоборот. А кто-то когда-то испортился в процессе. А кто-то
[01:07:34.260 --> 01:07:38.220]  уже был испорчен на этот момент. Но таких испорченных не более, чем Эпсилон-Н, значит,
[01:07:38.220 --> 01:07:45.220]  не менее, чем Эпсилон-Н. Тех, кто испортился, если испортился, то уже где-то здесь. Так вот.
[01:07:46.020 --> 01:07:53.860]  Если мы про каждый элемент храним, когда он испортился, то тогда идея такая. Давайте возьмем все
[01:07:53.860 --> 01:08:07.540]  элементы, которые испортились именно внутри блока. На каждый из блоков. Я в каждом блоке такое делаю.
[01:08:07.540 --> 01:08:14.380]  То есть вот я рассматриваю, то есть вот эти элементы у меня будут не испорчены,
[01:08:14.380 --> 01:08:31.700]  не испорченные на момент начала блока. Нет. Когда вы вставляем элементы, он изначально может
[01:08:31.700 --> 01:08:40.180]  быть даже не испорчен. Но когда он там портится, это Куча сама решает, когда его испортится. Нет.
[01:08:40.180 --> 01:08:45.580]  Куча, смотрите. Куча, правда, гарантирует один вариант. Она гарантирует, что псевдоним элемента
[01:08:45.580 --> 01:08:53.380]  никогда не уменьшается. То есть как бы неожиданно. То есть условно говоря, если она уже там внутри
[01:08:53.380 --> 01:09:00.500]  себя для своих целей отобрала у элемента доброе имя, то она ему уже не вернет. Вот. Ну вот. Такая вот
[01:09:00.500 --> 01:09:15.060]  злая Куча. Чего? Злая Куча? Нет, она не злая, она мягкая. Нет, на самом деле просто не надо ее как бы
[01:09:15.060 --> 01:09:26.940]  воспринимать как злу. Нет, она просто, она просто немножко вставшая, понимаете. То есть поверьте,
[01:09:27.420 --> 01:09:41.140]  если у вас будет 100 тысяч детей, давайте. Слушайте, проверьте, знаете, на самом деле
[01:09:41.140 --> 01:09:46.620]  уставшие родители в какой-то момент уже там действительно могут уже действительно путать
[01:09:46.620 --> 01:09:55.220]  даже двоих детей. А если это еще и близнецы, то в адекватном состоянии нет, но уже когда общая
[01:09:55.220 --> 01:10:03.300]  усталость на эти проблемы такая действительно все-таки есть. Так сейчас, тихо, тихо, тихо. Какой вопрос?
[01:10:03.300 --> 01:10:17.660]  Почему удаляли? Ну смотрите, имеется в виду на момент начала блока. Потому что мы знаем,
[01:10:17.660 --> 01:10:22.900]  что если мы добавили в кучу элементов когда-то, то в каждый момент времени в куче находится не
[01:10:22.900 --> 01:10:30.300]  более чем epsilon n испорченных блоков. Ну вот твой элемент. Рассмотрим вот этот момент времени.
[01:10:30.300 --> 01:10:37.420]  В этот момент времени было не более чем epsilon n элементов, которые были испорчены. Но вот в
[01:10:37.420 --> 01:10:43.060]  этом блоке среди вот этих элементов их всего два epsilon n. Значит как минимум epsilon n элементов
[01:10:43.060 --> 01:10:49.020]  на этот момент были не испорчены. То есть давайте на момент начала блока я вот тут стрелочку нарисую.
[01:10:49.020 --> 01:10:58.100]  Так вот. Ну допустим, я идентифицировал там про каждый элемент, что они там были
[01:10:58.100 --> 01:11:07.220]  испорчены на этот момент или нет. Так вот, идея такая. Значит, идея такая. Внимание. Давайте-ка
[01:11:07.220 --> 01:11:18.420]  среди этих элементов найдем x итой. Ну где вот у меня вот это первый блок, это второй блок и
[01:11:18.420 --> 01:11:24.180]  так далее, это будет итой блок. И после вот это вот будет x итой. Ой, так, что я все пишу одним
[01:11:24.180 --> 01:11:46.700]  цветом, когда у меня куча маркеров. Вот. Давайте, о. Да. Вот. Вот, значит смотрите, вот x иt. То есть
[01:11:46.700 --> 01:11:55.300]  что это такое? То есть это минимальный в блоке вот этот вот обведенный элемент. Ну минимальный
[01:11:55.300 --> 01:12:08.940]  в смысле по реальному ключу. Естественно, а не по псевдониму. Понятно, да? Да, нет, нет, нет. Смотрите.
[01:12:08.940 --> 01:12:14.660]  Ну смотрите, заметим, что я из каждого блока могу такой достать. Вот будет у меня такой x1,
[01:12:14.660 --> 01:12:21.740]  тут у меня будет x2, тут у меня будет еще что-то и так далее. Ну начнем с простого утверждения.
[01:12:21.740 --> 01:12:36.740]  Ну на самом деле утверждение такое. x1 меньше x2, меньше x3, меньше и так далее, меньше xl. Ну пусть у
[01:12:36.740 --> 01:12:43.020]  меня l это количество блоков. Ну давайте еще для простоты считать, что все элементы попарно
[01:12:43.020 --> 01:13:08.980]  различны. Вот. Вот такая радость. Вот. Чему это нас приводит? Почему это так? Давайте,
[01:13:08.980 --> 01:13:24.420]  вот простой вопрос. Почему это так? Не обязательно, потому что этот элемент может быть здесь,
[01:13:24.420 --> 01:13:41.020]  а может быть и здесь. Нет, ну не совсем так. Минимальный элемент, да, хорошо, вначале не были
[01:13:41.020 --> 01:13:47.620]  покорапчены все, но мы же выбираем минимальный не вообще, а выбираем минимальный из вот тех,
[01:13:47.620 --> 01:13:52.580]  чтобы кого достали вот на первом шаге. То есть из них минимально может оказаться кто угодно буквально.
[01:13:52.580 --> 01:14:08.700]  Ну можно, ну вот. Ну и что? Ну может он, когда его сначала покорапчили, потом достали,
[01:14:08.700 --> 01:14:16.900]  такое тоже могло быть. Нет, мы выбираем элемент, который был в первом блоке,
[01:14:16.900 --> 01:14:20.580]  выбираем элемент, который не покорапчен вот в этот момент времени. Но в тот момент,
[01:14:20.580 --> 01:14:30.540]  когда его доставали, он уже вполне мог быть покорапчен. Да, вот это важно. Ну нет, нет,
[01:14:30.540 --> 01:14:36.220]  они, ну когда мы уже достали их, мы уже не покораптите. Но идея такая, но скажем так,
[01:14:36.300 --> 01:14:43.900]  когда вы достаёте элемент, он может быть покорапчен. Да, мы, нет, ну как сказать,
[01:14:43.900 --> 01:14:48.060]  нет, он сформулирует так, мы можем настроить кучу так, что она вам скажет ещё под каким
[01:14:48.060 --> 01:14:59.620]  псевдонимом проходил этот элемент, конечно, да. Вот, соответственно, то есть это да, она очень
[01:14:59.620 --> 01:15:04.780]  добрая куча, она будет вам сообщать не только её текущий псевдоним, но можете ещё сказать,
[01:15:04.780 --> 01:15:11.540]  когда мы, когда вообще отличный от неё псевдоним вообще у неё появился. То есть в этом смысле куча,
[01:15:11.540 --> 01:15:17.660]  в этом смысле куча вполне добрая. Это, конечно, парадоксально, да, то есть она как бы в какой-то
[01:15:17.660 --> 01:15:25.140]  момент начинает путать детей, но точно помнит, в какой-то момент она начала это делать. Вот, вот.
[01:15:25.140 --> 01:15:40.500]  Вот, то есть получается вот такая радость. Ну так почему же они ассортированы, давайте
[01:15:40.500 --> 01:16:04.140]  внимательно ещё раз поймём. Так. Почему все? От этого пытаемся доказать.
[01:16:05.140 --> 01:16:18.060]  Раз он был неспрощен на начало блока, то... То? У нас было, у нас были все оставшиеся,
[01:16:18.060 --> 01:16:28.300]  которые точно лучше, ну то есть вот правый конец блока точно больше, а то, что мы какие-то штуки
[01:16:28.300 --> 01:16:35.660]  экстрактные, это не сильно повлияет. Ну, то есть мы до хитого начало блока экстрактные какие-то штуки,
[01:16:35.660 --> 01:16:43.700]  и то, что они не сильно на оценку повлияют. Нет, тут не оценка, тут пока простое утверждение.
[01:16:43.700 --> 01:16:47.620]  Ну да, на самом деле, действительно, то есть идея в том, что рассмотрим вот этот элемент,
[01:16:47.620 --> 01:16:55.940]  начало этого блока. Утверждение, значит хитый был не испорчен на этот момент, да? Из этого следует
[01:16:55.940 --> 01:17:06.820]  маленькая простая вещь. Все вот эти элементы, они меньше, чем х. Утверждение, все элементы из первых
[01:17:06.820 --> 01:17:14.340]  именно... Нет, вот это утверждение? А так, на самом деле, более продвинутые, на самом деле, да. То есть
[01:17:14.340 --> 01:17:21.540]  продвинутая версия утверждения, так сказать, утверждение продвинутая, так сказать, для продвинутых,
[01:17:22.420 --> 01:17:28.620]  для продвинутого потока, да? Не, не то, что да. Да, в основном потоки это утверждение почему-то пропускают.
[01:17:28.620 --> 01:17:40.500]  А, ну ладно, к чему их оттаить, там пропускают всю структуру целиком. Вот, вот. Вот, значит утверждение
[01:17:40.500 --> 01:17:59.860]  продвинутые. Ну вот, все, значит, для любого и, верно, что х и больше любого элемента из первых
[01:17:59.860 --> 01:18:21.860]  и минус одного блока. Вот такое утверждение. Да, да, идея такая, что, заметьте, что пока
[01:18:21.860 --> 01:18:26.420]  элемент не попортится, все элементы, которые достаются из кучи, заведомо меньше его.
[01:18:26.420 --> 01:18:31.860]  Потому что они его меньше, как минимум, по псевдониму, совпадающую с ним, а значит, и
[01:18:31.860 --> 01:18:37.460]  реально они меньше. То есть они там могут быть в рандомном порядке, но они точно как бы меньше.
[01:18:37.460 --> 01:18:49.020]  Вот. То есть вот такая вот неожиданная красота. Потому что х и Т на момент начала блока не
[01:18:49.020 --> 01:19:00.980]  покорапчен. Мы так его определили. Да, вот эти все элементы обведены, это не испочено на момент
[01:19:00.980 --> 01:19:07.420]  начала блока. А х это это минимальный обведенный вот этот элемент. Да, то есть вообще верно, то есть
[01:19:07.420 --> 01:19:12.420]  вообще такое, то есть важное свойство кучи. Пока элемент не покорапчен, все элементы,
[01:19:12.420 --> 01:19:18.420]  которые достаются из кучи, меньше его. Вот когда он становится покорапчен, там могут быть проблемы.
[01:19:18.420 --> 01:19:32.500]  Но он может быть покорапчен, пока мы достаем вот эти элементы, вот этот элемент вполне мог
[01:19:32.500 --> 01:20:02.420]  покораптиться. Ну, может быть, покорапчен и потом. Нет, может, нет, после блока его
[01:20:02.420 --> 01:20:08.020]  уже в куче нету, но может быть он может его под своим честным именем и достали. Такое тоже могло
[01:20:08.020 --> 01:20:20.740]  быть, но могло и не быть, поэтому мы не заморачиваемся. Ну, в какой-то момент будем. Нет, сначала начнем
[01:20:20.740 --> 01:20:31.420]  с простого, что у нас х и Т сам по себе больше, чем все вот эти элементы. Да, по факту, да,
[01:20:31.420 --> 01:20:36.460]  можно даже более сложно это, но, по крайней мере, в такое утверждение поверили. А исходя из этого,
[01:20:36.460 --> 01:20:45.060]  мы уже в принципе следует вот эта штука. Нет, ну, на самом деле для сортировки за нужную нам симптомику
[01:20:45.060 --> 01:20:53.300]  этого уже хватает. Почему? Потому что мы нашли, потому что мы таким образом, обратите внимание,
[01:20:53.300 --> 01:20:59.980]  нашли под последовательность длины l, причем l равно, обратите внимание, чему? n поделить на
[01:20:59.980 --> 01:21:14.500]  2n епсилон, то есть равно 1 делить на епсилон. Ну, на 2 епсилон, прошу прощения. Вот, то есть в принципе
[01:21:14.500 --> 01:21:19.060]  это уже, но это уже это не победа, но почти победа, то есть близко к победе. Почему? Потому что мы
[01:21:19.060 --> 01:21:22.220]  нашли такой под последовательность. В принципе, мы теперь можем сделать так. А давайте для каждого
[01:21:22.220 --> 01:21:27.940]  элемента, оставшегося из остальных элементов, просто бинпоиском определим, между какими они
[01:21:27.980 --> 01:21:38.860]  должны встать. А симпточка как раз вот та, что нам надо. Но правда, гарантирует ли это, что они встанут на нужные
[01:21:38.860 --> 01:21:46.540]  позиции? Ну, там на достаточно адекватные позиции? Ну, конечно же, еще нет. Потому что само по себе,
[01:21:46.540 --> 01:21:50.180]  конечно, теоретически может оказаться, что между вторым и третьим, на самом деле,
[01:21:50.180 --> 01:22:02.500]  должно быть напихан прям половина массива. Ну, или по крайней мере из того, что мы сказали ранее,
[01:22:02.500 --> 01:22:10.420]  совсем напрямую, это не следует. Ну, а есть подозрение, что вряд ли между x2 и x3 в реальном
[01:22:10.420 --> 01:22:18.180]  массиве будет напихано прям очень много элементов. Есть у нас почему-то такое подозрение. А давайте
[01:22:18.180 --> 01:22:33.820]  подумаем, почему. Вот давайте, что нам нужно, что нам не хватает вообще. Ну да, реальная позиция x2,
[01:22:33.820 --> 01:22:47.540]  ну давайте думать. То есть, как вы смотрите, да, давайте подумаем. Нет, ну как, ну внутри блока,
[01:22:47.540 --> 01:22:54.420]  ну тут, конечно, непонятно, но давайте подумаем вообще. Но нет, давайте подумаем вот о чем. Хорошо.
[01:22:54.420 --> 01:23:09.860]  Ну давайте подумаем. Давайте попробуем для каждого x2 действительно оценить,
[01:23:09.860 --> 01:23:16.180]  сколько элементов меньше его там точно и сколько элементов больше его точно. Давайте попробуем
[01:23:16.180 --> 01:23:39.580]  сделать. Я сейчас просто тут сотру немножко. Вот. А, уже пробили? Так, ну давайте поправим. Ну
[01:23:39.580 --> 01:23:46.420]  давайте сравним выводы. И так, значит, действительно, то есть рассмотрим вот этот вот блок, в котором есть
[01:23:46.420 --> 01:23:53.980]  вот этот элемент x2 и не буду я его сейчас вот, да. Смотрите, все вот эти элементы, они заведомо меньше
[01:23:53.980 --> 01:24:06.980]  x2, правда? Почему? То есть, ну вот, ну понятно, да, мы уже убедили, что они все меньше. Их сколько? Их 2
[01:24:06.980 --> 01:24:24.860]  епсилон n на и минус 1. Ну хорошо. Вот. Неплохо, да? Вот. То есть, все эти элементы меньше. То есть, получается,
[01:24:24.860 --> 01:24:32.660]  то есть, то есть, получается слева от него, то есть, получается слева от этого элемента, да? Ну то есть,
[01:24:32.660 --> 01:24:38.380]  нас интересует что? Сколько, мы думаем, сколько инверсии этот элемент вообще сейчас нам создает?
[01:24:38.380 --> 01:24:47.940]  Вот сколько существует инверсий с участием этого элемента? Ну нет, не совсем. Вот есть вот эти
[01:24:47.940 --> 01:24:56.020]  элементы. Вот эти элементы с ним инверсию могут создавать от слова вполне, да? Вот же, я бы так
[01:24:56.020 --> 01:25:07.500]  сказал. Все вот это, на самом деле, дает не более чем 2 епсилон n инверсий. Ну это другой вопрос.
[01:25:07.500 --> 01:25:13.420]  Оценить сверху так можно. А теперь заметим, сколько инверсии этот элемент создается вот этими
[01:25:13.420 --> 01:25:40.140]  элементами? Ну вот. На самом деле, я знаю. Так, давайте внимательно думать. Ну давайте так. Вот в
[01:25:40.140 --> 01:25:49.820]  этот момент, ну, в этот момент есть сколько-то непокоррапченных элементов, да? То есть они,
[01:25:49.820 --> 01:25:54.780]  но заметим, что все элементы, которые в этот момент не покоррапчены, заведомо больше нас,
[01:25:54.780 --> 01:26:01.420]  правда? Но так, то есть, получается, то есть, в этот момент времени только покоррапченные элементы
[01:26:01.420 --> 01:26:09.820]  могут случайно оказаться меньше, чем х. Да? Нет, вообще справа. Вот начиная с этого момента. Вы
[01:26:09.820 --> 01:26:16.740]  плюс первым и далее в блоках. Там все эти, то есть только те, которые вот в этот момент покоррапчены,
[01:26:16.740 --> 01:26:22.900]  могут оказаться меньше его. Но их у нас всего, таких покоррапченных, не более чем епсилон n,
[01:26:22.900 --> 01:26:29.420]  да? То есть, получается, тут тоже не более чем епсилон n инверсий. То есть, на самом деле,
[01:26:29.420 --> 01:26:33.660]  можно сказать, вот тут не более чем епсилон n инверсий, и в этом блоке не более чем два
[01:26:33.660 --> 01:26:50.940]  епсилон n инверсий, и они, в принципе, могут даже пересекаться. Что-что? Ну там, ну, не важно,
[01:26:50.940 --> 01:26:57.020]  на самом деле. То есть, ну, можно так уточнять, но это уточнение уже асимпатического смысла не даст.
[01:26:57.020 --> 01:27:04.060]  Потому что, смотрите, если мы гарантируем, что рядом, что каждый элемент, то есть, у вас с
[01:27:04.060 --> 01:27:11.140]  каждым элементом связаны не более чем, получается, 3 епсилон n инверсий. Вот с каждым из этих, да?
[01:27:11.140 --> 01:27:19.900]  Что это означает? Ну, это означает маленькую приятную вещь. Это означает, что каждый из этих
[01:27:19.900 --> 01:27:30.780]  элементов уже отстоит от своей позиции не более чем на епсилон n. Ну ладно, на 3 епсилон n, хорошо,
[01:27:30.780 --> 01:27:40.460]  я наврал. Вот, то есть, получается, мы научились находить под массив размера вот 1 делить на 2
[01:27:40.460 --> 01:27:46.660]  епсилон, так что каждый из этих элементов отстоит от правильной позиции не более чем на 3 епсилон n.
[01:27:46.660 --> 01:27:52.660]  То есть, в принципе, означает это, то есть, это что означает? По факту это означает следующее,
[01:27:52.660 --> 01:27:59.060]  что между каждым из этих элементов, если вы bin поиском будете вставлять, будет этих элементов не более
[01:27:59.060 --> 01:28:08.740]  чем 6 епсилон n, вот, элементов между ними. То есть, в принципе, это означает, что если вы проделаете
[01:28:08.740 --> 01:28:13.780]  этот алгоритм, будет гарантироваться, что каждый элемент отстоит от своей правильной позиции не
[01:28:13.780 --> 01:28:24.660]  более чем на, получается, даже не 6 епсилон n, а 6 епсилон n. Понимаете, да? Вот, а как сделать,
[01:28:24.660 --> 01:28:32.420]  превратить 6 епсилон n в епсилон n? Да, просто сказать, что куча, да, то есть, давайте сделаем
[01:28:32.420 --> 01:28:38.740]  кучу не на тот епсилон, а на епсилон поделить на 6, и в общем-то все. Вот, то есть, это стандартная
[01:28:38.900 --> 01:28:45.460]  анализовская, да? Ну, знаете, как бы, я помню на лекции, вот у нас лектор была такая, вот она,
[01:28:45.460 --> 01:28:49.620]  то есть, действительно, там теория, то есть, там теория, что докажут, что это стремится куда-то
[01:28:49.620 --> 01:28:54.580]  или что-то еще, и там говорят, пусть, ну вот, и там пусть дельта равно, и дальше заподробительная
[01:28:54.580 --> 01:29:00.220]  формула. Тогда там все, все схлопывается, схлопывается, схлопывается, у вас в конце получается не более чем
[01:29:00.220 --> 01:29:05.300]  епсилон. То есть, все, да, то есть, как бы, на уровне изучения доказательства хорошо, но как бы
[01:29:05.300 --> 01:29:09.380]  возникает вопрос, а как это доказательство изобрести? Но когда вы изобретаете, у вас часто получается,
[01:29:09.380 --> 01:29:13.460]  что давайте возьмем вот такое дельта, пошаманим, пошаманим, докажем, что у вас все меньше,
[01:29:13.460 --> 01:29:21.140]  либо равно не епсилон, а 5 епсилон, но вас это устраивает. Вот, потому что там подгоним,
[01:29:21.140 --> 01:29:26.060]  значит, дельта в 5 раз меньше, ну или там во сколько-то нам надо, и скажем, что мы победили.
[01:29:26.060 --> 01:29:35.300]  Да, уменьшим по епсилон просто в куче изначально. Просто утверждение такое,
[01:29:35.300 --> 01:29:38.940]  то есть, давайте все это проделаем не для того епсилон, который нам изначально дали,
[01:29:38.940 --> 01:29:46.020]  а в 6 раз меньше. Вот, и тогда, и тогда мы просто вот погарантируем. Вот, то есть, на самом деле,
[01:29:46.020 --> 01:29:50.980]  можно еще попытаться подумать, что вот эту вот фазу до упихивания элементов куда надо,
[01:29:50.980 --> 01:29:58.060]  на самом деле, там автор умеет делать за линию даже. Вот не бинпоисками вот этими, а за линию.
[01:29:58.060 --> 01:30:06.380]  Вот, ну там чисто за счет того, что можно еще про каждый, ну там можно доказать, что там,
[01:30:06.380 --> 01:30:18.300]  видимо, там что-то типа, то есть, суммарно, то есть, там видимо, ну там просто идея возникает
[01:30:18.300 --> 01:30:22.620]  примерно следующая. Смотрите, то есть, давайте, то есть, давайте, то есть, у нас изначальные
[01:30:22.620 --> 01:30:28.860]  элементы вот как-то расположены, да, вот как-то, да, и теперь возникает вопрос. Давайте рассматривать
[01:30:28.860 --> 01:30:33.780]  у каждого элемента, сколько он создает инверсии именно с вот этими иксами, да, и будем говорить,
[01:30:33.780 --> 01:30:37.780]  что вот если вот, возьмем вот этот элемент и говорим, так, если он создает инверсию с этим иксом,
[01:30:37.780 --> 01:30:43.340]  значит, переместим его в этот элемент и посмотрим на там инверсию с этим, если так вот, будем
[01:30:43.340 --> 01:30:47.920]  двигать и так далее. То есть, будем тогда их вставлять не за логарифом один делит на епсилон бен
[01:30:47.920 --> 01:30:54.900]  поиском, да, а вот прям честными вот этими вставками вот за уменьшение количества инверсий, да, вот,
[01:30:54.900 --> 01:31:01.420]  и тогда окажется, ну окажется, что суммарно этих инверсий, там получается, что-то едва ли не линия,
[01:31:01.420 --> 01:31:08.780]  вот именно вот с ними получается инверсия линия, ну потому что там расстояние, ну потому что, ну там
[01:31:08.780 --> 01:31:12.260]  вот по каким-то причинам происходит, можете там почитать отдельно, то есть, принципиального смысла
[01:31:12.260 --> 01:31:19.140]  это особо не имеет, но вот как бы идея такая. Так что вот таким образом получается, можно делать
[01:31:19.140 --> 01:31:26.740]  около сортировку. Вот, то есть, это вот, но это мы на самом деле, то есть, основная цель этого была,
[01:31:26.740 --> 01:31:32.260]  видимо, просто понять основные свойства кучи, понять, о чем она вообще, чтобы потом смотреть,
[01:31:32.260 --> 01:31:36.100]  как ее строить. То есть, конечно, основная цель и, возможно, даже едва ли не единственная
[01:31:36.100 --> 01:31:42.260]  на текущий момент это, что вот мы именно 100 умеем так круто строить. Вот, но, впрочем,
[01:31:42.260 --> 01:31:53.020]  могут быть какие-то другие, наверное, применения. Я не как, я просто сказал, что как-то это в статье
[01:31:53.020 --> 01:32:00.220]  доказано. Я конкретно этого не доказывал. То есть, нам для наших целей достаточно только показать,
[01:32:00.220 --> 01:32:07.580]  что расстояние между вот этими, каждым из этих элементов не происходит с 6 εn. Ну и еще там,
[01:32:07.580 --> 01:32:12.860]  что там, слева от этого не более, чем с 6 εn, справа от этого не более, чем с 6 εn, вот это.
[01:32:12.860 --> 01:32:24.220]  Нет, мы доказали. Просто каким методом? Мы же как бы добиваем в конце это просто бинпольском,
[01:32:24.220 --> 01:32:28.380]  да, то есть, мы там для каждого элемента просто бинпольском ищем, куда его надо вставлять. Вот,
[01:32:28.380 --> 01:32:41.980]  это мы доказали. А то, что там инверсия линию, мы не доказывали. В нашем случае нет. Нет,
[01:32:41.980 --> 01:32:47.380]  а зачем? У нас и так получился алгоритм за n лока 1 делить на ε. Ну, то есть, было бы круче,
[01:32:47.380 --> 01:32:54.100]  конечно, если мы каждую фазу, кроме кучи, делали за отn, конечно, но настолько мы упсиваться не
[01:32:54.100 --> 01:33:04.700]  будем. Нет, это было уже совсем раньше. Нет, добиться, чтобы инверсии было не более,
[01:33:04.700 --> 01:33:09.220]  чем ε2, это было совсем просто, мы это обсуждали, да, то есть, это с самого начала. Так можно ничего
[01:33:09.220 --> 01:33:15.020]  не делать, да. У нас, в общем-то, и сейчас инверсии может быть ε2, ну или там порядка такого,
[01:33:15.020 --> 01:33:20.340]  но как бы нам это не надо. Нам надо, чтобы каждый элемент от своей правильной позиции находился не
[01:33:20.340 --> 01:33:32.540]  более, чем на εn влево или вправо. А определение около сортировки такое,
[01:33:32.540 --> 01:33:36.620]  каждый элемент находится не более, чем εn, а своей правильной позиции.
[01:33:36.620 --> 01:33:59.660]  А что до этого? Нет. Да, то есть, мы просто усилили требования, по сути. Ну да. Ну,
[01:34:00.260 --> 01:34:08.860]  гирсор два хард или медиум. Так, ну ладно, если еще тут какие-то вопросы, прежде чем мы перейдем
[01:34:08.860 --> 01:34:17.700]  собственно к тому, а как она там вообще внутри устроена. Так, ну ладно, если вопросов нет,
[01:34:17.700 --> 01:34:24.540]  тогда перерыв. Смотрите, да, ну, к сожалению, тут действительно во время перерыва мы обнаружили,
[01:34:24.540 --> 01:34:29.420]  конечно, некоторые уточнения. То есть, к сожалению, да, то, что расстояние между ними
[01:34:29.420 --> 01:34:39.260]  6 εn на основании чистой инверсии мы утверждать не можем. Да. Ну, то есть, мы сделали вывод такой,
[01:34:39.260 --> 01:34:46.580]  что суммарное число инверсии у х этого х плюс первого товарища это 6 εn. Но на самом деле из
[01:34:46.580 --> 01:34:54.700]  этого расстояния не следует, что расстояние между ними реально будет именно 6 εn. То есть,
[01:34:54.700 --> 01:34:59.340]  потому что, ну вот, то есть, потому что расстояние это не особо отношение имеет. Ну, потому что тот,
[01:34:59.340 --> 01:35:05.980]  чего? А, пожалуйста, конечно. Вот, даже хорошо будет. Вот, то есть, на самом деле правильное
[01:35:05.980 --> 01:35:13.380]  рассуждение выглядит так. Рассмотрим элементы х и х и плюс первое. То есть, заметим, что мы с ними
[01:35:13.380 --> 01:35:19.340]  сделали вот какое-то 6 εn инверсии, то есть, подвигали их куда-то, да, и они оказались вот в этом
[01:35:19.340 --> 01:35:26.180]  массиве. Но в этом массиве они оказались не на одной позиции, не на одном месте, а в соседних
[01:35:26.180 --> 01:35:35.780]  блоках. Это означает, что расстояние между ними не более чем 4 εn, правда? Ну, потому что они
[01:35:35.780 --> 01:35:40.780]  находятся, ну, вот в текущем массиве каждый эти элементы находятся в соседних блоках. Значит,
[01:35:40.780 --> 01:35:48.020]  расстояние 4 εn, да. Но при этом каждый из них находится не более чем на 3 εn позициях от
[01:35:48.020 --> 01:35:56.420]  своей правильной. Тогда получается суммарно отсюда, надо вывести, что тут не 6 εn, а все-таки 10.
[01:35:56.420 --> 01:36:05.420]  Вот. Так что маленькое уточнение. То есть, идея, глобально ни на что не повлияло, но вот,
[01:36:05.420 --> 01:36:15.460]  но на константу, конечно, повлияло, да. То есть, оговорочка есть. Вот такая вот радость. Такая
[01:36:15.840 --> 01:36:32.320]  радость. Вот. Ну вот, теперь пришло время думать о том, как же мы это будем реализовывать. И почему
[01:36:32.320 --> 01:36:38.140]  это будет за адекватная симптомика? Каким образом? Так. Ну для этого нам придется еще раз вспомнить
[01:36:38.140 --> 01:36:44.100]  вот эту эпическую реализацию биномиальной кучи без массивов. То есть, я помню, как я помню там.
[01:36:44.100 --> 01:36:51.660]  да, вот сейчас мы это будем, сейчас мы в этом просто будем жить
[01:36:54.800 --> 01:37:04.440]  сейчас мы в этом будем жить, сейчас мы в этом будем жить, сейчас мы в этом будем жить
[01:37:04.440 --> 01:37:14.440]  Шала лесною стороной. Увязался черт за мной. Холю моя мухи. Холю чертовщина.
[01:37:16.440 --> 01:37:28.440]  Вот. Повернула я домой снова. Черт идет за мной. Прямо на плешь ему. И послала к лешему.
[01:37:34.440 --> 01:37:49.440]  Вот. Ой. Какой безобразик. Что оно не стирается? Ну как сказать? Не, ну не-не-не, скорее всего тут будет по схеме Мещерина все-таки.
[01:37:49.440 --> 01:37:59.440]  Ну все-таки оно. Вот. То есть как-нибудь, да. Ну честно скажем. Ну честно скажем, да, Мещерин все-таки был значительно лучше.
[01:37:59.440 --> 01:38:16.440]  Он-то как был компактнее, там это просто да. А поможет? Ну давай попробуем. Так.
[01:38:20.440 --> 01:38:26.440]  Это что за трюк? Это что за трюк?
[01:38:26.440 --> 01:38:30.440]  Ничего себе. Ну-ка.
[01:38:30.440 --> 01:38:50.440]  Ага. Не-не, ну давайте сейчас начнем этой шутки, да, как удалить Мещерина с помощью спирта. Ну это как-то не надо так шутить, да.
[01:38:50.440 --> 01:39:00.440]  Не, ну зачем мне? Не, Мещерина свистеха удалить не надо.
[01:39:00.440 --> 01:39:06.440]  Хендекс это куча. А какая?
[01:39:06.440 --> 01:39:32.440]  Ну нормально. Ну как Пуфа в конце. Ладно. В общем будем постепенно ликвидировать это все. Значит метод поняли, но это можно делать как бы и по.
[01:39:32.440 --> 01:39:40.440]  Не, ну не совсем нет. Лучше не амортизировано, а как вот в очереди на шести стэках по ходу. Аккуратненько делать.
[01:39:40.440 --> 01:39:49.440]  Так вот. Итак, давайте вспоминать. Ну начало на самом деле будет бимемиальная куча. То есть по факту при достаточно маленьком эпсилон.
[01:39:49.440 --> 01:39:58.440]  То есть это просто будет немножко модифицированная бимемиальная куча. Не более того. Ну ладно, чуть более.
[01:39:59.440 --> 01:40:06.440]  Ну а тут вот С весьма неожиданная вещь. То есть идея будет такая.
[01:40:06.440 --> 01:40:14.440]  Что такое достаточно маленький эпсилон? Достаточно маленький эпсилон это когда у нас количество инверсий.
[01:40:14.440 --> 01:40:18.440]  То есть это когда у нас количество испорченных элементов ноль.
[01:40:19.440 --> 01:40:29.440]  Вот. В этом случае тогда у нас элемент вообще не будет отличаться от своей неиспорченной версии.
[01:40:29.440 --> 01:40:34.440]  Мы по сути будем в нем жить. Значит это под своим именем будет до конца жить.
[01:40:34.440 --> 01:40:41.440]  Но как мы это будем делать? Но давайте вспомним. Что вот если у меня есть бимемиальное дерево порядка 3.
[01:40:41.440 --> 01:40:49.440]  Вот какой-нибудь вот такое. Вот давайте вот так вот его нарисую.
[01:40:57.440 --> 01:41:04.440]  Ну например так. Так стоп погодите это. Да это не бимемиальное дерево.
[01:41:05.440 --> 01:41:09.440]  А что? Что мне нужно отпилить, чтобы дерево было бимемиальным?
[01:41:13.440 --> 01:41:19.440]  Да давайте отпилим 9. Ну можно 13, но я отпилю 15 так красивше.
[01:41:19.440 --> 01:41:27.440]  Вот. Это бимемиальное дерево порядка какого? Да, разумеется 3. Помните, да?
[01:41:28.440 --> 01:41:36.440]  Так вот. Мы сейчас схитрим. Значит мы напоминаем. Так давайте сейчас я возьму два маркера и буду ими что-нибудь рисовать.
[01:41:39.440 --> 01:41:50.440]  Вот. Потому что смотрите у нас будет такая цепочка. Так как у пятерочки трое детей, то пятерочка будет жить в четверном экземпляре.
[01:41:58.440 --> 01:42:06.440]  Вот. Это такая пятерочка. Вот. Почему именно столько?
[01:42:07.440 --> 01:42:16.440]  Ну потому что он будет для себя, значит один элемент будет жить для себя любимого, а каждый из остальных будет жить для своего ребенка.
[01:42:18.440 --> 01:42:19.440]  Вот.
[01:42:27.440 --> 01:42:39.440]  Х это значит тут ничего нет. Ну да, к сожалению я умею быстро рисовать фигу, поэтому нарисую вот так.
[01:42:40.440 --> 01:42:52.440]  Вот. Ну короче. Вот. Так. Здесь у нас будет висеть уже ребенок более продвинутый.
[01:42:54.440 --> 01:43:02.440]  Вот. Так нет, неправильно. Вот он будет висеть. Вот.
[01:43:02.440 --> 01:43:03.440]  Вот.
[01:43:05.440 --> 01:43:07.440]  Так. А, ну да, правильно.
[01:43:12.440 --> 01:43:24.440]  Вот. То есть вот это вот технология. Так. И, конечно, его величество. Вот. Так. Это называется. Это у нас называется старший сын.
[01:43:25.440 --> 01:43:26.440]  А почему шесть раздувалось?
[01:43:27.440 --> 01:43:39.440]  А потому что у шестерочки один ребенок. Поэтому у нее как бы есть как бы два, две инкарнации. Просто я как свободный человек и как, собственно, родитель вот этого восьмерочка.
[01:43:41.440 --> 01:43:42.440]  Вот.
[01:43:43.440 --> 01:43:56.440]  Так. Значит тут у нас девяточка, тут у нас. Так, ладно, давайте я эту восьмерочку сотру все-таки, потому что, я думаю, ее уже все запомнили. Ну или записали.
[01:43:58.440 --> 01:44:03.440]  Так что давайте вот так сделаем. Чтоб совсем красиво было. Давайте эту мы уберем.
[01:44:12.440 --> 01:44:13.440]  Вот.
[01:44:13.440 --> 01:44:39.440]  Так, смотрите. То есть вот тут такое дерево. Значит так. Значит тут важный момент. Девяточку мы будем рисовать. Вот.
[01:44:39.440 --> 01:44:48.440]  Да, что ж такое? Что мне все время хочется так низко идти? На самом деле надо вот так идти. Вот девяточка. У девяточки двое детей.
[01:44:49.440 --> 01:45:00.440]  Поэтому рисуем девяточку, рисуем девяточку. А, ну в принципе все. Да, рисуем пустоту.
[01:45:00.440 --> 01:45:02.440]  Вот. Тут у нас.
[01:45:03.440 --> 01:45:05.440]  Вот. Тут у нас.
[01:45:05.440 --> 01:45:06.440]  Вот у нас.
[01:45:11.440 --> 01:45:12.440]  Во.
[01:45:13.440 --> 01:45:14.440]  И наконец.
[01:45:28.440 --> 01:45:29.440]  Ага.
[01:45:30.440 --> 01:45:39.440]  Вот такая вот. Вот такая вот. Красота. Понятно, да? Понятно, да.
[01:45:40.440 --> 01:45:46.440]  Вот. То есть помню. Такая депритация дает возможность, конечно, делать всякие удобные вещи.
[01:45:47.440 --> 01:45:53.440]  То есть, ну как минимум, заметим, что тут у нас есть два практически указателя. Есть указатель next.
[01:45:54.440 --> 01:45:56.440]  И есть указатель child у каждой вершины.
[01:45:59.440 --> 01:46:00.440]  Вот.
[01:46:01.440 --> 01:46:02.440]  Так.
[01:46:03.440 --> 01:46:07.440]  Давайте возьмем какой-нибудь красивый цвет. Например, вот кого мы сегодня использовали. Коричневый.
[01:46:11.440 --> 01:46:12.440]  Вот.
[01:46:13.440 --> 01:46:16.440]  И введем теперь понятие rank.
[01:46:21.440 --> 01:46:23.440]  Не, коричневый плохо.
[01:46:25.440 --> 01:46:26.440]  Давайте синий.
[01:46:29.440 --> 01:46:31.440]  Давайте синий. У нас будет rank.
[01:46:37.440 --> 01:46:39.440]  Ну, принцип очень простой.
[01:46:40.440 --> 01:46:46.440]  То есть, если вершина у нас rank какого-то. Например, у нас какого-то rank. То есть, у нее столько детей.
[01:46:47.440 --> 01:46:52.440]  То значит, мы по next у нее rank plus 1 реинкарнации.
[01:46:53.440 --> 01:46:58.440]  Где? Значит, по next мы идем. Значит, это вот просто ее реинкарнации.
[01:46:59.440 --> 01:47:05.440]  И от каждого отходит child. Это, собственно, ребенок. Там ребенок rank 2, rank 1 и rank 0.
[01:47:07.440 --> 01:47:09.440]  Ну, каждая построена рекурсивно.
[01:47:10.440 --> 01:47:11.440]  Вот.
[01:47:13.440 --> 01:47:17.440]  То есть, вот тут rank у нас два. И вот тут, кстати, тоже два.
[01:47:19.440 --> 01:47:21.440]  И тут у нас один. И тут один.
[01:47:23.440 --> 01:47:24.440]  И тут rank везде.
[01:47:25.440 --> 01:47:26.440]  Ну, допустим, 0.
[01:47:34.440 --> 01:47:36.440]  Сейчас. Кто исходит, чего исходит?
[01:47:42.440 --> 01:47:44.440]  Нет, это я нарисовал изначальное дерево.
[01:47:45.440 --> 01:47:47.440]  Просто как оно выглядело в привычном нам виде.
[01:47:49.440 --> 01:47:51.440]  Вот. У нас же оно будет выглядеть вот так.
[01:47:53.440 --> 01:47:55.440]  То есть, мы заметим, что...
[01:47:56.440 --> 01:47:57.440]  Вот. То есть, вот, да.
[01:47:58.440 --> 01:48:00.440]  То есть, здесь, соответственно, тоже rank. Я давайте вот нарисую.
[01:48:01.440 --> 01:48:02.440]  Тут один. Один. И тут 0.
[01:48:05.440 --> 01:48:08.440]  Мы будем так хранить бенемиальные деревья.
[01:48:09.440 --> 01:48:10.440]  А, бенемиальные деревья. Хорошо.
[01:48:11.440 --> 01:48:12.440]  Да. Конкретно бенемиальные деревья. То есть, мы...
[01:48:13.440 --> 01:48:17.440]  То есть, как я уже сказал. То есть, мы будем строить кучу на базе бенемиальный.
[01:48:18.440 --> 01:48:21.440]  Вот. Ну, а с веселыми уголами.
[01:48:25.440 --> 01:48:27.440]  Ну, а я... Нет. Нижнего слоя не существует.
[01:48:28.440 --> 01:48:33.440]  Я его рисую просто, чтобы показать, что указатели child and next из этих вершин указывают в 0.
[01:48:34.440 --> 01:48:36.440]  Ну, в пустоту. В 0. В 0 ptr.
[01:48:39.440 --> 01:48:40.440]  Ну, нет.
[01:48:41.440 --> 01:48:43.440]  Здесь нет понятия левое и правое под дерево.
[01:48:43.440 --> 01:48:46.440]  Ну, на рисунке это так рисую? Да. Но как бы...
[01:48:47.440 --> 01:48:49.440]  Да так, да. Child левое, next правое. Да, хорошо.
[01:48:50.440 --> 01:48:51.440]  Но я могу это везде подписать.
[01:48:59.440 --> 01:49:02.440]  Ну, в принципе, можно и так, но так, на самом деле, более точно.
[01:49:04.440 --> 01:49:10.440]  Потому что, знаете, мы уже обсуждали, что тут, на самом деле, можно неожиданно красиво в этом случае делать сифтапы.
[01:49:10.440 --> 01:49:13.440]  И нам это будет пригождаться. Допустим, мы решили уменьшить элемент.
[01:49:14.440 --> 01:49:15.440]  Ну, так, в реальности мы делать не будем.
[01:49:16.440 --> 01:49:18.440]  Но, допустим, мы решили уменьшить элемент, и вот этот стал 4.
[01:49:19.440 --> 01:49:20.440]  Да?
[01:49:22.440 --> 01:49:25.440]  Тогда у нас возникла проблема. Элемент меньше своего родителя, да?
[01:49:27.440 --> 01:49:28.440]  Тогда идея такая.
[01:49:29.440 --> 01:49:32.440]  А давайте-ка вот эти элементы указателей просто тупо посвапаем.
[01:49:34.440 --> 01:49:37.440]  То есть, условно говоря, next теперь будет указывать вот сюда.
[01:49:37.440 --> 01:49:38.440]  А child будет указывать вот сюда.
[01:49:39.440 --> 01:49:40.440]  Да?
[01:49:41.440 --> 01:49:46.440]  И пробежим теперь вверх и скажем, что теперь, так как этот элемент меньше, то он теперь тут дублируется.
[01:49:49.440 --> 01:49:50.440]  Нет, я дикий.
[01:49:51.440 --> 01:49:52.440]  Нет, так как должно быть.
[01:49:53.440 --> 01:49:57.440]  То есть, мы можем получается child the next, в принципе, посвапать.
[01:49:58.440 --> 01:49:59.440]  То есть, у нас такая интерпретация.
[01:50:00.440 --> 01:50:03.440]  Это, типа, не на нас висят трое детей, а, как бы, фактически, не на нас.
[01:50:03.440 --> 01:50:06.440]  То есть, у меня есть такой двойник, который отвечает за всех детей, кроме старшего.
[01:50:09.440 --> 01:50:10.440]  Ну, да.
[01:50:17.440 --> 01:50:18.440]  Ну, не совсем так.
[01:50:19.440 --> 01:50:20.440]  На самом деле...
[01:50:21.440 --> 01:50:22.440]  Нет, там суть следующая, да.
[01:50:23.440 --> 01:50:25.440]  Потому что мы тут шли-шли-шли и меняли, а потом, как-то, как-то...
[01:50:26.440 --> 01:50:27.440]  Ну, не совсем так.
[01:50:28.440 --> 01:50:29.440]  На самом деле...
[01:50:30.440 --> 01:50:31.440]  Нет, там суть следующая.
[01:50:31.440 --> 01:50:36.440]  Да, потому что мы тут шли-шли-шли и меняли, а потом, если мы оказались левым ребенком, то есть, вот этим next, child,
[01:50:37.440 --> 01:50:41.440]  то может оказаться, что этот элемент родился меньше, и тогда вот эти уже деревья тоже надо посвапать.
[01:50:42.440 --> 01:50:43.440]  Вот.
[01:50:44.440 --> 01:50:46.440]  Ну, как-то, то есть, свапать не надо, надо остановиться, но в целом так.
[01:50:47.440 --> 01:50:48.440]  Вот, понятно?
[01:50:51.440 --> 01:50:52.440]  Вот.
[01:50:53.440 --> 01:50:56.440]  Правда... Нет, в принципе, я забираю вперед, да, заметим, что...
[01:50:57.440 --> 01:51:00.440]  Но, правда, смотрите, в чем отличие будет от Ben-Mehler деревья в будущем?
[01:51:01.440 --> 01:51:02.440]  Да, потому что... Да, что приятно?
[01:51:03.440 --> 01:51:07.440]  Ранг у нас не бывает больше логарифма, поэтому такой дикрифт и работает за логарифм, да?
[01:51:08.440 --> 01:51:10.440]  Но тут будет какая-то вопрос, какой вариант?
[01:51:11.440 --> 01:51:15.440]  Потому что сейчас мы видим, что у каждой, то есть, у нас есть, у каждой вершины есть какой-то ранг,
[01:51:16.440 --> 01:51:20.440]  и у нее child и next указывают на вершины ранга на единичку меньше.
[01:51:21.440 --> 01:51:22.440]  Да?
[01:51:23.440 --> 01:51:24.440]  Вот.
[01:51:25.440 --> 01:51:28.440]  Значит, в будущем, значит, смотрите, у нас будет два мистических вообще,
[01:51:28.440 --> 01:51:32.440]  то есть, мистических варианты, которые будут активно поддерживаться.
[01:51:33.440 --> 01:51:37.440]  Первый. Если в вершине была создана вершина, ей присвоен ранг,
[01:51:38.440 --> 01:51:40.440]  то он не меняется никогда.
[01:51:43.440 --> 01:51:46.440]  То есть, как бы все там, типа, дворянин остается дворянином всегда.
[01:51:47.440 --> 01:51:49.440]  Даже если от него разбежались дети.
[01:51:50.440 --> 01:51:55.440]  То есть, как бы он может перестать, он может расстаться со званием даренства только вместе с жизнью.
[01:51:58.440 --> 01:52:05.440]  Вот, кстати, а ну-ка, кстати, скажите, а каким образом вершина может вообще стать дворянином 57-го ранга?
[01:52:06.440 --> 01:52:10.440]  Ну да, то есть, способ только один.
[01:52:11.440 --> 01:52:16.440]  Если мы решили объединить два дерева ранга 56, то как это в данном, в таком интерпретации делается?
[01:52:17.440 --> 01:52:24.440]  Мы создаем вершину ранга 57 и подвешиваем там эти два дерева к ней кого-то на child, кого-то на next.
[01:52:25.440 --> 01:52:29.440]  Кого на child, кого на next, ну, естественно, на next того, у кого меньше корень.
[01:52:34.440 --> 01:52:38.440]  Нет, в смысле поменять. Нет, ну вот.
[01:52:39.440 --> 01:52:43.440]  Ну, конечно, в саму вершину надо писать вот этот ключ равный вот этому. Да.
[01:52:48.440 --> 01:52:50.440]  В смысле, у каждой вершины определен ранг.
[01:52:51.440 --> 01:52:56.440]  И эти, ну вот, сами эти вершины потом не обязаны быть навеки прицеплены именно к этому дереву.
[01:53:01.440 --> 01:53:07.440]  Почему непонятно? Ну, по сути, в исходном бенмяльном дереве это как бы тот же самый ранг дерева, что...
[01:53:08.440 --> 01:53:11.440]  Нет, в бенмяльном дереве есть понятие ранг, здрасте.
[01:53:12.440 --> 01:53:14.440]  Он совпадает со степенью корня, например.
[01:53:14.440 --> 01:53:16.440]  Ранги не превратились ни во что.
[01:53:17.440 --> 01:53:21.440]  У них ключи поменялись, но ранги – это святое.
[01:53:22.440 --> 01:53:26.440]  Нет, потому что заметим, что мы тут подвесили два одинаковых точки зрения рангов дерева, на самом деле.
[01:53:27.440 --> 01:53:31.440]  То есть, заметьте, что child и next, и в будущем, кстати, вот.
[01:53:32.440 --> 01:53:36.440]  Ну, то есть, по сути, по крайней мере, изначально висят одинаковые абсолютно деревья.
[01:53:36.440 --> 01:53:38.440]  То есть, там корни, у которых имеют одинаковый ранг.
[01:53:39.440 --> 01:53:41.440]  В нашем случае мы видим, он даже на единичку меньше.
[01:53:42.440 --> 01:53:44.440]  В идеальном мире это действительно так.
[01:53:45.440 --> 01:53:47.440]  Но у нас куча мягкая.
[01:53:48.440 --> 01:53:50.440]  Вот. Но мягкость, вот эти, к сожалению.
[01:53:51.440 --> 01:53:54.440]  В общем, короче говоря, иногда детей будет меньше.
[01:53:55.440 --> 01:54:00.440]  Но, в общем, в общем, мы видим, что в этой культуре, в этой культуре,
[01:54:01.440 --> 01:54:04.440]  в общем, короче говоря, иногда детей будет меньше.
[01:54:06.440 --> 01:54:11.440]  Да, мы будем, то есть, иногда детей, значит, приходится ликвидировать.
[01:54:12.440 --> 01:54:15.440]  Вот. Но там просто какая суть?
[01:54:17.440 --> 01:54:22.440]  Нет, нет, там, нет, на самом деле, ладно, там, да, кажется, что, то есть, скажем так,
[01:54:23.440 --> 01:54:27.440]  может так случиться, что у вершины ранга 57 детей будет не 57, а меньше в итоге.
[01:54:27.440 --> 01:54:30.440]  То есть, сначала было 57, возможно, когда-то, теоретически.
[01:54:31.440 --> 01:54:33.440]  Но, в принципе, потом их стало меньше.
[01:54:34.440 --> 01:54:37.440]  Но, идейно, но это, на самом деле, не подобно.
[01:54:38.440 --> 01:54:40.440]  На самом деле, детей никто особо не убивает.
[01:54:41.440 --> 01:54:43.440]  Нет, там проблема другая.
[01:54:44.440 --> 01:54:48.440]  Скорее всего, чаще всего, детей будут, там, не детей будут убивать, а на самом деле,
[01:54:49.440 --> 01:54:51.440]  пал родитель.
[01:54:52.440 --> 01:54:56.440]  Ну, что мы делаем в обычной беременной куче, когда у нас погиб родитель?
[01:54:57.440 --> 01:54:59.440]  Мы...
[01:55:00.440 --> 01:55:05.440]  Нет, тогда мы объявляем, что так, дорогие дети, вы теперь, в общем, становитесь
[01:55:06.440 --> 01:55:08.440]  самостоятельными, взрослыми людьми.
[01:55:09.440 --> 01:55:13.440]  Ну, кто-то быстро с кем-то сливается, в принципе, да, ну вот.
[01:55:16.440 --> 01:55:17.440]  Ну вот.
[01:55:18.440 --> 01:55:19.440]  Ну вот.
[01:55:20.440 --> 01:55:22.440]  Да, но это уже другая история.
[01:55:22.440 --> 01:55:23.440]  Так вот.
[01:55:25.440 --> 01:55:27.440]  Нет, друг с другом не сливаются, боже упадет.
[01:55:31.440 --> 01:55:33.440]  Не, ну да, то есть, понятно, да, что они там...
[01:55:34.440 --> 01:55:36.440]  Да, то есть, сами с собой они с лётой услится не могут,
[01:55:37.440 --> 01:55:39.440]  потому что они все попали на различных рамках, но потом всё может быть, да.
[01:55:40.440 --> 01:55:42.440]  Вот, такое может быть, да.
[01:55:43.440 --> 01:55:44.440]  Вот.
[01:55:45.440 --> 01:55:47.440]  Но здесь мы, значит, у нас куча будет мягче.
[01:55:48.440 --> 01:55:51.440]  То есть, она не будет так радикально говорить, там, типа, вот это всё, знаете.
[01:55:52.440 --> 01:55:57.440]  Понятно, что, знаете, если мы хотим, то есть, как бы, есть, конечно, идея,
[01:55:58.440 --> 01:56:00.440]  вот что делать, если мы хотим закрыть там, я не знаю, свиноферму, да.
[01:56:01.440 --> 01:56:04.440]  То есть, что мы должны сделать? Открыть клетки и сказать, свинья, аллилуйя, вы свободны?
[01:56:05.440 --> 01:56:07.440]  Ну, как бы, будет, наверное, не очень.
[01:56:10.440 --> 01:56:12.440]  Так вот, тут как-то надо поаккуратнее.
[01:56:13.440 --> 01:56:15.440]  То есть, если с родителем произошло какое-то несчастье,
[01:56:16.440 --> 01:56:18.440]  ну, там, экстракт-мин какой-нибудь, да,
[01:56:19.440 --> 01:56:21.440]  то есть, его наконец, там его достали,
[01:56:22.440 --> 01:56:24.440]  и он, собственно, там улетел в мир иной за пределы чёрного ящика.
[01:56:25.440 --> 01:56:26.440]  Вот.
[01:56:27.440 --> 01:56:28.440]  Да, вот.
[01:56:29.440 --> 01:56:32.440]  Так что, соответственно, то получается, ну, вот то, как бы возить к вопросу,
[01:56:33.440 --> 01:56:35.440]  что делать с детьми? У нас будет мистическая функция,
[01:56:36.440 --> 01:56:39.440]  которая попытается, может быть, там, ценой жизни какого-нибудь ребёнка,
[01:56:40.440 --> 01:56:41.440]  на самом деле, ну, точнее так, не жизни ребёнка,
[01:56:42.440 --> 01:56:44.440]  а просто сказать, что, слушай, а давай ты, может, будешь не ребёнок,
[01:56:45.440 --> 01:56:46.440]  а давай мы тебя повысим в статусе.
[01:56:48.440 --> 01:56:51.440]  То есть, у нас самый главный вариант, то что ранди растут.
[01:56:52.440 --> 01:56:55.440]  Ну, варианты такие. Во-первых, у каждой вершины ранди не меняется,
[01:56:56.440 --> 01:56:57.440]  хотя вершина может быть ликвидирована.
[01:56:59.440 --> 01:57:05.440]  И самое главное, что у Илчайлда и у Некста одинаковый ранд, причём строго меньший.
[01:57:06.440 --> 01:57:08.440]  Ну, не обязательно меньше, но строго меньше.
[01:57:09.440 --> 01:57:10.440]  Да.
[01:57:12.440 --> 01:57:16.440]  То есть, там обнаружится, ну, работать это будет примерно так.
[01:57:16.440 --> 01:57:18.440]  Значит, первая версия звучит так.
[01:57:19.440 --> 01:57:21.440]  То есть, у нас будет мистическая операция сифт.
[01:57:22.440 --> 01:57:24.440]  Да, вот она будет так называться, сифт.
[01:57:25.440 --> 01:57:27.440]  Давайте,
[01:57:29.440 --> 01:57:31.440]  каким-нибудь хорошим...
[01:57:32.440 --> 01:57:35.440]  Ладно, будет такая чернорабочая операция сифт,
[01:57:37.440 --> 01:57:41.440]  которая будет говорить, вот она говорит, корень потерял себя,
[01:57:42.440 --> 01:57:44.440]  то есть, корень, больше не корень, не корень,
[01:57:44.440 --> 01:57:47.440]  то есть, корень, больше не корень, его уже не существует.
[01:57:48.440 --> 01:57:51.440]  Мне нужен кто-нибудь, кто его заместит.
[01:57:54.440 --> 01:57:56.440]  Как мы это будем делать?
[01:57:57.440 --> 01:58:02.440]  Ну, делать будет так, мысленно, значит, операция сифт будет работать за от,
[01:58:03.440 --> 01:58:05.440]  ну, там, в каком-то смысле длины Некста.
[01:58:07.440 --> 01:58:11.440]  И мысленно она говорит так, вот, допустим, ну, давайте вот этот свап,
[01:58:12.440 --> 01:58:16.440]  допустим, у нас не было этого свапа, то есть шестерочки на месте, все в порядке.
[01:58:25.440 --> 01:58:29.440]  Нет, путь вправо, путь понек, что это инкарнация одного и того же всегда.
[01:58:30.440 --> 01:58:31.440]  Нет, это остается.
[01:58:32.440 --> 01:58:33.440]  Просто детей может быть.
[01:58:34.440 --> 01:58:36.440]  Просто у вершины ранга 57, ранга детей может быть меньше.
[01:58:37.440 --> 01:58:38.440]  56, 55, 48.
[01:58:41.440 --> 01:58:42.440]  Вот.
[01:58:43.440 --> 01:58:46.440]  Поэтому мы попытаемся все-таки сказать, что, ладно, давайте кто-нибудь просто,
[01:58:47.440 --> 01:58:50.440]  то есть, допустим, старший Будемброк умер, значит,
[01:58:51.440 --> 01:58:55.440]  кто-то из детей просто возьмет на себя продолжать его бизнес.
[01:58:56.440 --> 01:58:57.440]  Соответственно.
[01:58:58.440 --> 01:58:59.440]  Вот.
[01:59:00.440 --> 01:59:01.440]  Так что, соответственно.
[01:59:02.440 --> 01:59:03.440]  Но теперь выясняется, как это будет делаться.
[01:59:04.440 --> 01:59:05.440]  Очень просто.
[01:59:06.440 --> 01:59:10.440]  Сифт будет говорить так, так, я хочу, чтобы здесь появился какой-нибудь достойный человек.
[01:59:11.440 --> 01:59:12.440]  Кто?
[01:59:13.440 --> 01:59:14.440]  Так.
[01:59:15.440 --> 01:59:17.440]  Значит, да, ну, по идее логично предположить, что у меня есть ребенок, да.
[01:59:18.440 --> 01:59:21.440]  Ну, наверное, у меня там еще кто-то есть, да, по Нексту, да.
[01:59:22.440 --> 01:59:25.440]  То есть давайте лучше больших детей, у него и так уже большая ответственность,
[01:59:26.440 --> 01:59:27.440]  давайте еще повышать ответственность совсем так, что не хочется,
[01:59:28.440 --> 01:59:29.440]  пока не меря слету.
[01:59:30.440 --> 01:59:32.440]  Поэтому давайте-ка пойдем в Некст и из Некста попробуем кого-то выковырить.
[01:59:33.440 --> 01:59:34.440]  А сифт что делает?
[01:59:35.440 --> 01:59:39.440]  Он, ну, он пытается, значит, перешаманить как-то дерево.
[01:59:40.440 --> 01:59:41.440]  Нет, а что мы требуем?
[01:59:42.440 --> 01:59:43.440]  Что он поднимает на вход?
[01:59:44.440 --> 01:59:45.440]  Вот я это объясняю.
[01:59:46.440 --> 01:59:49.440]  Это нельзя сказать в двух словах, что он получает на вход вот это, делает вот это.
[01:59:50.440 --> 01:59:51.440]  К сожалению, не то.
[01:59:52.440 --> 01:59:53.440]  Да, ребята, у нас новый уровень сложности, да.
[01:59:54.440 --> 01:59:57.440]  Где такие простые ответы, простых ответов нет.
[01:59:58.440 --> 01:59:59.440]  Вот.
[02:00:00.440 --> 02:00:05.440]  То есть это такая вот мистическая функция, которая чуть-чуть перестраивает дерево.
[02:00:06.440 --> 02:00:07.440]  И делает она так.
[02:00:07.440 --> 02:00:10.440]  Она пытается на этот корень найти кого-то из Некста.
[02:00:12.440 --> 02:00:13.440]  Но как она это делает?
[02:00:14.440 --> 02:00:15.440]  Ну, вызывается рекурсивно.
[02:00:16.440 --> 02:00:20.440]  Поэтому думает, так, я тоже кого-то там, кого-то хочется выковырить, пойду я тоже в Некст.
[02:00:21.440 --> 02:00:23.440]  Но это тоже отправляется в Некст.
[02:00:24.440 --> 02:00:28.440]  И говорит, то есть у нас такой рекурсивный стэк получился, да.
[02:00:29.440 --> 02:00:35.440]  А говорит, так, значит, меня больше нету, значит, меня, значит, так, надо кого-то еще, ой, а у меня ребенка нету.
[02:00:36.440 --> 02:00:37.440]  У меня нет детей.
[02:00:38.440 --> 02:00:39.440]  И меня больше нет.
[02:00:40.440 --> 02:00:41.440]  Ничего больше не существует.
[02:00:42.440 --> 02:00:44.440]  Ну, что мне остается?
[02:00:45.440 --> 02:00:48.440]  Так, как бы, мне в принципе остается только застрелиться.
[02:00:49.440 --> 02:00:53.440]  Но у этого товарища, у Некста и Чайда должен быть одинаковый ранг.
[02:00:54.440 --> 02:00:58.440]  То есть как бы должно быть либо два нула, либо две вершины одинакового ранга.
[02:00:59.440 --> 02:01:00.440]  Поэтому что нам остается?
[02:01:01.440 --> 02:01:02.440]  Мы говорим так.
[02:01:02.440 --> 02:01:08.440]  Так, короче, я плюс бесконечность, то есть на мне ничего не бесит.
[02:01:09.440 --> 02:01:10.440]  Все, до свидания.
[02:01:11.440 --> 02:01:12.440]  Я пошел.
[02:01:13.440 --> 02:01:14.440]  Так, и возвращает и будет.
[02:01:15.440 --> 02:01:18.440]  Так, он там пошаманился, говорит, так, отличность, я по идее теперь плюс бесконечность, да.
[02:01:19.440 --> 02:01:22.440]  Но плюс бесконечность больше семи, да.
[02:01:23.440 --> 02:01:24.440]  Что ж делать?
[02:01:25.440 --> 02:01:28.440]  О, а давайте посмапаем деревья.
[02:01:29.440 --> 02:01:30.440]  Вот.
[02:01:30.440 --> 02:01:33.440]  А то и значит, прям буквально посмапаем Чайда и Некст.
[02:01:34.440 --> 02:01:37.440]  И теперь, по сути, тут будет семерка, а тут будет плюс бесконечность.
[02:01:39.440 --> 02:01:44.440]  То есть у меня получилось такое дерево плюс бесконечность.
[02:01:45.440 --> 02:01:46.440]  Видите, да?
[02:01:47.440 --> 02:01:48.440]  Чего?
[02:01:49.440 --> 02:01:50.440]  Чего оно?
[02:01:52.440 --> 02:01:56.440]  Ну, нет, ну как сказать, он нам нужен вот для чего.
[02:01:57.440 --> 02:01:58.440]  Потому что, смотрите, у нас тут есть нолик, да.
[02:01:58.440 --> 02:02:02.440]  Но надо, чтобы вот этой вершины был и Некст и Чайд.
[02:02:03.440 --> 02:02:07.440]  Поэтому просто так мы, конечно, то есть у нас есть, конечно, мечта когда-нибудь этого ребенка выпилить.
[02:02:08.440 --> 02:02:10.440]  Но это пока будет такой эффективный ребенок.
[02:02:11.440 --> 02:02:15.440]  То есть он типа живет, он же потерял смысл жизни, но еще пока живет.
[02:02:17.440 --> 02:02:20.440]  Чисто с целью какой-то амортизации.
[02:02:21.440 --> 02:02:25.440]  Ну, там условно, я не знаю, места на кладбище не хватает, там вот это все.
[02:02:25.440 --> 02:02:29.440]  Но как бы плюс бесконечность, ладно, плюс бесконечность, это явно не приоритет.
[02:02:30.440 --> 02:02:32.440]  Поэтому, значит, тут мы пишем себе 7 и возвращаем.
[02:02:33.440 --> 02:02:35.440]  О, смотрите, говорим, мы нашли тут 7.
[02:02:36.440 --> 02:02:37.440]  А он говорит, так, круто.
[02:02:38.440 --> 02:02:40.440]  Так, у нас ребенок 7, а у меня тут ребенок 6.
[02:02:41.440 --> 02:02:42.440]  Наверное, 6 круче семи, да?
[02:02:43.440 --> 02:02:45.440]  Поэтому делаем свап.
[02:02:47.440 --> 02:02:48.440]  Так, делаем свап.
[02:02:49.440 --> 02:02:50.440]  Так, а что не так?
[02:02:50.440 --> 02:02:53.440]  Ну, помодлю того, что это вообще за безобразие такое.
[02:02:56.440 --> 02:02:57.440]  Соответственно, вот.
[02:03:06.440 --> 02:03:13.440]  Мы вот этой вершине присвоили плюс бесконечность, потому что мы сказали, что из нее корень исчез, а больше у нее ничего нет.
[02:03:14.440 --> 02:03:17.440]  То есть плюс бесконечность, это будет означать в будущем, забирая вперед, и все еще.
[02:03:17.440 --> 02:03:20.440]  То есть плюс бесконечность, это будет означать в будущем, забирая вперед.
[02:03:21.440 --> 02:03:25.440]  Я скажу так, что если у какой-то вершины обнаружилось, что у нее 2 плюс бесконечности…
[02:03:26.440 --> 02:03:27.440]  Значит, и там...
[02:03:28.440 --> 02:03:29.440]  То есть можно сказать так.
[02:03:30.440 --> 02:03:34.440]  То есть если у какой-то вершины обнаружилось, что у нее ребенок, допустим,
[02:03:37.440 --> 02:03:39.440]  вот сейчас как бы это сказать.
[02:03:40.440 --> 02:03:42.440]  А нет, слушайте, я поторопился, извините.
[02:03:43.440 --> 02:03:46.440]  Потому что с плюс бесконечностями на самом деле разговор покруче сейчас будет.
[02:03:47.440 --> 02:03:51.440]  Знаете, какой? Спокойно.
[02:03:51.440 --> 02:03:55.440]  Давайте пока я все это верну.
[02:03:55.440 --> 02:04:01.440]  То есть пока бы, да, временный такой плюс бесконечность есть.
[02:04:01.440 --> 02:04:09.440]  Вот. Но тут я неожиданно замечаю.
[02:04:09.440 --> 02:04:19.440]  А я все чаще замечаю, что у меня тут ребенка нет.
[02:04:19.440 --> 02:04:29.440]  Тогда когда я тут запил себе семерочку, мне подумалось.
[02:04:29.440 --> 02:04:35.440]  Мне подумалось, а зачем эта инкарнация семерочки существует?
[02:04:35.440 --> 02:04:45.440]  Кажется, что эта инкарнация семерочки, или какая-то из этих, она явно лишняя.
[02:04:45.440 --> 02:04:51.440]  Потому что каждая существует для того, чтобы был ребенок. Если ребенка нет, то у меня вот такой бесконечный ребенок.
[02:04:51.440 --> 02:04:55.440]  И тогда я делаю неожиданно.
[02:04:55.440 --> 02:05:05.440]  А вот этот говорит, знаешь, что? Ты, инкарнация лишняя, а давай-ка ты и пошел.
[02:05:05.440 --> 02:05:15.440]  То есть идея заключается в следующем. То есть я как бы удаляю вот эту вершину.
[02:05:15.440 --> 02:05:21.440]  Да, но я уже знаю, у меня будет вариант, что плюс бесконечность это такая эффективная вершина.
[02:05:21.440 --> 02:05:27.440]  Смотрите там Child and Next по-любому.
[02:05:27.440 --> 02:05:31.440]  Ну формально говоря, это не существует.
[02:05:31.440 --> 02:05:35.440]  Да, ну а неформально, ну вы поняли.
[02:05:35.440 --> 02:05:41.440]  Сейчас, подождите, подождите, не волнуйтесь, сейчас этого мы тоже убьем, не волнуйтесь.
[02:05:41.440 --> 02:05:46.440]  Прежде чем мы его убьем, как бы смотрите, у него есть дети.
[02:05:46.440 --> 02:05:50.440]  В общем случае, когда мы будем это делать, я забираю вам вперед, сразу предупрежу.
[02:05:50.440 --> 02:05:59.440]  Может произойти такая ситуация, что жил-был ребенок ранга 57. То есть там вершина какая-то ранга 57.
[02:05:59.440 --> 02:06:07.440]  И обнаружила она неожиданно в результате подобного рода свапа.
[02:06:07.440 --> 02:06:17.440]  Ну вот, что у нее тут плюс бесконечность. Ранга какого-нибудь там, я не знаю, 48.
[02:06:17.440 --> 02:06:24.440]  Вот, и тут у нее соответственно, потому что, и тут у нее соответственно, это вот это у нее Child, ну после свапа.
[02:06:24.440 --> 02:06:28.440]  И тут видимо Next, тоже скорее всего какой-то веселый.
[02:06:28.440 --> 02:06:30.440]  Понимаете, да?
[02:06:30.440 --> 02:06:39.440]  Тоже какой-то Next. Ну вот, и он там тоже какая-то веселая такая же вершина. На тему 48.
[02:06:39.440 --> 02:06:47.440]  Но заметим, что чем это отличается от этой ситуации? Отличается тем, что тут еще какие-то под деревьями висят.
[02:06:47.440 --> 02:06:52.440]  Вот тут висит какое-то реально нетривиальное дерево, тут висит какое-то нетривиальное дерево.
[02:06:52.440 --> 02:06:54.440]  Ну может такое теоретически быть.
[02:06:54.440 --> 02:07:00.440]  Так вот, идея будет такая. Мы заявляем, то есть Shift будет заявлять так.
[02:07:00.440 --> 02:07:06.440]  Значит, смотрите, этого мы убиваем, этого мы убиваем.
[02:07:06.440 --> 02:07:14.440]  А Child и Next, на Child и Next мы подвешиваем вот эти вот под деревьями.
[02:07:14.440 --> 02:07:17.440]  Вот такая вот красивая идея.
[02:07:17.440 --> 02:07:22.440]  То есть у нас произошло 4 операции?
[02:07:22.440 --> 02:07:33.440]  Ну то есть мы обнаружили, что если у меня ребенок бесконечность, то соответственно, что я делаю?
[02:07:33.440 --> 02:07:40.440]  Ну там так, если у меня ребенок бесконечность, то я его типа удаляю.
[02:07:40.440 --> 02:07:49.440]  Ну вот, я его удаляю, удаляю следующую реинкарнацию меня, и как бы сам на себя беру вот эти под деревья, которые там на этой реконации висели.
[02:07:49.440 --> 02:07:54.440]  Но Shift начинает этот процесс прямо в скорне.
[02:07:54.440 --> 02:07:56.440]  Так сказать, рекурсивно.
[02:07:56.440 --> 02:08:04.440]  Нет, погоди, сейчас. Вот сейчас я сказал, как это в общем случае выглядит.
[02:08:04.440 --> 02:08:08.440]  Значит, сейчас я, нет, мы с корнем шли-шли, но нет.
[02:08:08.440 --> 02:08:14.440]  Мы по сути кладем плюс бесконечность и все эти коррелации с плюс бесконечностью и пытаемся восстановить.
[02:08:14.440 --> 02:08:16.440]  Да.
[02:08:16.440 --> 02:08:24.440]  Вот, ну то есть смотрите, вот этого мы, значит, Shift у нас убил, значит это, и к этим мулам подвесил вот этих товарищей.
[02:08:24.440 --> 02:08:28.440]  То есть получился такой ранг один, но детей нет.
[02:08:28.440 --> 02:08:32.440]  Ну вот такое бывает, понимаете, да?
[02:08:33.440 --> 02:08:36.440]  Сейчас. Он уже остановился.
[02:08:36.440 --> 02:08:39.440]  Потому что мы идем теперь рекурсивно сюда.
[02:08:39.440 --> 02:08:42.440]  И возвращаемся из рекурсии сюда.
[02:08:42.440 --> 02:08:48.440]  Но теперь мы неожиданно видим, что у нас опять Next оказался больше Child.
[02:08:48.440 --> 02:08:53.440]  Не порядок, говорим мы, и свапаем детей.
[02:08:53.440 --> 02:08:55.440]  Я их даже прям сейчас честно посвапаю.
[02:08:55.440 --> 02:08:59.440]  Там было 6, 6, 8, я запомнил, а там 7.
[02:08:59.440 --> 02:09:05.440]  То есть вот тут 6, 6, 8, а тут 7 и пустота.
[02:09:05.440 --> 02:09:07.440]  Да, то есть мы их посвапали.
[02:09:07.440 --> 02:09:10.440]  То есть теперь у нас вот так, вот так вот, вот так вот и вот так вот.
[02:09:10.440 --> 02:09:19.440]  Вот так вот, вот так вот, вот так вот, вот так могу, вот так вот, вот так вот, вот так могу.
[02:09:22.440 --> 02:09:26.440]  И конечно их величство ранги.
[02:09:26.440 --> 02:09:29.300]  Вот. И сюда записываем шестерочку.
[02:09:33.300 --> 02:09:34.300]  Вот.
[02:09:34.600 --> 02:09:35.600]  Ой, не то.
[02:09:42.060 --> 02:09:44.140]  Вот. Тут один, и тут один.
[02:09:44.840 --> 02:09:46.580]  Тут ноль, и тут ноль.
[02:09:47.040 --> 02:09:48.940]  Вот. Вот такая красота.
[02:09:51.680 --> 02:09:55.000]  Но, слава богу, на этом уровне никаких проблем не возникает,
[02:09:55.000 --> 02:09:58.740]  потому что next меньше child, а просто копируем из next и радуемся жизни.
[02:10:01.540 --> 02:10:03.740]  То есть, смотрите, что произошло?
[02:10:03.740 --> 02:10:07.940]  То есть, вот таким образом мы, получается, ликвидировали,
[02:10:07.940 --> 02:10:11.940]  так сказать, некоторого, то есть, некого тут минимального ребеночка.
[02:10:12.500 --> 02:10:13.500]  Понимаете, да?
[02:10:14.840 --> 02:10:18.340]  То есть, мы так, да, тут поликвидировали немножко ребеночка,
[02:10:18.340 --> 02:10:21.340]  и за счет этого вот тут модифицировали немножко дерева.
[02:10:21.580 --> 02:10:26.580]  То есть, как бы, да, оно перестало быть теперь идеальным биномиальным деревом, конечно.
[02:10:28.080 --> 02:10:30.080]  Вот. Но, что поделать?
[02:10:30.580 --> 02:10:33.080]  Ну вот. Но, по крайней мере, сохранился вариант,
[02:10:33.080 --> 02:10:37.580]  что у каждой вершины child и next оказывают на вершины меньшего и одинакового ранга.
[02:10:38.580 --> 02:10:39.580]  Понимаете, да?
[02:10:39.820 --> 02:10:42.820]  То есть, вот как бы, мы положили бесконечность,
[02:10:42.820 --> 02:10:45.820]  мы идем вверх, у нас какой-то минимальный ребенок,
[02:10:45.820 --> 02:10:48.820]  мы удаляем такой процедуры, и дальше у нас просто обычность истап.
[02:10:49.320 --> 02:10:51.320]  И нет, но это, ну...
[02:10:52.320 --> 02:10:55.820]  То есть, после того, как плюс бесконечность исчез, у нас остается обычность?
[02:10:55.820 --> 02:10:58.320]  Ну, в каком-то смысле, в каком-то смысле, да,
[02:10:58.320 --> 02:11:01.320]  только с удалением лишних плюс бесконечности, а так да.
[02:11:01.820 --> 02:11:04.820]  У нас больше нет плюс бесконечности у меня удаления.
[02:11:04.820 --> 02:11:06.320]  Но это другой вопрос.
[02:11:06.820 --> 02:11:08.820]  То есть, мы один раз удаляем под дерево...
[02:11:09.560 --> 02:11:11.560]  Ну, это... Ну, типа да.
[02:11:11.560 --> 02:11:13.560]  И после этого у нас идет обычность.
[02:11:13.560 --> 02:11:14.560]  Ну да. Ну, где-то удалять.
[02:11:14.560 --> 02:11:16.560]  Но на самом деле, мы можем поудалять не один.
[02:11:18.560 --> 02:11:20.560]  А как мы можем поудалять не один?
[02:11:21.560 --> 02:11:25.560]  А вот давайте сейчас еще поэмулируем, как сифты будут работать дальше.
[02:11:25.560 --> 02:11:30.060]  Вот, допустим, я еще вызвал операцию сифт, потому что шестерка теперь вышла.
[02:11:31.060 --> 02:11:32.060]  Что будет дальше? Смотрите.
[02:11:32.060 --> 02:11:35.060]  Сейчас я вам это поэмулирую.
[02:11:36.060 --> 02:11:38.060]  Значит, опять же, так, шестерки больше нет,
[02:11:38.300 --> 02:11:39.800]  мы отправляемся в next.
[02:11:40.800 --> 02:11:43.800]  Шестерки больше нет, мы отправляемся в next.
[02:11:44.800 --> 02:11:45.800]  Так.
[02:11:45.800 --> 02:11:48.800]  Ну, эта вершина так и говорит, что там...
[02:11:49.800 --> 02:11:51.800]  Все, я плюс бесконечность, меня взятки гладки.
[02:11:52.800 --> 02:11:54.800]  Так, мы говорим, так, у меня есть два ребенка.
[02:11:54.800 --> 02:11:58.300]  Так, у меня есть next плюс бесконечность, ребенок 8, ребенок меньше.
[02:11:58.300 --> 02:11:59.800]  Значит, давайте свапать.
[02:11:59.800 --> 02:12:02.800]  То есть, наверное, вертикальная восьмерка все-таки лучше горизонтальней.
[02:12:02.800 --> 02:12:03.800]  Вот.
[02:12:05.800 --> 02:12:06.800]  Так.
[02:12:07.540 --> 02:12:08.540]  Значит, пишем.
[02:12:08.540 --> 02:12:10.540]  Что это восьмерка?
[02:12:10.540 --> 02:12:12.540]  Так, сразу замечаем, что...
[02:12:12.540 --> 02:12:14.540]  Так, ладно, так...
[02:12:14.540 --> 02:12:17.540]  Значит, на мне висит ребенок, но его по факту нет,
[02:12:17.540 --> 02:12:19.540]  так давайте его лучше быстренько утилизируем.
[02:12:21.540 --> 02:12:23.540]  То есть, как всегда, давайте моего.
[02:12:27.540 --> 02:12:31.540]  Ну, да, вот это первая плюс бесконечность, видимо, и исчезнет.
[02:12:31.540 --> 02:12:33.540]  А.
[02:12:34.280 --> 02:12:38.280]  Чего-чего-чего?
[02:12:40.280 --> 02:12:44.280]  Ну, 8 не лежит, сейчас 8 как бы с семеркой посвапается, правда.
[02:12:48.280 --> 02:12:50.280]  Но эта бесконечность, да.
[02:12:51.280 --> 02:12:53.280]  Вот хороший вопрос.
[02:12:54.280 --> 02:12:56.280]  Ну, вот, ну, видимо...
[02:12:56.280 --> 02:12:58.280]  Нет, ну, суть, видимо, будет...
[02:12:59.020 --> 02:13:01.020]  Ну, вот.
[02:13:06.020 --> 02:13:08.020]  Ну, вот, ну, сейчас, значит, будем...
[02:13:08.020 --> 02:13:11.020]  Но на самом деле конкретно в идеальном случае, видимо, никогда.
[02:13:11.020 --> 02:13:13.020]  Правда, тем более, что есть оговорчик.
[02:13:13.020 --> 02:13:17.020]  Мы так до конца высасывать из дерева все соки не будем.
[02:13:19.020 --> 02:13:21.020]  Потому что нам же хочется достичь,
[02:13:21.020 --> 02:13:25.020]  чтобы у нас там какая-то амортизация крутая была, да.
[02:13:25.020 --> 02:13:27.020]  Поэтому у нас...
[02:13:27.760 --> 02:13:31.760]  Ну, вот, то есть там с точки зрения этой амортизации мы будем делать так.
[02:13:31.760 --> 02:13:35.760]  Потому что понятно, что там, видимо, дети каким-то образом будут отпиливаться.
[02:13:35.760 --> 02:13:41.760]  Потому что если бы тут была не 8, а, скажем, какая-нибудь там, я не знаю, десяточка, да,
[02:13:41.760 --> 02:13:43.760]  то в какой-то момент обнаружилось, что вот это дерево,
[02:13:43.760 --> 02:13:45.760]  то есть это мелкое дерево ушло бы туда,
[02:13:45.760 --> 02:13:49.760]  и мы бы уже начали из того дерева соки высасывать, да.
[02:13:51.760 --> 02:13:55.760]  Но, то есть получается, этот сифт работает за сколько?
[02:13:55.760 --> 02:13:57.760]  За логарифом.
[02:13:57.760 --> 02:13:59.760]  Понимаете, да?
[02:13:59.760 --> 02:14:01.760]  Нет, ну, в принципе, у нас такая опция есть.
[02:14:01.760 --> 02:14:03.760]  То есть на самом деле можно высасывать до конца,
[02:14:03.760 --> 02:14:05.760]  потому что амортизация...
[02:14:05.760 --> 02:14:07.760]  То есть какая у нас цель амортизации тогда получится?
[02:14:07.760 --> 02:14:09.760]  Цель амортизации у нас получится,
[02:14:09.760 --> 02:14:13.760]  чтобы у нас был, значит, инцерс за логарифом, все остальное за единицы, да.
[02:14:15.760 --> 02:14:19.760]  Но, в принципе, если у нас сифт будет делаться только непосредственно в случае экстракт-мино,
[02:14:19.760 --> 02:14:23.760]  то, в общем-то, получается, что там уж...
[02:14:23.760 --> 02:14:25.760]  там каждый сифт такой делается за сколько?
[02:14:25.760 --> 02:14:27.760]  За логарифом, правда?
[02:14:27.760 --> 02:14:29.760]  Поэтому никаких проблем нет.
[02:14:29.760 --> 02:14:31.760]  Вот, понятно?
[02:14:31.760 --> 02:14:33.760]  То есть вот такая вот радость.
[02:14:33.760 --> 02:14:35.760]  То есть мы аккуратно спускались, аккуратно радовались.
[02:14:35.760 --> 02:14:37.760]  Вот.
[02:14:37.760 --> 02:14:39.760]  То есть, в принципе, в данном случае проблем нет, правда?
[02:14:39.760 --> 02:14:41.760]  Ну, вот.
[02:14:45.760 --> 02:14:47.760]  Но с параллельом так.
[02:14:47.760 --> 02:14:51.760]  На самом деле ранги-то мы не меняем,
[02:14:51.760 --> 02:14:53.760]  но утверждение остается.
[02:14:53.760 --> 02:14:55.760]  Утверждение остается.
[02:14:55.760 --> 02:14:57.760]  Ну, давайте так.
[02:14:57.760 --> 02:14:59.760]  Давайте у каждой вершины будем ставить в соответствие
[02:14:59.760 --> 02:15:03.760]  элементы, которые были когда-то у нее в поддереве,
[02:15:03.760 --> 02:15:05.760]  у нее или у ее потопков.
[02:15:05.760 --> 02:15:07.760]  Ну, то есть давайте так.
[02:15:07.760 --> 02:15:09.760]  Будем считать, что на самом деле там души умерших,
[02:15:09.760 --> 02:15:11.760]  они на самом деле не уходят никуда,
[02:15:11.760 --> 02:15:13.760]  а как бы они идейно с нами.
[02:15:15.760 --> 02:15:17.760]  Вот, вы образили себе такое, да?
[02:15:17.760 --> 02:15:19.760]  Ключай лишний экземпляр?
[02:15:19.760 --> 02:15:21.760]  Чего?
[02:15:21.760 --> 02:15:25.760]  Лишний экземпляр это наша техническая работа, да?
[02:15:25.760 --> 02:15:27.760]  То есть это мы себе вообразили,
[02:15:27.760 --> 02:15:29.760]  что как бы там у меня есть там,
[02:15:29.760 --> 02:15:31.760]  то есть у меня там есть трое детей.
[02:15:31.760 --> 02:15:33.760]  Петя, Вася и Элена, допустим.
[02:15:33.760 --> 02:15:35.760]  То есть понятно.
[02:15:35.760 --> 02:15:37.760]  Поэтому как родители меня получается,
[02:15:37.760 --> 02:15:41.760]  то есть я как родитель Пети,
[02:15:41.760 --> 02:15:45.760]  я должен быть жестким, ремня давать и так далее.
[02:15:45.760 --> 02:15:47.760]  Есть Вася.
[02:15:47.760 --> 02:15:49.760]  Ему ремня не надо,
[02:15:49.760 --> 02:15:51.760]  есть Лена, ее нужно просто очень сильно любить.
[02:15:51.760 --> 02:15:53.760]  И есть я просто обычный человек.
[02:15:55.760 --> 02:15:57.760]  Да, но это работа именно с детьми.
[02:15:57.760 --> 02:15:59.760]  Понятно, там про жену мы сейчас не разговариваем,
[02:15:59.760 --> 02:16:01.760]  естественно, но тут, к сожалению,
[02:16:01.760 --> 02:16:03.760]  такая проблема, что родитель один тут всегда.
[02:16:03.760 --> 02:16:05.760]  Так что поэтому не надо это
[02:16:05.760 --> 02:16:07.760]  совсем в ускоренной жизни применять.
[02:16:09.760 --> 02:16:11.760]  Но соответственно...
[02:16:15.760 --> 02:16:17.760]  Нет.
[02:16:17.760 --> 02:16:19.760]  Нет.
[02:16:19.760 --> 02:16:21.760]  На самом деле, смотрите, у нас двоичное дерево,
[02:16:21.760 --> 02:16:23.760]  на нижнем уровне которого в идеале,
[02:16:23.760 --> 02:16:25.760]  по крайней мере, находится в точности все элементы.
[02:16:25.760 --> 02:16:27.760]  Поэтому как бы их тут суммарно,
[02:16:27.760 --> 02:16:29.760]  вершины, да, не более чем в два раза больше.
[02:16:31.760 --> 02:16:33.760]  Вот.
[02:16:33.760 --> 02:16:35.760]  Значит, смотрите.
[02:16:35.760 --> 02:16:37.760]  Вот.
[02:16:37.760 --> 02:16:39.760]  То есть у меня получается такой детей,
[02:16:39.760 --> 02:16:41.760]  но я мысленно всегда буду
[02:16:41.760 --> 02:16:43.760]  помнить, что у меня трое детей,
[02:16:43.760 --> 02:16:45.760]  более то у них у меня там еще внуки какие-то есть,
[02:16:45.760 --> 02:16:47.760]  и так далее.
[02:16:47.760 --> 02:16:49.760]  То есть ментально как бы да.
[02:16:49.760 --> 02:16:51.760]  То есть более того, они иногда умирают,
[02:16:51.760 --> 02:16:53.760]  но я все равно о них помню.
[02:16:53.760 --> 02:16:55.760]  То есть когда...
[02:17:01.760 --> 02:17:03.760]  Ну, по сути, да.
[02:17:03.760 --> 02:17:05.760]  То есть можно себе такое
[02:17:05.760 --> 02:17:07.760]  вообразить, да.
[02:17:07.760 --> 02:17:09.760]  Ну, вот.
[02:17:11.760 --> 02:17:13.760]  Ну, по сути так.
[02:17:13.760 --> 02:17:15.760]  Официально можно сказать так.
[02:17:15.760 --> 02:17:27.760]  Давайте для каждой вершины объявим количество соответствующих ей элементов.
[02:17:29.760 --> 02:17:31.760]  Ну, точнее так.
[02:17:31.760 --> 02:17:33.760]  Ну, да.
[02:17:33.760 --> 02:17:35.760]  То есть, так сказать,
[02:17:35.760 --> 02:17:37.760]  то есть у каждого элемента есть, так сказать,
[02:17:37.760 --> 02:17:39.760]  родители.
[02:17:39.760 --> 02:17:41.760]  Вот реальные родители, вот этот реальный родитель,
[02:17:41.760 --> 02:17:43.760]  вот этот реальный родитель, да.
[02:17:43.760 --> 02:17:45.760]  Видите, да?
[02:17:45.760 --> 02:17:47.760]  Вот, по факту.
[02:17:47.760 --> 02:17:49.760]  То есть давайте для
[02:17:49.760 --> 02:17:51.760]  каждого элемента будем хранить как-то потомки.
[02:17:51.760 --> 02:17:53.760]  Правда, заметим, что когда child and next свапаются,
[02:17:53.760 --> 02:17:55.760]  то, конечно, у этой вершины
[02:17:55.760 --> 02:17:57.760]  понятие реальные потомки
[02:17:57.760 --> 02:17:59.760]  немножко...
[02:17:59.760 --> 02:18:01.760]  То есть может немножко поменяться.
[02:18:01.760 --> 02:18:03.760]  Но хотя если себя считать тоже своим потомком,
[02:18:03.760 --> 02:18:05.760]  то он меняется, правда?
[02:18:07.760 --> 02:18:09.760]  Ну, потому что потомками
[02:18:09.760 --> 02:18:11.760]  остаются только вот листы или те,
[02:18:11.760 --> 02:18:13.760]  кто был когда-то листами.
[02:18:15.760 --> 02:18:17.760]  А это по одной, что это просто все,
[02:18:17.760 --> 02:18:19.760]  которые когда-либо в процессе были потомками?
[02:18:19.760 --> 02:18:21.760]  Или что-то более...
[02:18:23.760 --> 02:18:25.760]  Нет, ну...
[02:18:27.760 --> 02:18:29.760]  Нет, ну типа того, на самом деле, да.
[02:18:29.760 --> 02:18:31.760]  И тогда два в степени, да?
[02:18:31.760 --> 02:18:33.760]  Ну тогда... Нет, тогда просто
[02:18:33.760 --> 02:18:35.760]  появится, что если правильно это определить,
[02:18:35.760 --> 02:18:37.760]  то идея в том, что как бы у каждой вершины есть
[02:18:37.760 --> 02:18:39.760]  свое вот фамильное древо размера 2 в степеника.
[02:18:41.760 --> 02:18:43.760]  То есть я как бы
[02:18:43.760 --> 02:18:45.760]  получается вот эта вершина,
[02:18:45.760 --> 02:18:47.760]  кто бы... Скажи так, вот эта вершина
[02:18:47.760 --> 02:18:49.760]  именно вершина, а не ключ, который в ней
[02:18:49.760 --> 02:18:51.760]  находится, да? Ну, то есть это
[02:18:51.760 --> 02:18:53.760]  условно, это что? Ну, вот, то есть
[02:18:53.760 --> 02:18:55.760]  когда семью возглавляют там разные товарищи,
[02:18:55.760 --> 02:18:57.760]  но как бы в этой семье
[02:18:57.760 --> 02:18:59.760]  находится, получается, два в степени
[02:18:59.760 --> 02:19:01.760]  как элемент?
[02:19:01.760 --> 02:19:03.760]  Кто-то из которых когда-то
[02:19:03.760 --> 02:19:05.760]  умер.
[02:19:07.760 --> 02:19:09.760]  Вот, то есть получается, что вот этих вот
[02:19:09.760 --> 02:19:11.760]  соответствующих их ровно. То есть как
[02:19:11.760 --> 02:19:13.760]  это определяется? Очень просто.
[02:19:13.760 --> 02:19:15.760]  Изначально, когда стоит вершина
[02:19:15.760 --> 02:19:17.760]  ранга 0, ей соответствует
[02:19:17.760 --> 02:19:19.760]  только один элемент, да?
[02:19:21.760 --> 02:19:23.760]  То есть создается только семья, в которой один элемент.
[02:19:23.760 --> 02:19:25.760]  Но теперь, если у нас есть две семьи
[02:19:25.760 --> 02:19:27.760]  ранга, допустим, два,
[02:19:27.760 --> 02:19:29.760]  то когда они объединяются, то есть
[02:19:29.760 --> 02:19:31.760]  каждый из них соответствует четыре элемента,
[02:19:31.760 --> 02:19:33.760]  по индукции, то тогда
[02:19:33.760 --> 02:19:35.760]  создается вот эта вершина,
[02:19:35.760 --> 02:19:37.760]  и она символизирует, что
[02:19:37.760 --> 02:19:39.760]  на самом деле у нас теперь есть одна семья ранга 3,
[02:19:39.760 --> 02:19:41.760]  которой соответствует 8 элементов.
[02:19:41.760 --> 02:19:43.760]  Четыре отсюда и четыре отсюда.
[02:19:45.760 --> 02:19:47.760]  То есть да, тут кто-то умер,
[02:19:47.760 --> 02:19:49.760]  но мы всех помним, их четверо.
[02:19:51.760 --> 02:19:53.760]  Понятно, да?
[02:19:53.760 --> 02:19:55.760]  Вот.
[02:19:55.760 --> 02:19:57.760]  То есть получается, каждый вершине
[02:19:57.760 --> 02:19:59.760]  идеально
[02:19:59.760 --> 02:20:01.760]  такой соответствует.
[02:20:01.760 --> 02:20:03.760]  Но при этом, что приятно,
[02:20:03.760 --> 02:20:05.760]  заметим, что
[02:20:05.760 --> 02:20:07.760]  отсюда автоматически
[02:20:07.760 --> 02:20:09.760]  следует, что если вот каждый вершине
[02:20:09.760 --> 02:20:11.760]  такой соответствует, то отсюда автоматически
[02:20:11.760 --> 02:20:13.760]  следует, что ранг каждой вершины не может
[02:20:13.760 --> 02:20:15.760]  быть больше логорифма.
[02:20:15.760 --> 02:20:17.760]  Но это соответствует тому, что в обычной
[02:20:17.760 --> 02:20:19.760]  бинмельной куче просто
[02:20:19.760 --> 02:20:21.760]  фактически мы так красиво
[02:20:21.760 --> 02:20:25.360]  значит, там на каком-то семейном языке обсудили, что на самом деле
[02:20:25.720 --> 02:20:32.520]  ранг бенемиального дерева в обычной бенемиальной куче бывает не больше логарифма. Почему? Потому что в бенемиальном дереве ранга K
[02:20:32.520 --> 02:20:34.520]  ровно два степени conversion.
[02:20:34.520 --> 02:20:40.960]  То есть это как бы просто, практически так, это бенемиальное дерево, в котором вы структурно что-то выпилили и
[02:20:41.680 --> 02:20:43.680]  детей как-то посвапали, понимаете, да?
[02:20:45.160 --> 02:20:47.160]  Вот, то есть разве что так.
[02:20:47.360 --> 02:20:52.160]  Поэтому в принципе это уже, если у нас был бы только экстракт-мин, то как бы за логарифм работало, да?
[02:20:53.960 --> 02:21:00.360]  Правда есть маленькая оговорка, да. Слияние у нас, к сожалению, пока работает не за О от единицы, а за О от логарифм, правда?
[02:21:01.600 --> 02:21:05.520]  Ну экстракт-мин мы уже поняли, что мы уже можем сказать, что экстракт-мин работает за
[02:21:06.160 --> 02:21:10.760]  единицу или даже за ноль, потому что в каждой, если инсорт работает за логарифм,
[02:21:10.760 --> 02:21:13.600]  так давайте просто класть туда логарифм, монетка не парится, да?
[02:21:17.280 --> 02:21:20.080]  Вот, нет, как мы, ну как, делаем?
[02:21:21.200 --> 02:21:27.320]  Нет, как мы его делаем? А очень просто, давайте вспоминать, как у нас бенемиальная куча. Что такое бенемиальная куча работает? Это
[02:21:28.080 --> 02:21:30.080]  двусвязный список
[02:21:30.200 --> 02:21:32.200]  деревьев по паре различных рангов, да?
[02:21:34.160 --> 02:21:36.000]  Чего?
[02:21:36.000 --> 02:21:40.080]  Нет, ну на самом деле мэлт будет почти буквально такой же.
[02:21:40.400 --> 02:21:45.800]  То есть когда он будет, правда, ходить и сливать два списка от сортированных по рангам, да, что будет происходить?
[02:21:45.800 --> 02:21:49.480]  То есть он там будет идти, если видит два дерева, он попытается их объединить в одно, да?
[02:21:50.040 --> 02:21:52.320]  Ну и там, ну цепочек понятно.
[02:21:53.200 --> 02:21:59.200]  Вот, то есть это работает за логарифм, потому что у нас все там, он работает за длин списков,
[02:21:59.200 --> 02:22:05.560]  а длин списков, ну там, плюс количество объединений деревьев. Объединение деревьев у нас суммарно не более, чем n.
[02:22:06.320 --> 02:22:08.800]  Ну потому что у нас всего изначально n семей, да?
[02:22:09.720 --> 02:22:11.720]  Ну теоретически, да?
[02:22:12.240 --> 02:22:16.680]  Вот, там соответственно, поэтому это не очень, поэтому суммарно это не очень интересно.
[02:22:18.680 --> 02:22:21.400]  Но это длинный список логарифм, понимаете, да?
[02:22:23.080 --> 02:22:25.080]  Вот, понимаете?
[02:22:28.800 --> 02:22:32.560]  Да, но можно сделать мелкую оговорку.
[02:22:32.560 --> 02:22:38.200]  То есть по сути это такая прикольная, сейчас я вот могу забабахать, прикольную оптимизацию биномиальной кучи.
[02:22:39.200 --> 02:22:43.200]  Оптимизация называется храним минимум на суффиксе.
[02:22:48.200 --> 02:22:56.200]  Ну потому что, заметим, ну да, но смотрите, просто дело в том, что как будет устроена куча биномиальная, а в будущем и мягкая.
[02:22:56.200 --> 02:23:01.200]  Сейчас начнём, я просто сейчас это нарисую. То есть это я нарисовал, как устроено биномиальное дерево.
[02:23:02.200 --> 02:23:06.200]  Это биномиальное дерево ранга 3. Вот в процессе оно может быть устроено так.
[02:23:06.200 --> 02:23:10.200]  То есть мы будем стараться расформировывать его как можно позже.
[02:23:13.200 --> 02:23:16.200]  Ну то есть теоретически мы видим, можем его не расформировывать никогда?
[02:23:17.200 --> 02:23:20.200]  Такое могло бы быть, но у нас будет такая мягкая аккуратность.
[02:23:20.200 --> 02:23:30.200]  Будем говорить так, что если мы поняли, что вершина ранга 57 уже детей меньше чем 57 пополам, то, наверное, с этим родителем что-то не то.
[02:23:36.200 --> 02:23:51.200]  Но там это не оптимизация, это другое. То есть я просто забираю вперёд, предупреждаю, что там будет у нас эффект какой-то, что если у вершины ранга какого-то там К оказалось детей уже К пополам или менее, то мы как бы эту вершину всё-таки расформировали.
[02:23:52.200 --> 02:23:54.200]  Нет, не под дерево, а количество детей.
[02:23:55.200 --> 02:24:00.200]  Да, количество детей, количество потомков, это разные вещи. То есть длину Next имею в виду.
[02:24:07.200 --> 02:24:14.200]  Нет, вы не путаете слияние двух деревьев одинакового ранга и двух куч, каждый из которых состоит из лого.
[02:24:21.200 --> 02:24:22.200]  Нет.
[02:24:22.200 --> 02:24:41.200]  Нет, ну как сказать, понимаете, там фишка будет в том, что, ну непонятно как делать, потому что когда вы делаете инстинкт, то есть создаете новый элемент, как вы это делаете, вы создаете, вы делаете из него дерево ранга 0, из себя любимого.
[02:24:42.200 --> 02:24:48.200]  И куда-то его в этот список вставляете. Объединить дерево ранга 0 с деревом ранга 57 вы не можете, вы просто так не можете.
[02:24:52.200 --> 02:24:56.200]  Не, нельзя. Там вот, там именно важная фишка, что ранг 57 он как бы не с потолка свалился.
[02:24:57.200 --> 02:25:01.200]  Значит, у меня была большая семья, там на 2 степени 57 человек.
[02:25:02.200 --> 02:25:05.200]  Вот, ну или светлых образов их, конечно, да, но вот.
[02:25:06.200 --> 02:25:07.200]  Вот.
[02:25:08.200 --> 02:25:14.200]  Поэтому вот, да, то есть одно дело, что у нас происходит в одной конкретной дереве, а другое дело, когда у нас есть клан.
[02:25:22.200 --> 02:25:23.200]  Вот.
[02:25:26.200 --> 02:25:27.200]  Вот.
[02:25:28.200 --> 02:25:29.200]  Вот.
[02:25:30.200 --> 02:25:31.200]  Вот.
[02:25:32.200 --> 02:25:33.200]  Вот.
[02:25:34.200 --> 02:25:35.200]  Вот.
[02:25:36.200 --> 02:25:37.200]  Вот.
[02:25:39.200 --> 02:25:40.200]  Вот.
[02:25:41.200 --> 02:25:42.200]  Вот.
[02:25:43.200 --> 02:25:44.200]  Вот.
[02:25:45.200 --> 02:25:46.200]  Вот.
[02:25:47.200 --> 02:25:48.200]  Вот.
[02:25:49.200 --> 02:25:50.200]  Вот.
[02:25:50.200 --> 02:25:51.200]  Вот.
[02:25:52.200 --> 02:25:53.200]  Вот.
[02:25:54.200 --> 02:25:55.200]  Вот.
[02:25:56.200 --> 02:25:57.200]  Вот.
[02:26:00.200 --> 02:26:01.200]  Вот.
[02:26:02.200 --> 02:26:03.200]  Вот.
[02:26:04.200 --> 02:26:05.200]  Вот.
[02:26:06.200 --> 02:26:07.200]  Вот.
[02:26:08.200 --> 02:26:09.200]  Вот.
[02:26:10.200 --> 02:26:11.200]  Вот.
[02:26:12.200 --> 02:26:13.200]  Вот.
[02:26:14.200 --> 02:26:15.200]  Вот.
[02:26:16.200 --> 02:26:17.200]  Вот.
[02:26:17.200 --> 02:26:18.200]  Вот.
[02:26:18.200 --> 02:26:24.760]  куча, выглядит будет так. То есть у него будет даже не двусвязанный, а односвязанный список.
[02:26:24.760 --> 02:26:40.920]  Ну, какой-то вот такой. Значит, в каждом, значит, в каждом из которых...
[02:26:40.920 --> 02:26:52.080]  Ой, да, да, да, я эту штуку забыл. Да, извините, извините, извините.
[02:26:52.080 --> 02:27:02.120]  Так, смотрите, работает будет так. Во-первых, значит, каждая из этих штук будет, значит,
[02:27:02.120 --> 02:27:20.360]  ссылаться на какое-то дерево. Вот оно. Вот, вот как-то так. И это дерево, да.
[02:27:32.120 --> 02:27:50.120]  Нет, этим я хочу символизировать, что ранги этих вершин строго возрастают. То есть, да, размеры
[02:27:50.120 --> 02:27:56.200]  деревьев, конечно, не обязаны быть такими, но тут, допустим, ранг R0, тут ранг R1, тут ранг R2,
[02:27:56.200 --> 02:28:08.280]  там и так далее. И мы гарантируем, что R0 меньше R1, меньше R2, меньше и так далее. Вот. То есть,
[02:28:08.280 --> 02:28:24.280]  в принципе, можно так хранить бенмельную кучу. Ну, типа того, да. Где? Это RL. Это буква L. Нет,
[02:28:24.280 --> 02:28:31.160]  в смысле, вот это L. Это один. Разные. Это разные вещи. Ну, хорошо, хорошо. Вот. Только не надо
[02:28:31.160 --> 02:28:35.200]  говорить, что это E. Так. Ну, вот.
[02:28:54.280 --> 02:29:21.200]  Ну, вот. Так что вот такая радость. Итак, R0 меньше, R1 меньше, R2 и так далее. В общем,
[02:29:21.200 --> 02:29:34.960]  да будет счастье. Вот. Значит, теперь. Но как бы это, ну, видите, чтобы тут не просто деревья храним,
[02:29:34.960 --> 02:29:39.160]  а именно вот, видите, храним такое. Эта штука, кстати, называется head. То есть, там, знаете,
[02:29:39.160 --> 02:29:46.400]  будет такой стракт head. Ну, я вам, да. Чисто теоретически, я мог вам просто кидать ссылку
[02:29:46.400 --> 02:29:50.640]  на статью, и мы могли соследить прямо. То есть, знаете, там в этой статье есть такая приятность,
[02:29:50.640 --> 02:29:58.720]  там написан код. Нет, я просто, знаете, я вот боюсь его вам посылать, потому что сейчас
[02:29:58.720 --> 02:30:06.920]  он начнет читать, и меня перестанете слушать, и тогда все перепутается. Поэтому давайте вот просто
[02:30:06.920 --> 02:30:11.960]  как бы воображайте меня. То есть, нет, теоретически у меня была мысль выводить статью на экран,
[02:30:11.960 --> 02:30:20.000]  на самом деле. Почему с архива? Нет, там... Ну ладно, я вам открою страшную тайну. Эта статья
[02:30:20.000 --> 02:30:27.320]  прекрасно скачивается просто с википедии. Нет, ну почему архив? Нет, почему? Ну, во-первых,
[02:30:27.320 --> 02:30:32.080]  уже не архив, потому что это уже официально опубликованная в журнале статья. Еще в лохматом
[02:30:32.080 --> 02:30:39.080]  двухтысячном. Или даже там в девяносто восьмом, я не помню. Ну, по факту, да. То есть, вы там можете
[02:30:39.080 --> 02:30:44.480]  сейчас просто открыть статью википедии английской, естественно, да, по софтхип. Значит, просто первая,
[02:30:44.480 --> 02:30:49.000]  и практически первая ссылка вот автора там Бернард Чизель. И, собственно, она просто берет там
[02:30:49.000 --> 02:30:57.680]  и скачивается. Даже на скайфа платить не надо. Ну, плох он тем, что вы будете читать архив и не
[02:30:57.680 --> 02:31:08.400]  будете читать журнал. Журнал от этого не дополучит денег. Вот. Нет, а что, ты нашел статью Чизеля про
[02:31:08.400 --> 02:31:15.520]  софтхип на архиве? Скорее всего, нет, потому что, ну, я не уверен, что в этом девяносто восьмом этот
[02:31:15.520 --> 02:31:21.520]  архив реально существовал. То есть, не могу этого гарантировать. Может быть, я не проверял. Может,
[02:31:21.520 --> 02:31:26.880]  может на архиве. Если она на архиве есть, то, скорее всего, она не хуже ничем. Хотя нет, кое-чем она
[02:31:26.880 --> 02:31:32.240]  хуже. За то, что эта статья идеально правильная, вообще адекватная, автор не несет никакой
[02:31:32.240 --> 02:31:37.640]  ответственности. Потому что это, по сути, это почти эквивалентно тому, что оно там висит, то есть,
[02:31:37.640 --> 02:31:44.040]  висит какой-то блок. Вот. То есть, по большому счету, не более того. То есть, как бы опубликовано в
[02:31:44.040 --> 02:31:50.400]  журнале, это означает, что журнал подсчитал эту статью, признал, что она, а, адекватная,
[02:31:50.400 --> 02:31:56.880]  б, интересная. Ну вот. И это напечатал. Еще и поработал, напечатал, там с автором поработал,
[02:31:56.880 --> 02:32:01.640]  чтобы это еще красивше стало, там и так далее. Как бы архив, это означает, я просто вот могу сейчас
[02:32:01.640 --> 02:32:08.560]  это там, то есть написать статью. Вот там воспитание детей. И там написать одну цифру.
[02:32:08.560 --> 02:32:14.920]  Я самые лучшие дети в мире. Все. И опубликовать. Все. То есть, как бы в официальном журнале такое
[02:32:14.920 --> 02:32:20.160]  не опубликуют. Не потому что это неправда, а потому что, ну, как бы там нужно, то есть, видимо,
[02:32:20.160 --> 02:32:25.600]  я там должен еще как-то хотя бы на пяти страницах доказать почему. Вот. Ну и тем более, что, честно
[02:32:25.600 --> 02:32:31.080]  скажем, в мировой практике эта мысль новой, ну, не является. В общем-то, многие специалисты, в общем-то,
[02:32:31.080 --> 02:32:41.000]  это и так прекрасно знают, на самом деле. Конечно. Вот. Ну вот, соответственно. Но, ну, как бы
[02:32:41.000 --> 02:32:48.200]  новой мыслью это не является, поэтому опубликовать в официальном журнале никто не будет. Вот. То есть,
[02:32:48.200 --> 02:32:54.240]  там, соответственно. Вот. Поэтому, вот. Но вывесить это в архиве я могу. Таки понятно, зачем я это
[02:32:54.240 --> 02:32:59.920]  сделаю, но как бы я могу. То есть, обычно вывешивают для того, чтобы, как бы, то есть, какой-то приприим
[02:32:59.920 --> 02:33:04.600]  статьи вывешивается для того, чтобы зафиксировать, что результат за мной. Что у меня вот был этот
[02:33:04.600 --> 02:33:09.920]  результат, чтобы, чтобы потом просто, если обнаружить то, что там параллельно со мной какой-нибудь
[02:33:09.920 --> 02:33:15.120]  автор, там, допустим, называется, работал тоже самый, пришел к похожим выводам. Такое тоже. Ну, такая
[02:33:15.120 --> 02:33:19.760]  коллизия бывает. Чтоб тогда было, что на самом деле, да, каждый из нас это независимо придумал. Ну, или
[02:33:19.760 --> 02:33:24.600]  там, или наоборот, там, доказывать, что там автор у меня там что-нибудь сплагиатил и так далее. То есть,
[02:33:24.600 --> 02:33:30.080]  потому что, а кто-нибудь придет, так скажет, так я, вот у меня идея такая уже была. Господи, я ее
[02:33:30.080 --> 02:33:34.360]  придумал, нет, мы ее придумали, вот, абсолютно независимый индигектор. Это неправда. Она была на
[02:33:34.360 --> 02:33:40.720]  архиве пять лет назад. Так что извиняйте, но тот товарищ был первый. Вот. Ну, там, для, для таких
[02:33:40.720 --> 02:33:44.880]  вещей это, в общем, делается, но отчасти еще для того, чтобы там уже первые идеи вбухать. Ну, не важно.
[02:33:44.880 --> 02:33:51.280]  Вот. Так что, ну, короче говоря, в сухом остатке, если вы там софтип что-нибудь найдете про, на архиве,
[02:33:51.280 --> 02:33:55.240]  может даже что-то интересное будет. Хотя мне кажется, хотя часто бывает, что самое интересное,
[02:33:55.240 --> 02:34:01.240]  что вы там найдете, это ссылки на предыдущие статьи, которые заведомо адекватно. Вот. Хотя
[02:34:01.240 --> 02:34:05.360]  отдельная песня, кстати, какие журналы надо читать, чтобы быть в курсе алгоритмов, на самом деле.
[02:34:05.360 --> 02:34:12.560]  Вот. Не, Код Форсес это не то. Код Форсес это все-таки про конкретно спортивное
[02:34:12.560 --> 02:34:17.440]  программирование. Это все-таки там, скажем так, это наша конкретно-локальная КГКшечка. Это там
[02:34:17.440 --> 02:34:23.280]  фактически. Вот. Все-таки алгоритмы, они все-таки пошире будут. Хоть, конечно, там многие идеи,
[02:34:23.280 --> 02:34:29.200]  в том числе и современные, в олимпиадную задачу конвертированную быть могут. Вот. Так, ну,
[02:34:29.200 --> 02:34:36.800]  чего вы там нашли? А, или вы там просто переписываете, сидите. Так. Не надо этого делать,
[02:34:36.800 --> 02:34:43.320]  потому что тут легко выпасть и потом вообще не попасть уже никуда. То есть, знаете, то есть,
[02:34:43.320 --> 02:34:48.360]  вы в обычной речке, вы там вышли чуть-чуть из лодки, а лодка уже уплыла. Так вот, а это неагарский
[02:34:48.360 --> 02:34:56.960]  водопад. То есть, все, если вы тут вышли, решили войти, то тут вы поняли, что, то есть, в общем-то,
[02:34:56.960 --> 02:35:02.280]  вся остальная группа уже давно там это летит на вертолете, на веревочке вот этой вот. Вот.
[02:35:02.280 --> 02:35:16.760]  Так, вернемся к делу. Так, стоп. Значит, ребят, все. Так, стоп юмор, стоп болтовня. Значит,
[02:35:16.760 --> 02:35:21.440]  смотрите. Итак, у нас, значит, есть цепочка хедов. Значит, каждый хед, то есть, это такой вот,
[02:35:21.440 --> 02:35:28.080]  так сказать, отдельный головной офис семьи. Ну, там, естественно, и сынка на корень. Ну, понятно,
[02:35:28.080 --> 02:35:34.320]  семья висит на конкретном корень. Значит, есть, ну, понятно, в хеде и ссылка на корень. Значит,
[02:35:34.320 --> 02:35:40.160]  указатель на следующий. Ну, гарантируется, что тут ранги соответствующие. Ну, в принципе,
[02:35:40.160 --> 02:35:45.680]  эти ранги можно даже тут хранить. То есть, часто тут хранят, знаете, что хранят? То есть, можно
[02:35:45.680 --> 02:35:55.640]  себе вообразить, что мы тут будем хранить, допустим, ранг. Вот. То есть, мы будем хранить ранг, будем
[02:35:55.640 --> 02:36:04.840]  хранить вот этот вот сикей. То есть, сикей это будет ключик в корне. Ну, понятно, что на минимум
[02:36:04.840 --> 02:36:11.680]  будут претендовать только корни, правда? Ну, как мы обычно ищем минимум? Прибираемся по корням,
[02:36:11.680 --> 02:36:17.280]  выбираемся корней минимум, да? А часто мы еще даже храним указатель на минимум для того,
[02:36:17.280 --> 02:36:24.760]  чтобы гетмин делать за 1. Так вот, для того, чтобы этот гетмин, чтобы этот минимум находить
[02:36:24.760 --> 02:36:42.720]  реально за 1, мы будем хранить неожиданную штуку. Называется она суффикс мин. В прямом. Это
[02:36:42.720 --> 02:36:50.600]  указатель на хед. То есть, указатель на минимум. Скажем так, это указатель на минимум. Ну, тут можно
[02:36:50.600 --> 02:36:56.480]  по-разному делать. По-моему, автор, как ни странно, делает указатель на минимум среди всех хедов,
[02:36:56.480 --> 02:37:03.120]  которые находятся строго позже меня. То есть, вот, например, если глобальный минимум находится
[02:37:03.120 --> 02:37:08.680]  где-то здесь, то указатели выглядят, скорее всего, вот так. Вот. Этот указывает, видимо, на этот,
[02:37:08.680 --> 02:37:20.120]  а этот указывает в аут. Потому что я не включаю себя. Да, ну, здесь, как же сказал, то есть,
[02:37:20.120 --> 02:37:24.800]  на самом деле, только техническими деталями будут отличаться конкретные версии, но вот автор
[02:37:24.800 --> 02:37:31.480]  предложил так. Вот. То есть, как бы, давайте слушать автора. Вот, как бы, видимо, да. Как-то говорит,
[02:37:31.480 --> 02:37:36.960]  да, типа он крутой, у него это вот, да, видите, как пишут. Да, меня надо слушать, я крутой, у меня
[02:37:36.960 --> 02:37:44.440]  желтый пояс на топ-кодике, да. Да, у меня красный, я поёжился, да. Вот. Ну, не важно. Вот. То есть,
[02:37:44.440 --> 02:37:50.080]  вот такая вот штука, так мы её будем хранить. Зачем нам это, значит, этот суффикс Мин оказывается
[02:37:50.080 --> 02:38:03.560]  сейчас нам позволит сделать мэлт за амортизированных от единицы. Ну, смотрите, как мы делаем мэлт? Мэлт мы делаем
[02:38:03.560 --> 02:38:13.760]  в виде, как бы, двух списков хэдов, правда? Да, мы их делаем мёрч. Вам может показаться, что, как бы,
[02:38:13.760 --> 02:38:22.240]  для этого нужно двумя указателями пройти по каждому из этих списков целиком, правда? Ну,
[02:38:22.240 --> 02:38:32.960]  рот прикрывают всё-таки, когда издеваете, не делайте так, пожалуйста. Вот. То есть, вам может показаться,
[02:38:32.960 --> 02:38:41.960]  что для этого нужно пройтись по всему списку. Но часто, на самом деле, это не так. Потому что,
[02:38:41.960 --> 02:38:50.680]  по факту, то есть реальная жизнь оказывается несколько проще. Да, и такое бывает. Чего?
[02:38:50.680 --> 02:38:59.080]  Нет, не в этом дело. Дело в том, что, на самом деле, допустим, у вас, ну, допустим, у вас там, допустим,
[02:38:59.080 --> 02:39:07.280]  куча имени там Маши Васнецовой. То есть, в ней есть четыре ранга. Первый, второй, третий и двадцать седьмой.
[02:39:07.280 --> 02:39:18.520]  Вот. Ну, как билеты, которые она учила, соответственно. Вот. И вы хотите их слить. И хотите вы их слить,
[02:39:18.520 --> 02:39:35.280]  вот. А давайте я так напишу. Вот с рангами, ранги. Вот. А, у меня полочка есть. Вот. Не, вот.
[02:39:35.280 --> 02:39:41.640]  Значит, смотрите. То есть, допустим, я сливаю ранги. Первый, второй, третий и двадцать седьмой. Это у меня в одной
[02:39:41.720 --> 02:39:53.320]  куче, а во второй куче у меня один, ну, я не знаю, два, ну, я не знаю, четыре. И все, допустим, да?
[02:39:53.320 --> 02:39:59.680]  Тогда, ладно, и нолик еще. Значит, как я буду сливать? У меня есть ноль. Потом объединяю вот этих вот, у меня
[02:39:59.680 --> 02:40:06.120]  получается там двоечка. Значит, объединяю вот этих. Значит, у меня тут лишнее двоечку сносим, но, значит,
[02:40:06.120 --> 02:40:12.440]  объединяем. Выходит в перенос троечка. Три плюс три. Это, значит, объединяем получается четверочка.
[02:40:12.440 --> 02:40:19.960]  Четыре плюс четыре. Объединяем. Пятерочка. Ее выносим. А теперь заметим, что, в общем-то, у нас
[02:40:19.960 --> 02:40:24.160]  получилось ноль два пять. А что мы должны сделать дальше? Ну, при идеальном слиянии мы теперь по
[02:40:24.160 --> 02:40:32.280]  этому списку должны пойти до конца. Вот, допустим, тут прям вот 57, 179, 2007. Ну, если она там. Да, не то,
[02:40:32.280 --> 02:40:37.360]  чтобы такие рамки будут в реальной жизни существовать, но все-таки, да? Вот. И так далее. Ну, короче,
[02:40:37.360 --> 02:40:43.680]  вот тут длинная цепочка. То есть, формально при слиянии мы должны были что сказать? Мы должны были
[02:40:43.680 --> 02:40:49.000]  сказать, что давайте пробежимся по этому элементу и эти элементы честно в этот список внесем, да? А
[02:40:49.000 --> 02:40:56.680]  теперь заметим маленькую приятную вещь. Заметим, что мы этого делать не обязаны. Если мы хеды храним
[02:40:56.680 --> 02:41:02.440]  в односвязанном списке вот таком, да, даже если в двухсвязанном, то как бы, да, были вот у меня такие вот там
[02:41:02.440 --> 02:41:12.440]  ссылочки. Что у нас там было? Там ссылочки. Там ссылочки. Вот такие ссылочки были, да? Да, и у нас
[02:41:12.440 --> 02:41:17.440]  тут вот эти стрелочки там поубивались, поубивались, поубивались, да? И тут у меня были стрелочки,
[02:41:17.440 --> 02:41:24.320]  которые тоже там поубивались, поубивались. Вот это стрелочка, вот это. А теперь заметим, что мы
[02:41:24.320 --> 02:41:28.880]  можем вместо того, чтобы там копировать этот список, мы можем отсюда просто отправить стрелочку и
[02:41:28.880 --> 02:41:39.200]  все. И больше ничего не надо. Удобно, правда? И к чему это нас приводит? То есть, как бы мы,
[02:41:39.200 --> 02:41:48.040]  а симточка, конечно, все еще логарифом, да? Но, обратите внимание, логарифом не всех элементов,
[02:41:48.040 --> 02:41:55.200]  которые тут есть. А по сути, нот, а по сути, да, логарифом минимума, потому что мы, по сути,
[02:41:55.200 --> 02:42:03.320]  все сделали за от, можно сказать, от пяти вот этого минимального ранга. Ну ладно, поправка. На самом
[02:42:03.320 --> 02:42:07.680]  деле, формально мы сделали все от логарифом минимума плюс количество слиянием, что тут могла
[02:42:07.680 --> 02:42:15.280]  быть цепочка 5, 6, 7, 8, 9, 10, и нам бы пришлось эти слияния, конечно, делать, да? Вот, но заметим,
[02:42:15.340 --> 02:42:22.080]  что объединение двух деревьев это можно сделать так, чтобы это была учетная стоимость 0. Ну,
[02:42:22.080 --> 02:42:27.220]  потому что, когда вы создаете, скажем, вершинку, то есть, когда вы создаете дерево новое, да,
[02:42:27.220 --> 02:42:33.720]  ну а когда вы создаете новое дерево, вы это, фактически, в инсорте. Ну можно там, ну,
[02:42:33.720 --> 02:42:37.500]  пог dug для начала, можете его обвинить. Вы создаете новое дерево, да, то вы просто
[02:42:37.500 --> 02:42:43.560]  на каждое дерево кладете монетку, там, отдельную серобурмалиновую монетку, вот, и тогда просто,
[02:42:43.560 --> 02:42:48.160]  когда вам приходит время объединить два дерева одинакового ранга, то у вас на это есть две
[02:42:48.160 --> 02:42:53.440]  монетки. Вы объединяете дерево, оплачиваете одну из монеток, а вторую на это новое дерево кладете.
[02:42:53.440 --> 02:43:03.240]  То есть таким образом, получается, вы это сделали за бесплатно. В общем, знаете, что, дайте еще одна
[02:43:03.240 --> 02:43:07.440]  проблема статьи, знаете, какая? То есть как бы вы можете быть готовы, что если вы там открывали
[02:43:07.440 --> 02:43:12.400]  кормонов кучу фибоначи, то там, конечно, таких понятий не будет. Там сделали за бесплатно, вот это
[02:43:12.400 --> 02:43:17.320]  все. То есть там все будет описано там более-менее формально. То есть там потенциал, учетная стоимость,
[02:43:17.320 --> 02:43:23.920]  там все дела. Так вот, а когда откроете вот статью Чезеля, он будет говорить практически буквально
[02:43:23.920 --> 02:43:32.320]  на том языке, на котором я сейчас с вами разговариваю. Вот, да. Ну, понятно, по-английски, естественно,
[02:43:32.320 --> 02:43:38.440]  но как бы идейно-мыслительно, то есть там расписывать, то есть подобного рода штуки он там
[02:43:38.520 --> 02:43:42.880]  расписывать формально не будет. То есть как бы вы говорите, ну, вот это вот понятно, то есть поэтому
[02:43:42.880 --> 02:43:51.720]  остаются только вот там два нетривиальных монет. Нет, ну просто смотри, просто в какой-то момент у
[02:43:51.720 --> 02:43:58.040]  тебя один список закончится, да, а второго будет там вот второй типа встал вот здесь, да. Тогда все,
[02:43:58.040 --> 02:44:02.280]  что тебе останется, то есть на самом деле сюда тебе ходить не надо будет, а просто прицепить вот
[02:44:02.280 --> 02:44:08.800]  этот список к этому и все. Более того, если вы минимум, кстати, поддерживаете вот таким образом
[02:44:08.800 --> 02:44:15.720]  через суффиксмин, то тогда вам останется только прогуляться по этому списку и пересчитать суффиксмин,
[02:44:15.720 --> 02:44:25.720]  а на этом списке суффиксмин не поменялся. Вот. Просто в чем фишка? Так вот, просто я утверждаю,
[02:44:25.720 --> 02:44:34.920]  что подобного рода MLD оказывается, значит, будут сливаться за учетную стоимость от единицы.
[02:44:34.920 --> 02:44:46.520]  Где у нас это было? Вот, потому что тут, да, потому что, да, вот это называется, да, почему у вас
[02:44:46.520 --> 02:44:51.840]  пятой задачей возникла именно эта рекуррента про логарифа минимума, да. Помните такую задачу из
[02:44:51.840 --> 02:45:02.400]  ДЗ? А кто ее решил? О, молодцы. Вот. Да, то есть там вот оказывалось, что, предположим, что вы какие-то два
[02:45:02.400 --> 02:45:07.600]  множества распиливаете на две части, с каждым из них как-то рекурсивно работаете, а потом объединяете
[02:45:07.600 --> 02:45:14.560]  два множества за логарифу минимума. Оказывалось, что суммарно все объединения делаются за УАТН. Ну и
[02:45:14.880 --> 02:45:24.080]  видимо, вот вам, собственно, удалось это доказать. Даже оказалось вроде не сильно сложно. Ну вот,
[02:45:24.080 --> 02:45:31.360]  хотя оно тут не тривиально могло быть. То есть там надо было это делать. Ну вот. Но, на самом деле, вот идея,
[02:45:31.360 --> 02:45:35.200]  на самом деле, здесь именно в этом. То есть, к сожалению, автор не доказывал, почему лог минимум там,
[02:45:35.200 --> 02:45:40.240]  это, почему эта рекуррента работает за линию. Он в этом все сказал, ну там, значит, такая рекуррента
[02:45:40.800 --> 02:45:45.920]  в этой статье, почитайте там что-то написанное по этому поводу. Вот буквально таким в таком стиле
[02:45:45.920 --> 02:45:53.440]  отмахнулся, действительно. Если бы так это он. Нет, он, к сожалению, оценка была, что вот там такая
[02:45:53.440 --> 02:45:59.560]  рекуррента, то есть рассматривалась в литературе, смотри, например, вот эту статью. Но он не сказал,
[02:45:59.560 --> 02:46:06.240]  какую конкретно Лему в этой статье смотреть. Но, по-моему, там я не нашел там точного доказательства,
[02:46:06.240 --> 02:46:12.080]  почему это там линия типа. Ну вот, но не важно. Но для нас-то не важно, ладно, подобного рода
[02:46:12.080 --> 02:46:22.600]  мелочи мы как люди как бы умные образованные, собственно, сами допилили спокойно. Вот. Так, а в чем
[02:46:22.600 --> 02:46:26.400]  проблема? Вот при слиянии мы его поддерживаем просто. То есть мы вот сделали вот это слияние,
[02:46:26.400 --> 02:46:36.160]  да, прицепили в конец. То есть здесь суффикс мины определены правильно, да? На, ну, минимальный
[02:46:36.160 --> 02:46:41.200]  корень среди всех, кто находится дальше. То есть, по сути, типа пробежимся по всем вот хедам,
[02:46:41.200 --> 02:46:52.080]  которые дальше, рассмотрим их корни, выберем минимальный. Вот. Так что вот такая красивая,
[02:46:52.080 --> 02:46:57.480]  амортизация получается. То есть вот фишка здесь заключается в том, что, когда вы объединяете две
[02:46:57.480 --> 02:47:02.660]  кучи, да, то есть можно тоже говорить, что для как бы у каждого дерева есть вот моя виртуальная семья,
[02:47:02.660 --> 02:47:08.280]  да, и у каждой кучи, можно сказать, есть виртуальная семья как объединение моих всех виртуальных
[02:47:08.280 --> 02:47:15.840]  семей, понимаете, да? Ну, такой клан, да. Когда мы объединяем два клана, да, то есть в каждом из них
[02:47:15.840 --> 02:47:20.720]  есть какие-то там получается тут сколько-то элементов в клане, тут сколько-то элементов
[02:47:20.720 --> 02:47:25.360]  в клане, мы их объединили. И тогда оказалось, что объединение этих кланов, получается,
[02:47:25.360 --> 02:47:31.800]  происходит за логарифум минимума размеров этих кланов. Ну, потому что, как бы, если у вас в клане
[02:47:31.800 --> 02:47:37.360]  всего х человек, то у вас рамки не превосходят логарифум х, как мы поняли. Да, естественно,
[02:47:37.360 --> 02:47:49.840]  мы говорим о виртуальных семьях. Так, что опять за шум все время? Ну, за максимум, да.
[02:47:49.840 --> 02:47:57.440]  Тогда мы... Ну, тут и не монетки, тут, на самом деле, просто скорее рекуррента так красиво сошлась. То
[02:47:57.440 --> 02:48:03.600]  есть, как бы, виртуальные семьи сливаются за линию. Вот так это называется. Точнее, виртуальный
[02:48:03.600 --> 02:48:10.440]  клад. Так получается. Вот. Правда, есть, конечно, одна маленькая говоречка, которая жизнь портит,
[02:48:10.440 --> 02:48:16.600]  как мы в будущем убедимся. Но вот тоже, ладно, вот поняли, куча устроена так, и мэл, вот оказывается,
[02:48:16.600 --> 02:48:22.360]  можно делать за линию. Но, правда, если бы не одно «но». То есть, давайте, давайте делать ставки.
[02:48:22.360 --> 02:48:31.240]  Как мы делаем инсорт? Ну, инсорт, да, как всегда, мы создаем кучу на один элемент. То есть, как бы,
[02:48:31.240 --> 02:48:36.200]  то есть, я создаю один элемент, выговорю, что она семья из одного элемента, а потом создаем клан
[02:48:36.200 --> 02:48:41.760]  из одной семьи из одного элемента. И говорим, да, ну вот. И после этого объявляем, ладно, а давай-ка
[02:48:41.760 --> 02:48:49.520]  мы тебя с основным кланом и сольем. Вот. Ну, знаете, то есть, типичная ситуация, то есть, там,
[02:48:49.520 --> 02:48:54.560]  это подписание, то есть, это договор между, там, ООО, Яндекс, там, в лице, там, бла-бла-бла, там,
[02:48:54.560 --> 02:49:01.200]  и, там, ну вот, и там, там, Пупкина Василия Ивановича. Там, о том, что он, значит, там, становится
[02:49:01.200 --> 02:49:05.320]  частью компании, там, ну и так далее. Там, становится разработчиком то, что он разработает,
[02:49:05.320 --> 02:49:09.360]  там, становится частью компании Яндекса, частью компании Яндекса становится то, что он
[02:49:09.360 --> 02:49:13.800]  разработает, то, что, то, что разработает становится частью, именно частью компании Яндекса,
[02:49:13.800 --> 02:49:20.000]  никого, кроме, ну и так далее. Вот. Ну, будете работать в Яндексе, это, вот, будете подписывать
[02:49:20.000 --> 02:49:28.240]  документы такого рода. Вот. Вот. Не боюсь сейчас на этом останавливаться. Вот. И так, значит, так,
[02:49:28.240 --> 02:49:34.840]  так, тихо. Значит, смотрите, с инсортом разобрались. Да? То есть, инсорт простой. С Мелдом тоже. Ну,
[02:49:34.880 --> 02:49:46.280]  с Мелдом разобрались, а потом и с инсортом. Что? Инсорт. Ну, получается, ну, он работает,
[02:49:46.280 --> 02:49:51.840]  значит, он работает, получается, за логорифом. Почему? Потому что в таком виде кажется,
[02:49:51.840 --> 02:49:55.720]  он работает за единицу, но все-таки вынуждены положить логорифом монеток на его будущее удаление.
[02:49:55.720 --> 02:50:07.440]  Вот. Ну, вот. То есть, тупая версия удаления, на самом деле, могла бы звучать так. То есть,
[02:50:07.440 --> 02:50:14.840]  тупая версия удаления могла бы звучать так. Значит, идем, соответственно, в вершинку. Да? То есть,
[02:50:14.840 --> 02:50:20.240]  ну, то есть, находим, ну, мы за вот единицу находим, кого надо удалять, да? И делаем из этой
[02:50:20.240 --> 02:50:27.160]  штуки сифт. Да? В принципе, ну, вот. Единственное, что после этого надо сделать, это мы должны
[02:50:27.160 --> 02:50:31.120]  теперь приближаться по всем предыдущим хедам и пересчитать суффикс Мин, потому что он явно
[02:50:31.120 --> 02:50:48.360]  поменялся. Да? Нет. Нет. Мы вызываем сифт, помните? Ну, давайте так. В идеале, ну, у вас какие
[02:50:48.360 --> 02:50:54.640]  проблемы были, да? У нас были проблемы, что, как бы, в исходной бенмельной куче мы бы просто
[02:50:54.640 --> 02:51:03.840]  выпилили весь этот некстовый путь, и все из детей создали бы новую кучу и ее мыслили, да? Ну, вот.
[02:51:03.840 --> 02:51:11.400]  Да, теперь у нас есть сифт, который за отр2 работает, да. Ну, то есть, можно было и так, и так, и так, и так
[02:51:11.400 --> 02:51:33.520]  работало бы за логарифом. Правда... Нет, какое логарифом? Объединение деревьев или чего? Ну, нет,
[02:51:33.520 --> 02:51:38.640]  почему? Нет, ну, как бы, нет, почему? Как бы, объединение деревьев у нас, как мы помним,
[02:51:38.640 --> 02:51:44.040]  логарифом амортизированное, потому что мы на каждом дереве храним монетку. Другой вопрос, что, когда вы
[02:51:44.040 --> 02:51:48.320]  тут удаляете, вы, как бы, получается, на каждого из детей должны положить монетку для будущего слияния.
[02:51:48.320 --> 02:51:55.280]  Ну, раз вы это все равно... Ну, раз мы это... Ну, то есть, тогда вопрос, как бы, откуда эти монетки
[02:51:55.280 --> 02:52:01.160]  брать, потому что мы этот логарифом как-то хотели амортизировать, да? Но амортизируем мы его очень
[02:52:01.160 --> 02:52:09.160]  просто. То есть, как бы, этот логарифом берется так, то есть, у каждой вершины есть логарифом монеток,
[02:52:09.160 --> 02:52:16.720]  которые ему с рождения дают на черный день, ну, на похороны. Ну, буквально, да, то есть, когда тебе
[02:52:16.720 --> 02:52:25.120]  придет время уходить в мир иной, вот логарифом, чтобы тебя похоронили, а с детьми разобрались. Ну,
[02:52:25.120 --> 02:52:36.960]  не в смысле, а вот... Ну, а в смысле, цивилизованно разобрались. Вот, то есть, какие варианты есть?
[02:52:36.960 --> 02:52:43.440]  Один вариант, давайте не будем заморачиваться ни с каким сифтом вообще, да? То есть, вместо этого
[02:52:43.440 --> 02:52:48.960]  пробежимся тут честно по дереву, значит, там всех этих детей выпишем и тут мерзь сделаем. То есть,
[02:52:48.960 --> 02:52:54.520]  заметим, что на размер виртуального клана это никак не меняется, поэтому потенциальным MLD остаются
[02:52:54.520 --> 02:53:07.040]  делаться за от единицы. Чего? Ну, то есть, ну, смотрите, я рассматриваю разные варианты. То есть,
[02:53:07.040 --> 02:53:12.400]  предположим, что мы делаем как тупо в бенмяальной куче, никаких сифтов нету, просто удалилась вершина,
[02:53:12.400 --> 02:53:18.640]  возьми всех детей, создаешь бенмяальную кучу и в MLD вот в это все. Я говорю, что да, это сработает
[02:53:18.640 --> 02:53:26.920]  за логарифом, а вот это амортизационный анализ MLD в целом это не испортит. Ну, потому что есть MLD,
[02:53:26.920 --> 02:53:31.400]  которые мы часто вызываем, то есть, возьми два разных клана и слей, а тут у нас как бы это просто
[02:53:31.400 --> 02:53:37.280]  как бы наша внутриклановая там техническая работа, да? То есть, мы там внутри для себя какой-то там
[02:53:37.280 --> 02:53:43.320]  маленький технический кланик создали и быстренько влили его в нас обратно. Но это чисто внутри
[02:53:43.320 --> 02:53:49.960]  наша там какие-то там бумажки и перебумажки. Нет, погодите, погодите, кто сказал, ну вот.
[02:53:49.960 --> 02:54:00.240]  Ну давай, нет, можно так сказать, но правда нет, логарифом времени даже, ну вот, но там,
[02:54:00.240 --> 02:54:05.040]  нет, подождите, давайте так сифтом сейчас отдельно разберемся. Пока говорим, что просто у нас нет сифта,
[02:54:05.040 --> 02:54:11.640]  есть проход за логарифом, ну, то есть, за R2, да? То есть, мы удаляем вершину ранга R2 за от R2.
[02:54:11.640 --> 02:54:18.440]  Ну плюс там объединение деревьев, конечно, то есть, мало ли, может, у вас там это объединение,
[02:54:18.440 --> 02:54:23.760]  они скушают этот хет и еще дальше пойдут, такое может быть. Но объединение деревьев у нас суммарно
[02:54:23.760 --> 02:54:31.600]  не более чем N, там в итоге будет, значит, удаление у нас там сколько получается, ну вот. Ну то есть,
[02:54:31.600 --> 02:54:35.960]  здесь у нас получается детей не более чем R2, то есть, не более логарифом, но еще, конечно, для всех
[02:54:35.960 --> 02:54:40.360]  вот этих, кто там справа слева будет, еще придется суффиксумин посчитать, но их тоже от R2.
[02:54:40.360 --> 02:54:52.680]  Да, есть вот именно так, точнее не скажешь, да, да, очень эзотерически-экзотическая, да,
[02:54:52.680 --> 02:54:58.120]  нет, эзотерически-экзотическая, вот так, повернутая какая-то.
[02:54:58.120 --> 02:55:08.560]  Ну типа того, да, то есть, мы там просто сделали какую-то красивую технику, которая позволила
[02:55:09.200 --> 02:55:16.720]  делать за 1, да, что, какой вопрос? Нет, ну суффиксмин это вообще указатель, он как бы не заедит,
[02:55:16.720 --> 02:55:25.040]  но потому что, смотри, ты слева, когда ты, ну потому что, когда ты сливал вот эту гучу без этого хеда вот
[02:55:25.040 --> 02:55:29.560]  с этим вот, да, у тебя два варианта, либо оно закончилось где-то до этого момента и тогда все
[02:55:29.560 --> 02:55:37.960]  это произошло за R2, либо у тебя оно вообще все схлопнулось за то же самое R2 в одно дерево,
[02:55:37.960 --> 02:55:42.400]  единственное, что могло быть, у нас тут появилось, то есть на этом месте появилось дерево R2,
[02:55:42.400 --> 02:55:46.360]  дальше оно не пошло, потому что там дальше больше ранги.
[02:55:46.360 --> 02:56:03.520]  Нет, ну оптимизируем, напомню, что мы там что-то про Epsilon находили приблизительно.
[02:56:03.520 --> 02:56:15.760]  Но, к сожалению, нет, но фишка такая, нет, сейчас мы как бы победили только в том, что фактически мы
[02:56:15.760 --> 02:56:20.680]  научились реализовывать бинвейльную кучу так, что у нее за insert работает за логическим, а все,
[02:56:20.680 --> 02:56:30.520]  включая melt за единицу. Так вот, а это следующий вопрос.
[02:56:30.520 --> 02:56:42.080]  Ещё раз, как мы делаем, как экстракт Мин делать? Мы нашли заод единицы вершину,
[02:56:42.080 --> 02:56:48.400]  которую мы хотим удалить. Значит, тупая бинвейльная куча. Удалим вот весь этот список next,
[02:56:48.400 --> 02:56:54.360]  вот из детей составим бинвейльную кучу и сольём с нашей.
[02:56:54.360 --> 02:57:09.960]  Да, но это логарифом, но это амортизированный логарифом, вот почему. Потому что на каждую
[02:57:09.960 --> 02:57:15.280]  манеру, напоминаю, в insert, когда мы делаем insert, за счет чего у нас insert за логарифом работает?
[02:57:15.280 --> 02:57:20.120]  Он работает, потому что как бы insert сводится к melt, melt работает за единицу.
[02:57:20.120 --> 02:57:28.800]  Я бы даже не копию, а когда создаем новый элемент. Ну даже не эринкарнация просто.
[02:57:28.800 --> 02:57:41.160]  Нет, их-то да, но их-то всё равно логарифом столько же, сколько детей. То есть, по большому счёту,
[02:57:41.160 --> 02:57:46.200]  да, можно в принципе сказать, что давайте на каждую вершину класть монетку, типа на её удаление.
[02:57:46.200 --> 02:57:55.320]  Потому что мы как бы, но лучше класть логарифом, потому что, забирая вперёд,
[02:57:55.320 --> 02:58:00.160]  монеток тут может быть в этом списке. Помните, у нас же бывает ситуация, когда каких-то детей нету.
[02:58:00.160 --> 02:58:11.400]  Нет, почему логарифом на похороны, откуда логарифом на слияние? Нет,
[02:58:11.400 --> 02:58:21.160]  это слияние. Нет, смотрите, давайте так. При каждом insert логарифом на слияние,
[02:58:21.160 --> 02:58:30.640]  на похороны. На слияние на каждом дереве хранится одна монетка. То есть, когда вы создаёте дерево,
[02:58:30.640 --> 02:58:38.400]  ну хорошо, да, вы insert, вы даёте монетку ещё на потенциальное слияние. Ну потому что вы из-за этой
[02:58:39.200 --> 02:58:48.800]  вершинки ещё дерево создаёте их. Лог, чтобы её удалить, лог чёрных монеток, чтобы удалить там,
[02:58:48.800 --> 02:58:53.840]  допустим, и одна серобурмалиновая на её слияние на дереве.
[02:58:53.840 --> 02:58:57.840]  Мы же meld делаем за минимум из логарифма, значит ещё логарифм не уложить.
[02:58:57.840 --> 02:59:01.840]  Что? Мы же делаем meld за минимум из логарифма.
[02:59:01.840 --> 02:59:05.840]  Да. Одну монетку, а не логарифм.
[02:59:05.840 --> 02:59:19.840]  Нет, сейчас. Да, серобурмалиновая – другая монета.
[02:59:19.840 --> 02:59:32.840]  Ну да. Нет, кстати, нет, смотрите, кстати о логарифме монеток. Кстати о логарифме монеток.
[02:59:32.840 --> 02:59:39.840]  На самом деле с помощью этих монеток на самом деле можно показать ещё один красивый способ, почему эта сумма будет за линию работать.
[02:59:39.840 --> 02:59:48.840]  Идея такая, давайте, допустим, у нас есть вот этот список хедов, и последний ранг равен, допустим, у него 179.
[02:59:48.840 --> 02:59:57.840]  Ну для разнообразия, да. Тогда идея такая, давайте я буду считать, что на каждом таком списке лежит 180 синих монеток.
[02:59:57.840 --> 03:00:07.840]  Да, ну типа от 0 до 179. Вот. Что-что?
[03:00:07.840 --> 03:00:15.840]  Ну на каждом именно списке.
[03:00:15.840 --> 03:00:25.840]  Да, просто фишка следующая, что если заметим, что если у одного лежит там 180 монет, а другого 50, то фактически мы делаем за 50 плюс слияние каких-то хедов уже 70.
[03:00:25.840 --> 03:00:35.840]  Плюс там слияние каких-то хедов уже серобурмолиновыми монетками. То есть мы за от 50 как бы сделаем слияние на префексе, да.
[03:00:35.840 --> 03:00:41.840]  А потом, может быть, там ещё нам придётся что-то там допиливать, хотя по-моему даже не придётся, но при экстракт-мини точно не придётся.
[03:00:41.840 --> 03:00:52.840]  А хотя нет, при обычном МЛТ, конечно, может придётся. То есть получается мы как бы синие монетки вот от этого меньшего списка потратили на то, чтобы их слить до вот до 50.
[03:00:52.840 --> 03:00:57.840]  А чтобы делать дальше нам потребуется только серобурмолиновые монетки.
[03:00:57.840 --> 03:01:07.840]  Ну серобурмолиновые монеты берутся просто как только вы создаёте одно дерево, вы кладёте на него серобурмолиновую монетку.
[03:01:07.840 --> 03:01:15.840]  Да, но дело в том, что создаётся новое дерево у вас только, ну как у вас деревья происходят, у вас либо дерево создаётся в инсекте ранга 0,
[03:01:15.840 --> 03:01:23.840]  и тогда в этот момент вы кладёте одну монетку, либо у вас два дерева объединяются в одно, но там вы монеток не кладёте, там вы две монетки превращаете в одну.
[03:01:23.840 --> 03:01:27.840]  То есть за счёт этого вы их как бы и бесплатно объединили деревья.
[03:01:27.840 --> 03:01:29.840]  Откуда синие монетки берутся?
[03:01:29.840 --> 03:01:33.840]  Вот, а синие монетки берутся, ну вот.
[03:01:33.840 --> 03:01:38.840]  Так, а теперь да, вопрос от Рыда. А теперь вот давайте к этому вопросу, откуда берутся синие монетки?
[03:01:39.840 --> 03:01:44.840]  Почему-то интересно сказать, что в обычной бинемиальной куче у нас insert и melt работают за единицей.
[03:01:44.840 --> 03:01:47.840]  Потому что мы работаем не за минимумами.
[03:01:47.840 --> 03:01:54.840]  Так, сейчас, чего ещё? Нет, а синие монетки, нет, ну синие монетки могут браться вот откуда.
[03:01:54.840 --> 03:02:02.840]  Ну во-первых, можно как бы при создании списка, мы ещё одну, в инсекте мы ещё одну синию монетку создаём для того, чтобы создать список вот этот, да?
[03:02:02.840 --> 03:02:04.840]  Из одного дерева, да?
[03:02:05.840 --> 03:02:15.840]  А теперь идея такая, заметим, что, ну вот, то есть когда мы сливаем большой список на 180 монеток и маленький на 50, да?
[03:02:15.840 --> 03:02:22.840]  Но заметим, что ранг большого списка итогов у вас станет максимум 181, правда?
[03:02:22.840 --> 03:02:27.840]  Но вот, но у вас тут было 50 монеток, которые как бы потерялись, да?
[03:02:27.840 --> 03:02:31.840]  Ну так давайте мы потратим не 50 монеток, а 49.
[03:02:31.840 --> 03:02:34.840]  А эту 50 монетку положим сюда. Всё.
[03:02:34.840 --> 03:02:40.840]  Ну или просто каждый мэлд будет вам давать одну дополнительную монетку, тоже не проблема.
[03:02:40.840 --> 03:02:45.840]  То есть получается суммарно синих монеток или нет, значит получается суммарно мы победили.
[03:02:48.840 --> 03:02:58.840]  Ну на самом деле, нет, ну не совсем так, понимаете, здесь очень важный момент, что мы добились того, что мы сливаем за от минимум из максимального ранга.
[03:02:58.840 --> 03:03:02.840]  Это важно. То есть если бы делали в тупую, этого бы не работало.
[03:03:05.840 --> 03:03:11.840]  Инсет? Нет, ну нет, не совсем, нам нужно амортизировать будущее удаление, поэтому логарифом мы кладём.
[03:03:13.840 --> 03:03:15.840]  В бенмяльной куче?
[03:03:16.840 --> 03:03:18.840]  Ну если, сейчас.
[03:03:19.840 --> 03:03:21.840]  Инсет за единицу, а всё остальное за логариф.
[03:03:21.840 --> 03:03:32.840]  Ну нет, давайте подумаем. Вообще по хорошему краю получается, что таким образом, да, можно и бенмяльную кучу реализовать, как будто так, что давайте инсет делается за единицу, мэлды за единицу.
[03:03:32.840 --> 03:03:36.840]  Нет, мэлды за логариф, потому что мэлды, вы же сказали, что мы не за логариф.
[03:03:36.840 --> 03:03:40.840]  Нет, а допустим мы в бенмяльной куче деревья храним вот так, да?
[03:03:40.840 --> 03:03:42.840]  А, хорошо. Вот так?
[03:03:42.840 --> 03:03:45.840]  Ну тем более, что мы сейчас обычную бенмяльную кучу обсуждаем, да?
[03:03:45.840 --> 03:03:55.840]  А это даже не важно, просто это обычная бенмяльная деревья, да, просто у нас из каждого дерева хранится ссылка на кто там минимум дальше.
[03:03:57.840 --> 03:04:01.840]  Вот, тогда получается мы эти слияния, честно, делаем за от минимума, да?
[03:04:01.840 --> 03:04:13.840]  И получается, да, то есть в инсекте получается, допустим, мы в инсекте, то есть инсектор работает пока за логарифом только за счёт одного, за счёт того, что мы кладём логарифом монеток на чёрный день.
[03:04:13.840 --> 03:04:16.840]  А теперь давайте мы не будем класть логарифом монеток на чёрный день.
[03:04:18.840 --> 03:04:22.840]  Тогда это будет означать просто, что само по себе удаление будет работать за логарифом.
[03:04:24.840 --> 03:04:28.840]  И всё. То есть мы просто это удаление не будет трогать вообще никаких монеток.
[03:04:30.840 --> 03:04:34.840]  Ну там, ладно, серо-бурмалиновые, конечно, потрогаются, особенно те, которые тут дальше пойдут, да?
[03:04:34.840 --> 03:04:37.840]  То есть при слиянии двух деревьев серо-бурмалиновые трогаем.
[03:04:37.840 --> 03:04:43.840]  Но сами по себе синие монетки мы не трогаем.
[03:04:43.840 --> 03:04:47.840]  То есть может быть только даём одну, если там ранг увеличился случайно.
[03:04:47.840 --> 03:04:50.840]  Хотя при экстракт-мини, естественно, этого не происходит.
[03:04:56.840 --> 03:05:02.840]  Мы этим, конечно, пользовались, чтобы сделать слияние за лог минимума, а не просто всё.
[03:05:03.840 --> 03:05:07.840]  Нам же надо, просто фишка в том, что нам надо минимум быстро находить, пересчитывать.
[03:05:08.840 --> 03:05:15.840]  Мы им пользовались, что когда вы тут просто находите начало, потом подцепляете куску, то вам пересчитывать надо только здесь минимум.
[03:05:15.840 --> 03:05:17.840]  А здесь пересчитывать не надо.
[03:05:18.840 --> 03:05:20.840]  Так что мы им очень активно пользовались.
[03:05:23.840 --> 03:05:25.840]  Вот. Понятно?
[03:05:27.840 --> 03:05:29.840]  Сколько у нас времени-то?
[03:05:33.840 --> 03:05:34.840]  Чего?
[03:05:35.840 --> 03:05:42.840]  Вот. Нет, сифт нужен для того, чтобы это был софт-хип, а не просто экзотический бенвейльный хип.
[03:05:47.840 --> 03:05:48.840]  Чего ещё раз?
[03:05:50.840 --> 03:05:56.840]  Да, пока я рассказывал, как это сделать без сифта, и получился, в принципе, эффект едва ли не как у кучи фибоначи.
[03:05:57.840 --> 03:05:58.840]  Хотя нет, вру.
[03:05:59.840 --> 03:06:02.840]  Мы здесь пока не научились делать дикриски за единицу.
[03:06:04.840 --> 03:06:08.840]  Пока мы можем здесь делать дикриски, то чисто за логарифом.
[03:06:09.840 --> 03:06:13.840]  Но поэтому, видимо, по этой причине дикриски и софт-хипе никто не требует.
[03:06:16.840 --> 03:06:21.840]  То есть обратите внимание, сифт мы пока не делаем, мы просто чуть-чуть поигрались.
[03:06:22.840 --> 03:06:24.840]  Вот. То есть дальше план будет такой.
[03:06:25.840 --> 03:06:32.840]  То есть мы этот сифт начнём делать, и будем думать, как его делать так, чтобы действительно асимптотику не испортить.
[03:06:38.840 --> 03:06:43.840]  Но сифт говорит, что он пытается на самом деле вот эти деревья выпилить просто своими силами.
[03:06:43.840 --> 03:06:48.840]  Нет, он там прогуливается, пытается рекурсивно из Next выковырить какого-то ребёнка.
[03:06:50.840 --> 03:06:51.840]  Ну, либо там.
[03:06:51.840 --> 03:06:54.840]  Ну, там какая-то одна плюс бесконечная где-то там внизу, видимо, удаляется.
[03:06:57.840 --> 03:07:02.840]  То есть какая-то там удаляется, видимо, хотя бы один ребёнок хоть где-нибудь да исчезнет.
[03:07:03.840 --> 03:07:04.840]  Ну, вот.
[03:07:04.840 --> 03:07:06.840]  И вот там поднимается, и там ещё какие-то свопочки.
[03:07:06.840 --> 03:07:08.840]  Но это делается тоже от высоты.
[03:07:10.840 --> 03:07:16.840]  В принципе, на самом деле можно заметить, что сифт работает с залогарифом,
[03:07:16.840 --> 03:07:21.840]  поэтому, в принципе, если экстракт-мин делать сифтом, то можно прям этот сифт, возможно, выковыривать,
[03:07:21.840 --> 03:07:23.840]  пока это дерево не исчезнет от слова «вообще».
[03:07:25.840 --> 03:07:26.840]  Ну, вот.
[03:07:26.840 --> 03:07:27.840]  И это тоже будет работать.
[03:07:27.840 --> 03:07:29.840]  То есть это приведёт к тому, что у вас лишних мэлдов не будет.
[03:07:29.840 --> 03:07:36.840]  То есть просто в какой-то момент вы поймёте, что этой вершины будет, что этого дерева, эта семья разрушилась целиком,
[03:07:36.840 --> 03:07:38.840]  просто уничтожили всех.
[03:07:38.840 --> 03:07:45.840]  И всё, что вам останется, это просто выпилить этот элемент из, соответственно, списка и тут пересчитать суффикс-мин.
[03:07:45.840 --> 03:07:48.840]  Но это тоже делается как бы за уничтожение всех мэлдов.
[03:07:48.840 --> 03:07:49.840]  Ну, вот.
[03:07:49.840 --> 03:07:54.840]  Хотя, конечно, хотя тут, может быть, поточнее придётся подоказывать амортизацию, но суть, в общем, такая.
[03:07:54.840 --> 03:07:58.840]  Но хотя, если нам достаточно, что это мы делаем с залогарифом, то у нас это устраивает.
[03:07:58.840 --> 03:08:01.840]  Но мы это хотим делать за единицу.
[03:08:03.840 --> 03:08:04.840]  То есть, ну вот.
[03:08:04.840 --> 03:08:05.840]  Вот.
[03:08:05.840 --> 03:08:06.840]  Вот.
[03:08:06.840 --> 03:08:07.840]  Вот.
[03:08:07.840 --> 03:08:08.840]  Вот.
[03:08:08.840 --> 03:08:09.840]  Вот.
[03:08:09.840 --> 03:08:10.840]  Вот.
[03:08:10.840 --> 03:08:11.840]  Вот.
[03:08:11.840 --> 03:08:12.840]  Вот.
[03:08:12.840 --> 03:08:13.840]  Вот.
[03:08:13.840 --> 03:08:14.840]  Вот.
[03:08:14.840 --> 03:08:15.840]  Вот.
[03:08:15.840 --> 03:08:16.840]  Вот.
[03:08:16.840 --> 03:08:17.840]  Вот.
[03:08:18.840 --> 03:08:19.840]  То есть, ну вот.
[03:08:19.840 --> 03:08:21.840]  Ну, поэтому там могут быть разные читы.
[03:08:21.840 --> 03:08:22.840]  Нет.
[03:08:22.840 --> 03:08:26.840]  Ну, на самом деле, я могу сразу сказать, действительно, какой чит мы тут будем применять.
[03:08:26.840 --> 03:08:31.840]  Но просто кажется, что с времени предыдущего перерыва полтора часа уже прошло.
[03:08:31.840 --> 03:08:35.840]  Поэтому, я думаю, как бы неплохо бы, наверное, выдохнуть.
[03:08:35.840 --> 03:08:36.840]  Честно скажу.
[03:08:36.840 --> 03:08:44.840]  Ну, как, в общем-то, и планировалось, скорее всего, за сегодня мы, в общем-то, скорее всего, это не закончим.
[03:08:44.840 --> 03:08:45.840]  Ну, там, да.
[03:08:45.840 --> 03:08:46.840]  Но там, ну, собственно, это и нормально.
[03:08:46.840 --> 03:08:48.840]  Обычно там было бы у нас четыре пары.
[03:08:48.840 --> 03:08:51.840]  Мы бы, наверное, там за, как бы, четыре пары справились.
[03:08:51.840 --> 03:08:52.840]  Вот.
[03:08:52.840 --> 03:08:53.840]  Но у нас, к сожалению, только три.
[03:08:53.840 --> 03:08:59.840]  Поэтому в следующий раз придется, как бы, так сказать, после некоторого перерыва сделать еще один наскор.
[03:08:59.840 --> 03:09:00.840]  Вот.
[03:09:02.840 --> 03:09:04.840]  Ну, ничего страшного.
[03:09:04.840 --> 03:09:05.840]  Итак.
[03:09:05.840 --> 03:09:10.840]  Значит, мы уже с вами обсудили, как делать честную пенмельную кучу без всяких сифтов.
[03:09:10.840 --> 03:09:14.840]  Так, чтобы у вас было delete за логарифом, все остальное за единицу.
[03:09:14.840 --> 03:09:19.840]  Или, что то же самое, insert за логарифом, а все остальное за единицу.
[03:09:19.840 --> 03:09:23.840]  Ну, ключевое достижение мы научились meld за единицу делать.
[03:09:25.840 --> 03:09:29.840]  Нет, дикриски, да, мы выкинули из рассмотрения, что дикриски мы ничего не научились.
[03:09:29.840 --> 03:09:32.840]  Да, то есть, как бы, мы не сделали кучу фибоначи бессмысленной.
[03:09:34.840 --> 03:09:39.840]  То есть, как бы, да, если бы выяснилось, что пенмельная куча тоже умеет, там, дикриски делать подобными технологиями за единицу,
[03:09:39.840 --> 03:09:41.840]  наверное, может, кучу фибоначи бы даже не изобретали.
[03:09:42.840 --> 03:09:43.840]  Вот.
[03:09:44.840 --> 03:09:45.840]  Так вот.
[03:09:46.840 --> 03:09:49.840]  Но, значит, какая у нас возникает идея?
[03:09:50.840 --> 03:09:55.840]  Идея возникает в том, что очень хочется, конечно, лишние деревья не создавать.
[03:09:56.840 --> 03:10:00.840]  То есть, все время там паниковать, что-то там детей сливать как-то не хочется.
[03:10:02.840 --> 03:10:03.840]  Поэтому идея такая.
[03:10:04.840 --> 03:10:06.840]  Давайте сделаем shift.
[03:10:06.840 --> 03:10:07.840]  Давайте сделаем shift.
[03:10:10.840 --> 03:10:11.840]  Что у нас сделал shift?
[03:10:11.840 --> 03:10:12.840]  Но давайте вспомним.
[03:10:12.840 --> 03:10:16.840]  Когда-то очень, знаете, давным-давно, там пару назад.
[03:10:19.840 --> 03:10:22.840]  Хотя вот иногда действительно, знаете, вот ощущение бывает, что там давно было.
[03:10:25.840 --> 03:10:29.840]  На всякий случай, кстати, в субботу случайно набегающий город Питер никто не ездил.
[03:10:31.840 --> 03:10:34.840]  Нет, ну я так, на всякий случай, я же помню, что кто-то из вас из Питера.
[03:10:35.840 --> 03:10:36.840]  Мало ли.
[03:10:36.840 --> 03:10:39.840]  Может, вы там съездили это, походить 30 километров под дождем, я не знаю.
[03:10:40.840 --> 03:10:41.840]  Нет, я вот просто...
[03:10:42.840 --> 03:10:43.840]  Нет, ну да, я вот просто съездил.
[03:10:45.840 --> 03:10:49.840]  И там вот действительно под конец маршрута оказалось, что то, что было в начале, это было прям в прошлой жизни.
[03:10:50.840 --> 03:10:53.840]  Хотя казалось бы, это было просто в тот же день, просто 8 часов назад.
[03:10:56.840 --> 03:10:57.840]  Но это ладно.
[03:10:57.840 --> 03:10:58.840]  Значит, что делал shift?
[03:10:58.840 --> 03:10:59.840]  Давайте вспомним.
[03:10:59.840 --> 03:11:09.840]  Shift говорит нам, что мы не хотим разрушать прямо дерево от того, что там с одним ребеночком что-то не то.
[03:11:11.840 --> 03:11:15.840]  То есть мы просто говорим, что ладно, ребеночек пошел, ну ладно, семья осталась, давайте просто сделаем...
[03:11:16.840 --> 03:11:18.840]  То есть выковываем его откуда-то снизу.
[03:11:19.840 --> 03:11:21.840]  Ну там выковаем, посвапаем чуть-чуть и так далее.
[03:11:23.840 --> 03:11:25.840]  То есть, как вы помните, все будет в идеальном shift заключаться...
[03:11:26.840 --> 03:11:30.840]  То есть мы просто прогуляемся по этому списку и там лишнюю плюс бесконечность удалим.
[03:11:30.840 --> 03:11:31.840]  Просто не более того, правда?
[03:11:35.840 --> 03:11:39.840]  Но правда это приводит к тому, что количество детей может и уменьшиться.
[03:11:42.840 --> 03:11:44.840]  А может и увеличиться.
[03:11:47.840 --> 03:11:49.840]  Вот. Ну почему оно может увеличиться?
[03:11:50.840 --> 03:11:56.840]  Ну потому что, помните, у нас уже был такой прецедент, что у нас тут висело маленькое дерево, тут висело большое дерево.
[03:11:57.840 --> 03:12:00.840]  То есть когда тут типа реально, то есть ранг 3, но реальных детей нет.
[03:12:01.840 --> 03:12:06.840]  То есть могло быть так, что тут ранг 3, детей нет, или почти нет, а тут ранг 3, но дерево адекватное.
[03:12:08.840 --> 03:12:16.840]  И в какой-то момент может случиться так, что они таки посвапаются, и тогда окажется, что как бы в головном next оказывается детей все еще много.
[03:12:17.840 --> 03:12:18.840]  Понимаете, да?
[03:12:19.840 --> 03:12:21.840]  То есть вот там вот это достаточно рандомно как-то происходит.
[03:12:23.840 --> 03:12:27.840]  Вот. Но теперь просто идея оказывается в следующем.
[03:12:28.840 --> 03:12:31.840]  То есть будет предложено сделать такой пограничный вариант.
[03:12:32.840 --> 03:12:34.840]  То есть можно делать shift до бесконечности на самом деле, да?
[03:12:35.840 --> 03:12:40.840]  Потому что shift тоже работает за тот же логарифом, поэтому в принципе экстракт-мин можно с помощью его тупо и делать, правда?
[03:12:41.840 --> 03:12:44.840]  То есть давайте теперь другая реализация бенмяльной кучи.
[03:12:45.840 --> 03:12:47.840]  Не как мы раньше делали вот этот вот сразу распил и мерч, да?
[03:12:48.840 --> 03:12:50.840]  Там распил все ми и мерч, да?
[03:12:51.840 --> 03:12:54.840]  Вот. А как бы shift до тех пор, пока дерево не опустеет.
[03:12:55.840 --> 03:13:01.840]  То есть максимум, что может произойти, это вот там все дерево убилось от слова совсем, значит мы тут убили хет и пересчитали суффикс ми.
[03:13:02.840 --> 03:13:04.840]  Ну суффикс ми мы по-любому пересчитываем, да?
[03:13:05.840 --> 03:13:07.840]  А что значит пока дерево опустеет, там же один ми нет?
[03:13:08.840 --> 03:13:14.840]  Да, но просто, смотрите, допустим, но просто может так случиться, что, ну обычно что вы делаете?
[03:13:15.840 --> 03:13:19.840]  Вы удалили один элемент, сделали тут shift и пересчитали минимум вот на этом голове ходов, да?
[03:13:20.840 --> 03:13:26.840]  Но могло так случиться, что вы из этого дерева удалили элемент и выяснилось, что это был последний элемент этого дерева.
[03:13:27.840 --> 03:13:29.840]  То есть если shift бесконтрольно так делать, могло так получиться.
[03:13:30.840 --> 03:13:32.840]  Но это как бы нам ничего не меняет.
[03:13:32.840 --> 03:13:39.840]  То есть нам по-любому придется пробираться по этим ходам и мы будем пересчитывать суффикс ми.
[03:13:40.840 --> 03:13:42.840]  Разница будет только в том, что мы вот это убьем.
[03:13:43.840 --> 03:13:44.840]  Просто этого хода больше не существует.
[03:13:45.840 --> 03:13:47.840]  То есть ни на какие монетки это не повлияет.
[03:13:48.840 --> 03:13:52.840]  Даже я бы сказал, у нас наоборот одна серобурмалиновая монетка там вышила даже.
[03:13:54.840 --> 03:13:55.840]  Поэтому ничего страшного.
[03:13:56.840 --> 03:13:57.840]  Понятно?
[03:13:59.840 --> 03:14:00.840]  Вот.
[03:14:00.840 --> 03:14:02.840]  Ой, что там за шум?
[03:14:03.840 --> 03:14:05.840]  Ой, а можете дверь на это раз закрыть?
[03:14:08.840 --> 03:14:09.840]  Вот.
[03:14:11.840 --> 03:14:12.840]  Вот, спасибо огромное.
[03:14:14.840 --> 03:14:15.840]  Так что вот такая радость.
[03:14:16.840 --> 03:14:20.840]  Ну вот, то есть получается с shift-ами тоже жить вполне себе можно.
[03:14:21.840 --> 03:14:27.840]  То есть видите, на самом деле играться с этой структурой можно так делать, можно так делать, можно это делать десятью способами.
[03:14:28.840 --> 03:14:29.840]  Вот.
[03:14:30.840 --> 03:14:34.840]  Более того, но автор предлагает рассмотреть пограничный случай.
[03:14:37.840 --> 03:14:39.840]  То есть такой, весьма неожиданный.
[03:14:40.840 --> 03:14:52.840]  Он говорит, так, если у вас детей, значит у вас должно быть, чтобы в корневом списке у вас детей, там было сколько?
[03:14:53.840 --> 03:14:56.840]  То есть детей у вас было хотя бы R пополам.
[03:14:57.840 --> 03:15:12.840]  То есть если вы сделали shift и выяснилось, что количество детей у этой R2 меньше, чем R2 пополам, то ровно в этот момент мы останавливаем shift и говорим, так все, семьи не существует, давайте оставшихся детей отправляем в ХД.
[03:15:13.840 --> 03:15:15.840]  Только для корневого списка.
[03:15:16.840 --> 03:15:17.840]  Чего?
[03:15:18.840 --> 03:15:19.840]  Только для корневого списка.
[03:15:20.840 --> 03:15:21.840]  Ну, по сути, да.
[03:15:22.840 --> 03:15:35.840]  То есть там мы фактически так делаем shift, а потом за ту же 7 точку, едва ли не просто за этот проход, когда мы тут прогуливались, мы узнавали, сколько там у этой вершины было детей.
[03:15:38.840 --> 03:15:48.840]  И мы такжественно заявляем, что, слухайте, говорим мы, так, если у нас детей, как бы выяснилось, что их R2 пополам,
[03:15:49.840 --> 03:15:55.840]  то, то есть там R2 пополам или меньше, то знаете, что давайте-ка мы все распилим и все это сделаем.
[03:15:58.840 --> 03:16:08.840]  То есть мы все распилим и из оставшихся половины детей создадим ХД и, собственно, их сюда вмерчим по старой технологии.
[03:16:09.840 --> 03:16:14.840]  Вот. То есть вот такая вот неожиданная идея тут у нас проскочила.
[03:16:20.840 --> 03:16:21.840]  Ну да.
[03:16:22.840 --> 03:16:23.840]  Вот.
[03:16:25.840 --> 03:16:29.840]  То есть вот такая вот, то есть прям вот практически совсем в тупую.
[03:16:31.840 --> 03:16:32.840]  Вот.
[03:16:34.840 --> 03:16:35.840]  То есть вот нот.
[03:16:36.840 --> 03:16:37.840]  То есть вот нот.
[03:16:41.840 --> 03:16:44.840]  Вот. Ну, идея, по крайней мере, такая, смотрите.
[03:16:44.840 --> 03:16:46.840]  Ну, идея могла быть такая.
[03:16:47.840 --> 03:16:50.840]  Что, давай нот. То есть можно говорить так.
[03:16:52.840 --> 03:16:53.840]  Что...
[03:16:57.840 --> 03:16:58.840]  Нет, ну, давайте так.
[03:16:59.840 --> 03:17:03.840]  Смотрите, давайте каждый раз, когда у вершины...
[03:17:08.840 --> 03:17:10.840]  Ну, то есть формулируем так, что прежде чем мы сделаем...
[03:17:10.840 --> 03:17:13.840]  Ну, там вот идея была такая, что прежде чем мы сделаем удаление...
[03:17:15.840 --> 03:17:22.840]  То есть, получается, прежде чем мы расформируем это дерево, получается, как минимум половина деревьев должна убиться. Правда?
[03:17:24.840 --> 03:17:34.840]  Ну, как бы, идея, по крайней мере, вот на уровне идеи говорится так, что как бы, давайте там, допустим, с каждым удалением дерева еще там, изобретаем еще какие-нибудь две желтые монетки.
[03:17:35.840 --> 03:17:45.840]  И тогда, к тому моменту, когда у нас происходит удаление, получается, у нас там R2 желтых монеток накапливается, за которые мы можем уже, в принципе, деревья вмерчить.
[03:17:48.840 --> 03:17:49.840]  Вот.
[03:17:51.840 --> 03:17:55.840]  И получается, что все работает где-то за O от сифта.
[03:18:05.840 --> 03:18:11.840]  Ну, типа того, да. То есть, более того, можно говорить даже так. То есть, более точно анализ говорит так.
[03:18:12.840 --> 03:18:21.840]  То есть, к сожалению, у нас есть такой маленький технический момент, что в процессе сифта, в принципе, вот эта длина списка некстов может сильно меняться.
[03:18:22.840 --> 03:18:25.840]  Почему как уменьшаться, так и увеличиваться, помните, да? Потому что мы тут свапы.
[03:18:25.840 --> 03:18:36.840]  То есть, там мы свапы какие-то делаем, поэтому, на самом деле, то есть, какие-то переподсчеты, значит, придется делать как-то аккуратно.
[03:18:39.840 --> 03:18:42.840]  Вот. Но тем не менее.
[03:18:44.840 --> 03:18:47.840]  То есть, тем не менее, тут лежит, что вот такие сифты мы делаем.
[03:18:48.840 --> 03:18:49.840]  Вот.
[03:18:50.840 --> 03:18:55.840]  Но тем не менее, я утверждаю, что при такой реализации у нас никакие симпатики не порушатся.
[03:18:58.840 --> 03:19:09.840]  Ну, в принципе, да. То есть, можно сказать, что, да, то есть, да, по большому счету, в общем-то, анализ от этого сильно не поменялся.
[03:19:11.840 --> 03:19:15.840]  То есть, идейно, в общем-то, то же самое. То есть, можно, получается, и сифт делать.
[03:19:15.840 --> 03:19:21.840]  То есть, по сути, мы же доказывались, что если бы сразу распиливали детей, то было бы тоже все адекватно сразу за 1, да?
[03:19:22.840 --> 03:19:28.840]  Ну, вот. Но, на самом деле, если перед этим максимально подробно там стараться делать сифт, то вроде тоже ничего страшного.
[03:19:28.840 --> 03:19:30.840]  Если мы только делаем сифт, то тоже все в порядке.
[03:19:32.840 --> 03:19:39.840]  Вот. То есть, то просто каждое, потому что мы говорили, что нас устраивает логариф, и мы честно этот логариф им тратим.
[03:19:40.840 --> 03:19:41.840]  Вот. Понятно, да?
[03:19:42.840 --> 03:19:49.840]  Вот. Ну, тут приходит нам время, на самом деле, разобраться, как говорится, в чем же, а где же нужна мягкость?
[03:19:51.840 --> 03:19:58.840]  Вот. Так вот. Ну, вот. Где же у нас возникает мягкость? А мягкость возникает вот где.
[03:20:00.840 --> 03:20:04.840]  Дело в том, что сифт у нас это будет очень-очень-очень хитрая функция.
[03:20:05.840 --> 03:20:08.840]  Ну, то есть, не очень хитрая. Сама по себе она будет работать буквально так же.
[03:20:08.840 --> 03:20:14.840]  Потому что, что у нас делает, по большому счету, сифт от вершины В? Вот давайте вообразим себе код.
[03:20:26.840 --> 03:20:32.840]  Ну, вот. Ну, по большому счету, она делает следующее. Давайте вот сейчас вот вообразим себе код.
[03:20:33.840 --> 03:20:46.840]  Она говорит, что, значит, если оказалось, что там В, значит, next, значит, это null PTR, да, то что мы делаем?
[03:20:47.840 --> 03:20:54.840]  То мы объявляем В там с k равно плюс бесконечности и return, короче, да?
[03:20:56.840 --> 03:20:58.840]  Вот. Что мы делаем в ином случае?
[03:20:58.840 --> 03:21:05.840]  Ну, мы делаем в ином случае. В ином случае мы делаем маленькую простую вещь.
[03:21:07.840 --> 03:21:11.840]  То есть, мы запускаем сифт от where next.
[03:21:11.840 --> 03:21:20.840]  Next. Вот. То есть, сифт от where.next.
[03:21:21.840 --> 03:21:33.840]  Значит, если оказалось, что where, значит, ck, то есть, where next, ck оказался больше, чем where child ck,
[03:21:33.840 --> 03:21:44.840]  то, значит, мы просто swap. Делаем swap. Where next и where child.
[03:21:46.840 --> 03:21:48.840]  Понятно, да? Понятно, да?
[03:21:50.840 --> 03:21:52.840]  В это next такой я написал.
[03:21:52.840 --> 03:22:01.840]  Вот. Да, оказался больше, значит, swap-аем детей.
[03:22:02.840 --> 03:22:04.840]  Ну swap-аемся child and next.
[03:22:05.840 --> 03:22:07.840]  Ну, а теперь мы что делаем?
[03:22:08.840 --> 03:22:19.840]  Значит, теперь мы говорим, что там, допустим, where next, ck равно where next ck.
[03:22:23.840 --> 03:22:31.840]  Вот. Ну, давайте сделаем оговорку на всякий случай, который сейчас не нужна, но в будущем пригодится.
[03:22:32.840 --> 03:22:33.840]  Увидите, почему.
[03:22:34.840 --> 03:22:39.840]  Where next – это именно инкарнация той же самой грошили или это именно следующее ребенок?
[03:22:40.840 --> 03:22:47.840]  Ну, next – это инкарнация. Child – ребенок. Next – следующая инкарнация.
[03:22:48.840 --> 03:22:51.840]  Вот. Та переча.
[03:22:52.840 --> 03:22:59.840]  Ну, теперь придется сделать оговорку, что если оказалось, что where ck равно плюс бесконечности,
[03:23:00.840 --> 03:23:11.840]  то тогда мы просто честно делаем там delete, там удалить ребенка, удалить инкарнацию.
[03:23:11.840 --> 03:23:19.840]  Хотя, да, по большому счету в этом даже нет смысла.
[03:23:20.840 --> 03:23:22.840]  Да, на самом деле, да, это лишняя операция.
[03:23:23.840 --> 03:23:27.840]  Ну, просто, нет, мне имелось в виду на всякий случай следующее, что если у меня оказалось, что у меня и child and next бесконечности,
[03:23:28.840 --> 03:23:30.840]  значит их надо удалить и меня плюс бесконечности поставить.
[03:23:31.840 --> 03:23:40.840]  Вот. Но на самом деле это то же самое, как просто сказать, что если выяснилось, что у меня ребеночек немножко бесконечный,
[03:23:41.840 --> 03:23:45.840]  то давайте его выпилим.
[03:23:46.840 --> 03:24:07.840]  Ну, то есть так и написать, ноде звездочка l равно where next child, значит ноде звездочка r равно where next next.
[03:24:07.840 --> 03:24:19.840]  Значит, теперь пишем delete, значит where child, delete where next.
[03:24:20.840 --> 03:24:26.840]  То есть delete именно в сишном смысле, естественно, да?
[03:24:27.840 --> 03:24:33.840]  Ну, да. А deletes нету в сях, да? Ну ладно.
[03:24:33.840 --> 03:24:43.840]  Ну в C++ смысле, хорошо. Но в C++ до каких-то там экзотических стадактов, там в самом простом, самом олдскульном, в котором есть.
[03:24:44.840 --> 03:24:57.840]  Ну и дальше пишем where child равно l и там where next равно r. То есть вот так я удалил ребенка.
[03:24:57.840 --> 03:25:12.840]  Здесь where next ck, да? Вот это where next ck. Так вот, вот такая красота у меня получилась.
[03:25:13.840 --> 03:25:22.840]  А, ну и в идеале как бы вообще это было бы все. То есть тут закрываем и в общем-то на этом все.
[03:25:27.840 --> 03:25:33.840]  Чего?
[03:25:57.840 --> 03:26:13.840]  Ну да, там, да. Нет, ну это так касательно, потому что, смотрите, на самом деле просто идея будет такая.
[03:26:14.840 --> 03:26:21.840]  Вот так вот, просто так это у нас получилась вот такая реализация. Так давайте я тут сотру немножко.
[03:26:22.840 --> 03:26:32.840]  Так, вот это я уберу. Я думаю, это мы себе уже в голове вообразили. Да, то есть как-то, да, если на стене висит ружье, оно должно бы обахнуть.
[03:26:33.840 --> 03:26:39.840]  Мы уже там всю стенку завесили оружием, конечно. Теперь ждем, когда это все рванет.
[03:26:40.840 --> 03:26:46.840]  Сейчас увидите. Сейчас будет вот, сейчас будет основная магия.
[03:26:47.840 --> 03:26:57.840]  Сейчас начинаем вспоминать, да, причем тут эти все там автобусы там какие-то со списками, да? Или списки с автобусов? Нет, наоборот, автобусы со списками, да.
[03:26:58.840 --> 03:27:06.840]  Ой, вообще это новые автобусы, которые объединяются за вот единицу.
[03:27:07.840 --> 03:27:13.840]  Ладно, это не автобусы, а поезда все-таки какие-то, да? Ну трамваи такие, да?
[03:27:14.840 --> 03:27:22.840]  Да, давай электропусы объединяются за единицу? Да ладно. Нет, поезда, если я могу, образите.
[03:27:27.840 --> 03:27:31.840]  Болтать механик.
[03:27:32.840 --> 03:27:36.840]  Болтать механик.
[03:27:37.840 --> 03:27:40.840]  Болтать механик.
[03:27:41.840 --> 03:27:45.840]  Болтать механик.
[03:27:46.840 --> 03:27:51.840]  Здесь девушки не будут, здесь все болтают.
[03:27:58.840 --> 03:28:06.840]  Ну, как бы, ну не знаю, ну как сказать, да, софт хиппет, да, как всегда, софт хиппет пытается ее захватить.
[03:28:07.840 --> 03:28:12.840]  Так вот, смотрите, так вот, в чем мы попытаемся сделать амортизацию.
[03:28:15.840 --> 03:28:19.840]  Так вот, фишка теперь сделается весьма неожиданной.
[03:28:19.840 --> 03:28:26.840]  Так, сейчас я просто достаю, теперь значит у нас возникает мистическое, жалко не ярко-зеленое, но красивое условие.
[03:28:27.840 --> 03:28:29.840]  Так, где мои все маркеры? А вот они.
[03:28:30.840 --> 03:28:34.840]  О, сейчас будет новое фиолетовое условие. У нас фиолетового же вроде не было еще.
[03:28:35.840 --> 03:28:41.840]  Да и... Нет, просто что-то было, да. А мы пока все красным пишем, да.
[03:28:42.840 --> 03:28:47.840]  Ну ладно. Так вот, софт хиппо... А, ну вот теперь новое рыжее условие.
[03:28:47.840 --> 03:28:52.840]  Так вот, идея будет заключаться весьма... Значит, смотрите, в чем.
[03:28:53.840 --> 03:28:56.840]  Значит, мы тут действительно посвапали детей, что-то там вот еще сделали.
[03:28:57.840 --> 03:29:00.840]  Значит, ребенка скопировали. А теперь пишем так.
[03:29:01.840 --> 03:29:02.840]  В этом месте.
[03:29:07.840 --> 03:29:08.840]  Что ж там?
[03:29:09.840 --> 03:29:12.840]  Да, да, после вот этой строчки, допустим, да.
[03:29:13.840 --> 03:29:16.840]  Да, да, после вот этой строчки, допустим, да.
[03:29:17.840 --> 03:29:20.840]  Вот. Ну, может потом мы ее переставим, как всегда, да.
[03:29:21.840 --> 03:29:24.840]  То есть, как всегда, я говорю на уровне идеи, потом мы как бы докрутим, да.
[03:29:25.840 --> 03:29:31.840]  И тут будет написано мистическое... Значит, если выполнено мистическое условие...
[03:29:39.840 --> 03:29:41.840]  Совершенно мистическое какое-то условие.
[03:29:43.840 --> 03:29:46.840]  То сейчас будет большая наглость.
[03:29:47.840 --> 03:29:49.840]  Значит, с моей стороны.
[03:29:54.840 --> 03:29:57.840]  То мы снова выполним сифт.
[03:30:02.840 --> 03:30:06.840]  И более того, да, прям вот с копипастем на самом деле весь вот этот блок.
[03:30:09.840 --> 03:30:10.840]  Понятно, да?
[03:30:12.840 --> 03:30:14.840]  Ну, типа вот, да.
[03:30:15.840 --> 03:30:17.840]  Ну, не совсем... Ну, go to тут не совсем верно.
[03:30:18.840 --> 03:30:21.840]  А, ну, в принципе, более того, можно на самом деле даже обнаглеть.
[03:30:24.840 --> 03:30:25.840]  Вот.
[03:30:26.840 --> 03:30:29.840]  Ладно, правильно на самом деле сделать так. Давайте стрелочку вставим даже не сюда.
[03:30:32.840 --> 03:30:35.840]  Да, погодите, раньше времени записывать. Да, тут, знаете.
[03:30:37.840 --> 03:30:38.840]  Вот.
[03:30:39.840 --> 03:30:42.840]  По большому счету, да, на самом деле можно и go to вставить.
[03:30:43.840 --> 03:30:46.840]  Но go to с оговоркой, потому что не надо это делать до бесконечности.
[03:30:47.840 --> 03:30:48.840]  Это надо сделать только один раз.
[03:30:50.840 --> 03:30:53.840]  То есть, если выполнено мистическое... Вот здесь.
[03:30:57.840 --> 03:30:58.840]  Вот.
[03:30:59.840 --> 03:31:03.840]  Значит, да, нет, в эфи, в конце l за вот этого.
[03:31:04.840 --> 03:31:07.840]  Вот здесь вот это сделали, ребенку удалили там, если что, да.
[03:31:09.840 --> 03:31:11.840]  А потом неожиданно заявляем.
[03:31:13.840 --> 03:31:14.840]  Вот.
[03:31:17.840 --> 03:31:22.840]  Ну, вот, а потом неожиданно. То есть, если неожиданно выполнить мистико-condition, то...
[03:31:23.840 --> 03:31:25.840]  Ну, вот, точнее так, end-end.
[03:31:28.840 --> 03:31:30.840]  Ну, вот, мы, ну, вот...
[03:31:31.840 --> 03:31:34.840]  Мы сделали, сделали только один shift.
[03:31:38.840 --> 03:31:40.840]  Ну, в копии, да. Ну, хорошего я должен сейчас вот...
[03:31:41.840 --> 03:31:44.840]  То есть, если вот сделали только один shift, то go to...
[03:31:47.840 --> 03:31:48.840]  ...один.
[03:31:49.840 --> 03:31:51.840]  Куда один? А вот здесь. Вот.
[03:31:53.840 --> 03:31:55.840]  Вот, вот, меточку вот здесь поставим.
[03:31:57.840 --> 03:31:58.840]  Да, ну, это я так, давайте для удобства.
[03:31:59.840 --> 03:32:02.840]  Конечно, да, как вы все прекрасно знаете, в языке C++,
[03:32:02.840 --> 03:32:03.840]  нет оператора go to.
[03:32:05.840 --> 03:32:08.840]  Значит, как говорил мой учитель программирования,
[03:32:09.840 --> 03:32:12.840]  оператора go to в C++ нет.
[03:32:13.840 --> 03:32:14.840]  Совсем нет.
[03:32:15.840 --> 03:32:16.840]  Вот, это подвержает стандарт.
[03:32:17.840 --> 03:32:21.840]  Если ваша программа с оператором go to компилится, это ошибка компилятора.
[03:32:23.840 --> 03:32:24.840]  Все.
[03:32:26.840 --> 03:32:27.840]  Ну, вот.
[03:32:27.840 --> 03:32:28.840]  Ну, вот.
[03:32:29.840 --> 03:32:33.840]  Ну, хорошо, может быть, даже если стандарте, это ошибка стандарта.
[03:32:34.840 --> 03:32:39.840]  Нормальные люди, адекватные головой, оператор go to не используют.
[03:32:40.840 --> 03:32:41.840]  Но на самом деле, то есть, это недалеко от...
[03:32:42.840 --> 03:32:43.840]  То есть, это практически...
[03:32:44.840 --> 03:32:46.840]  То есть, в современных практиках использовать go to не принято.
[03:32:47.840 --> 03:32:50.840]  Потому что go to очень сильно усложняет, как бы, 4 кг.
[03:32:51.840 --> 03:32:52.840]  Ну, вот.
[03:32:52.840 --> 03:32:54.840]  В современных практиках использовать go to не принято.
[03:32:55.840 --> 03:32:58.840]  Потому что go to очень сильно усложняет, как бы, чтение кода.
[03:33:00.840 --> 03:33:03.840]  То есть, там есть только очень редкие какие-то отдельные примеры,
[03:33:04.840 --> 03:33:06.840]  когда go to помогает.
[03:33:07.840 --> 03:33:10.840]  Но в целом, оператор go to, на самом деле, там в рандомных...
[03:33:11.840 --> 03:33:13.840]  Обычно там все код-стайлы используют, просто прямо запрещают.
[03:33:14.840 --> 03:33:15.840]  Потому что дебагать невозможно.
[03:33:16.840 --> 03:33:17.840]  Вот.
[03:33:18.840 --> 03:33:20.840]  Потому что там из всех этих скобочек неожиданно выскакивает в рандомные места.
[03:33:20.840 --> 03:33:21.840]  Нет, фу-фу-фу, такое.
[03:33:22.840 --> 03:33:23.840]  Поэтому там...
[03:33:26.840 --> 03:33:27.840]  Ну вот, не надо это делать.
[03:33:28.840 --> 03:33:30.840]  Как-то вот, не надо этого делать.
[03:33:31.840 --> 03:33:32.840]  Давайте, ну вот.
[03:33:33.840 --> 03:33:35.840]  Но на самом деле, да, этот код, это еще такой приблизительный код, на самом деле.
[03:33:36.840 --> 03:33:39.840]  Потому что, смотрите, то есть, мы вообще делаем наглую вещь.
[03:33:41.840 --> 03:33:43.840]  То есть, мы на самом деле, да, пытаемся...
[03:33:44.840 --> 03:33:47.840]  То есть, мы, как бы, обычно делали сив для того, что у нас в корне...
[03:33:47.840 --> 03:33:50.840]  Мы объявляем, что у нас в корне элемента, на самом деле, не существует.
[03:33:51.840 --> 03:33:53.840]  Поэтому мы там, собственно, из-под деревьев пытаемся что-то выковырить.
[03:33:56.840 --> 03:33:57.840]  Да, нет, наверное.
[03:34:00.840 --> 03:34:02.840]  Да, нет, наверное, вот.
[03:34:04.840 --> 03:34:05.840]  Вот.
[03:34:06.840 --> 03:34:08.840]  Но в чем, собственно, фишечка здесь?
[03:34:09.840 --> 03:34:10.840]  Фишечка здесь...
[03:34:11.840 --> 03:34:12.840]  Но, казалось бы, если мы вызываем второй сив,
[03:34:12.840 --> 03:34:16.840]  то мы, казалось бы, удаляем еще один элемент.
[03:34:17.840 --> 03:34:18.840]  Правда?
[03:34:19.840 --> 03:34:22.840]  То есть, более того, просто если какое-то условие выполнено,
[03:34:23.840 --> 03:34:25.840]  а это такой тупой достаточно...
[03:34:26.840 --> 03:34:27.840]  А это такое простое условие какое-то.
[03:34:28.840 --> 03:34:30.840]  Я там забираю вперед, скажу, что там будет написано что-то типа,
[03:34:31.840 --> 03:34:33.840]  если ранг достаточно большой,
[03:34:34.840 --> 03:34:36.840]  ну там, больше какого-то, там, Эр, да?
[03:34:38.840 --> 03:34:41.840]  И этот ранг, там, 200, да?
[03:34:42.840 --> 03:34:44.840]  То есть, либо он нечетен,
[03:34:47.840 --> 03:34:51.840]  либо он четен, но следующий ребенок имеет ранг не я и минус один.
[03:34:53.840 --> 03:34:55.840]  Тогда вот второй сив вызываем.
[03:34:57.840 --> 03:34:59.840]  То есть, там не вызываем, только если я четный,
[03:35:00.840 --> 03:35:04.840]  и у меня ребенок имеет ранг на единицу, то тогда ладно, тогда нет.
[03:35:05.840 --> 03:35:08.840]  Но тут как бы важно понять, а что мы, собственно...
[03:35:09.840 --> 03:35:10.840]  То есть, куда деваются элементы.
[03:35:10.840 --> 03:35:12.840]  То есть, мы что теперь, не один элемент удаляем, а два,
[03:35:13.840 --> 03:35:15.840]  и только это в одном сивте, а так как у них тут целая рекурсия получается,
[03:35:16.840 --> 03:35:19.840]  то, может, мы там вообще поуничтожаем прям кучу всего.
[03:35:20.840 --> 03:35:21.840]  Прям все.
[03:35:24.840 --> 03:35:25.840]  Как это?
[03:35:26.840 --> 03:35:28.840]  Подари мне полон.
[03:35:29.840 --> 03:35:30.840]  Так.
[03:35:31.840 --> 03:35:32.840]  Платок.
[03:35:33.840 --> 03:35:34.840]  Вот.
[03:35:35.840 --> 03:35:36.840]  Только так вот.
[03:35:37.840 --> 03:35:39.840]  А вот теперь начинаем вспоминать про списки.
[03:35:40.840 --> 03:35:41.840]  Вот.
[03:35:42.840 --> 03:35:43.840]  Вот.
[03:35:44.840 --> 03:35:46.840]  Так вот, на самом деле...
[03:35:47.840 --> 03:35:49.840]  Нет, он может исчез.
[03:35:50.840 --> 03:35:51.840]  Пришел его с меч.
[03:35:52.840 --> 03:35:53.840]  Он, может быть, даже увеличился.
[03:35:54.840 --> 03:35:57.840]  Да, потому что, видите, вот в этом месте этот элемент убили, да.
[03:35:58.840 --> 03:36:00.840]  Да, ну, как раму восьмого, помните, да?
[03:36:01.840 --> 03:36:02.840]  Вот.
[03:36:03.840 --> 03:36:04.840]  Ну, не важно.
[03:36:05.840 --> 03:36:06.840]  Ну, послушайте, там это...
[03:36:06.840 --> 03:36:09.840]  Какого-нибудь там из Таиланда, из Курсавода, там девушка такая есть,
[03:36:10.840 --> 03:36:11.840]  которая...
[03:36:12.840 --> 03:36:13.840]  Раму восьмого здесь убили.
[03:36:14.840 --> 03:36:16.840]  Да, ну, я ж вам рассказывал, по-моему, уже.
[03:36:17.840 --> 03:36:18.840]  Нет.
[03:36:19.840 --> 03:36:20.840]  Нет?
[03:36:21.840 --> 03:36:22.840]  Вот, да.
[03:36:23.840 --> 03:36:24.840]  Вот, да.
[03:36:25.840 --> 03:36:29.840]  Немного и вот в прошлом году Барак Обама был здесь.
[03:36:30.840 --> 03:36:34.840]  Но он не похож на Тайса, потому что он черный.
[03:36:34.840 --> 03:36:35.840]  Да, он черный.
[03:36:43.840 --> 03:36:44.840]  Вот.
[03:36:45.840 --> 03:36:47.840]  Ну, да, но там еще больше шедевр есть.
[03:36:48.840 --> 03:36:49.840]  Ладно, не будем сейчас это там...
[03:36:50.840 --> 03:36:52.840]  То есть, там девушка замечательная, конечно, поэтому вот.
[03:36:53.840 --> 03:36:54.840]  Просто шедевр.
[03:36:55.840 --> 03:36:56.840]  Так вот.
[03:36:57.840 --> 03:36:58.840]  Но, к сожалению, про софт-хипа она вам вряд ли расскажет.
[03:36:59.840 --> 03:37:00.840]  Вот.
[03:37:01.840 --> 03:37:02.840]  Так вот.
[03:37:02.840 --> 03:37:03.840]  Вот.
[03:37:04.840 --> 03:37:05.840]  Куда денется этот лишний элемент?
[03:37:06.840 --> 03:37:07.840]  Но на самом деле убьется не элемент.
[03:37:08.840 --> 03:37:09.840]  Убьется псевдоним.
[03:37:12.840 --> 03:37:13.840]  А теперь вспоминаем.
[03:37:14.840 --> 03:37:15.840]  Где?
[03:37:16.840 --> 03:37:17.840]  Не, а теперь давным-давно.
[03:37:18.840 --> 03:37:19.840]  Понимаете?
[03:37:20.840 --> 03:37:21.840]  Нет, мы сейчас как бы говорили о куче предположений,
[03:37:22.840 --> 03:37:23.840]  что каких псевдонимов нет.
[03:37:24.840 --> 03:37:26.840]  Что элемент там в нескольких реинкарнациях как-то хранится.
[03:37:27.840 --> 03:37:31.840]  А теперь пришло время признать, что на самом деле в самой куче
[03:37:32.840 --> 03:37:33.840]  псевдонимы.
[03:37:34.840 --> 03:37:35.840]  Где же находятся элементы?
[03:37:36.840 --> 03:37:37.840]  Ну, элементы...
[03:37:42.840 --> 03:37:43.840]  Шо?
[03:37:45.840 --> 03:37:46.840]  Уууууууууу...
[03:37:47.840 --> 03:37:48.840]  Уууууууууууу...
[03:37:49.840 --> 03:37:50.840]  Ууууууууууууу...
[03:37:51.840 --> 03:37:52.840]  Уууууууууууууууууууууу...
[03:37:53.840 --> 03:37:54.840]  Уууууууу...
[03:37:55.840 --> 03:37:56.840]  Ладно.
[03:37:57.840 --> 03:38:00.840]  Значит, смотрите.
[03:38:00.840 --> 03:38:08.280]  ой ладно может зря я пока стираю но давайте уже сотру может тут глядишь и это поубивается не
[03:38:08.280 --> 03:38:12.600]  так а сушить икон не ну экономика это сопротивляется до последнего конечно да
[03:38:12.600 --> 03:38:26.160]  ой может ее пыщ пыщнуть а так давай не шли ну шлёп шлёпать к сожалению не поможет так нет ее тут
[03:38:26.160 --> 03:38:31.120]  ну как бы ну вот ну шлёп шлёпнул и чего я и могу даже позачеркивать но это как бы
[03:38:31.120 --> 03:38:42.080]  ведь само по себе поэтому давайте попробуем и чуть-чуть пыщ пыщнуть может поможет пыщ пыщ вот
[03:38:42.080 --> 03:38:48.280]  ладно у нас пока еще есть другая доска значит смотрите а теперь как будет устроена настоящая
[03:38:48.280 --> 03:38:55.440]  мягкая куча значит фишка тогда то есть деревья будут те же то есть ну то же самое будут те же
[03:38:55.440 --> 03:39:03.240]  ходы те же суфиксные суфикс мины и те же самые вот эти вот деревья все еще будет вариант что
[03:39:03.240 --> 03:39:12.000]  ранги чайлда и некста будут одинаковые и строго меньше нашего но все остальное работает по тем
[03:39:12.000 --> 03:39:20.440]  же принципам вот то есть там деревья деревья но но давайте так я нарисую вот тут есть цепочка
[03:39:20.920 --> 03:39:33.840]  вот next next next и и кто висят какие-то дети но такие ну как всегда да вот ну как бы да ну
[03:39:33.840 --> 03:39:42.520]  нормально да как-то вот дети да дети вот так вот висят нашу такую ну в хорошем смысле слова
[03:39:42.520 --> 03:39:50.600]  конечно не там ну как бы да как бы да вы да вы папа на вас висят дети и это хорошо но вот это
[03:39:50.600 --> 03:40:03.360]  хорошо вот вот значит тот висят вот давайте ладно мы давайте побольше детей висит вот
[03:40:04.320 --> 03:40:19.840]  вот много детей это хорошо вот и так смотрите значит теперь идея такая все то же самое но маленькая
[03:40:19.840 --> 03:40:28.560]  фишка не случайно то что мы тут хранили называется сикей да тут в каждой вершине хранится какой-то
[03:40:28.720 --> 03:40:34.280]  сикей да вот это вот сикей и тут хранится сикей да более того для всех вот всего
[03:40:34.280 --> 03:40:45.920]  этого next ва пути естественно этот сикей одинаковый вот а теперь
[03:40:45.920 --> 03:40:59.040]  вот может может все-таки фиолетовая но не просто рыжий с красным так себе контактируя
[03:40:59.040 --> 03:41:07.520]  когда контрастировать будет просто вот хотя я не знаю мы вот их так так где мы в этой куче мы
[03:41:07.520 --> 03:41:14.400]  использовали черный цвет по моему да в ходах так фиолетовый мы где использовали
[03:41:14.400 --> 03:41:23.040]  ну вот фиолетовый вот давайте вот фиолетовый нет синий где-то мы а синим оранги рисуем
[03:41:23.040 --> 03:41:32.240]  эх ладно значит смотрите фишка такая внимание так вот дело в том что это сикей это псевдоним
[03:41:32.240 --> 03:41:41.360]  у одного или у нескольких элементов от нуля до сколько угодно все эти элементы будут храниться
[03:41:41.360 --> 03:41:55.240]  в мистическом списке но я предпочитаю ки-лист но как бы можете так называть но можно звать там
[03:41:55.240 --> 03:42:08.240]  кей бас там можно еще что-нибудь вот это список стд лист да и в этот кей лист у всех есть доступ
[03:42:08.240 --> 03:42:22.120]  то есть значит а в кей листе кей листе находятся ну то есть там находятся вот эти вот элементы
[03:42:22.120 --> 03:42:30.600]  у которых псевдоним равен сикей вот помните я говорил о том что мы элементы храним в автобусе
[03:42:30.600 --> 03:42:38.760]  списках вот и у каждой список как бы воспринимается как с единым сикей вот пришло время рассказать
[03:42:38.760 --> 03:42:46.560]  вот вот так это устроено да лучше это каждый автобус говорит плохо потому что два автобуса
[03:42:46.560 --> 03:42:54.680]  нельзя объединиться вот единица а вот трамвай пожалуйста оно должно потом ехать понимаете
[03:42:54.680 --> 03:43:04.880]  ну с ковты проедет мне ну знаете да да да ну амортизируем не но это не то
[03:43:04.880 --> 03:43:11.960]  нету да потом два таких ехавших автобуса должны как-то друг друга въехать на нужной
[03:43:11.960 --> 03:43:19.640]  скорости так тихо тихо все так тихо не расслабляемся значит кей лист значит
[03:43:19.640 --> 03:43:28.280]  идея такая то есть вот они так все хранятся вот значит на самом деле если от вас вот то есть
[03:43:28.280 --> 03:43:36.400]  они то может быть про много элементов на самом деле гарантируется ну нет на самом деле ну как
[03:43:36.400 --> 03:43:43.360]  сказать не более чем в куче реально понятно то есть на самом деле идея такая то есть на самом
[03:43:43.360 --> 03:43:50.200]  деле все элементы хранятся не в куче красивой куче а вот в этих вот кей листах но которых
[03:43:50.200 --> 03:43:59.440]  еще не достали реально зачем мы это так храним для того чтобы нам чуть-чуть сжимать то есть у
[03:43:59.440 --> 03:44:04.480]  нас будет какая-то чуть более сжатая версия дерева за счет того что просто в кей листах
[03:44:04.480 --> 03:44:09.760]  будет не по одному элементу на лист а побольше в идеальном мире у каждой вершины был бы просто
[03:44:09.760 --> 03:44:18.960]  лист состоящий с одного элемента из себя любимого лес конечно но все еще лес те же ранги более
[03:44:18.960 --> 03:44:26.360]  того там у хэдов там ранги строго возрастают это все на месте это все на месте и у нас получается
[03:44:26.360 --> 03:44:32.000]  кей лист но такие листы такие но просто я тут нарисовал что их много но значит почему именно
[03:44:32.000 --> 03:44:38.640]  лист потому что мы два листа за 1 объединять умеем логично да нам абсолютно не важно в
[03:44:38.640 --> 03:44:45.200]  каком порядке на пиха на элементы в кей лист в реальности то есть получается вот этот вот
[03:44:45.200 --> 03:44:52.200]  экстракт мин будет работать очень просто он говорит так найдем хэд в которой нас приведет
[03:44:52.200 --> 03:44:59.240]  суффикс мин да то есть хэд с корневым у которого секей в корне минимален да и он говорит так и
[03:45:00.200 --> 03:45:08.720]  идем кей лист и берем первый попавшийся элемент достаем его и удаляем да ну хотите сначала
[03:45:08.720 --> 03:45:16.360]  хотите с конца на ваше усмотрение не важно а это указатель типа все реинкарнации у всех
[03:45:16.360 --> 03:45:22.920]  реинкарнации секе есть указатель на этот лист но чтобы не копировать то есть секей скопировать
[03:45:22.920 --> 03:45:28.440]  можно или там ссылку на него потому что но знаете там вот но это вообще вообще отдельная песня такая
[03:45:28.440 --> 03:45:39.040]  еще есть что если секей жирный то его не хочется копировать мы же не знаем как у него типа да нам
[03:45:39.040 --> 03:45:43.680]  это пригодится ну потому что когда мы будем тут свапать вот этих вот детей нам как бы здесь
[03:45:43.680 --> 03:45:48.920]  придется этот кей лист перевесить поэтому удобнее будет на самом деле чтобы тут была ссылка на кей
[03:45:48.920 --> 03:45:54.280]  лист чтобы ее сюда скопировать и чтобы в корне и в корень она пропихалась это я так на будущее
[03:45:54.280 --> 03:46:11.840]  нет они указывают на стд листов внутри но я это воспринимаю так они это указывают вот так они
[03:46:11.840 --> 03:46:18.800]  указывают на такую структуру внутри которой есть лист вот так то есть принципе это может быть
[03:46:19.400 --> 03:46:24.760]  хотя нет вектор не может быть что два вектора за вот единицу не объединить и да поэтому увы это
[03:46:24.760 --> 03:46:34.760]  лист вот поэтому там ну да нет там есть такие операции да но там отдельная песня там не все
[03:46:34.760 --> 03:46:41.320]  операции работают так как хотелось бы опытным олимпиадникам то есть какие там подлянки есть
[03:46:41.320 --> 03:46:45.080]  поэтому это надо поэтому нужно очень внимательно читать как векторе то есть векторе тоже бы
[03:46:45.080 --> 03:46:50.440]  хотелось бы там вот это мы сделали там сто сто пятьсот по бэков и память уменьшилась на сто
[03:46:50.440 --> 03:46:57.320]  пятьсот но как вы помните это не так совсем даже не так то есть там вот поэтому там со стд листом
[03:46:57.320 --> 03:47:01.760]  в этом смысле тоже надо смотреть там есть подлянки но объединить листы там вполне можно в лучшем
[03:47:01.760 --> 03:47:07.240]  случае напишите сами то есть я так думаю не не самое страшное для вас задача написать лист
[03:47:07.240 --> 03:47:12.360]  правда с операциями объединить два листа там я не знаю достать оттуда элемент какой-нибудь там
[03:47:12.360 --> 03:47:17.960]  добавить элемент не проблема правда то есть я думаю там вы можете там ставить на скорость
[03:47:17.960 --> 03:47:23.400]  я напишу его за 15 минут а я за 10 как это я за 15 а я за 15 но и можно будет пользоваться на
[03:47:23.400 --> 03:47:29.760]  практике там но нет потому что реально реально так потому что там скажем вот особенно то есть
[03:47:29.760 --> 03:47:37.400]  ну думаю уже там начали проходить какие-то ревьюшки на c++ и да ну начнете значит когда-нибудь но в
[03:47:37.400 --> 03:47:41.680]  худшем случае знаете самое то есть на нашем курсе видимо таких ревью будет если будет то штучно
[03:47:41.680 --> 03:47:48.400]  но как бы идеальные ревью конечно в моей истории знаете где было вот в шаге то есть кстати придают
[03:47:48.400 --> 03:47:52.120]  скорее всего в шаге у вас будет там курс алгоритмов структур данных обязательно и вы его скипнуть
[03:47:52.120 --> 03:47:58.400]  не сможете но вот но и и будет и будет причина по которой это имеет смысл то есть понятно может
[03:47:58.400 --> 03:48:03.880]  быть новых алгоритмов вам там не расскажут хотя про понятие продвинутый поток там тоже есть но
[03:48:03.880 --> 03:48:08.080]  фишка будет том что вас там заставят кодить и какие задачи сдавать так вот ревью и там вас заставит
[03:48:08.080 --> 03:48:14.680]  их писать реально как их пишут промышленном программируй вот то есть реально прям вот как
[03:48:14.680 --> 03:48:18.840]  промышленный программируй так вот там просто при то есть там принцип кодирования отличается то
[03:48:18.840 --> 03:48:23.200]  есть это не не вот это написать быстренько там был там лапшу сдать ее там в тестирую систему получить
[03:48:23.200 --> 03:48:29.320]  ок и забыть о ней навсегда то есть ваша задача будет каждую часть писать так чтобы ее можно было
[03:48:29.320 --> 03:48:34.080]  переиспользовать но основная идея такая но там опять избавляться от копипа ну чтобы можно было
[03:48:34.080 --> 03:48:39.480]  править как бы и чтобы там не в двух местах а вторых чтобы еще можно было ее переиспользовать то
[03:48:39.480 --> 03:48:43.960]  есть например если вам там потребовались там компоненты сильной связности какие найти да
[03:48:43.960 --> 03:48:48.560]  например то вам придется взять и написать эти компоненты сильной связности то есть причем
[03:48:48.560 --> 03:48:53.760]  написать прям едва ли не класс который там будет считать компоненты сильной связности предоставить
[03:48:53.760 --> 03:48:57.760]  какой-то адекватный доступ и так далее то есть да возможно то есть половина этого функционала
[03:48:57.760 --> 03:49:02.560]  которую вы там реализуете видимо самой задачи вам даже не пригодится но реализовать потребуется
[03:49:03.040 --> 03:49:07.640]  адекватно пользователь то есть как бы да то есть вы как бы с точки зрения задачи вы как бы сделали
[03:49:07.640 --> 03:49:12.480]  лишнюю работу но с точки зрения глобальной в этом под там то есть глобально с точки зрения создания
[03:49:12.480 --> 03:49:19.540]  какой-нибудь хорошей библиотеки на самом деле вы себе там работу к ажи сделали прям вот вот такая
[03:49:19.540 --> 03:49:25.800]  идея будет так но это так немножко по анонсировал так немножко рассказал собственно как вообще
[03:49:25.800 --> 03:49:29.800]  Вообще, на самом деле пишется код в реальной жизни, то есть отличный от олимпиад.
[03:49:29.800 --> 03:49:32.800]  Так, ребят, ау.
[03:49:32.800 --> 03:49:35.800]  Значит, смотрите. Теперь давайте смотреть.
[03:49:35.800 --> 03:49:37.800]  Как будет... Ну вот.
[03:49:37.800 --> 03:49:42.800]  Ну, кейлист. То есть, в принципе, если вы просто из корня достали элементы с кейлиста,
[03:49:42.800 --> 03:49:44.800]  в общем-то, больше ничего делать не надо.
[03:49:46.800 --> 03:49:52.800]  Проблема начинается только если вы пришли в этот минимум, пошли в лист, а он пустой.
[03:49:53.800 --> 03:49:56.800]  Вот тогда нужен сифт.
[03:49:57.800 --> 03:50:03.800]  Ну, потому что пока у вас тут 10 элементов, значит, в ближайшие 10 раз обращение к достанию элементов оттуда,
[03:50:03.800 --> 03:50:06.800]  в общем-то, сифтов вызывать не будут.
[03:50:06.800 --> 03:50:08.800]  Ну, потому что, ну, достали и достали.
[03:50:08.800 --> 03:50:09.800]  Ну, достали и достали.
[03:50:09.800 --> 03:50:11.800]  Ну, достали и достали.
[03:50:11.800 --> 03:50:16.800]  Да, вот это и оно, что если есть что доставать, то достаем и не паримся.
[03:50:16.800 --> 03:50:18.800]  Секеи от этого не меняется.
[03:50:18.800 --> 03:50:20.800]  Смотрите.
[03:50:20.800 --> 03:50:24.800]  И вот, наконец, в какой-то момент обнаружилось, что вы хотели достать минимум, а он пустой.
[03:50:24.800 --> 03:50:26.800]  Что делать?
[03:50:26.800 --> 03:50:28.800]  Значит, тогда вы делаете так.
[03:50:28.800 --> 03:50:30.800]  Вы запускаете сифт.
[03:50:30.800 --> 03:50:34.800]  Ну, во-первых, начнем с того, что вы как бы...
[03:50:34.800 --> 03:50:38.800]  То есть, как бы ликвидируете этот лист?
[03:50:38.800 --> 03:50:40.800]  Ну, там надо его аккуратно ликвидировать.
[03:50:40.800 --> 03:50:43.800]  Там, может быть, лучше нот.
[03:50:43.800 --> 03:50:47.800]  То есть, по большому счету, вы когда сейчас в рекурсии будете пробирать,
[03:50:47.800 --> 03:50:51.800]  первое, что вы будете предполагать, что эти указатели больше не валидны.
[03:50:51.800 --> 03:50:56.800]  То есть, там удалять лист будет небезопасно, потому что вы с одного указателя удалите,
[03:50:56.800 --> 03:50:59.800]  а с остальных тогда удаление приведет к какому-то коррапту.
[03:50:59.800 --> 03:51:00.800]  Вот.
[03:51:00.800 --> 03:51:05.800]  К сожалению, это не будет коррапт, не элементы внутри, а памяти.
[03:51:05.800 --> 03:51:06.800]  Вот.
[03:51:06.800 --> 03:51:11.800]  Поэтому вы можете там просто отправить этот лист, сказать, что там...
[03:51:11.800 --> 03:51:15.800]  То есть, можете сразу удалить лист, а в сифте, на самом деле, этим удалением не заниматься.
[03:51:15.800 --> 03:51:20.800]  То есть, просто говорить, что если мне пришел сифт от вершины, то я считаю, что этот указатель не валиден,
[03:51:20.800 --> 03:51:23.800]  и этот лист уже удален, нам он не интересен.
[03:51:23.800 --> 03:51:25.800]  Понятно, да?
[03:51:25.800 --> 03:51:27.800]  Вот.
[03:51:32.800 --> 03:51:36.800]  Так, если у нас key list стал пустым, то мы вызываем сифт.
[03:51:36.800 --> 03:51:40.800]  Точнее так, мы удаляем этот лист пустой, он нам не нужен, да?
[03:51:40.800 --> 03:51:43.800]  Да, это, кстати, важный момент, действительно.
[03:51:43.800 --> 03:51:47.800]  Значит, вот мы удаляем этот лист и запускаем сифт.
[03:51:47.800 --> 03:51:48.800]  Что делает сифт?
[03:51:48.800 --> 03:51:52.800]  Ну, сифт делает, как всегда, запускает сифт от next.
[03:51:52.800 --> 03:51:53.800]  Да?
[03:51:53.800 --> 03:51:54.800]  Где он там ищет?
[03:51:54.800 --> 03:51:55.800]  То есть, задача его...
[03:51:55.800 --> 03:51:59.800]  Но задача его сделать так, чтобы тут, когда мы возвращаемся, вот, допустим, вызвали отсюда сифт,
[03:51:59.800 --> 03:52:04.800]  надо, чтобы тут было корректное поддерево, и в нем тоже, если это не плюс бесконечность,
[03:52:04.800 --> 03:52:07.800]  то тут какой-то лист тоже был.
[03:52:07.800 --> 03:52:11.800]  Ну, понятно, из плюс бесконечности ни в какой лист мы не показываем,
[03:52:11.800 --> 03:52:15.800]  но какой-то лист тут оказаться должен.
[03:52:15.800 --> 03:52:17.800]  Понятно, да?
[03:52:17.800 --> 03:52:20.800]  Вот.
[03:52:20.800 --> 03:52:23.800]  То есть, происходить это будет примерно следующим образом.
[03:52:23.800 --> 03:52:25.800]  То есть, ну, я так первую итерацию скажу.
[03:52:25.800 --> 03:52:29.800]  Вот, когда мы сюда придем и обнаружим, что детей нет, тогда что мы сделаем?
[03:52:29.800 --> 03:52:36.800]  Мы говорим, что, значит, понятно, что тут секея нет, тут мы рисуем плюс бесконечность,
[03:52:36.800 --> 03:52:42.800]  тут мы рисуем плюс бесконечность, этого указателя нет, а есть указатель на пустоту,
[03:52:42.800 --> 03:52:44.800]  потому что, ну...
[03:52:44.800 --> 03:52:50.800]  То есть, помните, разницу между понятиями пустой лист и пустота, да?
[03:52:50.800 --> 03:52:53.800]  Вот.
[03:52:53.800 --> 03:52:55.800]  Тогда что мы здесь делаем?
[03:52:55.800 --> 03:52:58.800]  Мы замечаем, что здесь висит какое-то дерево, да?
[03:52:58.800 --> 03:53:02.800]  То есть, более того, у этого дерева есть тоже правый путь, на самом деле,
[03:53:02.800 --> 03:53:09.800]  у этого правого пути тоже есть указатель на какой-то лист, да?
[03:53:09.800 --> 03:53:15.800]  Тоже на какой-то вот автобусик, да?
[03:53:15.800 --> 03:53:18.800]  Вот.
[03:53:18.800 --> 03:53:21.800]  Нет, конечно, другой автобус.
[03:53:21.800 --> 03:53:26.800]  Потому что этот автобус был как бы у тех элементов, у кого вот этот секей псевдоним,
[03:53:26.800 --> 03:53:30.800]  а этот автобус у тех, у кого вот этот секей псевдоним.
[03:53:30.800 --> 03:53:32.800]  И теперь фишка, смотрите, в чем.
[03:53:32.800 --> 03:53:36.800]  Мы теперь можем посвапать элементы местами, да?
[03:53:36.800 --> 03:53:38.800]  То есть, вот давайте я сейчас вот...
[03:53:38.800 --> 03:53:42.800]  Ну ладно, эти указатели мы все равно убили, список убили, поэтому...
[03:53:42.800 --> 03:53:44.800]  Вот.
[03:53:44.800 --> 03:53:49.800]  Поэтому тут теперь оказывается, что все, что нам нужно теперь повесить.
[03:53:49.800 --> 03:53:51.800]  Вот.
[03:53:51.800 --> 03:53:53.800]  Вот так.
[03:53:53.800 --> 03:53:54.800]  Вот.
[03:53:54.800 --> 03:54:00.800]  Ну, повесить, и, видимо, секей, то есть ключик передается отсюда, типа, да?
[03:54:00.800 --> 03:54:06.800]  Ну, теперь, раз ключик передается отсюда, то есть давайте назовем его просто С, да?
[03:54:06.800 --> 03:54:09.800]  Тут он С, тут он С, тут он С, и тут он, соответственно, С,
[03:54:09.800 --> 03:54:12.800]  но передается теперь не только этот минимальный ключик,
[03:54:12.800 --> 03:54:18.800]  но и указатель на лист тоже теперь берется отсюда.
[03:54:18.800 --> 03:54:26.800]  Но это тоже, ну вот, но это, в общем-то, тоже не сильно сложно, да?
[03:54:26.800 --> 03:54:28.800]  Потому что, в общем-то, только, да.
[03:54:28.800 --> 03:54:32.800]  Ну, то есть, нет, это мы отсюда там удалим, и то...
[03:54:32.800 --> 03:54:35.800]  Ну да, то есть, в принципе, да, удалить мы его, конечно, должны,
[03:54:35.800 --> 03:54:39.800]  то есть, когда тут будет плюс бесконечность, но мы его сейчас и удалим, значит, один...
[03:54:39.800 --> 03:54:44.800]  Да, но просто значит, один из этих указателей исчезнет, ничего страшного.
[03:54:44.800 --> 03:54:46.800]  Чего?
[03:54:47.800 --> 03:54:56.800]  Нет, на один и тот же пустой список они указывать не будут.
[03:54:56.800 --> 03:55:00.800]  Ну, нет, а сейчас нас не волнует.
[03:55:00.800 --> 03:55:04.800]  Нет, там будет просто идея такая, мы вызвали сифт, обращаемся в список,
[03:55:04.800 --> 03:55:06.800]  если он все еще пустой, еще сифт, и еще.
[03:55:06.800 --> 03:55:13.800]  То есть там кажется, что мы ничего не делаем, но на самом деле мы удалили как минимум один список.
[03:55:13.800 --> 03:55:15.800]  Поэтому как бы...
[03:55:15.800 --> 03:55:18.800]  Поэтому как бы что-то произошло.
[03:55:28.800 --> 03:55:32.800]  Нет, это был, ну, это псевдоним всего этого листа.
[03:55:32.800 --> 03:55:34.800]  Но он единый, да.
[03:55:34.800 --> 03:55:46.800]  Да, но это означает, что просто уменьшивая из этих элементов появилась новая реинкарнация.
[03:55:53.800 --> 03:55:55.800]  Нет, нет, нет.
[03:56:05.800 --> 03:56:08.800]  Где лежит одна вершина?
[03:56:08.800 --> 03:56:11.800]  Нет, sec это не значение, это псевдоним.
[03:56:11.800 --> 03:56:17.800]  У нас же всего этого пути лист список, для него будет просто список одной вершины.
[03:56:17.800 --> 03:56:19.800]  Не обязательно, может и не...
[03:56:19.800 --> 03:56:20.800]  Изначально.
[03:56:20.800 --> 03:56:22.800]  Изначально, да.
[03:56:22.800 --> 03:56:25.800]  То есть как бы это один элемент, и мы его размножим.
[03:56:25.800 --> 03:56:30.800]  Нет, мы его не размножали, это один и тот же список, видите, ссылки стоят, и тут на один и тот же список.
[03:56:30.800 --> 03:56:33.800]  Я не копирую его, обратите внимание.
[03:56:35.800 --> 03:56:39.800]  А что есть и тот список, который вот при чём тоже будет?
[03:56:39.800 --> 03:56:41.800]  Нам же придётся так, да.
[03:56:41.800 --> 03:56:42.800]  Список?
[03:56:42.800 --> 03:56:46.800]  Да, но тогда просто каждый сифт будет удалять как минимум один список.
[03:56:46.800 --> 03:56:49.800]  Поэтому как бы амортизировано получится в будущем хорошо.
[03:56:49.800 --> 03:56:53.800]  У нас же была проверка, что мы и сифт делаем более того раза.
[03:56:53.800 --> 03:56:55.800]  Возможно она тут больше.
[03:56:55.800 --> 03:56:57.800]  Нет, ура, это раньше сифт.
[03:56:57.800 --> 03:57:03.800]  Потом я скажу, когда мы будем делать сифт второй раз, я расскажу, что мы будем делать.
[03:57:03.800 --> 03:57:04.800]  Пока же так.
[03:57:04.800 --> 03:57:09.800]  То есть если мы не делаем сифт второй раз, то как бы вот это примерно по такой технологии работает.
[03:57:09.800 --> 03:57:13.800]  То есть мы к этому листу мы будем цеплять, видимо, некоторое время.
[03:57:14.800 --> 03:57:17.800]  То есть там мы будем пробрасывать С сюда и рисовать ссылки.
[03:57:17.800 --> 03:57:21.800]  Потом выяснится, что мы хотим пробросить сюда С, но тут выяснилось, что-то меньше.
[03:57:21.800 --> 03:57:23.800]  Поэтому мы этих детей посвапаем.
[03:57:23.800 --> 03:57:30.800]  То есть как бы эти ссылки на этот лист останутся, но как бы в некстовый путь пойдёт уже другой лист отсюда.
[03:57:31.800 --> 03:57:32.800]  Понимаете, да?
[03:57:34.800 --> 03:57:38.800]  Так что вот такая технология была бы, если бы у нас сифт был без развилок.
[03:57:40.800 --> 03:57:45.800]  Ну так сказать, развилка это плохое слово, тут оно другие ассоциации вызывает.
[03:57:45.800 --> 03:57:55.800]  Но если бы сифт вызывался каждый раз только один раз, то есть это нормальный такой сифт, который один раз проходит по этой цепочке и всё делает, то как бы никаких проблем вроде как не было бы.
[03:57:55.800 --> 03:57:58.800]  У нас есть mystical condition, проблемы с mystical condition.
[03:57:58.800 --> 03:58:00.800]  Да нет, погодите, это другой вопрос.
[03:58:00.800 --> 03:58:08.800]  Нет, mystical condition, он будет задавать там вопросы, почему там количество покорапченных элементов будет плохое.
[03:58:09.800 --> 03:58:11.800]  А в чём это у нас здесь проблема?
[03:58:11.800 --> 03:58:13.800]  Пока здесь проблем никаких.
[03:58:13.800 --> 03:58:20.800]  То есть просто если мы не будем делать сифт с mystical condition, то в принципе просто в каждом этом списке будет не более одного элемента.
[03:58:22.800 --> 03:58:28.800]  А в реальности, скорее всего, там вообще будет, то есть пустой список будет только в корневых элементах.
[03:58:28.800 --> 03:58:30.800]  А нет, это неправда.
[03:58:30.800 --> 03:58:34.800]  Он просто нам обеспечит такое немножко отложенное удаление.
[03:58:34.800 --> 03:58:42.800]  Без mystical condition на самом деле у нас каждый сифт, он каждый раз будет делать эту операцию.
[03:58:42.800 --> 03:58:46.800]  Потому что он далит список, там был один элемент, не более одного элемента.
[03:58:46.800 --> 03:58:48.800]  Но он стал пустой.
[03:58:48.800 --> 03:58:50.800]  То есть пока что без mystical condition...
[03:58:52.800 --> 03:58:54.800]  Ну нет, mystical condition тут ни при чём.
[03:58:54.800 --> 03:58:56.800]  Без mystical condition это просто...
[03:58:56.800 --> 03:59:02.800]  Ну совсем тупая реализация была бы, если бы вы сказали, что мы удаляем элементы из списка.
[03:59:02.800 --> 03:59:06.800]  Если в этот момент список стал пустым, давайте сразу сифт делать.
[03:59:10.800 --> 03:59:12.800]  Мы сказали немножко по-другому.
[03:59:12.800 --> 03:59:14.800]  Сказали, что так, в списке есть элемент, давай ему сюда и всё.
[03:59:14.800 --> 03:59:16.800]  А потом так, давай элемент.
[03:59:16.800 --> 03:59:18.800]  Ой, список пустой, вот тогда делай сифт.
[03:59:20.800 --> 03:59:22.800]  Да, совершенно верно.
[03:59:22.800 --> 03:59:24.800]  Совершенно верно.
[03:59:24.800 --> 03:59:26.800]  Без mystical condition такого случая не наступило.
[03:59:26.800 --> 03:59:30.800]  То есть разница пока в том, что у нас просто есть элемент...
[03:59:30.800 --> 03:59:36.800]  То есть сам элемент сидит в автобусе, а мы разговариваем с его, так сказать, даже не псевдонимом, а аватаром.
[03:59:36.800 --> 03:59:38.800]  По большому счёту.
[03:59:40.800 --> 03:59:48.800]  Но теперь просто фишка будет в том, что для оптимизации на самом деле у нас под аватар будет коллективным творчеством.
[03:59:48.800 --> 03:59:50.800]  Вот, вот ассоциация.
[03:59:50.800 --> 03:59:52.800]  Аватар и коллективное творчество, а то автозаки какие-то.
[03:59:54.800 --> 03:59:56.800]  Вот нормальная ассоциация.
[04:00:02.800 --> 04:00:04.800]  Идея теперь будет такая.
[04:00:04.800 --> 04:00:06.800]  Казалось бы, что мы теперь делаем?
[04:00:06.800 --> 04:00:08.800]  Ещё раз мы делаем.
[04:00:08.800 --> 04:00:16.800]  Сифт предполагает, что я пришёл в вершину, и у меня на самом деле листа больше нет.
[04:00:16.800 --> 04:00:18.800]  Она так не интересует.
[04:00:18.800 --> 04:00:20.800]  Это типа я пришёл.
[04:00:20.800 --> 04:00:22.800]  То есть я там откуда-то сверху пришёл.
[04:00:22.800 --> 04:00:24.800]  Теперь я говорю, так.
[04:00:24.800 --> 04:00:26.800]  У меня есть child, у меня есть next.
[04:00:26.800 --> 04:00:28.800]  Ну а что ж в простых случаях?
[04:00:28.800 --> 04:00:34.800]  Если на самом деле child и next у меня тупо нет, то что я делаю?
[04:00:34.800 --> 04:00:42.800]  Ну а то я как бы, если их тупо нет, то как бы я тогда себе рисую плюс бесконечности, а этот указатель значения не имеет.
[04:00:42.800 --> 04:00:44.800]  Логично, да?
[04:00:44.800 --> 04:00:50.800]  Ещё там возникнет случай, надо внимательно смотреть возникнет ли, но по мнению автора возникнет.
[04:00:50.800 --> 04:00:58.800]  Что если оказалось, если у меня оказалось, что у меня оба ребёнка бесконечности и бесконечность, то тогда я их должен убить.
[04:01:02.800 --> 04:01:04.800]  Ну, возможно с mystical condition это нарушится.
[04:01:04.800 --> 04:01:08.800]  Хотя у меня самого ощущения, что нет, но как бы...
[04:01:08.800 --> 04:01:10.800]  Ну а как?
[04:01:14.800 --> 04:01:16.800]  Нет, там просто, там знаете как аккуратно может быть?
[04:01:16.800 --> 04:01:22.800]  Вы только что, значит, сделали shift и привело к тому, что child стал бесконечности, да?
[04:01:22.800 --> 04:01:30.800]  Там дальше два варианта. Вы можете этот child удалить прямо сейчас и потом уже сделать, проверить mystical condition.
[04:01:30.800 --> 04:01:37.800]  А можете сначала сделать mystical condition, вот, а потом уже смотреть, не получилось ли у вас плюс бесконечность.
[04:01:37.800 --> 04:01:39.800]  Так же у нас на mystical condition нет?
[04:01:39.800 --> 04:01:43.800]  Нет, там, значит, там просто condition.
[04:01:43.800 --> 04:01:47.800]  Там if condition go to one.
[04:01:47.800 --> 04:01:49.800]  Да, go to там есть, да.
[04:01:55.800 --> 04:01:57.800]  А также, ну, как только у вас, ну, как бы...
[04:01:57.800 --> 04:02:01.800]  Вот, мы сделали extract min, мы удалили вершину.
[04:02:01.800 --> 04:02:03.800]  Да, возможности кей поменялся.
[04:02:03.800 --> 04:02:10.800]  Нет, мы просто бежим от начала списка до этого дерева и обдавляем suffix min.
[04:02:10.800 --> 04:02:12.800]  А, это работает.
[04:02:12.800 --> 04:02:20.800]  Значит, это работает, но как бы так, скажем так, если мы следим за тем, что у нас тут есть хотя бы половина ранга,
[04:02:20.800 --> 04:02:28.800]  то в общем-то тогда у нас до нас было типа не более чем ранг деревьев и это просто вписывается сюда.
[04:02:28.800 --> 04:02:31.800]  То есть асимпатически погоды вообще не делает.
[04:02:32.800 --> 04:02:33.800]  Да.
[04:02:33.800 --> 04:02:35.800]  Ну, идея, по крайней мере, такая.
[04:02:37.800 --> 04:02:38.800]  Вот.
[04:02:38.800 --> 04:02:43.800]  То есть shift у вас по-любому делается как минимум за вот половину вот этого вот, да.
[04:02:43.800 --> 04:02:51.800]  То есть если вы тут проделали вот этот вот shift с сжатиями и неожиданно поняли, что у вас детей чего-то маловато стало, да.
[04:02:51.800 --> 04:02:58.800]  То есть, ну, да, даже их возможно их даже много после свапов, но как бы если у вас глубина рекурсии оказалась меньше, чем пополам,
[04:02:58.800 --> 04:03:02.800]  то даже если там ноут, то имеет смысл тогда дерево может быть и расформировать,
[04:03:02.800 --> 04:03:08.800]  потому что у вас тут в этом дереве значит слишком много под деревьев уже просто там полностью цирюкнулось.
[04:03:09.800 --> 04:03:10.800]  Вот.
[04:03:10.800 --> 04:03:14.800]  Ну, вот, поэтому вот, соответственно, но вот.
[04:03:14.800 --> 04:03:20.800]  А если у вас тут как бы детей этот список имел длину как минимум ранг пополам, то как бы получается это от ранга,
[04:03:20.800 --> 04:03:24.800]  то есть омега от ранга пополам или операции вы сделали, то же самое, что омега от ранга.
[04:03:24.800 --> 04:03:29.800]  Омега от ранга. Следовательно, пробежаться потом посчитать суффикс мин для вас уже бесплатно.
[04:03:29.800 --> 04:03:31.800]  Вот, поэтому, то есть.
[04:03:31.800 --> 04:03:32.800]  Да.
[04:03:32.800 --> 04:03:38.800]  Да, вот, к сожалению, в статьи такие мелочи тоже описываются на вот такое, в таком стиле.
[04:03:38.800 --> 04:03:39.800]  Да.
[04:03:39.800 --> 04:03:40.800]  Вот.
[04:03:40.800 --> 04:03:45.800]  Ну, где-то так, да.
[04:03:45.800 --> 04:03:48.800]  Ну, где-то с помощью монеты, где-то просто вот интуитивно.
[04:03:48.800 --> 04:03:50.800]  Ну, то есть, видимо, считается, что там все на высоком уровне.
[04:03:50.800 --> 04:03:55.800]  Что как бы статью читают серьезные люди.
[04:03:55.800 --> 04:04:00.800]  Они дети, 1 плюс 1 равно 2.
[04:04:00.800 --> 04:04:03.800]  А это хоть афибонати.
[04:04:03.800 --> 04:04:06.800]  Она работает, она работает вот хорошо.
[04:04:06.800 --> 04:04:08.800]  Доказательства.
[04:04:08.800 --> 04:04:10.800]  Вот дети, это потенциал.
[04:04:10.800 --> 04:04:11.800]  Вот так вот.
[04:04:11.800 --> 04:04:13.800]  Ну, там подразумевается, что мы тут болены на более серьезном уровне.
[04:04:13.800 --> 04:04:14.800]  Мыслим все-таки.
[04:04:14.800 --> 04:04:18.800]  Чем там вот это выучили, переписали и ничего не поняли.
[04:04:18.800 --> 04:04:19.800]  Вот.
[04:04:23.800 --> 04:04:24.800]  Чего, где было?
[04:04:29.800 --> 04:04:30.800]  Нет, ну, бывало, да.
[04:04:30.800 --> 04:04:31.800]  Нет, ну, как сказать, там, понятия так.
[04:04:31.800 --> 04:04:33.800]  Одно дело, в каком стиле написано, правда, статья.
[04:04:33.800 --> 04:04:38.800]  Другое дело, как бы понятно, что это не отменяет того факта, что статья как бы формально просто абсолютно верная.
[04:04:38.800 --> 04:04:42.800]  Просто там, видимо, просто идея написана на более высоком уровне.
[04:04:42.800 --> 04:04:45.800]  Но как бы понятно, что каждый из них может быть проверено, естественно.
[04:04:45.800 --> 04:04:46.800]  То есть, как бы условия.
[04:04:46.800 --> 04:04:48.800]  То есть, как бы на уровне студентов, как бы, да.
[04:04:48.800 --> 04:04:52.800]  То есть, на экзамене я могу там случайно спросить у вас каждую из этих деталей.
[04:04:52.800 --> 04:04:55.800]  Вы там не должны там расписать просто идеального формализма, да.
[04:04:55.800 --> 04:04:56.800]  Вот.
[04:04:56.800 --> 04:04:57.800]  Реально.
[04:04:57.800 --> 04:05:02.800]  Ну, а в мире ученых там, соответственно, значит, просто ученый сам по себе это будет делать.
[04:05:02.800 --> 04:05:05.800]  И может потребовать это от автора статьи, если у него возникнут вопросы.
[04:05:05.800 --> 04:05:09.800]  Ну и тогда, как бы, либо автор ему объяснит, почему это так.
[04:05:10.800 --> 04:05:15.800]  Либо они придут к тому, что там действительно бага, которую надо исправлять.
[04:05:15.800 --> 04:05:18.800]  Либо автор скажет, что ученые стоят на его понимании.
[04:05:18.800 --> 04:05:20.800]  Ну, скажем так.
[04:05:20.800 --> 04:05:22.800]  Я писал, как бы, как это в идеале.
[04:05:22.800 --> 04:05:27.800]  То есть, понятно, в реальности, конечно, может быть по-разному, но обычно там, да.
[04:05:27.800 --> 04:05:28.800]  То есть, нет.
[04:05:28.800 --> 04:05:30.800]  То есть, часто бывает проблема, что иногда бывает там к ученому,
[04:05:30.800 --> 04:05:35.800]  ты спросишь там, почему, он тебе подробно расскажет, но думаешь, блин, почему это не написано?
[04:05:35.800 --> 04:05:36.800]  Почему это не написалось в статье?
[04:05:36.800 --> 04:05:37.800]  То есть, я не знаю.
[04:05:37.800 --> 04:05:38.800]  Понятно, почему.
[04:05:38.800 --> 04:05:41.800]  Потому что лично автор посчитал, что это очевидно.
[04:05:41.800 --> 04:05:44.800]  Нет, ладно, там еще была, могла быть другая причина.
[04:05:44.800 --> 04:05:47.800]  Может, он не посчитал, что это очевидно, но он вынужден был сокращать статью,
[04:05:47.800 --> 04:05:51.800]  потому что ему там в журнале сказали, что нужно поменьше страниц делать.
[04:05:51.800 --> 04:05:54.800]  Поэтому он подобными там мелочами пожертвовал.
[04:05:54.800 --> 04:05:56.800]  То есть, считая, что как бы такие мелочи.
[04:05:56.800 --> 04:06:02.800]  Но хотя бы корректнее сказать так, что некоторые мелочи в статье из-за там малого парня я пропускаю.
[04:06:02.800 --> 04:06:06.800]  Детали читайте и дальше дать ссылку и два линии на тот же архив, кстати.
[04:06:07.800 --> 04:06:08.800]  Вот, то есть, детали там.
[04:06:08.800 --> 04:06:14.800]  А как бы то, что она опубликалась в статье, это значит сигнал того, что да, меня читали, да, посчитали это адекватно.
[04:06:14.800 --> 04:06:15.800]  Вот.
[04:06:15.800 --> 04:06:17.800]  То есть, вот так это работает.
[04:06:17.800 --> 04:06:18.800]  Так вот.
[04:06:19.800 --> 04:06:21.800]  Значит, с плюс бесконечности мы поступили так.
[04:06:21.800 --> 04:06:25.800]  Если оказалось, что не бесконечность, то значит, что мы делаем?
[04:06:25.800 --> 04:06:29.800]  Тогда мы и говорим, что там тут у нас что-то, тут у нас что-то.
[04:06:29.800 --> 04:06:33.800]  Мы из этого сифт выкопали, тут плюс бесконечности не оказалось.
[04:06:33.800 --> 04:06:38.800]  Оказалось, какой-нибудь С, тут казалось С штрих, мы их даже посвапали, если надо, деревья, да.
[04:06:39.800 --> 04:06:44.800]  Но, то есть, после того, как мы их посвапали, оказалось, что у этой С-шки есть какой-то лист.
[04:06:45.800 --> 04:06:48.800]  То есть, если она не плюс бесконечности, то у нее есть, естественно, какой-то адекватный лист.
[04:06:50.800 --> 04:06:53.800]  Тогда и мы присоединяемся к этому листу.
[04:06:55.800 --> 04:06:56.800]  Ну, хотелось, ну вот.
[04:06:56.800 --> 04:06:58.800]  То есть, вот так вот мы говорим С.
[04:06:59.800 --> 04:07:02.800]  Так мы делаем, пока не приходит mystical condition.
[04:07:03.800 --> 04:07:09.800]  А в этот момент говорим, так, а не наступил и там час Х, не наступил и mystical condition.
[04:07:10.800 --> 04:07:13.800]  Да, значит, как, значит, что такое судный день?
[04:07:13.800 --> 04:07:19.800]  Судный день, значит, судный день говорит нам неожиданную вещь.
[04:07:20.800 --> 04:07:32.800]  Он говорит нам, слушайте, а давай, ну вот, слушай, а давай-ка мы, ну судный день говорит нам, а давай-ка от этой вершины мы вызовем, собственно, еще раз сифт.
[04:07:33.800 --> 04:07:35.800]  Что это будет означать?
[04:07:36.800 --> 04:07:39.800]  Это будет означать, что он мысленно будет считать, что этих ссылок не существует.
[04:07:39.800 --> 04:07:42.800]  Delete вызывать не будет, как мы с вами договорились, да?
[04:07:43.800 --> 04:07:46.800]  То есть, он просто будет считать, что эти ссылки невалидные, он будет их там пересылать.
[04:07:46.800 --> 04:07:56.800]  То есть, что там пошаманит, пошаманит, и тут получилась какая-то там, допустим, ну если плюс бесконечности, то понятно, там мы просто что-то посвапали, удалили, да?
[04:07:56.800 --> 04:07:59.800]  Ну, не важно, ладно, вот в общем случае, давайте сейчас общий случай.
[04:07:59.800 --> 04:08:01.800]  Тут получилась какое-то D, да?
[04:08:03.800 --> 04:08:07.800]  То есть, тут получилась D, и еще какой-то лист, да?
[04:08:09.800 --> 04:08:10.800]  Вот он, да?
[04:08:10.800 --> 04:08:12.800]  И с этой стороны какой-то лист.
[04:08:13.800 --> 04:08:15.800]  Вот так вот, вот так вот, вот так вот.
[04:08:17.800 --> 04:08:18.800]  Да, да, ну сейчас я вот.
[04:08:19.800 --> 04:08:20.800]  Вот.
[04:08:20.800 --> 04:08:21.800]  Какой-то лист.
[04:08:21.800 --> 04:08:24.800]  Возможно, мы эти деревья посвапаем, видите, указателей пока сюда нету.
[04:08:24.800 --> 04:08:27.800]  То есть, этих все указателей не существует, мы их убили.
[04:08:28.800 --> 04:08:29.800]  То есть, это как бы она.
[04:08:30.800 --> 04:08:31.800]  Вот.
[04:08:32.800 --> 04:08:40.800]  Ну, значит, возможно, мы их посвапали, и теперь, ну и теперь вот оказывается, что оказалось бы, мы теперь должны сказать, что эта вершина указывает только на этот лист, да?
[04:08:41.800 --> 04:08:43.800]  Но у нас есть этот лист, и в нем тоже есть элементы.
[04:08:44.800 --> 04:08:46.800]  Так вот, идея становится очень простой.
[04:08:46.800 --> 04:08:50.800]  Мы эти листы объединяем.
[04:08:53.800 --> 04:08:55.800]  Призваиваем им всем, да?
[04:08:55.800 --> 04:08:56.800]  Да.
[04:08:56.800 --> 04:08:57.800]  Да.
[04:08:57.800 --> 04:08:58.800]  То есть, да.
[04:09:05.800 --> 04:09:06.800]  Минимум, во-первых.
[04:09:06.800 --> 04:09:10.800]  А во-вторых, мы уже предположили, что мы посвапали эти деревья, и это меньше этого.
[04:09:13.800 --> 04:09:18.800]  А, но С, нет, С уже было ликвидировано, поэтому то, что мы могли достать снизу, оно, заведомо, не меньше.
[04:09:22.800 --> 04:09:23.800]  С3 тут написано.
[04:09:23.800 --> 04:09:27.800]  Ну, помните у нас, вот, было тут С, потом тут стало С штрих, да?
[04:09:28.800 --> 04:09:32.800]  Но вместо того, чтобы просто копировать сюда С штрих, мы тут взяли и еще вызвали.
[04:09:34.800 --> 04:09:35.800]  А?
[04:09:35.800 --> 04:09:37.800]  Вот когда мистикл кодишн вызвали.
[04:09:38.800 --> 04:09:39.800]  То есть, по факту, да.
[04:09:39.800 --> 04:09:45.800]  То есть, как бы мы вызвали один раз сифт, получили вот этот лист, потом вызвали второй, и результат объединили с тем, что было раньше.
[04:09:46.800 --> 04:09:47.800]  То есть, вот такой.
[04:09:47.800 --> 04:09:48.800]  То есть, обратите внимание.
[04:09:48.800 --> 04:09:51.800]  То есть, как бы мы потеряли две вершины, как бы, да.
[04:09:52.800 --> 04:09:58.800]  То есть, получается, потеряли, то есть, в этом месте не один псевдоним, вот этот потеряли, а типа два.
[04:09:59.800 --> 04:10:00.800]  Но как бы два листа объединили.
[04:10:00.800 --> 04:10:03.800]  То есть, количество листов у нас, обратите внимание, тоже в этом месте уменьшилось на один.
[04:10:05.800 --> 04:10:06.800]  Понимаете, да?
[04:10:08.800 --> 04:10:09.800]  Вот.
[04:10:10.800 --> 04:10:13.800]  Поэтому и нод, поэтому оказывается, нод.
[04:10:13.800 --> 04:10:15.800]  Вот, поэтому с листами получается хорошо.
[04:10:16.800 --> 04:10:17.800]  Вот.
[04:10:17.800 --> 04:10:22.800]  То есть, этот лист прообразывается, и ровно в этом месте, именно в этом месте, элементы начинают карабтиться.
[04:10:24.800 --> 04:10:33.800]  В принципе, с точки зрения анализа, ну, видимо, мы в следующий раз будем это прямо, видимо, пробежимся по этой структуре еще раз и проведем прям подробный анализ, почему все красиво работает.
[04:10:33.800 --> 04:10:35.800]  Почему инварианты схлопываются.
[04:10:35.800 --> 04:10:37.800]  Тем более, что нас вообще должны выгонять.
[04:10:37.800 --> 04:10:38.800]  Ну вот.
[04:10:41.800 --> 04:10:42.800]  А нет, начинают нас выгонять.
[04:10:42.800 --> 04:10:44.800]  Поэтому, поэтому последнее, что скажу.
[04:10:44.800 --> 04:10:48.800]  Но просто вот фишка будет в том, что в этом месте карабтится.
[04:10:48.800 --> 04:10:51.800]  С точки зрения анализа, в общем, все эти элементы будут уже покарабчены.
[04:10:52.800 --> 04:10:56.800]  То есть, как бы, то есть, пока элемент, пока лист ни с кем не объединяли.
[04:10:56.800 --> 04:10:58.800]  И ничего не доставало там, ничего, может быть, не доставали.
[04:10:58.800 --> 04:11:00.800]  Значит, тогда он адекватный.
[04:11:00.800 --> 04:11:02.800]  В противном случае, карабт.
[04:11:03.800 --> 04:11:13.800]  Но в принципе, ну вот, то есть основная идея будет в том, что, конечно, эти карабты будут, то есть mystical condition будет требовать, что высота дерева, она должна быть как минимум R.
[04:11:13.800 --> 04:11:18.800]  То есть, для mystical condition, так оно ж у нас рыжее было mystical condition, да?
[04:11:18.800 --> 04:11:19.800]  Да.
[04:11:19.800 --> 04:11:25.800]  И оно требует, чтобы действительно rank, то есть V rank должен быть больше R.
[04:11:25.800 --> 04:11:30.800]  А R у нас это будет констант, я так забираю вперед, скажу, она там обычно равна Q, Q, Q.
[04:11:31.800 --> 04:11:33.800]  Неважно абсолютно.
[04:11:33.800 --> 04:11:42.800]  Просто до объединить.
[04:11:42.800 --> 04:11:46.800]  Такая Platoчка должна быть qualify.
[04:11:46.800 --> 04:11:55.800]  Да, в crate, complexity, complexity и смотрите, серigram, Beauty, determine or mapping.
[04:11:55.800 --> 04:12:05.600]  не важно абсолютно просто до обединить все как бы да ну вот то есть но вот ну
[04:12:05.600 --> 04:12:09.620]  корректности будет но вот но просто корректно будет доказать что вот в этих
[04:12:09.620 --> 04:12:18.240]  вот пока общедых списков суммарно адекватное количество элементов нет мы
[04:12:18.240 --> 04:12:22.360]  нет почему быть мы как бы оставляем варианты естественно что там
[04:12:22.360 --> 04:12:27.040]  псевдоним больше либо равен каждому из этих элементов естественно это нет
[04:12:27.040 --> 04:12:31.800]  это мы все сохраняем и то что ассекеи тут расположены именно по каким-то по
[04:12:31.800 --> 04:12:36.880]  правилам кучи мы тоже сохраняем естественно вот но просто вот это вот
[04:12:36.880 --> 04:12:42.280]  это нам будет гарантировать на самом деле что скорее всего то есть элементы
[04:12:42.280 --> 04:12:49.080]  ранга меньше чем r не попортится ну сами по себе элементы ну видите сами по
[04:12:49.080 --> 04:12:53.360]  себе элементы ранг иногда меняют да ну потому что если мы вспомним обычную
[04:12:53.360 --> 04:12:57.400]  бенумиальную кучу то значит когда мы их объединяем один из этих корней
[04:12:57.400 --> 04:13:02.160]  становится рангом высшего уровня да вот тогда в этом месте он там начинает как-то
[04:13:02.160 --> 04:13:08.320]  портится вот а так элемент ну я либо его достали и сфта и сказали ты нам
[04:13:08.320 --> 04:13:13.480]  нужен ты теперь более высокого ранга поэтому ты покоррапчиной о покоррупчиной
[04:13:13.480 --> 04:13:17.960]  да вот да начинает с какого-то уровня люди начинают корруптица до интересной
[04:13:17.960 --> 04:13:21.360]  идее конечно да но до какого-то момента вот человеческой
[04:13:21.360 --> 04:13:26.320]  компашки все адекватно вот ну ладно давайте на этом остановимся и тогда в
[04:13:26.320 --> 04:13:29.560]  следующий раз продолжим
