[00:00.000 --> 00:10.000]  Сегодня у нас ключевая тема, но видимо она будет и сегодня, и в следующий раз.
[00:10.000 --> 00:14.000]  Это ключевая тема, это NP-полнота.
[00:14.000 --> 00:24.000]  NP-полнота, но неформально.
[00:24.000 --> 00:28.000]  NP-полные задачи.
[00:28.000 --> 00:32.000]  Это такие задачи, которые самые сложные в классе NP.
[00:32.000 --> 00:37.000]  Я напомню, что мы в прошлый раз познакомились с этим классом.
[00:37.000 --> 00:41.000]  Изучили два подхода к определению.
[00:41.000 --> 00:45.000]  Есть один подход через генетогенерные машины.
[00:45.000 --> 00:51.000]  Другой подход через сертификатные машины.
[00:51.000 --> 00:54.000]  То есть машины с двумя аргументами.
[00:54.000 --> 00:59.000]  NP-полные задачи. Это самые сложные задачи.
[00:59.000 --> 01:09.000]  Открытие NP-полноты послужило началом исследования вопроса о том, равны ли П и NP.
[01:09.000 --> 01:16.000]  Оказалось, что не просто эти задачи самые сложные, а еще они все друг другу эквивалентные.
[01:16.000 --> 01:25.000]  Можно сказать, что все эти задачи являются переформулировками друг друга в других терминах.
[01:25.000 --> 01:34.000]  Можно сказать, что можно перевести с одного языка на другой и фактически будет та же самая задача.
[01:34.000 --> 01:41.000]  Сначала мы начнем знакомиться с основами теории.
[01:41.000 --> 01:43.000]  Формально.
[01:43.000 --> 01:47.000]  Потом докажем, что NP-полные задачи бывают.
[01:47.000 --> 01:52.000]  А потом будем доказывать про множество конкретных задач.
[01:52.000 --> 01:57.000]  Они будут NP-полными и там будут некоторые специальные конструкции.
[01:58.000 --> 02:05.000]  Хорошо. Начнем с определения того, что такое свадимость.
[02:05.000 --> 02:12.000]  Определение того, что такое полинамиальная свадимость.
[02:13.000 --> 02:16.000]  Полинамиальная свадимость.
[02:22.000 --> 02:27.000]  Определение такое, что есть два языка.
[02:27.000 --> 02:32.000]  Один полинамиально сводится к другому.
[02:32.000 --> 02:45.000]  Но если существует полинамиальная вычислимая функция.
[02:45.000 --> 02:48.000]  Полинамиальная вычислимая функция.
[02:48.000 --> 02:56.000]  Будем считать, что A и B это языки под множество каких-то слов, скажем, двоичных.
[02:56.000 --> 02:59.000]  То есть слов из 0 единицы.
[02:59.000 --> 03:04.000]  Получается, что существует полинамиальная вычислимая функция F.
[03:04.000 --> 03:10.000]  Которая отображает 0,1 со звездочкой, 0,1 со звездочкой.
[03:14.000 --> 03:17.000]  Ну и конечно еще нужно сказать, что она всюду определена.
[03:19.000 --> 03:22.000]  Давайте это явно укажем.
[03:22.000 --> 03:25.000]  Она всюду определенная.
[03:25.000 --> 03:29.000]  Ну можно считать, что это следует из полинамиальной вычислимости.
[03:29.000 --> 03:32.000]  Если считать, что если функция данной точки не определена,
[03:32.000 --> 03:35.000]  то она вычисляется за бесконечное время.
[03:35.000 --> 03:39.000]  Тогда из полинамиальной вычислимости следует сюда определенность.
[03:39.000 --> 03:41.000]  Ну можно и явно указать.
[03:41.000 --> 03:44.000]  Значит, функция F со следующим свойством.
[03:44.000 --> 04:00.000]  Такая, что для любого x, x лежит в A тогда и только тогда, когда F от x лежит в B.
[04:00.000 --> 04:17.000]  Вот, больше ничего не требуется от функции.
[04:17.000 --> 04:21.000]  Она не должна быть никакой биекцией, инъекцией.
[04:21.000 --> 04:23.000]  Ничего такого не нужно.
[04:23.000 --> 04:25.000]  Нужно только вот это вот.
[04:25.000 --> 04:30.000]  Можно посмотреть вот так вот.
[04:30.000 --> 04:33.000]  Вот пусть есть два облачка.
[04:33.000 --> 04:40.000]  Два облачка это соответственно две копии множества всех плов.
[04:40.000 --> 04:43.000]  И вот эта облачка как-то разделена.
[04:43.000 --> 04:47.000]  Здесь есть A и есть A с чертой.
[04:47.000 --> 04:49.000]  То есть дополнение K.
[04:49.000 --> 04:53.000]  Здесь будет ответ да, здесь будет ответ нет.
[04:53.000 --> 04:58.000]  А вот эта облачка как-то по-другому разделена на B.
[04:58.000 --> 05:01.000]  На B и B с чертой.
[05:01.000 --> 05:12.000]  И тогда, соответственно, обязательно из этой части функция отображается вот в эту часть.
[05:12.000 --> 05:14.000]  Но не обязательно вовсю.
[05:14.000 --> 05:18.000]  Может быть и склеивается.
[05:18.000 --> 05:22.000]  Может быть какие-то значения не принимаются.
[05:22.000 --> 05:28.000]  В общем, можно тут написать, что вот тут есть как бы такой образ.
[05:28.000 --> 05:32.000]  Образ A, который целиком лежит внутри B.
[05:32.000 --> 05:40.000]  Ну а здесь, наоборот, есть образ A с чертой, который лежит целиком внутри B с чертой.
[05:40.000 --> 05:47.000]  Он выглядит как-то вот так.
[05:47.000 --> 05:54.000]  Вот.
[05:54.000 --> 05:58.000]  Да, значит, вот такая вот картина получается.
[05:58.000 --> 06:01.000]  Значит, для чего это нужно?
[06:01.000 --> 06:09.000]  Ну, в общем, основное утверждение, которое мы тут используем,
[06:09.000 --> 06:19.000]  будет вот такое вот, что если A пальномиально сводится к B
[06:19.000 --> 06:23.000]  и при этом B лежит в P,
[06:23.000 --> 06:35.000]  то тогда A тоже лежит в P.
[06:35.000 --> 06:45.000]  Ну что, это разное множество.
[06:45.000 --> 06:48.000]  Вот, соответственно, как это утверждение доказывается.
[06:48.000 --> 06:54.000]  Ну, тут основное свойство, которое здесь используется,
[06:54.000 --> 07:01.000]  это то, что композиция параллельно вычислимых функций параллельно вычислима.
[07:01.000 --> 07:06.000]  Получается, что мы можем сначала вычислить f за пальномиальное время,
[07:06.000 --> 07:11.000]  а потом про результат понять, лежит он в B или в B с чертой.
[07:11.000 --> 07:19.000]  И тогда получается, что в точности этот же ответ про образ f от x
[07:19.000 --> 07:24.000]  будет ответом и происходный x относительно A.
[07:24.000 --> 07:27.000]  Потому что у нас получается, что x лежит в A,
[07:27.000 --> 07:30.000]  тогда это тогда, когда f от x лежит в B,
[07:30.000 --> 07:34.000]  а на вот этот вопрос мы можем ответить за пальномиальное время,
[07:34.000 --> 07:39.000]  причем за пальномиальное время не только длины f от x, но и длины исходного x.
[07:39.000 --> 07:46.000]  И этот же ответ будет годиться и вот здесь.
[07:46.000 --> 07:52.000]  Вот, ну, значит, есть еще ряд утверждений такого рода.
[07:58.000 --> 08:00.000]  Еще ряд утверждений.
[08:00.000 --> 08:04.000]  Можно сказать, что если, например, транзитивность верна,
[08:04.000 --> 08:09.000]  значит, если A сводится к B, B сводится к C,
[08:09.000 --> 08:14.000]  то тогда A сводится к C.
[08:14.000 --> 08:19.000]  Ну и это доказывается тоже примерно так же.
[08:19.000 --> 08:24.000]  То есть тут получается, что x лежит в A тогда и только тогда,
[08:24.000 --> 08:29.000]  когда f от x лежит в B,
[08:29.000 --> 08:34.000]  а это будет тогда и только тогда, когда j от f от x,
[08:34.000 --> 08:39.000]  значит, j от f от x принадлежит C.
[08:39.000 --> 08:46.000]  Ну и опять же композиция g на f будет пальномиальной,
[08:46.000 --> 08:51.000]  поэтому все вместе будет тоже функция, которая A сводится к C.
[08:51.000 --> 08:57.000]  У нас f от x имеет пальномиальную длину от x?
[08:57.000 --> 09:02.000]  Конечно, потому что само f пальномиального числима, оно просто ничего длиннее не сможет вывести.
[09:03.000 --> 09:10.000]  А, соответственно, время работы длины g будет пальномом уже от длины аргумента, то есть от длины f от x.
[09:10.000 --> 09:15.000]  Но поскольку пальном от пальнома это пальном, то это будет пальном и от x тоже.
[09:20.000 --> 09:25.000]  Вот. Значит, какие еще есть утверждения тут важные?
[09:25.000 --> 09:30.000]  Ну, важное утверждение вот такое вот.
[09:30.000 --> 09:35.000]  A сводится к B тогда и только тогда, когда дополнение K сводится к дополнению B.
[09:35.000 --> 09:40.000]  Ну, здесь можно просто ту же самую функцию взять,
[09:40.000 --> 09:45.000]  и тогда как бы вот в этом определении взять отрицание от каждой части,
[09:45.000 --> 09:50.000]  и эти отрицания будут тоже эквалентны, и они как раз будут означать вот эту сводимость.
[09:50.000 --> 09:55.000]  Вот.
[09:55.000 --> 10:00.000]  Так, ну еще можно сказать, похоже на первое утверждение.
[10:00.000 --> 10:05.000]  Значит, если A сводится к B,
[10:05.000 --> 10:10.000]  а B сводится к N п, ой, B лежит в N п,
[10:10.000 --> 10:15.000]  то тогда A тоже лежит в N п.
[10:15.000 --> 10:20.000]  Ну, доказывается примерно так же,
[10:20.000 --> 10:25.000]  но только нужно, согласно одному из определений,
[10:25.000 --> 10:30.000]  либо вот здесь вот взять недetermинированную машину
[10:30.000 --> 10:35.000]  и сказать, что композиция недetermинированной вот здесь вот
[10:35.000 --> 10:40.000]  и вот этой функции сводящей тоже будет недetermинированной полиновиальной машиной,
[10:40.000 --> 10:45.000]  и будет давать правильный ответ.
[10:45.000 --> 10:50.000]  Ну, либо можно сертификат на определение использовать.
[10:50.000 --> 10:55.000]  Надо сказать, что для B есть верификатор,
[10:55.000 --> 11:00.000]  и тогда можно построить верификаторы для A, которые сначала из X делают F от X,
[11:00.000 --> 11:05.000]  а потом проверяет, годится ли данный сертификат для того, что получилось.
[11:05.000 --> 11:10.000]  То есть, можно сказать, что мы, если у нас V, а давайте я вот так напишу,
[11:10.000 --> 11:15.000]  значит, V A, верификатор для A от X Y,
[11:15.000 --> 11:20.000]  будет равен верификатору для B от F от X A
[11:20.000 --> 11:25.000]  и того же самого Y.
[11:25.000 --> 11:30.000]  Тогда получается, что если X лежит в A, то F от X лежит в B,
[11:31.000 --> 11:36.000]  для которого это даст единицу, значит, это тоже даст единицу.
[11:36.000 --> 11:41.000]  Ну, а если, значит, если X не лежит в A, то F от X не лежит в B,
[11:41.000 --> 11:46.000]  тогда для F от X A такого Y нет, ну и тогда здесь для X A такого Y тоже нет.
[11:47.000 --> 11:52.000]  Вот.
[11:52.000 --> 11:57.000]  Ну и еще можно сказать,
[11:57.000 --> 12:02.000]  значит, можно сказать, что если
[12:02.000 --> 12:07.000]  два, значит, если два языка уже пальномиальные, но не тривиальные,
[12:07.000 --> 12:12.000]  то есть, если A и B у нас лежат в P,
[12:12.000 --> 12:17.000]  значит, в P, но без,
[12:17.000 --> 12:22.000]  значит, в P без пустого множества
[12:22.000 --> 12:27.000]  и, наоборот, всего, да, множество всех слов.
[12:29.000 --> 12:33.000]  То есть, если A и B пальномиальные, но не тривиальные,
[12:33.000 --> 12:38.000]  тогда они просто друг к другу сводятся.
[12:38.000 --> 12:43.000]  Значит, тогда A сводится к B.
[12:43.000 --> 12:48.000]  Вот.
[12:48.000 --> 12:53.000]  Но это делается так, что можно, значит, можно вот так вот определить.
[12:58.000 --> 13:03.000]  F от X будет равно,
[13:03.000 --> 13:08.000]  значит, некоторое B1, если X лежит в A,
[13:08.000 --> 13:13.000]  и B0, если X не лежит в A,
[13:13.000 --> 13:18.000]  где, соответственно, B1 лежит в B,
[13:18.000 --> 13:23.000]  а B0 не лежит в B.
[13:23.000 --> 13:28.000]  Значит, как раз если B, значит, если B не пустое и не все слова,
[13:28.000 --> 13:33.000]  то тогда найдется как слово, которое лежит в B,
[13:33.000 --> 13:38.000]  так и слово, которое не лежит в B.
[13:38.000 --> 13:43.000]  Ну а дальше, если мы и так можем понять, лежит ли X в нем или нет,
[13:43.000 --> 13:48.000]  то мы, соответственно, вычислим, да, вычислим, лежит или нет,
[13:48.000 --> 13:53.000]  и выдадим соответствующие ответы.
[13:53.000 --> 13:58.000]  Значит, тут есть такая тонкость,
[13:58.000 --> 14:03.000]  потому что можно попытаться оспорить вот это рассуждение
[14:03.000 --> 14:08.000]  и спросить, откуда мы возьмем эти B0 и B1.
[14:08.000 --> 14:13.000]  Понятно, что, в принципе, если у нас вообще какое угодно B,
[14:13.000 --> 14:18.000]  это вообще не очень понятно, откуда их искать.
[14:18.000 --> 14:23.000]  Может быть, а пусть оно там не пустое, оно какое-нибудь очень редкое,
[14:23.000 --> 14:28.000]  пока найдем элемент в нем, это будет очень долго,
[14:28.000 --> 14:33.000]  почему все это полиномиальное, такое сомнение может возникнуть.
[14:33.000 --> 14:38.000]  Но на самом деле это сомнение не будет опровержением вот этого,
[14:38.000 --> 14:43.000]  потому что, смотрите,
[14:43.000 --> 14:48.000]  вот тут вот в определении не сказано, что вот это вот F,
[14:48.000 --> 14:53.000]  ну, она, грубо говоря, откуда-то легко берется.
[14:53.000 --> 14:58.000]  Она просто существует, да, она просто существует,
[14:58.000 --> 15:03.000]  и не факт, что, например, по какому-то описанию A и описанию B можно ее легко найти.
[15:03.000 --> 15:08.000]  Здесь ничего такого не требуется, она просто существует.
[15:08.000 --> 15:13.000]  Но здесь она тоже просто существует,
[15:13.000 --> 15:18.000]  и откуда бы, какие бы B1, B0 ни были, откуда бы они ни взялись,
[15:18.000 --> 15:23.000]  просто вот такая вот функция будет полиномиально вычислимой.
[15:23.000 --> 15:28.000]  Сама по себе она будет полиномиально вычислимой.
[15:28.000 --> 15:33.000]  А вот задача ее поиска из других соображений уже может быть сложной.
[15:33.000 --> 15:38.000]  Ну, это, знаете,
[15:38.000 --> 15:43.000]  такой же похожий эффект.
[15:43.000 --> 15:48.000]  Такой.
[15:56.000 --> 16:01.000]  Да, например, можно рассмотреть такую функцию.
[16:01.000 --> 16:06.000]  Пусть F от N равно 1,
[16:06.000 --> 16:11.000]  если все, все числа от 1 до N,
[16:11.000 --> 16:16.000]  точнее, ну, скажем, десятичные записи всех числа от 1 до N
[16:16.000 --> 16:21.000]  встречаются в десятичном возложении числа P.
[16:21.000 --> 16:26.000]  А, соответственно, если хоть какая-то не встречается, то тогда будет 0.
[16:26.000 --> 16:31.000]  Вот вопрос, будет ли эта функция полиномиально вычислимой?
[16:31.000 --> 16:36.000]  Ну, на самом деле, будет.
[16:36.000 --> 16:41.000]  Есть гипотеза, что в записи числа P вообще все в последовании встречаются,
[16:41.000 --> 16:46.000]  но эта гипотеза не доказана.
[16:46.000 --> 16:51.000]  Соответственно, если эта гипотеза верна, то эта функция просто всюду единица, она тривиальная.
[16:51.000 --> 16:56.000]  А потом моменты будут единицы, а потом нули.
[16:56.000 --> 17:01.000]  Но такая функция, где бы, где бы этот момент ни был, такая функция все равно будет легко вычислима.
[17:01.000 --> 17:06.000]  Потому что это мы не знаем, в какой момент она станет нулем,
[17:06.000 --> 17:11.000]  но в программу этот момент в любом случае может быть занесен,
[17:11.000 --> 17:16.000]  и тогда вот эта программа уже с занесенным моментом переключения будет работать
[17:16.000 --> 17:21.000]  быстро, ну и вообще она там будет делать одно сравнение и останавливаться сразу.
[17:21.000 --> 17:26.000]  Понятная идея, что может быть так,
[17:26.000 --> 17:31.000]  это как бы такая неконструктивная оценка,
[17:31.000 --> 17:36.000]  может быть так, что какая-то быстрая программа есть, но мы не знаем какая.
[17:36.000 --> 17:41.000]  А вообще, знаете, давайте, раз уж я про это говорил,
[17:41.000 --> 17:46.000]  то я немножко отвлекусь от NP и расскажу довольно красивую историю про класс P.
[17:46.000 --> 17:51.000]  Значит, это называется неконструктивное
[17:51.000 --> 17:56.000]  доказательство
[17:56.000 --> 18:01.000]  принадлежности к P.
[18:01.000 --> 18:06.000]  Вот опять же, какой-то полимониальный алгоритм есть,
[18:06.000 --> 18:11.000]  но никто не знает, какой.
[18:11.000 --> 18:16.000]  Так, слышали ли вы про критерии планарности графа?
[18:16.000 --> 18:21.000]  Там есть критерии Пантреагина-Куратовского.
[18:21.000 --> 18:26.000]  Да, значит, давайте, не все, не все, да?
[18:26.000 --> 18:31.000]  Нет, хорошо, ну сейчас я, да, сейчас я расскажу вкратце.
[18:31.000 --> 18:36.000]  Значит, вот есть такой граф К-5.
[18:36.000 --> 18:41.000]  Значит, граф К-5 это 5 вершин, которые все друг с другом соединены.
[18:41.000 --> 18:46.000]  Знаете, какой-то такой пятиугольник и звездочка.
[18:46.000 --> 18:51.000]  Вот, и вот его нельзя на плоскости нарисовать так, чтобы ребра не пересекались друг с другом.
[18:51.000 --> 18:56.000]  Так что можно сделать меньше пересечений, чем я здесь нарисовал.
[18:56.000 --> 19:01.000]  Но так, чтобы было ноль, нельзя сделать.
[19:01.000 --> 19:06.000]  Но это можно по-разному доказывать, можно, в принципе, аккуратно перебрать все варианты,
[19:06.000 --> 19:11.000]  можно сослать на формулу Эйлера для планарных графов.
[19:11.000 --> 19:16.000]  Да, в общем, так или иначе, это нельзя сделать.
[19:16.000 --> 19:21.000]  Вот шесть вершин разделок на две группы и, соответственно, соединены все из разных.
[19:21.000 --> 19:26.000]  Так, все вроде, да?
[19:26.000 --> 19:31.000]  Вот, его тоже нельзя нарисовать.
[19:31.000 --> 19:36.000]  Да, это есть такая задачка, что вот есть три домика, три колодца.
[19:36.000 --> 19:41.000]  И в этих домиках живут какие-то нелюдимые граждане, они не хотят друг друга видеть.
[19:41.000 --> 19:46.000]  В каждом доме, в каждом колодце шла дорожка так, чтобы они не пересекались.
[19:46.000 --> 19:51.000]  Вот, но, оказывается, нельзя так сделать, надо хотя бы один мостик построить.
[19:51.000 --> 19:56.000]  Значит, тогда можно так сделать.
[19:56.000 --> 20:01.000]  И оказывается, что это два базовых примера не планарных графов.
[20:01.000 --> 20:06.000]  Значит, есть на самом деле два критерия.
[20:06.000 --> 20:11.000]  Значит, есть один критерий Пантрягино-Куротовского.
[20:18.000 --> 20:23.000]  Знаешь что, граф не планарен.
[20:23.000 --> 20:28.000]  Граф не планарен.
[20:28.000 --> 20:33.000]  То есть, нельзя его нарисовать на плоскости без самопересечений.
[20:33.000 --> 20:38.000]  Не без самопересечения ребер.
[20:38.000 --> 20:43.000]  Значит, граф не планарен, тогда это только тогда, когда у него
[20:43.000 --> 20:48.000]  есть подграф
[20:48.000 --> 20:53.000]  гомеоморфный
[20:53.000 --> 20:58.000]  гомеоморфный К5
[20:58.000 --> 21:03.000]  или К3,3
[21:03.000 --> 21:08.000]  Значит, что это вообще значит гомеоморфный?
[21:08.000 --> 21:13.000]  Ну, подграф означает, что просто какие-то ребра убрали,
[21:13.000 --> 21:18.000]  а гомеоморфный означает, что на самом деле есть выделенный
[21:18.000 --> 21:23.000]  К5, что есть выделенный пять вершин, и между каждой парой есть пути,
[21:23.000 --> 21:28.000]  которые попарно не пересекаются.
[21:28.000 --> 21:33.000]  Но, соответственно, в них может быть не одна вершина, а несколько.
[21:33.000 --> 21:38.000]  Ну, в смысле, промежуточных может быть несколько.
[21:38.000 --> 21:43.000]  То есть, здесь есть пять вершин и попарно не пересекающиеся пути
[21:43.000 --> 21:48.000]  от каждой к каждой. Ну, а здесь есть, соответственно, шесть вершин
[21:48.000 --> 21:53.000]  и попарно не пересекающиеся пути от каждой из этих трёх.
[21:53.000 --> 21:58.000]  А ещё есть другой критерий.
[21:58.000 --> 22:03.000]  Есть другой критерий, называется критерий Вагнера.
[22:03.000 --> 22:08.000]  Критерий Вагнера, там тоже К5 и К3,3.
[22:08.000 --> 22:13.000]  То есть, тоже граф не планарен,
[22:13.000 --> 22:18.000]  тогда и только тогда, когда у него есть
[22:18.000 --> 22:23.000]  минор.
[22:23.000 --> 22:28.000]  Значит, минор К5 или
[22:28.000 --> 22:33.000]  К3,3. А теперь что такое минор?
[22:33.000 --> 22:38.000]  Минор это немножко другая штука. Значит, минор это такой граф, который получен
[22:38.000 --> 22:43.000]  операциями удаления ребер.
[22:43.000 --> 22:48.000]  Это вот так же, как с подграфом. Но ещё операция стягивания
[22:48.000 --> 22:53.000]  ребер. На стягивание ребер означает, что мы ребро убираем, а его концы склеиваем.
[22:53.000 --> 22:58.000]  Вот, и вот это вот не то же самое, что взять и подграфом.
[22:58.000 --> 23:03.000]  Минор это граф,
[23:04.000 --> 23:09.000]  стягиванием и удалением ребер.
[23:17.000 --> 23:22.000]  Вот, и тут есть хороший пример на разницу этих,
[23:22.000 --> 23:27.000]  на разницу этих критериев. Это вот, смотрите, какой граф.
[23:27.000 --> 23:32.000]  Вот так вот.
[23:32.000 --> 23:37.000]  Пятиугольник.
[23:37.000 --> 23:42.000]  Тут всего будет 10 вершин.
[23:42.000 --> 23:47.000]  Вот так вот. А здесь будет звёздочка.
[23:50.000 --> 23:55.000]  Вот, и тут как раз, если все вот эти вот ребра стянуть,
[23:55.000 --> 24:00.000]  как раз копять и получится. Поэтому не планарный по критерию Вагнера.
[24:00.000 --> 24:05.000]  Вот, но если будет пытаться искать подграф, копять, то тут это не получится.
[24:05.000 --> 24:10.000]  Потому что, ну вообще у копять тут степень 4,
[24:10.000 --> 24:15.000]  а тут всюду степень 3. Поэтому подграф тут будет ка-3-3.
[24:15.000 --> 24:20.000]  Вот упражнение, значит, найти подграф
[24:20.000 --> 24:25.000]  ка-3-3 вот в этом графе.
[24:25.000 --> 24:30.000]  Вершина означает, что тут могут быть ещё вершинки по дороге.
[24:30.000 --> 24:35.000]  Да, что эти ребра, это не отдельные ребра, а могут быть цепочки.
[24:35.000 --> 24:40.000]  Не, не, не, сейчас, ещё раз.
[24:40.000 --> 24:45.000]  Подграф, значит, подграф именно означает, что мы сначала какие-то ребра убираем
[24:45.000 --> 24:50.000]  и может быть вершина тоже, но вершина сразу со всеми ребрами.
[24:50.000 --> 24:55.000]  Значит, мы убираем какие-то вершины со всеми ребрами, какие-то ещё ребра убираем.
[24:55.000 --> 25:00.000]  И в том, что осталось, есть в данном случае 6 выделенных вершин
[25:00.000 --> 25:05.000]  и пути от каждую в каждую, которые ещё и попарно не пересекаются.
[25:05.000 --> 25:10.000]  Вот, но вот здесь вот как раз с невидотечением и есть проблема.
[25:10.000 --> 25:15.000]  Потому что тут-то пути есть с каждой в каждую, но они будут пересекаться.
[25:16.000 --> 25:21.000]  Чему симметрично?
[25:21.000 --> 25:26.000]  Гомеоморфизм это отношение к валентности.
[25:34.000 --> 25:39.000]  Не, ну гомеоморфизм можно себе так представить, что если вы представляете граф
[25:39.000 --> 25:44.000]  как просто такую геометрическую фигуру, то, соответственно,
[25:44.000 --> 25:49.000]  можно непрерывным преобразованием одну перевести в другую.
[25:49.000 --> 25:54.000]  То есть если вы ребро представляете как какую-то кривую в пространстве,
[25:54.000 --> 25:59.000]  и тогда неважно, если там просто будут вершины на этой кривой,
[25:59.000 --> 26:04.000]  то с точки зрения типологии это всё неважно.
[26:04.000 --> 26:09.000]  Нет, не заморхнется подразумевать, что будет столько же ребер и столько же вершин.
[26:09.000 --> 26:14.000]  А ещё раз, в гомеоморфизме вам неважны дополнительные вершины,
[26:14.000 --> 26:19.000]  которые стоят на ребрах.
[26:19.000 --> 26:24.000]  Потому что важна только тополическая структура, как там кривая, ломанная и так далее.
[26:24.000 --> 26:29.000]  Это симметрично следует?
[26:29.000 --> 26:34.000]  Нет, а симметрично следует из-за того, что у вас есть
[26:34.000 --> 26:39.000]  непрерывное преобразование,
[26:39.000 --> 26:44.000]  и тогда можно в другую сторону провести, как бы обратить время.
[26:44.000 --> 26:49.000]  Нет, ну вообще это там, вот у вас есть фигура какая-то,
[26:49.000 --> 26:54.000]  вообще вообще, что гомеоморфизм, да, там в мотонии, в типологии,
[26:54.000 --> 26:59.000]  что у вас есть какая-то фигура в пространстве,
[26:59.000 --> 27:04.000]  и у вас есть функция, как бы от времени, действительно, параметра.
[27:04.000 --> 27:09.000]  Вот, и, соответственно,
[27:09.000 --> 27:14.000]  получается, что там в момент времени 0 у вас получается одна фигура,
[27:14.000 --> 27:19.000]  в момент времени 1 получается другая фигура,
[27:19.000 --> 27:24.000]  и все премежуточные изменяются непрерывно.
[27:24.000 --> 27:29.000]  А, кстати, сейчас тут
[27:29.000 --> 27:34.000]  и даже не нужно, да, потому что, как я говорю,
[27:34.000 --> 27:39.000]  узел нельзя развязать, а тут нам не важно, чтобы что-то заузлено.
[27:39.000 --> 27:44.000]  Ну, типа того,
[27:44.000 --> 27:49.000]  типа того, да, в общем,
[27:49.000 --> 27:54.000]  можно сказать, что просто есть непрерывная биекция,
[27:54.000 --> 27:59.000]  да, можно сказать, что просто есть непрерывная биекция
[27:59.000 --> 28:04.000]  между одним графом как-то в логическом пространстве и другим.
[28:04.000 --> 28:09.000]  Вот, тогда там не важно, есть узел, нет узла, это все не важно.
[28:09.000 --> 28:14.000]  Вот.
[28:14.000 --> 28:19.000]  Так.
[28:19.000 --> 28:24.000]  Ну, хорошо.
[28:24.000 --> 28:29.000]  Значит, дальше есть
[28:29.000 --> 28:34.000]  есть некоторое количество алгоритмов, которые умеют проверять планарность
[28:34.000 --> 28:39.000]  за полимерное время.
[28:39.000 --> 28:44.000]  Значит, планарность можно проверить
[28:44.000 --> 28:49.000]  можно проверить
[28:49.000 --> 28:54.000]  за полимерное время.
[28:54.000 --> 28:59.000]  Вот, но вот критерий
[28:59.000 --> 29:04.000]  кратовку тут не очень поможет, да, потому что, конечно,
[29:04.000 --> 29:09.000]  можете проверять, что есть путь за полимерное время,
[29:09.000 --> 29:14.000]  но вам нужно не просто путь, а много разных путей, да еще и какая-то общая структура
[29:14.000 --> 29:19.000]  между ними, да, про каждую отдельную пару можно проверить, что есть путь
[29:19.000 --> 29:24.000]  за полимерное время, но вам нужно больше, да, значит, вам нужно, чтобы все эти пути были не пресекающиеся,
[29:24.000 --> 29:29.000]  и вот это вот уже гораздо сложнее.
[29:29.000 --> 29:34.000]  Не обязательно, потому что мы же под грамм берем.
[29:34.000 --> 29:39.000]  Да, все лишние ребра мы уберем.
[29:39.000 --> 29:44.000]  Вот.
[29:44.000 --> 29:49.000]  Но еще, значит, там есть много разных способов, но один из способов это по критерию Вагнера.
[29:49.000 --> 29:54.000]  Значит, вот наличие минора, как раз, можно проверять.
[29:54.000 --> 29:59.000]  Значит, один
[29:59.000 --> 30:04.000]  один из способов
[30:04.000 --> 30:09.000]  значит, это по критерию Вагнера.
[30:09.000 --> 30:14.000]  Значит, это тоже совершенно не элементарно, да, как проверять, что есть минор, это тоже
[30:14.000 --> 30:19.000]  целая отдельная наука.
[30:19.000 --> 30:24.000]  Но давайте поверим, что так можно сделать.
[30:24.000 --> 30:29.000]  Но хорошо, на самом деле, дальше есть еще разные другие свойства.
[30:29.000 --> 30:34.000]  Значит, есть другие свойства.
[30:34.000 --> 30:39.000]  Значит, есть другие свойства, которые
[30:39.000 --> 30:44.000]  сохраняются
[30:44.000 --> 30:49.000]  сохраняются при тягивании
[30:49.000 --> 30:54.000]  или удалении ребер.
[30:59.000 --> 31:04.000]  Ну, например, можно посмотреть
[31:04.000 --> 31:09.000]  вложение не в плоскость, а в какую-нибудь другую двумерную фигуру, например,
[31:09.000 --> 31:14.000]  в тор. Значит, давайте, если вы это не видели, давайте я это нарисую.
[31:14.000 --> 31:19.000]  Да, ну, тор, наверное, все знают, что такое, да.
[31:19.000 --> 31:24.000]  Вот так его обычно рисуют. Да, как бы такой цилиндр, свернутый с двух концов.
[31:24.000 --> 31:29.000]  Сам на себя.
[31:29.000 --> 31:34.000]  Дальше можно здесь вот такой вот пятигонечек
[31:34.000 --> 31:39.000]  нарисовать.
[31:39.000 --> 31:44.000]  Так, и, например,
[31:44.000 --> 31:49.000]  два ребра провести прямо здесь.
[31:49.000 --> 31:54.000]  Вот, и остаются еще три.
[31:54.000 --> 31:59.000]  И еще вот такой вот.
[31:59.000 --> 32:04.000]  На поверхность, конечно.
[32:04.000 --> 32:09.000]  Ну, давайте, например, смотрите, если я проведу вот так вот,
[32:09.000 --> 32:14.000]  то тогда отсюда-сюда я уже никак вообще не могу провести, поэтому я так не буду проводить.
[32:14.000 --> 32:19.000]  Но зато если я проведу вот так вот, то это ничего не помешает.
[32:19.000 --> 32:24.000]  Ну, давайте я так и сделаю.
[32:24.000 --> 32:29.000]  И тогда остается только два отрезка, вот это и вот это.
[32:29.000 --> 32:34.000]  И вот тут можно воспользоваться тем, что это тор.
[32:34.000 --> 32:39.000]  Например, я могу...
[32:39.000 --> 32:44.000]  Так, мне вот сюда вот надо, да.
[32:44.000 --> 32:49.000]  Я могу вот так вот провести.
[32:49.000 --> 32:54.000]  Так, и еще вот сюда вот надо.
[32:54.000 --> 32:59.000]  Ну, а тут я могу как бы провести вот так вот, там с другой стороны обойти и вернуться вот сюда вот.
[32:59.000 --> 33:04.000]  Не, ну что нибудь как угодно.
[33:04.000 --> 33:09.000]  Не, ну в смысле, не, да, это, конечно, не единственный способ.
[33:09.000 --> 33:14.000]  Ну, может быть, и К6 тоже можно нарисовать.
[33:14.000 --> 33:19.000]  Не только 5, но и 6 вершин можно нарисовать.
[33:19.000 --> 33:24.000]  Вот, а 7 не помню.
[33:24.000 --> 33:29.000]  Вот, да, вот, например, вложение в тор.
[33:29.000 --> 33:34.000]  Вообще там есть теорема классификация, что любая двумерная поверхность
[33:34.000 --> 33:39.000]  ориентируемая, это называется сфера с G-ручками.
[33:39.000 --> 33:44.000]  Это называется ручка.
[33:44.000 --> 33:49.000]  Можно их как бы друг к другу так приклеивать, их будет много.
[33:49.000 --> 33:54.000]  И, соответственно, там G, это называется рот поверхности.
[33:54.000 --> 33:59.000]  И вот любая двумерная поверхность будет иметь такой вид.
[34:00.000 --> 34:05.000]  Вот, ну, может быть, и другие более хитрые топологические
[34:05.000 --> 34:10.000]  свойства, кроме вложимости в поверхность, может быть, вложимость
[34:10.000 --> 34:15.000]  просто трехмерное пространство, но, например, с какими-то условиями
[34:15.000 --> 34:20.000]  назаузненность. Да, то есть верны лишь там не один цикл, не завязан узел.
[34:20.000 --> 34:25.000]  Да, выглядит как обычная окружность.
[34:25.000 --> 34:30.000]  Ну и так далее.
[34:30.000 --> 34:35.000]  И дальше самая удивительная вещь.
[34:35.000 --> 34:40.000]  Значит, вот есть теорема Робертано-Сеймура.
[34:40.000 --> 34:45.000]  Робертано-Сеймура.
[34:45.000 --> 34:50.000]  Значит, они вообще вот эти вот миноры в графах очень долго
[34:50.000 --> 34:55.000]  написали 23 статьи, которые так и назывались.
[34:55.000 --> 35:00.000]  Graph Minors, номер такой-то, про то-то и то-то.
[35:00.000 --> 35:05.000]  Вот, так что тут вот эта теорема на самом деле из разных работ.
[35:05.000 --> 35:10.000]  Вот, значит, в одной работе было доказано следующее,
[35:10.000 --> 35:15.000]  что для любого такого свойства есть конечное число,
[35:15.000 --> 35:20.000]  то для любого такого свойства есть конечное число запрещенных миноров.
[35:20.000 --> 35:25.000]  То есть вот здесь вот в этом критерии два запрещенных минора,
[35:25.000 --> 35:30.000]  К5 и К3, три. Вот, а для любого такого свойства есть какое-то другое
[35:30.000 --> 35:35.000]  конечное семейство.
[35:35.000 --> 35:40.000]  Значит, для любого такого свойства,
[35:40.000 --> 35:45.000]  такого, в смысле вот такого, который сохраняется
[35:45.000 --> 35:50.000]  при стягивании или удалении ребер.
[35:50.000 --> 35:55.000]  Ну вот же, вот.
[35:55.000 --> 36:00.000]  Не, ну вот два класса примеров, это вложимость поверхности
[36:00.000 --> 36:05.000]  и вложимость пространства без заузленности или с каким-то условием на заузленность.
[36:06.000 --> 36:11.000]  Значит, для любого такого свойства есть конечное число,
[36:11.000 --> 36:16.000]  есть конечное число запрещенных миноров.
[36:26.000 --> 36:31.000]  Вот, ну а второе, из другой статьи теорема,
[36:31.000 --> 36:36.000]  что наличие данного минора
[36:36.000 --> 36:41.000]  можно проверить пальномиальным алгоритмом.
[36:44.000 --> 36:49.000]  Значит, наличие данного минора
[36:52.000 --> 36:57.000]  можно проверить
[36:57.000 --> 37:02.000]  за пальномиальное время.
[37:07.000 --> 37:12.000]  Вот, ну это прям серьезная большая наука, они лет 20 это все писали.
[37:12.000 --> 37:17.000]  То есть там реально даже больше,
[37:17.000 --> 37:22.000]  почти 30, наверное, там первые статьи в конце 80-х выходили, а последние уже там 2013 какой-то год.
[37:22.000 --> 37:27.000]  Вот.
[37:27.000 --> 37:32.000]  Да, может быть такой же критерий, вот такой же как у Вагнера,
[37:32.000 --> 37:37.000]  только вместо К5 и К3-3 будут какие-то другие графы.
[37:37.000 --> 37:42.000]  И их конечное число.
[37:42.000 --> 37:47.000]  Вот, соответственно, что из этих двух утверждений следует?
[37:47.000 --> 37:52.000]  Ну получается, что мы для любого такого свойства
[37:52.000 --> 37:57.000]  можем написать программу.
[37:57.000 --> 38:02.000]  А именно, вот список запрещенных миноров и про каждый из них мы проверим, что этого нет, этого нет, этого нет, этого нет и так далее.
[38:02.000 --> 38:07.000]  Если какой-то есть, то значит, свойство не выполнено.
[38:07.000 --> 38:12.000]  А если никакого нет, то значит, свойство выполнено.
[38:12.000 --> 38:17.000]  И это будет полиномиальный алгоритм для, соответственно, вот такого свойства.
[38:17.000 --> 38:22.000]  Вот.
[38:22.000 --> 38:27.000]  Но проблема в том, чтобы такую программу написать, нужно знать не просто их конечное число,
[38:27.000 --> 38:32.000]  а что конкретно это за запрещенная графа.
[38:32.000 --> 38:37.000]  Вот. И даже для вот этой вот задачи вложимости в тор,
[38:37.000 --> 38:42.000]  тут решения нету.
[38:42.000 --> 38:47.000]  То есть, это пытались найти список и реально нашли
[38:47.000 --> 38:52.000]  довольно много как бы запрещенных миноров.
[38:52.000 --> 38:57.000]  То есть, это что означает?
[38:57.000 --> 39:02.000]  Что они сами не вложимые.
[39:02.000 --> 39:07.000]  Если мы что-то удалим или что-то стянем, то уже получится вложимое.
[39:07.000 --> 39:12.000]  Вот.
[39:12.000 --> 39:17.000]  Нет, вот в том дело, что все не нашли, нашли довольно много.
[39:17.000 --> 39:22.000]  Понятно, смотрите, что любой такой граф должен быть запрещенным.
[39:22.000 --> 39:27.000]  Любой граф, который сам не вкладывается, а если у него что-то стянуть или что-то удалить, то уже будет вкладываться.
[39:27.000 --> 39:32.000]  Это означает, что любой его минор строгий уже вкладывается.
[39:32.000 --> 39:37.000]  Раз он не вкладывается, значит, он должен быть запрещенным.
[39:37.000 --> 39:42.000]  Ну и наоборот. То есть, вот тут точно так же.
[39:42.000 --> 39:47.000]  Если мы одну реброулку опять удалим, то это уже будет вложимо.
[39:47.000 --> 39:52.000]  И здесь тоже, если мы одну удалим, то будет вложимо.
[39:52.000 --> 39:57.000]  Да, в том-то дело.
[39:57.000 --> 40:02.000]  Определить, оценить в общем случае не получается.
[40:02.000 --> 40:07.000]  Даже для вложения в тор.
[40:07.000 --> 40:12.000]  Для вложения в тор их известны какие-то сотни разных.
[40:12.000 --> 40:17.000]  Ну да, была бы граница, может, было что-нибудь перебирать, пытаться.
[40:17.000 --> 40:22.000]  Нет, нет, нет, нет никакой границы.
[40:22.000 --> 40:27.000]  Ну и получается, что тут полиномиальный алгоритм есть, но мы его не знаем.
[40:27.000 --> 40:32.000]  И даже не можем оценить какая там степень полинома.
[40:32.000 --> 40:37.000]  Вообще она может быть большой.
[40:37.000 --> 40:42.000]  Ну хотя, с другой стороны, смотрите, она будет большой, если там будут какие-то большие эти запрещенные миноры.
[40:42.000 --> 40:47.000]  Если их будет просто много, то это будет мультипликативная константа.
[40:47.000 --> 40:52.000]  Если там 200 миноров вместо 100, то нужно 200 раз вместо 100 сделать проверку.
[40:52.000 --> 40:57.000]  То есть это просто в два раза выросло.
[40:57.000 --> 41:02.000]  А вот если эти миноры какие-то такие, которые сложно проверять, то тогда это уже будет более серьезное превышение.
[41:02.000 --> 41:07.000]  Вот такая история.
[41:07.000 --> 41:12.000]  Ну что, можно прерыв делать?
[41:12.000 --> 41:17.000]  Давай сейчас на 5 минут.
[41:17.000 --> 41:22.000]  Так, давайте вернемся к вопросу об NP-полноте.
[41:22.000 --> 41:27.000]  И начнем с определения.
[41:27.000 --> 41:32.000]  Ну а здесь есть два похожих понятия.
[41:32.000 --> 41:37.000]  NP-трудность и NP-полнота.
[41:37.000 --> 41:42.000]  NP-трудность
[41:42.000 --> 41:47.000]  или по-английски NP-hardness.
[41:47.000 --> 41:52.000]  Это немножко разные вещи.
[41:52.000 --> 41:57.000]  NP-трудность означает, что
[41:57.000 --> 42:02.000]  просто
[42:02.000 --> 42:07.000]  значит B NP трудный
[42:07.000 --> 42:12.000]  B NP трудный
[42:12.000 --> 42:17.000]  если для любого A
[42:17.000 --> 42:22.000]  если для любого A из NP, верно, что A сводится к B.
[42:22.000 --> 42:27.000]  То есть можно сказать, что B NP трудный, если он
[42:27.000 --> 42:32.000]  не менее трудный, чем NP.
[42:32.000 --> 42:37.000]  То есть с его помощью можно жить все из NP.
[42:37.000 --> 42:42.000]  Ну и на самом деле бывает, что это слово толкуется расширительно
[42:42.000 --> 42:47.000]  и расширительно толкуется в смысле того, что означает вот эта сводимость.
[42:47.000 --> 42:52.000]  Вообще то, как я определил, это не единственный вариант того, что такое сводимость.
[42:52.000 --> 42:57.000]  В частности, может быть так, что B это вообще не задача распознавания.
[42:57.000 --> 43:02.000]  Не задача с ответом да или нет, какая-то другая задача.
[43:02.000 --> 43:07.000]  Тогда то, как мы определили, точно не подходит.
[43:07.000 --> 43:12.000]  В широком смысле это то же самое, только вот здесь вместо
[43:13.000 --> 43:18.000]  Ну, например, есть сводимость по куку
[43:18.000 --> 43:23.000]  означает, что мы можем много раз про разные коды
[43:23.000 --> 43:28.000]  спрашивать о принадлежности к B и потом еще как-то использовать результаты.
[43:28.000 --> 43:33.000]  И это гораздо больше, чем как здесь, когда мы
[43:33.000 --> 43:38.000]  спрашиваем один раз и прямо этот ответ и берем.
[43:38.000 --> 43:43.000]  В общем, там есть несколько разных видов сводимости.
[43:43.000 --> 43:48.000]  NP полната.
[43:48.000 --> 43:53.000]  NP полната.
[43:53.000 --> 43:58.000]  NP completeness.
[43:58.000 --> 44:03.000]  Это означает NP трудность и плюс принадлежит к NP.
[44:03.000 --> 44:08.000]  То есть язык B NP полон.
[44:13.000 --> 44:18.000]  Если он NP труден, если B NP труден
[44:18.000 --> 44:23.000]  и сам при этом лежит в NP.
[44:23.000 --> 44:28.000]  То есть тут как бы есть сразу на сложности оценка сверху и оценка снизу.
[44:28.000 --> 44:33.000]  То есть NP трудности это только оценка снизу.
[44:33.000 --> 44:38.000]  NP полнота значит сразу и сверху, что в NP, и снизу, что
[44:38.000 --> 44:43.000]  настолько же трудно и насколько
[44:43.000 --> 44:48.000]  всего из NP.
[44:48.000 --> 44:53.000]  Ну и отсюда из тех утверждений можно
[44:53.000 --> 44:58.000]  опять же заключить несколько базовых правил.
[44:58.000 --> 45:03.000]  Но самое главное для нас, наверное, следующее, что такое утверждение,
[45:03.000 --> 45:08.000]  что если
[45:08.000 --> 45:13.000]  если B NP труден,
[45:13.000 --> 45:18.000]  если B NP труден
[45:18.000 --> 45:23.000]  и если B лежит в P,
[45:23.000 --> 45:28.000]  то тогда P равно NP.
[45:28.000 --> 45:33.000]  Ну в частности, если он NP полон
[45:33.000 --> 45:38.000]  и лежит в P, то тогда P равно NP.
[45:38.000 --> 45:43.000]  Ну и из чего это следует?
[45:43.000 --> 45:48.000]  Если B сам лежит в P и любой из NP к нему сводится,
[45:48.000 --> 45:53.000]  то любой из NP тоже лежит в P.
[45:53.000 --> 45:58.000]  И тогда NP вложено в P, а наоборот всегда вверх.
[45:58.000 --> 46:03.000]  Ну вот это вот ключевое утверждение.
[46:03.000 --> 46:08.000]  Ну и еще вот из транзитивности.
[46:08.000 --> 46:13.000]  Мы можем написать, что если
[46:13.000 --> 46:18.000]  если B NP труден,
[46:18.000 --> 46:23.000]  если B NP труден и B слудится к C,
[46:23.000 --> 46:28.000]  то C NP труден.
[46:28.000 --> 46:33.000]  Вот. Ну или аналогично
[46:33.000 --> 46:38.000]  можно сказать, что если B NP полон,
[46:38.000 --> 46:43.000]  а C лежит в NP
[46:43.000 --> 46:48.000]  и
[46:48.000 --> 46:53.000]  B слудится к C, то C NP полон.
[46:53.000 --> 46:58.000]  Вот.
[46:58.000 --> 47:03.000]  Ну и вот это вот, да, ну вроде должно быть очевидно,
[47:03.000 --> 47:08.000]  что первое, что любой слудится к B, а B слудится к C.
[47:08.000 --> 47:13.000]  По транзитивности, значит, любой слудится к C.
[47:13.000 --> 47:18.000]  А здесь мы еще прям явно добавили, что C при этом тоже в NP, значит, C тоже NP полон.
[47:18.000 --> 47:23.000]  Соответственно, последняя строчка, это для нас ключевое утверждение будет
[47:23.000 --> 47:28.000]  на следующей лекции. Да, потому что это способ получать новые NP полные задачи.
[47:28.000 --> 47:33.000]  Да, если у нас уже есть какая-то NP полная задача, то можно новые вот так вот
[47:33.000 --> 47:38.000]  из нее получать, вводя ее куда-то, если то, куда мы свели тоже лежит в NP,
[47:38.000 --> 47:43.000]  то оно тоже будет NP полное.
[47:43.000 --> 47:48.000]  Вот.
[47:48.000 --> 47:53.000]  Так, ну дальше вопрос, с чего же надо начинать?
[48:00.000 --> 48:05.000]  Значит, с чего надо начинать? И здесь ключевой задачей будет
[48:05.000 --> 48:10.000]  задача о выполнимости булевых формул.
[48:13.000 --> 48:18.000]  Ну и сначала давайте я приведу
[48:18.000 --> 48:23.000]  пару примеров.
[48:28.000 --> 48:33.000]  Потому что вообще-то у нас пока не было примеров нетривиальных свадимости вообще.
[48:44.000 --> 48:49.000]  Так, значит, у нас будет
[48:49.000 --> 48:54.000]  базовой, значит, базовой задач, у нас будет задача set
[48:54.000 --> 48:59.000]  от слова set is viability.
[48:59.000 --> 49:04.000]  Значит, выполнимость, выполнимость логических формул.
[49:04.000 --> 49:09.000]  Да, то есть множество таких phi, да, значит, что
[49:09.000 --> 49:14.000]  выполнимая логическая формула.
[49:14.000 --> 49:19.000]  Вот, то есть можно, ну можно писать так, что существует x
[49:19.000 --> 49:24.000]  такое, что phi от x равно единице.
[49:24.000 --> 49:29.000]  Да, то есть можно сказать, что в таблице истинности для phi есть хотя бы одна единица.
[49:29.000 --> 49:34.000]  Вот, это же NP, но скорее всего не
[49:34.000 --> 49:39.000]  NP, потому что если у нас N переменных, то сколько у нас
[49:39.000 --> 49:44.000]  строк в таблице истинности? Ну, два в степени N.
[49:44.000 --> 49:49.000]  Соответственно, можно ее, конечно, составлять, но это будет экспедиционная задача.
[49:49.000 --> 49:54.000]  Ну, если число переменных формулы сравнимо с ее длиной,
[49:54.000 --> 49:59.000]  да, конечно, есть формулы, которые будут какие-то очень длинные уже сам по себе, да, но с маленьким
[49:59.000 --> 50:04.000]  переменным. Тогда это еще можно явно в виде построить.
[50:04.000 --> 50:09.000]  Вот, но если формула длинная и переменных там тоже много, то тогда просто так строить это уже будет экспедиенциальная работа.
[50:09.000 --> 50:14.000]  Вот, с другой стороны, если нам дали конкретно x, конкретное значение для всех переменных,
[50:14.000 --> 50:19.000]  то можно все подставить, вычислить значение и понять, будет единица или нет.
[50:19.000 --> 50:24.000]  Значит, поэтому это действительно лежит в NP.
[50:24.000 --> 50:29.000]  Вот.
[50:29.000 --> 50:34.000]  Ну и на самом деле это будет NP-полная задача, но я думаю, мы это будем доказывать в следующий раз.
[50:34.000 --> 50:39.000]  Сегодня еще посмотрим на несколько примеров.
[50:39.000 --> 50:44.000]  Ну или, может, на основной идеи посмотрим.
[50:44.000 --> 50:49.000]  Так, значит, пример.
[50:49.000 --> 50:54.000]  Ну вот, рассмотрим задачу три раскраски.
[50:54.000 --> 50:59.000]  Значит, trickle, three colorability,
[50:59.000 --> 51:04.000]  colorability, три раскраска.
[51:04.000 --> 51:09.000]  Значит, три раскраска, это, может быть, графов G,
[51:09.000 --> 51:14.000]  что существует правильная раскраска,
[51:14.000 --> 51:19.000]  значит, правильная раскраска, вершин G,
[51:19.000 --> 51:24.000]  три цвета.
[51:24.000 --> 51:29.000]  Ну а что это значит? Что значит правильная раскраска?
[51:29.000 --> 51:34.000]  Ну, правильно значит, что там соседние вершины разного цвета.
[51:34.000 --> 51:39.000]  Ну а математически что это значит?
[51:39.000 --> 51:44.000]  Нож-то вершин, нож-то ребер.
[51:44.000 --> 51:49.000]  А раскраска это функция C, которая отображает
[51:49.000 --> 51:54.000]  нож-то вершин в нож-то 1, 2, 3.
[51:54.000 --> 51:59.000]  А тогда правильно означает, что если у нас есть ребро,
[51:59.000 --> 52:04.000]  значит, у в ребро,
[52:04.000 --> 52:09.000]  значит, то тогда получается, что C от u не равно C от v.
[52:16.000 --> 52:21.000]  Ну и давайте я покажу, как это вот
[52:21.000 --> 52:26.000]  прикалывайнг сводится к задаче выполнение.
[52:26.000 --> 52:31.000]  Ну вообще, когда такие конструкции
[52:31.000 --> 52:36.000]  делаются, нужно как-то договориться о кодировании.
[52:36.000 --> 52:41.000]  И вообще три цвета не очень удобно кодировать,
[52:41.000 --> 52:46.000]  потому что удобно кодировать значения,
[52:46.000 --> 52:51.000]  которых степень двойки, если было 4 цвета, было очень удобно
[52:51.000 --> 52:56.000]  двумя битами кодировать любой из четырех цветов.
[52:56.000 --> 53:01.000]  Но для трех цветов все равно 2 бита нужно,
[53:01.000 --> 53:06.000]  но еще одну комбинацию нужно запретить.
[53:06.000 --> 53:11.000]  Ну и самый простой способ это сделать, это считать, что вот это 1, 2, 3, это прямо в двоечной записи,
[53:11.000 --> 53:16.000]  а два нуля запретить.
[53:16.000 --> 53:21.000]  Для каждой вершины u нужно
[53:21.000 --> 53:26.000]  завести две переменных.
[53:26.000 --> 53:31.000]  Значит, две булевых переменных.
[53:31.000 --> 53:36.000]  Значит, PuT и CuT.
[53:36.000 --> 53:41.000]  И наложить условия, что они не два нуля, это вот дизьюнция.
[53:41.000 --> 53:46.000]  Наложить условия
[53:46.000 --> 53:51.000]  PuT или CuT.
[53:56.000 --> 54:01.000]  Ну и как бы взять сам большую конъюнцию.
[54:01.000 --> 54:06.000]  Но это нам пока задача, что это просто раскраска.
[54:06.000 --> 54:11.000]  Ну, пока дают, что это вот значение 1, 2 или 3.
[54:11.000 --> 54:16.000]  Нужно еще вот это вот потребовать.
[54:16.000 --> 54:21.000]  Ну, если у нас два бита, то что означает, что они различны?
[54:21.000 --> 54:26.000]  Да, для вершины u мы заводим две булевых переменных.
[54:26.000 --> 54:31.000]  PuT и CuT. Каждое либо 0, либо 1.
[54:31.000 --> 54:36.000]  Но за счет условий дизьюнции мы напрещаем комбинацию 0, 0.
[54:36.000 --> 54:41.000]  А все остальные комбинации 0, 1, 1, 0, 1, 1 соответствуют вот этим триом цветам.
[54:41.000 --> 54:46.000]  И кроме того, нам нужны условия на правильность.
[54:46.000 --> 54:51.000]  Тут, соответственно, если u и v
[54:51.000 --> 54:56.000]  это ребро, то тогда получается,
[54:56.000 --> 55:01.000]  мы накладываем условия
[55:01.000 --> 55:06.000]  PuT не равно PuT
[55:06.000 --> 55:11.000]  или CuT не равно CuVT.
[55:16.000 --> 55:21.000]  Ну а итоговая формула, это просто конъюнция всех условий.
[55:22.000 --> 55:27.000]  Значит, это вот phi, это конъюнция
[55:31.000 --> 55:36.000]  конъюнция тех условий.
[55:39.000 --> 55:43.000]  Ну, все-таки давайте теперь это формально докажем.
[55:43.000 --> 55:48.000]  И что нам нужно доказать, что граф раскрашивается,
[55:48.000 --> 55:53.000]  то есть граф раскрашивается
[55:53.000 --> 55:58.000]  только тогда, когда вот эта формула, по нему построенная,
[55:58.000 --> 56:03.000]  выполнима. Значит, важно, что это и в ту, и в другую сторону должно быть.
[56:03.000 --> 56:08.000]  Ну как мы это будем делать? Ну пусть раскрашивается, пусть есть раскраска.
[56:08.000 --> 56:13.000]  Ну тогда мы просто
[56:13.000 --> 56:18.000]  по нашему соглашению
[56:18.000 --> 56:23.000]  присвоим значение переменных от значения цветов.
[56:23.000 --> 56:28.000]  То есть 1 это будет 0,1, 2 это 1,0 и 3 это 1,1.
[56:28.000 --> 56:33.000]  Вот. Утверждается, что это будет
[56:33.000 --> 56:38.000]  выполняющий набор, то есть все условия будут верны.
[56:38.000 --> 56:43.000]  То есть отсюда верны как раз 0,1, 1,0 и 1,1.
[56:43.000 --> 56:48.000]  Ну и поскольку у соседних вершин разные цвета,
[56:48.000 --> 56:53.000]  то условия на несовпадение тоже будут верны.
[56:57.000 --> 57:02.000]  Ну а наоборот, ну наоборот тоже довольно легко.
[57:02.000 --> 57:07.000]  Значит, пусть у нас есть какой-то
[57:07.000 --> 57:12.000]  выполняющий набор.
[57:12.000 --> 57:17.000]  А что значит, что выполняющий набор для конъюнции?
[57:17.000 --> 57:22.000]  Ну это означает, что все элементы конъюнции истины.
[57:22.000 --> 57:27.000]  Ну вот это вот условие означает, что у нас вариант 0,0
[57:27.000 --> 57:32.000]  вершины не годится, но тогда можно считать, что если 0,1, то это цвет 1,
[57:32.000 --> 57:37.000]  если 1,0, то цвет 2, если 1,1, то цвет 3. И это нам задаст раскраску.
[57:37.000 --> 57:42.000]  Ну а вот эти вот условия зададут, что это правильная раскраска,
[57:42.000 --> 57:47.000]  что действительно для соседних вершин разные цвета.
[57:47.000 --> 57:52.000]  Ну потому что они либо в первом битве различаются, либо в втором, ну может даже и в обоих.
[57:52.000 --> 57:57.000]  Вот, значит, вот такая картина.
[57:57.000 --> 58:02.000]  Ну чего, понятно? Хорошо, давайте я еще один пример покажу.
[58:09.000 --> 58:14.000]  Значит, еще один пример тоже для графов.
[58:14.000 --> 58:19.000]  Значит, для графов это задача оклики.
[58:19.000 --> 58:24.000]  Задача оклики. То есть это множество, тут уже пара.
[58:24.000 --> 58:29.000]  Значит, пара G и K, но что пар G и K таких, что в графе G
[58:29.000 --> 58:34.000]  в графе G существует полный подграф на K вершинах.
[58:50.000 --> 58:55.000]  Вот, это тоже лежит в NP, потому что если граф задан,
[58:55.000 --> 59:00.000]  то можно проверить, если подграф, если вот эти K вершины заданы,
[59:00.000 --> 59:05.000]  то можно проверить, что это действительно клик.
[59:06.000 --> 59:11.000]  Вот.
[59:11.000 --> 59:16.000]  Ну а дальше, если, например, пытаться как-то напрямую это сделать,
[59:16.000 --> 59:21.000]  например, для каждой вершины вести переменную,
[59:21.000 --> 59:26.000]  будет она в клике или не будет она в клике,
[59:26.000 --> 59:31.000]  то, в принципе, можно выкрутиться и
[59:31.000 --> 59:36.000]  в таких переменах что-то написать, но это будет не очень удобно.
[59:36.000 --> 59:41.000]  Там будет какая-то функция суммирования, ее нужно сравнивать с K.
[59:44.000 --> 59:49.000]  Вот.
[59:49.000 --> 59:54.000]  Всегда есть некоторые, как, помню, говорят, trade-off.
[59:54.000 --> 59:59.000]  Trade-off между числом переменных и удобством записи.
[59:59.000 --> 01:00:04.000]  Какая-то альтернатива.
[01:00:04.000 --> 01:00:09.000]  Вот. Поэтому давайте я покажу, как сделать так, чтобы переменах было больше,
[01:00:09.000 --> 01:00:14.000]  зато формула была попроще.
[01:00:14.000 --> 01:00:19.000]  Вот. Значит, удобно делать такие переменные.
[01:00:19.000 --> 01:00:24.000]  Ну тоже, скажем, P, It, Ut.
[01:00:24.000 --> 01:00:29.000]  Если U, значит, если U это
[01:00:29.000 --> 01:00:34.000]  It-я вершина клики.
[01:00:34.000 --> 01:00:39.000]  Значит, It-я вершина клики.
[01:00:43.000 --> 01:00:48.000]  То есть, будем считать, там априорникового порядка нет, но будем считать, что какой-то порядок введен.
[01:00:48.000 --> 01:00:53.000]  И, соответственно, вот P, It, Ut означает, что
[01:00:53.000 --> 01:00:58.000]  у It-я вершина клики.
[01:00:58.000 --> 01:01:03.000]  Ну, можно наложить условия, что под каждым номером
[01:01:03.000 --> 01:01:08.000]  есть только одна вершина, но на самом деле
[01:01:08.000 --> 01:01:13.000]  это нам даже не обязательно. Если будет под It-ом номером
[01:01:13.000 --> 01:01:18.000]  две вершины, то это на самом деле там
[01:01:18.000 --> 01:01:23.000]  любую из них можно оставить.
[01:01:23.000 --> 01:01:28.000]  Вот. Но нам все-таки нужно, чтоб хотя бы одна вершина была.
[01:01:28.000 --> 01:01:33.000]  То есть первое условие,
[01:01:33.000 --> 01:01:38.000]  что под
[01:01:38.000 --> 01:01:43.000]  каждым номером
[01:01:43.000 --> 01:01:48.000]  под каждым номером есть вершина.
[01:01:55.000 --> 01:02:00.000]  А, делаем то же самое, что клика
[01:02:00.000 --> 01:02:05.000]  сводится к САП.
[01:02:05.000 --> 01:02:10.000]  Да, это я забыл сказать. Значит, клика
[01:02:10.000 --> 01:02:15.000]  тоже можно формулу построить,
[01:02:15.000 --> 01:02:20.000]  которая выполнима тогда, только тогда, когда в графе есть клика.
[01:02:20.000 --> 01:02:25.000]  Да, соответственно, вот это вот i, значит, у столько же, сколько вершины в графе,
[01:02:25.000 --> 01:02:30.000]  а i будет от 1 до k. Соответственно, под каждым номером есть вершина,
[01:02:30.000 --> 01:02:35.000]  но это просто означает, что
[01:02:35.000 --> 01:02:40.000]  ну, давайте я так напишу P i t 1 или и так далее, или P i t n.
[01:02:40.000 --> 01:02:45.000]  Традиционно, число вершин обозначают за n.
[01:02:45.000 --> 01:02:50.000]  Соответственно, для каждого i, значит, такая дизъюмция должна выполняться.
[01:02:50.000 --> 01:02:55.000]  Нет, дизъюмция, что
[01:02:55.000 --> 01:03:00.000]  есть вершина, значит, есть вершина
[01:03:00.000 --> 01:03:05.000]  под этим номером.
[01:03:05.000 --> 01:03:10.000]  Нет, еще раз, единица, если это i t вершина.
[01:03:10.000 --> 01:03:15.000]  Нам нужна хотя бы одна i t вершина.
[01:03:15.000 --> 01:03:20.000]  Хотя бы одна i t вершина, тогда какая-то такая дизъюмция.
[01:03:20.000 --> 01:03:25.000]  Нет, тут вроде все правильно.
[01:03:25.000 --> 01:03:30.000]  Вот, ну дальше нам что нужно?
[01:03:30.000 --> 01:03:35.000]  Нам нельзя, чтобы одна вершина была под разными номерами,
[01:03:35.000 --> 01:03:40.000]  а то иначе клика меньше размером получится.
[01:03:40.000 --> 01:03:45.000]  Соответственно, под разными номерами
[01:03:45.000 --> 01:03:50.000]  разные вершины.
[01:03:50.000 --> 01:03:55.000]  Но это означает, что
[01:03:55.000 --> 01:04:00.000]  неверно, что одновременно
[01:04:00.000 --> 01:04:05.000]  P i u t и P i v t,
[01:04:05.000 --> 01:04:10.000]  где, соответственно, u не равно v.
[01:04:10.000 --> 01:04:15.000]  Вот.
[01:04:15.000 --> 01:04:20.000]  Ну и наконец,
[01:04:20.000 --> 01:04:25.000]  третье условие, что это, собственно, клика.
[01:04:25.000 --> 01:04:30.000]  На что если i не равно v,
[01:04:30.000 --> 01:04:35.000]  значит, есть
[01:04:35.000 --> 01:04:40.000]  все ребра.
[01:04:40.000 --> 01:04:45.000]  Значит, есть все ребра.
[01:04:45.000 --> 01:04:50.000]  То есть, если i не равно v
[01:04:50.000 --> 01:04:55.000]  и у нас верно, что
[01:04:55.000 --> 01:05:00.000]  P i u t
[01:05:00.000 --> 01:05:05.000]  и P i v t,
[01:05:05.000 --> 01:05:10.000]  то тогда вот это вот uv
[01:05:10.000 --> 01:05:15.000]  uv это ребро.
[01:05:15.000 --> 01:05:20.000]  Так, ну а что значит uv это ребро?
[01:05:20.000 --> 01:05:25.000]  Ну можно считать, что у нас просто для...
[01:05:25.000 --> 01:05:30.000]  Вот это вот это как бы константа из матрицы смежности.
[01:05:30.000 --> 01:05:35.000]  Ой, g, да. Спасибо.
[01:05:35.000 --> 01:05:40.000]  То есть, вот это вот можно считать, что это логическая константа, взятая напрямую из матрицы смежности.
[01:05:40.000 --> 01:05:45.000]  То, что uv лежит в e.
[01:05:45.000 --> 01:05:50.000]  Ну, точнее не e, а вот это как бы принадлежность
[01:05:50.000 --> 01:05:55.000]  логической константа,
[01:05:55.000 --> 01:06:00.000]  взятая из
[01:06:00.000 --> 01:06:05.000]  матрицы смежности.
[01:06:05.000 --> 01:06:10.000]  Ну и тогда получается, что там не нужно какую-то арифметику разводить
[01:06:10.000 --> 01:06:15.000]  и складывать единицы, проверять, что их будет k.
[01:06:15.000 --> 01:06:20.000]  Ну тоже, если это как бы напрямую делать, там слишком длинные формулы получатся.
[01:06:20.000 --> 01:06:25.000]  Нужно какие-то промежуточные шаги.
[01:06:25.000 --> 01:06:30.000]  А тут все ясно, что у нас...
[01:06:30.000 --> 01:06:35.000]  Вот этих формул k,
[01:06:35.000 --> 01:06:40.000]  этих формул k умножить на n в квадрате, если грубо,
[01:06:40.000 --> 01:06:45.000]  и этих формул порядка k в квадрате.
[01:06:45.000 --> 01:06:50.000]  Нет, я же говорю, это логическая константа.
[01:06:50.000 --> 01:06:55.000]  Это логическая константа, которую мы берем из матрицы смежности.
[01:06:55.000 --> 01:07:00.000]  Либо 0, либо единица.
[01:07:00.000 --> 01:07:05.000]  То есть, вот это вот будет единица, если такое ребро есть, и 0, если такое ребро нет.
[01:07:10.000 --> 01:07:15.000]  В принципе, можно даже это раскрутить, сказать, что если тут единица,
[01:07:15.000 --> 01:07:20.000]  то это точно выполнено, мы это вообще уберем.
[01:07:20.000 --> 01:07:25.000]  Если тут 0, то что означает, что из чего-то следует 0? Это означает, что то, откуда следует, неверно.
[01:07:25.000 --> 01:07:30.000]  И тогда можно сказать, что мы просто отрицаем вот эту штуку.
[01:07:30.000 --> 01:07:35.000]  То есть, можно сказать, что если ребра нет, то тогда не может быть так,
[01:07:35.000 --> 01:07:40.000]  что эта пара встретилась под итым и житым номером.
[01:07:40.000 --> 01:07:45.000]  И тогда получается, что уже нет никаких константов, а просто есть то, как мы пишем формулу от тех переменных, которые есть.
[01:07:55.000 --> 01:08:00.000]  Теперь давайте обсудим, почему это работает.
[01:08:00.000 --> 01:08:05.000]  То есть, нам тут нужно, что...
[01:08:05.000 --> 01:08:10.000]  Давайте я тут явно напишу, что и от 1 до k.
[01:08:10.000 --> 01:08:15.000]  Это как мы используем число k.
[01:08:15.000 --> 01:08:20.000]  Что пара g и k лежит в языке клика.
[01:08:20.000 --> 01:08:25.000]  Тогда и только тогда.
[01:08:25.000 --> 01:08:30.000]  Когда вот это такая построенная формула...
[01:08:30.000 --> 01:08:35.000]  Но опять же, формула это конъюнция всех условий.
[01:08:35.000 --> 01:08:40.000]  Когда форма, которая есть конъюнция всех условий, выполнима.
[01:08:40.000 --> 01:08:45.000]  Ну, во-первых, лево-направо. Пусть у нас есть действительно клика.
[01:08:45.000 --> 01:08:50.000]  Тогда мы любым образом пронумеруем ее вершины.
[01:08:50.000 --> 01:08:55.000]  Вершины, соответственно, соответственно этой нумерации.
[01:08:55.000 --> 01:09:00.000]  Действительно, под каждым номером у нас будет вершина, поэтому это верно.
[01:09:00.000 --> 01:09:05.000]  Под равными номерами разные вершины.
[01:09:05.000 --> 01:09:10.000]  Потому что мы взяли кое-какая вершина, их пронумеровали как-то.
[01:09:10.000 --> 01:09:15.000]  Поэтому это тоже будет верно. Ну и ребра, раз это клика, значит это тоже будет верно.
[01:09:15.000 --> 01:09:20.000]  Поэтому в эту сторону все довольно легко.
[01:09:20.000 --> 01:09:25.000]  В обратную сторону пусть все эти условия выполнены.
[01:09:25.000 --> 01:09:30.000]  Я здесь не накладываю условия, что под каждым номером ровно одна вершина.
[01:09:30.000 --> 01:09:35.000]  В принципе, может так получиться, что под одним номером несколько разных вершин.
[01:09:35.000 --> 01:09:40.000]  Мы выберем по одной вершине от каждого номера. Их будет как раз ка штук.
[01:09:40.000 --> 01:09:45.000]  Значит утверждается, что это будет клика размера к.
[01:09:45.000 --> 01:09:50.000]  Почему? Ну, во-первых, эти все вершины будут разные.
[01:09:50.000 --> 01:09:55.000]  Во-первых, мы можем выбрать из кадея, потому что вот это условие выполнено.
[01:09:55.000 --> 01:10:00.000]  Во-вторых, они все будут разные, потому что вот это выполнено.
[01:10:00.000 --> 01:10:05.000]  Ну и в-третьих, это будет клика, потому что вот это выполнено.
[01:10:05.000 --> 01:10:10.000]  Значит, действительно получается равносильно.
[01:10:15.000 --> 01:10:20.000]  А я не писал, что ровно одна.
[01:10:20.000 --> 01:10:25.000]  Ну, смотрите, может быть, например, такая картина.
[01:10:25.000 --> 01:10:30.000]  Ну, например, вот есть треугольник.
[01:10:30.000 --> 01:10:35.000]  Да, есть одна вершина, вот такая вот.
[01:10:35.000 --> 01:10:40.000]  И еще другая вершина, вот такая вот. А между ними ребра нет.
[01:10:40.000 --> 01:10:45.000]  Тогда можно считать, что и вот это вот под первым номером, и вот это вот под первым номером.
[01:10:45.000 --> 01:10:50.000]  Это под вторым, это по третьим, это по четвертым.
[01:10:50.000 --> 01:10:55.000]  И тогда все эти условия будут выполнены.
[01:10:55.000 --> 01:11:00.000]  Так что так может быть.
[01:11:00.000 --> 01:11:05.000]  Если не требовать, что они все разные.
[01:11:05.000 --> 01:11:10.000]  Если не требовать, что под каждым номером только одна вершина, то может так и не будет.
[01:11:10.000 --> 01:11:15.000]  То есть вот для такой номерации все условия верны.
[01:11:15.000 --> 01:11:20.000]  Ну, мы из этих первых вершин одну возьмем и для нее покажем, что вот есть клика.
[01:11:25.000 --> 01:11:30.000]  Вот.
[01:11:30.000 --> 01:11:35.000]  Так, ну вот, значит, вот такая вот картина.
[01:11:35.000 --> 01:11:40.000]  Так, что будем доказывать в следующий раз?
[01:11:40.000 --> 01:11:45.000]  Ну, в следующий раз будем доказывать, что вот эта задача set, это самая универсальная задача.
[01:11:45.000 --> 01:11:50.000]  Это называется теорема Кука-Левина.
[01:11:50.000 --> 01:11:55.000]  Теорема Кука-Левина.
[01:11:55.000 --> 01:12:00.000]  Что задача set.
[01:12:00.000 --> 01:12:05.000]  Это НП полная задача.
[01:12:05.000 --> 01:12:10.000]  Вот. Более того, будет НП полным ее частный случай.
[01:12:10.000 --> 01:12:15.000]  Значит, и 3 set.
[01:12:15.000 --> 01:12:20.000]  3 set тоже НП полная.
[01:12:20.000 --> 01:12:25.000]  Значит, где буквка 3 означает, что это выполнимость циферка 3.
[01:12:25.000 --> 01:12:30.000]  Значит, выполнимость 3 KNF.
[01:12:30.000 --> 01:12:35.000]  KNF означает конъюнктивная нормальная форма, а 3 означает, что в каждой скобке 3 литерала.
[01:12:35.000 --> 01:12:40.000]  То есть это примерно вот такая вот тука.
[01:12:40.000 --> 01:12:45.000]  В общем, в каждой скобке 3 переменных или отрицания переменных.
[01:12:45.000 --> 01:12:50.000]  А всего скобок может быть сколько угодно.
[01:12:50.000 --> 01:12:55.000]  Ну, полинамиальное число.
[01:12:55.000 --> 01:13:00.000]  Да.
[01:13:00.000 --> 01:13:05.000]  Ну, в общем, в каждой скобке 3 переменных или отрицания переменных.
[01:13:05.000 --> 01:13:10.000]  Да.
[01:13:10.000 --> 01:13:15.000]  Да. В set любая, а в 3 set именно такой формы.
[01:13:15.000 --> 01:13:20.000]  И это, на самом деле, если 2 set взять, то это на самом деле будет лежать в П.
[01:13:20.000 --> 01:13:25.000]  То есть если в каждой скобке будет только 2 литерала, то это можно распознать
[01:13:25.000 --> 01:13:30.000]  за полинальное время, а вот с тремя это уже НП трудная.
[01:13:31.000 --> 01:13:36.000]  Но это вот немножко похоже на то, что раскраска в два цвета полинамиальная,
[01:13:36.000 --> 01:13:41.000]  а в три уже тоже НП трудная будет.
[01:13:41.000 --> 01:13:46.000]  Ну вот, соответственно, на следующей лекции в первых половине мы вот это докажем,
[01:13:46.000 --> 01:13:51.000]  а потом будем доказывать НП полноту разных других задач, в том числе вот этих двух, но не только их.
[01:13:51.000 --> 01:13:56.000]  Но, видимо, это потом еще уйдет на еще следующую лекцию.
[01:13:56.000 --> 01:14:01.000]  Ну что, спасибо за внимание. До встречи.
