[00:00.000 --> 00:14.080]  Задан порядок w на множестве m.
[00:14.080 --> 00:17.640]  По умолчанию мы считаем, что это полный линия порядок,
[00:17.640 --> 00:19.680]  и мы хотим найти устойчивое просочетание.
[00:19.680 --> 00:32.960]  Если задан парсочетание s,
[00:32.960 --> 00:39.600]  я его обычно пишу сразу между m и w, то есть у меня s от m это пара m, а если w это пара w,
[00:39.600 --> 00:52.760]  тогда m, w это угроза, если у меня, вот картинка примерно такая, у меня есть,
[00:52.760 --> 01:06.000]  у каждого из них есть своя пара, и они угрозны, если они друг на друга лучше, чем их пара, то есть
[01:06.000 --> 01:13.080]  у меня выплыли на два условия, что для любой должно быть лучше, с точки зрения m, лучше, чем его пара,
[01:13.080 --> 01:25.960]  а для w м должно быть лучше, чем его пара. Ну и прощаем устойчивый, если нет угроз.
[01:25.960 --> 01:30.720]  Тут еще могут быть случаи, когда у них пара пустая, тогда просто я составил эту пустую,
[01:30.720 --> 01:34.480]  и можно считать, что пустой находится ниже всех список.
[01:48.480 --> 01:55.920]  Мы знаем, что у нас есть, устойчивый парсочетание всегда есть, у нас находится они с помощью алгоритма Гейла Шепля,
[01:55.920 --> 02:11.760]  то есть, во-первых, устойчивые существуют, можно найти с помощью алгоритма Гейла Шепля,
[02:11.760 --> 02:31.560]  они образуют решетку, они образуют решетку. Решетка это, у вас, наверное, статистически множественную решетку,
[02:31.560 --> 02:41.000]  то есть у вас для каждого из двух элементов есть их метод join, ну или там с точней верхней,
[02:41.000 --> 02:55.240]  там с точней нижней грань. Ну и эта решетка, она согласована с порядками на этих кусочек парсочетания,
[02:55.240 --> 03:02.800]  и можно сказать, что у нас парсочетание S, оно не хуже с точки зрения мужчин, парсочетание S с волной,
[03:02.800 --> 03:26.200]  если у вас для любого m из m, S от m, оно не хуже, чем S-волной от m. И мы знаем, что у нас S с точки зрения m,
[03:26.240 --> 03:32.560]  тогда только тогда, когда S-волной лучше с точки зрения w, то есть эти порядки противоположны,
[03:32.560 --> 03:46.760]  и относительно этого порядка устойчиво-процентно образуют решетку. Ну есть, как у вас происходит,
[03:46.760 --> 03:51.880]  алгоритм Гейла Шепля задает вам на этой решетке максимальный и минимальный элемент этого порядка,
[03:52.040 --> 04:02.720]  то есть вы переводите алгоритм Гейла Шепля с точки зрения мужчин, вы получаете для мужчин лучше дляähựенно
[04:02.720 --> 04:11.360]  footprint, если вы проводите алгоритм Гейла Шепля с точки зрения w, то вы получаете лучше для w и лучше
[04:12.360 --> 04:17.160]  для m. Наша задача – выведите с точки зрения просточетания. Мы это, конечно, выберетеAppleSибila,
[04:17.160 --> 04:22.080]  логично сделать что-то посередине между самым лучшим для m и самым лучшим для w, поэтому хорошо
[04:22.080 --> 04:26.000]  бы иметь, выписать все вот эти случаи в пространстве, сколько их, если мы там найдем здесь серединки, может это
[04:26.000 --> 04:35.200]  будет такое среднее между m и w. Ну и какие у нас есть примеры, давайте пример в виду, когда
[04:35.200 --> 04:46.720]  в расчетании несколько, ну вот вы, например, можно легко сделать цепочку, это вы, ну давайте я для 4
[04:46.720 --> 04:52.800]  напишу, вы делаете примерно следующее, допустим, у нас будут буквы и цифры, с точки зрения букв вы
[04:52.800 --> 05:00.120]  делаете циклический сдвиг, это я пишу сейчас в строчку, и так лучше строчку листал без, но я пишу
[05:00.120 --> 05:08.080]  можно по-разному, то есть это у меня порядок для a, b, c, d с точки зрения букв, но для цифры у меня
[05:08.080 --> 05:20.640]  будет порядке тоже со сдвигом, но в обратном обратном, то есть у меня, например, я хочу, чтобы у 1
[05:20.640 --> 05:30.120]  a было на последнем месте, тут было b, c, d, t это, наверное, будет вот так вот, давайте проверим,
[05:30.120 --> 05:46.240]  вот если вы, если рассмотрите такие прочитания, то у вас будет алгоритм-гилошепти для букв выдаст вам
[05:46.560 --> 05:51.480]  про-сочетание, алгоритм-гилошепти для цифры выдаст вам вот это про-сочетание, который здесь будет
[05:51.560 --> 05:58.300]  последним столбцом, ну и вы можете проверить, что у вас оставшиеся про-сочетания это, собственно,
[05:58.300 --> 06:02.040]  второй и третий столбец, то есть второй столбец здесь должен быть, наоборот, третий столбец選об curtains
[06:02.120 --> 06:08.200]  тут, и у вас все будет 4 про-сочетания, то есть, ну можно вообще для n будет��
[06:08.200 --> 06:12.200]  в данном случае игра будет вот такой вот.
[06:12.200 --> 06:16.200]  Но для общего случая, может, для иного общить тоже доказать, что будет...
[06:16.200 --> 06:21.200]  Подробнее объяснить, как вы переходите вот под вот такого устойчивого почитания?
[06:21.200 --> 06:24.200]  Это пока... Смотрите, пока у меня алгоритма нет,
[06:24.200 --> 06:27.200]  я говорю, возможно, примеры разговорили на семинарах,
[06:27.200 --> 06:30.200]  то есть на этом примере легко показать, что, во-первых, легко показать,
[06:30.200 --> 06:35.200]  что у вас эти все штуки устойчивые и что никаких других встойчивых нет.
[06:35.200 --> 06:37.200]  Вот так...
[06:37.200 --> 06:42.200]  Нет, в смысле, еще раз, я утверждаю, что у меня есть 4 просточитания.
[06:49.200 --> 06:57.200]  Ну, для этого примера нужно какой-то перебор сделать,
[06:57.200 --> 07:00.200]  то есть идейно понять, что происходит.
[07:00.200 --> 07:07.200]  Допустим, если А находится с двойкой, например, в вашем просточитании,
[07:07.200 --> 07:14.200]  тогда у вас эти порядки, они противоположны,
[07:14.200 --> 07:19.200]  то есть, если, смотрите, А находится с двойкой,
[07:19.200 --> 07:24.200]  то, значит, у меня, у всех остальных,
[07:24.200 --> 07:28.200]  ну, значит, например, у единички должен быть кто-то...
[07:28.200 --> 07:32.200]  Сейчас неправильно говорю...
[07:32.200 --> 07:37.200]  Значит, двойка не должна никому убежать, двойка может убежать к С и к D,
[07:37.200 --> 07:42.200]  значит, мы должны к С и D выдать кого-то получше.
[07:42.200 --> 07:48.200]  Ну и дальше вы говорите, что D может быть 4 или 1,
[07:48.200 --> 07:52.200]  и дальше нужно показать, что, например,
[07:52.200 --> 07:55.200]  если у вас у D четверки, то ничего не получится,
[07:55.200 --> 07:58.200]  значит, у D там типа единичка.
[07:58.200 --> 08:01.200]  Давайте посмотрим, почему у нас...
[08:05.200 --> 08:08.200]  Ну, давайте я напишу, у вас есть два слуха...
[08:08.200 --> 08:11.200]  Еще раз, если А подложил двойки,
[08:11.200 --> 08:14.200]  значит, двойка не может убежать к С и к D,
[08:14.200 --> 08:17.200]  значит, у С и D должно быть получше, чем двойка,
[08:17.200 --> 08:20.200]  но для С это легко получить, а для D должно быть обязательно отсюда.
[08:20.200 --> 08:23.200]  У четверки на последнем месте,
[08:23.200 --> 08:26.200]  поэтому все остальные должны подложить что-то лучшее,
[08:26.200 --> 08:28.200]  поэтому у нас они будут только отсюда,
[08:28.200 --> 08:31.200]  ну и профессионально не получится, потому что у нас тут тройка должна быть,
[08:31.200 --> 08:33.200]  а тут двойка и тройка у нас профессионально не получится,
[08:33.200 --> 08:36.200]  значит, 4 не может быть, ну значит, это единичка.
[08:36.200 --> 08:38.200]  Вот это обязательно единичка,
[08:38.200 --> 08:41.200]  ну и таким же образом мы движемся вверх, показываем, что никаких других не может быть.
[08:41.200 --> 08:43.200]  То есть это какой-то ручной перебор.
[08:43.200 --> 08:48.200]  Пока мне тогда непонятно, что зашли они, потому что они производят першотку.
[08:48.200 --> 08:54.200]  Если, например, все равно, например, чтобы искать какие-то новые...
[08:54.200 --> 08:57.200]  Нет, пока...
[08:57.200 --> 09:01.200]  Я говорю, что пока движение першотку никак связано,
[09:01.200 --> 09:04.200]  я просто сейчас говорю, что я пока хочу сказать,
[09:04.200 --> 09:07.200]  что можно прийти теперь в такой способ.
[09:07.200 --> 09:10.200]  Сейчас я...
[09:10.200 --> 09:12.200]  Ну, першотка на самом деле тоже...
[09:12.200 --> 09:14.200]  То есть это важно понимать с точки зрения структуры.
[09:14.200 --> 09:19.200]  На самом деле все, что мы хотим делать, это уметь переходить к следующему по порядку.
[09:19.200 --> 09:22.200]  В принципе, то, что першотка, это хорошо,
[09:22.200 --> 09:25.200]  но это как бы общего факта, даже там есть теорема про то,
[09:25.200 --> 09:30.200]  что любая першотка реализуется как множество усочных просочетаний при каком-то порядке.
[09:30.200 --> 09:32.200]  Поэтому першотка может быть любой.
[09:32.200 --> 09:37.200]  Но на самом деле все, что нам нужно для того, чтобы искать полностью все усочные просочетания,
[09:37.200 --> 09:39.200]  это уметь ходить по этому графу.
[09:39.200 --> 09:46.200]  То есть у вас есть граф, где в графе есть Гейл Шепли для множества m.
[09:46.200 --> 09:49.200]  Дальше с точки зрения m все остальные хуже,
[09:49.200 --> 09:53.200]  и где-то у вас есть Гейл Шепли для w.
[09:53.200 --> 09:57.200]  Это в точке просочетания.
[09:57.200 --> 10:01.200]  Я могу нарисовать граф из точки просочетания и прести стрелочки,
[10:01.200 --> 10:03.200]  если они больше точки зрения этого порядка.
[10:03.200 --> 10:09.200]  У меня есть максимальный элемент, если я рисую порядок с точки зрения m,
[10:09.200 --> 10:12.200]  то у меня есть Гейл Шепли для m, несмотря на лучший вариант,
[10:12.200 --> 10:14.200]  Гейл Шепли для w, несмотря на худший вариант.
[10:14.200 --> 10:16.200]  Все остальные находятся между ними.
[10:21.200 --> 10:25.200]  По крайней мере, уж точно, они все находятся между m и w.
[10:25.200 --> 10:29.200]  То есть у нас для m это самое лучшее, оно лучше всех любого просочетания.
[10:29.200 --> 10:31.200]  w самый худший.
[10:31.200 --> 10:38.200]  Они соединены либо с m, либо с w.
[10:38.200 --> 10:41.200]  Понятно, что у нас какие-то стрелочки.
[10:41.200 --> 10:44.200]  То есть они каким-то образом соединены.
[10:47.200 --> 10:50.200]  Ну да, может быть вот так, например.
[10:52.200 --> 10:54.200]  Сравнение.
[10:54.200 --> 10:58.200]  Я рисую диаграмму Хасса, я беру порядок с точки зрения m,
[10:58.200 --> 11:02.200]  и дальше стрелочка между двумя элементами означает, что они сравнимы,
[11:02.200 --> 11:04.200]  и между ними нет промежуточных.
[11:04.200 --> 11:09.200]  Если я умею ходить по этому графу, то есть я умею для каждой вершины
[11:09.200 --> 11:11.200]  получать все следующие точки зрения m,
[11:11.200 --> 11:14.200]  то значит я за конечное число перебора могу перебрать весь граф
[11:14.200 --> 11:17.200]  и таким образом найти все его точки просочетания.
[11:17.200 --> 11:20.200]  Давайте я сейчас расскажу алгоритм, как, собственно, по этому графу ходить.
[11:20.200 --> 11:26.200]  То есть я сейчас расскажу алгоритм,
[11:26.200 --> 11:30.200]  потом я... Ну я не знаю, нужно будет пример, может на семинар оставить.
[11:30.200 --> 11:34.200]  Для этого графа мы сделаем, но это будет тривиально.
[11:34.200 --> 11:37.200]  Может быть на семинаре я оставлю какой-нибудь более сложный пример.
[11:37.200 --> 11:40.200]  Дальше я еще расскажу про похуже задачу для соседей,
[11:40.200 --> 11:43.200]  и в ней расскажу алгоритм, а если останется время, мы будем показывать,
[11:43.200 --> 11:47.200]  что оно уже такое, это будет уже скорее допис.
[11:47.200 --> 12:01.200]  Еще раз, алгоритм поиска всех устойчивых просочетаний.
[12:05.200 --> 12:07.200]  Концептуально он устроен просто.
[12:07.200 --> 12:12.200]  А именно, вы переводите алгоритм Гейла Шепля,
[12:12.200 --> 12:15.200]  который выводит вам устойчивые просочетания,
[12:15.200 --> 12:24.200]  а дальше вы берете какой-то элемент и делаете ему искусственно отказ.
[12:24.200 --> 12:31.200]  То есть вы просто вычеркиваете его пару и считаете, что у нас произошел отказ.
[12:31.200 --> 12:40.200]  То есть вы берете алгоритм Гейла Шепля для m,
[12:40.200 --> 12:51.200]  у вас получается такой список, где здесь есть какие-то пары.
[12:51.200 --> 12:54.200]  Я их давайте задумирую так, чтобы они были соответственные.
[12:54.200 --> 13:01.200]  Я этого не сказал, но опять же вы доказывали, что если у вас количество k и l не равны,
[13:01.200 --> 13:06.200]  то если вы проведете алгоритм Гейла Шепля, то вы получите какой-то случай просочетания,
[13:06.200 --> 13:09.200]  и все, кто входит в него, не входит вообще в случай просочетания,
[13:09.200 --> 13:15.200]  вы можете просто выкинуть и сделать так, чтобы свести задачу к тому, чтобы у вас были одинаково количество m и w.
[13:15.200 --> 13:20.200]  То есть если у вас кто-то не получился в паре алгоритм Гейла Шепля, то он никогда не будет в паре,
[13:20.200 --> 13:24.200]  поэтому на самом деле можно считать, что не равно k, но свести к этому случаю.
[13:24.200 --> 13:30.200]  Ну вот, допустим, вы при алгоритме Гейла Шепля тут что-то получеркивали,
[13:30.200 --> 13:33.200]  будем считать, что вы вычеркиваете какие-то элементы,
[13:33.200 --> 13:36.200]  и у вас получилось вот такое устойчивое просочетание.
[13:37.200 --> 13:42.200]  А именно вы просто берете и вычеркиваете какую-то пару,
[13:42.200 --> 13:46.200]  и продолжаете действие алгоритма Гейла Шепля.
[13:46.200 --> 13:50.200]  То есть вы просто берете m1, делаете продолжение следующему походу,
[13:50.200 --> 13:55.200]  следующему после w1, то у него списки есть, то есть у этого человека есть,
[13:55.200 --> 13:58.200]  опять же, выбор из двух, либо m1, либо тот у него сейчас в паре,
[13:58.200 --> 14:02.200]  он выбирает, делает еще один отказ, и мы так работаем,
[14:02.200 --> 14:19.200]  выбираем it и делаем искусственно, отказываем его паре.
[14:19.200 --> 14:31.200]  И продолжаем применяем алгоритм Гейла Шепля.
[14:31.200 --> 14:38.200]  Вообще говоря, могло бы получиться одно из трех событий.
[14:38.200 --> 14:42.200]  В отличие от обычного алгоритма Гейла Шепля,
[14:42.200 --> 14:45.200]  где вы все делали предложение, потом все получили отказы,
[14:45.200 --> 14:49.200]  все могли получить отказы, потом снова все делали новое предложение,
[14:49.200 --> 14:54.200]  тут у нас все более детерминировано, потому что у нас происходит один отказ,
[14:54.200 --> 14:57.200]  то есть на самом деле я могу здесь написать просто последовательность,
[14:57.200 --> 15:00.200]  у меня есть m1, делал предложение следующему по списку,
[15:00.200 --> 15:03.200]  этот отказал кому-то, это делал новое предложение, отказал кому-то,
[15:03.200 --> 15:05.200]  у вас получается такая цепочка из элементов,
[15:05.200 --> 15:08.200]  которая рано или поздно закончится.
[15:08.200 --> 15:11.200]  Будем делать какие-то отказы, после чего этот алгоритм будет работать,
[15:11.200 --> 15:13.200]  и он что-то выдаст.
[15:13.200 --> 15:19.200]  А у нас на самом деле есть три исхода, возможно.
[15:19.200 --> 15:23.200]  А именно могло быть такое, что у m1 кончился список...
[15:31.200 --> 15:34.200]  Ну, вообще могло быть такое, что мы там все дальше отказали,
[15:34.200 --> 15:36.200]  но пока непонятно.
[15:36.200 --> 15:40.200]  Может быть, ему даже самый худший вариант отказал, но непонятно.
[15:40.200 --> 15:44.200]  Могло быть такое, что нашли новое,
[15:44.200 --> 15:57.200]  то есть нашли паросочетание с теми же m1, mk, w1, wk.
[15:57.200 --> 16:05.200]  Ну, если, в принципе, технически можно было вот этих лишних не вычеркивать,
[16:05.200 --> 16:20.200]  тогда могло быть такое, что у m1 или кто-то нашли паросочетание
[16:20.200 --> 16:32.200]  с новым w житом, ну или m житом, если их было больше, чем нужно было.
[16:32.200 --> 16:34.200]  Такое тоже может быть.
[16:34.200 --> 16:36.200]  Теоретически.
[16:36.200 --> 16:41.200]  Вот утверждается, что если у вас есть устойчивое паросочетание,
[16:41.200 --> 16:50.200]  то есть если у вас есть устойчивое паросочетание, которое хуже данного,
[16:50.200 --> 16:58.200]  то вот этот алгоритм его именно и выдаст.
[16:58.200 --> 17:07.200]  Вот это происходит тогда только тогда, когда существует s-волной,
[17:07.200 --> 17:14.200]  которая устойчива паросочетания.
[17:14.200 --> 17:22.200]  То есть если есть устойчивое паросочетание, которое хуже данного,
[17:22.200 --> 17:30.200]  то это происходит тогда, когда мы получим здесь новую устойчивую паросочетание.
[17:30.200 --> 17:34.200]  И причем это будет следующее с точки зрения того порядка.
[17:34.200 --> 17:53.200]  Да, ну я говорю, что могло быть, видите, есть три способа,
[17:53.200 --> 17:57.200]  если изначально на списке были побольше, могло быть такое,
[17:57.200 --> 17:59.200]  что какое-то w предложил бы уже новому человеку.
[17:59.200 --> 18:07.200]  Так вот, если этот алгоритм закончится либо у м1,
[18:07.200 --> 18:10.200]  или у кого-то м2 кончится список, то он больше не может никого предлагать.
[18:10.200 --> 18:17.200]  Ну да, не может кончиться список, не важно.
[18:17.200 --> 18:22.200]  Короче, я хочу сказать, что если у нас есть устойчивое паросочетание,
[18:22.200 --> 18:26.200]  у которого в паре м1 хуже, чем w1,
[18:26.200 --> 18:31.200]  то наш алгоритм обязательно закончится на каком-то устойчивом паросочетании,
[18:31.200 --> 18:35.200]  причем это паросочетание будет следующее с точки зрения этого порядка.
[18:35.200 --> 18:38.200]  То есть мы просто перейдем к следующему элементу.
[18:38.200 --> 18:44.200]  То есть мы не можем проскочить этот элемент и перейти к новому.
[18:44.200 --> 18:50.200]  Например, если вы берете, возьмем этот пример, который мы рассмотрели,
[18:50.200 --> 18:56.040]  Вот вы берете, проводите логику Гилл Шеппель, дальше УА делает искусственный отказ.
[18:56.040 --> 19:06.040]  А делает предложение двойке. Двойка, у него есть два предложения от А и Б, оно сравнится, у него А лучше, поэтому двойка отказывает Б.
[19:06.040 --> 19:10.040]  Т.е. вы говорят, что теперь единичка для А самая лучшая?
[19:10.040 --> 19:15.040]  Нет, мы просто вычеркиваем его из списка. Мы просто делаем искусственный отказ.
[19:15.040 --> 19:25.040]  Тут надо сказать какие-то слова, что на самом деле мы можем, если мы хотим театрически это доказывать,
[19:25.040 --> 19:34.040]  надо сказать, что мы можем работать с неполными списками, а именно мы можем считать, что у нас где-то есть в этом порядке символ плинтус.
[19:35.040 --> 19:44.040]  В смысле есть символ, если там пустой значок, то пустой это значит, что нам не будет без пара, чем быть с этими людьми.
[19:44.040 --> 19:48.040]  Ну или говорить, что у нас есть неполные списки, то есть в принципе тут не обязательно иметь полные списки,
[19:48.040 --> 19:53.040]  просто если мы доходим до конца, то дальше уже мы ни с кем не хотим быть паре, мы останемся в одиночке, нас удовлетворяют.
[19:53.040 --> 19:59.040]  Поэтому мы просто вычеркиваем один из списков для А, ну естественно у единички тоже А вычеркивается.
[19:59.040 --> 20:07.040]  Ну и вот мы делаем искусственный отказ. Получается, что А в двойке, двойка выбирает, А выбирает А, потом двойка Б отказывает.
[20:07.040 --> 20:14.040]  Дальше у тройки есть предложение от Б и С, он убирает Б, ну то есть тут происходит вот это.
[20:14.040 --> 20:20.040]  И дальше четверка выбирает между С и Д, выбирает С, ну и Д переходит к единичке.
[20:20.040 --> 20:23.040]  Мы получаем следующее стоящие просочетания.
[20:23.040 --> 20:31.040]  Мы, во-первых, получаем новое стоящие просочетания, оно следующее по этому порядку, то есть это такое наиболее близкое,
[20:31.040 --> 20:39.040]  то есть это наименьший элемент, который лучше, чем текущий, у которого УМ1 пара хуже.
[20:39.040 --> 20:45.040]  Почему мы не получили вопрос, когда Б будет с двойкой?
[20:45.040 --> 20:52.040]  Ну потому что А с двойкой же, ну значит в двойке два предложения от А и Б, поэтому он должен кому-то отказать.
[20:52.040 --> 20:58.040]  Могло быть такое, не обязательно алгоритм пройдет всех элементов,
[20:58.040 --> 21:00.040]  но может в принципе, во-первых, он может пройти только...
[21:00.040 --> 21:05.040]  Ну может быть такое, что алгоритм сразу закончится, ну то есть не сразу закончится,
[21:05.040 --> 21:11.040]  вот там например двойка выбирал между А и Б, а у Бб отказывал там.
[21:11.040 --> 21:14.040]  Ну то есть, то могло быть такое, что все закончат на втором шаге,
[21:14.040 --> 21:18.040]  потому что если бы здесь осталась единичка, то Бб производит единички и мы принялись А и Б.
[21:18.040 --> 21:27.040]  Могло быть такое, что у А будет несколько отказов, потому что может быть там возникут дальше конфликты, то есть это не обязательно будет второй столбец.
[21:27.040 --> 21:37.040]  Может быть какой-то сдвиг произойти, неприятно какой. Но я утверждаю еще раз, то есть алгоритм у вас такой, он довольно хитрый.
[21:37.040 --> 21:45.040]  В чем хитрость? В том, что нужно делать все отказы. То есть мы здесь сделали только искусственный отказ, чтобы найти все следователи.
[21:45.040 --> 21:51.040]  Мы взяли алгоритм, мы на самом деле берем вот этот элемент изначально и ищем все следующие.
[21:51.040 --> 21:54.040]  В данном случае у нас только один следующий, на самом деле их могло быть несколько.
[21:54.040 --> 22:04.040]  А как они ищутся? Если бы сделали А искусственный отказ, и у вас получилось так, что вы переехали на следующий случай просочетания,
[22:04.040 --> 22:06.040]  у кого-то что-то поменялось, у кого-то осталось неизменным.
[22:06.040 --> 22:12.040]  Вот те, у кого осталось неизменным, им тоже нужно сделать отдельный искусственный отказ, потому что у них мог быть следующий элемент другой.
[22:12.040 --> 22:20.040]  Ну там понятно, да? Могло такое произойти, что вы...
[22:20.040 --> 22:40.040]  То есть может быть такое, что вы условно...
[22:40.040 --> 22:44.040]  Если у вас какая-то такая структура...
[22:44.040 --> 22:51.040]  Ну я же смогу полезть в пример и найти пример, когда нам на четырех элементах может быть десять оточек просочетания, я могу полезть и его найти.
[22:51.040 --> 22:56.040]  Но если у вас, грубо говоря, такая структура, у вас получится, что если вы делаете отказ А, и он встречает на двойку,
[22:56.040 --> 23:01.040]  и двойка отказывает в А, и он встречает на единичку, то у вас получился новый просочетание.
[23:01.040 --> 23:10.040]  А также можно вернуть обратно, откатить, и вам нужно еще сделать...
[23:10.040 --> 23:15.040]  Вот здесь искусственный отказ и здесь искусственный отказ. У вас может получиться вот такое просочетание.
[23:15.040 --> 23:19.040]  То есть вам нужно для каждого элемента сделать искусственный отказ.
[23:19.040 --> 23:25.040]  Но только если вы уже этот элемент вычислили, то для этого отказ делать не нужно, надо делать только для тех, которые здесь не покрыты.
[23:25.040 --> 23:37.040]  Это вот алгоритм. У 1.2.3.4 должны быть соответствующие порядки типа вот такого.
[23:37.040 --> 23:49.040]  CD, DC, BA, AB, и соответственно AB, BA, DC, CD.
[23:49.040 --> 23:57.040]  Вот если у вас такой порядок, то у вас может съехать, то есть у вас меньшее исходное просочетание, есть два, такое, вот такое, вот такое.
[23:57.040 --> 24:01.040]  То есть у вас картинка такая, у вас есть следующих элементов два.
[24:01.040 --> 24:06.040]  Один получается с двигом на вот этим изменениям, другой вот этим изменением.
[24:06.040 --> 24:11.040]  Поэтому нужно все элементы перебирать, чтобы у каждого был хотя бы искусственный отказ.
[24:11.040 --> 24:18.040]  И утверждение такое, что если у вас какие-то есть меньше, то мы перейдем к следующему исходному просочетанию.
[24:18.040 --> 24:23.040]  А дальше нужно делать то же самое, провалить искусственный отказ, но уже к этим новым элементам полученным.
[24:23.040 --> 24:27.040]  То есть дальше мы говорим, ну окей, мы получили новое пространение, давайте еще один искусственный отказ сделаем.
[24:27.040 --> 24:31.040]  Ну перейдем вот сюда, потом еще один искусственный отказ делаем, ну перейдем еще куда-то.
[24:31.040 --> 24:37.040]  Итак, пока мы не дойдем в каждой цепочке до наихудшего с точки зрения m.
[24:41.040 --> 24:43.040]  Понятно описание алгоритма?
[24:43.040 --> 24:45.040]  Какая у него сложность?
[24:49.040 --> 25:04.040]  Ну смотрите, тут все проще, потому что вы пишете одну строчку преобразований, но у вас всего...
[25:13.040 --> 25:17.040]  Вообще говоря, в этой табличке у вас как в квадрате элементов.
[25:19.040 --> 25:29.040]  Поэтому вы за одну цепочку, если вы будете делать искусственный отказ все время с первым элементом,
[25:29.040 --> 25:39.040]  то у вас за каждый искусственный отказ вы будете сдвигаться, то есть у вас всего не больше, чем в квадрате преобразований будет.
[25:39.040 --> 25:47.040]  То есть у вас всего не больше, чем в квадрате отказов будет, и здесь в квадрате отказов вы дойдете от первого до последнего по вот этой цепочке.
[25:47.040 --> 25:56.040]  Но проблема в том, что вам нужно это сделать для каждого иска элементов, то есть это будет кавкубе операция,
[25:56.040 --> 25:58.040]  ну я так грубо скажу, да?
[26:02.040 --> 26:08.040]  То есть у вас за каждый отказ вы вычеркиваете тут один из элементов.
[26:10.040 --> 26:17.040]  То есть вам нужно проверить кавкубе операции отказов, для каждых этих элементов, потом сделать граф.
[26:17.040 --> 26:20.040]  Поэтому примерно будет такое порядок операции.
[26:21.040 --> 26:25.040]  Там нужно проверять, поэтому я так это примерно.
[26:25.040 --> 26:32.040]  Это количество способов перевратить, дальше нужно проверять что-то по сочетанию, дальше нужно посмотреть, как они относятся,
[26:32.040 --> 26:36.040]  то есть это какие-то добытные операции, ну вот примерно такого порядка.
[26:42.040 --> 26:44.040]  Вопросы?
[26:45.040 --> 26:48.040]  Ну я надеюсь, что на семинаре вы потренируетесь.
[26:48.040 --> 26:50.040]  Так, прерыв нужен или нет?
[26:52.040 --> 26:53.040]  Нет.
[26:53.040 --> 26:58.040]  Вот, и еще я хотел рассказать про похожую задачу, которая...
[27:00.040 --> 27:01.040]  Да.
[27:14.040 --> 27:15.040]  Да.
[27:18.040 --> 27:25.040]  Нет, можем, я имею ввиду, что на самом деле, если мы знаем, что у нас будет Schottke, это нам помогает, потому что у нас шутка про Schottke.
[27:25.040 --> 27:29.040]  У каждых двух элементов мы знаем, что их минимум и максимум тоже будут устойчивы про сочетания.
[27:31.040 --> 27:40.040]  Еще раз, вот это отражение, это про то, что если у нас есть два сочетания с один и с два, то можно взять максимум с точки зрения м от с один с два.
[27:40.040 --> 27:43.480]  Вы можете взять минимум с точки зрения m-b, это 1 из 2 molde-².
[27:43.480 --> 27:44.840]  И это будет тоже усто ocupу просос Да Chelect géton.
[27:44.840 --> 27:46.780]  То есть мы в каждой паре выбираем максимум с точки зрения
[27:47.320 --> 27:52.080]  М и минимум с точки зрения м, и это будет тоже устойчивого видососос heavier.
[27:52.080 --> 27:56.560]  Поэтому на самом деле, тут вот вместо того чтобы этот בש, можете если вы сразу другов naught то sushi.
[27:57.720 --> 28:00.680]  Ну вот максимум это этот элемент то минимум это быть какой-то другой элемент.
[28:00.960 --> 28:07.800]  Просто у каждого берете худшую пару, это будет еще acres, до 폭и и между ними manufact enquanto тех них не будет pet.
[28:07.800 --> 28:20.800]  Наверное, тут можно показать, что если эти элементы соседние, то здесь не будет промежуточных, но это, конечно, надо проверять.
[28:20.800 --> 28:30.800]  Говорим, как же изначально, если только два уста еще в подсочетании, это самая лучшая, а максимум из них это самая лучшая?
[28:30.800 --> 28:32.800]  Да, а минимум самая худшая.
[28:32.800 --> 28:37.800]  И как мы дальше начинаем сравнивать с другими, которые, оказывается, между ними?
[28:51.800 --> 28:55.800]  Да.
[28:58.800 --> 29:03.800]  А как мы сравниваем элементы, которые, оказывается, между этими самыми лучшими?
[29:11.800 --> 29:15.800]  Но если, например, одному стало чуть лучше, а другому чуть хуже.
[29:21.800 --> 29:29.800]  Ну как, смотрите, мы сделали шаг, у нас для всех элементов m не улучшилось.
[29:29.800 --> 29:30.800]  И тут для всех элементов не улучшилось.
[29:30.800 --> 29:33.800]  Значит, эти штуки между тобой не сравнимы, потому что кому-то лучше, кому-то хуже.
[29:33.800 --> 29:37.800]  Поэтому у нас тут так, тут так, эти элементы не сравнимы.
[29:40.800 --> 29:45.800]  Не-не-не, конечно, у вас элементы, вот я привел пример, когда вас не сравнимы, вы тут делали лучший,
[29:45.800 --> 29:50.800]  тут можно делать 2-1-3-4 и можно делать 1-2-4-3, все эти штуки не сравнимы.
[29:50.800 --> 29:53.800]  Поэтому, конечно, может быть, вот такие картинки тоже возникать.
[29:53.800 --> 29:58.800]  Это не обязательно цепь, это может быть любая решетка, вот такая тоже подойдет.
[29:58.800 --> 30:01.800]  Так, хорошо.
[30:01.800 --> 30:05.800]  Похожая задача, это задача про соседнее общежитие.
[30:05.800 --> 30:08.800]  Ну вы спросите, почему у нас множество два, а не одно.
[30:08.800 --> 30:16.800]  Может быть, нам логичнее, когда у вас есть одно множество, которое хочет само по себе разбиться на пары.
[30:33.800 --> 30:35.800]  То есть у вас теперь одно множество М.
[30:35.800 --> 30:40.800]  Ну, если мы хотим разбить на пары, то, конечно, логично предлагать что-то на черное количество людей.
[30:42.800 --> 30:50.800]  И у каждого из этих элементов есть предпочтение на множество остальных.
[30:50.800 --> 30:59.800]  То есть любого М из М задан линейный порядок на множестве М без М.
[30:59.800 --> 31:07.800]  И аналогично можно определить, ну, это вот линейный порядок, полный линейный порядок.
[31:07.800 --> 31:11.800]  Линейный порядок.
[31:11.800 --> 31:16.800]  Ну, можно там, конечно, считать, что он там кистичный, это уже там вообще не какие-то.
[31:16.800 --> 31:18.800]  И мы хотим найти устойчивые просточетания.
[31:18.800 --> 31:21.800]  То есть такие просточетания, что не найдется пары, которые будут угрозой.
[31:21.800 --> 31:25.800]  Угроза, то, что так же определяется, какая-то пара является угрозой,
[31:25.800 --> 31:31.800]  если ее для каждого этой паре партнеры лучше текущего.
[31:55.800 --> 32:19.800]  Ну, тут неожиданный результат заключается в том, что устойчивое просточетание может не быть.
[32:19.800 --> 32:23.800]  Ну, для двух человек там особо вариантов нет.
[32:23.800 --> 32:25.800]  У вас все проще не будут устойчивыми.
[32:25.800 --> 32:32.800]  Но вот уже для четырех, если у вас двойная равна 4, то можно придумать порядки.
[32:32.800 --> 32:38.800]  То есть мы берем, вот у нас есть А, Б, С, И, Д, ну или 1, 2, 3, 4.
[32:38.800 --> 32:41.800]  Не важно, давайте 1, 2, 3, 4.
[32:41.800 --> 32:45.800]  Вот мы можем придумать такие здесь порядки.
[32:45.800 --> 32:47.800]  У нас всего есть, возможно, три пары.
[32:47.800 --> 32:50.800]  То есть может быть пара просточетания 1, 2, 3, 4.
[32:50.800 --> 32:52.800]  Может быть 1, 3, 2, 4.
[32:52.800 --> 32:55.800]  Может быть 1, 4, 2, 3.
[32:55.800 --> 32:59.800]  И вот все три у нас будут неустойчивыми.
[32:59.800 --> 33:02.800]  То есть у нас в каждом из них будет угроза.
[33:02.800 --> 33:06.800]  Оказывается, что можно придумать такие вот такие порядки,
[33:06.800 --> 33:10.800]  что ни одно из них не будет устойчивым.
[33:10.800 --> 33:16.800]  Ну, можно там две минуты подумать, пока я стараюсь доски.
[33:16.800 --> 33:18.800]  Может быть они придумают.
[33:19.800 --> 33:22.800]  Может быть тревогу сделать лучше.
[33:39.800 --> 33:42.800]  Это все возможное разбивание на пары.
[33:42.800 --> 33:44.800]  То есть у нас просточетания устойчивые.
[33:44.800 --> 33:45.800]  Либо такой, либо такой, либо такой.
[33:45.800 --> 33:46.800]  У нас все три разбивания на пары.
[33:46.800 --> 33:48.800]  Других не бывает.
[33:48.800 --> 33:50.800]  Другом их не может убить на пары.
[33:53.800 --> 33:57.800]  Я вот уже, что можно придумать такой порядок,
[33:57.800 --> 34:05.800]  что у нас в каждом случае будет угроза.
[34:05.800 --> 34:09.800]  То есть у нас никакая пара не бывает.
[34:09.800 --> 34:14.800]  Никакое из этих просточетаний не будет устойчивым.
[34:14.800 --> 34:17.800]  Понятно, что у вас быть в паре лучше, чем быть без пары.
[34:17.800 --> 34:20.800]  Поэтому у вас всегда все будут пары.
[34:33.800 --> 34:35.800]  Вы хотите вот такое что-то сделать?
[34:35.800 --> 34:46.800]  Но у вас, скорее всего, просточетания 1-3-2-4, я боюсь.
[34:46.800 --> 34:51.800]  Что?
[34:51.800 --> 34:57.800]  Нет, пара 1-3 и пара 2-4.
[34:57.800 --> 35:00.800]  Если возьмите такую пару, то...
[35:05.800 --> 35:15.800]  То у вас для 4-1 лучший, для 3-4 лучший, для 2-3 лучший, для 1-2 лучший.
[35:15.800 --> 35:17.800]  Поэтому никакой из этих пар не будет угрозы.
[35:17.800 --> 35:19.800]  Потому что в каждой паре...
[35:19.800 --> 35:23.800]  Сейчас, наоборот.
[35:23.800 --> 35:28.800]  Наоборот, у 1-4 худший, поэтому 3-4 лучший.
[35:28.800 --> 35:32.800]  У 3-2 лучший, у 4-3 лучший.
[35:32.800 --> 35:37.800]  Ну понятно, в каждой паре какой-то из них лучше для другого.
[35:37.800 --> 35:40.800]  Поэтому никаких угроз не будет.
[35:40.800 --> 35:42.800]  А они сейчас в серединке находятся.
[35:42.800 --> 35:44.800]  Поэтому вот такой не подойдет.
[35:44.800 --> 35:49.800]  Давайте поменяем вот эти 3-4 резьбицы местами.
[35:49.800 --> 35:53.800]  Ну давайте я сейчас напишу естественный пример.
[35:53.800 --> 35:57.800]  Да.
[35:57.800 --> 36:02.800]  Да.
[36:02.800 --> 36:06.800]  Ну смотрите, берем 1-2-3-4.
[36:06.800 --> 36:14.800]  Сейчас, давайте посмотрим.
[36:14.800 --> 36:18.800]  Да, 2-4 хотят быть друг с руком.
[36:18.800 --> 36:22.800]  А, соответственно, здесь у нас 1-4-2-3.
[36:22.800 --> 36:26.800]  У вас у единицы будет хуже пара, да, и у тройки хуже пара.
[36:26.800 --> 36:28.800]  Поэтому у нас будет 1-3.
[36:28.800 --> 36:30.800]  А вот здесь, как раз, все взвешено.
[36:30.800 --> 36:32.800]  Ну, правильный пример такой.
[36:32.800 --> 36:34.800]  Нужно взять Пакантарсе.
[36:34.800 --> 36:36.800]  Смотрите, мы возьмем тут.
[36:36.800 --> 36:38.800]  Значит, у вас идея такая.
[36:38.800 --> 36:42.800]  У вас один элемент, он неудачник, он хуже всех.
[36:42.800 --> 36:44.800]  А для всех остальных...
[36:44.800 --> 36:47.800]  То есть мы у 1-го, 2-го, 3-го ставим с рук на последнее место.
[36:47.800 --> 36:49.800]  У этих порядок делаем по циклу.
[36:49.800 --> 36:51.800]  А 4-ки пишут на самом деле все что угодно.
[36:51.800 --> 37:00.800]  Тогда у вас каждый, кто с 4-кой, он может предложить кому-то быть в паре.
[37:00.800 --> 37:04.800]  То есть у вас 1-2-3-4.
[37:04.800 --> 37:05.800]  У вас что происходит?
[37:05.800 --> 37:06.800]  3-й, 4-й.
[37:06.800 --> 37:07.800]  Мне не нравится быть 4-кой.
[37:07.800 --> 37:09.800]  Он выберет тот, у кого он 1-й, 2-й.
[37:09.800 --> 37:10.800]  А у 2-й он 1-й.
[37:10.800 --> 37:12.800]  То есть пара 3-2.
[37:12.800 --> 37:16.800]  У нас будет угроза, потому что кем угодно хочет быть на 4-ке.
[37:16.800 --> 37:18.800]  А у 2-й, 3-й на первом месте.
[37:18.800 --> 37:20.800]  Ну и аналогично с остальными парами.
[37:20.800 --> 37:23.800]  То есть у 2-й на первом месте у 1-й.
[37:23.800 --> 37:28.800]  А, соответственно, у 1-й на первом месте у 3-й.
[37:28.800 --> 37:30.800]  Поэтому я написал все три пары.
[37:30.800 --> 37:32.800]  У каждого из них будет угроза.
[37:32.800 --> 37:34.800]  4-ка ничего повлиять не может.
[37:34.800 --> 37:36.800]  Он на последнем месте.
[37:36.800 --> 37:38.800]  А каждый будет пытаться убедить...
[37:38.800 --> 37:42.800]  У кого-то из них он на первом месте, и он ему предложит.
[37:42.800 --> 37:44.800]  И поэтому это угроза.
[37:44.800 --> 37:47.800]  Поэтому проблема в том, что устойчивых просчитаний быть не может.
[37:47.800 --> 37:49.800]  Собственно, если вы...
[37:49.800 --> 37:56.800]  Алгоритм Гирошепкин был открыт в втором году в поиске устойчивых просчитаний.
[37:56.800 --> 37:58.800]  А вот алгоритм для поиска устойчивых просчитаний тут.
[37:58.800 --> 38:00.800]  Это статья 85-го года.
[38:00.800 --> 38:08.800]  То есть потребовалось 20 лет, чтобы найти хоть какой-то алгоритм, который позволит...
[38:08.800 --> 38:13.800]  Алгоритм, который здесь работает, он либо показывает, что устойчивых просчитаний нет,
[38:13.800 --> 38:15.800]  либо находит устойчивые просочетания.
[38:15.800 --> 38:18.800]  Это уже не говоря о том, что нужно все устойчивые просчитания найти.
[38:18.800 --> 38:22.800]  Одно устойчивое просчитание потребовалось довольно...
[38:22.800 --> 38:27.800]  Большое время прошло, чтобы алгоритм не тривиальный.
[38:27.800 --> 38:31.800]  Но давайте попробуем объяснить, как он работает.
[38:31.800 --> 38:36.800]  Примерный ход доказательств, наверное, будет ясен.
[38:36.800 --> 38:46.800]  А детали, опять же, можно на семинаре попробовать его применить к какому-то упорядочиванию.
[38:46.800 --> 38:50.800]  И обсудить, если останется время, какие детали доказательств.
[38:50.800 --> 38:52.800]  Наверное, алгоритм...
[38:52.800 --> 38:57.800]  Значит, статья Ирвинга, но поэтому я выписываю, что это алгоритм Ирвинга.
[38:57.800 --> 38:59.800]  Хотя мне кажется, что...
[38:59.800 --> 39:01.800]  То есть я не знаю, как на амбитатуре объясняется.
[39:01.800 --> 39:05.800]  То есть это статья Ирвинга 85-го года, если я не ошибаюсь.
[39:05.800 --> 39:07.800]  Он состоит из двух шагов.
[39:07.800 --> 39:10.800]  Первый шаг – это алгоритм Гела-Шепли.
[39:10.800 --> 39:12.800]  Значит, первые два этапа.
[39:12.800 --> 39:20.800]  Этап 1 – это алгоритм Гела-Шепли.
[39:20.800 --> 39:24.800]  Ну, алгоритм Гела-Шепли мы применяем одновременно,
[39:24.800 --> 39:30.800]  считая, что у вас люди и пишут письма, и их принимают.
[39:30.800 --> 39:34.800]  То есть вы...
[39:34.800 --> 39:43.800]  То есть каждый из элементов m пишет письмо наилучшему,
[39:43.800 --> 39:47.800]  и потом каждый элемент m из всех писем, которые он получил,
[39:47.800 --> 39:50.800]  пишет отказы всем, кроме самого лучшего.
[39:50.800 --> 40:07.800]  Значит, каждый m делает предложение лучшему из тех, кто не отказал.
[40:07.800 --> 40:27.800]  И, опять же, каждый элемент m из m отказывает всем, кроме самого лучшего предложения.
[40:27.800 --> 40:54.800]  Пишет отказ всем, кроме наилучшего предложения.
[40:54.800 --> 40:57.800]  Сейчас я полезу в компьютер, чтобы привести пример,
[40:57.800 --> 41:01.800]  потому что я назвать пример не помню.
[41:01.800 --> 41:08.800]  Ну, какие у нас могут быть итоги вот этого действия этого алгоритма?
[41:08.800 --> 41:11.800]  Либо у вас может быть такое.
[41:11.800 --> 41:15.800]  У вас может быть такое, что у кого-то m закончился список.
[41:24.800 --> 41:34.800]  То есть он делал предложение всем в списке и получил отказы.
[41:34.800 --> 41:49.800]  Тогда мы говорим, что все, у нас устойчивого протосочетания нет.
[41:49.800 --> 41:55.800]  Например, вот как раз в примере, который мы привели,
[41:55.800 --> 42:02.800]  тут будет все плохо, потому что у вас все пишут предложения на наилучшем списке.
[42:02.800 --> 42:08.800]  Дальше, первый получил предложение от третьего к четвертому, он пишет отказ к четвертому.
[42:08.800 --> 42:15.800]  Второй пишет к второму, второй получает предложение от первого и четвертого, отказывает к четвертому.
[42:15.800 --> 42:23.800]  И потом пишет к третьему, третий получает предложение от первого и четвертого, отказывает к третьему, четвертому.
[42:23.800 --> 42:27.800]  Все сказали, поэтому устойчивого протосочетания нет.
[42:27.800 --> 42:36.800]  Ну, если ни у кого не закончился список и все закончилось, значит у каждого есть ровно одно предложение.
[42:45.800 --> 42:51.800]  Тогда мы переходим к этапу два.
[42:51.800 --> 42:54.800]  Это еще не гарантирует нам, что у нас обязательно есть устойчивое протосочетание.
[42:54.800 --> 43:01.800]  То есть у нас получилась какая-то перестановка игроков, а именно там A делал предложение B, B сделал C, C сделал D и так далее.
[43:01.800 --> 43:06.800]  Они там, конечно, разбиваются на циклы, но в общем какая-то получилась какая-то структура.
[43:06.800 --> 43:12.800]  Возможно еще, что там все еще есть устойчивое протосочетание, но нужно делать еще дополнительный этап.
[43:12.800 --> 43:20.800]  Ну, если у нас был пример, который вы привели с технической перестановкой.
[43:20.800 --> 43:25.800]  Давайте я его тоже на всякий случай напишу.
[43:25.800 --> 43:29.800]  У нас бы тут закончилось все на первом этапе.
[43:29.800 --> 43:32.800]  Потому что первый делал предложение второму, второй, третим, третий, четвертый, четвертый, первому.
[43:32.800 --> 43:37.800]  Да, и мы знаем, что устойчивое протосочетание дальше мы его еще не нашли.
[43:37.800 --> 43:46.800]  Но какие-то пары у нас, какая-то перестановка смирновалась, возможно это еще не устойчивое протосочетание.
[43:46.800 --> 43:50.800]  Ну, в смысле, из него устойчивое протосочетание никак не выделяется.
[43:50.800 --> 44:07.800]  Этап, ну, давай сначала сделаю этап 2, потом я применю для второго протосочетания.
[44:07.800 --> 44:15.800]  Потом, наверное, напишу еще какой-нибудь пример, чуть более сложный, чем 4 игрока, чтобы было понятно, что происходит.
[44:15.800 --> 44:20.800]  Этап 2.
[44:20.800 --> 44:24.800]  Он похож на то, что у нас было до этого.
[44:24.800 --> 44:35.800]  То есть, я только что обсуждали, что можно делать искусственно отказ и попытаться перейти к следующему устойчивому протосочетанию.
[44:35.800 --> 44:37.800]  Вот здесь примерно та же идея.
[44:37.800 --> 44:44.800]  Если у нас не получилось... То есть, если получилось устойчивое протосочетание, то уже все хорошо, то то есть...
[44:44.800 --> 44:51.800]  Ну да, я это не написал. Если это устойчивое протосочетание, то уже все хорошо, то ничего не надо делать.
[44:51.800 --> 44:56.800]  Если не устойчивое протосочетание, то, они разбились на пары, то все хорошо.
[44:56.800 --> 45:01.800]  Если разбились на пары, то нужно мучиться и перейти к этапу 2.
[45:01.800 --> 45:09.880]  мы делаем, на самом деле, опять же искусственный отказ, то есть мы говорим,
[45:09.880 --> 45:19.560]  окей, вот у нас тут получилась какая-то пересновка, давайте мы возьмем, например, у первого и сделаем
[45:19.560 --> 45:27.080]  искусственный отказ и посмотрим, что при этом произойдет. Ну, давайте я сейчас напишу,
[45:27.080 --> 45:47.480]  давайте напишу более подробно. Значит, подготовка. Прежде чем мы начнем, нам надо
[45:47.480 --> 45:54.440]  продлить списки. Дело в том, что, ну, если вы так подумаете, то, наверное, понятно, что если у вас
[45:54.440 --> 46:03.520]  аналогично тому, что мы доказывали для mwv, если вы получили отказ на первом этапе, это значит,
[46:03.520 --> 46:11.920]  что вы ни в каком устойчивом просочетании эта пара встречаться не будет. И если мы закончили
[46:11.920 --> 46:22.920]  этап 1, то вот в этот момент у нас у первого, у первого игрока fmerf в его паре, это наилучший
[46:22.920 --> 46:37.000]  вариант, который у него есть, а на последнем месте у него хуже, чем тот, кто сделал предложение,
[46:37.000 --> 46:41.080]  у него быть не может. Поэтому мы, на самом деле, просто удалим всех лишних из списка, а именно мы
[46:41.080 --> 46:46.360]  вычеркнем всех тех, кто лучше самого первого. Ну, и так уже вычеркнули, когда мы делали этот алгоритм,
[46:46.360 --> 46:58.600]  но мы сделаем так, чтобы списки были одинаковыми и просто вычеркнем все лишнее. А именно у каждого m
[46:58.600 --> 47:21.400]  вычеркнем пары, то есть в чем вычеркиваем? Мы вычеркиваем пары m с волной и, то есть мы вычеркиваем,
[47:21.400 --> 47:42.520]  давайте я скажу, m с волной у m и m у m с волной, если m с волной лучше текущей пары m. Вот что такое
[47:42.520 --> 47:51.880]  нужно сделать. То есть берем пары m с волной, берем всех, кто лучше, чем единичка, и всех учеркиваем.
[47:51.880 --> 48:20.120]  Ну и то же самое делаем, или m с волной хуже, чем тот, кому я сделал предложение,
[48:20.200 --> 48:35.680]  кто сделал предложение m. То есть мы, говоря о первом, удаляем всех, кто стоит тут и всех,
[48:35.680 --> 48:42.000]  кто стоит тут. И так делаем и вычеркиваем также оставшиеся пары. То есть у нас получается такая
[48:42.000 --> 48:53.680]  картинка, где у меня, значит у A1 есть, вот A1 сделал предложение B1, дальше здесь какое-то
[48:53.680 --> 49:02.280]  Бакате, и у Бакатова Баката сделал предложение A1. Вот картинка примерно вот такая. Ну тут какие-то
[49:02.280 --> 49:20.360]  другие элементы. Давайте попробуем сделать искусственный отказ. Смотрите,
[49:20.360 --> 49:36.680]  то есть, вот смотрите, A1, допустим он отказывает B1 и делает предложение в следующем своем списке.
[49:36.680 --> 49:51.800]  У B2, допустим, вот мы берем B2 и находим ему, у кого есть предложение от B2, да обозначим его A2.
[49:51.800 --> 49:59.240]  Тогда у B2 есть два предложения, теперь у A1-A2, но при этом мы знаем, что у B2-A2 последние списки,
[49:59.240 --> 50:06.920]  поэтому 11-й списке точно повыше. Поэтому B2 совершенно точно гарантированно откажет A2,
[50:06.920 --> 50:15.080]  если согласится с A1. Дальше посмотрим, ну давайте я тут переобозначу все и скажу, что там B3,
[50:15.080 --> 50:25.080]  это следующие списки A2 после B2. У B3, ну давайте напишу тут отдельную картинку, значит у B2 A2
[50:25.080 --> 50:33.800]  стоит на последнем месте, и значит A1 будет где-то повыше. У B3 стоит A2, если тот,
[50:33.800 --> 50:42.080]  кто сделал предложение, тот, у кого письмо от B3, это A3, то есть тот, кто сделал предложение,
[50:42.080 --> 50:55.800]  то есть если B3 сделал предложение от A3, значит у B3 A3 на последнем месте, и значит A2 стоит где-то
[50:55.800 --> 51:10.560]  повыше. Поэтому тут будет, то есть B3 точно откажет A3, и A3 сделает предложение B4. И вот мы так
[51:10.560 --> 51:16.840]  будем идти по списку, но рано или поздно у нас мы найдем цикл, у нас рано или поздно элементы
[51:16.840 --> 51:23.440]  повторятся, возможно они повторятся не обязательно на A1, то есть может быть цикл, который будет так
[51:23.440 --> 51:30.760]  идти, что мы бы один отказали, получили B2, у B2 отказ B3, у B3 отказ B4, а тут снова получится
[51:30.760 --> 51:43.760]  B3. Ну тогда мы найдем цикл, замкнем его и сделаем такой сдвиг. То есть алгоритм такой, выбираем
[51:43.760 --> 52:01.040]  произвольно, выбираем A1, значит если для любого M список из одного элемента, то нашли устойчивое
[52:01.040 --> 52:14.360]  просочетание. Если существует M, у которого список из больше либо он чем двух элементов, то мы делаем
[52:14.360 --> 52:35.560]  следующее, то делаем искусственный отказ вот этого M и дальше, как я говорю, ищем цикл. Вот такого
[52:35.560 --> 52:40.280]  вида. То есть он не обязательно стартует именно с этого элемента M, может оказаться, что он стартует
[52:40.280 --> 52:48.040]  с какого-то нового куска, но в общем он будет выглядеть примерно так. У A1 будет B1, B2, первые два
[52:48.040 --> 52:57.920]  элемента, у A2 будет B2 на первом месте, B3 на втором, у A3 будет B3 на первом месте, B4 на втором и так
[52:57.920 --> 53:19.280]  далее. И тут будет где-то AS, у которого стоит BS и B1. После чего мы сдвигаемся на цикл и опять
[53:19.280 --> 53:24.480]  переходим к этапу подготовки, то есть вырезаем все остальное так, чтобы у меня снова выполнялись
[53:24.480 --> 53:26.480]  условия про первые и последние элементы.
[53:54.480 --> 54:00.000]  Ну вот мы так делаем, делаем, делаем и дальше происходит следующее, либо у нас снова у кого-то
[54:00.000 --> 54:09.680]  заканчивается список. То есть у нас на каждом шаге есть у нас UAM список больше двух элементов,
[54:09.680 --> 54:25.720]  у нас список уменьшается, либо UAM закончится список, тогда просочетаний нет,
[54:25.720 --> 54:44.520]  либо останется, будет один возможный партнер, тогда мы нашли устойчивое просочетание.
[54:55.720 --> 55:09.480]  Ну давайте я приведу несколько примеров. Времени доказательств, конечно, не останется,
[55:09.840 --> 55:31.680]  какие-то общие слова сказать. У нас же нет решетки, потому что у нас нет пар. Как вы будете
[55:31.680 --> 55:48.960]  решетку строить? Как вы строите решетку?
[55:48.960 --> 56:14.000]  Ну так вот вы так и делаете. Ну это да, это точно же самое, просто здесь этот алгоритм,
[56:14.000 --> 56:19.280]  ну смотрите, здесь некоторые есть валютализм, потому что когда у вас есть список с двух больших
[56:19.280 --> 56:24.160]  элементов, вы можете любой из них выбирать. Ну вот вы же придете к разному с помощью просочетания,
[56:24.160 --> 56:28.240]  но это на самом деле, нет никакой гарантии, что это единственный случай просочетания,
[56:28.240 --> 56:32.280]  их может быть несколько, и как сказать все, это вообще непонятно, потому что мы пока что только
[56:32.280 --> 56:36.240]  гарантируем, что то, что мы получим, это с помощью просочетания, мы даже не гарантируем, что мы все
[56:36.240 --> 56:40.880]  найдем, потому что мы может походу делать что-то потеряле, может быть у него просто еще не дошли,
[56:40.880 --> 56:45.440]  может быть зависит от того, у кого есть свободы, мы можем любой такой выбирать,
[56:45.440 --> 56:52.880]  у кого список с двух больших элементов, можем промахнуться, и то, что мы все нашли,
[56:52.880 --> 57:06.000]  тут никакой гарантии нет. Ну давайте вот я сейчас приведу еще пример, давайте из статьи Иринга
[57:06.000 --> 57:18.280]  приду, наверное он будет подходящий, сейчас эти вместе почитаем, проверим что, так, 4,6,2,5,3,
[57:18.280 --> 57:32.880]  6,3,5,4,4,5,1,6,2,2,6,5,1,3,4,2,3,6,1,5,1,4,2,3,
[57:48.280 --> 57:59.280]  ну давайте я сейчас быстро проведу, я думаю, что можно на семинаре подробнее посчитать,
[57:59.280 --> 58:07.840]  значит у вас, вот можно проверить, что у вас так получится, после первого шага будет такой
[58:07.840 --> 58:26.720]  проявежный список, ну у вас все дойдет до, давайте сначала напишу, что какие отказы произойдут,
[58:26.720 --> 58:42.080]  значит у вас тут такой отказ будет, ну хотя, ладно, можно так посчитать, ну давайте, значит у
[58:42.080 --> 58:51.600]  вас 1 делает предложение, 1 и 5 делает предложение, 4 и 4 отказывают единички, дальше у 1-ки, 2-ки,
[58:51.600 --> 58:58.600]  предложение 6-ки, у 6-ки, а единица лучше, поэтому он отказывает 2-ки, дальше у вас 3-ка и 5-ка
[58:58.600 --> 59:05.480]  сделали предложение 4-ки, он отказывает 3-ки, 3-ка и 4-ка сделали предложение 5-ки, 5-ка отказывает
[59:05.480 --> 59:14.480]  6-ки, и все, вот у нас как бы закончилось, да, теперь мы продолжаем список, делаем то, что вот я
[59:14.480 --> 59:21.440]  там написал, значит если единица сделал предложение 6-ки, у 6-ки не может быть никого, кто лучше единицы,
[59:21.440 --> 59:31.040]  поэтому мы вот этих всех вычеркиваем дополнительно, значит мы вычеркиваем у 4-ки, 2-ки, 3-ки, 6-ку, дальше,
[59:31.040 --> 59:44.120]  да и 5-ки тоже, значит так, у 2-ки предложение у 3-ки, 3-ки, 2-ки последние, 2-ки, 6-ки мы вычеркнули,
[59:44.120 --> 59:50.720]  3-ка, значит здесь отказывается у 4-ки произошел, у 5-ки, 3-ки лучше только 1-ка, значит нужно единички
[59:50.720 --> 01:00:01.520]  вычеркнуть 5-ку, дальше у 5-ки, значит 5-ка сделал предложение 4-ки, на 4-ке 5-ка единичка,
[01:00:01.520 --> 01:00:14.400]  значит тут тоже единичка, вычеркнули уже, 4-ка сделал предложение 1-ки, поэтому мы должны вычеркнуть 2-ку и 3-ку отсюда,
[01:00:14.660 --> 01:00:28.600]  получается такие списки, у прорежанных 6, 3, 5, 4, 5, 2, 2, 5, 4, 2, 3, 1, значит у вас список должен быть выполнен следующим,
[01:00:28.600 --> 01:00:34.200]  если кто-то сделал предложение, то у него на последнем месте, например, 2-ка сделал предложение 3-ки,
[01:00:34.200 --> 01:00:38.800]  значит 2-ка на последнем месте, 4-ка сделал предложение 2-ки, значит 2-ки и 4-ка на последнем месте,
[01:00:38.800 --> 01:00:47.800]  Ну вот, у нас одна пара образовалась, осталось, а вот эти пары как-то разбились,
[01:00:47.800 --> 01:00:52.800]  у нас получился стамп-тыгл длины 4. Давайте пробуем сделать второй шаг.
[01:00:52.800 --> 01:00:59.800]  Мы выбираем любой элемент, у которого как минимум два, №2. Давайте я здесь напишу еще раз.
[01:00:59.800 --> 01:01:14.800]  И вместе с №4 мы уже не двигаем. Давайте попробуем провести искусственный отказ.
[01:01:14.800 --> 01:01:29.800]  Мы берем №2, учеркиваем №3. Вот это результат алгоритма работы Гейла Шепля.
[01:01:29.800 --> 01:01:40.800]  Потом я выполняю этап подготовка. Я говорю, что из выхода алгоритма Гейла Шепля мы докажем,
[01:01:40.800 --> 01:01:48.800]  что если у нас есть текущие предложения, то если №1 делал произведение №6, то значит,
[01:01:48.800 --> 01:01:53.800]  никакие лучшие точно не могут произвести про сочетание. А если №6 делал произведение №1,
[01:01:53.800 --> 01:01:59.800]  то №1 не может быть никакой пары, которая хуже, чем №6. То есть он им всем откажет,
[01:01:59.800 --> 01:02:02.800]  потому что если №6 делал произведение №1, значит это будет сочетание про сочетание.
[01:02:02.800 --> 01:02:06.800]  Поэтому эти все никакие высочные прочитания быть не могут. Поэтому в ходе подготовки мы вычеркиваем
[01:02:07.800 --> 01:02:12.800]  все пары, которые не могут быть в сообществе про сочетания. después чего список у нас становится меньше.
[01:02:12.800 --> 01:02:18.800]  То есть до №1 мы вычеркиваем все, которые лучше предложений были.
[01:02:18.800 --> 01:02:25.800]  А дальше смотрим, кто сделалriebп link №1 и учеркиваем все, которые меньше него.
[01:02:25.800 --> 01:02:30.800]  То есть если №3 делал פетерки, то №5 мы учеркиваем все, которые дальше в №3 стоят.
[01:02:30.800 --> 01:02:33.800]  То есть мы делаем так, чтобы выполнялось условие, а если №1 делал произведение №2,
[01:02:33.800 --> 01:02:39.240]  на последнем месте, потому что все худшие уже точно в паре быть не могут.
[01:02:39.800 --> 01:02:45.080]  Ну, давайте попробуем сделать цикл. Двойка сделает отказ тройки, у пятерки
[01:02:45.080 --> 01:02:53.800]  есть предложение от двойки тройки, но мы знаем уже, что он откажет тройки. Дальше
[01:02:53.800 --> 01:02:59.800]  тройка сделает предложение двойки, у пятерка двойка на первом месте, и двойка
[01:02:59.800 --> 01:03:11.840]  откажет четверки. После чего, значит, пятерка у нас начитала пятерки на первом
[01:03:11.840 --> 01:03:19.400]  месте, теперь он у... да, и вот мы получили, сейчас, начнем получили цикл, когда у вас
[01:03:19.400 --> 01:03:27.160]  вот этот вот, да, вот он получил цикл, что вы, то есть это можно оставить, у нас
[01:03:27.160 --> 01:03:30.760]  получил цикл, потому что здесь у этого это на втором месте, у этого это на втором
[01:03:30.760 --> 01:03:35.960]  месте, а вот этот элемент был лишним, можно его обратно написать.
[01:03:44.240 --> 01:03:50.240]  Все, тогда мы, соответственно, у этих элементов удаляем, у тройки оставляем
[01:03:50.240 --> 01:03:54.800]  двойку, у стройки пятерку, и прореживаем все остальное, это сделано так, чтобы они
[01:03:54.800 --> 01:03:59.520]  не соответствовали, а именно у двойки удаляем всех, кто после тройки, но у пятерки
[01:03:59.520 --> 01:04:03.920]  удаляем всех, кто после четверки. Ну, утверждается, что вот это просочетание будет устойчивым, то есть
[01:04:03.920 --> 01:04:12.040]  устойчивое просочетание это вот 1, 6, 2, 3, 4, 5. Утверждается, что эта штука будет устойчива.
[01:04:34.520 --> 01:04:40.200]  Тут, ну как, сложность, какие-то уже не нужно доказать, давайте сначала скажу,
[01:04:40.200 --> 01:04:44.800]  потом я еще приведу пример, когда вот здесь вот, например, ну так, то есть, если
[01:04:44.800 --> 01:04:48.680]  вас интересует, пример, когда вы здесь плохо, то есть, может быть, этап 1 закончится
[01:04:48.680 --> 01:04:52.960]  хорошо, а на этапе 2 все плохо. Сейчас я приведу пример, когда это работает.
[01:04:52.960 --> 01:04:57.160]  Ну, смотрите, что нужно доказать. Во-первых, кто-то или кто-то здесь говорил, что если у вас
[01:04:57.160 --> 01:05:00.880]  произошел отказ на первом этапе, то это точно не может быть сочетанием просочетаний, и если у вас кто-то
[01:05:00.880 --> 01:05:03.880]  был хуже предложения, тоже никогда ни в каком источнике сочетания встретиться не может.
[01:05:03.880 --> 01:05:13.000]  Это один утверждение. Ну и второе утверждение следует в том, что вот здесь, вот когда происходит двиг
[01:05:13.000 --> 01:05:23.040]  по циклу, что если было устойчивое просочетание, которое содержало, то есть, устойчивое просочетание,
[01:05:23.040 --> 01:05:27.360]  если оно было предсходно в списке, то в новом списке оно тоже будет с сочетанием просочетания,
[01:05:27.360 --> 01:05:33.360]  то есть если у вас эти пары входили в устойчивое просочетание, на самом деле,
[01:05:33.360 --> 01:05:38.480]  при сдвиге по циклу они тоже будут входить. Это вот отдельное утверждение, которое надо доказывать.
[01:05:38.480 --> 01:05:43.880]  Оно доказывается примерно минут за 10, но можно это сделать, но это там не очень сложно.
[01:05:43.880 --> 01:05:47.960]  То есть доказывается, что если у вас в исходном списке было сочетание просочетания, то после
[01:05:47.960 --> 01:05:53.520]  сокращенного тоже будет сочетание просочетания, значит вы много сочетаний не потеряли, поэтому рано или поздно вы его найдете.
[01:05:53.520 --> 01:06:07.040]  Это не угроза, мы применим алгоритм. Алгоритм применяется, если у кого-то списки больше чем один
[01:06:07.040 --> 01:06:13.480]  элемент, мы ищем цикл, мы ищем, как можно сделать искусство на отказ, чтобы получился цикл,
[01:06:13.480 --> 01:06:18.720]  то есть мы хотим найти вот такую картинку, когда у вас есть список здесь из элементов,
[01:06:18.720 --> 01:06:24.960]  у которых если мы сдвинем первое на второе, то произойдет сдвиг по циклу. Вот здесь именно так получилось,
[01:06:24.960 --> 01:06:29.800]  у тройки четверки я могу заменить два на два пять, и при этом они просто меняются местами.
[01:06:29.800 --> 01:06:39.440]  Поэтому я нашел такое, то есть тут а1, б1, б2, я сделал искусство на отказ в пятерке и получился в двойке,
[01:06:39.440 --> 01:06:43.600]  а здесь сделал искусство на отказ в двойке и получился в пятерке. Получился, что у меня список пар не
[01:06:43.600 --> 01:06:50.920]  поменялся, но при этом список уменьшился. Я утверждаю, что тогда можно просто оставить уменьшенный список,
[01:06:50.920 --> 01:06:55.200]  и если тут был устойчивый просочетание, то тоже будет устойчивый просочетание, а значит,
[01:06:55.200 --> 01:06:59.160]  я могу здесь уменьшать, пока не останется по одному элементу, и это будет устойчивый просочетание.
[01:06:59.160 --> 01:07:08.320]  В каком случае? У нас только один цикл мы нашли, его убили и сразу у нас список из одного элемента,
[01:07:08.320 --> 01:07:13.920]  остался, значит, у нас уже нашли устойчивый просочетание. Ну, конечно, могло быть такое, что мы...
[01:07:13.920 --> 01:07:22.720]  Потому что мы снова делаем подготовку, а именно после того, как мы это сделали,
[01:07:22.720 --> 01:07:27.040]  мы должны снова вычеркнуть, мы должны делать так, чтобы двойка-тройка была на последнем месте.
[01:07:27.040 --> 01:07:34.600]  То есть мы говорим, что если это устойчивый просочетание, то мы можем снова вычеркнуть эти элементы,
[01:07:34.600 --> 01:07:37.800]  потому что они в нашем просочетании выходить не могут. Это депоитное утверждение, которое тоже не
[01:07:37.800 --> 01:07:42.680]  доказалось вообще ни капельки. Ну давайте, я еще на всех случаи напишу пример, когда у вас все ломается
[01:07:42.680 --> 01:07:47.880]  на втором этапе. Так, ну опять же, можете проверить на семинарии, что действительно так работает. Ну это
[01:07:47.880 --> 01:07:55.880]  такой искусственный пример. Опять же, будет кондерсеток улучшенный. Ну как вы берете, например, берете...
[01:07:55.880 --> 01:08:02.040]  Вот это пример, когда этап один проходит, а этап два все ломается. Вот у вас берете 8 элементов и
[01:08:02.040 --> 01:08:11.080]  делаете тот самый пример, который у нас был, только по четверкам делаете. Вот, то есть у вас есть тут
[01:08:11.080 --> 01:08:25.360]  2, 3, 4, 3, 1, 4, 1, 2, 4. Тут 1, 2, 3 и тут все что угодно. А тут 6, 7, 8, 7, 5, 8, 5, 6, 8,
[01:08:25.360 --> 01:08:36.400]  7, все что угодно. После чего у вас, после первого этапа, у вас будут вот такие вот предложения у
[01:08:36.400 --> 01:08:42.640]  первых элементов, а у четверки и восьмерки они просто друг другом будут в паре. То есть у вас
[01:08:42.640 --> 01:08:49.240]  четверка будет в паре с восьмеркой, а восьмерка четверка, потому что все остальные, ну там, никто
[01:08:49.240 --> 01:08:55.720]  больше не согласится, потому что они будут... То есть у вас после первого этапа будет четверки,
[01:08:55.720 --> 01:09:01.120]  будет восьмерка, и дальше, если вы все вычеркнете лишние, у вас останется вот такие вот штуки.
[01:09:09.120 --> 01:09:15.680]  Ну и тут видно же, что никаких не разобьете, так что было совсем просто сочетание, потому что у вас 1, 2, 3 должны быть друг с другом.
[01:09:15.680 --> 01:09:23.160]  Если у вас хотя бы один из элементов будет, то есть если вы соедините кого-то из них 1, 2, 3 с каким-то
[01:09:23.160 --> 01:09:29.200]  5, 6, 7, то они найдут себе лучшую пару, потому что это будет угрозно обязательно. Ну и тут вы в втором этапе
[01:09:29.200 --> 01:09:36.960]  все сломается, потому что как только вы смените это, заменится вот это, и у вас при этом переходе
[01:09:36.960 --> 01:09:43.560]  все сократится и никаких парников не будет. Ну вот опять же, это для зрения в семинаре, можно проверить,
[01:09:43.560 --> 01:09:53.000]  что здесь вот, это пример, когда этап 1 хорошо, этап 1 работает, а на этапе 2 все ломается, то есть такое
[01:09:53.000 --> 01:09:57.200]  может быть, что у вас первый этап прошел, а второй этап показался, что все равно есть сочетание,
[01:09:57.200 --> 01:10:02.800]  потому что их правда нет. Так что то, что на первом этапе все прошло, это что не значит, что у вас есть
[01:10:02.800 --> 01:10:12.800]  сочетание, может быть такое, что это просто у вас не повезло. Ну вот. Так, ну наверное все на сегодня,
[01:10:13.120 --> 01:10:17.080]  на семинарах я надеюсь, что там разберется какие-то примеры, ну в следующий раз будет контрольная,
[01:10:17.080 --> 01:10:24.880]  ну она будет видимо на, я не знаю, можно ему занять время семинара, но на полтора часа точно,
[01:10:24.880 --> 01:10:31.200]  мне правда надо будет упекать, но если там семинарист готов прийти и посидеть с вами еще 20 минут,
[01:10:31.200 --> 01:10:33.800]  наверное это не страшно, но в общем придумаем что-нибудь, обсудим.
[01:10:33.800 --> 01:10:38.480]  Ну, обычный.
