[00:00.000 --> 00:18.000]  Так, ну хорошо, значит, на сегодняшней лекции, да, ну и еще на одной или двух следующих, мы будем говорить про логарифмическую память.
[00:30.000 --> 00:40.000]  Значит, сначала я расскажу немножко неформально, про что здесь идет речь и почему это важно.
[00:40.000 --> 00:54.000]  Ну, вообще память – это важный ресурс. Почему? Ну, значит, есть причина полувековой давности, что память просто очень дорогая.
[00:54.000 --> 01:02.000]  И в 70-х годах прошлого века, в общем, более-менее память была самой дорогой частью компьютера.
[01:02.000 --> 01:14.000]  И более-менее, если вы изготавливаете или покупаете компьютер, в котором в два раза больше памяти, то и стоить он будет не в два раза больше, но там на 90% больше.
[01:14.000 --> 01:26.000]  Поэтому это прям было важно с маленькой ограниченной памятью пытаться решать побольше задач.
[01:26.000 --> 01:38.000]  Но даже если память и не очень дорогая, то, тем не менее, как реальный компьютер устроен, там есть на самом деле несколько уровней памяти.
[01:38.000 --> 01:48.000]  Есть регистры процессора, к которым доступ более-менее мгновенный. Есть кэш, к которому доступ не мгновенный, но очень быстрый.
[01:48.000 --> 01:58.000]  Может быть несколько разных уровней кэш-памяти. Дальше бывает оперативная память, которая еще побольше, но к ней доступ еще медленнее.
[01:58.000 --> 02:12.000]  Дальше бывает жесткий диск, к которому доступ еще сильно медленнее. По старой технологии HDD, SSD побыстрее, но все равно не так быстро, как оперативная память.
[02:12.000 --> 02:22.000]  Ну и теоретически можно еще говорить про какое-нибудь хранилище на облаке, которому нужно через интернет подсоединяться, это еще дольше, чем внутри компьютера.
[02:22.000 --> 02:32.000]  И бывает даже такой крайняя степень, это какой-то архив вообще никуда не подключенный, например, на магнитном носителе.
[02:32.000 --> 02:44.000]  Хотя кажется, что всякие магнитные носители типа аудиокассеты, видеокассеты, это все осталось в XX веке.
[02:45.000 --> 03:03.000]  И восстаревшие технологии на самом деле это не совсем так. И технология на магнитном носителе тоже развивалась все эти годы, но просто она ушла из потребительского сектора в сектор хранилища, долговременного хранилища каких-то статичных данных.
[03:03.000 --> 03:16.000]  И реально магнитные носители с такими лентами используются, и, более того, там научились довольно плотно записывать информацию.
[03:16.000 --> 03:25.000]  Но проблема в том, что чтобы ее прочесть, нужно физически перематывать эту катушку, поэтому этот процесс не быстрый.
[03:25.000 --> 03:44.000]  Многие интернет-компании реально время от времени делают архив своей информации вот на таком магнитном носителе с целью, что если вдруг все сервера сразу сломаются, то потом с этого магнитного носителя можно будет восстановить.
[03:44.000 --> 03:57.000]  Все такие большие дата-центры устроены так, что там вся информация хранится в нескольких экземплярах, как минимум в двух, но даже скорее в трех.
[03:57.000 --> 04:04.000]  И там есть какая-то управляющая система, которая следит, чтобы это все никуда не потерялось.
[04:04.000 --> 04:18.000]  Если там какой-то блок поломался, то его там не чинят, а просто убирают, ставят новый, старый отдают в переработку, а дальше эта система следит, чтобы все было записано не один раз, а несколько.
[04:18.000 --> 04:29.000]  Но тем не менее, несмотря на это, время от времени делают слепки базы данных и записывают их на магнитный носитель.
[04:29.000 --> 04:41.000]  К чему это все? Каждый следующий уровень хранилища памяти больше по объему, но медленнее по доступу.
[04:41.000 --> 04:54.000]  Соответственно, если ваша программа использует слишком много памяти, то ей приходится обращаться к более медленному носителю, и получается, что память переносится прямо и на время тоже.
[04:55.000 --> 05:06.000]  Что если ваша программа эффективна по памяти, то есть ей не нужно, например, она целиком помещается в оперативной памяти, ей не нужно ничего записывать на жесткий диск, то она и работать будет быстрее.
[05:06.000 --> 05:15.000]  Если у вас та же самая задача решается с меньшим объемом памяти, то она может существенно быстрее работать.
[05:16.000 --> 05:28.000]  Даже хотя, допустим, число базовых операций может быть там будет такое же, но если эти базовые операции не связаны с доступом к медленной памяти, то все это будет быстрее.
[05:28.000 --> 05:35.000]  Ну а время это все-таки самое важное, чтобы задачи решались к сроку.
[05:35.000 --> 05:45.000]  Хорошо, почему нас интересует логарифмическая память, и что это вообще означает.
[05:45.000 --> 05:59.000]  Ну вообще здесь предполагается вот такая картина, что есть один блок памяти, это неизменяемый вход.
[05:59.000 --> 06:18.000]  Ну и хотя понятно, что для любой содержательной задачи нужно все-таки весь вход прочесть, тем не менее рабочая память, на которой реально какие-то вычисления совершаются, может гораздо меньше, чем вот этот неизменяемый вход.
[06:18.000 --> 06:30.000]  Ну и хотя понятно, что для любой содержательной задачи нужно все-таки весь вход прочесть, тем не менее рабочая память, на которой реально какие-то вычисления совершаются, может гораздо меньше, чем вот этот неизменяемый вход.
[06:30.000 --> 06:46.000]  И это тоже вполне себе практическая история, потому что, ну например, представьте такую задачу, у вас есть какой-то жесткий диск, и он заполнен информацией почти целиком.
[06:46.000 --> 06:52.000]  Или телефон там завит фотографиями, и свободного места совсем мало.
[06:52.000 --> 06:59.000]  Но, тем не менее, вам нужно совершить какую-то операцию, например, поиск по всему диску чего-нибудь.
[06:59.000 --> 07:07.000]  И, соответственно, конечно, если вы ищете информацию где-то, то вы не можете это изменять то, где вы ищете.
[07:07.000 --> 07:15.000]  Соответственно, вам нужно, чтобы ваша рабочая память, которую вы используете, была гораздо меньше, чем сам вход.
[07:15.000 --> 07:20.000]  У вас нет второго такого же диска, на который вы можете скопировать и там изменять все что угодно.
[07:20.000 --> 07:24.000]  Нужно каким-то образом хранить только небольшую часть.
[07:24.000 --> 07:31.000]  Но вот это вот вполне себе классическая история.
[07:31.000 --> 07:41.000]  Поэтому, когда говорят о количестве использованной памяти, то память, которая использована на вход, не учитывают.
[07:41.000 --> 08:07.000]  Учитывая только вот эту рабочую память, только она используется при подсчете занятой памяти.
[08:11.000 --> 08:16.000]  Вообще, в любой выщитной модели есть какие-то базовые ячейки.
[08:16.000 --> 08:23.000]  Например, в машине тюринга это может быть отдельная клетка, в которой может быть записано какой-то символ.
[08:23.000 --> 08:28.000]  Ну и, соответственно, число вот этих клеток является использованной памятью.
[08:28.000 --> 08:30.000]  Ну а что значит число клеток?
[08:30.000 --> 08:44.000]  Например, в случае машины тюринга можно считать, что это клетки, на которые в процессе вычисления хотя бы раз машина указывала.
[08:44.000 --> 08:49.000]  Вот на этой рабочей памяти.
[08:49.000 --> 09:02.000]  Ну и тогда вполне может быть и логарифмическая такая память.
[09:02.000 --> 09:04.000]  Но она совсем маленькая, она не может быть.
[09:04.000 --> 09:09.000]  Например, если она будет константной, то это фактически будет то, что называется конечный автомат.
[09:09.000 --> 09:13.000]  Не знаю, у вас не было такого понятия? Было, да?
[09:13.000 --> 09:18.000]  Ну вот конечный автомат это фактически компьютер с константной памятью.
[09:24.000 --> 09:31.000]  И даже там есть такая теорема, что если даже память не константна, но она что-то типа там у маленькой от повторного логарифма,
[09:31.000 --> 09:34.000]  тогда это все равно будет конечный автомат.
[09:34.000 --> 09:37.000]  Значит, это можно смоделировать.
[09:37.000 --> 09:41.000]  Но вот если это не повторный логарифм, а просто логарифм,
[09:41.000 --> 09:49.000]  тогда уже какие-то содержательные вещи, не решаемые конечной автоматами, можно вполне себе делать.
[09:49.000 --> 10:03.000]  Ну а вообще в целом тут есть классы dspace, dspace от s от n.
[10:03.000 --> 10:10.000]  Значит, это опять же языки, то есть задача с бинарным ответом.
[10:14.000 --> 10:31.000]  Значит, языки распознаваемые на памяти у большой от s от m.
[10:31.000 --> 10:36.000]  Букска d означает детерминированная машина чьюринга.
[10:36.000 --> 10:44.000]  Соответственно, есть nspace от s от n.
[10:44.000 --> 10:57.000]  Значит, это вот то же самое, только на недетерминированной машине.
[10:57.000 --> 11:15.000]  Дальше она работает в принципе так же, как мы обсуждали про недетерминированную машину по времени.
[11:15.000 --> 11:19.000]  То есть у нее такой ветвящийся процесс.
[11:19.000 --> 11:25.000]  И, соответственно, на каждой ветве должно быть у большой от s от n памяти дополнительный.
[11:25.000 --> 11:31.000]  И если на одной ветве ответ один, то общий ответ один, если на всех ветвях ответ ноль, то общий ответ ноль.
[11:31.000 --> 11:39.000]  Ну а дальше про какие бывают конкретные классы.
[11:39.000 --> 11:50.000]  Бывает класс l, который есть dspace от logarithm m.
[11:50.000 --> 12:04.000]  Есть nl, соответственно nspace от logarithm m.
[12:04.000 --> 12:20.000]  Есть pspace, значит dspace от полинома от n.
[12:20.000 --> 12:28.000]  Вот еще бывает nspace от полинома, но на самом деле то же самое, что pspace.
[12:28.000 --> 12:33.000]  Когда там бывают всякие другие, там expspace, например, экспоненциальная память.
[12:33.000 --> 12:39.000]  Бывает poly l, poly l, давайте я даже напишу.
[12:39.000 --> 12:55.000]  Значит, poly l, это dspace, соответственно, от, ну, от полилогарифма, то есть полином от логарифма.
[12:55.000 --> 13:00.000]  Некоторые задачи у вас здесь лежат.
[13:00.000 --> 13:08.000]  Ну и вот есть теория Мисцевича, я думаю, я не буду ее доказывать, но, по крайней мере, сейчас.
[13:08.000 --> 13:11.000]  Потом посмотрим, может быть, и докажу.
[13:11.000 --> 13:39.000]  Теория Мисцевича заключается в следующем, что nspace от s от n вложена в dspace от s от n в квадрате.
[13:39.000 --> 13:49.000]  То есть квадратично, значит, квадратично увеличивается память при детерминизации.
[13:49.000 --> 13:55.000]  Значит, если для детерминированного и недетерминированного времени у нас было экспоненциальное возрастание,
[13:55.000 --> 14:03.000]  то есть то, что недетерминированное делается за время t от n, делается детерминированно за время 2 в степени t от n,
[14:03.000 --> 14:08.000]  ну, по крайней мере, при тривиальном способе это сделать.
[14:08.000 --> 14:11.000]  Вот здесь у нас получается квадратичное.
[14:11.000 --> 14:22.000]  Ну, там формально-техническое условие, значит, это верно при s от n больше, чем в логарифме.
[14:22.000 --> 14:27.000]  Если совсем маленькая память, может быть, не совсем так.
[14:27.000 --> 14:33.000]  Ну, из стереомисцевича два следствия.
[14:33.000 --> 14:52.000]  Значит, следствие 1, что pspace равняется n pspace, то есть про полиномиальную память нет вопроса,
[14:52.000 --> 14:57.000]  о том, дает ли недетерминир что-нибудь дополнительное ответ, что не дает.
[14:57.000 --> 15:09.000]  Ну, а следствие 2, что nl вложено в поле l.
[15:09.000 --> 15:18.000]  То, что распознается недетерминированно на памяти логарифм, распознается недетерминированно на памяти логарифм в квадрате,
[15:18.000 --> 15:23.000]  то есть как раз в частном случае полинома.
[15:23.000 --> 15:29.000]  А вот вопрос, о том, равны ли l и nl, открыт.
[15:29.000 --> 15:34.000]  Открытый вопрос.
[15:34.000 --> 15:48.000]  Открытый вопрос, равны ли l и nl.
[15:48.000 --> 16:03.000]  Ну и он играет роль вопроса op и np применительно к вычислениям на ограниченной памяти.
[16:03.000 --> 16:11.000]  Соответственно, план такой. Немножко поговорим про класс l, на какие там задачи лежат.
[16:11.000 --> 16:15.000]  Поговорим про класс nl. Там есть своя теория nl-полноты.
[16:15.000 --> 16:23.000]  Ну и вот теория nl-полноты с одной стороны похожа на теорию np-полноты, с другой стороны немножко другая.
[16:23.000 --> 16:30.000]  Ну и вот она является важным инструментом для решения этого вопроса.
[16:30.000 --> 16:39.000]  То есть там всякие похожие теоремы, что если там nl-полная задача лежит в l, тогда l равно nl и так далее.
[16:39.000 --> 16:44.000]  Вот. Хорошо.
[16:44.000 --> 16:50.000]  Такая общая картина. А, дайте я еще общую картину.
[16:50.000 --> 17:02.000]  Про то, как связаны классы по времени и по памяти.
[17:02.000 --> 17:07.000]  Так. Ну, давайте так.
[17:07.000 --> 17:27.000]  Значит, D-space от S от n у нас вложено в N-space от S от n.
[17:27.000 --> 17:46.000]  Это вложено в D-time от 2 в степени S от n. Ну, от 2. Ну, тут у большое нужно, да.
[17:46.000 --> 17:59.000]  Вот. Это вложено в N-time от 2 в степени его большое от S от n.
[17:59.000 --> 18:05.000]  И это у нас вложено в D-space.
[18:05.000 --> 18:10.000]  Вот. Ну, того же самое.
[18:10.000 --> 18:24.000]  Вот. Значит, соответственно, как это принятно к конкретным классам работает.
[18:24.000 --> 18:29.000]  Ну, в частности, получается вот такой ряд.
[18:30.000 --> 18:35.000]  Значит, в частности, значит, у нас l вложено в nl.
[18:35.000 --> 18:47.000]  Значит, это вложено в P. Это вложено в N-P. Вот. А это вложено в P-space.
[18:47.000 --> 18:51.000]  Ну, а это у нас получается равно.
[18:51.000 --> 19:03.000]  Значит, равно N-P-space. А это вложено в EXP.
[19:03.000 --> 19:09.000]  Ну, а дальше это вложено в N-EXP. Ну, и так далее.
[19:09.000 --> 19:17.000]  Ну, давайте я еще EXP-space напишу.
[19:17.000 --> 19:20.000]  Вот. Тут получается три уровня.
[19:20.000 --> 19:25.000]  Первый уровень логарифмический, второй уровень полиномиальный, третий уровень экспоненциальный.
[19:25.000 --> 19:28.000]  Вот. Конечно, могут быть какие-то промежуточные.
[19:28.000 --> 19:34.000]  Там какой-нибудь вот полилогарифмический, квазиполиномиальный и так далее.
[19:34.000 --> 19:38.000]  Вот так. Ну, давайте на примерах.
[19:38.000 --> 19:44.000]  Значит, на примерах поймем, почему это так.
[19:44.000 --> 19:53.000]  Значит, самое простое, почему l вложено в P.
[19:53.000 --> 20:00.000]  Так. Доказательства.
[20:00.000 --> 20:03.000]  Ну, давайте я сначала на примерах вот из этого ряда,
[20:03.000 --> 20:10.000]  а потом скажу, почему это обобщается на произвольные границы.
[20:10.000 --> 20:14.000]  Так. l вложено в P.
[20:14.000 --> 20:17.000]  Это верно по очень простой причине.
[20:17.000 --> 20:21.000]  Потому что, смотрите, если у нас логарифмическая...
[20:21.000 --> 20:29.000]  Да, у нас есть вход длины N и есть рабочая память длины логарифма.
[20:29.000 --> 20:47.000]  Смотрите, вход длины N и рабочая память длины.
[20:47.000 --> 20:52.000]  Ну, давайте я тут целый гривен напишу.
[20:52.000 --> 20:57.000]  Вот. Тогда просто сколько у нас всего конфигурации может быть?
[20:57.000 --> 20:59.000]  Значит, число...
[20:59.000 --> 21:03.000]  Ну, да, значит, я имею в виду машину тюринга в уме.
[21:03.000 --> 21:06.000]  Значит, число конфигурации.
[21:06.000 --> 21:08.000]  Чему равно?
[21:08.000 --> 21:17.000]  Это будет Q, но это вместо число состояний.
[21:17.000 --> 21:19.000]  Значит, число состояний...
[21:19.000 --> 21:21.000]  Ну, это какая-то константа.
[21:21.000 --> 21:23.000]  Размер множеств состояний.
[21:23.000 --> 21:25.000]  Это какая-то константа.
[21:25.000 --> 21:27.000]  Значит, умножить.
[21:34.000 --> 21:36.000]  Значит, умножить на что?
[21:36.000 --> 21:38.000]  Умножить на...
[21:38.000 --> 21:43.000]  Ну, давайте пусть даже там не бинарный алфавит какой-то.
[21:43.000 --> 21:46.000]  Так, это у нас гамма, ленточный алфавит.
[21:46.000 --> 21:52.000]  Обычно гамма в степени C логарифм N.
[21:52.000 --> 21:58.000]  Значит, вот эта вот гамма, это ленточный алфавит.
[21:58.000 --> 22:00.000]  То есть какие вообще символы бывают.
[22:00.000 --> 22:04.000]  Вот. А вот всё вместе в степени C логарифм N
[22:04.000 --> 22:10.000]  это число возможных слов, записанных на рабочей лене.
[22:10.000 --> 22:24.000]  Значит, это число возможных слов на рабочей ленте.
[22:28.000 --> 22:30.000]  Вот. Но ещё у нас есть один параметр.
[22:30.000 --> 22:34.000]  Это расположение указателей.
[22:34.000 --> 22:39.000]  Вот. Соответственно, на входной ленте это будет N.
[22:39.000 --> 22:45.000]  А на рабочей это ещё целый грифм F.
[22:45.000 --> 23:03.000]  Вот это будет число способов разместить указателя.
[23:03.000 --> 23:06.000]  Вот. Но вообще, если через всё это продраться,
[23:06.000 --> 23:08.000]  то у нас получается какой-то многочлен.
[23:08.000 --> 23:16.000]  Ну, смотрите, это какая-то константа в степени логарифм умножить на C.
[23:16.000 --> 23:25.000]  Но это то же самое, что N в степени C на логарифм вот этого.
[23:25.000 --> 23:27.000]  То есть какой-то многочлен.
[23:27.000 --> 23:32.000]  Может быть, с большим показателем, но многочлен.
[23:32.000 --> 23:35.000]  Ну, умножили ещё на N, там ещё на единицу увеличилась степень.
[23:35.000 --> 23:38.000]  Это константа, значит, это мелочь какая-то, да.
[23:38.000 --> 23:42.000]  То есть это точно меньше, чем ещё N.
[23:42.000 --> 23:46.000]  Вот. В общем, всё это вместе получается многочлен.
[23:46.000 --> 24:00.000]  Ну, то есть всего, значит, вот это вот всего по лином от N-конфигурации.
[24:00.000 --> 24:03.000]  И при этом повторяться они не могут.
[24:03.000 --> 24:07.000]  Потому что, если конфигурация повторилась,
[24:07.000 --> 24:09.000]  значит, если конфигурация повторилась,
[24:09.000 --> 24:18.000]  то тогда машина зацикливается и уже никогда не остановится.
[24:18.000 --> 24:28.000]  Значит, конфигурация не может...
[24:28.000 --> 24:35.000]  конфигурация не может повториться.
[24:35.000 --> 24:40.000]  Вот.
[24:40.000 --> 24:52.000]  Ну, а тогда что получается?
[24:52.000 --> 24:55.000]  Получается, что число шагов не больше, чем число конфигурации.
[24:55.000 --> 25:00.000]  То есть полиномиально.
[25:00.000 --> 25:16.000]  Значит, число шагов меньше либо равно, чем число конфигурации.
[25:16.000 --> 25:23.000]  И, следовательно, полиномиально.
[25:23.000 --> 25:28.000]  Ну, раз число шагов полиномиально...
[25:28.000 --> 25:36.000]  раз число шагов полиномиально, значит, это лизит в P, по определению.
[25:36.000 --> 25:38.000]  Так. Хорошо.
[25:38.000 --> 25:43.000]  Ну, на самом деле, точно так же работает вложение как бы через один.
[25:43.000 --> 25:47.000]  То есть D-space от S от N вложено вот сюда.
[25:47.000 --> 25:50.000]  Два в степенью большой от S от N.
[25:50.000 --> 25:55.000]  И это как раз тоже верно, если S хотя бы логарифм.
[25:55.000 --> 25:58.000]  Почему это так? Потому что у нас есть вот этот множитель,
[25:58.000 --> 26:01.000]  который не зависит от памяти, это N.
[26:01.000 --> 26:04.000]  Вот. Но вот если S от N хотя бы логарифм,
[26:04.000 --> 26:07.000]  то это будет порядка два в степени S от N.
[26:07.000 --> 26:11.000]  Вот. Если S будет сильно меньше, то вот это будет определять ассинтотику.
[26:11.000 --> 26:15.000]  Да, как бы всё равно полином получится.
[26:15.000 --> 26:19.000]  Вот.
[26:24.000 --> 26:28.000]  Не, наоборот ничего не портит. Мы его оценим N.
[26:30.000 --> 26:34.000]  Нет, не логарифм будет портить, а вот это N будет портить.
[26:34.000 --> 26:36.000]  Да.
[26:36.000 --> 26:39.000]  Ну, это не логарифм, это то же самое S от N.
[26:39.000 --> 26:41.000]  S от N не будет портить, а вот это вот N
[26:41.000 --> 26:44.000]  будет больше, чем два в степени S от N.
[26:44.000 --> 26:47.000]  Если это совсем маленькое.
[26:48.000 --> 26:51.000]  Так.
[26:51.000 --> 26:55.000]  Ну, теперь давайте поговорим про то, почему NL.
[26:59.000 --> 27:03.000]  Значит, NL вложено в P.
[27:04.000 --> 27:08.000]  Тут довольно интересный подход.
[27:08.000 --> 27:12.000]  Значит, всё равно нужно смотреть на конфигурация.
[27:12.000 --> 27:16.000]  Вот. Но дело в том, что вот когда у нас
[27:16.000 --> 27:20.000]  детерминированные вычисления, то у нас конфигурация как-то вот одна за другой идут.
[27:20.000 --> 27:23.000]  И получается как бы такая линия.
[27:23.000 --> 27:27.000]  А когда у нас, значит, когда у нас
[27:27.000 --> 27:31.000]  недетерминированные вычисления, то вместо линии у нас получается дерево.
[27:31.000 --> 27:35.000]  И дерево, вообще говоря, может быть экспедиционным.
[27:35.000 --> 27:39.000]  И тогда вопрос, как мы его будем обходить.
[27:39.000 --> 27:43.000]  Но ответ такой же, что на самом деле оно не может быть экспедиционным,
[27:43.000 --> 27:47.000]  потому что всего конфигурация полинамеральное число.
[27:47.000 --> 27:51.000]  И соответственно, у этого дерева, если он слишком сильно ветвится,
[27:51.000 --> 27:55.000]  то у него разные ветви будут склеиваться и приводить к одному и тому же результату.
[27:55.000 --> 27:59.000]  Вот. Поэтому рассматривается такая вещь, как конфигурационный граф.
[27:59.000 --> 28:03.000]  Конфигурационный граф.
[28:03.000 --> 28:07.000]  Значит, здесь вершины – это конфигурация.
[28:07.000 --> 28:11.000]  Вершины конфигурация.
[28:11.000 --> 28:15.000]  Вот. А ребра ориентированная...
[28:19.000 --> 28:23.000]  Да, или дуги, как еще раз говорили,
[28:23.000 --> 28:27.000]  з However,
[28:27.000 --> 28:31.000]  или дуги, как еще говорят,
[28:35.000 --> 28:39.000]  значит, ориентированные ребра соответствуют допустимым переходам.
[28:39.000 --> 28:43.000]  Раз у нас не детерминизм, то у нас, может быть,
[28:43.000 --> 28:47.000]  для одной и той же исходной конфигурации
[28:47.000 --> 28:51.000]  несколько допустимых переходов.
[28:51.000 --> 28:58.320]  рёбер выходить из одной и той же вершины. Ориентированные рёбра, допустимые переходы.
[28:58.320 --> 29:10.280]  Ну и вопрос такой, есть ли в этом графе ориентированный путь изначальной конфигурации
[29:10.280 --> 29:22.440]  в принимающую. Соответственно, вопрос, который нас интересует, значит, это есть ли в этом
[29:22.440 --> 29:42.000]  графе, есть ли в этом графе ориентированный путь изначальной конфигурации в принимающую.
[29:53.160 --> 30:00.000]  Вот. Можно для простоты считать, что у нас есть только одна принимающая
[30:00.000 --> 30:07.200]  конфигурация. Например, мы искать конфигурацию принимающей если это там принимающие состояния,
[30:07.200 --> 30:14.600]  но можно считать, что мы добавили ещё одну фиктивную конфигурацию и из любой
[30:14.600 --> 30:18.200]  конфигурации с принимающим состоянием добавили ребро вот в эту фиктивную конечную.
[30:18.200 --> 30:24.800]  тогда и просто вопрос о пути в графе, вот, но вопрос о пути в графе это очень
[30:24.800 --> 30:29.560]  известный алгоритмический вопрос, и я думаю все должны прекрасно знать, что он
[30:29.560 --> 30:36.200]  решается за полинамidное время, в том числе и в ориентированном графе, то есть
[30:36.200 --> 31:04.120]  получается, что вопрос о пути в графе решается за полинамидное время.
[31:04.120 --> 31:08.880]  Ну вот, соответственно, получается, что граф полинамидного размера, мы его строим
[31:08.880 --> 31:15.240]  явным образом, можно просто выписать все возможные конфигурации, проверить для
[31:15.240 --> 31:21.760]  каждой конфигурации, откуда там идут ребра, и потом, соответственно, для
[31:21.760 --> 31:32.640]  полученного графа решать задачу о достижимости. Ну вот, ну вот, поэтому NLFP
[31:32.640 --> 31:45.640]  вложено. Да. Нет, память-то обычная, это машина недетерминированная, недетерминированная
[31:45.640 --> 31:50.160]  машина означает, нет, значит, для детерминированного тоже можно построить
[31:50.160 --> 31:53.840]  такой граф, но там просто из каждой конфигурации будет выходить ровно одна
[31:53.840 --> 31:58.080]  стрелка. Вот. И соответственно, если мы пойдем изначально, то мы можем просто
[31:58.080 --> 32:02.200]  по этим стрелкам идти и смотреть, куда придем. Вот. А если он недетерминированный,
[32:02.200 --> 32:07.200]  то может из каждой точки выходить несколько стрелок, и тогда просто так мы
[32:07.200 --> 32:14.480]  идти не можем куда попало, да, а надо именно смотреть на достижимость
[32:14.560 --> 32:17.560]  принимающей конфигурации, да, вот изначальной.
[32:17.560 --> 32:35.560]  Да, да, да, да, да, да, на всех ветвях, на всех ветвях память ограничена. Вот.
[32:45.480 --> 33:01.400]  Так, хорошо. Ну и давайте, наверное, еще обсудим вот это вот, да, но почему НП
[33:01.400 --> 33:13.760]  вложено в PSPACE. Значит, НП вложено в PSPACE. Значит, это вот почему, да,
[33:13.760 --> 33:20.320]  ну я напомню, что такое НП. В смысле сертификатов у нас было, что х лежит ва,
[33:20.320 --> 33:31.640]  тогда и только тогда, когда существует у такое, что ва от x и у равняется единице.
[33:31.640 --> 33:39.280]  Вот. Ну и тогда можно просто перебирать все у, да, значит, можно как бы делать так.
[33:39.280 --> 33:43.960]  Значит, можно запустить перебор DownGrid, но он потребует полинавиальной памяти.
[33:43.960 --> 34:02.920]  Значит, перебор, перебор у требует полинавиальной памяти. Значит, почему? Ну как так получается,
[34:03.400 --> 34:12.120]  что вот мы выделили какой-то блок, да, вот здесь вот у, да, значит, а вот здесь получается вычисление,
[34:12.120 --> 34:22.840]  вычисление ва от х и у. Вот, и да, получается, что мы сначала взяли у из одних нулей и с ним
[34:22.840 --> 34:30.120]  вычислили. Потом мы тут как бы, если вдруг единица случилась, то все, да, значит, ответ один. Иначе
[34:30.120 --> 34:35.160]  мы как бы вот эту память освобождаем, а тут переходим к следующему у, да, все нули в конце
[34:35.160 --> 34:40.920]  единицы. И с ним вычисляем. Вот. Ну и так далее, да, то есть каждый раз после очередного вычисления
[34:40.920 --> 34:46.920]  ва от х и у, если получился единица, то мы заканчиваем вычисление с ответом один, если
[34:46.920 --> 34:53.560]  получился ноль, то мы у инкрементируем и на той же самой памяти, значит, на той же самой памяти
[34:53.560 --> 34:59.960]  продолжаем. То есть вот это вот ключевое отличие памяти как вычислительного ресурса от времени
[34:59.960 --> 35:06.160]  стоит в том, что память можно переиспользовать. На тот же участок памяти, где мы уже проводили
[35:06.160 --> 35:11.080]  вычисления, можно использовать для каких-то следующих вычислений. Вот. И вот за счет этого
[35:11.080 --> 35:22.920]  получается, что хотя время будет экспоненциальное, память будет полиномиальная. Вот. Ну, соответственно,
[35:22.920 --> 35:32.640]  для произвольных, дальше для произвольных границ это все будет аналогично. Так, ну что,
[35:32.640 --> 35:39.240]  какие-нибудь вопросы? Да, перерыв. После перерыва поговорим про конкретные задачи,
[35:39.240 --> 35:42.560]  ну, сегодня из Эль. А про Эль следующий раз.
[36:10.080 --> 36:21.200]  Примеры задач из Эль. Так, ну начнем мы с арифметики двоечных чисел. То есть, в общем,
[36:21.200 --> 36:31.080]  будет три группы задач в этом разборе. Значит, первая группа – это арифметика двоечных чисел,
[36:31.080 --> 36:38.000]  вторая группа – это синтактический разбор выражений, например, скобочных последовательностей.
[36:38.000 --> 36:48.560]  И третья группа – это некоторые операции на графах. Значит, первая – это арифметика
[36:48.560 --> 37:15.400]  двоечных чисел. Вот. Ну и первый пример. Один а – это сравнение. Значит, сравнение,
[37:15.400 --> 37:22.120]  то есть, есть два числа и х и у в двоечной записи. Нужно понять, кто из них больше. Ну,
[37:22.120 --> 37:34.120]  скажем, верно ли, что х больше у? Вот. Значит, тут в принципе немножко важно, как именно,
[37:34.120 --> 37:41.160]  как именно числа записанная. Можно считать, что они просто на разных лентах написаны,
[37:41.160 --> 37:55.560]  что у нас не одна входная лента, а две входных ленты. Значит, есть х, есть у. Вот. Ну и тут,
[37:55.560 --> 38:10.800]  соответственно. Ну, значит, в самом простом случае можно считать, что они еще и одной
[38:10.800 --> 38:16.560]  длины битвы, и если нужно там ведущие нули поставленные, тогда это вообще получается
[38:16.560 --> 38:22.760]  автоматная задача. Значит, нам даже не нужно вообще никакой памяти. Да, мы просто идем,
[38:22.760 --> 38:29.680]  значит, если заранее известно, что они не одной длины, то мы идем слева-направо. Значит,
[38:29.680 --> 38:39.680]  слева-направо смотрим, совпадают символы или нет. Соответственно, если совпадает,
[38:39.680 --> 38:45.720]  то идем дальше. Если не совпадает, то как бы там, где стоит единица, то и больше. Да, ну,
[38:45.720 --> 38:55.360]  совершенно естественно. Вот. А теперь давайте обсудим технические моменты. Значит,
[38:55.360 --> 39:05.400]  во-первых, они могут быть разной длины. Да, например, вот так вот. Тогда, соответственно,
[39:05.400 --> 39:09.200]  если мы будем идти как раньше, то у нас будет неправильный ответ. Потому что на самом деле вот
[39:09.200 --> 39:14.200]  это вот больше, там просто больше значих цифр. А если мы будем сравнивать так же, то у нас будет
[39:14.200 --> 39:22.000]  вот это больше. Вот. Поэтому, ну, тут надо наоборот получается идти. Значит, можно сказать,
[39:22.000 --> 39:32.040]  что мы наоборот идем с мальших битов. Да, идем с мальших битов, там справа-налево. И дальше,
[39:32.040 --> 39:43.440]  соответственно, если у нас, да, тут храним как бы результат сравнения текущих хвостов.
[39:43.440 --> 39:48.720]  Вот. Соответственно, получается, что если у нас очередной бит получается больше, да, то есть,
[39:48.720 --> 39:53.240]  например, сразу последние биты, да, значит, он больше здесь. Сравним предпоследний, да, больше
[39:53.240 --> 39:59.240]  здесь. Да, и сравним еще. Ну, и так далее. Значит, если они такие же, то мы оставляем результат
[39:59.240 --> 40:04.000]  сравнения хвостов. Если какой-то больше, да, то тот, который больше как-бы перебивает все,
[40:04.000 --> 40:12.960]  что до этого было. Ну, а дальше, если там кто-то один кончился раньше, чем другой, то тогда нужно
[40:12.960 --> 40:21.080]  проверить, нет ли единицы в том префиксе, который еще остался. Ну, а если там есть единица, то
[40:21.080 --> 40:26.040]  получается, что это число больше в любом случае. Если там остальные нули, то нужно оставить тоже
[40:26.040 --> 40:36.160]  результат, который был. Ну вот, в общем, вроде тоже получается, да, что если, значит, если они разные
[40:36.160 --> 40:42.640]  длины, но на разных лентах, то тоже можно вот так вот сравнить. Вот. Если же они будут на одной ленте,
[40:42.640 --> 40:52.440]  да, то есть тут как-то написано х, значит, потом какой-то разделитель, потом у, то вот тогда уже
[40:52.440 --> 41:00.080]  нужна лентграхмическая память, не константная. Вот. Но тогда мы фактически делаем то же самое,
[41:00.080 --> 41:08.400]  но мы не можем сразу смотреть и на один бит, и на другой, а должны его запомнить и перейти там
[41:08.400 --> 41:13.400]  куда-то. При этом, смотрите, мы не можем ставить меток, никаких меток не можем ставить, что мы,
[41:13.400 --> 41:18.480]  скажем, запомним вот этот бит, поставим тут точку, а потом идем туда, возвращаемся слева от того,
[41:18.480 --> 41:24.120]  где мы ставим точку. Значит, вот так нельзя делать, потому что это будет изменение входа, и это запрещено.
[41:24.120 --> 41:30.360]  Значит, вместо этого мы будем считать шаги, да, то есть мы как бы, ну, сначала мы там, скажем, идем сюда,
[41:30.360 --> 41:38.560]  до разделителя, да, на шаг назад, это будет последний бит х. Вот. И у нас есть будет, тут будет
[41:38.560 --> 41:48.520]  какой-то счетчик. На счетчик, соответственно, мы идем, да, значит, идем по одной клетке направо,
[41:48.520 --> 41:58.840]  и, соответственно, вот этот вот счетчик увеличиваем на единицу, да, доходим до конца, да, идем назад,
[41:58.840 --> 42:04.160]  еще там минус один, это будет как раз чему, чему равен этот счетчик. Ну, то есть, это фактически
[42:04.160 --> 42:10.640]  будет длина у и там плюс один. Вот это вот. И это вот будет как последний бит, теперь мы его сравниваем,
[42:10.640 --> 42:18.680]  а счетчик запоминаем, копируем, да, то есть тут будет на самом деле счетчик один и счетчик два.
[42:18.680 --> 42:27.960]  Да, и счетчик один у нас будет сфиксировано после первого прохода, это будет вот, сколько клеток
[42:27.960 --> 42:35.680]  нужно пройти от какой-то бита икса до соответствующего бита икрика. Вот. А счетчик два мы будем все
[42:35.680 --> 42:41.040]  время использовать, чтобы понять, где мы находимся. Да, то есть, получается, что мы копируем счетчик один,
[42:41.040 --> 42:47.960]  счетчик два, идем обратно, каждый раз уменьшая счетчик два на единицу. Когда счетчик два стал нулем,
[42:47.960 --> 42:53.120]  означает, что мы пришли там вот сюда вот. Ну или там вот сюда уже, в общем, куда-то сюда пришли,
[42:53.120 --> 42:59.600]  надо точно понять, куда именно. Вот. Но если мы пришли сюда, то мы делаем еще один шаг сюда,
[42:59.600 --> 43:07.480]  не изменяя счетчики. А потом начинаем снова идти вот сюда вот. Теперь нам будет увеличивать счетчик
[43:07.480 --> 43:13.360]  два, пока он не станет равным счетчику один. И тогда мы пришли в предпоследний бит икс. Ну и так
[43:13.360 --> 43:18.600]  получается, что мы ходим туда-сюда, делаем все то же самое, что мы делали вот здесь вот. Но теперь
[43:18.600 --> 43:24.440]  нам нужна пара счетчиков, чтобы, ну как бы, технически обслуживать весь этот процесс.
[43:24.440 --> 43:38.160]  Надо уметь сравнить два счетчика, конечно, но тут это уже будет не очень важно.
[43:38.160 --> 43:53.880]  Не, в принципе, конечно, вы правы. Вы правы, что нужна такая вещь. Но можно сказать, что мы сделаем
[43:53.880 --> 43:58.320]  рекурсивные, там сегов рекурсий будет совсем немного, потому что счетчики будут логерифмически
[43:58.320 --> 44:06.760]  длинные. Вот. Можно как-нибудь иначе организовать хранение. Например, у нас будут чередоваться бит
[44:06.760 --> 44:12.520]  счетчика 1, бит счетчика 2, и мы будем сравнивать просто проходя по ним и сравнивая по литовым.
[44:12.520 --> 44:20.360]  Да, в общем, ну главное, что поскольку эти счетчики логерифмического размера, то с ними уже гораздо
[44:20.360 --> 44:25.640]  проще. Да, с ними почти все что угодно можно делать, и это как раз тот самый логерифмический размер
[44:25.640 --> 44:48.960]  займет. Вот. Хорошо, так. Ну, формально, конечно, нужна какая-то общая теорема. Да, общая теорема
[44:48.960 --> 44:58.520]  заключается в том, что класс L не зависит от числа лент рабочих, ну и рабочих тоже, но и входных,
[44:58.520 --> 45:04.520]  что нам здесь самое главное. Вот. Ну а доказывается, теорем примерно так же, как здесь, да, то есть
[45:04.520 --> 45:09.520]  вместо, так, заводятся счетчики, которые отвечают за то, куда показывают головку на каждой ленте,
[45:09.520 --> 45:21.640]  и, соответственно, там как-то все обрабатывается. Так.
[46:09.520 --> 46:33.320]  Так, хорошо, значит, дальше следующий пункт, там 1b, 1b, сложение. Ну, смотрите, вообще, сложение,
[46:33.320 --> 46:38.520]  да, это же не вопрос, ответом да или нет, это функция, но, соответственно, как всегда с функцией можно
[46:38.520 --> 46:46.640]  использовать два подхода. Во-первых, можно считать, что у нас прямо функция вычисляется, но побитого,
[46:46.640 --> 46:56.480]  то есть, например, у нас есть еще выходная лента, на которую ответ пишется шаг за шагом, да, или,
[46:56.480 --> 47:06.480]  ну да, да, да, да, да, да, в общем, что есть выходная лента, которая не используется при подсчете памяти,
[47:06.480 --> 47:14.680]  и на которую просто время на время поддаются биты ответа, да, значит, слева направо. Вот. А или можно
[47:14.680 --> 47:20.760]  считать, что это вопрос о проверке правильности, да, что у нас есть там три числа, a, b и c, и нужно
[47:20.760 --> 47:25.720]  понять, верно ли, что a плюс b равно c. Значит, тогда это будет ответ да или нет.
[47:25.720 --> 47:45.520]  Ну, например, вот. Ну, тут, опять же, если у нас все-таки нету ответа, то желательно его вычислить.
[47:45.520 --> 48:00.320]  Вот. Но, в общем, можно и вот про такое спрашивать. Так. Ну, как это делается? Ну, опять же, зависит
[48:00.320 --> 48:07.400]  от того, как у нас записана информация. Если вообще все a, b и c записаны на разных лентах,
[48:07.400 --> 48:26.640]  значит, будет a, b и c. Тогда, опять же, достаточно даже константной памяти работает стандартный
[48:26.640 --> 48:37.680]  алгоритм в столбик, да, что он просто, ну, конечно, мы просто каждый раз смотрим на три бита,
[48:37.680 --> 48:45.400]  и еще есть как бы бит переноса, да, есть бит переноса, да, и мы, соответственно, сфенируем два
[48:45.400 --> 48:54.520]  очередных бита и бит переноса, и, соответственно, проверяем, что сумма, да, то есть, ссоры этих битов,
[48:54.520 --> 48:59.920]  это то же самое, что написано вот здесь вот. Ну, а бит перенос, получается, что если там хотя бы две
[48:59.920 --> 49:04.320]  единицы из этих трех битов, да, то бит перенос и на следующий раз тоже переходит.
[49:04.320 --> 49:14.560]  Нет, подождите, вот это я нарисовал вот для такого, что у нас уже есть a, b и c, но чтобы проверить
[49:14.560 --> 49:21.200]  справедливость. Вот. А, соответственно, если нам нужно писать ответ, да, то это означает,
[49:21.200 --> 49:31.600]  что просто по одному бит и надо выписывать. Ничего нельзя, может только на нее очередной бит напечатать,
[49:31.600 --> 49:46.560]  а читать с него нельзя уже. Да, нет, это вы спрашиваете, в каком порядке можно записывать ответ. Да,
[49:46.560 --> 49:52.400]  соответственно, действительно, если мы записываем вот так вот, да, то получается, что мы записываем его с младших бит,
[49:52.400 --> 49:59.920]  начиная. Вот. Но, на самом деле, конечно, если немножко повозиться, да, то можно и со старших
[49:59.920 --> 50:10.920]  начинать, да, то есть можно просто, как бы, все эти младшие биты не печатать, да, а просто, да,
[50:10.920 --> 50:19.160]  значит, дойти до сюда и вот этот бит напечатать. Вот. А потом и нужен еще счетчик, да, вот тут
[50:19.160 --> 50:25.400]  будет счетчик, да, сколько бит уже напечатали. Да, пойдем, как бы, пойти обратно, вычислять это все еще раз,
[50:25.400 --> 50:33.400]  и теперь второй бит напечатать. Да, это, конечно, очень неэффективно, да, значит, это очень неэффективно,
[50:33.400 --> 50:45.520]  но, в принципе, допустимо. Вот. То есть память рологрифическая будет, да, как раз, как раз счетчик будет
[50:45.520 --> 51:00.080]  заведен. Вот. Ну, реально, в реальных процессорах сложение даже не так делается, это мы попозже
[51:00.080 --> 51:09.200]  обсудим, как именно там есть специальные, специальные способы ускорить этот процесс. Так, хорошо,
[51:09.200 --> 51:26.160]  значит, ну, это вот сложение, ну, и дальше третья вещь, это умножение. Значит, умножение, соответственно,
[51:26.160 --> 51:41.480]  тут будет a умножить на b равно c. Вот. Ну, тогда получается так, что, смотрите, если у нас a будет
[51:41.480 --> 51:51.640]  равно, например, a n минус 1, a n минус 2 и так далее, a 1 на ноль, да, побитого, значит, b это будет b n
[51:51.640 --> 52:03.080]  минус 1, b n минус 2 и так далее, b 1, b 0, то дальше будет получаться следующее, да, что c, да, c может быть длинным,
[52:03.080 --> 52:15.640]  да, тут будет 2 n минус 1 и так далее, c 1, c 0, и дальше будет получаться так, да, что c 0, и это будет a 0, b 0,
[52:15.640 --> 52:38.840]  значит, это можно точно написать. Значит, c 1 будет a 0 b 1 плюс b 1 a 0, в смысле b 0, так, давайте так, a 0 b 1 плюс a 1 b 0,
[52:38.840 --> 52:54.040]  вот, но это уже может быть равно двум, да, соответственно, это только последний вид, это будет, да, по моделю два. Вот, а вот c 2 уже будет,
[52:54.040 --> 53:17.880]  да, это будет a 0 b 2 плюс a 1 b 1 плюс a 2 b 0, и еще плюс перенос, да, значит, именно если вот это было равно единице, то, соответственно, если это было равно двум, то еще единица пошла как перенос, вот, но, в принципе, и так далее.
[53:17.880 --> 53:42.680]  Да, значит, тут будет и так далее, но только в чем отличие от сложения в том, что переносы могут быть не только на один бит, а сразу на несколько бит вперед, да, потому что дальше тут будет много слагаемых,
[53:42.680 --> 54:12.680]  и эти слагаемые могут быть в сумме дать, могут в сумме дать не два и не три, а какое-то большое число, вот, и это большое число даст переносы сразу на несколько предыдущих разрядов, но, в принципе, можно считать, что вот этот перенос, это то, что было вот здесь вот пополам, ну, или там, без последнего бита, вот, и так дальше это будет, но, в общем, важно, что вот этот перенос, значит, перенос будет
[54:12.680 --> 54:42.600]  уж не больше, чем n, да, сам перенос будет не больше, чем n, а, значит, занимает не больше логарифма, да, значит, занимает меньше или в равно логарифма n битов, ну, и, соответственно, мы его будем хранить, ну, и для хранения переноса достаточно как раз логарифмического числа b.
[54:42.680 --> 54:58.600]  Ну, тут тоже получается, что мы ответ с конца опечатаем, если вдруг нам нужно сначала без использования дополнительной памяти, то, ну, можно только, опять же, вычислять соответствующий бит, да, и его опечатать.
[54:58.600 --> 55:28.520]  Так, ну, чего, понятно про умножение? Значит, вот тут ключевой момент, да, ключевой момент, что перенос может быть не одним битом, да, а логарифмом битов, и получается, что тут, значит, в отличие от предыдущего и от сравнения и от сложения, мы не можем, значит, мы не можем организации памяти сделать так, что нам нужно вообще константами дополнительной памяти, значит, нам все равно нужно хранить перенос, и он все равно будет логарифмический.
[55:28.520 --> 55:38.440]  Да, то есть даже если мы делаем так, что нам не нужны эти технические счетчики, все равно получается, что нам нужен логарифм для хранения переноса.
[55:38.440 --> 55:54.440]  Так, ну, чего, понятно? Так, ну, ладно. Хорошо, значит, тогда поговорим про скобочные последовательности.
[56:24.440 --> 56:52.360]  Вот, так, значит, второе.
[56:54.440 --> 57:12.360]  Значит, второе это вот синтактический разбор, значит, синтактический разбор.
[57:12.360 --> 57:30.280]  Ну, соответственно, тут пункт два А это правильная, правильная скобочная последовательность.
[57:30.280 --> 57:32.280]  Вот, ну, что такое вообще правильная скобочная последовательность?
[57:32.280 --> 57:38.200]  Ну, там есть несколько разных определений, минимум три.
[57:38.200 --> 57:58.200]  Значит, есть определение как бы просто через разбивание скобок на пары, что можно разбить скобки, что там четное число открывающих и закрывающих скобок, их можно разбить на пары так, что в каждой паре открывающий идет раньше закрывающий.
[57:58.200 --> 58:24.120]  Вот, можно также потребовать, чтобы это было, ну, в некотором смысле правильно, что, например, смотрите, если мы просто требуем разбивания на пары, то, может быть, например, вот эту, что вот эта скобка вот с этой в паре, а эта скобка вот с этой в паре.
[58:25.080 --> 58:34.040]  И тогда, вроде как, они разбиты, но это не совсем то, как мы ожидаем, мы ожидаем, что вот внутренние будут в паре и внешние будут в паре.
[58:34.040 --> 58:42.040]  Ну, на самом деле это неважно, если хоть как-то разбиты, можно их перегруппировать так, чтобы они были вложены как надо.
[58:42.040 --> 59:05.960]  Соответственно, есть такое рекурсивное определение, есть рекурсивное определение, что, соответственно, пустое слово, пустая последовательность, это правильная скобочка, если там нет ни одной скобки.
[59:12.040 --> 59:25.960]  Это как бы база рекурсии, что пустая последовательность, это правильная скобочная последовательность, дальше, если есть какая-то правильная скобочная последовательность, то можно ее взять в скобки вот так вот.
[59:25.960 --> 59:43.880]  Вот, ну и наконец, если есть две, f1 и f2, правильная скобочная последовательность, то можно их приписать одну к другой, и это тоже будет правильная скобочная последовательность.
[59:43.880 --> 01:00:03.800]  Соответственно, если мы берем как бы в паре вот эти вот две скобки, тогда уже никакого перекрытия не будет получаться, то есть вот это будет получаться, что мы сначала взяли пустую, дальше ее взяли в скобки, получилась просто скобка открывается, скобка закрывается, и вот это вот еще раз взяли в скобки.
[01:00:03.800 --> 01:00:33.720]  Вот, ну а также есть еще третье, третье эквалентное свойство, значит критерий, значит критерий через баланс скобок, значит критерий такой, что
[01:00:33.720 --> 01:00:57.640]  значит во всей цепочке баланс нулевой, то есть открывающих столько, сколько закрывающих, значит во всей последовательности баланс равен нулю, а в любом префексе
[01:00:57.640 --> 01:01:27.160]  в любом префексе больше ли в район нулю, то есть получается, что значит в любом префексе открывающих не меньше, чем закрывающих, но вообще можно сказать, что все эти три свойства эквивалентны между собой, но проверять удобно как раз последние
[01:01:27.160 --> 01:01:56.960]  свойства, потому что можно просто идти слева-направо, идти слева-направо подсчитывать баланс, если вдруг он опустился в минус, то говорить, что ответ нет, если дошли до конца, то проверить, что он равен нулю, если равен, то сказать да, при этом нам нужен один счетчик, значит нам нужен один счетчик для баланса, и как раз баланс уже не больше, чем
[01:01:56.960 --> 01:02:26.960]  число символов, то есть баланс не больше, чем n, но и соответственно требуют алгоритмы n-битов, да, это еще тоже тут все очень важно, что мы используем двоечную систему, так что числа порядка n требует как раз алгоритмы n-битов, вот, ну вот соответственно вот этот вот критерий через баланс получается, проверяется, проверяется на, не наполиняем, не наполиняем, не наполиняем, не наполиняем, не наполиняем, не наполиняем, не наполиняем, не наполиняем, не наполиняем, не
[01:02:26.960 --> 01:02:50.420]  наполиняем на алгоритмической, значит на алгоритмической памяти. Вот, хорошо,
[01:02:56.960 --> 01:03:08.880]  так ну чего понятно вот мой дать последний на сегодня
[01:03:08.880 --> 01:03:11.640]  значит граф оставим на следующий раз вот а сейчас
[01:03:11.640 --> 01:03:16.960]  поговорим про последовать последовательности из
[01:03:16.960 --> 01:03:24.080]  двух или нескольких типов скобок последовательности
[01:03:24.200 --> 01:03:25.600]  нескольких
[01:03:25.600 --> 01:03:28.920]  типа вскобок
[01:03:30.200 --> 01:03:34.680]  например есть круглый есть квадратная а вот если у
[01:03:34.680 --> 01:03:38.520]  на кисти круглый квадратная то как раз вот такая штука
[01:03:38.520 --> 01:03:40.040]  может стать проблемой
[01:03:40.040 --> 01:03:42.580]  Ferantwort
[01:03:42.580 --> 01:03:45.440]  примерественно у нас круглый открывается потом квадратный
[01:03:45.440 --> 01:03:48.980]  закрывается потом круглые закрываются 저는 закрывается
[01:03:48.980 --> 01:03:52.680]  на то здесь все хорошо со всеми балансами
[01:03:52.680 --> 01:04:02.680]  но это, тем не менее, неправильное. Тут, действительно, мы можем разбить на пары, чтобы открывающая была раньше закрывающей.
[01:04:02.680 --> 01:04:08.680]  Да, все балансы, какие надо, но, тем не менее, это неправильно.
[01:04:08.680 --> 01:04:12.680]  Значит, вот это вот неправильное.
[01:04:12.680 --> 01:04:15.680]  Вот. Какая тут проблема?
[01:04:15.680 --> 01:04:25.680]  Ну, проблема в том, что, если мы найдем парную к этой скобке, то внутри будет неправильная последовательность.
[01:04:26.680 --> 01:04:44.680]  А вот весь вот участок, участок между парными скобками неправильный.
[01:04:44.680 --> 01:05:09.680]  Ну и, соответственно, алгоритм будет нацелен на то, чтобы проверять, чтобы для каждой скобки искать парную ей,
[01:05:09.680 --> 01:05:14.680]  и проверять условенно баланс между этими скобками.
[01:05:14.680 --> 01:05:31.680]  Соответственно, алгоритм для каждой скобки, для каждой скобки искать парную,
[01:05:31.680 --> 01:05:58.680]  и, соответственно, проверять условия на баланс, условия на баланс по каждому типу скобок, по каждому типу скобок, соответственно, между ними.
[01:06:01.680 --> 01:06:20.680]  Вот. Ну, тут, понятное дело, значит, нужно некоторое доказательство, что это будет правильно.
[01:06:20.680 --> 01:06:26.680]  Вот. Ну, более-менее, ну, а для этого нужно, на самом деле, сначала определение,
[01:06:26.680 --> 01:06:35.680]  а определение, на самом деле, будет такое же рекурсивное, только вот здесь, вот когда мы добавляем скобки, они могут быть разных типов, но парные друг к другу.
[01:06:35.680 --> 01:06:39.680]  Да, то есть в данном случае будет вариант, вот такой будет вариант с квадратными.
[01:06:39.680 --> 01:06:42.680]  Вот. Если больше типов, то больше вариантов.
[01:06:42.680 --> 01:06:50.680]  Вот. Ну и тогда, понятное дело, что баланс по каждому типу скобок тут всегда будет выполнен,
[01:06:50.680 --> 01:06:59.680]  ну и как раз парное к этой будет вот это, и внутри тоже будет все выполнено.
[01:06:59.680 --> 01:07:05.680]  Вот. Ну, надо еще обратно доказывать, да, что если баланс выполнен, тогда можно так разобрать.
[01:07:05.680 --> 01:07:09.680]  Вот. Это я уж не успею формально доказать.
[01:07:09.680 --> 01:07:15.680]  И давайте я чуть-чуть расскажу, как именно этот алгоритм будет работать и почему ему нужна алгоритмическая память.
[01:07:15.680 --> 01:07:17.680]  Посмотрите, как искать парную.
[01:07:17.680 --> 01:07:23.680]  Ну, мы идем слева-направо, считаем баланс по этому типу скобок.
[01:07:23.680 --> 01:07:28.680]  Да, то есть тут, давайте какой-нибудь там пример.
[01:07:36.680 --> 01:07:40.680]  Ну, что-нибудь вот такое вот, да, или тут там что-нибудь еще.
[01:07:41.680 --> 01:07:49.680]  Да, вот мы идем вот здесь вот, да, у нас тут будет, значит, один, два, три, потом два, три, два.
[01:07:49.680 --> 01:07:54.680]  Дальше это мы пропускаем, да, то есть тут как бы оставляем баланс два,
[01:07:54.680 --> 01:07:58.680]  тут получается один, один, два, один, один, ноль.
[01:07:58.680 --> 01:08:05.680]  Да, то есть квадратная скобка любая не меняет числа, да, открывающая круглая увеличивает, закрывающая уменьшает.
[01:08:05.680 --> 01:08:09.680]  И вот то место, где мы впервые обратились в ноль, это и будет парная.
[01:08:09.680 --> 01:08:14.680]  Да, то есть вот это вот будет как раз парной вот к этой.
[01:08:14.680 --> 01:08:20.680]  Вот, ну, ясно, что этот баланс, он, опять же, будет не больше n, поэтому требуют алгоритма битов.
[01:08:20.680 --> 01:08:25.680]  Вот, но кроме того, да, значит, мы же не можем метку поставить.
[01:08:25.680 --> 01:08:32.680]  Нужен еще счетчик, который будет подсчитывать, сколько мы всего тут скобок символов прошли.
[01:08:33.680 --> 01:08:37.680]  Вот, а потом можно сказать, что мы идем просто обратно,
[01:08:37.680 --> 01:08:42.680]  и уже считаем, ну, может считать, что по этому типу мы уже проверили, что все есть,
[01:08:42.680 --> 01:08:46.680]  что все верно, да, идем по другому соответственно.
[01:08:46.680 --> 01:08:50.680]  Да, по другому типу скобок проверяем, что по нему тоже все нормально.
[01:08:52.680 --> 01:08:56.680]  Почему что?
[01:09:02.680 --> 01:09:08.680]  по этому типу, но потому что тут автоматически, если мы взяли первое место, когда он обращается в ноль,
[01:09:08.680 --> 01:09:14.680]  то тогда между ними все это будет положительное, да, и в ноль не обращаться.
[01:09:16.680 --> 01:09:21.680]  Вот, поэтому нужно по квадратным проверить, но в данном случае все будет верно.
[01:09:22.680 --> 01:09:26.680]  Но, соответственно, нужно еще счетчик, да, чтобы мы знали, докуда проверять.
[01:09:26.680 --> 01:09:28.680]  А что мы проверяем с квадратом?
[01:09:28.680 --> 01:09:30.680]  Тоже баланс.
[01:09:30.680 --> 01:09:34.680]  Ну, мы только его справа-навево проверяем, но справа-навево тоже самое должно быть.
[01:09:35.680 --> 01:09:39.680]  Вот, а если, например, тут было там не вот так вот, а вот так вот,
[01:09:41.680 --> 01:09:46.680]  то получилось бы, да, что мы идем, и тут по квадратам не скользится баланс.
[01:09:46.680 --> 01:09:48.680]  Да, будет ответ «нет».
[01:09:48.680 --> 01:09:50.680]  А может быть, например,
[01:09:51.680 --> 01:09:53.680]  может быть, например,
[01:09:53.680 --> 01:09:55.680]  вот так вот,
[01:09:55.680 --> 01:10:01.680]  да, значит, тогда, если мы вот это вот проверяем, то тут по квадратам тоже все будет хорошо.
[01:10:01.680 --> 01:10:05.680]  Да, поэтому это нужно для всех, да, значит, для всех открывающих найти парную закрывающую, это проверить.
[01:10:05.680 --> 01:10:11.680]  Да, в данном случае, значит, в данном случае, если мы возьмем вот такую вот пару,
[01:10:11.680 --> 01:10:16.680]  да, это будет как раз открывающая закрывающая, и вот в ней по квадратам будет неправильно.
[01:10:18.680 --> 01:10:24.680]  Вот. Ну, в общем, получается, что мы, что у нас нужен счетчик, чтобы подсчитывать, куда нужно прийти.
[01:10:24.680 --> 01:10:26.680]  Да, нужен счетчик, чтобы подсчитывать баланс.
[01:10:26.680 --> 01:10:30.680]  Нужен счетчик, чтобы подсчитывать другой баланс по другому типу скобок.
[01:10:30.680 --> 01:10:35.680]  Но их будет какое-то небольшое число, три счетчика, каждый занимает логарифминитов.
[01:10:35.680 --> 01:10:37.680]  Значит, всего памятного логарифмическая.
[01:10:37.680 --> 01:10:39.680]  Вот. Ну, и вот это вот, давайте,
[01:10:40.680 --> 01:10:44.680]  итоговая фраза, итоговый принцип, что
[01:10:45.680 --> 01:10:48.680]  суть того, что нам нужна логарифмическая память,
[01:10:48.680 --> 01:10:52.680]  заключается в том, что мы используем константу счетчиков,
[01:10:52.680 --> 01:10:56.680]  каждая из которых принимает пальномиальные значения.
[01:10:56.680 --> 01:10:59.680]  Тогда каждый из них требует логарифма битов,
[01:10:59.680 --> 01:11:02.680]  и все вместе, раз их константы, тоже требует логарифма битов.
[01:11:02.680 --> 01:11:06.680]  Вот. Вот это вот суть того, что такое класс C.
[01:11:06.680 --> 01:11:08.680]  Все, спасибо за внимание.
