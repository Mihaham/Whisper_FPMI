[00:00.000 --> 00:12.120]  Сейчас мы покурим про верравнивание и битовые поля заодно, я расскажу вкратце. Вот, смотрите,
[00:12.120 --> 00:20.320]  какая история. Вот когда вы, когда вы сами, когда вы просто пользуетесь стандартными new
[00:20.320 --> 00:28.960]  delete, стандартным локатором, когда вы создаете переменные на стеке, вы об этом не задумываетесь,
[00:28.960 --> 00:34.480]  обычно. Но как только вы начинаете писать свой локатор, в частности, вот если вы начинаете
[00:34.480 --> 00:40.640]  писать стековый локатор, то у вас возникает следующая проблема. Ну как вы в стековом локаторе,
[00:40.640 --> 00:47.000]  скорее всего, будете выделять память. Ну вы там создадите какой-нибудь массив чар, там из,
[00:47.000 --> 00:55.440]  я не знаю, из дофига. Вот, да, ну или там не чар, а uint 8t или std byte, ну не знаю, что-нибудь в таком
[00:55.440 --> 01:05.240]  стиле. И допустим, вот это ваш пул, вот это ваш пул, тот самый, который называется, кстати,
[01:05.240 --> 01:10.440]  не пишите слово пул, вот все понимают, что слово пул пишется так, просто я в прошлые годы видел
[01:10.440 --> 01:17.360]  некоторых, кто писал пул-алокатор, называл его пул, в смысле п-у-л-л-алокатор, потене-алокатор. Вот,
[01:17.360 --> 01:28.280]  вот, короче, пул пишется вот так, а не так. Так вот, когда вы такое сделаете и, допустим,
[01:28.280 --> 01:36.000]  начнете выделять на этом локаторе int, ну давайте вот представим, что вы вот этим пулом пользуетесь
[01:36.000 --> 01:44.040]  разделяемо, и у вас есть два локатора, один выделяет на нем int, а другой, не знаю,
[01:44.040 --> 01:49.440]  даблы. Вот представьте, вы можете же, в принципе, теоретически завести большой пул и выделять на
[01:49.440 --> 01:56.760]  нем вещи разных типов. Тогда у вас возникает следующий вопрос, вот int, вот вы кладете int,
[01:56.760 --> 02:05.160]  int, int, int, положили, допустим, 3 int по 4 байта. Давайте уже буду по-английски писать,
[02:05.160 --> 02:12.720]  4 байта, 4 байта, да, как-то это нехорошо, выглядит как будто это шестнадцатеричное число. Хорошо,
[02:12.720 --> 02:21.920]  4 байта, 4 байта, 4 байта, а потом решили положить double, 8 байт, или еще того хуже решили положить
[02:21.920 --> 02:34.960]  long dumbbell, 16 байт. Ну вот этот адрес, он не кратен восьми же, правда? Нет, если, ну вот если я
[02:34.960 --> 02:41.960]  выделил вот эту штуку, как бы он не был выровнен, даже если он очень хорошо выровнен, если я положил
[02:41.960 --> 02:54.600]  3 int, а то есть если он был даже так выровнен, что он был остаток 4, по-моему, для 8, ну я предполагаю,
[02:54.600 --> 03:00.480]  что я предполагаю, что изначально он выровнен нормально, но вот вы если положили в него 3 int,
[03:00.480 --> 03:06.560]  а потом положили double, то у вас получается double лежит по адресу не кратному восьми, но вообще да,
[03:06.560 --> 03:13.120]  это правильный совершенно вопрос. Чар, он же не обязан быть выровнен никак, ну то есть чар может
[03:13.120 --> 03:18.080]  начинаться с любого байта, там вообще нет никаких требований, он кратен в четыреом или восьми, и на
[03:18.080 --> 03:23.040]  самом деле, если вы на стеке заводите массив чаров, а вы его на стеке собираетесь заводить, то он может
[03:23.040 --> 03:28.000]  начинаться с адреса там, что-то там, ну один, то есть остаток один, по-моему, для 8 у вас будет,
[03:28.000 --> 03:35.280]  тогда все эти вещи будут не выровненными, но что значит не выровненными, это значит, что они
[03:35.280 --> 03:42.400]  начинаются с адреса не кратного, ну давайте скажем, что перемена не выровнена, если ее адрес не кратен ее
[03:42.400 --> 03:51.200]  размеру, это для примитивных типов такое определение работает. Вот правильно выровненный aligned int,
[03:51.200 --> 03:57.960]  это такой, который лежит с адреса кратного 4, aligned double это который лежит с адреса кратного 8,
[03:57.960 --> 04:06.480]  вопрос, а что плохого, если так, вот допустим я положил int по адресу не кратному 4,
[04:06.480 --> 04:23.760]  да, ну на самом деле это все, я вот не знаю точно, к сожалению, я пытался там гуглить ответы на этот
[04:23.760 --> 04:31.520]  вопрос, вот и там, короче, на разных сайтах пишут очень много разных вещей, я в итоге так и не
[04:31.520 --> 04:41.040]  понял это undefined или unspecified, ну это что-то скорее всего implementation defined, то есть зависит от
[04:41.040 --> 04:48.640]  процессора, вот смотря какой у вас процессор, именно процессор, он по-разному будет реагировать
[04:48.640 --> 04:56.160]  на misaligned переменные, какой-то процессор может просто от этого, ну скорее всего это
[04:56.160 --> 05:01.880]  действительно будет просто замедление работы, потому что процессор он же читает, ну как,
[05:01.880 --> 05:10.120]  он выполняет инструкции, там, чтения и он делает это там кусками по 4 или по 8 байт, по 8 скорее
[05:10.120 --> 05:17.480]  всего, не по 4, и если у вас int, так вот у вас кусок 4 из 4 байт, еще кусок из 4 байт, там вот это
[05:17.480 --> 05:23.360]  кусок из 8 байт и вот это вот предыдущий кусок из 8 байт, если у вас int лежит таким образом,
[05:23.360 --> 05:29.520]  что он вот задевает 1 байт отсюда и 3 байта отсюда, то процессору, чтобы такой int прочитать и
[05:29.520 --> 05:36.640]  записать, нужно будет в два раза больше инструкции выполнить, грубо говоря, чем чтобы нормально
[05:36.640 --> 05:41.920]  лежащий int записать, вот, но тут мы приходим к разговору о том, как устроен процессор там,
[05:41.920 --> 05:47.680]  какие в нем бывают инструкции, как это все может быть оптимизировано, но этот разговор я не хочу
[05:47.680 --> 05:52.640]  начинать, вот, и я не уверен, что я смогу все правильно рассказать про это, но если вкратце,
[05:52.640 --> 05:58.120]  то скорее всего, просто это придет к тому, что он будет дольше работать, ну вы можете, наверное,
[05:58.120 --> 06:07.200]  создать вручную такую ситуацию и замерить, и проверить, что будет, вот, ну вот, тут, там,
[06:07.200 --> 06:12.920]  если у вас какой-нибудь intel x86 64, то, скорее всего, так и будет, как я сказал, если у вас какой-нибудь
[06:12.920 --> 06:17.680]  другой процессор, какой-нибудь AMD, то может быть, будет какой-нибудь другой эффект, в каком-то
[06:17.680 --> 06:24.280]  процессоре может вообще не будет заметен эффект, он как-то умудряется справиться так же, вот,
[06:24.280 --> 06:32.120]  а в каком-то процессоре может быть вообще секфолд будет, вот, но, скорее всего, ничего плохого не
[06:32.120 --> 06:38.920]  будет, будет просто замедление, так вот, чтобы нам это побороть, нам хотелось бы уметь переменные
[06:38.920 --> 06:46.360]  класть по адресам правильно выровненным, и вот, когда вы такой массив чаров на стеке заводите,
[06:46.360 --> 06:58.600]  вам нужно позаботиться о том, чтобы он, ну, чтобы он начинал, чтобы его, чтобы он начинал лежать
[06:58.600 --> 07:11.000]  с адреса кратного, ну, 16, скажем, да, правильно, ну, то есть, вам нужно заботиться о том, чтобы
[07:11.000 --> 07:16.440]  этот массив начинался с правильного адреса, и о том, чтобы, когда вы что-то выделяете, вот этот,
[07:16.440 --> 07:23.000]  вот, стек, вот, как сказать, push делаете у него, чтобы вы тоже, если вам, вас сейчас адрес не кратит
[07:23.000 --> 07:32.280]  какому-то числу, чтобы вы тоже не, ну, в общем, соблюли выравнивание, вот, как этого добиться?
[07:32.280 --> 07:44.000]  Прежде чем я расскажу, как этого добиться, давайте я расскажу про то, а как вообще в стандартной
[07:44.000 --> 07:48.640]  ситуации это происходит, вот, если вы, допустим, используете оператор new, но вот если вы кладете
[07:48.640 --> 07:53.880]  что-то на обычном стеке, вот, если вы просто заводите переменные на стеке, там, int, double,
[07:53.880 --> 08:01.520]  на стек кладете, то они выровнены, как полагается, вот, ну, это просто там, забота компилятора,
[08:01.520 --> 08:12.160]  так их класть на стек, а если вы оператором new пользуетесь, как он выравнивает? Ну, или давайте по
[08:12.160 --> 08:16.400]  другому, если мы функцией malloc пользуемся, то как она выравнивает? Вот, если вы сишный malloc
[08:16.400 --> 08:20.680]  вызываете, а потом, то есть вы хотите выделить объект типа T, и вы решили вместо new воспользоваться
[08:20.680 --> 08:32.520]  malloc'ом, malloc принимает просто число byte и возвращает вове звездочку, вот, отличная мысль, вот,
[08:32.520 --> 08:38.400]  в этом есть некоторое, некоторое отличие malloc перед new, но на самом деле malloc все-таки выравнивает,
[08:38.400 --> 08:45.240]  а просто, чтобы вы об этом не думали, все там реализовано так, что malloc дает вам выровненный
[08:45.240 --> 08:51.240]  по, ну, скорее всего по 16 байт адреса, вы можете затестить, попробуйте malloc вызвать много раз,
[08:51.240 --> 09:02.880]  заметите, что все время они выровнены. Ну, если ты сделаешь много раз malloc на 1 байт, да, то ты,
[09:02.880 --> 09:11.920]  скорее всего, ты получишь выровненный по 16, как и через new, вот, это сделано потому, что, кстати,
[09:11.920 --> 09:16.520]  может быть, нет, вот, на счет, если ты выйдешь 1 байт, может быть, он умный, и он поймет,
[09:16.520 --> 09:23.160]  что выровнять по 16 бессмысленно, то есть ты 1 байт, я не знаю, я не знаю, вот, может быть,
[09:23.160 --> 09:31.080]  Леша Пономарев знает, он вам завтра расскажет. Завтра мы вам собираемся рассказать про то,
[09:31.080 --> 09:36.560]  как malloc работает, сам уже, сам непосредственно malloc, вот, это интересная тема, я думаю, что.
[09:36.560 --> 09:48.440]  Наибольшие 9 двойки относительно чего?
[09:48.440 --> 10:00.200]  Нет, если я попрошу 100 байт, он выровняет на 16, потому что вдруг у меня структура,
[10:00.200 --> 10:14.640]  которая, ну, не знаю, ну, короче, скорее всего, он выравнивает, вот, насколько мне известно,
[10:14.640 --> 10:21.560]  он выравнивает на 16 все-таки, ну, то есть он выравнивает на, он выравнивает на некоторое
[10:21.560 --> 10:30.720]  число, которое, опять-таки, implementation defined. Вот у вас на, у вас, да, от разных, от того,
[10:30.720 --> 10:37.840]  на какой вы платформе живете, зависит, насколько он будет выравнивать. Вот, чтобы узнать, насколько
[10:37.840 --> 10:49.440]  выравнивает new ваши переменные по умолчанию, значит, new, он тоже, на самом деле, возвращает
[10:49.560 --> 10:57.320]  адрес всегда выровненный по какому-то количеству байт по умолчанию, вот, как и malloc, в общем,
[10:57.320 --> 11:01.760]  потому что new, он, скорее всего, вызывает malloc, в конце концов, на низком уровне, вот, и есть такая
[11:01.760 --> 11:10.880]  константа, ну, это даже не константа, это вот что, значит, есть такой тип в стандартной библиотеке,
[11:10.880 --> 11:23.920]  называется std max align t. Что это за тип, как вы думаете? Это такой тип, который, выравнивание
[11:23.920 --> 11:34.280]  которого такое же, как максимально возможное выравнивание для примитивного типа на вашей
[11:34.280 --> 11:40.960]  платформе. Ну, вот, скорее всего, самый жесткий тип, самый жесткий по выравниванию у вас,
[11:40.960 --> 11:53.240]  это long double. Вот, может быть, он просит выравнивание 16, нет, да, но double он 8, а long double 16,
[11:53.240 --> 11:57.160]  ну, скорее всего, это все опять, я напомню, что все эти числа, которые говорю, они тоже зависят
[11:57.160 --> 12:22.000]  от платформы, long double, вот, да, да, может быть, у вас еще есть int 128t, вот, ну, по-моему,
[12:22.840 --> 12:28.960]  он появился официально. Ну, Майк Мирзаянов, спасибо ему за платформу codeforces-полигон,
[12:28.960 --> 12:36.000]  писал пост об этом, значит, на своей когда-то, по-моему, он появился там официально, но,
[12:36.000 --> 12:49.280]  может, я что-то путаю. Кто, int 128t? Ну, наверняка, должность чего бы нет. А, ну, не знаю таких
[12:49.280 --> 12:56.960]  подробностей. Вот, но он тоже 16, байт занимается 128 поделить на 8, это будет 16. То есть вот они
[12:56.960 --> 13:03.560]  должны выравниваться по 16. Ну, вот, max align t, это такой тип, выравнивание которого оно такое же,
[13:03.560 --> 13:11.960]  как у максимально жесткого по выравниванию стандартного типа. А как узнать выравнивание,
[13:11.960 --> 13:21.040]  собственно, типа? Вот вы можете, наряду с sizeof, спросить еще align of у типа. Начиная с c++11,
[13:21.040 --> 13:29.400]  кстати, я не знаю, куда надо было делать до c++11, если честно, но вот начиная с c++11, появился
[13:29.400 --> 13:36.040]  оператор align of, это прям оператор, и он позволяет вам для данного типа узнать, какое у него
[13:36.040 --> 13:43.800]  выравнивание. Ну, вот как sizeof. Вы просто пишете, например, align of в одно слово, там от чего-нибудь,
[13:43.800 --> 13:54.520]  там от int, и получите 4. Ну, вот для примитивных типов align of будет как sizeof, скорее всего. Но
[13:54.520 --> 13:59.920]  если у вас структура какая-нибудь с полями разными, например, у вас может, ну, вот если у вас структура,
[13:59.920 --> 14:10.520]  в которой есть double там и int, то понятно, что ее выравнивание будет 8. Ну, это все опять
[14:10.520 --> 14:20.480]  implementation defined, то есть я живу в предположении, что double это 8, а int это 4. Да, а если в структуре
[14:20.480 --> 14:35.920]  2 int, то выравнивание будет 4. Что если возьмем? Нет, а plus-plus прибавляет sizeof, а не align of. Да,
[14:35.920 --> 14:45.080]  структура выравнивается по размеру наибольшего поля, наибольшего по... Ну, если у вас полем тоже
[14:45.080 --> 14:57.080]  является структура, то значит, по ее выравниванию, да. Вот. Ну, хорошо. Ну, на самом деле, когда вы new
[14:57.080 --> 15:01.840]  вызываете или когда malloc вызываете, то у вас, в общем-то, вот это выравнивание, оно так и соблюдается. То
[15:01.840 --> 15:06.200]  есть все, что вы делаете через new, вы не паритесь про выравнивание, потому что он, ну, может быть,
[15:06.200 --> 15:12.840]  для меньших, для типов меньшего размера он выравнивает там хуже, если понимаешь, что не нужно. Хотя,
[15:12.840 --> 15:18.600]  я не знаю. Мне кажется, что он... Ну, в общем, не знаю. Но уж точно он не сделает вам выравнивание хуже,
[15:18.600 --> 15:22.680]  чем max.line.t, если ваша структура требует выравнивания max.line.t. Он сделает правильное
[15:22.680 --> 15:35.840]  выравнивание, потому что он просто, скорее всего, всегда его делает. Да. Да. Да. Да. Да.
[15:35.840 --> 15:55.160]  Да. Да, именно поэтому. У этой структуры размер 16, потому что padding, потому что размер устроен так.
[15:55.160 --> 16:09.100]  Ну, вот если бы у вас... Если бы у вас... Вот если у вас структура с даблом и двумя
[16:09.100 --> 16:14.040]  интами, то ее размер зависит от того, в каком порядке вы перечистите поля, я напоминаю. Вот,
[16:14.040 --> 16:19.520]  кажется, я про это уже говорил, но может... Понятно, что вот у такой структуры, как написано, размер будет
[16:19.520 --> 16:37.640]  16, а если я поменяю местами intdouble, то размер станет 24. Вот. Так вот. А как мне, допустим,
[16:37.640 --> 16:45.680]  сделать выравнивание больше, чем стандартное? И тут возникает вопрос, зачем мне может быть
[16:45.680 --> 16:50.560]  нужно выравнивание больше, чем стандартное, в принципе? Ну, во-первых, мне, может быть,
[16:50.560 --> 16:54.640]  оно вот здесь нужно, да. То есть, если у меня есть вот эта ваша структура, которая называется stack
[16:54.640 --> 17:08.120]  storage, да... Да, ну вот, например, у этой структуры я, наверное, хотел бы... Это массив чаров на стеке.
[17:08.120 --> 17:12.120]  Наверное, я хотел бы, чтобы у этой структуры выравнивание было 16. Несмотря на то, что мне
[17:12.120 --> 17:28.560]  лежит массив чаров, я хочу, чтобы выровнен он был по 16. Да. Ну, например, размер от этого меняется.
[17:28.560 --> 17:40.440]  Потому что поля при создании объекта инициализируются в порядке, в котором они перечислены. Почему это важно?
[17:40.440 --> 17:48.720]  Почему это существует? Что существует? Почему компилятор не может за пользователя переставить
[17:48.720 --> 17:55.000]  оптимальным образом объекты внутри его структуры, а инициализировать в порядке, в котором пользователь перечислен.
[17:55.000 --> 18:10.080]  Потому что раньше не было обращения к указателю плюс длина, или что? Я думаю, что это мы унаследовали
[18:10.080 --> 18:19.120]  от Си в каком-то смысле, потому что вы иногда хотите, чтобы у вас... Ну, вы иногда хотите... Да нет, хотите.
[18:19.120 --> 18:33.600]  Ну, если вам нужно низкоуровнево сконструировать поля по отдельности, ну, вы можете заполнять структуры,
[18:34.080 --> 18:41.200]  вызывая конструкторы полей по отдельности. Ну, там конструкторов, конечно, не было. Но если у вас какая-нибудь штука,
[18:41.200 --> 18:47.920]  например, вы на низком уровне что-то по сети передаете, там какие-нибудь пакеты с данными, то у вас вы можете
[18:47.920 --> 18:56.320]  хотеть, чтобы эта структура... Ну, да, вы, не знаю, какие-нибудь TCP connection делаете, и там нужно, чтобы у вас
[18:56.320 --> 19:01.840]  сначала был бит того, потом бит всего, потом вот то число, то число. Если вы их в структуру оформите,
[19:02.080 --> 19:06.800]  то вы знаете, что они именно в таком порядке будут лежать. Тогда вы можете просто эту структуру закодировать,
[19:06.800 --> 19:13.600]  там, custom, сказать ее size of и передать как биты просто сырые. Ну, напишите. Давайте выберем порядок.
[19:13.600 --> 19:21.760]  Пусть для этого нужно будет написать какую-нибудь прагму не переупорядочивать. Слушайте, а я не вижу большой
[19:21.760 --> 19:31.280]  проблемы. Ты что у вас так... Вы как-то так... Так тебе не приходится думать. Ты пишешь, и оно работает.
[19:31.280 --> 19:38.960]  Нет, тебе об этом приходится думать, только если ты прям очень хочешь сэкономить память. Ну, если ты так,
[19:38.960 --> 19:51.440]  если напишешь, ну, оно будет работать нормально. Ну, короче, не знаю. Ну, мне не кажется это прям
[19:51.440 --> 19:56.880]  большой проблемой. Ну, типа, ну, если тебе прям важно, чтобы было 16, а не 24 байт, ну, переупорядочить,
[19:56.880 --> 20:03.480]  да. Но зато по умолчанию ты знаешь, что поля лежат именно в том порядке. То есть, если ты начнешь
[20:03.480 --> 20:09.000]  структуру как биты представлять, то ты понимаешь, что именно там лежит это поле. Ну, вот с переменными
[20:09.000 --> 20:14.960]  на стеке не так. С переменными на стеке, когда вы заводите переменные на стеке, кладете int, потом double,
[20:14.960 --> 20:19.640]  потом int. Компилятор имеет право переупорядочивать. Скорее всего, это делает. Если вы на стеке, на стеке
[20:19.640 --> 20:24.920]  заведете int, потом double, потом int. А вот если вы их в структуру оформите, то уже и компилятор
[20:24.920 --> 20:33.960]  не имеет права так делать. Вот. Ну, не знаю, хорошо это или плохо. Ну, вот так. Так вот, а как мне
[20:33.960 --> 20:40.320]  сделать выравнивание не такое, как стандартное? Например, вот в этом случае. Вот здесь мы уже выяснили,
[20:40.320 --> 20:52.920]  зачем. Вот здесь я хочу, чтобы этот массив чаров... Да, потому что массив чаров, он лежит, он без
[20:52.920 --> 21:14.680]  выравнивания. Вот. А для этого в C++11 есть такое ключевое слово aligns. Я вот сотру заголовок,
[21:14.680 --> 21:23.680]  потому что мне нужно его вписать. Значит, оно пишется после слова struct перед названием структуры.
[21:23.680 --> 21:32.520]  Значит, вы можете попросить структуру выровнять как. Это ключевое слово. Оно пишется прямо без
[21:32.520 --> 21:41.800]  пробела. Оно подсвечивается в IDE как ключевое слово. aligns, а дальше tip. Вы можете написать либо
[21:41.800 --> 21:48.400]  жесткую константу там 16, либо вы можете написать какой-то тип и скорее всего вы хотите написать
[21:48.400 --> 22:11.680]  std max align t. Да. Вот. Тогда эта структура будет выровнена как max align t. Ну, либо какой даббл.
[22:11.680 --> 22:20.440]  А, в смысле max align... Что? Max align t это как long double, но может быть long double не самый на вашей
[22:20.440 --> 22:31.080]  платформе жирный тип. Я не знаю, какие бывают жирнее, но... Да, вы узнаете какой... Я ставлю на то,
[22:31.080 --> 22:45.240]  что там почти у всех вас 16 будет. Это тип. Ну, я могу в aligns написать число, ну как из size of,
[22:45.240 --> 22:53.080]  как из... Нет, ну да. Могу написать тип, а могу написать число просто. Причем, если я напишу не
[22:53.080 --> 22:57.680]  степень двой... Выравнивание это всегда степень двойки. Если вы передадите не степень двойки,
[22:57.680 --> 23:07.520]  то... Не знаю, но я не пробовал никогда... Не знаю. Возможно он просто округлит до ближайшей сверх
[23:07.520 --> 23:17.120]  степени двойки. А может быть... Не знаю, что он сделает. Может... Это, кстати, может быть и CE
[23:17.120 --> 23:23.440]  даже, потому что... Ну, я не уверен, что это CE, потому что это же все compile time вычисляемая штука
[23:23.440 --> 23:27.920]  должна быть. Правда, align? Ну, как и size of. Поэтому, в принципе, он может CE выдать. Ну, я не
[23:27.920 --> 23:44.400]  думаю, что... Ну, я не пробовал. Ну, я не знаю, просто не пишите так и все. Чего там на маке? А как long
[23:44.400 --> 24:04.600]  double тогда у тебя работает? Или... Что? Каких обращений? А, у тебя просто 16-байтные типы не
[24:04.600 --> 24:13.640]  поддерживаются. Может быть, у тебя какой-нибудь старый мак? Ну, я не разбираюсь в маках, честно говоря.
[24:13.640 --> 24:28.640]  Я не знаю. Ну, ничего не могу сказать, не знаю. Ну, странно, интересно. Может, у тебя
[24:28.640 --> 24:44.480]  CLN старый тогда или Compilot? Непонятно. Ну, у меня 16. А процессор у тебя какой? Ну, на интелах,
[24:44.480 --> 24:53.320]  на современных. Вот у меня интел там i7, он спокойно 16. Ну, у него там... Ну, в общем, не знаю,
[24:53.320 --> 24:58.600]  от чего это зависит. Это может зависеть от процессора, может и от операционки, от, не знаю, много от чего.
[24:58.600 --> 25:07.920]  Фиг знает. Можно погуглить, почитать. Вот, ну ладно, CLNs понятно, CLN of понятно. Теперь дальше. А как...
[25:07.920 --> 25:18.200]  Могу ли я сделать выравнивание больше, чем MaxLineT? И надо ли мне это? Может ли мне быть это надо?
[25:18.200 --> 25:34.840]  Наверное, может, но не надо. Значит, есть такая штука, как SSE. Знаешь, что такое SSE? Да, значит,
[25:34.840 --> 25:50.160]  расшифровывается-то как? Что-то типа Stream, SIMD, E, не помню, как расшифровывается, E, Execution может быть. Ну вот
[25:50.160 --> 25:59.800]  это само по себе аббревиатура, она расшифруется как SIMD. Классно. Вот первое... И левая эссет тоже SIMD, да?
[25:59.800 --> 26:12.640]  Extensions. А, Extensions, да, отлично. Stream, SIMD, Extensions. А SIMD расшифровывается как Single Instruction Multiple Data.
[26:12.640 --> 26:41.280]  Значит, что это за штука? Это такой... Кратным чему должен быть адрес твой? Да. Ну вот я тебе как раз и привел пример такой структуры, представь, что этого интернета нет.
[26:41.280 --> 26:55.040]  Вот у тебя такая структура есть. Вот у тебя такая структура, нет третьего int. У такой структуры выравнивание будет 8.
[26:55.040 --> 27:08.560]  Чтобы этот double лежал по адресу 8, этот лежал... Ну все, вот у этой размер 16, а выравнивание 8. Ну 4 байта Padding. Вот у этой тоже размер 16.
[27:08.560 --> 27:34.480]  А вопрос в чем? Да. Ну в стринге лежит чар-звездочка с ICT, с ICT, ну и еще локатор, как мы теперь знаем. Ну все.
[27:34.480 --> 27:43.760]  Нет, которые выровнены более, чем настолько байта. Вот как раз маска с ICT это такая штука. В конце концов все сводится к числам тем или иным, если ты все раскусишь, все расшифруешь.
[27:43.760 --> 27:54.800]  И у тебя получается, что самое жирное, что бывает, это long double, ну и lin 128t, у него 16. А, да, бывает еще указатель. Указатель на метод, кстати, еще бывает жирным.
[27:55.600 --> 28:17.600]  Вот указатели, кстати, мы про это, по-моему, не говорили. Указатели на методы, они занимают больше памяти, чем обычные указатели и чем указатели на функции. Какой сдвиг?
[28:18.400 --> 28:45.520]  Указатель на метод это… Указатель на метод это… Указатель на метод класс. Да. Ну вот ему нужно хранить указатели, видимо, на что, не знаю. Да, значит указатели на методы, они занимают обычно в два раза больше памяти, чем обычные указатели, потому что указателю на метод нужно хранить не просто адрес метода, а еще и адрес, с которого начинается this относительно.
[28:45.520 --> 29:11.440]  Ну, то есть, если у вас наследование, то вы можете вызывать метод родителя, нет, вы должны знать, где this лежит. Вот если вы вызываете адрес, если вы вызываете у какого-нибудь объекта наследника метод родителя, а этот родитель, скажем там, какой-нибудь виртуальный,
[29:11.440 --> 29:22.360]  или он просто второй, то вот этому родителю в своем методе нужно знать, что на самом деле относительно начала объекта родитель начинается вот сдвинутый на столько-то.
[29:22.360 --> 29:37.280]  То есть, если вы вызываете метод отца, у вас есть мама, папа и сын, и вы вызываете метод папы от сына, то этому методу папы при его вызове нужно знать, что this начинается позже, чем объект начинается.
[29:37.280 --> 29:48.200]  Вот там в таком-то стиле, и вот в указательный метод нужно хранить эту информацию. Поэтому указательный метод жирнее, чем 8 обычно.
[29:48.200 --> 29:52.200]  Указательный метод отца нельзя применять в применение у сына.
[29:52.200 --> 29:55.200]  Нет, почему? Как раз можно, благодаря тому, что я сказал.
[29:55.200 --> 30:07.120]  То есть, я создам указатель у отца, у структуры А указательный метод х, а потом применю этот указатель у структуры Б.
[30:07.120 --> 30:10.120]  Как раз благодаря тому, что я сказал, так и можно делать.
[30:11.040 --> 30:18.040]  Ну хорошо, допустим, у меня структура С от 2х А и Б наследуется.
[30:18.040 --> 30:24.040]  Я использую указатель структуры B для объекта С.
[30:24.040 --> 30:28.040]  То есть, как он вообще может понимать? Непонятно.
[30:28.040 --> 30:33.040]  То есть, он же предназначался исходно для B, как он вообще может значиться?
[30:33.960 --> 30:40.960]  Что такое указатель на функцию? Это просто адрес, где хранится исполняемый код этой функции.
[30:40.960 --> 30:48.960]  Но указательный метод отличается от обычного указательного функции тем, что он как раз хранит еще сдвиг относительно начала объекта.
[30:48.960 --> 30:53.960]  Где объект начинается? Ты в метод неявно перейдешь первым аргументом this.
[30:53.960 --> 30:56.960]  И он думает, что this это и есть начало моего объекта.
[30:56.960 --> 31:05.880]  Но если ты передал туда не настоящий этот тип, а его наследника, то ему нужно как-то узнать, что на самом деле this начинается не там, где ему дали, а правее, например.
[31:12.880 --> 31:23.880]  Ну так вот, ладно, давайте вернемся к SSE. Смотрите, на современных процессорах некоторых есть такой крутой режим,
[31:24.800 --> 31:31.800]  что вы можете, ну, например, 128-битное число перемножать за одну инструкцию или еще299 битное число перемножать за одну инструкцию.
[31:31.800 --> 31:37.020]  Битные числа там перемножать за одну инструкцию или еще лам лучше 256 битные числа перемножать
[31:37.020 --> 31:49.020]  Вы не можете перемножать 256 битные за одну инструкцию, вы можете 256 битное число интерпретировать как четыре маленьких числа и все их параллельно перемножить
[31:49.020 --> 31:51.020]  А, да
[31:51.020 --> 31:53.020]  Симд мультипол дута
[31:53.020 --> 31:55.020]  Туда его
[31:55.020 --> 31:57.020]  Да, значит я неправильно сказал, да, окей
[31:57.020 --> 31:59.020]  Мультипол дута, она именно потому что мультипол
[31:59.240 --> 32:09.240]  Да, наверное это более правильно, что вы можете взять четыре маленьких числа и перемножить их как бы параллельно одновременно
[32:09.240 --> 32:15.240]  Честно скажу, не знаю куда это работает подробно, потому что ну просто не знаю
[32:15.240 --> 32:19.240]  Вот, я не пользовался на самом деле этим на практике, только
[32:19.240 --> 32:21.240]  Вот, но
[32:21.240 --> 32:25.240]  Если вы, ну если вы хотите этим пользоваться
[32:25.240 --> 32:27.240]  То вам может понадобиться
[32:27.460 --> 32:29.460]  А
[32:29.460 --> 32:33.460]  Ну вот для такого как раз вам может быть нужно, чтобы ваше выравнивание было
[32:33.460 --> 32:39.460]  Ну вот, например, если у вас там SSE вот эти вот 200-256 битные
[32:39.460 --> 32:50.460]  То вам может быть нужно, чтобы как раз вот эти вот, сколько там у вас получается, 8 винтов, да, лежали по адресу кратному 256
[32:50.460 --> 32:54.460]  По адресу кратному 32, а не 256
[32:54.680 --> 32:58.680]  Короче, если вы хотите пользоваться векторными инструкциями
[32:58.680 --> 33:04.680]  Вот этими вот built-in functions, которые перемножают сразу много винтов за раз
[33:04.680 --> 33:08.680]  Вам как раз может понадобиться выравнивание больше чем 16
[33:11.680 --> 33:16.680]  Вот, и если вы там пишете какую-нибудь высоко оптимизированную, какую-нибудь матричную
[33:16.680 --> 33:20.680]  Какое-нибудь там перемножение матриц каких-нибудь, которые вот там сделаны, знаете, там всякие библиотеки
[33:20.900 --> 33:26.900]  Для нейросеточек какие-нибудь там, какой-нибудь TensorFlow наверняка этим пользуется
[33:26.900 --> 33:31.900]  Вот там, скорее всего, умножение чисел, оно делается
[33:31.900 --> 33:37.900]  Ну, в общем, чтобы перемножить там 4 числа, найти скалярное произведение векторов
[33:37.900 --> 33:41.900]  И перемножаете там сразу большими кусками по несколько винтов, и складываете их
[33:41.900 --> 33:45.900]  Вот, тогда вам может понадобиться выравнивание больше чем 16
[33:46.120 --> 33:48.120]  Например, вот такой пример
[33:48.120 --> 33:54.120]  То есть Lines больше чем размер максимального типа, который у вас существует
[33:54.120 --> 33:56.120]  Он, ну, бывает
[33:56.120 --> 33:58.120]  Если вы такую штуку делаете
[34:00.120 --> 34:02.120]  Вот
[34:02.120 --> 34:05.120]  Мы так и не дошли до момента, как выравнивать
[34:05.120 --> 34:07.120]  Что?
[34:07.120 --> 34:09.120]  Вот мы и научились выравнивать массив чаров
[34:09.120 --> 34:11.120]  Да
[34:11.120 --> 34:14.120]  А теперь я хочу на массив чаров положить очередной double
[34:14.120 --> 34:15.120]  Так
[34:15.340 --> 34:17.340]  Не раньше, чем позиция pos
[34:17.340 --> 34:19.340]  Да
[34:19.340 --> 34:21.340]  Как?
[34:21.340 --> 34:23.340]  Ну, ты хранишь сколько у тебя байт задит
[34:23.340 --> 34:25.340]  Следишь просто за адресом
[34:25.340 --> 34:27.340]  Смотришь, если он не красен восьми
[34:27.340 --> 34:29.340]  Первый файл
[34:29.340 --> 34:31.340]  Ну, да
[34:31.340 --> 34:33.340]  Я же думал, да
[34:33.340 --> 34:35.340]  Эм
[34:35.340 --> 34:37.340]  Нет, какой-нибудь std...
[34:37.340 --> 34:39.340]  Если ты наста...
[34:39.340 --> 34:41.340]  Так я не подходишь
[34:41.560 --> 34:43.560]  Скоро std будет где-нибудь в адресу
[34:43.560 --> 34:45.560]  И мы заживем
[34:45.560 --> 34:47.560]  Do everything for me
[34:47.560 --> 34:49.560]  std
[34:49.560 --> 34:51.560]  std do whatever I want
[34:51.560 --> 34:53.560]  Я не знаю
[34:53.560 --> 34:55.560]  А что, а что
[34:55.560 --> 34:57.560]  Пока, насколько я знаю, стандарт не планирует такое добавлять
[34:57.560 --> 34:59.560]  Можешь в весне внести пропозал
[34:59.560 --> 35:01.560]  На университет
[35:01.560 --> 35:03.560]  Антон Палухин его рассмотрит
[35:03.560 --> 35:05.560]  От России предложение
[35:05.560 --> 35:07.560]  Стандарт внести решение
[35:07.560 --> 35:09.560]  Вся издача представлены в первый класс
[35:09.560 --> 35:11.560]  В первый класс
[35:13.560 --> 35:15.560]  Так
[35:15.560 --> 35:17.560]  Короче, с выравниванием
[35:17.560 --> 35:19.560]  Понятно, ну если вы
[35:19.560 --> 35:21.560]  Вручную типа стэк пишете по сути
[35:21.560 --> 35:23.560]  То да, наверное, вам вручную выравнивать надо сделать
[35:23.560 --> 35:25.560]  Ну, насколько я знаю, нет оператора
[35:25.560 --> 35:27.560]  Может я просто что-то...
[35:27.560 --> 35:29.560]  Вот у меня сейчас число, я храню, скажем, позицию
[35:29.560 --> 35:31.560]  Мне приходит
[35:31.560 --> 35:33.560]  Запрос на выделение памяти
[35:33.560 --> 35:35.560]  Который выглядит как
[35:35.560 --> 35:37.560]  Какой размер
[35:37.560 --> 35:39.560]  Мне же не приходит align of
[35:39.560 --> 35:41.560]  Мне еще нужно передавать в allocator align of
[35:41.560 --> 35:43.560]  Или, Аня, я вызываю, типа, сейчас
[35:43.560 --> 35:45.560]  Стэк сторожем ты пользуешь
[35:45.560 --> 35:47.560]  Стэк сторож это твой класс, ты в стэк сторож
[35:47.560 --> 35:49.560]  Можешь передавать align, да
[35:49.560 --> 35:51.560]  Круто
[35:51.560 --> 35:53.560]  В качестве параметра, из allocator
[35:53.560 --> 35:55.560]  То есть, когда ты allocator'ом пользуешься, ты не думаешь об этом
[35:55.560 --> 35:57.560]  А когда allocator вызывает методы stack storage
[35:57.560 --> 35:59.560]  Он уже думает об этом
[35:59.560 --> 36:01.560]  Окей, ему передали align of
[36:01.560 --> 36:03.560]  Я такой
[36:03.560 --> 36:05.560]  Вот у меня есть поз
[36:05.560 --> 36:07.560]  Кратен вот этому вот
[36:07.560 --> 36:09.560]  Я могу его сдвинуть два раза
[36:09.560 --> 36:11.560]  Что-то такое сделать
[36:11.560 --> 36:13.560]  Ну, типа
[36:13.560 --> 36:15.560]  Ну, короче, все, давайте
[36:15.560 --> 36:17.560]  Закончим
[36:17.560 --> 36:19.560]  С выравниванием понятно, да
[36:19.560 --> 36:21.560]  Ну, в метод stack storage
[36:21.560 --> 36:23.560]  Соответствующий
[36:23.560 --> 36:25.560]  У тебя есть метод stack storage?
[36:25.560 --> 36:27.560]  Ну, типа push, не знаю
[36:27.560 --> 36:29.560]  Alloc, не знаю
[36:29.560 --> 36:31.560]  Так, теперь
[36:31.560 --> 36:33.560]  Есть еще в стандартной библиотеке
[36:33.560 --> 36:35.560]  Вот такая функция aligned alloc
[36:35.560 --> 36:37.560]  Который можно передать
[36:43.560 --> 36:45.560]  Число alignment
[36:45.560 --> 36:47.560]  А есть еще оператор new
[36:47.560 --> 36:49.560]  С параметром alignment
[36:49.560 --> 36:51.560]  Вы можете
[36:51.560 --> 36:53.560]  Есть такая форма оператора new
[36:53.560 --> 36:55.560]  В которую параметром можно
[36:55.560 --> 36:57.560]  Передать alignment
[36:57.560 --> 36:59.560]  Alignment причем
[36:59.560 --> 37:01.560]  Ну, там
[37:01.560 --> 37:03.560]  Есть, я не помню, как он называется
[37:03.560 --> 37:05.560]  Специальный целочисленный тип
[37:05.560 --> 37:07.560]  Это, скорее всего, просто size t
[37:07.560 --> 37:09.560]  Нет, это наследник size t
[37:09.560 --> 37:11.560]  Ой, господи
[37:11.560 --> 37:13.560]  Нет, виноват, не наследник size t
[37:17.560 --> 37:19.560]  Это наследник
[37:19.560 --> 37:21.560]  Какого-то типа, который является
[37:21.560 --> 37:23.560]  Структурой, которая содержит только size t
[37:23.560 --> 37:25.560]  Короче
[37:25.560 --> 37:27.560]  Не помню этих подробностей
[37:27.560 --> 37:29.560]  В общем, у вас есть
[37:29.560 --> 37:31.560]  Вы можете в new передать число
[37:31.560 --> 37:33.560]  Там 8
[37:33.560 --> 37:35.560]  Но правильно его интерпретировав
[37:35.560 --> 37:37.560]  То есть у вас там есть тип
[37:37.560 --> 37:39.560]  STD, alignment
[37:39.560 --> 37:41.560]  Я забыл, как он называется
[37:41.560 --> 37:43.560]  Ну, короче, в оператор new вы можете
[37:43.560 --> 37:45.560]  Передать параметром, когда вы выделяете
[37:45.560 --> 37:47.560]  New t от 5
[37:47.560 --> 37:49.560]  И вы можете попросить
[37:49.560 --> 37:51.560]  Или new int от 5
[37:51.560 --> 37:53.560]  New вот сюда
[37:53.560 --> 37:55.560]  Вы можете alignment передать
[37:55.560 --> 37:57.560]  Этот int, допустим, по 32 выровнять
[37:57.560 --> 37:59.560]  Хотите как раз с s и e делать
[38:01.560 --> 38:03.560]  Так, а что еще есть?
[38:03.560 --> 38:05.560]  Значит, вот в
[38:05.560 --> 38:07.560]  Бусте есть такой
[38:07.560 --> 38:09.560]  Буст
[38:09.560 --> 38:11.560]  Да, ну есть такая самая популярная
[38:11.560 --> 38:13.560]  Библиотека расширения STD
[38:13.560 --> 38:15.560]  Я бы так сказал
[38:15.560 --> 38:17.560]  Да, да, песочница комитета
[38:17.560 --> 38:19.560]  По стандартизации
[38:19.560 --> 38:21.560]  Все, что есть в бусте, рано или поздно
[38:21.560 --> 38:23.560]  Переходит в стандарт, просто буст
[38:23.560 --> 38:25.560]  Такая библиотека, в которой есть много чего
[38:25.560 --> 38:27.560]  В частности, там, кстати, есть, по-моему, и stack allocator тоже
[38:27.560 --> 38:29.560]  А может и нет, я не помню
[38:29.560 --> 38:31.560]  Но там точно есть много разных allocator
[38:31.560 --> 38:33.560]  В том числе, там есть aligned allocator
[38:33.560 --> 38:35.560]  Вот есть STD allocator
[38:35.560 --> 38:37.560]  И, в принципе, в STL-то больше
[38:37.560 --> 38:39.560]  Особо нет никаких интересных allocator
[38:39.560 --> 38:41.560]  А вот в бусте, например, есть aligned allocator
[38:41.560 --> 38:43.560]  И он как раз позволяет вам
[38:43.560 --> 38:45.560]  Ну, то есть у вас же нет allocator
[38:45.560 --> 38:47.560]  А представьте, что вы хотите
[38:47.560 --> 38:49.560]  В контейнер передать allocator
[38:49.560 --> 38:51.560]  Который бы там выравнивал
[38:51.560 --> 38:53.560]  По 32, например
[38:53.560 --> 38:55.560]  Вот вы не можете завести вектор
[38:55.560 --> 38:57.560]  От int так, чтобы int
[38:57.560 --> 38:59.560]  Были выровнены по 32
[38:59.560 --> 39:01.560]  Ну, чтобы вектор был, у вас нет просто
[39:01.560 --> 39:03.560]  В STL нету
[39:03.560 --> 39:05.560]  Такого классного
[39:05.560 --> 39:07.560]  Но вот в бусте есть STD aligned allocator
[39:07.560 --> 39:09.560]  Который вы в конструктор
[39:09.560 --> 39:11.560]  Передаете параметры alignment
[39:11.560 --> 39:13.560]  И он просто делает то же самое, что и обычный allocator
[39:13.560 --> 39:15.560]  Но просто еще выравнивание делает другое
[39:17.560 --> 39:19.560]  Но, соответственно, вот этому new
[39:19.560 --> 39:21.560]  Он, по сути, вызывает
[39:21.560 --> 39:23.560]  Просто new с соответствующим выравниванием
[39:23.560 --> 39:25.560]  Вот этому new парно
[39:25.560 --> 39:27.560]  Соответствует delete
[39:27.560 --> 39:29.560]  С соответствующим параметром
[39:29.560 --> 39:31.560]  Но сейчас мы про это поговорим
[39:31.560 --> 39:33.560]  Вот, и еще о чем я хотел сказать в этом пункте
[39:33.560 --> 39:35.560]  Это bit fields
[39:35.560 --> 39:37.560]  Битовые поля
[39:37.560 --> 39:39.560]  Мне кажется, это тема, которую здесь стоит упомянуть
[39:39.560 --> 39:41.560]  Но это такая
[39:41.560 --> 39:43.560]  Не то чтобы часто используемая штука
[39:45.560 --> 39:47.560]  Вот, но я в свое время как раз
[39:47.560 --> 39:49.560]  Познакомился с битовыми полями, когда вот
[39:51.560 --> 39:53.560]  Как раз делал то, что я говорил
[39:53.560 --> 39:55.560]  Там
[39:55.560 --> 39:57.560]  Бывает нужно
[39:57.560 --> 39:59.560]  По сети низкоуровнево передать
[39:59.560 --> 40:01.560]  Пакеты, сформировать
[40:01.560 --> 40:03.560]  Структуру, которая в себе содержит
[40:03.560 --> 40:05.560]  В правильном порядке заполненные
[40:05.560 --> 40:07.560]  Поля
[40:07.560 --> 40:09.560]  Запроса, грубо говоря
[40:09.560 --> 40:11.560]  Если вы делаете TCP запрос куда-то
[40:11.560 --> 40:13.560]  То вам нужно заполнить
[40:13.560 --> 40:15.560]  Структуру
[40:15.560 --> 40:17.560]  В правильном порядке, положив поля в нее
[40:17.560 --> 40:19.560]  И вот тут вам могут помочь
[40:19.560 --> 40:21.560]  Битовые поля
[40:21.560 --> 40:23.560]  Что такое битовые поля
[40:23.560 --> 40:25.560]  Вы можете
[40:25.560 --> 40:27.560]  В структуре
[40:27.560 --> 40:29.560]  Сейчас, возможно, кого-то шокирую вообще
[40:29.560 --> 40:31.560]  Кто вообще знал про битовые поля?
[40:35.560 --> 40:37.560]  Ну, короче
[40:37.560 --> 40:39.560]  Я могу в структуре сделать вот так
[40:39.560 --> 40:41.560]  Допустим int i 2.3
[40:41.560 --> 40:43.560]  int j 2.5
[40:43.560 --> 40:45.560]  5
[40:47.560 --> 40:49.560]  Я ловлю взгляды
[40:53.560 --> 40:55.560]  Ну и сотру дабл
[40:57.560 --> 40:59.560]  Тогда размер такой структуры будет
[40:59.560 --> 41:01.560]  1 байт
[41:01.560 --> 41:03.560]  Вот это количество бит, которое вы хотите
[41:03.560 --> 41:05.560]  Чтобы занимало вот это вот
[41:09.560 --> 41:11.560]  Да
[41:11.560 --> 41:13.560]  Это тоже пришло к нам из C
[41:15.560 --> 41:17.560]  Значит вы можете написать поле
[41:17.560 --> 41:19.560]  Если у него целочисленный тип
[41:19.560 --> 41:21.560]  int unsigned int
[41:21.560 --> 41:23.560]  short
[41:23.560 --> 41:25.560]  Вы можете
[41:25.560 --> 41:27.560]  Только для целочисленных типов
[41:27.560 --> 41:29.560]  для вот integral types
[41:31.560 --> 41:33.560]  Вот
[41:33.560 --> 41:35.560]  Выравнивание структуры все равно
[41:35.560 --> 41:37.560]  Если ты сделаешь int i 2.1
[41:37.560 --> 41:39.560]  То у тебя будет
[41:39.560 --> 41:41.560]  У тебя будет по сути 1-битовое поле
[41:41.560 --> 41:43.560]  Если тебе нужно много 1-битовых полей
[41:43.560 --> 41:45.560]  То ты можешь сделать
[41:45.560 --> 41:47.560]  Если тебе нужно 8 1-битовых полей
[41:47.560 --> 41:49.560]  Ты можешь сделать 8 вот этих вот по одному биту
[41:49.560 --> 41:51.560]  Если тебе нужно 1-битовое поле
[41:51.560 --> 41:53.560]  2-битное поле, потом 3-битное
[41:53.560 --> 41:55.560]  То их все можешь в 1 байт упаковать за счет вот этого
[41:55.560 --> 41:57.560]  А что будет, если он написал бы
[41:57.560 --> 41:59.560]  Ну, короче, чтобы не кратно 8
[41:59.560 --> 42:01.560]  Что не кратно 8?
[42:01.560 --> 42:03.560]  int i 3 int j 4
[42:03.560 --> 42:05.560]  будет кратно 8 все равно
[42:05.560 --> 42:07.560]  Ну, размер структуры
[42:07.560 --> 42:09.560]  он умеется будет округлен
[42:09.560 --> 42:11.560]  Он все равно будет выровнен по размеру наибольшего поля
[42:11.560 --> 42:13.560]  Ну, либо до одного байта
[42:13.560 --> 42:15.560]  Если тут все вот так вот
[42:33.560 --> 42:35.560]  Важно в том смысле
[42:35.560 --> 42:37.560]  Например, ты не можешь запросить short int i
[42:37.560 --> 42:39.560]  2.20
[42:39.560 --> 42:41.560]  Потому что short int 16
[42:41.560 --> 42:43.560]  А, только меньше
[42:43.560 --> 42:45.560]  Ну да, ты можешь запросить меньше
[42:45.560 --> 42:47.560]  В чем вообще шутка? Почему?
[42:47.560 --> 42:49.560]  Это не шутка
[42:49.560 --> 42:51.560]  Это правда
[42:55.560 --> 42:57.560]  А присваивать им числа
[42:57.560 --> 42:59.560]  Ааа
[42:59.560 --> 43:01.560]  Не, это неожиданно
[43:01.560 --> 43:03.560]  В смысле
[43:03.560 --> 43:05.560]  Секунду
[43:05.560 --> 43:07.560]  Ну, я могу написать s.i
[43:07.560 --> 43:09.560]  равно, не знаю, 6
[43:09.560 --> 43:11.560]  А можно написать равно 9
[43:11.560 --> 43:13.560]  Можешь, но тогда implementation define
[43:13.560 --> 43:15.560]  что произойдет
[43:19.560 --> 43:21.560]  Ну да, но implementation define
[43:21.560 --> 43:23.560]  что произойдет
[43:23.560 --> 43:25.560]  Но он точно присвоит ему какое-то значение от 0 до 7
[43:25.560 --> 43:27.560]  На самом деле нет
[43:27.560 --> 43:29.560]  Вот если я напишу unsigned int
[43:29.560 --> 43:31.560]  Вот сейчас я не могу присвоить 6
[43:31.560 --> 43:33.560]  3-байтная битва polyint означает
[43:33.560 --> 43:35.560]  от минус 4 до 3
[43:39.560 --> 43:41.560]  Вообще это очень полезно
[43:47.560 --> 43:49.560]  Да, если вам нужно упихать
[43:53.560 --> 43:55.560]  У тебя присваивание
[43:55.560 --> 43:57.560]  все еще работает как минимум
[43:57.560 --> 43:59.560]  как присваивание int
[43:59.560 --> 44:01.560]  Вот, что вы не можете делать
[44:01.560 --> 44:03.560]  с битовыми полями
[44:03.560 --> 44:05.560]  вы не можете адрес взять
[44:05.560 --> 44:07.560]  Вы нельзя написать вот так
[44:07.560 --> 44:09.560]  это ce
[44:09.560 --> 44:11.560]  насколько я знаю
[44:11.560 --> 44:13.560]  Ну а в остальном
[44:13.560 --> 44:15.560]  пользуйтесь, пожалуйста
[44:17.560 --> 44:19.560]  Соответственно, битовые поля позволяют вам
[44:19.560 --> 44:21.560]  упаковать
[44:21.560 --> 44:23.560]  Ну, теперь понятно, что
[44:23.560 --> 44:25.560]  если я сюда допишу еще double
[44:25.560 --> 44:27.560]  то у меня все равно будет
[44:27.560 --> 44:29.560]  off этой штуки 8
[44:29.560 --> 44:31.560]  несмотря на то, что это все 1 байт занимает
[44:31.560 --> 44:33.560]  Но если у меня нет больших жирных
[44:33.560 --> 44:35.560]  чисел, то я могу
[44:35.560 --> 44:37.560]  8?
[44:37.560 --> 44:39.560]  Ну если здесь я бы еще double вернул
[44:39.560 --> 44:41.560]  то 8 байт занимал бы double
[44:41.560 --> 44:43.560]  и 1 байт вот это
[44:43.560 --> 44:45.560]  Ну все равно 16 байт был бы размер
[44:45.560 --> 44:47.560]  что double надо выровнять
[44:47.560 --> 44:49.560]  по 8
[44:51.560 --> 44:53.560]  Слушайте, ну вы так
[44:53.560 --> 44:55.560]  этому всему как-то вот
[44:55.560 --> 44:57.560]  удивляетесь
[44:57.560 --> 44:59.560]  что вот
[45:01.560 --> 45:03.560]  Че вы
[45:03.560 --> 45:05.560]  что вы
[45:05.560 --> 45:07.560]  что вы гоните на плюсы вообще
[45:07.560 --> 45:09.560]  вы знаете какой-то язык
[45:09.560 --> 45:11.560]  который более эффективно
[45:11.560 --> 45:13.560]  позволяет вот это все использовать
[45:17.560 --> 45:19.560]  А в расте можно вот так делать
[45:19.560 --> 45:21.560]  Я не знаю
[45:21.560 --> 45:23.560]  Надо кстати посмотреть курс
[45:23.560 --> 45:25.560]  по расту тоже
[45:25.560 --> 45:27.560]  Но я начал было
[45:27.560 --> 45:29.560]  смотреть первую лекцию
[45:29.560 --> 45:31.560]  и там он что-то начал хейтить плюсы
[45:31.560 --> 45:33.560]  мне не понравилось
[45:33.560 --> 45:35.560]  Уважаемо
[45:35.560 --> 45:37.560]  Нет, если серьезно
[45:37.560 --> 45:39.560]  ну вот было интервью
[45:39.560 --> 45:41.560]  этого
[45:41.560 --> 45:43.560]  Яндекс.Такси Голога
[45:43.560 --> 45:45.560]  который разрабатывал
[45:45.560 --> 45:47.560]  трекер
[45:47.560 --> 45:49.560]  и там по-моему он говорил что
[45:49.560 --> 45:51.560]  ну короче
[45:51.560 --> 45:53.560]  там есть такое
[45:53.560 --> 45:55.560]  мнение что
[45:55.560 --> 45:57.560]  на расте больше
[45:57.560 --> 45:59.560]  о языке раз больше говорят чем на нем реально пишут
[45:59.560 --> 46:01.560]  то есть это уже не первый
[46:01.560 --> 46:03.560]  и даже не второй не пятый
[46:03.560 --> 46:05.560]  язык который весь такой крутой
[46:05.560 --> 46:07.560]  что он заменит плюсы говорит видали мы 10 таких
[46:07.560 --> 46:09.560]  языков вот проходит пара лет
[46:09.560 --> 46:11.560]  там не знаю проходит 5 лет все забывают
[46:11.560 --> 46:13.560]  про него и придумают новый язык который еще круче
[46:13.560 --> 46:15.560]  еще вообще шикарнее
[46:15.560 --> 46:17.560]  продолжать писать на плюсах основная
[46:19.560 --> 46:21.560]  ну был язык Ди
[46:21.560 --> 46:23.560]  знаешь такой
[46:23.560 --> 46:25.560]  ну вот
[46:25.560 --> 46:27.560]  есть ГО я не знаю
[46:29.560 --> 46:31.560]  иногда да
[46:31.560 --> 46:33.560]  все равно не превзошел же он плюсы
[46:33.560 --> 46:35.560]  пока по популярности ну ладно
[46:37.560 --> 46:39.560]  ну вот ГО
[46:39.560 --> 46:41.560]  про ГО говорили много что он такой
[46:41.560 --> 46:43.560]  весь о себя крутой а потом там
[46:43.560 --> 46:45.560]  поглубже копнул там встал
[46:45.560 --> 46:47.560]  потом появились слухи что все там тоже довольно коряво
[46:47.560 --> 46:49.560]  ну короче не знаю ну все это
[46:49.560 --> 46:51.560]  очень холиварные вопросы так я
[46:51.560 --> 46:53.560]  рассказал про элайменты про обитывай поля
[46:53.560 --> 46:55.560]  и в принципе наверное это все про что хотел здесь
[46:55.560 --> 46:57.560]  рассказать в этом пункте давайте я сейчас поговорю
[46:57.560 --> 46:59.560]  следующим пунктом про то
[46:59.560 --> 47:01.560]  что это конец этого разговора
[47:01.560 --> 47:03.560]  теперь вы знаете как писать локатор
[47:03.560 --> 47:05.560]  целиком
[47:05.560 --> 47:07.560]  будут
[47:07.560 --> 47:09.560]  да
[47:09.560 --> 47:11.560]  почему
[47:11.560 --> 47:13.560]  нет
[47:13.560 --> 47:15.560]  нет
[47:15.560 --> 47:17.560]  это же
[47:17.560 --> 47:19.560]  от минус 3 до 4
[47:19.560 --> 47:21.560]  не 1 байта
[47:21.560 --> 47:23.560]  я думаю что 1 байта она будет занимать
[47:23.560 --> 47:25.560]  вряд ли она будет выровнена по 4 байта
[47:25.560 --> 47:27.560]  я думаю что нет
[47:27.560 --> 47:29.560]  ну я слушайте
[47:29.560 --> 47:31.560]  я не на 100% уверен
[47:31.560 --> 47:33.560]  я думаю что это все на самом деле имплементейшн
[47:33.560 --> 47:35.560]  дефайн
[47:35.560 --> 47:37.560]  да да да
[47:37.560 --> 47:39.560]  да да да
[47:39.560 --> 47:41.560]  на самом деле даже то что они внутри 1 байта будут лежать
[47:41.560 --> 47:43.560]  это тоже имплементейшн дефайн насколько я знаю
[47:43.560 --> 47:45.560]  но на практике это так скорее всего
[47:45.560 --> 47:47.560]  вы можете проверить
[47:47.560 --> 47:49.560]  вот
[47:49.560 --> 47:51.560]  так
[47:51.560 --> 47:53.560]  ну просто стандарт он не
[47:53.560 --> 47:55.560]  стандарт вообще если вы его почитаете
[47:55.560 --> 47:57.560]  то там вообще нет никогда каких-либо
[47:57.560 --> 47:59.560]  требований компилятору
[47:59.560 --> 48:01.560]  за редким исключением что он делает там
[48:01.560 --> 48:03.560]  на низком уровне как он что хранит
[48:03.560 --> 48:05.560]  например если говорить про наследование там
[48:05.560 --> 48:07.560]  стандарт не описывает
[48:07.560 --> 48:09.560]  как компилятор обязан это все имплементировать
[48:09.560 --> 48:11.560]  это уже следующий уровень
[48:11.560 --> 48:13.560]  это более низкий уровень
[48:13.560 --> 48:15.560]  как компилятор все реализует
[48:15.560 --> 48:17.560]  в стандарте написано как это должно выглядеть внешне
[48:17.560 --> 48:19.560]  а как компилятор это реализует
[48:19.560 --> 48:21.560]  ну это следующий
[48:21.560 --> 48:23.560]  шаг вглубь
[48:23.560 --> 48:25.560]  вот сейчас я хочу поговорить
[48:25.560 --> 48:27.560]  про то наконец-то
[48:27.560 --> 48:29.560]  как перегружать new и delete
[48:29.560 --> 48:31.560]  вот смотрите
[48:31.560 --> 48:33.560]  у вас есть
[48:33.560 --> 48:35.560]  как на самом деле теперь
[48:35.560 --> 48:37.560]  выглядит наше обращение
[48:37.560 --> 48:39.560]  к памяти
[48:39.560 --> 48:41.560]  у нас есть локатор trades
[48:41.560 --> 48:43.560]  через который мы обращаемся к локатору
[48:43.560 --> 48:45.560]  через который мы обращаемся к new
[48:47.560 --> 48:49.560]  через который мы обращаемся к молоку
[48:51.560 --> 48:53.560]  который делает
[48:53.560 --> 48:55.560]  много всего умного
[48:55.560 --> 48:57.560]  но в конечном счете обращается
[48:57.560 --> 48:59.560]  к
[48:59.560 --> 49:01.560]  ммэп
[49:01.560 --> 49:03.560]  еще там
[49:03.560 --> 49:05.560]  некоторым функциям операционки
[49:05.560 --> 49:07.560]  ну вот я напомню
[49:07.560 --> 49:09.560]  теперь вот эта иерархия так выглядит
[49:09.560 --> 49:11.560]  и вот
[49:11.560 --> 49:13.560]  до сих пор мы находимся на уровне
[49:13.560 --> 49:15.560]  языка C++
[49:15.560 --> 49:17.560]  вот здесь мы находимся
[49:17.560 --> 49:19.560]  на уровне OOP
[49:19.560 --> 49:21.560]  вот это уровень языка C
[49:21.560 --> 49:23.560]  а это уровень значит ядра
[49:23.560 --> 49:25.560]  OS
[49:25.560 --> 49:27.560]  kernel
[49:27.560 --> 49:29.560]  так вот сейчас я вам
[49:29.560 --> 49:31.560]  хочу рассказать про этот уровень
[49:31.560 --> 49:33.560]  подробнее
[49:33.560 --> 49:35.560]  про эти два уровня мы уже поговорили
[49:35.560 --> 49:37.560]  с ними все понятно
[49:37.560 --> 49:39.560]  а завтра
[49:39.560 --> 49:41.560]  вам Леша расскажет про
[49:41.560 --> 49:43.560]  что на этом уровне происходит
[49:43.560 --> 49:45.560]  ну а тамühren
[49:45.560 --> 49:47.560]  письмо
[49:47.560 --> 49:49.560]  может расскажете
[49:49.560 --> 49:51.560]  я не помню как там сейчас обстоят дела
[49:51.560 --> 49:53.560]  с этим
[49:55.560 --> 49:57.560]  вот
[49:57.560 --> 50:05.800]  Хорошо, давайте поговорим про new и delete overloading. Сейчас я возможно
[50:05.800 --> 50:12.600]  кого-то опять к окну, но на самом деле нет, это не очень сложная тема, она
[50:12.600 --> 50:18.680]  просто немножечко неинтуитивная, но я в общем предвкушаю, что сейчас будет опять
[50:18.680 --> 50:23.480]  много очень удивленных возгласов из зала. Первое и главное, что надо запомнить
[50:23.480 --> 50:28.360]  про перегрузку операторов new и delete, это что есть оператор new, а есть функция с
[50:28.360 --> 50:38.800]  названием оператор new, это разные вещи. Значит вот если вы хотите, если вы что-то
[50:38.800 --> 50:43.680]  одно должны вынести из этого параграфа, вот я вам сказал, что это, если вы забудете
[50:43.680 --> 50:51.080]  все кроме этого, то вы уже что-то узнали. Есть функция с названием оператор new,
[50:51.080 --> 51:02.520]  ну то есть вы можете определить свою функцию void звездочка, оператор new от
[51:02.520 --> 51:11.420]  там size t, n. Ну на самом деле, на самом деле не так, первым параметром надо
[51:11.420 --> 51:20.540]  pointer принять, сейчас, так нет-нет, подождите в new мне не надо принимать pointer, да не
[51:20.540 --> 51:25.740]  надо принимать pointer, да, pointer надо принимать, если я placement new, в общем я
[51:25.740 --> 51:31.020]  могу определить вот такую функцию, оператор new size t, n, это как раз, я
[51:31.020 --> 51:37.780]  глобально могу такую функцию определить, это будет определено, но если вы такое
[51:37.780 --> 51:44.700]  определите, то ваша реализация заместит стандартную. Значит, как
[51:44.700 --> 51:50.340]  переопределить оператор new? Нужно просто написать свою функцию оператор new и тогда
[51:50.340 --> 51:58.220]  она заместит то, что по стандарту делается в момент вызова оператора new, но
[51:58.220 --> 52:03.580]  надо понимать, что это, это не весь, скажем так, оператор new, функция оператор
[52:03.580 --> 52:13.480]  new, это не то же самое, что оператор new, потому что оператор new, он состоит из
[52:13.480 --> 52:17.740]  двух, его действие состоит из двух частей, выделение памяти, а потом вызов
[52:17.740 --> 52:24.300]  конструктора, функция оператор new, это лишь выделение памяти, и когда говорят
[52:24.300 --> 52:28.780]  про перегрузку операторов new и delete, имеют в виду именно перегрузку той части,
[52:28.780 --> 52:35.260]  которая выделением памяти занимаются, перегрузить вторую часть нельзя, и когда вы
[52:35.260 --> 52:39.100]  определяете глобальную функцию оператора new, имеется в виду, что вы
[52:39.100 --> 52:42.940]  определяете способ для нее выделить память, и вот эта void звездочка, которую
[52:42.940 --> 52:48.740]  вы возвращаете, она передается как бы в следующую часть вызова оператора new,
[52:48.740 --> 52:51.140]  который вызывает конструктор на этом месте.
[52:51.140 --> 53:01.540]  Когда я пишу int звездочка new, а у моего new, который я написал, вызываю оператор new.
[53:01.540 --> 53:09.740]  Да, значит, конструктор в случае нтов как раз не вызывается, но если у тебя какой-нибудь тип,
[53:09.740 --> 53:22.860]  ну то есть я написал t звездочка там x равно new t от там args, что происходит в этот момент?
[53:22.860 --> 53:31.220]  В этот момент ищется функция с названием оператора new, если ты ее определил, если
[53:31.220 --> 53:37.220]  такое void находится, то вызывается она, а иначе делается стандартное действие, после чего,
[53:37.700 --> 53:42.180]  неважно, это было стандартное действие или твоя собственная функция оператора new,
[53:42.180 --> 53:48.340]  на тот адрес, который вернула функцию оператора new, либо в стандартной имплементации, либо твоя,
[53:48.340 --> 53:57.820]  натравляется вот этот конструктор. А теперь, что такое placement new? Вы же помните,
[53:57.820 --> 54:12.580]  что у new бывает еще форма new от ptr, t от args, такое тоже бывает. Нет, это все еще оператор,
[54:12.580 --> 54:18.220]  это все еще, давайте я скажу, что это new expression, вот это вот называется new expression, выражение new.
[54:18.220 --> 54:31.020]  Это тоже new expression, просто с дополнительным параметром ptr. Ему соответствует функция
[54:31.020 --> 54:42.500]  оператора new с дополнительным параметром как раз вот ptr, void звездочка ptr. В смысле дальше?
[54:42.500 --> 54:49.820]  Прямо. Каким параметром? Вторым, да. Можно переопределить и такую функцию,
[54:49.820 --> 54:59.020]  можно переопределить функцию void звездочка оператора new, значит тоже size tn всегда первым
[54:59.020 --> 55:06.220]  параметром, а вторым параметром void звездочка ptr. Таким образом вы можете переопределить
[55:06.220 --> 55:23.820]  placement new. Ну, например. Size tn это сколько байт выделить. Placement new не выделяет байты,
[55:23.820 --> 55:43.660]  поэтому стандартная реализация этого выглядит так. Return ptr. Когда вызывает placement new? Он
[55:43.660 --> 55:50.620]  вычисляет это исходя из того, как вы конструируете. Например, вот здесь вызовется функция оператора new
[55:50.620 --> 55:57.260]  с параметром size of t. Это компилятор превращает вот такие выражения в вызовы функции оператора
[55:57.260 --> 56:12.100]  new с правильным n. Не знаю ни одного практического случая, когда нужно было бы это переопределить. Нет.
[56:12.100 --> 56:21.740]  Нет, нет, нет, сейчас. Вот именно эту функцию, я не знаю практического случая, когда можно
[56:21.740 --> 56:27.300]  переопределить, но эту функцию вполне себе. И я вам рассказываю это не для того, чтобы вы
[56:27.300 --> 56:31.340]  переопределяли потом вот это. Я рассказываю вам это для того, чтобы сказать, что на самом деле,
[56:31.340 --> 56:37.740]  я вам вот эту функцию привел, например, их еще там штук 10 версий. Есть вот такая версия оператора new,
[56:37.740 --> 56:45.340]  есть версия оператора new с параметром no throw t. Помните, я вам говорил про нее? То есть третья
[56:45.340 --> 56:51.620]  версия функции оператора new. Это функция, которая принимает точно также первым параметром size t,
[56:51.620 --> 56:59.460]  а вторым параметром no throw t. Помните, что делает эта функция? Она делает то же самое, что и обычный
[56:59.460 --> 57:04.620]  new, столь разницей, что не кидает исключения в случае неудачного выделения памяти, просто на lptr возвращает.
[57:04.620 --> 57:24.460]  Вы можете ее вызвать вот так, new от std no throw. Когда мы с вами проходили исключения,
[57:24.460 --> 57:26.460]  я вам, кажется, про это говорил.
[57:54.460 --> 58:08.460]  Ну в std вряд ли. В std вообще никто new не пользуется. Там только Allocator пользуется new, а все остальные через Allocator все делают.
[58:08.460 --> 58:19.460]  Ну почти все стараются. Allocator стандартный не пользуется no throw, да. Если ты переопределишь оператор new,
[58:19.460 --> 58:28.460]  то если ты такой оператор new переопределишь, то этого уже кажется достаточно, чтобы все контейнеры твои, все выделения памяти в контейнерах проходили через него.
[58:28.460 --> 58:41.460]  Но есть очень много версий. Вот если бы у меня сейчас был проектор, я бы открыл вам страницу, но я предлагаю вам самостоятельно сейчас.
[58:41.460 --> 58:51.460]  Сидите, у вас клавиноуты есть, откройте на себе периференцию страницу с оператор new function, где перечислены все существующие версии. Их там 20 с чем-то.
[58:51.460 --> 59:09.460]  А можно вопрос? А вот допустим я захотел сначала выделить на куче большой массив, а потом переопределять оператор new, чтобы уже выделять от этого массива что-то. То есть чем мне пользоваться при выделении массива?
[59:09.460 --> 59:21.460]  Чего? Если ты хочешь так делать, то тебе скорее всего класс Allocator надо написать свой. Как раз для этого это кажется какой-то неправильный подход.
[59:21.460 --> 59:32.460]  Да, вот как раз если ты такой хочешь сделать, то тебе как раз дорога в написание своего Allocator. Как раз стандартный use case для чего нужен свой собственный Allocator.
[59:32.460 --> 59:36.460]  Как там сделать, чтобы все пользовались Allocator, вообще все?
[59:36.460 --> 59:38.460]  По умолчанию.
[59:38.460 --> 59:39.460]  Ээээ.
[59:39.460 --> 59:43.460]  Для этого не нужно, чтобы убежать?
[59:43.460 --> 59:53.460]  Нет, ну скорее так. Как сделать, чтобы никто не пользовался Allocator? Просто поговорить с ними?
[59:53.460 --> 01:00:07.460]  Ну вообще пользоваться Allocator напрямую это плохой код-стайл. Вот я вам возможно этого еще недостаточно четко произнес, вот сейчас я это произношу прямым текстом и можете считать это официальным заявлением.
[01:00:07.460 --> 01:00:17.460]  Значит вот не нужно в своем коде никогда, если только вы не пишете что-то низкоуровневое, использовать оператор new. Вловну напрямую.
[01:00:17.460 --> 01:00:19.460]  А Allocator тоже напрямую пользоваться нельзя.
[01:00:19.460 --> 01:00:27.460]  Вот. А если, нет Allocator можно пользоваться, если вы пишете свой контейнер, то правильно пользоваться Allocator?
[01:00:27.460 --> 01:00:28.460]  Нет.
[01:00:28.460 --> 01:00:29.460]  В смысле нет?
[01:00:29.460 --> 01:00:30.460]  А Allocator trades.
[01:00:31.460 --> 01:00:32.460]  Это ерунда.
[01:00:32.460 --> 01:00:36.460]  Ну Allocator имеется ввиду. Через Allocator trades, ну да.
[01:00:36.460 --> 01:00:45.460]  А оператором new надо пользоваться напрямую, только если вы пишете какую-то memory-management штуку, какая-то класса, которая называется memory-management.
[01:00:45.460 --> 01:00:52.460]  Если вы пишете пользовательский код, контейнер какой-нибудь там, или что-нибудь в таком духе, то не надо вызывать new напрямую.
[01:00:52.460 --> 01:00:58.460]  Поэтому если вы переопределяете new, прям вот этот, то это очень низкоуровневая вещь.
[01:00:58.460 --> 01:01:11.460]  Это вы, значит, переопределяете, ну реально все, ну как, вот все по сути, все Allocators, вот у вас есть много Allocators, возможно, разных, но все они так или иначе вызывают new в конечном счете.
[01:01:11.460 --> 01:01:17.460]  Ну скорее всего, если только у вас нет mall locator, который вызывает mall lock напрямую, в обход new.
[01:01:17.460 --> 01:01:22.460]  Кстати, это еще один вариант, какой может быть не стандартный Allocator, может быть mall locator.
[01:01:22.460 --> 01:01:28.460]  Он отличается от стандарта тем, что mall lock вызывает вместо new, обходит new.
[01:01:28.460 --> 01:01:39.460]  Вот, так вот, ну да, вот если вы переопределяете этот new, то, значит, не знаю, я, наверное, не ответил на этот вопрос, который задали, но за то, что другой рассказал.
[01:01:40.460 --> 01:01:43.460]  Так вот, их там, да, 22 штуки, и у них у всех разные параметры.
[01:01:43.460 --> 01:02:03.460]  Ну, например, есть вот этот new, есть new со вторым параметром, будет звездочка ptr, это placement new, есть с параметром no-fruit t, есть параметры с align, да, есть, как, кстати, тип называется, align val t, да, то есть есть вот тот самый, про который я говорил полчаса назад, std align val t.
[01:02:04.460 --> 01:02:11.460]  Ну, я понимаю, да, с вторым параметром. Это тот самый new, который вы можете вызвать, если хотите, чтобы new был с нестандартным выравниванием.
[01:02:11.460 --> 01:02:18.460]  Всем этим expression соответствует какая-то функция оператора new, и все их можно перегрузить.
[01:02:18.460 --> 01:02:27.460]  Можно переопределить любую из версий оператора new, и это будет означать, что new expression вот с такими параметрами будут приходить в нее.
[01:02:27.460 --> 01:02:39.460]  Вы можете переопределить placement new, например, если вы хотите, ну, по какой-то причине хотите, чтобы любой вызов placement new в вашей программе приводил к выводу все-аута, чего-нибудь там, кто-нибудь вызвал placement new.
[01:02:39.460 --> 01:02:47.460]  Зачем нужно было, зачем нужно переопределять placement new, уважаемый вот коллега на первом, ну, а, не ты спрашиваешь, ну ладно, неважно.
[01:02:47.460 --> 01:03:01.460]  Например, если вам нужно написать тесты к allocator, к чему-нибудь, и проверить, что правда ли они вызывают оператор new в нужное количество раз с нужными параметрами.
[01:03:01.460 --> 01:03:10.460]  Ну и примерно так. На самом деле, слушайте, я вас обманул, что мне никогда не пригождалось переопределять оператор new.
[01:03:10.460 --> 01:03:15.460]  Конечно, пригождалось, я как раз в тестах этим и занимаюсь, когда вы будете allocator писать.
[01:03:15.460 --> 01:03:24.460]  То есть там перегружен оператор new, и проверяю, ну, я просто перегружу оператор new вот этот вот, и проверю, что вы с правильными параметрами его вызываете, с какими надо.
[01:03:24.460 --> 01:03:29.460]  Вот это и это количество. Так вот, вы можете переопределить любую версию оператора new.
[01:03:29.460 --> 01:03:36.460]  Ну, в принципе, все, про это сказал. И еще, что я хочу про это сказать, вы можете написать оператор new с произвольными аргументами.
[01:03:36.460 --> 01:03:41.460]  То есть вы можете сделать кастомную версию оператора new. Вот у вас есть new там от разных…
[01:03:41.460 --> 01:03:45.460]  Он очень часто вызывается, а арк это пакет, значит у него не низший приоритет.
[01:03:45.460 --> 01:03:50.460]  Ну, если ты сделал шаблонный оператор new, да, ну обычно…
[01:03:50.460 --> 01:03:52.460]  Сейчас.
[01:03:52.460 --> 01:04:02.460]  Нет, оператор new, они все не шаблонные, насколько я знаю. У них здесь конкретный набор аргументов, но ты можешь сделать какой-нибудь свой собственный new, new от типа…
[01:04:03.460 --> 01:04:17.460]  Да. Ну, это значит, что ты можешь написать new и что угодно. Ну, не в смысле тамплейтно, а в смысле ты можешь написать new от какого-то своего специального типа,
[01:04:17.460 --> 01:04:22.460]  от какого-то тега, который будет означать, что это твой личный new, вот твой new, собственно.
[01:04:22.460 --> 01:04:33.460]  И таким образом ты можешь, допустим, ну, например, ты хочешь потребовать, чтобы все выделения памяти в твоей программе проходили через твой собственный new.
[01:04:33.460 --> 01:04:37.460]  Вот это, кстати, возможно, вот то, о чем ты говорил в каком-то смысле.
[01:04:37.460 --> 01:04:42.460]  Ты можешь сказать, что там, не знаю…
[01:04:42.460 --> 01:04:50.460]  Ну, если кто-то вызвал оператор new там вот такой или такой, то ты там бросаешь exception и говоришь неправильный new вызвали.
[01:04:50.460 --> 01:04:56.460]  Или вместо него просто напрямую вызываешь свой new. А свой собственный new он что-то делает хитрое.
[01:04:56.460 --> 01:05:00.460]  А, то есть, типа, сказать, вот вы вызвали обычный new, ну я вам свой подкину.
[01:05:00.460 --> 01:05:08.460]  Ну да. Вот, соответственно, окей, мы поняли про оператор new, теперь про оператор delete поговорим.
[01:05:08.460 --> 01:05:13.460]  А, еще, есть же оператор new квадратной скобочки, это другая вещь.
[01:05:13.460 --> 01:05:14.460]  О, да.
[01:05:14.460 --> 01:05:19.460]  Когда вы переопределяете вот такой оператор new, вы не переопределяете тем самым new квадратной скобочки.
[01:05:19.460 --> 01:05:25.460]  Если вы хотите переопределить new квадратной скобочки, то вам нужно еще вот эту перегрузку тоже написать.
[01:05:25.460 --> 01:05:30.460]  А у нее параметры уже другие, у нее уже параметры…
[01:05:30.460 --> 01:05:35.460]  А, нет, у нее тоже, по-моему, один параметр size tn, тоже сколько байт.
[01:05:35.460 --> 01:05:40.460]  Но формально это разные функции, их нужно отдельно переопределять.
[01:05:40.460 --> 01:05:42.460]  Молок можно переопределить?
[01:05:42.460 --> 01:05:46.460]  Ну да, но можно свой молок написать.
[01:05:46.460 --> 01:05:53.460]  Ну просто надо, чтобы, ну надо подложить вместо C-ш на стандартной библиотеке свою имплементацию, будет себе свой молок.
[01:05:53.460 --> 01:05:58.460]  А что все-таки он не будет делать с… Как он будет eline-ить? Он же не знает имя.
[01:05:58.460 --> 01:06:01.460]  Он вызывает молок, а молок умеет eline-ить.
[01:06:07.460 --> 01:06:12.460]  Eline val t подразумевается, что оно больше, чем 16, больше, чем max eline t может быть.
[01:06:12.460 --> 01:06:17.460]  Я не знаю, может он делает что-то более умное, но вероятно он вызывает молок, смотрит, выровнен ли он как надо.
[01:06:17.460 --> 01:06:20.460]  Если не выровнен, то да выравнивай.
[01:06:20.460 --> 01:06:26.460]  Вот, значит, вот все есть еще версия оператора new квадратной скобочки.
[01:06:26.460 --> 01:06:35.460]  Кстати, а как мне вызвать кастомную версию оператора new квадратной скобочки, если я перегрузил оператор new квадратной скобочки с произволенными параметрами, со своими?
[01:06:35.460 --> 01:06:37.460]  Как мне его вызвать?
[01:06:37.460 --> 01:06:41.460]  У меня же нет… Я же не могу написать new… А, нет, могу, да.
[01:06:41.460 --> 01:06:46.460]  Ну так и вызвать. New от параметров t квадратной скобочки там.
[01:06:46.460 --> 01:06:47.460]  Ну да, может тактично.
[01:06:47.460 --> 01:06:50.460]  Да. Ну t, что-то тут. Вот, так тоже можно.
[01:06:50.460 --> 01:06:57.460]  А посмотри, ну, по как выглядит выражение new-expression с ней в честь того, как это как фенон, а потом…
[01:06:57.460 --> 01:06:59.460]  Ну…
[01:07:18.460 --> 01:07:22.460]  Я не знаю, почему так, но вероятно так.
[01:07:23.460 --> 01:07:26.460]  Так решил комитет паснартизации. Я не знаю, но у меня один ответ.
[01:07:26.460 --> 01:07:28.460]  Ну, вероятно, так просто удобно.
[01:07:28.460 --> 01:07:34.460]  Чтобы когда ты не… Если ты не хочешь знать про это, ты пишешь интуитивным, понятным синтаксисом.
[01:07:34.460 --> 01:07:40.460]  Когда ты впервые узнаешь про new, ты не задумываешься о том, что в самом деле есть функция оператора new, которая примет два аргумента.
[01:07:40.460 --> 01:07:42.460]  Ты просто вот так пишешь.
[01:07:42.460 --> 01:07:49.460]  Если ты уж хочешь копнуть и перегрузить вот эти вот вызовы, то ты, значит, ну вот, такие параметры им перейдешь.
[01:07:49.460 --> 01:07:54.460]  Теперь, есть ещё оператор delete. Опять, есть функция оператор delete.
[01:07:54.460 --> 01:07:59.460]  И это не тот же самый, что оператор delete, ну, то есть delete-expression в нашем понимании, оператор delete, в старом понимании.
[01:07:59.460 --> 01:08:02.460]  Что делает оператор delete? Он освобождает память.
[01:08:02.460 --> 01:08:08.460]  А что делает… Что делает функция, точнее оператор delete? Она освобождает память, toasting that new было выделено.
[01:08:08.460 --> 01:08:14.460]  Ну выражение delete, оно делает две вещи. Сначала вызывает destructor, потом вызывает функцию оператор delete, вот.
[01:08:14.460 --> 01:08:18.460]  И вот вторую часть можно переопределить, первую нельзя.
[01:08:18.460 --> 01:08:35.460]  То есть, если вы пишете delete, там, ptr, то это приводит к тому, что у ptr был тип-то звёздочка, тогда вызывается деструктор t по адресу этого ptr, а потом выдаётся функция оператор delete от ptr.
[01:08:35.460 --> 01:08:54.460]  И вы можете её переопределить. То есть вы можете сказать void оператор delete. Какая у неё сигнатура? У неё сигнатура void звёздочка ptr. Ну и вот она там что-то делает.
[01:08:54.460 --> 01:09:22.460]  По-моему да. Ну она вызывает free, а во free не надо передавать размер, насколько я помню. Вот. Дальше. Но бывает же delete с кастомными параметрами.
[01:09:24.460 --> 01:09:38.460]  А как вызвать delete с кастомными параметрами? Ну вы можете перегрузить любой delete с кастомными параметрами и можете даже написать delete со своими собственными параметрами.
[01:09:38.460 --> 01:09:47.460]  Но как вызвать delete с кастомными параметрами? Ведь вы как? Delete? Нет, к сожалению, такого синтаксиса не существует.
[01:09:47.460 --> 01:09:52.460]  Вам придётся явно вызывать оператор delete, если вы хотите вызвать delete с кастомными параметрами.
[01:09:52.460 --> 01:10:07.460]  Значит если у вас есть, если вы хотите сделать delete нестандартный, а какой-то с кастомными параметрами, то вам придётся вручную сначала делать диструктора, потом писать 2.2. оператор delete от параметров нужных.
[01:10:07.460 --> 01:10:21.460]  Нет, нужно писать. Потому что delete это и название оператора, а не название функции. Delete это ключевое слово, если бы ты написал без слова оператор, то он бы не понял.
[01:10:22.460 --> 01:10:37.460]  Потому что, ну обычно так пишут, можно написать и без 2.2. просто для надёжности обычно пишут 2.2. вдруг, если хочешь глобальный оператор delete вызвать.
[01:10:37.460 --> 01:10:41.460]  Type name не всегда обязательно писать, но всегда пишут.
[01:10:41.460 --> 01:10:49.460]  Потому что ошибка с type name вызывает, получается только если у вас шаблонное что-то, ещё шаблонное, у него ещё есть шаблонная специализация, ещё что-то шаблонное, функция какая-то.
[01:10:49.460 --> 01:10:54.460]  И вот тогда у вас компилятор не сможет определить, что это. Но мы всё равно всегда пишем type name.
[01:10:54.460 --> 01:11:04.460]  Ну кстати в C++20 ослабили условия, когда надо писать type name. Если компилятор может обозначать, что вывести, то не надо уже писать type name в некоторых ситуациях.
[01:11:04.460 --> 01:11:20.460]  Так, вопрос slash задача. Представьте, что у вас, кстати я про это узнал несколько лет назад, мне задали прикольный вопрос, там один знакомый на собеседовании спросили.
[01:11:20.460 --> 01:11:35.460]  Вот как сделать, чтобы запретить все выделения памяти на куче наоборот?
[01:11:35.460 --> 01:11:49.460]  Нет, так, подождите, сейчас. Вот представьте, что у вас есть, ну да, вот представьте, что вы, вот у вас есть какой-то тип, вы хотите, чтобы этот тип, скажем, нельзя было выделять на куче.
[01:11:49.460 --> 01:12:03.460]  Можно только на стэке, да, вот конкретно этот тип. А такое можно сделать, вот я вам забыл сказать, извините, можно определить оператор new для специально, для типа своего.
[01:12:03.460 --> 01:12:18.460]  Вот это то, что я вам рассказал, это глобальный оператор new и delete. Но есть, бывает еще оператор new для своего типа, как это пишется? Вы можете, значит, вот вопрос, как, например, запретить типу создаваться на куче?
[01:12:18.460 --> 01:12:36.460]  Для этого нужно определить оператор new для своего типа. Как вы это делаете? Вот, допустим, у меня есть какой-то тип, там struct, не знаю, my struct, я сейчас отру вот это вот, то есть у меня есть свой собственный тип, которым я хочу запретиться создаваться на куче.
[01:12:36.460 --> 01:13:04.460]  Я могу сказать, там не знаю, как запретить создание на куче. Я для структуры s определяю свой оператор new, его можно сделать членом класса.
[01:13:04.460 --> 01:13:18.460]  Его можно сделать членом класса. Можно сделать оператор new членом класса. Для этого я пишу оператор new в телекласса. Я пишу void звездочка оператор new, ну, короче, то же самое, пишу просто.
[01:13:18.460 --> 01:13:20.460]  Все 20?
[01:13:20.460 --> 01:13:30.460]  Не-не, одного, ну, если я хочу стандартный u запретить, то вот...
[01:13:30.460 --> 01:13:32.460]  Конечно.
[01:13:32.460 --> 01:13:37.460]  Не-не, я вот предполагаю, что люди вот...
[01:13:37.460 --> 01:13:46.460]  Стандартным локатором, если все пользуются и ничего такого не вытворяют, вот как запретить создание s на куче?
[01:13:47.460 --> 01:13:49.460]  Объявили, но определили.
[01:13:49.460 --> 01:13:59.460]  Не-не, определили. Я сейчас определю и напишу throw, exception, тесты не пройдены, у вас стекло локатор должен был не выделять ничего на куче, а вы выделили.
[01:13:59.460 --> 01:14:03.460]  Короче, пацаны, сдаемся кастомным new каким-нибудь.
[01:14:03.460 --> 01:14:09.460]  Нет, ну в смысле, я прочекаю, что у вас new не переопределен ни разу, а потом переопределяю его сам.
[01:14:09.460 --> 01:14:12.460]  Никакой new не переопределен. Я могу вот тот new переопределить.
[01:14:13.460 --> 01:14:17.460]  Слушайте, я код review буду делать в конце концов. Не я, а кто-то другой.
[01:14:17.460 --> 01:14:26.460]  Ну, короче, можно для своей структуры, можно, короче, все вызовы оператора new и оператора delete для своей структуры делать иначе, чем для остальных.
[01:14:26.460 --> 01:14:28.460]  Вот так можно сделать еще.
[01:14:28.460 --> 01:14:36.460]  Вот здесь n, кстати, по-моему, будет означать количество объектов, а не количество byte, но я не помню, не уверен.
[01:14:42.460 --> 01:14:46.460]  Наверное, все-таки количество, короче, не помню.
[01:14:46.460 --> 01:14:50.460]  Ну, не помню, надо прочитать.
[01:14:50.460 --> 01:14:56.460]  Ну вот, а оператор delete аналогично можно определить в теле структуры, ну объявить и определить.
[01:14:56.460 --> 01:14:59.460]  Соответственно, когда вы пишете new...
[01:15:04.460 --> 01:15:09.460]  Ну delete, функция оператора delete для своего типа тоже можно в теле определить.
[01:15:12.460 --> 01:15:17.460]  Сначала мы уничтожим наш класс, а потом вызовем его метод.
[01:15:17.460 --> 01:15:19.460]  Так это статический метод.
[01:15:19.460 --> 01:15:21.460]  А здесь почему не написано статический?
[01:15:21.460 --> 01:15:24.460]  Вот, это отличный вопрос, который я хотел обсудить в следующем.
[01:15:24.460 --> 01:15:27.460]  На самом деле, давайте сначала закончим про оператор delete.
[01:15:27.460 --> 01:15:31.460]  Так вот, я могу переопределить new и оператор delete для своего типа.
[01:15:31.460 --> 01:15:40.460]  Тогда, если на самом деле я немножко пропустил, вот если у меня написано new t от чего-то, то как работает это выражение?
[01:15:40.460 --> 01:15:42.460]  На самом деле, я пропустил один шаг.
[01:15:42.460 --> 01:15:45.460]  Я сказал, он ищет, определён ли ваш собственный оператор...
[01:15:45.460 --> 01:15:49.460]  Но он сначала ищет неопределённый оператор new для этого типа.
[01:15:49.460 --> 01:15:55.460]  Понятно, что частное предпочтительное общее, он сначала посмотрит, нет ли оператора new члена этой структуры.
[01:15:55.460 --> 01:15:58.460]  Потом только посмотрит, нет ли глобального переопределённого оператора new.
[01:15:58.460 --> 01:16:01.460]  Потом только вызовет стандартный, если нет его.
[01:16:01.460 --> 01:16:07.460]  Так вот, а почему не написано static?
[01:16:07.460 --> 01:16:13.460]  Да потому что static, вот прям, ну это костыль такой, если вы переопределяете оператор new или delete,
[01:16:13.460 --> 01:16:16.460]  а не static всё равно, если даже вы не напишете static.
[01:16:16.460 --> 01:16:22.460]  Ну, они автоматически считают, что static, просто компилятор как бы за вас допишет static.
[01:16:22.460 --> 01:16:26.460]  Поэтому можно не писать static, но по смыслу, конечно, static.
[01:16:26.460 --> 01:16:29.460]  По-хорошему тут надо написать static.
[01:16:32.460 --> 01:16:35.460]  Это как запретить создание на кучу, переопределить свой оператор new.
[01:16:35.460 --> 01:16:37.460]  Вопрос, а как на стеке запретить?
[01:16:37.460 --> 01:16:45.460]  Вот представьте, у меня есть такой класс, который я хочу, чтобы можно было создать только лишь на куче, а на стеке нельзя.
[01:16:51.460 --> 01:16:53.460]  Ой, сейчас, подождите.
[01:16:53.460 --> 01:16:57.460]  Если я...
[01:17:01.460 --> 01:17:08.460]  Да, вот как мне запретить создание объектов моего класса на стеке?
[01:17:08.460 --> 01:17:10.460]  Ну какой?
[01:17:20.460 --> 01:17:22.460]  Чего проверять?
[01:17:22.460 --> 01:17:25.460]  А, типа мы перегрузим new, и в нём будем...
[01:17:25.460 --> 01:17:32.460]  Перегрузим свой new, и в нём будем делать counter++, и в вызове конструктора будем проверять, что counter...
[01:17:32.460 --> 01:17:36.460]  Ну, тогда, точнее, наверное, это скорее не counter, нужно обуливский флажок.
[01:17:36.460 --> 01:17:39.460]  Типа, когда ты этот самый...
[01:17:39.460 --> 01:17:46.460]  Сбрашешь его на false, только что был вызван new, тогда да, иначе exception.
[01:17:46.460 --> 01:17:49.460]  Ну, такое можно, не знаю, ну, наверное, можно.
[01:17:49.460 --> 01:17:51.460]  А есть кастели.
[01:17:51.460 --> 01:17:56.460]  Но вообще до C++20 у этой задачи не было нормального решения.
[01:17:56.460 --> 01:18:01.460]  В C++20 для этой цели добавили так называемый destroying-оператор-delete.
[01:18:01.460 --> 01:18:03.460]  Сейчас я расскажу, что это такое.
[01:18:03.460 --> 01:18:05.460]  Что такое destroying-delete?
[01:18:05.460 --> 01:18:08.460]  Это такой оператор-delete, который не вызывает деструктор.
[01:18:08.460 --> 01:18:14.460]  Вот как есть placement-new, который не выделяет память, а лишь вызывает конструктор, ну, по сути,
[01:18:14.460 --> 01:18:20.460]  есть ещё специальная версия оператора-delete, который не вызывает деструктор, а лишь память освобождает.
[01:18:21.460 --> 01:18:22.460]  Вот.
[01:18:22.460 --> 01:18:24.460]  Тогда что вы можете сделать?
[01:18:24.460 --> 01:18:33.460]  Вы можете, пользуясь destroying-оператор-delete, вы можете фактически сделать,
[01:18:33.460 --> 01:18:39.460]  вы можете своему классу сделать приватный деструктор и вызывать его руками в операторе delete.
[01:18:39.460 --> 01:18:41.460]  Ну, зачем нужен destroying-оператор-delete?
[01:18:41.460 --> 01:18:45.460]  Чтобы вы деструктор сами вызывали, скажем, из этого оператора.
[01:18:45.460 --> 01:18:46.460]  Вот.
[01:18:46.460 --> 01:18:51.460]  Тогда, если вы сделаете приватный деструктор, то никто на стеке создать ваш объект не сможет.
[01:18:54.460 --> 01:18:58.460]  Потому что, ну, если приватный деструктор...
[01:18:58.460 --> 01:19:00.460]  Destroying-delete, да.
[01:19:04.460 --> 01:19:06.460]  Ну вот, почему он так называется, я не знаю.
[01:19:06.460 --> 01:19:12.460]  Значит, есть такая форма оператора-delete, которая принимает PTR, а ещё std destroying-delete-t.
[01:19:13.460 --> 01:19:16.460]  Destroying-delete.
[01:19:16.460 --> 01:19:23.460]  Это версия оператора-delete, которая не вызывает деструктор.
[01:19:23.460 --> 01:19:25.460]  Как это работает?
[01:19:25.460 --> 01:19:29.460]  Значит, если вы в своей программе вызывает...
[01:19:29.460 --> 01:19:33.460]  Ну, вы просто делаете приватный деструктор, скажем, к своему классу,
[01:19:33.460 --> 01:19:36.460]  тогда никто не может создать его на стеке, по очевидным причинам.
[01:19:36.460 --> 01:19:38.460]  Приватный деструктор.
[01:19:38.460 --> 01:19:41.460]  Но переопределяйте для него вот это.
[01:19:41.460 --> 01:19:43.460]  Тогда никто не сможет вызвать...
[01:19:43.460 --> 01:19:47.460]  Ну, никто никак не сможет создать ваш класс, кроме как,
[01:19:47.460 --> 01:19:50.460]  используя вот этот destroying-оператор-delete.
[01:19:52.460 --> 01:19:54.460]  Ну, тогда вам придётся...
[01:19:54.460 --> 01:20:01.460]  Всякому, кому нужно создавать ваш класс, ему придётся пользоваться операторами new-delete явно напрямую.
[01:20:01.460 --> 01:20:05.460]  Он не сможет создать его на стеке, это значит, что ему придётся создавать его на куче.
[01:20:05.460 --> 01:20:08.460]  То есть ему придётся использовать вот этот destroying-оператор-delete, чтобы его удалить.
[01:20:08.460 --> 01:20:12.460]  Все остальные операторы не смогут его уничтожить, потому что деструктор приватный.
[01:20:12.460 --> 01:20:15.460]  А этот оператор, будучи членом класса, сможет.
[01:20:15.460 --> 01:20:18.460]  Ура, нормальное решение, наконец-то!
[01:20:18.460 --> 01:20:20.460]  Да, начинай с C++20.
[01:20:24.460 --> 01:20:28.460]  Ну, этот оператор, вы в нём просто сами реализуете вызов деструктора.
[01:20:30.460 --> 01:20:33.460]  Тогда никто не сможет воспользоваться стандартным оператором delete,
[01:20:33.460 --> 01:20:35.460]  и на стеке создать тоже не сможет.
[01:20:35.460 --> 01:20:38.460]  Но зато единственный способ уничтожить ваш объект...
[01:20:56.460 --> 01:21:02.460]  Ну и конструктор тоже private можно сделать, и сделать оператор new членом, который будет его вызывать.
[01:21:02.460 --> 01:21:05.460]  Вы делаете оператор new для своего класса.
[01:21:13.460 --> 01:21:15.460]  Не-не-не, ну вы можете сделать...
[01:21:15.460 --> 01:21:17.460]  Сейчас, вы можете...
[01:21:24.460 --> 01:21:27.460]  А, да, всё, правильно, ты прав, действительно.
[01:21:27.460 --> 01:21:29.460]  Вот, поэтому как раз через оператор new это не решается.
[01:21:29.460 --> 01:21:32.460]  Если бы приватный конструктор сделал, это не поможет.
[01:21:32.460 --> 01:21:35.460]  Потому что оператор new-то сам по себе конструктора не должен вызывать,
[01:21:35.460 --> 01:21:37.460]  а конструктор потом вызовется сам.
[01:21:37.460 --> 01:21:40.460]  А он приватный, поэтому он не сможет вызваться.
[01:21:40.460 --> 01:21:42.460]  И поэтому решение вот через деструктор такое.
[01:21:42.460 --> 01:21:45.460]  Через запрет деструктора и destroying оператор delete.
[01:21:45.460 --> 01:21:47.460]  Вот такая история.
[01:21:47.460 --> 01:21:50.460]  Слушайте, ну последняя вещь, которую я хочу сказать, такая.
[01:21:50.460 --> 01:21:52.460]  Смотрите...
[01:21:52.460 --> 01:21:54.460]  Нет.
[01:21:54.460 --> 01:21:56.460]  Этого я больше не буду говорить.
[01:21:56.460 --> 01:21:59.460]  Вы как-то слишком начали серьёзно к этому относиться.
[01:22:02.460 --> 01:22:04.460]  Короче, последняя вещь, которую я хочу сказать, такая.
[01:22:04.460 --> 01:22:06.460]  Смотрите.
[01:22:06.460 --> 01:22:14.460]  Представьте, что я написал new t от каких-то аргументов.
[01:22:16.460 --> 01:22:22.460]  Ну и там t звелочка ptr равно new t от каких-то аргументов.
[01:22:23.460 --> 01:22:25.460]  О чём нам надо поговорить ещё?
[01:22:25.460 --> 01:22:27.460]  Какая проблема?
[01:22:27.460 --> 01:22:29.460]  С нами на всю жизнь.
[01:22:29.460 --> 01:22:31.460]  Начиная с декабря прошлого года.
[01:22:31.460 --> 01:22:33.460]  Да.
[01:22:33.460 --> 01:22:36.460]  Смотрите, что будет, если конструктор t кинет исключение?
[01:22:36.460 --> 01:22:39.460]  Ну new я напомню ещё раз.
[01:22:39.460 --> 01:22:43.460]  Он сначала выделяет память, потом вызывает конструктор t на выделенной памяти.
[01:22:43.460 --> 01:22:45.460]  Вот.
[01:22:45.460 --> 01:22:47.460]  А что если конструктор t кинет исключение?
[01:22:47.460 --> 01:22:49.460]  Память-то уже выделена.
[01:22:49.460 --> 01:22:51.460]  А кто delete вызовет?
[01:22:51.460 --> 01:22:53.460]  Он вызовет.
[01:22:53.460 --> 01:22:55.460]  Кто?
[01:22:55.460 --> 01:22:57.460]  Вызовет delete.
[01:22:57.460 --> 01:22:59.460]  Минуточку.
[01:22:59.460 --> 01:23:01.460]  Оператор new сам не вызывает никакого конструкции.
[01:23:01.460 --> 01:23:03.460]  Мы же, кажется, это обсуждали.
[01:23:03.460 --> 01:23:05.460]  Сам вызов, просто вызов конструктора, заход функции.
[01:23:05.460 --> 01:23:07.460]  Он же на new кинет исключение.
[01:23:07.460 --> 01:23:09.460]  Почему?
[01:23:09.460 --> 01:23:11.460]  Да, конструктор не может.
[01:23:11.460 --> 01:23:13.460]  Нет, не конкретно именно выполнение чего, каких конструкций.
[01:23:13.460 --> 01:23:15.460]  Мы поставим конструктор.
[01:23:15.460 --> 01:23:17.460]  А сам заход функции.
[01:23:17.460 --> 01:23:19.460]  Мы же делали как бы тракеечно, мы даже навешивали на конструктор.
[01:23:19.460 --> 01:23:21.460]  Нет.
[01:23:21.460 --> 01:23:23.460]  Ты все забыл уже.
[01:23:23.460 --> 01:23:25.460]  Все равно может быть так, что мы вызовем конструктора,
[01:23:25.460 --> 01:23:27.460]  и он вернется с исключением.
[01:23:27.460 --> 01:23:29.460]  И нам нужно как-то обработать.
[01:23:29.460 --> 01:23:31.460]  Не от памяти выделять.
[01:23:31.460 --> 01:23:33.460]  Не от памяти обработать.
[01:23:33.460 --> 01:23:35.460]  Значит, ну...
[01:23:35.460 --> 01:23:37.460]  Нам это нужно в тракеечи оборачивать, что ли, конструктор.
[01:23:37.460 --> 01:23:39.460]  Мы не можем здесь набирать тракеечи.
[01:23:39.460 --> 01:23:41.460]  Как мы память сводим тогда?
[01:23:41.460 --> 01:23:43.460]  Память сейчас вызовет delete?
[01:23:43.460 --> 01:23:45.460]  От не вернувшегося ptr?
[01:23:45.460 --> 01:23:47.460]  Ну, мы можем сейчас.
[01:23:47.460 --> 01:23:49.460]  Или ptr сегодня вернет?
[01:23:49.460 --> 01:23:51.460]  Ну, вот как раз проблема в том, что вы ничего не можете с этим сделать.
[01:23:51.460 --> 01:23:55.460]  Поэтому еще в стандарт добавлен костыль.
[01:23:55.460 --> 01:23:57.460]  На самом деле это сделано за вас.
[01:23:57.460 --> 01:23:59.460]  Вот это такой вопрос с подвохом.
[01:23:59.460 --> 01:24:01.460]  Вас могут где-нибудь спросить, а как же тогда?
[01:24:01.460 --> 01:24:03.460]  Но на самом деле ответ заключается в том, что
[01:24:03.460 --> 01:24:05.460]  действительно компилятор сам...
[01:24:05.460 --> 01:24:07.460]  Все, отлично, мне пора уходить.
[01:24:07.460 --> 01:24:09.460]  Все, отлично, мне пора уходить.
[01:24:09.460 --> 01:24:11.460]  Компилятор сам вызывает оператор delete.
[01:24:11.460 --> 01:24:13.460]  Компилятор сам вызывает оператор delete.
[01:24:13.460 --> 01:24:15.460]  Функцию именно оператор delete.
[01:24:15.460 --> 01:24:17.460]  С соответствующими параметрами.
[01:24:17.460 --> 01:24:19.460]  Если здесь было бы исключение.
[01:24:19.460 --> 01:24:21.460]  То есть на самом деле вызов этого...
[01:24:21.460 --> 01:24:23.460]  Это выражение работает еще чуть сложнее, чем я рассказал раньше.
[01:24:23.460 --> 01:24:25.460]  Бла-бла-бла.
[01:24:25.460 --> 01:24:27.460]  Все, он там выбирает правильную версию new.
[01:24:27.460 --> 01:24:29.460]  Вот этот конструктор и она сама...
[01:24:29.460 --> 01:24:31.460]  Это забота компилятора все это реализовать.
[01:24:31.460 --> 01:24:33.460]  Если new...
[01:24:33.460 --> 01:24:35.460]  Если конструктор кинул исключение, то компилятор
[01:24:35.460 --> 01:24:37.460]  ищет оператор delete с соответствующей сигнатурой.
[01:24:37.460 --> 01:24:39.460]  Если он был кастомный, вызывает его.
[01:24:39.460 --> 01:24:41.460]  Если не было кастомного, вызывает стандартный.
[01:24:41.460 --> 01:24:43.460]  Если не было кастомного, вызывает стандартный.
[01:24:43.460 --> 01:24:45.460]  Итог потом возвращается и про какие-то исключения.
[01:24:49.460 --> 01:24:51.460]  В смысле, реализация языка.
[01:24:51.460 --> 01:24:53.460]  Вот компилятор.
[01:24:53.460 --> 01:24:55.460]  Вот эти вот вызовы...
[01:24:55.460 --> 01:24:57.460]  Вот эти выражения превращаются в такой код.
[01:24:57.460 --> 01:24:59.460]  Вот на самом деле.
