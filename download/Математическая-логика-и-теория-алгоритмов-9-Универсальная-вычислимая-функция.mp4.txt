[00:00.000 --> 00:18.000]  Технические проблемы затянули начало лекции. Сегодня центральная лекция второй части курса про неразрешимые проблемы.
[00:18.000 --> 00:35.000]  Теория, которую мы будем доказывать и обобщать, это то, что существует перечислимое, но неразрешимое множество.
[00:48.000 --> 01:02.000]  И будет несколько примеров. Начинается изложение с универсальной машины тюринга. Давайте вспомним, что это такое.
[01:02.000 --> 01:12.000]  Давайте говорить про универсальную вычислимую функцию, неважно построена по универсальной машине или как угодно еще.
[01:12.000 --> 01:37.000]  Универсальная вычислимая функция. Это вот что такое. Это функция двух аргументов. Как обычно, аргументы могут быть натуральными числами, могут быть конечными словами.
[01:37.000 --> 01:51.000]  Пусть будут натуральные числа. Функция двух аргументов такая, что верно две вещи. Во-первых, она сама вычислима как функция двух аргументов.
[01:51.000 --> 02:10.000]  Во-вторых, в ней заключены все вычислимые функции одного аргумента.
[02:10.000 --> 02:34.000]  То есть, для любой f из натуральной вычислимой существует p такое, что для любого x у от px равно f от x.
[02:34.000 --> 02:45.000]  Как это нужно понимать? Нужно понимать, что у этого такой языкопрограммирование или компилятор, который получает текст программы и фото этой программы.
[02:45.000 --> 02:56.000]  И потом он эту программу запускает на этом входе и возвращает ответ. То именно за язык определяется компилятором.
[02:56.000 --> 03:08.000]  Можно, конечно, говорить про чисто такие языковые определения, как должна выглядеть корректная программа, что там баланс оборот должен сходиться, какие команды могут быть и так далее.
[03:08.000 --> 03:19.000]  Но, в принципе, необязательно так делать. В принципе, можно сказать, что есть компилятор.
[03:19.000 --> 03:25.000]  И можно сказать, что вообще любая последовательность будет программой для этого компилятора.
[03:25.000 --> 03:32.000]  А если там должны сходиться скобки, то это будет означать, что если скобки не сходятся, то компилятор выдаст ошибку.
[03:32.000 --> 03:37.000]  Ну и тогда, например, это означает, что программа просто нигде не определена.
[03:37.000 --> 03:43.000]  Что программа с синтактической ошибкой это одна из программ для нигде неопределенной функции.
[03:44.000 --> 03:52.000]  Хорошо. А что говорится? Говорит, что это такой универсальный язык или, как говорят, тюринг полный.
[03:52.000 --> 04:03.000]  То есть для любой машины тюринга одного аргумента, для любой вычисленной функции одного аргумента есть программа на этом языке, которая ровно эту функцию вычисляет.
[04:03.000 --> 04:07.000]  Вот это есть универсальность.
[04:07.000 --> 04:15.000]  Хорошо. Ну тогда теорема, которую, собственно, тюринг доказал.
[04:15.000 --> 04:23.000]  Сейчас, давайте сначала рассмотрим.
[04:23.000 --> 04:30.000]  Вот такую диагональную функцию, можно сказать, ну или диагональное множество.
[04:30.000 --> 04:39.000]  С, но ж таких М, то У от НН определено.
[04:39.000 --> 04:45.000]  То есть это множество самоприменимых программ.
[04:45.000 --> 04:51.000]  Множество самоприменимых программ.
[04:58.000 --> 05:04.000]  Вот. Ну что, например, можно понять?
[05:04.000 --> 05:14.000]  Ну, например, можно понять, что оно нетривиальное в том смысле, что оно не пустое и дополнительно тоже не пустое.
[05:14.000 --> 05:19.000]  Среди всех программ есть нигде неопределенное.
[05:19.000 --> 05:25.000]  Соответственно, нигде неопределенное неопределенное нигде, в том числе и на самой себе.
[05:25.000 --> 05:29.000]  Поэтому это не все. Не все натуральные числа.
[05:29.000 --> 05:34.000]  Но, конечно, есть и всюду определенное, всюду определенное прелинвезде, в том числе на своем номере.
[05:34.000 --> 05:40.000]  Поэтому не пустое. Вот. Более того, всюду определенных точно бесконечно.
[05:40.000 --> 05:46.000]  Да, потому что есть там константа 0, константа 1, константа 2 и так далее.
[05:46.000 --> 05:52.000]  Вот.
[05:52.000 --> 05:56.000]  Но утверждается больше.
[06:05.000 --> 06:15.000]  Теорема. Вот это множество S перечислимо, но неразрешимо.
[06:22.000 --> 06:29.000]  Так. Значит, тут две части. Во-первых, перечислимость.
[06:29.000 --> 06:35.000]  Но для перечислимости у нас было много разных свойств.
[06:35.000 --> 06:41.000]  Ну, например, можно сказать так, что вот это S – это просто область определения диагональной функции.
[06:41.000 --> 06:50.000]  Значит, S – это область определения диагональной функции.
[06:50.000 --> 06:56.000]  Значит, D от N, U от NN.
[06:56.000 --> 07:02.000]  Значит, эта диагональная функция вычислима как композиция вычислимых.
[07:02.000 --> 07:10.000]  Но можно сказать, что одна функция собирает из N пару NN, а вторая функция подставляет ее в универсальную.
[07:10.000 --> 07:15.000]  Значит, поэтому D от N – это композиция вычислимых, значит, D от N – вычислимо.
[07:15.000 --> 07:20.000]  Ну и ясно, что вот S – это точность ее области определения.
[07:20.000 --> 07:25.000]  Так, сейчас тут, наверное, так надо поставить.
[07:25.000 --> 07:33.000]  Ну, а у нас была теорема, что все, что является областью определения любой вычислимой функции...
[07:33.000 --> 07:40.000]  Давайте допишу. Диагональная функция вычислима.
[07:40.000 --> 07:45.000]  Из этого следует, что S – перечислимо.
[07:52.000 --> 07:55.000]  Вот. Это простая часть.
[07:55.000 --> 07:58.000]  Вот. А дальше есть сложная часть.
[07:58.000 --> 08:01.000]  Значит, сложная часть – это...
[08:01.000 --> 08:03.000]  Ну, так скажем, более сложная часть.
[08:03.000 --> 08:07.000]  Это не то, чтобы уж прям такое сложное рассуждение.
[08:07.000 --> 08:10.000]  Значит, неразрешимость.
[08:13.000 --> 08:18.000]  Значит, для неразрешимости работает диагональный метод.
[08:19.000 --> 08:28.000]  Та же самая идея, которую мы использовали, когда доказывали, что действительно чисел не счетное число.
[08:28.000 --> 08:31.000]  В общем, взять диагональ и сделать наоборот.
[08:32.000 --> 08:36.000]  Значит, неразрешимость дает диагональный метод.
[08:44.000 --> 08:47.000]  Ну, смотрите, предположим...
[08:48.000 --> 08:53.000]  Да, значит, предположим, что S – разрешима.
[08:53.000 --> 08:57.000]  Значит, предположим, что S – разрешима.
[09:00.000 --> 09:03.000]  Рассмотрим такую функцию.
[09:04.000 --> 09:07.000]  Так, наверное, насоски закрытия.
[09:14.000 --> 09:17.000]  Так, наверное, насоски закрытия.
[09:24.000 --> 09:28.000]  Так, значит, предположим, что S – разрешима.
[09:28.000 --> 09:35.000]  Значит, тогда можно алгоритм, который определяет принадлежность S, как-то еще использовать.
[09:36.000 --> 09:41.000]  Значит, можно рассмотреть вот такую функцию, и тогда она получится вычислимой.
[09:42.000 --> 09:45.000]  Значит, тогда вычислима функция.
[09:45.000 --> 09:49.000]  Значит, вот такая D' от N.
[09:58.000 --> 10:02.000]  Там где-то еще открыто, а вон там наверху.
[10:16.000 --> 10:19.000]  Так, значит, вычислима функции вот такая.
[10:19.000 --> 10:33.000]  Смотрите, D' от N равняется, например, единице, если у от N не определено.
[10:38.000 --> 10:44.000]  И не определено, если у от N определено.
[10:45.000 --> 10:48.000]  Вот, значит, почему это будет разрешима?
[10:48.000 --> 10:52.000]  Ну, потому что если S – разрешима, то можно вот эту штуку проверить.
[10:54.000 --> 10:58.000]  Значит, и, соответственно, понять, какая из двух возможностей имеет место.
[10:58.000 --> 11:03.000]  И, соответственно, либо напечатать единицу, либо зациклиться бесконечно.
[11:05.000 --> 11:07.000]  Хорошо.
[11:07.000 --> 11:10.000]  Значит, вот она вычислима. В чем же будет проблема?
[11:10.000 --> 11:17.000]  Ну, а в том, что, раз она вычислима, то ее можно найти среди как бы самих сечений функции U.
[11:17.000 --> 11:21.000]  Значит, тогда по определению универсальности,
[11:21.000 --> 11:29.000]  тогда из универсальности мы получаем, что существует
[11:29.000 --> 11:31.000]  такая программа P,
[11:31.000 --> 11:39.000]  то для любого N U от PN равняется D' от N.
[11:42.000 --> 11:46.000]  Ну, а раз для любого N, значит, в том числе для N равного P.
[11:48.000 --> 11:50.000]  В чем была проблема?
[11:50.000 --> 11:54.000]  Ну, в том числе, если у от N равняется D',
[11:54.000 --> 11:56.000]  то в том числе для N равного P.
[11:58.000 --> 12:00.000]  В чем была идея диагонального метода?
[12:00.000 --> 12:05.000]  Что как раз, если взяли диагонали и делали все наоборот,
[12:05.000 --> 12:08.000]  то то, что получилось, не может встретиться в таблице.
[12:08.000 --> 12:24.000]  А почему не может встретиться в таблице?
[12:24.000 --> 12:28.000]  Ну, потому что на перечень это диагонали этой строки получат противоречие.
[12:28.000 --> 12:30.000]  Что будет конкретно здесь?
[12:30.000 --> 12:34.000]  Ну, вот если поставим N равное P, то получится, что
[12:34.000 --> 12:40.000]  значит, у от PN равняется D' от P.
[12:40.000 --> 12:47.000]  Это потому, что мы подставили N равное P.
[12:47.000 --> 12:53.000]  Вот, но тут получится противоречие.
[12:53.000 --> 12:59.000]  Потому что, смотрите, если у от PN определен,
[12:59.000 --> 13:09.000]  если у от PP определен, то тогда D' от P не определено.
[13:09.000 --> 13:18.000]  Ну, а тогда, раз одно определено, другое не определено, значит, они не равны.
[13:18.000 --> 13:28.000]  Тогда получается, что D' от P не равно у от PP.
[13:28.000 --> 13:38.000]  Вот, ну и наоборот, значит, наоборот у от PP не определено.
[13:38.000 --> 13:44.000]  Из этого следует, что D' от P равно 1.
[13:45.000 --> 13:52.000]  И следует, все равно D' от P не равно у от PP.
[13:52.000 --> 13:56.000]  Ну и получили противоречие.
[13:56.000 --> 14:12.000]  В любом случае, получили противоречие.
[14:12.000 --> 14:18.000]  Вот, так, ну все, значит, на этом заканчивается рассуждение.
[14:18.000 --> 14:22.000]  Какие-нибудь вопросы?
[14:22.000 --> 14:28.000]  Все понятно?
[14:28.000 --> 14:32.000]  Ну, действительно, значит, да.
[14:32.000 --> 14:38.000]  D', потому что вот это условие можно проверить.
[14:38.000 --> 14:43.000]  Ну, вот это вот от NN определено, это в точности,
[14:43.000 --> 14:47.000]  точнее, вот это вот означает, что N лежит в S,
[14:47.000 --> 14:53.000]  а вот это означает, что N не лежит в S.
[14:53.000 --> 14:55.000]  Вот, то есть программа будет такая.
[14:55.000 --> 15:00.000]  Если у нас есть программа для S, то нужно в эту программу поставить N.
[15:00.000 --> 15:04.000]  И, соответственно, если программа сказала да, то тогда зациклится,
[15:04.000 --> 15:12.000]  если программа сказала нет, то вы досоедините.
[15:12.000 --> 15:16.000]  Так, хорошо.
[15:16.000 --> 15:19.000]  Ну, значит, более известна не проблема самоприменимости,
[15:19.000 --> 15:25.000]  а проблема остановки или останова.
[15:25.000 --> 15:33.000]  Значит, проблема остановки.
[15:33.000 --> 15:39.000]  Значит, это множество H, halting, halting problem H,
[15:39.000 --> 15:45.000]  это уже множество пар, множество пар Px,
[15:45.000 --> 15:54.000]  таких, что у от Px определено.
[15:54.000 --> 16:01.000]  Вот, вот и так, что она тоже неразрешима.
[16:01.000 --> 16:08.000]  Значит, аж неразрешима,
[16:08.000 --> 16:13.000]  значит, так как N лежит в H тогда и только тогда,
[16:13.000 --> 16:31.000]  когда пара N, ой, сейчас не то я написал, N лежит в S.
[16:31.000 --> 16:37.000]  N лежит в S тогда и только тогда, когда пара NN лежит в H.
[16:37.000 --> 16:41.000]  Ну и, соответственно, если бы H был разрешимым,
[16:41.000 --> 16:43.000]  то было бы разрешимым и S,
[16:43.000 --> 16:48.000]  потому что мы просто брали бы такую диагональную пару
[16:48.000 --> 16:57.000]  и про нее спрашивали бы о H.
[16:57.000 --> 17:05.000]  Если бы H было разрешимым,
[17:05.000 --> 17:09.000]  то можно было бы...
[17:09.000 --> 17:37.000]  Так, можно было бы решить и S.
[17:37.000 --> 17:41.000]  Да, значит, как именно решить?
[17:41.000 --> 17:46.000]  Ну, вот так вот решить, взять N на вход,
[17:46.000 --> 17:49.000]  из него изготовить пару NN
[17:49.000 --> 17:52.000]  и эту пару подать в решатель H.
[17:52.000 --> 17:55.000]  И ровно тот же самый ответ, который даст решатель H,
[17:55.000 --> 18:03.000]  будет ответом и для S, вот для одиночного N.
[18:03.000 --> 18:08.000]  Соответственно, получается, что H тоже неразрешим.
[18:08.000 --> 18:13.000]  Интуитивно можно сказать так.
[18:13.000 --> 18:16.000]  Ну, что вообще можно делать в общем виде с программой?
[18:16.000 --> 18:22.000]  Ну, только запустить.
[18:22.000 --> 18:25.000]  Как бы непонятно, ну, смотрите, для некоторых программ
[18:25.000 --> 18:28.000]  можно прямо из текста понять, что она делает
[18:28.000 --> 18:32.000]  и как-то там доказать, что она делает правильно.
[18:32.000 --> 18:35.000]  Но есть такая вещь, как обфускация.
[18:35.000 --> 18:37.000]  Слышали такое слово?
[18:37.000 --> 18:39.000]  Это намеренное искажение программы,
[18:39.000 --> 18:42.000]  чтобы было непонятно, что она делает.
[18:42.000 --> 18:46.000]  Обычно это всякое вредоносное программное обеспечение,
[18:46.000 --> 18:49.000]  притворяет, что оно хорошее.
[18:49.000 --> 18:52.000]  Я не знаю, что вы слышали, несколько дней назад была
[18:52.000 --> 18:55.000]  скандальная история, что обнаружилось, что
[18:55.000 --> 18:58.000]  некоторый пакет злоумышленники на протяжении многих месяцев
[18:58.000 --> 19:00.000]  писали вредоносный код,
[19:00.000 --> 19:03.000]  притворяясь, что они хорошие.
[19:03.000 --> 19:06.000]  Сначала долго что-то хорошее писали,
[19:06.000 --> 19:10.000]  получили доступ к ядру и потом внедряли вредоносный код,
[19:10.000 --> 19:13.000]  так чтобы это потом было установлено на серверах
[19:13.000 --> 19:18.000]  и можно было там красть данные.
[19:18.000 --> 19:21.000]  Но потом они погорели на том, что этот вредоносный код
[19:21.000 --> 19:24.000]  исполнялся долго, и один едливый человек
[19:24.000 --> 19:28.000]  увидел, что программа стала работать на полсекунды дольше,
[19:28.000 --> 19:31.000]  стал разбираться, что случилось,
[19:31.000 --> 19:36.000]  и нашел, соответственно, это внедрение.
[19:36.000 --> 19:41.000]  Соответственно, есть проблема,
[19:41.000 --> 19:46.000]  что когда программист хочет, чтобы было понятно,
[19:46.000 --> 19:51.000]  что делает его код, то он может написать так,
[19:51.000 --> 19:54.000]  что можно будет доказать, что код правильный.
[19:54.000 --> 19:57.000]  Но если программист хочет, чтобы было непонятно,
[19:57.000 --> 20:00.000]  что он делает, то он тоже может так сделать.
[20:00.000 --> 20:03.000]  И нет никакого способа универсально по коду
[20:03.000 --> 20:06.000]  понимать, что он будет делать.
[20:06.000 --> 20:11.000]  Соответственно, в общем виде, допустим,
[20:11.000 --> 20:15.000]  нам интересно, в принципе, остановится эта программа или нет.
[20:15.000 --> 20:18.000]  Что с ней можно делать всегда?
[20:18.000 --> 20:21.000]  Всегда можно начать выполнять.
[20:21.000 --> 20:26.000]  Мы ее запустили, она работает, что-то делает.
[20:26.000 --> 20:28.000]  Остановится она или нет?
[20:28.000 --> 20:30.000]  Непонятно, если она уже остановилась,
[20:30.000 --> 20:32.000]  то да, может точно знать, что она остановилась.
[20:32.000 --> 20:35.000]  В этом смысле аж тоже перечислимо.
[20:35.000 --> 20:38.000]  Аж перечислимо, дайте я тоже отмечу,
[20:38.000 --> 20:45.000]  аж перечислимо просто как область определения самой функции U.
[20:45.000 --> 20:54.000]  Как область определения вычислимой функции U.
[20:54.000 --> 21:00.000]  Так что если она остановилась, то мы это поймем.
[21:00.000 --> 21:04.000]  Но если она зациклилась, то есть повторилась конфигурация,
[21:04.000 --> 21:07.000]  то мы тоже поймем, что она уже никогда не остановится.
[21:07.000 --> 21:12.000]  Может она не завершилась, не зациклилась,
[21:12.000 --> 21:17.000]  но в какой-то такой повторяющийся не совсем цикл вошла.
[21:17.000 --> 21:19.000]  Например, в случае с машиной Тьюринга
[21:19.000 --> 21:22.000]  какое-нибудь бесконечное движение в одну сторону.
[21:22.000 --> 21:25.000]  Тогда она тоже точно не остановится.
[21:25.000 --> 21:28.000]  Но если она все время берет новую память,
[21:28.000 --> 21:31.000]  что-то там делает, но что она делает непонятно,
[21:31.000 --> 21:35.000]  то вот неясно, она остановится или нет.
[21:35.000 --> 21:37.000]  Ну и непонятно, сколько нужно ждать,
[21:37.000 --> 21:39.000]  чтобы уже понять, что она точно не остановится.
[21:39.000 --> 21:41.000]  Ну и в этом как бы и есть проблема,
[21:41.000 --> 21:44.000]  что никак алгоритмически это понять нельзя.
[21:44.000 --> 21:46.000]  Сколько машина должна проработать,
[21:46.000 --> 21:48.000]  чтобы уже точно не остановиться,
[21:48.000 --> 21:50.000]  это алгоритмически понять нельзя.
[21:56.000 --> 21:59.000]  Хорошо, возникает такой вопрос.
[21:59.000 --> 22:05.000]  А нельзя ли от этой проблемы вообще как-нибудь избавиться?
[22:05.000 --> 22:09.000]  Значит, нельзя ли разработать такой язык программирования,
[22:09.000 --> 22:11.000]  чтобы все программы останавливались?
[22:15.000 --> 22:17.000]  Вот такой вопрос.
[22:21.000 --> 22:30.000]  Значит, можно ли разработать язык программирования,
[22:30.000 --> 22:38.000]  чтобы все программы останавливались?
[22:48.000 --> 22:52.000]  Ну, так точно, конечно, можно, в принципе,
[22:52.000 --> 22:54.000]  но универсально нельзя.
[22:54.000 --> 22:57.000]  Ответ, в принципе, можно, но нельзя сделать так,
[22:57.000 --> 22:59.000]  чтобы этот язык был универсальным.
[23:04.000 --> 23:10.000]  Значит, можно, но не получится сделать так,
[23:10.000 --> 23:15.000]  чтобы все всюду останавливающиеся программы можно было написать.
[23:17.000 --> 23:22.000]  Значит, но нельзя сделать так,
[23:27.000 --> 23:48.000]  чтобы были программы для всех всюду определенных функций вычислимых.
[23:53.000 --> 23:56.000]  Ну, и рассуждение точно такое же диагональное.
[23:57.000 --> 23:59.000]  Значит, рассуждение такое.
[24:00.000 --> 24:02.000]  Ну, давайте попробуем повторить теорию.
[24:06.000 --> 24:12.000]  Скажем, что назовем тотально вычислимой функцией.
[24:12.000 --> 24:21.000]  Значит, определение f – это тотально вычислимая функция.
[24:21.000 --> 24:28.000]  Если f – вычислимая и всюду определена.
[24:34.000 --> 24:43.000]  Ну, и скажем, что давайте ее как-нибудь назовем, скажем,
[24:43.000 --> 24:46.000]  с индексом t, для тотальных.
[24:46.000 --> 24:48.000]  Универсальная – тотальная.
[24:49.000 --> 24:52.000]  Она тоже из n на n в n.
[24:53.000 --> 24:59.000]  Значит, это универсальная, тотальная вычислимая функция.
[25:02.000 --> 25:06.000]  Значит, если точно так же верны две вещи.
[25:06.000 --> 25:09.000]  Первое, что у t – тотальная вычислима.
[25:09.000 --> 25:18.000]  И второе, что для любой функции f одного аргумента из n в n,
[25:18.000 --> 25:23.000]  значит, тотально вычислимой, существует такое p,
[25:23.000 --> 25:32.000]  что для любого x, у от px, у t, у t от px равно f от x.
[25:32.000 --> 25:37.000]  Но теорема, что вот такой функции не существует.
[25:37.000 --> 25:42.000]  То есть тут как бы либо одно, либо другое.
[25:42.000 --> 25:46.000]  А сразу и то, и другое не будет.
[25:46.000 --> 25:52.000]  Значит, теорема, что вот такая вот, в отличие от просто универсально вычислимой,
[25:52.000 --> 25:57.000]  универсально-тотально вычислимой не существует.
[25:57.000 --> 26:03.000]  То есть как бы составить язык, для которого проблема остановки тривиально, можно,
[26:03.000 --> 26:07.000]  но зато на этом языке не все задачи можно решить.
[26:07.000 --> 26:11.000]  Да, не все программы можно написать.
[26:11.000 --> 26:17.000]  Так. Ну и доказательств точно такой же диагонально.
[26:17.000 --> 26:21.000]  Так, значит, доказательства.
[26:21.000 --> 26:31.000]  Значит, пусть существует, пусть универсально-тотальная функция существует.
[26:31.000 --> 26:37.000]  Значит, тогда рассмотрим диагональную функцию.
[26:37.000 --> 26:44.000]  Значит, тогда рассмотрим вот такую диагональную-тотальную-подальженную функцию,
[26:44.000 --> 26:56.000]  тогда рассмотрим вот такую диагональную тотальную функцию от n, которая есть у тотальная от n.
[26:56.000 --> 27:06.000]  Вот тогда это диагональная-тотальная тоже тотально вычислима.
[27:06.000 --> 27:18.000]  Диагональная-тотальная, тотальная вычислима, ну опять же, как композиция тотально вычислимых.
[27:18.000 --> 27:26.000]  Конечно, формирование диагонали это тотальная вычислимая, и подстановка в тотальную тоже будет тотально вычислима.
[27:27.000 --> 27:46.000]  Вот, ну тогда рассмотрим ново изгинутую, значит, D't от n, которая будет равна Dt от n плюс 1, тоже тотально вычислима.
[27:46.000 --> 27:53.000]  Тоже тотально вычислима.
[27:53.000 --> 28:03.000]  Ну и тогда сейчас противоречит как в предыдущем рассуждении, значит, тогда для него должна быть программа.
[28:03.000 --> 28:19.000]  Существует P такой, что для любого n, у тотальная от pn равняется Dt от n, значит, подставляем n равное p.
[28:19.000 --> 28:40.000]  Получаем, что у тотальная от pp равняется Dt от p, а у тотальная от pp это Dt.
[28:40.000 --> 28:54.000]  Получается, что здесь Dt от p, а Dt от p плюс 1.
[28:54.000 --> 29:02.000]  Вот это противоречие, значит, это противоречие, что число равно себе плюс 1.
[29:02.000 --> 29:12.000]  Противоречие, то m равняется m плюс 1.
[29:12.000 --> 29:19.000]  Так, хорошо, а почему такое же противоречие не работает просто для универсальной функции?
[29:19.000 --> 29:27.000]  Ну а для тотальной, для универсальной мы вроде доказали, ну или по крайней мере, помахали руками, почему просто универсальный существует.
[29:27.000 --> 29:36.000]  Почему для просто универсальной такое же рассуждение даст противоречие?
[29:36.000 --> 29:46.000]  Конечно, да, конечно. В данном случае это просто число натуральное, и противоречие, что число равняется себе плюс 1, это противоречие.
[29:46.000 --> 29:54.000]  А для просто универсальной это может быть неопределенным значением, ну а то, что неопределенность равна неопределенность плюс 1, это не противоречие.
[29:54.000 --> 30:00.000]  Потому что неопределенность плюс 1 тоже неопределенность.
[30:00.000 --> 30:09.000]  Вот, но так получается еще одно доказательство, что на диагональной универсальной функции точно есть неопределенности.
[30:09.000 --> 30:17.000]  Если бы их не было, то это все-таки было противоречием.
[30:17.000 --> 30:20.000]  Ну вот, хорошо.
[30:20.000 --> 30:26.000]  Ну вот, получается, что никак не спрятаться.
[30:26.000 --> 30:37.000]  Никак не спрятаться от проблемы остановки, то есть либо у вас будет совсем не универсальный язык, либо у вас будет неразрешимая проблема остановки.
[30:37.000 --> 30:39.000]  А может, в принципе, то и другое.
[30:39.000 --> 30:46.000]  Ну и то и другое, это там уже экзотика, что не все программы можно написать, но при этом остановка неразрешима.
[30:46.000 --> 30:49.000]  Такое, конечно, можно сделать.
[30:49.000 --> 30:51.000]  Вот.
[30:51.000 --> 30:56.000]  Ну хорошо.
[30:56.000 --> 31:13.000]  Итак.
[31:13.000 --> 31:25.000]  Ну ладно, давайте посмотрим какую-нибудь другую задачу.
[31:25.000 --> 31:28.000]  Ну, например, посмотрим вот на что.
[31:28.000 --> 31:32.000]  Значит, множество с от слова константа.
[31:32.000 --> 31:45.000]  Значит, это функции, постоянные на своей области определения.
[31:45.000 --> 31:53.000]  То есть это получается множество программ таких, что для любых x, y.
[31:53.000 --> 32:07.000]  Значит, если у от px и у от py определены, то тогда они равны друг другу.
[32:07.000 --> 32:14.000]  У от px равно у от py.
[32:14.000 --> 32:20.000]  Это уже какое-то более хитрое множество.
[32:20.000 --> 32:24.000]  Вот. Ну тут что получается?
[32:24.000 --> 32:30.000]  Получается, что оно непонятно, почему и перечислимым будет.
[32:30.000 --> 32:37.000]  Значит, как можно доказать, что на всей области определения постоянное?
[32:37.000 --> 32:45.000]  Это не понятно, что такое, потому что нужно бесконечно много чисел проверить.
[32:45.000 --> 32:47.000]  То есть непонятно, как...
[32:47.000 --> 32:54.000]  Вот пусть мы ее запустили, даже в донецких входах, как-то параллельно перескакиваем туда-сюда.
[32:54.000 --> 32:59.000]  На каких-то точках получили значения.
[32:59.000 --> 33:05.000]  Пусть даже они все одинаковые, но непонятно, что на всех остальных тоже будут одинаковые.
[33:05.000 --> 33:12.000]  Вот. Ну, на самом деле здесь это множество не будет причислимым.
[33:12.000 --> 33:17.000]  Значит, его дополнение будет ц с чертой.
[33:17.000 --> 33:21.000]  На самом деле будет перечислимым.
[33:24.000 --> 33:27.000]  Значит, почему?
[33:32.000 --> 33:36.000]  Ну, что такое ц с чертой?
[33:36.000 --> 33:41.000]  Ц с чертой – это множество таких П,
[33:41.000 --> 33:46.000]  то существует х, у, на что...
[33:49.000 --> 33:54.000]  Так, дать я так напишу, что у от ПХ равняется К.
[33:54.000 --> 34:00.000]  А у от ПЮ равняется М, который не равно К.
[34:00.000 --> 34:08.000]  И это как бы подчеркнешь, что когда я пишу равно К, это имеется в виду, что равно натуральному числу, а не неопределенности.
[34:16.000 --> 34:20.000]  Хорошо. Ну а почему это...
[34:23.000 --> 34:27.000]  Это почему перечислимо?
[34:30.000 --> 34:40.000]  Ну, можно по-разному говорить.
[34:41.000 --> 34:45.000]  Да.
[34:57.000 --> 35:01.000]  Ну, почти так. Да, почти так. Только нужно еще один параметр.
[35:01.000 --> 35:09.000]  Потому что если у вас просто есть х и крик, то вы не сможете понять верное это или неверное.
[35:09.000 --> 35:13.000]  Потому что если у вас уже есть ответы, то вы, конечно, можете сравнить, что они не равны.
[35:13.000 --> 35:17.000]  Но если ответов нет, то не понимаете, как понять, что их не будет в будущем.
[35:17.000 --> 35:20.000]  То есть тут нужно добавить еще один квантор.
[35:20.000 --> 35:25.000]  Можно написать так, что тут существует нож таких П,
[35:25.000 --> 35:34.000]  что существует, ну, допустим, Х, У, С, Т,
[35:34.000 --> 35:43.000]  что от ПХ вычисляется за С шагов.
[35:46.000 --> 35:54.000]  Значит, от ПЮ вычисляется за Т шагов.
[35:56.000 --> 36:04.000]  И, соответственно, У от ПХ не равно У от ПЮ.
[36:06.000 --> 36:10.000]  Ну и тогда это очень похоже на пределы проекции.
[36:10.000 --> 36:16.000]  То есть можно сказать, что у нас есть такие четверки, Х, Ю, С, Т, ну и еще отдельно П.
[36:16.000 --> 36:20.000]  И мы, соответственно, перебираем уже в пятимерном пространстве, получается.
[36:20.000 --> 36:25.000]  Ну, можно сказать, что и в двумерном, можно всю эту четверку закодировать одним числом.
[36:25.000 --> 36:33.000]  И перебирать, соответственно, наборы ИСП и коды четверки.
[36:33.000 --> 36:37.000]  И проверять вот это. То, что здесь написано в скобках.
[36:37.000 --> 36:40.000]  Так, кстати, вот эту скобку надо еще закрыть.
[36:40.000 --> 36:44.000]  То, что написано в скобках, это уже разрешимый предикат.
[36:44.000 --> 36:49.000]  Потому что можно докодировать четверку, можно запустить на данное число шагов,
[36:49.000 --> 36:54.000]  можно проверить, остановится или нет. Если остановился, то можно проверить, будут равны или нет.
[36:57.000 --> 37:03.000]  Вот. То есть это получается перечислимо, как проекция разрешима.
[37:05.000 --> 37:16.000]  С чертой перечислимо, как проекция разрешима.
[37:20.000 --> 37:25.000]  Так. Почему не разрешима?
[37:25.000 --> 37:28.000]  Ну, сейчас чуть попозже обсудим.
[37:33.000 --> 37:38.000]  Да, значит, не разрешима.
[37:38.000 --> 37:43.000]  Значит, это позже будет.
[37:43.000 --> 37:46.000]  Так, а надо перерыв делать.
[37:46.000 --> 37:48.000]  И можно дальше.
[37:48.000 --> 37:51.000]  Позже начали, давайте тогда.
[37:51.000 --> 37:54.000]  Постараемся успеть то, что я планировал.
[37:54.000 --> 38:00.000]  Значит, еще одна задача. Это про всюдуопределенность.
[38:00.000 --> 38:04.000]  Значит, это Т.
[38:04.000 --> 38:08.000]  Значит, Т это...
[38:08.000 --> 38:13.000]  Давайте я с словами сначала напишу.
[38:13.000 --> 38:18.000]  Множество всюдуопределенных программ, то есть тотальных.
[38:18.000 --> 38:21.000]  Всюдуопределенных программ.
[38:21.000 --> 38:26.000]  То есть получается, что Т это множество таких П,
[38:26.000 --> 38:33.000]  что для любого Х у от ПХ определено.
[38:33.000 --> 38:40.000]  Но от У от ПХ определенно это тоже не разрешимый предикат, как мы уже выяснили.
[38:40.000 --> 38:47.000]  То есть можно еще так, чуть подлиннее формулу написать.
[38:47.000 --> 38:49.000]  Можно писать, что это множество таких П,
[38:49.000 --> 38:53.000]  что для любого Х существует Т.
[38:53.000 --> 38:56.000]  Значит, что У от ПХ
[38:56.000 --> 39:03.000]  останавливается за Т.
[39:03.000 --> 39:06.000]  Но вот эти вот два квантора для любого существуют,
[39:06.000 --> 39:09.000]  намекают на то, что это не будет ни перечислимо,
[39:09.000 --> 39:12.000]  ни, как говорят, ко-перечислимо.
[39:12.000 --> 39:15.000]  Ко-перечислимо означает вот это, что дополнение перечислимо.
[39:15.000 --> 39:18.000]  И вот это, что мы уже выяснили,
[39:18.000 --> 39:22.000]  что это не будет ни перечислимо, ни, как говорят, ко-перечислимо.
[39:22.000 --> 39:26.000]  Ко-перечислимо означает вот это, что дополнение перечислимо.
[39:26.000 --> 39:30.000]  Значит, смотрите, в перечислимости у нас один квантор существования,
[39:30.000 --> 39:32.000]  потому что проекция.
[39:32.000 --> 39:35.000]  Или может быть много, но все кванторы существования.
[39:35.000 --> 39:38.000]  Тогда это как один квантор по К-бочке.
[39:38.000 --> 39:43.000]  Вот в ко-перечислимости у нас получилось вот здесь квантор всеобщности.
[39:43.000 --> 39:47.000]  Для любого верно там что-то.
[39:47.000 --> 39:51.000]  Нужно добавить, чтобы в скопках получилось что-то разрешимое.
[39:51.000 --> 39:55.000]  А здесь получилось, что сначала квантор для любого, потом существует.
[39:55.000 --> 40:03.000]  Ну и вот это вот на самом деле, значит, Т будет не перечислимо
[40:03.000 --> 40:14.000]  и не ко-перечислимо, то есть Т с чертой тоже не перечислимо.
[40:14.000 --> 40:19.000]  Давайте еще один пример, а потом будем изучать, как это все доказывать.
[40:19.000 --> 40:24.000]  Доказывать, что что-то не перечислимо и не ко-перечислимо.
[40:24.000 --> 40:32.000]  Еще один пример, давайте конечную область определения.
[40:32.000 --> 40:37.000]  FD, finite domain.
[40:37.000 --> 40:55.000]  Это может таких программ, то у от p и второго аргумента имеет конечную область определения.
[40:55.000 --> 40:57.000]  Как это записать через кванторы?
[40:57.000 --> 40:59.000]  Что такое вообще конечное множество?
[40:59.000 --> 41:09.000]  Это означает, что есть какой-то предел, что после него уже нет никаких элементов множества.
[41:09.000 --> 41:12.000]  Вот так и можно написать.
[41:12.000 --> 41:18.000]  Это означает, что тут существует...
[41:18.000 --> 41:23.000]  Там такое... Нет, сейчас им большой, наверное, нехорошо будет путаться.
[41:23.000 --> 41:29.000]  Если существует m, для любого n больше m и для любого t,
[41:29.000 --> 41:47.000]  значит будет, что от p и n не остановится за t шагов.
[41:47.000 --> 41:50.000]  Видите, тоже два квантора, но другие, чем здесь.
[41:50.000 --> 41:56.000]  Здесь для любого существует, там существует для любого.
[41:56.000 --> 42:01.000]  Это все неспроста, это нас все потихоньку подводит к формальной арифметике,
[42:01.000 --> 42:10.000]  которую мы, наверное, через пару лекций обсудим.
[42:10.000 --> 42:15.000]  Теперь давайте обсудим, как доказывать...
[42:15.000 --> 42:22.000]  Вот это fd тоже не перечислимо и неко перечислимо.
[42:22.000 --> 42:26.000]  fd не перечислимо.
[42:26.000 --> 42:33.000]  fd с чертой тоже не перечислимо.
[42:33.000 --> 42:43.000]  Основной инструмент, как это все доказывать, называется m-сводимость.
[42:43.000 --> 42:51.000]  Инструмент m-сводимость.
[42:51.000 --> 42:55.000]  Значит, только и буквка m никто точно не знает.
[42:55.000 --> 42:58.000]  Есть две стандартных расшифровки.
[42:58.000 --> 43:02.000]  Одна расшифровка – это mapping predictability.
[43:02.000 --> 43:05.000]  Mapping – это отображение.
[43:05.000 --> 43:07.000]  Сейчас у нас будет отображение.
[43:07.000 --> 43:10.000]  А второе – это many to one.
[43:10.000 --> 43:13.000]  В смысле, что это не взять на инъекции, это отображение.
[43:13.000 --> 43:19.000]  Но и действительно сейчас у нас будет вполне себе many to one.
[43:19.000 --> 43:20.000]  Хорошо.
[43:20.000 --> 43:25.000]  M-сводимость – это вот что такое.
[43:25.000 --> 43:29.000]  Определение.
[43:29.000 --> 43:36.000]  Это отношение на множественных или на языках.
[43:36.000 --> 43:39.000]  Это множество a.
[43:39.000 --> 43:44.000]  m-сводится к множеству b-a.
[43:44.000 --> 43:45.000]  Если верно следующее.
[43:45.000 --> 44:00.000]  Если существует тотально вычислимая f, такая что для любого x верно следующее.
[44:00.000 --> 44:15.000]  x лежит в a тогда и только тогда, когда f от x лежит в b.
[44:15.000 --> 44:20.000]  Зачем эта штука нужна?
[44:20.000 --> 44:28.000]  Основные свойства m-сводимости.
[44:28.000 --> 44:30.000]  Ключевое, наверное, следующее.
[44:30.000 --> 44:40.000]  Если у нас множество разрешимо, и к нему что-то сводится другое множество, то это другое множество тоже разрешимо.
[44:40.000 --> 44:44.000]  В чем вообще общая идея сводимости, скажем, одно из задачек другой?
[44:44.000 --> 44:47.000]  То означает свести задачку уже решенной.
[44:47.000 --> 44:56.000]  Но это означает, что то решение, которое есть для уже решенной, можно применить и для той, которую мы свели.
[44:56.000 --> 45:13.000]  Соответственно, вон как раз ключевое свойство, что если a сводится к b, значит a-b разрешимо, то тогда a тоже разрешимо.
[45:13.000 --> 45:19.000]  Так, как это доказывается?
[45:19.000 --> 45:22.000]  Другим цветом буду, конечно, писать.
[45:22.000 --> 45:25.000]  Ну, можно по-разному писать.
[45:25.000 --> 45:28.000]  Вообще мы про похожую вещь уже говорили.
[45:28.000 --> 45:34.000]  Когда говорили, почему неразрешимый проблем остановки, то мы не явно такую штуку использовали.
[45:35.000 --> 45:43.000]  Если вы умеете решать задачу b, то по x из a вы посчитаете f от x.
[45:43.000 --> 45:48.000]  То есть не из a, а про x, про который нужно выяснить, лежит он в a или нет.
[45:48.000 --> 45:53.000]  По этому x вы посчитаете f от x, про f от x выясните, лежит он в b или нет.
[45:53.000 --> 45:58.000]  И тот же самый ответ годится для a.
[45:58.000 --> 46:01.000]  Но форму можно такую написать.
[46:01.000 --> 46:14.000]  Значит, характеристическая функция множества a от x это будет просто характеристическая функция b от f от x.
[46:14.000 --> 46:25.000]  Ну и, соответственно, поскольку f тотального числимо и хи b тоже тотального числимо, то композиция тоже тотального числимо.
[46:25.000 --> 46:38.000]  То есть вот это вот будет тотально вычислимое как композиция тотального числимо.
[46:38.000 --> 46:45.000]  Ну а это и означает, что и a тоже будет вычислимым.
[46:45.000 --> 46:48.000]  Это означает, что a разрешима.
[46:48.000 --> 46:52.000]  Явно отмечу.
[46:52.000 --> 46:57.000]  Значит, получаем, что хи а вычислимо.
[46:57.000 --> 47:00.000]  Сюда получаем, что а разрешима.
[47:05.000 --> 47:11.000]  Так, вроде стихово можно открыть обратно.
[47:18.000 --> 47:23.000]  Второе.
[47:23.000 --> 47:27.000]  Ну, вторая транзитивность.
[47:27.000 --> 47:39.000]  Значит, если а им сводится к b, значит, а b им сводится к c, то тогда а им сводится к c.
[47:39.000 --> 47:46.000]  А а им сводится к c.
[47:46.000 --> 47:49.000]  Вот. Значит, это почему?
[47:49.000 --> 47:51.000]  Ну, тоже примерно так же.
[47:51.000 --> 48:02.000]  То есть тут нужно написать, что х лежит в a тогда и только тогда, когда f от x лежит в b.
[48:02.000 --> 48:11.000]  А это тогда и только тогда, когда g от f от x лежит в c.
[48:11.000 --> 48:15.000]  Ну и, соответственно, вот эта композиция тоже будет тотально вычислимой.
[48:15.000 --> 48:20.000]  И соответствующий условие будет верно.
[48:20.000 --> 48:27.000]  То есть g в композиции с f тотально вычислимой.
[48:35.000 --> 48:39.000]  Так, хорошо. Какие у нас еще будут нужные свойства?
[48:39.000 --> 48:45.000]  На самом деле, пункт один, он верен не только для разрешимых, но и для причислимых множеств.
[48:45.000 --> 48:49.000]  Значит, вот это давайте поймем.
[48:49.000 --> 49:00.000]  Значит, если a сводится к b, а b перечислимо, то тогда a тоже перечислимо.
[49:04.000 --> 49:10.000]  Вот. Это у нас есть разные определения перечислимостям.
[49:10.000 --> 49:18.000]  Ну, например, можно сказать так, что пусть b это область определения какой-то функции g.
[49:25.000 --> 49:31.000]  Значит, b это область определения g.
[49:31.000 --> 49:39.000]  Тогда получается, что a...
[49:39.000 --> 49:41.000]  Так, сейчас давайте это еще тут распишем.
[49:41.000 --> 49:45.000]  Что это значит? Это значит, что x лежит в b.
[49:45.000 --> 49:50.000]  Тогда и только тогда, когда g определено.
[49:50.000 --> 49:58.000]  А a тогда будет равняться области определения от g в композиции с f.
[50:01.000 --> 50:06.000]  Потому что получается, что x лежит в a.
[50:06.000 --> 50:11.000]  Тогда и только тогда, когда f от x лежит в b.
[50:11.000 --> 50:18.000]  Это тогда и только тогда, когда g от f от x определено.
[50:18.000 --> 50:24.000]  Ну и, соответственно, если у нас b был и перечислимым, то g вычислимо.
[50:24.000 --> 50:29.000]  А f тотально вычислимо, значит g в композиции с f тоже вычислимо.
[50:29.000 --> 50:33.000]  Не обязательно тотально, только f тотально вычислимо.
[50:33.000 --> 50:38.000]  И, соответственно, ее область определения это в точности a.
[50:38.000 --> 50:44.000]  Их лежит в a тогда и только тогда, когда вот эта штука определена.
[50:44.000 --> 50:51.000]  Можно еще пять других рассуждений привести для других свойств.
[50:51.000 --> 50:54.000]  Ну, ограничимся одним.
[50:57.000 --> 51:02.000]  Так, хорошо, значит, что нам еще нужно?
[51:05.000 --> 51:11.000]  Ну, есть еще очень простое свойство, но при этом важное.
[51:11.000 --> 51:17.000]  Значит, простое свойство такое, что a им сводится к b.
[51:17.000 --> 51:24.000]  Тогда и только тогда, когда дополнение k им сводится к дополнению b.
[51:26.000 --> 51:29.000]  Ну, тут на самом деле просто та же самая f подойдет.
[51:35.000 --> 51:42.000]  Значит, тут подойдет та же f.
[51:43.000 --> 51:46.000]  Поэтому это очень просто.
[51:46.000 --> 51:55.000]  Значит, получается, что x лежит в a с чертой тогда и только тогда, когда x не лежит в a.
[51:55.000 --> 52:00.000]  Это тогда и только тогда, когда f от x не лежит в b.
[52:00.000 --> 52:06.000]  И это тогда и только тогда, когда f от x лежит в a с чертой.
[52:06.000 --> 52:11.000]  Так, ну, наверное, даже там достаточно свойств.
[52:13.000 --> 52:18.000]  Дальше, соответственно, следствие будет такое.
[52:18.000 --> 52:22.000]  Следствие из третьего.
[52:24.000 --> 52:30.000]  Следствие, наоборот, что если a сводится к b и a неперечислимо,
[52:30.000 --> 52:35.000]  то тогда b неперечислимо.
[52:35.000 --> 52:38.000]  Это такая контрпозиция.
[52:40.000 --> 52:47.000]  Если a сводится к b, значит, и a неперечислимо,
[52:51.000 --> 52:55.000]  то тогда b тоже неперечислимо.
[53:01.000 --> 53:05.000]  Вот такое следствие.
[53:07.000 --> 53:08.000]  Значит, у нас это есть.
[53:08.000 --> 53:11.000]  Еще у нас есть неразрешимые проблемы остановки.
[53:15.000 --> 53:18.000]  Значит, еще есть одно следствие.
[53:18.000 --> 53:28.000]  Значит, из того, что h перечислимо, но неразрешимо.
[53:30.000 --> 53:40.000]  Значит, следствие просто что h с чертой неразрешимо.
[53:40.000 --> 53:46.000]  Не, извините, неперечислимо.
[53:46.000 --> 53:52.000]  Неразрешимо, конечно, тоже, но и неперечислимо, потому что есть теория Маппоста.
[53:52.000 --> 53:57.000]  Да, теория Маппоста говорит, что если нож твоего дополнения перечислим,
[53:57.000 --> 53:59.000]  то само множество разрешимо.
[53:59.000 --> 54:04.000]  Если множество неразрешимо, но перечислимо, то его дополнение
[54:04.000 --> 54:08.000]  обязано быть неперечислимым, иначе оно само было бы разрешимым.
[54:12.000 --> 54:16.000]  Хорошо, то есть у нас есть вот этот принцип, есть то, с чего начинать.
[54:16.000 --> 54:20.000]  Соответственно, можем доказывать разнообразно другие множества, что они неперечислимы.
[54:20.000 --> 54:30.000]  Так, ну вот, давайте посмотрим на примеры применения.
[54:30.000 --> 54:36.000]  Вот как раз из тех множеств, которые мы изучали.
[54:36.000 --> 54:44.000]  Первое, значит, первое, что множество c, помните, что это?
[54:44.000 --> 54:46.000]  Это значит, констант на своем гостиопределении.
[54:47.000 --> 54:50.000]  Значит, множество c неперечислимо.
[54:59.000 --> 55:03.000]  Но для этого нужно показать, что вот это h с чертой к нему сводится.
[55:09.000 --> 55:13.000]  Нужно, что h с чертой m сводится к c.
[55:16.000 --> 55:17.000]  Ну, это очень легко.
[55:19.000 --> 55:20.000]  Смотрите, что нужно делать.
[55:20.000 --> 55:23.000]  Мы рассмотрим вот такую функцию.
[55:28.000 --> 55:30.000]  Ну, не знаю, скажем, q ее обозначим.
[55:33.000 --> 55:35.000]  А, ну и ладно, давайте этим цветом.
[55:36.000 --> 55:39.000]  Значит, q от t это будет вот что.
[55:40.000 --> 55:42.000]  Это будет единица.
[55:56.000 --> 56:04.000]  Единица, если у от px не остановилось за t шагов.
[56:04.000 --> 56:06.000]  Вот, и ноль иначе.
[56:11.000 --> 56:13.000]  Тогда смотрите, что получается.
[56:14.000 --> 56:22.000]  Получается, что если у от px, значит, если у от px останавливается,
[56:22.000 --> 56:27.000]  то тогда q от t тождественно равно единице.
[56:27.000 --> 56:31.000]  А тогда получается, что q у нас лежит в c.
[56:37.000 --> 56:38.000]  Так.
[56:40.000 --> 56:43.000]  Нет, сейчас я неправильно писал.
[56:45.000 --> 56:47.000]  Вот тут не останавливаться должно быть.
[56:47.000 --> 56:49.000]  Значит, не останавливается.
[56:52.000 --> 56:54.000]  Да, значит, смотрите.
[56:54.000 --> 56:58.000]  Не останавливается, значит, не останавливается ни за какое конкретное время.
[56:59.000 --> 57:05.000]  Значит, какой бы t тут ни было, будет единица, значит, будет всегда единица.
[57:07.000 --> 57:09.000]  Ну, вот, и все.
[57:10.000 --> 57:14.000]  Ну, вот, и считай, что всё-таки за ноль шагов,
[57:15.000 --> 57:17.000]  никакая функция не остановится.
[57:17.000 --> 57:18.000]  Да, хотя бы один шаг нужно сделать.
[57:18.000 --> 57:19.000]  Давайте считать.
[57:19.000 --> 57:22.000]  Что, хотя бы перейти и завершать считай, это уже хотя бы один шаг.
[57:22.000 --> 57:27.000]  Да, поэтому если t равно нулю, то всё-таки точно будет единица.
[57:28.000 --> 57:31.000]  Т.е. мы не будем считать, ну, что это будет,
[57:31.000 --> 57:33.000]  и мы будем считать, что у нас будет,
[57:33.000 --> 57:35.000]  то у нас будет 1,
[57:35.000 --> 57:37.000]  но я не понимаю, как это будет?
[57:37.000 --> 57:43.360]  будет единица, а за какое-то число остановится, то с кого-то момента будет ноль.
[57:43.520 --> 57:53.920]  Если у от px останавливается за там t большое шагов, то тогда получается, что q
[57:53.920 --> 58:00.160]  от нуля равно единице, значит q от t большое равно 0.
[58:00.160 --> 58:05.200]  Из этого следует, что q не принадлежит с.
[58:07.000 --> 58:28.000]  Вот и получилось, глобально получилось, что px не лежит в аж тогда и только тогда, когда q лежит в с.
[58:38.000 --> 58:48.000]  Остается, однако, вопрос, почему этот переход от пары px к q вычислимый?
[58:49.000 --> 59:04.000]  Почему переход от пары px к q вычислимый?
[59:05.000 --> 59:10.000]  Это вопрос, на самом деле, не такой простой, как может показаться.
[59:10.000 --> 59:20.000]  На самом деле ответ такой, что это на самом деле не всегда так.
[59:20.000 --> 59:28.000]  Нужно некоторые специальные тонкие свойства универсального членимых функций.
[59:28.000 --> 59:35.000]  Но если это нормальная универсальная членимая функция, которая делается из универсального машины тюринга, то это будет верно.
[59:35.000 --> 59:41.000]  Или проще даже рассуждать не из терминов универсального машины тюринга, а в терминов какого-нибудь обычного языка программирования.
[59:41.000 --> 59:49.000]  Смотрите, что вообще означает? Вопрос такой, откуда q берет пару px?
[59:49.000 --> 59:55.000]  Пары px не поступают как аргумент, как аргумент поступает только t.
[59:55.000 --> 59:59.000]  Но можно сказать, что это такой параметр.
[59:59.000 --> 01:00:05.000]  То есть можно сказать, что прямо в тексте программы q должны быть заданы px.
[01:00:05.000 --> 01:00:13.000]  Ну и, соответственно, если программа q выглядит как на нормальном языке, то будет так.
[01:00:13.000 --> 01:00:25.000]  Сначала под программа p, которое такое-то, такое-то, такое-то, там число x, которое такое-то, такое-то, такое-то.
[01:00:25.000 --> 01:00:31.000]  И потом мы запускаем компилятор на этой штуке, на t шагов.
[01:00:31.000 --> 01:00:38.000]  То есть программа q выглядит как просто компилятор машины у со счетчиком шагов.
[01:00:38.000 --> 01:00:44.000]  И с изначально записанными прямо в тексте программы px.
[01:00:44.000 --> 01:00:51.000]  Но ясно, что преобразование px в такую программу, это будет вычислимое преобразование.
[01:00:51.000 --> 01:00:57.000]  Просто у нас будет шаблон. Вот как бы p равно тому-то, x равно тому-то.
[01:00:57.000 --> 01:01:02.000]  Дальше мы, соответственно, запускаем все как надо.
[01:01:02.000 --> 01:01:12.000]  И, конечно, преобразование пары px в эту программу q, это будет просто подстановка в шаблон конкретных значений px.
[01:01:12.000 --> 01:01:18.000]  И если у нас программы выглядят так, то, конечно, эта штука будет вычислимая.
[01:01:18.000 --> 01:01:23.000]  И для машин тюринга, конечно, это будет так. Можно взять специальные состояния, которые будут печатать px,
[01:01:23.000 --> 01:01:28.000]  а потом переходить в новую машину, которая будет вот это все делать.
[01:01:28.000 --> 01:01:33.000]  Да, это, конечно, какая-то такая сложная штука, там шаги еще как-то надо считать.
[01:01:33.000 --> 01:01:39.000]  Но, в общем, в эти детали мы лезть не будем. Интуитивно, в нормальном языке программирования,
[01:01:39.000 --> 01:01:47.000]  переход от px q, это будет просто подстановка в шаблон констант.
[01:01:47.000 --> 01:01:51.000]  И это, конечно, простая строка в операции, которая будет вычислимая.
[01:01:51.000 --> 01:01:56.000]  Так, сейчас это я отдельно напишу.
[01:01:56.000 --> 01:02:05.000]  Так, значит, в нормальном языке программирования, в калычках,
[01:02:05.000 --> 01:02:10.000]  в нормальном языке программирования,
[01:02:10.000 --> 01:02:27.000]  переход от пары px q, это просто подстановка в констант в шаблон.
[01:02:27.000 --> 01:02:33.000]  Вот, а в ненормальном тому утверждение может быть неверно.
[01:02:33.000 --> 01:02:40.000]  И даже, наверное, утверждение о том, что с, посмотрите, то, что с неразрешимо,
[01:02:40.000 --> 01:02:46.000]  и это вообще не зависит от того, какой именно универсальный шаблон.
[01:02:46.000 --> 01:02:53.000]  И даже, наверное, утверждение о том, что С неразрешимо.
[01:02:53.000 --> 01:02:56.000]  И это вообще не зависит от того, какое именно универсальное
[01:02:56.000 --> 01:02:59.000]  языкопрограммирование, то есть какая именно универсальна
[01:02:59.000 --> 01:03:02.000]  вычисленная функция. Независимо от этого,
[01:03:02.000 --> 01:03:07.000]  проблем в самбремении всегда будет неразрешимо.
[01:03:07.000 --> 01:03:09.000]  И проблем в остановке, наверное, тоже.
[01:03:09.000 --> 01:03:12.000]  А вот это вот проблема может и будет.
[01:03:12.000 --> 01:03:16.000]  Это тонкие вещи, мы это немножко обсудим на следующей лекции.
[01:03:16.000 --> 01:03:20.000]  Но вообще это скорее такой дополнительный материал.
[01:03:20.000 --> 01:03:27.000]  Что такое нормальное формально, это мы тоже в следующий раз обсудим.
[01:03:27.000 --> 01:03:35.000]  Значит, в ненормальном переход может быть и не вычислил.
[01:03:42.000 --> 01:03:46.000]  Хорошо. Что такое нормальное и ненормальное?
[01:03:46.000 --> 01:03:48.000]  Обсудим в следующий раз.
[01:03:48.000 --> 01:03:50.000]  Пока, наверное, что еще сегодня обсудим?
[01:03:50.000 --> 01:03:55.000]  Это вот про задачу о патальности.
[01:03:55.000 --> 01:04:02.000]  Почему язык Т не перечислимый и некоперечислимый?
[01:04:02.000 --> 01:04:07.000]  Почему язык Т не перечислимый и некоперечислимый?
[01:04:07.000 --> 01:04:12.000]  Почему язык Т не перечислимый и некоперечислимый?
[01:04:12.000 --> 01:04:15.000]  То есть его дополнение тоже не перечислимо.
[01:04:15.000 --> 01:04:18.000]  Это второй пример.
[01:04:18.000 --> 01:04:29.000]  Т не перечислимый и некоперечислимый.
[01:04:29.000 --> 01:04:36.000]  То есть Т с чертой тоже не перечислимый.
[01:04:36.000 --> 01:04:40.000]  Но тут, смотрите, исходя из всего предыдущего,
[01:04:40.000 --> 01:04:49.000]  получается, что нам достаточно доказать две вещи.
[01:04:49.000 --> 01:05:03.000]  Нам достаточно, чтобы было H вводилось к Т.
[01:05:03.000 --> 01:05:12.000]  И H с чертой вводилось к Т.
[01:05:12.000 --> 01:05:21.000]  Сейчас я подумаю, что мне лучше.
[01:05:21.000 --> 01:05:28.000]  Давайте тоже черту переставлю вот сюда.
[01:05:28.000 --> 01:05:31.000]  Это для чего нам нужно было четвертое правило,
[01:05:31.000 --> 01:05:34.000]  что неважно с какой стороны черта стоит.
[01:05:34.000 --> 01:05:37.000]  И это будет одно и то же.
[01:05:37.000 --> 01:05:40.000]  То есть у тиждей нам вообще нужно было, чтобы H с чертой
[01:05:40.000 --> 01:05:43.000]  сводилось к Т, с чертой сводилось к Т.
[01:05:43.000 --> 01:05:50.000]  Но доказывать будет удобнее, когда черта перенесена в другую часть.
[01:05:50.000 --> 01:05:54.000]  Хорошо, значит нам нужно две сводимости.
[01:05:54.000 --> 01:06:02.000]  Ну и сейчас их обсудим.
[01:06:02.000 --> 01:06:13.000]  Первая часть, что H сводится к Т.
[01:06:13.000 --> 01:06:20.000]  Но тут, смотрите, я определю так, что опять же пара Px
[01:06:20.000 --> 01:06:22.000]  переходит в Q.
[01:06:22.000 --> 01:06:29.000]  Такое, что Q от любого T будет на самом деле от T не зависеть.
[01:06:29.000 --> 01:06:37.000]  А будет равно просто у от Px.
[01:06:37.000 --> 01:06:42.000]  То есть тут вход, аргумент фиктивный.
[01:06:42.000 --> 01:06:46.000]  Вот это T, оно вроде как есть, но никак не используется при вычислении.
[01:06:46.000 --> 01:06:50.000]  И сразу программа уже сама знает, что делать.
[01:06:50.000 --> 01:06:55.000]  На место того, чтобы использовать аргумент, она запускает другую программу.
[01:06:55.000 --> 01:06:57.000]  Ну и, соответственно, если у от Px останавливается, то U facial
[01:06:57.000 --> 01:07:00.000]  сразу везде определена.
[01:07:00.000 --> 01:07:03.000]  Если у от Px Charge не останавливается, то Q нигде не определяна,
[01:07:03.000 --> 01:07:07.000]  но, в частности, не везде определена.
[01:07:07.000 --> 01:07:10.000]  Тут подробнее напишу.
[01:07:10.000 --> 01:07:13.000]  Значит, P от X лежит ваше.
[01:07:13.000 --> 01:07:16.000]  Тогда получается, что у от Px останавливается.
[01:07:16.000 --> 01:07:21.000]  Отсюда получается ли для любого T, U от T останавливается.
[01:07:21.000 --> 01:07:24.000]  То есть вот следующая, что Q лежит в Т.
[01:07:24.000 --> 01:07:36.000]  вот значит если p от x не лежит ваш то тогда у от p x не останавливается тогда
[01:07:36.000 --> 01:07:47.520]  для любого t у от и не останавливается ну и тогда куне лежит в общем получилось
[01:07:47.520 --> 01:08:01.480]  получилось по x лежит ваш тогда только тогда когда ку лежит ты то есть аж велик ты
[01:08:01.480 --> 01:08:18.240]  ну и переход будет опять же всюду определенную ну по тем самым причинам да тоже на сайт
[01:08:18.240 --> 01:08:25.060]  там есть сложное рассуждение что на самом деле тут само утверждение будет опять для любого
[01:08:25.900 --> 01:08:31.820]  верно вот но это мы ну может некоторых самых сильных группах может быть обсудят
[01:08:31.820 --> 01:08:40.780]  вот но в общем на лексам это не будем обсуждать есть более сложное рассуждение
[01:08:40.780 --> 01:08:48.180]  про говорит что в любом случае вот это t будет не перечисливаемый никак перечисливаем так
[01:08:48.180 --> 01:08:54.940]  значит и вторая часть вторая часть что аж сводится к тес чертой
[01:08:54.940 --> 01:09:06.540]  сводится к тес чертой здесь уже аргумент будет использоваться значит здесь будет
[01:09:06.540 --> 01:09:17.380]  так а счетом будет то же самое что раньше ну-ка давайте посмотрим подойдет нам вот это вот
[01:09:17.380 --> 01:09:26.740]  а не совсем подойдет нам место нуля нужно будет неопределенность дальше пример такая
[01:09:26.740 --> 01:09:39.540]  же штука так значит куа те будет единица если у от пейкс не останавливается за те шагов
[01:09:39.540 --> 01:09:44.900]  и не определено иначе
[01:09:57.580 --> 01:10:02.980]  так соответственно дайте аккуратно проверим и на этом сегодня завершим
[01:10:02.980 --> 01:10:11.220]  значит получается что если пара пейкс лежит ваш то что получается получается что существует
[01:10:11.220 --> 01:10:20.180]  и существует это кое-что вот пейкс остановится за те шагов
[01:10:25.180 --> 01:10:31.580]  значит отсюда получается что существует и только вот и не определено
[01:10:31.580 --> 01:10:37.780]  ну и значит ку не лежит в те
[01:10:42.220 --> 01:10:47.500]  не лежит в те вот значит а если это не остановится
[01:10:47.500 --> 01:10:58.020]  значит если программа п на фуде икс не останавливается то тогда получается что для любого
[01:10:58.020 --> 01:11:15.780]  т у от пейкс не остановится за те шагов отсюда получается что для любого
[01:11:15.780 --> 01:11:21.860]  т куа т равно единица и тогда соответственно ку у нас лежит
[01:11:26.820 --> 01:11:36.060]  вот ну вот вот и получилось свадимость то есть пейкс лежит ваш тогда и только тогда когда ку
[01:11:36.060 --> 01:11:40.460]  не лежит в те ну то есть вот как раз то что нужно
[01:11:45.780 --> 01:12:00.620]  ну все значит это у нас велось все значит у нас есть две свадимости
[01:12:00.620 --> 01:12:05.820]  неперечислимого к т его дополнению значит это непричислимый дополнитель ты тоже не
[01:12:05.820 --> 01:12:16.220]  причислима а это нам и нужно было вот вот такое рассуждение на что в следующий раз обсудим
[01:12:16.220 --> 01:12:27.900]  следующий раз во-первых я самая расскажу в общем что что означает нормальный язык и что
[01:12:27.900 --> 01:12:36.260]  означает не нормальный а в суде почему универсальный машин тюнг это нормальный язык вот а также
[01:12:36.260 --> 01:12:41.980]  на фоне почему бывают не нормально языке значит а именно окажется что не только вот эти все
[01:12:41.980 --> 01:12:48.380]  примеры будут по крайней мере не разрешимыми но и вообще любое свойство программ в нормальном
[01:12:48.380 --> 01:12:52.540]  языке если только есть программы которые обладают этим свойством программы которые не
[01:12:52.540 --> 01:13:01.180]  обладают будет не разрешимым это называется тирема успенского райса вот вот ее мы обсудим а еще
[01:13:01.180 --> 01:13:09.580]  мы обсудим программы которые с собственным текстом работают да например теорема есть такая что в
[01:13:09.580 --> 01:13:16.260]  любом языке программирования есть так называемый куайн куайн это программа которая свой собственный
[01:13:16.260 --> 01:13:22.540]  текст печатает на этом же языке программирования вот вот оказывается что в любом опять же нормальном
[01:13:22.540 --> 01:13:31.140]  языке есть куайн и это мы тоже докажем через теорему подвижной точки спасибо за внимание приходите
