[00:00.000 --> 00:07.000]  Итак, то есть что мы сделали в прошлый раз?
[00:07.000 --> 00:12.000]  Ну, с точки зрения теории, мы с вами в прошлый раз доказали теорию ухода Фолкерсона
[00:12.000 --> 00:15.000]  и даже алгоритм Эдман Саккарта.
[00:15.000 --> 00:20.000]  Но сегодня мы попробуем изучить более продвинутый алгоритм.
[00:20.000 --> 00:25.000]  Ну а начиная с этого момента, тут уже алгоритмы поиска потока, их много,
[00:25.000 --> 00:30.000]  но есть два магистральных направления, в которых они бывают.
[00:30.000 --> 00:32.000]  Мы изучим оба.
[00:32.000 --> 00:41.000]  Первое, что мы сегодня будем изучать, это концепция блокирующих поток.
[00:41.000 --> 00:50.000]  Сразу два момента, во-первых, не единица, а единица, напоминаю.
[00:50.000 --> 01:03.000]  А во-вторых, здесь вот такое, обычно это ассоциируется с фамилией Динец,
[01:03.000 --> 01:08.000]  потому что он был первым, кто предложил алгоритм, но мне кажется целесообразным
[01:08.000 --> 01:15.000]  отделять глобальную концепцию блокирующих потоков непосредственно алгоритма Динеца.
[01:15.000 --> 01:19.000]  Сейчас увидите почему.
[01:19.000 --> 01:21.000]  А в чем у нас идея?
[01:21.000 --> 01:26.000]  Давайте вспомним, как был устроен алгоритм Эдман Саккарта?
[01:26.000 --> 01:38.000]  Применяем метод Форда Фолкерсона, каждый метампуть ищем по этому.
[01:38.000 --> 01:45.000]  Или если переформулировать это по-другому, то мы берем, то есть в каждый момент времени
[01:45.000 --> 01:52.000]  мы в остаточной сети ищем кратчайший по количеству ребер путь, по которому можно протекнуть поток.
[01:52.000 --> 02:03.000]  И мы доказали мистическую теорему о том, что расстояние от истока до стока в этом смысле не уменьшается.
[02:03.000 --> 02:10.000]  Концепция блокирующих потоков предлагает делать более хиткую вещь.
[02:10.000 --> 02:15.000]  Ведь заметим, что мы на каждом шаге запускаем БФС честно.
[02:15.000 --> 02:20.000]  Концепция блокирующих потоков предлагает следующее.
[02:20.000 --> 02:31.000]  Значит запустим БФС.
[02:31.000 --> 02:35.000]  Что у нас получится?
[02:35.000 --> 02:40.000]  Вот этот поток мы уже, как помнится, в ретроанализе рисовали.
[02:40.000 --> 02:42.000]  Это по остаточной сети.
[02:42.000 --> 02:46.000]  Ну, я еще не сказал 3 слов, но это да, это она.
[02:46.000 --> 02:49.000]  Ну, почти.
[02:49.000 --> 02:53.000]  Ну, конечно же, внимательные зрители заметят, что я рисую не все ребра.
[02:53.000 --> 02:58.000]  Во-первых, когда я сейчас рисую ребра, я имею в виду, естественно, ненасыщенные ребра.
[02:58.000 --> 03:03.000]  Понимаете, да?
[03:03.000 --> 03:07.000]  Значит, меня интересуют только ненасыщенные ребра.
[03:07.000 --> 03:13.000]  Пока что вы рисуете только... вообще только ребра, которые в БФС были учтены?
[03:13.000 --> 03:15.000]  Абсолютно верно.
[03:15.000 --> 03:21.000]  Да, то есть действительно, можно сказать, что еще на самом деле есть и другие ребра.
[03:21.000 --> 03:23.000]  То есть могут быть ребра какие?
[03:23.000 --> 03:26.000]  Ну, могут быть там всякие вот эти вот ребра.
[03:26.000 --> 03:30.000]  Вот эти вот, да, не очень видно, но они нам и не нужны.
[03:30.000 --> 03:32.000]  Поэтому рисую такие матеры.
[03:32.000 --> 03:35.000]  И ребра, конечно, ведущие куда-то слой назад.
[03:35.000 --> 03:41.000]  Самое главное, что для нас верно, это то, что не существует ребра, которые ведут вперед.
[03:41.000 --> 03:42.000]  По определению БФС.
[03:42.000 --> 03:44.000]  Да, через слой.
[03:44.000 --> 03:48.000]  Ну, или через несколько слоев, да, просто по определению БФС, совершенно верно.
[03:48.000 --> 03:50.000]  Вот тут всякое вот такое.
[03:50.000 --> 03:53.000]  Потом тут слой может сужаться, а может и нет.
[03:53.000 --> 03:58.000]  Там где-то тут он наконец включается, сток, наконец-то.
[03:58.000 --> 04:01.000]  Слои на этом, кстати, не заканчиваются, что интересно.
[04:01.000 --> 04:04.000]  Ну, они нам относительно бессмысленно, да.
[04:04.000 --> 04:06.000]  Мы же их не ищем после этого.
[04:06.000 --> 04:07.000]  Почему?
[04:07.000 --> 04:09.000]  БФС работает полностью.
[04:09.000 --> 04:13.000]  Ну, в принципе, в БФС, в БФС, в БФС, в БФС.
[04:13.000 --> 04:15.000]  И теперь идея такая.
[04:15.000 --> 04:18.000]  А давайте-ка...
[04:18.000 --> 04:20.000]  Значит, нот.
[04:20.000 --> 04:25.000]  А давайте-ка попробуем, значит, во-первых, временно проигнорировать.
[04:26.000 --> 04:52.000]  Ну, мысленно даже вот, мы можем себе представить мысленно, что мы их просто вот выкидываем.
[04:52.000 --> 05:03.000]  представить мысленно, что мы их просто вот выкидываем, ну по факту мы их временно игнорируем, тогда то, что осталось называется слоистая сеть.
[05:04.000 --> 05:06.000]  Слоистая.
[05:13.000 --> 05:17.000]  То есть вот только черные ребра имеют значение, все остальные мы их знаем.
[05:18.000 --> 05:27.000]  Так вот, так вот наша цель найти в этой сети блокирующий потоп.
[05:28.000 --> 05:31.000]  Ну полный мы же прошлый раз сталкивались даже с понятием блокирующий потоп.
[05:34.000 --> 05:38.000]  Что это такое?
[05:39.000 --> 05:41.000]  Максимальный потоп вести.
[05:42.000 --> 05:46.000]  Такое, что нельзя добавить еще что-то.
[05:47.000 --> 05:48.000]  А целый путь.
[05:49.000 --> 05:50.000]  Да нельзя просто целый путь добавить.
[05:51.000 --> 05:52.000]  Ну не совсем.
[05:53.000 --> 06:00.000]  В общем случае, помним, блокирующий потоп это нельзя по какому-то пути пропихнуть потоп без отмены потока по какому-то ребру.
[06:04.000 --> 06:09.000]  То есть может быть этот потоп будет не максимальным, но вам тогда придется забить.
[06:10.000 --> 06:17.000]  Ну в терминах вот этой сети, то есть вам придется отменять потоп по контр-ребру, это означает, что вам придется как-то вот так вот.
[06:20.000 --> 06:31.000]  То есть действительно сейчас нас интересует, сейчас мы будем пихать потоп, но пихать потоп мы будем только по путям из СТ, такие, что каждое ребро ведет в следующий слой.
[06:31.000 --> 06:36.000]  То есть условно ходить как-то внутри слоя, перескакивать как-то вот так вот, круги наворачивать.
[06:37.000 --> 06:39.000]  Вот что мы не будем, то мы не будем.
[06:41.000 --> 06:43.000]  Так что соответственно идем, идем, идем.
[06:44.000 --> 06:47.000]  То есть наша цель не найти в этой сети максимальный потоп.
[06:48.000 --> 06:54.000]  Нам достаточно найти в соответствии с концепцией именно блокирующий потоп.
[06:55.000 --> 07:03.000]  То есть потоп такой, что именно вот по вот такому вот виду пути припихнуть потоп уже не удастся.
[07:04.000 --> 07:07.000]  То есть у нас нельзя использовать обратное?
[07:08.000 --> 07:09.000]  Нельзя.
[07:12.000 --> 07:19.000]  Причем не только обратное, которое мы выкинули, потому что мы оставили только черное, но еще и обратное к черным, которое появится, если мы будем просто потопиться.
[07:19.000 --> 07:20.000]  Ну да.
[07:21.000 --> 07:22.000]  Ну да.
[07:23.000 --> 07:28.000]  Ну теперь заметим, что конечно же, так как мы нашли блокирующий поток, он не обязан быть максимальным.
[07:29.000 --> 07:30.000]  Ну и что, мы идем заново?
[07:31.000 --> 07:33.000]  Что нам предлагает концепция?
[07:36.000 --> 07:38.000]  Концепция предлагает действительно следующее.
[07:39.000 --> 07:40.000]  Значит запустили BFS, нашли блокирующий потоп.
[07:40.000 --> 07:42.000]  Значит восстановили в правах все ребра.
[07:43.000 --> 07:51.000]  Ну а также если появились какие-то новые обратные, там где-то появились вот какие-то наши любимые рыжие, дорогие ребра.
[07:54.000 --> 07:55.000]  Так.
[07:56.000 --> 07:58.000]  Вот, там какие-то вот такие могли появиться.
[07:59.000 --> 08:00.000]  Могли еще такие.
[08:01.000 --> 08:02.000]  Так, как тут еще даты можно дойти?
[08:03.000 --> 08:05.000]  А, ну как-нибудь вот так вот можно.
[08:05.000 --> 08:06.000]  Ну можно.
[08:07.000 --> 08:08.000]  Может быть вот это вот так вот.
[08:09.000 --> 08:10.000]  Да, ну ладно.
[08:11.000 --> 08:12.000]  Вот.
[08:13.000 --> 08:14.000]  Всяк это могло быть, какие-то ребра пришли.
[08:15.000 --> 08:17.000]  Ну все восстанавливаем в правах и запускаем BFS заново.
[08:20.000 --> 08:24.000]  Запускаем BFS заново, получается вообще другая сеть, и мы в ней теперь еще блокирующий поток.
[08:25.000 --> 08:27.000]  Да, но конечно же старые потоки мы не отменяем.
[08:28.000 --> 08:30.000]  Да, но BFS все еще запускаем по...
[08:31.000 --> 08:32.000]  Нет, не односущное.
[08:32.000 --> 08:34.000]  Вы думаете, что мы умеем по обрядным рогам там ходить?
[08:35.000 --> 08:36.000]  А, ну в этом плане, да.
[08:37.000 --> 08:38.000]  Формальное определение можно еще раз повторить?
[08:39.000 --> 08:40.000]  Блокирующего потока?
[08:41.000 --> 08:42.000]  Нет, это по-настоящему блокирующий поток.
[08:43.000 --> 08:44.000]  Нет, да.
[08:45.000 --> 08:46.000]  Ну я бы сказал да.
[08:47.000 --> 08:59.000]  Нет, на самом деле да, потому что блокирующий поток это поток, который нельзя улучшить путем исключительно добавления потока по всем ребрам.
[09:02.000 --> 09:07.000]  Или вот, или в цервинах слои...
[09:08.000 --> 09:10.000]  Не существует ненасыщенного пути из стока в исток, все?
[09:11.000 --> 09:14.000]  Да, в нашем случае строка по черным ребрамам.
[09:15.000 --> 09:22.000]  А, по черным, потому что нет, мы сказали выкинем все остальные ребра, а потом в получившемся графе найдем блокирующий поток.
[09:23.000 --> 09:25.000]  Ну здесь я просто сказал, что как-то будет в церквенах именно слои стоить.
[09:26.000 --> 09:27.000]  Да, конечно.
[09:27.000 --> 09:31.000]  Первое, что я сказал, это в общем случае работает, но в общем случае блокирующий поток не нужен.
[09:32.000 --> 09:33.000]  Вот.
[09:34.000 --> 09:44.000]  Но тогда, когда мы уже второй запустили другой БФС, другой граф, другие ребра вообще стали черными, бывшая рыжая могла стать черным, там черная могла стать фиаретовым, там все что угодно.
[09:45.000 --> 09:46.000]  А могло и просто исчезнуть, потому что у нас нет.
[09:47.000 --> 09:50.000]  Ну теперь мы и в ней поверх старого накидываем блокирующий поток.
[09:51.000 --> 09:54.000]  Ну поверх понятно, как мы сказали, могут быть отменные вот эти все.
[09:55.000 --> 10:01.000]  Делаем мы это так, пока в полном соответствии с методом форда фонстракциона, пока из СТ вообще есть путь.
[10:03.000 --> 10:06.000]  Ну как только еще другой БФС скажет, что пути нет, значит ура, поздравляем.
[10:07.000 --> 10:10.000]  Собственно, мы нашли максимальный поток, теряем форда фонстракциона, восприветствуем.
[10:13.000 --> 10:14.000]  Вот.
[10:15.000 --> 10:17.000]  То есть вот такой получается металгарита.
[10:18.000 --> 10:20.000]  То есть сама в себе концепция, она заключается в следующем.
[10:21.000 --> 10:22.000]  То есть прям вот концепция.
[10:22.000 --> 10:24.000]  То есть это такой тоже еще один про алгоритм.
[10:25.000 --> 10:28.000]  То есть так сказать, вот я его могу так сравнивать.
[10:29.000 --> 10:44.000]  Пока в, ну вот из СТ есть путь в остаточной сети, так сказать, ЖФ, по ненасвещенным ребрам.
[10:44.000 --> 10:58.000]  То, соответственно, запустить БФС, вот я так напишу, запустить БФС, запитая, построить слоистую сеть, я тут через запятую напишу, потому что это одновременно делается.
[10:58.000 --> 10:59.000]  Слоистую сеть.
[11:02.000 --> 11:10.000]  И соответственно, найти в этой сети, в этой сети наш патрон.
[11:10.000 --> 11:11.000]  Вот.
[11:12.000 --> 11:13.000]  Вот.
[11:14.000 --> 11:15.000]  Вот.
[11:16.000 --> 11:17.000]  Вот.
[11:18.000 --> 11:19.000]  Вот.
[11:19.000 --> 11:31.000]  И соответственно, найти в этой сети, в этой сети наш любимый блокирующий патрон.
[11:31.000 --> 11:50.000]  А чем отличается от Эдманса Карпа?
[11:51.000 --> 11:55.000]  От Эдманса Карпа он отличается следующим, смотрите.
[11:56.000 --> 12:00.000]  Эдманс Карп, он за один БФС находит один путь.
[12:01.000 --> 12:02.000]  Один путь.
[12:03.000 --> 12:05.000]  Один путь проталкивает по нему поток и запускает БФС заново.
[12:06.000 --> 12:07.000]  А тут мы сразу все пути.
[12:08.000 --> 12:09.000]  Он находит не блокирующий поток, а просто единичный.
[12:10.000 --> 12:11.000]  Ну не обязательно все.
[12:12.000 --> 12:13.000]  Да, не обязательно все.
[12:14.000 --> 12:18.000]  Но мы пытаемся из этого БФСа, из этих слоев, понаходить тут как можно больше пути и попихать как можно больше поток.
[12:18.000 --> 12:23.000]  Но при этом, ну правда, не то чтобы как можно больше, прям идеально больше, но мы это делаем жадно.
[12:24.000 --> 12:28.000]  То есть пока вдоль этого же БФСа можно пихать, мы пихаем, пихаем, пихаем.
[12:29.000 --> 12:35.000]  Может получиться не оптимальность, но напоминаю, вот давайте я напомню этот классический пример на единичных графах.
[12:36.000 --> 12:42.000]  Чем вот, просто напомню, чем блокирующий поток отличается от максимального, да?
[12:43.000 --> 12:45.000]  Потому что вот может сложиться вот такая красивая ситуация.
[12:45.000 --> 12:47.000]  Вот такая красивая слоистая сеть.
[12:52.000 --> 12:53.000]  И допустим.
[12:54.000 --> 12:55.000]  Очень умными ножки, вот такой поток.
[12:56.000 --> 12:58.000]  Ну вот, ну вот, сейчас я давайте вот нарисую.
[12:59.000 --> 13:00.000]  Вот, ну значит поехали.
[13:02.000 --> 13:05.000]  Ну вот, значит что может быть блокирующим потоком?
[13:06.000 --> 13:12.000]  Ну, можно конечно максимальный найти, но нам на самом деле для наших целей, вот я не буду сейчас обратные ребра рисовать.
[13:12.000 --> 13:13.000]  Потому что сейчас они тут слоистой сети не нужны.
[13:14.000 --> 13:20.000]  Но заметим, что вот этот поток максимальным возможным конечно не является, но для блокирования его хватит.
[13:22.000 --> 13:29.000]  То есть нам самое главное, чтобы от СДТ вот просто вот чисто вот по этой вот вырезанной сети слои по слои сети нельзя дойти.
[13:31.000 --> 13:36.000]  То есть в остаточной сети конечно же вот там вот так вот дойти можно, но а так нельзя.
[13:37.000 --> 13:38.000]  Поэтому это нас, вот такое нас устраивает.
[13:38.000 --> 13:41.000]  А как мы можем быстро найти блокирующий поток?
[13:42.000 --> 13:47.000]  Вот именно поэтому я употребляю слова концепция и мета алгоритм.
[13:48.000 --> 13:49.000]  А, хорошо.
[13:50.000 --> 13:51.000]  Пока еще конечно никак.
[13:52.000 --> 13:53.000]  Я лишь говорю вот общей концепции.
[13:54.000 --> 13:58.000]  Потому что дальше в этом месте могут быть подставлены самые разные методы.
[13:59.000 --> 14:01.000]  И метод Диница это только первый из всех.
[14:01.000 --> 14:03.000]  И подставлены они могут быть только в поисках блокирующего потока.
[14:04.000 --> 14:05.000]  Да.
[14:06.000 --> 14:07.000]  Со стороны остается как всегда.
[14:08.000 --> 14:09.000]  Да, да, да.
[14:10.000 --> 14:11.000]  Вот.
[14:12.000 --> 14:15.000]  Но прежде чем переходить к этим конкретным методам,
[14:16.000 --> 14:18.000]  то есть кое-что мы можем уже сказать и сейчас.
[14:19.000 --> 14:20.000]  Но в первую очередь нас интересует вот что.
[14:21.000 --> 14:23.000]  А не может ли это алгоритм вообще зацепиться?
[14:24.000 --> 14:25.000]  Нет.
[14:26.000 --> 14:27.000]  А как это?
[14:28.000 --> 14:29.000]  А не может ли этот алгоритм вообще зацепиться?
[14:30.000 --> 14:31.000]  Нет.
[14:32.000 --> 14:33.000]  Почему?
[14:34.000 --> 14:35.000]  Потому что максимальный поток существует.
[14:36.000 --> 14:38.000]  Значит он работает в худшем случае за...
[14:39.000 --> 14:42.000]  В худшем случае количество вайлов, которые мы проделали, это максимальный поток.
[14:43.000 --> 14:44.000]  Так.
[14:45.000 --> 14:46.000]  Вот тут...
[14:47.000 --> 14:48.000]  Да, да, да.
[14:49.000 --> 14:50.000]  Осторожно.
[14:51.000 --> 14:53.000]  Напоминаю, и в одной из задач нам это жестко пригодится,
[14:53.000 --> 14:58.000]  что профессиональные способности и потоки не обязаны быть целыми.
[14:59.000 --> 15:00.000]  Да.
[15:01.000 --> 15:02.000]  Наш алгоритм фолда фарклопса...
[15:03.000 --> 15:04.000]  Он тоже зацикливался.
[15:05.000 --> 15:06.000]  Зацикливался.
[15:07.000 --> 15:10.000]  И более того, там даже будет пример, когда он не просто зацикливается,
[15:11.000 --> 15:12.000]  а даже не сходится.
[15:13.000 --> 15:14.000]  Правильно.
[15:15.000 --> 15:16.000]  Вот.
[15:17.000 --> 15:18.000]  Что?
[15:19.000 --> 15:20.000]  Ладно, я просто...
[15:21.000 --> 15:22.000]  Ну, как-то...
[15:23.000 --> 15:24.000]  Например, на пяти вершинах.
[15:25.000 --> 15:26.000]  Ну да.
[15:27.000 --> 15:28.000]  Число ФИХ.
[15:29.000 --> 15:30.000]  Да, там с ФИВа всякие.
[15:31.000 --> 15:32.000]  Золотое сечение такое.
[15:33.000 --> 15:34.000]  Ну, кажется, у этой алгоритмы должны быть ровные те же проблемы.
[15:35.000 --> 15:37.000]  Казалось бы.
[15:38.000 --> 15:40.000]  Мы же говорили, что если берем кратчайший консерватор...
[15:41.000 --> 15:42.000]  Но мы говорим следствие.
[15:43.000 --> 15:45.000]  Предположим, что блокирующий поток нам с небес по пакцию присылает.
[15:46.000 --> 15:47.000]  Да, конечно.
[15:48.000 --> 15:49.000]  Так вот, я утверждаю, что он...
[15:50.000 --> 15:51.000]  А, точно, я знаю почему.
[15:51.000 --> 15:52.000]  Но по другой причине.
[15:53.000 --> 15:54.000]  Потому что в каждой следующей сети...
[15:55.000 --> 15:56.000]  В каждой следующей сети...
[15:57.000 --> 15:58.000]  Остыковая сеть называется...
[15:59.000 --> 16:01.000]  Своей сети будет более длинный путь.
[16:02.000 --> 16:03.000]  Да, совершенно верно.
[16:04.000 --> 16:07.000]  То есть утверждение следующее, что после каждой итерации этого вайла
[16:08.000 --> 16:12.000]  расстояние от СДТ будет, внимание, строго увеличиваться.
[16:15.000 --> 16:17.000]  Оно не останется тем же и не уйдет дальше.
[16:22.000 --> 16:23.000]  Вот.
[16:24.000 --> 16:25.000]  То есть вот такое утверждение.
[16:28.000 --> 16:31.000]  В общем, более того, если вы вспомните доказательства Айбонсакарпа,
[16:32.000 --> 16:35.000]  по чьей части его, то в общем-то здесь доказательства то же самое.
[16:36.000 --> 16:37.000]  То есть доказательства такое.
[16:38.000 --> 16:41.000]  Вот предположим, вот у нас очередная, так сказать, фаза этой концепции.
[16:42.000 --> 16:43.000]  Вот она.
[16:44.000 --> 16:45.000]  Вот у нас очередная слоистая сеть.
[16:46.000 --> 16:47.000]  Мы в ней нашли какой-то таз блокирующий поток.
[16:48.000 --> 16:49.000]  Что поменялось?
[16:50.000 --> 16:51.000]  Что в остаточной сети.
[16:52.000 --> 16:53.000]  Поменялось то, что остались...
[16:54.000 --> 16:56.000]  То есть некоторые черные вот эти ребра поисчезали.
[16:57.000 --> 17:01.000]  Попроявлялись некоторые вот такого вида рыжая.
[17:02.000 --> 17:05.000]  Ой, ладно, придется нижние ребра присывать.
[17:12.000 --> 17:13.000]  Придется сделать.
[17:14.000 --> 17:15.000]  Присывать точно.
[17:16.000 --> 17:17.000]  То есть некоторые, естественно, поисчезали.
[17:17.000 --> 17:22.000]  Потому что, естественно, мы проталкиваем там по каждому найденному пути максимум того, что можем.
[17:23.000 --> 17:24.000]  Ну, условно там, конечно.
[17:25.000 --> 17:26.000]  Блокирующий поток не обязан сделать именно это.
[17:27.000 --> 17:28.000]  Ну, какие-нибудь ребра там вот.
[17:29.000 --> 17:30.000]  Вот это там поисчезало.
[17:31.000 --> 17:32.000]  Вот это поисчезало.
[17:33.000 --> 17:34.000]  Ну и так далее.
[17:35.000 --> 17:37.000]  Но фиолетовые ребра остались без измени.
[17:41.000 --> 17:46.000]  Теперь попробуем представить себе, каково теперь в остаточной сети с учетом рыжих ребр
[17:47.000 --> 17:48.000]  это.
[17:51.000 --> 17:53.000]  Заметим, что меньше, чем было, оно не встало.
[17:54.000 --> 17:58.000]  Потому что если мы рассмотрим те же самые слои, то есть те же самые слои,
[17:59.000 --> 18:02.000]  то мы заметим, что каждое ребро может увеличить номер слоя все еще не больше, чем найденое.
[18:03.000 --> 18:04.000]  Потому что вот таких вот ребр у нас не появилось.
[18:05.000 --> 18:07.000]  У нас появились только ребра, ведущие назад.
[18:08.000 --> 18:09.000]  Понимаете, да?
[18:10.000 --> 18:11.000]  Угу.
[18:12.000 --> 18:13.000]  Значит расстояние не уменьшилось.
[18:14.000 --> 18:15.000]  Может оно осталось тем же?
[18:15.000 --> 18:17.000]  Тогда у нас есть путь от СДТ, СБТ.
[18:18.000 --> 18:19.000]  Совершенно верно, да.
[18:20.000 --> 18:22.000]  То есть за то же расстояние можно идти исключительно по черным ребрам,
[18:23.000 --> 18:25.000]  а у нас по определению блокирующего потока таких нет.
[18:26.000 --> 18:27.000]  По собственному мнению, это и нацеливает.
[18:28.000 --> 18:34.000]  То есть следовательно, расстояние от СДТ, выраженное в количестве ребр,
[18:35.000 --> 18:36.000]  строго увеличивается.
[18:37.000 --> 18:39.000]  То есть после каждой фазы расстояние будет строго больше.
[18:40.000 --> 18:44.000]  То есть это означает, что количество итерации даже не просто небесконечное,
[18:45.000 --> 18:47.000]  а оно не более чем В.
[18:52.000 --> 18:53.000]  Ну, да.
[18:54.000 --> 18:57.000]  То есть то, что путь не уменьшается аналогично Эду Цукарку,
[18:58.000 --> 19:03.000]  а то, что не может стать таким же, потому что у нас нет пути, которые может быть лучше.
[19:04.000 --> 19:05.000]  Именно, да.
[19:06.000 --> 19:09.000]  В общем, можно сказать, что блокирующий поток – это как раз цель сделать так, чтоб такого пути не было.
[19:10.000 --> 19:13.000]  То есть нам этого достаточно, и это уже не зациклено.
[19:14.000 --> 19:16.000]  Вот такая разница.
[19:17.000 --> 19:19.000]  Вот такая кохивая у нас разница.
[19:20.000 --> 19:24.000]  Остается только, как же найти блокирующий поток.
[19:25.000 --> 19:26.000]  Всего-то, конечно.
[19:27.000 --> 19:28.000]  Да.
[19:30.000 --> 19:31.000]  Ну, вот.
[19:32.000 --> 19:33.000]  И так.
[19:34.000 --> 19:36.000]  Ну, самый простой метод.
[19:37.000 --> 19:39.000]  Ну, Машка, самый простой, конечно.
[19:39.000 --> 19:40.000]  Хотя, скорее всего, самый...
[19:41.000 --> 19:44.000]  Хотя, например, самый идейный первый, что напрашивается.
[19:45.000 --> 19:46.000]  Но, раз уж не равно, жадно.
[19:47.000 --> 19:48.000]  А давайте просто будем искать...
[19:49.000 --> 19:50.000]  Найдем там первый попавшийся путь.
[19:51.000 --> 19:52.000]  Там, из СВТ.
[19:53.000 --> 19:54.000]  И пропустим поток по нему.
[19:55.000 --> 19:56.000]  И еще раз.
[19:57.000 --> 19:59.000]  Единственное, нужно помечать ребра, которые умерли.
[20:00.000 --> 20:01.000]  Спокойно, погоди.
[20:02.000 --> 20:03.000]  Оттуда ты все бежишь. Спокойно.
[20:04.000 --> 20:05.000]  Лук.
[20:07.000 --> 20:08.000]  Значит, смотри.
[20:09.000 --> 20:10.000]  То есть, действительно, если делать...
[20:11.000 --> 20:13.000]  Ну, теперь, вот, если это все соходить, то представим себе,
[20:14.000 --> 20:16.000]  что просто будем как-нибудь там любым даже ДФСом.
[20:17.000 --> 20:18.000]  Вот, внезапно, ДФСом.
[20:19.000 --> 20:20.000]  Ну, да.
[20:21.000 --> 20:22.000]  Ну, нет.
[20:23.000 --> 20:24.000]  Не совсем.
[20:25.000 --> 20:26.000]  То есть, ну, на первом этапе, конечно, да.
[20:27.000 --> 20:28.000]  Хоть ДФСом, хоть...
[20:29.000 --> 20:30.000]  Да, смешно.
[20:31.000 --> 20:32.000]  Ну, лучше ДФСом, чтобы уже...
[20:33.000 --> 20:34.000]  Чтобы не путаться.
[20:35.000 --> 20:36.000]  А то каждый ДФС, где есть свои слои.
[20:36.000 --> 20:37.000]  Один раз запустили, давайте там.
[20:38.000 --> 20:40.000]  Запустили ДФС, нашли путь.
[20:41.000 --> 20:43.000]  Запустили еще раз ДФС, нашли еще путь.
[20:44.000 --> 20:46.000]  Итак, ищем, пока ДФС не скажет, все пути нет.
[20:47.000 --> 20:48.000]  Вот, внимание, вопрос.
[20:49.000 --> 20:52.000]  За какое время сработает такой алгоритм?
[20:53.000 --> 20:55.000]  За количество вершин.
[20:56.000 --> 20:57.000]  Почему вершины?
[20:58.000 --> 20:59.000]  А, количество вершин нет.
[21:00.000 --> 21:01.000]  В худшем случае, количество вершин.
[21:02.000 --> 21:03.000]  Ну, да. То есть, количество вершин, количество вершин.
[21:03.000 --> 21:04.000]  Количество вершин, количество вершин.
[21:05.000 --> 21:07.000]  На каждом шаге мы убиваем хотя бы одно ребро.
[21:08.000 --> 21:11.000]  В чем заметим, что с точки зрения слоистой сети мы его убиваем безвозвратно.
[21:12.000 --> 21:13.000]  Ну, с точки зрения слоистой, да.
[21:14.000 --> 21:15.000]  Вот, это приятно.
[21:16.000 --> 21:18.000]  Но ребро-то у нас все равно остается Е.
[21:19.000 --> 21:21.000]  И каждый ДФС работает за Е.
[21:22.000 --> 21:28.000]  То есть, получается, если у нас получится, что одна итерация тогда сработает за Е квадрат, а это алгоритм в Е квадрат.
[21:31.000 --> 21:32.000]  Ну, да.
[21:33.000 --> 21:41.000]  Ну, на самом деле, если взять этот алгоритм, заменить ДФС обратно ДБФС и отменить понятие слоистой сети, то, в общем-то, мы просто получим алгоритм Эдмоцикрата.
[21:42.000 --> 21:43.000]  В явном виде.
[21:44.000 --> 21:45.000]  Так что, в общем-то, ничего удивительного.
[21:47.000 --> 21:52.000]  Но, оказывается, не сильно сложно это все сократить.
[21:55.000 --> 21:56.000]  Ну, вот такая нота.
[21:57.000 --> 21:58.000]  Идея здесь такая.
[21:59.000 --> 22:01.000]  Что, значит, открою ноту.
[22:02.000 --> 22:05.000]  Ну, как вы говорили, что каждый ДФС у нас работает, с одной стороны, за от Е, да.
[22:06.000 --> 22:07.000]  Ну, теперь у нас мысль такая.
[22:08.000 --> 22:14.000]  Заметим, что, во-первых, если ребро убилось, то, наверное, и атламика не восстановится.
[22:15.000 --> 22:16.000]  Тогда идея такая.
[22:17.000 --> 22:18.000]  Такая несимпатическая оптимизация.
[22:19.000 --> 22:20.000]  А давайте его еще и выкинем.
[22:21.000 --> 22:27.000]  Ну, пока, чисто виртуально мы же, пока мы помним, что мы умеем, как же, выкидывать ребра, а потом восстановить в правах, правда?
[22:29.000 --> 22:30.000]  Ну.
[22:31.000 --> 22:35.000]  Ну, хотя бы виртуально мы умеем, я сейчас не призываю, прямо сейчас бежать и за пять минут написать, как это делать.
[22:36.000 --> 22:39.000]  Да, тем более, что потом мы увидим, как это на самом деле делать в данном случае.
[22:40.000 --> 22:47.000]  Но, мы, по крайней мере, можем себе представить, что у нас есть там, ну, у нас есть обычная остаточная сеть, да.
[22:48.000 --> 22:55.000]  А на ней стоит вот надстройка слоистая сеть, где вместо каждого ребра стоит ссылка на реальное ребро.
[22:56.000 --> 23:00.000]  Ну, нет, ну я просто такой, просто такой понятный образ рисую.
[23:01.000 --> 23:04.000]  Просто чем тогда это будет приятно, ссылка, такие ссылки?
[23:05.000 --> 23:15.000]  А теперь, если мы представим, что эти ссылки находятся, скажем, в каком-нибудь двусвязанном списке, то значит, тогда, если ребро стало насыщенным, мы его просто выкидываем в следующих ДФС-ах, не тратим на него времени.
[23:16.000 --> 23:17.000]  Понимаете, да?
[23:18.000 --> 23:21.000]  Ну, сама по себе эта оптимизация мало что даст.
[23:22.000 --> 23:24.000]  Но ее можно докрутить дальше.
[23:25.000 --> 23:28.000]  Если мы не убили ребро, если мы не нашли, то не было пути.
[23:29.000 --> 23:30.000]  Ну вот.
[23:31.000 --> 23:32.000]  Но теперь, действительно, заметим теперь следующее.
[23:33.000 --> 23:43.000]  Что если мы пошли по ребру, вот пришел, блядь, вот пошел по ребру, и путь до Те не нашел, то заметим, граф у нас устроен так, что он, в общем-то, путь по этому ребру больше не найдет никогда.
[23:45.000 --> 23:50.000]  И это означает, что в этом случае ребро тоже можно убить.
[23:51.000 --> 23:52.000]  Вау.
[23:53.000 --> 23:54.000]  Понятная идея?
[23:54.000 --> 23:54.500]  Да.
[23:56.000 --> 23:58.000]  Так, если не понятно, лучше спросить.
[23:59.000 --> 24:00.000]  Понятно.
[24:01.000 --> 24:05.000]  Так, кстати, Дан, надо было сразу спросить, а кто вообще знает этот алгоритм?
[24:06.000 --> 24:09.000]  Я очень давно не писал про этот алгоритм.
[24:10.000 --> 24:12.000]  Тут только без доказательств, просто писать.
[24:13.000 --> 24:14.000]  Ну понятно, да.
[24:15.000 --> 24:16.000]  А как называется он?
[24:17.000 --> 24:18.000]  Алгоритм Джинница.
[24:19.000 --> 24:20.000]  А, ну тогда да.
[24:21.000 --> 24:22.000]  У вас название знаю?
[24:23.000 --> 24:24.000]  Когда-то было, да.
[24:25.000 --> 24:26.000]  Я даже написал.
[24:26.000 --> 24:27.000]  Да, да, да.
[24:27.000 --> 24:29.000]  Не сработало, к сожалению, но это...
[24:30.000 --> 24:31.000]  Не, сработало, сработало.
[24:32.000 --> 24:33.000]  Джинниц.
[24:33.000 --> 24:34.000]  Правда, задача все равно не зашла.
[24:35.000 --> 24:36.000]  Но это странно.
[24:36.000 --> 24:37.000]  А про асимпточку...
[24:38.000 --> 24:40.000]  ДФС-х можно еще раз повторить?
[24:41.000 --> 24:42.000]  Про какой, про яквадрат?
[24:43.000 --> 24:44.000]  Да, почему...
[24:44.000 --> 24:46.000]  Ну, если в тупую ДФС, то асимпточка простая.
[24:46.000 --> 24:48.000]  Потому что, смотрите, каждый ДФС убивает ребро.
[24:49.000 --> 24:50.000]  Ребер всего е.
[24:51.000 --> 24:54.000]  Значит, ДФС-ов будет не более чем е, каждый ДФС работает за е.
[24:55.000 --> 24:56.000]  Ну вот.
[24:56.000 --> 25:00.000]  Итого одна фаза е-квадрата, так как фаза более чем е, итого дали е-квадрат.
[25:01.000 --> 25:02.000]  Вот.
[25:02.000 --> 25:05.000]  Ну а теперь мы говорим, вот ДФС в первичном более продвинутый ДФС.
[25:06.000 --> 25:09.000]  Мы говорим, что мы убиваем ребро не только...
[25:09.000 --> 25:12.000]  То есть мы ребро убиваем, в смысле, прям выкидываем из графа.
[25:12.000 --> 25:15.000]  Прям вот вообще выкидываем, прям из списка выкидываем.
[25:15.000 --> 25:21.000]  А еще говорим, что если мы прошлись по ребру и путь до Т, не нашли, то есть ДФС вернулся с носом.
[25:21.000 --> 25:24.000]  То больше он по этому ребру, то по этому ребру вообще ходить бессмысленно.
[25:25.000 --> 25:27.000]  И мы его тоже игнорируем.
[25:27.000 --> 25:28.000]  Как?
[25:29.000 --> 25:31.000]  Как же изменилась и синтетика?
[25:32.000 --> 25:34.000]  А теперь давайте себе это вообразим.
[25:35.000 --> 25:37.000]  Что у нас будет тогда происходить?
[25:37.000 --> 25:39.000]  Как будет выглядеть ДФС?
[25:40.000 --> 25:41.000]  Значит...
[25:41.000 --> 25:42.000]  Значит, Джилл был С.
[25:42.000 --> 25:44.000]  Значит, ДФС пошел по ребру.
[25:47.000 --> 25:49.000]  Значит, из этой вершины он тоже пошел по ребру.
[25:51.000 --> 25:52.000]  Пошел по ребру.
[25:53.000 --> 25:54.000]  Пошел по ребру.
[25:54.000 --> 25:55.000]  Пошел по ребру.
[25:55.000 --> 25:56.000]  Пошел по ребру.
[25:57.000 --> 25:58.000]  А тут ходить некуда.
[25:59.000 --> 26:00.000]  Да, и это все не естественно.
[26:01.000 --> 26:04.000]  Значит, мы обнаруживаем, что по этому ребру ходить бессмысленно.
[26:04.000 --> 26:05.000]  Мы его тоже выкидываем.
[26:08.000 --> 26:10.000]  Значит, идем хорошо в следующую вершину.
[26:10.000 --> 26:13.000]  Но тут в этом слое, в принципе, это какой-то слишком далекий слой.
[26:13.000 --> 26:14.000]  Прям вот где-то здесь.
[26:15.000 --> 26:17.000]  Там в каком-то вот этом, допустим, слое.
[26:18.000 --> 26:19.000]  Ну вот.
[26:19.000 --> 26:20.000]  Поэтому это мы тоже игнорируем.
[26:22.000 --> 26:23.000]  Вот.
[26:24.000 --> 26:25.000]  Значит...
[26:26.000 --> 26:28.000]  Ну и вообще тут, смотрите, пробежались тут по всем ребрам.
[26:29.000 --> 26:31.000]  И все они великолепно игнорируют.
[26:32.000 --> 26:33.000]  И так возвращаемся сюда.
[26:34.000 --> 26:37.000]  Значит, видим, что теперь, оказывается, здесь ходить бессмысленно.
[26:37.000 --> 26:38.000]  Поэтому мы это тоже убили.
[26:41.000 --> 26:42.000]  Вот.
[26:42.000 --> 26:44.000]  Так, ну что у нас тут еще происходит?
[26:45.000 --> 26:47.000]  Ну здесь у нас еще какое-то великолепие.
[26:48.000 --> 26:49.000]  Сюда можно пойти.
[26:49.000 --> 26:52.000]  Ну и здесь, допустим, там, допустим, вот пара ребр.
[26:52.000 --> 26:53.000]  Тоже их поубивали.
[26:53.000 --> 26:54.000]  Ходить бессмысленно.
[26:54.000 --> 26:55.000]  И это тоже.
[26:56.000 --> 26:57.000]  И что дальше?
[26:59.000 --> 27:00.000]  Нет, погодите, сейчас.
[27:01.000 --> 27:03.000]  Ну, я тут еще рассмотрел.
[27:03.000 --> 27:04.000]  Хорошо.
[27:04.000 --> 27:05.000]  Пошли отсюда-сюда.
[27:05.000 --> 27:06.000]  Вот это убили.
[27:06.000 --> 27:07.000]  Пошли сюда.
[27:07.000 --> 27:08.000]  Так.
[27:08.000 --> 27:09.000]  Ну и ребро ведет сюда.
[27:10.000 --> 27:13.000]  Заметим, что на этот раз мы за О от единицы выбрасываемся.
[27:13.000 --> 27:14.000]  Почему?
[27:14.000 --> 27:15.000]  Потому что здесь тупо не осталось ребр.
[27:16.000 --> 27:17.000]  Обратите внимание.
[27:18.000 --> 27:20.000]  Потом пошли куда-нибудь вот сюда.
[27:20.000 --> 27:21.000]  И тоже убили.
[27:22.000 --> 27:24.000]  Ну и здесь уже что-то новенькое, но тоже поубивали.
[27:25.000 --> 27:27.000]  Ну и, допустим, вот наконец-то мы пришли в Т.
[27:28.000 --> 27:29.000]  И вот сюда.
[27:29.000 --> 27:30.000]  Да, пришли в Т.
[27:31.000 --> 27:32.000]  Значит, ура.
[27:32.000 --> 27:34.000]  Мы нашли путь.
[27:34.000 --> 27:36.000]  И давайте по этому пути протолкнем поток.
[27:36.000 --> 27:38.000]  В общем, какой-то ребро еще при этом даже убилось.
[27:39.000 --> 27:40.000]  А может и несколько.
[27:40.000 --> 27:41.000]  Ну хотя бы одно убилось.
[27:43.000 --> 27:44.000]  Так.
[27:44.000 --> 27:45.000]  Ну какое же ребро убилось.
[27:45.000 --> 27:46.000]  Ну давайте вот это.
[27:49.000 --> 27:50.000]  Вот.
[27:50.000 --> 27:51.000]  То есть смотрите, как интересно.
[27:52.000 --> 27:54.000]  Значит, что теперь происходит?
[27:56.000 --> 27:57.000]  Значит.
[27:58.000 --> 27:59.000]  Вот.
[27:59.000 --> 28:00.000]  Вот.
[28:00.000 --> 28:01.000]  Вот.
[28:01.000 --> 28:02.000]  Вот.
[28:02.000 --> 28:03.000]  Вот.
[28:03.000 --> 28:04.000]  Вот.
[28:04.000 --> 28:05.000]  Вот.
[28:05.000 --> 28:06.000]  Значит.
[28:06.000 --> 28:07.000]  Теперь.
[28:07.000 --> 28:08.000]  Второй ДФС.
[28:09.000 --> 28:10.000]  Значит.
[28:10.000 --> 28:11.000]  Запускаемся.
[28:11.000 --> 28:12.000]  Значит идем по этому же ребру.
[28:12.000 --> 28:13.000]  Идем.
[28:13.000 --> 28:14.000]  Ну порядок.
[28:14.000 --> 28:15.000]  Ну первое в списке, поэтому.
[28:15.000 --> 28:16.000]  Да.
[28:16.000 --> 28:17.000]  Скорее всего да.
[28:17.000 --> 28:20.000]  Ну в общем-то алгоритм бы работал и без этого, но.
[28:20.000 --> 28:21.000]  Да.
[28:21.000 --> 28:24.000]  Ну вряд ли вы там будете рандом шафтить ребра перед каждым ДФСом.
[28:24.000 --> 28:25.000]  Да.
[28:25.000 --> 28:26.000]  Ну вот.
[28:26.000 --> 28:28.000]  Это симпатику лучше.
[28:29.000 --> 28:30.000]  Ну, смотря как писать.
[28:30.000 --> 28:33.000]  Может на самом деле там среднюю будет хорошо.
[28:34.000 --> 28:35.000]  Ну вот.
[28:35.000 --> 28:36.000]  Значит идем дальше.
[28:36.000 --> 28:37.000]  Что у нас тут?
[28:37.000 --> 28:38.000]  Значит.
[28:38.000 --> 28:39.000]  Значит да.
[28:39.000 --> 28:40.000]  Это ребро убилось.
[28:40.000 --> 28:41.000]  Ну мы идем.
[28:41.000 --> 28:42.000]  Такое ребро.
[28:42.000 --> 28:43.000]  Вот.
[28:43.000 --> 28:46.000]  Потом допустим идем сюда.
[28:46.000 --> 28:47.000]  Потом идем сюда.
[28:47.000 --> 28:48.000]  Потом уже.
[28:48.000 --> 28:49.000]  И потом.
[28:49.000 --> 28:50.000]  В чем?
[28:50.000 --> 28:51.000]  Заметьте.
[28:51.000 --> 28:52.000]  Тут золотые единицы.
[28:52.000 --> 28:53.000]  Сюда и сюда.
[28:53.000 --> 28:54.000]  Нашлось.
[28:54.000 --> 28:55.000]  Нашлось.
[28:55.000 --> 28:56.000]  Теперь можно еще что-то поубивать.
[28:56.000 --> 28:59.000]  Ну можно сразу поубивать скажем.
[28:59.000 --> 29:00.000]  Вот это ребро.
[29:00.000 --> 29:01.000]  Вот это.
[29:01.000 --> 29:02.000]  Ну и вот.
[29:02.000 --> 29:03.000]  Вот.
[29:03.000 --> 29:04.000]  Ну и так далее.
[29:04.000 --> 29:05.000]  Производ.
[29:05.000 --> 29:06.000]  Производ.
[29:06.000 --> 29:09.000]  То есть основной смысл теперь такой.
[29:09.000 --> 29:10.000]  Что каждый.
[29:10.000 --> 29:11.000]  Ассинтотип каждого ДФСа.
[29:11.000 --> 29:12.000]  Ну ассинтотип каждого ДФСа.
[29:12.000 --> 29:15.000]  А заметите что у нас такой не совсем тривиальный ДФС.
[29:15.000 --> 29:18.000]  Что мы даже не особо помечаем вершины.
[29:18.000 --> 29:20.000]  То есть у нас нет пассива юзер на вершине.
[29:20.000 --> 29:21.000]  Круто.
[29:21.000 --> 29:23.000]  Потому что в общем-то если мы уже там были в вершине.
[29:23.000 --> 29:25.000]  А потом пришли в ее второй раз.
[29:25.000 --> 29:27.000]  Значит вы выброситесь оттуда за вот эти единицы.
[29:27.000 --> 29:29.000]  То есть юзером будет такой неявный.
[29:29.000 --> 29:30.000]  И будет такой неявный.
[29:31.000 --> 29:34.000]  И будет такой неявный юзер за счет удаления.
[29:35.000 --> 29:38.000]  И тогда я упреждаюсь что один ДФС.
[29:38.000 --> 29:41.000]  Он работает за О от.
[29:41.000 --> 29:43.000]  Расстояния от С до Т.
[29:47.000 --> 29:48.000]  Плюс.
[29:48.000 --> 29:50.000]  Количество.
[29:50.000 --> 29:51.000]  Удаленных ребр.
[29:55.000 --> 29:57.000]  Ну он продолжает работать по сути.
[29:57.000 --> 29:58.000]  За О.
[29:58.000 --> 30:00.000]  Каждое ребро которое он увидел.
[30:01.000 --> 30:03.000]  Ну а каждое ребро либо удалено.
[30:03.000 --> 30:06.000]  Либо вошло в итоге в этот вот путь.
[30:06.000 --> 30:07.000]  Сначала этот.
[30:07.000 --> 30:09.000]  А потом может выяснилось что вот этот.
[30:13.000 --> 30:15.000]  Но заметьте теперь.
[30:15.000 --> 30:17.000]  То есть теперь если мы все это просуммируем.
[30:17.000 --> 30:19.000]  Что получится?
[30:19.000 --> 30:21.000]  О от Е плюс С.
[30:21.000 --> 30:24.000]  Заметьте что если мы просуммируем удаление ребр.
[30:24.000 --> 30:26.000]  То суммарное удаление ребр.
[30:26.000 --> 30:28.000]  Все это сумма будет в принципе.
[30:28.000 --> 30:31.000]  О от Е в каждое ребро может быть удалено не более чем один раз.
[30:35.000 --> 30:37.000]  Ну вот с этим сложнее.
[30:39.000 --> 30:40.000]  Потому что.
[30:40.000 --> 30:42.000]  Ну расстояние.
[30:42.000 --> 30:44.000]  В худшем случае оно В.
[30:44.000 --> 30:46.000]  И убивает сколько одно ребро.
[30:46.000 --> 30:48.000]  На каждом шаге он константа.
[30:48.000 --> 30:51.000]  Ну как константа.
[30:51.000 --> 30:53.000]  Константа Л.
[30:53.000 --> 30:55.000]  И в худшем случае константа В.
[30:55.000 --> 30:57.000]  А в среднем пополам.
[30:57.000 --> 31:00.000]  Поэтому мы вынуждены оценивать как В.
[31:03.000 --> 31:05.000]  У нас строго уменьшается.
[31:05.000 --> 31:06.000]  Кто уменьшается?
[31:06.000 --> 31:07.000]  А увеличивается.
[31:07.000 --> 31:10.000]  Во-первых увеличивается в одной слоистной сети.
[31:10.000 --> 31:12.000]  А оно вообще фиксируется.
[31:12.000 --> 31:14.000]  То есть получается да.
[31:14.000 --> 31:15.000]  Можно так упомянуть.
[31:15.000 --> 31:17.000]  Ну то есть это в принципе гарантирует нам то.
[31:17.000 --> 31:19.000]  Что DFS все еще будет не более чем Е.
[31:21.000 --> 31:22.000]  Даже не О от Е.
[31:22.000 --> 31:23.000]  А Е.
[31:23.000 --> 31:24.000]  Понимаете да?
[31:24.000 --> 31:27.000]  Потому что каждый DFS в итоге убьет хотя бы одно ребро.
[31:29.000 --> 31:31.000]  И тогда получается в сумме.
[31:31.000 --> 31:32.000]  Значит DFS.
[31:32.000 --> 31:33.000]  Чего?
[31:33.000 --> 31:34.000]  О, в квадрат Е получилось.
[31:34.000 --> 31:35.000]  Ну да.
[31:35.000 --> 31:37.000]  То есть как бы в сумма.
[31:37.000 --> 31:39.000]  То есть сумма по всем DFS.
[31:39.000 --> 31:41.000]  Получается значит О от.
[31:41.000 --> 31:43.000]  Значит вот так я напишу.
[31:43.000 --> 31:45.000]  Е умножить на диск.
[31:45.000 --> 31:47.000]  От СТ.
[31:49.000 --> 31:51.000]  И еще плюс Е.
[31:51.000 --> 31:53.000]  Думаю в одной операции.
[31:53.000 --> 31:55.000]  Это один блокирующий поток.
[31:55.000 --> 31:57.000]  В одной слоистной сети.
[32:05.000 --> 32:06.000]  Ну соответственно понятно.
[32:06.000 --> 32:08.000]  Что эта штука не превосходит В.
[32:09.000 --> 32:10.000]  Поэтому пишем.
[32:10.000 --> 32:12.000]  Что можно оценить действительно.
[32:12.000 --> 32:14.000]  Поиск блокирующего потока.
[32:14.000 --> 32:17.000]  Как О от ВЕ.
[32:21.000 --> 32:22.000]  Да.
[32:22.000 --> 32:23.000]  Потому что да.
[32:23.000 --> 32:24.000]  Так как да.
[32:24.000 --> 32:25.000]  Всего.
[32:25.000 --> 32:27.000]  То есть и того получается в квадрате.
[32:32.000 --> 32:34.000]  Вот такая вот приятная.
[32:39.000 --> 32:40.000]  Вот.
[32:40.000 --> 32:42.000]  Но на самом деле часто конечно можно сказать.
[32:42.000 --> 32:44.000]  Что это может быть не самая лучшая симптутика.
[32:44.000 --> 32:45.000]  Конечно.
[32:45.000 --> 32:46.000]  Потому что мало ли там.
[32:46.000 --> 32:48.000]  Потому что обычно любят конечно симптутику там.
[32:48.000 --> 32:49.000]  Хотя бы Е.
[32:50.000 --> 32:51.000]  Вот.
[32:51.000 --> 32:53.000]  Но на самом деле тем не менее.
[32:53.000 --> 32:55.000]  Во всяких этих ваших олимпиадах.
[32:55.000 --> 32:57.000]  Собственно алгоритм Денис является самым популярным.
[32:58.000 --> 32:59.000]  Ну вот.
[32:59.000 --> 33:01.000]  И он почти всегда заходит.
[33:01.000 --> 33:04.000]  Но мы сегодня будем очень активно изучать причины почему.
[33:04.000 --> 33:06.000]  Потому что на самом деле.
[33:06.000 --> 33:07.000]  Это мы оценили.
[33:07.000 --> 33:08.000]  Эта оценка В квадрат Е.
[33:08.000 --> 33:11.000]  Эта оценка в абсолютно абстрактном случае.
[33:11.000 --> 33:13.000]  То есть когда у нас ребра абсолютно произвольные.
[33:13.000 --> 33:14.000]  И там.
[33:14.000 --> 33:17.000]  То есть вообще даже не целые.
[33:19.000 --> 33:20.000]  Вот.
[33:20.000 --> 33:22.000]  А на самом деле если они целые.
[33:22.000 --> 33:25.000]  То имеют место и другие акции.
[33:25.000 --> 33:27.000]  Сейчас просто оцент.
[33:28.000 --> 33:29.000]  Да.
[33:29.000 --> 33:31.000]  Абсолютно тот же самый алгоритм.
[33:31.000 --> 33:33.000]  Но он будет работать быстро.
[33:33.000 --> 33:35.000]  Это очень странно звучит.
[33:35.000 --> 33:36.000]  Ну.
[33:36.000 --> 33:37.000]  Почему?
[33:37.000 --> 33:39.000]  Ну потому что можно же любые веса.
[33:39.000 --> 33:40.000]  Эпо и Близи.
[33:40.000 --> 33:41.000]  Целыми?
[33:41.000 --> 33:42.000]  Да.
[33:42.000 --> 33:43.000]  Ну просто там.
[33:43.000 --> 33:44.000]  Ну там так.
[33:44.000 --> 33:46.000]  Или расследствовать типа лог.
[33:46.000 --> 33:47.000]  Нет.
[33:47.000 --> 33:50.000]  В этих всех асимптотиях будет активно участвовать.
[33:50.000 --> 33:53.000]  И ограничение на пропускную способность.
[33:53.000 --> 33:54.000]  Да.
[33:54.000 --> 33:56.000]  Поэтому если просто приближать.
[33:56.000 --> 33:58.000]  То просто Ц будет очень большой.
[33:58.000 --> 34:00.000]  А можно же сформально повторить.
[34:00.000 --> 34:02.000]  Какие мы вообще ребра удаляем?
[34:02.000 --> 34:03.000]  Мы удаляем те.
[34:03.000 --> 34:05.000]  Из которых дальше нельзя дойти до Т.
[34:05.000 --> 34:06.000]  Да.
[34:06.000 --> 34:07.000]  Те.
[34:07.000 --> 34:08.000]  Которые.
[34:08.000 --> 34:10.000]  И еще какие.
[34:10.000 --> 34:11.000]  Ну и конечно те.
[34:11.000 --> 34:13.000]  Которые насытились.
[34:13.000 --> 34:14.000]  И все.
[34:14.000 --> 34:15.000]  Да.
[34:16.000 --> 34:17.000]  Больше.
[34:17.000 --> 34:18.000]  Ничего.
[34:18.000 --> 34:19.000]  Вот.
[34:19.000 --> 34:20.000]  Но правда.
[34:20.000 --> 34:21.000]  Нет.
[34:21.000 --> 34:22.000]  Единственное.
[34:22.000 --> 34:23.000]  Процелы.
[34:23.000 --> 34:24.000]  Это мы конечно будем отдельно обсуждать.
[34:24.000 --> 34:25.000]  Но теперь на самом деле.
[34:25.000 --> 34:26.000]  Как это?
[34:26.000 --> 34:27.000]  Кто-то уже вчера.
[34:27.000 --> 34:28.000]  Так это.
[34:28.000 --> 34:29.000]  Кто-то уже вчера.
[34:29.000 --> 34:30.000]  В смысле вчера.
[34:30.000 --> 34:31.000]  Неделю назад.
[34:31.000 --> 34:32.000]  Да.
[34:32.000 --> 34:33.000]  Ну.
[34:33.000 --> 34:34.000]  Это было вчера.
[34:34.000 --> 34:35.000]  Да.
[34:35.000 --> 34:36.000]  Вот.
[34:36.000 --> 34:37.000]  Детей-то спрашивал.
[34:37.000 --> 34:38.000]  А при чем тут линка?
[34:38.000 --> 34:39.000]  А при чем тут линка?
[34:39.000 --> 34:40.000]  Нет.
[34:40.000 --> 34:41.000]  Так.
[34:41.000 --> 34:42.000]  Так вот.
[34:42.000 --> 34:43.000]  При очень большом желании.
[34:43.000 --> 34:44.000]  На самом деле.
[34:44.000 --> 34:45.000]  Да.
[34:45.000 --> 34:46.000]  Так.
[34:46.000 --> 34:47.000]  Вот.
[34:47.000 --> 34:48.000]  Вот теперь.
[34:48.000 --> 34:49.000]  Вот.
[34:49.000 --> 34:50.000]  Вот.
[34:50.000 --> 34:51.000]  Вот внимательно посмотрите.
[34:51.000 --> 34:52.000]  И скажите.
[34:52.000 --> 34:53.000]  Где здесь.
[34:53.000 --> 34:54.000]  Можно найти.
[34:54.000 --> 34:55.000]  Линка.
[34:55.000 --> 34:56.000]  Так.
[34:56.000 --> 34:57.000]  Чтобы он.
[34:57.000 --> 34:58.000]  Улучшил.
[34:58.000 --> 34:59.000]  Ассертизм.
[34:59.000 --> 35:00.000]  Ну.
[35:00.000 --> 35:01.000]  В тот момент.
[35:01.000 --> 35:02.000]  Когда мы ДФС.
[35:02.000 --> 35:03.000]  Может.
[35:03.000 --> 35:04.000]  Ну.
[35:04.000 --> 35:05.000]  Короче.
[35:05.000 --> 35:06.000]  Погнали.
[35:06.000 --> 35:07.000]  Сделаем.
[35:07.000 --> 35:08.000]  Кучу разных деревьев.
[35:08.000 --> 35:09.000]  Будем их.
[35:09.000 --> 35:10.000]  Переподвешивать.
[35:10.000 --> 35:11.000]  Друг за друг.
[35:11.000 --> 35:12.000]  Когда.
[35:12.000 --> 35:13.000]  Умерли.
[35:13.000 --> 35:14.000]  И.
[35:14.000 --> 35:15.000]  Тогда.
[35:15.000 --> 35:16.000]  Пропускание потока.
[35:16.000 --> 35:17.000]  Это будет.
[35:17.000 --> 35:18.000]  Просто.
[35:18.000 --> 35:19.000]  Операция.
[35:19.000 --> 35:20.000]  На.
[35:20.000 --> 35:21.000]  Пути.
[35:21.000 --> 35:22.000]  Что.
[35:22.000 --> 35:23.000]  За.
[35:23.000 --> 35:24.000]  Вред.
[35:24.000 --> 35:25.000]  И.
[35:25.000 --> 35:26.000]  Несу.
[35:26.000 --> 35:27.000]  Чего.
[35:27.000 --> 35:28.000]  Чего.
[35:28.000 --> 35:29.000]  В чем.
[35:29.000 --> 35:30.000]  В чем.
[35:30.000 --> 35:31.000]  В чем.
[35:31.000 --> 35:32.000]  В чем.
[35:32.000 --> 35:33.000]  В чем.
[35:33.000 --> 35:34.000]  В чем.
[35:34.000 --> 35:35.000]  В чем.
[35:35.000 --> 35:36.000]  В чем.
[35:37.000 --> 35:38.000]  Так.
[35:38.000 --> 35:39.000]  Всего для Бога.
[35:39.000 --> 35:40.000]  Ты должен ты это.
[35:40.000 --> 35:41.000]  В чем.
[35:41.000 --> 35:42.000]  В чем.
[35:42.000 --> 35:43.000]  В чем.
[35:43.000 --> 35:44.000]  В чем.
[35:44.000 --> 35:45.000]  В чем.
[35:45.000 --> 35:46.000]  В чем.
[35:46.000 --> 35:47.000]  В чем.
[35:47.000 --> 35:48.000]  В чем.
[35:48.000 --> 35:49.000] ramer.
[35:49.000 --> 35:50.000]  Как inserting.
[35:50.000 --> 35:51.000]  К erased.
[35:51.200 --> 35:52.200]  Наже что.
[35:52.200 --> 35:53.200]  Д音.
[35:53.200 --> 35:54.200]  Отс exacerbated.
[35:54.200 --> 35:55.200]  Дай опускать и не Rickyм.
[35:55.200 --> 35:56.200]  Станет.
[35:56.200 --> 35:57.200]  ВыQWaY.
[35:57.200 --> 35:58.200]  Да-а-а.
[35:58.200 --> 35:59.200]  Вogen.
[35:59.200 --> 36:00.200]  На.
[36:00.200 --> 36:01.200]  Получается.
[36:01.200 --> 36:02.200]  ВыQWaY.
[36:02.200 --> 36:03.200]  Это pleasures.
[36:03.200 --> 36:04.200]  Какching.
[36:04.200 --> 36:05.200]  Да.
[36:05.200 --> 36:13.200]  Дерево на EPS, когда ты удалишь ребро, у тебя отвалится целое под дерево.
[36:13.200 --> 36:15.200]  Это нормально, так же должно быть.
[36:15.200 --> 36:19.200]  Ну вот, всегда когда удаляешь ребро, под дерево удаляется.
[36:19.200 --> 36:21.200]  Я не знаю, в чем плюс.
[36:21.200 --> 36:24.200]  Ну нет, я знаю, в чем плюс.
[36:24.200 --> 36:28.200]  Вот мы его делаем, делаем, делаем.
[36:28.200 --> 36:31.200]  И теперь у нас...
[36:31.200 --> 36:34.200]  А, у нас все равно проход будет долгий.
[36:34.200 --> 36:44.200]  Ну да, заметим, что самое узкое место, на самом деле, где самое большое дает, это то, что все-таки вот эти вот пути мы проталкиваем долго.
[36:44.200 --> 36:49.200]  Даже не само проталкивание долго, а просто поиск этого пути, в итоге, оказывается.
[36:49.200 --> 36:50.200]  Ну да.
[36:50.200 --> 36:54.200]  Если большая его часть уже где-то лежит, в каких-то деревьях.
[36:55.200 --> 36:59.200]  Нет, ну как сказать?
[36:59.200 --> 37:00.200]  Ну как поиск.
[37:00.200 --> 37:05.200]  В некотором смысле заметим, что поиск и проталкивание конкретно этого пути, это одно и то же.
[37:05.200 --> 37:08.200]  Потому что все, что кроме него делается, это отки.
[37:13.200 --> 37:17.200]  Ну да, действительно, как бы он действительно делал так, чтобы искать пути?
[37:17.200 --> 37:21.200]  А самое главное, у всех, как запропускать поток, быстрее, чем заводить.
[37:24.200 --> 37:41.200]  А это никак не связано с тем, чтобы хранить дерево ДФС в линкафе?
[37:41.200 --> 37:43.200]  Дерево на ФС нет.
[37:43.200 --> 37:48.200]  Дерево, конечно, да, но тут не дерево ДФС, а немножко на опору.
[37:54.200 --> 37:56.200]  Вот так.
[37:56.200 --> 38:24.200]  Я же правильно помню, что в линкате можно удалять ребра.
[38:24.200 --> 38:28.200]  Ну да, можно.
[38:28.200 --> 38:30.200]  Сакшановер.
[38:30.200 --> 38:32.200]  Да, сакшановер.
[38:32.200 --> 38:46.200]  Нельзя построить дерево, потом мы находим блокирующий поток из СВТ, удаляем ребро, а потом мы проводим, вот у нас остается два по дереву, находим какое-то ребро и проводим новое, так сказать.
[38:46.200 --> 38:55.200]  Ну а не получится тогда, найдем условно, где маркером рисуем, получится, живо было какое-то дерево.
[38:55.200 --> 38:59.200]  Вот такой вот край, край, край.
[38:59.200 --> 39:03.200]  И вот где-то тут нашлась Т.
[39:03.200 --> 39:05.200]  Ну вот.
[39:05.200 --> 39:07.200]  И вы говорите по количеству...
[39:07.200 --> 39:17.200]  Допустим, куда убиваете это ребро, ну там пропускаете путь, удаляете, ну вот, и что теперь?
[39:17.200 --> 39:31.200]  А теперь мы вот из той вершины находим предыдущий, не-не-не, значит следующий, из следующей вершины находим ребро, которое оттуда входит.
[39:31.200 --> 39:33.200]  А, может быть не дерево.
[39:33.200 --> 39:35.200]  Ну да, может быть не дерево.
[39:35.200 --> 39:37.200]  И может не остаться ребра.
[39:37.200 --> 39:39.200]  Стоп, почему может быть не дерево?
[39:39.200 --> 39:42.200]  Нет-нет-нет, может не остаться ребра, имеется ввиду, которое ведет.
[39:42.200 --> 39:44.200]  Ну может не остаться.
[39:44.200 --> 39:46.200]  Нет, если вообще их не осталось, то и слава богу.
[39:46.200 --> 39:50.200]  Ну тогда придется предикаскадно как-то с этим еще раз упираться.
[39:50.200 --> 39:52.200]  Правда.
[39:52.200 --> 39:54.200]  Ну вообще что?
[39:55.200 --> 39:57.200]  Ммм...
[39:57.200 --> 39:59.200]  Ммм...
[39:59.200 --> 40:02.200]  Вот есть у нас вершина вот этого, который вы отцепили.
[40:02.200 --> 40:05.200]  Пойдем по обратным ребрам искать путь.
[40:05.200 --> 40:07.200]  По обратным?
[40:07.200 --> 40:14.200]  Если мы его, если мы путь никого не найдем, по дороге удаляемся, и вообще ничего не нашли, все такое.
[40:14.200 --> 40:20.200]  Если мы дошли к какому-то дереву, к какой-то вершине, которая уже в дереве, коннектимся.
[40:20.200 --> 40:23.200]  Если ничего не нашли, удаляем.
[40:23.200 --> 40:25.200]  Сейчас откуда запускаемся, где запускаемся?
[40:25.200 --> 40:30.200]  Ну сейчас, вот мы в вершине, в которой сейчас ведет удаленное ребро.
[40:30.200 --> 40:37.200]  Мы по обратным ребрамам пытались найти путь до любой вершины, которая все еще в нашем дереве.
[40:37.200 --> 40:44.200]  Если там, ну таким же алгоритмом, что и раньше, то есть если что-то не нашли, то удалили ребро.
[40:44.200 --> 40:47.200]  То есть это другой дерево DFS, что ли строить?
[40:47.200 --> 40:50.200]  Мы ничего не строим, ходим просто DFS.
[40:50.200 --> 40:52.200]  Там же линкаты не будет.
[40:56.200 --> 41:02.200]  Если мы все прошли, ничего не нашли, то можно удалить эти два ребра тоже.
[41:09.200 --> 41:15.200]  Ну правда, если мы найдем путь, а этот путь окажется по обратным ребрамам, он не может отойти.
[41:20.200 --> 41:24.200]  Дерево DFS, оно тоже слоистое, напоминаем.
[41:32.200 --> 41:38.200]  Поэтому, в принципе, можно просто перебирать все входящие ребра.
[41:42.200 --> 41:44.200]  А чего бы нет, кстати?
[41:45.200 --> 41:48.200]  Я с оригинального видом был другой, лучше его расстоять, потому что...
[41:48.200 --> 41:50.200]  А я не знаю, что с оригинального видом.
[41:50.200 --> 41:52.200]  Нет, ну скажи так.
[41:52.200 --> 41:54.200]  Нет, я смотрю, что с оригинального видом.
[41:54.200 --> 41:57.200]  Есть версия вот у меня, она чуть другая.
[41:57.200 --> 42:04.200]  Но по-моему, это чуть сложнее в том плане, что перебирать придется ребра входящие.
[42:04.200 --> 42:10.200]  Я просто не могу перебирать прямые ребра, потому что они же могут нечаянно замкнуть что-нибудь.
[42:10.200 --> 42:11.200]  Не могут.
[42:11.200 --> 42:13.200]  Но если перебирать из случайного места...
[42:13.200 --> 42:14.200]  Нет, смотри.
[42:14.200 --> 42:15.200]  Не, а чего случайно?
[42:15.200 --> 42:18.200]  Нам нужно первое попавшееся живое ребро.
[42:18.200 --> 42:20.200]  Оно из какой-то из этих вершин.
[42:20.200 --> 42:21.200]  Да.
[42:21.200 --> 42:24.200]  Поэтому, собственно, это под деревом будет просто переподвешено.
[42:24.200 --> 42:25.200]  Эти заведомо выше...
[42:25.200 --> 42:27.200]  Откуда, куда?
[42:27.200 --> 42:29.200]  Ну, сюда.
[42:29.200 --> 42:30.200]  Откуда-то...
[42:30.200 --> 42:32.200]  То есть даже обратные ребра перебираем?
[42:32.200 --> 42:35.200]  Ну да, по сути, да.
[42:35.200 --> 42:38.200]  То есть, по сути, такая модификация...
[42:38.200 --> 42:40.200]  То есть получается даже алгоритм такой.
[42:40.200 --> 42:43.200]  Вообще совсем не совсем динец получается.
[42:43.200 --> 42:45.200]  А, действительно, то есть метод такой.
[42:45.200 --> 42:51.200]  Один раз запускаем, ну там, строим какой-нибудь подобного рода дерево.
[42:51.200 --> 42:52.200]  Запихиваем его в ленка.
[42:52.200 --> 42:55.200]  Естественно, эскорень.
[42:55.200 --> 42:57.200]  И дальше говорим следующее.
[42:57.200 --> 42:59.200]  Так.
[42:59.200 --> 43:01.200]  Ну вот.
[43:01.200 --> 43:06.200]  И дальше можно говорить примерно следующее.
[43:06.200 --> 43:07.200]  Вот.
[43:07.200 --> 43:08.200]  Что...
[43:08.200 --> 43:10.200]  Ну, давайте, значит, если, значит, Т у нас является потомокрест,
[43:10.200 --> 43:13.200]  значит, берем, за алгоритмом находим минимум.
[43:13.200 --> 43:15.200]  Угу.
[43:15.200 --> 43:17.200]  Значит, да.
[43:17.200 --> 43:19.200]  Значит, делаем, так сказать, это...
[43:19.200 --> 43:23.200]  Проталкивание потока, это, называется, на пути отложенное.
[43:25.200 --> 43:28.200]  Да, после этого, конечно, верим вообще, как это вообще.
[43:28.200 --> 43:30.200]  Но идея очень простая, на самом деле.
[43:30.200 --> 43:34.200]  Потому что, ну, то есть у нас есть, там, понятно, будут какие-то условные сплои деревья.
[43:34.200 --> 43:36.200]  В них мы умеем делать отложенные операции.
[43:36.200 --> 43:41.200]  Просто внутри вот этого пушдауна, на самом деле, просто прописываем, что там...
[43:41.200 --> 43:48.200]  Внутри пушдауна мы еще там прописываем, что надо, вот конкретно у этого ребра, действительно, там, протолкнуть какой-то поток.
[43:48.200 --> 43:51.200]  Еще одно.
[43:51.200 --> 43:55.200]  Так, это понятно, о чем я говорю, да?
[43:55.200 --> 43:56.200]  Ну да.
[43:56.200 --> 43:59.200]  Ну, то есть, там, в каждой вершине хранится, что у всего под деревом, там,
[43:59.200 --> 44:04.200]  то есть, у всего под деревом, у всех ходящих ребра надо припихнуть еще вот такой вот поток.
[44:04.200 --> 44:06.200]  Только вот пока они еще...
[44:06.200 --> 44:09.200]  Все под деревом, а это же, правда, не обратно, на пути.
[44:09.200 --> 44:10.200]  А мы же говорили, откуда мы...
[44:10.200 --> 44:15.200]  Да, ну, поэтому, ну-ка, да, ну, как бы, до этой пусистой сплои деревья у нас сейчас будет.
[44:15.200 --> 44:22.200]  Поэтому мы в оконне пишем, дорогие друзья, во всех вот этих вот ребрах, значит, надо такжественно...
[44:22.200 --> 44:23.200]  Просто операция на пути, короче.
[44:23.200 --> 44:24.200]  Ну да, действительно.
[44:25.200 --> 44:28.200]  Но, правда, единственное, надо проследить, что если там...
[44:28.200 --> 44:30.200]  Ну, там...
[44:30.200 --> 44:31.200]  Ну, в принципе, да.
[44:31.200 --> 44:34.200]  То есть, операция на пути отложена.
[44:34.200 --> 44:38.200]  Ну, там, да, возникают, короче, маленькие, там, все какие-то технические тонкости, там,
[44:38.200 --> 44:42.200]  в какой момент конкретно, там, надо удалять во всех пушдаунах, там, что-то.
[44:42.200 --> 44:44.200]  Ну, просто иногда ребра могут поменяться.
[44:44.200 --> 44:46.200]  Ну, в общем-то, поменяются они когда?
[44:46.200 --> 44:52.200]  Ну, потому что, очевидно, чтобы найти, как бы, какое ребро насытилось, надо найти минимум на этом пути.
[44:52.200 --> 44:54.200]  И его у нас это поддерживает.
[44:57.200 --> 45:02.200]  Значит, нашли этот минимум, протолкнули и торжественно его удалили.
[45:02.200 --> 45:08.200]  То есть, что значит удалили с точки зрения линката, это означает, что мы вот эту вершину от этой вершины...
[45:08.200 --> 45:10.200]  Да, отрезали.
[45:10.200 --> 45:12.200]  Ну, потому что, конечно, эта вершина родитель.
[45:12.200 --> 45:14.200]  Поэтому ее...
[45:14.200 --> 45:15.200]  Ну, вот, отрезали.
[45:15.200 --> 45:19.200]  Ну, там, сохранив, конечно, вот эту отложенную операцию, там, со всеми людьми.
[45:19.200 --> 45:21.200]  Ну, это понятно.
[45:21.200 --> 45:25.200]  Ну, и теперь мы просто перебираем ребра опять...
[45:25.200 --> 45:28.200]  Ну, там, скажем, берем просто...
[45:28.200 --> 45:32.200]  Там, перебираем, смотрим опять ребра ведущие из этого слоя.
[45:32.200 --> 45:33.200]  Из какого?
[45:33.200 --> 45:34.200]  Из предыдущего.
[45:34.200 --> 45:35.200]  У нас других ребра нет, в принципе.
[45:35.200 --> 45:37.200]  А если оно будет вот сюда?
[45:37.200 --> 45:38.200]  Куда сюда?
[45:38.200 --> 45:39.200]  Какую-то нашу вершину уже...
[45:39.200 --> 45:40.200]  А мы их удалили, помните?
[45:40.200 --> 45:41.200]  Почему?
[45:41.200 --> 45:44.200]  У нас только... у нас только... у нас в игре сейчас только ребра слоистой сети.
[45:44.200 --> 45:46.200]  Да, ну, сейчас почему?
[45:46.200 --> 45:50.200]  Вот, можешь тыкнуть пальцем на слой, из которого мы сейчас будем искать ребра?
[45:50.200 --> 45:53.200]  Почему она не может быть в вершину следующего слоя?
[45:53.200 --> 45:55.200]  А, ну, потому что я имею в виду следующее.
[45:55.200 --> 45:59.200]  Мы отдельно для каждой вершины будем хранить список не только исходящих ребра, но и входящих.
[45:59.200 --> 46:00.200]  И что?
[46:00.200 --> 46:07.200]  Ну, тогда, когда мы удалили это ребро, вот для этой вершины мы можем взять следующее ребро, скажем, входящего.
[46:07.200 --> 46:08.200]  Почему мы?
[46:08.200 --> 46:09.200]  Это первое попастье.
[46:09.200 --> 46:10.200]  Потому что, напоминаю, мы сохраним, мы связываемся.
[46:10.200 --> 46:11.200]  Я не понимаю алгоритма.
[46:11.200 --> 46:13.200]  Я не понимаю, что мы вообще делаем.
[46:13.200 --> 46:14.200]  От кого мы куда идем?
[46:14.200 --> 46:15.200]  Что ищем?
[46:15.200 --> 46:16.200]  Ну, сколько удалили ребра?
[46:16.200 --> 46:18.200]  Вот мы удалили ребра.
[46:18.200 --> 46:19.200]  Так.
[46:19.200 --> 46:22.200]  Я вообще перестал понимать, откуда мы после этого что-то запускаем.
[46:22.200 --> 46:23.200]  Мы ничего не запускаем.
[46:23.200 --> 46:24.200]  Мы...
[46:24.200 --> 46:25.200]  Причем тут предыдущие...
[46:25.200 --> 46:26.200]  Мы...
[46:26.200 --> 46:33.200]  Мы говорим, что в каждой вершине мы храним ну, связанный список входящих в Нью-Йорк слоиста сети.
[46:33.200 --> 46:34.200]  Без проблем.
[46:34.200 --> 46:35.200]  Это так раз.
[46:35.200 --> 46:39.200]  Еще мы храним некое мистическое дерево.
[46:39.200 --> 46:46.200]  Которое скорби влез, которое дотягивается до всех вершин, на которых вообще можно дойти.
[46:46.200 --> 46:52.200]  Ну, там понятно, что есть какие-то вершины, так только уже дойти нельзя, но, естественно, их в дереве.
[46:52.200 --> 46:53.200]  Вот.
[46:53.200 --> 47:01.200]  Значит, мы говорим, пока в этом дереве есть мистическая вершина Т, мы говорим следующее.
[47:01.200 --> 47:04.200]  Значит, возьмем путь этот от С до Т в дереве.
[47:04.200 --> 47:06.200]  Найдем в нем минимум.
[47:06.200 --> 47:08.200]  И, собственно, ровно такой поток мы пропустим.
[47:08.200 --> 47:12.200]  Отложенная операция через сплей дерева.
[47:12.200 --> 47:16.200]  Значит, найдем тогда кто-то из этих минимумов превратился в ноль.
[47:16.200 --> 47:18.200]  Найдем этот ноль.
[47:18.200 --> 47:21.200]  Удалим это ребро.
[47:21.200 --> 47:23.200]  Можно его даже стереть.
[47:23.200 --> 47:24.200]  Да, можно его даже стереть.
[47:24.200 --> 47:26.200]  Дерево перестало быть деревом.
[47:26.200 --> 47:32.200]  Да, дерево перестало быть деревом, потому что вот у этой вершины, то есть теперь вот эта вершина стала пока самостоятельным портом.
[47:32.200 --> 47:33.200]  Да.
[47:33.200 --> 47:35.200]  Хочется ее переподвести.
[47:35.200 --> 47:38.200]  Для этого, то есть, напоминаю, у нас был.
[47:38.200 --> 47:40.200]  Да, был двухсвяз для список ребра, как помните.
[47:40.200 --> 47:43.200]  Из которого мы только что это ребро ударили, да?
[47:43.200 --> 47:47.200]  В этом двухсвязном списке, наверное, еще остались ребра.
[47:47.200 --> 47:50.200]  В лучшем случае остались.
[47:50.200 --> 47:57.200]  И тогда, если тут какое-то ребро нашлось, то, собственно, мы также это ребро, так сказать, добавляем в линкар.
[47:57.200 --> 48:03.200]  Ну, в смысле, подвешиваем эту вершину уже к этой, имея в виду вот это ребро.
[48:03.200 --> 48:05.200]  Заметьте, за вот единицами.
[48:05.200 --> 48:07.200]  Ну, в смысле, за логоритм.
[48:07.200 --> 48:09.200]  Она обязательно найдется?
[48:09.200 --> 48:10.200]  Нет.
[48:10.200 --> 48:14.200]  Вот, да, есть одна, конечно, маленькая приятная мелочь.
[48:14.200 --> 48:18.200]  Как говорится, ребра в вершине могут и закончиться.
[48:18.200 --> 48:24.200]  А, подожди, она может и не закончиться, но просто вести в эту вершину, которая нет в линкаре?
[48:24.200 --> 48:26.200]  Или не могла?
[48:26.200 --> 48:28.200]  Так.
[48:28.200 --> 48:30.200]  Ну, такое-то оно.
[48:30.200 --> 48:32.200]  Так.
[48:32.200 --> 48:34.200]  Да, действительно.
[48:34.200 --> 48:36.200]  Хотя...
[48:36.200 --> 48:38.200]  Если она ведет в вершину...
[48:38.200 --> 48:40.200]  Ну, хотя, да, такое можно.
[48:40.200 --> 48:43.200]  Но, с другой стороны, тогда такие ребра мы просто сразу игнорируем.
[48:43.200 --> 48:45.200]  Не лежит в линкаре? В смысле?
[48:45.200 --> 48:47.200]  Потому что я утверждаю следующее.
[48:47.200 --> 48:49.200]  Мы же поддерживаем вариант, допоминаем, да?
[48:49.200 --> 48:54.200]  Что в линкаре у нас сейчас одно дерево с кординамбес, и в нем лежат все вершины, до которых еще из СПАста отыкали.
[48:54.200 --> 48:56.200]  А, если так, то хорошо, да.
[48:56.200 --> 48:57.200]  Вот можно дойти.
[48:57.200 --> 49:00.200]  Поэтому остальные вершины прям помещены, что они уже плохие.
[49:00.200 --> 49:03.200]  То есть изначально линкат инициализируется деревом БФС?
[49:03.200 --> 49:05.200]  Да.
[49:05.200 --> 49:07.200]  Хорошо.
[49:07.200 --> 49:09.200]  Вот.
[49:09.200 --> 49:11.200]  Ну, или даже деревом БФС.
[49:11.200 --> 49:13.200]  Кстати, сразу боже, что было бы.
[49:13.200 --> 49:15.200]  Да, да.
[49:15.200 --> 49:17.200]  Ну, в данном случае, да.
[49:17.200 --> 49:19.200]  Ну, просто как-то за хер.
[49:19.200 --> 49:21.200]  Вот.
[49:21.200 --> 49:23.200]  Но теперь, если, соответственно, в какой-то момент это произошло,
[49:23.200 --> 49:25.200]  значит, у вершины кончились ребра.
[49:25.200 --> 49:28.200]  Да, ну, лишнее удаление ребра, конечно, перестало быть совсем золотой идеей,
[49:28.200 --> 49:30.200]  но удаление ребра все равно,
[49:30.200 --> 49:32.200]  когда его удаляется за единицы,
[49:32.200 --> 49:34.200]  поэтому у откиньи суть.
[49:34.200 --> 49:36.200]  Но если вершина...
[49:36.200 --> 49:38.200]  Значит, в вершине все плохо,
[49:38.200 --> 49:40.200]  то что мы делаем?
[49:40.200 --> 49:42.200]  Ну, тогда, естественно, мы объявляем ее...
[49:42.200 --> 49:44.200]  Теперь ее объявляем плохой.
[49:44.200 --> 49:46.200]  Ага.
[49:46.200 --> 49:48.200]  А-а-а.
[49:48.200 --> 49:52.200]  Вот, и, как говорится, и у вершины, и ко всем ее детям
[49:52.200 --> 49:54.200]  называется, примеряем.
[49:54.200 --> 49:56.200]  Вот это все мероприятие.
[49:56.200 --> 49:58.200]  Пусть у нее был ребенок,
[49:58.200 --> 50:00.200]  может ли у нее быть ребенок,
[50:00.200 --> 50:02.200]  в который сейчас не ведет из нее ребро?
[50:02.200 --> 50:04.200]  Ну, конечно, может,
[50:04.200 --> 50:06.200]  потому что мало ли в чем проблема.
[50:06.200 --> 50:08.200]  Теоретически...
[50:08.200 --> 50:10.200]  Сейчас, так, дерево перестало быть деревом?
[50:10.200 --> 50:12.200]  Нет, почему не перестало?
[50:12.200 --> 50:14.200]  Если вот эту вершину мы убили,
[50:14.200 --> 50:16.200]  и вот это ребро, а эту вершину переподвесили сюда,
[50:16.200 --> 50:18.200]  то достало дерево.
[50:18.200 --> 50:20.200]  Нет, это не об этом.
[50:20.200 --> 50:22.200]  Может ли у нас из только что вершины,
[50:22.200 --> 50:24.200]  которую мы хотим забанить,
[50:24.200 --> 50:26.200]  которая сейчас, ребро,
[50:26.200 --> 50:28.200]  которого сейчас нет для Кати?
[50:28.200 --> 50:30.200]  Э-э-э...
[50:30.200 --> 50:32.200]  По поводу теоретики...
[50:32.200 --> 50:34.200]  Сейчас.
[50:34.200 --> 50:36.200]  Теоретически такое вполне может быть,
[50:36.200 --> 50:38.200]  потому что может быть у нее теоретически еще
[50:38.200 --> 50:40.200]  ведет ребро в какую-то вот такую,
[50:40.200 --> 50:42.200]  но при этом эта вершина находится...
[50:42.200 --> 50:44.200]  Тогда мы с этой вершиной ничего не делаем вообще.
[50:44.200 --> 50:46.200]  Да, нет, мы ничего не делаем.
[50:46.200 --> 50:48.200]  Нет, у нас как бы проблема только одна,
[50:48.200 --> 50:50.200]  что удалив эту вершину, у нас вот новые нетривиальные кости.
[50:50.200 --> 50:52.200]  Понимаешь, да?
[50:52.200 --> 50:54.200]  Дети...
[50:54.200 --> 50:56.200]  То есть появились ее, соответственно, дети в линкате.
[50:56.200 --> 50:58.200]  Вот.
[50:58.200 --> 51:00.200]  Ну вот.
[51:00.200 --> 51:02.200]  Появились ее...
[51:02.200 --> 51:04.200]  Появились, соответственно, ее дети в линкате.
[51:04.200 --> 51:06.200]  И, значит, для этих детей
[51:06.200 --> 51:08.200]  мы просто сделаем абсолютно то же самое
[51:08.200 --> 51:10.200]  рекурсивно.
[51:10.200 --> 51:12.200]  Да, то есть слои, кстати, приятны тем,
[51:12.200 --> 51:14.200]  что там зациклов не получится
[51:14.200 --> 51:16.200]  автоматически.
[51:16.200 --> 51:18.200]  Потому что мы все равно будем подвешивать к предыдущему слою.
[51:18.200 --> 51:20.200]  Но если не подвесилось, то там дальше
[51:20.200 --> 51:22.200]  рекурсивно, рекурсивно, рекурсивно.
[51:22.200 --> 51:24.200]  Вот.
[51:24.200 --> 51:26.200]  Так что вот такая
[51:26.200 --> 51:28.200]  получается красота.
[51:28.200 --> 51:30.200]  Вот.
[51:30.200 --> 51:32.200]  Ну и за какую симптомику тогда
[51:32.200 --> 51:34.200]  это получается?
[51:34.200 --> 51:36.200]  Вместо В.О.
[51:36.200 --> 51:38.200]  Ну да, то есть по сути, да.
[51:38.200 --> 51:40.200]  То есть заметим, что проталкивание пути у нас
[51:40.200 --> 51:42.200]  теперь получается вместо
[51:42.200 --> 51:44.200]  В получается
[51:44.200 --> 51:46.200]  логарифом В.
[51:46.200 --> 51:48.200]  Правда, единственная оговорка, что у нас
[51:48.200 --> 51:50.200]  есть вот эти вот каскадные вырезания, так сказать.
[51:50.200 --> 51:52.200]  Ну и что?
[51:52.200 --> 51:54.200]  Они в сумме там будут получиться.
[51:54.200 --> 51:56.200]  Ну ладно.
[51:56.200 --> 51:58.200]  Сейчас.
[51:58.200 --> 52:00.200]  Погодите.
[52:00.200 --> 52:02.200]  Давайте подумаем.
[52:02.200 --> 52:04.200]  За какое время?
[52:04.200 --> 52:06.200]  То есть когда мы удаляем вершину, мы тут пробегаемся
[52:06.200 --> 52:08.200]  по ее детям. Вообще один маленький вопрос,
[52:08.200 --> 52:10.200]  как в линкате найти по вершине ее детей
[52:10.200 --> 52:12.200]  и хранить?
[52:12.200 --> 52:14.200]  Ну да, в данном случае можно в тупую хранить.
[52:14.200 --> 52:16.200]  Это не проблема.
[52:16.200 --> 52:18.200]  Вот.
[52:18.200 --> 52:20.200]  Да, это каскад.
[52:20.200 --> 52:22.200]  В общем случае в линкате, кстати, у вас не получится
[52:22.200 --> 52:24.200]  это делать, потому что в линкате еще есть, помните, при подвешивании
[52:24.200 --> 52:26.200]  в другом кофе.
[52:26.200 --> 52:28.200]  Но слава богу у нас единый корень на этот раз.
[52:28.200 --> 52:30.200]  Нет.
[52:30.200 --> 52:32.200]  У нас подвешивание только корня к чему-то.
[52:32.200 --> 52:34.200]  У нас нет реверсов.
[52:34.200 --> 52:36.200]  Да, у нас так, реверсов нет, направление все
[52:36.200 --> 52:38.200]  в одну сторону, поэтому в данном случае
[52:38.200 --> 52:40.200]  для каждой вершины тоже двух связных список
[52:40.200 --> 52:42.200]  при желании хранить можно, если очень хочется.
[52:42.200 --> 52:44.200]  Но вопрос в другом.
[52:44.200 --> 52:46.200]  Просто пройтись по реверсам из вершины
[52:46.200 --> 52:48.200]  еще не убитым.
[52:48.200 --> 52:50.200]  И проверять, является ли это ребенка в линкате.
[52:50.200 --> 52:52.200]  Это же не страшно.
[52:52.200 --> 52:54.200]  А, ну один раз
[52:54.200 --> 52:56.200]  можно и пройти.
[52:56.200 --> 52:58.200]  А, ну с другой стороны теперь заметимся, да.
[52:58.200 --> 53:00.200]  Просто кажется, что все равно этих реверсов может быть даже детей много.
[53:00.200 --> 53:02.200]  Скажем, что-то надо делать.
[53:02.200 --> 53:04.200]  Ну и что?
[53:04.200 --> 53:06.200]  Ну с другой стороны заметим, что
[53:06.200 --> 53:08.200]  вот.
[53:08.200 --> 53:10.200]  Но здесь теперь можно заметить, что
[53:10.200 --> 53:12.200]  условно говоря, можно считать, что удалив вершину, мы
[53:12.200 --> 53:14.200]  каждый из этих ребер удаляем
[53:14.200 --> 53:16.200]  и виртуально у нас получается, что
[53:16.200 --> 53:18.200]  каждое конкретное удаление работает
[53:18.200 --> 53:20.200]  за, ну что-то типа.
[53:20.200 --> 53:22.200]  Ну там в сумме получается E log V.
[53:22.200 --> 53:24.200]  Потому что мы прикажем удаление
[53:24.200 --> 53:26.200]  ребра, либо за log V
[53:26.200 --> 53:28.200]  переподвешиваем вершину в чему-то.
[53:30.200 --> 53:32.200]  Либо выясняем, что все закончилось
[53:32.200 --> 53:34.200]  и сводим задачу к удалениям
[53:34.200 --> 53:36.200]  еще каких-то ребер.
[53:38.200 --> 53:40.200]  Поэтому получается, что у нас тут получается E log V
[53:40.200 --> 53:42.200]  и здесь асимплуатика получается
[53:42.200 --> 53:44.200]  V E log V.
[53:46.200 --> 53:48.200]  Вот, слушайте. Да, красиво.
[53:48.200 --> 53:50.200]  Можно еще раз напомнить,
[53:50.200 --> 53:52.200]  с чего мы построили инкад?
[53:52.200 --> 53:54.200]  С чего мы начинаем?
[53:54.200 --> 53:56.200]  Мы просто говорим, так, жила была
[53:56.200 --> 53:58.200]  декшина T, и выяснилось, что
[53:58.200 --> 54:00.200]  декшина T еще не удалена.
[54:00.200 --> 54:02.200]  Изначально дерево, помнишь, что?
[54:02.200 --> 54:04.200]  Нет, нет, мы сделали инкад.
[54:04.200 --> 54:06.200]  Изначально мы его построили как дерево DFS.
[54:06.200 --> 54:08.200]  То есть достижение у него
[54:08.200 --> 54:10.200]  все вершины достижены.
[54:12.200 --> 54:14.200]  Пока T не объявлено
[54:14.200 --> 54:16.200]  удаленной вершиной,
[54:16.200 --> 54:18.200]  как только она удалена, значит все.
[54:18.200 --> 54:20.200]  Пока она не удалена,
[54:20.200 --> 54:22.200]  берем путь от S.
[54:24.200 --> 54:26.200]  Находим минимум пропускных способностей.
[54:28.200 --> 54:30.200]  Мы можем найти
[54:30.200 --> 54:32.200]  меню,
[54:32.200 --> 54:34.200]  само ребра.
[54:34.200 --> 54:36.200]  Да, хорошо.
[54:36.200 --> 54:38.200]  Сплей дерева такие вещи
[54:38.200 --> 54:40.200]  поддерживает.
[54:40.200 --> 54:42.200]  А алгоритм не рассчитан на то, чтобы
[54:42.200 --> 54:44.200]  выписать. Честно-честно.
[54:46.200 --> 54:48.200]  Ну, как сказать, мало вещей.
[54:48.200 --> 54:50.200]  Ну, а что, инкад проблема?
[54:50.200 --> 54:52.200]  Ну, не знаю,
[54:52.200 --> 54:54.200]  просто вы инкад храните минимум
[54:54.200 --> 54:56.200]  восстанавливаете,
[54:56.200 --> 54:58.200]  где он находится,
[54:58.200 --> 55:00.200]  это внутри сплея делается.
[55:00.200 --> 55:02.200]  Случай, когда у нас больше
[55:02.200 --> 55:04.200]  ребра из вершины
[55:04.200 --> 55:06.200]  можно повторить.
[55:06.200 --> 55:08.200]  Да, вершины некогда.
[55:08.200 --> 55:10.200]  Мы идем в ее детей,
[55:10.200 --> 55:12.200]  смотрим, нет ли из них ребра.
[55:12.200 --> 55:14.200]  Мы ее удаляем.
[55:14.200 --> 55:16.200]  Если выяснилось, что в нее
[55:16.200 --> 55:18.200]  подходящих ребр нет, то мы ее удаляем.
[55:18.200 --> 55:20.200]  Что значит мы ее удаляем?
[55:20.200 --> 55:22.200]  Мы удаляем все ребра,
[55:22.200 --> 55:24.200]  ведущие из нее.
[55:24.200 --> 55:26.200]  И потом идем
[55:26.200 --> 55:28.200]  и дальше
[55:28.200 --> 55:30.200]  и пустим.
[55:30.200 --> 55:32.200]  У нас есть мистическая функция
[55:32.200 --> 55:34.200]  удалить ребро.
[55:34.200 --> 55:36.200]  Которая работает так.
[55:36.200 --> 55:38.200]  Значит, удалить ребро.
[55:38.200 --> 55:40.200]  Значит,
[55:40.200 --> 55:42.200]  удалить ребро.
[55:42.200 --> 55:44.200]  Ну, имею в виду инкад.
[55:44.200 --> 55:46.200]  Мы говорим, что если у нас есть
[55:46.200 --> 55:48.200]  еще хотя бы одно входящее ребро,
[55:48.200 --> 55:50.200]  мы их за вот единицы понимаем,
[55:50.200 --> 55:52.200]  то мы смотрим.
[55:52.200 --> 55:54.200]  Но если оно из удаленной вершины,
[55:54.200 --> 55:56.200]  то мы его тоже быстренько
[55:56.200 --> 55:58.200]  игнорируем.
[55:58.200 --> 56:00.200]  И вот, но если оно
[56:00.200 --> 56:02.200]  ведет не из удаленной вершины,
[56:02.200 --> 56:04.200]  то, соответственно, мы в этом месте
[56:04.200 --> 56:06.200]  просто подвешиваем эту вершину
[56:06.200 --> 56:08.200]  к этой линкате.
[56:08.200 --> 56:10.200]  За это ребро так вот вес сохраняем.
[56:10.200 --> 56:12.200]  И заканчиваем работу.
[56:12.200 --> 56:14.200]  Если в процессе выяснилось,
[56:14.200 --> 56:16.200]  что ребра нет,
[56:16.200 --> 56:18.200]  то
[56:18.200 --> 56:20.200]  тогда мы перебираем,
[56:20.200 --> 56:22.200]  во-первых, мы объявляем эту вершину
[56:22.200 --> 56:24.200]  удаленной.
[56:24.200 --> 56:26.200]  И значит, перебираем
[56:26.200 --> 56:28.200]  все еще живые ребра из нее.
[56:30.200 --> 56:32.200]  И для каждого из них рекурсивно
[56:32.200 --> 56:34.200]  вызываем удаление ребра.
[56:34.200 --> 56:36.200]  Все.
[56:38.200 --> 56:40.200]  То есть мы блокирующий поток
[56:40.200 --> 56:42.200]  находим за логарика ВВ
[56:42.200 --> 56:44.200]  Е, плюс В, плюс Е.
[56:44.200 --> 56:46.200]  Ну,
[56:46.200 --> 56:48.200]  Е хотя бы В.
[56:48.200 --> 56:50.200]  Ну, скорее Е, потому что на самом деле
[56:50.200 --> 56:52.200]  Е обычно больше В.
[56:52.200 --> 56:54.200]  Ну, в данном случае, тем более, что мы можем
[56:54.200 --> 56:56.200]  игнорировать все вершины, которые ДФС не дотянулось.
[56:58.200 --> 57:00.200]  Вот, поэтому по факту здесь
[57:00.200 --> 57:02.200]  так что получается такая красота.
[57:02.200 --> 57:04.200]  То есть все это делалось для того, чтобы
[57:04.200 --> 57:06.200]  проталкивать путь за логарику.
[57:06.200 --> 57:08.200]  А не за В.
[57:08.200 --> 57:10.200]  Каждый раз мы ищем ребра из предыдущего слоя.
[57:10.200 --> 57:12.200]  Да.
[57:12.200 --> 57:14.200]  То есть мы из последнего, на котором
[57:14.200 --> 57:16.200]  мы объявляем.
[57:16.200 --> 57:18.200]  Ну, да. Ну, у нас в слоистой сети есть
[57:18.200 --> 57:20.200]  только вообще ребра из предыдущего слоя, в принципе.
[57:20.200 --> 57:22.200]  Других ребер у нас нет.
[57:22.200 --> 57:24.200]  Такое вопрос, что они могут вести из удаленной вершины
[57:24.200 --> 57:26.200]  или не удаленной вершины.
[57:26.200 --> 57:28.200]  Вот. Нет, ну вот.
[57:28.200 --> 57:30.200]  То есть, на самом деле, честно,
[57:30.200 --> 57:32.200]  ну ладно, я все-таки встал. У меня была, на самом деле,
[57:32.200 --> 57:34.200]  версия немножко другая.
[57:34.200 --> 57:36.200]  То есть у меня была версия тоже
[57:36.200 --> 57:38.200]  ранее в линках, но корнем является
[57:38.200 --> 57:40.200]  не С, а Т.
[57:40.200 --> 57:42.200]  То есть это будет сейчас уже ближе к
[57:42.200 --> 57:44.200]  реально алгоритму Диница.
[57:44.200 --> 57:46.200]  Ну, потому что давайте вот
[57:46.200 --> 57:48.200]  если мы вспомним, да, вот был у нас такой
[57:48.200 --> 57:50.200]  алгоритм минут 20 назад, да.
[57:50.200 --> 57:52.200]  Вот.
[57:52.200 --> 57:54.200]  Значит, смотрите.
[57:54.200 --> 57:56.200]  Работал он примерно
[57:56.200 --> 57:58.200]  следующим образом.
[57:58.200 --> 58:00.200]  То есть вы помните, да, мы запускали
[58:00.200 --> 58:02.200]  ДФС, но ДФС заметил,
[58:02.200 --> 58:04.200]  но как был устроен ДФС?
[58:04.200 --> 58:06.200]  Он был устроен так, что
[58:06.200 --> 58:08.200]  соответственно, если мы в прошлый раз
[58:08.200 --> 58:10.200]  ДФС, значит, закончил свою работу на вот этом
[58:10.200 --> 58:12.200]  ребре, то следующий
[58:12.200 --> 58:14.200]  ДФС начнет работу в этой вершине
[58:14.200 --> 58:16.200]  именно с этого же ребра.
[58:16.200 --> 58:18.200]  Помните, да?
[58:18.200 --> 58:20.200]  То отсюда вытекает две вещи.
[58:20.200 --> 58:22.200]  Во-первых, реализационная.
[58:22.200 --> 58:24.200]  Вот это я забыл сказать, но это важно.
[58:24.200 --> 58:26.200]  Вот мы тут говорили, что мы реализовать
[58:26.200 --> 58:28.200]  алгоритм Диница, надо там это всё
[58:28.200 --> 58:30.200]  научиться там удалять
[58:30.200 --> 58:32.200]  ребра, потом восстанавливать
[58:32.200 --> 58:34.200]  двусвязный список, да.
[58:34.200 --> 58:36.200]  Так вот, на самом деле, всего этого не нужно.
[58:36.200 --> 58:38.200]  Потому что на самом деле,
[58:38.200 --> 58:40.200]  вот если так внимательно
[58:40.200 --> 58:42.200]  посмотреть, то мы говорим, что если
[58:42.200 --> 58:44.200]  у нас до вершины фиксировал порядок
[58:44.200 --> 58:46.200]  ребр, в котором мы её рассматриваем,
[58:46.200 --> 58:48.200]  то по сути у нас в каждый момент времени
[58:48.200 --> 58:50.200]  удалено несколько первых ребр.
[58:50.200 --> 58:52.200]  Если какое-то ребро ещё не удалено, то ДФС
[58:52.200 --> 58:54.200]  будет ходить по нему, пока это ребро не удалится.
[58:54.200 --> 58:56.200]  В результате
[58:56.200 --> 58:58.200]  можно вообще в реальности
[58:58.200 --> 59:00.200]  ничего не удалять,
[59:00.200 --> 59:02.200]  а просто в каждой вершине
[59:02.200 --> 59:04.200]  хранить там какой-то указатель
[59:04.200 --> 59:06.200]  или индекс, или вот в нашем случае
[59:06.200 --> 59:08.200]  итератор, вот как мы в прошлый раз писали, да.
[59:08.200 --> 59:10.200]  Начиная с какого момента ДФС
[59:10.200 --> 59:12.200]  должен работать.
[59:12.200 --> 59:14.200]  Если ребро удалилось, если у него всё плохо,
[59:14.200 --> 59:16.200]  то удаление ребра
[59:16.200 --> 59:18.200]  тогда делает очень просто.
[59:18.200 --> 59:20.200]  Итератор плюс кузов.
[59:20.200 --> 59:22.200]  Ну или в нашем случае итератор точка Н.
[59:22.200 --> 59:24.200]  Вот, да, конечно.
[59:24.200 --> 59:26.200]  Нехорректно говорить слово
[59:26.200 --> 59:28.200]  итератор к тому, что мы написали.
[59:28.200 --> 59:30.200]  Хотя нет, в джаве корректно.
[59:30.200 --> 59:32.200]  В джаве они именно так сделаются.
[59:32.200 --> 59:34.200]  Интерфейсно.
[59:34.200 --> 59:36.200]  То есть, заметим, что теперь
[59:36.200 --> 59:38.200]  при такой технологии,
[59:38.200 --> 59:40.200]  когда в каждой вершине
[59:40.200 --> 59:42.200]  мы просто,
[59:42.200 --> 59:44.200]  когда мы храним просто итератор,
[59:44.200 --> 59:46.200]  можно даже слоистую сеть отдельно не строить.
[59:48.200 --> 59:50.200]  А в реальности
[59:50.200 --> 59:52.200]  просто сказать следующее, что
[59:52.200 --> 59:54.200]  давайте просто храним все ребра
[59:54.200 --> 59:56.200]  из каждой вершины у нас есть список
[59:56.200 --> 59:58.200]  смежности, просто всех ребр, которые вообще
[59:58.200 --> 01:00:00.200]  теоретически есть.
[01:00:00.200 --> 01:00:02.200]  И просто внутри ДФС говорим, что
[01:00:02.200 --> 01:00:04.200]  первое, что проверяем, а это ребро из
[01:00:04.200 --> 01:00:06.200]  слоистой сети вообще.
[01:00:06.200 --> 01:00:08.200]  То есть, если нет, то его тоже, значит, итератор
[01:00:08.200 --> 01:00:10.200]  плюс-плюс регулирует.
[01:00:10.200 --> 01:00:12.200]  То есть, в результате
[01:00:12.200 --> 01:00:14.200]  никаких этих там
[01:00:14.200 --> 01:00:16.200]  двухсвязных списков не надо.
[01:00:18.200 --> 01:00:20.200]  То есть, в результате там получается
[01:00:20.200 --> 01:00:22.200]  корр достаточно минималистично.
[01:00:22.200 --> 01:00:24.200]  Маленький ДФСик, маленький ДФСик.
[01:00:26.200 --> 01:00:28.200]  Ну и всякие пуши, конечно.
[01:00:30.200 --> 01:00:32.200]  И более того, кстати,
[01:00:32.200 --> 01:00:34.200]  еще отметим, что на самом деле
[01:00:34.200 --> 01:00:36.200]  есть еще такая модификация этого алгоритма
[01:00:36.200 --> 01:00:38.200]  такая, ну не очень понятно
[01:00:38.200 --> 01:00:40.200]  по синтетику, но
[01:00:40.200 --> 01:00:42.200]  существует тесты капиллёвичей, на которых
[01:00:42.200 --> 01:00:44.200]  классический динец не работает,
[01:00:44.200 --> 01:00:46.200]  а с этой модификацией почему-то начинает там просто
[01:00:46.200 --> 01:00:48.200]  летать за какие-то дни секунды.
[01:00:48.200 --> 01:00:50.200]  Суть заключается
[01:00:50.200 --> 01:00:52.200]  в следующем.
[01:00:52.200 --> 01:00:54.200]  Вот смотрите, вот вы нашли путь
[01:00:54.200 --> 01:00:56.200]  Это с линкатом или без линката?
[01:00:56.200 --> 01:00:58.200]  Не, без линката, без, без, без.
[01:00:58.200 --> 01:01:00.200]  То, что я сейчас говорю, это без линката,
[01:01:00.200 --> 01:01:02.200]  хотя как бы тут с линкатом это...
[01:01:02.200 --> 01:01:04.200]  Ну тут вот без линката.
[01:01:04.200 --> 01:01:06.200]  Значит, смотрите, помните, у нас был устроен ДФС.
[01:01:06.200 --> 01:01:08.200]  Да?
[01:01:08.200 --> 01:01:10.200]  И вот, допустим,
[01:01:10.200 --> 01:01:12.200]  и вот мы
[01:01:12.200 --> 01:01:14.200]  нашли какой-то путь, по которому
[01:01:14.200 --> 01:01:16.200]  наконец можно что-то припихнуть.
[01:01:18.200 --> 01:01:20.200]  И было тут, допустим,
[01:01:20.200 --> 01:01:22.200]  допустим, я не знаю,
[01:01:22.200 --> 01:01:24.200]  19, 12,
[01:01:24.200 --> 01:01:26.200]  15, 3,
[01:01:26.200 --> 01:01:28.200]  ну и допустим все.
[01:01:30.200 --> 01:01:32.200]  Так вот, идея заключается в следующем.
[01:01:32.200 --> 01:01:34.200]  Что может быть вместо
[01:01:34.200 --> 01:01:36.200]  того, что... Вот смотрите, ведь ДФС
[01:01:36.200 --> 01:01:38.200]  он в любом случае первое что сделает,
[01:01:38.200 --> 01:01:40.200]  это пройдет по этим ребрам, и только с этой вершины
[01:01:40.200 --> 01:01:42.200]  начнется какой-то нетривиальный путь, правда?
[01:01:42.200 --> 01:01:44.200]  Так вот, идея на самом деле
[01:01:44.200 --> 01:01:46.200]  такая тихая. А давайте просто, когда у нас есть
[01:01:46.200 --> 01:01:48.200]  ДФС, мы храним, сколько мы
[01:01:48.200 --> 01:01:50.200]  по уже набранному пути можем
[01:01:50.200 --> 01:01:52.200]  припихнуть воды.
[01:01:52.200 --> 01:01:54.200]  А мы всегда что-то делаем?
[01:01:54.200 --> 01:01:56.200]  По умолчанию мы находим путь, потом
[01:01:56.200 --> 01:01:58.200]  по нему проходим себя... О господи.
[01:01:58.200 --> 01:02:00.200]  По умолчанию, да.
[01:02:00.200 --> 01:02:02.200]  По умолчанию, да.
[01:02:02.200 --> 01:02:04.200]  То есть в данном случае мы храним,
[01:02:04.200 --> 01:02:06.200]  что по этому пути можем протолкнуть
[01:02:06.200 --> 01:02:08.200]  в 12.
[01:02:08.200 --> 01:02:10.200]  И теперь вот мы протолкнули 3,
[01:02:10.200 --> 01:02:12.200]  это означает, что мы в принципе с этой вершины
[01:02:12.200 --> 01:02:14.200]  можем еще протолкнуть 9.
[01:02:14.200 --> 01:02:16.200]  И давайте вот по этим ребрам будем собрать.
[01:02:16.200 --> 01:02:18.200]  Вот если мы тут встретили,
[01:02:18.200 --> 01:02:20.200]  то есть допустим какой 5,
[01:02:20.200 --> 01:02:22.200]  и нашлось тут еще 5, то значит мы протолкнули
[01:02:22.200 --> 01:02:24.200]  еще 5 единиц потока, и осталось
[01:02:24.200 --> 01:02:26.200]  4.
[01:02:26.200 --> 01:02:28.200]  Но если тут еще
[01:02:28.200 --> 01:02:30.200]  нашлось, и тут допустим нашлось
[01:02:30.200 --> 01:02:32.200]  ребро, по которому можно протолкнуть
[01:02:32.200 --> 01:02:34.200]  7,
[01:02:34.200 --> 01:02:36.200]  то тогда мы...
[01:02:36.200 --> 01:02:38.200]  Но тут уже ситрость. Теперь мы в рекурсию
[01:02:38.200 --> 01:02:40.200]  передаем здесь все-таки 4.
[01:02:40.200 --> 01:02:42.200]  Потому что мы больше не можем.
[01:02:42.200 --> 01:02:44.200]  И если там удастся
[01:02:44.200 --> 01:02:46.200]  это 4 так-то распихать,
[01:02:46.200 --> 01:02:48.200]  так или иначе,
[01:02:48.200 --> 01:02:50.200]  ну потому что может повезет, а может
[01:02:50.200 --> 01:02:52.200]  ДФС будет на самом деле теперь возвращать, а сколько мы реально
[01:02:52.200 --> 01:02:54.200]  припихнули, может получиться меньше.
[01:02:54.200 --> 01:02:56.200]  Так, это понятно, о чем я говорю?
[01:02:56.200 --> 01:02:58.200]  Вот, ну понятно.
[01:02:58.200 --> 01:03:00.200]  Вот.
[01:03:00.200 --> 01:03:02.200]  То, соответственно, тогда тут придется скажем,
[01:03:02.200 --> 01:03:04.200]  что все, 4 протолкнули, больше нельзя,
[01:03:04.200 --> 01:03:06.200]  значит откатываемся, говорим, что
[01:03:06.200 --> 01:03:08.200]  до сюда мы могли
[01:03:08.200 --> 01:03:10.200]  дойти за 12, ну теперь вместо 12.
[01:03:10.200 --> 01:03:12.200]  А мы...
[01:03:12.200 --> 01:03:14.200]  А, мы здесь, конечно, не забываем.
[01:03:14.200 --> 01:03:16.200]  А мы Форд и Фалкерсона не так писали?
[01:03:16.200 --> 01:03:18.200]  Что? А мы Форд и Фалкерсона не так писали?
[01:03:18.200 --> 01:03:20.200]  Нет. Просто гораздо короче получается.
[01:03:20.200 --> 01:03:22.200]  Ну, вообще да.
[01:03:22.200 --> 01:03:24.200]  Но Форд и Фалкерсона мы не так писали.
[01:03:24.200 --> 01:03:26.200]  Нет, мы предлагали, чтобы нашли
[01:03:26.200 --> 01:03:28.200]  нашли путь в протолкнули, все.
[01:03:28.200 --> 01:03:30.200]  Но это вот важный оговор.
[01:03:30.200 --> 01:03:32.200]  Да.
[01:03:32.200 --> 01:03:34.200]  Особенно такой же этот есть, и он периодически
[01:03:34.200 --> 01:03:36.200]  очень хорошо работает.
[01:03:36.200 --> 01:03:38.200]  Ну а симпточки формально говорят так же.
[01:03:38.200 --> 01:03:40.200]  Это понятно.
[01:03:40.200 --> 01:03:42.200]  Формально так же, но почему?
[01:03:42.200 --> 01:03:44.200]  Можно еще с пускпистами
[01:03:44.200 --> 01:03:46.200]  о двойке написать отдельно?
[01:03:46.200 --> 01:03:48.200]  Нет, нет, так. Ну, во-первых,
[01:03:48.200 --> 01:03:50.200]  масштабирование это для творчественных сетей,
[01:03:50.200 --> 01:03:52.200]  это отдельная большая тема.
[01:03:52.200 --> 01:03:54.200]  Кстати,
[01:03:54.200 --> 01:03:56.200]  может масштабирование для творчественных сетей?
[01:03:56.200 --> 01:03:58.200]  Верно ли, что можно
[01:03:58.200 --> 01:04:00.200]  не для творчественных сетей
[01:04:00.200 --> 01:04:02.200]  с помощью масштабирования искать просто приближение
[01:04:02.200 --> 01:04:04.200]  с кого-либо на большой ад.
[01:04:04.200 --> 01:04:06.200]  Залог там...
[01:04:06.200 --> 01:04:08.200]  Ну, с Лёдом скажу, что да.
[01:04:08.200 --> 01:04:10.200]  В некотором смысле, да.
[01:04:10.200 --> 01:04:12.200]  И думаю, мы в этом сегодня увидимся.
[01:04:12.200 --> 01:04:14.200]  Так, ну,
[01:04:14.200 --> 01:04:16.200]  да, не сейчас, у нас там до конца пары,
[01:04:16.200 --> 01:04:18.200]  10 минут осталось.
[01:04:18.200 --> 01:04:20.200]  Вот, значит, поэтому давайте
[01:04:20.200 --> 01:04:22.200]  доразберемся с Винейцем.
[01:04:22.200 --> 01:04:24.200]  Этому вот мы поговорили, значит, как писать
[01:04:24.200 --> 01:04:26.200]  этого Диница, что на самом деле легко
[01:04:26.200 --> 01:04:28.200]  пишется. Вот.
[01:04:28.200 --> 01:04:30.200]  Ну, а теперь, значит, осталось только рассказать, значит,
[01:04:30.200 --> 01:04:32.200]  какая лично у меня тут версия сленка.
[01:04:32.200 --> 01:04:34.200]  Ну, действительно, для...
[01:04:34.200 --> 01:04:36.200]  Ну, вот у вас версия достаточно хорошая,
[01:04:36.200 --> 01:04:38.200]  но она требует, чтобы вершины
[01:04:38.200 --> 01:04:40.200]  хранить из список исходящих рыб
[01:04:40.200 --> 01:04:42.200]  и список входящих рыб.
[01:04:42.200 --> 01:04:44.200]  Так вот, я же предлагаю именно модифицировать
[01:04:44.200 --> 01:04:46.200]  алгоритмом Диница следующего.
[01:04:46.200 --> 01:04:48.200]  То есть, можно сказать, что
[01:04:48.200 --> 01:04:50.200]  вот рассмотрим
[01:04:50.200 --> 01:04:52.200]  эти ребра, на которые в каждый момент времени указывает
[01:04:52.200 --> 01:04:54.200]  итератор, да?
[01:04:54.200 --> 01:04:56.200]  И теперь, давайте я скажу,
[01:04:56.200 --> 01:04:58.200]  что именно эти ребра
[01:04:58.200 --> 01:05:00.200]  мы будем, на этих ребрах
[01:05:00.200 --> 01:05:02.200]  будем строить ленка.
[01:05:02.200 --> 01:05:04.200]  То есть, это будет ребро
[01:05:04.200 --> 01:05:06.200]  дерева, подвешенное уже к вершине
[01:05:06.200 --> 01:05:08.200]  Т, а не к вершине С.
[01:05:10.200 --> 01:05:12.200]  Потому что
[01:05:12.200 --> 01:05:14.200]  из каждой ребра ведет одно, а в
[01:05:14.200 --> 01:05:16.200]  каждой, из каждой вершины ведет одно ребро,
[01:05:16.200 --> 01:05:18.200]  а ведет в не одно. Окей.
[01:05:18.200 --> 01:05:20.200]  То есть, раньше
[01:05:20.200 --> 01:05:22.200]  вы говорили, что у нас предки слева
[01:05:22.200 --> 01:05:24.200]  тут справа, а у нас будет
[01:05:24.200 --> 01:05:26.200]  из вершины С,
[01:05:26.200 --> 01:05:28.200]  они все устроены и так далее.
[01:05:28.200 --> 01:05:30.200]  То есть, это
[01:05:30.200 --> 01:05:32.200]  актуальные ребра, на которые указывает
[01:05:32.200 --> 01:05:34.200]  итератор.
[01:05:34.200 --> 01:05:36.200]  Все более того, в этом месте на тему удаленных
[01:05:36.200 --> 01:05:38.200]  вершин даже клюем, потому что если
[01:05:38.200 --> 01:05:40.200]  из вершины не осталось ребр, ну значит,
[01:05:40.200 --> 01:05:42.200]  условно.
[01:05:42.200 --> 01:05:44.200]  Условно может быть не с инфа.
[01:05:44.200 --> 01:05:46.200]  Хотя нет.
[01:05:46.200 --> 01:05:48.200]  Вот теперь давайте, как модифицируется алгоритм
[01:05:48.200 --> 01:05:50.200]  Дениса?
[01:05:50.200 --> 01:05:52.200]  Он говорит так.
[01:05:52.200 --> 01:05:54.200]  Если у вас из вершины С
[01:05:54.200 --> 01:05:56.200]  корень Т,
[01:05:56.200 --> 01:05:58.200]  то значит, находим путь
[01:05:58.200 --> 01:06:00.200]  и удаляем ребро.
[01:06:00.200 --> 01:06:02.200]  Как мы его удаляем?
[01:06:02.200 --> 01:06:04.200]  Как и ранее.
[01:06:04.200 --> 01:06:06.200]  То есть, как и ранее. Находим минимальное
[01:06:06.200 --> 01:06:08.200]  ребро и удаляем его.
[01:06:08.200 --> 01:06:10.200]  Что значит удаляем? Ну сдвигаем в нем
[01:06:10.200 --> 01:06:12.200]  итератор и пытаемся переподвести.
[01:06:12.200 --> 01:06:14.200]  То есть, как только найдем очередное ребро,
[01:06:14.200 --> 01:06:16.200]  ну подходит что?
[01:06:16.200 --> 01:06:18.200]  То есть, ведет следующий слой
[01:06:18.200 --> 01:06:20.200]  и
[01:06:20.200 --> 01:06:22.200]  не расстричь.
[01:06:22.200 --> 01:06:24.200]  Это тоже важно.
[01:06:24.200 --> 01:06:26.200]  Ну вот. И соответственно,
[01:06:26.200 --> 01:06:28.200]  находим такое ребро и просто объявляем
[01:06:28.200 --> 01:06:30.200]  нового родителя. То есть, тут переподвести.
[01:06:30.200 --> 01:06:32.200]  Есть у нас есть два ребра
[01:06:32.200 --> 01:06:34.200]  одинакового веса. Нужно ли нам
[01:06:34.200 --> 01:06:36.200]  в этом задумываться? Или
[01:06:36.200 --> 01:06:38.200]  в какой-то момент мы потолкнем нулевой поток
[01:06:38.200 --> 01:06:40.200]  и забудем?
[01:06:40.200 --> 01:06:42.200]  Не-не-не-не-не.
[01:06:42.200 --> 01:06:44.200]  Смотрите, если вы будете протолкнуть нулевые потоки,
[01:06:44.200 --> 01:06:46.200]  у вас полетит ассимпотика.
[01:06:46.200 --> 01:06:48.200]  Нет. Потому что каждый такой нулевой поток
[01:06:48.200 --> 01:06:50.200]  означает, что какое-то
[01:06:50.200 --> 01:06:52.200]  ребро было должно быть выстрелено раньше,
[01:06:52.200 --> 01:06:54.200]  но сейчас мы его удалим, как бы запоздало.
[01:06:54.200 --> 01:06:56.200]  Может быть.
[01:06:56.200 --> 01:06:58.200]  Но я бы на всякий случай так не делал.
[01:06:58.200 --> 01:07:00.200]  Просто тогда иначе нужно в линкате
[01:07:00.200 --> 01:07:02.200]  писать функцию, которая возвращает
[01:07:02.200 --> 01:07:04.200]  список минимума.
[01:07:04.200 --> 01:07:06.200]  Какой список минимума? Ну вот.
[01:07:06.200 --> 01:07:08.200]  Пусть у нас на одном. А, в этом?
[01:07:08.200 --> 01:07:10.200]  А, понял, понял.
[01:07:10.200 --> 01:07:12.200]  А как он сам отработает?
[01:07:12.200 --> 01:07:14.200]  Нашли какой-то минимум из всех.
[01:07:14.200 --> 01:07:16.200]  Что дальше будет?
[01:07:16.200 --> 01:07:18.200]  Ну, смотри, утоление ребра – это
[01:07:18.200 --> 01:07:20.200]  сдвиг итератора, и сдвиг итератора у нас
[01:07:20.200 --> 01:07:22.200]  по-любому есть.
[01:07:22.200 --> 01:07:24.200]  Ну вот.
[01:07:24.200 --> 01:07:26.200]  Ну и каждый сдвиг итератора работает
[01:07:26.200 --> 01:07:28.200]  за логорифом, потому что он либо
[01:07:28.200 --> 01:07:30.200]  переподвесит вершину, либо
[01:07:30.200 --> 01:07:32.200]  скажет, что плохо пойдет дальше.
[01:07:32.200 --> 01:07:34.200]  Ну так, получается
[01:07:34.200 --> 01:07:36.200]  никаких проблем нет.
[01:07:36.200 --> 01:07:38.200]  Но окажется, что в какой-то момент
[01:07:38.200 --> 01:07:40.200]  да, в какой-то момент может так случиться,
[01:07:40.200 --> 01:07:42.200]  что мы по пути притолкнем поток величины
[01:07:42.200 --> 01:07:44.200]  боль.
[01:07:44.200 --> 01:07:46.200]  Но оно просто пройдет куда-нибудь.
[01:07:46.200 --> 01:07:48.200]  Но правда есть та же оговорка,
[01:07:48.200 --> 01:07:50.200]  что и у вас.
[01:07:50.200 --> 01:07:52.200]  Что делать, если в какой-то момент
[01:07:52.200 --> 01:07:54.200]  выяснится, что
[01:07:54.200 --> 01:07:56.200]  от вершины С
[01:07:58.200 --> 01:08:00.200]  до вершины
[01:08:00.200 --> 01:08:02.200]  дойти нельзя?
[01:08:02.200 --> 01:08:04.200]  Корень тут оказался другой.
[01:08:04.200 --> 01:08:06.200]  Как?
[01:08:06.200 --> 01:08:08.200]  Как? Или надо было просто
[01:08:08.200 --> 01:08:10.200]  переподвесить к соседней вершине?
[01:08:10.200 --> 01:08:12.200]  Нет, сейчас, это в какой момент произошло?
[01:08:12.200 --> 01:08:14.200]  Если наш алгоритм вот сейчас
[01:08:14.200 --> 01:08:16.200]  ищет, есть ли ССП путь его нет,
[01:08:16.200 --> 01:08:18.200]  то все плохо.
[01:08:18.200 --> 01:08:20.200]  Все хорошо, значит, что пути просто нет.
[01:08:20.200 --> 01:08:22.200]  Но когда мы удаляем ребро, нам конечно же нужно продолжать.
[01:08:22.200 --> 01:08:24.200]  Ну да.
[01:08:24.200 --> 01:08:26.200]  Нет, ну теперь нет, просто оговорка такая,
[01:08:26.200 --> 01:08:28.200]  что если у вас встретилась такая ситуация, значит,
[01:08:28.200 --> 01:08:30.200]  что надо удалить вот это ребро.
[01:08:30.200 --> 01:08:32.200]  Ну вообще говоря, алгоритм двигается,
[01:08:32.200 --> 01:08:34.200]  надо удалить вот это ребро.
[01:08:36.200 --> 01:08:38.200]  Причем плевать сколько там потока,
[01:08:38.200 --> 01:08:40.200]  главное его удалить.
[01:08:40.200 --> 01:08:42.200]  Главное его просто найти,
[01:08:42.200 --> 01:08:44.200]  и дальше делаем то же самое.
[01:08:46.200 --> 01:08:48.200]  В каком случае?
[01:08:48.200 --> 01:08:50.200]  Если выяснилось, что у С,
[01:08:50.200 --> 01:08:52.200]  корень дерева, в котором находится вершина С,
[01:08:52.200 --> 01:08:54.200]  не оказался П.
[01:08:54.200 --> 01:08:56.200]  У нас был путь из С в Т.
[01:08:56.200 --> 01:08:58.200]  Мы удалили ребро на этом пути.
[01:08:58.200 --> 01:09:00.200]  Что мы дальше делаем?
[01:09:00.200 --> 01:09:02.200]  Подвигали итератор,
[01:09:02.200 --> 01:09:04.200]  нашли подходящее ребро,
[01:09:04.200 --> 01:09:06.200]  и переподвесили эту вершину
[01:09:06.200 --> 01:09:08.200]  согласно ребру.
[01:09:08.200 --> 01:09:10.200]  Все, теперь корень Т.
[01:09:10.200 --> 01:09:12.200]  То есть у нас нет никаких ситуаций,
[01:09:12.200 --> 01:09:14.200]  когда корень не Т.
[01:09:14.200 --> 01:09:16.200]  Когда этого ребра мы делаем?
[01:09:16.200 --> 01:09:18.200]  Когда мы что делаем?
[01:09:18.200 --> 01:09:20.200]  Ну, с предлагаемой точки зрения,
[01:09:20.200 --> 01:09:22.200]  когда мы делаем,
[01:09:22.200 --> 01:09:24.200]  ну, с предлагаемой точки реализации,
[01:09:24.200 --> 01:09:26.200]  останавливаемся.
[01:09:26.200 --> 01:09:28.200]  Останавливаем эту итерацию.
[01:09:28.200 --> 01:09:30.200]  Некуда переподвесить,
[01:09:30.200 --> 01:09:32.200]  значит не переподвесить.
[01:09:32.200 --> 01:09:34.200]  И тогда у нас может произойти...
[01:09:34.200 --> 01:09:36.200]  Или есть вариант,
[01:09:36.200 --> 01:09:38.200]  что можем прямо рекурсивно,
[01:09:38.200 --> 01:09:40.200]  что если не нашлось, значит давайте удалить это ребро
[01:09:40.200 --> 01:09:42.200]  и повторяем операцию,
[01:09:42.200 --> 01:09:44.200]  пока не переподвесится.
[01:09:44.200 --> 01:09:46.200]  Хотя это тоже не безопасно,
[01:09:46.200 --> 01:09:48.200]  потому что на этот раз может так случиться,
[01:09:48.200 --> 01:09:50.200]  что в какой-то момент,
[01:09:50.200 --> 01:09:52.200]  когда вершина была подвешена вот этой,
[01:09:52.200 --> 01:09:54.200]  и мы удалились и подвесились вот так.
[01:09:54.200 --> 01:09:56.200]  А проблема?
[01:09:56.200 --> 01:09:58.200]  Ну, просто проблема в том,
[01:09:58.200 --> 01:10:00.200]  что все равно нам придется рассматривать случай,
[01:10:00.200 --> 01:10:04.200]  когда есть путь от С до куда-то.
[01:10:04.200 --> 01:10:06.200]  То есть он ведет не куда-то,
[01:10:06.200 --> 01:10:08.200]  но это еще не означает что-то.
[01:10:08.200 --> 01:10:10.200]  То есть фактически нам бы тоже нужно было
[01:10:10.200 --> 01:10:12.200]  хранить обратные ребра,
[01:10:12.200 --> 01:10:14.200]  но мы этого избегаем.
[01:10:14.200 --> 01:10:16.200]  Ну да.
[01:10:16.200 --> 01:10:18.200]  То есть все, что нам теперь нужно,
[01:10:18.200 --> 01:10:20.200]  это хранить опять.
[01:10:20.200 --> 01:10:22.200]  Какой...
[01:10:22.200 --> 01:10:24.200]  Ну хотя...
[01:10:24.200 --> 01:10:26.200]  Да.
[01:10:26.200 --> 01:10:28.200]  Ну нет, хотя нет.
[01:10:28.200 --> 01:10:30.200]  Можно не хранить.
[01:10:30.200 --> 01:10:32.200]  Ну да, можно не хранить,
[01:10:32.200 --> 01:10:34.200]  но тут надо просто уметь.
[01:10:34.200 --> 01:10:36.200]  Тогда вам придется просто в линкате говорить,
[01:10:36.200 --> 01:10:38.200]  что у вас есть С, есть его путь до корня,
[01:10:38.200 --> 01:10:40.200]  а скажите, пожалуйста,
[01:10:40.200 --> 01:10:42.200]  какое там последнее именно ребро было.
[01:10:42.200 --> 01:10:44.200]  Вот вас очень попросят.
[01:10:44.200 --> 01:10:46.200]  Такую оговорку придется делать.
[01:10:46.200 --> 01:10:48.200]  Ну поэтому я говорю, что раз это все равно придется делать,
[01:10:48.200 --> 01:10:50.200]  тогда лучше, мне кажется,
[01:10:50.200 --> 01:10:52.200]  если от вершины уже все ребра кончились,
[01:10:52.200 --> 01:10:54.200]  то давайте лучше вместе интеракцию остановим.
[01:10:54.200 --> 01:10:56.200]  То есть делаем это
[01:10:56.200 --> 01:10:58.200]  мы фактически, то есть пока...
[01:10:58.200 --> 01:11:00.200]  Ну условно, пока не выяснится,
[01:11:00.200 --> 01:11:02.200]  что у С кончились ребра.
[01:11:02.200 --> 01:11:04.200]  И таким образом мы узнаем,
[01:11:04.200 --> 01:11:06.200]  что нам нужно зачерпывать вершину.
[01:11:06.200 --> 01:11:08.200]  И не нужно хранить обратные ребра.
[01:11:08.200 --> 01:11:10.200]  Ну да, да, да.
[01:11:10.200 --> 01:11:12.200]  Ну и более того, практически мы...
[01:11:12.200 --> 01:11:14.200]  То есть по сути, на самом деле, что вот этот алгоритм,
[01:11:14.200 --> 01:11:16.200]  он ближе к алгоритму Тинница, мне кажется,
[01:11:16.200 --> 01:11:18.200]  чем модель.
[01:11:18.200 --> 01:11:20.200]  Хотя как бы суть более-менее та же.
[01:11:20.200 --> 01:11:22.200]  Ну вот.
[01:11:22.200 --> 01:11:24.200]  Можно повторить?
[01:11:24.200 --> 01:11:26.200]  Может С, Н, К, Т, К, К.
[01:11:26.200 --> 01:11:28.200]  Так. Какую из Н, К, С?
[01:11:28.200 --> 01:11:30.200]  Ну по-моему, которая последнюю упрещена.
[01:11:30.200 --> 01:11:32.200]  Значит, смотрите, идея такая.
[01:11:32.200 --> 01:11:34.200]  Значит, идея такая.
[01:11:34.200 --> 01:11:36.200]  Значит, назовем ребро...
[01:11:36.200 --> 01:11:38.200]  Вот, вообразим себя алгоритм Тинница, да?
[01:11:38.200 --> 01:11:40.200]  Как мы уже сказали, в каждый момент времени
[01:11:40.200 --> 01:11:42.200]  у каждой вершины есть интератор,
[01:11:42.200 --> 01:11:44.200]  который указывает какое-то ребро,
[01:11:44.200 --> 01:11:46.200]  которое ДФС будет сейчас рассматривать, да?
[01:11:46.200 --> 01:11:48.200]  И идите дальше.
[01:11:48.200 --> 01:11:50.200]  Так вот, назовем это ребро актуальным.
[01:11:50.200 --> 01:11:52.200]  То есть у каждой вершины будет
[01:11:52.200 --> 01:11:54.200]  актуальное ребро.
[01:11:54.200 --> 01:11:56.200]  Ну, не более чем одно.
[01:11:56.200 --> 01:11:58.200]  И вдоль этих ребер построим дерево.
[01:11:58.200 --> 01:12:00.200]  Причем на этот раз более правая вершина
[01:12:00.200 --> 01:12:02.200]  является родителем более левой.
[01:12:08.200 --> 01:12:10.200]  Ну теперь мы говорим, что
[01:12:10.200 --> 01:12:12.200]  то есть у каждой вершины есть актуальное ребро,
[01:12:12.200 --> 01:12:14.200]  которое ведет куда-то вправо, да?
[01:12:14.200 --> 01:12:16.200]  Если объедините все ребра,
[01:12:16.200 --> 01:12:18.200]  получится
[01:12:18.200 --> 01:12:20.200]  подвешенный лес.
[01:12:20.200 --> 01:12:22.200]  Ну вот. Причем именно лес.
[01:12:22.200 --> 01:12:24.200]  Не гарантирую, что именно дерево.
[01:12:26.200 --> 01:12:28.200]  Причем более правая вершина будет всегда
[01:12:28.200 --> 01:12:30.200]  родителем более левой.
[01:12:32.200 --> 01:12:34.200]  Да, то есть теперь у нас как бы это...
[01:12:34.200 --> 01:12:36.200]  Ну вот. И единственное еще ограничение
[01:12:36.200 --> 01:12:38.200]  мы будем сразу считать, что из вершины Т
[01:12:38.200 --> 01:12:40.200]  есть вершины С,
[01:12:40.200 --> 01:12:42.200]  но они нам не нужны.
[01:12:44.200 --> 01:12:46.200]  Так вот. И дальше говорим.
[01:12:46.200 --> 01:12:48.200]  И говорим, пока у нас в вершине С
[01:12:48.200 --> 01:12:50.200]  не кончится игра.
[01:12:50.200 --> 01:12:52.200]  Кстати, это не обязательно. Можно считать,
[01:12:52.200 --> 01:12:54.200]  что из вершины Т есть пути, потому что тогда у нас
[01:12:54.200 --> 01:12:56.200]  сработает ИВ, что из С корень не Т
[01:12:56.200 --> 01:12:58.200]  и мы удалим эти проблемы.
[01:12:58.200 --> 01:13:00.200]  Сейчас то есть...
[01:13:00.200 --> 01:13:02.200]  Ну, короче, и так сработает.
[01:13:02.200 --> 01:13:04.200]  Не сработает.
[01:13:04.200 --> 01:13:06.200]  Там может так случиться, что пути теоретически есть,
[01:13:06.200 --> 01:13:08.200]  но параллодификации надо привести.
[01:13:08.200 --> 01:13:10.200]  Нет, пусть из Т
[01:13:10.200 --> 01:13:12.200]  у нас что-то есть, лишний путь
[01:13:12.200 --> 01:13:14.200]  из Т.
[01:13:14.200 --> 01:13:16.200]  Корень тогда дерева не Т.
[01:13:18.200 --> 01:13:20.200]  Ну, корень дерева
[01:13:20.200 --> 01:13:22.200]  с Т всегда Т.
[01:13:22.200 --> 01:13:24.200]  Вот если нет, то это не страшно.
[01:13:24.200 --> 01:13:26.200]  Что он просто удаляется.
[01:13:28.200 --> 01:13:30.200]  Лучше не надо, потому что
[01:13:30.200 --> 01:13:32.200]  если у вас там из Т путь еще идет куда-то дальше,
[01:13:32.200 --> 01:13:34.200]  то тогда вы рискуете делать
[01:13:34.200 --> 01:13:36.200]  лучше по этим ребрам, а вам,
[01:13:36.200 --> 01:13:38.200]  Боже мой, по сей вам это делать.
[01:13:40.200 --> 01:13:42.200]  Короче, не надо.
[01:13:42.200 --> 01:13:44.200]  Ладно, нормально. Так что лучше не надо.
[01:13:44.200 --> 01:13:46.200]  Т корень.
[01:13:46.200 --> 01:13:48.200]  Да, Т всегда корень.
[01:13:48.200 --> 01:13:50.200]  Так вот, алгоритм устроен так.
[01:13:50.200 --> 01:13:52.200]  Пока у нас из С есть актуальное ребро.
[01:13:52.200 --> 01:13:54.200]  Вот давайте я так скажу.
[01:13:54.200 --> 01:13:56.200]  Мы говорим так.
[01:13:56.200 --> 01:13:58.200]  Скажите, пожалуйста, мы узнаем,
[01:13:58.200 --> 01:14:00.200]  кто является корнем
[01:14:00.200 --> 01:14:02.200]  у вершины С.
[01:14:02.200 --> 01:14:04.200]  Если является Т,
[01:14:04.200 --> 01:14:06.200]  значит мы берем этот путь от С до Т.
[01:14:06.200 --> 01:14:08.200]  Мы и так уже эксполс вызвали.
[01:14:08.200 --> 01:14:10.200]  Значит берем этот путь.
[01:14:10.200 --> 01:14:12.200]  Находим на нем минимум.
[01:14:12.200 --> 01:14:14.200]  Проталкиваем на нем минимум.
[01:14:16.200 --> 01:14:18.200]  А также находим этот минимум
[01:14:18.200 --> 01:14:20.200]  и мы обнаружим, что этот минимум должен быть удален.
[01:14:22.200 --> 01:14:24.200]  Потому что насыщенное ребро.
[01:14:26.200 --> 01:14:28.200]  И в этом месте
[01:14:28.200 --> 01:14:30.200]  мы вызываем функцию
[01:14:30.200 --> 01:14:32.200]  удалить ребро.
[01:14:34.200 --> 01:14:36.200]  Вот у нас такая мистическая функция
[01:14:36.200 --> 01:14:38.200]  удалить ребро.
[01:14:42.200 --> 01:14:44.200]  Чуть позже расскажу, что удалить ребро.
[01:14:44.200 --> 01:14:46.200]  Второй случай.
[01:14:46.200 --> 01:14:48.200]  Если выяснилось, что С,
[01:14:48.200 --> 01:14:50.200]  корень у дерева с вершины С,
[01:14:50.200 --> 01:14:52.200]  не Т.
[01:14:52.200 --> 01:14:54.200]  Это означает, что ДФС
[01:14:54.200 --> 01:14:56.200]  бы тут шел-шел-шел и уткнулся бы сюда.
[01:14:56.200 --> 01:14:58.200]  Следовательно, надо удалить
[01:14:58.200 --> 01:15:00.200]  просто последнее ребро на этом пути.
[01:15:02.200 --> 01:15:04.200]  То есть по сути теперь мы вызываем
[01:15:04.200 --> 01:15:06.200]  функцию удалить ребро
[01:15:06.200 --> 01:15:08.200]  уже от вот этого ребра.
[01:15:10.200 --> 01:15:12.200]  И теперь, что делает функция
[01:15:12.200 --> 01:15:14.200]  удалить ребро?
[01:15:14.200 --> 01:15:16.200]  Делает она следующее.
[01:15:16.200 --> 01:15:18.200]  Мы говорим, что мы хотим удалить это ребро.
[01:15:18.200 --> 01:15:20.200]  Это означает, что эта вершина
[01:15:24.200 --> 01:15:26.200]  перестала быть
[01:15:26.200 --> 01:15:28.200]  ребёнком этой вершины.
[01:15:28.200 --> 01:15:30.200]  Хочется её куда-то переподвести.
[01:15:30.200 --> 01:15:32.200]  Что мы делаем?
[01:15:32.200 --> 01:15:34.200]  Мы помним, что это ребро было активным.
[01:15:34.200 --> 01:15:36.200]  Помните, на него итератор указывал.
[01:15:36.200 --> 01:15:38.200]  В соответствии с алгоритмом Диницы
[01:15:38.200 --> 01:15:40.200]  мы двигаем итератор дальше,
[01:15:40.200 --> 01:15:42.200]  перебираем ребра,
[01:15:42.200 --> 01:15:44.200]  игнорируем ребра, которые нам не подходят.
[01:15:44.200 --> 01:15:46.200]  Нам не подходит ребро,
[01:15:46.200 --> 01:15:48.200]  которое не лежит в слоистой сети
[01:15:48.200 --> 01:15:50.200]  или которое насыщено.
[01:15:52.200 --> 01:15:54.200]  Откуда у нас может быть насыщенное ребро?
[01:15:54.200 --> 01:15:56.200]  Как я уже сказал,
[01:15:56.200 --> 01:15:58.200]  реализация с итераторами позволяет
[01:15:58.200 --> 01:16:00.200]  вообще не удалять ребра.
[01:16:00.200 --> 01:16:02.200]  Мы тут говорим о слоистой сети,
[01:16:02.200 --> 01:16:04.200]  но в реальности у нас в списке ребр
[01:16:04.200 --> 01:16:06.200]  фиолетовые тоже жирные.
[01:16:14.200 --> 01:16:16.200]  Насыщенное ребро в слоистой сети
[01:16:16.200 --> 01:16:18.200]  уже убили, согласен.
[01:16:18.200 --> 01:16:20.200]  Хотя ещё насыщенные ребра в слоистой сети
[01:16:20.200 --> 01:16:22.200]  могут оказаться...
[01:16:22.200 --> 01:16:24.200]  Да, ещё может быть так,
[01:16:24.200 --> 01:16:26.200]  что так как на каждом пути
[01:16:26.200 --> 01:16:28.200]  может быть удалено не одно ребро,
[01:16:28.200 --> 01:16:30.200]  а на самом деле несколько,
[01:16:30.200 --> 01:16:32.200]  то мы удаляем только одно.
[01:16:32.200 --> 01:16:34.200]  Потому что если у нас там есть
[01:16:34.200 --> 01:16:36.200]  где-то второе, допустим,
[01:16:36.200 --> 01:16:38.200]  то в какой-то момент у нас просто появится
[01:16:38.200 --> 01:16:40.200]  актуальный путь от СДТ,
[01:16:40.200 --> 01:16:42.200]  и мы просто найдём это ребро и удалим.
[01:16:42.200 --> 01:16:44.200]  Просто протолкнув поток
[01:16:44.200 --> 01:16:46.200]  величины ноль.
[01:16:46.200 --> 01:16:48.200]  Так вот, удаление ребра
[01:16:48.200 --> 01:16:50.200]  в качестве ИФА
[01:16:50.200 --> 01:16:52.200]  лучше сразу написать,
[01:16:52.200 --> 01:16:54.200]  что это ребро из слоистой сети
[01:16:54.200 --> 01:16:56.200]  и оно не насыщено.
[01:16:56.200 --> 01:16:58.200]  Скажем так, может быть так,
[01:16:58.200 --> 01:17:00.200]  когда вы запускаете BFS,
[01:17:00.200 --> 01:17:02.200]  может быть так, что отсюда-сюда
[01:17:02.200 --> 01:17:04.200]  ведёт ребро простой способности ноль.
[01:17:04.200 --> 01:17:06.200]  Так может случиться,
[01:17:06.200 --> 01:17:08.200]  поэтому это обязательно надо проверять.
[01:17:08.200 --> 01:17:10.200]  Так вот.
[01:17:10.200 --> 01:17:12.200]  И чем это заканчивается?
[01:17:12.200 --> 01:17:14.200]  Ну вот, и тогда
[01:17:14.200 --> 01:17:16.200]  если вы ребра в соответствии с алгоритмом Дениса проматываете,
[01:17:16.200 --> 01:17:18.200]  как только находите ребро из слоистой сети,
[01:17:18.200 --> 01:17:20.200]  которое не насыщено,
[01:17:20.200 --> 01:17:22.200]  то вы просто тогда
[01:17:22.200 --> 01:17:24.200]  в этом месте объявляете, что вы эту вершину
[01:17:24.200 --> 01:17:26.200]  теперь подвешиваете
[01:17:26.200 --> 01:17:28.200]  к этой вершине.
[01:17:28.200 --> 01:17:30.200]  Ну там меняете, естественно, вес
[01:17:30.200 --> 01:17:32.200]  на крупную способность
[01:17:32.200 --> 01:17:34.200]  вот этого ребра.
[01:17:34.200 --> 01:17:36.200]  Какой вес? Я с кого меняю?
[01:17:36.200 --> 01:17:38.200]  У каждого повода.
[01:17:38.200 --> 01:17:40.200]  В линкате у нас вообще-то
[01:17:40.200 --> 01:17:42.200]  вес вершины есть, помните?
[01:17:42.200 --> 01:17:44.200]  В линкате
[01:17:44.200 --> 01:17:46.200]  мы вообще-то ещё как-то минимум
[01:17:46.200 --> 01:17:48.200]  на пути ищем.
[01:17:48.200 --> 01:17:50.200]  А минимум чего?
[01:17:50.200 --> 01:17:52.200]  Как мы это делаем?
[01:17:52.200 --> 01:17:54.200]  По умолчанию в линкате
[01:17:54.200 --> 01:17:56.200]  веса в вершинах находятся.
[01:17:56.200 --> 01:17:58.200]  Мы сопоставляем вершине
[01:17:58.200 --> 01:18:00.200]  вес ребра исходящего из неё.
[01:18:02.200 --> 01:18:04.200]  Периодически приходится его менять,
[01:18:04.200 --> 01:18:06.200]  но это линкат умеет.
[01:18:06.200 --> 01:18:08.200]  Вот.
[01:18:10.200 --> 01:18:12.200]  То есть, соответственно,
[01:18:12.200 --> 01:18:14.200]  переподвесили, остановились.
[01:18:14.200 --> 01:18:16.200]  То есть, на этом заканчивается функция
[01:18:16.200 --> 01:18:18.200]  удалить ребро.
[01:18:18.200 --> 01:18:20.200]  Заметим, что сама по себе функция
[01:18:20.200 --> 01:18:22.200]  удалить ребро работает за от
[01:18:22.200 --> 01:18:24.200]  количества удаляемых ребер в суммарной орге
[01:18:24.200 --> 01:18:26.200]  плюс логарифом на подвешивание.
[01:18:26.200 --> 01:18:28.200]  А, ну и важная оговорка,
[01:18:28.200 --> 01:18:30.200]  что ещё может так случиться, что
[01:18:30.200 --> 01:18:32.200]  из вершины ребра всё, просто
[01:18:32.200 --> 01:18:34.200]  ребра кончились.
[01:18:34.200 --> 01:18:36.200]  Так что функция удалить ребро
[01:18:36.200 --> 01:18:38.200]  завершает свою работу.
[01:18:38.200 --> 01:18:40.200]  Ну, также, если она объявит, что из этой вершины
[01:18:40.200 --> 01:18:42.200]  актуальность ребра больше нет.
[01:18:42.200 --> 01:18:44.200]  Вот и веселый.
[01:18:46.200 --> 01:18:48.200]  Так что вот ради чего
[01:18:48.200 --> 01:18:50.200]  в этом месте лекции появлялся линкат.
[01:18:52.200 --> 01:18:54.200]  Так что вот такая красота.
[01:18:56.200 --> 01:18:58.200]  Вот.
[01:18:58.200 --> 01:19:00.200]  Ну, сразу скажем, что, значит,
[01:19:00.200 --> 01:19:02.200]  последнее, что тут скажем, мы сейчас
[01:19:02.200 --> 01:19:04.200]  заметим, что алгоритм Диница
[01:19:04.200 --> 01:19:06.200]  это только первый алгоритм в концепции
[01:19:06.200 --> 01:19:08.200]  блокирующих поток.
[01:19:08.200 --> 01:19:10.200]  Вот.
[01:19:10.200 --> 01:19:12.200]  Ну, то есть, на самом деле, дальше,
[01:19:12.200 --> 01:19:14.200]  первым исторически алгоритмом, работавшим
[01:19:14.200 --> 01:19:16.200]  ЗВК, стал просто алгоритм Карзанова.
[01:19:18.200 --> 01:19:20.200]  Ну, как-то фамилия можете догадаться, да.
[01:19:20.200 --> 01:19:22.200]  То есть, конкретно эти разработки проходили
[01:19:22.200 --> 01:19:24.200]  по нашу сторону железного занавеса.
[01:19:24.200 --> 01:19:26.200]  Да, это очень забавно, да,
[01:19:26.200 --> 01:19:28.200]  потому что в этой науке с другой стороны
[01:19:28.200 --> 01:19:30.200]  что-то происходило. Правда, алгоритм
[01:19:30.200 --> 01:19:32.200]  Карзанова, нельзя сказать, что
[01:19:32.200 --> 01:19:34.200]  прям очень хорошо он публикован.
[01:19:34.200 --> 01:19:36.200]  Там просто такая забавная ситуация
[01:19:36.200 --> 01:19:38.200]  произошла. То есть, он его
[01:19:38.200 --> 01:19:40.200]  опубликовал в виде, то есть, на очередной
[01:19:40.200 --> 01:19:42.200]  конференции какой-то там под эгидой академии
[01:19:42.200 --> 01:19:44.200]  наук СССР. Да, дело в советские
[01:19:44.200 --> 01:19:46.200]  времена было, естественно.
[01:19:46.200 --> 01:19:48.200]  Вот. Значит, он там просто вышел и вот
[01:19:48.200 --> 01:19:50.200]  зачитал доклад на тему того, что вот тут
[01:19:50.200 --> 01:19:52.200]  на самом деле каким-то образом можно попихать-попихать
[01:19:52.200 --> 01:19:54.200]  и, короче, найти поток злоку.
[01:19:54.200 --> 01:19:56.200]  То есть, там вот это все, что там как-то
[01:19:56.200 --> 01:19:58.200]  зубы в квадрате делали.
[01:19:58.200 --> 01:20:00.200]  Вот. Примерное описание этого алгоритма
[01:20:00.200 --> 01:20:02.200]  в итоге есть там где-то у Тарьяна.
[01:20:02.200 --> 01:20:04.200]  Не помню, где, вот я помню.
[01:20:04.200 --> 01:20:06.200]  То есть, сейчас все, что мы
[01:20:06.200 --> 01:20:08.200]  лучшее, что мы смогли сделать,
[01:20:08.200 --> 01:20:10.200]  это V...
[01:20:10.200 --> 01:20:12.200]  А, это E лог В мы смогли сделать.
[01:20:12.200 --> 01:20:14.200]  Ну, сейчас мы сделали В Е лог В.
[01:20:14.200 --> 01:20:16.200]  Нет, просто E лог В.
[01:20:16.200 --> 01:20:18.200]  Ну, Е лог В на... Ну, позвольте, а у него
[01:20:18.200 --> 01:20:20.200]  В квадрат. А у него в квадрат.
[01:20:20.200 --> 01:20:22.200]  Ну, понятно там, с оговорками,
[01:20:22.200 --> 01:20:24.200]  что Z, естественно, мы уживаем В квадрат,
[01:20:24.200 --> 01:20:26.200]  в этом месте я оставляю упражнения,
[01:20:26.200 --> 01:20:28.200]  как добиться того, что...
[01:20:28.200 --> 01:20:30.200]  То есть, там...
[01:20:30.200 --> 01:20:32.200]  Как сделать сжатие
[01:20:32.200 --> 01:20:34.200]  всех кратных ребер, причем даже
[01:20:34.200 --> 01:20:36.200]  не за В квадрат плюс В,
[01:20:36.200 --> 01:20:38.200]  а за В плюс Е.
[01:20:40.200 --> 01:20:42.200]  А, проблем. Почему?
[01:20:42.200 --> 01:20:44.200]  Именно за В плюс Е.
[01:20:46.200 --> 01:20:48.200]  Вот смотри, как сжать все кратные ребра.
[01:20:48.200 --> 01:20:50.200]  Вот дан какой-то хал, у тебя
[01:20:50.200 --> 01:20:52.200]  накиданы ребра в родном порядке.
[01:20:52.200 --> 01:20:54.200]  Что-то в мак все сложить.
[01:20:54.200 --> 01:20:56.200]  Анордерд.
[01:20:56.200 --> 01:20:58.200]  Хэши.
[01:20:58.200 --> 01:21:00.200]  Что хэши? Я обожаю хэши.
[01:21:00.200 --> 01:21:02.200]  Я что, зря анордерд мэп писал?
[01:21:02.200 --> 01:21:04.200]  Нет, ну...
[01:21:04.200 --> 01:21:06.200]  Это другой предмет.
[01:21:06.200 --> 01:21:08.200]  Это другой предмет.
[01:21:08.200 --> 01:21:10.200]  А если без хэши?
[01:21:10.200 --> 01:21:12.200]  Мы не любим хэши.
[01:21:12.200 --> 01:21:14.200]  Ну, кроме как когда мы там изучаем какую-то
[01:21:14.200 --> 01:21:16.200]  какую-то...
[01:21:16.200 --> 01:21:18.200]  Когда я хэши изучаю, тогда люблю хэши.
[01:21:18.200 --> 01:21:20.200]  Когда изучаем, да? А без хэши слабо?
[01:21:20.200 --> 01:21:22.200]  Нет, может быть, зачем?
[01:21:22.200 --> 01:21:24.200]  В общем, первое упражнение подумайте.
[01:21:24.200 --> 01:21:26.200]  Вот, на самом деле несложное решение.
[01:21:26.200 --> 01:21:28.200]  Вот.
[01:21:28.200 --> 01:21:30.200]  Значит, соответственно
[01:21:30.200 --> 01:21:32.200]  так вот, после того, как сжать все не превосходит в
[01:21:32.200 --> 01:21:34.200]  в квадрат, поэтому в этом
[01:21:34.200 --> 01:21:36.200]  смысле бы кукла сошел.
[01:21:36.200 --> 01:21:38.200]  Можно посортить пару. Это долго и логично.
[01:21:38.200 --> 01:21:40.200]  Так.
[01:21:40.200 --> 01:21:42.200]  Ну, да, посортим.
[01:21:42.200 --> 01:21:44.200]  Посортим с этим, господи,
[01:21:44.200 --> 01:21:46.200]  подшкотом. Все.
[01:21:46.200 --> 01:21:48.200]  С сестренков и ребра подшкотом.
[01:21:48.200 --> 01:21:50.200]  Ну, ради к сорту, на самом деле.
[01:21:50.200 --> 01:21:52.200]  По второй вершине, потом по первой,
[01:21:52.200 --> 01:21:54.200]  и кратые ребра будут идти подряд.
[01:21:54.200 --> 01:21:56.200]  То есть повесить там обыску. И обязательно.
[01:21:56.200 --> 01:21:58.200]  Вот. Так что...
[01:21:58.200 --> 01:22:00.200]  Хорошо. Вот.
[01:22:00.200 --> 01:22:02.200]  Получается в квадрат. То есть далее
[01:22:02.200 --> 01:22:04.200]  далее... Ну вот. Ну в итоге
[01:22:04.200 --> 01:22:06.200]  произошла забавная ситуация,
[01:22:06.200 --> 01:22:08.200]  потому что с другой стороны образовались такие
[01:22:08.200 --> 01:22:10.200]  ученые, как Малхотра, Умар и Мохишвари.
[01:22:12.200 --> 01:22:14.200]  Да. В общем, это, наверное, вот.
[01:22:14.200 --> 01:22:16.200]  И предложили статью, просто вы ее можете там
[01:22:16.200 --> 01:22:18.200]  при желании легко нагуглить,
[01:22:18.200 --> 01:22:20.200]  при желании. Но это при желании
[01:22:20.200 --> 01:22:22.200]  не обязательно даже.
[01:22:22.200 --> 01:22:24.200]  Ну, вот. Статья на две страницы.
[01:22:24.200 --> 01:22:26.200]  Ну, буквально.
[01:22:26.200 --> 01:22:28.200]  Ну, в смысле, две страницы А4.
[01:22:28.200 --> 01:22:30.200]  Ну, правда, вот таким вот мертвым шрифтом
[01:22:30.200 --> 01:22:32.200]  две колодки.
[01:22:32.200 --> 01:22:34.200]  Из которых там полторы страницы,
[01:22:34.200 --> 01:22:36.200]  там где-то, ну, во-первых, там что-то
[01:22:36.200 --> 01:22:38.200]  Саглавия, авторы, там ссылки
[01:22:38.200 --> 01:22:40.200]  в литературу, описание там истории
[01:22:40.200 --> 01:22:42.200]  и вопрос, что там был это, был Форкмахерсон,
[01:22:42.200 --> 01:22:44.200]  там бла-бла-бла. Вот есть Денис, вот, который
[01:22:44.200 --> 01:22:46.200]  вот сделал вот это вот. Так вот.
[01:22:46.200 --> 01:22:48.200]  Там был еще Корзанов, но там что-то непонятное.
[01:22:48.200 --> 01:22:50.200]  Так вот, мы предлагаем на наш взгляд более
[01:22:50.200 --> 01:22:52.200]  простое алгоритм ЗВК.
[01:22:52.200 --> 01:22:54.200]  И там буквально на полустранический четко
[01:22:54.200 --> 01:22:56.200]  описано.
[01:22:56.200 --> 01:22:58.200]  Так вот.
[01:22:58.200 --> 01:23:00.200]  Так что при желании можете даже нагуглить.
[01:23:00.200 --> 01:23:02.200]  Причем алгоритм так называется, алгоритм
[01:23:02.200 --> 01:23:04.200]  Молхотри, Кумани, Вахишвари.
[01:23:04.200 --> 01:23:06.200]  Да, это точно фамилия.
[01:23:06.200 --> 01:23:08.200]  Да, эти фамилии очень простые для мирового
[01:23:08.200 --> 01:23:10.200]  сообщества, поэтому он не называется
[01:23:10.200 --> 01:23:12.200]  алгоритм трех индусов.
[01:23:12.200 --> 01:23:14.200]  Соответственно,
[01:23:14.200 --> 01:23:16.200]  то есть алгоритм методинца
[01:23:16.200 --> 01:23:18.200]  круглозаваранжева-розарева, это очень
[01:23:18.200 --> 01:23:20.200]  сложно. Или там этих двух китайцев,
[01:23:20.200 --> 01:23:22.200]  я их уже не знаю.
[01:23:22.200 --> 01:23:24.200]  Но это очень глотно. Но не суть.
[01:23:24.200 --> 01:23:26.200]  Вот. Ну ладно, в общем, суть в том,
[01:23:26.200 --> 01:23:28.200]  что, ну вот, на самом деле этот алгоритм
[01:23:28.200 --> 01:23:30.200]  я рассказывать не буду, потому что он
[01:23:30.200 --> 01:23:32.200]  у нас будет в домашнем интернете.
[01:23:32.200 --> 01:23:34.200]  Придумайте его.
[01:23:34.200 --> 01:23:36.200]  Там будет его название, чтобы загубить
[01:23:36.200 --> 01:23:38.200]  можно было? Ну я вам сказал
[01:23:38.200 --> 01:23:40.200]  Молхотри, Кумани, Вахишвари. Кто-нибудь писал?
[01:23:40.200 --> 01:23:42.200]  А можно тебе на это сказать?
[01:23:42.200 --> 01:23:44.200]  Нет, на самом деле нет смысла
[01:23:44.200 --> 01:23:46.200]  его купить, потому что там в задаче
[01:23:46.200 --> 01:23:48.200]  мне будет достаточная подсказка на то, что
[01:23:48.200 --> 01:23:50.200]  на самом деле вы его просто приделаете.
[01:23:50.200 --> 01:23:52.200]  Ты очень хорошо мнения,
[01:23:52.200 --> 01:23:54.200]  спасибо.
[01:23:56.200 --> 01:23:58.200]  Вот.
[01:23:58.200 --> 01:24:00.200]  Ну вот нет, тут как бы
[01:24:00.200 --> 01:24:02.200]  индийские фамилии, они как слышат,
[01:24:02.200 --> 01:24:04.200]  так и пишутся.
[01:24:08.200 --> 01:24:10.200]  Так, вот эту букву я не
[01:24:10.200 --> 01:24:12.200]  помню букву.
[01:24:12.200 --> 01:24:14.200]  Или вот. Не помню букву.
[01:24:14.200 --> 01:24:16.200]  Да, скорее вот эту, наверное.
[01:24:18.200 --> 01:24:20.200]  Вот. То есть тут вот такая
[01:24:20.200 --> 01:24:22.200]  забавная история произошла.
[01:24:22.200 --> 01:24:24.200]  Вот.
[01:24:24.200 --> 01:24:26.200]  Так что это вот, что еще хочется сказать.
[01:24:26.200 --> 01:24:28.200]  То есть более того, насколько я знаю, тут я подробностью
[01:24:28.200 --> 01:24:30.200]  уже так сейчас не поручусь,
[01:24:30.200 --> 01:24:32.200]  но, возможно, чемпионские алгоритмы
[01:24:32.200 --> 01:24:34.200]  поиска потока, кстати, да.
[01:24:34.200 --> 01:24:36.200]  Кстати, чемпионом на текущий момент является алгоритм,
[01:24:36.200 --> 01:24:38.200]  который работает за ВЭ.
[01:24:40.200 --> 01:24:42.200]  А, не за ВК, все понятно, да?
[01:24:42.200 --> 01:24:44.200]  Да.
[01:24:44.200 --> 01:24:46.200]  Там не ВЭ, ГЕ, ЛОГ, ЛОГ, ДЕЛИК,
[01:24:46.200 --> 01:24:48.200]  но ЛОГ, ЛОГ, ЛОГ, ЛОГ, ЛОГ.
[01:24:48.200 --> 01:24:50.200]  Не-не-не, там по-моему в 15-м году ВГ.
[01:24:50.200 --> 01:24:52.200]  А там, в общем-то, алгоритм, который приобретает
[01:24:52.200 --> 01:24:54.200]  в куче случаев, где нас алгоритмы пихают в зависимости
[01:24:54.200 --> 01:24:56.200]  от отношений ЭК, ВЭ и такого.
[01:24:56.200 --> 01:24:58.200]  Может быть.
[01:24:58.200 --> 01:25:00.200]  Как все последние алгоритмы придуманы в средних лет,
[01:25:00.200 --> 01:25:02.200]  скорее всего, да.
[01:25:02.200 --> 01:25:04.200]  В этом случае давайте хотя бы со стволами
[01:25:04.200 --> 01:25:06.200]  разберемся.
[01:25:06.200 --> 01:25:08.200]  Нет, ну тут нет как бы
[01:25:08.200 --> 01:25:10.200]  эпического алгоритма.
[01:25:10.200 --> 01:25:12.200]  Он работает за лучшую ассинтотику,
[01:25:12.200 --> 01:25:14.200]  за которую вообще возможно искать астолы.
[01:25:14.200 --> 01:25:16.200]  А что это за ассинтотика, наука не знает.
[01:25:16.200 --> 01:25:18.200]  Что?
[01:25:18.200 --> 01:25:20.200]  Что?
[01:25:20.200 --> 01:25:22.200]  Существует, значит, в теории поиска минимальных
[01:25:22.200 --> 01:25:24.200]  астолов, есть эпический алгоритм.
[01:25:24.200 --> 01:25:26.200]  Значит реально.
[01:25:26.200 --> 01:25:28.200]  И он говорит так, он говорит,
[01:25:28.200 --> 01:25:30.200]  что он ищет миностол
[01:25:30.200 --> 01:25:32.200]  за минимально возможную ассинтотику,
[01:25:32.200 --> 01:25:34.200]  за которую
[01:25:34.200 --> 01:25:36.200]  теоретически вообще можно искать миностол.
[01:25:36.200 --> 01:25:38.200]  Но за какую не знаем?
[01:25:38.200 --> 01:25:40.200]  Да.
[01:25:40.200 --> 01:25:42.200]  Ну там какие-то там деревья решения
[01:25:42.200 --> 01:25:44.200]  как-то аккуратно построены.
[01:25:44.200 --> 01:25:46.200]  О господи.
[01:25:46.200 --> 01:25:48.200]  А его можно использовать?
[01:25:48.200 --> 01:25:50.200]  Наверное, можно.
[01:25:50.200 --> 01:25:52.200]  Нет, ну я не знаю,
[01:25:52.200 --> 01:25:54.200]  с точки зрения практики, как бы есть алгоритм
[01:25:54.200 --> 01:25:56.200]  Чизеля на основе софтхипа.
[01:25:56.200 --> 01:25:58.200]  Который работает за Е
[01:25:58.200 --> 01:26:00.200]  на обратную функцию атервана.
[01:26:00.200 --> 01:26:02.200]  Очень-очень круто, вау.
[01:26:02.200 --> 01:26:04.200]  Точно да.
[01:26:04.200 --> 01:26:06.200]  Хотелось бы его изучить,
[01:26:06.200 --> 01:26:08.200]  а то зачем мы софтхип изучали.
[01:26:10.200 --> 01:26:12.200]  Вот.
[01:26:12.200 --> 01:26:14.200]  Так что это вот что хотелось сказать
[01:26:14.200 --> 01:26:16.200]  о концепции плотивающих поток.
[01:26:16.200 --> 01:26:18.200]  Хотя, конечно, оно вот.
[01:26:18.200 --> 01:26:20.200]  Ну, как вы сказали, это один метод.
[01:26:20.200 --> 01:26:22.200]  У нас будет альтеркотинная концепция.
[01:26:22.200 --> 01:26:24.200]  Концепция известного уже
[01:26:24.200 --> 01:26:26.200]  полюбившегося нам американского математика
[01:26:26.200 --> 01:26:28.200]  Эндрюга Чеснаупера.
[01:26:28.200 --> 01:26:30.200]  Обожаю его.
[01:26:30.200 --> 01:26:32.200]  Да, его так зовут.
[01:26:32.200 --> 01:26:34.200]  Принципиально другая концепция.
[01:26:34.200 --> 01:26:36.200]  Просто вообще принципиально другая.
[01:26:36.200 --> 01:26:38.200]  Но, правда, я выяснил это, может быть, не сегодня.
[01:26:38.200 --> 01:26:40.200]  Да, это точно не сегодня.
[01:26:40.200 --> 01:26:42.200]  Потому что сегодня мы поговорим про целочисленные сети
[01:26:42.200 --> 01:26:44.200]  на втором занятии.
[01:26:44.200 --> 01:26:46.200]  И про то, почему алгоритм денется
[01:26:46.200 --> 01:26:48.200]  на самом деле в целочисленных сетах,
[01:26:48.200 --> 01:26:50.200]  потому что он работает быстрее, чем В квадрат Е
[01:26:50.200 --> 01:26:52.200]  может вам намекать.
