[00:00.000 --> 00:19.000]  У нас сегодня две вещи в плане. Во-первых, это проверка принадлежности точки многоугольнику и, во-вторых, это перещание полуплоскостей.
[00:19.000 --> 00:29.000]  Ну, сначала принадлежность точки многоугольнику.
[00:30.000 --> 00:39.000]  Вообще говоря, если формально что-то пытаться доказывать, то нужна такая лемма.
[00:40.000 --> 00:43.000]  Лемма Жардана.
[00:44.000 --> 00:52.000]  Которая, грубо говоря, говорит примерно следующее, что если у вас есть многоугольник какой-то, то он разбивает плоскость на два куска, то что внутри и то что вне.
[00:52.000 --> 01:10.000]  Ну, соответственно, лемма какая-то такая, что если у вас есть простая, замкнутая, ломаная, ну, наверное, даже кривой достаточно, но в нашем случае будет ломаная конечно, без сам пересечений.
[01:10.000 --> 01:26.000]  Вот, то тогда она разбивает плоскость на две части, как бы то, что, ну, конечная часть, то, что мы социруем с тем, что находится внутри гаммы, и внешняя.
[01:41.000 --> 01:44.000]  Вот.
[01:45.000 --> 01:52.000]  Ну, и мы как бы в каком-то смысле не явно будем ей пользоваться, что вот типа есть многоугольник, что такое вообще внутри.
[01:53.000 --> 02:01.000]  Ну, вот типа у вас плоскость как-то разбивалась на два куска, если вы какой-то многоугольник построили, то что внутри, это как бы, точнее, одна часть, а то что внутри и все остальное снаружи.
[02:02.000 --> 02:08.000]  Вот, ну и надо соответственно понять, попадает ли какая-то заданная точка внутрь этого многоугольника, внутрь или на границу.
[02:09.000 --> 02:10.000]  Вот.
[02:11.000 --> 02:15.000]  Значит, первое, что мы сделаем, это проверим, не лежит ли точка на границе.
[02:16.000 --> 02:22.000]  Ну, это делать просто, надо просто пробежаться по всем сторонам и проверить, лежит ли точка на отрезке.
[02:23.000 --> 02:24.000]  Это там вроде какая-то простая задача.
[02:25.000 --> 02:28.000]  Значит, первое, что мы всегда делаем, это проверка того, что точка лежит на границе.
[02:39.000 --> 02:44.000]  Вот, после этого мы можем предполагать, что точка либо строго внутри, либо строго снаружи.
[02:45.000 --> 02:53.000]  И так будет нам рассуждать удобнее, что мы отбрасываем случай, когда точка где-то на границе, значит либо внутри, либо снаружи строго.
[02:54.000 --> 02:58.000]  Вот, ну тут есть несколько способов, давайте их все быстренько обсудим.
[02:59.000 --> 03:03.000]  Значит, способ первый через ориентированные углы.
[03:08.000 --> 03:09.000]  Вот.
[03:10.000 --> 03:12.000]  Значит, давайте мы как-нибудь ориентироваем наш многоугольник.
[03:15.000 --> 03:17.000]  То есть, чтобы его вершины были в каком-то порядке.
[03:18.000 --> 03:23.000]  На самом деле, не важно в каком, просто у нас есть какая-то последовательность вершин на вот это ломанное, в порядке их обхода.
[03:24.000 --> 03:31.000]  Ну и давайте просто из этой точки будем проводить векторы во все соседние вершины.
[03:31.000 --> 03:37.000]  И мерить ориентированный угол, под которым мы видим вот эту сторону v и v плюс один.
[03:38.000 --> 03:42.000]  Значит, померим такой угол, померим такой угол, померим такой угол и так далее.
[03:43.000 --> 03:47.000]  И вот одождается, что если сумма этих углов отлична от нуля, значит мы внутри иначе снаружи.
[03:47.000 --> 03:57.000]  Значит, считаем сумму ориентированных углов на все стороны v и v плюс один.
[03:58.000 --> 04:05.000]  Если сумма равна нулю, то точка вне, иначе внутри.
[04:05.000 --> 04:15.000]  А? Да нет, вроде правильно. Если ноль, то снаружи. Вне, то есть снаружи.
[04:18.000 --> 04:23.000]  Не, это как раз соответствует тому слушаю, что у вас есть точка, давайте для простыты вычислим.
[04:23.000 --> 04:28.000]  И вы представьте, вы стоите здесь, и вы смотрите под какими углами вам видны вот эти вот векторы.
[04:29.000 --> 04:32.000]  Отсюда видно вот под таким углом. Потом еще вот под таким.
[04:33.000 --> 04:37.000]  Потом вы начинаете в другую сторону крутиться. Следующая сторона видна вот под таким углом.
[04:38.000 --> 04:41.000]  Потом вот под таким еще минус, и вот по таким еще минус.
[04:42.000 --> 04:44.000]  И вы видите, что у вас есть точка.
[04:44.000 --> 04:47.000]  Потом еще вот под таким. Потом вы начинаете в другую сторону крутиться.
[04:48.000 --> 04:50.000]  Следующая сторона видна вот под таким углом.
[04:51.000 --> 04:53.000]  Потом вот под таким еще минус, и вот по таким еще минус.
[04:54.000 --> 04:56.000]  В итоге сумма как раз в ноль превратилась.
[04:57.000 --> 05:03.000]  А если вы были внутри, то, ну как бы вот представьте, я стою внутри какого-то там, представь, что это какая-то комната или лабиринт.
[05:04.000 --> 05:07.000]  Я смотрю на все его стороны вот с такого порядка, типа вращаюсь и смотрю на стороны.
[05:08.000 --> 05:11.000]  Если там вижу какой-то изгиб, то я немножко назад, потом в обратную сторону кручусь.
[05:11.000 --> 05:14.000]  Ну и так, чтобы мне все просмотреть, мне нужен как раз угол 2p, скорее всего.
[05:15.000 --> 05:19.000]  Ну либо плюс 2p, либо минус 2p, чтобы все стороны посмотреть.
[05:20.000 --> 05:21.000]  Ну вот.
[05:22.000 --> 05:32.000]  Ну да, но на самом деле не очень большая, потому что вам надо сравнивать, как бы у вас значение, либо ноль, либо оно хотя бы 2p по модулю.
[05:33.000 --> 05:36.000]  И это все-таки, ну там, очень сильно отличающаяся величина.
[05:36.000 --> 05:40.000]  Скорее всего, вы не сможете накопить такую огромную погрешность, что 0 и 2p не сможете отличить.
[05:41.000 --> 05:43.000]  Так что, скорее всего, это не проблема.
[05:44.000 --> 05:47.000]  Но в целом, да, как бы тут нужна тригонометрия, нужно извлекать углы.
[05:48.000 --> 05:57.000]  Кстати, напомню, что если у вас есть какой-то угол, вы хотите понять его величину, то лучше всего, точнее всего, через атан-2 это делать.
[05:58.000 --> 06:06.000]  Если у вас есть вектор u, вектор v, то можно найти этот угол, как атан-2 векторное произведение, запятая скалярное произведение.
[06:13.000 --> 06:14.000]  Вот это вектор иноцикулярный.
[06:17.000 --> 06:23.000]  Типа это наиболее точный способ извлечения угла по двум вот этим вот векторам направляющим.
[06:24.000 --> 06:29.000]  Вот. Ну можно еще здесь дописать букву l, если вы все в лонг и дабл делаете, тогда будет еще точнее.
[06:30.000 --> 06:32.000]  Но обычно это не особенно важно.
[06:34.000 --> 06:35.000]  Вот, понятная идея?
[06:37.000 --> 06:38.000]  Доказывать не умею.
[06:39.000 --> 06:40.000]  И вам не сводить.
[06:41.000 --> 06:42.000]  Не, что это корректно.
[06:43.000 --> 06:47.000]  Ну типа, почему если мы вне, то внедапно сумма углов ноль, а иначе не ноль?
[06:48.000 --> 06:49.000]  Определение чего?
[06:50.000 --> 06:51.000]  Ну я бы не сказал.
[06:51.000 --> 06:52.000]  Да бог узнает.
[06:55.000 --> 06:59.000]  Ну тогда все остальные надо будет передоказывать в этих терминах. Не хотелось бы.
[07:00.000 --> 07:03.000]  Правда ли, что мы сейчас на доске показали там атан-2, а просто угол не ориентированный?
[07:04.000 --> 07:05.000]  Нет, ориентированный именно, ориентированный.
[07:06.000 --> 07:07.000]  А, ну да, потому что да.
[07:08.000 --> 07:09.000]  Ориентированный.
[07:10.000 --> 07:11.000]  Все очевидно.
[07:12.000 --> 07:15.000]  Вот, хорошо. Ну понятно, проблема, проблема, что здесь тригонометрия.
[07:16.000 --> 07:20.000]  Может это работает чуть-чуть дольше, чем хотелось бы, потому что тригонометрические функции довольно тяжеловесные.
[07:21.000 --> 07:22.000]  Вот.
[07:22.000 --> 07:23.000]  А давайте другой способ.
[07:24.000 --> 07:26.000]  Значит, давайте дальше считать, что у меня все в целых числах.
[07:27.000 --> 07:28.000]  Значит, здесь и далее.
[07:30.000 --> 07:31.000]  Координаты это целые числа.
[07:34.000 --> 07:38.000]  Координаты всех точек целые.
[07:46.000 --> 07:50.000]  Вот. Ну и давайте скажем, что у меня все лежит в каком-нибудь большом квадрате.
[07:51.000 --> 07:59.000]  Например, все внутри какого-нибудь большого квадрата 0а.
[08:07.000 --> 08:12.000]  То есть при необходимости мы можем наш многоугольник и точку сдвинуть параллельно, так чтобы они все попали в первый квадрант.
[08:12.000 --> 08:18.000]  Ну и если у нас есть какое-то ограничение на координаты, то мы можем взять достаточно большой а, чтобы все лежало вот в таком вот квадратике большом.
[08:21.000 --> 08:24.000]  Значит, здесь у вас и многоугольник, и точка.
[08:26.000 --> 08:27.000]  Вот.
[08:28.000 --> 08:31.000]  Но идея такая, что давайте мы из этой точки выпустим какой-нибудь луч.
[08:34.000 --> 08:37.000]  И посчитаем количество пересечений его с границей многоугольника.
[08:38.000 --> 08:39.000]  С нашей ломаной гамма.
[08:39.000 --> 08:40.000]  Вот.
[08:41.000 --> 08:45.000]  Тогда понятно, что, ну в хорошем случае, нечетность количества пересечений.
[08:46.000 --> 08:49.000]  Значит, что мы были изначально внутри, чётность значит, что мы были изначально снаружи.
[08:50.000 --> 08:54.000]  А скажем, здесь у меня одна точка пересечения, где-нибудь здесь было бы, видимо три.
[08:55.000 --> 08:56.000]  Вот они 1, 2, 3.
[08:57.000 --> 08:58.000]  Где-нибудь здесь было бы 4.
[08:59.000 --> 09:00.000]  1, 2, 3, 4.
[09:01.000 --> 09:06.000]  Значит, внутри нечетная,
[09:07.000 --> 09:08.000]  внутри нечетная
[09:09.000 --> 09:10.440]  вне
[09:10.440 --> 09:13.660]  чертная. Это как раз более-менее следует из леммы, что
[09:14.400 --> 09:19.240]  если вы были внутри, то чтобы вы выйдите за границу вам надо нечетное количество раз
[09:19.240 --> 09:21.320]  Каждое прещение это либо выход, либо вход
[09:21.680 --> 09:25.780]  чтобы выйти, вам надо, нечетное количество раз, изменить текущую область, в которой вы находитесь
[09:26.600 --> 09:31.680]  А если вы были изначально вне, чтобы идти на бесконечности, оказываться опять вне
[09:31.860 --> 09:35.860]  то нужно четное количество раз смениться. Вошли-вышли, вошли-вышли, какое-то количество раз
[09:35.860 --> 09:39.620]  Вот, ну, значит, давайте просто пустим какой-то луч, посчитаем
[09:39.620 --> 09:42.420]  число пересечений с границы ногогольника, со стороны
[09:42.420 --> 09:44.660]  ногогольника и посчитаем его отчетность.
[09:44.660 --> 09:52.860]  Вот, в случае, когда у меня координаты вот такие,
[09:52.860 --> 09:53.860]  можно пустить луч.
[09:53.860 --> 09:58.180]  Значит, давайте скажем, что пустим луч с направляющим
[09:58.180 --> 10:03.940]  вектором, ну, например, а, а плюс один.
[10:03.940 --> 10:09.260]  То есть, из всех таких лучей, которые можно было бы пустить,
[10:09.260 --> 10:11.100]  я опускаю, ну, примерно, вот, какой-то вот такой вот.
[10:11.100 --> 10:18.100]  Ну, то есть, это была точка п, это будет точка п плюс
[10:18.100 --> 10:19.100]  а, а плюс один.
[10:19.100 --> 10:24.440]  Вот, этот луч хорош тем, что, во-первых, его конец
[10:24.440 --> 10:27.740]  гарантированно лежит за пределами квадрата, во-вторых,
[10:27.860 --> 10:30.220]  на этом отрезке никаких других целых точек нету.
[10:30.220 --> 10:36.860]  На отрезке вот, ну, в общем, на вот этом вот отрезке,
[10:36.860 --> 10:40.500]  если в нуле его нарисовать, то от нуля до а плюс один
[10:40.500 --> 10:41.500]  никаких других целых точек нету.
[10:41.500 --> 10:43.580]  Ну, потому что нам надо, чтобы выполнялось вот такое
[10:43.580 --> 10:46.780]  соотношение на x, y, а плюс один делить на а, никакой
[10:46.780 --> 10:48.900]  другой целой точки с такими кронатами там нет.
[10:48.900 --> 10:52.020]  Вот, значит, в частности тогда на этом луче нет никаких
[10:52.020 --> 11:00.700]  других целых точек, в частности, нет вершин. На таком луче нет вершин на
[11:00.700 --> 11:10.820]  долгольниках. Вот, а значит нам достаточно просто попересекаться сторонами и будет
[11:10.820 --> 11:14.380]  все хорошо. То есть как раз не будет вот таких проблем, как например было бы, если
[11:14.380 --> 11:25.780]  бы мы через вершины проходили. Давайте нарисую. С вершинами сходу непонятно, как их
[11:25.780 --> 11:33.820]  учитывать, потому что, например, если бы у меня картинка какая-нибудь была вот такая, ну и луч
[11:33.820 --> 11:39.380]  проходит через вершину, то ну непонятно это учитывать, как пересечение с границы или нет. В этом
[11:39.380 --> 11:49.140]  случае надо учесть, как пересечение. А скажем, вот в таком случае мне эту вершину не надо было бы
[11:49.140 --> 11:54.500]  учитывать, как пересечение. То есть казалось бы и то и то вершина, и там и там формально я с границы,
[11:54.500 --> 11:59.660]  ну как бы с отрезками пересекаюсь дважды, что здесь две стороны, то что здесь две стороны. Но
[11:59.660 --> 12:04.260]  здесь ее надо учитывать и здесь не надо, потому что как бы здесь я не меняю свою внутренность
[12:04.260 --> 12:10.500]  относительно многоугольника. Вот, поэтому с вершинами проблемы, но если мы пустим хороший луч,
[12:10.500 --> 12:15.580]  то таких проблем не будет и у меня пересечение, если и будут со сторонами, то только по внутренности
[12:15.580 --> 12:21.180]  сторон, то есть я вершины затрагивать не буду. Поэтому дальше надо будет просто пересечь там вот
[12:21.180 --> 12:27.020]  этот луч или вообще говорю просто отрезок вот этот вот со всеми сторонами. Вот, и там не будет
[12:27.020 --> 12:30.780]  проблем с тем, что мы попадаем на вершину, надо просто проверить пересекаются ли два отрезка,
[12:30.780 --> 12:40.220]  если пересекаются сделать плюс один к счетчику. Вот, ну вроде все. Цио-численность ну для того,
[12:40.220 --> 12:48.700]  чтобы мы через вершины не проходили, да. Да, значит в итоге мы просто проверяем,
[12:48.780 --> 13:08.780]  считаем количество пересечений отрезка ну вот это вот от п до конца п плюс а плюс один со всеми
[13:08.780 --> 13:21.700]  сторонами. Вот, ну а проверка пересекаемости двух целоческих отрезков это какая-то стандартная
[13:21.700 --> 13:38.060]  задача, которую должны уметь делать. Еще раз. Вот сейчас мы как раз будем разбираться вот
[13:38.060 --> 13:48.460]  эти случаи сейчас будем все разбираться, как тут правильно все это учитывать. Вот,
[13:48.460 --> 13:54.420]  значит последний способ, который не боится разобраться с тем, что происходит в случае,
[13:54.420 --> 13:59.580]  когда мы пересекаемся по вершине, и просто аккуратно все эти случаи разбирается. Значит он
[13:59.580 --> 14:06.460]  получается на самом деле даже короче чем все остальное с точки зрения кода, но более такой
[14:06.460 --> 14:13.020]  умный скажем. Значит способ третий давайте вместо вот такого луча пускать просто горизонтальный,
[14:13.020 --> 14:30.940]  просто горизонтальный направо. Так вот такая рыбка у меня получилась. Ну и вот какой-то такой
[14:30.940 --> 14:36.500]  вектор я пускаю. Опять хотелось бы посчитать сло точек пересечения и понять лежим мы внутри
[14:36.500 --> 14:42.340]  или вне. Вот, но здесь мы уже спокойно можем проходить через вершины и давайте поймем что с
[14:42.340 --> 14:53.300]  этим делать. Ну давайте ведем какой-нибудь счетчик. Сколько раз мы пересекаем границу и давайте
[14:53.300 --> 15:08.900]  скажем, что пусть AB это очередная сторона, пусть AB очередная сторона. Значит давайте мы переставим
[15:08.900 --> 15:17.140]  концы так, чтобы A точка Y было меньше равном B точка Y. То есть A лежало ниже чем B. Ну то есть
[15:17.140 --> 15:21.380]  если у нас есть такой вектор, мы можем переставить концы, от этого отрезок останется, но мы можем без
[15:21.380 --> 15:30.540]  ограничений общности считать, что первый конец у нас лежит ниже второго. Значит сделаем следующее,
[15:30.540 --> 15:39.740]  что если мы лежим, значит если наш весь отрезок лежит строго выше чем точка P, значит вот это P,
[15:39.740 --> 15:47.260]  вот это какой-то отрезок AB. Если A точка Y больше P точка Y или B точка Y меньше равно P точка Y,
[15:47.260 --> 15:57.460]  то я сделаю континью. Я такие отрезки буду игнорировать, то есть я считаю, что они не вносят вкладов
[15:57.460 --> 16:04.580]  пересечения. Почему? Ну первый случай это вот такой, что вот у меня была точка P, раз A точка Y больше
[16:04.580 --> 16:12.700]  P точка Y, AB точка Y еще больше, значит у меня весь отрезок строго выше лежит. Понятно, что он не дает
[16:12.700 --> 16:19.120]  пересечения. Это первый случай, когда A точка Y больше чем P точка Y, а она выше. Второй случай здесь неравенство не
[16:19.120 --> 16:26.560]  строгое, мы считаем, что если у меня картина какая-то вот такая, то будем считать, что эта штука не дает
[16:26.560 --> 16:32.300]  пересечения. То есть в каком-то смысле, да, здесь пересечения есть, но если она, если другая
[16:32.300 --> 16:36.520]  сторона вот такая, то я тогда это пересечение буду считывать вот для этой стороны, а не вот для этой.
[16:36.520 --> 16:41.020]  ну просто так договоримся что как бы понятно здесь возникает пересечение но
[16:41.020 --> 16:46.280]  тогда эта точка лежит на границе в смысле на луче и мы ее учтем в другом
[16:46.280 --> 16:51.400]  отрезке если нужно поэтому в этом случае мы просто скипнем вот а иначе
[16:51.400 --> 16:55.760]  если мы не скипнули то давайте просто проверим пересекается ли луч и отрезок
[16:55.760 --> 17:03.000]  если пересекается увеличим счетчик на 1 как проверить пересекаются они или нет
[17:03.000 --> 17:13.200]  ну в нормальном случае пересечение это что-то вот такое да как-то можно легко
[17:13.200 --> 17:20.400]  проверить ну можно например нарисовать вектор из а в п и из а в б и тогда утверждаю что
[17:20.400 --> 17:27.000]  наличие пересечения равносильно тому что вот такой вот поворот идет по часовой стрелке
[17:27.000 --> 17:37.320]  ну то есть что чтобы нам чтобы отрезок пересекался с лучом мне нужно как раз да
[17:37.320 --> 17:44.240]  чтобы чтобы из точки а п виднелось левее чем б только в этом случае будет пересечение вот
[17:44.240 --> 17:51.440]  ну соответственно давайте так и напишем что если векторное произведение а минус п и
[17:52.040 --> 18:01.840]  и б минус п б минуса продон на если вот такой вот вектор угол точнее по часовой то есть меньше
[18:01.840 --> 18:08.920]  равно нуля тогда я делаю плюс плюс кн т ну и в конце если кн т нечетно то значит внутри иначе снаружи
[18:08.920 --> 18:27.000]  да извините по минусам по минусам по минусам
[18:27.000 --> 18:34.200]  все весь код
[18:34.200 --> 18:48.600]  весь код значит же что он работает давайте попробуем понять почему
[18:48.600 --> 18:58.760]  ну смотрите все те стороны которые находятся для которых а и б по разные стороны вот нашей
[18:58.760 --> 19:04.080]  прямой от нашего луча мы их правильно учтем то есть пересечение нормальный пересечения со
[19:04.080 --> 19:08.160]  сторонами которые не через вершины проходит там все нормально нам вот это вот условия в точности
[19:08.160 --> 19:14.480]  проверяет что луч пересекает отрезок нам осталось только с вершинами надо понять
[19:14.480 --> 19:20.600]  что если мы как-то внезапно прошли через вершины если луч прошел через вершину то мы ее правильно
[19:20.600 --> 19:29.600]  учтем давайте порисуем картинки всякие значит как например может наша вершина находиться на
[19:29.600 --> 19:42.520]  луче ну может могут быть какие-то такие вот ситуации и наугольник где-то вот здесь может
[19:42.560 --> 19:52.800]  быть такая ситуация наугольник где-то там может быть вот такая ситуация наугольник здесь такая
[19:52.800 --> 20:10.440]  ситуация наугольник здесь и еще отрезки напрямой тоже может быть да значит отрезок напрямой и
[20:11.400 --> 20:16.760]  и наугольник где-то вы ну и как бы где-то вот так вот он либо то же самое ниже
[20:16.760 --> 20:29.120]  да ну короче тут много случаев на самом деле конечно то есть наугольник чем может быть вот такой
[20:29.120 --> 20:40.840]  так ну эти два симметрично давайте это сотру осталось еще когда у меня вот эти вот
[20:40.840 --> 20:48.720]  стороны да они не симметричны но да я понял давайте пока скрипнем ладно
[20:48.720 --> 21:00.320]  вот ну короче какие-то вот в общем давайте такие посмотрим я отрешусь на всех все будет
[21:00.320 --> 21:09.920]  хорошо да ну смотрите значит короче вот утверждается что если вы все возможные способы
[21:09.920 --> 21:17.520]  лежание точки на ну вершины на на луче нарисуйте то вы короче все правильно обработать но давайте
[21:17.520 --> 21:28.240]  что-то посмотрим значит вот например вот такой случай тогда что произойдет тогда мы кажется
[21:28.240 --> 21:36.840]  обе учтем потому что у меня обе вот эти стороны не скипнутся вот это не выполняется это не
[21:36.840 --> 21:42.200]  выполняется и обе пересекают луч поэтому здесь будет плюс один здесь будет плюс один и в итоге
[21:42.200 --> 21:48.800]  да ну как бы считаем что это вошли и вышли по факту мы остались внутри все хорошо здесь тут
[21:48.800 --> 21:54.600]  все тоже самое да у меня такие же две стороны мы считаем что плюс один каждый из них дает только
[21:54.600 --> 21:59.960]  бы тоже вошли вышли и по факту ничего не изменилось как и надо там и как бы по касательно
[21:59.960 --> 22:04.260]  заделен наугольник и вышли из него хорошо тут тут не изменилось как бы количестве пересечений
[22:04.260 --> 22:09.200]  здесь верхняя сторона даст плюс 1 а вторую мы проигнорием потому что она как раз вот такого
[22:09.200 --> 22:15.820]  типа на что она не строго ниже луча поэтому мы ее скипнем и как раз у меня будет плюс один как
[22:15.820 --> 22:20.720]  и надо я вышел из многоугольник ну как раз у меня добавил добавил с одной перчатки тут все хорошо
[22:20.720 --> 22:26.200]  здесь то же самое здесь будет плюс один здесь будет 0 нижнюю сторону я скипаю это как раз как и
[22:26.200 --> 22:36.120]  надо я схожу в многоугольник делаю плюс один вот здесь что происходит со стороной лежащей на
[22:36.120 --> 22:43.320]  луче я ее скипаю сама сторона сторона сама по себе ничего не дает потому что это отрезок вот
[22:43.320 --> 22:48.920]  такого типа да когда б.у меньше но п.у значит сами стороны вот здесь вот лежащие на луче
[22:48.920 --> 22:56.840]  ничего никакого вклада не внесут вот а в остальном вот эти вот соседние стороны исходящие из этих
[22:56.840 --> 23:01.600]  машинок они ведутся также как на той доске то есть в этом случае вы дадите плюс один плюс один и
[23:01.620 --> 23:07.180]  как раз по касательно задеваете многоугольник здесь у вас будет это проигнорится потому
[23:07.180 --> 23:11.760]  что вот этот случай здесь будет плюс один и как раз как надо до у вас при проходе вдоль
[23:11.760 --> 23:17.800]  стороны вы выходите из многоугольника как раз нечетности ну чет Lift на один поменялось здесь
[23:17.800 --> 23:26.540]  оба плюс один как и надо вы были внутри остались внутри здесь это плюс один это 0 надо плюс 1 ну как
[23:26.540 --> 23:32.340]  потому что вы были вне, а зашли внутрь. Ну вот, все остальные случаи там, если надо,
[23:32.340 --> 23:45.260]  также разбираюсь. То есть, если мы нарисуем вот так вот, и что еще? И вот так вот, да?
[23:45.260 --> 23:54.140]  Ну, короче, что бы ни рисовали, все будет нормально, обещаю. Вот.
[23:56.540 --> 24:12.820]  Не знаю. Думаю, что нет. Вот. То есть, смотрите, кода-то совсем мало. У нас есть просто цикл
[24:12.820 --> 24:17.580]  по сторонам. Мы смотрим на сторону АВ, если надо, переставляем концы так, чтобы выполнилось
[24:17.580 --> 24:24.020]  неравенство. Потом IF и IF, и все. И в конце, в конце меряем просто четность количества. Четность
[24:24.020 --> 24:33.380]  контейнта. Еще раз? Нигде не пользуемся. Ну, в каком-то смысле, да, но тогда вот эти вот все
[24:33.380 --> 24:37.660]  неравенства надо было бы делать с погрешностью. Ну, в целом, да.
[24:37.660 --> 24:51.140]  Еще раз, в общем случае, ничего не страхует?
[24:51.140 --> 25:08.060]  Ну, да. Ну, окей, я согласен с тем, что этот способ годится, получается, даже для не целых,
[25:08.060 --> 25:14.860]  для не целочисленных. Но, ну, типа, тут надо тогда править вот эти все, все неравенства с
[25:14.860 --> 25:25.900]  погрешностью. Ну, в целом, да. Да, потому что вот здесь вот эта проверка сработает.
[25:25.900 --> 25:45.820]  Так. Можно рандомный пускать. Ну, типа, если пустите рандомный, то с вероятностью 1,
[25:45.820 --> 25:52.700]  вы не попадете в вершину. Если он по-настоящему рандомный. Поэтому можно даже не думать об этом.
[25:52.700 --> 26:00.300]  Вот. Ну, вот тут на любителя, ну, как бы вот, не знаю, вот этот самый, самый короткий, скажем так.
[26:00.300 --> 26:14.140]  Все, можно дальше. Хорошо. Значит, ну, тогда давайте переходить к перечечению полуплоскостей.
[26:14.140 --> 26:34.340]  Задача очень простая. Вам даны на плоскости N полуплоскостей, задаваемых прямыми и какой-то
[26:34.340 --> 26:38.260]  из двух вот тех полуплоскостей, на которые она разбивает плоскость. Скажем, вот эта прямая и
[26:38.260 --> 26:42.380]  все, что лежит ниже нее, вот эта прямая и все, что вот здесь вот лежит, вот эта прямая и все,
[26:42.380 --> 26:46.980]  что там, ну и так далее. Какие-то вот такие вот у вас есть полуплоскости, вам надо их все пересечь.
[26:46.980 --> 26:53.060]  То есть найти фигуры пересечения. Буквально. Вам даны полуплоскости, найдите, найдите их
[26:53.060 --> 26:58.900]  пересечения. Опишите их пересечения. Как за эту полуплоскость? Давайте подумаем. Значит,
[26:58.900 --> 27:08.660]  я буду задавать их в таком виде. То есть у меня также будет три коэффициента, задающие уравнение
[27:08.660 --> 27:14.260]  прямой, а X плюс B, Y плюс C. И знак? И знак, больше или равно? Всегда больше или равно? Всегда
[27:14.260 --> 27:17.860]  больше или равно. Ну, потому что, как бы, если меньше или равно, то я могу все коэффициенты
[27:17.860 --> 27:22.660]  умножить на минус один и сделать больше или равно. Поэтому любую полуплоскость я могу задать таким
[27:22.660 --> 27:28.460]  образом. Это представление удобно, например, тем, что у вас как бы в полуплоскости лежит
[27:28.460 --> 27:35.500]  нормальный вектор прямой, AB. Вот если вы нависуете именно, что AB нормальный вектор, то он будет
[27:35.500 --> 27:41.740]  лежать ровно по ту же сторону, где точки имеют значение относительно прямой и не отрицательное.
[27:41.740 --> 27:50.820]  Вот такая задача. Есть набор полуплоскостей, вот так вот задаваемых, надо их пересечь,
[27:50.820 --> 27:55.100]  надо найти фигуру пересечения. Давайте подумаем, как она вообще может выглядеть. Что такое фигура
[27:55.100 --> 28:02.700]  пересечения, если у нас есть такая картинка? Ну, в хорошем случае, как вот в этом, например,
[28:03.380 --> 28:08.300]  это какой-то выпуклый многоугольник. Нет. У нас точно получится выпуклая фигура,
[28:08.300 --> 28:12.040]  потому что мы пересекаем выпуклое множество как минимум. Потому что каждая полуплоскость
[28:12.040 --> 28:17.700]  это выпуклая штука. И мы уже доказывали, что если у нас есть набор выпуклых,
[28:17.700 --> 28:21.300]  мы их пересекаем, получится выпуклое. Пересечения любого количества выпуклах – это
[28:21.300 --> 28:25.340]  выпуклое множество. Поэтому точно получится что-то выпуклое, причем с конечным количеством ст oath.
[28:25.340 --> 28:30.780]  Вот в таком нормальном случае будет многоугольник. Но бывают, конечно, всякие другие неприятности,
[28:30.780 --> 28:34.720]  например, у вас может получиться просто что-то не ОГРАНИЧЕННОЕ
[28:35.000 --> 28:37.000]  например если такие 3 полуплоскости пересечь
[28:37.000 --> 28:38.560]  то получишь вот такая вот чашка
[28:38.560 --> 28:40.100]  бесконечно растущая наверх
[28:41.620 --> 28:43.320]  либо может напротив получиться
[28:43.320 --> 28:45.320]  выраженный случай типа просто прямая
[28:45.600 --> 28:48.780]  если вы пересечете вот такую плоскость
[28:49.300 --> 28:52.260]  и вот такую полуплоскость, то пересечение будет прямое
[28:53.220 --> 28:55.340]  но аналогично, можно её ограничить на отрезок
[28:55.340 --> 28:57.340]  если вы вот так вот до пересечёте ещё
[28:57.340 --> 29:03.700]  даже на точку, если вы пересечете вот так вот, то есть всякие такие выраженные
[29:03.700 --> 29:12.860]  фигуры, прямая точка отрезок бывает, и еще бывает случай вот такой вот полосы, это
[29:12.860 --> 29:21.820]  единственный случай, когда граница не связана. Вот, но мы на самом деле не будем
[29:21.820 --> 29:32.740]  это и фать. Слава богу. Мы обойдемся следующим приемом. Давайте мы погрузим,
[29:32.740 --> 29:41.100]  точнее ограничиваем всю нашу плоскость каким-то большим квадратом, ну там, минус
[29:41.100 --> 29:45.500]  cc, грубо говоря. Давайте мы введем bounding box, ограничивающий какой-то квадрат,
[29:45.500 --> 29:57.380]  минус cc. Да, конечно. Всего можно задать в виде четырех ограничивающих полуплоскостей,
[29:57.380 --> 30:06.740]  что x больше либо равно, чем минус c, x меньше либо равно, чем c, и то же самое с y. Не очень квадрат,
[30:06.740 --> 30:16.500]  но неважно. Вот, тогда по крайней мере у меня причина точно будет конечным, потому что я
[30:16.500 --> 30:21.500]  ограничивался на конечную фигуру, еще дальше я как-то пересекаю, как-то от нее что-то отсекаю,
[30:21.500 --> 30:27.220]  понятно, что будет что-то конечное. Вот, ну и на самом деле, если c взять достаточно большим,
[30:27.220 --> 30:33.860]  то я смогу понять, я вот эти случаи тоже в каком-то смысле смогу отследить, что у меня когда фигура
[30:33.860 --> 30:39.820]  неограниченная. Что значит фигура неограниченная? Значит, при погружении ее в такой квадратик мы точно
[30:39.820 --> 30:46.340]  что-то из границы пересечем. Ну, например, вот если была такая чашка, то у меня вот там какая-то
[30:46.340 --> 30:51.900]  область границы bounding box попадет как границу многоугольника пересечения. Вот, ну и тогда,
[30:51.900 --> 30:55.700]  как бы, если надо, мы можем это отслеживать. То есть, если нам надо сказать, скажем, конечное
[30:55.700 --> 31:02.300]  пересечение или нет, мы можем понять, попала ли хотя бы какая-то из граничных точек на границу
[31:02.300 --> 31:06.860]  нашего многоугольника в пересечении. Если да, то значит у меня пересечение бесконечно.
[31:06.860 --> 31:16.060]  Да, ограниченное имеется в виду. Да, спасибо. Так лучше, конечно. Ограниченное, конечно, да.
[31:16.060 --> 31:27.260]  Еще раз? Когда пересечение за точка? Ну, c давайте дам побольше, чтобы была не точка, а отрезок.
[31:27.260 --> 31:42.660]  Вот, если я правильно понял. Ну да, ну тогда давайте c типа сделаем поменьше, чтобы пересечение было
[31:42.660 --> 31:49.500]  подальше. Вот, то есть, на самом деле, какое надо взять c? C надо взять таким, для которого заведомо
[31:49.500 --> 31:55.060]  все точки пересечения изначальных полуплоскостей, точнее прямых и задающих, лежат строго внутри
[31:55.060 --> 32:00.700]  вот этого квадрата. Тогда таких случаев как раз не будет. То есть, в идеале, c такое, что внутри
[32:00.700 --> 32:23.140]  bounding box лежат пересечения всех пар прямых задающих нашу полуплоскость. Вот, значит,
[32:23.140 --> 32:29.620]  ну, вообще говоря, если у вас изначальные координаты, значит, если известно, что,
[32:29.620 --> 32:37.140]  ну, например, в целочисленном случае, если у вас все координаты целые и, скажем, не происходит
[32:37.140 --> 32:43.980]  какой-то константы a по модулю, т.е. a это ограничение на все коэффициенты, на все координаты точек,
[32:43.980 --> 32:49.660]  да, то есть, если, скажем, у вас полуплоскости создаются точками, скажем, вот какими-то двумя
[32:49.660 --> 32:55.980]  точками и, что вот, полуплоскость проходящая через две точки и там по такую-то сторону от них. Вот
[32:55.980 --> 33:02.100]  если координаты точек задающих эту полуплоскость ограничены по модулю целым числом a, то c достаточно
[33:02.100 --> 33:07.660]  брать порядка в кубе. Вот, тогда можно показать, что пересечения как раз все попадут внутри,
[33:07.660 --> 33:18.500]  внутри нашего квадрата. Вот, но, на самом деле, многовато обычно, и на практике там обычно хватает
[33:18.500 --> 33:24.580]  c гораздо меньше. Вот, но, как бы, формально, строгая теоретическая оценка именно кубическая.
[33:24.580 --> 33:38.900]  Вот, ну хорошо. Теперь давайте считать, что мы живем в ограниченной вот такой коробочке,
[33:38.900 --> 33:45.780]  минус c по обеим координатам и нам надо ее пересечь по факту с какими-то другими
[33:45.780 --> 33:56.500]  полуплоскостями. Не, не будем, это на семинаре. Ну, типа, не будем доказывать и требовать тоже не будем.
[33:56.500 --> 34:07.700]  Так, ну вот, значит, тогда первый алгоритм за квадрат можно сразу написать.
[34:07.700 --> 34:17.260]  Значит, давайте изначально скажем, что наше текущее пересечение это наш bounding box,
[34:17.260 --> 34:24.100]  наш большой квадратик и просто давайте по одной полуплоскости вводить в рассмотрение и отсекать
[34:24.100 --> 34:37.140]  от текущего многоугольника то, что задает наша полуплоскость. Ну, скорее, скорее просто вернуть
[34:37.140 --> 34:42.620]  многоугольник или сказать, что фигура пересечения пустая, потому что если многоугольник, ну, а дальше
[34:42.620 --> 34:47.500]  пользователь сам уже поймет, если он, если многоугольник содержит границу bounding box,
[34:47.500 --> 34:54.460]  тогда он бесконечный и дальше делай сам что хочешь. Вот. Значит, еще раз, да, мы изначально
[34:54.460 --> 34:59.020]  храним bounding box и давайте по одной рассматривать полуплоскости и отсекать от нашего многоугольника
[34:59.020 --> 35:03.580]  то, что отсекается. Скажем, вот пришла такая полуплоскость, окей, мы отрезали вот это вот,
[35:03.580 --> 35:08.380]  теперь говорим, что вот это наш многоугольник. Пришла вот такая полуплоскость, что-то там отрезали,
[35:08.380 --> 35:16.580]  ограничили. Пришла вот такая, что-то отрезали, ограничили. Ну и так далее. Вот. Это делается за,
[35:16.580 --> 35:22.540]  ну, понятно, что у нас вершин будет линейное количество всегда у отн, вершин в нашем многоугольнике
[35:22.540 --> 35:28.060]  будет у отн и тогда как это сделать? Ну, когда приходит новая полуплоскость, давайте пересечем
[35:28.060 --> 35:33.580]  просто ее со всеми сторонами текущего многоугольника, поймем вот те самые точки пересечения, где новая
[35:33.580 --> 35:39.100]  полуплоскость пересекается со старым многоугольником. Вот. Соответственно, она разбивает многоугольник,
[35:39.100 --> 35:43.700]  в общем случае, на две части. По одну полуплоскость, по другую. Ну и надо оставить ту из них,
[35:43.700 --> 35:51.140]  которая лежит по нужную сторону. Пересекли, отрезали и сбросили все, что лежало вне полуплоскости.
[35:51.140 --> 35:57.380]  Вот. Это будет квадрат, потому что для каждой из n полуплоскостей мы пересекаем с предыдущими n,
[35:57.380 --> 36:01.460]  по факту находим точки пересечения и отбрасываем какую-то половину.
[36:01.460 --> 36:15.620]  Значит, давайте что-то напишем. Начинаем с bounding box. По одной рассматриваем полуплоскости,
[36:15.620 --> 36:34.260]  пересекаем с текущим многоугольником. Оставляем ту из частей, которая лежит внутри полуплоскости.
[36:45.620 --> 37:11.820]  Так. Согласны?
[37:11.820 --> 37:20.020]  Вот. Ну, естественно, там бывают всякие крайние случаи, когда, например, когда полуплоскость
[37:20.020 --> 37:24.620]  вообще не пересекается и, скажем, все и так лежит в полуплоскости, тогда мы ее просто игнорируем.
[37:24.620 --> 37:30.420]  Либо же наоборот пришла полуплоскость, в которой же это условие не пересекаешься со старым
[37:30.420 --> 37:33.740]  многоугольником. Тогда мы сразу говорим, что пересечение пусто и завершаемся. Больше
[37:33.740 --> 37:37.980]  нам рассматривать нечего. Иначе она как-то там содержательно пересекается и надо оставить одну
[37:37.980 --> 37:47.380]  из двух частей. Вот. Ну и поскольку такой алгоритм бывает иногда полезен, что как бы вот этот
[37:47.380 --> 37:52.300]  квадротичный вполне себе по времени будет удовлетворителен, давайте мы немножко подробнее
[37:52.300 --> 37:57.820]  посмотрим, как вот это пересекать. Точнее, что происходит, когда ввожу новую прямую,
[37:57.820 --> 38:04.940]  какую из двух частей оставить. Ну что, давайте быстро, значит, вот про этот алгоритм я скажу,
[38:04.940 --> 38:10.500]  как его хорошо реализовать можно. Значит, смотрите, мы будем хранить текущий многоугольник,
[38:10.500 --> 38:17.740]  как пассент с вершин. В1, В2, В3 и так далее, как обычно, вплоть до кунтика. Приходит новая
[38:17.740 --> 38:23.420]  полуплоскость, скажем, ошитое. Вот пришла новая полуплоскость, ошитое. А, что слово half plane,
[38:23.420 --> 38:29.300]  полуплоскость. Значит, делаем триральной проверкой, что если все вершины лежат внутри
[38:29.300 --> 38:34.300]  полуплоскости, то мы ее просто игнорируем, потому что они дают новых ограничений. Это вот этот случай.
[38:34.300 --> 38:40.020]  Вторая проверка, если, наоборот, все точки лежат вне полуплоскости, то ответ пустое множество.
[38:40.020 --> 38:49.260]  Иначе давайте мы заведем кунти вектор ответа, куда будем скидывать вершины нового многоугольника.
[38:49.260 --> 39:01.220]  Вектор вершин нового многоугольника. Вот, и давайте в цикле по всем старым сторонам многоугольника,
[39:01.220 --> 39:08.540]  вот давайте, пусть у меня есть сторона v и v плюс один. Давайте поймем, какие новые вершины надо добавить в ans,
[39:08.540 --> 39:17.540]  когда мы рассматриваем очередную сторону. Значит, ну, тут будет четыре случая. Если обе точки лежат в
[39:17.540 --> 39:25.340]  полуплоскости, тогда давайте мы в ans pushback-нем только вторую точку, вторую вершину. Так,
[39:25.340 --> 39:44.020]  если я буду писать pb вместо pushback, вы меня убьете? Черт. Ладно, так, второй случай. Что? Я на
[39:44.020 --> 39:49.820]  доске пишу, а не в контесте. Неважно, значит, если первая не лежала, вторая лежит, то смотрите,
[39:49.820 --> 39:57.220]  значит у меня сторона пересекает прямую задающую полуплоскость, потому что одна вершина по
[39:57.220 --> 40:01.860]  одну сторону, другая по другую. Значит, мы переходим между полуплоскостями, мы точно пересекаем
[40:01.860 --> 40:08.260]  полуплоскость. Вот есть какая-то точка пересечения v и v плюс один и прямой задающий нашу полуплоскость.
[40:08.260 --> 40:14.460]  То есть, картинка какая-то такая. Но давайте скажем, что q – это точка пересечения h и t, а,
[40:14.460 --> 40:23.820]  perdон, ну, h маленькая, давайте, h маленькая – это наша полуплоскость. Полуплоскость,
[40:23.820 --> 40:31.260]  которую мы сейчас рассматриваем. Значит, в этом случае я и q и v плюс один добавлю в ответ.
[40:31.260 --> 40:54.340]  Какой я сейчас злой. Третья ситуация, когда у меня, наоборот, предыдущий конец лежал,
[40:54.340 --> 40:59.260]  а новый не лежит, тогда опять есть точка пересечения. И давайте в этом случае мы добавим только ее.
[40:59.260 --> 41:13.540]  Так, ну и последний, когда обе не лежат. Правильно, когда обе не лежат, то делать ничего не надо.
[41:13.540 --> 41:28.900]  Ничего. Вот. Если мы так сделаем, то в конце будет лежать последовательность
[41:28.900 --> 41:35.420]  вершин на многоугольнике, в правильном порядке. Ну, вот здесь, например, почему я игнорирую,
[41:35.420 --> 41:42.260]  когда я рассматриваю две вершины и обе лежат по правильную сторону, я игнорирую первую из них,
[41:42.260 --> 41:47.020]  я игнорирую первую. В it и игнорирую добавляю только v и плюс первую. Ну, потому что я как раз считаю,
[41:47.020 --> 41:52.460]  что в ans у меня, если надо, v и it уже лежит. То есть, я перебираю стороны, it и плюс первую,
[41:52.460 --> 41:56.380]  плюс вторая и так далее. И если надо, у меня предыдущая вершина, последняя вершина прошлого
[41:56.380 --> 42:01.140]  отрезка уже лежит в ans. То есть, как вот здесь v и plus первая уже лежит. И если на следующем шаге
[42:01.140 --> 42:05.540]  я рассматриваю v и plus 1, v и plus 2, они обе опять лежат, мне нет смысла опять добавлять v и plus 1.
[42:05.540 --> 42:10.220]  Она и так там лежит, я добавлю только v и plus 2. Поэтому в этом случае я не добавляю старую,
[42:10.220 --> 42:15.140]  добавляю только новую вершину. Ну и вот во всех случаях, как бы, я считаю, что у меня построено
[42:15.140 --> 42:20.500]  какое-то начало, я ищу следующую новую точку на границе нашего многоугольника. В этом случае я
[42:20.500 --> 42:28.100]  попадаю внутрь, ну как бы, внутрь полуплоскости, пишу, что очередная вершина это q и v и plus 1. В этом
[42:28.100 --> 42:34.020]  случае я и так лежал и начинаю выходить, но до выхода у меня появляется точка пресечения. В
[42:34.020 --> 42:40.020]  этом случае точек пресечения нет. Вот, то есть, в конце после этого фора в ans как раз лежит список
[42:40.020 --> 42:47.540]  вершин в правильном порядке. q это точка пресечения стороны v, вот этой стороны с прямой,
[42:47.540 --> 43:02.980]  создающей нашу полуплоскость. Нормас? Хорошо. Так, тогда давайте переходить к алгоритмам побыстрее.
[43:02.980 --> 43:13.340]  Нет, потому что опять, это в каком смысле сортировка и не быстрее, чем NLGN, в общем случае нельзя.
[43:13.340 --> 43:32.740]  Ну нет, короче, NLGN будет только. Вот, значит смотрите, давайте я разобью наши полуплоскости
[43:32.740 --> 43:39.540]  на две группы по направлению вектора нормали. Мы понимаем, что вектор нормали у нас смотрит
[43:39.540 --> 43:45.180]  куда-то внутрь нашей полуплоскости. Давайте разобьем их на две категории. В первой категории
[43:45.180 --> 43:52.180]  вектор нормали будет каким-то таким, он либо смотрит строго вправо, либо находится где-то
[43:52.180 --> 43:56.820]  в верхней полуплоскости, исключая вот этот вектор строго влево. То есть, вот этот не лежит, все остальные
[43:56.820 --> 44:03.500]  там лежат. Это соответствует диапазону углов от 0 до π не включительно. Вторая категория это те
[44:03.500 --> 44:08.620]  полуплоскости, для которых вектор нормали, ну все остальные, то есть, либо строго влево, либо вниз,
[44:08.620 --> 44:14.860]  исключая вот эту горизонтальную сторону вправо. Это диапазон углов от π до 2π не включительно.
[44:14.860 --> 44:22.820]  Разбили полуплоскость на два класса. Дальше, внутри каждого класса давайте отсортируем
[44:22.820 --> 44:28.660]  полуплоскости вот в этом порядке. Что сначала будет идти полуплоскость вот с таким нормальным
[44:28.660 --> 44:33.460]  вектором, потом вот с таким, вот с таким, вот с таким и так далее. То есть, я сортирую в порядке
[44:33.460 --> 44:39.780]  против часовой стрелки вектора нормали всех полуплоскостей внутри каждой категории. Тут
[44:39.780 --> 44:49.460]  сортировка, тут сортировка. Уже N лог N получилось. Вот. Дальше, я утверждаю, что давайте сейчас
[44:49.460 --> 44:56.220]  рассматривать будем только первую категорию полуплоскости из первой категории. Будем добавлять
[44:56.220 --> 45:03.740]  их в таком порядке. И опять будем хранить текущую, как бы текущее пересечение. Вот несколько первых
[45:03.740 --> 45:07.180]  мы добавили. Ну, например, первая всегда у меня это строго вот такая штука, потому что у меня есть
[45:07.180 --> 45:13.300]  вот такой вот такая полуплоскость из bounding box. У меня точно есть такая прямая. Дальше, я начну
[45:13.300 --> 45:17.500]  добавлять какие-то вот такие вот полуплоскости, и они будут все дальше и дальше закручиваться вот
[45:17.500 --> 45:22.700]  так против часовой стрелки. И в частности, это означает, что при рассмотрении каждой новой
[45:22.700 --> 45:27.980]  полуплоскости она задает новое содержательное ограничение. Потому что если у меня, вот если я
[45:27.980 --> 45:34.300]  хоть чуть-чуть прокручу эту прямую в сторону против часовой стрелки, она задаст более мощное
[45:34.300 --> 45:40.540]  ограничение при пристремлении х к бесконечности. Потому что я увеличил ее уголой
[45:40.540 --> 45:46.540]  коэффициент, значит она задает самое мощное ограничение на бесконечно больших х. Поэтому точно
[45:46.540 --> 45:51.820]  каждая новая полуплоскость, каждая прямая будет частью границы вот этого пересечения.
[45:51.820 --> 46:00.260]  Ну вот, давайте тогда хранить просто, давайте будем хранить вектор, ну или там стэк, неважно,
[46:00.260 --> 46:07.100]  я буду хранить вектор прямых вектор таких полуплоскостей. Вот в каждый момент времени у меня
[46:07.100 --> 46:11.620]  текущий ногогольник, точнее текущая фигура пересечения, это что-то вот такое, например.
[46:11.620 --> 46:18.700]  Приходит новая полуплоскость, какая-то более наклонная против часовой стрелки,
[46:18.700 --> 46:23.500]  чем последняя рассмотренная. Тогда, в простом случае, надо просто pushback-нуть наш вектор,
[46:23.500 --> 46:28.580]  то есть она может быть просто конечной стороной, конечной стороной нашего вот такого обвощенного
[46:28.580 --> 46:34.940]  многоугольника. Либо же, возможно, она проходит где-то вот здесь вот, да. И, соответственно,
[46:34.940 --> 46:39.300]  тогда последнюю из стэка надо будет удалить, потому что, ну как бы, она задает условия,
[46:39.580 --> 46:44.980]  которая и так перебивается вот этим вот. Может быть даже такое, что новая рассмотренная
[46:44.980 --> 46:50.540]  полуплоскость где-то вот здесь вот располагается, мне нужно удалить и вот эту, и вот эту. Но, в общем
[46:50.540 --> 46:53.860]  случае, мне нужно удалить несколько последних полуплоскостей, потому что у меня была какая-то
[46:53.860 --> 47:04.380]  вот такая вот картинка, и пришла еще более крутая полуплоскость. Тогда понятно, что она отсекает
[47:04.380 --> 47:12.500]  несколько последних из нашего стэка, и ее нужно будет добавить последней. Да, ну это, на самом деле,
[47:12.500 --> 47:18.780]  очень похоже на выпуклооболочку, что несколько последних, пока несколько последних полуплоскостей
[47:18.780 --> 47:23.740]  нарушают выпуклость в каком-то смысле, мы их удаляем. Но вот здесь условия нарушаем, ну как бы,
[47:23.740 --> 47:30.220]  нарушается выпуклость, если, скажем, вот если точка переченья двух последних из стэка лежит вне
[47:30.680 --> 47:36.980]  новой полуплоскости, то можно последнюю смело удалить, если последние две пересекаются где-то,
[47:36.980 --> 47:41.420]  грубо говоря, правее чем новая наша полуплоскость, то последнее из стэка никакое
[47:41.420 --> 47:46.300]  содержательное ограничение не задает, её можно удалить из стэка. То здесь вот это и вот это
[47:46.300 --> 47:51.440]  пересекаются здесь, эта точка не лежит в нашей новой полуплоскости, я, соответственно, вот это вот
[47:51.440 --> 47:55.820]  тоже удаляю, я удалил изначально вот этот, теперь вот эту, потом у меня последняя становится вот эта,
[47:55.820 --> 47:59.820]  предпоследняя вот эта, их пересечение уже внутри полуплоскости и, как раз, вот эта
[47:59.820 --> 48:05.340]  штука это корректная граница нашего многоугольника. То есть мы просто делаем
[48:05.340 --> 48:08.620]  следующее, мы храним в стеке все наши полуплоскости слева направо вот в таком
[48:08.620 --> 48:16.660]  порядке. Пока пересечение последних двух лежит вне новой аж, я последнюю удаляю.
[48:16.660 --> 48:33.940]  Сейчас все разберем. Давайте сначала напишем, что мы внутри категории, внутри первой или
[48:33.940 --> 48:51.700]  второй категории, мы делаем следующее. Храним стек полуплоскостей, в цикле по всем
[48:51.700 --> 49:11.980]  новым. Пока пересечение двух последних из стека не лежит вошитое, я удаляю последнюю из стека.
[49:11.980 --> 49:22.300]  Вот, после этого просто в стек добавляю аж это.
[49:22.300 --> 49:44.140]  Ну все, тогда после этого у меня посчитаны нижние огибающие по факту и верхние огибающие наших
[49:44.140 --> 49:48.460]  полуплоскостей. То есть есть у меня какая-то вот такая вот штучка, какая-то вот такая.
[49:48.460 --> 50:03.940]  Надо теперь их совместить. Потом будем, но это чуть-чуть менее приятно. Значит,
[50:03.940 --> 50:09.940]  как это сделать? Вот смотрите, давайте я отдельно их нарисую. Вот есть верхняя какая-то, да? Есть,
[50:10.820 --> 50:16.520]  нижняя и есть верхняя. Давайте сделаем следующее. Давайте мы просто пойдем сканлайном слева направо.
[50:17.440 --> 50:22.580]  Давайте выпорядочим нашу полуплоскость и слева направо в обоих стэках, в обоих векторах. Вот здесь
[50:22.580 --> 50:27.080]  такой порядок, здесь такой порядок. Слева направо. Давайте просто пойдем вот так слева направо
[50:27.080 --> 50:32.300]  и будем отслеживать текущий пересечение. То есть я прикладываю здесь вертикальную прямую,
[50:32.300 --> 50:39.360]  двигаю ее инатонной направо. И рассматриваю, как верхняя огибающая и нижняя огибающая пересекают
[50:39.360 --> 50:43.920]  нашу прямую. Сначала печенье пусто, потом в какой-то момент оно начинает расширяться
[50:43.920 --> 50:48.000]  слева и справа, ну и вот и в какой-то момент оно замыкается, становится пустым. Надо дальше.
[50:48.000 --> 50:52.800]  Значит, что нужно для этого делать? По факту, у меня и так все прямые упорядочены слева направо.
[50:52.800 --> 51:00.400]  Мне нужно просто, ну там давайте считать, что у меня все заодно отрезками, да, что вот это отрезки все.
[51:00.400 --> 51:15.400]  Вот это отрезки, вот это отрезки. Вот я иду слева направо, пересекаю текущие два отрезка в верхнем,
[51:15.400 --> 51:19.360]  как бы в верхней огибающей, в нижней огибающей. Понимаю, где они там пересекаются, получаю левую
[51:19.360 --> 51:24.320]  точку пересечения. Затем вот так вот иду, смотрю, какой из отрезков закончился, да, то есть если вот
[51:24.320 --> 51:29.200]  здесь закончился, то я в нижней огибающей перехожу теперь вот на этот отрезок. Я соответственно
[51:29.280 --> 51:33.300]  скльжу здесь вот так, здесь вот так, опять смотрю he не пересекался, поэтому двигаюсь дальше.
[51:33.300 --> 51:36.600]  Здесь пересечения вот здесь, ну точнее переключение вот здесь, двигаюсь теперь монотонно вот так.
[51:36.600 --> 51:42.760]  Они все еще не пересекаются. Пришел сюда, начинаю двигаться так, ну и так далее. По
[51:42.760 --> 51:46.500]  факту просто так, монотон двигаюсь, жду когда они в следующий раз пересекутся. То есть у меня есть
[51:46.500 --> 51:51.840]  указатель сверху, указатель снизу, они монотонно двигаются. Я жду момента, когда у меня пересекутся
[51:51.840 --> 51:57.840]  стороны. Это будет конец пересечения. Вот, что такое.
[51:57.840 --> 52:15.840]  Давайте тоже напишем. Это правда. После того, как нашли
[52:15.840 --> 52:39.840]  нижнюю и верхнюю огибающие, проходим по ним слева-направо.
[52:39.840 --> 52:51.840]  Типа двумя указателями. Следим за первым и последним пересечением.
[52:51.840 --> 53:08.840]  Находим первые и последние пересечения.
[53:08.840 --> 53:17.840]  Ну, как-то вот так. Понятная идея? Вот, это в принципе
[53:17.840 --> 53:27.840]  можно лизовать. Я не пробовал много раз, что можно. Что?
[53:27.840 --> 53:41.840]  Ну, как скажете. Вот, хорошо. Можно делать так. Давайте посмотрим
[53:41.840 --> 53:47.840]  опять-таки второй способ, как можно без вот этого слияния нижней и верхней
[53:47.840 --> 53:53.840]  огибающей обойтись. Давайте мы объединим вместе первую-вторую категорию.
[53:53.840 --> 53:57.840]  То есть, вот раньше я делал это отдельно. Сначала в первой, потом во второй.
[53:57.840 --> 54:01.840]  И потом как-то их склеивал. Теперь давайте на это забьем. Давайте просто все это в один
[54:01.840 --> 54:05.840]  вектор добавим. Ну, опять-таки в том же самом порядке, что сначала у меня как бы
[54:05.840 --> 54:12.840]  нижняя огибается, потом верхняя. Ну, просто подряд без разделения на первых три
[54:12.840 --> 54:18.840]  категории. Ну, как минимум сломается следующее, что когда вы добавляете новую
[54:18.840 --> 54:23.840]  полуплоскость, у вас, возможно, нужно будет удалять не только из конца, но и
[54:23.840 --> 54:28.840]  из начала стека. Потому что представьте себе такую картинку. Вот у вас была вот
[54:28.840 --> 54:36.840]  такая вот фигурка и пришла вот такая вот полуплоскость. Тогда вам нужно
[54:36.840 --> 54:42.840]  удалить вот эту, а она лежит в начале стека. Это не бог весть какая проблема,
[54:42.840 --> 54:48.840]  как можно удалять из конца и из начала. Да, волшебная структура дек у нас есть.
[54:48.840 --> 55:02.840]  Давайте дек будем считать. Я два стека уже не помню, как делается. Вот, ну идея
[55:02.840 --> 55:06.840]  собственно такая же. Да, у меня есть, вот я в деке храню последовательность
[55:06.840 --> 55:11.840]  полуплоскостей в порядке их обхода против всего стрелки. Когда добавляется новая,
[55:11.840 --> 55:15.840]  у меня, возможно, удаляются какие-то последние полуплоскости. Ну, также как
[55:15.840 --> 55:19.840]  было в первой категории, когда у меня несколько последних пропадают. Либо несколько
[55:19.840 --> 55:24.840]  первых, как вот здесь. У меня первая, ну как бы самая первая вершина полуплоскости
[55:24.840 --> 55:29.840]  в деке, она более слабая, чем вот эта новая полуплоскость. Давайте тогда опять из
[55:29.840 --> 55:36.840]  начала удалять так же, как мы из конца удали, так же из начала. Вот, то есть теперь
[55:36.840 --> 55:41.840]  уже мы будем хранить полуплоскости в деке. И, скажем, пусть ошитая новая
[55:41.840 --> 55:48.840]  полуплоскость. Новая полуплоскость. Ну, тут давайте пропишем. Значит, пока две
[55:48.840 --> 55:55.840]  последние полуплоскости. Не так, да? То есть, ну... А? Ну, в частности, да. Ну,
[55:55.840 --> 56:02.840]  давайте, давайте написем чего-нибудь более в формате кода. Значит, давайте мы дек
[56:02.840 --> 56:08.840]  Давайте пропишем, значит, пока две последние полуплоскости...
[56:08.840 --> 56:11.840]  Не так, да?
[56:11.840 --> 56:13.840]  То есть, ну и...
[56:13.840 --> 56:15.840]  А?
[56:15.840 --> 56:17.840]  Ну, в частности, да.
[56:17.840 --> 56:22.840]  Ну, давайте, давайте написем что-нибудь более в формате кода.
[56:22.840 --> 56:25.840]  Значит, давайте мы дек наш назовем, пусть будет это D,
[56:25.840 --> 56:28.840]  ну и с, пусть будет размер, размер нашего дека.
[56:28.840 --> 56:30.840]  Размер.
[56:30.840 --> 56:33.840]  То есть, количество полуплоскостей в нем.
[56:33.840 --> 56:36.840]  Количество полуплоскостей.
[56:39.840 --> 56:42.840]  Вот, значит, пока...
[56:42.840 --> 56:47.840]  S хотя бы два, то есть, пока у нас внутри есть хотя бы две полуплоскости,
[56:47.840 --> 56:52.840]  и пересечение двух последних не лежит в новой ошитой.
[56:52.840 --> 56:54.840]  И...
[56:54.840 --> 56:58.840]  Ну, давайте я напишу, интерсект.
[56:58.840 --> 57:01.840]  Не хочу, пересечение.
[57:03.840 --> 57:06.840]  Двух последних, то есть D, S минус первое,
[57:06.840 --> 57:09.840]  и D, S минус второе,
[57:09.840 --> 57:12.840]  лежит вне ошитого,
[57:14.840 --> 57:18.840]  тогда я D делаю pop back.
[57:23.840 --> 57:27.840]  Вот, аналогично с началом, что пока
[57:27.840 --> 57:29.840]  S хотя бы два,
[57:29.840 --> 57:33.840]  и пересечение D0 и D1 дают вне ошитая,
[57:33.840 --> 57:36.840]  то я делаю pop front получается.
[57:57.840 --> 58:02.840]  Вот, ну теперь надо понять, когда наша новая полуплоскость добавляется в дек,
[58:02.840 --> 58:06.840]  потому что, если раньше, когда мы жили, скажем, только в первой категории,
[58:06.840 --> 58:08.840]  мы понимали, что она всегда добавляется,
[58:08.840 --> 58:11.840]  потому что у нас дает обязательно какое-то более мощное ограничение.
[58:11.840 --> 58:14.840]  Тут непонятно, тут она не всегда добавляется.
[58:17.840 --> 58:22.840]  А именно, я утверждаю, что надо написать примерно следующее.
[58:22.840 --> 58:25.840]  Смотрите, ну, во-первых, надо отсоединить два момента времени,
[58:25.840 --> 58:27.840]  если мы еще в первой категории находимся,
[58:27.840 --> 58:29.840]  то есть, если мы еще вот нижнюю огибающую устроим,
[58:29.840 --> 58:31.840]  то ее точно добавить в любом случае.
[58:31.840 --> 58:37.840]  Иначе, если мы уже зашли за вот этот угол 180 градусов,
[58:37.840 --> 58:39.840]  если мы начали верхнюю устроить,
[58:39.840 --> 58:45.840]  то мне нужно будет проверять вот эту точку,
[58:45.840 --> 58:48.840]  пересечение первой и последней полуплоскостей
[58:48.840 --> 58:51.840]  на принадлежность ошита.
[58:51.840 --> 58:53.840]  Потому что, например, вот если бы у меня ошита была,
[58:53.840 --> 58:55.840]  не здесь, а где-то вот здесь вот,
[58:55.840 --> 58:58.840]  то есть у меня уже и так был корректный многоугольник,
[58:58.840 --> 59:01.840]  пришла где-то ошита, летящая в воздухе,
[59:01.840 --> 59:03.840]  она не дает новых ограничений,
[59:03.840 --> 59:05.840]  поэтому ее нет смысла добавлять, ее не нужно добавлять.
[59:05.840 --> 59:08.840]  Ее нужно добавлять только если она вот эту вот точку,
[59:08.840 --> 59:10.840]  пересечение первой и последней полуплоскостей,
[59:10.840 --> 59:12.840]  если она ее внутри содержит.
[59:12.840 --> 59:14.840]  Точнее, наоборот, не содержит.
[59:14.840 --> 59:16.840]  Поэтому условие какое-то такое,
[59:17.840 --> 59:23.840]  что если ошита еще в первой полуплоскости,
[59:23.840 --> 59:26.840]  еще в первой категории,
[59:34.840 --> 59:37.840]  ну как бы мы помним, что у нас есть еще потенциальный,
[59:37.840 --> 59:39.840]  мы можем разбивать полуплоскость на две категории,
[59:39.840 --> 59:41.840]  первая, которая нижняя,
[59:41.840 --> 59:43.840]  вторая, которая верхняя.
[59:44.840 --> 59:45.840]  Ага.
[59:45.840 --> 59:51.840]  Или же пересечение
[59:58.840 --> 01:00:01.840]  d0 и ds-1.
[01:00:02.840 --> 01:00:04.840]  Так, ну, кстати, как бы s, понятно,
[01:00:04.840 --> 01:00:06.840]  здесь надо еще сделать s--,
[01:00:06.840 --> 01:00:08.840]  потому что я уменьшаю размер здесь и здесь.
[01:00:09.840 --> 01:00:11.840]  Вот, чтобы s всегда был корректным размером.
[01:00:11.840 --> 01:00:13.840]  Ну, или там d0 тушка size везде писать.
[01:00:13.840 --> 01:00:14.840]  Неважно.
[01:00:14.840 --> 01:00:16.840]  Значит, если пересечение первой и последней
[01:00:16.840 --> 01:00:18.840]  лежит вне ашиты,
[01:00:21.840 --> 01:00:24.840]  тогда d pushback ашиты
[01:00:27.840 --> 01:00:29.840]  и плюс-плюс s.
[01:00:32.840 --> 01:00:34.840]  Вот, что-то примерно такое надо сделать.
[01:00:41.840 --> 01:00:42.840]  Так.
[01:01:05.840 --> 01:01:07.840]  Один момент.
[01:01:11.840 --> 01:01:41.540]  В общем, здесь бывают проблемы с тем, что надо
[01:01:41.540 --> 01:01:46.580]  следить, как именно у меня, в общем, не должно быть
[01:01:46.580 --> 01:01:47.860]  у меня пустое пересечение.
[01:01:47.860 --> 01:01:49.460]  Потому что если я просто вот так буду добавлять в
[01:01:49.460 --> 01:01:52.740]  наши полуплоскости, то в какой-то момент может
[01:01:52.740 --> 01:01:55.140]  быть такое, что, ну вот смотрите, у меня, например, было что-то
[01:01:55.140 --> 01:02:00.340]  такое, и я пытаюсь добавить вот это вот.
[01:02:00.340 --> 01:02:01.340]  Тогда у меня что произойдет?
[01:02:01.340 --> 01:02:06.660]  У меня сначала несколько последних удалится, и это
[01:02:06.660 --> 01:02:09.100]  добавится в пересечение, будет у меня вот это и вот
[01:02:09.100 --> 01:02:10.100]  это.
[01:02:10.100 --> 01:02:11.100]  Ну это какой-то бред.
[01:02:11.100 --> 01:02:12.100]  Вот.
[01:02:12.100 --> 01:02:18.700]  Да, это так себе полуплоскость, но вот надо еще отдельно
[01:02:18.700 --> 01:02:21.140]  разобраться с тем, когда у меня на самом деле опустевает
[01:02:21.140 --> 01:02:22.860]  пересечение, потому что вот когда я это делаю, вот
[01:02:22.860 --> 01:02:25.940]  эти все картинки работают только если у меня пересечение
[01:02:25.940 --> 01:02:26.940]  реально не пустое.
[01:02:26.940 --> 01:02:30.220]  Потому что если оно внезапно опустело, то, ну как бы, мне
[01:02:30.220 --> 01:02:32.500]  надо вообще все это стереть, а я этого не делаю, я какой-то
[01:02:32.500 --> 01:02:33.500]  последний удаляю.
[01:02:33.500 --> 01:02:34.500]  То есть я считаю, что у меня все равно вот.
[01:02:34.900 --> 01:02:37.900]  То есть если мы докажем, что пересечение не пустое,
[01:02:37.900 --> 01:02:38.900]  то это алгоритм корректный?
[01:02:38.900 --> 01:02:42.380]  Если мы научимся понимать быстро, что оно пустое, да?
[01:02:42.380 --> 01:02:43.380]  Ну типа того, да.
[01:02:43.380 --> 01:02:46.060]  Ну то есть или другими словами, давайте отдельно еще раз
[01:02:46.060 --> 01:02:50.900]  поймем, не будет ли пустое пересечение, но вообще да,
[01:02:50.900 --> 01:02:51.900]  вообще да.
[01:02:51.900 --> 01:02:54.500]  То есть как бы если все всегда не пусто, то это работает.
[01:02:54.500 --> 01:03:17.980]  Вообще не думаю, не думаю.
[01:03:17.980 --> 01:03:20.100]  Ну то есть как бы, как вы тогда отличите вот этот
[01:03:20.100 --> 01:03:21.100]  случай вот от этого?
[01:03:21.100 --> 01:03:47.180]  Да, это хорошая мысль, что на самом деле в нормальном
[01:03:47.180 --> 01:03:50.620]  случае, в хорошем случае, когда у меня реально получается
[01:03:50.620 --> 01:03:55.180]  какой-то многоугольник содержательный, у меня внутри
[01:03:55.180 --> 01:03:59.220]  дека направление всех нормалей, полуплоскостей, оно заворачивается
[01:03:59.220 --> 01:04:01.700]  как раз против всего стрелки, спокойно вот так, ну как
[01:04:01.700 --> 01:04:06.060]  бы, короче, все кратчайшие повороты между нормальными,
[01:04:06.060 --> 01:04:07.060]  они против всего стрелки.
[01:04:07.060 --> 01:04:10.700]  Да, если мы внезапно начнем вот так вот кучу всего удалять
[01:04:10.700 --> 01:04:14.980]  и затем у нас будет пересечение, значит и эту мы например
[01:04:14.980 --> 01:04:18.980]  добавим, и у меня будет неправильный поворот от последней
[01:04:18.980 --> 01:04:21.220]  к последней, тогда нужно завершиться и сказать,
[01:04:21.220 --> 01:04:22.220]  что все пусто.
[01:04:22.220 --> 01:04:27.580]  Теперь вы уже не поняли, ну давайте напишу, что давайте
[01:04:27.580 --> 01:04:31.860]  я вот это все оставлю, в конце сделаю такую проверку,
[01:04:31.860 --> 01:04:37.460]  значит что, ну еще раз смотрите, в хорошей ситуации, если
[01:04:37.460 --> 01:04:42.700]  у меня перчение не пусто, то у меня последовательность
[01:04:42.700 --> 01:04:45.180]  нормалей, которая лежит в деке, то есть у меня в деке
[01:04:45.180 --> 01:04:48.380]  лежат вот эти вот полуплоскости в порядке обхода вот таком,
[01:04:48.500 --> 01:04:53.960]  а у меня нормалья заворачиваются строго против всего стрелки.
[01:04:53.960 --> 01:04:57.180]  То есть, переход от этого к этому против часовой кратчайший,
[01:04:57.180 --> 01:04:59.180]  от этого к этому против часовой и с便.
[01:04:59.180 --> 01:05:02.660]  Вот я утверждаю что, в случае, когда у меня впервые происходит
[01:05:02.660 --> 01:05:08.840]  опустение, когда пересечение становится пустым, что
[01:05:08.840 --> 01:05:11.540]  происходит, когда у меня пересечение пустое?
[01:05:11.540 --> 01:05:14.280]  Ты знаешь, Jenna Dash какая-то такая, у меня работает скажем
[01:05:14.280 --> 01:05:17.420]  первые вайл, я удаляю все эти вот у меня, это не лежит,
[01:05:17.420 --> 01:05:19.360] 該 не лежит, это не лежит, это не лежит, я всё удалил
[01:05:19.360 --> 01:05:22.060]  кроме последний, потому что последний не с кем пересекать
[01:05:22.280 --> 01:05:26.840]  ну тогда у меня есть вот это и вот, и я утверждаю, что
[01:05:26.840 --> 01:05:27.680]  нужно добавить такое, что если добавить такое слово
[01:05:27.680 --> 01:05:30.780]  что всё сработает, что напр empezarу вот этой штуки
[01:05:30.780 --> 01:05:34.000]  и вот этой, они должны по идее заворачиваться против
[01:05:34.000 --> 01:05:36.040]  часовой, но как видно на картинке они заворачиваются
[01:05:36.040 --> 01:05:38.800]  по часовой, вот отсюда-досюда и по часовой ближайшей
[01:05:39.440 --> 01:05:41.660]  в этом случае надо сказать, что ответы остоль
[01:05:41.660 --> 01:05:54.000]  Вот после того, как мы дописали тот if, если поворот от нормали
[01:05:54.000 --> 01:06:23.000]  ДС-2 к нормали, ДС-1 по часовой, ну да, по часовой, то есть кросс меньше либо равен нуля.
[01:06:23.000 --> 01:06:35.000]  Тогда можно сразу сказать, что ответ это пустое множество. Вот. Ну и так вроде будет все хорошо.
[01:06:35.000 --> 01:06:38.000]  Так сейчас один момент.
[01:06:53.000 --> 01:07:12.000]  Смущает момент, что на самом деле кросс не зависит от того, опять-таки он не различает от этой картинки, где вы двигаете на какой-то...
[01:07:12.000 --> 01:07:21.000]  Не, различает, смотрите, потому что, сейчас, момент, различает, потому что еще раз, я вот эти штуки я по-прежнему делаю.
[01:07:21.000 --> 01:07:33.000]  В случае, когда перещение пусто, у меня удалятся все полуплоскости, кроме Д0. То есть у меня вот этот цикл пробежится, у меня все точки перещения лежат вне аш-итоя, я их все удалю.
[01:07:33.000 --> 01:07:44.000]  Я удалю все полуплоскости, кроме самой первой. Как раз вот в этом плохом случае, когда перещение пусто, у меня в деке будет лежать только Д0 и аш-итоя, я вот здесь ее добавлю.
[01:07:44.000 --> 01:07:56.000]  Вот. Ну и если я сделаю эту проверку, у меня как раз поворот плохой. А в случае, если перещение было не пустым, то у меня перед вот этим аш-итоем будет какой-то предыдущий, какая-то нормальная,
[01:07:56.000 --> 01:08:00.000]  многоугольника и заворот между ними будет как раз против всего и как и надо.
[01:08:00.000 --> 01:08:15.000]  Так. Да. Ну тут, конечно, чтобы в контесты отзагнать.
[01:08:15.000 --> 01:08:34.000]  Сейчас, одну секунду, я пойму, что еще надо сказать. Почти все.
[01:08:34.000 --> 01:08:53.000]  Да, вроде все. Значит, единственное, что я не сказал. Смотрите, значит, все нормально. Тут надо еще сказать аккуратно про параллельные прямые, то есть полуплоскости, у которых задающих прямые параллельно.
[01:08:53.000 --> 01:09:05.000]  Чтобы мы, на всякий случай, чтобы нам не пришлось пересекать параллельные прямые, потому что, да, я здесь многократно вызываю процедуру пересечения, значит, чтобы у меня не было никогда параллельных прямых, давайте разберемся с параллельными прямыми.
[01:09:05.000 --> 01:09:25.000]  Вот. Значит, ну тут все просто. Если у меня есть несколько прямых, если у меня есть несколько полуплоскостей со направленными нормальными, то есть у которых там АВ одинаковые, да, мы берем самую сильную из них, которая задает самые сильные условия.
[01:09:25.000 --> 01:09:38.000]  Ну, это какая из них? Вот если у них АВ одинаковые, то самые сильные условия задает та полуплоскость, в которой С минимальный, я утверждаю.
[01:09:38.000 --> 01:09:51.000]  Ну, да, потому что при больших С это, наверное, все только будет как бы более слабым. Если оно верно для меньшего С, то для большего С это тоже будет верно.
[01:09:51.000 --> 01:10:01.000]  Поэтому если у меня есть вот такие прямые с одинаковыми направляющими векторами, то из них давайте мы выкинем все кроме одной, оставим только ту, где С минимально.
[01:10:01.000 --> 01:10:11.000]  Вот. При этом нам надо различать прямую вот такую и вот такую. Ну, то есть параллельную ей, но противонаправленную.
[01:10:11.000 --> 01:10:17.000]  Ну, очень правильно.
[01:10:17.000 --> 01:10:28.000]  Нет, там везде надо брать минимальное С, потому что они все задаются неравенством большего равного нуля, там просто будет все домножены на минус один, как раз максимум придет минимум.
[01:10:28.000 --> 01:10:36.000]  То есть у меня все полуплоскости заданы вот таким вот неравенством большего равного нуля, поэтому всегда, независимо от того, куда она смотрит, надо всегда выбирать минимальное С.
[01:10:36.000 --> 01:10:41.000]  Правда ли, что мы берем нормальное? Ну, вот как это сделать быстро?
[01:10:41.000 --> 01:10:53.000]  Вот, как это сделать быстро. Можно, смотрите, можно просто все наши векторы нормалии сделать единичной длины, сказать, что А квадрат, то есть Б квадрат равно единице.
[01:10:53.000 --> 01:10:58.000]  Ну, то есть поделить на корень из суммы квадратов. Все коэффициенты можно поделить на корень из суммы квадратов.
[01:10:58.000 --> 01:11:10.000]  Тогда у вас вот эти вот прямые, у этих прямых будут одинаковые просто вектора нормалия АВ, здесь будет АВ, а здесь же будет другой, тут будет минус А минус В.
[01:11:10.000 --> 01:11:19.000]  Поэтому, чтобы проверить, что вот как раз у вас есть пачка прямых, они как бы задают одинаковые условия, если у них одинаковые нормальные векторы.
[01:11:19.000 --> 01:11:25.000]  То есть вы их посортили вот в этом нашем порядке, сначала первая, потом вторая категория, в порядке заворачивания вектора нормалия.
[01:11:25.000 --> 01:11:33.000]  Потом идете подряд, если видите несколько полуплоскостей с одинаковым вектором нормалия, выбираете из них то, у которого С минимально.
[01:11:33.000 --> 01:11:35.000]  Те, которые больше, просто выкидываете.
[01:11:37.000 --> 01:11:39.000]  Вот.
[01:11:43.000 --> 01:11:45.000]  Нет. А нам не надо.
[01:11:49.000 --> 01:11:51.000]  Быстро вот эти игнорировать.
[01:11:51.000 --> 01:12:02.000]  Ну можно просто смотреть на, можно сделать так, можно посортить по направляющим векторам АВ, дальше если АВ одинаково, то в порядке возрастания С.
[01:12:02.000 --> 01:12:08.000]  И сначала вы рассмотрите вот эту, а если рассматриваете новую, которая совпадает с предыдущей, но с другим С, вы это игнорите просто.
[01:12:08.000 --> 01:12:17.000]  То есть у вас сортировка сначала по АВ, потом в порядке возрастания С, тогда вы сначала рассмотрите это, а все остальные, если они совпадают с предыдущей по А и Б, вы их просто игнорируете.
[01:12:17.000 --> 01:12:19.000]  И не добавляете в дек.
[01:12:21.000 --> 01:12:23.000]  Вот.
[01:12:25.000 --> 01:12:27.000]  А так вроде все.
[01:12:35.000 --> 01:12:37.000]  Так, вопросики может?
[01:12:44.000 --> 01:12:46.000]  Простая задача, смотрите.
[01:12:47.000 --> 01:12:51.000]  Ну можно, можно, ладно.
[01:12:52.000 --> 01:12:54.000]  Значит есть набор точек на плоскости.
[01:12:59.000 --> 01:13:05.000]  Нужно найти для каждой из них множество точек наиболее близких к данной, чем ко всем остальным.
[01:13:06.000 --> 01:13:14.000]  То есть вот у вас есть вся плоскость, вам надо понять, какие точки с плоскости лежат ближе всего к этой, чем ко всем остальным.
[01:13:14.000 --> 01:13:24.000]  То есть скажем вот, от этой точки расстояния до этой меньше, чем до всех остальных.
[01:13:24.000 --> 01:13:27.000]  Вот надо понять фигуру, которая ближе всего к этой точке, чем ко всем остальным.
[01:13:29.000 --> 01:13:32.000]  Это называется диаграмм Варанова.
[01:13:32.000 --> 01:13:36.000]  Смотрите, вот у вас по факту есть набор точек на плоскости.
[01:13:39.000 --> 01:13:43.000]  Давайте определим просто ячейку диаграммы Воронова для точки P i,
[01:13:44.000 --> 01:13:50.000]  как все такие точки D, что... давайте Q,
[01:13:51.000 --> 01:13:57.000]  такие, что расстояние от Q до P i в меньшем равном расстояние
[01:13:58.000 --> 01:14:01.000]  от Q до P g для любого g.
[01:14:03.000 --> 01:14:07.000]  Как раз такие точки, которые были же всего к P i,
[01:14:08.000 --> 01:14:10.000]  чем ко всем остальным.
[01:14:11.000 --> 01:14:14.000]  Зовется ячейка диаграммы Воронова.
[01:14:15.000 --> 01:14:20.000]  Ну да, расстояние до P i это минимальное среди всех расстоений до n точек.
[01:14:21.000 --> 01:14:23.000]  Вот, что... а?
[01:14:28.000 --> 01:14:30.000]  Среди всех точек плоскости.
[01:14:30.000 --> 01:14:32.000]  Нет, среди всех точек плоскости, да.
[01:14:36.000 --> 01:14:37.000]  Да.
[01:14:39.000 --> 01:14:41.000]  Значит, что это тогда за фигура должна быть?
[01:14:43.000 --> 01:14:45.000]  Выпукло многоугольник, который задается какими условиями?
[01:14:46.000 --> 01:14:47.000]  Границы как задаются?
[01:14:52.000 --> 01:14:55.000]  Да, серперы на самом деле, потому что вот если у вас есть две точки,
[01:14:56.000 --> 01:14:58.000]  то что такое точка ближе к P i, чем к P 2?
[01:14:58.000 --> 01:15:01.000]  Но вам надо провести между ними СП.
[01:15:02.000 --> 01:15:05.000]  И то что содержит, вот короче это полуплоскость и ближе к П1,
[01:15:06.000 --> 01:15:09.000]  чем к П 2, это полуплоскость ближе к P 2, чем к P 1.
[01:15:10.000 --> 01:15:12.000]  Соответственно, чтобы построить ячейку диаграммы Воронова для точки P i,
[01:15:13.000 --> 01:15:16.000]  вам нужно построить СП между P i и все остальными точками
[01:15:17.000 --> 01:15:20.000]  и пересечь вот те полуплоскости, которые ближе всего к P i.
[01:15:21.000 --> 01:15:23.000]  То есть, вы вот здесь построили серпер,
[01:15:24.000 --> 01:15:27.000]  для этих двух точек построили серпер, для этих двух точек построили серпер
[01:15:28.000 --> 01:15:33.000]  Пересечение вот этих полплоскостей, это будет как раз ячейка диаграмма Воронова.
[01:15:36.000 --> 01:15:41.000]  Ну, смотрите, вам по факту, я вот это вот условие расписываю так.
[01:15:41.000 --> 01:15:43.000]  Давайте я для каждой пары ИЖи...
[01:15:47.000 --> 01:15:51.000]  Ну, надо описать все точки плоскости, попадающие в ячейку диаграмма.
[01:15:53.000 --> 01:15:55.000]  Точки плоскости. Там писано Jr2.
[01:15:59.000 --> 01:16:03.000]  Вот. Наш пересечение, наш фигур, это пересечение полуплоскостей.
[01:16:05.000 --> 01:16:08.000]  Вот. Причем понятно каких, да? Для каждых двух проводим середину перпендикуляр,
[01:16:08.000 --> 01:16:11.000]  и одна из двух, это вот как бы одна из составляющих пересечения.
[01:16:12.000 --> 01:16:17.000]  Тогда, если мне нужно найти ячейку для конкретной точки, мне достаточно построить n середины перпендикуляров,
[01:16:17.000 --> 01:16:21.000]  понять, по какую сторону надо взять полуплоскость, по одну или по другую,
[01:16:21.000 --> 01:16:24.000]  и n-1 такую полуплоскость пересечь.
[01:16:25.000 --> 01:16:29.000]  Тем самым получится как раз одна из ячей к диаграммам Воронова, то, что ближе всего к точке Pi.
[01:16:30.000 --> 01:16:35.000]  Получается, что за n log n можно описать такую ячейку одну для точки.
[01:16:35.000 --> 01:16:41.000]  Если вам нужно всю плоскость разбить, если вам нужно для каждой из n точек описать такую штуку,
[01:16:41.000 --> 01:16:43.000]  то будет что-то типа квадрат-лог.
[01:16:44.000 --> 01:16:49.000]  Потому что для каждой точки примерно n полуплоскости, и вы их все пересекаете.
[01:16:51.000 --> 01:16:52.000]  Вот.
[01:16:53.000 --> 01:16:55.000]  Диаграмма Воронова.
[01:17:02.000 --> 01:17:04.000]  Вот. Ну, на этом тогда все. Спасибо.
