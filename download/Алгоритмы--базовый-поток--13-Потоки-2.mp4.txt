[00:00.000 --> 00:15.000]  Так, всем доброго времени суток. Это запись пропущенной последней лекции курса по алгоритмам,
[00:15.000 --> 00:22.640]  ну и, соответственно, курса по C++, на которых, собственно, мы подведем небольшой итог,
[00:22.640 --> 00:27.800]  потому что мы изучили в течение семестра, ну и, соответственно, закончим те темы,
[00:27.800 --> 00:35.320]  которые начинали в прошлые разы. Ну и начнем, собственно, мы с алгоритмов. Напомню,
[00:35.320 --> 00:41.440]  что мы в прошлый раз начали заниматься такой темой, как потоки. Грубо говоря,
[00:41.440 --> 00:52.400]  у нас есть некоторая транспортная сеть. Есть некоторая транспортная сеть,
[00:52.400 --> 00:57.080]  ну или там граф, у которого на каждом ребре написана некоторая пропускная способность,
[00:57.080 --> 01:00.240]  есть, соответственно, две выделенные вершины. Одна называется источником,
[01:00.240 --> 01:04.080]  другая называется стоком. Соответственно, из источника продуцируется какое-то количество
[01:04.080 --> 01:13.000]  жижи, которая, собственно, должна в итоге целиком прибыть в сток. Задача заключается в том,
[01:13.000 --> 01:21.640]  чтобы назначить такое количество жижи, которая протекает по ребрам, соединяющим вершины,
[01:21.640 --> 01:30.560]  так чтобы, во-первых, у нас не было такого, что количество потока, которое протекает по ребру,
[01:30.560 --> 01:36.640]  превосходило пропускной способности ребра. У нас, собственно, второй условие заключается в том,
[01:36.640 --> 01:40.880]  что у нас в форме жижечных вершин поток не накапливается. Сколько потока пришло в эту вершину,
[01:40.880 --> 01:45.080]  столько из него и вышло. Ну и также мы с вами ввели такое понятие, как симметризованный поток.
[01:45.080 --> 01:51.400]  То есть, по сути, ввели ту же самую функцию, те же самые ограничения, только сказали,
[01:51.400 --> 01:54.880]  что у нас поток обладает свойством ате симметричности. То есть, мы говорим,
[01:54.880 --> 02:00.320]  что если в одну сторону протекает х-поток, то в обратную сторону протекает минус х-потока.
[02:00.320 --> 02:06.200]  Но в остальном всё, в принципе, то же самое. Мы также требуем, чтобы поток не превосходил
[02:06.200 --> 02:12.240]  пропускной способности данного ребра. При этом мы ещё считаем, что если между вершинами ребра нет,
[02:12.240 --> 02:18.280]  соответственно, пропускная способность данного ребра, отсутствующего, равна нулю.
[02:19.240 --> 02:25.320]  Соответственно, потока ни в коей вершине накапливается. Мы с вами рассмотрели алгоритм Форда Фалкерсона,
[02:25.320 --> 02:32.280]  который основан на теории Форда Фалкерсона, которая говорит о том, что мы можем брать симметризованный,
[02:32.280 --> 02:36.700]  можем брать обычную транспортную сеть, симметризовать поток и, соответственно,
[02:36.700 --> 02:42.520]  добавлять поток по ручьям. То есть, просто добавляем какое-то количество единиц потока.
[02:42.520 --> 02:47.400]  И так делаем до тех пор, пока мы можем его добавить. Как только мы ничего не можем добавить,
[02:47.400 --> 02:54.400]  как только мы не можем найти пути из источника в сток, который бы проходил по рёбрам с положительной пропускной способностью,
[02:54.400 --> 02:58.400]  мы говорим, что в этот момент мы нашли оптимальный поток.
[02:58.400 --> 03:03.400]  Теория Мэйфорда Фалкерса как раз подтверждает, что, действительно, если у нас такая ситуация возникла, то поток оптимален.
[03:03.400 --> 03:07.400]  Ну и, соответственно, из этой теории легко выводится простейший алгоритм.
[03:08.400 --> 03:11.400]  Мы просто-напросто инсталлюзируем поток нулём.
[03:11.400 --> 03:20.400]  Дальше пускаем какой-то поток из источника в сток, например, с помощью алгоритма DFS.
[03:20.400 --> 03:23.400]  И, соответственно, обновляем поток вдоль этого пути.
[03:23.400 --> 03:28.400]  Ну и продолжаем до тех пор, пока, соответственно, мы находим такие пути.
[03:28.400 --> 03:33.400]  Дальше мы с вами рассмотрели алгоритм Эдмонт Скарпа, который, по сути, является модификацией алгоритма Форда Фалкерса.
[03:33.400 --> 03:46.400]  Ну и, соответственно, мы в прошлый раз показали, что это, на самом деле, приводит к тому, что алгоритм становится, ну, скажем так, время работы алгоритма перестаёт зависеть от итогового ответа, да, и обладает, соответственно, полиномиальной сложностью, а именно VE квадрат.
[03:46.400 --> 03:48.400]  Вот это то, что было в прошлый раз.
[03:48.400 --> 03:51.400]  Ну и сегодня давайте рассмотрим ещё парочку алгоритмов.
[03:51.400 --> 03:55.400]  Ну, один алгоритм, ну да, смотри.
[03:55.400 --> 03:57.400]  Так, ну вот, соответственно, у нас есть алгоритм Эдмонт Скарпа.
[03:57.400 --> 04:14.400]  И что мы делаем, да, то есть, вообще говоря, алгоритм Эдмонт Скарпа итеративный, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации, он на каждой итерации.
[04:14.400 --> 04:41.400]  Так, ну вот, соответственно, у нас есть алгоритм Эдмонт Скарпа, и что мы делаем, да, то есть, вообще говоря, алгоритм Эдмонт Скарпа итеративный, он на каждой итерации запускает БФС, и с помощью БФС мы находим, соответственно, кратчайший путь, кратчайший путь из источника в сток, ну, грубо говоря, да, вот у нас есть источник, есть сток, мы, соответственно, находим кратчайший реберный путь, реберный путь до вершины Т.
[04:41.400 --> 04:48.400]  Вот, соответственно, после того, как мы нашли этот реберный путь, мы вдоль не опустили поток, дальше снова ищем кратчайший путь, и так далее и е.
[04:48.400 --> 04:53.400]  В чем заключается неэффективность алгоритма Эдмонт Скарпа, на чем мы бы могли сильно сэкономить.
[04:53.400 --> 05:00.400]  Ну, смотрите, на самом деле кажется, что запускать кучу раз БФС особо не имеет смысла. Почему?
[05:00.400 --> 05:04.400]  Потому что ведь алгоритм, на самом деле, алгоритм БФС, он находит не единственный кратчайший путь.
[05:04.400 --> 05:16.400]  То есть представь себе, что у меня есть несколько, несколько реберных путей длины 4, ну, например, вот так, или вообще есть какой-то вот отдельный путь, который не пересекается сходным, или есть какой-то вот такой путь, и так далее и е.
[05:16.400 --> 05:27.400]  Ну, короче говоря, алгоритм БФС, он на самом деле строит такие вот множества, да, то есть, словно строит такие слои, то есть, слои вершин, до которых расстояние 1, слои вершин, до которых расстояние 2, слои вершин, до которых расстояние 3.
[05:27.400 --> 05:32.400]  Ну и соответственно, вот есть слои вершин, до которых расстояние, реберные расстояния 4. Вот.
[05:32.400 --> 05:36.400]  И что мы на самом деле делаем, да, что нам на самом деле предлагает алгоритм AdamScarpe?
[05:36.400 --> 05:42.400]  Алгоритм AdamScarpe предлагает нам следующее. Давайте возьмем какой-нибудь путь, ну, например, вот, вот этот.
[05:42.400 --> 05:55.400]  И вдоль него пустим поток. Ну а дальше, соответственно, вот мы пустим поню понок, а дальше, соответственно, заново построим, заново запустим алгоритм БФС, заново идем в какой-то кратчайший путь, и соответственно, пустим по нему поток.
[05:55.400 --> 06:07.400]  И возникает, естественно, вопрос, а зачем? Зачем мы кучу раз выполняем алгоритм БФС, если, в принципе, если, в принципе, мы сразу, ну, если мы сразу по одному запуску БФС можем найти сразу несколько кратчайших путей из СТ?
[06:07.400 --> 06:21.400]  Ну, допустим, вот я по красному пути пустил поток. Да, этот поток мне насытил вот это ребро. То есть вот это ребро стало насыщенным, ну, в том смысле, что его пропускная способность сравнялась с, точнее, его поток, да, поток, который проходит по этому ребру, сравнялся с его пропускной способностью.
[06:21.400 --> 06:33.400]  Но при этом мы видим, что в нашем, ну, собственно, в нашем, ну, в нашем, так скажем, графе, да, который построил БФС, в нем еще много кратчайших путей, да, которые мы тоже нашли на самом деле.
[06:33.400 --> 06:41.400]  Например, вот это вот верхний путь. Вот такой путь. Мы его тоже нашли. Потом вот такой путь. Он тоже был найден нашим алгоритмом. И вот такой путь.
[06:41.400 --> 06:51.400]  То есть на самом деле БФС находит не один кратчайший путь, да, как мы привыкли, а на самом деле можно считать, что БФС находит сразу же все пути, все кратчайшие реберные пути, которые приведут меня из СТ.
[06:51.400 --> 06:59.400]  То есть что мне достаточно сделать? Мне достаточно взять вершину С и найти какое-то ребро, которое ведет в вершину с расстоянием 1.
[06:59.400 --> 07:06.400]  Дальше взять вот эту самую вершину с расстоянием 1, найти какую-то вершину, которая ведет ребро с расстоянием 2 и так далее.
[07:06.400 --> 07:14.400]  И для этого мне не приходится, соответственно, перестраивать, то есть постоянно вызывать заново алгоритм БФС.
[07:14.400 --> 07:19.400]  То есть на самом деле я могу какие-то запуски БФС переиспользовать несколько раз.
[07:19.400 --> 07:28.400]  И вот как только я переиспользую, грубо говоря, забью все допустимые пути, только в этот момент я могу сказать, ага, ну вот все, все пути размера 4 я уже рассмотрел.
[07:28.400 --> 07:38.400]  Их больше у меня в графе не осталось, поэтому я могу заново запустить БФС и найти какой-нибудь новый кратчайший реберный путь, который будет иметь длину 5.
[07:38.400 --> 07:47.400]  В общем, идея вот такая. Зачем мне несколько раз вызывать алгоритм БФС, если можно запустить один раз и сразу же в нем найти все возможные пути данного размера?
[07:47.400 --> 07:52.400]  Ну, соответственно, все, вся идея изображена здесь.
[07:52.400 --> 07:59.400]  И действительно, мы можем сказать о том, что алгоритм БФС строит так называемую слоистую сеть.
[07:59.400 --> 08:04.400]  Что такое слоистая сеть? Слоистая сеть – это, грубо говоря, граф, у которого все вершины разделены по слоям.
[08:04.400 --> 08:08.400]  То есть условно есть... у нас есть слой, расстояние до которого один из источника.
[08:08.400 --> 08:15.400]  И слой, расстояние до которого из источника равно 2, и расстояние... соответственно, вершины, расстояние до которых источник, равно 3.
[08:15.400 --> 08:25.400]  Соответственно, строит слоистая сеть и плюс я отдельно выделяю рёбра, которые ведут из одного слоя в другой, то есть из первого слоя во второй, из второго в третий и так далее.
[08:25.400 --> 08:29.400]  Вот, соответственно, алгоритм BFS, грубо говоря, строит мне вот такую слоистую сеть.
[08:29.400 --> 08:33.400]  То есть он, во-первых, находит рёбра, которые ведут из...
[08:33.400 --> 08:38.400]  Во-первых, он разделяет вершины по слоям, там на первом, втором, третьем и так далее.
[08:38.400 --> 08:43.400]  И, во-вторых, находят все ребра, которые ведут из одного слоя во второй.
[08:45.400 --> 08:49.400]  И, соответственно, с помощью алгоритма BFS я построил слоистую сеть. А что дальше?
[08:49.400 --> 08:52.400]  Ну а дальше я могу работать с этой слоистой сетью.
[08:52.400 --> 08:54.400]  То есть теперь я могу с этой слоистой сетью,
[08:54.400 --> 08:56.400]  то есть я теперь могу не постоянно вызывать алгоритм BFS,
[08:56.400 --> 09:00.400]  а найти какой-то путь в этой слоистой сети.
[09:00.400 --> 09:02.400]  Надо найти вот такой путь сначала.
[09:02.400 --> 09:05.400]  Потом я нашел какой-то вот такой путь.
[09:05.400 --> 09:10.400]  Ну и так далее, пока вот в этой слоистой сети я смогу найти путь из СТ,
[09:10.400 --> 09:13.400]  пока я не забью все ребра до конца.
[09:13.400 --> 09:17.400]  То есть кажется, это довольно-таки разумно, довольно-таки логично.
[09:19.400 --> 09:22.400]  Давайте, собственно, посмотрим, как, за сколько это может...
[09:22.400 --> 09:25.400]  Да, и при этом заметьте, что, опять же, я не обращаю внимания,
[09:25.400 --> 09:28.400]  скажем, я не провожу дополнительный анализ того,
[09:28.400 --> 09:31.400]  корректно ли работает алгоритм Динница и так далее,
[09:31.400 --> 09:35.400]  потому что он полностью основан на теории Ford-Fulkerson.
[09:35.400 --> 09:38.400]  То есть заметьте, что тут у меня история точно такая же.
[09:38.400 --> 09:43.400]  То есть я, соответственно, строю какую-то вспомогательную слоистую сеть,
[09:43.400 --> 09:45.400]  а дальше в этой слоистой сети ищу пути
[09:45.400 --> 09:48.400]  и дополняю эти пути, соответственно, новым потоком.
[09:48.400 --> 09:51.400]  Нас, соответственно, просто на каждой итерации добавляю по новому потоку.
[09:51.400 --> 09:54.400]  Ну а теория Ford-Fulkerson нам говорит, что так можно делать.
[09:54.400 --> 09:56.400]  Во-первых, Лемма об арифметике потоков нам говорит,
[09:56.400 --> 09:58.400]  что действительно потоки можно складывать.
[09:58.400 --> 10:00.400]  Ну а теория Ford-Fulkerson говорит,
[10:00.400 --> 10:03.400]  что если я буду так делать и в какой-то момент я ничего не найду,
[10:03.400 --> 10:05.400]  то, соответственно, я уже нашел максимальный поток.
[10:09.400 --> 10:11.400]  Да, ну, соответственно, алгоритм такой.
[10:11.400 --> 10:12.400]  Изначально у нас поток рулевой.
[10:12.400 --> 10:14.400]  Дальше с помощью BFS строим слоистую сеть.
[10:14.400 --> 10:16.400]  То есть просто-напросто запускаем алгоритм BFS.
[10:16.400 --> 10:17.400]  Вот.
[10:17.400 --> 10:20.400]  И для каждой вершины находим тот уровень, на котором она находится.
[10:20.400 --> 10:22.400]  То есть тот слой, на котором она находится.
[10:22.400 --> 10:24.400]  Дальше, соответственно, берем эту самую слоистую сеть
[10:24.400 --> 10:28.400]  и находим все пути из SFT вот вдоль этой слоистой сети.
[10:28.400 --> 10:31.400]  То есть по тем ребрам, которые проходят из одного слоя во второй.
[10:31.400 --> 10:33.400]  Как только все эти пути у меня закончились,
[10:33.400 --> 10:35.400]  как только я насытил все ребра, ну не все ребра,
[10:35.400 --> 10:38.400]  например, вот эти три ребра я насытил,
[10:38.400 --> 10:43.400]  то есть теперь у меня по этой слоистой сети невозможно добраться из вершины S в вершину T.
[10:43.400 --> 10:47.400]  Ну и значит, что всю эту слоистую сеть я полностью, так скажем, заиспользовал.
[10:47.400 --> 10:50.400]  Ну и, соответственно, теперь я могу вернуться к пункту 1,
[10:50.400 --> 10:55.400]  то есть заново запустить BFS, найти какую-то другую слоистую сеть, более широкую.
[10:55.400 --> 10:57.400]  Ну и, соответственно, продолжать работать.
[10:57.400 --> 10:59.400]  Продолжать работать в ней.
[11:02.400 --> 11:05.400]  Ну и, соответственно, возникает тоже логичный вопрос.
[11:05.400 --> 11:09.400]  Ну хорошо, у нас работает такой алгоритм,
[11:09.400 --> 11:12.400]  ну вообще говоря, почему он может работать быстрее, чем Эдман Скарпа?
[11:12.400 --> 11:15.400]  То есть, окей, в Эдман Скарпа мы очень много раз вызываем алгоритм BFS,
[11:15.400 --> 11:18.400]  но с другой стороны алгоритм единицы мы же много раз будем искать пути.
[11:18.400 --> 11:21.400]  То есть, окей, слоистую сеть мы построили, грубо говоря,
[11:21.400 --> 11:25.400]  ну не так часто мы строим слоистую сеть, то есть не так часто вызываем алгоритм BFS,
[11:25.400 --> 11:29.400]  но все равно на каждой итерации, то есть вот пункт 2, да, мы ищем дополняющие пути,
[11:29.400 --> 11:33.400]  то есть мы находим дополняющий путь первый, потом второй, потом третий и так далее,
[11:33.400 --> 11:35.400]  пока соответственно у нас ищутся пути.
[11:35.400 --> 11:39.400]  То есть, казалось бы, чем поиск вот такого пути отличается от вызова BFS?
[11:39.400 --> 11:41.400]  Ну давайте, собственно, ответим на три вопроса,
[11:41.400 --> 11:46.400]  и таким образом мы поймем, почему алгоритм единицы работает на порядок быстрее,
[11:46.400 --> 11:48.400]  чем алгоритм Эдман Скарпа.
[11:48.400 --> 11:52.400]  Значит, ну первый вопрос, сколько раз нужно перестраивать слоистую сеть?
[11:52.400 --> 11:54.400]  Сколько раз нужно перестраивать слоистую сеть?
[11:54.400 --> 11:58.400]  Ну смотрите, ответ на вопрос на самом деле довольно-таки простой.
[11:58.400 --> 12:01.400]  Вот, допустим, я построил какую-то слоистую сеть, вот изображена здесь,
[12:01.400 --> 12:08.400]  и соответственно расстояние от SDT у меня равно 4.
[12:08.400 --> 12:13.400]  Что означает, что в этой слоистой сети я дальше продолжаю,
[12:13.400 --> 12:16.400]  дальше я начинаю не искать какие-то пути, и в какой-то момент пути найти не могу.
[12:16.400 --> 12:18.400]  Что это означает?
[12:18.400 --> 12:21.400]  Значит, смотрите, если, отвечаю на первый вопрос, да,
[12:21.400 --> 12:49.400]  если слоистой сети нет путей из SFT, то это значит, что все пути длины как?
[12:49.400 --> 13:00.400]  Ну вот, в данном случае, кару на 4, все пути длины к уже рассмотрены.
[13:00.400 --> 13:05.400]  То есть, грубо говоря, слоистая сеть, она, грубо говоря, содержит все возможные пути длины 4.
[13:05.400 --> 13:10.400]  Если посмотреть на картинку, то слоистая сеть содержит все пути длины 4.
[13:10.400 --> 13:15.400]  Соответственно, если в какой-то момент я в этой слоистой сети не могу найти новый путь,
[13:15.400 --> 13:23.400]  в смысле, вот эти ребра мне уже недопустимы, то есть, по этим ребрам я уже пройти не могу, так они уже заполнены.
[13:23.400 --> 13:32.400]  Соответственно, это означает, что в графе у меня уже нет путей, которые идут из SFT длины 4.
[13:32.400 --> 13:34.400]  И более того, у меня нет путей более коротких. Почему?
[13:34.400 --> 13:40.400]  Потому что мы в прошлый раз с вами доказывали для Edmund Scarpa, что при добавлении новых потоков
[13:40.400 --> 13:44.400]  у меня кратчайшее расстояние от SDT может только увеличиваться, но никак не уменьшаться.
[13:44.400 --> 13:49.400]  Ну а раз я рассмотрел все возможные пути длины 4 и больше их не осталось, то, соответственно,
[13:49.400 --> 13:56.400]  у меня длина кратчайшего пути от SDT могла только увеличиться, то есть реберный путь от SDT только увеличился.
[13:56.400 --> 14:02.400]  Ну а сколько раз я могу увеличить путь от SDT?
[14:02.400 --> 14:05.400]  Ну, понятное дело, что не более в раз.
[14:05.400 --> 14:07.400]  Меньше ребра равно, чем в.
[14:07.400 --> 14:25.400]  Вот так как длина пути из SFT не больше, чем в-1.
[14:25.400 --> 14:28.400]  Давайте так еще раз. Какой ответ на первый путь?
[14:28.400 --> 14:30.400]  Сколько раз нужно перестраивать свои сети?
[14:30.400 --> 14:32.400]  Грубо говоря, сколько раз мне нужно выдавать алгоритм BFS?
[14:32.400 --> 14:34.400]  Я запустил первый раз алгоритм BFS.
[14:34.400 --> 14:38.400]  Он нашел какой-то путь длины K из SFT.
[14:38.400 --> 14:41.400]  Все эти пути я уже рассмотрел, больше таких пути нет.
[14:41.400 --> 14:45.400]  Дальше снова запускаю алгоритм BFS, и так как пути и длины K у меня больше нет,
[14:45.400 --> 14:49.400]  путь может только увеличиваться, то следующий алгоритм BFS найдет мне кратчайший путь,
[14:49.400 --> 14:55.400]  ну, больше либо равный, чем K плюс 1.
[14:55.400 --> 14:58.400]  Следующий путь будет больше либо равный, чем K плюс 2.
[14:58.400 --> 15:00.400]  Ну и так далее.
[15:00.400 --> 15:07.400]  Последний путь, естественно, будет иметь длину в-1.
[15:07.400 --> 15:12.400]  Соответственно, количество таких перестроений у меня не больше, чем в-1.
[15:12.400 --> 15:19.400]  На самом деле тут написал меньше, чем в, а это неважно, она с этим точкой не повлияет.
[15:19.400 --> 15:23.400]  С этим разобрались.
[15:23.400 --> 15:27.400]  Следующий пункт. Сколько времени занимает поиск пути в слоистой сети?
[15:27.400 --> 15:31.400]  После того, как я построил слоистую сеть, я в ней начинаю искать пути.
[15:31.400 --> 15:33.400]  Так вот сколько времени занимает поиск пути в слоистой сети?
[15:33.400 --> 15:37.400]  На самом деле поиск пути в слоистой сети занимает...
[15:37.400 --> 15:40.400]  Давайте с этим разберемся.
[15:40.400 --> 15:47.400]  На самом деле я утверждаю, что поиск пути в слоистой сети занимает очень небольшое время.
[15:47.400 --> 15:52.400]  А именно я не более чем в смогу найти этот самый путь.
[15:52.400 --> 15:53.400]  Почему?
[15:53.400 --> 15:57.400]  Допустим, я нахожусь в какой-то вершине.
[15:57.400 --> 16:07.400]  Что мне нужно сделать, чтобы найти следующую вершину на пути от S до T?
[16:07.400 --> 16:16.400]  Мне нужно просто взять и выбрать какой-то из этих ребр, которые у меня остались в слоистой сети.
[16:16.400 --> 16:22.400]  То есть у меня есть слоистая сеть, я знаю все ребра, которые ведут из одного слоя во второй слой.
[16:22.400 --> 16:23.400]  Соответственно, что я делаю?
[16:23.400 --> 16:26.400]  Просто выбираю произвольное ребро и иду вот сюда.
[16:26.400 --> 16:28.400]  Дальше нахожусь в этой вершине, выбираю произвольное ребро.
[16:28.400 --> 16:29.400]  Вот это.
[16:29.400 --> 16:30.400]  Оно единственное.
[16:30.400 --> 16:31.400]  Прохожу вот сюда.
[16:31.400 --> 16:34.400]  Беру произвольное ребро.
[16:34.400 --> 16:35.400]  Прохожу и сюда.
[16:35.400 --> 16:44.400]  То есть на самом деле я всегда могу продвигаться за единицу слоистой сети на один шаг вперед.
[16:44.400 --> 16:49.400]  Соответственно, поиск пути в слоистой сети занимает тоже не больше чем в шагов.
[16:49.400 --> 16:53.560]  я нахожусь в вершине S, выбираю произвольное ребро и слои Cт идут в tab,
[16:53.560 --> 17:02.660]  выбираю произвольное ребро и gaveo, выбираю произвольное и above.
[17:02.660 --> 17:07.000]  Ну и соответственно, сколько всего путей можно найти слои Cт?
[17:07.000 --> 17:09.380]  Вопрос довольно простой. Сколько всего путей можно найти слои Cт?
[17:09.380 --> 17:19.000]  Давайте просто построим просто и beispielsweise к каждому п 1919-го года
[17:19.000 --> 17:25.000]  Поставим в соответствие каждому ребру в слоистой сети, поставим в соответствие некоторой путь.
[17:25.000 --> 17:31.000]  Вот смотрите, вот я нашел какой-то путь в слоистой сети. Давайте его обозначим так.
[17:31.000 --> 17:33.000]  И что я могу сказать? Что я могу сказать про этот путь?
[17:33.000 --> 17:39.000]  Я точно знаю, что на этом пути хотя бы одно ребро станет критическим.
[17:39.000 --> 17:43.000]  Что такое критическое ребро? Критическое ребро – это то ребро, которое насытилось.
[17:43.000 --> 17:46.000]  То есть то ребро, по которому я опустил поток максимально возможной величины.
[17:46.000 --> 17:58.000]  Пусть у меня тут пропускная способность была 5, тут 3, тут 2, тут 4.
[17:58.000 --> 18:03.000]  Соответственно вдоль вот этого пути, который я нашел, я могу пустить поток равный 2.
[18:03.000 --> 18:09.000]  Ну и соответственно я опускаю поток равный 2. То есть тут опускаю 2 единиц потока, тут 2 единицы, тут 2 единицы, и тут 2 единицы.
[18:09.000 --> 18:14.000]  И соответственно вот я вижу, что вот это ребро пропускной способности 2, оно насытилось.
[18:14.000 --> 18:16.000]  То есть в следующий раз я его использовать не смогу.
[18:16.000 --> 18:19.000]  То есть оно на самом деле уходит из моей слоистой сети.
[18:19.000 --> 18:25.000]  То есть каждый путь уменьшает количество ребер в слоистой сети, ну и в графе получается в целом, на единицу.
[18:25.000 --> 18:27.000]  Как минимум на единицу.
[18:27.000 --> 18:35.000]  Ну и соответственно это означает, что общее количество пустей в слоистой сети не больше, чем е. Не более, чем е.
[18:35.000 --> 18:39.000]  Потому что каждый путь убирает хотя бы одно ребро.
[18:39.000 --> 18:44.000]  То есть в худшем случае, если у меня каждый путь будет убирать всего лишь одно ребро,
[18:44.000 --> 18:48.000]  то соответственно в любом случае я получу, что количество пустей у меня будет не больше, чем е.
[18:48.000 --> 18:53.000]  Потому что я не могу убрать из графа больше ребер, чем у него было изначально.
[18:53.000 --> 19:00.000]  Ну вот кажется все. Кажется мы поняли, что асимптотику алгоритма 1.
[19:00.000 --> 19:03.000]  То есть нужно взять вот эти три чиселки и просто просто перемножить. Почему?
[19:03.000 --> 19:06.000]  Потому что мы в раз перестраиваем слоистую сеть.
[19:06.000 --> 19:11.000]  Потому что после каждой перестройки такой мы е раз ищем путь в слоистой сети.
[19:11.000 --> 19:14.000]  А каждый поиск в пути занимает в.
[19:14.000 --> 19:19.000]  То есть получается в умножить на е умножить на в.
[19:19.000 --> 19:25.000]  Ну собственно е в а квадрат.
[19:25.000 --> 19:27.000]  Вот.
[19:27.000 --> 19:30.000]  Да, то есть сколько раз нужно перестраивать слоистую сеть не больше, чем в.
[19:30.000 --> 19:32.000]  Так после каждой транса расстояние теста до этого увеличивается.
[19:32.000 --> 19:35.000]  Сколько раз времени занимает поиск в пути слоистой сети меньше ребра, чем в.
[19:35.000 --> 19:37.000]  Потому что просто переходим от одного слоя ко второму.
[19:37.000 --> 19:40.000]  То есть не нужно перебирать всевозможные пути.
[19:40.000 --> 19:44.000]  Мы просто-напросто выбираем произвольное ребро и идем от одного слоя ко второму.
[19:44.000 --> 19:46.000]  Скоро всего в пути можно найти слоистой сети не больше, чем е.
[19:46.000 --> 19:48.000]  Каждый путь находит хотя бы одно критическое ребро.
[19:48.000 --> 19:53.000]  Ну и поэтому перемножая все эти числа, получаем, что сложить алгоритмы не более чем в.
[19:53.000 --> 19:57.000]  А квадрат умножить на е.
[19:57.000 --> 19:59.000]  Вот.
[19:59.000 --> 20:01.000]  Ну там плюс да.
[20:01.000 --> 20:04.000]  Ну и тут написано еще плюс от е, но это на всякие дополнительные технические детали.
[20:04.000 --> 20:09.000]  Типа того, что если у нас критическое ребро, то его нужно удалить из графа и так далее.
[20:09.000 --> 20:11.000]  Ну это мелочи все.
[20:11.000 --> 20:13.000]  Вот.
[20:13.000 --> 20:15.000]  Такие дела.
[20:15.000 --> 20:17.000]  Вот такой алгоритм 1.
[20:17.000 --> 20:26.000]  Ну и соответственно, какие еще алгоритмы поиска потока максимальной величины существуют.
[20:26.000 --> 20:28.000]  Ну в общем, если говорить про.
[20:28.000 --> 20:31.000]  Ну вот мы сейчас рассмотрели теорию Форда Фалкерсона.
[20:31.000 --> 20:34.000]  В прошлый раз рассмотрели теорию Форда Фалкерсона.
[20:34.000 --> 20:36.000]  И соответственно, рассмотрели три алгоритма, которые на ней основаны.
[20:36.000 --> 20:39.000]  Первый алгоритм Форда Фалкерсона непосредственно.
[20:39.000 --> 20:41.000]  С помощью алгоритма DFS.
[20:41.000 --> 20:46.000]  Дальше мы собственно поняли, что если вместо DFS использовать BFS, то мы получаем, во-первых, алгоритмы Адмедскарпа.
[20:46.000 --> 20:55.000]  Во-вторых, получаем более хорошую, скажем так, более оптимистичную асимптотику, которая не зависит от ответа.
[20:55.000 --> 21:03.000]  Ну и соответственно, после того, как мы поняли, что на самом деле не нужно на каждой итерации постоянно вызывать алгоритм BFS.
[21:03.000 --> 21:07.000]  Можно воспользоваться, соответственно, построенной слоистой сетью.
[21:07.000 --> 21:14.000]  Мы, соответственно, построили алгоритм Динеца, который, давайте напомню все сложности алгоритмов.
[21:14.000 --> 21:23.000]  Есть Форт Фалкерсон, который работает за O'e умножить на мощную, на величину оптимального потока.
[21:23.000 --> 21:28.000]  Значит был Адмедскарп, его сложность от V на E квадрат.
[21:28.000 --> 21:34.000]  И есть Динец, сложность которого E на V квадрат.
[21:34.000 --> 21:39.000]  Значит, можно ли лучше? Ответ да.
[21:39.000 --> 21:43.000]  И есть такой алгоритм, трех ИДУСов.
[21:43.000 --> 21:48.000]  Алгоритм Алхотра и Кумара Махешвари, который работает за O от V куб.
[21:48.000 --> 21:53.000]  Мы с вами понимаем даже, что алгоритм Динец, если граф плотный, то он работает за V в четвертой степени.
[21:53.000 --> 21:56.000]  Если граф разрежен, то он работает за V куб.
[21:56.000 --> 22:00.000]  Вот алгоритм Алхотра и Кумар Махешвари, он работает за V куб в любом случае.
[22:00.000 --> 22:03.000]  Я думаю, мы его бегло сейчас рассмотрим.
[22:03.000 --> 22:11.000]  Если возникает вопрос, а какой алгоритм в принципе существует наиболее оптимальный, то из того, что мне удалось найти,
[22:11.000 --> 22:19.000]  есть алгоритм Орлинг, который основан не на теориями Форда Фалкерсона и работает за O от V.
[22:19.000 --> 22:26.000]  Если говорить про алгоритм, который основан на теориями Форда Фалкерсона, то отоптимальный это алгоритм Алхотра и Кумар Махешвари.
[22:26.000 --> 22:30.000]  Есть много других алгоритмов поиска потоков.
[22:30.000 --> 22:37.000]  В случае интереса можете рассмотреть самостоятельно на всякие push relabel схемы и так далее.
[22:37.000 --> 22:42.000]  По-моему, Орлинг как раз основан на методе push relabel.
[22:42.000 --> 22:46.000]  Он работает за O V E.
[22:46.000 --> 22:52.000]  Асимптотика, которая в некоторых ситуациях лучше, чем V куб.
[22:52.000 --> 22:55.000]  При этом он основан не на теориями Форда Фалкерсона.
[22:55.000 --> 23:01.000]  Сейчас я предлагаю рассмотреть алгоритм Алхотра и Кумар Махешвари.
[23:01.000 --> 23:07.000]  В чем его идея? Почему он позволяет улучшить асимптотику до V куба?
[23:07.000 --> 23:13.000]  Почему он позволяет уменьшить множитель E до V?
[23:13.000 --> 23:16.000]  В чем его особенность?
[23:16.000 --> 23:20.000]  Давайте посмотрим.
[23:20.000 --> 23:28.000]  Я предлагаю просто открыть статью Алхотра, Кумар Махешвари и посмотреть, что они пишут.
[23:28.000 --> 23:33.000]  Это статья 1978 года.
[23:33.000 --> 23:38.000]  И можно промешаться по алгоритму, который они предлагают.
[23:38.000 --> 23:47.000]  Во-первых, тут сразу видно, что у нас есть знакомое обозначение, что у нас действительно есть поток F, есть соответственно плюсовая способность C,
[23:47.000 --> 23:53.000]  есть условия на то, что у нас поток нигде не накапливается, кроме вершин S и T и так далее.
[23:53.000 --> 24:03.000]  Тут ссылка на алгоритм Диница, который работает за VE-итерацией.
[24:03.000 --> 24:06.000]  Что предлагается? На самом деле алгоритм довольно-таки идейно прост.
[24:06.000 --> 24:09.000]  Вот смотрите, что мы делали в алгоритме Диница.
[24:09.000 --> 24:14.000]  Ну и вообще в алгоритме Эдмана Скарпа и Форда Фалкерсона.
[24:14.000 --> 24:19.000]  Мы, собственно, пускали поток по ребрам.
[24:19.000 --> 24:27.000]  Давайте вернем все сюда.
[24:27.000 --> 24:28.000]  В чем была идея?
[24:28.000 --> 24:39.000]  Вот у нас был S, был T, и мы, соответственно, искали путь из S до T.
[24:39.000 --> 24:44.000]  И, соответственно, тут, допустим, C1, C2, C3, C4.
[24:44.000 --> 24:50.000]  И на этом пути искали, соответственно, ребро с минимальной пропускной способностью, например, C2.
[24:50.000 --> 24:58.000]  Искали ребро с минимальной пропускной способностью C2 и, соответственно, пускали вдоль этого пути поток размера C2.
[24:58.000 --> 25:03.000]  Потому что это максимальный поток, который мы можем пустить вдоль этого пути.
[25:03.000 --> 25:10.000]  А вот алгоритм алкоголя Трукумер Мэшшфарь предлагает сделать другую вещь, предлагает сделать нечто более интересное.
[25:10.000 --> 25:16.000]  А именно, давайте посмотрим на все вершины слоей сети.
[25:16.000 --> 25:19.000]  И введем такое понятие, как потенциал вершины.
[25:19.000 --> 25:20.000]  Что такое потенциал вершины?
[25:20.000 --> 25:25.000]  Потенциал вершины – это, собственно, то количество потока, которое может протечь через данную вершину.
[25:25.000 --> 25:26.000]  Как его можно понять?
[25:26.000 --> 25:27.000]  Ну, понять его довольно просто.
[25:27.000 --> 25:37.000]  Давайте снова вернемся сюда и посмотрим, как можно оценить количество поток, которое может протечь через вершину.
[25:37.000 --> 25:39.000]  Во-первых, из вершины есть исходящие ребра.
[25:39.000 --> 25:41.000]  Во-вторых, в вершине есть входящие ребра.
[25:41.000 --> 25:50.000]  Допустим, тут пропускная способность α1, α2, а3, вот бета1, бета2, бета3.
[25:51.000 --> 25:58.000]  Так вот, пропускная способность вершины х, ну или потенциал вершины х, это не что иное,
[25:58.000 --> 26:09.000]  как просто-напросто минимум из бета1 плюс бета2 плюс бета3 и а1 плюс а2 плюс а3.
[26:09.000 --> 26:12.000]  То есть, сколько потока может протечь через вершину.
[26:12.000 --> 26:17.000]  Но это минимум из того, сколько может втечь, и минимум из того, сколько может вытечь.
[26:17.000 --> 26:22.000]  Скажем, если вершину может суммарно прийти не более 10 единиц потока,
[26:22.000 --> 26:28.000]  а выйти может 12 единиц потока, то понятное дело, что больше 10 потока я через вершину никак не протащу,
[26:28.000 --> 26:30.000]  потому что больше десяти в нее никак не придет.
[26:30.000 --> 26:32.100]  Вот такая идея.
[26:32.100 --> 26:36.100]  То есть, для каждой вершины я храню так называемый потенс chemicals.
[26:36.100 --> 26:40.200]  Вот, так определяется, сколько потоку может прийти вершин, и сколько потоку может выйти из вершины.
[26:40.200 --> 26:45.200]  Точнее, наоборот, сколько может выйти из вершины, и сколько может войти в вершину.
[26:45.200 --> 26:55.200]  А дальше соответственно мы делаем следующую вещь. Давайте возьмем вершину с наименьшей пропускной способностью, с наименьшим потенциалом.
[26:55.200 --> 27:11.200]  Чем хороша эта вершина? А вершина хороша тем, что если эта вершина обладает наименьшим потенциалом, то я гарантированно смогу пустить поток вот такой величины через эту вершину.
[27:11.200 --> 27:14.200]  Давайте снова порисуем.
[27:24.200 --> 27:27.200]  Ну вот, допустим, у меня есть какая-то слоистая сеть.
[27:32.200 --> 27:35.200]  Вот такие ребра.
[27:36.200 --> 27:43.200]  Вот, ну и допустим, у меня есть вершина с наименьшей пропускной способностью.
[27:44.200 --> 27:47.200]  А у всех остальных вершин пропускная способность больше.
[27:47.200 --> 27:53.200]  Ну, значит, отсюда, то есть очевидно, что если вот эта вершина обладает наименьшей пропускной способностью,
[27:53.200 --> 28:01.200]  например, альфа, то это значит, что я смогу пропустить ровно альфа потока.
[28:02.200 --> 28:05.200]  Вопрос, почему? Откуда это следует?
[28:05.200 --> 28:07.200]  Ну, все довольно просто.
[28:07.200 --> 28:11.200]  Ну, смотрите, вот здесь я пускаю какой-то альфа-штрих потока, то здесь пускаю альфа-два-штрихо потока.
[28:11.200 --> 28:15.200]  Ну, смотрите, вот у этой вершины пропускная способность явно, ну, speechless,
[28:15.200 --> 28:18.200]  у ее entertained способность от этой вершины больше leadership than alpha.
[28:18.200 --> 28:21.200]  Ну, соответственно, альфа-штрих� потока, она явно может вместить.
[28:21.200 --> 28:24.200]  У этой вершины тоже пропускная способность больше leadership than alpha,
[28:24.200 --> 28:27.200]  поэтому alpha-два-штрихо поток она точно может впростую себя пропустить.
[28:28.140 --> 28:29.580]  Для вот этих вершин то же самое.
[28:29.580 --> 28:32.320]  Допустим, тут бета-штрих, тут бета-два-штриха.
[28:32.320 --> 28:34.400]  Соответственно, понятное дело, что эта вершина может
[28:34.400 --> 28:37.080]  отпустить себя больше, чем альфа, и больше равно, чем альфа.
[28:37.080 --> 28:39.960]  И понятное дело, что альфа больше равно, чем бета-штрих
[28:39.960 --> 28:42.160]  и больше равно, чем бета-два-штриха.
[28:42.160 --> 28:44.840]  Расс Underground вот таким образом я прихожу к тому,
[28:44.840 --> 28:47.060]  что на самом деле из вот этой вершины я могу
[28:47.060 --> 28:50.840]  пустить поток любой величины в любую другую вершину.
[28:50.840 --> 28:52.840]  Ну и абсолютно аналогично вот из этих вершин я тоже
[28:52.840 --> 28:54.860]  могу пустить произвольное количество потоков как
[28:54.860 --> 28:56.860]  в обратном направлении.
[28:56.860 --> 28:58.860]  Вот.
[29:00.860 --> 29:02.860]  Окей.
[29:04.860 --> 29:06.860]  Ну вот, соответственно,
[29:06.860 --> 29:08.860]  можно сказать, что буквально сейчас
[29:08.860 --> 29:10.860]  доказал Лему, что если
[29:10.860 --> 29:12.860]  есть вершина с минимальной
[29:12.860 --> 29:14.860]  пропускной способностью, в данной статье
[29:14.860 --> 29:16.860]  называется ReferenceNode,
[29:16.860 --> 29:18.860]  то, соответственно, я смогу
[29:18.860 --> 29:20.860]  пустить через мою транспортную сеть
[29:20.860 --> 29:22.860]  ровно такое количество потока.
[29:22.860 --> 29:24.860]  Ну, действительно, довольно просто.
[29:24.860 --> 29:26.860]  Если вершина обладает
[29:26.860 --> 29:28.860]  перед нами максимальной пропускной способностью,
[29:28.860 --> 29:30.860]  то понятно дело, что я могу...
[29:30.860 --> 29:32.860]  что из нее я могу пустить столько же потока
[29:32.860 --> 29:34.860]  во все остальные вершины,
[29:34.860 --> 29:36.860]  так как у них пропускной способности больше,
[29:36.860 --> 29:38.860]  то я точно через них могу только протащить.
[29:38.860 --> 29:40.860]  Ну и плюс, соответственно
[29:42.860 --> 29:44.860]  и наоборот.
[29:44.860 --> 29:46.860]  Я могу в этот вершину
[29:46.860 --> 29:48.860]  в пустить столько единиц потока.
[29:48.860 --> 29:50.860]  Потому что из ее соседей,
[29:50.860 --> 29:56.180]  соседей они тоже больше, чем у самой эта
[29:59.820 --> 30:02.460]  вершина, конечно. Ну, вот, соответственно, алгоритм довольно простой. Давайте, собственно, строить вот эти
[30:02.460 --> 30:02.880]  самые транспортные сети, искать вершину с наименьшей
[30:02.880 --> 30:09.900]  способностью и пускать максимальный поток через эту вершину.ائ
[30:09.900 --> 30:13.260]  Каким образом? то есть берем эту вершину
[30:13.260 --> 30:18.940]  и протаскиваем его сейчас Leoni Saya,
[30:18.940 --> 30:23.940]  и протаскиваем вот такое количество потока через, ну, количество потока альфа
[30:23.940 --> 30:27.940]  через эту вершину прямого направления и, ну, грубо говоря, в обратном направлении.
[30:27.940 --> 30:33.940]  То есть из этой вершины в t и из этой вершины в s.
[30:33.940 --> 30:36.940]  Что мы получаем таким образом? Ну, таким образом мы получаем следующую вещь,
[30:36.940 --> 30:40.940]  что на каждой итерации, давайте вспомним алгоритм Деница,
[30:40.940 --> 30:43.940]  что утверждалось в алгоритме Деница? В алгоритме Деница утверждалось,
[30:43.940 --> 30:45.940]  что и на каждой итерации в слоистой сети ищем количество путей,
[30:45.940 --> 30:49.940]  которым находим в слоистой сети не превосходит e.
[30:49.940 --> 30:54.940]  Почему? Потому что на каждой итерации мы удаляем одно ребро,
[30:54.940 --> 30:56.940]  так на каждой итерации мы удаляем одно ребро, ну, как минимум одно ребро,
[30:56.940 --> 31:01.940]  а то, соответственно, в худшем случае у нас e-итераций.
[31:01.940 --> 31:04.940]  А что происходит здесь? Вот в этой алгоритме, в этом алгоритме на каждой итерации мы удаляем одну вершину.
[31:04.940 --> 31:08.940]  Все, то есть если мы через вершину пустили максимальное количество потока,
[31:08.940 --> 31:12.940]  то все, эту вершину больше использовать в будущем не сможем.
[31:12.940 --> 31:19.240]  так как мы на каждой итерации, то есть у нас была оценка v умножить на e умножить на v,
[31:19.240 --> 31:24.240]  а тут мы изменили оценку до v умножить на v умножить на v, да, то есть вот.
[31:24.240 --> 31:30.940]  То есть раньше у нас каждый новый поток убирал одно ребро, то есть одно ребро становилось критическим,
[31:30.940 --> 31:35.740]  то тут в этом алгоритме у нас вершина, каждая вершина становится критической не более одного раза.
[31:35.740 --> 31:40.340]  Да, ну все, соответственно, здесь оценка умножить или меняется на v,
[31:40.340 --> 31:44.440]  соответственно, в итоге получаем у большой от v в кубе.
[31:44.440 --> 31:49.540]  Вот, соответственно, вот такая вот, вот такая вот идея.
[31:49.540 --> 31:53.540]  Ну и на этом, в принципе, статья заканчивается.
[31:53.540 --> 31:59.540]  Вот такой вот алгоритм, который основан, ну, с одной стороны, основан на идее алгоритма Диннице,
[31:59.540 --> 32:03.340]  но с другой стороны использует в полной мере теорему Форда Фалкерсона.
[32:03.540 --> 32:06.540]  То есть как он использует теорему Форда Фалкерсона, очень просто.
[32:06.540 --> 32:11.040]  То есть мы тоже, то есть тоже у нас есть некоторый поток, то есть некоторая транспортная сеть,
[32:11.040 --> 32:13.040]  в которой мы, в которой у нас есть текущий поток.
[32:13.040 --> 32:16.840]  Да, мы в ней пытаемся как-то найти дополнительный поток,
[32:16.840 --> 32:23.340]  но в данном случае мы ищем дополнительный поток через, который проходит через конкретную вершину, вот.
[32:23.340 --> 32:30.340]  Ну и, соответственно, ну и, соответственно, добавляем этот поток,
[32:30.340 --> 32:35.340]  ну этот, ну этот ручеек, да, к нашему, к нашему потоку, вот.
[32:35.340 --> 32:41.340]  Ну, соответственно, вот, наверное, вот полный обзор, полный обзор методов
[32:43.340 --> 32:50.340]  для работы с, для работы с потоками в рамках теоремы Форда Фалкерсона.
[32:50.340 --> 32:55.340]  Так, ну и на этом с потоками мы закончили, ну и, в принципе, наверное,
[32:55.340 --> 33:01.340]  с модулем, посвященным графам в этом семестре мы тоже закончили.
[33:01.340 --> 33:05.340]  Вот единственное, что у меня осталось, это небольшой разговор про,
[33:05.340 --> 33:12.340]  небольшой дополнительный разговор про кратчайшие, покрытые потоки,
[33:12.340 --> 33:17.340]  и про некоторый алгоритм, который пригодится вам, ну, в одной задаче из задания,
[33:17.340 --> 33:22.340]  ну, в последней, в последней задаче.
[33:30.340 --> 33:36.340]  Да, ну вот, я думаю, что это, наверное, всё, что мы делали,
[33:36.340 --> 33:40.340]  в том числе и в этом числе и в этом числе,
[33:40.340 --> 33:50.340]  Смотрите, что мы с вами обсуждали, когда говорили про алгоритм поиска кратчайшего пути.
[33:50.340 --> 33:53.340]  На самом деле мы рассматривали две постановки задачи. Первая задача это single source.
[33:53.340 --> 34:02.340]  У нас есть одна выделенная вершина, и нам нужно идти пути во все остальные.
[34:02.340 --> 34:19.340]  Была задача all pairs, то есть у нас был граф, и нужно было найти кратчайшее расстояние между всеми парами вершин.
[34:19.340 --> 34:25.340]  Но при этом должен был возникнуть естественный вопрос.
[34:25.340 --> 34:29.340]  Вот смотрите, что мы делаем. Мы берем одну вершину, находим пути до всех остальных.
[34:29.340 --> 34:33.340]  Или мы берем все вершины, находим расстояние между всеми парами вершин.
[34:33.340 --> 34:40.340]  А что если у меня есть конкретная вершина, ну пункт A условно, есть конкретная вторая вершина, пункт B,
[34:40.340 --> 34:48.340]  и я хочу найти кратчайший путь конкретно между вершинами A и B, то есть, грубо говоря, single pair задачи.
[34:48.340 --> 34:55.340]  Ну и согласитесь, что на практике, наверное, эта задача встречается гораздо более часто, чем эти предыдущие две.
[34:55.340 --> 35:01.340]  Условно, вы забиваете какой-нибудь маршрут в навигаторе, то есть берете начальную точку, берете конечную точку,
[35:01.340 --> 35:09.340]  и, соответственно, ищете по какому минимальному маршруту я могу добраться из точки A до точки B.
[35:09.340 --> 35:14.340]  Согласитесь, это более, наверное, практически применимые задачи и более часто встречающие задачи.
[35:15.340 --> 35:21.340]  Собственно, можно ли рассмотреть эту задачу и можно ли ее решить как-то быстрее, чем вот, например, single source задачу, задачу из нового источника.
[35:21.340 --> 35:26.340]  И вот, на самом деле, печальное утверждение заключается в том, что на самом деле single pair задачи является,
[35:26.340 --> 35:31.340]  ну скажем так, в большинстве ситуаций является ничем не проще, то есть не является более простой, чем задача single source.
[35:31.340 --> 35:41.340]  И это довольно понятно, ну и довольно понятно почему, да, потому что, условно, если вам нужно найти кратчайший путь из точки A в точку B,
[35:41.340 --> 35:47.340]  то ваш алгоритм, грубо говоря, должен каким-то образом уметь доказывать, должен уметь доказывать, что этот путь действительно является кратчайшим.
[35:47.340 --> 35:55.340]  То есть условно, мы нашли путь размера 10, и, в общем, вашему алгоритму нужно каким-то образом доказать, что путь, проходящий через точку C,
[35:55.340 --> 36:03.340]  допустим, до точки C, мне расстояние 5, то каким-то образом алгоритм должен уметь доказывать, что путь, который проходит через точку C,
[36:03.340 --> 36:06.340]  он никак не короче, чем вот тот путь, который мы нашли.
[36:06.340 --> 36:12.780]  нашли. Но соответственно, каким образом мне нужно доказать, что расстояние от, что расстояние,
[36:12.780 --> 36:16.740]  что точнее путь, который походит через c, у меня никак не короче, чем вот нужный путь. Ну,
[36:16.740 --> 36:24.100]  по сути, ничего не остается, кроме как найти реальное расстояние от a до c, или расстояние от c
[36:24.100 --> 36:29.980]  до b, и, соответственно, показать, что действительно этот путь длиннее, чем это путь длиннее, чем до b.
[36:29.980 --> 36:34.340]  То есть, грубо говоря, вам в любом случае приходится находить какие-то кратчайшие пути до
[36:34.340 --> 36:38.900]  остальных вершин. То, есть как минимум на всех, для всех вершин, которые находятся на
[36:38.900 --> 36:42.900]  промежуimateг этапах, вам необходимо найти кратчайший путь. И, более того, скорее всего,
[36:42.900 --> 36:47.840]  вам придется найти кратчайший путь до многих других вершин. Но просто, Pyając, что ваш алгоритм
[36:47.840 --> 36:54.540]  был уверен, чтобы ваш алгоритм был уверен, что вы действительно до b нашли кратчайший путь.
[36:54.540 --> 36:58.700]  Ну, по сути так поступает алгоритм DXRE, да?, алгоритм DXRE так и поступает. То есть он,
[36:58.700 --> 37:03.700]  то есть у него есть множество S, то я напоминаю, что в алгоритме Dx у нас есть некоторое множество S,
[37:03.700 --> 37:07.700]  вершины, до которых мы нашли верное кратчайшее расстояние.
[37:07.700 --> 37:11.700]  И по сути мы вершину S, мы это множество S постоянно расширяем, постоянно дополняем.
[37:11.700 --> 37:20.700]  Ну и соответственно, после того, как в нашем множестве S оказалась нужная нам вершина B,
[37:20.700 --> 37:22.700]  мы по сути на этом можем завершить алгоритм.
[37:22.700 --> 37:28.700]  Но даже при этом алгоритм Dx находит кратчайшие пути до многих, скажем так, лишних, до многих лишних вершин.
[37:28.700 --> 37:36.700]  Просто нам для того, чтобы было доказуемо, доказуемо известно, что более короткого расстояния до вершины B мы не найдем.
[37:36.700 --> 37:43.700]  Вот. Поэтому, в общем, мораль заключается в том, что single pair задач, как правило, решаются с помощью single source алгоритмов.
[37:43.700 --> 37:49.700]  Ну, например, с помощью алгоритма Dx, то есть опять же, как выглядит обычный алгоритм поиска кратчайшего
[37:49.700 --> 37:52.700]  расстояния от вершины A до вершины B, до конкретной вершины B.
[37:52.700 --> 37:59.700]  Да, вы запускаете алгоритм Dx, как только у вас вершина B, как только у вас алгоритм Dx дошел до вершины B, вы алгоритм останавливаете.
[37:59.700 --> 38:04.700]  То есть вы не нашли расстояние до всех вершин, но вы нашли расстояние до каких-то вершин, среди которых есть вершина B.
[38:04.700 --> 38:09.700]  Вот. И единственное, что мы тут можем обсуждать, это то, а можем ли мы как-то этот процесс ускорить.
[38:09.700 --> 38:13.700]  Да, ну окей. То есть мы находим кратчайшее расстояние до каких-то лишних вершин.
[38:13.700 --> 38:18.700]  То есть в целом у нас задача single-pair, она в худшем случае никак не быстрее,
[38:18.700 --> 38:23.700]  то есть решение для single-pair задачи никак не может быть быстрее, чем для single-source задачи.
[38:23.700 --> 38:25.700]  Но можем ли мы все-таки как-то ускорить?
[38:25.700 --> 38:29.700]  И ответ – да, можем, воспользовавшись какими-то идеями, какими-то юристиками.
[38:29.700 --> 38:32.700]  Ну, давайте, собственно, одну из них обсудим.
[38:32.700 --> 38:38.700]  Ну, есть довольно-таки понятная идея, которая заключается в том, что очень часто,
[38:38.700 --> 38:42.700]  ну, то есть не имеет смысла искать расстояние из тех вершин, из которых мы, скорее всего, кратчайший путь не найдем.
[38:42.700 --> 38:47.700]  Ну, про что я? Давайте, ну, давайте, давайте обсудим вот такую идею.
[38:47.700 --> 38:50.700]  Вот, допустим, я нахожусь, не знаю, где.
[38:50.700 --> 38:56.700]  Ну, допустим, есть там город. Есть город Казань.
[38:56.700 --> 39:04.700]  И я хочу, соответственно, найти кратчайший маршрут до города Москва.
[39:04.700 --> 39:09.700]  Вот. Что произойдет, если я запущу алгоритм Dijkstra
[39:09.700 --> 39:13.700]  вот, ну, на такой маршрут, да, то есть, условно, я могу взять карту, представить ее в виде графа,
[39:13.700 --> 39:15.700]  соответственно, ребра – это, соответственно, дороги.
[39:15.700 --> 39:18.700]  Ну, длина ребра – это, соответственно, длина дороги.
[39:18.700 --> 39:22.700]  Ну, и, соответственно, каким-то образом хочу построить кратчайший путь.
[39:22.700 --> 39:25.700]  Запущу алгоритм Dijkstra. Что мне сделать алгоритм Dijkstra?
[39:25.700 --> 39:30.700]  Ну, алгоритм Dijkstra сначала найдет, грубо говоря, да, все.
[39:30.700 --> 39:36.700]  Ну, расстояние до всех городов, расстояние до которых меньше, там, условно, ну, 100 километров, давайте так скажем.
[39:36.700 --> 39:41.700]  Вот потом найдет расстояние до всех городов, расстояние, до которых, там, меньше 200 километров.
[39:41.700 --> 39:45.700]  То есть, вот, алгоритм Dijkstra, он находит расстояние по порядку.
[39:45.700 --> 39:50.700]  mashedثر – это, то есть, сначала он находит, там, до одних, то есть, до одного места, потом до второго, потом до третьего и так далее.
[39:50.700 --> 39:51.700]  Ну и так далее.
[39:51.700 --> 39:57.700]  И вот, допустим, мы нашли множество городов, расстояние до которых меньше обрано 500 километров.
[39:57.700 --> 40:02.700]  Да, то есть, вот, мы, вот нашли алгоритм Dijkstra, поиск кратчайшей пути из Казани в Москву.
[40:02.700 --> 40:07.700]  нашел все кратчайшие пузи из Казани до городов, расстояние которых меньше 500 километров.
[40:07.700 --> 40:21.700]  Ну и скажем, тут есть какой-то город, Екатеринбург,
[40:21.700 --> 40:25.700]  который находится, грубо говоря, на нашей вымышленной карте,
[40:25.700 --> 40:27.700]  на другом конце Москвы.
[40:27.700 --> 40:30.700]  То есть, грубо говоря, тут Екатеринбург, тут Москва.
[40:30.700 --> 40:38.700]  Ну и соответственно, находится какой-то город Н.
[40:38.700 --> 40:41.700]  Вопрос.
[40:41.700 --> 40:47.700]  Есть такая конфигурация, вот так работает алгоритм до экстры.
[40:47.700 --> 40:49.700]  Возникает естественный вопрос.
[40:49.700 --> 40:54.700]  А вообще говоря, имеет ли смысл, что лучше, что выгоднее, что эффективнее?
[40:54.700 --> 41:00.700]  Продолжать искать пути из города Н или из более, скажем, западных городов?
[41:00.700 --> 41:06.700]  Или все-таки стоит рассматривать еще пути из Екатеринбурга и вот всех остальных более восточных городов?
[41:06.700 --> 41:13.700]  Ну интуиция, кажется, нам подсказывает, что искать равномерным образом, искать пути,
[41:13.700 --> 41:19.700]  скажем, из Екатеринбурга и, скажем, из Нижнего-Нового города, условно, это путь в никуда.
[41:19.700 --> 41:20.700]  Почему?
[41:20.700 --> 41:25.700]  Потому что вряд ли, раз до Екатеринбурга расстояние 500, вряд ли из Екатеринбурга мы доберемся до Москвы быстрее,
[41:25.700 --> 41:33.700]  чем, скажем, из какого-нибудь Нижнего-Нового города, из какого-нибудь более близкого к Москве города.
[41:33.700 --> 41:39.700]  То есть интуиция нам подсказывает, что если, в принципе, мы понимаем, что какие-то города могут находиться ближе к Москве,
[41:39.700 --> 41:44.700]  какие-то города могут находиться дальше от Москвы, мы с вами понимаем, что в целом, наверное, гораздо эффективнее
[41:44.700 --> 41:51.700]  рассматривать кратчайшие пути из тех городов, которые, соответственно, находятся к цели ближе, чем, соответственно, другие,
[41:51.700 --> 41:54.700]  которые находятся, чем те, которые находятся дальше.
[41:54.700 --> 41:59.700]  И, собственно, то есть, грубо говоря, картинка должна быть не такая, а скорее вот такая.
[41:59.700 --> 42:05.700]  Давайте перерисуем.
[42:05.700 --> 42:11.700]  Да, то есть скорее я бы хотел не такую картинку, а хотел какую-то вот такую картинку.
[42:11.700 --> 42:18.700]  Вот так, так, так, вот так.
[42:18.700 --> 42:24.700]  То есть неравномерные окружности, неравномерные круги, а такие вот вытянутые.
[42:24.700 --> 42:30.700]  То есть я бы хотел, грубо говоря, чтобы города, которые потенциально находятся к Москве ближе,
[42:30.700 --> 42:34.700]  рассматривались чаще, рассматривались раньше, чем те города, которые находятся дальше.
[42:34.700 --> 42:39.700]  То есть, окей, вот эти города теоретически можно рассматривать, но, соответственно,
[42:39.700 --> 42:42.700]  из них я с меньшей вероятностью доберусь до цели быстрее.
[42:42.700 --> 42:46.700]  То есть хотелось бы отдавать приоритет больше к тем городам или больше тем точкам,
[42:46.700 --> 42:51.700]  которые находятся к цели ближе, чем, соответственно, чем остальные.
[42:51.700 --> 43:07.700]  И, собственно, в этом заключается идея алгоритма A star или A звезда.
[43:07.700 --> 43:09.700]  В чем идея этого алгоритма?
[43:09.700 --> 43:11.700]  А идея этого алгоритма простая.
[43:11.700 --> 43:15.700]  Начну от того, я много говорил про DX3, и, собственно, что мы использовали в DX3.
[43:15.700 --> 43:25.700]  В DX3 мы с вами в качестве функции приоритета использовали расстояние от S до V.
[43:25.700 --> 43:34.700]  И, соответственно, был приоритет в DX3.
[43:34.700 --> 43:38.700]  Ну и, собственно, проблема этого приоритета довольно понятна.
[43:38.700 --> 43:41.700]  То есть он рассматривает, грубо говоря, Нижний Новый город и Екатеринбург
[43:41.700 --> 43:44.700]  как одинаковые города при поиске пути исказаний до Москвы.
[43:44.700 --> 43:48.700]  Хотя мы понимаем, что, наверное, Нижний Новый город, он как-то более хорош,
[43:48.700 --> 43:52.700]  чем расстояние до Москвы, чем, скажем, то же самое Екатеринбург.
[43:56.700 --> 43:58.700]  Что предлагает A star?
[43:58.700 --> 44:00.700]  Он предлагает использовать другой приоритет,
[44:00.700 --> 44:04.700]  а именно расстояние от, ну, давайте так напишу,
[44:04.700 --> 44:06.700]  оценка расстояния, да?
[44:08.700 --> 44:12.700]  Тут же D. D от V. D от V.
[44:14.700 --> 44:16.700]  Плюс некоторое H от V.
[44:18.700 --> 44:20.700]  Где H от V?
[44:20.700 --> 44:33.700]  Это оценка расстояния от V до цели T.
[44:33.700 --> 44:38.700]  Вот, давайте тут напишу, что мы осуществляем поиск пути,
[44:38.700 --> 44:44.700]  кратчайшего пути, из S в T.
[44:44.700 --> 44:46.700]  Вот.
[44:47.700 --> 44:52.700]  Оценка расстояния от, от чего я написал?
[44:55.700 --> 44:57.700]  От V до цели T.
[44:57.700 --> 44:58.700]  Вот.
[44:58.700 --> 45:02.700]  Ну и, соответственно, то есть, если у нас, то есть, оценка, то есть, понятно дело,
[45:02.700 --> 45:06.700]  что мы истинного расстояния, там, скажем, от точки N до Москвы, мы его не знаем, да?
[45:06.700 --> 45:08.700]  То есть, мы его только ищем.
[45:08.700 --> 45:10.700]  Но при этом мы можем его как-то оценить.
[45:10.700 --> 45:14.700]  Ну, давайте приведем какие-нибудь примеры Ашке.
[45:14.700 --> 45:16.700]  Что же может являться примером для H?
[45:16.700 --> 45:19.700]  Ну, например, если мы говорим про карту,
[45:19.700 --> 45:24.700]  то мы можем просто-напросто в качестве оценки расстояния от города N до Москвы
[45:24.700 --> 45:26.700]  взять просто-напросто расстояние между ними в километрах, да?
[45:26.700 --> 45:27.700]  То есть, не по дорогам, да?
[45:27.700 --> 45:30.700]  Просто вот взять чисто географическое расстояние, да?
[45:30.700 --> 45:32.700]  Там вот по глобусу, да?
[45:32.700 --> 45:33.700]  И, соответственно, сказать, что вот такое расстояние.
[45:33.700 --> 45:36.700]  Ну, или даже там по хорде, да? По хорде земного шара.
[45:36.700 --> 45:37.700]  Ну, неважно. Вот.
[45:37.700 --> 45:39.700]  Ну, вот какая оценка.
[45:39.700 --> 45:42.700]  Да? Или скажем, если у нас есть, ну, опять же, да.
[45:42.700 --> 45:44.700]  Не знаю, ну возьмем какой-нибудь робот-пылесос, да?
[45:44.700 --> 45:45.700]  Вот есть робот-пылесос.
[45:45.700 --> 45:49.700]  Соответственно, вот вот есть у нас квартира
[45:49.700 --> 45:51.700]  в которой, соответственно, есть какие-то там преграды и так далее.
[45:51.700 --> 45:53.700]  И вот, соответственно, роботу нужно браться из�로 expansive,
[45:53.700 --> 45:54.700]  вот, из точки X с точки Y.
[45:54.700 --> 45:57.700]  Да? Понятно дело, что вот он не знает крочейший путь.
[45:57.700 --> 45:58.700]  Тогда что может являться...
[45:58.700 --> 45:59.700]  Что может...
[45:59.700 --> 46:00.700]  Вот, есть такая точка, вот.
[46:00.700 --> 46:03.700]  Что может являться оценкой расстояния от этой точки до Y?
[46:03.700 --> 46:06.700]  Ну, оценка расстояния этой точки до Y может быть тоже,
[46:06.700 --> 46:08.700]  собственно, вот это самое непосредственно расстояние.
[46:08.700 --> 46:14.300]  расстояние по прямой, грубо говоря. Вот если бы у нас не было никаких преград, вот по прямой мы добрались за такое-то время, за такое расстояние.
[46:14.820 --> 46:17.180]  Ну или если мы говорим про какую-нибудь сетку,
[46:18.860 --> 46:20.860]  не знаю, там шахматная доска,
[46:21.420 --> 46:28.140]  соответственно, нужно добраться из точки x до точки y, при этом тут есть какие-то там запрещенные клетки или препятствия, то соответственно,
[46:28.900 --> 46:32.860]  ну или там, ну, допустим, x это шахматный король. Тогда что может являться?
[46:32.860 --> 46:37.780]  Оценка расстояния от x до y при условии, что мы не знаем, какие там преграды у нас есть на пути. Но это просто-напросто
[46:38.780 --> 46:40.780]  грубо говоря,
[46:41.720 --> 46:46.780]  расстояние по вертикали дельта x и расстояние по горизонтали дельта y.
[46:48.220 --> 46:49.820]  h от x
[46:49.820 --> 46:56.580]  есть дельта x плюс дельта y. Ну так называемое Манхэттеновское расстояние, то есть расстояние по вертикали и по горизонтали суммы.
[46:57.820 --> 46:59.460]  Ну вот.
[46:59.460 --> 47:08.180]  То есть на самом деле, если у вас есть какая-то конкретная задача, да, там неважная географическая задача, есть одна задача на доске кое-то и так далее, у вас, как правило, есть
[47:08.180 --> 47:14.180]  Есть некоторые представления о том, как может выглядеть оценка расстояния до цели.
[47:14.180 --> 47:20.180]  И в случае, если у вас есть такая оценка, то, соответственно, вы можете воспользоваться алгоритмом A star
[47:20.180 --> 47:22.180]  и, соответственно, использовать вот такие приоритеты.
[47:22.180 --> 47:26.180]  В остальном алгоритм практически не отличается от алгоритма Dexter.
[47:26.180 --> 47:30.180]  То есть мы работаем точно также, тоже достаем вершины в порядке приоритета.
[47:30.180 --> 47:35.180]  Но уже в качестве приоритета используем не оценку расстояния массива D,
[47:35.180 --> 47:39.180]  а используем вот такую-то оценку, то есть найденное расстояние плюс, соответственно,
[47:39.180 --> 47:42.180]  оценка расстояния от текущей точки до цели.
[47:42.180 --> 47:47.180]  Возникает вопрос, ну, хорошо, что если у меня оценка плохая?
[47:47.180 --> 47:49.180]  Что если я выбрал плохую оценку?
[47:49.180 --> 47:53.180]  Ну, допустим, у меня оценка вообще не точная.
[47:53.180 --> 47:56.180]  То есть верный решитель алгоритм будет работать корректно.
[47:56.180 --> 47:58.180]  Ну, ответа, естественно, нет.
[47:58.180 --> 48:00.180]  Дело в том, что вот эту самую оценку, оценку h,
[48:00.180 --> 48:04.180]  ну, выбирать абы какой нельзя.
[48:04.180 --> 48:09.180]  И существует теорема, которая у нас будет без доказательства.
[48:13.180 --> 48:17.180]  Теорема без доказательств, которая утверждает следующее, что...
[48:17.180 --> 48:20.180]  Давай для начала определение ведем.
[48:20.180 --> 48:24.180]  Оценка h является допустимой,
[48:32.180 --> 48:36.180]  а если h от v меньше броно, чем wt.
[48:36.180 --> 48:40.180]  То есть h,
[48:40.180 --> 48:44.180]  а если h от v меньше броно, чем wt.
[48:44.180 --> 48:47.180]  То есть,
[48:48.180 --> 48:52.180]  h нижняя оценка
[48:56.180 --> 48:58.180]  на расстояние
[49:01.180 --> 49:03.180]  до t.
[49:03.180 --> 49:07.180]  То есть, ну, еще называют ее, еще иногда называют оптимистичная,
[49:07.180 --> 49:11.180]  оптимистичная оценка, или h оптимистичная оценка.
[49:17.180 --> 49:23.180]  Так вот, если вы выбрали такую h, что она не, скажем так,
[49:23.180 --> 49:26.180]  не переоценивает расстояние до цели,
[49:26.180 --> 49:29.180]  вот всегда эта оценка строго меньше, чем истинное расстояние,
[49:29.180 --> 49:32.180]  то тогда эта оценка называется допустимой.
[49:32.180 --> 49:34.180]  И если вы посмотрите на те примеры, которые я приводил,
[49:34.180 --> 49:37.180]  на самом деле все эти примеры являются примерами как раз допустимых оценок.
[49:37.180 --> 49:41.180]  Потому что чисто географическое расстояние, то есть просто-напросто вот по карте.
[49:41.180 --> 49:44.180]  Понятное дело, что это оптимистичная оценка, потому что быстрее,
[49:44.180 --> 49:48.180]  то есть короче пути, чем вот просто-напросто вот по прямой,
[49:48.180 --> 49:52.180]  без учета всяких дорог, населенных пунктов и так далее, вы придумать не можете.
[49:52.180 --> 49:56.180]  То же самое касается вот Манхеновской метрики, если мы говорим про какую-нибудь шахматную доску.
[49:56.180 --> 49:59.180]  Понятное дело, что быстрее, чем разница по x и разница по y,
[49:59.180 --> 50:02.180]  ну, за такое количество шагов, если мы говорим про шахматного короля,
[50:02.180 --> 50:04.180]  вы не доберетесь.
[50:04.180 --> 50:08.180]  Ну, опять же, если мы запрещаем еще походить в диагонали и так далее.
[50:10.180 --> 50:13.180]  Да, то есть если можно ходить вверх-вниз, влево-право.
[50:13.180 --> 50:17.180]  Ну, или если мы говорим про навигацию в комнате.
[50:17.180 --> 50:20.180]  То есть опять же, если мы идем по прямой, то есть если мы учтем состояние только по прямой,
[50:20.180 --> 50:23.180]  без учета всяких переград, то понятное дело, что это тоже оптимистичная оценка.
[50:24.180 --> 50:26.180]  Так вот, соответственно, теорема.
[50:37.180 --> 50:38.180]  Если h допустимо.
[50:43.180 --> 50:45.180]  То а стар оптимален.
[50:48.180 --> 50:51.180]  То есть алгоритм находит оптимальное решение задач.
[50:51.180 --> 51:00.180]  То есть он находит реальный кратчайший путь из конкретной вершины s до конкретной вершины t.
[51:02.180 --> 51:04.180]  Ну, собственно, поэтому...
[51:05.180 --> 51:10.180]  Да, ну и понятное дело, что в рамках этого алгоритма существует много всяких...
[51:10.180 --> 51:13.180]  На самом деле не так, чтобы много, потому что алгоритм эвристический.
[51:13.180 --> 51:17.180]  То есть я не сказал, что алгоритм является эвристическим.
[51:22.180 --> 51:28.180]  Потому что понятное дело, что для него сложно придумать какие-нибудь гарантии, которые работают всегда.
[51:28.180 --> 51:33.180]  Потому что алгоритм, время работы алгоритма, его эффективность и так далее,
[51:33.180 --> 51:37.180]  они очень сильно зависят от того, какую оценку h вы используете, от того, какую задачу вы решаете.
[51:37.180 --> 51:41.180]  То есть не важно на какой-нибудь географической местности и так далее.
[51:41.180 --> 51:43.180]  Все очень сильно зависит от выбора функции h.
[51:44.180 --> 51:52.180]  Но в целом существует ряд утверждений, которые говорят о том, что чем ближе h к истине, тем быстрее работает алгоритм.
[51:52.180 --> 51:57.180]  То есть тем быстрее он находит правильный ответ.
[51:57.180 --> 51:58.180]  То есть рецепт на самом деле такой.
[51:58.180 --> 52:03.180]  То есть если вам нужно как можно быстрее найти кратчайшее расстояние между заданной парой точек,
[52:03.180 --> 52:07.180]  то вы используете алгоритм a star, придумываете какую-нибудь эвристическую функцию h,
[52:07.180 --> 52:14.180]  которая умеет довольно-таки точно оценивать расстояние между точкой x и точкой y.
[52:14.180 --> 52:17.180]  И при этом так, чтобы она не переоценивала это расстояние.
[52:17.180 --> 52:20.180]  Чтобы эта оценка обязательно была оценкой снизу.
[52:20.180 --> 52:25.180]  В этом случае вам будет гарантирована, во-первых, что алгоритм найдет правильное решение.
[52:25.180 --> 52:30.180]  Во-вторых, если ваша оценка достаточно точна, то решение будет найдено несколько быстрее,
[52:30.180 --> 52:36.180]  чем обычный алгоритм dx или любые другие алгоритмы поиска кратчайших путей.
[52:36.180 --> 52:44.180]  Вот такое замечание, такое отступление, которое я хотел сделать по поводу поиска кратчайших путей.
[52:44.180 --> 52:50.180]  То есть задача поиска кратчайших путей между конкретной парой вершин не может быть проще,
[52:50.180 --> 52:53.180]  чем задача поиска путей из одной вершины до всех остальных.
[52:53.180 --> 52:59.180]  Но в некоторых ситуациях, если мы знаем конкретную задачу, если мы знаем конкретный домен,
[52:59.180 --> 53:04.180]  на котором она выполняется, то алгоритма star иногда позволяет добиться более быстрых решений.
[53:04.180 --> 53:12.180]  Ну и, как я уже сказал, у вас есть задача последняя, в которой алгоритма star может пригодиться,
[53:12.180 --> 53:16.180]  в которую она может дать более эффективное решение.
[53:16.180 --> 53:21.180]  Ну, на этом, собственно, вся, наверное, алгоритмическая часть нашего курса подошла к концу.
[53:21.180 --> 53:25.180]  То есть, в целом, все, что было запланировано в этом семестре, я рассказал.
[53:25.180 --> 53:33.180]  Ну, я, наверное, для себя сейчас сделаю 5 минут перерыв.
[53:33.180 --> 53:41.180]  Ну и после перерыва перейду к последней лекции по плюсам.
[53:41.180 --> 53:42.180]  Вот.
