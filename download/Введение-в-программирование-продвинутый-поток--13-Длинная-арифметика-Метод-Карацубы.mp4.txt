[00:00.000 --> 00:16.700]  при образовании фуге на уровне слышал такое слово сочетание так кто знает о чем он вообще так ну да
[00:16.700 --> 00:29.380]  так так так рекурсивный рекурсивный это правда ну чтобы разобраться чуть такое ладно
[00:29.380 --> 00:34.900]  значит поехали ну собственно хедлайнерам ближайших нескольких лекций у нас будет метод разделяй
[00:34.900 --> 00:42.460]  властвуй вот на нем будет основано все вот хотя формально говоря тема у нас называется длинная
[00:42.460 --> 00:53.940]  арифметика да вот именно об этом мы и будем а как же больше чем ты думаешь с нее и начнем
[00:53.940 --> 01:00.260]  можно сказать и так ладно давайте попроще вопрос кто когда-нибудь в жизни писал длинную арифметику
[01:00.260 --> 01:11.620]  так ага не но хотя бы вот на уровне сложение вычитания а кто когда-нибудь писал умножение
[01:11.620 --> 01:19.020]  длинных чисел так а умножение длинных чисел быстрее чем закуп
[01:19.020 --> 01:34.740]  кто умножает умножать числа длины n быстрее чем закуп умеешь
[01:34.740 --> 01:43.860]  но я имею в виду крыша они-то это да спасибо да отлично давайте все проснулись молодцы вот так
[01:43.860 --> 01:59.980]  хорошо а кто умеет писать длинное деление быстрее чем закуп даже лоб квадрат окей а залог так окей
[01:59.980 --> 02:11.980]  а длинное деление чего а длинных многочленов ну ладно но соответственно давайте вспоминать и так
[02:11.980 --> 02:15.860]  но о чем у нас речь да как мы с вами знаем действительно у нас к сожалению лонг-лонг даже
[02:15.860 --> 02:20.820]  лонг-лонг он хранит только маленькие числа ну маленькие по количеству знаков конечно они
[02:20.820 --> 02:26.940]  по величине вот но тем не менее но вот но иногда очень хочется работать чуть-чуть более длинными
[02:26.940 --> 02:35.820]  числами например длина 100 тысяч или даже 100 тысяч что в таких случаях мы можем сделать ну конечно
[02:35.820 --> 02:47.620]  же самый простой метод который у нас возникает есть у нас есть какие-то числа это 4 2 3 4 но не настолько не
[02:47.620 --> 02:58.700]  настолько вот вот но соответственно как хранить такое число вот но то соответственно его можно
[02:58.700 --> 03:03.780]  конечно загнать вектор там хранить скажем по одной циферке в чем обычно с млад начинает с младших
[03:03.780 --> 03:09.820]  разрядов то есть поэтому там как бы самый простой версии там этот вектор будет выглядеть вот
[03:09.820 --> 03:22.660]  примерно вот таким вот образом так 2 там 5 8 9 8 там 7 9 6 там 9 но и так но и так далее не
[03:22.660 --> 03:33.180]  будут но не знаю по вам наоборот так вот тем более шерек до конца не дописывает не важно вот
[03:33.180 --> 03:40.420]  значит данном случае так вот вот ну тогда мы понимать до такое число можно хранить за от его
[03:40.420 --> 03:45.460]  длины и с ним уже можно делать какие-то операции вот у меня если вы хотите сложить два вот таких
[03:45.460 --> 03:54.020]  длинных числа ну вот то это легко сделать за от их длины ну там формально говоря за от максимума
[03:54.020 --> 04:01.180]  от их длин там плюс один ну просто складывая просто числа столбиком вот складывали так
[04:01.180 --> 04:08.740]  кто когда-нибудь складывал числа столбиком ну нет ну мало ли знаете там это школьное
[04:08.740 --> 04:12.580]  образование меняется может там сейчас считают что это во втором классе это делать не надо там
[04:12.580 --> 04:23.980]  я не знаю нет нет ну почему нет но сумоки вот но действительно то есть как вы это понятно но
[04:23.980 --> 04:28.460]  собственно вы все это сразу поэтому понимаете что реализовать это достаточно несложно ну и
[04:28.460 --> 04:35.980]  вычитание тоже конечно несложно тоже за линию реализовать вот но вот но конечно оно вот это
[04:35.980 --> 04:43.060]  все делается за линию вот но есть конечно более сложной операции умножение умножать тоже мы
[04:43.060 --> 04:51.060]  обычно очень любим умножать нот умножать столбиком вот но правда конечно вы замечаем
[04:51.060 --> 04:59.580]  что стандартный метод умножения это делать все-таки за квадрат да ну пока столбиком действительно
[04:59.580 --> 05:06.140]  получается вот но правда конечно это уже бывает многовато какие оптимизации тут возможно но
[05:06.140 --> 05:11.260]  самая простая оптимизация на самом деле заключается в том же что а кто сказал что в каждом разряде нужно
[05:11.260 --> 05:18.740]  хранить по одной цифре вообще то есть ведь на самом деле то можно то есть как бы мы храним по одной
[05:18.740 --> 05:25.020]  цифре потому что у нас основание системы счастливее 10 но с другой стороны почему бы нам не сделать
[05:25.020 --> 05:33.020]  основание стиму 4 век 10 тысяч ну что к чему нас это приведет это нас придет потому что число
[05:33.020 --> 05:40.740]  будет храниться то есть уже по 4 цифра в ячейке то есть в одном инте то есть получится там скажем тут
[05:40.740 --> 05:50.980]  485 ну подразумевает тут какой-то 0 значит тут что будет две там 8 520 будет да что-то еще будет
[05:50.980 --> 06:03.460]  9 789 ну и так далее вот можно там по 4 вот да это но это операция конечно не не симпатически оптимизирует
[06:03.460 --> 06:11.700]  вот нету что повезет просто это это как бы она оптимизирует константу раз другой стороны когда
[06:11.700 --> 06:19.060]  в случае вот обычно умножение это константа 16 то это неплохо правда то есть все-таки ну
[06:19.060 --> 06:26.220]  соответственно ну вот ну конечно там может быть заговорками что может быть вам потребуется
[06:26.220 --> 06:30.300]  тепло он глонг и поэтому там будет не 16 все-таки чуть-чуть меньше но тем не менее это все равно
[06:30.300 --> 06:36.740]  значительно более того на самом деле для непосредственно ну то есть вот то есть единственное
[06:36.740 --> 06:41.980]  тут вот ограничение то что кто сказал что по 10 тысяч потому что по идее еще иногда применяется
[06:41.980 --> 06:50.340]  хранение просто по 9 цифр вообще то есть по модулю то есть по основанию системе члене миллиард
[06:50.340 --> 06:59.420]  нет это не совсем то миллиард 7 это когда вы вам достаточно только остаток отделения это немножко
[06:59.420 --> 07:07.940]  другая песня вот а в данном случае просто по основанию миллиард то есть просто по 9 цифр то есть
[07:07.940 --> 07:13.740]  на самом деле пока вы только складываете числа на самом деле это уже неплохо но то есть как бы
[07:13.740 --> 07:19.900]  просто где просто вы как бы в 9 раз меньше и чей памяти храните в айбе но вот то есть правда вот
[07:19.900 --> 07:26.140]  умножать конечно в таких числах проблема то есть дело даже не в скорости а в том что действительно
[07:26.140 --> 07:32.300]  каждое произведение у вас будет тогда порядка 10 18 попарная но вот а максимальный результат
[07:32.300 --> 07:38.780]  который у вас тут в процессе может получиться это что типа 10 18 там соответственно называется
[07:38.780 --> 07:45.700]  умножить на количество ячеек если совсем в тупую это делать вот ну конечно да можно пытаться
[07:45.700 --> 07:52.060]  конечно делать что-то в духе что вы там взяли там аи ты умножили на бж т там умножили на бж
[07:52.060 --> 07:55.900]  т отправя ну вот отправили его в какую ячейку кстати
[07:55.900 --> 08:14.780]  конечно то есть как нет ну нет но на самом деле тривиально собственно это мы даже
[08:14.780 --> 08:20.460]  увидим вот то есть пока так значит с это и плюс жита это вот плюс равно это плюс бж
[08:20.460 --> 08:28.020]  т умножить на бж т и там сказать что-нибудь в духе что если у вас там произошло переполнение
[08:28.020 --> 08:37.340]  так давайте просто прямо здесь это переполнение проталкивать дальше ну вот ну что же у нас тогда
[08:37.340 --> 08:45.740]  но но то есть можно так пытаться там следить собственно увеличится лет это 8 точек или нет
[08:45.740 --> 08:53.420]  вот но правда тем не менее там 4 цифры делать там 9 цифр делать а квадрат остается квадрат
[08:53.420 --> 09:01.300]  в чем зовите это я пока на всех случаях деление не поминаю вот ну вот и на самом деле вот а
[09:01.300 --> 09:07.580]  можно ли умножать быстрее на самом деле такая серьезная математическая проблема которая можно
[09:07.580 --> 09:14.980]  сказать пищи лет стояла вообще то есть дошло даже просто до веселой смешной истории то есть
[09:14.980 --> 09:22.420]  представьте 60-е годы значит где-то какая где-то аудитория некогда какая-то там аудитория михмата
[09:22.420 --> 09:29.540]  мг у на своем семинаре академик колмогоров но там известный математик там частости основоположник
[09:29.700 --> 09:38.100]  вероятностей там и тд и тп думаю фамилия известная и что нот и развод будет говорить что вот у нас
[09:38.100 --> 09:44.780]  есть вот такая проблема умножение длинных чисел как их умножать за квадрат знают уже много тысяч
[09:44.780 --> 09:50.580]  лет еще и два линии древние египтяне знали а вот как быстрее почему-то за столько тысяч лет почему-то
[09:50.580 --> 09:57.740]  никто не придумал значит заключить колмогоров видимо надо искать пути каким образом можно доказать
[09:57.740 --> 10:06.420]  что быстрее нельзя но буквально там едва ли не в конце семинара просто может быть там чуть
[10:06.420 --> 10:12.140]  позже к нему просто подошел то ли студент старших курсов то ли аспирант младших курсов и буквально
[10:12.140 --> 10:18.100]  в три строчки показал кабалгорову что он вообще не прав и умножать длинные числа быстрее чем за
[10:18.100 --> 10:28.820]  квадрат можно и нужно просто простые три строчки значит что же это было вот он сказал смотрите вот
[10:28.820 --> 10:37.020]  жила было у нас вот что такое вообще длинные там вот есть у нас допустим длинное число а да оно у
[10:37.020 --> 10:44.500]  нас равно а 0 вот ну во первых да начнем с того что нажать числа умножать многочлен это примерно одно
[10:44.500 --> 10:50.580]  и то же правда но тут просто такая мысль да что вообще как бы длинное число это что такое это там
[10:50.580 --> 10:57.980]  а 0 плюс а 1 умножить на 10 ну допустим плюс а 2 умножить на 10 в квадрате плюс и так далее плюс
[10:57.980 --> 11:05.700]  а n минус 1 умножить на 10 степени н минус 1 ну по идее мы представляем это в виде такой последователь
[11:05.700 --> 11:12.620]  вот ну а ведь заметим что если мы вместо этого введем многочлен а т который будем хранить ровно
[11:12.620 --> 11:21.180]  в виде тех же коэффициентов вот а 0 плюс а 1 т вот плюс а 2 т квадрат плюс и так далее плюс
[11:21.180 --> 11:30.380]  а n минус 1 умножить на т степени вот то понимаешь что если мы хотим перемножить два многочленов вот
[11:30.380 --> 11:38.300]  у меня допустим такой же многочлен и давайте сейчас я для простоты предположу что но вот эти
[11:38.300 --> 11:45.140]  многочлены даже имеют одинаковое число коэффициент то на самом деле если я найду произведение этих
[11:45.140 --> 11:54.460]  многочленов то я найду и произведение соответствующих длинных чисел ну вот и действительно что же
[11:54.460 --> 11:59.180]  такое произведение многочленов да вот давайте вот как это вот был вопрос откуда вот это вот и
[11:59.180 --> 12:06.740]  плюс же взялось вот давайте увидим это там а т на б т собственно равно то есть просто если честно
[12:06.740 --> 12:15.180]  про произведение писать то тогда понятно что просто перебираем все все ашки перебираем все бшки и
[12:15.180 --> 12:23.460]  попарно перемножаем их и соответствующие там степени т получается а и т на б ж т на т степени
[12:23.460 --> 12:33.540]  степени и плюс же вот вот со второго из-за этого у нас вот именно а и т умножить на б ж т отправляется
[12:33.540 --> 12:40.180]  именно в корреценции ежеды обратите внимание так но вот это у нас по определению вот но это
[12:40.180 --> 12:47.260]  конечно пока пока это все очевидно и тут мысль следующая давайте попробуем применить метод
[12:47.260 --> 12:54.220]  разделяй властой давайте вот сейчас еще прям совсем для простоты давайте еще скажем что n это
[12:54.220 --> 13:01.300]  степень двойки ну вообще-то там ладно лишних нулей в конец многочленов написать это никогда не
[13:01.300 --> 13:10.140]  проблема правда а симпатически это ни на что не повлияет ну да ну мы можем там отдельно обсудить
[13:10.140 --> 13:14.340]  действительно за какой симпатику можно умножать числа если одной из них прям прям принципиально
[13:14.340 --> 13:24.860]  короче другого вот вот но тут тоже пока не судить значит что же у нас получается получается
[13:24.860 --> 13:30.540]  следующее то есть мы можем сказать что давайте вот скажем то есть введем такие числа такую
[13:30.540 --> 13:39.140]  штуку как а 0 которая будет равна а 0 плюс а 1 т плюс и так далее плюс а n пополам минус 1 на
[13:39.140 --> 13:52.540]  т в степени пополам минус 1 но вот и а 1 тоже введен это будет равно b 0 плюс нет бешка тут
[13:52.540 --> 14:00.860]  на бы пока отношениями а тут наоборот а n пополам плюс а n пополам плюс 1 на т вот тут будьте
[14:00.860 --> 14:05.940]  внимательны потому что там в будущем у нас а 0 и 1 будут будут иметь несколько другой смысл ну
[14:05.940 --> 14:16.620]  когда-нибудь потом вот нет n в степень двойки размер количество коэффициент степень
[14:16.620 --> 14:21.420]  двойки сами эти числа могут быть абсолютно произвольные нет но это я просто делаю чтобы
[14:21.420 --> 14:26.700]  разделяй и властвуй был максимально красивый без этих там формальных округлений вот я просто
[14:26.700 --> 14:33.100]  фактически это дело я просто разбираю на расчлен на 2 вот я просто теперь объявляю что у меня
[14:33.100 --> 14:47.860]  теперь а т просто теперь равно а 0 от т плюс т в степени n пополам на а 1 от т вот понимаете
[14:47.860 --> 15:08.060]  да то есть вот такая вот идея более того с бешкой я могу сделать то же самое вот то есть это вот
[15:08.060 --> 15:13.860]  у меня теперь 4 многочлена размера n пополам а теперь если я вот это вот а т буду убирать то
[15:13.860 --> 15:27.020]  что я вижу я вижу что а б равно чему равно а 0 б 0 плюс т в степени н пополам на а 0 б 1
[15:27.020 --> 15:45.140]  плюс а 1 б 0 плюс т в степени n на а 1 б 1 и теперь идея что я теперь могу просто свести умножение
[15:45.140 --> 15:54.340]  многочленов размера n к многочленам а нотка у нас же экскурсивном умножению вот 4 раза
[15:54.340 --> 16:01.420]  многочленов размера n пополам да обратите внимание есть употребляю слова размер многочлена не путать
[16:01.420 --> 16:06.460]  со степенью многочлена можно поймите степень многочлена это вот там то есть максимальный
[16:06.460 --> 16:12.580]  номер не нулевого много не нулевого коэффициента вот но а размер это вот сколько коэффициентов
[16:12.580 --> 16:18.780]  мне реально используется то есть как бы размера ну чаще всего размер это степень плюс один но
[16:18.780 --> 16:29.180]  бывает иногда и больше особенно если вы там нулей в конец докидаем так вот ну еще раз размер
[16:29.180 --> 16:36.300]  этого сколько коэффициентов вот мы реально используем вот в ранении многочлена нет просто
[16:36.300 --> 16:46.100]  сколько коэффициентов кто-то из них может быть нулевым нет размера нас сейчас n потому что с нуля
[16:46.100 --> 16:55.100]  размер но степень скорее всего меньше да потому что нет самое главное не какие нулевые а что
[16:55.100 --> 16:59.380]  вот этот может быть нулевым то есть обратите внимание да то есть у нас многочлен какой-нибудь
[16:59.380 --> 17:06.300]  там называется т в клубе это многочлен этом многочлен степени 3 правда несмотря на то что
[17:06.300 --> 17:11.340]  у него коэффициент при т в квадрате например коэффициент 0 но тем не менее степень у него
[17:11.340 --> 17:19.140]  3 а размер соответственно 4 у нас будет потому что мы его будем хранить в виде 0 0 1 это как минимум
[17:19.140 --> 17:26.660]  а может быть и размер 8 если мы его будем хранить вот в таком виде например всякое бывает вот
[17:26.660 --> 17:34.220]  аккурат и так значит что есть многочлен размера n пополам значит мы их умножаем просто рекурсивно
[17:34.220 --> 17:42.860]  ну понятно что если раз там n стало равно там один или там два вот то или 50 нет на самом деле на
[17:42.860 --> 17:48.380]  самом деле до в этом алгоритме кстати действительно там бывает просто что если n не превосходит там
[17:48.380 --> 17:53.540]  пятидесяти то давайте перемножать в тупую просто вот но потому что оказывается что
[17:53.540 --> 17:59.700]  действительно это очень быстро работает вот значит тогда если так запускаться то давайте
[17:59.700 --> 18:05.380]  посмотрим за какой всем точку тогда это будет работать ну чтобы это ощутить давайте просто
[18:05.380 --> 18:13.500]  напишем нашу любимую рекурренту то есть многочлены размера n умножаются за четыре умножения
[18:13.500 --> 18:22.980]  многочленов n пополам ну плюс еще от каких-то мистических операций но сложение по сути там
[18:22.980 --> 18:30.940]  сдвигов еще каких-то может быть но это все но теперь внимание вопрос чему равно t от n
[18:30.940 --> 18:43.420]  ну да то есть мы доказали бастер теорему мы ее помним то есть чего вот то есть t от n у нас будет
[18:43.420 --> 18:53.700]  равно к чему соответственно от там как легко убедиться n в степени лог 2 4 это что то же
[18:53.700 --> 18:58.860]  самое что от n квадрате да ну мы про что этот что эта штука там заведомо доминирует там на то от
[18:58.860 --> 19:07.580]  n поэтому от н квадрат не помогло пока да пока ничего нового не изобретено но тут хитрый
[19:07.580 --> 19:13.860]  студент или аспирант говорит смотрите а нам же на самом деле вот эти два произведения вообще-то
[19:13.860 --> 19:25.180]  сами себе не нужны в общем-то сумма этих произведений нам вполне достаточно правда вот и тут он ведь
[19:25.180 --> 19:42.220]  заметим что заметим что а 0 б 1 плюс 1 б 0 равно а 0 плюс а 1 на б 0 плюс б 1 минус
[19:42.220 --> 20:00.940]  а 0 б 0 минус а 1 б 1 вот тупо заметим что вот да обратите внимание 0 б 0 и 1 б 1 мы считаем так
[20:00.940 --> 20:06.180]  и так но то есть теперь получается что если мы просто теперь вместо этих двух рекурсивных
[20:06.180 --> 20:11.420]  вызовов сделаем вот этот 1 на тоже а это тоже многочлены размером пополам обратите внимание
[20:11.820 --> 20:14.660]  почему
[20:14.660 --> 20:27.220]  многочлены да мы и хитрый многочлены умножаем специально для этого да вот если числа то туда
[20:27.220 --> 20:40.420]  приходится часаться либо доказывать что-то с округлением или это нам доказывать не надо это
[20:40.420 --> 20:46.020]  надо потому что это не совсем математическая проблема ну то есть да вот потому что дата
[20:46.020 --> 20:50.820]  про про реализации если будет умножать длинные числа именно таким образом да проблема есть да
[20:50.820 --> 21:10.340]  ну есть ну математически математически она решается в принципе в том плане что давайте
[21:10.340 --> 21:17.460]  там базовым числом считать число которое там в три ячейки влазит допустим и там поэтому при
[21:17.460 --> 21:30.940]  перемножении переполнений не будет и будем быть что если там она ну вот нету я согласен
[21:30.940 --> 21:36.140]  всем что дает что теоретически да такая да такая проблема есть но просто ну как сказать если у нас
[21:36.220 --> 21:43.060]  будут детали что есть у нас единственная проблема что там некоторые числа вылазит за эти в битов
[21:43.060 --> 21:48.380]  да и нам просто все что нам нужно это на самом деле хранить то есть остаток то есть те что будет
[21:48.380 --> 21:55.220]  в последних в те что в первых то это решаемая проблема логично да вот то есть можно беззаключение
[21:55.220 --> 21:59.660]  общности модели особо считать что у нас есть такое супер умножение который за от единицы
[21:59.820 --> 22:05.300]  два числа там это остаток от деления на два в степени давал ее и так сказать саму
[22:05.300 --> 22:17.140]  деле самой частной от этого деления вот итак значит что у нас тут дальше но хотела но значит
[22:17.140 --> 22:25.860]  давайте смотреть значит что у нас тогда значит н квадрат пока все этот квадрат но с другой
[22:25.860 --> 22:30.620]  стороны теперь замечаем что если мы верим что у нас получилось три умножения то как бы у нас
[22:30.620 --> 22:41.860]  просто вот эта четверочка заменяется на троечку и вот неплохо так правда ну то есть пока конечно
[22:41.860 --> 22:48.020]  да то есть не то о чем мы там современной науке мечтаем конечно но так как этот лог 2 то есть это
[22:48.020 --> 22:57.140]  уже быстрее чем и квадрат но то есть конечно это само это число но ты так сколько ну там вообще
[22:57.140 --> 23:04.340]  один так оно там один точка 5 но не совсем корень вот один точка 58 блаблабла но там на
[23:04.340 --> 23:12.540]  самом деле может можете там у себя на калькуляторе посчитать вот но вот но уже уже неплохо то есть
[23:12.540 --> 23:16.940]  как бы тут уже колмогоров да тут уже трижды поменялся в лице там и там просто бы и там
[23:16.940 --> 23:23.780]  просто побежал это публиковать не смысл под своим именем естественно а просто ну вот то есть
[23:23.780 --> 23:28.580]  там просто там вплоть до истории что там была какая-то то есть как будто там прицепом называется
[23:28.580 --> 23:34.260]  послали там какое-то уже принятую статью там на самом деле статья типа стал из двух частей в
[23:34.260 --> 23:41.060]  первой то что было изначально во второй вот эту но там вот что-то такое не помню уже деталей там
[23:41.060 --> 23:45.740]  что-то рассказывал но но тем не менее тут конечно это надо было как можно быстрее публиковать потому
[23:45.740 --> 23:52.700]  что ну действительно прорыве действительно вот да ну и конечно этого студента звали соответственно
[23:52.700 --> 24:00.900]  как уж ну почти да анатолий александрович карацуба его звали на самом деле вот собственно на
[24:00.900 --> 24:08.500]  самом деле такой известный математик области дискретного анализа на самом деле вот и так ну вот
[24:08.500 --> 24:13.780]  но соответственно что же делать дальше дальше так сказать хорошо если тут так сделали они где быстрее
[24:13.780 --> 24:26.900]  ну как бы какая тут следующая мысль приходит в голову слушайте вот вы тут на две части поделили
[24:26.900 --> 24:39.300]  получился так а если на 3 и так еще она да так ну давай так делим на так делим на блоке по корень
[24:39.300 --> 24:52.220]  изн каждый там в тупую да и что у нас там получает корень да корень изн выражение придумать это круто
[24:52.220 --> 24:57.620]  конечно да тут хотя бы уже три выражения придумать на самом деле вы то есть вот на три части если
[24:57.620 --> 25:11.780]  поделить то чего будет так ну где 9 умножение ну давайте ну куда дать прям очень интересно давайте
[25:11.780 --> 25:22.500]  вот у нас там допустим а 0 плюс т в степени на 3 а 1 плюс т в степени 2 и на 3 а 2 на 3 на 3
[25:22.500 --> 25:33.180]  согласен хорошо так бт равно б 0 плюс т в степени на 3 б 1 плюс т в степени 2 и на 3
[25:33.180 --> 25:44.140]  б 2 так хорошо что у нас такое а б а б значит это а 0 б 0 плюс т в степени на 3 на там соответственно
[25:44.140 --> 26:00.860]  а 0 б 1 плюс а 1 б 0 плюс там т в степени 2 и на 3 соответственно а 0 б 2 плюс а 1 б 1 плюс а 2 б 0
[26:00.860 --> 26:17.300]  плюс да внезапно вот плюс т в степени на а 1 б 2 плюс а 2 б 1 и плюс т в степени 4 на 3 а 2
[26:17.300 --> 26:30.580]  б 2 а каким образом а только если рикурсивно запустится чего
[26:30.580 --> 26:49.620]  сейчас человек так один допустим
[26:49.620 --> 27:12.900]  так хорошо да 0 плюс б 0 допустим на а 1 плюс б 1 то есть вот это типа вот так хорошо что там
[27:12.900 --> 27:31.500]  получается ну хорошо так ну нет давайте посмотрим так так нет а это я под него и
[27:31.500 --> 27:47.140]  нарисовал не но да и получается да еще придется да тут еще а 0 да но теперь у нас тогда да да но
[27:47.140 --> 27:56.620]  теперь но у нас теперь сравнивать надо лог 36 не с двойкой а с лог 23 да лог 36 против лог 23 кто
[27:56.620 --> 28:09.260]  больше да кстати интересный вопрос как это сравнивать то вообще да и что будет так ну
[28:09.260 --> 28:27.180]  в принципе заметим да лог 3 ну пожалуйста да неважно так и что так чего надо можно ну-ка давай
[28:27.180 --> 28:37.300]  вот хотя если мы сейчас на лог 32 да множим чего получится то есть один там 1 плюс лог 23 сравниваем
[28:37.420 --> 28:47.660]  лог 23 в квадрате ну я просто я обе части то есть вот эту штуку вот эту штуку домножим на лог 23
[28:47.660 --> 29:03.940]  что это корень из 5 минус 1 пополам а да да да да да да но да да ну в принципе да
[29:03.940 --> 29:25.220]  на лог 23 лог лог 32 лог 3 да да да да да да это я это я хитрый ну вот так и что будет но
[29:25.220 --> 29:32.340]  что будет 3 ну будет так возбудить нет ничего возбудим значит тут будет да тут будет 6 а тут
[29:32.340 --> 29:52.020]  будет 3 в степени лог 2 3 неплохо да нет ну как сказать на самом деле конечно хотя вот не оно
[29:52.020 --> 30:01.220]  как сказать там просто корень корень из трех это у нас сколько да корни и да так
[30:01.220 --> 30:07.060]  но вот нет вот просто сейчас это хотя с другой стороны да вот можно попытаться оценить что
[30:07.060 --> 30:17.260]  это больше чем три корни корни из трех 1 63 тем более дат сейчас три корни страта корни
[30:17.860 --> 30:26.100]  нет этого не хватает так но да можно повозводить правда насколько помню
[30:26.100 --> 30:35.340]  мне как сказать получалось что кстати шестерочка все-таки меньше оказалось все-таки поэтому там
[30:35.340 --> 30:41.540]  вот возникает вопрос как будет а как бы это все-таки вот можно ли это все-таки за 5 произведений
[30:47.260 --> 31:05.740]  сейчас системы из трех уравнений ну каких а давайте так а что еще общие те сами
[31:05.740 --> 31:13.380]  себе скобчики вам напоминает вот на самом деле да то есть на самом деле да то есть можно просто
[31:13.380 --> 31:18.740]  себе представить что вот а 0 1 и а 2 на самом деле как-то помимо всего прочего это еще и коэффициенты
[31:18.740 --> 31:25.580]  какого-то многочлена размера 3 правда ну да то есть там конечно да они сами всем многочлены но
[31:25.580 --> 31:31.940]  с другой стороны почему бы и нет вот то есть как бы давайте вот тут скажем что у нас будет такой
[31:31.940 --> 31:40.340]  супер многочлен допустим а 0 плюс там я не знаю а 1 на там я не знаю кси в степени на кси плюс
[31:40.340 --> 32:01.820]  а 2 в степени кси квадрат понятно да вот нет пока нету никогда нету нету нет не получится не
[32:01.820 --> 32:08.340]  по-прежнему что дальше будет а дальше сотри вот смотрите то есть заметил что если я сейчас
[32:08.340 --> 32:13.500]  перемножу эти два многочлена то при кси в какой-то степени будут стоять ровно вот эти вот штуки
[32:13.500 --> 32:19.940]  правда но теперь заметим следующее вот важная идея которая нас сегодня который нас все-таки
[32:19.940 --> 32:27.260]  будет преследовать везде если перемножить многочлены два многочлены размера 2 размера 3 то
[32:27.260 --> 32:41.900]  что получится но скорее 5 ну степень 5 да ну там размера там допустим 5 вот но тогда у нас
[32:41.900 --> 32:47.660]  возникает идея смотрите вот у нас то есть возникнет какой-то вот многочлен условно c 0 плюс
[32:47.660 --> 32:55.580]  1 кси вот это и спереди там церковно так сказать а на б да плюс там допустим ц 2 на кси в квадрате
[32:55.580 --> 33:11.940]  плюс ц 3 на кси в кубе плюс ц 4 на кси у четвертой вот а теперь внимание вопрос смотрите но вот
[33:12.940 --> 33:18.780]  у нас но то есть ну и каждая цешка равна вот этим вот штукам и нам надо просто идентифицировать
[33:18.780 --> 33:26.460]  этот многочлен правда но теперь вот выскакать мысль такая как можно вообще задать многочлен
[33:26.460 --> 33:32.420]  размера 5 да то есть заметим что его можно интерполировать если мы тупо в какой-то
[33:32.420 --> 33:39.140]  точке там тупо знаем его значение в пяти точках правда но вот это возможно вы уже просто из
[33:39.140 --> 33:43.980]  линей на алгебры уже тупо знаете да нет не знаете откуда знаете тогда
[33:43.980 --> 33:50.700]  а сейчас откуда знает
[33:50.700 --> 34:01.940]  нет хороший метод по тематике да серёга сказал что вову сказал что там это профессор из америки
[34:01.940 --> 34:25.940]  рассказывал что да да да да нет ну просто смотрите нет вот давайте смотреть вот ладно
[34:25.940 --> 34:34.820]  давайте давайте вот немножко вообще поговорим а теоретически об интерполяции смотреть значит
[34:34.820 --> 34:43.660]  соответственно значит что тут можно сейчас давайте вот это мы это я думаю мы уже все поняли что нет
[34:43.660 --> 34:49.980]  ну это я думаю так так сейчас смотреть
[34:49.980 --> 35:02.940]  ну вот мы его нет смысле не но что это что это вот просто типа вот этот виртуальный
[35:02.940 --> 35:07.460]  наречен перемножил но вот этот виртуальный наречен получил вот это и заметил что на самом
[35:07.460 --> 35:15.300]  деле то есть вот это то есть на самом деле связь простая то есть помните это c 0 это c 1 это c 2
[35:15.300 --> 35:26.820]  так спокойно так спокойно не надо в нот как так во первых это не надо ставить знакомство
[35:26.820 --> 35:33.140]  между это задавал вопрос и тупой но вот во вторых знаешь это вовно во вторых на самом деле это
[35:33.140 --> 35:37.740]  задавший тупой вопрос он называется подавляющее большинство случаев на самом деле называется как
[35:37.740 --> 36:02.500]  раз не тупой вот смотрите вот у нас тут действительно идея такая что если у нас есть многочлен
[36:02.500 --> 36:08.660]  размера и вот снова да ну давайте там чтобы какие-то другие буквы были давайте пусть у меня будет
[36:08.660 --> 36:19.460]  д т равно да д 0 плюс д 1 т плюс д 2 т квадрат плюс так далее плюс д n минус 1 т в степени
[36:19.460 --> 36:27.780]  минус 1 тогда смотрите тогда я сейчас могу сформулировать вот такое интересное утверждение
[36:27.780 --> 36:36.820]  пусть у меня т 0 т 1 вот у меня есть просто n каких-то чисел по парно различных давайте для
[36:36.820 --> 36:46.220]  простоты даже действительно хотя на самом деле там любой поле подойдет вот так вот же есть у
[36:46.220 --> 37:00.140]  ктч но вот это да нет есть алгем есть у ктч или у вас поля ну окей хорошо хорошо не вопрос
[37:00.140 --> 37:15.580]  ладно значит хотя то есть тогда я сейчас формулирую мистическое утверждение на
[37:15.580 --> 37:18.540]  языке собственно ли не налгивает
[37:18.540 --> 37:47.580]  уже просчитали что будет дальше да
[37:47.580 --> 38:00.940]  логично так ну давайте все-таки допишу вот это вот ван дер монда не путать с воландомортом
[38:00.940 --> 38:30.620]  да как такие штуки говорят не думал мы живите так вот такое мистическое утверждение вот
[38:30.620 --> 38:37.900]  в принципе теперь заметим следующее что если оказалось что эта матрица не вырождена то тогда
[38:37.900 --> 38:47.300]  зная только эти n значения в этих точках я могу восстановить просто сам сами сам многочлен вот
[38:47.300 --> 39:09.340]  правда возникает вопрос они вырождены ли она не вырождены ли она вот тут вот ну вот ну на
[39:09.340 --> 39:14.800]  самом деле так давайте вот как вот я действительно вот допустим вас там встала перед вами задача как
[39:14.800 --> 39:28.240]  найти ее определитель методовца так ну поехали дай чего будет дать что будет получаться значит
[39:28.240 --> 39:36.680]  ну первая строчка допустим остается тоже пока да т 0 в степени минус 1 тут у нас будут нули тут
[39:36.680 --> 39:53.500]  у нас что будет что 1 квадрат минус 0 квадрат значит 2 квадрат минус 0 квадрат и тут 1 степень
[39:53.500 --> 40:02.780]  минус 1 минус 0 степени минус 1 и тут 2 степени минус 1 минус 0 степени минус 1 ну и так далее
[40:02.780 --> 40:16.480]  там ну и давайте мало кто знает винипух на самом деле когда шел питочку он думал об
[40:17.080 --> 40:36.680]  вот такая вот штука получилась вот ну да ну да ну в принципе да заметим что пока мы что в принципе
[40:36.680 --> 40:40.840]  да заметим следующее что если мы берем определить это матрица заметим что эту строчку вообще можно
[40:40.840 --> 40:48.920]  выкинуть в принципе да сказать что она равна 1 на определитель вот этой штуки но вот причем заметим
[40:48.920 --> 40:58.600]  что эту штуку на самом деле можно торжественно вот то есть на самом деле на то в каждой строчке
[40:58.600 --> 41:06.360]  может теперь выяснить вот эту разность правда то есть это равно ну я так напишу произведение по
[41:06.360 --> 41:14.560]  всем и от единицы до n минус 1 значит t и того минус t нулевого на определитель что там у
[41:14.560 --> 41:22.600]  нас получится теперь значит поехали 1 1 1 1 пум пум пум 1 только теперь уже тут хитрее пошло t 0
[41:22.600 --> 41:31.800]  плюс t 1 тут у нас t 0 плюс t 2 t 0 плюс t 3 ведь я тут уже третье добавляю но в конце у нас все еще
[41:31.800 --> 41:41.280]  останется n минус 1 так здесь получается так а здесь что получится ну здесь получится t 0
[41:41.280 --> 41:48.760]  квадрат плюс t 0 t 1 плюс t 1 квадрать ну тут понятно форму сокращенного умножения да
[41:48.760 --> 42:04.320]  t 0 t 2 плюс там t 2 в квадрате t 0 квадрате плюс t 0 t 3 t 3 квадрате пум пум пум t 0 квадрат
[42:04.320 --> 42:17.800]  плюс t 0 t n минус 1 плюс что там получилось t 1 квадрат вот что будет дальше но да тут
[42:17.800 --> 42:24.720]  тоже будет это куб плюс там там t 0 в квадрате на t 1 плюс там t 0 на t 2 и так далее еще можно
[42:24.720 --> 42:32.920]  прям в конце но главное в конце написать что будет там будет соответственно там условно там t 0
[42:32.920 --> 42:42.120]  в степени какой там n минус 2 получается плюс t 0 степени там n минус 3 на t 1 плюс там и так
[42:42.120 --> 42:53.080]  далее плюс там в конце t 1 степени n минус 2 и тут соответственно t 0 минус 2 плюс t 0 n минус 3 t 1 так
[42:53.080 --> 42:58.000]  ну вот ну пока я пишу я думаю вы уже это можете заметить действительно что я буду делать дальше
[42:58.000 --> 43:10.560]  как вы думаете что я буду делать не туда тут заметили фишка что когда мы ищем определитель
[43:10.560 --> 43:16.960]  можно делать вот это вычитание не только строчек но и столбцов на самом деле и не просто столбцов а я
[43:16.960 --> 43:22.720]  могу из одного столбца вычислить другой столбец умноженный на коэффициент помните вот на самом
[43:22.720 --> 43:29.800]  деле я утверждаю что если я тут вот как какой-то столбец сейчас по вычитываю столбцы по вычитаю
[43:29.800 --> 43:40.920]  будет гораздо красивше далее на самом деле не только сейчас мы увидим это потому что ну давайте
[43:40.920 --> 43:48.920]  давайте смотреть ну тут ну и тут вот ладно вот это вот я не буду уже дописывать вот но давайте посмотрим
[43:48.920 --> 44:00.400]  да значит ну погодите погодите значит начнем с того что я могу из первого вычислить из второго
[44:00.400 --> 44:06.680]  вычислить первый домноженный на t 0 тогда давайте вот прямо здесь тогда что у меня будет вот шлеп
[44:06.680 --> 44:18.120]  шлеп шлеп правда сейчас да но более того нет заметим тут еще круче смотрите заметим что вот из
[44:18.120 --> 44:22.840]  этого столбца я тоже могу вот это просто вычислить единицы там нужно на то ноль в квадрат поэтому
[44:22.840 --> 44:29.160]  будет шлеп шлеп шлеп но теперь я замечу что я еще могу теперь у меня вот этот столбец t 1 t 2
[44:29.160 --> 44:37.960]  и так далее t-1 если я его домножу на t 0 у меня тут получится шлеп шлеп шлеп шлеп и теперь у меня
[44:37.960 --> 44:43.720]  получился столбец квадратов то есть это то есть там же я вот в этом кубическом столбце теперь
[44:43.720 --> 44:49.480]  могу абсолютно также все зачистить но тут показать надо же вот что для n-1 я могу то есть я могу
[44:49.480 --> 44:54.400]  заметить что у меня как минимум сначала вот тут у меня будет шлеп шлеп шлеп потом вот тут шлеп
[44:54.400 --> 45:02.080]  шлеп шлеп ну и так далее в общем везде шлеп шлеп в общем ну да то есть ну даже в нашем случае даже
[45:02.080 --> 45:04.640]  не предположение просто типа повторим операцию
[45:04.640 --> 45:19.960]  пожалуйста пожалуйста на ваше усмотрение да то есть на спредель t и на t 0 умножить на
[45:19.960 --> 45:29.240]  определитель матрицы t 1 t 2 t 3 нет вру вру вру вру рано рано это я еще написал значит тут
[45:29.240 --> 45:38.480]  надо написать 1 1 1 и так далее 1 тут получается t 1 t 2 t 3 и так далее t-1 значит тут квадраты
[45:38.480 --> 45:55.240]  квадраты квадраты и ой так t 1 n-1 тут t 2 в степени n-1 t 3 в степени n-1 т в степени n-1
[45:56.240 --> 46:04.600]  ура ну почему ура потому что мы замечаем что это как бы то же самое что было и раньше только на
[46:04.600 --> 46:13.040]  единичку меньше если мы тупо повторим все эти операции то получится в итоге произведение
[46:13.040 --> 46:24.520]  просто всех попарных разностей вот то есть фактически и плюс 1 на n-1 значит t и минус t же
[46:24.520 --> 46:35.840]  вот это называется да то есть вот фамилия вот такая да как-то не странно пишется она в одно слово
[46:35.840 --> 46:53.600]  они в 3 хотя казалось бы вот а где а да да да да да да да да да да да да да да да да так
[46:53.600 --> 47:04.080]  тут один вот вот тогда что мы из этого видим на самом деле вот на нашего это в нашем это
[47:04.080 --> 47:13.520]  определитель и ну не знаю ну на самом деле так заметим что вот даже так более аккуратно он
[47:13.520 --> 47:25.320]  равен нулю тогда и только тогда когда среди т-шек есть хотя бы две одинаковые нет ну ну логично тут
[47:25.320 --> 47:30.360]  не совсем так я бы сказал наоборот что собственно этот факт теперь открывает возможность интерполяции
[47:30.360 --> 47:42.680]  принципе но да то есть как бы да да но да да ну как бы очень хочется сказать что многощина
[47:42.680 --> 47:47.800]  размера n мы интерполируем по n точкам но и теперь мы доказали что мы действительно так можем
[47:47.800 --> 47:54.400]  делать более того даже у нас более четкий факт на самом деле по любым значениям в n точках
[47:54.400 --> 47:59.520]  получает то есть для любых значений на любого набора значений в различных точках многощина
[47:59.520 --> 48:06.440]  размера n не просто существует но еще единственным ну просто как система как решение вот такой
[48:06.440 --> 48:14.720]  системы линейных уравнений вот и так то есть мы да то есть мы это действительно прям можем
[48:14.720 --> 48:23.560]  делать причем одна что про что очень важно для нас однозначно значит к чему мы это вообще вот
[48:23.560 --> 48:30.120]  к чему потому что вспомним так о чем мы это хотели мы вообще хотели мы у нас возникла идея что
[48:30.120 --> 48:39.200]  давайте вот этот врачен попробуем интерполировать по 5 точкам откуда мы эти 5 точек возьмем вот ну
[48:39.200 --> 48:45.840]  естественно но ну как как но действительно мы же замечаем что у нас же верно что там скажем ци от
[48:45.840 --> 48:52.120]  кси на самом деле это равно а от кси умножить на б от кси правильно тогда вы скажете просто давайте
[48:52.120 --> 49:02.160]  я просто в качестве кси подставлю числа 0 там скажем 0 1 2 3 4 вот от балды тогда что у меня
[49:02.160 --> 49:10.800]  получится тогда у меня получится там скажем тогда если я вот подставлю то у меня но получится
[49:10.800 --> 49:17.560]  что то есть там понятно что цет цет нуля у меня будет равна просто а 0 умножить на б 0 правда
[49:17.560 --> 49:26.200]  чему будет равно ц от единицы ц от единицы будет равно вот смотрите а 0 плюс а 1 плюс и тогда плюс
[49:26.200 --> 49:40.920]  а 2 на б 0 плюс б 1 плюс б 2 ну там скажем ц 2 у нас получается равно а 0 плюс 2 а 1 плюс 4 а 2 на
[49:40.920 --> 49:53.160]  б 0 плюс 2 б 1 плюс 4 на б 2 ну и так далее думаю суть вы поняли да то есть тогда получается что
[49:53.160 --> 49:59.920]  у меня получилось что у меня есть 5 получается я должен сделать 5 рекурсивных умножений тут
[49:59.920 --> 50:06.240]  вот записано вот какие конкретно видите и по ним я могу тогда вот эти штуки про интерполировать
[50:06.240 --> 50:11.080]  то есть просто там фактически решив систему линейных уравнений ну то есть условно я могу
[50:11.080 --> 50:16.120]  просто записать там соответствующую матрицу там что-то в духе там какая там матрица получится вот
[50:16.120 --> 50:38.320]  1 0 0 да 1 1 1 1 1 1 1 2 4 8 16 там допустим 1 3 9 27 81 и там 1 4 там 16 64 256 вот такая вот у
[50:38.320 --> 50:46.080]  нас ситуация получается и соответственно вот то есть ну и заметит а что мы помнить что ашки это
[50:46.080 --> 50:51.880]  конечно не формально говоря не числа многочлены но с другой стороны вот к этой же матрице обратной
[50:51.880 --> 50:58.960]  существует правда вот поэтому там можем ее просто там ручками там просто найти один раз и соответственно
[50:58.960 --> 51:04.120]  и просто там соответственно вот все вот эти произведения на эту матрицу домножить и получить
[51:04.120 --> 51:11.560]  собственно коэффициенты вот этого произведения и тем самым получить вот эти вот 5 штучек то есть
[51:11.560 --> 51:17.560]  таким образом у нас получается все-таки не лог 3 6 а лог 3
[51:17.560 --> 51:47.480]  ну вот ну на самом деле обобщить это обобщить это на самом деле
[51:47.780 --> 51:58.760]  Gedda что там это применять более сложную технику а просто сказать так но по аннот ну смотрите
[51:58.760 --> 52:06.320]  то есть на ходе это обобщить вот сейчас нас просто сказать что у нас вот это вот три это
[52:06.320 --> 52:11.480]  когда делим три константа то есть вот это вот типа матрица 5 на 5 это вот у
[52:11.480 --> 52:19.080]  нас такая константа вот логично да вот то есть особенно такая константа но вот
[52:19.080 --> 52:25.360]  поэтому предлагается так сказать что что тогда но тогда у нас действительно все
[52:26.360 --> 52:29.360]  проблем-то вообще не понял.
[52:41.360 --> 52:48.080]  В n точках никто это делать и не будет, но просто тут идея что нет просто
[52:48.080 --> 52:53.160]  смотрите я могу это сделать в k точках где k будет равно
[52:53.160 --> 52:59.760]  константа какая-нибудь да ну то есть такая наглость да вот пусть у меня но
[52:59.760 --> 53:03.440]  просто заметил что я подобного рода интерполяцию могу сделать и для вот в
[53:03.440 --> 53:07.920]  данном случае мы ее то есть изначальный алгоритм коротцубы он был для k равно 2
[53:07.920 --> 53:13.200]  вот это вот для k равно 3 но абсолютно ту же махинацию я могу произвести для
[53:13.200 --> 53:22.920]  произвольного k правда ну фиксируя его как константу понимаете да вот но тогда
[53:22.920 --> 53:26.400]  в результате тогда что у нас получится ну так как до типа как я сказал k
[53:26.400 --> 53:32.400]  константа то есть а теперь внимание вот и какая у нас симптотика получится то
[53:32.400 --> 53:38.760]  есть сколько сколько нам надо вот таких произведений каждый раз сделать
[53:38.760 --> 53:47.400]  ну получается да то есть получается действительно то есть там ну давайте
[53:47.400 --> 53:50.920]  смотрите просто там получится то есть мы этих произведений делаем ровно там 2
[53:50.920 --> 54:00.720]  n минус 1 значит на t от n поделить сейчас нет сколько нет 2 т минус 1 нет не так
[54:00.720 --> 54:14.600]  2 к минус 1 конечно 2 к минус 1 от t от n делить на к плюс внезапно от и вот
[54:14.640 --> 54:22.880]  кажется у нас константа да и вот и в результате чего почему
[54:22.880 --> 54:30.440]  у нас в процессе умножения в матрице будет нижний ячейк и получается все еще константная правда но все-таки число прав степени как
[54:30.440 --> 54:48.560]  будет почему оно никак нечаянно не разрушит нам что-нибудь мы говорим что мы умножаем в решлении и у нас в ячейках хранится какие-то числа которые вылезают в какую-то константу
[54:49.160 --> 55:07.000]  почему они влезают ну вот ну для любого n ну для любого n ладно будем честны они конечно не влезут нет это не
[55:07.000 --> 55:12.080]  константа нет обычно просто в этих моделях просто обычно сразу тут два варианта либо
[55:12.080 --> 55:16.960]  прописывают что значит мы работаем с достаточно маленькими числами что все произведения в
[55:16.960 --> 55:23.480]  это число влезут во первых либо второй вариант мы используем просто не продвинутую рам модель а просто рам модель в
[55:23.480 --> 55:29.040]  которой все числа на самом деле бесконечно большие да зачем нам тогда длинная арифметика остается загадкой конечно
[55:29.040 --> 55:39.160]  вот да все равно согласен но обычно просто говорят что мы у нас задачи перемножить хотя бы там многочлены но там
[55:39.160 --> 55:44.040]  гарантируем что мы храним по такому количеству разрядов то есть то есть у нас такие коэффициенты
[55:44.040 --> 55:51.960]  у многочленов что соответственно мы гарантируем что ответ тоже будет представим в таком виде нет в
[55:51.960 --> 55:55.480]  таком виде где в смысле число достаточно маленькое чтобы лезть в одну ячейку
[55:56.480 --> 55:58.480]  а хватит ли нам такой гарантии?
[56:01.480 --> 56:07.480]  откуда все это есть гарантия что данного ячейка в отверстие тоже все будет хорошо?
[56:07.480 --> 56:09.480]  это логичная гарантия
[56:10.480 --> 56:15.480]  а не создадим ли мы по поводу решения ситуацию где нам ничего не гарантирует?
[56:22.480 --> 56:24.480]  да действительно на самом деле проблема
[56:25.480 --> 56:35.480]  Ну, с другой стороны, давайте подумаем, насколько сильно тут все может возрасти.
[56:35.480 --> 56:47.480]  Проблема заключается в том, что у нас числа, которые тут везде возникают, начинают неконтролируемо расти.
[56:47.480 --> 57:16.480]  И вот, если у нас проблема, что в одной ячейке памяти мы храним только числа, какие-нибудь w, условно не более чем 2 в степени круто фиксированного w, то как бы тут возникает вопрос, можно ли гарантировать, что у нас в процессе этого алгоритма число, количество разрядов, базовые числа увеличится не более чем в константу раз, чтобы там лучше не гарантировать.
[57:17.480 --> 57:29.480]  Тут вот такие какие-то проблемы на самом деле. Да, действительно, хороший вопрос.
[57:29.480 --> 57:42.480]  Но с другой стороны, давайте вот что. То есть хорошо, если у нас действительно, так пока если совсем неформально, то проблема заключается в том, что мы тут домножаем на какие-то там k в степени k, да?
[57:42.480 --> 57:46.480]  И там, а потом главное, рекурсивно мы их как-то на какие-то ка в степени ка.
[57:46.480 --> 57:49.480]  Главное нечаянно не начать рекурсивно умножать на одно и то же число.
[57:49.480 --> 57:55.480]  Так самое страшное, что мы начнем. Но с другой стороны, сколько раз мы начнем?
[57:55.480 --> 58:01.480]  Один раз мы домножаем на какое у нас там число получается?
[58:01.480 --> 58:11.480]  k-1 в степени n-1, да?
[58:11.480 --> 58:14.480]  Ну получается да.
[58:14.480 --> 58:20.480]  А, да, еще хуже, 2k-1.
[58:20.480 --> 58:24.480]  А, вот там ниже.
[58:24.480 --> 58:28.480]  Все-все-все.
[58:28.480 --> 58:30.480]  Нет, ну что, плохо, нормально.
[58:30.480 --> 58:35.480]  Так, значит, хорошо, да.
[58:35.480 --> 58:38.480]  Да-да-да-да.
[58:38.480 --> 58:48.480]  Нет, ну смотрите, да. То есть мы замечаем, что мы тут, тут у нас вот эти все коэффициенты в процессе, они получаются не более чем 2k-1.
[58:48.480 --> 58:52.480]  Там, действительно, в степени k-1.
[58:52.480 --> 59:02.480]  Нет, просто нет. Проблема тут...
[59:02.480 --> 59:07.480]  Нет, проблема тут, да. Проблема в том, что как бы мы тут рекурсивно начинаем умножать.
[59:07.480 --> 59:11.480]  Но с другой стороны, конечно, сколько раз мы начинаем это домножать?
[59:11.480 --> 59:17.480]  Мы замечаем, что мы это делаем лог k-n раз.
[59:17.480 --> 59:24.480]  То есть получается нам вот это вот надо возвести в степень что-то типа лог k-n.
[59:24.480 --> 59:26.480]  Вот.
[59:26.480 --> 59:32.480]  Да, поэтому действительно можно обнаружить, что, к сожалению, там что-то типа k в степени n все-таки выплыло, видимо.
[59:32.480 --> 59:38.480]  Ну ладно, это не k в степени n, это n в степени k, на самом деле, обратите внимание.
[59:38.480 --> 59:44.480]  Ну то есть там по модуле, если я тут двойку вынесу, у меня тут получится 2 в степени лог k-n.
[59:44.480 --> 59:48.480]  Ну, в общем, давайте, я ж могу и подписать, правда.
[59:48.480 --> 59:54.480]  То есть на самом деле это равно n в степени лог k вот этого всего безобразия.
[59:59.480 --> 01:00:02.480]  А это константа.
[01:00:02.480 --> 01:00:06.480]  Ну и что? Секунду.
[01:00:06.480 --> 01:00:10.480]  Ну, сердце константа, но n в квадрате там 2 тоже константа.
[01:00:10.480 --> 01:00:12.480]  Как-то нас это не устроило.
[01:00:12.480 --> 01:00:14.480]  Чего нас не устроило?
[01:00:14.480 --> 01:00:16.480]  n в квадрате.
[01:00:16.480 --> 01:00:18.480]  n в квадрате нас не устроило?
[01:00:18.480 --> 01:00:20.480]  Мы числа перенажали, два же константа.
[01:00:20.480 --> 01:00:22.480]  Почему бы не?
[01:00:22.480 --> 01:00:24.480]  Ну, да, это большое число.
[01:00:24.480 --> 01:00:26.480]  Ну вот.
[01:00:26.480 --> 01:00:28.480]  Ну, да, что за нот?
[01:00:28.480 --> 01:00:30.480]  Нет, ну как большое?
[01:00:30.480 --> 01:00:32.480]  Сейчас, это сколько это там?
[01:00:32.480 --> 01:00:34.480]  Ну да, это конечно да, k-1.
[01:00:34.480 --> 01:00:36.480]  Не, ну не совсем так.
[01:00:36.480 --> 01:00:38.480]  Заметим так.
[01:00:38.480 --> 01:00:40.480]  То есть это равно так.
[01:00:40.480 --> 01:00:48.480]  n в степени на самом деле k-1 на лог k значит 2k-1.
[01:00:52.480 --> 01:00:58.480]  То есть нет, ну на самом деле это заметим, что эта штука стремится к единице на самом деле.
[01:01:00.480 --> 01:01:02.480]  Логично, да?
[01:01:02.480 --> 01:01:04.480]  Ну вот.
[01:01:04.480 --> 01:01:06.480]  То есть это будет соответственно к единице.
[01:01:06.480 --> 01:01:12.480]  Поэтому вот это все, это будет не превосходить n в степени k.
[01:01:14.480 --> 01:01:16.480]  Ну вот тут конечно да.
[01:01:16.480 --> 01:01:18.480]  Но на самом деле это что такое?
[01:01:18.480 --> 01:01:20.480]  Это всегда вот оговорка.
[01:01:20.480 --> 01:01:28.480]  Потому что в таких случаях, боюсь в статьях будут махать руками и говорить, что мы будем предполагать, что у нас w достаточно большое.
[01:01:28.480 --> 01:01:32.480]  Коэффициенты достаточно маленькие, чтобы все промежуточные вычисления в них помещались.
[01:01:32.480 --> 01:01:34.480]  Все.
[01:01:34.480 --> 01:01:40.480]  А, потому что у нас среди вычислений будут числа такие по модулю, но не по размеру.
[01:01:42.480 --> 01:01:44.480]  Ну у нас да, у нас будут числа, да.
[01:01:44.480 --> 01:01:50.480]  То есть вот эти числа, которые нам тут нужны, это вот да, это n в степени k соответственно.
[01:01:50.480 --> 01:01:52.480]  Вот.
[01:01:52.480 --> 01:01:54.480]  То есть по крайней мере коэффициенты.
[01:01:54.480 --> 01:01:56.480]  То есть можно конечно задумываться, мы что-то делаем не только произведения,
[01:01:56.480 --> 01:02:02.480]  но и, то есть не только вот эти произведения в степени, но еще и тут какие-то промежуточные произведения.
[01:02:02.480 --> 01:02:04.480]  Сложения там вот эти вот да.
[01:02:04.480 --> 01:02:10.480]  Ну вот, то есть поэтому на самом деле по-хорошему это надо бы еще бы поточнее оценивать.
[01:02:10.480 --> 01:02:14.480]  Ну вот, но пожалуй этот побенку все-таки опустим.
[01:02:14.480 --> 01:02:20.480]  Вот. То есть там можно действительно либо правильнее сделать правильную оценку, либо правильную оговорку.
[01:02:20.480 --> 01:02:21.480]  Вот.
[01:02:21.480 --> 01:02:22.480]  Ну просто к чему нот?
[01:02:22.480 --> 01:02:24.480]  Ну тем более что нот.
[01:02:24.480 --> 01:02:25.480]  То.
[01:02:25.480 --> 01:02:29.480]  То тем более, что просто само по себе на самом деле это такая веселая вещь.
[01:02:29.480 --> 01:02:34.480]  То есть с правильными оговорками, этими всеми отсылками, что там к аналогичным атомикхипам,
[01:02:34.480 --> 01:02:40.480]  теперь нам гордо говорить, что мы теперь умеем, то есть если мы все-таки верим в эту асимптотику и в k-константу,
[01:02:40.480 --> 01:02:43.480]  тогда мы что понимаем?
[01:02:43.480 --> 01:02:55.480]  Тогда мы понимаем, что мы на самом деле, что у нас t от n, это у нас теперь равно o от n в степени log k 2k-1.
[01:02:55.480 --> 01:03:03.480]  Вот.
[01:03:03.480 --> 01:03:13.480]  Поэтому формально теперь, так как вот эта штука логарифа, он стремится к единице.
[01:03:13.480 --> 01:03:16.480]  Стремится.
[01:03:16.480 --> 01:03:19.480]  Поэтому в результате получаете теперь утверждение.
[01:03:19.480 --> 01:03:34.480]  Для любого епсилон больше нуля найдется алгоритм, который перемножает число длины n за асимптотику o от n в степени 1 плюс епсилон.
[01:03:34.480 --> 01:03:37.480]  Это да.
[01:03:37.480 --> 01:03:50.480]  Мы уже научились первым же делом нажать числа за log 2 4, потом за log 3 6, потом за log 4 8.
[01:03:50.480 --> 01:03:55.480]  Да, ну во-первых вот эта штука дает log 2 3, log 3 5, log 4 7.
[01:03:55.480 --> 01:04:04.480]  Это бесполезно, потому что log k 2k тоже сходит с к единицы.
[01:04:04.480 --> 01:04:08.480]  Так, если мы умеем вот это обобщать, пока что мы для тройки сможем делать.
[01:04:08.480 --> 01:04:10.480]  Сейчас, log 3 6 прям сходится.
[01:04:10.480 --> 01:04:12.480]  Ну да, это log k 2 на единицу.
[01:04:12.480 --> 01:04:13.480]  Так.
[01:04:13.480 --> 01:04:15.480]  Log k 2 как бы ну.
[01:04:15.480 --> 01:04:19.480]  Нет, а сколько у тебя там будет получаться?
[01:04:19.480 --> 01:04:21.480]  Если, в общем случае.
[01:04:21.480 --> 01:04:23.480]  Нет, там может быть этого и хватит.
[01:04:23.480 --> 01:04:31.480]  Но на самом деле я предлагаю остановиться в этом думать, потому что у нас все равно будет алгоритм за n log n, который это все равно перешибет.
[01:04:31.480 --> 01:04:33.480]  Да, обратите внимание.
[01:04:33.480 --> 01:04:36.480]  Да, как это может показаться странным, но n log n круче, чем вот это.
[01:04:36.480 --> 01:04:38.480]  Не кажется.
[01:04:38.480 --> 01:04:40.480]  Ну вот.
[01:04:40.480 --> 01:04:43.480]  Ну, хотя да, подобные вещи мы уже с вами обсуждали.
[01:04:43.480 --> 01:04:45.480]  Вот.
[01:04:45.480 --> 01:04:46.480]  Но тем не менее.
[01:04:46.480 --> 01:04:49.480]  То есть вот, оказывается, на интерполяции можно там это так ужимать.
[01:04:49.480 --> 01:04:55.480]  Правда, чем больше к, тем больше оговорок, действительно, каких-то подозрительных.
[01:04:55.480 --> 01:04:56.480]  Вот.
[01:04:56.480 --> 01:04:58.480]  Но с другой стороны, правда, будем честные.
[01:04:58.480 --> 01:05:03.480]  Сейчас алгоритм, который мы сейчас будем за n log n обсуждать, он тоже на самом деле не лишен этих оговорок.
[01:05:03.480 --> 01:05:12.480]  Потому что, как бы, если тут мы говорили, что насколько большие будут числа, то там придется вообще думать о каких-то дробных числах вообще.
[01:05:12.480 --> 01:05:14.480]  Ага.
[01:05:14.480 --> 01:05:19.480]  Да, по скольким простым модулям еще придется делать?
[01:05:19.480 --> 01:05:21.480]  Да, да, да, да.
[01:05:21.480 --> 01:05:22.480]  Ну не только.
[01:05:22.480 --> 01:05:24.480]  Потому что коэффициенты маленькие должны быть, да?
[01:05:24.480 --> 01:05:25.480]  Ну, в принципе, да.
[01:05:25.480 --> 01:05:28.480]  Одна из надежных идей, конечно, такая.
[01:05:28.480 --> 01:05:29.480]  Ладно.
[01:05:29.480 --> 01:05:35.480]  Значит, это был алгоритм Коротцуба и его уминание обеими ногами.
[01:05:35.480 --> 01:05:36.480]  Вот.
[01:05:36.480 --> 01:05:37.480]  Ну, там да.
[01:05:37.480 --> 01:05:38.480]  Ладно.
[01:05:38.480 --> 01:05:39.480]  Очень, да.
[01:05:39.480 --> 01:05:44.480]  Очень боюсь врать, но я подозреваю, что это все может называться алгоритмом Шенхайо Штрассана, если что.
[01:05:44.480 --> 01:05:45.480]  Да.
[01:05:45.480 --> 01:05:49.480]  Встречалась там фамилия Штрассан?
[01:05:49.480 --> 01:05:50.480]  Нет?
[01:05:50.480 --> 01:05:51.480]  Ну ладно.
[01:05:51.480 --> 01:05:52.480]  Вот еще такая.
[01:05:52.480 --> 01:06:03.480]  Просто Штрассан действительно известен тем, что он примерно аналогичным способом придумал, как перемножать матрицы размера n на n быстрее, чем за n куб.
[01:06:03.480 --> 01:06:06.480]  Что там n в степени n куб минус...
[01:06:06.480 --> 01:06:07.480]  Нет.
[01:06:07.480 --> 01:06:09.480]  Там n в степени log 2,7.
[01:06:09.480 --> 01:06:11.480]  Причем тоже идея в духе.
[01:06:11.480 --> 01:06:15.480]  Разделим вот там эту матрицу на 4, эту матрицу на 4.
[01:06:16.480 --> 01:06:20.480]  Сделаем какие-то 7 хитрых умножений разбираем пополам-пополам.
[01:06:20.480 --> 01:06:23.480]  И там еще какие-то шаманские формулы.
[01:06:23.480 --> 01:06:27.480]  В общем, они описаны в Корме, и в самом Корме грустно написано.
[01:06:27.480 --> 01:06:34.480]  К сожалению, в статье Штрассана не говорится о том, каким образом он пришел к этим формулам.
[01:06:34.480 --> 01:06:43.480]  Условно какая богиня Сида ему на ухо нашептала, но подогнал, короче.
[01:06:43.480 --> 01:06:47.480]  В любом случае понятно, сейчас там матрицы умножают быстрее.
[01:06:47.480 --> 01:06:52.480]  В Википедиях вообще можно увидеть какой-нибудь текст.
[01:06:52.480 --> 01:06:58.480]  Что сейчас лучший алгоритм умножает матрицы за n в степени 2.2354.
[01:06:58.480 --> 01:07:06.480]  Это улучшение метода Капельсмита Винограда, который работал за 2.2381.
[01:07:06.480 --> 01:07:13.480]  Нет, это все, да. Практического значения это особо не имеет.
[01:07:13.480 --> 01:07:18.480]  Но, как говорится, тут называется дальше, наука вещь такая.
[01:07:18.480 --> 01:07:23.480]  Когда-нибудь, когда в компьютере будет нормальное количество разрядов, а не эти ваши 64,
[01:07:23.480 --> 01:07:30.480]  собственно, это будут нормальные актуальные алгоритмы, которые все будут писать.
[01:07:30.480 --> 01:07:35.480]  Пока имели в библиотеку.
[01:07:35.480 --> 01:07:45.480]  Ну что, да. Ну, как сказать, да, правда, придет.
[01:07:45.480 --> 01:07:57.480]  Бесконечность – это предел, вы это уже знаете.
[01:07:57.480 --> 01:08:02.480]  Ну, как сказать, я бы сказал, ее предел равен бесконечности.
[01:08:02.480 --> 01:08:07.480]  Так, вопрос был, является ли бесконечность пределом. Ответ, да, является.
[01:08:07.480 --> 01:08:11.480]  Потому что бесконечность – это пределы этой последовательности.
[01:08:11.480 --> 01:08:16.480]  Это другой вопрос, что также в этом случае говорят, что он расходится.
[01:08:16.480 --> 01:08:18.480]  С прочими красивыми анекдотами на экзамене.
[01:08:18.480 --> 01:08:22.480]  Профессор, что будет, если я попрошу вас посчитать сумму этого ряда?
[01:08:22.480 --> 01:08:29.480]  Студент, я повешусь. Профессор правильно, он расходится.
[01:08:29.480 --> 01:08:34.480]  Пока тут суд доделал, я тут что-то постирал.
[01:08:34.480 --> 01:08:40.480]  А мы, собственно, попробуем пойти с этим всем разделяя властвой.
[01:08:40.480 --> 01:08:47.480]  Нет, почему? Как раз недалеко и чуть другую сторону, может быть, даже красивше получится.
[01:08:47.480 --> 01:08:54.480]  Потому что, на самом деле, от идеи разделяя властву с интерполяцией мы, собственно, далеко не уйдем.
[01:08:54.480 --> 01:08:58.480]  Потому что, смотрите, как теперь нам это предлагается делать?
[01:08:58.480 --> 01:09:01.480]  Да, мы продолжаем считать, что у нас n степень двойки.
[01:09:01.480 --> 01:09:03.480]  Да, кстати, жестко, на самом деле.
[01:09:03.480 --> 01:09:08.480]  Заметьте, что конкретно тут вы можете догадаться, что на самом деле вы делите на три части магнит,
[01:09:08.480 --> 01:09:11.480]  делите на приблизительно три.
[01:09:11.480 --> 01:09:14.480]  Ну, там два варианта выкрутится.
[01:09:14.480 --> 01:09:19.480]  Если n не делится на три, например, то вы можете либо докинуть два нуля, допустим, в конец,
[01:09:19.480 --> 01:09:28.480]  либо этот остаточек как-нибудь домножить прям вручную за линию.
[01:09:28.480 --> 01:09:31.480]  И n на три будет уже округленное вниз.
[01:09:31.480 --> 01:09:34.480]  Ну, там, в общем, тоже повыкручиваться можно.
[01:09:34.480 --> 01:09:40.480]  По сравнению с тем, как мы махали руками внутри, это уже мелочи.
[01:09:40.480 --> 01:09:45.480]  Ну вот, а сейчас у нас на самом деле просто очень жестко будет, что n это степень двойки.
[01:09:45.480 --> 01:09:48.480]  Прям вот очень жестко.
[01:09:48.480 --> 01:09:52.480]  Нет, на этот раз реально, вот не как обычно.
[01:09:52.480 --> 01:09:55.480]  Чего? Пока да.
[01:09:55.480 --> 01:09:58.480]  Ну, хотя да, это нам тоже.
[01:09:58.480 --> 01:10:02.480]  Ну да.
[01:10:02.480 --> 01:10:09.480]  Ну, если длины не равны, ну, как сказать, то я боюсь, там везде просто будет один и тот же лайфхак,
[01:10:09.480 --> 01:10:13.480]  который пользует умножение для одинаковых многочленов как черный ящик.
[01:10:13.480 --> 01:10:15.480]  Ну, давайте вот сразу вам скажу.
[01:10:15.480 --> 01:10:22.480]  Потому что на самом деле, если у вас есть многочлен размера n и многочлен размера m,
[01:10:22.480 --> 01:10:27.480]  ну так, поменьше, то можно на самом деле сделать следующий механизм.
[01:10:27.480 --> 01:10:30.480]  В общем, заметьте, вот просто пусть у нас есть многочлен, то есть что-то черный ящик,
[01:10:30.480 --> 01:10:36.480]  который умножает одинаковые длины, ну, там сейчас выясним, сколько-нибудь.
[01:10:37.480 --> 01:10:39.480]  Именно, именно.
[01:10:39.480 --> 01:10:41.480]  Точнее, на блоке по n.
[01:10:41.480 --> 01:10:43.480]  Даже точнее будет сказать.
[01:10:43.480 --> 01:10:47.480]  И их там перемножаем, потом за o от n, соответственно, приводим друг к другу.
[01:10:47.480 --> 01:10:49.480]  И тогда получается, что у нас это равно.
[01:10:49.480 --> 01:10:56.480]  То есть это будет просто n делить на n, на сколько вы там этим наращением домножаете.
[01:10:56.480 --> 01:11:01.480]  Ну, то есть, соответственно, в идеале Фурьятина нам сейчас даст n лог m,
[01:11:01.480 --> 01:11:11.480]  вот Корацубо нам дал бы n в степени условно там, ну, в базовой версии лог 2, 3, минус 1.
[01:11:16.480 --> 01:11:18.480]  Вот, на самом деле.
[01:11:19.480 --> 01:11:24.480]  Ну, то есть, обычно такой вот лайфак, то есть он позволяет так свести,
[01:11:24.480 --> 01:11:28.480]  что если m совсем мелко, то тогда оно будет реально стремиться к o от n.
[01:11:28.480 --> 01:11:32.480]  Ну, впрочем, реально, n длинные на короткое вы же, наверное, за линию домножите, правда?
[01:11:32.480 --> 01:11:34.480]  А не там за n лог n какой-то.
[01:11:35.480 --> 01:11:36.480]  Вот.
[01:11:36.480 --> 01:11:40.480]  Поэтому нас, в общем-то, не сильно, поэтому нас не сильно смущает вот это вот ограничение
[01:11:40.480 --> 01:11:45.480]  на тему того, что мы будем умножать там многочленные одинаковые длинные.
[01:11:46.480 --> 01:11:51.480]  Там b1t плюс там b2t квадратом, бла-бла-бла.
[01:11:51.480 --> 01:11:53.480]  Бла-бла-бла.
[01:11:55.480 --> 01:11:56.480]  Вот.
[01:11:56.480 --> 01:12:00.480]  Значит, смотрите еще раз, n это жестко степень 2.
[01:12:04.480 --> 01:12:10.480]  Значит, тут нам говорят, тут нам говорят примерно следующее.
[01:12:13.480 --> 01:12:14.480]  Значит, смотрите.
[01:12:14.480 --> 01:12:19.480]  Значит, мы все еще, значит, мы не оставим идею действительно вот ровно таким образом все интерполировать.
[01:12:21.480 --> 01:12:22.480]  Вот.
[01:12:22.480 --> 01:12:24.480]  Но мы пойдем чуть дальше.
[01:12:24.480 --> 01:12:26.480]  То есть у нас будет мечта.
[01:12:27.480 --> 01:12:34.480]  То есть завести, ну, в нашем случае t0, t1 и так далее, ну, в нашем случае давайте 2n чисел,
[01:12:34.480 --> 01:12:37.480]  ну, для ровного счета 2n нам нужно, правда?
[01:12:38.480 --> 01:12:44.480]  И нам нужно уметь переводить многочлены из одного вида в другой.
[01:12:44.480 --> 01:12:45.480]  Что я имею в виду?
[01:12:46.480 --> 01:12:47.480]  Ну, давайте я вот так скажу.
[01:12:47.480 --> 01:12:50.480]  Я вот хочу сказать, что у меня есть многочлен размера n.
[01:12:51.480 --> 01:12:57.480]  Вот я могу представить этот многочлен в виде n чисел, в виде n его коэффициентов.
[01:12:59.480 --> 01:13:01.480]  Это просто классический многочлен a.
[01:13:04.480 --> 01:13:07.480]  А можно его представить, если у меня есть фиксированные вот константы, да?
[01:13:07.480 --> 01:13:14.480]  Можно его представить как в виде вот такой последовательности a от t0, a от t1, a от t2, ну, и так далее.
[01:13:17.480 --> 01:13:25.480]  Вот, просто если мне даны эти значения, то я, по крайней мере, называется, как говорят, это at least in principle,
[01:13:25.480 --> 01:13:31.480]  то есть могу однозначно восстановить вот эти коэффициенты, как мы уже, собственно, вот там остатки даже написаны.
[01:13:34.480 --> 01:13:41.480]  Но единственная проблема, что мы это можем сделать за n куб, а нам бы хотелось побыстрее.
[01:13:42.480 --> 01:13:50.480]  Но заметим, что если у нас возникнет какой-то такой двусторонний черный ящик, который будет из этого получать это,
[01:13:50.480 --> 01:14:05.480]  а из этого получать это, вот нот, то тогда заметим, что я, тогда мы, и нот, этот черный ящик будет их перегонять за время какой-нибудь там t' от n.
[01:14:05.480 --> 01:14:13.480]  То я тогда смогу сделать умножение двух многочленов размера n за какое время?
[01:14:13.480 --> 01:14:22.480]  Ну, два, давайте так, 2t' от n плюс o от n. Ну, в принципе, 2t' от n, это, скорее всего, там t' от n все равно будет, правда?
[01:14:22.480 --> 01:14:25.480]  Ну, просто как-то так, но я так вот аккуратно напишу.
[01:14:25.480 --> 01:14:33.480]  Ну, то есть оговоримся, как я сделаю, то есть как бы я перегоню в такой вид многочлен a, многочлен b, мне получится значение,
[01:14:33.480 --> 01:14:39.480]  тогда я получу в этих точках значение многочлена c, которое является произведением, и потом перегоню обратно.
[01:14:41.480 --> 01:14:50.480]  Ну, единственное, только вот важная оговорка, что я здесь говорю, что у меня есть n, но на самом деле, конечно, a и b мне придется представить как многочлен размера 2n.
[01:14:51.480 --> 01:15:00.480]  Почему? Ну, потому что мы знаем, что многочлен c у нас будет размера, то есть там степень его может быть больше, чем n-1, правда?
[01:15:00.480 --> 01:15:06.480]  Поэтому нам, чтобы его однозначно восстановить, нам все-таки потребуется 2n чисел, а не n.
[01:15:08.480 --> 01:15:12.480]  Вот. Ну вот, то есть это вот маленькая техническая оговорочка.
[01:15:12.480 --> 01:15:18.480]  То есть итак, то есть у нас теперь задача. То есть теперь у нас не два многочлена, а один. То есть я вот эту b-шку убираю.
[01:15:19.480 --> 01:15:26.480]  Еще b-шку убираем. То есть когда я сказал, что знаю, как потом за 1n что-то доделать, значит, узнаю все.
[01:15:27.480 --> 01:15:38.480]  О боже. Так. Ну, это называется хорошо. Так, надо ли еще более точные комментарии давать на тему того, что надо дополнительно делать, если у вас этот черный ящик есть?
[01:15:42.480 --> 01:15:46.480]  Ну да. Ну и там нулики еще докинуть. Вот, это понятно?
[01:15:49.480 --> 01:15:50.480]  Да.
[01:15:53.480 --> 01:15:56.480]  Понятно, да. Вот, хорошо.
[01:16:01.480 --> 01:16:03.480]  Значит, смотрим.
[01:16:04.480 --> 01:16:17.480]  Ну как же мечта, ну да, мы уже, ну да, не то чтобы научились это делать, но конечно мы можем это для каких-то фиксированных точек за n квадрат в принципе сделать это в одну сторону и за n куб в другую.
[01:16:18.480 --> 01:16:20.480]  Как же это сделать быстрее?
[01:16:21.480 --> 01:16:25.480]  Но до сего момента заметим, что у нас есть еще такой потомсал для улучшения.
[01:16:26.480 --> 01:16:33.480]  Мы же, заключается он в том, что мы не обсуждали ни разу, а чему сами вот эти t-шки равны.
[01:16:34.480 --> 01:16:40.480]  Чему они равны? Там 0, 1, 2, 3, там 4, 5. Там 2, 3, 5, 7, 11, 13, 17.
[01:16:41.480 --> 01:16:46.480]  Там минус 1, минус 2, p, e. В общем, чему угодно могли быть равны.
[01:16:47.480 --> 01:16:48.480]  Практически.
[01:16:49.480 --> 01:16:56.480]  Поэтому мы можем попытаться подогнать такие красивые значения, вот чтобы там формулы пересчета были максимально удобны.
[01:16:58.480 --> 01:17:04.480]  Вот. Предлагается сделать следующее. Смотрите, сейчас такая мистическая штука.
[01:17:07.480 --> 01:17:11.480]  Так, давайте вот эту матрицу берем, чтобы она нас не спущала.
[01:17:16.480 --> 01:17:36.480]  Значит, что у нас тут будет?
[01:17:37.480 --> 01:17:43.480]  Значит, мы скажем, мы введем мистическое число w.
[01:17:46.480 --> 01:17:50.480]  W-n. Ну, для каждого n мы будем свое w вводить, правда?
[01:17:51.480 --> 01:17:52.480]  Для каждого k скорее.
[01:17:53.480 --> 01:17:57.480]  Ну, для каждого n в смысле для каждого k, да, это идентично.
[01:17:58.480 --> 01:18:00.480]  Так вот, ну, обычно его все-таки w-n обозначают.
[01:18:01.480 --> 01:18:05.480]  Значит, w-n...
[01:18:05.480 --> 01:18:07.480]  Значит, на...
[01:18:26.480 --> 01:18:29.480]  Вот давайте я так скажу, да, вот в эту сторону t3, а в эту сторону t2.
[01:18:30.480 --> 01:18:32.480]  Да, вы правы, спасибо.
[01:18:35.480 --> 01:18:43.480]  Значит, w-n будет обладать следующими мистическими свойствами.
[01:18:44.480 --> 01:18:53.480]  Я очень хочу, чтобы w-n в степени n было равно 1.
[01:18:53.480 --> 01:18:57.480]  Нет, внимание.
[01:18:58.480 --> 01:19:05.480]  Но при этом я хочу, чтобы w-n в степени n пополам не было равно 1.
[01:19:06.480 --> 01:19:10.480]  Этого достаточно.
[01:19:10.480 --> 01:19:15.480]  Вот.
[01:19:16.480 --> 01:19:23.480]  Да, в действительных числах, конечно, этого добра для m больше, чем 2 мы не найдем, правда?
[01:19:24.480 --> 01:19:30.480]  Но, с другой стороны, а кто сказал, что мы обязаны жить именно в поле действительных чисел?
[01:19:31.480 --> 01:19:32.480]  Ведь есть такие замечательные поля.
[01:19:33.480 --> 01:19:38.480]  Например, там поле по модулю 9,9,8,2,4,4,4,3,5,3.
[01:19:38.480 --> 01:19:48.480]  Да, и вот, хорошо, n равно 8, там поле f3.
[01:19:49.480 --> 01:19:52.480]  И где ты такое w там найдешь?
[01:19:53.480 --> 01:19:57.480]  11.
[01:19:58.480 --> 01:20:03.480]  Да, и прям там найдет, чтобы восьмая степень была равна 1, а четвертая неравна.
[01:20:03.480 --> 01:20:08.480]  Учитывая, что они там в десятые все равны, не тягится.
[01:20:09.480 --> 01:20:11.480]  Вот проблема, да?
[01:20:12.480 --> 01:20:22.480]  То есть, на самом деле, если вы хотите делать это в каком-то поле, то крайне желательно, чтобы это было поле по модулю P, которое равно...
[01:20:23.480 --> 01:20:27.480]  Так, какие буквы-то подобрать-то?
[01:20:28.480 --> 01:20:30.480]  Ну, не совсем.
[01:20:30.480 --> 01:20:35.480]  C на 2 в степени c, c на степени k.
[01:20:36.480 --> 01:20:38.480]  На степени l, давайте.
[01:20:39.480 --> 01:20:43.480]  C на 2 в степени l плюс 1, ну, где c обычно нечетным просто берут.
[01:20:44.480 --> 01:20:48.480]  И желательно, чтобы l было больше либо равно k.
[01:20:49.480 --> 01:20:55.480]  Я утверждаю, что по модулю такого P...
[01:20:55.480 --> 01:21:00.480]  Ну, просто да.
[01:21:01.480 --> 01:21:03.480]  Пусть у нас есть простое число вот такого вида.
[01:21:04.480 --> 01:21:07.480]  Тогда я утверждаю, что такие wn в нем найдутся.
[01:21:08.480 --> 01:21:18.480]  Ну, в принципе, если я просто произнести два слова первообразный корень, то, скорее всего, вы уже догадываетесь, откуда я эти wn возьму, правда?
[01:21:21.480 --> 01:21:23.480]  То есть, вот, например, так.
[01:21:24.480 --> 01:21:31.480]  Ну, или другой вариант такой популярный, как все используются, это, конечно, поле еще комплексных чисел.
[01:21:32.480 --> 01:21:35.480]  Ну, а в поле комплексных чисел, т.е. wn, это просто...
[01:21:36.480 --> 01:21:42.480]  т.е. wn у нас будет тупо, ну, там, чаще всего пишут, z в степени 2 pi поделить на n.
[01:21:43.480 --> 01:21:45.480]  Так, знакомое заклинание?
[01:21:46.480 --> 01:21:48.480]  А наукотечее это было?
[01:21:48.480 --> 01:21:50.480]  Нет, опять же не наукотечее.
[01:21:51.480 --> 01:21:53.480]  А, наукотечее, только это, дирекля начался.
[01:21:54.480 --> 01:21:55.480]  А, аки, ну мало ли.
[01:21:56.480 --> 01:21:58.480]  Дирекля, дирекля большой.
[01:21:59.480 --> 01:22:01.480]  Он и не закончится еще.
[01:22:02.480 --> 01:22:03.480]  Ну ладно, хорошо, ладно.
[01:22:04.480 --> 01:22:12.480]  Главное, что это все знает, т.е. мы сейчас не должны с вами вводиться, что это такое, как там устроено умножение этих комплексных чисел, почему там при умножении углы складываются, они перемножаются.
[01:22:13.480 --> 01:22:14.480]  Вот это все не надо, да?
[01:22:15.480 --> 01:22:17.480]  Великолепно, великолепно.
[01:22:18.480 --> 01:22:19.480]  Значит, смотрите.
[01:22:20.480 --> 01:22:25.480]  Ну, просто, на самом деле, нам только вот эти свойства, вот этих свойств, только этих и надо.
[01:22:26.480 --> 01:22:42.480]  Ну, потому что, да, потому что, видимо, Тихон, когда тут это сразу стал выпить, что мне тут что-то не хватило, видимо, имел в виду, что очень хотелось бы, чтобы все степени w от 0 до n-1 были попарно различны, правда?
[01:22:43.480 --> 01:22:44.480]  Да.
[01:22:44.480 --> 01:22:49.480]  Ну, давай смотреть.
[01:22:50.480 --> 01:22:51.480]  Дело в том, что...
[01:22:52.480 --> 01:22:53.480]  Ну, давай так, смотрите.
[01:22:54.480 --> 01:23:01.480]  Ну, во-первых, у числа w, n есть порядок, да, т.е. это минимальное число r такое, что w, n в степени r равно 1, да?
[01:23:02.480 --> 01:23:04.480]  Ну, при этом он делит степень в 1, значит, он сам делит в 1.
[01:23:04.480 --> 01:23:05.480]  Ну, вот, да.
[01:23:06.480 --> 01:23:11.480]  Т.е. легко показать, что этот r, т.е. если у нас вот для n это верно, то r должен быть его делителем.
[01:23:12.480 --> 01:23:19.480]  Ну, понятно, потому что если для n это верно, для r это верно, то это верно и для их gcd, там просто алгоритмы Мифклида можно это найти.
[01:23:20.480 --> 01:23:21.480]  Там n-r, в общем.
[01:23:22.480 --> 01:23:27.480]  Поэтому r должно быть делителем n, но с другой стороны, заметим, что у нас все делители n это степень и двойки.
[01:23:28.480 --> 01:23:29.480]  Вот.
[01:23:30.480 --> 01:23:38.480]  Но заметим, что если бы у нас порядок был меньшей степенью двойки, чем само n, то уж тогда в степени n пополам тоже было бы равно 1, а этого не равно.
[01:23:39.480 --> 01:23:43.480]  Так что на самом деле, что приятно проверять достаточно только это.
[01:23:44.480 --> 01:23:55.480]  Ну, заметим, я еще так аккуратно писал, я мог бы тут описать равно минус 1, потому что на самом деле в любом поле если число не равно 1, а квадрат равен 1, то число равно минус 1, правда?
[01:23:56.480 --> 01:23:57.480]  Так, в любом поле.
[01:23:59.480 --> 01:24:00.480]  А, ну да, в любом, конечно.
[01:24:01.480 --> 01:24:03.480]  Разность квадратов работает в любом поле, да.
[01:24:04.480 --> 01:24:05.480]  Вот.
[01:24:06.480 --> 01:24:07.480]  Так вот.
[01:24:08.480 --> 01:24:11.480]  Значит, что нам это wn дает?
[01:24:12.480 --> 01:24:14.480]  А дает она нам примерно следующее.
[01:24:15.480 --> 01:24:19.480]  Сейчас мы опять разобьем этот многочлен на 2.
[01:24:20.480 --> 01:24:24.480]  Но, внимание, не путайте, я еще тоже буду называть а0, а1, но это...
[01:24:25.480 --> 01:24:26.480]  Так, вот так.
[01:24:26.480 --> 01:24:27.480]  Так, я вот это тоже сотру.
[01:24:28.480 --> 01:24:30.480]  Забудьте все, что мы рассказывали в школе.
[01:24:31.480 --> 01:24:32.480]  Не, ну как сказать.
[01:24:33.480 --> 01:24:34.480]  И еще все, что мы рассказывали в школе.
[01:24:35.480 --> 01:24:38.480]  Ну да, забудьте все, что мы рассказывали в школе, а потом через 5 минут.
[01:24:39.480 --> 01:24:40.480]  Ну, ребят, вы что, это программа седьмого класса.
[01:24:43.480 --> 01:24:44.480]  Так.
[01:24:45.480 --> 01:24:51.480]  Нет, ну тут я просто оговорюсь то, что сейчас мы просто, скажем так, мы перегрузим обозначение, вот так.
[01:24:52.480 --> 01:24:53.480]  Ладно, переобозначение.
[01:24:54.480 --> 01:24:55.480]  Перегрузим.
[01:24:56.480 --> 01:24:57.480]  Чего?
[01:24:59.480 --> 01:25:01.480]  Нельзя просто так взять какое-нибудь обозначение.
[01:25:02.480 --> 01:25:04.480]  Надо, пожалуй, либо на область видимости.
[01:25:05.480 --> 01:25:06.480]  Чего должно быть?
[01:25:07.480 --> 01:25:08.480]  На область видимости.
[01:25:09.480 --> 01:25:10.480]  Либо...
[01:25:11.480 --> 01:25:13.480]  Все, да, да.
[01:25:14.480 --> 01:25:15.480]  А, точно, давай, давай.
[01:25:16.480 --> 01:25:19.480]  А, то есть предлагаете сделать перерыв после этого, вводить вообще новое обозначение, да?
[01:25:20.480 --> 01:25:21.480]  А сколько там времени?
[01:25:22.480 --> 01:25:23.480]  А, давайте, сколько там времени реальности?
[01:25:24.480 --> 01:25:25.480]  10-40.
[01:25:26.480 --> 01:25:27.480]  Не, ну точно перерыв надо.
[01:25:28.480 --> 01:25:29.480]  Или не надо.
[01:25:30.480 --> 01:25:31.480]  Ладно, отлично, давайте.
[01:25:32.480 --> 01:25:33.480]  Давайте.
[01:25:34.480 --> 01:25:37.480]  Пока просто рассмотрим вот такое число, и мы стали обсуждать, где его взять.
[01:25:38.480 --> 01:25:40.480]  Вот основное, где его берут.
[01:25:41.480 --> 01:25:42.480]  А камера работает, да?
[01:25:43.480 --> 01:25:44.480]  Да.
[01:25:45.480 --> 01:25:47.480]  Значит, ребят, что там за обозначение?
[01:25:48.480 --> 01:25:54.480]  Да, то есть основная фишка заключалась в том, что мы его брали либо берется чаще всего в комплексных числах,
[01:25:54.480 --> 01:25:57.480]  либо вот в целых.
[01:25:58.480 --> 01:25:59.480]  Значит, зачем нам это нужно?
[01:26:00.480 --> 01:26:01.480]  Вот, поехали.
[01:26:02.480 --> 01:26:05.480]  Значит, вот сейчас мы и скажем, как же это нам все делать.
[01:26:06.480 --> 01:26:12.480]  То есть как же нам по коэффициентам восстановить значение в именно этих n точках.
[01:26:13.480 --> 01:26:14.480]  А вот как, смотрите.
[01:26:15.480 --> 01:26:17.480]  Значит, мы разобьем многочлен на два.
[01:26:18.480 --> 01:26:19.480]  Значит, смотрите.
[01:26:19.480 --> 01:26:20.480]  Значит, смотрите.
[01:26:21.480 --> 01:26:28.480]  Но на этот раз будет верно, что a,t у меня будет равно, а потом не скажу пока, чему равно.
[01:26:29.480 --> 01:26:30.480]  Я напишу два многочлена.
[01:26:31.480 --> 01:26:32.480]  a0 и a1.
[01:26:33.480 --> 01:26:35.480]  Но они теперь будут работать вот по такому принципу.
[01:26:35.480 --> 01:26:50.480]  Значит, a0 плюс a2t плюс a4t в квадрате плюс плюс plus an-2 на t в степени n пополам минус 1.
[01:26:55.480 --> 01:26:56.480]  И, соответственно, a1.
[01:26:57.480 --> 01:26:58.480]  То есть, видите, вот разницу.
[01:26:59.480 --> 01:27:00.480]  То есть, раньше я делил просто тупо.
[01:27:00.480 --> 01:27:05.980]  Младшая коэффициент старше, а теперь коэффициенты с чётными индексами, коэффициенты с нечётными индексами.
[01:27:07.980 --> 01:27:12.980]  Да, тут очень хочется сказать, чётные коэффициенты и нечётные коэффициенты, но лучше так не говорить.
[01:27:14.980 --> 01:27:19.980]  Вот, значит, a n-1, а t в степени n пополам минус 1.
[01:27:22.480 --> 01:27:24.480]  Красота! Благодарю.
[01:27:24.980 --> 01:27:25.980]  Значит, поехали.
[01:27:26.480 --> 01:27:28.480]  Значит, a t равно...
[01:27:28.980 --> 01:27:42.480]  Ну, тогда можно из этого всего легко заметить, что a t равно a 0, a t плюс a 1, a t и t.
[01:27:43.480 --> 01:27:48.480]  Так, да. Какие ещё символы? Да, надо добавить правильства, чтобы оно стало верным.
[01:27:48.480 --> 01:27:56.480]  Ну да, на самом деле, да. То есть, что интересно?
[01:27:59.480 --> 01:28:03.480]  Да, то есть мы обнаружим, что, оказывается, надо просто сюда подставить квадрат.
[01:28:06.480 --> 01:28:09.480]  Ну, тогда, значит, теперь думаем, чтобы...
[01:28:11.480 --> 01:28:13.480]  Ну вот, а теперь давайте заметим следующее.
[01:28:14.480 --> 01:28:15.480]  Вот зачем мы эти числа брали?
[01:28:15.480 --> 01:28:18.480]  Мы эти, естественно, то есть мы хотим сказать, вот t-шки, это что такое?
[01:28:19.480 --> 01:28:28.480]  Ну, в качестве t-шек они у нас теперь будут просто числа w n в степени 0, w n в степени 1 и так далее, w n в степени n-1.
[01:28:29.480 --> 01:28:31.480]  Вот мы ровно эти числа и хотим.
[01:28:35.480 --> 01:28:36.480]  Вот.
[01:28:37.480 --> 01:28:45.480]  Ну а теперь давайте посмотрим, а что будет, если я эти числа возведу в квадрат?
[01:28:50.480 --> 01:28:51.480]  Что будет?
[01:28:52.480 --> 01:29:02.480]  Ну, будет, соответственно, w n в степени 0, w n в степени 2, w n в степени 4 и так далее, w n в степени 2n-2.
[01:29:03.480 --> 01:29:05.480]  Ну, казалось бы, те же самые числа.
[01:29:07.480 --> 01:29:09.480]  Те же, но с маленьким нюансом.
[01:29:10.480 --> 01:29:19.480]  Дело в том, что где-то тут в середине у нас возникнет число, ну там будет w n в степени n-2 и тут будет w n в степени n.
[01:29:20.480 --> 01:29:23.480]  Ну и дальше будет w n в степени n-2, ну и так далее.
[01:29:24.480 --> 01:29:28.480]  Да, но за w n в степени n напоминаю, у нас равно 1.
[01:29:32.480 --> 01:29:33.480]  Вот.
[01:29:34.480 --> 01:29:40.480]  Но тогда отсюда автоматически следует уже просто по свойствам там произведений там всяких степеней.
[01:29:41.480 --> 01:29:47.480]  В общем, короче, школьная алкебрия уже тогда становится очевидна, что тогда вот эта штука равна w n в квадрате.
[01:29:48.480 --> 01:29:53.480]  А здесь получается там, это получается w n в степени n-2.
[01:29:58.480 --> 01:29:59.480]  Вот.
[01:30:00.480 --> 01:30:08.480]  То есть получается, что реально различных чисел среди этих квадратов у нас получается сколько?
[01:30:09.480 --> 01:30:10.480]  n пополам.
[01:30:12.480 --> 01:30:13.480]  Но тогда чем это приятно?
[01:30:14.480 --> 01:30:20.480]  Это приятно тем, что тогда у нас получается вот многочлены a0 и a1, они тоже размера n пополам.
[01:30:21.480 --> 01:30:36.480]  И фактически нам требуется, вот, чтобы восстановить значение n пополам в дружных там точках, нам нужно, чтобы a0 и a1 найти их значение вот в этих n пополам точках.
[01:30:37.480 --> 01:30:53.480]  Но что самое приятное, w n в квадрате, ну, если, конечно, n не слишком маленькое, можно вполне себе воспринять как число w n пополам.
[01:30:55.480 --> 01:31:00.480]  Потому что заметьте, что оно в степени n пополам равно, естественно, единице, правда?
[01:31:01.480 --> 01:31:11.480]  Но с другой стороны, если я его зведу в степень n пополам пополам, то есть n на 4, то у меня получится w n в степени n пополам, что не равно единиц.
[01:31:13.480 --> 01:31:19.480]  То есть видим, что w n пополам вполне может быть использованным для наших, для таких целей.
[01:31:20.480 --> 01:31:21.480]  Очень удобно.
[01:31:22.480 --> 01:31:29.480]  То есть фактически, то есть нам нужно, на самом деле, чтобы перемножить значение на n, нам нужно найти одно w n вот такое.
[01:31:30.480 --> 01:31:39.480]  И, соответственно, просто про теперь n. И когда мы будем запускаться рекурсивно, как вы уже догадались, мы будем запускаться рекурсивно.
[01:31:40.480 --> 01:31:47.480]  То есть мы будем просто предлагать в качестве w, в качестве каждого следующего w, предыдущее w в квадрате.
[01:31:48.480 --> 01:31:49.480]  Всё.
[01:31:50.480 --> 01:31:54.480]  То есть таким образом мы получаем маленькую приятную вещь.
[01:31:55.480 --> 01:32:05.480]  То есть мы получаем, то есть таким образом нам надо просто запуститься рекурсивно от многочлена a0 и a1, видите, да?
[01:32:06.480 --> 01:32:17.480]  Значит, a0 и a1, а потом, ну вот, а потом получить эти n пополам значения, а потом просто за o от n вот по этой формуле их насчитать.
[01:32:19.480 --> 01:32:22.480]  То есть вот такая вот у нас возник эта идея.
[01:32:23.480 --> 01:32:29.480]  Вот. Ну, в какой-то момент, вот, возможно, даже сейчас нам всё-таки будет стоит написать код.
[01:32:30.480 --> 01:32:38.480]  Вот. Потому что всё-таки в этом месте придётся поговорить всё-таки не только о том, как это делается математически, потому что математическую суть алгоритма, в общем-то, я уже почти рассказал.
[01:32:39.480 --> 01:32:43.480]  Думаю, думаю отсюда очевидно, почему алгоритм работает за n лог n, правда?
[01:32:44.480 --> 01:32:46.480]  Да. Да, с маленькой оговорочкой, да.
[01:32:47.480 --> 01:32:52.480]  Теперь вот, чтобы разобраться полностью в математической сути, что нам нужно?
[01:32:53.480 --> 01:32:57.480]  Нам нужно только понять, действительно, а как делать обратно?
[01:32:59.480 --> 01:33:01.480]  Вот спрашивается, как делать обратно?
[01:33:04.480 --> 01:33:05.480]  Минус?
[01:33:06.480 --> 01:33:07.480]  Нет, нет, нет.
[01:33:08.480 --> 01:33:15.480]  Ну, во-первых, не минусы сопряжённые, а во-вторых, на самом деле, я бы сказал, один велить на wn лучше взять.
[01:33:16.480 --> 01:33:20.480]  Вот так. Ну, потому что в комплексных числах это одно и то же, а в простых числах такого нет.
[01:33:21.480 --> 01:33:25.480]  Значит, смотрите, как же, значит, прямое мы сделали, да?
[01:33:26.480 --> 01:33:28.480]  А теперь вот идея такая, смотрите.
[01:33:29.480 --> 01:33:30.480]  Как делать обратное? Внимание.
[01:33:31.480 --> 01:33:37.480]  Значит, вот прямое, когда мы делали, вот a1, a2, там, a0, a1, a2 и так далее, an-1.
[01:33:38.480 --> 01:33:49.480]  Значит, мы применили вот это преобразование там с коэффициентом wn и получили ещё какие-то числа.
[01:33:50.480 --> 01:33:54.480]  Вот давайте я их тоже тут назову, допустим, b0, b1, b2.
[01:33:55.480 --> 01:34:04.480]  Нет, смотрите, прямое, но очень просто, смотрите.
[01:34:05.480 --> 01:34:12.480]  Мы разбили этот многочлен вот на такие два, запустились рекурсивно от многочленов размера n пополам,
[01:34:13.480 --> 01:34:18.480]  вычислили в этих многочленах n пополам значений в степенях вот этого числа,
[01:34:19.480 --> 01:34:23.480]  а потом, пользуясь этой формулой, восстановили n значений самого многочлена a.
[01:34:23.480 --> 01:34:28.480]  У нас была задача посчитать значения многочлена a в n точках.
[01:34:29.480 --> 01:34:31.480]  Ну да, и мы ровно вот с таких.
[01:34:32.480 --> 01:34:37.480]  Мы посчитали значения многочленов в два раза меньше количества точек, в два раза.
[01:34:38.480 --> 01:34:42.480]  Вот, понятно? Вот что мы делали.
[01:34:43.480 --> 01:34:49.480]  То есть вот мы получили какие-то значения b0, b1, где вот, соответственно, вот это вот b житое у меня равно,
[01:34:49.480 --> 01:34:53.480]  соответственно, теперь просто будет a от a житого.
[01:34:54.480 --> 01:34:56.480]  А теперь идея такая.
[01:34:57.480 --> 01:35:05.480]  Давайте попробуем применить к этой штуке внезапно тоже, то есть еще раз вот сказать,
[01:35:06.480 --> 01:35:12.480]  давайте b, это у меня тоже теперь значения, это какие-то коэффициенты многочлена мистического.
[01:35:13.480 --> 01:35:24.480]  И, ну вот, я тоже для них сделаю вот эту всю операцию, но не с числом wn, а с числом 1 делить на wn.
[01:35:27.480 --> 01:35:28.480]  Почему 1 делить? Ну вот.
[01:35:29.480 --> 01:35:34.480]  Ну, заметим, что число 1 делить на wn этим же свойствам удовлетворяет, правда?
[01:35:36.480 --> 01:35:40.480]  Ну а давайте посмотрим, что же у нас на самом деле получилось.
[01:35:41.480 --> 01:35:47.480]  Ну, получились какие-то числа c0, c1, c2 и так далее, cn-1.
[01:35:48.480 --> 01:35:49.480]  Вот.
[01:35:52.480 --> 01:35:53.480]  Да.
[01:35:54.480 --> 01:35:56.480]  А здесь теперь давайте расписывать.
[01:35:57.480 --> 01:36:04.480]  Здесь у меня по определению c житое, это сумма по всем l от 0 до n-1.
[01:36:05.480 --> 01:36:09.480]  Ну давайте я пока от t напишу.
[01:36:10.480 --> 01:36:15.480]  Это будет такая сумма как t в степени l на...
[01:36:17.480 --> 01:36:19.480]  А, нет, так не получится.
[01:36:20.480 --> 01:36:23.480]  Значит, смотрите, нет, просто c житое это число.
[01:36:23.480 --> 01:36:33.480]  Значит, это у нас будет такая штука, как, соответственно, 1 делить на wn в степени жи.
[01:36:34.480 --> 01:36:37.480]  Все это в степени жи и все это в степени l.
[01:36:38.480 --> 01:36:39.480]  Вот так я пока аккуратно напишу.
[01:36:40.480 --> 01:36:43.480]  И, соответственно, на коэффициент b.
[01:36:46.480 --> 01:36:47.480]  Видите, да?
[01:36:48.480 --> 01:36:54.480]  Ну, то есть фактически я сказал, что если я воспринимаю b как многочленный и применяю вот это преобразование...
[01:36:55.480 --> 01:36:57.480]  Ну ладно, что вы хотите, оно называется fft, да.
[01:37:02.480 --> 01:37:04.480]  Не, оно просто fft, fast Fourier transformation.
[01:37:05.480 --> 01:37:06.480]  Вот.
[01:37:07.480 --> 01:37:08.480]  Fourier 7 букв.
[01:37:09.480 --> 01:37:10.480]  Логично.
[01:37:11.480 --> 01:37:12.480]  Вот.
[01:37:13.480 --> 01:37:14.480]  Значит, смотрите.
[01:37:14.480 --> 01:37:16.480]  Так, ну давайте теперь подумаем, чего это равно?
[01:37:17.480 --> 01:37:18.480]  Давайте просто чуть-чуть это...
[01:37:19.480 --> 01:37:20.480]  Позанимаемся раскрыванием скобочек.
[01:37:21.480 --> 01:37:24.480]  Так, то есть l равно 0, n-1.
[01:37:25.480 --> 01:37:27.480]  Так, значит, теперь давайте...
[01:37:28.480 --> 01:37:29.480]  А, ну у нас в общем-то ладно.
[01:37:30.480 --> 01:37:31.480]  Так, ну что?
[01:37:32.480 --> 01:37:34.480]  Какую еще буковку ввести, учитывая, что и и к заняты?
[01:37:39.480 --> 01:37:40.480]  Под индекс.
[01:37:41.480 --> 01:37:42.480]  Под суммирование еще одну.
[01:37:44.480 --> 01:37:47.480]  И, ну и у нас минимальная единица есть.
[01:37:48.480 --> 01:37:49.480]  M.
[01:37:50.480 --> 01:37:51.480]  K.
[01:37:52.480 --> 01:37:53.480]  Ну ладно, M так M.
[01:37:54.480 --> 01:37:55.480]  Ладно, так и быть.
[01:37:56.480 --> 01:38:05.480]  Значит, получается тут такая штука, как aMt на w, соответственно, n в степени M.
[01:38:06.480 --> 01:38:07.480]  Умножить на...
[01:38:08.480 --> 01:38:09.480]  Значит...
[01:38:12.480 --> 01:38:13.480]  Значит...
[01:38:14.480 --> 01:38:15.480]  Да, 1 делить на...
[01:38:16.480 --> 01:38:17.480]  А, ну да, сумма вот такая.
[01:38:18.480 --> 01:38:20.480]  Да, и получается, да, 1 делить на это.
[01:38:21.480 --> 01:38:23.480]  Ну, давайте кюрих это и в степени g.
[01:38:24.480 --> 01:38:25.480]  Видите, да?
[01:38:27.480 --> 01:38:28.480]  Вот.
[01:38:31.480 --> 01:38:32.480]  Так, как-то что-то не так, да?
[01:38:35.480 --> 01:38:36.480]  Да, потому что...
[01:38:37.480 --> 01:38:38.480]  А, так что да.
[01:38:39.480 --> 01:38:40.480]  А, вот почему да.
[01:38:41.480 --> 01:38:43.480]  Потому что у нас тут g умножить на M, конечно.
[01:38:44.480 --> 01:38:45.480]  Фу.
[01:38:46.480 --> 01:38:47.480]  А g как у нас удается?
[01:38:48.480 --> 01:38:49.480]  А.
[01:38:50.480 --> 01:38:51.480]  Ну потому что bg, то есть это a, то g.
[01:38:52.480 --> 01:38:54.480]  Это то же самое, что сумма там...
[01:38:55.480 --> 01:38:56.480]  Так.
[01:38:57.480 --> 01:38:58.480]  Тьфу.
[01:38:59.480 --> 01:39:00.480]  Ой-ой-ой.
[01:39:01.480 --> 01:39:02.480]  Ненавижу буковки писать, да.
[01:39:03.480 --> 01:39:04.480]  Вот на самом деле, как вот.
[01:39:05.480 --> 01:39:06.480]  Вот это же у нас определение, правда?
[01:39:07.480 --> 01:39:08.480]  Вот.
[01:39:09.480 --> 01:39:10.480]  То есть это равно...
[01:39:11.480 --> 01:39:12.480]  Значит, сумма, значит, это там какого-нибудь...
[01:39:13.480 --> 01:39:16.480]  АL-то умножить на WN в степени g в степени L.
[01:39:17.480 --> 01:39:18.480]  Во.
[01:39:19.480 --> 01:39:20.480]  Ну L понятно.
[01:39:21.480 --> 01:39:22.480]  Вот.
[01:39:23.480 --> 01:39:24.480]  Значит, а перечень.
[01:39:25.480 --> 01:39:26.480]  Что это такое?
[01:39:27.480 --> 01:39:29.480]  Значит, если мы теперь все это будем суммировать как-то по-другому,
[01:39:30.480 --> 01:39:33.480]  то есть именно давайте сначала по M, а потом уже по всему остальному,
[01:39:33.480 --> 01:39:34.480]  то тогда что у нас получится?
[01:39:35.480 --> 01:39:37.480]  То есть будем суммировать M от 0 до M-1.
[01:39:38.480 --> 01:39:39.480]  Чего дальше будет получаться?
[01:39:40.480 --> 01:39:44.480]  Значит, aM умножить на какую-то странную мистическую сумму.
[01:39:45.480 --> 01:39:52.480]  Значит, а именно тут будет WN в степени g умножить на M-L.
[01:39:53.480 --> 01:39:54.480]  Вот.
[01:39:55.480 --> 01:39:59.480]  Соответственно, где у нас тут L бегает от 0 до M-1?
[01:40:00.480 --> 01:40:01.480]  Вот.
[01:40:01.480 --> 01:40:02.480]  Видите, да?
[01:40:07.480 --> 01:40:08.480]  Ну вот, давайте смотрим теперь.
[01:40:12.480 --> 01:40:13.480]  Ну вот, теперь внимание, вопрос.
[01:40:14.480 --> 01:40:15.480]  Что же это вообще такое?
[01:40:19.480 --> 01:40:20.480]  Ну, не совсем.
[01:40:21.480 --> 01:40:22.480]  Тут M все-таки, а не L, правда?
[01:40:25.480 --> 01:40:26.480]  Ну, это не совсем.
[01:40:26.480 --> 01:40:27.480]  Тут M все-таки, а не L, правда?
[01:40:34.480 --> 01:40:35.480]  Вот.
[01:40:36.480 --> 01:40:37.480]  Ну вот, тут как сказать?
[01:40:38.480 --> 01:40:39.480]  Заметим, что...
[01:40:46.480 --> 01:40:47.480]  Чего-чего?
[01:40:48.480 --> 01:40:49.480]  Очень хочется сказать.
[01:40:50.480 --> 01:40:51.480]  Ну, куча ли?
[01:40:52.480 --> 01:40:53.480]  Ну, давайте смотреть.
[01:40:54.480 --> 01:40:55.480]  Ну да.
[01:40:56.480 --> 01:40:57.480]  Что...
[01:40:58.480 --> 01:40:59.480]  Ну вот, WN у нас такой по циклу ходит.
[01:41:00.480 --> 01:41:02.480]  Во-первых, да, заметим, что это геометрическая прогрессия, правда?
[01:41:03.480 --> 01:41:12.480]  Это геометрическая прогрессия, которая начинается в числе WN в степени gM и имеет шаг.
[01:41:13.480 --> 01:41:16.480]  Шаг, она имеет WN в степени минус gL.
[01:41:17.480 --> 01:41:18.480]  Согласны?
[01:41:22.480 --> 01:41:23.480]  Да.
[01:41:23.480 --> 01:41:26.480]  Ну, когда мы... вот здесь мы переписывали, да, помнишь?
[01:41:37.480 --> 01:41:39.480]  Хотя, погодите, погодите, погодите.
[01:41:43.480 --> 01:41:46.480]  Вот, тогда все хорошо, только тогда где-то еще L должен быть.
[01:41:47.480 --> 01:41:48.480]  Вот здесь еще L должен быть.
[01:41:49.480 --> 01:41:50.480]  Вот.
[01:41:50.480 --> 01:41:51.480]  А, теперь да.
[01:41:52.480 --> 01:41:58.480]  То есть просто мы теперь выносим, то есть будет у нас теперь выносится тут L, а тут будет M минус g.
[01:41:59.480 --> 01:42:00.480]  Во.
[01:42:01.480 --> 01:42:02.480]  Да, тогда начинается, да, вот тогда все хорошо начинается.
[01:42:03.480 --> 01:42:04.480]  Да, да, да, да.
[01:42:05.480 --> 01:42:08.480]  Значит, тогда, значит, L и тут вообще соответственно тоже.
[01:42:09.480 --> 01:42:10.480]  Тут же L.
[01:42:11.480 --> 01:42:12.480]  И что дальше?
[01:42:13.480 --> 01:42:14.480]  Так, ну к чему у нас, правда?
[01:42:14.480 --> 01:42:25.480]  Ну, как бы, мы помним, что если у нас есть какой-нибудь там, вообще есть у нас есть какая-нибудь прогрессия там q, q2 и т.д., q в степени там, а у нас там член сам N минус 1,
[01:42:26.480 --> 01:42:28.480]  да, то вот эта вот сумма у нас вообще к чему равна?
[01:42:29.480 --> 01:42:30.480]  Q в N.
[01:42:31.480 --> 01:42:33.480]  Да, она равна q в N и минус 1 делить на q минус 1, да?
[01:42:34.480 --> 01:42:41.480]  Секундочку, можно мы пройдемся по всем шагам с самого начала, потому что у меня какой-то куча константов и ничего.
[01:42:42.480 --> 01:42:43.480]  Хорошо, q2.
[01:42:44.480 --> 01:42:46.480]  Значит, B-шка по определению, вот она, да?
[01:42:47.480 --> 01:42:53.480]  Давайте C-шка, в C-шке наоборот, Cgt по определению, то же самое только с B-шкой.
[01:42:54.480 --> 01:43:02.480]  То есть BLT на WN в степени g, только в нашем случае 1 делить на WN, да?
[01:43:03.480 --> 01:43:10.480]  То есть 1 делить на WN, все это в степени g, и все это в степени L, да?
[01:43:11.480 --> 01:43:12.480]  Да, отлично.
[01:43:14.480 --> 01:43:16.480]  Теперь мы пытаемся посчитать Cgt.
[01:43:16.480 --> 01:43:18.480]  Значит, мы это прям честно написали.
[01:43:19.480 --> 01:43:23.480]  После этого не менее честно расписали каждое BL.
[01:43:24.480 --> 01:43:27.480]  То есть это вот сумма aMt на WN в степени...
[01:43:28.480 --> 01:43:30.480]  А в этом случае не только чак M-g.
[01:43:31.480 --> 01:43:32.480]  Да, нам же надо просто...
[01:43:33.480 --> 01:43:35.480]  Так L делить на единицы и при чаке M-g.
[01:43:36.480 --> 01:43:37.480]  То есть просто M-g.
[01:43:38.480 --> 01:43:39.480]  Ну, L ушла.
[01:43:39.480 --> 01:43:40.480]  Куда оно ушло?
[01:43:40.480 --> 01:43:41.480]  L было светло, L было снизу.
[01:43:41.480 --> 01:43:42.480]  Или у вас шеф этот цикл?
[01:43:43.480 --> 01:43:46.480]  Ну и что? Они же не сократились, они же вычислись.
[01:43:47.480 --> 01:43:48.480]  Нет, у L паттернолога находится единица.
[01:43:49.480 --> 01:43:51.480]  А так как у нас мы каждый раз на WN делим M-g.
[01:43:52.480 --> 01:43:53.480]  У вас L это цикл.
[01:43:54.480 --> 01:43:55.480]  И что?
[01:43:55.480 --> 01:43:56.480]  Получается 1 или слога.
[01:43:57.480 --> 01:43:58.480]  Что такое это?
[01:43:59.480 --> 01:44:03.480]  А, то есть имеете в виду, что шаг будет M-g.
[01:44:04.480 --> 01:44:05.480]  А первый член будет...
[01:44:06.480 --> 01:44:07.480]  Так, сейчас L равно...
[01:44:08.480 --> 01:44:09.480]  Ну да, просто единица.
[01:44:10.480 --> 01:44:11.480]  Еще удобнее.
[01:44:12.480 --> 01:44:13.480]  Хорошо.
[01:44:14.480 --> 01:44:15.480]  Ладно.
[01:44:16.480 --> 01:44:17.480]  Так, отлично.
[01:44:18.480 --> 01:44:19.480]  Это мы что-то посчитали.
[01:44:20.480 --> 01:44:22.480]  Тогда получается по этой логике мы честно пишем,
[01:44:22.480 --> 01:44:24.480]  что M равно 0, N-1.
[01:44:25.480 --> 01:44:26.480]  Соответственно тут АМТ.
[01:44:27.480 --> 01:44:28.480]  Вот эта сумма равна теперь...
[01:44:29.480 --> 01:44:30.480]  Получается так.
[01:44:31.480 --> 01:44:32.480]  Вот эта штука в степени N.
[01:44:33.480 --> 01:44:36.480]  То есть WN в степени N умножить на M-g.
[01:44:37.480 --> 01:44:38.480]  Минус 1.
[01:44:39.480 --> 01:44:41.480]  Поделить на WN в степени M-g.
[01:44:42.480 --> 01:44:43.480]  Минус 1.
[01:44:44.480 --> 01:44:46.480]  Но WN в степени N равно единице.
[01:44:47.480 --> 01:44:48.480]  Единица в любой степени равна единице.
[01:44:49.480 --> 01:44:50.480]  1-1 равно 0.
[01:44:50.480 --> 01:44:51.480]  1-1 равно 0.
[01:44:52.480 --> 01:44:53.480]  Вывод.
[01:44:54.480 --> 01:44:55.480]  Сожитое равно 0.
[01:45:01.480 --> 01:45:02.480]  Почему это подозрительно?
[01:45:03.480 --> 01:45:05.480]  Потому что вообще говоря мы проделывали такую операцию,
[01:45:06.480 --> 01:45:07.480]  которую, как мы знаем, можно проделать и обратно.
[01:45:08.480 --> 01:45:10.480]  Ну, знаю в смысле в принципе, правда?
[01:45:11.480 --> 01:45:12.480]  То есть по каждому.
[01:45:13.480 --> 01:45:14.480]  А так получается, что если в два раза сделали операцию,
[01:45:15.480 --> 01:45:16.480]  у вас всегда получится 0.
[01:45:17.480 --> 01:45:18.480]  Да, круто.
[01:45:18.480 --> 01:45:20.480]  Мы доказали, что любой многочлен на самом деле нулевой.
[01:45:21.480 --> 01:45:22.480]  Многочленов не существует.
[01:45:23.480 --> 01:45:24.480]  Ура!
[01:45:25.480 --> 01:45:26.480]  Все.
[01:45:27.480 --> 01:45:28.480]  Ну вот.
[01:45:29.480 --> 01:45:30.480]  Спрашивается.
[01:45:31.480 --> 01:45:32.480]  Что ж не так?
[01:45:33.480 --> 01:45:34.480]  Что ж не даст нам возможности сказать, что это все у КТЧ,
[01:45:35.480 --> 01:45:36.480]  надо в топку кидать.
[01:45:43.480 --> 01:45:44.480]  Ну, косяк.
[01:45:45.480 --> 01:45:46.480]  А что такое?
[01:45:46.480 --> 01:45:50.480]  Ну, к сожалению, есть такая маленькая подлянка,
[01:45:51.480 --> 01:45:53.480]  что она работает только при Q не равно 1.
[01:45:54.480 --> 01:45:56.480]  То есть если Q не равно 1, тогда да.
[01:45:57.480 --> 01:45:58.480]  Во-первых, это формула корректно.
[01:45:59.480 --> 01:46:01.480]  Во-вторых, да, вы можете домножить на Q минус 1.
[01:46:02.480 --> 01:46:03.480]  И там тогда все пошлеп-шлепается.
[01:46:04.480 --> 01:46:05.480]  Да.
[01:46:06.480 --> 01:46:07.480]  Вот.
[01:46:08.480 --> 01:46:10.480]  Поэтому нам надо оговориться, что конечно у нас все вылетит,
[01:46:11.480 --> 01:46:13.480]  кроме того случая, когда Q все-таки равно 1.
[01:46:14.480 --> 01:46:15.480]  Но когда у нас эта штука равно 1?
[01:46:16.480 --> 01:46:21.480]  Ну, естественно, в том случае, когда у нас ж равно, очевидно, m, правда?
[01:46:22.480 --> 01:46:24.480]  То есть и жили были у нас два числа от 0 до n минус 1,
[01:46:25.480 --> 01:46:28.480]  и вычислось одно из другого, и получилось что-то, делящееся на m.
[01:46:29.480 --> 01:46:31.480]  Ну, соответственно, очевидно, это могло быть только когда они равно.
[01:46:32.480 --> 01:46:33.480]  То есть получается это...
[01:46:34.480 --> 01:46:35.480]  Ну вот.
[01:46:36.480 --> 01:46:37.480]  То есть на самом деле по-хорошему надо написать теперь так.
[01:46:38.480 --> 01:46:39.480]  То есть это равно.
[01:46:40.480 --> 01:46:42.480]  То есть вот это вот мы суммируем по всем m, но при этом m не равно ж.
[01:46:43.480 --> 01:46:44.480]  Значит мы это суммируем.
[01:46:44.480 --> 01:46:45.480]  То есть это действительно 0.
[01:46:47.480 --> 01:46:51.480]  Плюс переговорочка, а что получается, когда m равно ж?
[01:46:52.480 --> 01:46:55.480]  Ну тогда тут просто все единички, тут получается тогда n умножить на аж.
[01:46:56.480 --> 01:47:01.480]  То есть в переводе говоря, это просто равно n умножить на аж.
[01:47:04.480 --> 01:47:05.480]  Вот такой маленький лайфхак.
[01:47:08.480 --> 01:47:09.480]  Да.
[01:47:10.480 --> 01:47:11.480]  То есть смотрите, то есть вы...
[01:47:12.480 --> 01:47:13.480]  То есть обратите внимание, то есть вы просто
[01:47:14.480 --> 01:47:16.480]  чтобы сделать обратное преобразование...
[01:47:17.480 --> 01:47:19.480]  То есть чем обратное отличается от прямого?
[01:47:20.480 --> 01:47:23.480]  Вы запускаете его просто от абсолютно того же...
[01:47:24.480 --> 01:47:26.480]  То есть абсолютно такое же преобразование, как и было,
[01:47:27.480 --> 01:47:29.480]  только в качестве Wn подсовываете 1 делить на Wn.
[01:47:31.480 --> 01:47:32.480]  Вот.
[01:47:33.480 --> 01:47:36.480]  Или в случае комплексных можно подсунуть сопряженное, но это будет одно и то же.
[01:47:37.480 --> 01:47:38.480]  Все.
[01:47:39.480 --> 01:47:40.480]  Нет, не все.
[01:47:41.480 --> 01:47:42.480]  Потому что делаете, а потом результат надо еще на n поделить.
[01:47:42.480 --> 01:47:43.480]  Видите, да?
[01:47:46.480 --> 01:47:47.480]  Вот.
[01:47:48.480 --> 01:47:49.480]  То есть ни в коем случае не забудьте поделить на n.
[01:47:50.480 --> 01:47:51.480]  Собственно все.
[01:47:52.480 --> 01:47:57.480]  То есть вот таким вот образом мы поняли, что прямое обратное преобразование в Fourier
[01:47:58.480 --> 01:48:00.480]  работают за, вот, например, n лог n.
[01:48:01.480 --> 01:48:04.480]  Ну вот там, как всегда, да, в каких-нибудь правильных предположениях...
[01:48:05.480 --> 01:48:08.480]  Там, типа, по крайней мере, в предположении, что там либо у нас простой...
[01:48:08.480 --> 01:48:10.480]  Мы нашли простой модуль, который там...
[01:48:11.480 --> 01:48:13.480]  У которого там степень двойки больше, чем n.
[01:48:14.480 --> 01:48:15.480]  Да?
[01:48:16.480 --> 01:48:17.480]  Ну вот.
[01:48:18.480 --> 01:48:21.480]  Либо мы верим, что точности, с которой мы вычисляем эти все синусы-косинусы, нам хватит.
[01:48:22.480 --> 01:48:29.480]  Можно сказать верно, ведь, что нужно гарантировать такой модуль, который мы нашли.
[01:48:31.480 --> 01:48:33.480]  Ну гарантировать нужно, чтобы...
[01:48:34.480 --> 01:48:36.480]  Ну нам нужно гарантировать, что он имеет вот такой вид.
[01:48:36.480 --> 01:48:37.480]  Сейчас, секунду.
[01:48:38.480 --> 01:48:39.480]  Откуда вопрос?
[01:48:40.480 --> 01:48:42.480]  Давнограмма модели, в которой мы в этом работаем,
[01:48:43.480 --> 01:48:46.480]  предполагает, что размер входных данных вмещается в ячейку.
[01:48:47.480 --> 01:48:48.480]  Ну...
[01:48:49.480 --> 01:48:56.480]  То есть, если раз, типа, длина будет n, то n может на некоторую константу влезать в ячейку памяти.
[01:48:57.480 --> 01:48:59.480]  Ну я бы сказал, n в степени некоторой константы влезает в ячейку.
[01:49:00.480 --> 01:49:01.480]  Да, конечно.
[01:49:02.480 --> 01:49:03.480]  Ну да.
[01:49:03.480 --> 01:49:08.480]  Вот, вопрос, хватит ли нам такой гарантии, что...
[01:49:09.480 --> 01:49:13.480]  will such YooQ- interessiness, что нам подходящие в этом смысле слова?
[01:49:14.480 --> 01:49:17.480]  А не будет ли у нас какого-нибудь переполнения по этому простому модулю?
[01:49:18.480 --> 01:49:22.480]  Ну, если мы уже делаем переполнение п-
[01:49:23.480 --> 01:49:25.480]  произведение по этому простому модулю, то переполнения не будет,
[01:49:26.480 --> 01:49:28.480]  просто потому что мы при каждом умножении будем брать остаток.
[01:49:29.480 --> 01:49:32.480]  Но нет, переполнение в смысле в том, что мы, на самом деле, получим неправильный ответ
[01:49:33.480 --> 01:49:35.480]  А правильно ответ на вот этот поле?
[01:49:35.480 --> 01:49:37.480]  Ну да, ну я...
[01:49:37.480 --> 01:49:39.480]  Что кондиционты тоже будут по модуле.
[01:49:39.480 --> 01:49:44.480]  Ну тут оговоречка, что мы в принципе и занимаемся тем, что перемножаем многочлены вообще-то в этих полях.
[01:49:44.480 --> 01:49:46.480]  А хотелось бы, чтобы...
[01:49:46.480 --> 01:49:47.480]  Вот.
[01:49:47.480 --> 01:49:53.480]  Ну вот. Нет, то есть да, потому что чаще у нас, конечно, проблема, что мы хотим перемножать целочисленные многочлены,
[01:49:53.480 --> 01:50:00.480]  и желательно, чтобы у нас не получилось, чтобы мы умножили 5 на 5, а получили 4.9999820149.
[01:50:00.480 --> 01:50:02.480]  Вот, да, вот. Конечно, хотелось бы.
[01:50:02.480 --> 01:50:04.480]  Но правда, ну вот.
[01:50:04.480 --> 01:50:07.480]  Но тут, на самом деле, да. Тут, конечно, тут уже более практические оговорки.
[01:50:07.480 --> 01:50:11.480]  Нет, ну во-первых, конечно, тема того, насколько большие коэффициенты должны быть,
[01:50:11.480 --> 01:50:14.480]  ну вы просто знаете, что если вы перемножаете два многочлена размера n,
[01:50:14.480 --> 01:50:19.480]  и каждая коэффициент не превосходит, допустим, c какой-нибудь большой константой, да?
[01:50:19.480 --> 01:50:27.480]  То тогда мы замечаем, что в произведении каждый коэффициент не будет происходить просто c² умножить на n, на самом деле.
[01:50:27.480 --> 01:50:29.480]  Вот.
[01:50:29.480 --> 01:50:31.480]  Но тогда получается n, ну вот.
[01:50:31.480 --> 01:50:36.480]  Но на самом деле можно сказать, что и само n не превосходит какой-то константы c, правда?
[01:50:36.480 --> 01:50:38.480]  Можно сказать той же самой, обычно так и говорят.
[01:50:38.480 --> 01:50:44.480]  Поэтому получается, что у вас в процессе могут просто получиться эти числа в кубе. Все.
[01:50:44.480 --> 01:50:46.480]  Они получатся в ответе.
[01:50:46.480 --> 01:50:47.480]  Да.
[01:50:47.480 --> 01:50:49.480]  Но у вас, например, получится n на жутко.
[01:50:49.480 --> 01:50:51.480]  Кего получится?
[01:50:51.480 --> 01:50:53.480]  У нас получится n на эти числа.
[01:50:53.480 --> 01:50:55.480]  То есть c в четвертую уже.
[01:50:55.480 --> 01:50:57.480]  Ну, условно, да.
[01:50:57.480 --> 01:50:59.480]  Вот.
[01:50:59.480 --> 01:51:01.480]  Но тем не менее, ну вот.
[01:51:01.480 --> 01:51:03.480]  Ну, вроде когда-то.
[01:51:03.480 --> 01:51:05.480]  Можешь, кеша, да, аккуратно вычислять.
[01:51:05.480 --> 01:51:07.480]  Ну вот.
[01:51:07.480 --> 01:51:09.480]  Но обычно об таких мелких уже не заморачиваются.
[01:51:09.480 --> 01:51:11.480]  Вот.
[01:51:11.480 --> 01:51:13.480]  Тем более, что знаете, тут какой чит.
[01:51:13.480 --> 01:51:19.480]  Нет, просто чит заключается в том, что если мы говорим о перемножении многочленов, то нам...
[01:51:19.480 --> 01:51:21.480]  Ну, хотя нет, конечно, да.
[01:51:21.480 --> 01:51:26.480]  Все-таки нам не стоит утверждать, что мы перемножаем абсолютно произвольные многочлены.
[01:51:26.480 --> 01:51:28.480]  То есть на это нам плевать какие тут числа.
[01:51:30.480 --> 01:51:36.480]  Потому что, да, если у нас бесконечно большие числа, то любые многочлены можно перемножать за 1.
[01:51:38.480 --> 01:51:40.480]  Понимаете как, да?
[01:51:40.480 --> 01:51:47.480]  Нет, ну в смысле, просто давайте подставляем в эти многочлены очень-очень-очень-очень большое число t.
[01:51:47.480 --> 01:51:49.480]  Ну, я не знаю там буквально.
[01:51:49.480 --> 01:51:51.480]  Буквально это самое c в степени, я не знаю, n.
[01:51:51.480 --> 01:51:53.480]  Может даже с запасом.
[01:51:53.480 --> 01:51:55.480]  Объявляем его основанием системы счисления.
[01:51:55.480 --> 01:51:57.480]  Объявляем эти числа.
[01:51:57.480 --> 01:51:59.480]  Создаем их там в этой клок-клок.
[01:52:19.480 --> 01:52:21.480]  Нет, ну тут еще хуже.
[01:52:21.480 --> 01:52:24.480]  Потому что, нет, конечно, на 10 четвертой, но, смотри, давай так.
[01:52:24.480 --> 01:52:26.480]  10 жили, были 10 четвертой, да?
[01:52:26.480 --> 01:52:30.480]  Размер, типичный размер многочлены у нас 10 пятый, 10 шестой, да?
[01:52:30.480 --> 01:52:32.480]  Сколько мы сказали c, n квадрат?
[01:52:32.480 --> 01:52:36.480]  Ну, тогда еще сколько это? 6 на 2, 2х4, 10 четвертой.
[01:52:36.480 --> 01:52:40.480]  Золомгин? Золомгин пока не убили.
[01:52:40.480 --> 01:52:45.480]  Нет, n 10 шестой, а c квадрат 10 восьмой.
[01:52:45.480 --> 01:52:47.480]  Что?
[01:52:47.480 --> 01:52:51.480]  10 пятой, а ты с квадратным квадратом.
[01:52:51.480 --> 01:52:53.480]  Так, да, проблема.
[01:52:53.480 --> 01:52:55.480]  А может и нет?
[01:52:59.480 --> 01:53:03.480]  В такие случаи открываешь пасхарм, там где-то прикрыты.
[01:53:03.480 --> 01:53:07.480]  И кто-нибудь открывает, но нам проходит в заводчике писать.
[01:53:07.480 --> 01:53:11.480]  Да, ну да, получается, 10-20-1.
[01:53:11.480 --> 01:53:13.480]  Придется что-то уменьшить.
[01:53:13.480 --> 01:53:15.480]  Ну, обычно, по крайней мере, на 10 пятый хватит.
[01:53:15.480 --> 01:53:17.480]  Впрочем, тут другая проблема,
[01:53:17.480 --> 01:53:21.480]  потому что на самом деле тут вообще уже просят считать аккуратно,
[01:53:21.480 --> 01:53:25.480]  потому что, например, в комплексных числах, если применять комплексные числа,
[01:53:25.480 --> 01:53:29.480]  то там еще и всякие эти дроби будут.
[01:53:29.480 --> 01:53:35.480]  Поэтому чем больше n, тем больше может накопиться какая-то мерзкая погрешность.
[01:53:35.480 --> 01:53:39.480]  Поэтому такая практическая рекомендация такая,
[01:53:39.480 --> 01:53:43.480]  опытный факт, что крайне желательно,
[01:53:43.480 --> 01:53:49.480]  чтобы результирующие коэффициенты у вас были где-нибудь до 10 в 12,
[01:53:49.480 --> 01:53:51.480]  тогда вы можете сказать, что давайте получим,
[01:53:51.480 --> 01:53:55.480]  в ответе мы получим какие-то числа, давайте просто их округлим до ближайшего целого.
[01:53:55.480 --> 01:53:59.480]  Плюс одна вторая, и раунд работает хорошо.
[01:53:59.480 --> 01:54:03.480]  Ну да, или раунд.
[01:54:03.480 --> 01:54:07.480]  Если плюс одна вторая, тогда можно floor сразу писать.
[01:54:07.480 --> 01:54:11.480]  Как округлить число по математическим правилам?
[01:54:11.480 --> 01:54:17.480]  Ну просто да, то есть это прибавить к нему одну вторую и округлить его вниз.
[01:54:17.480 --> 01:54:20.480]  То есть не что-то такое, а просто вот оно.
[01:54:20.480 --> 01:54:23.480]  Будьте внимательны, потому что какой-то раунд, еще вопрос, куда будет округлять,
[01:54:23.480 --> 01:54:25.480]  там отрицательные числа.
[01:54:25.480 --> 01:54:28.480]  То есть тут как всегда, либо прямо прокопать этот вопрос, либо просто жестко.
[01:54:28.480 --> 01:54:31.480]  Знаешь, раунд это какая-то гадость, а вот floor округляет жестко вниз,
[01:54:31.480 --> 01:54:34.480]  cell округляет жестко вверх.
[01:54:34.480 --> 01:54:38.480]  Вот cell вот так вот пишется.
[01:54:38.480 --> 01:54:42.480]  Поэтому если вы хотите округлить число до ближайшего целого,
[01:54:42.480 --> 01:54:45.480]  то на самом деле вот просто формальная математическая комбинация.
[01:54:45.480 --> 01:54:48.480]  То есть округлите вниз число x плюс 0,5.
[01:54:51.480 --> 01:54:54.480]  Ну как у нас округляет число по математическим правилам?
[01:54:54.480 --> 01:54:57.480]  Как вы пришли к округлению числа?
[01:54:57.480 --> 01:55:03.480]  Дело в том, что дефолтная реализация FFT пишется через комплексные числа.
[01:55:03.480 --> 01:55:06.480]  А комплексные числа это там какие-то даблы или лонгдаблы.
[01:55:06.480 --> 01:55:11.480]  То есть там даблы, лонгдаблы, синусы, кассинусы, перемножение какие-то, вот это все.
[01:55:11.480 --> 01:55:17.480]  Поэтому в итоге в конце, если мы перемножали целые многочлены,
[01:55:17.480 --> 01:55:20.480]  то мы, наверное, должны получить целый многочлен.
[01:55:20.480 --> 01:55:22.480]  А получим какую-то дабловую гадость.
[01:55:22.480 --> 01:55:25.480]  Скорее всего, там близкую к нам, но не совсем ту.
[01:55:25.480 --> 01:55:32.480]  То есть вместо пятерки мы получим 4.999999998980149.
[01:55:32.480 --> 01:55:42.000]  Вот чего? Не, ну наверное не настолько все-таки. Вот если это будет там это 4 миллиона, то там
[01:55:42.000 --> 01:55:47.660]  возможно уже и начнутся такие проблемы. Вот поэтому говорят, что до 10 в 12, да тут вот действительно
[01:55:47.660 --> 01:55:52.680]  аккуратненько, то есть это еще работает, а вот дальше лучше уже поаккуратничать, если у вас там
[01:55:52.680 --> 01:55:57.980]  коэффициенты больше. Как поаккуратничать? Ну как бы если у вас коэффициенты до миллиона, допустим,
[01:55:57.980 --> 01:56:04.400]  да, то каждый коэффициент можно, например, сказать, что он равен мелкий коэффициент плюс 1000 на еще
[01:56:04.400 --> 01:56:12.140]  один мелкий коэффициент. Ну условно там сказать, что скажем, каждая ожитое у меня, допустим,
[01:56:12.140 --> 01:56:26.540]  равно ожитое штрих плюс там 1000 на ожитое в квадрате. То есть такое, то есть тогда получается,
[01:56:26.540 --> 01:56:32.440]  там у вас в принципе получится, что на самом деле АТ, например, будет работать а штриха Т
[01:56:32.440 --> 01:56:40.080]  плюс 1000 на а2 штриха Т. Но правда умножение получится чуть больше, но зато они будут более
[01:56:40.080 --> 01:56:48.700]  железобетонными. Ну вот, ну или там по каратсубе как-нибудь еще можно. То есть такие вот,
[01:56:48.700 --> 01:57:01.360]  такие вот тут еще иногда лайфхаки возникают. Вот. Да, обязательно. Нет, ну и пока это вот. Вот.
[01:57:01.360 --> 01:57:05.440]  Ну тут да, наверное, вот. То есть описать это действительно так отдельно. Пишешь сколько там у нас
[01:57:05.440 --> 01:57:14.240]  времени? А, нормально у нас времени. Отлично. Вот. Значит поехали теперь. Ладно. Ну по математической
[01:57:14.240 --> 01:57:19.340]  части понятно. Значит давайте теперь попробуем это написать. Значит давайте сейчас будем очень
[01:57:19.340 --> 01:57:26.140]  внимательно это писать. Ну начнем с самой тупой версии. Но правда я сразу давайте я для, там скажу,
[01:57:26.140 --> 01:57:31.420]  что у меня сразу у меня есть тип Т. Это вот, то есть это у меня есть вот мистический тип Т, который
[01:57:31.420 --> 01:57:36.260]  вот и поддерживает все вот эти там операции. То есть я не буду прописывать вот там комплексный,
[01:57:36.260 --> 01:57:46.880]  он там простой и так далее. Что? Ну да. То есть можно сказать, что да. То есть можно было бы
[01:57:46.880 --> 01:58:03.560]  сказать, что давайте это попишем на шаблонах. Ну как сказать, на языке Си на самом деле шаблон в
[01:58:03.560 --> 01:58:09.320]  некотором смысле прекрасно делается. Ну на уровне там пишете все с типом Т, а в начале пишете
[01:58:09.320 --> 01:58:28.240]  defineT. Ну да. Зачем defineT? Давай defineT комплекс longDouble. Вот как удостоен. Так вот. Значит смотрите.
[01:58:28.280 --> 01:58:37.440]  Значит как же мы это будем пытаться реализовать? Вот. Значит делать мы это будем примерно следующим
[01:58:37.440 --> 01:58:44.920]  образом. Ну значит смотрите. Ну самое тупое, что можно было бы сделать, вот давайте совсем,
[01:58:44.920 --> 01:58:56.160]  совсем тупое. Это конечно пишем. Вектор Т, fft. Да. Пишем только прямое, потому что с обратным мы уже,
[01:58:56.160 --> 01:59:02.640]  обратное мы делаем, используя вот это fft как черный ящик. Мы уже запомнили это, да. Значит передать.
[01:59:02.640 --> 01:59:24.920]  Можно маленькое отступление перед этим? Давай. Какая-то магическая шарашка, которая говорит, что если применить прямое в той два раза, а потом развернуть всех эфициток кроме первого, и что там еще сделать, типа опять залить на N. Да. Только развернуть не весь массив, а массив без дулевого элемента. Да, тоже будет работать, да.
[01:59:24.920 --> 01:59:54.520]  Нет, я могу просто повторить вот эту вот запись и увидеть. Да, просто проверить. Да, так тоже работает, да. Ну по-разному, в общем, да. Нет, отдельно, да. То есть отдельная песенка. Ну да. Ну, роспись та же. Ну нет, просто суть там будет том, что там будет, тут у тебя минус степень GL, а там будет плюс GL. То есть поэтому там просто шаг
[01:59:54.520 --> 02:00:05.080]  будет не WN в степени M минус G, а будет шаг WN в степени M плюс G. Поэтому у тебя получится, что CGT равно там что-то типа A там N минус G, на самом деле.
[02:00:05.080 --> 02:00:22.840]  Ну почему-то, ребят. Вот. Поэтому и разворот. То есть нулевой совпадет. Вот. Ну я говорю, просто лучше вот в качестве упражнения просто распишите и вот, да. То есть типа вот, да. Так вот, дайте, я так и напишу. Упражнение.
[02:00:23.800 --> 02:00:34.280]  Сделайте то же самое только тут WN. Вот. То есть, да. Это магическая шарашка есть, да. Ну это же не шарашка, а просто даже прикольная вещь, да.
[02:00:34.280 --> 02:00:48.200]  Чтобы вы там еще не делили, там еще не спрятали. Вот. Что? Нет, делить, наверное, придется. Но одно дело делить. Да. Вот. Да, брать обратное не придется.
[02:00:48.200 --> 02:00:58.920]  Значит, поехали. Значит, так. Перейдем в вектор INTA, тут мы даже не заморачиваемся даже там об ссылку, потому что не надо нам этой ссылки, на самом деле. Вот.
[02:00:58.920 --> 02:01:14.600]  И, но самое важное, по крайней мере, с моего FFT я очень люблю передавать вот это мистическое WN. Что? А потому что все равно мы там все ими кидаться там будем туда обратно и так далее.
[02:01:15.240 --> 02:01:25.480]  Ну, потому что тут два варианта. Понимаете, если я могу кинуть ссылку, а могу даже константную, ну, желательно тогда сразу константную, в таких случаях тогда если мы собираемся вектор возвращать,
[02:01:25.480 --> 02:01:35.240]  тогда у нас два варианта. Либо мы переберем позначение, либо константная ссылка. Потому что когда вы, короче, не по константной ссылке, значит вы сигнализируете в том числе себе, что вы этот вектор собрались менять.
[02:01:35.240 --> 02:01:43.960]  И тогда вам, как бы, в документации функции, по крайней мере, мысленной, требуется себе жестко прописать, как конкретно вы это собираетесь менять.
[02:01:44.920 --> 02:01:47.800]  Константная ссылка. Это что?
[02:01:47.800 --> 02:01:53.160]  Это запись вида конст вектор T.
[02:01:53.160 --> 02:01:59.480]  Значит, что программа функции не имеет права менять.
[02:01:59.480 --> 02:02:07.720]  То есть, как вы знаете, это две разные вещи. Вот этот конст означает, что функция не имеет права этот параметр менять.
[02:02:07.720 --> 02:02:10.200]  Ну а персант меняет, что?
[02:02:10.200 --> 02:02:20.280]  Как это да. Лайфхак. Хотите увидеть лекцию первыми? Приходите на нее.
[02:02:20.280 --> 02:02:28.440]  Работает иногда. Более того, у вас есть эта фантастическая возможность интерактивного общения.
[02:02:28.440 --> 02:02:38.200]  Да, да, да. Диалектист старших поколений это называется задавать вопросы очно.
[02:02:39.160 --> 02:02:47.320]  Нет, более того, кстати, есть так тоже. На самом деле, один бывший завкафедр, ныне покойный Михаил Абрамович Ройнберг,
[02:02:47.320 --> 02:02:53.400]  он вообще рассказывал, что некоторые предметы, на самом деле, иногда в Америке практикуется такой интересный момент.
[02:02:53.400 --> 02:03:00.120]  Такой вариант, когда на самом деле таких вот классических лекций, когда приходит преподаватель, что-то такое рассказывает, их нет.
[02:03:00.120 --> 02:03:07.080]  Ну, логика следующая, что все, что обычно рассказывается на таких лекциях, наверное, где-то написано. Правда?
[02:03:07.480 --> 02:03:14.680]  Более того, по большинству предметов есть учебники даже. То есть, например, тот же мотоналис, например.
[02:03:14.680 --> 02:03:21.320]  То есть, вам уже на первой же неделе выдали просто учебник по мотонализу, где там большинство этих ТРМ так и написано.
[02:03:21.320 --> 02:03:29.800]  Поэтому там предлагается логика такая, что вам предлагается, что называется, зачем тогда слушать лекции,
[02:03:29.800 --> 02:03:34.600]  если вы просто тогда читаете эту штуку, а на занятия приходится для того, чтобы задать вопросы лектору.
[02:03:35.560 --> 02:03:40.040]  Вот. И тогда лектор будет на них отвечать. Вот, особенно есть такой интересный метод.
[02:03:42.040 --> 02:03:44.600]  Вот. У нас он пока, правда, не практикуется.
[02:03:45.560 --> 02:03:47.560]  Вот. Ну, Саша.
[02:04:00.200 --> 02:04:06.520]  Ну нет, у нас был такой лектор, но, по-моему, долго он у нас не принадлежал.
[02:04:06.520 --> 02:04:08.520]  От него остались запистики.
[02:04:11.160 --> 02:04:15.960]  Нет, знаете, такой баланс, что все-таки как-то что-то не то. На пятом курсе к нам пришел такой лектор, на самом деле.
[02:04:15.960 --> 02:04:21.560]  Он сказал, знаете, я мог бы вам почитать лекции по моему предмету, но у меня в логу. Почему? Потому что на сайте интуитру они уже висят.
[02:04:21.560 --> 02:04:27.080]  Вот. Поэтому знаете, что, давайте-ка вы лучше послушайте эти лекции, сдадите там курсы, и я вам тогда хор поставлю.
[02:04:27.080 --> 02:04:29.080]  Хор. Да, хор.
[02:04:29.080 --> 02:04:34.920]  Ну вот. А потом отл, ну, давайте это надо, давайте еще там, вы там еще какую-то презентацию сделаете.
[02:04:35.160 --> 02:04:41.000]  Только давайте, презентацию сделайте в конце, но давайте вы мне в течение две недели, в двух недель еще договоритесь, что и так далее.
[02:04:41.000 --> 02:04:45.240]  Вот. Ну, а чем, в общем, сами понимаете, долго не придержался, короче, он у нас.
[02:04:45.240 --> 02:04:56.680]  Ну, то есть нет. На пятом курсе, главное, тут баланс определенный. Получится, что с одной стороны, как бы, что-то не то, с другой стороны, конечно, спасибо ему огромное, что как бы, называется на, называется там, у нас было на две пары меньше в неделю.
[02:04:56.680 --> 02:05:04.040]  То есть, знаете, на пятом курсе, когда все работают, обычно это уже как бы лишняя пара, это скорее уже, скорее такая-то техническая сложность.
[02:05:04.920 --> 02:05:13.880]  Вот. Ну, это пока, да, то есть нет. Вот. Ну, у нас такого нет, ладно, давайте вернемся к делу, так, интересный момент.
[02:05:13.880 --> 02:05:19.880]  Значит, смотрите, так, вот у нас вектор, там, по константной ссылке, не по константной, вот. Значит, у нас есть Wn.
[02:05:19.880 --> 02:05:23.880]  Ну, конечно, с чего нужно начать любой рекурсивный алгоритм?
[02:05:23.880 --> 02:05:29.880]  Ну, конечно же, да, еще, конечно, мы предполагаем, что размер этого многочлена степень двойки.
[02:05:29.880 --> 02:05:41.720]  И Wn здесь соответствует. Ну, можно прям так и прописать. Я даже себе пропишу int n равно a.size.
[02:05:43.720 --> 02:05:47.720]  Да, поэтому надо начать, конечно, где, то есть, конечно, для самого маленького.
[02:05:47.720 --> 02:05:57.720]  Если оказалось, что n равно 1, то, так, а как же нам делать эту, действительно, во что превратиться многочлен, если у него размер 1?
[02:06:00.720 --> 02:06:06.720]  Да, то есть, заметим, что если многочлен у нас размера 1, то что это за многочлен? Это константа.
[02:06:08.720 --> 02:06:14.720]  Нам нужно заменить его коэффициенты на значение в одной точке, если быть точнее, в единице.
[02:06:15.720 --> 02:06:18.720]  Но это значение совпадает с этим коэффициентом, свободным членом.
[02:06:18.720 --> 02:06:23.720]  Поэтому мы тут просто не заморачиваемся и пишем return a.
[02:06:24.720 --> 02:06:26.720]  Ну, тут нечему заморачиваться.
[02:06:27.560 --> 02:06:43.560]  В противном случае, в хороших код-стайлах обычно одну строчку стараются не писать, по-моему.
[02:06:44.400 --> 02:06:46.400]  Ладно, значит, поехали.
[02:06:46.400 --> 02:06:49.400]  Значит, теперь, вектор t.
[02:06:49.400 --> 02:06:53.400]  Ну, теперь давайте, значит, создаем a0 и a1.
[02:06:56.400 --> 02:06:57.400]  Вот.
[02:06:57.400 --> 02:07:06.400]  Значит, дальше пишем for int, значит, i равно 0, i меньше n, i плюс равно 2.
[02:07:07.240 --> 02:07:09.240]  Тут мы и говорим.
[02:07:09.240 --> 02:07:13.240]  Значит, в a0 мы запихиваем it-коэффициент.
[02:07:23.240 --> 02:07:27.240]  Ну, погодите. Сначала мы пишем это просто в самом тупом виде.
[02:07:27.240 --> 02:07:31.240]  Как-то правильно.
[02:07:31.240 --> 02:07:35.240]  Да, обязательно. Да, конечно.
[02:07:36.080 --> 02:07:38.080]  Что мы делаем теперь?
[02:07:38.080 --> 02:07:46.080]  a0 равно fft, значит, a0 и Wn умножить на Wn.
[02:07:48.080 --> 02:07:56.080]  Значит, a1 равно Wn умножить на Wn.
[02:07:59.080 --> 02:08:01.080]  Если бы.
[02:08:01.080 --> 02:08:04.080]  Нет, нам еще теперь вот эти восстановить надо.
[02:08:06.080 --> 02:08:08.080]  Надо.
[02:08:08.080 --> 02:08:10.080]  Значит, теперь смотрите.
[02:08:10.080 --> 02:08:12.080]  То есть нам нужно пробежаться по степеням.
[02:08:12.080 --> 02:08:16.080]  Но смотрите, как это хитро теперь можно сделать.
[02:08:16.080 --> 02:08:18.080]  То есть чтобы подставить это квадрат.
[02:08:18.080 --> 02:08:20.080]  Значит, на самом деле теперь это можно сделать так.
[02:08:20.080 --> 02:08:28.080]  for, значит, int, допустим, j равно 0, j меньше n пополам, обратите внимание.
[02:08:28.080 --> 02:08:30.080]  Но я тут, ладно, вы поняли.
[02:08:30.080 --> 02:08:32.080]  А, можно и так писать, плюс-плюс.
[02:08:32.080 --> 02:08:34.080]  Да, плюс-плюс j.
[02:08:34.920 --> 02:08:36.920]  Значит, теперь у нас просто будет идея такая.
[02:08:36.920 --> 02:08:38.920]  Чему равно ajt?
[02:08:38.920 --> 02:08:50.920]  ajt должно быть равно a0 plus Wn в степени j на a1 от jt.
[02:08:56.920 --> 02:08:58.920]  В чем проблема? Wn в степени j.
[02:08:59.760 --> 02:09:01.760]  А0 jt.
[02:09:01.760 --> 02:09:07.760]  Не a2 jt, не a1.
[02:09:07.760 --> 02:09:09.760]  Сейчас.
[02:09:09.760 --> 02:09:11.760]  Должен, должен.
[02:09:11.760 --> 02:09:13.760]  Вот где это должен быть квадрат?
[02:09:13.760 --> 02:09:15.760]  Например, в 2 jt.
[02:09:15.760 --> 02:09:17.760]  Типа a2 jt.
[02:09:17.760 --> 02:09:19.760]  Вот так посчитайте.
[02:09:19.760 --> 02:09:21.760]  Ну да, но понимаете, в чем проблема?
[02:09:21.760 --> 02:09:23.760]  Дело в том, что Wn в степени 2 jt, казалось бы, должен быть квадрат.
[02:09:23.760 --> 02:09:25.760]  Но помните, мы же считали 2 jt.
[02:09:26.600 --> 02:09:28.600]  И Wn в степени 2 jt будет как раз в jt элементе этого a0 и a1.
[02:09:42.600 --> 02:09:44.600]  Нет, я хочу другое.
[02:09:44.600 --> 02:09:46.600]  Я хочу написать j plus n, пополам.
[02:09:50.600 --> 02:09:52.600]  Ну, и сейчас вы поймете почему.
[02:09:52.600 --> 02:09:54.600]  Ну, опять, тут степень j, ну понятно, тут пишем степень j.
[02:09:56.600 --> 02:09:58.600]  В степени j plus n, пополам.
[02:09:58.600 --> 02:10:00.600]  На a1 jt.
[02:10:00.600 --> 02:10:02.600]  Обратите внимание, да, потому что, да.
[02:10:02.600 --> 02:10:06.600]  То есть мы уже обнаружили, что там просто по второму кругу идет те же самые числа.
[02:10:06.600 --> 02:10:10.600]  И вот теперь можно объявить return.
[02:10:10.600 --> 02:10:12.600]  Значит, a.
[02:10:13.440 --> 02:10:15.440]  Честно говоря,
[02:10:15.440 --> 02:10:17.440]  мне очень понятно.
[02:10:17.440 --> 02:10:19.440]  А jt?
[02:10:19.440 --> 02:10:21.440]  Это a0 jt.
[02:10:21.440 --> 02:10:23.440]  Чего? У тебя формула обязательно для OMEA должен быть.
[02:10:23.440 --> 02:10:25.440]  Так, давайте...
[02:10:25.440 --> 02:10:27.440]  То есть еще...
[02:10:27.440 --> 02:10:29.440]  Нет, ребят...
[02:10:33.440 --> 02:10:35.440]  Да, господи, ребят, давайте распишем просто аккуратно.
[02:10:35.440 --> 02:10:37.440]  A0 jt,
[02:10:37.440 --> 02:10:39.440]  это a0,
[02:10:39.440 --> 02:10:41.440]  это a0, точки jt.
[02:10:42.280 --> 02:10:44.280]  Значит, а0 jt равно,
[02:10:44.280 --> 02:10:46.280]  значит,
[02:10:46.280 --> 02:10:48.280]  по определению,
[02:10:48.280 --> 02:10:50.280]  значит, a0 в
[02:10:50.280 --> 02:10:52.280]  wn пополам
[02:10:52.280 --> 02:10:54.280]  wn пополам
[02:10:54.280 --> 02:10:56.280]  в степени j, правда?
[02:10:56.280 --> 02:10:58.280]  Это равно,
[02:10:58.280 --> 02:11:00.280]  или что, то же самое, a0 от
[02:11:00.280 --> 02:11:02.280]  wn в степени 2 j.
[02:11:04.280 --> 02:11:06.280]  Вспоминаем определение.
[02:11:06.280 --> 02:11:08.280]  Ну вот, по определению a0,
[02:11:08.280 --> 02:11:10.280]  это равно a0
[02:11:10.280 --> 02:11:12.280]  плюс a2
[02:11:12.280 --> 02:11:14.280]  wn в степени
[02:11:14.280 --> 02:11:16.280]  2 j,
[02:11:16.280 --> 02:11:18.280]  плюс a4
[02:11:18.280 --> 02:11:20.280]  wn в степени
[02:11:20.280 --> 02:11:22.280]  4 j,
[02:11:22.280 --> 02:11:24.280]  плюс и так далее,
[02:11:24.280 --> 02:11:26.280]  плюс a n-2
[02:11:26.280 --> 02:11:28.280]  на
[02:11:28.280 --> 02:11:30.280]  wn
[02:11:30.280 --> 02:11:32.280]  в степени
[02:11:32.280 --> 02:11:34.280]  2 j
[02:11:34.280 --> 02:11:36.280]  умножить на
[02:11:36.280 --> 02:11:38.280]  n пополам минус 1.
[02:11:38.280 --> 02:11:40.280]  Логично, да?
[02:11:40.280 --> 02:11:42.280]  Или что, то же самое,
[02:11:42.280 --> 02:11:44.280]  это на самом деле j умножить
[02:11:44.280 --> 02:11:46.280]  на n-2, правда?
[02:11:46.280 --> 02:11:48.280]  Чего?
[02:11:48.280 --> 02:11:50.280]  Какой звоночек?
[02:11:58.280 --> 02:12:00.280]  Ну да,
[02:12:00.280 --> 02:12:02.280]  особенно когда тут написано
[02:12:02.280 --> 02:12:04.280]  подозрение на спам.
[02:12:04.280 --> 02:12:06.280]  Да, вот это
[02:12:06.280 --> 02:12:08.280]  хорошее сообщение.
[02:12:08.280 --> 02:12:10.280]  Звоночек, скорее всего, так себе.
[02:12:10.280 --> 02:12:12.280]  Ладно, давайте,
[02:12:12.280 --> 02:12:14.280]  как говорится, будем игнорировать спам.
[02:12:14.280 --> 02:12:16.280]  Вот, значит, смотрите.
[02:12:16.280 --> 02:12:18.280]  Вот получилась такая штука.
[02:12:18.280 --> 02:12:20.280]  То есть мы,
[02:12:20.280 --> 02:12:22.280]  ну вот,
[02:12:22.280 --> 02:12:24.280]  но тогда получается,
[02:12:24.280 --> 02:12:26.280]  если эта штука такая,
[02:12:26.280 --> 02:12:28.280]  а a1 от j у нас будет
[02:12:28.280 --> 02:12:30.280]  аналогичным образом равно
[02:12:30.280 --> 02:12:32.280]  то же самое, только тут a1, a3
[02:12:32.280 --> 02:12:34.280]  и так далее,
[02:12:34.280 --> 02:12:36.280]  плюс a1, плюс a3
[02:12:36.280 --> 02:12:38.280]  на wn в степени
[02:12:38.280 --> 02:12:40.280]  2 j,
[02:12:40.280 --> 02:12:42.280]  ну да,
[02:12:42.280 --> 02:12:44.280]  2 j, плюс
[02:12:44.280 --> 02:12:46.280]  a5 на wn в степени
[02:12:46.280 --> 02:12:48.280]  4 j, плюс ну и так далее.
[02:12:48.280 --> 02:12:50.280]  Но тогда получается, смотрите,
[02:12:50.280 --> 02:12:52.280]  если я, то есть фактически,
[02:12:52.280 --> 02:12:54.280]  вот тогда получается,
[02:12:54.280 --> 02:12:56.280]  что мне надо?
[02:13:04.280 --> 02:13:06.280]  А, ну да,
[02:13:06.280 --> 02:13:08.280]  потому что смотрите,
[02:13:08.280 --> 02:13:10.280]  если мы сейчас вот эту штуку
[02:13:10.280 --> 02:13:12.280]  домножим на w,
[02:13:12.280 --> 02:13:14.280]  вот эту штуку теперь домножим на wn
[02:13:14.280 --> 02:13:16.280]  в степени j,
[02:13:16.280 --> 02:13:18.280]  то тогда что получится?
[02:13:18.280 --> 02:13:20.280]  Тогда замечаю, что
[02:13:20.280 --> 02:13:22.280]  вот эти 2 j у меня превращаются в 3,
[02:13:22.280 --> 02:13:24.280]  тут, соответственно, 3, 5,
[02:13:24.280 --> 02:13:26.280]  тут, кстати, 1 вылезет.
[02:13:26.280 --> 02:13:28.280]  И тогда получается,
[02:13:28.280 --> 02:13:30.280]  что у нас при каждом коэффициенте стоит
[02:13:30.280 --> 02:13:32.280]  wn в степени j
[02:13:32.280 --> 02:13:34.280]  и в степени, соответствующей этому коэффициенту.
[02:13:34.280 --> 02:13:36.280]  Тут соответствует,
[02:13:36.280 --> 02:13:38.280]  и тут соответствует, все.
[02:13:40.280 --> 02:13:42.280]  Вот, то есть получается,
[02:13:42.280 --> 02:13:44.280]  вот тогда мы пишем ровно то, что надо.
[02:13:44.280 --> 02:13:46.280]  То есть вообще вот в идеале
[02:13:46.280 --> 02:13:48.280]  вот можно прям вот так было бы написать
[02:13:48.280 --> 02:13:50.280]  пробежаться for ing от 0 до n.
[02:13:56.280 --> 02:13:58.280]  Но, но вот,
[02:13:58.280 --> 02:14:00.280]  но по некоторым причинам мы пишем
[02:14:00.280 --> 02:14:02.280]  здесь вот это.
[02:14:02.280 --> 02:14:04.280]  Ну, давайте еще тут оговоримся сразу.
[02:14:04.280 --> 02:14:06.280]  На самом деле, как вы догадываетесь,
[02:14:06.280 --> 02:14:08.280]  значит,
[02:14:08.280 --> 02:14:10.280]  ну ладно,
[02:14:10.280 --> 02:14:12.280]  по крайней мере мы сейчас как-нибудь от балды,
[02:14:12.280 --> 02:14:14.280]  правда, сделав вот это известное допущение,
[02:14:14.280 --> 02:14:16.280]  конечно,
[02:14:16.280 --> 02:14:18.280]  мы такие все-таки себе FFD
[02:14:18.280 --> 02:14:20.280]  как-то насчитали, да?
[02:14:22.280 --> 02:14:24.280]  Что у нас wn
[02:14:24.280 --> 02:14:26.280]  в степень j умеет так возводиться.
[02:14:26.280 --> 02:14:28.280]  Как бы и сэмпи.
[02:14:28.280 --> 02:14:30.280]  Чего?
[02:14:32.280 --> 02:14:34.280]  Не-не-не, вот смотрите,
[02:14:34.280 --> 02:14:36.280]  у меня тут записано wn в какой-то степени.
[02:14:36.280 --> 02:14:38.280]  Ну, в языке C++ такой конструкции
[02:14:38.280 --> 02:14:40.280]  нет.
[02:14:40.280 --> 02:14:42.280]  Да, но на самом деле, да, вот сразу,
[02:14:42.280 --> 02:14:44.280]  то есть это я сейчас просто для удобства формулы,
[02:14:44.280 --> 02:14:46.280]  да, на самом деле, но на самом деле
[02:14:46.280 --> 02:14:48.280]  так, для того, чтобы ее хорошо насчитывать,
[02:14:48.280 --> 02:14:50.280]  значит, тут просто чем это приятно,
[02:14:50.280 --> 02:14:52.280]  значит, одна из просто важных
[02:14:52.280 --> 02:14:54.280]  оптимизаций заключает в том, что на самом деле
[02:14:54.280 --> 02:14:56.280]  можно домножать тут сразу на wn в степень и пополам,
[02:14:56.280 --> 02:14:58.280]  да, ну, можно
[02:14:58.280 --> 02:15:00.280]  просто взять вот эту wn в степень j
[02:15:00.280 --> 02:15:02.280]  и сразу домножить на wn в степень и пополам.
[02:15:02.280 --> 02:15:04.280]  Да, она равна минусу единице,
[02:15:04.280 --> 02:15:06.280]  поэтому на самом деле
[02:15:06.280 --> 02:15:08.280]  у нас тут ничего нет, то есть тут есть умножение,
[02:15:08.280 --> 02:15:10.280]  просто здесь надо написать
[02:15:10.280 --> 02:15:12.280]  минус.
[02:15:12.280 --> 02:15:14.280]  Видите, да?
[02:15:14.280 --> 02:15:16.280]  Вот.
[02:15:16.280 --> 02:15:18.280]  Ну, то есть да, то есть можно
[02:15:18.280 --> 02:15:20.280]  в принципе, то есть на самом деле
[02:15:20.280 --> 02:15:22.280]  по-хорошему код будет выглядеть так.
[02:15:22.280 --> 02:15:24.280]  t deg, вот так я пишу,
[02:15:24.280 --> 02:15:26.280]  deg wn равно
[02:15:26.280 --> 02:15:28.280]  там условно 1
[02:15:28.280 --> 02:15:30.280]  или там в скопках от единицы,
[02:15:30.280 --> 02:15:32.280]  да?
[02:15:32.280 --> 02:15:34.280]  И тогда у вас получается примерно следующая
[02:15:34.280 --> 02:15:36.280]  штука. Так, где у меня тут
[02:15:36.280 --> 02:15:38.280]  орудие труда?
[02:15:38.280 --> 02:15:40.280]  Вот она.
[02:15:40.280 --> 02:15:42.280]  Так, то есть на самом деле
[02:15:42.280 --> 02:15:44.280]  по-хорошему совсем,
[02:15:44.280 --> 02:15:46.280]  то есть надо написать вот так.
[02:15:48.280 --> 02:15:50.280]  Вот.
[02:15:50.280 --> 02:15:52.280]  Минус deg.
[02:15:52.280 --> 02:15:54.280]  Тут минус deg.
[02:15:54.280 --> 02:15:56.280]  Значит,
[02:15:56.280 --> 02:15:58.280]  соответственно, а на самом деле еще
[02:15:58.280 --> 02:16:00.280]  и конечно тут написать, что deg умножить
[02:16:00.280 --> 02:16:02.280]  равно wn.
[02:16:04.280 --> 02:16:06.280]  Вот.
[02:16:06.280 --> 02:16:08.280]  Вот.
[02:16:18.280 --> 02:16:20.280]  Ну, знаете, умножение работает,
[02:16:20.280 --> 02:16:22.280]  думаю, гораздо быстрее, чем подсчет
[02:16:22.280 --> 02:16:24.280]  косинуса, правда?
[02:16:24.280 --> 02:16:26.280]  С другой стороны, точность, да.
[02:16:26.280 --> 02:16:28.280]  Поэтому тут конечно возможно
[02:16:28.280 --> 02:16:30.280]  где-то нужен определенный баланс.
[02:16:30.280 --> 02:16:32.280]  Ну, вот.
[02:16:32.280 --> 02:16:34.280]  Ну, вот.
[02:16:34.280 --> 02:16:36.280]  Ну, вот.
[02:16:36.280 --> 02:16:38.280]  Нет, на самом деле этот момент
[02:16:38.280 --> 02:16:40.280]  тоже важен, на самом деле.
[02:16:40.280 --> 02:16:42.280]  Действительно, это уже касается
[02:16:42.280 --> 02:16:44.280]  точности.
[02:16:44.280 --> 02:16:46.280]  В первую очередь тут мы все-таки ориентируемся
[02:16:46.280 --> 02:16:48.280]  на скорость.
[02:16:48.280 --> 02:16:50.280]  Потому что на самом...
[02:16:50.280 --> 02:16:52.280]  Нет, ну, потому что на самом деле
[02:16:52.280 --> 02:16:54.280]  смотрите.
[02:16:54.280 --> 02:16:56.280]  Вот.
[02:16:56.280 --> 02:16:58.280]  Ну, потому что тут значит
[02:16:58.280 --> 02:17:00.280]  ну, как тут можно
[02:17:00.280 --> 02:17:02.280]  оптимизировать по скорости?
[02:17:02.280 --> 02:17:04.280]  Ну, во-первых,
[02:17:04.280 --> 02:17:06.280]  конечно, одна из важных вещей,
[02:17:06.280 --> 02:17:08.280]  которая нам жутко все тормозит, она на самом деле
[02:17:08.280 --> 02:17:10.280]  ну, вот это на самом деле рекурсия, правда?
[02:17:10.280 --> 02:17:12.280]  Не сама рекурсия.
[02:17:12.280 --> 02:17:14.280]  Рекурсия маленькой глубины она уже не тормозит.
[02:17:14.280 --> 02:17:16.280]  Тормозит у нас все количество
[02:17:16.280 --> 02:17:18.280]  перекопирований, которые мы делаем.
[02:17:18.280 --> 02:17:20.280]  Ну, да, рекурсия к перекопированию.
[02:17:20.280 --> 02:17:22.280]  Да и вектора тоже.
[02:17:22.280 --> 02:17:24.280]  Ну, правда, вектора мы конечно тут
[02:17:24.280 --> 02:17:26.280]  это не перерисайзим, конечно,
[02:17:26.280 --> 02:17:28.280]  поэтому, может, не так.
[02:17:28.280 --> 02:17:30.280]  Перерисайзим, пушбеки делаем
[02:17:30.280 --> 02:17:32.280]  без этого перерезаева.
[02:17:32.280 --> 02:17:34.280]  Ну, могли рисайз сделать.
[02:17:34.280 --> 02:17:36.280]  А мы же говорили, вектор надо...
[02:17:36.280 --> 02:17:38.280]  Вектор они меняли? Чего?
[02:17:38.280 --> 02:17:40.280]  Ну, они векторами меняли.
[02:17:40.280 --> 02:17:42.280]  Ну, с другой стороны, смотрите, да.
[02:17:42.280 --> 02:17:44.280]  Ну, вообще, в идеале, то есть первая цель,
[02:17:44.280 --> 02:17:46.280]  которая у нас сегодня будет, это
[02:17:46.280 --> 02:17:48.280]  попробовать написать FFT, вот действительно,
[02:17:48.280 --> 02:17:50.280]  не выходя за пределы вектора.
[02:17:50.280 --> 02:17:52.280]  То есть сейчас она у нас, видите, вот
[02:17:52.280 --> 02:17:54.280]  он получает вход вектора, возвращает вектор,
[02:17:54.280 --> 02:17:56.280]  а будет он void-овская функция,
[02:17:56.280 --> 02:17:58.280]  которая будет получать вектор по неконстантной
[02:17:58.280 --> 02:18:00.280]  ссылке, просто его перешаманивать.
[02:18:00.280 --> 02:18:02.280]  А лучше даже не
[02:18:02.280 --> 02:18:04.280]  векторомассив.
[02:18:04.280 --> 02:18:06.280]  Вот такая у нас мечта.
[02:18:10.280 --> 02:18:12.280]  Ну, а дальше, смотрите.
[02:18:12.280 --> 02:18:14.280]  Ну, вот, давайте,
[02:18:14.280 --> 02:18:16.280]  то есть вот семантику, вот я сразу
[02:18:16.280 --> 02:18:18.280]  давайте рядом начну писать новый код.
[02:18:20.280 --> 02:18:22.280]  Там, где бы мне его писать?
[02:18:22.280 --> 02:18:24.280]  Ладно, это уже не надо нам.
[02:18:24.280 --> 02:18:26.280]  А что нам
[02:18:26.280 --> 02:18:28.280]  надо? Да просто свет
[02:18:28.280 --> 02:18:30.280]  в оконце.
[02:18:30.280 --> 02:18:32.280]  А что нам
[02:18:32.280 --> 02:18:34.280]  снится? Что кончилась
[02:18:34.280 --> 02:18:36.280]  война.
[02:18:36.280 --> 02:18:38.280]  Куда иду я?
[02:18:38.280 --> 02:18:40.280]  Вот так, где светит
[02:18:40.280 --> 02:18:42.280]  солнце.
[02:18:42.280 --> 02:18:44.280]  Лишь только, братцы, добраться
[02:18:44.280 --> 02:18:46.280]  будет темно. Да.
[02:18:46.280 --> 02:18:48.280]  Ой.
[02:18:48.280 --> 02:18:50.280]  Как это называется? Что старше?
[02:18:50.280 --> 02:18:52.280]  Песня или вы?
[02:18:54.280 --> 02:18:56.280]  Так.
[02:18:56.280 --> 02:18:58.280]  Ладно.
[02:18:58.280 --> 02:19:00.280]  Та перча, смотрите. Чем мы сейчас
[02:19:00.280 --> 02:19:02.280]  займемся?
[02:19:04.280 --> 02:19:06.280]  Итак, вой, господа.
[02:19:08.280 --> 02:19:10.280]  Значит, вот в идеале
[02:19:10.280 --> 02:19:12.280]  хотел бы написать вот fft, причем
[02:19:12.280 --> 02:19:14.280]  более того, вот совсем вы
[02:19:14.280 --> 02:19:16.280]  не знаете, что такое c++, да?
[02:19:16.280 --> 02:19:18.280]  Вот вы на сях кодите, вот давайте.
[02:19:18.280 --> 02:19:20.280]  Вот.
[02:19:24.280 --> 02:19:26.280]  Заказывали? Вот, пожалуйста.
[02:19:26.280 --> 02:19:28.280]  Вот.
[02:19:30.280 --> 02:19:32.280]  Что?
[02:19:34.280 --> 02:19:36.280]  Да.
[02:19:36.280 --> 02:19:38.280]  Ой, ничего. Сначала
[02:19:38.280 --> 02:19:40.280]  шок, потом чуть поменяли,
[02:19:40.280 --> 02:19:42.280]  получилось годно.
[02:19:42.280 --> 02:19:44.280]  Вот.
[02:19:44.280 --> 02:19:46.280]  Итак.
[02:19:46.280 --> 02:19:48.280]  Значит, что мы тут хотим? Ну, понятно, что
[02:19:48.280 --> 02:19:50.280]  ладно, начало-то логичное.
[02:19:50.280 --> 02:19:52.280]  Ладно, тут, в общем-то, я думаю, сопротивление
[02:19:52.280 --> 02:19:54.280]  бесполезно.
[02:19:56.280 --> 02:19:58.280]  Да, это не интересно.
[02:19:58.280 --> 02:20:00.280]  Значит, что дальше?
[02:20:02.280 --> 02:20:04.280]  Ну, в идеале, конечно,
[02:20:04.280 --> 02:20:06.280]  в идеале, конечно, хотелось бы, то есть
[02:20:06.280 --> 02:20:08.280]  если бы прям тупо переписывать, то мы должны
[02:20:08.280 --> 02:20:10.280]  создать через там какую-нибудь неюшку два новых
[02:20:10.280 --> 02:20:12.280]  массива, там
[02:20:12.280 --> 02:20:14.280]  что-то их куда-то там покопировать,
[02:20:14.280 --> 02:20:16.280]  значит, их тоже заффтэшить, а потом
[02:20:16.280 --> 02:20:18.280]  применить преобразование, да?
[02:20:18.280 --> 02:20:20.280]  Ну, может, это даже чуть быстрее будет работать,
[02:20:20.280 --> 02:20:22.280]  а может и нет.
[02:20:22.280 --> 02:20:24.280]  Потому что, в общем-то, там, то есть
[02:20:24.280 --> 02:20:26.280]  возможно, от вектора наполнут,
[02:20:26.280 --> 02:20:28.280]  ну, то есть если особенно не pushback,
[02:20:28.280 --> 02:20:30.280]  это будет примерно то же самое происходить.
[02:20:30.280 --> 02:20:32.280]  В конце концов, думаете, откуда он
[02:20:32.280 --> 02:20:34.280]  дополнительную память себе берет?
[02:20:34.280 --> 02:20:36.280]  В конце концов, по дефолту, из той же
[02:20:36.280 --> 02:20:38.280]  неюшки. Ну, может быть, вы
[02:20:38.280 --> 02:20:40.280]  конечно ему подсунули какой-нибудь аллокатор, но
[02:20:40.280 --> 02:20:42.280]  да-да-да, вы не знаете
[02:20:42.280 --> 02:20:44.280]  таких слов, да?
[02:20:44.280 --> 02:20:46.280]  Да, таким не ругайтесь.
[02:20:46.280 --> 02:20:48.280]  Вот, значит, что делать?
[02:20:48.280 --> 02:20:50.280]  Ну, тут теперь смотрите, какая у нас сегодня к вам
[02:20:50.280 --> 02:20:52.280]  интересная фишка.
[02:20:52.280 --> 02:20:54.280]  Вот давайте теперь вот внимательно
[02:20:54.280 --> 02:20:56.280]  посмотрим вот на вот этот вот
[02:20:56.280 --> 02:20:58.280]  форик, я вот почему-то его написал вот в таком
[02:20:58.280 --> 02:21:00.280]  мистическом смысле, да?
[02:21:00.280 --> 02:21:02.280]  В мистическом виде, да?
[02:21:02.280 --> 02:21:04.280]  Да, возможно, из-за минусика.
[02:21:04.280 --> 02:21:06.280]  Но теперь заметим следующее, что на самом
[02:21:06.280 --> 02:21:08.280]  деле, если
[02:21:08.280 --> 02:21:10.280]  бы А0 и А1,
[02:21:10.280 --> 02:21:12.280]  вот представим себе, что жил бы у нас массив
[02:21:12.280 --> 02:21:14.280]  А0, вот массив А,
[02:21:14.280 --> 02:21:16.280]  и мы каким-то образом мистическим
[02:21:16.280 --> 02:21:18.280]  сделали,
[02:21:18.280 --> 02:21:20.280]  что у нас вот в тех же самых
[02:21:20.280 --> 02:21:22.280]  вот ячейках лежит вот, тут лежит
[02:21:22.280 --> 02:21:24.280]  А0, а тут лежит А1.
[02:21:24.280 --> 02:21:26.280]  Ну, в смысле вот
[02:21:26.280 --> 02:21:28.280]  вот так, на самом деле.
[02:21:28.280 --> 02:21:30.280]  Тогда, смотрите,
[02:21:30.280 --> 02:21:32.280]  какая ситуация. Тогда я вот выражаю,
[02:21:32.280 --> 02:21:34.280]  что вот это преобразование,
[02:21:34.280 --> 02:21:36.280]  это преобразование,
[02:21:36.280 --> 02:21:38.280]  тогда можно было бы, то есть,
[02:21:38.280 --> 02:21:40.280]  без всяких лишних копирований элементов,
[02:21:40.280 --> 02:21:42.280]  спокойно проделать.
[02:21:42.280 --> 02:21:44.280]  Потому что вы берете числа
[02:21:44.280 --> 02:21:46.280]  А0 житое и А1 житое,
[02:21:46.280 --> 02:21:48.280]  вот которые находятся
[02:21:48.280 --> 02:21:50.280]  вот там здесь и здесь,
[02:21:50.280 --> 02:21:52.280]  вычисляете вот эти два числа
[02:21:52.280 --> 02:21:54.280]  и записываете их ровно сюда же.
[02:21:54.280 --> 02:21:56.280]  Единственное оговорка, что вам бы пришлось сохранить
[02:21:56.280 --> 02:21:58.280]  какие-нибудь переменные.
[02:21:58.280 --> 02:22:00.280]  Да.
[02:22:00.280 --> 02:22:02.280]  Ну, почему один?
[02:22:02.280 --> 02:22:04.280]  А, ну, в этом плане, да.
[02:22:04.280 --> 02:22:06.280]  То есть, ну, лишней памяти от единицы,
[02:22:06.280 --> 02:22:08.280]  это понятно, да.
[02:22:08.280 --> 02:22:10.280]  Вот.
[02:22:10.280 --> 02:22:12.280]  Ну, я просто в том плане, что вот
[02:22:12.280 --> 02:22:14.280]  я просто хотел обратить внимание,
[02:22:14.280 --> 02:22:16.280]  что конкретно этот код вот в этом виде
[02:22:16.280 --> 02:22:18.280]  работать не будет. Да.
[02:22:18.280 --> 02:22:20.280]  Я только на это хотел обратить внимание, не более.
[02:22:20.280 --> 02:22:22.280]  Потому что у нас пока более интеллектуальный
[02:22:22.280 --> 02:22:24.280]  вопрос.
[02:22:24.280 --> 02:22:26.280]  А как вообще так элементы переставить?
[02:22:26.280 --> 02:22:28.280]  Магия.
[02:22:32.280 --> 02:22:34.280]  Да, магия, да, да.
[02:22:34.280 --> 02:22:36.280]  Как это? На самом деле, да.
[02:22:38.280 --> 02:22:40.280]  О, рандомно, да?
[02:22:40.280 --> 02:22:42.280]  Да.
[02:22:42.280 --> 02:22:44.280]  А, рандомно шахлит, пока не окажется,
[02:22:44.280 --> 02:22:46.280]  что порядок тот, который я дал, да.
[02:22:46.280 --> 02:22:48.280]  Ну, да, мы такую сортировку
[02:22:48.280 --> 02:22:50.280]  уже обсуждали, да.
[02:22:50.280 --> 02:22:52.280]  Вот, окей.
[02:22:52.280 --> 02:22:54.280]  Вот, но на самом деле
[02:22:54.280 --> 02:22:56.280]  возникла следующая мысль.
[02:22:56.280 --> 02:22:58.280]  А на самом деле конкретно вот так переставлять
[02:22:58.280 --> 02:23:00.280]  чтобы вызваться рекурсивно нам не надо.
[02:23:02.280 --> 02:23:04.280]  Потому что давайте задумаемся вот о чём.
[02:23:04.280 --> 02:23:06.280]  Ой, как хорошо, что у нас есть большая доска.
[02:23:08.280 --> 02:23:10.280]  Да, да.
[02:23:10.280 --> 02:23:12.280]  Да, не знаю.
[02:23:12.280 --> 02:23:14.280]  Большие примеры запутывать нельзя,
[02:23:14.280 --> 02:23:16.280]  как по мне, по-моему, иногда хистой
[02:23:16.280 --> 02:23:18.280]  наоборот. Чем больше пример, тем как бы он
[02:23:18.280 --> 02:23:20.280]  десей.
[02:23:20.280 --> 02:23:22.280]  Ну, по ситуации.
[02:23:22.280 --> 02:23:24.280]  Ну, с другой стороны, да.
[02:23:24.280 --> 02:23:26.280]  Но с другой стороны, нет.
[02:23:26.280 --> 02:23:28.280]  Я помню, нет. У меня был хороший пример,
[02:23:28.280 --> 02:23:30.280]  как я в своё время
[02:23:30.280 --> 02:23:32.280]  в первые вообще понял,
[02:23:32.280 --> 02:23:34.280]  понял, что такое отложенная операция
[02:23:34.280 --> 02:23:36.280]  на дереве отрезков.
[02:23:36.280 --> 02:23:38.280]  То есть, там просто на лекции они предлагались
[02:23:38.280 --> 02:23:40.280]  на дереве глубины, ну, по-моему,
[02:23:40.280 --> 02:23:42.280]  максимум 3.
[02:23:42.280 --> 02:23:44.280]  Или, может, 2,2.
[02:23:44.280 --> 02:23:46.280]  Пошёл там на перемене
[02:23:46.280 --> 02:23:48.280]  выспрашивать, он говорит, так ладно.
[02:23:48.280 --> 02:23:50.280]  И Лев, кстати, это Капилёвич и был,
[02:23:50.280 --> 02:23:52.280]  он говорит, так, ну ладно.
[02:23:52.280 --> 02:23:54.280]  Значит, тогда, раз у нас то время есть, можно рассмотреть
[02:23:54.280 --> 02:23:56.280]  больше примеров, нарисовал больше.
[02:23:56.280 --> 02:23:58.280]  И вот на большем примере как-то сразу всё ясно стало.
[02:24:12.280 --> 02:24:14.280]  Да, ну, продукт, да.
[02:24:14.280 --> 02:24:16.280]  Но с другой стороны, сейчас у нас ситуация будет ближе
[02:24:16.280 --> 02:24:18.280]  к деревоотрескам, чем к логарифам.
[02:24:18.280 --> 02:24:20.280]  Так как тоже глубина логарифам тоже разделена пополам,
[02:24:20.280 --> 02:24:22.280]  в общем.
[02:24:22.280 --> 02:24:24.280]  Значит, поехали.
[02:24:24.280 --> 02:24:26.280]  Значит, нет, я просто, чтобы было явно,
[02:24:26.280 --> 02:24:28.280]  я пишу вот такой пример.
[02:24:28.280 --> 02:24:30.280]  Ну, обычно, мне кажется, там вот 16,
[02:24:30.280 --> 02:24:32.280]  вот 8, мне кажется, это сейчас мало будет.
[02:24:32.280 --> 02:24:34.280]  Ну, а вот 16, я верю,
[02:24:34.280 --> 02:24:36.280]  всё-таки хватит.
[02:24:38.280 --> 02:24:40.280]  Согласен.
[02:24:40.280 --> 02:24:42.280]  Ну ладно, давайте.
[02:24:44.280 --> 02:24:46.280]  Ну да, если там будет
[02:24:46.280 --> 02:24:48.280]  давайте, да.
[02:24:58.280 --> 02:25:00.280]  Можно, но
[02:25:00.280 --> 02:25:02.280]  не очень-то иду, что да.
[02:25:08.280 --> 02:25:10.280]  Так. Итак.
[02:25:10.280 --> 02:25:12.280]  Значит, давайте посмотрим.
[02:25:12.280 --> 02:25:14.280]  Как они будут вообще перешаманиваться?
[02:25:14.280 --> 02:25:16.280]  Ну, на первом уровне
[02:25:16.280 --> 02:25:18.280]  они перешаманиваются так, что
[02:25:18.280 --> 02:25:20.280]  сначала будет идти
[02:25:20.280 --> 02:25:22.280]  а0, а2, а4,
[02:25:22.280 --> 02:25:24.280]  а6, а8,
[02:25:24.280 --> 02:25:26.280]  а10, а12,
[02:25:26.280 --> 02:25:28.280]  а14.
[02:25:28.280 --> 02:25:30.280]  А потом
[02:25:30.280 --> 02:25:32.280]  значит, а1,
[02:25:32.280 --> 02:25:34.280]  а3, а5,
[02:25:34.280 --> 02:25:36.280]  а7, а9,
[02:25:36.280 --> 02:25:38.280]  а11, а13.
[02:25:38.280 --> 02:25:40.280]  То есть, если мы в начале
[02:25:40.280 --> 02:25:42.280]  переставим
[02:25:42.280 --> 02:25:44.280]  эти коэффициенты вот таким образом,
[02:25:44.280 --> 02:25:46.280]  научимся,
[02:25:46.280 --> 02:25:48.280]  то тогда у нас получится.
[02:25:48.280 --> 02:25:50.280]  То есть, фактически, код
[02:25:50.280 --> 02:25:52.280]  в дефолтной версии мог бы выглядеть так.
[02:25:52.280 --> 02:25:54.280]  То есть, тут шамань, шамань, шамань.
[02:25:54.280 --> 02:25:56.280]  После этого запуск
[02:25:56.280 --> 02:25:58.280]  значит, мы бы сказали
[02:25:58.280 --> 02:26:00.280]  значит, мы бы себе сказали
[02:26:00.280 --> 02:26:02.280]  t, допустим, vn2
[02:26:02.280 --> 02:26:04.280]  равно wn умножить на wn.
[02:26:04.280 --> 02:26:06.280]  И дальше мы бы себе сказали
[02:26:06.280 --> 02:26:08.280]  fft
[02:26:08.280 --> 02:26:10.280]  значит,
[02:26:10.280 --> 02:26:12.280]  fft от a0 пополам
[02:26:12.280 --> 02:26:14.280]  и vn2
[02:26:14.280 --> 02:26:16.280]  и fft
[02:26:16.280 --> 02:26:18.280]  от a плюс n пополам
[02:26:18.280 --> 02:26:20.280]  n пополам vn2.
[02:26:20.280 --> 02:26:22.280]  Вот.
[02:26:22.280 --> 02:26:24.280]  То есть, как бы от первой половины
[02:26:24.280 --> 02:26:26.280]  массива, от второй половины массива.
[02:26:26.280 --> 02:26:28.280]  То есть, в массиве мы так делать умеем. Ура, правда?
[02:26:28.280 --> 02:26:30.280]  Хорошо.
[02:26:30.280 --> 02:26:32.280]  Вот.
[02:26:32.280 --> 02:26:34.280]  Ну, а дальше мы тут вот
[02:26:34.280 --> 02:26:36.280]  называется нот
[02:26:36.280 --> 02:26:38.280]  дальше начали бы развлекаться.
[02:26:38.280 --> 02:26:40.280]  Уже напишем.
[02:26:40.280 --> 02:26:42.280]  Далеко ходить.
[02:26:42.280 --> 02:26:44.280]  deck vn равно 1
[02:26:44.280 --> 02:26:46.280]  значит, и дальше пишем там for int
[02:26:46.280 --> 02:26:48.280]  там e равно
[02:26:48.280 --> 02:26:50.280]  g равно 0, g меньше
[02:26:50.280 --> 02:26:52.280]  чем это пополам
[02:26:52.280 --> 02:26:54.280]  plus plus g.
[02:26:54.280 --> 02:26:56.280]  Соответственно, мы пишем там t, u
[02:26:56.280 --> 02:26:58.280]  равно
[02:27:02.280 --> 02:27:04.280]  Чего deck?
[02:27:04.280 --> 02:27:06.280]  Где?
[02:27:06.280 --> 02:27:08.280]  Вот.
[02:27:08.280 --> 02:27:10.280]  Значит,
[02:27:10.280 --> 02:27:12.280]  пишем
[02:27:12.280 --> 02:27:14.280]  ajt
[02:27:14.280 --> 02:27:16.280]  равно
[02:27:16.280 --> 02:27:18.280]  u плюс
[02:27:18.280 --> 02:27:20.280]  deck wn умножить
[02:27:20.280 --> 02:27:22.280]  на
[02:27:22.280 --> 02:27:24.280]  v
[02:27:24.280 --> 02:27:26.280]  ну, и здесь соответственно
[02:27:26.280 --> 02:27:28.280]  aj plus n пополам
[02:27:28.280 --> 02:27:30.280]  равно u
[02:27:30.280 --> 02:27:32.280]  минус deck a.
[02:27:32.280 --> 02:27:34.280]  Что не так?
[02:27:34.280 --> 02:27:36.280]  Мы там
[02:27:36.280 --> 02:27:38.280]  не использовали никакие aj
[02:27:38.280 --> 02:27:40.280]  пополам.
[02:27:40.280 --> 02:27:42.280]  Все, все, все.
[02:27:42.280 --> 02:27:44.280]  Вот. Так.
[02:27:44.280 --> 02:27:46.280]  А, ну и
[02:27:46.280 --> 02:27:48.280]  deck wn умножить
[02:27:48.280 --> 02:27:50.280]  равно wn.
[02:27:50.280 --> 02:27:52.280]  Все. А. И на этом все.
[02:27:52.280 --> 02:27:54.280]  Никаких этих ваших ретурнов лишних.
[02:27:54.280 --> 02:27:56.280]  Вот. То есть, по идее
[02:27:56.280 --> 02:27:58.280]  вот такое. Только единственная проблема,
[02:27:58.280 --> 02:28:00.280]  что мы не очень
[02:28:00.280 --> 02:28:02.280]  понимаем, что такое шамань-шамань. Правда?
[02:28:02.280 --> 02:28:04.280]  Давайте его не делать.
[02:28:04.280 --> 02:28:06.280]  Как таки?
[02:28:06.280 --> 02:28:08.280]  Как таки делать?
[02:28:08.280 --> 02:28:10.280]  Значит, затыть.
[02:28:10.280 --> 02:28:12.280]  Ну, действительно, оказалась идея следующая.
[02:28:12.280 --> 02:28:14.280]  Что да.
[02:28:14.280 --> 02:28:16.280]  То есть, у нас тут получается, мы делаем шамань-шамань
[02:28:16.280 --> 02:28:18.280]  и рекурсию.
[02:28:18.280 --> 02:28:20.280]  Но на самом деле заметим, что
[02:28:20.280 --> 02:28:22.280]  ну, вот, да, тут
[02:28:22.280 --> 02:28:24.280]  надо очень аккуратно сформулировать так, чтобы не
[02:28:24.280 --> 02:28:26.280]  придраться, что формально происходит не так.
[02:28:26.280 --> 02:28:28.280]  Но на самом деле
[02:28:28.280 --> 02:28:30.280]  действительно, что когда мы тут запускаем,
[02:28:30.280 --> 02:28:32.280]  то все эти элементы тоже шафлятся. Правда?
[02:28:32.280 --> 02:28:34.280]  А потом, когда они у себя рекурсивно
[02:28:34.280 --> 02:28:36.280]  пошатаны, то они тоже шафлятся. То есть, в итоге
[02:28:36.280 --> 02:28:38.280]  действия устроены так,
[02:28:38.280 --> 02:28:40.280]  что мы можем сначала сделать все шафлинги,
[02:28:40.280 --> 02:28:42.280]  а потом
[02:28:42.280 --> 02:28:44.280]  сделать все, наоборот, вот эти
[02:28:44.280 --> 02:28:46.280]  слияния.
[02:28:46.280 --> 02:28:48.280]  Вообще говоря. Правда?
[02:28:48.280 --> 02:28:50.280]  Ну, вот.
[02:28:50.280 --> 02:28:52.280]  Ну, вот. Ну, тогда
[02:28:52.280 --> 02:28:54.280]  давайте внимательно подумаем, как же это сделать.
[02:28:54.280 --> 02:28:56.280]  Сделаем это так.
[02:28:56.280 --> 02:28:58.280]  Ну, давайте подумаем, как тут этот шафлинг будет устроен дальше.
[02:28:58.280 --> 02:29:00.280]  Ну, дальше мы видим
[02:29:00.280 --> 02:29:02.280]  А0, А4, А8,
[02:29:02.280 --> 02:29:04.280]  А12, а также
[02:29:04.280 --> 02:29:06.280]  А2, А6, А10,
[02:29:06.280 --> 02:29:08.280]  А14.
[02:29:08.280 --> 02:29:10.280]  Тут очки
[02:29:10.280 --> 02:29:12.280]  А1, А5,
[02:29:12.280 --> 02:29:14.280]  А9, А13
[02:29:14.280 --> 02:29:16.280]  и тут А3, А7,
[02:29:16.280 --> 02:29:18.280]  А11,
[02:29:18.280 --> 02:29:20.280]  А15.
[02:29:20.280 --> 02:29:22.280]  Вот.
[02:29:22.280 --> 02:29:24.280]  Вот.
[02:29:24.280 --> 02:29:26.280]  Ну, вот.
[02:29:26.280 --> 02:29:28.280]  На этой глубине тут уже
[02:29:28.280 --> 02:29:30.280]  все просто. А0, А8, А4,
[02:29:30.280 --> 02:29:32.280]  А12.
[02:29:32.280 --> 02:29:34.280]  Дальше тут А2,
[02:29:34.280 --> 02:29:36.280]  А10, А6,
[02:29:36.280 --> 02:29:38.280]  А14.
[02:29:38.280 --> 02:29:40.280]  Вот. Тут у нас
[02:29:40.280 --> 02:29:42.280]  соответственно А1, А9,
[02:29:42.280 --> 02:29:44.280]  А5, А13.
[02:29:44.280 --> 02:29:46.280]  И тут еще
[02:29:46.280 --> 02:29:48.280]  такой А3, А11,
[02:29:48.280 --> 02:29:50.280]  А7, А15.
[02:29:50.280 --> 02:29:52.280]  Вот.
[02:29:52.280 --> 02:29:54.280]  Ну, и на самом деле еще один уровень рекурсии.
[02:29:54.280 --> 02:29:56.280]  Ну, да.
[02:29:56.280 --> 02:29:58.280]  Ну, пока, ну, вот.
[02:29:58.280 --> 02:30:00.280]  Поэтому по факту, да,
[02:30:00.280 --> 02:30:02.280]  вы уже видите, в каком порядке нам на самом деле
[02:30:02.280 --> 02:30:04.280]  надо переставить эти элементы.
[02:30:04.280 --> 02:30:06.280]  Пока я их тут вот этот ряд переписываю,
[02:30:06.280 --> 02:30:08.280]  вот, собственно, попробуйте
[02:30:08.280 --> 02:30:10.280]  найти закономерность.
[02:30:10.280 --> 02:30:12.280]  Да.
[02:30:12.280 --> 02:30:14.280]  Сами понимаете, что это не совсем рандом-шафленный массив.
[02:30:14.280 --> 02:30:16.280]  Вот так.
[02:30:16.280 --> 02:30:18.280]  До-шафленный массив.
[02:30:18.280 --> 02:30:20.280]  Ну, вот. И теперь вот давайте
[02:30:20.280 --> 02:30:22.280]  смотреть, что ж получится. Что ж ты за
[02:30:22.280 --> 02:30:24.280]  следовательность индексов?
[02:30:30.280 --> 02:30:32.280]  В скобках нет.
[02:30:40.280 --> 02:30:42.280]  Ну, математика не совсем
[02:30:42.280 --> 02:30:44.280]  мистик, да.
[02:30:46.280 --> 02:30:48.280]  Вот.
[02:30:52.280 --> 02:30:54.280]  Вот. Справивается.
[02:30:54.280 --> 02:30:56.280]  Чего?
[02:30:58.280 --> 02:31:00.280]  Да.
[02:31:00.280 --> 02:31:02.280]  Поразительно. Я не могу в это поверить.
[02:31:02.280 --> 02:31:04.280]  Чего?
[02:31:04.280 --> 02:31:06.280]  Мы метим, что
[02:31:06.280 --> 02:31:08.280]  между, вот, если ты посмотришь
[02:31:08.280 --> 02:31:10.280]  элемент, и тот, который от него стоит,
[02:31:10.280 --> 02:31:12.280]  они четыре.
[02:31:12.280 --> 02:31:14.280]  Через два элемента там
[02:31:14.280 --> 02:31:16.280]  ты их свапнуешь, то они неожиданно выходят.
[02:31:16.280 --> 02:31:18.280]  А там обосьме один, а один свапан.
[02:31:18.280 --> 02:31:20.280]  Тут все элементы такой же обосьмой свапаной.
[02:31:20.280 --> 02:31:22.280]  Да.
[02:31:22.280 --> 02:31:24.280]  Первое восьмой, второе, четвертый,
[02:31:24.280 --> 02:31:26.280]  третья, пятнадцатый.
[02:31:26.280 --> 02:31:28.280]  А некоторые не свапаны, а тут постоят
[02:31:28.280 --> 02:31:30.280]  на одном месте.
[02:31:30.280 --> 02:31:32.280]  Кто же они?
[02:31:32.280 --> 02:31:34.280]  Да.
[02:31:34.280 --> 02:31:36.280]  Мистик очень простая.
[02:31:36.280 --> 02:31:38.280]  Давайте просто двоечность системе счастливей
[02:31:38.280 --> 02:31:40.280]  и все эти индексы запишем.
[02:31:40.280 --> 02:31:42.280]  Ну, как бы, это все четырехбитные числа.
[02:31:42.280 --> 02:31:44.280]  Вот, смотрите.
[02:31:44.280 --> 02:31:46.280]  0 это 0000.
[02:31:46.280 --> 02:31:48.280]  8 это 1400.
[02:31:48.280 --> 02:31:50.280]  4 это 0100.
[02:31:50.280 --> 02:31:52.280]  12 это 1100.
[02:31:52.280 --> 02:31:54.280]  Да, да, да. Начинайте догадаться,
[02:31:54.280 --> 02:31:56.280]  почему я их так быстро пишу.
[02:31:56.280 --> 02:31:58.280]  Там вот так вот.
[02:31:58.280 --> 02:32:00.280]  1010.
[02:32:00.280 --> 02:32:02.280]  Вот, да.
[02:32:02.280 --> 02:32:04.280]  Ну, может, я просто, конечно, очень круто
[02:32:04.280 --> 02:32:06.280]  знаю двоичное представление чисел там,
[02:32:06.280 --> 02:32:08.280]  потому что я там, ну, я не знаю,
[02:32:08.280 --> 02:32:10.280]  программист.
[02:32:10.280 --> 02:32:12.280]  Вот.
[02:32:12.280 --> 02:32:14.280]  Так вот, так вот, да.
[02:32:14.280 --> 02:32:16.280]  Нет, или я просто,
[02:32:16.280 --> 02:32:18.280]  или я просто догадываюсь, по какому закону
[02:32:18.280 --> 02:32:20.280]  они тут расписаны все.
[02:32:26.280 --> 02:32:28.280]  Во.
[02:32:30.280 --> 02:32:32.280]  И чего стало понятно?
[02:32:32.280 --> 02:32:34.280]  Ну, потому что это, типа, взяли просто чиселки
[02:32:34.280 --> 02:32:36.280]  от 0 до 15.
[02:32:38.280 --> 02:32:40.280]  Да, но важно, взяли
[02:32:40.280 --> 02:32:42.280]  именно в четырехбитном виде.
[02:32:42.280 --> 02:32:44.280]  Да, именно в четырехбитном.
[02:32:44.280 --> 02:32:46.280]  Потому что, обратите внимание, если вы разберете вот это число
[02:32:46.280 --> 02:32:48.280]  0100, если просто поразворачивать,
[02:32:48.280 --> 02:32:50.280]  то может получиться единица.
[02:32:50.280 --> 02:32:52.280]  А нам нужно, чтобы получилось не единица, а получилось
[02:32:52.280 --> 02:32:54.280]  число 0100.
[02:32:54.280 --> 02:32:56.280]  Фу, наоборот.
[02:32:56.280 --> 02:32:58.280]  Да, 0100. Где оно у нас?
[02:32:58.280 --> 02:33:00.280]  Число 0100.
[02:33:02.280 --> 02:33:04.280]  А, 0100.
[02:33:04.280 --> 02:33:06.280]  Вот оно.
[02:33:06.280 --> 02:33:08.280]  Вот. А чтобы разворачиваем,
[02:33:08.280 --> 02:33:10.280]  получаем 0010. Да, вот оно.
[02:33:12.280 --> 02:33:14.280]  Вот. Ну, правда, формально говоря,
[02:33:14.280 --> 02:33:16.280]  может это совпадение?
[02:33:16.280 --> 02:33:18.280]  На самом деле, нет.
[02:33:18.280 --> 02:33:20.280]  Потому что, по большому счету,
[02:33:20.280 --> 02:33:22.280]  мы на самом деле отсортировали числа от 0 до 15.
[02:33:22.280 --> 02:33:24.280]  Причем отсортировали очень хитро.
[02:33:24.280 --> 02:33:26.280]  Мы их отсортировали по младшему индексу.
[02:33:26.280 --> 02:33:28.280]  То есть, по младшему биту.
[02:33:28.280 --> 02:33:30.280]  Ну, что значит? Сначала
[02:33:30.280 --> 02:33:32.280]  четные, потом нечетные.
[02:33:32.280 --> 02:33:34.280]  Значит, мы отсортировали сначала такие,
[02:33:34.280 --> 02:33:36.280]  потом те, у которых
[02:33:36.280 --> 02:33:38.280]  младше битной.
[02:33:38.280 --> 02:33:40.280]  Потом внутри,
[02:33:40.280 --> 02:33:42.280]  следующий парад,
[02:33:42.280 --> 02:33:44.280]  мы сортируем по второму по младшести биту.
[02:33:44.280 --> 02:33:46.280]  Видите? Сначала 0, потом единица и так далее.
[02:33:48.280 --> 02:33:50.280]  Поэтому по факту, наверное, ничего удивительного в том,
[02:33:50.280 --> 02:33:52.280]  что если эти четырехбитные представления тупо
[02:33:52.280 --> 02:33:54.280]  развернуты, то мы просто по этим
[02:33:54.280 --> 02:33:56.280]  четвертым представлениям их и посортировали.
[02:33:56.280 --> 02:33:58.280]  Правда?
[02:33:58.280 --> 02:34:00.280]  Причем более того, учитывая, что
[02:34:00.280 --> 02:34:02.280]  если взять все числа от 0 до 15
[02:34:02.280 --> 02:34:04.280]  и их четырехбитное представление развернуть,
[02:34:04.280 --> 02:34:06.280]  то получится все числа
[02:34:06.280 --> 02:34:08.280]  от 0 до 15.
[02:34:08.280 --> 02:34:10.280]  Просто записанное
[02:34:10.280 --> 02:34:12.280]  чуть-чуть в другом порядке очень сильно.
[02:34:14.280 --> 02:34:16.280]  Но, с другой стороны, по каждому числу
[02:34:16.280 --> 02:34:18.280]  теперь очень легко определить,
[02:34:18.280 --> 02:34:20.280]  где оно находится.
[02:34:20.280 --> 02:34:22.280]  Вот, например, троечка. Вот у нее
[02:34:22.280 --> 02:34:24.280]  представление, допустим,
[02:34:24.280 --> 02:34:26.280]  там, допустим, 0011.
[02:34:26.280 --> 02:34:28.280]  Значит, в ней
[02:34:28.280 --> 02:34:30.280]  должно находиться число 1100, а она сама,
[02:34:30.280 --> 02:34:32.280]  ну, то есть она сама 0011
[02:34:32.280 --> 02:34:34.280]  должна быть там, где вот 1100.
[02:34:34.280 --> 02:34:36.280]  1100 это сколько у нас?
[02:34:36.280 --> 02:34:38.280]  12. Да, вот оно.
[02:34:40.280 --> 02:34:42.280]  Вот. То есть таким образом надо
[02:34:42.280 --> 02:34:44.280]  просто действительно все...
[02:34:44.280 --> 02:34:46.280]  То есть, оказывается, чтобы их изначально переставить,
[02:34:46.280 --> 02:34:48.280]  вам на самом деле нужно
[02:34:48.280 --> 02:34:50.280]  времени N
[02:34:50.280 --> 02:34:52.280]  умножить на, а за какое
[02:34:52.280 --> 02:34:54.280]  время вы там реверсите числа.
[02:34:56.280 --> 02:34:58.280]  Ну, не константа
[02:34:58.280 --> 02:35:00.280]  будем числами. Там все-таки
[02:35:00.280 --> 02:35:02.280]  N log N в этом месте будет.
[02:35:04.280 --> 02:35:06.280]  Мы можем просто
[02:35:06.280 --> 02:35:08.280]  пройтись
[02:35:08.280 --> 02:35:10.280]  по каким-нибудь числам. Если чтобы
[02:35:10.280 --> 02:35:12.280]  это сделать, нам нужно посвапать
[02:35:12.280 --> 02:35:14.280]  какие-то пары числа. Да.
[02:35:14.280 --> 02:35:16.280]  Вот.
[02:35:16.280 --> 02:35:18.280]  Своей.
[02:35:18.280 --> 02:35:20.280]  Своей. Его
[02:35:20.280 --> 02:35:22.280]  не XOR, а разворот.
[02:35:22.280 --> 02:35:24.280]  И если пройдемся так по всем,
[02:35:24.280 --> 02:35:26.280]  от 0 до J, то мы все числа посвапаем
[02:35:26.280 --> 02:35:28.280]  по два раза, и ничего не произойдет.
[02:35:28.280 --> 02:35:30.280]  Да, но мы свапать будем
[02:35:30.280 --> 02:35:32.280]  по одному разу.
[02:35:32.280 --> 02:35:34.280]  Да нет. На самом деле
[02:35:34.280 --> 02:35:36.280]  нет, есть...
[02:35:36.280 --> 02:35:38.280]  Нет, смотри. На самом деле есть
[02:35:38.280 --> 02:35:40.280]  в этом смысле хак простой.
[02:35:40.280 --> 02:35:42.280]  Просто
[02:35:42.280 --> 02:35:44.280]  да, 4 значит int J
[02:35:44.280 --> 02:35:46.280]  равно 0,
[02:35:46.280 --> 02:35:48.280]  J меньше N
[02:35:48.280 --> 02:35:50.280]  плюс-плюс J, и говорим,
[02:35:50.280 --> 02:35:52.280]  что если
[02:35:52.280 --> 02:35:54.280]  оказалось, что J меньше,
[02:35:54.280 --> 02:35:56.280]  чем рев от
[02:35:56.280 --> 02:35:58.280]  там допустим
[02:35:58.280 --> 02:36:00.280]  называется J и N,
[02:36:00.280 --> 02:36:02.280]  мы же передаем N, чтобы понимать
[02:36:02.280 --> 02:36:04.280]  сколько бит реверсить, да?
[02:36:06.280 --> 02:36:08.280]  Ну, можно и N, да. Можно N,
[02:36:08.280 --> 02:36:10.280]  можно K, там не суть важна.
[02:36:10.280 --> 02:36:12.280]  Но, соответственно, свапа.
[02:36:12.280 --> 02:36:14.280]  J, T, а вот этого рева.
[02:36:14.280 --> 02:36:16.280]  Ну, по-хорошему, для оптимизации неплохо
[02:36:16.280 --> 02:36:18.280]  было бы этот рев, конечно, вычислить заранее.
[02:36:18.280 --> 02:36:20.280]  Ну, не заранее, а в смысле
[02:36:20.280 --> 02:36:22.280]  вычислить, а потом эту переменную два раза
[02:36:22.280 --> 02:36:24.280]  использовать.
[02:36:24.280 --> 02:36:26.280]  Но это уже локальность. То есть, на самом деле
[02:36:26.280 --> 02:36:28.280]  вот эта вот вся магия,
[02:36:28.280 --> 02:36:30.280]  она вот предлагает просто
[02:36:30.280 --> 02:36:32.280]  уже избавление от рекурсии, дальше
[02:36:32.280 --> 02:36:34.280]  вот эту вот штуку теперь надо просто реализовать
[02:36:34.280 --> 02:36:36.280]  немножко по-другому.
[02:36:36.280 --> 02:36:38.280]  То есть, уже внутри каких-то больших циклов.
[02:36:40.280 --> 02:36:42.280]  Вот.
[02:36:42.280 --> 02:36:44.280]  На самом деле вот так получается.
[02:36:48.280 --> 02:36:50.280]  Ну, на самом деле, скажем так,
[02:36:50.280 --> 02:36:52.280]  да, очень большие,
[02:36:54.280 --> 02:36:56.280]  то есть, на самом деле очень большие желающие
[02:36:58.280 --> 02:37:00.280]  могут на самом деле
[02:37:00.280 --> 02:37:02.280]  попробовать проделать вот эту
[02:37:02.280 --> 02:37:04.280]  махинацию на самом деле за
[02:37:04.280 --> 02:37:06.280]  отн.
[02:37:06.280 --> 02:37:08.280]  Ну, вам, возможно,
[02:37:08.280 --> 02:37:10.280]  придется вот эти вот операции
[02:37:10.280 --> 02:37:12.280]  просто прибавлять единичку к концу
[02:37:12.280 --> 02:37:14.280]  прям столбиком.
[02:37:14.280 --> 02:37:16.280]  Но заметьте,
[02:37:16.280 --> 02:37:18.280]  вот представьте себе, что вы прибегаетесь
[02:37:18.280 --> 02:37:20.280]  по числам от нуля до пятнадцати,
[02:37:20.280 --> 02:37:22.280]  ну, там или от нуля до нм,
[02:37:22.280 --> 02:37:24.280]  и к каждому числу прибавляете прям столбик
[02:37:24.280 --> 02:37:26.280]  единичку.
[02:37:26.280 --> 02:37:28.280]  Да, суммарно
[02:37:28.280 --> 02:37:30.280]  это будет отн. Почему?
[02:37:30.280 --> 02:37:32.280]  Потому что вы в половине случаев
[02:37:32.280 --> 02:37:34.280]  будете делать одно действие.
[02:37:34.280 --> 02:37:36.280]  То есть, сколько у вас там получится?
[02:37:36.280 --> 02:37:38.280]  Там n пополам раз у вас получится
[02:37:38.280 --> 02:37:40.280]  единица.
[02:37:40.280 --> 02:37:42.280]  Значит, плюс
[02:37:44.280 --> 02:37:46.280]  умножить на два, плюс n делить на восемь.
[02:37:46.280 --> 02:37:48.280]  То есть, мы уже вот этот ряд вычисляли
[02:37:48.280 --> 02:37:50.280]  и понимали, что
[02:37:50.280 --> 02:37:52.280]  это на самом деле не происходит
[02:37:52.280 --> 02:37:54.280]  n на константу.
[02:37:54.280 --> 02:37:56.280]  То есть, в данном случае
[02:37:56.280 --> 02:37:58.280]  можно это даже прям пощупать.
[02:37:58.280 --> 02:38:00.280]  Потому что на самом деле
[02:38:00.280 --> 02:38:02.280]  мы просто говорим, можно сказать, что
[02:38:02.280 --> 02:38:04.280]  первым битом вы работаете n раз,
[02:38:04.280 --> 02:38:06.280]  со вторым битом вы работаете
[02:38:06.280 --> 02:38:08.280]  n пополам раз,
[02:38:08.280 --> 02:38:10.280]  там с третьим битом вы работаете
[02:38:10.280 --> 02:38:12.280]  n делить на четыре раз, ну и так далее.
[02:38:12.280 --> 02:38:14.280]  То есть, поэтому суммарно
[02:38:14.280 --> 02:38:16.280]  вы там изменяете там 2n бит.
[02:38:16.280 --> 02:38:18.280]  Поэтому на самом деле
[02:38:18.280 --> 02:38:20.280]  рев можно предпочитать даже
[02:38:20.280 --> 02:38:22.280]  за о от н.
[02:38:22.280 --> 02:38:24.280]  Ну, конечно, от n логн
[02:38:24.280 --> 02:38:26.280]  мы от этого не избавляемся,
[02:38:26.280 --> 02:38:28.280]  но тогда получается, что вот этот вот блок
[02:38:28.280 --> 02:38:30.280]  начинает быть максимально
[02:38:30.280 --> 02:38:32.280]  важным для нас.
[02:38:34.280 --> 02:38:36.280]  Мне об этом неизвестно.
[02:38:38.280 --> 02:38:40.280]  Ну, обычно тут не заморачиваются
[02:38:40.280 --> 02:38:42.280]  и вот пишут прям буквально вот так,
[02:38:42.280 --> 02:38:44.280]  где...
[02:38:44.280 --> 02:38:46.280]  Нет, просто вы сами... Нет, я тут имею в виду,
[02:38:46.280 --> 02:38:48.280]  что функцию рев вы пишете сами,
[02:38:48.280 --> 02:38:50.280]  и вы ее пишете прям в тупую,
[02:38:50.280 --> 02:38:52.280]  прям вайликом.
[02:38:54.280 --> 02:38:56.280]  Ну, типа, все равно n логн называется
[02:38:56.280 --> 02:38:58.280]  глобально не будет.
[02:38:58.280 --> 02:39:00.280]  Так что этот n логн будет, конечно,
[02:39:00.280 --> 02:39:02.280]  очень быстрым по сравнению с вот этим
[02:39:02.280 --> 02:39:04.280]  n логном.
[02:39:04.280 --> 02:39:06.280]  Пока это не n логн, пока n, но давайте
[02:39:06.280 --> 02:39:08.280]  теперь смотреть, что же у нас тут
[02:39:08.280 --> 02:39:10.280]  без рекульсии появится.
[02:39:10.280 --> 02:39:12.280]  Значит, еще раз.
[02:39:12.280 --> 02:39:14.280]  Значит, что же это за такое?
[02:39:14.280 --> 02:39:16.280]  Ну, значит, теперь мы
[02:39:16.280 --> 02:39:18.280]  будем переходить по уровням.
[02:39:20.280 --> 02:39:22.280]  Ну, у нас уровни, значит...
[02:39:22.280 --> 02:39:24.280]  То есть, нам теперь нужно пройти снизу вверх.
[02:39:24.280 --> 02:39:26.280]  Ой, спокойно.
[02:39:26.280 --> 02:39:28.280]  Значит, тут перейти про l равно 2,
[02:39:28.280 --> 02:39:30.280]  4, 8 и так далее до n,
[02:39:30.280 --> 02:39:32.280]  и тут пробежаться по всем массивам длины l,
[02:39:32.280 --> 02:39:34.280]  и проделать
[02:39:34.280 --> 02:39:36.280]  эти слияния, правда?
[02:39:36.280 --> 02:39:38.280]  Значит, поехали.
[02:39:38.280 --> 02:39:40.280]  Значит, то есть, работать будет так тогда.
[02:39:40.280 --> 02:39:42.280]  Поехали. Значит, for
[02:39:42.280 --> 02:39:44.280]  теперь int l
[02:39:44.280 --> 02:39:46.280]  можно сказать равно 2.
[02:39:46.280 --> 02:39:48.280]  Значит, l
[02:39:48.280 --> 02:39:50.280]  меньше либо равно
[02:39:50.280 --> 02:39:52.280]  n
[02:39:52.280 --> 02:39:54.280]  l умножить равно 2.
[02:39:54.280 --> 02:39:56.280]  Ну, понятно, вы тут, конечно, любители
[02:39:56.280 --> 02:39:58.280]  там совсем битовых оптимизаций могут написать
[02:39:58.280 --> 02:40:00.280]  x, y, z равно 1, естественно.
[02:40:00.280 --> 02:40:02.280]  Вот.
[02:40:02.280 --> 02:40:04.280]  Но я подозреваю, правда, что оптимизатор
[02:40:04.280 --> 02:40:06.280]  это за вас делает.
[02:40:06.280 --> 02:40:08.280]  Да, ну вот, так же, конечно.
[02:40:08.280 --> 02:40:10.280]  Так вот. Значит, поехали.
[02:40:10.280 --> 02:40:12.280]  Ну, начнем
[02:40:12.280 --> 02:40:14.280]  с того, что нам бы не помешало вычислить
[02:40:14.280 --> 02:40:16.280]  w, l.
[02:40:16.280 --> 02:40:18.280]  То есть, потому что нам эти слияния надо делать
[02:40:18.280 --> 02:40:20.280]  не по w, n вот этому, а по
[02:40:20.280 --> 02:40:22.280]  w, l.
[02:40:22.280 --> 02:40:24.280]  Ну, который, так сказать,
[02:40:24.280 --> 02:40:26.280]  ну, у которого w
[02:40:26.280 --> 02:40:28.280]  должно быть в степени l равно 1,
[02:40:28.280 --> 02:40:30.280]  а не в степени n, правда?
[02:40:30.280 --> 02:40:32.280]  Ну, сделать это достаточно просто.
[02:40:32.280 --> 02:40:34.280]  То есть, пишем, значит,
[02:40:34.280 --> 02:40:36.280]  объявляем себе локально
[02:40:36.280 --> 02:40:38.280]  t w, l
[02:40:38.280 --> 02:40:40.280]  равно w, n
[02:40:40.280 --> 02:40:42.280]  и, действительно, for
[02:40:42.280 --> 02:40:44.280]  int там, допустим,
[02:40:44.280 --> 02:40:46.280]  там, допустим, n, n
[02:40:46.280 --> 02:40:48.280]  равно n, там, n,
[02:40:48.280 --> 02:40:50.280]  n, n больше l, n, n
[02:40:50.280 --> 02:40:52.280]  там, n, n
[02:40:52.280 --> 02:40:54.280]  boom равно 2
[02:40:56.280 --> 02:40:58.280]  w, l умножить равно
[02:40:58.280 --> 02:41:00.280]  w, l.
[02:41:02.280 --> 02:41:04.280]  Понятно, откуда я это взял?
[02:41:10.280 --> 02:41:12.280]  Ну, как вы смотрите, вот на этом уровне у нас
[02:41:12.280 --> 02:41:14.280]  в качестве w выступает число w, n.
[02:41:14.280 --> 02:41:16.280]  На этом w, n в квадрате.
[02:41:16.280 --> 02:41:18.280]  Следует, на этом
[02:41:18.280 --> 02:41:20.280]  w, n в четвертом. Тут w, n в восьмом,
[02:41:20.280 --> 02:41:22.280]  ну и так далее.
[02:41:22.280 --> 02:41:24.280]  Поэтому, видите, я просто, типа, опускаюсь
[02:41:24.280 --> 02:41:26.280]  с уровня n до уровня l и возвожу
[02:41:26.280 --> 02:41:28.280]  число в квадрат.
[02:41:30.280 --> 02:41:32.280]  Спокойно.
[02:41:32.280 --> 02:41:34.280]  Ой, Господи.
[02:41:34.280 --> 02:41:36.280]  Что это называется? Знаете, как мне вчера
[02:41:36.280 --> 02:41:38.280]  не везло?
[02:41:38.280 --> 02:41:40.280]  Ой, собственно, мясо.
[02:41:40.280 --> 02:41:42.280]  Ну, собственно, а, ну, часть из вас даже были свидетелями
[02:41:42.280 --> 02:41:44.280]  отчасти.
[02:41:44.280 --> 02:41:46.280]  Вот. Ну, те, кто на тренировку пришел.
[02:41:46.280 --> 02:41:48.280]  Вот.
[02:41:48.280 --> 02:41:50.280]  Значит.
[02:41:50.280 --> 02:41:52.280]  Идем дальше.
[02:41:52.280 --> 02:41:54.280]  Что у нас тут происходит?
[02:41:54.280 --> 02:41:56.280]  Ну, а значит, теперь.
[02:41:56.280 --> 02:41:58.280]  Значит, пробегаемся по всем этим
[02:41:58.280 --> 02:42:00.280]  массивам.
[02:42:00.280 --> 02:42:02.280]  Значит.
[02:42:02.280 --> 02:42:04.280]  Значит, пишем, значит,
[02:42:04.280 --> 02:42:06.280]  for, говорим мы.
[02:42:06.280 --> 02:42:08.280]  Int, значит,
[02:42:08.280 --> 02:42:10.280]  где этот массив начинается?
[02:42:10.280 --> 02:42:12.280]  start, он начинается с нуля.
[02:42:12.280 --> 02:42:14.280]  Там start должен быть меньше n.
[02:42:14.280 --> 02:42:16.280]  Start
[02:42:16.280 --> 02:42:18.280]  плюс равно,
[02:42:18.280 --> 02:42:20.280]  соответственно, l.
[02:42:20.280 --> 02:42:22.280]  И вот внутри
[02:42:22.280 --> 02:42:24.280]  мы работаем с массивом,
[02:42:24.280 --> 02:42:26.280]  начиная с st, до
[02:42:26.280 --> 02:42:28.280]  st плюс l не
[02:42:28.280 --> 02:42:30.280]  включительно.
[02:42:30.280 --> 02:42:32.280]  Вот полуинтервал. Видите, да?
[02:42:34.280 --> 02:42:36.280]  Так. И что у нас тут получается?
[02:42:38.280 --> 02:42:40.280]  Так.
[02:42:40.280 --> 02:42:42.280]  Ой, а можно это вот это вот выделить
[02:42:42.280 --> 02:42:44.280]  и вот сдвинуть вот так вот, да?
[02:42:44.280 --> 02:42:46.280]  Так было бы хорошо.
[02:42:46.280 --> 02:42:48.280]  Но увы.
[02:42:48.280 --> 02:42:50.280]  Значит, ладно, давайте.
[02:42:50.280 --> 02:42:52.280]  Значит, смотрите,
[02:42:52.280 --> 02:42:54.280]  что у нас тут будет получаться.
[02:42:54.280 --> 02:42:56.280]  Во.
[02:42:56.280 --> 02:42:58.280]  Значит,
[02:42:58.280 --> 02:43:00.280]  тут будет получаться примерно следующее.
[02:43:00.280 --> 02:43:02.280]  Значит.
[02:43:02.280 --> 02:43:04.280]  Ну, внутри себя, да, придется, конечно,
[02:43:04.280 --> 02:43:06.280]  пока ввести, по камере, пока так.
[02:43:06.280 --> 02:43:08.280]  По камере, давайте, вот, аккуратно надо вносить
[02:43:08.280 --> 02:43:10.280]  изменения в коде, то есть не все сразу, а так
[02:43:10.280 --> 02:43:12.280]  по чуть-чуть. Значит, поэтому
[02:43:12.280 --> 02:43:14.280]  deg, как мы пишем,
[02:43:14.280 --> 02:43:16.280]  degVl у нас равно 1.
[02:43:18.280 --> 02:43:20.280]  Ну, и дальше мы пишем
[02:43:20.280 --> 02:43:22.280]  fort, соответственно, int
[02:43:22.280 --> 02:43:24.280]  j равно 0,
[02:43:24.280 --> 02:43:26.280]  j меньше, l
[02:43:26.280 --> 02:43:28.280]  плюс, плюс j.
[02:43:28.280 --> 02:43:30.280]  Пишем нашу эту вот любимую
[02:43:30.280 --> 02:43:32.280]  классику, да?
[02:43:32.280 --> 02:43:34.280]  tu равно a,
[02:43:34.280 --> 02:43:36.280]  на этот раз не j, а st
[02:43:36.280 --> 02:43:38.280]  плюс j, обратите внимание.
[02:43:38.280 --> 02:43:40.280]  Значит, t, v,
[02:43:40.280 --> 02:43:42.280]  что?
[02:43:42.280 --> 02:43:44.280]  Чего, чего, чего?
[02:43:44.280 --> 02:43:46.280]  Все хорошо.
[02:43:46.280 --> 02:43:48.280]  Это хорошо.
[02:43:50.280 --> 02:43:52.280]  Так, значит, равно
[02:43:52.280 --> 02:43:54.280]  u плюс,
[02:43:54.280 --> 02:43:56.280]  значит,
[02:43:56.280 --> 02:43:58.280]  degVl умножить
[02:43:58.280 --> 02:44:00.280]  на v. И, конечно,
[02:44:00.280 --> 02:44:02.280]  st плюс
[02:44:02.280 --> 02:44:04.280]  j плюс
[02:44:04.280 --> 02:44:06.280]  l пополам
[02:44:06.280 --> 02:44:08.280]  но u минус
[02:44:08.280 --> 02:44:10.280]  degVl умножить
[02:44:10.280 --> 02:44:12.280]  на v.
[02:44:12.280 --> 02:44:14.280]  Так, ну и, конечно, degVl
[02:44:14.280 --> 02:44:16.280]  надо домножить на vl.
[02:44:16.280 --> 02:44:18.280]  Пока вроде тоже нормально.
[02:44:18.280 --> 02:44:20.280]  Оп.
[02:44:20.280 --> 02:44:22.280]  Так, ну, что там, ой, сколько закрывать там?
[02:44:22.280 --> 02:44:24.280]  Оп, оп, оп.
[02:44:24.280 --> 02:44:26.280]  Так, выйдет вот так. Этот fort закрыли,
[02:44:26.280 --> 02:44:28.280]  этот fort закрыли, этот fort закрыли.
[02:44:32.280 --> 02:44:34.280]  Вот.
[02:44:34.280 --> 02:44:36.280]  В таких случаях, тадам!
[02:44:38.280 --> 02:44:40.280]  Вот.
[02:44:40.280 --> 02:44:42.280]  Такая вот магия.
[02:44:50.280 --> 02:44:52.280]  Значит, что же у нас такое
[02:44:52.280 --> 02:44:54.280]  теперь?
[02:44:56.280 --> 02:44:58.280]  Что же у нас такое?
[02:44:58.280 --> 02:45:00.280]  Получилась теперь у нас
[02:45:00.280 --> 02:45:02.280]  такая нерекурсивная версия,
[02:45:02.280 --> 02:45:04.280]  но кода в ней, в общем-то, даже
[02:45:04.280 --> 02:45:06.280]  не стала, по-моему, сильно
[02:45:06.280 --> 02:45:08.280]  больше, чем тут.
[02:45:08.280 --> 02:45:10.280]  Ну, на функцию рев где-то, правда?
[02:45:12.280 --> 02:45:14.280]  Но, оказывается, и это не предел
[02:45:14.280 --> 02:45:16.280]  оптимизации.
[02:45:16.280 --> 02:45:18.280]  Ну, потому что
[02:45:18.280 --> 02:45:20.280]  как еще можно это
[02:45:20.280 --> 02:45:22.280]  неосимпатически, конечно, оптимизировать?
[02:45:22.280 --> 02:45:24.280]  Ну, кроме того, что эту штуку считать
[02:45:24.280 --> 02:45:26.280]  за o от n, а не n лога.
[02:45:28.280 --> 02:45:30.280]  Ну, на самом деле, мы понимаем, что
[02:45:30.280 --> 02:45:32.280]  вот эта вот часть,
[02:45:32.280 --> 02:45:34.280]  вот эта вот часть,
[02:45:34.280 --> 02:45:36.280]  она, конечно, она нам
[02:45:36.280 --> 02:45:38.280]  просто откровенно
[02:45:38.280 --> 02:45:40.280]  самая жирная,
[02:45:40.280 --> 02:45:42.280]  поэтому константу, прежде всего,
[02:45:42.280 --> 02:45:44.280]  надо оптимизировать, собственно, именно в ней.
[02:45:44.280 --> 02:45:46.280]  Вообще такой принцип оптимизации
[02:45:46.280 --> 02:45:48.280]  несимпатической, что в первую очередь
[02:45:48.280 --> 02:45:50.280]  надо посмотреть на узкие места,
[02:45:50.280 --> 02:45:52.280]  то есть части кода, которые работают больше всего.
[02:45:54.280 --> 02:45:56.280]  Вот больше всего, раз
[02:45:56.280 --> 02:45:58.280]  у нас, на самом деле, что выполняется?
[02:45:58.280 --> 02:46:00.280]  У нас больше всего выполняются вот, собственно,
[02:46:00.280 --> 02:46:02.280]  вот эти вот пять строчек, правда?
[02:46:04.280 --> 02:46:06.280]  Поэтому как бы хочется
[02:46:06.280 --> 02:46:08.280]  пооптимизировать именно их.
[02:46:08.280 --> 02:46:10.280]  Ну, что здесь самая жирная оптимизация,
[02:46:10.280 --> 02:46:12.280]  самая жирная операция в них,
[02:46:12.280 --> 02:46:14.280]  это, конечно, умножение.
[02:46:14.280 --> 02:46:16.280]  Их три штуки.
[02:46:16.280 --> 02:46:18.280]  Но, как вы уже видите,
[02:46:18.280 --> 02:46:20.280]  тут есть напрашивающийся способ,
[02:46:20.280 --> 02:46:22.280]  как эти три умножения
[02:46:22.280 --> 02:46:24.280]  превратить в два, правда?
[02:46:24.280 --> 02:46:26.280]  То есть можно просто вот эту штуку
[02:46:26.280 --> 02:46:28.280]  то есть на самом деле
[02:46:28.280 --> 02:46:30.280]  можно удобно сделать так, то есть
[02:46:30.280 --> 02:46:32.280]  в на самом деле надо сделать не просто
[02:46:32.280 --> 02:46:34.280]  эту штуку,
[02:46:34.280 --> 02:46:36.280]  а сказать, что она еще
[02:46:36.280 --> 02:46:38.280]  равна умножить
[02:46:38.280 --> 02:46:40.280]  на degv.
[02:46:42.280 --> 02:46:44.280]  Тогда у нас тут получается, я пока
[02:46:44.280 --> 02:46:46.280]  за тряпочкой скажу, шлеп-шлеп.
[02:46:46.280 --> 02:46:48.280]  А, вот она.
[02:46:50.280 --> 02:46:52.280]  То есть просто шлеп-шлеп,
[02:46:52.280 --> 02:46:54.280]  и в результате у нас остается у плюсовая
[02:46:54.280 --> 02:46:56.280]  и у минусовая.
[02:46:56.280 --> 02:46:58.280]  Да, кстати, вот
[02:46:58.280 --> 02:47:00.280]  такая вот приятность.
[02:47:00.280 --> 02:47:02.280]  То есть, в принципе, это уже одна из
[02:47:02.280 --> 02:47:04.280]  серьезнейших оптимизаций, на самом деле,
[02:47:04.280 --> 02:47:06.280]  получилась, потому что умножение
[02:47:06.280 --> 02:47:08.280]  все-таки операция жирная.
[02:47:08.280 --> 02:47:10.280]  И мы их только что тут в нужном...
[02:47:10.280 --> 02:47:12.280]  Вообще, если говорить о количестве умножений
[02:47:12.280 --> 02:47:14.280]  комплексных ну или каких там у вас чисел,
[02:47:14.280 --> 02:47:16.280]  то мы их только что сократили
[02:47:16.280 --> 02:47:18.280]  практически в полтора раза.
[02:47:18.280 --> 02:47:20.280]  Ну, есть вот это вот, но это мелочь.
[02:47:20.280 --> 02:47:22.280]  Вот.
[02:47:24.280 --> 02:47:26.280]  Значит, ну, что еще
[02:47:26.280 --> 02:47:28.280]  тут можно было бы сократить?
[02:47:28.280 --> 02:47:30.280]  Ну, по-хорошему говоря,
[02:47:30.280 --> 02:47:32.280]  да, тут, конечно, можно понадеяться на оптимизатор,
[02:47:32.280 --> 02:47:34.280]  но вообще говоря,
[02:47:34.280 --> 02:47:36.280]  по умолчанию вот эта штука вычисляется
[02:47:36.280 --> 02:47:38.280]  долго.
[02:47:38.280 --> 02:47:40.280]  Ну, по-хорошему давайте вспомним.
[02:47:40.280 --> 02:47:42.280]  Как вообще вот, например, а вот от этой штуки
[02:47:42.280 --> 02:47:44.280]  будет вообще вычисляться?
[02:47:44.280 --> 02:47:46.280]  Как он будет понимать, где ему искать?
[02:47:46.280 --> 02:47:48.280]  Ну да.
[02:47:48.280 --> 02:47:50.280]  Ну да, то есть это говорит, что он просто
[02:47:50.280 --> 02:47:52.280]  возьмет адрес начала массива А,
[02:47:52.280 --> 02:47:54.280]  то есть как указателя.
[02:47:54.280 --> 02:47:56.280]  Да, ну вот.
[02:47:56.280 --> 02:47:58.280]  Нет, зачем он?
[02:47:58.280 --> 02:48:00.280]  Да, он просто там.
[02:48:00.280 --> 02:48:02.280]  Ну, по сути, самое главное для нас, что он просто
[02:48:02.280 --> 02:48:04.280]  к указателю придется прибавлять вот это вот все.
[02:48:04.280 --> 02:48:06.280]  То есть вычислить вот это вот все,
[02:48:06.280 --> 02:48:08.280]  потом прибавить еще к указателю.
[02:48:08.280 --> 02:48:10.280]  Но по большому счету
[02:48:10.280 --> 02:48:12.280]  теперь заметим...
[02:48:12.280 --> 02:48:14.280]  Вот сейчас я превращу этот код в
[02:48:14.280 --> 02:48:16.280]  совсем магию,
[02:48:16.280 --> 02:48:18.280]  вот поэтому я все последовательно
[02:48:18.280 --> 02:48:20.280]  надо делать.
[02:48:20.280 --> 02:48:22.280]  Но заметим на самом деле следующее.
[02:48:22.280 --> 02:48:24.280]  Вот помните, мы же говорили о том, что нам
[02:48:24.280 --> 02:48:26.280]  последовательный доступ к памяти, он крутой,
[02:48:26.280 --> 02:48:28.280]  правда?
[02:48:28.280 --> 02:48:30.280]  Вот, кстати, да, еще одно, почему этот код крутой работает,
[02:48:30.280 --> 02:48:32.280]  потому что, видите, он тут
[02:48:32.280 --> 02:48:34.280]  на самом деле бегает по массивам
[02:48:34.280 --> 02:48:36.280]  последовательно, обратите внимание.
[02:48:36.280 --> 02:48:38.280]  То есть когда у вас есть два массива, которые он сливает,
[02:48:38.280 --> 02:48:40.280]  то есть он как бы вот бежит
[02:48:40.280 --> 02:48:42.280]  фактически вот так вот двумя указателями,
[02:48:42.280 --> 02:48:44.280]  и они двигаются одновременно,
[02:48:44.280 --> 02:48:46.280]  видите, да?
[02:48:46.280 --> 02:48:48.280]  Вот.
[02:48:48.280 --> 02:48:50.280]  Поэтому
[02:48:50.280 --> 02:48:52.280]  на самом деле, мы вместо
[02:48:52.280 --> 02:48:54.280]  того, чтобы вот тут делать вот эти прибавления,
[02:48:54.280 --> 02:48:56.280]  мы могли бы хранить два указателя
[02:48:56.280 --> 02:48:58.280]  и просто им делать плюс-плюсики,
[02:48:58.280 --> 02:49:00.280]  правда?
[02:49:00.280 --> 02:49:02.280]  То есть поэтому, значит, на самом деле,
[02:49:02.280 --> 02:49:04.280]  значит, теперь...
[02:49:04.280 --> 02:49:06.280]  Что?
[02:49:06.280 --> 02:49:08.280]  Главная оптимизация.
[02:49:08.280 --> 02:49:10.280]  Ой, да, да, да.
[02:49:10.280 --> 02:49:12.280]  Вот.
[02:49:12.280 --> 02:49:14.280]  Особенно для, когда это указатель,
[02:49:14.280 --> 02:49:16.280]  это вообще, значит, в результате получается...
[02:49:18.280 --> 02:49:20.280]  Кто кокнет?
[02:49:20.280 --> 02:49:22.280]  О, Господи.
[02:49:22.280 --> 02:49:24.280]  Господи.
[02:49:24.280 --> 02:49:26.280]  Мало нам Андрея Михайловича,
[02:49:26.280 --> 02:49:28.280]  у нас еще и компилятор кокает.
[02:49:30.280 --> 02:49:32.280]  Значит, смотрите.
[02:49:32.280 --> 02:49:34.280]  Так что теперь
[02:49:34.280 --> 02:49:36.280]  смотрим, получается так.
[02:49:36.280 --> 02:49:38.280]  Поехали. 4.
[02:49:38.280 --> 02:49:40.280]  Нет.
[02:49:40.280 --> 02:49:42.280]  Потому что
[02:49:42.280 --> 02:49:44.280]  мы вместо, значит,
[02:49:44.280 --> 02:49:46.280]  вводим указатели.
[02:49:46.280 --> 02:49:48.280]  Ну, я их под лирией назову.
[02:49:48.280 --> 02:49:50.280]  Укабигин.
[02:49:50.280 --> 02:49:52.280]  Ну, от русского слова ука, естественно,
[02:49:52.280 --> 02:49:54.280]  они тоже.
[02:49:54.280 --> 02:49:56.280]  Украина, это уа.
[02:49:56.280 --> 02:49:58.280]  Ук, это United Kingdom, вообще,
[02:49:58.280 --> 02:50:00.280]  по этой логике. Не путать.
[02:50:00.280 --> 02:50:02.280]  Вот.
[02:50:04.280 --> 02:50:06.280]  Ну, вот так. Поэтому ука это указатель.
[02:50:08.280 --> 02:50:10.280]  Вот.
[02:50:10.280 --> 02:50:12.280]  Так, значит, укабигин у нас будет
[02:50:12.280 --> 02:50:14.280]  так и равно. А плюс, соответственно,
[02:50:14.280 --> 02:50:16.280]  СТ.
[02:50:16.280 --> 02:50:18.280]  Значит, Т звездочка
[02:50:18.280 --> 02:50:20.280]  укамид.
[02:50:20.280 --> 02:50:22.280]  Хотя по барабану, на самом деле.
[02:50:22.280 --> 02:50:24.280]  Нет. Ну, хотя...
[02:50:24.280 --> 02:50:26.280]  Ну, давайте так.
[02:50:26.280 --> 02:50:28.280]  Я вот просто до красоты напишу.
[02:50:28.280 --> 02:50:30.280]  Понятно, что я сейчас напишу кучу лишнего, но
[02:50:30.280 --> 02:50:32.280]  укамид.
[02:50:32.280 --> 02:50:34.280]  Да. Прямо это.
[02:50:34.280 --> 02:50:36.280]  United Kingdom.
[02:50:36.280 --> 02:50:38.280]  Так. Плюс СТ пополам.
[02:50:38.280 --> 02:50:40.280]  И, конечно,
[02:50:40.280 --> 02:50:42.280]  обязательно ука
[02:50:42.280 --> 02:50:44.280]  Ant. А плюс
[02:50:44.280 --> 02:50:46.280]  СТ плюс СТ.
[02:50:54.280 --> 02:50:56.280]  А это не Инт. А это
[02:50:56.280 --> 02:50:58.280]  указатель.
[02:50:58.280 --> 02:51:00.280]  Так что, не-не-не. Тут это...
[02:51:00.280 --> 02:51:02.280]  Как бы редкий случай, но тут у меня
[02:51:02.280 --> 02:51:04.280]  все точно.
[02:51:06.280 --> 02:51:08.280]  Давайте, да.
[02:51:08.280 --> 02:51:10.280]  Так, Т звездочка
[02:51:10.280 --> 02:51:12.280]  L равно, значит, пишем
[02:51:12.280 --> 02:51:14.280]  укабигин.
[02:51:14.280 --> 02:51:16.280]  Вот, ну, я... Пусть у меня будут
[02:51:16.280 --> 02:51:18.280]  эти указатели L и R. Логично, да?
[02:51:18.280 --> 02:51:20.280]  Чего?
[02:51:22.280 --> 02:51:24.280]  Бе-е-е.
[02:51:24.280 --> 02:51:26.280]  Ук...
[02:51:26.280 --> 02:51:28.280]  Хорошо.
[02:51:28.280 --> 02:51:30.280]  Значит, укл
[02:51:30.280 --> 02:51:32.280]  значит, укр
[02:51:32.280 --> 02:51:34.280]  равно укамид.
[02:51:36.280 --> 02:51:38.280]  А теперь
[02:51:38.280 --> 02:51:40.280]  говорим.
[02:51:40.280 --> 02:51:42.280]  Значит, пишем,
[02:51:42.280 --> 02:51:44.280]  что for, я даже
[02:51:44.280 --> 02:51:46.280]  так не пишу, for
[02:51:46.280 --> 02:51:48.280]  работаем мы пока
[02:51:48.280 --> 02:51:50.280]  укр даже не меньше, не
[02:51:50.280 --> 02:51:52.280]  равно укайент.
[02:51:54.280 --> 02:51:56.280]  И тут пишем, значит, плюс-плюс
[02:51:56.280 --> 02:51:58.280]  укл, плюс-плюс
[02:51:58.280 --> 02:52:00.280]  укр.
[02:52:00.280 --> 02:52:02.280]  Вот.
[02:52:06.280 --> 02:52:08.280]  Первое и не меньше, второе
[02:52:08.280 --> 02:52:10.280]  и все.
[02:52:10.280 --> 02:52:12.280]  Чего два раза больше?
[02:52:12.280 --> 02:52:14.280]  Нет, ну, да, на самом деле, да,
[02:52:14.280 --> 02:52:16.280]  заметим, что по большому счету, да, вот эти
[02:52:16.280 --> 02:52:18.280]  можно было не определять, а прям в укай или
[02:52:18.280 --> 02:52:20.280]  укалек прописать, и тут только укайент.
[02:52:22.280 --> 02:52:24.280]  Значит, теперь, значит,
[02:52:24.280 --> 02:52:26.280]  поехали. Теперь, значит, пишем
[02:52:26.280 --> 02:52:28.280]  T
[02:52:28.280 --> 02:52:30.280]  значит, U, значит,
[02:52:30.280 --> 02:52:32.280]  у нас равно звездочка
[02:52:32.280 --> 02:52:34.280]  укр.
[02:52:34.280 --> 02:52:36.280]  Значит, ну, давайте
[02:52:36.280 --> 02:52:38.280]  тут так и быть. Ну, вот.
[02:52:38.280 --> 02:52:40.280]  Значит, atv
[02:52:40.280 --> 02:52:42.280]  равно звездочка,
[02:52:42.280 --> 02:52:44.280]  вот смотрите, тут магия, укр
[02:52:44.280 --> 02:52:46.280]  умножить, тоже звездочка, да.
[02:52:46.280 --> 02:52:48.280]  Видите, да, у меня тут
[02:52:48.280 --> 02:52:50.280]  звездочка большая моя, а тут
[02:52:50.280 --> 02:52:52.280]  сейчас это будет одна и та же звездочка, да.
[02:52:52.280 --> 02:52:54.280]  Значит,
[02:52:54.280 --> 02:52:56.280]  так, derwl
[02:52:56.280 --> 02:52:58.280]  у меня, да. Ну, поэтому я тут
[02:52:58.280 --> 02:53:00.280]  обычно скобочки пишу, чтоб красиво было.
[02:53:00.280 --> 02:53:02.280]  Значит, теперь
[02:53:02.280 --> 02:53:04.280]  звездочка укл
[02:53:04.280 --> 02:53:06.280]  равно у плюс в,
[02:53:06.280 --> 02:53:08.280]  звездочка
[02:53:08.280 --> 02:53:10.280]  укр равно
[02:53:10.280 --> 02:53:12.280]  у минус в,
[02:53:12.280 --> 02:53:14.280]  ну и, соответственно, ну, куда ж
[02:53:14.280 --> 02:53:16.280]  без этого, derwl умножить
[02:53:16.280 --> 02:53:18.280]  равно вл.
[02:53:18.280 --> 02:53:20.280]  Вот.
[02:53:22.280 --> 02:53:24.280]  Вот превратилось совсем, конечно, в магию.
[02:53:24.280 --> 02:53:26.280]  То есть, если вам просто потом в конце
[02:53:26.280 --> 02:53:28.280]  показать, что там вот, ну, рассмотрим
[02:53:28.280 --> 02:53:30.280]  фурьер, он делается таким разделяем и властвуем. Как вы его
[02:53:30.280 --> 02:53:32.280]  написать? Ну, там можно, ну, очевидно,
[02:53:32.280 --> 02:53:34.280]  вот таким вот образом, да.
[02:53:38.280 --> 02:53:40.280]  Ну, тут какая-то вот такая вот.
[02:53:40.280 --> 02:53:42.280]  То есть, так слёт туда не поймёшь.
[02:53:42.280 --> 02:53:44.280]  Хотя это, ну, то есть, знаете,
[02:53:44.280 --> 02:53:46.280]  это если, как Шарлок Холмс говорил, ну, чё
[02:53:46.280 --> 02:53:48.280]  Ватсон, вы это, в
[02:53:48.280 --> 02:53:50.280]  южноафриканские ценные бумаги деньги вкладывать не
[02:53:50.280 --> 02:53:52.280]  собираетесь, да? А, что?
[02:53:52.280 --> 02:53:54.280]  Как вы это, откуда, с чего?
[02:53:54.280 --> 02:53:56.280]  Ну, очень просто, к чему, смотрите, по
[02:53:56.280 --> 02:53:58.280]  по
[02:53:58.280 --> 02:54:00.280]  картинке, между вашим большим и указательным
[02:54:00.280 --> 02:54:02.280]  пальцами, мне было это несложно заключить.
[02:54:02.280 --> 02:54:04.280]  Чё? А как они связаны?
[02:54:04.280 --> 02:54:06.280]  Вот, понимаете, да, вот я просто скрыл от
[02:54:06.280 --> 02:54:08.280]  вас всю цепочку, да?
[02:54:08.280 --> 02:54:10.280]  Вот, соответственно, поэтому вам кажется
[02:54:10.280 --> 02:54:12.280]  магия. На самом деле, связь есть и очень простая.
[02:54:12.280 --> 02:54:14.280]  Но там, связь какая-то уровня, что
[02:54:14.280 --> 02:54:16.280]  якобы, когда вчера вы пришёл, вы вчера
[02:54:16.280 --> 02:54:18.280]  играли, значит, она была начёрта мелом, да? Вы,
[02:54:18.280 --> 02:54:20.280]  я знаю, значит, вы играли на бильярде.
[02:54:20.280 --> 02:54:22.280]  На бильярде вы играете только с одним конкретным человеком,
[02:54:22.280 --> 02:54:24.280]  который месяц назад
[02:54:24.280 --> 02:54:26.280]  предлагал вам, собственно, в эти южноафриканские
[02:54:26.280 --> 02:54:28.280]  ценные бумаги вложиться.
[02:54:28.280 --> 02:54:30.280]  Только вот маленькая пр... Ну, вот, причём более того,
[02:54:30.280 --> 02:54:32.280]  ваша чековая книжка заперта
[02:54:32.280 --> 02:54:34.280]  в ящике моей тумбочки,
[02:54:34.280 --> 02:54:36.280]  вот, и ключа вы меня не попросили.
[02:54:36.280 --> 02:54:38.280]  Значит, вкладывать не собираетесь.
[02:54:38.280 --> 02:54:40.280]  Да, почему, конечно,
[02:54:40.280 --> 02:54:42.280]  чему чековая книжка Ватсона там лежит
[02:54:42.280 --> 02:54:44.280]  в ящике у Холмса остаётся загадкой, конечно.
[02:54:44.280 --> 02:54:46.280]  Ну,
[02:54:46.280 --> 02:54:48.280]  но как бы, другое дело,
[02:54:48.280 --> 02:54:50.280]  но как бы, я думаю, многие из вас догадывают,
[02:54:50.280 --> 02:54:52.280]  знают, что да, что это я ничего
[02:54:52.280 --> 02:54:54.280]  не придумал, там у Конан Дуэлли реально так написано.
[02:54:54.280 --> 02:54:56.280]  О, кстати, а кто этот рассказ читал?
[02:55:00.280 --> 02:55:02.280]  Хорошо.
[02:55:02.280 --> 02:55:04.280]  Нет, ну, просто интересно, мало ли.
[02:55:04.280 --> 02:55:06.280]  Когда-нибудь появится время, и тогда поговорим.
[02:55:06.280 --> 02:55:08.280]  Не, ну, при чём тут время,
[02:55:08.280 --> 02:55:10.280]  лично я обычно в классе в шестом-седьмом
[02:55:10.280 --> 02:55:12.280]  обычно, там, по-моему, такое читал, поэтому...
[02:55:12.280 --> 02:55:14.280]  Давайте корочество на него заставляем читать,
[02:55:14.280 --> 02:55:16.280]  то обычно читать видео не будем.
[02:55:16.280 --> 02:55:18.280]  Ну, как сказать.
[02:55:18.280 --> 02:55:20.280]  Ну, по ситуации. Так, ладно.
[02:55:20.280 --> 02:55:22.280]  Давайте корочество на Жене ещё дважды хотим.
[02:55:22.280 --> 02:55:24.280]  Ещё, а.
[02:55:24.280 --> 02:55:26.280]  Ну, смотрите, дальше уже сомнительно,
[02:55:26.280 --> 02:55:28.280]  потому что, конечно, вот эти умножения...
[02:55:28.280 --> 02:55:30.280]  Да, эти умножения
[02:55:30.280 --> 02:55:32.280]  легко убрать, потому что эти степени
[02:55:32.280 --> 02:55:34.280]  можно подсчитать, тем более, что синусами, косинусами
[02:55:34.280 --> 02:55:36.280]  может их действительно лучше подсчитать чуть по-другому,
[02:55:36.280 --> 02:55:38.280]  там, вычисляя синусы, косинусы чуть побольше.
[02:55:38.280 --> 02:55:40.280]  Вот.
[02:55:40.280 --> 02:55:42.280]  Ну, а, ну, как бы, ну, вот.
[02:55:42.280 --> 02:55:44.280]  Ну, как-то у меня возникало ощущение, что дальнейшие эти оптимизации,
[02:55:44.280 --> 02:55:46.280]  они уже там принципиального
[02:55:46.280 --> 02:55:48.280]  ускорения не дадут, на самом деле.
[02:55:48.280 --> 02:55:50.280]  Ну, вот.
[02:55:50.280 --> 02:55:52.280]  Поэтому там, то есть, хотя это действительно
[02:55:52.280 --> 02:55:54.280]  можно сделать, вот, можно попробовать,
[02:55:54.280 --> 02:55:56.280]  хотя тоже, как, как, вместо умножений
[02:55:56.280 --> 02:55:58.280]  там какие-то беготня по массиву будет.
[02:55:58.280 --> 02:56:00.280]  Есть какая-то сайт, типа, библиотека
[02:56:00.280 --> 02:56:02.280]  всех преднаписанных штук на писах.
[02:56:02.280 --> 02:56:04.280]  Буст.
[02:56:04.280 --> 02:56:06.280]  Она не буст называется, случайно.
[02:56:06.280 --> 02:56:08.280]  Библиотека, типа, просто сайт.
[02:56:08.280 --> 02:56:10.280]  Там есть, не знаю,
[02:56:10.280 --> 02:56:12.280]  продолжение на простое множество, очень быстро,
[02:56:12.280 --> 02:56:14.280]  это неважно, там есть МФП, которая, надеюсь,
[02:56:14.280 --> 02:56:16.280]  в шестой работает, типа, 003,
[02:56:16.280 --> 02:56:18.280]  может 005.
[02:56:18.280 --> 02:56:20.280]  А точно именно ФФТ
[02:56:20.280 --> 02:56:22.280]  или умножение?
[02:56:22.280 --> 02:56:24.280]  Нет, потому что я не знаю, потому что
[02:56:24.280 --> 02:56:26.280]  в мой сказоромане у меня вообще говорилось следующее,
[02:56:26.280 --> 02:56:28.280]  что вот есть какая-то супер библиотека,
[02:56:28.280 --> 02:56:30.280]  которая умеет умножать, действительно, там большие числа
[02:56:30.280 --> 02:56:32.280]  за вот столичко, вот
[02:56:32.280 --> 02:56:34.280]  там сопоставимые циферки.
[02:56:34.280 --> 02:56:36.280]  Но там он говорил, что я там лазил в код
[02:56:36.280 --> 02:56:38.280]  и там, ну, там не все ФФТ делает.
[02:56:38.280 --> 02:56:40.280]  Нет, там что-то какими-то адскими
[02:56:40.280 --> 02:56:42.280]  дефайнами, где-то ФФТ, где-то
[02:56:42.280 --> 02:56:44.280]  Карацуба, где-то втупую там, в общем,
[02:56:44.280 --> 02:56:46.280]  там шамань-шамань, в общем, там
[02:56:46.280 --> 02:56:48.280]  уминали не просто обеими ногами,
[02:56:48.280 --> 02:56:50.280]  а просто собрались, видимо,
[02:56:50.280 --> 02:56:52.280]  это 20 человек и просто всеми...
[02:56:52.280 --> 02:56:54.280]  Да, просто это всей
[02:56:54.280 --> 02:56:56.280]  толпой, на самом деле, это все
[02:56:56.280 --> 02:56:58.280]  упихивали в один тазик, да.
[02:56:58.280 --> 02:57:00.280]  То есть отдельная песня. Так что вот
[02:57:00.280 --> 02:57:02.280]  разные вещи, но, в принципе, вот уже для начала.
[02:57:02.280 --> 02:57:04.280]  Так, ну, в принципе, вот оно.
[02:57:04.280 --> 02:57:06.280]  Вот оно, наше любимое ФФТ.
[02:57:06.280 --> 02:57:08.280]  Ну, значит, парадокс заключается
[02:57:08.280 --> 02:57:10.280]  в том, что, да, у нас сейчас лекция заканчивается
[02:57:10.280 --> 02:57:12.280]  на хорошем логическом месте, потому что
[02:57:12.280 --> 02:57:14.280]  на самом деле сейчас нам... То есть мы будем
[02:57:14.280 --> 02:57:16.280]  в общем много изучать, скажем так,
[02:57:16.280 --> 02:57:18.280]  умножение многочленов
[02:57:18.280 --> 02:57:20.280]  и связанные с ним вещи.
[02:57:20.280 --> 02:57:22.280]  Но парадокс в том, что во многом мы теперь будем
[02:57:22.280 --> 02:57:24.280]  это использовать как черный ящик.
[02:57:24.280 --> 02:57:26.280]  То есть нам не потребуется знать, как конкретно
[02:57:26.280 --> 02:57:28.280]  вы за n-лог n перемножили многочлены.
[02:57:28.280 --> 02:57:30.280]  Ну, в какой-то момент нам
[02:57:30.280 --> 02:57:32.280]  это появится, потому что когда мы будем
[02:57:32.280 --> 02:57:34.280]  осуждать какое-нибудь многомерное преобразование
[02:57:34.280 --> 02:57:36.280]  ФФТ, тут, конечно, без этого никак.
[02:57:36.280 --> 02:57:38.280]  Хотя... А может, нам не удастся
[02:57:38.280 --> 02:57:40.280]  обойтись, правда?
[02:57:40.280 --> 02:57:42.280]  Хотя нет, нам все-таки потребуется, знаешь, что это такое,
[02:57:42.280 --> 02:57:44.280]  что это такое. Но, соответственно, продолжим.
[02:57:44.280 --> 02:57:46.280]  И, соответственно, я думаю, уже после перегрева.
