[00:00.000 --> 00:09.000]  Не, начнём мы с рандомизированного миноразреза.
[00:09.000 --> 00:18.000]  Миноразреза, в смысле, в неориентированном графе или с фиксированным стоком?
[00:18.000 --> 00:21.000]  Не, просто в неориентированном графе.
[00:21.000 --> 00:23.000]  Да, в неориентированном графе.
[00:23.000 --> 00:32.000]  В общем, для разминочки мы ещё скажем, что граф у нас невзвешенный.
[00:32.000 --> 00:42.000]  Я хочу разбить вершины на две не пустые доли, так, чтобы количество ребер пересекающих развес было как можно меньше.
[00:42.000 --> 00:47.000]  Так, ну я так понимаю, этот маркер мы выкидываем, ребра не ориентированы.
[00:47.000 --> 01:02.000]  Да, мы решали этот алгоритм Штормвагдера, там Штормвагдер умел это решать либо за куб, либо ММ плюс Н квадрат в ОКН, причём даже когда веса могли быть.
[01:02.000 --> 01:04.000]  У нас сейчас до 6 веса.
[01:04.000 --> 01:10.000]  Пока нет, хотя что-то у меня возникло ощущение, что решение, которое у нас сейчас будет, на самом деле от весов сильно ненавидно.
[01:10.000 --> 01:19.000]  Ну, там ладно, в конспекте указывается ещё какая-то там мистическая симптотика НМ лог Н квадрат поделить на М.
[01:19.000 --> 01:23.000]  Это лучшая симптотика этой задачи децерминированной.
[01:23.000 --> 01:26.000]  На момент написания конспекта.
[01:26.000 --> 01:29.000]  А там мало, что-то могло поменяться.
[01:29.000 --> 01:34.000]  Скажем, на финале, например, там была лекция современной алгоритмы поиска максимального потока.
[01:35.000 --> 01:43.000]  Ну, вот и реально там какой-то апгрейд, буквально новая статья 2020 года в архиве лежит, вот там приехала авторизма университета Ватерло.
[01:43.000 --> 01:47.000]  А сейчас там же лучше вроде НМ?
[01:47.000 --> 01:49.000]  Ну, децерминированной, да.
[01:49.000 --> 01:57.000]  Но, правда, там лучше они не придумали в этом плане, но зато вот вероятность, там огромное количество приближений, там чёрная макия какая-то и так далее.
[01:57.000 --> 01:59.000]  Ну, то есть, я не знаю.
[01:59.000 --> 02:07.000]  В этом смысле, лекция была полтора часа, но как бы там идеи, которые там были, они были в очень-очень-очень-очень таком зачадочном виде.
[02:07.000 --> 02:12.000]  Потому что, видимо, чтобы это изучать, это, видимо, нам это в следующем семестре будет отдельный курс.
[02:12.000 --> 02:18.000]  Как говорится, вероятно, там это называется университет Ватерло, и вероятностно горит на поисках потока.
[02:18.000 --> 02:22.000]  Просто спецкурс можно обалбасивать.
[02:22.000 --> 02:27.000]  Важно вопрос, а чем эта симптотика снизу лучше стать, та, которая сверху?
[02:27.000 --> 02:29.000]  Честно? Я не понял.
[02:29.000 --> 02:37.000]  Потому что, вот если m это, понятно, z от m то одинаково, если m от z от m квадрата то одинаково, а если между ними, то вроде хуже.
[02:37.000 --> 02:42.000]  Не вот, в общем, я тоже не понял, поэтому не заморачивайся.
[02:44.000 --> 02:47.000]  Значит, попробуем решать задачу быстрее.
[02:47.000 --> 03:01.000]  Значит, идея такая, пусть у нас в графе n вершин, m, допустим, значит, m ребер, а ответ равен, ну, допустим, k.
[03:01.000 --> 03:05.000]  Ну, мы не знаем ответа, но предположим, что он равен k, да?
[03:05.000 --> 03:07.000]  Опозначим его.
[03:07.000 --> 03:09.000]  Хорошо, смотрите.
[03:09.000 --> 03:13.000]  Значит, алгоритм каркера.
[03:13.000 --> 03:17.000]  Предлагает неожиданную штуку.
[03:17.000 --> 03:21.000]  Возьмем рандомное ребро.
[03:21.000 --> 03:27.000]  И скажем, что, о, я утверждаю, что это ребро в ответе не лежит.
[03:29.000 --> 03:36.000]  Мы в это свято верим и объявляем эти две вершины одной вершины, так и сжимаем.
[03:36.000 --> 03:39.000]  Повторяем операцию.
[03:42.000 --> 03:44.000]  Потом еще повторяем.
[03:44.000 --> 03:46.000]  Ну и так далее.
[03:46.000 --> 03:53.000]  Остается в конце две вершины, мы им говорим, что, вот, разгресс между ними, вот, сколько там ребр между ними есть, ну, кратный ребро есть, то это и есть ответ.
[03:55.000 --> 03:57.000]  Вот такая заява.
[03:57.000 --> 04:05.000]  Мы просто набираем любое ребро и говорим, что оно у нас не состоит в игре.
[04:06.000 --> 04:10.000]  Что, короче, сжимаем это ребро в вершину.
[04:10.000 --> 04:12.000]  Потому что мы заявляем, что это ребро в разгресс не пересекается.
[04:12.000 --> 04:19.000]  А когда мы стянули и выбираем наоборот, что на ребро, мы выбираем из изначальных или мы кратные ребра в одно?
[04:19.000 --> 04:21.000]  Нет, из изначальных.
[04:21.000 --> 04:23.000]  Кратные ребра никогда не превращаются в одно.
[04:23.000 --> 04:24.000]  Хорошо.
[04:24.000 --> 04:26.000]  Это для нас важно, потому что...
[04:26.000 --> 04:28.000]  Да, потому что это влияет на вероятность того, что...
[04:28.000 --> 04:30.000]  Ну вот, так что вот такая заява.
[04:30.000 --> 04:32.000]  А у нас где-то есть стопы и стопы?
[04:32.000 --> 04:34.000]  Нет, это не вариантирован гораздо.
[04:34.000 --> 04:36.000]  Это просто обычный неориентированный граф.
[04:36.000 --> 04:38.000]  Мы хотим разбить на две доли.
[04:38.000 --> 04:40.000]  Единственное ограничение, что они должны быть не пустые.
[04:40.000 --> 04:43.000]  Если было бы столько и столько, это значило бы наносить на поиску максимального потока.
[04:43.000 --> 04:45.000]  Ну да.
[04:45.000 --> 04:47.000]  А тут мы будем искать разрез.
[04:47.000 --> 04:49.000]  Вот будем искать разрез так.
[04:49.000 --> 04:52.000]  За какую септутику мы можем реализовать такой алгоритм?
[04:54.000 --> 04:56.000]  What yet?
[04:56.000 --> 04:58.000]  Ну, в смысле...
[04:58.000 --> 05:00.000]  На альфа.
[05:00.000 --> 05:02.000]  Нам СНМ нужен.
[05:02.000 --> 05:04.000]  А, СНМ.
[05:04.000 --> 05:06.000]  Ну, не обязательно.
[05:06.000 --> 05:08.000]  Ну что-нибудь такое.
[05:08.000 --> 05:10.000]  Мы берем совершенно ребро и хотим проверить,
[05:10.000 --> 05:12.000]  что оно уже объединяет две вершинки, которые еще разные.
[05:12.000 --> 05:14.000]  Ну да.
[05:14.000 --> 05:16.000]  Но на самом деле я утверждаю, что каждую фазу можно выполнить за ОАТМ.
[05:16.000 --> 05:18.000]  Ну, просто за ОАТМ можно выполнить.
[05:18.000 --> 05:20.000]  Каждую фазу, в смысле?
[05:20.000 --> 05:22.000]  Каждое сжатие и стягивание ребра можно за ОАТМ выполнить.
[05:22.000 --> 05:24.000]  За ОАТМ слить?
[05:24.000 --> 05:26.000]  Ну, потому что в тупую.
[05:26.000 --> 05:28.000]  Ну, во-первых, для каждой вершины у нас есть стипинг.
[05:28.000 --> 05:30.000]  В соответствии с этим мы сгенерим родномные ребра.
[05:30.000 --> 05:32.000]  Вот.
[05:32.000 --> 05:34.000]  И после этого, значит, вот эти две вершины
[05:34.000 --> 05:36.000]  мы хотим объединить.
[05:36.000 --> 05:38.000]  Как мы это сделаем?
[05:38.000 --> 05:40.000]  Ну, вот.
[05:40.000 --> 05:42.000]  Ну, вот, берем, да, списки смежности объединяем.
[05:42.000 --> 05:44.000]  Ну, при этом, да, особенно если там
[05:44.000 --> 05:46.000]  для каждого ребра хранить напарника в другом списке,
[05:46.000 --> 05:48.000]  то как бы тогда, значит, вы там переписываете
[05:48.000 --> 05:50.000]  этого напарника.
[05:50.000 --> 05:52.000]  Можно еще сказать, как мы выбираем случайное ребро в итоге?
[05:52.000 --> 05:54.000]  Ну, как бы.
[05:54.000 --> 05:56.000]  У каждой вершины есть, значит, список ребр, да?
[05:56.000 --> 05:58.000]  И стипинг ребр, да?
[05:58.000 --> 06:00.000]  То есть, допустим, 5, 7, там, 2, 4, 6, да?
[06:00.000 --> 06:02.000]  Это степень вершины.
[06:02.000 --> 06:04.000]  Да, в сумме у тебя там степень получается там 5,5,7.
[06:04.000 --> 06:06.000]  И мы объединяем случайное число от одного до суммарной
[06:06.000 --> 06:08.000]  количества ребр.
[06:08.000 --> 06:10.000]  И дальше просто пробегаемся по списку
[06:10.000 --> 06:12.000]  и понимаем, где там вот эта
[06:12.000 --> 06:14.000]  ребро номер вот сгенеренная лежит.
[06:14.000 --> 06:16.000]  А как же Майка?
[06:16.000 --> 06:18.000]  Ну, да, объединить список смежности.
[06:18.000 --> 06:20.000]  Ну, да, объединить список смежности.
[06:20.000 --> 06:22.000]  А там же будет фейк этой вершины?
[06:22.000 --> 06:24.000]  Ну, мы обвиняем А и Б.
[06:24.000 --> 06:26.000]  Ну, значит, потом, значит...
[06:26.000 --> 06:28.000]  А и Б в этих списках нет?
[06:28.000 --> 06:30.000]  Ну, а и Б... Ну, то есть, единственное, надо
[06:30.000 --> 06:32.000]  прибежаться по всем ребрам, у которых
[06:32.000 --> 06:34.000]  конечная вершина равна Б, и
[06:34.000 --> 06:36.000]  всех переписать, что там А.
[06:36.000 --> 06:38.000]  Так это уже не за...
[06:38.000 --> 06:40.000]  Почему? Ну, вот почему?
[06:40.000 --> 06:42.000]  Во-первых, если вы для каждого ребра храните напарника,
[06:42.000 --> 06:44.000]  то это делается.
[06:44.000 --> 06:46.000]  Или А, нет. Или есть еще...
[06:46.000 --> 06:48.000]  Ну, там, разве 4 есть?
[06:48.000 --> 06:50.000]  Можно, например, знаете как, храните список ребр,
[06:50.000 --> 06:52.000]  у нас полный список ребр, да?
[06:52.000 --> 06:54.000]  А в списках смежности храните ID-шники этих ребр.
[06:54.000 --> 06:56.000]  Логично.
[06:58.000 --> 07:00.000]  Так что... Они нельзя быстрее?
[07:00.000 --> 07:02.000]  Или неважно?
[07:02.000 --> 07:04.000]  Ну, может и можно.
[07:04.000 --> 07:06.000]  Ну, в принципе, нет.
[07:06.000 --> 07:08.000]  Ну, давайте думать.
[07:08.000 --> 07:10.000]  В принципе, наверное...
[07:10.000 --> 07:12.000]  Ну, как вам сказали, вообще нужно следить,
[07:12.000 --> 07:14.000]  какие ребра вообще у вас вылетели,
[07:14.000 --> 07:16.000]  а какие нет?
[07:16.000 --> 07:18.000]  А если мы будем брать случайно,
[07:18.000 --> 07:20.000]  если он не подходит еще раз брать?
[07:20.000 --> 07:22.000]  Или это слишком болтно, наверное?
[07:22.000 --> 07:24.000]  А, ну нормально, в принципе, наверное.
[07:24.000 --> 07:26.000]  Ну ладно, давайте в тупую скажем,
[07:26.000 --> 07:28.000]  что это работает за квадрат.
[07:28.000 --> 07:30.000]  Хотя, в принципе, да.
[07:30.000 --> 07:32.000]  Можно, в принципе...
[07:32.000 --> 07:34.000]  Если делать это, просто вершину объединять
[07:34.000 --> 07:36.000]  с помощью СНМа
[07:36.000 --> 07:38.000]  и кидать рандом по принципу,
[07:38.000 --> 07:40.000]  берем рандомное ребро,
[07:40.000 --> 07:42.000]  если это ребро уже снимется в одну вершину,
[07:42.000 --> 07:44.000]  то выкидываем,
[07:44.000 --> 07:46.000]  то там получается что-то типа M на...
[07:48.000 --> 07:50.000]  Какая-то такая гадость получается.
[07:50.000 --> 07:52.000]  Чего?
[07:56.000 --> 07:58.000]  Могут быть кратные ребра?
[07:58.000 --> 08:00.000]  Конечно.
[08:00.000 --> 08:02.000]  Это важно.
[08:02.000 --> 08:04.000]  А вот в конце, когда мы все задали,
[08:04.000 --> 08:06.000]  нам осталось две компоненты.
[08:06.000 --> 08:08.000]  Да, и куча ребре между ними.
[08:08.000 --> 08:10.000]  И ответы в количестве этих ребре.
[08:14.000 --> 08:16.000]  А почему в ответной СНК нету плюс М?
[08:16.000 --> 08:18.000]  Чего?
[08:18.000 --> 08:20.000]  Потому что там, где M квадрат,
[08:20.000 --> 08:22.000]  нету плюс М.
[08:22.000 --> 08:24.000]  А, ладно, мы, видимо, почему-то поверили,
[08:24.000 --> 08:26.000]  что там нет кратных ребр.
[08:26.000 --> 08:28.000]  Хотя зря мы там поверили,
[08:28.000 --> 08:30.000]  лучше не верить M квадрата плюс М.
[08:32.000 --> 08:34.000]  Вопрос. Мы выбираем ребро,
[08:34.000 --> 08:36.000]  а проверяем на что?
[08:36.000 --> 08:38.000]  На то, что у нас вершины у ребра разные?
[08:38.000 --> 08:40.000]  Нет.
[08:40.000 --> 08:42.000]  Мы выбираем рандомное ребро
[08:42.000 --> 08:44.000]  и верим на то, что вершины лежат в одной доле.
[08:44.000 --> 08:46.000]  Ну, в смысле объединяем эти вершины.
[08:48.000 --> 08:50.000]  И рандомное выбираем
[08:50.000 --> 08:52.000]  в первый раз.
[08:52.000 --> 08:54.000]  И в первый раз рандомное, во второй,
[08:54.000 --> 08:56.000]  и в третий и так далее.
[08:56.000 --> 08:58.000]  Во второй раз мы выбираем не из нового, а из нового.
[08:58.000 --> 09:00.000]  Нет, в смысле из нового.
[09:00.000 --> 09:02.000]  В смысле выбираем совершенно ребро такое,
[09:02.000 --> 09:04.000]  что две вершины его в разных компонентах.
[09:04.000 --> 09:06.000]  Можно и так.
[09:08.000 --> 09:10.000]  Ну вот, новая СНК
[09:10.000 --> 09:12.000]  работает алгоритм даже неплохо.
[09:12.000 --> 09:14.000]  Ну, по сравнению с теми кубами,
[09:14.000 --> 09:16.000]  которые у нас были, это неплохо.
[09:16.000 --> 09:18.000]  Ну, можно сказать, маленькая проблема.
[09:18.000 --> 09:20.000]  Почему это работает?
[09:20.000 --> 09:22.000]  А это не работает.
[09:22.000 --> 09:24.000]  Алгоритм может работать неправильно.
[09:26.000 --> 09:28.000]  Мы же постоянно
[09:28.000 --> 09:30.000]  стягиваем, стягиваем.
[09:30.000 --> 09:32.000]  Две вершины.
[09:32.000 --> 09:34.000]  Мы считаем, что это есть разрез.
[09:34.000 --> 09:36.000]  Да.
[09:36.000 --> 09:38.000]  Может быть не минимальный,
[09:38.000 --> 09:40.000]  а может и минимальный.
[09:40.000 --> 09:42.000]  А теперь давайте посчитаем.
[09:42.000 --> 09:44.000]  А с какой вероятностью это может быть
[09:46.000 --> 09:48.000]  ошибкой?
[09:48.000 --> 09:50.000]  Ну,
[09:50.000 --> 09:52.000]  можно верить, что
[09:52.000 --> 09:54.000]  допустим, минимальный разрез
[09:54.000 --> 09:56.000]  единственный.
[09:56.000 --> 09:58.000]  Тогда его вероятность, получается,
[09:58.000 --> 10:00.000]  достаточно маленькая.
[10:00.000 --> 10:02.000]  Но это так кажется.
[10:02.000 --> 10:04.000]  А на самом деле, смотрите такая книжка.
[10:04.000 --> 10:06.000]  На самом деле, если разрез,
[10:06.000 --> 10:08.000]  ответ маленький с другой стороны,
[10:08.000 --> 10:10.000]  то вероятность того, что когда вы тыкнете
[10:10.000 --> 10:12.000]  роддомное ребро, то оно в этот разрез не попадает,
[10:12.000 --> 10:14.000]  то оно, в принципе, достаточно большая.
[10:14.000 --> 10:16.000]  Ну, на самом деле, давайте от слов
[10:16.000 --> 10:18.000]  перейдем к конкретным оценкам.
[10:18.000 --> 10:20.000]  На самом деле, на очередном шаге,
[10:20.000 --> 10:22.000]  если у вас вероятность вот эта вот k,
[10:24.000 --> 10:26.000]  то, то есть если у вас ответ равен k,
[10:28.000 --> 10:30.000]  то, как бы,
[10:30.000 --> 10:32.000]  скажем так,
[10:32.000 --> 10:34.000]  вероятность того, что вы попадете
[10:34.000 --> 10:36.000]  в разрез,
[10:36.000 --> 10:38.000]  то есть вероятность, там,
[10:38.000 --> 10:40.000]  вероятность ошибки,
[10:40.000 --> 10:42.000]  у нас какая?
[10:42.000 --> 10:44.000]  k поделить на m, правда?
[10:46.000 --> 10:48.000]  На первом шаге.
[10:48.000 --> 10:50.000]  Ну, давайте начнем с первого шага.
[10:52.000 --> 10:54.000]  Вероятность того, что мы возьмем ребро,
[10:54.000 --> 10:56.000]  которое должно лежать,
[10:56.000 --> 10:58.000]  которое на самом деле в минимальном разрезе
[10:58.000 --> 11:00.000]  не лежит.
[11:00.000 --> 11:02.000]  Это вероятность ошибки будет вот ровно
[11:02.000 --> 11:04.000]  k поделить на m.
[11:04.000 --> 11:06.000]  Сейчас, а у кого m?
[11:06.000 --> 11:08.000]  Это мое.
[11:08.000 --> 11:10.000]  Так, ладно, сейчас я уберу дискорд.
[11:12.000 --> 11:14.000]  А у нас один ответ или нет?
[11:14.000 --> 11:16.000]  Может, не важно.
[11:16.000 --> 11:18.000]  Ну, давайте так, зафиксируем какой-то ответ.
[11:18.000 --> 11:20.000]  Ну, если несколько ответов,
[11:20.000 --> 11:22.000]  то вероятность ошибки еще меньше.
[11:22.000 --> 11:24.000]  Ну, то есть, короче, вероятность ошибки
[11:24.000 --> 11:26.000]  не превосходится на первом шаге,
[11:26.000 --> 11:28.000]  а что вот на первом шаге мы сразу по face
[11:28.000 --> 11:30.000]  не превосходит k поделить на m.
[11:30.000 --> 11:32.000]  Вот.
[11:32.000 --> 11:34.000]  Заметим маленькую приятную вещь.
[11:34.000 --> 11:36.000]  Заметим, что
[11:36.000 --> 11:38.000]  степень каждой вершины,
[11:38.000 --> 11:40.000]  то есть, для любой вершины v,
[11:40.000 --> 11:42.000]  верно, что степень каждой вершины
[11:42.000 --> 11:44.000]  больше либо равна, чем k.
[11:44.000 --> 11:46.000]  Факт.
[11:46.000 --> 11:48.000]  Ну, просто потому, что
[11:48.000 --> 11:50.000]  вершина v и все остальное
[11:50.000 --> 11:52.000]  это тоже разрез.
[11:54.000 --> 11:56.000]  Очень минимально.
[11:56.000 --> 11:58.000]  Внимаю сцена.
[12:04.000 --> 12:06.000]  Внимаю сцена.
[12:08.000 --> 12:10.000]  Это в итоговом игре?
[12:10.000 --> 12:12.000]  Ну, исходно.
[12:12.000 --> 12:14.000]  Да и в итоговом тоже.
[12:14.000 --> 12:16.000]  Сейчас вершина хотя бы k.
[12:16.000 --> 12:18.000]  А, согласна.
[12:18.000 --> 12:20.000]  Чего?
[12:20.000 --> 12:22.000]  Мы же сказали, что k предполагаемое.
[12:22.000 --> 12:24.000]  Нет, k это реальный ответ.
[12:24.000 --> 12:26.000]  Мы его не знаем, но как бы
[12:26.000 --> 12:28.000]  обозначим его за k.
[12:28.000 --> 12:30.000]  Степень решен каждая, значит k.
[12:30.000 --> 12:32.000]  Отсюда я делаю
[12:32.000 --> 12:34.000]  интересный выбор.
[12:34.000 --> 12:36.000]  2m больше либо равно, чем k на m.
[12:36.000 --> 12:38.000]  Так, сейчас давайте
[12:38.000 --> 12:40.000]  я могу повисеть еще 30 секунд.
[12:42.000 --> 12:44.000]  Чтобы понять, откуда я
[12:44.000 --> 12:46.000]  взял вот это утверждение.
[12:54.000 --> 12:56.000]  Поняли откуда я взял?
[12:56.000 --> 12:58.000]  Надеюсь, что да.
[12:58.000 --> 13:00.000]  Почти.
[13:00.000 --> 13:02.000]  Почти это как?
[13:02.000 --> 13:04.000]  Да, понял.
[13:04.000 --> 13:06.000]  Ну да, давайте.
[13:06.000 --> 13:08.000]  Два раза посчитали.
[13:08.000 --> 13:10.000]  Если я просуммирую
[13:10.000 --> 13:12.000]  степени всех вершин, я получу
[13:12.000 --> 13:14.000]  ровно 2.
[13:14.000 --> 13:16.000]  Но сумма степеней всех вершин
[13:16.000 --> 13:18.000]  как минимум k.
[13:20.000 --> 13:22.000]  Отсюда
[13:22.000 --> 13:24.000]  следует, чтобы
[13:24.000 --> 13:26.000]  вероятность этой ошибки
[13:26.000 --> 13:28.000]  не превосходим
[13:28.000 --> 13:30.000]  2 поделить на f.
[13:34.000 --> 13:36.000]  То есть я на первом шаге
[13:36.000 --> 13:38.000]  оказывается ошибусь
[13:38.000 --> 13:40.000]  не с такой большой вероятностью,
[13:40.000 --> 13:42.000]  не более чем 2 поделить на f.
[13:42.000 --> 13:44.000]  Ну чем больше вершин, тем эта вероятность меньше.
[13:44.000 --> 13:46.000]  Неплохо, да?
[13:48.000 --> 13:50.000]  А вероятность того, что я
[13:50.000 --> 13:52.000]  не ошибусь на первом шаге
[13:54.000 --> 13:56.000]  вероятность как минимум
[13:56.000 --> 13:58.000]  n-2 на n.
[14:06.000 --> 14:08.000]  Неплохо, да?
[14:10.000 --> 14:12.000]  А теперь это нам дает очень приятную вещь.
[14:12.000 --> 14:14.000]  А с какой вероятностью
[14:14.000 --> 14:16.000]  я теперь не ошибусь вообще?
[14:16.000 --> 14:18.000]  И чтобы я вообще никогда не ошибся,
[14:18.000 --> 14:20.000]  то есть я должен не ошибиться
[14:20.000 --> 14:22.000]  на первом шаге.
[14:22.000 --> 14:24.000]  Это придет с вероятностью хотя бы
[14:24.000 --> 14:26.000]  n-2 на n.
[14:26.000 --> 14:28.000]  На втором шаге
[14:28.000 --> 14:30.000]  на одну вершину меньше,
[14:30.000 --> 14:32.000]  поэтому там я не ошибусь
[14:32.000 --> 14:34.000]  с вероятностью хотя бы
[14:34.000 --> 14:36.000]  n-3 поделить на n-1.
[14:36.000 --> 14:38.000]  Потом n-4 на n-2
[14:38.000 --> 14:40.000]  и так далее.
[14:40.000 --> 14:42.000]  Ну и тут в конце будет
[14:42.000 --> 14:44.000]  2,1,4.
[14:46.000 --> 14:48.000]  Как вы уже догадываетесь, тут будет
[14:48.000 --> 14:50.000]  куча шлеп-шлеп-шлепов.
[14:52.000 --> 14:54.000]  И получится, что это равно 2
[14:54.000 --> 14:56.000]  поделить на n на n-1.
[14:56.000 --> 14:58.000]  Это может быть даже
[14:58.000 --> 15:00.000]  больше либо равно, чем 2
[15:00.000 --> 15:02.000]  поделить на n-4.
[15:06.000 --> 15:08.000]  То есть получается,
[15:08.000 --> 15:10.000]  смотрите,
[15:10.000 --> 15:12.000]  то есть я
[15:12.000 --> 15:14.000]  если я запущу этот алгоритм,
[15:14.000 --> 15:16.000]  то я получаю правильный ответ
[15:16.000 --> 15:18.000]  с вероятностью
[15:18.000 --> 15:20.000]  не менее чем вот столько.
[15:40.000 --> 15:42.000]  Ну тогда что делать?
[15:42.000 --> 15:44.000]  То есть вероятность конечно
[15:44.000 --> 15:46.000]  не самая приятная.
[15:46.000 --> 15:48.000]  Но теперь идея такая, а давайте
[15:48.000 --> 15:50.000]  запустим этот алгоритм
[15:50.000 --> 15:52.000]  n-2 пополам раз.
[15:52.000 --> 15:54.000]  Из всех вариантов выберем
[15:54.000 --> 15:56.000]  наименьший.
[15:56.000 --> 15:58.000]  А хватит нам ровно n-2 пополам раз?
[15:58.000 --> 16:00.000]  Что?
[16:00.000 --> 16:02.000]  Ну давайте прикинем.
[16:02.000 --> 16:04.000]  Вот смотрите,
[16:04.000 --> 16:06.000]  мы можем брать n-2 пополам раз
[16:06.000 --> 16:08.000]  и выбрать из всех
[16:08.000 --> 16:10.000]  ответов наименьший.
[16:10.000 --> 16:12.000]  Тогда с какой вероятностью он будет
[16:12.000 --> 16:14.000]  все еще не правильный?
[16:14.000 --> 16:16.000]  Если мы ошибались все разы...
[16:16.000 --> 16:18.000]  То есть вероятность ошибки
[16:18.000 --> 16:20.000]  у нас...
[16:20.000 --> 16:22.000]  То есть если мы делаем
[16:22.000 --> 16:24.000]  алгоритм на c запусков,
[16:24.000 --> 16:26.000]  то вероятность ошибки
[16:26.000 --> 16:28.000]  получается не более чем
[16:28.000 --> 16:30.000]  1-n квадрат пополам
[16:30.000 --> 16:32.000]  в степени c.
[16:34.000 --> 16:36.000]  Раз вероятность того, что у нас будет
[16:36.000 --> 16:38.000]  правильный ответ не менее чем 100,
[16:38.000 --> 16:40.000]  то это вероятность...
[16:40.000 --> 16:42.000]  Да, да, наоборот.
[16:42.000 --> 16:44.000]  Жестко.
[16:44.000 --> 16:46.000]  Да, уже вероятность.
[16:46.000 --> 16:48.000]  Вероятность, что неправильный ответ будет.
[16:48.000 --> 16:50.000]  А это будет вероятность того,
[16:50.000 --> 16:52.000]  что ответ будет неправильный,
[16:52.000 --> 16:54.000]  не более чем 100.
[16:54.000 --> 16:56.000]  Вот.
[16:56.000 --> 16:58.000]  Теперь если мы делаем c
[16:58.000 --> 17:00.000]  равно n квадрат пополам,
[17:00.000 --> 17:02.000]  то запусков получается 1-
[17:02.000 --> 17:04.000]  вот я так напишу,
[17:04.000 --> 17:06.000]  1 девять на n квадрат пополам
[17:06.000 --> 17:08.000]  степени n квадрат пополам.
[17:10.000 --> 17:12.000]  Это что-то типа,
[17:12.000 --> 17:14.000]  или даже меньше, либо равно,
[17:14.000 --> 17:16.000]  1 делить на e.
[17:20.000 --> 17:22.000]  Ну и приблизительно там столько.
[17:22.000 --> 17:24.000]  Тут как бы я тебе к слову не могу сказать,
[17:24.000 --> 17:26.000]  с какой стороны... То есть эта штука,
[17:26.000 --> 17:28.000]  в принципе, ящик бесконечности,
[17:28.000 --> 17:30.000]  стремится к 1 делить на e, да?
[17:30.000 --> 17:32.000]  Это вроде из ботанализа должны знать.
[17:32.000 --> 17:34.000]  Вот.
[17:34.000 --> 17:36.000]  Вероятно тем, что оно какая-то константа
[17:36.000 --> 17:38.000]  между двойкой и тройкой.
[17:38.000 --> 17:40.000]  То есть, смотрите,
[17:40.000 --> 17:42.000]  вы получили... То есть мы получили алгоритм,
[17:42.000 --> 17:44.000]  который работает с вероятностью
[17:44.000 --> 17:46.000]  ошибки, не превосходящим
[17:46.000 --> 17:48.000]  какой-то сильно отделенной от единицы
[17:48.000 --> 17:50.000]  константой. Да, не нравится,
[17:50.000 --> 17:52.000]  что такое всё выполняется. Отлично.
[17:52.000 --> 17:54.000]  Хорошо.
[17:54.000 --> 17:56.000]  Ну раз оно выполняется, ну тогда как сделать
[17:56.000 --> 17:58.000]  вероятность ошибки поменьше?
[17:58.000 --> 18:00.000]  Ну запустите... Константу в раз больше.
[18:00.000 --> 18:02.000]  Да, ну очевидно, если я тут сделаю
[18:02.000 --> 18:04.000]  10 раз, то у меня вероятность ошибки будет
[18:04.000 --> 18:06.000]  не более чем 1 делить на e в десятой.
[18:06.000 --> 18:08.000]  Ну или там, хотите,
[18:08.000 --> 18:10.000]  20 будет в двадцатой, в общем, какая вам
[18:10.000 --> 18:12.000]  вероятность нужна, в общем, сколько раз и запускаете.
[18:12.000 --> 18:14.000]  А симпточка
[18:14.000 --> 18:16.000]  получается o от вот
[18:16.000 --> 18:18.000]  n квадрата долгая, то есть получается
[18:18.000 --> 18:20.000]  итоговая симпточка o от n в четвёртую.
[18:20.000 --> 18:22.000]  Ну или там o от
[18:22.000 --> 18:24.000]  сколько там, n квадрата долгая,
[18:24.000 --> 18:26.000]  вот эта, если хотите.
[18:26.000 --> 18:28.000]  Пока что всё ещё
[18:28.000 --> 18:30.000]  устраивается.
[18:30.000 --> 18:32.000]  Ну кажется
[18:32.000 --> 18:34.000]  да, может показаться, что многовато,
[18:34.000 --> 18:36.000]  но зато, возможно, это попроще,
[18:36.000 --> 18:38.000]  чем что-то в артеры писать.
[18:38.000 --> 18:40.000]  Ну потому что, видите, алгоритм
[18:40.000 --> 18:42.000]  очень простой.
[18:42.000 --> 18:44.000]  Просто нужно запомнить его.
[18:44.000 --> 18:46.000]  Но это как-то тут
[18:46.000 --> 18:48.000]  прям совсем тупую.
[18:48.000 --> 18:50.000]  Она тупо не чекать что-то делая, и мы бабах уже
[18:50.000 --> 18:52.000]  в четвёртой степени.
[18:52.000 --> 18:54.000]  Ну ничего.
[18:54.000 --> 18:56.000]  Как говорится, у нас
[18:56.000 --> 18:58.000]  есть более крутой алгоритм.
[18:58.000 --> 19:00.000]  На самом деле.
[19:04.000 --> 19:06.000]  На самом деле, да,
[19:06.000 --> 19:08.000]  этот алгоритм можно проапгрейдить.
[19:14.000 --> 19:16.000]  Потому что, как бы, за счёт чего
[19:16.000 --> 19:18.000]  тут он может долго работать?
[19:18.000 --> 19:20.000]  За счёт того, что, как вы получаете,
[19:20.000 --> 19:22.000]  если мы, то есть мы там делаем
[19:22.000 --> 19:24.000]  n минус один шаг.
[19:24.000 --> 19:26.000]  Если где-то на пятом шаге мы пофейлились,
[19:26.000 --> 19:28.000]  то по идее дальше можно и не делать.
[19:32.000 --> 19:34.000]  Ну, не угадали с ребром.
[19:38.000 --> 19:40.000]  Да, мы не узнаем, но тем не менее.
[19:42.000 --> 19:44.000]  Но просто оптимизация может быть такая.
[19:44.000 --> 19:46.000]  Вот если мы сделаем там первые 10 шагов,
[19:46.000 --> 19:48.000]  то может наоборот.
[19:48.000 --> 19:50.000]  Там с какой-то большой вероятностью на первых 10 шагах
[19:50.000 --> 19:52.000]  мы не пофейлились.
[19:52.000 --> 19:54.000]  Ну такая приличная вероятность будет.
[19:56.000 --> 19:58.000]  И тогда, пока она приличная,
[19:58.000 --> 20:00.000]  возникает идея такая.
[20:00.000 --> 20:02.000]  А давайте поверим, что мы там не ошиблись.
[20:02.000 --> 20:04.000]  Ну или с мелкой вероятностью ошиблись.
[20:04.000 --> 20:06.000]  Идея такая.
[20:06.000 --> 20:08.000]  Вторую итерацию мы будем делать, начиная
[20:08.000 --> 20:10.000]  не с начала, а вот с этого места.
[20:12.000 --> 20:14.000]  Не запустимся в том месте, где мы...
[20:14.000 --> 20:16.000]  Ну, типа да.
[20:16.000 --> 20:18.000]  Развилочка такая будет.
[20:18.000 --> 20:20.000]  Попробуем заново?
[20:20.000 --> 20:22.000]  Давай ещё три раза и с начала попробуем?
[20:22.000 --> 20:24.000]  Нет.
[20:24.000 --> 20:32.000]  Ну там, конечно, будет немножко по-другому это работать.
[20:32.000 --> 20:34.000]  Работать будет примерно так.
[20:34.000 --> 20:36.000]  На самом деле, идея будет такая.
[20:38.000 --> 20:40.000]  Значит, мы для графа размера n сделаем так.
[20:40.000 --> 20:42.000]  t присвоим...
[20:46.000 --> 20:48.000]  n поделить на поле низ двух.
[20:50.000 --> 20:52.000]  Ладно.
[20:52.000 --> 20:54.000]  Вот.
[20:54.000 --> 20:56.000]  Вот.
[20:58.000 --> 21:00.000]  Вот.
[21:00.000 --> 21:02.000]  Когнячка вошла в час.
[21:04.000 --> 21:06.000]  Сейчас чего сейчас?
[21:06.000 --> 21:08.000]  Это корень из анкаверта пополам.
[21:08.000 --> 21:10.000]  Всё?
[21:10.000 --> 21:12.000]  Ну, можно корень из анкаверта пополам.
[21:12.000 --> 21:14.000]  Можно...
[21:14.000 --> 21:16.000]  Ну, на самом деле сейчас мы тут немножко по...
[21:16.000 --> 21:18.000]  Так, поподгоняем.
[21:22.000 --> 21:24.000]  Ну, пойдёт.
[21:24.000 --> 21:26.000]  Ладно.
[21:26.000 --> 21:28.000]  Значит, смотрите.
[21:28.000 --> 21:30.000]  Что такое?
[21:30.000 --> 21:32.000]  Что происходит?
[21:32.000 --> 21:34.000]  Ничего.
[21:34.000 --> 21:36.000]  Ну, вот. Значит, смотрите.
[21:36.000 --> 21:38.000]  Просто идея такая.
[21:38.000 --> 21:40.000]  Делать будем следующее.
[21:40.000 --> 21:42.000]  Теперь новая версия алгоритма.
[21:42.000 --> 21:44.000]  Теперь вас приветствует алгоритм Кардера Штайна.
[21:44.000 --> 21:46.000]  Такая обправреженная версия.
[21:46.000 --> 21:48.000]  Значит, она нам говорит,
[21:48.000 --> 21:50.000]  мы делаем
[21:50.000 --> 21:52.000]  операции
[21:52.000 --> 21:54.000]  до тех пор,
[21:54.000 --> 21:56.000]  пока вот у нас количество вершин
[21:56.000 --> 21:58.000]  не превратилось в t.
[21:58.000 --> 22:00.000]  Какова вера...
[22:00.000 --> 22:02.000]  Давайте прикинем.
[22:02.000 --> 22:04.000]  Какова вера это из того,
[22:04.000 --> 22:06.000]  что мы ошибёмся?
[22:06.000 --> 22:08.000]  Ошибёмся когда?
[22:08.000 --> 22:10.000]  Ну, вот пока будем сжимать
[22:10.000 --> 22:12.000]  n вершин в t.
[22:12.000 --> 22:14.000]  То есть, найдётся хотя бы одно вибро
[22:14.000 --> 22:16.000]  среди
[22:16.000 --> 22:18.000]  1-2 шагов.
[22:18.000 --> 22:20.000]  Которые мы неудачно сжали.
[22:22.000 --> 22:24.000]  С какой вероятностью
[22:24.000 --> 22:26.000]  мы не ошибёмся?
[22:26.000 --> 22:28.000]  Сжимая t.
[22:28.000 --> 22:30.000]  Да.
[22:30.000 --> 22:32.000]  Какова вероятность получится?
[22:32.000 --> 22:34.000]  Там можно
[22:34.000 --> 22:36.000]  чуть-чуть одна-вторая.
[22:36.000 --> 22:38.000]  У тебя сегодня
[22:38.000 --> 22:40.000]  день второй.
[22:40.000 --> 22:42.000]  Сейчас.
[22:42.000 --> 22:44.000]  Ну, давайте так.
[22:44.000 --> 22:46.000]  Если пишем
[22:46.000 --> 22:48.000]  абсолютно то же самое.
[22:48.000 --> 22:50.000]  Да, на вторая.
[22:50.000 --> 22:52.000]  Давайте пишем.
[22:52.000 --> 22:54.000]  Пишем вот это,
[22:54.000 --> 22:56.000]  вот это,
[22:56.000 --> 22:58.000]  только заканчиваем мы на этот раз
[22:58.000 --> 23:00.000]  не на 2 и 1,
[23:00.000 --> 23:02.000]  а где мы там заканчиваем?
[23:02.000 --> 23:04.000]  На t и t-1.
[23:08.000 --> 23:10.000]  Ну, и здесь мы пишем
[23:10.000 --> 23:12.000]  1-2 и t-1.
[23:12.000 --> 23:14.000]  Ну, после шлёп-шлёпа
[23:14.000 --> 23:16.000]  получается, что равно t от m-1
[23:16.000 --> 23:18.000]  поделить на n на m-1.
[23:20.000 --> 23:22.000]  Так.
[23:26.000 --> 23:28.000]  Это вероятность того, что мы не ошиблись.
[23:28.000 --> 23:30.000]  Чего? Это вероятность того, что мы не ошиблись.
[23:30.000 --> 23:32.000]  Ну, давайте t, допустим,
[23:32.000 --> 23:34.000]  у меня будет это вот, вот округлённый
[23:34.000 --> 23:36.000]  верк, давайте дляточим.
[23:36.000 --> 23:38.000]  Вот.
[23:38.000 --> 23:40.000]  Ну, это тогда
[23:40.000 --> 23:42.000]  больше либо равно, чем n вот там.
[23:48.000 --> 23:50.000]  Вот как-то так. Получается,
[23:50.000 --> 23:52.000]  что сейчас получается?
[23:52.000 --> 23:54.000]  n квадрат пополам
[23:54.000 --> 23:56.000]  поделить на 2,
[23:56.000 --> 23:58.000]  поделить на n на
[23:58.000 --> 24:00.000]  n-1.
[24:00.000 --> 24:02.000]  Ну, может
[24:02.000 --> 24:04.000]  мы, конечно, пускать, что
[24:04.000 --> 24:06.000]  t от Robby, t от t-1, t от t-1, t от t-1.
[24:06.000 --> 24:08.000]  t от t-1, t от t-1, t от t-1.
[24:08.000 --> 24:10.000]  t от t-1, t от t-1, t от t-1.
[24:10.000 --> 24:12.000]  А, сейчас оно не больше.
[24:12.000 --> 24:14.000]  Нет, нормально.
[24:14.000 --> 24:16.000]  Я могу вот так выписать.
[24:22.000 --> 24:24.000]  Вот. То есть, оказывается,
[24:24.000 --> 24:26.000]  пока мы идём до этого t,
[24:26.000 --> 24:28.000]  вероятность того,
[24:28.000 --> 24:30.000]  что мы нигде
[24:30.000 --> 24:32.000]  не ошибёмся, не менее, чем 1-2.
[24:34.000 --> 24:36.000]  То есть,
[24:36.000 --> 24:38.000]  вероятность того, что мы ошибёмся,
[24:38.000 --> 24:40.000]  не более, чем 1.
[24:40.000 --> 24:42.000]  Ну, до этого момента.
[24:44.000 --> 24:46.000]  Понятно, да?
[24:48.000 --> 24:50.000]  Чего смутило?
[24:52.000 --> 24:54.000]  Эта вероятность того, что мы не ошибёмся.
[24:54.000 --> 24:56.000]  Это вероятность того, что мы не ошибёмся.
[24:56.000 --> 24:58.000]  Да... Следовательно, вероятность того,
[24:58.000 --> 25:00.000]  что мы ошибёмся не более, чем 1.
[25:00.000 --> 25:02.000]  Так. Ну что ж, ура!
[25:02.000 --> 25:08.220]  потому что теперь дальше идея будет такая вот мы генирили вот n из n делали t
[25:08.220 --> 25:16.480]  а теперь дальше от этого графа t запустим алгоритм рекурсивно два раза
[25:16.480 --> 25:23.120]  берем вот этот граф и говорим так он же с вероятностью хотя бы там 1-2 хороший
[25:23.120 --> 25:25.120]  так давайте два раза от него
[25:25.120 --> 25:27.120]  небольшой ошибку делали
[25:27.120 --> 25:29.120]  последний переход не верен
[25:29.120 --> 25:32.120]  n пополам меньше чем от корн из 2
[25:32.120 --> 25:34.120]  а не больше
[25:34.120 --> 25:36.120]  да?
[25:36.120 --> 25:38.120]  не могло быть
[25:38.120 --> 25:40.120]  ну там не получается
[25:40.120 --> 25:44.120]  то есть это почти 1-2 но не совсем точно
[25:44.120 --> 25:46.120]  нет
[25:46.120 --> 25:49.120]  мы написали что
[25:49.120 --> 25:51.120]  мы написали что
[25:51.120 --> 25:53.120]  хотя бы минус n делить пополам
[25:53.120 --> 25:55.120]  но значит что n пополам хотя бы n делить на корне из 2
[25:55.120 --> 25:57.120]  это просто неверно
[25:57.120 --> 25:59.120]  когда мы корень из 2 заменили на 2
[25:59.120 --> 26:01.120]  мы стали меньше высчитать
[26:07.120 --> 26:11.120]  это можно оценить как 1-2 и минус
[26:11.120 --> 26:13.120]  то что вот мы лишние
[26:13.120 --> 26:15.120]  1-2 и минус что?
[26:15.120 --> 26:17.120]  ну
[26:17.120 --> 26:19.120]  1-2 и минус на n
[26:19.120 --> 26:21.120]  что они так точно оценивают
[26:21.120 --> 26:23.120]  что?
[26:23.120 --> 26:25.120]  ну как
[26:25.120 --> 26:27.120]  у нас разница получается
[26:27.120 --> 26:29.120]  когда мы заменяем n делить корень из 2
[26:29.120 --> 26:31.120]  наверное пополам
[26:31.120 --> 26:33.120]  что мы добавили
[26:33.120 --> 26:35.120]  мы добавили
[26:35.120 --> 26:37.120]  n делить
[26:37.120 --> 26:39.120]  ну n на 1 делить на коре из 2
[26:39.120 --> 26:41.120]  минус 1-2
[26:41.120 --> 26:43.120]  числитель
[26:43.120 --> 26:45.120]  корица
[26:45.120 --> 26:47.120]  и
[26:47.120 --> 26:49.120]  короче
[26:49.120 --> 26:51.120]  1-2 и минус на n
[26:51.120 --> 26:53.120]  вот что они такое должны таким оценивать
[26:53.120 --> 26:55.120]  ну не хотел
[26:55.120 --> 26:57.120]  нам 1-2 принципиально
[26:57.120 --> 26:59.120]  поэтому видимо придется поподгореть
[26:59.120 --> 27:01.120]  давайте побольше сделаем
[27:05.120 --> 27:07.120]  плюс 1 то будет норм
[27:07.120 --> 27:09.120]  вот теперь хорошо
[27:15.120 --> 27:17.120]  ты бегаешь точно хорошо
[27:19.120 --> 27:21.120]  ну хорошо
[27:21.120 --> 27:23.120]  если вас так смущает
[27:23.120 --> 27:25.120]  пожалуйста вот так
[27:31.120 --> 27:33.120]  вот
[27:33.120 --> 27:35.120]  у меня маленький вопрос
[27:35.120 --> 27:37.120]  почему если я положу t равно n
[27:37.120 --> 27:39.120]  то у меня вероятность стоит 1
[27:39.120 --> 27:41.120]  все ошибки я разнегу
[27:41.120 --> 27:43.120]  чего какая 1
[27:43.120 --> 27:45.120]  если ты ничего не сделаешь ты меня ошибешься
[28:03.120 --> 28:05.120]  так вот
[28:05.120 --> 28:07.120]  после того как мы сделали граб размеров t
[28:07.120 --> 28:09.120]  мы запускаемся от этого графа
[28:09.120 --> 28:11.120]  рекурсивно 2 раза
[28:13.120 --> 28:15.120]  более того
[28:15.120 --> 28:17.120]  можно в принципе
[28:17.120 --> 28:19.120]  сказать что мы
[28:19.120 --> 28:21.120]  каждый раз запускаемся рекурсивно 2 раза
[28:21.120 --> 28:23.120]  можно даже наоборот сказать
[28:23.120 --> 28:25.120]  два раза делаем так
[28:25.120 --> 28:27.120]  доходим до t запускаемся рекурсивно
[28:27.120 --> 28:29.120]  вот так
[28:33.120 --> 28:35.120]  до t
[28:35.120 --> 28:37.120]  но второй раз запускаемся
[28:37.120 --> 28:39.120]  от того же графа который в этот момент появился
[28:39.120 --> 28:41.120]  две копии графа
[28:41.120 --> 28:43.120]  от одной запускаемся
[28:43.120 --> 28:45.120]  в данном случае не так
[28:45.120 --> 28:47.120]  наоборот
[28:47.120 --> 28:49.120]  чтобы у нас есть граф
[28:49.120 --> 28:51.120]  мы делаем две копии
[28:51.120 --> 28:53.120]  и два раза его запускаемся
[28:53.120 --> 28:55.120]  в каждом запуске делаем доходим до t
[28:55.120 --> 28:57.120]  и запускаемся рекурсивно
[28:57.120 --> 28:59.120]  мы там тоже дойдем до нового дж 3
[28:59.120 --> 29:01.120]  и о них еще раз
[29:01.120 --> 29:03.120]  получается такой деревце
[29:03.120 --> 29:05.120]  глубины
[29:05.120 --> 29:07.120]  лога
[29:07.120 --> 29:09.120]  ладно 2 лога
[29:09.120 --> 29:11.120]  ладно чуть больше
[29:11.120 --> 29:13.120]  ну сколько раз это надо делить на коне
[29:13.120 --> 29:15.120]  из двух чтобы получилось 2
[29:15.120 --> 29:17.120]  очевидно это надо делать 2 логами
[29:17.120 --> 29:19.120]  в мой раз
[29:19.120 --> 29:21.120]  вот
[29:21.120 --> 29:23.120]  ну теперь давайте думать
[29:23.120 --> 29:25.120]  какова вероятность того
[29:25.120 --> 29:27.120]  что мы ошибемся
[29:29.120 --> 29:31.120]  где нибудь
[29:31.120 --> 29:33.120]  или наоборот давайте
[29:33.120 --> 29:35.120]  какова вероятность того что мы не ошибемся
[29:35.120 --> 29:37.120]  пусть у меня например есть вот такая величина
[29:37.120 --> 29:39.120]  которая говорит о том
[29:39.120 --> 29:41.120]  что у меня будет
[29:41.120 --> 29:43.120]  в некотором смысле верхней
[29:43.120 --> 29:45.120]  оценкой на то
[29:45.120 --> 29:47.120]  что при любом
[29:47.120 --> 29:49.120]  графе на n вершинах
[29:49.120 --> 29:51.120]  я никогда не ошибусь
[29:51.120 --> 29:53.120]  то есть нижней оценкой
[29:53.120 --> 29:55.120]  наоборот
[29:55.120 --> 29:57.120]  можно еще раз
[29:59.120 --> 30:01.120]  ну вот
[30:01.120 --> 30:03.120]  но я хочу
[30:03.120 --> 30:05.120]  чтобы
[30:05.120 --> 30:07.120]  чтобы от 7 точек оценивать
[30:07.120 --> 30:09.120]  чтобы хорошо формально было правильно
[30:09.120 --> 30:11.120]  тут к сожалению начинается вещь
[30:11.120 --> 30:13.120]  что если я могу произвести заклинания которые
[30:13.120 --> 30:15.120]  похожи на правду
[30:15.120 --> 30:17.120]  мы в самом начале задачи зафиксировали по условию
[30:17.120 --> 30:19.120]  что у нас есть граф уже конкретный
[30:19.120 --> 30:21.120]  на n вершинах все графы были
[30:21.120 --> 30:23.120]  да но эта вероятность ошибки
[30:23.120 --> 30:25.120]  на каждом из этих графов стала своя
[30:25.120 --> 30:27.120]  на каких-то графах больше ошибались
[30:27.120 --> 30:29.120]  на каких-то меньше
[30:29.120 --> 30:31.120]  поэтому если мы хотим что-то обобщать
[30:31.120 --> 30:33.120]  придется вот как-то оценивать
[30:33.120 --> 30:35.120]  то есть я хочу доказать
[30:35.120 --> 30:37.120]  что вероятность ошибки
[30:37.120 --> 30:39.120]  допустим у меня p от n это
[30:39.120 --> 30:41.120]  вероятность ошибки
[30:41.120 --> 30:43.120]  на каком-то графе размера n
[30:43.120 --> 30:45.120]  видимо верхняя оценка какая-то
[30:47.120 --> 30:49.120]  допустим
[30:49.120 --> 30:51.120]  вот я хочу принять чтобы доказать
[30:51.120 --> 30:53.120]  чтобы мне что-то доказать но я знаю что
[30:55.120 --> 30:57.120]  вероятность того что я ошибусь
[30:57.120 --> 30:59.120]  на графе размера там
[30:59.120 --> 31:01.120]  1 или 2 равно очевидно ноль
[31:01.120 --> 31:15.120]  Ну, более того, там даже работают подхачки, в смысле, что давайте введем какую-нибудь константу С и говорим, что если количество вершин не превосходит С, то там решим задачу любым тупым образом за 1.
[31:15.120 --> 31:22.120]  Ну да, понятно, если там 6 вершин у вас осталось, то там любым перебором решить задачу и все.
[31:22.120 --> 31:27.120]  При этом мы обращаем нас теперь уже, может быть, не на mREB, а просто...
[31:27.120 --> 31:29.120]  Главное, количество вершин.
[31:30.120 --> 31:35.120]  Ну вот так вот. Давайте посмотрим, какова у нас вероятность ошибки.
[31:37.120 --> 31:46.120]  Ну, вероятность ошибки у нас не превосходит 1 минус вероятность не ошибки.
[31:48.120 --> 31:51.120]  С какой вероятностью мы не ошибемся?
[31:51.120 --> 31:55.120]  Это слово одно, 1 минус вероятность.
[31:55.120 --> 32:05.120]  Ну, то есть если говорим p от n это, пусть у меня, значит, p от n это вот оценка сверху, то есть мы говорим, что мы ошибемся с вероятностью не более, чем p от n, да?
[32:06.120 --> 32:14.120]  Значит, вероятность того, что, значит, теперь вычитаем вероятность того, что мы не ошибемся в квадрате.
[32:15.120 --> 32:17.120]  Аккуратно.
[32:18.120 --> 32:21.120]  Потому что мы, потому что у нас два запуска, по сути.
[32:24.120 --> 32:27.120]  Поэтому если мы хотим не ошибиться, мы должны...
[32:27.120 --> 32:29.120]  То есть так, мы...
[32:29.120 --> 32:31.120]  Нет, какая нотка?
[32:32.120 --> 32:34.120]  Так, нет, сейчас все будет.
[32:34.120 --> 32:37.120]  Ну вот, значит, смотрите, если я хочу...
[32:37.120 --> 32:40.120]  Значит, если я хочу...
[32:40.120 --> 32:44.120]  Вероятность ошибки это по-любому, 1 минус вероятность не ошибки, правда?
[32:45.120 --> 32:49.120]  Вероятность, значит, пишем 1 минус вероятность не ошибки.
[32:51.120 --> 32:54.120]  Значит, нот.
[32:55.120 --> 32:57.120]  Вероятность не ошибки.
[32:57.120 --> 33:00.120]  Вероятность нот.
[33:03.120 --> 33:08.120]  Если p от n это максимальная вероятность ошибки в любом графе, то она равна 1 минус вероятность не ошибиться в любом графе.
[33:08.120 --> 33:10.120]  Минимально отмечаем.
[33:10.120 --> 33:12.120]  Чего-чего-чего?
[33:12.120 --> 33:14.120]  Нет, чего-чего не так.
[33:14.120 --> 33:16.120]  Все нормально.
[33:16.120 --> 33:18.120]  Ну вот.
[33:20.120 --> 33:22.120]  Чтобы ошибиться,
[33:22.120 --> 33:24.120]  заметим, что нам надо ошибиться
[33:24.120 --> 33:26.120]  вот так. И здесь, и здесь. Правда?
[33:26.120 --> 33:28.120]  Да.
[33:28.120 --> 33:30.120]  Ну вот.
[33:30.120 --> 33:32.120]  То есть отсюда
[33:34.120 --> 33:36.120]  Ну вот.
[33:36.120 --> 33:38.120]  Ну вот.
[33:38.120 --> 33:40.120]  Ну получается.
[33:40.120 --> 33:42.120]  Но какая у нас вероятность ошибки
[33:42.120 --> 33:44.120]  на каждом из запусков?
[33:44.120 --> 33:46.120]  То есть надо что-то в квадрате.
[33:46.120 --> 33:48.120]  В квадрате, заметим,
[33:48.120 --> 33:50.120]  что у нас два варианта.
[33:50.120 --> 33:52.120]  То есть на каждом запуске у нас
[33:52.120 --> 33:54.120]  либо мы с вероятностью не более чем
[33:54.120 --> 33:56.120]  одна-вторая ошибаемся здесь.
[33:56.120 --> 33:58.120]  Да?
[33:58.120 --> 34:00.120]  Либо мы
[34:00.120 --> 34:02.120]  здесь не ошибаемся.
[34:02.120 --> 34:04.120]  Ну вот.
[34:04.120 --> 34:06.120]  Ну вот.
[34:06.120 --> 34:08.120]  Либо, вот очень хочется написать,
[34:08.120 --> 34:10.120]  что мы не ошибаемся с вероятностью
[34:10.120 --> 34:12.120]  п от t.
[34:14.120 --> 34:16.120]  Похоже, да.
[34:16.120 --> 34:18.120]  Наградно ошибаемся.
[34:18.120 --> 34:20.120]  Чего?
[34:20.120 --> 34:22.120]  Наградно ошибаемся.
[34:22.120 --> 34:24.120]  Ну это и есть вероятность того, что мы ошибаемся
[34:24.120 --> 34:26.120]  в качестве размера t.
[34:26.120 --> 34:28.120]  Правда, единственная проблема,
[34:28.120 --> 34:30.120]  что вероятность того, что мы тут
[34:30.120 --> 34:32.120]  не ошибемся, это все-таки
[34:32.120 --> 34:34.120]  оценивать сверху не одна-вторая.
[34:34.120 --> 34:36.120]  Потому что вы помните, что у нас нижняя
[34:36.120 --> 34:38.120]  оценка то, что мы не ошибемся
[34:38.120 --> 34:40.120]  с вероятностью не меньше, чем одна-вторая.
[34:40.120 --> 34:42.120]  Да?
[34:42.120 --> 34:44.120]  Поэтому по-хорошему
[34:44.120 --> 34:46.120]  здесь, конечно, если тупо сверху
[34:46.120 --> 34:48.120]  оценивать, то придется вот так писать.
[34:50.120 --> 34:52.120]  Ну давайте попробуем.
[34:52.120 --> 34:54.120]  Ну попробуем с этого начать.
[34:56.120 --> 34:58.120]  Ну вероятность того, что мы
[34:58.120 --> 35:00.120]  на каждом из этих запусков
[35:00.120 --> 35:02.120]  на этом ошибемся,
[35:02.120 --> 35:04.120]  она не просовывает
[35:04.120 --> 35:06.120]  суммы вероятности
[35:06.120 --> 35:08.120]  того,iguous мы ошибемся здесь,
[35:08.120 --> 35:10.120]  и ошибемся здесь.
[35:10.120 --> 35:12.120]  Вероятность того, что мы здесь ошибемся
[35:12.120 --> 35:14.120]  ни более чем одна-вторая.
[35:14.120 --> 35:16.120]  Вероятность того, что мы дальше ошибемся
[35:16.120 --> 35:18.120]  ни более чем 1.
[35:18.120 --> 35:20.120]  Отдельных квадратов?
[35:20.120 --> 35:22.120]  Некоторых, потому что у нас два независимых запуска.
[35:22.120 --> 35:24.120]  Чтобы ошибиться глобально,
[35:24.120 --> 35:26.120]  мы должны ошибиться в этом запуске,
[35:26.120 --> 35:28.120]  должны быть ошибиться в этом запуске.
[35:28.120 --> 35:32.120]  Вы говорили о том, что он должен спуститься от N до T и оттуда уже сделать назад.
[35:32.120 --> 35:37.120]  Нет, мы потом сказали, что мы как бы спуск делаем два раза.
[35:37.120 --> 35:42.120]  То есть два раза делаем, то есть два, то есть делаем два раза следующее.
[35:42.120 --> 35:49.120]  Берем этот исходный граф размера N, добиваем его, сжимаем его до размера T и спускаемся к нему рекурсивно.
[35:50.120 --> 35:51.120]  То же самое тут же просто.
[35:51.120 --> 35:53.120]  Нет, это не то же самое.
[35:53.120 --> 35:59.120]  Тут подозревало, что от графа N мы спускаемся один раз, и теперь мы сказали, что мы спускаемся два раза.
[35:59.120 --> 36:01.120]  То есть развилка уже здесь происходит.
[36:01.120 --> 36:04.120]  А раньше мы говорили, что развилка происходит только здесь.
[36:06.120 --> 36:11.120]  У нас был граф, мы спустились один раз от N до T.
[36:11.120 --> 36:14.120]  Ну раньше было так, да, потом два раза спустились рекурсивно.
[36:14.120 --> 36:16.120]  Теперь наоборот.
[36:16.120 --> 36:19.120]  Мы два раза спустились независимо.
[36:19.120 --> 36:23.120]  И для каждого результата спуска запустились рекурсивно.
[36:23.120 --> 36:28.120]  Чем отличается спуститься и рекурсивно от того, чтобы просто продолжить?
[36:29.120 --> 36:33.120]  Ну тем, что мы раньше от N спускались один раз, а теперь спускались два.
[36:33.120 --> 36:36.120]  Нет, нет, нет, я о том, что продолжить спуск уже как новый.
[36:36.120 --> 36:38.120]  То есть мы спустимся от N до T и идем дальше просто.
[36:38.120 --> 36:43.120]  Нет, так теперь рекурсивно подразумевает, что мы из графа T будем спускаться два раза.
[36:43.120 --> 36:47.120]  А, то есть мы теперь два раза и в самом T, и два раза...
[36:47.120 --> 36:48.120]  Рекурсивно, да.
[36:48.120 --> 36:50.120]  Рекурсивно это подразумевает.
[36:50.120 --> 36:54.120]  Если мы при описании функции от N говорим, что N, то мы спускаемся два раза.
[36:54.120 --> 36:57.120]  То есть когда мы спускаемся рекурсивно от N, мы тоже спускаемся два раза.
[36:57.120 --> 36:58.120]  Все, хорошо.
[36:58.120 --> 37:00.120]  То есть дерево по-любому есть.
[37:00.120 --> 37:02.120]  Так, ну а теперь давайте думать.
[37:02.120 --> 37:05.120]  Какую оценку мы теперь можем забабахать на P от N?
[37:05.120 --> 37:07.120]  Вот хотя бы в таком виде.
[37:10.120 --> 37:12.120]  Ну на самом деле не очень хорошо.
[37:13.120 --> 37:16.120]  На самом деле заметим, что P от N...
[37:16.120 --> 37:20.120]  То есть ну как бы из такой рекурренты заметим, что...
[37:23.120 --> 37:27.120]  Ну заметим следующее, что из такой P от N у нас как бы любая оценка будет там...
[37:27.120 --> 37:30.120]  Ну как бы больше одной четвертой не получится, правда?
[37:30.120 --> 37:36.120]  Ну потому что, нет, здесь на самом деле должна стоять вероятность того, что мы не ошибемся до запуска, да?
[37:36.120 --> 37:40.120]  Но на эту вероятность у нас оценка сверху только единица.
[37:43.120 --> 37:46.120]  То есть мы типа сложили вероятность того, что...
[37:46.120 --> 37:47.120]  Сейчас, одна вторая...
[37:47.120 --> 37:51.120]  Это одна вторая на один плюс один на P от N.
[37:51.120 --> 37:55.120]  То есть это, наверное, одна вторая на один плюс один на P от N.
[37:55.120 --> 37:56.120]  Сейчас, одна вторая...
[37:56.120 --> 38:00.120]  Это одна вторая на один плюс один на P от N.
[38:02.120 --> 38:04.120]  Поэтому оценим вероятность ошибки максимально.
[38:04.120 --> 38:10.120]  Ну да, мы посредиставим вероятность ошибки при спуске из N до T и ошибки после.
[38:11.120 --> 38:12.120]  Ну да, так можно.
[38:12.120 --> 38:16.120]  Ну вот, ну заметим, что в таком виде как бы заметим, что любая оценка, которая тут есть...
[38:16.120 --> 38:20.120]  Как бы что-то мы тут по индукции не доказали, уж меньше чем одной четвертой не получится.
[38:21.120 --> 38:22.120]  Максимум.
[38:22.120 --> 38:25.120]  Может быть, удастся показать что-нибудь типа, что...
[38:26.120 --> 38:27.120]  Что вот там...
[38:28.120 --> 38:31.120]  Может быть, там это будет сходиться к какому-то решению уравнения.
[38:37.120 --> 38:38.120]  Ну вот.
[38:38.120 --> 38:39.120]  Нет, то действительно там. Давайте подумаем.
[38:39.120 --> 38:40.120]  Есть какое-нибудь уравнение...
[38:40.120 --> 38:41.120]  Ну вот.
[38:41.120 --> 38:42.120]  Ну давайте так.
[38:42.120 --> 38:43.120]  Есть какое-нибудь уравнение...
[38:43.120 --> 38:47.120]  Вот X равно, допустим, одна вторая плюс X в квадрате.
[38:47.120 --> 38:49.120]  Есть у этого уравнение решение?
[38:49.120 --> 38:50.120]  Давайте посмотрим.
[38:50.120 --> 38:54.120]  X в квадрате плюс X плюс одна четвертая равно X.
[38:54.120 --> 38:56.120]  X в квадрате плюс одна четвертая равно нулю.
[38:56.120 --> 38:57.120]  Решения нет.
[38:58.120 --> 38:59.120]  Чек значен.
[39:00.120 --> 39:02.120]  X равно плюс нулус...
[39:03.120 --> 39:07.120]  Значит, он будет вообще стремиться уходить на бесконечную притерацию.
[39:08.120 --> 39:09.120]  Ну что, X...
[39:09.120 --> 39:12.120]  Ну типа, потому что оно будет все время возрастать.
[39:13.120 --> 39:16.120]  Причем, если оно будет хотя бы...
[39:21.120 --> 39:23.120]  Не, ну как сказать, давайте можем просто...
[39:23.120 --> 39:27.120]  Причем оно будет хотя бы каждый раз, хотя бы у нас какую-то значительную штуку больше, чем в предыдущий раз.
[39:27.120 --> 39:28.120]  Хотя бы нас учить.
[39:28.120 --> 39:29.120]  Ну да.
[39:29.120 --> 39:30.120]  Ну вообще, какая-то ерунда получается.
[39:30.120 --> 39:31.120]  Не-не.
[39:31.120 --> 39:32.120]  Не-не.
[39:33.120 --> 39:36.120]  Ну да, то есть, по ходу, да, по ходу, она...
[39:36.120 --> 39:38.120]  Да, очень похожа на то, что она...
[39:38.120 --> 39:39.120]  Ну это возможно...
[39:39.120 --> 39:42.120]  Не, хотя нет, будет ли она возрастать, это вопрос, конечно.
[39:43.120 --> 39:44.120]  А, ну видимо, будет.
[39:44.120 --> 39:48.120]  Потому что если она не будет возрастать, значит, она должна куда-то стремиться, и тогда должна быть неподвижная точка.
[39:48.120 --> 39:51.120]  Так что все-таки есть подозрение, что как-то...
[39:51.120 --> 39:52.120]  Это оцентруется.
[39:52.120 --> 39:54.120]  Значит, надо оценивать как-то поточнее.
[39:55.120 --> 39:57.120]  А как оценивать поточнее?
[40:01.120 --> 40:03.120]  Ну, заметить можно было следующее.
[40:04.120 --> 40:08.120]  Можно еще заметить, что давайте вместо 1 и 2 здесь поставим точную вероятность ошибки.
[40:10.120 --> 40:13.120]  Точную вероятность того, что мы вот на этом месте ошибемся.
[40:14.120 --> 40:16.120]  И скажем, что это ошибка, epsilon t.
[40:17.120 --> 40:19.120]  Тогда можно было написать вот так.
[40:20.120 --> 40:22.120]  1 минус epsilon t.
[40:24.120 --> 40:25.120]  Понятно, да?
[40:27.120 --> 40:28.120]  Ну, заметим теперь следующее.
[40:29.120 --> 40:36.120]  Что, а так как при epsilon t у меня коэффициент как бы единица, а тут, как мы надеемся, не больше единицы должно быть, да?
[40:37.120 --> 40:38.120]  Как мы, по крайней мере, надеемся.
[40:39.120 --> 40:51.120]  То есть подозрение, что если мы будем epsilon увеличивать, значит, если мы epsilon увеличим, а это уменьшим,
[40:53.120 --> 40:56.120]  то тогда вот эта штука от этого будет только увеличиваться.
[40:59.120 --> 41:00.120]  Вот, да.
[41:01.120 --> 41:02.120]  А вот что уменьшим?
[41:03.120 --> 41:06.120]  Ну, если я увеличу epsilon, то вся вот эта штука уменьшится.
[41:08.120 --> 41:12.120]  Ну, если я вот прибавлю сюда delta epsilon, тогда тут будет плюс delta epsilon,
[41:13.120 --> 41:16.120]  а тут будет минус delta epsilon умножить на p, которое как бы и не превосходит единицы.
[41:17.120 --> 41:18.120]  Значит, все уменьшатся тогда?
[41:19.120 --> 41:20.120]  Да.
[41:21.120 --> 41:26.120]  Поэтому это можно оценивать сверху, как если бы мы epsilon t сверху ченнете цилиндров.
[41:26.120 --> 41:28.120]  Так, если бы мы epsilon t сверху ченнете цилиндров.
[41:29.120 --> 41:33.120]  Ну, теперь заметьте, что так как epsilon t не превосходит 1 вторая,
[41:34.120 --> 41:40.120]  то получается, теперь можно написать 1 вторая плюс все-таки 1 вторая p на t квадрате.
[41:43.120 --> 41:44.120]  Вот такая мелкая аккуратность.
[41:45.120 --> 41:50.120]  А то, что не больше на вторая, мы уже доказываем?
[41:51.120 --> 41:52.120]  Нет, доказываем.
[41:52.120 --> 41:53.120]  Ну, в смысле?
[41:54.120 --> 41:59.120]  Ну, если раскрыть, там будет 1, ой, p от t плюс epsilon на 1 минус p от t.
[42:00.120 --> 42:01.120]  Ну, давай так.
[42:02.120 --> 42:06.120]  Если мы считаем, что p это не больше единицы, то при возрастании epsilon t увеличивается просто.
[42:07.120 --> 42:08.120]  Ленина штука по epsilon t.
[42:09.120 --> 42:10.120]  Ну, кстати, может раскрыть и погибнуть.
[42:11.120 --> 42:13.120]  Ну, там, ну, черт, epsilon при epsilon t 1 минус p.
[42:14.120 --> 42:15.120]  В p мы считаем не больше единицы, поэтому все.
[42:16.120 --> 42:17.120]  Ну, сейчас я вот, ну, я распишу, распишу.
[42:17.120 --> 42:18.120]  Вот.
[42:19.120 --> 42:26.120]  Ну, то есть, если я добавлю к epsilon вот delta epsilon, то как бы получилось то же, что было раньше, плюс delta epsilon умножить на вот это.
[42:27.120 --> 42:29.120]  А вот это не меньше нуля.
[42:30.120 --> 42:31.120]  Да.
[42:32.120 --> 42:34.120]  Ну, потому что мы верим, что p от t, наверное, не больше единицы.
[42:35.120 --> 42:36.120]  Значит, при влечении t.
[42:37.120 --> 42:38.120]  Ну, в этом влечении t.
[42:39.120 --> 42:40.120]  А вот это не меньше нуля.
[42:41.120 --> 42:43.120]  Ну, потому что мы верим, что p от t, наверное, не больше единицы.
[42:44.120 --> 42:45.120]  Значит, при влечении t.
[42:46.120 --> 42:47.120]  Ну, в давлении epsilon что-то.
[42:48.120 --> 42:52.120]  Ну, значит, получается, при увеличении epsilon эта штука увеличивается.
[42:53.120 --> 42:56.120]  И получается, если мы вместо epsilon заберем на более высокий, то как бы тут получится меньше либо равного.
[42:57.120 --> 42:58.120]  Ну, тогда.
[42:59.120 --> 43:00.120]  А мы знаем, что epsilon t не превосходит от да вторая.
[43:01.120 --> 43:02.120]  Мы подгоняли специально.
[43:03.120 --> 43:04.120]  Поэтому получается так.
[43:05.120 --> 43:07.120]  Но при таком неравенстве p будет с емецкой веницей.
[43:08.120 --> 43:09.120]  Чего?
[43:10.120 --> 43:11.120]  При таком неравенстве p будет с емецкой веницей.
[43:12.120 --> 43:14.120]  Ну, давайте посмотрим какое.
[43:15.120 --> 43:16.120]  Да, наверное, посмотрим.
[43:17.120 --> 43:19.120]  Ну, давайте посмотрим, какому.
[43:20.120 --> 43:21.120]  Ну, давайте посмотрим.
[43:22.120 --> 43:23.120]  Ну, вот.
[43:24.120 --> 43:25.120]  То есть у нас получается.
[43:26.120 --> 43:27.120]  Ну, да, то есть, конечно.
[43:28.120 --> 43:29.120]  А, ну да, у этого уравнения теперь коль не один.
[43:30.120 --> 43:31.120]  Да.
[43:32.120 --> 43:33.120]  Так.
[43:34.120 --> 43:35.120]  Итак, p от n.
[43:36.120 --> 43:38.120]  Ну, с другой стороны, давайте введем действительно вероятность ошибки.
[43:39.120 --> 43:40.120]  Пусть у меня epsilon not.
[43:41.120 --> 43:45.120]  То есть, допустим, epsilon n равно 1 минус p от n.
[43:46.120 --> 43:47.120]  Можем такое сказать?
[43:48.120 --> 43:50.120]  1 epsilon это вероятность чего?
[43:51.120 --> 43:53.120]  Ну, то есть, p от n была верхняя оценка на вероятность ошибки.
[43:54.120 --> 43:55.120]  А epsilon n получается, это нам.
[43:56.120 --> 43:57.120]  Ну, давайте лучше q от n введем.
[43:58.120 --> 43:59.120]  Это нижняя оценка на вероятность того, что все в порядке.
[44:02.120 --> 44:03.120]  Да.
[44:04.120 --> 44:05.120]  Тогда мы можем написать следующее.
[44:05.120 --> 44:06.120]  Мы можем написать следующее.
[44:07.120 --> 44:10.120]  Что 1 минус q от n не превосходит 1 четвертая на.
[44:11.120 --> 44:12.120]  Сколько там?
[44:13.120 --> 44:16.120]  На 2 минус q от n.
[44:17.120 --> 44:18.120]  В квадрате.
[44:21.120 --> 44:22.120]  Согласны?
[44:23.120 --> 44:24.120]  Да.
[44:25.120 --> 44:26.120]  Так, ну или что?
[44:27.120 --> 44:28.120]  То же самое.
[44:29.120 --> 44:30.120]  1 минус q от n получается.
[44:31.120 --> 44:32.120]  Меньше либо равно.
[44:32.120 --> 44:37.120]  4 минус 4 q от n плюс q в квадрате от n.
[44:38.120 --> 44:40.120]  Смотри, это не q от n, а q от t.
[44:41.120 --> 44:43.120]  Ну, хорошо, q от n.
[44:44.120 --> 44:45.120]  О, q от t, хорошо.
[44:47.120 --> 44:48.120]  Так.
[44:55.120 --> 44:56.120]  Можем еще куда-нибудь.
[44:57.120 --> 45:05.120]  Ну да, то есть это равно у нас 1 минус q от t плюс q в квадрате t поделить на 4.
[45:08.120 --> 45:20.120]  Но отсюда следует, что q от n, оно на самом деле получается больше либо равно, чем q от t минус q в квадрате t поделить на 4.
[45:27.120 --> 45:28.120]  Что стремится?
[45:29.120 --> 45:30.120]  К нулю.
[45:31.120 --> 45:34.120]  Ну может, ну надо бы даже не стремиться к нулю, а каким образом.
[45:44.120 --> 45:45.120]  Вот.
[45:47.120 --> 45:53.120]  Вот действительно нет, просто хочется отсюда выяснить, что q от n, там это значит больше либо равно, чем q от t.
[45:54.120 --> 45:59.120]  Ну, типа можно ценить как 3 четверти в степени 2 лог 2 н.
[46:00.120 --> 46:01.120]  Чего 3?
[46:02.120 --> 46:03.120]  3 четверти в степени 2 лог 2 н.
[46:04.120 --> 46:09.120]  Ну, у нас это хотя бы, ну это равно q от t на 1 минус q от t 9 на 4.
[46:10.120 --> 46:14.120]  То есть, q от t хотя бы q от t на 3 четверти.
[46:15.120 --> 46:17.120]  Но это не очень хорошо.
[46:18.120 --> 46:24.120]  Так, нет, ну почему? Это больше либо равно 3 четверти q от t, да?
[46:25.120 --> 46:26.120]  Так хочется написать?
[46:27.120 --> 46:28.120]  Так можно написать.
[46:31.120 --> 46:32.120]  А может q от t ни больше ни меньше?
[46:33.120 --> 46:34.120]  Нет, ну как вам сказать?
[46:41.120 --> 46:42.120]  Нет, ну что не так?
[46:42.120 --> 46:43.120]  Что не так?
[46:45.120 --> 46:56.120]  Но заметим, что, то есть получается, ну из этого можно вывести, что q от n это на самом деле, то есть больше либо равно, чем 3 четверти в степени.
[46:59.120 --> 47:02.120]  В общем, что-то о от логарифма n короче.
[47:02.120 --> 47:04.120]  Писать о в степени, конечно, опасно вечно, но в целом, да.
[47:06.120 --> 47:07.120]  Ну да.
[47:08.120 --> 47:09.120]  Ну да, тут да, дальше.
[47:10.120 --> 47:11.120]  Нет, ну почему?
[47:12.120 --> 47:14.120]  Нет, ну главное тут с ней аккуратно бороться, но да, тут какое-то о.
[47:15.120 --> 47:16.120]  Откуда мы взяли это?
[47:17.120 --> 47:18.120]  Ну потому что...
[47:19.120 --> 47:20.120]  Ну потому что...
[47:21.120 --> 47:22.120]  А сколько берется?
[47:23.120 --> 47:24.120]  Ну потому что...
[47:25.120 --> 47:26.120]  А сколько берется?
[47:27.120 --> 47:28.120]  Ну потому что...
[47:29.120 --> 47:30.120]  Ну потому что...
[47:30.120 --> 47:31.120]  А сколько берется?
[47:32.120 --> 47:34.120]  t это примерно, это примерно n поделить на корень из двух.
[47:39.120 --> 47:47.120]  Раз оно, ну вот, то есть получается, как бы, мы будем, получается, рекурсивно сходиться вот к t, n уменьшать, вот, делить на корень из двух, сколько-то раз, пока оно не дойдет до двойки.
[47:48.120 --> 47:51.120]  И там уже этот q будет равно единице.
[47:54.120 --> 47:59.120]  И тогда получится, что 3 четверти, ну вот, получается, вот, о, логарифм раз мы это сделали.
[48:01.120 --> 48:02.120]  И вот...
[48:03.120 --> 48:06.120]  То есть получается больше, либо 3 четверти, сколько раз мы это делали.
[48:08.120 --> 48:12.120]  Ну там, сколько раз мы делили на корень из двух, ну получается, что-то типа...
[48:13.120 --> 48:16.120]  Ну там, видите, то есть проблема в том, что мы тут не просто делили, а еще и там куда-то там округляли.
[48:19.120 --> 48:26.120]  Поэтому давайте вот, ну там, ладно, верхний оцент, ну, наверное, поверим, что это там какой-нибудь три логарифма двоичных l.
[48:27.120 --> 48:31.120]  Ну если бы нам не нравится ложка в степени, то как-то 3 двоичных логарифма.
[48:32.120 --> 48:36.120]  Ну, бляжь, подозрение, что в как-то 3 двоичных логарифмах, наверное, мы как-нибудь уложимся, да?
[48:40.120 --> 48:42.120]  Ну, пока что оно не очень подойдет.
[48:43.120 --> 48:45.120]  А, ну, типа...
[48:46.120 --> 48:48.120]  Такое рекуррентное имя ранее стало?
[48:49.120 --> 48:50.120]  Ну да, что?
[48:51.120 --> 48:52.120]  Ну, просто...
[48:53.120 --> 48:54.120]  Так.
[48:56.120 --> 49:00.120]  Ну вот, ну, то есть три четверти в степени логарифм, да?
[49:03.120 --> 49:10.120]  Ну это, в общем, короче говоря, ладно, три, тут не три, или тут даже какая-нибудь константа С уж явно существующая, да?
[49:13.120 --> 49:17.120]  О, то есть можно тут еще вот эту скобочку ставить, то на самом деле...
[49:18.120 --> 49:23.120]  То есть на самом деле это равно один делить на N в степени какая-то мистическая там константа.
[49:26.120 --> 49:28.120]  Ну вот, то есть это...
[49:29.120 --> 49:34.120]  То есть там, это будет там логарифм двоичный, там четыре трети в степени С.
[49:37.120 --> 49:39.120]  Вот, понятно, да?
[49:46.120 --> 49:51.120]  Ну, правда заметим, что да, получается, что по сравнению с предыдущим легче не стало.
[49:53.120 --> 49:54.120]  Да, потому что да.
[49:54.120 --> 50:01.120]  То есть вероятность того, что не ошибки, это тоже там, видимо, если не аккуратно делать, то получится что-то типа один делить на N в квадрате.
[50:05.120 --> 50:07.120]  Да, видимо, пока не хватает.
[50:08.120 --> 50:13.120]  А теперь давайте подумаем, а что, ну вот, а как бы сделать так, чтобы хватало?
[50:13.120 --> 50:17.120]  А можно попробовать оценить эту штуку поточнее?
[50:18.120 --> 50:23.120]  Вот смотрите, вот у вас QOT это какая-то мистическая величина между 0 и единицей, да?
[50:24.120 --> 50:28.120]  А теперь посмотрим, каков график этой функции от 0 на единицы?
[50:31.120 --> 50:33.120]  Вот, а, хотя может быть...
[50:34.120 --> 50:36.120]  Ну как бы, да, я не знаю.
[50:36.120 --> 50:38.120]  Вот, а, хотя может быть...
[50:39.120 --> 50:44.120]  Ну как бы, да, это такая парабола, причем вершина которой находится где?
[50:46.120 --> 50:50.120]  Ну, в какой-то, ну вот, в какой-то точке типа два.
[50:51.120 --> 50:54.120]  А, ну да, у нас так и получилось, что тогда получается, что...
[50:56.120 --> 50:58.120]  Мистик?
[50:59.120 --> 51:01.120]  Ну, вот, вот, вот.
[51:01.120 --> 51:03.120]  Ну, вот, вот, вот.
[51:06.120 --> 51:10.120]  Ну да, то есть хотим оценить снизу, значит подставляем.
[51:16.120 --> 51:18.120]  Ну да.
[51:19.120 --> 51:22.120]  Так, действительно, да, немножко есть что-то получилось.
[51:22.120 --> 51:24.120]  Ну да.
[51:29.120 --> 51:32.120]  Можно как-то геометрическим, геометрическим рядом?
[51:33.120 --> 51:35.120]  Сейчас.
[51:36.120 --> 51:38.120]  Думаю.
[51:39.120 --> 51:41.120]  Ну, после первой тратцы у нас уже QOT будет больше...
[51:42.120 --> 51:45.120]  Ну, хотим добиться, чтобы тут стояло что-то лучшее, чем один дилет на mst.
[51:46.120 --> 51:49.120]  Ну, после первой тратцы у нас уже будет не больше чем 3,4, да?
[51:49.120 --> 51:53.120]  Потому что даже если кой один, то там 3,4 ровно получается.
[51:54.120 --> 52:01.120]  В следующий раз это должно домножается на число, которое хотя бы 1 минус 3 шестнадцатых.
[52:02.120 --> 52:04.120]  И вот мы можем пытаться умножить такие слагаемые.
[52:05.120 --> 52:08.120]  Каждый раз у нас будет 1 минус предыдущее...
[52:09.120 --> 52:12.120]  1 минус предыдущее предыдущее 3,4, это ужасно.
[52:15.120 --> 52:17.120]  Ну да, нет, просто не интересен как выглядит.
[52:17.120 --> 52:19.120]  Слушай, как бы, можно подведеть там, просто искрисковать, да?
[52:20.120 --> 52:22.120]  Что там ответ скажет? Заметим что.
[52:23.120 --> 52:25.120]  То есть заметим что, докажем по индукции.
[52:26.120 --> 52:28.120]  Ну ладно, придется видимо заметить.
[52:29.120 --> 52:31.120]  Так.
[52:32.120 --> 52:34.120]  Искок там получается.
[52:47.120 --> 52:49.120]  Ну, в общем, так.
[52:50.120 --> 52:52.120]  Ну, кажется, что как-то вот по индукции надо доказать.
[52:53.120 --> 52:58.120]  Что QAT на самом деле больше либо равно 1 минус 3 шестнадцатых.
[52:59.120 --> 53:01.120]  Ну, в общем, так.
[53:02.120 --> 53:04.120]  Ну, в общем, так.
[53:05.120 --> 53:07.120]  Ну, в общем, так.
[53:08.120 --> 53:10.120]  Ну, в общем, так.
[53:11.120 --> 53:13.120]  Ну, в общем, так.
[53:14.120 --> 53:16.120]  Ну, в общем, так.
[53:17.120 --> 53:19.120]  1 дилет на c лог n.
[53:24.120 --> 53:26.120]  Ладно, не ценно.
[53:27.120 --> 53:29.120]  Для какой-то константа d на самом деле вот так.
[53:30.120 --> 53:32.120]  Что вы пишем? d на лог 2n?
[53:33.120 --> 53:35.120]  Да, d на лог 2n.
[53:36.120 --> 53:38.120]  Интересно.
[53:39.120 --> 53:41.120]  Ну вот.
[53:42.120 --> 53:44.120]  Значит, если мы пытаемся доказать по индукции,
[53:44.120 --> 53:46.120]  а, это по любавщику верно.
[53:47.120 --> 53:49.120]  И какой-нибудь константе d.
[53:50.120 --> 53:52.120]  Дальше получается по индукции QAT больше либо равно
[53:53.120 --> 53:55.120]  QAT минус Q квадрат на 4.
[53:56.120 --> 53:58.120]  Теперь замечаем следующее, что это парабола.
[53:59.120 --> 54:01.120]  То есть это у нас парабола.
[54:02.120 --> 54:04.120]  Векшину у нас где-то больше единицы, ветви направлены вниз.
[54:05.120 --> 54:08.120]  Значит, парабола на отрезке от 0 до единицы видимо выглядит как-то монотонно.
[54:11.120 --> 54:13.120]  Ну ладно.
[54:14.120 --> 54:16.120]  Векшину тут где-то есть.
[54:17.120 --> 54:19.120]  И тогда получается, что ее можно,
[54:20.120 --> 54:22.120]  если у нас есть оценка снизу на QAT,
[54:23.120 --> 54:25.120]  то мы можем ею пользоваться.
[54:26.120 --> 54:30.120]  Оценка снизу у нас 1 делить на d лог 2.
[54:31.120 --> 54:33.120]  Ну давайте пока для простоты n поделить на кое-нибудь из двух.
[54:38.120 --> 54:43.120]  Ну вот, минус 1 делить на 4 d квадрат лог 2.
[54:44.120 --> 54:46.120]  Н по единисту.
[54:58.120 --> 55:03.120]  Ну вот, это равно 1 делить на d.
[55:04.120 --> 55:06.120]  Ну что у нас тут получается?
[55:07.120 --> 55:10.120]  То есть это получается лог 2 честный n,
[55:11.120 --> 55:13.120]  минус 1 вторая.
[55:14.120 --> 55:18.120]  Плюс 4 d лог 2 n.
[55:23.120 --> 55:24.120]  Так, нет.
[55:25.120 --> 55:26.120]  Откуда записалось?
[55:27.120 --> 55:29.120]  Нет, это я слишком, да.
[55:30.120 --> 55:32.120]  Это я тороплю события.
[55:41.120 --> 55:43.120]  Ну давайте так, это равно
[55:44.120 --> 55:48.120]  на d лог 2 честный n корень из двух.
[55:49.120 --> 55:51.120]  Это мы вынесем просто.
[55:52.120 --> 55:59.120]  И здесь мы напишем 1 минус 1 делить на 4 d лог 2 честный n делить на корень из двух.
[56:04.120 --> 56:06.120]  А, лог 2, ну нет.
[56:07.120 --> 56:09.120]  Ну тут квадрат, значит тут лог 2 тоже надо.
[56:10.120 --> 56:12.120]  Вот так вот.
[56:15.120 --> 56:21.120]  Ну так что, это и есть знаменатели.
[56:22.120 --> 56:24.120]  Ну давайте тут порасписываем.
[56:25.120 --> 56:30.120]  1 делить на d лог 2 честный n делить на корень из двух умножить на,
[56:31.120 --> 56:37.120]  смотрите, 4 d умножить на лог 2 честный n минус 1 вторая,
[56:37.120 --> 56:44.120]  минус 1 делить на, сколько там, 4 d лог 2 n корень из двух.
[56:46.120 --> 56:47.120]  Вот.
[56:49.120 --> 56:56.120]  Ну по большому счету, если мы это оцениваем сверху, то заметим, что получится минус 2 d, что там получится, да?
[56:59.120 --> 57:04.120]  1 делить на d лог 2 честный n корень из двух.
[57:04.120 --> 57:07.120]  Ну на самом деле тут с формулировкой так же.
[57:08.120 --> 57:14.120]  При каком-то достаточно адекватном d, да, ну тут как бы минус получится, минус 2 d, минус 1, да?
[57:15.120 --> 57:20.120]  А тут получается, а тут получается минус d пополам получается, да?
[57:21.120 --> 57:25.120]  Поэтому там, поэтому есть подозрение, что тут при больше либо равно,
[57:26.120 --> 57:30.120]  по-моему, кажется, с кем-то из этих шлеп-шлепов можно и по сокращать.
[57:31.120 --> 57:33.120]  Или нет?
[57:34.120 --> 57:39.120]  Ну, не потратите.
[57:40.120 --> 57:42.120]  Ну давайте смотреть.
[57:43.120 --> 57:54.120]  Итак, туда нам, ну да, хотя нам бы, конечно, в идеале как бы, он называется, d лог n откуда, откуда бы выкавырить.
[57:55.120 --> 57:59.120]  Сейчас, мне кажется, то, что мы приписали в виде дробис, скобку, это только хуже делал.
[58:00.120 --> 58:06.120]  Потому что мы хотим уже сказать, что тут 1 делить на d лог 2, n делить на корень из двух, на эту скобку хотя бы 1 делить на d лог 2n, да?
[58:07.120 --> 58:08.120]  Очень хотим.
[58:09.120 --> 58:13.120]  Ну если вот перенести в разные стороны, там очень хорошо вынесется, там останется все типа.
[58:14.120 --> 58:15.120]  Ну давайте.
[58:16.120 --> 58:17.120]  Так, давайте-ка.
[58:18.120 --> 58:22.120]  Там вынесется 1 вторая, хотя бы 1 делить на, как раз, 4 d квадратные.
[58:23.120 --> 58:24.120]  Ну давайте разбираться.
[58:25.120 --> 58:40.120]  Значит, у нас тут есть 1 делить на лог 2, n делить на корень из двух, минус, сколько там, квадрат поделить до 4, минус 1 делить на 4d, лог квадрат, n делить на корень из двух.
[58:41.120 --> 58:43.120]  Мы хотим, чтобы это было больше.
[58:44.120 --> 58:45.120]  Четырнадцать д квадрат, наверное?
[58:46.120 --> 58:47.120]  Да, квадрат, конечно, да.
[58:48.120 --> 58:49.120]  И хотим, чтобы тут был лог 2n.
[58:49.120 --> 58:54.120]  Ну и причем в том, что d-шка убилась, одна, да?
[58:55.120 --> 58:56.120]  Наверное, как и макияж.
[58:57.120 --> 58:58.120]  Так.
[58:59.120 --> 59:17.120]  Ну и получается, что 1 делить на лог 2, n делить на корень из двух, минус 1 делить на лог 2n, должен быть больше либо равен, чем 1 делить на 4d, и это нет.
[59:18.120 --> 59:19.120]  Вот.
[59:20.120 --> 59:21.120]  Вот.
[59:22.120 --> 59:23.120]  Вот.
[59:24.120 --> 59:25.120]  Макияж.
[59:26.120 --> 59:27.120]  Так.
[59:28.120 --> 59:30.120]  Так, а тут у нас что получается?
[59:31.120 --> 59:38.120]  Так, а это получается равно, если я правильно понимаю, одна вторая поделить на вот эти вот эпические логарифмы, да?
[59:40.120 --> 59:45.120]  Вот это я правильно понимаю?
[59:45.120 --> 59:50.120]  А, нет, вы здесь лучше так не делаете.
[59:51.120 --> 01:00:00.120]  Ходим на двух, больше либо равно 1 делить на 4d, лог 2, n делить на корень из двух.
[01:00:01.120 --> 01:00:03.120]  Ну тогда видим шлеп, видим шлеп.
[01:00:04.120 --> 01:00:09.120]  А, а еще видим шлеп, и видим тут шлепы, аж и шлепы два.
[01:00:09.120 --> 01:00:20.120]  У нас не нравится было, что код n больше или меньше, а код t, код t, и почему вы там эти подставляете?
[01:00:21.120 --> 01:00:23.120]  Это n на корень из двух.
[01:00:24.120 --> 01:00:25.120]  Да, в тему подставляем.
[01:00:26.120 --> 01:00:27.120]  Да, вот это все.
[01:00:28.120 --> 01:00:29.120]  Ой, опять, то же самое.
[01:00:30.120 --> 01:00:39.120]  И тут получается, да, 2d должно быть больше либо равно, чем лог 2, n делить на лог 2, n поделить на корень из двух.
[01:00:40.120 --> 01:00:50.120]  Ну, что равно лог 2, n поделить на лог 2, n поделить на корень, n на n минус одна вторая.
[01:00:51.120 --> 01:00:57.120]  В общем, что-то мне подсказывает, что при д больше либо равно двух, верно, вообще всегда.
[01:00:58.120 --> 01:00:59.120]  Ну да.
[01:01:00.120 --> 01:01:06.120]  Единственная же проблема, что t это n поделить на корень из двух, а n поделить на корень из двух плюс один.
[01:01:07.120 --> 01:01:09.120]  Поэтому, видимо, замнем.
[01:01:10.120 --> 01:01:12.120]  Да, замнем для ясности, видимо.
[01:01:14.120 --> 01:01:15.120]  Вот.
[01:01:16.120 --> 01:01:21.120]  Ну, это там уже замнем, но я бы уже поверил, что там уже выкручивается.
[01:01:24.120 --> 01:01:25.120]  Вот.
[01:01:26.120 --> 01:01:36.120]  То есть таким образом, да, к сожалению, для меня пока осталась загадка, как можно это увидеть, что тут как бы 1 делить на o от логарифа.
[01:01:38.120 --> 01:01:39.120]  Вот.
[01:01:40.120 --> 01:01:42.120]  Но, в чем это нас приводит?
[01:01:43.120 --> 01:01:55.120]  То есть получается, нет, вообще так как бы привело это нас к тому, что вообще так как бы теперь вероятность того, что мы попадем в правильный ответ, теперь уже не менее чем не 2 поделить на n квадрат, а 1 делить на лог.
[01:01:56.120 --> 01:01:58.120]  Ну ладно, 1 делить на там сколько?
[01:01:59.120 --> 01:02:00.120]  Уж два лога.
[01:02:01.120 --> 01:02:02.120]  Неплохо, правда?
[01:02:03.120 --> 01:02:05.120]  И типа мы повторяем это константу логарифом раз?
[01:02:06.120 --> 01:02:07.120]  Ну получается, да.
[01:02:07.120 --> 01:02:19.120]  То есть получается, если мы повторяем этот алгоритм два лога и 1 раз, то получается, что у нас вероятность того, что мы ошибемся, не происходит опять 1 делить на epsilon.
[01:02:20.120 --> 01:02:23.120]  А мы этот повторение делаем только в самом начале, то есть не в каждом курсе.
[01:02:24.120 --> 01:02:25.120]  Ну да.
[01:02:26.120 --> 01:02:34.120]  Просто казалось бы, можно было бы сделать скрип, который сводит та вершина и на та вершину запускает заново алгоритм, который ходит в минимальный разрыв, видимо, не обязательно.
[01:02:35.120 --> 01:02:36.120]  Ну а мы чем занимаемся?
[01:02:37.120 --> 01:02:43.120]  Мы вызываем алгоритм, который рекурсивно вызывает в себя же два раза, и на все это мы навешиваем уже несколько вызовов.
[01:02:44.120 --> 01:02:48.120]  Нет, ну не совсем. Я бы сказал, что мы берем graph и два раза делаем следующее.
[01:02:49.120 --> 01:02:51.120]  Вжимаем оно на t и запускаем все рекурсивно.
[01:02:52.120 --> 01:02:54.120]  Да, и вот этот алгоритм мы повторяем в какой-то там количестве раз?
[01:02:55.120 --> 01:02:57.120]  Ну по высоте, да. По факту дерева получается, да.
[01:03:03.120 --> 01:03:06.120]  Ну вот теперь мы секретов просто закроем, в какую точку мы умеем это делать.
[01:03:07.120 --> 01:03:09.120]  И потом сказать, сколько работает эта штука.
[01:03:10.120 --> 01:03:12.120]  Ну это рекуррент, так сказать.
[01:03:13.120 --> 01:03:15.120]  Ну давайте, что за... Даже можно написать такая.
[01:03:16.120 --> 01:03:21.120]  То есть время работы алгоритма, но это просто не цифра, если вы видите внимание.
[01:03:22.120 --> 01:03:30.120]  Равно на самом деле 2 умножить на какое время нам потребуется, чтобы сделать это сжатие.
[01:03:31.120 --> 01:03:33.120]  Ну, это подряд по-любому.
[01:03:34.120 --> 01:03:37.120]  Сколько мы еще раз... Как мы еще раз решили делать?
[01:03:38.120 --> 01:03:43.120]  Ну вот у нас алгоритм. Мы двумя способами сводим к этой вершину, вызываем рекурсивно.
[01:03:44.120 --> 01:03:47.120]  Весь алгоритм мы повторяем лог раз. Константа на лог раз.
[01:03:48.120 --> 01:03:53.120]  И вот t от n это как бы асимпточка работы именно одной такой террации.
[01:03:54.120 --> 01:03:57.120]  Потом мы еще должны асимпточку на алгоритм.
[01:03:57.120 --> 01:03:58.120]  Ну вот.
[01:03:59.120 --> 01:04:04.120]  Я короче утверждаю, что t от n на самом деле равно это t от n квадрат лог n.
[01:04:07.120 --> 01:04:13.120]  Ну если вы просто раскроете эту штуку, то получится то, что у вас там дальше будет 2 раза n квадрат пополам.
[01:04:14.120 --> 01:04:19.120]  И когда в следующий раз там будет у вас там 4 раза n квадрат поделить на 4, ну и так далее.
[01:04:19.120 --> 01:04:22.120]  Ну может еще раз. Как мы выпускаемся?
[01:04:23.120 --> 01:04:26.120]  Вот короче вот в адрепрете написано, как мы запускаемся.
[01:04:29.120 --> 01:04:31.120]  Если сам алгоритм так делать?
[01:04:32.120 --> 01:04:34.120]  Короче, постал как мы доказали про квадрат.
[01:04:35.120 --> 01:04:36.120]  Ну алгоритм...
[01:04:37.120 --> 01:04:39.120]  Постал как мы доказали, алгоритм не поменялся очевидно.
[01:04:40.120 --> 01:04:42.120]  На чем доказательство было в этом смысле?
[01:04:42.120 --> 01:04:48.120]  Нашел оценку снизу вероятности, поэтому чтобы у тебя все сошлось, тебе надо пустить обратное число этой вероятности.
[01:04:49.120 --> 01:04:52.120]  Да. Все, что мы теперь делаем, это за сколько этот сам алгоритм один работает.
[01:04:53.120 --> 01:04:54.120]  Один завтра сколько работает.
[01:04:55.120 --> 01:04:56.120]  Мы утверждаем, что это n квадрат лог n.
[01:04:57.120 --> 01:04:59.120]  Потому что вот я и рекуинту написал на это.
[01:05:00.120 --> 01:05:02.120]  Вероятность ошибки стремится к 1 леветной.
[01:05:03.120 --> 01:05:04.120]  Ой, на f все равно на n.
[01:05:05.120 --> 01:05:06.120]  На n, да.
[01:05:06.120 --> 01:05:08.120]  Получается работать это будет...
[01:05:09.120 --> 01:05:13.120]  То есть так как мы будем спускать o от логарифа по раз, то там что-то получается типа...
[01:05:14.120 --> 01:05:19.120]  То есть итог 8. получается o от n квадрат лог квадрат n получается.
[01:05:20.120 --> 01:05:21.120]  И вот это уже неплохо.
[01:05:23.120 --> 01:05:25.120]  Но деморрой ради этого...
[01:05:26.120 --> 01:05:29.120]  Не, ну как сказать, нельзя сказать, что это деморрой был в доказательстве.
[01:05:30.120 --> 01:05:31.120]  Потому что мы запутались.
[01:05:32.120 --> 01:05:33.120]  Ну приязвился, если быть точнее.
[01:05:33.120 --> 01:05:35.120]  На самом деле алгоритм в общем-то...
[01:05:36.120 --> 01:05:37.120]  Не супер-сладно пишется, кажется.
[01:05:38.120 --> 01:05:39.120]  Ну тут тоже.
[01:05:40.120 --> 01:05:41.120]  Ну сложнее, конечно, чем в предыдущем.
[01:05:42.120 --> 01:05:45.120]  Ну правда, если вы там не заморачивайтесь и копируете граф, то будет нормально.
[01:05:46.120 --> 01:05:47.120]  Знаете, иногда это полезно.
[01:05:48.120 --> 01:05:52.120]  Я помню, как-то в какой-то момент мне потребовалось написать Centroid Decomposition.
[01:05:53.120 --> 01:05:55.120]  Но мне было дороже, чтобы все слои Centroid Decomposition написать не надо было.
[01:05:56.120 --> 01:05:57.120]  Поэтому я делал так.
[01:05:58.120 --> 01:05:59.120]  Находил Centroid, а потом честно его удалял.
[01:06:00.120 --> 01:06:01.120]  Графы просто честно копировал, честно перенумеровал.
[01:06:01.120 --> 01:06:02.120]  И просто кидал рекурсивно копии.
[01:06:03.120 --> 01:06:04.120]  Вот.
[01:06:05.120 --> 01:06:07.120]  И в результате решение зашло там, за прям вот тут столичком.
[01:06:08.120 --> 01:06:12.120]  Правда, на поверху оказалось, что авторское решение по Centroid Decomposition,
[01:06:13.120 --> 01:06:15.120]  это более простая динамика с доказательством того, что она там...
[01:06:16.120 --> 01:06:18.120]  Сотокладная сентультика ровняет пояс.
[01:06:19.120 --> 01:06:23.120]  То есть, видимо, знаете, после этого хорошая формулировка от Натальи Бондаренко была в одном из контейнеров.
[01:06:24.120 --> 01:06:28.120]  Такое решение оказалось неожиданностью для юри, поэтому оно не заготовило против него тесты.
[01:06:28.120 --> 01:06:29.120]  Ну, то есть, как бы...
[01:06:30.120 --> 01:06:32.120]  Ну, то философский вопрос, конечно, могло ли так быть, потому что, может,
[01:06:33.120 --> 01:06:35.120]  потому что у меня как бы решение было, вроде, с асимптотикой, там, может быть, там,
[01:06:36.120 --> 01:06:38.120]  вроде как, которая должна заходить, по этому месту ответить.
[01:06:39.120 --> 01:06:40.120]  Ладно.
[01:06:41.120 --> 01:06:42.120]  Вот. Ну.
[01:06:43.120 --> 01:06:44.120]  Так, ну что, тут вроде разобрались.
[01:06:45.120 --> 01:06:46.120]  Или нет?
[01:06:47.120 --> 01:06:48.120]  Вроде, да.
[01:06:49.120 --> 01:06:50.120]  Вроде, плюс, да.
[01:06:51.120 --> 01:06:52.120]  Плюс-минус разобрались какие-то, да.
[01:06:53.120 --> 01:06:54.120]  Самый ритм простой.
[01:06:55.120 --> 01:06:56.120]  Ага.
[01:06:56.120 --> 01:06:57.120]  Ага.
[01:06:58.120 --> 01:06:59.120]  Ну, как бы вот, да.
[01:07:00.120 --> 01:07:01.120]  Ну, да, ладно там, совсем.
[01:07:02.120 --> 01:07:03.120]  Ну, мелочи там, ладно, докручиваются.
[01:07:04.120 --> 01:07:06.120]  Видно, что, может, одну там итерацию как-нибудь без этого сделали,
[01:07:07.120 --> 01:07:08.120]  или там что-нибудь еще.
[01:07:09.120 --> 01:07:11.120]  Ну, вот, но это, в общем-то, и не важно.
[01:07:12.120 --> 01:07:15.120]  Можно тут писать N квадрат плюс один, и там все равно обнагружено,
[01:07:16.120 --> 01:07:17.120]  что на каждом уровне там...
[01:07:18.120 --> 01:07:20.120]  Ну, то есть, понятно, что там лишние единицы, которые тут возникают,
[01:07:21.120 --> 01:07:22.120]  пишем вот сюда в N квадрат и не паримся.
[01:07:23.120 --> 01:07:24.120]  В общем, ладно.
[01:07:24.120 --> 01:07:25.120]  В конце концов, что мы зря,
[01:07:26.120 --> 01:07:27.120]  потому что мы в прошлом сервисе там писали это дезак,
[01:07:28.120 --> 01:07:30.120]  которое там визуально было показать, что эти мелочи не ношу не влияют.
[01:07:31.120 --> 01:07:32.120]  Вот, ладно.
[01:07:33.120 --> 01:07:36.120]  Поэтому давайте-ка перейдем к, возможно, еще более красивому.
[01:07:37.120 --> 01:07:38.120]  Еще более красивой ситуации.
[01:07:39.120 --> 01:07:40.120]  Сейчас мы будем минусов искать.
[01:07:43.120 --> 01:07:44.120]  Жалко.
[01:07:45.120 --> 01:07:46.120]  Так.
[01:07:47.120 --> 01:07:48.120]  Не будет.
[01:07:49.120 --> 01:07:50.120]  Так.
[01:07:51.120 --> 01:07:52.120]  Там есть алгоритм, который...
[01:07:53.120 --> 01:07:54.120]  Ищет его с почерствами.
[01:07:55.120 --> 01:07:56.120]  За два раза.
[01:07:57.120 --> 01:07:58.120]  Ага.
[01:07:59.120 --> 01:08:00.120]  За два раза.
[01:08:01.120 --> 01:08:02.120]  За два раза, если что-то.
[01:08:03.120 --> 01:08:04.120]  А дальше...
[01:08:05.120 --> 01:08:06.120]  Это будет абсолютно все.
[01:08:07.120 --> 01:08:08.120]  Ладно.
[01:08:09.120 --> 01:08:10.120]  Нет, ну там начнем с...
[01:08:11.120 --> 01:08:12.120]  Нет, там, видите, главное еще не путать вероятность алгоритма
[01:08:13.120 --> 01:08:14.120]  приближенным алгоритмом.
[01:08:15.120 --> 01:08:16.120]  Может, вероятность алгоритма дать,
[01:08:17.120 --> 01:08:18.120]  что он там работает с крутой вероятностью,
[01:08:18.120 --> 01:08:19.120]  вот, ожиданием приближенным алгоритмом.
[01:08:20.120 --> 01:08:21.120]  Это означает, что он как бы дает ответ,
[01:08:22.120 --> 01:08:24.120]  который не более чем во сколько-то раз превосходит правильность.
[01:08:25.120 --> 01:08:27.120]  Ну, как теория модулируем к, да?
[01:08:28.120 --> 01:08:30.120]  То есть, сделаем ка и ка раз, соединится,
[01:08:31.120 --> 01:08:32.120]  и после этого гарантируем, что правильный ответ
[01:08:33.120 --> 01:08:34.120]  не больше того, что мы нашли, там,
[01:08:35.120 --> 01:08:36.120]  не более чем в ка плюс один поделить на ка раз.
[01:08:37.120 --> 01:08:38.120]  Не важно.
[01:08:39.120 --> 01:08:40.120]  Так, ладно.
[01:08:41.120 --> 01:08:42.120]  Давайте минусов искать.
[01:08:43.120 --> 01:08:44.120]  Так, к сожалению, мы так и не учились искать минусов
[01:08:45.120 --> 01:08:46.120]  за ено-обратную функцию окермана.
[01:08:47.120 --> 01:08:48.120]  Да.
[01:08:49.120 --> 01:08:50.120]  Хотя, казалось бы, зачем софхип учили?
[01:09:01.120 --> 01:09:03.120]  Да ладно, сейчас можно еще будет надевающие понятия,
[01:09:04.120 --> 01:09:05.120]  то, что им не надо.
[01:09:06.120 --> 01:09:07.120]  Сейчас мы его...
[01:09:09.120 --> 01:09:11.120]  Потому что сейчас мы убедимся, что, оказывается,
[01:09:12.120 --> 01:09:14.120]  можно, на самом деле, минусов искать за оркея.
[01:09:15.120 --> 01:09:16.120]  Это можно.
[01:09:17.120 --> 01:09:18.120]  Правда, в смысле, мы это ожидали?
[01:09:19.120 --> 01:09:20.120]  Вот.
[01:09:21.120 --> 01:09:22.120]  Да.
[01:09:23.120 --> 01:09:24.120]  Так вот.
[01:09:25.120 --> 01:09:26.120]  Поехали.
[01:09:27.120 --> 01:09:28.120]  Значит, как искать минусов?
[01:09:29.120 --> 01:09:30.120]  Ну, для этого, чтобы найти минусов, мы вспомним
[01:09:31.120 --> 01:09:33.120]  такой алгоритм, как алгоритм Борувки.
[01:09:34.120 --> 01:09:36.120]  Ну так, это сложный алгоритм?
[01:09:37.120 --> 01:09:38.120]  Нет, это простой.
[01:09:39.120 --> 01:09:40.120]  Нет, нет, нет.
[01:09:41.120 --> 01:09:42.120]  Как бы есть три базовых алгоритма.
[01:09:42.120 --> 01:09:43.120]  Борувка, прямых раскал.
[01:09:44.120 --> 01:09:46.120]  Все остальное это навороты на них.
[01:09:47.120 --> 01:09:48.120]  Значит, напомню, что Борувка,
[01:09:49.120 --> 01:09:50.120]  он работал следующим образом.
[01:09:51.120 --> 01:09:52.120]  Вот у меня есть град,
[01:09:53.120 --> 01:09:54.120]  которым я ищу именно стол.
[01:09:55.120 --> 01:09:57.120]  Ну и допустим, давайте для простоты,
[01:09:58.120 --> 01:09:59.120]  чтобы не заморачиваться, будем считать,
[01:10:00.120 --> 01:10:01.120]  что все лесоребры попарно различны.
[01:10:02.120 --> 01:10:03.120]  Значит, идея такая.
[01:10:04.120 --> 01:10:06.120]  У каждой вершины находим минимальное ребро,
[01:10:07.120 --> 01:10:08.120]  торчащее из нее.
[01:10:09.120 --> 01:10:11.120]  Вот выделяем все эти минимальные ребра,
[01:10:12.120 --> 01:10:15.120]  получается, какой-то набор вот таких вот цепочек.
[01:10:19.120 --> 01:10:20.120]  Цепочек, цепочек.
[01:10:21.120 --> 01:10:22.120]  Анбатя.
[01:10:23.120 --> 01:10:24.120]  А, Брунт, ладно.
[01:10:25.120 --> 01:10:26.120]  Бывает и деревья, да?
[01:10:27.120 --> 01:10:28.120]  Бывают циклы.
[01:10:29.120 --> 01:10:30.120]  Сейчас, в основном, это ориентированный граф,
[01:10:31.120 --> 01:10:32.120]  который вы хотите мне, как бы, начинать.
[01:10:33.120 --> 01:10:34.120]  Это...
[01:10:35.120 --> 01:10:36.120]  Ну как бы могут быть циклы, но мы специально сказали,
[01:10:37.120 --> 01:10:38.120]  чтобы все было попарно различны.
[01:10:39.120 --> 01:10:40.120]  Ребра были попарно различны для того,
[01:10:40.120 --> 01:10:42.120]  чтобы у нас все упиралось в какое-то ребро,
[01:10:43.120 --> 01:10:44.120]  которое тут с две стороны пошло.
[01:10:45.120 --> 01:10:46.120]  Да, вот.
[01:10:47.120 --> 01:10:48.120]  Ну, получается, деревья, короче, мы их там,
[01:10:49.120 --> 01:10:51.120]  типа, мы там, с помощью там, в ленной разрезе
[01:10:52.120 --> 01:10:53.120]  можем показать, что, действительно,
[01:10:54.120 --> 01:10:56.120]  эта часть миностово сжимаем и радуемся.
[01:10:57.120 --> 01:10:59.120]  Это называется шаг борубки.
[01:11:00.120 --> 01:11:02.120]  Как еще раз смотришь на это?
[01:11:03.120 --> 01:11:05.120]  Ну, для каждой вершины мы добавляем в миностов
[01:11:06.120 --> 01:11:07.120]  минимальное ребро, торчащее из нее.
[01:11:07.120 --> 01:11:09.120]  То есть, можно аккуратно применить там,
[01:11:10.120 --> 01:11:12.120]  лему об безопасном ребре в последовательном,
[01:11:13.120 --> 01:11:14.120]  но можно показать, что этих серебра
[01:11:15.120 --> 01:11:16.120]  можно одновременно добавить в миностов.
[01:11:17.120 --> 01:11:19.120]  Ну, и конечно, сжать компоненты связанности.
[01:11:20.120 --> 01:11:22.120]  Ну, приятность этого шага заключается в том,
[01:11:23.120 --> 01:11:27.120]  что количество вершин В уменьшается хотя бы в два раза.
[01:11:28.120 --> 01:11:30.120]  Помните, да? Было дело?
[01:11:31.120 --> 01:11:33.120]  Ну, видимо, два дечи.
[01:11:34.120 --> 01:11:35.120]  Вот.
[01:11:35.120 --> 01:11:37.120]  Сейчас, Зай, еще раз, как мы сжимаем?
[01:11:38.120 --> 01:11:40.120]  Ну, просто все эти ребра сжимаем.
[01:11:41.120 --> 01:11:43.120]  Для каждой вершины мы в восторг добавляем
[01:11:44.120 --> 01:11:46.120]  минимальное ребро, торчащее из этой вершины.
[01:11:47.120 --> 01:11:49.120]  Если рассмотреть все эти ребра для каждой вершины,
[01:11:50.120 --> 01:11:52.120]  то получится набор компонент связанности.
[01:11:53.120 --> 01:11:55.120]  Ну, реброда добавляем только если оно берет вершину,
[01:11:56.120 --> 01:11:57.120]  из которой еще не было ничего.
[01:11:58.120 --> 01:11:59.120]  Нет, это не важно.
[01:12:00.120 --> 01:12:01.120]  Ну, а если треугольные?
[01:12:02.120 --> 01:12:03.120]  Не может быть.
[01:12:03.120 --> 01:12:04.120]  Если у тебя зациклится,
[01:12:05.120 --> 01:12:06.120]  то ты в первую вершину пришел с меньшим ребром,
[01:12:07.120 --> 01:12:08.120]  чем из нее вышел, это невозможно.
[01:12:11.120 --> 01:12:12.120]  А равных софтных?
[01:12:13.120 --> 01:12:14.120]  А равных нет.
[01:12:15.120 --> 01:12:16.120]  Вот ровно для того, чтобы циклов не было,
[01:12:17.120 --> 01:12:18.120]  я говорю, чтобы равных не было.
[01:12:19.120 --> 01:12:20.120]  Ну да, ты отсюда вышел пять,
[01:12:21.120 --> 01:12:22.120]  сюда вышел три,
[01:12:23.120 --> 01:12:24.120]  сюда пошел два,
[01:12:25.120 --> 01:12:26.120]  а потом сюда пришел один.
[01:12:27.120 --> 01:12:28.120]  А какого хрена ты вышел отсюда пять,
[01:12:29.120 --> 01:12:30.120]  если у тебя тут было один?
[01:12:31.120 --> 01:12:32.120]  Все.
[01:12:40.120 --> 01:12:41.120]  Это называется шаг-борувки.
[01:12:42.120 --> 01:12:43.120]  То есть, по идее, есть алгоритм борувки,
[01:12:44.120 --> 01:12:46.120]  изобретенный в далеком 1926 году,
[01:12:47.120 --> 01:12:48.120]  еще до появления компонентов.
[01:12:49.120 --> 01:12:50.120]  Заключается в том, что давайте сделаем
[01:12:51.120 --> 01:12:55.120]  логарифм В шагов борувки.
[01:12:56.120 --> 01:12:57.120]  Или сколько там надо.
[01:12:58.120 --> 01:12:59.120]  И получится уже, в принципе,
[01:13:00.120 --> 01:13:01.120]  логарифм за елом В.
[01:13:03.120 --> 01:13:04.120]  Вот.
[01:13:05.120 --> 01:13:06.120]  Это один из базовых логов.
[01:13:07.120 --> 01:13:08.120]  То есть, уже в 50-е годы появились алгоритм Прима
[01:13:09.120 --> 01:13:10.120]  и алгоритм Краскала.
[01:13:11.120 --> 01:13:12.120]  Ну и, в общем-то, на самом деле,
[01:13:13.120 --> 01:13:14.120]  все остальное, что мы изучали,
[01:13:15.120 --> 01:13:16.120]  это практически модификация первых троп.
[01:13:17.120 --> 01:13:18.120]  То есть, где-то модификация,
[01:13:19.120 --> 01:13:20.120]  добавление каких-то структур,
[01:13:21.120 --> 01:13:22.120]  которые позволяют то ли в Приме,
[01:13:23.120 --> 01:13:24.120]  то ли в Краскале убирать более адекватные ребра,
[01:13:25.120 --> 01:13:26.120]  и так далее и тому подобное.
[01:13:27.120 --> 01:13:28.120]  Вот.
[01:13:28.120 --> 01:13:32.120]  Значит, что нам предлагается делать теперь?
[01:13:33.120 --> 01:13:36.120]  Значит, здесь нам предлагается начать с того,
[01:13:37.120 --> 01:13:40.120]  предлагается делать следующее.
[01:13:41.120 --> 01:13:43.120]  Значит, мы, да, но я скажу так,
[01:13:44.120 --> 01:13:45.120]  мы будем искать, на самом деле,
[01:13:46.120 --> 01:13:47.120]  даже не минимально остовное дерево,
[01:13:48.120 --> 01:13:52.120]  а минимальный остовный лес.
[01:13:52.120 --> 01:13:53.120]  Ну, потому что будем считать,
[01:13:54.120 --> 01:13:55.120]  что иногда граф у нас бывает несвязный,
[01:13:56.120 --> 01:13:57.120]  и тогда надо искать минимальное,
[01:13:58.120 --> 01:13:59.120]  в каждой компоненте еще минус 100.
[01:14:00.120 --> 01:14:01.120]  Понятно, да?
[01:14:02.120 --> 01:14:03.120]  Да.
[01:14:04.120 --> 01:14:05.120]  Ну вот.
[01:14:06.120 --> 01:14:09.120]  Значит, теперь возникает такая идея.
[01:14:11.120 --> 01:14:14.120]  Значит, следующая идея, которая у нас возникает.
[01:14:15.120 --> 01:14:19.120]  Значит, я утверждаю, что мы будем искать
[01:14:20.120 --> 01:14:23.120]  значит, я утверждаю, сейчас будет мистическое утверждение.
[01:14:24.120 --> 01:14:27.120]  Я, может быть, не умею искать за линию минимальный остов,
[01:14:28.120 --> 01:14:30.120]  но я умею за линию проверять,
[01:14:31.120 --> 01:14:34.120]  является ли остов минимальный,
[01:14:35.120 --> 01:14:36.120]  заданный остов минимальный.
[01:14:37.120 --> 01:14:39.120]  Или переформулирую задачи.
[01:14:40.120 --> 01:14:41.120]  Вот, допустим, у меня есть какой-то граф,
[01:14:42.120 --> 01:14:44.120]  какой-то там веселый граф,
[01:14:44.120 --> 01:14:46.120]  и, допустим, у него есть остов.
[01:14:53.120 --> 01:14:54.120]  Какой?
[01:14:55.120 --> 01:14:56.120]  Какой?
[01:14:57.120 --> 01:14:58.120]  У него, да.
[01:15:11.120 --> 01:15:12.120]  Ну, допустим.
[01:15:12.120 --> 01:15:19.120]  И теперь идея следующая. Я хочу понять, минимальный это остов или нет. Как мне это сделать?
[01:15:19.120 --> 01:15:26.120]  Рассмотрим связанный граф, рассмотрим какой-то остов в нем.
[01:15:26.120 --> 01:15:32.120]  Ну, это типа говорим, что если граф не связанный, будем искать минимальный остовный лес.
[01:15:32.120 --> 01:15:40.120]  А так вот, давайте допустим пока еще есть связанный граф, и в нем есть остов какой-то.
[01:15:40.120 --> 01:15:45.120]  Я хочу проверить, является он минимальным или нет.
[01:15:45.120 --> 01:15:48.120]  Как я это буду проверять?
[01:15:48.120 --> 01:15:51.120]  На уровне идеи возникает следующее.
[01:15:51.120 --> 01:15:54.120]  Помните, у нас была вся рема.
[01:15:54.120 --> 01:16:04.120]  Остов является минимальным тогда и только тогда, когда любой ребро не из остова является максимумом на стягиваемом цикле.
[01:16:04.120 --> 01:16:08.120]  Эта задача была, кто-то ее даже сдавал.
[01:16:08.120 --> 01:16:23.120]  Остов является минимальным тогда и только тогда, когда для любого ребра, необходящего в остов, верно, что это ребро является максимум на стягиваемом им в остове цикле.
[01:16:23.120 --> 01:16:32.120]  Очевидно, что если остов минимальный, то это так, потому что если это ребро меньше кого-то, значит за менее получим меньше.
[01:16:32.120 --> 01:16:40.120]  Но, оказывается, если аккуратно по шамане, то выясняется, что в обратную сторону тоже работает.
[01:16:40.120 --> 01:16:48.120]  И отсюда следовало еще приятная вещь, что если у нас все ребра попали на различие, то минус-стов вообще один.
[01:16:48.120 --> 01:16:53.120]  Красивая лемма, но сейчас это не так принципиально, но вот такой критерий был.
[01:16:53.120 --> 01:16:59.120]  Поэтому теперь нам надо просто научиться проверять этот критерий.
[01:16:59.120 --> 01:17:07.120]  Можем даже попробовать там 5 минут, или просто поверить, что, оказывается, за от В плюс Е это делается.
[01:17:08.120 --> 01:17:10.120]  При помощи DX.
[01:17:16.120 --> 01:17:18.120]  Нет, ну как сказать.
[01:17:18.120 --> 01:17:26.120]  Ну да, то есть фактически задача в том, что дано дерево, но учитесь, пожалуйста, в оффлайне искать пути.
[01:17:26.120 --> 01:17:29.120]  Там не просто пути, а максимум на пути.
[01:17:29.120 --> 01:17:34.120]  То есть длину-то пути найти не сложно, потому что Сашку умеете там золотой единицы искать при подсчете.
[01:17:34.120 --> 01:17:37.120]  Ну и тебе там фарфол бендерами.
[01:17:37.120 --> 01:17:41.120]  А вот как искать максимум на этом пути, вот это, конечно, весело.
[01:17:45.120 --> 01:17:46.120]  Интересно.
[01:17:46.120 --> 01:17:50.120]  Но это на одной трассе? В смысле, за от В плюс Е прям проверить?
[01:17:50.120 --> 01:17:54.120]  Ну, вот, ввижай, что за от В плюс Е для всех этих критерий в оффлайне это можно проверить.
[01:17:54.120 --> 01:17:56.120]  Без предпочтений.
[01:17:57.120 --> 01:18:00.120]  Это каким-то вот мистическим образом утверждается.
[01:18:01.120 --> 01:18:03.120]  Не знаю каким, но вот утверждается.
[01:18:03.120 --> 01:18:05.120]  Кратные ребра у нас есть?
[01:18:07.120 --> 01:18:09.120]  Ну, может быть.
[01:18:09.120 --> 01:18:12.120]  Ну, почему? Может и с кратными.
[01:18:12.120 --> 01:18:14.120]  А чем вам тут кратные ребра пофиг?
[01:18:14.120 --> 01:18:16.120]  Ну ладно, кратные ребра это никогда не проблема.
[01:18:16.120 --> 01:18:19.120]  Потому что вы за В плюс Е можете от кратных ребр всегда избавиться.
[01:18:21.120 --> 01:18:22.120]  Ну, правда.
[01:18:22.120 --> 01:18:26.120]  Так что, если так хочется, можете считать, что их нет.
[01:18:30.120 --> 01:18:34.120]  Отсортируем ребра за Е по вершинам и сожмем кратные.
[01:18:34.120 --> 01:18:36.120]  Там всех кратных оставим и просто минимальным весом.
[01:18:39.120 --> 01:18:40.120]  Да, это за Е делается.
[01:18:40.120 --> 01:18:42.120]  Вспоминайте, что это, например, суффиксный массив.
[01:18:43.120 --> 01:18:47.120]  Ну, там пара чисел от 1 до N отсортировать за от N.
[01:18:48.120 --> 01:18:50.120]  А, да, все, да.
[01:18:50.120 --> 01:18:52.120]  Вот это вот, да.
[01:18:52.120 --> 01:18:54.120]  Ну, или там, я не знаю.
[01:18:54.120 --> 01:18:56.120]  Она родимая, да?
[01:18:57.120 --> 01:18:58.120]  Она родимая.
[01:18:58.120 --> 01:19:00.120]  Ну вот, так что, можно поймать?
[01:19:00.120 --> 01:19:03.120]  Нет, мне интересно 5 минут подумать.
[01:19:03.120 --> 01:19:05.120]  Можем мы сейчас придумать такой алгоритм?
[01:19:05.120 --> 01:19:09.120]  Или просто придется соваться, что какой-то там умный хагеруп это умеет делать?
[01:19:09.120 --> 01:19:11.120]  Хагеруп это фамилия, слушаю.
[01:19:13.120 --> 01:19:14.120]  Ну, то есть проверяем.
[01:19:14.120 --> 01:19:18.120]  Для каждого ребра найти верно лишь, что он там больше, чем все остальное.
[01:19:19.120 --> 01:19:21.120]  Все растягиваем.
[01:19:21.120 --> 01:19:26.120]  Ну, я спросил, потому что у нас в основной вальты играю без мокритерия.
[01:19:26.120 --> 01:19:31.120]  Позже все как раз таки ровно не обижающее имя в нашем острове.
[01:19:31.120 --> 01:19:32.120]  Да.
[01:19:34.120 --> 01:19:35.120]  Хочется как...
[01:19:35.120 --> 01:19:36.120]  Ну, да.
[01:19:36.120 --> 01:19:38.120]  Нет, я просто, почему я задумываюсь, потому что обычно я всегда совался,
[01:19:38.120 --> 01:19:42.120]  но в этом семействе у нас как бы произошла норинка в сравнении с предыдущими поколениями.
[01:19:42.120 --> 01:19:45.120]  Мы научились левелом сестер-клеве делать.
[01:19:46.120 --> 01:19:52.120]  То есть мы умеем за оа-темпель подсчета подниматься в подвешенном дереве на любом высоте.
[01:19:55.120 --> 01:19:56.120]  Чего?
[01:19:56.120 --> 01:19:59.120]  Нет, вот я говорю, вот это мы с вами научились делать.
[01:20:00.120 --> 01:20:04.120]  Поэтому вот интересно, нельзя ли модифицировать эту технологию так, чтобы...
[01:20:04.120 --> 01:20:10.120]  Ну, потому что, смотрите, можно как бы свести задачу, потому что все эти голубые ребра, они обратные.
[01:20:10.120 --> 01:20:14.120]  Ну, то есть, смотрите, допустим, мы подвесим это дерево за какую-нибудь вершину, да?
[01:20:15.120 --> 01:20:17.120]  Любую там первую попавшуюся.
[01:20:17.120 --> 01:20:20.120]  Ну, если очень хочется, можно центроить, но я не думаю, что это будет принципиально.
[01:20:23.120 --> 01:20:24.120]  Теперь заметим следующее.
[01:20:24.120 --> 01:20:25.120]  Что я...
[01:20:25.120 --> 01:20:27.120]  Если я теперь рассматриваю ребро, то заметим, что про...
[01:20:27.120 --> 01:20:28.120]  Ну, там вот это...
[01:20:28.120 --> 01:20:34.120]  Элцао этих двух вершин, я умею там как-нибудь искать золотые единицы после линейного предподсчета.
[01:20:35.120 --> 01:20:37.120]  Это даже не левел-анцестер, это фарреш колтон-бендер.
[01:20:38.120 --> 01:20:45.120]  Поэтому, по большому счету, теперь надо подняться вот на этом пути, найти максимум, и вот на этом пути искать максимум.
[01:20:46.120 --> 01:20:53.120]  Поэтому можно сказать, что теперь, как бы, если у нас задача найти максимум на пути, то как бы задача сводится к обратным ребрам.
[01:20:53.120 --> 01:20:55.120]  Там были какие-то спросы, но...
[01:20:58.120 --> 01:21:01.120]  Да, ну вот возникает вопрос, да.
[01:21:02.120 --> 01:21:04.120]  То есть, интересно, нельзя ли там действительно это поупить?
[01:21:05.120 --> 01:21:06.120]  Но мы что-то же...
[01:21:07.120 --> 01:21:09.120]  То есть, правда, вот с максимум просто у нас всегда проблемы.
[01:21:09.120 --> 01:21:10.120]  Ну, спортси-то да.
[01:21:11.120 --> 01:21:12.120]  Мы хотим искать...
[01:21:12.120 --> 01:21:13.120]  Ну, скажем так.
[01:21:13.120 --> 01:21:15.120]  Если бы у нас были двоичные...
[01:21:15.120 --> 01:21:16.120]  Справляю так.
[01:21:16.120 --> 01:21:22.120]  Если бы у нас были двоичные подъемы в полном составе, да, то на самом деле, да, мы могли бы золотые единицы это найти.
[01:21:22.120 --> 01:21:24.120]  Но проблема в том, что двоичные подъемы...
[01:21:24.120 --> 01:21:30.120]  Ну, потому что там, если расстояние между ними равно L, то находим максимальную степень двойки, берем там вот это и вот это.
[01:21:30.120 --> 01:21:33.120]  Там, где мы находим вот это, ну, там поднимаемся за вот эти единицы.
[01:21:34.120 --> 01:21:40.120]  Но проблема в том, что для этого придется насчитать двоичные подъемы, которые у нас, извиняйте, всегда плохие, да.
[01:21:40.120 --> 01:21:42.120]  То есть, по любасику и анлогу.
[01:21:44.120 --> 01:21:51.120]  Поэтому видим, поиск это максимум, значит, придется, значит, делать что-то более умное.
[01:21:52.120 --> 01:22:03.120]  Потому что, к сожалению, да, когда мы поднимались на Level Ancestor Query, мы что-то по пользованию с тем, что, чтобы подняться на высоту 57, можно опуститься на, там, высоту 122, а потом подняться на высоту 179.
[01:22:05.120 --> 01:22:07.120]  Да, этим мы пользовались.
[01:22:08.120 --> 01:22:12.120]  Да, тут с максимумом, тут, к сожалению, так не прокатит, потому что максимум у нас такой необратимый.
[01:22:14.120 --> 01:22:15.120]  Вот, поэтому...
[01:22:16.120 --> 01:22:17.120]  Поэтому, видимо, ну, вот.
[01:22:17.120 --> 01:22:20.120]  Ну, то есть, видимо, правда, это мы еще пытаемся в онлайне как-то делать.
[01:22:20.120 --> 01:22:21.120]  То есть, видимо, может быть...
[01:22:21.120 --> 01:22:25.120]  По аналогии с алгоритмом Тарьянова.
[01:22:25.120 --> 01:22:27.120]  Да, но алгоритм Тарьяна там...
[01:22:28.120 --> 01:22:31.120]  Ну, скажем так, алгоритм Тарьяна, он как бы...
[01:22:31.120 --> 01:22:32.120]  Как бы еще...
[01:22:32.120 --> 01:22:33.120]  Диви, я вижу, там...
[01:22:34.120 --> 01:22:35.120]  Есть идея.
[01:22:36.120 --> 01:22:37.120]  Да, какая?
[01:22:37.120 --> 01:22:39.120]  У нас с Level Ancestor Query мы решали через, там...
[01:22:39.120 --> 01:22:41.120]  Мне кажется, можно делать ровно так же...
[01:22:42.120 --> 01:22:44.120]  Мне кажется, да, можно делать ровно то же самое, что...
[01:22:44.120 --> 01:22:46.120]  У нас с Level Ancestor Query мы храним просто массивы, и можно...
[01:22:46.120 --> 01:22:48.120]  Для них еще есть у них максимумы.
[01:22:48.120 --> 01:22:49.120]  Так.
[01:22:49.120 --> 01:22:51.120]  Прямо максим на пути от вершины вверх.
[01:22:52.120 --> 01:22:57.120]  Так, а, причем, а, там предподсчет можно сделать за линию на этих путях, и за вот единицу по полмаксиму.
[01:22:58.120 --> 01:23:00.120]  И для билеев тоже, да.
[01:23:00.120 --> 01:23:01.120]  Да.
[01:23:01.120 --> 01:23:05.120]  Для вот этих мелких подграфов, которые там до размера небольшим, там понятно, что можно сочетать вообще целиком.
[01:23:06.120 --> 01:23:07.120]  Так.
[01:23:08.120 --> 01:23:10.120]  Ой, боже, да, как тогда...
[01:23:11.120 --> 01:23:14.120]  А, ну так, нет, там, как с повелом, что еще там были эти мелкие графы, на которых надо все предподсчитывать.
[01:23:15.120 --> 01:23:17.120]  А, кстати, а как с ними работать?
[01:23:18.120 --> 01:23:24.120]  Для них понятно, как искать подъем, потому что там просто мы говорим, что изо... ну, там небольшое количество различных.
[01:23:25.120 --> 01:23:26.120]  Не, ну там актами, да.
[01:23:26.120 --> 01:23:28.120]  Да, да, проблема в том, что если теперь...
[01:23:29.120 --> 01:23:34.120]  У нас деревьев было мало, но у нас теперь не просто деревьев, но у нас не деревьев мало, у нас же теперь на каждом ребре еще и вес какой-то висит.
[01:23:35.120 --> 01:23:37.120]  Нет, у этих лесов, конечно, можно сжать координаты.
[01:23:38.120 --> 01:23:47.120]  Нет, сейчас, а можно же сказать, что, типа, у нас вот этих, вот этих подделеев размера, которые губят, да, их там, типа, не больше, чем ОТН делить на бубен.
[01:23:48.120 --> 01:23:49.120]  Да?
[01:23:50.120 --> 01:23:52.120]  А в каждом мы можем просто все пары вершин перебирать, просто, по сути.
[01:23:53.120 --> 01:23:55.120]  И это будет суммарно за небольший смотан работать.
[01:23:56.120 --> 01:23:59.120]  Нет, погоди, ну, проблема в том, что у нас, смотри, тут проблема такая.
[01:24:00.120 --> 01:24:04.120]  Там фишка была такая, то есть самих деревьев типов, действительно, их очень-очень-очень мало.
[01:24:05.120 --> 01:24:06.120]  Да.
[01:24:07.120 --> 01:24:08.120]  Их даже меньше, чем Н делить на ЛОГН.
[01:24:09.120 --> 01:24:17.120]  Да, ну да, там их мало, но я про то, что именно в любом графе таких подделеев, мелких их, не больше, чем ОТН делить на бубен, да, мы эти доказывали.
[01:24:18.120 --> 01:24:19.120]  Да, да.
[01:24:20.120 --> 01:24:22.120]  А в каждом не больше бубен вершин, ну там два бубен, ну вот такого рода.
[01:24:23.120 --> 01:24:24.120]  Ну вот бубен, да.
[01:24:24.120 --> 01:24:26.120]  В каждом из них мы можем просто все пары вершин перебирать, по сути.
[01:24:27.120 --> 01:24:30.120]  Да, но это будет работать N делить на бубен, умножить на бубен в квадрате.
[01:24:31.120 --> 01:24:32.120]  Ой, не было.
[01:24:33.120 --> 01:24:34.120]  Да, что-то я.
[01:24:35.120 --> 01:24:42.120]  То есть нет, полное ощущение, что придется как бы, там, я не знаю, координаты сжимать, что ли, и это вот как-то страшно.
[01:24:43.120 --> 01:24:44.120]  А как мы делали для маленьких деревьев?
[01:24:45.120 --> 01:24:46.120]  Ну, коренат, да, коренат.
[01:24:47.120 --> 01:24:48.120]  Искали инсайны.
[01:24:48.120 --> 01:24:49.120]  Ну, там имелось предуследование.
[01:24:50.120 --> 01:24:55.120]  Во-первых, самое главное, что мы умели, это по дереву запустить DFS, получить строчку длины 2 бубен, ну из 0 и 1.
[01:24:56.120 --> 01:25:00.120]  И сказать, что дерево такого кода у нас, оказывается, уже там где-то есть.
[01:25:01.120 --> 01:25:02.120]  Да.
[01:25:03.120 --> 01:25:04.120]  У нас там...
[01:25:05.120 --> 01:25:06.120]  Ну, мы в нем не предпочитали доказывать.
[01:25:07.120 --> 01:25:08.120]  Нет, по-моему, сейчас, надо вспомнить.
[01:25:09.120 --> 01:25:10.120]  Мы там, по-моему...
[01:25:11.120 --> 01:25:12.120]  А, ну там...
[01:25:13.120 --> 01:25:14.120]  А, нет.
[01:25:15.120 --> 01:25:16.120]  А знаете, в чем фишка?
[01:25:16.120 --> 01:25:17.120]  Ну, у нас был не логорифм.
[01:25:18.120 --> 01:25:20.120]  Бубен-то у нас был логорифм поделить на 4...
[01:25:21.120 --> 01:25:22.120]  На 8.
[01:25:23.120 --> 01:25:25.120]  Поэтому 2 в степени стока еще в квадрате, это нас устраивало.
[01:25:26.120 --> 01:25:27.120]  А, вот.
[01:25:28.120 --> 01:25:29.120]  И тогда все, и тогда...
[01:25:30.120 --> 01:25:31.120]  Ну, тогда у нас деревьев немного.
[01:25:32.120 --> 01:25:33.120]  То есть, перебрать каждый из этих деревьев, нет.
[01:25:34.120 --> 01:25:35.120]  То есть, можно только все типы перебирать.
[01:25:36.120 --> 01:25:38.120]  И тогда это означает, что типы надо сводить.
[01:25:39.120 --> 01:25:42.120]  Ну, надо щука закодировать, тогда получается бесареба, да.
[01:25:43.120 --> 01:25:44.120]  А это плохо, потому что...
[01:25:44.120 --> 01:25:48.120]  Это добавляет, как, ну, типа количество вер tonих деревьев умножается на будден.
[01:25:49.120 --> 01:25:50.120]  Понятно, на кронок unfortunate.
[01:25:50.120 --> 01:25:51.120]  А это совсем много вообще.
[01:25:52.120 --> 01:25:52.620]  Ну, как...
[01:25:53.120 --> 01:25:53.620]  Да.
[01:25:54.120 --> 01:25:56.120]  Ну будден в степень и будден еще.
[01:25:57.120 --> 01:25:59.120]  Ну, это понятно 2 в степени, будден у plotting.
[01:26:00.120 --> 01:26:03.120]  Да, 2 в степени 누рнважается на будден степени и будден, это становится...
[01:26:04.120 --> 01:26:05.120]  Хотя не нормально, в целом.
[01:26:06.120 --> 01:26:09.120]  Потому что 2 в степени будден это корень в восьмом степени зена...
[01:26:10.120 --> 01:26:11.120]  Еще в степени лог-лог-будден.
[01:26:12.120 --> 01:26:13.120]  «Будден – это корень восьмом степени зена».
[01:26:14.120 --> 01:26:16.120]  Бубен это не колень в восьмой степени, бубен это...
[01:26:16.120 --> 01:26:19.120]  Это два в степени бубен, это колень в восьмой степени изен.
[01:26:19.120 --> 01:26:20.120]  Да.
[01:26:20.120 --> 01:26:22.120]  А еще в этой степени...
[01:26:22.120 --> 01:26:24.120]  Бубен можно так делать.
[01:26:24.120 --> 01:26:26.120]  Ну, короче, нет, это многовато круче.
[01:26:26.120 --> 01:26:28.120]  Ну да.
[01:26:28.120 --> 01:26:31.120]  Не, ну не знаю, надо просто это полчаса...
[01:26:31.120 --> 01:26:33.120]  Полчаса...
[01:26:38.120 --> 01:26:40.120]  Не, ну как сказать...
[01:26:40.120 --> 01:26:42.120]  Как жить без проверки?
[01:26:42.120 --> 01:26:44.120]  Ну не знаю...
[01:26:44.120 --> 01:26:46.120]  Ну хочется же...
[01:26:46.120 --> 01:26:48.120]  Нет, то я не знаю, нет, можно как бы поупить,
[01:26:48.120 --> 01:26:50.120]  потому что на самом деле...
[01:26:50.120 --> 01:26:52.120]  Скажем так, внутри каждого мелкого дерева
[01:26:52.120 --> 01:26:54.120]  можно запустить DFS для каждой вершины,
[01:26:54.120 --> 01:26:56.120]  ну хотя бы там запустить,
[01:26:56.120 --> 01:26:59.120]  найти максимум на пути от нее до корня этого мелкого дерева.
[01:26:59.120 --> 01:27:01.120]  Ну это по-любасику можно, да?
[01:27:01.120 --> 01:27:03.120]  Да.
[01:27:03.120 --> 01:27:05.120]  Вот, все что нам останется,
[01:27:05.120 --> 01:27:07.120]  это значит даны куча мелких деревьев
[01:27:07.120 --> 01:27:10.120]  в каждом мелком дереве научиться искать вот такие запросы.
[01:27:12.120 --> 01:27:14.120]  Ну вот, теперь да.
[01:27:14.120 --> 01:27:16.120]  Не выяснится виносом.
[01:27:16.120 --> 01:27:18.120]  Ну да.
[01:27:18.120 --> 01:27:20.120]  Потом выяснится...
[01:27:20.120 --> 01:27:22.120]  А, ну да, потом начнется чьи-чьи.
[01:27:22.120 --> 01:27:25.120]  Давайте в каждом из этих деревьев мы повторим этот алгоритм.
[01:27:27.120 --> 01:27:29.120]  После этого у нас останутся деревья размера,
[01:27:29.120 --> 01:27:32.120]  даже не лограя, но лограя.
[01:27:34.120 --> 01:27:36.120]  И вот ты, ну вот.
[01:27:36.120 --> 01:27:38.120]  Ну в смысле, ну как бы у нас есть,
[01:27:38.120 --> 01:27:41.120]  у нас проблема в том, что у нас осталась куча деревьев размера лограя.
[01:27:41.120 --> 01:27:43.120]  И внутри каждого из них
[01:27:43.120 --> 01:27:45.120]  надо на эти все вот запросы отвечать.
[01:27:45.120 --> 01:27:47.120]  Ну да, понятно, что на практике
[01:27:47.120 --> 01:27:49.120]  легче уже просто ответить и не париться,
[01:27:49.120 --> 01:27:51.120]  но мы умные,
[01:27:51.120 --> 01:27:53.120]  мы как бы пытаемся
[01:27:53.120 --> 01:27:55.120]  предполагать, что у лограев бывает 100 тысяч.
[01:27:55.120 --> 01:27:57.120]  Вот.
[01:27:57.120 --> 01:27:59.120]  И тогда у нас...
[01:27:59.120 --> 01:28:01.120]  И теперь вот возникает вопрос, да,
[01:28:01.120 --> 01:28:03.120]  можно ли вот с мелкими деревьями
[01:28:03.120 --> 01:28:05.120]  на самом деле как-то расквитаться как-то адекватно?
[01:28:05.120 --> 01:28:07.120]  Учитывая, что суммарные их размеры равен N.
[01:28:07.120 --> 01:28:09.120]  Суммарные их размеры равен N.
[01:28:09.120 --> 01:28:11.120]  От N?
[01:28:11.120 --> 01:28:13.120]  Суммарные от N.
[01:28:13.120 --> 01:28:15.120]  Ну от, ну количество вершин там от N суммарно, да.
[01:28:15.120 --> 01:28:17.120]  Ну как бы у нас надо.
[01:28:17.120 --> 01:28:19.120]  Надо вот научиться тоже подниматься
[01:28:19.120 --> 01:28:21.120]  на какие-то высоты для их.
[01:28:21.120 --> 01:28:23.120]  Желательно.
[01:28:23.120 --> 01:28:25.120]  Желательно тоже.
[01:28:25.120 --> 01:28:27.120]  Не меньше, чем суммарные?
[01:28:27.120 --> 01:28:29.120]  Не N, а будет же.
[01:28:29.120 --> 01:28:31.120]  Ну ладно.
[01:28:31.120 --> 01:28:33.120]  Ну ладно, меньше, потому что те, кто там на эти
[01:28:33.120 --> 01:28:35.120]  итоговые вершины не попал, да, не попадают.
[01:28:35.120 --> 01:28:37.120]  Плоть до N.
[01:28:37.120 --> 01:28:39.120]  А синтетически лучше оценить не получится.
[01:28:45.120 --> 01:28:47.120]  Так, хорошо.
[01:28:47.120 --> 01:28:49.120]  Ну как бы слёту можно сделать,
[01:28:49.120 --> 01:28:51.120]  если мы N превратили в log N,
[01:28:51.120 --> 01:28:53.120]  то внутри каждого из этих деревьев
[01:28:53.120 --> 01:28:55.120]  мы можем свести задачу куча, куча, куча
[01:28:55.120 --> 01:28:57.120]  мелких деревьев, размер которых
[01:28:57.120 --> 01:28:59.120]  будет log log N.
[01:28:59.120 --> 01:29:01.120]  Ну тем же самым методом, да?
[01:29:01.120 --> 01:29:03.120]  Да.
[01:29:03.120 --> 01:29:05.120]  В теории.
[01:29:05.120 --> 01:29:07.120]  Нет, потом будет log log N,
[01:29:07.120 --> 01:29:09.120]  потом log log N, можно даже log log log N,
[01:29:09.120 --> 01:29:11.120]  в общем, логится можно любое константное число раз.
[01:29:11.120 --> 01:29:13.120]  Теперь возникает вопрос.
[01:29:13.120 --> 01:29:15.120]  Насколько должны быть мелкие
[01:29:15.120 --> 01:29:17.120]  деревья?
[01:29:19.120 --> 01:29:21.120]  Да, допустим,
[01:29:21.120 --> 01:29:23.120]  давайте я вот сейчас посмотрю.
[01:29:23.120 --> 01:29:25.120]  Log log log N, да?
[01:29:25.120 --> 01:29:27.120]  Да, но внутри
[01:29:27.120 --> 01:29:29.120]  каждого дерева, значит, сколько у нас
[01:29:29.120 --> 01:29:31.120]  деревьев с точностью до
[01:29:31.120 --> 01:29:33.120]  различных, ну там, в каждом из этих
[01:29:33.120 --> 01:29:35.120]  ну да,
[01:29:35.120 --> 01:29:37.120]  правда, проблема в том, что в каждом из этих деревьев
[01:29:37.120 --> 01:29:39.120]  в поле FN мы поделим на log log log N,
[01:29:39.120 --> 01:29:41.120]  мы сжать координаты не можем.
[01:29:43.120 --> 01:29:45.120]  Ну в том плане, что
[01:29:45.120 --> 01:29:47.120]  как бы
[01:29:47.120 --> 01:29:49.120]  но сфагулирую так,
[01:29:49.120 --> 01:29:51.120]  если бы
[01:29:51.120 --> 01:29:53.120]  ну сфагулирую так, мы бы умели
[01:29:53.120 --> 01:29:55.120]  решать задачу, допустим, да,
[01:29:55.120 --> 01:29:57.120]  если бы у нас, ну допустим так, у нас не было бы
[01:29:57.120 --> 01:29:59.120]  проблем, если бы
[01:29:59.120 --> 01:30:01.120]  все
[01:30:01.120 --> 01:30:03.120]  допустим, если бы у нас все веса,
[01:30:03.120 --> 01:30:05.120]  все ребра были бы от 1 до N, допустим, да?
[01:30:09.120 --> 01:30:11.120]  Можем такое допустить?
[01:30:13.120 --> 01:30:15.120]  Еще раз, что мы умели бы решать, если бы все ребра были
[01:30:15.120 --> 01:30:17.120]  от 1 до N, да?
[01:30:17.120 --> 01:30:19.120]  Ну да.
[01:30:21.120 --> 01:30:23.120]  Ну вот, да.
[01:30:23.120 --> 01:30:25.120]  Ну вот.
[01:30:25.120 --> 01:30:27.120]  Ну то есть, тогда если у нас от 1 до N,
[01:30:27.120 --> 01:30:29.120]  то мы во всех этих деревьев можем
[01:30:29.120 --> 01:30:31.120]  решать координаты так, что в каждом из этих деревьев
[01:30:31.120 --> 01:30:33.120]  веса были только вот от 1 до
[01:30:33.120 --> 01:30:35.120]  до размера.
[01:30:35.120 --> 01:30:37.120]  И тогда это привело бы к тому,
[01:30:37.120 --> 01:30:39.120]  что мы их можем успешно кодировать.
[01:30:39.120 --> 01:30:41.120]  Ну то есть, когда мы проходим по ребру,
[01:30:41.120 --> 01:30:43.120]  мы пишем не только 0 к единичку,
[01:30:43.120 --> 01:30:45.120]  но и это вес этого ребра.
[01:30:45.120 --> 01:30:47.120]  Получается, конечно, деревья, когда получается
[01:30:47.120 --> 01:30:49.120]  2 log log log N,
[01:30:51.120 --> 01:30:53.120]  то есть, ну кодов, по крайней мере, да?
[01:30:55.120 --> 01:30:57.120]  Но в степени...
[01:31:09.120 --> 01:31:11.120]  2 умножено...
[01:31:11.120 --> 01:31:13.120]  А, ну в степени log log log, да.
[01:31:15.120 --> 01:31:17.120]  Так.
[01:31:19.120 --> 01:31:21.120]  Ну вот.
[01:31:21.120 --> 01:31:23.120]  То есть, каждая мы, наверное, ну вот, теперь
[01:31:23.120 --> 01:31:25.120]  вот, каким-то называете,
[01:31:25.120 --> 01:31:27.120]  верите ли вы, что это значительно
[01:31:27.120 --> 01:31:29.120]  меньше, чем N?
[01:31:33.120 --> 01:31:35.120]  Как вы думаете?
[01:31:37.120 --> 01:31:39.120]  Да. Да?
[01:31:39.120 --> 01:31:41.120]  Так чему?
[01:31:41.120 --> 01:31:43.120]  Ну, потому что это...
[01:31:43.120 --> 01:31:45.120]  Ну, давайте так.
[01:31:45.120 --> 01:31:47.120]  Это 2 в степени log log log N,
[01:31:47.120 --> 01:31:49.120]  в общем, это log log log N.
[01:31:49.120 --> 01:31:51.120]  Давайте так, связываемся с N, берем угариф,
[01:31:51.120 --> 01:31:53.120]  log log log N,
[01:31:53.120 --> 01:31:55.120]  log log log N.
[01:31:57.120 --> 01:31:59.120]  Сравниваем с log N.
[01:31:59.120 --> 01:32:01.120]  Так, ну понятно, что это меньше, да?
[01:32:01.120 --> 01:32:03.120]  Можно было даже лишний раз не ловить.
[01:32:05.120 --> 01:32:07.120]  Так.
[01:32:07.120 --> 01:32:09.120]  Да, в чем скорее всего, тут можно там и
[01:32:09.120 --> 01:32:11.120]  на 4, и на 8, и на 16 определить.
[01:32:13.120 --> 01:32:15.120]  Да, мы, кажется, победили.
[01:32:15.120 --> 01:32:17.120]  Почти.
[01:32:17.120 --> 01:32:19.120]  Так, значит, заказировать можно, да?
[01:32:19.120 --> 01:32:21.120]  Ну, положить это на вот это вот в квадрате
[01:32:21.120 --> 01:32:23.120]  можно, чтобы там предпочитать все ответы.
[01:32:23.120 --> 01:32:25.120]  Следовательно...
[01:32:25.120 --> 01:32:27.120]  Кем-то внутри каждого
[01:32:27.120 --> 01:32:29.120]  дерева можно предпочитать все ответы,
[01:32:29.120 --> 01:32:31.120]  сохранить их в таблице, возрадоваться. Ура!
[01:32:33.120 --> 01:32:35.120]  А нота водится.
[01:32:35.120 --> 01:32:37.120]  Мы же сейчас живем
[01:32:37.120 --> 01:32:39.120]  в мире, где у нас
[01:32:39.120 --> 01:32:41.120]  чисто кутнобыля.
[01:32:41.120 --> 01:32:43.120]  Черт. Да.
[01:32:43.120 --> 01:32:45.120]  Так, это мы победили, когда у нас все
[01:32:45.120 --> 01:32:47.120]  весогребы, это того да это, да?
[01:32:47.120 --> 01:32:49.120]  Мы их закодировали, потом, когда
[01:32:49.120 --> 01:32:51.120]  берем под дерево закодированное,
[01:32:51.120 --> 01:32:53.120]  мы берем...
[01:32:53.120 --> 01:32:55.120]  делаем все со втором по счетам и радуем.
[01:32:55.120 --> 01:32:57.120]  Ну да.
[01:32:57.120 --> 01:32:59.120]  Во всех их одновременно делается
[01:32:59.120 --> 01:33:01.120]  какое-то сжатие, ну да-да-да.
[01:33:03.120 --> 01:33:05.120]  Да стоит, стоит.
[01:33:05.120 --> 01:33:07.120]  Только какая-то статья.
[01:33:07.120 --> 01:33:09.120]  Да, но это
[01:33:09.120 --> 01:33:11.120]  работает для вот от одного ДМ.
[01:33:11.120 --> 01:33:13.120]  Да.
[01:33:13.120 --> 01:33:15.120]  В идеале бы нам, конечно,
[01:33:15.120 --> 01:33:17.120]  хотелось, чтобы это работало, когда веса являются
[01:33:17.120 --> 01:33:19.120]  этими мистическими камешками.
[01:33:19.120 --> 01:33:21.120]  Камни и силы.
[01:33:21.120 --> 01:33:23.120]  Ага.
[01:33:23.120 --> 01:33:25.120]  Камни и силы.
[01:33:25.120 --> 01:33:27.120]  Камни и силы,
[01:33:27.120 --> 01:33:29.120]  камни и силы.
[01:33:29.120 --> 01:33:31.120]  Это можно сделать?
[01:33:31.120 --> 01:33:33.120]  Ну, как сказать?
[01:33:33.120 --> 01:33:35.120]  Какой-то алгоритм есть.
[01:33:35.120 --> 01:33:37.120]  Вот есть ссылка на статью какую-то.
[01:33:37.120 --> 01:33:39.120]  Мне сейчас стало интересно, не может ли
[01:33:39.120 --> 01:33:41.120]  вы эту статью изобрести своими силами?
[01:33:41.120 --> 01:33:43.120]  Чего? Ну да.
[01:33:43.120 --> 01:33:45.120]  Часть алгоритма будет, что вот
[01:33:45.120 --> 01:33:47.120]  проверьте за О от Н, что тут, что это
[01:33:47.120 --> 01:33:49.120]  минус 100, да или нет.
[01:33:51.120 --> 01:33:53.120]  Более того,
[01:33:53.120 --> 01:33:55.120]  на самом деле тут даже, на самом деле
[01:33:55.120 --> 01:33:57.120]  происходит даже что-то еще более крутое.
[01:33:57.120 --> 01:33:59.120]  То есть нам надо будет,
[01:33:59.120 --> 01:34:01.120]  то есть там этот алгоритм даже утверждает,
[01:34:01.120 --> 01:34:03.120]  что он будет для каждого ребра хранить, оно адекватное
[01:34:03.120 --> 01:34:05.120]  или неадекватное.
[01:34:05.120 --> 01:34:07.120]  Ну, в роли адекватности у нас теперь
[01:34:07.120 --> 01:34:09.120]  как бы, будем говорить так.
[01:34:09.120 --> 01:34:11.120]  То есть я вот даже определение
[01:34:11.120 --> 01:34:13.120]  напишу и после этого, наверное, нам имеет смысл
[01:34:13.120 --> 01:34:15.120]  на перерыв отправиться.
[01:34:17.120 --> 01:34:19.120]  А то что-то как-то уже бубух, да.
[01:34:27.120 --> 01:34:29.120]  Ну, можно и так сказать, да.
[01:34:29.120 --> 01:34:31.120]  То есть определение.
[01:34:31.120 --> 01:34:33.120]  Значит, будем говорить.
[01:34:33.120 --> 01:34:35.120]  Значит, пусть у нас
[01:34:35.120 --> 01:34:37.120]  G равно VE.
[01:34:37.120 --> 01:34:39.120]  Это какой-то граф.
[01:34:41.120 --> 01:34:43.120]  Действительно, и
[01:34:43.120 --> 01:34:45.120]  допустим, и F
[01:34:47.120 --> 01:34:49.120]  остовный лес в нем,
[01:34:49.120 --> 01:34:51.120]  произвольный остовный лес.
[01:34:55.120 --> 01:34:57.120]  Тогда
[01:34:59.120 --> 01:35:01.120]  значит, ребро
[01:35:01.120 --> 01:35:03.120]  значит, тогда
[01:35:03.120 --> 01:35:05.120]  ребро E, которое
[01:35:05.120 --> 01:35:07.120]  не лежит в этом
[01:35:07.120 --> 01:35:09.120]  лесе, да.
[01:35:11.120 --> 01:35:13.120]  Ну, точнее так, ладно, просто
[01:35:13.120 --> 01:35:15.120]  ребро
[01:35:15.120 --> 01:35:17.120]  будем называть его F
[01:35:17.120 --> 01:35:19.120]  тяжелым.
[01:35:25.120 --> 01:35:27.120]  Если E не лежит
[01:35:27.120 --> 01:35:29.120]  в F
[01:35:35.120 --> 01:35:37.120]  и E стягивает
[01:35:41.120 --> 01:35:43.120]  в F
[01:35:43.120 --> 01:35:45.120]  цикл,
[01:35:45.120 --> 01:35:47.120]  на котором
[01:35:49.120 --> 01:35:51.120]  В, вес этого
[01:35:51.120 --> 01:35:53.120]  ребра максимален.
[01:35:59.120 --> 01:36:01.120]  Вот.
[01:36:01.120 --> 01:36:03.120]  Значит, иначе
[01:36:05.120 --> 01:36:07.120]  ребро E называется, ну, как вы уже догадались,
[01:36:07.120 --> 01:36:09.120]  F
[01:36:09.120 --> 01:36:11.120]  есть.
[01:36:15.120 --> 01:36:17.120]  Просто чем, зачем нам
[01:36:17.120 --> 01:36:19.120]  это нужно? Утверждение.
[01:36:21.120 --> 01:36:23.120]  Смотрите, заметьте следующее.
[01:36:23.120 --> 01:36:25.120]  Значит, мистическое утверждение.
[01:36:25.120 --> 01:36:27.120]  Да, напоминаю, что у нас все ребра попарно
[01:36:27.120 --> 01:36:29.120]  различны, да.
[01:36:29.120 --> 01:36:31.120]  Так вот, мистическое утверждение.
[01:36:31.120 --> 01:36:33.120]  Если
[01:36:33.120 --> 01:36:35.120]  Z
[01:36:35.120 --> 01:36:37.120]  легкое,
[01:36:37.120 --> 01:36:39.120]  то есть, допустим,
[01:36:41.120 --> 01:36:43.120]  то есть, наоборот, если
[01:36:43.120 --> 01:36:45.120]  F тяжелое,
[01:36:47.120 --> 01:36:49.120]  хотя бы
[01:36:49.120 --> 01:36:51.120]  для какого-то F,
[01:36:59.120 --> 01:37:01.120]  то
[01:37:01.120 --> 01:37:03.120]  Z
[01:37:03.120 --> 01:37:05.120]  не лежит в
[01:37:05.120 --> 01:37:07.120]  на столе.
[01:37:11.120 --> 01:37:13.120]  Мы же все ощущаем, что все веса различны.
[01:37:13.120 --> 01:37:15.120]  Да.
[01:37:15.120 --> 01:37:17.120]  Да, напоминаю, что
[01:37:17.120 --> 01:37:19.120]  здесь важно. Иначе
[01:37:19.120 --> 01:37:21.120]  все, да, напоминаем,
[01:37:21.120 --> 01:37:23.120]  все веса попарно различны, ну, иначе это утверждение
[01:37:23.120 --> 01:37:25.120]  будет верно.
[01:37:25.120 --> 01:37:27.120]  Понятно, откуда я это
[01:37:27.120 --> 01:37:29.120]  утверждение сделал?
[01:37:35.120 --> 01:37:37.120]  Ну, идея простая.
[01:37:37.120 --> 01:37:39.120]  F это у вас
[01:37:39.120 --> 01:37:41.120]  F тяжелое
[01:37:41.120 --> 01:37:43.120]  или F тяжелое вроде?
[01:37:43.120 --> 01:37:45.120]  Хотя бы для какого-то
[01:37:45.120 --> 01:37:47.120]  основного веса F.
[01:37:47.120 --> 01:37:49.120]  F тяжелое, там F
[01:37:49.120 --> 01:37:51.120]  везде.
[01:37:51.120 --> 01:37:53.120]  Но ребро тяжелое и легкое тасить
[01:37:53.120 --> 01:37:55.120]  на какого-то конкретного
[01:37:55.120 --> 01:37:57.120]  основа F.
[01:37:57.120 --> 01:37:59.120]  А, E
[01:37:59.120 --> 01:38:01.120]  F тяжелое.
[01:38:01.120 --> 01:38:03.120]  Это значит, что есть цикл с
[01:38:03.120 --> 01:38:05.120]  E, на котором E максимально.
[01:38:05.120 --> 01:38:07.120]  Да, по большому счету это значит, что
[01:38:07.120 --> 01:38:09.120]  ребро E устроено так, что есть E
[01:38:09.120 --> 01:38:11.120]  и есть цикл, на котором это E максимально.
[01:38:11.120 --> 01:38:13.120]  Ну, если E не лежит
[01:38:13.120 --> 01:38:15.120]  в миностове, то это очевидно верно.
[01:38:15.120 --> 01:38:17.120]  Ну, потому что E будет...
[01:38:17.120 --> 01:38:19.120]  Так, там наоборот надо, если E...
[01:38:19.120 --> 01:38:21.120]  А, нам в одну сторону, да?
[01:38:21.120 --> 01:38:23.120]  То есть, подвижение такое.
[01:38:23.120 --> 01:38:25.120]  Если E максимум в каком-то цикле,
[01:38:25.120 --> 01:38:27.120]  то Z точно не лежит в миностове.
[01:38:27.120 --> 01:38:29.120]  Ну, это следует, например, из одного
[01:38:29.120 --> 01:38:31.120]  алгоритма, который
[01:38:31.120 --> 01:38:33.120]  к раскалу.
[01:38:33.120 --> 01:38:35.120]  Ну, почему?
[01:38:35.120 --> 01:38:37.120]  С самой раскалой оно не следует.
[01:38:37.120 --> 01:38:39.120]  Ну, следует, потому что значит, что
[01:38:39.120 --> 01:38:41.120]  в момент, когда мы будем брать E,
[01:38:41.120 --> 01:38:43.120]  весь шуруп будет на компоненте.
[01:38:43.120 --> 01:38:45.120]  А, если предполагать, что у нас единственный граф.
[01:38:45.120 --> 01:38:47.120]  Ну, мы же предполагаем очень.
[01:38:47.120 --> 01:38:49.120]  Ну, да, более надежное
[01:38:49.120 --> 01:38:51.120]  доказательство тут звучит так.
[01:38:51.120 --> 01:38:53.120]  То есть, действительно, рассмотрим
[01:38:53.120 --> 01:38:55.120]  миностов с участием E.
[01:38:55.120 --> 01:38:57.120]  Вот, рассмотрим этот
[01:38:57.120 --> 01:38:59.120]  миностов.
[01:38:59.120 --> 01:39:01.120]  Ну вот, и если
[01:39:01.120 --> 01:39:03.120]  ребро удалить, то дерево распадется
[01:39:03.120 --> 01:39:05.120]  на две компоненты связности.
[01:39:05.120 --> 01:39:07.120]  Теперь заметим, если мы рассмотрим
[01:39:07.120 --> 01:39:09.120]  этот цикл, вот этот максимум,
[01:39:09.120 --> 01:39:11.120]  на котором E максимум, да?
[01:39:11.120 --> 01:39:13.120]  То есть, заметим, что на этом цикле найдется хотя
[01:39:13.120 --> 01:39:15.120]  бы одно ребро, которое соединяет эти две
[01:39:15.120 --> 01:39:17.120]  компоненты. Ну, может и несколько
[01:39:17.120 --> 01:39:19.120]  найдется, я не знаю, хотя бы одно найдется.
[01:39:19.120 --> 01:39:21.120]  Но заметим, что когда мы добавим это ребро,
[01:39:21.120 --> 01:39:23.120]  миностов останется остовом, но он строго уменьшится
[01:39:23.120 --> 01:39:25.120]  противоречия.
[01:39:25.120 --> 01:39:27.120]  Вот.
[01:39:27.120 --> 01:39:29.120]  Поэтому вот, забегая вперед,
[01:39:29.120 --> 01:39:31.120]  то есть, общая идея будет такая, я
[01:39:31.120 --> 01:39:33.120]  буду находить каким-то рандомным образом
[01:39:33.120 --> 01:39:35.120]  более-менее адекватные остовные
[01:39:35.120 --> 01:39:37.120]  леса, а потом
[01:39:37.120 --> 01:39:39.120]  за O от V плюс E буду пробегаться
[01:39:39.120 --> 01:39:41.120]  и выкидывать все ребра, которые
[01:39:41.120 --> 01:39:43.120]  оказались тяжелыми относительно E.
[01:39:45.120 --> 01:39:47.120]  Эн от E это что?
[01:39:47.120 --> 01:39:49.120]  Это 19?
[01:39:49.120 --> 01:39:51.120]  Что? Эн от E.
[01:39:51.120 --> 01:39:53.120]  Где? На котором
[01:39:53.120 --> 01:39:55.120]  E максимально. В.
[01:39:55.120 --> 01:39:57.120]  Да.
[01:40:05.120 --> 01:40:07.120]  Ну да. То есть там вообще
[01:40:07.120 --> 01:40:09.120]  чип будет заключаться в том, что
[01:40:09.120 --> 01:40:11.120]  более того, мы будем говорить так,
[01:40:11.120 --> 01:40:13.120]  выкинем там что-нибудь типа половину ребер,
[01:40:13.120 --> 01:40:15.120]  построим миностов,
[01:40:17.120 --> 01:40:19.120]  типа, ну реально построим миностов, потом
[01:40:19.120 --> 01:40:21.120]  проредим, значит берем старые
[01:40:21.120 --> 01:40:23.120]  ребра, выкинем тяжелые, и потом
[01:40:23.120 --> 01:40:25.120]  в итоговом прореженном графе
[01:40:25.120 --> 01:40:27.120]  найдем уже реальный миностов.
[01:40:29.120 --> 01:40:31.120]  Вот примерно в эту сторону будем думать,
[01:40:31.120 --> 01:40:33.120]  ну вот, собственно,
[01:40:33.120 --> 01:40:35.120]  у этого алгоритма будет преимущество, что он будет работать
[01:40:35.120 --> 01:40:37.120]  средним быстро, но и в лучшем случае он будет
[01:40:37.120 --> 01:40:39.120]  работать за адекватного прибыли в итоге.
[01:40:39.120 --> 01:40:41.120]  Но почему это так, мы узнаем
[01:40:41.120 --> 01:40:43.120]  после перерыва.
[01:40:45.120 --> 01:40:47.120]  Так, я прямо сейчас же так и напишу, и так,
[01:40:47.120 --> 01:40:49.120]  веселый алгоритм
[01:40:49.120 --> 01:40:51.120]  рандомизит
[01:40:53.120 --> 01:40:55.120]  МСФ
[01:40:57.120 --> 01:40:59.120]  передаем на ход
[01:40:59.120 --> 01:41:01.120]  ВВЕ
[01:41:03.120 --> 01:41:05.120]  Чего?
[01:41:05.120 --> 01:41:07.120]  Ну передаем
[01:41:07.120 --> 01:41:09.120]  ну можно написать
[01:41:09.120 --> 01:41:11.120]  Ж равно ВВЕ, да.
[01:41:11.120 --> 01:41:13.120]  Давайте.
[01:41:13.120 --> 01:41:15.120]  Ж равно ВВЕ, пожалуйста.
[01:41:15.120 --> 01:41:17.120]  Так, ну давайте, шаг ноль.
[01:41:17.120 --> 01:41:19.120]  В оригинальном алгоритме его нет,
[01:41:19.120 --> 01:41:21.120]  но на всякий случай его примерим.
[01:41:21.120 --> 01:41:23.120]  Избавимся от кратных,
[01:41:23.120 --> 01:41:25.120]  ну вот, избавимся от кратных скребок.
[01:41:37.120 --> 01:41:39.120]  Так, что там еще надо?
[01:41:39.120 --> 01:41:41.120]  Ну еще там
[01:41:41.120 --> 01:41:43.120]  какой-нибудь ноль, там, ноль штрих
[01:41:43.120 --> 01:41:45.120]  как всегда.
[01:41:45.120 --> 01:41:47.120]  Ну ноль штрих там, если, я не знаю,
[01:41:47.120 --> 01:41:49.120]  модуль ВВЕ
[01:41:49.120 --> 01:41:51.120]  ВВЕ меньше либо равно
[01:41:51.120 --> 01:41:53.120]  чего-нибудь, я не знаю, шесть там
[01:41:53.120 --> 01:41:55.120]  от баллы, я пишу сейчас.
[01:41:55.120 --> 01:41:57.120]  То
[01:41:57.120 --> 01:41:59.120]  то найдем анод,
[01:41:59.120 --> 01:42:01.120]  то найдем ответ
[01:42:01.120 --> 01:42:03.120]  как угодно.
[01:42:05.120 --> 01:42:07.120]  Главное, чтобы завод единился.
[01:42:09.120 --> 01:42:11.120]  Ну и так.
[01:42:11.120 --> 01:42:13.120]  Ну а теперь предположим, что рекурсия нам
[01:42:13.120 --> 01:42:15.120]  реально понадобилась.
[01:42:15.120 --> 01:42:17.120]  И
[01:42:17.120 --> 01:42:19.120]  значит,
[01:42:19.120 --> 01:42:21.120]  теперь
[01:42:21.120 --> 01:42:23.120]  ну ладно, да, можно не один, а просто
[01:42:23.120 --> 01:42:25.120]  один. Теперь ладно, шаг два.
[01:42:25.120 --> 01:42:27.120]  Теперь, чтобы синхронизироваться.
[01:42:29.120 --> 01:42:31.120]  Будем делать так.
[01:42:33.120 --> 01:42:35.120]  Сделаем в Ж
[01:42:37.120 --> 01:42:39.120]  три
[01:42:39.120 --> 01:42:41.120]  почему-то шага борувки.
[01:42:45.120 --> 01:42:47.120]  Вот.
[01:42:47.120 --> 01:42:49.120]  Получим
[01:42:49.120 --> 01:42:51.120]  ну получим граф
[01:42:51.120 --> 01:42:53.120]  Ж звездочка, равен
[01:42:53.120 --> 01:42:55.120]  В звездочка, Е звездочка.
[01:42:57.120 --> 01:42:59.120]  Ну, нет, мы увидим, почему нам три.
[01:42:59.120 --> 01:43:01.120]  Ну можно там четыре, пять, шесть делать, но три нам хватит.
[01:43:05.120 --> 01:43:07.120]  Да, Перича?
[01:43:07.120 --> 01:43:09.120]  Давайте еще
[01:43:09.120 --> 01:43:11.120]  возьмем.
[01:43:15.120 --> 01:43:17.120]  Да.
[01:43:17.120 --> 01:43:19.120]  Значит, далее
[01:43:21.120 --> 01:43:23.120]  построим такой граф
[01:43:23.120 --> 01:43:25.120]  H.
[01:43:25.120 --> 01:43:27.120]  H это такой, значит
[01:43:27.120 --> 01:43:29.120]  граф
[01:43:29.120 --> 01:43:31.120]  В звездочка и Е
[01:43:31.120 --> 01:43:33.120]  какой-нибудь еще.
[01:43:39.120 --> 01:43:41.120]  Ладно, Е звездочка, звездочка.
[01:43:41.120 --> 01:43:43.120]  Е звездочка, звездочка.
[01:43:43.120 --> 01:43:45.120]  Е звездочка, звездочка.
[01:43:45.120 --> 01:43:47.120]  Это подмножество Е звездочка.
[01:43:49.120 --> 01:43:51.120]  Вот. Причем
[01:43:51.120 --> 01:43:53.120]  что важно?
[01:43:53.120 --> 01:43:55.120]  Вот причем
[01:43:57.120 --> 01:43:59.120]  вот каждая ребро
[01:44:03.120 --> 01:44:05.120]  каждое ребро из Е звездочка
[01:44:05.120 --> 01:44:07.120]  добавляется
[01:44:09.120 --> 01:44:11.120]  добавляется
[01:44:13.120 --> 01:44:15.120]  соответственно
[01:44:15.120 --> 01:44:17.120]  вот это вот
[01:44:17.120 --> 01:44:19.120]  Е звездочка, звездочка.
[01:44:19.120 --> 01:44:21.120]  С вероятностью
[01:44:21.120 --> 01:44:23.120]  я не буду там писать это независимо
[01:44:23.120 --> 01:44:25.120]  поэтому и так понятно.
[01:44:25.120 --> 01:44:27.120]  С вероятностью П
[01:44:27.120 --> 01:44:29.120]  равно одна вторая.
[01:44:31.120 --> 01:44:33.120]  Ну можно было видимо
[01:44:33.120 --> 01:44:35.120]  еще сказать, давайте выберем половину ребра
[01:44:35.120 --> 01:44:37.120]  какой-нибудь удобный.
[01:44:37.120 --> 01:44:39.120]  Далее
[01:44:39.120 --> 01:44:41.120]  далее алгоритм говорит следующее
[01:44:41.120 --> 01:44:43.120]  F
[01:44:43.120 --> 01:44:45.120]  значит
[01:44:51.120 --> 01:44:53.120]  короче в этом графе найдем
[01:44:53.120 --> 01:44:55.120]  в этом аше
[01:44:55.120 --> 01:44:57.120]  вызовемся
[01:44:57.120 --> 01:44:59.120]  и найдем
[01:44:59.120 --> 01:45:01.120]  миностов, точнее миностов.
[01:45:01.120 --> 01:45:03.120]  Далее
[01:45:07.120 --> 01:45:09.120]  теперь вернемся к
[01:45:09.120 --> 01:45:11.120]  значит вернемся к
[01:45:11.120 --> 01:45:13.120]  Ж звездочка и скажем так
[01:45:13.120 --> 01:45:15.120]  удалим из
[01:45:15.120 --> 01:45:17.120]  Ж звездочка
[01:45:17.120 --> 01:45:19.120]  все
[01:45:19.120 --> 01:45:21.120]  F тяжелые
[01:45:21.120 --> 01:45:23.120]  ребра.
[01:45:23.120 --> 01:45:25.120]  И вот получим
[01:45:25.120 --> 01:45:27.120]  ну допустим полученное
[01:45:27.120 --> 01:45:29.120]  мы обзовем Ж
[01:45:31.120 --> 01:45:33.120]  Оуф, да?
[01:45:33.120 --> 01:45:35.120]  И вот
[01:45:35.120 --> 01:45:37.120]  и вот
[01:45:37.120 --> 01:45:39.120]  и вот
[01:45:39.120 --> 01:45:41.120]  и вот
[01:45:41.120 --> 01:45:43.120]  и вот
[01:45:43.120 --> 01:45:45.120]  и вот
[01:45:45.120 --> 01:45:47.120]  и вот
[01:45:47.120 --> 01:45:49.120]  и вот
[01:45:49.120 --> 01:45:51.120]  и вот
[01:45:51.120 --> 01:45:53.120]  Оуф, да?
[01:45:55.120 --> 01:45:57.120]  Ну что мы сделаем дальше?
[01:45:59.120 --> 01:46:01.120]  Ну дальше мы скажем
[01:46:01.120 --> 01:46:03.120]  что F штрих равно
[01:46:03.120 --> 01:46:05.120]  рандомайст МСТ
[01:46:05.120 --> 01:46:07.120]  от этого же штриха.
[01:46:13.120 --> 01:46:15.120]  Ну и в конце все что там остается
[01:46:15.120 --> 01:46:17.120]  что там остается
[01:46:19.120 --> 01:46:21.120]  вернуть шаг 1
[01:46:23.120 --> 01:46:25.120]  ладно вру
[01:46:25.120 --> 01:46:27.120]  шаг 2
[01:46:27.120 --> 01:46:29.120]  объединенный шагом 6
[01:46:31.120 --> 01:46:33.120]  ну а я то все имею ввиду, да?
[01:46:39.120 --> 01:46:41.120]  шаг 2
[01:46:41.120 --> 01:46:43.120]  объединенный шаг
[01:46:45.120 --> 01:46:47.120]  объединенный шаг
[01:46:49.120 --> 01:46:51.120]  ну смотрите
[01:46:51.120 --> 01:46:53.120]  ну по сути смотрите
[01:46:53.120 --> 01:46:55.120]  мы сделали три шароборувки
[01:46:55.120 --> 01:46:57.120]  в процессе этого шароборувки мы там нашли какие-то
[01:46:57.120 --> 01:46:59.120]  ребра добавили в подтвер
[01:46:59.120 --> 01:47:01.120]  и там жали грав
[01:47:01.120 --> 01:47:03.120]  ну и теперь соответственно
[01:47:03.120 --> 01:47:05.120]  в этом же звездочка
[01:47:05.120 --> 01:47:07.120]  в итоге
[01:47:07.120 --> 01:47:09.120]  в этом же звездочка в итоге
[01:47:09.120 --> 01:47:11.120]  мы нашли минус 1
[01:47:11.120 --> 01:47:13.120]  Обратите внимание алгоритм железобетонно работает
[01:47:13.120 --> 01:47:21.240]  это братьте внимание. По большому счету, да, заметим, что мы просто сделали три шага
[01:47:21.240 --> 01:47:26.720]  борувки, а потом в полученном графе G звездочка нашли миностов. То есть, просто вот этот шаг,
[01:47:26.720 --> 01:47:34.520]  который мы делали, все что он делал, это выкинул какие-то тяжелые ребра. Сейчас. Почему? Мы выкинули
[01:47:34.520 --> 01:47:40.000]  какие-то ребра из G звездой. Нет, мы не выкинули не просто какие-то ребра, а мы выкинули какие-то
[01:47:40.000 --> 01:47:51.120]  тяжелые ребра. Нет, я про третий шаг. Ну. Нет, ну смотрите. Мы вызвали же randomizeMSF от H. Ага. А, окей. Ну, неважно. То есть,
[01:47:51.120 --> 01:48:00.000]  глобально можно это смотреть так. 3, 4, 5. Что это значит? Мы нашли какой-то лес и выкинули из
[01:48:00.000 --> 01:48:04.600]  графа тяжелое относительно этого леса ребра. Ну да. Там другой вопрос, как мы этот лес нашли,
[01:48:04.600 --> 01:48:09.880]  ну как-то. Неважно. Вот. Выкинули, то есть, их точно во столе нет, и в оставшемся мы нашли
[01:48:09.880 --> 01:48:17.120]  ростов. То есть, как бы чуть более сложный путь, но точно миностов ищем. Можно, в принципе, сразу даже
[01:48:17.120 --> 01:48:22.080]  доказать, что на самом деле этот алгоритм не так плохо работает. Но давайте посмотрим,
[01:48:22.080 --> 01:48:29.000]  за сколько этот алгоритм работает в худшем случае, как вы думаете. Ну, заметим, что мы тут все шаги
[01:48:29.000 --> 01:48:39.840]  делаем за V plus E, правда? Есть такое ощущение? Ну, V plus E и рекурсия, да? Ну, вот, например. Заметим,
[01:48:39.840 --> 01:48:46.520]  что в худшем случае, заметим, что после этих трех шагов рекурсии, вот здесь мы вообще потратили
[01:48:46.520 --> 01:48:53.040]  какое-то время и ни черта не выкинули, да? С одной стороны тут ни черта не выкинули, с другой стороны
[01:48:53.040 --> 01:49:00.680]  тут тоже ни черта не выкинули, потому что нам могло фантастически не повести, да? То есть, получается,
[01:49:00.680 --> 01:49:11.240]  в этом худшем случае получается T от VE, ну, если там, ну ладно, T от NM давайте напишу. Оно равно, значит,
[01:49:11.240 --> 01:49:18.040]  O от N plus M. Ну, там вот все вот эти вот шаги, в том числе вот этот. Вот этот, напомню, у нас есть какая-то
[01:49:18.040 --> 01:49:25.880]  черная магия, которая говорит, что мы это за N plus M как-то делаем. Понятно, да? И дальше мы делаем
[01:49:25.880 --> 01:49:35.040]  O от N plus M шагов плюс 2T от, ну, заведомо N поделить на 8 и, возможно, N. Почему N поделить на 8?
[01:49:35.040 --> 01:49:39.960]  Потому что количество вершин вот в этих двух графах N поделить на 8 не более, чем N поделить на 8.
[01:49:39.960 --> 01:49:48.760]  А что такое T от VE? Что ж там? Что такое T от VE? Ну, то, что мы оцениваем, что это? Ну, то же самое, что T от NM.
[01:49:48.760 --> 01:49:54.800]  Ну, сколько времени работает наш алгоритм, если у нас есть N вершины и M вершины? Ну, в худшем случае, естественно, да.
[01:49:54.800 --> 01:50:09.760]  Вот, получается вот такая вот штука. Ну, возникает такой. Ну, вот, можно сказать, естественно, вопрос,
[01:50:09.760 --> 01:50:13.520]  за какое время, сколько у нас в худшем случае получается?
[01:50:31.520 --> 01:50:38.080]  Ну, точно не больше, чем типа N plus M налог. Сколько? N plus M налог.
[01:50:38.080 --> 01:50:49.360]  Ой. Откуда N налог? N plus M налог, потому что мы спускаемся.
[01:50:49.360 --> 01:50:53.840]  Ну, сколько у нас спусков таких? Это типа, алгоритм. Ага, алгоритм. Ну, разве?
[01:50:53.840 --> 01:51:01.360]  Так, а N? Ой, сейчас N. Там же N на 8 и 2? Ну, тут 2, а тут N длит, потому что, ну, тут-то M.
[01:51:01.360 --> 01:51:16.640]  На первом шаге N plus M, на втором шаге N. Ну, то есть, да. Ну, M это будет, получается, да, 1 плюс 2 плюс 4 плюс и так далее,
[01:51:16.640 --> 01:51:30.760]  плюс 2 в степени, короче, лог по основанию 8M. Ну, это сколько? Ну, да, это, на самом деле,
[01:51:30.760 --> 01:51:41.400]  вот это-вот это кубический код низа, то есть, получается от M на... Да, видимо, так оценивать все-таки нельзя.
[01:51:41.400 --> 01:51:49.720]  У нас проблема, что M не уменьшается вообще. Ну, вот да, но почему-то вот M не уменьшается.
[01:51:49.720 --> 01:51:55.480]  Почти его оцениваешь, кажется, или вот там каждый раз мы половину ребра примерно добавляем?
[01:51:55.480 --> 01:52:01.640]  Ну, мы пока рано. Крисси шаг учитывали? Что-что? Крисси шаг учитывали? Нет, единственное, конечно...
[01:52:01.640 --> 01:52:07.640]  Пока нет, мы говорим, что... Так, ну, давайте, не, ну, третий шаг, не, ну, рандом-то не рандом,
[01:52:07.640 --> 01:52:12.840]  вот там просто, может же, казалось бы, не повезти, но с другой стороны, тут заметим, что этот случай не так уж и везет,
[01:52:12.840 --> 01:52:19.160]  потому что если мы предполагаем, что нам фантастически не везет всегда и, действительно, тут ни одно ребро не удаляется,
[01:52:19.160 --> 01:52:29.880]  то заметим, что когда мы второй раз запускаем, у нас, оказывается, запуск не от M, а, ну, вот, ну, на самом деле не от M,
[01:52:29.880 --> 01:52:35.240]  а от M минус N поделить на 8, то есть, на самом деле, там остается количество ребер, когда мы тяжелые удаляем,
[01:52:35.320 --> 01:52:38.280]  остается просто вот N поделить на 8 минус N, правда?
[01:52:39.640 --> 01:52:45.240]  Ну, потому что, заметим, чтобы у нас остался тот же граф, мы в нем нашли рекурсивно минус 100, но относительно минус 100,
[01:52:45.240 --> 01:52:50.440]  а там все ребра, которые не в минус 100, ведь тяжелые, поэтому все, что там остается, это просто итоговый граф.
[01:52:51.080 --> 01:52:53.240]  Поэтому, на самом деле, вот эта оценка не точна.
[01:52:55.640 --> 01:53:00.840]  Да, то есть, пока, конечно, вот мы уже доказали, что алгоритм работает за стоком, но это не точно.
[01:53:00.840 --> 01:53:02.840]  Это у нас не точно.
[01:53:02.840 --> 01:53:04.840]  Теперь давайте подумаем, как же нам поточнее.
[01:53:04.840 --> 01:53:08.840]  Надо два T, ну, не два у нас на D, кстати, а синкретность.
[01:53:08.840 --> 01:53:14.840]  У нас же хуже случай, теоретически, может быть, что просто H пустой.
[01:53:14.840 --> 01:53:16.840]  Да, возможно.
[01:53:16.840 --> 01:53:18.840]  Что у нас?
[01:53:18.840 --> 01:53:22.840]  Может быть, в смысле, что H пустой, ну, понятно, там, маленький вариант, но, возможно.
[01:53:23.240 --> 01:53:28.840]  Ну тогда, действительно, давайте я так Bagichchi'у,
[01:53:28.840 --> 01:53:30.840]  Т от, ну, я так captured,
[01:53:30.840 --> 01:53:34.840]  значит давайте так,
[01:53:34.840 --> 01:53:36.840]  Т от L звездочка, вот так не пишу.
[01:53:36.840 --> 01:53:38.840]  Ну, понятно, что это такое, да?
[01:53:38.840 --> 01:53:40.840]  Но сколько у нас там вершин будет?
[01:53:42.840 --> 01:53:44.840]  Значит, G4, да?
[01:53:44.840 --> 01:53:46.840]  gave a few thousand.
[01:53:46.840 --> 01:53:48.840]  И TH5,ShU did it?
[01:53:48.840 --> 01:53:50.840]  Then what?
[01:53:50.840 --> 01:53:58.160]  значит g' да и значит сколько у нас будет ребер в соответственно e2'
[01:53:58.160 --> 01:54:07.840]  вот так ну n2' и плюс t какое у нас еще говорит ну количество вершин
[01:54:07.840 --> 01:54:13.040]  где уже то же самое n звездочка
[01:54:13.040 --> 01:54:19.640]  ну вот а вот количество ребер можно здесь оценить как-то
[01:54:19.640 --> 01:54:26.880]  похитрее каким образом можно их оценить я утверждаю что их можно оценить
[01:54:26.880 --> 01:54:39.480]  фишка в том что заметим что там чем больше да особо так чем больше ребер осталось тем
[01:54:39.480 --> 01:54:44.120]  как бы меньше ребер осталось тут потому что в лучшем случае если тут все ребра выжили то тут
[01:54:44.120 --> 01:54:46.120]  все ребра убились кроме самого миностова
[01:54:46.120 --> 01:55:02.640]  ну вот поэтому тут вот поэтому желательно то есть желательно каким-то мистическим
[01:55:02.640 --> 01:55:11.480]  образом сказать что у нас у нас randomized msf всегда возвращает если бы всегда будет
[01:55:11.480 --> 01:55:19.400]  возвращать именно но миностов в смысле дерево миностова нет но нет и граф после
[01:55:19.400 --> 01:55:22.760]  удаления некоторых игр мог бы казаться несвязным поэтому он будет возвращать лес
[01:55:22.760 --> 01:55:41.040]  странно потому что мы же говорили что типа но вот если же который передали связано то
[01:55:41.040 --> 01:55:52.240]  вернется миностов да ну вот теперь вот просто теперь надо посчитать сколько там нашлось теперь
[01:55:52.240 --> 01:55:59.640]  выскакивать вопрос сколько там в этом эфи нашлось компонент связности если вот допустим давайте так
[01:55:59.640 --> 01:56:11.440]  и напишем в этом эфи нашлось какой-то нот пусть в нем будет допустим к ну допустим к там
[01:56:11.440 --> 01:56:29.440]  к звездочка звездочка компонент связности вот ну и теперь утверждается что из этих вот
[01:56:29.440 --> 01:56:37.040]  м звездочка звездочка видимо что-то выкинет это интересно да спорта как нам поможет
[01:56:37.040 --> 01:56:43.120]  звездочка звездочка да вот хочется сказать что если к звездочку звездочка равно один
[01:56:43.120 --> 01:56:55.560]  то осталось только вот заданное число неужели через звездочку звездочка нельзя оценить
[01:56:55.560 --> 01:57:07.680]  в прочем это неважно а смотрите как смотрите м звездочка звездочка те ребра которые передались
[01:57:07.680 --> 01:57:13.440]  уже в них было зашита к звездочку звездочка компонент связанности правда следовательно
[01:57:13.440 --> 01:57:17.960]  я утверждаю что если у вас граф на вот столько количества вершин и вот на столько компонент
[01:57:17.960 --> 01:57:26.360]  связанности то я утверждаю что в нем количество ребер и звездочка минус к звездочка так мы же
[01:57:26.360 --> 01:57:33.760]  удаляем только плохи тяжелые ребра а из ж 3 нет это я сказал что вот из этих ребер выжили выжила
[01:57:33.760 --> 01:57:41.440]  только вот столько есть еще оставшиеся но их я так оставлю их м минус м звездочка
[01:57:42.040 --> 01:57:45.400]  предположим тут уже в лучшем случае предположим что все выжили
[01:57:45.400 --> 01:58:03.920]  да это как которые не вошли в аж но мы предположим что в лучшем случае они они не умерли на пятом шаг
[01:58:04.520 --> 01:58:10.800]  а левая а здесь заметил что вот эти ребра образуют как звездочка звездочка компонент связанности
[01:58:10.800 --> 01:58:16.840]  четвертый шаг в каждой из этих компонент связанности оставил только основ то есть
[01:58:16.840 --> 01:58:20.360]  количество вершин минус одно ребро следует и суммарно там осталось только вот столько
[01:58:20.360 --> 01:58:32.560]  ребер где-то ну вот ну собственно в итоге он же звездочек то что нам вернули нам вернули
[01:58:32.560 --> 01:58:41.320]  вот столько ребер мы к ним добавили вот эти ребра но остальные то можно точно удалить вот так
[01:58:41.320 --> 01:58:51.000]  вот можно вот так сказать и вот теперь теперь нужно быть вот это звездочка
[01:58:51.000 --> 01:58:57.760]  но теперь замечаем ладно что вот я теперь утверждаю что это то есть мистическое утверждение
[01:58:57.760 --> 01:59:15.040]  не превосходит почему я такое утверждаю ну давайте ну давайте переходим по индукции как
[01:59:15.040 --> 01:59:28.680]  всегда а от м да плюс с от м звездочка м звездочка звездочка да ну с точнее с
[01:59:28.680 --> 01:59:38.120]  но логовик лога м звездочка тут один и тот же поэтому получается значит сколько тут м звездочка
[01:59:38.120 --> 01:59:48.200]  звездочка м звездочка к звездочка звездочка плюс м минус м звездочка звездочка умножить
[01:59:48.200 --> 02:00:00.920]  на лог м звездочка доказываем это утверждение так давайте просыпаемся ну вот значит тут шлёп шлёп
[02:00:00.920 --> 02:00:12.920]  а что это мы пишем такой-то штуки меньше
[02:00:13.920 --> 02:00:23.040]  не делал доза в прошлом году ну все тогда тогда тогда это у тебя должно быть уже 5 минут
[02:00:23.040 --> 02:00:32.880]  позавтра автоматически в голове поедет как ты пишешь ты хочешь сказать утверждение
[02:00:32.880 --> 02:00:36.440]  с левой стороны можно списать по форму кивантия рекуррента
[02:00:36.440 --> 02:00:43.600]  ты можешь раскрыть тежки да
[02:00:43.600 --> 02:00:49.680]  ну и вот все
[02:01:02.880 --> 02:01:21.680]  а будет меньше либо равно 3 с очень короче как это ж не та что мы очень
[02:01:22.680 --> 02:01:26.440]  не та цена которую мы пытаемся доказать что это не так у нас
[02:01:26.440 --> 02:01:29.120]  а мы доказали cn плюс м
[02:01:29.120 --> 02:01:32.000]  мы еще не то
[02:01:32.000 --> 02:01:41.360]  наверное надо цена и плюс м логан дека мы немножко слагаем это вам потеряли нет
[02:01:42.360 --> 02:01:44.360]  ваня мы писали одну тежку
[02:01:44.360 --> 02:01:51.720]  давайте хорошо да у нас нет мы сразу мы писали тежку мы вся у них общий логерим мы и
[02:01:52.720 --> 02:02:01.560]  тогда 3 м звездочки ладно тогда здесь мы пишем 3 восьмых а ну нормально
[02:02:01.560 --> 02:02:08.840]  теперь вроде адекватно
[02:02:08.840 --> 02:02:17.400]  ну да это нормально потому что 3 восьмые значит это меньше либо равно обычного м поэтому все
[02:02:17.600 --> 02:02:18.000]  мы же хотели за чем что делать что делать сейчас мы оцениваем
[02:02:18.140 --> 02:02:32.240]  же выfr
[02:02:32.240 --> 02:02:40.120]  в случае это работает а синтетически также как бор同 чтобы не случилось Hawaii
[02:02:40.120 --> 02:02:43.120]  еще больше скажу как лучший случай это работаетester Qué
[02:02:43.120 --> 02:02:51.880]  хуже чем прим. По крайней мере, классический прим за n квадрат. Ну, во-первых, да, заметим, что мы
[02:02:51.880 --> 02:02:56.560]  избавимся от кратных ребер, поэтому там в каждый момент времени у нас n не происходит n квадрат,
[02:02:56.560 --> 02:03:02.240]  да. Поэтому там все шаги делаются за n квадрат, и дальше там у нас есть синтетика, получается, да,
[02:03:02.240 --> 02:03:17.040]  t от n равно o от n квадрат плюс 2t от n делить на 8. Ну, заметим, что, ну, отсюда там по любой
[02:03:17.600 --> 02:03:27.960]  время или по любому развороту рекурсивному, вы видите, что это t от n квадрата. Метод акробазии.
[02:03:27.960 --> 02:03:38.120]  И я по словам вообще не могу, а то у меня акробазия. Ну, там, может, всякие кубрини снимается.
[02:03:38.120 --> 02:03:56.040]  Акробазия, господи. Акробазия, господи. Акробазия, господи. Да, там все что угодно, можно акробазия,
[02:03:56.040 --> 02:04:16.320]  можно там... Я как бы либо аквабати, либо акробатишка. Ну да, акробатишка, это да.
[02:04:16.320 --> 02:04:24.240]  Да. Мачо-малли тут. Конечно, выходит команда финал КВН, да. Выскакивает такой, действительно такое
[02:04:24.240 --> 02:04:29.080]  священник такой в черном там, делает пару круглых вопросов. Да, был не мой вопрос, кто это был, да, это
[02:04:29.080 --> 02:04:42.120]  акробатишка. Не, не то чтобы команда с этого что-то выиграла, но это запомнили. Ладно. Так, короче,
[02:04:42.120 --> 02:04:46.440]  очень видим, что у нас получился крутой алгоритм, который работает не хуже примы, не хуже баруфта
[02:04:46.440 --> 02:04:54.080]  одновременно. Теперь финальное, что нам надо доказать, это то, что это работает, что в смысле
[02:04:54.080 --> 02:05:08.320]  от ожидания это работает круто. Ну, давайте разбираться почему. Сейчас тут будет немножко магии.
[02:05:08.320 --> 02:05:23.640]  Смотрите. Значит, у нас есть теперь, так, вот было у нас вот это вот это в худшем случае, да, а теперь давайте
[02:05:23.640 --> 02:05:33.120]  у нас есть мистическая случайная величина. Ну ладно, давайте всегда обозначим букву изю.
[02:05:33.120 --> 02:05:45.560]  Значит, изю от ве. Это случайная величина типа с временем работы, да. Чему она равна? Она равна
[02:05:45.560 --> 02:06:01.840]  о от в плюс е, да, плюс что? Плюс, ну поехали. Значит, кси от чего-то. Значит, в звездочка и
[02:06:01.840 --> 02:06:08.320]  вот этого два звездочка. Причем обратите внимание, ну в звездочка допустим это детерминировано,
[02:06:08.320 --> 02:06:21.440]  определяется, а вот е2 звездочки это случайный какой-то набор, помните, да? Вот. Плюс, что там еще? Ну плюс
[02:06:21.440 --> 02:06:32.440]  нот. Ну плюс, соответственно, кси от чего-то. Ну, короче, в звездочка и е штрих можно сказать, да.
[02:06:32.440 --> 02:06:42.760]  Согласны? Ну, теперь давайте думать, как связаны между собой е звездочка звездочка и е штрих.
[02:06:42.760 --> 02:07:00.360]  Е штрих это вот. Ну, е штрих это то, что вот в итоге получилось. Вот, значит, будем теперь,
[02:07:00.600 --> 02:07:07.640]  значит, доказывать, ладно, давайте сейчас, да, для простой опустки попытки увидеть и будем
[02:07:07.640 --> 02:07:19.400]  просто доказывать, что, значит, мистическое утверждение. Ясно, по е штриху. Наверное, там е штрих.
[02:07:19.400 --> 02:07:31.080]  Вот, утверждение. Я хочу доказывать по индукции, что е си от v и е не превосходит
[02:07:31.080 --> 02:07:45.360]  с умножить на модуль v плюс модуль е. Вот, что я хочу заявить. Так, ну ладно, я надеюсь, вот
[02:07:45.360 --> 02:07:51.200]  коллизия между вот этим е и вот этим е никого не смущает. Если смущает, эту букву m могу написать.
[02:07:51.200 --> 02:08:03.880]  Ну, понятно, да. Так вот. Значит, доказывать мы это будем, ну, скажем, по индукции по v плюс е.
[02:08:03.880 --> 02:08:17.040]  Логично, да? По размеру. Ну, заметим, что у нас тут как бы размер это строго меньше,
[02:08:17.040 --> 02:08:28.720]  потому что у везет их и размер не более чем v поделить на 8, правда? Так, что получается. Значит,
[02:08:28.720 --> 02:08:36.880]  теперь пишем, что е си от v и е равно, ну, значит, мы по-любому выполняем, значит, не превосходит
[02:08:36.880 --> 02:08:46.480]  а на модуль v плюс модуль е, плюс мат ожидания вот этого вот, правда? Ну, давайте я вот аккуратно
[02:08:46.480 --> 02:08:54.560]  пока напишу. Мат ожидания си, тут как бы подлиннко так покажется, да? Потому что пока слетку как бы то,
[02:08:54.560 --> 02:08:58.160]  что там вот хочется сделать, наверное, нельзя делать или, по крайней мере, я не уверен, что
[02:08:58.160 --> 02:09:02.520]  можно, но давайте пока. То есть, просто проблема в том, что если бы у нас эти графы были фиксированы,
[02:09:02.520 --> 02:09:09.480]  то я мог бы написать там сразу какое-нибудь предположение индукции, да? Ну, вот. Но пока
[02:09:09.480 --> 02:09:13.440]  заметим, что как бы е звездочка звездочка и е штрих это тоже случайные величины, да?
[02:09:13.440 --> 02:09:24.520]  Вот. Но с другой стороны мы заметим, ну, с другой стороны заметим следующее, что мы пытаемся по индукции
[02:09:24.520 --> 02:09:31.760]  доказать линейность, да? То есть, заметим, что вот эта величина, да, значит, понятно, что вот е звездочка
[02:09:31.760 --> 02:09:38.400]  звездочка, вот чему равен модуль е звездочка звездочка, да? Ну, как мы уже говорили, с вероятностью
[02:09:38.400 --> 02:09:46.520]  p1 он там равен, там, допустим, z1, с вероятностью p2 он равен z2 и так далее, с вероятностью pk, там,
[02:09:46.520 --> 02:09:56.200]  pl он равен zl, да? Понимаете, да? Но тогда, смотрите, если он равен z1, то тогда мы здесь должны
[02:09:56.200 --> 02:10:04.600]  там от ожидания написать непревосходящее c на в звездочка, там, модуль в звездочка плюс z1, да?
[02:10:04.600 --> 02:10:13.160]  И это должны нам дожить на p1. Классно? По-любому, да, что если вы вспоминаете, что тут оказалось
[02:10:13.160 --> 02:10:18.520]  размер z1, то тут от ожидания, там, граф мог быть разный, там, но от ожидания по-любому не будет
[02:10:18.520 --> 02:10:30.080]  превосходить вот этого, да? И тот, да, модуль в звездочка плюс z2 на p2, ну и так далее, да? Вот. То есть, отсюда
[02:10:30.080 --> 02:10:37.920]  начнем короче из этого и здесь следует, так, следует, что этот маркер мы тоже выбрасываем. Не, знаете,
[02:10:37.920 --> 02:10:43.520]  полезно записать, просто какие маркеры выбрасывать, что, как бы, слишком маркеры на тому не ходят. И нужно
[02:10:43.520 --> 02:10:48.600]  понимать, если маркеров состава слишком мало, ну значит, значит, пришло время пойти в книжный магазин
[02:10:48.600 --> 02:10:56.680]  и купить новые, да? Или там, я не знаю. Так, а какие у нас маркеры еще вообще есть? Так. А то надо вспомнить,
[02:10:56.680 --> 02:11:05.520]  что это... Так, дальше. Это меньше либо равно. То есть, меньше либо равно получается. То есть, если это
[02:11:05.520 --> 02:11:18.480]  посуммировать, да, то значит, это меньше либо равно a на модуль v плюс e плюс c на, значит, модуль v штрих плюс...
[02:11:18.480 --> 02:11:33.200]  Ой. Такое, да? Ну, может, модуль, ну точно. Вот так нормально. А, так нормально, да? Он там и должен был быть.
[02:11:33.200 --> 02:11:51.680]  Ну, конечно. Плюс дальше c от модуль v звездочка плюс e, значит, модуль e штриха. Ну, начало неплохое.
[02:11:51.680 --> 02:12:00.760]  Потому что, ну-ка, скажите мне, каково мы от ожидания e звездочки и звездочки? Ну, не больше, чем e пополам, как бы.
[02:12:01.640 --> 02:12:13.640]  Так, я могу даже начать оценивать сверху. a на модуль v плюс модуль e плюс c на модуль v поделить на 8 плюс модуль e пополам.
[02:12:13.640 --> 02:12:31.800]  Значит, плюс, плюс c на модуль v звездочка плюс, а вот, ой, потому что я затупил. Так, поэтому, вот, значит, плюс
[02:12:31.800 --> 02:12:43.400]  мат ожидания этого мистического e штриха. Потому что про него мы так пока ничего не узнали. Вот спрашивает, что делать?
[02:12:44.360 --> 02:12:54.840]  Каково мат ожидания e штриха? Ну, хотелось бы получить, чтобы это было, ну, не больше, чем модуль e, на константу меньше 1 и 2.
[02:12:54.840 --> 02:13:06.360]  Ну, что-нибудь по мелочи. Ну, а, значит, а давайте внимательно подумаем. То есть, смотрите, то есть f у нас, то есть, видите, как это устроено так, что, то есть, надо подумать,
[02:13:06.440 --> 02:13:11.960]  с какой вероятностью каждое конкретное ребро выживет после вот всей вот этой вот махинации?
[02:13:14.440 --> 02:13:26.040]  Ну, либо сразу, либо оно не попадет с первого галфа. Ну, скажем так.
[02:13:26.040 --> 02:13:31.480]  Так, если оно в звездочку не выпало, то оно уже все, да, оно уже никуда не попадет.
[02:13:33.000 --> 02:13:38.120]  Мы смотрим ребра из звездочки, которые могут быть чуть-чуть не все, да?
[02:13:38.680 --> 02:14:03.000]  Вот. Так. Ну, как, в каком случае ребро исчезает? Когда вот этот получен в h, оно, сейчас, если оно выпало в h, то оно почти точно исчезнет, если он не является там ребром именно компонента святости, ну, и ребром именно ms.
[02:14:03.000 --> 02:14:11.480]  Совершенно верно. А таких мало, как бы. Ну, таких не мало. Таких у нас не более, таких у нас, то есть, скажем так, ребра бывают двух типов.
[02:14:12.440 --> 02:14:30.680]  Ребра бывают те, которые попали в h и которые туда не попали, правда? А теперь давайте думать, что если ребро попало в h, то, в общем-то, оно либо попало в этот мин-лес от h, либо оно вылетело из ozg.
[02:14:30.680 --> 02:14:44.760]  Логично, да? Да. Вот. Значит, соответственно, таких ребер у нас окажется, ну, там, допустим, можно оценить, как модуль v минус х звездочка, звездочка, допустим, да?
[02:14:46.280 --> 02:14:58.200]  Ну, с другой стороны, да, даже не модуль v, а модуль v поделить на 8 минус. А мы можем просто такой же стукан написать, который мы делали в интерменинном случае?
[02:14:58.200 --> 02:15:12.760]  Ну, давайте так, а давайте попробуем даже. Что-то дотянет меня еще где-то на то, а давайте сделаем не так, как там написано в талмуде, но вот. Ну, если как вы могли заметить, это вообще, собственно, это вообще наш стиль, да.
[02:15:13.400 --> 02:15:25.080]  Зачем делать как в талмуде, давайте придумаем сами. Вот. Значит, давайте скажем, что e' это равно e' называется живые.
[02:15:25.960 --> 02:15:27.960]  Ладно, давайте так.
[02:15:35.720 --> 02:15:42.440]  Игра жизни. Нет. e' h объединенная с e' не h.
[02:15:45.800 --> 02:15:47.800]  Понятно, да?
[02:15:47.800 --> 02:16:17.720]  Ну, давайте, значит, давайте попробуем, да, давайте вот тут переписываем вот эту хрень, да, плюс c, там, модуль v поделить на 8, плюс модуль e пополам, ладно, что-то мне в бом уже, поэтому плюс модуль v поделить на 8, плюс, значит, мат ожидания e' h, плюс мат ожидания e' h.
[02:16:18.600 --> 02:16:23.560]  Значит, e' не h, так. Чем это нам помогает?
[02:16:25.400 --> 02:16:29.400]  Так, вот это вот равно, ну, вот эта величина равна у нас к чему?
[02:16:30.360 --> 02:16:39.240]  Модуль v поделить на 8, минус, минус количество компонентов связанности v, да?
[02:16:48.440 --> 02:16:53.240]  Вот, это вот меньше либо равно вот этого, а это меньше либо равно чего?
[02:16:55.240 --> 02:16:57.240]  Не можно просто посчитать.
[02:16:57.240 --> 02:17:02.680]  Сколько, да, да, сколько, сколько, сколько river из, значит, v не h.
[02:17:02.680 --> 02:17:14.200]  В магазине можно посчитать на подождание, да, сколько river из e' и, ну, e' h, типа оценка, например, сверху, да, да.
[02:17:14.440 --> 02:17:18.440]  Ну, с чего-то непонятно, но вопрос, сколько там компонентов связанности от этого, может зависеть.
[02:17:18.440 --> 02:17:22.440]  Ну, может быть, нам хватит написать, что их не более чем v поделить на 8?
[02:17:24.440 --> 02:17:30.440]  Ну, в e' из множества h, в e' количество river, я вам даже просто скажу, ровно вот столько.
[02:17:34.440 --> 02:17:36.440]  Это даже не средний, это просто вот так.
[02:17:36.680 --> 02:17:46.680]  Потому что все ребра, которые попали в v, они умерли, все, кроме тех, кто там в минус 100 и остался.
[02:17:46.680 --> 02:17:48.680]  Или в минус 100 и остался.
[02:17:50.680 --> 02:17:56.680]  Ну, у нас v попадает каждое второе ребро в среднем из 6 звездой.
[02:17:56.680 --> 02:17:58.680]  Ну, вот.
[02:17:58.680 --> 02:18:02.680]  Получается, что одна вторая, ну, как бы, может быть, одно второе e.
[02:18:02.920 --> 02:18:04.920]  Не очень хорошо.
[02:18:04.920 --> 02:18:06.920]  Или одно второе e со звездой, что-то.
[02:18:06.920 --> 02:18:08.920]  Ну, смотрите, да.
[02:18:08.920 --> 02:18:10.920]  Ну, вот, нет, ну, сейчас, погнали.
[02:18:10.920 --> 02:18:12.920]  А, одно, сейчас.
[02:18:12.920 --> 02:18:14.920]  Ну, нет, в e' очень хочется сказать, что там,
[02:18:14.920 --> 02:18:16.920]  нет, давайте так, вот, e', которые не h.
[02:18:18.920 --> 02:18:20.920]  Там количество river,
[02:18:22.920 --> 02:18:24.920]  ну, вот, то есть, там,
[02:18:24.920 --> 02:18:26.920]  то есть, количество river, которые выше,
[02:18:27.160 --> 02:18:29.160]  там,
[02:18:31.160 --> 02:18:33.160]  то есть, есть river, которые не h.
[02:18:33.160 --> 02:18:35.160]  То есть, сколько легких river там выжило.
[02:18:37.160 --> 02:18:39.160]  Ну, очевидно, выжили, ну, вот.
[02:18:39.160 --> 02:18:41.160]  Есть подозрение, что, как бы,
[02:18:41.160 --> 02:18:43.160]  вы все.
[02:18:43.160 --> 02:18:45.160]  Ну, вот.
[02:18:45.160 --> 02:18:47.160]  Ну, да.
[02:18:47.160 --> 02:18:49.160]  Ну, кроме тех, кто не попал в одну компоненту.
[02:18:49.160 --> 02:18:51.160]  Ну, в худшем случае, допустим, все.
[02:18:51.160 --> 02:18:53.160]  И все это у нас получается сколько?
[02:18:53.160 --> 02:18:55.160]  Модуль e.
[02:18:55.400 --> 02:18:57.400]  Ну, допустим,
[02:18:57.400 --> 02:18:59.400]  модуль e' да?
[02:18:59.400 --> 02:19:01.400]  Или сколько там их было?
[02:19:01.400 --> 02:19:03.400]  Из e' мы оценили как модуль e.
[02:19:03.400 --> 02:19:05.400]  Ну, ладно, да.
[02:19:05.400 --> 02:19:07.400]  Ну, допустим,
[02:19:07.400 --> 02:19:09.400]  здесь можно сказать просто как
[02:19:09.400 --> 02:19:11.400]  модуль e- модуль e' h.
[02:19:15.400 --> 02:19:17.400]  Да, можно это оценивать как вот так.
[02:19:17.400 --> 02:19:19.400]  То есть, только, да, звездочка,
[02:19:19.400 --> 02:19:21.400]  именно они ж три.
[02:19:21.400 --> 02:19:23.400]  То есть, короче,
[02:19:23.640 --> 02:19:25.640]  переводчик говоря,
[02:19:25.640 --> 02:19:27.640]  сколько ребер не попало в h, да?
[02:19:29.640 --> 02:19:31.640]  Ну, мы считаем, что ни одно не вылезало.
[02:19:33.640 --> 02:19:35.640]  Но, заметим, что мата ожидания количества ребер,
[02:19:35.640 --> 02:19:37.640]  которые не попало в h,
[02:19:37.640 --> 02:19:39.640]  оно на сколько? Ровно e' пополам, правда?
[02:19:41.640 --> 02:19:43.640]  То есть, они уже... Ничего-то не сходится.
[02:19:43.640 --> 02:19:45.640]  Почему? Потому что у нас при e будет коэффициент c+.
[02:19:45.640 --> 02:19:47.640]  Ну, да.
[02:19:47.640 --> 02:19:49.640]  Ой.
[02:19:49.880 --> 02:19:51.880]  На.
[02:19:51.880 --> 02:19:53.880]  То есть, совсем e пополам, да.
[02:19:53.880 --> 02:19:55.880]  То есть, совсем так жестко оценивать, видимо, не получится.
[02:19:55.880 --> 02:19:57.880]  Придется, видимо, делать что-то чуть-чуть более умное.
[02:20:01.880 --> 02:20:03.880]  Либо как-то, значит,
[02:20:03.880 --> 02:20:05.880]  все это опять начать сделать так, чтобы
[02:20:05.880 --> 02:20:07.880]  это зависело от кораж. Ну, не получится.
[02:20:07.880 --> 02:20:09.880]  Поэтому придется делать что-то более умное.
[02:20:09.880 --> 02:20:11.880]  Поэтому давайте
[02:20:11.880 --> 02:20:13.880]  себе этот случайный процесс
[02:20:13.880 --> 02:20:15.880]  попадания в g'
[02:20:15.880 --> 02:20:17.880]  мы
[02:20:18.120 --> 02:20:20.120]  проимулируем просто другим способом.
[02:20:22.120 --> 02:20:24.120]  Смотрите. Ну, как мы делаем?
[02:20:24.120 --> 02:20:26.120]  Мы выбираем случайные ребра.
[02:20:26.120 --> 02:20:28.120]  Мы выбираем случайные ребра
[02:20:28.120 --> 02:20:30.120]  на тех, кто выбрался, строим
[02:20:30.120 --> 02:20:32.120]  лес, а потом
[02:20:32.120 --> 02:20:34.120]  возвращаем все ребра и
[02:20:34.120 --> 02:20:36.120]  тяжелые ребра выкидываем, правда?
[02:20:38.120 --> 02:20:40.120]  Тогда идея такая. А давайте сделаем
[02:20:40.120 --> 02:20:42.120]  немножко наоборот. Значит, генерить
[02:20:42.120 --> 02:20:44.120]  этот абсолютно тот же самый процесс
[02:20:44.120 --> 02:20:46.120]  будем следующим образом.
[02:20:46.360 --> 02:20:48.360]  Возьмем все ребра, отсортироваем
[02:20:48.360 --> 02:20:50.360]  их мысленно, конечно,
[02:20:50.360 --> 02:20:52.360]  по весу.
[02:20:54.360 --> 02:20:56.360]  Допустим, у нас все эти ребра
[02:20:56.360 --> 02:20:58.360]  отсортировались по весу.
[02:21:00.360 --> 02:21:02.360]  Я сейчас буду одновременно
[02:21:02.360 --> 02:21:04.360]  кидать монетку и строить
[02:21:04.360 --> 02:21:06.360]  ребра, которые к нам попали,
[02:21:06.360 --> 02:21:08.360]  будем строить на них
[02:21:10.360 --> 02:21:12.360]  соответственно,
[02:21:12.360 --> 02:21:14.360]  миностоп, алгоритм краскала.
[02:21:14.360 --> 02:21:16.360]  Понятно, да?
[02:21:16.360 --> 02:21:18.360]  То есть, смотрите.
[02:21:18.360 --> 02:21:20.360]  Значит,
[02:21:20.360 --> 02:21:22.360]  на каждом шаме будем делать так.
[02:21:22.360 --> 02:21:24.360]  Ну, у нас в каждом момент
[02:21:24.360 --> 02:21:26.360]  времени есть какой-то лес,
[02:21:26.360 --> 02:21:28.360]  уже набранный из выбранных ребр.
[02:21:28.360 --> 02:21:30.360]  Поэтому говорим, если ребро
[02:21:30.360 --> 02:21:32.360]  еще не...
[02:21:32.360 --> 02:21:34.360]  Значит, если ребро тяжелое,
[02:21:34.360 --> 02:21:36.360]  то мы его сразу можем выкидывать.
[02:21:36.360 --> 02:21:38.360]  Логично, да?
[02:21:38.360 --> 02:21:40.360]  Ну, если ребро
[02:21:40.360 --> 02:21:42.360]  уже тяжелое, то нам
[02:21:42.360 --> 02:21:44.360]  на барабану мы либо сейчас его выкинем,
[02:21:44.360 --> 02:21:46.360]  либо потом на какой-то изотерации мы его точно
[02:21:46.360 --> 02:21:48.360]  уже выкинем. Правда?
[02:21:48.360 --> 02:21:50.360]  То есть, можно на него монетку не кидать.
[02:21:50.360 --> 02:21:52.360]  Это мы сейчас сделаем третий шаг?
[02:21:52.360 --> 02:21:54.360]  Это мы делаем третий, четвертый, пятый шаг
[02:21:54.360 --> 02:21:56.360]  все там, все вместе.
[02:21:56.360 --> 02:21:58.360]  То есть, берем все ребра,
[02:21:58.360 --> 02:22:00.360]  вот это вот,
[02:22:00.360 --> 02:22:02.360]  то есть, это вот
[02:22:02.360 --> 02:22:04.360]  е-звездочка. Смотрите, е-звездочка.
[02:22:04.360 --> 02:22:06.360]  Смотрите, это е-звездочка.
[02:22:08.360 --> 02:22:10.360]  Я отсортировал все ребра е-звездочка
[02:22:10.360 --> 02:22:12.360]  по возрастанию весов.
[02:22:12.360 --> 02:22:14.360]  Моя задача
[02:22:14.360 --> 02:22:16.360]  сгенерить вот этот вот
[02:22:16.360 --> 02:22:18.360]  краф-ж-штрих.
[02:22:18.360 --> 02:22:20.360]  Ну, то есть, понятно, как бы мы должны были,
[02:22:20.360 --> 02:22:22.360]  по идее, сгенерить там
[02:22:22.360 --> 02:22:24.360]  взять какие-то половину,
[02:22:24.360 --> 02:22:26.360]  взять, то есть, снять
[02:22:26.360 --> 02:22:28.360]  до вторая ребра, из них сгенерить
[02:22:28.360 --> 02:22:30.360]  мин-лес и убрать все тяжелые ребра
[02:22:30.360 --> 02:22:32.360]  относительно этого леса, да?
[02:22:32.360 --> 02:22:34.360]  Так вот, я буду делать это...
[02:22:34.360 --> 02:22:36.360]  Я буду генерить
[02:22:36.360 --> 02:22:38.360]  ребра и брать лес
[02:22:38.360 --> 02:22:40.360]  следующим читерским образом, смотрите.
[02:22:40.360 --> 02:22:42.360]  Я монетку теперь буду кидать не всегда.
[02:22:42.360 --> 02:22:44.360]  То есть, я буду говорить так.
[02:22:44.360 --> 02:22:46.360]  Я вот кидаю монетку.
[02:22:46.360 --> 02:22:48.360]  Вот если у меня
[02:22:48.360 --> 02:22:50.360]  монетка выпала,
[02:22:50.360 --> 02:22:52.360]  ну вот, ну у меня бывает
[02:22:52.360 --> 02:22:54.360]  монетка выпала, а бывает монетка не выпала.
[02:22:54.360 --> 02:22:56.360]  Но я буду кидать монетку
[02:22:56.360 --> 02:22:58.360]  только в том случае, если это ребро можно
[02:22:58.360 --> 02:23:00.360]  добавить в мино 100.
[02:23:00.360 --> 02:23:02.360]  Ну, то есть, если ребро не попадает еще,
[02:23:02.360 --> 02:23:04.360]  то есть, соединяет
[02:23:04.360 --> 02:23:06.360]  в этом лесе две компоненты
[02:23:06.360 --> 02:23:08.360]  связности.
[02:23:08.360 --> 02:23:10.360]  Мы его добавляем.
[02:23:10.360 --> 02:23:12.360]  Вот, следующий ребро
[02:23:12.360 --> 02:23:14.360]  тоже можно добавить, но я
[02:23:14.360 --> 02:23:16.360]  кидаю монетку.
[02:23:16.360 --> 02:23:18.360]  И я его не добавляю.
[02:23:18.360 --> 02:23:20.360]  Вот.
[02:23:20.360 --> 02:23:22.360]  А следующий, допустим, опять монетка выпала,
[02:23:22.360 --> 02:23:24.360]  я его добавляю.
[02:23:24.360 --> 02:23:26.360]  Еще тут монетка выпала, добавляю.
[02:23:26.360 --> 02:23:28.360]  У следующего ребра монетка не выпала.
[02:23:28.360 --> 02:23:30.360]  А у следующего ребра вообще произошла ситуация,
[02:23:30.360 --> 02:23:32.360]  что оно уже тяжелое,
[02:23:32.360 --> 02:23:34.360]  потому что произошла ситуация, что вот это
[02:23:34.360 --> 02:23:40.400]  ребро на самом деле, то есть уже вот этот вот миностов на самом деле стягивает цикл и так как
[02:23:40.400 --> 02:23:46.920]  ребра отсортированы в порядке возрастания, значит оно уже тяжелое. Это означает, что монетку на него
[02:23:46.920 --> 02:23:51.920]  можно не кидать, оно будет так или иначе в тот или иной момент удалено полюбасу, поэтому монету я
[02:23:51.920 --> 02:24:01.280]  даже не кидаю. Понятно, да? То есть я как бы еще раз кидаю монетку только тогда, когда это ребро может
[02:24:01.280 --> 02:24:07.240]  быть добавлено в минлес. Если уже не может, я просто это ребро выкидываю, а мне оно неинтересно. И по сути,
[02:24:07.240 --> 02:24:14.920]  случайная величина, которой меня интересует, это сколько раз я кину монетку, правда?
[02:24:14.920 --> 02:24:22.960]  То есть типа мы говорим, что вот мы добавляем каждое ребро на вторая и только теперь мы это делаем по
[02:24:22.960 --> 02:24:33.920]  очереди и параллельно находим по сути как раз МСФ в получающемся H. Ну типа да. А нам важно,
[02:24:33.920 --> 02:24:40.320]  ну да, сколько подфига. Мы это явно будем делать? Нет, это мы по-другому определили ту же самую
[02:24:40.320 --> 02:24:47.760]  случайную величину. Ну да, может быть, да, ну не совсем, ну скажем так, мы просто, ну как,
[02:24:48.240 --> 02:24:56.040]  ну скажем так, да, ну можно сказать, что мы определили ту же самую случайную величину? Ну,
[02:24:56.040 --> 02:25:01.200]  скажем так, ну вот, ну потому что мы как бы, ну как бы формально говоря, типа там мы кидали
[02:25:01.200 --> 02:25:08.480]  монетку для вот этого ребра, а тут не кидаем. Ну окей, с тем же, но можно заметить, что как бы,
[02:25:08.480 --> 02:25:13.840]  скажем так, нас интересует такая случайная величина, это количество ребер, которые выжили, да?
[02:25:13.840 --> 02:25:19.240]  Я утверждаю, что количество ребер, которые выжили, это количество раз,
[02:25:19.240 --> 02:25:24.080]  которые мы здесь кинули монетку. Понятно, да?
[02:25:24.080 --> 02:25:33.920]  Не понятно, там же вот красное выпало. Когда оно выпало, мы даже монетку не кидаем,
[02:25:33.920 --> 02:25:37.000]  потому что это по-любому тяжелое ребро относительно найденного нами веса.
[02:25:37.000 --> 02:25:53.880]  Нет, когда мы красную монетку кинули, мы говорили, что мы могли бы добавить это ребро в
[02:25:53.880 --> 02:26:02.200]  минлес, но мы кинули монетку и по результатам кидал, мы решили ее не добавлять. Да, типа ваш не попало.
[02:26:02.200 --> 02:26:10.480]  А, и тогда в итоговом графе все те, что останутся, все, до которых мы кидали монетку.
[02:26:10.480 --> 02:26:19.600]  Ну не более, ладно. На самом деле сформулируем так. На самом деле так,
[02:26:19.600 --> 02:26:29.760]  может быть на пятом шаге это ребро, кстати, удалится? Может и нет, я не знаю. Может удалиться,
[02:26:29.760 --> 02:26:35.720]  но это как бы уже оценка сверху. Разве делаем третий-пятый шаг или третий-шестой? Третий-пятый.
[02:26:35.720 --> 02:26:43.440]  Сейчас, а почему удалится? Мы же таким образом точно получим МСФ в полученном графе.
[02:26:43.440 --> 02:26:48.240]  Пока не проверим, мы шестой шаг пока не трогаем. Мы третий-четвертый-пятый.
[02:26:48.240 --> 02:26:55.920]  Я говорю, что, в смысле, вот те ребра, на которых монетка выпало, они будут обязательно образовывать
[02:26:55.920 --> 02:27:05.520]  МСФ, граф из как бы... Да, после четвертого шага как бы F будет содержать ровно вот эти все
[02:27:05.520 --> 02:27:16.720]  голубые ребра, на которых голубая монетка выпала. Да. Ну вот, на пятом шаге мы удалим, то есть голубые
[02:27:16.720 --> 02:27:21.760]  ребра останутся, мы удалим вот эти все ребра с крестиками, они по-любому будут удалены, а также
[02:27:21.760 --> 02:27:29.440]  будут удалены некоторые ребра из красных монет, с красными монетками. Да. Вот. Поэтому,
[02:27:29.440 --> 02:27:33.680]  значит, давайте сделаем, поэтому, значит, давайте я сделаю вот как так, значит, это я все,
[02:27:33.680 --> 02:27:42.440]  значит, поэтому давайте я скажу, что про E штрих, да? Погодите спать, тут недолго осталось. Так,
[02:27:42.440 --> 02:27:54.840]  значит, С, тут получается модуль, значит, смотрите, я так запишу, E пополам, плюс С на V поделить на 8,
[02:27:54.840 --> 02:28:05.800]  плюс, значит, пока мат ожидания, плюс E от вот этого вот количества монеток, которые выпали. Вот это вот,
[02:28:05.800 --> 02:28:22.400]  я вот так нарисую. То есть возникает вопрос, сколько раз мы кидаем монетку? То есть вот у нас
[02:28:22.400 --> 02:28:29.080]  есть такая красно-синяя монетка. Нужно для каждого ребра почитать, ну, почитать вероятность, как-то оценить.
[02:28:29.080 --> 02:28:34.480]  Не-не-не, все еще круче. Смотрите, у нас устроен процесс так, во-первых, мы просто кидаем монетку
[02:28:34.480 --> 02:28:43.720]  несколько раз, да? Она выпадает либо синяя, либо красная. А теперь интересный факт. Если синяя монетка
[02:28:43.720 --> 02:28:52.480]  выпала там N-1 раз, то больше мы монетку кидать не будем. Ну, просто потому что граф уже там,
[02:28:52.480 --> 02:29:01.880]  все, а стоп уже связал весь граф, все, дальше кидать не будет. Это сколько раз мы кинули эти
[02:29:01.880 --> 02:29:08.520]  монетки, сумасшедшие? То есть обратите внимание, на самом деле это называется, по-моему, отрицательное
[02:29:08.520 --> 02:29:16.120]  бинобиальное распределение. Ну, то есть, представьте себе, ну там, не помню, там вот, по-моему, есть
[02:29:16.120 --> 02:29:22.240]  какое-то, то есть вот утверждать, что есть такое Nb от Np. То есть что это значит? Мы кидаем монетку,
[02:29:22.240 --> 02:29:29.040]  она выпадает с вероятностью p и не выпадает с вероятностью 1 делить на p. Когда она N-ый раз выпадет,
[02:29:29.040 --> 02:29:36.720]  мы останавливаемся. Случайная величина называется, а сколько раз мы монетку кинем, пока это
[02:29:36.720 --> 02:29:46.280]  произойдет. Это обратное бинобиальное распределение. Ну, ладно, ну, я не силен в технологии, да,
[02:29:46.280 --> 02:29:53.960]  наверное отрицательный. Да, может это обратное бинобиальное, может это, я не знаю. Я на экзамене
[02:29:54.960 --> 02:29:57.520]  спутал экспоненциальное распределение с плацлоновским.
[02:29:57.520 --> 02:30:21.880]  Лямда на е в степени минус лямда х непрививная. А у вас его нет? Да, это геометрическое. А это еще и геометрическое? Да, точно. Ну, ладно, не важно.
[02:30:21.880 --> 02:30:29.080]  Так вот, короче говоря, ладно, назовем вот, то есть, короче говоря, это будет меньше либо равно,
[02:30:29.080 --> 02:30:38.320]  чем a на v плюс e. Переписываем. Плюс c, давайте я так напишу, модуль v поделить на 4, плюс модуль
[02:30:38.320 --> 02:30:51.960]  e пополам и плюс c нам от ожидания, допустим, назовем его nb от n минус 1 и 1 вторая. То есть,
[02:30:51.960 --> 02:30:57.320]  тоже не превосходит, да? Потому что мы как бы можем бросать не такое количество раз, а меньше.
[02:30:57.320 --> 02:31:09.320]  В другом месте вообще ничего. Чего-чего? Нб от n минус 1 и 1 вторая.
[02:31:09.320 --> 02:31:37.320]  Ну, как бы да. Вот, n минус 1, 1 вторая. Ну, давайте теперь посчитаем, nb от np. Ну, от ожидания
[02:31:37.320 --> 02:31:51.320]  его я утверждаю очевидно, что оно равно n на значит, значит, от ожидания nb от 1p, да? Да. А это
[02:31:51.320 --> 02:31:58.320]  типа 1. А 1, значит, то есть, ситуация. Кидаем монетку, пока она не выпадет. Она выпадается
[02:31:58.320 --> 02:32:03.320]  на каждый шаг, с вероятностью p. Сколько отскейдем раз мы ее тянем? 1 делит на p кажется. Ну,
[02:32:03.320 --> 02:32:09.640]  давайте это просто посчитаем. То есть, если этот znb, если это равно x, то x равно, соответственно,
[02:32:09.640 --> 02:32:18.200]  ну, с вероятостью p, 1, плюс 1 делить, 1 минус p, получается 1 плюс x. Или что-то
[02:32:18.200 --> 02:32:28.200]  же самое, 1 плюс 1 минус p на x. В общем, короче, x равен 1 делить на p, да. Тоже у вас должно
[02:32:28.200 --> 02:32:37.400]  было быть упражнение на эту тему в домашних заданиях. Ну, вот. Ну, тогда это равно получается.
[02:32:37.400 --> 02:32:46.200]  Тогда, смотрите, это меньше, тогда все это я убираю. Значит, это меньше либо равно, чем, так, тут
[02:32:46.200 --> 02:32:58.200]  а на, так, это тоже погибает смертельно. Так у нас там не n, nb не от n, плюс 1 от 0. Ну, конечно,
[02:32:58.200 --> 02:33:12.760]  модуль v поделить на 8 минус 1, одна вторая, хорошо. Значит, плюс c от модуль v поделить на 4, плюс e пополам,
[02:33:12.760 --> 02:33:25.480]  плюс c на модуль v поделить на 8, умножить на, видимо, 2. Ну, 1 поделить на одну вторую, видимо,
[02:33:25.480 --> 02:33:36.320]  равно 2, да. Так, ну, поздравляю, вы победили. Давайте уж красненьким допишу, что это равно a на
[02:33:36.320 --> 02:33:46.320]  модуль v плюс модуль e, плюс c на, вот, получается, на модуль v пополам, плюс c на модуль e пополам.
[02:33:46.320 --> 02:33:55.720]  Ну, и все это меньше либо равно c на модуль v плюс модуль e, ну, при c, соответственно,
[02:33:55.720 --> 02:34:11.840]  больше либо равно, ну, я не знаю, а, например, все. Так, ну, вроде, репку вытянули, да, или не вытянули.
[02:34:11.840 --> 02:34:28.240]  Ну, равенна. Ну, вы... Минус 1, запятая, одна вторая. Ну, одна вторая, потому что манетки выпадают,
[02:34:28.240 --> 02:34:34.040]  сразу все, одна вторая. Количество вершин там, количество раз, которые синие могут выпустить,
[02:34:34.040 --> 02:34:43.000]  это модуль v на 8 минус 1. Так что, ура! Вот таким не сильно сложным, пока не по коду,
[02:34:43.000 --> 02:34:51.040]  образом алгоритм работает за ОАПХЕ. Так что, будете на лейпяде писать мизостов, пишите его вот так.
[02:34:51.040 --> 02:35:03.560]  Чего? На любой. Ну, как бы, ну, в лучшем случае он будет работать как борувка. А в среднем
[02:35:03.560 --> 02:35:10.360]  он будет работать в задней линии. Ну, это реально? Он быстрее, чем борувка? Не знаю, не пробовал.
[02:35:10.360 --> 02:35:18.000]  Ну, быстрее, чем борувка, в среднем, наверное, точно. Не, ну, там, смотрите, быстрее, чем борувка,
[02:35:18.000 --> 02:35:22.080]  это вопрос. Потому что дело в том, что на рандомном графе борувка будет не деломо работать,
[02:35:22.080 --> 02:35:26.560]  он, скорее, за там более быстрое количество шагов займет. Но, правда, тут тоже вы делаете
[02:35:26.560 --> 02:35:31.000]  три шага борувки, и как бы, как бы, есть вообще шанс, что за три шага борувки, как бы, граф,
[02:35:31.000 --> 02:35:40.000]  критику скопится. Нет, тут проблем написать в том, что мы проверяем. А, да, да, да, пункт 5 есть, да.
[02:35:40.000 --> 02:35:46.280]  Ну, пункт 5 есть. Чё, чё ждёте? Ну, может, его займём, там вот Сашка. Ладно, не пишите,
[02:35:46.280 --> 02:35:54.560]  это толкает. А, жаль. Может, там, хотя да, там писать за линию, это умелость. Смал, там,
[02:35:54.560 --> 02:36:03.480]  С, У, В на 8, Н на 2, да? Чего? С, У, В на 8, Н на 2. Ну, да. Ну, один влит на одну вторую.
[02:36:03.480 --> 02:36:13.520]  Чего? Ну, это алгоритм. Чего алгоритм? Написал ли его кто-нибудь? Ну, кто-нибудь, наверное,
[02:36:13.520 --> 02:36:17.920]  написал. Не, ну, как сказать, там, как бы, есть интрига на то, что, как бы, ссылка на статью,
[02:36:17.920 --> 02:36:25.400]  ссылка на статью, как бы, даёт всего лишь 10 страниц. Лан 12. И там статья называется,
[02:36:25.400 --> 02:36:31.280]  как говорится, даже, там, типа, более простой алгоритм проверки минимальности астола.
[02:36:31.280 --> 02:36:35.600]  Так что здесь статья, то, что там, вот, то, что мы с вами придумали, придумывать не надо.
[02:36:35.600 --> 02:36:43.440]  То есть, там, вот, там, какой-нибудь, там, как бы, адекватные реальности алгоритм такой, может быть,
[02:36:43.440 --> 02:36:48.800]  а не как обычно. Вот это можно сказать. Ну, мы пока не знаем. Как бы, да и будет силы,
[02:36:48.800 --> 02:36:56.760]  может, ещё раз узнаем. А может, нет? А может, нет. Так что вот, так, ну, у нас всё время вышло.
