[00:00.000 --> 00:09.000]  Идогон, напоминаю ситуацию, к вам приходит, вы и архитектор,
[00:09.000 --> 00:12.560]  системный архитектор, к вам приходит, вы ставите
[00:12.560 --> 00:15.160]  задачу, будете ставить задачу программистам, объяснять
[00:15.160 --> 00:18.640]  им, что нужно делать, крупными мазками придумывать, как
[00:18.640 --> 00:21.360]  реализовать задачу, которую вам принес эффективный
[00:21.360 --> 00:22.360]  или не очень менеджер.
[00:22.360 --> 00:25.920]  Итак, менеджер хочет социальную сеть, спрашивайте.
[00:25.920 --> 00:34.240]  Окей, важнейший, самый главный вопрос, функциональные
[00:34.240 --> 00:35.240]  требования.
[00:35.240 --> 00:42.680]  Что она должна уметь, как она должна реагировать,
[00:42.680 --> 00:47.040]  какие функции должны быть и так далее, чем больше
[00:47.040 --> 00:52.520]  здесь информации, тем лучше, спрашивайте, что видит
[00:52.520 --> 00:53.520]  пользователь.
[00:53.520 --> 00:54.520]  Самый простой вопрос.
[00:54.520 --> 00:55.520]  Ничего не ошиблись.
[00:55.520 --> 00:58.840]  Вот он зашел на страницу, что он видит?
[00:58.840 --> 01:04.320]  Он видит, не знаю, логотип, понятно, аватар, пользователи,
[01:04.320 --> 01:07.280]  список того-то, список там, я не знаю, селений, список
[01:07.280 --> 01:10.120]  событий в каком-то городе, если это туристическо-социальная
[01:10.120 --> 01:11.120]  сеть.
[01:11.120 --> 01:17.400]  Допустим, я вам отвечаю, ну давайте так, в социальной
[01:17.400 --> 01:20.120]  туристической сети у нас будет следующее, у нас будут
[01:20.120 --> 01:23.040]  пользователи, пользователь может залогиниться, у него
[01:23.040 --> 01:26.760]  есть анкетка, фотография, вот, и пользователи, бывает
[01:26.760 --> 01:30.320]  двух видов, он может быть туристом, а может быть
[01:30.320 --> 01:31.320]  гидом.
[01:31.320 --> 01:35.000]  Если он гид, то он привязан к какому-то локальному месту
[01:35.000 --> 01:37.600]  и он про это локальное место может писать, например,
[01:37.600 --> 01:38.600]  статьи.
[01:38.600 --> 01:41.600]  Ну, собственно говоря, все.
[01:41.600 --> 01:44.680]  Так, ответил на вопрос, что должна уметь в социальной
[01:44.680 --> 01:45.680]  сети.
[01:45.680 --> 01:46.680]  Да?
[01:46.680 --> 01:47.680]  Давай.
[01:47.680 --> 01:48.680]  Уточняй.
[01:48.680 --> 02:04.080]  Ну, все остальное неважно, чувак, да.
[02:04.080 --> 02:05.760]  Вот я перечислил, больше ничего не надо.
[02:05.760 --> 02:14.760]  Чего?
[02:14.760 --> 02:17.040]  Я эффективный менеджер, какие паттерны доступа
[02:17.040 --> 02:18.040]  дома?
[02:18.040 --> 02:20.840]  Не скажи, какие паттерны доступа дома.
[02:20.840 --> 02:21.840]  Каким данным?
[02:21.840 --> 02:23.840]  Мне не надо данные, ты мне, пожалуйста, сделай.
[02:23.840 --> 02:28.960]  Короче, у меня есть пользователи, пользователи, фотографии
[02:28.960 --> 02:29.960]  и статьи.
[02:29.960 --> 02:34.960]  Нет, почему?
[02:34.960 --> 02:41.360]  Каждый может, нет, гид может постить и статьи, и фотографии,
[02:41.360 --> 02:46.360]  а пользователь вообще ничего не может.
[02:46.360 --> 02:57.280]  Окей, ну это ты совсем уже уходишь в другую область.
[02:57.280 --> 03:00.040]  Это вторая часть, то есть первая функциональное
[03:00.040 --> 03:01.040]  требование.
[03:01.040 --> 03:02.560]  Вы ничего не знаете про то, что вы собираетесь
[03:02.560 --> 03:05.240]  разрабатывать сейчас еще, вот я вам намекаю.
[03:05.240 --> 03:09.640]  Ты говоришь про нефункциональные требования.
[03:09.640 --> 03:18.640]  Да, то есть еще раз, какая нагрузка, какая, что там,
[03:18.640 --> 03:19.640]  что еще?
[03:19.640 --> 03:32.360]  Ну подожди, ну давай так, это все разные вещи.
[03:33.360 --> 03:43.120]  Да, ну да, то есть смотрите, есть гид, он привязан к
[03:43.120 --> 03:44.120]  какому-то месту.
[03:44.120 --> 03:48.520]  То есть гид постит статьи, статья красивая, с текстом,
[03:48.520 --> 03:55.520]  с картинками, еще что-то.
[03:55.520 --> 04:06.320]  Да, да, да, за объекты только картинки в текст.
[04:06.320 --> 04:07.680]  Про что вы начали спрашивать?
[04:07.680 --> 04:12.120]  Вы начали спрашивать про данные, окей, я согласен.
[04:12.120 --> 04:18.560]  Второй блок, уловили, вам нужно понять все типы
[04:18.560 --> 04:21.160]  данных, которые есть в системе, и как они друг
[04:21.160 --> 04:22.160]  с другом связаны.
[04:22.160 --> 04:25.560]  Что бы быть не очевидно для говорящего?
[04:25.560 --> 04:29.800]  Я вам сказал, например, о том, что есть пользователи,
[04:29.800 --> 04:33.200]  есть гиды, они постят статьи, привязанные к месту.
[04:33.200 --> 04:36.360]  Вот здесь сколько типов данных?
[04:36.360 --> 04:47.360]  Пользователь, статья, фотография, гид, мест, и так далее.
[04:47.360 --> 04:49.440]  Это связь, и связь между ними.
[04:49.920 --> 04:51.920]  То есть у тебя есть данные и все типы связей.
[04:51.920 --> 05:04.600]  Не факт, что ты это все будешь в базе хранять.
[05:04.600 --> 05:07.680]  Ты сейчас на уровень некоторых абстракций просто-напросто
[05:07.680 --> 05:10.720]  строишь сущности и связываешь их друг с другом, а как-то
[05:10.720 --> 05:11.720]  потом ляжет куда?
[05:11.720 --> 05:14.480]  В базу, в базульку или еще куда-нибудь, это же потом
[05:14.480 --> 05:15.480]  посмотрим.
[05:15.480 --> 05:16.480]  Мы пока не знаем.
[05:16.880 --> 05:18.320]  Итак, функциональные требования.
[05:18.320 --> 05:19.680]  Продолжайте меня расспрашивать.
[05:19.680 --> 05:22.640]  Данные и не функциональные требования.
[05:22.640 --> 05:27.000]  Все требования к скорости, к скорости ответа и все
[05:27.000 --> 05:28.000]  тому подобное.
[05:28.000 --> 05:31.160]  Деградация сюда же, да.
[05:31.160 --> 05:32.160]  Да-да-да.
[05:32.160 --> 05:39.160]  То есть вы не просто спрашиваете про то, что важно, что неважно.
[05:39.160 --> 05:40.160]  Вот докрути.
[05:40.160 --> 05:44.320]  Что можно потерять, что нельзя потерять.
[05:44.320 --> 05:48.600]  Что мы должны показать в любом случае, что не должны
[05:48.600 --> 05:49.600]  показать.
[05:49.600 --> 05:52.040]  Что можно не показать, например.
[05:52.040 --> 05:55.600]  Если можно не показать, то сколько?
[05:55.600 --> 05:58.160]  Что самое важное из нефункциональных требований?
[05:58.160 --> 05:59.160]  Какие минуты простое?
[05:59.160 --> 06:00.640]  Это разное очень требование.
[06:00.640 --> 06:04.240]  Например, бывают банковские системы, где минута простоя
[06:04.240 --> 06:05.400]  стоит миллион долларов.
[06:05.400 --> 06:09.920]  А бывает социальная сеть, где если я не смогу посмотреть
[06:09.920 --> 06:13.880]  фотографии Васи Пупкина конкретного, ну и фиг бы
[06:13.880 --> 06:14.880]  с ним.
[06:14.880 --> 06:20.200]  Процент оптайма и важности тех или иных данных.
[06:20.200 --> 06:21.200]  То есть насколько ты должен.
[06:21.200 --> 06:22.200]  Деградация в национала.
[06:22.200 --> 06:27.960]  Деградация в национала, чем ты можешь пожертвовать?
[06:27.960 --> 06:31.120]  Например, 2004 год.
[06:31.120 --> 06:34.320]  Я в Браммлере работаю, у нас происходит, или какой
[06:34.320 --> 06:37.440]  там год, когда у нас теракт был на Дубровке.
[06:37.440 --> 06:39.480]  Короче, в Москве серия терактов.
[06:39.480 --> 06:41.520]  Вот, один из терактов.
[06:41.520 --> 06:44.200]  И у нас посещаемость на сайт новостей взлетает
[06:44.200 --> 06:45.960]  просто колоссально.
[06:45.960 --> 06:46.960]  Мы не справляемся.
[06:46.960 --> 06:49.160]  Она вырастает в 20 раз за час.
[06:49.160 --> 06:51.680]  Ну понятно, все ломанулись смотреть.
[06:51.680 --> 06:54.720]  Новости телевидения не справляются с потоком.
[06:54.720 --> 06:56.200]  Чем мы сделали?
[06:56.200 --> 06:58.720]  Мы просто увеличили время кэширования.
[06:58.720 --> 07:01.840]  То есть если раньше главная страничка сайта обновлялась
[07:01.840 --> 07:06.280]  раз в минуту, теперь она обновлялась раз в 20 минут.
[07:06.280 --> 07:07.800]  Пользователь не заметил ничего.
[07:07.800 --> 07:14.480]  Ну сайт работает, новости обновляются раз в 20 минут.
[07:14.480 --> 07:15.480]  Это не заметно.
[07:15.480 --> 07:18.720]  А мы выдержали нагрузку.
[07:18.720 --> 07:22.320]  Это называется пример деградации функционала, когда вы намеренно
[07:22.320 --> 07:26.400]  заранее проектируете, от чего вы откажетесь в случае,
[07:26.400 --> 07:27.400]  если что-то пойдет не так.
[07:27.400 --> 07:32.320]  Какого-то, не знаю, маленькой функции, посмотрите на страницу
[07:32.320 --> 07:33.320]  Яндекса.
[07:33.320 --> 07:38.080]  Если, ну это конечно не заметить сейчас, если у Яндекса что-то
[07:38.080 --> 07:41.960]  не работает, вот главная страница Яндекса она собирается
[07:41.960 --> 07:43.440]  из различных блоков.
[07:43.440 --> 07:46.320]  Блок поисковой строки, блок новостей, блок погоды,
[07:46.320 --> 07:48.840]  кусочек почты, еще что-то, еще что-то.
[07:48.840 --> 07:54.240]  Каждый из этих блоков выдается разными кусками Яндекса.
[07:54.240 --> 07:56.920]  За каждым из блоков, там, я не знаю, кластеры из тысяч
[07:56.920 --> 07:59.600]  серверов, которые его готовят, выдают.
[07:59.600 --> 08:01.720]  Ну не только вам, а вообще всем.
[08:01.720 --> 08:05.160]  Если погода в Яндексе сломается, главная страница перестанет
[08:05.160 --> 08:06.160]  работать?
[08:06.160 --> 08:07.160]  Нет.
[08:07.160 --> 08:09.920]  Просто там вместо погоды будет ничего.
[08:09.920 --> 08:13.240]  Там даже не будет никакого сообщения в ошибке, вы
[08:13.240 --> 08:14.240]  ничего не заметите.
[08:14.240 --> 08:15.520]  Просто погода не вставится.
[08:15.520 --> 08:19.480]  Вот это тоже деградация функционала, то есть такое
[08:19.480 --> 08:21.880]  плавное снижение функциональности.
[08:21.880 --> 08:28.320]  От чего можно отказаться, от чего нет?
[08:28.320 --> 08:31.640]  Она понимаешь, она не сломается целиком полностью.
[08:31.640 --> 08:35.720]  Если она сломается, то скорее всего тебе выдадут закешированные
[08:35.720 --> 08:36.720]  результаты.
[08:36.720 --> 08:39.360]  Не знаю, результаты, которые устарели час назад.
[08:39.360 --> 08:46.960]  Они вряд ли помнят все поисковые запросы, но они помнят самые
[08:46.960 --> 08:49.400]  часто повторяемые поисковые запросы.
[08:49.400 --> 08:56.280]  Поисковый, ну хорошо, поисковый индекс, как правило, состоит
[08:56.280 --> 09:00.720]  из, то есть как вы думаете, поисковый индекс, что это
[09:00.880 --> 09:01.880]  А?
[09:01.880 --> 09:05.480]  Как она хранится?
[09:05.480 --> 09:13.000]  Надеюсь, когда это… Опять же, если на сегодня байке,
[09:13.000 --> 09:18.400]  2007 год, Павел Дуров выступает у нас на конференции, в первый
[09:18.400 --> 09:23.120]  раз показался, у него спрашивают, 2009, в ВКонтакте уже растет
[09:23.120 --> 09:25.720]  бешено, огромное количество пользователей.
[09:25.720 --> 09:28.720]  Они спрашивают, как вы храните фотографии, технический
[09:28.720 --> 09:29.720]  вопрос.
[09:29.720 --> 09:30.720]  Люди интересуются.
[09:30.720 --> 09:31.720]  Ну блин, такое море фотографий.
[09:31.720 --> 09:34.720]  Как их хранить нужно, распределять по серверам, еще что-то.
[09:34.720 --> 09:37.720]  Он так смотрит на чувака и говорит, на дисках.
[09:37.720 --> 09:46.720]  Короче, к чему я это рассказал?
[09:46.720 --> 09:49.720]  За что я зацепился?
[09:49.720 --> 09:53.720]  Про индекс.
[09:53.720 --> 09:56.720]  Индекс хранится не на одном сервере.
[09:56.720 --> 10:00.720]  Индекс хранится на тысячах, если не десятках тысяч серверов,
[10:00.720 --> 10:02.720]  разделенные на кусочки.
[10:02.720 --> 10:05.720]  Поисковая система в целом не сломается, может сломаться
[10:05.720 --> 10:07.720]  какой-то конкретный кусочек.
[10:07.720 --> 10:11.720]  То есть ты в результатах поиска у тебя не будет, например,
[10:11.720 --> 10:13.720]  одной десятитысячной части.
[10:13.720 --> 10:16.720]  Ты об этом никогда не узнаешь.
[10:16.720 --> 10:19.720]  Индекс сломаться, в смысле поиск сломаться в индексе
[10:19.720 --> 10:20.720]  почти не может.
[10:20.720 --> 10:22.720]  Это там какая-то катастрофа.
[10:22.720 --> 10:27.720]  Когда вы ищете что-то в Яндексе, поиск происходит одновременно
[10:27.720 --> 10:29.720]  по всей этой сети.
[10:29.720 --> 10:34.720]  То есть эта машина ищет великий Путин у себя.
[10:34.720 --> 10:36.720]  Эта машина ищет великий Путин у себя.
[10:36.720 --> 10:38.720]  Великий Путин скорее всего закэшировано.
[10:38.720 --> 10:40.720]  Какой-нибудь у меня не знаю.
[10:40.720 --> 10:43.720]  Великий Навальный просто ищет старательно.
[10:43.720 --> 10:47.720]  Каждый из них выдает свой кусочек результата, они
[10:47.720 --> 10:51.720]  собираются выше, потом еще выше, еще выше, и ты видишь
[10:51.720 --> 10:52.720]  уже результат.
[10:52.720 --> 10:55.720]  Короче, если кто-то что-то только наверху сломается,
[10:55.720 --> 10:57.720]  тогда вы можете заметить, что Яндекс не работает.
[10:57.720 --> 10:59.720]  Но это очень редко.
[10:59.720 --> 11:07.720]  Вот если что-нибудь такое сломается, тема авторизации
[11:07.720 --> 11:09.720]  и так далее.
[11:09.720 --> 11:13.720]  Лады, но это каждый раз такая головная боль на всех.
[11:13.720 --> 11:15.720]  Так, понеслась.
[11:15.720 --> 11:17.720]  Значит, функциональные требования.
[11:17.720 --> 11:20.720]  Что видят пользователи на каждой странице.
[11:20.720 --> 11:23.720]  Ну давайте про социальную сетку про нашу.
[11:26.720 --> 11:31.720]  Что можно подойти к этому вопросу, что может сделать
[11:31.720 --> 11:32.720]  пользователь.
[11:32.720 --> 11:34.720]  Каждый из пользователей.
[11:34.720 --> 11:36.720]  Но это не совсем ваша работа.
[11:39.720 --> 11:40.720]  Давайте пока не будем.
[11:40.720 --> 11:42.720]  Нет, не может.
[11:45.720 --> 11:48.720]  Да, он может подписываться на гидов.
[11:48.720 --> 11:50.720]  Нет, давайте он может подписываться даже не на гидов,
[11:50.720 --> 11:52.720]  он может подписываться на места.
[11:52.720 --> 11:53.720]  Ну типа я хочу посмотреть.
[11:53.720 --> 11:55.720]  Нет, давайте на гидов.
[11:55.720 --> 11:57.720]  Он подписывается на гидов, соответственно у него есть
[11:57.720 --> 12:01.720]  лента из его, из статьи гида.
[12:05.720 --> 12:08.720]  А ты заходишь тогда, ну можно зайти на страничку мест.
[12:12.720 --> 12:14.720]  Ну есть место, есть гид, да.
[12:14.720 --> 12:16.720]  Гид публикует статьи, привязанные к месту.
[12:19.720 --> 12:22.720]  Какую-то нужно выбрать логику.
[12:22.720 --> 12:25.720]  Это не ваша работа в прямом смысле.
[12:25.720 --> 12:27.720]  То есть вам системный аналитик по-хорошему,
[12:27.720 --> 12:32.720]  аналитик должен принести пачку технического задания.
[12:32.720 --> 12:35.720]  Но вам для того, чтобы понять, нужно какая-то логика.
[12:35.720 --> 12:37.720]  Ну допустим давайте пойдем по страницам.
[12:37.720 --> 12:39.720]  Можно пойти по объектам.
[12:39.720 --> 12:42.720]  Или по пользователям, по типам пользователей.
[12:42.720 --> 12:43.720]  Пользователь – гид.
[12:43.720 --> 12:45.720]  Вот он что может сделать на сайте.
[12:45.720 --> 12:47.720]  Раз, два, три, четыре, пять.
[12:47.720 --> 12:49.720]  Пользователь – простой путешественник.
[12:49.720 --> 12:51.720]  Что он может сделать на сайте?
[12:51.720 --> 12:53.720]  Раз, два, три, четыре, пять.
[12:56.720 --> 12:57.720]  Или по страницам.
[12:57.720 --> 12:58.720]  Страничка – место.
[12:58.720 --> 13:00.720]  Что там отображается?
[13:00.720 --> 13:02.720]  Раз, два, три, четыре, пять.
[13:02.720 --> 13:05.720]  И дальше у вас складывается какая-то некая логика.
[13:06.720 --> 13:09.720]  Страничка пользователя, его личная страничка.
[13:09.720 --> 13:10.720]  Что он там видит?
[13:10.720 --> 13:11.720]  Страничка его фронтлента.
[13:11.720 --> 13:13.720]  Окей, пора спрашивали.
[13:13.720 --> 13:15.720]  Все вопросы, все поняли.
[13:16.720 --> 13:17.720]  Дальше.
[13:18.720 --> 13:19.720]  Про данные.
[13:19.720 --> 13:20.720]  Что будете спрашивать?
[13:20.720 --> 13:22.720]  Такого у нас пять клипов данных.
[13:22.720 --> 13:27.720]  Место, статья, фотка, пользователь, гид.
[13:46.720 --> 13:49.720]  Не, не, не.
[13:49.720 --> 13:53.720]  Как быстро отклик получать – это скорее функциональное требование.
[13:53.720 --> 13:56.720]  Как быстро страница у тебя показывается.
[13:56.720 --> 13:58.720]  Как быстро сервер отвечает.
[13:58.720 --> 14:00.720]  Вот это не функциональное требование.
[14:07.720 --> 14:08.720]  Функции сайта.
[14:08.720 --> 14:10.720]  От слова функции.
[14:10.720 --> 14:12.720]  Как эти функции работают?
[14:12.720 --> 14:15.720]  Не как в смысле, что делают.
[14:15.720 --> 14:18.720]  У тебя максимальное время ответа – одна миллисекунда.
[14:18.720 --> 14:20.720]  Вот это не функциональное требование.
[14:20.720 --> 14:22.720]  Время простое.
[14:22.720 --> 14:24.720]  Не больше одного часа в год.
[14:24.720 --> 14:26.720]  Это не функциональное требование.
[14:29.720 --> 14:31.720]  Как скоро что?
[14:33.720 --> 14:34.720]  Давай.
[14:43.720 --> 14:45.720]  Ну, я не знаю.
[14:45.720 --> 14:47.720]  Ну, пусть будет функциональное.
[14:47.720 --> 14:48.720]  Хорошо.
[14:48.720 --> 14:50.720]  Это функции сайта.
[14:50.720 --> 14:52.720]  Понимаешь, это скорее…
[14:52.720 --> 14:55.720]  То есть важно ли пользователю видеть…
[14:57.720 --> 14:58.720]  Ну да.
[14:58.720 --> 14:59.720]  Хорошо.
[14:59.720 --> 15:00.720]  Видеть это сразу.
[15:02.720 --> 15:03.720]  Окей.
[15:03.720 --> 15:05.720]  Короче, давайте не скакать.
[15:06.720 --> 15:08.720]  Выясняем все про данные.
[15:08.720 --> 15:09.720]  Про каждый объект.
[15:09.720 --> 15:10.720]  Что мы хотим спросить?
[15:12.720 --> 15:13.720]  Ага.
[15:13.720 --> 15:14.720]  Количество.
[15:14.720 --> 15:15.720]  Объем.
[15:16.720 --> 15:17.720]  Количество.
[15:17.720 --> 15:18.720]  Количество.
[15:31.720 --> 15:32.720]  Так.
[15:32.720 --> 15:34.720]  Максимальный размер.
[15:34.720 --> 15:35.720]  Время жизни.
[15:36.720 --> 15:37.720]  Ага.
[15:40.720 --> 15:41.720]  Ну как-то.
[15:41.720 --> 15:42.720]  Все важно.
[15:42.720 --> 15:43.720]  Все важно.
[15:43.720 --> 15:44.720]  Все важно.
[15:44.720 --> 15:45.720]  Все важно.
[15:49.720 --> 15:50.720]  Что еще?
[15:50.720 --> 15:51.720]  Про каждый объект.
[15:51.720 --> 15:52.720]  Количество.
[15:52.720 --> 15:53.720]  Окей.
[15:53.720 --> 15:54.720]  Максимальный размер.
[15:54.720 --> 15:55.720]  Окей.
[15:56.720 --> 15:57.720]  Время жизни.
[15:59.720 --> 16:00.720]  Что еще?
[16:00.720 --> 16:01.720]  Чего не хватает?
[16:01.720 --> 16:02.720]  А?
[16:03.720 --> 16:05.720]  Ну понятно дело, да.
[16:05.720 --> 16:06.720]  Описание само, да.
[16:19.720 --> 16:20.720]  Окей.
[16:20.720 --> 16:21.720]  Я понял.
[16:21.720 --> 16:22.720]  То есть какая-то…
[16:22.720 --> 16:23.720]  Не знаю.
[16:25.720 --> 16:26.720]  Ну то есть вот…
[16:26.720 --> 16:28.720]  Ну это количество.
[16:28.720 --> 16:29.720]  По большому счету.
[16:30.720 --> 16:39.720]  Ну я тебе скажу, что в день миллион статей, я не знаю,
[16:39.720 --> 16:40.720]  пять миллионов фотографий.
[16:40.720 --> 16:41.720]  Вот ты в принципе…
[16:41.720 --> 16:43.720]  В связи с объектом.
[16:43.720 --> 16:44.720]  В связи…
[16:44.720 --> 16:45.720]  В связи…
[16:45.720 --> 16:46.720]  Отдельная история, да.
[16:46.720 --> 16:47.720]  А потом с объектом.
[16:47.720 --> 16:48.720]  Не каждый объект.
[16:48.720 --> 16:49.720]  Да.
[16:49.720 --> 16:50.720]  А пишем?
[16:50.720 --> 16:52.720]  Мы потом их будем еще друг с другом связывать.
[16:52.720 --> 16:53.720]  Что еще?
[16:53.720 --> 16:54.720]  Здесь не все.
[16:56.720 --> 16:57.720]  Окей.
[16:57.720 --> 16:58.720]  Время жизни.
[16:58.720 --> 16:59.720]  Давайте еще что-то…
[16:59.720 --> 17:00.720]  Не знаю.
[17:00.720 --> 17:01.720]  Жизненный цикл.
[17:01.720 --> 17:02.720]  Напишем вот такую историю.
[17:02.720 --> 17:05.720]  То есть можно это меняться или нет?
[17:05.720 --> 17:07.720]  Вы знаете, что, например, большинство социальных сетей,
[17:07.720 --> 17:10.720]  когда вы что-то удаляете, оно не удаляется.
[17:10.720 --> 17:11.720]  Реально.
[17:11.720 --> 17:12.720]  Это очень дорого.
[17:12.720 --> 17:13.720]  Не имеет смысла.
[17:13.720 --> 17:14.720]  Нужно…
[17:14.720 --> 17:16.720]  Жесткий диск фаргментируется.
[17:16.720 --> 17:19.720]  Его просто помечают, как удаленное, и все.
[17:19.720 --> 17:20.720]  Все ваши поток…
[17:24.720 --> 17:25.720]  А это не так…
[17:25.720 --> 17:27.720]  Не так страшно.
[17:27.720 --> 17:28.720]  Памяти очень дешевые.
[17:28.720 --> 17:30.720]  Памяти очень дешевые.
[17:30.720 --> 17:34.720]  А вот скорость гораздо важнее.
[17:34.720 --> 17:38.720]  Даже потеря от того, что у тебя битый будет просто-напросто…
[17:38.720 --> 17:41.720]  На диске все будет не подряд идти, а где-то будет дырка.
[17:41.720 --> 17:43.720]  Ну, знаете, как работает жесткий диск.
[17:43.720 --> 17:47.720]  Да, то есть если у вас банально тупо вырезали какой-то…
[17:47.720 --> 17:48.720]  Вот у вас файл лежит.
[17:48.720 --> 17:49.720]  Длинный.
[17:49.720 --> 17:51.720]  Вы вот этот кусочек вырезаете.
[17:51.720 --> 17:52.720]  Он свободен.
[17:52.720 --> 17:55.720]  А потом нужно записать какую-то вот такую-то фигню.
[17:55.720 --> 17:56.720]  Что сделать нормальный жесткий диск?
[17:56.720 --> 17:58.720]  Вот этот кусочек запишет сюда.
[17:58.720 --> 18:00.720]  Вот этот кусочек запишет вот сюда.
[18:02.720 --> 18:03.720]  То есть он уже фрагментирован.
[18:03.720 --> 18:04.720]  Не, не хотим.
[18:06.720 --> 18:09.720]  Потому что в этом случае у тебя как минимум требуется,
[18:09.720 --> 18:10.720]  не знаю, два движения…
[18:11.720 --> 18:13.720]  Ну, смотря какой у тебя жесткий диск, да.
[18:13.720 --> 18:16.720]  То есть как будто два запроса.
[18:16.720 --> 18:18.720]  Сначала вот это считаешь, потом вот это считаешь.
[18:18.720 --> 18:20.720]  Считай там все равно блоками.
[18:20.720 --> 18:21.720]  Да ну нафиг.
[18:21.720 --> 18:22.720]  Никто этим не парится.
[18:22.720 --> 18:23.720]  Просто помечают галочки.
[18:23.720 --> 18:24.720]  Удалено.
[18:24.720 --> 18:27.720]  Причем ты удалять это должен сейчас не с одного места.
[18:27.720 --> 18:31.720]  Скорее всего это все данные хранятся в нескольких местах.
[18:31.720 --> 18:34.720]  Еще что-то где-то в бекапах и т.д.
[18:34.720 --> 18:38.720]  Но сейчас скорее всего от этого уходит, потому что мы же…
[18:38.720 --> 18:45.720]  Потому что GDPR, Европейский закон о защите персональных данных,
[18:45.720 --> 18:51.720]  и по нему ты можешь потребовать, чтобы твои данные были удалены.
[18:51.720 --> 18:52.720]  Физически.
[18:53.720 --> 18:55.720]  Раньше на эту тему никто не парился.
[18:56.720 --> 18:57.720]  Про что?
[19:01.720 --> 19:02.720]  Ну согласен.
[19:02.720 --> 19:03.720]  Хорошо.
[19:03.720 --> 19:04.720]  Еще.
[19:12.720 --> 19:14.720]  Ну это скорее вот сюда.
[19:14.720 --> 19:17.720]  То есть как бы есть ли у нас какая-то региональная привязка.
[19:17.720 --> 19:18.720]  Или нет.
[19:19.720 --> 19:23.720]  То есть типа в одном регионе одни типы данных другом-другом.
[19:23.720 --> 19:24.720]  Нет.
[19:24.720 --> 19:26.720]  Ну все примерно, наверное.
[19:26.720 --> 19:28.720]  Еще чего-то не хватает.
[19:39.720 --> 19:40.720]  Достаточное.
[19:44.720 --> 19:45.720]  Давайте так.
[19:46.720 --> 19:48.720]  Максимальные размеры вы спросили.
[19:48.720 --> 19:50.720]  Количество вы спросили.
[19:53.720 --> 19:57.720]  Важно ли вам, не знаю, ну говоря вам важно, да?
[19:57.720 --> 20:00.720]  То есть средние размеры.
[20:00.720 --> 20:06.720]  Короче, когда вы спрашиваете про данные, вы спрашиваете не только максимальные значения.
[20:06.720 --> 20:12.720]  Вы про все спрашиваете максимальные значения и средние значения.
[20:16.720 --> 20:18.720]  Конечно.
[20:19.720 --> 20:24.720]  Если он хороший менеджер, он эффективный и хороший менеджер, он проектирует систему.
[20:24.720 --> 20:26.720]  Да, он примерно знает.
[20:26.720 --> 20:30.720]  Догадывается или есть какие-то предварительные прикидки.
[20:34.720 --> 20:36.720]  Зачем вам это потребуется?
[20:36.720 --> 20:37.720]  Это очень просто.
[20:37.720 --> 20:43.720]  Максимальные значения вам потребуется для того, чтобы рассчитать общие какие-то объемы хранения.
[20:43.720 --> 20:45.720]  Общие объемы хранения.
[20:45.720 --> 20:47.720]  А как бы предельные случаи.
[20:47.720 --> 20:51.720]  Какого размера может быть видео на YouTube?
[20:53.720 --> 20:54.720]  Не, видео, видео, видео.
[20:54.720 --> 20:56.720]  Вот ты закачиваешь видосик.
[20:56.720 --> 20:58.720]  Не любого.
[20:59.720 --> 21:04.720]  Когда ты закачиваешь собственное видео на YouTube, ты не можешь закачать любой размер.
[21:04.720 --> 21:05.720]  Ни фига.
[21:05.720 --> 21:09.720]  А есть какое-то ограничение, по-моему 2 ГБ или что-то такое.
[21:10.720 --> 21:16.720]  Но это тебе ничего не дает для того, чтобы рассчитать, сколько тебе места потребуется, например, для того, чтобы все это хранить.
[21:16.720 --> 21:19.720]  Это тебе дает средние значения.
[21:19.720 --> 21:21.720]  Поэтому тебе нужно и то, и то.
[21:21.720 --> 21:25.720]  И это все остается как количества, так максимального размера.
[21:25.720 --> 21:30.720]  Сколько всего в среднем публикуется постов о местах в день?
[21:35.720 --> 21:37.720]  И сколько максимум можно публиковать?
[21:37.720 --> 21:38.720]  Есть ли какие-нибудь ограничения?
[21:38.720 --> 21:40.720]  В Facebook'е 5000 друзей.
[21:40.720 --> 21:41.720]  Почему?
[21:46.720 --> 21:47.720]  Клиент?
[21:47.720 --> 21:48.720]  Ленту.
[21:48.720 --> 21:49.720]  Ну, ленту, да.
[21:49.720 --> 21:57.720]  Они построили какую-то такую архитектуру, в которой появляется это ограничение.
[21:57.720 --> 21:59.720]  Они не могут сделать бесконечное у тебя ленту.
[21:59.720 --> 22:01.720]  Бесконечное количество участников.
[22:03.720 --> 22:04.720]  То есть, там есть ограничения.
[22:04.720 --> 22:05.720]  5000 друзей.
[22:05.720 --> 22:06.720]  Все, не больше.
[22:06.720 --> 22:08.720]  Почему-то, я не знаю, почему они так делают.
[22:10.720 --> 22:12.720]  Был такой сайт Life Journal.
[22:12.720 --> 22:16.720]  Крутишь назад, они ленту держали за последние, не знаю, полгода.
[22:16.720 --> 22:19.720]  А потом эта лента превращалась в календарь.
[22:19.720 --> 22:24.720]  И ты смотрел уже посты не в виде ленты, а в виде, привязанных к календарной дате.
[22:24.720 --> 22:27.720]  Тоже по какой-то внутренней архитектурной причине.
[22:27.720 --> 22:28.720]  Какая-то ошибка.
[22:28.720 --> 22:32.720]  Но у всех ли у пользователей Facebook'а 5000 друзей?
[22:32.720 --> 22:34.720]  Нет, там среднее значение где-то 300.
[22:34.720 --> 22:36.720]  И тебе для того, чтобы рассчитать общий объем базы данных
[22:36.720 --> 22:40.720]  и понять сколько тех связей между пользователями, тебе нужны средние значения.
[22:40.720 --> 22:42.720]  Так, но этого все равно недостаточно.
[22:43.720 --> 22:49.720]  Количество максимальной средней значения, доступа, описания этого недостаточно для того, чтобы правильно спрактировать.
[22:49.720 --> 22:50.720]  Чего упустили?
[22:52.720 --> 22:54.720]  Один очень важный кусок.
[23:00.720 --> 23:01.720]  Ну?
[23:04.720 --> 23:05.720]  Думаете?
[23:06.720 --> 23:08.720]  Не сможете, не заработает.
[23:08.720 --> 23:10.720]  В смысле спроектируете, заработает.
[23:10.720 --> 23:12.720]  А через год придется выбросить.
[23:14.720 --> 23:15.720]  Да.
[23:17.720 --> 23:19.720]  Как данные будут изменяться.
[23:19.720 --> 23:21.720]  Все вот эти же самые параметры.
[23:22.720 --> 23:23.720]  Еще и в динамике.
[23:27.720 --> 23:32.720]  Жизненный цикл это можно удалять, нельзя удалять, можно изменять, нельзя удалять и так далее.
[23:32.720 --> 23:33.720]  Нет.
[23:33.720 --> 23:34.720]  Да.
[23:34.720 --> 23:36.720]  Что будет через год, грубо говоря.
[23:38.720 --> 23:40.720]  Что будет через год.
[23:45.720 --> 23:49.720]  Во-первых, у вас могут появиться вообще просто тупо через год новые типы данных.
[23:49.720 --> 23:55.720]  Конечно, скажу я, как эффективный менеджер, нужно видео еще выкладывать из мест.
[23:55.720 --> 23:58.720]  А места мы объединим с вами в регионы.
[23:58.720 --> 24:01.720]  А еще добавим достопримечательности.
[24:01.720 --> 24:03.720]  И отдельно статуи.
[24:05.720 --> 24:09.720]  И вот я вам накидал уже пяток еще каких-то новых данных и так далее.
[24:09.720 --> 24:16.720]  А то, что у вас появляется видео, вам вообще может повлиять кардинально на то, что вы хотите разработать.
[24:17.720 --> 24:18.720]  И так далее.
[24:18.720 --> 24:23.720]  И то есть, не только про новые типы вообще как класса, но и про конкретное значение.
[24:23.720 --> 24:26.720]  Вот сейчас выкладывается, например, 100 мест, ребят.
[24:26.720 --> 24:29.720]  А через год мы добавим весь мир.
[24:29.720 --> 24:31.720]  У нас мест будет уже 10 тысяч.
[24:33.720 --> 24:39.720]  Мы потом, когда с вами начнем непосредственно проектировать, у нас от этого начнет вообще все сыпаться.
[24:39.720 --> 24:41.720]  Вот от вот этих вот вопросов.
[24:41.720 --> 24:47.720]  Что происходит, как происходит, как они будут меняться и так далее.
[24:47.720 --> 24:49.720]  От этого могут решения ваши.
[24:49.720 --> 24:51.720]  То есть, что вы выбираете, что не выбираете.
[24:51.720 --> 24:52.720]  И так вот.
[25:00.720 --> 25:02.720]  Нет, подожди.
[25:02.720 --> 25:05.720]  Мы не можем сказать, что будет просто 10 тысяч.
[25:05.720 --> 25:10.720]  Потому что мы так и должны держать в голове, что сейчас 100, потом будет 10 тысяч.
[25:10.720 --> 25:12.720]  И во-первых, что это означает?
[25:12.720 --> 25:14.720]  Это означает, что эти будут расти.
[25:14.720 --> 25:16.720]  Количество будет постепенно добавляться.
[25:16.720 --> 25:22.720]  То есть, ты должен такую архитектуру придумать, где ты можешь легко добавлять новое количество мест.
[25:23.720 --> 25:26.720]  Конечно, если бы я тебе сказал, что будет там, я не знаю, 100 мест.
[25:26.720 --> 25:28.720]  И так будет всегда.
[25:28.720 --> 25:33.720]  Ты можешь выделить по одному серваку на место и тупо расслабиться и забыть об этом, например.
[25:33.720 --> 25:35.720]  И закрыть вопрос с архитектурой навсегда.
[25:35.720 --> 25:37.720]  Ну, допустим.
[25:37.720 --> 25:45.720]  А если их будет постепенно увеличиваться, значит, ты должен придумать схему, когда будет сначала 2, потом 4, потом 10, потом 100 и так далее.
[25:46.720 --> 25:50.720]  А архитектура может быть подавленной идеей, которая в данном случае трудно внедряться.
[25:50.720 --> 25:51.720]  Да.
[25:51.720 --> 25:58.720]  Поэтому очень часто, когда новая команда программистов приходит на проект, мы первым делаем, что пытается сделать?
[25:58.720 --> 26:00.720]  Все переписать.
[26:00.720 --> 26:08.720]  Не потому, что предыдущие были идиотами, а потому, что, как правило, предыдущие действовали в определенный...
[26:08.720 --> 26:13.720]  Ну, то есть, у них был определенный набор входных данных, они его сделали.
[26:13.720 --> 26:23.720]  Прошло время, данные поменялись, и новые задачи не всегда впихиваются в проект, не всегда предусмотрены.
[26:23.720 --> 26:25.720]  Это плохая архитектура.
[26:25.720 --> 26:31.720]  Хорошая архитектура предполагает, как бы, это все учитывает, потенциально растучитывает.
[26:31.720 --> 26:34.720]  Так, что еще?
[26:34.720 --> 26:40.720]  Короче, вот это все, потом тоже среднее значение, и потом тоже самое, что будет через год.
[26:40.720 --> 26:42.720]  Еще.
[26:43.720 --> 26:47.720]  Нет, вообще по всему. Давайте подумаем про всему.
[26:51.720 --> 26:53.720]  Сроки отработки.
[26:56.720 --> 26:58.720]  Хороший вопрос.
[26:58.720 --> 27:01.720]  Можно добавить сюда еще бизнес-требования.
[27:05.720 --> 27:09.720]  В предыдущие года мы об этом не догадывались.
[27:12.720 --> 27:21.720]  Сроки, деньги, какие-то граничные условия, которые у нас есть.
[27:21.720 --> 27:33.720]  Например, есть разные языки программирования. На разных языках программирования разная стоимость программирования.
[27:33.720 --> 27:36.720]  То есть, как бы, стоимость разработчиков.
[27:36.720 --> 27:39.720]  Есть языки очень дорогие, но эффективные.
[27:39.720 --> 27:45.720]  Ну, например, вот СИШники, СИ++. Прекрасный язык.
[27:45.720 --> 27:52.720]  Но, блин, программисты стоят дорого, их мало, их дорого, их мало.
[27:52.720 --> 27:57.720]  Ядро Янекса написано СИ++. Естественно, больше не на чем.
[27:57.720 --> 28:05.720]  А какую-нибудь сетку, социальную сетку можно написать, в принципе, на любом языке программирования.
[28:05.720 --> 28:10.720]  И вот это есть бизнес-требования. Сколько у нас есть денег? Сколько мы готовы ждать?
[28:17.720 --> 28:19.720]  Ну, может устраивать, да.
[28:19.720 --> 28:22.720]  Может прийти заказчик и сказать, слушай, это нужно через два месяца.
[28:22.720 --> 28:26.720]  Или у нас как Олимпиада делась в 2014?
[28:26.720 --> 28:29.720]  Через пень-колоду в последний момент пришли, сказали, через полгода у нас сделать.
[28:31.720 --> 28:33.720]  Олимпиаду. Сайт Олимпиады.
[28:34.720 --> 28:41.720]  А там безграничное потенциальное количество человек в день.
[28:44.720 --> 28:48.720]  Да, а потом при этом ты должен учитывать, что поиспользует, потом выбросит.
[28:48.720 --> 28:51.720]  И нагрузка будет скакать.
[28:51.720 --> 28:57.720]  Да, то есть она сегодня на 100 миллионов человек в день, а завтра она миллион.
[28:57.720 --> 28:59.720]  А послезавтра ноль.
[29:00.720 --> 29:06.720]  И, пожалуйста, построи такую архитектуру, чтобы она, когда послезавтра ноль человек,
[29:06.720 --> 29:09.720]  я не платил столько же, сколько за 100 миллионов.
[29:11.720 --> 29:16.720]  Ну, это скорее, это скорее какие-то вот суда, вот профили нагрузки.
[29:16.720 --> 29:26.720]  То есть как у нас будут работать, что мы ожидаем, сколько человек, посещаемость и так далее.
[29:26.720 --> 29:28.720]  Кстати, про посещаемость вы меня спросили?
[29:29.720 --> 29:30.720]  Да.
[29:33.720 --> 29:34.720]  Ну.
[29:36.720 --> 29:38.720]  Ну да, надо не забыть.
[29:40.720 --> 29:42.720]  У нас функциональная или не функциональная?
[29:43.720 --> 29:45.720]  Короче, посещаемость.
[29:46.720 --> 29:48.720]  И профили посещаемости.
[29:48.720 --> 29:51.720]  Да, то есть как нам ходят, откуда.
[29:54.720 --> 29:56.720]  Что мы про это знаем?
[29:57.720 --> 30:01.720]  Есть ли, я не знаю, какие-то регионы, которые нас особо любят?
[30:01.720 --> 30:03.720]  Или время, например, я не знаю.
[30:03.720 --> 30:06.720]  Клерки возвращаются с работы и смотрят.
[30:11.720 --> 30:13.720]  Так, ладно, дальше.
[30:13.720 --> 30:15.720]  Бизнес-требования. Деньги, время.
[30:20.720 --> 30:23.720]  Деньги, время, команда. Кто у нас уже есть?
[30:26.720 --> 30:32.720]  У нас сейчас важно, не найдешь программистов, их мало, они дорогие и так далее.
[30:32.720 --> 30:39.720]  Если у нас есть, например, там три PHP-шника, придется писать на PHP.
[30:44.720 --> 30:48.720]  В идеальном мире это несвязанные вещи.
[30:48.720 --> 30:53.720]  Ну, то есть как бы у тебя, по-правильному, конечно, до.
[30:54.720 --> 30:58.720]  То есть ты берешь, но реально, как правило, все происходит параллельно.
[30:58.720 --> 31:02.720]  Но тебе с точки зрения проектирования архитектуры не важно.
[31:02.720 --> 31:04.720]  По большому счету.
[31:08.720 --> 31:17.720]  Там очень в небольшом количестве мест архитектурное решение влияет на то, на каком языке это нужно писать.
[31:23.720 --> 31:29.720]  В очень небольшом количестве мест. То есть мы когда говорим про архитектуру, мы говорим про паттерн.
[31:29.720 --> 31:35.720]  Ну, например, шардирование. Общий объем данных разделяется на кусочки.
[31:37.720 --> 31:41.720]  Винь, ты слышал, какую конкретную базу данных здесь использовать?
[31:41.720 --> 31:47.720]  Вот когда я сейчас сказал. Общий объем данных разделяется на кусочки, каждый кусочек кладется в свою базу данных.
[31:47.720 --> 31:51.720]  Какую базу данных мы будем использовать? Да без разницы.
[31:51.720 --> 31:53.720]  То же самое и с языком.
[31:54.720 --> 32:04.720]  Вот этот принцип разделения большого объема данных на кусочки каждой из своих баз данных называется архитектурный паттерн шардирования.
[32:05.720 --> 32:10.720]  Он параллелен тому, какую базу данных ты используешь.
[32:10.720 --> 32:15.720]  В большинстве архитектурных паттернов параллельно, какой язык ты используешь. Не важно.
[32:15.720 --> 32:18.720]  Там один или два паттерна там важны.
[32:18.720 --> 32:30.720]  Да, то есть, ну, какой он там, не знаю, комет, сервер или какой-нибудь, не знаю, сервер, который держит какие-нибудь кипелайв соединения, сложно написать на чем-нибудь, кроме там C++ или Go.
[32:32.720 --> 32:36.720]  Сложно написать на PHP, а так в основном без разницы.
[32:36.720 --> 32:38.720]  Так, дальше, что еще?
[32:40.720 --> 32:42.720]  Еще один кусочек маленький забыли.
[32:42.720 --> 32:57.720]  Здесь посещаемость, скорость ответа, страниц, да, деградация, потенциальные.
[33:01.720 --> 33:06.720]  Так, во-первых, мы должны еще с вами узнать функциональные требования точно так же.
[33:06.720 --> 33:12.720]  Мы уже раздели сейчас, в разрезе сейчас и потом.
[33:16.720 --> 33:22.720]  А что будет через год? Не только про данные мы с вами спрашиваем, что нас изменит, но и про функциональные требования.
[33:22.720 --> 33:36.720]  В принципе все, все вопросы, которые вы задавали, сейчас посмотрю, они упираются во что-то из вот этого.
[33:40.720 --> 33:44.720]  Вы спрашиваете функциональные требования, что умеет делать система.
[33:45.720 --> 33:48.720]  Вы спрашиваете про данные.
[33:48.720 --> 33:57.720]  Вы спрашиваете про то, какие они есть, про их количество, про их максимальные и средние размеры, про их жизненный цикл, что с ними может происходить.
[33:58.720 --> 34:11.720]  Понятное дело, состав, описание, права доступа, как к ним организован доступ, есть ли какие-нибудь ограничения, потом связи между ними, как они связываются с друг с другом.
[34:12.720 --> 34:30.720]  У пользователя есть подписки на гидов. Сколько может быть? Какие есть ограничения? На сколько я могу подписаться на гидов? На одного, двух, на сто. Я могу не подписываться на гидов, я могу отписаться на гидов.
[34:31.720 --> 34:42.720]  Все это в разрезе, что сейчас и что будет потом. То же самое с нефункциональными требованиями, тоже в разрезе, что сейчас и что будет потом.
[34:43.720 --> 34:56.720]  Как быстро сайт должен отвечать? Какая посещаемость? Какая нагрузка? Сколько мы планируем? Могут ли быть какие-то скачки посещаемости? Не знаю, в пять раз, в десять раз. Ну как вообще это работает?
[34:56.720 --> 35:08.720]  И бизнес-требования. Сколько у нас денег? Сколько у нас времени? Можем ли мы, не знаю, кто у нас есть уже из команды и так далее.
[35:27.720 --> 35:43.720]  Вообще каждый раз по-разному. Не, никаких у тебя, может быть, что угодно. Максимальные значения тебе нужны для того, чтобы в предельные случаи проверить, чтобы понять, как тебя там, не знаю, взламывать будут.
[35:43.720 --> 35:58.720]  Я могу написать пост в виде войны и мира или нет? Понятно дело, что таких странных людей будет мало. Обычно будут нормальные посты, не знаю, два-три абзац.
[35:59.720 --> 36:09.720]  Но если ты будешь рассматривать и придумывать систему хранения для двух-трех абзацов, то какой-нибудь чувак, который публикует войну и мир, может тебе все сломать просто-напросто.
[36:10.720 --> 36:24.720]  Поэтому обычно, обычно, вот эти вот максимальные значения, менеджер тебе может говорить, ну без разницы, мне все равно. И когда ты начнешь проектировать архитектуру, у тебя начнут эти максимальные значения вылезать.
[36:24.720 --> 36:42.720]  Ну, топа, ты не можешь видео. Откуда там, не знаю, два гигабайта? Такой, не знаю, кусочек слота на диске выделено под каждый видосик. Я не знаю, надо подумать.
[36:43.720 --> 36:52.720]  Или два гигабайта передаются между серверами с бэкапом, не знаю, не больше минуты, а у нас с тайм-аут минуты. Поэтому два гигабайта.
[36:52.720 --> 37:02.720]  То есть через какое-то время ты все равно все эти максимальные значения, если они даже не заданы исходно, ты их все равно задашь, просто уже исходя из своей архитектуры, исходя из того или иного пункта.
[37:02.720 --> 37:12.720]  Так, все, едем дальше, стираем. Запомнили?
[37:12.720 --> 37:38.720]  Едем дальше. Прямо начнем. Вообще структура нашего самого процесса. Сейчас мы с вами в каком-то смысле все еще готовимся к тому, чтобы начать.
[37:42.720 --> 37:54.720]  Подготовились? Можно начинать. Сейчас мы с вами приступаем к изучению так называемых архитектурных паттернов.
[37:55.720 --> 38:09.720]  То есть некие устоявшиеся подходы к проектированию тех или иных кусочков, к проектированию тех или иных блоков системы и так далее, мы их все изучаем.
[38:09.720 --> 38:17.720]  Пройдем все, поймем для чего, каждый из них, в каких ситуациях и так далее, и так далее, и так далее.
[38:18.720 --> 38:29.720]  Затем мы с вами изучим некий алгоритм вот этого самого проектирования. Прям первым пунктом является вот то, что мы с вами уже сделали, задавание вопросов.
[38:29.720 --> 38:37.720]  То есть выяснение того, что мы будем проектировать. Алгоритм проектирования очень простой. 5-6 шагов и так далее.
[38:38.720 --> 38:47.720]  А затем попробуем просто-напросто применить одно и другое. Будем брать проекты и будем пытаться их спроектировать.
[38:47.720 --> 38:56.720]  Итак, архитектурные паттерны. У нас их несколько штук. Давайте начнем с самых простых.
[38:57.720 --> 39:06.720]  Вот есть паттерны, которые потребуют от вас чего-то там, от программистов, которыми вы управляете или которым вы ставите задачу, каких-то серьезных больших переделок.
[39:07.720 --> 39:15.720]  А есть паттерны, которые не потребуют практически ничего. То есть не нужно покупать никаких новых серверов, не нужно ничего делать.
[39:15.720 --> 39:19.720]  Просто берете, внедряете и все начинает работать.
[39:24.720 --> 39:35.720]  Сейчас давайте прикинем, какой-нибудь мы начнем. То есть нам нужно увеличить в каком-то смысле производительность нашей системы.
[39:36.720 --> 39:41.720]  Нас проектировать. Понять, понять что. Возьмем сайт ВКонтакте. Кто смотрел?
[39:42.720 --> 39:47.720]  В прошлом занятии предлагал посмотреть, что происходит, когда вы загружаете странички ВКонтакте. Кто видел?
[39:48.720 --> 39:52.720]  Смотрел? Сколько страничек? Сколько там чего происходит?
[39:53.720 --> 39:55.720]  Ну да.
[39:55.720 --> 39:57.720]  Ну да, ну да.
[39:57.720 --> 40:21.720]  Ладно, так. Типичный сайт. Вот ВКонтакте, как пример.
[40:21.720 --> 40:28.720]  Страничка, логотипчик, много текста, много картинок.
[40:29.720 --> 40:35.720]  Мы с вами в прошлый раз смотрели, что происходит, как браузеры ее запрашивают.
[40:36.720 --> 40:42.720]  Браузер смотрит ее в кэше, затем скачет вот эту самую страничку, затем начинает скачивать каждую картинку отдельно.
[40:43.720 --> 40:47.720]  Ну в смысле параллельно, но тем не менее, каждый из них скачивается.
[40:48.720 --> 40:54.720]  После того, как он все это более-менее скачал, он скачал еще отсюда CSS файлы, JavaScript файлы и так далее.
[40:55.720 --> 41:06.720]  Вот допустим, у нас есть получается один HTML, то есть вот это вот весь контейнер, в котором все данные и все прочее.
[41:06.720 --> 41:16.720]  И для него нам нужно было произвести вычисления, посмотреть, не знаю, достать из базы последние новости или последние посты и так далее.
[41:17.720 --> 41:23.720]  Дальше. Внутри этого HTML у нас, например, не знаю, 5 CSS файлов, это файлы оформления.
[41:24.720 --> 41:33.720]  Не знаю, 5 JavaScript файлов, это файлы различных, не знаю, как это там запускается, всякие мигающие картиночки, мигающие бегающие надписи и так далее.
[41:33.720 --> 41:39.720]  Не знаю, 20 картинок и так.
[41:40.720 --> 41:44.720]  Ну вот у нас, вот такой вот у нас характер.
[41:45.720 --> 41:52.720]  Причем вот это у нас 100 килобайт, вот это у нас, не знаю, 20 килобайт.
[41:53.720 --> 41:58.720]  Суммарно, тоже 20 килобайт, а это мы примерно, не знаю, 1 мегабайт.
[41:59.720 --> 42:02.720]  Это все можно писать, это я придумываю из головы.
[42:03.720 --> 42:09.720]  Давайте думать. Здесь один запрос и еще 30 запросов на оформление.
[42:11.720 --> 42:18.720]  Вот структура. Давайте подумаем, как мы можем это спроектировать?
[42:18.720 --> 42:27.720]  Как мы можем как-то облегчить жизнь серверу, ускорить его работу, за что бы нам здесь сами зацепиться?
[42:30.720 --> 42:33.720]  Что вам здесь кажется подозрительным?
[42:33.720 --> 42:35.720]  Скорее, мне кажется, наоборот.
[42:38.720 --> 42:41.720]  Ну да, здесь уже, у тебя же здесь уже данные.
[42:42.720 --> 42:46.720]  У тебя в HTML, у тебя пост, текст поста, текст новости.
[42:47.720 --> 42:49.720]  Допустим, давайте новостной сайт для простоты.
[42:50.720 --> 42:52.720]  Вот новый новый сайт.
[42:53.720 --> 42:55.720]  Вот новый новый сайт.
[42:56.720 --> 43:07.720]  Ну что, один раз спрограммировали ребята, что при наведении на название новости появляется всплывашечка с автором, все.
[43:08.720 --> 43:11.720]  Спрограммировали, положили в Javascript и он лежит там годами.
[43:13.720 --> 43:21.720]  Это как сайты или сайты сайта сайта сайта сайта сайта сайта сайта сайта сайта сайта сайта сайта сайта, это не все.
[43:21.720 --> 43:25.720]  положили в JavaScript, и он лежит там годами.
[43:25.720 --> 43:27.720]  С...
[43:27.720 --> 43:29.720]  А?
[43:29.720 --> 43:31.720]  Окей, хорошо.
[43:31.720 --> 43:33.720]  Но это...
[43:33.720 --> 43:35.720]  Давай как архитекторы.
[43:35.720 --> 43:37.720]  Хорошо, да, можно пожать.
[43:37.720 --> 43:39.720]  Что еще можем сделать?
[43:39.720 --> 43:41.720]  Ну это вы...
[43:41.720 --> 43:43.720]  Да, это вы сложную штуку придумываете.
[43:45.720 --> 43:47.720]  Так делают, да.
[43:47.720 --> 43:49.720]  Согласен, это...
[43:49.720 --> 43:51.720]  Ну так делают, да.
[43:51.720 --> 43:53.720]  Да, когда вы тоже там
[43:53.720 --> 43:55.720]  БК или Фейсбук загружаете,
[43:55.720 --> 43:57.720]  он не загружает вам все, он загружает вам
[43:57.720 --> 43:59.720]  первые два-три поста.
[43:59.720 --> 44:01.720]  А все остальное
[44:01.720 --> 44:03.720]  он не загружает.
[44:03.720 --> 44:05.720]  Он не загружает.
[44:05.720 --> 44:07.720]  Он не загружает.
[44:07.720 --> 44:09.720]  Поста.
[44:09.720 --> 44:11.720]  А все остальное будет подгружаться.
[44:11.720 --> 44:13.720]  Это...
[44:13.720 --> 44:15.720]  Запомни и вспомни через
[44:15.720 --> 44:17.720]  пару занятий.
[44:17.720 --> 44:19.720]  Эту идею. Она сложная.
[44:19.720 --> 44:21.720]  Так, более простой способ, ребят.
[44:23.720 --> 44:25.720]  Вот это все можно
[44:25.720 --> 44:27.720]  закашировать, я согласен.
[44:29.720 --> 44:31.720]  Что еще можно сделать?
[44:37.720 --> 44:39.720]  Параметрию.
[44:39.720 --> 44:41.720]  Как же они там запомнили,
[44:41.720 --> 44:43.720]  где это будет все?
[44:43.720 --> 44:45.720]  А картинки надо зачем кашировать?
[44:45.720 --> 44:47.720]  Когда мы будем за Лену
[44:47.720 --> 44:49.720]  кашировать?
[44:49.720 --> 44:51.720]  Давай у нас новостной сайт.
[44:53.720 --> 44:55.720]  Новости.
[44:55.720 --> 44:57.720]  Да, картинки бывают разные,
[44:57.720 --> 44:59.720]  у тебя картинки бывают прясные к новостям,
[44:59.720 --> 45:01.720]  может их не надо кашировать.
[45:01.720 --> 45:03.720]  Хотя я бы все равно кашировал.
[45:03.720 --> 45:05.720]  Наверное, ты зашел на страницу,
[45:05.720 --> 45:07.720]  ну что, закашируй просто на день.
[45:07.720 --> 45:09.720]  Логотип ты можешь закашировать
[45:09.720 --> 45:11.720]  на год, а картинки на день.
[45:13.720 --> 45:15.720]  Здесь у тебя есть картинки оформления
[45:15.720 --> 45:17.720]  и картинки новостей.
[45:17.720 --> 45:19.720]  Эти на год,
[45:19.720 --> 45:21.720]  картинки новостей на день,
[45:21.720 --> 45:23.720]  пусть через день спираются.
[45:23.720 --> 45:25.720]  Потому что через день новость уже
[45:25.720 --> 45:27.720]  устарела и ушла куда-то в архив.
[45:27.720 --> 45:29.720]  Еще.
[45:29.720 --> 45:31.720]  Не хочу особо ничего
[45:31.720 --> 45:33.720]  менять.
[45:33.720 --> 45:35.720]  Но здесь, что здесь еще кажется
[45:35.720 --> 45:37.720]  подозрительным.
[45:37.720 --> 45:39.720]  То есть вот это у нас меняется.
[45:39.720 --> 45:41.720]  Как только вышла новая новость, это все меняется.
[45:41.720 --> 45:43.720]  Вот это все не меняется.
[45:43.720 --> 45:45.720]  Да, потенциально мы положим все, что не меняется
[45:45.720 --> 45:47.720]  в кэше.
[45:47.720 --> 45:49.720]  А с серверной стороны,
[45:49.720 --> 45:51.720]  вот у вас на сервере, помните, да?
[45:51.720 --> 45:53.720]  То есть идет запрос. Каждый из этих
[45:53.720 --> 45:55.720]  запросов попадает на серва,
[45:55.720 --> 45:57.720]  каждый из этих запросов обрабатывается.
[46:03.720 --> 46:05.720]  Почему?
[46:29.720 --> 46:31.720]  Ну,
[46:31.720 --> 46:33.720]  поднимаем вашу мысль,
[46:33.720 --> 46:35.720]  давайте ее докрутим.
[46:35.720 --> 46:37.720]  Ну, то есть смотрите.
[46:37.720 --> 46:39.720]  Для того, чтобы вот это вот...
[46:39.720 --> 46:41.720]  Какие ресурсы серверные нам нужны?
[46:41.720 --> 46:43.720]  Для того, чтобы вот HTML
[46:43.720 --> 46:45.720]  нарисовать.
[46:45.720 --> 46:47.720]  Нам нужно как процессорное время,
[46:47.720 --> 46:49.720]  нам нужно их вычислять,
[46:49.720 --> 46:51.720]  так и достать все это
[46:51.720 --> 46:53.720]  из базы данных, данные какие-то, да?
[46:55.720 --> 46:57.720]  Вот.
[46:57.720 --> 46:59.720]  Память нам нужна,
[46:59.720 --> 47:01.720]  и память нам нужна тоже в вычислении
[47:01.720 --> 47:03.720]  где-то производительного, не знаю, склада.
[47:03.720 --> 47:05.720]  Ну, в общем, короче, нам нужны ресурсы.
[47:05.720 --> 47:07.720]  А для того, чтобы CSS-ки...
[47:09.720 --> 47:11.720]  Только там вычисления
[47:11.720 --> 47:13.720]  не нужно, только жесткий диск.
[47:13.720 --> 47:15.720]  Скачал из жесткого диска и отправил.
[47:17.720 --> 47:19.720]  И это тоже.
[47:23.720 --> 47:25.720]  Потому что в HTML у тебя
[47:25.720 --> 47:27.720]  все данные нужно формировать.
[47:27.720 --> 47:29.720]  Не в том, чтобы отправить,
[47:29.720 --> 47:31.720]  а в том, чтобы формировать.
[47:31.720 --> 47:33.720]  Да?
[47:37.720 --> 47:39.720]  Картинки формировать на лету
[47:39.720 --> 47:41.720]  это очень плохая идея, да.
[47:49.720 --> 47:51.720]  Ну да.
[47:53.720 --> 47:55.720]  Ну, это плохая идея, правда.
[47:55.720 --> 47:57.720]  Гидрация.
[47:57.720 --> 47:59.720]  Может быть, скорее всего,
[47:59.720 --> 48:01.720]  они заранее все пригенерировали,
[48:01.720 --> 48:03.720]  тебе что-нибудь подставляли туда, что-нибудь такое, да.
[48:03.720 --> 48:05.720]  И да, короче, смотрите,
[48:05.720 --> 48:07.720]  в чем фишка, да.
[48:15.720 --> 48:17.720]  Есть разные типы хранения
[48:17.720 --> 48:19.720]  картинок.
[48:19.720 --> 48:21.720]  Формат картинки.
[48:21.720 --> 48:23.720]  Есть картинки, которые загружаются сверху,
[48:23.720 --> 48:25.720]  вверху, вниз. Есть картинки, которые
[48:25.720 --> 48:27.720]  загружаются,
[48:27.720 --> 48:29.720]  как называем, progressive PNG.
[48:29.720 --> 48:31.720]  Тебе загружается, например,
[48:31.720 --> 48:33.720]  сначала размытая картинка, потом
[48:33.720 --> 48:35.720]  она уточняется следующим слоем, потом
[48:35.720 --> 48:37.720]  еще уточняется и так далее.
[48:37.720 --> 48:39.720]  То есть это просто разные типы
[48:39.720 --> 48:41.720]  храни... не формат.
[48:41.720 --> 48:43.720]  То есть это специально
[48:43.720 --> 48:45.720]  с этим ничего не делает.
[48:45.720 --> 48:47.720]  Так сохранили, тебя бразер и грузит,
[48:47.720 --> 48:49.720]  и он принимает решение.
[48:49.720 --> 48:51.720]  Он тебе показывает ее сразу или ждет,
[48:51.720 --> 48:53.720]  загрузится или показывает построчно
[48:53.720 --> 48:55.720]  выводит и так далее.
[48:55.720 --> 48:57.720]  Так, короче,
[48:57.720 --> 48:59.720]  на что пытаюсь обратить ваше внимание.
[48:59.720 --> 49:01.720]  Ребят, там нужны разные ресурсы
[49:01.720 --> 49:03.720]  сервака для того, чтобы выдавать
[49:03.720 --> 49:05.720]  разные картинки.
[49:05.720 --> 49:07.720]  И мы можем подумать на тем,
[49:07.720 --> 49:09.720]  как мы можем это использовать.
[49:11.720 --> 49:13.720]  Как минимум, мы действительно
[49:13.720 --> 49:15.720]  можем
[49:15.720 --> 49:17.720]  положить
[49:17.720 --> 49:19.720]  вот эти данные пользователю
[49:19.720 --> 49:21.720]  поближе.
[49:21.720 --> 49:23.720]  Для них нам не нужно ничего вычислять.
[49:23.720 --> 49:25.720]  Как только запрос пришел,
[49:25.720 --> 49:27.720]  мы сразу взяли и отдали.
[49:29.720 --> 49:31.720]  То, к чему я вас веду,
[49:31.720 --> 49:33.720]  называется вообще просто
[49:33.720 --> 49:35.720]  основой основ.
[49:35.720 --> 49:37.720]  Называется трехзвеневая
[49:37.720 --> 49:39.720]  структура хранения,
[49:39.720 --> 49:41.720]  структура обработки.
[49:41.720 --> 49:43.720]  Трехзвеневые три звена.
[49:43.720 --> 49:45.720]  Какие три звена?
[49:49.720 --> 49:51.720]  Вот пришел запрос на сервак.
[49:51.720 --> 49:53.720]  Первое звено.
[49:55.720 --> 49:57.720]  Так называемый
[49:57.720 --> 49:59.720]  frontend.
[50:05.720 --> 50:07.720]  Первый веб-сервер,
[50:07.720 --> 50:09.720]  который получает запрос от пользователя.
[50:15.720 --> 50:17.720]  Что он делает?
[50:17.720 --> 50:19.720]  Он просто-напросто смотрит на запрос.
[50:19.720 --> 50:21.720]  Что это такое?
[50:25.720 --> 50:27.720]  Что это такое?
[50:27.720 --> 50:29.720]  Если это что-то легкое и не требующее вычислений,
[50:29.720 --> 50:31.720]  которое нужно просто взять с диска
[50:31.720 --> 50:33.720]  и отдать, он берет с диска и отдает.
[50:35.720 --> 50:37.720]  Так называемую статику.
[50:41.720 --> 50:43.720]  Основа основ.
[50:43.720 --> 50:45.720]  Любая система сейчас так строится.
[50:45.720 --> 50:47.720]  То есть пришел
[50:47.720 --> 50:49.720]  запрос,
[50:49.720 --> 50:51.720]  если это статика,
[50:51.720 --> 50:53.720]  если это картинка,
[50:53.720 --> 50:55.720]  что-то, что не требует никаких вычислений,
[50:55.720 --> 50:57.720]  считать с диска
[50:57.720 --> 50:59.720]  или взять из памяти и отдать.
[50:59.720 --> 51:01.720]  И забыть, закрыть вопрос.
[51:01.720 --> 51:03.720]  Если это что-то
[51:03.720 --> 51:05.720]  требующее вычислений.
[51:05.720 --> 51:07.720]  Идем дальше.
[51:07.720 --> 51:09.720]  Но только в этом случае.
[51:09.720 --> 51:11.720]  Идем в backend.
[51:15.720 --> 51:17.720]  Либо backend,
[51:17.720 --> 51:19.720]  либо backend.
[51:23.720 --> 51:25.720]  И вот здесь уже ваша программа,
[51:25.720 --> 51:27.720]  которая занимается вычислениями.
[51:27.720 --> 51:29.720]  Которая строит,
[51:29.720 --> 51:31.720]  достает из базы данных нужные новости,
[51:31.720 --> 51:33.720]  последние 10 штук.
[51:33.720 --> 51:35.720]  Как-то их там, я не знаю, компонует.
[51:35.720 --> 51:37.720]  Ставит заголовочек в одно место,
[51:37.720 --> 51:39.720]  вырезает анонсы,
[51:39.720 --> 51:41.720]  ставит в другое место.
[51:41.720 --> 51:43.720]  И отдает пользователю готовость
[51:43.720 --> 51:45.720]  на HTML, HTML.
[51:45.720 --> 51:47.720]  Вот здесь, собственно говоря, вычисления.
[51:47.720 --> 51:49.720]  Происходит.
[51:49.720 --> 51:51.720]  И третья звено, какое?
[51:51.720 --> 51:53.720]  Хранение, да.
[51:53.720 --> 51:55.720]  Да, либо просто какая-то
[51:55.720 --> 51:57.720]  система хранения.
[52:01.720 --> 52:03.720]  Ваша программа-то не знает?
[52:03.720 --> 52:05.720]  Ничего.
[52:05.720 --> 52:07.720]  Она умеет обрабатывать.
[52:07.720 --> 52:09.720]  Она делает запрос базы данных.
[52:09.720 --> 52:11.720]  Дай последние 10 новостей.
[52:11.720 --> 52:13.720]  Окей.
[52:13.720 --> 52:15.720]  Дай последние...
[52:15.720 --> 52:17.720]  Не знаю, дай для вот этой новости,
[52:17.720 --> 52:19.720]  она главная.
[52:19.720 --> 52:21.720]  Вестит.
[52:21.720 --> 52:23.720]  Я выведу у нее анонс ни из одной страны,
[52:23.720 --> 52:25.720]  ни из одного абзаца, а из пяти.
[52:25.720 --> 52:27.720]  Окей.
[52:27.720 --> 52:29.720]  Наверное, количество запросов
[52:29.720 --> 52:31.720]  поддали, сформировала,
[52:31.720 --> 52:33.720]  вернула и так далее.
[52:35.720 --> 52:37.720]  Ну да.
[52:37.720 --> 52:39.720]  Нет.
[52:41.720 --> 52:43.720]  Модель view-контроллер
[52:43.720 --> 52:45.720]  это организация твоего программного кода
[52:45.720 --> 52:47.720]  внутри. То есть я, грубо говоря,
[52:47.720 --> 52:49.720]  вот здесь, вот внутри
[52:49.720 --> 52:51.720]  твоей программки, модель
[52:51.720 --> 52:53.720]  view-контроллер там.
[52:55.720 --> 52:57.720]  То есть как ты это внутри
[52:57.720 --> 52:59.720]  организуешь, нас сейчас особо
[52:59.720 --> 53:01.720]  не волнует. Мы рассчитываем, естественно,
[53:01.720 --> 53:03.720]  что ты хороший программист
[53:03.720 --> 53:05.720]  и нас здесь сидишь.
[53:05.720 --> 53:07.720]  Так. Пронтент,
[53:07.720 --> 53:09.720]  бэкент, субэдэй.
[53:09.720 --> 53:11.720]  Субэдэй или хранение, что-то такое.
[53:11.720 --> 53:13.720]  Фактически всегда
[53:13.720 --> 53:15.720]  вот эти три звена есть.
[53:15.720 --> 53:17.720]  Они могут по-разному называться.
[53:17.720 --> 53:19.720]  Фронтентом иногда еще называют то,
[53:19.720 --> 53:21.720]  что происходит внутри браузера, ну в смысле
[53:21.720 --> 53:23.720]  в браузере и так далее.
[53:23.720 --> 53:25.720]  В банковских системах почему-то
[53:25.720 --> 53:27.720]  фронтом называют на самом деле
[53:27.720 --> 53:29.720]  кусочек бэкэнда.
[53:29.720 --> 53:31.720]  Да, то есть как бы
[53:31.720 --> 53:33.720]  в NSPK я вчера был,
[53:33.720 --> 53:35.720]  который платежные системы делают,
[53:35.720 --> 53:37.720]  у них фронтент это вот кусочек вот этого.
[53:37.720 --> 53:39.720]  Ну не суть.
[53:39.720 --> 53:41.720]  Исторически сказалось так, что фронтент
[53:41.720 --> 53:43.720]  это маленький быстрый сервер.
[53:43.720 --> 53:45.720]  Ну, например,
[53:45.720 --> 53:47.720]  вот, собственно говоря, то, что сделал Игорь Цисоев,
[53:47.720 --> 53:49.720]  он здесь используется Nginx.
[53:49.720 --> 53:51.720]  Обычно. Чаще всего в России
[53:51.720 --> 53:53.720]  почти всегда.
[53:53.720 --> 53:55.720]  Знаете, в чем, например, проблема?
[53:55.720 --> 53:57.720]  В смысле, в чем выгода?
[53:57.720 --> 53:59.720]  Вот, например,
[53:59.720 --> 54:01.720]  смотрите, здесь, ну, например,
[54:01.720 --> 54:03.720]  мы с вами старожилы, мы с вами пишем
[54:03.720 --> 54:05.720]  на PHP.
[54:05.720 --> 54:07.720]  И у нас вот здесь, в этом случае,
[54:07.720 --> 54:09.720]  на каждый экземпляр PHP
[54:09.720 --> 54:11.720]  вашей программы.
[54:11.720 --> 54:13.720]  Ну, как вы думаете, сколько нужно памяти?
[54:13.720 --> 54:15.720]  Ну, много, на самом деле.
[54:15.720 --> 54:17.720]  Ну, не знаю, 100 мегабайт.
[54:19.720 --> 54:21.720]  Да на милую душу.
[54:21.720 --> 54:23.720]  PHP, интерпретатор,
[54:23.720 --> 54:25.720]  они, дай бог, там Java.
[54:25.720 --> 54:27.720]  А если Java, то там
[54:27.720 --> 54:29.720]  и того больше.
[54:29.720 --> 54:31.720]  На каждый экземпляр,
[54:31.720 --> 54:33.720]  на каждую вашу программу.
[54:33.720 --> 54:35.720]  А здесь сколько?
[54:35.720 --> 54:37.720]  То есть на каждый запрос
[54:37.720 --> 54:39.720]  операционная система
[54:39.720 --> 54:41.720]  должна алоцировать вот такой вот,
[54:41.720 --> 54:43.720]  я не знаю, кусочек, выделить.
[54:43.720 --> 54:45.720]  И если у вас 60
[54:45.720 --> 54:47.720]  гигабайт памяти,
[54:47.720 --> 54:49.720]  значит, что
[54:49.720 --> 54:51.720]  максимум параллельных запросов,
[54:51.720 --> 54:53.720]  которые вы можете выполнить.
[54:53.720 --> 54:55.720]  Сколько?
[54:55.720 --> 54:57.720]  600.
[54:57.720 --> 54:59.720]  А больше нельзя.
[54:59.720 --> 55:01.720]  Сервак больше не потянет.
[55:01.720 --> 55:03.720]  Вот эти, вот здесь.
[55:03.720 --> 55:05.720]  Сколько NGINX тратит на обработку
[55:05.720 --> 55:07.720]  одного запроса памяти?
[55:09.720 --> 55:11.720]  Ну, типа того.
[55:11.720 --> 55:13.720]  1 килобайт.
[55:13.720 --> 55:15.720]  Потому что запросы другие.
[55:15.720 --> 55:17.720]  Ну, не один, на самом деле, там 2-3 или что-то такое.
[55:17.720 --> 55:19.720]  Ну, не суть.
[55:19.720 --> 55:21.720]  Гораздо меньше.
[55:23.720 --> 55:25.720]  Ничего считать не надо.
[55:25.720 --> 55:27.720]  Но нам это нужно.
[55:27.720 --> 55:29.720]  Потому что, вот смотрите, да,
[55:29.720 --> 55:31.720]  у нас на один запрос
[55:31.720 --> 55:33.720]  такой, даже на нашем новостном сайте,
[55:33.720 --> 55:35.720]  приходит 30 запросов вот таких.
[55:37.720 --> 55:39.720]  У нас здесь именно такое отношение.
[55:39.720 --> 55:41.720]  То есть, просто введя вот такое
[55:41.720 --> 55:43.720]  разделение, мы с вами
[55:43.720 --> 55:45.720]  30 раз увеличили производительность.
[55:47.720 --> 55:49.720]  Я когда
[55:49.720 --> 55:51.720]  занимался консультированием
[55:51.720 --> 55:53.720]  за деньги
[55:53.720 --> 55:55.720]  по выстраиванию высоких нагрузок,
[55:55.720 --> 55:57.720]  я на вот этом вот паттерне
[55:57.720 --> 55:59.720]  получил большую часть денег.
[55:59.720 --> 56:01.720]  Ты приходишь в компанию, там ничего нет.
[56:01.720 --> 56:03.720]  Ты смотришь, скорее всего, у них нету
[56:03.720 --> 56:05.720]  разделения на фронт-энд, бэк-энд и
[56:05.720 --> 56:07.720]  на фронт-энд и бэк-энд.
[56:07.720 --> 56:09.720]  Говоришь, встать и ребята NGINX,
[56:09.720 --> 56:11.720]  вау, ставят,
[56:11.720 --> 56:13.720]  можно уходить. Все, дальше можно не работать.
[56:13.720 --> 56:15.720]  Деньги взял и ушел.
[56:27.720 --> 56:29.720]  Нет.
[56:31.720 --> 56:33.720]  Не совсем так, смотри.
[56:33.720 --> 56:35.720]  Прошел запрос от пользователя.
[56:37.720 --> 56:39.720]  Пронтент его принял.
[56:39.720 --> 56:41.720]  Расшифровал.
[56:41.720 --> 56:43.720]  Да, есть некий оверхэп.
[56:43.720 --> 56:45.720]  Он его расшифровал, смотрит внутрь запроса
[56:45.720 --> 56:47.720]  и по некоторым правилам, по которым он настроен,
[56:47.720 --> 56:49.720]  пытается понять, что это за запрос.
[56:51.720 --> 56:53.720]  Если это картинка, он отрабатывает,
[56:53.720 --> 56:55.720]  сразу выдает. Он понял, что это
[56:55.720 --> 56:57.720]  не картинка.
[56:57.720 --> 56:59.720]  Он вот это соединение не закрывает.
[56:59.720 --> 57:01.720]  Он открывает сам соединение
[57:01.720 --> 57:03.720]  к следующему серваку,
[57:03.720 --> 57:05.720]  к бэк-энду.
[57:05.720 --> 57:07.720]  Для него это так называемый
[57:07.720 --> 57:09.720]  upstream.
[57:11.720 --> 57:13.720]  Выше стоящий.
[57:13.720 --> 57:15.720]  Открывает к нему соединение
[57:15.720 --> 57:17.720]  и пересылает ему
[57:17.720 --> 57:19.720]  запрос пользователя исходного.
[57:21.720 --> 57:23.720]  То есть он никому, он пользователя
[57:23.720 --> 57:25.720]  не перебрасывает. Для пользователя
[57:25.720 --> 57:27.720]  все прозрачно. Пользователь соединился с фронтендом.
[57:27.720 --> 57:29.720]  Это важно. Мы сейчас с вами еще подумаем
[57:29.720 --> 57:31.720]  для чего.
[57:31.720 --> 57:33.720]  Пользователь соединился с фронтендом
[57:33.720 --> 57:35.720]  и он не знает про бэк-энду.
[57:35.720 --> 57:37.720]  Это в том числе еще для безопасности.
[57:37.720 --> 57:39.720]  Он не знает про базу данных.
[57:39.720 --> 57:41.720]  Естественно, не дай бог.
[57:41.720 --> 57:43.720]  База данных нельзя вообще снаружи подключить
[57:43.720 --> 57:45.720]  отсюда, из внешнего контра.
[57:45.720 --> 57:47.720]  Он получил ответ.
[57:47.720 --> 57:49.720]  Бэк-энд вычислил.
[57:49.720 --> 57:51.720]  Он отдает ответ фронтенду.
[57:51.720 --> 57:53.720]  И этот сервак отдает
[57:53.720 --> 57:55.720]  уже пользу.
[57:55.720 --> 57:57.720]  Грубо говоря, запрос пользователя
[57:57.720 --> 57:59.720]  один единственный
[57:59.720 --> 58:01.720]  проходит
[58:01.720 --> 58:03.720]  через несколько серверов.
[58:03.720 --> 58:05.720]  В данном случае два.
[58:05.720 --> 58:07.720]  Ответил на этот вопрос?
[58:07.720 --> 58:09.720]  Обычно почти всегда
[58:09.720 --> 58:11.720]  картина гораздо больше
[58:11.720 --> 58:13.720]  чем всего остального.
[58:13.720 --> 58:15.720]  Почти всегда
[58:15.720 --> 58:17.720]  фронтенд отбивает запрос
[58:17.720 --> 58:19.720]  и забывает.
[58:21.720 --> 58:23.720]  Едем дальше.
[58:23.720 --> 58:25.720]  А для чего еще нам пригодится фронтенд?
[58:25.720 --> 58:27.720]  Вот отличная штука.
[58:27.720 --> 58:29.720]  Мы поставили, заработали денег
[58:31.720 --> 58:33.720]  увеличивая производительность
[58:33.720 --> 58:35.720]  системы в развитии.
[58:35.720 --> 58:37.720]  А для чего еще?
[58:41.720 --> 58:43.720]  Чего делать?
[58:43.720 --> 58:45.720]  Почтается на фронтеде
[58:45.720 --> 58:47.720]  и бэк-энд занимает фотографию.
[58:47.720 --> 58:49.720]  Установить скуму.
[58:49.720 --> 58:51.720]  Окей, хорошо.
[58:51.720 --> 58:53.720]  Всего
[58:53.720 --> 58:55.720]  шифромания.
[58:55.720 --> 58:57.720]  Для чего нам еще нужен фронт?
[58:59.720 --> 59:01.720]  Да.
[59:01.720 --> 59:03.720]  Дальше.
[59:07.720 --> 59:09.720]  Как именно?
[59:09.720 --> 59:11.720]  Понятно, он все принимает
[59:11.720 --> 59:13.720]  фронтенд.
[59:15.720 --> 59:17.720]  Хороший ответ.
[59:17.720 --> 59:19.720]  Да.
[59:19.720 --> 59:21.720]  Дос-атаки безопасность.
[59:21.720 --> 59:23.720]  Почему?
[59:27.720 --> 59:29.720]  Как конкретно
[59:29.720 --> 59:31.720]  дос-атаку можно организовать?
[59:31.720 --> 59:33.720]  В смысле,
[59:33.720 --> 59:35.720]  как конкретно можно организовать?
[59:35.720 --> 59:37.720]  Что здесь можно поломать?
[59:37.720 --> 59:39.720]  Ну я вам рассказывал
[59:39.720 --> 59:41.720]  это в прошлый раз.
[59:41.720 --> 59:43.720]  Если у нас на каждый из
[59:43.720 --> 59:45.720]  вот этих вот PHP
[59:45.720 --> 59:47.720]  требуется 100 мегабайт,
[59:47.720 --> 59:49.720]  у нас, не знаю, 6 гигабайт
[59:49.720 --> 59:51.720]  оперативы, значит
[59:51.720 --> 59:53.720]  всего 660
[59:53.720 --> 59:55.720]  процессов.
[59:55.720 --> 59:57.720]  Мы открываем соединение с каждым.
[59:57.720 --> 59:59.720]  И ждем.
[59:59.720 --> 01:00:01.720]  Ничего не отправляем
[01:00:01.720 --> 01:00:03.720]  в это соединение.
[01:00:03.720 --> 01:00:05.720]  У нас эти
[01:00:05.720 --> 01:00:07.720]  60 процессов,
[01:00:07.720 --> 01:00:09.720]  60 соединений
[01:00:09.720 --> 01:00:11.720]  можно с ноутбука открыть.
[01:00:11.720 --> 01:00:13.720]  То есть можно положить любой сайт.
[01:00:13.720 --> 01:00:15.720]  Но не тут-то было, если
[01:00:15.720 --> 01:00:17.720]  перед Backend PHP
[01:00:17.720 --> 01:00:19.720]  там стоит Nginx.
[01:00:19.720 --> 01:00:21.720]  Потому что здесь нужно открыть уже не 60 соединений,
[01:00:21.720 --> 01:00:23.720]  я не знаю,
[01:00:23.720 --> 01:00:25.720]  600 тысяч соединений.
[01:00:25.720 --> 01:00:27.720]  Ну пойди попробуй открыть с ноутбука
[01:00:27.720 --> 01:00:29.720]  600 тысяч соединений.
[01:00:29.720 --> 01:00:31.720]  То есть
[01:00:31.720 --> 01:00:33.720]  простейшая, элементарнейшая
[01:00:33.720 --> 01:00:35.720]  защита от DOS.
[01:00:35.720 --> 01:00:37.720]  Запрос приходит сюда
[01:00:37.720 --> 01:00:39.720]  и Frontend не начинает
[01:00:39.720 --> 01:00:41.720]  с ним ничего делать, пока он не пришел
[01:00:41.720 --> 01:00:43.720]  полностью.
[01:00:43.720 --> 01:00:45.720]  И только когда он пришел полностью,
[01:00:45.720 --> 01:00:47.720]  мы достоверили, что запрос пришел, он отправляет его
[01:00:47.720 --> 01:00:49.720]  к Backend, ждет ответа
[01:00:49.720 --> 01:00:51.720]  от Backend, все это у себя
[01:00:51.720 --> 01:00:53.720]  буферизует и после этого отдает.
[01:00:55.720 --> 01:00:57.720]  То есть самая простая защита
[01:00:57.720 --> 01:00:59.720]  от DOS.
[01:00:59.720 --> 01:01:01.720]  А если
[01:01:01.720 --> 01:01:03.720]  это злонамеренные?
[01:01:03.720 --> 01:01:05.720]  А если не злонамеренные?
[01:01:09.720 --> 01:01:11.720]  Вот смотрите, мы точно знаем, что у нас
[01:01:11.720 --> 01:01:13.720]  сервер DOSить не будут.
[01:01:13.720 --> 01:01:15.720]  И у нас нету картинок
[01:01:15.720 --> 01:01:17.720]  и нету статики. Нам нужен Frontend
[01:01:17.720 --> 01:01:19.720]  или нет? Если нужен,
[01:01:19.720 --> 01:01:21.720]  для чего?
[01:01:21.720 --> 01:01:29.720]  Пользователь может
[01:01:29.720 --> 01:01:31.720]  сидеть на мобильном телефоне.
[01:01:35.720 --> 01:01:37.720]  Что это означает?
[01:01:37.720 --> 01:01:39.720]  Это значит, что он будет нормально работать
[01:01:39.720 --> 01:01:41.720]  и скачивать данные, которые ответил
[01:01:41.720 --> 01:01:43.720]  ему PHP, но в час
[01:01:43.720 --> 01:01:45.720]  по чайной ложке.
[01:01:45.720 --> 01:01:47.720]  Вот я сижу на
[01:01:47.720 --> 01:01:49.720]  GPS, где-нибудь на рыбалке.
[01:01:49.720 --> 01:01:51.720]  И качается
[01:01:51.720 --> 01:01:53.720]  просто медленно, 1 килобайт в секунду.
[01:01:53.720 --> 01:01:55.720]  И вот у меня страничка на 100 килобайт.
[01:01:55.720 --> 01:01:57.720]  100 секунд я буду качать.
[01:01:59.720 --> 01:02:01.720]  Поэтому тоже в том числе
[01:02:01.720 --> 01:02:03.720]  ставят Frontend.
[01:02:03.720 --> 01:02:05.720]  Он полностью получил ответ
[01:02:05.720 --> 01:02:07.720]  от Backend,
[01:02:07.720 --> 01:02:09.720]  от PHP на эти 100 килобайт, сохранил их
[01:02:09.720 --> 01:02:11.720]  где-то себе сюда, на жесткий диск
[01:02:11.720 --> 01:02:13.720]  и потихонечку пользователя
[01:02:13.720 --> 01:02:15.720]  отдает. Backend он уже освободил.
[01:02:15.720 --> 01:02:17.720]  Вот этот конкретный экземпляр
[01:02:17.720 --> 01:02:19.720]  Backend он освободил.
[01:02:19.720 --> 01:02:21.720]  Понимаете, да?
[01:02:21.720 --> 01:02:23.720]  Понимаете?
[01:02:23.720 --> 01:02:25.720]  Точно понимаете? Все понимают?
[01:02:25.720 --> 01:02:27.720]  Галерку понимают? Окей.
[01:02:27.720 --> 01:02:29.720]  Медленные запросы.
[01:02:29.720 --> 01:02:31.720]  То есть незаланамеренные.
[01:02:31.720 --> 01:02:33.720]  Просто когда медленные клиенты.
[01:02:33.720 --> 01:02:35.720]  Клиенты.
[01:02:35.720 --> 01:02:37.720]  Когда клиент медленно
[01:02:37.720 --> 01:02:39.720]  качит или медленно закачит.
[01:02:39.720 --> 01:02:41.720]  Или хуже того.
[01:02:41.720 --> 01:02:43.720]  Большие запросы.
[01:02:43.720 --> 01:02:45.720]  Я на YouTube выкладываю
[01:02:45.720 --> 01:02:47.720]  3,2 гигабайта.
[01:02:47.720 --> 01:02:49.720]  Час будет закачиваться.
[01:02:49.720 --> 01:02:51.720]  Если мы все это время
[01:02:51.720 --> 01:02:53.720]  будем держать
[01:02:53.720 --> 01:02:55.720]  100 мегабайтный экземпляр
[01:02:55.720 --> 01:02:57.720]  Backend, ну дороговато.
[01:02:57.720 --> 01:02:59.720]  Нет, мы держим 1 килобайт
[01:02:59.720 --> 01:03:01.720]  Frontend.
[01:03:01.720 --> 01:03:03.720]  То есть Frontend буферизует
[01:03:03.720 --> 01:03:05.720]  общение с Backend как в одну сторону,
[01:03:05.720 --> 01:03:07.720]  так и в другую.
[01:03:07.720 --> 01:03:09.720]  Он полностью ждет, пока весь запрос
[01:03:09.720 --> 01:03:11.720]  от пользователя загрузится.
[01:03:11.720 --> 01:03:13.720]  Как только и только
[01:03:13.720 --> 01:03:15.720]  он загрузился, он
[01:03:15.720 --> 01:03:17.720]  передает его Backend.
[01:03:17.720 --> 01:03:19.720]  А здесь уже все это происходит быстро.
[01:03:19.720 --> 01:03:21.720]  Они рядом.
[01:03:21.720 --> 01:03:23.720]  Или они вообще на одном серваке.
[01:03:23.720 --> 01:03:25.720]  Расположены. То есть медленные запросы
[01:03:25.720 --> 01:03:27.720]  там вообще буферизация
[01:03:27.720 --> 01:03:29.720]  всего.
[01:03:29.720 --> 01:03:31.720]  Еще.
[01:03:31.720 --> 01:03:33.720]  Для чего мы еще можем много использовать?
[01:03:33.720 --> 01:03:35.720]  Ну, смотри.
[01:03:35.720 --> 01:03:37.720]  Как бы
[01:03:37.720 --> 01:03:39.720]  и да, и нет.
[01:03:39.720 --> 01:03:41.720]  Потому что мы потом дальше
[01:03:41.720 --> 01:03:43.720]  с вами пойдем. Про масштабирование
[01:03:43.720 --> 01:03:45.720]  будем говорить. И каждый из этих
[01:03:45.720 --> 01:03:47.720]  звеньев масштабируется отдельно.
[01:03:47.720 --> 01:03:49.720]  Frontend по одним способам,
[01:03:49.720 --> 01:03:51.720]  это другим, это третьим.
[01:03:51.720 --> 01:03:53.720]  Скорее всего, в правильно
[01:03:53.720 --> 01:03:55.720]  организованной системе
[01:03:55.720 --> 01:03:57.720]  мы будем говорить.
[01:03:57.720 --> 01:03:59.720]  И каждый из этих звеньев
[01:03:59.720 --> 01:04:01.720]  масштабируется отдельно.
[01:04:01.720 --> 01:04:03.720]  Скорее всего, в правильно организованной системе
[01:04:03.720 --> 01:04:05.720]  у тебя
[01:04:05.720 --> 01:04:07.720]  а YouTube, скорее всего, в правильно организованной
[01:04:07.720 --> 01:04:09.720]  системе у тебя будут разные Frontend
[01:04:09.720 --> 01:04:11.720]  для того
[01:04:11.720 --> 01:04:13.720]  для этой ситуации, когда ты смотришь
[01:04:13.720 --> 01:04:15.720]  видосики и когда
[01:04:15.720 --> 01:04:17.720]  ты закачиваешь их.
[01:04:17.720 --> 01:04:19.720]  Но вообще, по большому счету, да.
[01:04:19.720 --> 01:04:21.720]  То есть в хорошо
[01:04:21.720 --> 01:04:23.720]  организованной системе
[01:04:23.720 --> 01:04:25.720]  любой запрос пользователя
[01:04:25.720 --> 01:04:27.720]  сначала проходит через
[01:04:27.720 --> 01:04:29.720]  какое-то легковесное
[01:04:29.720 --> 01:04:31.720]  звено.
[01:04:31.720 --> 01:04:33.720]  Через Frontend.
[01:04:55.720 --> 01:04:57.720]  А чего это зависит?
[01:04:59.720 --> 01:05:01.720]  Ну да,
[01:05:01.720 --> 01:05:03.720]  от функциональных требований.
[01:05:05.720 --> 01:05:07.720]  Вот иногда менеджер Google
[01:05:07.720 --> 01:05:09.720]  эффективный менеджер
[01:05:09.720 --> 01:05:11.720]  в Google
[01:05:11.720 --> 01:05:13.720]  сказал своему программисту
[01:05:13.720 --> 01:05:15.720]  или архитектору, ну слушай,
[01:05:15.720 --> 01:05:17.720]  ты говоришь, что все закачалось
[01:05:17.720 --> 01:05:19.720]  только тогда, когда все закачалось.
[01:05:19.720 --> 01:05:21.720]  А например
[01:05:21.720 --> 01:05:23.720]  эффективный менеджер в YouTube
[01:05:23.720 --> 01:05:25.720]  сказал не так.
[01:05:25.720 --> 01:05:27.720]  Он сказал, что ты сейчас ответишь
[01:05:27.720 --> 01:05:29.720]  пользователю, что мы передали
[01:05:29.720 --> 01:05:31.720]  информацию, и она обрабатывается.
[01:05:31.720 --> 01:05:33.720]  А когда
[01:05:33.720 --> 01:05:35.720]  она обработается, мы тебе
[01:05:35.720 --> 01:05:37.720]  отдельно напишем.
[01:05:37.720 --> 01:05:39.720]  Она когда заканчиваешь видео, видосик в YouTube
[01:05:39.720 --> 01:05:41.720]  он тебе не пишет, он тебе пишет, закачала.
[01:05:41.720 --> 01:05:43.720]  Она не пишет, обработала.
[01:05:43.720 --> 01:05:45.720]  И через какой-то
[01:05:45.720 --> 01:05:47.720]  через пять минут она может тебе выдать
[01:05:47.720 --> 01:05:49.720]  сорян,
[01:05:49.720 --> 01:05:51.720]  не смогла обработать.
[01:05:51.720 --> 01:05:53.720]  Закачала, но что-то ты не то
[01:05:53.720 --> 01:05:55.720]  залил. Вот.
[01:05:55.720 --> 01:05:57.720]  Грубо говоря, если правильно,
[01:05:57.720 --> 01:05:59.720]  если отвечать на твой вопрос,
[01:05:59.720 --> 01:06:01.720]  то обычно, да,
[01:06:01.720 --> 01:06:03.720]  обычно вся вот эта
[01:06:03.720 --> 01:06:05.720]  цепочка успеет пробежать, но
[01:06:05.720 --> 01:06:07.720]  вот это все происходит очень быстро,
[01:06:07.720 --> 01:06:09.720]  потому что она, во-первых, рядом,
[01:06:09.720 --> 01:06:11.720]  во-вторых, над этим вот это все
[01:06:11.720 --> 01:06:13.720]  ты контролируешь, вот эти все взаимодействия.
[01:06:13.720 --> 01:06:15.720]  Вот здесь то, что происходит, ты не знаешь,
[01:06:15.720 --> 01:06:17.720]  что там происходит, не контролируешь. А вот это
[01:06:17.720 --> 01:06:19.720]  все у тебя рядышком стоит
[01:06:19.720 --> 01:06:21.720]  на одной машине или на разных машинах,
[01:06:21.720 --> 01:06:23.720]  ну рядом и так далее. То есть ты знаешь,
[01:06:23.720 --> 01:06:25.720]  как это работает.
[01:06:25.720 --> 01:06:27.720]  Но обычно, да, когда ты выдаешь
[01:06:27.720 --> 01:06:29.720]  любой запрос современной
[01:06:29.720 --> 01:06:31.720]  информационной системы, он успевает
[01:06:31.720 --> 01:06:33.720]  пройтись с десятки машин,
[01:06:33.720 --> 01:06:35.720]  десятки каких-то там, не знаю, путей,
[01:06:35.720 --> 01:06:37.720]  собраться из пяти различных вариантов
[01:06:37.720 --> 01:06:39.720]  и тебе вернуться.
[01:06:39.720 --> 01:06:41.720]  Ничего страшного в этом нет.
[01:06:53.720 --> 01:06:55.720]  У тебя вот здесь вот какое соединение?
[01:06:57.720 --> 01:06:59.720]  Какое?
[01:07:01.720 --> 01:07:03.720]  Вай-фай какой-нибудь, не знаю.
[01:07:03.720 --> 01:07:05.720]  Сидишь на 5 мегабит, окей?
[01:07:09.720 --> 01:07:11.720]  А здесь у тебя, не знаю,
[01:07:11.720 --> 01:07:13.720]  тысячи мегабит,
[01:07:13.720 --> 01:07:15.720]  один гигабит,
[01:07:15.720 --> 01:07:17.720]  один гигабит,
[01:07:17.720 --> 01:07:19.720]  один гигабит,
[01:07:19.720 --> 01:07:21.720]  один гигабит,
[01:07:21.720 --> 01:07:23.720]  один гигабит.
[01:07:23.720 --> 01:07:25.720]  То есть даже если у тебя это на разных серваках,
[01:07:25.720 --> 01:07:27.720]  то вот так.
[01:07:27.720 --> 01:07:29.720]  Вот собственно вся разница.
[01:07:29.720 --> 01:07:31.720]  И здесь у тебя
[01:07:33.720 --> 01:07:35.720]  помехи, солнце, я не знаю,
[01:07:35.720 --> 01:07:37.720]  чего угодно.
[01:07:37.720 --> 01:07:39.720]  А здесь у тебя ничего этого нет.
[01:07:39.720 --> 01:07:41.720]  Они рядом стоят, друг к другу
[01:07:41.720 --> 01:07:43.720]  воткнутый рядышком.
[01:07:43.720 --> 01:07:45.720]  Даже, как правило, так.
[01:07:45.720 --> 01:07:47.720]  То есть если хочешь прям очень быстро
[01:07:47.720 --> 01:07:49.720]  делаешь так.
[01:07:49.720 --> 01:07:51.720]  Или вообще, это если они
[01:07:51.720 --> 01:07:53.720]  на разных серверах.
[01:07:53.720 --> 01:07:55.720]  А если они на одном.
[01:07:55.720 --> 01:07:57.720]  Для большинства проектов,
[01:07:57.720 --> 01:07:59.720]  еще важный момент,
[01:07:59.720 --> 01:08:01.720]  но это вы конечно столкнетесь,
[01:08:01.720 --> 01:08:03.720]  в большинстве проектов
[01:08:03.720 --> 01:08:05.720]  все, что мы с вами будем изучать,
[01:08:05.720 --> 01:08:07.720]  не потребуется никогда.
[01:08:07.720 --> 01:08:09.720]  В 99% проектов достаточно вот это вот
[01:08:09.720 --> 01:08:11.720]  внедрить, причем на одном серваке.
[01:08:11.720 --> 01:08:13.720]  И все.
[01:08:13.720 --> 01:08:15.720]  И вы 100 тысяч посетителей в сутки
[01:08:15.720 --> 01:08:17.720]  выдержите. Больше не надо.
[01:08:19.720 --> 01:08:21.720]  Большинство сейчас в современных CMS
[01:08:21.720 --> 01:08:23.720]  даже битрикс, по-моему, вот так вот сделан.
[01:08:27.720 --> 01:08:29.720]  Я к чему?
[01:08:29.720 --> 01:08:31.720]  Я к тому, что это скорее всего еще на одной машине работает.
[01:08:31.720 --> 01:08:33.720]  А если так, то здесь у тебя еще вот так вот.
[01:08:35.720 --> 01:08:37.720]  С памятью общаться.
[01:08:37.720 --> 01:08:39.720]  Без проблем.
[01:08:39.720 --> 01:08:41.720]  Для чего
[01:08:41.720 --> 01:08:43.720]  нам потребуется
[01:08:43.720 --> 01:08:45.720]  фронт?
[01:08:49.720 --> 01:08:51.720]  Маферизация, статический контент.
[01:08:55.720 --> 01:08:57.720]  Шифрование.
[01:08:57.720 --> 01:08:59.720]  Что еще можно сделать?
[01:09:03.720 --> 01:09:05.720]  Итак, у нас новостной сайт.
[01:09:05.720 --> 01:09:07.720]  Давайте думать.
[01:09:13.720 --> 01:09:15.720]  Ну вот уже начинается.
[01:09:15.720 --> 01:09:17.720]  То есть ты хочешь сделать
[01:09:17.720 --> 01:09:19.720]  нинжинэкс, а фронтэн тумным.
[01:09:19.720 --> 01:09:21.720]  Да, ну он
[01:09:21.720 --> 01:09:23.720]  тупой должен быть.
[01:09:27.720 --> 01:09:29.720]  Максимум, что он может сделать, это вывести красивую
[01:09:29.720 --> 01:09:31.720]  картинку,
[01:09:31.720 --> 01:09:33.720]  если у него бэкэнд не отвечает.
[01:09:37.720 --> 01:09:39.720]  Чего делать?
[01:09:39.720 --> 01:09:41.720]  Ну да.
[01:09:41.720 --> 01:09:43.720]  Хорошо.
[01:09:43.720 --> 01:09:45.720]  Обработка ошибок. То есть мы можем показывать красивую
[01:09:45.720 --> 01:09:47.720]  картинку.
[01:09:47.720 --> 01:09:49.720]  То есть вот
[01:09:49.720 --> 01:09:51.720]  кто знает, какие у нас программисты,
[01:09:51.720 --> 01:09:53.720]  может криво написали, ошибки
[01:09:53.720 --> 01:09:55.720]  выдает и так далее. То есть
[01:09:55.720 --> 01:09:57.720]  обработка ошибок.
[01:09:57.720 --> 01:09:59.720]  Но обработка в каком смысле?
[01:09:59.720 --> 01:10:01.720]  Обработка для пользователей. Даже не
[01:10:01.720 --> 01:10:03.720]  скорее не обработка, а открытие ошибок.
[01:10:03.720 --> 01:10:05.720]  того, что у нас там внутри.
[01:10:09.720 --> 01:10:11.720]  Если вы открываете на строке нжинэкса,
[01:10:11.720 --> 01:10:13.720]  у него там прям все черное по белому написано.
[01:10:13.720 --> 01:10:15.720]  Если выдается такая,
[01:10:15.720 --> 01:10:17.720]  то есть у него настройки очень простые.
[01:10:17.720 --> 01:10:19.720]  Во-первых, для того, чтобы понять статика
[01:10:19.720 --> 01:10:21.720]  это или не статика.
[01:10:21.720 --> 01:10:23.720]  То есть такого вида запроса
[01:10:23.720 --> 01:10:25.720]  это статика, отдавая из диска,
[01:10:25.720 --> 01:10:27.720]  такого вида запроса это
[01:10:27.720 --> 01:10:29.720]  динамика, передавая их на бэкэнд.
[01:10:29.720 --> 01:10:31.720]  Это первый класс
[01:10:31.720 --> 01:10:33.720]  настроек, а второй класс настроек,
[01:10:33.720 --> 01:10:35.720]  если бэкэнд ответил
[01:10:35.720 --> 01:10:37.720]  таким-то кодом ошибки,
[01:10:37.720 --> 01:10:39.720]  выведя вот эту
[01:10:39.720 --> 01:10:41.720]  красивую страничку.
[01:10:41.720 --> 01:10:43.720]  Так, обработка ошибок. Что еще мы можем
[01:10:43.720 --> 01:10:45.720]  на нее повесить?
[01:10:45.720 --> 01:10:47.720]  У нас есть
[01:10:47.720 --> 01:10:49.720]  легковесный быстрый сервер, который быстро
[01:10:49.720 --> 01:10:51.720]  обрабатывает
[01:10:51.720 --> 01:10:53.720]  большую часть запросов.
[01:10:53.720 --> 01:10:55.720]  Давайте представим новостной сайт.
[01:10:55.720 --> 01:10:57.720]  Вот я пришел,
[01:10:57.720 --> 01:10:59.720]  через секунду ты пришел.
[01:11:03.720 --> 01:11:05.720]  Что-нибудь вам возникает
[01:11:05.720 --> 01:11:07.720]  какие-то идеи?
[01:11:11.720 --> 01:11:13.720]  Да?
[01:11:13.720 --> 01:11:15.720]  Давайте так сделаем.
[01:11:15.720 --> 01:11:17.720]  Давайте на нее просто тупо
[01:11:17.720 --> 01:11:19.720]  какое-нибудь каширование повесим,
[01:11:19.720 --> 01:11:21.720]  простроим.
[01:11:25.720 --> 01:11:27.720]  Да.
[01:11:27.720 --> 01:11:29.720]  А где это мы уже не всегда.
[01:11:29.720 --> 01:11:31.720]  Для этого мы как раз и будем функционально
[01:11:31.720 --> 01:11:33.720]  требования спрашивать, что у нас
[01:11:33.720 --> 01:11:35.720]  там на страничке показывается.
[01:11:35.720 --> 01:11:37.720]  Ну, часто можно.
[01:11:37.720 --> 01:11:39.720]  Новостной сайт,
[01:11:39.720 --> 01:11:41.720]  но нет.
[01:11:41.720 --> 01:11:43.720]  Новостной сайт такой без авторизации.
[01:11:43.720 --> 01:11:45.720]  Даже в Яндексе,
[01:11:45.720 --> 01:11:47.720]  когда заходишь на него,
[01:11:47.720 --> 01:11:49.720]  у него там есть персонализация.
[01:11:49.720 --> 01:11:51.720]  Но в 80% случаев персонализации нет,
[01:11:51.720 --> 01:11:53.720]  что пользователь не залогинен.
[01:11:53.720 --> 01:11:55.720]  И почему бы нам до 80% случаев
[01:11:55.720 --> 01:11:57.720]  не закашировать эту гребаную главную страницу,
[01:11:57.720 --> 01:11:59.720]  которая так долго строится,
[01:11:59.720 --> 01:12:01.720]  которая так важна.
[01:12:01.720 --> 01:12:03.720]  Давайте мы закашируем на 5 секунд.
[01:12:05.720 --> 01:12:07.720]  Мы тем самым еще
[01:12:07.720 --> 01:12:09.720]  на 50% запросов к нам убьем.
[01:12:11.720 --> 01:12:13.720]  Еще в 5 раз, 10 раз повысим
[01:12:13.720 --> 01:12:15.720]  эффективность нашей работы.
[01:12:17.720 --> 01:12:19.720]  Вы понимаете, у нас первое занятие,
[01:12:19.720 --> 01:12:21.720]  мы час работаем, мы вам уже в 100 раз
[01:12:21.720 --> 01:12:23.720]  подняли посещаемость.
[01:12:23.720 --> 01:12:25.720]  Потенциально.
[01:12:25.720 --> 01:12:27.720]  Короче, каширование.
[01:12:27.720 --> 01:12:29.720]  Каширование запроса в бэкэнду.
[01:12:29.720 --> 01:12:31.720]  То есть бэкэнд вполне может
[01:12:31.720 --> 01:12:33.720]  говорить, слушай,
[01:12:33.720 --> 01:12:35.720]  этот запрос там, я не знаю, можно закашировать
[01:12:35.720 --> 01:12:37.720]  на 5 минут.
[01:12:37.720 --> 01:12:39.720]  Каширование.
[01:12:39.720 --> 01:12:41.720]  Фронтенды маленький свой локальный кэшик,
[01:12:41.720 --> 01:12:43.720]  либо в памяти, либо в памяти,
[01:12:43.720 --> 01:12:45.720]  либо на диске.
[01:12:45.720 --> 01:12:47.720]  Не важно, это все равно будет работать быстрее,
[01:12:47.720 --> 01:12:49.720]  чем повторное вычисление.
[01:12:49.720 --> 01:12:51.720]  Так, еще что-нибудь? Все?
[01:12:51.720 --> 01:12:53.720]  Хватит?
[01:13:01.720 --> 01:13:03.720]  Ну хватит.
[01:13:03.720 --> 01:13:05.720]  Хотя нет, есть еще один пункт.
[01:13:09.720 --> 01:13:11.720]  Здесь у нас один килобайт.
[01:13:11.720 --> 01:13:13.720]  Здесь у нас
[01:13:13.720 --> 01:13:15.720]  100 мегабайт.
[01:13:15.720 --> 01:13:17.720]  Короче, фронтенд
[01:13:19.720 --> 01:13:21.720]  очень часто используется
[01:13:21.720 --> 01:13:23.720]  для того, чтобы балансировать
[01:13:23.720 --> 01:13:25.720]  нагрузку к бэкэнду.
[01:13:33.720 --> 01:13:35.720]  Медленные запросы нет, не совсем.
[01:13:35.720 --> 01:13:37.720]  Что имеется в виду?
[01:13:37.720 --> 01:13:39.720]  Вот смотрите.
[01:13:39.720 --> 01:13:41.720]  Вот здесь у нас, допустим,
[01:13:41.720 --> 01:13:43.720]  может быть...
[01:13:43.720 --> 01:13:45.720]  Ну то есть очевидно,
[01:13:45.720 --> 01:13:47.720]  что нам для того, чтобы
[01:13:47.720 --> 01:13:49.720]  вычислить запрос, нужно гораздо больше
[01:13:49.720 --> 01:13:51.720]  ресурсов бэкэнда, чем ресурсов фронтенды.
[01:13:51.720 --> 01:13:53.720]  Вот этот фронтенд
[01:13:53.720 --> 01:13:55.720]  может потянуть, я не знаю,
[01:13:55.720 --> 01:13:57.720]  100 тысяч запросов
[01:13:57.720 --> 01:13:59.720]  в секунду.
[01:14:03.720 --> 01:14:05.720]  Ну допустим,
[01:14:05.720 --> 01:14:07.720]  100 тысяч запросов в секунду.
[01:14:07.720 --> 01:14:09.720]  И мы с вами смотрели, у нас в исходных данных
[01:14:09.720 --> 01:14:11.720]  одна тридцатая от этих запросов
[01:14:11.720 --> 01:14:13.720]  это запросы
[01:14:13.720 --> 01:14:15.720]  к динамике.
[01:14:15.720 --> 01:14:17.720]  И вот мы одну тридцатую
[01:14:17.720 --> 01:14:19.720]  считаем, это у нас
[01:14:19.720 --> 01:14:21.720]  100 на 30,
[01:14:21.720 --> 01:14:23.720]  у нас, например, 3000
[01:14:23.720 --> 01:14:25.720]  запросов в секунду,
[01:14:25.720 --> 01:14:27.720]  это запросы к динамике.
[01:14:27.720 --> 01:14:29.720]  Ну дальше, мы еще
[01:14:29.720 --> 01:14:31.720]  кширование сюда ввели,
[01:14:31.720 --> 01:14:33.720]  и у нас, я не знаю, еще
[01:14:33.720 --> 01:14:35.720]  в двадцать раз сократили эту цифру.
[01:14:35.720 --> 01:14:37.720]  У нас остается,
[01:14:39.720 --> 01:14:41.720]  давайте в тридцать раз мы сократим,
[01:14:41.720 --> 01:14:43.720]  у нас остается 100 рпс
[01:14:43.720 --> 01:14:45.720]  к динамике.
[01:14:47.720 --> 01:14:49.720]  100 запросов на вычисление
[01:14:49.720 --> 01:14:51.720]  в секунду.
[01:14:53.720 --> 01:14:55.720]  На одно вычисление
[01:14:55.720 --> 01:14:57.720]  допустим, тратится одна секунда,
[01:14:57.720 --> 01:14:59.720]  это очень много, ну допустим.
[01:14:59.720 --> 01:15:01.720]  И у нас 6 гигабайт памяти,
[01:15:03.720 --> 01:15:05.720]  которым мы можем выделить на бэкэнд.
[01:15:05.720 --> 01:15:07.720]  Вывод это означает, что у нас
[01:15:07.720 --> 01:15:09.720]  всего лишь 60 процессов,
[01:15:09.720 --> 01:15:11.720]  которые мы можем запустить.
[01:15:13.720 --> 01:15:15.720]  А 60 процессов, каждый из них вычисляет
[01:15:15.720 --> 01:15:17.720]  одну секунду, значит 60 рпс.
[01:15:17.720 --> 01:15:19.720]  Что нам делать?
[01:15:21.720 --> 01:15:23.720]  Мы ставим второй бэкэнд.
[01:15:25.720 --> 01:15:27.720]  Еще один бэкэнд.
[01:15:29.720 --> 01:15:31.720]  У нас уже потенциальная пропускная способность
[01:15:31.720 --> 01:15:33.720]  максимальная, 120.
[01:15:33.720 --> 01:15:35.720]  Так, конечно, немножко считать нельзя,
[01:15:35.720 --> 01:15:37.720]  это очень грубо.
[01:15:37.720 --> 01:15:39.720]  Ну, допустим, для наших
[01:15:39.720 --> 01:15:41.720]  бэкэнд сейчас сойдет.
[01:15:41.720 --> 01:15:43.720]  Как нам теперь сбалансировать?
[01:15:45.720 --> 01:15:47.720]  Очень просто.
[01:15:47.720 --> 01:15:49.720]  У нас фронтенд,
[01:15:49.720 --> 01:15:51.720]  мы прописываем фронтенд,
[01:15:51.720 --> 01:15:53.720]  что, дорогой мой, теперь у тебя два
[01:15:53.720 --> 01:15:55.720]  бэкэнда.
[01:15:55.720 --> 01:15:57.720]  Ты половину запросов вправляешь сюда,
[01:15:57.720 --> 01:15:59.720]  а половину запросов отправляешь сюда.
[01:16:01.720 --> 01:16:03.720]  Тупо пополам.
[01:16:05.720 --> 01:16:07.720]  Мы с вами еще потом обсудим,
[01:16:07.720 --> 01:16:09.720]  когда это возможно, когда это невозможно,
[01:16:09.720 --> 01:16:11.720]  в каких ситуациях так стоит делать,
[01:16:11.720 --> 01:16:13.720]  в каких ситуациях так не стоит сделать.
[01:16:13.720 --> 01:16:15.720]  Но в общей сложности называется
[01:16:15.720 --> 01:16:17.720]  балансировка.
[01:16:17.720 --> 01:16:19.720]  Фронтенд используется для балансировки
[01:16:19.720 --> 01:16:21.720]  запросов к бэкэнду.
[01:16:21.720 --> 01:16:23.720]  То, что дальше от бэкэнды, потом
[01:16:23.720 --> 01:16:25.720]  будут использованы для балансировки запросов
[01:16:25.720 --> 01:16:27.720]  к базе данных.
[01:16:27.720 --> 01:16:29.720]  То есть очень такая, ну,
[01:16:29.720 --> 01:16:31.720]  тревогитная цепочка.
[01:16:31.720 --> 01:16:33.720]  Балансировка.
[01:16:41.720 --> 01:16:43.720]  Мы с вами ничего еще особо не
[01:16:43.720 --> 01:16:45.720]  меняли.
[01:16:45.720 --> 01:16:47.720]  Мы программу не переписывали.
[01:16:47.720 --> 01:16:49.720]  Мы программу не переписывали.
[01:16:49.720 --> 01:16:51.720]  Программа точно докажет,
[01:16:51.720 --> 01:16:53.720]  как и раньше.
[01:16:53.720 --> 01:16:55.720]  Мы ее просто запустили
[01:16:55.720 --> 01:16:57.720]  под другим
[01:16:57.720 --> 01:16:59.720]  управлением. Мы поставили
[01:16:59.720 --> 01:17:01.720]  перед ними фронтенд. Все.
[01:17:03.720 --> 01:17:05.720]  Что еще?
[01:17:05.720 --> 01:17:07.720]  Задание к следующему разу.
[01:17:07.720 --> 01:17:09.720]  Прикиньте, что еще мы можем сделать с каким-то
[01:17:09.720 --> 01:17:11.720]  минимальными изменениями.
[01:17:13.720 --> 01:17:15.720]  Чтобы ничего особо не менять,
[01:17:15.720 --> 01:17:17.720]  десятки серваков не покупать,
[01:17:17.720 --> 01:17:19.720]  никакую логику
[01:17:19.720 --> 01:17:21.720]  внутри вот этой истории сильно не
[01:17:21.720 --> 01:17:23.720]  переписывать и так далее.
[01:17:23.720 --> 01:17:25.720]  Какие еще мы можем сделать подход?
[01:17:25.720 --> 01:17:27.720]  Как еще подойти к снаряду, чтобы увеличить
[01:17:27.720 --> 01:17:29.720]  нашу потенциальную
[01:17:29.720 --> 01:17:31.720]  производительность?
[01:17:45.720 --> 01:17:47.720]  Мы потратили на самом деле
[01:17:47.720 --> 01:17:49.720]  реально час времени.
[01:17:49.720 --> 01:17:51.720]  Мы скачали NGINX, скомпилировали
[01:17:51.720 --> 01:17:53.720]  его и прописали
[01:17:53.720 --> 01:17:55.720]  ему, что он должен половину запросов
[01:17:55.720 --> 01:17:57.720]  перехватить и все.
[01:17:57.720 --> 01:17:59.720]  Не половину, а 95% запросов перехватить.
[01:17:59.720 --> 01:18:01.720]  На строчный файл из 10
[01:18:01.720 --> 01:18:03.720]  строчек мы написали. Все.
[01:18:03.720 --> 01:18:05.720]  Реально все.
[01:18:05.720 --> 01:18:07.720]  Ну, как я сказал,
[01:18:07.720 --> 01:18:09.720]  мы не будем
[01:18:09.720 --> 01:18:11.720]  прописывать.
[01:18:11.720 --> 01:18:13.720]  Мы не будем прописывать.
[01:18:13.720 --> 01:18:15.720]  Ну, понятное дело,
[01:18:15.720 --> 01:18:17.720]  настроили, что теперь он обрабатывает
[01:18:17.720 --> 01:18:19.720]  80-й порт,
[01:18:19.720 --> 01:18:21.720]  входя 443-й,
[01:18:21.720 --> 01:18:23.720]  а потом уже передает
[01:18:23.720 --> 01:18:25.720]  бэкэнду, который на другом порту
[01:18:25.720 --> 01:18:27.720]  перевесили бэкэнд на другой порт.
[01:18:27.720 --> 01:18:29.720]  Но мы самого программирования вообще не трогали.
[01:18:29.720 --> 01:18:31.720]  Это работа системы администратора.
[01:18:31.720 --> 01:18:33.720]  Он как бы даже проверкался.
[01:18:33.720 --> 01:18:35.720]  Короче, ничего не произошло.
[01:18:35.720 --> 01:18:37.720]  Да, кажется, что мы
[01:18:37.720 --> 01:18:39.720]  ввели кучу новых абстракций
[01:18:39.720 --> 01:18:41.720]  и так далее, но реально нет.
[01:18:43.720 --> 01:18:45.720]  Вот в следующий раз,
[01:18:45.720 --> 01:18:47.720]  в следующую среду,
[01:18:47.720 --> 01:18:49.720]  давайте вот эти все идеи,
[01:18:49.720 --> 01:18:51.720]  что еще можно сделать
[01:18:51.720 --> 01:19:03.720]  такого простого, какие у нас еще
[01:19:03.720 --> 01:19:05.720]  архитектурные паттерны простые есть.
[01:19:05.720 --> 01:19:07.720]  Вот это основной, называется
[01:19:07.720 --> 01:19:09.720]  трехзвеневая структура.
[01:19:09.720 --> 01:19:11.720]  Все. На сегодня это все.
[01:19:11.720 --> 01:19:13.720]  Остальные в следующий раз. Готовимся.
[01:19:15.720 --> 01:19:17.720]  Все. Пока-пока.
