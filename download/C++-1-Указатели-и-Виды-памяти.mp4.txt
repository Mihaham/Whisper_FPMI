[00:00.000 --> 00:15.280]  ну пока включается проектор давайте вспомним на чем мы остановились значит последнее о чем я
[00:15.280 --> 00:27.800]  рассказывал это ошибки компиляции их классификация вот ну и в общем-то мы почти закончили введение
[00:27.800 --> 00:47.320]  я лишь а где так отчего больше маркеров нету что вот это да а эти плохо пишут но печально ну ладно
[00:47.320 --> 01:00.440]  отличный проектор заработал вот ошибки компиляции но мы обсудили что там бывают что ваша программа
[01:00.440 --> 01:08.320]  некорректно компилятору для компиляции вот но еще две вещи два важных понятия о которых надо
[01:08.320 --> 01:15.760]  сказать прежде чем начать что-то интересное изучать это рантайм-эрроры и так называемое
[01:15.760 --> 01:24.480]  убэ значит есть ошибки компиляции которые мы обсудили бывают рантайм-эрроры это для любителей
[01:24.480 --> 01:32.000]  значит для педантичности я скажу что я продолжаю параграф 1.7 рантайм-эрроры что такое рантайм-эрроры
[01:32.000 --> 01:41.440]  ну вы наверняка встречались в своей жизни с таковыми ну есть компайл тайм-эррор и рантайм-эррор
[01:41.440 --> 01:48.320]  что такое рантайм но это ошибка которая случилась уже в ходе выполнения когда файл скомпилировался
[01:48.320 --> 01:55.720]  исполняемая программа создалась но в ходе выполнения что-то пошло не так какие есть
[01:55.720 --> 02:04.760]  примеры рантайм-эрроров ну например деление на ноль да да ну в общем-то вы два главных
[02:04.760 --> 02:12.400]  примера и назвали а если точнее то как точно вот называется то что происходит если вы делите
[02:12.400 --> 02:25.600]  на ноль это называется floating point exception так называемая значит это в джаве кажется она
[02:25.600 --> 02:36.080]  так называется zero division exception но на самом деле в случае с плюсами происходит ошибка на уровне
[02:36.080 --> 02:43.480]  процессора ну потому что когда центральный процессор ваш делит целые числа и понимает
[02:43.480 --> 02:49.080]  что там операция деления на ноль то он возникает то вызывается такая так называемая исключительная
[02:49.080 --> 02:55.320]  ситуация там это все как-то через операционную систему с операционной системы как-то процессор
[02:55.320 --> 03:01.080]  взаимодействует в итоге ваша программа убивается а в консоль пишется floating point exception еще
[03:01.080 --> 03:09.480]  в скобочках может быть написано так называемая core dumped сейчас я вкратце скажу что это значит вот
[03:09.480 --> 03:20.800]  а если у вас происходит обращение по несуществующему индексу то это что ну это как повезет вы
[03:20.800 --> 03:27.120]  можете обратиться и получить просто рандомное число но если вам это если вам не повезет как
[03:27.120 --> 03:32.400]  раз вы получите рандомное число а если повезет вы получите runtime error почему так ну потому что
[03:32.400 --> 03:38.640]  потому что если вам не повезет то вы обратитесь по рандомному индексу этого не заметите программа
[03:38.640 --> 03:45.880]  продолжит дальше работать и проблема вылезет где-нибудь в неожиданном месте например у пользователей
[03:45.880 --> 03:53.920]  яндекс такси такси приедет через 20 лет а не через три минуты как это полагается вот вы
[03:53.920 --> 03:58.640]  продолжите работать будет просто баг в реальности какие-то подобные числа но это может привести к
[03:58.640 --> 04:11.560]  беде уж лучше бы упали вот это ошибка называется segmentation fault segmentation fault сейчас я как раз
[04:11.560 --> 04:21.680]  продемонстрирую оба этих случая вот у меня тут как раз подгрузился проекта давайте я вам
[04:21.680 --> 04:34.960]  продемонстрирую наверное свет надо выключить и сделать покрупней
[04:34.960 --> 04:47.960]  как это выглядит это если из консоли делать так что-то у меня какие-то примеры со вчерашнего
[04:47.960 --> 05:02.680]  дня остались ну вот просто к индексу которому которого не существует но обращение не к своей
[05:02.680 --> 05:11.320]  памяти что строго говоря любое вот ну давайте я покажу давайте назову этот файл le.cpp ну первый
[05:11.320 --> 05:24.560]  пример с утра я немножечко не в форме так значит ну давайте я скажу вот так просто и
[05:24.560 --> 05:37.360]  сделаю вот с клавиатуры а выведу без хитрости совершенно результат деления ну тут лишняя
[05:37.360 --> 05:50.400]  точка запятой но не страшно вот значит компилируем а запускаем ну давайте не знаю поделим 25 на 4
[05:50.400 --> 06:03.880]  получается 6 логично теперь давайте поделим 3 на 0 о 1 point exception core dumped это не еще раз
[06:03.880 --> 06:10.160]  я еще не говорил что это такое сейчас скажу вкратце но вообще я думаю что это скорее тема
[06:10.160 --> 06:17.200]  семинаров вот я думаю что федя вам как-то расскажет вот это ближе к концу семестр причем скорее
[06:17.200 --> 06:23.120]  будет вот ну floating point exception так называется ошибка которая происходит в процессоре значит
[06:23.120 --> 06:29.380]  ну и дальше там через операционную систему как-то он сообщает вам что случилось такое вот что
[06:29.380 --> 06:39.820]  такое core dumped это значит что система сделала dump состояние программы которое было на момент
[06:39.820 --> 06:46.020]  когда это произошло и в принципе можно дебаггером залезть и посмотреть это состояние увидеть там
[06:46.020 --> 06:52.780]  в какой именно строчки ну так прям не получится нужно с некоторыми флагами скомпилировать чтобы
[06:52.780 --> 06:57.940]  это было видно но вообще можно по этому файлу который там лежит специальной директории понять
[06:57.940 --> 07:03.180]  что именно произошло в ком месте вот зачастую это бывает полезно когда у вас такие ошибки
[07:03.180 --> 07:10.140]  происходят там на каких-нибудь серверах и после там суток работы например у вас чуть-чуть упало и
[07:10.140 --> 07:17.460]  вы хотите понять а что именно там упало и вы такие открываете этот файл и смотрите это на жаргоне
[07:17.460 --> 07:28.620]  называется корка от слова core вот core это типа состояние ну скажем так типа ядра не знаю почему
[07:28.620 --> 07:36.580]  использовать слово core вот но в общем оно задамплено и можно увидеть что там было вот давайте продемонстрирую
[07:36.580 --> 07:48.260]  вам сек фолд ну давайте заинклудим какой-нибудь вектор с массивом сработает но формально говоря я
[07:48.260 --> 07:55.380]  не рассказывал что такое массива поэтому лучше покажу на примере вектора вы что думаете у нас
[07:55.380 --> 08:05.380]  все очень продумано значит а вектор вот давайте я заведу вектор из пяти элементов и такой возьму
[08:05.380 --> 08:14.260]  и скажу ну ну вот если я скажу вывести мне в 10 то ничего плохого не будет будет просто
[08:14.260 --> 08:28.420]  рандомное число вот если я скажу в 10 присвоить единицу тоже на самом деле ничего плохого скорее
[08:29.020 --> 08:48.860]  если мы не слишком далеко заходим за границу это как правило не сек фолд нет кп ст у него 5 для
[08:48.860 --> 09:00.740]  знатоков на самом деле дело в том что но это вообще не относится к теме нашего курса но там
[09:00.740 --> 09:07.580]  история вот какая убивает нас же должна убить операционная система в конечном счете она нас
[09:07.580 --> 09:13.540]  убивает за то что мы обращаемся не к своей памяти но память выделяется странично операционная
[09:13.540 --> 09:19.940]  система не выделяет нам ровно 5 этих интов выделяет нам какую-то страницу в которой там сколько-то
[09:19.940 --> 09:27.100]  килобайт допустим и если мы остаемся в рамках этой страницы то формально мы совершаем нелегальную
[09:27.100 --> 09:31.260]  операцию но операционная система пока об этом не знает потому что мы находимся в пределах того
[09:31.260 --> 09:36.940]  куска которая нам выделила однократно для того чтобы мы им пользовались если мы выйдем далеко
[09:36.940 --> 09:45.300]  за его пределы вот если например 100 тысяч напишу то вероятно ну да даже если по отрицательному
[09:45.300 --> 09:53.900]  индексу обращусь вероятно еще все будет нормально потому что я недалеко вышел за пределы а нет вот
[09:53.900 --> 10:08.740]  теперь случилась проблема потому так вот сейчас произошло что-то интересное потому что
[10:08.740 --> 10:18.700]  да это не секвел то что-то другое так вот это и даже интересно это даже не знаю почему
[10:18.700 --> 10:32.660]  а все да да ты молодец действительно да да да да это правда это правда кто понял что он
[10:32.660 --> 10:41.700]  сейчас сказал ну хорошо да там да слева от самого массива хранится число которое ему задает
[10:41.700 --> 10:47.860]  размер массива а я его нагло переписал поэтому когда вектор стал уничтожаться он как будто бы
[10:47.860 --> 10:53.820]  стал освобождать не то количество памяти которая надо и из-за этого случилась другая ошибка вот
[10:53.820 --> 11:00.260]  double freo corruption вот но давайте все-таки продемонстрируем секвел то есть секвел то не
[11:00.260 --> 11:08.900]  случилось обращение по этому индексу это еще не ошибка вот но вот если я 100 тысяч сделаю можно
[11:08.900 --> 11:20.020]  кстати напоминаю писать вот так то вот это уже секвел и кстати возможно секвел даже вот это
[11:20.020 --> 11:27.380]  они только записи то есть возможно чтение да уже чтение по 100 тысячному индексу это уже секвел вот
[11:27.380 --> 11:33.860]  ошибка сегментирования вот ну мы заодно с вами увидели третью еще третий вид runtime
[11:34.860 --> 11:41.540]  значит это когда случается вызов функции abort которая означает аварийное завершение
[11:41.540 --> 11:45.900]  программы но аварийное завершение программы случилось вот из-за того что некорректно
[11:45.900 --> 11:51.940]  освобождение памяти там было вот но если вы не понимаете что там произошло с этим минус один
[11:51.940 --> 11:59.660]  это пока не важно значит это мы кстати это мы уже сегодня обсудим на самом-то деле вот потому
[11:59.660 --> 12:06.580]  что сегодня я опять у вас буду вечерней парой вот мы ускоренно двигаемся вперед вот но пока
[12:06.580 --> 12:17.620]  вот сек фолт и лакфинг поэт эксепшн а почему бы компилятору не отлавливать такое в компайл тайна
[12:17.620 --> 12:31.420]  вот значит ответ неправильный на самом деле это математически невозможно они просто долго
[12:31.420 --> 12:41.180]  значит ну невозможно просто да можно доказать теорему и вы докажете это во втором семестре
[12:41.240 --> 12:51.980]  на мот логике что вообще говоря невозможно написать программу которая по произвольной и другой
[12:51.980 --> 12:57.260]  программе отвечает на произвольный нетриثмальный вопрос то есть что значит нетрифмальный вопрос
[12:57.260 --> 13:04.460]  значит такой вопрос что ответом не всегда является да и не всегда является нет вот нельзя по данной
[13:04.460 --> 13:10.420]  программе определить вообще говоря происходит в ней деление на 0 или нет это алгоритмически
[13:10.420 --> 13:16.220]  нерешаемая задача. Можно только начать выполнять программу, и оно либо произойдет, либо нет, либо
[13:16.220 --> 13:23.780]  программа зависнет, и ответа мы так и не дождемся. Ну, короче, нельзя в compile-time просто предсказать,
[13:23.780 --> 13:30.420]  случится это или нет. И поэтому компилятор бы, конечно, и рад, может быть, какие-то вещи на
[13:30.420 --> 13:35.500]  этапе компиляции отследить. Поэтому, например, компилятор, если его, если компилировать там с
[13:35.500 --> 13:39.860]  максимальным количеством предупреждений, он про некоторые места вам скажет. Здесь, вероятно,
[13:39.860 --> 13:44.780]  будет вот такая-то плохая вещь. Но вообще говоря, компилятор, конечно же, не в состоянии все эти
[13:44.780 --> 13:50.540]  вещи отследить, поэтому полностью застраховаться от падений в runtime никак нельзя. Это просто
[13:50.540 --> 14:02.780]  невозможно математически. Ну ладно, с другой стороны, правда, можно сделать эти падения более
[14:02.780 --> 14:11.700]  мягкими, так скажем. Ну как, например, в питоне, то есть там, ну или в джаве. Там не доходит того,
[14:11.700 --> 14:17.980]  что вас прям убивает операционка, там происходит так называемое исключение на уровне языка,
[14:17.980 --> 14:25.260]  которое поймать можно. Вот, а в плюсах нельзя. Вот у вас есть напрямую обращение к памяти,
[14:25.860 --> 14:34.740]  и это означает, что вы не застрахованы. Вы никак не можете, допустим, обращать в 100 тысяч,
[14:34.740 --> 14:41.700]  вы не можете написать, условно говоря, try catch, который бы сделал вам, если обращение не по
[14:41.700 --> 14:46.860]  правильному индексу, то ошибка поймана, и вы дальше работаете. Вот, через обращение квадратными
[14:46.860 --> 14:50.720]  скобочками так не получится, потому что это прямое обращение к памяти, и вас дальше либо убивает
[14:50.720 --> 15:06.760]  операционка, либо нет. Вот, чего можно? Нет, есть, конечно, способы, безусловно,
[15:06.760 --> 15:14.640]  на этом все можно делать, но прямое обращение по индексу в плюсах, оно не так работает,
[15:14.640 --> 15:19.800]  как в некоторых других местах, например, в джаве. Вот, но про это мы еще попозже поговорим. Вот,
[15:19.840 --> 15:24.000]  а пока мы поговорим напоследок вот про что. Вот это есть, значит, райн-тайм-эрроры,
[15:24.000 --> 15:30.240]  противоположно компайл-тайм-эрорам, которые в момент компиляции случаются. Вот, ну еще есть
[15:30.240 --> 15:37.080]  так называемое УБ, и вот это самая божественная вещь, которая есть в плюсах. Вот, вы ее все будете
[15:37.080 --> 15:52.680]  очень любить, и я уверен. Значит, УБ, сокращенно от undefined behavior, так называемое неопределенное
[15:52.680 --> 16:12.760]  поведение. Ну, тут, наверное, вот так. Значит, что такое УБ? Смотрите, вот вы олимпиадники,
[16:12.760 --> 16:22.560]  и вы все, наверное, в своей жизни много решали разных задач по алгоритмам, и зачастую вы,
[16:22.560 --> 16:29.880]  когда решаете задачи по алгоритмам, там в условии написано. Ну вот, на вход дается там сначала
[16:29.880 --> 16:37.040]  число n, а потом n целых чисел. Каждый из чисел не превышает миллиард, а, значит,
[16:37.040 --> 16:47.960]  само n не превышает 10 в пятый. Ну, а ваше вывести нужно там то-то. Вот. Представьте, что вам вы
[16:47.960 --> 16:55.120]  решаете такую задачу, а вам на самом деле дали n, которое превышает 10 в пятый, или число,
[16:55.120 --> 17:01.520]  которое превышает миллиард. Как ваша программа себя поведет в такой ситуации? Зависит от
[17:01.520 --> 17:08.240]  программы. Дело в том, что, ну, этот человек ошибся, просто это неконкретный тест, правда? Ну,
[17:08.240 --> 17:15.480]  вы не обязаны, если в условии сказано, что на вход должны подаваться такие данные, то ваша
[17:15.480 --> 17:21.440]  программа не обязана корректно работать, она вообще не обязана каких бы то ни было гарантий, что она
[17:21.440 --> 17:26.800]  делает, если тест некорректный. Некорректный тест, о чем речь вы, что хотите от нас. В условии написано,
[17:26.800 --> 17:32.920]  что программа должна на вход подавать это, а она на вход подает не это, и что, какие проблемы?
[17:32.920 --> 17:44.800]  Вот. Теперь представьте, что вы это разработчик компилятора, а компилятор это тоже программа,
[17:44.800 --> 17:50.520]  которая входные данные преобразовывает в выходные данные. Для компилятора входные данные это код
[17:50.520 --> 18:01.120]  ваш на плюсах, а выходные данные это машинный код. А условия задачи, это что? Это стандарт C++ на
[18:01.120 --> 18:07.440]  1500 страницах. И там написано местами в этом стандарте, гарантирует, что корректная программа
[18:07.440 --> 18:13.240]  не должна содержать этого. Если она это содержит, ну, значит, такие случаи вы не обязаны учитывать,
[18:13.240 --> 18:18.120]  дорогие разработчики компилятора, делайте что хотите. Вот это называется УБ. То есть, если вы
[18:18.120 --> 18:23.120]  в своей программе пишете что-то такое, относительно чего в стандарте написано, ну, так писать просто
[18:23.120 --> 18:29.240]  нельзя, нет никаких гарантий на этот счет, вы не должны так писать. Это УБ. То компилятор вам,
[18:29.240 --> 18:34.080]  логично, ничего не обещает, потому что компилятор действует в предположении, что вход корректный,
[18:34.080 --> 18:38.800]  вход корректный для него означает, что, ну, в частности, например, вы не переполняете int никогда.
[18:38.800 --> 18:44.680]  Если программа такова, что в ней происходит переполнение int, компилятор ничего не обещает,
[18:44.680 --> 18:52.840]  вообще ничего. Он может какой угодно вам код сгенерировать в ответ на то, что вы переполнили
[18:52.840 --> 18:59.480]  в своей программе int хоть в одном месте, строго говоря. Вот, давайте я вам продемонстрирую такой
[18:59.480 --> 19:08.120]  замечательный пример, который, кстати, взят с сайта КФ, и автор этого примера, значит,
[19:08.120 --> 19:15.800]  небезызвестный всем Майкинер Заянов, спасибо ему, как говорится, за, значит, за то, что замечательные
[19:15.800 --> 19:25.240]  системы Код Форс и Полигон, да, как же без этого. И пример такой, вот давайте представим, что
[19:25.240 --> 19:42.560]  у меня есть. Нет, 4 пробела. Это не таб, но я нажимаю таб, но ставится 4 пробела. Ну как,
[19:42.560 --> 19:53.640]  это vmerc сделано, ну что вы удивляетесь, ну что вам. Точка vmerc, вот тут написано, что setup 100
[19:53.640 --> 20:04.880]  равно 4, это ширина таба, shift width равно 4, это, по-моему, я не помню. Да, могу, могу. Какой-то из этих,
[20:04.880 --> 20:11.440]  ну какая-то из этих команд заставляет его табы на пробелы менять. Возможно smart tab или smart
[20:11.440 --> 20:21.280]  indent, нет, ну я не помню, ну короче какая-то из них. Это не я говорил, не путайте. Expand tab,
[20:21.280 --> 20:28.120]  да, это не я говорил, это у вас в, я говорил, что можно, сколько хотите, пробелов, лишь бы одинаковое
[20:28.120 --> 20:35.520]  количество, но обычно либо 2, либо 4. Вот, ну в яндексе ставят 4 обычно, в гугле 2. Можете делать,
[20:35.520 --> 20:42.960]  ну да, 2 это не догма, можно 4, главное одинаковое количество, но табы нельзя, да. Так вот,
[20:42.960 --> 20:53.360]  возвращаемся сюда. Вот смотрите, такой пример, давайте я напишу, значит, цикл, ну не знаю там,
[20:53.360 --> 21:09.360]  вот, и выведу, нет, даже не так, я вот просто выведу до 300, я сейчас этот пример воспроизведу,
[21:09.360 --> 21:22.200]  выведу и, и выведу, значит, результат умножения и на вот такое, нет, вот на такое, получается 12
[21:22.200 --> 21:36.440]  миллионов 345 тысяч 678, ну если я это умножу на 100, это получится миллиард, а вот если я это умножу на 300,
[21:36.440 --> 21:47.040]  то уже будет переполнение. Это, конечно, хотим, да. Вот, сейчас я это скомпилирую, замечательным
[21:47.040 --> 22:04.600]  образом запущу, но надо новую строку только в конце. И, ну и ничего интересного не произошло,
[22:04.600 --> 22:12.640]  в общем-то, начиная с какой-то итерации, у меня просто произошло переполнение и стали отрицательные
[22:12.640 --> 22:19.240]  числа вместо положительных, ну ладно. Вот, но есть такой замечательный параметр компиляции,
[22:19.240 --> 22:26.120]  который как раз, вот я вам говорил про минус о маленькое, выходной файл, а есть минус о большое,
[22:26.120 --> 22:34.920]  кто знает, что минус о большое? Оптимизатор, да, это вы руки поняли, что знаете. Значит,
[22:34.920 --> 22:38.960]  есть такой замечательный параметр и, на самом деле, зачастую вы, сами того не подозревая,
[22:38.960 --> 22:42.960]  компилируете с ним, возможно, он у вас у кого-то по умолчанию стоит на стройках.
[22:42.960 --> 22:53.960]  Минус о большое, а дальше можно писать ноль, либо один, либо два, либо три, либо фаст,
[22:53.960 --> 23:02.560]  либо еще, ну либо, в общем, много чего можно писать, можно писать минус о g, ну неважно,
[23:02.560 --> 23:06.880]  короче, давайте я ограничусь только разбором случаев ноль, один, два, три. Это значит,
[23:06.880 --> 23:12.160]  что компилятор оптимизирует, то есть он старается некоторые вещи, которые очевидно
[23:12.160 --> 23:19.200]  можно сделать быстрее, делать быстрее. Если компилятор может доказать, что ваша программа
[23:19.200 --> 23:25.440]  эквивалентна некоторой более простой программе, скажем так, ваши действия, для пользователей,
[23:25.440 --> 23:30.040]  невооруженным глазом, то, что делает ваша программа, неотличима от того, что делает некоторая более
[23:30.040 --> 23:33.800]  простая программа с меньшим количеством операций, то компилятор имеет право сделать такие
[23:33.800 --> 23:44.960]  преобразования. Вот, я сейчас не буду вдаваться в детали, значит, ну, например, да, ну, есть много
[23:44.960 --> 23:50.960]  разных оптимизаций, которые там он делает, в том числе там как раз оптимизации возвращаемого
[23:50.960 --> 23:56.560]  значения, там не делать лишних копирований, когда он видит, что можно их не делать, там можно просто,
[23:56.560 --> 24:01.000]  если у вас есть какое-то вычисление в длинном цикле, то он может его просто оптимизировать,
[24:01.000 --> 24:05.000]  заранее посчитать, чему будет равно число после этого цикла и сразу сказать, что пусть оно будет
[24:05.000 --> 24:10.000]  равно этому, зачем мне это делать в runtime, если я могу сразу сказать, чему оно будет равно и так
[24:10.000 --> 24:15.480]  далее. Вот, ну, то есть, там, например, если вы пишете выражение какое-то длинное с вычислениями,
[24:15.480 --> 24:19.800]  компилятор просто сам вычислить, чему оно равно, и сразу переменную запишет это выражение, чтобы
[24:19.800 --> 24:29.800]  в runtime не делать этих вычислений. Вот, ну, часто такой консенсус, это O2, то есть, это такой
[24:29.800 --> 24:35.760]  не максимальный уровень оптимизации, но такой достаточно неплохой, то есть компилятор достаточно
[24:35.760 --> 24:40.640]  много оптимизаций делает, в том числе, там есть такая оптимизация, как разворачивать циклы, там,
[24:40.640 --> 24:45.680]  что по unwind for loops, вот то, что я сказал, что если вычисление какое-то в цикле, то компилятор может
[24:45.680 --> 24:54.400]  просто, видя, к чему оно приводит, заменить его на конкретное значение. Вот, я скомпилировал,
[24:54.400 --> 25:09.920]  получил warning. Да, значит, есть такой, такая опция оптимизации aggressive loop optimizations,
[25:09.920 --> 25:19.400]  которая как раз, видя, что происходит в цикле, может его, ну, так сказать, развернуть, сделать
[25:19.400 --> 25:25.480]  его не циклом, а просто заранее просчитать все, что будет в цикле, и либо забить на весь цикл целиком,
[25:25.480 --> 25:32.520]  либо его развернуть просто в одну строчку, ну и так далее. Вот, вот O2 он заметил, что тут будет
[25:32.520 --> 25:43.560]  проблемка, и кто знает, что будет, если я сейчас запущу? Это-то понятно, а что будет происходить
[25:43.560 --> 25:50.840]  в рантайме? Что конкретно будет сейчас? Я запущу, и что будет? Бесконечный цикл будет? А, нет,
[25:50.840 --> 26:04.040]  то же самое, почему? Непонятно, так, хорошо. Так, у меня не получился пример, это мне не нравится,
[26:04.040 --> 26:18.200]  давайте. Чего? Сейчас, дайте-ка я подумаю. Давайте я не буду и выводить, нет, нет, давайте я не буду
[26:18.200 --> 26:28.360]  и выводить, а буду только вот это выводить. Сейчас, возможно. Давайте я сделаю еще раз O2, и вот так сделаю.
[26:35.040 --> 26:44.160]  Сейчас, подождите. Хорошо, я поступлю хитро, я значит сейчас...
[26:44.160 --> 26:55.160]  Чего? Как ты это сделал?
[26:55.160 --> 27:14.760]  Вот этот пример. Казалось бы, в чем разница, да? Давайте я попробую этот пример к нам.
[27:14.760 --> 27:33.520]  Да, вполне возможно, от этого что-то поменялось. Давайте, значит, попробуем скомпилировать,
[27:33.520 --> 27:43.280]  и теперь запустить. Сейчас, попробуем. Да, вот все, бесконечный цикл. Да, значит, разница в том,
[27:43.280 --> 27:59.440]  что там перевод строки был Слэшен, а тут Эндл. А и не нужно понимать. Нужно понимать глобальную причину.
[27:59.440 --> 28:09.760]  Да, вот смотрите, вот этот пример. Ну да, Эндл приводит к очищению буфера вывода, а Слэшен не
[28:09.760 --> 28:16.720]  приводит. Как это влияет, ну не знаю. Вот как-то повлияло. Ну это известно там компилятору,
[28:16.720 --> 28:21.040]  почему он так решил соптимизировать. Ну откуда взялся бесконечный цикл, вы понимаете,
[28:21.040 --> 28:27.760]  почему он взялся? Откуда он взялся? Ну мы не гарантируем, а какая логика руководствовался
[28:27.760 --> 28:31.520]  компилятор? То есть, что там написано на самом деле в компиляторе? Что делает компилятор
[28:31.520 --> 28:39.280]  реально такого? Почему он бесконечный цикл это превратил? Значит, смотрите, какая логика.
[28:39.280 --> 28:48.040]  У компилятора. Тут в этом цикле есть условия и меньше 300. А в самом цикле есть умножение и вот
[28:48.040 --> 28:55.940]  на это число. Но компилятор же работает в предположении, что Инт никогда не переполняется. А если в цикле
[28:55.940 --> 29:06.240]  есть умножение вот настолько, то и всегда меньше 300. Ну, базовое предположение компилятора. Инт
[29:06.240 --> 29:10.720]  никогда не переполняется, иначе я ничего не обязан. Ну не может же программист написать такую
[29:10.720 --> 29:15.480]  программу, в которой Инт переполняется. Это мне гарантировано стандартом, что в корректной
[29:15.480 --> 29:22.560]  программе Инт не переполняется. А в этой программе Инт умножается на вот это, а условие правиложения
[29:22.560 --> 29:28.240]  цикла и меньше 300. Так зачем мне проверять и меньше 300, если я и так понимаю, что это верно,
[29:28.240 --> 29:33.960]  исходя из того, что Инт не переполняется. Компилятор просто соптимизировал проверку условия цикла. Он
[29:33.960 --> 29:41.080]  имеет право не делать, видя, что вы умножаете на вот столько, ввиду того, что Инт согласно
[29:41.080 --> 29:53.080]  предположению не переполняется. Вот вам пример того, каким бывает УБ. Примеры УБ включают в себя много
[29:53.080 --> 30:00.560]  интересного. Я вам скину статью, не прямо сейчас, но после пары. Можете в принципе нагуглить,
[30:00.560 --> 30:09.720]  статья называется «Неопределенное поведение и великая теорема фирма». Там чел заметил,
[30:09.720 --> 30:18.200]  что идея в том, что если вы условием продолжения цикла сделаете проверку великой теоремы фирма,
[30:18.200 --> 30:27.080]  особо умный компилятор может заметить, что вы вашим условием продолжения цикла или вашим
[30:27.080 --> 30:35.400]  под ифом у вас написано, что делать только если вот это вот, значит, авн и плюс бвн равно цвн.
[30:35.400 --> 30:39.800]  Компилятор может заметить, он же знает, что для всех Интов уж точно это не выполнено,
[30:39.800 --> 30:44.480]  и хотя из этого просто забить на все эти вычисления и ничего не делать.
[30:44.480 --> 30:53.920]  Ну то есть компилятор пишут люди, а люди-то знают, что великой теорема фирма доказана,
[30:53.920 --> 31:01.920]  поэтому они могут такую оптимизацию добавить. То есть оптимизации будут разными интересными.
[31:01.920 --> 31:15.360]  Когда мы делали O3, чего? Чем O2-O3 отличается или что? Там еще добавляются дополнительно
[31:15.360 --> 31:20.160]  агрессивные оптимизации, O3 это уж совсем агрессивная оптимизация, от этого компиляция
[31:20.160 --> 31:27.640]  становится сильно дольше, в разы дольше, но зато код работает быстрее. Вот, ну просто компилятор.
[31:27.640 --> 31:38.040]  Так он потому и роняет скорее всего, что там УБ. Офаст это значит он уж совсем делает что-то
[31:38.040 --> 31:47.480]  агрессивное. Вот, ну я короче это все к чему, что когда вы пишете код, в котором УБ, если вы даже
[31:47.480 --> 31:51.520]  не включаете оптимизатор, компилятор уже имеет право что-то плохое сделать, но если вы включаете
[31:51.520 --> 31:58.280]  оптимизатор, то исход совершенно неизвестен. Был компилятор когда-то один, в какой-то версии
[31:58.280 --> 32:02.480]  какого-то компилятора, по-моему не же плюс-плюс, но чего-то другого, это тоже в той статье есть,
[32:02.480 --> 32:09.080]  компилятор запускал какую-то консольную игру в случае какого-то УБ, то есть там была какая-то
[32:09.080 --> 32:14.760]  игра консольная и компилятор понимал, что если случается такое, то просто я вместо исполнения
[32:14.760 --> 32:20.840]  программы запускаю эту консольную игрушку, имею право, потому что УБ означает, что могу делать что
[32:20.840 --> 32:33.160]  хочу. Да-да-да, это как Google Chrome типа NoInternetConnection, так компилятор типа УБ, играй в динозаврика теперь.
[32:33.160 --> 32:46.240]  Такое тоже бывает. Потому что компилятор решил не проверять условия и меньше 300, зачем он
[32:46.240 --> 32:54.940]  сэкономил на этом? Компилятор саптимизировал условия, он не стал его проверять, зачем? Это
[32:54.940 --> 33:02.680]  экономия ресурсов. Нет, конечно, если бы не было переполнения, программа корректна, все было бы хорошо.
[33:02.680 --> 33:10.440]  А, если бы не было переполнения, стал бы он проверять? Ну тоже, видимо, не стал бы, да.
[33:16.240 --> 33:22.080]  Не, ну даже если, вот у нас не было переполнения, как он понимал бы, когда нужно перервать этот цикл?
[33:22.080 --> 33:32.560]  Значит, он проверял бы, не знаю. Еще раз, здесь написано, можно не проверять, здесь написано,
[33:32.560 --> 33:36.800]  можно не проверять это условие, потому что и происходит переполнение, потому что и точно не
[33:36.800 --> 33:43.960]  превосходит 300, значит это условие всегда верно, значит то убрать можно, все. Если бы у тебя было
[33:43.960 --> 33:48.800]  написано и меньше 100, то это рассуждение не работало, тебе бы приходилось проверять,
[33:48.800 --> 33:53.800]  потому что ты не можешь быть уверен, что и меньше 100, если умножается вот на это, а если умножается,
[33:53.800 --> 33:59.440]  а если и меньше 300, ты можешь быть уверен, поэтому это можно не делать. Но я не знаю,
[33:59.440 --> 34:07.920]  как работает компилятор, это не вопрос ко мне, это вопрос к тем, кто писал G++. Логикой,
[34:07.920 --> 34:18.040]  ну я объяснил еще раз. Ну это скорее всего такая логика, да, почему это могло быть так,
[34:18.040 --> 34:25.360]  но компилятор, это все на уровне догадок, мы не знаем, что на самом деле делает G++,
[34:25.360 --> 34:31.440]  можно посмотреть в исходнике G++, как он это делает, но мы не будем это делать, мы просто поняли,
[34:31.440 --> 34:51.920]  что UB приводят к неожиданным эффектам, и все. Ну да, но если вы не из-под суда запускаете,
[34:51.920 --> 35:07.920]  то, значит, вам не разрешат. Минус O0, не делай никаких оптимизаций. Ну вот в параметрах
[35:07.920 --> 35:15.520]  компиляции нужно написать минус O0, но это все равно не защитит вас, ну можно написать явно
[35:15.520 --> 35:23.360]  минус W, но no aggressive loop optimizations, можно написать no aggressive loop optimizations,
[35:23.360 --> 35:28.840]  но это не защитит вас от каких-то других неожиданных оптимизаций, которые вы можете
[35:28.840 --> 35:43.440]  пропустить. Короче, просто не допускайте UB в программе. Не допускайте ни UB, ни RE,
[35:43.520 --> 35:53.240]  и CE тоже не допускайте. Вот и все, в этом и секрет, понимаете, просто давайте писать без ошибок.
[35:53.240 --> 36:03.840]  Да, и все будет отлично, и просто вот Othol10 будет у вас сразу. Как говорил один мой сокомандник
[36:03.840 --> 36:08.080]  в Яндексе, зачем опять написали неправильный код, надо же сразу было писать правильный,
[36:08.080 --> 36:13.960]  ну сколько можно договариваться, чтобы писать правильный. Вот так и вас я призываю. Давайте
[36:13.960 --> 36:27.240]  писать правильно, не будем писать неправильно. Какие еще примеры UB есть? Ну если там переполнение
[36:27.240 --> 36:35.400]  NTA происходит, то да. Переполнение unsigned NTA не приводит к такому. Переполнение вот
[36:35.400 --> 36:43.480]  знакового NTA это UB, переполнение без знакового NTA это не UB. Почему так? Потому что без знакового
[36:43.480 --> 36:50.640]  NTA хранится вполне понятным образом в двоичном представлении, а знаковый NTA, он может храниться
[36:50.640 --> 36:54.160]  разными способами, и как раз стандарт не регламентирует, как он должен храниться,
[36:54.160 --> 36:58.600]  поэтому в стандарте и написано. Ну если переполнено, то что угодно может быть.
[37:00.120 --> 37:06.040]  Разработчики стандарта подумали о том, что знаковый NTA можно разными вариантами хранить в
[37:06.040 --> 37:10.600]  двоичном представлении, ну а разработчики компилятора рады стараться. О, что угодно может быть,
[37:10.600 --> 37:15.360]  так мы можем это заиспользовать, чтобы оптимизатор бы эффективнее написать. Вот какие есть еще
[37:15.360 --> 37:22.200]  классические примеры UB? Ну то есть переполнение NTA, ну на самом деле переполнение NTA это второй по
[37:22.200 --> 37:27.880]  популярности пример UB, первой популярности это конечно обращение по несуществующему индексу,
[37:27.880 --> 37:34.000]  вот например V, вот то самое V какое-то обращается, это UB, формально. Ну в реальности это иногда
[37:34.000 --> 37:47.800]  Runtime Error, а иногда нет. Какое? Да, сейчас поговорим, да как раз. Вот. Чего? Да, это тоже UB. Вот. Ну
[37:47.800 --> 37:55.800]  какие еще есть примеры UB? Ну например, давайте подумаем, что еще есть такого. Наверное два основных
[37:55.800 --> 38:00.880]  примера, это вот обращение по несуществующему индексу и вот переполнение знакового NTA. Ну
[38:00.880 --> 38:13.360]  еще примеры, ну много разных примеров, сотни, тысячи их. Чего? А, да, если кстати вы, о сейчас я вас
[38:13.360 --> 38:19.600]  обрадую кого-то, возможно. Если вы локально написали int x точка запятой и ничем не
[38:19.600 --> 38:29.120]  проинциализировали, то это формально UB. Ну просто если вы в локальной функции написали int x и не
[38:29.120 --> 38:35.200]  написали ничем не проинциализировали, то формально это UB. Ну в мейне, например, да, в локальной области
[38:35.200 --> 38:43.920]  видимости, в любой. Может, да. Вот как раз то есть статья, которую я вам скинул, там первый пример,
[38:43.920 --> 38:52.640]  как компилятор может использовать этот факт для некоторой оптимизации. Сейчас. А, нет. Ну да,
[38:52.640 --> 38:59.680]  там есть такой пример, то есть вы написали, например, Bool B, а дальше у вас написано if B
[38:59.680 --> 39:07.440]  сделать что-то, потом if не B сделать что-то. Компилятор не делает ни того ни другого, потому что,
[39:07.440 --> 39:16.760]  ну а зачем, типа, я имею право, поскольку мне непонятно чему равен. Компилятор,
[39:16.760 --> 39:23.280]  рассуждая так, наверное, мне же не сказали чему равен Bool, значит он вероятно равен не этому.
[39:23.280 --> 39:29.200]  Значит, ему можно, его можно, вот эту часть можно не делать. И, значит, могу не делать,
[39:29.200 --> 39:41.400]  то есть компилятор, например, может так это соптимизировать, да. Вот этого я не помню,
[39:41.400 --> 39:46.720]  если использовать, если его не использовать, UB или это, я не знаю, возможно только обращение к нему UB.
[39:46.720 --> 39:58.440]  Это обращение уже. Я не знаю, ну я не знаю, я не помню тонкостей, просто не пишите,
[39:58.440 --> 40:10.200]  просто не пишите так и все. Ну вот я не уверен на счет этого случая, ну вот int x вывести x точно
[40:10.200 --> 40:18.200]  некорректно, а int x ввести x не знаю, но на самом деле кажется, что в C++20 все-таки это пофиксили
[40:18.200 --> 40:23.680]  и сказали, что все-таки это не UB, есть определенные ограничения, что компилятор имеет право делать,
[40:23.680 --> 40:30.520]  но по-моему C++17 это все еще UB, по-моему, начиная с 20-х они все-таки это пофиксили и сказали,
[40:30.520 --> 40:35.560]  что ну все-таки нет, но это все-таки не UB. Вот, ну давайте теперь я расскажу про то,
[40:35.560 --> 40:47.600]  что такое unspecified behavior. Есть еще так называемый термин unspecified behavior. Это уже сокращается
[40:47.600 --> 40:53.480]  тоже как UB, но UB зарезервированная аббревиатура для вот этого. Unspecified behavior это ситуация гораздо
[40:53.480 --> 41:00.200]  лучше, это когда, ну то есть вот например int x по-моему C++20 это как раз unspecified behavior.
[41:00.200 --> 41:07.480]  Что значит неуточненное поведение? Это значит, что компилятор, ну не гарантируется,
[41:07.480 --> 41:13.680]  что именно произойдет, но может произойти лишь что-то одно из перечитленного, не вообще что
[41:13.680 --> 41:19.000]  угодно. Вот, классический пример unspecified behavior я вам показывал, когда вы пишете, ну все,
[41:19.000 --> 41:25.320]  я на самом деле уже показал, что хотел, можно выключить на этом. Классический пример unspecified
[41:25.320 --> 41:42.200]  behavior это когда вы, ну вот делаете, ну в прошлый раз видели пример, когда вы пишете там f плюс
[41:42.200 --> 41:49.960]  g там умножить на h. Это unspecified behavior, потому что неизвестно в каком порядке будут вызваны
[41:49.960 --> 41:58.800]  функции, я про это уже в прошлый раз говорил. Вот, ну есть шесть возможных вариантов учислений,
[41:58.800 --> 42:04.160]  но их шесть, а не бесконечно много. Вот, у b это когда у компилятора бесконечная свобода,
[42:04.160 --> 42:11.280]  бесконечно много вариантов, что он имеет право сделать, увидев такой код. Вот, а у хотя бы счетный,
[42:11.280 --> 42:19.480]  это правда. Вообще все, что может делать компилятор счетно, потому что лишь счетным
[42:19.480 --> 42:26.280]  количеством, счетное количество бинарных файлов он способен, на самом деле даже конечное,
[42:26.280 --> 42:38.440]  потому что память ограничена, к сожалению. Но ладно, вот, это unspecified behavior, значит вопрос
[42:38.440 --> 42:51.080]  на понимание последнее, и мы заканчиваем эту тему и идем дальше. Да, про это пример еще
[42:51.080 --> 42:57.920]  пара слов. Вот это я вам говорил, что есть понятие порядок, приоритет операторов,
[42:57.920 --> 43:06.600]  operator precedence, а есть понятие order of evaluation. И вот приоритет operator precedence и order of
[43:06.600 --> 43:11.200]  evaluation это независимое понятие. Если вы можете, если вы откроете cpp-reference, там есть страница
[43:11.200 --> 43:16.000]  operator precedence, которая говорит, как компилятор синтаксически парсит это выражение, то есть,
[43:16.000 --> 43:20.520]  что умножение должно быть выполнено раньше сложения. Но есть понятие order of evaluation,
[43:20.520 --> 43:25.280]  и это уже понятие, относящееся к runtime, то есть в каком порядке реально будут вычисляться
[43:25.280 --> 43:30.400]  аргументы. И вот для некоторых операторов order of evaluation определен, например, для оператора
[43:30.400 --> 43:35.400]  запятая, как мы выясняли, определено строго, что сначала вычисляться левый, потом правый.
[43:35.400 --> 43:41.280]  Для оператора присваивания, начиная, правда, лишь c++17, как я уже говорил, определено строго,
[43:41.280 --> 43:46.520]  что сначала вычисляться правый, потом левый. Ну и там для некоторых других операторов тоже
[43:46.520 --> 43:51.120]  строго определено, что сначала вычисляться одна сторона, потом другая. Но вот для оператора плюс,
[43:51.120 --> 43:58.840]  как и для оператора умножить, order of evaluation не определен, поэтому возможны все шесть вариантов.
[43:58.840 --> 44:09.720]  А еще есть такой пунктик, который говорит, что если у вас в одном и том же выражении есть изменения
[44:09.720 --> 44:14.440]  одной и той же переменной, неупорядоченная относительно друг друга order of evaluation,
[44:14.440 --> 44:24.600]  ну, например, вы говорите, плюс плюс х умножить на плюс плюс х, то вот это уже уб, а не unspecified
[44:24.600 --> 44:32.000]  behavior. Значит, там в статье order of evaluation есть пункт, ну в стандарте он есть просто, что у вас
[44:32.000 --> 44:37.760]  выражение, в котором модифицируется одна и та же переменная неупорядоченными способами относительно
[44:37.760 --> 44:42.400]  друг другу, то есть вы делаете модификацию одной и той же переменной, и неизвестно, что раньше будет,
[44:42.400 --> 44:48.960]  это или это. Вот тогда просто не забили и сказали, ну тогда уж это уб, мы не будем тут прописывать
[44:48.960 --> 44:53.960]  возможные варианты. И вот такое, если вы напишете, компилятор может оптимизировать. В частности,
[44:53.960 --> 45:00.800]  я вам говорил, что вот когда у вас было, значит, до C++17 вот такое выражение, плюс плюс х равно
[45:00.800 --> 45:10.840]  х плюс плюс, да, это было уб до C++17 и стало просто, ну и перестало быть уб и даже перестало быть unspecified
[45:10.840 --> 45:17.640]  после C++17, потому что в C++17 добавили фразу, что в операторе равно вычисляется правая часть
[45:17.640 --> 45:24.240]  раньше левой, полностью причем вычисляется, и с этой поправкой уже это становится однозначным
[45:24.240 --> 45:32.440]  выражением. А до C++17 это было уб, именно уб, то есть мы разные компиляторы давали кто 0, кто 1,
[45:32.440 --> 45:45.600]  кто 2, как я говорил, но формально они имели право выдать что угодно. Такие дела. Ну вот, да, так вот,
[45:45.640 --> 45:54.560]  последнее, что я хотел сказать, это про то, почему вообще уб существует. Вопрос, почему бы компилятору
[45:54.560 --> 46:03.520]  не превращать всякий случай уб в runtime error просто? Очевидно, вот из этих всех трех вещей,
[46:03.520 --> 46:12.000]  C, E, R, E и уб, уб самое плохое. Вот кому-то из вас может быть сейчас не очевидно, но это становится
[46:12.000 --> 46:17.880]  очевидно, когда у вас много лет опыта. Вот обычно люди, которые только начинают на плюсах писать,
[46:17.880 --> 46:25.680]  считают наоборот. Бесит компилятор со своими ошибками, выполняй просто и не пендривайся.
[46:25.680 --> 46:36.680]  Да, ну многих очень бесит ошибки компиляции там всякие дурацкие в начальной стадии, типа опять
[46:36.680 --> 46:42.760]  что-то этому компилятору не понравилось, я не понимаю, опять что ты не можешь сделать? То ли дело
[46:42.760 --> 46:48.560]  опитон? Типа написал и пошел выполнять, а там где-то упало, ну и ладно. Главное, ты же дошел до
[46:48.560 --> 46:57.280]  этого места, хоть что-то сделал. Обычно людей, новичков, C,E бесит больше, чем R,E, а R,E больше,
[46:57.280 --> 47:01.040]  чем уб. Потому что, ну блин, обратился я к десятому элементу, их всего пять. Ну что,
[47:01.040 --> 47:07.000]  я тебя жалко что ли? Ну выведи рандомное число, казалось бы. Вот, а еще сильнее людей бесит ворнинги.
[47:07.000 --> 47:13.120]  Уж ворнинги компилятор вообще бесит очень сильно. Да. А знаете мем типа, вот компилятор жаловаться,
[47:13.120 --> 47:21.640]  что забыл точку запятой, почему бы он сам ее не поставил? Компилятор редко жаловаться,
[47:21.640 --> 47:29.600]  что забыл точку запятой, обычно он говорит expected и дальше какая-то длинная. Ну если он ее ожидал,
[47:29.600 --> 47:40.880]  почему он сам ее не поставил? Ну, компилятор все-таки открывает ваш файл на чтение,
[47:40.880 --> 47:46.280]  а не на запись. Нет, ну стоп, ну если делать так, то он на всех так занимается, он там вставляет
[47:46.280 --> 47:53.080]  что хочет и ошибка тогда становится настолько хуже. Да, ну короче, вот, на самом деле все наоборот,
[47:53.080 --> 47:59.480]  да, ну не так как кажется многим начинающим, уб это самое плохое, что может случиться с вами,
[47:59.480 --> 48:04.960]  RE это чуть получше, CE это совсем хорошо. Ну а отсутствие ошибок это вообще вот то,
[48:04.960 --> 48:10.320]  к чему стремиться стоит. CE это совсем хорошо, потому что компилятор сказал вам, что ваш код неправильный
[48:10.320 --> 48:17.880]  еще до того как исполнение началось. RE это значит, что вы упали и программа перестала работать,
[48:17.880 --> 48:26.840]  но по крайней мере она не сделала ничего плохого. А УБ это значит, что все, вы уже можете, ну то есть
[48:26.920 --> 48:33.160]  если у вас там, не знаю, какой-нибудь самолет летит и ваша программа управляет, значит,
[48:33.160 --> 48:43.400]  посадкой самолета, то CE это значит, что просто вы не смогли запустить эту программу, RE значит,
[48:43.400 --> 48:52.000]  что она упала и вам пришлось, значит, в ручном режиме что-то делать, а УБ это значит, что она
[48:52.000 --> 48:59.480]  просто работает и внезапно что-то, ну там самолет начинает кремло так вниз, УБ это значит,
[48:59.480 --> 49:03.640]  что ваша программа молча начинает делать какие-то рандомные операции, совершенно работает неправильно
[49:03.640 --> 49:07.400]  и что угодно начинает происходить, но вы этого не видите, вы не понимаете, вы думаете,
[49:07.400 --> 49:13.560]  что происходит, нормально же работает, все хорошо и вдруг внезапно все взрывается, она не падает,
[49:13.560 --> 49:20.520]  а просто начинает делать бред и вы не замечаете. Вот, да, самолет падает, ну или там яндекс,
[49:20.880 --> 49:28.800]  беспилотник вырезается во что-нибудь там, ну вот короче, вот, но вопрос, почему же тогда не сделать
[49:28.800 --> 49:44.680]  все УБ, а не превратить в RE, ведь можно же было бы, вот, это можно, так, например, и сделано в питоне,
[49:44.680 --> 49:55.560]  вы поняли уже, да, какой ответ, почему так не сделано в плюсах, конечно, компилятор мог бы любую
[49:55.560 --> 50:00.280]  потенциально опасную операцию оборачивать в невидимый для вас, ну типа, когда вы обращаетесь
[50:00.280 --> 50:04.960]  по индексу к неправильному элементу, компилятор не делает это прям непосредственно, ну не
[50:04.960 --> 50:10.800]  превращает это сразу в обращение по индексу, он за вас дописывает ИВ, типа, а надо проверить
[50:10.800 --> 50:18.400]  размер, и если размер не такой, то упасть, но тут компилятор такого не делает в плюсах, в плюсах
[50:18.400 --> 50:22.720]  компилятор просто обращается, ну дальше его либо убивает операционная система, либо не убивает,
[50:22.720 --> 50:28.720]  и он возвращает рандомное число, то же самое там с делением, ну с делением на ноль, я, кстати,
[50:28.720 --> 50:33.360]  не знаю, как в питоне дела обстоят, я не помню, целые числа, ну не, ну, наверное, там тоже,
[50:33.360 --> 50:38.640]  там тоже исключение, потому что там целые числа, это на самом деле объекты, и они там, в общем, да.
[50:38.640 --> 50:49.880]  Да, на флот и в плюсах делить можно, на ноль, я имею ввиду, да, если вы делите даблы на ноль,
[50:49.880 --> 50:55.640]  то это не УБ, это просто особое значение дабла, которое называется инф, ну у дабла есть там
[50:55.640 --> 51:02.280]  определенные какие-то значения, ну да, да, да, да, да, там или на, но я не помню, вот, короче,
[51:02.280 --> 51:11.280]  ответ, потому что плюсы заточены под эффективность, мы рискуем вот такими эффектами возникающими,
[51:11.280 --> 51:18.600]  зато у нас все работает в разы быстрее, чем на других языках, потому что мы непосредственно сказано
[51:18.600 --> 51:27.520]  обратиться к 10 элементу, обращаемся к 10 элементу, без лишних, так сказать, предосторожностей, сказано
[51:27.520 --> 51:33.680]  поделить A на B, делим просто процессор, говорим инструкцию D, вот, да, это на это, все сломается,
[51:33.680 --> 51:38.960]  ну, значит, нас убьют, ничем проверять дополнительно не будем, в этом и ответ,
[51:38.960 --> 51:46.840]  то есть УБ это такой вот спецэффект C++, за счет того, что мы напрямую имеем дело вот с железом,
[51:46.840 --> 51:53.040]  можно сказать, а не оборачивав дополнительные фы, чтобы там, не дай бог, случайно что-нибудь не
[51:53.040 --> 52:02.000]  произошло плохое, вот, все, мы на этом закончили главу первую, введение, которое называлось,
[52:02.000 --> 52:13.680]  и теперь мы перейдем к главе второй, можно на этом даже, даже я на этой торжественной ноте пойду
[52:13.680 --> 52:23.480]  водички себе налью, а мы пропустили 1.6, там должно было быть, я вам должен рассказать,
[52:23.480 --> 52:26.800]  как работает IF, FOR, SWITCH, WHILE и DO WHILE.
[52:53.480 --> 53:10.280]  Так, ну, не знаю, если кто-нибудь хочет еще там все водички налить, можете там налить или не знаю,
[53:10.280 --> 53:30.160]  нет, сам IF, нет, проверка условия работает быстро, вот переход на одну из веток IF может работать
[53:30.160 --> 53:45.240]  долго, что такое IF для процессора, это значит, что нужно вычислить какое-то выражение, а дальше
[53:45.240 --> 53:50.920]  посмотреть на значение этого выражения, и либо сделать прыжок в другое место исполняемого кода,
[53:50.920 --> 53:55.720]  либо пойти дальше, вот, и какая из веток пойти дальше, а какая из веток сделать прыжок в другое
[53:55.720 --> 54:03.040]  место, это вот, как повезет, вот, одна из веток для процессора означает прыжок в другое место кода,
[54:03.040 --> 54:10.440]  а это значит, что нужно ему перезаписать кэш, ну, потому что у процессора закэширована сколько-то там,
[54:10.440 --> 54:17.440]  какая-то часть кода наперед, и если ему приходится сделать прыжок, причем этот прыжок большой,
[54:17.440 --> 54:23.400]  далеко, то приходится подгрузить новый, новый кусок кода, и вот это как раз и долго, то есть,
[54:23.400 --> 54:43.480]  вот за счет этого может быть долгий условный переход. Так, ну что ж, глава вторая, давайте я ее назову
[54:43.480 --> 54:52.840]  указатели, ссылки,
[54:52.840 --> 55:01.000]  константы и приведения типов.
[55:01.000 --> 55:15.640]  И параграмма 2.1 будет называться указатели,
[55:15.640 --> 55:32.040]  Пойнтеры. Пойнтеры это божественная вещь, которая пришла к нам из языка Си, вот, ну, с богом,
[55:32.040 --> 55:44.440]  как говорится. Ну, наверное, вы догадываетесь, что у компьютера есть оперативная память,
[55:44.440 --> 55:52.640]  и когда программа работает, переменные хранятся в оперативной памяти. Ну, на самом деле, конечно,
[55:52.640 --> 56:00.600]  все несколько сложнее, и они хранятся не всегда именно в оперативной памяти, иногда они хранятся
[56:00.600 --> 56:07.160]  где-нибудь в других местах, да, а иногда не там, не там, а прям в процессоре, но для простоты,
[56:07.160 --> 56:12.720]  не углубляясь в архитектуру компьютера и на низкий уровень, не залезая, это все вы будете на втором
[56:12.720 --> 56:18.200]  курсе делать, мы будем считать, что переменные хранятся вот в оперативной памяти просто, только
[56:18.200 --> 56:26.600]  в ней. Такая упрощенная модель мира, вот, а оперативная память, ну, что это такое, это некоторая последовательность
[56:26.600 --> 56:38.360]  byte. Значит, у этих byte есть номера, вот, ну и можно заинтересоваться, вот, переменная данная, а
[56:38.360 --> 56:46.520]  какой у нее номер байта, если в оперативной памяти смотреть, это называется адрес, вот, ну,
[56:46.520 --> 56:51.240]  еще раз, у вас есть какой-то огромный пул массив оперативной памяти, вот, у всей оперативной
[56:51.240 --> 56:57.280]  системы есть там большое количество оперативной памяти. Вот вопрос, я хочу задать, вот, у данной
[56:57.280 --> 57:04.680]  переменной, какой номер байта в памяти, вот, в этой вот, которая выделена, значит, для этого
[57:04.680 --> 57:13.400]  существует такой оператор, унарный амперсант, ну, то есть, я могу сказать, вот, у меня есть int a,
[57:13.400 --> 57:24.640]  там равно 0, а потом я скажу int, ну, я не скажу int, я скажу вот так, там cout, наверное, все-таки,
[57:24.640 --> 57:29.320]  знаете что, давайте-ка, я, наверное, все-таки это буду писать не на доске, а показывать на коде,
[57:29.320 --> 57:36.520]  а то как-то это будет странно, сейчас я буду всякие операции показывать, вот, давайте-ка, лучше все-таки
[57:36.520 --> 57:45.040]  так, значит, да, сейчас буду сразу демонстрировать.
[57:45.040 --> 58:05.960]  Ну, не знаю, а что, на камере не видно?
[58:05.960 --> 58:24.920]  А типа, доску видно и ту и другую, да, вы хотите сказать? Слушайте, ну, не хочу, это как-то,
[58:24.920 --> 58:31.640]  я не знаю, как это, давайте в следующий раз об этом заранее подумаем просто, сейчас я уже не хочу
[58:31.640 --> 58:41.400]  переделать, ну, вот давайте я, значит, заведу какую-то переменную и посмотрю, какой у нее адрес,
[58:41.400 --> 58:55.720]  адрес берется, собственно, вот таким вот замечательным оператором, а, давайте я x назову,
[58:55.720 --> 59:05.440]  а то мне как-то привычнее с x, значит, так, уже без "-o2", давайте на этот раз, а то мало ли что,
[59:05.440 --> 59:20.880]  Pointers, вот, мне выявилось некоторое шестнадцатеричное число, ну, почему шестнадцатеричное,
[59:20.880 --> 59:32.360]  потому что так определен оператор вывода для указателей, ну, собственно, давайте для начала
[59:32.360 --> 59:42.160]  поймем, какой тип вот у этого вот выражения, когда я взял адрес, я создал сущность некоторого
[59:42.160 --> 59:49.560]  нового типа, который называется указательно int, и тип этот называется, значит, обозначается int
[59:49.560 --> 59:58.120]  звездочка, int звездочка P, а слово pointer равно амперсант x, значит, операция амперсант,
[59:58.120 --> 01:00:04.560]  это операция, я сейчас напишу вот так вот в математической нотации, значит, операция амперсант,
[01:00:04.560 --> 01:00:12.760]  это операция, которая по любому типу T дает мне тип T звездочка, ну, жаль,
[01:00:12.760 --> 01:00:26.960]  ну, хотите я сотру, да, ну, то есть, вот, унарный амперсант по типу T дает мне тип T звездочка,
[01:00:26.960 --> 01:00:35.240]  вот, был int станет int звездочка, был double станет double звездочка, ну, вот, для этого
[01:00:35.240 --> 01:00:42.680]  типа, для звездочки, для указателей вывод в поток определен так, что оно выводится в шестнадцатеричном
[01:00:42.680 --> 01:00:59.680]  виде, просто, ну, хорошо, ладно, а если я хочу сделать наоборот, у меня есть указатель, а я хочу
[01:00:59.680 --> 01:01:05.280]  посмотреть, что под ним, то есть, сам указатель или некоторый адрес памяти, если у меня есть
[01:01:05.280 --> 01:01:16.800]  переменная типа int звездочка, то я могу задаться вопросом, а что под этим указателем, то есть,
[01:01:16.800 --> 01:01:28.240]  какой int скрывается по этому адресу, тогда мне нужна обратная операция, вот, и сейчас, вот тут
[01:01:28.240 --> 01:01:37.600]  все обычно путаются, потому что эта операция называется звездочка, значит, звездочка это как
[01:01:37.600 --> 01:01:47.160]  часть типа, так и операция, обозначающая по указателю получение значения под ним, значит,
[01:01:47.160 --> 01:01:52.800]  унарная звездочка это операция, которая по указателю возвращает то, что под ним, так, то есть,
[01:01:52.800 --> 01:02:09.680]  из типа T звездочка возвращает вам обратно T, так, я не сохранил, значит, сейчас будет 1, вот, хорошо,
[01:02:09.680 --> 01:02:27.760]  да, ладно, ну, я могу, в принципе, сделать, я могу взять, у play я могу тоже взять адрес, вот
[01:02:27.760 --> 01:02:35.200]  эта операция называется взятие адреса, а вот эта операция называется разыменование, значит,
[01:02:35.200 --> 01:02:41.160]  по-английски dereference, вот эта звездочка называется dereference разыменование, я могу
[01:02:41.160 --> 01:02:52.400]  взять адрес и уп, и тогда у меня получится вещь типа int две звездочки, вот, и я могу вывести,
[01:02:52.400 --> 01:03:00.840]  например, значение pp, да, и так можно делать сколько угодно раз, то есть, звездочек сколько
[01:03:00.840 --> 01:03:29.080]  угодно может быть, указатель на указатель, да, вот, да, шучит в какой момент, да,
[01:03:31.600 --> 01:03:41.960]  ну как, вот в этот момент, в какой еще, сначала мы объявили x, потом мы создали переменную p,
[01:03:41.960 --> 01:03:49.120]  которую самому мы положили рядом с x и в нее записали число равное адресу x, потом мы объявили
[01:03:49.120 --> 01:03:55.840]  переменную pp, которую положили рядом с p и в нее записали адрес pp, чего?
[01:03:55.840 --> 01:04:07.840]  Ну, взять и адрес, она просто называется, по-английски, ну, адресов так и просто называется,
[01:04:07.840 --> 01:04:17.160]  вот, обратите, кстати, внимание, что числа отличаются на 4, а знаете почему? Ну, потому
[01:04:17.160 --> 01:04:25.760]  что они рядом лежат реально, то есть, сначала лежит x, он 4 байта занимает, а p лежит рядом
[01:04:25.760 --> 01:04:36.720]  с ним, ну, поскольку он 4 байта int занимает, то p на 4 байта правее, видимо, лежит, и они, то есть,
[01:04:36.720 --> 01:04:44.120]  pp это адрес p, адрес p на 4 байта правее, чем адрес x, то есть, они лежат в памяти рядом, буквально
[01:04:44.120 --> 01:04:54.080]  на 4 байта отличаются от их адреса. А как в памяти за x бронируется память? Что значит бронируется?
[01:04:54.080 --> 01:05:00.280]  Ну, компилятор, ну, как? Вот как он понимает, что под x лежит именно этот человек в памяти?
[01:05:00.280 --> 01:05:04.960]  Подожди, это какие-то два разных вопроса, я ничего не понимаю, что ты хочешь конкретно
[01:05:04.960 --> 01:05:16.960]  спросить, как, что происходит? Да, да, следом за ним объявлен p, ну, его кладут рядом следующим.
[01:05:16.960 --> 01:05:30.360]  В этом и есть работа компилятора, собственно, превращать обращение к переменным в обращение
[01:05:30.360 --> 01:05:37.040]  к реальным адресам, ну, как бы, к регистрам процессора на самом деле. Компилятор транслирует ваши
[01:05:37.040 --> 01:05:42.840]  обращения к переменным в обращение к каким-то там ячейкам, которыми уже процессор манипулирует.
[01:05:42.840 --> 01:05:49.440]  В этом, собственно, есть основная задача компилятора, в общем-то. Ну, как компилятор это делает, ну, ну,
[01:05:49.440 --> 01:05:58.480]  сложно это, про это у вас отдельный курс будет, я даже думаю. Ну, это будет, скорее всего, еще плюс 8.
[01:05:58.480 --> 01:06:05.840]  А какой размер? Значит, какой размер у Индзвездочки? Скорее всего, 8. Ну, почему скорее всего? Потому,
[01:06:05.840 --> 01:06:12.560]  что 64-битная машина, значит, на ней 8 будет. Там вот типа компилятор есть, на 22-битном компиляторе,
[01:06:12.560 --> 01:06:20.320]  даже на 64-битной машине? Да, ну, возможно, ну, возможно. Ну, давайте я выведу еще, выведу еще адрес pp.
[01:06:20.320 --> 01:06:30.640]  Ну, я уверен, что сейчас будет 8 разницы, потому что, ну, я-то знаю свой ноут. Ну, разница действительно в 8
[01:06:30.640 --> 01:06:38.720]  получилась. Вот, 163.67 было, E8 стало F0. Ну, то есть, сайзов одного указателя это, как правило,
[01:06:38.720 --> 01:06:44.480]  как правило, 8 байт. Как правило, я говорю, потому что, ну, большинство все-таки сейчас
[01:06:44.480 --> 01:07:00.080]  компов, наверное, 64-битные. Не знаю. Не знаю. Дело в том, что тебе адресовать память, у тебя
[01:07:00.080 --> 01:07:07.320]  память 64-битная, значит, что? Что у тебя адреса, это как раз и значит, что у тебя адреса 8-байтные,
[01:07:07.320 --> 01:07:12.120]  то есть, у тебя оперативной памяти, вообще говоря, не два в тридцать второй максимум, может быть,
[01:07:12.120 --> 01:07:17.360]  а больше. Тебе нужно адресовать больше, чем два в тридцатарой ячеек. Для этого тебе нужны 8-битные
[01:07:17.360 --> 01:07:23.280]  адреса, а не 4-битные. Ой, 8-байтные, а не 4-байтные. Можно ли как-то это искусственно уменьшить,
[01:07:23.280 --> 01:07:32.440]  я не знаю. Ну, кажется, что, не знаю. Может и может. Вот, ну, короче, примерно вот обычно так,
[01:07:32.440 --> 01:07:47.000]  что указатель занимает 8-байт. Ну, хорошо. Да. Вот, отличный вопрос. Давайте поговорим немножко
[01:07:47.000 --> 01:07:55.440]  об этих операторах подробнее, что звездочка и амперсант. Начнем с того, что я могу вот так
[01:07:55.440 --> 01:08:11.680]  сделать. Я могу результату разыминования что-то присваивать. Потому что результат унарной звездочки
[01:08:11.680 --> 01:08:19.480]  это lvalue. А почему? По определению. Ну, это шадр из памяти, ты туда можешь записывать. Значит,
[01:08:19.480 --> 01:08:24.600]  ну, почему это lvalue по определению? А почему так такое определение? Ну, потому что логично,
[01:08:24.600 --> 01:08:34.040]  что вы, наверное, по разыминованному указателю хотите что-то записывать. Я могу по под p что-то
[01:08:34.040 --> 01:08:44.640]  записать. Вот у меня под p лежит int. Я могу в этот int положить другое значение. Это будет в параграфе
[01:08:44.640 --> 01:09:07.000]  2.5. Нет, 2.6. Так, хорошо, ну, да, логично. Что? Конечно, x изменится. Вот, теперь будет, ну,
[01:09:07.120 --> 01:09:21.120]  могу проверить, что x поменяется на 2. Вот. Ну, я могу что-то присвоить и самому указателю.
[01:09:21.120 --> 01:09:38.160]  Например, я могу сказать p равно 2. Ну, тут, конечно, будет проблемка с тем, что, значит,
[01:09:38.160 --> 01:09:44.280]  если я просто напишу некоторое 16-ричное число, да не важно какое число, это же не важно в каком
[01:09:44.280 --> 01:09:50.480]  виде я пишу число 16-ричным или нет, оно будет int. А указателю надо присваивать указатели. То
[01:09:50.480 --> 01:09:55.760]  есть, если я попробую p присвоить какой-то int, это будет ошибка компиляции. Он скажет, вы пытаетесь
[01:09:55.760 --> 01:10:03.160]  присвоить int звездочку, присваивайте int. Нельзя. Ну, можно, конечно, сделать cast, то есть, сказать,
[01:10:03.160 --> 01:10:08.800]  сделай, пожалуйста, считай это указателем, это число. Но ошибка компиляции как раз защищает
[01:10:08.800 --> 01:10:15.680]  вас от того, чтобы вы понимаете, если вы присвоите указателю просто число int от балды написанное,
[01:10:15.680 --> 01:10:21.480]  то что произойдет, когда вы разыминовать его, попытаетесь? Ну, конечно же, у b. Ну, по факту
[01:10:21.480 --> 01:10:26.520]  секфол, скорее всего. Если я попытаюсь указателю присвоить рандомное число, а потом обратиться
[01:10:26.520 --> 01:10:32.080]  по этому указателю, то я почти наверняка попаду в память, которая мне не принадлежит, а операционка
[01:10:32.080 --> 01:10:38.320]  меня убьет. Причем, далеко мне не принадлежит. Вот. Но я могу присваивать указатель к другой
[01:10:38.320 --> 01:10:45.040]  указателю. Ну, то есть, я могу, у меня может быть какой-то int и другой int, и я могу указателю
[01:10:45.040 --> 01:10:51.760]  на один int присвоить указательно другой int. Ну, в принципе, ничего интересного. Вот. Могу ли я, например,
[01:10:51.760 --> 01:10:58.600]  написать p присвоить pp? Оно не объявлено. Ну, могу ли я вот здесь написать p присвоить pp или pp
[01:10:58.600 --> 01:11:06.560]  присвоить p? Не могу, конечно, потому что одно это int звездочка, другое это int 2 звездочки. Типы
[01:11:06.560 --> 01:11:14.800]  разные, так делать нельзя. Вот. Ну, то есть, компилятор строго следит за тем, чтобы вы присваивали
[01:11:14.800 --> 01:11:23.120]  указатель только одинаковых типов. Ну, хорошо. А что будет, если вот здесь его явно скастовать?
[01:11:23.120 --> 01:11:32.760]  Ну, смотрите, почему плохо, почему вот если бы, допустим, было можно присваивать int 2 звездочки
[01:11:33.680 --> 01:11:39.600]  или наоборот. Ну, вот проще объяснить, почему плохо вот так. Вот, допустим, компилятор мне разрешал такое
[01:11:39.600 --> 01:11:46.800]  присваивание. Что это бы означало? Это бы означало, что указателю на int звездочка под указатель на int звездочка
[01:11:46.800 --> 01:11:53.800]  я положил, я в указатель на int звездочка записал, на самом деле, указатель на int. Что будет происходить,
[01:11:53.800 --> 01:11:58.800]  как будет разуменоваться этот указатель? Он же указатель на int звездочка, поэтому реально мне считается
[01:11:58.800 --> 01:12:06.480]  8 байт под ним. А я туда положил указатель на int, поэтому легально только 4 байта считать с этого места.
[01:12:06.480 --> 01:12:12.200]  И вот вам и УБ. То есть, если вы указатель на один тип присваиваете указатель на другой тип, то когда
[01:12:12.200 --> 01:12:17.760]  вы считываете под этим указателем, вы считываете не то количество байт, которое по идее надо бы,
[01:12:17.760 --> 01:12:23.440]  в зависимости от того, что там лежало. И получаете УБ таким образом, что вы считываете уже нелегальную
[01:12:23.440 --> 01:12:32.520]  память. Вот, что еще можно делать над указателем А? Так вот, а что такое взятие адреса? Взятие адреса
[01:12:32.520 --> 01:12:43.720]  это операция, результат которой R-value. Вот, а у нарной имперсанта R-value. И кроме того, а взятие
[01:12:43.720 --> 01:12:49.640]  адреса можно делать только у L-value. Ну как, впрочем, и разуменовывать можно только L-value.
[01:12:49.640 --> 01:12:54.920]  Значит, разуменовывать можно только L-value и адрес брать можно только у L-value. Но опять же,
[01:12:54.920 --> 01:12:59.120]  смысл в том, что брать адрес можно только у существующих реально в памяти переменных,
[01:12:59.120 --> 01:13:05.840]  а у невременных значений, которые вот 2, например. Так же, как разуменовывать можно только что-то,
[01:13:05.840 --> 01:13:12.640]  что... А, нет, я вас обманул. Разуменовывать можно и R-value. Это неправда. Разуменовывать можно R-value,
[01:13:12.640 --> 01:13:22.200]  потому что я же могу написать вот так. Разуменовывать можно R-value. Да, плюс один тоже можно, конечно.
[01:13:22.200 --> 01:13:27.440]  Разуменовывать можно и R-value, и L-value, а вот брать адрес только у L-value. Брать адрес только у
[01:13:27.440 --> 01:13:32.880]  реально существующего значения. И это отвечает на ваш вопрос, можно ли написать амперсант от
[01:13:32.880 --> 01:13:39.840]  амперсант от X? Ой, что я написал? Нельзя, потому что только у L-value можно брать адрес.
[01:13:39.840 --> 01:13:52.440]  Вот. Кстати, если я напишу без скобок, что будет? Синтаксическая ошибка,
[01:13:52.440 --> 01:14:06.400]  потому что это конъюнкция логическая. Да, здесь что-то другое у него произошло. Возможно,
[01:14:06.400 --> 01:14:09.960]  двойной амперсант, написанный у Нарны, для него что-то другое означает. Возможно,
[01:14:09.960 --> 01:14:13.440]  это какое-то сокращение для какого-то старого симп... Ладно, не будем разбираться.
[01:14:13.440 --> 01:14:27.520]  А где мы в памяти храним глубину указания? Что значит глубина, не понял. Что значит глубина
[01:14:27.520 --> 01:14:34.200]  указания? У нас же есть int звёздочка, int две звёздочки. In звёздочка, in две звёздочки,
[01:14:34.200 --> 01:14:41.360]  просто тип. А где мы в памяти храним? Это double или это int? Или это string? Аналогичный
[01:14:41.360 --> 01:14:48.840]  вопрос. Нигде. Это просто компилятор только знает. In звёздочка, in две звёздочки, это типы
[01:14:48.840 --> 01:15:02.920]  переменных. В рантайме нет понятия тип в рантайме. Процессор ничего не знает о типах. Он оперирует
[01:15:02.920 --> 01:15:11.400]  только с числами целыми. Ну, там и с дробными ещё иногда. Но о типах это указатель, или это int,
[01:15:11.400 --> 01:15:18.120]  или это char. Он ничего не знает. Только компилятор знает что-то про типы. Все эти понятия in звёздочка,
[01:15:18.120 --> 01:15:23.480]  in две звёздочки существуют только для компилятора и для нас с вами. И их смысл в том, чтобы
[01:15:23.480 --> 01:15:28.840]  разрешать или запрещать некоторые операции над этими объектами, над этими переменными. Компилятор
[01:15:28.840 --> 01:15:35.520]  понимает, что pp это не такой тип как p, поэтому присвоить нельзя. А когда уже скомпилировано,
[01:15:35.520 --> 01:15:43.600]  процессор ничего этого не знает. Просто делает что написано. Понятно ответил?
[01:15:43.600 --> 01:15:58.000]  Ну, массив массивов есть и надо создать. Если в C создаёшь массив массивов, то ты
[01:15:58.000 --> 01:16:04.480]  фактически создаёшь указательный указатель. Потому что в C массив это указатель по сути,
[01:16:04.480 --> 01:16:08.520]  а массив массив это указательный указатель. К этому мы скоро перейдём.
[01:16:08.520 --> 01:16:18.080]  Давайте дальше. Что ещё с указателями можно делать? Можно к ним числа добавлять.
[01:16:18.080 --> 01:16:29.680]  Например, можно сказать p плюс равно 1. Что будет значить p плюс равно 1? Ну,
[01:16:29.680 --> 01:16:37.560]  это значит будет взять следующий элемент за p. Ну, давайте я вот на таком примере это вам
[01:16:37.560 --> 01:16:46.600]  продемонстрирую. Смотря в каком. Вот в векторе да. Причём, по-моему, начинает только c плюс
[01:16:46.600 --> 01:16:59.680]  плюс 17. Так, вот давайте я заведу вектор там из десяти элементов. Ну, давайте я заведу вектор
[01:16:59.680 --> 01:17:12.440]  там 1, 2, 3, 4, 5. И сейчас вам продемонстрирую. Сейчас только вектор заинклужу. Смотрите,
[01:17:12.440 --> 01:17:31.320]  смотрите. Вот я беру. Всё это закомментирую нафиг. Вот я беру вектор и в нём беру. Говорю,
[01:17:31.320 --> 01:17:41.640]  in звёздочка p равно адрес v0. Могу так сделать? Могу так сделать. У постфиксных операций
[01:17:41.640 --> 01:17:48.800]  приоритет выше, как мы уже знаем. Поэтому будет корректно. Адрес v0. Теперь говорю p плюс равно
[01:17:48.800 --> 01:18:01.120]  1 и вывожу звёздочка p. Всё корректно. Что будет выведено, если всё корректно? Или нет? Или что-то не так?
[01:18:01.120 --> 01:18:17.680]  Значит, нет. Всё корректно. Всё правильно. Здесь нет. Здесь нет уб. Всё нормально. Выведется 2.
[01:18:17.680 --> 01:18:29.640]  Давайте проверим. Ну ничего он не скажет. Всё нормально. Здесь нет никаких нелегальных операций.
[01:18:29.640 --> 01:18:40.840]  Всё нормально. Вот я взял адрес. Вектор хранит этот массив где-то в оперативной памяти. Он на самом
[01:18:40.840 --> 01:18:48.400]  деле хранит его в динамической памяти, но не важно. Мы взяли адрес, получили его, увеличили на 1. Что
[01:18:48.400 --> 01:18:56.080]  происходит, когда я говорю к указателю добавить 1? Он переходит как бы к следующему. Вот что означает
[01:18:56.080 --> 01:19:02.280]  добавление числа к указателю? Вот тут как раз ключевую роль играет тип. Это указатель на что? Он
[01:19:02.280 --> 01:19:07.080]  добавляет к нему столько байт, сколько надо для хранения одного элемента такого типа, как на что
[01:19:07.080 --> 01:19:12.640]  указатель. Поэтому на самом деле п плюс равно 1 фактически означает увеличить п на 4. Ну значение
[01:19:12.640 --> 01:19:18.240]  численное п. Если бы это был указатель на дабл, то увеличение указателя на 1 означало бы увеличение
[01:19:18.240 --> 01:19:25.880]  численного значения на 8. Ну и так далее. А если стринг, то на size of стринг. Ну на size of вот этого
[01:19:25.880 --> 01:19:45.960]  типа как раз. Кто знает? Кто откуда знает? Он это кто? Компилятор или процессор? Компилятор,
[01:19:45.960 --> 01:19:52.760]  процессор не знает. У процессора написано увеличить на 4. Компилятор, откуда компилятор знает,
[01:19:52.760 --> 01:19:59.080]  что если вы пишете a плюс b, то это нужно целые числа сложить. Если a и b это целые числа. Оттуда,
[01:19:59.080 --> 01:20:03.600]  что компилятор про каждую перемену знает ее тип. И для разных типов он амперации транслирует в
[01:20:03.600 --> 01:20:08.360]  разные инструкции процессора. Pay это указатель на int. Для указателей на int прибавление целого
[01:20:08.360 --> 01:20:14.840]  числа означает это. Компилятор транслирует это. Прибавь 4 к числу для процессора. Компилятор
[01:20:14.840 --> 01:20:30.040]  помнит типы всех переменных. Size of от любой переменной он константин. У стрингов и у векторов
[01:20:30.040 --> 01:20:39.640]  тоже константный size of. Точка size это не то же самое, что size of. Можно сделать plus plus p. Это
[01:20:39.640 --> 01:20:45.440]  то же самое. Как и... Ну, p plus plus. Post-ex increment, prefix increment работают по тем же правилам,
[01:20:45.440 --> 01:20:51.960]  что и для int. И plus plus p это то же самое, что p plus равно 1 для указателей. И можно
[01:20:51.960 --> 01:21:02.240]  decrement сделать. И можно вычесть число целое. Вот если я сделаю p plus равно 5 уже, то это будет,
[01:21:02.240 --> 01:21:10.480]  как если бы я обратился к пятому элементу. Ну, то есть за границу. Это уже уб. Ну, то есть,
[01:21:10.480 --> 01:21:16.440]  я просто иду в... Ну, там ноль. Ну, у меня, кстати, минус вел, минус экстр, видите, ничего не сказал.
[01:21:16.440 --> 01:21:30.320]  Да, это уб. Вот. Что еще можно делать с указателями? Можно брать разность двух указателей. Ну,
[01:21:30.400 --> 01:21:36.400]  еще можно сравнивать, кто меньше. Можно спросить, кто меньше. Вот давайте я заведу указатель на v0
[01:21:36.400 --> 01:21:45.800]  и указатель на p2. Не знаю, назову его, хоть это и плохой код стайл. v1. И спрошу, p меньше, чем p2.
[01:21:45.800 --> 01:21:57.240]  Ну, это буль. Мне сейчас выведут 1, то есть true. Значит, указатели можно проверять на равенство,
[01:21:57.240 --> 01:22:03.320]  а также на меньше-больше. Ну, проверка понятна. Какой адрес меньше, тот и меньше. Ну,
[01:22:03.320 --> 01:22:10.560]  и разность можно брать. Как брать разность? Разность — это сколько шагов нужно пройти от
[01:22:10.560 --> 01:22:17.040]  первого, чтобы дойти до второго. Это будет int. Разность двух звездочек — это int. Разность любых
[01:22:17.040 --> 01:22:24.520]  двух вообще. t звездочек — это int. Ну, там, это size t на самом деле. Нет, не size t, это знаковое
[01:22:24.520 --> 01:22:30.240]  число, потому что разность может быть отрицательной. Какой именно это тип, я не помню. А, ptrdivt,
[01:22:30.240 --> 01:22:37.000]  да, спасибо. ptrdivt, который может быть либо int, либо longlong, смотря какая у вас размерность.
[01:22:37.000 --> 01:23:06.760]  Это 1, но я могу сделать p-p2, это будет минус 1. Так, так, так. Какой вопрос был?
[01:23:06.760 --> 01:23:22.720]  Что за вопрос? Плюс плюс к чему? Подожди, подожди. Плюс плюс к чему? Плюс плюс от чего? Если ты возьмешь,
[01:23:22.720 --> 01:23:27.800]  а как ты берешь указатель на первый элемент сета? Это не указатель, это итератор.
[01:23:27.800 --> 01:23:39.520]  Что происходит, когда нам не читаем указатели? Ну, вычитание указателей — это сколько? Формально
[01:23:39.520 --> 01:23:48.080]  говоря, это взять их численные значения и поделить на размер. Просто. То есть сколько шагов нужно
[01:23:48.080 --> 01:23:53.080]  про... Сколько нужно добавить к p, чтобы получить p2. Вот и все. Ну, к p2, чтобы получить p, да.
[01:23:53.080 --> 01:24:10.600]  Не может, потому что указатели разных типов вы не сможете взять. Нет, вы не сможете,
[01:24:11.400 --> 01:24:21.360]  присвоить никогда значение, не кратное 4. Ну, если вы, если вы присваиваете, если в корректной
[01:24:21.360 --> 01:24:28.760]  программе не можете, не кратное size of int. Если вы int звездочки вероломно присваиваете int, ну,
[01:24:28.760 --> 01:24:34.960]  то есть через cast вы просто говорите, присвой. Нужно cast сделать для этого. Ну да, если, но это уже
[01:24:34.960 --> 01:24:41.520]  убе. То есть просто, если вы берете рандомный int и присваиваете его int звездочки, то это,
[01:24:41.520 --> 01:24:50.200]  по-моему, уже убе. Просто нельзя взять int и сделать из него указатель. Да, уже это будет убе, скорее
[01:24:50.200 --> 01:24:57.880]  всего. Ну, потому что нет ни одной ситуации, в которой из int надо вам указатель создать. Это
[01:24:57.880 --> 01:25:03.160]  просто как бы не... Это абсурд. Вы ничего не знаете об адресах памяти, вы никак не можете взять
[01:25:03.360 --> 01:25:17.080]  число целое и сказать, давай, ты будешь считать его адресом в памяти. Нет, так вы не должны
[01:25:17.080 --> 01:25:24.920]  были так делать. У вас арифметик, ну, это убе, вы не должны конвертировать int потом обратно. Все,
[01:25:24.920 --> 01:25:28.720]  что вы, все, что тебе может быть теоретически нужно сделать в арифметике указателей,
[01:25:28.720 --> 01:25:32.760]  определено над самими указателями. А что тебе нужно с ними делать, это только добавлять числа
[01:25:32.760 --> 01:25:38.000]  и брать разность и сравнивать. Умножать указатели на числа тебе никогда не нужно, поверь мне.
[01:25:38.000 --> 01:26:05.160]  Я понял. Ну, кстати, хороший вопрос, да, не знаю. Ну, XOR, конечно, не работает по битвы,
[01:26:05.160 --> 01:26:29.720]  я думаю, с ними. Да, не работает. Нет, вряд ли. Ладно, не знаю, про XOR вы, конечно, меня заставили
[01:26:29.720 --> 01:26:35.320]  врасплох, не знаю, может быть, действительно, в этой ситуации вам придется конвертировать.
[01:26:35.320 --> 01:26:46.920]  Ну, есть такая структура XOR List, это двусвязанный список, в котором вы экономите один указатель за
[01:26:46.920 --> 01:26:54.560]  счет того, что храните XOR указателя, я забыл, правда, указатель на что, указатель на, по-моему,
[01:26:54.560 --> 01:27:00.840]  указатель на следующий, указатель на предыдущий, да, и в итоге... По предыдущему вы можете узнать
[01:27:00.840 --> 01:27:07.600]  какой следующий, да, типа того. Вот. То есть мы храним сначала, ну, создаем int, потом char,
[01:27:07.600 --> 01:27:13.600]  потом int. Где это вы делаете, это вы про что? В программе. Создаем int, потом char, потом int. И что?
[01:27:13.600 --> 01:27:20.160]  Ну, char он занимает один байт. Да. То есть между этими... Нет, int положится на следующий, 3 байта пропустится,
[01:27:20.160 --> 01:27:30.720]  и положится int на следующий кратный 4. Ну да, он не занят и будет. Значит, нет гарантии, что все кладется
[01:27:30.720 --> 01:27:45.800]  подряд, но есть гарантия, что компилятор положит int на адрес кратный size of int. Векторе. Больше
[01:27:45.800 --> 01:27:51.840]  ни в каких. То есть, по сути, любой тип, любая переменная, она может занимать раза в два большую памяти.
[01:27:51.840 --> 01:27:58.360]  А в array, ну, это не контейнер формально. То есть, любая переменная формально может занимать почти
[01:27:58.360 --> 01:28:04.600]  что два раза больше памяти, чем ее size of на самом деле. Ну да. Может и не в два, может и больше, чем в два.
[01:28:04.600 --> 01:28:14.600]  Какой вопрос там? Подожди, какой вопрос? Тихо, какой вопрос был? Да не у тебя, человек руку поднимал.
[01:28:14.600 --> 01:28:31.800]  В строке тоже, но строка не контейнер, по-моему. Формально строка не является контейнером. Это очень длинное
[01:28:31.800 --> 01:28:36.000]  определение. Можешь открыть на себе перейхаль на статью контейнер, и там длинный список требований,
[01:28:36.000 --> 01:28:43.520]  что такое контейнер. Но это не вектор чара, в том-то и дело. Они похожи очень, но формально это не
[01:28:43.520 --> 01:28:53.280]  вектор все-таки. Так. Да, у вас уже должна новая пара начинаться, поэтому я думаю, что мы на этом прервемся.
[01:28:53.280 --> 01:29:19.800]  Вот. И... А у тебя какой вопрос был? Нет, конечно. Чар, например, занимает один байт всего. Но если ты
[01:29:19.800 --> 01:29:24.280]  кладешь чары подряд друг за другом, то они и будут лежать подряд друг за другом. Но если сразу после
[01:29:24.280 --> 01:29:33.480]  чара кладешь Инт, то у тебя три байта пропустятся потом. Ну, скорее всего. Это непонятно. Компилятор
[01:29:33.480 --> 01:29:39.160]  может их переупорядочивать так, чтобы экономить. Но Инт он точно положит на адрес кратный четырем.
[01:29:39.160 --> 01:29:47.880]  Что зачем? Зачем кладет Инт на адрес кратный четырем? Потому что процессор считывает из памяти
[01:29:47.880 --> 01:29:54.160]  по четыре байта за раз, и он умеет инструкцию считывать только вот так. Если бы Инт лежал
[01:29:54.160 --> 01:30:00.000]  разорвано, то процессору пришлось бы в два раза больше тратить операции на то, чтобы считать его.
[01:30:00.000 --> 01:30:09.480]  Еще раз, что в ВКСО? Ничего. Он неопределен. Это некорректно. А ты что хотел сказать?
[01:30:09.480 --> 01:30:21.800]  Вектор векторов, это был бы... Вектор не хранит в себе средний.
[01:30:21.800 --> 01:30:26.880]  Почему ППС-1 перейдет в корректный указатель, если он двигается на сайзов вектора?
[01:30:26.880 --> 01:30:33.640]  Минуточку. Если ты бы взял адрес В0 в векторе векторов, то это был бы не Инт звездочка, а вектор Инт звездочка.
[01:30:33.640 --> 01:30:42.440]  Бог бы получил бы указатель на следующий вектор. Потому что вектор хранит массив не в полях, а в динамической памяти.
[01:30:42.440 --> 01:30:56.000]  Сайзов любого типа константа. Сайзов вектора константа. Я расскажу это как раз в следующем параграфе,
[01:30:56.000 --> 01:31:05.280]  который будет вечером. Сегодня вечерний парой будет продолжение. Все, давайте на этом закончим.
[01:31:05.280 --> 01:31:18.000]  Пример называется memory reuse. Как можно догадаться из названия, здесь будет переиспользование памяти.
[01:31:18.000 --> 01:31:34.080]  Да, смотрите. Вот я взял, объявил А, объявил указатель на А, а потом в локальной области видимости,
[01:31:34.080 --> 01:31:41.680]  создал еще локальную область видимости, и в ней сделал В, и П теперь у меня указатель на В.
[01:31:41.680 --> 01:32:00.640]  Вот, ну я выведу П, а дальше я такой выведу то, что под П лежит. Что произойдет? Ну и правильно, и хорошо, что не видно.
[01:32:00.640 --> 01:32:15.040]  Значит, ну это УБ, потому что это обращение к переменной по адресу, который уже нелегален вообще-то, но по факту там будет два почти наверняка,
[01:32:15.040 --> 01:32:22.720]  потому что ну что толку, он же не будет затирать нулями то, что там освободилось, то есть он завел переменную, мы взяли адрес ее,
[01:32:23.200 --> 01:32:32.400]  она, там область видимости закончилась, ну и все, и теперь как бы формально обращаться к ней нельзя, но если мы попробуем, то скорее всего мы все еще увидим там два.
[01:32:39.520 --> 01:32:46.000]  Нет, к звездочке П обращаться, это УБ. Ну вот, мы увидели сначала П,
[01:32:46.720 --> 01:32:58.240]  мы сначала вывели П, вывести П это все нормально, ну П в своей области видимости находится, просто в ней лежит адрес, по которому обращаться уже нельзя,
[01:32:58.240 --> 01:33:09.120]  а вот звездочка П, это уже УБ, потому что формально то, что под П лежит, уже свою область видимости потеряла, и это уже не наша память, мы уже не можем туда ходить,
[01:33:09.520 --> 01:33:21.680]  но фактически она все еще наша, она все еще содержит двойку, хоть область видимости уже и закончилась, ну потому что зачем перезатирать, очевидно он не будет ничего перезатирать,
[01:33:21.680 --> 01:33:34.160]  ну вот дальше интересно, я беру и объявляю еще четыре переменных подряд, это не по кодстайлу объявлять переменные несколько в одной строке, как мы говорили сегодня утром, но в учебных целях можно,
[01:33:34.560 --> 01:33:55.040]  вот, я значит объявляю еще четыре переменных, вывожу их адреса, и, да, я говорю 3, 4, 5, 6, вот, и смотрю какие у них адреса, ну давайте посмотрим какие у них адреса, вот УБ был адрес 6С,
[01:33:55.920 --> 01:34:10.320]  а у этих переменных адреса остались 6.0, 6.4, 6.8 и 6.C, опа, то есть одна из этих переменных перезатерла Б, она оказалась на том же адресе, на котором была Б, это оказалась Ф,
[01:34:10.320 --> 01:34:25.600]  теперь если я делаю инкримент по указателю, ну, я инкриментирую значение, которое лежит под П, это все еще у Б, я не имею права так делать, но по факту там лежит уже не Б, а Ф по этому же адресу,
[01:34:25.600 --> 01:34:34.880]  и фактически получается, что у меня от этого действия изменится одна из переменных, которую я позже завел, когда я вывожу, у меня получается 3, 4, 5, 7, 7,
[01:34:34.880 --> 01:34:59.160]  А, 3, 4, 5, 7, а 7 это то, что под П лежит, собственно, уже не два, потому что там оказалась Ф, и, значит, в чем мораль этого примера, в том, что когда у вас какая-то переменная выходит из области видимости,
[01:34:59.160 --> 01:35:29.160]  и вы продолжаете держать указатель на нее, то обращение по этому указателю, вообще говоря, может вам дать, оно может вам дать, как то число, которое там лежало, если оно до сих пор никем не перезатерто, так и сегфолд, если уже память отдана обратно операционной системе и вам не принадлежит, так и внезапно вы можете попасть, тыкнуть в какую-то другую свою же собственную переменную, и работая по этому указателю, вы можете на самом деле менять значение какой-то другой из своих перемен, когда у вас есть
[01:35:29.160 --> 01:35:52.160]  что-то, которое завели позже, потому что память под новые переменные переиспользует старую память зачастую, вот такой поучительный пример, вот, где произошло, когда произошло, это ошибка, оставшаяся с утра, да,
[01:35:52.160 --> 01:36:21.160]  ничего не гарантируется УБ, какое гарантируется, тут везде написано УБ, УБ, УБ, ну по факту, вот, может так получиться, и так на практике довольно часто происходит, что когда вы переиспользуете, когда вы обращаетесь по указателю на уже отжившую переменную, вы на самом деле попадаете в какую-то новую переменную, которая перезатерла старую, указатель указывает на тот же самый адрес, что и был УБ,
[01:36:22.160 --> 01:36:46.160]  нет, УБ, потому что так решил комитет по стандартизации, в стандарте написано, если вы обращаетесь по указателю, который был, ну, то есть, вот, начиная с этого места все УБ, ну, то есть, начиная вот с этого места все УБ,
[01:36:46.160 --> 01:37:03.160]  не важно, что я там дальше, случайно получилось, что я положил, ну, может быть, так получится, что туда попадет какая-то новая переменная, и тогда я попаду не в секфолт, допустим, но я могу попасть и в секфолт случайно,
[01:37:03.160 --> 01:37:12.160]  нет никаких гарантий относительно поведения этой программы, вообще никаких, может быть, игрозмейка запустится, но на практике, скорее всего, будет, что?
[01:37:12.160 --> 01:37:16.160]  С чего начинается УБ здесь в данном программе? С вывода, да?
[01:37:16.160 --> 01:37:30.160]  Вот с этого места начинается УБ. Ну, УБ всякий раз, когда вот это УБ и вот это УБ, обращение к звездочке П после того, как Б закончил обусидимости, УБ всегда.
[01:37:31.160 --> 01:37:38.160]  Все, вот такой пример я хотел показать, ну, а теперь я буду дальше на доске рисовать, наверное, до конца пары.
[01:37:41.160 --> 01:37:43.160]  На ошибке мы так и не получили.
[01:37:43.160 --> 01:37:59.160]  Ну, нет. Нам не повезло как раз. Повезло это, если был секфолт. Вот, надо правильную модель мышления вырабатывать. Если упало, это значит повезло. Если так случилось, это не повезло как раз.
[01:38:01.160 --> 01:38:07.160]  Так, смотрю, Филипп, тут у вас же, блин, ну и чего, я сейчас буду стирать, конечно.
[01:38:15.160 --> 01:38:21.160]  Я даже не знаю, как с этим быть. Видимо, я буду долго это стирать.
[01:38:23.160 --> 01:38:26.160]  Надо было кого-то в перерыве заставить это сделать.
[01:38:27.160 --> 01:38:28.160]  Да.
[01:38:31.160 --> 01:38:35.160]  Ну ладно. Это что, очередь на четырех стэках?
[01:38:36.160 --> 01:38:38.160]  А почему там написано four stack queue?
[01:38:38.160 --> 01:38:40.160]  Там было сначала четыре стэка, а потом...
[01:38:40.160 --> 01:38:45.160]  А, все, хорошо. А я удивился просто. Я про очередь на четырех стэках, что-то новое.
[01:38:46.160 --> 01:38:48.160]  Это если у нас нет операции про...
[01:38:52.160 --> 01:38:54.160]  А что это за очередь тогда такая интересная?
[01:38:54.160 --> 01:38:56.160]  Очень полезно.
[01:38:56.160 --> 01:38:58.160]  Можно нулестая, в принципе.
[01:38:58.160 --> 01:39:00.160]  Нет причины.
[01:39:04.160 --> 01:39:05.160]  Так.
[01:39:22.160 --> 01:39:25.160]  Блин, рука устает реально от этого дела.
[01:39:28.160 --> 01:39:31.160]  Так, последняя пара вещей, которые хочу сказать про указатели.
[01:39:31.160 --> 01:39:33.160]  Во-первых, есть такой тип void-звездочка.
[01:39:37.160 --> 01:39:39.160]  Это такой особенный указатель.
[01:39:39.160 --> 01:39:42.160]  Он указывает на непонятно что.
[01:39:43.160 --> 01:39:47.160]  Ну то есть, это просто указатель без уточнения куда, вот так скажем.
[01:39:48.160 --> 01:39:54.160]  Вот void-звездочка относится к void не так, как все остальные t-звездочка относятся к t.
[01:39:54.160 --> 01:39:58.160]  Void это просто ничего, а void-звездочка это просто указатель на что угодно.
[01:39:58.160 --> 01:40:05.160]  Ну то есть, это просто указатель на какой-то произвольный байт памяти без уточнения, что под ним лежит.
[01:40:07.160 --> 01:40:14.160]  Разыминовать void-звездочку нельзя, потому что непонятно какой тип получится.
[01:40:16.160 --> 01:40:18.160]  И добавить число к void-звездочке нельзя.
[01:40:19.160 --> 01:40:21.160]  И разность void-звездочек взять, по-моему, нельзя.
[01:40:22.160 --> 01:40:24.160]  А что можно делать с void-звездочкой?
[01:40:24.160 --> 01:40:28.160]  Ну, можно сделать приведение ее к какой-нибудь другой звездочке.
[01:40:28.160 --> 01:40:31.160]  Ну, например, можно void-звездочку привести к int-звездочке.
[01:40:32.160 --> 01:40:35.160]  А можно любой другой указатель привести к void-звездочке.
[01:40:35.160 --> 01:40:39.160]  Ну то есть, void-звездочка это просто когда вам выделили сырую память.
[01:40:40.160 --> 01:40:42.160]  Столкнемся вскоре с такой ситуацией.
[01:40:42.160 --> 01:40:46.160]  Когда просто выделили сырую память и под ней пока ничего не лежит, никакие типы.
[01:40:47.160 --> 01:40:49.160]  То указатель имеет тип void-звездочка.
[01:40:49.160 --> 01:40:54.160]  Вы можете сказать, давайте это будет, допустим, int-звездочка и класть int по этим адресам.
[01:40:55.160 --> 01:40:56.160]  Да, что?
[01:40:56.160 --> 01:41:00.160]  А что если он, допустим, не кратен 4, а мы его кастуем в int-звездочка?
[01:41:02.160 --> 01:41:03.160]  Не знаю.
[01:41:15.160 --> 01:41:18.160]  На самом деле, такой ситуации довольно трудно добиться.
[01:41:20.160 --> 01:41:28.160]  Мы же можем определить как бы с int, допустим, да, но мы же можем свою структуру сделать, которая будет какого-то странного размера.
[01:41:29.160 --> 01:41:33.160]  И максимально вероятно, что эту штуку уже не будет делиться на размер этой структуры.
[01:41:34.160 --> 01:41:44.160]  Дело в том, что всякий раз, когда вы получаете void-звездочку, она обычно кратна максимально возможной степени двойки, по которой типы ложатся.
[01:41:44.160 --> 01:41:45.160]  Обычно это кратно 16.
[01:41:46.160 --> 01:41:50.160]  Вот, поэтому такие проблемы только если искусственно себе создать можно.
[01:41:51.160 --> 01:41:56.160]  Все функции выделения памяти стандартной возвращают указатель кратный 16, и на него можно класть что угодно.
[01:41:56.160 --> 01:41:57.160]  Да.
[01:42:00.160 --> 01:42:03.160]  Сам void-звездочка 8 байт, ну, на 60 битной системе, да.
[01:42:03.160 --> 01:42:07.160]  Поэтому, наверное, логично его класть на места кратной 4.
[01:42:08.160 --> 01:42:10.160]  При чем тут куда его класть, куда класть?
[01:42:10.160 --> 01:42:15.160]  Он сам занимает 8 байт, само число 8 байт занимает, причем тут к чему равно это число?
[01:42:16.160 --> 01:42:17.160]  Совершенно непонятно.
[01:42:18.160 --> 01:42:20.160]  А vector-звездок 8 байт, да?
[01:42:21.160 --> 01:42:24.160]  Vector, ну, зависит.
[01:42:25.160 --> 01:42:28.160]  Сейчас мы обсудим, почему, что-то связов от vector.
[01:42:29.160 --> 01:42:35.160]  Ну, мы вызываем пункт выделения памяти, мы же в нее передаем ядно, сколько байт выделить.
[01:42:35.160 --> 01:42:36.160]  Да.
[01:42:37.160 --> 01:42:38.160]  И что?
[01:42:39.160 --> 01:42:43.160]  Это не противоречит тому, что он тебе вернет указатель кратный 16.
[01:42:44.160 --> 01:42:45.160]  А, все понятно.
[01:42:45.160 --> 01:42:46.160]  Да.
[01:42:46.160 --> 01:42:51.160]  Вопрос, как void-звездочка занимает, что ему можно что-то кастануть к чему другому, ведь там же должна лежать...
[01:42:51.160 --> 01:42:55.160]  Void-звездочку просто можно кастануть к чему угодно другому, queen-звездочки, например.
[01:42:55.160 --> 01:42:56.160]  Ну.
[01:42:57.160 --> 01:42:59.160]  Мы сейчас пытаемся сделать каст.
[01:42:59.160 --> 01:43:00.160]  Да.
[01:43:01.160 --> 01:43:02.160]  Объект-звездочка.
[01:43:02.160 --> 01:43:03.160]  Да.
[01:43:03.160 --> 01:43:04.160]  Как он понимает, что там лежит именно этот объект?
[01:43:04.160 --> 01:43:05.160]  У него же разная может быть длина?
[01:43:05.160 --> 01:43:06.160]  Сигнатура длины объекта.
[01:43:07.160 --> 01:43:08.160]  Никак.
[01:43:08.160 --> 01:43:11.160]  Когда ты кастуешь к объекту, он и понимает, какой длины там должен быть.
[01:43:11.160 --> 01:43:12.160]  Ну, например.
[01:43:13.160 --> 01:43:14.160]  Ничего не проверяет он.
[01:43:15.160 --> 01:43:20.160]  Ты просто говоришь, волевым решением я утверждаю, что теперь под этим указателем double.
[01:43:21.160 --> 01:43:22.160]  И он такой, хорошо.
[01:43:22.160 --> 01:43:25.160]  Если после этого ты разыминуешь, а там был не double, то это UB.
[01:43:26.160 --> 01:43:29.160]  Но если там реально был double и ты отгадал, то все нормально.
[01:43:32.160 --> 01:43:33.160]  Чего?
[01:43:35.160 --> 01:43:36.160]  Да, да, да.
[01:43:36.160 --> 01:43:37.160]  Это просто указатель на срубам.
[01:43:37.160 --> 01:43:38.160]  Что?
[01:43:39.160 --> 01:43:42.160]  Чтобы у нас есть переменная, и мы хотим ее кастануть другому типу.
[01:43:42.160 --> 01:43:44.160]  Мы в скобочках перед этой переменой должны писать тип.
[01:43:45.160 --> 01:43:50.160]  Ну, скорее static-cast к этому типу вот этой переменной.
[01:43:50.160 --> 01:43:53.160]  Это приведение типов стандартное C++.
[01:43:54.160 --> 01:43:55.160]  Напишу в параграфе 2.7.
[01:43:56.160 --> 01:43:57.160]  Понятно.
[01:43:57.160 --> 01:43:59.160]  Я не буду сейчас рассказывать про приведение типов.
[01:43:59.160 --> 01:44:00.160]  Это большая тема.
[01:44:00.160 --> 01:44:02.160]  Сейчас нам не нужно ничего этого.
[01:44:02.160 --> 01:44:06.160]  Я просто тут говорю, что вот звездочка – это указатель на производительную память.
[01:44:07.160 --> 01:44:08.160]  Ну, хорошо.
[01:44:08.160 --> 01:44:11.160]  Можете пока пользоваться вот таким вот приведением типов.
[01:44:11.160 --> 01:44:12.160]  Можете сказать вот так.
[01:44:13.160 --> 01:44:15.160]  Это будет приведение типов в стиле C.
[01:44:16.160 --> 01:44:17.160]  Что?
[01:44:17.160 --> 01:44:19.160]  Потому что бывают типы, у которых размер 16.
[01:44:19.160 --> 01:44:20.160]  Например, long double.
[01:44:21.160 --> 01:44:23.160]  Ну, или там что-нибудь еще подобное.
[01:44:23.160 --> 01:44:27.160]  Обычно, ну и там int 128, int 128t.
[01:44:27.160 --> 01:44:28.160]  Ну да, например.
[01:44:29.160 --> 01:44:32.160]  100, 128, но я не уверен, он по стандарту или просто…
[01:44:32.160 --> 01:44:35.160]  Короче, на практике там будет, скорее всего, указатель кратный 16.
[01:44:36.160 --> 01:44:37.160]  Ну, там непонятно где.
[01:44:37.160 --> 01:44:38.160]  Я пока не сказал ни одного…
[01:44:39.160 --> 01:44:42.160]  Короче, это будет указатель кратный 16, и это будет указатель кратный 16.
[01:44:42.160 --> 01:44:44.160]  А вы мне скажете, что это указатель кратный 16.
[01:44:44.160 --> 01:44:47.000]  там непонятно где, я пока не сказал ни одного при…
[01:44:47.000 --> 01:44:51.280]  Короче, просто void-звёздочка это тип, который… указатель
[01:44:51.280 --> 01:44:52.440]  без уточнения на что.
[01:44:52.440 --> 01:44:53.440]  Вот.
[01:44:53.440 --> 01:44:57.400]  Он не даёт сам void-звёздочку поставать, например, к виду
[01:44:57.400 --> 01:44:58.400]  звёздочке.
[01:44:58.400 --> 01:44:59.400]  Кто не даёт?
[01:44:59.400 --> 01:45:00.400]  Ну…
[01:45:00.400 --> 01:45:03.640]  Если ты напишешь C-style приведения типов, то он скастует.
[01:45:03.640 --> 01:45:08.040]  Всё получилось.
[01:45:08.640 --> 01:45:15.760]  Так, ладно, ещё одна вещь – это null-ptr.
[01:45:15.760 --> 01:45:17.600]  Это аналог нуля для указателей.
[01:45:17.600 --> 01:45:21.560]  Если вам надо чем-то проинцелизировать указатель, ну, каким-то значением
[01:45:21.560 --> 01:45:23.280]  по умолчанию, то можно писать null-ptr.
[01:45:23.280 --> 01:45:30.000]  Вот, этот такой, как будто бы ноль, но имеющий тип
[01:45:30.000 --> 01:45:31.000]  указателя.
[01:45:31.000 --> 01:45:37.060]  Вот, в C было такое капсом слово null, вот, но оно имело
[01:45:37.060 --> 01:45:40.380]  тип не указателя, а числа, и там из-за этого какие-то
[01:45:40.380 --> 01:45:43.740]  были нехорошие проблемы.
[01:45:43.740 --> 01:45:46.180]  В общем, короче, используйте null-ptr, если вам хочется.
[01:45:46.180 --> 01:45:49.580]  А если его разыменовывать от тоже всегда R-E или тоже
[01:45:49.580 --> 01:45:50.580]  U-B?
[01:45:50.580 --> 01:45:51.580]  Кого разыменовывать?
[01:45:51.580 --> 01:45:52.580]  Null-ptr.
[01:45:52.580 --> 01:45:54.900]  Нет, формально это U-B, но на практике R-E, скорее всего.
[01:45:54.900 --> 01:45:58.540]  Это доказывает, что неявный каст это что-то не работает.
[01:45:58.540 --> 01:46:00.460]  Неявный, да, не работает, конечно.
[01:46:00.460 --> 01:46:01.780]  Явный нужен каст.
[01:46:02.780 --> 01:46:10.100]  То есть null-ptr типа null-ptr-T.
[01:46:10.100 --> 01:46:12.180]  Этот тип неявно кастуется в любой указатель.
[01:46:12.180 --> 01:46:20.500]  В void-звездочке мы можем присвоить void-звездочку либо null-ptr,
[01:46:20.500 --> 01:46:24.300]  либо нужно сделать каст из другого указателя, явный.
[01:46:24.300 --> 01:46:29.300]  Поздравляю.
[01:46:30.300 --> 01:46:35.300]  То есть в целом можно null-ptr писать null и доставать
[01:46:35.300 --> 01:46:38.300]  его явно к нашему типу.
[01:46:38.300 --> 01:46:40.700]  Вот как это работает с нулем, я, честно говоря, не очень
[01:46:40.700 --> 01:46:41.700]  понимаю.
[01:46:41.700 --> 01:46:47.100]  Это все-таки вопросы в стиле, что-то в древние времена
[01:46:47.100 --> 01:46:49.700]  какие-то костыли были, сейчас нет никаких костылей,
[01:46:49.700 --> 01:46:52.300]  не надо писать null, надо писать null-ptr просто.
[01:46:52.300 --> 01:46:55.300]  В СИ не было слова null-ptr, поэтому приходилось какие-то
[01:46:55.300 --> 01:46:58.620]  писать извращенные выражения, вида null, который на самом
[01:46:58.620 --> 01:47:01.620]  деле был вроде нулем, а вроде не нулем, то есть это
[01:47:01.620 --> 01:47:03.620]  была какая-то константа, какого-то особенного типа,
[01:47:03.620 --> 01:47:04.620]  которая...
[01:47:04.620 --> 01:47:07.620]  В общем, я не знаю, я все это не хочу знать, вы просто
[01:47:07.620 --> 01:47:10.620]  пишите null-ptr и все.
[01:47:10.620 --> 01:47:12.620]  Все, я больше ничего не хочу говорить про указатели,
[01:47:12.620 --> 01:47:17.620]  ну, точнее, про вот в рамках этой темы ничего не хочу
[01:47:17.620 --> 01:47:19.620]  говорить больше про указатели пока что.
[01:47:19.620 --> 01:47:25.620]  Вот, а сейчас мы поговорим про следующее.
[01:47:25.620 --> 01:47:29.620]  Следующая тема, ну, такая подтема, она же параграф
[01:47:29.620 --> 01:47:34.620]  2.2 будет называться виды памяти.
[01:47:34.620 --> 01:47:39.620]  Я аккуратно избегаю слова types, стараясь говорить
[01:47:39.620 --> 01:47:44.620]  синонимами, не types of memory, а kinds of memory, вот, потому
[01:47:44.620 --> 01:47:48.620]  что types, сами понимаете, может означать много, немного
[01:47:48.620 --> 01:47:49.620]  ненужного.
[01:47:49.620 --> 01:47:55.620]  Вот, значит, виды памяти.
[01:47:55.620 --> 01:48:00.620]  Сейчас будет такая немножко опять философия, как вообще
[01:48:00.620 --> 01:48:03.620]  работает программа.
[01:48:03.620 --> 01:48:06.620]  Что вообще такое компьютер?
[01:48:06.620 --> 01:48:08.620]  Вот, да.
[01:48:08.620 --> 01:48:09.620]  Что?
[01:48:09.620 --> 01:48:13.620]  Пойнтеры, указатели.
[01:48:13.620 --> 01:48:16.620]  Ну, чтобы не было у вас коллизий со словом types.
[01:48:16.620 --> 01:48:18.620]  Types означает вполне конкретный термин в языке, а я избегаю
[01:48:18.620 --> 01:48:21.620]  слова types, чтобы вы не думали, что это какие-то типы,
[01:48:21.620 --> 01:48:24.620]  прям типы из языка.
[01:48:24.620 --> 01:48:26.620]  Что такое компьютер?
[01:48:26.620 --> 01:48:28.620]  Отличный вопрос, но в переводе с английского это значит
[01:48:28.620 --> 01:48:31.620]  вычислитель, потому что компьют значит вычислять.
[01:48:31.620 --> 01:48:34.620]  Да, если вы...
[01:48:34.620 --> 01:48:41.620]  Ну, это уже издержки, так сказать.
[01:48:41.620 --> 01:48:45.620]  Ладно, что такое компьютер?
[01:48:45.620 --> 01:48:46.620]  Что такое компьютер?
[01:48:46.620 --> 01:48:48.620]  Я думаю, вы знаете все-таки.
[01:48:48.620 --> 01:48:50.620]  И, вероятно, вы все-таки знаете, что есть оперативная
[01:48:50.620 --> 01:48:51.620]  память.
[01:48:51.620 --> 01:48:53.620]  Да, в принципе, мы про это уже сегодня говорили, я повторяться
[01:48:53.620 --> 01:48:54.620]  начинаю.
[01:48:54.620 --> 01:48:57.620]  Но нас интересует вот какой вопрос.
[01:48:57.620 --> 01:49:00.620]  Сейчас, когда вы загружаете свою программу, ну, когда
[01:49:00.620 --> 01:49:03.620]  программа запускается, откуда она память берет?
[01:49:03.620 --> 01:49:04.620]  Ну, то есть, как она...
[01:49:04.620 --> 01:49:07.620]  Вот я вам говорю, вот операционная система там либо вас
[01:49:07.620 --> 01:49:10.620]  убивает, если вы по своей памяти обращаетесь, либо
[01:49:10.620 --> 01:49:13.620]  не убивает, если там, наоборот, если не по своей, либо
[01:49:13.620 --> 01:49:14.620]  нормально все, если по своей.
[01:49:14.620 --> 01:49:15.620]  А что вот это значит?
[01:49:15.620 --> 01:49:17.620]  Своя память, не своя память?
[01:49:17.620 --> 01:49:18.620]  Как это вообще...
[01:49:18.620 --> 01:49:19.620]  Что это вообще такое?
[01:49:19.620 --> 01:49:23.620]  Вот у вас программа запускается, есть у операционной системы
[01:49:23.620 --> 01:49:25.620]  огромный пул оперативной памяти, ну, там, не знаю,
[01:49:25.620 --> 01:49:26.620]  16 гигабайт.
[01:49:26.620 --> 01:49:27.620]  Вот.
[01:49:27.620 --> 01:49:32.620]  И в этой оперативной памяти, в огромной, где-то в вашей
[01:49:32.620 --> 01:49:35.620]  программе выделен кусок изначально какой-то.
[01:49:35.620 --> 01:49:38.620]  То есть, ваша программа, она же изначально запускаясь,
[01:49:38.620 --> 01:49:42.620]  какое-то подношство оперативной памяти себе резервирует.
[01:49:42.620 --> 01:49:45.620]  Ну, не она себе резервирует, а операционная система,
[01:49:45.620 --> 01:49:50.620]  запуская программу, говорит ей, вот, хорошо, я тебе для
[01:49:50.620 --> 01:49:52.620]  начала выделю вот такой кусочек оперативной памяти,
[01:49:52.620 --> 01:49:55.620]  и это будет твоя память, то есть, по адресам вот
[01:49:55.620 --> 01:49:58.620]  из диапазона от такого до такого, тебе я разрешаю
[01:49:58.620 --> 01:49:59.620]  обращаться.
[01:49:59.620 --> 01:50:03.620]  Ну, она ей прямо это не говорит, просто она операционной
[01:50:03.620 --> 01:50:06.620]  системе решает, окей, я сейчас запускаю, и значит,
[01:50:06.620 --> 01:50:08.620]  эта программа выделяет диапазон вот с такого по
[01:50:08.620 --> 01:50:09.620]  такой.
[01:50:09.620 --> 01:50:12.620]  И значит, вот адреса с такого по такой будут доступны,
[01:50:12.620 --> 01:50:15.620]  а если она обратится в ней, то я ее убью.
[01:50:15.620 --> 01:50:16.620]  Ну.
[01:50:16.620 --> 01:50:18.620]  Я правильно понимаю, что любое указательное можно
[01:50:18.620 --> 01:50:20.620]  вставать в любом указательстве?
[01:50:20.620 --> 01:50:22.620]  Ну, смотря каким способом.
[01:50:22.620 --> 01:50:23.620]  Ну, прямым способом.
[01:50:23.620 --> 01:50:26.620]  Если сишным способом, то да, но именно поэтому сишный
[01:50:26.620 --> 01:50:28.620]  способ не рекомендуется к использованию в C++.
[01:50:28.620 --> 01:50:31.620]  Сишный, нет, сишный это в круглыми скобочками вот
[01:50:31.620 --> 01:50:32.620]  так вот.
[01:50:32.620 --> 01:50:35.620]  Да, но он не рекомендуется к использованию, имеем по
[01:50:35.620 --> 01:50:37.620]  причине, потому что им можно прикосновать что угодно,
[01:50:37.620 --> 01:50:38.620]  к чему угодно.
[01:50:38.620 --> 01:50:40.620]  Так мы же и знали с нашей КМЦ.
[01:50:40.620 --> 01:50:41.620]  Нет.
[01:50:41.620 --> 01:50:42.620]  Что?
[01:50:42.620 --> 01:50:43.620]  Все, ладно, ничего.
[01:50:43.620 --> 01:50:44.620]  А, хорошо.
[01:50:44.620 --> 01:50:45.620]  Ну.
[01:50:45.620 --> 01:50:48.620]  Я хотел сказать, что еще, что я скомпилировал всю
[01:50:48.620 --> 01:50:52.620]  программу через O1, и на месте в B она уже выдала не
[01:50:52.620 --> 01:50:53.620]  двойку, кстати.
[01:50:53.620 --> 01:50:56.620]  Ну, логи, ну да, может быть.
[01:50:56.620 --> 01:50:58.620]  Да, у B круче.
[01:50:58.620 --> 01:51:01.620]  Ну, да.
[01:51:01.620 --> 01:51:02.620]  Вот.
[01:51:02.620 --> 01:51:06.620]  Ну, с оптимизацией, там какая оптимизация скорее
[01:51:06.620 --> 01:51:09.620]  всего произошла, он просто видел, что B нигде не используется,
[01:51:09.620 --> 01:51:11.620]  его можно вообще не создавать, значит, вероятно.
[01:51:11.620 --> 01:51:12.620]  Я так думаю.
[01:51:12.620 --> 01:51:13.620]  А, возможно.
[01:51:13.620 --> 01:51:14.620]  Вот, и все.
[01:51:14.620 --> 01:51:16.620]  Есть еще другой вариант, что один слишком мало,
[01:51:16.620 --> 01:51:18.620]  и она перестала reuse-ать.
[01:51:18.620 --> 01:51:21.620]  Нет, нет, он просто скорее всего видел, что B нигде
[01:51:21.620 --> 01:51:24.620]  не используется, поэтому его просто можно не создавать,
[01:51:24.620 --> 01:51:25.620]  и все.
[01:51:25.620 --> 01:51:28.620]  Ладно, так вот, значит, изначально в программе при запуске
[01:51:28.620 --> 01:51:30.620]  выделяется какой-то кусок оперативной памяти,
[01:51:30.620 --> 01:51:31.620]  небольшой.
[01:51:31.620 --> 01:51:41.620]  А, вот, он состоит из трех частей, если упрощенно
[01:51:41.620 --> 01:51:43.620]  это объяснять.
[01:51:43.620 --> 01:51:48.620]  Вот, есть три кусока оперативной памяти, который в вашей
[01:51:48.620 --> 01:51:52.620]  программе выделен изначально при запуске, состоит из,
[01:51:52.620 --> 01:51:55.620]  ну, на самом деле больше, чем трех, там эти части делятся
[01:51:55.620 --> 01:52:00.620]  еще на подчасти некоторые, но мы упрощая, скажем, что
[01:52:00.620 --> 01:52:04.620]  три частей, и они называются, я не уверен, что они у меня
[01:52:04.620 --> 01:52:07.620]  в таком порядке расположены, но они называются data, text
[01:52:07.620 --> 01:52:08.620]  и stack.
[01:52:08.620 --> 01:52:15.620]  Я сразу делаю дисклеймер, все то, что я сейчас рассказываю
[01:52:15.620 --> 01:52:16.620]  неправда.
[01:52:16.620 --> 01:52:18.620]  Ну, то есть как?
[01:52:18.620 --> 01:52:24.620]  Я вам сейчас все рассказываю на таком уровне, вот, типа,
[01:52:24.620 --> 01:52:29.620]  ну, вот, я вам, видим, смотрим на вершину айсберга, на
[01:52:29.620 --> 01:52:32.620]  самом деле там все вот примерно настолько сложнее устроено,
[01:52:32.620 --> 01:52:35.620]  но я вам рассказываю, типа, вот такое вот совсем-совсем
[01:52:35.620 --> 01:52:38.620]  новичковое представление, то есть первый взгляд на
[01:52:38.620 --> 01:52:40.620]  то, что происходит, вот.
[01:52:40.620 --> 01:52:43.620]  Постепенно там мы к этой теме будем время от времени
[01:52:43.620 --> 01:52:46.620]  возвращаться и, возможно, я буду эту картину уточнять,
[01:52:46.620 --> 01:52:49.620]  а уж совсем вы ее подробно разберете на втором курсе,
[01:52:49.620 --> 01:52:51.620]  когда как раз будете изучать низкоуровневые программирования
[01:52:51.620 --> 01:52:54.620]  и тогда вы поймете, что на самом деле тут все в сто
[01:52:54.620 --> 01:52:58.620]  раз сложнее и все устроено совсем не так и вообще вас
[01:52:58.620 --> 01:52:59.620]  обманывает весь этот год.
[01:52:59.620 --> 01:53:02.620]  Но пока я буду вас обманывать, потому что иначе ничего
[01:53:02.620 --> 01:53:03.620]  понять невозможно будет сразу.
[01:53:03.620 --> 01:53:06.620]  Давайте пока для простоты считать, что вот там три
[01:53:06.620 --> 01:53:07.620]  части есть.
[01:53:07.620 --> 01:53:08.620]  Вот.
[01:53:08.620 --> 01:53:13.620]  А что такое дата для начала?
[01:53:13.620 --> 01:53:19.620]  Дата это данные, которые ваша программа хранит перманентно,
[01:53:19.620 --> 01:53:20.620]  так сказать.
[01:53:20.620 --> 01:53:21.620]  Ну, вот, например, если у вас в программе есть какие-то
[01:53:21.620 --> 01:53:25.620]  строки, ну, то есть вы в программе там, не знаю,
[01:53:25.620 --> 01:53:29.620]  у вас программа выводит текст Дзен Питона, скажем,
[01:53:29.620 --> 01:53:30.620]  Сиао.
[01:53:30.620 --> 01:53:32.620]  Вот вы пишите Сиао, вот и дальше в кавычках длинных
[01:53:32.620 --> 01:53:33.620]  напишите длинный текст.
[01:53:33.620 --> 01:53:36.620]  Но этот текст уже должен где-то храниться при запуске
[01:53:36.620 --> 01:53:38.620]  программы, когда она его выводить будет.
[01:53:38.620 --> 01:53:40.620]  Его же даже где-то в оперативке хранить прежде чем выводить.
[01:53:40.620 --> 01:53:43.620]  Вот подобные вещи хранятся в секции дата.
[01:53:43.620 --> 01:53:47.620]  В ней еще хранятся глобальные переменные и константы,
[01:53:47.620 --> 01:53:50.620]  да, ну, глобальные тоже, локальные нет.
[01:53:50.620 --> 01:53:53.620]  Значит, в ней хранятся, ну, на самом деле, когда мы
[01:53:53.620 --> 01:53:55.620]  говорим про строки, вот такие в кавычках написанные,
[01:53:55.620 --> 01:53:57.620]  это тоже относится к глобальным константам, ну, потому что
[01:53:57.620 --> 01:54:00.620]  это некоторая статическая информация, которая в течение
[01:54:00.620 --> 01:54:02.620]  всей программы должна существовать, и к ней там
[01:54:02.620 --> 01:54:04.620]  можно время от времени обращаться.
[01:54:04.620 --> 01:54:07.620]  А также глобальные переменные, ну, и значит, ну, константы
[01:54:07.620 --> 01:54:10.620]  это тоже переменные, строго говоря.
[01:54:10.620 --> 01:54:11.620]  Вот.
[01:54:11.620 --> 01:54:15.620]  Ну, и еще кое-что, но что еще, это мы потом уточним.
[01:54:15.620 --> 01:54:17.620]  Вот, но по крайней мере вот это.
[01:54:17.620 --> 01:54:19.620]  Теперь что такое текст?
[01:54:19.620 --> 01:54:21.620]  Текст это, как вы думаете, что это?
[01:54:21.620 --> 01:54:24.620]  Это не вот эти вот в кавычках, которые.
[01:54:24.620 --> 01:54:26.620]  Это сама программа, да.
[01:54:26.620 --> 01:54:29.620]  Значит, сам машинный код программы, которая работает,
[01:54:29.620 --> 01:54:32.620]  он в оперативной памяти должен храниться, пока она работает.
[01:54:32.620 --> 01:54:33.620]  Зачем так?
[01:54:33.620 --> 01:54:35.620]  Ну, потому что, ну, а как?
[01:54:35.620 --> 01:54:37.620]  Вот процессор выполняет инструкции.
[01:54:37.620 --> 01:54:38.620]  Откуда он их берет?
[01:54:38.620 --> 01:54:41.620]  Ну, у него вариантов-то не много.
[01:54:41.620 --> 01:54:43.620]  Наверное, они где-то хранятся.
[01:54:43.620 --> 01:54:44.620]  Где?
[01:54:44.620 --> 01:54:46.620]  Ну, наверное, в оперативной памяти, потому что, ну,
[01:54:46.620 --> 01:54:48.620]  процессор подгружает очередные инструкции.
[01:54:48.620 --> 01:54:49.620]  Откуда он их подгружает?
[01:54:49.620 --> 01:54:50.620]  Откуда он их подгружает?
[01:54:50.620 --> 01:54:51.620]  Ну, из оперативной памяти.
[01:54:51.620 --> 01:54:54.620]  На самом деле, конечно, там все опять-таки в 100 раз сложнее.
[01:54:54.620 --> 01:54:56.620]  Там есть разного уровня кэши.
[01:54:56.620 --> 01:54:58.620]  То есть там 1-й уровень кэш, 2-й уровень кэш.
[01:54:58.620 --> 01:55:02.620]  Процессор там сложно подгружает из оперативки сначала в один кэш,
[01:55:02.620 --> 01:55:05.620]  потом из этого кэша в другой кэш, чтоб быстрее все было.
[01:55:05.620 --> 01:55:11.620]  Но в конечном итоге все равно их надо брать откуда-то из памяти.
[01:55:11.620 --> 01:55:13.620]  Эти инструкции машинные.
[01:55:13.620 --> 01:55:15.620]  Не из жесткого же диска их брать, правда?
[01:55:15.620 --> 01:55:17.620]  Потому что жесткого диска совсем долго.
[01:55:17.620 --> 01:55:20.620]  Когда у вас выполняемая программа ходится на жестком диске.
[01:55:20.620 --> 01:55:23.620]  Когда вы ее запускаете, она подгружается в оперативную память,
[01:55:23.620 --> 01:55:25.620]  чтобы из нее брать быстро было дальше эти инструкции.
[01:55:25.620 --> 01:55:27.620]  Вот это текст.
[01:55:27.620 --> 01:55:28.620]  Ну и стэк.
[01:55:28.620 --> 01:55:30.620]  А что такое стэк?
[01:55:30.620 --> 01:55:32.620]  Вот вы недавно реализовывали.
[01:55:41.620 --> 01:55:42.620]  Переполняется.
[01:55:43.620 --> 01:55:44.620]  В стэк?
[01:55:44.620 --> 01:55:46.620]  Это такая структура, да?
[01:55:47.620 --> 01:55:49.620]  Ну ладно, кому я это рассказываю.
[01:55:49.620 --> 01:55:54.620]  Ну на самом деле, это область, в которой хранятся локальные переменные.
[01:55:55.620 --> 01:55:58.620]  Вот, как раз локальные переменные, которые вы в мейне заводите,
[01:55:58.620 --> 01:56:02.620]  ну и там в других функциях, они хранятся в некоторой под области памяти,
[01:56:02.620 --> 01:56:04.620]  которая выделена изначально в вашей программе,
[01:56:04.620 --> 01:56:05.620]  называемой стэк.
[01:56:07.620 --> 01:56:09.620]  В дата, я же сказал.
[01:56:10.620 --> 01:56:12.620]  Тоже на стэке.
[01:56:13.620 --> 01:56:16.620]  Ну, это неопределенное, зависит от компилятора.
[01:56:16.620 --> 01:56:19.620]  Он может соптимизировать и вообще нигде ее не хранить, например.
[01:56:19.620 --> 01:56:21.620]  Он может сделать подстановку еще в момент компиляции.
[01:56:25.620 --> 01:56:28.620]  В дате хранятся глобальные переменные, глобальные константы,
[01:56:28.620 --> 01:56:33.620]  а также тексты, которые явно записаны у вас как строки,
[01:56:33.620 --> 01:56:36.620]  текстовые данные, которые в коде программы фигурируют.
[01:56:40.620 --> 01:56:41.620]  Где?
[01:56:42.620 --> 01:56:44.620]  А где они хранятся, по-твоему?
[01:56:46.620 --> 01:56:47.620]  Нет.
[01:56:50.620 --> 01:56:53.620]  Нет, глобальные переменные существуют в течение всего времени работы программы.
[01:56:53.620 --> 01:56:56.620]  И они хранятся в статической памяти.
[01:56:56.620 --> 01:56:57.620]  Вот.
[01:56:57.620 --> 01:57:02.620]  А вот эта область памяти по-другому называется static memory, статическая память.
[01:57:04.620 --> 01:57:05.620]  Конечно.
[01:57:07.620 --> 01:57:08.620]  Так.
[01:57:10.620 --> 01:57:11.620]  Эээ...
[01:57:13.620 --> 01:57:17.620]  Ну, поля вектора хранятся в статической памяти,
[01:57:17.620 --> 01:57:20.620]  а сколько ты там запросил, это уже будет...
[01:57:21.620 --> 01:57:23.620]  Сейчас мы как раз про это поговорим.
[01:57:29.620 --> 01:57:30.620]  Чего?
[01:57:31.620 --> 01:57:34.620]  Кстати, хороший вопрос про глобальный вектор.
[01:57:34.620 --> 01:57:37.620]  Если вы прямо в глобальной области видимости сразу вектор проинциализировали,
[01:57:37.620 --> 01:57:40.620]  то, может быть, он прямо этот массив и туда же и положит.
[01:57:40.620 --> 01:57:43.620]  То есть он не будет динамическую запрашивать под него.
[01:57:43.620 --> 01:57:46.620]  Вот это, кстати, хороший вопрос, я даже, честно говоря, не знаю.
[01:57:47.620 --> 01:57:49.620]  Но если он будет конст-вектор, то точно положит?
[01:57:50.620 --> 01:57:51.620]  Наверно.
[01:57:51.620 --> 01:57:53.620]  Если не конст, то не положит.
[01:57:53.620 --> 01:57:55.620]  Вот. Не знаю, если честно.
[01:57:55.620 --> 01:57:58.620]  Хороший вопрос, надо поисследовать это.
[01:57:58.620 --> 01:57:59.620]  Да, какой вопрос?
[01:57:59.620 --> 01:58:02.620]  А можно, если нифига перемен, чтобы переполнить память?
[01:58:02.620 --> 01:58:03.620]  Stack.
[01:58:03.620 --> 01:58:06.620]  А глобальные переменные, чтобы было переполнение?
[01:58:06.620 --> 01:58:07.620]  Нет.
[01:58:07.620 --> 01:58:10.620]  Ну, дата, она определяется в момент компиляции.
[01:58:11.620 --> 01:58:15.620]  То есть компилятор, компилируя вашу программу, смотрит, сколько в ней глобальных переменных
[01:58:15.620 --> 01:58:17.620]  и сколько в ней вот этих строк.
[01:58:17.620 --> 01:58:20.620]  Ну, и еще того, что он должен в статическую память положить, например,
[01:58:20.620 --> 01:58:22.620]  локальные статические переменные.
[01:58:23.620 --> 01:58:27.620]  И в зависимости от этого он как бы в бинарник прям вписывает информацию,
[01:58:27.620 --> 01:58:30.620]  что моей программе требуется столько-то даты.
[01:58:30.620 --> 01:58:32.620]  И вот какая она.
[01:58:32.620 --> 01:58:34.620]  Ну, типа это в бинаре прям прописано.
[01:58:35.620 --> 01:58:37.620]  С текстом то же самое.
[01:58:37.620 --> 01:58:39.620]  Ну да, то есть вот этот весь бинарь, он подгружается.
[01:58:39.620 --> 01:58:42.620]  То есть операционка, когда запускает, такая, окей, я запускаю.
[01:58:42.620 --> 01:58:45.620]  Значит, даты здесь нужно столько-то, текста столько-то.
[01:58:45.620 --> 01:58:48.620]  Ну, а stack стандартно 8 мегабайт.
[01:58:48.620 --> 01:58:51.620]  Вот. Значит, вот это называется статическая память.
[01:58:51.620 --> 01:58:53.620]  Это никак не называется.
[01:58:53.620 --> 01:58:58.620]  А это еще называется, ну, это называется stack-овая память или автоматическая память.
[01:58:59.620 --> 01:59:02.620]  Не путайте, пожалуйста, stack и статическую память.
[01:59:02.620 --> 01:59:07.620]  И это очень распространенная ошибка, вот, свидетельствующая о непонимании.
[01:59:07.620 --> 01:59:10.620]  Вот многие люди считают, что статическая память это и есть stack.
[01:59:10.620 --> 01:59:12.620]  Ну, как бы есть статическая память, есть динамическая память.
[01:59:12.620 --> 01:59:14.620]  Stack это, наверное, статическая. Нет.
[01:59:14.620 --> 01:59:18.620]  Stack это отдельная область памяти, не статическая, не динамическая.
[01:59:18.620 --> 01:59:20.620]  Она называется автоматическая.
[01:59:21.620 --> 01:59:22.620]  Вот.
[01:59:22.620 --> 01:59:25.620]  Статическая это вот там, где глобальные переменные хранятся,
[01:59:25.620 --> 01:59:27.620]  а также еще кое-что мы чуть позже обсуд, что.
[01:59:28.620 --> 01:59:31.620]  А вот что такое динамическая, сейчас я как раз и расскажу.
[01:59:31.620 --> 01:59:34.620]  Но сначала давайте я про stack расскажу подробнее, но.
[01:59:34.620 --> 01:59:39.620]  А вот иногда, когда происходит какая-то ошибка, вот, с выполнением stack-а, пишется еще какая-то ошибка.
[01:59:39.620 --> 01:59:42.620]  Что-то типа hip, что-то overbuff, что-то такое.
[01:59:42.620 --> 01:59:45.620]  Не знаю. Про что ты можешь мне показать, я тебе тогда скажу.
[01:59:46.620 --> 01:59:47.620]  А, да.
[01:59:48.620 --> 01:59:52.620]  Вопрос. Вот вы сказали, что, ну, понятно, если мы vector задаем как консанту,
[01:59:52.620 --> 01:59:54.620]  то сам vector в полях хранится в дате.
[01:59:54.620 --> 01:59:58.620]  Вот если мы пишем, например, конс-вектор равно там фигурной сходке.
[01:59:58.620 --> 02:00:00.620]  Где? В глобальной области?
[02:00:00.620 --> 02:00:04.620]  В глобальной области. На что, вот, и в векторе внутри указатель?
[02:00:04.620 --> 02:00:09.620]  Положится ли он в дату или положится он в динамическую память, я уже сказал, не знаю.
[02:00:09.620 --> 02:00:11.620]  Возможно, что в дату положится.
[02:00:11.620 --> 02:00:13.620]  То есть, в смысле, указатель будет указывать?
[02:00:13.620 --> 02:00:14.620]  Ну да.
[02:00:15.620 --> 02:00:17.620]  Ну, я сказал, я не знаю, если честно.
[02:00:17.620 --> 02:00:21.620]  Вот это на самом деле, это на самом деле некоторый позор мне,
[02:00:21.620 --> 02:00:25.620]  потому что, конечно, такую вещь знать надо, но я, к сожалению, не знаю.
[02:00:26.620 --> 02:00:29.620]  Да, и меня еще на камеру записали, мой позор. Да, хорошо.
[02:00:29.620 --> 02:00:31.620]  Код функ
[02:00:31.620 --> 02:00:34.620]  Код функций, конечно, в безбедарном коде хранится, да.
[02:00:36.620 --> 02:00:38.620]  Так, отставить такие вопросы, подожди.
[02:00:38.620 --> 02:00:40.620]  Лямбда функции – это объекты.
[02:00:43.620 --> 02:00:45.620]  Возвращаемся к стеку.
[02:00:46.620 --> 02:00:47.620]  Ну.
[02:00:49.620 --> 02:00:53.620]  Я еще не рассказал про динамик memory, можно, пожалуйста, я расскажу, вот так, как планировал,
[02:00:53.620 --> 02:00:55.620]  вы пока помолчите.
[02:00:55.620 --> 02:00:57.620]  Значит, стек.
[02:00:59.620 --> 02:01:01.620]  Когда мы кладем что-то на стек.
[02:01:05.620 --> 02:01:07.620]  Когда мы кладем что-то на стек.
[02:01:08.620 --> 02:01:09.620]  Что происходит?
[02:01:09.620 --> 02:01:14.620]  Ну, в ран тайме хранится там так называемый стек-поинтер.
[02:01:14.620 --> 02:01:16.620]  Ну, то есть, вот изначально стек пустой.
[02:01:16.620 --> 02:01:19.620]  Ну, опять же, не совсем пустой, там кое-что лежит.
[02:01:19.620 --> 02:01:20.620]  Ну, неважно.
[02:01:20.620 --> 02:01:24.620]  Вот изначально, когда мы заходим в функцию main, давайте считать, что стек пустой.
[02:01:24.620 --> 02:01:26.620]  Ну, это близко к правде.
[02:01:26.620 --> 02:01:30.620]  Мы дальше заводим какие-то локальные перемены.
[02:01:30.620 --> 02:01:31.620]  Вот мы завели одну переменную.
[02:01:31.620 --> 02:01:34.620]  В этот момент от стека отхапывается 4 байта.
[02:01:34.620 --> 02:01:40.620]  И, значит, теперь стек-поинтер указывает не на начало стека, а чуть правее.
[02:01:40.620 --> 02:01:41.620]  Вот.
[02:01:41.620 --> 02:01:44.620]  А адрес этой перемены, соответственно, вот такой.
[02:01:44.620 --> 02:01:49.620]  Дальше мы заводим какую-нибудь новую область едемости, вот то, как мы там это делали.
[02:01:49.620 --> 02:01:51.620]  Тут заводим B.
[02:01:52.620 --> 02:01:56.620]  И в этот момент от стека отхапывается еще 4 байта,
[02:01:56.620 --> 02:02:00.620]  стек-поинтер теперь указывает сюда, а адрес B это вот это.
[02:02:00.620 --> 02:02:04.620]  Ну, если при этом я, например, написал бы double B,
[02:02:04.620 --> 02:02:07.620]  то, как я уже говорил утром, там 4 байта пропустится,
[02:02:07.620 --> 02:02:11.620]  и только с адреса кратного 8 положится B.
[02:02:11.620 --> 02:02:12.620]  Вот.
[02:02:12.620 --> 02:02:13.620]  Подожди, пожалуйста.
[02:02:13.620 --> 02:02:14.620]  Сейчас.
[02:02:14.620 --> 02:02:16.620]  Компилятор на самом деле не обязан класть подряд.
[02:02:16.620 --> 02:02:19.620]  То есть, в рамках одной области видимости компилятор имеет право,
[02:02:19.620 --> 02:02:22.620]  и мы наблюдали это сегодня, переупорядочивать как ему удобно.
[02:02:22.620 --> 02:02:25.620]  Ну, вот даже тот пример, который я только что показывал, он это иллюстрирует.
[02:02:25.620 --> 02:02:29.620]  То есть, они не прямо подряд лежат A, B, потом C, D, E, F.
[02:02:29.620 --> 02:02:32.620]  В рамках одной области видимости компилятор имеет право
[02:02:32.620 --> 02:02:34.620]  как-то их переложить в другом порядке,
[02:02:34.620 --> 02:02:36.620]  исходя из каких-то своих внутренних соображений, почему-то он считает,
[02:02:36.620 --> 02:02:38.620]  что так эффективнее будет их разместить.
[02:02:38.620 --> 02:02:39.620]  Вот.
[02:02:39.620 --> 02:02:43.620]  Но общая идея следующая, что когда вы открываете новую область видимости,
[02:02:43.620 --> 02:02:49.620]  у вас на стэк новые перемены кладутся вот над теми, которые были в предыдущей области.
[02:02:49.620 --> 02:02:51.620]  Когда область видимости заканчивается,
[02:02:51.620 --> 02:02:54.620]  стэк, вот указатель стэка сдвигается назад,
[02:02:54.620 --> 02:02:57.620]  и эти перемены как бы недействительные.
[02:02:57.620 --> 02:02:58.620]  Вот.
[02:02:58.620 --> 02:03:01.620]  Ну, конечно же, они не затираются.
[02:03:01.620 --> 02:03:05.620]  По ним, по той памяти, реально все еще лежат те значения, которые там лежали раньше.
[02:03:05.620 --> 02:03:08.620]  Но обращение по этим адресам формально уже УБ.
[02:03:08.620 --> 02:03:09.620]  Что ты хотел спросить?
[02:03:09.620 --> 02:03:11.620]  Стэкпойнтер, он лежит в даче?
[02:03:11.620 --> 02:03:14.620]  Стэкпойнтер, он лежит нигде.
[02:03:14.620 --> 02:03:16.620]  Он хранится во время исполнения.
[02:03:16.620 --> 02:03:19.620]  Он из регистров, скорее всего, в процессоре.
[02:03:19.620 --> 02:03:21.620]  Это не какая-то статическая штука, которая...
[02:03:21.620 --> 02:03:25.620]  Это просто штука, которая во время исполнения хранится...
[02:03:26.620 --> 02:03:30.620]  Ну, он хранится прямо вот в процессоре.
[02:03:32.620 --> 02:03:34.620]  Вот.
[02:03:36.620 --> 02:03:38.620]  Так.
[02:03:39.620 --> 02:03:41.620]  Хорошо.
[02:03:41.620 --> 02:03:44.620]  Что происходит, когда вы функцию какую-нибудь вызываете?
[02:03:44.620 --> 02:03:46.620]  Допустим, у меня есть функция.
[02:03:46.620 --> 02:03:48.620]  Я ее вызываю.
[02:03:48.620 --> 02:03:51.620]  А тут еще что-то там происходит.
[02:03:52.620 --> 02:03:53.620]  Там.
[02:03:53.620 --> 02:03:55.620]  Сиаут С.
[02:03:56.620 --> 02:03:58.620]  Вот.
[02:03:58.620 --> 02:04:00.620]  Вот я вызываю Ф.
[02:04:00.620 --> 02:04:03.620]  Что в этот момент происходит?
[02:04:03.620 --> 02:04:07.620]  Ну, я проваливаюсь в новый уровень стэка.
[02:04:07.620 --> 02:04:11.620]  То есть, как бы, я перехожу на следующий уровень глубины.
[02:04:11.620 --> 02:04:14.620]  Я выхожу из этой локальной области в новую, вот сюда.
[02:04:14.620 --> 02:04:16.620]  И в этой области...
[02:04:16.620 --> 02:04:20.620]  Ну, понятно, что здесь С добавляется, да.
[02:04:20.620 --> 02:04:27.620]  И здесь, значит, С выводится.
[02:04:27.620 --> 02:04:29.620]  Я выхожу из функции обратно.
[02:04:29.620 --> 02:04:32.620]  Все, что в этой функции локально было, забывается.
[02:04:32.620 --> 02:04:34.620]  Ну, когда я делаю ретёрн из функции...
[02:04:34.620 --> 02:04:36.620]  Ну, из Void можно делать ретёрн.
[02:04:36.620 --> 02:04:38.620]  Что-то из функции, да.
[02:04:38.620 --> 02:04:41.620]  Все локальные переменные из функции снимаются со стэка.
[02:04:41.620 --> 02:04:43.620]  То есть, просто стэкпойнтер сдвигается назад.
[02:04:43.620 --> 02:04:45.620]  Настолько, насколько нужно.
[02:04:45.620 --> 02:04:48.620]  Если это были объекты, то там они уничтожаются еще.
[02:04:48.620 --> 02:04:49.620]  Вызывается сгеструктура.
[02:04:49.620 --> 02:04:50.620]  Но мы пока про это не знаем.
[02:04:50.620 --> 02:04:52.620]  Просто, значит, снимаются со стэка локальные переменные.
[02:04:52.620 --> 02:04:53.620]  Я возвращаюсь сюда.
[02:04:53.620 --> 02:04:55.620]  Стэкпойнтер обратно указывает, где он был.
[02:04:55.620 --> 02:05:00.620]  И, значит, новые переменные могут класситься, вот, затирая те, которые были тут.
[02:05:00.620 --> 02:05:02.620]  Ну, в общем, механизм понятен, я думал.
[02:05:02.620 --> 02:05:03.620]  Поэтому он называется стэк.
[02:05:03.620 --> 02:05:05.620]  По своему принципу действия.
[02:05:05.620 --> 02:05:06.620]  Вот.
[02:05:10.620 --> 02:05:11.620]  Вопрос.
[02:05:11.620 --> 02:05:13.620]  Вот, если я...
[02:05:15.620 --> 02:05:17.620]  Сейчас как бы так спросить, чтоб это было...
[02:05:17.620 --> 02:05:20.620]  Чтоб ответ был не очевиден, но в то же время вопрос понятен.
[02:05:20.620 --> 02:05:22.620]  Значит, ну, вот.
[02:05:23.620 --> 02:05:24.620]  Хорошо.
[02:05:24.620 --> 02:05:30.620]  Когда я вызываю функцию, как процессор...
[02:05:30.620 --> 02:05:31.620]  Ну, то есть, исполнение.
[02:05:31.620 --> 02:05:35.620]  Как процессор понимает, в какое место кода ему прыгнуть?
[02:05:35.620 --> 02:05:38.620]  Ну, то есть, это же некоторые машинные коды, правильно?
[02:05:38.620 --> 02:05:41.620]  Мы идем, идем, идем, исполняем инструкцию, дальше вызов функции происходит.
[02:05:41.620 --> 02:05:46.620]  Как процессор понимает, на какое место исполняемой коды ему прыгнуть, чтоб эту функцию начать исполнять?
[02:05:46.620 --> 02:05:47.620]  Ну, как?
[02:05:47.620 --> 02:05:50.620]  Это просто написано в коде программы.
[02:05:50.620 --> 02:05:52.620]  Там написано jump вот сюда-то.
[02:05:52.620 --> 02:05:56.620]  Потому что, когда компилятор компилирует, он все вызовы функции превращает...
[02:05:56.620 --> 02:06:00.620]  Ну, на самом деле, это делает линковщик, но можно считать, что компилятор пока.
[02:06:00.620 --> 02:06:04.620]  Он все вызовы функции превращает в инструкции вида прыгни на такую-то...
[02:06:04.620 --> 02:06:07.620]  На такой-то адрес памяти, исполняя инструкции дальше оттуда.
[02:06:07.620 --> 02:06:08.620]  Вот.
[02:06:08.620 --> 02:06:10.620]  А вот теперь вопрос.
[02:06:10.620 --> 02:06:16.620]  А как процессор, когда заканчивается функция, понимает, куда прыгнуть ему обратно, чтобы продолжить оттуда, откуда он был вызван?
[02:06:22.620 --> 02:06:23.620]  Да.
[02:06:23.620 --> 02:06:24.620]  Куда?
[02:06:24.620 --> 02:06:27.620]  Как он понимает обратно, куда прыгнуть?
[02:06:27.620 --> 02:06:28.620]  Вот именно.
[02:06:29.620 --> 02:06:30.620]  Вот именно.
[02:06:30.620 --> 02:06:35.620]  Когда вы вызываете функцию, понятно, куда прыгнуть, потому что это прямо в коде написано.
[02:06:35.620 --> 02:06:37.620]  Но вы же можете вызывать функцию из разных мест.
[02:06:37.620 --> 02:06:41.620]  И когда вы заканчиваете исполнение функции процессору, чтобы понять, куда вернуться,
[02:06:41.620 --> 02:06:46.620]  нужно где-то знать адрес места, из которого вы прыгнули сюда.
[02:06:46.620 --> 02:06:50.620]  Адрес той инструкции, с которой вы прыгнули начать исполнять эту функцию.
[02:06:50.620 --> 02:06:51.620]  И как он это понимает?
[02:06:51.620 --> 02:06:54.620]  А этого ему тоже на стеке сохранить надо.
[02:06:54.620 --> 02:06:56.620]  Поэтому это называется stack вызовов.
[02:06:56.620 --> 02:06:57.620]  Call stack.
[02:07:03.620 --> 02:07:04.620]  Stack вызовов.
[02:07:04.620 --> 02:07:10.620]  У вас на самом деле при каждом вызове функции на stack записывается еще и pointer дополнительно.
[02:07:10.620 --> 02:07:18.620]  Это pointer на ту инструкцию кода, в которую нужно вернуться, когда вы назад из функции будете возвращаться.
[02:07:18.620 --> 02:07:23.620]  Поэтому даже если вы функцию вызываете без параметров, если функция была с параметрами,
[02:07:23.620 --> 02:07:25.620]  то параметры тоже бы на stack положились.
[02:07:25.620 --> 02:07:31.620]  Но даже если вы функцию вызываете без параметров, каждый вызов функции это плюс как минимум один pointer на stack.
[02:07:32.620 --> 02:07:33.620]  Понятно?
[02:07:33.620 --> 02:07:34.620]  Адрес возврата.
[02:07:35.620 --> 02:07:40.620]  Ну на самом деле там кроме этого еще много чего лежит.
[02:07:43.620 --> 02:07:51.620]  Да, про inline я расскажу чуть позже, вероятно не сегодня, но значит в следующий раз про inline мы поговорим, что-то такое inline.
[02:07:51.620 --> 02:07:52.620]  Вот.
[02:07:52.620 --> 02:07:58.620]  Ну да, то есть каждый вызов функции как минимум один pointer на stack.
[02:07:59.620 --> 02:08:00.620]  Вот.
[02:08:00.620 --> 02:08:04.620]  Что происходит, когда я вот так делаю?
[02:08:10.620 --> 02:08:11.620]  Бесконечная рекурсия.
[02:08:11.620 --> 02:08:12.620]  Бесконечная рекурсия.
[02:08:12.620 --> 02:08:13.620]  Я создал бесконечную рекурсию.
[02:08:13.620 --> 02:08:14.620]  Что будет?
[02:08:14.620 --> 02:08:28.620]  Да, если я делаю вот такое, ну даже если я здесь ничего не объявляю нового, бесконечная рекурсия это значит, что каждый вызов функции плюс один pointer на stack кладет.
[02:08:28.620 --> 02:08:32.620]  И это значит, что в runtime просто произойдет следующее.
[02:08:32.620 --> 02:08:37.620]  Мы будем бесконечно вот этот вот stack занимать, занимать, занимать.
[02:08:37.620 --> 02:08:40.620]  В какой-то момент stack закончится.
[02:08:40.620 --> 02:08:42.620]  А размер stack фиксирован изначально.
[02:08:42.620 --> 02:08:44.620]  Он равен, как правило, 8 мегабайт.
[02:08:45.620 --> 02:08:48.620]  Вы можете в линуксе посмотреть, чему равен размер вашего stack.
[02:08:48.620 --> 02:08:50.620]  Для этого надо написать u limit – s.
[02:08:51.620 --> 02:08:52.620]  Вот.
[02:08:56.620 --> 02:08:59.620]  А как это все с go2 работает?
[02:09:03.620 --> 02:09:05.620]  Ну, go2 работает.
[02:09:05.620 --> 02:09:18.620]  Go2 – это просто, ну как, если вы используете go2, то у вас просто каждая метка, которую вы ставите в программе компилятором транслируется в какой-то адрес и соответствующий инструкции.
[02:09:18.620 --> 02:09:24.620]  Когда вы пишете go2 – это метка, ну компилятор это превращает в jump на такой-то адрес, такую-то инструкцию.
[02:09:24.620 --> 02:09:27.620]  То есть, если u limit – это 8 тысяч, тогда он может максимум 8 тысяч?
[02:09:27.620 --> 02:09:32.620]  Нет, u limit – 8 тысяч – это и знать, что у вас 8 мегабайт, потому что он в килобайтах выводит.
[02:09:32.620 --> 02:09:35.620]  Там можно man почитать и посмотреть, какие у него дополнительные параметры.
[02:09:35.620 --> 02:09:36.620]  Да, что?
[02:09:36.620 --> 02:09:41.620]  Если мы запустим программу local, то она только 8 мегабайт может съесть?
[02:09:41.620 --> 02:09:47.620]  Да, если вы запустим программу обычным образом, то stack в ней ограничен 8 мегабайтами.
[02:09:47.620 --> 02:09:49.620]  Ну, как правило, 8 мегабайтами.
[02:09:49.620 --> 02:09:50.620]  А если через terminal запускать?
[02:09:50.620 --> 02:09:54.620]  Да неважно, через что запускать. Stack в операционной системе – это глобальное ограничение.
[02:09:54.620 --> 02:09:59.620]  Stack программы ограничена 8 мегабайтами. Это ограничение на уровне операционной системы.
[02:09:59.620 --> 02:10:03.620]  Так, да, логичный вопрос. Если я отгару, задаю там вектор…
[02:10:03.620 --> 02:10:05.620]  Отгадай, сам догадайся, какой ответ…
[02:10:05.620 --> 02:10:06.620]  А, ты в text-классе?
[02:10:06.620 --> 02:10:07.620]  Конечно!
[02:10:07.620 --> 02:10:08.620]  А куда?
[02:10:08.620 --> 02:10:09.620]  В динамическую память внезапно.
[02:10:09.620 --> 02:10:10.620]  Ой, блин!
[02:10:10.620 --> 02:10:13.620]  Вот это поворот, да?
[02:10:13.620 --> 02:10:18.620]  Сейчас, а возможно ли как-то изменять размер стека для…
[02:10:18.620 --> 02:10:21.620]  Можно, но это делается в разных операционках по-разному.
[02:10:21.620 --> 02:10:25.620]  В Ubuntu это делается довольно непросто.
[02:10:25.620 --> 02:10:28.620]  Ну, то есть, короче…
[02:10:28.620 --> 02:10:32.620]  В общем, можно, но не сейчас про это.
[02:10:35.620 --> 02:10:37.620]  Если вы знаете, как, я рад за вас.
[02:10:37.620 --> 02:10:40.620]  Но давайте сейчас пока не будем это обсуждать.
[02:10:40.620 --> 02:10:47.620]  Значит, можно изменять stack, можно изменять stack, запрашивать у операционной системы конкретно для данной программы другой размер стека,
[02:10:47.620 --> 02:10:51.620]  но это слишком глубокие уже детали, мы сейчас не будем обсуждать.
[02:10:51.620 --> 02:10:55.620]  Мы считаем, что stack фиксированный равен, как правило, 8 мегабайт.
[02:10:55.620 --> 02:11:04.620]  И это означает, что вам подразумевается, что этого должно хватить для хранения всех локальных переменных и стека вызовов функций.
[02:11:04.620 --> 02:11:09.620]  Ну, если в вашей программе stack вызовов больше, чем 8 мегабайт, то явно что-то не то.
[02:11:09.620 --> 02:11:14.620]  Ну, не должно быть в программе локальных переменных и вызовов функций больше, чем на 8 мегабайт.
[02:11:14.620 --> 02:11:19.620]  У вас уровень глубины рекурсии порядка миллиона, это явно что-то не то.
[02:11:23.620 --> 02:11:26.620]  Ну, короче, считается, что 8 мегабайт достаточно.
[02:11:26.620 --> 02:11:29.620]  И на практике его реально достаточно всегда.
[02:11:29.620 --> 02:11:37.620]  Ну, то есть я не знаю реально случаев практически, когда бы нужно было использовать больше стека, чем 8 мегабайт.
[02:11:37.620 --> 02:11:41.620]  Ладно, знаю, знаю один случай, знаю один случай.
[02:11:41.620 --> 02:11:42.620]  Знаю один случай.
[02:11:42.620 --> 02:11:44.620]  Во втором семестре мы его выбрали.
[02:11:44.620 --> 02:11:46.620]  Короче, бывают, но редко.
[02:11:50.620 --> 02:11:51.620]  И что проводят?
[02:11:51.620 --> 02:11:53.620]  И при чем тут stack?
[02:11:53.620 --> 02:11:55.620]  Ну, допустим, там вектор какого-то большого размера.
[02:11:55.620 --> 02:11:57.620]  Да вектор не на stack хранится.
[02:11:57.620 --> 02:11:59.620]  Ну, я же вам говорю.
[02:11:59.620 --> 02:12:01.620]  Когда вы зовете вектор, он не на stack кладется.
[02:12:01.620 --> 02:12:03.620]  В этом и прикол вектора. Вы понимаете?
[02:12:06.620 --> 02:12:10.620]  Ну, вот если у вас огромный DFS на миллион, то, вероятно, что-то не то.
[02:12:10.620 --> 02:12:13.620]  Ну, короче, просто поверьте.
[02:12:13.620 --> 02:12:16.620]  Как правило, stack больше 8 мегабайт не нужен.
[02:12:16.620 --> 02:12:18.620]  Ну, не просто же так такое ограничение выставили.
[02:12:18.620 --> 02:12:21.620]  Наверное, потому что реально не нужно больше 8 мегабайт.
[02:12:21.620 --> 02:12:25.620]  Если нужно, есть возможность это ручками подправить для конкретной ситуации.
[02:12:25.620 --> 02:12:27.620]  Но это очень редко отбывает нужно.
[02:12:27.620 --> 02:12:28.620]  Что?
[02:12:36.620 --> 02:12:39.620]  Ну, операционка, насколько я знаю, для всех программ stack одинаковый.
[02:12:39.620 --> 02:12:40.620]  Stack одинаковый.
[02:12:40.620 --> 02:12:42.620]  Можно глобально изменить размер stack для всех.
[02:12:42.620 --> 02:12:44.620]  Можно изменить размер stack.
[02:12:44.620 --> 02:12:46.620]  Давайте не будем про это.
[02:12:46.620 --> 02:12:48.620]  Ну, то есть можно много чего...
[02:12:58.620 --> 02:13:00.620]  Что такое программа?
[02:13:02.620 --> 02:13:05.620]  Ну, для каждого процесса у тебя свой stack.
[02:13:05.620 --> 02:13:06.620]  Хорошо.
[02:13:06.620 --> 02:13:08.620]  Куча тоже своя.
[02:13:08.620 --> 02:13:10.620]  Конечно, а как?
[02:13:10.620 --> 02:13:13.620]  А ты думаешь они, типа, отделят ее?
[02:13:13.620 --> 02:13:15.620]  Делись.
[02:13:15.620 --> 02:13:17.620]  Так.
[02:13:17.620 --> 02:13:19.620]  Так вот теперь динамическая память.
[02:13:19.620 --> 02:13:21.620]  Что делать, если вам stack не хватает?
[02:13:21.620 --> 02:13:26.620]  Ну, вот вы же наверняка в своей жизни, Виктора, заводили и побольше, чем на миллион интов.
[02:13:26.620 --> 02:13:28.620]  Конечно.
[02:13:28.620 --> 02:13:32.620]  Кто бы сомневался, особенно ты, да уж куда-то, конечно, заводил.
[02:13:32.620 --> 02:13:34.620]  Да? Ну, хорошо.
[02:13:35.620 --> 02:13:37.620]  И как же они работают?
[02:13:37.620 --> 02:13:41.620]  Ну, дело в том, что вектор, это как раз динамический массив.
[02:13:41.620 --> 02:13:43.620]  Он потому и динамический, что в динамической памяти хранится.
[02:13:43.620 --> 02:13:45.620]  Что такое динамическая память?
[02:13:45.620 --> 02:13:49.620]  Это вы можете в рантайме, и вот сейчас мы приходим к разговору.
[02:13:49.620 --> 02:13:53.620]  Второй раз мы упоминаем термин статический против динамического.
[02:13:53.620 --> 02:13:55.620]  Статический у нас была до этого типизация.
[02:13:55.620 --> 02:13:56.620]  Что значит статический?
[02:13:56.620 --> 02:13:58.620]  Значит в compile-time известный.
[02:13:58.620 --> 02:14:01.620]  Динамический это значит, который в рантайме только происходит.
[02:14:01.620 --> 02:14:03.620]  Что такое динамическая память?
[02:14:03.620 --> 02:14:06.620]  Это память, которая запрашивается в рантайме вашей программы.
[02:14:06.620 --> 02:14:08.620]  Изначально вашей программе дано вот столько.
[02:14:08.620 --> 02:14:10.620]  Но ваша программа, разумеется, может захотеть больше.
[02:14:10.620 --> 02:14:13.620]  Она говорит, мне нужно массив на миллион интов.
[02:14:13.620 --> 02:14:16.620]  Дай, пожалуйста, мне еще миллион, там, еще 4 мегабайта.
[02:14:16.620 --> 02:14:17.620]  Говорите вы операционной системе.
[02:14:17.620 --> 02:14:20.620]  Операционная система, окей, подожди.
[02:14:20.620 --> 02:14:21.620]  Держи.
[02:14:21.620 --> 02:14:22.620]  Вот.
[02:14:22.620 --> 02:14:24.620]  Ну, примерно так это происходит.
[02:14:24.620 --> 02:14:28.620]  То есть, когда вам нужна динамическая память, вы вызываете некоторую функцию,
[02:14:28.620 --> 02:14:29.620]  которая…
[02:14:29.620 --> 02:14:34.620]  Вы вызываете некоторый оператор, который с очереди вызывает некоторую функцию,
[02:14:34.620 --> 02:14:36.620]  которая с очереди вызывает еще некоторую функцию в стандартной библиотеке,
[02:14:36.620 --> 02:14:40.620]  которую с очередь передает управление ядру операционной системы,
[02:14:40.620 --> 02:14:45.620]  которая что-то делает и в конце возвращает вам указатель.
[02:14:45.620 --> 02:14:51.620]  Этот указатель – это новая для вас память, которая не дата, не текст, не стека, где-то вовне.
[02:14:51.620 --> 02:14:53.620]  Опять же, я вас обманываю.
[02:14:53.620 --> 02:14:54.620]  На самом деле все сложнее.
[02:14:54.620 --> 02:14:57.620]  Но давайте считать, что так.
[02:14:57.620 --> 02:15:04.780]  считать что это так это будет лучше всем от этого если указатель равен нулю он лежит сам в
[02:15:04.780 --> 02:15:10.620]  начале вот всего вот это все вот этой указатель равен нулю он не нет он просто это просто это
[02:15:10.620 --> 02:15:13.820]  адреса начинаются с какого-то непонятного числа и заканчивается каким-то непонятным
[02:15:13.820 --> 02:15:21.780]  что это отрезок нет весь отрезок в компьютере а в смысле зависит от програды зависит от
[02:15:21.780 --> 02:15:26.140]  ситуации ты запускаешь программу операционка такая так что тут у меня свободно вот этот кусок
[02:15:26.140 --> 02:15:47.980]  ну вся наверное с нуля ну отгадай что тогда будет а именно сек фолд сек фолд это как раз и есть
[02:15:47.980 --> 02:15:53.620]  ситуация когда вы обращаетесь по указателю вне этого отрезка и вне того что вам операционка
[02:15:53.660 --> 02:15:59.220]  дополнительно выделил динамически но что да что произойдет когда вот здесь
[02:15:59.220 --> 02:16:09.340]  происходит тековая flow к чему это приводит ну если вы попытаетесь туда что-то записать
[02:16:09.340 --> 02:16:15.700]  это все равно будет сек фолд потому что текст вам только начнение доступен скорее всего я думаю
[02:16:15.700 --> 02:16:29.940]  да не уверен я не пробовал но наверное можно вот что и в дефе это вообще не относится это
[02:16:29.940 --> 02:16:36.140]  это при процессе причем тут и в деф я ничего не понимаю нет я ничего не понимаю хорошо вот
[02:16:36.140 --> 02:16:39.060]  когда вы делаете бесконечную рекурсию чего это приводит это приводит к тому что вы
[02:16:39.060 --> 02:16:44.620]  приполняете стэк происходит ошибка называемая стэк оверфлоу но к чему она приводит реальность
[02:16:44.620 --> 02:16:49.500]  стэк оверфлоу это ситуация когда вы переполнили стэк либо вы слишком много завели локальных
[02:16:49.500 --> 02:16:54.940]  переменных но это постараться надо на 8 мегабайт завести локальных переменных либо вы переполнили
[02:16:54.940 --> 02:17:00.380]  стэк вызовов тогда вы в какой-то момент начнете ходить по минному полю ну то есть какое-то время
[02:17:00.380 --> 02:17:05.900]  после переполнения стэка вы еще не схватите сек фолд ну потому что там сложные механизмы
[02:17:05.900 --> 02:17:11.180]  операционная система там у вас есть некоторые зазор по которому еще можно наступать там какие-то
[02:17:11.180 --> 02:17:17.720]  там страницы и стам в какой-то момент вы начнете наступать куда нельзя, но это минное поле в какой-то
[02:17:17.720 --> 02:17:23.140]  момент вы наступите и вас убьют потому что вы наступили на то, что операционная система уже считает не
[02:17:23.140 --> 02:17:32.100]  ваши чужое нет можно наступить на страницы которые вам выделено но страницы они чуть
[02:17:32.100 --> 02:17:35.660]  шире чем на самом деле стэк и еще там есть разные
[02:17:35.660 --> 02:17:41.660]  другие механизмы в общем уб просто и все вот на уровне
[02:17:41.660 --> 02:17:45.100]  на уровне понимание наш на уровне абстракции плюсов
[02:17:45.100 --> 02:17:48.300]  я говорил что мы живем в мире c++ у нас есть термин
[02:17:48.300 --> 02:17:52.540]  уб вот термином уб описываются все ситуации вида я сделал
[02:17:52.540 --> 02:17:54.780]  что-то запрещенное по отношению к операционной системе
[02:17:54.780 --> 02:17:58.180]  вот в стандарте c++ нет никакой никакой терминологии
[02:17:58.180 --> 02:18:02.900]  вида там сек фолт или там что-то там значит флотинг
[02:18:02.900 --> 02:18:05.940]  поет exception в стандарте c++ отсутствуют в принципе
[02:18:05.940 --> 02:18:09.480]  такие термины это термины уровня операционности уровня
[02:18:09.480 --> 02:18:13.860]  ниже стандарт c++ лишь говорит вы обязаны так не делать
[02:18:13.860 --> 02:18:17.500]  а если так делаете уб на практике я говорю что происходит
[02:18:17.500 --> 02:18:20.740]  вот соответственно стандартом говорит вы обязаны не превышать
[02:18:20.740 --> 02:18:23.780]  глубину стэка который вам выделен изначально а если
[02:18:23.780 --> 02:18:28.460]  превышаете уб вот так вот динамическая память что
[02:18:28.460 --> 02:18:30.540]  что такое динамическая память ну это значит способ
[02:18:30.540 --> 02:18:32.380]  запросить дополнительно к тому что у вас есть еще
[02:18:32.380 --> 02:18:38.260]  памяти как это делается и вот для этого существует
[02:18:38.260 --> 02:18:46.020]  оператор нью как это пишется вы пишете ин звездочка ну
[02:18:46.020 --> 02:18:52.220]  допустим мне нужно еще инт ин звездочка п равно нью
[02:18:52.220 --> 02:18:58.260]  инт вот прям так а почему у нас в задачах ничего не
[02:18:58.260 --> 02:19:01.460]  ломается нам выдают большой стэк ну то есть мы даем
[02:19:01.460 --> 02:19:07.820]  задачу где там ну dfs на 1.6 ну прием на самом деле 1.6
[02:19:07.820 --> 02:19:14.700]  значит в контесте у вас вероятно стэк действительно
[02:19:14.700 --> 02:19:19.140]  специально увеличен ну возможно в контесте в настройках
[02:19:19.140 --> 02:19:23.300]  просто стоит прикомпиляция флаг чтобы сразу запласть
[02:19:23.300 --> 02:19:25.220]  ну не прикомпиляции может быть прикомпиляция может
[02:19:25.220 --> 02:19:31.740]  при запуске чтобы стэк был побольше может быть вот
[02:19:31.740 --> 02:19:36.900]  так вот ин звездочка п равно нью инт оператор нью у
[02:19:36.900 --> 02:19:39.780]  него такой синтаксис вы пишете нью пробел дальше
[02:19:39.780 --> 02:19:43.420]  название типа а дальше опционально вы можете написать в круглых
[02:19:43.420 --> 02:19:47.540]  скобочках чему равенны ну то есть 5 например да значит
[02:19:47.540 --> 02:19:51.900]  вы создали новый инт 1инт за значением 5 то есть создали
[02:19:51.900 --> 02:19:57.340]  инт сразу принцелизировали пятеркой вот оператор
[02:19:57.340 --> 02:20:00.940]  нью возвращает вам указатель на t где t вот этот тип который
[02:20:00.940 --> 02:20:07.500]  вы тут назвали что он делает в реальности он ну тут уже
[02:20:07.500 --> 02:20:14.460]  мы опускаемся на низкий уровень что происходит ну
[02:20:14.460 --> 02:20:16.020]  как я уже сказал вызывается некоторая библиотечная
[02:20:16.020 --> 02:20:18.140]  функция которая там еще вызывает мне в свою очередь
[02:20:18.140 --> 02:20:20.980]  некоторую библиотечную функцию которая в конечном счете
[02:20:20.980 --> 02:20:23.900]  передает управление ядру операционной системы то
[02:20:23.900 --> 02:20:26.660]  есть на самом деле когда вы вызываете нью ваша программа
[02:20:26.660 --> 02:20:33.740]  на маленькую долю секунды прерывается ну она опять
[02:20:33.740 --> 02:20:35.780]  же не совсем правда ну давайте считай что правда то
[02:20:35.780 --> 02:20:39.660]  есть когда вы запрашиваете нью вы на самом деле говорите
[02:20:39.660 --> 02:20:42.740]  так а теперь мне нужна еще память поэтому операционная
[02:20:42.740 --> 02:20:47.140]  система дай мне еще операционной и все и и отдаете управление
[02:20:47.140 --> 02:20:49.940]  ей операционная система что-то делает и возвращает
[02:20:49.940 --> 02:20:53.540]  управление вам в какой-то момент держи вот тебе указатель
[02:20:53.540 --> 02:20:57.540]  динамическая да так у нее вся оперативная память
[02:20:57.540 --> 02:20:59.740]  распоряжение операционная система на той операционной
[02:20:59.740 --> 02:21:02.140]  системы что распоряжается всеми ресурсами компьютера
[02:21:02.140 --> 02:21:09.540]  вот в том числе да она всем распоряжается а вами
[02:21:09.740 --> 02:21:20.300]  может вас убить как мы уже выяснили вот ну можно но не сейчас обязательно есть
[02:21:20.300 --> 02:21:30.980]  мир в труху но потом можно перегрузить оператор нью но потом значит хорошо
[02:21:30.980 --> 02:21:35.540]  теперь когда вы так написали у вас п это некоторые указатель под которым 4
[02:21:35.740 --> 02:21:41.620]  вам принадлежит если вы обратитесь хоть на байт влево или вправо от этого п это убе конечно же
[02:21:41.620 --> 02:21:51.940]  вот дальше ну можно поэтому указатель менять значение понятно там звездочка
[02:21:51.940 --> 02:21:55.660]  п присвоить один ну то есть все вот поэтому указатель лежит инты вы можете спокойно с
[02:21:55.660 --> 02:22:02.380]  ним работать когда вам эта память перестает быть нужна вы обязательно должны сделать
[02:22:02.380 --> 02:22:12.380]  противоположное действие а именно вызвать оператор дилит вы пишете дилит п дилит п это
[02:22:12.380 --> 02:22:17.900]  ключевое слово дилит это ключевое слово нею это ключевое слово то есть зарезервированные
[02:22:17.900 --> 02:22:25.780]  слова языка дилит п этот вызов в свою очередь противоположные симметричные функции которые
[02:22:25.780 --> 02:22:31.220]  обратной функции скажем так которая говорит операционная система все считает что я освободил
[02:22:31.220 --> 02:22:38.140]  она такая окей ну там в свою очередь что-то происходит и все управление возвращается
[02:22:38.140 --> 02:22:40.780]  оператор дилит ничего не возвращает то есть не возвращаемый тип void
[02:22:40.780 --> 02:22:52.700]  давайте в перерыве после пары мы пора это поговорим я не хочу сейчас честно на такие
[02:22:52.700 --> 02:23:01.180]  вопросы отвечать давай давай пока что-нибудь нормального обсуждать они вот это так хорошо
[02:23:01.180 --> 02:23:12.940]  вот вот здесь есть такой важный момент а мы подошли к одной из важных развилок таких вот знаете
[02:23:12.940 --> 02:23:20.900]  вот вот вы когда идете по дорожке по тропинке в лесу бывают роковые повороты что вот да бывает
[02:23:20.900 --> 02:23:28.420]  вы значит вот ну как бы вы сейчас один из тех моментов когда определяется наша судьба на ближайший
[02:23:28.420 --> 02:23:37.900]  год вот что я имею в виду ну я имею в виду что в других языках все не так и вот это не так оно
[02:23:37.900 --> 02:23:45.060]  феноменально совершенно образом меняет весь стиль программирования на этих языках когда вы
[02:23:45.060 --> 02:23:50.860]  так делаете в джаве вам не надо писать никакой дилит там вообще нет такого слова дилит ну или
[02:23:50.860 --> 02:23:55.260]  в си шарпе когда вы так делаете и вообще когда вы делаете так в нормальных языках нет никакого
[02:23:55.260 --> 02:24:02.700]  дилит вот это очень такой это ключевой момент ну я уж не говорю что в джаве вообще и указателей
[02:24:02.700 --> 02:24:10.580]  то нет и там вот но это не так критично критично что нет оператора дилит как и в питоне нет
[02:24:10.580 --> 02:24:17.620]  ничего подобного в языках которые скажем так попроще эта конструкция совершенно не так выглядит
[02:24:17.620 --> 02:24:21.860]  когда вам нужна динамическая память вы просто говорите new и все больше вы не паритесь на этот
[02:24:21.860 --> 02:24:27.540]  счет в плюсах не так в плюсах вы обязаны сами освобождать всю память которую когда-либо
[02:24:27.540 --> 02:24:34.460]  запросили у вас отсутствует так называемый сборщик мусора как устроено выделение динамической
[02:24:34.460 --> 02:24:40.420]  памяти в джаве и в прочих языках например си шарпе с сборкой мусора когда вы говорите new ну
[02:24:40.500 --> 02:24:46.800]  вам выделяется память но у вас в runtime параллельно с вами всегда незаметно от вас работает еще
[02:24:46.800 --> 02:24:52.740]  некоторая некоторая ну так скажем под процесс что ли который следит сам за тем сколько вы
[02:24:52.740 --> 02:24:58.140]  выделили используете ли вы то что вы выделили и когда он замечает из некоторых соображений что
[02:24:58.140 --> 02:25:01.860]  все кажется вы больше это не используете то есть когда вы потеряли все ссылки указатели на то
[02:25:01.860 --> 02:25:08.780]  что вы выделили он сам делает дилит это называется сборщик мусора гарбач коллектор вот в джаве в
[02:25:08.780 --> 02:25:13.100]  этом самом в шарпе и в питоне и вообще во всех нормальных языках есть garbage
[02:25:13.100 --> 02:25:19.900]  коллекторы они garbage коллектор это средство языка которая незаметно от вас
[02:25:19.900 --> 02:25:23.820]  работает во вран тайме всегда вы не садите ну его кажется можно отключить там
[02:25:23.820 --> 02:25:27.700]  каким-то хитрым спор питоне кажется есть функции который отключает garbage
[02:25:27.700 --> 02:25:32.340]  коллектор но по умолчанию он работает и он замедляет выполнение вашей программы
[02:25:32.340 --> 02:25:37.860]  незаметно для вас но он следит за тем что вы все что выделили освободить и не
[02:25:37.860 --> 02:25:43.420]  используете освободилась бы понимаете а в плюсах нет понятно почему нет потому
[02:25:43.420 --> 02:25:49.300]  что мы за эффективность топим вот но это критический момент из-за которого
[02:25:49.300 --> 02:25:54.540]  программируем на плюсах становится там раза в два сложнее потому что всякий раз
[02:25:54.540 --> 02:25:59.620]  когда вы написали new и либо забыли сделать delete либо сделали лишний раз
[02:25:59.620 --> 02:26:05.780]  delete у вас большие проблемы всякий раз когда вы сделали new и забыли написать
[02:26:05.780 --> 02:26:11.420]  delete вы отжираете операционки кусок оперативной памяти который пропадает как
[02:26:11.420 --> 02:26:17.620]  бы без вести что называется нет до тех пор пока программа ваша не убьется то
[02:26:17.620 --> 02:26:20.740]  есть когда программа завершается операционка подчищает операционка то
[02:26:20.740 --> 02:26:25.380]  помнить что она вам отдала она подчищает но если у вас сервер который
[02:26:25.380 --> 02:26:30.820]  работает круглосуточно и вы в нем где-то делаете new вот например если у
[02:26:30.820 --> 02:26:37.100]  вас программа выка звонки которая где я сейчас ну и вы там делаете new
[02:26:37.100 --> 02:26:40.980]  которая у вас бывало когда-нибудь такое ну ладно выка звонки вот например
[02:26:40.980 --> 02:26:44.780]  одно фотошоп он тоже на плюсах кстати написано по моему у вас бывало когда
[02:26:44.780 --> 02:26:48.860]  не такое что в фотошопе работаете и вдруг ни с того ни с сего оперативная
[02:26:48.860 --> 02:26:53.780]  память вот так вот вот начинает расти расти расти расти используя оперативной
[02:26:53.780 --> 02:27:01.500]  памяти бывало да такое ну скорее всего скорее всего это потому что там где-то
[02:27:01.500 --> 02:27:06.420]  не уделается от элит забывая ну то есть там что-то происходит и где-то и в
[02:27:06.420 --> 02:27:10.340]  виду того что слишком сложный код забывается сделать дилет для как для
[02:27:10.340 --> 02:27:14.620]  какого-то нью и оно там происходит в цикле и все пока программа работает у
[02:27:14.620 --> 02:27:21.620]  вас оперативная память занимается все но не отдается обратно вот я не знаю ты
[02:27:21.620 --> 02:27:26.380]  что я думаю швадоби работаю что ли ну я не знаю это эти баги они время от
[02:27:26.380 --> 02:27:31.660]  времени возникают в больших проектах там раз там в какое-то время ну есть
[02:27:31.660 --> 02:27:35.860]  какой-то баг по фиксе какой-то может нет то есть у вас может быть миллион
[02:27:35.860 --> 02:27:39.300]  мест где вызывается нью и во всех них вы должны сами проследить что дилет
[02:27:39.300 --> 02:27:48.260]  вызывается ровно один раз не больше не меньше и вовремя да что статический
[02:27:48.260 --> 02:27:52.100]  массив как следует из названия выделяется на статической памяти если
[02:27:52.100 --> 02:27:55.460]  имеешь ввиду массив который объявлен локально то он не статический он
[02:27:55.460 --> 02:28:02.900]  выделяется на стэке если напишешь статик инт а то это будет статической
[02:28:02.900 --> 02:28:11.500]  памяти если просто инт а квадратной скобочки это будет на стэке давайте про
[02:28:11.500 --> 02:28:15.220]  массивы я поговорю когда будет тема массива она будет следующей после этой
[02:28:15.220 --> 02:28:22.940]  да вот если второй раз вызвать дилет но опять же есть есть ответ на разных
[02:28:22.940 --> 02:28:28.540]  уровня глубины значит давайте сначала как математики дадим самый абсолютно
[02:28:28.540 --> 02:28:35.140]  точный абсолютно бесполезный ответ будет убе теперь более полезный ответ но не
[02:28:35.140 --> 02:28:43.420]  точный ну скорее всего будет секвелт ну потому что ну будет дабл ну или будет
[02:28:43.420 --> 02:28:48.940]  дабл фрио корапшин как мы видели там вот ну в общем будет какая-то антайма
[02:28:48.940 --> 02:28:53.220]  эррор вероятно а может и не будет может быть компилятор соптимизирует как-то
[02:28:53.220 --> 02:29:00.340]  или что-то заметит по ходу и не станет этого делать вот а двойное удаление это
[02:29:00.340 --> 02:29:06.340]  очень частая причина падения программ на плюсах вот я бы сказал что наряду с
[02:29:06.340 --> 02:29:12.860]  обращением по неправильному индексу двойной дилет это вот ну по крайней мере на
[02:29:12.860 --> 02:29:16.380]  первых порах вот когда вы будете писать какой-то код вот вот в основном
[02:29:16.380 --> 02:29:22.740]  потоке люди уже в чате там что-то начали писать кодить по алгоритму уже начались
[02:29:22.740 --> 02:29:27.020]  мы еще с ними это не успели пройти они а что у меня дабл фрио корапшин почему
[02:29:27.020 --> 02:29:30.820]  что я сделал неправильно я вот всего лишь выделил нью а потом что-то ну короче
[02:29:30.820 --> 02:29:37.140]  это частая причина потому что вы особенно когда пишете о пешный код вы
[02:29:37.140 --> 02:29:41.020]  можете не проследить что дилет вызывает на самом деле два раза не один по одному
[02:29:41.020 --> 02:29:49.180]  и тому же место и все и у вас беда значит отличный вопрос что произойдет если я
[02:29:49.180 --> 02:29:57.140]  вызываю нью а оперативной памяти нет больше на меня не хватает ну на самом
[02:29:57.140 --> 02:30:12.460]  деле будет run-time-err со словами сейчас терминейт колд автор throwing an
[02:30:12.460 --> 02:30:20.140]  instance of std bad alloc aborted core dumped вот я я вспомнил точный текст но ну на самом
[02:30:20.140 --> 02:30:23.020]  деле оператор нью бросит так называемое исключение которое будет
[02:30:24.020 --> 02:30:32.740]  после чего вызывается функция abort и будет ошибка abort core dumped ну да разумеется я имею
[02:30:32.740 --> 02:30:37.580]  в виду оперативной памяти обобщен в обобщенном понимании оперативная память это все на самом
[02:30:37.580 --> 02:30:44.420]  деле не совсем оперативная память может быть еще файл подкачки тут может быть ладно не важно
[02:30:44.420 --> 02:30:50.540]  ну в общем это абстракция мы на самом деле работаем не с физической памятью а с виртуальной так
[02:30:50.540 --> 02:30:55.580]  называемой памятью то есть пространство адресов оно транслируется в физическую память как-то
[02:30:55.580 --> 02:31:00.620]  по-своему это отдельная еще тема но это не относится к нашему курсу мы считаем что у нас
[02:31:00.620 --> 02:31:07.380]  оперативная память непрерывно и как бы она вот такая вот большой кусок один да значит ну если
[02:31:07.380 --> 02:31:13.940]  памяти не хватит туда то вы упадете эту ситуацию можно обработать но про это мы тоже будем позже
[02:31:13.940 --> 02:31:24.220]  разговаривать мы пока считаем что такого не происходит ну вот теперь если вам надо так о чем
[02:31:24.220 --> 02:31:29.220]  мне еще надо вам сказать по этому поводу вроде я все даже сказал а окей это значит динамическая
[02:31:29.220 --> 02:31:35.420]  память так вот а как же устроен вектор то на самом деле вопрос который так долго всех волновал
[02:31:35.420 --> 02:31:40.540]  наконец давайте я вам расскажу а то как-то вы очень видимо не комфортно себя чувствуете что
[02:31:40.540 --> 02:31:46.620]  сайзов вектор это 48 и всегда и все но вектор это что вектор это динамический массив который
[02:31:46.620 --> 02:31:57.140]  в себе хранит указатель и два числа по факту что такое вектор потому что не только это он
[02:31:57.140 --> 02:32:03.420]  хранит но я не буду вдаваться в такие подробности на самом деле у вектора у вектора вектора именно
[02:32:03.420 --> 02:32:12.300]  размер поменьше чем 48 я думаю 24 сайзов от вектора 48 многовато мне кажется поменьше я думаю либо
[02:32:12.300 --> 02:32:24.820]  16 либо 24 должен быть может быть у вас там просто числа бы короче из чего состоит вектор 24 ну вот
[02:32:24.820 --> 02:32:32.940]  вектор состоит из одного указателя и двух чисел одно число называется сайз другое число
[02:32:32.940 --> 02:32:40.220]  называется кэпэйсити вот и все что хранит вектор а указатель указывает куда-то в динамическую
[02:32:40.220 --> 02:32:46.780]  память ну смысл вектора в том что он за вас он скрывает от вас все вот эти вот действия когда
[02:32:46.780 --> 02:32:52.420]  вы делаете pushback он за вас ну вы знаете как работает динамический массив он там если закончилась
[02:32:52.420 --> 02:32:57.220]  кэпэйсити то нужно расшириться в два раза и переложить все на новое место освободить старый
[02:32:57.220 --> 02:33:03.460]  кусок если там не закончилось то значит надо сдвинуть сайз ну и короче но сам вектор как
[02:33:03.460 --> 02:33:10.180]  как переменная он маленький в нем всего лишь вот это вот и все лежит там указатели два числа а
[02:33:10.180 --> 02:33:21.140]  указатель уже указывает на динамическую память понятно что ну я и думаю что 24 вот почему 24 ну
[02:33:21.140 --> 02:33:29.540]  потому что вот это 8 ну и видимо вот эти по 8 еще да ну потому что сайза кп тоже должно быть
[02:33:29.540 --> 02:33:33.700]  наверное 8 байтами потому что если у вас 64 битная система то вообще говоря у вас же может быть
[02:33:33.700 --> 02:33:43.580]  вектор размера ну ну да типа у вас 32 битной недостаточно ну у этих переменных сайз т типы
[02:33:43.580 --> 02:33:50.900]  ну и размер сайз т на 64 битная система вероятно 8 поэтому по факту у вас хранится
[02:33:50.900 --> 02:33:57.700]  один указатель два числа то есть 24 вот на самом деле там хранится еще кое-что вообще говоря но
[02:33:57.700 --> 02:34:10.820]  мы не будем об этом в стандартном случае там только это хранится не 12 а 16 а если 30 ну видимо
[02:34:10.820 --> 02:34:25.060]  12 да ну а что вас смущает то же самое со строкой строка хранит тоже указатели два числа то же
[02:34:25.060 --> 02:34:29.860]  самое со всеми стандарт с мэпом сетом что-то что хранит мэп ну он хранит там указатель
[02:34:29.860 --> 02:34:34.140]  на начальной вершины и там еще какие-нибудь пару чисел там какие-нибудь до красно-черного
[02:34:34.140 --> 02:34:40.140]  дерева нужных и сайзов любой переменной константа сайзов любого типа точнее константа
[02:34:40.140 --> 02:34:45.260]  константа известный момент компиляции причем поэтому не надо удивляться что сайзов от вы
[02:34:45.260 --> 02:34:52.260]  берете сайзов от какого-то там странного дерева мэп unordered map и он всегда там 48 ну он всегда
[02:34:52.260 --> 02:34:58.940]  такой просто все то что там и меняется размер у него у чего оно в динамической памяти лежит
[02:34:58.940 --> 02:35:04.540]  а у вас хранится только указатель на стеке понятно теперь почему сайзов от всех этих вещей
[02:35:04.540 --> 02:35:13.820]  константа и понятно почему такая константа я надеюсь ну давайте я сейчас не буду считать ну
[02:35:13.820 --> 02:35:20.460]  придет время мы поразбираемся из чего там состоят ноды но ну сколько-то занимает какие-то там
[02:35:20.460 --> 02:35:30.300]  поля хранятся ну что там ну это сложно там сложно понять что такое короче ну как красно-черное
[02:35:30.300 --> 02:35:36.260]  дерево ну что у него там указатель на лево сын направо сына на предка дата собственно ключ
[02:35:36.260 --> 02:35:48.180]  и еще флажок бел красное или черное ну и все вот окей последнее о чем я должен здесь сказать это
[02:35:48.180 --> 02:35:53.280]  локальные статические переменные что такое локальные статические переменные вы можете
[02:35:53.280 --> 02:36:01.820]  произвольную переменную объявить статической например я могу сказать вот здесь ну любую
[02:36:01.820 --> 02:36:08.420]  локальную любую локальную переменную назвать статично static int ц равно нулю это означает что
[02:36:08.420 --> 02:36:12.420]  она будет храниться теперь не на стеке, а в дате. Вот.
[02:36:12.420 --> 02:36:20.540]  И это означает, что ее значение будет сохраняться между
[02:36:20.540 --> 02:36:25.020]  вызовами этой функции. То есть она теперь, один раз
[02:36:25.020 --> 02:36:28.260]  создавшись, на всю оставшуюся программу будет существовать.
[02:36:28.260 --> 02:36:33.620]  Вот. Например, так можно считать, сколько раз функция
[02:36:33.620 --> 02:36:38.580]  была вызвана. У меня тут cout был. Ну вот я могу, например,
[02:36:38.580 --> 02:36:45.300]  написать cout++c. Это я при каждом новом вызове функции
[02:36:45.300 --> 02:36:48.460]  буду число на один больше уводить. Неважно, откуда
[02:36:48.460 --> 02:36:51.980]  я вызываю эту функцию, неважно, с какого уровня вложенности.
[02:36:51.980 --> 02:36:54.740]  Где мы static написали в этой функции?
[02:36:54.740 --> 02:36:57.940]  static int c. Вот. Перед объявлением переменной. Да, прям в ней.
[02:36:57.940 --> 02:37:00.700]  А она, разве, каждый раз наналяться не будет?
[02:37:00.700 --> 02:37:03.580]  Нет. Значит, статическая переменная инициализируется
[02:37:03.580 --> 02:37:09.780]  один раз при первом заходе сюда, и все следующие заходы
[02:37:09.780 --> 02:37:12.580]  игнорируется эта строчка просто. Статическая переменная
[02:37:12.580 --> 02:37:17.340]  создана, ну, она инициализируется в момент, когда ее только
[02:37:17.340 --> 02:37:21.780]  впервые, как бы, в общем, первый раз в первом заходе,
[02:37:21.780 --> 02:37:32.620]  а потом, да. И что?
[02:37:33.460 --> 02:37:37.180]  Ну, c. Это другая c. Это локальная c, а та глобальная
[02:37:37.180 --> 02:37:40.300]  c. Это, ты возвращаешься к разговору о том, как устроены
[02:37:40.300 --> 02:37:43.180]  области видимости. То, что я сейчас сказал, не отменяет
[02:37:43.180 --> 02:37:45.900]  всех тех разговоров про то, как устроены вложенные
[02:37:45.900 --> 02:37:48.940]  скопы. Это переменная более локальная, чем глобальная,
[02:37:48.940 --> 02:37:51.780]  поэтому в этом контексте c означает эту c, а не ту.
[02:37:51.780 --> 02:37:57.540]  А в чем плюс статика? Чтобы глобальных переменных
[02:37:57.540 --> 02:38:00.460]  не создавать, например. Не знаю. Чтобы у тебя в глобальной
[02:38:00.460 --> 02:38:03.700]  области видимости не было каких-то странных переменных,
[02:38:03.700 --> 02:38:06.580]  которые доступны из всех функций и во всех областях
[02:38:06.580 --> 02:38:17.260]  видимости видны. Ну, я могу предполагать, почему он такой.
[02:38:17.260 --> 02:38:35.020]  А, три указателя хранятся. А, кстати, да, это логично,
[02:38:35.020 --> 02:38:37.780]  потому что это же быстрее, наверное. Потому что тебе
[02:38:37.780 --> 02:38:39.940]  не надо арихметику указать. Ну, хотя спорно, не знаю,
[02:38:39.940 --> 02:38:42.020]  что из этого быстрее. Ну, наверное, да, это быстрее,
[02:38:42.020 --> 02:38:47.020]  потому что… Да, наверное.
[02:38:47.020 --> 02:38:52.900]  Наверное, это мудрая оптимизация, но, наверное, так оптимальнее
[02:38:52.900 --> 02:38:54.220]  хранить. Да.
[02:38:54.220 --> 02:38:58.500]  Есть ли какое-то ограничение на размер статической памяти?
[02:38:58.500 --> 02:39:02.060]  Можно ли его статическими переменами сделать неадекватно
[02:39:02.060 --> 02:39:05.820]  большим? Ну, можно. Это опять-таки ограничение
[02:39:05.820 --> 02:39:09.620]  на уровне операционки ставится. Т.е. там аналогично стэгу
[02:39:09.620 --> 02:39:12.220]  есть какое-то ограничение, которое можно переполучить?
[02:39:12.220 --> 02:39:16.060]  Не знаю. По-моему, по умолчанию нет ограничений. Вы можете
[02:39:16.060 --> 02:39:18.420]  запросить статический массив какого угодно размера,
[02:39:18.420 --> 02:39:22.060]  и он создастся. Ну, я пробовал в свое время. Ну, просто
[02:39:22.060 --> 02:39:24.780]  это означает, что когда ваша программа загрузится
[02:39:24.780 --> 02:39:28.980]  в оперативку, это означает, что сам ваш бинарник будет
[02:39:28.980 --> 02:39:33.900]  весить вот столько, сколько вы попросили. Ну, это правда
[02:39:33.900 --> 02:39:37.060]  зависит от того, инициализирован этот массив или нет. Ну,
[02:39:37.060 --> 02:39:40.980]  на самом деле, дата подразделяется на инишалайз-даты и аннинишалайз-дата.
[02:39:40.980 --> 02:39:43.260]  И вот инишалайз-дата – это дата, которая вписана прямо
[02:39:43.260 --> 02:39:46.060]  в бинарника, а аннинишалайз-дата, которая… Ну, короче, это
[02:39:46.060 --> 02:39:49.140]  вот как раз то, о чем я не хотел рассказывать. Но
[02:39:49.140 --> 02:39:52.180]  в целом можете какой угодный размер запросить. Да?
[02:39:52.180 --> 02:39:55.420]  А получается, в цене нельзя обратиться из другого
[02:39:55.420 --> 02:39:57.940]  скопа какого-то из… Ну да, целокальная переменная
[02:39:57.940 --> 02:40:00.380]  для f. По ее указателю можно?
[02:40:00.380 --> 02:40:03.500]  По указателю можно. Причем это будет не у b.
[02:40:03.500 --> 02:40:06.500]  А указателю вообще куда угодно можно запросить?
[02:40:06.500 --> 02:40:08.860]  А ты что хотел спросить? Ты это и спросил, да? Ну,
[02:40:08.860 --> 02:40:12.780]  к указателю можно. Можно вернуть отсюда указатель
[02:40:12.780 --> 02:40:15.220]  на int, то есть я могу сказать вот так, например.
[02:40:15.220 --> 02:40:24.420]  И использование этого указателя будет легально
[02:40:24.420 --> 02:40:28.180]  во всей программе. Потому что это статическая переменная,
[02:40:28.180 --> 02:40:30.540]  она один раз создана, и все, она существует до самого
[02:40:30.540 --> 02:40:32.780]  конца программы. Вот по этому указателю можно будет
[02:40:32.780 --> 02:40:36.380]  обращаться всегда. А мы можем delete быть?
[02:40:36.380 --> 02:40:39.660]  Если сделать… Кого? Этот указатель.
[02:40:39.740 --> 02:40:42.220]  У b тогда будет, но на f.
[02:40:42.220 --> 02:40:44.740]  Delete вызывать можно только для динамической памяти.
[02:40:44.740 --> 02:40:47.540]  Delete можно вызывать только для указателя, который
[02:40:47.540 --> 02:40:50.300]  был вам возвращен как результат вызова new.
[02:40:50.300 --> 02:40:53.460]  Причем ровно с тем же типом и ровно на том же байте.
[02:40:53.460 --> 02:40:56.380]  Вот если вы хоть на 1 сдвинетесь правее-левее, и там delete,
[02:40:56.380 --> 02:40:58.660]  все, у b.
[02:40:58.660 --> 02:41:01.820]  Кстати, мне предпочитать, что нельзя, что ли, и не гарантируется,
[02:41:01.820 --> 02:41:04.380]  что по указателю можно обращаться. Конечно нет,
[02:41:04.380 --> 02:41:06.860]  локальная переменная уничтожается, когда ты из функции выходишь.
[02:41:06.860 --> 02:41:09.180]  Все, она не действительна. Дальше по этому указателю
[02:41:09.180 --> 02:41:11.740]  битой будет… Ну там будет неизвестно что.
[02:41:11.740 --> 02:41:14.940]  То есть получается, что в статик memory есть свободное место?
[02:41:14.940 --> 02:41:20.580]  Статик memory резервируется компилятором в момент компиляции.
[02:41:20.580 --> 02:41:24.540]  Он видит, что есть статическая переменная в f такая, значит
[02:41:24.540 --> 02:41:26.580]  дополнительно плюс 4 байта к статической памяти надо
[02:41:26.580 --> 02:41:30.020]  заранее запросить. В сумму всех размеров статических
[02:41:30.020 --> 02:41:32.780]  переменных это и есть размер даты. Все размеры статических
[02:41:32.780 --> 02:41:35.020]  переменных сумма компилятор знает, пока компилирует.
[02:41:35.020 --> 02:41:44.540]  Если вы обращаетесь к переменной до инициализации,
[02:41:44.540 --> 02:41:51.980]  это все равно у b. Так. Ну. Нет, давайте я дальше
[02:41:51.980 --> 02:41:55.780]  пойду, иначе мы так очень… Короче, если остались вопросы,
[02:41:55.780 --> 02:42:01.700]  давайте потом, после пары. Еще 10 минут хочу потратить
[02:42:01.700 --> 02:42:15.420]  на рассказ о чем-то другом. Да, вот эта ситуация, когда
[02:42:15.420 --> 02:42:21.940]  вы выделяете какую-то переменную через new и не освобождаете,
[02:42:21.940 --> 02:42:31.540]  называется memory leak. Утечка памяти. Memory leak. Это не
[02:42:31.740 --> 02:42:35.860]  так плохо, как у b, но это все-таки плохо очень и в
[02:42:35.860 --> 02:42:40.740]  корректной программе не должно быть memory leak. Но memory leaky
[02:42:40.740 --> 02:42:43.740]  они компилятором не выявляются, конечно. Выявляются они
[02:42:43.740 --> 02:42:48.940]  только в рантайме и то специальными средствами. Вот. Ну в ангрид
[02:42:48.940 --> 02:42:51.220]  например, да. Вот. Когда вы будете сдавать задачи
[02:42:51.220 --> 02:42:56.180]  в контест, они могут проходить тесты, но обладать утечками
[02:42:56.180 --> 02:42:59.580]  памяти. И мы такое будем отдельно проверять специальным
[02:42:59.580 --> 02:43:02.820]  образом, про это попозже расскажем вам. Ну в общем.
[02:43:02.820 --> 02:43:05.820]  Можно бы сначала в основном что-то предъявить, а потом
[02:43:05.820 --> 02:43:07.460] … Да, конечно, конечно.
[02:43:07.460 --> 02:43:09.860]  Санитайзерами? Ну да, санитайзерами.
[02:43:09.860 --> 02:43:14.980]  А если там массив условно для мейна был создан в динамической
[02:43:14.980 --> 02:43:18.060]  памяти? Давайте я, пожалуйста, двинусь
[02:43:18.060 --> 02:43:21.940]  дальше, вы задаете вопросы после пары. Мы очень медленно
[02:43:21.940 --> 02:43:25.100]  двигаемся. Я иду дальше, сейчас рассказываю про массивы.
[02:43:25.100 --> 02:43:27.380]  Вот как раз все, что вы хотели узнать про массивы, сейчас
[02:43:27.380 --> 02:43:30.860]  вы сможете спросить. Значит, следующий пункт называется
[02:43:30.860 --> 02:43:42.900]  массивы или рейс. Так, параграмма 2.3 называется массивы.
[02:43:42.900 --> 02:43:59.860]  Что такое массив? Ну как вам объяснить?
[02:43:59.860 --> 02:44:02.060]  В общем, все знают, что такое массив. Давайте я покажу,
[02:44:02.060 --> 02:44:08.220]  как объявлять массивы. Ну, на то вы и про два, что вам
[02:44:08.220 --> 02:44:12.660]  рассказывать всякую ерунду? Может вам еще как if писать
[02:44:12.660 --> 02:44:16.060]  надо рассказать? Значит, как объявлять массив? Это
[02:44:16.060 --> 02:44:19.340]  объявление пока функции мейна, не массива, не путайте.
[02:44:19.340 --> 02:44:25.940]  Значит, ну стандартный синтакт есть такой, я пишу тип,
[02:44:25.940 --> 02:44:28.860]  ну например опять, может дабл для разнообразия, давайте
[02:44:28.860 --> 02:44:35.020]  дабл. Дабл, название массива, например,
[02:44:35.020 --> 02:44:37.940]  а в квадратных скобочках столько. Ну, например, сколько,
[02:44:38.940 --> 02:44:46.500]  например, десять. Вот. Да, вот это массив из десяти
[02:44:46.500 --> 02:44:50.380]  элементов. Я его ничем не пронициализировал, поэтому
[02:44:50.380 --> 02:45:01.020]  он пронициализирован рандомными числами. Вот. Да, если в глобальной
[02:45:01.020 --> 02:45:03.300]  области, то нулями, по-моему, будет пронициализирован.
[02:45:03.300 --> 02:45:11.860]  Ну, в стандарте, наверное. Что? Это будет статик? Кто?
[02:45:11.860 --> 02:45:15.340]  Этот? Нет, это будет автоматизм. На стеке массив. С чего бы
[02:45:15.340 --> 02:45:22.620]  статик? Это массив на стеке. Вот. Соответственно, отличный
[02:45:22.620 --> 02:45:25.940]  вопрос на понимание, что если я напишу дабл а, десять
[02:45:25.940 --> 02:45:30.020]  миллионов? Это сразу стек оверфлоу, да, и вероятно
[02:45:30.020 --> 02:45:34.900]  секфолд. Значит, на стеке вы не можете объявлять массивы,
[02:45:34.900 --> 02:45:38.740]  которые переполняют стек. Ну, логично. Вот. Надежный
[02:45:38.740 --> 02:45:41.620]  быстрый способ сделать стек оверфлоу. Вот, собственно,
[02:45:41.620 --> 02:45:44.260]  объявить массив размера больше, чем байт на стеке.
[02:45:44.260 --> 02:45:51.020]  А что? Какие варианты? Стек оверфлоу это название
[02:45:51.020 --> 02:45:54.340]  ситуации, которое вызывает обращение по несуществующему
[02:45:54.340 --> 02:45:57.220]  индексу. Это причина возникновения секфолд. Стек оверфлоу
[02:45:57.220 --> 02:46:02.180]  это другая причина возникновения секфолд. Там, разыменование
[02:46:02.180 --> 02:46:04.420]  несуществующего указателя. Это другая, третья причина
[02:46:04.420 --> 02:46:11.260]  возникновения секфолд. Так. Я могу изначально проницилизировать
[02:46:11.260 --> 02:46:17.540]  его чем-то. Я могу написать вот так, например. Ну и
[02:46:17.540 --> 02:46:22.060]  хватит. По-моему, да, если я не укажу остальные, то
[02:46:22.060 --> 02:46:26.660]  они нулями просто заполнятся вроде как. Вот. Но я могу
[02:46:26.660 --> 02:46:29.300]  написать десять чисел, и он проницилизируется
[02:46:29.300 --> 02:46:36.380]  десятью числами. Да-да-да. Если написать равно пустые
[02:46:36.380 --> 02:46:42.500]  скобочки, то это, кажется, будет десять нулей. Слушайте,
[02:46:42.500 --> 02:46:48.340]  какие большие массивы. Ну, пустые скобочки можно написать.
[02:46:48.340 --> 02:47:00.340]  Какие ошибки? Может, это был как раз стек оверфлоу?
[02:47:00.340 --> 02:47:09.700]  Ну, вполне возможно, что, ну, слушай, не знаю. Так,
[02:47:09.700 --> 02:47:12.860]  что надо сказать про массивы? А какие операции массивы
[02:47:12.860 --> 02:47:16.700]  поддерживают вообще? Ну, массивы поддерживают, как
[02:47:17.380 --> 02:47:19.820]  ни странно, обращение по индексу. Можно писать
[02:47:19.820 --> 02:47:23.700]  а и т, и, значит, это будет обращение к и тому элементу
[02:47:23.700 --> 02:47:29.420]  а, а. Нумерация с нуля. Но, что более интересно,
[02:47:29.420 --> 02:47:32.420]  и вот что самое важное надо понять про массивы, массивы
[02:47:32.420 --> 02:47:34.820]  это на самом деле почти то же самое, что указатели.
[02:47:34.820 --> 02:47:40.340]  Почему почти? Ну, не совсем. У них различия все-таки
[02:47:40.340 --> 02:47:44.540]  есть. Но в основном это почти указатели. Когда функцию
[02:47:44.540 --> 02:47:49.140]  передаешь, там нужно написать как раз указатель. Да, ну,
[02:47:49.140 --> 02:47:51.980]  значит, существует неявная конверсия из массива в
[02:47:51.980 --> 02:47:56.860]  указатель. То есть, я могу неявно сконвертировать
[02:47:56.860 --> 02:48:04.620]  массив из даблов на указатель, в указатель на дабл. Легко.
[02:48:04.620 --> 02:48:09.540]  Это неявная конверсия, называется array to pointer conversion. Вот.
[02:48:10.540 --> 02:48:16.100]  P и A, по сути, это одно и то, что из себя представляет,
[02:48:16.100 --> 02:48:18.540]  ну, массив в памяти из себя понятно, что представляет.
[02:48:18.540 --> 02:48:23.740]  Десять даблов подряд. Но, что вот эта конверсия будет
[02:48:23.740 --> 02:48:28.660]  делать? Что будет такое P? P это будет адрес начального
[02:48:28.660 --> 02:48:38.420]  элемента, да. Вот. Соответственно, я могу на самом деле к указателям
[02:48:38.420 --> 02:48:41.660]  тоже применять операции, как будто они массивы. Я
[02:48:41.660 --> 02:48:46.220]  могу вывести P первое, и это то же самое, что A первое.
[02:48:46.220 --> 02:48:57.220]  То же самое, что, видимо, звездочка от P. Да. А 1ll от P, это то же самое, что P от 1?
[02:48:57.220 --> 02:49:04.220]  Там просто 1 от P. Что такое 1ll? А, господи, вот это. Да.
[02:49:04.220 --> 02:49:07.300]  Смотрите, что на самом деле означает операция квадратной
[02:49:07.300 --> 02:49:10.540]  скобочки в языке C, если речь идет о массивах или
[02:49:10.540 --> 02:49:16.020]  о указателях. Это на самом деле эквивалентно написать
[02:49:16.020 --> 02:49:26.140]  звездочка от P плюс 1. Это прям строго эквивалентно
[02:49:26.140 --> 02:49:30.020]  для указателей и массивов. Не для векторов, только,
[02:49:30.020 --> 02:49:33.220]  боже упаси. Вот. Если у вас это объект, там, вектор
[02:49:33.220 --> 02:49:37.180]  или стринг, это не так работает. Квадратные скобочки для
[02:49:37.180 --> 02:49:40.980]  классов, плюсов, работают не так. Но для осишных
[02:49:40.980 --> 02:49:43.780]  поинтеров и для указателей это работает вот прям строго
[02:49:43.780 --> 02:49:48.100]  так. В частности, можно написать 1 с квадратными скобочками
[02:49:48.100 --> 02:49:53.220]  P, и это будет то же самое, потому что это будет означать
[02:49:53.220 --> 02:50:04.220]  звездочка от 1 плюс P. Вот. Да. Что ты? Да-да-да-да, подожди.
[02:50:04.220 --> 02:50:08.940]  Ну-ну-ну. Не явное приведение массива к даблу, это не считается
[02:50:08.940 --> 02:50:11.820]  плохим бурстайлом? Не к даблу, а к указателю на даблу.
[02:50:11.820 --> 02:50:16.020]  Нет, не считается. Это как раз, это как раз, это C-стайл,
[02:50:16.020 --> 02:50:18.860]  но это как бы классический. А вот тут на самом деле большой
[02:50:18.860 --> 02:50:21.860]  вопрос про последнюю строчку. А как у нас определяется
[02:50:21.860 --> 02:50:26.780]  размер одного элемента? Кого? В смысле размер одного
[02:50:26.780 --> 02:50:31.100]  элемента. Вот это прям заменяется вот на это. Что значит размер?
[02:50:31.100 --> 02:50:37.100]  Какой размер? Вместо этого компилятор делает это,
[02:50:37.100 --> 02:50:42.420]  и все. Сложение указателей с числом, указатели с числом
[02:50:42.420 --> 02:50:45.820]  мы уже понимаем как складывается. Вот, можно обращаться к
[02:50:45.820 --> 02:50:49.580]  массивам по отрицательному индексу. Вот смотрите, я
[02:50:49.580 --> 02:50:57.700]  например могу сказать так, double P равно a плюс 2. Тогда
[02:50:57.700 --> 02:51:00.180]  я могу спокойно вывести минус первый элемент P,
[02:51:00.180 --> 02:51:22.980]  и это будет корректно. Массив с чем? С префиксу? Да,
[02:51:22.980 --> 02:51:26.020]  ну вы можете завести массив, в котором будет индекс минус
[02:51:26.020 --> 02:51:29.820]  1. Просто вам нужно указатель, ну как бы вам нужно указатель
[02:51:29.820 --> 02:51:32.100]  на начальный элемент поставить на самом деле не на начальный
[02:51:32.100 --> 02:51:42.580]  элемент, а вот на следующий за ним, да. Да, вот. Значит
[02:51:42.580 --> 02:51:44.940]  всякий раз, когда вы с массивом пытаетесь произвести какую-то
[02:51:44.940 --> 02:51:50.100]  операцию, то он не явно конвертируется в указатель, кроме там пары
[02:51:50.100 --> 02:51:53.500]  случаев. Ну вот, когда вы говорите a плюс 2, это вы значит
[02:51:53.500 --> 02:51:56.940]  берете указатель на, просто на второй элемент, то есть
[02:51:56.940 --> 02:52:01.060]  a второе. Вот. И вы получаете адрес вот этого элемента
[02:52:01.060 --> 02:52:03.580]  в результате. Ну и дальше можете вот так обращаться.
[02:52:03.580 --> 02:52:11.060]  Вот. Чем массивы такие отличаются? Как массив
[02:52:11.060 --> 02:52:13.300]  принять функцию? Да так же, надо просто по указателю
[02:52:13.300 --> 02:52:16.540]  принимать. Если вам нужно a передать функцию, то вы
[02:52:16.540 --> 02:52:18.980]  просто принимаете в нее double звездочку, и происходит
[02:52:18.980 --> 02:52:22.140]  неявная конверсия при передаче. Нет, вы можете явно написать
[02:52:22.380 --> 02:52:27.300]  именно массив размера 10, но это не обязательно. Можно
[02:52:27.300 --> 02:52:31.740]  просто принимать звездочку и нормально. Вот. Давайте
[02:52:31.740 --> 02:52:34.780]  последние пару вещей скажу, и все уже на сегодня. Значит
[02:52:34.780 --> 02:52:37.900]  чем массивы отличаются от указателей, тем не менее?
[02:52:37.900 --> 02:52:40.140]  Массивы нельзя, ну вот, например, нельзя вот так с массивом
[02:52:40.140 --> 02:52:43.900]  сделать. Нельзя делать плюс-плюс-а в отличие от указателя.
[02:52:43.900 --> 02:52:47.340]  Ну потому что массив, это все-таки массив, и как? Ну,
[02:52:47.340 --> 02:52:49.840]  это не одно число, не один указатель. Он у него какой-то
[02:52:49.840 --> 02:52:53.640]  должен быть, ну он на стеке занимает много места. Нельзя
[02:52:53.640 --> 02:52:58.600]  просто инкрементировать, это не понятно, что значит.
[02:52:58.600 --> 02:53:04.880]  Массив это массив. Это другой тип. Это такой тип. Вот. Тип
[02:53:04.880 --> 02:53:08.560]  этого переменной, это массив даблов размера 10. 10 это кстати
[02:53:08.560 --> 02:53:14.760]  тоже часть типа. Вот. А size of от массива, в отличие
[02:53:14.760 --> 02:53:18.120]  от size of от указателя, это сумма size of всех его элементов.
[02:53:18.720 --> 02:53:23.720]  Size of от вот такого а будет 80. А size of от п это будет 8 просто.
[02:53:23.720 --> 02:53:38.720]  Это с-е. Это нестандартное расширение языка, которое
[02:53:38.720 --> 02:53:45.320]  поддерживается не всем компиляторами. Так, а последняя вещь, которую
[02:53:45.320 --> 02:53:48.120]  я вам скажу, массивом нельзя присваивать другие массивы.
[02:53:48.120 --> 02:53:50.880]  Смотрите, если у меня есть другой массив размера
[02:53:50.880 --> 02:53:54.360]  10, допустим, b это тоже массив размера 10 из даблов, и я напишу
[02:53:54.360 --> 02:53:58.120]  a присвоить b, это будет с-е, потому что нельзя массиву
[02:53:58.120 --> 02:54:02.720]  присваивать массив операторам присваивания. Вот указателю
[02:54:02.720 --> 02:54:06.000]  можно присвоить массив, а массиву что-либо присвоить
[02:54:06.000 --> 02:54:11.200]  нельзя. Просто нельзя, так решил комитет по стандартизации,
[02:54:11.200 --> 02:54:13.600]  и это логично, потому что ну а как, у вас на стеке
[02:54:13.600 --> 02:54:16.600]  лежит массив, а за ним другой массив, допустим, как вы,
[02:54:16.600 --> 02:54:20.000]  типа, у вас что кусок стека пропадет от такого, как
[02:54:20.000 --> 02:54:26.200]  это сделать, непонятно. Вот это пример l value, которому
[02:54:26.200 --> 02:54:30.800]  нельзя присваивать. Я вам говорил, что такие примеры
[02:54:30.800 --> 02:54:36.680]  будут. По определению, любая переменная сама по себе
[02:54:36.680 --> 02:54:51.240]  это l value. С массивами можно делать все то же, что с указателями,
[02:54:51.240 --> 02:54:53.760]  только не, еще раз, обращаться квадратными скобочками,
[02:54:53.760 --> 02:55:00.400]  складывать с числами, брать разность, разыминовывать.
[02:55:00.400 --> 02:55:03.240]  Все то же, что с указателями, но только не сдвигать сам
[02:55:03.240 --> 02:55:10.760]  а менять сама нельзя. Вот, ну, я вам, правда, не рассказал
[02:55:10.760 --> 02:55:14.640]  про оператор NU с квадратными скобочками, ну ладно, ну,
[02:55:14.640 --> 02:55:17.840]  то есть, можно выделить массив просто на динамической
[02:55:17.840 --> 02:55:19.920]  памяти, квадратные скобочки написав. Ну ладно, это в
[02:55:19.920 --> 02:55:22.160]  следующий раз, все на сегодня, если есть вопросы, подходите
[02:55:22.160 --> 02:55:22.680]  спрашивайте.
