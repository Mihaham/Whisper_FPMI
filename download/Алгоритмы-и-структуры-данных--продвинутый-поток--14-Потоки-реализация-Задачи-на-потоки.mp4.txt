[00:00.000 --> 00:08.100]  Так как мы попробуем написать немножко промышленного
[00:08.100 --> 00:20.460]  кода, поэтому вот от этого фраза нас начинает тоже
[00:20.460 --> 00:21.460]  вздрагивать.
[00:21.460 --> 00:26.020]  Так, а что нам надо?
[00:26.020 --> 00:29.420]  Потоки будем писать.
[00:29.420 --> 00:31.180]  Для начала мы напишем сеть.
[00:31.180 --> 00:39.180]  Смотрите, хорошо нам для этого надо, но можем написать
[00:39.180 --> 00:40.540]  namespace даже по приколу.
[00:40.540 --> 00:58.460]  Ну да, n, network, там n, flows, ну вот, на всякий случай
[00:58.460 --> 01:00.340]  вот этот скобчик всегда лишний, поэтому тут вот
[01:00.340 --> 01:02.180]  полезно написать, мне кажется, вот такое.
[01:02.180 --> 01:10.620]  Вот так просто, чтобы сразу.
[01:10.620 --> 01:14.780]  Значит, то давайте думать, как же нам это писать?
[01:14.780 --> 01:17.020]  Ну в идеале, конечно, раз уж мы запускаем BFS, неплохо
[01:17.020 --> 01:21.660]  было бы хранить ребра в виде поиска ширину, правда?
[01:21.660 --> 01:22.660]  Вот.
[01:22.660 --> 01:25.860]  Да, но для этого, во-первых, нам, конечно, не помешают
[01:25.860 --> 01:26.860]  сами ребра.
[01:26.860 --> 01:33.700]  Ну сами по себе ребра мы можем хранить, ну здесь
[01:33.700 --> 01:38.020]  вот по разному можно хранить, знаете, я вот даже тут попробую
[01:38.020 --> 01:44.180]  ввести вот такую штуку, как template, так, ну вы уже знакомы
[01:44.180 --> 01:47.180]  с такой штукой, да?
[01:47.180 --> 01:53.460]  Ну вот, да, но по-хорошему, да, еще надо быть TAVERT, так
[01:53.460 --> 01:54.460]  чтобы не путаться.
[01:54.460 --> 02:03.900]  Тьфу, да, ой, да, ну да, да, да, я вот, ой, как давно
[02:03.900 --> 02:04.900]  я не писал шаблоны.
[02:04.900 --> 02:05.900]  Ну ладно.
[02:05.900 --> 02:13.180]  Так, значит, смотрите, TAVERT, значит, start и finish, ну и что
[02:13.180 --> 02:14.940]  нам не помешает хранить в ребрах?
[02:14.940 --> 02:19.060]  Ну в ребрах, во-первых, не помешает, конечно, хранить,
[02:19.060 --> 02:22.940]  значит, пропускную способность или емкость, потому что
[02:22.940 --> 02:27.420]  по-английски, кстати, это называется capacity, ну и, конечно
[02:27.420 --> 02:30.940]  же, не помешает еще хранить сам поток.
[02:30.940 --> 02:37.180]  Вот, ну здесь, да вот, значит, далее у нас получается
[02:37.180 --> 02:41.980]  примерно следующая штука, значит, смотрите, итак,
[02:41.980 --> 02:45.820]  значит, ну network, значит, теперь попробуем реализовать
[02:45.820 --> 02:47.940]  следующим образом, смотрите, что нам, а теперь давайте
[02:47.940 --> 02:51.260]  подумаем, кстати, вот внимательно, на уровне концепции, что
[02:51.260 --> 02:53.900]  нам нужно от сети?
[02:53.900 --> 02:56.980]  Вот что нам нужно от сети?
[02:56.980 --> 03:01.460]  Ну, нам, наверное, хочется иметь какой-то доступ к
[03:01.460 --> 03:05.420]  ребрам, да, хочется их как-то поток по ним модифицировать,
[03:05.420 --> 03:07.260]  может быть, добавлять ребра, но при этом как-то делать
[03:07.260 --> 03:13.700]  это достаточно безопасно, вот, поэтому, на самом деле,
[03:13.700 --> 03:17.460]  ну вот, но при этом, смотрите, значит, что мы будем хранить
[03:17.460 --> 03:18.460]  в сети?
[03:18.940 --> 03:22.500]  Как мы уже понимаем, нам очень удобно было бы хранить
[03:22.500 --> 03:24.700]  остаточную сеть, правда?
[03:24.700 --> 03:27.700]  Вот, поэтому, на уровне идеи мы можем сразу сказать,
[03:27.700 --> 03:31.380]  что вот network и подразумеваем, что она на самом деле остаточная,
[03:31.380 --> 03:34.460]  но тогда это будет нам подразумевать сразу следующее, что когда
[03:34.460 --> 03:37.580]  мы будем добавлять ребра, вот сразу вот там, ну будет
[03:37.580 --> 03:41.780]  у нас какой-то там конструктор, там, скажем, какой, и когда
[03:41.780 --> 03:48.140]  у нас возникнет какой-нибудь insert edge, допустим, t-vertex,
[03:48.140 --> 03:54.380]  скажем, start, t-vertex, finish и, собственно, capacity, там,
[03:54.380 --> 04:00.380]  t-flow, capacity, то сразу, как бы, логично было бы…
[04:00.380 --> 04:03.380]  — А мы не хотим просто стоять, чтобы не давать?
[04:03.380 --> 04:04.380]  — Чего?
[04:04.380 --> 04:05.380]  — Да, можно.
[04:05.380 --> 04:08.380]  — Ну, смотрите, дело в том, что, ну, на самом деле,
[04:08.380 --> 04:10.380]  вот этот struct edge, можно, конечно, и вот так писать,
[04:10.380 --> 04:12.380]  но с удовольствием, во-первых, там могут храниться еще
[04:12.380 --> 04:15.380]  какие-нибудь вещи и так далее, поэтому, может быть,
[04:15.380 --> 04:18.100]  и, на самом деле, это будет наше достаточно внутреннее
[04:18.100 --> 04:19.100]  структура.
[04:19.100 --> 04:25.380]  То есть, пока мы пишем именно под capacity, вот, то есть,
[04:25.380 --> 04:26.380]  нет смысла.
[04:26.380 --> 04:30.380]  Тут, видите, тут, кстати, ну, и тем более, что возможно
[04:30.380 --> 04:32.460]  потенциальному пользователю будет так удобнее.
[04:32.460 --> 04:35.100]  Да, напоминаю, что мы пишем, когда мы пишем подобные
[04:35.100 --> 04:37.100]  вещи, мы помним, что мы пишем на это, чтобы пользовались
[04:37.100 --> 04:41.100]  не только мы, но и кто-нибудь еще, поэтому, чем более…
[04:41.100 --> 04:43.540]  То есть, наша цель — разработать такой интерфейс, чтобы
[04:43.540 --> 04:46.140]  он был, с одной стороны, безопасный, но, с другой
[04:46.140 --> 04:48.580]  стороны, позволя максимально удобно алгоритмы реализовывать.
[04:48.580 --> 04:49.580]  Вот.
[04:49.580 --> 04:54.300]  Но, правда, здесь, конечно, есть не без ограничений,
[04:54.300 --> 04:56.940]  потому что t-vertex, ну, конечно, мы тут только для аккуратности
[04:56.940 --> 04:59.660]  пишем, хотя, на самом деле, по умолчанию t-vertex, наверное,
[04:59.660 --> 05:05.380]  почти всегда будет unsigned and tom, ну, или size-t, но, скорее,
[05:05.380 --> 05:07.940]  unsigned and tom, потому что, наверное, больше, чем два миллиарда
[05:07.940 --> 05:11.180]  вершин у вас вряд ли будет, что-то мне подсказывает.
[05:11.180 --> 05:13.700]  Ну, всякое, конечно, бывает.
[05:13.700 --> 05:19.900]  Ну, вот, insert edge local, соответственно, start, finish, соответственно,
[05:19.900 --> 05:20.900]  capacity.
[05:20.900 --> 05:32.300]  И, конечно же, insert edge local, так, и finish, start, и вот тут,
[05:32.300 --> 05:34.940]  конечно, стоит написать, может быть, t-flow от нуля.
[05:34.940 --> 05:39.820]  Ну, это, на всякий случай, вдруг вы там в качестве t-flow
[05:39.820 --> 05:41.820]  подсунете там, я не знаю, рациональные числа, вот
[05:41.940 --> 05:48.900]  Ваши с прошлого семестра, не было такого, а то, мало
[05:48.900 --> 05:52.540]  ли, там, какая-нибудь длинная рифметика там, вот это все.
[05:52.540 --> 05:55.140]  Это, с одной стороны, но это мы вот себе на уровне
[05:55.140 --> 05:56.140]  идеи прописываем.
[05:56.140 --> 05:58.140]  Значит, что мы еще хотим?
[05:58.140 --> 06:03.140]  Еще мы, наверное, хотим уметь как-то пробегаться по рёбрам,
[06:03.140 --> 06:04.140]  правда?
[06:04.140 --> 06:05.140]  Хотим?
[06:05.140 --> 06:08.140]  Или не хотим?
[06:08.140 --> 06:11.140]  А как мы будем пробегаться по рёбрам?
[06:11.460 --> 06:12.460]  Ну да.
[06:12.460 --> 06:15.460]  То есть, желательно просто, чтобы мы тут ничего не портили,
[06:15.460 --> 06:18.460]  потому что, если нам выдадут, то есть, храним тут вектор
[06:18.460 --> 06:20.460]  рёбер, и мы тут просто в них влезаем, и все старты
[06:20.460 --> 06:24.460]  финиша переделываем, то это будет не очень безопасно.
[06:24.460 --> 06:25.460]  Почему не очень безопасно?
[06:25.460 --> 06:30.460]  Потому что, ну, потому что у каждого ребра есть напарник,
[06:30.460 --> 06:32.940]  и, как бы, если пользователь тогда должен принимать
[06:32.940 --> 06:35.460]  на себя обязательство, что он, если испортил ребро,
[06:35.460 --> 06:39.460]  то должен как-то испортить и обратное.
[06:39.460 --> 06:40.460]  Есть такое, да?
[06:40.780 --> 06:41.780]  Вот.
[06:44.780 --> 06:46.780]  Поэтому, как бы, желательно, чтобы он все рёбра, в том
[06:46.780 --> 06:50.980]  числе и обратные, мог перебрать, мог, наверное, по ним даже
[06:50.980 --> 06:55.100]  пустить поток, но самое интересное, что, ведь, обратите
[06:55.100 --> 06:57.300]  внимание, когда он будет пускать поток, надо что-то
[06:57.300 --> 07:00.300]  и по обратным рёбрам сделать.
[07:00.300 --> 07:02.300]  И вот здесь, кстати, вот будет очень интересный,
[07:02.300 --> 07:06.300]  кстати, еще финт ушами, на самом деле, нас ждать.
[07:07.140 --> 07:11.140]  Потому что мы сейчас пойдем, вот мы говорили, что мы храним
[07:11.140 --> 07:14.140]  в остаточной сети по каждому ребру обратные, и у них есть
[07:14.140 --> 07:16.140]  какие-то профессиональные способности, да?
[07:16.140 --> 07:19.140]  Так вот, мы здесь, в данном случае, мы пойдем, на самом
[07:19.140 --> 07:20.140]  деле, немножко по-другому.
[07:20.140 --> 07:27.140]  Мы, на самом деле, будем поддерживать нод, поддерживать
[07:27.140 --> 07:30.140]  инвариант на тему того, что у вас есть прямое ребро
[07:30.140 --> 07:34.140]  и обратное ребро, и сумма потоков по ним равна нулю.
[07:34.980 --> 07:41.980]  Вот, ну в этом месте, пожалуй, так, выключу-ка я пока телевизор,
[07:41.980 --> 07:45.980]  потому что в этом месте нам, как раз, я думаю, пришло
[07:45.980 --> 07:49.980]  время немножко поговорить о второй концепции, определении.
[07:49.980 --> 07:53.980]  Вот у нас была наша, вот такая, логично такая, псевдопрограммистская
[07:53.980 --> 07:57.980]  концепция, ну вот, как выяснилось, да, это будет близко к тому,
[07:57.980 --> 07:59.980]  как мы будем писать, но не то.
[07:59.980 --> 08:00.980]  Значит, смотрите.
[08:01.820 --> 08:05.820]  А на самом деле, определение в каком-нибудь кормане будет
[08:05.820 --> 08:07.820]  написано следующее.
[08:07.820 --> 08:09.820]  То есть, определение.
[08:09.820 --> 08:11.820]  То есть, смотрите, тут мы пишем так.
[08:11.820 --> 08:13.820]  Значит, смотрите.
[08:13.820 --> 08:19.820]  Сеть в данном случае G задается так, смотрите.
[08:19.820 --> 08:23.820]  V, C, S, T.
[08:24.660 --> 08:35.660]  Да, C, значит, это VXV в R.
[08:35.660 --> 08:37.660]  Больше либо равно нуля.
[08:41.660 --> 08:47.660]  С способность S, ну понятно, и stock, тут все то же самое,
[08:47.660 --> 08:49.660]  T, тоже stock, вот.
[08:49.660 --> 08:53.660]  Тут все в порядке, тут все хорошо.
[08:54.500 --> 08:56.500]  Вот, понимаете, да?
[08:57.500 --> 08:59.500]  И кем у нас это приводит?
[08:59.500 --> 09:01.500]  Ну вот, теперь, а что такое поток?
[09:03.500 --> 09:05.500]  То есть, ну здесь чем отличается?
[09:05.500 --> 09:07.500]  То есть, мы как бы на самом деле говорим, что...
[09:15.500 --> 09:17.500]  Ну вот, значит, смотрите, V квадрат.
[09:17.500 --> 09:19.500]  Что такое V квадрат?
[09:19.500 --> 09:21.500]  Ну вот.
[09:22.340 --> 09:24.340]  Вот, да.
[09:24.340 --> 09:28.340]  То есть, если раньше мы использовали список смежности
[09:28.340 --> 09:31.340]  и говорили, что пропускная способность 0, то то же самое,
[09:31.340 --> 09:33.340]  что ребра нет.
[09:33.340 --> 09:35.340]  То есть, здесь мы пойдем по-другому.
[09:35.340 --> 09:37.340]  Теперь мы говорим, что наоборот, между любыми двумя ребрами
[09:37.340 --> 09:39.340]  в вершинами есть ребро.
[09:39.340 --> 09:43.340]  Просто оно иногда пропускной способности 0.
[09:43.340 --> 09:47.340]  Ну, то есть, условно там, скажем так,
[09:48.180 --> 09:51.180]  на самом деле, действительно, от Питера до Новосибирска
[09:51.180 --> 09:53.180]  на самом деле есть прямая дорога.
[09:53.180 --> 09:55.180]  Просто абсолютно прямая дорога.
[09:55.180 --> 09:59.180]  Просто по ней не может поехать больше нуля машин.
[10:01.180 --> 10:03.180]  Ну вот.
[10:03.180 --> 10:05.180]  А еще мы говорим, что...
[10:05.180 --> 10:07.180]  Да, вы говорите мне, что между Москвой и Питером
[10:07.180 --> 10:09.180]  есть две дороги.
[10:09.180 --> 10:11.180]  Одна бесплатная, другая платная.
[10:11.180 --> 10:13.180]  Так вот, с нашей точки зрения, это одна дорога.
[10:13.180 --> 10:17.180]  Просто если по одной едет 57 машин, на другой 179,
[10:17.180 --> 10:19.180]  вы говорите, что на самом деле это одна дорога,
[10:19.180 --> 10:21.180]  по которой едут 236 машин.
[10:21.180 --> 10:25.180]  Ну, с нашей точки зрения, пока задача о потоке нам по барабану.
[10:25.180 --> 10:27.180]  Вот технически, конечно, у нас будут проблемы.
[10:27.180 --> 10:31.180]  Потому что, например, у вас первая же задача в домашнем задании
[10:31.180 --> 10:33.180]  будет задача, найдите поток и, пожалуйста, по каждому ребру
[10:33.180 --> 10:35.180]  напишите, сколько там течет.
[10:35.180 --> 10:37.180]  Поэтому если вам там подсунут кратные ребра,
[10:37.180 --> 10:39.180]  то в такую интерпретацию у вас проблемы.
[10:39.180 --> 10:41.180]  Вот, понимаете, да?
[10:41.180 --> 10:43.180]  Но...
[10:43.180 --> 10:45.180]  Да.
[10:45.180 --> 10:47.180]  Да, то есть понятно, что вы можете просуммировать,
[10:47.180 --> 10:49.180]  потом распределить этот поток как угодно,
[10:49.180 --> 10:51.180]  но как бы это...
[10:51.180 --> 10:53.180]  Это понятно, что это техническая проблема,
[10:53.180 --> 10:55.180]  но просто как часто говорят в программировании,
[10:55.180 --> 10:57.180]  вам придется с этим работать.
[10:59.180 --> 11:01.180]  Да, проблема в том, что придется работать,
[11:01.180 --> 11:03.180]  а не с тем, что это там принципиально сложно.
[11:03.180 --> 11:05.180]  Просто надо помнить об этой гадости.
[11:07.180 --> 11:09.180]  Ну, то есть всякое там бывает.
[11:09.180 --> 11:11.180]  Ну, что делать, да, это программирование.
[11:11.180 --> 11:13.180]  Ну, как бы, как Gen2Linux.
[11:13.180 --> 11:15.180]  Gen2Linux, операционная система,
[11:15.180 --> 11:17.180]  в которой вы можете сделать все,
[11:17.180 --> 11:19.180]  и вы будете делать все.
[11:19.180 --> 11:21.180]  Да.
[11:21.180 --> 11:23.180]  Вот, так вот.
[11:23.180 --> 11:25.180]  Что такое поток?
[11:25.180 --> 11:27.180]  И вот сейчас будет внезапность.
[11:27.180 --> 11:29.180]  Как вот я специально не начинал,
[11:29.180 --> 11:31.180]  вот я обычно начинаю с этого определения,
[11:31.180 --> 11:33.180]  но я сейчас не начинал, потому что оно сейчас будет
[11:33.180 --> 11:35.180]  выглядеть весьма неожиданно.
[11:35.180 --> 11:37.180]  Определение, поток f в этой сети,
[11:39.180 --> 11:41.180]  это внезапно
[11:41.180 --> 11:43.180]  функция.
[11:43.180 --> 11:45.180]  Да, пока все сходится, да.
[11:45.180 --> 11:47.180]  Невероятно.
[11:47.180 --> 11:49.180]  Тоже от vxv
[11:49.180 --> 11:51.180]  itr.
[11:53.180 --> 11:55.180]  Так, что, не видно ничего, да?
[11:55.180 --> 11:57.180]  Так, сейчас.
[11:59.180 --> 12:01.180]  Сейчас, погодите, сейчас все будет спокойно.
[12:01.180 --> 12:03.180]  Сейчас вы увидите
[12:03.180 --> 12:05.180]  лучшее в мире.
[12:05.180 --> 12:07.180]  Да.
[12:07.180 --> 12:09.180]  Посмотрим, что. Смотрите.
[12:09.180 --> 12:11.180]  Такая, что.
[12:13.180 --> 12:15.180]  Значит, первая.
[12:15.180 --> 12:17.180]  Значит.
[12:17.180 --> 12:19.180]  Смотрите, первое свойство.
[12:19.180 --> 12:21.180]  Ну, первое свойство пока
[12:21.180 --> 12:23.180]  напишем такое же.
[12:25.180 --> 12:27.180]  Ну, вот. Давайте так,
[12:27.180 --> 12:29.180]  что для любых, на этот раз пишется,
[12:29.180 --> 12:31.180]  для любой пары вершин,
[12:31.180 --> 12:33.180]  вот f от uv меньше либо равно
[12:33.180 --> 12:35.180]  cv.
[12:35.180 --> 12:37.180]  Но на этот раз, обратите внимание, я 0 не пишу.
[12:39.180 --> 12:41.180]  Обратите внимание.
[12:41.180 --> 12:43.180]  И не случайно.
[12:43.180 --> 12:45.180]  Потому, что
[12:45.180 --> 12:47.180]  еще будет важное условие.
[12:47.180 --> 12:49.180]  Для любых uv
[12:49.180 --> 12:51.180]  верно следующее.
[12:51.180 --> 12:53.180]  f от uv
[12:53.180 --> 12:55.180]  равно
[12:55.180 --> 12:57.180]  минус f от v.
[13:01.180 --> 13:03.180]  Вот.
[13:05.180 --> 13:07.180]  Нет, видите. Но тут даже еще круче.
[13:07.180 --> 13:09.180]  На самом деле, как бы.
[13:15.180 --> 13:17.180]  Нет, ну тут...
[13:25.180 --> 13:27.180]  А теперь их нет.
[13:27.180 --> 13:29.180]  А сейчас посмотрим.
[13:29.180 --> 13:31.180]  Нет, просто.
[13:31.180 --> 13:33.180]  Нет, на самом деле это удобно так мыслить.
[13:33.180 --> 13:35.180]  Потому, что раньше нам говорилось, что там, скажем,
[13:35.180 --> 13:37.180]  что-то втекает, что-то вытекает.
[13:37.180 --> 13:39.180]  А теперь мы примоем это к единообразию.
[13:39.180 --> 13:41.180]  Теперь она говорит, в нас въехало,
[13:41.180 --> 13:43.180]  как бы, к нам приехало пять машин,
[13:43.180 --> 13:45.180]  в нас въехало.
[13:45.180 --> 13:47.180]  Это тоже самое, что из нас
[13:47.180 --> 13:49.180]  выехало минус пять машин.
[13:49.180 --> 13:51.180]  Да. Круто.
[13:51.180 --> 13:53.180]  Из нас, да. Что случилось? Из нас выехали машины.
[13:53.180 --> 13:55.180]  Ну, больше кислорода. Сколько выехало?
[13:55.180 --> 13:57.180]  Минус пять. Ага, прям
[13:57.180 --> 13:59.180]  в стенку, ну да.
[13:59.180 --> 14:01.180]  Вот.
[14:01.180 --> 14:03.180]  Ну вот в 0,8 раз.
[14:03.180 --> 14:05.180]  Да, именно, именно.
[14:05.180 --> 14:07.180]  Ну да, очень удобно, да.
[14:07.180 --> 14:09.180]  И
[14:09.180 --> 14:11.180]  уже сразу в третьем
[14:11.180 --> 14:13.180]  аксиоме, на самом деле, сразу
[14:13.180 --> 14:15.180]  начинает быть видно, как это
[14:15.180 --> 14:17.180]  приятно, на самом деле, с этим работать.
[14:17.180 --> 14:19.180]  Потому, что математически все эти утверждения, которые
[14:19.180 --> 14:21.180]  мы доказали, сейчас мы даже чуть-чуть поиграемся в это,
[14:21.180 --> 14:23.180]  доказываются сильно проще.
[14:23.180 --> 14:25.180]  Ну, в принципе, писать меньше.
[14:25.180 --> 14:27.180]  Хотя, вот, смысл, конечно, немножко
[14:27.180 --> 14:29.180]  завуалирован.
[14:29.180 --> 14:31.180]  Вот. Ну и теперь
[14:31.180 --> 14:33.180]  третья аксиома, вот это сохранение, да,
[14:33.180 --> 14:35.180]  что, типа, сколько втекает, сколько вытекает.
[14:37.180 --> 14:39.180]  Теперь она звучит так, что
[14:39.180 --> 14:41.180]  для любой вершины, ну, допустим,
[14:41.180 --> 14:43.180]  не исток и несток,
[14:43.180 --> 14:45.180]  верно что?
[14:45.180 --> 14:47.180]  Что
[14:47.180 --> 14:49.180]  сумма, просто теперь
[14:51.180 --> 14:53.180]  всего вытекает, то есть из нее суммарно
[14:53.180 --> 14:55.180]  вытекает ноль
[14:55.180 --> 14:57.180]  единиц потока. Все.
[14:59.180 --> 15:01.180]  То есть вспомни, где я еще такую конструкцию
[15:01.180 --> 15:03.180]  имею.
[15:03.180 --> 15:05.180]  Не знаю.
[15:07.180 --> 15:09.180]  Ну вот.
[15:09.180 --> 15:11.180]  То есть вот такая вот удобство.
[15:13.180 --> 15:15.180]  Красивая. Вот. То есть, видите, то есть теперь
[15:15.180 --> 15:17.180]  не надо писать это сумма входящих, суммы
[15:17.180 --> 15:19.180]  исходящих. Тут вот уже по умолчанию учтено,
[15:19.180 --> 15:21.180]  что входящие учтены там, условно,
[15:21.180 --> 15:23.180]  со знаком минуса и исходящие со знаком плюс.
[15:23.180 --> 15:25.180]  Поэтому вот. Получилось то,
[15:25.180 --> 15:27.180]  что...
[15:27.180 --> 15:29.180]  как следствие.
[15:29.180 --> 15:31.180]  Да, ну это просто прямое следствие
[15:31.180 --> 15:33.180]  вот этого условия.
[15:33.180 --> 15:35.180]  То есть как бы f от vv равно
[15:35.180 --> 15:37.180]  минус f от vv. Следовательно,
[15:37.180 --> 15:39.180]  f от vv равно нулю автоматически.
[15:41.180 --> 15:43.180]  Вот. Ну вот давайте можем
[15:43.180 --> 15:45.180]  как бы...
[15:45.180 --> 15:47.180]  Чем это становится еще удобнее?
[15:47.180 --> 15:49.180]  Ну, как вы думаете,
[15:49.180 --> 15:51.180]  к чему равно
[15:51.180 --> 15:53.180]  теперь равна величина потока?
[15:53.180 --> 15:55.180]  Да, то есть теперь она тоже
[15:55.180 --> 15:57.180]  равна вполне себе короткой вещи.
[15:57.180 --> 15:59.180]  f от
[15:59.180 --> 16:01.180]  f от sv.
[16:01.180 --> 16:03.180]  Все.
[16:03.180 --> 16:05.180]  А модуль ft
[16:05.180 --> 16:07.180]  он теперь равен
[16:09.180 --> 16:11.180]  f от vt.
[16:11.180 --> 16:13.180]  Красота, правда?
[16:13.180 --> 16:15.180]  Маленькую писать.
[16:15.180 --> 16:17.180]  Не здесь.
[16:17.180 --> 16:19.180]  А, ну, пожалуйста.
[16:19.180 --> 16:21.180]  Это важно.
[16:21.180 --> 16:23.180]  Ой. В каком месте важно?
[16:23.180 --> 16:25.180]  Как только мы докажем, что это одно и то же
[16:25.180 --> 16:27.180]  называется модуль f, это уже неважно.
[16:27.180 --> 16:29.180]  Ну ладно. Давайте вот
[16:29.180 --> 16:31.180]  попробуем сейчас еще раз доказать,
[16:31.180 --> 16:33.180]  что модуль
[16:33.180 --> 16:35.180]  fs равно
[16:35.180 --> 16:37.180]  модуль ft.
[16:39.180 --> 16:41.180]  Так что смотрите. Звучит это примерно
[16:41.180 --> 16:43.180]  так.
[16:43.180 --> 16:45.180]  То есть смотрите.
[16:45.180 --> 16:47.180]  То есть давайте
[16:47.180 --> 16:49.180]  просуммируем f по всем ребрам.
[16:49.180 --> 16:51.180]  То есть 0
[16:51.180 --> 16:53.180]  равен, сумма
[16:53.180 --> 16:55.180]  по всем
[16:55.180 --> 16:57.180]  uv,
[16:57.180 --> 16:59.180]  f от uv.
[16:59.180 --> 17:01.180]  Здесь я пишу
[17:01.180 --> 17:03.180]  второе условие.
[17:03.180 --> 17:05.180]  По второму условию это верно, потому что каждое ребро
[17:05.180 --> 17:07.180]  как бы взаимоуничтожается само собой.
[17:07.180 --> 17:09.180]  Понимаете, да?
[17:09.180 --> 17:11.180]  Это
[17:11.180 --> 17:13.180]  то же самое, да?
[17:13.180 --> 17:15.180]  Но теперь замечаем, что это то же самое,
[17:15.180 --> 17:17.180]  что как бы пробежаться по всем вершинам u
[17:17.180 --> 17:19.180]  и для
[17:19.180 --> 17:21.180]  каждой вершины u пробежаться по
[17:21.180 --> 17:23.180]  всем вершинам v.
[17:23.180 --> 17:25.180]  Это я просто вот
[17:25.180 --> 17:27.180]  переписал. Чуть прогруппировал.
[17:27.180 --> 17:29.180]  Теперь по условию
[17:29.180 --> 17:31.180]  номер 3.
[17:31.180 --> 17:33.180]  Как бы у нас
[17:33.180 --> 17:35.180]  я тут убил все, кроме
[17:35.180 --> 17:37.180]  тех же сумм.
[17:37.180 --> 17:39.180]  То есть сумма f от sv
[17:39.180 --> 17:41.180]  плюс
[17:41.180 --> 17:43.180]  суммы f от
[17:43.180 --> 17:45.180]  tv.
[17:45.180 --> 17:47.180]  Вот.
[17:47.180 --> 17:49.180]  То есть vv
[17:49.180 --> 17:51.180]  и vv.
[17:51.180 --> 17:53.180]  Но это автоматически понятно равно
[17:53.180 --> 17:55.180]  модуль fs
[17:55.180 --> 17:57.180]  минус модуль ft.
[17:57.180 --> 17:59.180]  Все, доказательство окончено.
[17:59.180 --> 18:01.180]  То есть в общем-то
[18:01.180 --> 18:03.180]  сделали мы в общем-то то же самое
[18:03.180 --> 18:05.180]  абсолютно, да?
[18:05.180 --> 18:07.180]  Только вместо
[18:07.180 --> 18:09.180]  расписи входящих и исходящих
[18:09.180 --> 18:11.180]  мы их просто вот тут зашили вот сюда
[18:11.180 --> 18:13.180]  сразу. Вот в это вот условие.
[18:13.180 --> 18:15.180]  Понимаете, да?
[18:17.180 --> 18:19.180]  Вот.
[18:19.180 --> 18:21.180]  Более того, кстати, обратите внимание
[18:21.180 --> 18:23.180]  вот на какой интересный факт еще
[18:23.180 --> 18:25.180]  связанный. Потому что видим, что
[18:25.180 --> 18:27.180]  здесь потоки задаются матрицей смежности
[18:27.180 --> 18:29.180]  просто иногда нулей, да?
[18:29.180 --> 18:31.180]  Вот почему нам было в первом определении
[18:31.180 --> 18:33.180]  так важно было, помните я даже сначала
[18:33.180 --> 18:35.180]  хотел там писать отрицательные потоки,
[18:35.180 --> 18:37.180]  но потом почему-то отказался, да?
[18:37.180 --> 18:39.180]  Ну вот.
[18:39.180 --> 18:41.180]  Ну почему, ну вот.
[18:41.180 --> 18:43.180]  Ну да.
[18:43.180 --> 18:45.180]  Нет, то я бы говорил, что
[18:45.180 --> 18:47.180]  там может быть поток, может быть отрицательный.
[18:47.180 --> 18:49.180]  Да, физически непонятно, что это.
[18:49.180 --> 18:51.180]  В данном случае теперь заметим следующее.
[18:51.180 --> 18:53.180]  Что если у вас в сети
[18:53.180 --> 18:55.180]  есть ребро от u dv
[18:55.180 --> 18:57.180]  с пропускной способностью, например там
[18:57.180 --> 18:59.180]  5, а обратно
[18:59.180 --> 19:01.180]  ребра нет, ну это не остаточная
[19:01.180 --> 19:03.180]  сеть, да?
[19:03.180 --> 19:05.180]  То обратите внимание, то автоматически
[19:05.180 --> 19:07.180]  будет соблюдаться условие,
[19:07.180 --> 19:09.180]  что здесь будет нечто больше
[19:09.180 --> 19:11.180]  либо равно нуля.
[19:11.180 --> 19:13.180]  Автоматически? Да.
[19:13.180 --> 19:15.180]  Причина очень
[19:15.180 --> 19:17.180]  проста. То, что вот этого
[19:17.180 --> 19:19.180]  ребра нет, то есть как вы сказали,
[19:19.180 --> 19:21.180]  на самом деле ребро есть.
[19:21.180 --> 19:23.180]  Просто у него
[19:23.180 --> 19:25.180]  пропускная способность равна нулю.
[19:25.180 --> 19:27.180]  Это означает,
[19:27.180 --> 19:29.180]  что здесь должно стоять число меньше
[19:29.180 --> 19:31.180]  либо равно нуля.
[19:31.180 --> 19:33.180]  Но так как тут стоит минус вот это,
[19:33.180 --> 19:35.180]  значит тут всегда больше либо равно нуля.
[19:37.180 --> 19:39.180]  Вот такое удобство.
[19:39.180 --> 19:41.180]  Понимаете, да?
[19:41.180 --> 19:43.180]  Поэтому будет автоматически.
[19:43.180 --> 19:45.180]  Вот кстати,
[19:45.180 --> 19:47.180]  если говорить об остаточной сети,
[19:47.180 --> 19:49.180]  то остаточная сеть формируется
[19:49.180 --> 19:51.180]  еще проще.
[19:51.180 --> 19:53.180]  То есть остаточная сеть здесь
[19:53.180 --> 19:55.180]  формируется вообще так.
[19:55.180 --> 19:57.180]  То есть остаточная сеть, вот так вот определение
[19:57.180 --> 19:59.180]  в этой технологии.
[19:59.180 --> 20:01.180]  Остаточная сеть
[20:03.180 --> 20:05.180]  это
[20:05.180 --> 20:07.180]  что такое?
[20:07.180 --> 20:09.180]  Это WCFST.
[20:11.180 --> 20:13.180]  Где я просто...
[20:13.180 --> 20:15.180]  Пишем вот тупо.
[20:15.180 --> 20:17.180]  CF от UV это просто равно
[20:17.180 --> 20:19.180]  C от
[20:19.180 --> 20:21.180]  UV
[20:21.180 --> 20:23.180]  минус F от UV.
[20:23.180 --> 20:25.180]  То есть формально говоря в этом месте
[20:25.180 --> 20:27.180]  желательно формально доказать, что это
[20:27.180 --> 20:29.180]  сеть.
[20:35.180 --> 20:37.180]  То есть знаете как-то
[20:37.180 --> 20:39.180]  для следующего фокуса
[20:39.180 --> 20:41.180]  мне понадобится
[20:41.180 --> 20:43.180]  моя ображительная улыбка
[20:43.180 --> 20:45.180]  ловкость рук и называется
[20:45.180 --> 20:47.180]  10 стальных кольев.
[20:47.180 --> 20:49.180]  Я назвал этот фокус
[20:49.180 --> 20:51.180]  колья.
[20:51.180 --> 20:53.180]  Ну вот здесь примерно то же самое.
[20:55.180 --> 20:57.180]  Вот.
[20:57.180 --> 20:59.180]  Нет ну CF
[20:59.180 --> 21:01.180]  очаровательный человек на самом деле.
[21:01.180 --> 21:03.180]  Вот.
[21:03.180 --> 21:05.180]  Значит получается
[21:05.180 --> 21:07.180]  примерно...
[21:07.180 --> 21:09.180]  Там на самом деле было бы чуть сложнее
[21:09.180 --> 21:11.180]  может быть так, но здесь еще проще, потому что
[21:11.180 --> 21:13.180]  здесь все что надо доказать это то, что вот это вот больше либо
[21:13.180 --> 21:15.180]  равно нуля.
[21:15.180 --> 21:17.180]  Но то, что это больше либо равно нуля следует
[21:17.180 --> 21:19.180]  из вот этого условия.
[21:21.180 --> 21:23.180]  Понимаете, да?
[21:25.180 --> 21:27.180]  Вот.
[21:29.180 --> 21:31.180]  Но при этом значит...
[21:31.180 --> 21:33.180]  Но как ее хранить?
[21:33.180 --> 21:35.180]  Формально говоря если у вас по ребру
[21:35.180 --> 21:37.180]  величина 5 течет
[21:37.180 --> 21:39.180]  допустим 2
[21:39.180 --> 21:41.180]  2 единицы потока, то здесь течет
[21:41.180 --> 21:43.180]  минус 2. То есть в остаточной сети
[21:43.180 --> 21:45.180]  формально говоря
[21:45.180 --> 21:47.180]  мы бы писали тут ребро прописной способности
[21:47.180 --> 21:49.180]  2, чтобы тут было.
[21:49.180 --> 21:51.180]  Тут было бы 3, тут было бы
[21:51.180 --> 21:53.180]  2, правда?
[21:53.180 --> 21:55.180]  Вот.
[21:55.180 --> 21:57.180]  Но конечно гораздо удобнее
[21:57.180 --> 21:59.180]  было бы, чтобы ребра не трогать
[21:59.180 --> 22:01.180]  обычно просто писать, что как бы прописная
[22:01.180 --> 22:03.180]  способность 0, а течет тут минус 2.
[22:03.180 --> 22:05.180]  Вот.
[22:05.180 --> 22:07.180]  То есть как бы, то есть мы говорим, что
[22:07.180 --> 22:09.180]  если прописная способность 0, это не значит, что тут
[22:09.180 --> 22:11.180]  ничего течет не будет.
[22:11.180 --> 22:13.180]  Ну вот. То есть бывает
[22:13.180 --> 22:15.180]  такое, то есть знаете это как
[22:15.180 --> 22:17.180]  классическая ситуация, то есть типа
[22:17.180 --> 22:19.180]  лекция, на лекции 3 человека.
[22:19.180 --> 22:21.180]  Вот.
[22:23.180 --> 22:25.180]  Внезапно 5 встают
[22:25.180 --> 22:27.180]  и уходят.
[22:29.180 --> 22:31.180]  Да, вот. Вот лектор тоже грустно
[22:31.180 --> 22:33.180]  думает. Ну да, вот сейчас еще двое придут
[22:33.180 --> 22:35.180]  вообще никого не будет.
[22:35.180 --> 22:37.180]  Да.
[22:37.180 --> 22:39.180]  Такая вот ситуация. Да.
[22:39.180 --> 22:41.180]  Вот. То есть здесь вот тоже нормально.
[22:41.180 --> 22:43.180]  Да. То есть как бы ой, сейчас тут две машины приедут
[22:43.180 --> 22:45.180]  и тут пустота будет.
[22:45.180 --> 22:47.180]  Вот. Такая вот удобно.
[22:47.180 --> 22:49.180]  Причем, кстати, обратите внимание
[22:49.180 --> 22:51.180]  еще на маленькую приятную вещь. Вот мы
[22:51.180 --> 22:53.180]  говорим об ориентированном графе.
[22:53.180 --> 22:55.180]  Да.
[22:55.180 --> 22:57.180]  Иногда сеть бывает не ориентированная.
[22:57.180 --> 22:59.180]  То есть мы же чаще, как вообще даже сложно
[22:59.180 --> 23:01.180]  себе вообразить ориентированную
[23:01.180 --> 23:03.180]  трубу.
[23:03.180 --> 23:05.180]  Ну, если только не предполагать,
[23:05.180 --> 23:07.180]  что там вода понятие течет там
[23:07.180 --> 23:09.180]  под действием силы тяжести, конечно.
[23:09.180 --> 23:11.180]  Да, но обычно
[23:11.180 --> 23:13.180]  как бы наоборот. То есть обычно просто
[23:13.180 --> 23:15.180]  труба есть, у нее есть радиус, но вода может
[23:15.180 --> 23:17.180]  течет туда и туда.
[23:17.180 --> 23:19.180]  Это решается
[23:19.180 --> 23:21.180]  очень просто. Смотрите.
[23:21.180 --> 23:23.180]  То есть на самом деле, да. Ну, в данном
[23:23.180 --> 23:25.180]  определении это решается очень просто. Просто это означает,
[23:25.180 --> 23:27.180]  что там С от УВ и С от ВУ
[23:27.180 --> 23:29.180]  будут равны пяти.
[23:29.180 --> 23:31.180]  То есть обычно в ориентированной сети
[23:31.180 --> 23:33.180]  тут иногда в формане вообще возникает
[23:33.180 --> 23:35.180]  даже техническое условие, что
[23:35.180 --> 23:37.180]  для любых двух вершин там ребро идет
[23:37.180 --> 23:39.180]  не более чем в одну сторону.
[23:39.180 --> 23:41.180]  Ну, чтобы типа вот обратно это
[23:41.180 --> 23:43.180]  легче было прописывать. Но на самом деле необходимости
[23:43.180 --> 23:45.180]  в этом нет. Просто мы говорим, что если
[23:45.180 --> 23:47.180]  есть два вот таких ребра, то они автоматически
[23:47.180 --> 23:49.180]  обратны друг к другу.
[23:49.180 --> 23:51.180]  То есть если у нас будет какая-нибудь
[23:51.180 --> 23:53.180]  неориентированная сеть, то как бы ничего страшного.
[23:53.180 --> 23:55.180]  То есть там, допустим, жило было какое-нибудь
[23:55.180 --> 23:57.180]  ребро, семь. И говорим, что
[23:57.180 --> 23:59.180]  вода может течет туда и туда, главное
[23:59.180 --> 24:01.180]  чтобы не больше семи.
[24:01.180 --> 24:03.180]  Для нас это оказывается там
[24:03.180 --> 24:05.180]  в какой-нибудь сети.
[24:05.180 --> 24:07.180]  То есть просто говорим, что давайте в эту сторону семь
[24:07.180 --> 24:09.180]  и в эту сторону семь, и они обратные.
[24:09.180 --> 24:11.180]  То есть обязательно, что тут должно быть
[24:11.180 --> 24:13.180]  х-х.
[24:15.180 --> 24:17.180]  Вот. То есть с этой точки зрения
[24:17.180 --> 24:19.180]  так.
[24:19.180 --> 24:21.180]  Ну вот, с точки зрения, так сказать,
[24:21.180 --> 24:23.180]  классического определения, да.
[24:23.180 --> 24:25.180]  Там могут быть просто проблемы, что нам
[24:25.180 --> 24:27.180]  сначала придется определить ребро.
[24:27.180 --> 24:29.180]  Точнее, вот эти два ориентированных
[24:29.180 --> 24:31.180]  ребра.
[24:31.180 --> 24:33.180]  А потом...
[24:33.180 --> 24:35.180]  А потом еще и...
[24:35.180 --> 24:37.180]  А потом еще и каждому из них
[24:37.180 --> 24:39.180]  вводить обратно. И тогда ребро может быть учителено.
[24:41.180 --> 24:43.180]  Вот. А вот я про это и говорю.
[24:43.180 --> 24:45.180]  На самом деле, конечно, в этом
[24:45.180 --> 24:47.180]  нет необходимости. Тем более, что если учителить,
[24:47.180 --> 24:49.180]  то у вас был бы риск, что вы и туда
[24:49.180 --> 24:51.180]  воду пропустите, и сюда воду пропустите,
[24:51.180 --> 24:53.180]  и у вас тут будет циркуляция такая.
[24:53.180 --> 24:55.180]  То есть будет такие две машинки, которые будут
[24:55.180 --> 24:57.180]  гонять туда-сюда.
[24:59.180 --> 25:01.180]  Вот. То есть понятно, что в реальности
[25:01.180 --> 25:03.180]  вы это все просуммируете, конечно,
[25:03.180 --> 25:05.180]  но... А будете потом отчитывать,
[25:05.180 --> 25:07.180]  что куча машин бегает.
[25:11.180 --> 25:13.180]  В одну сторону пять.
[25:13.180 --> 25:15.180]  Ну тогда ничего страшного в этом нет.
[25:15.180 --> 25:17.180]  Тогда это означает, что мы просто нарисуем
[25:17.180 --> 25:19.180]  вот так. В одну пять,
[25:19.180 --> 25:21.180]  в другую три. Или сколько там у вас?
[25:21.180 --> 25:23.180]  И вот, пожалуйста. И тогда все равно
[25:23.180 --> 25:25.180]  оказывается удобно. Потому что если у вас по этому
[25:25.180 --> 25:27.180]  ребру потекчет, скажем, 4 единицы
[25:27.180 --> 25:29.180]  потока, а по этой один,
[25:29.180 --> 25:31.180]  да, то по большому
[25:31.180 --> 25:33.180]  счету это то же самое,
[25:33.180 --> 25:35.180]  что тут потекчет 3 единицы потока, а тут
[25:35.180 --> 25:37.180]  ноль.
[25:37.180 --> 25:39.180]  Да, это
[25:39.180 --> 25:41.180]  в старом понятии
[25:41.180 --> 25:43.180]  нам аппарате.
[25:43.180 --> 25:45.180]  В смысле?
[25:45.180 --> 25:47.180]  А в текущем, на самом деле,
[25:47.180 --> 25:49.180]  то есть как бы, просто если сюда течет
[25:49.180 --> 25:51.180]  4 оттуда-ти, вот вы в идее, то это то же самое,
[25:51.180 --> 25:53.180]  что просто туда течет 3 и все.
[25:53.180 --> 25:55.180]  Ну в нашем понятии это будет
[25:55.180 --> 25:57.180]  конечно вот так. Минус 3 из 3.
[25:57.180 --> 25:59.180]  А при желании может быть
[25:59.180 --> 26:01.180]  минус 5 из 3.
[26:01.180 --> 26:03.180]  То есть как бы, если вы хотите
[26:03.180 --> 26:05.180]  чтобы поток тем в ту сторону,
[26:05.180 --> 26:07.180]  вы сначала вот эти три отменить,
[26:07.180 --> 26:09.180]  а потом уже допихивайте дальше.
[26:09.180 --> 26:11.180]  То есть в результате
[26:11.180 --> 26:13.180]  получится,
[26:13.180 --> 26:15.180]  в остаточной
[26:15.180 --> 26:17.180]  сети получится
[26:17.180 --> 26:19.180]  на самом деле, что тут пропускная способность
[26:19.180 --> 26:21.180]  будет 6, а тут пропускная способность
[26:21.180 --> 26:23.180]  2.
[26:27.180 --> 26:29.180]  Вот скорее так.
[26:29.180 --> 26:31.180]  Но это если в матрице смешность.
[26:33.180 --> 26:35.180]  Вот на самом деле мы совместим
[26:35.180 --> 26:37.180]  на самом деле лучшее
[26:37.180 --> 26:39.180]  из обоих подходов.
[26:41.180 --> 26:43.180]  Ну лучшее в чем?
[26:43.180 --> 26:45.180]  Потому что мы совместим, что в первом подходе нам нравится,
[26:45.180 --> 26:47.180]  что нам надо хранить не матрицу смешности, а список
[26:47.180 --> 26:49.180]  список смешности.
[26:49.180 --> 26:51.180]  Но с другой стороны, наша цель
[26:51.180 --> 26:53.180]  будет, что давайте у каждого
[26:53.180 --> 26:55.180]  ребра будет обратная, то есть
[26:55.180 --> 26:57.180]  они будут разделены на пары, и в каждом
[26:57.180 --> 26:59.180]  из них мы будем хранить пропускную, вот
[26:59.180 --> 27:01.180]  пропускная способность меняться не будет,
[27:01.180 --> 27:03.180]  но будут меняться потоки.
[27:03.180 --> 27:05.180]  Понимаете, да?
[27:05.180 --> 27:07.180]  То есть мы не будем хранить в остаточной сети пропускную
[27:07.180 --> 27:09.180]  способность 2, мы будем хранить пропускную способность
[27:09.180 --> 27:11.180]  0 и поток минус 2.
[27:11.180 --> 27:13.180]  И говорить, что
[27:13.180 --> 27:15.180]  остаточная пропускная способность это
[27:15.180 --> 27:17.180]  пропускная способность минус поток.
[27:17.180 --> 27:19.180]  Прям честно по этому
[27:19.180 --> 27:21.180]  определению.
[27:33.180 --> 27:35.180]  Ну да, вот так вот будем, да.
[27:35.180 --> 27:37.180]  Вот, видите.
[27:37.180 --> 27:39.180]  То есть это возможно.
[27:39.180 --> 27:41.180]  То есть возможно, что
[27:41.180 --> 27:43.180]  будут у нас два парных, два
[27:43.180 --> 27:45.180]  взаимообратных ребра, и у каждого из них
[27:45.180 --> 27:47.180]  пропускная способность будет больше 0, это нормально.
[27:47.180 --> 27:49.180]  Просто мы иногда
[27:49.180 --> 27:51.180]  так, ну просто это будет зависеть
[27:51.180 --> 27:53.180]  от того, ориентированная у нас сеть или
[27:53.180 --> 27:55.180]  не ориентированная.
[27:55.180 --> 27:57.180]  Вот так вот.
[27:57.180 --> 27:59.180]  Вот.
[27:59.180 --> 28:01.180]  В результате.
[28:01.180 --> 28:03.180]  Тогда мы налагаем на себя условия,
[28:03.180 --> 28:05.180]  что когда вы пропускаете поток по одному ребру,
[28:05.180 --> 28:07.180]  по другому, этот же поток
[28:07.180 --> 28:09.180]  должен быть вычтен.
[28:09.180 --> 28:11.180]  И мы должны за этим следить, но желательно,
[28:11.180 --> 28:13.180]  но следить за этим должны мы, то есть мы должны
[28:13.180 --> 28:15.180]  следить, чтобы
[28:15.180 --> 28:17.180]  пользователь мог этим воспользоваться, но не мог
[28:17.180 --> 28:19.180]  ничего напортить. Итак.
[28:19.180 --> 28:21.180]  Значит, как же нам ходить по ребрам?
[28:21.180 --> 28:23.180]  Ну, как это положено в C++,
[28:23.180 --> 28:25.180]  у нас, конечно, наверное может быть
[28:25.180 --> 28:27.180]  какой-нибудь итератор.
[28:27.180 --> 28:29.180]  Вот. Смотрите.
[28:29.180 --> 28:31.180]  Вот, давайте его
[28:31.180 --> 28:33.180]  ведем.
[28:33.180 --> 28:35.180]  Так, где он у нас там водится?
[28:39.180 --> 28:41.180]  Нет, в какой части паблика изомневился?
[28:41.180 --> 28:43.180]  В сверху, снизу писать?
[28:43.180 --> 28:45.180]  Ну, зависит.
[28:45.180 --> 28:47.180]  Нам не говорили, кажется. Не говорили?
[28:47.180 --> 28:49.180]  Не, нам говорили, что
[28:49.180 --> 28:51.180]  как хотите. Как хотите.
[28:51.180 --> 28:53.180]  Пишите везде одинаковые.
[28:53.180 --> 28:55.180]  Пожалуйста.
[28:55.180 --> 28:57.180]  Да.
[28:57.180 --> 28:59.180]  Значит, смотрите.
[28:59.180 --> 29:01.180]  Значит, стракт, но, допустим,
[29:01.180 --> 29:03.180]  edge иterator.
[29:03.180 --> 29:05.180]  Значит,
[29:05.180 --> 29:07.180]  ну, и так, здесь мы тоже немножко
[29:07.180 --> 29:09.180]  будет
[29:09.180 --> 29:11.180]  немножко оригинально, значит, смотрите, как мы
[29:11.180 --> 29:13.180]  сделаем.
[29:13.180 --> 29:15.180]  Значит, у него
[29:15.180 --> 29:17.180]  его интерфейс будет следующий.
[29:19.180 --> 29:21.180]  Можно даже на уровне интерфейса этот прописать,
[29:21.180 --> 29:23.180]  но этот супер абстрактный класс
[29:23.180 --> 29:25.180]  вот этот, но мы не будем этого делать.
[29:25.180 --> 29:27.180]  Значит, смотрите. Просто идея
[29:27.180 --> 29:29.180]  у него будет такая.
[29:31.180 --> 29:33.180]  Значит, на самом деле
[29:33.180 --> 29:35.180]  такой популярный вариант
[29:35.180 --> 29:37.180]  итератора для того, чтобы перебирать ребра,
[29:37.180 --> 29:39.180]  было бы for edge
[29:39.180 --> 29:41.180]  иterator
[29:41.180 --> 29:43.180]  it
[29:43.180 --> 29:45.180]  допустим, равно
[29:45.180 --> 29:47.180]  там network
[29:47.180 --> 29:49.180]  .begin
[29:49.180 --> 29:51.180]  от v, мы ж от вершины должны
[29:51.180 --> 29:53.180]  перебирать, да?
[29:53.180 --> 29:55.180]  И дальше it.
[29:55.180 --> 29:57.180]  valid
[29:57.180 --> 29:59.180]  it.next.
[30:03.180 --> 30:05.180]  То есть, на самом деле, ну, скажем так,
[30:05.180 --> 30:07.180]  это, конечно, больше Java иterator,
[30:07.180 --> 30:09.180]  чем C, конечно,
[30:09.180 --> 30:11.180]  потому что вся в этом месте обычно пишут
[30:11.180 --> 30:13.180]  begin, end и plus plus, да?
[30:15.180 --> 30:17.180]  Можем.
[30:17.180 --> 30:19.180]  Но, на самом деле, честно говоря,
[30:19.180 --> 30:21.180]  технология, по-моему, впервые видела даже
[30:21.180 --> 30:23.180]  не на джаве, а, собственно, реально в яндексе.
[30:25.180 --> 30:27.180]  Вот. Да, на C++.
[30:29.180 --> 30:31.180]  Че?
[30:39.180 --> 30:41.180]  Да, действительно, безобразие какое.
[30:41.180 --> 30:43.180]  Ну, он все-таки, ну, он же не класс,
[30:43.180 --> 30:45.180]  он все-таки структурка.
[30:45.180 --> 30:47.180]  Только поэтому. А так, да.
[30:47.180 --> 30:49.180]  Вот.
[30:49.180 --> 30:51.180]  Ну, значит, смотрите, что нам тут
[30:51.180 --> 30:53.180]  потребуется?
[30:53.180 --> 30:55.180]  Вот.
[30:55.180 --> 30:57.180]  То есть, хочется так перебирать.
[30:59.180 --> 31:01.180]  Ну, нам потребуется тут, конечно, какой-нибудь
[31:01.180 --> 31:03.180]  конструктор, да?
[31:03.180 --> 31:05.180]  t vertex.
[31:05.180 --> 31:07.180]  Допустим, v.
[31:07.180 --> 31:09.180]  Да, explicit, конечно.
[31:11.180 --> 31:13.180]  Ну, вот, конечно, bool
[31:13.180 --> 31:15.180]  valid. Желательно
[31:15.180 --> 31:17.180]  const.
[31:17.180 --> 31:19.180]  Хотя const необязательно, наверное.
[31:19.180 --> 31:21.180]  И, конечно,
[31:21.180 --> 31:23.180]  void next.
[31:27.180 --> 31:29.180]  Да, пока мы не забыли, значит, тут надо
[31:29.180 --> 31:31.180]  написать бла-бла-бла.
[31:35.180 --> 31:37.180]  Ну, по камере.
[31:37.180 --> 31:39.180]  Ну, в реальной жизни не знаю, но я часто люблю написать
[31:39.180 --> 31:41.180]  бла-бла-бла, что, как бы, если я забыл это реализовать,
[31:41.180 --> 31:43.180]  то, как бы, компилятор мне тыкнет носом.
[31:43.180 --> 31:45.180]  Вот.
[31:45.180 --> 31:47.180]  Ну, бла-бла-бла.
[31:47.180 --> 31:49.180]  Точное написание необязательно.
[31:49.180 --> 31:51.180]  Главное, чтобы не компилилось.
[31:51.180 --> 31:53.180]  Так что можете изобрести свое заклинание.
[31:53.180 --> 31:55.180]  Вот.
[31:55.180 --> 31:57.180]  То есть, вот очень бы хотелось.
[31:57.180 --> 31:59.180]  Но что нам еще? Ну, нам кое-что еще
[31:59.180 --> 32:01.180]  требуется от итератора.
[32:01.180 --> 32:03.180]  Ведь просто бегать
[32:03.180 --> 32:05.180]  по итератору в вакууме нам неинтересно.
[32:05.180 --> 32:07.180]  Нам, наверное, интересно ребро, которое за ним стоит.
[32:07.180 --> 32:09.180]  Не правда ли?
[32:09.180 --> 32:11.180]  Ну, вот.
[32:11.180 --> 32:13.180]  Как же это сделать?
[32:13.180 --> 32:15.180]  Точнее, давайте на уровне интерфейса
[32:15.180 --> 32:17.180]  попытаемся понять, о чем мы хотим вообще.
[32:19.180 --> 32:21.180]  Ну, ребра перебирать понятно, да, мы хотим.
[32:21.180 --> 32:23.180]  Но, наверное, еще мы хотим
[32:23.180 --> 32:25.180]  на них хотя бы смотреть.
[32:25.180 --> 32:27.180]  А еще, наверное,
[32:27.180 --> 32:29.180]  мы хотим пустить по ним поток.
[32:31.180 --> 32:33.180]  Да, мы, конечно, могли бы
[32:33.180 --> 32:35.180]  да, мы бы, конечно, могли
[32:35.180 --> 32:37.180]  что-нибудь сделать в духе там, скажем,
[32:37.180 --> 32:39.180]  edge там, t-vertex,
[32:41.180 --> 32:43.180]  там t-vertex, t-flow
[32:43.180 --> 32:45.180]  могли бы сделать, да.
[32:47.180 --> 32:49.180]  Ну, вот.
[32:49.180 --> 32:51.180]  Да, оператор звездочка.
[32:51.180 --> 32:53.180]  Да, оператор звездочка.
[32:53.180 --> 32:55.180]  Но
[32:55.180 --> 32:57.180]  я бы не рекомендовал так делать.
[32:57.180 --> 32:59.180]  Потому что это то самое
[32:59.180 --> 33:01.180]  небезопасное.
[33:01.180 --> 33:03.180]  Когда просто вы получили указатель на
[33:03.180 --> 33:05.180]  ребро, и я могу там просто взять
[33:05.180 --> 33:07.180]  и просто переписать, скажем, начало или конец.
[33:07.180 --> 33:09.180]  Или копать.
[33:11.180 --> 33:13.180]  Чего?
[33:13.180 --> 33:15.180]  А, ну, хорошо.
[33:15.180 --> 33:17.180]  Да.
[33:17.180 --> 33:19.180]  Но это redonly.
[33:19.180 --> 33:21.180]  В этом случае тогда
[33:21.180 --> 33:23.180]  более правильно, конечно, в этом случае возвращать
[33:23.180 --> 33:25.180]  константную ссылку на ребро.
[33:25.180 --> 33:27.180]  То есть то же самое, но без копирования.
[33:27.180 --> 33:29.180]  Это удобно.
[33:29.180 --> 33:31.180]  Но это само по себе,
[33:31.180 --> 33:33.180]  так сказать, redonly.
[33:33.180 --> 33:35.180]  А нам же хочется как-то еще
[33:35.180 --> 33:37.180]  поток менять.
[33:37.180 --> 33:39.180]  Для этого называется
[33:39.180 --> 33:41.180]  хотие. Ну, вот.
[33:41.180 --> 33:43.180]  С этой точки зрения, на самом деле, так как вот edge это
[33:43.180 --> 33:45.180]  что-то внутреннее, непонятно, как вы храните,
[33:45.180 --> 33:47.180]  то я бы предлагал, на самом деле, просто
[33:47.180 --> 33:49.180]  прописать вместо этого честно.
[33:49.180 --> 33:51.180]  bool get start.
[33:53.180 --> 33:55.180]  Ну, вот там, допустим, get start.
[33:57.180 --> 33:59.180]  Там, допустим,
[33:59.180 --> 34:01.180]  bool get finish.
[34:01.180 --> 34:03.180]  Тут вообще много чего.
[34:03.180 --> 34:05.180]  А почему bool-то?
[34:05.180 --> 34:07.180]  там t-vertex.
[34:07.180 --> 34:09.180]  Вот тут, может быть, даже однострочное
[34:09.180 --> 34:11.180]  не помешает, тут как ассет красиво будет.
[34:13.180 --> 34:15.180]  там t-vertex.
[34:15.180 --> 34:17.180]  get finish, вот это вот.
[34:17.180 --> 34:19.180]  Что там еще?
[34:19.180 --> 34:21.180]  t-flow
[34:21.180 --> 34:23.180]  get capacity.
[34:23.180 --> 34:25.180]  Там вот что-нибудь такое.
[34:25.180 --> 34:27.180]  Что там нам еще потребуется?
[34:27.180 --> 34:29.180]  t-flow get residual capacity.
[34:31.180 --> 34:33.180]  А, ну, конечно,
[34:33.180 --> 34:35.180]  get flow.
[34:35.180 --> 34:37.180]  Но это все
[34:37.180 --> 34:39.180]  Getter.
[34:39.180 --> 34:41.180]  Может быть, где-то даже
[34:41.180 --> 34:43.180]  не помешает написать const.
[34:45.180 --> 34:47.180]  Ну, просто.
[34:47.180 --> 34:49.180]  И, конечно,
[34:49.180 --> 34:51.180]  его величество
[34:51.180 --> 34:53.180]  push flow.
[34:53.180 --> 34:55.180]  Даже не
[34:55.180 --> 34:57.180]  void push flow.
[34:57.180 --> 34:59.180]  Ну.
[35:01.180 --> 35:03.180]  А это нет?
[35:03.180 --> 35:05.180]  Почему не пустые?
[35:05.180 --> 35:07.180]  Мы их объявляем?
[35:07.180 --> 35:09.180]  Да.
[35:09.180 --> 35:11.180]  Ну, мы ж пока не знаем.
[35:11.180 --> 35:13.180]  Да, я тут могу тоже блаблабла написать.
[35:13.180 --> 35:15.180]  Давайте напишу, чтобы было понятно.
[35:17.180 --> 35:19.180]  В смысле, мы их потом напишем?
[35:19.180 --> 35:21.180]  Да.
[35:21.180 --> 35:23.180]  Остаточное.
[35:23.180 --> 35:25.180]  Вот у меня там было написано
[35:25.180 --> 35:27.180]  residual network.
[35:27.180 --> 35:29.180]  Это называется остаточная сеть.
[35:29.180 --> 35:31.180]  Да.
[35:31.180 --> 35:33.180]  То есть по факту, да, здесь можно уже сказать.
[35:41.180 --> 35:43.180]  Вот можно прям сразу тут так
[35:43.180 --> 35:45.180]  написать на самом деле.
[35:47.180 --> 35:49.180]  Потому что
[35:49.180 --> 35:51.180]  это абстрактные интерфейсы.
[35:51.180 --> 35:53.180]  Вдруг вы захотите пользоваться не таким
[35:53.180 --> 35:55.180]  ребром.
[35:55.180 --> 35:57.180]  А в этом ребре будете еще что-нибудь хранить, мало ли.
[35:59.180 --> 36:01.180]  Хотя, конечно...
[36:01.180 --> 36:03.180]  Ну, кстати, это внутреннее дело сети.
[36:03.180 --> 36:05.180]  Можете, конечно, раз и навсегда прописать, что ребро будет
[36:05.180 --> 36:07.180]  ровно таким или каким-нибудь иначе.
[36:07.180 --> 36:09.180]  В принципе, наверное, даже можно.
[36:09.180 --> 36:11.180]  Но это не очень удобно.
[36:11.180 --> 36:13.180]  Как по мне, лучше
[36:13.180 --> 36:15.180]  просто метод, и тогда
[36:15.180 --> 36:17.180]  никто не думает, в какой там структуре.
[36:17.180 --> 36:19.180]  На самом деле, некоторые олимпиагики
[36:19.180 --> 36:21.180]  вообще не любят писать структуры,
[36:21.180 --> 36:23.180]  потому что там просто будут эти start-finish-capacity
[36:23.180 --> 36:25.180]  писать просто вот в четырех векторах.
[36:27.180 --> 36:29.180]  Или даже в четырех массивах,
[36:29.180 --> 36:31.180]  особенно вот если на паскали.
[36:31.180 --> 36:33.180]  Кстати, об этом вот.
[36:33.180 --> 36:35.180]  Так, ну что нам потребуется?
[36:35.180 --> 36:37.180]  Ну, так как...
[36:37.180 --> 36:39.180]  Ну, единственное, что нам потребуется, это, конечно...
[36:43.180 --> 36:45.180]  Конечно, объявить, что
[36:45.180 --> 36:47.180]  это наш друг.
[36:51.180 --> 36:53.180]  Ну, потому что
[36:53.180 --> 36:55.180]  понятно, что
[36:55.180 --> 36:57.180]  у него как раз будет какой-то
[36:57.180 --> 36:59.180]  мистический доступ к сети, правда?
[36:59.180 --> 37:01.180]  Видите, да?
[37:01.180 --> 37:03.180]  А, и, конечно же,
[37:03.180 --> 37:05.180]  у network будет
[37:05.180 --> 37:07.180]  begin.
[37:07.180 --> 37:09.180]  Вот inset-edge, и, конечно,
[37:09.180 --> 37:13.180]  edge-network-work,
[37:13.180 --> 37:15.180]  хресь-хресь, ой,
[37:15.180 --> 37:17.180]  а должен я тут это писать, или я могу просто
[37:17.180 --> 37:19.180]  edge-interator написать?
[37:19.180 --> 37:21.180]  Ну, давайте лучше так напишу, чтобы было понятно.
[37:21.180 --> 37:23.180]  Begin.
[37:27.180 --> 37:29.180]  Ну вот, t-vertex.
[37:29.180 --> 37:31.180]  Ну, и тут какой-то сейчас
[37:31.180 --> 37:33.180]  какая-то блаблаблашка будет.
[37:33.180 --> 37:35.180]  А, вот, кстати, еще один
[37:35.180 --> 37:37.180]  блаблаблаш.
[37:37.180 --> 37:39.180]  Так тоже работает.
[37:41.180 --> 37:43.180]  Ну, что-то значит,
[37:43.180 --> 37:45.180]  но не в этом контексте.
[37:45.180 --> 37:47.180]  Ну, что-то значит, но не в этом контексте.
[37:47.180 --> 37:49.180]  Вот, пожалуйста.
[37:51.180 --> 37:53.180]  Ну, это да.
[37:53.180 --> 37:55.180]  Это контекст, это та вещь,
[37:55.180 --> 37:57.180]  когда вы это, приходите на работу,
[37:57.180 --> 37:59.180]  вам весь мусс и все уши прожужжали,
[37:59.180 --> 38:01.180]  что копипастить нельзя,
[38:01.180 --> 38:03.180]  поэтому вы максимально
[38:03.180 --> 38:05.180]  избавлялись копипасты
[38:05.180 --> 38:07.180]  и вам отдавали по рукам.
[38:07.180 --> 38:09.180]  Ну вот, что-то.
[38:09.180 --> 38:11.180]  Потом выяснилось, что как раз там, что
[38:11.180 --> 38:13.180]  как говорится, функции может и одинаковые,
[38:13.180 --> 38:15.180]  но контексты настолько принципиально разные,
[38:15.180 --> 38:17.180]  что лучше их, лучше копипастить.
[38:19.180 --> 38:21.180]  Вот, эти и другие советы.
[38:21.180 --> 38:23.180]  Кишка 99 советов для программистов.
[38:29.180 --> 38:31.180]  Где?
[38:33.180 --> 38:35.180]  Ну, вот, я не знаю. Ну, просто можно
[38:35.180 --> 38:37.180]  Нетворк убрать, вот, наверное, вот так.
[38:39.180 --> 38:41.180]  Ну, мало ли.
[38:41.180 --> 38:43.180]  Ну, чтобы было прямо, откуда я
[38:43.180 --> 38:45.180]  ее взял, вот отсюда, да.
[38:45.180 --> 38:47.180]  Ну, по ситуации.
[38:47.180 --> 38:49.180]  Не могу сказать, что сильно хочу к этому ввязаться.
[39:03.180 --> 39:05.180]  Ну, мало ли.
[39:05.180 --> 39:07.180]  Ну, мало ли, откуда мы этот шитератор взяли, знаете.
[39:07.180 --> 39:09.180]  Как бы, с нами, локально, да.
[39:09.180 --> 39:11.180]  Теперь представьте, что кто-то,
[39:11.180 --> 39:13.180]  может, и вы будете это читать.
[39:13.180 --> 39:15.180]  Впервые в жизни.
[39:15.180 --> 39:17.180]  Ну, вот. Да, знаете, ситуация.
[39:17.180 --> 39:19.180]  Вы это написали, а потом через полгода
[39:19.180 --> 39:21.180]  в первой жизни будете это читать.
[39:21.180 --> 39:23.180]  Это реально, это реальная ситуация,
[39:23.180 --> 39:25.180]  на самом деле.
[39:25.180 --> 39:27.180]  Вот, поэтому вы сами будете искать, это шитератор
[39:27.180 --> 39:29.180]  это где вообще?
[39:29.180 --> 39:31.180]  Ну, вот, поэтому тут сразу указывают, что это здесь.
[39:33.180 --> 39:35.180]  Вот, поэтому, знаешь, можно
[39:35.180 --> 39:37.180]  не полениться, лучше написать несколько символов, так,
[39:37.180 --> 39:39.180]  чтобы потом не путься. Кстати, полгода может наступить
[39:39.180 --> 39:41.180]  на самом деле завтра ночью,
[39:41.180 --> 39:43.180]  перед дедлайном.
[39:45.180 --> 39:47.180]  Не, я не к тому, что после завтра,
[39:47.180 --> 39:49.180]  то завтра ночью будет дедлайн, конечно, нет.
[39:49.180 --> 39:51.180]  Вот. Значит, смотрите.
[39:51.180 --> 39:53.180]  Теперь давайте вот думать.
[39:53.180 --> 39:55.180]  Ну, сразу уже на уровне идеи, кстати,
[39:55.180 --> 39:57.180]  все, что нам потребуется, это еще, что
[39:57.180 --> 39:59.180]  нам потребуется ссылка на сеть.
[39:59.180 --> 40:01.180]  Потому что, к сожалению, сам в себе
[40:01.180 --> 40:03.180]  итератор внутри себя все равно
[40:03.180 --> 40:05.180]  ничего про себя не знает.
[40:05.180 --> 40:07.180]  То есть,
[40:07.180 --> 40:09.180]  у итератора
[40:09.180 --> 40:11.180]  внутри себя
[40:11.180 --> 40:13.180]  ему нужно указать
[40:13.180 --> 40:15.180]  какая-то указательная
[40:15.180 --> 40:17.180]  ссылка на то, с какой сетью он вообще работает.
[40:21.180 --> 40:23.180]  Давайте. Ну, так
[40:23.180 --> 40:25.180]  по умолчанию было, но согласен.
[40:25.180 --> 40:27.180]  Хорошо. Так что вот
[40:27.180 --> 40:29.180]  network не помешает. И, конечно же,
[40:29.180 --> 40:31.180]  значит, network
[40:31.180 --> 40:33.180]  network
[40:33.180 --> 40:35.180]  ссылка network
[40:35.180 --> 40:37.180]  и, как бы, да,
[40:37.180 --> 40:39.180]  первое, что тут обязательно надо сделать сразу,
[40:39.180 --> 40:41.180]  это network от network.
[40:41.180 --> 40:43.180]  Это уже чисто интерфейсная
[40:43.180 --> 40:45.180]  вещь. То есть, я еще не знаю, как я буду хранить
[40:45.180 --> 40:47.180]  сеть, но вот, тем не менее.
[40:55.180 --> 40:57.180]  Да, для, ну, чтобы
[40:57.180 --> 40:59.180]  сразу расписаться для себя в том,
[40:59.180 --> 41:01.180]  что итератор не создает и не удаляет
[41:01.180 --> 41:03.180]  никакие
[41:03.180 --> 41:05.180]  сети.
[41:05.180 --> 41:07.180]  То есть, ссылка это означает, что все, я с тобой работаю,
[41:07.180 --> 41:09.180]  но я тебя, как бы, не удаляю, не создаю,
[41:09.180 --> 41:11.180]  не предподключаюсь к другим сетям
[41:11.180 --> 41:13.180]  у тебя за спиной,
[41:13.180 --> 41:15.180]  ну и так далее.
[41:15.180 --> 41:17.180]  Поэтому, как бы, ссылка вот,
[41:17.180 --> 41:19.180]  если есть указатель, значит, как бы, будьте
[41:19.180 --> 41:21.180]  готовы, что он может меняться. Ссылка вот
[41:21.180 --> 41:23.180]  не меняется. Вот.
[41:27.180 --> 41:29.180]  Ну, а теперь дальше все будет, конечно, зависеть от того,
[41:29.180 --> 41:31.180]  как у нас хранится сеть.
[41:33.180 --> 41:35.180]  Там очень разные варианты могут быть.
[41:37.180 --> 41:39.180]  Вот сейчас я предложу, может быть, ну да,
[41:39.180 --> 41:41.180]  вы как-то, наверное, перейдете там. Ну понятно, что да.
[41:41.180 --> 41:43.180]  Ладно, кто когда-нибудь писал что-то, связанное с потоками
[41:43.180 --> 41:45.180]  в жизни, кстати? Что-то я забыл
[41:45.180 --> 41:47.180]  спросить.
[41:47.180 --> 41:49.180]  Ага, логично. Ну да, больше 100
[41:49.180 --> 41:51.180]  писал. Ну ничего, ладно.
[41:51.180 --> 41:53.180]  Ну вот, поэтому, но тем не менее,
[41:53.180 --> 41:55.180]  сейчас я тогда покажу такую немножко
[41:55.180 --> 41:57.180]  неклассическую вещь.
[41:57.180 --> 41:59.180]  А кто-нибудь писал когда-нибудь потоки на языке
[41:59.180 --> 42:01.180]  паскаль? Ну вот, просто чем
[42:01.180 --> 42:03.180]  отличается паскаль от сей? Паскаль отличается,
[42:03.180 --> 42:05.180]  ну он там синтоксически очень похож,
[42:05.180 --> 42:07.180]  но разница в том, что там нет вектора.
[42:09.180 --> 42:11.180]  Вот. То есть, поэтому никаких вот этих
[42:11.180 --> 42:13.180]  вот ваших список спрежности типа вектор-векторов
[42:13.180 --> 42:15.180]  там нет.
[42:15.180 --> 42:17.180]  И у вас возникает маленький
[42:17.180 --> 42:19.180]  технический вопрос.
[42:19.180 --> 42:21.180]  А что делать?
[42:21.180 --> 42:23.180]  Так вот, смотрите.
[42:23.180 --> 42:25.180]  Так вот, вы знаете,
[42:25.180 --> 42:27.180]  появляется очаровательная технология,
[42:27.180 --> 42:29.180]  которую вот в потоках я очень
[42:29.180 --> 42:31.180]  люблю.
[42:41.180 --> 42:43.180]  Ну по сути, на самом деле, сейчас список
[42:43.180 --> 42:45.180]  смежности у меня будет реально
[42:45.180 --> 42:47.180]  списком смежности.
[42:47.180 --> 42:49.180]  Ну вот, да, указатели
[42:49.180 --> 42:51.180]  при желании в паскале есть, но пользоваться
[42:51.180 --> 42:53.180]  ими не хочется.
[42:53.180 --> 42:55.180]  Не, ну не скажите. Паскаль очаровательный язык.
[42:55.180 --> 42:57.180]  Поэтому делать
[42:57.180 --> 42:59.180]  мы будем следующим.
[42:59.180 --> 43:01.180]  Да нормальный паскальчик.
[43:07.180 --> 43:09.180]  Что кто писал, где писал?
[43:09.180 --> 43:11.180]  Я писал.
[43:13.180 --> 43:15.180]  Ну вот.
[43:15.180 --> 43:17.180]  Вот Данил.
[43:19.180 --> 43:21.180]  Ну вот.
[43:21.180 --> 43:23.180]  Нет, ну тут по ситуации.
[43:23.180 --> 43:25.180]  Тут как бы все сложнее, потому что как бы понятно,
[43:25.180 --> 43:27.180]  чем дальше, тем меньше, наверное, там в школах
[43:27.180 --> 43:29.180]  будут вообще вспоминать этот язык.
[43:29.180 --> 43:31.180]  Нет, оно конечно понятно, что да, преподаватели
[43:31.180 --> 43:33.180]  чаще всего уже на чем привыкли,
[43:33.180 --> 43:35.180]  на том как бы учительствовом примере в ней будут,
[43:35.180 --> 43:37.180]  но как бы... Но в Олимпиадах его уже
[43:37.180 --> 43:39.180]  даже в школе, по-моему, паскаль отменили
[43:39.180 --> 43:41.180]  на всеросе, так что...
[43:41.180 --> 43:43.180]  Нет, ассемблер
[43:43.180 --> 43:45.180]  будет. Ну вот, например,
[43:45.180 --> 43:47.180]  смотри.
[43:47.180 --> 43:49.180]  Да.
[43:49.180 --> 43:51.180]  Ну не знаю.
[43:51.180 --> 43:53.180]  Жизнь коротка, да, но
[43:53.180 --> 43:55.180]  Геннадий Короткевич выиграл межнарый на паскале,
[43:55.180 --> 43:57.180]  если что, так что, как я уже
[43:57.180 --> 43:59.180]  говорил.
[44:01.180 --> 44:03.180]  Ну вот, значит,
[44:03.180 --> 44:05.180]  смотрите. Вот давайте рассмотрим вот такую
[44:05.180 --> 44:07.180]  какую-нибудь сеть от балды,
[44:07.180 --> 44:09.180]  пропускные способности будут какие-нибудь вот такие,
[44:09.180 --> 44:11.180]  но числа тоже совершенно от балды,
[44:11.180 --> 44:13.180]  они там сейчас вообще не принципиальные.
[44:13.180 --> 44:15.180]  Так, 8.
[44:15.180 --> 44:17.180]  Ну я не знаю, давайте еще
[44:17.180 --> 44:19.180]  6 тут будет, 3,
[44:19.180 --> 44:21.180]  2, 1.
[44:23.180 --> 44:25.180]  Ну, допустим, 5.
[44:25.180 --> 44:27.180]  700.
[44:27.180 --> 44:29.180]  Не, ну многовато.
[44:29.180 --> 44:31.180]  Вот.
[44:31.180 --> 44:33.180]  Но еще нам, конечно, потребуется перенумерать вершины.
[44:33.180 --> 44:35.180]  Ну там где-то тут
[44:35.180 --> 44:37.180]  СТ, это мы понимаем.
[44:37.180 --> 44:39.180]  Ну давайте перенумируем эти вершины,
[44:39.180 --> 44:41.180]  перенумируем мы их во что. Ну, например,
[44:41.180 --> 44:43.180]  для удобства
[44:43.180 --> 44:45.180]  0, 1, 2.
[44:45.180 --> 44:47.180]  Ну, как вы помните, СТ не обязательно
[44:47.180 --> 44:49.180]  0 и минус 1, да.
[44:49.180 --> 44:51.180]  Но обычно они у нас нумируются, видимо,
[44:51.180 --> 44:53.180]  может быть, даже зашить в интерфейс.
[44:55.180 --> 44:57.180]  Вот так вот.
[44:57.180 --> 44:59.180]  Значит, 7 вершин.
[45:01.180 --> 45:03.180]  Значит...
[45:03.180 --> 45:05.180]  Абсолютно.
[45:05.180 --> 45:07.180]  Ну я просто перенумирал вершины.
[45:07.180 --> 45:09.180]  Как-то рандомно.
[45:09.180 --> 45:11.180]  Ну сейчас это будет массив,
[45:11.180 --> 45:13.180]  поэтому числами вообще там какой-нибудь,
[45:13.180 --> 45:15.180]  в другой ситуации я мог бы их перенумировать буквами.
[45:17.180 --> 45:19.180]  Значит, смотрите, работать будем так.
[45:19.180 --> 45:21.180]  Векторов у нас нет,
[45:21.180 --> 45:23.180]  но есть,
[45:23.180 --> 45:25.180]  но будут три массива.
[45:27.180 --> 45:29.180]  Значит, массив ЕДЖЕС,
[45:33.180 --> 45:35.180]  массив НЕКСТ
[45:37.180 --> 45:39.180]  и массив...
[45:39.180 --> 45:41.180]  Да, обычно я его называю А.
[45:43.180 --> 45:45.180]  Но мы его будем называть БЕГИН.
[45:47.180 --> 45:49.180]  Значит, что это такое?
[45:51.180 --> 45:53.180]  Значит, суть заключается в следующем.
[45:53.180 --> 45:55.180]  Бегин я даже
[45:55.180 --> 45:57.180]  буду красить зеленым, знак того,
[45:57.180 --> 45:59.180]  что его размер фиксирован и равен количеству вершин.
[46:05.180 --> 46:07.180]  Изначально
[46:07.180 --> 46:09.180]  минус 1, минус 1, минус 1, минус 1,
[46:09.180 --> 46:11.180]  минус 1, минус 1.
[46:11.180 --> 46:13.180]  Так называется?
[46:13.180 --> 46:15.180]  ЕДЖЕС.
[46:15.180 --> 46:17.180]  Ну да.
[46:17.180 --> 46:19.180]  Вот.
[46:21.180 --> 46:23.180]  Ну вот.
[46:23.180 --> 46:25.180]  В этом массиве нам понадобится
[46:25.180 --> 46:27.180]  ребра, с которыми будем работать.
[46:27.180 --> 46:29.180]  Поэтому я назвал его
[46:29.180 --> 46:31.180]  ребра.
[46:31.180 --> 46:33.180]  Вот.
[46:35.180 --> 46:37.180]  Так вот.
[46:37.180 --> 46:39.180]  Будем позже брэкить.
[46:39.180 --> 46:41.180]  Будем добавлять какое-нибудь ребро.
[46:41.180 --> 46:43.180]  Ну какое ребро мы хотим добавить?
[46:43.180 --> 46:45.180]  Ну, допустим, вот это.
[46:49.180 --> 46:51.180]  Какое? 422, да?
[46:51.180 --> 46:53.180]  Вот добавляем ребро 422.
[46:55.180 --> 46:57.180]  Нет, мы будем так.
[46:59.180 --> 47:01.180]  Значит, начнем с того,
[47:03.180 --> 47:05.180]  значит, пишем ребро 422,
[47:05.180 --> 47:07.180]  ну и, соответственно, 0.
[47:07.180 --> 47:09.180]  Вот flow, помните, да?
[47:11.180 --> 47:13.180]  Это ребро ведет нас из
[47:13.180 --> 47:15.180]  вершины 4.
[47:15.180 --> 47:17.180]  Значит, смотрите, теперь тут фишка такая.
[47:17.180 --> 47:19.180]  В next мы напишем,
[47:19.180 --> 47:21.180]  мы поэтому посмотрим на
[47:21.180 --> 47:23.180]  были ли у нас еще
[47:23.180 --> 47:25.180]  ребра из четверки.
[47:25.180 --> 47:27.180]  Увидим, что нет,
[47:27.180 --> 47:29.180]  поэтому тут в качестве next с чистой совестью
[47:29.180 --> 47:31.180]  пишем минус 1.
[47:31.180 --> 47:33.180]  Ну, я говорю next, но по факту, конечно,
[47:33.180 --> 47:35.180]  тут правильно previous было написано.
[47:37.180 --> 47:39.180]  Потому что смысл next будет очень простой.
[47:39.180 --> 47:41.180]  Для каждого ребра я буду говорить,
[47:41.180 --> 47:43.180]  а были ли слева вообще ребра из четверки,
[47:43.180 --> 47:45.180]  если да, то где предыдущие?
[47:47.180 --> 47:49.180]  Вот, а сюда я, соответственно, напишу
[47:49.180 --> 47:51.180]  0.
[47:51.180 --> 47:53.180]  Почему я напишу 0? Потому что это ребро номер
[47:53.180 --> 47:55.180]  0.
[47:57.180 --> 47:59.180]  Но в нашем случае это
[47:59.180 --> 48:01.180]  еще не все, потому что в реальности нам
[48:01.180 --> 48:03.180]  надо еще добавить ребро
[48:03.180 --> 48:05.180]  2.4.0.
[48:07.180 --> 48:09.180]  Поехали, добавляем 2.4.0.0.
[48:09.180 --> 48:11.180]  Ну, у нас ориентированная сеть, поэтому добавляем.
[48:11.180 --> 48:13.180]  Четыре размахнутся.
[48:13.180 --> 48:15.180]  Давайте-ка я
[48:15.180 --> 48:17.180]  поуже чуть-чуть напишу это все.
[48:19.180 --> 48:21.180]  Так, давайте
[48:21.180 --> 48:23.180]  совсем поуже.
[48:25.180 --> 48:27.180]  4.2.0.
[48:29.180 --> 48:31.180]  2.4.0.
[48:33.180 --> 48:35.180]  И вот тут минус 1.
[48:35.180 --> 48:37.180]  Вот.
[48:37.180 --> 48:39.180]  Вот так получше будет.
[48:39.180 --> 48:41.180]  Идем дальше.
[48:41.180 --> 48:43.180]  Какое ребро дальше мы хотим добавить?
[48:47.180 --> 48:49.180]  Ну, просто когда дают список ребр,
[48:49.180 --> 48:51.180]  в каком порядке дают, в который мы добавляем.
[48:51.180 --> 48:53.180]  Поэтому абсолютно с небес по факсу.
[48:53.180 --> 48:55.180]  Так, ну и что?
[48:55.180 --> 48:57.180]  Какое следующее ребро посунули?
[48:57.180 --> 48:59.180]  6.4.
[48:59.180 --> 49:01.180]  Пишем
[49:01.180 --> 49:03.180]  6.4.3.
[49:03.180 --> 49:05.180]  Ну и соответственно
[49:05.180 --> 49:07.180]  4.6.0.
[49:07.180 --> 49:09.180]  Да, вот этот напарник это я сейчас добавил,
[49:09.180 --> 49:11.180]  но если вы работаете реально со списком смежности,
[49:11.180 --> 49:13.180]  то естественно вы второе ребро не добавляете.
[49:13.180 --> 49:15.180]  А, кстати, погодите,
[49:15.180 --> 49:17.180]  я поторопился.
[49:17.180 --> 49:19.180]  Да, второе ребро, да, здесь
[49:19.180 --> 49:21.180]  важно, тут минус 1, а на самом деле здесь
[49:21.180 --> 49:23.180]  тоже надо написать минус 1.
[49:23.180 --> 49:25.180]  И теперь мы здесь пишем 1.
[49:27.180 --> 49:29.180]  Совсем забыл, да.
[49:29.180 --> 49:31.180]  Почему 1?
[49:31.180 --> 49:33.180]  Потому что последнее ребро,
[49:33.180 --> 49:35.180]  торчащее с двойки,
[49:35.180 --> 49:37.180]  находится здесь.
[49:39.180 --> 49:41.180]  Вот, сейчас мы добавим второе ребро
[49:41.180 --> 49:43.180]  и думаю, что картина прояснится.
[49:43.180 --> 49:45.180]  Итак, 6.4.3.
[49:45.180 --> 49:47.180]  Технология звучит так.
[49:47.180 --> 49:51.180]  Мы добавим 6.4.3.0.
[49:51.180 --> 49:53.180]  Так, здесь мы пишем
[49:53.180 --> 49:55.180]  минус 1, а здесь
[49:55.180 --> 49:57.180]  пишем 2.
[49:57.180 --> 49:59.180]  А вот здесь начинается интересность.
[50:03.180 --> 50:05.180]  4.6.0.0
[50:09.180 --> 50:11.180]  Нет, это список
[50:11.180 --> 50:13.180]  смежности такой.
[50:17.180 --> 50:19.180]  Start,
[50:19.180 --> 50:21.180]  Finish, Capacity, Flow.
[50:21.180 --> 50:23.180]  Да,
[50:23.180 --> 50:25.180]  то есть это
[50:25.180 --> 50:27.180]  реальные ребра.
[50:29.180 --> 50:31.180]  Вот, и так смотрим.
[50:31.180 --> 50:33.180]  А были у нас раньше ребра, торчащие
[50:33.180 --> 50:35.180]  с четверки?
[50:35.180 --> 50:37.180]  Были. А где у нас
[50:37.180 --> 50:39.180]  предыдущие находятся?
[50:39.180 --> 50:41.180]  А, ну где у нас там последние находятся?
[50:41.180 --> 50:43.180]  В нолике. Поэтому смотрите, мы сюда
[50:43.180 --> 50:45.180]  пишем нолик.
[50:45.180 --> 50:47.180]  А сюда пишем номер этого.
[50:51.180 --> 50:53.180]  То есть смотрите, как теперь понять, что
[50:53.180 --> 50:55.180]  у нас тут два ребра есть с четверки?
[50:55.180 --> 50:57.180]  Где последнее ребро? На третьем месте, вот оно.
[50:57.180 --> 50:59.180]  Так, а предыдущие где?
[50:59.180 --> 51:01.180]  В нолике. А, вот оно.
[51:01.180 --> 51:03.180]  А предыдущие есть? Нет, значит
[51:03.180 --> 51:05.180]  они закончились.
[51:07.180 --> 51:09.180]  Вот, оказывается очень удобно.
[51:09.180 --> 51:11.180]  Вот давайте, например, для интересу
[51:11.180 --> 51:13.180]  добавим еще какое-нибудь ребро.
[51:13.180 --> 51:15.180]  Что нам там еще добавить-то надо?
[51:17.180 --> 51:19.180]  Давайте 4.0 вот это вот добавим.
[51:21.180 --> 51:23.180]  4.0.5
[51:23.180 --> 51:25.180]  И соответственно 0.4.0
[51:27.180 --> 51:29.180]  Значит, поехали. Добавляем.
[51:29.180 --> 51:31.180]  Значит, что там?
[51:31.180 --> 51:33.180]  4.0.5
[51:33.180 --> 51:35.180]  4.0.5
[51:35.180 --> 51:37.180]  И 0, конечно.
[51:39.180 --> 51:41.180]  Так, мы говорим...
[51:41.180 --> 51:43.180]  Предыдущие ребра
[51:43.180 --> 51:45.180]  торчащие с той же вершины.
[51:45.180 --> 51:47.180]  Ага, окей.
[51:49.180 --> 51:51.180]  Вот.
[51:51.180 --> 51:53.180]  Более того, если вам захочется уметь перебирать
[51:53.180 --> 51:55.180]  скажем, ребра, которые входят в вершину
[51:55.180 --> 51:57.180]  то вы можете параллельно
[51:57.180 --> 51:59.180]  сделать для входящих ребер.
[52:01.180 --> 52:03.180]  Кстати, если интересно.
[52:07.180 --> 52:09.180]  Значит, смотрите, 4.0.5.0
[52:09.180 --> 52:11.180]  Значит, были ли у нас ребра
[52:11.180 --> 52:13.180]  торчащие в треке? Да, где было последнее
[52:13.180 --> 52:15.180]  в треке. Значит, вот эту тройку мы сюда
[52:15.180 --> 52:17.180]  и переписываем.
[52:19.180 --> 52:21.180]  Да, совершенно верно.
[52:23.180 --> 52:25.180]  Вот.
[52:25.180 --> 52:27.180]  А 0.4.0.0
[52:31.180 --> 52:33.180]  Так, были ли у нас ребра
[52:33.180 --> 52:35.180]  торчащие с нуля?
[52:35.180 --> 52:37.180]  Не было.
[52:37.180 --> 52:39.180]  Потому что последнее было минус 1.
[52:39.180 --> 52:41.180]  То есть мы переписываем минус 1.
[52:41.180 --> 52:43.180]  А сюда
[52:43.180 --> 52:45.180]  записываем.
[52:47.180 --> 52:49.180]  Да.
[52:51.180 --> 52:53.180]  А с точки зрения списка ребер
[52:53.180 --> 52:55.180]  получается вот, типа, begin
[52:55.180 --> 52:57.180]  первое ребро, а там следующее. То есть, по-хорошему
[52:57.180 --> 52:59.180]  да, это надо назвать end и previous
[52:59.180 --> 53:01.180]  конечно, да, чтобы от конца
[53:01.180 --> 53:03.180]  к началу перебираем.
[53:03.180 --> 53:05.180]  Но это на ваше усмотрение.
[53:05.180 --> 53:07.180]  Ну, я тут писал вообще
[53:07.180 --> 53:09.180]  а.
[53:09.180 --> 53:11.180]  Ну, может быть, у нас не nex, а parent.
[53:11.180 --> 53:13.180]  Ну, это не parent.
[53:13.180 --> 53:15.180]  Это ж не деревья все-таки.
[53:15.180 --> 53:17.180]  А может, мы будем построить бамбук?
[53:17.180 --> 53:19.180]  Реально?
[53:19.180 --> 53:21.180]  Ну, ну...
[53:21.180 --> 53:23.180]  Не, ну, это да, скорее
[53:23.180 --> 53:25.180]  набор бамбуков будет, но я бы тут
[53:25.180 --> 53:27.180]  сущность не плодил.
[53:27.180 --> 53:29.180]  Зачем, зачем нам это делать?
[53:31.180 --> 53:33.180]  Вот так, да.
[53:39.180 --> 53:41.180]  Ну, понятно все.
[53:41.180 --> 53:43.180]  Ну, вот. Ну, в принципе, дам.
[53:43.180 --> 53:45.180]  Так, ну, да, так. Ладно, дальше.
[53:45.180 --> 53:47.180]  Так, иметь смысл еще
[53:47.180 --> 53:49.180]  ребра какие-то рассмотреть?
[53:49.180 --> 53:51.180]  Я думаю, нет.
[53:51.180 --> 53:53.180]  Кажется, типа, механизм понятен.
[53:53.180 --> 53:55.180]  Если с ребром добавляется еще и номер,
[53:55.180 --> 53:57.180]  куда он приедет. Ну, да.
[53:57.180 --> 53:59.180]  То есть, ну, просто в begin принесу.
[54:01.180 --> 54:03.180]  Ну, и это тоже. Не, ну, не совсем.
[54:03.180 --> 54:05.180]  Тут мы много вариантов.
[54:05.180 --> 54:07.180]  Смотрите.
[54:07.180 --> 54:09.180]  Нет, уверены ли мы следующие?
[54:09.180 --> 54:11.180]  Основное, что главное надо
[54:11.180 --> 54:13.180]  зачем следить, то, чтобы интерфейс был
[54:13.180 --> 54:15.180]  отделен от внутренней реализации, чтобы она была безопасной.
[54:15.180 --> 54:17.180]  И самое главное,
[54:17.180 --> 54:19.180]  что многие, когда начинают писать код,
[54:19.180 --> 54:21.180]  они обычно начинают писать network,
[54:21.180 --> 54:23.180]  а потом поиск потока начинают реализовывать как метод
[54:23.180 --> 54:25.180]  network'а. Так вот, так делать
[54:25.180 --> 54:27.180]  не надо. То есть, ваш алгоритм
[54:27.180 --> 54:29.180]  к network'у привязан быть
[54:29.180 --> 54:31.180]  должен не.
[54:31.180 --> 54:33.180]  У меня есть внешний метод
[54:33.180 --> 54:35.180]  найти потом...
[54:35.180 --> 54:37.180]  Вот.
[54:39.180 --> 54:41.180]  Ну, вот. Значит, смотрите.
[54:41.180 --> 54:43.180]  В результате,
[54:43.180 --> 54:45.180]  то есть, нет, просто в реальном коде,
[54:45.180 --> 54:47.180]  как бы в результате, на самом деле, вот смотрите,
[54:47.180 --> 54:49.180]  я вам тут же и покажу, да.
[54:49.180 --> 54:51.180]  То есть, на самом деле, как бы в этом
[54:51.180 --> 54:53.180]  списке, то ребра перебираются
[54:53.180 --> 54:55.180]  так. For там, там
[54:55.180 --> 54:57.180]  допустим int, int равно
[54:57.180 --> 54:59.180]  значит там
[54:59.180 --> 55:01.180]  network там условно
[55:01.180 --> 55:03.180]  begin от v,
[55:03.180 --> 55:05.180]  int больше либо равно
[55:05.180 --> 55:07.180]  0, int равно...
[55:07.180 --> 55:09.180]  А я вспомню, знаете, как я это назвал?
[55:09.180 --> 55:11.180]  Ука.
[55:13.180 --> 55:15.180]  Указатель.
[55:19.180 --> 55:21.180]  Указатель где-то.
[55:21.180 --> 55:23.180]  От русского слова указатель, да.
[55:23.180 --> 55:25.180]  Это лучший друг
[55:25.180 --> 55:27.180]  кола, да.
[55:27.180 --> 55:29.180]  Кол. Ну, примерно от русского
[55:29.180 --> 55:31.180]  слова количество.
[55:31.180 --> 55:33.180]  То есть, это вот мой код. Ука,
[55:33.180 --> 55:35.180]  кол, вот это все, да.
[55:35.180 --> 55:37.180]  Кол. Вчера у меня было
[55:37.180 --> 55:39.180]  к-к-кол.
[55:39.180 --> 55:41.180]  Там, скажем, и так далее.
[55:41.180 --> 55:43.180]  То есть, на олипиаде я вот так писал.
[55:43.180 --> 55:45.180]  Обычно пишу. Ну, вот, в нашем с вами случае
[55:45.180 --> 55:47.180]  это будет скорее next, ну или там
[55:47.180 --> 55:49.180]  pref.
[55:55.180 --> 55:57.180]  Ну, вот. То есть,
[55:57.180 --> 55:59.180]  вот. Ну, и здесь
[55:59.180 --> 56:01.180]  вы там, соответственно, вот здесь
[56:01.180 --> 56:03.180]  понятно, что вы пишете
[56:03.180 --> 56:05.180]  там edge,
[56:05.180 --> 56:07.180]  e равно edges от, допустим,
[56:07.180 --> 56:09.180]  int. Ну, и начинаете с этой
[56:09.180 --> 56:11.180]  ешкой работать.
[56:11.180 --> 56:13.180]  Но самое для нас приятное,
[56:13.180 --> 56:15.180]  то есть, это вот в обычном паскале.
[56:15.180 --> 56:17.180]  Но самое для нас приятное вот, что
[56:17.180 --> 56:19.180]  когда вы пихаете поток,
[56:19.180 --> 56:21.180]  вы говорите, что измениться должно не само
[56:21.180 --> 56:23.180]  ребро, но еще и его обратное.
[56:23.180 --> 56:25.180]  А теперь внимание, вопрос.
[56:25.180 --> 56:27.180]  Как вот по... Вот у вас есть
[56:27.180 --> 56:29.180]  ребро номер int. Вот вы уже догадываетесь, что
[56:29.180 --> 56:31.180]  в итераторе, наверное, мы будем хранить
[56:31.180 --> 56:33.180]  вот этот int, да?
[56:37.180 --> 56:39.180]  Да.
[56:39.180 --> 56:41.180]  Нет. Номер ребра.
[56:41.180 --> 56:43.180]  Ну, вот здесь вообще все просто.
[56:43.180 --> 56:45.180]  Вот valid int больше либо
[56:45.180 --> 56:47.180]  равно нуля.
[56:47.180 --> 56:49.180]  Там, скажем, int равно
[56:49.180 --> 56:51.180]  там network.next
[56:51.180 --> 56:53.180]  от int.
[56:53.180 --> 56:55.180]  Ну, и так далее.
[56:57.180 --> 56:59.180]  Вот.
[57:01.180 --> 57:03.180]  Вот видите, все очень просто.
[57:03.180 --> 57:05.180]  Ну, и здесь все тоже
[57:05.180 --> 57:07.180]  очень просто. И тогда return
[57:07.180 --> 57:09.180]  edges от int.
[57:09.180 --> 57:11.180]  start.
[57:11.180 --> 57:13.180]  Здесь тоже
[57:13.180 --> 57:15.180]  то есть, видите, это будут
[57:15.180 --> 57:17.180]  простейшие геттеры.
[57:23.180 --> 57:25.180]  Так.
[57:27.180 --> 57:29.180]  А, get flow я забыл
[57:29.180 --> 57:31.180]  нарисовать, да?
[57:33.180 --> 57:35.180]  Вот.
[57:41.180 --> 57:43.180]  Нет, тут был push flow.
[57:43.180 --> 57:45.180]  А, этот?
[57:45.180 --> 57:47.180]  Лучше, конечно, вот так.
[57:47.180 --> 57:49.180]  Да, да, да.
[57:49.180 --> 57:51.180]  А, ну, по этой локии int надо с нижним подчеркивать.
[57:53.180 --> 57:55.180]  Ой.
[57:57.180 --> 57:59.180]  А, как в таких случаях делают?
[58:03.180 --> 58:05.180]  А, черт.
[58:05.180 --> 58:07.180]  Кошмар, тут контролаж не работает,
[58:07.180 --> 58:09.180]  безобразие.
[58:09.180 --> 58:11.180]  Автозамена.
[58:13.180 --> 58:15.180]  А, вот.
[58:15.180 --> 58:17.180]  Автозамена.
[58:25.180 --> 58:27.180]  Так вот.
[58:27.180 --> 58:29.180]  Ну, вот. Ну, соответственно, да, в сети
[58:29.180 --> 58:31.180]  вот все будет. Ну, вот.
[58:31.180 --> 58:33.180]  Ну, теперь вот возникает вопрос. Да, ну, в сети
[58:33.180 --> 58:35.180]  понятно, мы эти все векторы допишем, конечно,
[58:35.180 --> 58:37.180]  чуть позже. А пока вот возникает
[58:37.180 --> 58:39.180]  вопрос. Вот, хорошо, есть ребро int,
[58:39.180 --> 58:41.180]  да? То есть понятно, что мы тут
[58:41.180 --> 58:43.180]  должны написать?
[58:43.180 --> 58:45.180]  То есть мы должны тут сказать
[58:45.180 --> 58:47.180]  edges от int
[58:47.180 --> 58:49.180]  .flow
[58:49.180 --> 58:51.180]  плюс равно flow, но это будет безопасно,
[58:51.180 --> 58:53.180]  да? И edges
[58:53.180 --> 58:55.180]  какой-то там
[58:55.180 --> 58:57.180]  там какой-нибудь напарник,
[58:57.180 --> 58:59.180]  как там этот напарник
[58:59.180 --> 59:01.180]  по-английски будет?
[59:01.180 --> 59:03.180]  Не так, боюсь.
[59:03.180 --> 59:05.180]  Там не edges, а
[59:05.180 --> 59:07.180]  не edges. Боюсь, что не так.
[59:07.180 --> 59:09.180]  Да.
[59:09.180 --> 59:11.180]  Другой mate, нет.
[59:11.180 --> 59:13.180]  Партнер, компаньон,
[59:13.180 --> 59:15.180]  там buddy.
[59:15.180 --> 59:17.180]  А что звучит интересно?
[59:17.180 --> 59:19.180]  Buddy.
[59:19.180 --> 59:21.180]  Hey, buddy.
[59:21.180 --> 59:23.180]  Hey, buddy.
[59:23.180 --> 59:25.180]  Hey, buddy.
[59:27.180 --> 59:29.180]  В общем, тот самый напарник,
[59:29.180 --> 59:31.180]  у которого, ну, помните, у нас есть пара, есть
[59:31.180 --> 59:33.180]  прямая, либо есть обратная.
[59:33.180 --> 59:35.180]  А где мы его взяли?
[59:35.180 --> 59:37.180]  Вот.
[59:37.180 --> 59:39.180]  Вот теперь вопрос, откуда его взять?
[59:39.180 --> 59:41.180]  Как функция выглядит?
[59:43.180 --> 59:45.180]  Ну, а что давайте, мы это уже делаем.
[59:45.180 --> 59:47.180]  По факту, да,
[59:47.180 --> 59:49.180]  заметим, что мы парные ребра добавляем
[59:49.180 --> 59:51.180]  сначала на позицию 0,1,
[59:51.180 --> 59:53.180]  потом 2,3,
[59:53.180 --> 59:55.180]  потом 4,5,
[59:55.180 --> 59:57.180]  потом 6,7.
[59:59.180 --> 01:00:01.180]  Почему? Знаем.
[01:00:01.180 --> 01:00:03.180]  Четная прямая, а не
[01:00:03.180 --> 01:00:05.180]  четная обратная.
[01:00:09.180 --> 01:00:11.180]  Так что
[01:00:11.180 --> 01:00:13.180]  в результате,
[01:00:13.180 --> 01:00:15.180]  ну, можно, конечно, писать эту функцию,
[01:00:15.180 --> 01:00:17.180]  просто написать как функцию, если
[01:00:17.180 --> 01:00:19.180]  четная плюс один, если не четная минус один.
[01:00:21.180 --> 01:00:23.180]  Но, на самом деле, Боже упроси так писать.
[01:00:23.180 --> 01:00:25.180]  Потому что, на самом деле,
[01:00:25.180 --> 01:00:27.180]  есть гораздо более изящный,
[01:00:27.180 --> 01:00:29.180]  приятный способ это написать.
[01:00:33.180 --> 01:00:35.180]  Ага, вот.
[01:00:35.180 --> 01:00:37.180]  Вот.
[01:00:39.180 --> 01:00:41.180]  Так что, да. Вот они возникают.
[01:00:41.180 --> 01:00:43.180]  Поэтому я этот способ люблю писать даже на сях.
[01:00:45.180 --> 01:00:47.180]  В общем, на сях часто пишут и половинчатые,
[01:00:47.180 --> 01:00:49.180]  то есть все ребра пишут
[01:00:49.180 --> 01:00:51.180]  в списке, но при этом вектор
[01:00:51.180 --> 01:00:53.180]  векторов сохраняется, просто вектор векторов
[01:00:53.180 --> 01:00:55.180]  хранятся номера ребра.
[01:00:55.180 --> 01:00:57.180]  Это вот, оказывается, удобно.
[01:00:57.180 --> 01:00:59.180]  Но это удобнее, чем там писать, что
[01:00:59.180 --> 01:01:01.180]  там на паре, там ребро 2,5,
[01:01:01.180 --> 01:01:03.180]  так, значит, на паре
[01:01:03.180 --> 01:01:05.180]  находятся векторы номер 5, его номер
[01:01:05.180 --> 01:01:07.180]  там 38.
[01:01:07.180 --> 01:01:09.180]  Вот, или там, кто-то еще
[01:01:09.180 --> 01:01:11.180]  пытается даже указатели на него указывать,
[01:01:11.180 --> 01:01:13.180]  а потом эти указатели падают, потому что вектор
[01:01:13.180 --> 01:01:15.180]  это, называется, реалацируется,
[01:01:15.180 --> 01:01:17.180]  ну и так далее.
[01:01:17.180 --> 01:01:19.180]  А так, на самом деле, очень
[01:01:19.180 --> 01:01:21.180]  удобно.
[01:01:21.180 --> 01:01:23.180]  Потому что у этого способа еще есть всякие
[01:01:23.180 --> 01:01:25.180]  приятные примочки в духе.
[01:01:25.180 --> 01:01:27.180]  Вот, предположим, вам захотелось перебрать все
[01:01:27.180 --> 01:01:29.180]  ребра исходной сети, не обратной, да?
[01:01:29.180 --> 01:01:31.180]  Не остаточной.
[01:01:31.180 --> 01:01:33.180]  Мы можем для каждого ребра выписать, сколько там
[01:01:33.180 --> 01:01:35.180]  реально воды течет.
[01:01:35.180 --> 01:01:37.180]  Как это сделать?
[01:01:39.180 --> 01:01:41.180]  Да.
[01:01:43.180 --> 01:01:45.180]  Ну да, то есть, на самом деле, если мы перебираем
[01:01:45.180 --> 01:01:47.180]  номер 0, 2, 4, 6, 8 и так далее,
[01:01:47.180 --> 01:01:49.180]  то мы перебираем в точности те ребра, которые
[01:01:49.180 --> 01:01:51.180]  в сеть были добавлены.
[01:02:01.180 --> 01:02:03.180]  Да.
[01:02:03.180 --> 01:02:05.180]  Да-да-да-да-да-да.
[01:02:13.180 --> 01:02:15.180]  А мы индекс 3 проинциализировали?
[01:02:15.180 --> 01:02:17.180]  Кто проинциализировали?
[01:02:17.180 --> 01:02:19.180]  Индекс наш.
[01:02:19.180 --> 01:02:21.180]  Какой индекс?
[01:02:21.180 --> 01:02:23.180]  Индекс нижнего чека.
[01:02:23.180 --> 01:02:25.180]  Еще нет.
[01:02:25.180 --> 01:02:27.180]  Но это легко.
[01:02:27.180 --> 01:02:29.180]  Ну, и здесь просто.
[01:02:29.180 --> 01:02:31.180]  Ну да, int
[01:02:31.180 --> 01:02:33.180]  network.
[01:02:33.180 --> 01:02:35.180]  точка
[01:02:35.180 --> 01:02:37.180]  точка, нет, не
[01:02:37.180 --> 01:02:39.180]  start, а begin от V.
[01:02:43.180 --> 01:02:45.180]  Хотя, вот, что-то, хотя
[01:02:45.180 --> 01:02:47.180]  мне кажется, что вот это лучше написать.
[01:02:47.180 --> 01:02:49.180]  Что-то мне кажется, почему-то, думаю, программисты скажут,
[01:02:49.180 --> 01:02:51.180]  что лучше, конечно, вот так написать.
[01:02:53.180 --> 01:02:55.180]  Ну, это
[01:02:55.180 --> 01:02:57.180]  потому что это сложное,
[01:02:57.180 --> 01:02:59.180]  ну, точнее, чуть более сложное, чем нетривиальное
[01:02:59.180 --> 01:03:01.180]  какое-то действие, которое может вызвать
[01:03:01.180 --> 01:03:03.180]  runtime.
[01:03:03.180 --> 01:03:05.180]  В вершин V вы там нету передадите,
[01:03:05.180 --> 01:03:07.180]  вот это все, да?
[01:03:07.180 --> 01:03:09.180]  Почему size-t не визуально?
[01:03:09.180 --> 01:03:11.180]  Size-t?
[01:03:11.180 --> 01:03:13.180]  Да.
[01:03:13.180 --> 01:03:15.180]  Потому что int бывает минус единицей.
[01:03:17.180 --> 01:03:19.180]  Size-t, да?
[01:03:19.180 --> 01:03:21.180]  Вот. Но это, да, это лично
[01:03:21.180 --> 01:03:23.180]  наше техническое это. Мы, конечно, можем сделать
[01:03:23.180 --> 01:03:25.180]  его инф и там сравнивать с инфом все время,
[01:03:25.180 --> 01:03:27.180]  но мне кажется, это не то.
[01:03:29.180 --> 01:03:31.180]  Ну, вот.
[01:03:31.180 --> 01:03:33.180]  Ну, теперь остается только реализовать с этой точки зрения
[01:03:33.180 --> 01:03:35.180]  сам network.
[01:03:35.180 --> 01:03:37.180]  Вот, значит, в network у нас будут
[01:03:37.180 --> 01:03:39.180]  vector, значит, что у нас будет?
[01:03:39.180 --> 01:03:41.180]  Vector edge, edges.
[01:03:41.180 --> 01:03:43.180]  Vector,
[01:03:43.180 --> 01:03:45.180]  значит, int
[01:03:45.180 --> 01:03:47.180]  begin
[01:03:47.180 --> 01:03:49.180]  и
[01:03:49.180 --> 01:03:51.180]  next.
[01:03:51.180 --> 01:03:53.180]  А еще
[01:03:53.180 --> 01:03:55.180]  не помешают, конечно, такие
[01:03:55.180 --> 01:03:57.180]  то есть вот какой-нибудь
[01:03:57.180 --> 01:03:59.180]  size-t n.
[01:04:01.180 --> 01:04:03.180]  Хотя лучше, видимо, возможно.
[01:04:03.180 --> 01:04:05.180]  Хотя вот, да, вот.
[01:04:05.180 --> 01:04:07.180]  Ну, давайте так, size-t n.
[01:04:07.180 --> 01:04:09.180]  Ну, это размер.
[01:04:09.180 --> 01:04:11.180]  Мы можем так и написать
[01:04:11.180 --> 01:04:13.180]  честно vertices number.
[01:04:15.180 --> 01:04:17.180]  И, конечно,
[01:04:17.180 --> 01:04:19.180]  t-vertex, значит,
[01:04:19.180 --> 01:04:21.180]  source и sync.
[01:04:21.180 --> 01:04:23.180]  Которые нам
[01:04:23.180 --> 01:04:25.180]  торжественно вручают.
[01:04:27.180 --> 01:04:29.180]  Ну, вот. Которые нам торжественно
[01:04:29.180 --> 01:04:31.180]  вручают в конструкторе.
[01:04:31.180 --> 01:04:33.180]  Нет, не в конструкторе
[01:04:33.180 --> 01:04:35.180]  итератора, конечно.
[01:04:43.180 --> 01:04:45.180]  Чего?
[01:04:45.180 --> 01:04:47.180]  Edge.
[01:04:47.180 --> 01:04:49.180]  Ой-ой-ой.
[01:04:49.180 --> 01:04:51.180]  Как все сложно.
[01:04:51.180 --> 01:04:53.180]  Ой.
[01:04:53.180 --> 01:04:55.180]  Хотя очень хочется написать
[01:04:55.180 --> 01:04:57.180]  type-def,
[01:04:57.180 --> 01:04:59.180]  edge.
[01:05:03.180 --> 01:05:05.180]  Точнее, наоборот.
[01:05:05.180 --> 01:05:07.180]  Что происходит?
[01:05:07.180 --> 01:05:09.180]  Ой-ой-ой. Давайте без type-def.
[01:05:09.180 --> 01:05:11.180]  А что не так?
[01:05:11.180 --> 01:05:13.180]  Type-def одна из наших у нас
[01:05:13.180 --> 01:05:15.180]  не принято.
[01:05:17.180 --> 01:05:19.180]  Там надо type-edge
[01:05:19.180 --> 01:05:21.180]  туда, ближе туда.
[01:05:21.180 --> 01:05:23.180]  Type-edge равно.
[01:05:25.180 --> 01:05:27.180]  Type-def это опасная ситуация.
[01:05:27.180 --> 01:05:29.180]  Да?
[01:05:29.180 --> 01:05:31.180]  Ну окей.
[01:05:31.180 --> 01:05:33.180]  Подержи, чтобы
[01:05:33.180 --> 01:05:35.180]  было не стесняться. Удобно.
[01:05:35.180 --> 01:05:37.180]  Ну, в данном случае
[01:05:37.180 --> 01:05:39.180]  t-vertex у нас конкретные
[01:05:39.180 --> 01:05:41.180]  в сети, так что.
[01:05:41.180 --> 01:05:43.180]  Поэтому
[01:05:43.180 --> 01:05:45.180]  тут писать не будем.
[01:05:45.180 --> 01:05:47.180]  Usings написали, но условно.
[01:05:47.180 --> 01:05:49.180]  Так, ну он же надеюсь только внутри
[01:05:49.180 --> 01:05:51.180]  будет использоваться.
[01:05:51.180 --> 01:05:53.180]  Вот так написать.
[01:05:53.180 --> 01:05:55.180]  Чтобы совсем хорошо было.
[01:05:57.180 --> 01:05:59.180]  Теперь далее.
[01:05:59.180 --> 01:06:01.180]  Так, что мы там заказываем?
[01:06:01.180 --> 01:06:03.180]  Конструктор.
[01:06:05.180 --> 01:06:07.180]  Ну, я
[01:06:07.180 --> 01:06:09.180]  пишу с нижним подчеркиваем все, что
[01:06:09.180 --> 01:06:11.180]  не для внешнего глаза.
[01:06:15.180 --> 01:06:17.180]  Ну, мне кажется это логично.
[01:06:17.180 --> 01:06:19.180]  То есть это я сигнализирую, что как бы я
[01:06:19.180 --> 01:06:21.180]  не хочу, чтобы это пошло вовне.
[01:06:21.180 --> 01:06:23.180]  То есть это
[01:06:23.180 --> 01:06:25.180]  мой личный t-edge.
[01:06:33.180 --> 01:06:35.180]  От конкретных codestyles зависит.
[01:06:35.180 --> 01:06:37.180]  Ну, то есть я пишу так. Вы можете
[01:06:37.180 --> 01:06:39.180]  всегда как бы. Главное чтобы одинаково.
[01:06:39.180 --> 01:06:41.180]  Если вы пишите с другой стороны, то пожалуйста.
[01:06:45.180 --> 01:06:47.180]  Ну, где как?
[01:06:47.180 --> 01:06:49.180]  Ну, где как?
[01:06:49.180 --> 01:06:51.180]  Лично у меня вот так.
[01:06:51.180 --> 01:06:53.180]  Ну, вот все.
[01:06:53.180 --> 01:06:55.180]  А так да.
[01:06:55.180 --> 01:06:57.180]  А так в каждой конкретной компании там уже вам
[01:06:57.180 --> 01:06:59.180]  подробно настучат по
[01:06:59.180 --> 01:07:01.180]  башке, как надо писать.
[01:07:01.180 --> 01:07:03.180]  Хотя на самом деле
[01:07:03.180 --> 01:07:05.180]  не настучат.
[01:07:05.180 --> 01:07:07.180]  Ну, потому что обычно вы сами будете читать код
[01:07:07.180 --> 01:07:09.180]  и просто автоматически впитывать, как там
[01:07:09.180 --> 01:07:11.180]  подобные вещи пишутся.
[01:07:11.180 --> 01:07:13.180]  Так что этой проблемой не будет.
[01:07:13.180 --> 01:07:15.180]  Нет, иногда конечно там будут, потому что там в правилах
[01:07:15.180 --> 01:07:17.180]  код стайла там в Конкиндексе там вообще первая фраза такая.
[01:07:17.180 --> 01:07:19.180]  Помните, все
[01:07:19.180 --> 01:07:21.180]  написанные правила вам могут произвести вредованы, но
[01:07:21.180 --> 01:07:23.180]  написаны они кровью разработчиков,
[01:07:23.180 --> 01:07:25.180]  которые читали код до вас.
[01:07:29.180 --> 01:07:31.180]  Вот.
[01:07:31.180 --> 01:07:33.180]  Там вот что-то такое. Поэтому
[01:07:33.180 --> 01:07:35.180]  нужно там соблюдать обязательно.
[01:07:35.180 --> 01:07:37.180]  Вот.
[01:07:37.180 --> 01:07:39.180]  Поэтому да. Значит, смотрите.
[01:07:39.180 --> 01:07:41.180]  В сети я, пожалуй, имеет смысл даже
[01:07:41.180 --> 01:07:43.180]  не писать пустой конструктор, а сразу
[01:07:43.180 --> 01:07:45.180]  себе прописать.
[01:07:45.180 --> 01:07:47.180]  Сколько будет вершин?
[01:07:49.180 --> 01:07:51.180]  Vertices number.
[01:07:51.180 --> 01:07:53.180]  Значит, t vertex.
[01:07:53.180 --> 01:07:55.180]  Соответственно, source.
[01:07:57.180 --> 01:07:59.180]  Уберу запятую сейчас. И sync.
[01:07:59.180 --> 01:08:01.180]  Ну,
[01:08:01.180 --> 01:08:03.180]  можно тут сразу написать.
[01:08:03.180 --> 01:08:05.180]  Vertices
[01:08:05.180 --> 01:08:07.180]  number.
[01:08:07.180 --> 01:08:09.180]  Vertices
[01:08:09.180 --> 01:08:11.180]  number.
[01:08:13.180 --> 01:08:15.180]  Далее.
[01:08:15.180 --> 01:08:17.180]  Source от source.
[01:08:17.180 --> 01:08:19.180]  Sync
[01:08:19.180 --> 01:08:21.180]  от sync.
[01:08:25.180 --> 01:08:27.180]  Begin.
[01:08:27.180 --> 01:08:29.180]  Begin от
[01:08:29.180 --> 01:08:31.180]  Vertices number
[01:08:31.180 --> 01:08:33.180]  минус один.
[01:08:35.180 --> 01:08:37.180]  Ну, вообще, конечно, нехорошо так
[01:08:37.180 --> 01:08:39.180]  писать. Помните, принято же писать, на самом деле,
[01:08:39.180 --> 01:08:41.180]  в том порядке, в котором там
[01:08:41.180 --> 01:08:43.180]  реально это задается. Поэтому
[01:08:43.180 --> 01:08:45.180]  edges.
[01:08:45.180 --> 01:08:47.180]  Ну да, потому что по факту-то он
[01:08:47.180 --> 01:08:49.180]  так или иначе это будет делать. Поэтому там
[01:08:49.180 --> 01:08:51.180]  если бы я тут начал бы пользоваться
[01:08:51.180 --> 01:08:53.180]  source ниже подчеркивания, было бы больно.
[01:08:53.180 --> 01:08:55.180]  Вы сказали недавно анекдот
[01:08:55.180 --> 01:08:57.180]  тоже.
[01:08:57.180 --> 01:08:59.180]  Раньше вообще так было, что на оптимизации
[01:08:59.180 --> 01:09:01.180]  он мог вот этот вот список
[01:09:01.180 --> 01:09:03.180]  разбить.
[01:09:03.180 --> 01:09:05.180]  А нет, про вызов функций был.
[01:09:05.180 --> 01:09:07.180]  Он же мог разбить аргументы функций и
[01:09:07.180 --> 01:09:09.180]  непоследовательно их вычислять.
[01:09:11.180 --> 01:09:13.180]  И фита какая-то там такая.
[01:09:17.180 --> 01:09:19.180]  Next.
[01:09:19.180 --> 01:09:21.180]  Next тоже
[01:09:21.180 --> 01:09:23.180]  видим. Тут неинтересно.
[01:09:23.180 --> 01:09:25.180]  И теперь вот.
[01:09:25.180 --> 01:09:27.180]  Вот такой конструктор мы написали.
[01:09:27.180 --> 01:09:29.180]  Да, он больше ничего не делает.
[01:09:29.180 --> 01:09:31.180]  Видите, да?
[01:09:31.180 --> 01:09:33.180]  Значит, добавить
[01:09:33.180 --> 01:09:35.180]  ребра. Здесь очень хочется добавить.
[01:09:35.180 --> 01:09:37.180]  Ну понятно, вы там можете, если вы хотите добавить целый
[01:09:37.180 --> 01:09:39.180]  вектор каких-то ребер, то в каких-то форматах
[01:09:39.180 --> 01:09:41.180]  вы там можете еще адаптеры тут
[01:09:41.180 --> 01:09:43.180]  написать, это не проблема.
[01:09:43.180 --> 01:09:45.180]  Но самое главное
[01:09:45.180 --> 01:09:47.180]  insert edge local, как будет
[01:09:47.180 --> 01:09:49.180]  добавить одно ребро.
[01:09:53.180 --> 01:09:55.180]  Start the vertex.
[01:09:55.180 --> 01:09:57.180]  Start the vertex.
[01:09:57.180 --> 01:09:59.180]  Нет, тут по-хорошему еще конечно
[01:09:59.180 --> 01:10:01.180]  неплохо было бы там написать какую-нибудь проверочку
[01:10:01.180 --> 01:10:03.180]  в духе там.
[01:10:03.180 --> 01:10:05.180]  Вот это вот.
[01:10:05.180 --> 01:10:07.180]  Assert, допустим, source.
[01:10:07.180 --> 01:10:09.180]  Извиняюсь.
[01:10:09.180 --> 01:10:11.180]  Меньше vertices number.
[01:10:17.180 --> 01:10:19.180]  И sync.
[01:10:19.180 --> 01:10:21.180]  Теперь begin.
[01:10:21.180 --> 01:10:23.180]  Что такое begin?
[01:10:27.180 --> 01:10:29.180]  Ну, begin все просто.
[01:10:31.180 --> 01:10:33.180]  Нет,
[01:10:33.180 --> 01:10:35.180]  от, во-первых,
[01:10:35.180 --> 01:10:37.180]  this.
[01:10:37.180 --> 01:10:39.180]  Помните, мы
[01:10:39.180 --> 01:10:41.180]  ж ему ссылочку
[01:10:41.180 --> 01:10:43.180]  на себя любимого доставали.
[01:10:43.180 --> 01:10:45.180]  Поэтому
[01:10:45.180 --> 01:10:47.180]  всегда помним.
[01:10:47.180 --> 01:10:49.180]  Поэтому указатель
[01:10:49.180 --> 01:10:51.180]  на себя любимого это важно.
[01:10:55.180 --> 01:10:57.180]  Так что вот такой вот красота.
[01:11:01.180 --> 01:11:03.180]  Не знаю. Честно говоря, я не знаю.
[01:11:03.180 --> 01:11:05.180]  Я не умею compilite в этом code blocks.
[01:11:11.180 --> 01:11:13.180]  Нет, там build.
[01:11:13.180 --> 01:11:15.180]  Вот build.
[01:11:15.180 --> 01:11:17.180]  А что такое build?
[01:11:17.180 --> 01:11:19.180]  Потому что он вреден.
[01:11:19.180 --> 01:11:21.180]  Нет.
[01:11:21.180 --> 01:11:23.180]  Мы сейчас открыли code blocks в качестве блокнота?
[01:11:23.180 --> 01:11:25.180]  Да.
[01:11:25.180 --> 01:11:27.180]  Могу перевести на code forces.
[01:11:27.180 --> 01:11:29.180]  Можем просто
[01:11:29.180 --> 01:11:31.180]  консоль рейсоваться.
[01:11:31.180 --> 01:11:33.180]  Ага, у меня винда.
[01:11:33.180 --> 01:11:35.180]  Нет,
[01:11:35.180 --> 01:11:37.180]  если я очень хочу это скомпилить, конечно,
[01:11:37.180 --> 01:11:39.180]  у меня есть вот тут рядом рабочая визуалка, но...
[01:11:41.180 --> 01:11:43.180]  Но зачем?
[01:11:43.180 --> 01:11:45.180]  Вот, как это закон, да.
[01:11:45.180 --> 01:11:47.180]  Как это закон этого кода.
[01:11:47.180 --> 01:11:49.180]  Если вы пишите,
[01:11:49.180 --> 01:11:51.180]  там полконтеста, пишите какую-то корневуху,
[01:11:51.180 --> 01:11:53.180]  значит, на самом деле в задаче было решение
[01:11:53.180 --> 01:11:55.180]  за ILOG квадрат.
[01:11:55.180 --> 01:11:57.180]  Ой, это ladder это композиция, что ли?
[01:11:57.180 --> 01:11:59.180]  Не, боже мой.
[01:11:59.180 --> 01:12:01.180]  Ледер там был?
[01:12:01.180 --> 01:12:03.180]  Нет, ледер, но там нет.
[01:12:03.180 --> 01:12:05.180]  Нет, вчера на opencap
[01:12:05.180 --> 01:12:07.180]  была задача, в которой вот там понятие
[01:12:07.180 --> 01:12:09.180]  лесенка возникало, но в совершенно другом контексте.
[01:12:09.180 --> 01:12:11.180]  Потому что задача была, задача даже графами
[01:12:11.180 --> 01:12:13.180]  никак не связана.
[01:12:13.180 --> 01:12:15.180]  Так что можете посмотреть, там веселая задача была.
[01:12:15.180 --> 01:12:17.180]  И вообще это...
[01:12:17.180 --> 01:12:19.180]  Пишите opencap, это просто весело.
[01:12:23.180 --> 01:12:25.180]  Две.
[01:12:27.180 --> 01:12:29.180]  Ну, нормально, я не знаю.
[01:12:29.180 --> 01:12:31.180]  Но это все равно весело, значит, как-то да.
[01:12:31.180 --> 01:12:33.180]  Как-то да.
[01:12:35.180 --> 01:12:37.180]  Ой.
[01:12:37.180 --> 01:12:39.180]  Как-то главное весело.
[01:12:39.180 --> 01:12:41.180]  Теперь надо заниматься, потому что это весело.
[01:12:41.180 --> 01:12:43.180]  Вот.
[01:12:43.180 --> 01:12:45.180]  Значит, вот, смотрите, вот такой вот
[01:12:45.180 --> 01:12:47.180]  network, то есть заметим, что network теперь
[01:12:47.180 --> 01:12:49.180]  самодостаточен. Ну, там можно написать еще
[01:12:49.180 --> 01:12:51.180]  какие-нибудь методы, но, по крайней мере, теперь,
[01:12:51.180 --> 01:12:53.180]  если я захочу написать какой-нибудь алгоритм,
[01:12:53.180 --> 01:12:55.180]  то этот алгоритм у меня, соответственно,
[01:12:55.180 --> 01:12:57.180]  может с этим network работать
[01:12:57.180 --> 01:12:59.180]  как что-то внешнее,
[01:12:59.180 --> 01:13:01.180]  правда?
[01:13:01.180 --> 01:13:03.180]  То есть, я вот с этим вот, я могу
[01:13:03.180 --> 01:13:05.180]  практически, то есть, практически все остальные
[01:13:05.180 --> 01:13:07.180]  функции просто реализовать внешним,
[01:13:07.180 --> 01:13:09.180]  обратить внимание образам.
[01:13:09.180 --> 01:13:11.180]  Потому что, ну, а первое,
[01:13:11.180 --> 01:13:13.180]  я могу, конечно, вот эту, то есть, заметим,
[01:13:13.180 --> 01:13:15.180]  что тут немножко небезопасно, то есть, я гарантирую,
[01:13:15.180 --> 01:13:17.180]  что у меня ребра взаимообратные,
[01:13:17.180 --> 01:13:19.180]  но я не гарантирую, что у меня в каждый момент
[01:13:19.180 --> 01:13:21.180]  времени в сети реально
[01:13:21.180 --> 01:13:23.180]  поток.
[01:13:23.180 --> 01:13:25.180]  Логично, да?
[01:13:25.180 --> 01:13:27.180]  Вот.
[01:13:27.180 --> 01:13:29.180]  Поэтому
[01:13:29.180 --> 01:13:31.180]  поэтому тут получаются всякие,
[01:13:31.180 --> 01:13:33.180]  поэтому можно написать, первое, что можно
[01:13:33.180 --> 01:13:35.180]  попробовать, это писать функцию
[01:13:35.180 --> 01:13:37.180]  там, я не знаю,
[01:13:37.180 --> 01:13:39.180]  называется
[01:13:39.180 --> 01:13:41.180]  is flow
[01:13:41.180 --> 01:13:43.180]  correct?
[01:13:43.180 --> 01:13:45.180]  No.
[01:13:45.180 --> 01:13:47.180]  Там, допустим,
[01:13:47.180 --> 01:13:49.180]  какой-нибудь
[01:13:49.180 --> 01:13:51.180]  network.
[01:13:51.180 --> 01:13:53.180]  Network.
[01:13:53.180 --> 01:13:55.180]  Ну, вот.
[01:13:55.180 --> 01:13:57.180]  Тут лучше по константной ссылке, ладно, не скомпилиться,
[01:13:57.180 --> 01:13:59.180]  конечно, но все-таки. А, хотя
[01:13:59.180 --> 01:14:01.180]  нет, бегинчик-то.
[01:14:01.180 --> 01:14:03.180]  Ну, да.
[01:14:03.180 --> 01:14:05.180]  Ну, ладно, давайте так вот.
[01:14:05.180 --> 01:14:07.180]  Я тут напишу конс бедин, так того, что это
[01:14:07.180 --> 01:14:09.180]  по-хорошему понятно, что там итераторы, дальше там
[01:14:09.180 --> 01:14:11.180]  начинается вот это все, конст, итераторы,
[01:14:11.180 --> 01:14:13.180]  эти все, и так далее.
[01:14:13.180 --> 01:14:15.180]  Ну, это если очень большое желание есть, да?
[01:14:15.180 --> 01:14:17.180]  Ну, вот. Ну, на самом деле,
[01:14:17.180 --> 01:14:19.180]  ну, на самом деле, тут можно так
[01:14:19.180 --> 01:14:21.180]  перебирать. А, ну,
[01:14:21.180 --> 01:14:23.180]  во-первых, давайте думать, что нам надо от сети вообще?
[01:14:23.180 --> 01:14:25.180]  Ну, во-первых, не помешали бы
[01:14:25.180 --> 01:14:27.180]  всякие гетеры в духе, а сколько там
[01:14:27.180 --> 01:14:29.180]  у тебя вершин?
[01:14:29.180 --> 01:14:31.180]  Так.
[01:14:31.180 --> 01:14:33.180]  Ну, вот.
[01:14:33.180 --> 01:14:35.180]  А, ну, ладно, вот давайте я тут напишу еще
[01:14:35.180 --> 01:14:37.180]  assert start меньше
[01:14:37.180 --> 01:14:39.180]  number.
[01:14:39.180 --> 01:14:41.180]  Вот, ну,
[01:14:41.180 --> 01:14:43.180]  здесь-то точно надо.
[01:14:45.180 --> 01:14:47.180]  А,
[01:14:47.180 --> 01:14:49.180]  а еще не помешало бы
[01:14:49.180 --> 01:14:51.180]  по ассерти для надежности, смотрите, какую
[01:14:51.180 --> 01:14:53.180]  штуку, capacity меньше,
[01:14:53.180 --> 01:14:55.180]  чем больше
[01:14:55.180 --> 01:14:57.180]  либо равно, чем tflow
[01:14:57.180 --> 01:14:59.180]  от нуля.
[01:15:01.180 --> 01:15:03.180]  Вот.
[01:15:03.180 --> 01:15:05.180]  Что еще надо?
[01:15:05.180 --> 01:15:07.180]  Ну, еще там
[01:15:07.180 --> 01:15:09.180]  да, можно написать всякие
[01:15:09.180 --> 01:15:11.180]  гетеры. Там, допустим,
[01:15:11.180 --> 01:15:13.180]  size t
[01:15:13.180 --> 01:15:15.180]  get vertices number.
[01:15:19.180 --> 01:15:21.180]  Ну, понятно, да?
[01:15:23.180 --> 01:15:25.180]  Вот. Ну, там всякие еще пару гетеров
[01:15:25.180 --> 01:15:27.180]  можно написать вот эти вот get source,
[01:15:27.180 --> 01:15:29.180]  get sync, да? А, ой!
[01:15:29.180 --> 01:15:31.180]  Мы ж совсем забыли, ой, ой, ой!
[01:15:31.180 --> 01:15:33.180]  Еще важная вещь.
[01:15:35.180 --> 01:15:37.180]  То есть, как бы еще надо проверить,
[01:15:37.180 --> 01:15:39.180]  что
[01:15:41.180 --> 01:15:43.180]  ой, это ж важно, правда.
[01:15:43.180 --> 01:15:45.180]  Аж принципиально,
[01:15:45.180 --> 01:15:47.180]  что исток, исток и совпадают.
[01:15:49.180 --> 01:15:51.180]  Вот, теперь.
[01:15:51.180 --> 01:15:53.180]  Ну, или ответственно.
[01:15:53.180 --> 01:15:55.180]  Ну, вот.
[01:15:55.180 --> 01:15:57.180]  Ну.
[01:15:59.180 --> 01:16:01.180]  That's this number.
[01:16:01.180 --> 01:16:03.180]  Хотя лучше
[01:16:03.180 --> 01:16:05.180]  да, как это, дайте, для краткости.
[01:16:07.180 --> 01:16:09.180]  Что?
[01:16:11.180 --> 01:16:13.180]  Ой!
[01:16:13.180 --> 01:16:15.180]  Ай-яй-яй!
[01:16:15.180 --> 01:16:17.180]  Ай-яй-яй!
[01:16:17.180 --> 01:16:19.180]  Ай-яй-яй!
[01:16:19.180 --> 01:16:21.180]  Ай-яй-яй!
[01:16:21.180 --> 01:16:23.180]  Еще копипаста какая-то, ай-яй-яй!
[01:16:23.180 --> 01:16:25.180]  Ай-яй-яй!
[01:16:25.180 --> 01:16:27.180]  Ай-яй-яй!
[01:16:27.180 --> 01:16:29.180]  Ай-яй-яй!
[01:16:29.180 --> 01:16:31.180]  Ай-яй-яй!
[01:16:31.180 --> 01:16:33.180]  Ай-яй-яй!
[01:16:33.180 --> 01:16:35.180]  Ну, ладно, дайте, как это называется,
[01:16:35.180 --> 01:16:37.180]  главная суть, думаю, вы поняли,
[01:16:37.180 --> 01:16:39.180]  так что остальное.
[01:16:39.180 --> 01:16:41.180]  Так.
[01:16:41.180 --> 01:16:43.180]  Я скомпилил.
[01:16:43.180 --> 01:16:45.180]  Ага, не скомпилил.
[01:16:45.180 --> 01:16:47.180]  Как это скомпилил?
[01:16:47.180 --> 01:16:49.180]  А почему тут network без шаблона?
[01:16:49.180 --> 01:16:51.180]  Где?
[01:16:51.180 --> 01:16:53.180]  Вот здесь.
[01:16:53.180 --> 01:16:55.180]  Ай-яй-яй!
[01:16:55.180 --> 01:16:57.180]  А, ну...
[01:16:57.180 --> 01:16:59.180]  Ну...
[01:16:59.180 --> 01:17:01.180]  Ты...
[01:17:01.180 --> 01:17:03.180]  Тэфлоу,
[01:17:03.180 --> 01:17:05.180]  что там у нас еще было?
[01:17:05.180 --> 01:17:07.180]  А, тэвертакс у нас сначала, да?
[01:17:07.180 --> 01:17:09.180]  Да, не перепутайте.
[01:17:09.180 --> 01:17:11.180]  Ай-яй-яй!
[01:17:11.180 --> 01:17:13.180]  Ага, согласен, ну что делать?
[01:17:13.180 --> 01:17:15.180]  Как бы красота
[01:17:15.180 --> 01:17:17.180]  требует жертв.
[01:17:17.180 --> 01:17:19.180]  Или в программистском случае
[01:17:19.180 --> 01:17:21.180]  человеку часов.
[01:17:21.180 --> 01:17:23.180]  И слоу крэкс?
[01:17:23.180 --> 01:17:25.180]  Вот там тэфлоу.
[01:17:27.180 --> 01:17:29.180]  Где тэфлоу?
[01:17:29.180 --> 01:17:31.180]  Там тэвертакс...
[01:17:31.180 --> 01:17:33.180]  А, да, да, да.
[01:17:33.180 --> 01:17:35.180]  Так, ну да, network,
[01:17:35.180 --> 01:17:37.180]  тэвертакс, тэфлоу.
[01:17:37.180 --> 01:17:39.180]  Значит, поехали,
[01:17:39.180 --> 01:17:41.180]  n достали,
[01:17:41.180 --> 01:17:43.180]  v, значит...
[01:17:43.180 --> 01:17:45.180]  Ну, тут давайте,
[01:17:45.180 --> 01:17:47.180]  тэвертакс... Ну, тут ладно,
[01:17:47.180 --> 01:17:49.180]  тут уже можно написать,
[01:17:49.180 --> 01:17:51.180]  network.getsource.
[01:17:51.180 --> 01:17:53.180]  И, конечно,
[01:17:53.180 --> 01:17:55.180]  то же самое с sync.
[01:17:59.180 --> 01:18:01.180]  А впрочем, на самом деле,
[01:18:01.180 --> 01:18:03.180]  ну вот,
[01:18:03.180 --> 01:18:05.180]  да, если v не равно
[01:18:05.180 --> 01:18:07.180]  source, and then v
[01:18:07.180 --> 01:18:09.180]  не равно sync,
[01:18:11.180 --> 01:18:13.180]  ну вот, ну и дальше
[01:18:13.180 --> 01:18:15.180]  можно написать is, что ли, ну вот.
[01:18:17.180 --> 01:18:19.180]  if.
[01:18:19.180 --> 01:18:21.180]  Значит,
[01:18:21.180 --> 01:18:23.180]  ну вот, дальше вот тут можно написать
[01:18:23.180 --> 01:18:25.180]  что-нибудь другим, я сейчас не буду писать,
[01:18:25.180 --> 01:18:27.180]  getoutside.
[01:18:29.180 --> 01:18:31.180]  getoutflow
[01:18:31.180 --> 01:18:33.180]  от v равно
[01:18:33.180 --> 01:18:35.180]  getinflow, ну, например.
[01:18:37.180 --> 01:18:39.180]  Ну, просто out это сколько реально
[01:18:39.180 --> 01:18:41.180]  исходит, а тут сколько реально входит.
[01:18:41.180 --> 01:18:43.180]  В том плане, чтобы минусы не считать.
[01:18:45.180 --> 01:18:47.180]  Понимаете, да?
[01:18:47.180 --> 01:18:49.180]  Ну, эти функции
[01:18:49.180 --> 01:18:51.180]  можно отдельно написать.
[01:18:53.180 --> 01:18:55.180]  Ну вот, и тут можно написать там
[01:18:55.180 --> 01:18:57.180]  что-нибудь типа
[01:18:57.180 --> 01:18:59.180]  return false.
[01:19:07.180 --> 01:19:09.180]  Чего?
[01:19:09.180 --> 01:19:11.180]  Чего потом может быть некорректным
[01:19:11.180 --> 01:19:13.180]  в плане, когда не собирается первая храбрость?
[01:19:17.180 --> 01:19:19.180]  Все суммируем.
[01:19:21.180 --> 01:19:23.180]  Но, смотрите,
[01:19:23.180 --> 01:19:25.180]  дальше все будет зависеть
[01:19:25.180 --> 01:19:27.180]  от того, как вы функции напишете.
[01:19:29.180 --> 01:19:31.180]  У нас сейчас речь договорится о понятийном аппарате,
[01:19:31.180 --> 01:19:33.180]  а не о том, как
[01:19:33.180 --> 01:19:35.180]  это реализовать, что реализовать можно и так, и так.
[01:19:35.180 --> 01:19:37.180]  Но обычно, как бы, можно
[01:19:37.180 --> 01:19:39.180]  считать, что outflow у меня как-то вот
[01:19:39.180 --> 01:19:41.180]  кажется, что скорее это то, что вытекает,
[01:19:41.180 --> 01:19:43.180]  а inflow то, что втекает.
[01:19:43.180 --> 01:19:45.180]  Можно
[01:19:45.180 --> 01:19:47.180]  как бы написать обобщенный out.
[01:19:47.180 --> 01:19:49.180]  То есть действительно просуммировать, сколько вытекает,
[01:19:49.180 --> 01:19:51.180]  считая, что как бы отрицательное
[01:19:51.180 --> 01:19:53.180]  нас тоже устраивает.
[01:19:53.180 --> 01:19:55.180]  То есть обобщенный,
[01:19:55.180 --> 01:19:57.180]  то есть можно написать так написать, а можно
[01:19:57.180 --> 01:19:59.180]  написать вот действительно там какую-нибудь функцию
[01:19:59.180 --> 01:20:03.180]  if generalized out.
[01:20:03.180 --> 01:20:09.180]  От v равно 0.
[01:20:09.180 --> 01:20:11.180]  То есть и не равно 0.
[01:20:15.180 --> 01:20:17.180]  Нет, вот
[01:20:17.180 --> 01:20:19.180]  а вот философский вопрос. На самом деле
[01:20:19.180 --> 01:20:21.180]  уже нет необходимости.
[01:20:21.180 --> 01:20:23.180]  Потому что при очень
[01:20:23.180 --> 01:20:25.180]  большом желании я могу
[01:20:25.180 --> 01:20:27.180]  на самом деле это сделать как
[01:20:27.180 --> 01:20:29.180]  вот, например, пожалуйста.
[01:20:29.180 --> 01:20:31.180]  В качестве примера я сейчас реализую функцию
[01:20:31.180 --> 01:20:35.180]  get outflow
[01:20:35.180 --> 01:20:37.180]  от
[01:20:37.180 --> 01:20:39.180]  t-vertex v.
[01:20:41.180 --> 01:20:43.180]  Ну, поехали.
[01:20:43.180 --> 01:20:45.180]  Значит, for
[01:20:45.180 --> 01:20:47.180]  допустим, авто.
[01:20:47.180 --> 01:20:49.180]  Ну, авто не очень люблю, конечно, авто.
[01:20:49.180 --> 01:20:51.180]  А, network я забыл
[01:20:51.180 --> 01:20:53.180]  перегнать. Network
[01:20:55.180 --> 01:20:57.180]  t-vertex
[01:20:57.180 --> 01:20:59.180]  t-flow
[01:20:59.180 --> 01:21:01.180]  t-vertex
[01:21:01.180 --> 01:21:03.180]  for значит
[01:21:03.180 --> 01:21:05.180]  network
[01:21:05.180 --> 01:21:07.180]  так
[01:21:07.180 --> 01:21:09.180]  да
[01:21:09.180 --> 01:21:11.180]  мало кто знает, что у команды
[01:21:11.180 --> 01:21:13.180]  плюс семь есть и второе название
[01:21:13.180 --> 01:21:15.180]  плюс семь
[01:21:15.180 --> 01:21:17.180]  девятьсот двадцать шесть
[01:21:17.180 --> 01:21:19.180]  пятьсот тридцать пять
[01:21:19.180 --> 01:21:21.180]  сорок четыре
[01:21:21.180 --> 01:21:23.180]  двадцать восемь
[01:21:23.180 --> 01:21:25.180]  триста пятьдесят два
[01:21:25.180 --> 01:21:27.180]  а
[01:21:27.180 --> 01:21:29.180]  исток
[01:21:31.180 --> 01:21:33.180]  t-vertex
[01:21:33.180 --> 01:21:35.180]  t-vertex
[01:21:35.180 --> 01:21:37.180]  t-vertex
[01:21:39.180 --> 01:21:41.180]  ну да
[01:21:41.180 --> 01:21:43.180]  и вот команда kvn
[01:21:43.180 --> 01:21:45.180]  плюс семь девятьсот шестнадцать
[01:21:45.180 --> 01:21:47.180]  пятьсот тридцать пять
[01:21:47.180 --> 01:21:49.180]  сорок четыре
[01:21:49.180 --> 01:21:51.180]  двадцать восемь
[01:21:51.180 --> 01:21:53.180]  триста пятьдесят два
[01:21:55.180 --> 01:21:57.180]  и
[01:21:57.180 --> 01:21:59.180]  репом
[01:21:59.180 --> 01:22:01.180]  мы
[01:22:01.180 --> 01:22:03.180]  слушно писано
[01:22:03.180 --> 01:22:05.180]  буквально по всем векшинам
[01:22:05.180 --> 01:22:07.180]  а дитал флоу
[01:22:07.180 --> 01:22:09.180]  это вот твест
[01:22:09.180 --> 01:22:11.180]  а ты сейчас пишешь и сфолкаре
[01:22:11.180 --> 01:22:13.180]  ну да
[01:22:13.180 --> 01:22:15.180]  можем конечно и поуважать
[01:22:15.180 --> 01:22:17.180]  но
[01:22:17.180 --> 01:22:19.180]  история зевлона
[01:22:19.180 --> 01:22:21.180]  да и вот get
[01:22:21.180 --> 01:22:23.180]  как бы я пишу t-flow
[01:22:23.180 --> 01:22:25.180]  я вот говорю
[01:22:25.180 --> 01:22:27.180]  и говорю примерно следующее
[01:22:27.180 --> 01:22:29.180]  но чтобы я там
[01:22:29.180 --> 01:22:31.180]  t-flow
[01:22:31.180 --> 01:22:33.180]  f равно
[01:22:33.180 --> 01:22:35.180]  it.getflow
[01:22:35.180 --> 01:22:37.180]  просто вот read
[01:22:37.180 --> 01:22:39.180]  getflow
[01:22:39.180 --> 01:22:41.180]  if f больше ноля ans plus равно f
[01:22:41.180 --> 01:22:43.180]  return ans
[01:22:53.180 --> 01:22:55.180]  вот
[01:22:55.180 --> 01:22:57.180]  просто тупо
[01:22:57.180 --> 01:22:59.180]  так ты указываешь на ребро
[01:22:59.180 --> 01:23:01.180]  а какой у тебя там поток
[01:23:01.180 --> 01:23:03.180]  все
[01:23:03.180 --> 01:23:05.180]  если я хочу inflow
[01:23:05.180 --> 01:23:07.180]  сколько в меня
[01:23:07.180 --> 01:23:09.180]  потому что
[01:23:09.180 --> 01:23:11.180]  я хочу посмотреть сколько
[01:23:11.180 --> 01:23:13.180]  из фолка
[01:23:13.180 --> 01:23:15.180]  из фолка
[01:23:15.180 --> 01:23:17.180]  потому что
[01:23:17.180 --> 01:23:19.180]  я хочу посмотреть сколько
[01:23:19.180 --> 01:23:21.180]  из фолка
[01:23:21.180 --> 01:23:23.180]  потому что я хочу посмотреть сколько
[01:23:23.180 --> 01:23:25.180]  из меня вытекает
[01:23:25.180 --> 01:23:27.180]  то есть вот
[01:23:27.180 --> 01:23:29.180]  например
[01:23:29.180 --> 01:23:31.180]  верно мне что все ребра
[01:23:31.180 --> 01:23:33.180]  из нас вытекают
[01:23:33.180 --> 01:23:35.180]  да
[01:23:35.180 --> 01:23:37.180]  в меня же может течь
[01:23:37.180 --> 01:23:39.180]  отрицательное ребро
[01:23:39.180 --> 01:23:41.180]  не может
[01:23:43.180 --> 01:23:45.180]  хотя
[01:23:45.180 --> 01:23:47.180]  ну давайте так
[01:23:47.180 --> 01:23:49.180]  я подразумевал что-то отрицательное
[01:23:49.180 --> 01:23:51.180]  то есть вот ориентированное
[01:23:53.180 --> 01:23:55.180]  поэтому там получается
[01:23:55.180 --> 01:23:57.180]  что по прямым ребрам
[01:23:57.180 --> 01:23:59.180]  потоки по любому не отрицательны
[01:24:05.180 --> 01:24:07.180]  а это пользователи пишут
[01:24:11.180 --> 01:24:13.180]  ну то есть я ему конечно
[01:24:13.180 --> 01:24:15.180]  могу прописать такие функции он может воспользоваться
[01:24:15.180 --> 01:24:17.180]  а outflow это типа сколько вытекает
[01:24:17.180 --> 01:24:19.180]  то есть сеть ориентированная
[01:24:21.180 --> 01:24:23.180]  нет бывает не ориентированная
[01:24:23.180 --> 01:24:25.180]  не ориентированная сеть от ориентированной
[01:24:25.180 --> 01:24:27.180]  вот можно тоже
[01:24:29.180 --> 01:24:31.180]  она просто отличается тем
[01:24:31.180 --> 01:24:33.180]  что вы вот здесь будете передавать не tflow
[01:24:33.180 --> 01:24:35.180]  а тоже копасть
[01:24:37.180 --> 01:24:39.180]  так что при желании вы тут можете еще четвертое поле
[01:24:39.180 --> 01:24:41.180]  добавить для удобства
[01:24:41.180 --> 01:24:43.180]  вот
[01:24:43.180 --> 01:24:45.180]  ну как
[01:24:45.180 --> 01:24:47.180]  даже буль
[01:24:47.180 --> 01:24:49.180]  типа ребро ориентированное или не ориентированное
[01:24:51.180 --> 01:24:53.180]  вот
[01:24:53.180 --> 01:24:55.180]  но так мне
[01:24:55.180 --> 01:24:57.180]  удобно считать что по ребру
[01:24:57.180 --> 01:24:59.180]  вода бывает либо она вытекает либо
[01:24:59.180 --> 01:25:01.180]  втекает в любом случае
[01:25:01.180 --> 01:25:03.180]  вот
[01:25:03.180 --> 01:25:05.180]  сейчас у меня поток устроен так что
[01:25:05.180 --> 01:25:07.180]  в явном виде написано сколько
[01:25:07.180 --> 01:25:09.180]  по этому ребру течет
[01:25:09.180 --> 01:25:11.180]  то есть на отрицательное число значит течет в глаз
[01:25:13.180 --> 01:25:15.180]  а если положительное
[01:25:15.180 --> 01:25:17.180]  то как бы из нас
[01:25:17.180 --> 01:25:19.180]  поэтому я суммирую все положительные
[01:25:19.180 --> 01:25:21.180]  то есть отличие будет только в том что
[01:25:21.180 --> 01:25:23.180]  вот я перебираю
[01:25:23.180 --> 01:25:25.180]  то есть по большому счету
[01:25:25.180 --> 01:25:27.180]  я вот входящие
[01:25:27.180 --> 01:25:29.180]  сколько в меня
[01:25:29.180 --> 01:25:31.180]  втекает
[01:25:31.180 --> 01:25:33.180]  отличие будет очень простое
[01:25:35.180 --> 01:25:37.180]  то есть да тут
[01:25:37.180 --> 01:25:39.180]  я вот на этом уровне могу if там
[01:25:39.180 --> 01:25:41.180]  way меньше нуля
[01:25:41.180 --> 01:25:43.180]  но я могу взять парное
[01:25:43.180 --> 01:25:45.180]  ребро и посмотреть что оно больше нуля
[01:25:45.180 --> 01:25:47.180]  но как бы это то же самое что
[01:25:47.180 --> 01:25:49.180]  посмотреть что я меньше нуля и тогда тут написать
[01:25:49.180 --> 01:25:51.180]  минус равно пожалуйста
[01:25:51.180 --> 01:25:53.180]  то есть можно копипасту можете это обобщить
[01:25:53.180 --> 01:25:55.180]  ну там
[01:25:55.180 --> 01:25:57.180]  сделать какую-то общую функцию которая там третий
[01:25:57.180 --> 01:25:59.180]  передает какой-то f и потом тут лямбда функцию
[01:25:59.180 --> 01:26:01.180]  писать
[01:26:01.180 --> 01:26:03.180]  да а то же знаете на review у нас это копипасту не любят
[01:26:03.180 --> 01:26:05.180]  еще не любят
[01:26:05.180 --> 01:26:07.180]  не удаляющиеся диалога
[01:26:07.180 --> 01:26:09.180]  кстати
[01:26:09.180 --> 01:26:11.180]  она вам в контесте обязательно
[01:26:11.180 --> 01:26:13.180]  писать в таком стиле
[01:26:13.180 --> 01:26:15.180]  ну а как же
[01:26:15.180 --> 01:26:17.180]  классы отправляй
[01:26:17.180 --> 01:26:19.180]  ну в review да
[01:26:19.180 --> 01:26:21.180]  а в первом семействе
[01:26:21.180 --> 01:26:23.180]  будете на это
[01:26:23.180 --> 01:26:25.180]  попался
[01:26:25.180 --> 01:26:27.180]  попался
[01:26:27.180 --> 01:26:29.180]  нет вот сам нет
[01:26:29.180 --> 01:26:31.180]  самое веселое будет это когда речь дойдет
[01:26:31.180 --> 01:26:33.180]  до ревьюшки с задачей
[01:26:33.180 --> 01:26:35.180]  продэкспер мутейшн
[01:26:49.180 --> 01:26:51.180]  так ну вот будет тест
[01:26:51.180 --> 01:26:53.180]  на то насколько хорошо написал
[01:26:55.180 --> 01:26:57.180]  или уже легче переписать
[01:26:57.180 --> 01:26:59.180]  да
[01:26:59.180 --> 01:27:01.180]  ну посмотрим
[01:27:01.180 --> 01:27:03.180]  что я не знаю
[01:27:03.180 --> 01:27:05.180]  я вначале жестко подумал
[01:27:05.180 --> 01:27:07.180]  надо ли писать мне на эти ноды которые
[01:27:07.180 --> 01:27:09.180]  через new делаются
[01:27:09.180 --> 01:27:11.180]  надо было
[01:27:11.180 --> 01:27:13.180]  вот значит
[01:27:13.180 --> 01:27:15.180]  далее
[01:27:21.180 --> 01:27:23.180]  ну вот
[01:27:23.180 --> 01:27:25.180]  мы ее уже написали вот она
[01:27:25.180 --> 01:27:27.180]  а где
[01:27:27.180 --> 01:27:29.180]  вот
[01:27:29.180 --> 01:27:31.180]  найдите 10 отличий
[01:27:31.180 --> 01:27:33.180]  подсказка их 3
[01:27:43.180 --> 01:27:45.180]  еще раз
[01:27:45.180 --> 01:27:47.180]  два
[01:27:47.180 --> 01:27:49.180]  три
[01:27:49.180 --> 01:27:51.180]  смотрим исходящие
[01:27:51.180 --> 01:27:53.180]  и все
[01:27:53.180 --> 01:27:55.180]  ну смотрите
[01:27:55.180 --> 01:27:57.180]  тут фишка такая как перебрать входящие
[01:27:57.180 --> 01:27:59.180]  ребра
[01:27:59.180 --> 01:28:01.180]  надо перебрать все исходящие
[01:28:01.180 --> 01:28:03.180]  и рассмотреть парты
[01:28:03.180 --> 01:28:05.180]  правда
[01:28:09.180 --> 01:28:11.180]  ну когда мы
[01:28:11.180 --> 01:28:13.180]  перебираем Stevens
[01:28:13.180 --> 01:28:15.180]  не только настоящие ребра
[01:28:15.180 --> 01:28:17.180]  а которые chlorine
[01:28:17.180 --> 01:28:18.060]  то Gulf
[01:28:18.060 --> 01:28:20.060]  а все иму сума
[01:28:20.060 --> 01:28:22.060]  Да, мы их тоже перебираем.
[01:28:22.060 --> 01:28:24.060]  Но почему ребра это пары?
[01:28:24.060 --> 01:28:26.060]  Ну потому что устроено.
[01:28:26.060 --> 01:28:28.060]  Потому что у нас сеть так устроена, помните?
[01:28:28.060 --> 01:28:30.060]  Сеть перебирает всё, что из нас таксит.
[01:28:30.060 --> 01:28:34.060]  Добавляем ребро, добавляем обнимое, как оно есть, и обратное.
[01:28:34.060 --> 01:28:38.060]  Но мы и обнимое добавляем к одной вершине, обратное к другой.
[01:28:38.060 --> 01:28:42.060]  Правильно, поэтому может так случиться, что есть входящее ребро,
[01:28:42.060 --> 01:28:47.060]  его мы добавим как исходящее к той вершине, а обратное добавим уже к нам.
[01:28:47.060 --> 01:28:49.060]  И мы его тоже будем перебирать.
[01:28:49.060 --> 01:28:52.060]  Ну неплохо, а просто надо проверить.
[01:28:56.060 --> 01:28:59.060]  Давайте добавим только одно ребро, между вершинами 1 и 2.
[01:28:59.060 --> 01:29:03.060]  И пустим там поток 1.
[01:29:03.060 --> 01:29:09.060]  Туда 1 из одного, обратно минус 1 из нуля.
[01:29:09.060 --> 01:29:11.060]  Совершенно верно.
[01:29:11.060 --> 01:29:17.060]  Get out flow вернёт нам единичку.
[01:29:17.060 --> 01:29:20.060]  Get out flow от чего?
[01:29:20.060 --> 01:29:22.060]  От первой вершины вернёт единичку.
[01:29:22.060 --> 01:29:25.060]  А get inflow от первой вершины вернёт 0.
[01:29:25.060 --> 01:29:28.060]  Ну если там течёт такой поток, то да.
[01:29:34.060 --> 01:29:36.060]  Ну это хорошо.
[01:29:36.060 --> 01:29:38.060]  Ну да, с этой точки зрения.
[01:29:38.060 --> 01:29:44.060]  Так что если мы хотим что-то обобщать, то можно просто написать вот эту функцию generalized out.
[01:29:44.060 --> 01:29:49.060]  Ну вот это generalized out.
[01:29:49.060 --> 01:29:53.060]  Хотя по-хорошему она называется excess.
[01:29:53.060 --> 01:29:57.060]  Вот в теории Голдберга она называется excess из быта.
[01:29:57.060 --> 01:30:03.060]  Потому что мы там ведём понятие предпоток, в котором откажемся от требований,
[01:30:03.060 --> 01:30:05.060]  что там в каждую сколько втекает, столько вытекает.
[01:30:05.060 --> 01:30:08.060]  Мы будем допускать, что вытекает больше, чем втекает.
[01:30:08.060 --> 01:30:12.060]  Или наоборот, мы допустим, что втекает больше, чем вытекает.
[01:30:13.060 --> 01:30:16.060]  Слышу я про машину.
[01:30:16.060 --> 01:30:18.060]  Не, машина там ни при чём.
[01:30:18.060 --> 01:30:20.060]  Вот.
[01:30:20.060 --> 01:30:22.060]  Не, ну наверное она, да.
[01:30:22.060 --> 01:30:24.060]  Ну вот.
[01:30:24.060 --> 01:30:27.060]  Здесь, а здесь просто и фани будет.
[01:30:27.060 --> 01:30:29.060]  Здесь вообще всё просто.
[01:30:33.060 --> 01:30:37.060]  Generalized out должен быть мод для всех, кроме SP?
[01:30:37.060 --> 01:30:39.060]  Да.
[01:30:39.060 --> 01:30:43.060]  Более того, если вы очень хотите узнать величину потока,
[01:30:43.060 --> 01:30:47.060]  то есть если вы гарантируете, что это поток,
[01:30:47.060 --> 01:30:53.060]  ещё там можно узнать что-нибудь в духе tflow.get.
[01:30:53.060 --> 01:30:57.060]  Господи, как там по-английски величина потока-то вообще?
[01:30:57.060 --> 01:31:01.060]  Ну вот это всё равно что-то вот, что-то не то.
[01:31:01.060 --> 01:31:03.060]  Ну-ка.
[01:31:03.060 --> 01:31:05.060]  Ладно, как в таких случаях?
[01:31:05.060 --> 01:31:09.060]  В таких случаях нас часто выручает английская википедия.
[01:31:09.060 --> 01:31:11.060]  Так, ну-ка давайте-ка.
[01:31:11.060 --> 01:31:13.060]  Так.
[01:31:13.060 --> 01:31:15.060]  Так, ладно.
[01:31:15.060 --> 01:31:17.060]  Так, достаём интернет.
[01:31:17.060 --> 01:31:19.060]  Вот.
[01:31:19.060 --> 01:31:21.060]  Вот.
[01:31:21.060 --> 01:31:23.060]  Вот.
[01:31:23.060 --> 01:31:25.060]  Вот.
[01:31:25.060 --> 01:31:27.060]  Так, достаём интернет.
[01:31:27.060 --> 01:31:29.060]  Так, интернет.
[01:31:31.060 --> 01:31:33.060]  Нет, всё заглючил.
[01:31:33.060 --> 01:31:35.060]  Нет, просто я...
[01:31:35.060 --> 01:31:37.060]  Нет, можно подключиться к Wi-Fi, но просто,
[01:31:37.060 --> 01:31:39.060]  когда я могу просто воткнуть вот эту штуку.
[01:31:39.060 --> 01:31:41.060]  Нет, просто это очень удобно.
[01:31:41.060 --> 01:31:43.060]  Да, как это да?
[01:31:43.060 --> 01:31:45.060]  Как говорится, да, жизнь.
[01:31:45.060 --> 01:31:47.060]  Нет, это жизнь в Хлебниково.
[01:31:47.060 --> 01:31:49.060]  Минус, там нет проводового интернета.
[01:31:49.060 --> 01:31:51.060]  Просто как класс отсутствует.
[01:31:51.060 --> 01:31:53.060]  Ну потому что там видимо малое количество домов,
[01:31:53.060 --> 01:31:55.060]  которые в длинном отдалении лежат.
[01:31:55.060 --> 01:31:57.060]  Ой, ой.
[01:31:57.060 --> 01:31:59.060]  Так, давайте-ка.
[01:32:05.060 --> 01:32:07.060]  Ладно.
[01:32:07.060 --> 01:32:09.060]  Ладно, телефона, ты там зарядился.
[01:32:13.060 --> 01:32:15.060]  Культура, искусство.
[01:32:17.060 --> 01:32:19.060]  Бэбэбэм.
[01:32:19.060 --> 01:32:21.060]  Да.
[01:32:21.060 --> 01:32:23.060]  И всё надо подождать.
[01:32:23.060 --> 01:32:25.060]  Да, придаю.
[01:32:25.060 --> 01:32:27.060]  Но зато преимущество теперь у вас есть интернет не только в Хлебникове,
[01:32:27.060 --> 01:32:29.060]  а и везде, где есть.
[01:32:29.060 --> 01:32:31.060]  Да.
[01:32:31.060 --> 01:32:33.060]  Правда, как вы можете заметить,
[01:32:33.060 --> 01:32:35.060]  лекция через этот интернет
[01:32:35.060 --> 01:32:37.060]  может подтормаживать.
[01:32:37.060 --> 01:32:39.060]  Потому что это
[01:32:39.060 --> 01:32:41.060]  не ваша любимая 100 мегабит в секунду.
[01:32:43.060 --> 01:32:45.060]  40?
[01:32:45.060 --> 01:32:47.060]  Да ладно.
[01:32:47.060 --> 01:32:49.060]  Да ладно.
[01:32:49.060 --> 01:32:51.060]  Всё, мне казалось, там как раз помощнее.
[01:32:51.060 --> 01:32:53.060]  Нет, просто где-то 30-40
[01:32:53.060 --> 01:32:55.060]  это вот-вот-вот у меня вот-вот-вот.
[01:32:59.060 --> 01:33:01.060]  Так, ладно.
[01:33:01.060 --> 01:33:03.060]  Так, ладно,
[01:33:03.060 --> 01:33:05.060]  это неинтересно.
[01:33:07.060 --> 01:33:09.060]  Ладно, что мы там ищем?
[01:33:09.060 --> 01:33:11.060]  Так, Википедия.
[01:33:13.060 --> 01:33:15.060]  Ладно, Википедия.
[01:33:15.060 --> 01:33:17.060]  Flows.
[01:33:19.060 --> 01:33:21.060]  Ну вот.
[01:33:21.060 --> 01:33:23.060]  Flow psychology.
[01:33:23.060 --> 01:33:25.060]  Так, ладно.
[01:33:27.060 --> 01:33:29.060]  Вот так надёжнее.
[01:33:29.060 --> 01:33:31.060]  Вот.
[01:33:31.060 --> 01:33:33.060]  Вот это прям вот про это.
[01:33:33.060 --> 01:33:35.060]  Так, so greedy algorithm
[01:33:35.060 --> 01:33:37.060]  that controls the maximum flow
[01:33:37.060 --> 01:33:39.060]  and flow network.
[01:33:39.060 --> 01:33:41.060]  Maximum flow problems.
[01:33:41.060 --> 01:33:43.060]  Окей, вот-вот-вот-вот-вот.
[01:33:43.060 --> 01:33:45.060]  Ага.
[01:33:45.060 --> 01:33:47.060]  The maximum flow problem.
[01:33:47.060 --> 01:33:49.060]  Так, definition.
[01:33:51.060 --> 01:33:53.060]  Define the capacity.
[01:33:53.060 --> 01:33:55.060]  A flow is a map.
[01:33:55.060 --> 01:33:57.060]  Oh, the value of flow.
[01:33:57.060 --> 01:33:59.060]  Yeah.
[01:33:59.060 --> 01:34:01.060]  Окей.
[01:34:01.060 --> 01:34:03.060]  Let it be.
[01:34:05.060 --> 01:34:07.060]  Да.
[01:34:07.060 --> 01:34:09.060]  Get flow value.
[01:34:09.060 --> 01:34:11.060]  Как это назвать?
[01:34:13.060 --> 01:34:15.060]  Вот так.
[01:34:15.060 --> 01:34:17.060]  Или вот такие часы.
[01:34:17.060 --> 01:34:19.060]  Сейчас я их пишу.
[01:34:19.060 --> 01:34:21.060]  Точнее, я писал, когда готовился.
[01:34:21.060 --> 01:34:23.060]  Сейчас об этом буду.
[01:34:23.060 --> 01:34:25.060]  Ну вот, по факту так.
[01:34:25.060 --> 01:34:27.060]  Вот это вот всё.
[01:34:27.060 --> 01:34:29.060]  Я буду писать.
[01:34:29.060 --> 01:34:31.060]  Вот.
[01:34:31.060 --> 01:34:33.060]  Ну это вот как примеры действительно,
[01:34:33.060 --> 01:34:35.060]  как можно хоть какую-то базовую работу делать.
[01:34:35.060 --> 01:34:37.060]  Я ещё, конечно, не показал,
[01:34:37.060 --> 01:34:39.060]  где нужно делать push flow.
[01:34:39.060 --> 01:34:41.060]  Но я думаю, вы этого уже понимаете.
[01:34:41.060 --> 01:34:43.060]  Да, вам придётся сохранять, правда,
[01:34:43.060 --> 01:34:45.060]  копипастить себе эти итераторы.
[01:34:45.060 --> 01:34:47.060]  То есть, дайте это.
[01:34:47.060 --> 01:34:49.060]  То есть, вы когда-нибудь это писали,
[01:34:49.060 --> 01:34:51.060]  такой BFS, в котором в качестве
[01:34:51.060 --> 01:34:53.060]  прешек от вершины сохраняли итератор.
[01:34:57.060 --> 01:34:59.060]  Вот в этом алгоритме будет.
[01:34:59.060 --> 01:35:01.060]  Ну так, можете потренироваться.
[01:35:01.060 --> 01:35:03.060]  Хотя нет.
[01:35:03.060 --> 01:35:05.060]  Я указатель хранил.
[01:35:05.060 --> 01:35:07.060]  А, ну.
[01:35:07.060 --> 01:35:09.060]  Ну да.
[01:35:09.060 --> 01:35:11.060]  Так, ну вот.
[01:35:11.060 --> 01:35:13.060]  Так что вот.
[01:35:13.060 --> 01:35:15.060]  BFS, соответственно,
[01:35:15.060 --> 01:35:17.060]  могла бы быть написана вот таким вот образом.
[01:35:21.060 --> 01:35:23.060]  В принципе.
[01:35:27.060 --> 01:35:29.060]  Ну да.
[01:35:29.060 --> 01:35:31.060]  В этом смысле вообще в итераторах
[01:35:31.060 --> 01:35:33.060]  тогда начинается быть всякими полезными
[01:35:33.060 --> 01:35:35.060]  ещё всякие пара методов.
[01:35:35.060 --> 01:35:37.060]  Я не знаю.
[01:35:37.060 --> 01:35:39.060]  Вот residual capacity.
[01:35:39.060 --> 01:35:41.060]  И, конечно, его любимый
[01:35:41.060 --> 01:35:43.060]  напарник был isSaturated.
[01:35:59.060 --> 01:36:01.060]  Ну типа насыщенный ли ребро.
[01:36:01.060 --> 01:36:03.060]  Ну вот это вот.
[01:36:03.060 --> 01:36:05.060]  Ну вот.
[01:36:05.060 --> 01:36:07.060]  Ну вот, как-то приблизительно показали.
[01:36:07.060 --> 01:36:09.060]  Не знаю. Что, имеет смысл писать тут
[01:36:09.060 --> 01:36:11.060]  форда, фолкер, этого, Эдмонса Карпа?
[01:36:13.060 --> 01:36:15.060]  Ну да, всё ладно.
[01:36:15.060 --> 01:36:17.060]  Судя по тому, что все уже в телефониках, смысла уже не имеет.
[01:36:17.060 --> 01:36:19.060]  Ладно.
[01:36:19.060 --> 01:36:21.060]  Тогда, я думаю, пришло время сделать перерывчик.
[01:36:21.060 --> 01:36:23.060]  Теперь немножко о задачах на потоке.
[01:36:23.060 --> 01:36:25.060]  Значит, смотрите.
[01:36:25.060 --> 01:36:27.060]  Сразу скажем маленькую техническую вещь.
[01:36:27.060 --> 01:36:29.060]  Значит, сейчас мы немножко абстрадируемся,
[01:36:29.060 --> 01:36:31.060]  потому что крайне редко
[01:36:31.060 --> 01:36:33.060]  нужно именно прям в этом месте
[01:36:33.060 --> 01:36:35.060]  глубоко знать, что в этих потоках написано.
[01:36:37.060 --> 01:36:39.060]  То есть нужно для этого знать только для того, чтобы
[01:36:39.060 --> 01:36:41.060]  оценить, за сколько вы этот поток найдёте.
[01:36:43.060 --> 01:36:45.060]  Потому что, но в остальном
[01:36:45.060 --> 01:36:47.060]  в общем-то нам достаточно знать чёрный ящик.
[01:36:49.060 --> 01:36:51.060]  И, на самом деле, задачи на потоке
[01:36:51.060 --> 01:36:53.060]  бывают двух типов.
[01:36:53.060 --> 01:36:55.060]  Первое, в котором нужно найти поток
[01:36:55.060 --> 01:36:57.060]  из него, построить какую-то
[01:36:57.060 --> 01:36:59.060]  задачу, какую-то сеть, найти в ней
[01:36:59.060 --> 01:37:01.060]  поток и по этому потоку что-то восстановить.
[01:37:03.060 --> 01:37:05.060]  И задача номер два. И тип номер два.
[01:37:05.060 --> 01:37:07.060]  Найти, построить какую-нибудь сеть,
[01:37:07.060 --> 01:37:09.060]  найти в ней минимальный разрез
[01:37:09.060 --> 01:37:11.060]  и по ней что-нибудь восстановить.
[01:37:13.060 --> 01:37:15.060]  Вот будут оба типа, вот сегодня мы рассмотрим.
[01:37:19.060 --> 01:37:21.060]  Ну, вот, например.
[01:37:23.060 --> 01:37:25.060]  Самая классическая задача такого первого
[01:37:25.060 --> 01:37:27.060]  типа, это, конечно,
[01:37:27.060 --> 01:37:29.060]  поиск парасочетания.
[01:37:29.060 --> 01:37:31.060]  Вот задача.
[01:37:31.060 --> 01:37:33.060]  Правда, именно в двудольном графе,
[01:37:33.060 --> 01:37:35.060]  потому что в обычном графе, к сожалению, поток вам не поможет.
[01:37:37.060 --> 01:37:39.060]  А теперь вот, парасочетание в двудольном графе.
[01:37:39.060 --> 01:37:41.060]  Какова постановка задачи?
[01:37:41.060 --> 01:37:43.060]  Постановка задачи очень проста.
[01:37:43.060 --> 01:37:45.060]  Вот, мы, у нас есть
[01:37:45.060 --> 01:37:47.060]  двудольный граф.
[01:37:49.060 --> 01:37:51.060]  Вот, представим себе
[01:37:51.060 --> 01:37:53.060]  вот такое счастье.
[01:37:53.060 --> 01:37:55.060]  У нас есть...
[01:37:55.060 --> 01:37:57.060]  Смотрите.
[01:37:57.060 --> 01:37:59.060]  Так, вот.
[01:38:01.060 --> 01:38:03.060]  Нет, давайте это.
[01:38:05.060 --> 01:38:07.060]  Наверное, когда будет минкост.
[01:38:07.060 --> 01:38:09.060]  Ну, я не знаю.
[01:38:09.060 --> 01:38:11.060]  Судя по количеству пар, которые у нас умещаются,
[01:38:11.060 --> 01:38:13.060]  я думаю, в ближайшие две недели будут.
[01:38:15.060 --> 01:38:17.060]  Ну да.
[01:38:17.060 --> 01:38:19.060]  Нет, самое смешное, что венгекский алгоритм
[01:38:19.060 --> 01:38:21.060]  как дерево отрезков.
[01:38:21.060 --> 01:38:23.060]  Идей на нет необходимости, потому что классический
[01:38:23.060 --> 01:38:25.060]  минкост работает за ту же асимптутику.
[01:38:25.060 --> 01:38:27.060]  Классический минкост, в смысле?
[01:38:27.060 --> 01:38:29.060]  Ну, прям он.
[01:38:29.060 --> 01:38:31.060]  Ну, можно реализовать
[01:38:31.060 --> 01:38:33.060]  минкост пакс флоу, вот этот вот жаггик
[01:38:33.060 --> 01:38:35.060]  с дэйкстр, с потенциалами, тоже за куб.
[01:38:35.060 --> 01:38:37.060]  В этой задачи.
[01:38:37.060 --> 01:38:39.060]  И это мы тоже увидим.
[01:38:39.060 --> 01:38:41.060]  Не волнуйтесь.
[01:38:41.060 --> 01:38:43.060]  Ну, венгек... Нет, венгекка понятно.
[01:38:43.060 --> 01:38:45.060]  С этим, с...
[01:38:45.060 --> 01:38:47.060]  с пфа и...
[01:38:47.060 --> 01:38:49.060]  с...
[01:38:49.060 --> 01:38:51.060]  с...
[01:38:51.060 --> 01:38:53.060]  Ну, там же типа как это...
[01:38:53.060 --> 01:38:55.060]  Чего?
[01:38:55.060 --> 01:38:57.060]  Ну, там по сути Форд Фалкерсон
[01:38:57.060 --> 01:38:59.060]  просто играется и...
[01:38:59.060 --> 01:39:01.060]  Ну, понятно. Окей. Так вот, ребят,
[01:39:01.060 --> 01:39:03.060]  ребят, ребят, давайте вылезаем.
[01:39:03.060 --> 01:39:05.060]  Мы засидели с перерывом, времени мало.
[01:39:05.060 --> 01:39:07.060]  Времени надо, а задачи рассказать много надо, так что.
[01:39:07.060 --> 01:39:09.060]  Давайте, смотрите, сейчас будет...
[01:39:09.060 --> 01:39:11.060]  Значит, пара сочетаний.
[01:39:11.060 --> 01:39:13.060]  Ну, здесь у нас
[01:39:13.060 --> 01:39:15.060]  что требуется?
[01:39:15.060 --> 01:39:17.060]  Ну, требуется обычно найти какое-нибудь ребро.
[01:39:17.060 --> 01:39:19.060]  То есть, требуется найти...
[01:39:19.060 --> 01:39:21.060]  Что называется набор ребер?
[01:39:21.060 --> 01:39:23.060]  Такие, что ни у каких двух из них нет общего конца.
[01:39:23.060 --> 01:39:25.060]  Не инцидент.
[01:39:25.060 --> 01:39:27.060]  Да, никакие два не инцидента.
[01:39:27.060 --> 01:39:29.060]  Там какое-нибудь одно и то же.
[01:39:29.060 --> 01:39:31.060]  И хочется найти, чтобы про сочетание было
[01:39:31.060 --> 01:39:33.060]  как можно больше.
[01:39:33.060 --> 01:39:35.060]  Количество ребов.
[01:39:35.060 --> 01:39:37.060]  Да, причина...
[01:39:37.060 --> 01:39:39.060]  Что это за количество ребов?
[01:39:39.060 --> 01:39:41.060]  Как найти... Причем тут казалось бы поток?
[01:39:43.060 --> 01:39:45.060]  Да, все очень просто.
[01:39:45.060 --> 01:39:47.060]  Да, идея очень простая.
[01:39:47.060 --> 01:39:49.060]  Во-первых, ориентируем
[01:39:49.060 --> 01:39:51.060]  в серебра.
[01:39:53.060 --> 01:39:55.060]  И делаем единичку.
[01:39:55.060 --> 01:39:57.060]  Мы предполагаем, что у нас
[01:39:57.060 --> 01:39:59.060]  просто будет задан граф, нам это гарантирует,
[01:39:59.060 --> 01:40:01.060]  что он двудолен.
[01:40:01.060 --> 01:40:03.060]  Нет, именно задан двудольный граф.
[01:40:03.060 --> 01:40:05.060]  Прям двудольный.
[01:40:05.060 --> 01:40:07.060]  Да, прям двудольный, борько он нам даже две доли задан.
[01:40:07.060 --> 01:40:09.060]  Они заданы автоматом.
[01:40:09.060 --> 01:40:11.060]  Тебе не говорят кто из них тонного?
[01:40:11.060 --> 01:40:13.060]  Не-не-не, обычно говорят.
[01:40:13.060 --> 01:40:15.060]  Кстати, даже.
[01:40:15.060 --> 01:40:17.060]  Можете нам запустить DFS и...
[01:40:17.060 --> 01:40:19.060]  Из левой всегда это только вправо-влево.
[01:40:19.060 --> 01:40:21.060]  Ну да.
[01:40:21.060 --> 01:40:23.060]  Да, вот мы делаем так, что из левой вправо.
[01:40:23.060 --> 01:40:25.060]  Это мы ориентируем, обратите внимание.
[01:40:25.060 --> 01:40:27.060]  В нам дан граф, мы строим сеть.
[01:40:27.060 --> 01:40:29.060]  Это еще не вся сеть.
[01:40:29.060 --> 01:40:31.060]  Мы сказали, что у нас в серебра
[01:40:31.060 --> 01:40:33.060]  пропускной способности один,
[01:40:33.060 --> 01:40:35.060]  ориентированный слева направо.
[01:40:35.060 --> 01:40:37.060]  Еще у нас слева есть
[01:40:37.060 --> 01:40:39.060]  и сток.
[01:40:39.060 --> 01:40:41.060]  Да, мы создаем новую вершину.
[01:40:41.060 --> 01:40:43.060]  И делаем вот такую штуку.
[01:40:45.060 --> 01:40:47.060]  Да, но это классика.
[01:40:47.060 --> 01:40:49.060]  И тоже один.
[01:40:51.060 --> 01:40:53.060]  И, конечно,
[01:40:53.060 --> 01:40:55.060]  сток.
[01:40:57.060 --> 01:40:59.060]  Вот так вот.
[01:40:59.060 --> 01:41:01.060]  Вот так вот.
[01:41:05.060 --> 01:41:07.060]  Один, один, один, один.
[01:41:07.060 --> 01:41:09.060]  Один.
[01:41:11.060 --> 01:41:13.060]  Видите, да? Да.
[01:41:13.060 --> 01:41:15.060]  И тогда, смотрите.
[01:41:16.060 --> 01:41:18.060]  Ну и, как вы уже догадались,
[01:41:18.060 --> 01:41:20.060]  В таких случаях USS trailer стоит проговаривать,
[01:41:20.060 --> 01:41:22.060]  как по потоку восстанавливать parachutania?
[01:41:22.060 --> 01:41:24.060]  Но, при этом, здесь просто видно,
[01:41:24.060 --> 01:41:27.060]  что любому потоку соответствует parachutania,
[01:41:27.060 --> 01:41:29.060]  любому parachutania соответствует поток.
[01:41:31.060 --> 01:41:33.060]  Почему любому потоку соответствует parachutania,
[01:41:33.060 --> 01:41:35.060]  здесь очень важно обратить внимание,
[01:41:35.060 --> 01:41:37.060]  что единички...
[01:41:39.060 --> 01:41:41.060]  Что здесь единички.
[01:41:41.060 --> 01:41:44.460]  Это для того, чтобы в каждую вершину входило не более
[01:41:44.460 --> 01:41:45.620]  чем одна единица потока.
[01:41:45.620 --> 01:41:50.700]  И на выход тоже.
[01:41:50.700 --> 01:41:53.900]  Таким образом, у нас только одно ребро может быть задействовано
[01:41:53.900 --> 01:41:55.700]  когда мы занимаемся вершинкой.
[01:41:55.700 --> 01:41:56.700]  Ну да.
[01:41:56.700 --> 01:41:57.700]  Да, именно.
[01:41:57.700 --> 01:41:59.820]  То есть, видите, не может отсюда выйти две единицы
[01:41:59.820 --> 01:42:00.820]  потока.
[01:42:00.820 --> 01:42:02.660]  Ну, то есть, конечно, формально скажешь, что тут, а вдруг
[01:42:02.660 --> 01:42:08.100]  тут какой-нибудь тут 0.57, тут 0.43, но мы будем искать
[01:42:08.100 --> 01:42:10.300]  поток в ссылочисленном виде, у нас все алгоритмы
[01:42:10.300 --> 01:42:11.300]  будут это делать.
[01:42:11.300 --> 01:42:15.660]  Но алгоритмы почти всегда устроены так, что если сеть
[01:42:15.660 --> 01:42:17.860]  ссылочисленная, то они искать будут поток в ссылочисленном
[01:42:17.860 --> 01:42:18.860]  виде.
[01:42:18.860 --> 01:42:23.220]  Так что теоретически могло быть тут 0.57, 0.43, но этого
[01:42:23.220 --> 01:42:24.220]  не будет.
[01:42:24.220 --> 01:42:30.980]  Так вот, с просочетанием, так что просочетание легко
[01:42:30.980 --> 01:42:31.980]  найти.
[01:42:31.980 --> 01:42:35.380]  Но, правда, бывает, иногда, на самом деле, можно очень
[01:42:35.380 --> 01:42:36.380]  хорошо пооптимизировать.
[01:42:37.380 --> 01:42:40.660]  Потому что есть, так сказать, еще классическая задачка.
[01:42:40.660 --> 01:42:43.180]  Называется кубики.
[01:42:43.180 --> 01:42:49.460]  Ну, знакомая, наверное, задача, потому что, ну вот, ситуация
[01:42:49.460 --> 01:42:50.460]  такая.
[01:42:50.460 --> 01:42:53.660]  Там мальчик какой-нибудь, ладно, пусть сегодня Вася.
[01:42:53.660 --> 01:42:54.660]  Вот.
[01:42:54.660 --> 01:42:58.340]  Он хочет собрать, вот ему дали какое-то мистическое
[01:42:58.340 --> 01:43:00.660]  слово, я не знаю там.
[01:43:00.660 --> 01:43:04.100]  Ну, как всегда, бацаба какая-нибудь.
[01:43:04.100 --> 01:43:06.300]  Да, это уже следующая задача, да.
[01:43:06.940 --> 01:43:08.940]  У нас вроде с кубиков.
[01:43:08.940 --> 01:43:09.940]  Ну, вот.
[01:43:09.940 --> 01:43:10.940]  Аба, цаба, а...
[01:43:10.940 --> 01:43:11.940]  Абра какая-нибудь.
[01:43:11.940 --> 01:43:12.940]  Ну, неважно.
[01:43:12.940 --> 01:43:13.940]  Ну, чтоб поменьше было.
[01:43:13.940 --> 01:43:14.940]  Сейчас увидите почему.
[01:43:14.940 --> 01:43:15.940]  Вот.
[01:43:15.940 --> 01:43:16.940]  Ну, хотя неважно там.
[01:43:16.940 --> 01:43:17.940]  Ну, вот.
[01:43:17.940 --> 01:43:18.940]  Так вот, смотрите.
[01:43:18.940 --> 01:43:19.940]  И у него есть кубики.
[01:43:19.940 --> 01:43:31.940]  То есть кубик, это понятно, это что такое, это ровносторонние
[01:43:31.940 --> 01:43:34.940]  прямоугольные параллельки, верно.
[01:43:34.940 --> 01:43:35.940]  Да.
[01:43:36.580 --> 01:43:37.580]  Ну, да.
[01:43:37.580 --> 01:43:38.580]  Вот.
[01:43:38.580 --> 01:43:39.580]  Значит.
[01:43:39.580 --> 01:43:41.580]  Ну, тут, конечно, на каждой стороне буквы, иногда они
[01:43:41.580 --> 01:43:42.580]  не совпадают.
[01:43:42.580 --> 01:43:46.580]  А иногда совпадают гады такие, ну, неважно.
[01:43:46.580 --> 01:43:47.580]  Вот.
[01:43:47.580 --> 01:43:48.580]  А, б.
[01:43:48.580 --> 01:43:49.580]  Значит, вот это вот.
[01:43:49.580 --> 01:43:51.580]  Тут вообще такой бебешный кубик.
[01:43:51.580 --> 01:43:52.580]  Вот.
[01:43:52.580 --> 01:43:54.580]  Ну, и так далее.
[01:43:54.580 --> 01:43:58.300]  Иногда там вместо кубиков могут быть карточки там
[01:43:58.300 --> 01:44:03.300]  или что-нибудь еще в этом роде.
[01:44:03.300 --> 01:44:04.300]  Далее.
[01:44:04.300 --> 01:44:05.300]  Что еще?
[01:44:05.660 --> 01:44:08.660]  Что-то еще.
[01:44:08.660 --> 01:44:15.660]  На кубиках, если на жарную луку могут быть, да.
[01:44:15.660 --> 01:44:16.660]  А могут, ну, это очень.
[01:44:16.660 --> 01:44:17.660]  Ну, вот.
[01:44:17.660 --> 01:44:18.660]  Ну, вот.
[01:44:18.660 --> 01:44:20.660]  И вот хочется, ну, кубиков много, естественно, даже
[01:44:20.660 --> 01:44:21.660]  больше, чем это.
[01:44:21.660 --> 01:44:24.540]  И очень хочется, для каждого кубика, ну, вот, хочется
[01:44:24.540 --> 01:44:27.020]  поставить кубики так, чтобы они образовали вот заданное
[01:44:27.020 --> 01:44:28.020]  слово.
[01:44:28.020 --> 01:44:29.420]  Ну, естественно, каждый кубик может показывать
[01:44:29.420 --> 01:44:30.420]  только одну.
[01:44:30.420 --> 01:44:34.420]  Ну, как это сделать?
[01:44:34.540 --> 01:44:37.540]  Ну, самый тупой вариант это свести даже не к потоку,
[01:44:37.540 --> 01:44:40.540]  а просто к просочетанию, просто соединить каждую
[01:44:40.540 --> 01:44:44.540]  букву с позиции, значит, на какую он может встать.
[01:44:44.540 --> 01:44:47.540]  То есть, скажем, если тут вот есть буква АБР, то вот
[01:44:47.540 --> 01:44:50.540]  честно так вот все соединяем, да.
[01:44:50.540 --> 01:44:51.540]  Вот.
[01:44:51.540 --> 01:44:54.540]  Видите, да?
[01:44:57.540 --> 01:44:58.540]  Вот.
[01:44:58.540 --> 01:45:01.540]  Если тут только буква Б, ну, значит, соединяем только
[01:45:01.540 --> 01:45:02.540]  вот так.
[01:45:02.540 --> 01:45:03.540]  Видите?
[01:45:03.660 --> 01:45:06.660]  Если буква С, то вот давайте вот так.
[01:45:06.660 --> 01:45:09.660]  Ну, в общем, вот по такому принципу.
[01:45:09.660 --> 01:45:13.420]  В принципе, так можно делать, пока кубик и длина слова
[01:45:13.420 --> 01:45:14.420]  не превосходят 50.
[01:45:14.420 --> 01:45:21.420]  Да, но бывает побольше, где-то даже оба раза по тысячу.
[01:45:24.420 --> 01:45:27.420]  Что делать?
[01:45:28.300 --> 01:45:31.300]  Ну, да.
[01:45:31.300 --> 01:45:34.300]  Ну, диница по-любому придется писать в какой-то момент.
[01:45:34.300 --> 01:45:38.300]  Но, тем не менее, на самом деле, заметим, что конкретно,
[01:45:38.300 --> 01:45:41.300]  когда вы решаете потоком, это все можно, на самом
[01:45:41.300 --> 01:45:42.300]  деле, там сеть можно уменьшить.
[01:45:42.300 --> 01:45:47.300]  Ведь, смотрите, ведь у нас же тут в итоге сеть там
[01:45:47.300 --> 01:45:50.300]  будет вот эта вот 1, 1, 1, правда?
[01:45:50.300 --> 01:45:53.300]  Вот это все 1, 1, 1, 1, да?
[01:45:53.300 --> 01:45:56.300]  Но, с другой стороны, заметим, если кубике написана буква
[01:45:56.300 --> 01:45:59.300]  С, то нам, в общем-то, по барабану, собственно, куда
[01:45:59.300 --> 01:46:00.300]  он конкретно встанет.
[01:46:00.300 --> 01:46:04.300]  Поэтому вместо этого, на самом деле, имеет смысл
[01:46:04.300 --> 01:46:06.300]  сделать примерно следующее.
[01:46:06.300 --> 01:46:09.300]  То есть составить только буквы, которые есть A, B, C, R.
[01:46:09.300 --> 01:46:12.300]  И здесь сделать пропускную способность на этот раз
[01:46:12.300 --> 01:46:15.300]  не 1, а вот сколько букв A, B, C и так далее.
[01:46:15.300 --> 01:46:17.300]  То есть 1, 2, 3, 4, 5, 6, 7.
[01:46:17.300 --> 01:46:20.300]  Там B, соответственно, 1, 2, 3.
[01:46:20.300 --> 01:46:22.300]  Там C, соответственно, 1.
[01:46:22.300 --> 01:46:24.300]  R, соответственно, 1.
[01:46:24.300 --> 01:46:27.300]  То же самое, только вот здесь 7 символизирует, что
[01:46:27.300 --> 01:46:30.300]  как бы 7 кубиков могут стать буквой A.
[01:46:30.300 --> 01:46:33.300]  Вот, понимаете, да?
[01:46:33.300 --> 01:46:35.300]  Вот, понимаете?
[01:46:35.300 --> 01:46:38.300]  Ну вот, пока действительно все просто.
[01:46:38.300 --> 01:46:42.300]  То есть вот такие сокращения тут на этот раз вполне могут быть.
[01:46:42.300 --> 01:46:45.300]  А, фига, ну то есть все слово сжали, да?
[01:46:45.300 --> 01:46:46.300]  Да.
[01:46:46.300 --> 01:46:48.300]  Ну да.
[01:46:48.300 --> 01:46:51.300]  Но в данном случае, опять же, на этот раз единицы потока,
[01:46:51.300 --> 01:46:53.300]  если их декомпозировать, то есть они будут тут
[01:46:53.300 --> 01:46:55.300]  с этим ребром совпадать, но это уже ничего страшного.
[01:46:55.300 --> 01:46:58.300]  Но все равно, каждая единица потока, отдельная единица,
[01:46:58.300 --> 01:47:01.300]  символизирует, что конкретный кубик там взял, там поставился
[01:47:01.300 --> 01:47:04.300]  на какую-то заданную букву.
[01:47:04.300 --> 01:47:06.300]  А у кубиков все равно рыбы и соединечки.
[01:47:06.300 --> 01:47:07.300]  Ну да.
[01:47:07.300 --> 01:47:09.300]  То есть, кстати, если карточки, то на самом деле тут тоже
[01:47:09.300 --> 01:47:13.300]  можно сжимать, потому что заметим, что карточек вообще всего 676.
[01:47:13.300 --> 01:47:18.300]  Ну, представь себе, что это не кубики, а карточки.
[01:47:18.300 --> 01:47:20.300]  Там типа две буковки.
[01:47:20.300 --> 01:47:21.300]  Ну вот.
[01:47:21.300 --> 01:47:25.300]  Если у кубиков их всего 676, тогда сжатие можно сделать здесь.
[01:47:25.300 --> 01:47:28.300]  Тогда эту задачу решают, даже когда там карточек 100 тысяч,
[01:47:28.300 --> 01:47:30.300]  и слово 100 тысяч.
[01:47:32.300 --> 01:47:35.300]  У карточек две буковки.
[01:47:35.300 --> 01:47:36.300]  Ага.
[01:47:36.300 --> 01:47:38.300]  Да.
[01:47:38.300 --> 01:47:40.300]  И нам все еще нужно слово составить.
[01:47:40.300 --> 01:47:41.300]  Да.
[01:47:41.300 --> 01:47:43.300]  Но оба раза 100 тысяч.
[01:47:43.300 --> 01:47:45.300]  И мы сжимаем уже карточки.
[01:47:45.300 --> 01:47:46.300]  Да.
[01:47:46.300 --> 01:47:47.300]  Может их...
[01:47:47.300 --> 01:47:48.300]  676.
[01:47:48.300 --> 01:47:49.300]  Пополам даже.
[01:47:49.300 --> 01:47:50.300]  Что это за числа?
[01:47:50.300 --> 01:47:52.300]  26 продрать.
[01:47:52.300 --> 01:47:54.300]  А, хорошо.
[01:47:56.300 --> 01:47:57.300]  Вот.
[01:47:57.300 --> 01:47:59.300]  Как сейчас мы карточки сжимаем?
[01:47:59.300 --> 01:48:03.300]  Ну просто заметим, что различных типов пар буков у нас всего 676.
[01:48:03.300 --> 01:48:04.300]  А, понял.
[01:48:04.300 --> 01:48:05.300]  Все.
[01:48:05.300 --> 01:48:06.300]  А на самом деле пополам можно.
[01:48:06.300 --> 01:48:09.300]  Потому что карточка AB и карточка BA это одно и то же.
[01:48:09.300 --> 01:48:11.300]  Так что там...
[01:48:13.300 --> 01:48:19.300]  Так что там на самом деле будет что-то типа 338 плюс 13, да.
[01:48:20.300 --> 01:48:22.300]  351.
[01:48:28.300 --> 01:48:29.300]  Сжимаем.
[01:48:29.300 --> 01:48:31.300]  Вот.
[01:48:31.300 --> 01:48:37.300]  Но, конечно, говоря об этом, на самом деле нельзя не поговорить еще.
[01:48:37.300 --> 01:48:38.300]  На самом деле замечаем...
[01:48:38.300 --> 01:48:44.300]  Можно заметить, что на самом деле теория потоков на самом деле позволяет на самом деле доказывать
[01:48:44.300 --> 01:48:48.300]  даже результаты, казалось бы, экологически чистой математики.
[01:48:49.300 --> 01:48:53.300]  Как-то сегодня все очень интересно.
[01:48:54.300 --> 01:48:55.300]  Ну вот.
[01:48:55.300 --> 01:48:57.300]  А вот смотрите.
[01:48:57.300 --> 01:48:59.300]  Потому что вот теперь сейчас будет задача...
[01:48:59.300 --> 01:49:00.300]  Да.
[01:49:00.300 --> 01:49:02.300]  Сейчас будет задача по математике.
[01:49:03.300 --> 01:49:07.300]  Вот сейчас поговорим про такую замечательную вещь, как Лемма Холла.
[01:49:07.300 --> 01:49:08.300]  Она же...
[01:49:08.300 --> 01:49:10.300]  Она же теория Махолла.
[01:49:10.300 --> 01:49:12.300]  А это не о свадьбах?
[01:49:12.300 --> 01:49:13.300]  А, ну...
[01:49:13.300 --> 01:49:15.300]  О свадьбах, о свадьбах.
[01:49:15.300 --> 01:49:17.300]  Нет, нет, о свадьбах.
[01:49:18.300 --> 01:49:20.300]  Ну, тут обычно...
[01:49:20.300 --> 01:49:22.300]  Ну, можно и о свадьбах, конечно.
[01:49:22.300 --> 01:49:24.300]  Нет, о свадьбах обычно там это...
[01:49:25.300 --> 01:49:27.300]  Там есть такой этот эпический механизм, да.
[01:49:27.300 --> 01:49:28.300]  Но это...
[01:49:28.300 --> 01:49:29.300]  Да.
[01:49:29.300 --> 01:49:31.300]  Будет время тоже расскажу.
[01:49:31.300 --> 01:49:32.300]  Это очень смешно.
[01:49:32.300 --> 01:49:33.300]  Вот.
[01:49:33.300 --> 01:49:34.300]  Но в данном случае нет.
[01:49:34.300 --> 01:49:35.300]  Содача звучит так.
[01:49:36.300 --> 01:49:39.300]  У нас есть N мальчиков и M девочек.
[01:49:40.300 --> 01:49:41.300]  Вот.
[01:49:42.300 --> 01:49:43.300]  Вот.
[01:49:43.300 --> 01:49:46.300]  Каждый мальчик хочет подружиться с девочкой.
[01:49:47.300 --> 01:49:48.300]  Вот.
[01:49:50.300 --> 01:49:53.300]  Ну, маленькая проблема, что одна девочка подружиться
[01:49:53.300 --> 01:49:55.300]  может только с одним мальчиком почему-то.
[01:49:55.300 --> 01:49:58.300]  Там, по-моему, обычно день рождения, там что-то балл, там...
[01:49:58.300 --> 01:49:59.300]  Или так.
[01:49:59.300 --> 01:50:00.300]  Ну, разные.
[01:50:00.300 --> 01:50:01.300]  Какая разница?
[01:50:01.300 --> 01:50:02.300]  Ну, разная.
[01:50:02.300 --> 01:50:03.300]  Это классическое.
[01:50:03.300 --> 01:50:04.300]  Ну да.
[01:50:04.300 --> 01:50:05.300]  Ну, мы вообще можем перевести это на язык рэдер.
[01:50:05.300 --> 01:50:07.300]  Сколько можно перевести в способ?
[01:50:07.300 --> 01:50:08.300]  Нет.
[01:50:08.300 --> 01:50:09.300]  Нет вопрос.
[01:50:09.300 --> 01:50:11.300]  А можно ли сделать так, чтобы там...
[01:50:11.300 --> 01:50:14.300]  Можно ли каждому мальчику подружить...
[01:50:14.300 --> 01:50:16.300]  Ну, конечно, есть у каждого мальчика, но здесь простая
[01:50:16.300 --> 01:50:17.300]  бинарная модель.
[01:50:17.300 --> 01:50:18.300]  Ему как бы девочка...
[01:50:18.300 --> 01:50:19.300]  Либо нравится, либо нет.
[01:50:19.300 --> 01:50:20.300]  Все.
[01:50:20.300 --> 01:50:22.300]  То есть там без каких-то там...
[01:50:22.300 --> 01:50:23.300]  Ну вот примеси.
[01:50:23.300 --> 01:50:24.300]  Внимание, вопрос.
[01:50:25.300 --> 01:50:27.300]  Можно ли там действительно...
[01:50:28.300 --> 01:50:30.300]  Мог ли они договориться, что каждый мальчик подружится
[01:50:30.300 --> 01:50:31.300]  со своей...
[01:50:31.300 --> 01:50:32.300]  Сокрытой своей девочкой.
[01:50:33.300 --> 01:50:34.300]  Вот.
[01:50:35.300 --> 01:50:37.300]  У нас N мальчиков и M, да?
[01:50:37.300 --> 01:50:38.300]  Ну, например.
[01:50:38.300 --> 01:50:41.300]  Ну, иногда рассматривают N мальчиков и N девочек,
[01:50:41.300 --> 01:50:42.300]  чтобы было совсем хорошо.
[01:50:43.300 --> 01:50:45.300]  Да, тогда это как бы просочетание, покрывающее все вершины,
[01:50:45.300 --> 01:50:46.300]  называется совершенным.
[01:50:50.300 --> 01:50:52.300]  Ну, в нашем случае даже просочетание будет
[01:50:52.300 --> 01:50:55.300]  просоченным, если просто в нем участвуют все мальчики.
[01:50:56.300 --> 01:50:57.300]  Вот.
[01:50:59.300 --> 01:51:02.300]  Ну, там это на 10 девчонок, там по статистике вот это все.
[01:51:02.300 --> 01:51:03.300]  Вот.
[01:51:05.300 --> 01:51:06.300]  Не надо.
[01:51:07.300 --> 01:51:08.300]  Что не надо?
[01:51:08.300 --> 01:51:09.300]  Ой.
[01:51:09.300 --> 01:51:10.300]  Не надо?
[01:51:10.300 --> 01:51:11.300]  Ну, не знаю.
[01:51:11.300 --> 01:51:12.300]  Как-то надо.
[01:51:12.300 --> 01:51:13.300]  Я понимаю, это физическая ситуация, конечно, мягко
[01:51:13.300 --> 01:51:14.300]  говоря, обратно.
[01:51:15.300 --> 01:51:17.300]  Ну да, чисто вот возьмем эту аудиторию.
[01:51:17.300 --> 01:51:18.300]  Тут у нас тут...
[01:51:20.300 --> 01:51:21.300]  Да, куда в Аню дели?
[01:51:26.300 --> 01:51:27.300]  Вот.
[01:51:27.300 --> 01:51:28.300]  Кошмар.
[01:51:28.300 --> 01:51:29.300]  Кошмар.
[01:51:29.300 --> 01:51:31.300]  Почему у вас Аня болеет?
[01:51:32.300 --> 01:51:33.300]  Безобразие.
[01:51:34.300 --> 01:51:35.300]  Вот.
[01:51:36.300 --> 01:51:37.300]  Дайте смотреть.
[01:51:37.300 --> 01:51:38.300]  Итак.
[01:51:38.300 --> 01:51:40.300]  Ну, вот возникает такая ситуация.
[01:51:40.300 --> 01:51:41.300]  Ну, давайте, ладно.
[01:51:42.300 --> 01:51:43.300]  Так, ладно.
[01:51:43.300 --> 01:51:44.300]  Давайте расслушаем.
[01:51:44.300 --> 01:51:45.300]  Мальчики у нас будут зеленые.
[01:51:47.300 --> 01:51:48.300]  Девочки красные.
[01:51:50.300 --> 01:51:51.300]  Вот.
[01:51:51.300 --> 01:51:52.300]  Теперь смотрите.
[01:51:53.300 --> 01:51:56.300]  Значит, теперь математическое утверждение звучит так,
[01:51:56.300 --> 01:51:57.300]  смотрите.
[01:51:57.300 --> 01:52:02.300]  Вот раз у нас есть мальчики, назовем их L, а девочек назовем
[01:52:02.300 --> 01:52:03.300]  R.
[01:52:04.300 --> 01:52:06.300]  Ну, мальчики налево, девочки...
[01:52:06.300 --> 01:52:07.300]  Понятно.
[01:52:07.300 --> 01:52:08.300]  Вот.
[01:52:08.300 --> 01:52:11.300]  И, соответственно, и теперь, значит, ну, соответственно,
[01:52:11.300 --> 01:52:13.300]  посоединяем, кто там с кем может там это подружиться
[01:52:13.300 --> 01:52:14.300]  и так далее.
[01:52:15.300 --> 01:52:18.300]  У нас есть антисемплярность.
[01:52:19.300 --> 01:52:22.300]  То есть, если она человек девочек, то девочка разума.
[01:52:22.300 --> 01:52:23.300]  Ну, да.
[01:52:24.300 --> 01:52:25.300]  Все-таки считаем, что да.
[01:52:25.300 --> 01:52:26.300]  Ну, и считаем, что да, да.
[01:52:26.300 --> 01:52:27.300]  Тут как-то вот.
[01:52:27.300 --> 01:52:28.300]  Ну, как всегда.
[01:52:28.300 --> 01:52:30.300]  То есть, может состояться пара или нет.
[01:52:30.300 --> 01:52:31.300]  Вот так.
[01:52:32.300 --> 01:52:33.300]  Значит, далее.
[01:52:33.300 --> 01:52:34.300]  Значит, смотрите.
[01:52:35.300 --> 01:52:36.300]  Так, значит, смотрите.
[01:52:36.300 --> 01:52:37.300]  Ребят, ребят, ребят.
[01:52:37.300 --> 01:52:38.300]  Значит, смотрите.
[01:52:39.300 --> 01:52:42.300]  Теперь заметим, что у каждого подмножества мальчиков...
[01:52:42.300 --> 01:52:44.300]  Вот, допустим, вот у нас есть подмножество мальчиков.
[01:52:45.300 --> 01:52:47.300]  Есть такое...
[01:52:48.300 --> 01:52:50.300]  Можно определить нота.
[01:52:50.300 --> 01:52:52.300]  То есть, количество девочек, которые нравятся хотя бы
[01:52:52.300 --> 01:52:53.300]  кому-нибудь из них.
[01:52:56.300 --> 01:52:57.300]  Ну, это же не отображение.
[01:52:57.300 --> 01:52:59.300]  Так что так себе, с образом.
[01:53:00.300 --> 01:53:01.300]  Что решаем?
[01:53:01.300 --> 01:53:02.300]  Лему-колло?
[01:53:02.300 --> 01:53:03.300]  Доказываем.
[01:53:03.300 --> 01:53:05.300]  Ну, сейчас мы ее формулируем для начала.
[01:53:05.300 --> 01:53:06.300]  И это тоже.
[01:53:06.300 --> 01:53:07.300]  А, мы пока еще формулируем.
[01:53:08.300 --> 01:53:09.300]  Это не соответствует.
[01:53:10.300 --> 01:53:11.300]  Это не соответствует.
[01:53:12.300 --> 01:53:13.300]  А, подмножество.
[01:53:14.300 --> 01:53:15.300]  Это не соответствует.
[01:53:16.300 --> 01:53:17.300]  Это не соответствует.
[01:53:18.300 --> 01:53:19.300]  Так, ну, вот ребра.
[01:53:19.300 --> 01:53:21.300]  Это вот просто ребра, как ребра.
[01:53:21.300 --> 01:53:28.300]  И для каждого подмножества можно найти множество девочек, которые нравятся хотя бы кому-нибудь из них.
[01:53:29.300 --> 01:53:30.300]  Именно из них.
[01:53:30.300 --> 01:53:31.300]  Видите, да?
[01:53:33.300 --> 01:53:34.300]  Это определение.
[01:53:35.300 --> 01:53:40.300]  Ну, а теперь вообще заметим, что если существует множество мальчиков, которым нравится меньше девочек,
[01:53:40.300 --> 01:53:43.300]  чем самих этих мальчиков, то у нас будут проблемы.
[01:53:44.300 --> 01:53:48.300]  Ну, если к ним-то пяти мальчикам нравится всего четыре девочки, то в совокупности.
[01:53:49.300 --> 01:53:52.300]  То, кто-то точно останется без девочки.
[01:53:53.300 --> 01:53:54.300]  Вот.
[01:53:56.300 --> 01:53:59.300]  То есть, поэтому, да, если мы хотим, чтобы совершенно...
[01:53:59.300 --> 01:54:04.300]  Чтобы было совершенное просочетание, по крайней мере, с точки зрения мальчиков,
[01:54:04.300 --> 01:54:10.300]  то нужно, чтобы у каждого подмножества размер вот n от a был не меньше, чем размер a, правда?
[01:54:11.300 --> 01:54:13.300]  Но это было бы тривиальное утверждение.
[01:54:13.300 --> 01:54:19.300]  Так вот, Леммахолло утверждает, что это условие не только необходимое, но и достаточно.
[01:54:22.300 --> 01:54:24.300]  Скажем так, значит, формулируем.
[01:54:25.300 --> 01:54:27.300]  Леммахолло.
[01:54:28.300 --> 01:54:29.300]  Она же теория Махолло.
[01:54:31.300 --> 01:54:34.300]  То есть, существует просочетание размера a...
[01:54:42.300 --> 01:54:44.300]  ...размера a...
[01:54:45.300 --> 01:54:46.300]  ...тогда...
[01:54:46.300 --> 01:54:47.300]  Ну, модулили, конечно.
[01:54:48.300 --> 01:54:56.300]  Тогда и только тогда, когда для любого a подмножества l верно, что модуль n от a...
[01:54:57.300 --> 01:55:00.300]  ...больше либо равен модуля a.
[01:55:05.300 --> 01:55:06.300]  Вот такая Лемма.
[01:55:18.300 --> 01:55:19.300]  Да.
[01:55:24.300 --> 01:55:25.300]  Ну да.
[01:55:26.300 --> 01:55:28.300]  То в n от a лежат все напарники множества a.
[01:55:31.300 --> 01:55:32.300]  Хотя бы.
[01:55:34.300 --> 01:55:36.300]  Так что, необходимость в эту сторону очевидна.
[01:55:39.300 --> 01:55:40.300]  То есть, так и напишем.
[01:55:40.300 --> 01:55:41.300]  Пум, очевидно.
[01:55:42.300 --> 01:55:43.300]  А вот в эту сторону...
[01:55:47.300 --> 01:55:48.300]  ...при чем тут потоки, да?
[01:55:51.300 --> 01:55:52.300]  А потоки вот причем.
[01:55:53.300 --> 01:55:54.300]  Смотрите.
[01:55:54.300 --> 01:55:55.300]  Ведь существует...
[01:55:55.300 --> 01:56:00.300]  Вот мы должны показать, что пусть это верно, тогда существует просочетание размера l, правда?
[01:56:01.300 --> 01:56:07.300]  Но тогда это то же самое, что сказать, что вот в этой сети существует поток размера l, правда?
[01:56:07.300 --> 01:56:08.300]  Что такое размер потока?
[01:56:08.300 --> 01:56:09.300]  Ну, величина поток.
[01:56:12.300 --> 01:56:14.300]  Вот, что существует поток вот величины l?
[01:56:18.300 --> 01:56:20.300]  Ну, потому что поток просочетания это одно и то же.
[01:56:22.300 --> 01:56:23.300]  А l это что?
[01:56:24.300 --> 01:56:25.300]  Левая доля.
[01:56:25.300 --> 01:56:26.300]  А, левая доля.
[01:56:26.300 --> 01:56:27.300]  Все ясно.
[01:56:27.300 --> 01:56:28.300]  Это вершина левой доли.
[01:56:28.300 --> 01:56:29.300]  Да.
[01:56:29.300 --> 01:56:30.300]  Это l.
[01:56:30.300 --> 01:56:31.300]  Левая доля.
[01:56:31.300 --> 01:56:32.300]  Левая доля.
[01:56:32.300 --> 01:56:33.300]  Левая доля.
[01:56:33.300 --> 01:56:34.300]  Левая доля.
[01:56:34.300 --> 01:56:35.300]  Левая доля.
[01:56:35.300 --> 01:56:36.300]  Все ясно.
[01:56:36.300 --> 01:56:37.300]  Это вершина левой доли.
[01:56:37.300 --> 01:56:38.300]  Да.
[01:56:38.300 --> 01:56:39.300]  Это l, это l.
[01:56:44.300 --> 01:56:47.300]  И справа следует, что существует поток величины l?
[01:56:48.300 --> 01:56:49.300]  Мы хотим показать это.
[01:56:50.300 --> 01:56:51.300]  Хорошо.
[01:56:51.300 --> 01:56:53.300]  Потому что из этого будет следовать, что существует просочетание.
[01:56:53.300 --> 01:56:54.300]  Ну, кажется, да.
[01:56:54.300 --> 01:56:55.300]  Но!
[01:56:55.300 --> 01:56:57.300]  У нас есть теория мафорда Фолкерсона.
[01:56:59.300 --> 01:57:00.300]  Которая говорит нам что?
[01:57:01.300 --> 01:57:02.300]  Максимальный срез.
[01:57:03.300 --> 01:57:07.300]  Которая говорит, что максимальный поток равен минимальному разрезу.
[01:57:09.300 --> 01:57:17.300]  Значит нам надо показать, что минимальный, даже нам достаточно показать, что минимальный разрез в этой сети не меньше, чем l.
[01:57:20.300 --> 01:57:21.300]  Ну ладно.
[01:57:22.300 --> 01:57:23.300]  Ну ладно.
[01:57:24.300 --> 01:57:28.300]  Правда, заметим, что величина l всегда найдется, вот такой разрез хотя бы, да?
[01:57:29.300 --> 01:57:31.300]  Вот он имеет ровно l, да?
[01:57:32.300 --> 01:57:33.300]  Но нам надо доказать, что он минимален.
[01:57:34.300 --> 01:57:44.300]  То есть в переводе говоря, надо просто показать, что любой разрез в этой сети имеет пропускную способность не меньше, чем l.
[01:57:45.300 --> 01:57:46.300]  И этого будет достаточно.
[01:57:49.300 --> 01:57:50.300]  Значит, поехали.
[01:57:51.300 --> 01:57:53.300]  Ну что ж, давайте проведем разрез.
[01:57:59.300 --> 01:58:00.300]  Вот так вот мы его проведем.
[01:58:05.300 --> 01:58:06.300]  И теперь смотрите.
[01:58:07.300 --> 01:58:12.300]  Давайте назовем, значит смотрите, давайте может быть, для красоты назовем это ls.
[01:58:13.300 --> 01:58:14.300]  Это lt.
[01:58:16.300 --> 01:58:19.300]  Ну и здесь соответственно rt и rs вот тут.
[01:58:21.300 --> 01:58:22.300]  rt.
[01:58:25.300 --> 01:58:26.300]  Вот.
[01:58:28.300 --> 01:58:30.300]  А теперь, значит, вот такой вот разрез.
[01:58:31.300 --> 01:58:32.300]  Это вот s, это t.
[01:58:33.300 --> 01:58:34.300]  Значит, поехали.
[01:58:35.300 --> 01:58:36.300]  Значит, пропускная способность.
[01:58:37.300 --> 01:58:38.300]  Значит, давайте теперь думать.
[01:58:39.300 --> 01:58:40.300]  Чему равна пропускная способность?
[01:58:42.300 --> 01:58:44.300]  C от st.
[01:58:45.300 --> 01:58:46.300]  Чего?
[01:58:48.300 --> 01:58:50.300]  lt, ls.
[01:58:50.300 --> 01:58:51.300]  ls.
[01:59:05.300 --> 01:59:07.300]  Сейчас, да, да, да, правильно, правильно.
[01:59:15.300 --> 01:59:17.300]  Ну, значит, смотрите, сейчас напишем.
[01:59:21.300 --> 01:59:23.300]  Пишем, ой, не туда.
[01:59:24.300 --> 01:59:26.300]  Значит, смотрите, сейчас все уби.
[01:59:27.300 --> 01:59:28.300]  Нет, смотрите.
[01:59:29.300 --> 01:59:30.300]  Пропускная способность этого разреза.
[01:59:31.300 --> 01:59:38.300]  То есть сумма, в нашем случае это тупо количество, ну как бы, тупо количество ребер, ведущих отсюда туда.
[01:59:39.300 --> 01:59:40.300]  Это просто определение.
[01:59:41.300 --> 01:59:43.300]  Ну у нас тут все ребра единичные, поэтому тупо суммируем количество ребер.
[01:59:44.300 --> 01:59:45.300]  Значит, поехали.
[01:59:46.300 --> 01:59:47.300]  Да, давайте вот сейчас пропишем аккуратненько.
[01:59:47.300 --> 01:59:49.300]  Во-первых, ребра у нас будет трех типов.
[01:59:50.300 --> 01:59:52.300]  Из s в l, из l в l и из r в t.
[01:59:53.300 --> 01:59:58.300]  Сколько ребер из s в l у нас пересекают этот разрез?
[01:59:59.300 --> 02:00:00.300]  lt, rs.
[02:00:01.300 --> 02:00:03.300]  Да, в точности lt, совершенно верно.
[02:00:04.300 --> 02:00:05.300]  Значит, второго типа тоже вот.
[02:00:06.300 --> 02:00:08.300]  Из r в t тут, очевидно, модуль rs.
[02:00:09.300 --> 02:00:12.300]  Плюс, ну давайте аккуратненько запишем.
[02:00:12.300 --> 02:00:13.300]  Значит, c.
[02:00:14.300 --> 02:00:15.300]  Ну давайте так запишем.
[02:00:16.300 --> 02:00:19.300]  c из ls в rt, вот так напишем.
[02:00:33.300 --> 02:00:35.300]  А как вы прям равенство замените?
[02:00:36.300 --> 02:00:37.300]  Это, по-моему, неправда.
[02:00:38.300 --> 02:00:39.300]  Почему?
[02:00:40.300 --> 02:00:41.300]  Потому что у нас есть вершины, которые меняются.
[02:00:42.300 --> 02:00:50.300]  Ну потому что в rs, ну как бы как минимум, потому что не все вершины, не во все вершины из rs ведут ребровый лес.
[02:00:51.300 --> 02:00:52.300]  Ну тогда больше и не ровно.
[02:00:53.300 --> 02:00:54.300]  Вот.
[02:00:55.300 --> 02:00:56.300]  Но теперь заметим, я теперь утверждаю следующее.
[02:00:57.300 --> 02:01:02.300]  Я утверждаю, что c от ls мы можем оценить снизу.
[02:01:04.300 --> 02:01:05.300]  Следующим образом.
[02:01:07.300 --> 02:01:08.300]  Смотрите.
[02:01:09.300 --> 02:01:15.300]  Ведь мы, смотрите, заметим, что из ls ведут ребра как минимум в модуль ls вершин, правда?
[02:01:16.300 --> 02:01:17.300]  Сейчас.
[02:01:18.300 --> 02:01:21.300]  Ну, смотрите, существует как минимум модуль ls вершин.
[02:01:22.300 --> 02:01:23.300]  Вот я тут даже начну писать.
[02:01:24.300 --> 02:01:25.300]  Модуль ls вершин.
[02:01:26.300 --> 02:01:31.300]  Существует как минимум модуль ls вершин, в которые из этих вершин ведут ребра, правда?
[02:01:32.300 --> 02:01:33.300]  Нет.
[02:01:34.300 --> 02:01:35.300]  Что?
[02:01:36.300 --> 02:01:37.300]  Соседи, потому что.
[02:01:38.300 --> 02:01:39.300]  А, если вот это.
[02:01:40.300 --> 02:01:41.300]  Да, мы же напоминаем.
[02:01:42.300 --> 02:01:43.300]  Мы доказываем, что если вот это, то вот это.
[02:01:44.300 --> 02:01:48.300]  Мы же не абстрактно доказываем, что дан двудольный граф докажет, что там существует совершенно предсочинание.
[02:01:49.300 --> 02:01:50.300]  Это просто неправда.
[02:01:51.300 --> 02:01:52.300]  Вот.
[02:01:53.300 --> 02:01:54.300]  Но, нет, ну, это не правда.
[02:01:55.300 --> 02:01:56.300]  Я еще не дописал.
[02:01:57.300 --> 02:02:02.300]  Скажем так, это была бы правда, если бы я написал вот так.
[02:02:03.300 --> 02:02:04.300]  Вот это правда?
[02:02:05.300 --> 02:02:06.300]  Да.
[02:02:07.300 --> 02:02:08.300]  Но, конечно же, c.
[02:02:09.300 --> 02:02:11.300]  А теперь, заметим, вот, если просто и c из ls.
[02:02:12.300 --> 02:02:13.300]  Вот сколько ребер соединяет ls с r?
[02:02:14.300 --> 02:02:15.300]  Как минимум ls.
[02:02:18.300 --> 02:02:19.300]  А можно уточнить?
[02:02:21.300 --> 02:02:23.300]  Заметим, что c от ls в rt.
[02:02:24.300 --> 02:02:25.300]  Это что такое?
[02:02:26.300 --> 02:02:28.300]  Это c от ls в rt.
[02:02:29.300 --> 02:02:30.300]  Да?
[02:02:31.300 --> 02:02:32.300]  Значит, просто в r.
[02:02:33.300 --> 02:02:34.300]  Минус c от ls rs.
[02:02:35.300 --> 02:02:36.300]  Теперь давайте оценивать снизу.
[02:02:37.300 --> 02:02:38.300]  Это, как минимум, ls.
[02:02:40.300 --> 02:02:41.300]  А этот минус?
[02:02:45.300 --> 02:02:46.300]  Ну, как, ну, вот.
[02:02:47.300 --> 02:02:53.300]  Ну, его надо, тут наоборот, c от ls rs надо оценить сверху.
[02:02:54.300 --> 02:02:57.300]  Ну, это сложно, потому что непонятно, сколько между ними ребер.
[02:02:57.300 --> 02:02:58.300]  Ну, это не совсем, да.
[02:02:59.300 --> 02:03:01.300]  Когда ls может быть маленьким, тогда нас это может не устроить.
[02:03:02.300 --> 02:03:05.300]  Да, но само по себе это, да, само по себе это не поможет.
[02:03:06.300 --> 02:03:08.300]  Но, тем не менее, я утверждаю следующее.
[02:03:09.300 --> 02:03:12.300]  Что у нас, у нас даже более важно, мы даже не на языке c,
[02:03:13.300 --> 02:03:17.300]  а просто мы замечаем, что в хотя бы ls вершин у нас ведут ребра.
[02:03:18.300 --> 02:03:19.300]  Правда?
[02:03:20.300 --> 02:03:21.300]  Да.
[02:03:21.300 --> 02:03:25.300]  Мы замечаем, что в хотя бы ls вершин у нас ведут ребра.
[02:03:26.300 --> 02:03:27.300]  Правда?
[02:03:28.300 --> 02:03:32.300]  Ну, раз хотя бы в ls вершин справа у нас ведут ребра,
[02:03:33.300 --> 02:03:42.300]  то это означает, что в доле rt находится хотя бы ls минус rs.
[02:03:49.300 --> 02:03:50.300]  Туда, туда.
[02:03:51.300 --> 02:03:55.300]  Нет, это я, к сожалению, оценить сверху, как вот это не могу.
[02:03:56.300 --> 02:03:59.300]  А именно в ls в r или в rt?
[02:04:00.300 --> 02:04:02.300]  Вот, нет, именно вот так, да.
[02:04:03.300 --> 02:04:05.300]  Да, пардон, пардон, пардон.
[02:04:06.300 --> 02:04:08.300]  Значит, вот такое мистическое утверждение.
[02:04:09.300 --> 02:04:10.300]  Значит, еще раз, почему так?
[02:04:11.300 --> 02:04:14.300]  Потому что, смотрите, давайте я картинку нарисую.
[02:04:14.300 --> 02:04:16.300]  Вот, значит, картинка такая.
[02:04:17.300 --> 02:04:19.300]  Ну, давайте я вот тут локально нарисую.
[02:04:20.300 --> 02:04:22.300]  Вот у вас вот разрез, да?
[02:04:23.300 --> 02:04:26.300]  И вот вы знаете, что вот у вас есть множество ls, да?
[02:04:27.300 --> 02:04:28.300]  Видите, да?
[02:04:29.300 --> 02:04:33.300]  Мы знаем, что из него торчат ребра.
[02:04:34.300 --> 02:04:37.300]  Какие-то вот, может быть, много, но торчат.
[02:04:38.300 --> 02:04:41.300]  В какое-то, может быть, много, но торчат.
[02:04:41.300 --> 02:04:43.300]  В какое-то множество вот этого.
[02:04:46.300 --> 02:04:49.300]  Оно называется ntls.
[02:04:51.300 --> 02:04:52.300]  Вот видите, да?
[02:04:53.300 --> 02:04:55.300]  В нем его размер больше, чем ls.
[02:04:57.300 --> 02:04:59.300]  Да, вот, но это в сумме, да?
[02:05:00.300 --> 02:05:05.300]  Но заметим следующее, что какие-то вершины находятся вдоль t, какие-то вдоль f.
[02:05:06.300 --> 02:05:10.300]  Но вдоль s находятся не более, чем ntls.
[02:05:11.300 --> 02:05:12.300]  Вот столько вершин.
[02:05:13.300 --> 02:05:16.300]  Да, но это и есть просто вот, не более, чем вот столько вершин, правда?
[02:05:17.300 --> 02:05:18.300]  А это и есть rs.
[02:05:19.300 --> 02:05:26.300]  То есть, следовательно, вот здесь, вот в этой доле не меньше, чем вот ls-rs.
[02:05:27.300 --> 02:05:29.300]  И в каждой из них идет хотя бы одно ребро.
[02:05:30.300 --> 02:05:33.300]  Может и больше, но оценивает снизу, поэтому нас устраивает.
[02:05:34.300 --> 02:05:36.300]  Поэтому все, что нам остается, это писать
[02:05:36.300 --> 02:05:43.300]  модуль lt плюс модуль rs плюс модуль ls минус модуль rs.
[02:05:44.300 --> 02:05:45.300]  Шлеп-шлеп.
[02:05:53.300 --> 02:05:54.300]  Да.
[02:05:55.300 --> 02:05:56.300]  Все.
[02:05:57.300 --> 02:05:58.300]  Лемма доказывает.
[02:05:59.300 --> 02:06:02.300]  Как бы, узрите силу теремы форда Фолкерсона.
[02:06:02.300 --> 02:06:03.300]  Да.
[02:06:04.300 --> 02:06:09.300]  Да, вы, конечно, могли там доказывать, типа там эта удлиняющая цепь там какая-то существует.
[02:06:10.300 --> 02:06:12.300]  Запустим tfs, но по факту на самом деле то, что вы делаете,
[02:06:13.300 --> 02:06:15.300]  уже давно сделал за вас теремы форда Фолкерсона в доказательстве.
[02:06:16.300 --> 02:06:19.300]  То есть, если вы там думаете, что там удлиняющая цепь,
[02:06:20.300 --> 02:06:22.300]  запустим куда-то там что-то, ориентируем какие-то там ребра,
[02:06:23.300 --> 02:06:24.300]  куда-то там как в куне, то заметим, что...
[02:06:25.300 --> 02:06:27.300]  Ну вот, то на самом деле, как бы это все, скорее всего,
[02:06:28.300 --> 02:06:30.300]  была часть доказательства теремы форда Фолкерсона в той части,
[02:06:30.300 --> 02:06:33.300]  когда вы там искали максимальный поток и минимальный разрез.
[02:06:34.300 --> 02:06:37.300]  А кто раньше придумал теремы форда Фолкерсона?
[02:06:39.300 --> 02:06:40.300]  Ох ты, хороший вопрос.
[02:06:41.300 --> 02:06:42.300]  Боюсь, что был.
[02:06:43.300 --> 02:06:44.300]  Есть такое подозрение.
[02:06:45.300 --> 02:06:46.300]  Ну давайте.
[02:06:47.300 --> 02:06:48.300]  Вы сказали, что tst больше равно, чем a.
[02:06:49.300 --> 02:06:50.300]  Так, сейчас.
[02:06:51.300 --> 02:06:52.300]  А, 3, так.
[02:06:53.300 --> 02:06:54.300]  Не, ну да, Лемма.
[02:06:55.300 --> 02:06:56.300]  Нет, смотрите, Лемма ходит.
[02:06:57.300 --> 02:06:58.300]  Tst больше равно, чем a.
[02:06:59.300 --> 02:07:00.300]  Зачем это делать?
[02:07:01.300 --> 02:07:04.300]  Ну, поскольку у тебя мощность любого,
[02:07:05.300 --> 02:07:07.300]  и, как можно сказать, способность любого разреза больше,
[02:07:08.300 --> 02:07:09.300]  чем мощность l,
[02:07:10.300 --> 02:07:12.300]  то максимальный поток форда Фолкерсона,
[02:07:13.300 --> 02:07:15.300]  у тебя максимальный поток тоже больше либо равен,
[02:07:16.300 --> 02:07:17.300]  чем модуль a.
[02:07:18.300 --> 02:07:19.300]  Значит, существует про сочетание хотя бы l размера.
[02:07:20.300 --> 02:07:21.300]  О, классно.
[02:07:22.300 --> 02:07:23.300]  Да, забавно, википедию, открываю википедию.
[02:07:24.300 --> 02:07:25.300]  Ой, ладно, давайте так.
[02:07:25.300 --> 02:07:26.300]  Ну, да, там всякое что-то есть.
[02:07:27.300 --> 02:07:29.300]  Ну да, потому что там можно показать, что докажем,
[02:07:30.300 --> 02:07:31.300]  что есть удлиняющие цепи, бла-бла-бла.
[02:07:32.300 --> 02:07:34.300]  Нет, ну мы это все будем обсуждать в про сочетаниях,
[02:07:35.300 --> 02:07:36.300]  но на самом деле просто я отвержаю,
[02:07:37.300 --> 02:07:38.300]  что все эти понятия удлиняющие цепи,
[02:07:39.300 --> 02:07:40.300]  это просто следствие вот этой теории.
[02:07:41.300 --> 02:07:42.300]  На самом деле все.
[02:07:43.300 --> 02:07:44.300]  Да, я не так говорю.
[02:07:45.300 --> 02:07:46.300]  Да, я не так говорю.
[02:07:47.300 --> 02:07:48.300]  Ну, все так говорят.
[02:07:49.300 --> 02:07:50.300]  Тут вообще забавно, потому что я вам сейчас википедию
[02:07:51.300 --> 02:07:52.300]  покажу, вы удивитесь.
[02:07:53.300 --> 02:07:54.300]  О, видите там?
[02:07:55.300 --> 02:07:56.300]  Ну ладно, давайте уже.
[02:08:01.300 --> 02:08:02.300]  О, видали?
[02:08:03.300 --> 02:08:04.300]  Значит, смотрите.
[02:08:05.300 --> 02:08:06.300]  Ну вот, то есть забавно.
[02:08:07.300 --> 02:08:08.300]  Начало доказано в 35-м году, да?
[02:08:09.300 --> 02:08:10.300]  Да.
[02:08:11.300 --> 02:08:12.300]  Но при этом первое.
[02:08:13.300 --> 02:08:14.300]  Одно из доказательств страливает немедленно
[02:08:15.300 --> 02:08:16.300]  из венгерского алгоритма для поиска максимального
[02:08:17.300 --> 02:08:18.300]  просочетания в графе.
[02:08:19.300 --> 02:08:20.300]  А также является следствием мистерима
[02:08:21.300 --> 02:08:22.300]  Форда Фулкер Сода о разрезаниях.
[02:08:23.300 --> 02:08:24.300]  Вот.
[02:08:25.300 --> 02:08:27.300]  Для случая регулярных графов в степени 2 в степени
[02:08:28.300 --> 02:08:29.300]  N тиремма легко выводится в существовании Эллерово
[02:08:30.300 --> 02:08:31.300]  цикла.
[02:08:32.300 --> 02:08:33.300]  Что такое регулярные графы?
[02:08:34.300 --> 02:08:36.300]  А это когда у каждой вершины степень одинаковая.
[02:08:37.300 --> 02:08:39.300]  Кстати, у вас в домашней задании будет такая задачка.
[02:08:40.300 --> 02:08:41.300]  Решить были?
[02:08:42.300 --> 02:08:43.300]  Ну вот.
[02:08:44.300 --> 02:08:45.300]  Вот схема та же, реально.
[02:08:46.300 --> 02:08:47.300]  Надо доказать, типа?
[02:08:48.300 --> 02:08:50.300]  Ну там фактически будет дан-дан-дерегулярный граф.
[02:08:51.300 --> 02:08:52.300]  То есть вдольный граф, у которого все степени
[02:08:53.300 --> 02:08:54.300]  вершины равны D.
[02:08:55.300 --> 02:08:56.300]  Ну, во-первых, такая задача A.
[02:08:57.300 --> 02:08:58.300]  Докажите, что существует совершенное просочетание.
[02:08:59.300 --> 02:09:00.300]  И B.
[02:09:01.300 --> 02:09:02.300]  Докажите, что, на самом деле, ребра можно разбить
[02:09:03.300 --> 02:09:04.300]  на D просочетаний.
[02:09:05.300 --> 02:09:06.300]  Совершенно.
[02:09:07.300 --> 02:09:08.300]  Что такое совершенное?
[02:09:09.300 --> 02:09:10.300]  Которое покрывает все вершины.
[02:09:11.300 --> 02:09:12.300]  Ну понятно, что одно, на самом деле, эти два вершины
[02:09:13.300 --> 02:09:14.300]  не эквиваленты, по сути.
[02:09:15.300 --> 02:09:16.300]  Ну вот.
[02:09:17.300 --> 02:09:18.300]  А доказательства там вот, ну как хотите, можно, конечно,
[02:09:19.300 --> 02:09:20.300]  через удлиняющую цепь, но на самом деле вот.
[02:09:21.300 --> 02:09:23.300]  Вот так, по мне, так даже рассуждение сильно проще.
[02:09:23.300 --> 02:09:24.300]  А, ну вот, пожалуйста, идти.
[02:09:25.300 --> 02:09:26.300]  Тут считается немедленно.
[02:09:27.300 --> 02:09:28.300]  Вот.
[02:09:29.300 --> 02:09:30.300]  Ну, туда, ой, теория макеонига.
[02:09:31.300 --> 02:09:32.300]  Так что-то, казалось, что-то умное, теория макеонига
[02:09:33.300 --> 02:09:34.300]  будет, да.
[02:09:35.300 --> 02:09:36.300]  Ой, ладно, теория макеонига, это будет умнее.
[02:09:37.300 --> 02:09:38.300]  Ага.
[02:09:39.300 --> 02:09:40.300]  Так.
[02:09:41.300 --> 02:09:42.300]  Ой.
[02:09:43.300 --> 02:09:44.300]  Так, вот интрига.
[02:09:45.300 --> 02:09:46.300]  Что такое, в данном случае, венгерский алгоритм?
[02:09:47.300 --> 02:09:50.300]  Нет, просто вообще, по умолчанию, венгерский алгоритм
[02:09:51.300 --> 02:09:52.300]  это поиск именкоста.
[02:09:53.300 --> 02:09:56.300]  Когда там дан двудольный крафт только взвешенный,
[02:09:57.300 --> 02:09:59.300]  найдите совершенно просочетание, но минимального веса.
[02:10:00.300 --> 02:10:02.300]  Вообще, это называется венгерский алгоритм.
[02:10:03.300 --> 02:10:04.300]  Но что-то у русской википедии, видимо, другое мнение
[02:10:05.300 --> 02:10:06.300]  по данному вопросу.
[02:10:07.300 --> 02:10:08.300]  А назначение?
[02:10:09.300 --> 02:10:10.300]  Ну, да, да.
[02:10:11.300 --> 02:10:12.300]  Задача о назначении.
[02:10:13.300 --> 02:10:14.300]  Ну, да, да, да.
[02:10:15.300 --> 02:10:16.300]  Задача о назначении.
[02:10:17.300 --> 02:10:18.300]  Ну, да, да, вот странно.
[02:10:19.300 --> 02:10:20.300]  Так, вот.
[02:10:21.300 --> 02:10:22.300]  А, нет.
[02:10:23.300 --> 02:10:25.300]  Нет, правда, заметим, что венгерский алгоритм, да,
[02:10:26.300 --> 02:10:27.300]  он тоже, видите.
[02:10:28.300 --> 02:10:32.300]  То есть, как-то, заметим, что, собственно, товарищ Кун
[02:10:33.300 --> 02:10:34.300]  в этом тоже участвовал.
[02:10:35.300 --> 02:10:37.300]  Да, Кун это венгер, как легко видно из фамилии, да.
[02:10:38.300 --> 02:10:40.300]  Так он, по идее, есть алгоритм Кун, да?
[02:10:41.300 --> 02:10:42.300]  Нет, но там другой алгоритм.
[02:10:43.300 --> 02:10:45.300]  Ну, да, в смысле, что изначально же он придумал.
[02:10:46.300 --> 02:10:47.300]  Нет, но там не совсем так.
[02:10:48.300 --> 02:10:49.300]  Понимаете, почему он венгерский?
[02:10:50.300 --> 02:10:51.300]  Потому что, но я не знаю, странно, что Джеймс,
[02:10:51.300 --> 02:10:52.300]  ну, да.
[02:10:53.300 --> 02:10:54.300]  Хотя странно, он венгерский.
[02:10:55.300 --> 02:10:57.300]  Потому что у меня было сведение, что там жили были два венгра
[02:10:58.300 --> 02:10:59.300]  и решили эту задачу за Энк четвертый.
[02:11:00.300 --> 02:11:02.300]  Потом пришли еще два венгра и сказали, что можно закупы-то пилить.
[02:11:03.300 --> 02:11:05.300]  Ну, вот, Википедия говорит то же самое, но что-то,
[02:11:06.300 --> 02:11:08.300]  но утверждает, что вторых венгров звали Эдмонс и Карп.
[02:11:09.300 --> 02:11:11.300]  А первые вообще Кун и Манкросс.
[02:11:12.300 --> 02:11:16.300]  И такой, да, с таким, таким, да, типичным венгерским именем Джеймс.
[02:11:18.300 --> 02:11:19.300]  Да.
[02:11:20.300 --> 02:11:21.300]  Ну, вот.
[02:11:22.300 --> 02:11:24.300]  Ой, да, да, да, ой, классно, да.
[02:11:25.300 --> 02:11:28.300]  Тот самый Якови, который там что-то для матрицы придумал метод.
[02:11:29.300 --> 02:11:30.300]  Ох ты, да какая-то, ой.
[02:11:31.300 --> 02:11:35.300]  А, оказалось это, ой, да, ой, да, на латыни мало нет, да.
[02:11:36.300 --> 02:11:38.300]  Интересно, а, ну, тогда, может, и читали, когда долгое время, по-моему.
[02:11:39.300 --> 02:11:42.300]  Ну, хотя вот в это время, ну, хотя я не знаю, в каком году,
[02:11:43.300 --> 02:11:44.300]  на каком языке тогда общались.
[02:11:45.300 --> 02:11:47.300]  Нет, я помню, что долгое время международным языком общение было латинский, собственно, да.
[02:11:47.300 --> 02:11:50.300]  И на языком науки тоже, но не до такой же степени.
[02:11:51.300 --> 02:11:54.300]  Господи, форты, фалкиксы, ну, что-то странное, в общем, окей.
[02:11:55.300 --> 02:11:57.300]  А еще и незадатые медзалы, независимо они.
[02:11:58.300 --> 02:12:00.300]  Вот это, давайте опубликуйте алгоритм, потом вас уедят, называется.
[02:12:01.300 --> 02:12:03.300]  Поэтому иногда страшно опубликовать, да.
[02:12:04.300 --> 02:12:06.300]  А то опубликуешь там это ено обратную функцию кирмана,
[02:12:07.300 --> 02:12:09.300]  потом говорят, что его допилят за латки, на самом деле.
[02:12:10.300 --> 02:12:12.300]  Или за корень из обратной функции кирмана.
[02:12:12.300 --> 02:12:14.300]  Корень из обратной функции кирмана.
[02:12:16.300 --> 02:12:18.300]  В целом, о таких амсимптутиках я не слышал.
[02:12:20.300 --> 02:12:24.300]  А вот почему, смотрите, кунг 55-й год,
[02:12:25.300 --> 02:12:27.300]  и он говорит, что метод венгерский алгоритм основан на более ранних работах
[02:12:28.300 --> 02:12:30.300]  двух венгерских патематиков, вот Кёнига и Герлари.
[02:12:31.300 --> 02:12:33.300]  Ну ладно, до этого мы дойдем.
[02:12:34.300 --> 02:12:35.300]  Вот.
[02:12:36.300 --> 02:12:38.300]  А, мы еще хотели...
[02:12:39.300 --> 02:12:40.300]  Да.
[02:12:40.300 --> 02:12:44.300]  Так, а мы еще хотели выяснить про тиримфорда Фолкерсона, про ее, когда она...
[02:12:45.300 --> 02:12:47.300]  Ой, теряем момент герау.
[02:12:48.300 --> 02:12:49.300]  Да.
[02:12:50.300 --> 02:12:51.300]  Да.
[02:12:52.300 --> 02:12:54.300]  Сечение, ой-ой-ой, историю можно?
[02:12:55.300 --> 02:12:57.300]  А, но история, впрочем, лечится очень просто.
[02:13:00.300 --> 02:13:02.300]  Definition statement.
[02:13:03.300 --> 02:13:05.300]  Так, ну ладно, если вам тут, если это не рассказывают,
[02:13:06.300 --> 02:13:08.300]  то как бы, тогда это делается так.
[02:13:08.300 --> 02:13:10.300]  Вот можно...
[02:13:11.300 --> 02:13:12.300]  Ага.
[02:13:13.300 --> 02:13:15.300]  Тогда, в случае чего, вот просто есть вот, когда были работы,
[02:13:16.300 --> 02:13:19.300]  ну видимо, вот видите, как бы, скорее всего, 56-й.
[02:13:20.300 --> 02:13:23.300]  Так что там, товарищи, видимо, плюс-минус в одну сторону думали тогда.
[02:13:24.300 --> 02:13:26.300]  Вот. Так что несу.
[02:13:27.300 --> 02:13:28.300]  Ладно.
[02:13:29.300 --> 02:13:30.300]  Так.
[02:13:31.300 --> 02:13:32.300]  Так, что там у нас есть еще?
[02:13:33.300 --> 02:13:35.300]  Так, сколько у нас там еще времени?
[02:13:36.300 --> 02:13:37.300]  Сейчас 35 минут.
[02:13:38.300 --> 02:13:39.300]  Так, 10 минут, да.
[02:13:40.300 --> 02:13:41.300]  Так.
[02:13:42.300 --> 02:13:43.300]  Ну, знаю, где будет параметр.
[02:13:44.300 --> 02:13:45.300]  Вот так.
[02:13:46.300 --> 02:13:47.300]  Да.
[02:13:48.300 --> 02:13:49.300]  О.
[02:13:50.300 --> 02:13:51.300]  Так.
[02:13:52.300 --> 02:13:53.300]  Ладно, ну вот, ну с просочетаниями, ладно.
[02:13:54.300 --> 02:13:55.300]  С просочетаниями пока все.
[02:13:56.300 --> 02:13:57.300]  Я думаю, пока, наверное, Куна выводить не будем.
[02:13:58.300 --> 02:13:59.300]  Ну, потому что там, если уж это выводить,
[02:14:00.300 --> 02:14:02.300]  то там надо будет отдельно вот эти все теоремы и кео, там кеонега доказывать.
[02:14:03.300 --> 02:14:05.300]  Которые, по сути, там, превершенные покрытия, вот это все.
[02:14:06.300 --> 02:14:07.300]  Это называется теорема кеонега.
[02:14:08.300 --> 02:14:09.300]  Вот.
[02:14:10.300 --> 02:14:11.300]  Ну вот.
[02:14:12.300 --> 02:14:13.300]  Ну, а пока же, ладно, значит, тогда.
[02:14:14.300 --> 02:14:15.300]  Ну вот.
[02:14:16.300 --> 02:14:18.300]  А пока же можно рассмотреть, значит, пример.
[02:14:19.300 --> 02:14:21.300]  Как, вот, какой-нибудь еще такой пример задачки.
[02:14:25.300 --> 02:14:29.300]  Ну, такой, сейчас я вот расскажу такой пример еще веселой задачки.
[02:14:30.300 --> 02:14:32.300]  Значит, такой, по крайней мере, базовой.
[02:14:33.300 --> 02:14:37.300]  И уже рекомендую вам тогда попробовать, собственно, там, домашние задания порешать.
[02:14:39.300 --> 02:14:41.300]  Думаю, честно, вот, честно скажу на этот раз.
[02:14:42.300 --> 02:14:45.300]  Если вы попробуете сами, ну, там, уже не ваше там ревью, не ревью, а покодить.
[02:14:46.300 --> 02:14:48.300]  Там, покодить вот эти там задачи.
[02:14:49.300 --> 02:14:51.300]  То, соответственно, тогда и там, доходите к следующему разу,
[02:14:52.300 --> 02:14:54.300]  то тогда происходящее, тогда, на следующем, на следующем семинаре,
[02:14:55.300 --> 02:14:57.300]  как бы, до следующей лекции для вас будет сильно проще.
[02:14:58.300 --> 02:15:00.300]  А про что в следующей лекции?
[02:15:01.300 --> 02:15:02.300]  Ну.
[02:15:03.300 --> 02:15:04.300]  Ну, во-первых, блокирующий поток единиц.
[02:15:05.300 --> 02:15:06.300]  Да, предупреждаю, да.
[02:15:06.300 --> 02:15:11.300]  Если что, может так случайно получиться, что у вас это, форкполки, это тэдбонскак не зайдет.
[02:15:12.300 --> 02:15:14.300]  Ну, это, ну, маловероятно такое может быть.
[02:15:15.300 --> 02:15:18.300]  В случае чего, не пугайтесь, значит, есть более быстрый алгоритм.
[02:15:19.300 --> 02:15:23.300]  Ну, а как бы, если вы там напишите и получите ТЛ сколько-нибудь.
[02:15:24.300 --> 02:15:27.300]  Не, ну, там так, если вы получите там ТЛ сколько-нибудь, значит, уже хорошо.
[02:15:28.300 --> 02:15:29.300]  Скорее всего.
[02:15:29.300 --> 02:15:34.300]  Чего?
[02:15:35.300 --> 02:15:36.300]  Чего?
[02:15:37.300 --> 02:15:38.300]  Да, там пока сломано.
[02:15:39.300 --> 02:15:42.300]  Нажимаешь на эту новую задачу, а меня отравляют в старые задачи.
[02:15:43.300 --> 02:15:45.300]  А, ой-ой-ой, да, поправим, поправим, поправим.
[02:15:46.300 --> 02:15:48.300]  Какое безобразие.
[02:15:49.300 --> 02:15:50.300]  Так, ладно, решим.
[02:15:51.300 --> 02:15:55.300]  Ну, вот, а пока, ну, соответственно, вам придется еще решать какие-то задачи.
[02:15:56.300 --> 02:16:00.300]  Значит, вот сейчас рассмотрим такой первый пример, наверное, не последний.
[02:16:01.300 --> 02:16:04.300]  Пример из задачек на минимальный разрез.
[02:16:07.300 --> 02:16:11.300]  Ну, такой, достаточно типичным таким примером является такая классическая задача.
[02:16:12.300 --> 02:16:14.300]  Я не помню, что мы это определяли.
[02:16:15.300 --> 02:16:16.300]  Мы доказывали это.
[02:16:17.300 --> 02:16:19.300]  Мы определяли, что такое разрез.
[02:16:20.300 --> 02:16:22.300]  Мы определяли, что у разреза есть пропускная способность.
[02:16:22.300 --> 02:16:24.300]  Мы сравнивали разрезы по простой способности.
[02:16:25.300 --> 02:16:26.300]  Находили минимальную.
[02:16:27.300 --> 02:16:28.300]  Это и есть минимальный разрез.
[02:16:39.300 --> 02:16:41.300]  Так вот, задача – ярость и команда.
[02:16:43.300 --> 02:16:45.300]  Ну, представьте, что у вас есть стартап.
[02:16:46.300 --> 02:16:50.300]  Вот вы оставали компанию, и вы там что-то программируете.
[02:16:52.300 --> 02:16:53.300]  Изначально у вас там мало людей.
[02:16:54.300 --> 02:16:55.300]  Ну, там два, три, там пять.
[02:16:56.300 --> 02:16:58.300]  Ну, потом не, пока два, три, пять.
[02:16:59.300 --> 02:17:02.300]  Но команда все равно, скорее всего, работает все вместе.
[02:17:03.300 --> 02:17:04.300]  Часто просто в одном помещении.
[02:17:05.300 --> 02:17:06.300]  Все все кодят и радуются.
[02:17:07.300 --> 02:17:08.300]  Да, пишут всякую игру на кодинге.
[02:17:09.300 --> 02:17:12.300]  Ну, вот, но самое главное, что все все вместе там обсуждают.
[02:17:13.300 --> 02:17:14.300]  Этого явных распределений обязанности особо нет.
[02:17:15.300 --> 02:17:16.300]  Имитации будем имитировать?
[02:17:17.300 --> 02:17:18.300]  Нет, почему имитации? Нет, активно пишете.
[02:17:19.300 --> 02:17:21.300]  Но стартап, как это бывает, оказался успешным.
[02:17:22.300 --> 02:17:23.300]  Как это не было?
[02:17:24.300 --> 02:17:26.300]  Ну, как сказать, да, понятно, что изначально было нас двое.
[02:17:27.300 --> 02:17:31.300]  Как говорится, да, называется, Марк писал код, я выкапывал сервера под Linux.
[02:17:32.300 --> 02:17:33.300]  Называется, да, такая нота.
[02:17:34.300 --> 02:17:35.300]  И потом, собственно, появился Facebook.
[02:17:36.300 --> 02:17:37.300]  Но стартапчик развивался.
[02:17:38.300 --> 02:17:40.300]  Так, развивался, развивался.
[02:17:41.300 --> 02:17:42.300]  Количество людей увеличилось.
[02:17:43.300 --> 02:17:45.300]  Пять, десять, двадцать, пятьдесят.
[02:17:46.300 --> 02:17:49.300]  И в какой-то момент вы поняли, что находиться в одной комнате,
[02:17:49.300 --> 02:17:51.300]  чтобы все все обсуждали и все со всеми были в курсе.
[02:17:52.300 --> 02:17:53.300]  Это уже сложно.
[02:17:54.300 --> 02:17:58.300]  Поэтому вы поняли, что пришло время разделять компанию на подотделы.
[02:18:00.300 --> 02:18:03.300]  Ну, в качестве примера вы решили поделить задачу, скажем, на...
[02:18:06.300 --> 02:18:07.300]  Ну, там, потому что тем более люди разные.
[02:18:08.300 --> 02:18:09.300]  То есть поэтому, давайте, ладно, давайте вот.
[02:18:10.300 --> 02:18:11.300]  Программирование, написание документации.
[02:18:12.300 --> 02:18:15.300]  Ну, давайте, ладно, я обычно говорил программисты и тестировщики.
[02:18:15.300 --> 02:18:16.300]  Тестировщики...
[02:18:17.540 --> 02:18:18.300]  Но ладно, давайте так.
[02:18:19.300 --> 02:18:20.300]  Б, программисты...
[02:18:21.300 --> 02:18:22.300]  Да, а давайте, программисты и тестировщики.
[02:18:23.300 --> 02:18:26.300]  Ну, можно программисты и менеджеры, если хотите.
[02:18:27.300 --> 02:18:28.300]  Но это не разделить.
[02:18:29.300 --> 02:18:30.300]  Лучше тестировщики, потому сткм менеджеры,
[02:18:31.300 --> 02:18:32.300]  каждый менеджер, он командует все-таки программистами.
[02:18:33.300 --> 02:18:34.300]  А тут, разделение на два раздела.
[02:18:35.300 --> 02:18:38.300]  Значит, нужны тоже будут программисты.
[02:18:41.300 --> 02:18:43.300]  Значит, там, соответственно, понятно программисты и тестировщики.
[02:18:43.300 --> 02:18:49.980]  тестировщины. Как разделить людей? Ну, если у вас N человек, то разделить, конечно, можно
[02:18:49.980 --> 02:18:59.820]  два степени N способа. Вот, типа берем и разделяем. Но как же конкретно разделить? Ну, как сказать,
[02:18:59.820 --> 02:19:06.620]  как это часто бывает в маленьких стартапах, процветает демократия. Поэтому вы решили спросить,
[02:19:06.620 --> 02:19:13.060]  о чем по поводу разделения думают сами люди. Вот кто-то, наверное, больше хочет быть программистом,
[02:19:13.060 --> 02:19:20.860]  кто-то хочет быть тестировщиком. И, значит, вы привелись в этот вопрос и выяснили интересное
[02:19:20.860 --> 02:19:27.420]  свете. Оказывается, некоторые люди... Нет, вот даже не так сделаем. Давайте тестировщики будут
[02:19:27.420 --> 02:19:40.340]  красненькими. Значит, вот смотрите, оказывается, есть некоторые товарищи, которые очень хотят быть
[02:19:40.340 --> 02:19:46.820]  программистами. Что значит очень хотят? Это означает, что, если вы их сделаете тестировщиками,
[02:19:46.820 --> 02:19:55.940]  они будут плакать. Нет, может, не уволятся. Нет, пока не уволятся, но они будут плакать. В общем,
[02:19:55.940 --> 02:20:03.060]  короче, плакать и, называется, уровень ярости, уровень, так сказать, недовольства, уровень плача.
[02:20:03.060 --> 02:20:17.700]  Тогда если их сделать тестировщиками, увеличится на А. Больше нуля. Нет, пока еще не надо. А есть
[02:20:17.700 --> 02:20:25.820]  люди, которые, наоборот, хотят быть тестировщиками. Наоборот, если вы вот какого-то товарища сделаете
[02:20:25.820 --> 02:20:32.380]  программистом, он тоже будет плакать. Его уровень слез БВ. У кого как? Что кто-то поплачет,
[02:20:32.380 --> 02:20:41.460]  но по мелочи, а кто-то будет прям, вот я не знаю, просто разнесет офис. Ну да, в таких случаях мы
[02:20:41.460 --> 02:20:47.500]  пишем плюс бесконечность. Да, кстати, хороший прием в сетях, когда вы строите поток. Если вам
[02:20:47.500 --> 02:20:52.580]  нужно запретить что-то, то обычно в этом появляется ребропус, то есть способности плюс бесконечность.
[02:20:52.580 --> 02:20:58.900]  Ну сейчас мы увидим. Ну ладно, в таком виде задачу было бы просто решать. То есть как бы давайте
[02:20:58.900 --> 02:21:05.460]  программистов сделаем программистами, тестировщиков тестировщиками и не паримся. Но выяснилось еще
[02:21:05.460 --> 02:21:17.580]  такие интересные вещи. Оказывается, некоторые люди дружат. Вот так дружат в смысле хотят работать
[02:21:17.580 --> 02:21:27.020]  вместе. И с этой точки зрения, если окажется, что они разойдутся по разным командам, то они тоже
[02:21:27.020 --> 02:21:44.500]  начнут плакать. Органь плакать. Вот, что еще бывает? Так какие еще буквы есть? А есть еще всякие
[02:21:44.500 --> 02:21:53.820]  конфликты. Я не хочу, чтобы он тестил мой код. Или наоборот, я не хочу тестить его код. Вот поэтому
[02:21:53.820 --> 02:22:06.540]  если я стану программистом, а он тестировщиком, то я буду очень сильно возмущаться. Вот если я
[02:22:06.540 --> 02:22:18.060]  программист, а он тестировщик, то не Т, как какую-то букву З. Ну пока они счастливо избегали этой
[02:22:18.060 --> 02:22:31.660]  ситуации. Да. Нет, наоборот, они хотят либо быть оба программистом, либо оба тестировщиками. Что
[02:22:31.660 --> 02:22:40.020]  о противнике? А вот такого нет. Вот да, если мы хотим решать задачу по токам, то нам принципиально,
[02:22:40.020 --> 02:22:52.100]  к сожалению. Эта задача не очень такая. А этот мне хочет, чтобы я был программистом. То есть меня
[02:22:52.100 --> 02:22:55.260]  устроит, если я буду его тестировать, меня устроит, если мы будем оба программировать,
[02:22:55.260 --> 02:22:56.100]  если я буду программировать, а он будет меня тестировать, то бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ-бэ
[02:23:25.260 --> 02:23:27.260]  вот такое тоже бывает
[02:23:27.260 --> 02:23:29.260]  вот собрали мы такие сведения
[02:23:29.260 --> 02:23:33.260]  и теперь думаем, как бы их разделить так, чтобы суммарного плача было как можно меньше
[02:23:33.260 --> 02:23:35.260]  что пас? вот у и в это
[02:23:37.260 --> 02:23:40.260]  грешинка у хочет быть программистом
[02:23:40.260 --> 02:23:42.260]  то есть у нее условия только на одном
[02:23:42.260 --> 02:23:44.260]  если она будет в t
[02:23:44.260 --> 02:23:47.260]  ну не совсем, на самом деле у каждой вершины может быть несколько условий
[02:23:47.260 --> 02:23:50.260]  то есть у каждой вершины свое ау т, свое бу т
[02:23:50.260 --> 02:23:53.260]  б в это может быть, ну у некоторых ноль конечно
[02:23:53.780 --> 02:23:54.260]  microphones
[02:23:54.260 --> 02:23:57.260]  и они бывают связаны вот некоторыми дружественными
[02:23:57.260 --> 02:23:58.260]  я mogą
[02:24:03.260 --> 02:24:05.260]  да
[02:24:05.260 --> 02:24:07.260]  я не не не наоборот
[02:24:07.260 --> 02:24:10.260]  он не хочет, что бы я был programmer, а он тестировщик
[02:24:10.260 --> 02:24:11.260]  а не�igen
[02:24:11.260 --> 02:24:12.260]  digo
[02:24:12.260 --> 02:24:19.260]  то есть, что бы я был programmer, и он Hoyt
[02:24:19.260 --> 02:24:22.260]  Сколько-то программистов, сколько-то тестировщиков?
[02:24:22.260 --> 02:24:26.260]  Ну да, все, кто у нас есть, мы делим на программистов и тестировщиков.
[02:24:26.260 --> 02:24:27.260]  Хорошо.
[02:24:27.260 --> 02:24:29.260]  Вот так жестко.
[02:24:29.260 --> 02:24:30.260]  Решаем?
[02:24:30.260 --> 02:24:31.260]  Да.
[02:24:31.260 --> 02:24:33.260]  И вот, при чем тут? Ну, не решаем-то себе, сводим.
[02:24:33.260 --> 02:24:35.260]  А чем тогда дружба отличается от вражды?
[02:24:35.260 --> 02:24:38.260]  Отличается тем, что здесь нас устраивает...
[02:24:38.260 --> 02:24:41.260]  То есть здесь нас не устраивает, когда там, скажем, X-тестировщик, а Y-программист.
[02:24:41.260 --> 02:24:45.260]  А здесь нас устраивает, когда W-тестировщик, а Z-программист.
[02:24:45.260 --> 02:24:47.260]  А, то есть нас наоборот устраивает?
[02:24:47.260 --> 02:24:50.260]  Поэтому я вот рисую. Вот так.
[02:24:51.260 --> 02:24:54.260]  То есть когда они оба одинаковые, их это не устраивает?
[02:24:54.260 --> 02:24:56.260]  Нет, их это устраивает.
[02:24:56.260 --> 02:24:57.260]  Где?
[02:24:57.260 --> 02:25:01.260]  И тут, и тут, если они в одном отделе, их это устраивает.
[02:25:01.260 --> 02:25:08.260]  Снизу плохо только если первый программист, второй тестировщик, а сверху плохо, если они в разных отделах.
[02:25:08.260 --> 02:25:10.260]  А что такое дело?
[02:25:10.260 --> 02:25:12.260]  Либо первый программист, второй тестировщик...
[02:25:12.260 --> 02:25:15.260]  У нас два дела. Программисты, тестировщики.
[02:25:17.260 --> 02:25:19.260]  То есть когда они вместе...
[02:25:19.260 --> 02:25:25.260]  Так, они не вместе. А что вторые так делают? W и Z?
[02:25:25.260 --> 02:25:28.260]  Это когда W-программист, а Z-программист.
[02:25:28.260 --> 02:25:30.260]  Когда они в разных отделах?
[02:25:30.260 --> 02:25:35.260]  Нет, прям ровно так. W-программист, Z-программист. Все плохо.
[02:25:35.260 --> 02:25:37.260]  А, все понятно.
[02:25:37.260 --> 02:25:39.260]  Ну вот, начинайте.
[02:25:39.260 --> 02:25:41.260]  А теперь...
[02:25:42.260 --> 02:25:44.260]  Уже нету.
[02:25:44.260 --> 02:25:46.260]  Но решение такое...
[02:25:46.260 --> 02:25:48.260]  Сейчас мы сведем задачу.
[02:25:48.260 --> 02:25:50.260]  Сейчас мы сведем...
[02:25:50.260 --> 02:25:52.260]  Мы построим сеть.
[02:25:52.260 --> 02:25:58.260]  Такую, что пропускная способность любого разреза будет соответствовать...
[02:25:58.260 --> 02:26:05.260]  Соответствовать какому-то плачу соответствующего разбиения на программистов и тестировщиков.
[02:26:05.260 --> 02:26:12.260]  Вот если мы построим такую сеть, то останется в ней только найти минимальный разрез и сказать что угодно.
[02:26:12.260 --> 02:26:14.260]  Как мы это будем делать?
[02:26:14.260 --> 02:26:16.260]  Ну, давайте вообразим себе...
[02:26:16.260 --> 02:26:19.260]  Этот уже мысленно разрез.
[02:26:19.260 --> 02:26:21.260]  Значит, да, у нас будет и сток.
[02:26:21.260 --> 02:26:23.260]  Это будет новая эффективная вершина.
[02:26:23.260 --> 02:26:25.260]  И будет сток.
[02:26:25.260 --> 02:26:28.260]  То есть у нас будет только и сток, сток, и все вершины соответствующих сотрудников.
[02:26:28.260 --> 02:26:30.260]  Больше у нас ничего не будет.
[02:26:31.260 --> 02:26:33.260]  Итак, смотрите.
[02:26:33.260 --> 02:26:35.260]  Как нам сделать...
[02:26:35.260 --> 02:26:37.260]  Как нам теперь разобраться, чтобы...
[02:26:37.260 --> 02:26:40.260]  Программист. Если он будет тестировщиком, то АУ.
[02:26:40.260 --> 02:26:43.260]  Тогда мы поступим с вершиной У следующим образом.
[02:26:45.260 --> 02:26:51.260]  Мы соединим и сток с этой вершиной У ребром пропускной способности АУ.
[02:26:54.260 --> 02:27:02.260]  Тогда если в разбиении он окажется в тестировщика, то в пропускной способности появится пропускная способность АУ вот этого ребра.
[02:27:02.260 --> 02:27:04.260]  А если он окажется в С, то не появится.
[02:27:04.260 --> 02:27:06.260]  Обратите внимание, это ребро ничего не пересечет.
[02:27:07.260 --> 02:27:09.260]  Давай туда добавим БВ.
[02:27:09.260 --> 02:27:11.260]  Да, БВ.
[02:27:11.260 --> 02:27:13.260]  Совершенно верно.
[02:27:13.260 --> 02:27:15.260]  То есть хотим привязка...
[02:27:15.260 --> 02:27:19.260]  Если идет привязка к тестировщикам, то, пожалуйста, то же самое сток.
[02:27:19.260 --> 02:27:21.260]  Видите, да?
[02:27:21.260 --> 02:27:25.260]  То есть это вершина В, а пропускная способность будет БВ.
[02:27:25.260 --> 02:27:27.260]  А с какой стороны программист, а с какой?
[02:27:27.260 --> 02:27:29.260]  Это будет программист, это тестировщики.
[02:27:29.260 --> 02:27:31.260]  Ну видите, зеленые, красные.
[02:27:37.260 --> 02:27:39.260]  И, соответственно, тут тестировщики.
[02:27:43.260 --> 02:27:45.260]  Вот.
[02:27:45.260 --> 02:27:47.260]  Ну как это говорят?
[02:27:47.260 --> 02:27:49.260]  Это буква Л.
[02:27:54.260 --> 02:28:03.260]  Это оно ведет для того, чтобы если вершина У окажется в доле Т, то тогда это ребро будет участвовать в разрезе с пропускной способностью АУ.
[02:28:04.260 --> 02:28:06.260]  Это я просто, потому что я от балды сейчас так рисую.
[02:28:06.260 --> 02:28:08.260]  То есть разреза этого-то реально нет.
[02:28:08.260 --> 02:28:11.260]  Он подберет разрез, чтобы там сумма блока была меньше.
[02:28:11.260 --> 02:28:19.260]  Но мы главное знаем, что в пропустой способности любого разреза вот это ребро поучаствует, если У пойдет не туда, и не поучаствует, если У пойдет туда.
[02:28:21.260 --> 02:28:23.260]  Что делать с Х-игроком?
[02:28:24.260 --> 02:28:28.260]  Ну вот я на самом деле, вот я как тут нарисовал на самом деле, что с ними надо делать.
[02:28:29.260 --> 02:28:35.260]  Потому что Х-игрок надо просто соединить вот, можно сказать, двумя ориентированными ребрами с пропускной способностью ЦХ.
[02:28:35.260 --> 02:28:40.260]  Тогда, если они окажутся в разных отделах, то сыграет ровно одно из этих ребр.
[02:28:41.260 --> 02:28:45.260]  Обратите внимание, вот это сыграет, а это нет, если вот Х-игрок реально вот так.
[02:28:48.260 --> 02:28:50.260]  То есть важно, вот видите, почему я вот именно настаиваю.
[02:28:50.260 --> 02:28:54.260]  Вот теперь я хочу, чтобы не было так, чтобы W программиста Z тестировщик.
[02:28:55.260 --> 02:28:59.260]  Тогда, на этот раз я добавлю только ребро в одну сторону.
[02:29:04.260 --> 02:29:09.260]  Тогда обратите внимание, если W программиста Z тестировщик, то это ребро сыграет.
[02:29:11.260 --> 02:29:14.260]  Но если ребро, например, вот такое, то это ребро не сыграет.
[02:29:14.260 --> 02:29:21.260]  Потому что, напоминаю, в разрезе участвует в пропустой способности только ребра, идущие строго из доли С, строго в долю Т.
[02:29:21.260 --> 02:29:23.260]  Наоборот, нам не интересно.
[02:29:24.260 --> 02:29:26.260]  Когда мы пропустную способность ищем, помните, да?
[02:29:27.260 --> 02:29:33.260]  То есть, да, в чистом потоке мы эти ребра тоже учитывали и вычитали, но в пропустной способности мы этого не учитывали.
[02:29:35.260 --> 02:29:37.260]  То есть, вот такая красота.
[02:29:40.260 --> 02:29:43.260]  То есть, вот общая суть, вот как раз заключается в том,
[02:29:43.260 --> 02:29:55.260]  вот как раз она заключается именно в том, что на самом деле вот, то есть теперь, что каждому разрезу будет соответствовать четкая пропускная способность.
[02:29:56.260 --> 02:30:08.260]  То есть, всегда, когда у вас есть задача разбить какой-нибудь граф на какие-нибудь две доли, то зачастую ее можно свести к задаче о поиске мин разреза вот в какого-то подобного рода сети.
[02:30:13.260 --> 02:30:17.260]  То есть, там максимальный поток?
[02:30:17.260 --> 02:30:18.260]  Да.
[02:30:18.260 --> 02:30:21.260]  Ну, там максимальный поток плюс ДФС за ООО отъесом разреза.
[02:30:21.260 --> 02:30:27.260]  А можно придумать так, чтобы у нас два сотрудника не могли оказаться в одном отеле?
[02:30:28.260 --> 02:30:32.260]  Вот пока это таким методом, честно, я не знаю.
[02:30:32.260 --> 02:30:40.260]  Как мы учитываем условия У и БВ, когда они у нас разрезают?
[02:30:40.260 --> 02:30:55.260]  А очень просто, смотрите. Вопрос как бы, вот если У оказался среди тестировщиков, а хотел быть программистом, то тогда вот это вот ребро из стока У пропускной способности АУ, оно войдет в разрез и увеличит его пропускную способность на АУ.
[02:30:56.260 --> 02:31:06.260]  А если у нас вершина окажется наоборот, как она и хотела программистам, то соответствующее ребро не войдет в разрез и учтено не будет.
[02:31:06.260 --> 02:31:11.260]  Наверное стоит сказать, что для каждой вершины мы приведем свое АУ и свое БУ.
[02:31:11.260 --> 02:31:16.260]  Ну, чаще всего будет 0, да.
[02:31:16.260 --> 02:31:18.260]  И дополнительно вот так?
[02:31:18.260 --> 02:31:24.260]  Ну да. Да, там понятно, теоретически может быть, что вершина там и зеленая и красная, конечно, может быть, да.
[02:31:24.260 --> 02:31:26.260]  Но это не глобально.
[02:31:26.260 --> 02:31:30.260]  Но я подозреваю, что у каждой вершины все-таки хочет быть либо программистом, либо тестировщиком.
[02:31:30.260 --> 02:31:35.260]  Нет, можно предположить, что кто-то очень не хочет просто против разделения.
[02:31:35.260 --> 02:31:41.260]  Если вы меня сделаете программистом, я буду плакать, а если сделаете тестировщиком, я все равно буду плакать.
[02:31:41.260 --> 02:31:46.260]  Но тогда с этой точки зрения ладно, он все равно будет плакать, потому что ничего не попишешь.
[02:31:46.260 --> 02:31:50.260]  Нет, ну дайте денег.
[02:31:50.260 --> 02:31:55.260]  Ну, что сразу деньги? Стартап успешный, так что с деньгами ни у кого проблем нет.
[02:31:57.260 --> 02:31:59.260]  Но это другой вопрос.
[02:32:00.260 --> 02:32:02.260]  Вот.
[02:32:02.260 --> 02:32:06.260]  Мы уже решаем задачи предположений, да.
[02:32:06.260 --> 02:32:08.260]  Так что вот такая задача.
[02:32:08.260 --> 02:32:10.260]  То есть вот много еще таких задач, вот у вас там...
[02:32:10.260 --> 02:32:15.260]  То есть вот сейчас я на самом деле добавил еще не все задачи, которые у вас на ваших заданиях будут.
[02:32:15.260 --> 02:32:22.260]  Но я утверждаю, что все задачи, которые у вас есть, вот вы уже можете решить, ну по модулю может быть алгоритма Деница.
[02:32:22.260 --> 02:32:24.260]  Но, то есть уже попробовать можно.
[02:32:24.260 --> 02:32:27.260]  То есть в первую очередь как вообще сеть строить.
[02:32:27.260 --> 02:32:29.260]  Так что вот рекомендую попробовать.
[02:32:29.260 --> 02:32:32.260]  Тем более, что у вас есть задача Мотан, она будет ревьюшной.
[02:32:32.260 --> 02:32:34.260]  У Мотана есть?
[02:32:34.260 --> 02:32:36.260]  А что Мотан?
[02:32:36.260 --> 02:32:38.260]  Там есть задача Мотан.
[02:32:38.260 --> 02:32:40.260]  Ну почитайте в условии.
[02:32:40.260 --> 02:32:42.260]  Там идея очень такая.
[02:32:42.260 --> 02:32:44.260]  Ну, что красивая, так как?
[02:32:44.260 --> 02:32:46.260]  Я только не помню, она говорит, я помню, что она красивая.
[02:32:46.260 --> 02:32:49.260]  Ну я бы сказал так, она вот такая же на самом деле.
[02:32:49.260 --> 02:32:51.260]  Ну там что-то такое же.
[02:32:51.260 --> 02:32:55.260]  Вот идентичная, просто вот в эту сторону подумайте и будет с вами счастье.
