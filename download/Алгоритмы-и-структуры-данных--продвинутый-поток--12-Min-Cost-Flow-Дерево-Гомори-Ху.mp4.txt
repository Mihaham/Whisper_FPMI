[00:00.000 --> 00:15.720]  так лайк поехали тогда уже ладно возможно сегодня придется ну это посидеть чуть подольше я
[00:15.720 --> 00:33.760]  надеюсь не сильно подольше вот да да да да да так нет на этот раз нет вроде нет вроде все
[00:33.760 --> 00:40.320]  нормально и тут вроде теперь лежат адекватные марки нет все вроде на этот раз хорошо так
[00:40.320 --> 00:46.640]  лагика так что можете посидеть чуть подольше но пока бери пока им репа плана будет последние
[00:46.640 --> 01:04.120]  занятия в семестре будет все ой ну мы не будет уже вот нет ну как бы предварительных а хотите
[01:04.120 --> 01:13.000]  прям сразу сразу экзамен ноги нет ну прия ну в принципе как я уже говорил то есть
[01:13.000 --> 01:17.400]  о каком-нибудь там скажет альтернативно даже не столько до сроки сколько альтернативного
[01:17.400 --> 01:22.760]  времени значи экзамен можем договориться пожалуйста как я уже сказал это как бы и
[01:22.760 --> 01:31.400]  сыква сколько угодно да вот ладно но давайте смотреть на чеченам сегодня удастся сделать так
[01:31.400 --> 01:36.680]  ну начнем мы их наверное конечно с того о чем мы давно мечтали собственно поговорим о минкосте
[01:36.680 --> 01:43.560]  вот тоже на самом деле не самая такая сложная вещь ну правда крыша минкост обычно да принято
[01:43.560 --> 01:48.320]  считает такой алгоритм и сыква все знают как бы как вы да все знают как вы писать но мало кто
[01:48.320 --> 01:56.600]  знает а почему он вообще работает ну вот или или уже все знают мои сведения устарели так кто
[01:56.600 --> 02:08.120]  умеет доказывать минкост но так хорошо кто знает что такой минкост ну вот это как бы
[02:08.120 --> 02:15.560]  да а бы я знаю вот нет вот нет это как бы нет известно да да да но там уже отдельная песня да
[02:15.560 --> 02:25.440]  кто писал да кто писал минкос спит с потенциалами о да но мало ли но вот а кто писал минкос без
[02:25.440 --> 02:38.400]  потенциалов вот логично да да а кто умеет доказывать нет хотя парадокс том что на самом
[02:38.400 --> 02:45.560]  деле доказательства-то в общем-то не особо сложно значит смотрите ну давайте для начала сформулируем
[02:45.560 --> 02:51.160]  задачу какая у нас вообще задача задача у нас заключается том что да мы все еще ищем вообще
[02:51.160 --> 02:57.400]  поток казалось бы то есть тут как тут все как обычно какие-то ребра там у них пропускные
[02:57.400 --> 03:06.360]  способности там есть вот все казалось бы тоже самое все да не все потому что теперь у нас помимо
[03:06.360 --> 03:14.120]  пропустой способности появляется еще и стоимость то есть у нас тут совершенно внезапно выясняется
[03:14.120 --> 03:21.840]  что оказывается пропустить пропустить машинку по дороге это оказывается денег стоит пускать
[03:21.840 --> 03:29.480]  машину там машинку в единицу времени причем на каждой дороге еще и разные стоимости но там по
[03:29.480 --> 03:35.200]  разному где-то есть платная дорога здесь как бы бесплатная ну так сказать там это там касать
[03:35.200 --> 03:41.360]  сутки там вот это все вот иногда да иногда бывает бесплатная дорога
[03:41.360 --> 03:59.640]  что нет пропускать способности есть а ну ой ну господи вот ну вот ну вот что еще бывает ну
[04:00.640 --> 04:09.400]  бывает вообще ситуация когда стоимость отрицательная ну типа да это это я дорога я новая красивая
[04:09.400 --> 04:21.640]  дорога я хочу по мне ездили я готова за это доплачивать нет ну или просто акция мало ли там
[04:21.640 --> 04:32.640]  вот неважно и вот у нас задачи хочется найти максимальный поток но при этом сделать так
[04:32.640 --> 04:44.240]  чтобы его стоимость была как можно меньше ну что такое стоимость потока ну да правда ну
[04:44.240 --> 04:48.960]  могут быть и другие задачи бывают задачи вида возьми поток величины к минимальной
[04:48.960 --> 04:56.280]  стоимости еще тоже вариант да ну соответственно стоимость потока ну давайте формально напишу это
[04:56.280 --> 05:03.840]  конечно там перебираем серебра и говорим что это f от е умножить на ц это обретите внимание
[05:03.840 --> 05:10.600]  до никакой остаточной сети я тут естественно не рисую хотя если я захочу нарисовать то как бы
[05:10.600 --> 05:16.560]  даже понятно какие там стоимости будут да то есть если там стоимость будет номер 3 то то есть
[05:16.560 --> 05:21.320]  я тут пропущу поток величины один какой-нибудь дата у меня появится обратное ребро пропускной
[05:21.320 --> 05:36.200]  способности 1 и стоимости минус 3 логично а а ой а ой да да да да да да да вот да да но
[05:36.200 --> 05:46.040]  она обычно косто называется да да да да да да да спасибо хорошо так это был кост но вот
[05:46.040 --> 05:53.040]  теперь как это сделать но на самом деле мы эту задачу сведем к немножко другой задачи вы
[05:53.040 --> 05:59.240]  будем искать задачи вы бы решать задачу о минимальной циркуляции да мы уже сталкивались
[05:59.320 --> 06:11.280]  таким словом поэтому дай вспомнишь тоже такое циркуляция да то есть циркуляция в сети там
[06:11.280 --> 06:34.600]  какой-нибудь это сложно в скобках нет это поток величины 0 на самом деле все вот то есть до сего
[06:34.600 --> 06:40.960]  момента как бы у нас поток величины 0 ассоциировался ситуации когда ничего нигде не едет
[06:40.960 --> 06:50.560]  вот ну в общем тогда действительно нам не принципиально была да потому что конечно
[06:50.560 --> 06:57.320]  мы знаем мы теоретически знаем что любой поток декомпозируется на пути и циклы все-таки то есть
[06:57.320 --> 07:01.400]  там вы вынуждены там для того чтобы поток был именно такой мы должны были сказать что какие-то
[07:01.400 --> 07:09.240]  машины тут по какому-то по какой-то там круговой траектории есть вот вот но обычно нам это было не
[07:09.240 --> 07:13.000]  надо потому что мы интересовались только максимальностью потока но в данном случае на
[07:13.000 --> 07:17.920]  оборот даже если поток величины 0 то у вас то есть из зрения стоимости бывает выгодно машинку
[07:17.920 --> 07:25.560]  пустить потому что оказывается что в данной сети конечно циклов нет вообще а так чисто
[07:25.560 --> 07:31.880]  теоретически в общем-то какой-нибудь там цикл цикл какой-нибудь там отрицательной стоимости
[07:31.880 --> 07:43.960]  в общем-то никто не он вот собственно никто не запрещал скажем так или даже вот так или вот так
[07:43.960 --> 07:51.960]  вот такие подлянки бывают тоже вот то есть может вот вполне себе оказаться что да что вы выгода
[07:51.960 --> 08:00.520]  чтобы машинка тут ездила и собственно там накручивала нам хорошую стоимость вот и вот
[08:00.520 --> 08:11.760]  теперь у нас задача найти циркуляцию величины 0 как же это сделать циркуляцию до циркуляции
[08:11.840 --> 08:25.280]  стоимости да да да да да все я уж совсем да и так как же это сделать ну во-первых
[08:25.280 --> 08:34.120]  начнем с маленькой приятной те но вот с маленького приятного утверждения так ну на всякий случай
[08:34.120 --> 08:42.880]  просто чисто для понимания то есть любую циркуляцию можно декомпозировать
[08:42.880 --> 09:05.560]  в не более или на не более модуле циклов так ну есть пока не думаю что тут это открыл как
[09:06.400 --> 09:18.000]  вот а по той же причине почему можно было декомпозировать на пути цикла то есть доказательства
[09:18.000 --> 09:22.920]  там будет звучать так давайте тогда вспомним предположим что у нас есть ребро по которым
[09:22.920 --> 09:29.800]  мы неожиданно что-то течет что такое циркуляция циркуляция такой поток в котором у каждой
[09:30.720 --> 09:38.120]  вот
[09:52.960 --> 09:58.720]  тут уже без вариантов мы зациклимся то есть вот мы нашли цикл ребер по каждому из которых что-то
[09:58.720 --> 10:07.600]  что-то не нулевой течет. Ну так давайте вычтем один, то есть запишем этот цикл в декомпозицию с величиной
[10:07.600 --> 10:15.600]  минимума из этих потоков и вычтем из него. Вычтем его. Одно из ребер обнулится. Ну хотя бы одно.
[10:15.600 --> 10:26.000]  Все. Повторяем эту операцию не более, чем 0 раз и обнулим все. Вот такая вот. То есть в общем-то
[10:26.000 --> 10:34.760]  декомпозиция на пути и циклы решалась почти так же. Вот. Да. Тут все просто.
[10:34.760 --> 10:50.920]  Чего? Не в данном случае нет. Когда мы говорим об этой декомпозиции, мы на обратные ребра не
[10:50.920 --> 10:57.240]  смотрим вообще. То есть мы смотрим только вот так сказать на физи. То есть как бы смотрим только
[10:57.240 --> 11:02.360]  на то, что у нас по факту есть. То есть напоминаю. То есть у нас остаточная сеть это какая-то там наша
[11:02.360 --> 11:12.160]  абстракция. То есть как бы условно какая-то там. То есть в реальной жизни обратных ребер не существует.
[11:12.160 --> 11:19.520]  Ну вот. И вот этих вот машинок, в которых вот эти вот дорог пропускная способность 0,
[11:19.520 --> 11:23.720]  но по ним течет минус 2. Поэтому вот это все-таки это как бы. То есть это как бы,
[11:23.720 --> 11:29.120]  собственно скажем так. Называется там больная фантазия, собственно, электропомотоанализа.
[11:29.120 --> 11:47.360]  Ну мы это уже обсуждали. Да. Вот. И так. Ну это утверждение в общем-то про стоимости ничего не
[11:47.360 --> 11:58.800]  говорит. Это я пока просто так, чтобы немножко включить интуицию на тему циркуляции. Вот.
[11:58.800 --> 12:02.880]  Правда, про стоимости здесь я вообще ничего не говорил. Хотя я мог бы, конечно, сказать,
[12:02.880 --> 12:11.320]  что стоимость, скажем так, суммарная стоимость каждого цикла, ну взвешенная на f, это, конечно,
[12:11.320 --> 12:17.000]  равна стоимости циркуляции, но это сложнее сформулировать, чем понять о чем речь.
[12:17.000 --> 12:27.200]  Вот. Но более полезной на самом деле бывает такая. Давайте так. Введем тут вот определение. Давайте
[12:27.200 --> 12:37.080]  введем, потому что тут, конечно, можно запутаться. Определение. То есть циркуляция. Давайте скажем,
[12:37.080 --> 12:57.640]  что циркуляция минимальна, если ее стоимость минимально возможна. Среди всех вообще циркуляции
[12:57.640 --> 13:17.080]  в этой сети. Среди, давайте так и запишем, всех циркуляций в сети. Вот так цирк в сети. Да.
[13:17.080 --> 13:35.800]  Вот. Вот. Значит, это у нас такое определение. И введем еще такое. Давайте такую терминологию
[13:35.800 --> 13:44.280]  введем. Циркуляция. Вот мне почему-то нравится слово считание. Локально оптимально. Локально
[13:44.280 --> 14:06.600]  минимально. Ну вот. Ну или еще иногда там бывает термин оптимально. Если вот на этот раз остаточной
[14:06.600 --> 14:32.400]  сети нет цикло отрицательной стоимости. На не нулевых. На не нулевых. На этот раз придется
[14:32.400 --> 14:52.280]  тоже подчеркнуть по пропускной способности. Вот. Ну логия. Ну вот. Ну откуда берется локальная
[14:52.280 --> 14:57.120]  оптимальность? Потому что давайте подумаем. Можно ли уменьшить вес циркуляции? Давайте посмотрим,
[14:58.000 --> 15:04.520]  давайте посмотрим. Допустим, мы там случайно нашли цикл отрицательной стоимости. Тогда,
[15:04.520 --> 15:11.520]  наверное, вдоль этого цикла можно пустить машинку. Ну или там даже несколько машинок. И
[15:11.520 --> 15:28.880]  также, тем самым уменьшить циркуляцию. Поэтому. Ну да. Но я предпочитаю называть локально минимально.
[15:28.880 --> 15:58.800]  Но не совсем. Ну и что? Ну в остаточной сети
[15:58.800 --> 16:07.240]  естественно добавляем. На то это определение остаточной сети не поменялось. Стоимость
[16:07.240 --> 16:16.280]  обратного ребра равда минус стоимости исходного ребра. Ну естественно. Ой,
[16:16.280 --> 16:33.040]  боже. Зачем? У нас уже есть полный порядок. Извините. Спокойствие. Так вот. Поэтому да,
[16:33.040 --> 16:42.840]  становится. Поэтому. Ну вот. Поэтому, конечно, простое утверждение. Можете сказать, что циркуляция
[16:42.840 --> 16:55.160]  минимальна. Ну точнее так, если циркуляция минимальна, то она локально минимальна.
[16:55.160 --> 17:14.760]  Вот. Вот. Казалось бы, это утверждение очень кажется даже недостойно вот этой
[17:14.760 --> 17:25.360]  вот буквы Т, которую я тут написал. Ну как-то думаю. Но как бы, мы только что уже проверили,
[17:25.360 --> 17:28.360]  что если она не локально минимальна, значит давайте по этому циклу отрицательной стоимости
[17:28.360 --> 17:35.720]  проведем машинку и станет меньше. Вот. Да. Но почему это отрицательная? Да. Терема заключается
[17:35.720 --> 17:45.320]  вот в этом. Да. Оказывается, да. То есть практически, на самом деле, это очень похоже на терему
[17:45.320 --> 17:51.440]  Форда Фолкерсона, на самом деле. Ну, пока и без разрезов, которые. То есть просто у нас поток
[17:51.440 --> 18:01.000]  максимальный тогда и только тогда, когда в остаточной сети нет улучшающего пути. Вот. Поэтому я,
[18:01.000 --> 18:05.120]  в общем-то, и была мысль, на самом деле, Минкоста обсудить сразу, потому что суть, на самом деле,
[18:05.120 --> 18:13.360]  та же. Да и доказательства очень похожи. Нет, доказательства не похожи. Но доказательства,
[18:13.360 --> 18:20.800]  на самом деле, сильно проще, чем кажется. Просто доказательства звучит так. Предположим,
[18:20.800 --> 18:34.760]  то есть жила была циркуляция F, не минимальная. Ну, допустим. Ну, как бы, как кому удобно. Можно
[18:34.760 --> 18:41.520]  вводить себе там от противного, можно не вводить. И, допустим, выяснилось, ну вот, есть циркуляция F
[18:41.520 --> 18:54.160]  штрих. И выяснилось, что стоимость F штриха строго меньше, чем стоимость от F. Тогда, смотрите,
[18:54.160 --> 19:02.040]  в остаточной сети относительно циркуляции F, тогда есть такая замечательная циркуляция,
[19:02.040 --> 19:12.600]  как F штрих минус F. Ну, типа, шо надо пустить, чтобы превратить F в штрих. Ну, где-то отменить,
[19:12.600 --> 19:19.760]  понятно, где-то включить. Логично, да? Ну, я сейчас в качестве упражнения ставлю формальные доказательства
[19:19.760 --> 19:26.560]  того, что это как бы корректная циркуляция. Что это циркуляция, она не нарушает какие-нибудь
[19:26.560 --> 19:30.280]  пропускные способности, там бла-бла-бла, но я думаю, это более-менее очевидно должно быть.
[19:30.280 --> 19:45.960]  Еще нет? Нет, ну скажем так, интуитивно понятно, что такое F штрих минус F по каждому ребру?
[19:45.960 --> 20:11.600]  Ну, но инварианты того, что сколько втекает, сколько вытекает, это так же.
[20:11.600 --> 20:33.240]  Так, неравенство на C-шку. Ну, тут смотрите. Нет, тут становится все очевидно, если мы распишем,
[20:33.240 --> 20:37.920]  а какие пропускные способности у нас тут в остаточной сети. Ну, потому что давайте,
[20:38.560 --> 20:44.560]  что в остаточной сети у нас, напоминаю, как бы есть у нас, то есть помним, что если у нас в сети G было
[20:44.560 --> 20:55.640]  какое-то ребро, в котором течет, допустим, там сколько там F из C, то у нас появляется,
[20:55.640 --> 21:02.280]  ну вот, то в GF у нас появляются два ребра. Появляется вот ребро с пропускной способностью C-F и
[21:02.760 --> 21:13.280]  обратный ребро с пропускной способностью F. Ну вот, теперь возникает вопрос, можно ли пустить F штрих
[21:13.280 --> 21:23.280]  минус F, то есть в этой вот сети. Да, мы знаем, что можно было пустить F штрих из C, допустим,
[21:23.280 --> 21:34.160]  вот по этому ребру можно было пустить F штрих из C. Вот, но тогда у нас получается, что F штрих
[21:34.160 --> 21:40.080]  меньше либо равно C, это по определению F штриха, но тогда автоматически из этого следует, что F
[21:40.080 --> 21:49.200]  штрих минус F меньше либо равно, чем C минус F, потому что трава зеленая. Я не умею объяснять,
[21:49.200 --> 22:00.120]  почему трава зеленая, да. Вот, но поэтому, ну вот, ну вот, ну вот так, но это означает,
[22:00.120 --> 22:07.040]  что по этому ребру все в порядке. Есть, конечно, еще фишка, что вот по этому ребру может еще что-то,
[22:07.040 --> 22:29.280]  соответственно, по. Не было, нет, но вот нет, фишка в том, что нет, здесь-то она, нет,
[22:29.280 --> 22:35.320]  почему? Нет, просто нет, вот у этой циркуляции, как бы здесь по этому ребру, что-то потечет с целью
[22:35.320 --> 22:44.920]  отмены. Вот, причем более того, что-то потечет, но это что-то как бы F превосходить не будет.
[22:44.920 --> 22:58.160]  Ну вот, ну давайте так, там будет два варианта, если F штрих больше, чем F, то как бы этот поток
[22:58.160 --> 23:22.720]  будет здесь, а здесь отменяться ничего не будет. Нет,
[23:23.540 --> 23:43.400]  нет. Нет, но на самом деле... Нет, у нас отрицательный поток бывает, ну опять, бывает как минимум,
[23:43.400 --> 23:48.380]  потому что у нас есть обратные ребра, и когда у нас появляется обратный, то есть, как бы виртуально,
[23:48.380 --> 23:52.100]  мы все равно можем тогда хорошо вот мыслить терминок что тут обратные ребра типа есть просто
[23:52.100 --> 23:58.940]  метод пропускная способность 0 а течет по нему минус f допустим да вот остаток сеть мы вот ставим
[23:58.940 --> 24:05.140]  но отставим так и в этой сети остается только там про но здесь течет там f минус f штрих здесь
[24:05.140 --> 24:10.700]  мы как раз пользуемся тем что и в штрих больше нуля но больше либо равно но вот поэтому как бы
[24:10.700 --> 24:19.780]  то что здесь течет получается остается все в порядке ну ну вот на таких вот ребра
[24:19.780 --> 24:33.580]  нет но это просто нет скорее способ мышление но там нету можно бы нет ну как бы нету может нет
[24:33.580 --> 24:37.980]  просто тут фишка такая просто когда мы тут вводим поток но то есть когда мы вводим поток
[24:37.980 --> 24:42.060]  в остаточной сети мы говорим что два давайте во-первых есть у нас тут по вот этим ребрам и туда
[24:42.060 --> 24:47.180]  и туда течет поток давайте там то что вообще отменим и тогда у нас либо поток сюда идет то
[24:47.180 --> 24:53.740]  есть это дополнение к этому либо идет поток сюда это типа вот отменяем вот то есть как бы мы
[24:53.740 --> 24:58.340]  хотим чтобы поэтому ребра течет текло там минус 2 единицы потока для этого мы вводим здесь 2 единицы
[24:58.340 --> 25:06.460]  поток ну вот ну со всеми определениями тут все сходится вот так шокаря но вот но это скажем
[25:06.460 --> 25:11.860]  так это скорее так называть это что-то формалистическая но та суть одна то есть как бы в 4 минус f это
[25:11.860 --> 25:18.260]  то что надо пустить чтобы текло у нас в сети не f а f штрих но теперь смотрите какая ситуация и
[25:18.260 --> 25:29.020]  очевидно причем на костот f штрих минус f но он очевидно равен костот f штрих минус костот f
[25:29.020 --> 25:39.780]  и автоматически это означает что это меньше нуля то есть вывод у нас в нашей сети есть существует
[25:39.780 --> 25:49.140]  циркуляция отрицательной стоимости да казалось бы например из этого казалось бы еще не следует что
[25:49.140 --> 25:56.100]  есть цикл отрицательной стоимости ну пока мир на уровне совсем очевидно пару предложений в
[25:56.100 --> 26:03.100]  доказательства добавить придется да а пара предложений звуки нет а пара предложений будет
[26:03.100 --> 26:11.020]  такая ну хорошо давайте возьмем эту отрицательную циркуляцию и декомпозируем ее на циклы как-то есть
[26:11.020 --> 26:21.020]  же подозрение что хотя бы один из этих циклов окажется отрицательным вот да есть наверное где-то
[26:21.020 --> 26:24.940]  там такое утверждение не знаю в каком правда не знаю почему-то в школьной программе нет такого
[26:24.940 --> 26:31.980]  утверждения что если у вас есть там если у вас есть сумма там конечного числа величин и она
[26:31.980 --> 26:48.180]  отрицательна то одна из этих величин отрицательно ну там аккуратно надо да ну да то есть да нет
[26:48.180 --> 26:54.460]  логично да что если она да если да ладно да есть сумок да если сумма сумма какого-то ряда
[26:54.460 --> 27:01.180]  стремится к чему-то отрицательному значит наверное хотя бы один элемент этого ряда отрицательный да
[27:01.180 --> 27:12.740]  да да даже даже в принципе и так да действительно вот как-то но так что вот такое ну в общем-то
[27:12.740 --> 27:26.620]  ну так то очень все доказательства кончено все мы проговариваем мы уже это проговаривали то что
[27:27.180 --> 27:31.740]  если лока минимально то то есть мы уже там перед формулевкой церемы проговаривали
[27:31.740 --> 27:40.020]  поэтому там все нормально ну вот так что мы все сделали мне все спокойно вот ну и
[27:40.020 --> 27:46.020]  теперь собственно вот нет это в общем-то и порождает алгоритм на самом деле то есть алгоритм
[27:46.020 --> 27:52.300]  вида а как собственно теперь это искать но правда конечно приятно не очень
[27:52.300 --> 28:01.340]  нет упаре скажет а пока будем искать циркуляцию честно скажу дай это не самый лучший алгоритм
[28:01.340 --> 28:06.620]  который вообще в мире существует да забегай вперед в мире в мире существует алгоритм
[28:06.620 --> 28:13.020]  который зависит только от ве вот а мы сейчас будем зависеть от пропускной способности боль того
[28:13.020 --> 28:18.940]  будем еще и жестко пользоваться тем что они целые ну ладно жесткость конечно относительно но тем
[28:18.940 --> 28:28.980]  не менее так смотреть потому что идея будет такая вот потому что что мы будем алгоритм будет
[28:28.980 --> 28:37.140]  устроен так мы изначально удалим из графа вообще все ребра а потом думаю будем добавлять ребра по
[28:37.140 --> 28:42.380]  одному прямо по одной пропускной по единичной пропускной способности и пытаться там что-то
[28:42.380 --> 28:50.380]  там модифицировать так чтобы в остаточной сети цикла отрицательной стоимости не было вот теперь
[28:50.380 --> 29:00.260]  если это как мы будем проверять что цикла отрицательной стоимости нету вот но вот вот это
[29:00.260 --> 29:05.060]  называется еще один вот то есть еще один момент почему это надо было делать вот собственно еще
[29:05.060 --> 29:11.620]  тогда не сейчас вот жалко что но вот пуша пуша были эти золотые времена когда мы с вами обсуждали
[29:11.620 --> 29:39.220]  потенциалы джонсона ну перейду переставия да ну это уже другое но как бы да ну как бы да ну как бы они
[29:39.220 --> 29:46.460]  сразу концептуально как-то снимали сначала эпизод 5 там потом ну почему нету просто там типа
[29:46.460 --> 29:51.220]  нет видимо нет изначально не просто сняли эпизод 5 типа шоу типа мы сразу вас окунаем шоу типа
[29:51.220 --> 30:13.300]  война уже идет они просто там они до 4 ну вот ну вот ну вот ну вот ну тем не менее
[30:13.300 --> 30:22.660]  давайте вспоминать потому что как бы помним мы значит потому что мы введем соответственно потенциал
[30:22.660 --> 30:32.420]  то есть шутка это сейчас потенциал это просто какая-то функция на вершинах просто вот какое-то
[30:32.420 --> 30:40.780]  мистическое число и мы знаем что приведенная стоимость у нас будет то есть кост с индексом
[30:40.940 --> 30:49.340]  допустим е она равна чему она она просто равна обычной стоимости ребра только плюс потенциал в
[30:49.340 --> 31:01.180]  начале минус потенциал в конце да приятность заключается в том давайте сразу сфорулирую
[31:01.180 --> 31:14.860]  утверждение что для любого цикла там для любого цикла как цикл-то обозначить ро верно что
[31:14.860 --> 31:25.300]  приведенная стоимость этого цикла равна обычной стоимости цикла так но это вроде должно быть
[31:25.300 --> 31:32.620]  очевидно да вот ну то есть не хочется просто второй раз и шлёп шлёп и писать вот думаю не
[31:32.620 --> 31:41.740]  так уже понятно вот чему это нас приводит так ну приводит нас к это следующему но давайте
[31:41.740 --> 31:51.180]  сразу пишем на что определение потом вот что у нас наш потенциал п потенциал п не отрицательный
[31:51.180 --> 31:57.340]  там если для любого е
[31:57.340 --> 32:17.020]  ну да просто а ну ладно ладно лиси но для сети же будем говорить на счет да хотя но тут просто
[32:17.020 --> 32:23.740]  важный момент да приведенная стоимость оказывается больше либо равна нуля но просто
[32:23.740 --> 32:28.180]  единственное что нам конечно будет требоваться чтобы потенциал был не отрицательный в остаточной
[32:28.180 --> 32:38.860]  сети вот потому но то есть идея у нас собственно отсюда и будет то есть мы будем то есть нам это
[32:38.860 --> 32:44.380]  очень удобно да вот раньше мы пользовались этим потенциалом чтобы искать кратчайший путь не
[32:44.380 --> 32:53.580]  фордом белман а дэкстрей ну дэкстрату побыстрее работает вот но вот здесь мы попытаемся делать
[32:53.580 --> 32:59.780]  здесь вот мы попытаемся делать пример то же самое мы будем следить за тем чтобы все не нулевые
[32:59.780 --> 33:04.660]  ребра в остаточной сети были не отрицательные относительно нашего потенциала в случае чего
[33:04.660 --> 33:16.900]  потенциал под шо ма ни понятно да вот как же мы это будем делать ну как я сказал будем
[33:16.900 --> 33:22.700]  добавлять ребра по одному и поддерживать в каждом момент времени у нас есть уже какая-то циркуляция
[33:22.700 --> 33:28.140]  какой-то потенциал и нам гарантируется что в остаточной сети все не нулевые ребра имеют
[33:28.140 --> 33:42.220]  не отрицательную стоя приведенную стоимость это вариант такой это я тогда вот так вправывается
[33:42.220 --> 33:52.820]  вот спрашивается что дело значит если появилось новое ребро вот прит изначально да скажем ну
[33:52.820 --> 33:56.780]  поболе изначально вообще кайф да потому что изначально у вас просто куча вершин не одного
[33:56.780 --> 34:02.700]  ребра вводи любой потенциал и радуйся а теперь значит приходит новое ребро прописной способности
[34:02.700 --> 34:13.100]  один и какой-то стоимость так но давайте сразу проверим если это ребро относительно уже имеющегося
[34:13.100 --> 34:20.940]  потенциала не отрицательно то в общем-то делать ничего не надо мы уже победили правда так кстати
[34:20.940 --> 34:24.700]  обратите внимание маленький приятный момент в каждый момент времени мы поддерживаем минимальную
[34:24.700 --> 34:36.540]  циркуляцию нет пока не надо если если приведенная стоимость относить уже имеющегося потенциала
[34:36.540 --> 34:47.060]  сразу оказался не отрицательной то мы победили то есть уже ничего делать не надо ну ладно давайте
[34:47.060 --> 34:54.300]  нет но все проблема ну утверждение ну утверждение такое что если если есть не отрицательный
[34:54.300 --> 35:02.620]  потенциал значит циклов отрицательной стоимости нету ну все поэтому как бы вот поэтому если вы
[35:02.620 --> 35:08.900]  вот то есть у нас да да у нас у нас в варианте прописано что как бы у всех существующих там
[35:08.900 --> 35:14.500]  ребер пока мне не нулевых там приведенная стоимость не отрицательна если вы добавили
[35:14.500 --> 35:19.780]  ребро и у него приведенность тоже оказалась не отрицательная ну значит поздравляю циклов
[35:19.780 --> 35:27.900]  отрицательной стоимости не появилось но вот когда парадокс том что нет но знания
[35:27.900 --> 35:36.740]  ну точнее так алгоритм может показаться не тривиальным в принципе там поиск там потенциала
[35:36.740 --> 35:41.260]  джонсона поиска тоже считается не следом одним из не тривиальных алгоритмов там по всем даже может
[35:41.780 --> 35:46.740]  программируем и его даже редко использует обычно почему-то но на самом деле тут просто если
[35:46.740 --> 35:51.600]  вы математически просто пропишите что такое потенциалы когда вы каким образом им пользоваетесь то
[35:51.600 --> 35:55.280]  на самом деле все сложного нет то есть это просто вот просто это это называется просто включите
[35:55.280 --> 36:02.060]  формального математика это не все программисты любят его включать но что поделать то есть у нас
[36:02.060 --> 36:07.020]  к сожалению нет этого потом по принципу это электрической студии там это когда как там говорят
[36:07.020 --> 36:10.900]  этого вот вы теперь просто до вот включился будильник вы простоли си можете делать утренняю
[36:10.900 --> 36:16.500]  гимнастику многие люди не любят делать утреннюю гимнастику наша фирма это учла наш электрический
[36:16.500 --> 36:23.740]  пояс мастирует вас самым добросовестным образом да на полном серьезе реклама 35 года в чем очная
[36:23.740 --> 36:34.140]  они поэтому вашему телевизору да ну да ну потому что нет это просто это опять же ильфы петров
[36:34.140 --> 36:39.640]  одноэтажная америка то есть они там они попали в электрический там были там просто попали в так
[36:39.640 --> 36:45.680]  называемый электрический домик мистер рипли но там мистер рипли это в общем видимо человек
[36:45.680 --> 36:51.440]  отвечающий за рекламу собственно там в джейл электрик ну вот и там просто вот реклама типа вот
[36:51.440 --> 37:00.560]  там о какая у нас радость это отдельная песня там конечно вот так вот что делать если у нас
[37:00.560 --> 37:08.000]  все-таки стоимость оказался отрицательна ну значит надо то ли поток что-то пустить то ли
[37:08.000 --> 37:18.160]  потенциал перепилить начнем с того что перепилим потенциал как мы это сделаем значит если вот это
[37:18.160 --> 37:31.040]  ребро в то давайте найдем значит смотрите д от x это будет кратчайший расстояние
[37:31.040 --> 37:51.400]  ну по стоимости ам имеется ввиду по косто от именно вершины в до вершины x в значит остаточной сети
[37:51.400 --> 38:03.080]  вот так что-то все прописываю но ладно поня нулевым ребрам
[38:03.080 --> 38:19.000]  вот как это да как-то д от x найти ну элементарно для этого мы просто найдем
[38:19.000 --> 38:30.360]  ведем понятие д с индексом п это абсолютно то же самое только приведенное естественно расстояние
[38:30.360 --> 38:44.520]  нет д с индексом п вот ну что делать потенциал п называется да можно было его вести конечно
[38:45.520 --> 38:55.240]  но но я думаю себе тут начал рисовать твердые знаки я думаю там понятие бы не стал вот так вот
[38:55.240 --> 39:02.080]  значит ну и в принципе да если мы ну такое с помощью кунь д экстрима найдем да но можно
[39:02.080 --> 39:07.840]  принять пенни с помощью д экстрима что форда был потому что что приятно потому что нам гарантировал
[39:07.840 --> 39:12.960]  потенциал потенциалом гарантировал что по крайней мере без вот этого ребра отрицайков отрицательной
[39:12.960 --> 39:35.120]  стоимости не значит корчейшие пути определены можно их искать так или иначе да да ну скажем так
[39:35.120 --> 39:42.440]  у меня просто в голове нет понимания а как это еще можно понять сказано выше контексте да имеется
[39:42.440 --> 39:48.480]  в виду конечно что имеется только ребра которые мы добавили да да более того мы не учитываем это
[39:48.480 --> 39:54.080]  ребро да мы знаем что без этого ребра циклов отрицательной стоимости нет а с этим ребром может
[39:54.080 --> 40:00.280]  и есть так вот будем искать так в чем это можно в алгоритме так себе и прописать давайте найдем
[40:00.280 --> 40:06.680]  прямо расстояние приведенное потому что вот д экстрим можно найти да а потом так жественно
[40:06.680 --> 40:20.720]  заявим что что такое д от икс это банально d p от икс но д с индексом п хорошо д пт вот
[40:20.720 --> 40:31.600]  так только плюс п от в минус п от икса бреда то есть п от в вполне ну п тв вполне может быть не
[40:31.960 --> 40:39.320]  потому что мы в рандомное место ребра вставляли да вот то есть вот просто то есть
[40:39.320 --> 40:45.480]  получается надо то есть запустили д экстра потом просто пробежались фориком прописали вот это то
[40:45.480 --> 41:01.200]  есть мы честное расстояние так вот вводим новый потенциал п штрих от икс присвоить соответственно
[41:01.200 --> 41:12.480]  вот этот вот д от икс чем приятен такой потенциал он приятен тем что для всех ребер кроме вот
[41:12.480 --> 41:21.760]  этого он все еще не отрицательный почему так ну потому что для любого ребра какого-нибудь
[41:21.760 --> 41:33.520]  икс игрок и там какой-нибудь там стоимости кост но очевидно что п штрих от икс плюс кост минус
[41:33.520 --> 41:38.280]  п штрих от игрок должно быть больше либо равно нуля почему потому что п штрих от игрок это
[41:38.280 --> 41:45.840]  кратчайшее расстояние до игрока а п штрих от икс плюс кост это длина какого-то пути то есть
[41:45.840 --> 41:50.920]  длина кратчайшего пути длина какого-то пути вычли возрадовались ну в общем как бы заклинание мы
[41:50.920 --> 42:12.640]  уже произносили вот так ну казалось бы зачем мы-то да да да перепутали ой да мы мы все перепутали
[42:12.780 --> 42:26.520]  да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да
[42:26.520 --> 42:32.520]  да да да да да да да да ну да кочмана скажу Austrian
[42:32.520 --> 42:44.680]  Кошманов сказал, что и такую бессмысль такую бессмыслительную
[42:44.680 --> 42:47.480]  чепуху не может управлять космическим кораблем мне
[42:47.480 --> 42:48.480]  нехорошо.
[42:48.480 --> 42:53.120]  Да тут вся невесомость моя, хочу и заберу управление,
[42:53.120 --> 42:54.760]  ну и забирай, а я отключу управление.
[42:55.760 --> 43:00.760]  Дай такое внимание, начинаем потение на Луну.
[43:06.760 --> 43:07.760]  Вот.
[43:08.760 --> 43:09.760]  Чего?
[43:11.760 --> 43:12.760]  Да.
[43:12.760 --> 43:14.760]  Ой, у сын Дука много чего есть.
[43:16.760 --> 43:17.760]  Ой, это да.
[43:18.760 --> 43:21.760]  Ой, ну если мы сейчас сын Дука, то чего бы обсуждать?
[43:22.760 --> 43:26.760]  Нет, ну нет, сначала будет нормально, сначала будем читать стихи,
[43:26.760 --> 43:29.760]  потом будем вспоминать про сначала Незайка на Луне,
[43:29.760 --> 43:34.760]  потом про Спокойной ночи малыши и шнура, что там потом дальше,
[43:34.760 --> 43:37.760]  а потом про поле чудес, естественно, да, да, да.
[43:37.760 --> 43:40.760]  Ладно, это долгая история будет.
[43:40.760 --> 43:46.760]  Так вот, Жил был с потенциалом, заказал то, что мы сделали,
[43:46.760 --> 43:49.760]  у нас был неотрицательный потенциал, мы заменили его
[43:49.760 --> 43:52.760]  на другой неотрицательный потенциал.
[43:53.760 --> 43:55.760]  И то с проблемами, кстати.
[43:56.760 --> 44:00.760]  Потому что вытекает вопрос, а что делать, если до каких-то,
[44:00.760 --> 44:04.760]  от вершины В нельзя дойти до вершины Х, по имеющимся ребрам.
[44:04.760 --> 44:06.760]  А такое бывает.
[44:07.760 --> 44:09.760]  Бесконечный потенциал?
[44:10.760 --> 44:12.760]  Нет, ну этого не хотелось бы.
[44:12.760 --> 44:16.760]  А то вот приходит тут ребро, а тут бесконечность, бесконечность.
[44:19.760 --> 44:22.760]  Ну не совсем так, конечно.
[44:23.760 --> 44:26.760]  Да, есть одна маленькая подлянка.
[44:26.760 --> 44:30.760]  Вы, конечно, дойдете от вершины В куда-нибудь, вот сюда,
[44:30.760 --> 44:35.760]  но вот и введете новые потенциалы, но у вас тут будут вот такие ребра.
[44:35.760 --> 44:38.760]  И если вы тут введете слишком большой потенциал,
[44:38.760 --> 44:41.760]  то вот это ребро может стать отрицательным.
[44:42.760 --> 44:46.760]  Да, то есть заметим, да, идея, конечно.
[44:46.760 --> 44:50.760]  Идея понятна, что нужно просто взять все вот эти вершины
[44:50.760 --> 44:54.760]  и увеличить или уменьшить их потенциалы на одну и ту же величину,
[44:54.760 --> 44:57.760]  чтобы все эти ребра стали не отрицательными.
[44:59.760 --> 45:01.760]  Ну как угодно.
[45:01.760 --> 45:05.760]  Я бы сказал так, переберем все ребра, то есть переберем вот эти ребра,
[45:05.760 --> 45:07.760]  найдем самые минимальные.
[45:07.760 --> 45:09.760]  Если оно не отрицательное, то все нормально.
[45:09.760 --> 45:12.760]  Если оно отрицательное, то равно, скажем, минус Вася,
[45:12.760 --> 45:15.760]  то значит прибавим Вася ко всем вершинам.
[45:15.760 --> 45:18.760]  Да, то есть понятно, конечно, вещь простая,
[45:18.760 --> 45:22.760]  но просто надо обратить внимание, что об этом надо задуматься.
[45:22.760 --> 45:24.760]  Это генту линукс.
[45:24.760 --> 45:26.760]  Это надо сделать.
[45:27.760 --> 45:29.760]  Так вот, хорошо.
[45:29.760 --> 45:31.760]  Ладно, хорошо справились.
[45:31.760 --> 45:35.760]  Но все равно мы просто ввели еще другой не отрицательный потенциал.
[45:35.760 --> 45:38.760]  Зачем мы это сделали?
[45:39.760 --> 45:41.760]  А сделали мы это вот зачем?
[45:42.760 --> 45:46.760]  Найдем, значит, просто как понять вообще через это ребро
[45:46.760 --> 45:49.760]  проходит цикл отрицательной стоимости или нет.
[45:51.760 --> 45:55.760]  Надо, наверное, найти кратчайший путь от В до У.
[45:57.760 --> 45:59.760]  Ну, который был раньше.
[45:59.760 --> 46:03.760]  Да, мы его даже нашли, он у нас теперь равен до У.
[46:03.760 --> 46:05.760]  То есть он, конечно, и есть.
[46:06.760 --> 46:08.760]  Спрашивается.
[46:08.760 --> 46:11.760]  Ну вот, теперь спрашивается.
[46:11.760 --> 46:14.760]  Если у нас относительно этого потенциала П штрих
[46:14.760 --> 46:17.760]  у нас теперь вот это ребро стало адекватным,
[46:17.760 --> 46:20.760]  то в принципе все больше еще делать не надо.
[46:20.760 --> 46:23.760]  Но что делать, если это ребро относительно нашего потенциала
[46:23.760 --> 46:25.760]  стало отрицательным?
[46:25.760 --> 46:27.760]  Тогда идея такая.
[46:28.760 --> 46:31.760]  А давайте-ка возьмем вот этот вот цикл,
[46:31.760 --> 46:33.760]  кратчайший путь и это ребро,
[46:33.760 --> 46:36.760]  и пропустим по нему поток.
[46:38.760 --> 46:40.760]  Упс.
[46:43.760 --> 46:46.760]  Ну, смотрите, что произойдет.
[46:47.760 --> 46:51.760]  Ну, заметим, что вот это ребро убьется,
[46:51.760 --> 46:55.760]  а вот это ребро с положительной уже приведенной стоимостью,
[46:55.760 --> 46:57.760]  оно появится.
[46:58.760 --> 47:02.760]  Но проблема в том, что, казалось бы, появятся еще вот эти все ребра.
[47:02.760 --> 47:06.760]  И у них тоже, раз у этих приведенная стоимость была положительная,
[47:06.760 --> 47:09.760]  могла быть положительная, значит и у этих ребер
[47:09.760 --> 47:12.760]  приведенная стоимость должна стать отрицательной.
[47:13.760 --> 47:15.760]  Что же делать?
[47:22.760 --> 47:25.760]  Вот картинка ответа тоже у нас где-то была.
[47:26.760 --> 47:28.760]  Наверное.
[47:32.760 --> 47:35.760]  Но проблема в следующем, что когда вы тут пустили поток,
[47:35.760 --> 47:39.760]  то вот у вас были, допустим, положительные ребра какие-то,
[47:39.760 --> 47:41.760]  относительно приведенной стоимости,
[47:41.760 --> 47:43.760]  вместо них появились обратные,
[47:43.760 --> 47:45.760]  но не вместо, а просто появились обратные.
[47:45.760 --> 47:48.760]  И тогда у этих обратных отрицательная приведенная стоимость.
[47:48.760 --> 47:50.760]  Как оно вот?
[47:50.760 --> 47:53.760]  То есть это убили, а тут как бы...
[48:00.760 --> 48:04.760]  А вот тут мы жестко пользуемся тем, что у нас сеть целочисленная.
[48:06.760 --> 48:11.760]  Сеть целочисленная, и мы ребра добавляем по одной пропускной способности.
[48:14.760 --> 48:18.760]  Да, вот ровно в этом месте мы этим жестко пользуемся.
[48:19.760 --> 48:21.760]  Вот.
[48:33.760 --> 48:36.760]  Ну, идейно возникнет.
[48:36.760 --> 48:38.760]  По факту нет.
[48:41.760 --> 48:43.760]  Да, потому что утверждение такое.
[48:43.760 --> 48:46.760]  Зачем мы ввели этот новый потенциал?
[48:46.760 --> 48:50.760]  А ввели мы его затем, чтобы относительно этого потенциала у всех тех ребр,
[48:50.760 --> 48:52.760]  приведенная стоимость была ноль.
[48:57.760 --> 48:59.760]  Нет, ну действительно, смотрите.
[48:59.760 --> 49:01.760]  Рассмотрим x и y.
[49:02.760 --> 49:04.760]  Так, у него приведенная стоимость вот тут.
[49:04.760 --> 49:06.760]  PS штрих от x
[49:06.760 --> 49:08.760]  плюс кост
[49:08.760 --> 49:10.760]  минус PS штрих от y.
[49:11.760 --> 49:14.760]  Только фишка в том, что на этот раз, да, это больше либо равно нуля, да-да-да,
[49:14.760 --> 49:16.760]  мы знаем, это кратчайший путь, это какой-то путь.
[49:16.760 --> 49:20.760]  Но теперь заметим, что это не какой-то путь, а тот же самый кратчайший.
[49:23.760 --> 49:25.760]  Поэтому получается, что это равно нулю.
[49:25.760 --> 49:29.760]  Может быть, ровно за этим мы этот потенциал вообще ввели,
[49:29.760 --> 49:31.760]  чтобы была вот такая фишка.
[49:34.760 --> 49:36.760]  Так что получается теперь.
[49:36.760 --> 49:39.760]  То есть получается, вот мы нашли такой путь, и, соответственно, если нам надо,
[49:39.760 --> 49:42.760]  то, соответственно, пропускаем цикл.
[49:42.760 --> 49:46.760]  Тогда новых отрицательных ребер не появилось, а старое убилось.
[49:49.760 --> 49:52.760]  Собственно, ура, процесс модификации завершен.
[49:57.760 --> 50:02.760]  Так что в науке в этом месте возникает словосочетание метод Клейна.
[50:05.760 --> 50:11.760]  Не знаю, вот этого товарища с экзотической бутылкой или еще там какой-то.
[50:11.760 --> 50:13.760]  Соответственно.
[50:13.760 --> 50:16.760]  Ладно, кто не знает, узнаете на топологии.
[50:18.760 --> 50:20.760]  Нет, это не метод бутылки.
[50:23.760 --> 50:29.760]  Если человек изобрел бутылку, это не значит, что бутылка изобрела все остальное.
[50:35.760 --> 50:37.760]  Нормальный алгоритм.
[50:37.760 --> 50:40.760]  Слушай, «Форт Волкерсон» с этого начинали.
[50:41.760 --> 50:43.760]  Ну ладно, не с этого.
[50:43.760 --> 50:46.760]  Но то есть на самом деле суть очень похожая.
[50:46.760 --> 50:49.760]  То есть да, он там работает, он, конечно, за какую-то там…
[50:56.760 --> 50:58.760]  Нет, ну смотрите.
[51:00.760 --> 51:02.760]  Нет, ну смотрите.
[51:02.760 --> 51:06.760]  Да, но тут метод Клейн, он там работает за какую-то там асимптотику мерзкую.
[51:06.760 --> 51:09.760]  Да, сумма пропустой способности умножить на дэйкстру.
[51:09.760 --> 51:11.760]  Да, по сути он работает.
[51:11.760 --> 51:14.760]  Ну и дэйкстру, ну за сколько вы там напишете.
[51:14.760 --> 51:17.760]  Так, ну как бы мы с вами на курсе, продвинутом курсе алгоритмов,
[51:17.760 --> 51:20.760]  поэтому дэйкстру мы пишем за E плюс В лог В.
[51:21.760 --> 51:22.760]  Не, я знаю, да-да-да.
[51:22.760 --> 51:26.760]  Ну да, в ДЗ вообще нет заданий, да, почему-то в ДЗ нет заданий на дэйкстру.
[51:27.760 --> 51:29.760]  Это дэйкстру с кучей фибоначи.
[51:30.760 --> 51:37.760]  Ну почему-то когда-нибудь, когда E и В будут достаточно большими, она станет круче.
[51:40.760 --> 51:42.760]  Нет, это понятно, да.
[51:45.760 --> 51:49.760]  Да, поэтому это мы домножаем на сумму в сердцешек там.
[51:51.760 --> 51:52.760]  Вот и радуемся.
[51:54.760 --> 51:57.760]  Так что в принципе вот такую циркуляцию можно найти теперь.
[51:58.760 --> 51:59.760]  Теперь надо найти мент-кост.
[51:59.760 --> 52:00.760]  Как найти мент-кост?
[52:00.760 --> 52:02.760]  Ну, что?
[52:03.760 --> 52:05.760]  Ой, я еще и скобку не закрыл, господи.
[52:06.760 --> 52:07.760]  Мы никогда не найдем мент-кост.
[52:09.760 --> 52:11.760]  Так, еще и скобку не закрыли.
[52:13.760 --> 52:17.760]  Значит, смотрите, как формулируется обычно мент-кост.
[52:17.760 --> 52:19.760]  Ну обычно задача мент-коста формулируется так.
[52:19.760 --> 52:20.760]  Дона сеть.
[52:20.760 --> 52:23.760]  И скорее всего все ребра в ней не отрицательны.
[52:24.760 --> 52:29.760]  Да, а вы что, видели задачи, в которые было что-то другое?
[52:31.760 --> 52:32.760]  А, да.
[52:33.760 --> 52:34.760]  Да, господи.
[52:37.760 --> 52:38.760]  Да?
[52:38.760 --> 52:42.760]  Да нет, на самом деле не исправит особо.
[52:42.760 --> 52:44.760]  Просто подавляйте большинство задач обычно.
[52:44.760 --> 52:50.760]  Ну скажем так, ладно, давайте можем потребовать, можно сделать там более слабые условия.
[52:50.760 --> 52:53.760]  Как бы нет циклов отрицательной стоимости.
[52:55.760 --> 52:59.760]  Я еще не помню ни одной задачи, в которой надо было реально циклы отрицательной стоимости искать.
[53:00.760 --> 53:03.760]  Ну, по крайней мере, чтобы в исходной сети они были.
[53:03.760 --> 53:08.760]  Но обычно там, по-моему, даже отрицательных стоимости как-то колышки нет.
[53:11.760 --> 53:15.760]  Теперь вот, представим себе, дана сеть.
[53:16.760 --> 53:18.760]  То есть дана какая-нибудь сеть.
[53:18.760 --> 53:20.760]  На этот раз обычная сеть.
[53:28.760 --> 53:29.760]  Какая-нибудь вот такая.
[53:30.760 --> 53:31.760]  В ней какие-то есть выпустые способности.
[53:32.760 --> 53:41.760]  И допустим, в ней, как бы там, давайте сейчас, для простоты давайте скажем, гарантируется, что кост от всех е больше либо равен нуля.
[53:42.760 --> 53:46.760]  И нам нужно найти максимальный поток минимальной стоимости.
[53:47.760 --> 53:51.760]  Ну, в науке как бы это называется обычно mean-coast-max-flow.
[53:57.760 --> 54:01.760]  То есть максимальный поток, стоимость у нее должна быть минимальной возможностью для всех максимальных поток.
[54:03.760 --> 54:06.760]  Как эту задачу свести к циркуляции?
[54:17.760 --> 54:20.760]  В остаточной сети максимального потока.
[54:23.760 --> 54:26.760]  Нет, как бы, да, самое смешное, что туда так тоже можно.
[54:27.760 --> 54:29.760]  Давайте найдем просто какой-нибудь максимальный поток.
[54:30.760 --> 54:33.760]  Но заметим, что любые два максимальных потока отличаются на циркуляцию.
[54:34.760 --> 54:37.760]  Поэтому давайте в остаточной сети от максимального потока найдем минимальную циркуляцию.
[54:38.760 --> 54:39.760]  Да, так можно.
[54:43.760 --> 54:45.760]  Но не самым удобным способом.
[54:47.760 --> 54:56.760]  Потому что как бы потом, но вот, потому что на самом деле можно, но вот, просто можно сделать это сам, можно с самого начала на самом деле свести задачу просто,
[54:57.760 --> 55:01.760]  просто чуть-чуть модифицировать сеть и в ней найти соответственно уже циркуляцию.
[55:02.760 --> 55:06.760]  Смотрите, идея такая, то есть на самом деле будет идея следующая.
[55:07.760 --> 55:09.760]  Мы добавим еще одно ребро из TWS.
[55:10.760 --> 55:12.760]  Ну что такое поток?
[55:13.760 --> 55:18.760]  Это когда у нас вода из ниоткуда приходит в С и уходит в никуда в Т.
[55:20.760 --> 55:26.760]  Но при этом и мистическим образом из ниоткуда приходит столько же воды, сколько потом уходит в никуда.
[55:27.760 --> 55:31.760]  Так, ну давайте эти ниоткуда и никуда соединим ребром.
[55:31.760 --> 55:45.760]  Ну получается, да, то есть там действительно бесконечные пропускной способности и какой-нибудь полуминус бесконечной стоимости.
[55:50.760 --> 55:52.760]  Это не стоимость, это пропускная способность.
[55:52.760 --> 56:03.760]  Но для того, чтобы нам было, чтобы нам было там допустим там фантастически выгодно действительно это пропускать.
[56:04.760 --> 56:09.760]  Чтобы какой, ну вот, ну то есть, ну как бы еще, ну вот.
[56:10.760 --> 56:21.760]  Ну то есть надо сделать так, чтобы как бы, если у вас есть циркуляция, где здесь течет 5, есть циркуляция, где здесь течет 7, то вторая циркуляция была заведомо лучше.
[56:23.760 --> 56:29.760]  Вот, то есть кост там равен тоже, я так в кавычках напишу, минус бесконечность.
[56:30.760 --> 56:35.760]  Почему в кавычках? Ну, минус бесконечность нам не подойдет, нам должно быть просто достаточно большое по модулю отрицательное число.
[56:36.760 --> 56:45.760]  Но там, да, обычно там достаточно что-нибудь минус 3 на модуль С, на модуль там кост на модуль Е там подойдет.
[56:48.760 --> 56:49.760]  Ну что?
[56:52.760 --> 56:59.760]  Нет, ну три, ну просто так, ну два, потому что там у каждого ребра, потому что ребер у нас всего два Е там, условно, да.
[57:00.760 --> 57:06.760]  Поэтому, ну вот, поэтому С на кост, ну да, ну хорошо, если вам нравится, можете 2.1 написать, пожалуйста.
[57:07.760 --> 57:09.760]  Там, ну что-нибудь такое.
[57:10.760 --> 57:21.760]  И тогда оказывается, что, ну вот, когда вы тут найдете минимальную циркуляцию, ну, во-первых, заметим, что если тут течет, если тут течет, там, из этой минус бесконечность течет,
[57:22.760 --> 57:28.760]  что-то типа F, то это означает, что у вас без этого ребра просто из С в Т течет поток величины F.
[57:29.760 --> 57:37.760]  Вы это ребро вводили для того, чтобы как бы чем больше здесь течет, тем лучше, и тогда в минимальной циркуляции получается F, это просто максимальный поток.
[57:39.760 --> 57:40.760]  Вот.
[57:41.760 --> 57:46.760]  Более того, так что можно, так что свести к минимальной циркуляции можно вот и таким способом.
[57:46.760 --> 57:49.760]  Более того, таким способом это еще и легче писать.
[57:51.760 --> 57:53.760]  Потому что где вы будете писать D extra?
[57:54.760 --> 58:02.760]  Потому что идея будет такая, что так как тут у нас нету циклов отрицательной стоимости, то можно сначала добавить вот эти ребра, а потом добавлять вот эти ребра по одному.
[58:06.760 --> 58:09.760]  Ну да, то есть изначально сделаем нулевой потенциал, будем добавлять эти ребра.
[58:10.760 --> 58:14.760]  Ну там, так как стоимость не отрицательная, то как бы тут все будет в порядке, мы ничего делать не будем.
[58:15.760 --> 58:17.760]  То есть, можно сказать, просто есть сети и все.
[58:18.760 --> 58:27.760]  А потом после этого мы начинаем, ну согласно методу Клейна, просто добавлять по одной пропускной способности вот на это ребро и пытаться искать просто кратчайшие пути от SDT.
[58:31.760 --> 58:33.760]  То есть в результате алгоритм превращается в следующий.
[58:34.760 --> 58:38.760]  То есть как бы это ребро реально рисовать никто не будет, алгоритм будет рисоваться такой.
[58:39.760 --> 58:46.760]  Давайте будем искать этот максимальный поток методом Форда Фолкерсона, но только пути от SDT мы будем искать минимальной стоимости.
[58:48.760 --> 58:50.760]  Прям вот, жадно минимальной стоимости.
[58:54.760 --> 58:57.760]  Вот, то есть вот, вот, собственно, общеизвестный алгоритм и доказан.
[58:57.760 --> 58:58.760]  Вот.
[59:07.760 --> 59:08.760]  Чего?
[59:10.760 --> 59:11.760]  Как это?
[59:12.760 --> 59:14.760]  Метод Клейна требует, чтобы вот этот путь был кратчайшим.
[59:16.760 --> 59:23.760]  А мы всегда будем брать, мы всегда будем брать SDT, потому что, еще раз говорю, все ребра вот, мы сначала возьмем все вот эти ребра, потом берем вот это.
[59:24.760 --> 59:32.760]  Но для этих ребер мы DX запускать не будем, потому что, во-первых, у нас изначально потенцион 0, а во-вторых, вот это.
[59:33.760 --> 59:35.760]  То есть просто там как бы все будет в порядке.
[59:38.760 --> 59:40.760]  Да, то есть это вот этим мы пользуемся, да.
[59:42.760 --> 59:43.760]  Вот.
[59:43.760 --> 59:46.760]  Более того, из этого алгоритма автоматически следует еще более такое.
[59:46.760 --> 59:50.760]  То есть мало того, что он действительно найдет максимальный поток минимальной стоимости.
[59:51.760 --> 59:53.760]  Так еще и в качестве добавочки.
[59:54.760 --> 59:56.760]  Предположим, что у вас в некоторых задачах еще бывает такое.
[59:56.760 --> 59:59.760]  Найдите поток величины К минимальной стоимости.
[01:00:03.760 --> 01:00:12.760]  Да, так вот, оказывается, что на каждом шаге после там, после ИТ-итерации у вас в этой сети будет поток величины И, причем, минимальной стоимости.
[01:00:14.760 --> 01:00:18.760]  Ну, как бы вы, ну, в принципе, вы могли, конечно, это понять и без этого.
[01:00:20.760 --> 01:00:22.760]  Потому что как вместо максимального ?
[01:00:22.760 --> 01:00:27.760]  Допустим, у вас есть алгоритм, который максимальный поток минимальной стойимости там как-то ищет вот черным ящиком.
[01:00:27.760 --> 01:00:31.760]  Тоесть, допустим, у вас этот жагник допустим как-то работает.
[01:00:32.760 --> 01:00:34.760]  Вы могли, конечно, итак сказать, что вот у вас тут СТ.
[01:00:35.760 --> 01:00:43.760]  Хорошо, а давайте добавим вот там такое ребро, там пропускной способности K и найдем в нем максимальный поток минимальной стоимости.
[01:00:45.760 --> 01:00:46.760]  Но вот...
[01:00:46.760 --> 01:00:47.760]  Тем же жагник!
[01:00:47.760 --> 01:01:08.160]  нет ну не совсем можем на самом деле потому что в принципе можно это сделать следующим образом
[01:01:08.160 --> 01:01:16.200]  ну давайте там условно добавлять понятам непрерывно допустим это будет но мысль можно так то есть
[01:01:16.200 --> 01:01:22.680]  давайте там добавим ребро там найдем там найдем корчайший путь и пропустим сток сколько сможем
[01:01:22.680 --> 01:01:31.400]  ну вот то есть если ребро но вот то есть если мы там добавили там то есть если оно сделалось не
[01:01:31.400 --> 01:01:37.960]  все что там было да ну значит там повторим операцию ну да типа постепенно будем добавлять то есть
[01:01:37.960 --> 01:01:41.400]  в принципе то есть единственная проблема что нет гарантии что это алгоритм вообще закончится
[01:01:41.400 --> 01:01:49.240]  ну вдруг там на каждом вдруг у вас там вы там добавили допустим два точка хотите добавить
[01:01:49.240 --> 01:01:54.840]  два точка восемь а он там будем но вот а он там будет что-то стремящееся к этому там напишу на
[01:01:54.840 --> 01:02:00.720]  каждой террации все меньше меньше меньше меньше вот да но здесь вот получается действительно так
[01:02:00.720 --> 01:02:06.240]  ну в целочи да ну в общем не ценно вот но по чем да единственное где у нас да где у нас
[01:02:06.320 --> 01:02:14.520]  не целочисленные да в задаче hard life в которой стоимости не было вот но тогда здесь получается
[01:02:14.520 --> 01:02:19.600]  тоже что на самом деле то есть как бы вы когда то есть отсюда следует еще важная модификация что
[01:02:19.600 --> 01:02:24.760]  надо искать не обязательно по единичке она сам для вопроса нашли корчайший путь и пихайте по
[01:02:24.760 --> 01:02:35.240]  нему столько сколько можете там дробно не дробно неважно тоже будет работать вот так что вот таким
[01:02:35.240 --> 01:02:42.240]  вот образом можно найти но вот то есть таким вот образом ищется минкост то есть более того
[01:02:42.240 --> 01:02:50.360]  алгоритм поиска работает за величину этого потока умножить на опять же дэйвстро
[01:02:50.360 --> 01:03:04.840]  то есть вот это алгоритм в общем-то да тут тоже практически написан ну либо ну как бы там два
[01:03:04.840 --> 01:03:09.560]  варианта конечно да честно скажем то есть на олимпиадной практике 95 процентов случаев форт
[01:03:09.560 --> 01:03:17.560]  белмена вам вот так хватит просто факт потому что во многих задачах там как бы жюри там либо
[01:03:17.560 --> 01:03:23.560]  затрудняется либо просто они там не заморачивается в то что там еще какие там какие-то там отсекать
[01:03:23.560 --> 01:03:31.120]  какого-то форт белман но иногда такое все-таки случается но в таких случаях ну значит надо надо
[01:03:31.120 --> 01:03:36.160]  просто грамотно написать потенциалы просто вот очень аккуратно определить да что так бы найти
[01:03:36.160 --> 01:03:41.680]  кричащий с помощью потенциала кричащий путь значит найти кричащий путь без потенциала и
[01:03:41.680 --> 01:03:55.520]  собственно сказать что это новый потенциал тут вот тут тут главное не запутаться в этой
[01:03:55.520 --> 01:04:01.600]  задаче до авто авто и начать потому что если вы есть какой-то вершины до какой-то вершины
[01:04:01.600 --> 01:04:05.960]  из-за с не дошли значит не дойдете никогда как можно знаем поэтому поэтому там можно не
[01:04:05.960 --> 01:04:16.400]  заморачивать так ну что вроде так ну что все вроде так ну в принципе да это так это практически
[01:04:16.400 --> 01:04:23.480]  все что я хотел сказать о непосредственно мин костяки у нас так холодно тут вообще
[01:04:23.480 --> 01:04:41.600]  нет оно закрыто то ты прикол да вот ну чертова знает так ладно так то давайте
[01:04:41.600 --> 01:04:54.160]  смотреть сколько у нас тут времени так да ну неплохо да неплохо как это их могли бы тогда
[01:04:54.160 --> 01:05:02.160]  начать их задержаться называется да так вот значит но тут конечно говоря имен кости нельзя
[01:05:02.160 --> 01:05:10.400]  конечно обойти внимание мы одну конкретную задачу об назначениях да нет там тоже господи
[01:05:10.400 --> 01:05:16.640]  я честно свой сегодня ничего страшного не будет ладно разве что дирек обориху ладно да это
[01:05:16.640 --> 01:05:23.720]  не страшно вот но я сейчас говорю не про него а говорю я вот про что я говорю про знаменитую
[01:05:23.720 --> 01:05:31.720]  задачу о назначениях по сути ну на более понятном языке для нас это называется найти в 2 дольном
[01:05:31.720 --> 01:05:37.160]  графе про сочетание минимальной стоимости ладно максимальное про сочетание минимальной стоимости
[01:05:37.160 --> 01:05:46.480]  более того еще и считается граф удобно считать полным двудольным вот да ну давайте подумать
[01:05:46.480 --> 01:05:54.080]  закройся точку можем его найти да можем найти за да за n куб потому что нет ну да потому что у
[01:05:54.080 --> 01:06:01.520]  нас поток величины n и каждую д экстру каждого д экстру можем пускать за н квадрат вот но тем
[01:06:01.520 --> 01:06:09.200]  не менее но вот нам здесь придется константу получать но просто факт значит просто есть
[01:06:09.200 --> 01:06:16.840]  алгоритм который там возможно был изобретен до со до появления мин косто но вот но и по
[01:06:16.840 --> 01:06:22.720]  константе он работает ну так вот вражает шаразиков два лучше вот поэтому то есть он
[01:06:22.720 --> 01:06:29.320]  то есть он достаточно так выражаясь литературным языком маст хевин соответственно и поэтому
[01:06:29.320 --> 01:06:36.480]  придется его обсудить поэтому нас порнот поэтому сейчас нас поприветствует знаменитый венгерский
[01:06:36.480 --> 01:06:52.680]  алгоритм вот да почему венгерский но потому что сначала его за 4 изобрели два венга а потом
[01:06:52.680 --> 01:07:02.480]  через пару лет его допилили до куба еще два венга честно скажу да нет тот тот тот возможно
[01:07:02.480 --> 01:07:06.680]  ваш google сейчас пригодится потому что я не гарантирую что эти пары венгов не пересекались
[01:07:06.680 --> 01:07:16.280]  нет я знаю только одно что один из этих венков это кун да тот самый да тот самый спрос чай да
[01:07:16.280 --> 01:07:23.160]  он венга когда нас сложно догадаться по фамилии но тем не менее да нет чем более
[01:07:23.160 --> 01:07:26.440]  того там остальные фамилии тоже так не сильно сложные но как бы
[01:07:26.440 --> 01:07:48.920]  так задача назначениях да они они про сочетание да
[01:07:48.920 --> 01:08:03.720]  еще это что-то новенькое так хорошо воздоволь паблиш батькарель ткун
[01:08:03.720 --> 01:08:17.040]  окей хангарин метод бекозы легче да потому что он так а так так так так как дедман
[01:08:17.040 --> 01:08:40.320]  скарп так сейчас тогда было понятие симптутика а симптутика алгоритма ну нет ну нет ну ладно
[01:08:40.320 --> 01:08:41.320]  где-то в соседних трудах описываешь такое да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да
[01:09:10.320 --> 01:09:22.540]  эти все приколы мы помнится но до известные факчно закон уютона придумал 국ко ньютон так это просто математические taught нормально просто законыгу���т
[01:09:22.540 --> 01:09:24.560] also
[01:09:24.560 --> 01:09:29.400]  ну точно сначала их утвердить не то есть такую banki рассказывает про закон более
[01:09:29.400 --> 01:09:33.480]  meriotta потому что там типа там более вы сокону 14
[01:09:33.480 --> 01:09:38.220]  с лет раньше море younger ну как бы как бы точность была сомнительно но вот solver
[01:09:38.220 --> 01:09:43.220]  провел там достаточно точные опыты и там все в порядке. Вроде такая байка была.
[01:09:43.220 --> 01:09:57.020]  В чем заключается венгерский метод поиска? Сейчас редкий случай, берем про сочетание.
[01:09:57.020 --> 01:10:05.860]  Значит, допустим, у каждого ребра, то есть допустим, значит, тут важный момент, мы считаем,
[01:10:05.860 --> 01:10:13.740]  что доли одинаковой, мы ищем полное про сочетание. Вот, ну можно считать, что в серии образ
[01:10:13.740 --> 01:10:17.780]  существует, потому что если ребер нет, ну пишем минус бесконечность, допишем плюс бесконечности,
[01:10:17.780 --> 01:10:23.380]  сводим задачу к максимальному про сочетанию. Понятно, да? Точнее наоборот, ну вот. Вот,
[01:10:23.380 --> 01:10:32.140]  ну заметим маленькую приятную вещь. Заметим, что к каждому, что если мы прибавим к каждому
[01:10:32.140 --> 01:10:37.020]  ребру одну и ту же константу, то минимальное про сочетание, точнее про сочетание минимальной
[01:10:37.020 --> 01:10:41.420]  стоимости, останется про сочетание минимальной стоимости, правда? Если мы говорим о совершенных
[01:10:41.420 --> 01:10:50.380]  про сочетаниях, конечно. Логично, да? Вот, поэтому мы без особого исходного ограничения общества
[01:10:50.380 --> 01:10:56.460]  можем считать, что там кост от УВ, да, можно теперь, как бы стоимость ребра можно вводить,
[01:10:56.460 --> 01:11:03.220]  как кост от УВ. Можно вводить, что оно больше либо равно нуля. Ну и то, чтобы оно нам сильно
[01:11:03.220 --> 01:11:17.300]  поможет, но тем не менее. По факту же, значит, мы ведем потенциал. Как-то потока нет, а потенциал
[01:11:17.300 --> 01:11:35.220]  есть. Сейчас мы его будем вводить. Так, а как мы его будем вводить-то, а? Ой, ладно, давайте введем
[01:11:35.220 --> 01:11:42.660]  как-нибудь. Ладно, давайте так. Что такое потенциал? Что у нас в данном случае будет потенциал? Давайте
[01:11:42.660 --> 01:11:50.500]  для левой доли у нас будет потенциал P, а для правой доли потенциал Q. То есть потенциал P
[01:11:50.500 --> 01:12:00.900]  это значит из левой доли просто какие-то числа, в Q это в правой доле какие-то числа. Но у нас
[01:12:00.900 --> 01:12:25.620]  будет мистический инвариант. О господи, на латыни, да. Остался. Ну вот. Остался. Ага, да, да.
[01:12:25.620 --> 01:12:46.140]  Ну вот. Минимальная, но минимальная по стоимости совершенное просочетание.
[01:12:46.140 --> 01:13:07.180]  Но у нас будет лучше константа. Но у нас типа лучше констант. Вот, значит, фишка такая. Должно быть вот так.
[01:13:16.140 --> 01:13:36.460]  Вот такая вот фишка. Да, на этот раз да. В принципе, но смотрите какая фишка. На самом деле,
[01:13:36.460 --> 01:13:42.780]  заметить еще можно следующее, что если я возьму совершенное нот, да, вот это вот, да, вот эту
[01:13:42.780 --> 01:13:52.180]  величину вообще, я объявлю, что пусть это будет, ладно, кост с индексом PQ писать долго, поэтому
[01:13:52.180 --> 01:14:10.940]  буду писать кост штрих. Заметим, что... Действительно, отрицательными они могут быть. Ну забегая вперед, скажу,
[01:14:10.940 --> 01:14:23.580]  что одни из этих потенциалов будут положительные, а другие отрицательные. Ну, в принципе, да, но у нас сейчас нет
[01:14:23.580 --> 01:14:27.900]  задачи переформулировать в терминах это. Более того, сейчас мы просто давайте с другой посмотрим,
[01:14:27.900 --> 01:14:34.980]  с венгерской стороны, да, это да. А то тем более потоки у нас там какие-то были. Поворот там,
[01:14:34.980 --> 01:14:42.020]  остаточная сеть, поворот мозга, там вот это все. Кому это надо. Заметим маленькую приятную вещь.
[01:14:42.020 --> 01:14:49.100]  Заметим, что искать минимальное, решать задачу по обычным стоимостим, по приведенным при любом
[01:14:49.100 --> 01:14:56.340]  потенциале, это в общем-то одно и то же. Потому что если я возьму, вот сейчас мы активно пользуемся
[01:14:56.340 --> 01:15:03.020]  тем, что мы ищем именно совершенное просочетание. Потому что, если я просуммирую стоимость любого
[01:15:03.060 --> 01:15:08.900]  совершенного просочетания, то помимо обычной стоимости туда войдут просто потенциалы всех вершин ровно
[01:15:08.900 --> 01:15:15.940]  по одному разу. Поэтому отсюда два уюта. Во-первых, минимальное присочетание осталось минимальным,
[01:15:15.940 --> 01:15:24.660]  а во-вторых, приятно следующее. Если мы найдем совершенное просочетание на нулевых по приведенной
[01:15:24.660 --> 01:15:36.460]  стоимости ребрах, то мы победили. Если мы верим в этот вариант. Более того, у нас будет цель. Мы
[01:15:36.460 --> 01:15:45.340]  будем подгонять в процессе потенциал, чтобы у нас в итоге получился, во-первых, сохранился инвариант,
[01:15:45.340 --> 01:15:53.100]  во-вторых, в итоге получилось совершенное просочетание на нулевых ребрах. В некоторых редакциях
[01:15:53.500 --> 01:16:02.220]  эти ребра называются жесткими. Но мы их будем называть нулевыми. Вот такая суть.
[01:16:02.220 --> 01:16:22.300]  Как же мы это будем делать? А делать будем так. У нас же был кунга, а он же умел просочетание
[01:16:22.300 --> 01:16:33.060]  искать в обычном графе. Давайте так и сделаем. Давайте возьмем первую вершину и найдем из нее
[01:16:33.060 --> 01:16:46.180]  удлиняющую цепь по нулевым ребрам. У нас есть потенциал. Понятно, что изначально мы подогнали,
[01:16:46.180 --> 01:16:55.380]  что стоимость не отрицательная и исходный потенциал нулевой. Давайте возьмем первую вершину и
[01:16:55.380 --> 01:17:02.140]  найдем из нее удлиняющую цепь по нулевым ребрам. Потом возьмем вторую вершину и тоже из нее найдем
[01:17:02.140 --> 01:17:11.220]  удлиняющую цепь. Потом третий, потом четвертый и так далее. Это алгоритм Куна. Каждый найдем
[01:17:12.220 --> 01:17:16.740]  работает за н квадрат. Вот мы и получили простой алгоритм за н куб без этих ваших потоков.
[01:17:16.740 --> 01:17:25.300]  Вот в общем-то кайф. В общем, только возникает маленький вопрос.
[01:17:25.300 --> 01:17:49.740]  В итоге он найдет. Если мы найдем n удлиняющих цепей, найдут просочетание на нулевых по вот этой
[01:17:49.740 --> 01:18:07.220]  стоимости ребер. А это пока не будет. Потому что на каждом шаге мы найдем удлиняющую цепь.
[01:18:07.220 --> 01:18:15.180]  А вот в этом и вопрос. А кто сказал, что на каждом шаге мы найдем удлиняющую цепь на нулевых ребрах?
[01:18:15.180 --> 01:18:22.820]  Нет, к сожалению, нет. Действительно непонятно. Потому что в общем-то никто не обещал, что мы вообще,
[01:18:22.820 --> 01:18:32.860]  что первый DFS вообще выйдет из этой вершины. Никто этого не обещал. Поэтому придется думать.
[01:18:32.860 --> 01:18:41.700]  Да, ну не случайно же. Сначала один Геовенгер думал, потом еще. Да, сначала два Венгера думали,
[01:18:42.020 --> 01:18:51.460]  потом еще третий пришел, начал думать. Они хорошо подумали, в принципе. Неплохо получается. Нет,
[01:18:51.460 --> 01:18:56.820]  вообще шутки шутками. На самом деле венгерская математическая школа в этом мире очень уважаема,
[01:18:56.820 --> 01:19:07.140]  на самом деле, очень сильная. Так что тут не надо ля-ля. Чего? Не, чехословак.
[01:19:07.140 --> 01:19:20.820]  Ну вот, нет Эгдаш, да. Нет, тут по фамилии очевидно. Ну вот Эгдаш, да.
[01:19:20.820 --> 01:19:49.780]  Как же нам добиваться того, чтобы удлиняющая цепь все-таки находила,
[01:19:49.860 --> 01:19:59.740]  находила с. А то даже ребер нету толку. Но идея на самом деле такая. Вариант будет такой. Из каждой
[01:19:59.740 --> 01:20:03.980]  вершины, если мы не нашли удлиняющую цепь, значит мы ее будем искать-искать-искать до тех пор,
[01:20:03.980 --> 01:20:11.420]  пока не найдем. То есть приводит это к тому, что в очередной момент времени мы живем вот в этой
[01:20:11.420 --> 01:20:18.460]  вершине, а на этих вершинах просочетание на жестких ребрах найдено. То есть найдено просочетание на
[01:20:18.460 --> 01:20:22.140]  жестких ребрах, которое покрывает вот первые сколько-то вершин, мы хотим покрыть следующую.
[01:20:22.140 --> 01:20:29.980]  Как мы это делаем? Запускаем DFS по жестким ребрам. Да, мы поддерживаем вариант, что имеющие
[01:20:29.980 --> 01:20:39.380]  просочетания тоже на жестких ребрах, на нулевых в смысле. Итак, запускаем DFS. Допустим DFS по
[01:20:39.380 --> 01:20:52.580]  нулевым. Значит, все DFS по нулевым ребрам. Запускаем DFS. Ну, если мы по этим нулевым
[01:20:52.580 --> 01:20:59.300]  ребрам, то есть принцип тот же, как и в Куне. То есть направо идем по ребрам не из просочетания,
[01:20:59.300 --> 01:21:06.980]  влево идем строго по ребрам по просочетания. Если мы нашли, если DFS случайно дошел до вершины
[01:21:06.980 --> 01:21:10.780]  правой доли, не покрытой просочетанием, значит, удлиняющая цепь найдена, улучшили,
[01:21:10.780 --> 01:21:23.540]  возрадовались. Логично, да? Или нелогично? Что делать, если не нашлось? Ничего страшного.
[01:21:23.540 --> 01:21:34.380]  Сделаем следующее. Давайте скажем, вот DFS у нас куда-то дошел. Допустим, он прошел что-нибудь типа,
[01:21:34.380 --> 01:21:56.380]  а что такое? Мне просто даже интересно, что вы ухватили.
[01:21:56.380 --> 01:22:22.860]  Нет, это я не знаю. Так, ладно, давайте что-нибудь другое предположим. Тут ассоциации какие-то.
[01:22:22.860 --> 01:22:52.300]  Так, ладно. Ладно, назовем его просто L plus и R plus. Все остальное назовем L
[01:22:52.300 --> 01:23:00.060]  minus и R minus. Как вы же догадываетесь, в L plus у нас оказались только вершины
[01:23:00.060 --> 01:23:07.740]  с просочетания. А в L plus соответствующие вершины с просочетания и наши бедные вершины.
[01:23:07.740 --> 01:23:22.140]  Дальше, к сожалению, нам пойти не удалось. Хочется добиться того, чтобы смогли. Как
[01:23:22.140 --> 01:23:28.460]  это сделать? Очень просто. Почему мы не смогли из этого L plus выйти? Потому что все ребра,
[01:23:28.460 --> 01:23:34.740]  которым мы пытались тут куда-то выйти в R minus, у них, собственно, вот эта стоимость
[01:23:34.740 --> 01:23:49.220]  штриховая оказалась больше нуля. Что же делать? А делать можно следующее. А давайте рассмотрим
[01:23:49.220 --> 01:23:56.740]  все ребра, которые ведут из R plus в R minus. И найдем минимум. Назовем его, ну я не знаю, дельта.
[01:23:56.740 --> 01:24:19.380]  То есть найдем минимальный ребро, который соединяет L plus с R minus. И теперь сделаем
[01:24:19.380 --> 01:24:33.060]  неожиданный чит. Чит будет заключаться такой. Для всех вершин лежащих в L plus мы увеличим
[01:24:33.060 --> 01:24:59.380]  потенциал. Увеличим, да? Сейчас подумаем. Что нам нужно? Нам нужно для каких-то вершин,
[01:24:59.380 --> 01:25:09.140]  для каких-то L плюс или минус. Или для каких-то вершин в R тоже плюс или минус. Тоже что-то сделать.
[01:25:09.140 --> 01:25:15.420]  Чем хочется сделать так, чтобы все ребра остались не отрицательными, но при этом хотя бы какие-то
[01:25:15.420 --> 01:25:25.660]  ребра из L plus в R minus неожиданно стали отрицательными. Нет, ну почему нет? Все правильно. Я
[01:25:25.660 --> 01:25:32.860]  утверждаю, что надо сделать просто вот так. Значит, я предлагаю так.
[01:25:32.860 --> 01:25:53.540]  Да, наверное. Так, ну давайте разбираться. Не испортилось ли что-нибудь? Ну давайте думать.
[01:25:53.540 --> 01:26:00.980]  Ребра из L plus в R plus не испортились. Да, потому что у них ничего не поменялось. L минус R минус
[01:26:00.980 --> 01:26:13.700]  вообще ничего не поменялось. А вот тут дальше интересно. Ребра давайте L минус R плюс. Тогда
[01:26:13.700 --> 01:26:21.980]  у них стоимости даже увеличились. Да, но нас вот эти ребра пока не интересуют.
[01:26:21.980 --> 01:26:31.620]  И самое интересное L плюс R минус. L плюс R минус у них всех приведенная стоимость уменьшилась на дельту.
[01:26:31.620 --> 01:26:39.220]  Но у них дельта и была минимум. Так что мораль простая. Они все остались не отрицательными,
[01:26:39.220 --> 01:26:46.860]  но при этом хотя бы одно новое нулевое появилось. Поэтому что мы теперь делаем?
[01:26:46.860 --> 01:26:56.380]  Ну вот, поэтому заново запускаем DFS. И при этом обратите внимание, старые, да, самое важное,
[01:26:56.380 --> 01:27:03.060]  старые нулевые ребра, так как они все L плюс R плюс или L минус R минус, то они нулевыми остались.
[01:27:03.060 --> 01:27:12.260]  Понимаете, да? Ну и главное, что внутри плюса ничего не поменялось. Это важно. Почему это важно?
[01:27:12.740 --> 01:27:18.820]  Потому что это означает, что когда мы заново запустим DFS, то тут ничего не поменяется. То есть мы обойдем
[01:27:18.820 --> 01:27:25.180]  как минимум те же вершины и плюс пройдем еще по одному ребру вот с этой дельтой. Понятно, да?
[01:27:25.180 --> 01:27:31.380]  То есть получается, что на каждом шаге мы будем, на каждом новом DFS мы будем кушать хотя бы на
[01:27:31.380 --> 01:27:41.700]  одну вершину больше. Следовательно, не более чем за N DFS мы удлиняющую цепь таки найдем. Вот,
[01:27:41.700 --> 01:28:07.140]  понятно, да? Потом еще DFS, потом еще DFS, еще DFS, еще DFS. Вот. Ну вот. Нет, нет, нет, нет, нет, нет.
[01:28:07.140 --> 01:28:12.420]  Нет, нет, нет, нет. На каждое DFS приходит увеличение количества вершин, до которых мы можем
[01:28:12.420 --> 01:28:23.380]  дотянуться, но это еще не удлиняющая цепь. Да. Как говорится, да. Ну вот. То есть, да, вам, да,
[01:28:23.380 --> 01:28:29.260]  вам может показаться, что алгоритм, что такой алгоритм работает долго. Да, так и есть. Это пока от N
[01:28:29.260 --> 01:28:42.620]  в четвертый. Да, DFS работает за квадрат. DFS работает за квадрат. Вот. Для того,
[01:28:42.620 --> 01:28:48.220]  чтобы увеличить просочетание на один, нам требуется пока N DFS. То есть N в кубе на каждое
[01:28:48.220 --> 01:28:55.660]  увеличение просочетания. Для того N в четвертый. Так что это была, утверждаю, что это была оригинальная,
[01:28:55.980 --> 01:29:02.380]  самая первая версия алгоритма была такая. А да, ну вот. То, что будет дальше, это уже теперь,
[01:29:02.380 --> 01:29:12.780]  значит, как допилить это уже до куба. Ну, допилить, ну, наверное, очень просто. То есть, допилить,
[01:29:12.780 --> 01:29:17.820]  то есть, что у нас работает за N в четвертый? Именно DFS. Потому что сами по себе вот эти вот,
[01:29:17.820 --> 01:29:27.780]  там, нет, хотя нет. Значит, работают за квадрат две вещи. Первая вещь DFS, вторая вещь вот эта штука.
[01:29:27.780 --> 01:29:42.300]  Ну, в итоге, да. А они не все пока.
[01:29:47.820 --> 01:30:11.900]  Ну, потому что мы изначально не дошли к чему проблему. Я не остануся нулевыми.
[01:30:11.900 --> 01:30:23.820]  Пшель минус арминск никто не трогает. Нет, ну, как сказать, шарано или поздно в нашей
[01:30:23.820 --> 01:30:33.740]  сети попадется вершина правой доли, непокрытое просочетание. Просто, да, просто уже, просто тупо
[01:30:33.740 --> 01:30:38.340]  по этой причине. Вот. Ну, значит, что нам не хочется? Нам не хочется пересчитывать вот это,
[01:30:38.340 --> 01:30:51.140]  и нам не хочется пересчитывать. Что нам еще не хочется пересчитывать? Вот, да. Ну, DFS не хочется
[01:30:51.140 --> 01:31:02.500]  запускать. Но, с другой стороны, DFS, в общем-то, с DFS-ом проблема решается предельно тупо. Да. То есть,
[01:31:03.500 --> 01:31:09.860]  утверждается, что если нам кто-то с небес по факсу пришлет вот это ребро, то идея такая,
[01:31:09.860 --> 01:31:14.500]  давайте просто из этой вершины запустим DFS, не снимая пометки вот с этих вершин. Потому что до них
[01:31:14.500 --> 01:31:20.260]  мы все равно дошли, в чем более того так же. Поэтому просто начинаем с него и просто то же самое
[01:31:20.260 --> 01:31:28.860]  берем. Тогда получается, что у нас все еще N DFS, но каждый DFS на этот раз, но эти DFS по каждой
[01:31:28.860 --> 01:31:44.500]  вершине больше одного раза не бегают. Ну, это мы будем обрабатывать по принципу,
[01:31:44.500 --> 01:31:50.820]  что найдем дельта, пусть дельта ноль. Ну, с небес по факсу нам его присылают. То есть,
[01:31:50.820 --> 01:31:57.220]  пока мы не умеем адекватно дельту искать. Но если тут небеса и факса сейчас мы наладим,
[01:31:57.220 --> 01:32:13.900]  то соответственно будет работать закуп. Ну, после дельта мы стартуем видимо из вершины правой
[01:32:13.900 --> 01:32:23.100]  доли. Нет, мы только что смогли до нее дойти. Ну, нет, самый первый DFS мы запускаем естественно
[01:32:23.100 --> 01:32:30.580]  из вершины L+. Каждый следующий DFS, пока мы тут линейщую цепь не найдем, мы запускаем
[01:32:30.580 --> 01:32:39.420]  по сути из вершины правой доли. Потому что у нас вот эта дельта, это ребро, которое ведет из
[01:32:39.420 --> 01:32:46.060]  какой-то вершины L+, в какую-то вершину R-. Мы эту дельту магическим образом превратили в ноль,
[01:32:46.060 --> 01:32:53.180]  поэтому резко смогли. Или выяснили, что это вершины не из полисочетания, поэтому ура-радость.
[01:32:53.180 --> 01:33:05.660]  Вот понятно, да? Теперь выясняет вопрос. Как теперь вот этот минимум искать? Вот,
[01:33:05.660 --> 01:33:15.900]  ну, минимум искать, значит, идея оказывается такая. Ну, что тут можно сделать? А давайте в каждой
[01:33:15.900 --> 01:33:21.780]  вершине правой доли для этого будем поддерживать такую интересную величину, как minq от V.
[01:33:37.420 --> 01:33:45.300]  Вот. Вот будем такую штуку в явном виде поддерживать. Ну, изначально ее можно насчитать. Логично,
[01:33:45.300 --> 01:34:01.740]  да? Вот. Ну, у из L, ладно, нагнал, L+. Да, вот теперь хорошо. Почему хорошо? Потому что если нам
[01:34:01.740 --> 01:34:08.260]  с небес по факсу присылают minq, то, в общем-то, и дельту я могу легко найти. Я могу просто
[01:34:08.260 --> 01:34:19.980]  пробежаться по всем вершинам не из R+, и взять из них minq. И это будет уже за линию. А за линию n раз
[01:34:19.980 --> 01:34:23.860]  нас устраивает, потому что тогда каждую фазу мы будем делать уже за n квадрат. Это уже хорошо.
[01:34:23.860 --> 01:34:35.540]  Ну, теперь выясняет вопрос. Ну, как меняется minq? Что? Просто находит минимальное ребро,
[01:34:35.620 --> 01:34:44.740]  которое ведет в меня. Ну, оно может хранить и то, и другое. Ну, самое интересное. Ну,
[01:34:44.740 --> 01:34:49.780]  minq, вы можете сказать, что minq – это чиселка. Есть army, но это при каком у это достигается. Но это
[01:34:49.780 --> 01:34:56.900]  уже другой вопрос. Это тоже не против. А это, кстати, не так принципиально, потому что, в общем-то,
[01:34:56.900 --> 01:35:03.860]  вы можете потратить потом вот этот времени, чтобы его в явном виде найти. Но если вы знаете,
[01:35:04.180 --> 01:35:11.300]  в какой вершине надо искать, то вы перебираете просто все ребра и находите то самое. Это легко.
[01:35:11.300 --> 01:35:18.980]  Ну, теперь выскажите вопрос. А как это minq поддерживать? Ну, что у нас происходит? Ну,
[01:35:18.980 --> 01:35:23.460]  minq у нас принципиально меняется когда? Ну, во-первых, когда меняются потенциалы. Но здесь
[01:35:23.460 --> 01:35:30.020]  это не сильно страшно, потому что если мы тут неожиданно решили выполнить вот эту операцию,
[01:35:30.020 --> 01:35:37.700]  то, очевидно, у всех minq просто вот этот минимум, сколько уменьшился на дельта. Логично, да?
[01:35:37.700 --> 01:35:48.020]  Значит, что еще? А, ну, если у вершины потенциал вычислась дельта, ну, значит,
[01:35:48.020 --> 01:35:52.700]  minq у нее тоже увеличился на дельта. Тоже, в общем-то, неинтересно. Хотя это происходит
[01:35:52.700 --> 01:35:57.940]  только для вершины R+, а, как вы уже догадываетесь, для вершины R+, в общем-то, minq нам уже неинтересен.
[01:35:57.940 --> 01:36:05.620]  Вот, на самом деле, что там происходит в начале. Как еще меняется minq? А еще minq меняется,
[01:36:05.620 --> 01:36:14.580]  когда у вас появляется новая вершина в R+. Но это решается так. Когда в DFS у вас появляется
[01:36:14.580 --> 01:36:20.820]  вершина, прежде чем идти DFS дальше, вы просто перебираете ребра и обновляете minq. Ну,
[01:36:20.820 --> 01:36:27.580]  вам нужно просто пререлаксировать, по сути. Причем для каждой вершины это делается за линию,
[01:36:27.580 --> 01:36:37.180]  причем делается один раз в процессе поиска удлиняющей цепи. minq меняется, ну, либо вот здесь,
[01:36:37.180 --> 01:36:44.340]  но тут оно меняется тривиально. Либо оно меняется, когда в процессе DFS у вас в L+,
[01:36:44.340 --> 01:36:52.620]  появляются новые вершины. Но это обрабатывается тупо за линию. Главное, только в DFS сначала это
[01:36:52.620 --> 01:37:03.900]  обработать, а потом уже искать нулевые ребра. Так что вот такая вот штука в результате. Вот
[01:37:03.900 --> 01:37:09.700]  это вот minq превращает atent в четвертой, в вполне себе адекватное atent в кубе.
[01:37:33.900 --> 01:37:43.980]  Ну да, вы же за линию пробегаетесь. Получается вот такой красивый кубецкий. Как говорится,
[01:37:43.980 --> 01:37:49.260]  не Floyd, конечно, но тоже куб. То есть вот такая вот классика.
[01:38:03.900 --> 01:38:13.300]  Выбираем из minq минимальное, чтобы выбрать дельту. И откуда запускать потом DFS.
[01:38:13.300 --> 01:38:14.300]  Нет, конечно.
[01:38:14.300 --> 01:38:16.300]  Если у нас m ребра, а не пол у нас, то это не работает.
[01:38:16.300 --> 01:38:18.300]  Нет, у нас это не работает просто.
[01:38:18.300 --> 01:38:19.300]  Почему бы?
[01:38:19.300 --> 01:38:27.300]  Потому что у нас в таком случае у тебя прибавятся лишние стоимости, ты не сможешь их нормально вычислить.
[01:38:28.300 --> 01:38:37.300]  Потому что хорошо, почему у нас работает конца в данном случае. Потому что мы знаем, что мы вышли конца, мы прибавили конца.
[01:38:37.300 --> 01:38:42.300]  А теперь зависит еще от того, какие вершины мы возьмем по сочетанию. И просто по-разному мы зачитаем.
[01:38:42.300 --> 01:38:44.300]  Ну вот.
[01:38:44.300 --> 01:38:45.300]  Да, вот это.
[01:38:45.300 --> 01:38:48.300]  Ты можешь всегда на себя добавить ребра с весом бесконечности и решить ту же самую задачу.
[01:38:48.300 --> 01:38:53.300]  В смысле, да, просто вопрос. Можно ли оптимизировать среду 6.1?
[01:38:53.300 --> 01:38:55.300]  Ну вот.
[01:38:58.300 --> 01:39:02.300]  Да вот черту. То-то оно что, не очень понятно, наверное.
[01:39:02.300 --> 01:39:04.300]  Честно говоря.
[01:39:04.300 --> 01:39:07.300]  Скажем так, ответ на этот вопрос мне не известно.
[01:39:07.300 --> 01:39:09.300]  Вот.
[01:39:09.300 --> 01:39:11.300]  Так что вот.
[01:39:11.300 --> 01:39:13.300]  Так что вот такая вот венгерочка.
[01:39:13.300 --> 01:39:17.300]  То есть более того, она в итоге допиливается до достаточно хорошего кода.
[01:39:17.300 --> 01:39:22.300]  Я, честно, не очень понял, как мы обработали ДФС на быстром.
[01:39:22.300 --> 01:39:26.300]  У нас есть L+, R+, они увеличились постоянно.
[01:39:26.300 --> 01:39:28.300]  Ну да.
[01:39:28.300 --> 01:39:32.300]  Ну что мы делаем? Берем Минку, находим минимальное Минку.
[01:39:32.300 --> 01:39:34.300]  Вот оно дельта.
[01:39:34.300 --> 01:39:38.300]  И сделали вот эту операцию. Это все Минку уменьшило на дельта.
[01:39:38.300 --> 01:39:42.300]  Ну вот. Так берем вершину, у которой Минку теперь ноль.
[01:39:42.300 --> 01:39:44.300]  И типа.
[01:39:44.300 --> 01:39:50.300]  И запускаем ДФС, еще и попутно записав, что как бы ДФС прошелся по вот этим ребрам.
[01:39:50.300 --> 01:39:52.300]  Вот.
[01:39:52.300 --> 01:39:54.300]  Как вы увеличиваете цепочку?
[01:39:54.300 --> 01:39:56.300]  Ну вот.
[01:39:56.300 --> 01:40:00.300]  Ну саму цепочку, ну как?
[01:40:00.300 --> 01:40:07.300]  Ну самый тупой способ это в итоге, когда вы уже, когда ДФС уже сказали, что вы дошли до вершины непокиды при сочетании,
[01:40:07.300 --> 01:40:10.300]  можете заново запустить ДФС и эту цепочку найти.
[01:40:10.300 --> 01:40:12.300]  А более адекватный способ.
[01:40:12.300 --> 01:40:15.300]  Давайте для каждой вершины правой доли просто ПР-шку хранить.
[01:40:15.300 --> 01:40:18.300]  Откуда вы в нее пришли?
[01:40:18.300 --> 01:40:20.300]  И тогда просто по ПР-шкам вы, собственно, это и настановите.
[01:40:20.300 --> 01:40:24.300]  Потом Вайликом там пробежитесь.
[01:40:24.300 --> 01:40:27.300]  Ну вот. Ну подробнее я сейчас не буду, но в принципе можно рекламировать.
[01:40:27.300 --> 01:40:31.300]  То есть редкий случай, когда тут можно рекламировать Emax.
[01:40:31.300 --> 01:40:36.300]  Потому что, скажем так, то есть был у меня такой коллега по Олимпиадам.
[01:40:36.300 --> 01:40:38.300]  Собственно, Леша Золотов.
[01:40:38.300 --> 01:40:40.300]  Но вы такого почти наверно и не знаете.
[01:40:40.300 --> 01:40:42.300]  Он там сейчас с Олимпиадом отношения не имеет.
[01:40:42.300 --> 01:40:44.300]  Тот Никтейм у него фреопат.
[01:40:44.300 --> 01:40:46.300]  Вот.
[01:40:46.300 --> 01:40:47.300]  Вот.
[01:40:47.300 --> 01:40:56.300]  Так вот он известен тем, что у него Emax опубликована одна из самых коротких вообще реализаций этого алгоритма.
[01:40:56.300 --> 01:41:00.300]  По-моему, строчек 30.
[01:41:00.300 --> 01:41:02.300]  Ну может Лопатин.
[01:41:02.300 --> 01:41:03.300]  Нет.
[01:41:04.300 --> 01:41:07.300]  Да? Нет.
[01:41:10.300 --> 01:41:12.300]  Ну не знаю.
[01:41:12.300 --> 01:41:14.300]  Ну за Лопатиной не знаю.
[01:41:14.300 --> 01:41:16.300]  Я там.
[01:41:16.300 --> 01:41:20.300]  Были сведения за фреопата.
[01:41:20.300 --> 01:41:23.300]  Нет, за Лопатиной что-то первый раз слышу такое.
[01:41:33.300 --> 01:41:35.300]  Да ладно.
[01:41:35.300 --> 01:41:37.300]  А ведь конспекты что утверждают?
[01:41:41.300 --> 01:41:43.300]  Нет, просто что-то.
[01:41:45.300 --> 01:41:46.300]  Нет.
[01:41:46.300 --> 01:41:47.300]  Ну я не знаю.
[01:41:47.300 --> 01:41:48.300]  А что?
[01:41:48.300 --> 01:41:49.300]  Что?
[01:41:49.300 --> 01:41:50.300]  Что?
[01:41:50.300 --> 01:41:51.300]  Что?
[01:41:51.300 --> 01:41:52.300]  Что?
[01:41:52.300 --> 01:41:53.300]  Что?
[01:41:53.300 --> 01:41:54.300]  Что?
[01:41:54.300 --> 01:41:55.300]  Что?
[01:41:55.300 --> 01:41:56.300]  Что?
[01:41:56.300 --> 01:41:57.300]  Что?
[01:41:57.300 --> 01:41:58.300]  Что?
[01:41:58.300 --> 01:41:59.300]  Что?
[01:41:59.300 --> 01:42:00.300]  Что?
[01:42:00.300 --> 01:42:01.300]  Что?
[01:42:01.300 --> 01:42:02.300]  Нет.
[01:42:02.300 --> 01:42:04.300]  Ну или это страховка.
[01:42:04.300 --> 01:42:08.300]  Или типа Леша ее взял у Андрея Лопатина.
[01:42:08.300 --> 01:42:10.300]  Нет, ну такое может быть.
[01:42:10.300 --> 01:42:12.300]  Почему бы нет?
[01:42:12.300 --> 01:42:14.300]  Ой, господи, да.
[01:42:14.300 --> 01:42:16.300]  Как говорится, Андрей Лопатин.
[01:42:16.300 --> 01:42:21.300]  Андрей Лопатин известен тем, что выиграл часы на последнем Huawei Code Challenge.
[01:42:23.300 --> 01:42:24.300]  Чего?
[01:42:24.300 --> 01:42:25.300]  Сейчас тайгуи.
[01:42:25.300 --> 01:42:27.300]  Ну это уже другое.
[01:42:28.300 --> 01:42:30.300]  Ой, господи, кошмар.
[01:42:32.300 --> 01:42:35.300]  Так, ладно.
[01:42:35.300 --> 01:42:36.300]  Ладно.
[01:42:37.300 --> 01:42:38.300]  Ладно.
[01:42:38.300 --> 01:42:39.300]  Так, ну все.
[01:42:39.300 --> 01:42:43.300]  Есть ли по Венгельчике какие-то еще вопросы?
[01:42:49.300 --> 01:42:51.300]  Так, хорошо.
[01:42:51.300 --> 01:42:52.300]  Ладно.
[01:42:53.300 --> 01:42:57.300]  Тогда это все мы убираем и обсудим.
[01:42:57.300 --> 01:43:00.300]  И тогда перейдем немножко к другому.
[01:43:00.300 --> 01:43:03.300]  Тоже, казалось бы, рассмотрим еще одну веселую задачу.
[01:43:03.300 --> 01:43:08.300]  Но в общем тоже мы ее будем решать без потока.
[01:43:08.300 --> 01:43:11.300]  Но, казалось бы, к потокам она какое-то отношение имеет.
[01:43:27.300 --> 01:43:28.300]  Итак.
[01:43:36.300 --> 01:43:44.300]  Следующая задача, которую мы будем решать, это будет задача о глобальном разрезе.
[01:43:52.300 --> 01:43:54.300]  Задача такая.
[01:43:54.300 --> 01:44:00.300]  Да, абсолютно обычный, неориентированный, но при этом взвешенный граф.
[01:44:02.300 --> 01:44:08.300]  Причем гарантируется, что все веса не отрицательные.
[01:44:09.300 --> 01:44:10.300]  Это важно.
[01:44:14.300 --> 01:44:16.300]  Ну там, все угодно.
[01:44:24.300 --> 01:44:25.300]  Вот.
[01:44:32.300 --> 01:44:33.300]  Так вот.
[01:44:33.300 --> 01:44:34.300]  Задача.
[01:44:35.300 --> 01:44:39.300]  Найти минимальный разрез в этом графе.
[01:44:42.300 --> 01:44:43.300]  Да.
[01:44:43.300 --> 01:44:44.300]  Что такое разрез?
[01:44:44.300 --> 01:44:45.300]  Да.
[01:44:45.300 --> 01:44:46.300]  У нас и стока, и стока нет.
[01:44:46.300 --> 01:44:50.300]  Ну в данном случае разрез, это просто, хотим представить
[01:44:50.300 --> 01:44:55.300]  в виде двух разбиения на два множества.
[01:44:55.300 --> 01:45:00.300]  Причем, что важно, оба эти множества не пустые.
[01:45:02.300 --> 01:45:03.300]  Это важно.
[01:45:03.300 --> 01:45:09.300]  Ну чтобы у вас там не было свободно сказать, что типа вот все, вот ничего, вот вам ноль, радуйтесь.
[01:45:10.300 --> 01:45:12.300]  Вот нет, так не пойдет.
[01:45:12.300 --> 01:45:16.300]  Надо вот именно минимальный, именно вот минимальный не пустой разрез найти.
[01:45:16.300 --> 01:45:17.300]  Ну вообще так ладно.
[01:45:17.300 --> 01:45:21.300]  Если граф не связан, то разрез стоимости ноль вы, конечно, найдете.
[01:45:23.300 --> 01:45:25.300]  Это да, но это уже будет другое.
[01:45:26.300 --> 01:45:33.300]  Значит, ст не равно нулю, и как бы хочется, чтобы стоимость ст была как можно меньше.
[01:45:43.300 --> 01:45:44.300]  Вот.
[01:45:45.300 --> 01:45:47.300]  Да, это важно.
[01:45:47.300 --> 01:45:48.300]  Он не ориентированный.
[01:45:53.300 --> 01:45:54.300]  Граф не ориентированный.
[01:45:54.300 --> 01:45:57.300]  Более того, значит, как его можно, как это можно искать?
[01:45:59.300 --> 01:46:02.300]  Значит, алгоритм, который точно работает.
[01:46:10.300 --> 01:46:12.300]  Ну самое смешное, что да, ну и что?
[01:46:13.300 --> 01:46:14.300]  Ну мы говорим так.
[01:46:14.300 --> 01:46:18.300]  Допустим, мы решили, что вот у нас есть вершины С и Т, которые оказались в разных долях.
[01:46:18.300 --> 01:46:19.300]  Допустим.
[01:46:20.300 --> 01:46:23.300]  Допустим, скажем, что у нас такие две вершины.
[01:46:23.300 --> 01:46:24.300]  Так, отлично.
[01:46:24.300 --> 01:46:26.300]  Давайте найдем каким-нибудь потоками.
[01:46:26.300 --> 01:46:31.300]  Так ладно, чемпионский у нас алгоритм пока за сколько там закуп работает.
[01:46:34.300 --> 01:46:37.300]  Да, у нас на прошлом занятии целых три таких было.
[01:46:38.300 --> 01:46:39.300]  Нет, мы еще там.
[01:46:40.300 --> 01:46:46.300]  Если все не успеем, можем почесаться на тему того, как бы сделать чуть побыстрее, но все равно не получится.
[01:46:51.300 --> 01:46:52.300]  Соответственно, да.
[01:46:52.300 --> 01:46:55.300]  Ну вот, значит, запускаем как-нибудь запоток.
[01:46:56.300 --> 01:46:58.300]  Но как бы непонятно.
[01:46:58.300 --> 01:47:03.300]  Это будет минимальный разрез только среди тех разрезов, которые С и Т разделяют.
[01:47:07.300 --> 01:47:09.300]  Да, конечно.
[01:47:11.300 --> 01:47:12.300]  Далее.
[01:47:12.300 --> 01:47:14.300]  Но как бы что можно сделать?
[01:47:14.300 --> 01:47:17.300]  Мы же не знаем, эти С и Т или как бы.
[01:47:17.300 --> 01:47:19.300]  Может они должны быть в одной доле.
[01:47:21.300 --> 01:47:22.300]  Но тут есть два пути.
[01:47:22.300 --> 01:47:23.300]  Самый тупой способ.
[01:47:23.300 --> 01:47:25.300]  Ладно, давайте С и Т тупо переберем.
[01:47:26.300 --> 01:47:31.300]  И у вас получится просто N квадрат поиска потоков.
[01:47:34.300 --> 01:47:36.300]  Если вы подумаете 10 секунд, вы этот квадрат убьете.
[01:47:38.300 --> 01:47:42.300]  Но можно перебирать не у вершины одну.
[01:47:43.300 --> 01:47:44.300]  Ладно, четыре.
[01:47:45.300 --> 01:47:46.300]  Хорошо, да.
[01:47:46.300 --> 01:47:49.300]  То есть заметим, что можно вершину зафиксировать, а ты перебирать.
[01:47:53.300 --> 01:47:58.300]  А можно пойти, кстати, за ту же симптотику немножко другим путем.
[01:47:58.300 --> 01:48:01.300]  Вот вы взяли первые попавшиеся вершины С и Т.
[01:48:02.300 --> 01:48:06.300]  Допустим, вы нашли между ними максимальный, то есть минимальный разрез.
[01:48:06.300 --> 01:48:07.300]  Тогда как можно сделать меньше?
[01:48:07.300 --> 01:48:10.300]  Меньше можно сделать, только если С и Т окажется в одной доле.
[01:48:11.300 --> 01:48:12.300]  Тогда мы сделаем так.
[01:48:13.300 --> 01:48:15.300]  Мы эти вершины схлопнем.
[01:48:19.300 --> 01:48:21.300]  В одну вершину сожмем.
[01:48:22.300 --> 01:48:23.300]  Ребра, которые соединяли, убьем.
[01:48:23.300 --> 01:48:27.300]  Ребра, которые соединяли С и Т с чем-то еще, тоже будут соединять уже эту вершину.
[01:48:28.300 --> 01:48:30.300]  То есть у нас получится граф на N минус одну вершину.
[01:48:31.300 --> 01:48:33.300]  Возможно, стоит там чуть меньше ребер.
[01:48:34.300 --> 01:48:35.300]  Повторим операцию.
[01:48:37.300 --> 01:48:38.300]  Нет, это ровно столько же.
[01:48:39.300 --> 01:48:44.300]  Пока это тоже N на поиск максимального потока.
[01:48:46.300 --> 01:48:49.300]  Правда, да, по константе будет чуть лучше.
[01:48:50.300 --> 01:48:52.300]  Но фишка тут в другом.
[01:48:53.300 --> 01:48:54.300]  Что здесь перспективно?
[01:48:55.300 --> 01:48:57.300]  Перспективность в том, что у нас на каждом шаге задача
[01:48:58.300 --> 01:49:04.300]  найти две вершины и минимальный разрез между ними.
[01:49:06.300 --> 01:49:07.300]  То есть обратите внимание.
[01:49:08.300 --> 01:49:10.300]  Эта задача может оказаться немножко проще, чем
[01:49:11.300 --> 01:49:14.300]  данные две уже тебе фиксированные вершины, найти разрез между ними.
[01:49:15.300 --> 01:49:18.300]  То есть мы сами решаем, что тут найти.
[01:49:19.300 --> 01:49:20.300]  Какие две вершины нас интересуют.
[01:49:21.300 --> 01:49:22.300]  Эта задача может оказаться проще.
[01:49:30.300 --> 01:49:32.300]  И говорим, что ответ либо это, либо...
[01:49:33.300 --> 01:49:34.300]  Сохраняем, что это может быть ответом.
[01:49:34.300 --> 01:49:37.300]  После этого сжимаем вершины СТ в одну.
[01:49:38.300 --> 01:49:40.300]  И на оставшем графе повторяем операцию.
[01:49:41.300 --> 01:49:43.300]  То есть у нас в результате N-1 вариантов ответа получается.
[01:49:44.300 --> 01:49:46.300]  Но мы из них выбираем лучший.
[01:49:49.300 --> 01:49:50.300]  И оказывается, что...
[01:49:51.300 --> 01:49:54.300]  И оказывается, действительно, просто найти как-то СТ
[01:49:55.300 --> 01:49:58.300]  и минимальный разрез между ними, оказывается, можно без поиска потока и гораздо быстрее.
[01:49:59.300 --> 01:50:02.300]  Более того, мы это сделаем быстрее, чем вообще современные алгоритмы,
[01:50:02.300 --> 01:50:03.300]  которые, кажется, умеют искать поток.
[01:50:04.300 --> 01:50:08.300]  Ну потому что я честно говоря не знаю, можно ли искать поток за В квадрат.
[01:50:09.300 --> 01:50:10.300]  Да, прям за В квадрат.
[01:50:11.300 --> 01:50:12.300]  Ну...
[01:50:13.300 --> 01:50:17.300]  Нету мало, я в прошлый раз утверждал, что лучше алгоритм за ВЕ, но по-моему...
[01:50:24.300 --> 01:50:26.300]  Ну, но это не совсем так.
[01:50:32.300 --> 01:50:33.300]  Ну, зависит.
[01:50:34.300 --> 01:50:35.300]  Но при Е равного квадрата, да.
[01:50:40.300 --> 01:50:41.300]  То есть уже не факт.
[01:50:53.300 --> 01:50:54.300]  Как вы считаете?
[01:50:55.300 --> 01:50:56.300]  Я считаю, неправильно.
[01:50:57.300 --> 01:50:58.300]  Так, ну ладно.
[01:50:59.300 --> 01:51:00.300]  Нет, ладно, мы сейчас не будем все скопать.
[01:51:00.300 --> 01:51:01.300]  Скопать-то сколько это?
[01:51:01.300 --> 01:51:04.300]  Но есть подозрение, что ладно, что если мы сделаем как бы решать задачу за квадрат, это круто.
[01:51:06.300 --> 01:51:08.300]  А за В квадрат плюс Е еще круче.
[01:51:10.300 --> 01:51:11.300]  А за Е плюс В лог В?
[01:51:13.300 --> 01:51:14.300]  А будет и такая ассинтотика.
[01:51:15.300 --> 01:51:16.300]  Е плюс В лог В.
[01:51:17.300 --> 01:51:18.300]  Да, да, да, да, да.
[01:51:19.300 --> 01:51:21.300]  Да, аналог Дейстер с кучей фюбоначища возьмите, да.
[01:51:24.300 --> 01:51:25.300]  Сейчас вы увидите, да.
[01:51:26.300 --> 01:51:28.300]  Сейчас вы увидите, собственно, никакой магии на самом деле.
[01:51:29.300 --> 01:51:30.300]  Это шторм Варнер.
[01:51:32.300 --> 01:51:33.300]  Да.
[01:51:34.300 --> 01:51:37.300]  Да, то, что я сейчас рассказываю, называется алгоритм шторм Варнера.
[01:51:38.300 --> 01:51:40.300]  Как я уже говорил еще раз, шторм не склоняется.
[01:51:44.300 --> 01:51:47.300]  Как говорится, да, шторм не склоняется, потому что она мотивида.
[01:51:49.300 --> 01:51:52.300]  Вот, как говорится, вот кто Варнер, я не знаю, но он склоняется.
[01:51:53.300 --> 01:51:56.300]  Нет, ну мало ли, там можно ляпнуть, что там есть какой-нибудь Рихардт, но...
[01:52:00.300 --> 01:52:01.300]  Не знаю.
[01:52:02.300 --> 01:52:03.300]  Ну, я не знаю.
[01:52:04.300 --> 01:52:05.300]  Ну, два варианта.
[01:52:06.300 --> 01:52:07.300]  Либо потому, что он пропустил даму вперед.
[01:52:08.300 --> 01:52:12.300]  Либо потому, что там шторм, наверное, пишется как-то вот так, а Варнер пишется как-то вот так.
[01:52:15.300 --> 01:52:17.300]  И тупо по алфавиту она раньше оказала.
[01:52:22.300 --> 01:52:27.300]  Ну, это уже другой вопрос, да.
[01:52:30.300 --> 01:52:32.300]  Ну, Кэли через С.
[01:52:35.300 --> 01:52:36.300]  Серьезно?
[01:52:37.300 --> 01:52:38.300]  С, Т, О, Е, Р.
[01:52:39.300 --> 01:52:40.300]  А.
[01:52:41.300 --> 01:52:42.300]  Стор.
[01:52:47.300 --> 01:52:48.300]  Ну, окей, ладно.
[01:52:49.300 --> 01:52:50.300]  Хотя нет.
[01:52:51.300 --> 01:52:53.300]  Да-да-да, это самое страшное, там три ошибки, да.
[01:52:54.300 --> 01:52:56.300]  Во-первых, без H, во-вторых, с Е, в-третьих, не мотивида.
[01:52:57.300 --> 01:52:58.300]  Если стереть, то что?
[01:52:59.300 --> 01:53:02.300]  Ну, да-да-да.
[01:53:03.300 --> 01:53:05.300]  Да, классика задачника Астера.
[01:53:06.300 --> 01:53:15.300]  Один водитель автобуса сэкономил за месяц 89 литров бензина, а другой вообще никуда не ездил и никого не возил, поэтому сэкономил в 30 раз больше.
[01:53:15.300 --> 01:53:21.300]  Отдельная сложная версия задачи написать имя Матильда.
[01:53:22.300 --> 01:53:23.300]  По-русски?
[01:53:24.300 --> 01:53:25.300]  Ну, в смысле по-английски, как напишется.
[01:53:26.300 --> 01:53:27.300]  Вот что пишется так?
[01:53:28.300 --> 01:53:29.300]  Что, неужели не так?
[01:53:30.300 --> 01:53:31.300]  Ой-ой-ой.
[01:53:32.300 --> 01:53:33.300]  Давайте расстоять.
[01:53:33.300 --> 01:53:35.300]  Ой-ой-ой.
[01:53:54.300 --> 01:53:55.300]  А где А?
[01:53:56.300 --> 01:53:57.300]  Нет.
[01:53:58.300 --> 01:53:59.300]  Еще.
[01:54:00.300 --> 01:54:01.300]  Пум-пум-пум.
[01:54:02.300 --> 01:54:04.300]  Матильда, лучше Матильда, да.
[01:54:05.300 --> 01:54:10.300]  Может, она была просто не Матильда Шторм, потому что Матильда по-английски это Матильда.
[01:54:11.300 --> 01:54:12.300]  Извините.
[01:54:13.300 --> 01:54:15.300]  Ну, по-английски, да, если она...
[01:54:16.300 --> 01:54:20.300]  Успешники Пети написано, что они предложили Мехдхильда Шторм.
[01:54:21.300 --> 01:54:22.300]  Мехдхильд.
[01:54:23.300 --> 01:54:24.300]  Я не знаю.
[01:54:24.300 --> 01:54:25.300]  Откуда?
[01:54:26.300 --> 01:54:27.300]  Откуда я взял Матильда?
[01:54:28.300 --> 01:54:29.300]  Откуда же я это взял?
[01:54:30.300 --> 01:54:31.300]  Я как бы не с потолка ошибка взял.
[01:54:32.300 --> 01:54:34.300]  Ну ладно, кто-то, видимо, назвал Матильда и все, да.
[01:54:35.300 --> 01:54:37.300]  Ну, как бы да-да-да-да.
[01:54:38.300 --> 01:54:40.300]  Ну да, как-то называется, да.
[01:54:41.300 --> 01:54:42.300]  Ты кто такой?
[01:54:43.300 --> 01:54:44.300]  Я Британсбендайбург.
[01:54:45.300 --> 01:54:46.300]  Борщ Леха, да.
[01:54:47.300 --> 01:54:48.300]  Как-то так.
[01:54:49.300 --> 01:54:50.300]  Ладно.
[01:54:51.300 --> 01:54:52.300]  Так вот.
[01:54:53.300 --> 01:54:55.300]  Ладно, сосредоточимся на алгоритме.
[01:54:57.300 --> 01:54:59.300]  Итак, что у нас в алгоритме?
[01:55:00.300 --> 01:55:03.300]  Алгоритм, значит, он предлагается вот n-1 раз,
[01:55:04.300 --> 01:55:07.300]  типа находим две вершины минимальный разрез между ними и сжимаем их.
[01:55:08.300 --> 01:55:11.300]  А находим их весьма неожиданным образом.
[01:55:12.300 --> 01:55:14.300]  Значит, предлагается сделать так.
[01:55:15.300 --> 01:55:17.300]  Заведем массив А.
[01:55:18.300 --> 01:55:22.300]  В него мы пихнем какую-нибудь вершину.
[01:55:23.300 --> 01:55:25.300]  Вот, просто присвоим.
[01:55:31.300 --> 01:55:35.300]  А теперь делаем n-1 раз следующее.
[01:55:38.300 --> 01:55:40.300]  Значит, в вот это вот.
[01:55:47.300 --> 01:55:48.300]  Вот.
[01:56:10.300 --> 01:56:12.300]  Вот, вот такую операцию сделаем.
[01:56:13.300 --> 01:56:15.300]  Ладно, не такую, вот такую.
[01:56:17.300 --> 01:56:18.300]  Да.
[01:56:21.300 --> 01:56:22.300]  Значит, что это такое?
[01:56:23.300 --> 01:56:25.300]  Ну, я буду получать v от A u.
[01:56:26.300 --> 01:56:30.300]  Это я буду просто помечать просто сумму всех таких ребер.
[01:56:33.300 --> 01:56:36.300]  То есть e равно, допустим, v u.
[01:56:37.300 --> 01:56:40.300]  И, соответственно, v у меня будет лежать в A.
[01:56:41.300 --> 01:56:43.300]  Ну, e, естественно, лежит e.
[01:56:44.300 --> 01:56:45.300]  Вот.
[01:56:46.300 --> 01:56:47.300]  Вот.
[01:56:48.300 --> 01:56:49.300]  То есть вот такое я буду делать.
[01:56:50.300 --> 01:56:54.300]  Более того, в принципе, я еще буду использовать всякие w, a, b.
[01:56:55.300 --> 01:56:57.300]  Но это тоже я буду использовать, сумму по всем таким ребрам,
[01:56:58.300 --> 01:57:00.300]  что значит там.
[01:57:10.300 --> 01:57:11.300]  Не факт.
[01:57:11.300 --> 01:57:14.300]  Дело в том, что когда вы эту вершину перенесете в эту долю,
[01:57:15.300 --> 01:57:19.300]  то там начнут играть как бы ребра, которые ведут не в A.
[01:57:28.300 --> 01:57:32.300]  То есть поэтому они на произменении лучше так не мыслить.
[01:57:37.300 --> 01:57:39.300]  Добавим эту вершину в A.
[01:57:40.300 --> 01:57:41.300]  Читайте Кормана.
[01:57:42.300 --> 01:57:44.300]  Тогда это для вас будет стандартным обозначением.
[01:57:48.300 --> 01:57:49.300]  Вот.
[01:57:50.300 --> 01:57:51.300]  Так вот.
[01:57:52.300 --> 01:57:54.300]  Так вот, добавили все эти вершины.
[01:57:57.300 --> 01:58:00.300]  Так вот, после этого как найти две вершины и минимальный разрез?
[01:58:01.300 --> 01:58:02.300]  Очень просто.
[01:58:10.300 --> 01:58:11.300]  Все.
[01:58:12.300 --> 01:58:13.300]  Тупо две последние.
[01:58:23.300 --> 01:58:25.300]  Сумма ребер, соединяющих u с множеством a.
[01:58:26.300 --> 01:58:28.300]  Ну, max это максимум.
[01:58:29.300 --> 01:58:31.300]  Arcmax это типа при каком u оно достигается.
[01:58:34.300 --> 01:58:36.300]  Нет, нижние подчерки это индекс.
[01:58:39.300 --> 01:58:40.300]  Вы не заводили?
[01:58:41.300 --> 01:58:42.300]  Да ладно, классика же.
[01:58:43.300 --> 01:58:48.300]  Правда, она обычно заводится, чтобы подчеркнуть, что как бы сам по себе этот индекс не используется в цикле.
[01:58:49.300 --> 01:58:50.300]  Да.
[01:58:51.300 --> 01:58:54.300]  Да ладно, хорошо, хорошо, хорошо.
[01:58:57.300 --> 01:59:00.300]  Если вам так разрывает это шаблон, то окей, пожалуйста.
[01:59:02.300 --> 01:59:03.300]  Вот.
[01:59:03.300 --> 01:59:06.300]  Если вам так разрывает это шаблон, то окей, пожалуйста.
[01:59:08.300 --> 01:59:09.300]  Вот.
[01:59:10.300 --> 01:59:11.300]  А минимальный разрез?
[01:59:14.300 --> 01:59:15.300]  Вот этот вот разрез, знаете какой?
[01:59:18.300 --> 01:59:19.300]  Короче, сейчас упадете.
[01:59:33.300 --> 01:59:38.300]  Ну, это не очевидно, но тут, ну, кровь у тебя разрезана.
[01:59:43.300 --> 01:59:44.300]  Ну, wavestate.
[02:00:03.300 --> 02:00:06.300]  Да, w это предпоследнее, то есть s предпоследнее, t последнее.
[02:00:19.300 --> 02:00:20.300]  Ну, давайте так.
[02:00:23.300 --> 02:00:25.300]  Ну, действительно, так, теперь давайте думаем.
[02:00:26.300 --> 02:00:27.300]  Откуда эта алгоритма взяла 7 точек?
[02:00:28.300 --> 02:00:31.300]  Во-первых, в куб, а во-вторых, v на e plus log v.
[02:00:33.300 --> 02:00:34.300]  Там можно фидкульшу искать.
[02:00:36.300 --> 02:00:37.300]  Сходы вещественные.
[02:00:47.300 --> 02:00:51.300]  Не проще, потому что нам придется, да, мы найдем минимальный разрез по величине,
[02:00:53.300 --> 02:00:59.300]  но при этом мы не найдем, собственно, между вот эту вот вершину s, а нам это важно.
[02:01:03.300 --> 02:01:14.300]  Ну, мы же не самые-самые, ну вот, и потом не говоря уж о том, что мы как бы, мы гарантируем,
[02:01:15.300 --> 02:01:18.300]  что вот этот разрез, он минимальный конкретно между вот этими s и t.
[02:01:28.300 --> 02:01:30.300]  Как бы чисто теоретически может...
[02:01:33.300 --> 02:01:41.300]  Ну, два множества, да, нам нужно конкретно, чтобы у нас утверждение ключевое будет заключаться в том,
[02:01:41.300 --> 02:01:45.300]  что это именно минимальный разрез, который разделяет вот именно вот эти s и t.
[02:01:53.300 --> 02:01:56.300]  Да, можно идти до n минус 2, а если начинать с нуля или что?
[02:02:03.300 --> 02:02:05.300]  Вода вообще не асимпатическая, да.
[02:02:12.300 --> 02:02:16.300]  Ну, понятно, что такая фаза, конечно, реализовывается, но понятно, что как в dx3 мы реализовываем,
[02:02:17.300 --> 02:02:20.300]  d at 2 это просто сумма весов ребер до a.
[02:02:21.300 --> 02:02:24.300]  Когда новая вершина добавляется в a, мы эти d, соответственно, апдейтим.
[02:02:25.300 --> 02:02:30.300]  Это суммарно за e работает, а минимум ищем, ну, либо ищем zb квадрат,
[02:02:30.300 --> 02:02:34.300]  либо апдейты делаем с помощью с кучей фибоначий, тогда получается e плюс v.
[02:02:50.300 --> 02:02:54.300]  Так и так и будет. Да, но дело в том, что мы это делаем только...
[02:02:54.300 --> 02:02:58.300]  То есть это мы так только один разрез нашли, мы так n минус 1 раз должны сделать.
[02:03:00.300 --> 02:03:02.300]  Ну, это же буквально...
[02:03:07.300 --> 02:03:09.300]  Ну да, и функция немножко другая.
[02:03:10.300 --> 02:03:15.300]  Потому что там сумма ребер, соединяющих там с заданным множеством, а не длина какого-то там пути.
[02:03:22.300 --> 02:03:26.300]  Ну, скажу так, да, конкретно вот это вот работает за e плюс v логовая, да, я согласен.
[02:03:26.300 --> 02:03:28.300]  Почему я тут домножаю на v?
[02:03:28.300 --> 02:03:33.300]  Потому что я беру весь алгоритм, в который мы вот это вот все делаем n минус 1 раз.
[02:03:41.300 --> 02:03:46.300]  Так что пока да, v и e мы, конечно, не перебили, но тем не менее...
[02:03:47.300 --> 02:03:52.300]  Мы просто позволяем всем произвол выбора вершины v, да?
[02:03:52.300 --> 02:03:55.300]  Ну, вот этой вот начальной, да.
[02:03:55.300 --> 02:03:57.300]  И вот краски ее перебираем и запускаем?
[02:03:57.300 --> 02:03:58.300]  Нет.
[02:03:58.300 --> 02:04:01.300]  Нет, мы не перебираем, а значит это было бы v четвертый.
[02:04:02.300 --> 02:04:04.300]  Нет, алгоритм вообще не так. Он устроен так.
[02:04:04.300 --> 02:04:10.300]  Мы нашли вершины, то есть за e плюс v логовая мы нашли две вершины и минимальный разрез между ними.
[02:04:10.300 --> 02:04:11.300]  Тогда ответ.
[02:04:11.300 --> 02:04:17.300]  Значит ответ на задачу либо этот разрез, либо какой-то разрез, в котором sct лежат в одной доле.
[02:04:17.300 --> 02:04:20.300]  Сжимаем вершины sct в одну долю, остался граф, наверное, с решением.
[02:04:20.300 --> 02:04:22.300]  Повторяем.
[02:04:23.300 --> 02:04:24.300]  Чего?
[02:04:25.300 --> 02:04:27.300]  Вот, то есть я повторяю.
[02:04:32.300 --> 02:04:33.300]  Чего?
[02:04:33.300 --> 02:04:34.300]  Кого нашли?
[02:04:34.300 --> 02:04:35.300]  Вот.
[02:04:35.300 --> 02:04:36.300]  Да.
[02:04:36.300 --> 02:04:38.300]  Почему это находит минимальный разрез?
[02:04:39.300 --> 02:04:45.300]  Да, основное, что надо доказать, почему между этими вершинами sct минимальный разрез реально такой.
[02:04:47.300 --> 02:04:52.300]  То есть нет, это по сути, нет, давайте так, давайте ограничим себя аккуратно.
[02:04:52.300 --> 02:04:53.300]  Что нам нужно доказать?
[02:04:53.300 --> 02:05:01.300]  Нам нужно доказать, что действительно между вот этими двумя вершинами в итоге минимальный разрез будет именно такой.
[02:05:02.300 --> 02:05:06.300]  Вот это вроде, если мы в это, если мы в это верим, то как бы дальше все элементарно.
[02:05:08.300 --> 02:05:09.300]  Да.
[02:05:09.300 --> 02:05:13.300]  Но правда тут важно, что эти вершины найдены именно так, капсом.
[02:05:14.300 --> 02:05:19.300]  Почему дальше будет все тривиально, если мы даже доказали, что между вершинами sct разрез ровно такой.
[02:05:21.300 --> 02:05:22.300]  Что дальше у нас?
[02:05:22.300 --> 02:05:32.300]  Смотри, у нас сказали, что у тебя либо, у тебя в ответе либо эти две вершины разреза в разных долях, тогда это ответ.
[02:05:32.300 --> 02:05:34.300]  Либо в одной, мы их объединяем.
[02:05:36.300 --> 02:05:37.300]  Вот.
[02:05:37.300 --> 02:05:38.300]  Так.
[02:05:38.300 --> 02:05:39.300]  Ну вот.
[02:05:39.300 --> 02:05:42.300]  Так что теперь значит возникает, теперь начинаем думать, как же нам это.
[02:05:44.300 --> 02:05:45.300]  Ну как же.
[02:05:46.300 --> 02:05:47.300]  Ну да.
[02:05:48.300 --> 02:05:51.300]  Нет, ну да, халявная, конечно, лекция, если мы только на третьем числу начали думать.
[02:05:52.300 --> 02:05:53.300]  Значит, поехали.
[02:05:53.300 --> 02:05:54.300]  Делать будем так.
[02:05:59.300 --> 02:06:00.300]  Ну сколько?
[02:06:01.300 --> 02:06:02.300]  Нет, почему третий?
[02:06:03.300 --> 02:06:04.300]  Два с половиной часа.
[02:06:05.300 --> 02:06:07.300]  Ну мы, конечно, начали не в девять, но тем не менее.
[02:06:08.300 --> 02:06:09.300]  Да, да, да еще.
[02:06:09.300 --> 02:06:11.300]  Ну да, можно еще придать там перерыв.
[02:06:11.300 --> 02:06:13.300]  Там перерыв у нас пока один был.
[02:06:13.300 --> 02:06:14.300]  Так.
[02:06:17.300 --> 02:06:18.300]  Значит, смотрите, немножко магии.
[02:06:19.300 --> 02:06:20.300]  Значит, смотрите.
[02:06:20.300 --> 02:06:24.300]  Вот, значит, рассмотрим какой-нибудь разрез.
[02:06:27.300 --> 02:06:28.300]  Это я буду называть СОПТ.
[02:06:31.300 --> 02:06:32.300]  Так вот.
[02:06:33.300 --> 02:06:36.300]  Рассмотрим какой-нибудь разрез между ССТ.
[02:06:39.300 --> 02:06:40.300]  Вот.
[02:06:40.300 --> 02:06:41.300]  Назовем его С.
[02:06:41.300 --> 02:06:43.300]  Наша цель доказана вот.
[02:06:44.300 --> 02:06:46.300]  То есть сейчас давайте.
[02:06:48.300 --> 02:06:49.300]  Вот.
[02:06:50.300 --> 02:06:52.300]  Мы, как говорится, хотим.
[02:06:54.300 --> 02:06:55.300]  Что мы хотим?
[02:06:56.300 --> 02:07:03.300]  Хотим, чтобы В от С было больше либо равно вот этого вот.
[02:07:04.300 --> 02:07:05.300]  В от СОПТ.
[02:07:07.300 --> 02:07:09.300]  Ну В от СОПТ у нас равно чему?
[02:07:11.300 --> 02:07:16.300]  Ну, короче, В от В без Т и Т.
[02:07:18.300 --> 02:07:23.300]  Ну, можно тут скобочка ставить, можно не ставить.
[02:07:24.300 --> 02:07:25.300]  Вот мы это хотим.
[02:07:26.300 --> 02:07:28.300]  Доказывать мы это будем следующим образом.
[02:07:28.300 --> 02:07:29.300]  Смотрите.
[02:07:31.300 --> 02:07:38.300]  Дело в том, что относительно этого, вот рассмотрим вот эти вот вершины В0, В1, В2 и так далее.
[02:07:38.300 --> 02:07:41.300]  Вот в том порядке, в котором они были добавлены множество А.
[02:07:42.300 --> 02:07:44.300]  Сначала вершины будут в одной доле.
[02:07:44.300 --> 02:07:47.300]  Потом неожиданно перескочат в другую.
[02:07:49.300 --> 02:07:51.300]  Потом вернутся в первую.
[02:07:51.300 --> 02:07:53.300]  Потом вернутся во вторую.
[02:07:53.300 --> 02:07:56.300]  И так они, короче, будут сколько-то времени скакать.
[02:07:56.300 --> 02:08:04.300]  Но в какой-то момент у нас тут последние две вершины окажутся в разных долях.
[02:08:05.300 --> 02:08:06.300]  Почему?
[02:08:06.300 --> 02:08:08.300]  Ну, потому что мы разрезаться и взяли между этими двумя вершинами.
[02:08:09.300 --> 02:08:15.300]  Это у нас, напоминаю, ВН-2, а это ВН-1.
[02:08:20.300 --> 02:08:23.300]  Так вот, да, сейчас мы будем это все доказывать по индукции.
[02:08:26.300 --> 02:08:27.300]  Как мы это будем доказывать?
[02:08:28.300 --> 02:08:32.300]  А вот как, как говорится, назовет, значит, определение.
[02:08:35.300 --> 02:08:55.300]  Вершина ВИ интересная, если ВИ и ВИ-1 в разных лежат, в разных долях С.
[02:08:57.300 --> 02:09:11.300]  Ну, то есть, короче, вот интересными являются вот эта вершина, вот эта вершина, вот эта вершина, вот эта вершина, ну и так далее.
[02:09:11.300 --> 02:09:12.300]  Понятно, да?
[02:09:18.300 --> 02:09:19.300]  Никак не меняется.
[02:09:21.300 --> 02:09:22.300]  С никак не меняется.
[02:09:22.300 --> 02:09:24.300]  Это вот заданный фиксированный разрез между С и Т.
[02:09:24.300 --> 02:09:27.300]  Мы хотим доказать, что он не лучше, чем оптимальный разрез.
[02:09:31.300 --> 02:09:33.300]  Так вот, утверждение.
[02:09:35.300 --> 02:09:37.300]  А, ну вот, давайте еще такое определение.
[02:09:39.300 --> 02:09:48.300]  Давайте так скажем, что АЖТ это будет просто множество вершин с нулевой до, внимание, G-1.
[02:09:54.300 --> 02:09:55.300]  Понятно, да?
[02:09:57.300 --> 02:10:01.300]  Так вот, мистическая утверждение.
[02:10:11.300 --> 02:10:16.300]  Значит, мистическое утверждение, что если я возьму стоимость
[02:10:16.300 --> 02:10:17.300]  стоимость
[02:10:23.300 --> 02:10:30.300]  стоимость ребер разреза, которые, только возьму не все ребра, а только те, кто лежат вот в первых G плюс одной вершине.
[02:10:32.300 --> 02:10:33.300]  Понятно, да?
[02:10:35.300 --> 02:10:38.300]  То оказывается, что это будет больше либо равно,
[02:10:38.300 --> 02:10:50.300]  чем W от АЖ и G.
[02:10:54.300 --> 02:10:55.300]  Правда, ладно, оговорка.
[02:10:55.300 --> 02:10:59.300]  Если вершина в G интересная.
[02:11:06.300 --> 02:11:07.300]  Отвечивает.
[02:11:09.300 --> 02:11:10.300]  Ну, идея такая.
[02:11:11.300 --> 02:11:13.300]  Рассмотрим вершину в АЖ, интересную вершину.
[02:11:14.300 --> 02:11:21.300]  Рассмотрим все ребра, которые соединяют только первые G плюс один вершин между собой.
[02:11:28.300 --> 02:11:31.300]  Но рассмотрим только из этих ребр, только те, которые пересекают разрез С.
[02:11:32.300 --> 02:11:43.300]  Так вот, я утверждаю, что сумма их весов, она больше либо равна, чем вес ребер, соединяющих вершину WGT с вот предыдущим.
[02:11:44.300 --> 02:11:53.300]  Да, по сути, мы хотим, если мы сейчас докажем это утверждение для всех интересных вершин по индукции, то мы это по сути докажем и для такой интересной вершины, как T.
[02:11:55.300 --> 02:11:56.300]  А это ровно то, что мы хотим.
[02:12:01.300 --> 02:12:25.300]  Ну, сумма весов, вес вот этого разреза, это сумма весов ребер, токсичек, СТ, в остальное.
[02:12:25.300 --> 02:12:37.300]  Ну, нам дан разрез С, какой-то, да, и мы пытаемся доказать вот эти утверждения.
[02:12:37.300 --> 02:12:39.300]  Мы доказываем вот эти утверждения.
[02:12:53.300 --> 02:12:57.300]  Ну, типа да. Из этих разрезов как будто оптимальный будет вот этот.
[02:12:59.300 --> 02:13:01.300]  Да, как-то не странно мы это докажем.
[02:13:02.300 --> 02:13:04.300]  Как мы это докажем?
[02:13:05.300 --> 02:13:08.300]  Ну, для этого нам придется немножко пошаманить.
[02:13:09.300 --> 02:13:11.300]  Смотрите. Ну, будем доказывать по индукции.
[02:13:12.300 --> 02:13:17.300]  Ну, потому что база индукции для самой первой вершины, интересной вершины, это очевидно.
[02:13:18.300 --> 02:13:24.300]  Ну, потому что ребра, пересекающие разрезы, ребра, соединяющие эту вершину со всеми вот этими, это буквально одно и то же, правда?
[02:13:27.300 --> 02:13:29.300]  А теперь давайте переходим от вершины.
[02:13:30.300 --> 02:13:34.300]  Допустим, у нас тут есть вершина ВЖ и есть вершина ВЖ штрих.
[02:13:35.300 --> 02:13:36.300]  Хотим доказать для нее.
[02:13:37.300 --> 02:13:39.300]  Вот пусть для вершины ВЖ мы все доказали.
[02:13:40.300 --> 02:13:41.300]  Теперь доказываем для ВЖ штрих.
[02:13:42.300 --> 02:13:43.300]  Понятно, да?
[02:13:45.300 --> 02:13:46.300]  Ну, поехали.
[02:13:47.300 --> 02:13:49.300]  Давайте попробуем пооценивать.
[02:13:50.300 --> 02:13:57.300]  Вес от С от А от Ж штрих, объединенное с ВЖ штрих.
[02:13:59.300 --> 02:14:02.300]  Ой, да, тут объединение не с Ж, а с ВЖ, конечно.
[02:14:06.300 --> 02:14:07.300]  Вот.
[02:14:10.300 --> 02:14:11.300]  Что это такое?
[02:14:13.300 --> 02:14:16.300]  Ну, давайте распишем эту штуку относительно Ж.
[02:14:20.300 --> 02:14:28.300]  Потому что заметим, что в этот разрез, в множество этих ребер, очевидно, входят ребра вот эти, вот АЖ, объединенного с ВЖ.
[02:14:29.300 --> 02:14:33.300]  Логично, да?
[02:14:37.300 --> 02:14:38.300]  Ну, они туда входят.
[02:14:39.300 --> 02:14:40.300]  Ну, конечно, это не все.
[02:14:41.300 --> 02:14:42.300]  Туда входит что-то еще.
[02:14:43.300 --> 02:14:44.300]  А что еще туда входит?
[02:14:46.300 --> 02:14:50.300]  Ну, еще туда входит вот какие-то еще ребра.
[02:14:51.300 --> 02:14:52.300]  Какие ребра туда входят?
[02:14:52.300 --> 02:14:54.300]  Мы понимаем, что ВЖ штрих – это кто идет после Ж.
[02:14:58.300 --> 02:14:59.300]  Сейчас.
[02:15:00.300 --> 02:15:02.300]  Ж штрих – это после Ж.
[02:15:05.300 --> 02:15:06.300]  Ж штрих идет после Ж, да.
[02:15:08.300 --> 02:15:10.300]  Но плюс еще какие-то ребра надо добавить.
[02:15:11.300 --> 02:15:12.300]  Какие ребра надо добавить?
[02:15:13.300 --> 02:15:18.300]  Ну, надо добавить вот эти вот ребра, которые торчат из вершин от Ж плюс один до Ж штрих минус один куда-то.
[02:15:22.300 --> 02:15:29.300]  Ну вот, то есть плюс там, ну вот плюс там что еще?
[02:15:31.300 --> 02:15:48.300]  Ну, плюс В от, скажем так, С от, давайте так напишем, от множества ВЖ плюс один, ВЖ плюс два и так далее.
[02:15:49.300 --> 02:15:51.300]  В там Ж штрих минус один.
[02:15:52.300 --> 02:15:54.300]  В, ну, допустим, АЖ.
[02:15:55.300 --> 02:15:59.300]  Ну, я мог бы АЖ объединенной Ж написать, но как бы нас сейчас это не интересует.
[02:16:03.300 --> 02:16:07.300]  Значит, что это такое? Это все ребра, которые соединяют вот эти вершины с вот этими вот.
[02:16:09.300 --> 02:16:12.300]  Так, что-то я еще забыл. Все я еще забыл.
[02:16:15.300 --> 02:16:16.300]  А это и есть неинтересные вершины.
[02:16:17.300 --> 02:16:19.300]  Так, осталась еще сама вершина Ж штрих.
[02:16:19.300 --> 02:16:39.300]  То есть так, ну вот, давайте так напишем, В от, соответственно, С от, значит С от АЖ штрих и Ж штрих.
[02:16:40.300 --> 02:16:41.300]  Вот, понятно, да?
[02:16:46.300 --> 02:16:47.300]  Нет.
[02:16:48.300 --> 02:16:49.300]  Нет.
[02:16:50.300 --> 02:16:51.300]  Сейчас.
[02:16:55.300 --> 02:16:57.300]  Нет, видите, нет, есть разница.
[02:16:58.300 --> 02:17:00.300]  Тут внутри С написано не одно множество, а два.
[02:17:01.300 --> 02:17:02.300]  Это разные вещи.
[02:17:03.300 --> 02:17:09.300]  Это значит, что я беру как бы ребра между этими двумя множествами, оставляя из них только те, которые еще и разрез пересекают.
[02:17:12.300 --> 02:17:14.300]  Ну, вот такие обозначения.
[02:17:15.300 --> 02:17:16.300]  Ну, естественно.
[02:17:23.300 --> 02:17:26.300]  Ну, когда, ну, были. Поэтому я тут С пишу. Какие-то были.
[02:17:27.300 --> 02:17:28.300]  Да, так.
[02:17:33.300 --> 02:17:34.300]  И чего берем?
[02:17:34.300 --> 02:17:37.300]  Мы берем Ж штрих, следующий интересный индекс АЖ.
[02:17:39.300 --> 02:17:40.300]  Ну, нет.
[02:17:42.300 --> 02:17:43.300]  Мы либо нашли интересный.
[02:17:44.300 --> 02:17:49.300]  Ну, Ж штрих, да, это следа. Ж это интересный индекс, а Ж штрих это следующий интересный индекс.
[02:17:50.300 --> 02:17:51.300]  То есть строго интересный.
[02:17:52.300 --> 02:17:55.300]  То есть для нас важно, что Ж и вся вот эта компания, они лежат в одной доле.
[02:17:56.300 --> 02:18:00.300]  Вот. То есть как-то мы этим сейчас начнем пользоваться.
[02:18:01.300 --> 02:18:05.300]  Значит, как же мы этим начнем пользоваться?
[02:18:07.300 --> 02:18:09.300]  Так, это у нас вот такой вес.
[02:18:11.300 --> 02:18:14.300]  Ну, теперь давайте попробуем это как-нибудь оценивать.
[02:18:16.300 --> 02:18:17.300]  Значит, смотрите.
[02:18:18.300 --> 02:18:20.300]  Это больше либо равно.
[02:18:21.300 --> 02:18:23.300]  Ну, начнем с того, что с точки зрения больше либо равно.
[02:18:24.300 --> 02:18:25.300]  Допустим.
[02:18:25.300 --> 02:18:26.300]  Сейчас.
[02:18:27.300 --> 02:18:28.300]  Ну да.
[02:18:29.300 --> 02:18:31.300]  Давайте вот это мы убьем вообще.
[02:18:33.300 --> 02:18:34.300]  Вот.
[02:18:35.300 --> 02:18:38.300]  Ну, мы на самом деле с точки зрения больше либо равно мы можем убить любые ребра,
[02:18:39.300 --> 02:18:41.300]  потому что тут мы пользуемся тем, что они не отрицательные. Это важно.
[02:18:42.300 --> 02:18:43.300]  Да.
[02:18:44.300 --> 02:18:45.300]  Это значит больше либо равно.
[02:18:48.300 --> 02:18:49.300]  Значит, смотрите, какие мы оставим.
[02:18:50.300 --> 02:18:51.300]  Тут мы пишем.
[02:18:52.300 --> 02:18:53.300]  Ну, давайте так. Я пока перепишу.
[02:18:56.300 --> 02:18:58.300]  Значит, АЖ объединенное с ВЖ.
[02:19:00.300 --> 02:19:01.300]  Вот.
[02:19:02.300 --> 02:19:03.300]  Плюс.
[02:19:04.300 --> 02:19:09.300]  Плюс W от С от АЖ штрих и ВЖ штрих.
[02:19:10.300 --> 02:19:11.300]  Оп-оп-оп.
[02:19:13.300 --> 02:19:14.300]  Итак.
[02:19:15.300 --> 02:19:16.300]  Что мы еще теперь сделаем?
[02:19:17.300 --> 02:19:18.300]  А еще я сделаю следующее.
[02:19:25.300 --> 02:19:27.300]  Чего?
[02:19:55.300 --> 02:19:56.300]  Ладно.
[02:20:21.300 --> 02:20:22.300]  Ну вот.
[02:20:22.300 --> 02:20:23.300]  Значит.
[02:20:35.300 --> 02:20:36.300]  Так вот.
[02:20:37.300 --> 02:20:38.300]  Ладно.
[02:20:39.300 --> 02:20:42.300]  Делаем предположение индукции.
[02:20:45.300 --> 02:20:50.300]  Ну, по предположению индукции я тут могу вот эту штуку заменить на что?
[02:20:52.300 --> 02:20:59.300]  На В от АЖ и ВЖ.
[02:21:02.300 --> 02:21:03.300]  Логично, да?
[02:21:04.300 --> 02:21:06.300]  И плюс я еще пишу вот это.
[02:21:09.300 --> 02:21:14.300]  То есть В от С от АЖ штрих пока и ВЖ штрих.
[02:21:18.300 --> 02:21:19.300]  Давайте тут СТ я сдвину.
[02:21:22.300 --> 02:21:24.300]  Теперь следующий аккуратненький шаг.
[02:21:25.300 --> 02:21:26.300]  Это было предположение индукции.
[02:21:30.300 --> 02:21:33.300]  Теперь воспользуемся структурой алгоритма.
[02:21:34.300 --> 02:21:42.300]  Структура алгоритма, что когда я выбирал вершину ВЖ, я выбирал вершину, у которой вот эта штука максимальная.
[02:21:43.300 --> 02:21:50.300]  Стало быть, она больше, чем W от АЖ и, внимание, ВЖ штрих.
[02:21:53.300 --> 02:22:02.300]  И плюс В от С от АЖ штрих, ВЖ штрих.
[02:22:09.300 --> 02:22:13.300]  Здесь мы что-то два раза посчитали, но я могу два раза не считать.
[02:22:13.300 --> 02:22:27.300]  Потому что я могу заметить, что множество вот этих ребер, которые соединяют ВЖ штрих с вершинами, с более ранними вершинами другой доли, входят в том числе и ребра, которые соединяют ВЖ штрих с вот этими всеми вершинами.
[02:22:29.300 --> 02:22:31.300]  То есть я могу, то есть напишу так.
[02:22:32.300 --> 02:22:44.300]  Больше либо равно от В от АЖ и ВЖ штрих, плюс В от ВЖ, ВЖ плюс один и так далее.
[02:22:46.300 --> 02:22:48.300]  Ой, ну карлочи, господи, что я тут заморачиваюсь.
[02:22:49.300 --> 02:22:51.300]  Эти вершины на самом деле обозначаются гораздо кроче.
[02:22:52.300 --> 02:22:55.300]  Они обозначаются, ага, именно.
[02:23:01.300 --> 02:23:02.300]  Ну вот.
[02:23:12.300 --> 02:23:13.300]  Все.
[02:23:18.300 --> 02:23:19.300]  Да.
[02:23:19.300 --> 02:23:20.300]  Ну вот.
[02:23:29.300 --> 02:23:40.300]  Да, подлянка, подлянка доказательства заключается в том, что как бы я не знаю, как это придумали, то есть из каких идей можно это как бы вывести, как бы к сожалению алгоритм, но алгоритм вот у меня есть только в таком виде.
[02:23:41.300 --> 02:23:45.300]  То есть видно, вот такой алгоритм, вот такое доказательство, что он работает, да.
[02:23:46.300 --> 02:23:48.300]  Как это придумали, я не знаю.
[02:23:50.300 --> 02:23:54.300]  То есть как кто-то скажет, как говорится, как-то задача предвыдульный краф.
[02:23:57.300 --> 02:23:58.300]  Вот.
[02:23:59.300 --> 02:24:01.300]  Как говорится, кто-то тупо угадывает ответ.
[02:24:02.300 --> 02:24:04.300]  Ой, а вы угадали ответ?
[02:24:10.300 --> 02:24:13.300]  Ну вот это веселая задача типа там.
[02:24:14.300 --> 02:24:17.300]  Что-то дан краф, найдите в нем количество связанных под граф по модулю два.
[02:24:19.300 --> 02:24:20.300]  Угадали?
[02:24:21.300 --> 02:24:22.300]  Ну вот.
[02:24:22.300 --> 02:24:24.300]  То есть я один сидел, доказательство придумывал, да.
[02:24:29.300 --> 02:24:30.300]  Понятно.
[02:24:32.300 --> 02:24:33.300]  Ну да.
[02:24:35.300 --> 02:24:37.300]  Но я не запустил, честно говоря.
[02:24:37.300 --> 02:24:38.300]  Честно говоря, даже я никогда не умел угадать.
[02:24:38.300 --> 02:24:42.300]  То есть я угадал ответ, только когда у меня, собственно, он просто из аккуратных формул выявился.
[02:24:43.300 --> 02:24:44.300]  Но это уже ладно.
[02:24:45.300 --> 02:24:47.300]  Но это, к сожалению, не тот случай.
[02:24:49.300 --> 02:24:50.300]  Так что вот такая вот радость.
[02:24:50.300 --> 02:24:52.300]  То есть вот такая вот почему-то аккуратная радость.
[02:24:55.300 --> 02:24:58.300]  Так, ну что, есть ли тут какие-то вопросы?
[02:25:03.300 --> 02:25:04.300]  Ну давайте.
[02:25:04.300 --> 02:25:05.300]  Ну давайте.
[02:25:08.300 --> 02:25:10.300]  Есть, хорошо, у нас есть V от двух аргументов.
[02:25:10.300 --> 02:25:12.300]  Это разрез, понятно.
[02:25:12.300 --> 02:25:13.300]  Не разрез, тут сумма ребер.
[02:25:13.300 --> 02:25:14.300]  Ну да.
[02:25:14.300 --> 02:25:15.300]  Это понятно.
[02:25:15.300 --> 02:25:19.300]  У нас есть это значение V от C с одним аргументом.
[02:25:22.300 --> 02:25:24.300]  Это означает следующее.
[02:25:24.300 --> 02:25:25.300]  Берем множество.
[02:25:25.300 --> 02:25:27.300]  Берем все ребра в гем.
[02:25:27.300 --> 02:25:31.300]  И оставляем из этих ребер только те, кто пересекает C.
[02:25:33.300 --> 02:25:35.300]  Ну скажем так, да.
[02:25:35.300 --> 02:25:42.300]  В принципе, есть версии, в которых на самом деле вот это вот множество ребер называется C житое на самом деле.
[02:25:42.300 --> 02:25:43.300]  Хорошо.
[02:25:43.300 --> 02:25:45.300]  А с двумя аргументами?
[02:25:45.300 --> 02:25:49.300]  А с двумя это берем все ребра, соединяющие два множества.
[02:25:49.300 --> 02:25:53.300]  И ставим только те, кто пересекает C.
[02:25:53.300 --> 02:25:54.300]  Ну да.
[02:25:58.300 --> 02:26:01.300]  То есть иногда мы про них даже знаем.
[02:26:01.300 --> 02:26:06.300]  Нет, если мы про них знаем, что они лежат в разных долях C, то как бы...
[02:26:06.300 --> 02:26:08.300]  А, ну тогда мы C не пишем.
[02:26:09.300 --> 02:26:14.300]  А если не знаем, то пишем C и поговорим, что все, что не пересекает разрез, удаляем.
[02:26:16.300 --> 02:26:19.300]  Вот видите, в какой-то момент мы и перестали это писать.
[02:26:20.300 --> 02:26:33.300]  Мы уже доказали, что разрез, ограничение ребер на разрез в C, он больше ребра, чем та наша личность.
[02:26:33.300 --> 02:26:36.300]  А мы хотим доказать, что в целом разрез...
[02:26:36.300 --> 02:26:37.300]  А, понятно.
[02:26:37.300 --> 02:26:39.300]  Но нет, ну в конце мы как бы...
[02:26:39.300 --> 02:26:47.300]  В конце для вершины T просто это утверждение будет выглядеть, что если мы возьмем вообще все ребра разреза,
[02:26:47.300 --> 02:26:52.300]  то их вес больше либо равен, чем если мы T соединим со всеми вообще вершинами.
[02:26:52.300 --> 02:26:54.300]  И это ровно то, что нам надо.
[02:27:00.300 --> 02:27:01.300]  То есть картинка называется...
[02:27:01.300 --> 02:27:02.300]  Так получается.
[02:27:05.300 --> 02:27:07.300]  Вот такая вот неожиданная магия.
[02:27:07.300 --> 02:27:08.300]  Аккуратненько.
[02:27:08.300 --> 02:27:09.300]  Это реально магия.
[02:27:09.300 --> 02:27:10.300]  Ну да.
[02:27:11.300 --> 02:27:14.300]  Увы, буквально какая-то вот магия.
[02:27:14.300 --> 02:27:18.300]  Ну, собственно, по имени Матильды, в общем-то, это уже можно было ожидать что-то подобного.
[02:27:27.300 --> 02:27:28.300]  Неплохо.
[02:27:29.300 --> 02:27:31.300]  За помощь этими звездочками? Чего?
[02:27:36.300 --> 02:27:37.300]  Ну понятно, да.
[02:27:39.300 --> 02:27:41.300]  Не, ну мало ли там, что Дорти Вагнер это кто?
[02:27:45.300 --> 02:27:50.300]  Ну, это логично, потом мне приходит в голову, но это может быть...
[02:27:50.300 --> 02:27:53.300]  Не, ну ладно, мама это кошмал, вероятно, про маму обычно так и пишут.
[02:27:54.300 --> 02:27:57.300]  Ну или да, ну мало ли, может, это трехлетняя дочь.
[02:28:01.300 --> 02:28:02.300]  Ну мало ли, да.
[02:28:03.300 --> 02:28:04.300]  Нет, ну почему нет?
[02:28:05.300 --> 02:28:07.300]  Как вы это, ей приснилось, да.
[02:28:07.300 --> 02:28:10.300]  Так, ребят, напишите, вот так и зайдет.
[02:28:11.300 --> 02:28:13.300]  Да, да, да, да, да.
[02:28:14.300 --> 02:28:19.300]  Ну это да, но, сравнивая, но Рамуру Джан, когда ему все это приснилось, он все-таки уже не трехлетний батюшка был.
[02:28:26.300 --> 02:28:27.300]  Что-то...
[02:28:28.300 --> 02:28:29.300]  Ого.
[02:28:29.300 --> 02:28:32.300]  Что-то вот вместо, ну в том числе похоже.
[02:28:33.300 --> 02:28:35.300]  Короче, это не с потолка, наверное, взято?
[02:28:36.300 --> 02:28:37.300]  Ну...
[02:28:37.300 --> 02:28:38.300]  А как-то...
[02:28:38.300 --> 02:28:39.300]  Что значит не с потолка?
[02:28:39.300 --> 02:28:40.300]  Ну да.
[02:28:40.300 --> 02:28:42.300]  Люди придумали где-то...
[02:28:43.300 --> 02:28:46.300]  Стоп, или это появилось раньше DX?
[02:28:47.300 --> 02:28:49.300]  Нет, это появилось после «Собачьего курица».
[02:28:53.300 --> 02:28:54.300]  Ну да.
[02:28:56.300 --> 02:28:57.300]  Нет.
[02:28:59.300 --> 02:29:00.300]  Ну вообще, там все...
[02:29:00.300 --> 02:29:02.300]  Такая идея совсем популярна, в самом деле.
[02:29:03.300 --> 02:29:05.300]  В ссылках на реальную студию есть какой-то...
[02:29:05.300 --> 02:29:06.300]  И ссылка на примок.
[02:29:08.300 --> 02:29:14.300]  Нет, это немножко не о том, понимаете, это как бы уже механика, собственно, реализация алгоритма.
[02:29:14.300 --> 02:29:16.300]  Да, она похожа на там DX, да.
[02:29:17.300 --> 02:29:18.300]  Но она...
[02:29:18.300 --> 02:29:19.300]  А это одно и то же.
[02:29:19.300 --> 02:29:22.300]  Да, DX, то есть механика здесь одинакова.
[02:29:22.300 --> 02:29:27.300]  То есть более интересно, на самом деле, откуда придумали, что вот такой жакник вообще работает, условно.
[02:29:27.300 --> 02:29:30.300]  Ну для меня всегда была магия, как придумывать жакники.
[02:29:30.300 --> 02:29:32.300]  По крайней мере, доказательная.
[02:29:37.300 --> 02:29:41.300]  Ну если это стандартная жадность на матроидах, то, конечно, да.
[02:29:42.300 --> 02:29:44.300]  Не, возможно, они просто анализируют...
[02:29:44.300 --> 02:29:49.300]  Они придумали идею с тем, как можно брать любые две вершины, какие-то вершины между ними разрезают, так как склеивать.
[02:29:49.300 --> 02:29:54.300]  Возможно, они заметили, что существует паттерн, в котором это будет одна вершина.
[02:29:55.300 --> 02:29:56.300]  Они это заметили.
[02:29:56.300 --> 02:29:57.300]  Ну может.
[02:29:58.300 --> 02:29:59.300]  Ну может, я не знаю.
[02:29:59.300 --> 02:30:01.300]  То есть это уже отдельная песня.
[02:30:02.300 --> 02:30:03.300]  Чего-то их знает.
[02:30:03.300 --> 02:30:04.300]  Ладно.
[02:30:04.300 --> 02:30:05.300]  Давай.
[02:30:05.300 --> 02:30:06.300]  Так.
[02:30:06.300 --> 02:30:07.300]  Так, ладно.
[02:30:07.300 --> 02:30:08.300]  Тут еще какие-то вопросы есть?
[02:30:11.300 --> 02:30:12.300]  Так, видимо, ладно.
[02:30:12.300 --> 02:30:13.300]  Нет.
[02:30:13.300 --> 02:30:14.300]  Так, все.
[02:30:14.300 --> 02:30:16.300]  Значит, как у нас приятная в этом смысле лекция?
[02:30:16.300 --> 02:30:17.300]  Все.
[02:30:17.300 --> 02:30:19.300]  Опять очищаем картинку и начинаем думать о другой задике.
[02:30:20.300 --> 02:30:21.300]  Так, ну ладно.
[02:30:21.300 --> 02:30:22.300]  Такое же, на самом деле.
[02:30:23.300 --> 02:30:24.300]  Ну почти такое же.
[02:30:24.300 --> 02:30:25.300]  Ладно.
[02:30:26.300 --> 02:30:27.300]  Ну ладно, не такое же.
[02:30:28.300 --> 02:30:29.300]  Так, ну хорошо.
[02:30:29.300 --> 02:30:32.300]  Короче, данный ориентированный граф.
[02:30:32.300 --> 02:30:34.300]  Найдите разрезы между всеми парами вершин.
[02:30:41.300 --> 02:30:46.300]  Но для любой паре вершин найдите минимальный разрез.
[02:30:46.300 --> 02:30:48.300]  В чем, что самое смешное?
[02:30:48.300 --> 02:30:50.300]  Желательный сам разрез тоже.
[02:30:56.300 --> 02:30:59.300]  Ну да, можно это сделать за n квадрат на поиск потока.
[02:31:00.300 --> 02:31:03.300]  А мы это сделаем за n на поиск потока.
[02:31:06.300 --> 02:31:09.300]  Но на самом деле интересен может даже не сок сам алгоритм.
[02:31:09.300 --> 02:31:10.300]  Хотя алгоритм тоже интересен.
[02:31:11.300 --> 02:31:15.300]  Сколько то, в каком виде мы выдадим ответ на задачу.
[02:31:25.300 --> 02:31:26.300]  Еще круче.
[02:31:26.300 --> 02:31:29.300]  Если какой-то разрез, у нас есть какие-то две доли.
[02:31:29.300 --> 02:31:35.300]  И вот для всех вершин из одной пары вершин, где одна из одной доли, другая из другой.
[02:31:35.300 --> 02:31:36.300]  Тут не доли, но понятно.
[02:31:37.300 --> 02:31:38.300]  Мы уже нашли ответ.
[02:31:39.300 --> 02:31:41.300]  Все еще круче.
[02:31:43.300 --> 02:31:50.300]  Нет, как говорится, потому что подсказка в названии темы.
[02:31:52.300 --> 02:31:55.300]  А тема называется дерево гомовиху.
[02:31:55.300 --> 02:31:57.300]  Идея оказывается такая.
[02:31:58.300 --> 02:32:20.300]  Оказывается, что для любого графа существует мистическое дерево.
[02:32:26.300 --> 02:32:28.300]  Не, именно дерево, не куча.
[02:32:29.300 --> 02:32:31.300]  Вот такое дерево на тех же самых вершинах.
[02:32:34.300 --> 02:32:36.300]  Вершины абсолютно те же.
[02:32:36.300 --> 02:32:39.300]  Веса какие-то веселые там.
[02:32:42.300 --> 02:32:44.300]  На которых минимальные разрезы.
[02:32:45.300 --> 02:32:51.300]  Дерево такое, что минимальные разрезы на этом дереве такие же, как в исходном графе.
[02:32:52.300 --> 02:32:55.300]  То есть искать их нужно будет так.
[02:32:55.300 --> 02:33:00.300]  Если вы хотите между вот этой вершиной и этой вершиной найти минразрез, что вы сделаете?
[02:33:00.300 --> 02:33:03.300]  Найдете на пути минимальное ребро.
[02:33:03.300 --> 02:33:05.300]  Вот допустим вот это вот.
[02:33:05.300 --> 02:33:07.300]  И проведете вот такой разрез.
[02:33:12.300 --> 02:33:18.300]  Самое эпическое, что совпадут и величины разрезов, и сами разрезы.
[02:33:18.300 --> 02:33:23.300]  То есть это вот минимальный разрез, как разбиение на вот такие множество тоже будет работать.
[02:33:30.300 --> 02:33:32.300]  Как говорится, может показаться...
[02:33:37.300 --> 02:33:43.300]  Хотя самое смешное, что если брать пока не разрезы, а просто хотя бы величины,
[02:33:43.300 --> 02:33:47.300]  то на самом деле оказывается не так сложно это понять.
[02:33:49.300 --> 02:33:53.300]  Что существует такое дерево?
[02:33:53.300 --> 02:33:59.300]  Допустим пока не верим только в величины, но не верим в сами разрезы.
[02:33:59.300 --> 02:34:03.300]  И на самом деле про величины это сделать можно.
[02:34:03.300 --> 02:34:05.300]  Потому что идея такая.
[02:34:05.300 --> 02:34:07.300]  Вот Жил был граф.
[02:34:07.300 --> 02:34:11.300]  Мы можем ввести такую матрицу F от G.
[02:34:11.300 --> 02:34:30.300]  Введем такую матрицу F от IG, где F и G это просто мин разрез между I и G.
[02:34:30.300 --> 02:34:32.300]  Просто матрица.
[02:34:34.300 --> 02:34:37.300]  Мистическое утверждение, которое нам поможет.
[02:34:42.300 --> 02:34:48.300]  Нет, еще круче.
[02:35:00.300 --> 02:35:03.300]  Так вот возникает такое интересное утверждение.
[02:35:03.300 --> 02:35:09.300]  Давайте, думаю, если вы сейчас 10 секунд помедицируете, вы даже поймете, откуда оно взялось.
[02:35:11.300 --> 02:35:21.300]  Возьмем F и K меньше, чем F и G.
[02:35:21.300 --> 02:35:25.300]  Да, просто возьмем разрез и K.
[02:35:31.300 --> 02:35:33.300]  Ну да, все.
[02:35:34.300 --> 02:35:36.300]  Ну да.
[02:35:36.300 --> 02:35:37.300]  А F и K, да.
[02:35:37.300 --> 02:35:41.300]  Если K прилежит вместе с G, то тогда F и G вынуждено будет больше либо равно, чем F и K.
[02:35:41.300 --> 02:35:46.300]  Потому что просто F и G это будет лично какого-то разреза между I и K.
[02:35:46.300 --> 02:35:49.300]  А F и K это минимальный разрез.
[02:35:52.300 --> 02:35:54.300]  Так вот, следствие.
[02:35:55.300 --> 02:36:09.300]  F и G больше либо равно минимума из F и K1, F, K1, K2, F, K2, K3 и так далее.
[02:36:09.300 --> 02:36:21.300]  F, K, B, G.
[02:36:25.300 --> 02:36:28.300]  Ну я тут не буду эти кванты рисовать, я думаю так понятно.
[02:36:29.300 --> 02:36:30.300]  Ну в общем-то да.
[02:36:30.300 --> 02:36:33.300]  Ну выводится отсюда достаточно легко, да?
[02:36:34.300 --> 02:36:36.300]  Или не выводится?
[02:36:39.300 --> 02:36:40.300]  Вроде выводится, да.
[02:36:45.300 --> 02:36:47.300]  Ну по сути да.
[02:36:49.300 --> 02:36:52.300]  Да, просто рассмотрим любую последовательность вершин.
[02:36:53.300 --> 02:36:56.300]  И оказывается, это очень похоже на кое-что.
[02:36:58.300 --> 02:37:02.300]  Да, это должно чем-то напоминать остовные деревья.
[02:37:02.300 --> 02:37:12.300]  Ну потому что фишка в том, что, да, там оказывалось, что, ну давайте так.
[02:37:12.300 --> 02:37:21.300]  Правда, в минимальном асторе было верно, что любое E, I, T, G, T оно должно было быть что?
[02:37:21.300 --> 02:37:29.300]  Оно должно было быть больше либо равно максимума из E и K1, E, K1, K2, да?
[02:37:29.300 --> 02:37:34.300]  Да, там бла-бла-бла, E, K, P, T, G.
[02:37:34.300 --> 02:37:36.300]  Если у нас такой цикл есть, да?
[02:37:38.300 --> 02:37:42.300]  То есть вот это вот ребро E и G, а это вот цикл в дереве, да?
[02:37:42.300 --> 02:37:48.300]  Тогда если оно оказалось меньше этого максимума, то давайте максимум из цикла удалим, это добавим, получилось меньше.
[02:37:49.300 --> 02:37:50.300]  Что?
[02:37:51.300 --> 02:37:53.300]  Возможно, не знаю.
[02:37:54.300 --> 02:37:55.300]  Знаю просто как утверждение.
[02:37:56.300 --> 02:37:57.300]  Так вот, фишка такая.
[02:37:57.300 --> 02:37:58.300]  Наверное, всегда.
[02:37:59.300 --> 02:38:08.300]  Но с другой стороны, заметим, теперь у меня идея такая, а давайте-ка я в этих f-ках возьму максимальный остов.
[02:38:09.300 --> 02:38:13.300]  Да, можно брать минимальный, а можно максимальный, в общем-то одно и то же, только со знаком минус, да?
[02:38:14.300 --> 02:38:15.300]  Максимальный по размерам.
[02:38:16.300 --> 02:38:18.300]  Да, по суммарной стоимости f.
[02:38:19.300 --> 02:38:23.300]  Да, то есть я рассмотрю граф, у которого матрица смежности вот такая,
[02:38:24.300 --> 02:38:26.300]  и возьму в этом графе максимальный остов.
[02:38:29.300 --> 02:38:36.300]  То есть пусть у меня T это максимальный остов в вот этой вот, так сказать, матрице f.
[02:38:44.300 --> 02:38:48.300]  Ну, минимальный остов минимальный, а максимальный остов максимальный.
[02:38:49.300 --> 02:38:51.300]  Да, да, идея, да, идея на…
[02:38:54.300 --> 02:39:02.300]  Нет, пока у нас задача убедиться, что вот это вот это не плотно какой-то там больной фантазии.
[02:39:04.300 --> 02:39:05.300]  Хоть на сколько-то.
[02:39:06.300 --> 02:39:08.300]  Так вот, рассмотрим вот такое дерево.
[02:39:09.300 --> 02:39:12.300]  Тогда смотрите, тогда у этого дерева маленькая приятная вещь.
[02:39:13.300 --> 02:39:18.300]  То есть смотрите, у любой вершины ИG есть путь по Т.
[02:39:19.300 --> 02:39:23.300]  И, допустим, Т1, Т2 и так далее, Тq, Тg.
[02:39:24.300 --> 02:39:25.300]  Вот какой-то путь.
[02:39:28.300 --> 02:39:29.300]  Но смотрите, что мы знаем.
[02:39:30.300 --> 02:39:31.300]  Но смотрите, что мы знаем.
[02:39:32.300 --> 02:39:49.300]  Мы знаем, что f и g больше либо равно, чем минимум из f и f, f, t1, t2, f, t2, t3 и так далее, f, tq, g.
[02:39:51.300 --> 02:39:53.300]  Это мы просто знаем, потому что это всегда верно.
[02:39:54.300 --> 02:40:08.300]  Но по свойству максимума, оказывается, что f и g меньше либо равно минимума.
[02:40:09.300 --> 02:40:12.300]  Потому что если бы оно было строго больше минимума, тогда мы могли бы улучшить остов.
[02:40:23.300 --> 02:40:33.300]  Вот так что вывод очевиден.
[02:40:34.300 --> 02:40:35.300]  f и g тупо равен этому минимуму.
[02:40:38.300 --> 02:40:39.300]  Но что это означает?
[02:40:40.300 --> 02:40:44.300]  Практически это означает следующее, что если у вас такой остов вам дали,
[02:40:45.300 --> 02:40:48.300]  то для того, чтобы найти разрез хотя бы на уровне его величины,
[02:40:48.300 --> 02:40:53.300]  надо просто в этом дереве найти минимальное ребро.
[02:40:55.300 --> 02:40:59.300]  То есть дерево Гамариху, по крайней мере, в ослабленной версии вообще существует.
[02:41:02.300 --> 02:41:04.300]  Ну да, в численной хотя бы версии.
[02:41:05.300 --> 02:41:07.300]  Это, конечно, вообще пока не гарантирует.
[02:41:08.300 --> 02:41:09.300]  У нас будет сейчас более усиленная версия.
[02:41:10.300 --> 02:41:16.300]  Мы не только построим дерево, там за быстрее, чем за построить эту матрицу.
[02:41:17.300 --> 02:41:21.300]  Ну ладно, потом при желании матрица уже легко строится, естественно.
[02:41:22.300 --> 02:41:24.300]  Но мы построим дерево быстрее, чем построить матрицу в тупую.
[02:41:25.300 --> 02:41:33.300]  И еще будем строить так, что у нас окажется, что минимальные разрезы будут находиться буквально вот так.
[02:41:34.300 --> 02:41:38.300]  В частности, между каждой этой парой вершин минимальный разрез будет буквально вот такой.
[02:41:41.300 --> 02:41:43.300]  То есть вот такую неожиданную мистику мы делаем.
[02:41:43.300 --> 02:41:45.300]  Чем алгоритм, в общем-то, будет достаточно простой.
[02:41:46.300 --> 02:41:52.300]  Ну если у вас в кармане лежит что-то типа «возьми граф, возьми две вершины, найди минимальный разрез».
[02:41:55.300 --> 02:41:58.300]  Вот. То есть это, в общем-то, будет достаточно легко.
[02:41:59.300 --> 02:42:04.300]  Так, но, однако, если верить хронометражу, то сейчас пришло время перерыва.
[02:42:05.300 --> 02:42:09.300]  Так, давайте поехали, мы задержались, как всегда.
[02:42:10.300 --> 02:42:15.300]  Вот. Итак, как же мы будем вот это вот дерево искать только уже с разрезами?
[02:42:16.300 --> 02:42:17.300]  Как мы его будем искать?
[02:42:19.300 --> 02:42:24.300]  Ну, для этого, для разминочки докажем одну маленькую приятную лему.
[02:42:25.300 --> 02:42:27.300]  Да, лема приятная, доказательства не очень.
[02:42:28.300 --> 02:42:30.300]  Почему? Потому что я никогда детали не помню.
[02:42:33.300 --> 02:42:34.300]  Значит, смотрите.
[02:42:35.300 --> 02:42:37.300]  Базироваться будем вот на чем?
[02:42:37.300 --> 02:42:38.300]  Базироваться будем вот на чем?
[02:42:39.300 --> 02:42:40.300]  Смотрите.
[02:42:42.300 --> 02:42:49.300]  Сейчас вот концентрируйтесь, потому что доказательства, честно скажу, такое вот, скажем так, повырубаться надо неприлично.
[02:42:51.300 --> 02:42:53.300]  Значит, смотрите, идея такая.
[02:42:56.300 --> 02:42:59.300]  Жили-были вершины и ежи.
[02:43:04.300 --> 02:43:05.300]  Вот.
[02:43:08.300 --> 02:43:12.300]  Вот у нас есть граф и есть вершины и ежи.
[02:43:13.300 --> 02:43:14.300]  Ладно, х игрок.
[02:43:19.300 --> 02:43:20.300]  Ладно, все лема, давайте.
[02:43:23.300 --> 02:43:33.300]  Значит, пусть у меня есть вершины и х игрок, и пусть у меня есть разрез А, а с тильдой это вот, где вот А лежит нот.
[02:43:34.300 --> 02:43:44.300]  Это мин разрез для, значит, соответственно, х игр.
[02:43:47.300 --> 02:43:48.300]  Понятно, да?
[02:43:50.300 --> 02:43:56.300]  Пусть х' и y' лежат, ну, допустим, в доле А.
[02:44:04.300 --> 02:44:06.300]  Тогда, ну, сформулирую так.
[02:44:07.300 --> 02:44:10.300]  Существует минимальный разрез.
[02:44:15.300 --> 02:44:17.300]  Там, b, b с тильдой.
[02:44:22.300 --> 02:44:24.300]  Для х, для х' и х'.
[02:44:27.300 --> 02:44:28.300]  Такой, что
[02:44:33.300 --> 02:44:41.300]  А с тильдой целиком лежит в b или целиком лежит в b с тильдой.
[02:44:46.300 --> 02:44:49.300]  Значит, перевожу на человеческий язык.
[02:44:51.300 --> 02:44:56.300]  Предположим, что вы взяли х игрок и нашли тут какой-то разрез.
[02:44:59.300 --> 02:45:02.300]  И вот у вас тут какие-то вершины и тут какие-то вершины.
[02:45:03.300 --> 02:45:08.300]  Вот фишка такая, если рассмотреть вот эти две вершины в этой доле,
[02:45:08.300 --> 02:45:13.300]  то когда вы ищете разрез, утверждается, что вот эти вершины можно сжать в одну,
[02:45:15.300 --> 02:45:17.300]  которые лежат в другой доле.
[02:45:18.300 --> 02:45:21.300]  И хуже от этого не станет.
[02:45:24.300 --> 02:45:26.300]  То есть вот такая вот неожиданная идея.
[02:45:33.300 --> 02:45:35.300]  И спрашивается, как же это доказывать?
[02:45:36.300 --> 02:45:39.300]  Но начало доказательства как раз понятное.
[02:45:41.300 --> 02:45:42.300]  Рассмотрим.
[02:45:43.300 --> 02:45:47.300]  Ну, рассмотрим у нас тут. Тут у нас будут доли a с тильдой,
[02:45:47.300 --> 02:45:50.300]  и тут будут b и b с тильдой.
[02:45:53.300 --> 02:45:55.300]  То есть где-то у нас тут лежит.
[02:45:55.300 --> 02:45:59.300]  Ну, без ограничения пока общности х будет лежать где-то здесь.
[02:46:00.300 --> 02:46:01.300]  Вот.
[02:46:02.300 --> 02:46:07.300]  Ну и без особого ограничения общности здесь будет лежать х' а здесь y'.
[02:46:09.300 --> 02:46:12.300]  Вот с игроком у нас ограничение общности так просто уже не получится.
[02:46:12.300 --> 02:46:14.300]  Потому что игрок будет лежать либо здесь, либо здесь.
[02:46:14.300 --> 02:46:17.300]  И это, формально говоря, два разных случая.
[02:46:18.300 --> 02:46:23.300]  Вот. Значит тут у вас в любом случае тут какие-то, тут какие-то и тут будет игрок.
[02:46:24.300 --> 02:46:25.300]  Ну, пока будет тут.
[02:46:25.300 --> 02:46:29.300]  Ну, хотя я утверждаю, что дальше будет то же самое капсул.
[02:46:30.300 --> 02:46:35.300]  Ну, как тот алгоритм поиска суммы, там сумма фиатен, для n 1,19 за две трети.
[02:46:36.300 --> 02:46:40.300]  Да, как бы я этот алгоритм не знаю, но это общеизвестный алгоритм.
[02:46:41.300 --> 02:46:42.300]  Вот, Сергей Капельевич.
[02:46:44.300 --> 02:46:45.300]  Вот.
[02:46:46.300 --> 02:46:47.300]  Так вот.
[02:46:48.300 --> 02:46:49.300]  Ну, давайте думать.
[02:46:49.300 --> 02:46:51.300]  Ну, смотрите, что у нас тогда получилось.
[02:46:52.300 --> 02:46:56.300]  Значит, хочется доказать, видимо, да, что если у нас вот они так разложились,
[02:46:57.300 --> 02:47:01.300]  то мы могли бы на самом деле одно из этих множеств как бы перегнать вот сюда,
[02:47:02.300 --> 02:47:04.300]  то есть либо это сюда, либо это сюда, идти похуже не станет.
[02:47:06.300 --> 02:47:07.300]  Понятно, да?
[02:47:07.300 --> 02:47:08.300]  Ну да.
[02:47:08.300 --> 02:47:10.300]  Мы хотим доказать, что мы все вот это можем сжать в одну решку.
[02:47:11.300 --> 02:47:15.300]  Но для этого нам нужно доказать, что как бы на самом деле там, вот в этой картинке,
[02:47:16.300 --> 02:47:18.300]  ну, как бы везде вершины какие-то есть, да?
[02:47:19.300 --> 02:47:23.300]  Но хочется показать, что, если мы перегоним это в одну решку,
[02:47:24.300 --> 02:47:29.300]  что мы бы не смогли бы на самом деле сжать в эту прошлую решку в эту緩 sair,
[02:47:29.300 --> 02:47:42.100]  В этой картинке везде вершины какие-то есть, но хочется показать, что если мы перегоним все вершины вот сюда или, наоборот, все вершины вот сюда, то типа хуже не станет.
[02:47:42.100 --> 02:47:54.900]  Значит, как же мы это будем делать? Делать мы это будем следующим образом.
[02:47:54.900 --> 02:48:10.500]  Давайте подумаем, давайте попробуем перегнать вот эти вершины сюда. В каком смысле это будет не хуже? А что нам нужно не хуже?
[02:48:11.460 --> 02:48:21.700]  Нам нужно чтобы вот этот вот разрез, то есть нам очень хочется, чтобы от этого не увеличился разрез между х' и у', правда?
[02:48:23.700 --> 02:48:30.020]  А что это сейчас за разрез х' и у'? Сейчас этот разрез можно представить в следующем виде.
[02:48:30.660 --> 02:48:33.380]  Его можно представить в виде f, a, b.
[02:48:34.260 --> 02:48:36.260]  Нет, вру.
[02:48:36.260 --> 02:49:01.300]  Там f, значит, там a, b, даже не a, b, а и b, ну да, f, да, правильно, нет, ну, ой, ну, конечно, такое, ну, что поделать, ладно, давайте один, ну ладно, давайте один, два, три, четыре, хорошо.
[02:49:02.180 --> 02:49:05.460]  Так, как назвать один, два, три, четыре? Ну, давайте вот так.
[02:49:07.460 --> 02:49:23.700]  Так, и у нас тогда получается f, значит, тогда у нас разрез вот этот, это у нас что такое? Это f, 1, 2, плюс f, 1, 4, плюс f, 3, 2, плюс f, 3, 4, да?
[02:49:24.580 --> 02:49:38.100]  Это вот текущий вот этот разрез. Нам очень хочется показать, что он больше либо равен такого же разреза, только, например, если вот эти вершины пойдут сюда. Понятно, да?
[02:49:38.100 --> 02:49:44.100]  Ну, вот, ну, например, нас устроит, но если вот это пойдет сюда, то тогда что получится?
[02:49:44.500 --> 02:50:02.500]  Ну, вот что, ну вот, то есть если вот это пойдет сюда, то величина разреза получится как бы f, 2, 1, плюс f, 2, 3, плюс f, 2, 4, то есть фактически разрез проходит вот так, видно, да?
[02:50:02.900 --> 02:50:16.900]  Или что еще? Ну, вот, или нас, ну, вот, ну, или еще бы устроило, чтобы вот этот тройбан бы сюда пришел, да? То есть вот. Или еще хочется, вот.
[02:50:16.900 --> 02:50:30.900]  Но я не утверждаю, что оба эти утверждения верны, но какой-то из них мне бы очень было бы занятно доказать. То есть f, 1, 2, плюс там f, 1, 4, плюс f, 1, 3, вот так.
[02:50:32.900 --> 02:50:34.900]  Так.
[02:50:36.900 --> 02:50:38.900]  Так. Ну, давайте, да.
[02:50:40.900 --> 02:50:46.900]  Да. Ну, заметим, да, оба раза на самом деле можно тут пошлеп-шлепать, конечно, да.
[02:50:46.900 --> 02:50:50.900]  Но я вам даже больше скажу. Здесь можно еще вот это пошлеп-шлепать.
[02:50:52.900 --> 02:50:54.900]  А тут 2, 3. А тут да. Совершенно верно.
[02:50:55.300 --> 02:51:07.300]  Так. То есть теперь у нас f, 1, 4, то есть хочется доказать либо вот такую сумму. А что это за сумма? f, 1, 4, плюс, то есть это, плюс это должно быть больше либо равно, чем вот это.
[02:51:09.300 --> 02:51:21.300]  Или, наоборот, f, 3, 2, или вот это, плюс вот это должно быть больше либо равно, чем, соответственно, вот это.
[02:51:21.700 --> 02:51:27.700]  Так. Ну, давайте смотреть, хотя вот, не знаю, поторопились ли мы, конечно, сокращать или не поторопились.
[02:51:29.700 --> 02:51:37.700]  Так. Ну, с другой стороны, смотрите, на самом деле, давайте попробуем рассмотреть все-таки про вот это равенство, с единичкой.
[02:51:45.700 --> 02:51:49.700]  Так. f, 3, 2, плюс f, 3, 4 больше, чем f, 2, 4?
[02:51:50.100 --> 02:51:52.100]  Да.
[02:51:52.100 --> 02:51:58.100]  Потому что f, 3, 2, плюс f, 3, 4 равняется f, 2, 3, плюс f, 3, 4.
[02:51:58.100 --> 02:52:12.100]  И воспользоваться тем, что сумма этих величин, она больше либо равно, чем f, 2, 3, плюс f, 3, 4, это на самом деле больше, чем f, 2, 4.
[02:52:12.500 --> 02:52:14.500]  Почему?
[02:52:14.500 --> 02:52:20.500]  Потому что мы доказали, что f и g больше либо равно, чем f и k.
[02:52:20.500 --> 02:52:22.500]  Да, но это же вы не учитывайте.
[02:52:22.500 --> 02:52:26.500]  Это же надо, во-первых, полные разрезы брать, в том числе и с единичкой.
[02:52:26.500 --> 02:52:28.500]  А это мы тут какие-то подморжиства взяли.
[02:52:28.900 --> 02:52:30.900]  Вот.
[02:52:30.900 --> 02:52:32.900]  Нет.
[02:52:32.900 --> 02:52:34.900]  Смотрите, надо, как тут такое доказывать?
[02:52:34.900 --> 02:52:40.900]  Надо как-то, наверное, пытаться пользоваться тем, что вот эти вот разрезы, ну, как бы...
[02:52:40.900 --> 02:52:46.900]  Ну, ладно, про вот этот разрез мы, конечно, не знаем, что минимальный, а вот этот x y мы уже точно знаем, что он минимальный.
[02:52:47.300 --> 02:52:49.300]  Вот.
[02:52:49.300 --> 02:53:07.300]  То есть в принципе это означает, что мы знаем, что f, 1, 3, плюс f, 1, 4, плюс f, 2, 3, плюс f, 3, 4 меньше либо равен, чем шо.
[02:53:11.300 --> 02:53:15.300]  Ну, в принципе, чем какой-то абсолютно любой разрез.
[02:53:15.700 --> 02:53:17.700]  Ну, какой разрез тут можно?
[02:53:17.700 --> 02:53:23.700]  Ладно, раз уж у нас тут мельтешат вот эти трибаны, давайте с трибаном напишем.
[02:53:23.700 --> 02:53:29.700]  Я могу, например, сказать, что это меньше либо равно, чем f, 3, 1, плюс f, 3, 2, плюс f, 3, 4.
[02:53:29.700 --> 02:53:31.700]  Пока вроде логично, да?
[02:53:31.700 --> 02:53:33.700]  Так, окей.
[02:53:33.700 --> 02:53:37.700]  Тогда, ну, в этом неравенстве шлёп-шлёп, шлёп-шлёп.
[02:53:37.700 --> 02:53:39.700]  Ой, какая красота.
[02:53:41.700 --> 02:53:43.700]  Так.
[02:53:44.100 --> 02:53:46.100]  Ой, чего?
[02:53:48.100 --> 02:53:52.100]  А, нет, нет, нет, нет, нет, нет, неправильно, неправильно, неправильно, неправильно, неправильно.
[02:53:52.100 --> 02:53:54.100]  Потому что тут f, 2, 4 всё-таки.
[02:53:54.100 --> 02:53:58.100]  Да, 3, 4 рано сбрасывается из счетов.
[02:53:58.100 --> 02:54:02.100]  Да, то есть 3, 2 там и скинули, но вот надо, а, вот так надо.
[02:54:04.100 --> 02:54:06.100]  Вот, видно, да?
[02:54:10.100 --> 02:54:12.100]  Ну, вот, да. Ну, давайте смотреть.
[02:54:12.500 --> 02:54:16.500]  Чем это нам, соответственно, помогает?
[02:54:18.500 --> 02:54:22.500]  Ну, вот, это, ну, вот, чем это нам, соответственно, помогает?
[02:54:24.500 --> 02:54:30.500]  Но, в принципе, я утверждаю, что вообще-то мы уже на халяву доказали вот это неравенство.
[02:54:32.500 --> 02:54:34.500]  Да.
[02:54:34.500 --> 02:54:36.500]  Причина очень проста.
[02:54:36.500 --> 02:54:40.500]  Да, напоминаю, у нас ребра не отрицательные, да?
[02:54:40.900 --> 02:54:52.900]  Поэтому, в принципе, отсюда автоматически следует, что f, 3, 4, то есть больше либо равно f, 2, 4 плюс f, 1, 4, а это больше либо равно, чем f, 2, 4.
[02:54:54.900 --> 02:54:58.900]  А это меньше либо равно, чем f, 3, 4 плюс f, 1, 4.
[02:55:00.900 --> 02:55:02.900]  По-моему, я тупо получил вот это неравенство.
[02:55:06.900 --> 02:55:08.900]  Оп.
[02:55:09.300 --> 02:55:11.300]  Ну, да.
[02:55:11.300 --> 02:55:13.300]  Не, ну, какой-то из них.
[02:55:13.300 --> 02:55:19.300]  Второе может понадобиться, скорее всего, если игрок окажется здесь, то вам придется пользоваться вторым.
[02:55:19.300 --> 02:55:21.300]  Да.
[02:55:21.300 --> 02:55:23.300]  То есть в данном случае верным оказалось вот это.
[02:55:23.300 --> 02:55:29.300]  Ну, я просто честно скажу, я не помню точно никогда деталей, поэтому вот так.
[02:55:29.300 --> 02:55:31.300]  Так что вот такая радость.
[02:55:31.700 --> 02:55:33.700]  Так что вот смотрите.
[02:55:33.700 --> 02:55:41.700]  То есть, как я сказал, к сожалению, формально говоря, когда игрок лежит здесь, это другой случай, но он, доказывается, аналогичный.
[02:55:45.700 --> 02:55:47.700]  Вот.
[02:55:47.700 --> 02:55:49.700]  Сейчас мы попробуем этим пользоваться.
[02:55:49.700 --> 02:55:51.700]  Значит, это мы только немножко разомнулись.
[02:55:51.700 --> 02:55:53.700]  Теперь, мы говорим так.
[02:55:53.700 --> 02:55:57.700]  Ну, то есть это в принципе уже намекает, конечно, на то, что, действительно, что когда мы делим…
[02:55:57.700 --> 02:56:06.700]  когда мы делим, то есть когда мы между их сыгрок нашли минразрез, то тогда оказывается, что когда мы берем,
[02:56:06.700 --> 02:56:14.700]  то есть когда мы ищем разрезы между вот парами вершин, парами вершин, лежащими в одной доле разреза,
[02:56:14.700 --> 02:56:17.700]  вторую можно также сжимать.
[02:56:17.700 --> 02:56:20.700]  Понятно, да?
[02:56:20.700 --> 02:56:28.700]  Так что вот такая нот, то есть вот такая вот у нас мечта. Именно между вот этими вот двумя, соответственно.
[02:56:28.700 --> 02:56:32.700]  Да, это конечно правда еще вообще не доказывает, например, такой факт.
[02:56:32.700 --> 02:56:39.700]  То есть верно ли, что минимальный разрез между вот этой вершиной и вот этой вершиной именно такой?
[02:56:39.700 --> 02:56:46.700]  Ну то есть вообще говоря не факт. Нет, в принципе...
[02:56:46.700 --> 02:56:48.700]  Нет, вообще не факт.
[02:56:48.700 --> 02:56:57.700]  Нет, есть конечно... Нет, в принципе, конечно, если у нас была мечта построить дерево гомориху в слабой версии,
[02:56:57.700 --> 02:57:04.700]  ну что такое слабая версия, это типа просто построить дерево гомориху, чтобы просто величины разреза были правильные,
[02:57:04.700 --> 02:57:09.700]  то я могу сейчас предъявить алгоритм ЗН в четвертый.
[02:57:09.700 --> 02:57:17.700]  То есть алгоритм очень простой. А давайте просто найдем вообще глобально минимальный разрез, тупо Шторм Вартером.
[02:57:18.700 --> 02:57:22.700]  Вот там нашли бабах и бабах.
[02:57:22.700 --> 02:57:30.700]  Типа тут какая-то доля, тут такая доля. Я не случайно тут рисую что-то похожее на мета вершины.
[02:57:30.700 --> 02:57:37.700]  Потому что теперь просто идея будет в том, что давайте...
[02:57:37.700 --> 02:57:45.700]  Теперь просто идея такая, между любой парой вершин такой, что одна берется отсюда, другая отсюда, ответ будет действительно вот такой.
[02:57:45.700 --> 02:57:52.700]  То есть вот именно вот этот разрез, правда? А хотя нет, я даже сейчас и в сильной версии построю.
[02:57:52.700 --> 02:58:01.700]  Потому что теперь у меня идея такая, давайте-ка я рекурсивно попробую найти все вот эти вот там минимальные разрезы,
[02:58:01.700 --> 02:58:06.700]  тут какие-то деревья внутри вот этой доли, при этом сжав вот эту.
[02:58:06.700 --> 02:58:09.700]  Как-то, да?
[02:58:09.700 --> 02:58:12.700]  Что?
[02:58:12.700 --> 02:58:19.700]  Да, просто в одну вершину. Ну, по крайней мере, минимальные разрезы здесь все вроде как там связаны.
[02:58:19.700 --> 02:58:25.700]  И тогда эти деревья можно там прицепить. То есть тогда тут получится какое-то дерево, тут получится какое-то дерево,
[02:58:25.700 --> 02:58:31.700]  давайте соединим их ребром просто за абсолютно любые вершины нам по барабану какие.
[02:58:31.700 --> 02:58:36.700]  И получится, казалось бы, дерево в сильной версии.
[02:58:37.700 --> 02:58:42.700]  По крайней мере, появляется такая образ мечты.
[02:58:42.700 --> 02:58:50.700]  Да, конечно, слишком много вопросов возникает, если прямо к этому отнестись предельно формально.
[02:58:50.700 --> 02:58:53.700]  Нет, пока еще нет. То есть на первом шаге это может и хорошо.
[02:58:53.700 --> 02:59:00.700]  Но с другой стороны, а почему, когда вы тут будете искать, тут вообще будет появляться какое-то дерево внутри вот этой штуки?
[02:59:00.700 --> 02:59:06.700]  Ну, там при наличии, допустим, вот этой вот гадости, которую надо куда-то подцеплять.
[02:59:06.700 --> 02:59:09.700]  Так что тут... Чего?
[02:59:09.700 --> 02:59:14.700]  Как говорится, добро пожаловать.
[02:59:14.700 --> 02:59:21.700]  Нет, просто любая, по-хорошему, любая лекция по математике.
[02:59:21.700 --> 02:59:24.700]  Потому что камерзные вопросы могут быть везде.
[02:59:24.700 --> 02:59:28.700]  Самый камерзный вопрос, это когда изучаем...
[02:59:28.700 --> 02:59:37.700]  У вас будет когда-то изучать такие интересные функции, которые, во-первых, бесконечно дифференцируемы, а во-вторых, их носитель ограничен.
[02:59:37.700 --> 02:59:44.700]  То есть это означает, что множество точек, в котором эти функции отличны от нуля, там это множество ограничено.
[02:59:44.700 --> 02:59:46.700]  То есть на каком-то отрезке лежит.
[02:59:46.700 --> 02:59:48.700]  Так вот, камерзный вопрос на экзамене.
[02:59:48.700 --> 02:59:52.700]  А такие функции вообще существуют, кроме нуля?
[02:59:54.700 --> 02:59:59.700]  А то мы тут изучаем какие-то свойства, может мы изучаем свойства нуля?
[03:00:04.700 --> 03:00:06.700]  Чего? Не подойдет.
[03:00:06.700 --> 03:00:10.700]  Синус, косинус, они...
[03:00:10.700 --> 03:00:17.700]  Нам нужны функции, у которых множество точек, в котором эти функции отличны от нуля, ограничено.
[03:00:17.700 --> 03:00:21.700]  Поэтому нет. Просто бесконечно дифференцируемые функции, это не то.
[03:00:21.700 --> 03:00:24.700]  То есть, да, синус, косинус, конечно, да.
[03:00:31.700 --> 03:00:36.700]  Тогда, чтобы оно еще было бесконечно дифференцируемо, допоминаю.
[03:00:36.700 --> 03:00:41.700]  Нет, там есть какие-то там красивые экспоненты есть, да, но...
[03:00:41.700 --> 03:00:43.700]  Все? Нету?
[03:00:43.700 --> 03:00:45.700]  Синус 0,1.
[03:00:50.700 --> 03:00:52.700]  Синус 0,1.
[03:00:55.700 --> 03:00:57.700]  Синус 0,1.
[03:00:57.700 --> 03:00:59.700]  Синус 0,1.
[03:01:15.700 --> 03:01:17.700]  Так вот. Значит, смотрите.
[03:01:17.700 --> 03:01:19.700]  Значит, теперь смотрите внимательно.
[03:01:19.700 --> 03:01:21.700]  Как мы теперь будем искать?
[03:01:22.700 --> 03:01:26.700]  Так вот, значит, вот такая вот, да, лемма разомнулись.
[03:01:26.700 --> 03:01:29.700]  По крайней мере, на первом шаге она нам даже поможет.
[03:01:29.700 --> 03:01:32.700]  А теперь внимание, фишка.
[03:01:32.700 --> 03:01:34.700]  Значит, как мы теперь будем искать?
[03:01:34.700 --> 03:01:38.700]  Значит, дерево гамариху предлагается искать следующим жадным образом.
[03:01:38.700 --> 03:01:40.700]  Значит, смотрите.
[03:01:40.700 --> 03:01:42.700]  В каждый момент времени...
[03:01:42.700 --> 03:01:44.700]  Вот, как бы, это такая первая фаза.
[03:01:44.700 --> 03:01:47.700]  В каждый момент времени у нас будут...
[03:01:48.700 --> 03:01:50.700]  То есть вершины будут разбиты на множество,
[03:01:50.700 --> 03:01:54.700]  и на этих множествах будет построено какое-то дерево.
[03:01:54.700 --> 03:01:56.700]  То есть такое дерево на метавершинах.
[03:02:00.700 --> 03:02:02.700]  То есть это вот...
[03:02:02.700 --> 03:02:08.700]  Заметьте, вот эти ребра не имеют прямого отношения к ребрам исходного графа.
[03:02:08.700 --> 03:02:11.700]  То есть, естественно, могут быть ребра между всеми вершинами.
[03:02:11.700 --> 03:02:14.700]  Более того, по умолчанию вообще можете считать,
[03:02:14.700 --> 03:02:16.700]  что между всеми парами вершин есть ребра.
[03:02:17.700 --> 03:02:20.700]  Ну, просто некоторые из них имеют вес 0.
[03:02:20.700 --> 03:02:21.700]  Вот.
[03:02:21.700 --> 03:02:23.700]  Значит, тут получается какая-то такая,
[03:02:23.700 --> 03:02:26.700]  то да, где-то может быть там малый вершин.
[03:02:26.700 --> 03:02:28.700]  Вот как-то вот так может быть.
[03:02:28.700 --> 03:02:29.700]  Ну, вот.
[03:02:29.700 --> 03:02:31.700]  Но, значит, что это за дерево?
[03:02:31.700 --> 03:02:32.700]  Дерево такое.
[03:02:32.700 --> 03:02:34.700]  Значит, история такая.
[03:02:34.700 --> 03:02:36.700]  Для любого ребра в этом дереве...
[03:02:36.700 --> 03:02:39.700]  То есть существуют две вершины.
[03:02:39.700 --> 03:02:42.700]  Там какие-нибудь IJ.
[03:02:42.700 --> 03:02:46.700]  Такие, что вес ребра, соединяющего их, это строго FIJ.
[03:02:47.700 --> 03:02:51.700]  То есть реально минимальный разрез между вершинами IJ в исходном графе.
[03:02:51.700 --> 03:02:56.700]  И более того, еще важно, минимальный разрез между ними,
[03:02:56.700 --> 03:02:59.700]  это вот буквально вот это вот.
[03:03:01.700 --> 03:03:02.700]  Понятно, да?
[03:03:04.700 --> 03:03:06.700]  Так вот, сейчас будет немножко магии.
[03:03:08.700 --> 03:03:11.700]  Значит, на каждом шаге мы теперь будем делать следующее.
[03:03:11.700 --> 03:03:16.700]  Возьмем две вершины в одной доле.
[03:03:18.700 --> 03:03:21.700]  Вот две вершины в любом ножте.
[03:03:21.700 --> 03:03:23.700]  Первые попавшиеся две вершины.
[03:03:23.700 --> 03:03:24.700]  Вот они там.
[03:03:24.700 --> 03:03:26.700]  J' и I' допустим.
[03:03:27.700 --> 03:03:29.700]  Так вот, идея у меня такая.
[03:03:30.700 --> 03:03:32.700]  Найдем минимальный разрез между ними.
[03:03:33.700 --> 03:03:35.700]  В общем, не просто так найдем минимальный разрез.
[03:03:35.700 --> 03:03:37.700]  А сделаем мы так.
[03:03:37.700 --> 03:03:43.700]  Вот все поддеревья относительно этой вершины временно сожмем,
[03:03:43.700 --> 03:03:45.700]  ну, потом развернем, в метовершину.
[03:03:46.700 --> 03:03:49.700]  Значит, это сожмем в метовершину, вот это сожмем в метовершину,
[03:03:49.700 --> 03:03:51.700]  вот это сожмем и вот это сожмем.
[03:03:55.700 --> 03:03:57.700]  Значит, вот эту штуку мы распилим.
[03:04:02.700 --> 03:04:03.700]  Просто вот распилим.
[03:04:03.700 --> 03:04:06.700]  И у нас тут тогда окажется, что вот у нас тут I' и I'
[03:04:09.700 --> 03:04:10.700]  окажутся в разных долях.
[03:04:10.700 --> 03:04:13.700]  Мы их соединим, естественно, вот тут F' и I'.
[03:04:15.700 --> 03:04:17.700]  И метовершины тоже окажутся.
[03:04:19.700 --> 03:04:22.700]  Да, метовершины окажутся тоже в каких-то долях.
[03:04:23.700 --> 03:04:26.700]  Так вот, ну, допустим, у нас вот этот разрез прошел как-то вот так.
[03:04:28.700 --> 03:04:33.700]  Тогда, значит, этой метовершины цепляем в соответствии с тем, в какой доле они оказались.
[03:04:33.700 --> 03:04:35.700]  То есть вот F' и J', например, оказалось вот в этой вот доле.
[03:04:35.700 --> 03:04:37.700]  Значит, мы ее сюда цепляем.
[03:04:41.700 --> 03:04:42.700]  Вот как-то так.
[03:04:43.700 --> 03:04:46.700]  Ну, цепляем вот за то, чтобы...
[03:04:47.700 --> 03:04:48.700]  Да.
[03:04:48.700 --> 03:04:49.700]  Ну да.
[03:04:51.700 --> 03:04:52.700]  Чего?
[03:04:52.700 --> 03:04:53.700]  Ну да.
[03:04:54.700 --> 03:04:55.700]  Ну, типа того, да.
[03:04:58.700 --> 03:04:59.700]  Так же такая вот радость.
[03:05:02.700 --> 03:05:03.700]  Да.
[03:05:03.700 --> 03:05:07.700]  Ну теперь остается только самое малое, доказательный вариант.
[03:05:07.700 --> 03:05:08.700]  Доказательный вариант.
[03:05:11.700 --> 03:05:12.700]  Какой вариант надо доказать?
[03:05:19.700 --> 03:05:20.700]  Ну, точно.
[03:05:22.700 --> 03:05:23.700]  Ну да.
[03:05:23.700 --> 03:05:24.700]  То есть да, напоминаю, у нас был инвериент.
[03:05:38.700 --> 03:05:39.700]  Нет, ну такие надо доказать.
[03:05:39.700 --> 03:05:40.700]  Ничего не понимаю.
[03:05:52.700 --> 03:05:53.700]  Да.
[03:05:56.700 --> 03:05:57.700]  Да.
[03:05:57.700 --> 03:06:07.700]  Ну есть одна маленькая проблема.
[03:06:09.700 --> 03:06:10.700]  Рисуется она вот так.
[03:06:12.700 --> 03:06:16.700]  Ну, смотрите, дело в том, что вот тут были вершины I и J.
[03:06:17.700 --> 03:06:24.700]  Могло так оказаться, что когда вы распилили эту вершину отодверь, вершина J оказалась не в той половинке, куда подсоединили I.
[03:06:28.700 --> 03:06:29.700]  Нет.
[03:06:30.700 --> 03:06:33.700]  Мы их подсоединяем не в соответствии с этими вершинами.
[03:06:33.700 --> 03:06:37.700]  Мы их подсоединяем в соответствии с тем, какой минимальный разрез мы тут нашли.
[03:06:43.700 --> 03:06:44.700]  И это одна проблема.
[03:06:45.700 --> 03:06:56.700]  Другая проблема еще в том, что, ну по-хорошему, надо еще доказать, что вот этот вот минимальный разрез, вот в этом вот, что мы найдем, он будет соответствовать минимальному разрезу вообще в исходном графе.
[03:06:57.700 --> 03:07:02.700]  Что вообще говоря, мы искали минимальный разрез при условии какого-то там адского сжатия.
[03:07:02.700 --> 03:07:03.700]  Да.
[03:07:03.700 --> 03:07:06.700]  Но второе, но это надо просто аккуратно сделать.
[03:07:06.700 --> 03:07:07.700]  Да.
[03:07:07.700 --> 03:07:17.700]  Конечно же, как бы, доказательство того, что вот этот разрез между I и J, он как бы действительно такой, как в плане величины, так и в плане структуры.
[03:07:17.700 --> 03:07:19.700]  Для этого нужно, конечно, обратиться к это теориям.
[03:07:19.700 --> 03:07:20.700]  Да.
[03:07:20.700 --> 03:07:21.700]  Мы не зря ее доказывали.
[03:07:22.700 --> 03:07:23.700]  Вот.
[03:07:23.700 --> 03:07:24.700]  Ну давайте так.
[03:07:24.700 --> 03:07:30.700]  Мы доказали, что, ну мы, значит, ну просто эту теорию надо теперь очень аккуратно применять.
[03:07:31.700 --> 03:07:32.700]  Вот.
[03:07:32.700 --> 03:07:36.700]  Ну давайте ее, ну давайте ее аккуратно применим.
[03:07:36.700 --> 03:07:40.700]  Ну, во-первых, вот ищем минимальный разрез между их штрих и J-штрих.
[03:07:40.700 --> 03:07:41.700]  Да.
[03:07:41.700 --> 03:07:48.700]  Вот докажем, что вот это все, вот это все под дерево можно сжать в одну вершину там и прицепить ребро.
[03:07:49.700 --> 03:07:52.700]  Ну или просто вот просто сжать это все, как это доказать.
[03:07:52.700 --> 03:07:53.700]  А очень просто.
[03:07:53.700 --> 03:07:57.700]  Дело в том, что как бы что, это за под дерево, что это за ребро.
[03:07:57.700 --> 03:08:02.700]  Это ребро, когда-то мы искали минимальный разрез между какой-то вершиной здесь и какой-то вершиной здесь правда.
[03:08:02.700 --> 03:08:08.700]  Ну ладно, это был просто разрез между какой-то вершиной здесь, какой-то вершиной здесь, но такой разрез нашелся.
[03:08:09.700 --> 03:08:15.700]  И тогда эта теория говорит, что когда мы ищем разрезы между вершинами в этой доле разреза, то вот это...
[03:08:15.700 --> 03:08:16.700]  Вот.
[03:08:16.700 --> 03:08:17.700]  Вот можно сжать.
[03:08:17.700 --> 03:08:26.700]  Но это первая фаза. Хорошо, это теперь сжали. Теперь докажем, что прижатой этой вершине можно сжать вот это вот.
[03:08:26.700 --> 03:08:31.700]  Ну то есть мы по индукции отсекаем листья, пока не приходит...
[03:08:31.700 --> 03:08:34.700]  Ну сжимаем. Нет, ну не листья, а под деревья.
[03:08:34.700 --> 03:08:38.700]  Ну мы берем листья и засовываем их в родители.
[03:08:38.700 --> 03:08:40.700]  Ну можно и так.
[03:08:40.700 --> 03:08:45.700]  Ну да, но правда чуть меньше шагов будет, если мы сожмем сразу под деревья.
[03:08:46.700 --> 03:08:59.700]  Потому что, смотрите, мы показали, что все минимальные разрезы в этой доле можно искать при вот этой сжатой вершине.
[03:08:59.700 --> 03:09:01.700]  Что теперь происходит?
[03:09:01.700 --> 03:09:09.700]  Теперь мы знаем, что между вот этими долями на самом деле есть минимальный разрез, даже при этой сжатой, равный вот этому.
[03:09:09.700 --> 03:09:12.700]  Значит, вот эту тоже можно сжимать.
[03:09:12.700 --> 03:09:20.700]  Ну при тех двух сжатых, соответственно, тогда становится понятно, что в этой доле, ну и так далее.
[03:09:20.700 --> 03:09:24.700]  Да, то есть здесь вроде как пока все аккуратненько и хорошо.
[03:09:24.700 --> 03:09:27.700]  Теперь остается самое интересное.
[03:09:27.700 --> 03:09:37.700]  То есть это приводит нас к тому, что f'g' теперь это действительно адекватный разрез, что так действительно можно.
[03:09:37.700 --> 03:09:39.700]  Мы его буквально построили.
[03:09:39.700 --> 03:09:45.700]  То есть мы сжали все вершины, а потом расписали разрез именно буквально так, как там разрез сказал.
[03:09:45.700 --> 03:09:47.700]  Понятно, да?
[03:09:47.700 --> 03:09:48.700]  Вот.
[03:09:48.700 --> 03:09:50.700]  То переча.
[03:09:50.700 --> 03:09:57.700]  Поэтому единственная проблема, сейчас вот самое интересное, что будет, что нам теперь нужно сделать, это решить вот эту проблему.
[03:09:57.700 --> 03:10:01.700]  Потому что когда вы подцепили, вот было ребро и g.
[03:10:01.700 --> 03:10:07.700]  И вот, допустим, вы его подцепили к половинке, и это оказалась не та половинка, в которой лежит g.
[03:10:07.700 --> 03:10:16.700]  То есть нам теперь просто нужно показать, что в этой вершине, что здесь где-то найдется какая-то вершинка, у которой тут разрез будет такой.
[03:10:16.700 --> 03:10:18.700]  Ну, как найдется.
[03:10:18.700 --> 03:10:28.700]  Ну, как вы уже догадываетесь, то есть по-хорошему надо просто доказать, что разрез f и, то есть вот этот разрез между i и штрих, он вполне себе такой же.
[03:10:28.700 --> 03:10:34.700]  Ну, просто другой вершины, кроме и штрих, тут может в принципе не оказаться.
[03:10:34.700 --> 03:10:38.700]  Так, понятно, о чем мы доказываем, да?
[03:10:38.700 --> 03:10:41.700]  Так, ну поехали.
[03:10:41.700 --> 03:10:46.700]  Так, ну какие у нас тут проблемы?
[03:10:46.700 --> 03:10:50.700]  Так, ну доказываем.
[03:10:50.700 --> 03:11:01.700]  Очень хочется доказать, что, понятно, хотим, что f и g больше либо равно, чем...
[03:11:01.700 --> 03:11:11.700]  Ну, хочется вообще доказать, что f и g равно f и и штрих.
[03:11:11.700 --> 03:11:15.700]  Ну, нам уже известно, что...
[03:11:15.700 --> 03:11:28.700]  То есть так, известно f и g, очевидно, больше либо равно, чем f и и штрих.
[03:11:28.700 --> 03:11:32.700]  Почему это тупо известно?
[03:11:32.700 --> 03:11:41.700]  Да потому что вот этот разрез и g, он минимальный для и g и какой-то для и и штрих, правда?
[03:11:41.700 --> 03:11:44.700]  Понимаете, да?
[03:11:44.700 --> 03:11:45.700]  Вот.
[03:11:45.700 --> 03:11:51.700]  Поэтому отсюда и вот такая радость.
[03:11:51.700 --> 03:11:54.700]  То есть и так, осталось.
[03:11:54.700 --> 03:11:59.700]  Осталось нам показать, что просто f и и штрих больше либо равно f и g.
[03:11:59.700 --> 03:12:03.700]  Понятно, да?
[03:12:03.700 --> 03:12:06.700]  Но с другой стороны, про f и g можно кое-что...
[03:12:06.700 --> 03:12:07.700]  Что?
[03:12:07.700 --> 03:12:09.700]  У нас f и g это очень минимальный разрез.
[03:12:09.700 --> 03:12:10.700]  Да.
[03:12:10.700 --> 03:12:13.700]  Поэтому он меньше, чем любой другой.
[03:12:13.700 --> 03:12:15.700]  Между и и и g.
[03:12:15.700 --> 03:12:16.700]  Да.
[03:12:16.700 --> 03:12:21.700]  А что касается, но про и и штрих, это нам ничего не говорит.
[03:12:22.700 --> 03:12:24.700]  А смотри еще раз.
[03:12:24.700 --> 03:12:26.700]  Рассмотрим вот этот разрез.
[03:12:26.700 --> 03:12:30.700]  Он является разрезом, просто разрезом.
[03:12:30.700 --> 03:12:34.700]  Не только для и и g, но и для и и штрих.
[03:12:34.700 --> 03:12:41.700]  Но для и и g он является минимальным, а для и и штрих он является каким-то.
[03:12:41.700 --> 03:12:44.700]  Но какой-то разрез между и и штрих больше либо равен минимального разреза.
[03:12:44.700 --> 03:12:46.700]  Поэтому получается так.
[03:12:46.700 --> 03:12:49.700]  Осталось, вот хотим доказать вот это.
[03:12:49.700 --> 03:12:52.700]  А как мы это докажем?
[03:12:52.700 --> 03:12:55.700]  А докажем это вот как.
[03:12:55.700 --> 03:13:07.700]  Дело в том, что мы знаем, вот я здесь буду писать, что f и и штрих больше либо равно минимума.
[03:13:07.700 --> 03:13:15.700]  И сейчас я изобретю...
[03:13:15.700 --> 03:13:17.700]  Ну что я изобретю?
[03:13:17.700 --> 03:13:19.700]  Ну изобрету я даже, наверное, понятно, что.
[03:13:19.700 --> 03:13:22.700]  Тут я напишу минимум из f и g.
[03:13:22.700 --> 03:13:27.700]  Да, ну, наверное, f, g, g штрих.
[03:13:27.700 --> 03:13:32.700]  f и тут g штрих и штрих.
[03:13:32.700 --> 03:13:36.700]  Вот такая логичная цепочка.
[03:13:36.700 --> 03:13:42.700]  Так, но давайте думать.
[03:13:42.700 --> 03:13:47.700]  Я думаю, что-то из этого я могу выкинуть.
[03:13:47.700 --> 03:13:50.700]  Что?
[03:13:50.700 --> 03:13:54.700]  Да, вот для этого ребра.
[03:13:54.700 --> 03:13:59.700]  И вот предположим, что она оказалась не в той доле.
[03:13:59.700 --> 03:14:04.700]  Ну мы считаем, что и оказалась в доле с и штрихом, а g оказалась в доле с и штрихом.
[03:14:04.700 --> 03:14:06.700]  Так вот.
[03:14:06.700 --> 03:14:09.700]  Но тогда смотрите, что из этого следует.
[03:14:09.700 --> 03:14:23.700]  Заметим, что из этого следует, вот из этой картинки, что f и штрих, g штрих больше либо равно f и штрих, g.
[03:14:23.700 --> 03:14:34.700]  Ой, значит мы тут цепочку неправильно выбрали.
[03:14:34.700 --> 03:14:39.700]  Нам хочется пользоваться этим неравенцем.
[03:14:39.700 --> 03:14:42.700]  Да, и штрих, конечно.
[03:14:42.700 --> 03:14:45.700]  Но опять же та же причина.
[03:14:45.700 --> 03:14:50.700]  Что это какой-то разрез между и штрих, и g.
[03:14:50.700 --> 03:14:53.700]  И минимальный между и штрих, и g штрих.
[03:14:53.700 --> 03:14:56.700]  Значит, как бы между и штрих, и g штрих он не больше.
[03:14:56.700 --> 03:14:58.700]  Может такой, может меньше.
[03:14:58.700 --> 03:14:59.700]  Ладно, поэтому да.
[03:14:59.700 --> 03:15:02.700]  Поэтому напишем мы немножко здесь по-другому.
[03:15:02.700 --> 03:15:08.700]  Давайте и штрих, и g мы здесь напишем.
[03:15:08.700 --> 03:15:10.700]  Здесь мы напишем g, g штрих.
[03:15:10.700 --> 03:15:12.700]  И здесь напишем g штрих, g штрих.
[03:15:12.700 --> 03:15:17.700]  Вот такая цепочка.
[03:15:17.700 --> 03:15:26.700]  Не факт, что правда, что f и штрих больше на минимум.
[03:15:26.700 --> 03:15:28.700]  У нас цепочка заканчивается в...
[03:15:28.700 --> 03:15:30.700]  Нет, она начинается в и штрихе и...
[03:15:30.700 --> 03:15:32.700]  И кончается в и штрихе.
[03:15:32.700 --> 03:15:33.700]  Да и тить вашу.
[03:15:33.700 --> 03:15:34.700]  Ну ладно.
[03:15:34.700 --> 03:15:35.700]  Хорошо.
[03:15:35.700 --> 03:15:37.700]  Вот так.
[03:15:37.700 --> 03:15:39.700]  А так у нас и было, нет?
[03:15:39.700 --> 03:15:40.700]  Да.
[03:15:40.700 --> 03:15:41.700]  Нет, не правда.
[03:15:41.700 --> 03:15:43.700]  А у нас цепочка есть.
[03:15:43.700 --> 03:15:44.700]  Сейчас тогда.
[03:15:44.700 --> 03:15:45.700]  Сейчас.
[03:15:45.700 --> 03:15:46.700]  Нет, цепочка-то есть.
[03:15:46.700 --> 03:15:50.700]  У нас только и g.
[03:15:50.700 --> 03:15:52.700]  Так, хорошо.
[03:15:52.700 --> 03:15:53.700]  Смотрите, как надо.
[03:15:53.700 --> 03:15:54.700]  Нет, не так надо.
[03:15:54.700 --> 03:15:58.700]  Смотрите, надо и штрих g, раз уж.
[03:15:58.700 --> 03:15:59.700]  Так, что нам еще надо?
[03:15:59.700 --> 03:16:03.700]  Давайте так g и...
[03:16:03.700 --> 03:16:04.700]  А, и все?
[03:16:04.700 --> 03:16:06.700]  Нет, маловато.
[03:16:06.700 --> 03:16:07.700]  Нет, ну да.
[03:16:07.700 --> 03:16:08.700]  Нет.
[03:16:08.700 --> 03:16:09.700]  Ну да, нам надо.
[03:16:09.700 --> 03:16:10.700]  Нет, подождите.
[03:16:10.700 --> 03:16:11.700]  Нам надо тогда, чтобы...
[03:16:11.700 --> 03:16:16.700]  Да, да, да.
[03:16:16.700 --> 03:16:18.700]  Тут придется g и штрих ставить.
[03:16:18.700 --> 03:16:20.700]  Блин, жалко.
[03:16:20.700 --> 03:16:21.700]  Так.
[03:16:21.700 --> 03:16:23.700]  Ну хорошо.
[03:16:23.700 --> 03:16:25.700]  Так.
[03:16:25.700 --> 03:16:28.700]  Чего?
[03:16:28.700 --> 03:16:30.700]  А, нет.
[03:16:30.700 --> 03:16:36.700]  Погодите.
[03:16:36.700 --> 03:16:37.700]  Да, подождите.
[03:16:37.700 --> 03:16:38.700]  Все еще круче.
[03:16:38.700 --> 03:16:39.700]  f и штрих, g и штрих.
[03:16:39.700 --> 03:16:41.700]  Ну, помимо всего прочего в такой картинке, является
[03:16:41.700 --> 03:16:46.700]  еще и разрезом между и и g.
[03:16:46.700 --> 03:16:47.700]  Ну, просто...
[03:16:47.700 --> 03:16:50.700]  Если бы не являлся, значит g было бы здесь, и проблем
[03:16:50.700 --> 03:16:51.700]  бы не было.
[03:16:51.700 --> 03:16:52.700]  Значит, так.
[03:16:52.700 --> 03:16:54.700]  То есть вот такую радость мы можем сказать.
[03:16:54.700 --> 03:16:55.700]  Да.
[03:16:55.700 --> 03:16:58.700]  Ну, равно, как и про другие, но сейчас нам важно это.
[03:16:58.700 --> 03:16:59.700]  Хорошо.
[03:16:59.700 --> 03:17:00.700]  Но тогда что из этого следует?
[03:17:00.700 --> 03:17:02.700]  Тогда получается, что f и штрих g и штрих больше либо
[03:17:02.700 --> 03:17:03.700]  равно f и g.
[03:17:03.700 --> 03:17:07.700]  Значит, да, его можно просто из этого минимумом выкинуть.
[03:17:07.700 --> 03:17:08.700]  То есть это просто написать, что это равно минимум из...
[03:17:08.700 --> 03:17:14.700]  f и g f, g, g, штрих.
[03:17:14.700 --> 03:17:15.700]  Так, я то вытянул.
[03:17:15.700 --> 03:17:20.700]  Да, я то вытянул.
[03:17:20.700 --> 03:17:24.700]  Так, теперь неплохо было бы доказать, что f, g, g, штрих
[03:17:24.700 --> 03:17:29.700]  больше либо равно, чем f и g.
[03:17:29.700 --> 03:17:32.700]  Ну, это, конечно, брехня.
[03:17:32.700 --> 03:17:34.700]  То есть оно на самом деле...
[03:17:34.700 --> 03:17:37.700]  Так как они тут в одной доле лежат, то, в общем-то,
[03:17:37.700 --> 03:17:39.700]  это как бы не факт.
[03:17:39.700 --> 03:17:42.700]  Ну, конечно, оно вот.
[03:17:42.700 --> 03:17:45.700]  То есть мало ли там что.
[03:17:45.700 --> 03:17:51.700]  Но теперь возникает такая фишка.
[03:17:51.700 --> 03:17:54.700]  То есть нам на самом деле ладно.
[03:17:54.700 --> 03:17:56.700]  Вот это неравенство...
[03:17:56.700 --> 03:18:00.700]  Если бы, конечно, доказали, что вот это больше либо
[03:18:00.700 --> 03:18:03.700]  равно вот этого, мы бы победили.
[03:18:03.700 --> 03:18:05.700]  Но на самом деле это, конечно...
[03:18:05.700 --> 03:18:09.700]  То есть на самом деле, в общем-то, это будет не обязательно.
[03:18:33.700 --> 03:18:39.700]  Так.
[03:18:39.700 --> 03:18:43.700]  Так, сейчас, погодите, давайте попробуем.
[03:18:43.700 --> 03:18:46.700]  Больше либо равно, чем минимум.
[03:18:46.700 --> 03:18:50.700]  f и, значит,
[03:18:50.700 --> 03:18:54.700]  запятая f, g, штрих,
[03:18:54.700 --> 03:18:57.700]  и штрих.
[03:18:57.700 --> 03:19:02.700]  Так.
[03:19:02.700 --> 03:19:05.700]  f и штрих больше.
[03:19:05.700 --> 03:19:07.700]  f и штрих.
[03:19:07.700 --> 03:19:09.700]  Это мы точно знаем.
[03:19:09.700 --> 03:19:10.700]  Так.
[03:19:10.700 --> 03:19:13.700]  Но при этом мы заметим, что
[03:19:13.700 --> 03:19:15.700]  и штрих, и ж штрих, он больше либо равен
[03:19:15.700 --> 03:19:17.700]  этому, потому что у нас,
[03:19:17.700 --> 03:19:20.700]  потому что у нас, помимо всего прочего, еще и ж штрих распались.
[03:19:20.700 --> 03:19:22.700]  Неожиданно.
[03:19:22.700 --> 03:19:24.700]  Прямо распали?
[03:19:24.700 --> 03:19:26.700]  Ну да.
[03:19:26.700 --> 03:19:28.700]  Так.
[03:19:28.700 --> 03:19:30.700]  Ну да, и штрих, и ж штрих.
[03:19:30.700 --> 03:19:32.700]  Так, хорошо.
[03:19:32.700 --> 03:19:34.700]  То есть давайте пишем.
[03:19:34.700 --> 03:19:38.700]  f и штрих оказалось больше либо равно, чем
[03:19:38.700 --> 03:19:40.700]  f и ж штрих.
[03:19:40.700 --> 03:19:42.700]  Это мы уже знаем, потому что да.
[03:19:42.700 --> 03:19:44.700]  Потому что у нас тут внезапно и ж штрих.
[03:19:44.700 --> 03:19:46.700]  Мы можем оставить только
[03:19:46.700 --> 03:19:48.700]  f и и штрих больше либо равно, чем
[03:19:48.700 --> 03:19:50.700]  f и ж штрих.
[03:19:50.700 --> 03:19:52.700]  Да, то есть...
[03:19:52.700 --> 03:19:54.700]  Ну да, значит получается равно...
[03:19:54.700 --> 03:19:58.700]  А почему f и ж штрих больше, чем f и ж...
[03:19:58.700 --> 03:20:00.700]  А то же самое.
[03:20:00.700 --> 03:20:02.700]  Потому что это, помимо всего прочего,
[03:20:02.700 --> 03:20:04.700]  этот минимальный разрез, он, помимо всего прочего,
[03:20:04.700 --> 03:20:06.700]  еще и разрез между и и ж штрих.
[03:20:06.700 --> 03:20:10.700]  Да, поэтому разрез для и и ж штрих может быть меньше, чем этот.
[03:20:10.700 --> 03:20:12.700]  Да.
[03:20:12.700 --> 03:20:14.700]  Да.
[03:20:14.700 --> 03:20:16.700]  Равно f и ж штрих.
[03:20:16.700 --> 03:20:18.700]  Так.
[03:20:18.700 --> 03:20:20.700]  Но из этого следует лишь то, что
[03:20:20.700 --> 03:20:22.700]  f и ж штрих оказался
[03:20:22.700 --> 03:20:24.700]  больше либо равно...
[03:20:24.700 --> 03:20:26.700]  А, ну да, это мы и хотим.
[03:20:26.700 --> 03:20:28.700]  Ой.
[03:20:36.700 --> 03:20:38.700]  А мы про ж штрих доказали, да.
[03:20:40.700 --> 03:20:42.700]  А чем-то...
[03:20:42.700 --> 03:20:44.700]  Ну не знаю, мы сможем доказать,
[03:20:44.700 --> 03:20:46.700]  что это больше либо равно, чем f и ж?
[03:20:46.700 --> 03:20:48.700]  Вот как-то не факт.
[03:20:48.700 --> 03:20:50.700]  Потому что про f и ж штрих мы не знаем ничего.
[03:20:58.700 --> 03:21:00.700]  Так что, увы, придется тисаться дальше.
[03:21:02.700 --> 03:21:04.700]  Да, то есть скажу так, это верное утверждение,
[03:21:04.700 --> 03:21:06.700]  но, увы, не сильно помогающее нам.
[03:21:10.700 --> 03:21:12.700]  Так вот, значит, здесь смотрите, какая фишка.
[03:21:12.700 --> 03:21:14.700]  Так вот, значит, мы пока видим, что все разрезы,
[03:21:14.700 --> 03:21:16.700]  которые мы тут в жизни искали,
[03:21:16.700 --> 03:21:18.700]  они отправляют ж и ж штрих в одну долю.
[03:21:18.700 --> 03:21:20.700]  Правда?
[03:21:20.700 --> 03:21:22.700]  Нельзя рассмотреть разрез
[03:21:22.700 --> 03:21:24.700]  между ж и ж штрих,
[03:21:24.700 --> 03:21:26.700]  и там будет два случая.
[03:21:26.700 --> 03:21:28.700]  Либо ж лежит вместе с и
[03:21:28.700 --> 03:21:30.700]  в одной доле.
[03:21:30.700 --> 03:21:32.700]  Тогда этот разрез
[03:21:32.700 --> 03:21:34.700]  является разрезом
[03:21:34.700 --> 03:21:36.700]  для и штрих и ж штрих
[03:21:36.700 --> 03:21:38.700]  и оценивается.
[03:21:38.700 --> 03:21:40.700]  Либо наоборот,
[03:21:40.700 --> 03:21:42.700]  ж штрих лежит в одной доле
[03:21:42.700 --> 03:21:44.700]  с и и ж штрих,
[03:21:44.700 --> 03:21:46.700]  тогда этот разрез является разрезом
[03:21:46.700 --> 03:21:48.700]  для и и ж.
[03:21:48.700 --> 03:21:50.700]  И оценивается уже 1.
[03:21:54.700 --> 03:21:56.700]  Ну вот, вас посмотрите на этот разрез
[03:21:56.700 --> 03:21:58.700]  между ж и ж штрих.
[03:21:58.700 --> 03:22:00.700]  Так, ну посмотрели еще.
[03:22:00.700 --> 03:22:02.700]  Есть доля,
[03:22:02.700 --> 03:22:04.700]  и в доле, в которой нет
[03:22:04.700 --> 03:22:06.700]  и и штрих,
[03:22:06.700 --> 03:22:08.700]  есть либо ж, либо ж штрих.
[03:22:08.700 --> 03:22:10.700]  Тогда мы можем оценить либо
[03:22:10.700 --> 03:22:12.700]  f и ж, либо
[03:22:12.700 --> 03:22:14.700]  f и ж штрих.
[03:22:14.700 --> 03:22:16.700]  Вроде эти
[03:22:16.700 --> 03:22:18.700]  большины нам...
[03:22:18.700 --> 03:22:20.700]  Но так мы можем оценить одну из них,
[03:22:20.700 --> 03:22:22.700]  но не две одновременно.
[03:22:22.700 --> 03:22:24.700]  Мы оцениваем либо так,
[03:22:24.700 --> 03:22:26.700]  либо так.
[03:22:26.700 --> 03:22:28.700]  А f и ж штрих
[03:22:28.700 --> 03:22:30.700]  мы уже оцениваем
[03:22:30.700 --> 03:22:32.700]  f и ж.
[03:22:32.700 --> 03:22:34.700]  Да.
[03:22:34.700 --> 03:22:36.700]  Я говорю, что f и ж штрих
[03:22:36.700 --> 03:22:38.700]  можно оценить либо
[03:22:38.700 --> 03:22:40.700]  f и ж, либо f и ж штрих.
[03:22:40.700 --> 03:22:42.700]  В зависимости от того,
[03:22:42.700 --> 03:22:44.700]  что попадет в другую долю.
[03:22:44.700 --> 03:22:46.700]  При развлечении ж и ж штрих.
[03:22:50.700 --> 03:22:52.700]  Так.
[03:22:54.700 --> 03:22:56.700]  Так.
[03:22:56.700 --> 03:22:58.700]  Так, ну хорошо, давайте попробуем.
[03:22:58.700 --> 03:23:00.700]  Давайте проведем
[03:23:00.700 --> 03:23:02.700]  вот такой, какой-то разрез
[03:23:02.700 --> 03:23:04.700]  между ж и ж штрих.
[03:23:06.700 --> 03:23:08.700]  Тогда в долю с кем?
[03:23:10.700 --> 03:23:12.700]  И штрих?
[03:23:12.700 --> 03:23:14.700]  Нет, ну и штрих непонятно,
[03:23:14.700 --> 03:23:16.700]  они попадут в одну долю или в разные.
[03:23:16.700 --> 03:23:18.700]  Почему же?
[03:23:18.700 --> 03:23:20.700]  Ну, что есть такое?
[03:23:20.700 --> 03:23:22.700]  А сейчас? Я не знаю.
[03:23:22.700 --> 03:23:24.700]  Мы не можем вот уже
[03:23:24.700 --> 03:23:26.700]  в выстроенной
[03:23:26.700 --> 03:23:28.700]  стацури дерева
[03:23:28.700 --> 03:23:30.700]  поделить
[03:23:30.700 --> 03:23:32.700]  для...
[03:23:32.700 --> 03:23:34.700]  Мы там пользуемся каким-то деревом?
[03:23:34.700 --> 03:23:36.700]  Мы там, когда мы сжимали
[03:23:36.700 --> 03:23:38.700]  вершины, мы пользовались тем, что тут две вершины есть,
[03:23:38.700 --> 03:23:40.700]  а тут мы это сидим, доказываем.
[03:23:42.700 --> 03:23:44.700]  Но ведь мы знаем, что ребро
[03:23:44.700 --> 03:23:46.700]  между и штрих и ж штрих
[03:23:46.700 --> 03:23:48.700]  оно нужное,
[03:23:48.700 --> 03:23:50.700]  поэтому все под дерево, которое
[03:23:50.700 --> 03:23:52.700]  висит на вершине, содержащей и штрих
[03:23:52.700 --> 03:23:54.700]  мы можем сжать.
[03:23:54.700 --> 03:23:56.700]  А, ну хорошо.
[03:23:56.700 --> 03:23:58.700]  А, ну хорошо, да.
[03:23:58.700 --> 03:24:00.700]  Так, ну хорошо, да.
[03:24:00.700 --> 03:24:02.700]  То есть если у нас разрез
[03:24:02.700 --> 03:24:04.700]  получился такой,
[03:24:04.700 --> 03:24:06.700]  то тогда оказывается,
[03:24:06.700 --> 03:24:08.700]  что, действительно,
[03:24:08.700 --> 03:24:10.700]  f ж ж штрих
[03:24:10.700 --> 03:24:12.700]  больше либо равно,
[03:24:12.700 --> 03:24:14.700]  чем f
[03:24:14.700 --> 03:24:16.700]  и ж
[03:24:16.700 --> 03:24:18.700]  ж штрих
[03:24:18.700 --> 03:24:20.700]  больше либо равно,
[03:24:20.700 --> 03:24:22.700]  чем f
[03:24:22.700 --> 03:24:24.700]  и ж
[03:24:24.700 --> 03:24:26.700]  и ж
[03:24:26.700 --> 03:24:28.700]  и ж
[03:24:28.700 --> 03:24:30.700]  окей.
[03:24:30.700 --> 03:24:32.700]  А в противоположном случае,
[03:24:32.700 --> 03:24:34.700]  оно больше или равно, чем f и ж
[03:24:34.700 --> 03:24:36.700]  и ж штрих, которое больше
[03:24:36.700 --> 03:24:38.700]  или равно, чем f и ж?
[03:24:38.700 --> 03:24:40.700]  Да, которое мы откуда-то взяли.
[03:24:40.700 --> 03:24:42.700]  Так, если у нас разрез
[03:24:42.700 --> 03:24:44.700]  произошел вот как-то
[03:24:44.700 --> 03:24:46.700]  вот так,
[03:24:46.700 --> 03:24:48.700]  то тогда в зеленой
[03:24:48.700 --> 03:24:50.700]  версии получается, что
[03:24:50.700 --> 03:24:52.700]  f ж ж штрих больше либо равно
[03:24:52.700 --> 03:24:54.700]  чего?
[03:24:54.700 --> 03:24:56.700]  И штрих ж штрих?
[03:24:56.700 --> 03:24:58.700]  И штрих ж штрих.
[03:24:58.700 --> 03:25:00.700]  А эта штука больше или равно, чем
[03:25:00.700 --> 03:25:02.700]  f и ж?
[03:25:02.700 --> 03:25:04.700]  Нет, она...
[03:25:04.700 --> 03:25:06.700]  Нет, мы разве ее по ежи отсекали?
[03:25:06.700 --> 03:25:08.700]  Ну, мы так что...
[03:25:08.700 --> 03:25:10.700]  А, ну да, да, да, да, да.
[03:25:10.700 --> 03:25:12.700]  Больше либо равно f и ж.
[03:25:12.700 --> 03:25:14.700]  Ага.
[03:25:14.700 --> 03:25:16.700]  А, ну все.
[03:25:16.700 --> 03:25:18.700]  А, то есть все-таки больше
[03:25:18.700 --> 03:25:20.700]  либо равно?
[03:25:20.700 --> 03:25:22.700]  Ну...
[03:25:24.700 --> 03:25:26.700]  Угу.
[03:25:26.700 --> 03:25:28.700]  Угу.
[03:25:30.700 --> 03:25:32.700]  Угу.
[03:25:32.700 --> 03:25:34.700]  Угу.
[03:25:34.700 --> 03:25:36.700]  Ух!
[03:25:36.700 --> 03:25:38.700]  Ух!
[03:25:38.700 --> 03:25:40.700]  Если это правда вообще.
[03:25:40.700 --> 03:25:42.700]  Так.
[03:25:42.700 --> 03:25:44.700]  Ну это все, наверное,
[03:25:44.700 --> 03:25:46.700]  хотя почему бы
[03:25:46.700 --> 03:25:48.700]  этому не быть правдой, да?
[03:25:48.700 --> 03:25:50.700]  Просто возможно, авторы доказательства
[03:25:50.700 --> 03:25:52.700]  в это не верили почему-то.
[03:25:52.700 --> 03:26:13.700]  Оригинальное доказательство звучало так. Заметим, что если я сейчас соединил ж штрих каким-нибудь ребром с весом А, то никакой из этих неравенств не нарушится.
[03:26:13.700 --> 03:26:21.700]  Потому что во всех предыдущих разрезах ж и ж штрих отправлялись в одну долю, и это ребро ни во что ни в чем не участвовал.
[03:26:21.700 --> 03:26:29.700]  А здесь, когда мы писали вот это неравенство, мы тут сравнивали только это с этим нотой, а вот это оставалось на месте.
[03:26:29.700 --> 03:26:33.700]  И тогда получалось, что я тут могу еще плюс А написать.
[03:26:33.700 --> 03:26:41.700]  А я могу задрать просто как угодно, поэтому даже если оно мелкое, я могу сделать так, что ф и ж остается.
[03:26:41.700 --> 03:26:47.700]  Оригинальное доказательство такое. В оригинальной статье Гомариху написано так.
[03:26:47.700 --> 03:26:59.700]  Может авторы этого не заметили, а может мы где-то проворались.
[03:26:59.700 --> 03:27:06.700]  Хотя в принципе слету вот бара в этом доказательстве честно говоря я не вижу.
[03:27:06.700 --> 03:27:16.700]  Да, потому что мы выяснили, что между и штрих и ж штрих оптимальный разрез именно такой.
[03:27:16.700 --> 03:27:25.700]  Да, мы это уже выяснили, поэтому если и попало куда-то не туда, то давайте делаем ж и ж штрих.
[03:27:25.700 --> 03:27:32.700]  И тогда это все тоже казалось бы должно быть сжато, потому что мы пользуемся только этим ребром и только вот этим ребром.
[03:27:32.700 --> 03:27:36.700]  То есть вот этими ребрами мы даже не пользуемся, обратите внимание.
[03:27:36.700 --> 03:27:42.700]  Пожалуй, без лишних подхадчик.
[03:27:42.700 --> 03:27:57.700]  Единственная проблема, что к сожалению этот минимальный разрез между произвольными двумя вершинами к штурмартеру не сведем.
[03:27:57.700 --> 03:28:05.700]  Потому что когда мы это делаем в компоненте, мы эти под деревья конечно сжимаем до вершины, но эти вершины остаются вершинами.
[03:28:05.700 --> 03:28:11.700]  И минимальный разрез может оказаться, что это минимальный разрез он просто отсечет вот какую-нибудь вершину от остальных.
[03:28:11.700 --> 03:28:17.700]  И это будет для нас не информативно.
[03:28:17.700 --> 03:28:30.700]  Поэтому доказанная симптомика алгоритма это o от v умножить на find flow.
[03:28:30.700 --> 03:28:34.700]  То есть o от n, насколько вы там поток с нуля ищете.
[03:28:34.700 --> 03:28:38.700]  То есть каждый поток мы прям честно с нуля ищем.
[03:28:38.700 --> 03:28:43.700]  Тем более, что у нас игра формально говоря разный.
[03:28:43.700 --> 03:28:51.700]  Вот такая вот красота.
[03:28:51.700 --> 03:28:59.700]  Но особая красота тут конечно в том, что в итоге получилось.
[03:28:59.700 --> 03:29:05.700]  В принципе, как можно выяснить из одного из кубков МФТИ, не помню этого или предыдущего.
[03:29:05.700 --> 03:29:13.700]  Отсюда можно вывести вообще эпическую теорему про компоненты вершинной косвязности.
[03:29:13.700 --> 03:29:17.700]  Или реберной.
[03:29:17.700 --> 03:29:22.700]  Сейчас там реберная была.
[03:29:22.700 --> 03:29:28.700]  Да, теорема.
[03:29:29.700 --> 03:29:33.700]  Определение.
[03:29:33.700 --> 03:29:41.700]  Давай две вершины назовем реберно-косвязанными, если между ними существует k реберно-непересекающихся путей.
[03:29:41.700 --> 03:29:44.700]  Теорема существует.
[03:29:44.700 --> 03:29:51.700]  Реберная косвязность это отношение эквалентности на вершинах.
[03:29:51.700 --> 03:29:54.700]  Вот доказательства.
[03:29:54.700 --> 03:29:59.700]  Что такое косвязность? Это когда поток между двумя вершинами хотя бы k.
[03:29:59.700 --> 03:30:01.700]  Отлично.
[03:30:01.700 --> 03:30:08.700]  Но тогда если у нас тут от a до b, допустим, у вас тут минимум на пути хотя бы k, то есть все ребра k,
[03:30:08.700 --> 03:30:15.700]  и тут минимум на пути от p до c хотя бы k, то минимум от a до c тоже будет хотя бы k тем более.
[03:30:15.700 --> 03:30:18.700]  То есть мораль. Существуют компоненты реберной косвязности.
[03:30:18.700 --> 03:30:20.700]  Как найти компоненты реберной косвязности?
[03:30:20.700 --> 03:30:24.700]  Построим дерево-бреху, обрубим ребра-мельшика, возрадуемся.
[03:30:34.700 --> 03:30:42.700]  В кубке была задача, правда, на 3-связность, и там, по-моему, компоненты реберной 3-связности можно как-то, видимо, без этого искать.
[03:30:43.700 --> 03:30:46.700]  Не за открытки была задача.
[03:30:46.700 --> 03:30:48.700]  Нет.
[03:30:48.700 --> 03:30:50.700]  Хотя нет.
[03:30:50.700 --> 03:30:58.700]  Ну, я не знаю, там, по-моему, возможно, насколько я слышал, кто-то давал в тексте, что как-то...
[03:30:58.700 --> 03:31:01.700]  То есть нет, как-то вроде можно это...
[03:31:01.700 --> 03:31:08.700]  Нет, мы с вами можем компоненты реберной 3-связности, наверное, найти относительно быстро.
[03:31:08.700 --> 03:31:10.700]  Как-то, наверное, можно.
[03:31:10.700 --> 03:31:13.700]  Да, была задача на открытке, два проспекта, и поездал.
[03:31:13.700 --> 03:31:16.700]  Там, по-моему, реберную 3-связность.
[03:31:16.700 --> 03:31:18.700]  Так.
[03:31:18.700 --> 03:31:20.700]  Ты там решение сделал, конечно?
[03:31:20.700 --> 03:31:22.700]  Нет, да, но тут вытекает...
[03:31:22.700 --> 03:31:24.700]  Там за М плюс М логан.
[03:31:24.700 --> 03:31:30.700]  Ну вот, потому что нет, потому что дерево-бреху, как бы оно вам так на халяву это найти не позволит.
[03:31:30.700 --> 03:31:35.700]  Потому что проблема еще в том, что вам придется реальный поток искать.
[03:31:35.700 --> 03:31:37.700]  Там была задача.
[03:31:37.700 --> 03:31:39.700]  Ну, фишка такая.
[03:31:39.700 --> 03:31:41.700]  В принципе, компоненты...
[03:31:41.700 --> 03:31:43.700]  Ну, то есть я не знаю, как это можно найти.
[03:31:43.700 --> 03:31:45.700]  Можно найти за...
[03:31:45.700 --> 03:31:47.700]  Ну, я не знаю, н квадрат можно найти.
[03:31:47.700 --> 03:31:49.700]  Давайте так.
[03:31:49.700 --> 03:31:51.700]  Ладно, не за н квадрат, а за...
[03:31:51.700 --> 03:31:54.700]  Ну, за n dfs-ов я могу найти хотя бы две вершины, которые...
[03:31:54.700 --> 03:31:58.700]  Так, ну ладно, начнем с того, что за линию можно мосты найти, допустим.
[03:31:58.700 --> 03:32:00.700]  3-связности.
[03:32:00.700 --> 03:32:01.700]  Да.
[03:32:01.700 --> 03:32:04.700]  Ну, допустим, во-первых, можно найти реберную 2-связность для начала.
[03:32:04.700 --> 03:32:06.700]  Ну, так, для удобства.
[03:32:06.700 --> 03:32:08.700]  Ну, чисто для удобства, чтобы мосты выкинуть и не думать.
[03:32:08.700 --> 03:32:10.700]  То есть, допустим, у нас граф реберную 2-связан.
[03:32:10.700 --> 03:32:12.700]  Теперь очень хочется найти какие-нибудь...
[03:32:12.700 --> 03:32:20.700]  Ну, в идеале хочется найти две вершины, которые реберно именно 2-связаны, но не 3-связаны.
[03:32:20.700 --> 03:32:22.700]  Как это сделать?
[03:32:22.700 --> 03:32:23.700]  Ну, я умею только...
[03:32:23.700 --> 03:32:27.700]  Ну, слетаю могу как бы только взять одну вершину a и перебирать все вершины b.
[03:32:27.700 --> 03:32:30.700]  И для каждой из них проявить верно лишь, что они хотя бы 3-связаны.
[03:32:30.700 --> 03:32:32.700]  Это делается тремя dfs-ами.
[03:32:32.700 --> 03:32:37.700]  Ну, точнее так, это ищем поток, но поток в данном случае ищется просто тремя dfs-ами.
[03:32:37.700 --> 03:32:38.700]  Вот.
[03:32:38.700 --> 03:32:40.700]  Так, хорошо, нашли.
[03:32:40.700 --> 03:32:41.700]  Ну, вот.
[03:32:41.700 --> 03:32:46.700]  То есть там 3 dfs-а, но это правда уже требует от ей операции.
[03:32:46.700 --> 03:32:54.700]  Ну, хорошо, если вы ни одну такую вершину не нашли, значит вы торжественно отпиливаетесь.
[03:32:54.700 --> 03:32:55.700]  Хотя...
[03:32:55.700 --> 03:32:56.700]  Ну, вот.
[03:32:56.700 --> 03:32:57.700]  Хотя...
[03:32:57.700 --> 03:33:00.700]  Нет, тут, конечно, красота заключается в том, что вы тут перебираете вершины b1,
[03:33:00.700 --> 03:33:03.700]  допустим, какие-нибудь b2, допустим, b3 и так далее.
[03:33:03.700 --> 03:33:10.700]  И пока вы тут 3 пути находите, значит все эти вершины в одной компоненте 3-связанности с ней находятся.
[03:33:10.700 --> 03:33:14.700]  А как только вы находите какую-нибудь вершину b, которая тут 2, тогда можно заметить,
[03:33:14.700 --> 03:33:21.700]  что тогда она 2-связана, видимо, не только с этой вершины, но и со всеми вот этими.
[03:33:21.700 --> 03:33:22.700]  Вот.
[03:33:22.700 --> 03:33:23.700]  Ну, типа того.
[03:33:23.700 --> 03:33:24.700]  Да.
[03:33:24.700 --> 03:33:27.700]  Ну, по факту, правда, все равно получается вот этот алгоритм.
[03:33:27.700 --> 03:33:30.700]  Ну, просто заметим, что в этом алгоритме вы поток ищете тремя...
[03:33:30.700 --> 03:33:31.700]  Ну...
[03:33:31.700 --> 03:33:39.700]  А что происходит в варианте, когда мы делаем не максимальный поток, а максимальный бизнес?
[03:33:39.700 --> 03:33:41.700]  Нет, ну тут не суть, смотрите.
[03:33:41.700 --> 03:33:43.700]  Нет, просто в данном случае получится так.
[03:33:43.700 --> 03:33:45.700]  Нет, ну да, хорошо, допустим...
[03:33:45.700 --> 03:33:47.700]  Хотя нет, с разрезом тут, конечно, напряг, но...
[03:33:47.700 --> 03:33:52.700]  Хотя просто нет, фишка в том, что, по идее, как бы a и b1 вы уже, допустим, точно знаете,
[03:33:52.700 --> 03:33:57.700]  что они в одной компоненте, поэтому в будущих поисках вы можете a и b1 тупо жать.
[03:34:00.700 --> 03:34:01.700]  Вроде как.
[03:34:01.700 --> 03:34:06.700]  Интересно, если жать вершины, там, 3-связанность, это не попортится?
[03:34:06.700 --> 03:34:09.700]  А нет, может попортится, потому что мало ли, может она...
[03:34:09.700 --> 03:34:14.700]  А там 2-связанность b, 2-связанность b1, но если их объединить, там пути риска появляются.
[03:34:19.700 --> 03:34:22.700]  Ну, потому что у вас тут a или b там надо искать.
[03:34:22.700 --> 03:34:23.700]  Нет, это, конечно...
[03:34:23.700 --> 03:34:26.700]  Хотя нет, в случае зрения потоков так быть не должно.
[03:34:26.700 --> 03:34:31.700]  Вроде как.
[03:34:31.700 --> 03:34:34.700]  Хотя нет, если потоки...
[03:34:34.700 --> 03:34:37.700]  Сжимать их не получится, но получится, что...
[03:34:37.700 --> 03:34:42.700]  Нет, хотя стоп, если вы найдете разрез между a и b величины 2,
[03:34:42.700 --> 03:34:49.700]  то тогда очевидно, что b1, b2, вот эти все вершины должны просто в одну долю попасть.
[03:34:49.700 --> 03:34:53.700]  Потому что в противном случае мы нашли между a и b1 разрез величины 2,
[03:34:53.700 --> 03:34:55.700]  такого не бывает, как мы выяснили.
[03:34:55.700 --> 03:35:00.700]  Значит, они окажутся здесь, и у нас все хорошо.
[03:35:00.700 --> 03:35:02.700]  Нет, просто к чему я это?
[03:35:02.700 --> 03:35:05.700]  Это получается, что, по крайней мере...
[03:35:05.700 --> 03:35:13.700]  Хорошо, да, a и b разделили, причем эти все вершины, допустим, с этой стороны находятся.
[03:35:19.700 --> 03:35:23.700]  То есть, да, эти вершины находятся с этой стороны.
[03:35:23.700 --> 03:35:25.700]  То есть, про них мы все знаем.
[03:35:25.700 --> 03:35:28.700]  Причем, по-видимому, да, мы знаем, что...
[03:35:38.700 --> 03:35:42.700]  Правда, теперь дерево гамариху говорит, что эти вершины теперь можно сжать в одну
[03:35:42.700 --> 03:35:44.700]  и искать DFS и дальше здесь.
[03:35:44.700 --> 03:35:47.700]  Получается, в итоге, алгоритм за n квадрат.
[03:35:48.700 --> 03:35:50.700]  Так, тут получается за n квадрат.
[03:35:50.700 --> 03:35:54.700]  Но, видимо, существует алгоритм, который предлагает делать то же самое, но быстрее.
[03:35:54.700 --> 03:35:59.700]  Может быть, там конкретно свойство, именно конкретно 3 связности есть.
[03:35:59.700 --> 03:36:01.700]  Я не знаю.
[03:36:01.700 --> 03:36:05.700]  Потому что, в принципе, такой алгоритм нам позволяет просто компоненты k связности искать.
[03:36:05.700 --> 03:36:08.700]  За... там сколько получается?
[03:36:08.700 --> 03:36:15.700]  Ну да, за o от n. То есть, за o от v умножить на e умножить на k получается алгоритм, на самом деле.
[03:36:15.700 --> 03:36:18.700]  Да, так алгоритм за ve, а так вот это.
[03:36:18.700 --> 03:36:19.700]  Окей.
[03:36:20.700 --> 03:36:21.700]  Вот.
[03:36:21.700 --> 03:36:23.700]  Но взгляд такой есть.
[03:36:25.700 --> 03:36:28.700]  Так что, по крайней мере, про k связность можно поговорить.
[03:36:30.700 --> 03:36:32.700]  Так, ну что?
[03:36:32.700 --> 03:36:36.700]  Есть ли тут еще какие-то вопросы?
[03:36:48.700 --> 03:36:50.700]  Ну, может и да.
[03:36:50.700 --> 03:36:52.700]  Хотя...
[03:36:52.700 --> 03:36:53.700]  Ну, пара.
[03:36:53.700 --> 03:37:01.700]  Если ты ищешь дерево за v-куп, как минимум, за v-куп, на что-то еще, то что ты будешь делать на этом дереве?
[03:37:01.700 --> 03:37:03.700]  Ну, это правда.
[03:37:03.700 --> 03:37:05.700]  Ну, там...
[03:37:05.700 --> 03:37:07.700]  Все что угодно, для всех.
[03:37:07.700 --> 03:37:09.700]  У тебя запросов может быть.
[03:37:09.700 --> 03:37:11.700]  Нет, может быть.
[03:37:11.700 --> 03:37:13.700]  Ну, там просто...
[03:37:13.700 --> 03:37:15.700]  Ну, тогда там, скорее всего, предпочетно что-то работать.
[03:37:15.700 --> 03:37:17.700]  Нет, может быть...
[03:37:17.700 --> 03:37:18.700]  Знаете еще, что может быть?
[03:37:18.700 --> 03:37:21.700]  Нет, еще могут быть всякие вещи такие, что...
[03:37:21.700 --> 03:37:26.700]  Может быть, вам дадут какой-нибудь граф со специальными свойствами, который позволит вам найти дерево гомориху быстро.
[03:37:26.700 --> 03:37:28.700]  Просто вы будете что-то знать.
[03:37:29.700 --> 03:37:32.700]  И тогда, собственно, да, будет получаться хорошо.
[03:37:33.700 --> 03:37:35.700]  Так что, ну, как пойдет.
[03:37:37.700 --> 03:37:38.700]  Так повезет.
[03:37:38.700 --> 03:37:40.700]  Нет, погодите.
[03:37:40.700 --> 03:37:44.700]  Сейчас на камеру это обсуждать не надо, потому что если придумывается реально интересная задача,
[03:37:44.700 --> 03:37:48.700]  не стой, не стой, потому что кто-то выяснил, что, оказывается, решение более опубликовано на Ютубе.
[03:37:48.700 --> 03:37:50.700]  Просто никто не знает.
[03:37:50.700 --> 03:37:52.700]  Нет, или наоборот, все еще хуже будет.
[03:37:52.700 --> 03:37:58.700]  Окажется, что, значит, решение опубликовано на Ютубе, а в раунде участвовал там кто-то из слушавших лекции.
[03:37:59.700 --> 03:38:02.700]  То есть, если это будет кто-то знать, то это будет...
[03:38:02.700 --> 03:38:04.700]  Это будет просто реально выглядеть как слив.
[03:38:06.700 --> 03:38:08.700]  То есть, нет, конечно...
[03:38:08.700 --> 03:38:10.700]  Нет, понятно, что, конечно...
[03:38:10.700 --> 03:38:13.700]  Знаете, как это будет? Никто ничего не докажет, но коситься будут.
[03:38:15.700 --> 03:38:19.700]  Это нормально, что люди, которые учатся в одном месте...
[03:38:19.700 --> 03:38:21.700]  У них набор идей пересекается совсем.
[03:38:21.700 --> 03:38:23.700]  Нет, это, конечно, да.
[03:38:23.700 --> 03:38:25.700]  Но тут...
[03:38:25.700 --> 03:38:27.700]  Нет, ну да, да, да.
[03:38:27.700 --> 03:38:29.700]  Нет, ну тут вопрос нет.
[03:38:29.700 --> 03:38:31.700]  Среди нас-то понятно, да.
[03:38:31.700 --> 03:38:34.700]  Я имею в виду, что вообще лекцию точно будет слушать, наверное, тот, кто...
[03:38:34.700 --> 03:38:38.700]  Там будут слушать те, кто будут готовиться к экзамену.
[03:38:38.700 --> 03:38:40.700]  Нет, не есть вестиха.
[03:38:40.700 --> 03:38:41.700]  Ну, как повезет.
[03:38:41.700 --> 03:38:42.700]  Нет, хотя нет.
[03:38:42.700 --> 03:38:45.700]  Как показывает практика интеллекту, иногда кто-то дослушает.
[03:38:45.700 --> 03:38:48.700]  Нет, я могу даже сказать, кто.
[03:38:48.700 --> 03:38:50.700]  Потому что, например...
[03:38:50.700 --> 03:38:52.700]  Как-то, как выяснил я нот.
[03:38:52.700 --> 03:38:55.700]  Потому что как-то ко мне приближал Леша Васильев.
[03:38:55.700 --> 03:38:57.700]  И просто говорит...
[03:38:57.700 --> 03:38:59.700]  И сказал, что у меня там в лекции ошибка.
[03:38:59.700 --> 03:39:02.700]  Потому что выяснил, что он, оказывается, читал лекцию по гряди уголовных угол КШ.
[03:39:02.700 --> 03:39:04.700]  Там, собственно, готовился по...
[03:39:04.700 --> 03:39:08.700]  Одной из прошлого их записи сказал, у вас там в доказательстве ошибка.
[03:39:09.700 --> 03:39:13.700]  Ну, доказательства там где-то было.
[03:39:13.700 --> 03:39:15.700]  Ну, там даже не ошибка была.
[03:39:15.700 --> 03:39:17.700]  Просто где-то недостаточно точно проговорили.
[03:39:17.700 --> 03:39:19.700]  То есть там был какой-то момент, который надо уточнить.
[03:39:19.700 --> 03:39:22.700]  То есть, естественно, он уточнялся.
[03:39:22.700 --> 03:39:24.700]  Но как бы это...
[03:39:24.700 --> 03:39:27.700]  Это пример того, зачем кто-то может это послушать.
[03:39:27.700 --> 03:39:29.700]  Ну, и просто на самом деле я не знаю.
[03:39:29.700 --> 03:39:35.700]  На самом деле, честно говоря, других мест, где можно послушать лекцию по дереву Гамариху на русском языке, я слету не знаю.
[03:39:35.700 --> 03:39:37.700]  Но я не гарантирую, что их нет.
[03:39:37.700 --> 03:39:43.700]  Ну, как вам сказать?
[03:39:43.700 --> 03:39:47.700]  Ну, во-первых, там Паша Маврина не сильно много продвинутых, прям совсем продвинутых лекций читает.
[03:39:47.700 --> 03:39:52.700]  Потому что у него там на слету есть курсы ЭТМО, но он все-таки это более стандартный.
[03:39:52.700 --> 03:39:54.700]  Какой-то более...
[03:39:54.700 --> 03:39:56.700]  Он там линкат читал, у него там ошибка была.
[03:39:56.700 --> 03:39:58.700]  Да.
[03:39:58.700 --> 03:40:00.700]  Вроде нет.
[03:40:00.700 --> 03:40:03.700]  Нет, но про линкат еще вопрос, он какую часть рассказывал.
[03:40:03.700 --> 03:40:05.700]  Он мог...
[03:40:05.700 --> 03:40:07.700]  Да, реально.
[03:40:07.700 --> 03:40:09.700]  Он взял другой потенциал.
[03:40:09.700 --> 03:40:11.700]  Нет, он взял другой потенциал, но у него ошибка.
[03:40:11.700 --> 03:40:15.700]  Просто он не учитывал, потому что у него потенциал меняется при операции.
[03:40:15.700 --> 03:40:17.700]  Там он одноводится, конечно, у него ошибка была.
[03:40:17.700 --> 03:40:19.700]  Ну, нет, нормально, да ладно.
[03:40:19.700 --> 03:40:22.700]  Но там еще проблема, что в половине лекций он еще любит этого.
[03:40:22.700 --> 03:40:24.700]  Что-то он читал по-английски.
[03:40:24.700 --> 03:40:30.700]  Ну, не потому что он любит по-английски читать, а потому что там лекции, видимо, рассчитывались на не только русскую языку и аудиторию.
[03:40:30.700 --> 03:40:33.700]  В принципе ладно, тоже ход на самом деле.
[03:40:33.700 --> 03:40:35.700]  Но это уже другой вопрос.
[03:40:35.700 --> 03:40:37.700]  Ладно.
[03:40:37.700 --> 03:40:40.700]  Что у нас тогда?
[03:40:40.700 --> 03:40:43.700]  Чем хочется закончить?
[03:40:43.700 --> 03:40:48.700]  Чуть-чуть, наверное, еще посидим, потому что пару мелочей хочется попробовать разобрать.
[03:40:48.700 --> 03:40:53.700]  Я, правда, говорю про статьи, которые были найдены неделю назад.
[03:40:53.700 --> 03:40:55.700]  И это тоже.
[03:40:55.700 --> 03:40:59.700]  Нет, ну там просто такие простые, что хочется их добить.
[03:40:59.700 --> 03:41:00.700]  Чего?
[03:41:00.700 --> 03:41:02.700]  Да, я их смотрел.
[03:41:02.700 --> 03:41:13.700]  Не могу гарантировать, что полностью идеально, но есть подозрение, что основные идеи поняли и сейчас добили.
[03:41:13.700 --> 03:41:24.700]  Ну, потому что с этой точки зрения было очень жалко, что у нас сейчас вон с той доски исчезли все данные про Push Relay.
[03:41:24.700 --> 03:41:35.700]  Ну, как сказать, если у нас были электронные доски, то, конечно, да.
[03:41:35.700 --> 03:41:45.700]  Нет, там, как считать, я помню, как-то в 57-й я читал про Push Relay, там действительно просто оказалось, что все, что нужно было, там на самом деле уместилось на доске одной.
[03:41:45.700 --> 03:41:50.700]  Вот, там было в этом смысле красиво.
[03:41:50.700 --> 03:41:53.700]  Ну, можно было, да.
[03:41:53.700 --> 03:42:04.700]  Ой, доску перевернуть, ну, знаете, это как-то стандартная, да, как это, это называется, чешка и славака решили воссоздать нацию.
[03:42:04.700 --> 03:42:07.700]  Понятно каким образом.
[03:42:07.700 --> 03:42:12.700]  Да, чешка и славака решили воссоздать нацию чехс-славаки.
[03:42:12.700 --> 03:42:16.700]  Да, следующий кадр, значит, стоит девушка, у нее на руках ребенок.
[03:42:17.700 --> 03:42:21.700]  Кто? Девушка грустна. Славака, чех.
[03:42:21.700 --> 03:42:24.700]  Значит так, парень берет ребенка, так переворачивает.
[03:42:24.700 --> 03:42:34.700]  А вот теперь хорошо.
[03:42:34.700 --> 03:42:42.700]  Ну, что-то такая какая-то ассоциация, да.
[03:42:42.700 --> 03:42:50.700]  Как говорится, хотите более смешных шуток, смотрите современный КВН.
[03:42:50.700 --> 03:42:55.700]  Ну, там, правда, там в той же игре будут, правда, более мощные шутки, на самом деле, да.
[03:42:55.700 --> 03:43:03.700]  А, собственно, в той же шутке было, собственно, в той же игре была вот эта, собственно, про ГУС-услуги.
[03:43:03.700 --> 03:43:10.700]  Да нет, так как мульти просто, да, смотрите, просто КВН 2004 год, третья, одна, восьмая, все, игра уже вышла.
[03:43:10.700 --> 03:43:15.700]  Так что можно, я, кстати, в сериале рекомендую, очень хорошая игра получилась, действительно.
[03:43:15.700 --> 03:43:20.700]  Ссылка в описании.
[03:43:20.700 --> 03:43:25.700]  Да-да-да, для тех, кто не умеет губить, да-да-да.
[03:43:25.700 --> 03:43:28.700]  Вот так вот.
[03:43:28.700 --> 03:43:33.700]  Ладно, значит, давайте посмотрим, что хочется про Pushy Label доказать.
[03:43:33.700 --> 03:43:42.700]  Ну, вообще так, первая идея, хочется в Pushy Label впилить линкат.
[03:43:42.700 --> 03:43:44.700]  Да, очень хочется.
[03:43:44.700 --> 03:43:47.700]  Ну, потому что, смотрите, в чем у нас вообще задача?
[03:43:47.700 --> 03:43:53.700]  Мы знаем, что если мы делаем Pushy Label АВК, то у нас получается В квадрат Е.
[03:43:53.700 --> 03:43:58.700]  А давайте вспомним, а за счет чего В квадрат Е?
[03:43:58.700 --> 03:44:02.700]  Ведь заметим, у нас там почти всего ВЕ.
[03:44:02.700 --> 03:44:06.700]  Например, у нас ВЕ насыщающих пушей, помните, да?
[03:44:06.700 --> 03:44:11.700]  А еще у нас серые лейблы суммарно за ВЕ работают.
[03:44:11.700 --> 03:44:14.700]  Вот, то есть единственная у нас проблема есть не насыщающий пуш.
[03:44:14.700 --> 03:44:16.700]  Что такое не насыщающий пуш?
[03:44:16.700 --> 03:44:21.700]  То есть когда избытор кончился, а ребро нет.
[03:44:21.700 --> 03:44:26.700]  И мы выяснили, что если делать АВК, то таких будет не более, чем В квадрат Е.
[03:44:26.700 --> 03:44:28.700]  Правда, есть оговорка.
[03:44:29.700 --> 03:44:35.700]  Правда, мы там придумали кучу способов, как сделать так, чтобы у нас таких пушей было не более, чем В квадрат.
[03:44:35.700 --> 03:44:38.700]  Это в прошлый раз было, помните, да?
[03:44:38.700 --> 03:44:40.700]  Ну, как мы это делали?
[03:44:40.700 --> 03:44:45.700]  Но одна из технологий, на которой сейчас будем базироваться, она базировалась на очереди.
[03:44:45.700 --> 03:44:52.700]  То есть мы храним в очереди все вершины, которые сейчас избыточны.
[03:44:52.700 --> 03:44:57.700]  То есть просто храним.
[03:44:57.700 --> 03:45:02.700]  Технология была, что мы достаем очередную и делаем дисчарч.
[03:45:02.700 --> 03:45:09.700]  Делаем дисчарч, попутно, если там мы где-то благодаря нашим пушам из этой вершины появился избытор,
[03:45:09.700 --> 03:45:12.700]  то есть был ноль, стал не ноль, то значит мы ее в конец очереди пихаем.
[03:45:12.700 --> 03:45:19.700]  Но это такая технология, как мы доказывали, работает за куб.
[03:45:19.700 --> 03:45:23.700]  Почему она работает за куб?
[03:45:23.700 --> 03:45:30.700]  Ну, например, потому что у нас есть, выясняется, что когда мы пройдем очередную итерацию очереди,
[03:45:30.700 --> 03:45:34.700]  то есть там можно очередь говорить так, что первая итерация то, что было изначально добавлено,
[03:45:34.700 --> 03:45:38.700]  вторая итерация, что было добавлено после, ну и так далее.
[03:45:38.700 --> 03:45:42.700]  И тогда оказывалось, что на каждой итерации либо был выполнен релейбл,
[03:45:42.700 --> 03:45:48.700]  либо просто максимальная высота избытка уменьшилась на один.
[03:45:48.700 --> 03:45:51.700]  А этот максимум увеличивается суммарно не более чем на релейбл,
[03:45:51.700 --> 03:45:54.700]  а суммарно релейблы увеличивают этот максимум не более чем на v квадрат,
[03:45:54.700 --> 03:45:57.700]  ну 2 v квадрата, поэтому получалось хорошо.
[03:45:57.700 --> 03:46:01.700]  Но это краткое содержание, помните?
[03:46:01.700 --> 03:46:07.700]  А теперь идея такая, хочется попробовать попихать туда линкат.
[03:46:07.700 --> 03:46:10.700]  Каким образом?
[03:46:10.700 --> 03:46:13.700]  Ну, просто возникла мысль такая,
[03:46:13.700 --> 03:46:21.700]  потому что дело в том, что ненасыщающие пуши часто они образуют целые цепочки.
[03:46:21.700 --> 03:46:27.700]  То есть может быть окажется, что ненасыщающий пуш из этой вершины пропихнул поток сюда.
[03:46:27.700 --> 03:46:31.700]  А потом выяснилось, что весь этот избыток скушался сюда,
[03:46:31.700 --> 03:46:37.700]  то есть это такие пуши, которые указатель по ребрам не сдвинули.
[03:46:37.700 --> 03:46:44.700]  Ну, потому что если сдвинули, то, в общем-то, ничего интересного.
[03:46:44.700 --> 03:46:47.700]  Так вот, возникает такая идея.
[03:46:47.700 --> 03:46:51.700]  Она в динице у нас уже возникала, применим ее и сюда.
[03:46:51.700 --> 03:46:56.700]  Давайте в каждый момент времени, то есть здесь у нас есть указатель,
[03:46:56.700 --> 03:47:00.700]  показывает на какое-то ребро, которое еще и смотрит по высоте вниз,
[03:47:00.700 --> 03:47:05.700]  и там еще и пропускная способность не ноль,
[03:47:05.700 --> 03:47:11.700]  то давайте заметим, что эти ребра образуют подвешенные деревья.
[03:47:11.700 --> 03:47:14.700]  Ну, как-то так они их обновляют.
[03:47:14.700 --> 03:47:18.700]  Это типа актуальное ребро.
[03:47:18.700 --> 03:47:21.700]  Или даже текущее ребро.
[03:47:21.700 --> 03:47:25.700]  Текущее ребро тут, конечно, двусмысленно в этом контексте.
[03:47:25.700 --> 03:47:29.700]  Да, ну ладно, не путайте слово текущее и протекающее.
[03:47:29.700 --> 03:47:31.700]  Вот так.
[03:47:31.700 --> 03:47:35.700]  То есть текущее, которое current.
[03:47:35.700 --> 03:47:41.700]  Нет, current это да, но просто по-английски...
[03:47:41.700 --> 03:47:45.700]  Нет, current оно как бы к самой жидкости вроде слова не имеет отношения.
[03:47:45.700 --> 03:47:48.700]  Да, это просто каламбур имеет мысль.
[03:47:48.700 --> 03:47:58.700]  Нет, там есть отношение к потокам в виде concurrency, конечно,
[03:47:58.700 --> 03:48:01.700]  но это другие потоки.
[03:48:01.700 --> 03:48:06.700]  Current, который поток, кажется, воды тоже.
[03:48:06.700 --> 03:48:08.700]  В реке, да.
[03:48:08.700 --> 03:48:13.700]  Current это течение или поток.
[03:48:13.700 --> 03:48:17.700]  Или также значение топ, село, толка или течет топ.
[03:48:17.700 --> 03:48:19.700]  Теплый или current это течет топ.
[03:48:19.700 --> 03:48:22.700]  Печально, ну ладно.
[03:48:22.700 --> 03:48:24.700]  Ладно, все, хорошо, не победили каламбур.
[03:48:24.700 --> 03:48:26.700]  Хорошо, ладно, ничего не поделаешь.
[03:48:26.700 --> 03:48:27.700]  Бывает.
[03:48:27.700 --> 03:48:31.700]  Значит, смотрите, у нас получается такое дерево.
[03:48:31.700 --> 03:48:36.700]  То есть получается вот такие деревья.
[03:48:36.700 --> 03:48:37.700]  Правда, это именно деревья.
[03:48:37.700 --> 03:48:44.700]  То есть это не обязательно просто деревья.
[03:48:44.700 --> 03:48:48.700]  Такие текущие вершины можно действительно так создать.
[03:48:48.700 --> 03:48:49.700]  Что мы будем делать?
[03:48:49.700 --> 03:48:52.700]  Инвариант.
[03:48:52.700 --> 03:48:54.700]  Мы будем пытаться...
[03:48:54.700 --> 03:48:56.700]  На уровне идеи хочется пытаться делать так.
[03:48:56.700 --> 03:49:03.700]  Давайте создавать такие ребра, какие есть, какие уж деревья есть,
[03:49:03.700 --> 03:49:05.700]  и пытаемся на них что-то сделать.
[03:49:05.700 --> 03:49:10.700]  Идея возникает такая.
[03:49:10.700 --> 03:49:14.700]  Допустим, у нас тут неожиданно образовался избыток E,
[03:49:14.700 --> 03:49:16.700]  которое мы очень хотим пропихнуть.
[03:49:16.700 --> 03:49:18.700]  Но у меня идея такая.
[03:49:18.700 --> 03:49:21.700]  Давайте пропихивать это не только по вот этому ребру,
[03:49:21.700 --> 03:49:25.700]  а ведь можно же до упора пропихивать в некотором плане.
[03:49:25.700 --> 03:49:27.700]  То есть мы можем сделать push по этому ребру,
[03:49:27.700 --> 03:49:29.700]  потом push по этому, потом push по этому,
[03:49:29.700 --> 03:49:32.700]  потом push по этому, потом push по этому.
[03:49:32.700 --> 03:49:36.700]  Возникает вопрос, что дойдет досюда при таких push?
[03:49:36.700 --> 03:49:40.700]  Давайте предполагать, что тут пока пусто.
[03:49:40.700 --> 03:49:43.700]  Но тогда, очевидно, надо на линкате просто взять минимум.
[03:49:43.700 --> 03:49:44.700]  Вот, допустим, вот он.
[03:49:44.700 --> 03:49:49.700]  Тут полезно будет из всех минимумов брать самый ближний корень.
[03:49:49.700 --> 03:49:50.700]  И тогда окажется следующее.
[03:49:50.700 --> 03:49:53.700]  Досюда дойдет ровно столько.
[03:49:53.700 --> 03:49:56.700]  И мы можем, в принципе, сказать, что у нас сейчас
[03:49:56.700 --> 03:49:59.700]  по этой штуке протекло вот столько,
[03:49:59.700 --> 03:50:02.700]  и после этого это ребро убилось.
[03:50:07.700 --> 03:50:08.700]  Можно сказать, убилось.
[03:50:08.700 --> 03:50:11.700]  И тогда в этом месте мы просто делаем cut,
[03:50:11.700 --> 03:50:14.700]  и указатель сдвигается на какие-то следующие ребра.
[03:50:18.700 --> 03:50:24.700]  Но правда, формально говоря, мы не имели права делать push ровно с тока,
[03:50:24.700 --> 03:50:28.700]  потому что всегда push делался ровно с тока сколько можем.
[03:50:28.700 --> 03:50:32.700]  Поэтому вполне вероятно, что прописная способность этого ребра
[03:50:32.700 --> 03:50:33.700]  была меньше, чем вот это е.
[03:50:34.700 --> 03:50:37.700]  Поэтому по-хорошему нам придется тут вайликом это делать
[03:50:37.700 --> 03:50:39.700]  до тех пор, пока мы в какой-то момент не упремся.
[03:50:39.700 --> 03:50:42.700]  То есть закончится этой ситуацией.
[03:50:42.700 --> 03:50:45.700]  Ну, давайте вот это ребро пока временно не трогаем,
[03:50:45.700 --> 03:50:48.700]  просто отпилили пока и все.
[03:50:48.700 --> 03:50:50.700]  Чем это закончится?
[03:50:50.700 --> 03:50:52.700]  То есть заканчивается эта идея.
[03:50:52.700 --> 03:50:54.700]  То есть заканчивается тем, что в какой-то момент
[03:50:54.700 --> 03:50:56.700]  что-то отпилили, тут отпилили.
[03:50:56.700 --> 03:51:06.300]  Ну, короче говоря, заканчивается тем, что у вас тут в е остался какой-то путь, и выяснилось, что у всех вот этих ребер профессиональные способности больше, чем е.
[03:51:08.460 --> 03:51:13.140]  То есть это означает, что у вас тогда происходит просто цепочка ненасыщающих проталкиваний.
[03:51:15.020 --> 03:51:20.140]  То есть вы можете просто там... Ну, понятно, все эти проталкивания вы делаете как бы условно за логарифом, да?
[03:51:20.140 --> 03:51:26.700]  Ну, потому что вы там в дереве, ну, делаете это отложенные пуши, так сказать.
[03:51:26.700 --> 03:51:31.580]  Как мы еще раз, мы взяли минимум, да?
[03:51:31.580 --> 03:51:37.580]  На всем этом пути минимум отнять, а нулевые отрезать катом.
[03:51:37.580 --> 03:51:40.140]  Да, нет, если... Какие из них нулевые?
[03:51:40.140 --> 03:51:42.860]  Ну, в линкате у нас такая опция есть.
[03:51:43.820 --> 03:51:54.380]  Да, ну, будем считать, что линкат это такая магическая структура данных, которая не просто ищет минимум на пути до корня, она еще и знает, где он находится, причем у всех минимум находится самый ближний к корню.
[03:51:59.180 --> 03:52:02.380]  Ну, минимум найдем.
[03:52:03.340 --> 03:52:08.940]  Но он же поддерживает только минимум, не арк-минюм. Мы еще не знаем, где это минимум на пути лежит.
[03:52:08.940 --> 03:52:14.700]  Ну, сделаем, ой, ну, сделаем аккуратный спуск в плей-дереве, например.
[03:52:14.700 --> 03:52:17.180]  Ну, во-первых, аккуратный спуск.
[03:52:17.180 --> 03:52:29.260]  Но у нас опять-таки несколько меню на пути есть, и нам нужно для всех этих вершинок, из которых идет вот это ребро минимального веса, и у катателей этого ребра дальше.
[03:52:30.140 --> 03:52:31.260]  Ну, да.
[03:52:36.300 --> 03:52:39.980]  Нет, смотрите, нет, мы знаем, что как бы нету.
[03:52:39.980 --> 03:52:45.980]  Да, согласен, согласен. У нас же всего же в игре, поэтому все хотят копираться и все делать, согласен.
[03:52:45.980 --> 03:52:55.020]  Ну, вот, да и да. Но не говоря уже о том, что, я говорю потом, там это все равно, спуск делается аккуратным спуском в плей-дереве, там вроде потенциалы не портятся.
[03:52:55.100 --> 03:52:59.580]  Да, тут уже надо вспоминать потенциалы, но мы сейчас не будем делать, просто поверим, что это делается.
[03:52:59.580 --> 03:53:01.580]  Это будет в экзамене.
[03:53:01.580 --> 03:53:04.700]  Ой, ну, на экзамене у вас будет время подумать.
[03:53:06.700 --> 03:53:08.700]  У вас будет время подумать до экзамена.
[03:53:08.700 --> 03:53:10.700]  Ну, вот.
[03:53:10.700 --> 03:53:21.900]  Так вот, фишка просто такая, что когда вы, но тут правда еще фишка, когда вы этот минимум ищете, и вы ищете, когда этот минимум оказался, когда он оказался меньше либо равен Е.
[03:53:22.780 --> 03:53:33.100]  Потому что если это, если минимум оказался строго больше Е, то все, что у вас произойдет, это вы просто по этому пути пропустите это Е и ребра не убились.
[03:53:33.100 --> 03:53:37.100]  Просто это Е, этот избыток Е переместился вот сюда, в корень.
[03:53:37.100 --> 03:53:41.100]  Вычитание на пути.
[03:53:41.100 --> 03:53:45.100]  Да, но это тоже как бы, верим, что умеем такие вещи делать.
[03:53:45.100 --> 03:53:49.100]  Ну, отложенные операции на сплей-дереве, наверное, мы умеем делать.
[03:53:49.300 --> 03:53:50.300]  Надеюсь.
[03:53:50.300 --> 03:53:54.300]  Нет, если на экзамене выяснилось, что не умеем, то, конечно, это будет очень грустно.
[03:53:54.300 --> 03:53:57.300]  Да, да, да.
[03:53:57.300 --> 03:54:02.300]  Нет, ну, я не хотелось бы, чтобы это было по принципу, да, все, что было в первом семестре остается в первом семестре.
[03:54:02.300 --> 03:54:06.300]  Ну, не хотелось бы.
[03:54:06.300 --> 03:54:12.300]  Нет, ну ладно, в данном случае, конечно, аккуратно сослаться, наверное, можно.
[03:54:12.300 --> 03:54:18.300]  Но я просто, если это слету не будет очевидно, то скажу, ой, нет, а ну-ка уточните как.
[03:54:18.500 --> 03:54:22.500]  Нет, ну на уровне примерности нет, ладно.
[03:54:22.500 --> 03:54:28.500]  Нет, вряд ли я там буду свирествовать, а ну-ка, распишите мне сплей-дерево полностью.
[03:54:28.500 --> 03:54:34.500]  Вы захотите применить здесь софт-хип?
[03:54:38.500 --> 03:54:41.500]  Не, не надо. Значит, смотрите.
[03:54:41.500 --> 03:54:43.500]  Значит, идем дальше.
[03:54:43.500 --> 03:54:44.500]  Значит, смотрите.
[03:54:44.500 --> 03:54:46.500]  Тогда у вас что происходит?
[03:54:46.700 --> 03:54:54.700]  Вы тут будете, конечно, вот это вот упихивать, упихивать, упихивать, удалять ребра, удалять ребра до тех пор пока.
[03:54:54.700 --> 03:55:02.700]  Но заметим, что так как каждое удаление ребро, это по сути его насыщение, то конкретное насыщение у вас будет не более чем логариф, правда?
[03:55:02.700 --> 03:55:04.700]  Не более чем нм, суммарно, правда?
[03:55:04.700 --> 03:55:10.700]  Поэтому получается, с насыщенными получается, там все это работает за нм, пока логн,
[03:55:10.900 --> 03:55:12.900]  Ну, по крайней мере, на уровне идеи.
[03:55:12.900 --> 03:55:15.900]  Но плюс еще без иксов.
[03:55:15.900 --> 03:55:17.900]  То есть бывают еще просто вот эти вот проталки.
[03:55:17.900 --> 03:55:22.900]  Когда просто мы вдоль пути просто что-то сделали не насыщающее проталкивание, никто не убился.
[03:55:22.900 --> 03:55:24.900]  Чего?
[03:55:24.900 --> 03:55:26.900]  Ну, каждая такая штука логарифом.
[03:55:26.900 --> 03:55:28.900]  Нет, ну каждая такая штука логарифом, а теперь у вас есть какой-то вопрос.
[03:55:28.900 --> 03:55:30.900]  А сколько таких штук?
[03:55:33.900 --> 03:55:35.900]  Ну, та же оценка нм, нет?
[03:55:36.100 --> 03:55:41.100]  Да, потому что мы после каждого, если мы будем до упивка проталкивать, то у кого-то указание сдвинется.
[03:55:41.100 --> 03:55:43.100]  Не, не факт.
[03:55:43.100 --> 03:55:47.100]  А вдруг тут профессоры способности 5, 7, 9, а вы хотите проталкнуть 2?
[03:55:47.100 --> 03:55:50.100]  Так это та же логика, что у нас все чередями.
[03:55:53.100 --> 03:55:55.100]  Ну, как сказать, да.
[03:55:55.100 --> 03:55:57.100]  Но теперь надо думать аккуратно.
[03:55:57.100 --> 03:55:59.100]  То есть к чему это приведет?
[03:55:59.300 --> 03:56:09.300]  Это приведет к тому, что у вас, да, вот у этой вершины показатель, то есть у этой вершины перестала быть избыточной,
[03:56:09.300 --> 03:56:12.300]  а вот это стало, но правда у нее при этом высота уменьшилась.
[03:56:14.300 --> 03:56:16.300]  Может нам это как-то поможет?
[03:56:16.300 --> 03:56:18.300]  Правда, как нам это поможет?
[03:56:18.300 --> 03:56:20.300]  Все это не очевидно.
[03:56:24.300 --> 03:56:26.300]  Ну вот, как нам это поможет?
[03:56:26.500 --> 03:56:28.500]  Ну, в принципе, нет.
[03:56:35.500 --> 03:56:37.500]  Но с другой стороны, давайте смотреть.
[03:56:37.500 --> 03:56:39.500]  Что нам тут хочется делать?
[03:56:43.500 --> 03:56:45.500]  Давайте попробуем аккуратно.
[03:56:45.500 --> 03:56:49.500]  Хотя нет, можно попробовать это просто оценить.
[03:56:49.500 --> 03:56:53.500]  Но первое, что можно, как воспользоваться тем, что у нас просто уменьшилась высота?
[03:56:53.700 --> 03:56:59.700]  Хочется, конечно, очень соблазнительно ввести опять потенцеваль.
[03:56:59.700 --> 03:57:05.700]  На этот раз просто сумма весов избыточных вершин.
[03:57:09.700 --> 03:57:13.700]  И действительно, казалось бы, каждая такая операция уменьшает потенциал.
[03:57:16.700 --> 03:57:18.700]  А расти этот потенциал будет не более чем.
[03:57:18.900 --> 03:57:20.900]  Но правда, с другой стороны, как мы воспользуемся тем,
[03:57:20.900 --> 03:57:23.900]  что мы тут пробежались аж на подсыпочке?
[03:57:30.900 --> 03:57:32.900]  Как мы этим будем пользоваться?
[03:57:39.900 --> 03:57:41.900]  Будем мы, видимо, пользоваться.
[03:57:42.100 --> 03:57:48.100]  У нас же был потенциал максимум из высот, вершин с избытком.
[03:57:50.100 --> 03:57:52.100]  Ну, был максимум.
[03:57:52.100 --> 03:57:56.100]  К сожалению, он нам не гарантирует, что максимум у нас как-то упадет.
[03:58:00.100 --> 03:58:02.100]  Поэтому тут действительно не все так просто.
[03:58:02.100 --> 03:58:06.100]  Правда, тут мечта заключается в том, что, например,
[03:58:06.100 --> 03:58:10.100]  на уровне мечты очень хотелось бы, конечно, чтобы...
[03:58:10.300 --> 03:58:12.300]  Теперь вот думаю, возникает вопрос,
[03:58:14.300 --> 03:58:16.300]  а куда этот избыток из этой вершины делать?
[03:58:28.300 --> 03:58:32.300]  В идеале, на самом деле, конечно, ничего страшного не будет,
[03:58:32.300 --> 03:58:36.300]  потому что в идеале так.
[03:58:36.300 --> 03:58:38.300]  Если мы прям идеально храним все ребра,
[03:58:38.500 --> 03:58:40.500]  текущие, которые есть, мы про в линкате храним,
[03:58:43.500 --> 03:58:47.500]  то тогда получается, что если мы тут уперлись в какую-то вершину,
[03:58:49.500 --> 03:58:52.500]  в этом смысле уперлись в какую-то вершину и дальше хода нет,
[03:58:52.500 --> 03:58:55.500]  то значит, мы из этой вершины прямо сейчас должны сделать релейбл.
[03:58:59.500 --> 03:59:00.500]  Понятно, да?
[03:59:00.500 --> 03:59:02.500]  А релейблов у нас всего n квадрат.
[03:59:04.500 --> 03:59:07.500]  Получается, каждая такая ненасыщая штука предшествует релейблу,
[03:59:07.700 --> 03:59:11.700]  значит, без нее получается n квадрат лог n,
[03:59:11.700 --> 03:59:15.700]  и того у нас получился уже на халяву алгоритм nm лог n.
[03:59:20.700 --> 03:59:22.700]  Но да, в эти nm лог n еще входит,
[03:59:22.700 --> 03:59:25.700]  что когда вы находите новое ребро, вы должны сделать линк,
[03:59:25.700 --> 03:59:27.700]  а когда оно насытилось, вы должны сделать кат.
[03:59:37.700 --> 03:59:41.700]  Нет, хотя нет, есть еще одна маленькая подлянка.
[03:59:41.700 --> 03:59:43.700]  Когда вы делаете релейбл из какой-то вершины,
[03:59:43.700 --> 03:59:49.700]  вы должны убить все вот эти ребра, которые в нее ведут.
[03:59:53.700 --> 03:59:55.700]  Но это на самом деле не сильно страшно.
[03:59:58.700 --> 04:00:02.700]  Потому что вы приближитесь за от токчащих из нее ребер,
[04:00:02.700 --> 04:00:04.700]  как входящих, так и исходящих,
[04:00:04.900 --> 04:00:08.900]  это одинаковое количество, и просто лишнее это все сделаете.
[04:00:08.900 --> 04:00:11.900]  В сумме получится лишних операций nm лог n тоже.
[04:00:13.900 --> 04:00:15.900]  Но это на самом деле для нас не достижение.
[04:00:15.900 --> 04:00:17.900]  Если бы у нас была цель составить алгоритм за nm лог n,
[04:00:17.900 --> 04:00:19.900]  то с динецом было бы проще.
[04:00:25.900 --> 04:00:31.900]  Но тут приходит голубик итальян и говорят,
[04:00:32.100 --> 04:00:38.100]  а давайте зафиксируем константу k, которую выберем позже.
[04:00:41.100 --> 04:00:45.100]  И будем в этих деревьях следить еще за одной наглой вещью.
[04:00:47.100 --> 04:00:51.100]  Мы будем следить за тем, что размер каждого дерева
[04:00:51.100 --> 04:00:55.100]  не превосходит k.
[04:00:55.100 --> 04:00:57.100]  Вот прям следить будем.
[04:00:59.100 --> 04:01:01.100]  Да, именно.
[04:01:02.100 --> 04:01:08.100]  Инвериант такой, все вершины так же в очереди,
[04:01:08.100 --> 04:01:10.100]  обрабатываются они по очереди.
[04:01:10.100 --> 04:01:12.100]  Инвериант звучит так, что у нас в каждый момент времени
[04:01:12.100 --> 04:01:14.100]  есть какие-то деревья,
[04:01:14.100 --> 04:01:16.100]  но при этом важно, что все активные вершины
[04:01:16.100 --> 04:01:18.100]  являются корнями деревьев.
[04:01:18.100 --> 04:01:20.100]  Активные в смысле избыточные.
[04:01:24.100 --> 04:01:26.100]  По-хорошему говоря, если у нас так произошло,
[04:01:26.100 --> 04:01:29.100]  что мы просто пихнули до корня и ребра не убились,
[04:01:29.300 --> 04:01:34.300]  то эта вершина отправляется в очередь,
[04:01:34.300 --> 04:01:36.300]  если ее там еще не было.
[04:01:36.300 --> 04:01:38.300]  Понятно, да?
[04:01:38.300 --> 04:01:40.300]  Ну и теперь давайте думать.
[04:01:40.300 --> 04:01:46.300]  Но тогда, когда такой корень,
[04:01:46.300 --> 04:01:48.300]  тогда получается, что когда мы достаем из очереди вершину,
[04:01:48.300 --> 04:01:50.300]  значит она избыточна,
[04:01:50.300 --> 04:01:52.300]  и мы видим, что она по-любому корень.
[04:01:52.300 --> 04:01:54.300]  Что мы тогда делаем?
[04:01:54.500 --> 04:01:56.500]  Ну делаем мы следующее.
[04:01:56.500 --> 04:01:58.500]  Понятно, мы тут,
[04:01:58.500 --> 04:02:00.500]  как положено, согласно диктатю,
[04:02:00.500 --> 04:02:02.500]  ищем следующее хорошее ребро.
[04:02:04.500 --> 04:02:06.500]  Ну понятно, ладно, если не нашли,
[04:02:06.500 --> 04:02:08.500]  то удаляем вот эти ребра
[04:02:08.500 --> 04:02:10.500]  и делаем релебл.
[04:02:10.500 --> 04:02:12.500]  Временно останавливаемся.
[04:02:12.500 --> 04:02:14.500]  Пихнув, может, вершину куда-нибудь в очередь,
[04:02:14.500 --> 04:02:16.500]  а можно и не пихнуть.
[04:02:20.500 --> 04:02:22.500]  А если не пихнули,
[04:02:22.700 --> 04:02:24.700]  значит там какой-то релебл,
[04:02:24.700 --> 04:02:26.700]  а если мы ребро нашли, то что делать?
[04:02:26.700 --> 04:02:28.700]  Тогда мы замечаем, что это ребро,
[04:02:28.700 --> 04:02:30.700]  тогда мы пришли в какую-то вершину,
[04:02:30.700 --> 04:02:32.700]  которая в каком-то ленткате лежит.
[04:02:32.700 --> 04:02:34.700]  Не обязательно это конец
[04:02:34.700 --> 04:02:36.700]  какого-то пути,
[04:02:36.700 --> 04:02:38.700]  то есть там всякие там
[04:02:38.700 --> 04:02:40.700]  бла-бла-бла-бла-бла,
[04:02:40.700 --> 04:02:42.700]  вот это вот все.
[04:02:42.700 --> 04:02:44.700]  Нас начинают выгонять?
[04:02:44.900 --> 04:02:46.900]  Да.
[04:02:50.900 --> 04:02:52.900]  Можем, но не хочется.
[04:02:54.900 --> 04:02:56.900]  Тогда возникает действительно
[04:02:56.900 --> 04:02:58.900]  естественная идея.
[04:02:58.900 --> 04:03:00.900]  Так, ну то есть действительно,
[04:03:00.900 --> 04:03:02.900]  давайте сделаем,
[04:03:02.900 --> 04:03:04.900]  ну то есть идея такая, давайте сделаем push
[04:03:04.900 --> 04:03:06.900]  по этому ребру, нет, мы не будем это ребро
[04:03:06.900 --> 04:03:08.900]  добавлять в ленткат, мы сделаем
[04:03:08.900 --> 04:03:10.900]  тупо push.
[04:03:11.100 --> 04:03:13.100]  Вот.
[04:03:13.100 --> 04:03:15.100]  Значит,
[04:03:15.100 --> 04:03:17.100]  то есть делаем
[04:03:17.100 --> 04:03:19.100]  соответственно push.
[04:03:19.100 --> 04:03:21.100]  Ну, точнее так,
[04:03:21.100 --> 04:03:23.100]  если он оказался,
[04:03:23.100 --> 04:03:25.100]  нет, точнее так, придется все-таки
[04:03:25.100 --> 04:03:27.100]  добавить его к ленткату,
[04:03:27.100 --> 04:03:29.100]  если этот push оказался не насыщающим.
[04:03:29.100 --> 04:03:31.100]  Тогда мы делаем
[04:03:31.100 --> 04:03:33.100]  соответственно push,
[04:03:33.100 --> 04:03:35.100]  а из этой вершины
[04:03:35.100 --> 04:03:37.100]  тогда уже делаем тот пропихон
[04:03:37.100 --> 04:03:39.100]  до конца, который мы уже говорили раньше.
[04:03:39.300 --> 04:03:41.300]  То есть наша же цель, чтобы все избытки
[04:03:41.300 --> 04:03:43.300]  только в корнях остались.
[04:03:43.300 --> 04:03:45.300]  И тогда у нас два варианта.
[04:03:45.300 --> 04:03:47.300]  Ну, тогда у нас некоторое время будут удаляться
[04:03:47.300 --> 04:03:49.300]  ребра, но суммарные удаления они будут
[04:03:49.300 --> 04:03:51.300]  работать
[04:03:51.300 --> 04:03:53.300]  за n лока, либо в какой-то момент
[04:03:53.300 --> 04:03:55.300]  они закончатся.
[04:03:55.300 --> 04:03:57.300]  Правда, единственная проблема, что это ребро
[04:03:57.300 --> 04:03:59.300]  мы добавлять должны не всегда.
[04:03:59.300 --> 04:04:01.300]  Потому что мы же
[04:04:01.300 --> 04:04:03.300]  следим за мистическим вариантом.
[04:04:03.300 --> 04:04:05.300]  Ну, здесь идея такая,
[04:04:05.300 --> 04:04:07.300]  если оказалось, что можно
[04:04:07.300 --> 04:04:09.300]  ребро добавить, и беды не будет.
[04:04:09.300 --> 04:04:11.300]  То есть размер остался меньше, либо равно k.
[04:04:11.300 --> 04:04:13.300]  Ну, в общем-то тогда все делаем
[04:04:13.300 --> 04:04:15.300]  и не паримся.
[04:04:15.300 --> 04:04:17.300]  Понимаете, да?
[04:04:17.300 --> 04:04:19.300]  Вот.
[04:04:19.300 --> 04:04:21.300]  Ну, вот.
[04:04:21.300 --> 04:04:23.300]  Ну, а, соответственно,
[04:04:23.300 --> 04:04:25.300]  а что делать?
[04:04:25.300 --> 04:04:27.300]  Ну, вот.
[04:04:27.300 --> 04:04:29.300]  Ну, а что тогда делать, если не получилось?
[04:04:29.300 --> 04:04:31.300]  То есть если размер оказался
[04:04:31.300 --> 04:04:33.300]  больше k. Ну, тогда мы просто
[04:04:33.300 --> 04:04:35.300]  тогда мы просто
[04:04:35.300 --> 04:04:37.300]  может быть за 1
[04:04:37.300 --> 04:04:39.300]  пропихиваем поток здесь.
[04:04:39.300 --> 04:04:41.300]  Вот.
[04:04:41.300 --> 04:04:43.300]  Ну, вот.
[04:04:43.300 --> 04:04:45.300]  И, соответственно,
[04:04:45.300 --> 04:04:47.300]  делаем аккуратный пропихон
[04:04:47.300 --> 04:04:49.300]  сюда.
[04:04:49.300 --> 04:04:51.300]  Вот, понимаете, да?
[04:04:51.300 --> 04:04:53.300]  Да, но потом
[04:04:53.300 --> 04:04:55.300]  не забываем, особенно если это ребро
[04:04:55.300 --> 04:04:57.300]  оказалось насыщающим, то есть
[04:04:57.300 --> 04:04:59.300]  если оно насытилось, то не забываем
[04:04:59.300 --> 04:05:01.300]  продолжить работу здесь.
[04:05:01.300 --> 04:05:03.300]  Ну, теперь возникает вопрос.
[04:05:03.300 --> 04:05:05.300]  Чем нам это помогло?
[04:05:05.300 --> 04:05:07.300]  Ну, мечта оптимизации у нас, конечно,
[04:05:07.300 --> 04:05:09.300]  заключалась в том, что у нас теперь, казалось бы,
[04:05:09.300 --> 04:05:11.300]  куча операций работает за
[04:05:11.300 --> 04:05:13.300]  nm log k.
[04:05:13.300 --> 04:05:15.300]  Да?
[04:05:15.300 --> 04:05:17.300]  Сейчас можно еще раз
[04:05:17.300 --> 04:05:19.300]  повторить, что мы сделали?
[04:05:19.300 --> 04:05:21.300]  Мы...
[04:05:21.300 --> 04:05:23.300]  Когда мы вообще
[04:05:23.300 --> 04:05:25.300]  это все делаем?
[04:05:25.300 --> 04:05:27.300]  Мы делаем, когда у нас
[04:05:27.300 --> 04:05:29.300]  мы запихнули какой-то астротопии
[04:05:29.300 --> 04:05:31.300]  и не встретили
[04:05:31.300 --> 04:05:33.300]  ни насытили, ни одной из ребров.
[04:05:33.300 --> 04:05:35.300]  Ну...
[04:05:35.300 --> 04:05:37.300]  Какую ситуацию мы рассматриваем?
[04:05:37.300 --> 04:05:39.300]  Вот когда мы там решаем
[04:05:39.300 --> 04:05:41.300]  добавлять нам дерево или нет?
[04:05:41.300 --> 04:05:43.300]  Ну, мы пока просто...
[04:05:43.300 --> 04:05:45.300]  Ну, мы проверяли, верно ли,
[04:05:45.300 --> 04:05:47.300]  что если я сейчас это ребро добавлю, то
[04:05:47.300 --> 04:05:49.300]  размер этого дерева будет больше k, да, или нет?
[04:05:49.300 --> 04:05:51.300]  Да, когда мы добавляли ребро?
[04:05:51.300 --> 04:05:53.300]  Когда... Ну, по сути оно добавлялись,
[04:05:53.300 --> 04:05:55.300]  ну, мы его спокойно добавляли, когда
[04:05:55.300 --> 04:05:57.300]  этот размер дерева не превосходил k.
[04:05:57.300 --> 04:05:59.300]  Зачем мы его добавляли?
[04:05:59.300 --> 04:06:01.300]  Мы же там пропихивали прямок,
[04:06:01.300 --> 04:06:03.300]  как хотели какой-то...
[04:06:03.300 --> 04:06:05.300]  Нет, ну там идея в том,
[04:06:05.300 --> 04:06:07.300]  что мы его тогда добавляли, а дальше
[04:06:07.300 --> 04:06:09.300]  пропихивали просто в общем порядке.
[04:06:09.300 --> 04:06:11.300]  По всему этому.
[04:06:11.300 --> 04:06:13.300]  То, что происходит при релейбле?
[04:06:13.300 --> 04:06:15.300]  Нет, не при релейбле.
[04:06:15.300 --> 04:06:17.300]  Нет, у нас новая операция,
[04:06:17.300 --> 04:06:19.300]  вот эта вот, пропихни
[04:06:19.300 --> 04:06:21.300]  до корня.
[04:06:21.300 --> 04:06:23.300]  Ну, вот так вот.
[04:06:23.300 --> 04:06:25.300]  То есть если
[04:06:25.300 --> 04:06:27.300]  размер дерева позволяет, мы здесь подключаем
[04:06:27.300 --> 04:06:29.300]  к этому дереву и просто пихаем до корня.
[04:06:29.300 --> 04:06:31.300]  Да, просто я бы сказал,
[04:06:31.300 --> 04:06:33.300]  это делаем.
[04:06:33.300 --> 04:06:35.300]  Потому что в этой вершине мы заканчиваем делать.
[04:06:35.300 --> 04:06:37.300]  Да.
[04:06:37.300 --> 04:06:39.300]  Да.
[04:06:39.300 --> 04:06:41.300]  Но это, погодите,
[04:06:41.300 --> 04:06:43.300]  мы как бы ее отправим в очередь,
[04:06:43.300 --> 04:06:45.300]  в порядке очереди ее обработаем.
[04:06:45.300 --> 04:06:47.300]  Потому что, может, выяснилось, что вот уже эту вершину
[04:06:47.300 --> 04:06:49.300]  могла выяснить, что надо релейбл делать.
[04:06:49.300 --> 04:06:51.300]  Вот.
[04:06:51.300 --> 04:06:53.300]  Но могла быть фишка, что это ребро
[04:06:53.300 --> 04:06:55.300]  нельзя добавлять, потому что дерево будет слишком большое.
[04:06:55.300 --> 04:06:57.300]  Ну, тогда нам придется сделать
[04:06:57.300 --> 04:06:59.300]  пуш здесь, насыщающий
[04:06:59.300 --> 04:07:01.300]  или не насыщающий. Да?
[04:07:01.300 --> 04:07:03.300]  И потом после этого еще, значит, делать тут
[04:07:03.300 --> 04:07:05.300]  вот это до проталкивания.
[04:07:05.300 --> 04:07:07.300]  А где мы выиграли?
[04:07:07.300 --> 04:07:09.300]  Что?
[04:07:09.300 --> 04:07:11.300]  Почему
[04:07:11.300 --> 04:07:13.300]  мы сэкономили?
[04:07:13.300 --> 04:07:15.300]  Ну, просто мы сэкономили на том, что если
[04:07:15.300 --> 04:07:17.300]  размер дерева не N, а K,
[04:07:17.300 --> 04:07:19.300]  то как бы вся операция делается не злог N, а злог K.
[04:07:19.300 --> 04:07:21.300]  То есть вот такая у нас мечта.
[04:07:21.300 --> 04:07:23.300]  Правда, единственная проблема, что
[04:07:23.300 --> 04:07:25.300]  операции с деревьями могло быть больше.
[04:07:25.300 --> 04:07:27.300]  Вот.
[04:07:27.300 --> 04:07:29.300]  Потому что нам тут
[04:07:29.300 --> 04:07:31.300]  пришлось как-то
[04:07:31.300 --> 04:07:33.300]  чуть поменьше делать, чуть поменьше прописывать.
[04:07:33.300 --> 04:07:35.300]  Вот.
[04:07:35.300 --> 04:07:37.300]  Но давайте думать.
[04:07:37.300 --> 04:07:39.300]  Значит,
[04:07:39.300 --> 04:07:41.300]  за счет чего у нас
[04:07:41.300 --> 04:07:43.300]  не N,
[04:07:43.300 --> 04:07:45.300]  ну,
[04:07:45.300 --> 04:07:47.300]  потому что
[04:07:47.300 --> 04:07:49.300]  заметим, смотрите, просто проблема такая.
[04:07:49.300 --> 04:07:51.300]  То есть, ну, за сколько все это работает?
[04:07:51.300 --> 04:07:53.300]  Ну,
[04:07:53.300 --> 04:07:55.300]  по-хорошему это работает, можно оценить,
[04:07:55.300 --> 04:07:57.300]  как там N, M,
[04:07:57.300 --> 04:07:59.300]  log, там,
[04:07:59.300 --> 04:08:01.300]  ну, как бы N, M,
[04:08:01.300 --> 04:08:03.300]  log, K, плюс что?
[04:08:03.300 --> 04:08:05.300]  Плюс количество ситуаций,
[04:08:05.300 --> 04:08:07.300]  когда надо было что так, что эдак,
[04:08:07.300 --> 04:08:09.300]  до пропихивать до конца, и ничего не поменялось.
[04:08:09.300 --> 04:08:11.300]  Правда?
[04:08:15.300 --> 04:08:17.300]  Ну, потому что, смотрите,
[04:08:17.300 --> 04:08:19.300]  каждая попытка пропихивания
[04:08:19.300 --> 04:08:21.300]  приводит либо к насыщению какого-то из этих
[04:08:21.300 --> 04:08:23.300]  ребер, либо к тому,
[04:08:23.300 --> 04:08:25.300]  что мы просто тут пропихнули все и остались до конца.
[04:08:29.300 --> 04:08:31.300]  Вот. То есть, каждая такая
[04:08:31.300 --> 04:08:33.300]  операция делается, ну, каждое
[04:08:33.300 --> 04:08:35.300]  насыщение, ну, насыщение у нас всего
[04:08:35.300 --> 04:08:37.300]  O от N, M, и каждое
[04:08:37.300 --> 04:08:39.300]  залог K мы там находим это ребро,
[04:08:39.300 --> 04:08:41.300]  там, откатываем,
[04:08:41.300 --> 04:08:43.300]  катим его, то есть, отрезаем.
[04:08:43.300 --> 04:08:45.300]  Понятно, да?
[04:08:45.300 --> 04:08:47.300]  Но также у нас есть еще вот эти операции,
[04:08:47.300 --> 04:08:49.300]  когда мы тут взяли из вершины и вот
[04:08:49.300 --> 04:08:51.300]  в какой-то момент все-таки
[04:08:51.300 --> 04:08:53.300]  в конце допихнули, что так,
[04:08:53.300 --> 04:08:55.300]  что эдак.
[04:08:55.300 --> 04:08:57.300]  К чему это могло привести?
[04:08:57.300 --> 04:08:59.300]  Но, наверное, каждая такая операция
[04:08:59.300 --> 04:09:01.300]  могла
[04:09:01.300 --> 04:09:03.300]  привести к тому,
[04:09:03.300 --> 04:09:05.300]  что вот, значит, эта вершина стала
[04:09:05.300 --> 04:09:07.300]  новым избыточным корнем,
[04:09:07.300 --> 04:09:09.300]  и мы его были вынуждены
[04:09:09.300 --> 04:09:11.300]  добавить в очередь.
[04:09:11.300 --> 04:09:13.300]  Что?
[04:09:15.300 --> 04:09:17.300]  Что, значит, не работает?
[04:09:17.300 --> 04:09:19.300]  Нет, алгоритм вот у нас работает.
[04:09:19.300 --> 04:09:21.300]  Мы выясняем только, за сколько оно работает.
[04:09:21.300 --> 04:09:23.300]  Что большое?
[04:09:23.300 --> 04:09:25.300]  Где?
[04:09:25.300 --> 04:09:27.300]  Нет, мы следим, что оно
[04:09:27.300 --> 04:09:29.300]  не является большим.
[04:09:31.300 --> 04:09:33.300]  Нет, ну, тут мы...
[04:09:33.300 --> 04:09:35.300]  Вот.
[04:09:35.300 --> 04:09:37.300]  Но тут смотрите, какая фишка.
[04:09:37.300 --> 04:09:39.300]  Дело в том, что, да, то есть,
[04:09:39.300 --> 04:09:41.300]  то есть, итоговое такое проталкивание
[04:09:41.300 --> 04:09:43.300]  просто сделает нам в конце лишнюю
[04:09:43.300 --> 04:09:45.300]  активную вершину.
[04:09:45.300 --> 04:09:47.300]  А может, даже и не сделает
[04:09:47.300 --> 04:09:49.300]  и нот, а может, даже и не сделает.
[04:09:51.300 --> 04:09:53.300]  Но хотя заметим следующее,
[04:09:53.300 --> 04:09:55.300]  что...
[04:09:55.300 --> 04:09:57.300]  Но с другой стороны, заметим, что
[04:09:57.300 --> 04:09:59.300]  насыщенным ребром может быть как эти ребра,
[04:09:59.300 --> 04:10:01.300]  так еще и в случае чего даже вот это ребро, правда?
[04:10:01.300 --> 04:10:03.300]  И таких операций
[04:10:03.300 --> 04:10:05.300]  тоже нет.
[04:10:05.300 --> 04:10:07.300]  То есть, как бы,
[04:10:07.300 --> 04:10:09.300]  в NMLOC-K
[04:10:09.300 --> 04:10:11.300]  входят только...
[04:10:11.300 --> 04:10:13.300]  То есть, не входят в NMLOC-K,
[04:10:13.300 --> 04:10:15.300]  то есть, у нас пока
[04:10:15.300 --> 04:10:17.300]  не оценены только такие
[04:10:17.300 --> 04:10:19.300]  проталкивания, когда тут
[04:10:19.300 --> 04:10:21.300]  неожиданно, что и этот пушни насыщающий,
[04:10:21.300 --> 04:10:23.300]  то есть, тут обнулилось, да?
[04:10:23.300 --> 04:10:25.300]  И вот тут ничего нового
[04:10:25.300 --> 04:10:27.300]  не появилось, да?
[04:10:27.300 --> 04:10:29.300]  Ну, тогда это... Нет, мы
[04:10:29.300 --> 04:10:31.300]  не продолжим, по идее, мы эту вершину
[04:10:31.300 --> 04:10:33.300]  в очередь пихнем, если ее
[04:10:33.300 --> 04:10:35.300]  там нет.
[04:10:35.300 --> 04:10:37.300]  Чтобы она там была, это была бы
[04:10:37.300 --> 04:10:39.300]  мечта.
[04:10:39.300 --> 04:10:41.300]  Вот.
[04:10:41.300 --> 04:10:43.300]  Так.
[04:10:47.300 --> 04:10:49.300]  Нет, тут весь какой-то вопрос пришел не преподаватель, да?
[04:10:49.300 --> 04:10:51.300]  Ну вот.
[04:10:51.300 --> 04:10:53.300]  Нет. Так, ребят,
[04:10:53.300 --> 04:10:55.300]  на всякий случай мы тут можем заниматься бесконечно
[04:10:55.300 --> 04:10:57.300]  долго. Сразу
[04:10:57.300 --> 04:10:59.300]  предупреждаю.
[04:10:59.300 --> 04:11:01.300]  Вот я и говорю.
[04:11:01.300 --> 04:11:03.300]  Нет.
[04:11:03.300 --> 04:11:05.300]  Формально оно уже закончилось,
[04:11:05.300 --> 04:11:07.300]  но мы тут можем сидеть бесконечно долго.
[04:11:13.300 --> 04:11:15.300]  Так говорят. Нет.
[04:11:15.300 --> 04:11:17.300]  А вот давайте так. Ну, просто
[04:11:17.300 --> 04:11:19.300]  нет. Ну, давайте так. Мы в любой момент можем тут
[04:11:19.300 --> 04:11:21.300]  так сказать, попытаться остановиться.
[04:11:21.300 --> 04:11:23.300]  Да. Не хотел бы, конечно. Тем не менее.
[04:11:23.300 --> 04:11:25.300]  Тогда, если он придет, тогда мы как бы готовы.
[04:11:25.300 --> 04:11:27.300]  Но пока преподаватель не пришел,
[04:11:27.300 --> 04:11:29.300]  почему именно без слова говорят, то мы хотели пока продолжить.
[04:11:29.300 --> 04:11:31.300]  Что?
[04:11:33.300 --> 04:11:35.300]  Мы закончим.
[04:11:35.300 --> 04:11:37.300]  Постараемся к этому закончить.
[04:11:39.300 --> 04:11:41.300]  Так вот.
[04:11:41.300 --> 04:11:43.300]  Ладно.
[04:11:43.300 --> 04:11:45.300]  Ну, просто да. Да.
[04:11:45.300 --> 04:11:47.300]  Мы люди такие. Нас надо выгонять, потому что
[04:11:47.300 --> 04:11:49.300]  мы любим алгоритмы.
[04:11:49.300 --> 04:11:51.300]  Вот. Значит, смотрите.
[04:11:51.300 --> 04:11:53.300]  Теперь давайте думать. Что у нас
[04:11:53.300 --> 04:11:55.300]  произойдет?
[04:11:55.300 --> 04:11:57.300]  Если у нас произошел вот этот не насыщающий
[04:11:57.300 --> 04:11:59.300]  проталкиваний, тогда у нас либо вот эта
[04:11:59.300 --> 04:12:01.300]  вершина, либо эта вершина добавилась в очередь,
[04:12:01.300 --> 04:12:03.300]  либо она уже там была. Правда?
[04:12:03.300 --> 04:12:05.300]  Но заметим, что если
[04:12:05.300 --> 04:12:07.300]  она там уже была, значит, количество
[04:12:07.300 --> 04:12:09.300]  активных вершин, которые у нас сейчас вообще есть,
[04:12:09.300 --> 04:12:11.300]  у нас в результате этой операции
[04:12:11.300 --> 04:12:13.300]  уменьшилось.
[04:12:13.300 --> 04:12:15.300]  Понимаете, да?
[04:12:15.300 --> 04:12:17.300]  Но заметим, что у нас суммарно
[04:12:17.300 --> 04:12:19.300]  вообще что происходит?
[04:12:19.300 --> 04:12:21.300]  А когда у нас количество активных
[04:12:21.300 --> 04:12:23.300]  вершин вообще
[04:12:23.300 --> 04:12:25.300]  увеличивается?
[04:12:27.300 --> 04:12:29.300]  Оно увеличивается либо вот в таких операциях,
[04:12:29.300 --> 04:12:31.300]  когда тут этой вершины не было.
[04:12:33.300 --> 04:12:35.300]  Либо в процессе,
[04:12:35.300 --> 04:12:37.300]  когда у нас тут что-то насытилось.
[04:12:41.300 --> 04:12:43.300]  Ну, потому что тут в процессе
[04:12:43.300 --> 04:12:45.300]  могло быть, что мы тут вот это
[04:12:45.300 --> 04:12:47.300]  пихнули, тогда у нас вот
[04:12:47.300 --> 04:12:49.300]  эта вершина могла добавиться, а могла
[04:12:49.300 --> 04:12:51.300]  не добавиться.
[04:12:51.300 --> 04:12:53.300]  Потом вот эта вершина могла добавиться, могла не добавиться,
[04:12:53.300 --> 04:12:55.300]  и так далее.
[04:12:55.300 --> 04:13:00.220]  но просто я хочу сказать что на самом деле все надо то сейчас как бы надо еще добавить
[04:13:00.220 --> 04:13:09.180]  там что-то типа кулака где кулака это сколько раз вершины суммарно будут добавлены по адресу
[04:13:09.180 --> 04:13:17.820]  все ну не судьба да ладно значит ладно вам повезло значит это не войдет в экзавер да
