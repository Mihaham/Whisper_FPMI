[00:00.000 --> 00:10.680]  Ну как вы догадываетесь, да, в этом семестре это у нас
[00:10.680 --> 00:11.680]  последнее занятие.
[00:11.680 --> 00:14.920]  Как-то я, конечно, рискну опять накаркать, но у меня
[00:14.920 --> 00:16.640]  есть подозрение, что мы сегодня закончим пораньше.
[00:16.640 --> 00:21.920]  То есть в какой-то момент у меня было ощущение, что
[00:21.920 --> 00:25.760]  может быть мы даже в две пары, если честно, уложимся,
[00:25.760 --> 00:27.720]  а может даже и быстрее.
[00:27.720 --> 00:31.160]  Впрочем, как говорится, я всегда так говорю, а потом
[00:31.160 --> 00:33.320]  как выясняется, сколько всего надо еще рассказать.
[00:33.320 --> 00:41.480]  Вот так.
[00:41.480 --> 00:45.200]  Ну поговорим мы сегодня о миностовах в неориентированных
[00:45.200 --> 00:46.200]  графах.
[00:46.200 --> 00:47.200]  Да, почему я это выточаю?
[00:47.200 --> 00:49.360]  Потому что вчера об ориентированных графах как раз активно
[00:49.360 --> 00:50.360]  разговаривали.
[00:50.360 --> 00:57.040]  Ну а об чем у нас вообще задачка?
[00:57.040 --> 01:03.640]  Ну задачка у нас в том, что дан неориентированный
[01:03.640 --> 01:08.720]  на этот раз граф, неориентированный, но при этом взвешенный.
[01:08.720 --> 01:25.440]  И нам теперь жутко интересно, хочется найти минимальный
[01:25.440 --> 01:26.440]  остов.
[01:26.440 --> 01:27.440]  Что такое минимальный остов?
[01:27.440 --> 01:28.440]  Что такое остов вообще?
[01:28.440 --> 01:36.600]  Остов – это у нас какой-то под граф, который с одной
[01:36.600 --> 01:41.080]  стороны стягивает, собственно, все вершины, как говорят
[01:41.080 --> 01:44.080]  по крайней мере, и с другой стороны остается связано.
[01:44.080 --> 01:49.400]  Ну, формальное определение тоже можно писать, но я
[01:49.400 --> 01:51.480]  думаю, что нет смысла этого делать, думаю, так все
[01:51.480 --> 01:52.480]  прекрасно понимают.
[01:52.480 --> 01:56.360]  Хотя можно сразу на самом деле спросить, кто когда-нибудь
[01:56.360 --> 01:59.360]  решал задачу о поиске минимального остова в неориентированном
[01:59.360 --> 02:00.360]  графе?
[02:00.360 --> 02:01.360]  Хоть за какую-нибудь симпатику.
[02:02.360 --> 02:06.520]  Так, кто когда-нибудь решал эту задачу за симпатику
[02:06.520 --> 02:07.520]  ВЕ?
[02:07.520 --> 02:19.840]  Ну да, особенно если учесть, что Е заведомо не меньше
[02:19.840 --> 02:24.200]  В, минус один, то да, окей, хорошо, а кто когда-нибудь
[02:24.200 --> 02:28.240]  решал эту задачу за В квадрат?
[02:29.120 --> 02:35.120]  Так, да ладно, так, хорошо, а что, вы все только расколы
[02:35.120 --> 02:38.120]  пишете, что ли?
[02:38.120 --> 02:47.120]  Хорошо, кто решал эту задачу за ЕЛУГВЕ?
[02:47.120 --> 02:48.120]  А за ЕЛУГЕ?
[02:48.120 --> 02:51.960]  Так, ребят, что-то вы это, что, все, вы, вы, что-то это
[02:51.960 --> 02:54.920]  все, к концу семестра уже это, ручки и все не поднимаются,
[02:54.920 --> 02:55.920]  да, совсем?
[02:56.600 --> 03:03.600]  А то вы как-то поднимаетесь, что вы это, как, ну да, нету,
[03:03.600 --> 03:10.600]  как сказать, хорошо, ладно, а кто решал задачу за ЕЛОГЛОГВ?
[03:10.600 --> 03:17.600]  Три ЛОГА, ну хорошо, а за два?
[03:17.600 --> 03:24.600]  А ЕЛОГЛОГ, хорошо, а за 4 ЛОГЛОГА?
[03:25.280 --> 03:30.280]  А, ну там же можно за, о, от Е как будет делать?
[03:30.280 --> 03:31.280]  Рандомом?
[03:31.280 --> 03:32.280]  Рандомом?
[03:32.280 --> 03:37.280]  Нет, сегодня нас не интересует рандомный алгоритм, нет,
[03:37.280 --> 03:39.720]  конечно, да, и замечательный, конечно, алгоритм, который
[03:39.720 --> 03:43.120]  работает с отожиданием от Е и худшим временем работы
[03:43.120 --> 03:47.240]  как от те самые ЕЛОГВСВ квадратов, это да, но его мы,
[03:47.240 --> 03:53.440]  естественно, будем обсуждать в следующем семестре, соответственно,
[03:53.440 --> 03:58.920]  в числе вероятностных алгоритмов, вот, так, ну окей, но давайте
[03:58.920 --> 04:00.800]  разбираться о чем-то, а кто-нибудь когда-нибудь писал
[04:00.800 --> 04:01.800]  ноту?
[04:01.800 --> 04:06.800]  Нет, ну есть еще вариант Е плюс ВЛОГВ, кстати.
[04:06.800 --> 04:07.800]  Конечно.
[04:07.800 --> 04:10.280]  Так, но давайте говорить, собственно, об чем у нас
[04:10.280 --> 04:11.280]  вообще речь.
[04:11.280 --> 04:16.400]  Так, ну речь у нас о том, что, так, ну прежде чем говорить
[04:16.400 --> 04:19.720]  хоть какие-то алгоритмы, на самом деле введем, конечно,
[04:20.720 --> 04:26.960]  хоть маленькую теоретическую базу, потому что может возникнуть
[04:26.960 --> 04:31.120]  вообще такая маленькая интересная задача, а как
[04:31.120 --> 04:37.960]  вообще понять, что остов вообще минимальный?
[04:37.960 --> 04:40.920]  Ну кроме как, ну давайте переберем все остовы,
[04:40.920 --> 04:41.920]  сравним их веса.
[04:42.920 --> 04:46.920]  Давайте найдем минимальный остов и проверим, что сумма
[04:46.920 --> 04:47.920]  равна.
[04:47.920 --> 04:52.920]  Ага, ну так, да, нам же алгоритмы, у нас еще ни одного алгоритма
[04:52.920 --> 04:55.920]  нету, ну доказательного, по крайней мере.
[04:55.920 --> 04:57.920]  Ну домашних там критерий.
[04:57.920 --> 04:58.920]  О, ДК.
[04:58.920 --> 05:02.920]  Так, хотя, конечно, какие-то критерии у нас в домашних
[05:02.920 --> 05:03.920]  заданиях уже были.
[05:03.920 --> 05:04.920]  Вот, действительно.
[05:04.920 --> 05:07.920]  Ну вот, ну основной у нас действительно такой, то есть
[05:07.920 --> 05:10.920]  такое маленькое свойство остов, ну вот, минимального
[05:10.920 --> 05:11.920]  заключается в чем?
[05:11.920 --> 05:14.920]  То есть у нас заключается в том, что если у нас есть
[05:14.920 --> 05:19.920]  какой-то, допустим, остов, и неожиданно нашлось какое-то
[05:19.920 --> 05:22.920]  ребро, которое соединяет, которое не лежит в этом остове,
[05:22.920 --> 05:26.920]  тогда заметим, что оно как бы стягивает в остове цикл.
[05:26.920 --> 05:29.920]  Ну, потому что между, если взять это ребро и путь по
[05:29.920 --> 05:33.920]  остову между двумя ребрами, то получается цикл.
[05:33.920 --> 05:37.920]  И тогда оказывается важное свойство.
[05:37.920 --> 05:40.920]  То есть можно заметить, что если вес этого ребра
[05:40.920 --> 05:46.920]  х, то на стягиваемом цикле все веса меньше либо равны
[05:46.920 --> 05:47.920]  х.
[05:47.920 --> 05:51.920]  Ну, если это минимальный, конечно, остов.
[05:51.920 --> 05:54.920]  Ну, доказательство очень простое, что если хоть одно
[05:54.920 --> 05:57.920]  из этих ребер больше х, то, соответственно, мы тогда
[05:57.920 --> 06:00.920]  могли бы просто выкинуть это ребро из остова и добавить
[06:00.920 --> 06:04.920]  это, и, собственно, остов от этого бы уменьшился.
[06:04.920 --> 06:05.920]  Вот.
[06:05.920 --> 06:09.920]  Ну, возникает такая простая естественная идея.
[06:09.920 --> 06:11.920]  Вот.
[06:11.920 --> 06:13.920]  Это с одной стороны.
[06:13.920 --> 06:16.920]  Но, правда, с другой стороны, в домашнем задании возникает,
[06:16.920 --> 06:18.920]  конечно, и более продвинутая задача.
[06:18.920 --> 06:20.920]  Или не возникает?
[06:20.920 --> 06:21.920]  Да.
[06:21.920 --> 06:25.920]  То есть оказывается верное обратное, что если существует
[06:25.920 --> 06:42.920]  действительно какой-то остов, то тогда утверждается,
[06:42.920 --> 06:45.920]  что этот остов в графе минимальный.
[06:45.920 --> 06:46.920]  Да.
[06:46.920 --> 06:47.920]  Вот.
[06:47.920 --> 06:49.920]  Действительно есть такое базовое свойство.
[06:49.920 --> 06:53.920]  Но, впрочем, все эти базовые свойства основываются,
[06:53.920 --> 06:56.920]  на еще более какой-то базовой теории.
[06:56.920 --> 06:57.920]  Вот.
[06:57.920 --> 07:01.920]  Но, правда, базовая теория подразумевает, что минимальный
[07:01.920 --> 07:04.920]  остов это штука, которую можно искать жадно.
[07:04.920 --> 07:08.920]  В каком смысле?
[07:08.920 --> 07:09.920]  Вот.
[07:09.920 --> 07:13.920]  Ну, идея здесь будет такая.
[07:13.920 --> 07:17.920]  Значит, впервые за курс мы ведем понятие разрез.
[07:17.920 --> 07:19.920]  Что такое разрез?
[07:19.920 --> 07:23.920]  Это в нашем случае это будет просто разбиение множества
[07:23.920 --> 07:27.920]  вершин графа на два не пустых множества.
[07:27.920 --> 07:29.920]  Вот.
[07:29.920 --> 07:36.920]  Ну, и также будем говорить, что ребро пересекает разрез.
[07:36.920 --> 07:42.920]  Если, то есть будем говорить, что там ребро, вот это UVW,
[07:42.920 --> 07:48.920]  пересекает разрез.
[07:48.920 --> 07:51.920]  На этот разрез.
[07:51.920 --> 08:03.920]  Если там, вот так скажем, U лежит в S, XOR, V лежит в S.
[08:03.920 --> 08:06.920]  Вот.
[08:06.920 --> 08:10.920]  Я так немножко по-умному сформулирую вместе.
[08:10.920 --> 08:13.920]  Вот.
[08:13.920 --> 08:16.920]  Ну, хотя, если внимательно присмотреться, то есть я
[08:16.920 --> 08:20.920]  хочу просто сказать, что ровно одна из этих вершин лежит в доле S,
[08:20.920 --> 08:22.920]  а другая, соответственно, в доле T.
[08:22.920 --> 08:23.920]  Вот.
[08:23.920 --> 08:26.920]  Ну, такая симметрия позволяет, собственно, не заморачиваться
[08:26.920 --> 08:28.920]  об то, кто конкретно.
[08:28.920 --> 08:29.920]  Вот.
[08:29.920 --> 08:33.920]  Да, это называется разрез.
[08:33.920 --> 08:36.920]  Вот.
[08:36.920 --> 08:37.920]  Вот.
[08:37.920 --> 08:41.920]  Ну, и у нас возникает, конечно, такая идея.
[08:41.920 --> 08:44.920]  Ну, тут, правда, всегда надо очень внимательно формулировать,
[08:44.920 --> 08:46.920]  потому что она очень хочет ее сформулировать так быстро,
[08:46.920 --> 08:51.920]  употребляя меньше слов, и, называется, попасть в формальный бред.
[08:51.920 --> 08:52.920]  Вот.
[08:52.920 --> 08:54.920]  Утверждение у нас говорит так.
[08:54.920 --> 08:57.920]  То есть, ну, оказывается, что вот жадность может работать
[08:57.920 --> 08:59.920]  следующим образом.
[08:59.920 --> 09:05.920]  То есть, пусть у нас есть какая-то, так сказать,
[09:05.920 --> 09:09.920]  уже часть разреза.
[09:09.920 --> 09:11.920]  То есть, вот есть набор ребер.
[09:11.920 --> 09:15.920]  Ну, точнее, часть ребер, которые уже являются там частью
[09:15.920 --> 09:19.920]  какого-то миностого.
[09:19.920 --> 09:20.920]  Вот.
[09:20.920 --> 09:24.920]  Проведем какой-нибудь разрез, который такой, что
[09:24.920 --> 09:30.920]  никакие ребра этого подостого не пересекают разрез.
[09:30.920 --> 09:31.920]  Вот.
[09:31.920 --> 09:33.920]  Ну, тогда заметим, что, ну, вот.
[09:33.920 --> 09:36.920]  Ну, этот разрез пересекают какие-то ребра.
[09:36.920 --> 09:39.920]  Там другие какие-то ребра разные.
[09:39.920 --> 09:47.920]  И среди этих ребер, наверное, есть минимальное.
[09:47.920 --> 09:49.920]  Ну, вот.
[09:49.920 --> 09:53.920]  Тогда есть, действительно, мистическое свойство.
[09:53.920 --> 09:54.920]  Какое у нас мистическое свойство?
[09:54.920 --> 10:01.920]  Что, оказывается, это ребро можно добавить в миностов.
[10:01.920 --> 10:02.920]  Вот.
[10:02.920 --> 10:04.920]  Ну, есть такая вот классическая идея, в общем-то, на которой
[10:04.920 --> 10:07.920]  у нас все алгоритмы, в общем-то, и основаны.
[10:07.920 --> 10:09.920]  Правда, но вправивается.
[10:09.920 --> 10:13.920]  А как теперь это нормально сформулировать?
[10:13.920 --> 10:17.920]  Вот что нам конкретно надо доказать?
[10:17.920 --> 10:21.920]  Что существует минимальное основное дерево, в которое
[10:21.920 --> 10:24.920]  содержится все, все дерево, которое были уже выбраны,
[10:24.920 --> 10:25.920]  и наше новое.
[10:25.920 --> 10:26.920]  Да, совершенно верно.
[10:26.920 --> 10:27.920]  Да.
[10:27.920 --> 10:29.920]  Да, приходится, конечно, немножко громоздко формулировать,
[10:29.920 --> 10:30.920]  к сожалению.
[10:30.920 --> 10:33.920]  Но что делать?
[10:33.920 --> 10:34.920]  Да.
[10:34.920 --> 10:37.920]  Ну, можно, конечно, пытаться избавиться от громоздкости
[10:37.920 --> 10:38.920]  путем введения.
[10:38.920 --> 10:41.920]  Давайте скажем, что ребро безопасно, если и дальше
[10:41.920 --> 10:42.920]  эту громоздкость прописать.
[10:42.920 --> 10:43.920]  Ну, вот.
[10:43.920 --> 10:45.920]  Ну, там кто-то так делает, на самом деле.
[10:45.920 --> 10:48.920]  То есть ни у кого там не было этой леббы, там формулировки,
[10:48.920 --> 10:52.920]  там что-то, что-то минимальное пересекающее разрез ребро
[10:52.920 --> 10:53.920]  безопасно для...
[10:53.920 --> 10:55.920]  Не, не слышали такого?
[10:55.920 --> 10:58.920]  Вот есть в мои времена вот нет-нет, такое звучало.
[10:58.920 --> 11:01.920]  А, да?
[11:01.920 --> 11:02.920]  Окей.
[11:02.920 --> 11:06.920]  Ну, лебба называется что-то на безопасном ребре.
[11:06.920 --> 11:07.920]  Ну, да.
[11:07.920 --> 11:08.920]  Нет, ну, да, нет.
[11:08.920 --> 11:11.920]  Ну, она вот поэтому известна, как лебба о безопасном ребре.
[11:11.920 --> 11:13.920]  Я еще называю ее теорема о разрезе.
[11:13.920 --> 11:15.920]  Поэтому кто-то приходит на экзамен начинает что-то
[11:15.920 --> 11:16.920]  про потоки говорить.
[11:16.920 --> 11:17.920]  Вот.
[11:17.920 --> 11:21.920]  Честно скажу, меня это очень сильно не радует.
[11:21.920 --> 11:25.920]  Поэтому, пожалуйста, не делайте так.
[11:25.920 --> 11:26.920]  Вот.
[11:26.920 --> 11:30.920]  Как бы потоки у нас в следующем семестре будут, если что.
[11:30.920 --> 11:33.920]  Там этих всех разрезов навалом будет.
[11:33.920 --> 11:34.920]  Вот.
[11:34.920 --> 11:36.920]  Значит, итак.
[11:36.920 --> 11:37.920]  Значит, точная формулировка.
[11:37.920 --> 11:39.920]  Итак, лемма...
[11:39.920 --> 11:40.920]  Ладно, давайте этим.
[11:40.920 --> 11:45.920]  Лемма о безопасном ребре.
[11:45.920 --> 11:46.920]  Вот.
[11:46.920 --> 11:51.920]  Лемма о безопасном ребре.
[11:51.920 --> 11:56.920]  Что это такое?
[11:56.920 --> 11:57.920]  Ну, вот.
[11:57.920 --> 11:59.920]  Ну, лемма о безопасном ребре говорит так.
[11:59.920 --> 12:00.920]  Итак.
[12:00.920 --> 12:03.920]  Итак, пусть у нас, значит, ну, есть, соответственно,
[12:03.920 --> 12:04.920]  граф.
[12:04.920 --> 12:07.920]  И пусть у нас оказывается какое-нибудь T под множество
[12:07.920 --> 12:08.920]  E.
[12:08.920 --> 12:15.920]  Это под множество...
[12:15.920 --> 12:19.920]  Это ребер.
[12:19.920 --> 12:20.920]  Внимание.
[12:20.920 --> 12:24.920]  Какого-то...
[12:24.920 --> 12:28.920]  Мина 100.
[12:28.920 --> 12:29.920]  Нет, ладно.
[12:29.920 --> 12:30.920]  T это плохо.
[12:30.920 --> 12:32.920]  Потому что у нас ST это разрез.
[12:32.920 --> 12:33.920]  Так.
[12:33.920 --> 12:34.920]  Какую бы букву взять?
[12:34.920 --> 12:35.920]  Ладно.
[12:35.920 --> 12:36.920]  Давайте следующую.
[12:36.920 --> 12:37.920]  Ладно.
[12:37.920 --> 12:38.920]  Не будем долго думать.
[12:38.920 --> 12:39.920]  Будет буква O.
[12:39.920 --> 12:44.920]  Значит, пусть будем говорить у нас действительно ST.
[12:44.920 --> 12:49.920]  Это разрез.
[12:49.920 --> 12:55.920]  Такой, что не одно из ребер.
[12:55.920 --> 13:02.920]  У не пересекает разрез.
[13:02.920 --> 13:03.920]  Вот.
[13:03.920 --> 13:05.920]  Ну, не пересекает.
[13:05.920 --> 13:08.920]  И вот.
[13:08.920 --> 13:10.920]  СТ.
[13:10.920 --> 13:13.920]  Вот.
[13:13.920 --> 13:16.920]  Тогда оказывается, значит...
[13:16.920 --> 13:17.920]  Значит, да.
[13:17.920 --> 13:18.920]  То есть дальше теперь.
[13:18.920 --> 13:20.920]  То есть пусть уже третий раз.
[13:20.920 --> 13:21.920]  Пусть.
[13:21.920 --> 13:24.920]  Но что делать?
[13:24.920 --> 13:28.920]  Там пусть E.
[13:28.920 --> 13:37.920]  Значит, ребро с минимальным весом.
[13:37.920 --> 13:46.920]  Пересекающий разрез.
[13:46.920 --> 13:47.920]  Вот.
[13:47.920 --> 13:50.920]  Тогда.
[13:50.920 --> 13:51.920]  Тогда у нас важно.
[13:51.920 --> 13:58.920]  Оказывается, что U, объединенное с E, это тоже под множество
[13:58.920 --> 14:04.920]  ребер какого-то мина 100.
[14:04.920 --> 14:06.920]  Будьте здоровы.
[14:06.920 --> 14:14.920]  Какого-то мина 100.
[14:14.920 --> 14:17.920]  Вот.
[14:17.920 --> 14:22.920]  То есть надежная формулировка будет скорее такая.
[14:22.920 --> 14:25.920]  Ну, в принципе, заметьте, что да, надежность формулировки,
[14:25.920 --> 14:30.920]  такая сложность окупается, конечно, простым доказательством.
[14:30.920 --> 14:31.920]  Потому что, ну, как это доказать?
[14:31.920 --> 14:37.920]  Потому что рассмотрим здесь какой-нибудь мина 100.
[14:37.920 --> 14:41.920]  И, предположим, выяснилось, что у нас, выяснилось, что
[14:41.920 --> 14:45.920]  вот это ребро, оно в этот мина 100 случайно не попало.
[14:45.920 --> 14:48.920]  Что мы тогда сделаем?
[14:48.920 --> 14:51.920]  Так, ну, возьмем какой-нибудь тут мина 100.
[14:51.920 --> 14:53.920]  Вот.
[14:53.920 --> 14:56.920]  И заметим, что в мина 100 тогда вот это ребро будет
[14:56.920 --> 14:57.920]  стягивать цикл.
[14:57.920 --> 14:59.920]  Значит, что у нас тогда получится?
[14:59.920 --> 15:03.920]  То есть получится E и какой-то путь.
[15:03.920 --> 15:08.920]  В общем, какие-то ребра у этого пути зелененькие,
[15:08.920 --> 15:10.920]  какие-то красненькие.
[15:10.920 --> 15:13.920]  Сколько, кстати, красненьких мы не знаем, потому что чисто
[15:13.920 --> 15:16.920]  теоретически этот путь может зигзаром ходить туда-сюда.
[15:16.920 --> 15:21.920]  Но мы гарантируем, что хотя бы одно, то есть хотя бы одно
[15:21.920 --> 15:24.920]  ребро, которое не было еще в этом множестве, конечно,
[15:24.920 --> 15:26.920]  найдется, потому что хоть кто-то на этом пути хотя
[15:26.920 --> 15:28.920]  бы раз пересечь разрез да должен.
[15:28.920 --> 15:30.920]  Вот.
[15:30.920 --> 15:34.920]  Но тогда мы можем сделать вот что.
[15:34.920 --> 15:40.920]  Тогда у нас, если у этого ребра вес W, то что мы тогда
[15:40.920 --> 15:44.920]  можем, какой мы вывод можем сделать про эти красные
[15:44.920 --> 15:45.920]  ребра?
[15:45.920 --> 15:46.920]  Как красные ребра?
[15:46.920 --> 15:50.920]  С одной стороны, они все меньше либо равны W, почему?
[15:50.920 --> 15:53.920]  Потому что они пересекают разрез, а ребро E минимально
[15:53.920 --> 15:55.920]  по весу среди пересекающих разрез.
[15:55.920 --> 16:02.920]  С другой стороны, они все должны быть меньше либо
[16:02.920 --> 16:03.920]  равно W, почему?
[16:03.920 --> 16:04.920]  Потому что это минимальный остов.
[16:04.920 --> 16:14.920]  Если бы тут… Нет, стоп, наоборот.
[16:14.920 --> 16:15.920]  Все, наоборот.
[16:15.920 --> 16:18.920]  Они меньше либо равно W, потому что это миностов,
[16:18.920 --> 16:21.920]  но если бы тут кто-то был строго больше W, то мы бы
[16:21.920 --> 16:24.920]  это ребро подменили бы на E и миностов уменьшился
[16:24.920 --> 16:25.920]  бы.
[16:25.920 --> 16:26.920]  Вот.
[16:26.920 --> 16:28.920]  Но с другой стороны, все они больше либо равно
[16:28.920 --> 16:29.920]  W, почему?
[16:29.920 --> 16:33.920]  Потому что W там минимально среди всех пересекающих
[16:33.920 --> 16:34.920]  разрез.
[16:34.920 --> 16:36.920]  Но тогда вывод простой.
[16:36.920 --> 16:38.920]  То есть, каждое красное ребро получается по весу
[16:38.920 --> 16:41.920]  равно W, и мы на самом деле в этом минимальном остове
[16:41.920 --> 16:44.920]  можем подменить это ребро на это и подменить просто
[16:44.920 --> 16:45.920]  миностов на другой.
[16:45.920 --> 16:49.920]  То есть, как видите, если у нас есть равные ребра
[16:49.920 --> 16:52.920]  по весу, то в принципе может быть много миностов.
[16:52.920 --> 16:56.920]  Ну, типичный пример, полный граф, где все веса равны,
[16:56.920 --> 16:57.920]  скажем, единичке.
[16:58.920 --> 17:01.920]  Тогда у нас там этих миностовов там просто страшное количество.
[17:03.920 --> 17:05.920]  У тебя страшное количество это сколько?
[17:14.920 --> 17:15.920]  О, классно.
[17:15.920 --> 17:17.920]  Любое подносит, что прям это дерево?
[17:20.920 --> 17:22.920]  Да, минус два, да.
[17:27.920 --> 17:29.920]  Нет, я говорю, а у нас сам равной N квадрат.
[17:29.920 --> 17:31.920]  Вот прям полный граф.
[17:33.920 --> 17:36.920]  Все весоребер равны, сколько у нас миностовов?
[17:41.920 --> 17:42.920]  Ой, чего?
[17:47.920 --> 17:49.920]  У вас точно этого на экзамене не будет?
[17:50.920 --> 17:51.920]  Ну, теперь думать надо.
[17:52.920 --> 17:53.920]  Ты перебрался случайно.
[17:53.920 --> 17:54.920]  Не, не, не.
[17:55.920 --> 17:56.920]  Не, ну, я не знаю.
[17:56.920 --> 17:57.920]  Слушайте, просто не знаю.
[17:57.920 --> 17:59.920]  В мои времена как бы на экзамене возникало такое
[17:59.920 --> 18:02.920]  словосочетание, как коды приуфера там, теория макейли,
[18:02.920 --> 18:04.920]  там N в степени N минус два.
[18:06.920 --> 18:07.920]  Не?
[18:07.920 --> 18:08.920]  Так, ну ладно, может у вас...
[18:08.920 --> 18:09.920]  Ну, значит это у вас ладно.
[18:09.920 --> 18:12.920]  Если сейчас у вас этого дискрайне не было, значит будет.
[18:14.920 --> 18:15.920]  А, ну вот.
[18:15.920 --> 18:16.920]  Это было неделю назад.
[18:17.920 --> 18:18.920]  А, ну, видимо, да.
[18:18.920 --> 18:19.920]  А, ну да.
[18:19.920 --> 18:21.920]  Неделю назад, видимо, никто не ходил в дискран.
[18:23.920 --> 18:24.920]  Ну, окей.
[18:24.920 --> 18:25.920]  Ладно.
[18:25.920 --> 18:26.920]  У вас это все еще ждет.
[18:30.920 --> 18:31.920]  Понятно.
[18:32.920 --> 18:33.920]  Да.
[18:33.920 --> 18:34.920]  Вот.
[18:34.920 --> 18:35.920]  Ну, хорошо.
[18:35.920 --> 18:36.920]  Ладно.
[18:36.920 --> 18:38.920]  В нашем случае у нас есть, конечно, важный инструмент,
[18:38.920 --> 18:43.920]  который уже позволяет нам там более-менее как-то
[18:43.920 --> 18:45.920]  более-менее активно работать.
[18:46.920 --> 18:47.920]  Значит, смотрите.
[18:48.920 --> 18:51.920]  Значит, потому что просто уже на основе этой леммы,
[18:51.920 --> 18:54.920]  в общем-то, там можно придумать кучу разных жадников.
[18:55.920 --> 18:56.920]  Вот.
[18:56.920 --> 18:59.920]  Ну, мы пойдем, как бы, в историческое там порядке,
[18:59.920 --> 19:00.920]  в котором они появлялись исторически.
[19:01.920 --> 19:02.920]  Поэтому...
[19:02.920 --> 19:03.920]  Ну вот.
[19:03.920 --> 19:06.920]  Поэтому начнем мы с алгоритма Борувки.
[19:07.920 --> 19:08.920]  О.
[19:09.920 --> 19:12.920]  То есть алгоритм Борувки.
[19:12.920 --> 19:13.920]  Вот.
[19:13.920 --> 19:15.920]  Такое вот красивое слово.
[19:16.920 --> 19:17.920]  Да.
[19:17.920 --> 19:20.920]  Редкий случай алгоритма датируется 1926-ым годом.
[19:21.920 --> 19:22.920]  Да.
[19:22.920 --> 19:24.920]  Компьютера вообще не было, а миностов уже искали.
[19:25.920 --> 19:26.920]  Да.
[19:26.920 --> 19:27.920]  Вопрос чиркафтников.
[19:27.920 --> 19:29.920]  Как вы думаете, в каком контексте вообще Борувке
[19:29.920 --> 19:32.920]  вообще могло потребоваться решать такую задачу?
[19:37.920 --> 19:38.920]  Да нет.
[19:38.920 --> 19:39.920]  Нет.
[19:39.920 --> 19:40.920]  Там не трубы.
[19:40.920 --> 19:41.920]  Там другое.
[19:41.920 --> 19:42.920]  А дороги какие?
[19:42.920 --> 19:43.920]  Нет.
[19:43.920 --> 19:44.920]  Нет.
[19:44.920 --> 19:47.920]  Если бы это все электросетчи в Словакии.
[19:47.920 --> 19:48.920]  Да.
[19:48.920 --> 19:49.920]  Вот задача.
[19:49.920 --> 19:50.920]  Желательно...
[19:50.920 --> 19:53.920]  А там было что-то типа соединить Словаки в единую сеть.
[19:53.920 --> 19:55.920]  Какая-то электрическую.
[19:55.920 --> 19:56.920]  Желательно подешевле.
[19:56.920 --> 19:57.920]  Вот.
[19:57.920 --> 20:01.920]  Ну или что-то в этом вроде.
[20:01.920 --> 20:02.920]  Ну вот.
[20:02.920 --> 20:03.920]  Ну вот.
[20:03.920 --> 20:05.920]  И в принципе у Борувки и Вазикла вот действительно
[20:05.920 --> 20:07.920]  такая интересная, такая мысль.
[20:07.920 --> 20:10.920]  Как это можно делать?
[20:10.920 --> 20:11.920]  Так.
[20:12.920 --> 20:15.920]  Значит, вот рассмотрим.
[20:15.920 --> 20:17.920]  У нас какие-то есть вершины.
[20:17.920 --> 20:19.920]  И вот рассмотрим.
[20:19.920 --> 20:21.920]  Рассмотрим какую-нибудь первую вершину.
[20:24.920 --> 20:25.920]  Так.
[20:25.920 --> 20:26.920]  Вот из нее торчат какие-то ребра.
[20:26.920 --> 20:27.920]  Правда?
[20:28.920 --> 20:31.920]  И какой-то из этих ребер минимальное.
[20:34.920 --> 20:35.920]  Ну.
[20:35.920 --> 20:36.920]  Так отлично.
[20:36.920 --> 20:37.920]  Давайте его добавим в миностов.
[20:37.920 --> 20:40.920]  Оно в каком-то миностове откровенно лежит.
[20:40.920 --> 20:43.920]  Ну тирема у нас, тирему можно применить скажем вот
[20:43.920 --> 20:44.920]  к такому разрезу.
[20:44.920 --> 20:45.920]  Правда?
[20:45.920 --> 20:47.920]  Понимаете, да?
[20:47.920 --> 20:50.920]  Но заметим, что не только для этой вершины минимальное
[20:50.920 --> 20:52.920]  ребро лежит в каком-то разрезе.
[20:52.920 --> 20:54.920]  Вот там в миностове каком-то.
[20:54.920 --> 20:57.920]  Ведь для любой вершины можно взять минимальное
[20:57.920 --> 20:58.920]  ребро.
[20:58.920 --> 21:00.920]  Просто за УАТЕ пробежаться и для каждой вершины найти
[21:00.920 --> 21:01.920]  минимальное ребро.
[21:01.920 --> 21:02.920]  Так вот.
[21:02.920 --> 21:03.920]  Мистическое утверждение.
[21:03.920 --> 21:08.920]  На самом деле давайте пробежимся и для каждой вершины найдем
[21:08.920 --> 21:11.920]  минимальное ребро и честно добавим его в остов.
[21:11.920 --> 21:12.920]  Вот.
[21:12.920 --> 21:15.920]  Вот такая идея.
[21:15.920 --> 21:20.920]  Правда нам надо вот.
[21:20.920 --> 21:22.920]  Ну правда вот.
[21:22.920 --> 21:24.920]  Вот действительно мистическое утверждение.
[21:24.920 --> 21:27.920]  Но правда нам придется доказать для того чтобы доказать
[21:27.920 --> 21:28.920]  что это валидно.
[21:28.920 --> 21:30.920]  Нужно сказать что-то более сильное.
[21:30.920 --> 21:32.920]  То есть там конечно каждый из этих ребер в каком-то
[21:32.920 --> 21:35.920]  миностове откровенно лежит.
[21:35.920 --> 21:38.920]  Но нужно доказать что оно лежит.
[21:38.920 --> 21:41.920]  Что на самом деле все они одновременно лежат в каком-то
[21:41.920 --> 21:42.920]  миностове.
[21:42.920 --> 21:45.920]  Но сами понимаете это не одно и то же.
[21:45.920 --> 21:46.920]  Вот.
[21:46.920 --> 21:47.920]  Ну как это можно?
[21:47.920 --> 21:49.920]  Ну можно свести к домашнему заданию.
[21:49.920 --> 21:54.920]  Ну сказав скажем что пусть все ребра попарно различны.
[21:54.920 --> 21:58.920]  А если они не попарно различны то легко выкрутиться скажем
[21:58.920 --> 22:01.920]  что давайте прибавим к ним супер микроскопический
[22:01.920 --> 22:06.920]  эпсилон умноженный на порядковый номер ребра скажем.
[22:06.920 --> 22:07.920]  Вот.
[22:07.920 --> 22:10.920]  И тогда у нас и тогда мы уже знаем что минимальный
[22:10.920 --> 22:11.920]  остов один.
[22:11.920 --> 22:14.920]  И тогда получается что если про какие-то ребра мы
[22:14.920 --> 22:16.920]  знаем что они лежат в миностове то получается они все
[22:16.920 --> 22:18.920]  в нем одновременно лежат.
[22:18.920 --> 22:21.920]  Вот можно прям вот так в наглую выкручиваться.
[22:21.920 --> 22:24.920]  Ну правда для этого на экзамен я вас потребую доказать
[22:24.920 --> 22:28.920]  что миностов реально один при попарно различных ребрах.
[22:28.920 --> 22:29.920]  Вот.
[22:29.920 --> 22:32.920]  Поэтому мы лучше сделаем попроще.
[22:32.920 --> 22:33.920]  А как сделать попроще?
[22:33.920 --> 22:34.920]  Ну очень просто.
[22:34.920 --> 22:35.920]  Смотрите.
[22:35.920 --> 22:37.920]  Вот берем вершину.
[22:37.920 --> 22:38.920]  Так.
[22:38.920 --> 22:43.920]  Минимальное ребро у нее торчащие из нее это вот минимальное
[22:43.920 --> 22:44.920]  ребро вот такого разреза.
[22:44.920 --> 22:45.920]  Отлично.
[22:45.920 --> 22:46.920]  Взяли ребро добавили в разрез.
[22:46.920 --> 22:47.920]  Да.
[22:47.920 --> 22:49.920]  Теперь рассмотрим вот для этой вершины.
[22:49.920 --> 22:53.920]  Может быть так что для нее вот это ребро тоже минимальное.
[22:53.920 --> 22:55.920]  Логично да?
[22:55.920 --> 22:56.920]  Вот.
[22:56.920 --> 22:59.920]  Ну если так то в этом месте останавливаемся типа идем
[22:59.920 --> 23:00.920]  дальше.
[23:00.920 --> 23:04.220]  Но если у нее минимальное ребро другое то оно минимальное
[23:04.220 --> 23:06.920]  не просто как торчащие из нее но оно минимально вот
[23:06.920 --> 23:07.920]  в таком разрезе.
[23:07.920 --> 23:08.920]  Правда?
[23:08.920 --> 23:12.920]  Потому что из этой вершины получается таких ребер не
[23:12.920 --> 23:13.920]  торчит.
[23:13.920 --> 23:17.920]  Если выяснилось что это ребро не минимально вот для
[23:17.920 --> 23:19.920]  этой вершины то так собственно и идем.
[23:19.920 --> 23:23.920]  То есть вот получается ну в какой-то момент цепочка
[23:23.920 --> 23:24.920]  конечно закончится.
[23:24.920 --> 23:26.920]  Ну правда тут если вы не аккуратно работаете с
[23:26.920 --> 23:28.920]  одинаковыми ребрами то у вас конечно может произойти
[23:28.920 --> 23:29.920]  зацикл.
[23:29.920 --> 23:32.920]  Поэтому я и говорю что когда вы сравниваете ребра нужно
[23:32.920 --> 23:33.920]  прям строго сравнивать.
[23:33.920 --> 23:36.920]  Что если веса ребра одинаковые сравнивать прям по какому-нибудь
[23:36.920 --> 23:38.920]  айдишнику или чему-нибудь еще в этом роде.
[23:38.920 --> 23:39.920]  Так.
[23:39.920 --> 23:40.920]  Ну хорошо.
[23:40.920 --> 23:42.920]  Допустим вот цепочка закончилась.
[23:44.920 --> 23:45.920]  Чего мы тогда.
[23:45.920 --> 23:46.920]  Ну вот.
[23:49.920 --> 23:53.920]  Вот спрашивается что можно сделать в этом случае.
[23:54.920 --> 23:55.920]  Вот.
[23:55.920 --> 23:56.920]  Ну можно на самом деле сделать дальше.
[23:56.920 --> 23:57.920]  Берем вершинку.
[23:57.920 --> 24:01.920]  И тоже из нее находим какой-нибудь там минимальное торчащее
[24:01.920 --> 24:02.920]  из нее ребро.
[24:05.920 --> 24:06.920]  Вот.
[24:06.920 --> 24:07.920]  Ну можем же такое сделать.
[24:07.920 --> 24:08.920]  Почему бы нет.
[24:08.920 --> 24:09.920]  Так.
[24:09.920 --> 24:10.920]  Тоже находим.
[24:10.920 --> 24:12.920]  Пока вот разрез такой.
[24:12.920 --> 24:13.920]  Потом разрез такой.
[24:13.920 --> 24:15.920]  Ну и дальше то же самое.
[24:15.920 --> 24:16.920]  Либо цепочка сама замкнется.
[24:16.920 --> 24:19.920]  Либо что еще может произойти.
[24:19.920 --> 24:20.920]  Ну да.
[24:20.920 --> 24:26.920]  То есть на самом деле вот тут прикол такой, что мы что
[24:26.920 --> 24:27.920]  как это ни странно.
[24:27.920 --> 24:28.920]  Да.
[24:28.920 --> 24:29.920]  Мы на самом деле можем упереться.
[24:29.920 --> 24:31.920]  Упереться в то что мы уже нашли раньше.
[24:31.920 --> 24:32.920]  Но ничего страшного в этом нет.
[24:32.920 --> 24:33.920]  Вот.
[24:33.920 --> 24:34.920]  То есть.
[24:34.920 --> 24:36.920]  Но на самом деле я говорю, что суть в том что давайте.
[24:36.920 --> 24:37.920]  Ну вот.
[24:37.920 --> 24:39.760]  То есть это мы так связанным говорим, что давайте вот
[24:39.760 --> 24:40.600]  так вот честно пойдём.
[24:40.600 --> 24:41.920]  То есть это мы так.
[24:41.920 --> 24:43.920]  Потому что на самом деле как бы алгоритм будет заключаться
[24:43.920 --> 24:44.920]  в том.
[24:44.920 --> 24:46.920]  То есть алгоритм будет делать следующее.
[24:46.920 --> 24:49.800]  Он для каждой вершины найдет минимальное ребро.
[24:49.800 --> 24:57.240]  как я сказал строго минимальное вот значит эти ребра образуют какие-то вот связанные наборы
[24:57.240 --> 25:06.920]  вот про них можно только сказать что как бы в каждой компоненте связанности относительно
[25:06.920 --> 25:14.560]  таких ребр хотя бы две вершины есть правда ну а теперь это давайте это все сожмем чем нет мы не
[25:14.560 --> 25:18.640]  будем использовать s&m какой-то там если вам пришла в голову случайно какая-то аббревиатура от
[25:18.640 --> 25:25.960]  которой вы случайно когда-то услышали нет зачем мы просто за оте сожмем эти компоненты в одну там
[25:25.960 --> 25:37.520]  собственно там каждую в одну вершину вот и тогда заметим что у нас как бы количество вершин в
[25:37.520 --> 25:46.400]  графе уменьшилось хотя бы в два раза потому что в каждой компоненте хотя бы две вершины ну потому
[25:46.400 --> 25:53.960]  что каждая вершина хоть с кем-то ребром да связан понимаете да вот понимаете вот да нет наверное
[25:53.960 --> 26:06.040]  есть кто живой вот да наверное окей и внимание вопрос что же теперь делать ну вот но идея
[26:06.040 --> 26:10.640]  действительно такая да что просто давайте вот эту вот операцию будем повторять до тех пор пока
[26:10.640 --> 26:18.120]  у нас не останется одна вершина кстати эта операция носит отдельное гордое название шаг борувки
[26:18.120 --> 26:31.400]  да прям вот отдельно прям это вот отдельно лучше это помнить потому что в некоторых алгоритмах там
[26:31.400 --> 26:37.320]  ну и сегодня у нас там еще будет и например буду и вот кстати в уже упоминавшем алгоритме за от
[26:37.320 --> 26:42.280]  е вероятностном тоже на самом деле вот сам по себе шаг борувки будет играть важную роль
[26:42.280 --> 26:59.240]  ну да логично вот ну да она дарит дарит дарит и стучи я рассказываю теорию по до после того
[26:59.240 --> 27:05.040]  как вы поделали домашнее задание да но что делать к сожалению да то есть общий разговор тут надо
[27:05.040 --> 27:11.160]  ввести потому что но что что чтобы от этого отталкиваться но вот как бы шаг борувки подчеркиваю
[27:11.160 --> 27:16.440]  есть да вы уже с этим столкнулись да в некоторых алгоритмах действительно оказывается полезно не
[27:16.440 --> 27:21.960]  делать это до конца хотя в принципе уже неплохой алгоритм на самом деле есть потому что количество
[27:21.960 --> 27:32.880]  таких шагов будет не более чем логарифом и получается что это будет работать за о от е лог в вот это если
[27:32.880 --> 27:39.520]  вы просто делаете вот это вот в тупую без лишних заморочек вот ну по написанию может не самые
[27:39.520 --> 27:44.560]  приятный алгоритм но там по крайней мере по сравнению со всякими прим и микроскалами впрочем
[27:44.560 --> 27:52.040]  как бы все но то но прочим ничего сложного тут особо нет вот то есть принципе вот такой вот
[27:52.040 --> 27:59.600]  маленький приятный алгоритм вот но говорит пока что да есть приятность в том что да то есть под
[27:59.600 --> 28:05.360]  е лог вы конечно это надо еще там какой-то тест подгонять потому что что было е лог в это надо
[28:05.360 --> 28:10.240]  чтобы у вас там вот эти компоненты жимаемые вершины действительно оказывались каким-то вот
[28:10.240 --> 28:17.520]  этим вот про сочетание вот потому что в реальности понятно что там на чем-то более рандомном
[28:17.520 --> 28:24.040]  возможно вам будет вести компоненты будут сильно больше и тогда и шагов будет меньше вот но если
[28:24.040 --> 28:34.080]  добавить что как бы еще этот алгоритм параллельцы и плохо но сами видите да но в том плане что ведь я то
[28:34.080 --> 28:38.600]  есть мы говорим что потому что вот эти вот минимальные ребра из каждой вершины можно и параллельно
[28:38.600 --> 28:44.560]  искать но я сейчас не буду вдаваться там в теорию там какой-то в то в чем там мало разбирались но как
[28:44.560 --> 28:48.400]  бы теоретически вот в параллель там если вы там будете на каком-то очень большом графе института
[28:48.400 --> 28:55.520]  пытаться строить миностов то на самом деле вот такой шаг борувки может вам сильно помочь вот на
[28:55.520 --> 29:09.400]  самом деле вот и так но вот это вот у нас это один классический алгоритм вот так но хорошо как вы
[29:09.400 --> 29:16.080]  тяну в 50-х годах есть когда появились конечно чуть другие алгоритмы какие но в первую очередь
[29:16.200 --> 29:27.480]  сейчас будет интересовать алгоритм прима вот да прим это фамилия естественно они там знаете
[29:27.480 --> 29:34.720]  типа типа алгоритм там алгоритм прима да потому что там потому что мы крутые ну или там любим
[29:34.720 --> 29:46.000]  кукс кто мне не знаю что-нибудь еще в этом роде вот значится что еще можно значит алгоритм
[29:46.000 --> 29:54.200]  прима да это уже где-то 50-е годы какие-то там вот ну и здесь предлагается такая красивая тоже
[29:54.200 --> 30:01.360]  такая же там технология жадного набора в чем-то схожая с алгоритмом дэйкстре потому что мы
[30:01.360 --> 30:09.720]  говорим так вот у нас есть какие-то вершины мы говорим так возьмем стартовую вершину так
[30:09.720 --> 30:21.560]  ну-ка давайте-ка возьмем минимально это чаще из нее ребро вот так его может добавить во 100 так
[30:21.560 --> 30:27.480]  отлично вот у нас есть такая компонента давайте рассмотрим вот такой разрез и попытаемся найти
[30:28.480 --> 30:32.360]  ну то есть найдем минимальное ребро который можно прицепить к этой компоненте и соединить ее с
[30:32.360 --> 30:39.160]  кем-то еще так ну нашли так ну дальше теперь рассмотрим вот такой разрез и прицепим кого-то
[30:39.160 --> 30:47.360]  еще давайте для удобства вот это ну там потом вот это но и так далее ну прицеп понятен то есть
[30:47.360 --> 30:51.720]  у нас каждый момент времени есть компонента связанности с эсом и мы хотим расширить ее на
[30:52.720 --> 31:05.520]  нет мне не сказал я сказал что это жадный на что такой жадный экстенсивный набор в том
[31:05.520 --> 31:10.520]  плане что мы от одной вершины стартуем вот от одной вершины как бы расширяем
[31:10.520 --> 31:23.240]  мостов захватывая все новые новые территории нет вот нет вот это оно что вот так бы не
[31:23.240 --> 31:35.120]  за вот мне как-то вот интуитивное ощущение принципиально другого ну да ну хорошо ладно
[31:35.120 --> 31:38.800]  можно действительно сказать что мы от каждой вершины делаем просто такой шаг в баровке тут
[31:38.800 --> 31:47.800]  мы просто делаем шаги только от одной вершины да хорошо наверно можно и так сказать вот
[31:47.800 --> 31:58.640]  но теперь вот это про закройся точку такой алгоритм работает как напишут да нет ну господи какой
[31:58.640 --> 32:08.440]  подвох есть я далек от я далек от мысли шоу как бы там есть ну да но вот давайте так вот
[32:08.960 --> 32:13.720]  но вот ну смотрите нет просто заметил что вот потому что я рассказал самая тупая реализация
[32:13.720 --> 32:18.840]  она вообще вот я почему за ве спрашивал потому что тупая реализация вообще завоевать будет
[32:18.840 --> 32:31.320]  работать кто-нибудь когда-нибудь писал такой алгоритм за ве ну как-то да но видимо но не
[32:31.320 --> 32:35.000]  знаю потому что вот ну видимо смотря какая интерпретация обычно конечно когда рассказывает
[32:35.000 --> 32:38.720]  этот алгоритм конечно вам сразу быстро рассказывает что на самом деле его можно
[32:38.720 --> 32:44.600]  реализовать а-ля до экстра а именно давайте для каждой вершины будем хранить минимальное
[32:44.600 --> 32:53.160]  ребро к которым можно эту вершину подцепить к имеющейся компоненте то есть самое то есть
[32:53.160 --> 32:58.920]  когда мы то есть на каждом шаге мы часто перебираем все вершины находим вершину с минимальным
[32:58.920 --> 33:05.580]  ребром подцепляем за это ребро и из этой вершины делаем релаксации вот и это тогда уже начинает
[33:05.580 --> 33:21.560]  работать за о от е плюс в квадрат так ну-ка кто писал за такую симпатику да ладно да ладно
[33:21.760 --> 33:34.840]  никому не приходилось писать честного прима не всегда нет там просто все гораздо проще была
[33:34.840 --> 33:40.440]  потому что есть классическая задача значит найдите миностов в графе на плоскости а именно вам даны
[33:40.440 --> 33:45.040]  пять тысяч вершин вершины точки на плоскости значит вес каждого ребра это расстояние между
[33:45.040 --> 33:52.800]  точками то есть в этой задачи вы краскала искуете просто не упихнуть или вы упихали
[33:52.800 --> 34:09.600]  нет но но действительно тут как всегда да сразу как-то е плюс в квадрат да хорошо если краскал
[34:09.600 --> 34:14.000]  нашу так хорошо ладно тогда смысл это вопрос а кто-то кто вообще писал этот алгоритм хоть
[34:14.000 --> 34:34.360]  в какой-то интерпретации вместо прима да конечно ну ладно сейчас изучим ну вот так ну как сказать
[34:34.360 --> 34:43.320]  да как говорится просто есть алгоритм с дэкстрой а есть алгоритм с сортировкой и это точно но вот
[34:43.320 --> 34:49.320]  разница есть ладно но тут ну хорошо это вот е плюс в квадрат но на самом деле если е порядка
[34:49.320 --> 34:53.240]  в квадрат то оптимальному пьем оптимальнее в общем-то вы не придумаете в принципе очевидно
[34:53.240 --> 35:01.880]  но если у вас есть там меньше чем в квадрат то что можно сделать то можно конечно задумываться
[35:01.880 --> 35:06.200]  на тему того что в квадрат нам нужно чисто для того чтобы искать минимум нельзя ли искать
[35:06.200 --> 35:13.400]  минимум оптимальнее ну самый тупой вариант давайте не просто для каждой вершины поддерживать это
[35:13.400 --> 35:18.760]  минимальное ребро но эти минимальные ребра хранить в какой-нибудь куче или даже самое тупое в
[35:18.760 --> 35:25.520]  каком-то сете даже чтобы удобнее было так если поддерживать их сете то получится асимптотика
[35:25.520 --> 35:32.560]  е лог в почему на е лог в потому что нам надо не только доставать минимум но и к сожалению еще
[35:32.560 --> 35:37.640]  и релаксировать а по каждому реблу релаксация может стоить логарифом если это будет реально
[35:37.640 --> 35:45.280]  релаксация так но кстати е лог в ой ну да вот мы уже достигли кстати асимптотики барвки вот
[35:45.280 --> 35:53.960]  а можем здесь еще но вот но на самом деле ой там самый смешной что здесь мы еще можем развлечься
[35:54.040 --> 35:59.000]  в чем весьма неожиданно первое развлечение достаточно простое
[35:59.000 --> 36:08.880]  мягкая куча нам тут не по не хотя нет стоп стоп стоп нет вот тут к сожалению вот дайта это моя
[36:08.880 --> 36:16.000]  мечта чтобы тут могли применить мягкую кучу нет а чей так потому что ради чего изобрели мягкую
[36:16.000 --> 36:20.840]  кучу мягкую кучу изобрели ради того чтобы действительно построить миностоп за крутое
[36:20.840 --> 36:29.000]  время это реально собственно практически вот я не знаю по моему это едва ли вот основной ее
[36:29.000 --> 36:37.400]  применение асимптотика там кстати е там на обратную функцию кирмана и сэмэ вот там нет
[36:37.400 --> 36:47.640]  вот нет но объяснение простое ладно правильно на самом деле так там на самом деле просто это
[36:47.640 --> 36:55.640]  асимптотика такая м умножить на значит какую-то функцию бета какую-то экзотически растущую а потом
[36:55.640 --> 37:06.120]  доказывается что эта штука больше обратной функции кирмана классической не более чем в 9 раз вот нет
[37:06.120 --> 37:15.400]  слушайте это еще не самое смешное что там да ну конечно не оно не она потом из уважения это потому
[37:15.400 --> 37:19.440]  что понятно что там чизель это явно наверно старья нам обсуждал и лично скорее всего поэтому
[37:19.440 --> 37:27.400]  почему бы нет вот но жалко к сожалению пока этот алгоритм не вошел в наш курс вот потому что
[37:27.400 --> 37:34.280]  ну честно скажем он не менее сложен чем сам софт хипп вот к сожалению как выяснилось то есть
[37:34.280 --> 37:38.680]  там нет такого что вот если у вас есть в кармане софт хипп то как бы это алгоритм на халяву построили
[37:38.680 --> 37:44.280]  нет там приличный такой сложности алгоритм но утверждает что для текущих момент это лучший
[37:44.280 --> 37:52.560]  алгоритм со известной асимптотикой с детерминированной вот это ваше уточнение
[37:52.560 --> 37:59.120]  потому что ладно если уж говорить о том что вообще есть потому что есть в этом смысле есть
[37:59.120 --> 38:11.640]  вообще есть вообще вообще есть самый лучший алгоритм зова от нуля нет нет начитались алгоритм
[38:11.640 --> 38:17.760]  который говорит что мы умеем доказывать что наш алгоритм это лучший по асимптотике алгоритм
[38:17.760 --> 38:24.800]  которые вообще в природе можно искать минус то вы но вот маленькая беда что это за лучшая
[38:24.800 --> 38:38.760]  асимптотика науки неизвестно да вот да вот такой шедевр да вот то есть вот такой шедевр я
[38:39.120 --> 38:44.000]  вот то есть я не знаю кто-то тогда в какой-то версии курса даже по моему кто-то пытался начинать
[38:44.000 --> 38:47.960]  на каких решающих деревьях собственно этот алгоритм основан и как он работает но вот
[38:47.960 --> 39:05.640]  алгоритм известный и он фане можно реализовать ну реализовать можно что-то скорее всего нет
[39:05.640 --> 39:11.800]  то есть все нормально то есть нормальный алгоритм но думает с прощем да хотя да и тут понимаешь
[39:11.800 --> 39:15.500]  что тут уже мечта может это когда-нибудь это организовать это спецкурс какой-нибудь хотя
[39:15.500 --> 39:20.900]  тут всегда можно хотя вот там можно спецкурсов я там видимо спецкурс все алгоритмы по мина столам
[39:20.900 --> 39:26.020]  там все алгоритмы по потокам но у нас этот у нас там мини-курс у нас с saved скажу у нас алгоритмы
[39:26.020 --> 39:32.920]  потока вообще там я думаю как минимум месяц займу но там потому что там действительно красивая
[39:32.920 --> 39:37.020]  теория на самом деле то можно действительно хорошо и глубоко изучать но и рядом у нее там
[39:37.020 --> 39:41.180]  соседи ну про сочетания конечно в общем про сочетание такой мелко связи то есть на самом
[39:41.180 --> 39:49.180]  Теория про сочетание – это уже мелкое, относительно маленькое следствие теории Форда Фулкерсона, на самом деле, но это ладно.
[39:49.180 --> 39:58.180]  Собственно, может, кого-то иногда удивляет, хотя уже никого не удивляет, почему у меня в этом курсе графов нет курса про сочетание.
[39:58.180 --> 40:03.180]  Вот казалось бы, что бы мне сейчас не потратить 15 минут и не рассказать вам алгоритм Куна.
[40:03.180 --> 40:06.180]  Так я же прям ровно обитаю Форда Фулкерсона.
[40:06.180 --> 40:08.180]  Ну вот, да, именно.
[40:08.180 --> 40:12.180]  И мы в этом, собственно, убедимся.
[40:12.180 --> 40:14.180]  И более того, да.
[40:14.180 --> 40:20.180]  То есть, на самом деле, можно его доказать просто, но это получится из цикла.
[40:20.180 --> 40:27.180]  Есть алгоритм, вот доказательство, что он работает, но как бы к нему пришли – вот вопрос.
[40:27.180 --> 40:32.180]  Хотя отдельный вопрос, как к нему пришли, может, реально эти цепочки придумали.
[40:32.180 --> 40:34.180]  Так вот, ладно.
[40:34.180 --> 40:36.180]  Так, в общем, есть такие развлекухи.
[40:36.180 --> 40:40.180]  Ну ладно, у нас мы сегодня ограничимся, видимо, более простой развлекухой.
[40:40.180 --> 40:43.180]  У нас будет развлекуха вида.
[40:43.180 --> 40:45.180]  Ну вот.
[40:45.180 --> 40:48.180]  Значит, ну сейчас вот подойдите, сейчас найдем.
[40:48.180 --> 40:53.180]  Значит, пока у нас был геолог В, это у нас, напоминаю, прим с сетом.
[40:53.180 --> 41:00.180]  Но если мы вставим вместо сета кучу фибоначи, вот.
[41:00.180 --> 41:04.180]  Вот, то получится алгоритм Е плюс В лог В.
[41:04.180 --> 41:07.180]  Ну, потому что, ну, собственно, аналогично Дэйстре.
[41:07.180 --> 41:12.180]  Давайте, а вот это давайте вспомним, потому что это нам сейчас будет пригождаться.
[41:12.180 --> 41:15.180]  Потому что за счет чего тут Е плюс В лог В?
[41:15.180 --> 41:18.180]  Ну, за счет того, что, помните, чем приятна куча фибоначи?
[41:18.180 --> 41:24.180]  Она приятна тем, что вы, если ваша задача не удалить элемента, только уменьшить его,
[41:24.180 --> 41:26.180]  то мы это делаем не за алгоритмом, а за единицу.
[41:26.180 --> 41:29.180]  Помните, да?
[41:29.180 --> 41:31.180]  Вот, помните?
[41:31.180 --> 41:33.180]  Вот, да.
[41:33.180 --> 41:37.180]  А, ну да, у кого-то из вас это даже было в вопросах на ОТЛ.
[41:37.180 --> 41:38.180]  Да.
[41:38.180 --> 41:42.180]  Как это, как говорится, один из шести билетов кому-то повезло.
[41:42.180 --> 41:46.180]  Потому что, по-моему, это был едва ли не самый халявный там билетик, по-моему.
[41:46.180 --> 41:48.180]  Сейчас с кучей фибоначи.
[41:48.180 --> 41:49.180]  Ну да.
[41:49.180 --> 41:51.180]  Там очередь на шести стеках была самая.
[41:51.180 --> 41:55.180]  Там уже на шести стеках, потом, типа, проехали два билета, кажется.
[41:55.180 --> 41:58.180]  Да, что, очередь на шести стеках была легче?
[41:59.180 --> 42:01.180]  Да.
[42:01.180 --> 42:03.180]  Ну, значит, все субъективно.
[42:03.180 --> 42:05.180]  Ну окей.
[42:05.180 --> 42:07.180]  Нет, ну хорошо, хорошо.
[42:07.180 --> 42:09.180]  Тут на вкус и цвет, там как бы.
[42:09.180 --> 42:11.180]  Ну хотя ладно, там, в общем-то, что там.
[42:11.180 --> 42:17.180]  Нет, в этом смысле, кто-то, наверное, скажет, что там и всякая вот эта фурятина тоже была не сильно убойная, на самом деле.
[42:17.180 --> 42:19.180]  Уделение было неприятно.
[42:19.180 --> 42:21.180]  Неприятно?
[42:21.180 --> 42:23.180]  Ну, что делать?
[42:23.180 --> 42:25.180]  Хотя вот философский вопрос.
[42:25.180 --> 42:31.180]  Нет, ну сейчас, хотя, на самом деле, после курса мотонализа с рядами Тейлора, на самом деле, вам бы, наверное, не показалось это так страшно.
[42:31.180 --> 42:33.180]  Нет?
[42:37.180 --> 42:39.180]  Ну да.
[42:39.180 --> 42:41.180]  Ну да, это деление чисел.
[42:41.180 --> 42:44.180]  Деление многочленов, оно и не вопрос, но вот он стоял.
[42:44.180 --> 42:46.180]  Потому что это как бы, да, там и несложно.
[42:46.180 --> 42:47.180]  Ладно.
[42:47.180 --> 42:49.180]  Но мы сейчас попытаемся это проапгрейдить.
[42:51.180 --> 42:53.180]  Значит, наша ставочка.
[42:54.180 --> 42:56.180]  Значит, у нас сейчас будет вообще неожиданная симптотика.
[42:58.180 --> 43:08.180]  Значит, мы сейчас попробуем придумать алгоритм, который работает за О от Е, если Е больше чем В лог лог лог В.
[43:15.180 --> 43:16.180]  Вот.
[43:16.180 --> 43:24.180]  Ну, ну, как сказать, вы, конечно, скажите так, можете считать, что алгоритм работает за...
[43:26.180 --> 43:30.180]  Ну, как сказать, можно, наверное, считать, что алгоритм работает за там...
[43:30.180 --> 43:32.180]  Нет, хотя нет, так вы не скажете.
[43:32.180 --> 43:37.180]  На самом деле, так, официальная симптотика этого алгоритма, прям полная.
[43:37.180 --> 43:41.180]  О от Е лог звездочка В.
[43:42.180 --> 43:46.180]  Так, не путать с обратной функцией актермана, она к ней никакого отношения не имеет.
[43:46.180 --> 43:48.180]  И СНМ-а сейчас не будет.
[43:49.180 --> 43:53.180]  А почему Лог звездочки часто относятся к ней как-то?
[43:53.180 --> 43:55.180]  В смысле, относятся.
[43:55.180 --> 44:01.180]  Не, ну, смотри, почему часто говорят, подрываются с собой звездочки, не путать, типа сорвать функцию актермана, это же разные вещи.
[44:01.180 --> 44:03.180]  Ну, вот поэтому и...
[44:03.180 --> 44:06.180]  Нет, нет, я это упоминаю просто чисто потому, что...
[44:06.180 --> 44:12.180]  Потому что как бы про СНМ известно, что он работает за Лог звездочку и что он работает за обратную функцию актермана.
[44:12.180 --> 44:14.180]  Поэтому как бы...
[44:14.180 --> 44:19.180]  Ну, так как обычно доказательством очень редко кто заморачивается, вот.
[44:19.180 --> 44:22.180]  То, соответственно, мы и понимаем, что Лог звездочки...
[44:22.180 --> 44:24.180]  Ну, вот, поэтому как бы можно и перепутать.
[44:24.180 --> 44:26.180]  Это чисто на всякий случай.
[44:26.180 --> 44:30.180]  Потому что так-то, конечно, да, если копнуть, то мы понимаем, что это принципиально разные вещи.
[44:31.180 --> 44:34.180]  Итак, но на всякий случай, кстати, а что такое вообще Лог звездочка?
[44:35.180 --> 44:36.180]  Да, что это такое?
[44:38.180 --> 44:40.180]  Да, значит, официальное определение у нас будет такое.
[44:40.180 --> 44:41.180]  Лог звездочка.
[44:42.180 --> 44:43.180]  Это...
[44:43.180 --> 44:45.180]  Значит, Лог звездочка В.
[44:45.180 --> 44:48.180]  Это минимальное такое K.
[44:49.180 --> 44:50.180]  Такое что?
[44:50.180 --> 44:54.180]  Лог два, лог два, лог два и так далее.
[44:54.180 --> 44:57.180]  Лог два, вот так вот, в K раз.
[45:00.180 --> 45:01.180]  Будет.
[45:04.180 --> 45:06.180]  Ну, скажем, меньше единиц.
[45:16.180 --> 45:17.180]  Вот.
[45:17.180 --> 45:19.180]  Ну, на самом деле, там, как сказать, с точки зрения Олимпиада...
[45:19.180 --> 45:21.180]  Обычно чем нравится обратная функция кирпада?
[45:21.180 --> 45:27.180]  Тем что она очень, очень, очень, очень, очень, очень, очень, очень, очень, очень, очень...
[45:28.180 --> 45:29.180]  медленно растет.
[45:30.180 --> 45:31.180]  Вот.
[45:31.180 --> 45:34.820]  Но этих очень настолько много, что и доказательства
[45:34.820 --> 45:38.140]  там достаточно сложно, настолько сложно, что мы сегодня,
[45:38.140 --> 45:40.220]  к сожалению, не доживем, хотя вот жалко, в прошлом
[45:40.220 --> 45:42.940]  семестре дожили, если честно, и там выяснилось, что там
[45:42.940 --> 45:45.340]  несильный убой, но, впрочем, тут я вас отсылаю либо к
[45:45.340 --> 45:48.060]  лекциям прошлого года, либо к лекциям Павла Маврина,
[45:48.060 --> 45:49.060]  кстати.
[45:49.060 --> 45:51.780]  Да, если говорить еще об одной альтернативной литературе,
[45:51.780 --> 45:54.380]  там кого можно почитать, послушать, то, как бы, на
[45:54.380 --> 45:57.500]  самом деле, в 2021 году, на самом деле, Паша Маврин
[45:57.500 --> 46:00.020]  выпустил там просто целый, просто тоже курс алгоритмов.
[46:00.900 --> 46:04.180]  Ну правда, насколько я понял, это не был там, ну я не понял,
[46:04.180 --> 46:05.780]  что это был за курс, это, по-моему, не совсем был там
[46:05.780 --> 46:08.420]  какой-то внутриэтмошный курс алгоритмов, и более
[46:08.420 --> 46:11.700]  того, и там еще часть лекций шли еще на английском языке.
[46:11.700 --> 46:15.540]  Ну вот, ну я не знаю подробностей для кого, но, по крайней мере,
[46:15.540 --> 46:17.660]  там, если в Гугле, там, в Ютубе наберете, вы там легко
[46:17.660 --> 46:18.660]  найдете.
[46:18.660 --> 46:19.660]  Вот.
[46:19.660 --> 46:23.220]  И там в качестве одной, в качестве одной из лекций
[46:23.220 --> 46:28.820]  было реально рассказано, на самом деле, то есть там
[46:28.820 --> 46:30.660]  реально рассказывалось доказательство того, почему
[46:30.660 --> 46:33.100]  эта работа, СНМ работает за обратную функцию ОКИРВАН.
[46:33.100 --> 46:34.100]  Вот.
[46:34.100 --> 46:38.940]  Но правда, сам по нот, правда, но правда, сам Паша активно
[46:38.940 --> 46:43.260]  при этом отсылался к оригинальной статье, угадайте, кого?
[46:43.260 --> 46:44.260]  Тарьяна?
[46:44.260 --> 46:45.260]  Конечно, да.
[46:45.260 --> 46:46.260]  Да.
[46:46.260 --> 46:50.460]  Ну вот, собственно, к оригинальной статье Тарьяна очень советовал,
[46:50.460 --> 46:52.020]  чтобы ввести статья замечательную.
[46:52.020 --> 46:53.020]  Да.
[46:53.020 --> 46:54.020]  Так что, если кому-то интересно.
[46:54.020 --> 46:55.020]  Вот.
[46:56.020 --> 46:57.020]  Так вот.
[46:57.020 --> 46:59.900]  Но, с точки зрения Олимпиад, обычно такого не надо, потому
[46:59.900 --> 47:03.620]  что, на самом деле, нам, ну, потому что обычно в СНМе
[47:03.620 --> 47:04.620]  что нам надо?
[47:04.620 --> 47:06.580]  Нам надо, что она работает, то там почти за от единицы.
[47:06.580 --> 47:10.380]  То есть, логарифм звездочка может не так медленно растущая,
[47:10.380 --> 47:13.100]  то есть она, то есть, логарифм звездочка, это, к сожалению,
[47:13.100 --> 47:17.180]  всего лишь очень-очень-очень-очень-очень-очень-очень медленно растущая
[47:17.180 --> 47:18.180]  функция.
[47:18.180 --> 47:19.180]  Вот.
[47:19.180 --> 47:20.740]  Но для жизни нам этого хватает.
[47:20.740 --> 47:25.340]  Ну, как бы, уровень такой, что при реальных ограничениях,
[47:25.340 --> 47:28.980]  ну давайте вот подумаем, сколько, к чему должно быть
[47:28.980 --> 47:34.260]  равно В, чтобы у нас лог звездочка было равно, например,
[47:34.260 --> 47:35.260]  там скажем два.
[47:35.260 --> 47:36.260]  Шестнадцать.
[47:36.260 --> 47:37.260]  А, не сто.
[47:37.260 --> 47:38.260]  Где четыре?
[47:38.260 --> 47:39.260]  Ну вот.
[47:39.260 --> 47:40.260]  Ну давайте так.
[47:40.260 --> 47:45.860]  Вот давайте для удобства я тут меньше либо равно
[47:45.860 --> 47:46.860]  напишу.
[47:46.860 --> 47:47.860]  Вот.
[47:48.060 --> 47:50.380]  И тогда получится, что для того, чтобы у меня было
[47:50.380 --> 47:52.100]  лог звездочка равно два, у меня должно быть два в
[47:52.100 --> 47:53.420]  степени два в степени два.
[47:58.420 --> 47:59.420]  А, ой.
[47:59.420 --> 48:00.420]  Потому что я молодец.
[48:00.420 --> 48:01.500]  Вот.
[48:01.500 --> 48:02.620]  Да.
[48:02.620 --> 48:05.020]  Итак, два в степени два.
[48:05.020 --> 48:07.020]  Это тогда будет двоечка.
[48:07.020 --> 48:10.420]  Чтобы лог звездочка была троечка, нужно, чтобы было
[48:10.420 --> 48:12.400]  два в степени два в степени два.
[48:12.400 --> 48:13.400]  Это сколько?
[48:13.400 --> 48:14.400]  Шестнадцать.
[48:14.400 --> 48:16.520]  Ну вот, это шестнадцать.
[48:16.520 --> 48:20.400]  чтобы была четверочка нужно 2 в степени 2 в степени 2 в степени 2 это
[48:21.320 --> 48:23.320]  да 65 тысяч 536
[48:24.680 --> 48:28.400]  а чтобы было больше надо чтобы было два вот в этой вот степени
[48:29.120 --> 48:35.760]  ну я не знаю там как бы там что произойдет раньше как бы мы начнем реально работать с такими объектов
[48:35.840 --> 48:40.880]  количество с такими графами или у нас земля накроется наконец через 5 миллиардов лет но
[48:42.680 --> 48:44.680]  соответственно
[48:47.360 --> 48:49.360]  не
[48:50.280 --> 48:54.160]  нету мало ли ну и есть еще темная материя мало
[48:58.200 --> 49:00.200]  может
[49:01.640 --> 49:05.320]  нету как сказать мало ли молекула шесть чего-то состоит молекула
[49:09.160 --> 49:16.160]  ну да нет ну как-то говорят да как говорят ученые да как-то ученые мы открыли как-то мы открыли молекул
[49:16.920 --> 49:23.720]  расщепили ее на атомы атомы на атомные ядра и электроны ядро на к варке а что дальше
[49:24.560 --> 49:26.560]  из чего состоят к варке
[49:27.440 --> 49:29.940]  ученые сходятся в одном из какой-то хрень
[49:31.360 --> 49:32.960]  вот
[49:32.960 --> 49:41.680]  нет ну да но как бы все научно популярный фильм до хрень называется да сенсационный фильм там а сенсационных открытиях сенсационологов да так что
[49:43.400 --> 49:46.080]  вот помните да там
[49:47.520 --> 49:55.680]  мало ли причем там куда ученые там важные говорят то есть там это как выясняется такий скинститут изучение хрень и других областей физики там например да
[49:56.240 --> 50:00.520]  вот ну неважно ладно это отдельно там посмотрите замечательная вещь вот
[50:02.680 --> 50:04.680]  соответственно
[50:04.720 --> 50:09.720]  значит это у нас такое вот то есть принципе а то есть нас это тоже устраивает что как бы в реальной жизни
[50:10.120 --> 50:13.760]  там меньше там как бы больше чем четыре вы вряд ли встретить
[50:14.520 --> 50:19.120]  в обратной функции акирмана круче вы в реальной жизни вряд ли встретите больше чем два
[50:20.800 --> 50:24.080]  да вот но как бы в реальной нам жизни в общем-то не сильно принципиально
[50:32.720 --> 50:34.720]  но вроде еще да
[50:35.840 --> 50:39.040]  ну да но я сейчас слету не воспроизведу определение
[50:39.040 --> 50:43.440]  но там определение было такое что дата выяснялось что для того чтобы воду там
[50:44.640 --> 50:49.360]  что там шо то но то есть для того чтобы вот этого но так и так для того чтобы
[50:50.180 --> 50:54.360]  т stains должны быть там какие-то очень экзотическими большими чтобы там там какая-то функция
[50:54.600 --> 50:57.880]  это обратная функция кирпада было чем-то вам двойкой какой-то
[50:58.360 --> 51:05.360]  то есть там тоже какие-то таблицы там в какие-то степенные там возрастание только еще еще в более крутой версии
[51:06.200 --> 51:08.200]  вот мне важно
[51:08.200 --> 51:15.740]  Ладно, значит, мы пока перейдем к этой вот штуке, попробуем, на самом деле, найти и решить задачу за вот такую асимптотику.
[51:15.740 --> 51:19.240]  Итак, вас приветствует алгоритм Фредмана Тарьяна.
[51:20.520 --> 51:21.020]  Да.
[51:21.900 --> 51:23.900]  Как говорится, да, Тарьян снова с нами, да.
[51:25.040 --> 51:27.340]  Так, ну ладно, Тарьян, в общем-то, никуда не уходил.
[51:28.340 --> 51:30.700]  Да, ну как бы, как же, на самом деле, да.
[51:32.460 --> 51:36.540]  Как это, в общем-то, как эта теория алгоритмов без этого доброго дядечки, на самом деле.
[51:37.540 --> 51:46.540]  На примере, ну, хочется мечтать, я, конечно, там, конечно, вообще не знаком с этим человеком, хотя, может быть, хотя, я не знаю, может, вы продвинуты, может, кто-то из вас слушал его лекции где-нибудь на ютубе, я не знаю.
[51:47.540 --> 51:55.540]  Потому что, как бы, как мы уже, по-моему, выясняли на прошлой лекции три недели назад, что это вполне себе ныне здравствующий там дедушка, работающий в Принстоне, вполне себе.
[51:56.540 --> 52:06.500]  Так что, да, есть подозрение, что он там, может быть, что-то и читает. Может, конечно, уже и нет, там у него, вон, пошло этих вот учеников, там творчество, которое, там, творчество, которых мы тоже, в общем-то, уже активно изучаем.
[52:07.540 --> 52:11.540]  Наверное, тоже много, но, впрочем, вот.
[52:12.540 --> 52:17.540]  Так вот. Итак, вас приветствует алгоритм Фредмана Тарьяна.
[52:20.540 --> 52:22.540]  Фредман Тарчан.
[52:25.540 --> 52:26.540]  Итак.
[52:29.540 --> 52:31.540]  Значит, что мы сейчас будем делать?
[52:32.540 --> 52:44.540]  Значит, нам хочется, конечно, вот у баровки есть эта красивая идея, что, действительно, мы делаем шаг в баровке, там, допустим, и уменьшаем там количество вершин в два раза.
[52:47.540 --> 52:56.540]  Вот. Мы здесь попытаемся, конечно, чтобы у нас количество вершин, добрый день, уменьшалось в какое-нибудь более приличное количество раз.
[52:57.540 --> 53:02.540]  Значит, смотрите. На первом шаге мы попытаемся сжимать следующим образом.
[53:03.540 --> 53:06.540]  Значит, смотрите. Внимание. Так, внимание.
[53:07.540 --> 53:10.540]  Так. Хотя нет, на всякий случай скажу.
[53:11.540 --> 53:13.540]  А ну, поднимите руки, кто знает этот алгоритм.
[53:16.540 --> 53:20.540]  А то мало ли, что там в пятнадцатой группе ЛКШ рассказывает, я ж не знаю.
[53:22.540 --> 53:24.540]  Вот. Нет?
[53:24.540 --> 53:25.540]  Нет.
[53:25.540 --> 53:27.540]  В пятнадцатой группе ЛКШ рассказывает то же самое, что и в шестадцатой.
[53:28.540 --> 53:29.540]  Логично.
[53:30.540 --> 53:31.540]  Окей.
[53:32.540 --> 53:38.540]  Но это да. Но шутки шутками, а на самом деле в продвинутой группе ЛКШ реально много что рассказывает, поэтому, как бы, поэтому мало ли.
[53:40.540 --> 53:42.540]  Поэтому мало, ну вот. Поэтому мало ли.
[53:43.540 --> 53:45.540]  Ну окей. Значит, смотрите. Так. Фредман Тарьян вас приветствует.
[53:46.540 --> 53:49.540]  И говорят следующее. Так. Значит, алгоритм будет говорить так.
[53:49.540 --> 53:52.540]  Значит. Возьмём стартовую вершину, и запустим честного прима.
[53:54.540 --> 53:58.540]  Будем запускать честного прима. Прям вот работать-работать-работать-работать-работать-работать-работать-работать.
[53:59.540 --> 54:01.540]  Но! Мы остановимся.
[54:02.540 --> 54:03.540]  Когда мы остановимся?
[54:03.540 --> 54:13.620]  работать, работать, работать, работать, работать, но мы остановимся, когда мы остановимся? Мы остановимся в
[54:13.620 --> 54:29.580]  тот момент, когда у нас размер компоненты станет равен k. Понятно, да? Вот, значит, ну, если это k, конечно,
[54:29.580 --> 54:36.380]  покрыло прям всё, то нам повезло, мы радуемся, мы нашли миностов. Если такого не произошло, что мы
[54:36.380 --> 54:45.620]  делаем? Мы берём вершину, которая в это не попала, и начинаем из неё абсолютно ту же процедуру. Тоже
[54:45.620 --> 54:54.500]  её расширяем, расширяем, расширяем, расширяем, расширяем, и опа, она достигла размера k. Мы
[54:54.500 --> 55:00.180]  останавливаемся, ну вот, и делаем дальше. Что дальше? Если ещё какие-то вершины остались непокрыты, мы
[55:00.180 --> 55:08.620]  ещё их берём, берём, берём, берём, берём, берём, опа, так, ладно, если произошло, ну, могло так произойти,
[55:08.620 --> 55:14.020]  что, как бы, если делать честного прима, то произошёл подцеп к тому, что было раньше, да? Ну, ничего
[55:14.020 --> 55:21.420]  страшного, ладно, если так произошло, ну ладно, объединим и пойдём дальше. Вот, удобно, правда? Вот,
[55:21.420 --> 55:31.820]  удобно, да? Мы делаем, мы фактически делаем алгоритм прима, но при этом, если в текущей компоненте уже
[55:31.820 --> 55:40.900]  размер k, то мы останавливаемся, берём незахваченную вершину и делаем из неё. Вот, то есть так делаем,
[55:40.900 --> 55:46.380]  пока не покроем все вершины. Получилось несколько компонент, каждый из которых размера там, ну,
[55:46.380 --> 55:58.340]  что-то типа k. Вот. Теперь, внимание, вопрос, за какую асимптотику от VEK вы можете реализовать такую штуку?
[55:58.340 --> 56:22.260]  Ну, в принципе, да. Нет, нет, ну, нет, почему yellow k? Так, ну, VEK, да, заметим, что если мы гарантируем,
[56:22.260 --> 56:26.580]  что мы ограничиваем k, то заметим, что в потенциальном сете, в котором минимум мы ищем,
[56:26.820 --> 56:32.940]  мы можем хранить только k минимумов. То есть, если у нас размер ak плюс 1, то мы максимум просто можем выкидывать,
[56:32.940 --> 56:44.740]  правда? И получается, что такой шаг мы можем сделать за асимптотику E log k. А могли бы и побыстрее.
[56:44.740 --> 57:10.460]  Так, ну, да. Ну, VEK, да, VEK это идея такая, что у нас есть, что можно вместо сета использовать кучу фибоначи.
[57:10.460 --> 57:19.380]  Ну, вот. То есть, просто кучу фибоначи следить. Ну, вот. И тогда, казалось бы, мы вершины достаем V раз,
[57:19.380 --> 57:27.220]  а там как-нибудь добавляем и как бы релаксируем их, делаем декриски E раз. Получается E plus V log k.
[57:27.220 --> 57:34.620]  Правда, тут есть маленький подвох. А для этого у нас была E log k. Почему такая была асимптотика?
[57:34.620 --> 57:40.540]  Потому что сет. Ну, идея такая. Как мы делаем примо? Делаем примо сетом, да? То есть, храним в сете,
[57:40.540 --> 57:46.220]  ну, хотелось бы хранить все вершины. Ну, в идеале, просто тупой алгоритм примо сетом как работает.
[57:46.220 --> 57:51.260]  Храним все вершины, которые мы можем подцепить, и для каждой вершины храним, собственно, ребра,
[57:51.260 --> 57:58.900]  минимальное ребро, да? Вершины сортируем по этому ребру, да? Вот. Но E log k более читерская вещь,
[57:58.900 --> 58:03.340]  потому что мы говорим, что так как у нас размер не более чем k, то мы знаем, что в сете не имеет
[58:04.140 --> 58:08.820]  смысла хранить не все, а только k минимум. То есть, мы говорим, что если мы что-то добавили,
[58:08.820 --> 58:12.220]  у нас сет стал размера k плюс 1, давайте k плюс первый элемент тупо выкинем.
[58:12.220 --> 58:25.820]  Так получался метод E log k. Мы, ну, мы попытались, теперь пытаемся делать то же самое с кучей фибоначи.
[58:25.820 --> 58:32.740]  Ну, мы не можем держать k элемент. Но в куче фибоначи есть проблема,
[58:32.740 --> 58:35.540]  как-то выкидывать максимальный элемент – это все-таки логарифм там.
[58:35.540 --> 58:43.260]  Вот, внимание, вопрос. Как же нам выкрутиться?
[58:55.820 --> 59:01.540]  Сейчас у нас проблема в том, что мы не можем выкидывать максимальный элемент.
[59:01.540 --> 59:06.660]  Ну, типа, а мы… Завести вторую кучу не подойдет?
[59:06.660 --> 59:12.740]  И чем это нам поможет? Ну, мы заводим одну кучу на
[59:12.740 --> 59:16.580]  минимум, другую на максимум. Значит, на кучу на максимум.
[59:16.580 --> 59:22.940]  А, нет, вторая куча тоже на минимум. Это будет удален. Одна куча – это все,
[59:22.940 --> 59:27.500]  что мы доположили, а вторая куча – это удаленные вершины. Мы кладем, когда мы хотим дать элемент,
[59:27.500 --> 59:34.460]  мы кладем удаленные. Теперь мы хотим посмотреть на верхний. Если у них верхний разный, значит,
[59:34.460 --> 59:39.660]  тот, который верхний, исходный кучом правильный. Сейчас, ну, с Леотова есть какая-то вопрос. То есть,
[59:39.660 --> 59:42.980]  мы из первой не особо что удаляем, и тогда log k превратится в log v?
[59:42.980 --> 59:55.580]  Нет, а потом, когда они у нас… Мы удаляем максимальный, чтобы он нам не мешался. Но
[59:55.580 --> 59:59.300]  смотреть в верх, он, кажется, так не мешается. А когда он все-таки мешается,
[59:59.300 --> 01:00:05.380]  ну, тогда мы сделаем экстра. Хотя это в лучшем случае может быть всегда. Нет, может быть и не всегда.
[01:00:05.380 --> 01:00:20.620]  Ну, не знаю. Стоп, а зачем мы вообще… Ну, вот что же делать?
[01:00:20.620 --> 01:00:25.380]  Мы хотим в куче хранить log k элементов, но мы не можем выбрасывать это.
[01:00:25.380 --> 01:00:30.940]  Ну, просто да. Потому что выбрасывание, если я буду каждый раз, когда там k плюс 1 элемент
[01:00:30.940 --> 01:00:35.220]  выбрасывать максимум, то мне придет, то я как бы не смогу сделать за единицу. И придется это,
[01:00:35.220 --> 01:00:38.980]  и тогда у меня будет е log k. А я хочу log k только на v.
[01:00:55.380 --> 01:01:16.900]  А чем это поможет? Сейчас, почему как квадрат-то? Ну, а суть-то одна. Вы храните сейчас k минимум.
[01:01:16.900 --> 01:01:23.660]  Потом вы попытались добавить еще что-то. Значит, это что-то лучше, чем нод. Поэтому вы что-то
[01:01:23.700 --> 01:01:32.300]  добавили, теперь k плюс 1 элемент надо удалить. А делаете вы это постоянно. Просто каждый раз,
[01:01:32.300 --> 01:01:47.900]  когда релаксируете по какому-то ребру. Так, и что это даст?
[01:01:47.900 --> 01:01:56.540]  Это даст, что тогда у нас у k вершин максимум k квадрат в соседей. Подождите,
[01:01:56.540 --> 01:02:02.660]  у вершин-то соседей у нас потенциально больше, чем k. Так нет, я говорю, что мы стеблин каждой
[01:02:02.660 --> 01:02:11.300]  вершины обрезаем до k. И что? Ну, теперь у нас k вершин у каждой стеблины в k. И что е будет,
[01:02:11.300 --> 01:02:35.580]  е будет? Вместо е вы напишите 8.vk. Нет, погодите, до k квадрат. Ну, тогда
[01:02:36.580 --> 01:02:43.380]  откуда? Мы из каждой вершины положим в кучу не более, чем k других мужиков. И получается,
[01:02:43.380 --> 01:02:51.460]  суммарно, а когда мы прошлись пока вершинкам, мы уже остановимся. Поэтому мы не более k раз
[01:02:51.460 --> 01:02:57.900]  положим пока вершинок в кучу. Размер кучи не более, чем k. Нет, то-то и проблема в том,
[01:02:58.340 --> 01:03:05.820]  фишка алгоритма в том, что мы много вершин можем положить в эту кучу. Лог k у нас в этом сете
[01:03:05.820 --> 01:03:10.420]  заключался не потому, что мы в этот сет положим мало вершин, а потому, что мы их будем быстро
[01:03:10.420 --> 01:03:15.700]  удалять. То есть, может быть, мы много вершин туда положим, но просто многие вершины просто оттуда
[01:03:15.700 --> 01:03:20.500]  быстро выбудут. Да, но мы верю, что у нас суммарно, есть удаление даже не чувствует, у нас суммарно,
[01:03:20.500 --> 01:03:27.980]  просто слишком мало положит, чтобы у нас алгоритм. Суммарно мы положим не более, чем k в квадрат
[01:03:27.980 --> 01:03:33.020]  вершин, раз мы положим суммарно не более, чем k в квадрат вершин. А почему как квадрат? Я боюсь,
[01:03:33.020 --> 01:03:37.100]  что мы каждую вершину можно вполне себе туда положить. Это будет нормально. Мы же обрубили степень
[01:03:37.100 --> 01:03:43.100]  специально, чтобы у нас каждая вершина. Мы рассмотрим вершины. Мы не рассмотрим больше,
[01:03:43.100 --> 01:03:54.100]  чем k вершин за шаг. Тогда, получается, в каждой вершине будет когда к, то есть, получается,
[01:03:54.100 --> 01:04:03.740]  вк, к симпатику, что ли? Нет, мы стоим в вершине, она может нам вызвать не более, чем k операции
[01:04:03.740 --> 01:04:10.860]  положить элемент в кучу. Да. Потому, что мы обрезали степень пока. Мы суммарно не более, чем
[01:04:10.860 --> 01:04:18.300]  к вершинам вызовемся. Потому, что мы берем компоненту размера k. Потому, что когда мы взяли
[01:04:18.300 --> 01:04:25.460]  уже, когда мы взяли катую, мы скажем, окей, мы закончили и сбросим всю кучу. Так. Поэтому у нас в
[01:04:25.460 --> 01:04:32.820]  куче будет суммарно не более, чем k квадрат операции добавления элементов в кучу. Поэтому иметь
[01:04:32.820 --> 01:04:41.900]  это на каждом этапе. На каждом шаге. Шаг это вот, мы хотим взять компоненту размера k. Ну.
[01:04:41.900 --> 01:04:47.180]  Построить компоненту размера k. Заблуждается, что за один шаг суммарно добавлений, суммарно
[01:04:47.180 --> 01:04:52.380]  добавлений будет не более, чем k квадрат. Так, и? Ну, поэтому мы говорили, что логарифм, поэтому если
[01:04:52.380 --> 01:04:55.980]  до каждого шага считать, что время работает, это логарифм от максимального размера кучи,
[01:04:55.980 --> 01:05:05.860]  это вообще будет за всю историю. Логарифм от k квадрата, логарифм от k квадрата. И что? А как вы
[01:05:05.860 --> 01:05:16.820]  достигаете того, что у вас при шете добавлений декризы за единицу работает? Сейчас у нас insert
[01:05:17.420 --> 01:05:34.500]  кучу. Ну, за единицу. Да, но да, но напоминаю, вы должны следить. Сейчас у нас единственная вещь,
[01:05:34.500 --> 01:05:44.020]  которая работает не за единицу, это экстракт. Мы его запустим в раз и он у нас работает за лог
[01:05:44.020 --> 01:05:51.260]  от размера кучи. И мы сделали так, чтобы куча всегда была размера не более, чем k квадрат,
[01:05:51.260 --> 01:06:03.060]  поэтому все экстракты работают за лог. А, я понял. Аааа, понятно. Может глупый вопрос, а как обрезать степень?
[01:06:03.060 --> 01:06:12.900]  Ну, ты просто идет, ты переиграешь всех ее соседей, а как только релаксировал хотя бы каста нам
[01:06:13.260 --> 01:06:20.420]  ну да вообще вы релаксируешь видимо хотя нет погоди погодите погодите а вы откуда знаете
[01:06:20.420 --> 01:06:30.020]  как по кому надо релаксировать ну юзды то да но а ну ну просто не придется ли вам сортировать там
[01:06:30.020 --> 01:06:45.580]  нет канны нет смотрите ткан и меньше допустим можно за линию найти не проблема но если вам если
[01:06:45.580 --> 01:06:52.020]  вам плевать в каком они порядке то найти но нет смотрите но у джейк в каждой вершине можно найти
[01:06:52.020 --> 01:06:57.620]  к минимумов если вам плевать в каком они порядке идут за за линию потому что можно найти кату
[01:06:57.620 --> 01:07:02.540]  порядковой статистикой просто взять да это не проблема но проблемом другом вам ко минимумов не
[01:07:02.540 --> 01:07:07.340]  помогут потому что какие-то из этих камень им по каким-то из этих камень умы будете релаксировать
[01:07:07.340 --> 01:07:15.900]  по каким-то нет потому что они вызовут пойдут уже в то что было раньше в чем причастен что я
[01:07:15.900 --> 01:07:27.260]  в какой-то момент то есть там но так я но а пробежимся по ребрам вытянем плохие из оставшихся выберем
[01:07:27.260 --> 01:07:39.100]  к минимальных но да ну ладно но можно и так да нет у меня просто была технология такая работаем с
[01:07:39.100 --> 01:07:44.820]  кучей на самом деле с кучей фибоначи но просто если в ней стал размер 2к тогда мы объявляем
[01:07:44.820 --> 01:07:54.420]  перестройку а именно ну достаем ну берем в эту кучу иначе встать чисто эти 2к элементов за от
[01:07:54.420 --> 01:08:02.380]  кан находим в них ка максимальных и строим из них кучу заново ну там амортизировано получится
[01:08:02.380 --> 01:08:10.420]  нормально а потому что давайте приклад давайте от добавления в кучу каждого элемента допустим мы
[01:08:10.520 --> 01:08:13.340]  далиashma.ru
[01:08:13.340 --> 01:08:19.260]  тогда идея такая пусть у вас встала 2 и но вот тогда допустим у вас там после того как у вас
[01:08:19.260 --> 01:08:28.980]  то есть пока у вас то есть в то есть опустим мы не будем считать то есть допустим пуп aquellos а load
[01:08:28.980 --> 01:08:37.780]  к а или менее элементы в том монетки мы не используем вот здесь но тогда д photograph 2 к у нас
[01:08:37.780 --> 01:08:43.660]  и потратим, то есть эти вот монетки. И все, теперь у нас снова k-элемент. Вот так вот. И все.
[01:08:43.660 --> 01:08:51.180]  То есть вот есть такой чит. Ну ваш чит, в принципе, тоже может работать. Хотя вот надо, может быть, нам придется уточнить алгоритм, но об этом мы подумаем.
[01:08:51.180 --> 01:08:56.180]  Вот. Ну в принципе, да. То есть вот разными, да, в принципе.
[01:08:58.180 --> 01:09:04.500]  Так. Ну да, в принципе. Ну да, заметим, действительно, что.
[01:09:07.780 --> 01:09:23.780]  Сейчас хотя. Ну хотя, да, да, действительно. Да, можно и так.
[01:09:23.780 --> 01:09:33.780]  Вот. Ну значит, в чем теперь фишка? Итак, мы научились тоже с помощью кого-то интересного выкрутаса работать за E плюс V log k.
[01:09:33.780 --> 01:09:42.780]  Допустим. Но вправивается теперь. А теперь какое k подобрать?
[01:09:42.780 --> 01:09:47.780]  Видимо log V. Почему?
[01:09:47.780 --> 01:09:48.780]  Зачем?
[01:09:48.780 --> 01:09:49.780]  Нет.
[01:09:50.780 --> 01:10:00.780]  Сейчас. А из этой симпозиции, которую мы только что нашли, мы не хотим, типа, взять k как можно и меньше?
[01:10:00.780 --> 01:10:07.780]  Потому что с логикой E плюс V log k, то, типа, кажется, уменьшая k, просто алгоритм еще работает быстрее.
[01:10:07.780 --> 01:10:13.780]  Ну, с одной стороны, да. Но с другой стороны, тут на самом деле у нас степень свободы больше, чем кажется.
[01:10:13.780 --> 01:10:22.780]  Потому что заметим, что если мы знаем, что, например, вот эта штука не будет превосходить E, то при этом условии, наоборот, хочется взять k как можно больше.
[01:10:25.780 --> 01:10:34.780]  Ну вот. Поэтому возникает такая идея. Давайте рассмотрим такое k. k равно 2 в степени E поделить на V.
[01:10:36.780 --> 01:10:37.780]  О.
[01:10:38.780 --> 01:10:46.780]  Ну, кстати, да. Заметим, что во многих случаях, кстати, это вам может уже хватить для того, чтобы уже на первой фазе победить за U от E, кстати.
[01:10:49.780 --> 01:10:51.780]  Вот. Видно, да?
[01:10:52.780 --> 01:11:11.780]  Ведь, смотрите, действительно, давайте вот такое k. То есть, заметим, что если, кстати, вот тоже, это уже нам дает возможность, что если E больше, чем V log V, допустим, да, то этот алгоритм, в принципе, вот уже, уже вот за один этот шаг, давайте назовем эту операцию, там, шаг Фредбонатариана от k.
[01:11:13.780 --> 01:11:18.780]  Ну вот. Ну, потому что, почему от k? Потому что k у нас все-таки параметр будет. Понимаете, да?
[01:11:19.780 --> 01:11:27.780]  Вот. И тогда вот оказывается, что, то есть, такой вот шаг у нас работает за, при таком k, получается, шаг работает за U от E.
[01:11:28.780 --> 01:11:34.780]  Ну, почему от E? Потому что log вот этой штуки, это E поделить на V, и тут у вас сократится будет тоже E. Понимаете, да?
[01:11:35.780 --> 01:11:36.780]  Вот. Понимаете?
[01:11:37.780 --> 01:11:41.780]  Вот. Значит, получается вот такая красота.
[01:11:43.780 --> 01:11:44.780]  И вот.
[01:11:45.780 --> 01:11:53.780]  Но, если V больше либо равно, чем V log V, то тогда легко убедиться, что за один этот шаг вы уже, в общем-то, алгоритмы закончите.
[01:11:54.780 --> 01:11:55.780]  Понимаете, да?
[01:11:56.780 --> 01:11:57.780]  Вот.
[01:11:57.780 --> 01:12:04.780]  Ну, правда, заметим, что если E больше, чем V log V, то, в общем-то, за U от E вы и так уже, у вас уже есть алгоритм.
[01:12:05.780 --> 01:12:09.780]  Это обычное, просто алгоритм с кучей Фибоначчи, но это, по сути, он и будет.
[01:12:10.780 --> 01:12:16.780]  Ну, потому что, если k здесь V или больше, то, как вы уже понимаете, это просто ездится стандартный алгоритм Прима с кучей Фибоначчи.
[01:12:17.780 --> 01:12:19.780]  Просто практически, вот буквально он и есть.
[01:12:20.780 --> 01:12:23.780]  Но что делать, если E все-таки поменьше?
[01:12:24.780 --> 01:12:26.780]  Так вот, щит такой.
[01:12:27.780 --> 01:12:31.780]  Дело в том, что, значит, смотрите, мы будем делать много шагов.
[01:12:32.780 --> 01:12:38.780]  На первом шаге мы выберем k2 в степени E поделить на V для того, чтобы шаг был за U от E.
[01:12:39.780 --> 01:12:44.780]  Заверная вперед, мы и дальше будем говорить о том, что каждый шаг будет работать за U от E.
[01:12:45.780 --> 01:12:47.780]  Вот. Но мы будем четырить.
[01:12:48.780 --> 01:12:49.780]  Значит, смотрите.
[01:12:49.780 --> 01:12:52.780]  Дело в том, что дальше все у нас будет просто.
[01:12:53.780 --> 01:12:58.780]  Дальше у нас на каждом следующем шаге мы возьмем k как 2 в степени предыдущей.
[01:13:01.780 --> 01:13:04.780]  Вот уже догадываетесь, да, откуда у меня лог звездочка взялась.
[01:13:14.780 --> 01:13:16.780]  Ну и так пока не закончится.
[01:13:17.780 --> 01:13:18.780]  Вот, понятно, да?
[01:13:20.780 --> 01:13:21.780]  Вот, видно?
[01:13:24.780 --> 01:13:25.780]  Чуть-чуть не видно?
[01:13:28.780 --> 01:13:29.780]  А, видно, вот.
[01:13:31.780 --> 01:13:35.780]  А теперь давайте думать, за какое всем точку теперь будет работать каждый шаг?
[01:13:40.780 --> 01:13:45.780]  Ну, на каждом шаге, ладно, можем считать, что количество ребер остается неизвенным, допустим, да?
[01:13:46.780 --> 01:13:51.780]  Ну, оно там, конечно, чуть-чуть уменьшается после каждого сжатия, но это нас не сильно колышит.
[01:13:52.780 --> 01:13:53.780]  Вот.
[01:13:54.780 --> 01:13:55.780]  Но давайте смотреть.
[01:13:58.780 --> 01:14:00.780]  Но заметим, что если у нас k.
[01:14:01.780 --> 01:14:02.780]  Но давайте смотреть.
[01:14:02.780 --> 01:14:07.780]  Вот на каждом шаге у нас есть не только количество, не только собственно k, но и количество вершин.
[01:14:07.780 --> 01:14:10.780]  Ну, допустим, вот давайте V1 сейчас у нас количество, это V.
[01:14:11.780 --> 01:14:16.780]  А количество вершин на этом шаге, оно меньше либо равно, чем что?
[01:14:19.780 --> 01:14:25.780]  Оно меньше либо равно, чем V предыдущее поделить на k предыдущее, согласны?
[01:14:27.780 --> 01:14:33.780]  Ну, потому что в каждой компоненте связности, которая у нас получилась, размер хотя бы там k предыдущее был, правда?
[01:14:33.780 --> 01:14:35.780]  Поэтому количество вершин уменьшилось.
[01:14:35.780 --> 01:14:36.780]  Вот.
[01:14:36.780 --> 01:14:40.780]  И дальше V3 меньше либо равно, чем V2 поделить на k2, да?
[01:14:40.780 --> 01:14:42.780]  V4 там меньше либо равно, чем...
[01:14:42.780 --> 01:14:43.780]  Ну и так далее.
[01:14:44.780 --> 01:14:45.780]  Но теперь давайте смотреть.
[01:14:45.780 --> 01:14:55.780]  Вот мы знаем, что у нас тут ахимточка на первом шаге была E плюс V логарифом там 2 в степени E поделить на V, да?
[01:14:55.780 --> 01:14:59.780]  Равно E плюс там VE поделить на V равно от E.
[01:15:00.780 --> 01:15:01.780]  Так, ну первый шаг, да.
[01:15:01.780 --> 01:15:02.780]  Теперь давайте рассмотрим второй шаг.
[01:15:03.780 --> 01:15:14.780]  У нас на втором шаге получается E плюс V1 поделить на k1 на логарифом 2 в степени k1.
[01:15:15.780 --> 01:15:22.780]  То есть это равно E плюс V1 поделить на k1 на k1.
[01:15:23.780 --> 01:15:25.780]  То есть шлеп-шлеп от E.
[01:15:26.780 --> 01:15:27.780]  Удобно, правда?
[01:15:28.780 --> 01:15:33.780]  Но легко убедиться, как вы уже понимаете, я думаю, что на каждом следующем шаге тоже будет.
[01:15:33.780 --> 01:15:36.780]  Все от E, от E, от E ровно по этим же причинам, правда?
[01:15:38.780 --> 01:15:44.780]  То есть отсюда получается, что нам нужно думать, сколько раз надо как бы возводить 2 в себя.
[01:15:46.780 --> 01:15:49.780]  То есть 2 в себя, потом в то, что получилось 2, возветить и так далее.
[01:15:49.780 --> 01:15:53.780]  То есть сколько эта башенка должна быть, чтобы у меня получилось V.
[01:15:55.780 --> 01:15:56.780]  Вот, понимаете, да?
[01:15:57.780 --> 01:15:58.780]  Чему нас это приведет?
[01:16:01.780 --> 01:16:02.780]  Ну вот.
[01:16:02.780 --> 01:16:10.780]  Ну в принципе отсюда получается, что количество шаров получается, ну как сказать, можно уже оценить, да, что пока k у нас, ну вот.
[01:16:10.780 --> 01:16:14.780]  Что это, можно сказать, что это E лог звездочка V.
[01:16:15.780 --> 01:16:16.780]  Можно прямо так оценить.
[01:16:19.780 --> 01:16:20.780]  Понимаете, да?
[01:16:22.780 --> 01:16:23.780]  Но мы пойдем, да.
[01:16:23.780 --> 01:16:25.780]  Но мы пойдем, хитрее.
[01:16:25.780 --> 01:16:26.780]  Вот.
[01:16:26.780 --> 01:16:32.780]  Дело в том, что, обратите внимание, стартуем мы не с единички.
[01:16:33.780 --> 01:16:34.780]  Там и не с двоечки.
[01:16:34.780 --> 01:16:39.780]  Мы стартуем вообще с приличной такой штуки, правда?
[01:16:40.780 --> 01:16:45.780]  То есть на самом деле, то есть более точная симпточка могла быть такая.
[01:16:45.780 --> 01:16:49.780]  E умножить на лог звездочка V.
[01:16:49.780 --> 01:16:52.780]  Ну, сколько шаров надо, чтобы достигнуть V, начиная отсюда?
[01:16:52.780 --> 01:16:54.780]  Ну это не лог звездочка V.
[01:16:54.780 --> 01:16:57.780]  Это лог звездочка V минус лог звездочка.
[01:16:57.780 --> 01:17:03.780]  Получается два в степени, ну да, два в степени е делить на V.
[01:17:05.780 --> 01:17:06.780]  Плюс один.
[01:17:06.780 --> 01:17:07.780]  Чего?
[01:17:10.780 --> 01:17:13.780]  Ну да, то же самое, что это, плюс один, конечно, да.
[01:17:13.780 --> 01:17:18.780]  Но я напишу, чтобы тут, чтобы это совсем тут честно было, откуда я это взял.
[01:17:19.780 --> 01:17:20.780]  Вот.
[01:17:20.780 --> 01:17:21.780]  Вот.
[01:17:21.780 --> 01:17:22.780]  Видите, да?
[01:17:23.780 --> 01:17:24.780]  Ну вот.
[01:17:24.780 --> 01:17:26.780]  То есть тут получается, видите, наоборот.
[01:17:26.780 --> 01:17:30.780]  При этом вычитание получается, что чем E больше, тем лучше.
[01:17:31.780 --> 01:17:34.780]  Почему нам принципальное это вычитание?
[01:17:35.780 --> 01:17:39.780]  А потому что чем больше E, тем с более низкого старта мы начинаем.
[01:17:40.780 --> 01:17:42.780]  И тем меньше шаров мы делаем.
[01:17:43.780 --> 01:17:47.780]  То есть, видите, потому что, видите, поэтому не случайно.
[01:17:47.780 --> 01:17:52.780]  Мы вот ужимаем K по максимуму так, чтобы первый шаг за O от E работал.
[01:17:53.780 --> 01:17:56.780]  И оказывается, что у нас есть очень широкие возможности для этого.
[01:17:57.780 --> 01:17:59.780]  Но результат, но тогда насколько они широкие?
[01:17:59.780 --> 01:18:05.780]  Ну конечно, если E это прям вот V плюс там микроскопическое что-то, то от лог звездочка V вы никуда не денетесь.
[01:18:06.780 --> 01:18:11.780]  Но если оказывается, давайте я сейчас какой-нибудь еще маркер возьму.
[01:18:12.780 --> 01:18:14.780]  Если у вас при этом оказывается, что...
[01:18:15.780 --> 01:18:22.780]  Но правда при этом оказывается, что если E у вас больше, чем допустим вот то самое V лог лог лог V.
[01:18:23.780 --> 01:18:24.780]  Да?
[01:18:25.780 --> 01:18:28.780]  То что тогда, тогда что получается?
[01:18:30.780 --> 01:18:37.780]  Тогда из этого следует, что лог звездочка 2 в степени E делить на V это сколько?
[01:18:38.780 --> 01:18:45.780]  Это получается больше, чем лог звездочка чего?
[01:18:46.780 --> 01:18:50.780]  Там 2 в степени лог лог лог V.
[01:18:51.780 --> 01:18:52.780]  Видно, да?
[01:18:56.780 --> 01:18:59.780]  А что такое лог звездочка 2 в степени лог лог лог V?
[01:19:01.780 --> 01:19:04.780]  Это лог звездочка V минус 2?
[01:19:05.780 --> 01:19:11.780]  Ну да, это на самом деле да, равно фактически лог звездочка V минус 2, совершенно верно.
[01:19:12.780 --> 01:19:18.780]  И тогда получается, что так как мы тут оцениваем это снизу, то при вычитании получается оценка сверху.
[01:19:18.780 --> 01:19:21.780]  И получается, что здесь E умножить на константу.
[01:19:23.780 --> 01:19:24.780]  Добрый день.
[01:19:25.780 --> 01:19:31.780]  Отсюда в общем-то и получается, что если у вас E больше, чем V лог лог лог V,
[01:19:31.780 --> 01:19:35.780]  то получается, что мы научились искать остов за O от E.
[01:19:38.780 --> 01:19:39.780]  Видно, да?
[01:19:42.780 --> 01:19:44.780]  Как выяснилось, даже это не сильно сложно.
[01:19:47.780 --> 01:19:48.780]  Чего?
[01:19:49.780 --> 01:19:52.780]  Нет, ну константа куча фибоначи, конечно.
[01:19:53.780 --> 01:19:56.780]  Куда же деваться от нее любимой?
[01:19:57.780 --> 01:19:58.780]  Ну ничего.
[01:19:59.780 --> 01:20:00.780]  Ну ничего.
[01:20:01.780 --> 01:20:02.780]  Вот.
[01:20:03.780 --> 01:20:04.780]  Так что да.
[01:20:05.780 --> 01:20:10.780]  Так что в принципе с точки зрения практики, видимо, этого уже хватит, хотя да.
[01:20:10.780 --> 01:20:15.780]  Философский вопрос, что будет работать быстрее, вот это или нормальный прим с сетом.
[01:20:16.780 --> 01:20:19.780]  Вот тут, конечно, вопрос философский.
[01:20:20.780 --> 01:20:24.780]  Так ладно, есть ли тут еще какие-то вопросы?
[01:20:25.780 --> 01:20:31.780]  Можете повторить, почему мы вычитаем вот это вот итерированное логарифм?
[01:20:32.780 --> 01:20:37.780]  Ну потому что, смотрите, потому что фактически у нас тут, если мы хотим точно оценить,
[01:20:38.780 --> 01:20:44.780]  то тут не лог звездочка V, а сколько раз нужно возводить 2 в степень вот это, то есть начиная отсюда, да?
[01:20:45.780 --> 01:20:46.780]  Чтоб получить V.
[01:20:47.780 --> 01:20:48.780]  Что такое логарифм звездочка, да?
[01:20:49.780 --> 01:20:53.780]  Это мы берем единицу и сколько надо делать шаг, что х превращаем в 2 в степень х, да?
[01:20:54.780 --> 01:20:58.780]  То есть сколько нужно вот эту башенку накручивать так, чтобы число получилось больше, чем V, да?
[01:20:59.780 --> 01:21:02.780]  Но здесь, смотрите, мы стартуем не с единицы, а с вот этого числа.
[01:21:03.780 --> 01:21:07.780]  Поэтому количество шагов, которые нужно сделать, на вот столько меньше.
[01:21:08.780 --> 01:21:11.780]  Ну я тут плюс один на всяких случаях пишу. Вот и все.
[01:21:13.780 --> 01:21:15.780]  И это нам оказывается принципиально вот в этом случае?
[01:21:16.780 --> 01:21:19.780]  Да, и оказывается, чем больше е, тем более нам это принципиально.
[01:21:21.780 --> 01:21:23.780]  Именно, именно, именно.
[01:21:24.780 --> 01:21:26.780]  Так, ну что, еще вопросы?
[01:21:43.780 --> 01:21:45.780]  Так, есть вопросы? Да нет, наверное.
[01:21:49.780 --> 01:21:51.780]  Так, ну если вопросов нет, ну тогда переглянем.
[01:21:52.780 --> 01:21:54.780]  Так, ну если вопросов нет, ну тогда переглянем.
[01:21:58.780 --> 01:22:05.780]  Смотрите, в какую сторону еще можно чуть-чуть копнуть?
[01:22:06.780 --> 01:22:09.780]  Ладно, давайте попробуем все-таки упомянуть.
[01:22:11.780 --> 01:22:13.780]  Ну вот, упомянуть атомик хип.
[01:22:16.780 --> 01:22:19.780]  Да, нет, мы сейчас не будем его там подробно обсуждать.
[01:22:20.780 --> 01:22:22.780]  А атомики это кто?
[01:22:23.780 --> 01:22:24.780]  Вот, это я скажу, естественно.
[01:22:25.780 --> 01:22:26.780]  Значит ситуация такая.
[01:22:28.780 --> 01:22:33.780]  Представьте себе, что мы, важно сделать оговорку,
[01:22:34.780 --> 01:22:36.780]  представим себе, что мы живем в целых числах.
[01:22:41.780 --> 01:22:43.780]  Ну в том плане, мы уже обсуждали эту модель,
[01:22:43.780 --> 01:22:47.780]  то есть модель, что мы живем там в какой-то модели,
[01:22:48.780 --> 01:22:50.780]  в которой у нас есть какие-то фиксированные какие-то
[01:22:51.780 --> 01:22:53.780]  W-битные числа, и мы с ними все умеем делать.
[01:22:57.780 --> 01:22:59.780]  Ну вот, но там еще правда какие-то оговорчики,
[01:23:00.780 --> 01:23:01.780]  что мы их там еще что-то умножать за вот единицу умеем.
[01:23:02.780 --> 01:23:03.780]  Ну там ладно, это какие-то уже глубокие оговорчики,
[01:23:04.780 --> 01:23:05.780]  я, честно говоря, там слабо понимаю.
[01:23:05.780 --> 01:23:15.780]  Но представим себе, что веса, с которыми мы работаем,
[01:23:16.780 --> 01:23:17.780]  это целые числа.
[01:23:18.780 --> 01:23:19.780]  Ну потому что представлять можно все что угодно.
[01:23:20.780 --> 01:23:22.780]  Заметим, что мы здесь представлять можем даже едва ли не ситуацию,
[01:23:23.780 --> 01:23:25.780]  что тут веса, это вот те самые камешки, помните?
[01:23:26.780 --> 01:23:28.780]  Ну и сортировки там вот этого всего.
[01:23:29.780 --> 01:23:30.780]  Так, а есть кто живой?
[01:23:31.780 --> 01:23:33.780]  А то что-то все развалились, как будто я сейчас рассказываю то,
[01:23:33.780 --> 01:23:34.780]  что и так уже давно все знают.
[01:23:35.780 --> 01:23:36.780]  А это не так, я вас убираю.
[01:23:37.780 --> 01:23:39.780]  Так что лучше вылезайте, а то знаете,
[01:23:40.780 --> 01:23:41.780]  а то там сублимация суббирека будет очень резистентна
[01:23:42.780 --> 01:23:43.780]  по отношению к коллективному бессознательному,
[01:23:44.780 --> 01:23:47.780]  и вы уже не поймете, о чем я говорю, да.
[01:23:48.780 --> 01:23:49.780]  Вот.
[01:23:50.780 --> 01:23:51.780]  Значит, смотрите.
[01:23:52.780 --> 01:23:53.780]  Ну так вот, просто фишка такая.
[01:23:54.780 --> 01:23:55.780]  Но дело в том, что вот что такое,
[01:23:56.780 --> 01:23:57.780]  просто по идее атомик хип.
[01:23:58.780 --> 01:23:59.780]  Она говорит, что давайте его действительно запустим
[01:24:00.780 --> 01:24:01.780]  абсолютно обычный хип,
[01:24:01.780 --> 01:24:02.780]  может быть там в том числе и сливаемый,
[01:24:03.780 --> 01:24:04.780]  хотя нет, по-моему, не сливаемый.
[01:24:05.780 --> 01:24:06.780]  Вот.
[01:24:07.780 --> 01:24:08.780]  Но который будет работать на этих,
[01:24:09.780 --> 01:24:10.780]  в этой модели и с этими целыми числами.
[01:24:11.780 --> 01:24:12.780]  То есть там ключи в этой куче,
[01:24:13.780 --> 01:24:14.780]  это именно целые числа.
[01:24:15.780 --> 01:24:16.780]  Это важно.
[01:24:17.780 --> 01:24:18.780]  Так вот.
[01:24:19.780 --> 01:24:20.780]  Ладно, если я не наврал,
[01:24:21.780 --> 01:24:25.780]  то значит утверждается, что воспользоваться этим можно.
[01:24:28.780 --> 01:24:29.780]  А воспользоваться этим можно так,
[01:24:29.780 --> 01:24:32.780]  что дело в том, что этот атомик хип,
[01:24:33.780 --> 01:24:38.780]  значит он все операции будет делать за от единицы,
[01:24:39.780 --> 01:24:43.780]  там какой-нибудь там экстракт-инсерт, экстракт-мин,
[01:24:44.780 --> 01:24:45.780]  ну не говоря уже о get-min.
[01:24:46.780 --> 01:24:47.780]  Нет, хотя нет, вру.
[01:24:48.780 --> 01:24:49.780]  Экстракт-мин будет, ну вот,
[01:24:50.780 --> 01:24:51.780]  ну там все операции всякие, insert,
[01:24:52.780 --> 01:24:53.780]  может быть даже, ну ладно,
[01:24:54.780 --> 01:24:55.780]  за мэлт я рисковать не буду,
[01:24:56.780 --> 01:24:57.780]  но вот get-min, конечно, точно.
[01:24:57.780 --> 01:24:58.780]  Вот.
[01:24:59.780 --> 01:25:00.780]  А экстракт-мин будет работать,
[01:25:01.780 --> 01:25:02.780]  но обычно он работает за log-in,
[01:25:03.780 --> 01:25:04.780]  и мы как бы знаем, что в какой-нибудь модели камешков
[01:25:05.780 --> 01:25:07.780]  быстрее не получится, иначе у вас сортировка будет быстрее, да?
[01:25:08.780 --> 01:25:09.780]  Но здесь мы с 4.
[01:25:10.780 --> 01:25:11.780]  Мы неожиданно себе заявим,
[01:25:12.780 --> 01:25:14.780]  а, ну да, еще, да, дикриски еще, конечно,
[01:25:15.780 --> 01:25:16.780]  какой-нибудь.
[01:25:21.780 --> 01:25:22.780]  Вот.
[01:25:23.780 --> 01:25:24.780]  А экстракт-мин будет работать не за log-in,
[01:25:24.780 --> 01:25:30.780]  а внезапно за симптотику log-in делить на log-log-in.
[01:25:37.780 --> 01:25:39.780]  Вот такая неожиданная задача.
[01:25:44.780 --> 01:25:45.780]  Вправивается.
[01:25:47.780 --> 01:25:50.780]  Вот представьте себе, что нам с небес по факсу
[01:25:51.780 --> 01:25:52.780]  прислали вот такой черный ящик.
[01:25:54.780 --> 01:25:55.780]  Спрашивается,
[01:25:56.780 --> 01:25:59.780]  за какую симптотику теперь мы можем реализовать алгоритм Фредмана Торьяна?
[01:26:09.780 --> 01:26:10.780]  Нет, видите, да.
[01:26:11.780 --> 01:26:13.780]  То есть чит заключается в том, что, да, то есть действительно,
[01:26:14.780 --> 01:26:15.780]  то есть это вроде выглядит как оптимизация,
[01:26:16.780 --> 01:26:17.780]  потому что у нас теперь вот этот шаг будет не за,
[01:26:18.780 --> 01:26:19.780]  шаг будет вместо.
[01:26:20.780 --> 01:26:21.780]  Чего?
[01:26:24.780 --> 01:26:25.780]  Да, ну погодите.
[01:26:26.780 --> 01:26:27.780]  Ну давайте, давайте вот аккуратненько.
[01:26:28.780 --> 01:26:30.780]  Значит, e плюс v log-k у нас торжественно превращается
[01:26:31.780 --> 01:26:32.780]  в e плюс сколько?
[01:26:33.780 --> 01:26:34.780]  v.
[01:26:35.780 --> 01:26:37.780]  Ну получается log-k делить на log-log-k.
[01:26:43.780 --> 01:26:44.780]  Вот, получается такое.
[01:26:45.780 --> 01:26:46.780]  Получается.
[01:26:47.780 --> 01:26:48.780]  Вот.
[01:26:49.780 --> 01:26:50.780]  Ну там, правда, те же оговорочки, да.
[01:26:51.780 --> 01:26:52.780]  Но, видимо,
[01:26:53.780 --> 01:26:55.780]  каким-то образом придется тоже предполагать,
[01:26:56.780 --> 01:26:58.780]  что мы там, если у нас размер кучи станет 2k,
[01:26:59.780 --> 01:27:01.780]  то мы сможем за log-k выписать хотя бы все элементы.
[01:27:03.780 --> 01:27:05.780]  Но обычно это, понятно, не сильно большая проблема,
[01:27:06.780 --> 01:27:07.780]  то есть в любой структуре данных, наверное,
[01:27:08.780 --> 01:27:09.780]  если вы кладете элементы, то вы можете поддерживать
[01:27:10.780 --> 01:27:11.780]  хотя бы список этих элементов, правда?
[01:27:12.780 --> 01:27:14.780]  Ну есть подозрение, что так или иначе вы это сделаете, да?
[01:27:15.780 --> 01:27:16.780]  Вот.
[01:27:17.780 --> 01:27:19.780]  А теперь вот давайте внимательно подумаем.
[01:27:22.780 --> 01:27:23.780]  Ну вот.
[01:27:24.780 --> 01:27:25.780]  То есть если нам такое повезло,
[01:27:26.780 --> 01:27:27.780]  ну-ка давайте посмотрим,
[01:27:28.780 --> 01:27:29.780]  во-первых, какое k мы сюда можем подсунуть,
[01:27:30.780 --> 01:27:32.780]  а главное, какие следующие k мы вообще тут можем,
[01:27:33.780 --> 01:27:36.780]  там с какими следующими k мы вообще можем дальше развлекаться.
[01:27:45.780 --> 01:27:46.780]  Ну-ка давайте вот, как вы думаете?
[01:27:46.780 --> 01:27:47.780]  Как вы думаете?
[01:27:51.780 --> 01:27:53.780]  Типа e log v делить на v.
[01:27:58.780 --> 01:27:59.780]  Так.
[01:28:00.780 --> 01:28:03.780]  Так, то есть k давайте примерно скажем,
[01:28:04.780 --> 01:28:05.780]  сколько вы говорите?
[01:28:06.780 --> 01:28:08.780]  2 в степени e log v делить на v, нет?
[01:28:09.780 --> 01:28:11.780]  e делить на v log v, вот так, да?
[01:28:12.780 --> 01:28:13.780]  Ну что-то такое, наверное.
[01:28:14.780 --> 01:28:16.780]  А, ну кстати, это равно, я больше скажу,
[01:28:17.780 --> 01:28:19.780]  это равно v в степени e делить на v.
[01:28:21.780 --> 01:28:22.780]  А, e log v, наверное.
[01:28:23.780 --> 01:28:24.780]  Нет, ну пройдите, пройдите.
[01:28:25.780 --> 01:28:26.780]  Ну давай я это подставим, что проблем-то?
[01:28:27.780 --> 01:28:28.780]  Давай.
[01:28:29.780 --> 01:28:31.780]  Да ладно, ладно, кто это? Просыпайся.
[01:28:32.780 --> 01:28:33.780]  А то это как-то...
[01:28:34.780 --> 01:28:38.780]  А то знаешь, как-то раз в жизни сел на первую парту и спать сразу.
[01:28:39.780 --> 01:28:40.780]  Вот.
[01:28:40.780 --> 01:28:43.780]  Значит, давайте, значит, log k это что такое?
[01:28:44.780 --> 01:28:46.780]  Так, log k у нас получается e делить на v.
[01:28:47.780 --> 01:28:48.780]  О.
[01:28:49.780 --> 01:28:50.780]  А тут делить, значит, log.
[01:28:51.780 --> 01:28:53.780]  Ну тут еще поделить на какой-то log e делить на v.
[01:28:54.780 --> 01:28:55.780]  Ну ладно.
[01:28:56.780 --> 01:28:58.780]  Так, но это уже неплохо, да?
[01:29:02.780 --> 01:29:03.780]  Да.
[01:29:06.780 --> 01:29:07.780]  Да.
[01:29:10.780 --> 01:29:12.780]  Так, это получается e.
[01:29:13.780 --> 01:29:15.780]  Но возникает, правда, маленький вопрос.
[01:29:17.780 --> 01:29:19.780]  Слушайте, правда, вот что-то даже...
[01:29:20.780 --> 01:29:22.780]  Вопрос такой, что даже как-то подозрительно.
[01:29:23.780 --> 01:29:26.780]  А нет ощущения, что это, по-моему, должно быть больше, чем v?
[01:29:31.780 --> 01:29:34.780]  Возникает ощущение, что это почти всегда больше, чем v.
[01:29:41.780 --> 01:29:44.780]  У нас тут было v, e делить на v, умножить на log v.
[01:29:45.780 --> 01:29:47.780]  А мы, кажется, где-то здесь чуть-чуть просчитались.
[01:29:48.780 --> 01:29:51.780]  Вы вспомните, мы написали v умножить на e делить на v.
[01:29:52.780 --> 01:29:54.780]  Ну, ты сам сказал e log v делить на v.
[01:29:55.780 --> 01:29:56.780]  Да, да.
[01:29:57.780 --> 01:29:58.780]  А где log v, на который еще надо умножить?
[01:29:59.780 --> 01:30:01.780]  Ну вот, ну смотри, 2 в степени e делить на v log v, да?
[01:30:02.780 --> 01:30:03.780]  Да.
[01:30:04.780 --> 01:30:07.780]  Так, я просто сказал, что это как бы 2 в степени log v, и все это в степени e делить на v, нет?
[01:30:07.780 --> 01:30:10.780]  Ну, типа вот это x в степени z, я сказал.
[01:30:11.780 --> 01:30:12.780]  Да, да, это правда, это правда.
[01:30:13.780 --> 01:30:15.780]  Это правда, я про то, что где мы, в плане, в нижней штуке,
[01:30:16.780 --> 01:30:23.780]  где мы описываем e, plus v, e, v, это делить на log v, мы, конечно, там забыли log v где-то, нет?
[01:30:25.780 --> 01:30:26.780]  А-а-а.
[01:30:27.780 --> 01:30:28.780]  А кто это делает?
[01:30:29.780 --> 01:30:30.780]  А, вот так.
[01:30:31.780 --> 01:30:35.780]  Нет, нет, внизу-то, ну внизу это неважно, это даже лучше, от этого только лучше становится.
[01:30:35.780 --> 01:30:36.780]  От этого только лучше становится.
[01:30:37.780 --> 01:30:38.780]  Сверху.
[01:30:39.780 --> 01:30:40.780]  Сверху?
[01:30:41.780 --> 01:30:42.780]  А-а-а, да, да, да, да, да, да.
[01:30:43.780 --> 01:30:44.780]  Вот, хорошо.
[01:30:45.780 --> 01:30:52.780]  Да, то есть k конечно кайфежная, но пока еще, но пить боржон пока еще, конечно, рано.
[01:30:55.780 --> 01:30:56.780]  Вот.
[01:30:57.780 --> 01:30:58.780]  Так, ну хорошо, да, потому что это была бы, конечно, миша.
[01:30:58.780 --> 01:31:05.780]  Потому что, заметим, что пока, конечно, заявить, что там просто даже подставить k равно v, это еще не победа.
[01:31:06.780 --> 01:31:10.780]  То есть подставить, если у вас k равно v, то симпточка получится какая?
[01:31:11.780 --> 01:31:16.780]  e, plus v на log v, поделить на log log v.
[01:31:17.780 --> 01:31:18.780]  Так, ну это уже лучше.
[01:31:19.780 --> 01:31:22.780]  Ну тоже неплохо, но правда, не сильно нас спасает.
[01:31:23.780 --> 01:31:24.780]  Ну хотя вот, за один для одного шага это уже неплохо.
[01:31:25.780 --> 01:31:26.780]  Хорошо.
[01:31:27.780 --> 01:31:32.780]  А давайте подумаем, о каком тут k еще может идти речь?
[01:31:44.780 --> 01:31:45.780]  Вот в такой симптотике.
[01:31:48.780 --> 01:31:53.780]  Ну давайте все-таки, понятно, что да, можно, конечно, брать ту же технологию и получить ту же самую симптотику,
[01:31:53.780 --> 01:31:55.780]  но есть подозрение, что k, наверное, можно и получше взять.
[01:31:56.780 --> 01:32:01.780]  Вот можно, ну можно взять 2 в степени e делить на v, и может получиться неплохо.
[01:32:06.780 --> 01:32:08.780]  Ну вот, а можно вместо этого взять что?
[01:32:15.780 --> 01:32:16.780]  Я не знаю ведь.
[01:32:16.780 --> 01:32:17.780]  Я не знаю ведь.
[01:32:25.780 --> 01:32:26.780]  Да, ну-ка, и что получится?
[01:32:27.780 --> 01:32:28.780]  Хорошо, это совсем.
[01:32:29.780 --> 01:32:30.780]  Так, k равно, сколько там?
[01:32:31.780 --> 01:32:33.780]  Значит, e поделить на log v.
[01:32:34.780 --> 01:32:36.780]  Ну да, тогда у нас v не сократится.
[01:32:39.780 --> 01:32:40.780]  Так.
[01:32:46.780 --> 01:32:47.780]  Нет, ну действительно надо, да.
[01:32:49.780 --> 01:32:50.780]  А если вот так?
[01:32:51.780 --> 01:32:52.780]  А если вот так?
[01:32:53.780 --> 01:32:54.780]  2 в степени, а нет, вот это делать, да.
[01:32:55.780 --> 01:32:58.780]  Сейчас, там же в школе была формула, когда лог a поделил лог b, это что?
[01:32:59.780 --> 01:33:00.780]  Это лог v, 1 поделил.
[01:33:01.780 --> 01:33:07.780]  Нет, это будет формула, там это будет лог k по основанию, по основанию лог k.
[01:33:08.780 --> 01:33:09.780]  То есть вот так вот.
[01:33:10.780 --> 01:33:11.780]  То есть не сильно.
[01:33:12.780 --> 01:33:13.780]  Нет.
[01:33:13.780 --> 01:33:14.780]  А чем нам это поможет?
[01:33:15.780 --> 01:33:17.780]  Нет, просто это равно вот этому, это просто равенство.
[01:33:18.780 --> 01:33:19.780]  Вот.
[01:33:20.780 --> 01:33:21.780]  Так.
[01:33:26.780 --> 01:33:31.780]  Вот, и нам надо, чтобы это было меньше или не равно, чем e поделить на log.
[01:33:32.780 --> 01:33:33.780]  Но вот надо решить просто.
[01:33:34.780 --> 01:33:35.780]  Так.
[01:33:36.780 --> 01:33:38.780]  Нет, ну да, можно так сказать.
[01:33:39.780 --> 01:33:40.780]  Так.
[01:33:41.780 --> 01:33:43.780]  Нет, ну да, можно так сказать, да.
[01:33:44.780 --> 01:33:45.780]  Давайте так.
[01:33:46.780 --> 01:33:49.780]  Ну можно так сказать, t поделить на лог t, давайте пусть у меня t равно лог k для удобства, да.
[01:33:50.780 --> 01:33:51.780]  Это 2 в степени, e поделить на v.
[01:33:52.780 --> 01:33:53.780]  Так.
[01:33:54.780 --> 01:33:57.780]  Нет, это просто e поделить на v, допустим, да.
[01:33:58.780 --> 01:34:01.780]  Так, внимание, вопрос, какое t можно взять?
[01:34:03.780 --> 01:34:05.780]  Я сейчас, а какое это имеет?
[01:34:06.780 --> 01:34:09.780]  Ну потому что пусть у меня t равно лог k, да.
[01:34:10.780 --> 01:34:11.780]  Ну смотрите, мы хотим, чтобы...
[01:34:12.780 --> 01:34:13.780]  Вот, да.
[01:34:14.780 --> 01:34:15.780]  Ну просто вот так сокращение.
[01:34:16.780 --> 01:34:18.780]  Теперь давайте подумаем, чему может быть равно t?
[01:34:19.780 --> 01:34:21.780]  Ну, само по себе e поделить на v, конечно же, подойдет.
[01:34:22.780 --> 01:34:28.780]  Но с другой стороны, если я возьму e поделить на v, лог e поделить на v, подойдет ли это?
[01:34:29.780 --> 01:34:30.780]  Это будет больше.
[01:34:31.780 --> 01:34:32.780]  Да?
[01:34:33.780 --> 01:34:34.780]  А почему?
[01:34:35.780 --> 01:34:36.780]  Потому что t поделить на лог k?
[01:34:37.780 --> 01:34:38.780]  Ну-ка, погоди.
[01:34:39.780 --> 01:34:40.780]  e поделить на v, лог e поделить на v, да.
[01:34:41.780 --> 01:34:42.780]  Тогда что у нас получается?
[01:34:43.780 --> 01:34:52.780]  Тогда t делить на лог t, значит, получается, e v лог e делить на v, делить на лог e делить на v, лог e делить на v.
[01:34:53.780 --> 01:34:54.780]  Ну, то есть, заметим, что да.
[01:34:55.780 --> 01:34:56.780]  Вот.
[01:34:57.780 --> 01:34:58.780]  И это выглядит как шлеп-шлеп.
[01:34:59.780 --> 01:35:01.780]  Причем, более того, это выглядит как практически идеальное решение.
[01:35:02.780 --> 01:35:07.780]  Ну, потому что в знаменателе заметим, что вот это вот, это t от лог e поделить на v, очевидно.
[01:35:08.780 --> 01:35:11.780]  Да, но по факту это значит шлеп-шлеп, e делить на v. Отлично.
[01:35:12.780 --> 01:35:13.780]  То есть, значит, пишем.
[01:35:14.780 --> 01:35:15.780]  То есть, вывод очень...
[01:35:16.780 --> 01:35:17.780]  То есть, значит, какой вывод получается?
[01:35:18.780 --> 01:35:20.780]  То есть, на самом деле, да, это было действительно близко к правде.
[01:35:21.780 --> 01:35:23.780]  Только давайте теперь скажем, что k у нас равно...
[01:35:24.780 --> 01:35:26.780]  Так, давайте я тут еще постираю чуть-чуть.
[01:35:27.780 --> 01:35:28.780]  Так.
[01:35:28.780 --> 01:35:29.780]  Так.
[01:35:30.780 --> 01:35:31.780]  Где тут постирать?
[01:35:32.780 --> 01:35:33.780]  Ну ладно, давайте.
[01:35:34.780 --> 01:35:35.780]  То есть, это я поделить на v в степени и тебе поделить на v?
[01:35:36.780 --> 01:35:37.780]  Да.
[01:35:38.780 --> 01:35:39.780]  Нет, почему? Нет, 2...
[01:35:40.780 --> 01:35:41.780]  А, ну да.
[01:35:42.780 --> 01:35:43.780]  Нет, ну это уже адекватно хотя бы.
[01:35:44.780 --> 01:35:46.780]  Потому что не v в степени уже, потому что плевать какой, потому что e не меньше v.
[01:35:47.780 --> 01:35:51.780]  Ну, бывает так, что e меньше, чем v, но в этом случае решение очевидно.
[01:35:52.780 --> 01:35:53.780]  Вот.
[01:35:54.780 --> 01:35:55.780]  При этом.
[01:35:55.780 --> 01:36:03.780]  Значит, да, давайте скажем k равно 2 в степени e делить на v логарифом двоичный e поделить на v.
[01:36:04.780 --> 01:36:05.780]  Так.
[01:36:06.780 --> 01:36:08.780]  Ну, давайте, да, можем на всякий случай подставить.
[01:36:09.780 --> 01:36:21.780]  e плюс v на, значит, e поделить на v логарифом двоичный e делить на v поделить на логарифом двоичный...
[01:36:22.780 --> 01:36:27.780]  там, собственно, e делить на v логарифом двоичный e делить на v.
[01:36:28.780 --> 01:36:29.780]  Ну, понятно, там шлеп-шлеп.
[01:36:30.780 --> 01:36:33.780]  Ну, в общем, такой меньше либо равный шлеп-шлеп.
[01:36:34.780 --> 01:36:35.780]  И равно, в общем, короче, от e.
[01:36:36.780 --> 01:36:37.780]  Так, ура!
[01:36:38.780 --> 01:36:40.780]  Так, это, конечно, неплохо.
[01:36:41.780 --> 01:36:42.780]  Теперь возникает вопрос.
[01:36:43.780 --> 01:36:45.780]  А как вы думаете, да?
[01:36:46.780 --> 01:36:47.780]  Так.
[01:36:47.780 --> 01:36:48.780]  Так.
[01:36:50.780 --> 01:36:51.780]  Сейчас сразу...
[01:36:52.780 --> 01:36:57.780]  Мы просто полагаем, что у нас больше либо равен чувствитель, да?
[01:36:58.780 --> 01:37:02.780]  Потому что кажется, что e поделить на v в разрешенных графах у нас может быть чем-то близким к единице.
[01:37:03.780 --> 01:37:07.780]  У тебя это лог e поделить на v плюс лог-лог e поделить на v.
[01:37:08.780 --> 01:37:09.780]  Ну да, смотри.
[01:37:10.780 --> 01:37:12.780]  Да, это равно лог 2e поделить на v плюс еще...
[01:37:13.780 --> 01:37:15.780]  А, нет, то это просто неважно.
[01:37:15.780 --> 01:37:17.780]  Смотри, вот это заведомо больше, чем это.
[01:37:18.780 --> 01:37:19.780]  Я просто думал, что...
[01:37:20.780 --> 01:37:22.780]  Смотрите, что у нас вот e поделить на v уже близким к единице.
[01:37:23.780 --> 01:37:25.780]  Мы получаем что-то типа меньшее нуля.
[01:37:26.780 --> 01:37:27.780]  А, ну я тебя понял, да.
[01:37:28.780 --> 01:37:29.780]  Все нормально.
[01:37:30.780 --> 01:37:31.780]  Нет, ну как сказать, нет.
[01:37:32.780 --> 01:37:33.780]  Нет, ну давайте так.
[01:37:34.780 --> 01:37:35.780]  Будем считать, что e поделить на v больше, чем 1.
[01:37:36.780 --> 01:37:37.780]  Потому что...
[01:37:38.780 --> 01:37:40.780]  Ну да, мы считаем, что он больше, чем 1.
[01:37:41.780 --> 01:37:42.780]  Это хорошо.
[01:37:43.780 --> 01:37:44.780]  Ну давайте так.
[01:37:45.780 --> 01:37:46.780]  Ну меньше 2, допустим.
[01:37:47.780 --> 01:37:48.780]  А-а-а, ой.
[01:37:49.780 --> 01:37:50.780]  Ой.
[01:37:51.780 --> 01:37:52.780]  Ой.
[01:37:53.780 --> 01:37:54.780]  Ой, а ведь правда.
[01:37:55.780 --> 01:37:56.780]  Ай-я-яй.
[01:37:57.780 --> 01:37:59.780]  Нет, проблема в том, что...
[01:38:00.780 --> 01:38:05.780]  Смотрите, мы здесь сокращали, предполагая, что вот это вот, наверное, больше, чем вот это.
[01:38:06.780 --> 01:38:07.780]  Но это может быть просто неправда.
[01:38:08.780 --> 01:38:09.780]  Почему?
[01:38:10.780 --> 01:38:12.780]  Потому что вот этот двоичный логариф, как правильно заметил Вася, не обязан быть больше единицы.
[01:38:12.780 --> 01:38:19.780]  То есть для этого нам нужно потребовать, чтобы e поделить на v было больше либо равно уже не единицы, а двойки.
[01:38:27.780 --> 01:38:28.780]  Да, ай-яй-яй.
[01:38:29.780 --> 01:38:30.780]  Действительно, что делать?
[01:38:31.780 --> 01:38:34.780]  Нет, ну впрочем, конечно, конкретно этот вопрос, конечно, решается.
[01:38:35.780 --> 01:38:38.780]  А, если e поделить на v меньше 2, по 2, то можно...
[01:38:39.780 --> 01:38:40.780]  Ага, да.
[01:38:40.780 --> 01:38:41.780]  Накидать лишние хребер, да.
[01:38:42.780 --> 01:38:43.780]  Да.
[01:38:44.780 --> 01:38:45.780]  Ну, кстати.
[01:38:50.780 --> 01:38:51.780]  Нет, ну понятно, что k бы...
[01:38:52.780 --> 01:38:57.780]  Нет, ну или можно накидать лишние хребер, или просто сказать, что k равно максимум из...
[01:38:58.780 --> 01:39:01.780]  То есть вместо e поделить на v пишем максимум из e поделить на v и 2.
[01:39:03.780 --> 01:39:04.780]  Ну, в принципе, да.
[01:39:05.780 --> 01:39:09.780]  То есть понятно, в реальном коде как бы это не отразится, хотя можно и отразить, собственно, да.
[01:39:10.780 --> 01:39:12.780]  Ну, хотя знаете, как бывает потом, кто да...
[01:39:13.780 --> 01:39:14.780]  Как это да...
[01:39:15.780 --> 01:39:19.780]  В реальном коде будет заряд кожды константа 10.
[01:39:20.780 --> 01:39:21.780]  Ну да.
[01:39:22.780 --> 01:39:23.780]  Ну всякое бывает, да.
[01:39:24.780 --> 01:39:25.780]  Нет, ну бывает эти.
[01:39:26.780 --> 01:39:27.780]  Нет, почему?
[01:39:28.780 --> 01:39:29.780]  Я помню, я как-то контест какой-то там что-то писал.
[01:39:30.780 --> 01:39:35.780]  Там была задача тоже, надо было написать динамику, но перед этим объекта надо было посортировать по какому-то непонятному компаратору.
[01:39:36.780 --> 01:39:37.780]  Ну вот.
[01:39:37.780 --> 01:39:42.780]  Как бы это был какой-то напрашивающийся компаратор, но как бы, если по нему отсортировать, почему-то получалось va.
[01:39:43.780 --> 01:39:44.780]  Вот, я не знаю, то есть...
[01:39:45.780 --> 01:39:48.780]  Ну, точнее, я сказал, ну просто вот один из альпиагиков, который там очень против...
[01:39:49.780 --> 01:39:52.780]  Не понимал, что зачем вы там доказательства будете, за что это такое, непонятно было.
[01:39:53.780 --> 01:39:54.780]  А я взял...
[01:39:55.780 --> 01:39:58.780]  Ну вот, представляете, он там написал это и получил va и думал, что делать.
[01:39:59.780 --> 01:40:01.780]  Ну вот, я сказал, а я просто сортировал вот так вот.
[01:40:02.780 --> 01:40:03.780]  А почему так?
[01:40:04.780 --> 01:40:05.780]  У меня так доказательства сходилось.
[01:40:05.780 --> 01:40:06.780]  Вот.
[01:40:07.780 --> 01:40:08.780]  И он почему-то был сильно удивлен.
[01:40:09.780 --> 01:40:10.780]  Так, ну ладно, не важно.
[01:40:11.780 --> 01:40:15.780]  Не, ну там порядок был принципиален.
[01:40:16.780 --> 01:40:17.780]  Значит, хорошо.
[01:40:18.780 --> 01:40:23.780]  Ладно, в любом случае, если мы вот этого так или иначе достигли, то теперь давайте думать.
[01:40:24.780 --> 01:40:25.780]  Хорошо.
[01:40:26.780 --> 01:40:28.780]  Так, то есть у нас v теперь превратилось в...
[01:40:29.780 --> 01:40:32.780]  Ну вот, соответственно, v делить на k.
[01:40:32.780 --> 01:40:36.780]  Так, но фишка теперь заключается в другом.
[01:40:37.780 --> 01:40:40.780]  Так, а какое следующее k нам вообще взять?
[01:40:43.780 --> 01:40:46.780]  Видимо, вот вы развили раньше 2 в степени.
[01:40:47.780 --> 01:40:48.780]  Это как...
[01:40:49.780 --> 01:40:50.780]  Вот сейчас будем сделать что-то чуть больше.
[01:40:51.780 --> 01:40:55.780]  То есть вот эти 2 в степень еще умножить, допустим, на логрифт.
[01:40:56.780 --> 01:40:59.780]  А и умножить на саму штуку вот.
[01:41:00.780 --> 01:41:01.780]  Так.
[01:41:02.780 --> 01:41:03.780]  Нет, то это, конечно, да.
[01:41:04.780 --> 01:41:05.780]  Так, сколько, говорите, получается?
[01:41:06.780 --> 01:41:10.780]  То есть, типа, v приходит в 2 в степени v умножить на v.
[01:41:11.780 --> 01:41:12.780]  V квадрат?
[01:41:13.780 --> 01:41:14.780]  2 в степени v и умножить на v просто.
[01:41:15.780 --> 01:41:16.780]  Ну ладно, то это только не v давайте, а k.
[01:41:17.780 --> 01:41:19.780]  А, 2 в степени k и он просто умножить на k.
[01:41:20.780 --> 01:41:22.780]  Не при степени двойки, а просто умножить на k.
[01:41:23.780 --> 01:41:25.780]  А, 2 в степени k умножить на k, вот так, да?
[01:41:26.780 --> 01:41:27.780]  Да, вот это.
[01:41:27.780 --> 01:41:33.780]  Ну вот теперь давайте думать, а чем это нам поможет?
[01:41:34.780 --> 01:41:36.780]  В нашем случае это поможет...
[01:41:37.780 --> 01:41:38.780]  Получается сколько?
[01:41:39.780 --> 01:41:41.780]  То есть 2 в степени...
[01:41:42.780 --> 01:41:44.780]  Нет, хорошо, k-то переходит.
[01:41:45.780 --> 01:41:46.780]  И давайте смотреть.
[01:41:47.780 --> 01:41:49.780]  У нас получается e плюс v делить на k.
[01:41:52.780 --> 01:41:56.780]  По-любому v делить на k умножить на сколько?
[01:41:57.780 --> 01:42:01.600]  Там логарифом 2 в степени к, то есть лог, там, 2 в степени k на k,
[01:42:02.780 --> 01:42:03.780]  поделить на log log...
[01:42:04.780 --> 01:42:05.780]  2 в степени k на k...
[01:42:06.780 --> 01:42:07.780]  Внимание, вопрос...
[01:42:08.780 --> 01:42:09.780]  А сильно нам это помогает?
[01:42:10.780 --> 01:42:11.780]  По-моему, логарифом вот этого и логарифом тупо 2 в степени k,
[01:42:12.780 --> 01:42:14.780]  и это, в общем-то, примерно одно и то же.
[01:42:15.780 --> 01:42:17.780] illy 2 в степени k может умножить на логарифом k.
[01:42:18.780 --> 01:42:19.780]  Чего-почему умножить на логарифом k?
[01:42:20.780 --> 01:42:23.780]  Логарифом 2 в степени k умножить на k это...
[01:42:24.780 --> 01:42:25.780]  Это...
[01:42:25.780 --> 01:42:34.780]  Это к плюс лог к, в общем-то, а это все равно к, так что, в общем-то, по-моему, да, можно...
[01:42:34.780 --> 01:42:39.780]  А, ну, то есть 2 в степени к лог к.
[01:42:39.780 --> 01:42:45.780]  Во, вот это уже интереснее, да. Ну-ка, давайте 2 в степени к лог к. Что получится?
[01:42:48.780 --> 01:42:53.780]  Вот. Так, лог лог 2 в степени к лог к.
[01:42:53.780 --> 01:42:58.780]  Ну, что получится? Ну, и здесь получается у нас... Ну, понятно, что тут получается...
[01:42:58.780 --> 01:43:07.780]  Е плюс В делить на к, значит, умножить на... Действительно, к лог к.
[01:43:07.780 --> 01:43:14.780]  Значит, поделить на... Ну, фактически, лог к плюс лог лог к.
[01:43:14.780 --> 01:43:20.780]  Вот. Ну, по факту получается, да, шлеп-шлеп, шлеп-шлеп, ура.
[01:43:20.780 --> 01:43:25.780]  Видимо, можно было еще позакручивать, наверное. В общем, получается Е.
[01:43:25.780 --> 01:43:30.780]  Так. Ну, а просто фишка теперь заключается в топ-да, носка, нот.
[01:43:30.780 --> 01:43:37.780]  А действительно, просто, теперь думаем, а насколько, как вы думаете, да, насколько быстро это будет расти?
[01:43:42.780 --> 01:43:47.780]  Сейчас, то есть, носка переходит в как в степени к?
[01:43:47.780 --> 01:43:55.780]  Ну, на самом деле, да. Да, то самое Е поделить на В в степени Е поделить на В получается, да.
[01:44:01.780 --> 01:44:10.780]  Да, вот видите. Такая лесенка, это звучит как лог из лог-звездочки. Ага, да.
[01:44:11.780 --> 01:44:16.780]  О, господи. Нет, в смысле, лог из лог-звездочки.
[01:44:16.780 --> 01:44:22.780]  Это очень быстро. Ну, да. Но, правда, все равно плохо. Быстро.
[01:44:22.780 --> 01:44:25.780]  Ну, вот видите, потому что я четко к чему мы должны прийти.
[01:44:25.780 --> 01:44:34.780]  Дело в том, что утверждается, что с вот этим вот атомик-хипом на самом деле просто там этот алгоритм просто работает вообще за две итерации.
[01:44:34.780 --> 01:44:38.780]  И алгоритм получается вообще за вот Е работает.
[01:44:38.780 --> 01:44:42.780]  За две итерации на реальных данных или в плане всегда?
[01:44:42.780 --> 01:44:49.780]  В плане всегда. Нет, ну, на реальных данных лог-звездочка у нас реально, ну не две, но четыре. Это не очень интересно.
[01:44:49.780 --> 01:44:55.780]  И тогда после первой итерации у нас сколько вершин остается?
[01:44:55.780 --> 01:44:58.780]  Так, давайте. После первой итерации у нас остается вершин...
[01:44:58.780 --> 01:44:59.780]  В поделить на?
[01:44:59.780 --> 01:45:02.780]  В поделить на, значит, там...
[01:45:02.780 --> 01:45:09.780]  Да, Е поделить на В, там лог-2, Е поделить на В.
[01:45:09.780 --> 01:45:13.780]  Вот, можно поперекидывать, сказать, что это В квадрат поделить на там...
[01:45:13.780 --> 01:45:15.780]  Сейчас почему так?
[01:45:15.780 --> 01:45:17.780]  А, ладно, потому что да. Да, не так.
[01:45:17.780 --> 01:45:20.780]  У нас есть два в степени.
[01:45:20.780 --> 01:45:25.780]  То есть это мы делим на Е в степени В, но еще в какой-то там...
[01:45:25.780 --> 01:45:33.780]  В степени Е поделить на В.
[01:45:33.780 --> 01:45:39.780]  Сейчас, если Е равняется В, то...
[01:45:39.780 --> 01:45:43.780]  Но мы сказали, Е поделить на В это хотя бы два.
[01:45:43.780 --> 01:45:50.780]  Так что допустим, да?
[01:45:50.780 --> 01:45:59.780]  Ничего хорошего.
[01:45:59.780 --> 01:46:07.780]  Мы можем В сделать там 1, Е 35, а я поделить на В сделать 2.
[01:46:07.780 --> 01:46:10.780]  Кажется, мы за две итерации так...
[01:46:10.780 --> 01:46:12.780]  Да, но так, по крайней мере, не получится.
[01:46:12.780 --> 01:46:14.780]  Значит, надо камень.
[01:46:14.780 --> 01:46:17.780]  Так, ну да.
[01:46:17.780 --> 01:46:23.780]  Теперь возникает вопрос, каким же образом можно подменить К?
[01:46:23.780 --> 01:46:27.780]  На нуде К увеличить.
[01:46:27.780 --> 01:46:32.780]  Ну, либо увеличить, либо сделать его как-то, может быть, зависит, чем даже...
[01:46:32.780 --> 01:46:43.780]  Не только от Е делить на В, хотя это тоже, но и, может быть, от самого В.
[01:46:43.780 --> 01:46:51.780]  Ну-ка, давайте прям вот это интересно подумать.
[01:46:51.780 --> 01:46:54.780]  Может быть, можно добиться точного понравительства?
[01:46:54.780 --> 01:46:57.780]  Да... Нет, ну как?
[01:46:57.780 --> 01:47:00.780]  Ну, не очень понятно.
[01:47:27.780 --> 01:47:51.780]  Ну-ка, я вот, это же интересно вести.
[01:47:51.780 --> 01:47:56.780]  Сейчас, тогда мы, наверное...
[01:47:56.780 --> 01:48:00.780]  Да, может быть, нам не надо стремиться к тому, чтобы...
[01:48:00.780 --> 01:48:04.780]  Ну, ВЛОК был хотя бы Е.
[01:48:04.780 --> 01:48:07.780]  А, ну не ВЛОК, а ВЛОК-ЛОК-ЛОК.
[01:48:07.780 --> 01:48:11.780]  Потому что мы типа знаем, что у нас все эти операции.
[01:48:21.780 --> 01:48:23.780]  Ну-ка.
[01:48:23.780 --> 01:48:26.780]  Ну-ка.
[01:48:26.780 --> 01:48:29.780]  Ну-ка.
[01:48:29.780 --> 01:48:32.780]  Ну-ка.
[01:48:59.780 --> 01:49:19.780]  ЕЛОК Е поделить на В.
[01:49:19.780 --> 01:49:21.780]  ЕЛОК Е поделить на В?
[01:49:21.780 --> 01:49:24.780]  Давайте попробуем.
[01:49:24.780 --> 01:49:26.780]  Или, в смысле, два в степени это?
[01:49:26.780 --> 01:49:28.780]  Одну, два в степени.
[01:49:28.780 --> 01:49:33.780]  Так, два в степени ЕЛОК Е поделить на В.
[01:49:33.780 --> 01:49:35.780]  Ну, давайте попробуем.
[01:49:35.780 --> 01:49:36.780]  И что это даст?
[01:49:36.780 --> 01:49:39.780]  А мы же пробовали уже ЕЛОК В поделить на В.
[01:49:39.780 --> 01:49:42.780]  А ЕЛОК Е, типа, больше в равно.
[01:49:42.780 --> 01:49:44.780]  Но был слишком большим.
[01:49:44.780 --> 01:49:47.780]  Ну, в смысле, у нас получилось, что за первую итерацию...
[01:49:47.780 --> 01:49:49.780]  А, у нас К больше, чем все вершины практически всегда.
[01:49:49.780 --> 01:49:52.780]  Да, у меня уже Е в степени.
[01:49:52.780 --> 01:49:54.780]  Получается В в степени что-то больше единицы.
[01:49:54.780 --> 01:50:02.780]  Ну да, да, да, да, да.
[01:50:02.780 --> 01:50:04.780]  Ну да, сейчас вот.
[01:50:04.780 --> 01:50:06.780]  Так, кажется, вот.
[01:50:06.780 --> 01:50:07.780]  Нет, надо как-то свой пишу.
[01:50:07.780 --> 01:50:10.780]  Вот как-то я вот.
[01:50:10.780 --> 01:50:12.780]  ЕЛОК.
[01:50:40.780 --> 01:50:42.780]  Ага.
[01:51:10.780 --> 01:51:12.780]  Чувак?
[01:51:12.780 --> 01:51:14.780]  Да.
[01:51:14.780 --> 01:51:16.780]  Ты, это я...
[01:51:16.780 --> 01:51:18.780]  В отран бил...
[01:51:18.780 --> 01:51:20.780]  Уровенье Х при ритме ЛОК Х
[01:51:20.780 --> 01:51:22.780]  сравняется...
[01:51:22.780 --> 01:51:24.780]  И К.
[01:51:24.780 --> 01:51:26.780]  Потому что, я...
[01:51:26.780 --> 01:51:28.780]  Да, ты, это ты...
[01:51:28.780 --> 01:51:30.780]  Ты, это ты...
[01:51:30.780 --> 01:51:32.780]  Ты, это ты...
[01:51:32.780 --> 01:51:34.780]  Ты, это ты...
[01:51:34.780 --> 01:51:36.780]  Ты, это ты...
[01:51:36.780 --> 01:51:38.780]  Ты, это ты...
[01:51:38.780 --> 01:51:57.460]  ну а симпатически по-любому как бы да так там уже или там надо это как-то заметить что-то еще
[01:51:57.460 --> 01:52:06.380]  может быть вы налог вы а потом налог лог а потом на лог тук лог
[01:52:06.380 --> 01:52:11.860]  кила кила если перебираем рандомные функции давайте е делить на в
[01:52:11.860 --> 01:52:19.180]  умножить налог е делить на в умножить налог лог е делить на в о господи ну и что это даст
[01:52:19.180 --> 01:52:25.060]  у нас две итерации кто знает давайте спишем ассимпточку второй и и итерации
[01:52:25.060 --> 01:52:35.140]  она у нас работает за е плюс в поделить на два в степени нет просто плюс в поделить на
[01:52:35.140 --> 01:52:46.340]  к налог к нелит на лог лог к так а давайте у нас сейчас будет сейчас мы просто кажется слишком
[01:52:46.340 --> 01:52:54.780]  сложно думаем мы даже по сути просто там системы из двух неравенств надо сказать что
[01:52:55.540 --> 01:53:10.520]  корень из в
[01:53:10.520 --> 01:53:15.060]  корень из токачилл корень из в это тот же лог вы получите все равно вы лог вы
[01:53:15.060 --> 01:53:21.260]  поделить налог лог вы и как бы не факт что это как бы е может оказаться еще меньше до
[01:53:21.260 --> 01:53:35.260]  вот тут какие то есть как бы нас интересует когда е меньше чем даже в лог лог лог в вот тут
[01:53:51.260 --> 01:54:05.140]  мальчика
[01:54:21.260 --> 01:54:29.420]  сейчас
[01:54:51.260 --> 01:54:58.260]  Слышен звук дыхания.
[01:54:58.260 --> 01:55:05.260]  Слышен звук дыхания.
[01:55:05.260 --> 01:55:12.260]  Слышен звук дыхания.
[01:55:12.260 --> 01:55:19.260]  Слышен звук дыхания.
[01:55:19.260 --> 01:55:26.260]  Слышен звук дыхания.
[01:55:26.260 --> 01:55:33.260]  Слышен звук дыхания.
[01:55:33.260 --> 01:55:40.260]  Слышен звук дыхания.
[01:55:40.260 --> 01:55:47.260]  Слышен звук дыхания.
[01:55:47.260 --> 01:55:54.260]  Слышен звук дыхания.
[01:55:54.260 --> 01:56:01.260]  Слышен звук дыхания.
[01:56:01.260 --> 01:56:08.260]  Слышен звук дыхания.
[01:56:08.260 --> 01:56:15.260]  Слышен звук дыхания.
[01:56:15.260 --> 01:56:22.260]  Слышен звук дыхания.
[01:56:22.260 --> 01:56:29.260]  Слышен звук дыхания.
[01:56:29.260 --> 01:56:36.260]  Слышен звук дыхания.
[01:56:36.260 --> 01:56:43.260]  Слышен звук дыхания.
[01:56:43.260 --> 01:56:50.260]  Слышен звук дыхания.
[01:56:50.260 --> 01:56:57.260]  Слышен звук дыхания.
[01:56:57.260 --> 01:57:04.260]  Слышен звук дыхания.
[01:57:04.260 --> 01:57:11.260]  Слышен звук дыхания.
[01:57:11.260 --> 01:57:18.260]  Слышен звук дыхания.
[01:57:18.260 --> 01:57:25.260]  Слышен звук дыхания.
[01:57:25.260 --> 01:57:32.260]  Слышен звук дыхания.
[01:57:32.260 --> 01:57:39.260]  Слышен звук дыхания.
[01:57:39.260 --> 01:57:46.260]  Слышен звук дыхания.
[01:57:46.260 --> 01:57:53.260]  Слышен звук дыхания.
[01:57:53.260 --> 01:58:00.260]  Слышен звук дыхания.
[01:58:00.260 --> 01:58:07.260]  Слышен звук дыхания.
[01:58:07.260 --> 01:58:14.260]  Слышен звук дыхания.
[01:58:14.260 --> 01:58:20.260]  Слышен звук дыхания.
[01:58:20.260 --> 01:58:27.260]  Слышен звук дыхания.
[01:58:27.260 --> 01:58:32.260]  Сейчас, почему так? Почему v поделить на k?
[01:58:32.260 --> 01:58:34.260]  А на сколько?
[01:58:34.260 --> 01:58:37.260]  Просто же v поделить на k.
[01:58:37.260 --> 01:58:39.260]  Сейчас.
[01:58:39.260 --> 01:58:40.260]  У нас в вершин...
[01:58:40.260 --> 01:58:43.260]  Сейчас, мы k превратили в v делить на k, да?
[01:58:43.260 --> 01:58:48.260]  Вот этот коэффициент слева, это то сколько у нас в вершин сейчас.
[01:58:48.260 --> 01:58:52.260]  После первой итерации у нас v поделить на k в вершин.
[01:58:52.260 --> 01:58:54.260]  А, понял.
[01:58:54.260 --> 01:58:57.260]  Да, у нас v поделить на k в вершин.
[01:58:57.260 --> 01:58:59.260]  Так, отлично.
[01:58:59.260 --> 01:59:00.260]  И...
[01:59:00.260 --> 01:59:01.260]  Вот.
[01:59:01.260 --> 01:59:05.260]  И вот нам нужно, чтобы вся эта штука была меньше, чем e.
[01:59:05.260 --> 01:59:06.260]  Вот.
[01:59:06.260 --> 01:59:13.260]  Ну, теперь давайте мы числитель заменим на просто log v.
[01:59:13.260 --> 01:59:15.260]  Так.
[01:59:15.260 --> 01:59:19.260]  Так, ладно, значит, меньше либо равно e плюс...
[01:59:19.260 --> 01:59:21.260]  В общем, подставить надо.
[01:59:21.260 --> 01:59:23.260]  Так, ну теперь давайте v делить на...
[01:59:23.260 --> 01:59:24.260]  А, какое...
[01:59:24.260 --> 01:59:25.260]  Так, какое k?
[01:59:25.260 --> 01:59:27.260]  Вот это беремся еще, да?
[01:59:27.260 --> 01:59:28.260]  Да.
[01:59:28.260 --> 01:59:30.260]  Так, 2 в степени e поделить на v.
[01:59:30.260 --> 01:59:34.260]  Log e поделить на v.
[01:59:34.260 --> 01:59:36.260]  Умножить на сколько там log, право.
[01:59:36.260 --> 01:59:37.260]  Так.
[01:59:37.260 --> 01:59:38.260]  Так.
[01:59:38.260 --> 01:59:41.260]  Так.
[01:59:41.260 --> 01:59:42.260]  И так.
[01:59:42.260 --> 01:59:48.260]  Ну, и здесь получается, домножаем на log v поделить на...
[01:59:48.260 --> 01:59:50.260]  Сколько?
[01:59:50.260 --> 01:59:52.260]  Так, поделите нот.
[01:59:52.260 --> 01:59:57.260]  Так, а тут придется все-таки log v делить на k оставить.
[01:59:57.260 --> 01:59:59.260]  Все-таки так оценить не получится.
[01:59:59.260 --> 02:00:01.260]  И чего?
[02:00:01.260 --> 02:00:05.260]  И утверждается, что вот это вот схлопнет вот это?
[02:00:05.260 --> 02:00:07.260]  Ну, кажется, да.
[02:00:07.260 --> 02:00:10.260]  Ну, не факт.
[02:00:10.260 --> 02:00:16.260]  Ну, тогда, наверное, все-таки не надо забивать на log k.
[02:00:16.260 --> 02:00:19.260]  Надо ему вычесть все.
[02:00:19.260 --> 02:00:23.260]  Угу.
[02:00:23.260 --> 02:00:26.260]  Неужели?
[02:00:26.260 --> 02:00:27.260]  Нет.
[02:00:27.260 --> 02:00:28.260]  Ну, как сказать?
[02:00:28.260 --> 02:00:30.260]  А, там log v?
[02:00:30.260 --> 02:00:32.260]  Нет, так просто не получится.
[02:00:32.260 --> 02:00:33.260]  Ну, там не log v, а...
[02:00:33.260 --> 02:00:34.260]  Ну, вот.
[02:00:34.260 --> 02:00:37.260]  Ну, можно писать, что log v минус там...
[02:00:37.260 --> 02:00:41.260]  Ну, сейчас нам же нужно показать, что log v меньше e.
[02:00:41.260 --> 02:00:43.260]  Ну, это-то правда.
[02:00:43.260 --> 02:00:45.260]  Log v меньше, чем...
[02:00:45.260 --> 02:00:49.260]  Доказываем, что вся эта штука не превышает e.
[02:00:49.260 --> 02:00:50.260]  Да.
[02:00:50.260 --> 02:00:51.260]  Но для этого как бы...
[02:00:51.260 --> 02:00:53.260]  Ну, тут вопрос, что кого схлопливает.
[02:00:53.260 --> 02:00:57.260]  Потому что у нас еще есть вот это v, которое тоже надо убить.
[02:00:57.260 --> 02:00:58.260]  А, это не единицы?
[02:00:58.260 --> 02:01:02.260]  Это v.
[02:01:02.260 --> 02:01:07.260]  То есть мы, да, мы тут поделили на k, но это все-таки v.
[02:01:07.260 --> 02:01:08.260]  Вот.
[02:01:08.260 --> 02:01:11.260]  То есть получается log v.
[02:01:11.260 --> 02:01:13.260]  Ну, типа того, да.
[02:01:19.260 --> 02:01:20.260]  Угу.
[02:01:20.260 --> 02:01:21.260]  Ну-ка.
[02:01:31.260 --> 02:01:33.260]  Угу.
[02:01:41.260 --> 02:01:43.260]  У-у, черт.
[02:02:11.260 --> 02:02:15.260]  Потому что, если я больше, чем v, то...
[02:02:29.260 --> 02:02:31.260]  Вася, вставай.
[02:02:41.260 --> 02:02:42.260]  Нет.
[02:02:42.260 --> 02:02:45.260]  Нет, там просто, видимо, придется еще домыслить немножко.
[02:02:45.260 --> 02:02:47.260]  Потому что, если мало ребер...
[02:02:50.260 --> 02:02:51.260]  Угу.
[02:02:53.260 --> 02:02:55.260]  Нет, они, да, они просто...
[02:02:55.260 --> 02:02:58.260]  Не, просто немножко утверждается, что...
[02:02:58.260 --> 02:02:59.260]  Да, что...
[02:02:59.260 --> 02:03:00.260]  От ребер тоже.
[02:03:00.260 --> 02:03:02.260]  Нет, они вообще просто...
[02:03:02.260 --> 02:03:03.260]  То есть...
[02:03:03.260 --> 02:03:04.260]  Ладно.
[02:03:04.260 --> 02:03:05.260]  Они в этом смысле теряют.
[02:03:05.260 --> 02:03:07.260]  То есть они в этом смысле говорят, что...
[02:03:07.260 --> 02:03:08.260]  Да.
[02:03:08.260 --> 02:03:09.260]  То есть говорят так.
[02:03:09.260 --> 02:03:11.260]  Возьмем log v и, казалось бы, будет радость.
[02:03:11.260 --> 02:03:12.260]  Да?
[02:03:12.260 --> 02:03:13.260]  Не будет.
[02:03:13.260 --> 02:03:14.260]  Окей.
[02:03:14.260 --> 02:03:17.260]  V log v может быть больше, чем v.
[02:03:17.260 --> 02:03:18.260]  Угу.
[02:03:18.260 --> 02:03:21.260]  Ну, это, да, как тебе...
[02:03:21.260 --> 02:03:24.260]  Картинка называется вам больше, чем я.
[02:03:24.260 --> 02:03:25.260]  Угу.
[02:03:25.260 --> 02:03:26.260]  Угу.
[02:03:26.260 --> 02:03:27.260]  Угу.
[02:03:27.260 --> 02:03:28.260]  Угу.
[02:03:28.260 --> 02:03:29.260]  Угу.
[02:03:29.260 --> 02:03:30.260]  Угу.
[02:03:30.260 --> 02:03:31.260]  Угу.
[02:03:31.260 --> 02:03:32.260]  Угу.
[02:03:32.260 --> 02:03:33.260]  Угу.
[02:03:33.260 --> 02:03:34.260]  Угу.
[02:03:34.260 --> 02:03:35.260]  Ну, это...
[02:03:35.260 --> 02:03:36.260]  Да, как тебе...
[02:03:36.260 --> 02:03:37.260]  Картинка называется вам...
[02:03:37.260 --> 02:03:38.260]  Да.
[02:03:38.260 --> 02:03:39.260]  Ну, это да.
[02:03:39.260 --> 02:03:40.260]  Вот.
[02:03:40.260 --> 02:03:45.260]  Просто если v log v меньше, чем я, тогда непонятно, зачем
[02:03:45.260 --> 02:03:46.260]  мы все это делаем.
[02:03:46.260 --> 02:03:47.260]  У нас есть прием.
[02:03:47.260 --> 02:03:48.260]  Ну, да.
[02:03:48.260 --> 02:03:49.260]  Так.
[02:03:49.260 --> 02:03:50.260]  Вот так.
[02:03:50.260 --> 02:03:53.260]  Вот я не знаю точно, что они там, конечно...
[02:03:53.260 --> 02:03:55.260]  Сейчас, может, это да.
[02:03:55.260 --> 02:03:56.260]  Или там...
[02:03:56.260 --> 02:03:57.260]  Нет, или там алгоритм.
[02:03:57.260 --> 02:04:02.260]  Нет, может, конечно, Фрэд Монтальян делал чуть-чуть по-другому.
[02:04:02.260 --> 02:04:03.260]  Угу.
[02:04:03.260 --> 02:04:04.260]  Почти.
[02:04:04.260 --> 02:04:05.260]  Ага.
[02:04:05.260 --> 02:04:06.260]  Вот.
[02:04:06.260 --> 02:04:18.500]  Что?
[02:04:18.500 --> 02:04:45.380]  ну да, стартуем с m9, если к, то как бы...
[02:04:45.380 --> 02:04:49.540]  сейчас мы используем...
[02:04:49.540 --> 02:05:07.940]  так, нет, ну если k равно log n, то как бы ладно, тут конечно уже будет log log n поделить на log log log n,
[02:05:07.940 --> 02:05:14.380]  то есть на самом деле это не прямо, как бы вполне себе уже еще лучше, но плохо.
[02:05:14.380 --> 02:05:30.340]  что-то я уже путаюсь, ну как же, нет, log log, это делить на log log log, это конечно круто,
[02:05:30.340 --> 02:05:37.660]  но е может быть еще меньше. как же они так читерски выкручивались-то?
[02:06:07.660 --> 02:06:37.660]  м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м-м
[02:06:37.660 --> 02:06:43.600]  ну да да все вот так
[02:06:45.780 --> 02:06:54.500]  я тебе странно было что-то то шуту то есть очень простое
[02:06:56.660 --> 02:07:00.900]  манки тут уже нам так
[02:07:00.900 --> 02:07:23.620]  да нет причем да причем под анализ нет видимо какой-то еще дом замечания или
[02:07:23.620 --> 02:07:33.500]  там этот фредман тарян действует не совсем так да нет или нет мы уже пытаемся такой нет ситуация
[02:07:33.500 --> 02:07:37.980]  такая что это из этого мы больше не выжмем потому что мы уже тут порешали уравнение и тут выглядит
[02:07:37.980 --> 02:07:45.380]  так что по моему вот вот это уравнение мы решили асимпатически точно вот по моему мы тут как бы
[02:07:45.420 --> 02:07:56.180]  лучше чем как бы еделить новое лог еделить новое просто не выжмем вот так что то дело возможно
[02:07:56.180 --> 02:08:02.820]  не в симпатике а дело да то есть дай дело дело еще возможно в том что в азам во сколько
[02:08:02.820 --> 02:08:09.140]  раз там у нас еще к чину сократится то есть во сколько то есть это во сколько во сколько раз
[02:08:09.140 --> 02:08:26.900]  у нас там еще то есть сколько у нас еще группа чек там будет
[02:08:26.900 --> 02:08:31.140]  не но странно если критически размер кучи лог в это конечно дату получится лог
[02:08:31.140 --> 02:08:49.820]  в и как бы неких понятно как от него избавляться выделить на что можно на
[02:08:49.820 --> 02:08:58.020]  второй иктрации перейти к в поделить на к в любой степени но так что это да то
[02:08:58.020 --> 02:09:03.620]  с проблем в том нас проблема не ва проблем в том что е слишком мелая но
[02:09:03.620 --> 02:09:32.420]  вот слишком так нет а ну да нет вася все-таки не выдержал напряжение на
[02:09:32.540 --> 02:09:50.540]  вася вася вася я конечно очень жалко тебя будить но как бы ты храпишь слишком громко
[02:09:50.540 --> 02:10:05.660]  нет ничего страшного не ну понятно я я я вася прекрасно понимаю на самом деле но вот что-то
[02:10:05.660 --> 02:10:10.780]  сам бы как бы если беда так не хотелось спать я бы на самом деле сейчас полчаса не висел ответ на
[02:10:10.780 --> 02:10:15.500]  этот вопрос хотят которые там на самом деле там на самом деле право там с блеском решается за
[02:10:15.500 --> 02:10:23.180]  три минуты называется главное просто понять как какими-то какими пятью словами то есть там
[02:10:23.180 --> 02:10:44.060]  действительно я плюс в лог вот это или нет но казалось бы да так ну да может где-то там фишка
[02:10:44.060 --> 02:10:49.740]  еще в том что у нас и конечно еще может нет просто если е совсем маленькая то на самом деле на каждом
[02:10:49.740 --> 02:10:55.340]  шаге у нас е тоже уменьшается да то есть есть там е поделить на это в это прям прям совсем одним
[02:10:55.340 --> 02:11:01.300]  да то помните что когда вы жали констар компоненту размера ката у вас количество ребер выкинулся но
[02:11:01.300 --> 02:11:12.700]  это не работает ну не но не особо станутся если е все-таки а симпатически больше чем в но на
[02:11:12.700 --> 02:11:17.980]  обратную функцию керман так например какой-нибудь то там вычитание как бы из е чего-то порядка того же
[02:11:17.980 --> 02:11:27.940]  в общем-то не сильно даст нам погоду вот тут вот какая про тут вот собственно какая проблема есть
[02:11:27.940 --> 02:11:36.460]  нет все-таки жутко не как же это неужели не ну просто да нет я прошу прощенько за зависть но
[02:11:36.460 --> 02:11:43.180]  просто тут они не до но я не знаю просто как будто алга да нет просто честно скажем вот в статье
[02:11:43.180 --> 02:11:47.660]  просто про атомик ип вот тут просто прямым текстом пишем даже вот у нас есть алгоритм да
[02:11:47.660 --> 02:11:55.980]  то есть там вот перевожу тачит идея что растим значит такое там дерево растущие значит из
[02:11:55.980 --> 02:12:03.500]  произвольной вершины как в алгоритме прима только растем пока но пока куча из соседних
[02:12:03.500 --> 02:12:11.340]  элементов значит значит не достигнет значит критического момента потом мы начинаем вот потом
[02:12:11.340 --> 02:12:15.980]  начинаем новую вершину и собственно растим другое дерево то есть тоже пока значит
[02:12:15.980 --> 02:12:22.880]  останавливаемся вот потом там значит все сжимаем и собственно переходим за это мжатый граф так
[02:12:22.880 --> 02:12:29.940]  значит в результате но вот значит но детали понятно но и нам говорят что да что ну и говорят
[02:12:29.940 --> 02:12:35.840]  что если у нас на первой фазе у нас критический размер k, то количество вершин у нас оставшихся...
[02:12:35.840 --> 02:12:37.840]  А, тут знаете просто фишка.
[02:12:37.840 --> 02:12:43.840]  Просто дело в том, что нам тут утверждают, видимо надо просто не от v отталкиваться.
[02:12:43.840 --> 02:12:54.840]  Нет, нам еще говорят, что хочется делать так, чтобы количество вершин от k не превосходило 2e делить на k.
[02:12:55.740 --> 02:13:02.740]  Потому что на самом деле алгоритм Фредмонтарьяна, он на самом деле вот эти вот щиты с отсечкой k максимумов не делает.
[02:13:02.740 --> 02:13:04.740]  Он делает немножко по-другому.
[02:13:04.740 --> 02:13:11.740]  Он останавливается, когда у вас количество ребер, связанных с вашей компонентой, становится k.
[02:13:15.740 --> 02:13:20.740]  Сейчас, ну если с нашей компонентой связано корабль, из этого не следует?
[02:13:21.640 --> 02:13:25.640]  Из этого следует, что количество компонентов суммарных у вас не сильно большое.
[02:13:25.640 --> 02:13:32.640]  Потому что суммарное количество ребер, связанных со всеми компонентами, у вас сколько? 2e?
[02:13:34.640 --> 02:13:35.640]  Понятно, да?
[02:13:35.640 --> 02:13:40.640]  Сейчас, подождите, ребер, связанных с компонентами, имеется в виду, что они внутри компонента тоже считаются?
[02:13:40.640 --> 02:13:42.640]  Да.
[02:13:43.540 --> 02:13:54.540]  Вот. Ну тогда получается, что у вас количество вершин не более чем 2e делить на k.
[02:14:01.540 --> 02:14:02.540]  Так, ну правда...
[02:14:03.440 --> 02:14:06.440]  Мы же все ухудшили, у нас было b подник на k, а стало e подник на k.
[02:14:09.440 --> 02:14:10.440]  Ну вот, да.
[02:14:10.440 --> 02:14:12.440]  Но я просто зачитывал, что тут.
[02:14:12.440 --> 02:14:13.440]  Они говорят вот это.
[02:14:13.440 --> 02:14:17.440]  Просто там такая версия была, может там этого тоже хватало.
[02:14:19.440 --> 02:14:20.440]  Так, ну дальше говорить.
[02:14:20.440 --> 02:14:23.440]  Значит, у нас есть, да, действительно есть двухвариантный проход.
[02:14:23.440 --> 02:14:26.440]  Значит, заметим, что у нас, да.
[02:14:26.440 --> 02:14:29.440]  Значит, используем Atomic Hip, который, значит, там...
[02:14:33.440 --> 02:14:34.440]  А, тут еще.
[02:14:34.440 --> 02:14:35.440]  Сейчас тут, кажется, просто надо...
[02:14:35.440 --> 02:14:37.440]  Ладно, на Atomic Hip, тут, кажется...
[02:14:39.440 --> 02:14:40.440]  Значит...
[02:14:42.440 --> 02:14:43.440]  А, смотрите.
[02:14:49.440 --> 02:14:50.440]  Такая.
[02:14:50.440 --> 02:14:51.440]  Там про...
[02:14:51.440 --> 02:14:52.440]  Нет, да.
[02:14:52.440 --> 02:14:53.440]  Ой.
[02:14:53.440 --> 02:14:54.440]  Все, мой тупняк.
[02:14:54.440 --> 02:14:55.440]  Все.
[02:14:55.440 --> 02:14:56.440]  Я все с ума сошел, да.
[02:14:56.440 --> 02:14:57.440]  Ну я не с ума сошел, нет.
[02:14:57.440 --> 02:14:58.440]  Я не с ума сошел.
[02:14:58.440 --> 02:14:59.440]  Я не с ума сошел.
[02:14:59.440 --> 02:15:00.440]  Я не с ума сошел.
[02:15:00.440 --> 02:15:01.440]  Я не с ума сошел.
[02:15:01.440 --> 02:15:02.440]  Я не с ума сошел.
[02:15:03.340 --> 02:15:04.340]  А.
[02:15:04.340 --> 02:15:08.340]  Если делать алгоритм предмана Тайяна, вот так, как написано там,
[02:15:08.340 --> 02:15:11.340]  ему не будет ли проще писать?
[02:15:11.340 --> 02:15:12.340]  Может.
[02:15:12.340 --> 02:15:13.340]  Ну, кстати, будет.
[02:15:13.340 --> 02:15:14.340]  Без вот этих глоток.
[02:15:14.340 --> 02:15:15.340]  Ну да.
[02:15:15.340 --> 02:15:16.340]  Ну, кстати, давайте уже...
[02:15:16.340 --> 02:15:18.340]  Ну да, да, да, да, да.
[02:15:18.340 --> 02:15:19.340]  Ну, пожалуй.
[02:15:19.340 --> 02:15:20.340]  Нет, так-то будет.
[02:15:20.340 --> 02:15:21.340]  Другой вопрос зайдет ли.
[02:15:21.340 --> 02:15:22.340]  Ну, ладно.
[02:15:22.340 --> 02:15:24.840]  Хотя там вообще говорят в наглую, что первая фаза,
[02:15:24.840 --> 02:15:27.340]  давайте скажем, что k равно e поделить на v и не паримся.
[02:15:27.340 --> 02:15:28.340]  Все.
[02:15:28.340 --> 02:15:31.340]  Ну, максимум из e поделить на 2 и 2, например, да.
[02:15:32.240 --> 02:15:34.240]  Понятно, что тут уже лог e поделить на v.
[02:15:34.240 --> 02:15:35.240]  Соответственно, понятно.
[02:15:35.240 --> 02:15:38.240]  Уже можно сказать, что это e поделить на что-то и не паримся.
[02:15:39.240 --> 02:15:44.240]  А дальше пишем, что каждая следующая степень двойки предыдущего
[02:15:44.240 --> 02:15:47.240]  и, соответственно, там все нормально.
[02:15:47.240 --> 02:15:53.240]  Хотя, если мы оцениваем, что на каждой следующей фазе
[02:15:53.240 --> 02:15:56.240]  у вас e поделить на k предыдущего,
[02:15:56.240 --> 02:15:59.240]  у нас тут получалось e плюс v, так что, в принципе, нормально.
[02:16:00.140 --> 02:16:02.140]  Нет, на самом деле я не сказал просто...
[02:16:02.140 --> 02:16:06.140]  На самом деле я про atomic hip забыл сказать более читерскую вещь.
[02:16:07.140 --> 02:16:10.140]  То есть, на самом деле она не просто работает за такую симптотику,
[02:16:10.140 --> 02:16:13.140]  потому что на самом деле она основана на...
[02:16:13.140 --> 02:16:15.140]  Ну, там на самом деле цепочка.
[02:16:15.140 --> 02:16:24.140]  Atomic hip на самом деле основана на af hip и af hip основана на q hip.
[02:16:25.040 --> 02:16:30.040]  А af hip говорит, что я умею делать все эти операции,
[02:16:30.040 --> 02:16:36.040]  в том числе экстракт-мин, за от единицы.
[02:16:38.040 --> 02:16:42.040]  А atomic hip замедляет?
[02:16:43.040 --> 02:16:46.040]  Нет, он ничего не замедляет.
[02:16:46.040 --> 02:16:47.040]  Фишка в другом.
[02:16:47.040 --> 02:16:50.040]  Я просто здесь говорю, что у меня в каждый момент времени
[02:16:50.940 --> 02:16:53.940]  размер кучи не превосходит лог квадрат n.
[02:16:55.940 --> 02:16:59.940]  Но там просто фишка в том, что n у вас тоже не превосходит
[02:16:59.940 --> 02:17:03.940]  каких-то чисел, которые вы можете у себя хранить.
[02:17:06.940 --> 02:17:09.940]  То есть, на n есть какое-то естественное ограничение,
[02:17:09.940 --> 02:17:12.940]  что n не более чем 2 в степени этой битности числа.
[02:17:14.940 --> 02:17:17.940]  А то и, возможно, даже значительно меньше.
[02:17:18.840 --> 02:17:20.840]  Поэтому, на самом деле, есть существенное ограничение,
[02:17:20.840 --> 02:17:23.840]  что если n меньше не просто этого адеквата,
[02:17:23.840 --> 02:17:27.840]  но еще и логарифма этого, то утверждается,
[02:17:27.840 --> 02:17:30.840]  что чисел мало, и все эти операции можно делать за от единицы.
[02:17:31.840 --> 02:17:33.840]  Как это делается?
[02:17:33.840 --> 02:17:38.840]  Это сводится к q hip, в котором то же самое, что af по ограничению,
[02:17:38.840 --> 02:17:41.840]  только тут лог в степени 1 четверть.
[02:17:42.740 --> 02:17:47.740]  В реальных ограничениях w хотя бы 64,
[02:17:47.740 --> 02:17:50.740]  то логарифм 6, корень в четвертой степени 6,
[02:17:50.740 --> 02:17:52.740]  но там совсем по мелочи.
[02:17:53.740 --> 02:17:55.740]  То есть, если вы подразумеваете,
[02:17:55.740 --> 02:17:57.740]  что у вас количество элементов не более чем вот это,
[02:17:57.740 --> 02:17:59.740]  то вы работаете за от единицы,
[02:17:59.740 --> 02:18:02.740]  потому что там вот тут действительно начинается черная магия.
[02:18:04.740 --> 02:18:08.740]  Если бы я не чувствовал себя, как это делается,
[02:18:09.640 --> 02:18:12.640]  если бы я не чувствовал себя, как Вася,
[02:18:12.640 --> 02:18:16.640]  я бы успел бы рассказать все эти сведения.
[02:18:16.640 --> 02:18:18.640]  Тут действительно черная магический автомат.
[02:18:18.640 --> 02:18:20.640]  Но так вот, фишка в чем?
[02:18:23.640 --> 02:18:25.640]  Фишка еще заключается в том,
[02:18:25.640 --> 02:18:28.640]  что, оказывается, если куча не сильно большого размера,
[02:18:28.640 --> 02:18:30.640]  мы все за от единицы делаем.
[02:18:33.640 --> 02:18:35.640]  Вывести из-за симптотики это невозможно,
[02:18:35.640 --> 02:18:37.640]  просто структура еще круче.
[02:18:38.540 --> 02:18:40.540]  Просто действительно заметим,
[02:18:40.540 --> 02:18:44.540]  что нам вот это к не имеет смысла делать больше,
[02:18:44.540 --> 02:18:46.540]  чем лог В, правда?
[02:18:49.540 --> 02:18:51.540]  В том плане, что мы знаем,
[02:18:51.540 --> 02:18:53.540]  что мы можем сделать к вот таким.
[02:18:53.540 --> 02:18:55.540]  Но если оно оказалось больше,
[02:18:55.540 --> 02:18:57.540]  чем лог В, давайте просто сделаем лог В.
[02:18:59.540 --> 02:19:01.540]  И тогда получится, что вы все сделали
[02:19:01.540 --> 02:19:03.540]  просто за е плюс В и не паримся.
[02:19:03.540 --> 02:19:05.540]  Можете поподробнее?
[02:19:06.440 --> 02:19:08.440]  Я не очень понимаю.
[02:19:08.440 --> 02:19:10.440]  Нет, почему не имеет смысла делать меньше?
[02:19:12.440 --> 02:19:14.440]  Потому что, напоминаю,
[02:19:14.440 --> 02:19:15.440]  у нас теперь есть куча,
[02:19:15.440 --> 02:19:17.440]  которая говорит, что если у меня в куче размер
[02:19:17.440 --> 02:19:19.440]  не больше, чем лог квадрат,
[02:19:19.440 --> 02:19:21.440]  лог квадрат Н,
[02:19:21.440 --> 02:19:23.440]  то я тогда все эти операции
[02:19:23.440 --> 02:19:26.440]  делаю теперь не за лог N делить на лог N,
[02:19:26.440 --> 02:19:28.440]  а тоже за от единицы.
[02:19:29.440 --> 02:19:31.440]  А, типа за счет того,
[02:19:31.440 --> 02:19:33.440]  что у нас на самом деле операций супер много,
[02:19:34.340 --> 02:19:36.340]  то есть утверждает, что
[02:19:36.340 --> 02:19:38.340]  элементов на самом деле
[02:19:38.340 --> 02:19:40.340]  в куче не сильно много.
[02:19:40.340 --> 02:19:42.340]  А как, правда, ограничение серьезно,
[02:19:42.340 --> 02:19:44.340]  то есть заметим,
[02:19:44.340 --> 02:19:46.340]  что давайте представим себе,
[02:19:46.340 --> 02:19:48.340]  что мы возьмем k,
[02:19:48.340 --> 02:19:50.340]  а что мы паримся?
[02:19:50.340 --> 02:19:52.340]  Давайте тупо по этой лодке возьмем k равно лог В.
[02:19:54.340 --> 02:19:56.340]  Смотрите, тогда первую фазу
[02:19:56.340 --> 02:19:58.340]  мы точно сделаем за е плюс В,
[02:19:58.340 --> 02:20:00.340]  потому что мы все операции делаем за единицы.
[02:20:01.240 --> 02:20:03.240]  Да.
[02:20:03.240 --> 02:20:05.240]  Но теперь мы на второй фазе
[02:20:05.240 --> 02:20:07.240]  можем делать даже просто едва ли
[02:20:07.240 --> 02:20:09.240]  нечестную кучу фибоначи.
[02:20:09.240 --> 02:20:11.240]  И у нас получится ассимтотика
[02:20:11.240 --> 02:20:13.240]  е плюс,
[02:20:13.240 --> 02:20:15.240]  помните, честно это вот это вот,
[02:20:15.240 --> 02:20:17.240]  выделить на k, на лог k и не паримся.
[02:20:17.240 --> 02:20:19.240]  Да.
[02:20:24.240 --> 02:20:26.240]  Так, но теперь давайте
[02:20:26.240 --> 02:20:28.240]  скажем,
[02:20:28.240 --> 02:20:30.240]  но если у нас теперь
[02:20:30.240 --> 02:20:32.240]  да, ну вот, ну точнее так,
[02:20:32.240 --> 02:20:34.240]  но вторую фазу мы скажем,
[02:20:34.240 --> 02:20:36.240]  что пусть k это у нас равно уже.
[02:20:36.240 --> 02:20:38.240]  Нет, хотя нет, пока еще не с k.
[02:20:38.240 --> 02:20:40.240]  Ну все, это просто меньше, чем В,
[02:20:40.240 --> 02:20:42.240]  то есть меньше, чем е.
[02:20:42.240 --> 02:20:44.240]  Ну да, так.
[02:20:44.240 --> 02:20:46.240]  Сейчас.
[02:20:46.240 --> 02:20:48.240]  А почему на лог k, когда на лог
[02:20:48.240 --> 02:20:50.240]  вводим k?
[02:20:50.240 --> 02:20:52.240]  Так, сейчас.
[02:20:52.240 --> 02:20:54.240]  Нет, ну да, так, сейчас.
[02:20:54.240 --> 02:20:56.240]  Так, как мы до этого делали?
[02:20:56.240 --> 02:20:58.240]  Мы делали два степени k, да?
[02:20:58.240 --> 02:21:00.240]  А, ну да, мы не заморачиваем,
[02:21:00.240 --> 02:21:02.240]  потому что да, вы говорили, что это...
[02:21:02.240 --> 02:21:04.240]  Ну да, все получается там.
[02:21:04.240 --> 02:21:06.240]  Да, выделить на k, на лог два степени k,
[02:21:06.240 --> 02:21:08.240]  это уже хорошо, да?
[02:21:08.240 --> 02:21:10.240]  Вот, ну только теперь замечаем, что два
[02:21:10.240 --> 02:21:12.240]  степени k-то у нас это теперь В.
[02:21:12.240 --> 02:21:14.240]  То есть получается, что на
[02:21:14.240 --> 02:21:16.240]  второй фазе мы просто...
[02:21:16.240 --> 02:21:18.240]  Ну можно и не замечать, он просто
[02:21:18.240 --> 02:21:20.240]  сократился.
[02:21:20.240 --> 02:21:22.240]  Нет, это просто да, это было сокращение,
[02:21:22.240 --> 02:21:24.240]  это из-за того, что так мы доказывали,
[02:21:24.240 --> 02:21:26.240]  что каждая следующая фаза после первой
[02:21:26.240 --> 02:21:28.240]  фазы, да?
[02:21:28.240 --> 02:21:30.240]  Но тут фишка в том, что просто после вот
[02:21:30.240 --> 02:21:32.240]  этого вот, вторая фаза уже как равно В,
[02:21:32.240 --> 02:21:34.240]  и значит мы уже просто написали честного прима.
[02:21:34.240 --> 02:21:36.240]  То есть, в чем обратить внимание?
[02:21:36.240 --> 02:21:38.240]  То есть мы по сути только в первой фазе
[02:21:38.240 --> 02:21:40.240]  реально использовали atomic hip.
[02:21:40.240 --> 02:21:42.240]  Во второй фазе мы уже можем просто
[02:21:42.240 --> 02:21:44.240]  взять абсолютно обычного прима с кучей фибоначи,
[02:21:46.240 --> 02:21:48.240]  прям абсолютно честного, и это уже
[02:21:48.240 --> 02:21:50.240]  победа.
[02:21:50.240 --> 02:21:52.240]  То есть сокращение, видите, из-за чего
[02:21:52.240 --> 02:21:54.240]  оно возникло, да? То есть на самом деле
[02:21:54.240 --> 02:21:56.240]  важный момент, то есть помните, да? То есть
[02:21:56.240 --> 02:21:58.240]  просто из-за симптотики оно не выжимается.
[02:21:58.240 --> 02:22:00.240]  Важный момент именно, что тут
[02:22:00.240 --> 02:22:02.240]  всего вот этого вот
[02:22:02.240 --> 02:22:04.240]  очень мало.
[02:22:04.240 --> 02:22:06.240]  Вот, но главное, что
[02:22:06.240 --> 02:22:08.240]  видимо, что у нас есть afhip, который
[02:22:08.240 --> 02:22:10.240]  значит умеет вот все операции делать
[02:22:10.240 --> 02:22:12.240]  за единицы, включая
[02:22:12.240 --> 02:22:14.240]  все декрески, все удаления,
[02:22:14.240 --> 02:22:16.240]  все добавления, вот это вот все.
[02:22:16.240 --> 02:22:18.240]  Вот.
[02:22:20.240 --> 02:22:22.240]  Так что вот такой вот
[02:22:22.240 --> 02:22:24.240]  нот. Так что получается вот такой вот
[02:22:24.240 --> 02:22:26.240]  неожиданный чит.
[02:22:26.240 --> 02:22:28.240]  Вот.
[02:22:28.240 --> 02:22:30.240]  Да.
[02:22:30.240 --> 02:22:32.240]  Просто log v для того,
[02:22:32.240 --> 02:22:34.240]  чтобы у нас наша куча просто за вот
[02:22:34.240 --> 02:22:36.240]  единицы работала.
[02:22:36.240 --> 02:22:38.240]  Да.
[02:22:38.240 --> 02:22:40.240]  А на второй итерации мы возьмем
[02:22:40.240 --> 02:22:42.240]  просто k равно
[02:22:42.240 --> 02:22:44.240]  2 в степени предыдущая k
[02:22:44.240 --> 02:22:46.240]  и получим
[02:22:46.240 --> 02:22:48.240]  e плюс v. Но при этом
[02:22:48.240 --> 02:22:50.240]  2 в степени предыдущая k это 2 в степени
[02:22:50.240 --> 02:22:52.240]  log v, то есть v.
[02:22:56.240 --> 02:22:58.240]  Ну и все.
[02:22:58.240 --> 02:23:00.240]  То есть это означает, что мы как бы разрешаем
[02:23:00.240 --> 02:23:02.240]  себе расшириться до упора.
[02:23:02.240 --> 02:23:04.240]  То есть мы просто
[02:23:04.240 --> 02:23:06.240]  делаем все уже честно.
[02:23:06.240 --> 02:23:08.240]  И все.
[02:23:08.240 --> 02:23:10.240]  То есть на втором шаге мы
[02:23:10.240 --> 02:23:12.240]  можем делать
[02:23:12.240 --> 02:23:14.240]  мы можем делать e плюс log v.
[02:23:16.240 --> 02:23:18.240]  Ну да, потому что
[02:23:18.240 --> 02:23:20.240]  на втором шаге у нас тут уже не v, а v поделить
[02:23:20.240 --> 02:23:22.240]  на log v.
[02:23:22.240 --> 02:23:24.240]  Поэтому как бы тут...
[02:23:24.240 --> 02:23:26.240]  Поэтому log v
[02:23:26.240 --> 02:23:28.240]  нам тут уже
[02:23:28.240 --> 02:23:30.240]  амалину...
[02:23:30.240 --> 02:23:32.240]  Сетом будет
[02:23:32.240 --> 02:23:34.240]  e log v.
[02:23:34.240 --> 02:23:36.240]  Да, сетом тут e будет. Все-таки куча фибоначи
[02:23:36.240 --> 02:23:38.240]  нужна. Но уже в смысле более
[02:23:38.240 --> 02:23:40.240]  старой версии будет адекватно. Да.
[02:23:40.240 --> 02:23:42.240]  Ура. Да будет радость.
[02:23:42.240 --> 02:23:44.240]  Но правда
[02:23:44.240 --> 02:23:46.240]  напоминаю, это работает только
[02:23:46.240 --> 02:23:48.240]  в предположении, что вы живете,
[02:23:48.240 --> 02:23:50.240]  что у вас там эти целые
[02:23:50.240 --> 02:23:52.240]  числа, вы в них это
[02:23:52.240 --> 02:23:54.240]  и получается так.
[02:23:54.240 --> 02:23:56.240]  Ну то есть честно скажем,
[02:23:56.240 --> 02:23:58.240]  автомат, как вы уже поняли,
[02:23:58.240 --> 02:24:00.240]  на самом деле вот этот автомат очень сложно
[02:24:00.240 --> 02:24:02.240]  написать. Ну вот так,
[02:24:02.240 --> 02:24:04.240]  чтобы он хоть реально работал. Потому что
[02:24:04.240 --> 02:24:06.240]  в нашей реальной жизни
[02:24:06.240 --> 02:24:08.240]  вот этот лог это вообще 1,2.
[02:24:08.240 --> 02:24:10.240]  Написать кучу, то есть куча,
[02:24:10.240 --> 02:24:12.240]  в которой не более чем один
[02:24:12.240 --> 02:24:14.240]  или два элемента.
[02:24:14.240 --> 02:24:16.240]  Да, то есть для этого
[02:24:16.240 --> 02:24:18.240]  там, ну там, главное теоретическое
[02:24:18.240 --> 02:24:20.240]  там как же очень сильная гадость, на самом деле.
[02:24:20.240 --> 02:24:22.240]  Честно, а вот как тут
[02:24:22.240 --> 02:24:24.240]  вообще... А, или даже
[02:24:24.240 --> 02:24:26.240]  там даже пятая степень, может быть
[02:24:26.240 --> 02:24:28.240]  даже не четвертая, но это неважно.
[02:24:28.240 --> 02:24:30.240]  Ассертическое
[02:24:30.240 --> 02:24:32.240]  количество операций
[02:24:32.240 --> 02:24:34.240]  сложения, сравнения целых чисел, да?
[02:24:34.240 --> 02:24:36.240]  То есть, ну да.
[02:24:36.240 --> 02:24:38.240]  Нет, ну как всегда, мы же как
[02:24:38.240 --> 02:24:40.240]  ну одно действие, да, ну сложение,
[02:24:40.240 --> 02:24:42.240]  ну там еще есть подразумевается,
[02:24:42.240 --> 02:24:44.240]  что они умножение умеют делать.
[02:24:44.240 --> 02:24:46.240]  То есть, что мы должны уметь делать?
[02:24:46.240 --> 02:24:48.240]  Ну, обычно
[02:24:48.240 --> 02:24:50.240]  можно считать, что просто
[02:24:50.240 --> 02:24:52.240]  то же, что и обычно. Только
[02:24:52.240 --> 02:24:54.240]  помним, что за у от единицы мы делаем
[02:24:54.240 --> 02:24:56.240]  арифметическую операцию только
[02:24:56.240 --> 02:24:58.240]  не со всеми числами, а только с
[02:24:58.240 --> 02:25:00.240]  битными числами.
[02:25:00.240 --> 02:25:02.240]  То есть, условно говоря, мы конечно часто
[02:25:02.240 --> 02:25:04.240]  неявно предполагаем, что у нас
[02:25:04.240 --> 02:25:06.240]  мы с произвольными числами работаем
[02:25:06.240 --> 02:25:08.240]  за у от единицы.
[02:25:08.240 --> 02:25:10.240]  Сейчас мы обычно
[02:25:10.240 --> 02:25:12.240]  должны помнить, что мы только с битными числами
[02:25:12.240 --> 02:25:14.240]  работаем за у от единицы, а с произвольной
[02:25:14.240 --> 02:25:16.240]  битности числами уже длинная арифметика
[02:25:16.240 --> 02:25:18.240]  с нормальной асимптотикой.
[02:25:18.240 --> 02:25:20.240]  Интересно, там нужно, например,
[02:25:20.240 --> 02:25:22.240]  делить или умножать?
[02:25:22.240 --> 02:25:24.240]  Делить или какие делить?
[02:25:24.240 --> 02:25:26.240]  Делить или умножать?
[02:25:26.240 --> 02:25:28.240]  Ну, по-моему,
[02:25:28.240 --> 02:25:30.240]  ну там надо как бы битные операции какие-то делать,
[02:25:30.240 --> 02:25:32.240]  ссорики всякие делать, кстати, надо.
[02:25:32.240 --> 02:25:34.240]  Нет, ну вот это
[02:25:34.240 --> 02:25:36.240]  все делается за у от длинных,
[02:25:36.240 --> 02:25:38.240]  а вот деление умножения
[02:25:38.240 --> 02:25:40.240]  уже плохо.
[02:25:40.240 --> 02:25:42.240]  Ну да, ну да.
[02:25:42.240 --> 02:25:44.240]  Тут можно сказать так,
[02:25:44.240 --> 02:25:46.240]  что явно, я
[02:25:46.240 --> 02:25:48.240]  всех деталей не скажу, но
[02:25:48.240 --> 02:25:50.240]  почему-то везде подчеркивается важность,
[02:25:50.240 --> 02:25:52.240]  что умножение б битных чисел
[02:25:52.240 --> 02:25:54.240]  делается за у от единицы, это базовая операция,
[02:25:54.240 --> 02:25:56.240]  потому что.
[02:25:56.240 --> 02:25:58.240]  Сложение вычитания за у от единицы
[02:25:58.240 --> 02:26:00.240]  же не смущает, даже несмотря на то, что это
[02:26:00.240 --> 02:26:02.240]  б битное число?
[02:26:02.240 --> 02:26:04.240]  Ну, не смущает.
[02:26:04.240 --> 02:26:06.240]  Ну, а почему тогда умножение смущает?
[02:26:06.240 --> 02:26:08.240]  В общем, считается, что умножение тоже там
[02:26:08.240 --> 02:26:10.240]  какой-то, видимо, схемой за у от единицы делается.
[02:26:10.240 --> 02:26:12.240]  Вот.
[02:26:12.240 --> 02:26:14.240]  Так.
[02:26:14.240 --> 02:26:16.240]  Так, ух ты, сколько времени
[02:26:16.240 --> 02:26:18.240]  мы на это потратили?
[02:26:18.240 --> 02:26:20.240]  Ну, давайте, ладно, давайте потратим
[02:26:20.240 --> 02:26:22.240]  еще, потому что.
[02:26:24.240 --> 02:26:26.240]  О.
[02:26:28.240 --> 02:26:30.240]  Ну ладно, вообще,
[02:26:30.240 --> 02:26:32.240]  кстати, время уже следующего перерыва пришло.
[02:26:32.240 --> 02:26:34.240]  Да,
[02:26:34.240 --> 02:26:36.240]  я прошу прощения, мой, конечно, косяк,
[02:26:36.240 --> 02:26:38.240]  ну ладно, ну ладно, давайте тогда,
[02:26:38.240 --> 02:26:40.240]  давайте тогда немножко еще
[02:26:40.240 --> 02:26:42.240]  отдохнем, надо, да?
[02:26:42.240 --> 02:26:44.240]  Потому что алгоритм краскала говорит
[02:26:44.240 --> 02:26:46.240]  вообще наглую вещь.
[02:26:46.240 --> 02:26:48.240]  Он говорит, так, а давайте просто
[02:26:48.240 --> 02:26:50.240]  отсортируем все ребра и будем добавлять их
[02:26:50.240 --> 02:26:52.240]  в порядке возрастания.
[02:26:52.240 --> 02:26:54.240]  Ну, по принципу, если, так,
[02:26:54.240 --> 02:26:56.240]  вот действительно, потому что действительно
[02:26:56.240 --> 02:26:58.240]  вот мы, есть у нас какой-то вот
[02:26:58.240 --> 02:27:00.240]  граф, да?
[02:27:00.240 --> 02:27:02.240]  Там вот уже какой-то набор ребер.
[02:27:02.240 --> 02:27:04.240]  Так, а теперь давайте рассмотрим
[02:27:04.240 --> 02:27:06.240]  минимальное ребро,
[02:27:06.240 --> 02:27:08.240]  которое вообще сюда можно добавить
[02:27:08.240 --> 02:27:10.240]  без зацикла.
[02:27:10.240 --> 02:27:12.240]  Так вот.
[02:27:12.240 --> 02:27:14.240]  Ну, достаточно очевидно, что это
[02:27:14.240 --> 02:27:16.240]  ребро добавить можно, правда?
[02:27:16.240 --> 02:27:18.240]  Вот, понятно, да?
[02:27:18.240 --> 02:27:20.240]  Так, ну да,
[02:27:20.240 --> 02:27:22.240]  все уже мертвы, ну ладно.
[02:27:22.240 --> 02:27:24.240]  Да, ну какой-нибудь там разрез
[02:27:24.240 --> 02:27:26.240]  придумать легко.
[02:27:26.240 --> 02:27:28.240]  Поэтому автоматически возникает идея, давайте
[02:27:28.240 --> 02:27:30.240]  просто отсортируем все ребра и для каждого ребра
[02:27:30.240 --> 02:27:32.240]  будем говорить, так, можно его добавить?
[02:27:32.240 --> 02:27:34.240]  Да, добавляем, нет, нельзя. Остается только,
[02:27:34.240 --> 02:27:36.240]  то есть задача после этого сводится к тому,
[02:27:36.240 --> 02:27:38.240]  что надо просто быстро определять
[02:27:38.240 --> 02:27:40.240]  для ребра, можно ли его
[02:27:40.240 --> 02:27:42.240]  добавить, да или нет?
[02:27:44.240 --> 02:27:46.240]  Вот.
[02:27:46.240 --> 02:27:48.240]  Как же это сделать?
[02:27:48.240 --> 02:27:50.240]  Ну, да,
[02:27:50.240 --> 02:27:52.240]  ну давайте, да, ну конечно, есть СНМ.
[02:27:52.240 --> 02:27:54.240]  Так, ну ладно,
[02:27:54.240 --> 02:27:56.240]  что такое СНМ, наверное, объяснять тоже
[02:27:56.240 --> 02:27:58.240]  не надо, да?
[02:27:58.240 --> 02:28:00.240]  Или надо?
[02:28:00.240 --> 02:28:02.240]  Не, не надо, ну классики, ну вот.
[02:28:02.240 --> 02:28:04.240]  Ну, давайте, ладно, не будем тратить время на формальное
[02:28:04.240 --> 02:28:06.240]  объяснение, что такое СНМ.
[02:28:06.240 --> 02:28:08.240]  Вот.
[02:28:08.240 --> 02:28:10.240]  Ну, давайте так, ну вот,
[02:28:10.240 --> 02:28:12.240]  поговорим только, ну вот, ну давайте подумаем,
[02:28:12.240 --> 02:28:14.240]  за какую симпатику можно его реализовать?
[02:28:14.240 --> 02:28:16.240]  Ну, конечно, если бы вы объединяли эти два множества
[02:28:16.240 --> 02:28:18.240]  в тупую, это будет e лог e плюс
[02:28:18.240 --> 02:28:20.240]  очевидно v квадрат.
[02:28:22.240 --> 02:28:24.240]  Но важный момент.
[02:28:24.240 --> 02:28:26.240]  Так, но важный момент,
[02:28:26.240 --> 02:28:28.240]  давайте все-таки отметим этот важный момент, что
[02:28:28.240 --> 02:28:30.240]  если бы вы объединяли два множества путем
[02:28:30.240 --> 02:28:32.240]  переливания меньшего в большее,
[02:28:32.240 --> 02:28:34.240]  то это бы работало, то
[02:28:34.240 --> 02:28:36.240]  суммарное время объединения было бы
[02:28:36.240 --> 02:28:38.240]  v лог v.
[02:28:38.240 --> 02:28:40.240]  Ну вот, ну тоже причины понятные,
[02:28:40.240 --> 02:28:42.240]  тут все впадает.
[02:28:42.240 --> 02:28:44.240]  Вот.
[02:28:44.240 --> 02:28:46.240]  Ну, СНМ отчасти это и предполагает.
[02:28:46.240 --> 02:28:48.240]  Потому что мы помним, да, что у СНМ
[02:28:48.240 --> 02:28:50.240]  есть две евристики, евристики сжатия
[02:28:50.240 --> 02:28:52.240]  путей и ранковый евристика.
[02:28:52.240 --> 02:28:54.240]  Так, ну начнем
[02:28:54.240 --> 02:28:56.240]  с простого. Такой уровень, так сказать,
[02:28:56.240 --> 02:28:58.240]  изи. Там изи при изи.
[02:28:58.240 --> 02:29:00.240]  Если мы используем только ранковую
[02:29:00.240 --> 02:29:02.240]  евристику, то тогда у нас
[02:29:02.240 --> 02:29:04.240]  все работает за логарифом.
[02:29:06.240 --> 02:29:08.240]  Почему? Да.
[02:29:08.240 --> 02:29:10.240]  Потому что мы по индукции доказываем, что если у вершины
[02:29:10.240 --> 02:29:12.240]  ранк x, значит у него в поддереве хотя бы
[02:29:12.240 --> 02:29:14.240]  два степени x вершин.
[02:29:14.240 --> 02:29:16.240]  А ранка мы как бы в высоту, или просто
[02:29:16.240 --> 02:29:18.240]  размер поддерев будем брать?
[02:29:18.240 --> 02:29:20.240]  Ну, например, давайте...
[02:29:20.240 --> 02:29:22.240]  Просто же размер брать, тогда все очень...
[02:29:22.240 --> 02:29:24.240]  Чего размер?
[02:29:24.240 --> 02:29:26.240]  Ну не размера логарифа, а размера, видимо, да?
[02:29:26.240 --> 02:29:28.240]  Нет, ну просто же можно размер...
[02:29:28.240 --> 02:29:30.240]  А, ну по-разному. Дальше как реализуете?
[02:29:30.240 --> 02:29:32.240]  Ну, все-таки нам будет
[02:29:32.240 --> 02:29:34.240]  наверное проще все-таки для последующего
[02:29:34.240 --> 02:29:36.240]  анализа сказать, что все-таки
[02:29:36.240 --> 02:29:38.240]  там ранка вершины, это просто ее
[02:29:38.240 --> 02:29:40.240]  высота в дереве без сжатия
[02:29:40.240 --> 02:29:42.240]  путей.
[02:29:42.240 --> 02:29:44.240]  Ну вот, и мы говорим, что когда мы объединяем
[02:29:44.240 --> 02:29:46.240]  два дерева, мы просто подвешиваем
[02:29:46.240 --> 02:29:48.240]  дерево с меньшей высотой и дерево
[02:29:48.240 --> 02:29:50.240]  с большей высотой.
[02:29:50.240 --> 02:29:52.240]  А если мы объединяем два дерева с одинаковой
[02:29:52.240 --> 02:29:54.240]  высотой, то как бы
[02:29:54.240 --> 02:29:56.240]  у одной вершины ранка увеличивается
[02:29:56.240 --> 02:29:58.240]  на 1.
[02:29:58.240 --> 02:30:00.240]  Но по индукции доказываем, что у
[02:30:00.240 --> 02:30:02.240]  дерева высоты h хотя бы 2 в степени h вершин,
[02:30:02.240 --> 02:30:04.240]  не обязательно сбалансированных, конечно,
[02:30:04.240 --> 02:30:06.240]  но вот хотя бы 2 в степени h будет.
[02:30:06.240 --> 02:30:08.240]  И отсюда следует, что
[02:30:08.240 --> 02:30:10.240]  максимальный ранк вершины не более
[02:30:10.240 --> 02:30:12.240]  чем логариф. Да, это изи,
[02:30:12.240 --> 02:30:14.240]  тут обсуждать нечего.
[02:30:14.240 --> 02:30:16.240]  Но более важная для нас вещь,
[02:30:16.240 --> 02:30:18.240]  кстати, с точки зрения дерева
[02:30:18.240 --> 02:30:20.240]  доминатора вчера.
[02:30:20.240 --> 02:30:22.240]  Если вы не используете ранговую эвристику,
[02:30:22.240 --> 02:30:24.240]  но используете эвристику сжатия
[02:30:24.240 --> 02:30:26.240]  путей,
[02:30:26.240 --> 02:30:28.240]  то оказывается,
[02:30:28.240 --> 02:30:30.240]  в дело вступает амортизация,
[02:30:30.240 --> 02:30:32.240]  но учетная стоимость
[02:30:32.240 --> 02:30:34.240]  каждой операции
[02:30:34.240 --> 02:30:36.240]  все еще логариф.
[02:30:36.240 --> 02:30:38.240]  Если вы делаете только сжатие путей,
[02:30:38.240 --> 02:30:40.240]  вот как бы
[02:30:40.240 --> 02:30:42.240]  вчера эволинк апдейт,
[02:30:42.240 --> 02:30:44.240]  тогда тоже будет работать с логарифом, сейчас мы это докажем.
[02:30:44.240 --> 02:30:46.240]  То есть, представьте себе,
[02:30:46.240 --> 02:30:48.240]  что объединяете так,
[02:30:48.240 --> 02:30:50.240]  что вам просто жестко говорят,
[02:30:50.240 --> 02:30:52.240]  кого куда вешать,
[02:30:52.240 --> 02:30:54.240]  но вы имеете право делать
[02:30:54.240 --> 02:30:56.240]  эвристику сжатия путей.
[02:30:56.240 --> 02:30:58.240]  Как же доказать,
[02:30:58.240 --> 02:31:00.240]  что мы все делаем
[02:31:00.240 --> 02:31:02.240]  за логарифом?
[02:31:02.240 --> 02:31:04.240]  Вот.
[02:31:04.240 --> 02:31:06.240]  Как же нам такое доказать?
[02:31:06.240 --> 02:31:08.240]  Ну, давайте посмотрим
[02:31:08.240 --> 02:31:10.240]  вот на что.
[02:31:10.240 --> 02:31:12.240]  Давайте рассмотрим каждое конкретное.
[02:31:12.240 --> 02:31:14.240]  Ну, давайте так.
[02:31:14.240 --> 02:31:16.240]  То есть, мы воображаем ранг вести...
[02:31:16.240 --> 02:31:18.240]  Да. Давайте, да. У каждой вершины,
[02:31:18.240 --> 02:31:20.240]  когда мы строим потенциально дерево,
[02:31:20.240 --> 02:31:22.240]  у каждой вершины есть ранг.
[02:31:22.240 --> 02:31:24.240]  Ну, ранг, который был бы,
[02:31:24.240 --> 02:31:26.240]  если бы сжатия путей не было. Согласны?
[02:31:26.240 --> 02:31:28.240]  Ну, заметим, что в корнях дерева
[02:31:28.240 --> 02:31:30.240]  он, конечно, периодически увеличивается,
[02:31:30.240 --> 02:31:32.240]  но если вершина перестала быть корнем,
[02:31:32.240 --> 02:31:34.240]  то этот ранг остался фиксированным
[02:31:34.240 --> 02:31:36.240]  раз и навсегда.
[02:31:36.240 --> 02:31:38.240]  Тогда что мы делаем?
[02:31:38.240 --> 02:31:40.240]  Тогда
[02:31:40.240 --> 02:31:42.240]  на каждом сжатии,
[02:31:42.240 --> 02:31:44.240]  когда мы вызываем какое-то вот это сжатие
[02:31:44.240 --> 02:31:46.240]  путей от вершины,
[02:31:46.240 --> 02:31:48.240]  то что у нас
[02:31:48.240 --> 02:31:50.240]  действительно происходит?
[02:31:52.240 --> 02:31:54.240]  Вот. Ну, нот происходит,
[02:31:54.240 --> 02:31:56.240]  у нас следующее.
[02:31:56.240 --> 02:31:58.240]  Ну, вот. То есть,
[02:31:58.240 --> 02:32:00.240]  ну, заметим, что
[02:32:00.240 --> 02:32:02.240]  нот... То есть, мы замечаем,
[02:32:02.240 --> 02:32:04.240]  что у каждой вершины
[02:32:04.240 --> 02:32:06.240]  увеличивая нот.
[02:32:06.240 --> 02:32:08.240]  То есть, когда мы проходимся по либу, да,
[02:32:08.240 --> 02:32:10.240]  то есть, как бы ранг,
[02:32:10.240 --> 02:32:12.240]  ранг увеличивается у вершины.
[02:32:14.240 --> 02:32:16.240]  Вот.
[02:32:16.240 --> 02:32:18.240]  Ну, а теперь нот...
[02:32:18.240 --> 02:32:20.240]  Ну, возникает такой естественный вопрос.
[02:32:20.240 --> 02:32:22.240]  Соответственно, нот...
[02:32:22.240 --> 02:32:24.240]  То есть, нот на сколько?
[02:32:26.240 --> 02:32:28.240]  Вот.
[02:32:28.240 --> 02:32:30.240]  Значит, что тут тогда надо сделать?
[02:32:30.240 --> 02:32:32.240]  Что тут тогда надо сделать?
[02:32:34.240 --> 02:32:36.240]  Вот. Ну, на самом деле, нам...
[02:32:36.240 --> 02:32:38.240]  Нас будет интересно, конечно, не только то, что ранг
[02:32:38.240 --> 02:32:40.240]  увеличивается, нас будет интересовать,
[02:32:40.240 --> 02:32:42.240]  а насколько ранг увеличивается.
[02:32:42.240 --> 02:32:44.240]  А именно. То есть, вот,
[02:32:44.240 --> 02:32:46.240]  допустим, у нас есть ребро из вершины
[02:32:46.240 --> 02:32:48.240]  х в вершину,
[02:32:48.240 --> 02:32:50.240]  так сказать, пр от х, да?
[02:32:52.240 --> 02:32:54.240]  Тогда мы вот этому ребру...
[02:32:54.240 --> 02:32:56.240]  Тогда вот есть
[02:32:56.240 --> 02:32:58.240]  ребро е и, так скажем,
[02:32:58.240 --> 02:33:00.240]  ранг ребра
[02:33:00.240 --> 02:33:02.240]  равен к чему? Он будет равен
[02:33:02.240 --> 02:33:04.240]  просто разности
[02:33:04.240 --> 02:33:06.240]  с з.
[02:33:08.240 --> 02:33:10.240]  Да,
[02:33:10.240 --> 02:33:12.240]  с з я беру
[02:33:12.240 --> 02:33:14.240]  в истинном ребре.
[02:33:14.240 --> 02:33:16.240]  То есть, помните, у нас есть два дерева.
[02:33:16.240 --> 02:33:18.240]  Знаете, вот, кстати, в этом месте
[02:33:18.240 --> 02:33:20.240]  вводится два, то есть, официальное понятие.
[02:33:20.240 --> 02:33:22.240]  Есть реальное дерево, да?
[02:33:22.240 --> 02:33:24.240]  То есть, если мы честно объединяли и ничего не сжимали,
[02:33:24.240 --> 02:33:26.240]  было бы какое-то одно дерево, да?
[02:33:26.240 --> 02:33:28.240]  А есть виртуальное дерево, которое у нас происходит,
[02:33:28.240 --> 02:33:30.240]  когда мы делаем жатие
[02:33:30.240 --> 02:33:32.240]  путей, да?
[02:33:32.240 --> 02:33:34.240]  Поэтому с з я беру
[02:33:34.240 --> 02:33:36.240]  по реальному размеру.
[02:33:36.240 --> 02:33:38.240]  Так, понятно, о чем я говорю?
[02:33:40.240 --> 02:33:42.240]  Так вот, я беру вот такую разность
[02:33:42.240 --> 02:33:44.240]  с з,
[02:33:44.240 --> 02:33:46.240]  но не просто разность,
[02:33:46.240 --> 02:33:48.240]  а двоичный логарифм.
[02:33:48.240 --> 02:33:50.240]  И не просто двоичный логарифм,
[02:33:52.240 --> 02:33:54.240]  а двоичный логарифм,
[02:33:54.240 --> 02:33:56.240]  округленный вниз.
[02:34:00.240 --> 02:34:02.240]  Ну, заметим, что...
[02:34:02.240 --> 02:34:04.240]  Так, ну, тут, конечно, скобчику нам поставить.
[02:34:04.240 --> 02:34:06.240]  Так, ну, мы понимаем, что
[02:34:06.240 --> 02:34:08.240]  ранг, он как минимум ноль,
[02:34:08.240 --> 02:34:10.240]  а максимум логан.
[02:34:10.240 --> 02:34:12.240]  Вот.
[02:34:12.240 --> 02:34:14.240]  А теперь давайте посмотрим,
[02:34:14.240 --> 02:34:16.240]  когда у нас идет такое
[02:34:16.240 --> 02:34:18.240]  сжатие путей, то есть, сжатие вот всех
[02:34:18.240 --> 02:34:20.240]  этих ребер.
[02:34:20.240 --> 02:34:22.240]  Ну, заметим, что что у нас вообще может
[02:34:22.240 --> 02:34:24.240]  происходить.
[02:34:24.240 --> 02:34:26.240]  На самом деле,
[02:34:26.240 --> 02:34:28.240]  то есть, ну, у нас есть, как бы, если рассмотреть
[02:34:28.240 --> 02:34:30.240]  тут это как последовательность рангов, да?
[02:34:30.240 --> 02:34:32.240]  То есть, какие тут ранги бывают? Они бывают рандомные.
[02:34:32.240 --> 02:34:34.240]  Ноль, два, там один, два, там
[02:34:34.240 --> 02:34:36.240]  какой-нибудь там три, там еще
[02:34:36.240 --> 02:34:38.240]  какой-нибудь там один,
[02:34:38.240 --> 02:34:40.240]  там два. Так вот, идея такая.
[02:34:40.240 --> 02:34:42.240]  Давайте разделим
[02:34:42.240 --> 02:34:44.240]  эти ребра на два множества.
[02:34:44.240 --> 02:34:46.240]  Те, у которых вот соответствующая
[02:34:46.240 --> 02:34:48.240]  чиселка встречается в последний раз,
[02:34:48.240 --> 02:34:50.240]  и все остальные.
[02:34:52.240 --> 02:34:54.240]  Ну, заметим, что тех ребер,
[02:34:54.240 --> 02:34:56.240]  где вот чиселка встречается в последний раз,
[02:34:56.240 --> 02:34:58.240]  это их логарифм, правда?
[02:34:58.240 --> 02:35:00.240]  Что значит последний раз?
[02:35:00.240 --> 02:35:02.240]  Ну, рассмотрим,
[02:35:02.240 --> 02:35:04.240]  ну, когда мы сжимаем, делаем сжатие
[02:35:04.240 --> 02:35:06.240]  путей, мы
[02:35:06.240 --> 02:35:08.240]  рассмотрим, вот рассмотрим ребра,
[02:35:08.240 --> 02:35:10.240]  рассмотрим последовательность рангов, возникающего на этих
[02:35:10.240 --> 02:35:12.240]  ребрах, да?
[02:35:12.240 --> 02:35:14.240]  Эти, ну, ранги бывают от нуля до лога.
[02:35:14.240 --> 02:35:16.240]  В общем, все числа целые. И каждое число
[02:35:16.240 --> 02:35:18.240]  сколько-то раз...
[02:35:18.240 --> 02:35:20.240]  Но каждое число где-то встречается в последний раз.
[02:35:20.240 --> 02:35:22.240]  Если встречается, конечно.
[02:35:22.240 --> 02:35:24.240]  Так вот. Вот давайте рассмотрим
[02:35:24.240 --> 02:35:26.240]  ребра, которые встречаются в последний раз.
[02:35:26.240 --> 02:35:28.240]  Их логарифм.
[02:35:30.240 --> 02:35:32.240]  Логично, да?
[02:35:32.240 --> 02:35:34.240]  Есть остальные ребра, их не обязательно
[02:35:34.240 --> 02:35:36.240]  логарифм. Но здесь возникает
[02:35:36.240 --> 02:35:38.240]  другой важный момент.
[02:35:38.240 --> 02:35:40.240]  Теперь замечаем, что у каждой вот этой вот
[02:35:40.240 --> 02:35:42.240]  вершины, если вот это ребро,
[02:35:42.240 --> 02:35:44.240]  это чиселка не последняя, то в результате
[02:35:44.240 --> 02:35:46.240]  сжатия пути у этой вершины
[02:35:46.240 --> 02:35:48.240]  ранг ребра увеличится.
[02:35:48.240 --> 02:35:50.240]  Логично, да?
[02:35:54.240 --> 02:35:56.240]  Логично, да?
[02:35:56.240 --> 02:35:58.240]  Да.
[02:35:58.240 --> 02:36:00.240]  Ну, теперь смотрите.
[02:36:00.240 --> 02:36:02.240]  Вот предположим, что у вас тут
[02:36:02.240 --> 02:36:04.240]  ранг ребра, допустим, к. То есть
[02:36:04.240 --> 02:36:06.240]  это означает, что у вас тут
[02:36:06.240 --> 02:36:08.240]  сж увеличилась, то есть
[02:36:08.240 --> 02:36:10.240]  хотя бы на 2 в степени k, правда?
[02:36:10.240 --> 02:36:12.240]  Понимаете, да?
[02:36:12.240 --> 02:36:14.240]  Ну, там где-то 2 в степени k, да 2 в степени k
[02:36:14.240 --> 02:36:16.240]  плюс 1 где-то.
[02:36:16.240 --> 02:36:18.240]  А если у вас где-то там потом было еще
[02:36:18.240 --> 02:36:20.240]  ребро, где тоже плюс 2 в степени k,
[02:36:20.240 --> 02:36:22.240]  то в результате сжатия
[02:36:22.240 --> 02:36:24.240]  пути отсюда-сюда ССС будет
[02:36:24.240 --> 02:36:26.240]  увеличиваться хотя бы на 2 в степени k
[02:36:26.240 --> 02:36:28.240]  плюс 1.
[02:36:28.240 --> 02:36:30.240]  И тогда получается, что ранг этого ребра
[02:36:30.240 --> 02:36:32.240]  увеличивается.
[02:36:34.240 --> 02:36:36.240]  Понимаете, да?
[02:36:40.240 --> 02:36:42.240]  Значит, еще раз.
[02:36:42.240 --> 02:36:44.240]  Значит, смотрите, у каждой вершины есть
[02:36:44.240 --> 02:36:46.240]  ребро виртуальное.
[02:36:46.240 --> 02:36:48.240]  У этого ребра есть ранг.
[02:36:48.240 --> 02:36:50.240]  Периодически это ребро меняется
[02:36:50.240 --> 02:36:52.240]  в сжатии путей.
[02:36:52.240 --> 02:36:54.240]  И оно увеличивается.
[02:36:54.240 --> 02:36:56.240]  То есть периодически меняется, но периодически
[02:36:56.240 --> 02:36:58.240]  нет. Ребро меняется, ранг иногда
[02:36:58.240 --> 02:37:00.240]  остается прежним, иногда увеличивается.
[02:37:02.240 --> 02:37:04.240]  У нас такая ситуация.
[02:37:04.240 --> 02:37:06.240]  Значит, если
[02:37:06.240 --> 02:37:08.240]  мы рассмотрим какое-то конкретное
[02:37:08.240 --> 02:37:10.240]  сжатие какого-то пути.
[02:37:10.240 --> 02:37:12.240]  Если выяснилось, что у вас есть
[02:37:12.240 --> 02:37:14.240]  всего какого-то ранга и выше у вас тоже
[02:37:14.240 --> 02:37:16.240]  есть ребро такого ранга,
[02:37:16.240 --> 02:37:18.240]  то тогда я утверждаю, что ранг этого ребра
[02:37:18.240 --> 02:37:20.240]  в результате сжатия увеличится.
[02:37:24.240 --> 02:37:26.240]  Сейчас ранг ребра это что?
[02:37:26.240 --> 02:37:28.240]  Ранг ребра, вот
[02:37:28.240 --> 02:37:30.240]  определение, логарифом
[02:37:30.240 --> 02:37:32.240]  разности сайзов между родителем и
[02:37:32.240 --> 02:37:34.240]  мной.
[02:37:36.240 --> 02:37:38.240]  Что такое ранг нижнего ребра?
[02:37:38.240 --> 02:37:40.240]  У каждой вершины есть ребро
[02:37:40.240 --> 02:37:42.240]  торчащий из него.
[02:37:42.240 --> 02:37:44.240]  Оно одно определяется этой вершиной.
[02:37:44.240 --> 02:37:46.240]  Поэтому ведущие вы меня
[02:37:46.240 --> 02:37:48.240]  рассматривать нельзя, потому что в одну вершину
[02:37:48.240 --> 02:37:50.240]  может вести много ребр.
[02:37:50.240 --> 02:37:52.240]  А мы ранг считаем
[02:37:52.240 --> 02:37:54.240]  у виртуальных ребр тоже?
[02:37:54.240 --> 02:37:56.240]  Нет, я больше скажу.
[02:37:56.240 --> 02:37:58.240]  Ранг мы считаем именно у виртуальных ребр.
[02:37:58.240 --> 02:38:00.240]  То есть ранг это состояние
[02:38:00.240 --> 02:38:02.240]  текущего дерева с текущими
[02:38:02.240 --> 02:38:04.240]  ребрами? Да, с текущими ребрами.
[02:38:04.240 --> 02:38:06.240]  Хотя СЗшки берутся по...
[02:38:06.240 --> 02:38:08.240]  они фиксированы.
[02:38:08.240 --> 02:38:10.240]  Фиксированы в том плане берутся по реалии.
[02:38:10.240 --> 02:38:12.240]  То есть у корня они не фиксированы,
[02:38:12.240 --> 02:38:14.240]  потому что корню могут кто-то подвешивать.
[02:38:14.240 --> 02:38:16.240]  Но как только вершина перестала быть корнем,
[02:38:16.240 --> 02:38:18.240]  это значит, что СЗшка в ней
[02:38:18.240 --> 02:38:20.240]  всегда остановилась.
[02:38:20.240 --> 02:38:22.240]  Это приводит к тому, что при некоторых подвешиваниях
[02:38:22.240 --> 02:38:24.240]  ранг ребер
[02:38:24.240 --> 02:38:26.240]  ведущих в корень мог увеличиться
[02:38:26.240 --> 02:38:28.240]  автоматически.
[02:38:30.240 --> 02:38:32.240]  Нет, не надо.
[02:38:32.240 --> 02:38:34.240]  Нет, это не надо.
[02:38:34.240 --> 02:38:36.240]  Потому что я хочу доказать,
[02:38:36.240 --> 02:38:38.240]  я хочу продемонстрировать следующую идею.
[02:38:38.240 --> 02:38:40.240]  Что у вас каждое сжатие пути
[02:38:40.240 --> 02:38:42.240]  работает, во-первых,
[02:38:42.240 --> 02:38:44.240]  за от логорифам
[02:38:46.240 --> 02:38:48.240]  плюс количество
[02:38:48.240 --> 02:38:50.240]  увеличений рангов.
[02:38:50.240 --> 02:38:52.240]  Можно так оценить.
[02:38:52.240 --> 02:38:54.240]  Но теперь заметим, что
[02:38:54.240 --> 02:38:56.240]  суммарное количество увеличений
[02:38:56.240 --> 02:38:58.240]  рангов у всех ребер, очевидно,
[02:38:58.240 --> 02:39:00.240]  не более чем n логн.
[02:39:02.240 --> 02:39:04.240]  Ребер у нас n, в смысле n-1.
[02:39:04.240 --> 02:39:06.240]  Он увеличивается не более, чем логн раз.
[02:39:08.240 --> 02:39:10.240]  Ну все.
[02:39:10.240 --> 02:39:12.240]  Получается, что
[02:39:12.240 --> 02:39:14.240]  суммарно мы все операции
[02:39:14.240 --> 02:39:16.240]  сделали не более, чем за q
[02:39:16.240 --> 02:39:18.240]  плюс n логн,
[02:39:18.240 --> 02:39:20.240]  где q количество вызовов сжатия пути.
[02:39:20.240 --> 02:39:22.240]  Ну и подвешивания.
[02:39:24.240 --> 02:39:26.240]  Почему же за логн работает?
[02:39:26.240 --> 02:39:28.240]  Ну не совсем.
[02:39:28.240 --> 02:39:30.240]  Сжатие работает
[02:39:30.240 --> 02:39:32.240]  за...
[02:39:32.240 --> 02:39:34.240]  Рассмотрим, ребра бывают
[02:39:34.240 --> 02:39:36.240]  ребра с последним таким рангом
[02:39:36.240 --> 02:39:38.240]  и ребра с не последним
[02:39:38.240 --> 02:39:40.240]  таким рангом.
[02:39:40.240 --> 02:39:42.240]  Каким-то.
[02:39:42.240 --> 02:39:44.240]  То есть для каждого числа
[02:39:44.240 --> 02:39:46.240]  существует ребро,
[02:39:46.240 --> 02:39:48.240]  последнее ребро с таким рангом.
[02:39:48.240 --> 02:39:50.240]  Так вот.
[02:39:50.240 --> 02:39:52.240]  Последних ребер их логорифом,
[02:39:52.240 --> 02:39:54.240]  потому что у нас логорифом рангов.
[02:39:54.240 --> 02:39:56.240]  Поэтому мы записываем,
[02:39:56.240 --> 02:39:58.240]  что мы потратили на них
[02:39:58.240 --> 02:40:00.240]  логорифом времени.
[02:40:00.240 --> 02:40:02.240]  На остальные мы тратим
[02:40:02.240 --> 02:40:04.240]  количество...
[02:40:04.240 --> 02:40:06.240]  То есть некоторое количество
[02:40:06.240 --> 02:40:08.240]  увеличений рангов.
[02:40:08.240 --> 02:40:10.240]  Потому что у каждого из оставшихся ребер
[02:40:10.240 --> 02:40:12.240]  ранг увеличивается.
[02:40:12.240 --> 02:40:14.240]  Ну все.
[02:40:14.240 --> 02:40:16.240]  Тогда получается суммарно q операций,
[02:40:16.240 --> 02:40:18.240]  включая сжатие пути,
[02:40:18.240 --> 02:40:20.240]  это будет работать за q логн
[02:40:20.240 --> 02:40:22.240]  плюс количество увеличений рангов.
[02:40:22.240 --> 02:40:24.240]  Но так как у нас
[02:40:24.240 --> 02:40:26.240]  увеличение рангов суммарно не более,
[02:40:26.240 --> 02:40:28.240]  чем n логн, то получается,
[02:40:28.240 --> 02:40:30.240]  что амортизированная асимптотика
[02:40:30.240 --> 02:40:32.240]  что-то типа лога.
[02:40:32.240 --> 02:40:34.240]  Вот. Понятно?
[02:40:34.240 --> 02:40:36.240]  Вот.
[02:40:36.240 --> 02:40:38.240]  Вот так.
[02:40:38.240 --> 02:40:40.240]  Может быть не совсем аккуратно, но нормально.
[02:40:40.240 --> 02:40:42.240]  Вот.
[02:40:42.240 --> 02:40:44.240]  Так что получается, что само по себе
[02:40:44.240 --> 02:40:46.240]  сжатие путей уже дает вам логоризмическую
[02:40:46.240 --> 02:40:48.240]  асимптотику. Это нормально.
[02:40:48.240 --> 02:40:50.240]  Чем больше операции, тем ближе
[02:40:50.240 --> 02:40:52.240]  эта асимптотика будет к единице.
[02:40:52.240 --> 02:40:54.240]  Потому что можно делать более аккуратные
[02:40:54.240 --> 02:40:56.240]  доказательства и сказать, что
[02:40:56.240 --> 02:40:58.240]  учетная стоимость будет не более, чем
[02:40:58.240 --> 02:41:00.240]  логорифом, скажем, n квадрат
[02:41:00.240 --> 02:41:02.240]  поделить на q.
[02:41:04.240 --> 02:41:06.240]  Вот какая-то такая фишка будет.
[02:41:06.240 --> 02:41:08.240]  Вот.
[02:41:08.240 --> 02:41:10.240]  Но там две оценки.
[02:41:10.240 --> 02:41:12.240]  С одной стороны такая, с другой стороны такая.
[02:41:12.240 --> 02:41:14.240]  Поэтому если q стремится к n квадрату,
[02:41:14.240 --> 02:41:16.240]  то у вас эта учетная стоимость стремится к единице.
[02:41:16.240 --> 02:41:18.240]  Вот.
[02:41:18.240 --> 02:41:20.240]  Но нас устроит логориф.
[02:41:20.240 --> 02:41:22.240]  Но оказывается, есть
[02:41:22.240 --> 02:41:24.240]  более серьезная
[02:41:24.240 --> 02:41:26.240]  асимптотика.
[02:41:26.240 --> 02:41:28.240]  Так, ну-ка давайте сейчас попробуйте нод.
[02:41:28.240 --> 02:41:30.240]  Так.
[02:41:30.240 --> 02:41:32.240]  Ну а теперь уровень, так сказать, ну не хар, конечно,
[02:41:32.240 --> 02:41:34.240]  но тоже приличный.
[02:41:34.240 --> 02:41:36.240]  А теперь представьте себе, что мы иранговую
[02:41:36.240 --> 02:41:38.240]  евристику вводим.
[02:41:38.240 --> 02:41:40.240]  И евристику сжатия
[02:41:40.240 --> 02:41:42.240]  путей.
[02:41:42.240 --> 02:41:44.240]  Тогда мы сейчас обойдемся
[02:41:44.240 --> 02:41:46.240]  простым утверждением.
[02:41:46.240 --> 02:41:48.240]  То есть я утверждаю, что, по крайней мере,
[02:41:48.240 --> 02:41:50.240]  амортизировано.
[02:41:50.240 --> 02:41:52.240]  У нас каждая операция
[02:41:52.240 --> 02:41:54.240]  будет работать за o от log
[02:41:54.240 --> 02:41:56.240]  звездочка.
[02:41:56.240 --> 02:41:58.240]  Да, до обратной функции
[02:41:58.240 --> 02:42:00.240]  керманом, к сожалению, не наживем.
[02:42:00.240 --> 02:42:02.240]  А вот лог звездочку
[02:42:02.240 --> 02:42:04.240]  все-таки попробуем.
[02:42:04.240 --> 02:42:06.240]  Да, лог звездочка, да, та самая,
[02:42:06.240 --> 02:42:08.240]  что количество взятия логориф.
[02:42:10.240 --> 02:42:12.240]  Ну, за счет чего мы будем
[02:42:12.240 --> 02:42:14.240]  работать? Мы будем
[02:42:14.240 --> 02:42:16.240]  работать за счет того, что
[02:42:16.240 --> 02:42:18.240]  как бы мы помним, да, что
[02:42:18.240 --> 02:42:20.240]  в ранговой евристики, да, напомним
[02:42:20.240 --> 02:42:22.240]  того, что если у вас размер,
[02:42:22.240 --> 02:42:24.240]  то есть ранг какой-то
[02:42:24.240 --> 02:42:26.240]  вершины, как это,
[02:42:26.240 --> 02:42:28.240]  ну, ранг у нас как называется, давайте
[02:42:28.240 --> 02:42:30.240]  h от вершины
[02:42:30.240 --> 02:42:32.240]  равен какому-то числу
[02:42:32.240 --> 02:42:34.240]  x, то из этого следует,
[02:42:34.240 --> 02:42:36.240]  что cz от v
[02:42:36.240 --> 02:42:38.240]  больше либо равен
[02:42:38.240 --> 02:42:40.240]  2 в степени x.
[02:42:40.240 --> 02:42:42.240]  В реальном
[02:42:42.240 --> 02:42:44.240]  исчислении это продолжает быть
[02:42:44.240 --> 02:42:46.240]  верно, правда?
[02:42:46.240 --> 02:42:48.240]  Но из этого можно сделать
[02:42:48.240 --> 02:42:50.240]  очень приятный вывод.
[02:42:50.240 --> 02:42:52.240]  Какой? Из этого
[02:42:52.240 --> 02:42:54.240]  можно сделать вывод, что
[02:42:54.240 --> 02:42:56.240]  количество вершин
[02:42:56.240 --> 02:42:58.240]  таких, что h от v
[02:42:58.240 --> 02:43:00.240]  равно x, их
[02:43:00.240 --> 02:43:02.240]  меньше либо равно, чем n поделить
[02:43:02.240 --> 02:43:04.240]  на 2 в степени x.
[02:43:06.240 --> 02:43:08.240]  Так, если h от v
[02:43:08.240 --> 02:43:10.240]  равно x,
[02:43:10.240 --> 02:43:12.240]  то размер этого
[02:43:12.240 --> 02:43:14.240]  реального поделим
[02:43:14.240 --> 02:43:16.240]  2 в степени x, хотя бы.
[02:43:16.240 --> 02:43:18.240]  Ну, также по индукции доказываем,
[02:43:18.240 --> 02:43:20.240]  мы это уже делали, да? Но это
[02:43:20.240 --> 02:43:22.240]  реального дерева, конечно, без сжатия пути.
[02:43:22.240 --> 02:43:24.240]  Но заметим, что у каждой такой вершины
[02:43:24.240 --> 02:43:26.240]  под дерево свое, это под дерево состоит из
[02:43:26.240 --> 02:43:28.240]  вершин меньшего ранга, да?
[02:43:28.240 --> 02:43:30.240]  Причем своих.
[02:43:30.240 --> 02:43:32.240]  Из этого следует маленькая приятная вещь,
[02:43:32.240 --> 02:43:34.240]  что количество вершин каждого ранга
[02:43:34.240 --> 02:43:36.240]  не более, чем n поделить на 2 в степени
[02:43:36.240 --> 02:43:38.240]  этот ранг.
[02:43:38.240 --> 02:43:40.240]  И мы сейчас будем этим
[02:43:40.240 --> 02:43:42.240]  пользоваться.
[02:43:42.240 --> 02:43:44.240]  Потому что
[02:43:46.240 --> 02:43:48.240]  смотрите, вот у нас есть ребро.
[02:43:48.240 --> 02:43:50.240]  Давайте представим себе, что у нас опять
[02:43:50.240 --> 02:43:52.240]  есть виртуальное вот это ребро,
[02:43:52.240 --> 02:43:54.240]  которое ведет нас из вершины v в вершину
[02:43:54.240 --> 02:43:56.240]  p от v.
[02:43:56.240 --> 02:43:58.240]  Понятно, да?
[02:43:58.240 --> 02:44:00.240]  И теперь ситуация такая.
[02:44:02.240 --> 02:44:04.240]  Я буду говорить, что пусть у меня
[02:44:04.240 --> 02:44:06.240]  ребро e тяжелое,
[02:44:10.240 --> 02:44:12.240]  если
[02:44:12.240 --> 02:44:14.240]  cz от
[02:44:14.240 --> 02:44:16.240]  p от v
[02:44:16.240 --> 02:44:18.240]  больше либо равно,
[02:44:18.240 --> 02:44:20.240]  чем
[02:44:20.240 --> 02:44:22.240]  ну, например,
[02:44:24.240 --> 02:44:26.240]  1.9
[02:44:26.240 --> 02:44:28.240]  в степени cz от v.
[02:44:30.240 --> 02:44:32.240]  Ну, вы сейчас увидите, почему
[02:44:32.240 --> 02:44:34.240]  1.9, а не 2.
[02:44:34.240 --> 02:44:36.240]  Вот.
[02:44:38.240 --> 02:44:40.240]  И легко иначе.
[02:44:40.240 --> 02:44:42.240]  Тогда, смотрите,
[02:44:42.240 --> 02:44:44.240]  когда вы делаете сжатие
[02:44:44.240 --> 02:44:46.240]  путей, у вас
[02:44:46.240 --> 02:44:48.240]  как бы cz от pr
[02:44:48.240 --> 02:44:50.240]  всегда увеличивается, ну, кроме последнего ребра,
[02:44:50.240 --> 02:44:52.240]  правда?
[02:44:52.240 --> 02:44:54.240]  Вот.
[02:44:54.240 --> 02:44:56.240]  Но на самом деле теперь вас интересует вот что.
[02:44:56.240 --> 02:44:58.240]  Когда вы рассматриваете путь,
[02:44:58.240 --> 02:45:00.240]  рассмотрим путь.
[02:45:00.240 --> 02:45:02.240]  Так, ладно.
[02:45:02.240 --> 02:45:04.240]  Рассмотрим путь, путь, путь, путь.
[02:45:04.240 --> 02:45:06.240]  Тогда замечаем, что
[02:45:06.240 --> 02:45:08.240]  ладно, это ребро не меняется,
[02:45:08.240 --> 02:45:10.240]  а у этих всех cz от родителей явно
[02:45:10.240 --> 02:45:12.240]  увеличивается, правда?
[02:45:12.240 --> 02:45:14.240]  Ну, смотрите, некоторые из этих ребер
[02:45:14.240 --> 02:45:16.240]  тяжелые,
[02:45:16.240 --> 02:45:18.240]  тяжелые,
[02:45:18.240 --> 02:45:20.240]  тяжелые. Но сколько,
[02:45:20.240 --> 02:45:22.240]  ну, как вы думаете, сколько у нас тяжелых ребер?
[02:45:24.240 --> 02:45:26.240]  Вот ваша ставка. Сколько у нас тяжелых ребер?
[02:45:28.240 --> 02:45:30.240]  Ну, типа лог-свездочка. Конечно, лог-свездочка,
[02:45:30.240 --> 02:45:32.240]  потому что каждый раз, когда вы скачете,
[02:45:32.240 --> 02:45:34.240]  у вас тут x превращается в
[02:45:34.240 --> 02:45:36.240]  2 степени x, да?
[02:45:36.240 --> 02:45:38.240]  Ну, понятно. То есть тяжелых, их всего
[02:45:38.240 --> 02:45:40.240]  там, лог-свездочка.
[02:45:42.240 --> 02:45:44.240]  Сколько легких?
[02:45:44.240 --> 02:45:46.240]  Лог и 100 звездочек.
[02:45:46.240 --> 02:45:48.240]  Ну, кстати, да.
[02:45:48.240 --> 02:45:50.240]  Но это нам не важно.
[02:45:50.240 --> 02:45:52.240]  Важно другое,
[02:45:52.240 --> 02:45:54.240]  что у каждого легкого ребра
[02:45:54.240 --> 02:45:56.240]  cz родителя увеличивается,
[02:45:56.240 --> 02:45:58.240]  правда?
[02:45:58.240 --> 02:46:00.240]  Но заметим, что у каждого
[02:46:00.240 --> 02:46:02.240]  ребра, торчащегось с какой-то
[02:46:02.240 --> 02:46:04.240]  вершины, эта cz может увеличиваться
[02:46:04.240 --> 02:46:06.240]  ограниченное число раз.
[02:46:06.240 --> 02:46:08.240]  То есть если тут cz равно x,
[02:46:08.240 --> 02:46:10.240]  да,
[02:46:10.240 --> 02:46:12.240]  то на самом деле
[02:46:12.240 --> 02:46:14.240]  увеличиваться это легкое ребро,
[02:46:14.240 --> 02:46:16.240]  пока оно легкое, оно может
[02:46:16.240 --> 02:46:18.240]  сколько раз?
[02:46:18.240 --> 02:46:20.240]  Оно может увеличиваться не более, чем
[02:46:20.240 --> 02:46:22.240]  1.9 в степени x раз,
[02:46:22.240 --> 02:46:24.240]  правда? А теперь, сколько может быть
[02:46:24.240 --> 02:46:26.240]  суммарно увеличений?
[02:46:28.240 --> 02:46:30.240]  Ну, суммарно увеличений может быть,
[02:46:30.240 --> 02:46:32.240]  то есть сумма по всем
[02:46:32.240 --> 02:46:34.240]  вершинам получается 1.9
[02:46:34.240 --> 02:46:36.240]  в степени
[02:46:36.240 --> 02:46:38.240]  там
[02:46:38.240 --> 02:46:40.240]  собственно
[02:46:40.240 --> 02:46:42.240]  ранг от x.
[02:46:42.240 --> 02:46:44.240]  Увеличение же может быть все-таки...
[02:46:44.240 --> 02:46:46.240]  Чего?
[02:46:46.240 --> 02:46:48.240]  Мы же каждый раз, когда
[02:46:48.240 --> 02:46:50.240]  увеличиваем предка,
[02:46:50.240 --> 02:46:52.240]  размер предка увеличивается
[02:46:52.240 --> 02:46:54.240]  хотя бы в два раза, нет?
[02:46:54.240 --> 02:46:56.240]  Нет.
[02:46:56.240 --> 02:46:58.240]  А нет, нет, нет.
[02:46:58.240 --> 02:47:00.240]  Не обязательно, вы же можете меньше ранг подвешивать,
[02:47:00.240 --> 02:47:02.240]  сильно меньше ранг большему,
[02:47:02.240 --> 02:47:04.240]  одну вершинку можно...
[02:47:04.240 --> 02:47:06.240]  Так, ой, так, набрал ли я?
[02:47:08.240 --> 02:47:10.240]  Так, нет, подождите,
[02:47:10.240 --> 02:47:12.240]  у меня тут сумма 1.9
[02:47:12.240 --> 02:47:14.240]  на, так сказать...
[02:47:14.240 --> 02:47:16.240]  Cz.
[02:47:16.240 --> 02:47:18.240]  А, нет,
[02:47:18.240 --> 02:47:20.240]  подождите,
[02:47:20.240 --> 02:47:22.240]  зачем нам Cz?
[02:47:22.240 --> 02:47:24.240]  Почему бы нам тут h не сделать, а?
[02:47:24.240 --> 02:47:26.240]  А с правой что?
[02:47:26.240 --> 02:47:28.240]  Тоже h.
[02:47:28.240 --> 02:47:30.240]  Подстанет ли от этого хуже?
[02:47:30.240 --> 02:47:32.240]  Мы сейчас будем пользоваться тем,
[02:47:32.240 --> 02:47:34.240]  что у нас ранг строго увеличивается.
[02:47:38.240 --> 02:47:40.240]  Поэтому получается,
[02:47:40.240 --> 02:47:42.240]  у каждой вершины
[02:47:44.240 --> 02:47:46.240]  количество операций,
[02:47:46.240 --> 02:47:48.240]  когда у нас будет сжиматься у нее легкое ребро,
[02:47:48.240 --> 02:47:50.240]  это будет происходить не более, чем
[02:47:50.240 --> 02:47:52.240]  1.9 в степени ее ранг раз.
[02:47:54.240 --> 02:47:56.240]  Почему это?
[02:47:56.240 --> 02:47:58.240]  Как только у нее ребро станет вести в ранг
[02:47:58.240 --> 02:48:00.240]  вот такой или выше,
[02:48:02.240 --> 02:48:04.240]  оно станет тяжелым.
[02:48:04.240 --> 02:48:06.240]  То есть он продолжит
[02:48:06.240 --> 02:48:08.240]  увеличиваться, но мы его просто уже не будем
[02:48:08.240 --> 02:48:10.240]  учитывать. То есть оно перестанет быть легким.
[02:48:10.240 --> 02:48:12.240]  Нам интересует,
[02:48:12.240 --> 02:48:14.240]  сколько раз у легких ребер
[02:48:14.240 --> 02:48:16.240]  увеличивается ранг конца.
[02:48:18.240 --> 02:48:20.240]  Именно у легких.
[02:48:20.240 --> 02:48:22.240]  Что?
[02:48:22.240 --> 02:48:24.240]  Почему в квадрат?
[02:48:24.240 --> 02:48:26.240]  Почему в квадрат?
[02:48:28.240 --> 02:48:30.240]  Нет, ну на самом деле,
[02:48:30.240 --> 02:48:32.240]  смотрите, на самом деле
[02:48:32.240 --> 02:48:34.240]  это не превосходит,
[02:48:34.240 --> 02:48:36.240]  то есть это что такое?
[02:48:36.240 --> 02:48:38.240]  Это равно сумме по всем рангам,
[02:48:38.240 --> 02:48:40.240]  то есть от нуля до вот этого h,
[02:48:42.240 --> 02:48:44.240]  чего? 1.9 на h
[02:48:44.240 --> 02:48:46.240]  на количество таких
[02:48:46.240 --> 02:48:48.240]  вершин,
[02:48:48.240 --> 02:48:50.240]  что h
[02:48:50.240 --> 02:48:52.240]  от v равно h.
[02:48:52.240 --> 02:48:54.240]  Логично, да?
[02:49:06.240 --> 02:49:08.240]  А теперь мы неожиданно вспомним,
[02:49:08.240 --> 02:49:10.240]  что у нас вообще этих вершин мало.
[02:49:10.240 --> 02:49:12.240]  Два в степени.
[02:49:12.240 --> 02:49:14.240]  Поэтому получается, что сумма
[02:49:16.240 --> 02:49:18.240]  это 1 делит на 9
[02:49:18.240 --> 02:49:20.240]  в степень h, делить на 2
[02:49:20.240 --> 02:49:22.240]  в степень h, а и на n
[02:49:22.240 --> 02:49:24.240]  внушить.
[02:49:24.240 --> 02:49:26.240]  Ну что, поздравляю.
[02:49:26.240 --> 02:49:28.240]  Мы получаем геометрическую
[02:49:28.240 --> 02:49:30.240]  прогрессию, сходящуюся к константе.
[02:49:36.240 --> 02:49:38.240]  Всё. Ну, кстати, можно даже
[02:49:38.240 --> 02:49:40.240]  полторашку взять на самом деле, может быть
[02:49:40.240 --> 02:49:42.240]  даже константа будет более адекватной.
[02:49:42.240 --> 02:49:44.240]  Адекватной.
[02:49:46.240 --> 02:49:48.240]  Вот.
[02:49:48.240 --> 02:49:50.240]  Ну вот, собственно, и всё.
[02:49:52.240 --> 02:49:54.240]  Этому, получается, показали, что
[02:49:54.240 --> 02:49:56.240]  лёгкие ребра, они
[02:49:56.240 --> 02:49:58.240]  перевешиваются не более, чем
[02:49:58.240 --> 02:50:00.240]  столько раз.
[02:50:00.240 --> 02:50:02.240]  Да.
[02:50:02.240 --> 02:50:04.240]  А все остальные тяжёлые.
[02:50:04.240 --> 02:50:06.240]  То есть, получается, лёгкие ребра суммарно
[02:50:06.240 --> 02:50:08.240]  перевешиваются от n раз,
[02:50:08.240 --> 02:50:10.240]  а тяжёлых ребр на каждом шаге
[02:50:10.240 --> 02:50:12.240]  лог-звёздочка. Правда, с оговоркой,
[02:50:12.240 --> 02:50:14.240]  что лог-звёздочка получится
[02:50:14.240 --> 02:50:16.240]  логарифом берём не по основанию 2,
[02:50:16.240 --> 02:50:18.240]  а по основанию 1.9.
[02:50:22.240 --> 02:50:24.240]  Ну, оговорка в том, что
[02:50:24.240 --> 02:50:26.240]  сколько тут тяжёлых ребр?
[02:50:26.240 --> 02:50:28.240]  Смотрите, в определении
[02:50:28.240 --> 02:50:30.240]  лог-звёздочка мы логарифом каждый раз
[02:50:30.240 --> 02:50:32.240]  брали по основанию 2, да?
[02:50:32.240 --> 02:50:34.240]  А здесь надо, как бы, получать при таком
[02:50:34.240 --> 02:50:36.240]  доказательстве, надо брать по основанию 1.9.
[02:50:36.240 --> 02:50:38.240]  Так.
[02:50:38.240 --> 02:50:40.240]  Что мы сейчас вообще доказывали?
[02:50:40.240 --> 02:50:42.240]  Мы доказывали, если мы комбинируем эти
[02:50:42.240 --> 02:50:44.240]  левристики. Да. А где мы пользовались
[02:50:44.240 --> 02:50:46.240]  вообще рангами? А пользовались мы тем,
[02:50:46.240 --> 02:50:48.240]  чтобы утверждать, что каждый раз,
[02:50:48.240 --> 02:50:50.240]  когда вы ведёте, что у вас ребро
[02:50:50.240 --> 02:50:52.240]  идёт от вершины с каким-то рангом
[02:50:52.240 --> 02:50:54.240]  к вершине с строго большим рангом.
[02:50:56.240 --> 02:50:58.240]  Вот.
[02:50:58.240 --> 02:51:00.240]  То есть, только в этом?
[02:51:00.240 --> 02:51:02.240]  Нет, ну ещё с 55.
[02:51:02.240 --> 02:51:04.240]  А ещё пользовались...
[02:51:04.240 --> 02:51:06.240]  Но ещё мы этим пользовались,
[02:51:06.240 --> 02:51:08.240]  когда доказывали, что если у вершины
[02:51:08.240 --> 02:51:10.240]  есть какой-то ранг, то у неё очень много
[02:51:10.240 --> 02:51:12.240]  вершин в подделье.
[02:51:12.240 --> 02:51:14.240]  Потому что в общем случае это, конечно, не верно.
[02:51:14.240 --> 02:51:16.240]  Хорошо. Так. Ещё
[02:51:16.240 --> 02:51:18.240]  вопрос.
[02:51:18.240 --> 02:51:20.240]  Почему мы можем...
[02:51:20.240 --> 02:51:22.240]  Почему там такая сумма?
[02:51:22.240 --> 02:51:24.240]  Почему лёгкие ребра мы можем
[02:51:24.240 --> 02:51:26.240]  перевешивать такое количество раз?
[02:51:26.240 --> 02:51:28.240]  Ну, потому что каждый раз,
[02:51:28.240 --> 02:51:30.240]  когда вы перевешиваете ребро, ранг
[02:51:30.240 --> 02:51:32.240]  конца строго увеличивается.
[02:51:32.240 --> 02:51:34.240]  Да.
[02:51:34.240 --> 02:51:36.240]  Это вот из-за...
[02:51:36.240 --> 02:51:38.240]  Да, потому что мы следим за тем,
[02:51:38.240 --> 02:51:40.240]  что у нас каждый ребро ведёт из вершины
[02:51:40.240 --> 02:51:42.240]  какого-то ранга в вершину с большим рангом.
[02:51:42.240 --> 02:51:44.240]  И выше-то тоже всё больше, больше, больше,
[02:51:44.240 --> 02:51:46.240]  строго больше.
[02:51:46.240 --> 02:51:48.240]  Поэтому получается, до того, как оно станет
[02:51:48.240 --> 02:51:50.240]  тяжёлым, пройдёт не более чем вот столько
[02:51:50.240 --> 02:51:52.240]  итераций.
[02:51:52.240 --> 02:51:54.240]  Да.
[02:51:54.240 --> 02:51:56.240]  Нет, ну мы так объявили, что
[02:51:56.240 --> 02:51:58.240]  как только у нас ребро ведёт
[02:51:58.240 --> 02:52:00.240]  в ранг 1.9 от нашего,
[02:52:00.240 --> 02:52:02.240]  в степени нашего,
[02:52:02.240 --> 02:52:04.240]  то мы объявляем, что ребро тяжёлое.
[02:52:04.240 --> 02:52:06.240]  Вот просто берём и объявляем.
[02:52:06.240 --> 02:52:08.240]  Но выясняется...
[02:52:08.240 --> 02:52:10.240]  Ну вот.
[02:52:10.240 --> 02:52:12.240]  Ну тогда получается, что
[02:52:12.240 --> 02:52:14.240]  пока оно будет лёгким, значит
[02:52:14.240 --> 02:52:16.240]  этих обновлений будет вот столько.
[02:52:16.240 --> 02:52:18.240]  Вот.
[02:52:18.240 --> 02:52:20.240]  Но только выясняется, что
[02:52:20.240 --> 02:52:22.240]  вершин-то такого ранга, в общем-то,
[02:52:22.240 --> 02:52:24.240]  не сильно много.
[02:52:24.240 --> 02:52:26.240]  Точнее, наоборот, сильно много.
[02:52:26.240 --> 02:52:28.240]  Точнее, наоборот, не сильно много.
[02:52:28.240 --> 02:52:30.240]  Поэтому, если посуммировать
[02:52:30.240 --> 02:52:32.240]  это по всем рангам, вообще получается
[02:52:32.240 --> 02:52:34.240]  от n. Потому что n получается на какую-то
[02:52:34.240 --> 02:52:36.240]  геометрическую прогрессию.
[02:52:36.240 --> 02:52:38.240]  С коэффициентом меньше единиц.
[02:52:38.240 --> 02:52:40.240]  Вот.
[02:52:42.240 --> 02:52:44.240]  То есть, как я уже сказал, мелкая
[02:52:44.240 --> 02:52:46.240]  оговорка заключается только в том, что
[02:52:46.240 --> 02:52:48.240]  лог звёздочка берётся не по основанию 2,
[02:52:48.240 --> 02:52:50.240]  а по основанию 1.9.
[02:52:52.240 --> 02:52:54.240]  Так что остаётся только в качестве упражнения
[02:52:54.240 --> 02:52:56.240]  доказать, что лог звёздочки
[02:52:56.240 --> 02:52:58.240]  по двум разным константам основанием
[02:52:58.240 --> 02:53:00.240]  отличаются в константу 1.
[02:53:04.240 --> 02:53:06.240]  Понятно, да?
[02:53:10.240 --> 02:53:12.240]  Вот. Так.
[02:53:12.240 --> 02:53:14.240]  Но это вот что уж точно нужно было сказать
[02:53:14.240 --> 02:53:16.240]  про СНМ.
[02:53:16.240 --> 02:53:18.240]  Так, есть ли тут какие-то вопросы?
[02:53:20.240 --> 02:53:22.240]  Да нет, наверное.
[02:53:22.240 --> 02:53:24.240]  Отлично.
[02:53:24.240 --> 02:53:26.240]  Значит, у нас осталось ещё чуть-чуть.
[02:53:26.240 --> 02:53:28.240]  Так, что, ещё вопросы есть?
[02:53:28.240 --> 02:53:30.240]  Нет, всё.
[02:53:30.240 --> 02:53:32.240]  Ладно.
[02:53:32.240 --> 02:53:34.240]  Так, ну хорошо, ладно, это я должен был
[02:53:34.240 --> 02:53:36.240]  проговорить. Хотя, конечно, думаю, для многих
[02:53:36.240 --> 02:53:38.240]  из вас это, конечно, не новость.
[02:53:40.240 --> 02:53:42.240]  Поэтому мы всё-таки немножко
[02:53:42.240 --> 02:53:44.240]  поговорим об атоме к себе.
[02:53:46.240 --> 02:53:48.240]  Ну, как бы, я сейчас не буду говорить
[02:53:48.240 --> 02:53:50.240]  о том, как это сделать в предположении,
[02:53:50.240 --> 02:53:52.240]  что там лог, там
[02:53:52.240 --> 02:53:54.240]  корень четвёртой степени из лога,
[02:53:54.240 --> 02:53:56.240]  допустим, у вас чиселок в хипе,
[02:53:56.240 --> 02:53:58.240]  как всё за единицу делать.
[02:54:00.240 --> 02:54:02.240]  Вот.
[02:54:04.240 --> 02:54:06.240]  Вот, ну сейчас вот
[02:54:06.240 --> 02:54:08.240]  просыпаю. Так, вот сейчас будьте внимательны.
[02:54:08.240 --> 02:54:10.240]  Потому что сейчас, конечно,
[02:54:10.240 --> 02:54:12.240]  ждёт ещё одно эпическое упражнение
[02:54:12.240 --> 02:54:14.240]  на амортизацию.
[02:54:14.240 --> 02:54:16.240]  Там на амортизацию аля Кучи Фибоначчи.
[02:54:16.240 --> 02:54:18.240]  Ну и софт-хип
[02:54:18.240 --> 02:54:20.240]  тоже чуть-чуть. Вот.
[02:54:20.240 --> 02:54:22.240]  Значит, смотрите.
[02:54:22.240 --> 02:54:24.240]  Итак, ситуация. Представьте себе,
[02:54:24.240 --> 02:54:26.240]  что у вас есть
[02:54:26.240 --> 02:54:28.240]  мистический чёрный ящик,
[02:54:28.240 --> 02:54:30.240]  который умеет делать
[02:54:30.240 --> 02:54:32.240]  insert,
[02:54:32.240 --> 02:54:34.240]  там, extract min
[02:54:38.240 --> 02:54:40.240]  и чё-то, ну вот. А также
[02:54:40.240 --> 02:54:42.240]  там всякие, ну понятно уже там
[02:54:42.240 --> 02:54:44.240]  неважно, decrease key,
[02:54:44.240 --> 02:54:46.240]  да и просто delete.
[02:54:50.240 --> 02:54:52.240]  И всё это за от единицы.
[02:54:54.240 --> 02:54:56.240]  Но при этом чёрный ящик
[02:54:56.240 --> 02:54:58.240]  требует, что СЗшка
[02:54:58.240 --> 02:55:00.240]  не имеет права быть
[02:55:00.240 --> 02:55:02.240]  больше либо равна, чем лог квадрата.
[02:55:04.240 --> 02:55:06.240]  Каким образом нам теперь
[02:55:06.240 --> 02:55:08.240]  написать, теперь вот, то есть вот такая
[02:55:08.240 --> 02:55:10.240]  куча, допустим, у нас есть.
[02:55:12.240 --> 02:55:14.240]  Вот, понимаете, да?
[02:55:14.240 --> 02:55:16.240]  Теперь задача.
[02:55:16.240 --> 02:55:18.240]  Значит, задача такая.
[02:55:18.240 --> 02:55:20.240]  Теперь.
[02:55:20.240 --> 02:55:22.240]  Нам теперь требуется.
[02:55:24.240 --> 02:55:26.240]  То есть нам теперь требуется
[02:55:26.240 --> 02:55:28.240]  написать кучу на n элементов.
[02:55:30.240 --> 02:55:32.240]  Но так, чтобы все операции работали
[02:55:32.240 --> 02:55:34.240]  за у от единицы.
[02:55:34.240 --> 02:55:36.240]  То есть теперь вот, когда
[02:55:36.240 --> 02:55:38.240]  куча уже может быть размера n,
[02:55:38.240 --> 02:55:40.240]  но хочется, чтобы теперь все insert
[02:55:40.240 --> 02:55:42.240]  и компания
[02:55:42.240 --> 02:55:44.240]  там insert были у от единицы.
[02:55:44.240 --> 02:55:46.240]  А всякие deletes
[02:55:46.240 --> 02:55:48.240]  с экстракт-минами, естественно,
[02:55:48.240 --> 02:55:50.240]  были уже теперь
[02:55:50.240 --> 02:55:52.240]  не log n, но
[02:55:52.240 --> 02:55:54.240]  log log n.
[02:56:00.240 --> 02:56:02.240]  Вот, хочется себе
[02:56:02.240 --> 02:56:04.240]  как бы сократить
[02:56:04.240 --> 02:56:06.240]  асимптотику в log log n раз.
[02:56:08.240 --> 02:56:10.240]  Вот, делаем ставки.
[02:56:10.240 --> 02:56:12.240]  Как же это можно вообще сделать?
[02:56:14.240 --> 02:56:16.240]  Ну, первая идея
[02:56:16.240 --> 02:56:18.240]  на самом деле
[02:56:18.240 --> 02:56:20.240]  достаточно проста.
[02:56:20.240 --> 02:56:22.240]  То есть основным действующим
[02:56:22.240 --> 02:56:24.240]  лицом у нас будет
[02:56:24.240 --> 02:56:26.240]  B-ичная куча.
[02:56:28.240 --> 02:56:30.240]  Вот сейчас послушайте внимательно,
[02:56:30.240 --> 02:56:32.240]  сейчас весело будет.
[02:56:32.240 --> 02:56:34.240]  Значит, внимание.
[02:56:34.240 --> 02:56:36.240]  У нас есть B-ичная куча,
[02:56:36.240 --> 02:56:38.240]  где B
[02:56:38.240 --> 02:56:40.240]  прям будет практически честная такая
[02:56:40.240 --> 02:56:42.240]  B-ичная куча,
[02:56:42.240 --> 02:56:44.240]  где, вот сейчас неожиданный чип будет,
[02:56:44.240 --> 02:56:46.240]  где B равно,
[02:56:46.240 --> 02:56:48.240]  угадайте,
[02:56:48.240 --> 02:56:50.240]  чего?
[02:56:50.240 --> 02:56:52.240]  57.
[02:56:52.240 --> 02:56:54.240]  Ну, 57 это константа.
[02:56:54.240 --> 02:56:56.240]  Log квадрат.
[02:56:56.240 --> 02:56:58.240]  Нет, ну не квадрат, просто
[02:56:58.240 --> 02:57:00.240]  log n.
[02:57:00.240 --> 02:57:02.240]  Такая log н-ичная куча.
[02:57:06.240 --> 02:57:08.240]  Вот, то есть такая log н-ичная
[02:57:08.240 --> 02:57:10.240]  куча, но при этом, смотрите, как она устроена.
[02:57:10.240 --> 02:57:12.240]  В каждой вершине
[02:57:12.240 --> 02:57:14.240]  много ребер,
[02:57:14.240 --> 02:57:16.240]  но, смотрите, устроено оно так.
[02:57:16.240 --> 02:57:18.240]  Все эти ребра с вершинами,
[02:57:18.240 --> 02:57:20.240]  которые их представляют,
[02:57:20.240 --> 02:57:22.240]  они расположены
[02:57:24.240 --> 02:57:26.240]  вот это вот. Вот давайте
[02:57:26.240 --> 02:57:28.240]  этот черный ящик мы назовем AF HIP.
[02:57:30.240 --> 02:57:32.240]  Вот, понимаете, да?
[02:57:32.240 --> 02:57:34.240]  Так вот.
[02:57:34.240 --> 02:57:36.240]  Идея будет такая, что мы будем
[02:57:36.240 --> 02:57:38.240]  хранить не только вот этот вот элемент,
[02:57:38.240 --> 02:57:40.240]  но и для каждого вот этого дерева
[02:57:40.240 --> 02:57:42.240]  вот эти минимумы
[02:57:42.240 --> 02:57:44.240]  мы будем, то есть эти вот минимумы
[02:57:44.240 --> 02:57:46.240]  будут храниться в
[02:57:46.240 --> 02:57:48.240]  тоже AF HIP.
[02:57:50.240 --> 02:57:52.240]  Ну, потому что, понятно, размер кучи логарифом,
[02:57:52.240 --> 02:57:54.240]  поэтому нормально, да?
[02:57:54.240 --> 02:57:56.240]  Вот.
[02:57:56.240 --> 02:57:58.240]  Ну, начнем с того, что мы можем
[02:57:58.240 --> 02:58:00.240]  вообразить себе такого рода кучу, да?
[02:58:02.240 --> 02:58:04.240]  Непонятно, почему все
[02:58:04.240 --> 02:58:06.240]  нормально.
[02:58:06.240 --> 02:58:08.240]  Чего?
[02:58:08.240 --> 02:58:10.240]  Нам же нужен лог в подряд в предположении,
[02:58:10.240 --> 02:58:12.240]  что мы сделаем хотя бы n запросов
[02:58:12.240 --> 02:58:14.240]  к этой куче.
[02:58:14.240 --> 02:58:16.240]  Почему
[02:58:16.240 --> 02:58:18.240]  лог в квадрат запросов?
[02:58:18.240 --> 02:58:20.240]  Нет, у нее размер
[02:58:20.240 --> 02:58:22.240]  не больше, чем лог в квадрат.
[02:58:22.240 --> 02:58:24.240]  Нет, у нее...
[02:58:24.240 --> 02:58:26.240]  Ужинение, что мы сделаем хотя бы n запросов,
[02:58:26.240 --> 02:58:28.240]  и тогда все работает. Нет, нет, нет,
[02:58:28.240 --> 02:58:30.240]  нет, никаких таких
[02:58:30.240 --> 02:58:32.240]  предположений нет. Просто вот лог в квадрат...
[02:58:32.240 --> 02:58:34.240]  Нет, у нас есть n, где n
[02:58:34.240 --> 02:58:36.240]  максимальный размер вот этой кучи, да?
[02:58:38.240 --> 02:58:40.240]  Вот мы планируем реализовать кучу,
[02:58:40.240 --> 02:58:42.240]  которая работает с n элементами.
[02:58:42.240 --> 02:58:44.240]  Про n мы знаем только, что n
[02:58:44.240 --> 02:58:46.240]  оно как бы влезает в
[02:58:46.240 --> 02:58:48.240]  нашу битность.
[02:58:48.240 --> 02:58:50.240]  Сейчас, тогда...
[02:58:50.240 --> 02:58:52.240]  Какое условие
[02:58:52.240 --> 02:58:54.240]  у AF кучи, что если...
[02:58:54.240 --> 02:58:56.240]  Значит, да,
[02:58:56.240 --> 02:58:58.240]  AF куча говорит, что я требую
[02:58:58.240 --> 02:59:00.240]  как бы, чтобы размер был
[02:59:00.240 --> 02:59:02.240]  не более, чем лог в квадрате.
[02:59:02.240 --> 02:59:04.240]  Что такое количество?
[02:59:06.240 --> 02:59:08.240]  Нет, максималика...
[02:59:08.240 --> 02:59:10.240]  Ну, количество элементов.
[02:59:10.240 --> 02:59:12.240]  Ну, можете считать, что n это
[02:59:12.240 --> 02:59:14.240]  какой-то там...
[02:59:14.240 --> 02:59:16.240]  Ну, можете считать, что n это
[02:59:16.240 --> 02:59:18.240]  какое-нибудь там число,
[02:59:18.240 --> 02:59:20.240]  влезающее в вашу битность. Ну ладно,
[02:59:20.240 --> 02:59:22.240]  можете считать, что n это там где-нибудь 2 в степени...
[02:59:22.240 --> 02:59:24.240]  Там, может быть, лог в квадрат
[02:59:24.240 --> 02:59:26.240]  от, допустим, 2 в степени битности,
[02:59:26.240 --> 02:59:28.240]  например. А, то есть n это не количество...
[02:59:28.240 --> 02:59:30.240]  Ну, это сверху. На самом деле
[02:59:30.240 --> 02:59:32.240]  количество.
[02:59:32.240 --> 02:59:34.240]  Ну, я присоединил, что
[02:59:34.240 --> 02:59:36.240]  непонятно, что такое n.
[02:59:36.240 --> 02:59:38.240]  Ну, нет, n это количество
[02:59:38.240 --> 02:59:40.240]  здесь. Нет, вот слева
[02:59:40.240 --> 02:59:42.240]  что такое n? Нет, слева
[02:59:42.240 --> 02:59:44.240]  оно тоже иницируется этим.
[02:59:44.240 --> 02:59:46.240]  Я не понимаю, в чем
[02:59:46.240 --> 02:59:48.240]  проблема, если честно.
[02:59:48.240 --> 02:59:50.240]  Сейчас,
[02:59:50.240 --> 02:59:52.240]  при каких условиях AF
[02:59:52.240 --> 02:59:54.240]  хип работает за от 1?
[02:59:54.240 --> 02:59:56.240]  Ну, при условии, что
[02:59:56.240 --> 02:59:58.240]  размер у него не сильно большой.
[02:59:58.240 --> 03:00:00.240]  Ну, ладно, можете считать...
[03:00:00.240 --> 03:00:02.240]  Если вы хотите отвязаться от ограничений,
[03:00:02.240 --> 03:00:04.240]  можете считать, что
[03:00:04.240 --> 03:00:06.240]  только n, допустим,
[03:00:06.240 --> 03:00:08.240]  это не более чем лог в квадрат
[03:00:08.240 --> 03:00:10.240]  от 2 в степени w.
[03:00:10.240 --> 03:00:12.240]  То есть, в общем,
[03:00:12.240 --> 03:00:14.240]  это получится там...
[03:00:14.240 --> 03:00:16.240]  То есть, лог
[03:00:16.240 --> 03:00:18.240]  от 2 в степени битности это битность.
[03:00:18.240 --> 03:00:20.240]  В общем, короче...
[03:00:20.240 --> 03:00:22.240]  Не, ну просто это странно,
[03:00:22.240 --> 03:00:24.240]  потому что можно для одних и тех же операций
[03:00:24.240 --> 03:00:26.240]  сказать, вот у меня n равно
[03:00:26.240 --> 03:00:28.240]  10 в сотый.
[03:00:28.240 --> 03:00:30.240]  А можно потом сказать... А, понял вас.
[03:00:30.240 --> 03:00:32.240]  В этом
[03:00:32.240 --> 03:00:34.240]  тут и проявляется битность.
[03:00:34.240 --> 03:00:36.240]  Потому что, напоминаю, что мы живем
[03:00:36.240 --> 03:00:38.240]  не в рандомном мире. В рандомном
[03:00:38.240 --> 03:00:40.240]  мире это было бы невозможно. Мы живем в
[03:00:40.240 --> 03:00:42.240]  мире, где все числа, все ключи
[03:00:42.240 --> 03:00:44.240]  это битные
[03:00:44.240 --> 03:00:46.240]  числа.
[03:00:46.240 --> 03:00:48.240]  Ну, где... Не вот это b,
[03:00:48.240 --> 03:00:50.240]  ладно, там w, битные числа.
[03:00:50.240 --> 03:00:52.240]  У нас есть великое число w,
[03:00:52.240 --> 03:00:54.240]  которое фиксировано.
[03:00:54.240 --> 03:00:56.240]  И мы работаем только с числами,
[03:00:56.240 --> 03:00:58.240]  которые в эти битности
[03:00:58.240 --> 03:01:00.240]  влезают. В частности, мы
[03:01:00.240 --> 03:01:02.240]  вынуждены заключить, что n меньше,
[03:01:02.240 --> 03:01:04.240]  чем 2 в степени w.
[03:01:04.240 --> 03:01:06.240]  То есть, поэтому, видите, у нас на n
[03:01:06.240 --> 03:01:08.240]  само есть ограничение.
[03:01:12.240 --> 03:01:14.240]  Вот.
[03:01:14.240 --> 03:01:16.240]  Ну, кстати, может там оно еще более сильное,
[03:01:16.240 --> 03:01:18.240]  но давайте скажем, что оно такое.
[03:01:24.240 --> 03:01:26.240]  Вот.
[03:01:26.240 --> 03:01:28.240]  Так, поняли, да?
[03:01:30.240 --> 03:01:32.240]  Вот.
[03:01:32.240 --> 03:01:34.240]  То есть, в общем, ну, короче, ладно,
[03:01:34.240 --> 03:01:36.240]  можете считать, что здесь cz меньше
[03:01:36.240 --> 03:01:38.240]  льбрана, лог квадрат от вот этой
[03:01:38.240 --> 03:01:40.240]  штуки.
[03:01:40.240 --> 03:01:42.240]  То есть, это равно, ну, вот, ну, короче, там.
[03:01:42.240 --> 03:01:44.240]  Вот.
[03:01:44.240 --> 03:01:46.240]  И вот, предположим, что у нас
[03:01:46.240 --> 03:01:48.240]  а оказалось, что
[03:01:48.240 --> 03:01:50.240]  afhip у вас не сильно большой.
[03:01:50.240 --> 03:01:52.240]  То есть, afhip небольшой,
[03:01:52.240 --> 03:01:54.240]  и оказалось, что для такой небольшой
[03:01:54.240 --> 03:01:56.240]  он все за 1 делает.
[03:01:58.240 --> 03:02:00.240]  Вот.
[03:02:00.240 --> 03:02:02.240]  Ну, тогда, на самом деле,
[03:02:02.240 --> 03:02:04.240]  то есть, в общем-то,
[03:02:04.240 --> 03:02:06.240]  можно теперь так сказать.
[03:02:06.240 --> 03:02:08.240]  Если бы не было дикрийский,
[03:02:08.240 --> 03:02:10.240]  то мы вообще, то есть, смотрите, какая
[03:02:10.240 --> 03:02:12.240]  высота у этой кучи?
[03:02:16.240 --> 03:02:18.240]  Лог, лог.
[03:02:18.240 --> 03:02:20.240]  Ну, я бы так сказал, она лог
[03:02:20.240 --> 03:02:22.240]  по основанию bn, правда?
[03:02:24.240 --> 03:02:26.240]  Ну вот, это равно
[03:02:26.240 --> 03:02:28.240]  логн поделить на логб.
[03:02:28.240 --> 03:02:30.240]  Это равно
[03:02:30.240 --> 03:02:32.240]  логн поделить на, получается,
[03:02:32.240 --> 03:02:34.240]  лог логн.
[03:02:34.240 --> 03:02:36.240]  То есть, в принципе, получается,
[03:02:36.240 --> 03:02:38.240]  что если бы вы делали только честные
[03:02:38.240 --> 03:02:40.240]  инсерты и, допустим,
[03:02:40.240 --> 03:02:42.240]  экстракт мины или дилиты
[03:02:42.240 --> 03:02:44.240]  путем свапы с последним элементом, да?
[03:02:46.240 --> 03:02:48.240]  То, получается, работало бы за высоту.
[03:02:48.240 --> 03:02:50.240]  Почему за высоту?
[03:02:50.240 --> 03:02:52.240]  Ну, потому что, правда, тут надо оговориться,
[03:02:52.240 --> 03:02:54.240]  как вы делаете
[03:02:54.240 --> 03:02:56.240]  shift down, да?
[03:02:56.240 --> 03:02:58.240]  Как делается shift down?
[03:03:00.240 --> 03:03:02.240]  Ну вот, берем вершину, просматриваем детей,
[03:03:02.240 --> 03:03:04.240]  если мы находим минимального ребенка,
[03:03:04.240 --> 03:03:06.240]  если он меньше и нас, то ставим вместо себя
[03:03:06.240 --> 03:03:08.240]  и идем дальше, да?
[03:03:08.240 --> 03:03:10.240]  Но, как бы, зачем нам нужен afhip?
[03:03:10.240 --> 03:03:12.240]  Для того, чтобы делать не за от количества детей,
[03:03:12.240 --> 03:03:14.240]  а за от единиц.
[03:03:14.240 --> 03:03:16.240]  Понимаете, да?
[03:03:16.240 --> 03:03:18.240]  Все тут вставили нормально.
[03:03:20.240 --> 03:03:22.240]  Что мы еще раз храним в вершине, кроме детей?
[03:03:22.240 --> 03:03:24.240]  Храним, короче, детей.
[03:03:26.240 --> 03:03:28.240]  Вы можете считать, что это
[03:03:28.240 --> 03:03:30.240]  обычная быличная куча, да?
[03:03:30.240 --> 03:03:32.240]  То есть, в каждой вершине мы еще
[03:03:32.240 --> 03:03:34.240]  храним, как бы, берем на их детей
[03:03:34.240 --> 03:03:36.240]  и этих детей храним в своей куче.
[03:03:40.240 --> 03:03:42.240]  То есть, в каждой вершине хранится,
[03:03:42.240 --> 03:03:44.240]  так сказать, куча детей.
[03:03:46.240 --> 03:03:48.240]  Вот, ну в смысле hip дети.
[03:03:50.240 --> 03:03:52.240]  А как это сказать? Хранится куча детей.
[03:03:54.240 --> 03:03:56.240]  А, мы берем всех наших детей и запихиваем их в кучу.
[03:03:58.240 --> 03:04:00.240]  Лучше не становится.
[03:04:00.240 --> 03:04:02.240]  В общем, суть поняли, короче.
[03:04:06.240 --> 03:04:08.240]  Но это все прекрасно работает.
[03:04:10.240 --> 03:04:12.240]  То есть, сив даун сделали,
[03:04:12.240 --> 03:04:14.240]  сив тап еще легче.
[03:04:14.240 --> 03:04:16.240]  Но все прекрасно работало,
[03:04:16.240 --> 03:04:18.240]  если бы у нас не было мистической операции
[03:04:18.240 --> 03:04:20.240]  дикриски.
[03:04:26.240 --> 03:04:28.240]  О которой мы тоже мечтаем,
[03:04:28.240 --> 03:04:30.240]  что она от единиц.
[03:04:36.240 --> 03:04:38.240]  Но просто так сделать дикриски
[03:04:38.240 --> 03:04:40.240]  не получается, потому что
[03:04:40.240 --> 03:04:42.240]  в обычной куче мы дикриски достигаем за счет сив тапа,
[03:04:42.240 --> 03:04:44.240]  а сив тап у нас все-таки за столько работает.
[03:04:48.240 --> 03:04:50.240]  Да и, кстати, с инсертом у нас
[03:04:50.240 --> 03:04:52.240]  со вставкой в эту кучу у нас
[03:04:52.240 --> 03:04:54.240]  общие проблемы, кстати.
[03:04:54.240 --> 03:04:56.240]  Потому что мы
[03:04:56.240 --> 03:04:58.240]  вставляем куда-то и делаем сив тап.
[03:05:02.240 --> 03:05:04.240]  Чего?
[03:05:12.240 --> 03:05:14.240]  У нас дилет есть?
[03:05:14.240 --> 03:05:16.240]  Нет, погодите.
[03:05:16.240 --> 03:05:18.240]  Как раз наоборот, если у нас дилет есть,
[03:05:18.240 --> 03:05:20.240]  то не очень понятно, почему инсерт работает за.
[03:05:22.240 --> 03:05:24.240]  Хотя вот возникает ощущение,
[03:05:24.240 --> 03:05:26.240]  что если вы делаете N подряд,
[03:05:26.240 --> 03:05:28.240]  ну хотя нет, погодите,
[03:05:28.240 --> 03:05:30.240]  то смотря как создавать кучу.
[03:05:32.240 --> 03:05:34.240]  Потому что, вообще говоря, не очень понятно.
[03:05:36.240 --> 03:05:38.240]  Хотя, конечно, есть, действительно,
[03:05:38.240 --> 03:05:40.240]  ощущение какой-то амортизации есть.
[03:05:40.240 --> 03:05:42.240]  Почему?
[03:05:42.240 --> 03:05:44.240]  Ну потому что, да, действительно,
[03:05:44.240 --> 03:05:46.240]  хотя нет, если вы тут прям
[03:05:46.240 --> 03:05:48.240]  построили честную кучу, то как бы там
[03:05:48.240 --> 03:05:50.240]  будет честный сив тап.
[03:05:50.240 --> 03:05:52.240]  Поэтому надо очень аккуратно думать.
[03:05:54.240 --> 03:05:56.240]  Вот. Значит, как справиться?
[03:05:56.240 --> 03:05:58.240]  Ну, правда, тут у вас высекал вопрос,
[03:05:58.240 --> 03:06:00.240]  а зачем нам требуется, что в IFHP
[03:06:00.240 --> 03:06:02.240]  не лог, а лог квадрат вообще?
[03:06:04.240 --> 03:06:06.240]  Вот. А идея, на самом деле, такая.
[03:06:06.240 --> 03:06:08.240]  Идея.
[03:06:08.240 --> 03:06:10.240]  Значит, дело в том, что
[03:06:10.240 --> 03:06:12.240]  мы объявляем, что у каждой вершины
[03:06:12.240 --> 03:06:14.240]  как бы есть ранг, то есть та самая высота.
[03:06:14.240 --> 03:06:16.240]  Так вот, на самом деле, идея
[03:06:16.240 --> 03:06:18.240]  будет такая. У нас в системе
[03:06:20.240 --> 03:06:22.240]  будет, на самом деле, несколько
[03:06:22.240 --> 03:06:24.240]  вот таких вот деревьев.
[03:06:26.240 --> 03:06:28.240]  И у каждой будет своя высота.
[03:06:30.240 --> 03:06:32.240]  То есть, элементы будут храниться не в одном
[03:06:32.240 --> 03:06:34.240]  дереве, не в одной куче,
[03:06:34.240 --> 03:06:36.240]  а в нескольких деревьев.
[03:06:36.240 --> 03:06:38.240]  И у каждой будет там своя
[03:06:38.240 --> 03:06:40.240]  какая-то высота.
[03:06:40.240 --> 03:06:42.240]  Тут h1, h2, h3 и так далее.
[03:06:44.240 --> 03:06:46.240]  Понимаете, да?
[03:06:50.240 --> 03:06:52.240]  Но у вас будет теперь
[03:06:52.240 --> 03:06:54.240]  важное ограничение.
[03:06:54.240 --> 03:06:56.240]  Важное ограничение. Какое у нас будет
[03:06:56.240 --> 03:06:58.240]  важное ограничение?
[03:06:58.240 --> 03:07:00.240]  Очень простое. Я буду требовать,
[03:07:00.240 --> 03:07:02.240]  что у меня количество
[03:07:04.240 --> 03:07:06.240]  деревьев с
[03:07:06.240 --> 03:07:08.240]  h равно какому-нибудь
[03:07:08.240 --> 03:07:10.240]  фиксированному h0.
[03:07:10.240 --> 03:07:12.240]  Оно всегда должно
[03:07:12.240 --> 03:07:14.240]  быть не превосходить.
[03:07:18.240 --> 03:07:20.240]  Оно должно быть
[03:07:20.240 --> 03:07:22.240]  строго меньше, чем b.
[03:07:24.240 --> 03:07:26.240]  Но идея у меня будет такая.
[03:07:26.240 --> 03:07:28.240]  У меня будут периодически появляться
[03:07:28.240 --> 03:07:30.240]  новые деревья. Например, когда я буду делать
[03:07:30.240 --> 03:07:32.240]  insert, у меня будет появляться дерево
[03:07:32.240 --> 03:07:34.240]  высоты 0.
[03:07:36.240 --> 03:07:38.240]  Но теперь у меня возникает следующая идея.
[03:07:42.240 --> 03:07:44.240]  Какая у меня идея возникает?
[03:07:44.240 --> 03:07:46.240]  Неожиданная.
[03:07:46.240 --> 03:07:48.240]  Она у меня возникает так.
[03:07:56.240 --> 03:07:58.240]  Она у меня возникает следующим образом.
[03:07:58.240 --> 03:08:00.240]  Как только у меня будет появляться
[03:08:00.240 --> 03:08:02.240]  две деревья,
[03:08:02.240 --> 03:08:04.240]  я буду их пытаться объединить в
[03:08:04.240 --> 03:08:06.240]  одно дерево.
[03:08:08.240 --> 03:08:10.240]  Понимаете, да?
[03:08:12.240 --> 03:08:14.240]  Понятно, что каждый раз, когда у вас
[03:08:14.240 --> 03:08:16.240]  появляется дерево, вы можете класть монетку
[03:08:16.240 --> 03:08:18.240]  и тогда, получается, этими монетками
[03:08:18.240 --> 03:08:20.240]  это дерево оплатит.
[03:08:20.240 --> 03:08:22.240]  Получается, эта операция будет бесплатная.
[03:08:26.240 --> 03:08:28.240]  Как вы уже догадались,
[03:08:28.240 --> 03:08:30.240]  как мне этих деревьев, так сказать,
[03:08:30.240 --> 03:08:32.240]  мы будем тоже хранить в куче.
[03:08:32.240 --> 03:08:34.240]  И размер этой кучи будет лог квадрат.
[03:08:34.240 --> 03:08:36.240]  Поэтому нам тут
[03:08:36.240 --> 03:08:38.240]  требуется лог квадрат.
[03:08:46.240 --> 03:08:48.240]  А теперь давайте поподробнее.
[03:08:48.240 --> 03:08:50.240]  Потому что как нам объединить
[03:08:50.240 --> 03:08:52.240]  b деревьев в одну кучу?
[03:08:52.240 --> 03:08:54.240]  Ну, как просто?
[03:08:54.240 --> 03:08:56.240]  Дело в том, что
[03:08:56.240 --> 03:08:58.240]  не совсем так.
[03:08:58.240 --> 03:09:00.240]  Нам же этот огневой элемент желательно
[03:09:00.240 --> 03:09:02.240]  еще откуда-то взять.
[03:09:02.240 --> 03:09:04.240]  Нет?
[03:09:04.240 --> 03:09:06.240]  А мы умеем
[03:09:06.240 --> 03:09:08.240]  умелдить
[03:09:08.240 --> 03:09:10.240]  эти два окипа
[03:09:10.240 --> 03:09:12.240]  от 1?
[03:09:12.240 --> 03:09:14.240]  Нет.
[03:09:14.240 --> 03:09:16.240]  Просто так у нас молдов нет.
[03:09:16.240 --> 03:09:18.240]  У нас задача есть b деревьев
[03:09:18.240 --> 03:09:20.240]  от одинаковой высоты.
[03:09:20.240 --> 03:09:22.240]  И превратить их в одну.
[03:09:34.240 --> 03:09:36.240]  Совсем переливать не получится.
[03:09:46.240 --> 03:09:48.240]  Каким образом?
[03:09:48.240 --> 03:09:50.240]  Просто там...
[03:09:50.240 --> 03:09:52.240]  Нет, ну не совсем.
[03:09:52.240 --> 03:09:54.240]  У дерева фиксированы высоты,
[03:09:54.240 --> 03:09:56.240]  количество элементов все-таки
[03:09:56.240 --> 03:09:58.240]  имеет ограничение.
[03:09:58.240 --> 03:10:00.240]  И потом хочется склеивать
[03:10:00.240 --> 03:10:02.240]  все-таки как-то за единицу, что ли.
[03:10:02.240 --> 03:10:04.240]  Или хотя бы за b.
[03:10:04.240 --> 03:10:06.240]  Но амортизация нам должна
[03:10:06.240 --> 03:10:08.240]  позволять склеивать за b.
[03:10:08.240 --> 03:10:10.240]  Потому что если у нас с каждому
[03:10:10.240 --> 03:10:12.240]  дереву дана монетка,
[03:10:12.240 --> 03:10:14.240]  то для того, чтобы склеить
[03:10:14.240 --> 03:10:16.240]  b деревьев в одну, у нас получается
[03:10:16.240 --> 03:10:18.240]  б-1.
[03:10:18.240 --> 03:10:20.240]  Одну монетку мы еще докинем.
[03:10:20.240 --> 03:10:22.240]  Поэтому должно
[03:10:22.240 --> 03:10:24.240]  получиться, что операции вроде 0.
[03:10:26.240 --> 03:10:28.240]  Поэтому
[03:10:28.240 --> 03:10:30.240]  должно хватить.
[03:10:30.240 --> 03:10:32.240]  Или не должно?
[03:10:32.240 --> 03:10:34.240]  Не должно?
[03:10:34.240 --> 03:10:36.240]  Но как это сделать?
[03:10:38.240 --> 03:10:40.240]  Для этого давайте
[03:10:40.240 --> 03:10:42.240]  рассмотрим все-таки такое.
[03:10:42.240 --> 03:10:44.240]  Давайте от этого хипа попробуем немножко уйти.
[03:10:44.240 --> 03:10:46.240]  И в каком плане?
[03:10:46.240 --> 03:10:48.240]  В каком плане?
[03:10:48.240 --> 03:10:50.240]  Потому что мы здесь вот писали хип в предположении,
[03:10:50.240 --> 03:10:52.240]  что в каждой вершинке находится
[03:10:52.240 --> 03:10:54.240]  свой ключ. Правда?
[03:10:56.240 --> 03:10:58.240]  Ну в каждой вершинке есть ключик
[03:10:58.240 --> 03:11:00.240]  и хип на детей, да?
[03:11:00.240 --> 03:11:02.240]  А теперь у нас какая-то другая идея.
[03:11:02.240 --> 03:11:04.240]  А давайте посмотрим...
[03:11:04.240 --> 03:11:06.240]  А давайте не будем в каждой...
[03:11:06.240 --> 03:11:08.240]  А давайте только в листьях будем
[03:11:08.240 --> 03:11:10.240]  хранить реальное значение.
[03:11:10.240 --> 03:11:12.240]  То есть будет
[03:11:12.240 --> 03:11:14.240]  такой бытичный деревоотреск?
[03:11:16.240 --> 03:11:18.240]  Понятно о чем
[03:11:18.240 --> 03:11:20.240]  речь, да?
[03:11:22.240 --> 03:11:24.240]  Ну минимум
[03:11:24.240 --> 03:11:26.240]  на поддире.
[03:11:26.240 --> 03:11:28.240]  Ну может быть на подотреске,
[03:11:28.240 --> 03:11:30.240]  но это будет не совсем подотрезок,
[03:11:30.240 --> 03:11:32.240]  там будет немножко по-другому.
[03:11:32.240 --> 03:11:34.240]  Сейчас вы увидите. Но давайте правда
[03:11:34.240 --> 03:11:36.240]  подумаем. А вот эта вот оптимизация,
[03:11:36.240 --> 03:11:38.240]  как она нас...
[03:11:38.240 --> 03:11:40.240]  Впрочем, значит...
[03:11:40.240 --> 03:11:42.240]  А, впрочем, сейчас мы вообще все по-другому
[03:11:42.240 --> 03:11:44.240]  будем делать. То есть конечно
[03:11:44.240 --> 03:11:46.240]  сифтапами, сифтдаунами у нас конечно
[03:11:46.240 --> 03:11:48.240]  возникают проблемы.
[03:11:48.240 --> 03:11:50.240]  Вот, понимаете, да?
[03:11:50.240 --> 03:11:52.240]  Вот.
[03:11:54.240 --> 03:11:56.240]  Вот.
[03:12:02.240 --> 03:12:04.240]  Ну вот. Ну значит теперь
[03:12:04.240 --> 03:12:06.240]  что нам теперь хочется
[03:12:06.240 --> 03:12:08.240]  сделать?
[03:12:12.240 --> 03:12:14.240]  Вот. Хочется сделать
[03:12:14.240 --> 03:12:16.240]  нот...
[03:12:16.240 --> 03:12:18.240]  Ну вот как
[03:12:18.240 --> 03:12:20.240]  теперь нам это сделать?
[03:12:20.240 --> 03:12:22.240]  Ну теперь понятно, как вы уже поняли, да?
[03:12:22.240 --> 03:12:24.240]  Со вставкой у нас никаких проблем нет.
[03:12:24.240 --> 03:12:26.240]  То есть взяли и сделали.
[03:12:26.240 --> 03:12:28.240]  Но теперь у нас и дилит,
[03:12:28.240 --> 03:12:30.240]  и дикризки, но на самом деле
[03:12:30.240 --> 03:12:32.240]  могут быть сделаны так.
[03:12:32.240 --> 03:12:34.240]  Как сделать дикризки?
[03:12:34.240 --> 03:12:36.240]  Очень просто выпилить...
[03:12:36.240 --> 03:12:38.240]  Ну на самом деле дикризки у нас как всегда
[03:12:38.240 --> 03:12:40.240]  может сводиться к дилиту, правда?
[03:12:40.240 --> 03:12:42.240]  То есть выпилим каким-то образом
[03:12:42.240 --> 03:12:44.240]  этот элемент, а потом его просто добавим
[03:12:44.240 --> 03:12:46.240]  к нам просто с уменьшенным, правда?
[03:12:50.240 --> 03:12:52.240]  Хотя нет, мы же это не хотим...
[03:12:52.240 --> 03:12:54.240]  А, подождите, мы этого не хотим делать.
[03:12:54.240 --> 03:12:56.240]  Потому что, да,
[03:12:56.240 --> 03:12:58.240]  у нас дилит хочется за адекватную асимптотику,
[03:12:58.240 --> 03:13:00.240]  а дикризки все-таки за единиц.
[03:13:00.240 --> 03:13:02.240]  Вот понятно, о чем я говорю, да?
[03:13:04.240 --> 03:13:06.240]  Или непонятно?
[03:13:06.240 --> 03:13:08.240]  Ау!
[03:13:08.240 --> 03:13:10.240]  Вот, ну да, вроде понятно.
[03:13:10.240 --> 03:13:12.240]  Но теперь возникает вопрос.
[03:13:12.240 --> 03:13:14.240]  Как делать дикризки?
[03:13:14.240 --> 03:13:16.240]  Ну, значит, идея возникает следующая.
[03:13:18.240 --> 03:13:20.240]  То есть...
[03:13:20.240 --> 03:13:22.240]  Ну, соответственно,
[03:13:22.240 --> 03:13:24.240]  пытаемся делать дикризки.
[03:13:26.240 --> 03:13:28.240]  Вот, но на самом деле
[03:13:28.240 --> 03:13:30.240]  можно попробовать сделать так.
[03:13:30.240 --> 03:13:32.240]  Вот у нас есть...
[03:13:32.240 --> 03:13:34.240]  То есть какой-то элемент мы уменьшаем,
[03:13:34.240 --> 03:13:36.240]  он в каком-то дереве находится, да?
[03:13:38.240 --> 03:13:40.240]  Вот, но теперь вот отправляемся...
[03:13:40.240 --> 03:13:42.240]  Хорошо, мы уменьшили это дерево, да?
[03:13:42.240 --> 03:13:44.240]  И за вот единицу мы можем
[03:13:44.240 --> 03:13:46.240]  полезть вот этот атомик СИП
[03:13:46.240 --> 03:13:48.240]  и проверить...
[03:13:48.240 --> 03:13:50.240]  В общем, поменять тут этот элемент, да?
[03:13:52.240 --> 03:13:54.240]  За единицу и за одно проверить.
[03:13:54.240 --> 03:13:56.240]  А...
[03:13:56.240 --> 03:13:58.240]  Изменился ли у него
[03:13:58.240 --> 03:14:00.240]  минимум?
[03:14:06.240 --> 03:14:08.240]  Да или нет?
[03:14:08.240 --> 03:14:10.240]  Он же может потом
[03:14:10.240 --> 03:14:12.240]  дальше идти и еще
[03:14:12.240 --> 03:14:14.240]  перемешаться.
[03:14:14.240 --> 03:14:16.240]  Нет, на самом деле, как повезет.
[03:14:16.240 --> 03:14:18.240]  Но первое, что нужно отметить.
[03:14:18.240 --> 03:14:20.240]  Что нам нужно отметить?
[03:14:20.240 --> 03:14:22.240]  Первое, что нужно отметить,
[03:14:22.240 --> 03:14:24.240]  это то, что
[03:14:24.240 --> 03:14:26.240]  минимум от этой штуки, в общем-то,
[03:14:26.240 --> 03:14:28.240]  особо не поменялся.
[03:14:28.240 --> 03:14:30.240]  То есть он мог и в принципе остался
[03:14:30.240 --> 03:14:32.240]  прежним. Если он остался прежним,
[03:14:32.240 --> 03:14:34.240]  то в общем-то делать ничего не надо, правда?
[03:14:34.240 --> 03:14:36.240]  Потому что там сверху
[03:14:36.240 --> 03:14:38.240]  ничего не...
[03:14:38.240 --> 03:14:40.240]  Соответственно,
[03:14:40.240 --> 03:14:42.240]  не поменялось.
[03:14:42.240 --> 03:14:44.240]  Вот.
[03:14:44.240 --> 03:14:46.240]  Пока мы делаем дикрески,
[03:14:46.240 --> 03:14:48.240]  мы всегда делаем это в листе.
[03:14:48.240 --> 03:14:50.240]  У нас все в листе.
[03:14:50.240 --> 03:14:52.240]  Ну да, да, да.
[03:14:52.240 --> 03:14:54.240]  Да.
[03:14:54.240 --> 03:14:56.240]  Да, ну естественно.
[03:14:56.240 --> 03:14:58.240]  Почему минимум не поменялось?
[03:14:58.240 --> 03:15:00.240]  Потому что...
[03:15:00.240 --> 03:15:02.240]  Могло казаться, что
[03:15:02.240 --> 03:15:04.240]  минимум среди детей не поменялся,
[03:15:04.240 --> 03:15:06.240]  потому что эта штука уменьшилась,
[03:15:06.240 --> 03:15:08.240]  то есть какой-то соседний сосед, который еще меньше.
[03:15:08.240 --> 03:15:10.240]  То есть в этом случае
[03:15:10.240 --> 03:15:12.240]  действительно не особо все поменялось.
[03:15:12.240 --> 03:15:14.240]  Что мы тогда дальше делаем?
[03:15:14.240 --> 03:15:16.240]  Если минимум
[03:15:16.240 --> 03:15:18.240]  поменялся,
[03:15:18.240 --> 03:15:20.240]  ну идем еще...
[03:15:20.240 --> 03:15:22.240]  Вот. Ну в идеале, конечно,
[03:15:22.240 --> 03:15:24.240]  да, заметим, что
[03:15:24.240 --> 03:15:26.240]  в идеале, если минимум поменялся,
[03:15:26.240 --> 03:15:28.240]  то нам, конечно, придется так это прям честно-честно-честно
[03:15:28.240 --> 03:15:30.240]  идти-идти-идти, да?
[03:15:32.240 --> 03:15:34.240]  Вот.
[03:15:34.240 --> 03:15:36.240]  Вот. Но это, конечно, не очень
[03:15:36.240 --> 03:15:38.240]  хорошо. Поэтому мы пойдем другим
[03:15:38.240 --> 03:15:40.240]  путем.
[03:15:40.240 --> 03:15:42.240]  Вот.
[03:15:42.240 --> 03:15:44.240]  Мы скажем, что, а давайте-ка мы этого ребенка
[03:15:44.240 --> 03:15:46.240]  просто выпилим.
[03:15:46.240 --> 03:15:48.240]  Что такое выпилим?
[03:15:48.240 --> 03:15:50.240]  Это означает, что вот это под дерево высоты
[03:15:50.240 --> 03:15:52.240]  ноль мы
[03:15:52.240 --> 03:15:54.240]  отправим себе в
[03:15:54.240 --> 03:15:56.240]  вот.
[03:15:56.240 --> 03:15:58.240]  Собственно, в список деревьев.
[03:16:00.240 --> 03:16:02.240]  То есть, видите, мы его не удаляем,
[03:16:02.240 --> 03:16:04.240]  мы его отправляем в список
[03:16:04.240 --> 03:16:06.240]  детей. Ну вот.
[03:16:06.240 --> 03:16:08.240]  Но понятно, что раз оно
[03:16:08.240 --> 03:16:10.240]  высоты ноль, то я теперь могу этот ключ
[03:16:10.240 --> 03:16:12.240]  уже там написать, что у меня
[03:16:12.240 --> 03:16:14.240]  что угодно.
[03:16:14.240 --> 03:16:16.240]  Вот. Понимаете, да?
[03:16:16.240 --> 03:16:18.240]  Вот.
[03:16:18.240 --> 03:16:20.240]  Ну хорошо, говорим мы.
[03:16:20.240 --> 03:16:22.240]  Но тогда мы замечаем,
[03:16:22.240 --> 03:16:24.240]  что...
[03:16:24.240 --> 03:16:26.240]  Ну вот. Но тогда... Хорошо.
[03:16:26.240 --> 03:16:28.240]  Значит, хорошо. Но тогда
[03:16:28.240 --> 03:16:30.240]  вот эта штука тоже
[03:16:30.240 --> 03:16:32.240]  уменьшилась, да?
[03:16:34.240 --> 03:16:36.240]  Так.
[03:16:36.240 --> 03:16:38.240]  Но на самом деле нет.
[03:16:42.240 --> 03:16:44.240]  Вот. Нет.
[03:16:44.240 --> 03:16:46.240]  Но на самом деле тут ничего не сломалось.
[03:16:46.240 --> 03:16:48.240]  Тут просто, как бы, мог
[03:16:48.240 --> 03:16:50.240]  поменяться минимум.
[03:16:52.240 --> 03:16:54.240]  Вот. Но от того, что вы...
[03:16:54.240 --> 03:16:56.240]  Нет, смотрите тут. Какая проблема могла возникнуть?
[03:16:56.240 --> 03:16:58.240]  От того, что вы удалили какой-то элемент,
[03:16:58.240 --> 03:17:00.240]  минимум среди этих детей мог увеличиться.
[03:17:00.240 --> 03:17:02.240]  Мог увеличиться.
[03:17:02.240 --> 03:17:04.240]  Сейчас мог, но
[03:17:04.240 --> 03:17:06.240]  у нас сразу нет проблемы.
[03:17:06.240 --> 03:17:08.240]  Мы хотим, чтобы у нас была
[03:17:08.240 --> 03:17:10.240]  маленькая глубина.
[03:17:10.240 --> 03:17:12.240]  А для этого мы хотим, чтобы у всех
[03:17:12.240 --> 03:17:14.240]  было плюс-минус 2 детей.
[03:17:14.240 --> 03:17:16.240]  Если мы будем вот так вот втупую
[03:17:16.240 --> 03:17:18.240]  удалять...
[03:17:18.240 --> 03:17:20.240]  Ну да. Да.
[03:17:20.240 --> 03:17:22.240]  Нет. Ну да. Эту проблему мы будем решать.
[03:17:22.240 --> 03:17:24.240]  Но так... Хорошо.
[03:17:24.240 --> 03:17:26.240]  Ладно. Вброшу тогда идею, как мы будем решать
[03:17:26.240 --> 03:17:28.240]  этот вопрос. Значит,
[03:17:28.240 --> 03:17:30.240]  по идее мы очень хотим, чтоб, конечно,
[03:17:30.240 --> 03:17:32.240]  вырезать не очень много.
[03:17:32.240 --> 03:17:34.240]  Вот помните, как мы в куче фибоначчи
[03:17:34.240 --> 03:17:36.240]  делали каскадинг-кат?
[03:17:36.240 --> 03:17:38.240]  Мы говорили, что если у вершины
[03:17:38.240 --> 03:17:40.240]  отпилился один ребенок, она
[03:17:40.240 --> 03:17:42.240]  получает монетку.
[03:17:42.240 --> 03:17:44.240]  То есть она как бы напряжена.
[03:17:44.240 --> 03:17:46.240]  Но если мы отпилили второго ребенка,
[03:17:46.240 --> 03:17:48.240]  то мы выпиливаем ее саму.
[03:17:48.240 --> 03:17:50.240]  Здесь будет примерно та же идея.
[03:17:50.240 --> 03:17:52.240]  Только каждая вершина будет ждать,
[03:17:52.240 --> 03:17:54.240]  когда у нее отпилят B пополам детей.
[03:17:56.240 --> 03:17:58.240]  То есть как только отпилят B
[03:17:58.240 --> 03:18:00.240]  пополам детей, значит все, мы теряем терпение
[03:18:00.240 --> 03:18:02.240]  и выпиливаем B.
[03:18:02.240 --> 03:18:04.240]  То есть тогда получается, что
[03:18:04.240 --> 03:18:06.240]  вот...
[03:18:06.240 --> 03:18:08.240]  То есть тогда мы ее как бы выпиливаем.
[03:18:08.240 --> 03:18:10.240]  Может быть даже эту вершину мы даже вообще...
[03:18:10.240 --> 03:18:12.240]  То есть мы даже
[03:18:12.240 --> 03:18:14.240]  заявим, что может быть самой этой вершины
[03:18:14.240 --> 03:18:16.240]  может у нас толком нету.
[03:18:16.240 --> 03:18:18.240]  Вот.
[03:18:18.240 --> 03:18:20.240]  А сами эти вот B пополам детей может есть.
[03:18:20.240 --> 03:18:22.240]  Хотя вот идея какая-то
[03:18:22.240 --> 03:18:24.240]  в эту сторону будет.
[03:18:24.240 --> 03:18:26.240]  Вот.
[03:18:26.240 --> 03:18:28.240]  Но правда, теперь выеси какая-то вопрос.
[03:18:28.240 --> 03:18:30.240]  Так, хорошо. Но пока, если у нее не слишком много...
[03:18:30.240 --> 03:18:32.240]  Пока еще много детей,
[03:18:32.240 --> 03:18:34.240]  мы ее, наверное, совсем выпиливать не хотим.
[03:18:34.240 --> 03:18:36.240]  Ну, потому что если мы прям...
[03:18:36.240 --> 03:18:38.240]  Ну вот.
[03:18:38.240 --> 03:18:40.240]  То есть что тогда можно было бы везде плать?
[03:18:44.240 --> 03:18:46.240]  Вот, действительно, что тогда можно было бы сделать?
[03:18:46.240 --> 03:18:48.240]  Ну, можно было бы...
[03:18:48.240 --> 03:18:50.240]  Ну, можно как минимум хотя бы
[03:18:50.240 --> 03:18:52.240]  посмотреть в кучу...
[03:18:52.240 --> 03:18:54.240]  То есть посмотреть в родителей, посмотреть...
[03:18:54.240 --> 03:18:56.240]  Хорошо, вот у меня тут минимум изменился, да?
[03:18:56.240 --> 03:18:58.240]  Возникает вопрос.
[03:18:58.240 --> 03:19:00.240]  А изменило ли это минимум сверху?
[03:19:02.240 --> 03:19:04.240]  Вот.
[03:19:04.240 --> 03:19:06.240]  Ну, соответственно, если не изменило,
[03:19:06.240 --> 03:19:08.240]  то тоже ничего не надо делать. А если изменило?
[03:19:10.240 --> 03:19:12.240]  То отпиливаемся.
[03:19:12.240 --> 03:19:14.240]  Ну вот.
[03:19:14.240 --> 03:19:16.240]  Нет, ну вот.
[03:19:16.240 --> 03:19:18.240]  Ну да, то в принципе можно, наверное,
[03:19:18.240 --> 03:19:20.240]  то в принципе тогда да, придется
[03:19:20.240 --> 03:19:22.240]  эту вершину отпиливать.
[03:19:22.240 --> 03:19:24.240]  Ну а дальше, если говорим, что у нас тут
[03:19:24.240 --> 03:19:26.240]  детей осталось
[03:19:26.240 --> 03:19:28.240]  б пополам, то значит эту вершину мы отпиливаем
[03:19:28.240 --> 03:19:30.240]  по-любому.
[03:19:30.240 --> 03:19:32.240]  Сейчас, то есть
[03:19:32.240 --> 03:19:34.240]  у нас есть плохой случай,
[03:19:34.240 --> 03:19:36.240]  когда та
[03:19:36.240 --> 03:19:38.240]  вершина,
[03:19:38.240 --> 03:19:40.240]  которую мы уменьшаем, она
[03:19:40.240 --> 03:19:42.240]  и так была минимальна,
[03:19:42.240 --> 03:19:44.240]  то есть при ее удалении минимум
[03:19:44.240 --> 03:19:46.240]  увеличился.
[03:19:46.240 --> 03:19:48.240]  Если это влияет на минимум в предке,
[03:19:48.240 --> 03:19:50.240]  то мы отпиливаем всю вершину.
[03:19:50.240 --> 03:19:52.240]  Ну да, ну вот давайте...
[03:19:52.240 --> 03:19:54.240]  Давайте подумаем.
[03:19:54.240 --> 03:19:56.240]  Ладно, если мы прям действительно вот в тупую...
[03:19:56.240 --> 03:19:58.240]  Ну правда, действительно давайте думать.
[03:19:58.240 --> 03:20:00.240]  Если мы действительно прям отпиливаем
[03:20:00.240 --> 03:20:02.240]  минимум,
[03:20:02.240 --> 03:20:04.240]  то насколько это хорошо?
[03:20:04.240 --> 03:20:06.240]  Насколько это хорошо?
[03:20:10.240 --> 03:20:12.240]  Ну может
[03:20:12.240 --> 03:20:14.240]  изменится минимум прямо вообще
[03:20:14.240 --> 03:20:16.240]  у всего?
[03:20:16.240 --> 03:20:18.240]  Ну да, проблема, проблема.
[03:20:18.240 --> 03:20:20.240]  Да, действительно,
[03:20:20.240 --> 03:20:22.240]  у нас действительно
[03:20:22.240 --> 03:20:24.240]  может отпилиться минимум у всего дерева.
[03:20:24.240 --> 03:20:26.240]  Да,
[03:20:26.240 --> 03:20:28.240]  есть какая-то проблема. Да, хорошо.
[03:20:28.240 --> 03:20:30.240]  Получается, да,
[03:20:30.240 --> 03:20:32.240]  у дерева отрезков свой недостаток
[03:20:32.240 --> 03:20:34.240]  получается.
[03:20:34.240 --> 03:20:36.240]  Хорошо.
[03:20:36.240 --> 03:20:38.240]  А если вернуться к обычной куче?
[03:20:38.240 --> 03:20:40.240]  Кстати, обычная куча решала бы этот вопрос.
[03:20:40.240 --> 03:20:42.240]  Единственная разница,
[03:20:42.240 --> 03:20:44.240]  только что мы стартовали бы, наверное,
[03:20:44.240 --> 03:20:46.240]  иногда не с листа,
[03:20:46.240 --> 03:20:48.240]  а с элементов в произвольном дереве.
[03:20:48.240 --> 03:20:50.240]  Да?
[03:20:50.240 --> 03:20:52.240]  В произвольной глубине, да?
[03:20:52.240 --> 03:20:54.240]  Вот.
[03:20:54.240 --> 03:20:56.240]  То есть ведь заметим, что у нас тогда
[03:20:56.240 --> 03:20:58.240]  куча устроена так, что локально всё хорошо,
[03:20:58.240 --> 03:21:00.240]  да? То есть как бы
[03:21:00.240 --> 03:21:02.240]  поменяется только то, что вот в куче
[03:21:02.240 --> 03:21:04.240]  из детей надо просто одного ребёнка убрать.
[03:21:04.240 --> 03:21:06.240]  Но ничего
[03:21:06.240 --> 03:21:08.240]  не поменяется, потому что тут всё равно был
[03:21:08.240 --> 03:21:10.240]  элемент меньше и значит дальше там ещё меньше,
[03:21:10.240 --> 03:21:12.240]  поэтому больше ничего делать не надо.
[03:21:12.240 --> 03:21:14.240]  Но тогда, правда,
[03:21:14.240 --> 03:21:16.240]  возникает всё равно естественный вопрос.
[03:21:16.240 --> 03:21:18.240]  А что же всё-таки нам
[03:21:18.240 --> 03:21:20.240]  делать, если у нас
[03:21:20.240 --> 03:21:22.240]  образовалось тут B деревьев
[03:21:22.240 --> 03:21:24.240]  одинаковой высоты, которые нам вот
[03:21:24.240 --> 03:21:26.240]  очень-очень-очень хочется слить в одно?
[03:21:28.240 --> 03:21:30.240]  Вот как бы вы сказали.
[03:21:30.240 --> 03:21:32.240]  Как бы нам тогда выкрутиться?
[03:21:36.240 --> 03:21:38.240]  Хочется взять,
[03:21:38.240 --> 03:21:40.240]  не знаю,
[03:21:40.240 --> 03:21:42.240]  через фейтную вершину
[03:21:42.240 --> 03:21:44.240]  их всех подкисить за неё.
[03:21:44.240 --> 03:21:46.240]  А потом как-нибудь её вниз
[03:21:46.240 --> 03:21:48.240]  пропихнуть?
[03:21:48.240 --> 03:21:50.240]  Ну, пропихнуть вниз,
[03:21:50.240 --> 03:21:52.240]  к сожалению, не получится
[03:21:52.240 --> 03:21:54.240]  за O от единицы или даже за O от B.
[03:21:56.240 --> 03:21:58.240]  А, ну тогда
[03:21:58.240 --> 03:22:00.240]  можно взять корень
[03:22:00.240 --> 03:22:02.240]  минимального,
[03:22:02.240 --> 03:22:04.240]  минимальный корень
[03:22:04.240 --> 03:22:06.240]  и к нему всё.
[03:22:08.240 --> 03:22:10.240]  Нет, тут теоретически можно,
[03:22:10.240 --> 03:22:12.240]  но практически...
[03:22:12.240 --> 03:22:14.240]  Да,
[03:22:14.240 --> 03:22:16.240]  вот возникает вопрос.
[03:22:16.240 --> 03:22:18.240]  Как же совместить это, чтобы
[03:22:18.240 --> 03:22:20.240]  куча была и дерево отрезков было?
[03:22:20.240 --> 03:22:22.240]  А нельзя, как мы
[03:22:22.240 --> 03:22:24.240]  в B дереве делали?
[03:22:24.240 --> 03:22:26.240]  А как мы в B дереве делали?
[03:22:28.240 --> 03:22:30.240]  Получился
[03:22:30.240 --> 03:22:32.240]  массив длины 2B.
[03:22:32.240 --> 03:22:34.240]  Давайте возьмём
[03:22:34.240 --> 03:22:36.240]  минимум, поднимём его
[03:22:36.240 --> 03:22:38.240]  вверх.
[03:22:38.240 --> 03:22:40.240]  Ну,
[03:22:40.240 --> 03:22:42.240]  раз тянем его
[03:22:42.240 --> 03:22:44.240]  пополам,
[03:22:44.240 --> 03:22:46.240]  поднимем две вершины,
[03:22:46.240 --> 03:22:48.240]  ещё одну.
[03:22:52.240 --> 03:22:54.240]  Такую вот штуку
[03:22:54.240 --> 03:22:56.240]  можно подкосить.
[03:22:58.240 --> 03:23:00.240]  Ну, не знаю, нет,
[03:23:00.240 --> 03:23:02.240]  такую штуку да, но там что-то пропихивать надо.
[03:23:02.240 --> 03:23:04.240]  Понимаете, там же в B дереве
[03:23:04.240 --> 03:23:06.240]  пропихлоны тоже не за единицу работали.
[03:23:08.240 --> 03:23:10.240]  Мы же в корне.
[03:23:10.240 --> 03:23:12.240]  Нет, ну мы работаем в корне,
[03:23:12.240 --> 03:23:14.240]  что нам это даёт?
[03:23:14.240 --> 03:23:16.240]  У нас есть B деревья,
[03:23:16.240 --> 03:23:18.240]  надо объединить их как-то в одно.
[03:23:18.240 --> 03:23:20.240]  То есть, да,
[03:23:20.240 --> 03:23:22.240]  у нас есть O от B времени.
[03:23:24.240 --> 03:23:26.240]  На это.
[03:23:28.240 --> 03:23:30.240]  Ну вот, мы
[03:23:30.240 --> 03:23:32.240]  берём
[03:23:32.240 --> 03:23:34.240]  минимальную вершину,
[03:23:34.240 --> 03:23:36.240]  ну, минимальный корень.
[03:23:36.240 --> 03:23:38.240]  И всех
[03:23:38.240 --> 03:23:40.240]  остальных приделываем к нему.
[03:23:40.240 --> 03:23:42.240]  Так.
[03:23:42.240 --> 03:23:44.240]  Вот у нас проблема, что теперь
[03:23:44.240 --> 03:23:46.240]  он может быть размера больше,
[03:23:46.240 --> 03:23:48.240]  чем 2B.
[03:23:48.240 --> 03:23:50.240]  Ну, тогда
[03:23:50.240 --> 03:23:52.240]  просто делим там его
[03:23:52.240 --> 03:23:54.240]  на две части,
[03:23:54.240 --> 03:23:56.240]  выделяем три вершины
[03:23:56.240 --> 03:23:58.240]  и строим вот эту штуку.
[03:24:00.240 --> 03:24:02.240]  Да, но при этом нам
[03:24:02.240 --> 03:24:04.240]  надо ещё следить, но при этом нам
[03:24:04.240 --> 03:24:06.240]  ещё важно следить за тем, чтобы у нас
[03:24:06.240 --> 03:24:08.240]  количество детей было не сильно
[03:24:08.240 --> 03:24:10.240]  мало.
[03:24:12.240 --> 03:24:14.240]  Ну вот.
[03:24:14.240 --> 03:24:16.240]  Ну-ка.
[03:24:16.240 --> 03:24:18.240]  На самом деле первая идея, которая тут возникает,
[03:24:18.240 --> 03:24:20.240]  на самом деле такая. А давайте введём фиктивный
[03:24:20.240 --> 03:24:22.240]  элемент.
[03:24:22.240 --> 03:24:24.240]  Ну, потому что можно там всегда
[03:24:24.240 --> 03:24:26.240]  устроить что-нибудь, что если фиктивных элементов
[03:24:26.240 --> 03:24:28.240]  стало слишком много, то давайте устроим
[03:24:28.240 --> 03:24:30.240]  перестройку.
[03:24:30.240 --> 03:24:32.240]  То есть, если там, скажем, фиктивных
[03:24:32.240 --> 03:24:34.240]  элементов стало больше, чем неэффективных,
[03:24:34.240 --> 03:24:36.240]  примерно равно,
[03:24:36.240 --> 03:24:38.240]  то давайте просто...
[03:24:38.240 --> 03:24:40.240]  То есть, тогда можно
[03:24:40.240 --> 03:24:42.240]  всё
[03:24:42.240 --> 03:24:44.240]  стереть, просто выписать все элементы
[03:24:44.240 --> 03:24:46.240]  и честно из них построить, и это
[03:24:46.240 --> 03:24:48.240]  учётная стоимость
[03:24:48.240 --> 03:24:50.240]  такой операции будет ноль.
[03:24:50.240 --> 03:24:52.240]  Ну, это понятная идея, да?
[03:24:52.240 --> 03:24:54.240]  Это понятная идея?
[03:24:54.240 --> 03:24:56.240]  Так, если кто-то ещё там...
[03:24:56.240 --> 03:24:58.240]  Да, кто тут ещё жив-то вообще?
[03:24:58.240 --> 03:25:00.240]  Как говорят в видео,
[03:25:00.240 --> 03:25:02.240]  поднимите руки, кто ещё жив!
[03:25:04.240 --> 03:25:06.240]  Во, да, честно.
[03:25:06.240 --> 03:25:08.240]  Спасибо.
[03:25:08.240 --> 03:25:10.240]  Ну, так просто уже нет.
[03:25:10.240 --> 03:25:12.240]  Я понимаю, что все уже мёртвые,
[03:25:12.240 --> 03:25:14.240]  но что делать?
[03:25:14.240 --> 03:25:16.240]  Просто финализировать надо.
[03:25:16.240 --> 03:25:18.240]  Так что хорошо.
[03:25:18.240 --> 03:25:20.240]  Но тогда получается, что за О от Б
[03:25:20.240 --> 03:25:22.240]  действительно можно вешать так, чтобы было у нас
[03:25:22.240 --> 03:25:24.240]  действительно тут целых Б детей.
[03:25:24.240 --> 03:25:26.240]  Но просто теперь мы
[03:25:26.240 --> 03:25:28.240]  поддерживаем вариант, что
[03:25:28.240 --> 03:25:30.240]  у каждой вершины детей
[03:25:30.240 --> 03:25:32.240]  ну хотя бы Б пополам.
[03:25:32.240 --> 03:25:34.240]  Да?
[03:25:34.240 --> 03:25:36.240]  То есть, идея будет такая,
[03:25:36.240 --> 03:25:38.240]  что мы честно всё отпиливаем-отпиливаем,
[03:25:38.240 --> 03:25:40.240]  хипы меняем, в корень даже лезть не надо,
[03:25:40.240 --> 03:25:42.240]  потому что и так всё в порядке.
[03:25:42.240 --> 03:25:44.240]  Ну, понятно,
[03:25:44.240 --> 03:25:46.240]  если нас попросили дикриски
[03:25:46.240 --> 03:25:48.240]  от корня какой-то кучи, мы просто делаем дикриски
[03:25:48.240 --> 03:25:50.240]  кучи. А, но не забываем,
[03:25:50.240 --> 03:25:52.240]  что корни вот этих вот всех
[03:25:52.240 --> 03:25:54.240]  куч на самом деле у нас всегда находятся
[03:25:54.240 --> 03:25:56.240]  в какой-то
[03:25:56.240 --> 03:25:58.240]  великой глобальной АФ куче.
[03:25:58.240 --> 03:26:00.240]  Помним, да?
[03:26:00.240 --> 03:26:02.240]  Но помним, что у нас ограничения нам гарантируют,
[03:26:02.240 --> 03:26:04.240]  что у нас как бы там в этой куче всё не более,
[03:26:04.240 --> 03:26:06.240]  чем лог квадрат элементов, поэтому это
[03:26:06.240 --> 03:26:08.240]  нас устраивает.
[03:26:10.240 --> 03:26:12.240]  Так что такая вот примерно
[03:26:12.240 --> 03:26:14.240]  у нас будет такая штука.
[03:26:16.240 --> 03:26:18.240]  Хотя... Нет, хотя нет,
[03:26:18.240 --> 03:26:20.240]  погодите.
[03:26:20.240 --> 03:26:22.240]  Вот.
[03:26:22.240 --> 03:26:24.240]  А что делать-то
[03:26:24.240 --> 03:26:26.240]  с фейковой вершиной?
[03:26:28.240 --> 03:26:30.240]  Ну, а как мы реализуем
[03:26:30.240 --> 03:26:32.240]  фейковую вершину?
[03:26:32.240 --> 03:26:34.240]  Ну, так как мы создаём новый ключ
[03:26:34.240 --> 03:26:36.240]  размера минус, то есть который равен
[03:26:36.240 --> 03:26:38.240]  минус чё-нибудь. Минус бесконечность,
[03:26:38.240 --> 03:26:40.240]  минус две бесконечности, минус три бесконечности
[03:26:40.240 --> 03:26:42.240]  и так далее. Ну, или просто минус бесконечности,
[03:26:42.240 --> 03:26:44.240]  не паримся. Ну, и у нас тогда
[03:26:44.240 --> 03:26:46.240]  минимум вот по всей
[03:26:46.240 --> 03:26:48.240]  куче минус бесконечности.
[03:26:50.240 --> 03:26:52.240]  Максимум может быть.
[03:26:52.240 --> 03:26:54.240]  Да, проблема.
[03:26:56.240 --> 03:26:58.240]  А, ну да, тогда мы минимум не можем делать.
[03:27:00.240 --> 03:27:02.240]  Стоп, ну мы кучу, на что хотим?
[03:27:02.240 --> 03:27:04.240]  На минимум. На минимум, конечно.
[03:27:04.240 --> 03:27:06.240]  Тогда делаем бесконечность.
[03:27:06.240 --> 03:27:08.240]  Так, делаем бесконечность. Нет, вопрос... Правильный был
[03:27:08.240 --> 03:27:10.240]  вопрос. А как нам потом
[03:27:10.240 --> 03:27:12.240]  скажем GetMin сделать
[03:27:12.240 --> 03:27:14.240]  или Extra там? GetMin
[03:27:14.240 --> 03:27:16.240]  как нам сделать?
[03:27:18.240 --> 03:27:20.240]  То есть GetMin нам скажет, вот он нам скажет
[03:27:20.240 --> 03:27:22.240]  минус бесконечность, потому что вот в этом дереве
[03:27:22.240 --> 03:27:24.240]  есть в корне минус бесконечность.
[03:27:26.240 --> 03:27:28.240]  Нет, стоп.
[03:27:28.240 --> 03:27:30.240]  А, блин.
[03:27:32.240 --> 03:27:34.240]  Ну, можно пределить
[03:27:34.240 --> 03:27:36.240]  эти фейковые
[03:27:36.240 --> 03:27:38.240]  корни.
[03:27:38.240 --> 03:27:40.240]  А GetMin мы на сколько хотим делать?
[03:27:40.240 --> 03:27:42.240]  За единицу, естественно.
[03:27:44.240 --> 03:27:46.240]  Естественно мы хотим всё за единицу.
[03:27:46.240 --> 03:27:48.240]  Так.
[03:27:48.240 --> 03:27:50.240]  Вот, вот давайте думать.
[03:27:50.240 --> 03:27:52.240]  Как же тут можно сделать?
[03:28:16.240 --> 03:28:18.240]  Так.
[03:28:18.240 --> 03:28:20.240]  Так.
[03:28:20.240 --> 03:28:22.240]  Так.
[03:28:22.240 --> 03:28:24.240]  Так.
[03:28:24.240 --> 03:28:26.240]  Так.
[03:28:26.240 --> 03:28:28.240]  Так.
[03:28:28.240 --> 03:28:30.240]  Так.
[03:28:30.240 --> 03:28:32.240]  Так.
[03:28:32.240 --> 03:28:34.240]  Так.
[03:28:36.240 --> 03:28:38.240]  Так.
[03:28:38.240 --> 03:28:40.240]  Так.
[03:28:40.240 --> 03:28:42.240]  Так.
[03:28:42.240 --> 03:28:44.240]  Так.
[03:28:44.240 --> 03:28:46.240]  Так.
[03:28:46.240 --> 03:28:48.240]  Так.
[03:28:50.240 --> 03:28:52.240]  Так.
[03:28:54.240 --> 03:28:56.240]  Так.
[03:29:02.240 --> 03:29:04.240]  Ага.
[03:29:08.240 --> 03:29:10.240]  Ну, можно, например, primer
[03:29:10.240 --> 03:29:12.240]  не пласть.
[03:29:12.240 --> 03:29:17.240]  Как у нас устроен IFHIP в вершину?
[03:29:17.240 --> 03:29:21.240]  Это минимум всех детей, плюс она сама.
[03:29:21.240 --> 03:29:27.240]  Но можно просто не класть в IFHIP фейковые вершины
[03:29:27.240 --> 03:29:33.240]  и минимум термия брать как минимум в форме IFHIP?
[03:29:33.240 --> 03:29:37.240]  Нет, ну тогда просто они...
[03:29:37.240 --> 03:29:39.240]  тогда сразу возникает повреждение.
[03:29:39.240 --> 03:29:41.240]  А что делать, если они глубоко проникнут?
[03:29:41.240 --> 03:29:45.240]  То есть эти видосы бесконечности потом глубоко проникнут?
[03:29:45.240 --> 03:29:47.240]  Нет, ну с глубинами у нас проблем нет.
[03:29:47.240 --> 03:29:49.240]  Нет, в смысле нет.
[03:29:49.240 --> 03:29:55.240]  Нет, проблема не с глубиной, а в том, что потом не только в корнях будут минусы бесконечности.
[03:29:55.240 --> 03:29:59.240]  Ну, в плане...
[03:29:59.240 --> 03:30:01.240]  ну вот...
[03:30:01.240 --> 03:30:06.240]  во всем дереве просто не пойдем в IFHIP
[03:30:06.240 --> 03:30:09.240]  фейковую вершину.
[03:30:09.240 --> 03:30:12.240]  Она от этого только уменьшится может.
[03:30:14.240 --> 03:30:16.240]  Не знаю.
[03:30:16.240 --> 03:30:18.240]  Сейчас.
[03:30:28.240 --> 03:30:32.240]  Ну да. Нет, тут вот...
[03:30:32.240 --> 03:30:35.240]  Нет, тут вообще, знаете, как это так...
[03:30:35.240 --> 03:30:39.240]  Как это ни странно, тут вообще предлагают мистическую операцию.
[03:30:39.240 --> 03:30:41.240]  Предлагается, знаете, как?
[03:30:41.240 --> 03:30:44.240]  Строим вот это дерево с минус бесконечности, да?
[03:30:44.240 --> 03:30:47.240]  А в том из этой минус бесконечности неожиданно этот минимум...
[03:30:47.240 --> 03:30:48.240]  то есть минимум достаем.
[03:30:48.240 --> 03:30:49.240]  То есть идея такая.
[03:30:49.240 --> 03:30:50.240]  Так, минимум где-то здесь.
[03:30:50.240 --> 03:30:51.240]  Так, допустим, здесь.
[03:30:51.240 --> 03:30:52.240]  Отлично.
[03:30:52.240 --> 03:30:54.240]  Значит, этот минимум перетаскиваем сюда,
[03:30:54.240 --> 03:30:57.240]  но тогда в этой вершине нет корня, да?
[03:30:57.240 --> 03:30:58.240]  То есть нет значения.
[03:30:58.240 --> 03:30:59.240]  Ну отлично.
[03:30:59.240 --> 03:31:01.240]  Давайте его тоже достаем из детей и так далее.
[03:31:01.240 --> 03:31:03.240]  Ну это за глубину работает?
[03:31:03.240 --> 03:31:05.240]  Да, вот проблема, да.
[03:31:05.240 --> 03:31:06.240]  Так что вот действительно...
[03:31:06.240 --> 03:31:09.240]  Ну в худшем случае это работает за вот...
[03:31:09.240 --> 03:31:10.240]  за глубину.
[03:31:10.240 --> 03:31:12.240]  То есть придется дойти до листа,
[03:31:12.240 --> 03:31:14.240]  может быть там какой-то...
[03:31:14.240 --> 03:31:16.240]  Хотя...
[03:31:16.240 --> 03:31:17.240]  Ну да.
[03:31:17.240 --> 03:31:18.240]  То есть это...
[03:31:18.240 --> 03:31:20.240]  Нет, по сути это означает, что мы тут просто
[03:31:20.240 --> 03:31:24.240]  по какой-то веточке, получается, прогуляемся.
[03:31:24.240 --> 03:31:25.240]  Вот.
[03:31:25.240 --> 03:31:28.240]  И где-то тут еще какого-то ребенка выпилим.
[03:31:28.240 --> 03:31:29.240]  Да?
[03:31:29.240 --> 03:31:30.240]  Вот.
[03:31:30.240 --> 03:31:31.240]  Ну и теперь...
[03:31:31.240 --> 03:31:32.240]  Ну вот.
[03:31:32.240 --> 03:31:33.240]  Ну вот.
[03:31:33.240 --> 03:31:36.240]  Ну возникает такой тонкий момент.
[03:31:36.240 --> 03:31:37.240]  Так.
[03:31:37.240 --> 03:31:40.240]  Ну какой-то у нас тонкий момент возникает.
[03:31:40.240 --> 03:31:43.240]  Тонкий момент, наверное, возникает то, что...
[03:31:43.240 --> 03:31:44.240]  Так.
[03:31:44.240 --> 03:31:46.240]  Хотя да, высота у нас какая-то нетриалиальная.
[03:31:46.240 --> 03:31:50.240]  Да, мы же хотим это за единицу делать.
[03:31:50.240 --> 03:31:51.240]  Ну вот.
[03:31:51.240 --> 03:31:53.240]  Хотя с другой стороны мы и так то, что мы сейчас
[03:31:53.240 --> 03:31:58.240]  говорим, мы делаем вот за столько, да?
[03:31:58.240 --> 03:31:59.240]  Ну мы говорим...
[03:31:59.240 --> 03:32:01.240]  Мы вот объединяли О от В, да?
[03:32:01.240 --> 03:32:04.240]  А высота у нас по любасику не сильно большая.
[03:32:04.240 --> 03:32:05.240]  Ладно.
[03:32:05.240 --> 03:32:06.240]  Есть правда мелкая...
[03:32:06.240 --> 03:32:09.240]  Ну правда тут, конечно, есть такая мелкая закрученная
[03:32:09.240 --> 03:32:10.240]  оговорочка.
[03:32:10.240 --> 03:32:14.240]  Мелкая закрученная оговорочка говорит о том, что там чисто
[03:32:14.240 --> 03:32:17.240]  теоретически там могло так оказаться, что вы...
[03:32:17.240 --> 03:32:18.240]  Ну хорошо.
[03:32:18.240 --> 03:32:20.240]  Так что вы тут пилили, пилили, пилили.
[03:32:20.240 --> 03:32:21.240]  Ну ладно.
[03:32:21.240 --> 03:32:23.240]  Давайте вот для простоты тут лучше плюс бесконечность
[03:32:23.240 --> 03:32:24.240]  повесим, да?
[03:32:24.240 --> 03:32:27.240]  Ну потому что если мы тут отпилили ребеночка, и тут
[03:32:27.240 --> 03:32:30.240]  оказалось В пополам, то придется опять это рекурсивно
[03:32:30.240 --> 03:32:32.240]  вызывать, как бы не зациклиться, да?
[03:32:32.240 --> 03:32:33.240]  Ну я предлагаю так.
[03:32:33.240 --> 03:32:35.240]  Давайте, чтобы сейчас не будем зависать, просто скажем,
[03:32:35.240 --> 03:32:38.240]  что ладно, в случае чего можно сделать глобальную перестройку
[03:32:38.240 --> 03:32:39.240]  и не париться.
[03:32:39.240 --> 03:32:40.240]  Вот.
[03:32:40.240 --> 03:32:42.240]  И ну вот там каждый раз.
[03:32:42.240 --> 03:32:45.240]  Поэтому пишем тут плюс бесконечности, это нормально.
[03:32:45.240 --> 03:32:46.240]  Понятно, да?
[03:32:46.240 --> 03:32:49.240]  То есть получается высота-то у нас меньше, чем вот это
[03:32:49.240 --> 03:32:50.240]  В.
[03:32:50.240 --> 03:32:53.240]  Видим, да?
[03:32:53.240 --> 03:32:54.240]  Вот.
[03:32:54.240 --> 03:32:55.240]  Вот.
[03:32:55.240 --> 03:32:56.240]  Поэтому ничего страшного.
[03:32:56.240 --> 03:32:57.240]  Так.
[03:32:57.240 --> 03:32:58.240]  Так.
[03:32:58.240 --> 03:33:01.240]  То есть получается хорошо.
[03:33:01.240 --> 03:33:05.240]  С объединением, то есть объединением В деревья выкрутились.
[03:33:05.240 --> 03:33:08.240]  Филипп Дмитриевич, можете, пожалуйста, повторить,
[03:33:08.240 --> 03:33:11.240]  потому что вы сначала сказали одно, потом отменили,
[03:33:11.240 --> 03:33:12.240]  потом опять.
[03:33:12.240 --> 03:33:13.240]  Так.
[03:33:13.240 --> 03:33:14.240]  Хорошо.
[03:33:14.240 --> 03:33:17.240]  По итогу, мы сейчас сделаем дерево отрезков или мы просто...
[03:33:17.240 --> 03:33:18.240]  Вот.
[03:33:18.240 --> 03:33:21.240]  Теперь давайте все это соберем с самого начала, все, что
[03:33:21.240 --> 03:33:22.240]  мы попытались придумать.
[03:33:22.240 --> 03:33:23.240]  Да.
[03:33:23.240 --> 03:33:26.240]  Это был семинар в процессе, да, у нас есть идеи, давайте
[03:33:26.240 --> 03:33:27.240]  придумаем алгоритм, да?
[03:33:27.240 --> 03:33:29.240]  Значит, алгоритм получился такой.
[03:33:29.240 --> 03:33:31.240]  Нет, храним все-таки кучу.
[03:33:31.240 --> 03:33:32.240]  Вот.
[03:33:32.240 --> 03:33:35.240]  Значит, храним кучу.
[03:33:35.240 --> 03:33:39.240]  Значит, при этом храним.
[03:33:39.240 --> 03:33:42.240]  Значит, в каждой вершине есть какая-то высота H.
[03:33:42.240 --> 03:33:46.240]  И при этом гарантируется, что у всех детей как минимум,
[03:33:46.240 --> 03:33:50.240]  то есть не более чем В детей, но и не менее чем В пополам.
[03:33:50.240 --> 03:33:52.240]  Даже строго более чем В пополам.
[03:33:52.240 --> 03:33:53.240]  Вот.
[03:33:53.240 --> 03:34:01.240]  И еще гарантируется, что у нас каждого дерева, дерева
[03:34:01.240 --> 03:34:06.240]  каждой, у нас есть несколько деревьев, и деревья в каждой
[03:34:06.240 --> 03:34:09.240]  высоты у нас строго меньше чем В, мы их как-то аккуратно
[03:34:09.240 --> 03:34:10.240]  храним.
[03:34:10.240 --> 03:34:15.240]  Ну там, допустим, у нас там, ну сколько, ну у нас там
[03:34:15.240 --> 03:34:18.240]  сколько существует рангов, допустим, да, столько существует
[03:34:18.240 --> 03:34:20.240]  там, скажем, двухсвязных списков.
[03:34:20.240 --> 03:34:23.240]  Если где-то оказалось, что деревья в В стало, то мы
[03:34:23.240 --> 03:34:27.240]  тут же обе превращаем эти деревья в, соответственно,
[03:34:27.240 --> 03:34:28.240]  одно дерево.
[03:34:31.240 --> 03:34:32.240]  Вот.
[03:34:32.240 --> 03:34:33.240]  Так что вот такой чит.
[03:34:33.240 --> 03:34:35.240]  Я утверждаю, что все эти операции делаются тогда
[03:34:35.240 --> 03:34:38.240]  за О от единицы, кроме дилита.
[03:34:41.240 --> 03:34:42.240]  Вот.
[03:34:42.240 --> 03:34:43.240]  Ну как мы делаем дилит?
[03:34:43.240 --> 03:34:46.240]  Ну дилит предлагается просто делать предельно честно,
[03:34:46.240 --> 03:34:50.240]  то есть как бы там заменяем на плюс бесконечности,
[03:34:50.240 --> 03:34:52.240]  делаем честный севдаун.
[03:34:52.240 --> 03:34:55.240]  Да, у нас тут будет фиктивный элемент, но я предлагаю
[03:34:55.240 --> 03:34:56.240]  его даже не удалить.
[03:34:56.240 --> 03:34:59.240]  Ну можно его удалить, здесь вот эскорли, вот снизу
[03:34:59.240 --> 03:35:01.240]  выпилить, а можно не удалять.
[03:35:01.240 --> 03:35:04.240]  Как я сказал, у нас, то есть там в оригинальной структуре
[03:35:04.240 --> 03:35:07.240]  такого нет, но как бы лайфхак вида, что храним фиктивные
[03:35:07.240 --> 03:35:11.240]  элементы, их стало слишком много, давайте, то есть давайте
[03:35:11.240 --> 03:35:14.240]  сделаем перестройку, он продолжит работать.
[03:35:16.240 --> 03:35:18.240]  Это такие, это наши локальные чипы будут.
[03:35:20.240 --> 03:35:21.240]  Вот.
[03:35:23.240 --> 03:35:25.240]  Ну вот, соответственно, значит, если с дилитом
[03:35:25.240 --> 03:35:29.240]  разобрались, insert это просто вставка нового дерева
[03:35:29.240 --> 03:35:34.240]  высоты 0, и возможно вот это вот объединение, если там
[03:35:34.240 --> 03:35:36.240]  на нулевом уровне образовалась бета, мы их объединяем
[03:35:36.240 --> 03:35:39.240]  и получается новое дерево высоты 1.
[03:35:39.240 --> 03:35:42.240]  Если на высоте 1 тоже оказалась бета, понятно, делаем, делаем,
[03:35:42.240 --> 03:35:44.240]  делаем, в общем, пока не схлопнется.
[03:35:44.240 --> 03:35:46.240]  А как мы еще раз объединяем?
[03:35:46.240 --> 03:35:49.240]  Ну, нет, мы объединяем не два дерева, мы объединяем
[03:35:49.240 --> 03:35:51.240]  б деревьев одинаковой высоты.
[03:35:51.240 --> 03:35:52.240]  Да.
[03:35:52.240 --> 03:35:53.240]  Как мы это делаем?
[03:35:53.240 --> 03:35:54.240]  Мы это делаем вот как.
[03:35:54.240 --> 03:35:57.240]  Мы создаем вершину высоты на единичку больше.
[03:35:59.240 --> 03:36:00.240]  Вот.
[03:36:00.240 --> 03:36:04.240]  После этого объявляем плюс бесконечность и честно
[03:36:04.240 --> 03:36:06.240]  делаем, и честно ее опускаем.
[03:36:08.240 --> 03:36:11.240]  Опускаем ее мы, пользуясь тем, что высота дерева меньше,
[03:36:11.240 --> 03:36:12.240]  чем б.
[03:36:15.240 --> 03:36:18.240]  Чтобы b у нас логорифом, а высота дерева log n поделить
[03:36:18.240 --> 03:36:20.240]  на log log n.
[03:36:27.240 --> 03:36:30.240]  Потому что, ну как бы, если у нас светвление, ну у нас
[03:36:30.240 --> 03:36:33.240]  по крайней мере в идеале было, да, что у каждой вершины
[03:36:33.240 --> 03:36:36.240]  значит светвление, то есть каждой вершине соответствует
[03:36:36.240 --> 03:36:38.240]  вот большое количество листов.
[03:36:39.240 --> 03:36:41.240]  По крайней мере теоретически виртуально.
[03:36:42.240 --> 03:36:43.240]  Понимаете, да?
[03:36:43.240 --> 03:36:44.240]  Вот.
[03:36:45.240 --> 03:36:47.240]  И суммарное количество листов у нас типа n.
[03:36:48.240 --> 03:36:49.240]  Вот.
[03:36:50.240 --> 03:36:53.240]  Так что вот такой неожиданный чит получается.
[03:36:55.240 --> 03:36:59.240]  Так, а вот поподробнее про перестройку.
[03:36:59.240 --> 03:37:00.240]  Как мы это делаем?
[03:37:00.240 --> 03:37:02.240]  Ну идея очень простая.
[03:37:02.240 --> 03:37:04.240]  Если мы выяснили, что у нас количество эффективных
[03:37:04.240 --> 03:37:06.240]  элементов становится больше либо равным, чем количество
[03:37:06.240 --> 03:37:09.240]  не эффективных, тогда мы что делаем?
[03:37:09.240 --> 03:37:11.240]  Мы просто все убираем.
[03:37:11.240 --> 03:37:13.240]  То есть мы просто выписываем все элементы в ряд.
[03:37:14.240 --> 03:37:16.240]  Просто выстраиваем все элементы в ряд.
[03:37:16.240 --> 03:37:20.240]  И заново за линию строим эти деревья.
[03:37:22.240 --> 03:37:23.240]  Ну как мы их строим?
[03:37:23.240 --> 03:37:25.240]  Ну их в принципе...
[03:37:26.240 --> 03:37:27.240]  Ну то есть просто честно.
[03:37:27.240 --> 03:37:30.240]  То есть на самом деле мы делаем из них, соответственно,
[03:37:30.240 --> 03:37:33.240]  сколько там было элементов нулевой высоты, а дальше
[03:37:33.240 --> 03:37:36.240]  просто предельно честно, то есть их схлопываем,
[03:37:36.240 --> 03:37:39.240]  вот по б штук одинаковых, так же как делали раньше.
[03:37:39.240 --> 03:37:44.240]  То есть мы вот избавились от половин эффективных,
[03:37:44.240 --> 03:37:47.240]  и мы опять начинаем их склеивать при помощи эффективных.
[03:37:47.240 --> 03:37:48.240]  Ну вот.
[03:37:48.240 --> 03:37:49.240]  Ну да.
[03:37:50.240 --> 03:37:51.240]  Вот.
[03:37:51.240 --> 03:37:52.240]  Ну вот.
[03:37:52.240 --> 03:37:53.240]  Ну как бы да.
[03:37:53.240 --> 03:37:56.240]  То есть остается только аккуратно убедиться в том,
[03:37:56.240 --> 03:37:58.240]  что это все работает действительно за адекватную этим точку.
[03:37:58.240 --> 03:38:01.240]  Перестройка будет нормально работать?
[03:38:01.240 --> 03:38:04.240]  Ну потому что везде будут появляться разные монетки.
[03:38:04.240 --> 03:38:06.240]  Перестройка оплачивается так.
[03:38:06.240 --> 03:38:09.240]  Давайте каждый раз, когда вы удаляете элемент,
[03:38:09.240 --> 03:38:14.240]  когда вы удаляете на каждый удаленно элемент кладем ну допустим,
[03:38:14.240 --> 03:38:15.240]  пять монеток.
[03:38:15.240 --> 03:38:17.240]  Пять красных монеток.
[03:38:17.240 --> 03:38:19.240]  Да, у нас будут монетки разных цветов.
[03:38:19.240 --> 03:38:22.240]  Вот в данной случае пять красных монеток.
[03:38:22.240 --> 03:38:24.240]  Тогда значит, идея такая.
[03:38:24.240 --> 03:38:27.240]  Предположим, что выяснилось, что у вас как бы
[03:38:27.240 --> 03:38:29.240]  эффективных элементов не меньше чем неэффективных, да?
[03:38:29.240 --> 03:38:32.500]  А неэффективных у вас допустим, L.
[03:38:32.500 --> 03:38:35.240]  Тогда у вас получается что у вас есть пять L-монеток
[03:38:35.240 --> 03:38:39.440]  на то, чтобы сделать перестройку.
[03:38:39.440 --> 03:38:44.440]  То есть перестройку оплачиваем красными монетами, да?
[03:38:44.440 --> 03:38:48.440]  Да, перестройку мы оплачиваем этими красными монетами.
[03:38:48.440 --> 03:38:53.440]  Ну еще у нас же еще эффективные добавляются, когда мы их сливаем, да?
[03:38:53.440 --> 03:38:56.440]  Ну да, есть такая, да.
[03:38:56.440 --> 03:39:00.440]  Тогда мы тоже должны как у вас красными монетами.
[03:39:00.440 --> 03:39:02.440]  Так, ой-ой-ой.
[03:39:02.640 --> 03:39:04.640]  Но, смотрите, нет, ну тут идея такая.
[03:39:04.640 --> 03:39:06.640]  На самом деле, когда вы уж прям в явном виде строите,
[03:39:06.640 --> 03:39:10.640]  можно на самом деле эффективных элементов не делать.
[03:39:10.640 --> 03:39:14.640]  Ну а вместо этого, так, ну вот.
[03:39:14.640 --> 03:39:18.640]  Ну а вместо этого действительно, то есть действительно
[03:39:18.640 --> 03:39:23.640]  уже делать на самом деле как-нибудь по-аккуратнее.
[03:39:23.640 --> 03:39:26.640]  Сейчас, нет, подождите, я не понял, в чем проблема.
[03:39:26.640 --> 03:39:29.640]  Вот вы говорили, что мы когда удаляем, складываем 5 красных монет.
[03:39:29.640 --> 03:39:30.640]  Да.
[03:39:30.840 --> 03:39:32.840]  А, ну хотя да, в общем неважно.
[03:39:32.840 --> 03:39:35.840]  Потому что на самом деле, да, заметим, что действительно
[03:39:35.840 --> 03:39:38.840]  удаляемых монеток, в общем-то, будет в b раз меньше, действительно.
[03:39:38.840 --> 03:39:41.840]  То есть ладно, если мы будем сейчас честно делать, как мы сейчас делали, да?
[03:39:41.840 --> 03:39:44.840]  То есть фиктивные элементы будут создаваться,
[03:39:44.840 --> 03:39:46.840]  но у нас просто на этот момент этих фиктивных элементов
[03:39:46.840 --> 03:39:50.840]  будет уже не l, а получается l поделить на b.
[03:39:50.840 --> 03:39:54.840]  Сейчас, на этот момент, это на какой?
[03:39:54.840 --> 03:39:57.840]  Ну, напрямую на этот момент.
[03:39:58.040 --> 03:40:00.040]  На какой?
[03:40:00.040 --> 03:40:02.040]  Ну, напрямую сейчас.
[03:40:06.040 --> 03:40:09.040]  Сейчас, а в чем еще раз проблема?
[03:40:09.040 --> 03:40:11.040]  Скажите, пожалуйста.
[03:40:11.040 --> 03:40:15.040]  Ну, проблема в том, что как бы, вы правильно отметили,
[03:40:15.040 --> 03:40:18.040]  что у нас проблема в том, что у нас фиктивные элементы прямо сейчас тоже есть.
[03:40:21.040 --> 03:40:22.040]  Вот.
[03:40:22.040 --> 03:40:26.040]  И нам как бы надо проследить, что нам как бы
[03:40:26.240 --> 03:40:30.240]  старых 5l монеток хватит и на то, чтобы это все построить,
[03:40:30.240 --> 03:40:34.240]  и на то, чтобы эти монетки сохранились.
[03:40:34.240 --> 03:40:37.240]  Да, то есть нам нужно еще приберечь на будущее какие-то.
[03:40:37.240 --> 03:40:38.240]  Ну да, получается так.
[03:40:38.240 --> 03:40:42.240]  Или как-то более аккуратно построить, чтобы от них избавиться.
[03:40:46.240 --> 03:40:47.240]  А мы не можем?
[03:40:47.240 --> 03:40:48.240]  Чего?
[03:40:48.240 --> 03:40:49.240]  Ничего-то не понятно.
[03:40:49.440 --> 03:40:50.440]  Вот.
[03:40:53.440 --> 03:40:56.440]  Нет, на самом деле чит очень простой.
[03:40:56.440 --> 03:40:59.440]  Нет, ну с другой стороны, реально, у нас же новых фиктивных станет не l,
[03:40:59.440 --> 03:41:01.440]  а станет l делить на b.
[03:41:01.440 --> 03:41:07.440]  Поэтому можно как-то выделить столько монет, чтобы этим тоже хватило.
[03:41:07.440 --> 03:41:10.440]  Сейчас, не l, а l делить на b.
[03:41:10.440 --> 03:41:14.440]  Ну вот, когда начали перестройку, у нас было сколько-то плохих фиктивных.
[03:41:14.440 --> 03:41:15.440]  Было, да.
[03:41:15.440 --> 03:41:18.440]  Потом их сократилось в b раз после перестройки.
[03:41:18.640 --> 03:41:19.640]  Так.
[03:41:19.640 --> 03:41:22.640]  Ну вот, кажется, что если их сократилось в b раз, то все в принципе хорошо.
[03:41:22.640 --> 03:41:26.640]  Но это правда соговорка, если их сократилось именно в b раз.
[03:41:26.640 --> 03:41:27.640]  Ну а?
[03:41:28.640 --> 03:41:30.640]  Потому что, ну не совсем в b,
[03:41:30.640 --> 03:41:32.640]  потому что если у нас сейчас l элементов,
[03:41:32.640 --> 03:41:35.640]  то как бы для того, чтобы получить деревья первого уровня,
[03:41:35.640 --> 03:41:38.640]  у нас получится l делить на b фиксированных элементов.
[03:41:39.640 --> 03:41:43.640]  Но, но эти, да, но эти корни теперь тоже надо объединять,
[03:41:43.640 --> 03:41:46.640]  потому что l делить на b может оказаться больше, чем b.
[03:41:46.840 --> 03:41:48.840]  А, ну правда не сильно страшно,
[03:41:48.840 --> 03:41:50.840]  потому что получится монеток l делить на b,
[03:41:50.840 --> 03:41:52.840]  плюс l делить на b в квадрате,
[03:41:52.840 --> 03:41:54.840]  плюс и так далее.
[03:41:54.840 --> 03:41:55.840]  Ну, короче, это...
[03:41:55.840 --> 03:41:59.840]  Да, есть подозрение, что это меньше либо равно 2 l поделить на b.
[03:41:59.840 --> 03:42:01.840]  Ладно, если b...
[03:42:01.840 --> 03:42:03.840]  Ну, n хотя бы 2, давайте сделаем.
[03:42:05.840 --> 03:42:06.840]  Ну хорошо, да, если...
[03:42:06.840 --> 03:42:07.840]  Ну ладно.
[03:42:07.840 --> 03:42:10.840]  Нет, ну даже, ну может хотя бы 4 тогда, да?
[03:42:10.840 --> 03:42:13.840]  Вот, ну хорошо, да, если, да.
[03:42:14.040 --> 03:42:16.040]  При достаточно большом...
[03:42:16.040 --> 03:42:17.040]  Ну вот.
[03:42:17.040 --> 03:42:19.040]  Нет, ну очень не так страшно,
[03:42:19.040 --> 03:42:21.040]  учитывая, что у нас 5 l монеток, как вы помните, да?
[03:42:21.040 --> 03:42:24.040]  А, ну хотя нет, там же по 5 монеток найти удаленные,
[03:42:24.040 --> 03:42:28.040]  но это, ну очень понятно, что это меньше l в несколько раз,
[03:42:28.040 --> 03:42:30.040]  и получается, что запас монеток есть.
[03:42:30.040 --> 03:42:33.040]  Там все остальное лечится там, что не 5 или 10 l.
[03:42:33.040 --> 03:42:35.040]  Вот это у нас будут на экзамене спрашивать?
[03:42:35.040 --> 03:42:37.040]  О, как же!
[03:42:37.040 --> 03:42:39.040]  То есть потом вот это надо будет рассказывать?
[03:42:39.040 --> 03:42:41.040]  Ну я вам так скажу.
[03:42:41.040 --> 03:42:42.040]  Ну да.
[03:42:42.040 --> 03:42:44.040]  У нас всегда есть статья.
[03:42:44.040 --> 03:42:46.040]  Это на УД, да?
[03:42:46.040 --> 03:42:48.040]  Нет, ну нет.
[03:42:48.040 --> 03:42:50.040]  Нет, да, я думаю тут.
[03:42:50.040 --> 03:42:51.040]  Ну вот.
[03:42:51.040 --> 03:42:52.040]  Ну хорошо.
[03:42:52.040 --> 03:42:53.040]  В общем, таким образом, хорошо.
[03:42:53.040 --> 03:42:55.040]  С перестройкой разобрались вроде живы, да?
[03:42:55.040 --> 03:42:56.040]  Вроде да.
[03:42:56.040 --> 03:42:57.040]  Так, теперь.
[03:42:57.040 --> 03:42:58.040]  Что мы теперь, ладно.
[03:42:58.040 --> 03:43:00.040]  С фиктивными элементами разобрались?
[03:43:03.040 --> 03:43:05.040]  Значит, что у нас теперь?
[03:43:07.040 --> 03:43:08.040]  Ну вот.
[03:43:08.040 --> 03:43:10.040]  Замечаем, да, что с фиктивными...
[03:43:11.040 --> 03:43:13.040]  Ну правда, и в чем важно, что все фиктивные элементы,
[03:43:13.040 --> 03:43:15.040]  они равны плюс бесконечности,
[03:43:15.040 --> 03:43:17.040]  и поэтому ни на что не влияют.
[03:43:17.040 --> 03:43:18.040]  Помните, да?
[03:43:18.040 --> 03:43:20.040]  Что теперь можно сделать?
[03:43:20.040 --> 03:43:22.040]  Так, что нам теперь еще надо проговорить?
[03:43:22.040 --> 03:43:24.040]  Ну, кстати, у нас же нет плюс бесконечности.
[03:43:24.040 --> 03:43:26.040]  Нет, наоборот, почему?
[03:43:26.040 --> 03:43:29.040]  У нас же фишка в том, что когда вы объединяли b деревья,
[03:43:29.040 --> 03:43:31.040]  вы сказали, что это фиктивный элемент плюс бесконечность.
[03:43:31.040 --> 03:43:33.040]  Потому что в результате чего после того,
[03:43:33.040 --> 03:43:35.040]  как вы сделали объединение,
[03:43:35.040 --> 03:43:37.040]  вы эту плюс бесконечность посевдаунили вниз?
[03:43:38.040 --> 03:43:39.040]  Да.
[03:43:39.040 --> 03:43:40.040]  Вот.
[03:43:40.040 --> 03:43:42.040]  Просто севдаун вы делаете за высоту дерева,
[03:43:42.040 --> 03:43:44.040]  а высота дерева все равно меньше, чем b,
[03:43:44.040 --> 03:43:46.040]  поэтому вас это устраивает.
[03:43:52.040 --> 03:43:54.040]  Что такое число в куче?
[03:43:58.040 --> 03:44:00.040]  Обычно в этом месте подразумевается,
[03:44:00.040 --> 03:44:03.040]  что просто у вас не так жестко подогнаны ограничения.
[03:44:03.040 --> 03:44:05.040]  Там часто бывает даже более сильно,
[03:44:05.040 --> 03:44:07.040]  потому что вы даже не два в степени w,
[03:44:07.040 --> 03:44:09.040]  а, может быть, два в степени w минус 1 и минус 2,
[03:44:09.040 --> 03:44:11.040]  и вообще там едва ли не w пополам даже.
[03:44:13.040 --> 03:44:14.040]  Да.
[03:44:20.040 --> 03:44:22.040]  Нет, бесконечность в константе вы не сделаете.
[03:44:23.040 --> 03:44:25.040]  Нет, реально, в общем, это решаемо.
[03:44:27.040 --> 03:44:29.040]  Можете хранить рядом с каждым элементом флаг
[03:44:29.040 --> 03:44:31.040]  на тему того небесконечности я.
[03:44:31.040 --> 03:44:33.040]  То есть я нормальный или ненормальный?
[03:44:37.040 --> 03:44:38.040]  Вот так.
[03:44:41.040 --> 03:44:43.040]  Теперь возникает вопрос,
[03:44:43.040 --> 03:44:47.040]  когда вы делаете вот это вот каскадинг выпиливания?
[03:44:52.040 --> 03:44:54.040]  Здесь, правда, технология тоже стандартная.
[03:44:58.040 --> 03:45:00.040]  Там, конечно, важно, чтобы
[03:45:02.040 --> 03:45:04.040]  во-первых, да, во-первых, мы замечаем,
[03:45:04.040 --> 03:45:06.040]  что теперь давайте думать,
[03:45:06.040 --> 03:45:10.040]  как нам теперь вот тут следить за тем,
[03:45:10.040 --> 03:45:13.040]  чтобы у нас объединение вот эти суммарно работали адекватно.
[03:45:15.040 --> 03:45:17.040]  Ну ладно, сейчас мы поверили,
[03:45:17.040 --> 03:45:19.040]  что при просто вот перестройке
[03:45:19.040 --> 03:45:21.040]  на самом деле мы деревья эти с нуля
[03:45:21.040 --> 03:45:23.040]  действительно суммарно за линию построим.
[03:45:23.040 --> 03:45:25.040]  Но я думаю, вы уже убедились,
[03:45:25.040 --> 03:45:27.040]  что да, мы их построим за l
[03:45:27.040 --> 03:45:29.040]  плюс l делить на b, плюс l делить на b квадрат,
[03:45:29.040 --> 03:45:31.040]  а это что, это вот это?
[03:45:31.040 --> 03:45:33.040]  Ну реально во времени, понятно, да?
[03:45:33.040 --> 03:45:35.040]  И на это у нас монетки есть.
[03:45:37.040 --> 03:45:39.040]  Но у нас же все время возникают
[03:45:39.040 --> 03:45:41.040]  вот эти вот ситуации,
[03:45:41.040 --> 03:45:43.040]  давайте в каждый момент времени
[03:45:43.040 --> 03:45:45.040]  добавлять новое дерево или выпиливать откуда-то
[03:45:45.040 --> 03:45:47.040]  и неожиданно обнаруживать,
[03:45:47.040 --> 03:45:49.040]  что если у нас есть b деревья,
[03:45:49.040 --> 03:45:51.040]  давайте их объедение.
[03:45:51.040 --> 03:45:53.040]  Как тогда это сделать?
[03:45:53.040 --> 03:45:55.040]  Ну сделаем тогда.
[03:45:55.040 --> 03:45:57.040]  Ну тогда можно сделать действительно
[03:45:57.040 --> 03:45:59.040]  ну как же нам следить?
[03:45:59.040 --> 03:46:01.040]  Ну в идеале конечно хочется следить,
[03:46:01.040 --> 03:46:03.040]  что допустим каждый раз,
[03:46:03.040 --> 03:46:05.040]  когда у нас есть какое-то дерево,
[03:46:05.040 --> 03:46:07.040]  на этом вот отдельное дерево
[03:46:07.040 --> 03:46:09.040]  в глобальном списке,
[03:46:09.040 --> 03:46:11.040]  мы храним там какие-нибудь зеленые монетки.
[03:46:13.040 --> 03:46:15.040]  А какую проблему мы говорим?
[03:46:15.040 --> 03:46:17.040]  Ну следующая проблема,
[03:46:17.040 --> 03:46:19.040]  мы говорим, что мы хотим оплачивать,
[03:46:19.040 --> 03:46:21.040]  ну что у нас периодически в списке
[03:46:21.040 --> 03:46:23.040]  появляются новые деревья, да?
[03:46:23.040 --> 03:46:25.040]  И причем они не просто появляются,
[03:46:25.040 --> 03:46:27.040]  они не просто появляются,
[03:46:27.040 --> 03:46:29.040]  а мы говорим, что если у таких деревьев
[03:46:29.040 --> 03:46:31.040]  такой высоты в списке стала b,
[03:46:31.040 --> 03:46:33.040]  то значит их надо объединить.
[03:46:33.040 --> 03:46:35.040]  Мы хотим найти монетки,
[03:46:35.040 --> 03:46:37.040]  за счет которых мы это хотим делать.
[03:46:37.040 --> 03:46:39.040]  На каждое дерево кладем по монетке?
[03:46:39.040 --> 03:46:41.040]  Да, ну теперь по новой монетке, по зеленой.
[03:46:43.040 --> 03:46:45.040]  Это же какая-то проблема у уровня,
[03:46:45.040 --> 03:46:47.040]  что у нас там была биномиальная куча?
[03:46:49.040 --> 03:46:51.040]  Нет, ну там мы как-то выдали...
[03:46:51.040 --> 03:46:53.040]  Нет, ну раньше...
[03:46:53.040 --> 03:46:55.040]  В биномиальной куче мы эту проблему не решали.
[03:46:55.040 --> 03:46:57.040]  Ну да, ну хорошо, в куче фибоначи.
[03:46:57.040 --> 03:46:59.040]  В куче фибоначи мы решали проблему,
[03:46:59.040 --> 03:47:01.040]  но там это решало...
[03:47:01.040 --> 03:47:03.040]  Но там это как-то... там читерские это решали...
[03:47:03.040 --> 03:47:05.040]  Ну вот.
[03:47:05.040 --> 03:47:07.040]  Но там просто...
[03:47:07.040 --> 03:47:09.040]  Там это никак не решалось,
[03:47:09.040 --> 03:47:11.040]  потому что в куче фибоначи, к сожалению,
[03:47:11.040 --> 03:47:13.040]  нам было плевать, сколько деревьев у нас
[03:47:13.040 --> 03:47:15.040]  в корневом списке и какие они.
[03:47:15.040 --> 03:47:17.040]  То есть там просто говорилось,
[03:47:17.040 --> 03:47:19.040]  что мы от вершин не имеем права
[03:47:19.040 --> 03:47:21.040]  много отпиливать.
[03:47:21.040 --> 03:47:23.040]  Это нам нужно было для того, чтобы у нас...
[03:47:23.040 --> 03:47:25.040]  Если у нас дерево высоты H,
[03:47:25.040 --> 03:47:27.040]  реально высоты H,
[03:47:27.040 --> 03:47:29.040]  то в нем не слишком мало вершин.
[03:47:31.040 --> 03:47:33.040]  Вот.
[03:47:33.040 --> 03:47:35.040]  Мы тут вообще хоть когда-то удаляем вершины.
[03:47:35.040 --> 03:47:37.040]  Ну, получается...
[03:47:37.040 --> 03:47:39.040]  Мы добавляем,
[03:47:39.040 --> 03:47:41.040]  а если много фиктивных,
[03:47:41.040 --> 03:47:43.040]  то делаем перестройку.
[03:47:43.040 --> 03:47:45.040]  У нас как будто вообще как...
[03:47:45.040 --> 03:47:47.040]  Короче, у каждой вершины степень В получается.
[03:47:47.040 --> 03:47:49.040]  Ну да.
[03:47:49.040 --> 03:47:51.040]  А, слушайте,
[03:47:51.040 --> 03:47:53.040]  у нас тогда вообще чит.
[03:47:53.040 --> 03:47:55.040]  Ведь мы же тут тоже выпиливать никого не обязаны, кстати.
[03:47:55.040 --> 03:47:57.040]  А тут это где?
[03:47:57.040 --> 03:47:59.040]  Ну, потому что вспомним.
[03:47:59.040 --> 03:48:01.040]  Как мы делаем дикриски, давайте вспомним.
[03:48:01.040 --> 03:48:03.040]  А, нет, хотя нет, обязаны.
[03:48:03.040 --> 03:48:05.040]  Как мы делаем дикриски?
[03:48:05.040 --> 03:48:07.040]  Мы берем элемент,
[03:48:07.040 --> 03:48:09.040]  и просто выпиливаем это дерево,
[03:48:09.040 --> 03:48:11.040]  отправляем его в корень.
[03:48:13.040 --> 03:48:15.040]  То есть поэтому, к сожалению,
[03:48:15.040 --> 03:48:17.040]  выпил необходим.
[03:48:19.040 --> 03:48:21.040]  Вот.
[03:48:21.040 --> 03:48:23.040]  Но, правда, сам по себе он еще страшен,
[03:48:23.040 --> 03:48:25.040]  потому что один выпил, это не страшно.
[03:48:25.040 --> 03:48:27.040]  Но тогда идея такая.
[03:48:29.040 --> 03:48:31.040]  Ну вот.
[03:48:31.040 --> 03:48:33.040]  Но тогда просто идея такая.
[03:48:33.040 --> 03:48:35.040]  Как мы уже убедились, там достаточно,
[03:48:35.040 --> 03:48:37.040]  что когда у нас появляется новое дерево,
[03:48:37.040 --> 03:48:39.040]  на нем должно храниться какая-нибудь зеленая монетка
[03:48:39.040 --> 03:48:41.040]  на его будущее объединение, правда?
[03:48:41.040 --> 03:48:43.040]  А лучше две.
[03:48:43.040 --> 03:48:45.040]  Тогда там легко убедиться,
[03:48:45.040 --> 03:48:47.040]  что там даже каскадинг объявлений будут,
[03:48:47.040 --> 03:48:49.040]  эти вот объединения будут нормальны.
[03:48:49.040 --> 03:48:51.040]  Но просто фишка теперь такая.
[03:48:51.040 --> 03:48:53.040]  Когда вы делаете дикриски,
[03:48:53.040 --> 03:48:55.040]  значит, идея такая.
[03:48:55.040 --> 03:48:57.040]  Вы кладете,
[03:48:57.040 --> 03:48:59.040]  то есть вы выдаете
[03:48:59.040 --> 03:49:01.040]  желтые ноты.
[03:49:01.040 --> 03:49:03.040]  То есть вы на это выдаете, скажем,
[03:49:03.040 --> 03:49:05.040]  три желтые монетки.
[03:49:05.040 --> 03:49:07.040]  И тогда идея такая.
[03:49:07.040 --> 03:49:09.040]  Одна из этих желтых монеток
[03:49:09.040 --> 03:49:11.040]  отправляется вместе с этим деревом
[03:49:11.040 --> 03:49:13.040]  с зеленой.
[03:49:13.040 --> 03:49:15.040]  Вот.
[03:49:15.040 --> 03:49:17.040]  Оставшиеся две желтые монетки,
[03:49:17.040 --> 03:49:19.040]  мы тогда что делаем?
[03:49:19.040 --> 03:49:21.040]  Мы говорим так, мы его выпилили, смотрим на родителя.
[03:49:21.040 --> 03:49:23.040]  Если на родителя
[03:49:23.040 --> 03:49:25.040]  желтые,
[03:49:25.040 --> 03:49:27.040]  если у нас желтый нот,
[03:49:27.040 --> 03:49:29.040]  то есть если у нас тут еще нот,
[03:49:29.040 --> 03:49:31.040]  то есть от того, что мы выпилили здесь детей,
[03:49:31.040 --> 03:49:33.040]  мы, значит, сюда кладем две желтые монетки.
[03:49:33.040 --> 03:49:35.040]  Да?
[03:49:39.040 --> 03:49:41.040]  Можете повторить.
[03:49:41.040 --> 03:49:43.040]  Ну, еще раз.
[03:49:43.040 --> 03:49:45.040]  Какое предположение? Я ничего не предположил.
[03:49:47.040 --> 03:49:49.040]  Ну, я говорю, значит,
[03:49:49.040 --> 03:49:51.040]  когда мы говорим дикриски
[03:49:51.040 --> 03:49:53.040]  от вершины, мы даем на эту операцию
[03:49:53.040 --> 03:49:55.040]  три желтые монетки.
[03:49:55.040 --> 03:49:57.040]  Одна желтая монетка сразу превращается в зеленую
[03:49:57.040 --> 03:49:59.040]  и кладется на вот это
[03:49:59.040 --> 03:50:01.040]  дерево в корень.
[03:50:01.040 --> 03:50:03.040]  Ну, мы поддерживаем вариант,
[03:50:03.040 --> 03:50:05.040]  что у нас на каждом дереве
[03:50:05.040 --> 03:50:07.040]  хранится монетка.
[03:50:07.040 --> 03:50:09.040]  Две желтые монетки отправляются
[03:50:09.040 --> 03:50:11.040]  в ту вершину, от которой мы только что
[03:50:11.040 --> 03:50:13.040]  отпилились.
[03:50:13.040 --> 03:50:15.040]  Тогда, в тот момент, когда тут станет
[03:50:15.040 --> 03:50:17.040]  B пополам детей,
[03:50:17.040 --> 03:50:19.040]  у нас уже в этой вершине накопится
[03:50:19.040 --> 03:50:21.040]  B желтых монеток.
[03:50:21.040 --> 03:50:23.040]  И получается, что
[03:50:23.040 --> 03:50:25.040]  ну, можно сказать, тогда
[03:50:25.040 --> 03:50:27.040]  действительно будет B желтых монеток,
[03:50:27.040 --> 03:50:29.040]  и тогда можно действительно эту вершину
[03:50:29.040 --> 03:50:31.040]  куда-нибудь перетащить.
[03:50:31.040 --> 03:50:33.040]  Потому что мы...
[03:50:33.040 --> 03:50:35.040]  Дело в том, что B пополам, это для нас
[03:50:35.040 --> 03:50:37.040]  недопустимо, поэтому мы как бы эту вершину
[03:50:37.040 --> 03:50:39.040]  удалим и добавим в корень уже
[03:50:39.040 --> 03:50:41.040]  не одно дерево, а B пополам дереве.
[03:50:43.040 --> 03:50:45.040]  Но в соответствующее
[03:50:45.040 --> 03:50:47.040]  количество монеток у нас на это есть.
[03:50:49.040 --> 03:50:51.040]  А вот такой вопрос, а вот когда мы делаем
[03:50:51.040 --> 03:50:53.040]  дикриски, мы можем не выпиливать
[03:50:53.040 --> 03:50:55.040]  ее, а заменять на фиктивную?
[03:50:55.040 --> 03:50:57.040]  Заменять на фиктивную...
[03:50:57.040 --> 03:50:59.040]  Понимаете, если бы она была листом,
[03:50:59.040 --> 03:51:01.040]  пожалуйста.
[03:51:01.040 --> 03:51:03.040]  А вот если она оказалась в середине,
[03:51:03.040 --> 03:51:05.040]  а такое может быть, то увы.
[03:51:07.040 --> 03:51:09.040]  Да, вот в чем проблема, да.
[03:51:09.040 --> 03:51:11.040]  Дело в том, что у нас
[03:51:11.040 --> 03:51:13.040]  как бы в дикриски запрещен синдал.
[03:51:15.040 --> 03:51:17.040]  А вот когда мы делали с деревом отрезков,
[03:51:17.040 --> 03:51:19.040]  какая у нас была проблема?
[03:51:19.040 --> 03:51:21.040]  Почему мы отказались?
[03:51:21.040 --> 03:51:23.040]  Ну...
[03:51:27.040 --> 03:51:29.040]  Какая у нас проблема была?
[03:51:29.040 --> 03:51:31.040]  Ну просто тогда непонятно было,
[03:51:31.040 --> 03:51:33.040]  как дикриски без всяких аккуратных
[03:51:33.040 --> 03:51:35.040]  сифтапов, как дикриски
[03:51:35.040 --> 03:51:37.040]  без сифтапов делать.
[03:51:37.040 --> 03:51:39.040]  Потому что сейчас у нас как бы локальная
[03:51:39.040 --> 03:51:41.040]  структура, которая позволяет нам, если тут
[03:51:41.040 --> 03:51:43.040]  что-то отпилилось, ну и ладно.
[03:51:43.040 --> 03:51:45.040]  Не, ну можно сделать дерево отрезков,
[03:51:45.040 --> 03:51:47.040]  и тогда просто если делать дикриски, то
[03:51:47.040 --> 03:51:49.040]  заменяем просто на плюс бесконечность.
[03:51:49.040 --> 03:51:51.040]  Да, но тогда придется прибежаться по всем родителям
[03:51:51.040 --> 03:51:53.040]  и тут все минимумы обновить.
[03:51:55.040 --> 03:51:57.040]  Вот, мы вот ровно из-за этого
[03:51:57.040 --> 03:51:59.040]  мы вообще страдаем тут и делаем какие-то
[03:51:59.040 --> 03:52:01.040]  адские амортизации.
[03:52:03.040 --> 03:52:05.040]  Но общая технология такая.
[03:52:05.040 --> 03:52:07.040]  Вот.
[03:52:07.040 --> 03:52:09.040]  Так что вот такие вот веселые дела.
[03:52:11.040 --> 03:52:13.040]  Значит ладно, давайте времени у нас уже много.
[03:52:13.040 --> 03:52:15.040]  Хотя вот общую суть сказали,
[03:52:15.040 --> 03:52:17.040]  значит теперь остается только так.
[03:52:17.040 --> 03:52:19.040]  Ну или к AF-хипу.
[03:52:19.040 --> 03:52:21.040]  Потому что теперь самое смешное,
[03:52:21.040 --> 03:52:23.040]  как свести теперь AF-хип,
[03:52:23.040 --> 03:52:25.040]  вот сам по себе это АС,
[03:52:25.040 --> 03:52:27.040]  сводится к Q-хипу.
[03:52:27.040 --> 03:52:29.040]  Он тоже все делает за О от единицы,
[03:52:29.040 --> 03:52:31.040]  но у него еще более жесткие ограничения.
[03:52:31.040 --> 03:52:33.040]  СЗ меньше либо равно
[03:52:33.040 --> 03:52:35.040]  логарифом в степени
[03:52:35.040 --> 03:52:37.040]  1 делить на 5.
[03:52:37.040 --> 03:52:39.040]  Ладно, 4.
[03:52:41.040 --> 03:52:43.040]  Ну сколько-нибудь.
[03:52:43.040 --> 03:52:45.040]  Как это сделать?
[03:52:45.040 --> 03:52:47.040]  Очень просто.
[03:52:47.040 --> 03:52:49.040]  Технология абсолютно та же,
[03:52:49.040 --> 03:52:51.040]  только B здесь будет равно
[03:52:55.040 --> 03:52:57.040]  сколько?
[03:53:01.040 --> 03:53:03.040]  Да, вот тут надо вот еще.
[03:53:03.040 --> 03:53:05.040]  Ну давайте скажем, что B равно
[03:53:05.040 --> 03:53:07.040]  лог 1 делить на 5.
[03:53:11.040 --> 03:53:13.040]  А не на 10?
[03:53:13.040 --> 03:53:15.040]  Не на 10.
[03:53:15.040 --> 03:53:17.040]  Зачем на 10?
[03:53:17.040 --> 03:53:19.040]  Тут мы взяли корень
[03:53:19.040 --> 03:53:21.040]  из допустимого асфера.
[03:53:23.040 --> 03:53:25.040]  Так, сейчас.
[03:53:25.040 --> 03:53:27.040]  Ну погодите, значит тут B
[03:53:27.040 --> 03:53:29.040]  лог 1 делить на вот.
[03:53:29.040 --> 03:53:31.040]  Нет, ну там вот идея такая, ну давайте просто так вот возьмем.
[03:53:31.040 --> 03:53:33.040]  Нет, просто тогда будет маленькая
[03:53:33.040 --> 03:53:35.040]  приятная вещь.
[03:53:35.040 --> 03:53:37.040]  Высота каждого дерева у нас будет какая?
[03:53:37.040 --> 03:53:39.040]  Ну в идеале появляется
[03:53:39.040 --> 03:53:41.040]  константная.
[03:53:41.040 --> 03:53:43.040]  Филипп Дмитриевич,
[03:53:43.040 --> 03:53:45.040]  такой вопрос.
[03:53:45.040 --> 03:53:47.040]  А вот если мы делаем дикрески,
[03:53:47.040 --> 03:53:49.040]  мы выпиливаем, да?
[03:53:49.040 --> 03:53:51.040]  Что с детьми происходит?
[03:53:51.040 --> 03:53:53.040]  Нет, погодите, мы же дерево
[03:53:53.040 --> 03:53:55.040]  не выпиливаем. Мы дерево просто берем
[03:53:55.040 --> 03:53:57.040]  эту вершину со всеми ее потомками,
[03:53:57.040 --> 03:53:59.040]  прям как дерево, и вешаем сюда.
[03:53:59.040 --> 03:54:01.040]  То есть с потомками ничего не происходит.
[03:54:01.040 --> 03:54:03.040]  Так, у нас, видите, просто приятная локальная структура,
[03:54:03.040 --> 03:54:05.040]  в которой как бы, да,
[03:54:05.040 --> 03:54:07.040]  их низ с низами никак не связывает.
[03:54:07.040 --> 03:54:09.040]  Вот.
[03:54:09.040 --> 03:54:11.040]  Но теперь думаем,
[03:54:11.040 --> 03:54:13.040]  вот если у нас B, лог 1 делить на 5n,
[03:54:13.040 --> 03:54:15.040]  тогда заметим, что высота
[03:54:15.040 --> 03:54:17.040]  каждого дерева, вообще говоря, константа.
[03:54:17.040 --> 03:54:19.040]  Там что-то типа 11.
[03:54:21.040 --> 03:54:23.040]  Вот.
[03:54:23.040 --> 03:54:25.040]  Ну в принципе это означает,
[03:54:25.040 --> 03:54:27.040]  что эту штуку вообще можно
[03:54:27.040 --> 03:54:29.040]  полегче реализовывать, то есть можно там действительно никого
[03:54:29.040 --> 03:54:31.040]  не удалять, все севтапы, севдауны
[03:54:31.040 --> 03:54:33.040]  предельно честно делать и не париться.
[03:54:33.040 --> 03:54:35.040]  Вот, по идее, да?
[03:54:35.040 --> 03:54:37.040]  Ну вот, ну а можно сделать
[03:54:37.040 --> 03:54:39.040]  вот просто примерно так же, просто обнаруживать,
[03:54:39.040 --> 03:54:41.040]  что дилит у нас будет работать
[03:54:41.040 --> 03:54:43.040]  за от тоже логарифом там
[03:54:43.040 --> 03:54:45.040]  вот этого по основанию этого и получится
[03:54:45.040 --> 03:54:47.040]  единица.
[03:54:51.040 --> 03:54:53.040]  Так, тяжело что-то будет, может быть,
[03:54:53.040 --> 03:54:55.040]  помедленнее.
[03:54:55.040 --> 03:54:57.040]  То есть мы получается сделали то же самое?
[03:54:57.040 --> 03:54:59.040]  Да, но только тут размер всегда не более,
[03:54:59.040 --> 03:55:01.040]  чем лог квадрат n, а B мы сказали
[03:55:01.040 --> 03:55:03.040]  теперь лог 1 делить на 5 от того же самого n.
[03:55:05.040 --> 03:55:07.040]  Вот.
[03:55:07.040 --> 03:55:09.040]  Тогда у нас что получилось?
[03:55:09.040 --> 03:55:11.040]  Тогда утверждается, что во-первых,
[03:55:11.040 --> 03:55:13.040]  высота каждого дерева константа.
[03:55:17.040 --> 03:55:19.040]  Потому что высота дерева
[03:55:19.040 --> 03:55:21.040]  это что-то типа логарифом
[03:55:21.040 --> 03:55:23.040]  этого по основанию вот это.
[03:55:27.040 --> 03:55:29.040]  Логично, да?
[03:55:29.040 --> 03:55:31.040]  Ну, давайте написать это.
[03:55:31.040 --> 03:55:33.040]  Ну, если это константа,
[03:55:33.040 --> 03:55:35.040]  то...
[03:55:37.040 --> 03:55:39.040]  Ну, давайте.
[03:55:39.040 --> 03:55:41.040]  Вот.
[03:55:41.040 --> 03:55:43.040]  Это равно
[03:55:43.040 --> 03:55:45.040]  логарифом в квадрате n
[03:55:45.040 --> 03:55:47.040]  поделить на
[03:55:47.040 --> 03:55:49.040]  логарифом
[03:55:49.040 --> 03:55:51.040]  в степени
[03:55:51.040 --> 03:55:53.040]  одна пятая n.
[03:55:53.040 --> 03:55:55.040]  Это равно 2 лог
[03:55:55.040 --> 03:55:57.040]  лог n делить
[03:55:57.040 --> 03:55:59.040]  на полтора.
[03:55:59.040 --> 03:56:01.040]  Вот.
[03:56:01.040 --> 03:56:03.040]  Вот, ура.
[03:56:03.040 --> 03:56:05.040]  Ну, нет.
[03:56:05.040 --> 03:56:07.040]  В принципе, это вообще вам дает возможность
[03:56:07.040 --> 03:56:09.040]  вообще особо не заморачиваться,
[03:56:09.040 --> 03:56:11.040]  а просто честно делать
[03:56:11.040 --> 03:56:13.040]  предельно честные деревья
[03:56:13.040 --> 03:56:15.040]  и в них честно делать севтап и севдаун
[03:56:15.040 --> 03:56:17.040]  и не заморачиваться.
[03:56:21.040 --> 03:56:23.040]  Вот.
[03:56:23.040 --> 03:56:25.040]  А, ну и все.
[03:56:25.040 --> 03:56:27.040]  Почему?
[03:56:27.040 --> 03:56:29.040]  Как мы связали угол квадрата с этим?
[03:56:29.040 --> 03:56:31.040]  А, сейчас.
[03:56:31.040 --> 03:56:33.040]  Ну, n напоминаю у нас как всегда.
[03:56:33.040 --> 03:56:35.040]  Можете считать, что там n не происходит
[03:56:35.040 --> 03:56:37.040]  два в степени бипность.
[03:56:37.040 --> 03:56:39.040]  То есть, тут как бы n тоже
[03:56:39.040 --> 03:56:41.040]  это два в степени бипность.
[03:56:41.040 --> 03:56:43.040]  То есть, видите, это более сильные условия.
[03:56:43.040 --> 03:56:45.040]  Да, но мы к нему
[03:56:45.040 --> 03:56:47.040]  смогли свести так, как мы смогли
[03:56:47.040 --> 03:56:49.040]  разделить типа
[03:56:49.040 --> 03:56:51.040]  кучу-кучу, короче, сделать и из-за этого у нас...
[03:56:51.040 --> 03:56:53.040]  Ну, типа того, да.
[03:56:53.040 --> 03:56:55.040]  Вот.
[03:56:55.040 --> 03:56:57.040]  Ну, там вот одна пятая там.
[03:56:57.040 --> 03:56:59.040]  Вот.
[03:56:59.040 --> 03:57:01.040]  Ну, там действительно можно одна пятая,
[03:57:01.040 --> 03:57:03.040]  но там...
[03:57:03.040 --> 03:57:05.040]  Ну, то еще заметим, что
[03:57:05.040 --> 03:57:07.040]  если у нас есть несколько деревьев,
[03:57:07.040 --> 03:57:09.040]  то эти деревья тоже нам придется хранить
[03:57:09.040 --> 03:57:11.040]  в какой-то куче, да?
[03:57:11.040 --> 03:57:13.040]  А зачем нам несколько деревьев, если мы можем, по идее,
[03:57:13.040 --> 03:57:15.040]  делать честную кучу?
[03:57:15.040 --> 03:57:17.040]  Ну, если у нас высота конца.
[03:57:17.040 --> 03:57:19.040]  А, ну да.
[03:57:19.040 --> 03:57:21.040]  Да, согласен.
[03:57:21.040 --> 03:57:23.040]  Да, все, вообще не заморачиваемся.
[03:57:23.040 --> 03:57:25.040]  Да, честно скажем,
[03:57:25.040 --> 03:57:27.040]  статья, конечно, написана немножко не так,
[03:57:27.040 --> 03:57:29.040]  но как всегда,
[03:57:29.040 --> 03:57:31.040]  это как всегда, это называется, да.
[03:57:31.040 --> 03:57:33.040]  Мы поняли основные идеи, дальше добыслим.
[03:57:33.040 --> 03:57:35.040]  Возможно, на экзамене вы придумаете что-то третье.
[03:57:35.040 --> 03:57:37.040]  И это будет даже круто.
[03:57:37.040 --> 03:57:39.040]  Да, в стрессовые ситуации.
[03:57:39.040 --> 03:57:41.040]  Ну, почему в стрессовые?
[03:57:41.040 --> 03:57:43.040]  Знаете, это даже на самом деле правильнее,
[03:57:43.040 --> 03:57:45.040]  потому что, как бы, знаете,
[03:57:45.040 --> 03:57:47.040]  не очень интересно, если вы просто выучите,
[03:57:47.040 --> 03:57:49.040]  вообще отторабаните и все. Интереснее, если вы
[03:57:49.040 --> 03:57:51.040]  как бы эти идеи освоите и на основе этого что-то придумаете,
[03:57:51.040 --> 03:57:53.040]  потому что это, собственно,
[03:57:53.040 --> 03:57:55.040]  ну, как я уже понял,
[03:57:55.040 --> 03:57:57.040]  это гораздо лучше,
[03:57:57.040 --> 03:57:59.040]  потому что, понятно, просто в самом по себе
[03:57:59.040 --> 03:58:01.040]  вызубливание этого алгоритма смысла
[03:58:01.040 --> 03:58:03.040]  действительно никакого.
[03:58:03.040 --> 03:58:05.040]  Ну вот, то есть, как бы, я это хотел
[03:58:05.040 --> 03:58:07.040]  рассказать именно потому, что вот действительно,
[03:58:07.040 --> 03:58:09.040]  то есть рассказать, потому что есть вот такие вот
[03:58:09.040 --> 03:58:11.040]  такого рода технологии,
[03:58:11.040 --> 03:58:13.040]  которые позволяют вам тут сделать вот единицы
[03:58:13.040 --> 03:58:15.040]  и при этом уменьшать ограничения.
[03:58:15.040 --> 03:58:17.040]  Потому что, к сожалению,
[03:58:17.040 --> 03:58:19.040]  я не могу вам рассказать полностью о Atomic Hip,
[03:58:19.040 --> 03:58:21.040]  потому что мне придется рассказать, что будет здесь.
[03:58:21.040 --> 03:58:23.040]  А ку-хип она вот
[03:58:23.040 --> 03:58:25.040]  по объему насколько соотносится
[03:58:25.040 --> 03:58:27.040]  с вот этим? Слушайте, расстрел.
[03:58:27.040 --> 03:58:29.040]  Я думаю, как минимум одно...
[03:58:29.040 --> 03:58:31.040]  Я подозреваю, что мне надо было бы недельки 2-3
[03:58:31.040 --> 03:58:33.040]  на это потратить.
[03:58:33.040 --> 03:58:35.040]  Потому что там надо и Fusion-хипы там всякие рассказывать,
[03:58:35.040 --> 03:58:37.040]  там всякие x-y деревья, там это
[03:58:37.040 --> 03:58:39.040]  подходить-подходить, и там еще получился
[03:58:39.040 --> 03:58:41.040]  какие-то свойства изучать, и там бы получился
[03:58:41.040 --> 03:58:43.040]  еще какой-то эпичный, обзубодробительный
[03:58:43.040 --> 03:58:45.040]  автомат. Честно скажу.
[03:58:45.040 --> 03:58:47.040]  Если вы, скажем так,
[03:58:47.040 --> 03:58:49.040]  если хочется на это послушать,
[03:58:49.040 --> 03:58:51.040]  то лекции прошлого года остались.
[03:58:51.040 --> 03:58:53.040]  Нет, не хочется.
[03:58:53.040 --> 03:58:55.040]  Нет, я не прошу вызубывать
[03:58:55.040 --> 03:58:57.040]  к экзамену, хотя там...
[03:58:57.040 --> 03:58:59.040]  В итоге дойти ку-хипа
[03:58:59.040 --> 03:59:01.040]  так удалось, какие-то Fusion-штуки
[03:59:01.040 --> 03:59:03.040]  удалось сделать,
[03:59:03.040 --> 03:59:05.040]  но при этом
[03:59:05.040 --> 03:59:07.040]  вот это вот мы там обсудили
[03:59:07.040 --> 03:59:09.040]  какие-то общие положения, и в экзамен это уже не выносилось.
[03:59:09.040 --> 03:59:11.040]  Потому что это уже действительно расстрел.
[03:59:11.040 --> 03:59:13.040]  То есть может быть
[03:59:13.040 --> 03:59:15.040]  в будущем когда-нибудь,
[03:59:15.040 --> 03:59:17.040]  когда первое и восьмое мая не будут выпадать
[03:59:17.040 --> 03:59:19.040]  на понедельник, мы сможем
[03:59:19.040 --> 03:59:21.040]  когда-нибудь это сделать.
[03:59:21.040 --> 03:59:23.040]  Но вам повезло.
[03:59:23.040 --> 03:59:25.040]  Вот так.
[03:59:25.040 --> 03:59:27.040]  Хотя не знаю, там лишние занятия иногда можно потратить
[03:59:27.040 --> 03:59:29.040]  на то, чтобы доказать обратную функцию
[03:59:29.040 --> 03:59:31.040]  Германова с Эдеми, конечно.
[03:59:31.040 --> 03:59:33.040]  Интересно, кто-то общает эти решения,
[03:59:33.040 --> 03:59:35.040]  эти статьи их отчитывает, потому что
[03:59:35.040 --> 03:59:37.040]  кажется, что тут очень все такое
[03:59:37.040 --> 03:59:39.040]  хлипкое, что если в каком-то месте
[03:59:39.040 --> 03:59:41.040]  конец там не сойдется,
[03:59:41.040 --> 03:59:43.040]  но смотрите, нет,
[03:59:43.040 --> 03:59:45.040]  я вам так скажу,
[03:59:45.040 --> 03:59:47.040]  как это работает. Во-первых, вычитывает сам автор,
[03:59:47.040 --> 03:59:49.040]  потому что одно дело на пальтор, а другое дело,
[03:59:49.040 --> 03:59:51.040]  когда вы это пишете, вы это сами думаете.
[03:59:51.040 --> 03:59:53.040]  Во-вторых,
[03:59:53.040 --> 03:59:55.040]  дальше безопасность такая. Во-вторых,
[03:59:55.040 --> 03:59:57.040]  сам автор, это активно,
[03:59:57.040 --> 03:59:59.040]  как бы понятно, что если вы первые, кто это придумал,
[03:59:59.040 --> 04:00:01.040]  то естественно там вас тестируют по максимуму.
[04:00:01.040 --> 04:00:03.040]  Поэтому вы там
[04:00:03.040 --> 04:00:05.040]  рассказываете до конференция и прям вот очень
[04:00:05.040 --> 04:00:07.040]  активно обсуждаете.
[04:00:07.040 --> 04:00:09.040]  И ваши коллеги просто вас там тоже в этом месте
[04:00:09.040 --> 04:00:11.040]  все эти вопросы задают, собственно,
[04:00:11.040 --> 04:00:13.040]  активно и валят. В-третьих,
[04:00:13.040 --> 04:00:15.040]  как устроена статья?
[04:00:15.040 --> 04:00:17.040]  То есть статья устроена еще так, что вы написали этот
[04:00:17.040 --> 04:00:19.040]  текст, прям подробно написали.
[04:00:19.040 --> 04:00:21.040]  То есть не так, как я. Я еще иногда
[04:00:21.040 --> 04:00:23.040]  рассказываю предположение, что вот есть такая
[04:00:23.040 --> 04:00:25.040]  идея, давайте вместе подумаем и выкопаем.
[04:00:25.040 --> 04:00:27.040]  Там расположено не так.
[04:00:27.040 --> 04:00:29.040]  Вот можете просто сравнить, как я вот
[04:00:29.040 --> 04:00:31.040]  дерево доминаторов рассказал вот вчера,
[04:00:31.040 --> 04:00:33.040]  вот просто на записи, и что написано в оригинальной
[04:00:33.040 --> 04:00:35.040]  статье Тарьяна.
[04:00:35.040 --> 04:00:37.040]  В оригинальной статье Тарьяна там есть, конечно,
[04:00:37.040 --> 04:00:39.040]  намеки на то, что все поселось из этой идеи
[04:00:39.040 --> 04:00:41.040]  какой-либо примерно, но там будут
[04:00:41.040 --> 04:00:43.040]  просто формально там 5 CRM
[04:00:43.040 --> 04:00:45.040]  и несколько LEM, каждый из которых
[04:00:45.040 --> 04:00:47.040]  скрупулезно доказано.
[04:00:47.040 --> 04:00:49.040]  Вот, исходя из этого там
[04:00:49.040 --> 04:00:51.040]  показан алгоритм.
[04:00:51.040 --> 04:00:53.040]  Вот.
[04:00:53.040 --> 04:00:55.040]  То есть здесь будет тоже вам там подробно напишут.
[04:00:55.040 --> 04:00:57.040]  Вот, например, тут есть статья, кстати, выяснилось,
[04:00:57.040 --> 04:00:59.040]  что она, оказывается, легко скачивается и даже
[04:00:59.040 --> 04:01:01.040]  без заморочек. Там будет
[04:01:01.040 --> 04:01:03.040]  сказано, что тут у этой кучи там есть
[04:01:03.040 --> 04:01:05.040]  операция insert от X, delete
[04:01:05.040 --> 04:01:07.040]  от X, decrys от XW,
[04:01:07.040 --> 04:01:09.040]  ripple от X, там
[04:01:09.040 --> 04:01:11.040]  popcue будет, например,
[04:01:11.040 --> 04:01:13.040]  consolidate, prune.
[04:01:13.040 --> 04:01:15.040]  Каждая операция будет прописана,
[04:01:15.040 --> 04:01:17.040]  что она делает, и, собственно, будет дан
[04:01:17.040 --> 04:01:19.040]  анализ. Правда, честно скажу,
[04:01:19.040 --> 04:01:21.040]  анализ, к сожалению, тоже немножко на пальцах.
[04:01:21.040 --> 04:01:23.040]  Вот я и говорю,
[04:01:23.040 --> 04:01:25.040]  что у нас тут многие какие-то вещи, они там...
[04:01:25.040 --> 04:01:27.040]  Да, но! Но как статья устроена?
[04:01:27.040 --> 04:01:29.040]  Ну, например, статьи, математические статьи
[04:01:29.040 --> 04:01:31.040]  просто так в журнал не попадают.
[04:01:31.040 --> 04:01:33.040]  Потому что статья шлется
[04:01:33.040 --> 04:01:35.040]  рецензенту. Рецензент
[04:01:35.040 --> 04:01:37.040]  сидит, и у него там первая задача,
[04:01:37.040 --> 04:01:39.040]  во-первых, действительно убедиться, что багов нет.
[04:01:39.040 --> 04:01:41.040]  То есть если бага,
[04:01:41.040 --> 04:01:43.040]  если баги есть или есть какие-то вопросы
[04:01:43.040 --> 04:01:45.040]  непонятки, он просто присылает вопросы.
[04:01:45.040 --> 04:01:47.040]  Или, может быть, напрямую общается.
[04:01:47.040 --> 04:01:49.040]  Ну, дальше все зависит
[04:01:49.040 --> 04:01:51.040]  от... Ну, дальше, конечно, там всякие
[04:01:51.040 --> 04:01:53.040]  приколы есть, потому что у меня в научной работе
[04:01:53.040 --> 04:01:55.040]  встретился прикол, что вот там есть
[04:01:55.040 --> 04:01:57.040]  одна теорема, которая доказана тремя авторами,
[04:01:57.040 --> 04:01:59.040]  точнее, тремя группами авторов в трех статьях
[04:01:59.040 --> 04:02:01.040]  87, 89
[04:02:01.040 --> 04:02:03.040]  и 91-х годов.
[04:02:03.040 --> 04:02:05.040]  Более того, ну, ладно,
[04:02:05.040 --> 04:02:07.040]  допустим, ну,
[04:02:07.040 --> 04:02:09.040]  допустим, можно иногда объяснить, что там
[04:02:09.040 --> 04:02:11.040]  статьи вышли в разных журналах, они
[04:02:11.040 --> 04:02:13.040]  друг от друга не знали, потому что одна статья, на самом деле,
[04:02:13.040 --> 04:02:15.040]  между ее написанием и выходом
[04:02:15.040 --> 04:02:17.040]  иногда там несколько месяцев, а то и пару лет
[04:02:17.040 --> 04:02:19.040]  проходит. Тем более, что одна вышла
[04:02:19.040 --> 04:02:21.040]  в американском журнале, другая
[04:02:21.040 --> 04:02:23.040]  в польском. Но
[04:02:23.040 --> 04:02:25.040]  статьи 87 и 89
[04:02:25.040 --> 04:02:27.040]  91-го года вышли в одном
[04:02:27.040 --> 04:02:29.040]  и том же журнале.
[04:02:31.040 --> 04:02:33.040]  Почему так произошло?
[04:02:33.040 --> 04:02:35.040]  В статье 91-го года, кстати,
[04:02:35.040 --> 04:02:37.040]  от нашего соотечественника по фамилии Гутки,
[04:02:37.040 --> 04:02:39.040]  значит, там написано следующее.
[04:02:39.040 --> 04:02:41.040]  Значит, да, вот есть такая красивая теорема.
[04:02:41.040 --> 04:02:43.040]  Мы читали статью 87-го года
[04:02:43.040 --> 04:02:45.040]  и ничего не поняли.
[04:02:47.040 --> 04:02:49.040]  Вот, вообще ничего не поняли.
[04:02:49.040 --> 04:02:51.040]  Но потом в какой-то момент мы узнали, что
[04:02:51.040 --> 04:02:53.040]  редактор, то есть те, кто редактировал,
[04:02:53.040 --> 04:02:55.040]  те, кто это вычитывал, тоже
[04:02:55.040 --> 04:02:57.040]  ничего не поняли, но просто поверили умным
[04:02:57.040 --> 04:02:59.040]  авторам.
[04:02:59.040 --> 04:03:01.040]  А вторые там просто Франко Вивальди,
[04:03:01.040 --> 04:03:03.040]  это там действительно серьезная величина.
[04:03:03.040 --> 04:03:05.040]  Вот, поэтому как бы там, возможно,
[04:03:05.040 --> 04:03:07.040]  немножко им не продавили, но просто
[04:03:07.040 --> 04:03:09.040]  поняли, что ничего не поняли. Поэтому
[04:03:09.040 --> 04:03:11.040]  редактура согласилась тем, что будет полезно,
[04:03:11.040 --> 04:03:13.040]  если мы просто там
[04:03:13.040 --> 04:03:15.040]  дадим ту же теорему,
[04:03:15.040 --> 04:03:17.040]  но, на наш взгляд,
[04:03:17.040 --> 04:03:19.040]  более простым доказательствам.
[04:03:19.040 --> 04:03:21.040]  И дается просто другое, ну, по крайней мере, это понятно.
[04:03:21.040 --> 04:03:23.040]  С 87-й год не знаю, но
[04:03:23.040 --> 04:03:25.040]  доказательства 91-го года действительно понятны.
[04:03:25.040 --> 04:03:27.040]  Вот, разобраться можно.
[04:03:27.040 --> 04:03:29.040]  То есть вот есть еще такие ситуации.
[04:03:29.040 --> 04:03:31.040]  Ну, это такая по мелочи. Но в целом,
[04:03:31.040 --> 04:03:33.040]  на самом деле, все-таки подобные вещи там, на самом деле,
[04:03:33.040 --> 04:03:35.040]  профессионалами активно вычитываются,
[04:03:35.040 --> 04:03:37.040]  обсуждаются на конференциях там, так что вот тут
[04:03:37.040 --> 04:03:39.040]  все достаточно... То есть в этом
[04:03:39.040 --> 04:03:41.040]  смысле достаточно жесткенько.
[04:03:41.040 --> 04:03:43.040]  Вот.
[04:03:43.040 --> 04:03:45.040]  Ну и потом, не говоря уже о том, что
[04:03:45.040 --> 04:03:47.040]  как бы там, как бы есть еще вариант,
[04:03:47.040 --> 04:03:49.040]  что можно уесть. Потому что, как бы,
[04:03:49.040 --> 04:03:51.040]  если вы вывести статью, то, конечно, пока
[04:03:51.040 --> 04:03:53.040]  она будет считаться, что вы победили,
[04:03:53.040 --> 04:03:55.040]  пока никто не нашел лажу.
[04:03:55.040 --> 04:03:57.040]  Причинка в том, что кто-то лажу может и найти.
[04:03:57.040 --> 04:03:59.040]  Если он найдет прям содержательную лажу,
[04:03:59.040 --> 04:04:01.040]  ну вот, а потом, собственно, сам
[04:04:01.040 --> 04:04:03.040]  подсунет там, собственно, решение, то
[04:04:03.040 --> 04:04:05.040]  получится, что он отберет у вас, собственно,
[04:04:05.040 --> 04:04:07.040]  как бы звание
[04:04:07.040 --> 04:04:09.040]  решателя проблемы.
[04:04:09.040 --> 04:04:11.040]  Вот.
[04:04:11.040 --> 04:04:13.040]  Так что тут еще такие.
[04:04:13.040 --> 04:04:15.040]  Но, впрочем, на тему сомнительности я говорю.
[04:04:15.040 --> 04:04:17.040]  То есть, на самом деле, может быть, тут, конечно, быстровато немножко
[04:04:17.040 --> 04:04:19.040]  прошли, но на самом деле эта идея не самая
[04:04:19.040 --> 04:04:21.040]  страшная. То есть там автомат в кухе
[04:04:21.040 --> 04:04:23.040]  пейс сильно сложнее, я вас уверяю.
[04:04:23.040 --> 04:04:25.040]  Но мы его и не обсуждаем.
[04:04:25.040 --> 04:04:27.040]  Так что вот,
[04:04:27.040 --> 04:04:29.040]  ладненько. Так, думаю,
[04:04:29.040 --> 04:04:31.040]  наверное, на этом все.
