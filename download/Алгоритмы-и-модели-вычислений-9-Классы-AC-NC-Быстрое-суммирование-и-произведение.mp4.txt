[00:00.000 --> 00:18.560]  В конце прошлого занятия мы изучили модель тем из функциональных элементов и, соответственно,
[00:19.560 --> 00:31.560]  Сегодня мы внутри него поизучаем более подробно. Давайте я вкратце напомню, как эти схемы выглядят.
[00:31.560 --> 00:47.400]  Схемы функциональных элементов. Можно себе представлять напрямую какую-то микросхему.
[00:47.400 --> 00:56.240]  Сюда заходят проводки. На каждом проводке может быть либо 0, либо 1, то есть либо сигнала нет,
[00:56.240 --> 01:02.720]  либо сигнал есть. На выходе может быть тоже много проводков, но я буду изучать ситуацию, когда на
[01:02.720 --> 01:08.120]  выходе один проводок. Ну и внутри разного рода элементов можно использовать любые логические
[01:08.120 --> 01:24.400]  функции. Стандартный набор, когда тут конъюнция, дезюнция или отрицание. Соответственно,
[01:24.400 --> 01:32.640]  есть много элементов, которые как-то спаяны между собой, так чтобы не было цикла. То есть можно считать,
[01:32.640 --> 01:38.760]  что даже если стрелочек нет на ребрах, можно считать, что они как бы сверху вниз идут, и тогда,
[01:38.760 --> 01:48.920]  соответственно, циклов нет. Ну и, соответственно, если сюда на вход подают 0 и 1, то дальше они все
[01:48.920 --> 01:55.480]  проходят через эти элементы. Каждый раз на выходном проводе появляется значение соответствующей
[01:55.480 --> 02:00.960]  функции. Ну и в итоге вот здесь тоже получается какое-то значение. Ну и то, что здесь, это будет
[02:00.960 --> 02:06.320]  функция, которая зависит от того, что на входе. Соответственно, получается некоторая функция,
[02:06.320 --> 02:18.720]  у которой фиксируется число аргументов булевых. Ну и, соответственно, есть два параметра у схемы.
[02:19.200 --> 02:43.880]  Размер это число элементов и глубина. Глубина это самый длинный путь от входа к выходу.
[02:43.880 --> 02:57.400]  Ну и, соответственно, мы обсуждали теорему, что если у нас размер экспоненциальный,
[02:57.400 --> 03:04.400]  то можно вообще любую функцию выразить. Да, и тут как бы нет противоречия, потому что тут для
[03:04.400 --> 03:11.400]  каждой функции не обязан быть вычислимой, потому что для каждой длины у нас своя схема. Поэтому
[03:11.560 --> 03:16.440]  последовательная схема это бесконечный объект и, соответственно, и будет столько же,
[03:16.440 --> 03:23.040]  сколько и всех функций, в отличие от вычислимых функций. Вот, но, например, если потребовать,
[03:23.040 --> 03:29.400]  что схема каким-то образом вычислима зависит от m, то тогда сразу мы возвращаемся в теорию
[03:29.400 --> 03:39.920]  вычислимых функций. Вот, но, как правило, нас интересует схема не экспоненциального размера,
[03:39.920 --> 03:47.440]  а полиномиального, потому что это вообще модель чего? Это модель какого-то реального устройства,
[03:47.440 --> 03:53.240]  какой-то реальной микросхемы, которая спаяна из каких-то франзистов, релеев и так далее,
[03:53.240 --> 04:00.280]  и, соответственно, ей на вход какие-то сигналы подаются, и что-то происходит на выходе. Вот,
[04:00.280 --> 04:04.960]  вот размер – это, грубо говоря, стоимость схемы, то есть сколько элементов нам нужно, чтобы ее
[04:04.960 --> 04:10.160]  спаять. Вот, и если размер будет экспоненциальный, то тогда это очень дорого будет такой схемам
[04:10.160 --> 04:16.120]  паять, и место намного занимает. Вот, так что это не очень хорошее решение. Вот, а вот глубина
[04:16.120 --> 04:21.840]  отвечает за быстродействие, да, потому что, как бы, каждый, да, по каждому проводку сигнал идет какое-то
[04:21.840 --> 04:28.080]  время, да, и пока он сверху до низу дойдет, это как раз более-менее глубина. Вот, поэтому нас и
[04:28.080 --> 04:33.920]  то и другое интересует, в принципе. Вот, ну и мы обсуждали, значит, что p-slash-poly
[04:33.920 --> 04:41.920]  значит, p-slash-poly – это класс языков, да, если у нас на выходе один бит, да, то это то же самое,
[04:41.920 --> 04:48.080]  что распознавание языка, да, то есть верно ли, что то, что на входе, принадлежит какому-то
[04:48.080 --> 04:56.960]  языку. Значит, p-slash-poly – это класс языков, класс языков, распознаваемых,
[04:56.960 --> 05:20.320]  имействованный схем, имействованный схем размера полинома от n. Вот, ну а нас интересует,
[05:20.320 --> 05:30.000]  значит, нас интересуют классы схем еще маленькой глубины. Так, давайте вот я сюда перейду,
[05:30.000 --> 05:43.120]  это значит будет новая, новая тема, новые классы. Значит, nc с индексом d. Значит, это класс языков,
[05:43.120 --> 05:59.800]  класс языков, распознаваемых, семействованный схем, семействованный схем полиномиального
[05:59.800 --> 06:21.080]  размера и глубины, вот большой, вот логарифм n в степени d. Вот, значит, буквы nc на самом деле
[06:21.080 --> 06:26.800]  ничего специального не обозначают, этот класс имеет как бы назван в честь конкретного человека,
[06:26.800 --> 06:37.680]  а именно nc означает nix-класс. А ник это Николас Пипинджер, в общем, такой ученый. Не знаю,
[06:37.680 --> 06:46.000]  почему так сложилось. Видимо, он там как-то о нем заговорил в какой-то момент, в честь него назвали.
[06:46.000 --> 06:52.720]  Есть еще аналогичный класс sc, sc – это Steve's-класс в честь Тивина Кука,
[06:52.720 --> 07:05.480]  которую теряем Кукулевину. А там, кажется, сейчас, я не помню, что такое sc, может посмотреть. Там
[07:05.480 --> 07:11.840]  что-то одновременно про, а, кажется, это полиномиальное время и полиномиальная память,
[07:11.840 --> 07:16.000]  потому что логарифмическая память автоматически по полиномиальное время, а полиномиальная
[07:16.000 --> 07:23.360]  логарифмическая уже не автоматически. И наоборот тоже. Если то и другое, то это Steve's-класс.
[07:23.360 --> 07:42.920]  Вот, а еще есть аналог, аналог ac с индексом D. Это аналогично, но элементы конъюнкции
[07:43.480 --> 07:53.880]  могут получать сколько угодно проводков на входе. Но элементы конъюнкции и дезюнкция имеют
[07:53.880 --> 08:11.280]  сколько угодно входов. То есть даже, может быть, нефиксированное число,
[08:11.280 --> 08:18.480]  но, конечно, полиномиальное, потому что всего полиномиальное число элементов.
[08:18.480 --> 08:31.440]  Можно эту оговорку не делать, потому что это автоматически будет получаться. Если вдруг два
[08:31.440 --> 08:38.080]  провода идут параллельно, то можно из них один оставить. А тогда будет всего проводов не больше
[08:38.080 --> 08:46.560]  чем элементов, а элементов всего полиномов. Но можно и явным образом указать. А тут буквка K
[08:46.560 --> 08:59.560]  вообще означает any. То есть сколько угодно. Any number of inputs-класс. В общем, сложились такие
[08:59.560 --> 09:07.120]  обозначения. Давно сложилось в 80-х годах. Вообще, можно сказать, если немножко обратиться к
[09:07.120 --> 09:16.320]  истории этой науки, то в начале 70-х предложили вопрос о равенстве P и NP. Нашли кучу NP полных
[09:16.320 --> 09:26.280]  задач. Но также увидели, что известные методы типа диагонализации не работают. Потому что
[09:26.280 --> 09:34.440]  начали сразу изучать анонимичную теорию с аракулами. Аракула означает, что значение какой-то
[09:34.440 --> 09:39.320]  функции можно получать мгновенно. И это может вообще расширить класс вычислимых функций, может
[09:39.320 --> 09:47.080]  ускорить существенные вычисления. Там есть такая теория М. Бейкера, Джилла С. Л. Вэя, которая говорит,
[09:47.080 --> 09:53.200]  что для какого-то аракула P равно NP, а для какого-то P не равно NP. Ну а разные известные методы,
[09:53.200 --> 10:00.120]  еще есть теория вычислимости типа диагонализации, они, если уж работают, то работают и с аракулом тоже.
[10:00.120 --> 10:11.400]  Например, теорема о том, что проблема остановки неразрешима, она работает и для обычных
[10:11.400 --> 10:15.760]  вычислений, для вычисления с аракулом. Получит, что она неразрешима с тем же самым аракулом.
[10:15.760 --> 10:24.960]  И всякие другие теоремы с теоремой вычислимости тоже этому соответствуют.
[10:24.960 --> 10:37.360]  Ну а вот здесь не так. Ну и стали думать, что еще можно делать потом в 80-х годах. То есть вообще
[10:37.360 --> 10:45.400]  теорию схемы еще даже раньше была известна, в конце сороковых ее Шинон придумал. Но постараться
[10:45.400 --> 10:52.000]  прикрутить ее к проблеме P равно NP придумали вот в 80-х годах. И план был такой, что попробовать
[10:52.000 --> 10:59.200]  доказать, что вот сюда не входит NP. То есть для задачи выполнимости доказать, что для нее нет
[10:59.200 --> 11:06.160]  семейства схем полинейного размера. В общем, тогда был некоторый энтузиазм. Мы придумали
[11:06.160 --> 11:13.040]  новый способ, комбинаторный подход. Сейчас там что-нибудь сделаем. Но оказалось, что нет,
[11:13.040 --> 11:18.400]  не получится. Закончилось это все теоремой о естественных доказательствах разбора Ивырудича,
[11:18.400 --> 11:28.040]  которая в общем-то говорит, что простые методы тут точно не подойдут. Но тем не менее,
[11:28.040 --> 11:35.840]  в том и теории много чего интересного. Ну и в частности, вот эти вот семейства классов,
[11:35.840 --> 11:48.440]  они на самом деле образуют иерархию. Значит, каким образом? Ну, НС0 вложено в АС0. Это вложено
[11:48.440 --> 12:06.440]  в НС1. Значит, это вложено в АС1. Это вложено в НС2. Ну и так далее. Ну, значит, здесь, то есть в
[12:06.440 --> 12:16.040]  общем случае получается, что НСДТ вложено в АСДТ. Это вложено в НСД, плюс первое. Ну, здесь первое
[12:16.040 --> 12:23.880]  вложение очевидно, потому что два — это пример произвольного числа. То есть если можно сколько
[12:23.880 --> 12:32.200]  угодно входов, то в частности можно два входа, поэтому та же схема подойдет. Здесь вот просто
[12:32.200 --> 12:48.360]  годится та же схема. Вот, а второе, что АСДТ вложено в НСД, плюс первое, тоже довольно легко. Ну,
[12:48.360 --> 12:58.040]  а именно мы просто делаем двоечное дерево. Мы заменяем конъюнцию К переменных на двоечное
[12:58.040 --> 13:02.320]  дерево. Значит, сначала их по парам берем конъюнцию, потом результаты тоже по парам и так далее.
[13:02.320 --> 13:15.440]  Соответственно, тут получается, что заменяем функцию. Функция — это конъюнция или дезюнция
[13:15.440 --> 13:32.420]  от К переменных. Значит, функция от К переменных на двоечное дерево, на двоечное дерево глубины
[13:32.420 --> 13:46.100]  логарифм К. Ну, формально, да, можно прямо поставить что-то. Даже без два большого
[13:46.100 --> 14:08.500]  можно ценить верхнюю целую часть от логарифма К. Вот, значит, возникает вопрос, насколько это
[14:08.500 --> 14:26.780]  строгие вложения. Значит, про строгие вложения известно не так много. Значит, известно сиарема,
[14:26.780 --> 14:34.820]  что НС0 строго вложено в АС0. А что, когда вообще, если у нас ноль в инэрсе? То есть что? Логарифм
[14:34.820 --> 14:40.220]  нулевой степени. А что, когда логарифм нулевой степени? Это единица. То есть получается, что глубина
[14:40.220 --> 14:54.020]  константная. Да, и получается, что НС0 — значит, это схемы константной глубины. Значит, схемы
[14:54.020 --> 15:11.020]  константной глубины. Вот, и при этом входная степень у конюнса-дизюнкса будет ровно два. Значит,
[15:11.020 --> 15:26.140]  схемы константной глубины с элементами сходящей степени два. Вот, ну что это значит? Это означает,
[15:26.140 --> 15:32.380]  что у нас, как бы, самый нижний элемент максимум имеет там два входа. Те, откуда туда идет,
[15:32.380 --> 15:39.100]  и тут проводки имеют тоже максимум два входа. То есть на следующем же максимум четыре. Элемент
[15:39.420 --> 15:44.060]  зависит дальше, максимум восемь. И так далее. Мы идем до самого верха. Но поскольку всего уровня
[15:44.060 --> 15:55.740]  константа, то получается, что если глубина С, то тогда ответ зависит максимум от два в степени С
[15:55.740 --> 16:10.900]  бита входа. Да, то есть получается, что если глубина С, то тогда ответ зависит от не больше
[16:10.900 --> 16:30.500]  чем два в степени С битов входа, независимо от общего их числа. Значит, при любом их общем числе.
[16:30.500 --> 16:51.900]  Вот. Ну а тогда что же получается? Получается, что если всего битов больше, чем два в степени С,
[16:51.900 --> 16:59.980]  то от некоторых ответ не будет зависеть. Потому что просто не хватит проводов, чтобы ко всем
[16:59.980 --> 17:08.220]  подключиться. Получается, что если Н больше, чем два в степени С, а поскольку С константа,
[17:08.220 --> 17:19.660]  так может быть. Если Н больше, чем два в степени С, то ответ зависит не от всех битов входа.
[17:19.660 --> 17:35.460]  Вот. Ну а если мы возьмем просто конъюнцию всех аргументов, то это с одной стороны будет вакция
[17:35.460 --> 17:42.620]  ноль. С очевидным причином, да, потому что у нас просто есть такой элемент конъюнции всех входов.
[17:42.620 --> 17:55.780]  Вот. А с другой стороны, эта функция будет уже зависеть от всех битов входа. Но конъюнция
[17:55.780 --> 18:19.140]  тех аргументов, получается, что лежит вакция ноль, и при этом зависит от всех битов входа.
[18:19.140 --> 18:26.820]  Вот. Ну то есть получается, что такая конъюнция, она лежит вакция ноль, но не вэнсэ ноль.
[18:26.820 --> 18:44.700]  Конъюнция лежит вакция ноль, но не вэнсэ ноль. Так. Ну вот, довольно простое рассуждение. Есть
[18:44.700 --> 18:57.060]  более сложная теорема, что вакция ноль строго вложена в вэнсэ один. Вот. Это я уже не докажу
[18:57.060 --> 19:05.740]  целиком. Там довольно сложная агитабрическая техника. Вот. Но я покажу пример. Да, значит,
[19:05.740 --> 19:15.060]  идея доказательства, или даже может конструкция доказательства, что нужно рассмотреть parity
[19:15.060 --> 19:27.140]  function, значит, XOR. Вот. Сумма у нас для 2, но там не пары, а всех аргументов. Значит, XOR от всех
[19:27.140 --> 19:36.140]  аргументов, значит, лежит вэнсэ один, но не вакция ноль. Вот. Но есть легко первую часть доказать,
[19:36.140 --> 19:46.700]  да, почему XOR лежит вэнсэ один. Значит, XOR лежит вэнсэ один. Просто, значит, рассматриваем,
[19:46.700 --> 20:04.820]  значит, рассматриваем двоичное дерево, рассматриваем двоичное дерево из XOR. Ну и как раз,
[20:04.820 --> 20:08.900]  чтобы подключиться ко всем элементам, нам нужно, чтобы глубина была логарифмем.
[20:08.900 --> 20:24.020]  Глубины логарифма. Вот. Ну и поскольку XOR ассоциативен, то можно вот так вот делать. Вот. И кроме того,
[20:24.020 --> 20:30.700]  значит, XOR можно заменить на схему там глубины 3. Поэтому общая глубина будет вот эта логарифма
[20:30.700 --> 20:51.660]  умножить на 3. Значит, XOR от двух элементов вычисляется схемой глубины 3. Вот. Поэтому, значит,
[20:51.660 --> 21:06.500]  поэтому XOR лежит вэнсэ один. Вот. Ну а вот то, что он не лежит вакция ноль. Ну вот это вот сложное
[21:06.500 --> 21:24.740]  рассуждение, но идея здесь такая. Значит, сложное рассуждение. Значит, идея такая, что у XOR очень сильно
[21:24.740 --> 21:31.260]  зависит от всех своих аргументов. То есть у XOR при изменении любого аргумента меняется значение.
[21:31.260 --> 21:50.980]  Значит, XOR при изменении любого аргумента меняется значение. Вот. Ну а вакция ноль так не получится,
[21:50.980 --> 21:57.980]  да, потому что. Ну вообще у конъюнции, у дезюнции. Ну отрицание, оно просто одинаково
[21:57.980 --> 22:04.820]  приворачивает аргумент, да, и оно как бы не сильно увеличивает зависимость. А вот у конъюнции,
[22:04.820 --> 22:10.980]  у дезюнции получается, что на самом деле довольно редко бывает так, что изменение одного аргумента
[22:10.980 --> 22:16.620]  меняет значение. Вот. Ну и дальше нужно сказать, что действительно константом числа уровня не
[22:16.620 --> 22:37.020]  хватит, чтобы добиться вот таких изменений. Вот. Соответственно, конъюнция и дезюнция редко
[22:37.020 --> 22:56.180]  меняется, редко меняется значение при изменении аргумента. Ну и как бы доказывается, что константной
[22:56.180 --> 23:09.540]  глубины не хватит. Константной глубины не хватит. Вот. Ну это, конечно, ни в коем случае
[23:09.540 --> 23:15.620]  не доказательство, да, это некоторое объяснение природы, почему так получается. Вот. Ну а доказательства,
[23:15.620 --> 23:30.020]  здесь хотите, можно в Нишкиароро-Рыбарак, например, найти. Вот. Или еще где-нибудь. Так. Ну ладно,
[23:30.020 --> 23:41.540]  значит, вот эта вот краткая идея. Так, теперь перейдем к тому, что я анонсировал. Значит, это
[23:41.540 --> 24:02.820]  быстрые сумматоры. Вот. Ну вообще сложение чисел двоечной записи, это одна из базовых операций
[24:03.300 --> 24:11.700]  в компьютерном процессоре. Вот. Поэтому хорошо бы, чтобы оно происходило быстро. Вот. Ну, значит,
[24:11.700 --> 24:18.460]  это немножко, да, значит, отличается от того, что нарисовано на первой доске. Да, значит, там выход один.
[24:18.460 --> 24:26.740]  Ну а сумматор, можно, конечно, ставить задачу проверки корректности вычисления. Но вообще-то,
[24:26.740 --> 24:32.180]  да, в процессоре не нужно проверять корректность стационирования, да, нужно суммировать. Вот.
[24:32.180 --> 24:42.140]  Поэтому можно себе представлять, да, как бы сумматор, как вот такую вот микросхему. Значит,
[24:42.140 --> 24:51.700]  где вот есть одна группа входов, это число А. Вот. И есть другая группа входов, это число В. Вот. Ну и,
[24:51.700 --> 25:00.300]  соответственно, есть выходы, которых, наверное, один больше. Вот. Соответственно, да, должно быть так,
[25:00.300 --> 25:08.020]  что вот, значит, здесь на вход А, здесь на вход В, а здесь С, которое равно А плюс В, и уже не Х,
[25:08.020 --> 25:19.820]  а какое-нибудь побитое, а настоящее сложение в речной записи. Вот. Соответственно, вот. Глубина,
[25:19.820 --> 25:33.740]  значит, глубина, ну это получается время работы. Вот. И поскольку это базовая операция,
[25:33.740 --> 25:42.780]  значит, чем быстрее процесс будет это делать, тем лучше. Вот. А если делать обычным образом,
[25:42.780 --> 25:51.020]  да, значит, сложение в столбик справа налево, вот, получится глубина порядка m. Значит, dn число знаков.
[25:51.020 --> 26:05.020]  Значит, соответственно, школьный алгоритм. Школьный алгоритм. Сложение в столбик
[26:05.020 --> 26:25.100]  дает глубину, ну, n я напишу. В таких, значит, таких случаях часто говорят о большой от m,
[26:25.100 --> 26:30.580]  но это, вообще говоря, немножко неграмотно. Надо вообще записать омега большой от m, потому что
[26:30.820 --> 26:36.620]  нас интересует нижняя оценка, а не верхняя. То есть нас интересует не то, что не больше n
[26:36.620 --> 26:44.180]  глубина, а то, что она не меньше n. Но в принципе, она будет ровной, n там плюс-минус 1. Вот. Почему
[26:44.180 --> 26:59.620]  так происходит? Ну, как вообще устроена алгоритм в столбик? Ну, у нас, ой, слушайте, давайте я
[26:59.620 --> 27:06.660]  c лучше, дайте, тут r будет основной результат, или а, s давайте, s от слова сумма. С от слова
[27:06.660 --> 27:17.300]  сумма, а c это у нас будет от слова carry и перенос. Значит, вот здесь сумма, сумма а плюс b. Значит,
[27:17.300 --> 27:37.180]  нужно вычислить, нужно вычислить c. Значит, c это трокопереносок, трокопереносок. Вот. И после этого
[27:37.180 --> 27:49.500]  будет просто то результат, s ита, это будет а ита, xор б ита, xор c ита. Если мы уже откуда-то выяснили,
[27:49.500 --> 27:56.860]  какие переносы, то дальше можно просто вот так вот вычислить, да, и ни о чем не думать. Вот.
[27:56.860 --> 28:04.500]  А с другой стороны, откуда переносы возникают? Ну, смотрите, у нас на предыдущем шаге надо еще
[28:04.500 --> 28:10.260]  договориться, с какой стороны мы нумируем биты. Вам как больше нравится, последнего или с первого?
[28:10.260 --> 28:22.580]  С первого, да. В общем, по-разному, да. Ну, ладно, с первого, значит, они тут будут нумерироваться,
[28:22.580 --> 28:27.380]  значит, первой и так далее и энной, значит, первой и так далее и энной, а вот здесь еще нулевой
[28:27.380 --> 28:35.260]  получит, да, потому что сумма может быть на 1 бит длиннее. Значит, 0, 1 и так далее. Вот.
[28:35.260 --> 28:46.180]  Тогда, соответственно, чтобы посчитать перенос, нужно посмотреть на биты в более мальшем разряде,
[28:46.180 --> 28:53.700]  да, если там есть хотя бы и надо посмотреть на бит А, на бит В и на бит переноса в мальшем разряде.
[28:53.940 --> 28:59.780]  Вот. Если там хотя бы две единицы, то тогда перенос будет. А если там 0 или 1 единица,
[28:59.780 --> 29:03.100]  перенос не будет. Вообще-то, функция большинства на самом деле.
[29:03.100 --> 29:17.420]  Значит, вычисление СИТ, да, на самом деле СИТ будет равен большинству, значит, большинству из,
[29:17.420 --> 29:34.260]  соответственно, С, а и плюс первая, В и плюс первая и С и плюс первая. Вот. И эта формула даже на краях
[29:34.260 --> 29:44.980]  работает, да, если считать, что те биты, которых нет, равны нулю. Да, значит, получается, что,
[29:44.980 --> 29:53.980]  когда мы СН вычисляем, то у нас АН плюс первая и БН плюс первая равны нулю. А СН плюс первая,
[29:53.980 --> 29:58.540]  даже неважно, можно считать тоже АН нулю, да, в любом случае большинство будет ноль. Значит,
[29:58.540 --> 30:04.300]  поэтому самым последним столцей переноса не может быть. Вот. Ну а дальше уже, может быть,
[30:04.300 --> 30:13.500]  и еще мы С0 можем вычислить. Значит, С0 может получиться единицей, но вот А0 или Б0 точно ноль,
[30:13.500 --> 30:24.620]  это тогда здесь будет один. Вот. Ну и вот за счет, значит, за счет вот такого вот, да, значит,
[30:24.620 --> 30:32.900]  за счет такой зависимости, что у нас СН минус первой зависит от СН-ого. Ну ладно, СН равно нулю,
[30:32.900 --> 30:44.500]  так что не зависит. А оно зависит от АН-ого и БН-ого, да. Вот. А поэтому, значит, чтобы штур Crown
[30:44.500 --> 30:51.660]  минус первая, ну нужно посмотреть на АН и БН-ое, а чтобы штур СН-ой, нужно и на СН-ой тоже посмотреть,
[30:51.660 --> 30:55.860]  чтобы штур С later N-а встрет side ANDfry, нужно посмотреть на С Минус Второе. И так далее,
[30:55.860 --> 31:01.860]  значит каждый бит зависит от следующего, и поэтому получается глубина N есть, если это вычислять
[31:01.860 --> 31:09.100]  непосредственно. Что же делать? Нужно каким-то образом
[31:09.100 --> 31:12.580]  научиться вычислять переносы, не проводя всю эту цепочку.
[31:12.580 --> 31:28.140]  Нужно научиться учислять переносы,
[31:28.140 --> 31:45.020]  значит, не проводя всю цепочку, не проводя рекурсию,
[31:45.020 --> 32:02.340]  не раскручивая всю цепочку. Ну, соответственно, могут быть разные
[32:02.340 --> 32:07.180]  конкретные алгоритмы, значит, любой алгоритм, который так делает, и после этого
[32:07.180 --> 32:10.100]  просто вычисляет по этой формуле, значит, называется бетонсуматором.
[32:10.100 --> 32:21.140]  Ну и некоторые из них используются в реальных процессах. Так, ну давайте я один из них расскажу.
[32:21.140 --> 32:33.540]  Значит, идея стоит в том, чтобы вместо переносов научиться вычислять другие биты,
[32:33.540 --> 32:53.140]  так называемые биты, бит-генерация, бит-генерация – это бит-генерация переноса.
[32:53.140 --> 33:07.300]  Это означает, что на каком-то участке перенос точно есть. Так, значит, это g, g ежитая равно единице,
[33:07.300 --> 33:24.580]  если а ежитая плюс, так, сейчас ежитая непонятная, давайте я так напишу, и многоточие g,
[33:24.580 --> 33:34.820]  то есть это участок, значит, участок числа а с этого индекса дожитого и плюс b, значит,
[33:34.900 --> 33:42.700]  плюс b и так далее ежитая. Значит, если это будет, в общем, если это точно даст перенос,
[33:42.700 --> 33:51.020]  а что значит перенос? Значит, будет сумма больше, чем 2 в какой-то степени, но если и и g включительно,
[33:51.020 --> 34:01.580]  может, либо равно, то это будет 2 в степени g минус и плюс 1. Значит, как проверить? Ну, если и равно g,
[34:01.580 --> 34:10.700]  если и равно g, то перенос будет, если в сумме равно 2. Вот, соответственно, как раз если и равно g,
[34:10.700 --> 34:23.220]  то это сократится будет как раз 2 в первый. Вот, да, если там, если и и g соседнее, то там теперь оно должно быть равно, чтобы перенеслось.
[34:23.220 --> 34:34.460]  Так, хорошо, значит, это бит-генерация, g от слова generation, еще есть бит-проталкивание,
[34:34.460 --> 34:54.300]  проталкивание propagation. Бит-проталкивание, значит, это p и gt, p и gt равно единице, значит, если,
[34:54.300 --> 35:04.940]  если мы посуммируем то же самое и получим число из одних единиц. Вот, то есть число из одних единиц будет,
[35:04.940 --> 35:17.340]  здесь a и и так далее gt, плюс b и и так далее gt, значит, это будет равно 2 в степени g минус и плюс 1,
[35:17.340 --> 35:30.300]  значит, и минус 1. Так, зачем нам это нужно? Ну, смотрите, если у нас получились на участке одни единицы, то если из младших разрядок пришел перенос,
[35:30.300 --> 35:37.540]  то он как бы с этими единичками по принципу доминов поступит, соответственно, все эти единички будут заменяться на нули,
[35:37.540 --> 35:46.220]  а перенос также появится, наоборот, в младших разрядах, то есть в старших наборах. Значит, если пришло из младших, то передастся в старшие.
[35:47.100 --> 35:54.380]  Но если не пришло из младших, то старшие тоже ничего не передастся. То есть вот генерация, значит, генерация работает в любом случае,
[35:54.380 --> 36:01.780]  независимо того, пришел перенос из младших или не пришел. Вот, а проталкивание работает только если пришел перенос из младших,
[36:02.340 --> 36:13.340]  тогда он передается дальше. Вот. Ну что, понятная идея?
[36:21.340 --> 36:29.340]  Мы как бы вырезаем, вырезаем из числа разряды световопожитые и их складываем, как обычно, то есть это миксора, это обычная сумма.
[36:32.340 --> 36:44.340]  Вот. Соответственно, что потом дальше происходит? Ну, значит, дальше, если к этой сумме пришел перенос из более младших разрядов,
[36:44.340 --> 36:53.340]  то там последние единички заменяются на нули, а последний нулик на единичку, если там хотя бы один нулик есть.
[36:53.900 --> 37:03.900]  Вот. Но если оно из одних единиц стоит, как вот здесь, тогда там нет нулика, как перенос проталкивается.
[37:03.900 --> 37:11.900]  Вот. А если получилось слишком много, если на разряд залезло, то неважно, пришел перенос или нет, в любом случае старший разряд переноса уходит.
[37:12.460 --> 37:24.460]  Так. Ну ладно, сейчас перенос сделаем, а потом расскажу, как это считать и как потом, собственно, стать ответом.
[37:25.020 --> 37:50.020]  Значит, два-третье. Тут идея следующая. Мы будем вот эти вот биты генерации проталкивания вычислять для выровненных, значит, как бы для выровненных участков длиной степень двойки.
[37:50.580 --> 37:58.580]  То есть тут, давайте я нарисую пример. Пусть, например, длина будет 8.
[37:59.140 --> 38:23.140]  Да, то есть сначала мы для каждой биты в отдельности вычислим, значит, потом, соответственно, значит, для участков по 2 бита, значит, потом для участков по 4 бита, ну и, наконец, для всего в целом.
[38:23.700 --> 38:39.700]  Вот, значит, как это делается. Ну, значит, база очень простая. Значит, g i t i t это, на самом деле, конъюнция a i t i b i t.
[38:40.260 --> 38:52.260]  Да, то есть точно, если у нас две единицы стоят, то тогда перенос генерируется. Вот, а проталкивается он, если одна единица стоит.
[38:52.820 --> 39:12.820]  То есть g i t i t это будет xor, a i t xor b i t. Так как я там обозначал, что это самое. Вот, и это как бы база будет.
[39:12.820 --> 39:41.380]  Ну, а дальше, дальше переход. Значит, переход проще всего делается с проталкиванием, то есть проталкивание, скажем, от i до k, это будет проталкивание от i до j и проталкивание от g plus 1 до k.
[39:43.380 --> 39:55.380]  Ну, нужно, чтобы и, например, когда у нас будет вот здесь сумма всех единиц. Ну, когда вот здесь была сумма всех единиц и здесь сумма всех единиц.
[39:55.940 --> 40:17.940]  Ну, потому что реально, ну реально это получается просто, в каждом столце здесь там стоит xor. Вот, да, то есть если это раскручивается, то будет просто конъюнция всех вот таких вот xor.
[40:18.500 --> 40:34.500]  Ну, а с генерацией немножко более интересная формула. Значит, с генерацией формула такая. Значит, генерация на отрезке от i до k, это что может быть? Во-первых, может быть генерация от i до j.
[40:35.060 --> 40:47.060]  Да, что если уже, если уже вот здесь вот генилируется перенос вот здесь. Да, то есть здесь вообще не важно, что происходит вот здесь, даже если там одни нули стоят, все равно уже здесь генерация произошла.
[40:47.620 --> 41:03.620]  Вот. Или есть другой вариант. Другой вариант, что генерация произошла в раньшех разрядах, но при этом протолкнулась через старшие.
[41:06.620 --> 41:13.620]  Да, то есть как бы у нас есть перенос отсюда сюда, а тут-то это одни единицы, поэтому получился перенос отсюда сюда.
[41:17.620 --> 41:27.620]  Вот. Ну, соответственно, по таким формулам можно вычислить биты генерации переноса для всех вот таких вот выровненных отрезков.
[41:28.180 --> 41:36.180]  А то есть, соответственно, если здесь, если здесь получаются n знаков, то здесь получается логарифмы.
[41:38.180 --> 41:40.180]  Значит, логарифмы н-уровней.
[41:40.740 --> 41:42.740]  Вот.
[41:50.740 --> 41:58.740]  Ну, а дальше, как, например, понять?
[41:59.300 --> 42:07.300]  Сейчас я здесь нумирую слева-направо, то есть от старших к младшим.
[42:08.300 --> 42:17.300]  Да, как вот на той доске, условно, значит, нумируется бита от старших, которые слева, к младшим.
[42:18.300 --> 42:24.300]  Поэтому, соответственно, в младших возникает перенос и проталкивается сквозь старшие.
[42:24.860 --> 42:28.860]  Да, если наоборот нумировать, то и формулы будут тоже наоборот.
[42:33.860 --> 42:35.860]  Вот.
[42:39.860 --> 42:49.860]  Ну, а дальше, значит, дальше как... Так, давайте вот тут наверх.
[42:50.420 --> 42:56.420]  0, 1, 2, 3, 4, 5, 6, 7, 8.
[42:58.420 --> 43:08.420]  Значит, тут общие формулы не очень удобно писать, так что давайте я напишу конкретно, и тогда будет понятие общий смысл.
[43:09.420 --> 43:19.420]  Например, теперь я утверждаю, что всех вот этих вот битов генерации проталкивания достаточно, чтобы вычислить все переносы.
[43:20.420 --> 43:22.420]  Да, например.
[43:25.420 --> 43:39.420]  Так, ну, например, C0 это просто генерация, да, генерация на всем числе, от 1 до 8.
[43:41.420 --> 43:48.420]  Да, например, C4 это будет генерация от 5 до 8.
[43:50.420 --> 43:52.420]  Вот, а вот, например, C2.
[43:54.420 --> 44:11.420]  C2 это будет следующее, значит, это будет генерация от 3 до 4 или, значит, генерация от 5 до 8 и проталкивание от 3 до 4.
[44:12.420 --> 44:15.420]  Да, эта вот формула очень похожа на вот эту.
[44:15.980 --> 44:19.980]  Да, но, что еще раз?
[44:21.980 --> 44:23.980]  Вот, значит, C это перенос.
[44:24.980 --> 44:26.980]  Значит, C это перенос, откуда он возникает?
[44:26.980 --> 44:31.980]  Он либо генерируется сразу, либо генерируется более мальше и проталкивается к данной точке.
[44:34.980 --> 44:41.980]  Вот, значит, вот эта формула такая же, как здесь, только к этому отрезку мы не применяли эту формулу.
[44:42.540 --> 44:51.540]  Вот, но можно, значит, когда мы по всем таким выровнянным уже все посчитали, можно и для более сложных посчитать, например, C1.
[44:52.540 --> 45:06.540]  C1 это будет следующее, значит, будет либо генерация сразу во втором разряде, либо это будет генерация от 3 до 4 и проталкивание через второй.
[45:07.100 --> 45:22.100]  Либо это будет генерация от 5 до 8 и проталкивание от 3 до 4 и проталкивание от 3 до 4 и проталкивание от 3 до 2.
[45:22.660 --> 45:35.660]  Вот, ну, в общем, вот такого рода формулы для каждого бита, для каждого бита переноса можно написать.
[45:36.660 --> 45:37.660]  То есть, в чем идея?
[45:37.660 --> 45:50.660]  Идея в том, что мы в каком-то разряде смотрим и берем участок от этого разряда, ну, точнее, от следующего разряда до самого конца, до младшего,
[45:51.220 --> 45:59.220]  и его разбиваем, значит, разбиваем на как можно больше участки, которые мы уже посчитали, проталкивание и генерация.
[46:01.220 --> 46:05.220]  Ну, и вот таким образом мы из них, соответственно, набираем ответ.
[46:09.220 --> 46:11.220]  Так, ну, чего, понятная идея?
[46:11.780 --> 46:23.780]  Вот, ну, теперь надо аккуратно посчитать, надо аккуратно посчитать, какой тут, собственно, размер, какая глубина получится.
[46:24.340 --> 46:38.340]  Вот, ну, размер-то, понятно, что полинамиальный, да, потому что у нас всего, его N, N на логарифм N, вот этих битов генерации проталкиваем, мы считаем,
[46:39.340 --> 46:48.340]  и еще считаем N битов переноса, да, и все формулы тут полинамиальной длины максимум, вообще даже логарифмической,
[46:48.900 --> 46:52.900]  вот, поэтому все это получается полинамиального размера.
[46:54.900 --> 47:00.900]  Ну, а глубина получается логарифмическая, да, потому что, смотрите, один логарифм, это, собственно, вот это вот,
[47:01.900 --> 47:06.900]  потому что здесь все, все биты с более низких уровней используют биты с более высоких,
[47:07.900 --> 47:12.900]  но при этом используют, то, как они используют, это константная глубина,
[47:13.460 --> 47:17.460]  да, то есть, тут, ну, тут это на самом деле формула от трех битов, да, тут индексы сложные,
[47:18.460 --> 47:21.460]  да, но реально здесь просто три бита представляются, вот, в такую простую комбинацию.
[47:22.460 --> 47:33.460]  Вот, поэтому получается сначала логарифмический этап, значит, логарифмический этап, это вычисление битов генерации проталкивания,
[47:34.020 --> 47:44.020]  а потом еще вот это вот все, вот, но и это, даже если у нас дезюнкция и конъюнкция только двух зависит,
[47:45.020 --> 47:50.020]  это все равно будет логарифмическое, вот, и, соответственно, этот логарифм добавится к этому,
[47:51.020 --> 47:54.020]  да, там не перемножится, а добавится, потому что мы последовательно, да,
[47:55.020 --> 47:57.020]  последовательно сначала вычисляем одно, потом вычисляем другое.
[47:57.580 --> 48:01.580]  Умножаться будет на логарифме, если бы мы ввяли какую-нибудь логарифмическую цепочку,
[48:02.580 --> 48:05.580]  и в ней каждый элемент заменили на какую-то схему глубины логарифма,
[48:06.580 --> 48:14.580]  да, вот тогда глубины будут перемножаться, да, значит, если мы на каждом уровне заменяем просто элемент на что-то большее,
[48:15.580 --> 48:18.580]  вот, а здесь мы не заменяем, а просто сначала идет одно, потом другое,
[48:19.580 --> 48:21.580]  поэтому логарифмы складываются и все вместе тоже получается логарифм.
[48:22.140 --> 48:31.140]  Вот, значит, в итоге получаем, что сложение будет в Nc1,
[48:32.140 --> 48:34.140]  да, то есть,
[48:38.140 --> 48:49.140]  итог получаем, что сложение будет даже, да, даже не в Nc1, а в Nc1.
[48:52.140 --> 48:54.140]  Так, ну ничего, понятно?
[48:55.140 --> 48:57.140]  Есть какие-нибудь вопросы?
[49:08.140 --> 49:10.140]  Вот, но вот в реальных процессорах примерно это используется,
[49:11.140 --> 49:15.140]  только обычно там в качестве базы не один бит берется, а, кажется, четыре,
[49:16.140 --> 49:20.140]  да, то есть, когда мы четыре бита складываем, то быстрее получается по определению.
[49:20.700 --> 49:24.700]  Ну, как бы непосредственно, да, не усложнять, да,
[49:25.700 --> 49:29.700]  а вот если и дальше вот эти блоки с четырех берутся как базовые, и дальше они уже комбинируются,
[49:30.700 --> 49:32.700]  ну, либо таким образом, либо каким-то еще.
[49:50.700 --> 50:12.700]  Так, что еще я хотел бы обсудить?
[50:15.700 --> 50:17.700]  Ну, кроме, значит, кроме суматости,
[50:17.700 --> 50:21.200]  кроме сумматоров еще бывают мантипликаторы.
[50:21.200 --> 50:26.820]  Опять же, каждый процессор, кроме
[50:26.820 --> 50:31.540]  сложения, требует и умножения. И вообще, как
[50:31.540 --> 50:34.100]  правило, умножение — это более трудоемкая
[50:34.100 --> 50:37.380]  операция, чем сложение.
[50:37.380 --> 50:43.780]  Есть, например, такая известная
[50:43.780 --> 50:46.160]  тема. Это оптимальные алгоритмы
[50:46.160 --> 50:49.800]  умножения матриц. И там идет, например,
[50:49.800 --> 50:53.800]  экономия на мультипикативных операциях
[50:53.800 --> 50:55.760]  при увеличении аддитивных.
[50:55.760 --> 51:00.960]  То есть, когда ставится вопрос
[51:00.960 --> 51:04.640]  о оба симпатически сложных
[51:04.640 --> 51:08.800]  умножения матриц, то считают
[51:08.800 --> 51:10.640]  именно мультипикативная операция,
[51:10.640 --> 51:15.200]  если оказывается меньше умножения
[51:15.200 --> 51:17.760]  за счет большего числа сложений, то это
[51:17.760 --> 51:19.960]  теоретически асимпатически будет
[51:19.960 --> 51:23.440]  лучше. На практике матрицы умножают
[51:23.440 --> 51:25.760]  просто по определению, хотя
[51:25.760 --> 51:28.120]  асимпатически там больше умножений,
[51:28.120 --> 51:34.000]  но все-таки это получается лучше.
[51:34.000 --> 51:36.680]  Так, ну хорошо, тем не менее, какая
[51:36.680 --> 51:40.120]  сложность будет с точки зрения схемы?
[51:40.800 --> 51:45.440]  Так, теперь, значит, мы умножаем.
[51:45.440 --> 51:56.520]  Умножение двоечных чисел.
[52:01.320 --> 52:03.800]  Ну, смотрите, что вообще происходит при
[52:03.800 --> 52:06.200]  умножении. Да, умножать тоже можно в
[52:06.200 --> 52:09.120]  столбик, что конкретно там происходит.
[52:09.120 --> 52:11.120]  Ну, давайте я покажу какой-нибудь пример.
[52:11.120 --> 52:19.120]  Значит, например, там 1, 0, 1, 1, 0. Мы умножаем
[52:19.120 --> 52:24.120]  на какой-нибудь там 1, 1, 0, 1, 1.
[52:24.120 --> 52:29.120]  Например, вот так вот. Значит, что происходит?
[52:29.120 --> 52:33.120]  Да, ну как? Ну, как нас в школе учили,
[52:33.120 --> 52:35.120]  умножаем на это число, но оно здесь
[52:35.120 --> 52:38.120]  либо 0, либо 1. То есть, фактически мы либо
[52:38.120 --> 52:40.120]  копируем вот это вот, либо просто
[52:40.120 --> 52:43.120]  пропускаем строчку. То есть, как получается
[52:43.120 --> 52:48.120]  там 1, 0, 1, 1, 0. Дальше потом сдвигаем там
[52:48.120 --> 52:53.120]  1, 0, 1, 1, 0. Дальше как бы строчка пропускается,
[52:53.120 --> 52:58.120]  но можно написать там строчку задних нулей.
[52:59.120 --> 53:02.120]  Вот, и еще два раза так.
[53:06.120 --> 53:11.120]  Вот. И дальше нужно это все сложить, да, и
[53:11.120 --> 53:14.120]  будет ответ. Вот. То есть, что получается?
[53:14.120 --> 53:16.120]  Получается, что сложение, это
[53:16.120 --> 53:19.120]  итерированное сложение, да. То есть, нам
[53:19.120 --> 53:22.120]  на самом деле, чтобы получить ответ, да,
[53:22.120 --> 53:24.120]  чтобы получить ответ умножения, нужно сложить
[53:24.120 --> 53:28.120]  сколько чисел, сколько у нас разрядов, да. То есть,
[53:28.120 --> 53:32.120]  на самом деле, умножение, умножение
[53:32.120 --> 53:38.120]  n-битовых чисел, значит, сводится
[53:41.120 --> 53:49.120]  к сложению n штук, значит, n штук
[53:49.120 --> 53:53.120]  соответственно n-битовых чисел.
[53:56.120 --> 54:00.120]  Вот. Ну, соответственно, первая идея, это
[54:00.120 --> 54:03.120]  просто использовать предыдущие, но тогда
[54:03.120 --> 54:06.120]  как раз логариф в квадрате получится, да. То есть,
[54:06.120 --> 54:08.120]  мы как бы что можем делать, да, мы можем сложить
[54:08.120 --> 54:10.120]  сначала вот эти вот два, там потом вот эти вот
[54:10.120 --> 54:13.120]  два, потом результаты, и потом еще добавить
[54:13.120 --> 54:18.120]  последние, да. Но вот так как раз будет
[54:18.120 --> 54:21.120]  глубина логарифа в квадрате, да, потому что как раз
[54:21.120 --> 54:23.120]  у нас дерево-дерево-сложение глубины
[54:23.120 --> 54:26.120]  логарифмен, и каждое отдельное сложение тоже
[54:26.120 --> 54:31.120]  тоже глубина логарифмен. Да, соответственно,
[54:31.120 --> 54:44.120]  если, значит, можно сложить при помощи
[54:44.120 --> 54:47.120]  двоичного дерева,
[54:52.120 --> 54:55.120]  но так получится глубина логарифа в квадрате. То
[54:55.120 --> 54:58.120]  есть, это, по крайней мере, n-c, да, я, кстати, не
[54:58.120 --> 55:01.120]  сказал, n-c без индекса, это обзнение всех n-c
[55:01.120 --> 55:03.120]  деток, да, то есть, хоть с какой-то
[55:03.120 --> 55:08.120]  полиэлографмической глубиной. Значит,
[55:08.120 --> 55:22.120]  так получится глубина порядка логарифма в квадрате.
[55:22.120 --> 55:26.120]  Вот, что, конечно, хорошо, но не настолько хорошо,
[55:26.120 --> 55:30.120]  как могло бы быть, да, потому что лучше бы все-таки
[55:30.120 --> 55:33.120]  была, да, значит, лучше бы была глубина
[55:33.120 --> 55:38.120]  логарифма. Вот, и так действительно можно
[55:38.120 --> 55:49.120]  сделать. Так, значит, можно добиться, можно добиться
[55:49.120 --> 56:03.120]  глубины порядка логарифма, если действовать
[56:03.120 --> 56:14.120]  иначе. Так, я вам расскажу, как, довольно интересно.
[56:33.120 --> 56:42.120]  Да, тут, на самом деле, я не знаю, что конкретно
[56:42.120 --> 56:52.120]  в процессорах делают, надо посмотреть где-нибудь.
[56:52.120 --> 56:54.120]  Вот, но мне кажется, что вот этот момент, который
[56:54.120 --> 56:56.120]  я сейчас расскажу, он и на практике должен быть
[56:56.120 --> 57:04.120]  довольно эффективен. Да, не только теория. Вот,
[57:04.120 --> 57:13.120]  соответственно, тут базовая, значит, базовая операция
[57:13.120 --> 57:22.120]  такая, да, значит, мы превращаем тройку, значит,
[57:22.120 --> 57:32.120]  тройка чисел x, y, z превращается в пару u, v, такую, что x, x
[57:32.120 --> 57:38.120]  plus y plus z равняется u plus v, и при этом это преобразование
[57:38.120 --> 57:44.120]  делается в схемы константной глубины. Да, то есть глубина
[57:44.120 --> 58:07.120]  здесь получается константной. Вот. Так, как это делается?
[58:07.120 --> 58:13.120]  Ну, а сами смотрите, тут происходит следующее,
[58:13.120 --> 58:17.120]  значит, мы просто суммируем, значит, суммируем в каждом
[58:17.120 --> 58:21.120]  разряде без переноса. Тогда, если у нас три числа, в каждом
[58:21.120 --> 58:27.120]  0 или 1, то получится число от 0 до 3. То есть, вот это
[58:27.120 --> 58:37.120]  делает так. Значит, суммируем каждый разряд, каждый разряд
[58:37.120 --> 58:52.120]  без переноса. Вот, соответственно, три числа, три числа 0
[58:52.120 --> 59:03.120]  или 1 превращается в одно число от 0 до 3. Вот. Но число
[59:03.120 --> 59:10.120]  от 0 до 3 как раз выражается двумя битами. Значит, и, соответственно,
[59:10.120 --> 59:15.120]  первый бит этого числа это соответствующий бит u, ну,
[59:15.120 --> 59:24.120]  со сдвигом как бы, да, а второй это бит v. Значит, первый бит
[59:24.120 --> 59:38.120]  этого числа это бит u, значит, а второй это бит v. Так, ну,
[59:38.120 --> 59:46.120]  давайте я какой-нибудь пример покажу. Значит, например, 1, 0, 1, 1, 0
[59:46.120 --> 01:00:05.120]  плюс, например, 1, 1, 0, 1, 0 и плюс, скажем, 1, 0, 1, 1, 0.
[01:00:05.120 --> 01:00:12.120]  Так, два одинаковых. Давайте, чтобы все разные. Вот так вот. Нет, все.
[01:00:12.120 --> 01:00:19.120]  Давайте вот так вот. Вот. Так все варианты есть. Вот. Тогда, смотрите, да, значит,
[01:00:19.120 --> 01:00:25.120]  так, как бы, если мы просто просуммируем, да, без переносов, да, то получается
[01:00:25.120 --> 01:00:36.120]  3, 1, 1, 2, 0. Вот. Ну, а если представить двоечную записи, да, то тут получается
[01:00:36.120 --> 01:00:44.120]  как бы 1, 1, 0, 1, 0, 1, 1, 0 и 0, 0. Вот. Ну, и, соответственно, получается так,
[01:00:44.120 --> 01:00:51.120]  значит, это у нас x, это y, это z. Значит, скажем, второй бит это бит v.
[01:00:51.120 --> 01:01:00.120]  Значит, соответственно, v получается из вторых битов 0, 0, 1, 1, 1, а u получается
[01:01:00.120 --> 01:01:10.120]  из первых битов, но со сдвигом. Да, соответственно, 0, 1, 0, 0, 1.
[01:01:13.120 --> 01:01:17.120]  Вот. Ну, это действительно, да, как бы вот это вот 0, 0, оно дает 0 сюда и 0 сюда,
[01:01:17.120 --> 01:01:22.120]  а 0, 1 даёт 0 вот в этот разверт, 1 вот в этот разверт.
[01:01:22.120 --> 01:01:28.120]  Там 1, 1 даёт 1 в этот разверт, 1 в этот разверт. Вот.
[01:01:28.120 --> 01:01:33.120]  Это действительно, значит, действительно суммирование ровно так и получается.
[01:01:38.120 --> 01:01:42.120]  Так. Ну чего, понятно, почему у нас сумма та же самая получится?
[01:01:43.120 --> 01:01:48.120]  Вот. И глубина действительно, да, глубина действительно константа, да,
[01:01:48.120 --> 01:01:54.120]  потому что, ну, фактически тут получается то, что у нас уже было, да, то есть
[01:01:54.120 --> 01:02:03.120]  фактически бит v это xor, да, прямо можно формулу написать, да, там v и t это
[01:02:03.120 --> 01:02:15.120]  x и t, xor, y и t, xor, z и t, а u и минус первое, это, соответственно, большинство,
[01:02:15.120 --> 01:02:20.120]  большинство из x и t, y и t, z и t.
[01:02:23.120 --> 01:02:27.120]  Вот. Ну, вот такие, такие формулы дают рецепт как-то вычислить.
[01:02:28.120 --> 01:02:37.120]  Вот. Ну, а дальше-то что получается? Если нам нужно сложить n чисел, да, то мы
[01:02:37.120 --> 01:02:41.120]  их разобьём на тройке и теперь каждую тройку заменим на пару.
[01:02:43.120 --> 01:02:47.120]  Дальше, соответственно, у нас получается n чисел.
[01:02:50.120 --> 01:02:54.120]  Дальше-то мы тройку заменили на пару, соответственно, у нас вместо трёх чисел
[01:02:54.120 --> 01:02:59.120]  осталось два числа, то есть мы поделили в полтора раза, да, получается две
[01:02:59.120 --> 01:03:06.120]  трети n, потом ещё раз полтора раза, там, четыре девятых n, вот, ну и так далее.
[01:03:07.120 --> 01:03:11.120]  Вот. И дальше, соответственно, там будут какие-то, понятно, если нам
[01:03:11.120 --> 01:03:14.120]  что-то не делится, будут какие-то лишние оставаться, мы их тоже присоединим
[01:03:14.120 --> 01:03:18.120]  и так далее. Вот. В общем, в конце будет тридцать, а в конце, в самом конце
[01:03:18.120 --> 01:03:19.120]  будет два числа.
[01:03:19.120 --> 01:03:24.120]  Вот. И этапов тут будет примерно логарифм n по основанию 3 вторых.
[01:03:30.120 --> 01:03:38.120]  Да, то есть тут вот будет логарифм n по основанию 3 вторых этапов.
[01:03:38.120 --> 01:03:45.120]  Вот. Ну, это будет порядка логарифма, да, потому что логарифмы все, если
[01:03:45.120 --> 01:03:50.120]  приходить к другому основанию, то будут изменяться в конце анатураза, да,
[01:03:50.120 --> 01:03:52.120]  по известным формулам.
[01:03:54.120 --> 01:03:57.120]  Вот. Ну, а после этого, когда уже в самом конце два числа уже
[01:03:57.120 --> 01:04:03.120]  будет третий этап, то это будет логарифм н по основанию 3 вторых этапов.
[01:04:04.120 --> 01:04:09.120]  Вот. Ну, а после этого, когда уже в самом конце два числа осталось, то мы их
[01:04:09.120 --> 01:04:13.120]  сложим уже исходным алгоритмом.
[01:04:16.120 --> 01:04:24.120]  Да, значит, когда осталось два числа, то тогда следовательно сложим
[01:04:24.120 --> 01:04:32.120]  сложим исходным алгоритмом.
[01:04:34.120 --> 01:04:39.120]  Ну, вот, значит, итоговая глубина будет действительно логарифмическая, да,
[01:04:39.120 --> 01:04:44.120]  потому что вот это вот число этапов умножится на константу, которая здесь, да,
[01:04:44.120 --> 01:04:49.120]  будет логарифм, но еще добавится, добавится еще логарифм вот отсюда.
[01:04:49.120 --> 01:04:51.120]  Вот.
[01:05:14.120 --> 01:05:16.120]  Есть какие-то вопросы?
[01:05:19.120 --> 01:05:29.120]  Так. Ну, а, значит, у меня чуть-чуть времени остаёт. Дальше я так срокими
[01:05:29.120 --> 01:05:36.120]  мозгами в конце свяжу вот эту вот тему с логарифмической памятью.
[01:05:38.120 --> 01:05:43.120]  Значит, на самом деле будет верно следующее.
[01:05:43.120 --> 01:05:53.120]  Значит, связь, связь с логарифмической памятью.
[01:05:59.120 --> 01:06:07.120]  Значит, оставим вот в той иерархии NC и AC классов, там еще и L и NL будут.
[01:06:07.120 --> 01:06:10.120]  Значит, а именно верно следующее.
[01:06:10.120 --> 01:06:22.120]  Значит, NC1, но при этом не просто NC1, а то, что называется лог равномерная,
[01:06:22.120 --> 01:06:24.120]  лог-юниформ.
[01:06:24.120 --> 01:06:30.120]  Это означает, что можно генерировать, значит, можно генерировать
[01:06:30.120 --> 01:06:36.120]  тему для N-входов на памяти порядка логарифма M.
[01:06:36.120 --> 01:06:52.120]  Тема с N-входами не просто вычислима, а вычислима, вычислима на памяти
[01:06:52.120 --> 01:06:57.120]  этого большого от логарифма M.
[01:06:57.120 --> 01:07:07.120]  Вот, тогда вот эта NC1 будет ложна в L, значит, L, как мы знаем, ложна в NL,
[01:07:07.120 --> 01:07:13.120]  а NL будет ложна в AC1.
[01:07:13.120 --> 01:07:20.120]  И на эту тоже можно ставить лог-юниформ, но это не очень важно.
[01:07:20.120 --> 01:07:23.120]  Вот, значит, на чем это основано.
[01:07:23.120 --> 01:07:29.120]  Значит, опять же я подробно не буду объяснять, но идея следующая.
[01:07:29.120 --> 01:07:33.120]  Ну, вот это вот на чем основано.
[01:07:33.120 --> 01:07:35.120]  Ну, на том, что мы просто...
[01:07:35.120 --> 01:07:41.120]  Ну, тут, смотрите, сама схема может быть вовсе не логарифмического размера,
[01:07:41.120 --> 01:07:43.120]  а полинамиального.
[01:07:43.120 --> 01:07:48.120]  Но получается, что любой конкретный...
[01:07:48.120 --> 01:08:01.120]  Да, и тут еще важно, что это именно NC1, то есть у каждого элемента ровно два предыдущего.
[01:08:01.120 --> 01:08:07.120]  Ну, соответственно, идея, что мы на логарифмической памяти устроим рекурсию
[01:08:07.120 --> 01:08:10.120]  и просто все вычислям.
[01:08:10.120 --> 01:08:12.120]  То есть у нас есть какой-то ответ.
[01:08:12.120 --> 01:08:15.120]  Для него сначала две части нужно посчитать.
[01:08:15.120 --> 01:08:19.120]  И мы сначала посчитаем одну часть, потом другую, если надо.
[01:08:19.120 --> 01:08:22.120]  Если надо, имеется в виду следствие, что если мы конъюнцию считаем
[01:08:22.120 --> 01:08:28.120]  и у нас первая половина 0 получилась, то уже может трое не считать, уже ответ 0.
[01:08:28.120 --> 01:08:32.120]  А если первая половина 1, тогда вторую тоже нужно посчитать.
[01:08:32.120 --> 01:08:36.120]  И что получится, то и будет ответом.
[01:08:41.120 --> 01:08:45.120]  Не-не-не, прямо сама схема вычисляется.
[01:08:45.120 --> 01:08:52.120]  Строчка, ну да, то есть нужно сказать, что машина получает N в унарной записи,
[01:08:52.120 --> 01:08:56.120]  то есть машина получает строчку из N единиц
[01:08:56.120 --> 01:09:05.120]  и возвращает прямо схему, используя порядок логарифма N в рабочей памяти.
[01:09:05.120 --> 01:09:13.120]  Нет, смотрите, мы не только можем вычислить саму схему,
[01:09:13.120 --> 01:09:16.120]  но еще и ее ответ на любом входе.
[01:09:16.120 --> 01:09:20.120]  То есть как бы вот эта вот программа, которая вот здесь,
[01:09:20.120 --> 01:09:24.120]  которая на лог памяти вычисляет функцию, она делает следующее.
[01:09:24.120 --> 01:09:28.120]  Она вычисляет схему и в нее подставляет свой аргумент.
[01:09:28.120 --> 01:09:31.120]  Но она не может целиком вычислить схему и ее хранить.
[01:09:31.120 --> 01:09:36.120]  Да, она только может, любой участок схемы может по заказу вычислить,
[01:09:36.120 --> 01:09:40.120]  а целиком она не может хранить.
[01:09:40.120 --> 01:09:49.120]  Ну, соответственно, работа у нее будет как раз такая, что она берет выходной проводок,
[01:09:49.120 --> 01:09:55.120]  у него там два входа, значит, она идет к одному, вычисляет налог памяти,
[01:09:55.120 --> 01:09:59.120]  потом идет к другому, на той же самой памяти ее вычисляет.
[01:09:59.120 --> 01:10:03.120]  И так все рекурсивно получается.
[01:10:03.120 --> 01:10:09.120]  И за счет того, что здесь логарифмическая глубина, ну, за счет вот этого,
[01:10:09.120 --> 01:10:10.120]  не это в логарифме, а вот это в логарифме,
[01:10:10.120 --> 01:10:12.120]  за счет того, что здесь логарифмическая глубина,
[01:10:12.120 --> 01:10:14.120]  глубина рекурсии тоже будет логарифмическая,
[01:10:14.120 --> 01:10:16.840]  и поэтому выдаст вашу логарифмическую память.
[01:10:16.880 --> 01:10:22.120]  Такая вот идея.
[01:10:22.120 --> 01:10:29.360]  Ну не знаю, что-то я чувствую, что это не очень медительно, нормально.
[01:10:29.360 --> 01:10:33.680]  Не, ну подробно, подробно не хочется мне развесть, более времени не осталось.
[01:10:33.680 --> 01:10:51.120]  Ну дайте я кем-нибудь какую-то основную идею напишу, что можно вычислять значение схемы
[01:10:51.120 --> 01:11:05.200]  на заданном входе на логеретмической памяти. Вот, ну то, что L в NL это мы уже знаем.
[01:11:05.200 --> 01:11:12.840]  Вот, ну а вот здесь вот, значит, почему NL вложено в Oc1, это еще некоторый шаг,
[01:11:13.200 --> 01:11:25.440]  с умножением кисел. Нужен шаг с умножением матов. Потому что NL, ну там еще нужно отдельно
[01:11:25.440 --> 01:11:34.960]  доказать, скажем, что Oc1 замкнута относительно лог свадимости. Тут нужно сказать, что Oc1
[01:11:34.960 --> 01:11:49.040]  замкнута относительно свадимости. И второе, что задача достижимости F лежит в Oc1.
[01:11:49.040 --> 01:11:59.160]  Ну и вот это вот основано на умножение матриц, потому что вот если мы матрицу смежности умножаем,
[01:11:59.160 --> 01:12:08.680]  то мы получаем матрицу из кисел, которые будут равны числу путей из одной мишины с другой.
[01:12:08.680 --> 01:12:26.840]  Вот это вот на основе умножения матрицы. Вот, ну а соответственно, нам фактически нужно
[01:12:27.080 --> 01:12:37.440]  NL возводить, а это будет логарифм N в изведении в квадрат. То есть, чтобы возвести A в N,
[01:12:37.440 --> 01:12:44.320]  нужно возвести в квадрат, еще в квадрат, еще в квадрат, и так логарифм N раз. Матрица
[01:12:44.320 --> 01:12:51.440]  в N в степени, это будет A в квадрате, еще в квадрате, еще в квадрате, и так далее.
[01:12:51.440 --> 01:13:05.720]  Значит так, логарифм N раз. Ну а соответственно, просто квадрат вычисляется как раз в Oc0.
[01:13:05.720 --> 01:13:15.520]  Ну, просто более-менее по определению, что такое умножение, что это в каждой ячейке мы
[01:13:15.520 --> 01:13:22.560]  вычисляем какую-то сумму произведений. Но произведение просто комьюнсы, а сумма,
[01:13:22.560 --> 01:13:28.360]  ну а на самом деле, так, я тут немножко в ловушку попался, если прямо обычное умножение брать,
[01:13:28.360 --> 01:13:33.000]  то там будет сумма, а сумму нельзя в Oc0 сделать. Но на самом деле нам нужно не обычное умножение,
[01:13:33.000 --> 01:13:41.360]  а дизюнкное, где вместо суммы будет дизюнкция. Нам не важно сколько путей, нам важно есть или нет.
[01:13:41.360 --> 01:13:47.320]  А дизюнкция, раз, можно в Oc0 сделать, и поэтому получится именация 1, а не Nc2.
[01:13:47.320 --> 01:13:58.600]  Ладно, вообще вот такая вот интересная область, интересная с точки зрения теории, с точки зрения
[01:13:58.600 --> 01:14:07.480]  практики. Конечно, я только какие-то самые азы ее затронул, надеюсь, это было интересно.
[01:14:07.480 --> 01:14:12.280]  В следующий раз мы начнем рассуждение про вероятностные числения, вероятностные
[01:14:12.280 --> 01:14:19.920]  машины тюринга, вероятностные основные классы. На этом на сегодня все, спасибо.
