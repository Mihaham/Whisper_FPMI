[00:00.000 --> 00:07.200]  Так, всем здрасте, давайте начинать.
[00:07.200 --> 00:19.720]  У нас сегодня последняя встреча, я в пользу случаем
[00:19.720 --> 00:24.440]  порекламирую московский четвертьфинал ACPC, те, кто
[00:24.440 --> 00:27.520]  хотят, могут собрать команду из трех человек, я уже писал
[00:27.520 --> 00:31.000]  в канале об этом, сейчас скажу тоже, можно собрать
[00:31.000 --> 00:33.200]  команду из трех человек и поучаствовать, предварительно
[00:33.200 --> 00:35.760]  это будет 19 декабря, правда там у всех будет, наверное,
[00:35.760 --> 00:38.160]  зачет на неделе, всем будет не до этого, ну короче,
[00:38.160 --> 00:42.440]  если хотите, то вот 19 декабря можно поучаствовать в четвертьфинале,
[00:42.440 --> 00:47.560]  и если это будет действительно в эту дату, то в зависимости
[00:47.560 --> 00:51.280]  от количества задач, которые вы решите на этой олимпиадке,
[00:51.280 --> 00:54.760]  будут бонусы и их зачет только экзамена, а если
[00:54.760 --> 00:58.000]  это будет позже, то, соответственно, зачетную ведомость уже
[00:58.000 --> 01:00.240]  придется создать, будет бонус только экзамена, если
[01:00.240 --> 01:04.360]  он будет до экзамена, но тем не менее, всех приглашаю,
[01:04.360 --> 01:07.360]  может быть довольно весело.
[01:07.360 --> 01:18.440]  Вот, хорошо, значит, мы давайте начинать, и мы заканчиваем
[01:19.440 --> 01:27.000]  Давайте я начну с того, что, напомню, определение графа
[01:27.000 --> 01:28.000]  деланное.
[01:28.000 --> 01:35.240]  Нет, давайте начнем сначала с диаграммы Воронова, вот
[01:35.240 --> 01:37.880]  у нас есть диаграмма Воронова для набора сайтов, давайте
[01:37.880 --> 01:41.680]  мы скажем, что две ячейки диаграммы Воронова соседние,
[01:41.680 --> 01:43.680]  если они разделяют кусок границы положительной длины.
[01:43.680 --> 02:01.440]  Будем говорить, что две ячейки VOTPi и VOTPj соседние в диаграмме
[02:01.440 --> 02:10.720]  Воронова, если, ну, можно писать, что мера границы
[02:10.720 --> 02:15.160]  положительна, в том смысле, что мера их пересечения
[02:15.160 --> 02:17.000]  противоположительна, ну, потому что их пересечение
[02:17.000 --> 02:21.760]  это какое-то одномерное множество, это либо отрезок, либо лучки
[02:21.760 --> 02:28.640]  бесконечная прямая, вот, но мера в смысле R1, то есть
[02:28.640 --> 02:31.040]  не площадь, а именно длина.
[02:32.040 --> 02:44.280]  если они пересекаются по куску границы положительной
[02:44.280 --> 02:45.280]  длины.
[02:45.280 --> 02:52.880]  Вот, ну и при таком допущении, мы будем говорить, что
[02:52.880 --> 02:58.520]  графт LNE устроен следующим образом, у него V множество
[02:58.520 --> 02:59.520]  вершин.
[02:59.520 --> 03:03.680]  Это просто все сайты, P1 и так далее, PN, все наши сайты
[03:03.680 --> 03:06.560]  по которым устроен диаграмм Воронова, а ребра это просто
[03:06.560 --> 03:09.400]  пары сайв, для которых соответствующие ячейки
[03:09.400 --> 03:10.400]  соседние.
[03:10.400 --> 03:14.880]  Соответственно, E это множество неориентированных пар,
[03:14.880 --> 03:20.280]  ну, неупорядоченных пар P и Pj, таких, что VOTPi и VOTPj
[03:20.280 --> 03:21.280]  соседние.
[03:21.280 --> 03:28.840]  Вот, ну и что ж такое графт делано.
[03:28.840 --> 03:33.160]  Давайте я скопирую какую-нибудь картинку с примером того,
[03:33.160 --> 03:34.640]  как этот графт может выглядеть.
[03:34.640 --> 04:02.240]  Так, ну вот, например, что-то такое, значит, смотрите,
[04:02.240 --> 04:10.160]  здесь жирными точки отмечены сайты, жирные точки, это
[04:10.160 --> 04:13.400]  наши сайты, P1 и так далее, PN, пунктирными линиями
[04:13.400 --> 04:17.720]  обозначены ребра диаграммы Воронова, а сплошными линиями
[04:17.720 --> 04:21.040]  обозначены, ну, вот, дуги между, ну, как бы, ребра
[04:21.040 --> 04:24.840]  между соседними сайтами, да, то есть, вот, например,
[04:24.840 --> 04:28.000]  вот эта вот дуга означает, что вот эти вот два сайта
[04:28.000 --> 04:29.960]  соответствуют ячейкам, у которых вот есть этот
[04:29.960 --> 04:30.960]  общий кусок границ.
[04:31.120 --> 04:32.640]  А, например, вот эта вот дуга.
[04:32.640 --> 04:35.320]  Вот эта дуга – это как раз, опять-таки, вот эти вот
[04:35.320 --> 04:37.920]  две ячейки соседние, значит, мы проводим ребро между
[04:37.920 --> 04:38.720]  сайтами.
[04:38.720 --> 04:40.600]  Вот так выглядит гравт деланый, то есть, мы проводим
[04:40.600 --> 04:43.520]  просто такое ребро между двумя соседними ячейками,
[04:43.520 --> 04:45.080]  между, как бы, центрами ячейк.
[04:46.080 --> 04:50.000]  На самом деле можно проводить не такую кривую линию, да,
[04:50.000 --> 04:52.320]  не кривую между вершинами, а на самом деле можно проводить
[04:52.320 --> 04:54.720]  просто прямой линией отрезок, и получится плоский
[04:54.720 --> 04:58.360]  граф, который мы сейчас с вами докажем.
[04:58.360 --> 05:00.320]  Если я.
[05:00.320 --> 05:06.320]  на том же рисунке вместо кривых буду рисовать просто отрезки, то получится плоский граф, то есть
[05:06.320 --> 05:14.440]  без сам пересечений. Мне кажется, что будет такая. Вот, соответственно, говорим следующее, что если
[05:14.440 --> 05:27.680]  ребра рисовать отрезками, то будет плоский граф. Ну плоские, то есть ребра не пересекаются, кроме
[05:27.680 --> 05:41.480]  так по вершину. Так, давайте попробуем доказать. Ну, пусть это не так, пусть не так. И пусть
[05:41.480 --> 06:03.720]  ПИПЖ и ПКПЛ это пересекающиеся ребра нашего графа. Вот давайте мы нарисуем ребро ПИПЖ, вспомним,
[06:03.720 --> 06:07.960]  что означает, что между ними проводим ребро. Мы проводим ребро в графе Делане, если только
[06:07.960 --> 06:12.920]  если ячейки им соответствующие имеют какой-то общий кусок границы положительной длины, то есть
[06:12.920 --> 06:18.840]  между ними есть кусок серпера, кусок середины перпендикуляра в диаграмме Воронова. Ну мы знаем,
[06:18.840 --> 06:26.280]  что такое есть ребро в диаграмме Воронова. У нас был критерий в прошлый раз, что если есть какой-то
[06:26.280 --> 06:31.920]  кусок середины перпендикуляра, то это означает, что есть какой-то круг, центр которого лежит как
[06:31.920 --> 06:36.160]  раз таки на этом середине перпендикуляря, так вот, что этот круг пустой по отношению к П, и при этом
[06:36.160 --> 06:45.280]  на его границе лежат только ПИПЖ. Вот я как-то так его нарисую. Раз это ребро треангуляции Делана,
[06:45.280 --> 06:54.560]  значит между ними есть часть середины перпендикуляра, является частью какого-то ребра в диаграмме Воронова,
[06:54.560 --> 07:01.600]  значит есть вот такой круг, это критерий с прошлого раза. Давайте точку я назову ХИЖ, этот круг
[07:01.600 --> 07:12.080]  назову, значит этот круг я назову СИЖ, этот треугольник я назову ТИЖ. Значит так, поскольку ПИПЖ это
[07:12.080 --> 07:26.400]  ребро, то существует круг с центром в какой-то точке ХИЖ такой, что внутри него, на границе лежат
[07:26.400 --> 07:40.080]  только ПИПЖ, на границе лежат ПИПЖ, и больше никого нет ни внутри ни на границе, больше никого ни внутри
[07:40.080 --> 07:51.200]  ни на границе. Это у нас было свойство диаграмма Воронова. Хорошо, значит есть вот такой треугольник,
[07:51.200 --> 07:56.240]  давайте этот треугольник называть ТИЖ, давайте построим точно такой же треугольник ТКЛ, то есть
[07:56.240 --> 08:01.600]  есть у меня второе вот это вот ребро ПКЛ, это тоже ребро тренгуляции ДЛН, значит кусок серпера присутствует
[08:01.600 --> 08:06.800]  в диаграмме Воронова, значит можно опять-таки построить такой треугольник. И смотрите, что у меня есть, у меня есть два треугольника,
[08:06.800 --> 08:20.320]  причем можно еще заметить, что отрезок, давайте назовем интервал, интервал, скажем, от ХИЖ до ПИ, он лежит
[08:20.320 --> 08:29.440]  строго внутри ИТ-ячейки диаграмма Воронова, потому что, что значит, что за интервал от ХИЖ до ПИ?
[08:29.440 --> 08:36.240]  Это какое-то множество точек, и понятно, что ближайшее к ним ко всем это ПИ, ну потому что ближайшее к ХИЖ
[08:36.240 --> 08:41.120]  это ПИПЖ, значит здесь мы только приближаемся к ПИ, соответственно удаляемся от ПИПЖ, поэтому все вот эти
[08:41.120 --> 08:47.360]  вот точки на этом интервале лежат строго внутри вот этой вот ячейки, ИТ-ячейки диаграмма Воронова,
[08:48.320 --> 08:57.280]  поэтому в частности это означает, что на этом отрезке, ну не совсем, да, я говорил, что вот даже вот этот кусок
[08:57.280 --> 09:02.840]  лежит строго в ИТ ячейки, а этот кусок лежит строго в Ж, это в частности значит, что вот тот
[09:02.840 --> 09:08.640]  наш второй треугольник ТКЛ, который пересекает, то есть мы знаем, что ребро ККЛ, пересекает ребро
[09:08.640 --> 09:14.120]  наших ИЖ, вот это означает, что остальные все его вершины не могут лежать внутри этого треугольника,
[09:14.120 --> 09:20.540]  из-за вот этого свойства, что у меня, по сути, мой треугольник t и g расположен частично внутри
[09:20.540 --> 09:27.580]  и t-ячейки, частично внутри житой. Это означает, что вот тот второй треугольник, он с ним,
[09:27.580 --> 09:38.380]  как бы, ни одна вершина не лежит внутри треугольника t и g. Ни одна вершина треугольника t и g не лежит
[09:38.380 --> 09:47.740]  внутри t и g. Потому что иначе, если какая-то такая картинка была бы, то есть мы предполагаем,
[09:47.740 --> 09:51.940]  что они пересекаются, и какая-нибудь картинка вот такая. Здесь, например, там pk. Но это тогда
[09:51.940 --> 09:57.780]  значит, что к точке x и g ближайшая точка это pk, а не p и pg. Противоречие. Но, соответственно,
[09:57.780 --> 10:03.580]  все остальные случаи точно так же разбираются, то есть такого не бывает. Ну и симметрично тоже это
[10:03.580 --> 10:15.500]  верно. Наоборот, ни одна вершина t и g не лежит внутри tkl. Значит, картинка будет какая-то такая.
[10:15.500 --> 10:25.620]  Вот есть треугольник t и g. Есть треугольник t и g. И есть второй треугольник tkl. Он будет выглядеть как-то вот так.
[10:25.620 --> 10:32.700]  Раз у них есть пересекающий вот этот ребро, мы предполагаем, что p и pg и pk и p и p пересекаются.
[10:32.700 --> 10:37.820]  И при этом ни одна вершина одного не принадлежит другому, то тогда они вот как-то так выглядят.
[10:37.820 --> 10:44.580]  Значит, в этом случае я утверждаю, что, давайте, давайте напишу, что я хочу сказать. Значит, тогда
[10:44.580 --> 11:13.220]  один из отрезков p и xg и pg и xg пересекает один из отрезков pk xkl и pl xkl.
[11:13.220 --> 11:24.060]  То есть у них там есть много пересечений. То есть если есть одно пересечение по pg pk p и при этом ни одна вершина никакого не лежит в другом, то тогда у них на самом деле много пересечений.
[11:24.060 --> 11:31.220]  И вот обязательно хотя бы один из этих двух отрезков пересекается с одним из этих двух отрезков. Там просто порисовать и понять, что картинка обязательно такая.
[11:31.220 --> 11:42.220]  Ну а чем это плохо? Давайте предположим, что какая-нибудь там p и xg пересекается с pk xkl.
[11:42.220 --> 11:50.220]  Ну, мы с вами поняли, что вот этот интервал он целиком лежит в этой ячейке, а вот этот интервал целиком лежит в скатой ячейке.
[11:50.220 --> 11:55.220]  Значит, у меня как бы внутренности ячейки пересекаются в какой-то точке, а такого не бывает. Противоречие.
[11:55.220 --> 12:05.220]  Значит, это означает, что две ячейки диаграммы Воронова пересекаются по внутренности.
[12:05.220 --> 12:12.220]  Ну, это противоречие, потому что мы знаем, что пересекаться не могут только по границе.
[12:12.220 --> 12:19.220]  То есть если какие-то точки равно удалены от нескольких, то они лежат в нескольких ячейках, а по внутренности, понятное дело, пересекаться наши ячейки не могут.
[12:20.220 --> 12:30.220]  Здесь для того, чтобы целиком убедиться, что это доказательство работает, нужно просто аккуратно порисовать там случай, как эти треугольники могут взаимно располагаться,
[12:30.220 --> 12:36.220]  и понять, что обязательно будет какое-то пересечение, которое приводит нас к противоречию с определенным диаграммом Воронова.
[12:36.220 --> 12:46.220]  Значит, действительно тот наш граф деланный плоский. Если просто соединять отрезком два сайта, у которых соответствующие им ячейки соседние,
[12:46.220 --> 12:51.220]  тогда у нас получится обязательно плоский граф без сам пересечений.
[12:51.220 --> 13:03.220]  Вот, хорошо. Можно также сформулировать такой критерий о том, что является гранью графа деланой, что является ребром графа деланой.
[13:03.220 --> 13:10.220]  Это будет очень похоже на критерии для ребер и для вершин в диаграмме Воронова.
[13:10.220 --> 13:38.220]  Давайте сформулируем такую теорему. Во-первых, сайты PI, PG, PK являются вершинами одной ограниченной гранью графа деланой.
[13:40.220 --> 14:00.220]  Если и только если, существует такая точка Q, что пустой круг относительно этого множества точек P содержит на границе в точности PI, PG, PK,
[14:00.220 --> 14:18.220]  Существует такая точка, что Q относительно нашего множества сайтов P содержит на границе PI, PG, PK.
[14:18.220 --> 14:25.220]  У нас было критерий того, что точка является вершиной диаграммы Воронова.
[14:25.220 --> 14:34.220]  Там ровно это и было, что если мы описываем максимальный пустой круг с центром в какой-то точке Q, то внутри него никого нет, а на границе хотя бы три точки.
[14:34.220 --> 14:38.220]  Тоже самое здесь. Три точки образуют гранью, точнее, являются вершинами какой-то гранью.
[14:38.220 --> 14:44.220]  Только если есть какая-то вершина диаграммы Воронова, такая, что она от них от тех равно удалена.
[14:44.220 --> 14:47.220]  Внутри никого нет, а на границе круга есть хотя бы три точки.
[14:48.220 --> 14:51.220]  Ну и второе, значит, отрезок.
[14:51.220 --> 14:53.220]  Сейчас можно вопрос?
[14:53.220 --> 14:54.220]  Да, давайте.
[14:54.220 --> 14:58.220]  Вы сказали, что Q это вершина диаграммы Воронова именно, или это просто точка?
[14:58.220 --> 15:03.220]  Нет, ну смотрите, если вот это выполняется, то это обязательно вершина диаграммы Воронова, потому что...
[15:03.220 --> 15:04.220]  А, ну да, это мы доказали.
[15:04.220 --> 15:05.220]  Да, да, это мы доказали.
[15:05.220 --> 15:07.220]  И никаких других внутри, правда, Эд?
[15:07.220 --> 15:11.220]  Это просто по поводу записи, что нас содержит на границе.
[15:11.220 --> 15:15.220]  По определению пустой круг, это вот СQ, оно никого внутри не содержит, просто по определению.
[15:15.220 --> 15:17.220]  Да, понял. Спасибо.
[15:17.220 --> 15:18.220]  Вот.
[15:18.220 --> 15:19.220]  Второе.
[15:19.220 --> 15:23.220]  Отрезок P и Pg является ребром триангуляции Делане.
[15:24.220 --> 15:28.220]  Ребром триангуляции Делане.
[15:30.220 --> 15:31.220]  Если, только если...
[15:33.220 --> 15:34.220]  Так, сейчас, секунду.
[15:35.220 --> 15:37.220]  Что у нас там было? У нас там существует какое-то...
[15:40.220 --> 15:44.220]  Ну да, существует Q.
[15:46.220 --> 16:00.220]  Так, на самом деле можно просто считать, что существует такое, что CQP содержит на границе P и Pg, и больше никого.
[16:01.220 --> 16:03.220]  И больше никого.
[16:03.220 --> 16:11.220]  Вот, это тоже очень похоже на критерии того, что между двумя точками есть часть середины прегуляра в диаграмме Воронова.
[16:11.220 --> 16:21.220]  Мы там утверждали, что наличие серпера в диаграмме Воронова равностельно тому, что на нём есть какая-то точка, такая, что пустой круг с центром в ней содержит эти две и больше никого.
[16:21.220 --> 16:25.220]  Ну вот здесь тоже самое, только я ещё опустил требование того, что Q лежит на середине прегуляря.
[16:25.220 --> 16:27.220]  На самом деле оно там и так не явно подразумевается.
[16:27.220 --> 16:35.220]  Вот здесь можно подписать, что Q лежит на середине прегуляря P и Pg.
[16:35.220 --> 16:39.220]  То есть это можно требовать, можно не требовать, оно на самом деле автоматически...
[16:39.220 --> 16:47.220]  Если у нас на границе круга лежат P и Pg, то автоматически точка Q лежит на середине прегуляря P и Pg, потому что она от них равномудрена.
[16:47.220 --> 16:51.220]  Поэтому это можно даже не требовать, это автоматически вытекает из вот этого требования.
[16:51.220 --> 16:53.220]  А там точно ребро треангуляции главное?
[16:53.220 --> 16:57.220]  В треангуляции мы можем выбирать против большиннего смысла.
[16:57.220 --> 17:02.220]  Виноват графа, да, спасибо, извините, это я уже тратлюсь. Да, графа, конечно, графа.
[17:02.220 --> 17:04.220]  Да, мы пока что только про графа говорим.
[17:05.220 --> 17:10.220]  И доказывается, собственно, ровно точно так же, как мы доказывали все про диаграмм Воронова,
[17:10.220 --> 17:15.220]  потому что здесь есть максимальная двойственность, что просто один граф это двойственный к другому.
[17:15.220 --> 17:21.220]  Мы грани считаем за вершины, соединяем ребрами смежные грани, вот, собственно, просто обычная двойственность.
[17:21.220 --> 17:23.220]  Поэтому все сразу переносится.
[17:23.220 --> 17:26.220]  Ну и отсюда сразу следует следующее.
[17:26.220 --> 17:37.220]  Значит, любая ограниченная грань графа Дилане выглядит как, как это называется,
[17:37.220 --> 17:49.220]  вписанный в выпуклонный угольник, вписанный в какую-то окружность, вписанный в окружность, выпуклонный угольник.
[17:49.220 --> 17:56.220]  Ну это тривиально, потому что, что значит, что у меня какие-то, например, есть какая-то грань,
[17:56.220 --> 18:03.220]  в которой больше чем три вершины, 4-5, любые три из них являются вершинами одной и той же грани.
[18:03.220 --> 18:10.220]  Значит, по вот этому первому свойству есть какая-то точка, такая, что они все лежат на, они все равно длины от этой точки.
[18:10.220 --> 18:16.220]  Ну, в общем, понятно, что тогда эта точка должна совпадать для любой тройки, это несложно вывести.
[18:16.220 --> 18:20.220]  Значит, это тогда точка должна совпадать для любой тройки вершин этого нагугольника.
[18:20.220 --> 18:22.220]  Ну и значит, фигурка обязательно такая.
[18:22.220 --> 18:26.220]  Есть общий центр, точка Ку, которая является на самом деле вершиной диаграмма Воронова.
[18:26.220 --> 18:28.220]  Вот, и нагугольник выглядит как-то так.
[18:28.220 --> 18:30.220]  То есть ну вот, вот что-то такое.
[18:30.220 --> 18:37.220]  Он может как содержать ту же Ку внутри, так и может не содержать, например, что-нибудь вот такое тоже вполне себе может быть.
[18:38.220 --> 18:46.220]  И вот это, вот это вершинки, которые соответствуют вершинам, которые соединены в диаграмме, в триангуляции Д'Оннельева.
[18:46.220 --> 18:52.220]  Ну и соответственно тогда отсюда раз каждая грань, которая еще не треугольника, она является выпуклана нагугольником,
[18:52.220 --> 18:58.220]  тогда можно на самом деле ее как угодно дотреангулировать, например, вот так вот.
[18:58.220 --> 18:59.220]  Как-нибудь вот так.
[18:59.220 --> 19:01.220]  И здесь тоже как-нибудь вот так.
[19:01.220 --> 19:03.220]  И тогда получится триангуляция Д'Оннельева.
[19:03.220 --> 19:05.220]  У нас тогда тоже определение.
[19:05.220 --> 19:10.220]  Любая триангуляция графа Д'Оннельева.
[19:11.220 --> 19:13.220]  Это триангуляция Д'Оннельева.
[19:16.220 --> 19:20.220]  Вот, и здесь в частности легко заметить, что если у меня каждая грань,
[19:20.220 --> 19:24.220]  которую мы в принципе должны триангулировать, это выпуклый вписанный нагугольник,
[19:24.220 --> 19:29.220]  то вне зависимости от того, как мы ее триангулируем, у нас минимальный угол будет один и тот же.
[19:29.220 --> 19:31.220]  И он будет опираться на самый маленький издук.
[19:31.220 --> 19:33.220]  То есть у меня все вписано в окружность.
[19:33.220 --> 19:35.220]  У меня есть эти вот куски.
[19:35.220 --> 19:37.220]  У меня естьdoogie окружности.
[19:37.220 --> 19:40.220]  На каждую из них после триангуляции должен опираться хоть какой-то угол,
[19:40.220 --> 19:43.220]  ну, и соответственно минимальный из них должен опираться на минимальную дугу.
[19:43.220 --> 19:45.220]  Поэтому не важно, как мы триангулируем.
[19:45.220 --> 19:47.220]  Минимальный угол всегда будет один и тот же.
[19:48.220 --> 19:49.720]  Давайте здесь напишем замечание.
[19:51.220 --> 19:58.220]  Вне зависимости от способа триангуляции, вне зависимости от триангуляции…
[20:01.220 --> 20:09.100]  минимальный угол один тот же. Ну а про минимальный угол почему мы говорим? Ну потому что мы как бы
[20:09.100 --> 20:13.860]  мотивируемся тем, что нам нужно построить такую треангуляцию, у которой минимальный угол как
[20:13.860 --> 20:20.180]  можно больше. Ну а если у нас минимальный угол не изменяется при переходе между разными
[20:20.180 --> 20:24.260]  треангуляциями внутри нашего вот многоугольника, то тогда неважно как именно треангулирует,
[20:24.260 --> 20:28.820]  давайте считать, что они все хорошие, они все максимизируют минимальный угол, потому что он у них
[20:28.820 --> 20:35.140]  одинаковые, просто будут у всех, вне зависимости от выбора треангуляции. Вот это треангуляция деланная.
[20:35.140 --> 20:42.660]  Хорошо, значит давайте так, нам все-таки наша основная цель это разработить какой-то алгоритм,
[20:42.660 --> 20:48.220]  поэтому я сейчас сформулирую тезисно некоторые критерии, некоторые свойства, которые нам будут
[20:48.220 --> 20:52.340]  важны для построения алгоритма, мы их видимо уже не успеваем доказать, ну значит они будут без
[20:52.340 --> 20:58.100]  доказательств, но они помогают понять вообще как связано то, что мы сделали, с тем как будет
[20:58.100 --> 21:09.020]  строена алгоритм. Значит теорема, давайте нашу первые критерии, первые критерии. Значит пусть есть
[21:09.020 --> 21:13.740]  произвольная треангуляция данного множества точек, данного множества сайтов, тогда я утверждаю,
[21:13.740 --> 21:18.940]  что она является треангуляцией деланной, вот в том смысле как мы только что определили, то есть
[21:18.940 --> 21:24.300]  что она является подразбиением графа деланной до треугольников, если и только если, когда вы
[21:24.300 --> 21:29.180]  описываете круг вокруг любого треугольника этой треангуляции, внутри него не будет никаких других
[21:29.180 --> 21:46.900]  точек. Напишем это, треангуляция Т является треангуляцией деланной, если и только если верно следующее,
[21:46.900 --> 22:05.380]  круг, описанный вокруг любого треугольника Т, не содержит внутри себя других вершин треангуляции,
[22:05.380 --> 22:25.780]  других вершин треангуляции. Вот такое интересное свойство. Ну и оно собственно следует из того,
[22:25.780 --> 22:31.020]  как мы строим треангуляцию деланной, значит мы взяли все вот эти вот окружности, описанные вокруг
[22:31.020 --> 22:37.180]  граней, и их как-то посекли, так разбили на треугольнике, так что все равно вокруг каждого треугольника
[22:37.180 --> 22:43.100]  окружность не изменилась, соответственно внутри этой окружности не будет других точек. Это перекликается
[22:43.100 --> 22:49.820]  и с вот этим нашим утверждением про то, когда какие-то три вершины лежат в одной грани, когда они
[22:49.820 --> 22:53.420]  являются вершинами грани, ну вот когда пустой круг какой-то есть, который никого внутри не
[22:53.420 --> 22:57.620]  содержит, а содержит их на границе, ну и там возможно кого-то еще. И соответственно это можно
[22:57.620 --> 23:02.580]  перенести на такое утверждение, что чтобы найти треангуляцию деланной, нам достаточно найти
[23:02.580 --> 23:07.020]  какую-то треангуляцию, такую, что круг, описанный вокруг каждого треугольника, больше никого не
[23:07.020 --> 23:12.500]  содержит, не содержит никаких других вершин треангуляций. Ну соответственно это как бы без
[23:12.500 --> 23:16.980]  доказательств, но доказательства как бы я идейно проговорил, что вот у нас есть утверждение,
[23:16.980 --> 23:24.100]  показывающее как собственно устроен граф деланной, что там когда три точки лежат в одной грани,
[23:24.100 --> 23:28.660]  ну соответственно здесь нужно, и как бы мы понимаем, откуда берутся окружности, вот это вот пустые круги,
[23:28.660 --> 23:33.700]  нужно просто наложить одно на другое и собственно все получится, но за нехваткой времени мы это
[23:33.700 --> 23:40.540]  доказательства пропустим. Вот, значит это первый критерий, таким образом как бы мы что хотим, да, то есть в принципе
[23:40.540 --> 23:45.580]  можно было бы делать так, вот есть у нас какой-то алгоритм сложно выритом Форчуна, который строит
[23:45.580 --> 23:50.780]  диаграмму Воронова, и потом по ним можно построить треангуляцию деланной. Да, это можно, но тот
[23:50.980 --> 23:56.340]  алгоритм довольно громоздкий, тот, который мы построим, мне кажется чуть проще, поэтому собственно я
[23:56.340 --> 24:02.460]  я к нему и подвожу. То есть в принципе можно было бы треангуляцию деланной просто строить из диаграмм
[24:02.460 --> 24:06.780]  Воронова, построить диаграмм Воронова, потом построить треангуляцию деланной. Вот, но чтобы это делать
[24:06.780 --> 24:11.420]  по другому, чтобы напрямую строить треангуляцию деланной, нам нужно сначала понять, какие-то ее
[24:11.420 --> 24:15.240]  свойства, и вот, например, здесь с помощью этого критерии мы понимаем, что достаточно найти не
[24:15.240 --> 24:18.420]  треангуляцию деланной, а просто какую-то треангуляцию такую, что круг описан вокруг장 любогоижу
[24:18.420 --> 24:22.660]  вокруг любого треугольника больше никого не содержит, просто переформулировка того,
[24:22.660 --> 24:29.420]  что мы ищем. Хорошо, но это еще не все, нам будет нужна вторая переформулировка.
[24:29.420 --> 24:46.140]  Нам нужно будет такое определение. Пусть в триангуляции T есть два треугольника
[24:46.140 --> 24:57.100]  PIPGPK и PIPGPR. Причем они в объединении дают выпуклонного угольника.
[24:57.100 --> 25:01.980]  Их объединение выпуклонного четырехугольника.
[25:01.980 --> 25:07.980]  Картинка какая-то такая. Вот есть такой треугольник и вот такой треугольник.
[25:07.980 --> 25:25.180]  Тогда операция edge flip устроена так. Она берет общий ребро наших двух треугольников и меняет
[25:25.180 --> 25:30.620]  его на противоположное ребро PQP. То есть была такая картинка, а после edge flip будет
[25:30.620 --> 25:49.140]  такая картинка. У нас было два треугольника смежных по ребру. Я хочу это ребро
[25:49.140 --> 25:52.940]  общее удалить и вставить в противоположное ребро, так чтобы опять получились два треугольника
[25:52.940 --> 25:56.820]  смежных по ребру, только по другому ребру. И вот такую операцию мы будем называть edge flip.
[25:56.820 --> 26:05.300]  По-русски это перебрасывание ребра. Мы взяли одно ребро и перебросили его на противоположное,
[26:05.300 --> 26:11.380]  но короче, более емко будет говорить flip. Мы так по-русски будем тоже говорить, что это flip-ребро.
[26:11.380 --> 26:30.060]  Дальше мы будем говорить, что ребро нелегальное. Определение ребро PIPG нелегальное. Если после
[26:30.060 --> 26:37.620]  совершения flip-ребра PIPG минимальный углов увеличится, то есть смотрите, вот здесь у меня было
[26:37.620 --> 26:44.580]  6 углов, альфа-1, альфа-2, альфа-3, альфа-4, альфа-5, альфа-6. Дальше я сделал flip и у меня
[26:44.580 --> 26:51.900]  стало 6 новых углов. Давайте альфа-1 штрих, альфа-2, альфа-1 штрих, альфа-2 штрих, альфа-3 штрих,
[26:51.900 --> 26:59.420]  ну и так далее. Так вот, ребро нелегальное, если после flip-а минимальный из углов увеличился,
[26:59.420 --> 27:14.660]  если после flip-а ребра PIPG, ну я напишу так, минимальное из альфа-и, т-штрих по всем и больше,
[27:14.660 --> 27:19.540]  чем минимальное, так и плохо, и уже занято, давайте какую-нибудь другую перемену назовем,
[27:19.540 --> 27:28.660]  пусть будет t, больше, чем минимум альфа, т, т, по всем t. То есть ребро нелегальное, если можно его
[27:28.660 --> 27:33.900]  как бы исправить, его можно перебросить, его можно flip-нуть, так что нам станет лучше, мы наш
[27:33.900 --> 27:38.980]  минимальный угол увеличим. Напоминаю, наша глобальная цель — это попытаться максимизировать
[27:38.980 --> 27:44.140]  минимальный угол. Но тогда, извините, если можно просто между двумя соседними треугольниками flip-нуть
[27:44.140 --> 27:48.460]  ребро и при этом увеличить минимальный угол, то понятное дело лучше так сделать. Мы так как бы, ну
[27:48.460 --> 27:52.660]  возможно не увеличим минимальный угол во всей треангуляции, но по крайней мере локально сделаем
[27:52.660 --> 27:58.100]  себя лучше. Этот рисунок скорее не очень хороший, здесь как бы в обратную сторону приятно было
[27:58.100 --> 28:03.740]  бы делать, но давайте это сразу подчеркнем, что на этой картинке скорее вот так вот нужно делать flip,
[28:03.740 --> 28:10.020]  соответственно, ребро pkpl нелегально, в том смысле, что если его flip-нуть, то получится ребро ppg и
[28:10.020 --> 28:13.620]  минимальный угол, понятное дело, вырастет. Здесь минимальный угол был где-нибудь вот здесь вот,
[28:13.620 --> 28:18.420]  там альфа 3 штрих, а здесь минимальный угол, ну он вот здесь, и он понятное дело больше. То есть
[28:18.420 --> 28:24.500]  нелегальное ребро — это когда мы делаем flip и как бы локально увеличиваем минимальный угол.
[28:24.500 --> 28:33.740]  Вот что такое нелегальное ребро. Ну и, значит, простое утверждение критерий легальности.
[28:33.740 --> 28:51.380]  Критерий легальности. Пусть vt есть два треугольника, ну вот те самые,
[28:51.380 --> 29:20.500]  ppgpl и ppgpl, тогда ребро ppg нелегально, если только если круг, описанный вокруг ppgpl,
[29:20.500 --> 29:33.860]  содержит pl строго внутри себя. Содержит pl внутри, строго внутри, в смысле, не на границе,
[29:33.860 --> 29:39.900]  а строго внутри. Вот, то есть, картинка какая-то такая, есть круг, есть вот один треугольник,
[29:39.900 --> 29:51.780]  и вот есть какой-то другой треугольник ppgpl. Тогда если точка pl попала внутрь этого круга,
[29:51.780 --> 29:58.140]  тогда выгоднее сделать flip и минимальный угол увеличится. Ну, как бы, на картинке это более
[29:58.140 --> 30:02.820]  или менее понятно, да, то есть, если бы pl лежала на той же, как бы, на границе окружности,
[30:02.820 --> 30:06.700]  то у меня получился бы вписанный четырехугольник, а тогда мы знаем, что вне зависимости от того,
[30:06.700 --> 30:10.380]  как именно мы его тренируем, у нас минимальный угол останется неизменным. Вот, а если точка
[30:10.380 --> 30:15.900]  внутри, то этот угол, как бы, будет сильно больше, чем угол ppgpl, значит, можно flip
[30:15.900 --> 30:21.420]  на ребро и минимальный угол увеличить. Доказательства, давайте я скажу, что, то есть,
[30:21.420 --> 30:26.220]  это будет без доказательств, но такой набросок я тоже скажу. Доказательства используют теремон
[30:26.220 --> 30:33.900]  фалеса в такой ее постановке. Теремон такая, что если у вас есть какая-то окружность,
[30:33.900 --> 30:43.900]  две точки на ней, скажем, не знаю, там a и b, есть точка, ну, а дальше есть несколько точек,
[30:43.900 --> 30:49.820]  лежащих по одну сторону от a, b, значит, c лежит внутри окружности, d и e лежат на границе
[30:49.820 --> 30:55.420]  окружности, точка f лежит вне окружности. Тогда вот если мы померяем все вот эти углы, там a, c, b,
[30:55.420 --> 31:03.740]  a, d, b, a, d, e и a, f, d, тогда выполняется следующее, что угол a, c, b самый большой, он будет больше,
[31:03.740 --> 31:11.020]  чем угол a, d, b, который равен углу a, e, b, это там, да, вписаны углы, опирающиеся на дугу,
[31:11.020 --> 31:18.460]  значит, они равны, и это будет больше, чем угол, когда f за границей, больше, чем угол a, f, b, вот так.
[31:18.460 --> 31:27.980]  Это там то, что называть теремфалесом, можно так сказать. Вот, ну, соответственно, используя это,
[31:27.980 --> 31:33.500]  мы просто можем показать, что то, что написано выше, это критерий легальности, ну, или формально,
[31:33.500 --> 31:37.180]  критерий, скорее, нелегальности, да, потому что мы написали, когда ребро является нелегальным.
[31:37.180 --> 31:45.980]  Вот, хорошо. И еще здесь, значит, есть такой приятный способ понять верно это или нет,
[31:45.980 --> 31:50.860]  как проверить, что какая-то точка лежит внутри окружности, построенная на трех других.
[31:50.860 --> 32:05.900]  Давайте тоже утверждение без разрезательства. Пусть PQR это вершина треугольника, заданная по
[32:05.900 --> 32:23.900]  часовой стрелке, заданная при обходе по часовой стрелке. Когда точка S лежит внутри круга,
[32:23.900 --> 32:36.700]  внутри круга, описанного вокруг этого треугольника, если только, если выполняется
[32:36.700 --> 32:40.380]  следующее, значит, можно посчитать определитель, а прежде, чтобы он больше нуля.
[33:06.700 --> 33:14.700]  Вот, значит, зачем вообще это? Ну, как бы понятно, что если у меня все точки исходной целочисленности,
[33:14.700 --> 33:18.700]  ну, или там произвольные, то вообще говоря, можно просто явно построить окружность, проходящую через PQR,
[33:18.700 --> 33:22.700]  как-то, например, сделать, ну, можно там построить серийный перпендикуляр к двум сторонам, пересечь,
[33:22.700 --> 33:26.700]  посчитать расстояние, и вот будет наша окружность, да, то есть мы знаем центр и радиус.
[33:26.700 --> 33:32.700]  И потом проверить, что этот центр удален от S меньше, чем на радиус. Так можно сделать, но это переход к
[33:32.700 --> 33:40.700]  даблам и, видимо, даже, ну, в смысле, к рациональным и, видимо, даже к даблам, если вы извлекаете корень при подсчете расстояния.
[33:40.700 --> 33:46.700]  Вот, а если у вас все исходные точки целые, то с точки зрения, как бы, вычислительной надежности, да,
[33:46.700 --> 33:52.700]  с точки зрения избежания погрешности, лучше использовать вот такой целочисленный критерий, то есть вы просто считаете определитель,
[33:52.700 --> 33:57.700]  здесь все числа целые, определитель целый, да, вам не нужно будет переходить ни в какие там даблы и так далее.
[33:57.700 --> 34:00.700]  Единственное, эти числа могут быть довольно большие, потому что здесь есть квадраты,
[34:00.700 --> 34:05.700]  и они еще все перемножаются, в общем, числа могут быть большие, но все равно целые.
[34:05.700 --> 34:08.700]  Вот, и, соответственно, просто считаете определитель, первое, что он больше нуэ.
[34:08.700 --> 34:14.700]  То есть тоже можно в этом убедиться, что это, собственно, критерий того, что точка S лежит внутри круга.
[34:14.700 --> 34:20.700]  Вот, хорошо, значит, есть такой у нас критерий, да, и, собственно, мы понимаем, что это, собственно, критерий того,
[34:20.700 --> 34:25.700]  что точка S плохая относительно треугольника PQR, и нужно сделать флип, наша ребра была нелегальна.
[34:25.700 --> 34:36.700]  Вот, дальше определение. Треангуляция T называется легальной, если в ней нет нелегальных ребер.
[34:40.700 --> 34:43.700]  В ней нет нелегальных ребер.
[34:43.700 --> 34:49.700]  Ну и отсюда появляется очень простой алгоритм того, как сделать любую треангуляцию легальной.
[34:49.700 --> 34:52.700]  Значит, есть у вас какая-то треангуляция, в ней есть какие-то нелегальные ребра.
[34:52.700 --> 34:56.700]  Давайте их просто флипать до тех пор, пока нелегальные ребра не пропадут.
[34:56.700 --> 35:03.700]  То есть мы их вот так флипаем флипом, да, то есть нашли нелегальные ребра, делали флип, нашли нелегальность, делали флип, и так далее.
[35:03.700 --> 35:07.700]  То есть я вот вержаю, что этот алгоритм обязательно закончится, и мы придем в...
[35:07.700 --> 35:09.700]  Легальную треангуляцию.
[35:09.700 --> 35:19.700]  Значит, утверждение, которое здесь можно сформулировать, такое, что из любой треангуляции можно построить легальную
[35:19.700 --> 35:31.600]  за конечное количество х-флипов, за конечное число флипов
[35:39.700 --> 35:44.700]  peut вы мне пор vers noite почему это будет конечное количество, то есть slut.
[35:44.700 --> 35:49.700]  Может ли вы мне пояснить, почему это будет конечное количество?
[35:49.700 --> 35:54.700]  То есть алгоритм очень простой. Мы просто берем и флипаем ребра пока можно, пока они нелегальны.
[35:54.700 --> 35:58.700]  Вот вопрос к вам. Можете ли вы объяснить, почему такой алгоритм обязательно конечен?
[35:58.700 --> 36:02.700]  Почему мы придем в конечную, в легальную триангуляцию?
[36:02.700 --> 36:15.700]  Ну потому что если у нас есть нелегальная, если у нас есть нелегальная ребра, то мы его можем флипнуть,
[36:15.700 --> 36:18.700]  значит мы еще не закончились. А при этом всего ребр...
[36:18.700 --> 36:24.700]  Сейчас, хотя не... Ну в общем-то алгоритм остановится, потому что у нас конечное количество вариантов.
[36:24.700 --> 36:27.700]  Мы можем сказать, что мы уменьшим, увеличиваем что-нибудь каждый раз.
[36:27.700 --> 36:36.700]  Да-да-да, так и есть. Все верно, говорите. Мы доказываем только конечность алгоритма.
[36:36.700 --> 36:42.700]  Можно для доказательства рассмотреть вектор всех углов.
[36:42.700 --> 36:50.700]  Мы знаем, что в любой триангуляции фиксировано количество треугольников, пусть в триангуляции 5 треугольников,
[36:51.700 --> 36:59.700]  тогда мы составим вектор углов всех треугольников, альфа-1, альфа-2 и так далее, альфа-3d в порядке возрастания.
[36:59.700 --> 37:05.700]  Список углов в порядке возрастания.
[37:05.700 --> 37:11.700]  Ну и тогда легко заметить, что каждый edge flip этот вектор увеличивает.
[37:11.700 --> 37:18.700]  Каждый flip-ребра увеличивает этот список.
[37:18.700 --> 37:20.700]  Ну, в смысле, лексикографически.
[37:20.700 --> 37:24.700]  Этот список лексикографически.
[37:24.700 --> 37:27.700]  Потому что он увеличивает минимально из углов.
[37:27.700 --> 37:32.700]  Значит, первое отличие это обязательно увеличение углов.
[37:32.700 --> 37:35.700]  Мы обязательно увеличим наш вектор углов.
[37:35.700 --> 37:37.700]  Дальше треангуляции, понятное дело, конечное количество.
[37:37.700 --> 37:42.700]  Там, кстати, на семинаре была задача, что показать, что треангуляция не больше 2 в степени C2.
[37:42.700 --> 37:48.700]  Их в любом случае очевидно конечное количество, потому что каждое ребро либо включено, либо нет.
[37:48.700 --> 37:52.700]  Их там 2 в степени C2 максимум.
[37:52.700 --> 37:58.700]  И на каждом шаге мы увеличим список ребер, значит, суммарное количество итераций конечное, хоть и возможно экспоненциально.
[37:58.700 --> 38:01.700]  Вот такая процедура легализации.
[38:02.700 --> 38:09.700]  Значит, мы поняли, что любую треангуляцию можно легализовать путем многократных флипов ребер.
[38:09.700 --> 38:11.700]  Ну и, наконец, теорема.
[38:11.700 --> 38:13.700]  Второй критерий.
[38:13.700 --> 38:16.700]  Второй критерий треангуляции делана.
[38:16.700 --> 38:17.700]  Следующий.
[38:17.700 --> 38:22.700]  Легальность равносильна тому, что мы получили треангуляцию делана.
[38:22.700 --> 38:25.700]  Треангуляция T.
[38:25.700 --> 38:29.700]  Легально.
[38:29.700 --> 38:33.700]  Если и только если, то это треангуляция делана.
[38:36.700 --> 38:38.700]  Значит, опять-таки без доказательств.
[38:38.700 --> 38:42.700]  Доказательств здесь просто активно используют первый критерий.
[38:42.700 --> 38:48.700]  Первый критерий я напомню, это когда мы показали, что быть с треангуляцией делана это то же самое,
[38:48.700 --> 38:55.700]  что иметь окружность вокруг каждого треугольника, не содержащий внутри остальных вершин треангуляции.
[38:55.700 --> 39:00.700]  Вот здесь, раз мы дали определение того, что такая легальная треангуляция,
[39:00.700 --> 39:04.700]  поняли, что это на самом деле просто нужно будет для каждой пары соединенных треугольников проверить,
[39:04.700 --> 39:07.700]  что одна вершина не лежит в окружности, описанная друг другу.
[39:07.700 --> 39:09.700]  Это почти одинаковые условия.
[39:09.700 --> 39:13.700]  Одно из них только более сильное, потому что здесь, когда мы проверяем легальность,
[39:13.700 --> 39:19.700]  мы описываем окружность вокруг треугольника, потому что одна точка не лежит внутри этого круга.
[39:19.700 --> 39:26.700]  А когда мы говорим в первом критерии, у нас в этой окружности нет никого вообще, нет никакой другой точки.
[39:26.700 --> 39:31.700]  Соответственно, там надо проверить, что достаточно проверять только вторую вершину,
[39:31.700 --> 39:35.700]  точнее вершину треугольника с между вот этому, по которому построили окружность,
[39:35.700 --> 39:39.700]  и тогда получится такая тоже эквивалентность.
[39:39.700 --> 39:45.700]  Этот критерий говорит нам, что на самом деле достаточно построить просто какую-нибудь легальную треангуляцию,
[39:45.700 --> 39:47.700]  но мы в частности ее построили.
[39:47.700 --> 39:50.700]  Какая-то легальная треангуляция, да, задолго, возможно, за экспоненту,
[39:50.700 --> 39:55.700]  но гарантирую, что получится треангуляция деланная.
[39:55.700 --> 40:01.700]  Ну и последняя теорема, которая нам нужна, которую мы, наверное, просто докажем,
[40:01.700 --> 40:06.700]  что треангуляция деланная максимизирует минимальный угол.
[40:07.700 --> 40:16.700]  Ну давайте это докажем. Пусть не так. Пусть эта треангуляция деланная с минимальным углом альфа.
[40:16.700 --> 40:22.700]  Есть какая-то другая треангуляция Т4 с минимальным углом Б, которая больше чем альфа.
[40:22.700 --> 40:25.700]  Т4 с другая треангуляция.
[40:25.700 --> 40:28.700]  Т3 с другая треангуляция.
[40:29.700 --> 40:34.700]  Есть какая-то другая треангуляция Т4 с минимальным углом Б, которая больше чем альфа.
[40:34.700 --> 40:38.700]  Т4 с другая треангуляция.
[40:38.700 --> 40:43.700]  С минимальным углом Б, которая больше чем альфа.
[40:43.700 --> 40:48.700]  Тогда мы сделаем следующее. Мы сначала Т3 легализуем.
[40:48.700 --> 40:50.700]  Легализуем.
[40:50.700 --> 40:56.700]  Т3. Получим какую-то новую треангуляцию Т2, то есть наши процедуры, которые легализуют любую треангуляцию.
[40:56.700 --> 40:59.700]  Можем просто пофлипать сколько-то ребер. Нелегальные ребра флипаем.
[40:59.700 --> 41:03.700]  Пока все ребра легальные, то есть пока не получим легальную треангуляцию.
[41:03.700 --> 41:08.700]  Получили Т2, и у нее минимальный угол мог только вырасти.
[41:08.700 --> 41:14.700]  Раз каждый флип нам увеличивает минимальный угол локально, то значит глобально он тоже не может убывать.
[41:14.700 --> 41:17.700]  Значит, минимальный угол в этой новой легальной треангуляции больше равен чем Б.
[41:17.700 --> 41:20.700]  Хорошо. Но тогда что получается?
[41:20.700 --> 41:23.700]  У меня есть треангуляция деланная Т с минимальным углом альфа.
[41:24.700 --> 41:28.700]  И есть какая-то легальная треангуляция Т2-3 сейчас с углом гамма, которая больше чем альфа.
[41:28.700 --> 41:32.700]  Но извините, мы же знаем, что Т2-3 тоже треангуляция деланная.
[41:32.700 --> 41:38.700]  Вот по этому второму критерию, мы знаем, что Т2-3 раз это легальная треангуляция, то это действительно треангуляция деланная.
[41:38.700 --> 41:42.700]  Т2-3 тоже треангуляция деланная.
[41:43.700 --> 41:48.700]  Ну это, получается, противоречия, потому что у меня получились 2 треангуляции деланной, у которых equipped with different minimum angles.
[41:48.700 --> 41:51.700]  Здесь альфа, здесь гамма, больше чем А.
[41:51.700 --> 42:08.700]  Мы с вами строго не доказали, но проговорили, что если есть две треангуляции Дилане, то минимальный угол в них одинаковый, потому что каждая треангуляция получается под разбиением выпуклых грани графа Дилане треугольниками, и там минимальный угол будет один и тоже, он просто опирается на минимальный угол.
[42:08.700 --> 42:22.700]  Итак, по всем многовольникам берем самый маленький угол, получается минимальный угол. Чтобы завершить доказательство, нужно написать, что у треангуляции Дилане одинаковый минимальный угол.
[42:22.700 --> 42:41.700]  Итого, большой пласт теории, который нам говорит на самом деле следующий. Треангуляцию Дилане можно искать как какую-то легальную треангуляцию, и в ней тот самый минимальный угол будет максимально возможным.
[42:41.700 --> 42:54.700]  То есть алгоритм будет такой, который мы сейчас будем строить. Мы просто будем поддерживать легальную треангуляцию, и собственно она и будет нам давать максимально возможный минимальный угол по всем треугольникам.
[42:54.700 --> 43:03.700]  То есть наша задача просто найти легальную треангуляцию, и она вот по всему этому пласту теории и будет нашей искомой, которая максимизирует минимальный угол.
[43:03.700 --> 43:13.700]  Ура! Вроде с теорией мы разделались. Давайте переходить к алгоритму.
[43:13.700 --> 43:23.700]  Алгоритм. Он будет следующим. Он будет итеративным и рандомизированным.
[43:23.700 --> 43:42.700]  Смотрите. Давайте мы сначала возьмем точку, которая находится, ну короче, самую высокую точку в нашем множестве сайтов возьмем.
[43:42.700 --> 43:52.700]  Так, сейчас на секунду.
[43:52.700 --> 44:02.700]  Да, ну в общем, давайте возьмем точку, которая находится в нашем множестве сайтов.
[44:02.700 --> 44:23.700]  Да, ну в общем, давайте возьмем точку P0. Выберем среди сайтов точку P0.
[44:23.700 --> 44:33.700]  Это точка с максимальным Y. Среди таких с максимальным сейчас или с минимальным.
[44:33.700 --> 44:38.700]  Неважно. Давайте возьмем с минимальным.
[44:38.700 --> 44:43.700]  А нет, нам этого не хватит. С максимальным X. Хорошо.
[44:43.700 --> 44:49.700]  Возьмем точку самую высокую среди таких самых правых. Вот какая точка P0. Самая высокая, самая правая точка.
[44:49.700 --> 44:55.700]  Дальше. Вот все остальные где-то там слева снизу от меня расположены.
[44:55.700 --> 45:02.700]  Давайте дальше возьмем точку фиктивную P-1, где-то бесконечно далеко справа внизу.
[45:02.700 --> 45:08.700]  И точку P с индексом минус два, где-то бесконечно далеко слева вверху.
[45:08.700 --> 45:13.700]  А именно возьмем их так, чтобы, так ее чуть левее еще нарисуем.
[45:13.700 --> 45:17.700]  То есть мы введем фиктивные точки, которые нам будут очень удобны для нашего алгоритма.
[45:17.700 --> 45:27.700]  Возьмем их так, чтобы треугольник с вершинами P-2, P0 и P-1 целиком содержал внутри себя все точки нашего множества.
[45:27.700 --> 45:31.700]  Все наши сайты. Так, на меня не получилось.
[45:31.700 --> 45:35.700]  Вот как-то так это будет выглядеть. Соответственно, вот здесь там P1.
[45:35.700 --> 45:43.700]  Короче, взяли такие достаточно далекие точки, чтобы внутри этого треугольника были все наши исходные точки, исходные сайты.
[45:43.700 --> 45:48.700]  А дальше будем делать следующее. Мы случайным образом перемешаем все вот эти вот вершины.
[45:48.700 --> 45:50.700]  Просто построим на них случайную перестановку.
[45:50.700 --> 45:53.700]  Среди всех перестановок возьмем равновероятно случайно.
[45:53.700 --> 45:55.700]  То есть все перестановки будут равновероятны.
[45:55.700 --> 46:04.700]  И будем делать следующее. В каждый момент времени поддерживать триангуляцию делана, то есть произвольную легальную триангуляцию, для текущего множества точек.
[46:04.700 --> 46:09.700]  Вот исходно у меня есть один треугольник P-2, P0, P-1.
[46:09.700 --> 46:12.700]  И для него единственная триангуляция просто ОМСА.
[46:12.700 --> 46:17.700]  А дальше будем добавлять постепенно вершины, то есть наши сайты.
[46:17.700 --> 46:19.700]  Будем добавлять вершины нашего множества.
[46:19.700 --> 46:23.700]  И как бы дотреангулировать так, чтобы опять получилась легальная триангуляция.
[46:23.700 --> 46:26.700]  Значит, скорее всего будет происходить что-то следующее.
[46:26.700 --> 46:28.700]  Вот была какая-то триангуляция на предыдущем шаге.
[46:28.700 --> 46:31.700]  Не знаю, что-то такое было.
[46:31.700 --> 46:35.700]  Пришла какая-то новая точка, случайная из оставшихся.
[46:35.700 --> 46:37.700]  И она, скажем, попала в какой-то треугольник.
[46:37.700 --> 46:40.700]  Не знаю, пришла точка P-R и попала в треугольник.
[46:40.700 --> 46:43.700]  Тогда мы давайте просто проведем вот такие вот три ребра.
[46:45.700 --> 46:48.700]  Дотреангулируем тот треугольник, в который она попала.
[46:48.700 --> 46:50.700]  Так, чтобы опять получилась триангуляция.
[46:50.700 --> 46:56.700]  А дальше просто вызовемся какими-то процедурами, которые будут пытаться вот эти ребра легализовать.
[46:56.700 --> 46:59.700]  Точнее, вот эти вот ребра будут пытаться легализовать.
[46:59.700 --> 47:01.700]  То есть какая могла быть проблема, да, возникнуть?
[47:01.700 --> 47:04.700]  Может быть такое, что вот это ребро, да, если...
[47:04.700 --> 47:06.700]  Вот это вот синее ребро.
[47:06.700 --> 47:07.700]  Вот это синее ребро.
[47:07.700 --> 47:11.700]  Оно раньше могло быть легальным, да, потому что, скажем, вот такой вот круг больше никого не содержал.
[47:11.700 --> 47:13.700]  Не содержал никаких других решений.
[47:13.700 --> 47:16.700]  А теперь он начал содержать точку P-R.
[47:16.700 --> 47:20.700]  И, соответственно, надо флипнуть это ребро и его поменять вот на такое.
[47:20.700 --> 47:27.700]  И тогда, соответственно, все коллизии, которые возникают, все нелегальности, которые возникли, они только связаны с новой добавленной точкой P-R.
[47:27.700 --> 47:33.700]  Соответственно, давайте тогда просто вот так рекурсивно запустимся обходом по всем этим ребрам, которые потенциально могли стать нелегальными.
[47:33.700 --> 47:35.700]  И флипнем их, если нужно.
[47:35.700 --> 47:37.700]  И, соответственно, запустимся дальше вот...
[47:37.700 --> 47:39.700]  То есть, про сути, у меня поменялся один из треугольников.
[47:39.700 --> 47:45.700]  То есть у меня вот это вот большой синий треугольник поменялся на вот такой, да, как инцидентим вот этим ребру.
[47:45.700 --> 47:48.700]  Тогда давайте для этого ребра проверю, не стало ли оно вдруг нелегальным.
[47:48.700 --> 47:52.700]  Если стало, то его флипну и дальше проверю для всех остальных ребер.
[47:52.700 --> 47:54.700]  То есть не стало ли вот это ребро нелегальным и вот это ребро нелегальным.
[47:54.700 --> 47:55.700]  И так далее.
[47:55.700 --> 47:59.700]  То есть у меня будет такой расходящий алгоритм, который флипает ребра до тех пор, пока не становится легErible.
[47:59.700 --> 48:00.700]  Все.
[48:00.700 --> 48:17.700]  Всё, это акциони алгоритмы. Давайте я его запишу. Мы случайно перемешиваем точки P1, P2 и так далее, P, ну n-1, да, все остальные точки случайно перемешал.
[48:17.700 --> 48:35.700]  Дальше поддерживаем легальную триангуляцию для множества точек P-2, P-1 и так далее, P, r-1.
[48:35.700 --> 48:45.700]  Потом, соответственно, вставляем новую точку P-r, в цикле по всем r, от 1 до n-1, мы вставляем эту точку в нашу триангуляцию.
[48:45.700 --> 49:00.700]  Дальше подразбиваем нужный треугольник, подразбиваем треугольник, в который попала P-r.
[49:00.700 --> 49:08.700]  Дальше просто запускаемся рекурсивно вот этим обходом, который флипает ребра, пока не получит, что все ребра легальны.
[49:08.700 --> 49:18.700]  Запускаем флипы, пока не восстановим легальность.
[49:18.700 --> 49:26.700]  Я считаю, что, по крайней мере, с точки зрения описания идеи, это алгоритм проще, чем алгоритм Форчуна,
[49:26.700 --> 49:33.700]  потому что тут, как минимум, нет никаких парабол, нет никаких событий, которые там то появляются, то удаляются.
[49:33.700 --> 49:38.700]  Короче, по крайней мере, с точки зрения концепции, мне кажется, что это проще.
[49:38.700 --> 49:49.700]  Вот такой будет алгоритм. Здесь, конечно, много всяких тонких мест, в частности, как понять, какой треугольник надо подразбить.
[49:49.700 --> 49:57.700]  У меня есть какая-то триангуляция текущая, дальше где-то внутри нее возникает точка, и мне нужно понять, внутри какого треугольника эта точка лежит.
[49:57.700 --> 50:02.700]  Мне нужно как-то быстро, достаточно эффективно локализовать точку множества треугольников.
[50:02.700 --> 50:08.700]  Это мы скажем как делать. Есть такой тонкий момент, что среди большого числа треугольников, которые уже построены,
[50:08.700 --> 50:12.700]  нужно как-то понять, где лежит наша новая точка. Это один тонкий момент.
[50:12.700 --> 50:20.700]  Второй тонкий момент. Что-то надо сделать с точками P-1, P-2, надо сказать, как их выбрать,
[50:20.700 --> 50:27.700]  и на самом деле мы не будем им явно задавать координаты, мы будем их всегда с ними работать чисто символически,
[50:27.700 --> 50:33.700]  то есть считать, что это не какая-то реальная точка, достаточно далекая, а просто точка с номером P-1 или P-2,
[50:33.700 --> 50:38.700]  и соответственно во всех случаях мы будем аккуратно ифать, что если хотя бы одна из точек, с которыми мы работаем,
[50:38.700 --> 50:45.700]  имеет отрицательный индекс, то значит с ней нужно как-то аккуратно по-своему работать, не как с обычными,
[50:45.700 --> 50:51.700]  то есть мы не можем построить окружность, проходящую через P-1, потому что она супер далеко, эта окружность будет какая-то супер гигантская,
[50:51.700 --> 50:59.700]  будет куча погрешностей, будет что-то неадекватное и так далее, поэтому мы с вершинами P-1, P-2 будем всегда очень аккуратно работать,
[50:59.700 --> 51:05.700]  не задавая явный им координат. Вот такие есть тонкости.
[51:05.700 --> 51:17.700]  Ну а пока мы просто отметим, что этот алгоритм конечный, замечание, этот алгоритм конечный,
[51:17.700 --> 51:23.700]  ну собственно это очевидно, потому что что мы делаем? Мы просто на каждом шаге поняли, где лежит точка, подразбили треугольник,
[51:23.700 --> 51:29.700]  а дальше запускаем флипы, исправляя все нелегальности. Мы с вами знаем, что если просто путем флипов, делать флипы, флипы,
[51:29.700 --> 51:33.700]  до тех пор, пока это возможно, то в конце мы обязательно за конечные шагов пойдем к легальной треангуляции.
[51:33.700 --> 51:42.700]  Мы так просто N раз, то есть по сумме мы просто N раз легализуем треангуляцию.
[51:42.700 --> 51:49.700]  Ну мы знаем, что каждый такой шаг, он занимает конечное количество действий, а потому что мы доказали, что легализация всегда конечная.
[51:49.700 --> 51:56.700]  Вот, ну более того, этот алгоритм работает в среднем за НЛГН.
[51:56.700 --> 52:24.700]  В ожидании времени работы, в ожидании времени работы есть от НЛГН, при этом количество флипнутых ребер, количество флипов ребер в среднем есть от НЛГН.
[52:24.700 --> 52:36.700]  Вот, мы тоже не будем доказывать это, еще более громоздко, но смотрите, за счет того, что мы случайно эти точки вставляем,
[52:36.700 --> 52:43.700]  есть какая-то надежда на то, что в среднем нужно будет делать мало флипов, потому что вообще, когда возникает подрядность делать флип,
[52:43.700 --> 52:50.700]  когда новодобавленная точка попала в какой-то из кругов, описанный вокруг какого-то треугольника,
[52:50.700 --> 52:57.700]  ну понятно, что если у нас все случайно, то эта точка будет там лежать довольно редко.
[52:57.700 --> 53:02.700]  Это совсем неформальное описание, но по крайней мере на это можно надеяться, что такое происходит довольно редко.
[53:02.700 --> 53:08.700]  В общем, это и происходит, можно доказать, что в среднем количество флипов, которые мы запускаем суммарно по нашему алгоритму,
[53:08.700 --> 53:11.700]  будет линейным за все наши итерации.
[53:11.700 --> 53:16.700]  Ну а время работы НЛУГН, оно получается за счет как раз, то есть здесь основное время – это локализация.
[53:16.700 --> 53:30.700]  Значит, основная сложность – это локализация, то есть как понять, в каком треугольнике лежит точка, то есть определение,
[53:30.700 --> 53:46.700]  в каком треугольнике лежит ПР. То есть флипы суммарно занимают только линию, а самая сложная, основная часть по времени работы –
[53:46.700 --> 53:52.700]  это локализация, то есть нахождение точки нашей большой треуголяции, которая была построена в предыдущем шаге.
[53:52.700 --> 54:02.700]  Так, хорошо, давай тогда напишем такой псевдокод. Псевдокод – наша процедура построения треуголяции делана.
[54:02.700 --> 54:14.700]  Ну, там с П0, П-1, П-2 мы разобрались. Значит, дальше я запускаю рандом шафл на П1, П2 и так далее, П-1.
[54:14.700 --> 54:23.700]  Затем по всем R от одного. Я просто хочу записать, от каких именно ребра мы запускаем процедуру вот этой вот легализации.
[54:23.700 --> 54:34.700]  По всем R от одного до N-1. Значит, да, здесь еще есть момент, что точка ПР могла попасть либо в внутренность какого-то треугольника,
[54:34.700 --> 54:39.700]  либо между какими-то двумя треугольниками на границу. И тогда, соответственно, нужно нам немножко по-другому действовать.
[54:39.700 --> 54:55.700]  Ну вот, пусть ПР внутри треугольника ПИПЖПК. Значит, картинка такая, да, был какой-то треугольник ПИПЖПК, внутрь попала точка ПР.
[54:55.700 --> 55:04.700]  Внутрь попала точка ПР. Вот эти три ребра мы проводим, соответственно, старый треугольник мы разрушаем, заводим три новых.
[55:04.700 --> 55:13.700]  И нам нужно будет проверить на легальность вот эти вот три ребра. Если они нелегальны, то их флипнуть и, собственно, запустить рекурсивно вот тех ребер опять, которые поменяются.
[55:13.700 --> 55:30.700]  Пусть вот это верно. Тогда удалить треугольник ПИПЖПК, добавить треугольники. Давайте напишу все формально.
[55:30.700 --> 55:46.700]  ПИПКПР, ПИПЖПР и ПЖПКПР.
[55:46.700 --> 55:54.700]  А, ну да, кстати, мы же с вами хотим, чтобы каждый треугольник задавался по часовой стрелке, чтобы вот тот наш критерий был удобно проверять.
[55:54.700 --> 56:00.700]  Поэтому здесь давайте я еще так индексы переставлю, чтобы вершины всегда шли в порядке по часовой стрелке.
[56:00.700 --> 56:09.700]  Тогда оно будет приятно и не нужно будет каждый раз в словном определителе. Мы свели задачу определения, что есть ли точка внутри окружности, внутри круга, к подсчету определителя.
[56:09.700 --> 56:14.700]  Вот там нужно, чтобы все треугольники были по часовой стрелке. ПИПЖПК был по часовой.
[56:14.700 --> 56:25.700]  Тогда нужно добавить треугольник ПИПКПР. Значит, здесь неверно. Давайте я перепишу, чтобы это было ПИПРПК.
[56:25.700 --> 56:29.700]  Мы там на второй строчке снова ПИПЖПК добавляем.
[56:29.700 --> 56:32.700]  Еще раз повторить, пожалуйста.
[56:32.700 --> 56:36.700]  На самой нижней строчке в начале снова ПИПЖПК.
[56:36.700 --> 56:41.700]  Сейчас все исправлю. Спасибо. Получился вот этот вроде по часовой.
[56:41.700 --> 56:46.700]  Здесь вообще я написал какой-то бред. Давайте я это удалю.
[56:46.700 --> 56:52.700]  Здесь я хотел ПИПЖПР сделать. Это опять по часовой стрелке.
[56:52.700 --> 56:59.700]  И здесь ПЖПКПР тоже по часовой. Все хорошо. Добавили треугольник, который обходится тоже по часовой стрелке.
[56:59.700 --> 57:03.700]  Запущу еще процедуру. LegalizeEdge.
[57:03.700 --> 57:11.700]  Легализовать ребро с вершинкой PR и ребро, которое я легализую, это будет ПИПЖ.
[57:11.700 --> 57:16.700]  Дальше LegalizeEdge.
[57:16.700 --> 57:24.700]  Новая вставленная вершинка это PR, а легализовать я пытаюсь ПЖПК.
[57:24.700 --> 57:30.700]  LegalizeEdge.
[57:30.700 --> 57:34.700]  ПКПИ.
[57:34.700 --> 57:37.700]  Это значит, что мы попали вовнутрь треугольника.
[57:37.700 --> 57:53.700]  Иначе пусть PR на границе треугольников ПИПЖПК и ПИПЖПЛ.
[57:53.700 --> 57:58.700]  Тогда картинка следующая. Вот есть два треугольника наши.
[57:58.700 --> 58:00.700]  ПИ.
[58:00.700 --> 58:04.700]  Чего по часовой? Чтобы это было ПИПЖПК.
[58:04.700 --> 58:07.700]  А здесь у него будет что-то в стиле...
[58:07.700 --> 58:11.700]  Тут надо будет по-другому написать.
[58:11.700 --> 58:14.700]  ПЖПИПР.
[58:14.700 --> 58:17.700]  Чтобы было по часовой, будет такой получается треугольник.
[58:17.700 --> 58:19.700]  Понятно. Вот наша новая точка.
[58:19.700 --> 58:21.700]  Красненькая PR.
[58:21.700 --> 58:24.700]  Мы удаляем наши старые два треугольника.
[58:24.700 --> 58:30.700]  И добавляем вот такие четыре новых.
[58:30.700 --> 58:33.700]  Давайте я не буду писать, какие мы добавляем.
[58:33.700 --> 58:36.700]  Я напишу, что удалить два старых, добавить четыре новых.
[58:36.700 --> 58:42.700]  Удалить два старых, добавить четыре новых.
[58:42.700 --> 58:46.700]  И, соответственно, опять-таки мне нужно запуститься с процедурой Legalize
[58:46.700 --> 58:51.700]  от этих четырех крайних ребер, которые могли стать нелегальными.
[58:51.700 --> 58:55.700]  LegalizeEdge.
[58:55.700 --> 59:01.700]  От PR запятая PIPL.
[59:01.700 --> 59:03.700]  PLPJ.
[59:03.700 --> 59:06.700]  PGPK.
[59:06.700 --> 59:10.700]  И PKPEI.
[59:10.700 --> 59:14.700]  Соответственно, здесь будет уже...
[59:14.700 --> 59:16.700]  Здесь будет уже 4 LegalizeEdge.
[59:16.700 --> 59:19.700]  С одной и той же вершинкой PR, новодобавленной.
[59:19.700 --> 59:22.700]  И теперь ребро, которое я проверяю на легальность,
[59:22.700 --> 59:26.700]  это будут те старые четыре ребра наших треугольников.
[59:26.700 --> 59:29.700]  Это как только работает наша внешняя процедура,
[59:29.700 --> 59:33.700]  которая поддерживает корректную легальную triangуляцию.
[59:33.700 --> 59:35.700]  Что мне осталось делать?
[59:35.700 --> 59:38.700]  Мне осталось понять, как локализовать.
[59:38.700 --> 59:41.700]  Как понять, где лежит наша точка.
[59:41.700 --> 59:44.700]  Дальше понять, как работает LegalizeEdge.
[59:44.700 --> 59:46.700]  И что делать с точками P-1, P-2.
[59:46.700 --> 59:48.700]  Как их корректно обрабатывать.
[59:48.700 --> 59:50.700]  Давайте, наверное, начнем с простого.
[59:50.700 --> 59:52.700]  Давайте начнем с Legalize.
[59:52.700 --> 59:55.700]  Как работает LegalizeEdge?
[59:55.700 --> 59:58.700]  LegalizeEdge.
[59:58.700 --> 01:00:00.700]  Можно секунду вернуть на предыдущий?
[01:00:00.700 --> 01:00:02.700]  Давайте сейчас.
[01:00:13.700 --> 01:00:16.700]  Спасибо.
[01:00:16.700 --> 01:00:19.700]  Итак, мы начнем с разбора того, как работает LegalizeEdge.
[01:00:19.700 --> 01:00:21.700]  Напоминаю эту ситуацию.
[01:00:21.700 --> 01:00:23.700]  Есть у меня вершина PR.
[01:00:23.700 --> 01:00:28.700]  Она является вершиной треугольника PR, PIPG.
[01:00:28.700 --> 01:00:31.700]  И мы пытаемся это ребро Legalize.
[01:00:31.700 --> 01:00:34.700]  Это ребро может быть нелегальным.
[01:00:34.700 --> 01:00:37.700]  Только когда я описываю окружность вокруг этой штуки,
[01:00:37.700 --> 01:00:45.700]  сюда попадает вершина другого треугольника,
[01:00:45.700 --> 01:00:48.700]  которая натянута на ребро PIPG.
[01:00:48.700 --> 01:00:51.700]  Здесь есть какая-то точка.
[01:00:51.700 --> 01:00:53.700]  Что я здесь делаю?
[01:00:53.700 --> 01:01:02.700]  Пусть, пока это вершина второго треугольника.
[01:01:02.700 --> 01:01:04.700]  Что мне нужно хранить?
[01:01:04.700 --> 01:01:08.700]  Мне нужно для каждого ребра хранить две ссылки
[01:01:08.700 --> 01:01:10.700]  на первый треугольник и на второй треугольник.
[01:01:10.700 --> 01:01:12.700]  Это ребро how commentaires
[01:01:12.700 --> 01:01:14.700]  будет ссылаться на первый треугольник и на второй треугольник,
[01:01:14.700 --> 01:01:16.700]  чтобы быстро у얼ить между ними переходить
[01:01:16.700 --> 01:01:21.700]  чтобы быстро понимать каким треугольником соответствует данный конкретный ребро PIPG.
[01:01:21.700 --> 01:01:27.700]  Так вот, значит, есть два треугольника, один из них это PRPIPG, другой это какой-то PIPKPG.
[01:01:27.700 --> 01:01:35.700]  Ну и дальше, если ребро нелегальное, если ПК внутри круга, то есть я просто напишу,
[01:01:35.700 --> 01:01:43.700]  что если PIPG нелегально, что мы определяем с помощью определителя,
[01:01:43.700 --> 01:01:52.700]  чтобы не переходить к сложным вычислениям, мы лучше посчитаем все в наших целых числах с помощью определителя,
[01:01:52.700 --> 01:02:00.700]  то нужно, ну как всегда, нужно это ребро флипнуть, удалить старые два треугольника,
[01:02:00.700 --> 01:02:05.700]  добавить новые два и запуститься рекурсивно от ребра PGPK и PKPI.
[01:02:05.700 --> 01:02:14.700]  Значит, то, что нужно сделать, удалить два старых треугольника,
[01:02:14.700 --> 01:02:25.700]  добавить два новых и запуститься рекурсивно процедурой legalize edge
[01:02:25.700 --> 01:02:33.700]  от PG, от PR, простите, и здесь какие теперь ребра могли стать нелегальными?
[01:02:33.700 --> 01:02:44.700]  Вот это вот PIPK и его сосед, PKPG.
[01:02:44.700 --> 01:02:52.700]  То есть смотрите, еще раз, вот был у меня какой-то треугольник, сейчас его нарисую, вот этот вот.
[01:02:52.700 --> 01:03:05.700]  Я понял, что в нем вот эта вот сторона плохая, нужно ее флипнуть, соответственно, это сторона удаляется,
[01:03:05.700 --> 01:03:09.700]  это сторонодобавляется, тогда что по сути поменялось, у меня вот эти два отрезка, как были, так и остаются,
[01:03:09.700 --> 01:03:15.700]  соответственно, единственное по нелегальности может быть в этом ребре, я, собственно, рекурсивно запускаюсь проверяю легально оно или нет?
[01:03:15.700 --> 01:03:18.700]  Тоже самое для этого треугольника, здесь это рябро было, это рябро я добавил,
[01:03:18.700 --> 01:03:21.700]  соответственно, нужно просто проверить, является ли легальное вот это рябро PIPK или нет.
[01:03:21.700 --> 01:03:24.700]  нужно опять его пофлипал, запустился регустрирование
[01:03:24.700 --> 01:03:26.700]  двух соседей, если нужно их флипают и так далее,
[01:03:26.700 --> 01:03:28.700]  и так далее. То есть такое просто расхождение такое
[01:03:28.700 --> 01:03:33.700]  вокруг ПР, мы флипаем те ребра, пока у меня не восстановится
[01:03:33.700 --> 01:03:41.700]  вся легальность. Хорошо. Ну и здесь же можно показать,
[01:03:41.700 --> 01:03:44.700]  что это все будет корректно, то есть мы действительно
[01:03:44.700 --> 01:03:47.700]  все наши ребра, которые потенциально могут быть нелегальными,
[01:03:47.700 --> 01:03:52.700]  проверим. Для этого утверждение, после завершения всех
[01:03:52.700 --> 01:04:02.700]  legalize, после завершения всех legalize edge, получим
[01:04:02.700 --> 01:04:12.700]  легальную треангуляцию. Это следует из того,
[01:04:17.700 --> 01:04:27.700]  что добавляемые ребра, мы какие-то ребра удаляем нелегальные
[01:04:27.700 --> 01:04:29.700]  и вставляем их, антиподы они уже обязательно будут
[01:04:29.700 --> 01:04:32.700]  легальными. Это следует из того, что добавляемые ребра
[01:04:32.700 --> 01:04:43.700]  одной из вершин содержат ПР. То есть вот тут всегда,
[01:04:43.700 --> 01:04:46.700]  когда я ребро удаляю, я обязательно добавляю ребро,
[01:04:46.700 --> 01:04:49.700]  которое ему противоположно, и вершина этого ребра обязательно
[01:04:49.700 --> 01:04:51.700]  будет ПР. Ну то есть легко прослеживать наш legalize edge
[01:04:51.700 --> 01:04:54.700]  именно такой. Он удаляет какое-то ребро, не содержащий
[01:04:54.700 --> 01:04:57.700]  ПР, и вставляет ребро, содержащий ПР, как один
[01:04:57.700 --> 01:05:08.700]  из концов. А такие ребра обязательно лежат в графе
[01:05:08.700 --> 01:05:15.700]  деланы. То есть смотрите, что происходит. Мы вставили
[01:05:15.700 --> 01:05:19.700]  какую-то точку, дальше провели три ребра. Давайте в случае,
[01:05:19.700 --> 01:05:21.700]  когда исходная точка, которую мы вставляем ПР, она
[01:05:21.700 --> 01:05:24.700]  лежала внутри треугольника, мы провели три ребра. Дальше
[01:05:24.700 --> 01:05:27.700]  что? Я утверждаю, что эти ребра уже обязательно будут
[01:05:27.700 --> 01:05:29.700]  легальными, потому что они лежат в графе деланы, значит
[01:05:29.700 --> 01:05:31.700]  их уже точно не надо будет трогать. Соответственно,
[01:05:31.700 --> 01:05:33.700]  единственная нелегальность может быть для вот этих
[01:05:33.700 --> 01:05:36.700]  трех ребр. Но для них я запускаю процедуру legalize edge,
[01:05:36.700 --> 01:05:39.700]  и если надо, флипают. Вот это ребро было нелегально,
[01:05:39.700 --> 01:05:42.700]  я его удалил. Я его удалил, добавил в такое ребро. Теперь
[01:05:42.700 --> 01:05:44.700]  это ребро легальное. Эта легальность, соответственно,
[01:05:44.700 --> 01:05:46.700]  нелегальность могут быть только на концах вот этих
[01:05:46.700 --> 01:05:48.700]  треугольников. А для них я запускаю все рекоменсивно,
[01:05:48.700 --> 01:05:51.700]  и если нужно, их флипают. То есть, смотрите, если доказать
[01:05:51.700 --> 01:05:54.700]  вот это утверждение, что те ребра, которые я добавляю,
[01:05:54.700 --> 01:05:56.700]  обязательно лежат в графе деланы, а значит они автоматически
[01:05:56.700 --> 01:05:59.700]  нужны, нам их не нужно флипать. Тогда все потенциальные
[01:05:59.700 --> 01:06:02.700]  нелегальности я исправлю, потому что я поставил точку,
[01:06:02.700 --> 01:06:05.700]  она образовала какие-то нелегальности, и все ребра
[01:06:05.700 --> 01:06:08.700]  которые потенциально могли стать нелегальными, я до них
[01:06:08.700 --> 01:06:11.700]  даю вот этим вот расходящимся обходом.
[01:06:11.700 --> 01:06:14.700]  Единственное, осталось доказать, что те ребра, которые я
[01:06:14.700 --> 01:06:17.700]  добавляю, они обязательно будут легальными, то есть они
[01:06:17.700 --> 01:06:20.700]  обязательно лежат в графе деланы.
[01:06:20.700 --> 01:06:23.700]  Так, давайте немножко это осветим.
[01:06:23.700 --> 01:06:25.700]  Такое полудоказательство, давайте это утверждение
[01:06:25.700 --> 01:06:40.700]  нужно сделать без доказательства к экзамену, а так я
[01:06:40.700 --> 01:06:42.700]  опять-таки немножко осущу, почему-то верно. То есть,
[01:06:42.700 --> 01:06:45.700]  почему все ребра, которые одним из концов содержат
[01:06:45.700 --> 01:06:47.700]  новые ПР, обязательно легальны, обязательно вводы и
[01:06:47.700 --> 01:06:49.700]  инкуляции деланы в графе деланы.
[01:06:49.700 --> 01:06:51.700]  Ну, смотрите, давайте посмотрим на самое начало.
[01:06:51.700 --> 01:06:56.700]  Когда мы нашу точку ПР вставили в какой-то треугольник.
[01:06:56.700 --> 01:06:58.700]  Что это означало? Раньше у меня была легальная
[01:06:58.700 --> 01:07:01.700]  треугуляция, то есть была какая-то треугуляция делана.
[01:07:01.700 --> 01:07:05.700]  Это в частности означало, что вот в этом вот круге
[01:07:05.700 --> 01:07:08.700]  никого больше нет, то есть во внутренности этого
[01:07:08.700 --> 01:07:10.700]  круга нет никаких других сайтов.
[01:07:10.700 --> 01:07:13.700]  И единственная новая точка, которая лежит в этом круге,
[01:07:13.700 --> 01:07:15.700]  это точка ПР.
[01:07:15.700 --> 01:07:17.700]  Хорошо, тогда давайте возьмем какую-то вершинку
[01:07:17.700 --> 01:07:21.700]  ПИ. И давайте наш круг, вот этот большой круг так
[01:07:21.700 --> 01:07:25.700]  сузим, чтобы он по-прежнему содержал ПИ и содержал
[01:07:25.700 --> 01:07:29.700]  ПР на границе, а точки ПЖ и ПК уже не содержал.
[01:07:29.700 --> 01:07:34.700]  То есть, ну вот круг будет какой-то такой.
[01:07:34.700 --> 01:07:37.700]  То есть был какой-то круг С, значит, его можно сузить
[01:07:37.700 --> 01:07:40.700]  до круга С штрих, который вложен в круг С.
[01:07:40.700 --> 01:07:45.700]  Так что С штрих содержит ПИ и ПР на границе.
[01:07:45.700 --> 01:07:51.700]  И больше никого. На границе. Больше никого.
[01:07:51.700 --> 01:07:55.700]  Больше никого. Ну извините, а это у нас критерий того,
[01:07:55.700 --> 01:07:59.700]  что отрезок между двумя сайтами является ребром
[01:07:59.700 --> 01:08:04.700]  треугуляции деланной, что есть какой-то круг, проходящий,
[01:08:04.700 --> 01:08:07.700]  то есть пустой круг, внутри которого нет вершин,
[01:08:07.700 --> 01:08:11.700]  и на границе которого есть в точности вот эти наши две точки ПИ и ПР.
[01:08:11.700 --> 01:08:15.700]  Я просто так сузил исходный большой круг до круга поменьше,
[01:08:15.700 --> 01:08:18.700]  то есть была какая-то точка внутри него, я сузил так круг,
[01:08:18.700 --> 01:08:20.700]  чтобы точку ПИ оставался сдержать.
[01:08:20.700 --> 01:08:22.700]  Теперь начнем содержать ПР на границе.
[01:08:22.700 --> 01:08:25.700]  Значит, это как раз таки критерий того, что ребро ПИ и ПР
[01:08:25.700 --> 01:08:27.700]  лежит у нас в графе деланной.
[01:08:27.700 --> 01:08:29.700]  Это у нас был такой критерий, что если есть такой круг,
[01:08:29.700 --> 01:08:31.700]  то обязательно ПИ и ПР это ребро.
[01:08:31.700 --> 01:08:33.700]  Ну, соответственно, точно так же можно было бы сдуть этот круг
[01:08:33.700 --> 01:08:35.700]  до такого, до такого, до такого.
[01:08:35.700 --> 01:08:38.700]  Тем самым вот эти три ребра точно лежат в графе деланной.
[01:08:38.700 --> 01:08:42.700]  Просто по нашему критерию того, что является ребром графа деланной.
[01:08:42.700 --> 01:08:46.700]  Ну а дальше, то есть это что происходит, когда мы вставляем ребро,
[01:08:46.700 --> 01:08:48.700]  нужно еще рассмотреть случай, когда мы флипаем ребро,
[01:08:48.700 --> 01:08:50.700]  но там точно так же, там у нас был какой-то круг,
[01:08:50.700 --> 01:08:52.700]  внутри которого никого не было,
[01:08:52.700 --> 01:08:54.700]  то есть исходно же была легальная треангуляция,
[01:08:54.700 --> 01:08:56.700]  то есть внутри круга никого не было.
[01:08:56.700 --> 01:08:58.700]  Дальше встала новая точка ПР,
[01:08:58.700 --> 01:09:02.700]  ну и мы также можем сузить круг,
[01:09:02.700 --> 01:09:04.700]  чтобы он содержал только вот эти две точки на границе,
[01:09:04.700 --> 01:09:07.700]  значит, это обязательно будет ребро графа деланной.
[01:09:07.700 --> 01:09:09.700]  То есть в итоге мы поняли,
[01:09:09.700 --> 01:09:11.700]  что наш алгоритм действительно в конце
[01:09:11.700 --> 01:09:13.700]  получит нам легальную треангуляцию за конечный счет шагов,
[01:09:13.700 --> 01:09:15.700]  то есть больше никаких нелегальностей быть не могло.
[01:09:19.700 --> 01:09:21.700]  Вот, начнется первый шаг,
[01:09:21.700 --> 01:09:23.700]  это был шаг с легальной ассетии как работа.
[01:09:25.700 --> 01:09:27.700]  Значит, второй шаг, это мы хотим научиться
[01:09:27.700 --> 01:09:29.700]  решать задачу локализации.
[01:09:29.700 --> 01:09:32.700]  Задача локализации.
[01:09:32.700 --> 01:09:34.700]  То есть как понять, где лежит,
[01:09:34.700 --> 01:09:38.700]  в каком треугольнике лежит новодобавляемая точка ПР.
[01:09:38.700 --> 01:09:40.700]  В каком или в каких
[01:09:43.700 --> 01:09:47.700]  треугольнике лежит точка ПР.
[01:09:47.700 --> 01:09:49.700]  То есть да, напоминаю,
[01:09:49.700 --> 01:09:51.700]  первый шаг, который нам нужно сделать,
[01:09:51.700 --> 01:09:53.700]  это понять в каком треугольнике
[01:09:53.700 --> 01:09:55.700]  или в каких двух треугольниках лежит точка ПР,
[01:09:55.700 --> 01:09:57.700]  и дальше как его подразбить и запустить иголай скетч.
[01:09:57.700 --> 01:09:59.700]  Значит, вот как это делать.
[01:09:59.700 --> 01:10:01.700]  Мы сделаем следующее.
[01:10:01.700 --> 01:10:03.700]  Мы будем в каком-то смысле хранить историю
[01:10:03.700 --> 01:10:05.700]  всей нашей треангуляции
[01:10:05.700 --> 01:10:07.700]  в виде ориентированного циклического графа.
[01:10:09.700 --> 01:10:11.700]  Храним
[01:10:11.700 --> 01:10:13.700]  историю
[01:10:13.700 --> 01:10:15.700]  треангуляции
[01:10:15.700 --> 01:10:17.700]  в виде дак
[01:10:19.700 --> 01:10:21.700]  directed
[01:10:21.700 --> 01:10:23.700]  cyclic
[01:10:23.700 --> 01:10:25.700]  graph
[01:10:25.700 --> 01:10:27.700]  ориентированного циклического графа.
[01:10:27.700 --> 01:10:29.700]  Графo
[01:10:29.700 --> 01:10:31.700]  ориентированного циклического графа.
[01:10:31.700 --> 01:10:33.700]  Значит, каждая вершינה
[01:10:33.700 --> 01:10:35.700]  это треугольник.
[01:10:35.700 --> 01:10:37.700]  Вершина
[01:10:37.700 --> 01:10:39.700]  это треугольник, но возможно
[01:10:39.700 --> 01:10:41.700]  и не треугольник текущей треангуляции,
[01:10:41.700 --> 01:10:43.700]  а треугольник, который когда-либо был,
[01:10:43.700 --> 01:10:45.700]  треугольник, который когда-либо
[01:10:45.700 --> 01:10:47.700]  существовал,
[01:10:47.700 --> 01:10:49.700]  который когда-то
[01:10:51.700 --> 01:10:53.700]  существовал.
[01:10:53.700 --> 01:10:55.700]  То есть на самом начале,
[01:10:55.700 --> 01:11:03.020]  треугольнику p-2, p0, p-1. Вот есть такой один треугольник. Дальше. Какие у меня бывают
[01:11:03.020 --> 01:11:08.700]  процедуры? У меня есть процедура подразбить один треугольник на 2 или на 3, в зависимости от того,
[01:11:08.700 --> 01:11:13.060]  куда попала точка на границу или в обновленность. И есть еще процедура флипа. Вот давайте с ними
[01:11:13.060 --> 01:11:18.860]  помнём, как работать, и помнём, как меняется наш дак. Значит, первая процедура — это когда один
[01:11:18.860 --> 01:11:27.860]  треугольник разбивается на 2. Ну или на 3. Разбивается на 3. Здесь всё очень просто. Картинка
[01:11:27.860 --> 01:11:34.980]  такая. Был какой-то треугольник p и pgpk. Пришла новая точка p и, соответственно, старый треугольник
[01:11:34.980 --> 01:11:40.620]  распался, а вместо него появилось треног. Но давайте тогда из вершины, которая отвечает треугольнику
[01:11:40.620 --> 01:11:47.540]  p и pgpk проведём ребра в три новые вершины, которые отвечают новым трём добавленных треугольников.
[01:11:47.540 --> 01:11:55.220]  То есть будет вершина, отвечающая треугольнику pk, p и pr. Будет вершина, отвечающая треугольнику p и pgpk.
[01:11:55.220 --> 01:12:04.180]  Ну и будет вершина, отвечающая треугольнику pg и pkpk. Мы знали, что исходно был такой треугольник,
[01:12:04.180 --> 01:12:08.500]  и мы знаем, что с ним происходит на данной итерации. Он просто распадается на 3.
[01:12:08.500 --> 01:12:13.180]  Соответственно, давайте просто проведём 3 ребра вот этих треногов в треугольник. Если же была
[01:12:13.180 --> 01:12:21.020]  картинка вот такая, что было два треугольника с межных по ребру, и пришло pr вот сюда,
[01:12:21.020 --> 01:12:26.780]  пришло pr вот сюда, тогда что происходит? Мне нужно вот этот первый треугольник разбить на два вот таких,
[01:12:26.780 --> 01:12:36.100]  то есть просто из треугольника p и pgpk провести. Давайте не буду писать, слишком много букв.
[01:12:36.100 --> 01:12:42.620]  Короче, если точка pr попала на границу двух треугольников, тогда нужно просто разбить на два
[01:12:42.620 --> 01:12:48.380]  первый треугольник и разбить на 2 второй треугольник. То есть здесь будет не 3 дочерних узла,
[01:12:48.380 --> 01:12:55.900]  а всего 2. То есть ситуация по сути такая же. Это что происходит с подразбиением. Теперь что
[01:12:55.900 --> 01:13:02.020]  происходит с флипами? Эдж флип. Эдж флип мы будем обрывать так. Вот было у меня, получается,
[01:13:02.020 --> 01:13:09.900]  два треугольника какие-то, и я вместо вот этого ребра строю вот такое ребро. Пусть там было
[01:13:09.900 --> 01:13:20.460]  pi, pg, pk, pl. Соответственно, было в моей истории, были две вершинки, которые соответствуют этим
[01:13:20.460 --> 01:13:30.180]  треугольникам. Pg, pi, pg, pk и треугольник pi, pg, pl. Тогда давайте я просто заведу две вершины
[01:13:30.180 --> 01:13:39.180]  соответственно нашим треугольником. Это что будет? pi, pk, pl и pk, pg, pl. Ну и просто проведу ребра вот
[01:13:39.180 --> 01:13:47.380]  такие. Соответственно, был вот этот старый треугольник. Он так подразбился, он точнее
[01:13:47.380 --> 01:13:52.380]  флипнулся с другим, так что теперь они вместе, вот эти два треугольника, пришли вот в эти два.
[01:13:52.380 --> 01:13:57.060]  Тогда давайте просто перекрёстим все эти 4 ребра проведу. Это как бы означает, что вот этот наш
[01:13:57.060 --> 01:14:02.300]  треугольник как-то так изменился, что теперь он находится частично здесь, частично здесь. То
[01:14:02.300 --> 01:14:06.660]  есть он так подразбился, так флипнулся, что он как бы вот так на два разделился. И с этим тоже
[01:14:07.020 --> 01:14:15.020]  он был один треугольник, а теперь он частично находится здесь, частично здесь. В чем смысл? Смысл в том,
[01:14:15.020 --> 01:14:23.020]  что когда мы спускаемся вниз по какому-то ребру, мы по сути переходим в меньше треугольник. И тогда
[01:14:23.020 --> 01:14:28.340]  как решать задачу локализации? Мы встаем в корень нашего дага, встаем в вершину, которая
[01:14:28.340 --> 01:14:34.140]  отвечает треугольнику p-2, p0, p-1 и дальше смотрим, ага, ну понятно дело, что новая давальная точка pr
[01:14:34.140 --> 01:14:38.740]  заведомо лежит в этом треугольнике, то есть точка, которую мы пытаемся локализовать, точно
[01:14:38.740 --> 01:14:44.660]  лежит в этом корневом треугольнике. Дальше из него есть несколько ребер, 2 или 3, вопрос в каком из них
[01:14:44.660 --> 01:14:48.780]  лежит наша точка? Ну хорошо, вот есть у меня три опции, есть три треугольника, давайте просто
[01:14:48.780 --> 01:14:53.140]  вспомним, в каком из них мы лежим, спустимся туда. Потом опять, это какой-то треугольник, который
[01:14:53.140 --> 01:14:58.060]  когда-то существовал. Дальше он как-то подразбился или как-то виды изменился, либо он подразбился
[01:14:58.060 --> 01:15:03.660]  там два или три треугольника вот здесь, либо он флипнулся с другим, и соответственно он лежит
[01:15:03.660 --> 01:15:07.660]  либо здесь, либо здесь. Ну тогда давайте просто опять, у меня есть там две или три опции, я просто
[01:15:07.660 --> 01:15:14.620]  спускаю 100 из двух-трех треугольников, в котором лежит наша новая точка p. Итак, в итоге я дойду
[01:15:14.620 --> 01:15:19.020]  до листовой вершинки, а листья это как раз будут текущие треугольники нашей треангуляции. И
[01:15:19.020 --> 01:15:25.980]  собственно там и будет лежать наша вершина. В итоге локализация работает так. Локализация.
[01:15:25.980 --> 01:15:40.100]  Встать в корень сначала. Дальше мы делаем спуск в такой дочерний треугольник,
[01:15:40.100 --> 01:15:49.980]  дочерний треугольник, где лежит, ну как бы, та точка p, которую мы пытаемся локализовать.
[01:15:50.940 --> 01:16:03.300]  Завершаемся в листе. А лист — это и есть треугольник текущей треангуляции. Ну потому что
[01:16:03.300 --> 01:16:07.740]  что такое нелестовые вершины. Нелестовые — это те, которые изменились, которые когда-то
[01:16:07.740 --> 01:16:12.940]  существовали, дальше их как-то изменил, либо подразвел, либо флипнул, то есть они перестали
[01:16:12.940 --> 01:16:17.820]  существовать, и теперь их более свежая версия вот такая. Соответственно лист — это треугольник,
[01:16:17.820 --> 01:16:21.380]  который больше не менялся, то есть он когда-то создался и больше не изменялся, то есть как раз
[01:16:21.380 --> 01:16:26.380]  лист — это вот какой-то треугольник треангуляции. Ну и все, получается вот такой даг, внутри которого
[01:16:26.380 --> 01:16:33.100]  мы можем локализовать нашу точку p-r. И за счет случайного перемешивания и за счет того,
[01:16:33.100 --> 01:16:37.540]  что суммарно будет всего линейное количество флипов, можем доказать, что глубина этого дага
[01:16:37.540 --> 01:16:46.060]  будет логерифмическая. Ну, в смысле, от ожидания будет логерифмическая. За счет случайного
[01:16:46.060 --> 01:17:07.820]  порядка p1 и так далее, pn-1, граф будет иметь в среднем логерифмическую глубину. Вот тем самым
[01:17:08.780 --> 01:17:23.900]  Хорошо. Ну, соответственно, последняя тонкость, с которой нужно разобраться — это как обрабатывать
[01:17:23.900 --> 01:17:46.260]  точки p-1, p-2. Как обрабатывать точки p-1, p-2? Давайте так. Давайте мы скажем, что пусть... Ну, не так.
[01:17:47.020 --> 01:18:13.020]  Будем говорить, что точка p выше точки q, если либо у нее больше y,
[01:18:13.020 --> 01:18:36.860]  либо у них одинаковый y, но x меньше. Вот. И тогда мы скажем формально, значит, формально p-1 — это
[01:18:36.860 --> 01:18:49.700]  точка, которая располагается ниже всех точек из исхода, ну, что p. Точка ниже всех точек p. Такая,
[01:18:49.700 --> 01:19:14.220]  что из нее все точки в порядке по часовой стрелке видны в порядке возрастания отношения выше,
[01:19:14.220 --> 01:19:21.340]  в порядке высоты я напишу. В порядке высоты. Вот картинка такая. Значит, есть какие-то наши точки,
[01:19:21.340 --> 01:19:26.860]  вот какие-то такие точки исходного множества. Дальше я беру эту точку настолько далеко,
[01:19:26.860 --> 01:19:34.220]  настолько справа, что значит, что я смотрю на все эти точки в порядке по часовой стрелке. То есть я
[01:19:34.220 --> 01:19:40.300]  провожу все вот эти векторочки, сортирую их по углу в порядке по часовой стрелке, и тогда понятно,
[01:19:40.300 --> 01:19:44.900]  что минимальной будет такой чувак, у которого y минимальная возможность. То есть если эта
[01:19:44.900 --> 01:19:50.420]  точка достаточно далеко справа, то влияет больше всего именно y составляющая. То есть давайте
[01:19:50.420 --> 01:19:54.580]  вот здесь на всю точку. Она будет как бы самой первой часовой стрелке. Дальше будет вот это по
[01:19:54.580 --> 01:19:59.660]  y, дальше будет вот это, вот это. Ну, короче, они будут видны в порядке по часовой стрелке в том же
[01:19:59.660 --> 01:20:05.020]  порядке, как они видны в порядке вот это вот отношение выше. В порядке высоты они будут видны
[01:20:05.100 --> 01:20:11.140]  в таком же порядке. Вот, и при этом, да, нужно еще сказать, что p-1 так далеко,
[01:20:11.140 --> 01:20:30.580]  что не лежит ни в одном круге, построенном по трем точкам xp. Ну, то есть так, чтобы она не
[01:20:30.580 --> 01:20:36.660]  попадала ни в одну окружность, мы ее просто довольно далеко возьмем. Значит, дальше формально мы
[01:20:36.660 --> 01:20:49.660]  говорим, что p-2 выше всех точек p, выше всех точек p, и при этом из нее в порядке против часовой
[01:20:49.660 --> 01:21:00.220]  стрелки, опять-таки все вершины видны в порядке возрастания высоты. Все
[01:21:00.220 --> 01:21:17.340]  точки из p объедините p-1, видны в порядке возрастания высоты. Ну, опять, да, вот есть эти наши точки
[01:21:17.340 --> 01:21:22.340]  нормальные, обычные, есть где-то там справа внизу точка p-1, значит, мы берем точку p-2 где-то слева
[01:21:22.340 --> 01:21:27.700]  вверху, так что опять здесь уже направление на них на всех, справа вниз, соответственно, будет
[01:21:27.700 --> 01:21:37.300]  такой порядок. Мы, соответственно, так сейчас, вот, соответственно, самая низкая точка, это,
[01:21:37.300 --> 01:21:43.260]  конечно, будет p-1, дальше будет точка с минимальным y, дальше будет точка там со следующим по минимальным
[01:21:43.260 --> 01:21:47.420]  с y, ну и так далее, и они будут видны в порядке против часовой стрелки. Вот так мы определили p-2,
[01:21:47.420 --> 01:21:55.660]  ну и также p-2 достаточно далеко, так что она не лежит ни в одном круге, образованном тремя точками
[01:21:55.660 --> 01:22:12.860]  из p или p-1, вне любого круга, проходящего через три точки из p в объединении с p-1,
[01:22:12.860 --> 01:22:19.300]  то есть мы там строим любые вот такие три круга, любой круг по другим точкам и p-2 так далеко,
[01:22:19.300 --> 01:22:29.020]  чтобы этого не происходило. Вот, хорошо, давайте тогда напишем, что значит ребро легальное.
[01:22:29.020 --> 01:22:48.980]  Да, проверка легальности p и pg, да, другие вершины это pkp, другие вершины это pkp, то есть есть
[01:22:48.980 --> 01:22:52.420]  какое-то ребро p и pg, мы его тестируем на легальность, зная, что два треугольника,
[01:22:52.420 --> 01:23:05.460]  которые этому ребро ицинентны, это pk и pg. Значит, случай первый, если p и pg это ребро треугольника
[01:23:05.460 --> 01:23:19.180]  p-2, p0, p-1, то p и pg легально. Ну, легко заметить, что вот этот наш внешний треугольник p0, p-1, p-2,
[01:23:19.180 --> 01:23:24.580]  он настолько большой, что он, короче, он все равно будет легальный, потому что нет никакой другой
[01:23:24.580 --> 01:23:30.500]  окружности, которая бы содержала p-1 или p-2 внутри себя, то есть все остальные окружности супермаленькие
[01:23:30.500 --> 01:23:33.660]  по сравнению с этим большим треугольником, значит этот треугольник будет обязательно легальный.
[01:23:33.660 --> 01:23:47.340]  Второе, если ijkl больше на нуля, то мы делаем обычную проверку через определитель, то делаем
[01:23:47.340 --> 01:24:00.020]  обычную проверку через определитель. То есть, если у меня все точки нормальные,
[01:24:00.020 --> 01:24:03.020]  не содержат там бесконечных больших координат, то работает наш обычный
[01:24:03.020 --> 01:24:07.620]  определитель для определения легальности. И наконец последнее, иначе, если есть минимальное,
[01:24:07.620 --> 01:24:19.860]  то я утверждаю, что ребро p и pg легально, если и только если минимум из kl меньше, чем минимум из ij.
[01:24:28.380 --> 01:24:34.380]  Чтобы это понять, мы сначала замечаем, что из индексов ij не больше одного отрицательного,
[01:24:34.380 --> 01:24:42.420]  не больше одного отрицательного, потому что если не оба отрицательны, то это ребро треугольника вот
[01:24:42.420 --> 01:24:50.100]  этого, значит мы его уже разобрали, это notecase, то есть мы уже должны были бы разобрать. Ну и дальше
[01:24:50.100 --> 01:24:58.380]  понятно, что kl, хотя бы одна из них, это точка pr, хотя бы одна, это pr, потому что мы legalize
[01:24:58.380 --> 01:25:02.300]  запускаем только когда одна из вершин токплеера, значит тоже не больше одного отрицательного,
[01:25:02.300 --> 01:25:13.100]  не больше одного отрицательного. Вот, ну и дальше, значит, если надо разобрать случай, если среди
[01:25:13.100 --> 01:25:19.820]  этих четырех чисел есть всего один отрицательный, то что может быть? Либо вот здесь вот отрицательное
[01:25:19.820 --> 01:25:26.500]  число, ну значит понятное дело тогда, что это означает, что это какие-то, допустим, нормальные
[01:25:26.500 --> 01:25:31.900]  вершинки, а это супердалекая вершина, там p-1 или p-2, ну тогда понятно, что ребро p и p же
[01:25:31.900 --> 01:25:35.620]  легальное, потому что внутри этого треугольника пк точно не содержится, то есть в этом случае все
[01:25:35.620 --> 01:25:40.700]  хорошо. Дальше, если вот это вот минус один, то получается, что это супербольшой треугольник,
[01:25:40.700 --> 01:25:53.900]  это какие-то нормальные точки, тогда, сейчас, секунду, а, ну да, тогда это ребро, конечно,
[01:25:53.900 --> 01:26:00.220]  нелегально, то есть если среди чисел i, j, k ровно одно отрицательное, и это i или j,
[01:26:00.220 --> 01:26:03.940]  тогда вот это ребро нелегальное, потому что это супербольшой треугольник, понятное дело,
[01:26:03.940 --> 01:26:09.260]  что окружность, проходящая через p и pg, она содержит там вообще все на свете, в частности,
[01:26:09.260 --> 01:26:13.660]  конечно, pk. Значит, ребро нелегальное, и мы и получаем, что он нелегальный, вот это не
[01:26:13.660 --> 01:26:17.660]  раз не выполняется. Ну и то же самое нужно проверить, что если ровно одно из них отрицательное,
[01:26:17.660 --> 01:26:20.740]  ровно одно из них отрицательное, тогда в зависимости от того, кто из них минус 1,
[01:26:20.740 --> 01:26:25.020]  а кто из них минус 2, вот это не раз, опять-таки, проверяет, что ребро легальное или нет.
[01:26:25.020 --> 01:26:32.740]  Короче, много случаев, аккуратно нужно понять, почему это все верно, но код сравнительно простой,
[01:26:32.740 --> 01:26:36.620]  то есть даже не нужно переходить к бессмертичным большим координатам, нужно просто вот эти
[01:26:36.740 --> 01:26:41.500]  проверки написать, что если это ребро исходного большого треугольника, то ребро по умышлению
[01:26:41.500 --> 01:26:45.860]  легально, если это все нормальные вершины без бесконечно больших координатов, то мы делаем
[01:26:45.860 --> 01:26:50.620]  обычную проверку, иначе мы просто смотрим на номера, и вот такая проверка оказывается,
[01:26:50.620 --> 01:26:54.620]  равносильная легальность, то есть в случае, когда у нас есть какие-то плохие вершины,
[01:26:54.620 --> 01:26:59.100]  минус 1 или минус 2, нам на самом деле не нужно там явно строить сети окружности,
[01:26:59.100 --> 01:27:04.420]  считать определительные, достаточно будет просто посмотреть вот на это неравенство и его выполнение
[01:27:04.420 --> 01:27:10.580]  равносильной, потому что ребро легает. Вот все, тогда на этом мы заканчиваем, треугольницу мы
[01:27:10.580 --> 01:27:17.220]  построили, соответственно это логично, треугольницу делаем. Все, всем спасибо и до встречи на экзамене.
[01:27:17.220 --> 01:27:21.700]  Спасибо, до свидания. До свидания.
