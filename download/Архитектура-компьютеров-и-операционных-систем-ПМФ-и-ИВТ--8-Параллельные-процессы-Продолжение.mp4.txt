[00:00.000 --> 00:17.000]  Всем привет. Мы начинаем, наверное, пока не понятно последнее или не последнее нормальное занятие в этом семестре.
[00:17.000 --> 00:26.000]  Ничего пока определенно сказать не могу, кроме того, что рекомендуется, кто не привился, все-таки прививку сделать.
[00:26.000 --> 00:33.000]  Но и не забывайте, особенно в общественных местах, маски, перчатки это фигня полная, маски это полезно.
[00:33.000 --> 00:42.000]  Тема сегодняшнее занятие это каналы, которые предназначены для передачи данных одного процесса к другому.
[00:42.000 --> 00:57.000]  Но для начала нам нужно немножко вспомнить про то, как запускаются программы и разный дочерний процесс.
[00:57.000 --> 01:03.000]  Итак, давайте вспомним материал двух предыдущих занятий.
[01:04.000 --> 01:17.000]  Начнем с того, что пишем дурацкую пеленку из огромного количества include файлов, которые, возможно, пригодятся, возможно, не пригодятся, но их много.
[01:17.000 --> 01:22.000]  Унистэдэст, тогда его, что нам еще обычно бывает нужно?
[01:22.000 --> 01:29.000]  Систат, файл-контрол, если нам понадобится, open.
[01:29.000 --> 01:35.000]  Дальше, систат, если нам нужно про что-нибудь, про право доступа.
[01:35.000 --> 01:41.000]  Так, истэдэст, стат, сиз, вейт, это там, где ожидание процессов.
[01:41.000 --> 01:43.000]  Ладно, надеюсь, что пока хватит.
[01:43.000 --> 01:46.000]  Эрнон, точно.
[01:53.000 --> 01:57.000]  Маленькая программа, которая сделает две вещи.
[01:57.000 --> 02:02.000]  Запускает какой-то процесс, в этом процессе запускает новую программу.
[02:02.000 --> 02:06.000]  Ну, примерно то, что было у нас на прошлом занятии.
[02:06.000 --> 02:09.000]  Для этого нам нужен... Систайпс забыл.
[02:09.000 --> 02:14.000]  Систайпс – это важный заболочный файл.
[02:14.000 --> 02:19.000]  Так, у нас есть некоторые дочерние процессы.
[02:19.000 --> 02:21.000]  Запускаем Fork.
[02:21.000 --> 02:23.000]  Дальше возможны три варианта.
[02:23.000 --> 02:32.000]  Fork равен нулю, либо минус один.
[02:33.000 --> 02:40.000]  Ну, или номер процесса у нас строго больше нуля.
[02:40.000 --> 02:43.000]  Про обработку ошибок я сейчас не буду подробно останавливаться.
[02:43.000 --> 02:49.000]  Но вы все помните, что процесс мы можем неуспешно создать, если у нас закончились лимиты.
[02:49.000 --> 02:56.000]  Так, ну, если мы запускаем родительский процесс, то он должен в какой-то момент дождаться,
[02:56.000 --> 03:01.000]  пока завершится наш дочерний.
[03:01.000 --> 03:04.000]  WeightPit – нужный процесс.
[03:04.000 --> 03:08.000]  Status – с нулими флагами.
[03:08.000 --> 03:13.000]  Ну, и теперь дочерний процесс, который должен сделать что-то о смысле.
[03:13.000 --> 03:16.000]  Например, запустить какую-то программу.
[03:16.000 --> 03:20.000]  Если вы знаете на стадии компиляции опции этой программы,
[03:20.000 --> 03:22.000]  то exec suffix l.
[03:22.000 --> 03:24.000]  Если не знаете, то v.
[03:24.000 --> 03:30.000]  Ну, если хотите запускать что-то из переменной окружения pass, то буквка p обязательно.
[03:30.000 --> 03:32.000]  Здесь я сделал маленькую паузу.
[03:32.000 --> 03:40.000]  Давайте составлю чуть более усложненный пример, а не просто какую-нибудь программу типа ls.
[03:40.000 --> 03:50.000]  И в качестве тестовой программы это будет скрипт на языке Python.
[03:50.000 --> 03:55.000]  ПМФ-ники Python знают, и ВТ-шники вы Python не особо знаете.
[03:55.000 --> 03:57.000]  Но ничего страшного.
[03:57.000 --> 04:00.000]  И маленькая программа, которая что будет делать?
[04:00.000 --> 04:09.000]  Она будет читать какие-то строки из стандартного потока ввода.
[04:09.000 --> 04:16.000]  Модуль C, с которым есть файлы stdio, stdio, в него можно писать и читать.
[04:16.000 --> 04:21.000]  Его можно использовать как облик для итерации, чтобы читать оттуда строки.
[04:21.000 --> 04:27.000]  Строки в конце содержат еще символ slash n.
[04:27.000 --> 04:30.000]  От этого можно избавиться.
[04:30.000 --> 04:33.000]  Strip все пробельные символы.
[04:33.000 --> 04:38.000]  И для того, чтобы понять, что мы действительно что-то осмысленное сделали,
[04:38.000 --> 04:43.000]  давайте выведем просто удвоенную строку.
[04:44.000 --> 04:47.000]  Что делает программа?
[04:47.000 --> 04:55.000]  Она читает все со стандартного потока ввода.
[04:55.000 --> 04:59.000]  СИС, СТДА, не СТДО, а СТДИН.
[04:59.000 --> 05:02.000]  Там отдельно СТДИН, СТДА.
[05:02.000 --> 05:07.000]  Читает какой-то текст стандартного потока ввода и вводит удвоенный текст.
[05:07.000 --> 05:12.000]  То, что здесь продублировался СД, это уже особенность EMACS.
[05:12.000 --> 05:15.000]  Как нам остановить эту программу?
[05:15.000 --> 05:17.000]  Завершить поток вывода?
[05:17.000 --> 05:23.000]  Просто послать сигнал завершения, закрыть стандартный поток ввода, CTRL-D.
[05:23.000 --> 05:27.000]  Наша программа находится в питомском файле.
[05:27.000 --> 05:30.000]  Нам нужно запустить Python 3.
[05:30.000 --> 05:34.000]  Какие у нас аргументы?
[05:34.000 --> 05:39.000]  Например, Python 3, дублирование, либо...
[05:42.000 --> 05:45.000]  Зачем дублировать?
[05:45.000 --> 05:53.000]  Потому что вот это программу, которую надо запустить.
[05:53.000 --> 05:56.000]  Дальше вот эта штуковина, это argv0.
[05:56.000 --> 06:01.000]  Дальше идут argv1 и так далее.
[06:01.000 --> 06:05.000]  Программа называлась program.py.
[06:05.000 --> 06:10.000]  Запускается все из текущего каталога, поэтому никаких особенностей нам не нужно.
[06:10.000 --> 06:20.000]  Нал, естественно, здесь нужно все проверять, что мы корректно работаем,
[06:20.000 --> 06:23.000]  что успешно запустили.
[06:23.000 --> 06:26.000]  Почему я не делаю проверку на ошибки?
[06:26.000 --> 06:41.000]  Потому что если мы вообще попали сюда, то этот код, значит, экзек выпался неуспешно.
[06:41.000 --> 06:45.000]  Этот код при хорошей ситуации является недостижимым.
[06:45.000 --> 06:50.000]  Вот наша программа занимается следующим.
[06:50.000 --> 06:59.000]  Она запускает Python, и Python дальше у нас считает стандартного потока ввода что-то
[06:59.000 --> 07:02.000]  и дублирует содержимое.
[07:02.000 --> 07:07.000]  И завершить работу этой штуковины либо Ctrl-C, либо Ctrl-D.
[07:07.000 --> 07:15.000]  Теперь мне неудобно вводить что-то на стандартный поток ввода.
[07:15.000 --> 07:18.000]  Как я могу это поправить?
[07:18.000 --> 07:25.000]  Я могу написать какой-то текстовый файл с входными данными для стандартного потока ввода.
[07:25.000 --> 07:28.000]  Например, строчка hello, строчка world.
[07:28.000 --> 07:33.000]  И на выходе мы ожидаем увидеть удвоенную строчку hello, удвоенную строчку world.
[07:33.000 --> 07:40.000]  Как нам запустить эту программу launch и перенаправить все со стандартного потока ввода?
[07:40.000 --> 07:45.000]  Почему эта штука у нас отработала для дочернего процесса?
[07:45.000 --> 07:53.000]  Мы же в программе launch скормили на стандартный поток ввода что-то, а вовсе не нашим Python.
[07:53.000 --> 07:58.000]  Почему это работает?
[07:58.000 --> 08:03.000]  Потому что файловые дескрипторы наследуются.
[08:03.000 --> 08:06.000]  У нас произошло наследование файловых дескрипторов.
[08:06.000 --> 08:13.000]  И тем самым наш Python честно прочитал вместо стандартного потока ввода содержимое файловых дескрипторов.
[08:13.000 --> 08:16.000]  Но есть еще один способ.
[08:16.000 --> 08:19.000]  Я не зря подключил FileControl.
[08:19.000 --> 08:24.000]  Давайте перед тем как выполнить exec я сделаю вот следующие вещи.
[08:24.000 --> 08:31.000]  Закрою стандартный поток ввода и открою нужный нам файл на чтении.
[08:35.000 --> 08:39.000]  И теперь я могу, естественно нужно все перекомпилировать.
[08:39.000 --> 08:46.000]  Просто запускаю launch и уже просто без указания переопределения стандартного потока ввода.
[08:46.000 --> 08:52.000]  Вот именно для дочернего процесса у меня этот стандартный поток ввода переопределен на какой-то файл.
[08:52.000 --> 08:57.000]  И Python уже работает, ничего не зная про существование файла input.txt.
[08:57.000 --> 09:03.000]  То есть фактически мы сымитировали вот такое поведение, которое делает интерпретатор bash
[09:03.000 --> 09:06.000]  либо любой другой shell, когда запускает какую-то программу.
[09:06.000 --> 09:14.000]  На самом деле вот здесь вот я вас и в прошлом занятии, и сегодня вот сейчас немножко обманываю.
[09:14.000 --> 09:19.000]  Потому что вообще говоря вот такая штука это не определенное поведение.
[09:19.000 --> 09:26.000]  Вот я написал здесь все это в одну строчку и казалось бы это две связанные между собой инструкции.
[09:26.000 --> 09:28.000]  На самом деле это две разные инструкции.
[09:28.000 --> 09:35.000]  И что будет если вот мы сделали закрытие, дальше что-то у нас происходит,
[09:35.000 --> 09:40.000]  вы потеряли контроль над вашей программой, например,
[09:40.000 --> 09:45.000]  клоус у вас происходит на одном экране, спустя несколько скролов вы написали open,
[09:45.000 --> 09:52.000]  гарантируется ли вам, что open откроет файл descriptor с номером 0?
[09:52.000 --> 09:59.000]  На самом деле между операциями close и open может происходить все что угодно,
[09:59.000 --> 10:03.000]  но особенно это актуально для многопоточных программ,
[10:03.000 --> 10:06.000]  поскольку у вас потоки выполняются независимо друг от друга.
[10:06.000 --> 10:13.000]  И здесь даже если у вас будут подряд строки close и open, все равно что-то может произойти.
[10:13.000 --> 10:19.000]  И для того чтобы более корректно отработать эту ситуацию,
[10:19.000 --> 10:25.000]  то есть нам по сути нужно заменить файл в descriptor 0 на другой файл в descriptor
[10:25.000 --> 10:27.000]  от какого-то другого открытого файла.
[10:27.000 --> 10:37.000]  И на самом деле для этого предназначен, есть уже готовый системный вызов, называется dab, но только с цифрой 2.
[10:37.000 --> 10:41.000]  Итак, что делает файл в descriptor dab?
[10:41.000 --> 10:45.000]  Он просто создает копию файлового descriptor.
[10:45.000 --> 10:47.000]  Что означает копия файлового descriptor?
[10:47.000 --> 10:52.000]  У вас есть какой-то один открытый файл или файлоподобный объект.
[10:52.000 --> 10:57.000]  После того как вы создаете копию, то вы с этим файлоподобным объектом,
[10:57.000 --> 11:02.000]  который имеет уже другой номер файлового descriptor,
[11:02.000 --> 11:11.000]  просто работаете точно так же, как с тем файлом, на который остался исходный файловый descriptor.
[11:11.000 --> 11:18.000]  То есть по сути это копирование одного файлового descriptor и присвоение ему еще какого-то нового номера.
[11:18.000 --> 11:26.000]  Системный вызов dab возвращает новый номер файлового descriptor, который также случайным образом просто выбирается.
[11:26.000 --> 11:30.000]  То есть здесь я мог бы написать следующую строчку.
[11:30.000 --> 11:36.000]  Я мог поменять местами open и close.
[11:36.000 --> 11:40.000]  Здесь сделать новый файловый descriptor.
[11:40.000 --> 11:44.000]  Затем я делаю close.
[11:44.000 --> 11:51.000]  Здесь у нас input fd скорее всего будет номер 3, но это совершенно не обязательно.
[11:51.000 --> 12:00.000]  Дальше я могу закрыть файл descriptor 0 и сделать вызов dab.
[12:00.000 --> 12:05.000]  И присвоить input fd.
[12:05.000 --> 12:13.000]  Dab, поскольку у нас свободный файл descriptor с номером 0, будет использовать этот самый файл descriptor с номером 0.
[12:13.000 --> 12:18.000]  Давайте скомпилируем, проверим, что оно работает.
[12:18.000 --> 12:21.000]  Да, вот оно честно работает.
[12:21.000 --> 12:30.000]  В момент, когда мы сделали закрытие и сделали dab, у нас уже файл открыт с двух файловых descriptor 0 и 3.
[12:30.000 --> 12:33.000]  И они указывают оба на один и тот же файл.
[12:33.000 --> 12:37.000]  Как в этом можно убедиться и проверить?
[12:41.000 --> 12:44.000]  Так делать очень плохо.
[12:45.000 --> 12:48.000]  Гетчар.
[12:48.000 --> 12:52.000]  Кстати, не факт, что это будет работать.
[12:52.000 --> 12:58.000]  Это некоторый аналог систем паузы для Windows.
[12:58.000 --> 13:04.000]  И так делать на самом деле очень-очень плохо.
[13:04.000 --> 13:10.000]  Я это делаю только для того, чтобы поставить нашу программу.
[13:10.000 --> 13:14.000]  Не спасло. Почему не спасло? Потому что на старом потоке воды у нас много всего.
[13:14.000 --> 13:18.000]  Ладно, сделаем тогда просто длинный sleep.
[13:18.000 --> 13:23.000]  Sleep это система вызов, которая приостанавливает программу на определенное количество секунд.
[13:23.000 --> 13:27.000]  Я думаю, 2 минуты нам хватит, чтобы посмотреть что-нибудь, что у нас происходит.
[13:27.000 --> 13:30.000]  Так, запускаем.
[13:30.000 --> 13:37.000]  Так, ладно. Мы знаем, что наш процесс называется launch.
[13:37.000 --> 13:41.000]  Давайте найдем, что за процесс с этой программой.
[13:41.000 --> 13:43.000]  Ой, а у нас их два.
[13:43.000 --> 13:46.000]  Кстати, почему два?
[13:46.000 --> 13:49.000]  Потому что мы сделали fork.
[13:49.000 --> 13:54.000]  И какой из них нам интересен?
[13:54.000 --> 13:57.000]  Наверное, тот, который имеет больший process ID.
[13:57.000 --> 14:00.000]  Почему нам интересен тот, который имеет больший номер process ID?
[14:00.000 --> 14:04.000]  Потому что мы запустили какой-то процесс, вот наша функция main.
[14:04.000 --> 14:06.000]  Дальше вызываем fork.
[14:06.000 --> 14:16.000]  И с очень большой вероятностью наш номер нового процесса будет больше, чем номер нашего исходного процесса.
[14:16.000 --> 14:19.000]  Но вообще на это полагаться не стоит.
[14:19.000 --> 14:25.000]  Поэтому лучше сделать какой-то явный вывод.
[14:25.000 --> 14:32.000]  Особенно когда вы работаете запуском разных процессов, то удобно делать вывод отладочной информации.
[14:34.000 --> 14:37.000]  С нужным вам процесс ID.
[14:43.000 --> 14:46.000]  Останавливаю, компилирую, запускаю.
[14:46.000 --> 14:57.000]  Так, ну вот теперь я уже не могу не запускать программу PS, а сразу перейти в прок номер этого процесса.
[14:57.000 --> 15:03.000]  И там есть подкаталог FD, что в нем содержится.
[15:03.000 --> 15:07.000]  Вот три файла дескриптора. 0, 1, 2 и 3.
[15:07.000 --> 15:16.000]  0 указывает символическая ссылка на файл input.txt, так же, как и номер 3.
[15:16.000 --> 15:25.000]  А вот файлы дескриптора 1 и 2 указывают на обычный файл псевдотерминал.
[15:25.000 --> 15:30.000]  Так, ладно, это я останавливаю.
[15:30.000 --> 15:38.000]  Так, но тем не менее это не решает эту проблему, что между close и dub у нас может происходить все что угодно.
[15:38.000 --> 15:44.000]  Поэтому нам нужно как-то все-таки схлопнуть эти две инструкции в одну.
[15:44.000 --> 15:58.000]  И если вы внимательно смотрели MAN на стены вызов dub, то могли бы обратить внимание, что есть еще стена вызов dub с цифрой 2,
[15:58.000 --> 16:09.000]  который делает то же самое, что система вызов dub, но при этом он имеет еще дополнительный параметр, целое число, новый номер файлового дескриптора.
[16:09.000 --> 16:16.000]  И на самом деле сам по себе стена вызов dub достаточно бесполезен в современных условиях, он мало где используется,
[16:16.000 --> 16:21.000]  зато система вызов dub 2 используется много где, достаточно широко.
[16:21.000 --> 16:32.000]  То есть что он позволяет сделать? Он позволяет мне писать строчку close, пишем dub 2 input файловый дескриптор и указываем число 0.
[16:32.000 --> 16:44.000]  Что он делает? Если файловый дескриптор с указанным номером, в данном случае число 0 существует, то предварительно файловый дескриптор с номером 0 будет закрыт
[16:44.000 --> 16:49.000]  и вместо него будет переназначен файловый дескриптор, который вы присваиваете.
[16:49.000 --> 16:55.000]  Если такого файлового дескриптора не существовало, то у вас просто будет создан файловый дескриптор с указанным номером,
[16:55.000 --> 16:59.000]  и он будет ссылаться на тот файл, который вы указали.
[16:59.000 --> 17:10.000]  Перекомпилируем, так, slip, наверное, мне тут уже не нужен, хотя посмотреть... ладно, он нам все равно ничего хорошего не даст.
[17:10.000 --> 17:14.000]  Запускаем, вот получаем тот же эффект, но более безопасно.
[17:15.000 --> 17:24.000]  То есть у нас гарантируется всегда, что файл, который мы открыли, имеет файловый дескриптор с номером 0.
[17:24.000 --> 17:31.000]  И этот файл дескриптора с номером 0 уже наследуется нашей программой на Python.
[17:31.000 --> 17:46.000]  Ну и в прошлый раз вот в PMF-ной группе возникал вопрос, как нам обрабатывать вывод от того процесса, который мы запустили.
[17:46.000 --> 17:56.000]  Здесь понятно, что мы можем запускать какие-то программы, у нас может перенаправляться куда-то вывод.
[17:56.000 --> 18:09.000]  И бывает полезно не перенаправлять этот вывод куда-то на стандарт-путок вывода, не делать перенаправления в какой-то файл.
[18:09.000 --> 18:18.000]  Например, вы запускаете два процесса, либо вы запускаете только один дочерний процесс, и уже в родительском процессе с ним как-то взаимодействуете.
[18:18.000 --> 18:26.000]  Для того, чтобы родительский процесс мог что-то осмысленное сделать с тем выводом, который дает дочерний процесс.
[18:26.000 --> 18:29.000]  Но можете придумать ситуации, когда это бывает полезно.
[18:29.000 --> 18:43.000]  Ну хорошо, вот здесь вы видите текстовый редактор с подсветкой строк, с кучей всяких сложенной поддержкой многоаконности в текстовом виде.
[18:43.000 --> 18:53.000]  И внутри этого текстового редактора запущен еще Shell-терминал, и этот Shell-терминал еще делает запуск каких-то дополнительных программ.
[18:54.000 --> 19:01.000]  При этом на самом деле у нас на настоящий терминал ничего из этого Shell-а не попадает.
[19:01.000 --> 19:10.000]  Все попадает внутрь нашего текстового редактора, дальше текстовый редактор этот буфер вывода хранит, еще рисует тут номера строк.
[19:10.000 --> 19:21.000]  То есть на самом деле любая среда разработки, где запускается компилятор GCC, отладчик ГДБ, ну и так далее, они все используют запуск дочерних процессов.
[19:21.000 --> 19:32.000]  И при этом как-то обрабатывают их вывод. Причем здесь мы можем вывод отдельно разделять, по-разному обрабатывать вывод ошибок и стандартный поток вывода.
[19:32.000 --> 19:35.000]  Например, рисовать какими-то разными цветами.
[19:35.000 --> 19:48.000]  Итак, для того, чтобы перенаправить вывод из одного файлового дескриптора из одного процесса к другому, нам нужна пара файловых дескрипторов.
[19:48.000 --> 19:58.000]  И эта пара файловых дескрипторов должна быть доступна обоим процессом. То есть нужно сделать что-то до форка.
[19:59.000 --> 20:09.000]  Пара файловых дескрипторов это значит пара из двух целых чисел, которые можно хранить в виде массива.
[20:09.000 --> 20:18.000]  И системный вызов, который свяжет между собой как-то эту пару файловых дескрипторов, называется pipe.
[20:22.000 --> 20:25.000]  Pipe в переводе с английского означает труба.
[20:25.000 --> 20:30.000]  Немножко тер материал о том, что такое труба.
[20:30.000 --> 20:46.000]  Труба это такая длинная штука, обычно круглой в сечении, и в трубу можно что-то заливать, и из трубы иногда что-то выливается.
[20:46.000 --> 20:50.000]  Она является одно направлением.
[20:50.000 --> 20:58.000]  Если посмотреть на системный вызов pipe, то можно обратить и внимательно почитать, что там про него написано в description.
[20:58.000 --> 21:06.000]  Тут написано, что это два файла у дескриптора с номерами 0 и 1, которые записываются в виде массива.
[21:06.000 --> 21:10.000]  И очень важная особенность, которую надо запомнить.
[21:10.000 --> 21:16.000]  Вся жидкость по трубе у нас течет не слева направо, а справа налево.
[21:16.000 --> 21:19.000]  Почему справа налево?
[21:19.000 --> 21:29.000]  Ну, на самом деле, кто из них потом, кто родитель, не совсем понятно, потому что они равнозначны.
[21:29.000 --> 21:42.000]  Версия про арабов, которые проектировали POSIX API, тоже как-то не очень достоверна, поскольку это было еще в 70-80-е годы.
[21:42.000 --> 21:45.000]  Арабов было в Америке не так много.
[21:45.000 --> 21:47.000]  На самом деле ответ достаточно прост.
[21:47.000 --> 21:51.000]  Что вы можете делать с файлом дескриптора с номером 0?
[21:51.000 --> 21:53.000]  Вы можете из него читать.
[21:53.000 --> 21:56.000]  А файл дескриптора с номером 1 вы можете писать.
[21:56.000 --> 22:09.000]  Поэтому в POSIX API трубу спроектировали именно таким образом, чтобы удобно было, просто глядя на индексы элементов массива, правильно понять, какой это файловый дескриптор.
[22:09.000 --> 22:13.000]  Нулевой предназначен только для чтения, писать него невозможно.
[22:13.000 --> 22:16.000]  Первый предназначен только для записи.
[22:16.000 --> 22:23.000]  И труба – это только одно направленная передача данных из одного места в другое.
[22:23.000 --> 22:29.000]  Мы к дальнейшим свойствам трубы еще вернемся, поэтому я ее не стираю.
[22:29.000 --> 22:39.000]  Нам нужно сделать трубу и для этого вызвать системный вызов под названием Pipe.
[22:39.000 --> 22:53.000]  Если внимательно посмотреть на сигнатуру системного вызова, в некоторых манах написано int звездочка, в некоторых написано int PipeFD и явным образом число 2.
[22:53.000 --> 23:03.000]  Мы на самом деле можем передать указатель на целое число, но массив сам по себе является указателем.
[23:03.000 --> 23:15.000]  И на самом деле нам нужно обязательно проверять на значение минус 1.
[23:15.000 --> 23:31.000]  Значение минус 1 – это какая-то ошибка. Что может означать ошибка при создании трубы? В каких ситуациях она может появиться?
[23:31.000 --> 23:43.000]  Здесь же мы просто вызываем Pipe от двух чисел. Мы не передаем никакие имена файлов, которые могут не существовать, у которых не будет прав доступа.
[23:43.000 --> 23:57.000]  В этом случае тут скорее будет SegmentationFall в какой-то момент, поскольку на языке C трудно это проконтролировать при реализации функции Pipe.
[23:57.000 --> 24:03.000]  А причем тут права к файловому дескриптору?
[24:03.000 --> 24:11.000]  Нам Pipe просто создает два файловых дескриптора и сохраняет их в чен. То есть это выходной параметр.
[24:11.000 --> 24:23.000]  У нас количество файловых дескрипторов – это ограниченный ресурс. Pipe у нас даже не один открывает, а сразу два файловых дескриптора.
[24:23.000 --> 24:37.000]  Поэтому вероятность того, что вы встретите ошибку и закончили с файловой лимиты, является единственной возможной ошибкой, почему у вас Pipe может завершиться с ошибкой.
[24:37.000 --> 24:55.000]  После того, как вы создали Pipe, у вас в трубе появилось два новых файловых дескриптора. Один из них предназначен для чтения, другой – для записи.
[24:55.000 --> 25:05.000]  Обычно они складываются слева направо, то есть если у нас свежезапущенная программа Main, запускаем в чистом окружении, где нет никаких открытых файлов родительского процесса,
[25:05.000 --> 25:11.000]  скорее всего у них будут номера 3 и 4, но опять же гарантировать это никто не может.
[25:11.000 --> 25:25.000]  Мы создали два файловых дескриптора с номерами 3 и 4. Теперь мы хотим запустить какую-то программу, ее вывод перенаправить к нашему родительскому процессу.
[25:25.000 --> 25:42.000]  Что нам для этого нужно сделать? У нас есть труба, в которой все может протекать справа налево. Мы можем записывать файловый дескриптор, который хранится в элементе массива с индексом 1.
[25:42.000 --> 26:02.000]  То есть мы должны в ДАБ-2, мы импут переназначили и точно таким же образом мы можем переназначить что-то из трубы, то есть файловый дескриптор, который хранится в качестве первого элемента, доступного для записи, связать с файлом дескриптора под номером 1.
[26:02.000 --> 26:28.000]  Так, вот я это связал, компилируем, запускаем, наша программа была запущена и мы уже не наблюдаем никакой вывод, в отличие от прошлого раза, хотя процесс честно был запущен, он честно отработал, что-то записал на стандартный поток вывода, но этот стандартный поток вывода просто попал в трубу, из которой мы ничего не прочитали, эти данные у нас пропали.
[26:28.000 --> 26:56.000]  Так, ну теперь возвращаемся к нашему родительскому процессу, после того как мы запустим процесс, в то время пока процесс работает, мы можем что-то сделать, ну например, мы можем сымитировать вот такую команду Python3, как нам посчитать количество символов в выводе.
[26:56.000 --> 27:24.000]  Мы можем запустить некоторую программу, перенаправить стандартный поток ввода, что мы уже сделали, ну и дальше, например, вызвать команду wc, с опцией "-c", это посчитать количество символов, что такое wc, помните, это подсчет разных статистик по тексту, посчитать количество слов, посчитать количество строк, ну или количество символов, оно же количество byte.
[27:26.000 --> 27:36.000]  Так, давайте сымитируем теперь подсчет количества символов, которые нам выдала наша программа из дочернего процесса.
[27:36.000 --> 27:58.000]  Для этого нам нужен использовать системный вызов read, который читает что-то куда-то в определенный буфер, в самом деле содержимое буфера нам особо неинтересно для этой задачи, нам больше интересно, что нам вернет системный вызов read.
[27:58.000 --> 28:10.000]  Так, читаем мы откуда? Из нулевого элемента того массива, который связан у нас с трубой.
[28:10.000 --> 28:20.000]  Так, мы передаем ему наш буфер и указываем максимальный размер, который мы имеем право прочитать.
[28:20.000 --> 28:30.000]  Так, на самом деле здесь по-хорошему надо сделать все это в цикле, ну ладно, вывод у нас небольшой, поэтому для демонстрации этого достаточно.
[28:30.000 --> 28:40.000]  И сообщаем о том, что мы прочитали сколько-то байт из нашего канала.
[28:40.000 --> 28:53.000]  Так, только здесь по-хорошему надо сделать тогда приведение типов, поскольку SSST имеет размеры либо 32, либо 64.
[28:53.000 --> 29:05.000]  Ладно, компилируем, запускаем и сообщаем о том, что мы прочитали 22 байт из нашего канала, но это похоже на вывод команды WC.
[29:05.000 --> 29:11.000]  Ну и таким образом вы можете связывать между собой произвольный процесс.
[29:11.000 --> 29:17.000]  Так, на текущий момент у вас возникли какие-то вопросы или нет?
[29:17.000 --> 29:19.000]  Хорошо.
[29:26.000 --> 29:31.000]  Так, вот хороший вопрос, давайте мы это поменяем местами.
[29:31.000 --> 29:35.000]  Вот у нас буфер, дождались.
[29:39.000 --> 29:42.000]  Компилируем и запускаем.
[29:43.000 --> 29:50.000]  Получаем тот же самый вывод, но здесь одна есть маленькая тонкость.
[29:50.000 --> 29:54.000]  Труба. Какие есть свойства у трубы?
[29:54.000 --> 30:09.000]  Труба – это что-то, у чего есть длина, что еще есть у трубы, кроме длины.
[30:09.000 --> 30:13.000]  Наверное, радиус.
[30:13.000 --> 30:17.000]  Теперь вопрос, площадь сечения какая?
[30:17.000 --> 30:21.000]  PR квадрат.
[30:21.000 --> 30:24.000]  Так, это у нас площадь сечения.
[30:24.000 --> 30:27.000]  А объем трубы?
[30:27.000 --> 30:34.000]  Да, объем это у нас получается PR квадрат, умноженный на длину.
[30:34.000 --> 30:38.000]  И чему это равно?
[30:38.000 --> 30:46.000]  Это равно 65536 байт.
[30:46.000 --> 30:52.000]  Так, но это только в линукс, в других операционных системах это может быть по-другому.
[30:52.000 --> 31:04.000]  Так вот, если у вас вывод не превышает 65536 байт, то совершенно неважно, где написать до ожидания процесса, либо после.
[31:04.000 --> 31:10.000]  У вас данные хранятся в трубе, и вы сможете их прочитать то, что у нее записано.
[31:10.000 --> 31:14.000]  Данные хранятся просто в некотором бусе.
[31:14.000 --> 31:24.000]  На самом деле тут еще возникает проблема, что произойдет, если не один процесс будет писать, а два процесса будут писать в трубу.
[31:24.000 --> 31:35.000]  У нас есть файлодискриптор с номером 4, который хранится в первом индексе нашего массива.
[31:35.000 --> 32:03.000]  Так, ну и никто не мешает, например, родительскому процессу, после запуска, либо до запуска, неважно когда, сделать какую-нибудь гадость, например, написать вот такую штуку.
[32:03.000 --> 32:08.000]  Куда? Ну, в тот же самый файлодискриптор, который нам доступен.
[32:08.000 --> 32:16.000]  Записываем какой-то текст.
[32:16.000 --> 32:24.000]  Так, здесь не забываем про он минус один, за счет того, что у нас есть нулевой завершающий символ.
[32:24.000 --> 32:31.000]  Так, вот что здесь у нас произойдет теперь?
[32:31.000 --> 32:35.000]  То есть у нас есть два процесса, родительский и дочерний.
[32:35.000 --> 32:42.000]  Дочерний запускает питон, питон что-то делает, что-то записывает, мы это подсчитываем в родительском процессе.
[32:42.000 --> 32:54.000]  Так, и у нас есть еще сам по себе родительский процесс, который мало того, что читает, дождавшись завершения дочернего процесса, но сам еще при этом что-то пишет в трубу.
[32:54.000 --> 33:21.000]  Так, ну окей, запускаем, получаем уже 33 байта, прочитано из трубы, то есть наши исходные 22 символа, плюс, ну здесь, раз, два, три, четыре, пять, шесть, семь, восемь, девять, десять, так, еще один, ну да, плюс слышен, это одиннадцать, плюс еще одиннадцать символов, ну, часто получаем 33.
[33:21.000 --> 33:27.000]  И в каком порядке у нас все это будет выводиться?
[33:27.000 --> 33:35.000]  Кто первый записал, того этапки, а почему не чередование?
[33:35.000 --> 33:41.000]  То есть у нас может быть ситуация, например, что два процесса работают примерно одинаково по скорости.
[33:41.000 --> 33:49.000]  Так, первый из них пишет слово I am parent.
[33:49.000 --> 33:53.000]  I am probability.
[33:53.000 --> 34:06.000]  Дальше, в какой-то момент времени с опозданием у нас запускается что-то, что пишет hell low.
[34:06.000 --> 34:11.000]  Так, здесь некоторый у нас люфт по времени.
[34:11.000 --> 34:34.000]  И вообще говоря, в общем случае можно было бы наблюдать такую ситуацию, что сначала запишется часть того, что успелось записаться, I am, а дальше рандомным образом, что-то h, пробел, p, e, a, l, ну и так далее.
[34:34.000 --> 34:40.000]  На самом деле такая ситуация, она в чем-то верна, но не совсем.
[34:40.000 --> 34:55.000]  А именно, разные процессы, которые могут писать в трубу, делают еще некоторые фрагментарные деления атомарные.
[34:55.000 --> 35:09.000]  То есть данные в трубе у нас идут некоторыми блоками, и размер одного блока гарантируется, что должен быть для любой UNIX системы не менее чем 512 байт.
[35:09.000 --> 35:19.000]  Вот для этих 512 байт в одном блоке, то есть на одну операцию write, гарантируется, что эти блоки идут последовательно и не перемешиваются друг с другом.
[35:19.000 --> 35:27.000]  То есть у нас будет отдельно строчка I am parent и отдельно вывод нашей программы, потому что у них вывод очень малый.
[35:27.000 --> 35:39.000]  Для любой UNIX системы гарантируется, что не менее чем 512, в линуксе это число, не только в линуксе, но и в большинстве современных систем 4096.
[35:39.000 --> 35:53.000]  Поэтому если вы, например, запускаете программу со стандартным потоком ввода, стандартным потоком вывода, обычно у вас и стандартный поток ввода, и стандартный поток вывода идут в один и тот же терминал.
[35:53.000 --> 35:58.000]  Но при этом вы же обычно не наблюдали ситуации, когда у вас что-то по букве насмешивается.
[35:58.000 --> 36:04.000]  У вас обычно есть какие-то читабельные куски текста и стандартного потока ошибок, и стандартного потока вывода.
[36:04.000 --> 36:10.000]  Это достигается тем, что у нас данные передаются блоками по 4096 байтов.
[36:10.000 --> 36:29.000]  Можем в этом даже убедиться, а именно вывести не только количество символов, мы, например, само содержимое буфера, которое у нас тут записалось.
[36:30.000 --> 36:39.000]  Так, ну вот, просчитано 33 байта. I am parent, затем идет Hello, Hello, World, World.
[36:39.000 --> 36:43.000]  Так, теперь про...
[36:43.000 --> 36:49.000]  А если мы сделаем read, то вы совсем же не пакшнупнули что-то?
[36:49.000 --> 36:59.000]  В этом случае действует стандартное правило для read, что если у вас данных нету, то read просто ждет, пока появится хотя бы один байт.
[36:59.000 --> 37:05.000]  Так, то есть на самом деле здесь...
[37:05.000 --> 37:18.000]  Да, вот, хороший вопрос. Давайте посмотрим, чтобы если мы read вернем обратно, где он стоял, то есть до weightpida,
[37:18.000 --> 37:25.000]  что мы здесь ожидаем увидеть?
[37:25.000 --> 37:29.000]  На самом деле я тоже сейчас не знаю, мне это интересно.
[37:29.000 --> 37:32.000]  Да, здесь мы прочитали только один кусочек.
[37:32.000 --> 37:35.000]  Почему мы прочитали только один кусочек?
[37:35.000 --> 37:44.000]  Потому что мы здесь записали уже что-то в канал, поэтому read имеет право что-то прочитать и уже это выдать.
[37:44.000 --> 37:50.000]  Даже несмотря на то, что потом появится еще какая-то порция данных, которая запишет дочерний процесс.
[37:50.000 --> 37:54.000]  Поэтому чтение с каналом правильно как делать?
[37:54.000 --> 38:08.000]  Нет, не после завершения всего. У вас есть некоторый каунт, ну и пока этот каунт у нас...
[38:08.000 --> 38:16.000]  Так, это относится к buffer, это к read, пока это значение у нас больше...
[38:16.000 --> 38:23.000]  Нет, не это, вот это. Больше чем ноль.
[38:23.000 --> 38:27.000]  Так, проверяем баланс скобок, что-то мне расстановку не нравится.
[38:27.000 --> 38:43.000]  Так, пока у нас все успешно читается, мы читаем какие-то независимые друг от друга кусочки и их выводим,
[38:43.000 --> 38:46.000]  для того чтобы не потерять никакие данные.
[38:46.000 --> 38:51.000]  То же самое относится к любому большому выводу, не только при выводе из канала, но также при работе с файлами,
[38:51.000 --> 38:57.000]  потому что у вас в любом случае файлы могут быть по размеру больше, чем размер буфера, который вы передаете.
[38:57.000 --> 39:01.000]  Так, вот сейчас компилируем, запускаем.
[39:01.000 --> 39:05.000]  Так, прочитали I'm Parent, прочитали Hello.
[39:05.000 --> 39:10.000]  Так, и вот здесь мы словили интересную штуку.
[39:10.000 --> 39:17.000]  Что происходит?
[39:17.000 --> 39:20.000]  Программа у меня почему-то не завершилась.
[39:20.000 --> 39:28.000]  Хотя вроде как мы прочитали I'm Parent, затем прочитали 22 байта Hello World и Hello World.
[39:28.000 --> 39:35.000]  Да, потому что здесь у нас read ждет, пока у нас что-то не будет записано с противоположной стороны.
[39:35.000 --> 39:38.000]  Так, теперь вопрос.
[39:38.000 --> 39:42.000]  Точнее, маленький вопрос с подвохом.
[39:42.000 --> 39:50.000]  Я, если я уберу этот самый write...
[39:50.000 --> 39:52.000]  А нет, все равно.
[39:52.000 --> 39:54.000]  Так, ладно, что у нас тут случилось?
[39:54.000 --> 40:01.000]  Почему у нас...
[40:01.000 --> 40:15.000]  У нас происходит ситуация, что read честно ждет, пока какие-то данные не будут записаны в наш канал.
[40:15.000 --> 40:19.000]  Так, а почему он ждет?
[40:19.000 --> 40:22.000]  Ну, потому что, наверное, что-то у нас не закрыто.
[40:22.000 --> 40:25.000]  Хорошо, давайте посмотрим, я наоборот, на нашу программу.
[40:25.000 --> 40:27.000]  Что у нас делает Python?
[40:27.000 --> 40:29.000]  Что у нас делает дочерний процесс?
[40:29.000 --> 40:32.000]  Дочерний процесс честно запускает Python.
[40:32.000 --> 40:35.000]  И этот Python что-то там сам уже делает.
[40:35.000 --> 40:44.000]  Ну, хорошо, давайте я модифицирую нашу программу на Python, чтобы гарантированно сделать...
[40:44.000 --> 40:51.000]  Так, только не close, там sys, stdin, stout, close.
[40:51.000 --> 40:52.000]  Все, вот.
[40:52.000 --> 40:58.000]  А когда мы будем скрывать наш канал, наш filter, который мы будем делать?
[40:58.000 --> 41:00.000]  Да, на самом деле, хороший вопрос.
[41:00.000 --> 41:03.000]  Вот эта штука поможет вообще или не поможет?
[41:06.000 --> 41:10.000]  На самом деле, здесь, когда у вас процесс завершается, что происходит с процессом?
[41:10.000 --> 41:13.000]  Если он действительно честно завершился.
[41:13.000 --> 41:16.000]  Закрываются все его файловые дескрипторы.
[41:16.000 --> 41:19.000]  То есть, на самом деле, как только у вас программа на Python не закончилась,
[41:19.000 --> 41:21.000]  у вас завершается работа интерпретатора Python,
[41:21.000 --> 41:23.000]  процесс тоже завершается,
[41:23.000 --> 41:28.000]  и гарантированно освобождаются все открытые файловые дескрипторы.
[41:28.000 --> 41:33.000]  Поэтому то, что я сейчас в Python там дописал, маленький фрагмент,
[41:33.000 --> 41:39.000]  чтобы принудительно закрыть stdout, не помогает.
[41:39.000 --> 41:43.000]  Давайте внимательно теперь посмотрим нашу программу.
[41:47.000 --> 41:52.000]  Максимизируем так, чтобы текст влезал, хотя это не очень получается.
[41:53.000 --> 41:57.000]  И посмотрим на жизненный цикл наших файловых дескрипторов.
[42:00.000 --> 42:02.000]  Есть ли тут тряпка?
[42:04.000 --> 42:07.000]  Если нет, тогда придется, видимо, рисовать на другой части доски.
[42:07.000 --> 42:09.000]  Надеюсь, нам этого хватит.
[42:10.000 --> 42:13.000]  Ну ладно, я думаю, нам последнего кусочка доски должно хватить.
[42:13.000 --> 42:15.000]  Итак, у нас есть
[42:15.000 --> 42:23.000]  некоторые таблица файловых дескрипторов, связанные с какими-то процессами.
[42:23.000 --> 42:30.000]  Давайте посмотрим с самого начала нашей программы, то есть запуска нашей функции Main.
[42:30.000 --> 42:36.000]  Что у нас есть? У нас есть файлы дескриптора с номерами 0, 1 и 2.
[42:36.000 --> 42:48.000]  Дальше мы создаем трубу к нашим главным родительском процессе.
[42:48.000 --> 42:51.000]  И у нас появляется файл дескриптора с номерами 3 и 4.
[42:51.000 --> 42:56.000]  При этом файл дескриптора с номером 3 – это вот здесь.
[42:56.000 --> 43:03.000]  Файл дескриптора с номером 4 – он вот здесь.
[43:04.000 --> 43:13.000]  Дальше. После этого мы вызываем системный вызов FORG.
[43:13.000 --> 43:16.000]  Вот здесь происходит очень что-то интересное.
[43:16.000 --> 43:26.000]  У нас создается копия нашего процесса, в котором наследуются все наши файловые дескрипторы.
[43:26.000 --> 43:34.000]  То есть у нас есть файлы дескриптора с номерами 0, 1, 2, 3 и 4 точно такие же, как у родительского процесса.
[43:34.000 --> 43:40.000]  Пока еще 0 указывает на терминал, 1 тоже указывает на терминал.
[43:40.000 --> 43:44.000]  Ну хорошо, теперь посмотрим, что у нас происходит с дочерним процессом.
[43:44.000 --> 43:52.000]  В дочернем процессе мы открываем еще один файловый дескриптор уже с номером 5.
[43:52.000 --> 43:55.000]  Это наш файл input.txt.
[43:55.000 --> 43:58.000]  Дальше происходит некоторая магия.
[43:58.000 --> 44:03.000]  Мы создаем дубликат файлового дескриптора.
[44:03.000 --> 44:11.000]  И то, что у нас было на файл input.txt, теперь оказывается в двух файлах дескриптора.
[44:11.000 --> 44:14.000]  0 и 5 у нас являются одинаковыми.
[44:14.000 --> 44:19.000]  Но при этом у нас открыты сразу же несколько файловых дескрипторов.
[44:19.000 --> 44:28.000]  После этого мы делаем дублирование файлового дескриптора с номером 4, куда можно что-то записывать.
[44:28.000 --> 44:34.000]  И назначаем его на файловый дескриптор с номером 1.
[44:34.000 --> 44:38.000]  То, что будет для ввода, я буду таким минусиком обозначать.
[44:38.000 --> 44:44.000]  Еще одна копия. Давайте это будет символ плюсик.
[44:45.000 --> 44:50.000]  И вот что у нас в данный момент происходит.
[44:50.000 --> 44:55.000]  У нас есть труба. На нее ссылается файловый дескриптор с номером 4.
[44:55.000 --> 45:05.000]  Потом еще на нее ссылается файловый дескриптор с номером 1 у дочернего.
[45:05.000 --> 45:09.000]  То есть уже два файловых дескриптора.
[45:09.000 --> 45:12.000]  Могут писать в одну и ту же трубу.
[45:12.000 --> 45:16.000]  После этого там запускается Python.
[45:16.000 --> 45:21.000]  Python у нас что-то делает, как-то отрабатывает.
[45:21.000 --> 45:26.000]  Что происходит после того, как у нас процесс с Python честно завершается.
[45:26.000 --> 45:32.000]  Либо если мы не смогли запустить Python, мы в любом случае гарантированно доходим до системного вызова exit с номером 1.
[45:32.000 --> 45:40.000]  После того, как Python у нас завершился, у нас грохаются все вот эти файловые дескрипторы.
[45:40.000 --> 45:51.000]  То есть у нас все, что связано с трубой, это исчезает файловый дескриптор с номером 1, который связан с child.
[45:51.000 --> 45:57.000]  Теперь смотрим, что у нас происходит с родительским процессом.
[45:57.000 --> 46:00.000]  Родительский процесс никак не создает новые файловые дескрипторы.
[46:00.000 --> 46:03.000]  Он просто читает что-то из трубы.
[46:03.000 --> 46:07.000]  И система вызовRead ждет пока одно из двух событий.
[46:07.000 --> 46:14.000]  Либо пока мы что-то запишем в трубу, либо пока труба не будет полностью закрыта.
[46:14.000 --> 46:17.000]  А почему она не закрыта полностью?
[46:17.000 --> 46:24.000]  Потому что есть еще файловый дескриптор с номером 4, который относится к нашему родительскому процессу.
[46:24.000 --> 46:27.000]  И он указывает на тот же самый трубу.
[46:27.000 --> 46:32.000]  Поэтому мы получаем ситуацию Python deadlock или взаимная блокировка.
[46:32.000 --> 46:36.000]  То есть мы не можем в принципе теперь продолжить наше выполнение.
[46:36.000 --> 46:41.000]  В том числе мы не можем что-то уже записать, поскольку мы что-то читаем.
[46:41.000 --> 46:48.000]  То есть максимум, что это может сделать, это только запустить еще один либо процесс, либо поток, который что-то запишет и после Read у нас выполнение продолжится.
[46:48.000 --> 46:51.000]  Так, как нашу программу исправить?
[46:54.000 --> 46:56.000]  Нужно четверку закрыть.
[46:56.000 --> 46:58.000]  Вопрос когда?
[46:59.000 --> 47:01.000]  Перед вайлом.
[47:01.000 --> 47:04.000]  На самом деле, чем раньше, тем лучше.
[47:05.000 --> 47:07.000]  Экономим файловые дескрипторы.
[47:07.000 --> 47:22.000]  То есть если мы после раздвоения процесса на два сразу позакрываем все, что нам не нужно, то жизнь у нас упростится.
[47:22.000 --> 47:26.000]  Так, ну давайте в самом начале жизненного цикла.
[47:26.000 --> 47:30.000]  У родительского процесса какие файлы дескрипторы нам сейчас не нужны?
[47:30.000 --> 47:33.000]  Очевидно, нам не нужен файл дескриптор с номером 4.
[47:33.000 --> 47:37.000]  Потому что он предназначен только для записи, если мы не хотим ничего писать.
[47:37.000 --> 47:48.000]  Либо если мы хотим писать, то сразу после записи, давайте вот здесь я оставлю.
[47:48.000 --> 47:59.000]  А сразу как только нам файл дескриптор с того не нужен, мы закрываем его у нашего родительского процесса.
[47:59.000 --> 48:02.000]  Все, мы его закрыли и уже не используем.
[48:02.000 --> 48:06.000]  Файл дескриптор с номером 3 нам нужен или не нужен?
[48:06.000 --> 48:08.000]  Родительскому процессу.
[48:08.000 --> 48:11.000]  Да, вот родительскому процессу он как раз нужен.
[48:14.000 --> 48:16.000]  Ладно, посмотрим теперь на дочерний процесс.
[48:16.000 --> 48:19.000]  А есть ли у нас там лишние какие-то файловые дескрипторы?
[48:22.000 --> 48:24.000]  Так, какие?
[48:24.000 --> 48:30.000]  В дочернем процессе.
[48:30.000 --> 48:32.000]  Давайте разберемся с пятеркой.
[48:32.000 --> 48:41.000]  Пятерка у нас появилась в тот момент, когда мы открыли файл с определенным названием.
[48:41.000 --> 48:43.000]  Используя темно-юзов open.
[48:43.000 --> 48:45.000]  И в какой момент мы эту пятерку можем закрыть?
[48:46.000 --> 48:55.000]  После того как мы сделали переназначение, то есть здесь уже честно мы после переназначения можем этот файл дескриптор закрыть.
[48:55.000 --> 48:58.000]  И тем самым сэкономить драгоценный ресурс.
[49:01.000 --> 49:04.000]  И файл дескриптор с номером 3.
[49:04.000 --> 49:06.000]  В какой момент он у нас получается?
[49:06.000 --> 49:09.000]  Он у нас получается при создании канала.
[49:09.000 --> 49:23.000]  И после форка мы уже знаем, что если мы не будем ничего читать из этого файла дескриптора, то прямо сразу после форка для дочернего процесса мы здесь тоже можем его моментально закрыть.
[49:23.000 --> 49:26.000]  Только не явным образом лучше число писать.
[49:29.000 --> 49:31.000]  Нужен нам элемент массив.
[49:32.000 --> 49:37.000]  Так, ладно, мы и позакрывали все, что нам мешает и что нам не нужно.
[49:37.000 --> 49:40.000]  Перекомпилируем, запускаем.
[49:40.000 --> 49:46.000]  Ну вот честно получаем работающее решение программы, которое у нас не будет зависать.
[49:46.000 --> 49:50.000]  То есть на самом деле закрытие файловых дескрипторов, почему оно важно?
[49:50.000 --> 50:00.000]  Оно важно не только для того, чтобы экономить файловые дескрипторы, но и для того, чтобы избегать возможной ситуации с дедлоком.
[50:00.000 --> 50:02.000]  Это нужно делать очень аккуратно.
[50:02.000 --> 50:08.000]  Так, ладно, допустим вы поняли историю о том, что нужно все всегда закрывать.
[50:10.000 --> 50:14.000]  Давайте мы на всякий случай позакрываем все лишнее.
[50:18.000 --> 50:24.000]  У нас есть родительский процесс, который что-то читает.
[50:24.000 --> 50:27.000]  И есть дочерний процесс.
[50:28.000 --> 50:35.000]  Например, мы хотим что-то записать предварительно до запуска питона.
[50:37.000 --> 50:40.000]  Сделаем некоторую копию.
[50:44.000 --> 50:51.000]  Какое-то сообщение, скажем, что я уже не парент, я уже child и пишу какой-то текст.
[50:51.000 --> 50:56.000]  Так, записываем это все в канал с номером 1.
[50:56.000 --> 51:02.000]  Так, кстати, запись в канал с номером 1. Здесь у нас опять же лишний файловый дескриптор с номером 4.
[51:04.000 --> 51:09.000]  Мы его должны закрыть когда? Ну вот после того, как сделали DAP2.
[51:11.000 --> 51:16.000]  Так, все. И писать соответственно уже файловый дескриптор с номером 1.
[51:17.000 --> 51:24.000]  ДАП3 он не может автоматически закрывать старые дескрипторы?
[51:24.000 --> 51:28.000]  ДАП2 автоматически закрывает. Он для этого предназначен.
[51:29.000 --> 51:35.000]  Насчет DAP3 не знаю, он вообще не стандартный. То есть это линук специфичная штука.
[51:35.000 --> 51:40.000]  Так, ладно. Проверяем, что мы ничего не сломали.
[51:40.000 --> 51:45.000]  Так, вот. Да, записываем I'm a parent, дальше I'm a child и Hello World, Hello World.
[51:45.000 --> 51:50.000]  Два разных врайта. Размер не превышающий размер блока.
[51:50.000 --> 51:55.000]  Так. И сделаем выход.
[51:55.000 --> 52:00.000]  И теперь я сделаю еще какую-нибудь гадость.
[52:00.000 --> 52:06.000]  А именно, до этого врайта я на всякий случай
[52:06.000 --> 52:11.000]  чтобы максимально экономить ресурсы, я просто закрываю файл дескриптор с номером 1.
[52:11.000 --> 52:16.000]  Так. Компилируем.
[52:16.000 --> 52:21.000]  Запускаем. Так, что мы получаем?
[52:21.000 --> 52:25.000]  Получаем бабах.
[52:25.000 --> 52:30.000]  Так, ну здесь бабах получили в питоне. Ладно.
[52:30.000 --> 52:35.000]  Чтобы показать, что это делать неправильно.
[52:35.000 --> 52:40.000]  Так. Вот мы честно записали I'm a parent.
[52:40.000 --> 52:45.000]  Окей. Теперь давайте еще запишем.
[52:45.000 --> 52:50.000]  Так, вот у нас есть врайт. Давайте сделаем close channel 1
[52:50.000 --> 52:55.000]  нашего парента.
[52:55.000 --> 53:00.000]  Так. Питон у нас грохнулся.
[53:00.000 --> 53:05.000]  Родинский процесс у нас не грохнулся, но в некоторых системах
[53:05.000 --> 53:10.000]  это может приводить к ошибке, которая вас просто прибьет.
[53:10.000 --> 53:15.000]  Называется ошибка broken pipe.
[53:15.000 --> 53:20.000]  В питоне, да, мы пытались закрыть, не выключить.
[53:20.000 --> 53:25.000]  Почему объект non-type, кстати, у питона?
[53:25.000 --> 53:30.000]  Потому что файлов дескриптора у нас нет, связан с стандартным потоком.
[53:30.000 --> 53:35.000]  То есть на самом деле закрывать все на всякий случай это тоже плохая идея.
[53:35.000 --> 53:40.000]  Так, ну и последняя вещь, на которую здесь нужно обратить внимание.
[53:40.000 --> 53:45.000]  Давайте я верну теперь нашу испорченную
[53:45.000 --> 53:50.000]  программу, то есть закрывать файлы дескриптора до записи.
[53:50.000 --> 53:55.000]  Это плохая идея. Так, а что-то еще в моей программе
[53:55.000 --> 54:00.000]  есть нехорошего.
[54:00.000 --> 54:05.000]  Что такого нехорошего есть в нашей программе?
[54:05.000 --> 54:10.000]  Для того, чтобы это понять, давайте мы дождемся процесс и опять поставлю
[54:10.000 --> 54:15.000]  какой-нибудь сон на две минуты.
[54:15.000 --> 54:20.000]  И немножко поисследуем наш процесс.
[54:20.000 --> 54:25.000]  Так, компилируем, запускаем.
[54:25.000 --> 54:30.000]  Вот мы сделали все, что захотели.
[54:30.000 --> 54:35.000]  Сейчас мы просто спим на 51-й строке.
[54:35.000 --> 54:40.000]  Тем временем где-нибудь в отдельной вкладке я хочу посмотреть,
[54:40.000 --> 54:45.000]  что у нас происходит с процессами.
[54:45.000 --> 54:50.000]  Почему у меня только один процесс лаунч?
[54:50.000 --> 54:55.000]  Казалось бы, мы сделали форк.
[54:55.000 --> 55:00.000]  Сколько у нас должно быть процессов?
[55:00.000 --> 55:05.000]  Один слеп здесь все честно.
[55:05.000 --> 55:10.000]  В этой программе все как раз нормально.
[55:10.000 --> 55:15.000]  Походит пример.
[55:15.000 --> 55:20.000]  Я сделал вот так.
[55:20.000 --> 55:25.000]  Беру вот этот white pit.
[55:25.000 --> 55:30.000]  Мы все вывели и немножко модифицирую программу на питоне.
[55:41.000 --> 55:46.000]  Сейчас у меня будет дочерний процесс долго делать.
[55:46.000 --> 55:51.000]  И посмотрим на HPS.
[55:55.000 --> 56:00.000]  Наш процесс лаунч
[56:00.000 --> 56:05.000]  все-таки запущен.
[56:05.000 --> 56:10.000]  А, он ждет на риде.
[56:10.000 --> 56:15.000]  И просто висит.
[56:15.000 --> 56:20.000]  Тяжело это сымитировать.
[56:20.000 --> 56:25.000]  Сис, std, out, close.
[56:25.000 --> 56:30.000]  Бропкин байк поймали где-то.
[56:30.000 --> 56:35.000]  Последний запуск.
[56:35.000 --> 56:40.000]  Запускаем программу,
[56:40.000 --> 56:45.000]  которая закрыла стандарт с боток вывода.
[56:45.000 --> 56:50.000]  Лаунч все-таки болтается.
[56:50.000 --> 56:55.000]  Давайте посмотрим где.
[56:55.000 --> 57:00.000]  Все-таки не удалось меня привести к плохой ситуации.
[57:00.000 --> 57:05.000]  Тем не менее, чем эта ситуация плоха в данной программе?
[57:05.000 --> 57:10.000]  Вот этот white pit на что влияет?
[57:10.000 --> 57:14.000]  Если программа не висела на риде.
[57:14.000 --> 57:19.000]  Если два независимых процесса запустить, тогда это будет лучше проявляться.
[57:19.000 --> 57:24.000]  Зачем нам нужно ждать, пока завершится дочерний процесс,
[57:24.000 --> 57:29.000]  а не завершать родительский процесс раньше?
[57:29.000 --> 57:34.000]  Что делает white pit?
[57:34.000 --> 57:39.000]  Для чего им нужен статус?
[57:39.000 --> 57:44.000]  Чтобы получить то, что вернул ребенок, некоторый exit статус.
[57:44.000 --> 57:49.000]  А если мы не прочитаем exit статус, то что у нас происходит с процессом?
[57:49.000 --> 57:54.000]  Он станет зомби.
[57:54.000 --> 57:59.000]  Современные системы UNIX-подобные
[57:59.000 --> 58:04.000]  переназначают все зомби на процесс
[58:04.000 --> 58:09.000]  Дальше процесс обязан аккуратно прочитать код возврата
[58:09.000 --> 58:14.000]  и выкинуть его никуда, чтобы процессы не оставались в зомби.
[58:14.000 --> 58:19.000]  Про пайпы.
[58:19.000 --> 58:24.000]  Все понятно, что это такое, как они работают.
[58:24.000 --> 58:29.000]  С даб 2 понятно, что такое создание копии файлового дискриптора?
[58:29.000 --> 58:34.000]  Я остановлю запись.
