[00:00.000 --> 00:13.880]  значит поехали да ну да у нас теперь все еще будут деревья но другие вот какие у нас
[00:13.880 --> 00:23.520]  деревья сегодня будут но начнем мы сегодня с б-дива вот потому что да если ну как вы
[00:23.520 --> 00:28.080]  дадете этого это может быть одна из таких из так полезных на практике структур данных ну мало ли
[00:28.160 --> 00:32.160]  иногда там редакция там иногда кто-то берет и спрашивает а вот мы тут обсуждаем какие-то
[00:32.160 --> 00:37.080]  алгоритмы а зачем они вообще нужны ну кроме того чтобы какой-то лажа в каких-то там хозяина
[00:37.080 --> 00:45.120]  там олимпиадок загонять да вот вот оказывается что но сегодня мы изучим дерево которое на
[00:45.120 --> 00:52.160]  практике надо просто настолько надо что оно зашито в основе просто все там всех бас данных вот
[00:52.240 --> 00:57.800]  чем идея но идея в том что зачем нужно вообще деревья поиска они нужны там что какие-то
[00:57.800 --> 01:06.120]  данные как-то хранить и как-то быстро какие-то данные соответствующие чему-то искать вот
[01:06.120 --> 01:14.920]  теперь выскажите вопрос а что делать если данных много что такое много но много настолько что они
[01:14.920 --> 01:24.760]  не влезают в оперативную память вот то есть да дорогие олимпиадники такое бывает соответственно
[01:24.760 --> 01:30.400]  то есть это действительно данные там приходится как-то там хранить где-то там на какой-то там
[01:30.400 --> 01:35.640]  ну как минимум жестком диске как максимум еще и там действительно в определенном кластере и
[01:35.640 --> 01:43.400]  как-то но как-то тем не менее данные надо все-таки добавлять удалять и с ними как-то работать ну к
[01:43.860 --> 01:52.320]  приводит Kennedy�� к тому что мы понимаем что мы не доступа к всему дерево одновременно вот кто
[01:52.320 --> 01:59.840]  у нас он т.е. у нас есть возможность хранить там в оперативной памяти только у л matlike вершин
[01:59.840 --> 02:08.640]  ну но с другой стороны мы помним до что то есть комиссияmä храни в памяти только один в тешин
[02:08.640 --> 02:14.400]  значит мы должны откуда-то загружать. То есть мы должны откуда-то загружать и наоборот, куда-то
[02:14.400 --> 02:23.440]  загружать. Вот откуда ты их доставать и куда-то класть. Вот, но мы помним, как минимум по жесткому
[02:23.440 --> 02:29.720]  диску. Оказывается, что скорее всего, если уж вы озаботились тем, что надо что-то жесткого
[02:29.720 --> 02:35.320]  диска доставать, то выясняется, что, на самом деле доставать один байт, это не очень выгодно. То
[02:35.320 --> 02:39.240]  То есть выгодно все-таки памяти побольше, там, за один сеанс, все-таки сразу достать.
[02:40.440 --> 02:40.940]  Вот.
[02:42.800 --> 02:47.800]  Ну вот, исходя из этих соображений, возникает B дерево.
[02:50.360 --> 02:55.080]  Да, сразу скажу, не знаю, почему B, как бы и куда делось дерево, а я не знаю, ну вот.
[02:56.160 --> 02:58.920]  Нет, где-то оно, скорее всего, было там рядом, да.
[03:01.480 --> 03:02.600]  Бубен, ну...
[03:05.400 --> 03:05.900]  А упало.
[03:06.600 --> 03:07.100]  Ага.
[03:07.840 --> 03:08.340]  А.
[03:08.600 --> 03:11.040]  А B продолжает работать, да, ну нормально, да.
[03:12.920 --> 03:18.200]  Да, да, да. Да, если бы, да, я бы в это еще и поверил, если бы это еще и русские создавали, да.
[03:19.240 --> 03:23.040]  Но там, насколько я помню, авторы совсем не русские, впрочем, гарантировать не могу.
[03:23.800 --> 03:31.480]  В общем, когда, знаете, когда выясняется, что основным там создателем, там просто, как всех концепциях стояли, является человек с именем Александр Степанов.
[03:33.160 --> 03:34.840]  Нет, вот, реально, это чистая правда.
[03:35.960 --> 03:39.560]  Да, но то, как помню, что да, русские могут быть там везде, на самом деле.
[03:40.360 --> 03:41.240]  Вот, но тем не менее.
[03:42.040 --> 03:43.160]  Значит, в чем у нас идея?
[03:43.960 --> 03:48.560]  Значит, идея в том, что да, B дерево это не двоичное дерево поиска.
[03:50.880 --> 03:56.040]  Вот, почему не двоичное дерево поиска? В первую очередь, да и в последнюю тоже, потому что оно не двоичное.
[03:56.040 --> 04:11.840]  Значит, мы тут действительно начинаем думать, что ладно, но, то есть действительно, в чем у нас идея, да, то есть идея двоичного дерева поиска в том, что у нас есть данные и каждая вершина их как бы делит, ну, что-то типа на пополам, ну или как минимум на две части, да.
[04:12.640 --> 04:23.960]  То есть вот у меня есть, обычно говорили, что у нас есть какая-то вершина, там X в левом, у нее есть левое под деревом, в котором есть все элементы меньше X, в правом под дереве все элементы, которые больше X.
[04:25.160 --> 04:25.720]  Что же, но?
[04:26.960 --> 04:32.760]  Вот, но мы говорим, это мало, тоже говорим, а кто сказал, что ветвицу нужно обязательно на две части?
[04:34.040 --> 04:34.920]  А давайте, а?
[04:39.160 --> 04:45.800]  Вот, а вот, а мы определим, потому что, смотрите, какая у нас гениальная идея возникает.
[04:46.880 --> 04:52.800]  Значит, мы неожиданно себе заявляем, что у нас может быть несколько ключей.
[04:53.800 --> 05:20.280]  Ну, например, ну, конкретно в этой вершине K, и мы заявляем, что, да, у нас есть ключи, они отсортированы, и более того, вот, и тогда у этой, говорим, что у этого дерева будет K плюс один под деревьем, и не просто под деревьем, вот в первом под деревьем будут элементы меньше X1.
[05:21.280 --> 05:28.600]  Во втором под дереве, вот ссылочка тут типа между X1 и X2, будут элементы, у которых значение между X1 и X2.
[05:31.440 --> 05:38.680]  Вот так, что у нас тут получается? Тут элементы будут между там X2 и X3, ну и так далее.
[05:40.680 --> 05:44.520]  Вот, ну и в самом конце тут будут все элементы от XK. Так что вот, пожалуйста.
[05:44.520 --> 05:57.960]  То есть, в общем-то такая вот оригинальная модификация, это требование того, чтобы дерево было деревом поиска.
[05:59.960 --> 06:01.360]  То есть вот такая вот красивая идея.
[06:03.360 --> 06:10.640]  То есть более того, мы даже откажемся от требования, чтобы в каждой вершине было одинаковое количество ключей.
[06:10.760 --> 06:15.760]  То есть вот это вот K константой являться не будет.
[06:17.760 --> 06:23.760]  То есть там в каждой вершине у нас будет вполне вероятно, что у нас будут разные, разные количество ключиков,
[06:23.760 --> 06:32.760]  но более того, то есть более того, у каждой вершины количество ключиков может в процессе меняться, как мы это увидим.
[06:32.880 --> 06:44.880]  Вот, это вот такие первые идеи, но теперь пришло время написать более точное определение.
[06:45.880 --> 06:48.880]  Значит, что же у нас такое B дерево?
[06:49.880 --> 06:57.880]  Итак, значит B дерево, ну это у нас подвешенное дерево вот такого вида, вот такого вида,
[06:58.000 --> 07:03.000]  где вводится константа T.
[07:07.000 --> 07:10.000]  Ну тут вот можно сказать шаблонная константа T, интовая.
[07:15.000 --> 07:21.000]  Про которую известно только, что T больше одного.
[07:28.000 --> 07:40.000]  И известно, что в дереве, вот так создано дереве, соответственно, соблюдаются следующие инвериенты.
[07:41.000 --> 07:46.000]  Ну нам нужна какая-то гарантия на балансировку, поэтому соблюдается следующие варианты.
[07:46.120 --> 08:08.120]  Значит, для любой вершины V оказывается, что количество ключиков вот этих вот в вершине не превосходит внезапно 2T-1.
[08:09.120 --> 08:11.120]  Вот такая вот константочка.
[08:16.120 --> 08:28.120]  Ну, казалось бы, пока двоичное дерево поиска удовлетворяет этому требованию для любого T.
[08:29.120 --> 08:37.120]  Но для того, чтобы у нас все-таки вершины были пожирнее, мы добавляем ограничение снизу.
[08:37.240 --> 08:47.240]  То есть для любого V неравного руту, верно, что K от V больше либо равно, чем T-1.
[08:47.360 --> 08:49.360]  Вот.
[09:00.360 --> 09:06.360]  Да, то есть вы видите, внимание, все-таки в корне у нас, на самом деле, ключиков может быть и меньше, чем T-1.
[09:13.360 --> 09:15.360]  Нет, почему?
[09:17.360 --> 09:26.360]  Ну, тут вопрос, как бы считать это детьми, то есть мы считаем количество ключей, а не количество детей.
[09:27.360 --> 09:28.360]  И с детьми вопрос.
[09:29.360 --> 09:33.360]  Но на самом деле это действительно, кстати, вопрос, а когда вообще дети существуют, а когда нет.
[09:34.360 --> 09:36.360]  Вот это всегда балансировка, что там у нас.
[09:37.360 --> 09:43.360]  Да, забавно, что было в вершине 57 ключей, но существует из них только первый, второй, третий.
[09:43.480 --> 09:48.480]  Там дети существуют только первый, второй, третий и двадцать седьмой.
[09:49.480 --> 09:51.480]  Да, почему двадцать седьмой, ну а какой еще?
[09:52.480 --> 09:54.480]  Действительно.
[09:56.480 --> 09:58.480]  Соответственно.
[09:59.480 --> 10:01.480]  Но у нас все будет неожиданно надежно.
[10:04.480 --> 10:08.480]  Ну, я напишу так, нарисую на уровне D.
[10:08.600 --> 10:10.600]  То есть, во-первых, у каждой вершины...
[10:14.600 --> 10:16.600]  У каждой вершины...
[10:16.600 --> 10:18.600]  А, ну что это писать, у каждой вершины?
[10:18.600 --> 10:20.600]  Для любой вершины V.
[10:22.600 --> 10:36.600]  У вершины V либо K от V плюс один детей, либо ноль детей.
[10:38.600 --> 10:50.600]  То есть, либо все дети существуют, либо не существует ни одного.
[10:55.600 --> 10:58.600]  Но, конечно, балансировку это вам не обещает.
[10:58.600 --> 11:01.600]  Потому что даже если все дети существуют, то непонятно.
[11:01.600 --> 11:06.600]  Вполне вероятно, что у каких-то дети листы, а у каких-то высоких под деревья.
[11:06.720 --> 11:10.720]  Справиться с этим нам помогает заключительное условие,
[11:12.720 --> 11:24.720]  которое нам говорит, что все листы находятся на одинаковой глубине.
[11:36.720 --> 11:46.720]  Да, вот совершенно внезапно оказывается, что конкретно в таких деревьях мы можем такое потребовать.
[11:46.720 --> 11:50.720]  Хотя в OVL мы уже думали на эту тему и понимали, что это физически невозможно.
[11:52.720 --> 11:56.720]  Поэтому немножко расшнуровывать штурки приходилось,
[11:56.720 --> 12:02.720]  в том плане, что у соседних под деревья разность глубин должна быть там.
[12:02.720 --> 12:04.720]  То есть, может быть один.
[12:04.840 --> 12:06.840]  Больше не может быть, но вот один допустимая разница.
[12:11.840 --> 12:14.840]  Здесь предлагается сделать так, что листы пусть находятся на одинаковой глубине,
[12:14.840 --> 12:18.840]  но зато в каждой вершине может быть ключиков больше, чем один.
[12:18.840 --> 12:20.840]  И детей, соответственно, больше, чем два.
[12:24.840 --> 12:26.840]  И вот, оказывается, такая красота возможна.
[12:26.960 --> 12:28.960]  В общем, более того, да.
[12:28.960 --> 12:32.960]  Дальше дело вклинивается у нас, соответственно, параметр Т,
[12:32.960 --> 12:35.960]  от которого также зависит глубина.
[12:35.960 --> 12:38.960]  А вот давайте подумаем, какая глубина у такого дерева может быть?
[12:46.960 --> 12:48.960]  Так, лог по основанию Т минус один.
[12:50.960 --> 12:52.960]  По основанию К как?
[12:52.960 --> 12:54.960]  По основанию Т.
[12:56.960 --> 12:58.960]  Так, откуда же такое?
[12:58.960 --> 13:00.960]  Откуда же такое счастье?
[13:01.960 --> 13:03.960]  Так, ну, действительно, давайте думать.
[13:03.960 --> 13:07.960]  Предположим, что у дерева высота, она же глубина H.
[13:09.960 --> 13:12.960]  Тогда давайте думать, сколько у нее вершин.
[13:12.960 --> 13:15.960]  Сколько у нее может быть ключей?
[13:16.960 --> 13:19.960]  Так, ну, в корне у нас, если по минимуму рисовать,
[13:19.960 --> 13:22.960]  то в корне у нас, как минимум, один ключик добудет.
[13:23.080 --> 13:29.080]  А, да, ну, давайте я тут добавлю еще какое-нибудь такое
[13:29.080 --> 13:33.080]  мини-условие, что К от рута все-таки больше либо равно один.
[13:35.080 --> 13:39.080]  Ну, чтобы не было такого, что корень – это такой один указатель несчастный.
[13:43.080 --> 13:45.080]  Значит, смотрим, тогда у нас получается количество ключей.
[13:45.080 --> 13:47.080]  Минимально это один.
[13:47.200 --> 13:53.200]  Так, и значит, на следующем уровне у нас хотя бы две вершинки.
[13:54.200 --> 13:58.200]  Эти две вершинки заявляют нам, что ключиков там,
[13:58.200 --> 14:03.200]  то есть в каждой из них хотя бы Т-1, поэтому их тут уже 2Т-1.
[14:07.200 --> 14:11.200]  Но тогда получается, если у каждой вершинки по Т-1 ключиков хотя бы,
[14:11.200 --> 14:13.200]  то у нее хотя бы по Т детей.
[14:13.320 --> 14:16.320]  И тогда получается, что на следующем уровне у нас
[14:18.320 --> 14:23.320]  ключиков получается 2Т на Т-1, ну, дальше получается 2Т2 на Т-1
[14:24.320 --> 14:25.320]  и так далее.
[14:26.320 --> 14:30.320]  Ну, и в самом конце получается, что на уровне листов у нас
[14:30.320 --> 14:35.320]  2Т в степени H-1 или сколько?
[14:38.320 --> 14:40.320]  Видимо, H-2 все-таки.
[14:40.440 --> 14:43.440]  Видимо, H-2 все-таки.
[14:44.440 --> 14:46.440]  На Т-1.
[14:49.440 --> 14:52.440]  Так, ну теперь выясняет вопрос, сколько это?
[14:58.440 --> 15:00.440]  Да, а точнее?
[15:04.440 --> 15:08.440]  Ну, давайте так, это получается 2Т-1, на самом деле,
[15:08.560 --> 15:11.560]  если уж свернуть геометрическую прогрессию,
[15:11.560 --> 15:13.560]  то получается до Т-1 на Т-1.
[15:14.560 --> 15:16.560]  Так, ну получается шлеп-шлеп,
[15:18.560 --> 15:23.560]  и получается 2Т в степени H-1 минус 1,
[15:23.560 --> 15:25.560]  ну, потому что плюс 1, минус 2.
[15:26.560 --> 15:28.560]  Так, и это как минимум.
[15:29.560 --> 15:32.560]  А всего в реальности у нас ключи обычно N.
[15:32.680 --> 15:36.680]  Ну, тогда отсюда можно вывести,
[15:37.680 --> 15:44.680]  что H получается не превосходит 1
[15:45.680 --> 15:50.680]  плюс логарифом двоичный, N плюс 1 пополам.
[15:53.680 --> 15:56.680]  Да, все еще хуже, да, 3-ичный.
[16:02.680 --> 16:05.680]  Ну, да, конечно, что Т-константа,
[16:05.680 --> 16:09.680]  значит, казалось бы, да, с точки зрения 7-точки,
[16:09.680 --> 16:13.680]  конечно, там эта константа может ни на что не влиять особо.
[16:14.680 --> 16:16.680]  Вот.
[16:16.680 --> 16:18.680]  Но тем не менее.
[16:22.680 --> 16:24.680]  Но тем не менее.
[16:24.680 --> 16:26.680]  То есть сейчас, на самом деле,
[16:26.680 --> 16:28.680]  когда мы перемещаемся в места,
[16:28.680 --> 16:31.680]  где у нас все не влезает в оперативку,
[16:31.800 --> 16:35.800]  и у нас в константу входит уже и загрузка этих вершин,
[16:35.800 --> 16:38.800]  то на самом деле эта константа может нам очень здорово,
[16:38.800 --> 16:41.800]  то есть она может показаться очень здорово принципиально.
[16:43.800 --> 16:45.800]  Ну, в принципе, действительно.
[16:45.800 --> 16:47.800]  То есть если вы там пишете код,
[16:47.800 --> 16:50.800]  который какие-то данные откуда-то из баз данных подгружает,
[16:50.800 --> 16:52.800]  то вам принципиально, на самом деле,
[16:52.800 --> 16:54.800]  вы там делаете 5 запросов в базе данных
[16:54.800 --> 16:56.800]  или 5 умножить на логариф.
[16:56.800 --> 16:58.800]  Это прям принципиально.
[16:58.800 --> 17:00.800]  Лучше там лишний лог квадрат у себя,
[17:00.920 --> 17:02.920]  у себя локально сделать,
[17:02.920 --> 17:04.920]  чем там делать лишний логариф запросов в базе данных.
[17:04.920 --> 17:06.920]  Вот на практике может так оказаться,
[17:06.920 --> 17:08.920]  поэтому там вот просто...
[17:08.920 --> 17:12.920]  Да, классическая олимпиадная логика уже работать перестает.
[17:16.920 --> 17:18.920]  Так, но тем не менее, вот получается,
[17:18.920 --> 17:20.920]  что высота дерева у нас логарифмическая,
[17:20.920 --> 17:22.920]  ну и соответственно, чем больше Т,
[17:22.920 --> 17:24.920]  тем высота у нас меньше.
[17:24.920 --> 17:26.920]  И это, конечно, хорошо.
[17:27.920 --> 17:29.920]  Но теперь остается только вот вопрос,
[17:30.040 --> 17:33.040]  как же нам с таким деревом жить?
[17:36.040 --> 17:38.040]  Вот спрашивается, как нам с ним жить?
[17:41.040 --> 17:43.040]  Ну, давайте про нот.
[17:43.040 --> 17:45.040]  Ну, самое простое, что можно делать с деревом,
[17:45.040 --> 17:47.040]  это, конечно, делать поиск.
[17:50.040 --> 17:53.040]  Вот спрашивается, как в таком дереве искать элемент?
[17:54.040 --> 17:56.040]  Ну, искать-то, в общем-то, понятно,
[17:56.040 --> 17:58.040]  как, что мы просто начинаем с корня,
[17:58.160 --> 18:00.160]  ну, по вершинам.
[18:00.160 --> 18:02.160]  Вот в каждое время у нас есть вершина,
[18:04.160 --> 18:06.160]  и мы просто с помощью...
[18:06.160 --> 18:08.160]  Можно бинпоиск, а можно, в принципе,
[18:08.160 --> 18:10.160]  из ООТ пробежаться,
[18:10.160 --> 18:12.160]  и, собственно, понять, что нам вообще надо,
[18:12.160 --> 18:14.160]  и в какое дерево нам надо спускаться,
[18:14.160 --> 18:16.160]  если вообще надо.
[18:20.160 --> 18:22.160]  Ну, типа того.
[18:22.160 --> 18:24.160]  То есть там логарифм...
[18:24.160 --> 18:26.160]  Формально симпатичка будет что-то типа логарифм
[18:26.280 --> 18:28.280]  по оставанию t умножить на t, возможно.
[18:33.280 --> 18:36.280]  Нет, ну, как сказать, в олимпиадной логике да.
[18:36.280 --> 18:38.280]  Но если мы все равно эту вершину
[18:38.280 --> 18:40.280]  загружаем,
[18:40.280 --> 18:42.280]  то есть подозрение, что там будете ли вы
[18:42.280 --> 18:44.280]  бегать за логарифм t или за t,
[18:44.280 --> 18:46.280]  на практике будет не принципиально.
[18:48.280 --> 18:50.280]  Нет, тот и прикол, что нет.
[18:50.280 --> 18:52.280]  Да.
[18:52.280 --> 18:54.280]  То есть это уже просто не та логика.
[18:54.400 --> 18:56.400]  Вот.
[18:56.400 --> 18:58.400]  Но более того, что приятно
[18:58.400 --> 19:00.400]  в этом серче,
[19:00.400 --> 19:02.400]  так это то, что мы в реальности можем
[19:02.400 --> 19:04.400]  хранить только один корень.
[19:04.400 --> 19:06.400]  Вот давайте сейчас попробуем примерно...
[19:06.400 --> 19:08.400]  Примерно даже редкий случай написать
[19:08.400 --> 19:10.400]  код, как это вообще будет работать.
[19:14.400 --> 19:16.400]  Ну, вот. Ну, во-первых, ну, давайте
[19:16.400 --> 19:18.400]  допустим, бум.
[19:18.400 --> 19:20.400]  Exist.
[19:20.400 --> 19:22.400]  Вот так мы его назовем.
[19:22.520 --> 19:24.520]  Так.
[19:24.520 --> 19:26.520]  Ну, и вот какая-то вопрос. В каком виде нам
[19:26.520 --> 19:28.520]  передается дерево?
[19:32.520 --> 19:34.520]  Вот.
[19:34.520 --> 19:36.520]  Так. Ну, давайте так.
[19:38.520 --> 19:40.520]  Но...
[19:40.520 --> 19:42.520]  Но даже...
[19:44.520 --> 19:46.520]  Ну, назовем это, наверное, тоже итератором,
[19:46.520 --> 19:48.520]  хотя, конечно, так себе...
[19:48.520 --> 19:50.520]  И слово итератор, конечно, может вызвать
[19:50.640 --> 19:52.640]  не те ассоциации.
[19:54.640 --> 19:56.640]  Это я не дописал.
[19:56.640 --> 19:58.640]  Как бы...
[19:58.640 --> 20:00.640]  Ну, как-то, как сейчас-то бывает, вы пишете
[20:00.640 --> 20:02.640]  слово, в том задумаетесь, какое слово вы тут
[20:02.640 --> 20:04.640]  хотите написать.
[20:04.640 --> 20:06.640]  Ну, допустим, ладно. Но да, итератор.
[20:06.640 --> 20:08.640]  Допустим, it.
[20:09.640 --> 20:11.640]  Там. Допустим, root, it.
[20:11.640 --> 20:13.640]  Допустим.
[20:13.640 --> 20:15.640]  Так.
[20:15.760 --> 20:17.760]  Ну, вот.
[20:17.760 --> 20:19.760]  А.
[20:19.760 --> 20:21.760]  Она получает на вход ключик.
[20:23.760 --> 20:25.760]  Да. Забыл сказать.
[20:25.760 --> 20:27.760]  И она хочет вернуть true, если ключик есть
[20:27.760 --> 20:29.760]  и false иначе.
[20:29.760 --> 20:31.760]  Допустим.
[20:31.760 --> 20:33.760]  Как такое счастье
[20:33.760 --> 20:35.760]  может выглядеть, вот, по крайней мере,
[20:35.760 --> 20:37.760]  в идеальном мире?
[20:37.760 --> 20:39.760]  Вот.
[20:42.760 --> 20:44.760]  Значит, на 30.
[20:44.880 --> 20:46.880]  Значит, смотрите, ну, идея такая.
[20:50.880 --> 20:52.880]  Ну, допустим, вот. Ну, тут идея такая,
[20:52.880 --> 20:54.880]  что сама вершина, это, конечно, штука жирная,
[20:54.880 --> 20:56.880]  а вот итератор на вершину, это нормально.
[20:56.880 --> 20:58.880]  Потому что это, ну, как бы, просто хранит какие-то
[20:58.880 --> 21:00.880]  данные, там, собственно, из какого
[21:00.880 --> 21:02.880]  интернета, там, с какого сервера ее
[21:02.880 --> 21:04.880]  скачивать надо, условно.
[21:04.880 --> 21:06.880]  Вот.
[21:08.880 --> 21:10.880]  Значит, поэтому можно говорить.
[21:11.880 --> 21:13.880]  Там. Давайте так.
[21:14.880 --> 21:16.880]  Там nodi итератор.
[21:19.880 --> 21:21.880]  Там v.
[21:21.880 --> 21:23.880]  Там way it
[21:23.880 --> 21:25.880]  равно root it, допустим.
[21:28.880 --> 21:30.880]  Там while
[21:30.880 --> 21:32.880]  way it
[21:32.880 --> 21:34.880]  точка valid.
[21:37.880 --> 21:39.880]  Значит, мы говорим.
[21:39.880 --> 21:41.880]  Ну, там условно.
[21:41.880 --> 21:43.880]  nodi v
[21:44.000 --> 21:46.000]  равно.
[21:51.000 --> 21:53.000]  Нет, итератор на вершину.
[21:58.000 --> 22:00.000]  Ну, в обычной жизни это был бы указатель на вершину.
[22:04.000 --> 22:06.000]  Потому что, напоминаю, у нас вершина не лежит
[22:06.000 --> 22:08.000]  в оперативной памяти.
[22:08.000 --> 22:10.000]  Она лежит где-то там, черти где.
[22:14.000 --> 22:16.000]  Ну, типа того, да.
[22:17.000 --> 22:19.000]  Ну, например, в данном случае
[22:19.000 --> 22:21.000]  это может выглядеть так, что мы можем сказать,
[22:21.000 --> 22:23.000]  что у этого итератора
[22:29.000 --> 22:31.000]  ну, вот, то есть, можно говорить v.
[22:31.000 --> 22:33.000]  download.
[22:33.000 --> 22:35.000]  Ну, вот, условно.
[22:37.000 --> 22:39.000]  Мы говорим
[22:39.000 --> 22:41.000]  download.
[22:41.120 --> 22:43.120]  Ну, и допустим,
[22:43.120 --> 22:45.120]  что у нас там в вершине v есть?
[22:45.120 --> 22:47.120]  Ну, а давайте подумать, что у нас
[22:47.120 --> 22:49.120]  в этой классе в вершине может есть?
[22:49.120 --> 22:51.120]  Так, ну, у нас там обычно есть
[22:51.120 --> 22:53.120]  наверно, какой-нибудь там
[22:53.120 --> 22:55.120]  vector node. То есть, обычно
[22:55.120 --> 22:57.120]  есть, наверно, какой-нибудь там
[22:57.120 --> 22:59.120]  vector какой?
[22:59.120 --> 23:01.120]  То есть, ну,
[23:01.120 --> 23:03.120]  vector может быть ключи.
[23:03.120 --> 23:05.120]  Ну, можно data, наверно.
[23:05.120 --> 23:07.120]  И, соответственно, дети.
[23:07.120 --> 23:09.120]  Ну, ключи у нас имеют
[23:09.240 --> 23:11.240]  тип tiki.
[23:11.240 --> 23:13.240]  Дети у нас имеют тип, конечно,
[23:13.240 --> 23:15.240]  тоже node.
[23:15.240 --> 23:17.240]  Итератор, естественно.
[23:17.240 --> 23:19.240]  Итератор.
[23:23.240 --> 23:25.240]  Ну, допустим, children.
[23:29.240 --> 23:31.240]  Так, ну, да, придется сделать, конечно,
[23:31.240 --> 23:33.240]  маленькую оговорчику, что
[23:33.240 --> 23:35.240]  детей мы, наверно, будем
[23:35.240 --> 23:37.240]  нумеровать все-таки не от одного docker,
[23:37.360 --> 23:39.360]  а все-таки от 0 до k-1.
[23:43.360 --> 23:45.360]  Чего?
[23:45.360 --> 23:47.360]  Нет, ну,
[23:47.360 --> 23:49.360]  да, детей от 0 до k автоматически
[23:49.360 --> 23:51.360]  получается.
[23:51.360 --> 23:53.360]  Вот.
[23:53.360 --> 23:55.360]  Вот так получается.
[23:59.360 --> 24:01.360]  Вот.
[24:01.360 --> 24:03.360]  Так.
[24:03.360 --> 24:05.360]  Ну, и, соответственно,
[24:05.480 --> 24:07.480]  тогда тут получается, что
[24:09.480 --> 24:11.480]  нахитым, там, допустим,
[24:11.480 --> 24:13.480]  k равно.
[24:13.480 --> 24:15.480]  Вот здесь мы прям пишем
[24:15.480 --> 24:17.480]  std leverbound.
[24:23.480 --> 24:25.480]  Leverbound от чего?
[24:25.480 --> 24:27.480]  От
[24:27.480 --> 24:29.480]  v.kis.begin
[24:29.600 --> 24:31.600]  v.kis.end
[24:39.600 --> 24:41.600]  и, соответственно,
[24:41.600 --> 24:43.600]  key.
[24:43.600 --> 24:45.600]  Вот.
[24:45.600 --> 24:47.600]  Но, конечно же, не забыть написать
[24:47.600 --> 24:49.600]  minus v.kis.begin.
[24:53.600 --> 24:55.600]  Да, потому что, например,
[24:55.600 --> 24:57.600]  как вы помните, std leverbound
[24:57.720 --> 24:59.720]  да, он возвращает
[24:59.720 --> 25:01.720]  оператор.
[25:01.720 --> 25:03.720]  Чего?
[25:03.720 --> 25:05.720]  А его не надо
[25:05.720 --> 25:07.720]  разминовать.
[25:07.720 --> 25:09.720]  Именно поэтому я вычитаю из него begin.
[25:09.720 --> 25:11.720]  Ну, то есть, формально, конечно,
[25:11.720 --> 25:13.720]  я должен писать ttrd
[25:13.720 --> 25:15.720]  в нижней подчеркивании.
[25:15.720 --> 25:17.720]  Ну, вот это вот гадость.
[25:17.720 --> 25:19.720]  Но мы
[25:19.720 --> 25:21.720]  не будем этого делать.
[25:21.720 --> 25:23.720]  Это, как говорится, это вот.
[25:23.720 --> 25:25.720]  Будете сдавать экзамен по C++,
[25:25.840 --> 25:27.840]  и, возможно, вас начнут
[25:27.840 --> 25:29.840]  терроризировать эти вопросы.
[25:29.840 --> 25:31.840]  Нет.
[25:31.840 --> 25:33.840]  Нет.
[25:33.840 --> 25:35.840]  А вы стрель уже обсуждали, кстати?
[25:35.840 --> 25:37.840]  Нет.
[25:37.840 --> 25:39.840]  Я не обсуждали.
[25:39.840 --> 25:41.840]  Ну, ничего, пообсуждайте.
[25:41.840 --> 25:43.840]  Ничего.
[25:43.840 --> 25:45.840]  В какой-то момент
[25:45.840 --> 25:47.840]  вы даже шаблончики там пообсуждали.
[25:47.840 --> 25:49.840]  Базового помнилось.
[25:49.840 --> 25:51.840]  А, ну, ничего.
[25:51.840 --> 25:53.840]  Ну, ничего, шаблончики тоже.
[25:53.960 --> 25:55.960]  Ну, классическое задание, по-моему,
[25:55.960 --> 25:57.960]  там было это.
[25:57.960 --> 25:59.960]  Написать sharet.ptr.
[25:59.960 --> 26:01.960]  Ну, вот это будет ментом.
[26:01.960 --> 26:03.960]  Какое-то мясо будет то еще.
[26:03.960 --> 26:05.960]  Нет, ну, не настолько.
[26:09.960 --> 26:11.960]  Нет, ну, смысл sharet.ptr
[26:11.960 --> 26:13.960]  и чтобы вы не следили за памятью.
[26:13.960 --> 26:15.960]  Чтобы вы там не следили.
[26:15.960 --> 26:17.960]  Кого там надо delete, а кого не надо.
[26:17.960 --> 26:19.960]  Да, но зато теперь нужно следить
[26:19.960 --> 26:21.960]  за безопасностью потока.
[26:22.080 --> 26:24.080]  Потому что потока вам нужно будет следить
[26:24.080 --> 26:26.080]  на каком-нибудь другом курсе.
[26:26.080 --> 26:28.080]  Так что, я думаю, не все так сразу.
[26:28.080 --> 26:30.080]  Вот.
[26:30.080 --> 26:32.080]  Значит, что это у нас
[26:32.080 --> 26:34.080]  происходит?
[26:34.080 --> 26:36.080]  Тут у нас такое кан.
[26:36.080 --> 26:38.080]  Вот.
[26:38.080 --> 26:40.080]  Значит, что это такое?
[26:40.080 --> 26:42.080]  Ну, в принципе, да.
[26:42.080 --> 26:44.080]  Если оказалось, что...
[26:47.080 --> 26:49.080]  Значит, если оказалось, что
[26:49.080 --> 26:51.080]  кейс каты
[26:51.200 --> 26:53.200]  каты
[26:53.200 --> 26:55.200]  действительно равно
[26:55.200 --> 26:57.200]  ки,
[26:57.200 --> 26:59.200]  то, ну, значит, можно выпуститься
[26:59.200 --> 27:01.200]  с криком ура.
[27:01.200 --> 27:03.200]  Ну, как у нас, да.
[27:03.200 --> 27:05.200]  Как у нас по-английски ура, правильно?
[27:05.200 --> 27:07.200]  True.
[27:07.200 --> 27:09.200]  Чего?
[27:17.200 --> 27:19.200]  Ух ты, какие молодцы.
[27:19.320 --> 27:21.320]  Я действительно хотел написать код
[27:21.320 --> 27:23.320]  и сказать, найдите ошибку.
[27:23.320 --> 27:25.320]  Молодцы, браво, браво, браво.
[27:25.320 --> 27:27.320]  Да, да, да.
[27:27.320 --> 27:29.320]  Да, придется здесь...
[27:29.320 --> 27:31.320]  Вот.
[27:31.320 --> 27:33.320]  Ой, ой, да, да, да.
[27:33.320 --> 27:35.320]  А, но это классика, да.
[27:35.320 --> 27:37.320]  Допускаешь маленькую ошибку,
[27:37.320 --> 27:39.320]  прочь на тебе ошибку.
[27:39.320 --> 27:41.320]  Прежде чем нашли твою ошибку,
[27:41.320 --> 27:43.320]  нашли еще семь.
[27:43.320 --> 27:45.320]  Причем содержательных.
[27:45.320 --> 27:47.320]  Да, да, да, да.
[27:48.320 --> 27:50.320]  Так, значит, хорошо.
[27:50.320 --> 27:52.320]  Значит, если к,
[27:52.320 --> 27:54.320]  значит, меньше, чем...
[27:54.320 --> 27:56.320]  Нет, ладно, на самом деле, знаете,
[27:56.320 --> 27:58.320]  как это работает?
[27:58.320 --> 28:00.320]  Тут я понял, что...
[28:03.320 --> 28:05.320]  Ну ладно, давайте...
[28:05.320 --> 28:07.320]  Ну, можно писать в кейс, хотя, конечно,
[28:07.320 --> 28:09.320]  ладно, в будущем.
[28:09.320 --> 28:11.320]  Так.
[28:11.320 --> 28:13.320]  Size.
[28:14.320 --> 28:16.320]  Да.
[28:16.320 --> 28:18.320]  Не, не надо.
[28:18.320 --> 28:20.320]  Ну, во-первых,
[28:20.320 --> 28:22.320]  нам как бы в
[28:22.320 --> 28:24.320]  будущем...
[28:24.320 --> 28:26.320]  Ну, сейчас не принципиально, но вообще в
[28:26.320 --> 28:28.320]  будущем нам эту вершину как бы еще это
[28:28.320 --> 28:30.320]  грузить обратно.
[28:30.320 --> 28:32.320]  Поэтому нежелательно.
[28:32.320 --> 28:34.320]  Поэтому нежелательно
[28:34.320 --> 28:36.320]  подобными вещами баловаться.
[28:36.320 --> 28:38.320]  Нет, у меня была идея, чтобы просто мне что-то в кейс не учить.
[28:38.320 --> 28:40.320]  Там это лениво немножко писать.
[28:40.320 --> 28:42.320]  Вот, ну ладно, сейчас уже не буду переписывать.
[28:42.320 --> 28:44.320]  Значит, в кейс size и...
[28:44.320 --> 28:46.320]  Значит так...
[28:46.320 --> 28:48.320]  И вот после этого...
[28:48.320 --> 28:50.320]  Нет, это я k так написал.
[28:50.320 --> 28:52.320]  Вот так.
[28:52.320 --> 28:54.320]  Вот, значит...
[28:54.320 --> 28:56.320]  Да, да, да.
[28:56.320 --> 28:58.320]  В. кейс от k.
[28:58.320 --> 29:00.320]  равно
[29:00.320 --> 29:02.320]  равно кейс, неожиданно выяснилось,
[29:02.320 --> 29:04.320]  что...
[29:04.320 --> 29:06.320]  То, значит, тогда выбрасываемся
[29:06.320 --> 29:08.320]  с криком true.
[29:12.320 --> 29:14.320]  Значит, в противном случае...
[29:16.320 --> 29:18.320]  Так, ну да.
[29:18.320 --> 29:20.320]  Хочется сказать, что выбрасывается с криком false,
[29:20.320 --> 29:22.320]  но рановато, конечно.
[29:22.320 --> 29:24.320]  Но нет, вместо этого мы пишем...
[29:24.320 --> 29:26.320]  Да, я мог бы, конечно, запуститься рекурсивно,
[29:26.320 --> 29:28.320]  но, как вы уже поняли,
[29:28.320 --> 29:30.320]  рекурсии мы баловаться не будем,
[29:30.320 --> 29:32.320]  потому что рекурсия тогда приведет к тому, что у меня будет
[29:32.320 --> 29:34.320]  логарифом вершин в памяти одновременно
[29:34.320 --> 29:36.320]  храниться. Это мы хотим избежать.
[29:36.320 --> 29:38.320]  Поэтому пишем weight
[29:38.320 --> 29:40.320]  равно...
[29:40.320 --> 29:42.320]  ...
[29:42.320 --> 29:44.320]  ...
[29:44.320 --> 29:46.320]  ...
[29:46.320 --> 29:48.320]  ...
[29:48.320 --> 29:50.320]  ...
[29:50.320 --> 29:52.320]  Ну, во-первых, мы потеряли не указатель,
[29:52.320 --> 29:54.320]  а итератор.
[29:54.320 --> 29:56.320]  Во-вторых, итератор никто
[29:56.320 --> 29:58.320]  не терял, потому что мы
[29:58.320 --> 30:00.320]  скачали вершину.
[30:00.320 --> 30:02.320]  Скачали.
[30:02.320 --> 30:04.320]  То есть там, где-то
[30:04.320 --> 30:06.320]  в память, в принципе,
[30:06.320 --> 30:08.320]  скачали ее, можно сказать, в формате
[30:08.320 --> 30:10.320]  витонли, в общем-то. То есть, видите...
[30:10.320 --> 30:12.320]  Память выделена осталась.
[30:12.320 --> 30:14.320]  Память выделена осталась.
[30:14.320 --> 30:16.320]  Но, заметим, выделяли
[30:16.320 --> 30:18.320]  это мы ее не по указателю, мы ее выделяли
[30:18.320 --> 30:20.320]  статической памяти. Поэтому...
[30:20.320 --> 30:22.320]  ...
[30:22.320 --> 30:24.320]  ...
[30:24.320 --> 30:26.320]  ...
[30:26.320 --> 30:28.320]  ...
[30:28.320 --> 30:30.320]  ...
[30:30.320 --> 30:32.320]  ...
[30:32.320 --> 30:34.320]  ...
[30:34.320 --> 30:36.320]  ...
[30:36.320 --> 30:38.320]  ...
[30:38.320 --> 30:40.320]  ...
[30:40.320 --> 30:42.320]  ...
[30:42.320 --> 30:44.320]  ...
[30:44.320 --> 30:46.320]  ...
[30:46.320 --> 30:48.320]  ...
[30:48.320 --> 30:50.320]  ...
[30:50.320 --> 30:52.320]  ...
[30:52.320 --> 30:54.320]  ...
[30:54.320 --> 30:56.320]  ...
[30:56.320 --> 30:58.320]  ...
[30:58.320 --> 31:00.320]  ...
[31:00.320 --> 31:02.320]  ...
[31:02.320 --> 31:04.320]  ...
[31:04.320 --> 31:17.020]  а теперь а теперь внимательность заведем что ребенок каты существует заведомо
[31:17.020 --> 31:27.440]  что детей на один больше чем ключей напоминаю а если а за это у нас а за это у нас
[31:28.440 --> 31:41.640]  что такое лист это у кого дети неволидные нет просто когда мы из листа пытаемся
[31:41.640 --> 31:50.080]  перейти к детям то просто итератор оказывается неволидным вот так что да вот да вот такая идея
[31:50.080 --> 32:01.920]  да то есть на самом деле у всех дети есть просто у некоторых дети неволидные да вот все но типа
[32:01.920 --> 32:12.000]  того вот так ну и в конце самое главное не забыть конечно в конце все-таки выброситься уже с более
[32:12.000 --> 32:27.640]  подходящим эту случаю криком вот фолс не ну дословный перевод тру это истина фолс ложь
[32:28.000 --> 32:46.520]  ну можно переведеть как бе но можно так переводить ну как-то во времена популярности
[32:46.520 --> 32:52.320]  албанского языка фолс переводили как угла в принципе как переводили тру я не помню да а
[32:53.320 --> 33:01.560]  может так и писали тру с твердым знаком там вот вот ой были вы да ну видимо
[33:01.560 --> 33:07.560]  видимо это давно было вы еще маленькие были нам так вот так что ты себя так примерно может
[33:07.560 --> 33:27.080]  выглядеть а давай сейчас чего проверяем ну вы лет проверяя но вы ну вы лет проверяет указывает
[33:27.080 --> 33:30.800]  ли это является ли таракта корректно то есть указывает ли он на корректную вершину
[33:30.800 --> 33:45.680]  ну ключи есть а детей нет ну да нет это означает что нет вершину будут записаны все эти дети то
[33:45.680 --> 33:52.080]  есть их тоже будет как бы каплю с один но просто все они будут неволидными да тут вот тут вот
[33:52.080 --> 33:59.000]  такое удобство будет вот так что вот такой вот так есть то есть вот такие вот то есть такие
[33:59.080 --> 34:14.760]  нет нет нет нет нет нет почему нет обратить внимание в иит он показывает на какую-то вершину да то
[34:14.760 --> 34:19.720]  есть я поэтому так и написал что если вы ведь показывает на какой-то на лист он как бы все
[34:19.720 --> 34:26.000]  залезет по почитает ключи если поймет шоу как бы исключение ничего не достанет то вот дальше
[34:26.080 --> 34:31.600]  он пытается пойти дальше вайли вы там в условии вайла поймет что дальше хода
[34:31.600 --> 34:42.560]  нет и собственно радостно пойдет выбрасываться вот а вот соответственно вот так что это у нас
[34:42.560 --> 34:48.160]  такой вот такой вот экзиз ну то есть да ну в общем-то и да идея на тут конечно ничего сложного нету
[34:48.160 --> 34:53.840]  но вот но то технические особенности тут какие-то уже на лицо
[34:53.840 --> 35:06.040]  что вот значит поехали значит но теперь значит хорошо теперь уровень медиум уровень медиум
[35:06.040 --> 35:15.240]  говорит нам дорогие друзья достаньте нам пожалуйста вот пожалуйста функцию insert
[35:15.240 --> 35:29.400]  вот так как это да как себе мой господи в золотые времена когда в аудитории было две доски
[35:29.400 --> 35:37.640]  хотя над подумать что можно свистнуть вторую доску где-нибудь интересно нету тут-то нет
[35:38.360 --> 35:42.600]  у основы они типа не пользуются
[35:42.600 --> 35:50.400]  я тебе больше скажу это она есть
[35:50.400 --> 36:08.600]  так так но давайте думать как же нам осуществлять вставку
[36:08.600 --> 36:19.640]  вот потому что да дальше возможно нам так это представление об интерфейсе придется расширить
[36:19.640 --> 36:27.080]  потому что во вставке нам вершины придется реально как-то менять то есть придется и
[36:27.080 --> 36:35.120]  но то есть придется их там как-то куда-то запи это куда-то записывать так давайте смотреть
[36:35.120 --> 36:42.800]  но теперь давайте дубы а как же нам вообще осуществить вставку
[36:42.800 --> 36:51.480]  так но казалось бы да
[36:51.480 --> 37:04.120]  так но правда нахер сразу стало что просто тупо вставить ключик мы можем только в лист
[37:04.120 --> 37:08.880]  потому что да понтишь промежуточную вершину ставим значит у нас откуда должен
[37:08.880 --> 37:14.520]  взяться еще и лишний ребенок сразу а у нас как видите с детьми такая ситуация что нельзя просто
[37:14.520 --> 37:21.040]  так и создать еще одного ребенка потому что они все одинаковые то есть это не не то есть не этого
[37:21.040 --> 37:26.840]  мне это там биномиальная куча где у вас там есть куча детей давайте это но хотя нет да откуда
[37:26.840 --> 37:31.040]  берется еще один ребенок как говорится да и встретились два одинаковых родителей сказали
[37:31.040 --> 37:37.280]  а давай ты будешь моим родителем я буду твоим большим ребенком окей вот у нас тут не так у нас
[37:37.280 --> 37:43.880]  тут все дети одинаковые но в принципе то есть как бы идея вроде понятная то есть а давайте
[37:43.880 --> 37:52.480]  просто честно идти спускаться спускаться спускаться спускаться и вот мы доходим до листа нет не так
[37:52.480 --> 38:05.040]  вот доходим до листа но совершенно вот и было у нас тут сколько-то детей точнее ключик
[38:05.040 --> 38:11.640]  людей не было наоборот ключиков и мы решили добавить еще одного ну казалось бы очень
[38:11.640 --> 38:25.040]  простая функция если бы не одно но чего да детей может быть слишком много так ключиков может
[38:25.040 --> 38:32.960]  быть слишком много что же тогда делать но придется так теперь вспоминаем что у этого листа наверное
[38:32.960 --> 38:40.040]  был родитель этот родитель был наверное где-то между двумя ключиками тогда возникает из неожиданной
[38:40.040 --> 38:51.520]  идеи а давайте этого ребенка распилим на два да пока он лист его распилить очень просто да ну
[38:51.520 --> 39:00.280]  правильно да что делать если у вас ребенок сильно растолстел да вот да вот пожалуйста раз ну
[39:00.280 --> 39:10.960]  в том что ключиков стало слишком много у нас было ограничение что в одной вершине ключиков
[39:10.960 --> 39:19.360]  бывает не более чем 2 т-1 а этот мог оказаться вот это но ничего страшного мы можем значит
[39:19.360 --> 39:23.560]  тогда у нас возникает такая интересная операция что допустим у меня т-1 ключиков тут у меня
[39:24.200 --> 39:31.200]  да вот этот новенький он как бы не обязательно посередине ж будет вот но значит фишка такая а
[39:31.200 --> 39:43.760]  вот этот ключик он неожиданно получает повышение оп то есть мы теперь говорим что у нас больше нет
[39:43.760 --> 39:50.920]  этой ссылки вместо этого у нас тут есть целый вот этот вот ключик который мы сюда перенесли и
[39:50.920 --> 39:56.880]  вместо указателя на одного ребенка здесь указатели на двух детей
[39:56.880 --> 40:12.080]  все но вот сюда подойдем до этого практически практически ответив на следующий вопрос можем
[40:12.080 --> 40:17.520]  ли мы сказать что мы победили да потому что здесь тоже могло оказаться что ключика слишком много
[40:17.520 --> 40:35.520]  чем мы сделали распилили ребенка да я вот центральную часть повысили да отлично да но
[40:35.520 --> 40:41.200]  говоря что тут что-то тоже слишком много слишком много всего поэтому давайте этого товарища тоже
[40:41.200 --> 40:50.160]  попилим ну вот ну то есть вот это вот это вот это тоже попилим и как там середину его можем
[40:50.160 --> 40:55.520]  кстати эту может этой вершины если повезет значит тоже повысим сюда ну допустим выяснилось
[40:55.520 --> 41:02.880]  что тут у нас все попроще поэтому на 4 мы там отправляем вот сюда и тут соответственно тоже
[41:02.880 --> 41:10.400]  объявляем двух детей вот но заметим что в принципе так мы можем протидывать прям высоко-высоко то есть
[41:10.400 --> 41:18.400]  в худшем случае может кончиться тем шумаш до корня дошли и у него оказалось 2 т ключиков ровно
[41:18.400 --> 41:26.720]  в этот момент мы увеличиваем высоту заявляю что как говорится давайте возьмем какой-нибудь
[41:26.720 --> 41:34.200]  центральный ключик и объявляем дорогой ключик поздравляю теперь ты король ну смысле корень
[41:34.200 --> 41:42.920]  да тут мы заодно еще и поисками пользуемся тем что непосредственно в корне у нас может быть мало
[41:42.920 --> 41:55.480]  ключиков то есть вот ровно в этом месте высота и увеличивается то есть вот по идее такая вот
[41:55.480 --> 42:04.480]  идея в принципе на олимпиадном уровне в общем-то мы бы этим и удовлетворились потому что в принципе
[42:04.480 --> 42:14.200]  вот он то есть как бы вставка есть есть работает залогарифом залогарифом все ура не не не даже
[42:14.200 --> 42:20.200]  дело даже не в этом ну то есть удаление тоже придется написать но следующие задачи на самом
[42:20.360 --> 42:29.200]  как бы с точки зрения практики нас здесь не очень устраивает что ну да то есть по-хорошему
[42:29.200 --> 42:38.120]  говоря давайте подумаем сколько раз нам нужно будет сколько раз нам нужно будет скачивать вершины
[42:38.120 --> 42:52.120]  логарифом два логарифа потому что нам придется мы должны идти не только вниз но и вверх так вот
[42:52.120 --> 42:58.760]  напоминаю мы имеем мы можем хранить в памяти только у от леденицы вершин они логарифом так
[42:58.760 --> 43:07.080]  что вы то есть база данных настолько большая что даже логарифом ее это больно да тем более что
[43:37.080 --> 43:43.120]  значит вот но поэтому нам как-то не очень вот то есть как бы загрузок много но понятно лада но вот
[43:43.120 --> 43:49.040]  то есть как бы лада то есть как бы но вот но тут еще придется правда какие-то вершинки пить там
[43:49.040 --> 43:54.960]  пили теперь сохранять но понятно тут уже как повезет то есть то есть как бы тут только до какой-то
[43:54.960 --> 44:05.840]  высоты вершинки реально придется менять но тем не менее а потому что когда мы дамы сюда вершинку
[44:05.840 --> 44:13.400]  новую добавили и тут у нас получилось всего ключиков 2 т да просто если если бы тут было
[44:13.400 --> 44:22.400]  2 т минус один или меньше бы просто так бы все и оставили потому что нас устраивает да это мы
[44:22.400 --> 44:27.520]  взяли именно середину да то есть как бы когда как можно еще раз подчеркнуть да то есть элемент
[44:27.520 --> 44:33.920]  середине не обязан быть новым добавленным элемент но он но и не обязан им не быть то есть вот
[44:33.920 --> 44:42.280]  пожалуйста он может на самом деле оказаться и с краем где-нибудь вполне так что сделать то
[44:42.280 --> 44:47.640]  есть как бы нам изберут то есть можно ли нам каким-то образом избежать лишних загрузок
[44:47.840 --> 44:52.300]  что
[44:56.360 --> 44:57.140]  2
[44:59.880 --> 45:07.400]  но
[45:07.400 --> 45:16.440]  кого список
[45:17.640 --> 45:36.640]  Да, нет, на самом деле все гораздо проще. Нет, идея на самом деле такая. Нет, как добиться того, чтобы скачивание было только логарифом?
[45:37.640 --> 45:47.640]  Так идея такая. А давайте идти снизу вверх и просто заранее поддерживать вариант, что вы работаете с вершиной, у которой меньше, чем 2t-1 ключей.
[45:52.640 --> 46:00.640]  То есть идея будет соответственно очень простая. То есть вот вы находите сейчас вершине, у которой меньше, чем 2t-1 ключей. Что это означает?
[46:00.640 --> 46:08.640]  Это означает что? То есть дальше тогда вы можете работать так. То есть если это лист, то вы просто в нее вставляете ключик и не паритесь.
[46:11.640 --> 46:22.640]  Вот. Если же надо куда-то идти вниз, то хорошо, вы находите куда идти вниз и идете. Но тогда выясняете, что если там меньше, чем 2t-1 ключей, то вы просто туда идете и не паритесь.
[46:22.640 --> 46:38.640]  А если там 2t-1 ключей, то вы соответственно быстренько распиливаете эту вершину на две, повышаете средний ключик, тут остается t-1 и t-1. Вот. И после этого там идете куда надо.
[46:45.640 --> 46:48.640]  Ну, в некотором смысле пуши. Хотя это, конечно, не совсем пуши.
[46:52.640 --> 47:02.640]  Нет, поменялось в том, что мы, вот раньше мы просто тупо шли вниз, а потом, когда шли снизу вверх, пытались там проталкивать ключики, если у нас тут их слишком много оказалось.
[47:03.640 --> 47:10.640]  Теперь нам обратно, теперь мы работаем на упреждение. Мы говорим, что когда я работаю с вершиной, я уже знаю, что в ней ключиков немного.
[47:16.640 --> 47:19.640]  Нет, вставлять-то мы будем все еще в лист.
[47:22.640 --> 47:24.640]  Сразу разделяем те вершины, которые плохие были.
[47:27.640 --> 47:32.640]  А что если у нас есть вершина, где 2t-1, где 2t-1, а потом там несколько 1 ключ?
[47:33.640 --> 47:34.640]  Не 1, а там t-1.
[47:35.640 --> 47:37.640]  Нет, если где-то t-1, значит мы с ней ничего не делаем.
[47:38.640 --> 47:40.640]  Значит мы с ней тупо работаем.
[47:41.640 --> 47:48.640]  А как мы знаем, какая у вас будет вершина по середине, потому что, возможно, мы использовали вот эту вершину, которую мы слили несколько раз подряд.
[47:49.640 --> 47:50.640]  В смысле несколько раз подряд, не понял?
[47:50.640 --> 47:55.640]  Смотрите, у нас уже мы добавили вершину в лист, мы ее повышаем.
[47:56.640 --> 47:57.640]  Потом еще раз мы ее повышаем.
[47:58.640 --> 48:02.640]  Нет, в смысле, мы никого не поняли, где мы кого повышаем.
[48:03.640 --> 48:04.640]  Повышаем вершину, когда делаем инсерты.
[48:09.640 --> 48:13.640]  Что значит повышаем? Количество ключиков в каждой вершине увеличивается только на один максимум.
[48:14.640 --> 48:17.640]  Да, но мы же делим его в пола.
[48:18.640 --> 48:19.640]  И что? Делим.
[48:20.640 --> 48:23.640]  И что? Было 2t-1, стало t-1, t-1, и что?
[48:24.640 --> 48:26.640]  Так мы не знаем, где у нас так кажется.
[48:27.640 --> 48:30.640]  Мы можем, конечно, рассчитать, где у нас так кажется вершина, которую мы инсерты.
[48:31.640 --> 48:35.640]  И что? Так мы сначала посплитим, а потом выясним, куда нам идти влево или вправо.
[48:36.640 --> 48:41.640]  Мы же вот это дерево не просто так выяснили, а выяснили, что то, что мы хотим вставить, должно лежать между этим ключом и этим ключом.
[48:42.640 --> 48:43.640]  Это мы уже знаем.
[48:43.640 --> 48:47.640]  Если у нас в решении 2t-1 ленок, то мы его обязательно распилим.
[48:48.640 --> 48:53.640]  Так у нас алгоритм такой. Алгоритм не думает о том...
[48:58.640 --> 49:01.640]  Нет, мы не знаем, будем ли мы его распиливать или нет.
[49:02.640 --> 49:05.640]  То есть, конечно, исходя из этого соображения, мы не знаем.
[49:06.640 --> 49:08.640]  Но она бы плевать, мы просто берем и пилим.
[49:09.640 --> 49:10.640]  Всегда.
[49:10.640 --> 49:11.640]  Всегда.
[49:12.640 --> 49:14.640]  То есть теперь он может всегда распиливать вершину.
[49:15.640 --> 49:16.640]  Ну да.
[49:18.640 --> 49:19.640]  Ну да.
[49:20.640 --> 49:22.640]  То есть, может быть, мы, конечно, где-то сделаем какой-то фальстарт.
[49:23.640 --> 49:25.640]  Ну вот, но ничего страшного.
[49:27.640 --> 49:29.640]  Суть, в общем-то, та же останется.
[49:30.640 --> 49:33.640]  Просто, видимо, какие-то распиливания мы сделаем чуть раньше.
[49:36.640 --> 49:37.640]  Так что такая вот идея.
[49:37.640 --> 49:40.640]  Хотя, в общем-то, если следить, как там происходит добавление,
[49:41.640 --> 49:43.640]  то, в общем-то, суть принципиально не поменяется.
[49:44.640 --> 49:45.640]  Вот.
[49:46.640 --> 49:47.640]  Так что такая вот получается радость.
[49:48.640 --> 49:50.640]  Вот, ну и давайте посмотрим, как же это...
[49:51.640 --> 49:53.640]  Да, ну и, соответственно, отдельно тогда хочется остановиться,
[49:54.640 --> 49:55.640]  что у нас...
[49:56.640 --> 50:00.640]  Возможно, нам в самом начале придется решить, поменялся ли у нас корень.
[50:02.640 --> 50:03.640]  Вот.
[50:04.640 --> 50:06.640]  Поэтому придется тут, конечно, поработать.
[50:07.640 --> 50:08.640]  В коде.
[50:09.640 --> 50:10.640]  То есть, как это будет примерно выглядеть?
[50:11.640 --> 50:13.640]  Выглядеть это будет примерно следующим образом.
[50:14.640 --> 50:15.640]  Так.
[50:20.640 --> 50:21.640]  Так, ладно.
[50:22.640 --> 50:23.640]  Exist же можно ликвидировать?
[50:24.640 --> 50:25.640]  Да, я думаю.
[50:26.640 --> 50:27.640]  Давайте Exist ликвидируем.
[50:29.640 --> 50:30.640]  Ой.
[50:31.640 --> 50:32.640]  Ну да.
[50:33.640 --> 50:34.640]  Как это называется?
[50:35.640 --> 50:36.640]  Код ликвидируется, память о нем остается.
[50:37.640 --> 50:38.640]  Ну ничего.
[50:39.640 --> 50:40.640]  Ну ничего.
[50:41.640 --> 50:42.640]  Так.
[50:43.640 --> 50:44.640]  Что?
[50:45.640 --> 50:46.640]  Ну вот.
[50:47.640 --> 50:48.640]  Ага.
[50:49.640 --> 50:50.640]  Я понял.
[50:51.640 --> 50:52.640]  Да.
[50:53.640 --> 50:54.640]  Ой.
[50:55.640 --> 50:57.640]  Ну память о нем остается.
[50:58.640 --> 50:59.640]  Так.
[51:00.640 --> 51:01.640]  Так, ну ладно, это мы тоже уберем.
[51:02.640 --> 51:04.640]  Думаю, понятно, что мы тут вряд ли где-то на сплэй неожиданно перешли.
[51:05.640 --> 51:06.640]  Так.
[51:07.640 --> 51:08.640]  Так, ну поехали.
[51:09.640 --> 51:11.640]  Значит, делаем.
[51:12.640 --> 51:13.640]  Хм.
[51:14.640 --> 51:15.640]  Так.
[51:16.640 --> 51:17.640]  Хм.
[51:18.640 --> 51:20.640]  Хотя это называется, сейчас будет уже хороший вопрос.
[51:21.640 --> 51:24.640]  Потому что заметим, что у нас в результате корень мог поменяться.
[51:25.640 --> 51:26.640]  Правда?
[51:31.640 --> 51:32.640]  Да.
[51:33.640 --> 51:34.640]  Но у нас Gentoo Linux.
[51:35.640 --> 51:36.640]  Генту Linux.
[51:37.640 --> 51:40.640]  Вы можете, в Gentoo Linux вы можете сделать буквально все своими руками.
[51:41.640 --> 51:43.640]  Более того, вы будете делать буквально все своими руками.
[51:44.640 --> 51:45.640]  Ну да.
[51:46.640 --> 51:47.640]  Что нам мешает?
[51:48.640 --> 51:49.640]  Ничего не мешает.
[51:50.640 --> 51:51.640]  Просто мы начинаем писать код, мы должны об этом задуматься.
[51:52.640 --> 51:53.640]  Да, пришло время об этом задуматься.
[51:54.640 --> 51:56.640]  Просто обычно в этом месте уже начинаешь задумываться.
[51:57.640 --> 51:58.640]  А шо вообще insert будет возвращать?
[52:04.640 --> 52:05.640]  Ну вот, видимо, да.
[52:08.640 --> 52:10.640]  Наш, ну логично.
[52:13.640 --> 52:15.640]  Node.it, допустим, insert.
[52:16.640 --> 52:17.640]  От.
[52:20.640 --> 52:23.640]  Node.it, я тут сократил, не буду сейчас Node.iterator писать.
[52:24.640 --> 52:27.640]  Там Node.it, там допустим root.it.
[52:28.640 --> 52:31.640]  И соответственно вставляем мы этот вот таки key.
[52:34.640 --> 52:35.640]  Так.
[52:37.640 --> 52:38.640]  Ой.
[52:41.640 --> 52:42.640]  Так.
[52:44.640 --> 52:47.640]  Ну во-первых, сразу придется рассмотреть веселый случай.
[52:50.640 --> 52:52.640]  Если совершенно внезапно оказалось,
[52:54.640 --> 52:56.640]  что этот итератор уже не валиден,
[52:57.640 --> 52:59.640]  а такое бывает.
[53:00.640 --> 53:02.640]  Ну бывает же, что у нас дерево пустое, правильно?
[53:07.640 --> 53:16.640]  Ну вот, но получается так.
[53:19.640 --> 53:21.640]  Ну да, так и написать.
[53:22.640 --> 53:25.640]  Node.it, там действительно root.
[53:30.640 --> 53:33.640]  Ну там, видимо, Node.it root от.
[53:34.640 --> 53:39.640]  Ну вот так и пишем, да, видимо, кучу фигурных скобочек.
[53:40.640 --> 53:42.640]  от key.
[53:43.640 --> 53:45.640]  Ну а дальше там.
[53:55.640 --> 53:57.640]  Так, вот создаем эту вершину.
[54:03.640 --> 54:08.640]  Node.root, создаем ее локально.
[54:09.640 --> 54:10.640]  Да, совершенно верно.
[54:11.640 --> 54:12.640]  Вот я ее нод.
[54:15.640 --> 54:16.640]  Вот.
[54:22.640 --> 54:23.640]  Ну вот.
[54:24.640 --> 54:26.640]  Сейчас мы просто сделаем локальную версию.
[54:27.640 --> 54:30.640]  Нет, Node.root это мы сделали локальную версию.
[54:31.640 --> 54:33.640]  У этого Node.
[54:34.640 --> 54:36.640]  Потому что это дерево.
[54:41.640 --> 54:43.640]  Вот, я бы вот так сказал.
[54:44.640 --> 54:46.640]  Потому что смотрите, у нас будут на самом деле две разные вещи.
[54:47.640 --> 54:50.640]  То есть у нас вот upload new node, это я вот говорю,
[54:51.640 --> 54:56.640]  это я говорю, что я хочу вот, то есть это я хочу создать новую вершину.
[54:57.640 --> 55:00.640]  Вот очень хочу, очень хочу создать новую вершину.
[55:01.640 --> 55:02.640]  Вот.
[55:05.640 --> 55:07.640]  Вот, а сейчас нод.
[55:08.640 --> 55:09.640]  Соответственно upload new node.
[55:10.640 --> 55:12.640]  А так я иногда буду upload по итератору, типа вершины не меняется,
[55:13.640 --> 55:15.640]  просто запись нод меняется, векторы конкретные в ней.
[55:16.640 --> 55:18.640]  Вот, это чуть позже будет.
[55:26.640 --> 55:31.640]  В этом Ифе мы проверяем, что если совершенно внезапно выяснилось, что дерево пустое,
[55:32.640 --> 55:34.640]  то есть у нас даже корень является уже неволидным итератором,
[55:35.640 --> 55:38.640]  то мы просто создаем дерево из одной вершинки.
[55:39.640 --> 55:40.640]  То есть вот так.
[55:41.640 --> 55:42.640]  Ну да.
[55:43.640 --> 55:46.640]  Да, то есть как бы я создаю вершину, вот вершина выглядит вот так.
[55:47.640 --> 55:53.640]  И я вызываю функцию upload new node, которая возьмет эту вершину,
[55:53.640 --> 55:58.640]  положит ее там куда-то себе на сервер и вернет итератор на нее.
[55:59.640 --> 56:01.640]  Но я подчеркиваю, что это новая вершина.
[56:02.640 --> 56:03.640]  Вот.
[56:04.640 --> 56:05.640]  Вот.
[56:06.640 --> 56:07.640]  Вот.
[56:08.640 --> 56:11.640]  И так, значит, наш итератор теперь валиден.
[56:12.640 --> 56:13.640]  И что мы теперь делаем?
[56:14.640 --> 56:15.640]  Так, наш итератор валиден.
[56:16.640 --> 56:24.640]  Но нам придется тоже рассматривать случай, будь здоров.
[56:25.640 --> 56:30.640]  Потому что, возможно, нам все еще придется создавать новый корень.
[56:31.640 --> 56:32.640]  Почему?
[56:33.640 --> 56:39.640]  Потому что может так оказаться, что у нас в корне слишком много ключей, а именно 2t-1.
[56:40.640 --> 56:41.640]  Понимаете, да?
[56:42.640 --> 56:43.640]  Вот.
[56:46.640 --> 56:51.640]  Поэтому в принципе, значит, что тут можно сделать?
[56:52.640 --> 56:55.640]  Вот, можно сделать примерно следующее.
[56:58.640 --> 57:02.640]  Так, значит, как же мы это сделаем?
[57:03.640 --> 57:06.640]  Так, ну давайте начнем с простого.
[57:07.640 --> 57:15.640]  Значит, nodie root равно rootit.download.
[57:19.640 --> 57:21.640]  Download от чего?
[57:24.640 --> 57:25.640]  Не просто.
[57:26.640 --> 57:27.640]  Да, от широты жизни, да.
[57:28.640 --> 57:29.640]  Вот.
[57:36.640 --> 57:37.640]  Вот.
[57:41.640 --> 57:42.640]  Вот.
[57:49.640 --> 57:51.640]  И так, значит, root у нас такой.
[57:52.640 --> 57:53.640]  Значит, если оказалось...
[57:57.640 --> 57:59.640]  Значит, теперь мы сейчас будем мыслить аккуратно.
[58:00.640 --> 58:05.640]  Значит, если оказалось, что root.kis.size
[58:07.640 --> 58:17.640]  равно 2 умножить на t минус 1, то что мы тогда делаем?
[58:22.640 --> 58:23.640]  Вот.
[58:25.640 --> 58:26.640]  Вот.
[58:27.640 --> 58:28.640]  А, ну смотрите, знаете, что мы еще сделаем?
[58:29.640 --> 58:31.640]  Я еще напишу nodie it.
[58:32.640 --> 58:36.640]  Это называется wayit равно rootit.
[58:38.640 --> 58:40.640]  Потому что в конце я должен буду написать rootit.
[58:41.640 --> 58:43.640]  Это веритурно rootit, то есть просто сохраняем.
[58:44.640 --> 58:49.640]  Так, значит, если у нас, значит, осталось 2t-1, значит, нам придется создать...
[58:50.640 --> 58:52.640]  Так, ну во-первых, действительно там...
[58:54.640 --> 58:57.640]  Ну, во-первых, попилить новую вершину.
[58:58.640 --> 59:00.640]  Как мы это конкретно сделаем?
[59:02.640 --> 59:03.640]  Так.
[59:04.640 --> 59:05.640]  Ну, во-первых, давайте так.
[59:06.640 --> 59:07.640]  Так, сделаем аккуратно.
[59:08.640 --> 59:10.640]  Давайте, во-первых, ту вершину из базы удалим.
[59:16.640 --> 59:18.640]  Ну, во-первых, начнем с того, что там скажем.
[59:21.640 --> 59:23.640]  Erase from base.
[59:28.640 --> 59:30.640]  Там, собственно, от этого rootita.
[59:31.640 --> 59:39.640]  Ну, как бы, видите, мы ее уже скачали, поэтому, в общем, ничего страшного, понимаете, да?
[59:40.640 --> 59:41.640]  Так.
[59:44.640 --> 59:47.640]  Почему мы храним iterator на rootit?
[59:48.640 --> 59:49.640]  Что?
[59:50.640 --> 59:51.640]  Почему мы храним iterator на rootit?
[59:52.640 --> 59:53.640]  Ну, эффективнее через wayit, если...
[59:54.640 --> 59:56.640]  А мы его сейчас перепрессуем.
[59:57.640 --> 59:58.640]  Какие?
[59:58.640 --> 01:00:00.640]  Нет, нет, это мы обязательно учтем.
[01:00:01.640 --> 01:00:02.640]  Значит, что мы теперь делаем?
[01:00:03.640 --> 01:00:07.640]  Теперь эту вершинку надо, получается, распилить.
[01:00:08.640 --> 01:00:10.640]  Так, ну, во-первых, создадим новый root.
[01:00:11.640 --> 01:00:12.640]  А, хотя нет, неправильно.
[01:00:13.640 --> 01:00:18.640]  Для того, чтобы создать root, неплохо было бы создать iterator на его левый и правый ребенок.
[01:00:19.640 --> 01:00:20.640]  Левый и правый ребенка.
[01:00:21.640 --> 01:00:22.640]  Вот.
[01:00:23.640 --> 01:00:24.640]  Значит, поехали.
[01:00:24.640 --> 01:00:25.640]  Ну, поехали.
[01:00:26.640 --> 01:00:29.640]  Там node, там left child.
[01:00:30.640 --> 01:00:33.640]  Так, ну, во-первых, там...
[01:00:34.640 --> 01:00:36.640]  Как создать node?
[01:00:37.640 --> 01:00:38.640]  То есть, на самом деле, vector можно создать так.
[01:00:39.640 --> 01:00:41.640]  Так, vector от tkey.
[01:00:42.640 --> 01:00:44.640]  Значит, от чего?
[01:00:45.640 --> 01:00:47.640]  От нашего вот этого вот.
[01:00:50.640 --> 01:00:53.640]  Значит, root.
[01:00:55.640 --> 01:00:59.640]  Не значит, точка keys.begin.
[01:01:04.640 --> 01:01:10.640]  Вот, root.keys.begin.
[01:01:11.640 --> 01:01:13.640]  Плюс, соответственно, сколько там?
[01:01:14.640 --> 01:01:15.640]  t-1.
[01:01:16.640 --> 01:01:17.640]  Вот.
[01:01:18.640 --> 01:01:21.640]  Ну, есть у vector такой конструктор от двух итераторов.
[01:01:22.640 --> 01:01:23.640]  Вот.
[01:01:25.640 --> 01:01:26.640]  Еще?
[01:01:27.640 --> 01:01:28.640]  Есть туда.
[01:01:29.640 --> 01:01:31.640]  Как говорится, мало кто знает, но он есть.
[01:01:32.640 --> 01:01:33.640]  Вот.
[01:01:35.640 --> 01:01:36.640]  Что еще есть?
[01:01:37.640 --> 01:01:39.640]  Ну и, соответственно, дети теперь.
[01:01:40.640 --> 01:01:42.640]  Значит, там node.it.
[01:01:44.640 --> 01:01:45.640]  Тоже root.
[01:01:46.640 --> 01:01:48.640]  Точка children.
[01:01:51.640 --> 01:01:52.640]  Точка begin.
[01:01:54.640 --> 01:01:55.640]  Рут.
[01:01:56.640 --> 01:01:57.640]  Точка children.
[01:01:59.640 --> 01:02:00.640]  Точка begin.
[01:02:02.640 --> 01:02:03.640]  Плюс.
[01:02:04.640 --> 01:02:08.640]  На этот раз t, потому что, соответственно, у вершины с t...
[01:02:09.640 --> 01:02:11.640]  Если t-1 ключей, то детей, соответственно, t.
[01:02:13.640 --> 01:02:16.640]  Так, ну, вот такого вот left child создали.
[01:02:17.640 --> 01:02:18.640]  Логично, да?
[01:02:19.640 --> 01:02:20.640]  Вот.
[01:02:20.640 --> 01:02:21.640]  Вот.
[01:02:27.640 --> 01:02:29.640]  Сейчас чего-чего еще раз?
[01:02:32.640 --> 01:02:33.640]  2t-1.
[01:02:34.640 --> 01:02:36.640]  А, детей 2t, да.
[01:02:37.640 --> 01:02:38.640]  Да, детей 2t.
[01:02:39.640 --> 01:02:41.640]  Значит, ну, давайте создадим теперь право.
[01:02:42.640 --> 01:02:45.640]  Можем создать право ребеночка теперь.
[01:02:47.640 --> 01:02:49.640]  Right child.
[01:02:50.640 --> 01:02:51.640]  Значит, right child.
[01:02:52.640 --> 01:02:54.640]  Соответственно, от vector.
[01:02:56.640 --> 01:02:57.640]  Значит, от такие...
[01:02:59.640 --> 01:03:00.640]  От чего?
[01:03:01.640 --> 01:03:02.640]  От...
[01:03:03.640 --> 01:03:06.640]  Значит, root.keys на этот раз.
[01:03:07.640 --> 01:03:08.640]  Точка begin.
[01:03:11.640 --> 01:03:12.640]  Плюс на этот раз t.
[01:03:13.640 --> 01:03:14.640]  Ну, вот.
[01:03:14.640 --> 01:03:15.640]  Точка begin.
[01:03:18.640 --> 01:03:19.640]  Плюс на этот раз t.
[01:03:21.640 --> 01:03:23.640]  И здесь уже можно просто n кинуть.
[01:03:28.640 --> 01:03:29.640]  Нет.
[01:03:29.640 --> 01:03:30.640]  Нет.
[01:03:31.640 --> 01:03:35.640]  t-1 ключ, он не отправится в детей, он отправится в корень.
[01:03:36.640 --> 01:03:37.640]  А вот дети...
[01:03:40.640 --> 01:03:41.640]  Точнее, указатели на детей.
[01:03:41.640 --> 01:03:45.640]  Это не сами дети, это еще их так, так сказать, их мобильный телефон.
[01:03:46.640 --> 01:03:47.640]  Да.
[01:03:47.640 --> 01:03:48.640]  Ну или...
[01:03:48.640 --> 01:03:49.640]  Хотя нет.
[01:03:50.640 --> 01:03:54.640]  То есть, нет, это я не знаю, где мой ребенок, но у меня есть там эта магическая шкирка,
[01:03:54.640 --> 01:03:56.640]  которую я могу дернуть, и ребенок появится.
[01:03:57.640 --> 01:03:58.640]  Вот.
[01:04:01.640 --> 01:04:02.640]  Вот так.
[01:04:04.640 --> 01:04:05.640]  Так.
[01:04:07.640 --> 01:04:08.640]  Begin.
[01:04:08.640 --> 01:04:09.640]  Плюс t.
[01:04:12.640 --> 01:04:14.640]  Точка children.
[01:04:16.640 --> 01:04:17.640]  Точка end.
[01:04:19.640 --> 01:04:20.640]  Во.
[01:04:22.640 --> 01:04:23.640]  Ой, скоб.
[01:04:24.640 --> 01:04:25.640]  Ай, скобочка забыл.
[01:04:27.640 --> 01:04:29.640]  Так, классно.
[01:04:32.640 --> 01:04:33.640]  Значит, смотрите.
[01:04:36.640 --> 01:04:37.640]  Так.
[01:04:37.640 --> 01:04:38.640]  Ну, во-первых.
[01:04:38.640 --> 01:04:39.640]  Теперь.
[01:04:39.640 --> 01:04:40.640]  Теперь.
[01:04:41.640 --> 01:04:44.640]  Так, nodie, nodie it.
[01:04:45.640 --> 01:04:46.640]  Теперь пишем left.
[01:04:47.640 --> 01:04:48.640]  Нет, ну давайте нормально напишем.
[01:04:50.640 --> 01:04:51.640]  Nodie it.
[01:04:52.640 --> 01:04:55.640]  Left child it.
[01:04:57.640 --> 01:04:58.640]  Равно.
[01:05:03.640 --> 01:05:07.640]  Значит, upload new nodie.
[01:05:08.640 --> 01:05:09.640]  От left child.
[01:05:14.640 --> 01:05:16.640]  Значит, nodie it.
[01:05:18.640 --> 01:05:19.640]  Right child.
[01:05:21.640 --> 01:05:22.640]  Right child it.
[01:05:23.640 --> 01:05:24.640]  Равно.
[01:05:25.640 --> 01:05:30.640]  Upload new nodie.
[01:05:32.640 --> 01:05:33.640]  От right child.
[01:05:33.640 --> 01:05:34.640]  Вот.
[01:05:41.640 --> 01:05:42.640]  Так.
[01:05:42.640 --> 01:05:43.640]  Ну, что у нас теперь?
[01:05:46.640 --> 01:05:47.640]  Значит, root у нас.
[01:05:50.640 --> 01:05:51.640]  Значит, что у нас теперь?
[01:05:53.640 --> 01:05:54.640]  Значит, root.
[01:05:54.640 --> 01:05:57.640]  А давайте просто в эту вершину напишем.
[01:05:57.640 --> 01:06:00.640]  root равно, допустим, nodie.
[01:06:00.640 --> 01:06:01.640]  От чего?
[01:06:02.640 --> 01:06:03.640]  От.
[01:06:05.640 --> 01:06:07.640]  Единственного вот этого несчастного.
[01:06:10.640 --> 01:06:12.640]  root.keys.
[01:06:14.640 --> 01:06:15.640]  точка.
[01:06:17.640 --> 01:06:20.640]  А, не точка, а просто t-1.
[01:06:23.640 --> 01:06:24.640]  И здесь вот это вот.
[01:06:26.640 --> 01:06:27.640]  Left child it.
[01:06:27.640 --> 01:06:30.640]  И right child it.
[01:06:34.640 --> 01:06:35.640]  Во.
[01:06:36.640 --> 01:06:38.640]  Значит, тут соответственно шлеп.
[01:06:39.640 --> 01:06:40.640]  И шлеп.
[01:06:41.640 --> 01:06:42.640]  Вот.
[01:06:44.640 --> 01:06:45.640]  Значит, пишем теперь.
[01:06:49.640 --> 01:06:52.640]  Ой, хотя этот ключик, видимо, придется сохранить.
[01:06:54.640 --> 01:06:55.640]  Так.
[01:06:57.640 --> 01:06:58.640]  Раз мы его перезаписываем.
[01:07:03.640 --> 01:07:04.640]  Так.
[01:07:05.640 --> 01:07:06.640]  А, впрочем, это.
[01:07:06.640 --> 01:07:07.640]  А, впрочем, нет.
[01:07:08.640 --> 01:07:09.640]  Вот.
[01:07:09.640 --> 01:07:10.640]  Впрочем, не совсем так.
[01:07:11.640 --> 01:07:13.640]  Значит, пишем теперь.
[01:07:13.640 --> 01:07:14.640]  root it.
[01:07:16.640 --> 01:07:17.640]  равно.
[01:07:18.640 --> 01:07:19.640]  Значит.
[01:07:20.640 --> 01:07:23.640]  Upload new nodie.
[01:07:23.640 --> 01:07:24.640]  От root.
[01:07:33.640 --> 01:07:34.640]  А теперь внимание.
[01:07:35.640 --> 01:07:36.640]  Вот вы спрашивали.
[01:07:36.640 --> 01:07:38.640]  Ну, теперь пишем, что v it.
[01:07:39.640 --> 01:07:40.640]  равно.
[01:07:41.640 --> 01:07:47.640]  Ну, и соответственно пишем, что если наш вот этот ключик оказался меньше, чем
[01:07:47.640 --> 01:07:50.640]  там root.keys нулевое.
[01:07:50.640 --> 01:07:53.640]  То он равен соответственно left child it.
[01:07:55.640 --> 01:07:56.640]  Двоеточие.
[01:07:56.640 --> 01:07:57.640]  Right child it.
[01:08:00.640 --> 01:08:01.640]  Во.
[01:08:03.640 --> 01:08:04.640]  Так.
[01:08:04.640 --> 01:08:05.640]  То есть, видите.
[01:08:05.640 --> 01:08:09.640]  То есть, вот получается, что у меня v it будет, значит, равен текущей вершине.
[01:08:09.640 --> 01:08:13.640]  Но если у нас в корне что-то произошло, то как бы, значит, в том ребенке, который
[01:08:13.640 --> 01:08:14.640]  надо.
[01:08:14.640 --> 01:08:15.640]  Вот.
[01:08:16.640 --> 01:08:17.640]  Да.
[01:08:18.640 --> 01:08:19.640]  Так.
[01:08:19.640 --> 01:08:23.640]  Так что вот такой вот код мы написали лишь для того, чтобы рассмотреть случай
[01:08:23.640 --> 01:08:24.640]  с корнем.
[01:08:27.640 --> 01:08:28.640]  Вот.
[01:08:29.640 --> 01:08:33.640]  Нет, ну здесь, да, хотелось на это время потратить, чтобы вот просто посмотри, какие
[01:08:33.640 --> 01:08:34.640]  тут техники.
[01:08:35.640 --> 01:08:36.640]  Вот.
[01:08:37.640 --> 01:08:38.640]  Вот.
[01:08:38.640 --> 01:08:39.640]  Вот.
[01:08:39.640 --> 01:08:43.640]  Нет, ну здесь, да, хотелось на это время потратить, чтобы вот просто посмотри, какие
[01:08:43.640 --> 01:08:44.640]  тут техники.
[01:08:44.640 --> 01:08:46.640]  Какие тут технические детали возникают.
[01:08:48.640 --> 01:08:49.640]  Вот.
[01:08:49.640 --> 01:08:51.640]  Значит, что же нам теперь надо сделать?
[01:08:53.640 --> 01:08:54.640]  Так.
[01:08:55.640 --> 01:08:57.640]  Ну тебе, ну дальше, в общем-то.
[01:08:58.640 --> 01:08:59.640]  Точнее, да.
[01:08:59.640 --> 01:09:01.640]  Возможно немножко копипастить придется.
[01:09:01.640 --> 01:09:02.640]  Но давайте.
[01:09:02.640 --> 01:09:04.640]  Но суть-то теперь понятна.
[01:09:04.640 --> 01:09:05.640]  Теперь давайте.
[01:09:05.640 --> 01:09:12.640]  Давайте попробуем попробуем уложиться куда-то вот куда-то вот сюда в эту часть
[01:09:12.640 --> 01:09:13.640]  доски.
[01:09:16.640 --> 01:09:17.640]  Как это добудем?
[01:09:17.640 --> 01:09:19.640]  Это попробуем упихать код.
[01:09:20.640 --> 01:09:22.640]  Тем более, что в реальных компаниях от вас могут.
[01:09:23.640 --> 01:09:25.640]  Нет, хуже в размер экрана.
[01:09:26.640 --> 01:09:31.640]  Нет, кстати, в реальном коде, кстати, обычно там то есть какой-то яндексе помню там
[01:09:31.640 --> 01:09:35.640]  были требования, что комитет код, то есть у вас там весь код должен умещаться в
[01:09:35.640 --> 01:09:36.640]  экран.
[01:09:37.640 --> 01:09:39.640]  Весь код или весь тиф?
[01:09:40.640 --> 01:09:41.640]  Нет.
[01:09:42.640 --> 01:09:45.640]  Но я имею в виду, каждая строчка кода, естественно.
[01:09:46.640 --> 01:09:50.640]  Нет, понятно, наверное, весь код поисковика Яндекса, естественно, вряд ли уместится
[01:09:50.640 --> 01:09:51.640]  в монитор.
[01:09:51.640 --> 01:09:59.640]  Нет, но сформулировать так нет.
[01:09:59.640 --> 01:10:04.640]  Теоретически можно, наверное, пытаться жестко требовать, чтобы любая функция в коде
[01:10:04.640 --> 01:10:05.640]  помещалась в экран.
[01:10:06.640 --> 01:10:11.640]  То есть просто если у вас не вмещается в экран, значит вы ее плохо разбили на под
[01:10:11.640 --> 01:10:12.640]  функции.
[01:10:12.640 --> 01:10:14.640]  Вот, да, теоретически можно.
[01:10:18.640 --> 01:10:20.640]  Так, что у нас тогда будет дальше?
[01:10:21.640 --> 01:10:24.640]  Да, то есть напоминаю, код у нас не заканчивается в этом месте.
[01:10:24.640 --> 01:10:26.640]  То есть мы еще пока идем, идем, идем.
[01:10:27.640 --> 01:10:28.640]  Так.
[01:10:30.640 --> 01:10:34.640]  Так, значит тут мы начинаем писать, что мы начинаем писать?
[01:10:35.640 --> 01:10:36.640]  Не, никакого Элзе.
[01:10:37.640 --> 01:10:42.640]  То есть у нас есть вершина wayit, на которую мы смотрим, итератор, на который мы смотрим.
[01:10:42.640 --> 01:11:00.640]  Вот, то есть более того, на самом деле, правильно было бы еще написать, вот, более
[01:11:00.640 --> 01:11:02.640]  того, правильно было бы еще написать, знаете, что?
[01:11:02.640 --> 01:11:03.640]  Сейчас я вам скажу.
[01:11:03.640 --> 01:11:14.640]  То есть на самом деле, можно было бы еще написать какую-нибудь, то есть вот wayit
[01:11:14.640 --> 01:11:17.640]  равно rooted, и надо еще тогда написать, знаете, что?
[01:11:17.640 --> 01:11:20.640]  Надо писать ноде v равно root.
[01:11:23.640 --> 01:11:27.640]  Нам просто будет удобно, чтобы эта вершина прям сразу и хранилась, чтобы лишний раз
[01:11:27.640 --> 01:11:28.640]  ее там не доставать.
[01:11:28.640 --> 01:11:29.640]  Вот.
[01:11:31.640 --> 01:11:32.640]  Да, да, да.
[01:11:32.640 --> 01:11:35.640]  И вот поэтому здесь придется тоже это написать.
[01:11:36.640 --> 01:11:43.640]  Там key меньше root точка keys от нуля.
[01:11:44.640 --> 01:11:46.640]  Вопросик left child.
[01:11:47.640 --> 01:11:50.640]  Ну, к сожалению, в языке, в этом языке у нас картриджей нету.
[01:11:51.640 --> 01:11:54.640]  Ну, точнее так, Влада, в продвинутых версиях есть.
[01:11:54.640 --> 01:12:00.640]  Там что-то, что-то отдельно похожее, но легче уже не заморачиваться.
[01:12:00.640 --> 01:12:01.640]  Вот.
[01:12:03.640 --> 01:12:04.640]  А.
[01:12:06.640 --> 01:12:07.640]  В.
[01:12:09.640 --> 01:12:10.640]  А она в будущем окажется.
[01:12:10.640 --> 01:12:15.640]  А она это это пока копия root, потому что как бы сейчас у нас будет то сейчас
[01:12:15.640 --> 01:12:17.640]  начинается с этого момента.
[01:12:17.640 --> 01:12:19.640]  То есть мы тут пишем while true.
[01:12:19.640 --> 01:12:20.640]  Ну, не совсем.
[01:12:22.640 --> 01:12:25.640]  Значит, смотрите, там, нет, там логика такая будет.
[01:12:26.640 --> 01:12:33.640]  То есть сейчас мы находимся в вершине v и в ее поддерево куда-то хотим вставить вершину.
[01:12:34.640 --> 01:12:37.640]  Мы будем поддерживать инвариант, что вершина v уже скачана.
[01:12:38.640 --> 01:12:41.640]  Если душить, кстати, то вот вы сделали v равно key.
[01:12:41.640 --> 01:12:46.640]  Нет, v и я значит скачал это и итератор, а v это прям вершина.
[01:12:52.640 --> 01:12:53.640]  Да.
[01:12:53.640 --> 01:12:55.640]  Ну, райтчайлт и левчайлт это тоже по типу нода.
[01:12:55.640 --> 01:12:56.640]  В чем проблема?
[01:12:57.640 --> 01:12:58.640]  Ждем.
[01:12:59.640 --> 01:13:00.640]  А.
[01:13:01.640 --> 01:13:02.640]  В.
[01:13:03.640 --> 01:13:04.640]  В.
[01:13:05.640 --> 01:13:06.640]  В.
[01:13:07.640 --> 01:13:08.640]  В.
[01:13:08.640 --> 01:13:09.640]  В.
[01:13:10.640 --> 01:13:11.640]  Ждем.
[01:13:12.640 --> 01:13:17.640]  Мы делаем, мы не можем присвоить ноду, нод и итератор.
[01:13:18.640 --> 01:13:19.640]  Нет, наслаждайся.
[01:13:20.640 --> 01:13:21.640]  Нет, ты сейчас.
[01:13:27.640 --> 01:13:28.640]  Да, вот, не путать.
[01:13:29.640 --> 01:13:30.640]  Вот.
[01:13:32.640 --> 01:13:33.640]  Так, что там?
[01:13:34.640 --> 01:13:38.640]  Так, значит while true, теперь говорим, что вершина v у меня есть и итератор на нее тоже есть.
[01:13:39.640 --> 01:13:45.640]  Но самое важное по этому вершину, что мы знаем, это то, что сама по себе вершина уже удалена не будет.
[01:13:48.640 --> 01:13:55.640]  Ну, потому что я имею ввиду, что инвариант заключает в том, что это не просто вершина, а это вершина, у которой ключиков заведомо меньше, чем 2t-1.
[01:13:59.640 --> 01:14:02.640]  Значит, поэтому работать мы теперь будем следующим образом.
[01:14:05.640 --> 01:14:06.640]  Значит, куда же ее вставлять?
[01:14:07.640 --> 01:14:12.640]  Ну, вставлять ее, очевидно, нам нужно будет в позицию лавербаунд, правда?
[01:14:13.640 --> 01:14:18.640]  Пишем, как всегда, std pum pum laverbound.
[01:14:19.640 --> 01:14:20.640]  От чего?
[01:14:21.640 --> 01:14:31.640]  От v.kiss.begin v.kiss.end.
[01:14:37.640 --> 01:14:39.640]  Да, запитая key.
[01:14:40.640 --> 01:14:43.640]  И не забыть, конечно же, вычесть begin.
[01:14:46.640 --> 01:14:53.640]  Так, отлично. Это мы знаем, в какую позицию будем вставлять. Понятно, да?
[01:14:54.640 --> 01:14:57.640]  Кстати, вполне вероятно, что будем вставлять и в конец.
[01:14:58.640 --> 01:15:05.640]  Чем приятен такой лавербаунд, что если ваш элемент больше всех элементов, которые у вас тут в массиве есть, то он вернет это.
[01:15:06.640 --> 01:15:07.640]  Вот.
[01:15:08.640 --> 01:15:10.640]  Так, поз, значит, сделали.
[01:15:14.640 --> 01:15:18.640]  Так, ну теперь пришло время, наверное, создать новую вершину.
[01:15:19.640 --> 01:15:21.640]  Но правда есть самый тупой вариант.
[01:15:24.640 --> 01:15:26.640]  Так, ну давайте так, во-первых, так и допишем.
[01:15:27.640 --> 01:15:28.640]  Not it.
[01:15:29.640 --> 01:15:36.640]  Вот этот вот pos it равно v.children pos.
[01:15:39.640 --> 01:15:43.640]  Вот, по идее, именно в это под дерево нужно вставлять новый ключик.
[01:15:45.640 --> 01:15:51.640]  Но, правда, сразу придется сделать уговорочку. Если совершенно случайно оказалось, что он невалиден.
[01:15:56.640 --> 01:15:58.640]  То, что мы тогда делаем.
[01:16:02.640 --> 01:16:04.640]  Тогда, смотрите, тогда я технически делаем так.
[01:16:05.640 --> 01:16:07.640]  v.kis.
[01:16:09.640 --> 01:16:11.640]  Значит, делаем insert прям в вектор.
[01:16:13.640 --> 01:16:16.640]  v. как делается вставка элемента, да?
[01:16:17.640 --> 01:16:20.640]  Она делала v.begin plus pos и, соответственно, key.
[01:16:20.640 --> 01:16:21.640]  Вот.
[01:16:24.640 --> 01:16:31.640]  Ну, я надеюсь, я надеюсь, вы в этом месте не начинаете там pushback эти элементы, прибегаться фориком там, чтобы скопировать там вот это все.
[01:16:34.640 --> 01:16:38.640]  Так, да, как, как, как добавить v.children лишний nullptr?
[01:16:38.640 --> 01:16:40.640]  Ну, в данном случае вообще можно не заморачиваться.
[01:16:41.640 --> 01:16:43.640]  И просто написать pushback.
[01:16:44.640 --> 01:16:45.640]  Ну, там.
[01:16:45.640 --> 01:16:47.640]  Типа от nullptr.
[01:16:49.640 --> 01:16:52.640]  Ну, я так напишу. Понятно, что там какой-то итератор от nullptr.
[01:16:55.640 --> 01:16:58.640]  Ну да, потому что надо добавить пустой просто.
[01:17:00.640 --> 01:17:02.640]  То есть, в векторе нужно добавить ноль пыта.
[01:17:03.640 --> 01:17:04.640]  Ну, и в векторе.
[01:17:05.640 --> 01:17:07.640]  Ну, и в векторе, и в векторе.
[01:17:08.640 --> 01:17:09.640]  Ну, и в векторе.
[01:17:10.640 --> 01:17:11.640]  Ну, и в векторе.
[01:17:11.640 --> 01:17:18.280]  как бы то есть знаете да знаете как как поет классик зайти там а любви немало песен сложена
[01:17:18.280 --> 01:17:24.800]  я спою тебе спою еще одну вот но не то чтобы конечно любовь и нул птр конечно как-то
[01:17:24.800 --> 01:17:34.840]  связаны но соответственно вот ну то есть иногда конечно случается и такое но да вот значит
[01:17:35.840 --> 01:17:42.620]  поменялась вершина но мы хотим но замена но идея такая мы хотим чтобы как бы сама appelle
[01:17:42.620 --> 01:17:48.760]  эти вещи то есть скажем так в вершине появился новый клюк и кто сама по себе вершину как
[01:17:48.760 --> 01:17:54.080]  сущность не поменялась в том плане что как бы этой вершины был родитель и наверное это
[01:17:54.080 --> 01:17:58.960]  этот родитель указывал на эту вершину и мы не хотим чтобы этот указатель перестал быть валидно
[01:17:58.960 --> 01:18:05.660]  поэтому у нас неожиданно появляется что у нас неожиданно появляется появляется такое
[01:18:05.660 --> 01:18:09.900]  такой метод вид вид точка аплод
[01:18:09.900 --> 01:18:19.460]  ну и турн рутит конечно
[01:18:19.460 --> 01:18:35.540]  нет нет просто идея такая
[01:18:35.540 --> 01:18:41.100]  просто да то есть у нас смотрите просто вот есть разница потому что выит это
[01:18:41.100 --> 01:18:48.380]  означает следующее что где-то но то есть то есть как бы то есть где-то у нас есть
[01:18:48.380 --> 01:18:53.860]  какой-то удаленный сервер да на сервере есть ячейка в ячейке сундук там сундуке
[01:18:53.860 --> 01:19:03.380]  яйцо там яйца и утка утка там утки заяц да вот так вот значит что вот это за
[01:19:03.880 --> 01:19:09.660]  она говорит значит смотреть не то значит не надо ни не там не трогай сервер оставь
[01:19:09.660 --> 01:19:15.820]  там покой утку значит оставь зайца просто вот внутрь этого зайца просто положи лишний
[01:19:15.820 --> 01:19:25.720]  ключик но сам по себе само по себе зайца не трогай ну по модулю конечно это да вот то есть
[01:19:25.720 --> 01:19:29.220]  имеется ввиду что как бы у меня есть не таратор со сведениями то есть как бы хочется чтобы
[01:19:29.220 --> 01:19:32.620]  эти сведения остались прежними то есть я был что тот же самый сервер тот же
[01:19:32.620 --> 01:19:44.060]  самый сундук и так далее но да то есть как бы и таратор это он говорит что
[01:19:44.060 --> 01:19:47.340]  где-то там вот есть сундук вот в этот сундук вот теперь чтоб там лежала вот
[01:19:47.340 --> 01:19:51.020]  это то есть если кто-то ссылался на этот сундук значит вот вот пусть он на
[01:19:51.020 --> 01:20:00.900]  него ссылается тут все коррект вот вот такая вот идея красивая вот так значит
[01:20:00.900 --> 01:20:06.100]  что у нас тут теперь дальше так ну дальше я чувствую крыш код придется все
[01:20:06.100 --> 01:20:12.660]  таки стирать потому что да да да да да совершенно верно а у нас этот вал не
[01:20:12.660 --> 01:20:18.100]  закончился потому что теперь остается маленькая подляночка потому что если
[01:20:18.100 --> 01:20:22.900]  ребенок существует то придется то как бы что мы дальше будем делать нам придется его
[01:20:22.900 --> 01:20:29.860]  скачать посмотреть не сильно ли много там детей но вот такие ключиков и если
[01:20:29.860 --> 01:20:35.900]  слишком много то один придется повысть вот ну уж ладно раз уже селись давайте
[01:20:35.900 --> 01:20:39.340]  доделаем правда правда для этого придется видимо тут чуть-чуть постереть
[01:20:39.340 --> 01:20:44.340]  вот вот эту часть можно уже стирать вот я вот жалко вот это писали бы на
[01:20:44.340 --> 01:20:52.700]  экране бы конечно это копипас ну и сейчас конечно вот значит смотрим что же
[01:20:52.700 --> 01:20:57.540]  у нас происходит тут вот давайте тут
[01:21:23.540 --> 01:21:31.020]  так кого оптимизит
[01:21:31.020 --> 01:21:46.020]  да и чоп и чоп прям оптимизирует интересно но да да задача давайте да давайте в
[01:21:46.020 --> 01:21:54.300]  стд сэп подсунем бы дерево будет ли она работать быстрее и что помогает
[01:21:54.300 --> 01:22:11.020]  мясо ой да да да да да да господи так ладно начали поехали так что нам там
[01:22:11.020 --> 01:22:16.620]  надо значит нам надо полезть в этот вот постит и скачать новую вершину но давайте
[01:22:16.620 --> 01:22:29.260]  скачать значит ноде там вот этот вот пост чайлт равно да ум лод так как мы да
[01:22:29.260 --> 01:22:39.700]  он лод пишем нет мы не так пишем до лод мы пишем пост и точка до лод до лод так
[01:22:39.700 --> 01:22:51.540]  загружаем ребеночек так ладно давайте начито раночь какая у меня тут первая
[01:22:51.540 --> 01:22:59.340]  идея которая возникает но давайте сразу себе отсечем простой случай если оказалось что пост
[01:22:59.340 --> 01:23:09.100]  чайлт точка кис точка сайз оказался совершенно случайно меньше чем 2 умножь на t минус 1
[01:23:09.100 --> 01:23:24.740]  то что мы делаем ну понятно вит равно постит тогда действительно в равно пост чайлт ну и
[01:23:24.740 --> 01:23:40.860]  континю вот вот начать с этого момента мы значит мы поняли вот значит теперь мы понимаем что как
[01:23:40.860 --> 01:23:49.540]  бы пост чайлт слишком жирный его придется распилить как же нам это сделать но наверное
[01:23:49.540 --> 01:23:56.500]  но наверное неси любой ну давай так ну давайте как этого пост чайлта распилить ну как всегда
[01:23:56.500 --> 01:24:08.140]  значит пишем левт значит пишем левт чает у нас пилится от чего так ну давайте так я сейчас не
[01:24:08.140 --> 01:24:18.700]  буду не буду все переписывать поэтому скажу поэтому скажу что он там от пост чайлт точка кис от нуля
[01:24:18.820 --> 01:24:38.980]  до t минус 1 вот и значит пост чайлт точка чилдер от нуля до t так так ладно никого надеюсь вот
[01:24:38.980 --> 01:24:51.900]  это спонтанное обозначение не пугает вот ну так но я тут немножко как ну как-то нас водится я
[01:24:51.900 --> 01:25:04.740]  тут немножко сократить себе там собственно за эту работу решил поэтому так вот да то есть
[01:25:04.740 --> 01:25:17.580]  пост чайлт точка кис от значит от чего тут получается от t до 2 t минус 2 так ну и
[01:25:17.580 --> 01:25:29.820]  соответственно пост чайлт точка чилдер от соответственно чего-то тум-пум 2 t минус 1 тут
[01:25:30.300 --> 01:25:47.820]  да так а ну тогда у нас тут нет сейчас тогда у нас тут t минус 2 вот хотя надо было полу интервал
[01:25:47.820 --> 01:25:58.580]  написать было бы хорошо да ну ладно не важно вот так ну хорошо рай райт чайлд создали так
[01:25:58.580 --> 01:26:06.420]  ладно сама вот пост чайлдом можно наверное удалить так как как у нас то функция называлась
[01:26:06.420 --> 01:26:25.220]  а эйс оф бейса эггейс фромбейс да давайте так рейс фромбейс пост чайлд так
[01:26:25.220 --> 01:26:40.380]  так ну и теперь значит значит ну и соответственно вершину в надо сделать получается так так ну
[01:26:40.380 --> 01:26:45.740]  давайте так ладно чем с того что создадим детей точнее не просто создадим детей а положим их
[01:26:45.740 --> 01:26:55.500]  как-то но положим их в базу вот как-то как известно мало мало создать детей надо еще
[01:26:55.500 --> 01:27:05.260]  найти найти в их правильное место в жизни да так значит так что у нас тут но деит
[01:27:05.260 --> 01:27:24.420]  лэфт чайлд это равно значит а плот уплот нью нодя от но я вот так и пасторша должна
[01:27:24.420 --> 01:27:29.620]  была быть функция крыша попилили попилить ребеночка в авдолите как может радоваться будет
[01:27:29.620 --> 01:27:39.500]  функция значит объединить ребеночка вот значит вот такая значит лэфт чайлд
[01:27:39.500 --> 01:28:03.340]  не прошла фишка такая прикинь это это мы только вставку пишем да то есть дикарь
[01:28:03.340 --> 01:28:13.740]  дикарта дерево уже бы уже бы тут все полностью убестилось надо не в прошлый раз кто-то задавал
[01:28:13.740 --> 01:28:17.580]  в этом месте правильный вопрос как бы и чтобы дикарта деревен уже чтобы делать сплит и мерч
[01:28:17.580 --> 01:28:21.620]  потому что так то если вам нужно было делать только вставку удаления в общем-то статус это
[01:28:21.620 --> 01:28:28.500]  никто не отменял если да он ордер от сет кстати тоже вот так и очень глупо было бы этим не
[01:28:28.500 --> 01:28:35.460]  пользоваться хотя вот честное в наше время нас старались давать задачи
[01:28:35.460 --> 01:28:45.740]  но почему теоретически есть
[01:28:45.740 --> 01:28:59.500]  нет а элементарно потому что для того чтобы это нужно было делать нужно в каждой вершине
[01:28:59.500 --> 01:29:06.700]  хранить размер под дерево а это это лишняя память от не решили но ты не решили избавиться то
[01:29:06.700 --> 01:29:12.780]  есть это опять часть вот тех самых трейдов так-то можно сказать а почему в сети нельзя делать
[01:29:12.780 --> 01:29:22.620]  сплит и мерч почему нельзя там да вот что за безобразие то есть вот то есть как бы да тут
[01:29:22.620 --> 01:29:28.620]  проблема в том что можно это все сделать но как бы если нам нужен только то есть если кому-то
[01:29:28.620 --> 01:29:33.140]  нужен рабочий христианский сет который умеет только вот вставлять удалять и искать то в общем-то
[01:29:33.140 --> 01:29:43.060]  тогда он просто будет работать дольше чем мог бы так дети так ребята тихо так дети созданы
[01:29:43.060 --> 01:29:56.180]  значит поехали так теперь пришло время обновлять вершину в значит то как ее обновлять в тактих
[01:29:56.820 --> 01:30:03.740]  значит в точка кис так но значит получается вот в этот вот в это посовое место нужно вставить
[01:30:03.740 --> 01:30:14.980]  значит вис пишем инсерт от куда от в точка кис точка пост и тут соответственно пост чайлд
[01:30:14.980 --> 01:30:24.860]  точка кис вот этот вот и ты минус первый значит вставили этого товарища теперь а теперь расскажите
[01:30:24.860 --> 01:30:40.740]  мне куда вставлять детей чего нет ну не все почему середину не в середину
[01:30:40.740 --> 01:31:01.900]  да да да беги пум пум плюс пост запятая да так ладно придется это тоже стереть все-таки мы
[01:31:01.900 --> 01:31:16.660]  не уложились в доску так ну ничего страшно уж кошмар покидите что вот нет я только начал
[01:31:16.660 --> 01:31:26.340]  стирать сам инсер вот значит так шли у нас тут две линии и они продолжают идти так значит в
[01:31:26.340 --> 01:31:35.460]  кис значит вставили этот вставили но тут фишка такая в чилдранов значит тот чилдран
[01:31:35.460 --> 01:31:53.940]  посовое на самом деле мы напишем лев чайлдит вот так и в этом чилдран точка инсерт от в точке
[01:31:53.940 --> 01:32:12.180]  чилдран точка беги плюс пост и собственно райт чайлдит вот и вот теперь соответственно можно
[01:32:12.180 --> 01:32:24.900]  вит точка а плот от в и в конце все равно нам остается так ученым теперь надо сделать теперь
[01:32:24.900 --> 01:32:36.660]  вит равно чему ну ки меньше чем пост и точка кис от вот этого t минус 1
[01:32:36.660 --> 01:32:54.660]  спасибо плюс один молодцы так лев чайлдит а тут двое точек райт
[01:32:54.900 --> 01:33:11.340]  чайлдит вот так ну и соответственно в равно ки меньше того же самого и с от ты минус 1
[01:33:11.340 --> 01:33:25.460]  лев чайлдит то это ки райт чайлдит так что тут у нас значит соответственно да на этом вайлик
[01:33:25.460 --> 01:33:33.700]  заканчивается и мы выбрасываемся а уже а тут мы можем даже не заморачиваться потому что
[01:33:33.700 --> 01:33:54.940]  выбрасывание произойдет не здесь вот теперь хорошо нет нет а ой да да да да да да да да да да
[01:33:54.940 --> 01:34:22.540]  да вот так вот так что вот такая вот красота у нас возникает так это мы делали вставку ой ой ой
[01:34:24.940 --> 01:34:47.420]  так что мы делаем именно таким образом что если ки меньше чем пост чайлд кис
[01:34:47.420 --> 01:34:59.460]  а что не так нет потому что как бы у нас бы как бы появился новый ключик то есть в этой
[01:34:59.460 --> 01:35:03.620]  вот середине да то есть как бы тот ребенок который мы хотели спустить он распилился на два нам нужно
[01:35:03.620 --> 01:35:10.620]  пойти там в левую часть пойти или вправо но как бы точка распила стал и стал именно вот этот
[01:35:10.620 --> 01:35:26.700]  ключик который мы тут еще и добавляли вот нет мы его не удалили мы ему повысили вершину в
[01:35:26.700 --> 01:35:37.260]  чай нет ну пост чайлд уже не существует после они существует существует его левая половина
[01:35:37.260 --> 01:35:44.300]  правая половина и то что было посередине то есть сам этот ключик который повысился да нет мы
[01:35:44.300 --> 01:35:49.580]  пользуемся вот то есть у нас тут лежит какая-то старая копия мы им пользуемся то есть да мы его
[01:35:49.580 --> 01:35:57.140]  ликвидировали в базе до базе его не существует но у нас локально он есть нам это удобно так что
[01:35:57.140 --> 01:36:05.020]  вот такая красота остался только остался только выяснить маленькую приятную вещь а как делать
[01:36:05.020 --> 01:36:17.260]  удаление мяса не рано не но не оно в общем-то можно пробить но думаю думаю для того чтобы
[01:36:17.260 --> 01:36:26.780]  успешно сделать пришло время сделать и перерыв конечно так и так как же удалять элемент вот
[01:36:27.340 --> 01:36:39.100]  как же теперь удалить элемент из дерева так причем опять же видимо какая-то такая идея что
[01:36:39.100 --> 01:36:46.380]  мы хотим как-то это делать сверху вниз чем у нас теперь подлость подлость заключается в том что мы
[01:36:46.380 --> 01:36:52.860]  и не то есть мы теперь особо не выбираем откуда удалять потому что где элемент находится оттуда
[01:36:52.860 --> 01:37:03.100]  его удалять каким-то образом и надо логично правда вот делать вот то есть вот действительно
[01:37:03.100 --> 01:37:08.260]  высекает такая маленькая но хотя с другой стороны то есть мы умеем безболезненно удалять только из
[01:37:08.260 --> 01:37:16.380]  листа и то в предположении что там хотя бы те ключи правда вот ну не говоря о том что придется
[01:37:16.380 --> 01:37:21.020]  рассмотреть видимо какие всякие эти там какие-то это мир за парой там мелкие случаи типа что у
[01:37:21.020 --> 01:37:27.060]  вас существует только корень там выпиливать элемент надо из него там вот ну и так далее но
[01:37:27.060 --> 01:37:34.540]  подлянка может быть том что что делать если удаляемый элемент оказался не в листе но потому
[01:37:34.540 --> 01:37:39.460]  что наверно то есть конечно можно каким-то образом там идти сверху вниз и добиваться того что в
[01:37:39.460 --> 01:37:47.580]  вершине в которую вы смотрите хотя бы то ключи или ну просто хотя бы так ключи вот да то есть это
[01:37:47.580 --> 01:37:52.540]  конечно возможно мы это сделаем но с другой стороны высекает вопрос а что делать если удаляемый
[01:37:52.540 --> 01:38:07.980]  ключик находится не в листе вот да ну видимо да придется каким-то образом его опустить но каким
[01:38:07.980 --> 01:38:27.500]  образом мы можем опустить но на соответствии по ситуации но хотя давайте смотреть потому что
[01:38:27.500 --> 01:38:34.060]  конечно первый способ который хочется рассмотреть конечно идеальный способ это вот у вас есть ключик
[01:38:34.060 --> 01:38:40.820]  неожиданно вот у вас есть ключик и неожиданно выяснилось что у вас тут но вот и но вот и
[01:38:40.820 --> 01:38:47.980]  выяснилось что у вас тут два ребенка и у каждого по t минус один ключик тогда это прям идеально
[01:38:47.980 --> 01:38:53.620]  тогда значит мы берем тогда мы просто делаем операцию обратную то что была то есть мы вот
[01:38:53.620 --> 01:39:05.220]  это вот сюда переносим там собственно вставляем ну вот здесь у нас вот так получается вот ну если
[01:39:05.220 --> 01:39:12.540]  предполагать что у нас тут было хотя бы ты вершин то это валидная операция очень удобно но это нам
[01:39:12.540 --> 01:39:20.620]  должно прям супер повести чтоб тут было t минус один и t минус один а что делать если тут где-то
[01:39:20.620 --> 01:39:33.420]  не ты минус один чем чем кого отпилить куда отпилить
[01:39:34.020 --> 01:39:50.300]  года сlio считают
[01:39:55.500 --> 01:40:01.020]  сейчас так пойдем справа возьмем самые левые да так
[01:40:01.020 --> 01:40:07.560]  так хорошо пройдем где ну хорошо нашли мы этот ну допустим мы нашли в принципе мы по этому
[01:40:07.560 --> 01:40:15.640]  левому пути можем прогуляться в принципе за от единицы там за от единицы памяти даже нет
[01:40:15.640 --> 01:40:21.480]  почему нет почему нет почему прогуляться нет есть у меня задача найти самую левую вершину в
[01:40:21.480 --> 01:40:30.360]  подделье вот этой то мы можем это сделать просто вайликом пройтись ну тупо берем вершину берем там
[01:40:30.360 --> 01:40:43.800]  самого левого ребенка записываем на ее место но логарифом будем обращаться а ну по нет по
[01:40:43.800 --> 01:40:49.700]  памяти будет адекватно вот это по времени возможно лог квадрат конечно хотя хотя с другой стороны тут
[01:40:49.700 --> 01:40:55.440]  вещь такая на самом деле если вы просто пойдете вот сюда и скажете что дорогие друзья начинает
[01:40:55.440 --> 01:41:02.360]  этот момент я буду удалять самый левый элемент который вот у вас только есть вот этот вот да то
[01:41:02.360 --> 01:41:06.520]  в принципе идея будет такая что вам то есть на самом деле вас будет только логарифом потому что
[01:41:06.520 --> 01:41:12.000]  то есть идея будет том что вы всегда будете двигаться там вниз вниз вниз то есть добиваться
[01:41:12.000 --> 01:41:16.480]  того чтобы тут вершины были размера хотя бы т и потом когда вы придете в этот лист у вас будет
[01:41:16.480 --> 01:41:25.760]  вершина размера t или более и тогда вы хотя это даже неважно но вот то есть как бы и тогда вы
[01:41:25.760 --> 01:41:33.480]  этот элементом удалите или там просто подмена там замените на это не точнее наоборот точнее
[01:41:33.480 --> 01:41:42.440]  достанете этот элемент удалите его и положите его вот аккуратненько на это место так что вот
[01:41:42.440 --> 01:41:58.400]  такая вот не очень хитрый а как его спускать еще тут не t-1 и t-1
[01:41:58.400 --> 01:42:05.960]  у нас получится какой-то массивчик больше чем 2t-1 мы из него достанем вершину симметричную по
[01:42:05.960 --> 01:42:16.280]  позиции нам же можно спустить вниз сейчас стоп стоп уже да только мою только мою да супер если бы
[01:42:16.280 --> 01:42:23.800]  не одно но а если тут 2t-1 и 2t-1 тогда тогда ты просто этот же элемент назад и вернешь
[01:42:23.800 --> 01:42:31.200]  вот поэтому оказывается так то есть идея такая еще раз и допустим мы тут шли шли шли сверху и
[01:42:31.200 --> 01:42:38.600]  нашли элемент который надо удалять идея такая значит тогда этот элемент мы будем некоторое
[01:42:38.600 --> 01:42:44.000]  время пропихивать вниз то есть если мы видим что у него дети справа и слева от него t-1 то мы его
[01:42:44.000 --> 01:42:51.240]  пропихиваем вниз но как только обнаружилось что один из ребенков оказался больше либо равен
[01:42:51.480 --> 01:42:59.520]  например правой то тогда мы объявляем следующий мы идем в этого правого ребенка удаляем из него
[01:42:59.520 --> 01:43:06.480]  минимальный в нем элемент вполне себе залогарифом обратите внимание до и этот минимальный элемент
[01:43:06.480 --> 01:43:15.600]  просто записываем на место вот этого то есть вот такая вот ну в принципе то есть это технология
[01:43:16.400 --> 01:43:25.060]  делали в обычных двоичных деревьях а потому что надо этим надо еще подумать потому что
[01:43:25.060 --> 01:43:30.240]  надо поддерживать надо спускаться и поддерживать инвариант что в каждой вершине то есть на
[01:43:30.240 --> 01:43:35.240]  bakın есть мы просто идем близко знаю допустим что удаляемая вершина находится в листе и
[01:43:35.240 --> 01:43:42.140]  мы поддерживаем инвариант что в каждой вершине с которой мы работаем хотя бы те ключиков вот эти
[01:43:42.140 --> 01:43:45.280]  База у нас, кстати, есть. Вот тут он же хотя бы Т.
[01:43:49.280 --> 01:43:51.800]  Что смущает? Смущает то, что мы не проговорили,
[01:43:51.800 --> 01:43:54.960]  о каким образом мы будем это делать. Пока я это сказал только на уровне идеи.
[01:43:57.600 --> 01:44:01.880]  Ну а теперь у нас есть какая-то вопрос. Как поддерживать вариант, что туда, куда мы спускаемся?
[01:44:02.840 --> 01:44:06.680]  А ведь давайте сразу, кстати, обобщим. То есть мы тут мы спускаемся только влево,
[01:44:06.680 --> 01:44:10.440]  ну или в симметричном, возможно, симметричном случае, когда спускаемся только вправо.
[01:44:11.100 --> 01:44:14.140]  Но на самом деле нам же еще до этой вершины надо как-то дойти.
[01:44:15.380 --> 01:44:19.340]  И более того, кстати, обратите внимание, в этой вершине нам тоже нужно требовать,
[01:44:19.340 --> 01:44:21.740]  чтоб тут было хотя бы Т. вершин.
[01:44:23.180 --> 01:44:28.340]  А что это требование обеспечивает? Это требование обеспечивает, что мы хотя бы в принципе можем
[01:44:28.340 --> 01:44:30.900]  удалить из этого поддерва вершину и ничего не сломалось.
[01:44:34.300 --> 01:44:35.300]  Т ключиков, да.
[01:44:37.940 --> 01:44:39.420]  А потому что у нас еще дети есть.
[01:44:41.100 --> 01:44:44.300]  Да, если бы это было не 100, да, мы бы просто удалили и не заморачивались бы.
[01:44:45.300 --> 01:44:51.100]  Да, но у нас есть дети. Детей должен быть ровно на один тем ключиков, еще и с вредными вариантами.
[01:45:00.300 --> 01:45:03.260]  Но сейчас давайте смотреть, да. Ну и сейчас это обсудим.
[01:45:03.260 --> 01:45:06.460]  Да, сейчас просто хочется подчеркнуть, что в принципе можно было пытаться сказать,
[01:45:06.480 --> 01:45:10.720]  да, нельзя, а зачем нам это больше либо равно Т, нельзя ли без этого варианта обойтись вообще.
[01:45:12.520 --> 01:45:16.320]  Но тут сразу оговоримся, потому что мы хотим избирать такой ситуации.
[01:45:16.320 --> 01:45:20.800]  Дело в том, что может тогда теоретически возникнуть ситуация, когда вы находитесь под дереве,
[01:45:20.800 --> 01:45:24.400]  где все вершины, у всех вершин ровно по Т-1 ключиков.
[01:45:26.120 --> 01:45:30.000]  Тогда утверждение, вы из нее ничего удалить не можете в принципе.
[01:45:32.800 --> 01:45:35.400]  Потому что дерево должно остаться той же высоты.
[01:45:36.340 --> 01:45:39.340]  И у вас там минимальное количество ключиков, которые там может быть.
[01:45:42.340 --> 01:45:47.140]  В общем-то, обратите внимание, кстати, в инсекте тоже вот этот вариант, что у вас в корне меньше,
[01:45:47.140 --> 01:45:52.180]  чем 2Т-1, гарантирует, что у вас не это переполненное дерево, когда там все по 2Т-1,
[01:45:52.180 --> 01:45:54.380]  и когда добавить одну вершину, у вас там будет бабах.
[01:45:57.940 --> 01:46:00.380]  Поэтому такой вот необходимый вариант.
[01:46:01.360 --> 01:46:04.360]  И так у нас два случая.
[01:46:04.360 --> 01:46:08.360]  То есть у нас в принципе две части, на самом деле, будет нашего эрейса.
[01:46:08.360 --> 01:46:11.360]  До того, как мы нашли вершину, которую хотим удалить.
[01:46:11.360 --> 01:46:16.360]  И после того, как мы ее уже нашли и хотим пропихивать куда-то вниз.
[01:46:17.360 --> 01:46:19.360]  Но суть везде одна.
[01:46:21.360 --> 01:46:23.360]  Но суть там в промежутках везде одна.
[01:46:23.360 --> 01:46:28.360]  Жила была вершина, в ней детей больше либо равно Т.
[01:46:29.340 --> 01:46:32.340]  Вот. Больше либо равно Т.
[01:46:32.340 --> 01:46:35.340]  Я хочу спуститься в какое-то поддерево, ну, допустим, вот это.
[01:46:38.340 --> 01:46:40.340]  Ну, естественно, говорю я так.
[01:46:40.340 --> 01:46:43.340]  Ну, никаких проблем спуститься в это поддерево.
[01:46:43.340 --> 01:46:46.340]  Нет, если там тоже больше, чем Т-1 ключиков.
[01:46:46.340 --> 01:46:48.340]  Я просто туда спускаюсь и не заморачиваюсь.
[01:46:49.340 --> 01:46:53.340]  Но что делать, если там оказалось ровно Т-1 ключиков?
[01:46:54.320 --> 01:46:57.320]  Ну, тогда идея такая.
[01:46:57.320 --> 01:46:59.320]  Давайте рассмотрим соседа.
[01:46:59.320 --> 01:47:01.320]  Да, кстати, сосед может быть вообще один.
[01:47:03.320 --> 01:47:05.320]  Вот такой сосед.
[01:47:05.320 --> 01:47:06.320]  Рассмотрим соседа.
[01:47:06.320 --> 01:47:10.320]  Как мы уже поняли, если тут тоже Т-1 вершина,
[01:47:10.320 --> 01:47:14.320]  то давайте вот эту вершинку между ними торжественно спустим сюда.
[01:47:16.320 --> 01:47:21.320]  Тогда у нас тут получится, тут вершина 2Т-1, мы в нее торжественно переходим.
[01:47:22.300 --> 01:47:23.300]  Вот.
[01:47:23.300 --> 01:47:27.300]  Но что делать, если так не работает?
[01:47:27.300 --> 01:47:30.300]  И тут сосед оказался больше, чем Т-1.
[01:47:33.300 --> 01:47:34.300]  Ну, вот.
[01:47:36.300 --> 01:47:38.300]  Нет, погодите, погодите.
[01:47:38.300 --> 01:47:42.300]  Это мы делаем еще, как бы это еще неудаляемый ключик.
[01:47:43.300 --> 01:47:46.300]  То есть как бы нам просто надо как-то правильно спуститься.
[01:47:47.280 --> 01:47:50.280]  То есть поэтому там рекурсивно пойти и отпилить у него там
[01:47:50.280 --> 01:47:53.280]  самого правого ребенка, это лог квадрат.
[01:47:57.280 --> 01:47:58.280]  Так.
[01:47:59.280 --> 01:48:00.280]  Так.
[01:48:02.280 --> 01:48:03.280]  Да, совершенно верно.
[01:48:03.280 --> 01:48:05.280]  Да, то есть оказывается, да.
[01:48:05.280 --> 01:48:08.280]  То есть сейчас то, что мы сделаем, на самом деле будет очень похоже
[01:48:08.280 --> 01:48:11.280]  на малый левый поворот или малый правый.
[01:48:12.280 --> 01:48:15.280]  Как говорится, неделю назад мы таким баловались, помните?
[01:48:16.260 --> 01:48:18.260]  Так вот неожиданно это вылезает и здесь.
[01:48:18.260 --> 01:48:22.260]  Рассмотрим самый правый ключик и на нем висит под дерево альфа.
[01:48:22.260 --> 01:48:24.260]  Вот балалайка такая.
[01:48:24.260 --> 01:48:25.260]  Вот.
[01:48:26.260 --> 01:48:29.260]  Да, этот элемент мы назовем А, а этот элемент назовем B.
[01:48:30.260 --> 01:48:32.260]  Так вот возникает неожиданная идея.
[01:48:33.260 --> 01:48:36.260]  То есть вот тут была какая-то борода тут.
[01:48:38.260 --> 01:48:39.260]  Вот.
[01:48:39.260 --> 01:48:42.260]  И тогда, оказывается, с этими вершинами можно сделать поворот.
[01:48:43.240 --> 01:48:45.240]  Значит, идея такая.
[01:48:45.240 --> 01:48:47.240]  То есть этот ключик ликвидировать.
[01:48:49.240 --> 01:48:52.240]  Точнее не ликвидировать, а записать вот сюда.
[01:48:53.240 --> 01:48:55.240]  То есть вместо B сюда записать А.
[01:48:55.240 --> 01:48:57.240]  Куда же денется ключик B?
[01:48:57.240 --> 01:48:59.240]  Ключик B мы поместим вот сюда.
[01:49:00.240 --> 01:49:02.240]  Но слева от него тоже должен быть ребеночек?
[01:49:02.240 --> 01:49:05.240]  Ну так давайте этого ребеночка альфа сюда и переподвесь.
[01:49:09.240 --> 01:49:11.240]  Вот, понятная идея, да?
[01:49:12.220 --> 01:49:14.220]  То есть просто поворот.
[01:49:15.220 --> 01:49:16.220]  Такой красивый.
[01:49:16.220 --> 01:49:18.220]  И теперь чего мы добиваемся?
[01:49:18.220 --> 01:49:22.220]  Мы добиваемся того, что туда, куда мы хотели спуститься вот сюда,
[01:49:22.220 --> 01:49:28.220]  здесь уже стало в вершинке Т ключиков, значит с ней можно работать.
[01:49:31.220 --> 01:49:33.220]  Вот, понятна логика, да?
[01:49:35.220 --> 01:49:39.220]  То есть, смотрите, получается вот таким механизмом мы можем дойти до той вершины,
[01:49:40.200 --> 01:49:45.200]  в которой у нас находится удаляемый ключ и добиться того,
[01:49:45.200 --> 01:49:47.200]  чтобы в этой вершине было хотя бы Т ключей.
[01:49:47.200 --> 01:49:49.200]  Ну а дальше мы действуем ровно дальше.
[01:49:51.200 --> 01:49:53.200]  То есть дальше мы, соответственно,
[01:49:53.200 --> 01:49:57.200]  некоторое время там пока тут Т-1, Т-1 этот ключ спускаем,
[01:49:57.200 --> 01:50:00.200]  потом если обнаруживаем в какой-то момент соседа больше либо равно Т,
[01:50:00.200 --> 01:50:04.200]  то просто из него мы удаляем самый левый ключ и помещаем его сюда.
[01:50:04.200 --> 01:50:07.200]  Ну в процессе, когда мы спускаемся к самому левому ключу,
[01:50:07.200 --> 01:50:09.200]  мы как раз и поддержим этот вариант.
[01:50:10.180 --> 01:50:12.180]  То есть мы как раз и делаем эти повороты.
[01:50:13.180 --> 01:50:17.180]  Ну да, делаем повороты или иногда вот эти вершины спускаем,
[01:50:17.180 --> 01:50:18.180]  там как повезет.
[01:50:20.180 --> 01:50:24.180]  То есть мы спускаемся в вершину и там Т-1 ключ.
[01:50:24.180 --> 01:50:26.180]  Как с этой проблемой справиться?
[01:50:26.180 --> 01:50:28.180]  Либо поворотом, либо спуском.
[01:50:29.180 --> 01:50:31.180]  Ну в зависимости от ситуации.
[01:50:33.180 --> 01:50:34.180]  Так что вот такое.
[01:50:34.180 --> 01:50:36.180]  Ну еще, конечно, придется оговориться,
[01:50:37.160 --> 01:50:39.160]  если это реально писать в коде,
[01:50:39.160 --> 01:50:41.160]  то, конечно, еще нам придется оговориться о корне.
[01:50:46.160 --> 01:50:49.160]  Да, иногда должна, но здесь понятна какая идея,
[01:50:49.160 --> 01:50:52.160]  что рассмотрим корень, в котором, допустим,
[01:50:52.160 --> 01:50:55.160]  там остался бедный один ключик.
[01:50:55.160 --> 01:50:57.160]  Ну потому что если там осталось хотя бы два ключика,
[01:50:57.160 --> 01:50:59.160]  то работаем ровно так же.
[01:51:00.160 --> 01:51:02.160]  Что делать, если остался один ключик?
[01:51:03.160 --> 01:51:05.160]  Ну тут, как всегда, по ситуации, на самом деле,
[01:51:05.160 --> 01:51:10.140]  предположим пока, что этот ключик удалять не надо.
[01:51:10.140 --> 01:51:11.140]  Тогда что мы делаем?
[01:51:11.140 --> 01:51:13.140]  Мы должны куда-то спуститься, допустим, влево.
[01:51:14.140 --> 01:51:17.140]  Ну тут, как всегда, значит, если тут оказалось Т-1,
[01:51:17.140 --> 01:51:19.140]  то, значит, надо сделать,
[01:51:19.140 --> 01:51:21.140]  то есть если тут и тут Т-1,
[01:51:21.140 --> 01:51:23.140]  значит, нам остается этот ключик просто опустить.
[01:51:27.140 --> 01:51:30.140]  Да, но с оговоркой, что в корне нам необязательно,
[01:51:30.140 --> 01:51:32.140]  чтобы тут было Т ключиков.
[01:51:33.120 --> 01:51:34.120]  Ясно.
[01:51:34.120 --> 01:51:36.120]  То есть тут надо поддерживать инвариант,
[01:51:36.120 --> 01:51:38.120]  что инвариант более точно звучит так.
[01:51:39.120 --> 01:51:41.120]  В вершине, который вы рассматриваете,
[01:51:41.120 --> 01:51:44.120]  ключиков хотя бы на один больше, чем минимум.
[01:51:45.120 --> 01:51:47.120]  То есть мы хотим поддерживать инвариант,
[01:51:47.120 --> 01:51:49.120]  что в корне...
[01:51:49.120 --> 01:51:53.120]  Ну не совсем, ладно, у нас не удастся поддерживать прям такой инвариант.
[01:51:56.120 --> 01:51:58.120]  Но, значит, тут у нас...
[01:51:58.120 --> 01:52:00.120]  Ну то есть по-разному, на самом деле, можно сделать,
[01:52:01.100 --> 01:52:03.100]  потому что можно такой инвариант объявить и его поддержать,
[01:52:03.100 --> 01:52:05.100]  потому что сказать,
[01:52:05.100 --> 01:52:07.100]  мы хотим решить проблему,
[01:52:07.100 --> 01:52:09.100]  что у нас один ключик в корне.
[01:52:10.100 --> 01:52:12.100]  Так, как это решается?
[01:52:12.100 --> 01:52:14.100]  Ну давайте посмотрим на детей.
[01:52:14.100 --> 01:52:16.100]  Если тут Т-1 и тут Т-1,
[01:52:16.100 --> 01:52:19.100]  то там как бы работаем стандартным образом.
[01:52:20.100 --> 01:52:22.100]  То есть там понятно, спускаем этот ключик
[01:52:22.100 --> 01:52:25.100]  и объявляем просто корень на меньшей высоты.
[01:52:27.100 --> 01:52:29.100]  Что делать в ином случае?
[01:52:31.100 --> 01:52:33.100]  В ином случае, правда, не понятно,
[01:52:33.100 --> 01:52:35.100]  откуда вы выкопаете вторую вершинку.
[01:52:35.100 --> 01:52:37.100]  Но с другой стороны, нам на самом деле и не надо.
[01:52:37.100 --> 01:52:39.100]  Может отбросить лучше этот инвариант.
[01:52:39.100 --> 01:52:41.100]  Потому что если у нас...
[01:52:41.100 --> 01:52:43.100]  Во-первых, если оказалось, что вы хотите спуститься
[01:52:43.100 --> 01:52:45.100]  в левое под дерево,
[01:52:45.100 --> 01:52:47.100]  а там больше либо равно это ключик,
[01:52:47.100 --> 01:52:49.100]  то в общем-то и заморачиваться не надо больше.
[01:52:49.100 --> 01:52:51.100]  Пусть там в корне висит этот ключик,
[01:52:51.100 --> 01:52:53.100]  пусть он там думает о себе что угодно.
[01:52:53.100 --> 01:52:55.100]  А мы тут поработаем.
[01:52:55.100 --> 01:52:57.100]  Вот.
[01:52:57.100 --> 01:52:59.100]  Ну а если оказалось, что нам надо спуститься
[01:52:59.100 --> 01:53:01.100]  т-1, а справа оказалось
[01:53:01.100 --> 01:53:03.100]  в общем-то больше либо равно t,
[01:53:03.100 --> 01:53:05.100]  то значит даже если этот ключик 1,
[01:53:05.100 --> 01:53:07.100]  как бы малый правый поворот никто не отменял.
[01:53:11.100 --> 01:53:13.100]  То есть это отдельный случай с корнем
[01:53:13.100 --> 01:53:15.100]  придется разобрать.
[01:53:15.100 --> 01:53:17.100]  Сейчас мы этот код писать естественно не будем.
[01:53:25.100 --> 01:53:27.100]  А в какой момент
[01:53:27.100 --> 01:53:29.100]  это условие резко нарушается?
[01:53:39.100 --> 01:53:41.100]  Нет, но обратите внимание,
[01:53:41.100 --> 01:53:43.100]  мы с деревом вообще по большому счету что делаем?
[01:53:43.100 --> 01:53:45.100]  Что в инсерте, что в дынете?
[01:53:45.100 --> 01:53:47.100]  Вот эти вот операции туда-сюда, да?
[01:53:47.100 --> 01:53:49.100]  Но это как бы распил ребенка,
[01:53:49.100 --> 01:53:51.100]  но как бы все листы остаются теми же.
[01:53:51.100 --> 01:53:53.100]  Ну максимум что может быть,
[01:53:53.100 --> 01:53:55.100]  эта вершина будет.
[01:53:55.100 --> 01:53:57.100]  Ну максимум что может быть,
[01:53:57.100 --> 01:53:59.100]  эта вершина была лист и она просто распилилась на два листа.
[01:53:59.100 --> 01:54:01.100]  А в любом ином случае,
[01:54:01.100 --> 01:54:03.100]  то есть там просто произошел какой-то
[01:54:03.100 --> 01:54:05.100]  переподвес, то есть там дерево распилилась на два,
[01:54:05.100 --> 01:54:07.100]  но их высоты никуда не делись.
[01:54:07.100 --> 01:54:09.100]  Вот.
[01:54:09.100 --> 01:54:11.100]  Ну или да. То есть вот это, ну типа удобства такое, да.
[01:54:13.100 --> 01:54:15.100]  Ну да, это называется, да,
[01:54:15.100 --> 01:54:17.100]  клад разделился на два подклана, да.
[01:54:21.100 --> 01:54:23.100]  Ну нет, там просто отдельно обрабатывать,
[01:54:23.100 --> 01:54:25.100]  потому что в результате этого действия корень может поменяться.
[01:54:25.100 --> 01:54:27.100]  Во-первых, корень может быть,
[01:54:27.100 --> 01:54:29.100]  там вот просто один ключик,
[01:54:29.100 --> 01:54:31.100]  это поэтому надо отдельно рассматривать всегда, к сожалению.
[01:54:31.100 --> 01:54:33.100]  Вот.
[01:54:33.100 --> 01:54:35.100]  Да, ну и самое приятное,
[01:54:35.100 --> 01:54:37.100]  что,
[01:54:37.100 --> 01:54:39.100]  ну да, то есть единственная проблема,
[01:54:39.100 --> 01:54:41.100]  что скачивать вершин, конечно, придется много.
[01:54:41.100 --> 01:54:43.100]  То есть на каждой высоте
[01:54:43.100 --> 01:54:45.100]  вам придется, возможно,
[01:54:45.100 --> 01:54:47.100]  там скачать аж два ребенка даже.
[01:54:47.100 --> 01:54:49.100]  Ну для поворота.
[01:54:49.100 --> 01:54:51.100]  Ну для поворота, для этого обретенения.
[01:54:51.100 --> 01:54:53.100]  Но,
[01:54:53.100 --> 01:54:55.100]  вот, но тем не менее, но, но тоже
[01:54:55.100 --> 01:54:57.100]  неплохо.
[01:54:57.100 --> 01:54:59.100]  Вот. Но тоже, соответственно,
[01:54:59.100 --> 01:55:01.100]  не так плохо.
[01:55:01.100 --> 01:55:03.100]  Вот. Но мы сейчас, да, не будем сейчас писать код,
[01:55:03.100 --> 01:55:05.100]  а вместо этого задумываемся
[01:55:05.100 --> 01:55:07.100]  над неожиданной вещью.
[01:55:07.100 --> 01:55:09.100]  Значит, это мы сейчас говорили о том, как это, значит,
[01:55:09.100 --> 01:55:11.100]  в идеале реализовывать, там, в реальном мире.
[01:55:11.100 --> 01:55:13.100]  А теперь давайте все-таки
[01:55:13.100 --> 01:55:15.100]  посмотрим на эту структуру данных,
[01:55:15.100 --> 01:55:17.100]  как олимпиагики.
[01:55:17.100 --> 01:55:19.100]  Потому что олимпиагик скажет,
[01:55:19.100 --> 01:55:21.100]  у нас есть дикартовые деревья,
[01:55:21.100 --> 01:55:23.100]  они умеют делать сплит и мерш.
[01:55:25.100 --> 01:55:27.100]  А теперь внимание, вопрос.
[01:55:27.100 --> 01:55:29.100]  Давайте задумаемся.
[01:55:29.100 --> 01:55:31.100]  А умеет ли,
[01:55:31.100 --> 01:55:33.100]  а не умеет ли случайно,
[01:55:33.100 --> 01:55:35.100]  в чем-то, да, в кормании как бы вот это все
[01:55:35.100 --> 01:55:37.100]  подробно описывается.
[01:55:37.100 --> 01:55:39.100]  А потом неожиданно упражнение,
[01:55:39.100 --> 01:55:41.100]  и там упражнение четыре.
[01:55:41.100 --> 01:55:43.100]  Да.
[01:55:43.100 --> 01:55:45.100]  Да. Первое. Напишите мерш.
[01:55:45.100 --> 01:55:47.100]  Напишите мерш.
[01:55:47.100 --> 01:55:49.100]  Напишите, то есть не придумайте, а напишите.
[01:55:49.100 --> 01:55:51.100]  Ну или опишите там,
[01:55:51.100 --> 01:55:53.100]  придумайте. Ну ладно, придумайте.
[01:55:53.100 --> 01:55:55.100]  Хорошо. Придумайте мерш.
[01:55:55.100 --> 01:55:57.100]  И нот.
[01:55:57.100 --> 01:55:59.100]  И придумайте.
[01:55:59.100 --> 01:56:01.100]  И неожиданная нот. А потом после этого
[01:56:01.100 --> 01:56:03.100]  придумайте сплит.
[01:56:05.100 --> 01:56:07.100]  Вот. Но более того,
[01:56:07.100 --> 01:56:09.100]  вам сразу подсказывают.
[01:56:11.100 --> 01:56:13.100]  Какая тут просто основная идея,
[01:56:13.100 --> 01:56:15.100]  которая, как в дикарте, после дикарте,
[01:56:15.100 --> 01:56:17.100]  она может казаться вообще прям контринтуитивной,
[01:56:17.100 --> 01:56:19.100]  но на самом деле...
[01:56:19.100 --> 01:56:21.100]  На самом деле...
[01:56:21.100 --> 01:56:23.100]  Не-не-не.
[01:56:23.100 --> 01:56:25.100]  Значит там подсказка такая.
[01:56:25.100 --> 01:56:27.100]  Значит вам нужно
[01:56:27.100 --> 01:56:29.100]  реализовать функцию...
[01:56:29.100 --> 01:56:31.100]  Значит реализовать функцию мерш.
[01:56:31.100 --> 01:56:33.100]  Да, ну как бы.
[01:56:33.100 --> 01:56:35.100]  Ну то есть как всегда.
[01:56:35.100 --> 01:56:37.100]  Значит мерш от чего?
[01:56:37.100 --> 01:56:39.100]  Вам дано
[01:56:39.100 --> 01:56:41.100]  дерево,
[01:56:41.100 --> 01:56:43.100]  в котором все элементы меньше
[01:56:43.100 --> 01:56:45.100]  икса.
[01:56:45.100 --> 01:56:47.100]  Вам дан сам икс,
[01:56:47.100 --> 01:56:49.100]  прям один элементик.
[01:56:49.100 --> 01:56:51.100]  И дерево, в котором все элементы
[01:56:51.100 --> 01:56:53.100]  больше икса.
[01:56:55.100 --> 01:56:57.100]  Вот.
[01:56:57.100 --> 01:56:59.100]  Да, то есть помните.
[01:56:59.100 --> 01:57:01.100]  Дикартовые деревья тоже рандомные, деревья не мержат.
[01:57:01.100 --> 01:57:03.100]  Ну такие мержат,
[01:57:03.100 --> 01:57:05.100]  но там начинаются там всякие какие-то оценки,
[01:57:05.100 --> 01:57:07.100]  дай бог, чтобы блок куб сошелся.
[01:57:07.100 --> 01:57:09.100]  Вот.
[01:57:09.100 --> 01:57:11.100]  Нет, ну там есть какие-то там такие
[01:57:11.100 --> 01:57:13.100]  развлечения, на самом деле.
[01:57:13.100 --> 01:57:15.100]  Как-то там
[01:57:15.100 --> 01:57:17.100]  правильно...
[01:57:17.100 --> 01:57:19.100]  То есть как-то, как слить сеты,
[01:57:19.100 --> 01:57:21.100]  у которых вот эти вот условия не выполнены.
[01:57:21.100 --> 01:57:23.100]  Да, ну правда там
[01:57:23.100 --> 01:57:25.100]  больше сливаемые дуошки начинают вылезать.
[01:57:25.100 --> 01:57:27.100]  Да, там
[01:57:27.100 --> 01:57:29.100]  и там логарифм вполне себе вылезает.
[01:57:29.100 --> 01:57:31.100]  Вот.
[01:57:31.100 --> 01:57:33.100]  Вот.
[01:57:33.100 --> 01:57:35.100]  Ну да, в какой-то момент мы даже обсудим.
[01:57:35.100 --> 01:57:37.100]  Да, вряд ли успеем
[01:57:37.100 --> 01:57:39.100]  сегодня, но в следующий раз наверно точно.
[01:57:39.100 --> 01:57:41.100]  Вот.
[01:57:41.100 --> 01:57:43.100]  То есть нет, это как бы фишка известная.
[01:57:43.100 --> 01:57:45.100]  Хорошо, понятно.
[01:57:45.100 --> 01:57:47.100]  Так, но самое главное, что там
[01:57:47.100 --> 01:57:49.100]  да, нет, ну все-таки лучше проговорить.
[01:57:49.100 --> 01:57:51.100]  Потому что самое главное,
[01:57:51.100 --> 01:57:53.100]  что
[01:57:53.100 --> 01:57:55.100]  от нас просят, чтобы мерж работал
[01:57:55.100 --> 01:57:57.100]  за симптотику О от 1
[01:57:57.100 --> 01:57:59.100]  плюс разность
[01:57:59.100 --> 01:58:01.100]  высот.
[01:58:01.100 --> 01:58:03.100]  О.
[01:58:03.100 --> 01:58:05.100]  Там
[01:58:05.100 --> 01:58:07.100]  одинаковые тешки.
[01:58:07.100 --> 01:58:09.100]  Не, ну да, да, да, конечно.
[01:58:09.100 --> 01:58:11.100]  Ну как бы это
[01:58:11.100 --> 01:58:13.100]  мы сливаем только там
[01:58:13.100 --> 01:58:15.100]  один тип.
[01:58:15.100 --> 01:58:17.100]  Так что да, да, да.
[01:58:17.100 --> 01:58:19.100]  Так что вот такая вот неожиданная идея.
[01:58:19.100 --> 01:58:21.100]  Что если нам даны два
[01:58:21.100 --> 01:58:23.100]  дерева слить за разность
[01:58:23.100 --> 01:58:25.100]  высот плюс один.
[01:58:25.100 --> 01:58:27.100]  Нет, ну действительно.
[01:58:27.100 --> 01:58:29.100]  Заметим, что если
[01:58:29.100 --> 01:58:31.100]  высоты у этих деревьев совершенно
[01:58:31.100 --> 01:58:33.100]  случайно одинаковые,
[01:58:33.100 --> 01:58:35.100]  то слить оказывается предельно
[01:58:35.100 --> 01:58:37.100]  просто. Надо просто взять корень
[01:58:37.100 --> 01:58:39.100]  тут.
[01:58:39.100 --> 01:58:41.100]  Взять корень тут.
[01:58:41.100 --> 01:58:43.100]  Ну тут борода, борода, борода.
[01:58:43.100 --> 01:58:45.100]  Да, тут борода, тут борода.
[01:58:47.100 --> 01:58:49.100]  И тогда
[01:58:49.100 --> 01:58:51.100]  что мы делаем? Мы просто
[01:58:51.100 --> 01:58:53.100]  объединяем.
[01:58:53.100 --> 01:58:55.100]  То есть объединяем эти списки через
[01:58:55.100 --> 01:58:57.100]  вот этот вот промежуточный х.
[01:58:57.100 --> 01:58:59.100]  И единственное,
[01:58:59.100 --> 01:59:01.100]  что нам надо рассмотреть, а не
[01:59:01.100 --> 01:59:03.100]  получилось ли так, что тут количество ключей
[01:59:03.100 --> 01:59:05.100]  больше чем 2t-1.
[01:59:05.100 --> 01:59:07.100]  Ну могло
[01:59:07.100 --> 01:59:09.100]  получиться меньше, причем насколько угодно,
[01:59:09.100 --> 01:59:11.100]  практически меньше.
[01:59:11.100 --> 01:59:13.100]  Но если оказалось больше, то что делаем?
[01:59:15.100 --> 01:59:17.100]  Ну да.
[01:59:17.100 --> 01:59:19.100]  То делаем очень простую вещь.
[01:59:19.100 --> 01:59:21.100]  То есть просто распиливаем,
[01:59:21.100 --> 01:59:23.100]  выносим, создаем корень
[01:59:23.100 --> 01:59:25.100]  из одной вершины.
[01:59:25.100 --> 01:59:27.100]  Да, распиливаем не обязательно в этом месте,
[01:59:27.100 --> 01:59:29.100]  потому что у каждого
[01:59:29.100 --> 01:59:31.100]  этих старых корней может быть сильно меньше,
[01:59:31.100 --> 01:59:33.100]  чем t-1 ключикам.
[01:59:33.100 --> 01:59:35.100]  А может быть несколько?
[01:59:35.100 --> 01:59:37.100]  Нет.
[01:59:37.100 --> 01:59:39.100]  Нет, смотри, дело в том, что
[01:59:39.100 --> 01:59:41.100]  2t-1, да?
[01:59:41.100 --> 01:59:43.100]  Ну как повезет.
[01:59:43.100 --> 01:59:45.100]  Нет, мы распиливаем, когда у тебя
[01:59:45.100 --> 01:59:47.100]  от 2t до... А сколько тут вообще ключиков
[01:59:47.100 --> 01:59:49.100]  бывает?
[01:59:49.100 --> 01:59:51.100]  Ну в худшем случае тут 2t-1, тут 2t-1.
[01:59:51.100 --> 01:59:53.100]  В худшем случае, да.
[01:59:53.100 --> 01:59:55.100]  4t-1.
[01:59:55.100 --> 01:59:57.100]  Вот.
[01:59:57.100 --> 01:59:59.100]  Но распилить тут достаточно просто.
[01:59:59.100 --> 02:00:01.100]  То есть надо тут...
[02:00:01.100 --> 02:00:03.100]  То есть тут надо просто распилить так,
[02:00:03.100 --> 02:00:05.100]  чтобы каждая часть была как минимум t-1.
[02:00:07.100 --> 02:00:09.100]  Ну в самый тупой случай я бы сказал,
[02:00:09.100 --> 02:00:11.100]  что если у тебя тут, допустим,
[02:00:11.100 --> 02:00:13.100]  получилось там какой-нибудь k,
[02:00:13.100 --> 02:00:15.100]  то я просто распилил,
[02:00:15.100 --> 02:00:17.100]  честно говоря, по k пополам
[02:00:17.100 --> 02:00:19.100]  и k пополам.
[02:00:21.100 --> 02:00:23.100]  Нет, вот так.
[02:00:23.100 --> 02:00:25.100]  k-1 пополам и k-1 пополам.
[02:00:25.100 --> 02:00:27.100]  Вот так.
[02:00:29.100 --> 02:00:31.100]  Нет, не обязательно.
[02:00:31.100 --> 02:00:33.100]  Как повезет.
[02:00:33.100 --> 02:00:35.100]  Да, мы носим какую-то серединку,
[02:00:35.100 --> 02:00:37.100]  чтобы вот было. Но легко вот увидеть,
[02:00:37.100 --> 02:00:39.100]  что каждая из этих штук будет
[02:00:39.100 --> 02:00:41.100]  хотя бы t-1, если тут вот так будет.
[02:00:45.100 --> 02:00:47.100]  А элементарно в корне может быть
[02:00:47.100 --> 02:00:49.100]  сколько угодно. То есть может тут
[02:00:49.100 --> 02:00:51.100]  3, а тут 2.
[02:00:51.100 --> 02:00:53.100]  Нет, если тут 3,
[02:00:53.100 --> 02:00:55.100]  и тут 2...
[02:00:55.100 --> 02:00:57.100]  Ну тогда мы говорим,
[02:00:57.100 --> 02:00:59.100]  что если у нас тут совокупности
[02:00:59.100 --> 02:01:01.100]  осталось не более чем 2t-1 ключиков,
[02:01:01.100 --> 02:01:03.100]  то мы не заморачиваемся.
[02:01:09.100 --> 02:01:11.100]  Больше либо равно, чем 2t,
[02:01:11.100 --> 02:01:13.100]  то мы этот корень распиливаем
[02:01:13.100 --> 02:01:15.100]  на пополам. Только уже не в этом
[02:01:15.100 --> 02:01:17.100]  месте, а посередине.
[02:01:19.100 --> 02:01:21.100]  Не могло.
[02:01:23.100 --> 02:01:25.100]  Нет.
[02:01:27.100 --> 02:01:29.100]  Так что получается,
[02:01:29.100 --> 02:01:31.100]  что если высоты одинаковые,
[02:01:31.100 --> 02:01:33.100]  то вы действительно за 1 деревья
[02:01:33.100 --> 02:01:35.100]  прекрасно объединяете.
[02:01:39.100 --> 02:01:41.100]  Так, что нам остается
[02:01:41.100 --> 02:01:43.100]  сделать? Остается сделать
[02:01:43.100 --> 02:01:45.100]  только маленькую приятную вещь.
[02:01:45.100 --> 02:01:47.100]  Сказать, а что делать,
[02:01:47.100 --> 02:01:49.100]  если высоты
[02:01:49.100 --> 02:01:51.100]  все-таки чуть-чуть различаются?
[02:01:53.100 --> 02:01:55.100]  Найти...
[02:01:55.100 --> 02:01:57.100]  Да, ну да.
[02:01:57.100 --> 02:01:59.100]  Но я бы сказал так. Нарисовать
[02:01:59.100 --> 02:02:01.100]  это можно так. То есть допустим,
[02:02:01.100 --> 02:02:03.100]  у нас тут действительно
[02:02:03.100 --> 02:02:05.100]  без ограничений общности левое дерево
[02:02:05.100 --> 02:02:07.100]  оказалось выше правого.
[02:02:07.100 --> 02:02:09.100]  Тогда мы идем
[02:02:09.100 --> 02:02:11.100]  в левом дереве
[02:02:11.100 --> 02:02:13.100]  по правому пути.
[02:02:13.100 --> 02:02:15.100]  Идем, идем, идем, и вот наконец
[02:02:15.100 --> 02:02:17.100]  доходим до
[02:02:17.100 --> 02:02:19.100]  соответствующей высоты.
[02:02:19.100 --> 02:02:21.100]  Тогда что мы делаем?
[02:02:21.100 --> 02:02:23.100]  Тогда вот на этой вершине
[02:02:23.100 --> 02:02:25.100]  тут висит свое дерево,
[02:02:25.100 --> 02:02:27.100]  и давайте мы эти деревья
[02:02:27.100 --> 02:02:29.100]  в виде их корней
[02:02:29.100 --> 02:02:31.100]  объединяем через вот этот х.
[02:02:35.100 --> 02:02:37.100]  Мы взяли
[02:02:37.100 --> 02:02:39.100]  левое дерево,
[02:02:39.100 --> 02:02:41.100]  пусть у него высота больше.
[02:02:41.100 --> 02:02:43.100]  И мы спускаемся
[02:02:43.100 --> 02:02:45.100]  по правому пути
[02:02:45.100 --> 02:02:47.100]  под дерево той же высоты,
[02:02:47.100 --> 02:02:49.100]  под дерево той же высоты, что и правое.
[02:02:49.100 --> 02:02:51.100]  Вот.
[02:02:51.100 --> 02:02:53.100]  Тогда вот это правое под дерево с этим деревом
[02:02:53.100 --> 02:02:55.100]  просто объединяем через х.
[02:02:55.100 --> 02:02:57.100]  Все, что может произойти,
[02:02:57.100 --> 02:02:59.100]  это то, что в этой объединенной
[02:02:59.100 --> 02:03:01.100]  вершине окажется
[02:03:01.100 --> 02:03:03.100]  больше, чем 2t-1 ключ.
[02:03:03.100 --> 02:03:05.100]  Если оказалось не более, чем
[02:03:05.100 --> 02:03:07.100]  2t-1, то просто мы уже радуемся
[02:03:07.100 --> 02:03:09.100]  жизни.
[02:03:09.100 --> 02:03:11.100]  То есть условно говоря, просто
[02:03:11.100 --> 02:03:13.100]  в этом месте на этот указатель подвешиваем
[02:03:13.100 --> 02:03:15.100]  вот это объединенное дерево и радуемся.
[02:03:15.100 --> 02:03:17.100]  Вот.
[02:03:17.100 --> 02:03:19.100]  Но если оказалось больше, то что делать?
[02:03:19.100 --> 02:03:21.100]  То значит придется опять
[02:03:21.100 --> 02:03:23.100]  что-то попилить и пробросить эту вершину
[02:03:23.100 --> 02:03:25.100]  наверх.
[02:03:25.100 --> 02:03:27.100]  Да?
[02:03:27.100 --> 02:03:29.100]  Вот. Если тут оказалось больше, чем 2t-1,
[02:03:29.100 --> 02:03:31.100]  то пробрасываем, ну и так
[02:03:31.100 --> 02:03:33.100]  наверх.
[02:03:33.100 --> 02:03:35.100]  Могли.
[02:03:35.100 --> 02:03:37.100]  А могли
[02:03:37.100 --> 02:03:39.100]  не поддерживать.
[02:03:39.100 --> 02:03:41.100]  По ситуации.
[02:03:41.100 --> 02:03:43.100]  Ну да.
[02:03:43.100 --> 02:03:45.100]  Ну в принципе да.
[02:03:45.100 --> 02:03:47.100]  Ну по модулю того, насколько вы...
[02:03:47.100 --> 02:03:49.100]  Ну это называется по модулю того,
[02:03:49.100 --> 02:03:51.100]  насколько вы там в базах данных
[02:03:51.100 --> 02:03:53.100]  будете реально там баловаться с плитами и мержами.
[02:03:53.100 --> 02:03:55.100]  Или там вот этими.
[02:03:55.100 --> 02:03:57.100]  А с рандомными ключами нельзя?
[02:03:57.100 --> 02:03:59.100]  Чего?
[02:03:59.100 --> 02:04:01.100]  Нет, если
[02:04:01.100 --> 02:04:03.100]  деревья
[02:04:03.100 --> 02:04:05.100]  произвольны, то есть если ключики друг от друга
[02:04:05.100 --> 02:04:07.100]  произвольны, расположены, то увы.
[02:04:07.100 --> 02:04:09.100]  А два там дерева тоже не может быть?
[02:04:09.100 --> 02:04:11.100]  Чего? Ну совсем с произвольными
[02:04:11.100 --> 02:04:13.100]  нет.
[02:04:13.100 --> 02:04:15.100]  Чего?
[02:04:15.100 --> 02:04:17.100]  Не, никак.
[02:04:23.100 --> 02:04:25.100]  Вот.
[02:04:25.100 --> 02:04:27.100]  Так что
[02:04:27.100 --> 02:04:29.100]  получается вот мерж за разность
[02:04:29.100 --> 02:04:31.100]  высот плюс один вроде заморочен.
[02:04:31.100 --> 02:04:33.100]  Вроде сделали.
[02:04:33.100 --> 02:04:35.100]  Так. Ну что ж.
[02:04:35.100 --> 02:04:37.100]  Ну теперь приходит время
[02:04:37.100 --> 02:04:39.100]  самого сладенького.
[02:04:39.100 --> 02:04:41.100]  Чтобы сделать сплит.
[02:04:43.100 --> 02:04:45.100]  Так. Ну давайте зададим себе.
[02:04:45.100 --> 02:04:47.100]  Да. Ну а первое да. Отметим, что
[02:04:47.100 --> 02:04:49.100]  вот это вот в случае...
[02:04:49.100 --> 02:04:51.100]  Ну для нас конечно можно заметить, что да.
[02:04:51.100 --> 02:04:53.100]  То есть в принципе если вы хотите слить просто
[02:04:53.100 --> 02:04:55.100]  как дикарь, так же просто два дерева,
[02:04:55.100 --> 02:04:57.100]  то в принципе вы за логарифом это вполне можете сделать,
[02:04:57.100 --> 02:04:59.100]  потому что вы просто из одного из этих деревьев
[02:04:59.100 --> 02:05:01.100]  можете там какой-нибудь минимум
[02:05:01.100 --> 02:05:03.100]  и достать.
[02:05:03.100 --> 02:05:05.100]  Ну если очень хочется.
[02:05:05.100 --> 02:05:07.100]  То есть на самом деле этого не надо делать.
[02:05:07.100 --> 02:05:09.100]  Соответственно.
[02:05:13.100 --> 02:05:15.100]  И теперь собственно.
[02:05:15.100 --> 02:05:17.100]  Интерес.
[02:05:17.100 --> 02:05:19.100]  Значит как же делать сплит?
[02:05:19.100 --> 02:05:21.100]  Ну сплит
[02:05:21.100 --> 02:05:23.100]  значит он должен быть
[02:05:23.100 --> 02:05:25.100]  ну сплит какой?
[02:05:25.100 --> 02:05:27.100]  Как у нас устроен сплит? То есть
[02:05:27.100 --> 02:05:29.100]  сплит дано дерево, дано х.
[02:05:29.100 --> 02:05:31.100]  Ну и допустим
[02:05:31.100 --> 02:05:33.100]  для простоты гарантируется, что этот х
[02:05:33.100 --> 02:05:35.100]  где-то в дереве есть.
[02:05:35.100 --> 02:05:37.100]  Нам очень хочется распилить тогда
[02:05:37.100 --> 02:05:39.100]  это дерево на дерево,
[02:05:39.100 --> 02:05:41.100]  в котором есть меньше х,
[02:05:41.100 --> 02:05:43.100]  сам х
[02:05:43.100 --> 02:05:45.100]  и собственно все, что больше х.
[02:05:53.100 --> 02:05:55.100]  Сразу?
[02:05:57.100 --> 02:05:59.100]  Ну погоди.
[02:05:59.100 --> 02:06:01.100]  Ну погоди.
[02:06:01.100 --> 02:06:03.100]  Ну да.
[02:06:03.100 --> 02:06:05.100]  Амортизация, да.
[02:06:05.100 --> 02:06:07.100]  Не, не, не, не, не.
[02:06:07.100 --> 02:06:09.100]  Ой, боже,
[02:06:09.100 --> 02:06:11.100]  ну смотри.
[02:06:13.100 --> 02:06:15.100]  Ну сейчас
[02:06:15.100 --> 02:06:17.100]  посмотрим.
[02:06:17.100 --> 02:06:19.100]  Ну во-первых, допустим так,
[02:06:19.100 --> 02:06:21.100]  где находится х?
[02:06:21.100 --> 02:06:23.100]  Нет.
[02:06:23.100 --> 02:06:25.100]  Если х находится где-то в корне,
[02:06:25.100 --> 02:06:27.100]  то нам прям повезло.
[02:06:27.100 --> 02:06:29.100]  Да, потому что если это
[02:06:29.100 --> 02:06:31.100]  прям вот корень и вот нам х,
[02:06:31.100 --> 02:06:33.100]  то значит мы просто говорим вот,
[02:06:33.100 --> 02:06:35.100]  вот, то есть
[02:06:35.100 --> 02:06:37.100]  как бы, то есть вот так,
[02:06:37.100 --> 02:06:39.100]  вот так, вот так. То есть правда
[02:06:39.100 --> 02:06:41.100]  и получается два дерева одинаковой
[02:06:41.100 --> 02:06:43.100]  высоты, если
[02:06:43.100 --> 02:06:45.100]  конечно этот х не оказался с края.
[02:06:45.100 --> 02:06:47.100]  То есть в точки зрения
[02:06:47.100 --> 02:06:49.100]  реализации сразу
[02:06:49.100 --> 02:06:51.100]  порекомендую обратить внимание на то, что
[02:06:51.100 --> 02:06:53.100]  как бы например, если вот х оказался
[02:06:53.100 --> 02:06:55.100]  справа, то у вас там одно дерево
[02:06:55.100 --> 02:06:57.100]  будет той же высоты, что и старое,
[02:06:57.100 --> 02:06:59.100]  а другое дерево будет на единичку меньше.
[02:07:03.100 --> 02:07:05.100]  А вот на этот раз не факт.
[02:07:15.100 --> 02:07:17.100]  Нет,
[02:07:17.100 --> 02:07:19.100]  как задачи делают
[02:07:19.100 --> 02:07:21.100]  очень просто вот эти, потому что технология
[02:07:21.100 --> 02:07:23.100]  очень простая. Я дам вам контест
[02:07:23.100 --> 02:07:25.100]  как бы классичные задачи на эти картеечки.
[02:07:29.100 --> 02:07:31.100]  Нет, ну не
[02:07:31.100 --> 02:07:33.100]  не, ну не настолько.
[02:07:33.100 --> 02:07:35.100]  Нет, обычно
[02:07:35.100 --> 02:07:37.100]  там можно
[02:07:37.100 --> 02:07:39.100]  спрактиковать так,
[02:07:39.100 --> 02:07:41.100]  но дело в том, что каждую задачу,
[02:07:41.100 --> 02:07:43.100]  то есть у каждой задачи есть какой-то номинал,
[02:07:43.100 --> 02:07:45.100]  х баллов. Так вот,
[02:07:45.100 --> 02:07:47.100]  если вы сдадите эту задачу,
[02:07:47.100 --> 02:07:49.100]  просто сдадите, вы получите
[02:07:49.100 --> 02:07:51.100]  0,4х.
[02:07:51.100 --> 02:07:53.100]  Вот.
[02:07:53.100 --> 02:07:55.100]  Но если вы сдадите
[02:07:55.100 --> 02:07:57.100]  двумя разными деревьями, то вы получите
[02:07:57.100 --> 02:07:59.100]  0,8х. А если
[02:07:59.100 --> 02:08:01.100]  тремя, то 1,2х.
[02:08:01.100 --> 02:08:03.100]  Ну и так далее.
[02:08:09.100 --> 02:08:11.100]  Ну да, нет, там
[02:08:11.100 --> 02:08:13.100]  на самом деле отдельная графа, то есть
[02:08:13.100 --> 02:08:15.100]  если вы ухитритесь дать задачу вообще
[02:08:15.100 --> 02:08:17.100]  там без всяких деревьев,
[02:08:17.100 --> 02:08:19.100]  то есть прям реально
[02:08:19.100 --> 02:08:21.100]  обойдетесь истрелям,
[02:08:21.100 --> 02:08:23.100]  ну ладно, или как ячкой,
[02:08:23.100 --> 02:08:25.100]  то это, то так и быть, на это
[02:08:25.100 --> 02:08:27.100]  закидываю еще.
[02:08:29.100 --> 02:08:31.100]  Нет,
[02:08:31.100 --> 02:08:33.100]  нет, в принципе, конечно,
[02:08:33.100 --> 02:08:35.100]  не, ну конечно, поочеряйте, на самом деле, не используйте
[02:08:35.100 --> 02:08:37.100]  картовые деревья там, где их использовать не надо.
[02:08:37.100 --> 02:08:39.100]  Естественно.
[02:08:43.100 --> 02:08:45.100]  Нет, самое смешное, что, кстати,
[02:08:45.100 --> 02:08:47.100]  осталось только достать пару
[02:08:47.100 --> 02:08:49.100]  задач на сливаемые кучи и забабахать тоже самое, да.
[02:08:49.100 --> 02:08:51.100]  Нет, ну там задача,
[02:08:51.100 --> 02:08:53.100]  там написать там
[02:08:53.100 --> 02:08:55.100]  левацкую косую, там это проще.
[02:08:55.100 --> 02:08:57.100]  Да, вот фибонай, да, вот фибонай
[02:08:57.100 --> 02:08:59.100]  чуть-чуть, ну тоже на самом деле не самое сложное,
[02:08:59.100 --> 02:09:01.100]  учитывая, что как бы код есть в кормане.
[02:09:03.100 --> 02:09:05.100]  Переливайк, ну.
[02:09:09.100 --> 02:09:11.100]  Нет, ну что, переливайка,
[02:09:11.100 --> 02:09:13.100]  да.
[02:09:13.100 --> 02:09:15.100]  Ну тут надо подумать, там всегда можно ввести
[02:09:15.100 --> 02:09:17.100]  какой-нибудь запрет в духе, что там запрещается
[02:09:17.100 --> 02:09:19.100]  пользоваться, там
[02:09:19.100 --> 02:09:21.100]  запрещается пользоваться
[02:09:21.100 --> 02:09:23.100]  СТД.
[02:09:23.100 --> 02:09:25.100]  Только, ох ты.
[02:09:25.100 --> 02:09:27.100]  Да-да-да, пишем на том алголе, на котором
[02:09:27.100 --> 02:09:29.100]  там, называется, обычно пишет
[02:09:29.100 --> 02:09:31.100]  тариан в статьях, да-да-да.
[02:09:31.100 --> 02:09:33.100]  Чего?
[02:09:33.100 --> 02:09:35.100]  На Паскале?
[02:09:35.100 --> 02:09:37.100]  Да ладно.
[02:09:37.100 --> 02:09:39.100]  Так, нет, ну, к сожалению,
[02:09:39.100 --> 02:09:41.100]  не все языки поддерживают.
[02:09:41.100 --> 02:09:43.100]  Нет, Паскаль,
[02:09:43.100 --> 02:09:45.100]  нет, Паскаль-то да, но с другой стороны
[02:09:45.100 --> 02:09:47.100]  заставляет вас еще учить Паскаль,
[02:09:47.100 --> 02:09:49.100]  потому что, я думаю, большинство
[02:09:49.100 --> 02:09:51.100]  из вас Паскаль в глаза не видело.
[02:09:51.100 --> 02:09:53.100]  Нет, это
[02:09:53.100 --> 02:09:55.100]  нет, я не знаю, нет,
[02:09:55.100 --> 02:09:57.100]  мне, конечно, это осторожно, мне это может созреть душу,
[02:09:57.100 --> 02:09:59.100]  потому что я до 11 класса
[02:09:59.100 --> 02:10:01.100]  насяг писал только на топ-кодере.
[02:10:01.100 --> 02:10:03.100]  Так что осторожно.
[02:10:03.100 --> 02:10:05.100]  Так что вы с таким предложениями поосторожнее.
[02:10:05.100 --> 02:10:07.100]  Я же, да, я же могу и согласиться.
[02:10:13.100 --> 02:10:15.100]  Ну да.
[02:10:15.100 --> 02:10:17.100]  Нет, ну я так и быть, я разрешу писать на Дэлфе,
[02:10:17.100 --> 02:10:19.100]  но вот как бы да.
[02:10:21.100 --> 02:10:23.100]  Ну скажем так,
[02:10:23.100 --> 02:10:25.100]  локально, пожалуйста,
[02:10:25.100 --> 02:10:27.100]  но в тысячную систему
[02:10:27.100 --> 02:10:29.100]  в натуре Паскаль ты ничего не сдашь,
[02:10:29.100 --> 02:10:31.100]  потому что это 16-битный компилятор, он даже массив на 100 тысяч не скушает.
[02:10:31.100 --> 02:10:33.100]  Да, на всякий случай
[02:10:33.100 --> 02:10:35.100]  напоминаю, Паскаль это такое сим,
[02:10:35.100 --> 02:10:37.100]  в котором нет даже вектора.
[02:10:39.100 --> 02:10:41.100]  Вперед.
[02:10:41.100 --> 02:10:43.100]  Салонов там тоже нет, кстати.
[02:10:43.100 --> 02:10:45.100]  Сортировки там, кстати, тоже нет.
[02:10:47.100 --> 02:10:49.100]  А в некоторых задачах еще,
[02:10:49.100 --> 02:10:51.100]  как выясняется, в некоторых задачах
[02:10:51.100 --> 02:10:53.100]  сует антикуссор тесты.
[02:10:55.100 --> 02:10:57.100]  Я думаю, пожалуйста, да.
[02:10:59.100 --> 02:11:01.100]  Нет, пожалуйста, пожалуйста.
[02:11:11.100 --> 02:11:13.100]  Ну да.
[02:11:15.100 --> 02:11:17.100]  Ну понятно.
[02:11:17.100 --> 02:11:19.100]  Так вот, ладно.
[02:11:19.100 --> 02:11:21.100]  Так вот,
[02:11:21.100 --> 02:11:23.100]  вернемся к сплиту.
[02:11:23.100 --> 02:11:25.100]  Так вот, господа.
[02:11:25.100 --> 02:11:27.100]  Так, тихо.
[02:11:27.100 --> 02:11:29.100]  Тихо.
[02:11:29.100 --> 02:11:31.100]  Возвращаемся к сплиту.
[02:11:31.100 --> 02:11:33.100]  Как же сделать сплит?
[02:11:33.100 --> 02:11:35.100]  Ну оказывается,
[02:11:35.100 --> 02:11:37.100]  ну то есть идея такая, хорошо,
[02:11:37.100 --> 02:11:39.100]  если нам повезло, то нам повезло.
[02:11:39.100 --> 02:11:41.100]  А что делать, если нам
[02:11:41.100 --> 02:11:43.100]  не повезло?
[02:11:43.100 --> 02:11:45.100]  Ну тогда идея очень простая.
[02:11:47.100 --> 02:11:49.100]  Берем корень,
[02:11:49.100 --> 02:11:51.100]  понимаем, что мы хотим пойти, допустим,
[02:11:51.100 --> 02:11:53.100]  вот в это под дерево,
[02:11:53.100 --> 02:11:55.100]  потому что там находится х.
[02:11:55.100 --> 02:11:57.100]  Тогда у меня идея такая,
[02:11:57.100 --> 02:11:59.100]  я все-таки
[02:12:01.100 --> 02:12:03.100]  распиливаю это дерево
[02:12:05.100 --> 02:12:07.100]  вот таким вот нехитрым способом.
[02:12:09.100 --> 02:12:11.100]  То есть смотрите,
[02:12:11.100 --> 02:12:13.100]  что?
[02:12:13.100 --> 02:12:15.100]  То есть смотрите, у меня,
[02:12:15.100 --> 02:12:17.100]  оказывается, то есть
[02:12:17.100 --> 02:12:19.100]  смотрите, что у меня получается. У
[02:12:19.100 --> 02:12:21.100]  меня получается есть одно дерево,
[02:12:21.100 --> 02:12:23.100]  в котором элементы, вот у меня тут целое
[02:12:23.100 --> 02:12:25.100]  дерево, в котором элементы меньше х.
[02:12:27.100 --> 02:12:29.100]  И также у меня, ну вот,
[02:12:29.100 --> 02:12:31.100]  и есть дерево все элементы которого
[02:12:31.100 --> 02:12:33.100]  больше х., а также у меня есть
[02:12:33.100 --> 02:12:35.100]  промежуточный элемент.
[02:12:35.100 --> 02:12:37.100]  И еще есть какое-то под дерево,
[02:12:37.100 --> 02:12:43.820]  которое я тоже сейчас пойду сплитить условно и рекурсивно. Ну, условно, потому что на самом
[02:12:43.820 --> 02:12:50.540]  деле я, конечно, все буду вайликами делать. Значит, смотрите, что у меня тут? У меня тут дерево,
[02:12:50.540 --> 02:12:57.540]  и в этом дереве тоже есть корень. И тут я неожиданно понял, что я хочу пойти вот в это
[02:12:57.660 --> 02:13:13.340]  дерево. Так давайте возьму тряпочку. Вот, и тут я возьму тряпочку. Выяснится, что у меня тут тоже есть
[02:13:13.340 --> 02:13:21.180]  ключик. Я тут решил пойти вот куда-то сюда, но здесь я сделал примерно то же самое. То есть у меня
[02:13:21.180 --> 02:13:32.580]  тут образовалось еще одно дерево, правда, меньше высоты. Видно, да? Вот. И вот тут еще красота. Вот.
[02:13:32.580 --> 02:13:38.620]  И тут еще какие-то. И так я буду идти, ну и в какой-то момент, оказывается, я найду вершину,
[02:13:38.620 --> 02:13:49.540]  в которой находится х, и ее уже пепелю как корень. Да. То есть к чему это нас приведет? Это нас
[02:13:49.540 --> 02:13:59.500]  приведет. Это нас приведет. Куда это нас приведет? Вот так. Это нас приведет к тому,
[02:13:59.500 --> 02:14:06.220]  что нас в результате тут где-то образуется элемент х. Слева от него обнаружится какие-то
[02:14:06.220 --> 02:14:13.060]  последовательность под деревьев. Причем, в принципе, гарантируется, что каждое следующее
[02:14:13.060 --> 02:14:22.780]  под дерево по высоте не больше предыдущего. Вот. Но, да, важный момент. Именно не больше. Да,
[02:14:22.780 --> 02:14:28.620]  может показаться, что строго меньше, но это не совсем так. А потому что здесь может быть подлянка,
[02:14:28.620 --> 02:14:38.020]  что вы пойдете тут. Потому что когда вы тут, допустим, вы могли захотеть пойти вот сюда,
[02:14:38.020 --> 02:14:46.980]  вот в это под дерево. И вот не самое крайнее слева, а вот второе слева. И тогда у вас влево отправится
[02:14:46.980 --> 02:14:53.140]  только вот это под дерево на единичку меньшей высоты, чем было вот это. Поэтому там вполне вероятно,
[02:14:53.140 --> 02:14:58.820]  то есть оно как бы на единичку меньше вполне вероятно, и следующее у вас вполне может оказаться
[02:14:58.820 --> 02:15:06.420]  той же высоты. Поэтому гарантировать можно только, что каждое следующее дерево высоты не больше,
[02:15:06.420 --> 02:15:13.980]  причем уже в качестве упражнения можно показать, что на самом деле подряд идущих
[02:15:13.980 --> 02:15:19.580]  деревьев одинаковой высоты будет не более чем два. Ну ладно, не то чтобы это принципиально,
[02:15:20.340 --> 02:15:29.540]  но это как бы тоже решаемый вопрос. Но короче говоря, есть вот такая вот условная неубывающая
[02:15:29.540 --> 02:15:41.460]  последовательность, и надо эти деревья как-то слить. Ну давайте так, во-первых, давайте добьемся того,
[02:15:41.460 --> 02:15:52.980]  чтобы деревья были вот такие. Для удобства. Для формального удобства, я так скажу. Нет,
[02:15:52.980 --> 02:15:57.540]  нет, меня просто смущает вот что. Да, хочется сказать, что давайте сольем это с этим, потом
[02:15:57.540 --> 02:16:02.100]  это с этим, потом это с этим, и у вас получится какая-то телескопическая сумма, которая схлопнется,
[02:16:02.100 --> 02:16:06.780]  да? Но это будет работать, только если вы будете гарантировать, что у вас в каждый момент времени
[02:16:07.020 --> 02:16:26.380]  дерево слева по высоте больше чем справа или хотя бы не меньше. Нет, ну нет, ну просто фишка такая,
[02:16:26.380 --> 02:16:31.340]  что если у вас справа начали деревья обгонять, то это как бы желательно, чтобы это было как-то
[02:16:31.340 --> 02:16:36.140]  контролируемое, потому что если сливаешь дерево высоты 57 с деревом высоты 58, может
[02:16:36.140 --> 02:16:46.460]  получиться дерево высоты 59. И если тут идут какие-то равные, то как бы там обгон не пошел на 2,
[02:16:46.460 --> 02:16:54.300]  на 3, на 4, в результате как бы у вас тут лог квадрат не вылез. Да, но идея тут на самом деле такая.
[02:16:54.300 --> 02:17:00.140]  Начнем с того, что давайте избавимся от равных. Как мы избавимся от равных? Да очень просто,
[02:17:00.140 --> 02:17:08.180]  наоборот идем, ну я бы сказал так, наоборот, идем по убыванию, то есть идем по убыванию,
[02:17:08.180 --> 02:17:13.420]  по убыванию, по убыванию. Если в какой-то момент встретили два равных, давайте их объединим. То есть
[02:17:13.420 --> 02:17:20.700]  давайте их объединим. Если при этом оказалось, что очередное дерево, то есть получилось дерево
[02:17:20.700 --> 02:17:28.300]  равное предыдущей высоте, значит их тоже объединяем. Вот, то есть так вот объединяем,
[02:17:28.300 --> 02:17:36.620]  ну то и фактически в стеках по сути добавляем. Ну, которые в сплите возникли слева от икса. Вот,
[02:17:36.620 --> 02:17:40.860]  ну справа понятно, то же самое, но в другую сторону. Вот, в результате тогда получается,
[02:17:40.860 --> 02:17:47.220]  что за суммарный алгорифм действия мы добились того, что у нас в массиве все деревья по высоте
[02:17:47.220 --> 02:17:58.380]  строго убывают. Идем, значит идем слева направо, добавляем деревья в стек, но если на вершине
[02:17:58.380 --> 02:18:03.420]  стека образовались два дерева одинаковой высоты, значит мы их мержим, значит достаем из стека,
[02:18:03.420 --> 02:18:10.460]  мержим, кладем обратно в стек и повторяем вариант. Проверяем. Ну понятно, что это работает за,
[02:18:10.460 --> 02:18:15.340]  очевидно, количество деревьев плюс количество объединений, но объединений не больше, чем количество
[02:18:15.340 --> 02:18:23.900]  деревьев минус один, поэтому хорошо. Да, мы здесь пользуемся тем, что два равных дерева мы мержим
[02:18:23.900 --> 02:18:33.820]  за единицу. Да, совершенно верно. Да, спасибо, очень важное замечание, мы действительно пользуемся тем,
[02:18:33.820 --> 02:18:38.980]  что когда вы объединяете два дерева одинаковой высоты, то получается дерево высоты не меньше,
[02:18:38.980 --> 02:18:44.660]  чем столько же и не более, чем столько же плюс один. Поэтому мы гарантируем, что как бы новое
[02:18:44.660 --> 02:18:55.580]  дерево не станет уж больше предыдущего, но равным ему оно стать может. Да, а в каждый момент времени в
[02:18:55.580 --> 02:19:01.140]  стеке у нас строго убывающий массив. Этот механизм, кстати, работает даже если бы у вас бывало
[02:19:01.140 --> 02:19:08.540]  3, 4, 5 и сколько угодно подряд идущих элементов одинаковой высоты, кстати. Да, ровно поэтому мы
[02:19:08.540 --> 02:19:13.620]  слева направо вообще идем. То есть как бы кто сказал, что давайте справа налево и пропихивать,
[02:19:13.620 --> 02:19:21.260]  но тогда если у вас будет несколько подряд, то там обгоны начинаются. И так что же делать теперь,
[02:19:21.260 --> 02:19:30.140]  зачем мы это сделали? То есть зачем мы добились того, что у нас высоты строго убывают? Ну понятно,
[02:19:30.140 --> 02:19:36.540]  зачем? Потому что этим мы добиваемся того, что теперь мы идем наоборот справа налево,
[02:19:36.540 --> 02:19:42.700]  объединяем сначала вот эти деревья и гарантируем, получаем дерево высоты не больше, чем вот это плюс
[02:19:42.700 --> 02:19:47.780]  один, то есть не больше, чем вот это. То есть поэтому этот результат мы спокойно объединяем
[02:19:47.780 --> 02:19:55.100]  за именно вот высота этого, минус высота вот этого, ну плюс один. То есть для чего мы это все делаем?
[02:19:55.100 --> 02:19:59.700]  Для того, чтобы вычиталась именно высота левого, минус высота правого. И чтобы эта сумма просто
[02:19:59.700 --> 02:20:07.020]  схлопывалась. То есть объединяем эти, получаем высоту не более, чем вот это плюс один, ну и не
[02:20:07.020 --> 02:20:11.220]  менее, чем вот это. И объединяем уже с этим. И тогда суммарно получается лыгарифм.
[02:20:11.220 --> 02:20:21.940]  Ну потому что вот на очередной высоте, ты тут неожиданно понял, что тебе надо пойти на
[02:20:21.940 --> 02:20:31.900]  второго слева ребенка. Тогда, когда ты сплитешь, у тебя вот в левой части окажется вот ребеночек,
[02:20:31.900 --> 02:20:36.540]  то есть только чисто ребеночек, то есть дерево высоты на единичку меньше, чем вот эта вершина.
[02:20:36.540 --> 02:20:48.660]  Вот. Более того, то есть тут целое дерево будет в высоты той же, что и вот эта вершина. А тут
[02:20:48.660 --> 02:20:55.300]  может случиться, что ты решил посплитить ее посередине. И тогда высота, то есть высота
[02:20:55.300 --> 02:21:01.340]  вот этой вершины окажется такой же, как эта. Так что такой технический нюанс возможен.
[02:21:01.340 --> 02:21:15.140]  Сейчас, погоди. Почему?
[02:21:15.140 --> 02:21:26.260]  Ну нет, когда мы составляем список, равные все-таки могут оказаться.
[02:21:26.260 --> 02:21:36.940]  Но сверху мы можем оценить, как просто убывающие типа h, h-1, h-2, h-3 и так далее. Тогда если мы будем их
[02:21:36.940 --> 02:21:43.860]  просто сливать отмечек большим, мы сверху сможем оценить, как будто мы сливаем деревья.
[02:21:43.860 --> 02:21:53.180]  Не сможем. Ну с формулировом так. Прежде всего, предположим, что у нас, мы знаем,
[02:21:53.180 --> 02:22:04.420]  тут допустим, что мы знаем, что тут высота не более чем 179, а тут не более чем 177. Мы очень
[02:22:04.420 --> 02:22:10.660]  хотим заявить, что тогда в принципе их можно за о от двойки, там двойки плюс один слить. Но это
[02:22:10.660 --> 02:22:15.140]  может быть ни черта не так. Почему? Потому что оценка сверху не гарантирует, что у тебя тут,
[02:22:15.140 --> 02:22:22.140]  допустим, не окажется, что тут высота 174, а тут 57. И тогда слияние будет ни черта не за о от двойки.
[02:22:22.140 --> 02:22:30.300]  Вот. Поэтому то есть нам требуется, чтобы оценка была не только сверху, но и снизу все-таки. Вот.
[02:22:30.300 --> 02:22:38.460]  Поэтому просто так на халяву, к сожалению, не получится. Так, ну что ж, поздравляю. У нас есть
[02:22:38.460 --> 02:22:49.980]  сплит. А нет, видимо, еще нету. Так. У нас же есть проблема, что вот мы когда сплитим, мы вот находим позицию,
[02:22:49.980 --> 02:22:56.780]  между которыми находятся, ну между двумя элементами. А причем деревья мы разбили на то, что вот, ну вот,
[02:22:56.780 --> 02:23:09.220]  ну а куда мы эти два элемента делим? А у нас есть не просто деревья, у нас не просто последовались
[02:23:09.220 --> 02:23:18.380]  деревья, а последовались деревья и элементов между ними. Да. То есть у нас тут целая цепочка есть.
[02:23:18.380 --> 02:23:29.060]  А, ну, мы этого не сказали, потому что это подразумевалось. Нет, с этим же успехом,
[02:23:29.060 --> 02:23:34.140]  можно сказать, что формально я должен был сказать, что такое сплит, что сплит имерша, значение этих
[02:23:34.140 --> 02:23:39.060]  операций в мировом программировании и так далее. Но я просто в наглую предположил, что тут все
[02:23:39.060 --> 02:23:43.660]  понимают, что такое сплит имерш, в принципе, да. Потому что, наверное, потому что я проведу
[02:23:43.660 --> 02:23:49.300]  соцпрос в прошлый раз, и помнишь, декартовые деревья видели все. Ну, как бы логично, да. Там сложно
[02:23:49.300 --> 02:23:57.380]  было предполагать иное. Вот. Так что вот. Но самое приятное, что теперь можно сказать,
[02:23:57.380 --> 02:24:05.180]  это то, что все эти операции вместе с сплит имерш делается как бы сверху. Поэтому заметим,
[02:24:05.180 --> 02:24:10.780]  что все операции, которые вы там пропихивали с помощью операции push в декартовом дереве,
[02:24:10.780 --> 02:24:17.740]  можно прекрасно делать и в поддереве. То есть можно там прибавлять на отрезки, там на поддереве,
[02:24:17.740 --> 02:24:25.940]  там присваивать на поддереве, разворачивать можно, пожалуйста. На каэйфе мы пишем.
[02:24:25.940 --> 02:24:41.260]  Вот. Нет. Но с формулирован так. Смотрите. Ну тут аккуратно. Да вроде нет. Скажешь так,
[02:24:41.260 --> 02:24:47.020]  не могу ответить достоверно, но на самом деле, окажешь, что это не вот. Ну, скажешь так,
[02:24:47.020 --> 02:24:50.900]  но есть сильная вероятность, что это просто буквально это, просто при константе t равно 2.
[02:24:50.900 --> 02:25:06.020]  Ну и что? Нет, там ладно. Но там вот смотрите, как при t равно. Нет, ну как понятно,
[02:25:06.020 --> 02:25:14.180]  что при t равно 2 у вас там как бы ключей не меньше одного и не больше, чем сколько там 2. Вот. Нет,
[02:25:14.180 --> 02:25:24.980]  не больше, чем 2. 2t минус. Нет. Да-да-да-да. Ну от одного до трех. Ну вот. От одного до двух
[02:25:24.980 --> 02:25:31.740]  или до двух до трех? Нет, ну как бы в два-три дереве, наверное, ключей должно быть от двух до трех,
[02:25:31.740 --> 02:25:37.420]  или имеется в виду, что детей там от двух до трех. Но скажем так. Нет, скажешь так,
[02:25:37.740 --> 02:25:51.620]  тут я достоверно не скажу. Вот. Ну вот. Ну, скажешь так, ну если он у вас преднаписан,
[02:25:51.620 --> 02:25:55.660]  то в общем-то ни в чем. Хотя я не гарантирую, что константа его не окажет хуже, чем константа
[02:25:55.660 --> 02:26:08.060]  Декартеича. Нет, ну зачем? Нет, ну в данном случае вы. Нет, ну на самом деле, как бы теоретически
[02:26:08.060 --> 02:26:14.660]  смысл этого имеет. Потому что в чем победа по сравнению с декартовым деревом? Да, нету вероятностей.
[02:26:14.660 --> 02:26:20.380]  То есть и даже нет амортизации. То есть мы теперь умеем делать сплит вёрши, там всякие вёрши на
[02:26:20.380 --> 02:26:28.260]  подотреске за логарифм честный. Да, то есть в принципе да. То есть там персистентный реверс
[02:26:28.260 --> 02:26:36.820]  можно в принципе и делать. Да. Так что, ну вот, предельно честный. Но единственное, что мы теперь
[02:26:36.820 --> 02:26:41.700]  можем сказать, это то, что, господи, прям нам нужно было изобрести это вот громадину, это вот
[02:26:41.700 --> 02:26:46.300]  писать вот эту гадость, а мы уже начали убеждаться, что это немножко гадость очень сильно. Да, но
[02:26:46.380 --> 02:26:50.860]  если вы заранее напишите, отладите, еще оптимизируете, конечно, в библиотеке на
[02:26:50.860 --> 02:26:55.220]  Кодфорсе, пожалуйста, но на конте CPC вы, наверное, с этим ноутбука это перебивать будете вряд ли.
[02:26:55.220 --> 02:27:05.220]  Вот. Но как бы что вам может помочь? Ну там я боюсь только декартач, но в целом, на самом деле,
[02:27:05.220 --> 02:27:10.460]  сейчас мы убедимся, что на самом деле, ну то есть на самом деле ради сплитаймержабы дерево можно
[02:27:10.460 --> 02:27:16.900]  было не изобретать, потому что на самом деле я утверждаю, что АВЛ дерево тоже прекрасно
[02:27:16.900 --> 02:27:25.740]  справляется с сплитом и мержом. Вот. Но для баз данных, то есть это просто вот такая большая
[02:27:25.740 --> 02:27:40.140]  структура. Нет, для Олимпиада оно не надо. Ну там, ну как сказать, да, там, ну да, во-первых,
[02:27:40.140 --> 02:27:46.300]  вероятности, а во-вторых, там, да, там, то есть там больше более, ну там более рандомная грубина,
[02:27:46.300 --> 02:27:52.820]  это то есть, нет, нет, а что предлагается иметь в виду, делать тут какие-то рандомные приоритеты
[02:27:52.820 --> 02:27:59.860]  как-то, что ли, с разной высотой или что? Ну то есть, нет, это, ну скажешь так, это отдельная песня,
[02:27:59.860 --> 02:28:03.780]  как бы можно ли действительно сделать какой-нибудь прикол, но здоровь, понимаете, когда речь идет о
[02:28:03.780 --> 02:28:09.580]  таких фундаментальных задачах, когда работа с база данных и так далее, знаете, как бы кодинг,
[02:28:09.580 --> 02:28:17.260]  то есть как бы скорость кодинга в этом смысле уходит на второй план. Нет, ну нет, там разные
[02:28:17.260 --> 02:28:21.940]  причины, потому что, ну, то есть, нет, это, конечно, интересно открыть, на самом деле,
[02:28:21.940 --> 02:28:26.220]  оригинальную статью по дикартьячке, кстати, там, по-моему, кстати, как ни странно, кстати,
[02:28:26.220 --> 02:28:30.740]  дикартьячка датируется сильно более поздним годом, который все можно вообразить, просто слет
[02:28:30.740 --> 02:28:37.940]  едва лиги 94-й какой-то, но можете гуглануть, там, это арагон Зидель, там, вот это все, да, да, как
[02:28:37.940 --> 02:28:43.020]  это называется, да, первая, да, первая девушка, первая у нас, по-моему, это девушка среди авторов
[02:28:43.020 --> 02:28:52.420]  алгоритмов, кстати, да, Сесилия арагон, а у нас не было, нет, маргарит-карачик у нас еще не было,
[02:28:52.420 --> 02:29:01.540]  нет, так у нас еще ожидается Матильда Штор, кстати, алгоритм Штор Варнера, да, да, Штор Варнера,
[02:29:01.540 --> 02:29:10.500]  не Штурм, нет, Штурм, нет, Штурм это, во-первых, он, во-вторых, это про другое вообще, то есть,
[02:29:10.500 --> 02:29:19.380]  нет, нет, есть там штурмовые последовательности, там это все, да, но это, ой, да, да, в чем не путать
[02:29:19.380 --> 02:29:26.740]  метод штурма и метод мозгового штурма, да, да, да, вот, это немножко другое, да, но вот тут есть вот,
[02:29:26.740 --> 02:29:34.340]  да, но, насколько я понял, насколько я так слышал, да, сошлепся на слухи, что, как бы, то есть,
[02:29:34.340 --> 02:29:38.500]  дикартьячка все-таки может это разрабатывалась именно как то, что можно было бы проще написать,
[02:29:38.500 --> 02:29:43.940]  ну, потому что, да, преимущество дикартового дерева, конечно, почему в олимпиадах используется оно,
[02:29:43.940 --> 02:29:49.820]  а не АВЛ, потому что там дикартово дерево кодится сильно проще, чем любое из наших деревьев,
[02:29:49.820 --> 02:29:54.940]  вот, то есть, просто, то есть, ну, действительно объективно его там, то есть, в него там действительно
[02:29:54.940 --> 02:29:58.300]  сложно, может быть, там, может быть, сложно въехать, но, как бы, написать его очень просто.
[02:29:58.300 --> 02:30:06.100]  В чём Википедии написано, что у Б деревьев получается не от К-1 до 2К-1, а от Кадака до 2К-1?
[02:30:06.100 --> 02:30:07.100]  Не знаю.
[02:30:07.100 --> 02:30:15.900]  Ну, скажем так, а в коре, сфорулирую так, я не знаю, в коре мне написано по-другому, кору буду я верю больше, честно.
[02:30:15.900 --> 02:30:45.820]  Ну, я не знаю, видимо. Не, ну, как, нету, вот, сфорулирую так, можно теперь тихо задуматься, что, нету, можно, наверное, как бы, реализовать дерево, чтобы там было от Т до 2Т-1, до самом деле, ключиков.
[02:30:45.820 --> 02:30:57.260]  То есть, скорее всего, в общем-то, мы не сильно пострадаем, просто будет чуть менее удобно, но, в принципе, мы не пострадаем, вот, логарифом.
[02:30:57.260 --> 02:31:03.140]  Прям вот логариф, вот, от высоты, от высоты исходного дерева.
[02:31:03.140 --> 02:31:08.620]  Так вы не говорили, что делаете все вершинками, а типа, а мы сливаем вместе и деревья, и вершины?
[02:31:08.620 --> 02:31:13.340]  Конечно. Нет, когда я говорю, слить два дерева, я говорю, что мы их сливаем вместе с этой вершинкой.
[02:31:13.340 --> 02:31:24.380]  Нет, это да, нет, теоретически умеет, но эту вершину надо было бы выкопать, а мы так не, да. Так что нет, Боже упаси, да.
[02:31:24.380 --> 02:31:31.380]  Вот. Так, ну, теперь пришло время опробировать ту же технологию, собственно, для АВЛ-а.
[02:31:31.380 --> 02:31:40.580]  Так вот, давайте доберемся в нас, в вас добрый, в нашу зону комфорта, в которой все-таки в каждой вершине два ребенка и один ключик.
[02:31:41.580 --> 02:31:50.580]  Хотя, честно говоря, хотя я не знаю, что, слава Богу, потому что тут так хорошо стало, да. Я скачал вершину, у меня тут 57 детей, ну, кайф.
[02:31:50.580 --> 02:31:55.580]  Нет, не кайф, что, не кайф? Не знаю.
[02:31:55.580 --> 02:32:02.580]  Вот. Да. Нет, действительно, да, это удобно.
[02:32:02.580 --> 02:32:07.580]  Эх, да, как удобно, когда все дети одинаковые, да, с ними можно одинаково разговаривать.
[02:32:07.580 --> 02:32:35.580]  А автомат прификс функции, а автомат тот же автомат ахакарасик только когда в более одной строчке. Какая разница?
[02:32:35.580 --> 02:32:52.580]  Ну, понятно. Так, ну, тихо-тихо, ладно. Так, ну, давайте вспоминать. А теперь, как сплитить и бежать теперь нам АВЛ-ки. Так, давайте вспомнить, что такое АВЛ вообще?
[02:32:52.580 --> 02:33:07.580]  Да, ну, понятно, что АВЛ это такое двоичное дерево польское, у которого есть только один вариант. У любой вершина разность высоты ее от двух поддеревьев отличается не более чем на один в ту или иную сторону.
[02:33:07.580 --> 02:33:28.580]  Так, ну, поехали. Теперь задача, как делать мерш. Ну, давайте делаем, как всегда. Есть дерево меньше х, есть х, есть больше х. Спрашивается, как их слить?
[02:33:28.580 --> 02:33:37.580]  Если высота отличается не больше чем на один. Да, но заметим, что если высота отличается не более чем на один, то слить неожиданно тупым образом.
[02:33:37.580 --> 02:33:48.580]  Вот, а что делать, если высота тут дерева оказалась неожиданно?
[02:33:48.580 --> 02:33:55.580]  А можно еще один такой вопрос? Как умея сливать три дерева, элемент дерева, научиться просто сливать два дерева?
[02:33:55.580 --> 02:34:00.580]  А, просто выковырить самый правый элемент из левого дерева.
[02:34:00.580 --> 02:34:03.580]  А, то есть разность высоты два дерева уже сольем?
[02:34:03.580 --> 02:34:04.580]  Да, без этого нет.
[02:34:05.580 --> 02:34:07.580]  Это даже невозможно, можно показать, что это невозможно.
[02:34:07.580 --> 02:34:12.580]  Ну, не знаю, можно ли прям показать, но скорее всего да.
[02:34:12.580 --> 02:34:14.580]  Читать технически.
[02:34:14.580 --> 02:34:23.580]  Хотя, вот. Значит, поехали. Как теперь слить два дерева?
[02:34:23.580 --> 02:34:33.580]  Ну, да, но здесь, конечно, да, идея такая. Давайте идем, идем, идем, идем и находим, вот тут внимание, тут надо аккуратно сделать небольшую аккуратность.
[02:34:33.580 --> 02:34:44.580]  Среднюю вершину, у которой высота больше либо равна h.
[02:34:44.580 --> 02:34:49.580]  Где h это высота, ну, высота соседнего дерева.
[02:34:49.580 --> 02:34:56.580]  Да, ну, допустим, вот у нас сказал, что hl оказалось сильно больше, чем hr.
[02:34:56.580 --> 02:35:02.580]  Это h, и это h, и это h, а это r, а это r, это r.
[02:35:02.580 --> 02:35:06.580]  Ну, давайте я поточнее нарисую, хорошо, вот, да.
[02:35:10.580 --> 02:35:16.580]  Эти желтые буряты, да-да-да, они похожи на якутов, да, мы помним, да.
[02:35:17.580 --> 02:35:19.580]  Вот, так.
[02:35:19.580 --> 02:35:26.580]  Итак, но получается следующее.
[02:35:26.580 --> 02:35:35.580]  Тогда, значит, что делается? Находим вот эту последнюю вершину, и к x подвешиваем вот это дерево, и именно вот эту вершину.
[02:35:35.580 --> 02:35:42.580]  Ну, во-первых, замечем, что разность высот здесь не будет превосходить один. Почему?
[02:35:42.580 --> 02:35:49.580]  Ну, потому что когда мы идут по какому-то пути, то высоты скачут не более чем на два, правда?
[02:35:49.580 --> 02:35:53.580]  Поэтому тут как бы высота либо hr, либо hr плюс один.
[02:35:53.580 --> 02:36:01.580]  Но что приятно, то есть если мы это все взяли и вот сюда подвесили, то заметим, что высота вот этого поддерева увеличилась.
[02:36:01.580 --> 02:36:05.580]  Я бы сказал, ровно на один она увеличилась на самом деле.
[02:36:05.580 --> 02:36:06.580]  Вот.
[02:36:06.580 --> 02:36:15.580]  Но тогда это позволяет нам тогда просто прогуляться от этой вершины вверх и делать абсолютно то же самое, что делали в инсорте.
[02:36:15.580 --> 02:36:18.580]  Ну, то есть вот это тоже самое ребалансирует.
[02:36:18.580 --> 02:36:20.580]  Потому что инвариант вот буквально так же.
[02:36:20.580 --> 02:36:29.580]  То есть такой, что мы там сделали какой-то инсорт, и мы знаем, что вот у нас нашлось тут неожиданно поддерево, в котором высота оказалась там на два больше, чем у соседа.
[02:36:29.580 --> 02:36:32.580]  И мы знаем, что других проблем нет.
[02:36:32.580 --> 02:36:40.580]  То есть мы на самом деле просто заменяем эту вершинку в другом месте hr на x и идем вверх.
[02:36:40.580 --> 02:36:42.580]  Идем вверх и делаем те же повороты.
[02:36:42.580 --> 02:36:46.580]  Ну, то есть формальное доказательство звучало бы так, что просто давайте сделаем так.
[02:36:46.580 --> 02:36:55.580]  Если hr сильно больше, чем r, то рекурсивно сливаем правое поддерево hr с hr через x.
[02:36:55.580 --> 02:37:03.580]  Ну вот, нам в качестве предположения индукции приходит, что высота не уменьшилась и увеличилась не более, чем на один.
[02:37:03.580 --> 02:37:04.580]  Вот.
[02:37:04.580 --> 02:37:10.580]  И тогда это нам гарантирует, что тогда в корне мы тоже сможем сделать какой-то поворот.
[02:37:10.580 --> 02:37:12.580]  Доказательство абсолютно то же, что было.
[02:37:12.580 --> 02:37:14.580]  То есть таким образом мы умеем делать мерч.
[02:37:14.580 --> 02:37:22.580]  И мерч мы умеем делать снова за нашу любимую асимптотику один плюс разность высот.
[02:37:22.580 --> 02:37:25.580]  Вот.
[02:37:25.580 --> 02:37:30.580]  Потому что его тоже надо писать.
[02:37:30.580 --> 02:37:32.580]  Там эти повороты тебе придется переписывать.
[02:37:32.580 --> 02:37:35.580]  Это больно.
[02:37:35.580 --> 02:37:39.580]  Нет, я прям жду, когда ты, видимо, минут через 15, максимум 20.
[02:37:39.580 --> 02:37:47.580]  Даже вопрос, а почему в Олимпиадах не пишут красночерное дерево?
[02:37:47.580 --> 02:37:55.580]  Да сплей для линката не помешает.
[02:37:55.580 --> 02:37:56.580]  Да.
[02:37:56.580 --> 02:37:58.580]  Нет, ну как какие-то линкаты можно реализовать на чем угодно.
[02:37:58.580 --> 02:38:05.580]  Другой вопрос, что на чем угодно это работает залог квадрата на сплее за логарифом.
[02:38:05.580 --> 02:38:09.580]  Но ответ как повезет.
[02:38:09.580 --> 02:38:15.580]  Нет, он может быть, я не знаю, конкретно какие-нибудь продвинутые люди, возможно, сделали задачу, в которой линкат залог квадрат.
[02:38:15.580 --> 02:38:18.580]  Я думаю, что он реально работает залог квадрат.
[02:38:18.580 --> 02:38:21.580]  Ну там просто доказательно.
[02:38:21.580 --> 02:38:23.580]  Может быть, я не знаю.
[02:38:23.580 --> 02:38:26.580]  Я этим не занимался, я не знаю.
[02:38:26.580 --> 02:38:32.580]  Но как бы отдельные вредные умельцы могли и заморочиться, в принципе.
[02:38:32.580 --> 02:38:34.580]  Так вот, хорошо, мерзь сделали.
[02:38:34.580 --> 02:38:38.580]  А теперь как сделать сплит?
[02:38:38.580 --> 02:38:41.580]  Ну сплит делается даже еще тупее.
[02:38:41.580 --> 02:38:45.580]  Потому что мы говорим, так, если надо сплитить по корню, то что мы делаем?
[02:38:45.580 --> 02:38:49.580]  Отпиливаем левое под дерево, делим правое под дерево, говорим вот.
[02:38:49.580 --> 02:38:52.580]  То есть очень удобно.
[02:38:52.580 --> 02:38:53.580]  Вот.
[02:38:53.580 --> 02:38:58.580]  Но что делать, если оказалось, что корень, что надо сплитить не по корню?
[02:38:58.580 --> 02:39:01.580]  Ну ответ, детей все равно отпиливаем.
[02:39:01.580 --> 02:39:06.580]  То есть как бы все, как бы у корня точно детей не будет.
[02:39:06.580 --> 02:39:11.580]  Другой вопрос, что бывший левый ребенок как бы остается целым.
[02:39:11.580 --> 02:39:12.580]  Вот.
[02:39:12.580 --> 02:39:18.580]  А вот правый, ну там допустим, если наш элемент был справа, то вот справа мы пилим дальше.
[02:39:18.580 --> 02:39:20.580]  Так, тут у нас тоже вершинка.
[02:39:20.580 --> 02:39:24.580]  Если тут мы неожиданно решили пойти в левое под дерево.
[02:39:24.580 --> 02:39:28.580]  Ну значит тогда получается у нас тут справа отпилилось дерево.
[02:39:28.580 --> 02:39:30.580]  Вот.
[02:39:30.580 --> 02:39:31.580]  Ну вот.
[02:39:31.580 --> 02:39:33.580]  И тут у нас теперь вот новое под дерево.
[02:39:33.580 --> 02:39:34.580]  Ну и так далее.
[02:39:34.580 --> 02:39:36.580]  То есть вот у нас тут какой-то путь.
[02:39:41.580 --> 02:39:46.580]  От корня, ну право, ну как сказать, там правый ребенка мы естественно отпилили.
[02:39:46.580 --> 02:39:51.580]  Потому что мы его отпилили, более того, вот просто этого правого ребенка мы еще будем деребанить.
[02:39:51.580 --> 02:39:55.580]  А вот когда мы пошли влево, левого ребенка мы отпилили или нет?
[02:39:55.580 --> 02:39:56.580]  Вот этого?
[02:39:56.580 --> 02:39:57.580]  Нет.
[02:39:57.580 --> 02:39:59.580]  Если вправо, потом влево.
[02:39:59.580 --> 02:40:00.580]  А вот этого?
[02:40:00.580 --> 02:40:01.580]  Конечно все отпилили, да.
[02:40:01.580 --> 02:40:03.580]  Ну можно сказать, что...
[02:40:03.580 --> 02:40:05.580]  Ну по сути да, хорошо.
[02:40:05.580 --> 02:40:09.580]  То есть на самом деле да, тут везде тут вот, то есть пилили, то есть все пилим, пилим, пилим.
[02:40:09.580 --> 02:40:11.580]  Вот такая с до икса дошли.
[02:40:11.580 --> 02:40:14.580]  Ну значит тогда тут тоже отпилили там обоих детей.
[02:40:14.580 --> 02:40:16.580]  Или что получилось?
[02:40:16.580 --> 02:40:22.580]  Получился икс, получилось последовательность слева.
[02:40:22.580 --> 02:40:26.580]  И последовательность справа.
[02:40:26.580 --> 02:40:28.580]  Да, пока как СБ дерево.
[02:40:28.580 --> 02:40:30.580]  А что будет отличаться?
[02:40:30.580 --> 02:40:31.580]  Что будет отличаться?
[02:40:31.580 --> 02:40:33.580]  Ну во-первых, давайте подумаем, верно ли, что...
[02:40:33.580 --> 02:40:35.580]  Ну, отличие это будет в том, что да, так.
[02:40:35.580 --> 02:40:39.580]  Ну во-первых, опять последовательность снова не обязательно строго убывает.
[02:40:42.580 --> 02:40:43.580]  Почему?
[02:40:43.580 --> 02:40:49.580]  Ну потому что если в корне вот была аж, и у нас тут первое дерево аж минус два,
[02:40:49.580 --> 02:40:53.580]  то вполне вероятно, что следующее дерево тоже будет аж минус два.
[02:40:54.580 --> 02:40:56.580]  Ну потому что раз тут аж минус один,
[02:40:56.580 --> 02:40:59.580]  то вполне вероятно, что у него тут левый ребенок был аж минус два.
[02:40:59.580 --> 02:41:01.580]  Ну больше он не будет.
[02:41:01.580 --> 02:41:07.580]  Но тем не менее, в общем, скажем так, невозрастаемость гарантируем.
[02:41:10.580 --> 02:41:11.580]  Вот.
[02:41:11.580 --> 02:41:14.580]  Но с другой стороны, тут, конечно, с другой стороны,
[02:41:14.580 --> 02:41:19.580]  избавиться от невозрастаемости мы можем достаточно легко, правда?
[02:41:19.580 --> 02:41:21.580]  То есть ну просто абсолютно то же самое.
[02:41:21.580 --> 02:41:24.580]  Кладем стэк, то есть абсолютно та же технология.
[02:41:24.580 --> 02:41:27.580]  Там что-то там объединяем, и в результате у нас теперь...
[02:41:31.580 --> 02:41:32.580]  Есть.
[02:41:34.580 --> 02:41:35.580]  Вот этот.
[02:41:36.580 --> 02:41:37.580]  Да, мы его никуда не дели.
[02:41:37.580 --> 02:41:38.580]  Он на месте.
[02:41:39.580 --> 02:41:41.580]  Так что промежуточные элементы есть.
[02:41:41.580 --> 02:41:46.580]  Это вот ваша технология, что делайте мержи только через промежуточные элементы.
[02:41:46.580 --> 02:41:47.580]  Вот.
[02:41:49.580 --> 02:41:52.580]  А то эти ваши дикартячки, они что-то это как-то...
[02:41:52.580 --> 02:41:53.580]  Да.
[02:41:53.580 --> 02:41:54.580]  Вот.
[02:41:54.580 --> 02:41:55.580]  Вот.
[02:41:55.580 --> 02:41:56.580]  Они что-то...
[02:41:56.580 --> 02:41:57.580]  Ну вот.
[02:41:58.580 --> 02:41:59.580]  Так что соответственно.
[02:41:59.580 --> 02:42:01.580]  Значит, получается вот так.
[02:42:01.580 --> 02:42:02.580]  Ну вот.
[02:42:02.580 --> 02:42:03.580]  То есть теперь что делать?
[02:42:03.580 --> 02:42:06.580]  То есть теперь у вас есть последовательство строго убывающих высот.
[02:42:06.580 --> 02:42:11.580]  Но здесь слияние такое же, потому что мы тоже умеем сливать заразность высот,
[02:42:11.580 --> 02:42:14.580]  причем гарантируем, что высота будет, наверное, не меньше, чем вот это
[02:42:14.580 --> 02:42:16.580]  и не больше, чем вот это плюс один.
[02:42:18.580 --> 02:42:23.580]  Поэтому после этого тогда получается, что у вас тут, значит, получается телескопическое слияние
[02:42:23.580 --> 02:42:25.580]  вполне себе будет иметь место.
[02:42:26.580 --> 02:42:29.580]  Так что получается, ура, мы победили.
[02:42:32.580 --> 02:42:35.580]  Так что если они станут вот этими промежуточными...
[02:42:35.580 --> 02:42:38.580]  Мы сливаем через промежуточные, я напоминаю.
[02:42:38.580 --> 02:42:40.580]  Поэтому с ними ничего не надо делать.
[02:42:41.580 --> 02:42:45.580]  Жил, добыл, все скачал и пропал.
[02:42:49.580 --> 02:42:50.580]  Как это называется?
[02:42:50.580 --> 02:42:52.580]  Про шо это я вообще...
[02:42:53.580 --> 02:42:54.580]  Так.
[02:42:54.580 --> 02:42:55.580]  Хотя да.
[02:42:55.580 --> 02:42:56.580]  Как бы да.
[02:42:56.580 --> 02:42:59.580]  Несколько лет назад прям всех было бы однозначно ассоциация.
[02:42:59.580 --> 02:43:00.580]  Сейчас вопрос.
[02:43:00.580 --> 02:43:01.580]  Так.
[02:43:04.580 --> 02:43:06.580]  Хотя по этой логике, да.
[02:43:06.580 --> 02:43:07.580]  Так, ладно, чего я стираю.
[02:43:07.580 --> 02:43:09.580]  Так, ну и теперь хит сезона.
[02:43:09.580 --> 02:43:11.580]  Красно-черное дерево.
[02:43:13.580 --> 02:43:14.580]  А теперь да.
[02:43:15.580 --> 02:43:16.580]  А теперь давайте...
[02:43:16.580 --> 02:43:18.580]  А как посплитить его?
[02:43:29.580 --> 02:43:30.580]  Так.
[02:43:30.580 --> 02:43:31.580]  Сейчас.
[02:43:32.580 --> 02:43:34.580]  Так, ну давайте думать, да.
[02:43:34.580 --> 02:43:35.580]  Так, сейчас.
[02:43:35.580 --> 02:43:37.580]  Нет, ну давайте сначала подумаем.
[02:43:37.580 --> 02:43:38.580]  Ну во-первых, так.
[02:43:38.580 --> 02:43:39.580]  Во-первых, тут как бы...
[02:43:39.580 --> 02:43:44.580]  Так, ну давайте сначала подумаем, как красно-черное дерево вообще посплитить.
[02:43:46.580 --> 02:43:47.580]  Да, прям ужасно.
[02:43:47.580 --> 02:43:49.580]  Так, ну давайте начнем с разминочки.
[02:43:50.580 --> 02:43:53.580]  Жили-были два красно-черных дерева.
[02:43:54.580 --> 02:43:57.580]  И промежуточный элемент, куда же без него.
[02:43:58.580 --> 02:44:02.580]  Как провести мерч за желательная разность высот?
[02:44:03.580 --> 02:44:05.580]  Там больше х.
[02:44:06.580 --> 02:44:07.580]  Да-да-да.
[02:44:09.580 --> 02:44:10.580]  Так.
[02:44:10.580 --> 02:44:11.580]  Так, ну ладно, да.
[02:44:11.580 --> 02:44:12.580]  Правильный вопрос.
[02:44:12.580 --> 02:44:13.580]  Давайте вспоминать.
[02:44:13.580 --> 02:44:15.580]  А что такое красно-черное дерево вообще?
[02:44:20.580 --> 02:44:22.580]  Так, одинаковые какие высоты?
[02:44:22.580 --> 02:44:23.580]  Черные.
[02:44:23.580 --> 02:44:24.580]  Да, напоминаю.
[02:44:24.580 --> 02:44:25.580]  Давайте вспомним.
[02:44:25.580 --> 02:44:28.580]  У красно-черного дерева сама общая высота не принципиально.
[02:44:28.580 --> 02:44:30.580]  Принципиально черная высота.
[02:44:32.580 --> 02:44:35.580]  Значит, черная, да, принципиально черная высота.
[02:44:35.580 --> 02:44:37.580]  То есть у нас там по сути варианты следующие.
[02:44:37.580 --> 02:44:41.580]  Что корень черный, черная высота у всех листов одинаковая.
[02:44:42.580 --> 02:44:43.580]  Ну там черная, ну вот.
[02:44:43.580 --> 02:44:47.580]  И что самое главное, никакие две красные вершины там рядом друг с другом не идут.
[02:44:48.580 --> 02:44:49.580]  То есть как бы помним.
[02:44:49.580 --> 02:44:53.580]  Да, у красной вершины дети черные, родители черные, все черное, в общем, соответственно.
[02:44:53.580 --> 02:44:58.580]  То есть если мы делаем за разность черных высот, то это помнение может и не отражать разность реальной высоты?
[02:44:58.580 --> 02:44:59.580]  Нет, это не важно.
[02:44:59.580 --> 02:45:07.580]  Это не важно, потому что реальная разность, то есть реальная разность высот, это как бы разность черных высот умножить максимум на два.
[02:45:07.580 --> 02:45:09.580]  Нет, подождите, а что если у нас с левым?
[02:45:13.580 --> 02:45:18.580]  И что значит у одной вершины, значит высота там в два раза больше.
[02:45:18.580 --> 02:45:19.580]  Это не глобально.
[02:45:20.580 --> 02:45:22.580]  Ну там просто суть такая.
[02:45:22.580 --> 02:45:27.580]  Пусть у тебя там была у одной черная высота 57, а другой 52.
[02:45:27.580 --> 02:45:32.580]  Это означает, что ты тут спустишься до черной высоты 52 не более чем за 5 умножить на два ходов.
[02:45:35.580 --> 02:45:38.580]  Да, потому что ты просто по двум красным вершинам подряд идти не будешь.
[02:45:45.580 --> 02:45:47.580]  Так, да, совершенно верно.
[02:45:50.580 --> 02:45:52.580]  Да, да, да, совершенно верно.
[02:45:52.580 --> 02:45:54.580]  То есть самое тупое, да, то есть слияние пока то же самое.
[02:45:54.580 --> 02:46:06.580]  Если у нас неожиданно черные высоты оказались одинаковые, то давайте красим вершину черный цвет и вешаем из него вот этот слева и справа и радуемся жизни.
[02:46:08.580 --> 02:46:15.580]  Значит, если нам с высотами не повезло, то ну ничего, делаем, то тогда что мы делаем?
[02:46:16.580 --> 02:46:18.580]  Делаем абсолютно то же самое, что и ранее.
[02:46:18.580 --> 02:46:23.580]  То есть спускаемся под дерево с черной высотой такой же, как здесь.
[02:46:24.580 --> 02:46:29.580]  И дальше, и дальше просто вмерживаем.
[02:46:29.580 --> 02:46:33.580]  Здесь я для простоты просто скажу, давайте я скажу, что эта вершина будет красной.
[02:46:35.580 --> 02:46:37.580]  То есть я ее вот вмержу вот сюда.
[02:46:37.580 --> 02:46:43.580]  Единственная проблема может быть, что это будет красная вершина, у которой, соответственно, родитель тоже красный.
[02:46:43.580 --> 02:46:46.580]  Эту проблему мы как в инсекте там умеем решать.
[02:46:46.580 --> 02:46:51.580]  Ну не будем сейчас повторять как, но суть в том, что не более чем за два поворота и какие-то красивые перекраски.
[02:46:51.580 --> 02:46:59.580]  То есть поэтому, то есть это гарантируем, что слияние явно будет там как-то от высоты.
[02:46:59.580 --> 02:47:01.580]  Помните, да?
[02:47:01.580 --> 02:47:05.580]  Сейчас мы находим, получается, одинаковый черный высот.
[02:47:05.580 --> 02:47:09.580]  Да, находим черный, да, и подвешиваем их к красной вершине.
[02:47:13.580 --> 02:47:15.580]  Нет, ну черную, да, не надо.
[02:47:15.580 --> 02:47:17.580]  То есть черной могут быть проблемы.
[02:47:18.580 --> 02:47:24.580]  То есть мы умеем решать проблему, когда в одном подтереве черная высота на один меньше, чем в остальном,
[02:47:24.580 --> 02:47:28.580]  но мы не умеем решать проблемы, когда черная высота на один больше, чем в остальном.
[02:47:30.580 --> 02:47:32.580]  Вот такая вот диспозиция.
[02:47:35.580 --> 02:47:37.580]  Ну хорошо, сливать научились.
[02:47:38.580 --> 02:47:41.580]  Но с другой стороны давайте думать, как же делать сплит?
[02:47:43.580 --> 02:47:45.580]  Ну давайте думать, а что, собственно, поменялось?
[02:47:46.580 --> 02:47:50.580]  Ну поменялось только одно, что нам нужно контролировать черные высоты,
[02:47:50.580 --> 02:47:53.580]  и у нас приближут четыре вершины, могут быть как черными, так и красными.
[02:47:53.580 --> 02:47:55.580]  Впрочем, это не принципиально.
[02:47:58.580 --> 02:48:00.580]  То есть таким образом, ну вот.
[02:48:00.580 --> 02:48:02.580]  То есть в общем-то там ничего особо не поменяется.
[02:48:02.580 --> 02:48:06.580]  То есть единственная проблема, что черные высоты могут тоже не строго убывать,
[02:48:06.580 --> 02:48:08.580]  поэтому это тоже надо будет проблемы решать.
[02:48:09.580 --> 02:48:11.580]  Но суть, в общем-то, абсолютно та же.
[02:48:12.580 --> 02:48:14.580]  Это тоже за разные высоты?
[02:48:14.580 --> 02:48:16.580]  Да, ну как видите, да.
[02:48:17.580 --> 02:48:22.580]  Ну это подъем этой проблемы тоже там, как легко убедиться в красно-черном дереве, делается за разные высоты.
[02:48:22.580 --> 02:48:24.580]  Так что получается логарифом, ура.
[02:48:25.580 --> 02:48:29.580]  То есть на самом деле, да, Б дерево не уникально, то есть на самом деле с точки зрения сплитов и мержей,
[02:48:29.580 --> 02:48:31.580]  на самом деле вам и исходного овэля хватало.
[02:48:32.580 --> 02:48:34.580]  Но правда, единственная маленькая оговорка,
[02:48:34.580 --> 02:48:36.580]  потому что для того, чтобы делать такой,
[02:48:36.580 --> 02:48:40.580]  то есть как бы тут правда маленькая оговорка для того,
[02:48:40.580 --> 02:48:43.580]  чтобы сделать такое слияние там какой-нибудь сплиты,
[02:48:43.580 --> 02:48:46.580]  то есть такой вот мерж там в красно-черном дереве,
[02:48:46.580 --> 02:48:49.580]  вам еще придется эту черную высоту в явном виде найти.
[02:48:52.580 --> 02:48:54.580]  Нет, ну да, то есть нет, ну не совсем так.
[02:48:54.580 --> 02:48:56.580]  На самом деле это не глобальная проблема.
[02:48:56.580 --> 02:49:00.580]  Если вам нужно просто абстрактно слить два дерева,
[02:49:00.580 --> 02:49:07.580]  то во-первых, то в принципе, то как вы это будете делать?
[02:49:08.580 --> 02:49:10.580]  Если вы просто абстрактно слить даже через элемент,
[02:49:10.580 --> 02:49:14.580]  вы можете эти высоты, черные высоты, найти в явном виде, прогулявшись по дереву.
[02:49:15.580 --> 02:49:17.580]  Ну правда, получится логарифом, да,
[02:49:17.580 --> 02:49:20.580]  но как бы если вы просто абстрактно сливаете деревья за логарифом, вас это устраивает.
[02:49:22.580 --> 02:49:25.580]  А так в принципе, когда вы делаете какой-нибудь сплит,
[02:49:25.580 --> 02:49:28.580]  вы можете там эти, то есть там вы эти высоты можете прямо,
[02:49:28.580 --> 02:49:32.580]  то есть там заранее посчитать какие у вас там черные высоты деревьев,
[02:49:32.580 --> 02:49:34.580]  вы их просто аккуратно контролировать.
[02:49:36.580 --> 02:49:38.580]  Поэтому чисто теоретически,
[02:49:38.580 --> 02:49:40.580]  наверное, СТЛ мог бы такое реализовать.
[02:49:42.580 --> 02:49:44.580]  Другой вопрос, что, видимо, решили заморачиваться?
[02:49:44.580 --> 02:49:45.580]  Нет.
[02:49:46.580 --> 02:49:48.580]  Потому что, видимо, глобально не увидели смысла,
[02:49:48.580 --> 02:49:52.580]  то есть зачем нужен сплит и мерж в интерфейсе СТЛ.
[02:49:54.580 --> 02:49:55.580]  Ну, может быть.
[02:49:56.580 --> 02:49:57.580]  Нет, может и нет.
[02:49:57.580 --> 02:50:01.580]  Ну, тут не только так, видите, там же сформулируем так,
[02:50:01.580 --> 02:50:04.580]  для того, чтобы что-то, как бы тут еще такой момент.
[02:50:04.580 --> 02:50:06.580]  Просто стандарт, это что такое?
[02:50:06.580 --> 02:50:08.580]  То есть как бы стандарт, это то, что вот должен,
[02:50:08.580 --> 02:50:11.580]  то есть это минимум, который должен реализовать любой компилятор.
[02:50:12.580 --> 02:50:14.580]  То есть как бы если вы хотите,
[02:50:14.580 --> 02:50:17.580]  чтобы все разработчики компиляторов это реализовывали,
[02:50:17.580 --> 02:50:22.580]  то нужны очень жесткие обоснования, как бы почему это вообще надо.
[02:50:23.580 --> 02:50:25.580]  То есть есть подозрение, что сплит сетов,
[02:50:25.580 --> 02:50:27.580]  это достаточно локальная задача.
[02:50:29.580 --> 02:50:31.580]  Нет, это мы с вами олимпиадники,
[02:50:31.580 --> 02:50:34.580]  но как вы сами понимаете, в комитете по C++ не олимпиадники сидят.
[02:50:35.580 --> 02:50:38.580]  Там сидят больше люди как бы из реального мира разработки.
[02:50:40.580 --> 02:50:41.580]  Ну вот.
[02:50:41.580 --> 02:50:42.580]  То есть можно половину...
[02:50:43.580 --> 02:50:44.580]  То есть там...
[02:50:44.580 --> 02:50:46.580]  Поэтому они там задумываются,
[02:50:46.580 --> 02:50:50.580]  насколько часто вам реально нужно сплитить сет в промышленной разработке.
[02:50:50.580 --> 02:50:53.580]  В принципе, вообразить себе, что вам там нужен сет,
[02:50:53.580 --> 02:50:56.580]  для того, чтобы там реально что-то хранить и искать какие-то элементы,
[02:50:56.580 --> 02:50:58.580]  да, это удобно, это нужно, это будем использовать.
[02:50:59.580 --> 02:51:01.580]  Но нужно ли там делать сплит и мерч?
[02:51:01.580 --> 02:51:03.580]  Ну, скорее всего, не принципиально.
[02:51:03.580 --> 02:51:05.580]  То есть обратите внимание, там база.
[02:51:05.580 --> 02:51:07.580]  То есть как бы в этом смысле,
[02:51:07.580 --> 02:51:09.580]  если вы хотите использовать какие-то адские алгоритмы,
[02:51:09.580 --> 02:51:11.580]  то как бы есть библиотека Boost.
[02:51:11.580 --> 02:51:13.580]  Вы столкнулись с такой?
[02:51:14.580 --> 02:51:15.580]  Вот.
[02:51:15.580 --> 02:51:17.580]  Ну, там конечно...
[02:51:17.580 --> 02:51:19.580]  То есть это когда огроменная библиотека,
[02:51:19.580 --> 02:51:21.580]  в которой на самом деле можно идти едва ли не...
[02:51:21.580 --> 02:51:23.580]  Ну, там просто едва ли не все олимпиадные алгоритмы,
[02:51:23.580 --> 02:51:25.580]  которые только есть в природе.
[02:51:26.580 --> 02:51:29.580]  То есть там есть какой-то адский шаблонный ДФС там на самом деле,
[02:51:29.580 --> 02:51:31.580]  в который вы будете передавать,
[02:51:31.580 --> 02:51:33.580]  что вы будете делать там,
[02:51:33.580 --> 02:51:35.580]  перед проходом по детям,
[02:51:35.580 --> 02:51:37.580]  во время прохода по детям и так далее.
[02:51:38.580 --> 02:51:39.580]  Есть такое.
[02:51:39.580 --> 02:51:41.580]  Но более того, что самое главное,
[02:51:41.580 --> 02:51:43.580]  практически все новинки STL,
[02:51:43.580 --> 02:51:45.580]  типа там Sharit Potterov и так далее,
[02:51:45.580 --> 02:51:47.580]  они на самом деле там, скорее всего,
[02:51:47.580 --> 02:51:49.580]  за 10 лет до этого были в Boost.
[02:51:49.580 --> 02:51:50.580]  Вот.
[02:51:50.580 --> 02:51:52.580]  Так что если вам хочется прям использовать все алгоритмы,
[02:51:52.580 --> 02:51:54.580]  просто как использовать там...
[02:51:54.580 --> 02:51:56.580]  Потому что там всякие DX3 там,
[02:51:56.580 --> 02:51:58.580]  естественно, там тоже есть.
[02:51:58.580 --> 02:52:01.580]  Там есть сплетни нож в Б-дереве.
[02:52:01.580 --> 02:52:02.580]  Не знаю.
[02:52:02.580 --> 02:52:04.580]  В Б-дереве не уверен.
[02:52:06.580 --> 02:52:08.580]  ФФТ... Ой, ну...
[02:52:08.580 --> 02:52:10.580]  По-любому не знаю.
[02:52:10.580 --> 02:52:11.580]  Вот.
[02:52:11.580 --> 02:52:13.580]  Но я не знаю, там очень подробнее я вас отошлю лучше к само...
[02:52:13.580 --> 02:52:14.580]  Нет.
[02:52:14.580 --> 02:52:16.580]  Подробнее я вас лучше там...
[02:52:17.580 --> 02:52:18.580]  Нет.
[02:52:18.580 --> 02:52:19.580]  Ну давайте так.
[02:52:19.580 --> 02:52:21.580]  Что там конкретно, если чего там каких-то мелочей нет,
[02:52:21.580 --> 02:52:24.580]  это я вас как бы отошлю, собственно, к самому Boost.
[02:52:24.580 --> 02:52:27.580]  Но как бы там, понятно, многое там есть.
[02:52:27.580 --> 02:52:28.580]  Вот.
[02:52:28.580 --> 02:52:30.580]  Но в STL-е как бы есть только то,
[02:52:30.580 --> 02:52:32.580]  что вот необходимо просто вот совсем база.
[02:52:33.580 --> 02:52:34.580]  То есть там это нот.
[02:52:34.580 --> 02:52:36.580]  Поэтому тут нот аккуратно.
[02:52:36.580 --> 02:52:37.580]  Ну и много нот.
[02:52:37.580 --> 02:52:41.580]  Ну и тем более, что как бы там же есть еще такой вот этот вот балансик,
[02:52:41.580 --> 02:52:44.580]  что если вот это может быть полузнеофициальное расширение STL
[02:52:44.580 --> 02:52:46.580]  в каких-нибудь глушных компиляторах.
[02:52:46.580 --> 02:52:49.580]  Потому что как бы, если вам, потому что сет не умеет искать
[02:52:49.580 --> 02:52:51.580]  как и по возрастанию элемент,
[02:52:51.580 --> 02:52:54.580]  но вы там в глушном компиляторе можете там достать
[02:52:54.580 --> 02:52:57.580]  какую-то чуть более продвинутую версию сета, которая это умеет.
[02:53:05.580 --> 02:53:08.580]  Ну чисто в теории можно, но практически скорее всего это там
[02:53:08.580 --> 02:53:10.580]  какой-то оверхед по разработке даст.
[02:53:11.580 --> 02:53:13.580]  И по разработке, и по константе.
[02:53:16.580 --> 02:53:20.580]  Ну, компиляторов есть все-таки несколько, да, все-таки поэтому такое.
[02:53:21.580 --> 02:53:25.580]  Ну вот, то есть нет, здесь как бы это все как бы аккуратно,
[02:53:25.580 --> 02:53:28.580]  потому что мы тут следим за тем, чтобы у нас не было там монополизма какого-то.
[02:53:29.580 --> 02:53:33.580]  Чтобы, что типа существует только один там настоящий компилятор C++,
[02:53:33.580 --> 02:53:36.580]  это Gnus C++, все остальное там, это дешевое там,
[02:53:36.580 --> 02:53:39.580]  дешевая подделка китайцев из Microsoft'а, да.
[02:53:40.580 --> 02:53:43.580]  Ну вот, это все как бы аккуратно, потому что мы тут следим за тем,
[02:53:43.580 --> 02:53:46.580]  что есть там дешевая подделка китайцев из Microsoft'а, да, да, да.
[02:53:50.580 --> 02:53:56.580]  Нет, это да, но у нас тут все-таки в этом смысле как бы есть как бы аккуратность.
[02:54:02.580 --> 02:54:03.580]  Нет, ну тут «не».
[02:54:04.580 --> 02:54:05.580]  Ну может быть.
[02:54:13.580 --> 02:54:24.740]  нет я так скажу нет чисто теперь нет да не но да хорошего как бы да смысл в том что как бы да что
[02:54:24.740 --> 02:54:30.300]  как бы как бы стандарте плюс говорит о том что как бы компилятор что как ваш компилятор си плюс
[02:54:30.300 --> 02:54:34.380]  плюс он должен поддерживать си плюс плюс вот в этом виде да то есть понятна будет там другая
[02:54:34.380 --> 02:54:38.060]  архитектура придется там скорее всего сам компилятор писать как-то принципиально по-другому
[02:54:38.060 --> 02:54:44.660]  то есть это надо другой вопрос что у нас сейчас как бы видимо архитектура компьютеров там чуть
[02:54:44.660 --> 02:54:50.980]  менее чем везде там одна этажа в общем-то да хотя хотя там какие-то хотя есть там какие-то
[02:54:50.980 --> 02:54:55.220]  еще что там там советские разработки которые может даже не хуже работают между прочим да но
[02:54:55.220 --> 02:55:10.060]  это ну возможно тут у человека но вот ну тем более да вот и да вот теперь вот да но этим
[02:55:10.060 --> 02:55:14.180]  эпов вот когда вот как минимум эпов том тоже надо объяснять как должен работать си плюс плюс
[02:55:14.180 --> 02:55:24.740]  нет ну как сказать нет формулирован так скорее всего значит придется к значит кому-то придется
[02:55:24.740 --> 02:55:30.980]  просто под значит под это как это под айо с собственно в этом эпловские написать соответственно
[02:55:30.980 --> 02:55:39.540]  компилятор си плюс плюс ну вот и там соответственно так но вот это были но вот так что соответственно это
[02:55:39.540 --> 02:55:52.380]  были честные деревья абсолютно но разница в том что когда мы там берем вот эти вершины мы у них
[02:55:52.380 --> 02:56:01.140]  как бы и цвета стираем но есть там эти цвета мы же учитываем для того чтобы там может быть
[02:56:01.140 --> 02:56:05.060]  понимать какие высоты дирек черные высоты деревьев у нас тут есть чтобы их не пересчитывать
[02:56:05.060 --> 02:56:13.980]  напоминаю в отличие от овл у нас высоты деревьев не хранят ну ничего ну не важно просто
[02:56:13.980 --> 02:56:19.460]  черные красные там в плите когда мы там как бы говорим что как бы отпиливаем коре то есть там
[02:56:19.460 --> 02:56:24.020]  от корня отпиливаем детей идем в какого-то из этих ребенков ну как бы как бы нам сейчас
[02:56:24.020 --> 02:56:37.740]  плевать этот корень красный или черный конечно но это не важно но скажем так там не сильно
[02:56:37.740 --> 02:56:42.220]  принципиально хотя ладно есть одна мелкая говорка на самом деле если в тупую делать может только
[02:56:42.220 --> 02:56:51.500]  оказаться что у вас корень каких-то из под деревья будет красный ну да нет его можно перекрасить но
[02:56:51.500 --> 02:56:56.300]  тогда значит надо просто аккуратно следить что у вас там что чтобы у вас там обгон по высоте не
[02:56:56.300 --> 02:57:07.140]  случился вот так же в этом свой то есть в этом соседа может так что но вот потому что да но
[02:57:07.140 --> 02:57:18.580]  хотя нет но хотя нет тут на самом деле заметим следующее что заметим ли мы что-то нет вот
[02:57:18.740 --> 02:57:23.380]  так вы гарантировали что высоты тут не убывают но с другой стороны если у нас тут есть какие-то
[02:57:23.380 --> 02:57:29.580]  равные деревья только равные по высоте черной высоте деревья только у одного из них черный
[02:57:29.580 --> 02:57:33.700]  корень дрова красный то перекраска красного неожиданно может привести к тому что у вас
[02:57:33.700 --> 02:57:48.860]  произошел обгон по высоте для того потому что у нас три инварианта ну сфорилируем так у
[02:57:48.860 --> 02:57:54.260]  нас есть инвариант инвариант заявлял нам то что корень черный и мы это и кстати в одном
[02:57:54.260 --> 02:58:05.900]  но например мы это использовали вот так но например вот когда мы вот ослеваем два дерева
[02:58:05.900 --> 02:58:11.380]  мы вот это используем потому что мы вершину x изначально заявляем как красненькую если у нас
[02:58:11.380 --> 02:58:18.260]  вот тут еще будет украсть корень красненький у нас будут проблемы но на самом деле это проблема
[02:58:18.260 --> 02:58:23.940]  тоже техническая решается она например так то есть допустим что изначально у вас как бы все
[02:58:23.940 --> 02:58:33.380]  все деревья хорошие высоты их не убывают но только столеша говорочка что отдай один из корней что
[02:58:33.380 --> 02:58:39.300]  корни могут быть красненькие тогда как это делается сначала пробежимся и добьемся того что у
[02:58:39.300 --> 02:58:46.220]  вас высоты строго убывают как мы этого добьемся добьемся мы этого также как и ранее просто
[02:58:46.860 --> 02:58:51.680]  как мы обидеем две вершины с одинаковых два дерева с одинаковой высотой подвешиваем
[02:58:51.680 --> 02:58:57.200]  подвешиваем их к вот этой приезжите на вершине а ее мы там допустим железо бетон на объявляем
[02:58:57.200 --> 02:59:04.660]  черный понятно да поэтому как бы но вот то есть поэтому там как бы становится все в порядке после
[02:59:04.660 --> 02:59:09.740]  этого тогда у нас оказывается что у нас есть последовательность строго убывающая но некоторые
[02:59:09.740 --> 02:59:15.380]  корни оказываются красными. Да, перекрасим красные теперь черные, теперь последовательность
[02:59:15.380 --> 02:59:21.980]  невозрастающая. Ну теперь там сольем еще, если там образовались равные высоты после этого.
[02:59:21.980 --> 02:59:34.860]  Это как бы технический вопрос. Ну можно и так сказать. Но когда мы сливаем через
[02:59:35.460 --> 02:59:41.580]  деревья разные высоты, оказывается выгодно сделать ее красной. Ну просто тупо так удобно.
[02:59:41.580 --> 02:59:50.700]  Так что так. Но это уже ладно. Давайте так, детали я вам оставлю на самостоятельное
[02:59:50.700 --> 02:59:57.180]  додумывание. То есть не сильно сложно в общем-то. Вот, но пока заметим, да, отметим, что мы в принципе
[02:59:57.180 --> 03:00:04.740]  обсудили блок честных деревьев. То есть вот АВЛ, красно-черные Б, это такие приятные ноты.
[03:00:04.740 --> 03:00:14.500]  Это такие приятные деревья, которые делают все честно. Ну вот, правда да, с точки зрения
[03:00:14.500 --> 03:00:21.460]  реализации с минус, что они конечно по реализации громоздки там требуют какой-то константы. Поэтому
[03:00:21.460 --> 03:00:25.460]  там есть конечно альтернатива в лице дикотячки, которая делает все вероятносты по ноте,
[03:00:25.460 --> 03:00:32.340]  поэтому пишется за муа. Но на самом деле дальше логика наука пошла немножко в другом направлении.
[03:00:32.740 --> 03:00:41.580]  Потому что наука заявила, ну вот, потому что наука такая, наука так заметила, что из
[03:00:41.580 --> 03:00:48.340]  практики, что на самом деле не всегда оказывается оптимально использовать именно деревья, у которых
[03:00:48.340 --> 03:00:55.420]  все работает за логарифом. Почему? Ну потому что нет, это конечно, потому что это деревья,
[03:00:55.420 --> 03:01:02.220]  они идеальные и лучше не придумаешь, если у вас запросы абсолютно рандомны. Да, то есть
[03:01:02.220 --> 03:01:06.780]  если вас там тыкнуть, ну это реально. То есть если вы ничего заранее не знаете и у вас там все
[03:01:06.780 --> 03:01:14.220]  запросы могут быть абсолютно произвольны. Но вот возникает вопрос, но иногда возникает вопрос,
[03:01:14.220 --> 03:01:21.940]  вот например, вот у вас там допустим такая самая простая задача. Хочет дано n элементов и вы
[03:01:21.940 --> 03:01:30.540]  хотите из них составить двоичное дерево поиска. Ну для того, что там элементы искать. Вам может
[03:01:30.540 --> 03:01:34.980]  показаться, что самое оптимальное, давайте из них сделаем типа вот эту двоичную кучу и возрадуемся.
[03:01:34.980 --> 03:01:43.860]  Но оказывается, что это не всегда оптимально. Потому что оказывается, что если вы заранее что-то
[03:01:43.860 --> 03:01:51.420]  знаете о запросах, то может оказаться, что дерево выгодно делать по-другому. Вот обычно,
[03:01:51.420 --> 03:01:56.340]  если вы когда-нибудь изучали оптимизацию кнута, ну как кто изучал когда-нибудь оптимизацию кнута?
[03:01:56.340 --> 03:02:11.980]  Ну динамическое программирование такое есть. Ну да, но по-разному там можно это делать,
[03:02:11.980 --> 03:02:16.020]  то смотрите, вот оптимизация кнута, то там возникала действительно такая задача,
[03:02:16.020 --> 03:02:23.980]  что дано n элементов и про каждый из них известно, условно там сколько раз его будут искать. Надо
[03:02:23.980 --> 03:02:28.220]  составить двоичное дерево поиска таким образом, чтобы суммарное время поиска всех элементов было
[03:02:28.220 --> 03:02:34.740]  как можно меньше. И там выяснялось, что это такая не самая, ну вот, то есть выяснялось, что это такая,
[03:02:34.740 --> 03:02:42.100]  в принципе, какая-то задача на ДП. Ну не будем сейчас копать ДП, понятно, не сильно сложно. Вот,
[03:02:42.100 --> 03:02:47.340]  но просто я к чему? То есть это просто оказывается к тому, что действительно такое дерево может
[03:02:47.340 --> 03:02:53.100]  оказаться лучше, чем вместо этого вот обставить какие-то ВЛки, вот эти вот Б и так далее. Вот,
[03:02:53.100 --> 03:02:58.500]  поэтому там вот возникала проблема, что даже там под какие-то конкретные случаи создавались какие-то
[03:02:58.500 --> 03:03:03.980]  отдельные деревья, у которых есть там какие-то, может быть, адские асимптутики. Ну, может быть,
[03:03:03.980 --> 03:03:09.540]  может быть, какой-нибудь там информационный дерево, например, которое там, если в элемент тычут с
[03:03:09.540 --> 03:03:14.460]  вероятностью P1, то есть там или там тыкали исторически, то оно будет там подгоняться так,
[03:03:14.460 --> 03:03:23.060]  что действительно как бы там поиск его будет работать за какое-то хорошее время. Ну,
[03:03:23.220 --> 03:03:30.620]  за какой-нибудь там, за логарифм 1 делить на P на эту вероятность. Вот, то есть там на самом деле
[03:03:30.620 --> 03:03:34.980]  можно открыть прям оригинальную статью Тарьяна, то есть там много деревьев, то есть есть там всякие
[03:03:34.980 --> 03:03:39.180]  там для этих случаев вот такие, для этих вот такие, там какие-то фингер-3 возникают там еще.
[03:03:39.180 --> 03:03:57.500]  Не знаю. Я не знаю, что такое фингер-3. Ну, может быть, но я не помню там какой-то логарифм,
[03:03:57.500 --> 03:04:04.100]  там какие-то оценки модульные и так далее. Но как бы в чем победа? То есть на самом деле,
[03:04:04.100 --> 03:04:11.900]  то есть тут идея радостных это, ну вот, то есть идея действительно в том, но вот идея в данном
[03:04:11.900 --> 03:04:18.740]  случае не просто Тарьяна, тут у нас как бы авторов 2, там Дэниел Слейтер. Ну, возможно,
[03:04:18.740 --> 03:04:25.900]  встречали есть такой человек там синий на Кодфорсе, все такой. Дэниел Слейтер. Ну,
[03:04:25.900 --> 03:04:30.540]  да. Ну, одно дело придумывать крутые алгоритмы для практики, там и быть ученым. Другое дело,
[03:04:30.540 --> 03:04:47.900]  не знаю. Дэниел, да. Уже зеленый. Индус? Нет.
[03:05:00.540 --> 03:05:19.900]  Нет, это уже другой вопрос. Ну, неважно. Нет, ну всякие. Да нет, вряд ли. Нет, ну какие-то
[03:05:19.900 --> 03:05:28.500]  раунды писал. Нет, наверное, весело. Нет, ну быть олимпиаником-то разные вещи. Нет,
[03:05:28.820 --> 03:05:32.900]  он стал крутым. На всякий случай мы сейчас будем изучать структуру данных, которая придумалась
[03:05:32.900 --> 03:05:40.260]  до того, как спортивное программирование начало глобально выходить за пределы США, скажем так.
[03:05:40.260 --> 03:05:50.100]  Потому что речь сейчас идет где-то о 84-м ходе. Ну, плюс-минус. 84-86, там что-то в этом роде. То есть
[03:05:50.100 --> 03:05:57.980]  ACPC, то есть сам себе чемпионат мира ИСМ появился, там считается, что он стартовал в 77-м году. Вот,
[03:05:57.980 --> 03:06:04.140]  но как бы он долгое время был только там, только локально в США. То есть там, скажем, всякие там
[03:06:04.140 --> 03:06:13.180]  российские команды начали участвовать где-то, по-моему, года с плюс-минус 90-го. Нет. Нет,
[03:06:13.180 --> 03:06:17.940]  но почему? Первыми в истории чемпионами мира, по-моему, едва ли не Дуров и Лопатин в 2000-м и Стале.
[03:06:17.940 --> 03:06:27.180]  Да, Лопатин абсолютно тот самый. А Дуров, скажем так, старший брат того самого. Я вам даже больше скажу,
[03:06:27.180 --> 03:06:32.740]  тот самый Лопатин и так далее. Они, собственно, имели прямое отношение к разработке исходной
[03:06:32.740 --> 03:06:40.100]  версии компании ВКонтакте. Да и к телеграмму вроде тоже. Вот. То есть нет, Лопатин к этому
[03:06:40.100 --> 03:06:54.580]  сейчас отношения точно не имеет? Нормально. Ну вот. Так вот. Ну вот. Так что, соответственно. Нет,
[03:06:54.580 --> 03:06:58.740]  так что нет. Нет, это все там первое, это было. То есть если там покопать во всех медалих, там, да,
[03:06:58.740 --> 03:07:03.340]  будут там двукратные чемпионы. Там, собственно, Дуров, Лопатин, у них там два сокомандника разных
[03:07:03.340 --> 03:07:08.220]  были, у них они там дважды чемпионами стали. Потом где-то там в четвертом году золотые медали выиграл
[03:07:08.220 --> 03:07:14.260]  Станкевич. Тоже тот самый. Да. Так что в случае чего у Станкевича как бы есть медалька и, собственно,
[03:07:14.260 --> 03:07:19.620]  как участника тоже. А не просто это там. Называется тренером семи чемпионов мира, там подумаешь.
[03:07:19.620 --> 03:07:28.140]  По мелочи. Вот. Нет, ну. Ну я не знаю, по-моему, является ли Геннадий Коткевич тренером чемпионов.
[03:07:28.140 --> 03:07:39.260]  А, уже является, ну. Не, ну золотых-то почти, наверное, да, но впрочем. Ну, нет, ну,
[03:07:39.260 --> 03:07:44.900]  давайте так. Нет, ну, не совсем. Геннадий Коткевич, по-моему, становился чемпионом мира, когда он
[03:07:44.900 --> 03:07:52.420]  становился чемпионом. По-моему, что-то типа. Ну, я не знаю, скажешь так, это были какие-то
[03:07:52.420 --> 03:08:00.180]  года, разнесенные на два. То ли 13, ну я не помню, это как бы в 14-м точно нет. Вот я участвовал,
[03:08:00.180 --> 03:08:07.180]  его там не было. Вот. Но как бы было это то ли в 13-м и 15-м, то ли в 15-м. Нет, хотя в 15-м,
[03:08:07.180 --> 03:08:13.380]  17-м точно нет, потому что в 17-м году полуфинал выиграл Фистех. Ну, вот. Да, да, да, это было.
[03:08:13.380 --> 03:08:19.460]  Кто это был? А, ну да, Останин Голованов, Уваров, видимо, это и были. А, ну вот так. Хотя,
[03:08:19.460 --> 03:08:25.820]  нет, ну тут сложно, потому что там. А, ну понятно, да, потому что они тогда съездили и тогда в итоге
[03:08:25.820 --> 03:08:33.380]  за три минуты до конца все-таки там МКУшники их отобрали чемпионство. Ну, скорее всего, сейчас.
[03:08:33.380 --> 03:08:43.820]  Да и бог в памяти. Ой, ладно. Нет, это я вам скажу, это при мне просто было. Геннадий,
[03:08:43.820 --> 03:08:49.260]  значит, нет, Гимадеев, Луготь, Шишкин. У них было пятое место соответствующего полуфинала.
[03:08:49.260 --> 03:08:59.300]  А нет, в Ру. Нет, все еще хуже было. Там эпическая история была. Потому что, значит, было так,
[03:08:59.300 --> 03:09:07.820]  потому что это был сезон 10-11 года, когда командователь Роджер в составе Гимадеев,
[03:09:07.820 --> 03:09:14.820]  Луготь, Шишкин заняла пятое место. Так приятно было потом читать комментарии и видеть там
[03:09:14.820 --> 03:09:21.380]  комментарии, что Фистех что-то нереальное вытворяет. Да, для справочки, до этого момента Фистех
[03:09:21.380 --> 03:09:28.500]  выходил на финал только один раз в 2006 году. Правда, на этом финале занял 13 место.
[03:09:29.380 --> 03:09:35.540]  Обидное 13 место, потому что по ходу контеста они там из топ-10 были очень много времени.
[03:09:35.540 --> 03:09:45.980]  Но не важно. Соответственно, в девятом году на финал Фистех не проходил. Это был мой первый
[03:09:45.980 --> 03:09:50.900]  сезон, но я тогда не попал на полуфинал, потому что от Фистех тогда две команды проходила,
[03:09:50.900 --> 03:09:57.540]  а мы по Фистеху третьи были. Но там были опытные люди. В 2010 году, соответственно,
[03:09:58.340 --> 03:10:03.060]  они заняли пятое место, но сам финал слили. Какое-то сорок лохматое какое-то там.
[03:10:11.060 --> 03:10:15.020]  Пошли в следующий сезон, но, правда, безыльтернативно. Честно говоря, не ожидалось,
[03:10:15.020 --> 03:10:20.100]  что от Фистеха им кто-то навяжет борьбу. В результате они вышли на финал, заняв,
[03:10:20.100 --> 03:10:26.300]  по-моему, на полуфинале какое-то восьмое место, обыграв девятое другую команду Фистеха.
[03:10:26.300 --> 03:10:34.700]  Вот, не буду тыкать, кто там был, да. Нет, ну ладно, надо тыкнуть пальцем. Там были,
[03:10:34.700 --> 03:10:43.420]  собственно, мы были в составе, да, Гош Чебанов, Ваня Смирнов. Тогда такой состав был. Вот,
[03:10:43.420 --> 03:10:49.340]  так вот. Мы им тогда проиграли 15 штрафных минут. Просто буквально одну лишнюю посылку
[03:10:49.340 --> 03:10:55.100]  с Compilation Error. Да, на полуфинале, да. Но, правда, они сказали, что у них тоже была посылка с
[03:10:55.100 --> 03:11:00.500]  Compilation Error, так что тут не считается. Вот. Ну, вот, честно скажу, мы тогда, честно, как бы,
[03:11:00.500 --> 03:11:06.900]  мы себе тогда не ставили целью выходить на финал. То есть, наверное, но вот поэтому так. Вот. Ну,
[03:11:06.900 --> 03:11:11.180]  не то, что мы себе ставили целью на финал не выходить, конечно, но мы, как бы, не ожидали,
[03:11:11.180 --> 03:11:15.900]  что мы тут, оказывается, можем навязать борьбу. Ну вот. Ну, вот. Ну, и оказалось, что и слава богу.
[03:11:15.900 --> 03:11:19.980]  В результате они поехали на финал и взяли там, собственно, золотую медаль, абсолютное третье
[03:11:19.980 --> 03:11:25.820]  место. То есть, более того, отдельно там ходит видео на том, как они там решают пятую задачу,
[03:11:25.820 --> 03:11:30.060]  вообще возглавляют таблицу. То есть, это просто отдельное там эпическое видео,
[03:11:30.060 --> 03:11:37.740]  просто этого абсолютного счастья. Да, ну вот. Да, это было шикарно. Вот. Соответственно. Вот,
[03:11:37.740 --> 03:11:43.860]  значит, потом, что, вот. Значит, это получается был, ну вот, это были, значит, это был 10-11 год.
[03:11:43.860 --> 03:11:50.220]  Вот. Значит, да. Ну, так, кто там, осталось только вспомнить, кто там в те годы чемпионом был.
[03:11:50.220 --> 03:12:01.260]  Хотя, нет. Нет, дай бог памяти. То есть, вот про наших я помню, а кто там дрался за чемпионство,
[03:12:01.260 --> 03:12:05.580]  я не помню, скорее всего. Хотя, там, начиная с 10-го года, вроде как, кроме Этмо, Питера,
[03:12:05.580 --> 03:12:12.380]  и потом МГУ, и потом где-то МГУ, в общем-то, никто больше чемпионат не выигрывал. Вот. Нет,
[03:12:12.380 --> 03:12:16.700]  ну, так и так. Потому что последними чемпионами были так. Потому что, я помню точно, в 19-м году,
[03:12:16.700 --> 03:12:21.540]  потому что, значит, чемпионами второй раз стали там МГУ и Рэд Панда. Ну, там и Патов Макеев,
[03:12:21.540 --> 03:12:30.100]  Горбунов, это точно. Вот. Ну, в 2020, а с тех пор у нас произошел сбой, потому что в 2020 году
[03:12:30.100 --> 03:12:36.740]  финал прошел в 2021, его выиграла команда Нижегородского университета. Ну, в составе,
[03:12:36.740 --> 03:12:42.740]  собственно, Данилюка Калинина, собственно, и Лера Рябчикова, да. Вот, соответственно. Ну,
[03:12:42.740 --> 03:12:46.780]  вот. Но с тех пор, после этого, произошел только один финал, где впервые, за, по-моему, несколько
[03:12:46.780 --> 03:12:53.940]  десятилетий, по-моему, чемпионом стал кто-то из Америки. Да, китайские межнары из MIT, да,
[03:12:53.940 --> 03:13:03.100]  там стали чемпионами. Ну, и являются действующими чемпионами. Вот. Ну, было. Нет, ну, как понятно,
[03:13:03.100 --> 03:13:06.420]  что учитывая, что вы CPC, вы на финале можете поучаствовать не более двух раз, понятно,
[03:13:06.420 --> 03:13:14.220]  что тут все относительно. Вот. Так что там. Так что, нет, этого. Так что, нет, это было, там, это,
[03:13:14.220 --> 03:13:20.460]  это все было вот так. Ну, да. Нет, в основном, тогда чемпионами там в основном становились разные
[03:13:20.460 --> 03:13:30.540]  команды ИТМО. Где-то становилась Геннадия. В 2014 году была команда СПБ. Так, стоп. Да. Или,
[03:13:30.540 --> 03:13:39.020]  или зачтем вот эту болталонию за перерыв, потому что, в принципе, да. Ну, вообще, я не знаю. Ну,
[03:13:39.020 --> 03:13:48.740]  где-то там, ну, где-то в 13.45-13.55 нас, как бы, начнут отсюда жестко выбирать. Да. Да. У нас есть час.
[03:13:48.740 --> 03:13:58.420]  Так что, ладно, придется зачесть за перерыв. Да. Вот. Ну, что делать? Ну, ладно, посмотрим. Ладно,
[03:13:58.420 --> 03:14:03.380]  если получится меньше, значит, можно будет вас пораньше отпустить. Хотя, впрочем, не уверен.
[03:14:03.380 --> 03:14:10.540]  Потому что, как бы, смотрите, значит, если, так, да, не знаю, уже не помню, как мы вышли на всю эту
[03:14:10.540 --> 03:14:35.420]  историю CPC. Да, вот. Да, не помню, как это было, но я скажу. Хотя, ну. Нет, там какие-то другие составы
[03:14:35.420 --> 03:14:40.940]  были. Нет, видимо, в 17-м году. Ну, да. Шинетарет Панда, как бы, вы свои полуфиналы вроде брала.
[03:14:40.940 --> 03:14:46.660]  Вот. Да. Ну, ладно, неважно. Да ладно, эти подробности, господи, на сайте Нирка можете
[03:14:46.660 --> 03:14:52.700]  там подробно посмотреть, какие там составы были. Вот. Ладно, значит, зачем нужно сплей? Так вот,
[03:14:52.700 --> 03:14:58.300]  значит, как тут радостно сообщают нам авторы. Всякие синие, ну, Код Форсисе. И некоторые,
[03:14:58.300 --> 03:15:04.060]  возможно, там даже нервировшиеся никогда. Вот. Так вот, они нам гордо теперь сообщают,
[03:15:04.060 --> 03:15:08.660]  что на самом деле сплей, теперь вот эти все большие эти фингер, три прочие разные деревья,
[03:15:08.660 --> 03:15:15.900]  они на самом деле не нужны. Потому что, если вы просто верите в амортизацию. Ну, если вам,
[03:15:15.900 --> 03:15:30.460]  как бы, амортизация нормальная, то у нас есть сплей дерево, которое умеет все. Да. Да. Нет,
[03:15:30.460 --> 03:15:35.740]  почему? Сортировка за линию она, конечно, не умеет. Но сортировка за НЛОГН она вполне умеет.
[03:15:35.740 --> 03:15:43.260]  Потому что добавим все элементы за НЛОГН, потом пробежимся ДФС. Ну, или просто поудаляем
[03:15:43.260 --> 03:15:49.460]  элементы, тоже пойдет. Потому что сплей дерева карантирует следующее. Во-первых, ну, в плане
[03:15:49.460 --> 03:15:54.820]  какой-то учет. То есть, если подгонять правильные потенциалы, то можно показать, что, во-первых,
[03:15:54.820 --> 03:16:02.820]  все операции в сплей дереве будут делаться за логарифом. Если подгонять другой правильный
[03:16:02.820 --> 03:16:07.420]  потенциал, то можно подгонять, что если каждая вершина ищется с вероятностью там П1,
[03:16:07.420 --> 03:16:19.500]  то тогда учетное время ее поиска будет логарифом 1 делить на П1. Вот. А если взять эти ваши фингер
[03:16:19.500 --> 03:16:23.220]  три, то их тоже можно взять и выбросить, потому что сплей дерево тоже из-за их асимптотику,
[03:16:23.220 --> 03:16:35.180]  не помню, какую оно работает. Чего? Не, ну не настолько. Нет, если ты его ищешь с большой
[03:16:35.180 --> 03:16:48.820]  вероятностью, то да. Нет, ну просто нет, скорее всего, это значит, что да, его тоже будешь там
[03:16:48.820 --> 03:16:55.700]  суммарно за 1 искать. Потому что основная идея этого дерева предельно простая. То есть,
[03:16:55.700 --> 03:17:00.060]  оно даже называется не сплей дерево, а вот оригинальная статья, если вы гугланете,
[03:17:00.060 --> 03:17:09.140]  будет называться там что-то типа self-adjusting tree или что-то в этом роде. А, self-adjusting,
[03:17:10.100 --> 03:17:22.540]  data structure. Именно. То есть, оно будет внутри себя само балансироваться. То есть, более того,
[03:17:22.540 --> 03:17:29.820]  нет, более того, смотрите. Основная идея такая, вот мы в Аврельке подгоняли какую-то балансировку
[03:17:29.820 --> 03:17:35.620]  с помощью поворотов. Так вот, у нас теперь будет сейчас принципиально новинка. То есть, раньше
[03:17:35.620 --> 03:17:41.380]  мы страдали там тремя разными способами, чтобы добиться того, чтобы у нас там был какой-то
[03:17:41.380 --> 03:17:49.140]  баланс. Либо высоты прям железно одинаковые, там либо они были там плюс-минус 1, либо там
[03:17:49.140 --> 03:17:55.500]  плюс-минус 1, либо там красно-черное вот это там издевательство. А теперь мы пойдем другим путем.
[03:17:55.500 --> 03:18:02.060]  Мы говорим, чтобы все, больше никаких вариантов нет. Теперь любое из там n-ого числа каталана
[03:18:02.060 --> 03:18:10.300]  двоичных деревьев поиска является корректным сплэй-деревом. Да, спрашивается, за счет чего
[03:18:10.300 --> 03:18:18.300]  логорифм. Ну, а первое, за счет амортизации. Самое главное, самая главная идея просто такая,
[03:18:18.300 --> 03:18:26.620]  что скажем так, каждая по сути операция это спуск по дереву к какой-то там, ну где-то вот
[03:18:26.620 --> 03:18:36.780]  какой-то вершине, правда. Так вот, у нас, так вот, мы будем вводить мистическую операцию сплэй от V.
[03:18:36.780 --> 03:18:53.460]  Вот, она будет, значит, за реальное время, за реальное время тета от глубины вершины V,
[03:18:53.460 --> 03:19:03.060]  делать некие там мистические повороты, относительно мистические, таким образом, чтобы вершина V стала
[03:19:03.060 --> 03:19:11.100]  корнем. То есть вот такой вот неожиданный кэш. То есть условно, если вы искали вершину V, то в
[03:19:11.100 --> 03:19:17.100]  результате операции, то есть вы как бы спуститесь до вершины V и вызовите сплэй. В результате вершина
[03:19:17.100 --> 03:19:24.300]  V окажется тупо корнем. То есть это получается такой кэширующий эффект. То есть, соответственно,
[03:19:24.300 --> 03:19:32.340]  если вы что-то искали, то если вы еще раз через секунду захотите найти эту вершину, то она будет
[03:19:32.340 --> 03:19:38.340]  у вас просто рядом с вами в коре. А если через три секунды, то она из этого корня, скорее всего,
[03:19:38.340 --> 03:19:49.940]  не сильно далеко уйдет. Вот, понятная идея, да? То есть вот такой вот красота. Вот. То есть вот такая
[03:19:49.940 --> 03:19:55.860]  вот мистическая идея. То есть еще раз. То есть окажется, ну, идеально окажется так, что реальное
[03:19:55.860 --> 03:20:08.580]  время. То есть реальное время это от, так сказать, глубины. Нет, не высоты, а глубины вершины V,
[03:20:08.580 --> 03:20:19.260]  то есть расстояние до корня. А учетное время, а вот в зависимости от потенциала. Но нас будет
[03:20:19.260 --> 03:20:30.300]  интересовать, что это будет от логарифа. Ну ладно, в общем случае на самом деле мы докажем,
[03:20:30.300 --> 03:20:42.300]  что это будет от логарифа V делить на V с индексом V. Вот так. А значит это следующее. Откуда берутся
[03:20:42.300 --> 03:20:51.180]  разные потенциалы. Мы на каждую вершину навешиваем, значит потенциальщик W. Там, условно говоря,
[03:20:51.180 --> 03:20:58.340]  навешиваем чиселку W. Про чиселку W мы знаем только одно, что чиселка W с индексом V каждая
[03:20:58.340 --> 03:21:06.340]  больше либо равна единице. А W это просто сумма по всем вершинам, так сказать, весов вершин.
[03:21:06.340 --> 03:21:21.460]  Самый тупой вариант, это когда у каждой вершины W равно 1, тогда это в точности логая. Да,
[03:21:21.460 --> 03:21:28.260]  мы это будем доказывать именно в этом виде. Почему? Ну просто потому, что нам когда-нибудь,
[03:21:28.260 --> 03:21:38.020]  как минимум, когда-нибудь в линкате нам это тоже пригодится. Ну да. Но для любого,
[03:21:38.020 --> 03:21:43.540]  только вот чтобы эти W были больше либо равные там. Хотя здесь-то это не принципиально, конечно.
[03:21:43.540 --> 03:21:49.460]  Но потому что заметим, что такая сим-точка обладает приятным свойством. Если вы все веса
[03:21:49.460 --> 03:21:54.380]  домножите на константу, то ничего не поменяется. То есть условно говоря, вы сантиметров килограмма
[03:21:54.380 --> 03:22:04.980]  переведете, в общем-то. В реальности они, конечно, никакого значения не имеют. То есть как бы да,
[03:22:04.980 --> 03:22:10.060]  в плей-дерево вы не храните никаких весов. То есть максимум, что вы может быть храните,
[03:22:10.060 --> 03:22:17.300]  это указатель на родителя. И то не факт. Ну и то понятно, что для большинства задач на самом деле
[03:22:17.300 --> 03:22:21.740]  это не надо. Потому что скорее всего во всех задачах, которые вы решаете, вы к вершине W
[03:22:21.740 --> 03:22:28.740]  спускаетесь как-то сверху. То есть спускаетесь как-то сверху, поэтому знаете весь ее путь. Поэтому
[03:22:28.740 --> 03:22:33.300]  когда вы вызываете сплей от W, то путь вы уже знаете. Поэтому родителей хранить не обязательно.
[03:22:33.300 --> 03:22:41.340]  То есть как видите, смысл в том, что как бы этот сплей – это такой способ оплаты. То есть вы можете
[03:22:41.340 --> 03:22:46.540]  спускаться к какой угодно вершине. Если вы вызовете от нее сплей, то как бы вот этот спуск до
[03:22:46.540 --> 03:22:56.420]  нее оплатится. Понятно, да? То есть вот такая идея. То есть вот мистический такой сплей. Пока визуально
[03:22:56.420 --> 03:23:05.020]  вы можете считать, что он делает просто едва ли немалые поворотики, вот эти локальные. Ну и в
[03:23:05.020 --> 03:23:12.380]  принципе, но оказывается, что если у вас есть такой сплей, то ну что можно делать? Ну на самом
[03:23:12.380 --> 03:23:18.140]  деле да. Ну ладно, как искать элемент? Думаю, очевидно. То есть ищем, как обычно, в обычном дереве
[03:23:18.140 --> 03:23:22.700]  поиска, а потом от найденной вершины или от последней рассмотренной вершины, если вы ничего
[03:23:22.700 --> 03:23:30.700]  не нашли, запускаем сплей. А про баланс ничего не знаем? Вообще ничего не знаем. То есть нам наплевать.
[03:23:30.700 --> 03:23:38.100]  Нет, ну там сплей просто будет работать за счет того, что там, конечно, поворотики будут чуть-чуть
[03:23:38.100 --> 03:23:45.460]  посложнее, чем просто малые поворотики. Но пока можно себе вообразить и это. Там как бы не сильно
[03:23:45.460 --> 03:23:53.140]  сложнее будет. Вот, ну теперь давайте подумаем, что еще можно сделать? Ну давай, ну на самом деле
[03:23:53.140 --> 03:24:01.260]  тут все операции будут на этот раз сводиться к сплиту и мержу. И вот теперь задача, как отпилить,
[03:24:01.260 --> 03:24:10.780]  как сделать сплит по элементу X? Да, совершенно верно. То есть как бы действительно сплит
[03:24:10.780 --> 03:24:15.780]  действительно будет выглядеть неожиданно тупым образом. Значит, найдем в дереве этот элемент,
[03:24:15.780 --> 03:24:23.300]  значит вызовем от него сплей, вот он теперь в корне. Ну и значит, давайте тогда отпилим от него,
[03:24:23.300 --> 03:24:27.500]  то есть отпилим теперь правого ребенка или левого ребенка. Да, здесь уже сплит без
[03:24:27.500 --> 03:24:43.460]  промежуточного элемента, хотя можно в принципе и с ним. Не понял вопроса. Никаких. То есть мы
[03:24:43.460 --> 03:24:47.420]  работаем со сплей деревом и варианта в нем никаких. Это просто обычное двоичное дерево.
[03:24:47.420 --> 03:24:53.860]  Просто отличие только одно, что мы оплачиваем какие-то спуски до вершины V с помощью мистической
[03:24:53.860 --> 03:25:02.220]  операции сплей, которая с помощью каких-то поворотов поднимает V в корень. Все. Вот это все,
[03:25:02.220 --> 03:25:10.500]  что мы знаем. То есть никаких вариантов там не поддерживается. Да, просто двоичное дерево. То есть
[03:25:10.500 --> 03:25:18.500]  как я сказал, любое двоичное дерево, дерево поиска может оказаться корректным сплей деревом. То есть
[03:25:18.500 --> 03:25:29.100]  никаких проблем. Здесь как бы не любая паста. Ну правда, тут конечно маленькая оговорка, что да,
[03:25:29.100 --> 03:25:35.780]  вам может показаться очевидным, что если вы умеете делать сплей за логарифом, то как бы
[03:25:35.780 --> 03:25:39.900]  и эту операцию вы тут делаете получается за сплей плюс от единицы, поэтому очевидно,
[03:25:39.900 --> 03:25:47.700]  что это тоже работает за логарифом. Но если вы достаточно грамотные люди, то вы понимаете,
[03:25:47.700 --> 03:25:53.780]  что тут надо сказать, видимо, что-то еще. Потому что от единицы реального времени это вовсе не
[03:25:53.780 --> 03:26:01.900]  означает, что это не от плюс бесконечности потенциального. Поэтому тут вам придется,
[03:26:01.900 --> 03:26:12.580]  конечно, то есть придется тут потенциальчиками побаловаться. Не совсем, не совсем. Значит,
[03:26:12.580 --> 03:26:23.780]  там будет ситуация такая. У каждой вершины есть, во-первых, w с индексом v, это мы будем
[03:26:23.780 --> 03:26:36.820]  называть вес вершины. Значит, также мы введем понятие czv, но я условно это буду называть cz,
[03:26:36.820 --> 03:27:00.980]  конечно, не совсем корректно. Это сумма весов в подделье вершины v. Понятно, да?
[03:27:00.980 --> 03:27:18.420]  Ну, возможно, нам еще пригодится. Ну, короче говоря, так. Вот, значит, что у нас тут еще будет?
[03:27:18.420 --> 03:27:25.140]  Ну, короче говоря, может быть, мы введем еще кое-что. На самом деле, так скажу, потенциал,
[03:27:25.140 --> 03:27:39.140]  он сумма по всем вершинам, логарифма этих вот cz. Да, логарифма честного двоичного.
[03:27:39.140 --> 03:27:48.020]  Нет, мы введем ровно такой потенциал. Другой вопрос, как мы будем веса вешать?
[03:27:48.900 --> 03:27:58.900]  Ну, это не важно, мы сразу в общем виде докажем. То есть, если вы этих весов подставите один, то будет победа.
[03:27:58.900 --> 03:28:04.580]  Так, но пока же нам нужно это так. Мы, конечно, это будем отдельно обсуждать, может быть, да.
[03:28:04.580 --> 03:28:12.260]  То есть, не знаю, посмотрим сейчас по времени, может даже не сегодня, но неважно. Значит, к чему это нас приводит?
[03:28:12.500 --> 03:28:23.220]  Значит, потенциал есть? Потенциал есть. Вот. И, значит, теперь давайте подумаем, если мы отпилили от дерева такую вершинку, такую штуку,
[03:28:25.220 --> 03:28:27.620]  какая учетная стоимость у нас в этой операции будет?
[03:28:31.620 --> 03:28:40.740]  Да, ну, естественно, да. С точки зрения, мы подразумеваем, что у нас в системе есть несколько деревьев, и потенциал системы – это сумма потенциала всех деревьев.
[03:28:42.740 --> 03:28:53.700]  Да, но теперь заметим, что когда мы отпиливаем от корня ребеночка, то как бы заметим, что меняется только ССшка вершины, и то уменьшается.
[03:28:53.700 --> 03:29:00.180]  Поэтому получается, что учетная стоимость конкретно этой операции не более чем 1.
[03:29:00.180 --> 03:29:05.700]  У нас же потенциалы, когда мы делали сплей, изменили, а после него, говорю, что все чуть меньше.
[03:29:05.700 --> 03:29:10.180]  Да, ну, нет. Сначала мы сделали сплей. Его учетная стоимость была вот логорифом.
[03:29:11.100 --> 03:29:14.100]  Пока не доказали. Пока в это верим.
[03:29:16.100 --> 03:29:20.100]  Но далее теперь заметим, что от пил заведом работает за единицу.
[03:29:20.100 --> 03:29:23.100]  Но другой вопрос, за что будет работать при пил?
[03:29:25.100 --> 03:29:28.100]  Ну, потому что, как вы думаете, как мы будем делать мерш?
[03:29:31.100 --> 03:29:35.100]  Да, совершенно верно. То есть при пил будет работать так.
[03:29:36.020 --> 03:29:40.020]  Мы найдем в левом дереве самую правую вершину. Вызовем от нее сплей.
[03:29:41.020 --> 03:29:46.020]  То есть получится вот что-то такое. И справа от нее повесим вот это правое дерево.
[03:29:48.020 --> 03:29:53.020]  Ну, то есть еще раз. Как слить два, как теперь померзнуть два дерева?
[03:29:53.020 --> 03:29:56.020]  А два дерева с элементом или без?
[03:29:56.020 --> 03:30:00.020]  Без элемента даже. Хотя, может, в принципе и...
[03:30:00.020 --> 03:30:01.020]  С элементом же нельзя просто?
[03:30:01.020 --> 03:30:04.020]  Хотя, ну, смотрите, с элементом, да, без проблем.
[03:30:04.940 --> 03:30:07.940]  Ну, с элементом вообще просто взяли, к нему повесили.
[03:30:07.940 --> 03:30:10.940]  Нет, а по большому счету вот эта версия недалеко ушла.
[03:30:10.940 --> 03:30:15.940]  По большому счету мы просто самый правый элемент, по сути, достали и ударили.
[03:30:15.940 --> 03:30:19.940]  Чтобы потом его обратно туда же повесить. То есть это одно и то же.
[03:30:19.940 --> 03:30:22.940]  Вот, то есть действительно оказывается, что если вы просто возьмете вершину
[03:30:22.940 --> 03:30:25.940]  с каким-то своим весом и привесите к ней два дерева,
[03:30:25.940 --> 03:30:30.940]  то учетная стоимость этого привешивания окажется, ну, просто потенциал этой вершины, короче.
[03:30:31.860 --> 03:30:35.860]  Точнее, логорифм суммы весов, получается.
[03:30:37.860 --> 03:30:38.860]  Вот.
[03:30:38.860 --> 03:30:40.860]  То есть логорифм суммы весов.
[03:30:40.860 --> 03:30:44.860]  Поэтому вам тут и надо следить, что если W там не сильно большая, то все адекватно.
[03:30:44.860 --> 03:30:46.860]  Получается, легорифм работает за логорифм все-таки?
[03:30:46.860 --> 03:30:47.860]  Конечно.
[03:30:47.860 --> 03:30:50.860]  Если сплит за единицу, то мерч логорифм.
[03:30:50.860 --> 03:30:53.860]  Нет-нет-нет, сплит тоже за логорифм, потому что там сплит.
[03:30:53.860 --> 03:30:55.860]  Ну мы если сплит пока не рассматриваем.
[03:30:56.780 --> 03:31:03.780]  Ну, скажем так, сплит работает за сплей плюс единица, мерч работает за сплей плюс вот все-таки лог СЗ.
[03:31:03.780 --> 03:31:06.780]  Да, тут, увы, тут ничего не поделаешь.
[03:31:06.780 --> 03:31:07.780]  Вот.
[03:31:07.780 --> 03:31:09.780]  Но, тем не менее, вот, оказывается удобно.
[03:31:14.780 --> 03:31:18.780]  Ну, потому что когда ты вот делаешь вот этот отпил, этот отпил работает за от единицы
[03:31:18.780 --> 03:31:22.780]  реального времени и учетного тоже, потому что потенциал это не увеличивает.
[03:31:23.700 --> 03:31:24.700]  Вот.
[03:31:24.700 --> 03:31:28.700]  А тут потенциал увеличивается, как бы, на логорифм веса, поэтому учетная стоимость этого,
[03:31:28.700 --> 03:31:30.700]  конкретно этих подвешиваний такая.
[03:31:32.700 --> 03:31:33.700]  Так что вот такая вот красота.
[03:31:35.700 --> 03:31:37.700]  Вот, значит, что-то у нас еще.
[03:31:37.700 --> 03:31:41.700]  Ну или можно было, знаете, как сказать, чтобы аккуратнее было, логорифм суммарного,
[03:31:41.700 --> 03:31:45.700]  там, суммарного веса поделить на вес вот этой вершинки, на самом деле.
[03:31:46.700 --> 03:31:49.700]  А почему пример же на логорифм у нас увеличивается?
[03:31:50.620 --> 03:31:54.620]  Потому что, ну, потому что учетная стоимость подвешивания будет не единица, а логорифм.
[03:31:56.620 --> 03:31:57.620]  Почему?
[03:31:57.620 --> 03:32:03.620]  Потому что у этой вершины потенциал резко, там, был он, у него логорифм ее веса, да?
[03:32:03.620 --> 03:32:06.620]  А стал логорифм суммарного веса всего дерева.
[03:32:10.620 --> 03:32:11.620]  И что?
[03:32:13.620 --> 03:32:16.620]  Ну, просто я говорю, конкретно, конкретно вес вот этой вот операции, когда ты подвесил,
[03:32:16.620 --> 03:32:18.620]  тогда получается он не единица.
[03:32:20.620 --> 03:32:22.620]  То есть учетная стоимость оказалась больше, чем реальная.
[03:32:29.620 --> 03:32:32.620]  Да, ну, суммарный вес поддельного этой вершины увеличился.
[03:32:33.620 --> 03:32:36.620]  Вот, поэтому получается, что и потенциал увеличился,
[03:32:36.620 --> 03:32:40.620]  значит, получается, учетная стоимость тоже оказалась больше, чем реальная.
[03:32:43.620 --> 03:32:44.620]  Ну, по сути.
[03:32:50.620 --> 03:32:51.620]  Ну.
[03:32:58.620 --> 03:33:00.620]  Ну, и сейчас изменения.
[03:33:02.620 --> 03:33:04.620]  Нет, почему время работает с плея?
[03:33:14.620 --> 03:33:16.620]  А, нет, это если вы вот это доставали.
[03:33:20.620 --> 03:33:24.620]  Ну, кстати, да, если вы мержали с промежутком, то, кстати, с плея здесь не было.
[03:33:29.620 --> 03:33:33.620]  Ну, да, что-то похоже на время работы с плея, потому что, как бы, с плея тут не было.
[03:33:33.620 --> 03:33:35.620]  А так, в принципе, по ходу, да.
[03:33:37.620 --> 03:33:38.620]  Вот.
[03:33:41.620 --> 03:33:45.620]  Ну, там, ну, там идея в том, что, как бы, при сплее,
[03:33:46.540 --> 03:33:49.540]  при мерже через промежуточный элемент с плея как такового не было.
[03:33:50.540 --> 03:33:54.540]  Но, заметим, что, по большому счету, потенциал увеличился,
[03:33:54.540 --> 03:33:57.540]  она в точности логарифма суммарного веса,
[03:33:57.540 --> 03:34:01.540]  минус логарифм, соответственно, того, что там было перед этим.
[03:34:02.540 --> 03:34:06.540]  То есть, ну, это в точности на всякий случай есть логарифм двоичный,
[03:34:06.540 --> 03:34:08.540]  w делить на wx.
[03:34:10.540 --> 03:34:15.540]  То есть, получается, это значит, учетная стоимость получается 1 плюс вот этот логарифм.
[03:34:16.540 --> 03:34:21.540]  И это просто тут было отмечено, что это очень похоже на то, что мы мечтаем увидеть в сплее.
[03:34:24.540 --> 03:34:25.540]  Вот.
[03:34:26.540 --> 03:34:27.540]  То есть, ну, вот.
[03:34:27.540 --> 03:34:31.540]  То есть, это будет такая оценка, хотя, честно скажу, в реальности скорее,
[03:34:31.540 --> 03:34:35.540]  то есть, в реальности мы с вами докажем по факту вот это вот.
[03:34:36.460 --> 03:34:38.460]  Ну да, понятно, что это лучше, чем вот это.
[03:34:39.460 --> 03:34:43.460]  Потому что, да, мы с z можем оценивать, оцениваем снизу, как вес этой вершины,
[03:34:43.460 --> 03:34:44.460]  поэтому окей.
[03:34:44.460 --> 03:34:45.460]  Но это мелкая деталь.
[03:34:46.460 --> 03:34:48.460]  Сумма логарифмов.
[03:34:52.460 --> 03:34:53.460]  Что?
[03:34:53.460 --> 03:34:54.460]  Какие?
[03:34:54.460 --> 03:34:55.460]  Где?
[03:34:55.460 --> 03:34:56.460]  Размеры?
[03:34:56.460 --> 03:34:57.460]  Да.
[03:34:57.460 --> 03:34:58.460]  Да.
[03:34:58.460 --> 03:34:59.460]  Да.
[03:34:59.460 --> 03:35:00.460]  Да.
[03:35:00.460 --> 03:35:01.460]  Да.
[03:35:01.460 --> 03:35:02.460]  Да.
[03:35:02.460 --> 03:35:03.460]  Да.
[03:35:04.380 --> 03:35:05.380]  Да.
[03:35:06.380 --> 03:35:08.380]  Тогда непонятно, на что конкретно логарифм.
[03:35:08.380 --> 03:35:10.380]  Да, непонятно, конечно.
[03:35:11.380 --> 03:35:13.380]  Логарифм какого-то произведения.
[03:35:14.380 --> 03:35:15.380]  Ну и что?
[03:35:15.380 --> 03:35:16.380]  Нет.
[03:35:16.380 --> 03:35:17.380]  Нет.
[03:35:17.380 --> 03:35:18.380]  Почему?
[03:35:18.380 --> 03:35:19.380]  У нас дельтер.
[03:35:19.380 --> 03:35:20.380]  Это все еще лог.
[03:35:20.380 --> 03:35:21.380]  Нет.
[03:35:21.380 --> 03:35:22.380]  Тут он не принципиально.
[03:35:22.380 --> 03:35:24.380]  Ну, то есть, это можно сказать, как произведение.
[03:35:24.380 --> 03:35:25.380]  Ну и что?
[03:35:25.380 --> 03:35:28.380]  Можно выписать, как появился.
[03:35:29.380 --> 03:35:30.380]  Поменялся где?
[03:35:30.380 --> 03:35:31.380]  Ну, после.
[03:35:32.300 --> 03:35:34.300]  Ну, смотри, как он поменялся.
[03:35:34.300 --> 03:35:35.300]  Смотри.
[03:35:35.300 --> 03:35:37.300]  Ну, заметим, что, смотри, СЗ.
[03:35:37.300 --> 03:35:40.300]  Ну скажи так, утверждение такое.
[03:35:40.300 --> 03:35:44.300]  Значит, это сумма по всем СЗ, логарифм СЗ.
[03:35:44.300 --> 03:35:48.300]  Заметим, что СЗ поменялась только у одной вершины.
[03:35:48.300 --> 03:35:49.300]  У Икса.
[03:35:49.300 --> 03:35:51.300]  И как она?
[03:35:51.300 --> 03:35:52.300]  Чего?
[03:35:52.300 --> 03:35:55.300]  На каком пути?
[03:35:55.300 --> 03:35:58.300]  Эти деревья вообще не менялись, поэтому...
[03:35:58.300 --> 03:35:59.300]  Нет, какой пути?
[03:35:59.300 --> 03:36:00.300]  У нас здесь сплетая небо.
[03:36:00.300 --> 03:36:01.300]  У нас здесь не спой.
[03:36:02.220 --> 03:36:03.220]  Не-не-не.
[03:36:03.220 --> 03:36:07.220]  Мы сейчас рассматриваем мерш с промежутком сразу.
[03:36:07.220 --> 03:36:10.220]  Когда он нам да.
[03:36:10.220 --> 03:36:11.220]  Вот.
[03:36:11.220 --> 03:36:12.220]  Тогда как здесь поменялся?
[03:36:12.220 --> 03:36:15.220]  Но тогда, соответственно, как поменялся СЗ?
[03:36:15.220 --> 03:36:18.220]  Ну, СЗ был у нас...
[03:36:18.220 --> 03:36:22.220]  Ну, когда мы ничего не подвешивали, СЗ совпадал просто с весом.
[03:36:22.220 --> 03:36:25.220]  А когда мы подвесили, он стал просто W, типа суммарным
[03:36:25.220 --> 03:36:26.220]  вот этим весом.
[03:36:26.220 --> 03:36:27.220]  Вот и все.
[03:36:27.220 --> 03:36:28.220]  Вот.
[03:36:29.140 --> 03:36:32.140]  Так что такая вот неожиданная идея.
[03:36:32.140 --> 03:36:33.140]  Вот.
[03:36:33.140 --> 03:36:36.140]  Ну, а теперь заметим, что всякие вставка, теперь
[03:36:36.140 --> 03:36:39.140]  просто мы больше не заморачиваемся, потому что как делать
[03:36:39.140 --> 03:36:40.140]  вставку?
[03:36:40.140 --> 03:36:43.140]  Ну, вот, естественно, просто посплитим по элементу
[03:36:43.140 --> 03:36:45.140]  и сделаем вот это.
[03:36:45.140 --> 03:36:46.140]  Да.
[03:36:46.140 --> 03:36:47.140]  Как удалить?
[03:36:47.140 --> 03:36:50.140]  Достать, повесить, там, довести элемент до корня
[03:36:50.140 --> 03:36:51.140]  и радостно его казнить.
[03:36:51.140 --> 03:36:52.140]  Вот.
[03:36:52.140 --> 03:36:53.140]  Ну, как-то да.
[03:36:53.140 --> 03:36:54.140]  Просто да.
[03:36:54.140 --> 03:36:55.140]  Просто так казнить нельзя.
[03:36:55.140 --> 03:36:57.140]  Если ты король, то как бы святое дело.
[03:36:57.140 --> 03:36:58.140]  Да.
[03:36:59.060 --> 03:37:00.060]  Ну, вот.
[03:37:00.060 --> 03:37:01.060]  Соответственно.
[03:37:01.060 --> 03:37:02.060]  Вот.
[03:37:02.060 --> 03:37:05.060]  То есть получается очень удобно, то есть всякие,
[03:37:05.060 --> 03:37:08.060]  понятно, всякие прочие там эти проталкивания.
[03:37:08.060 --> 03:37:11.060]  То есть понятно, что там всякие там какие-нибудь
[03:37:11.060 --> 03:37:13.060]  проталкивания, операции сверху.
[03:37:13.060 --> 03:37:15.060]  В общем, здесь тоже прекрасно работают, как вы понимаете,
[03:37:15.060 --> 03:37:16.060]  да?
[03:37:16.060 --> 03:37:17.060]  Да.
[03:37:17.060 --> 03:37:18.060]  Вот.
[03:37:18.060 --> 03:37:19.060]  То есть как бы...
[03:37:19.060 --> 03:37:20.060]  Да, нет.
[03:37:20.060 --> 03:37:21.060]  Ну, как уже...
[03:37:21.060 --> 03:37:24.060]  Нет, если у нас есть сплит и мерч, то как бы понятно,
[03:37:24.060 --> 03:37:27.060]  что все там, все описанные деревья прекрасно работают
[03:37:27.980 --> 03:37:28.980]  по неявному ключу.
[03:37:28.980 --> 03:37:29.980]  Да.
[03:37:29.980 --> 03:37:31.980]  Ну, я думаю, там не надо рассказывать о концепции
[03:37:31.980 --> 03:37:32.980]  неявного ключа.
[03:37:32.980 --> 03:37:33.980]  Да.
[03:37:33.980 --> 03:37:34.980]  Я надеюсь.
[03:37:34.980 --> 03:37:35.980]  Или надо.
[03:37:35.980 --> 03:37:36.980]  Так, ладно.
[03:37:36.980 --> 03:37:37.980]  Есть кто живой вообще?
[03:37:37.980 --> 03:37:38.980]  Или все.
[03:37:38.980 --> 03:37:39.980]  Или все.
[03:37:39.980 --> 03:37:40.980]  Или слова неявных ключи всех вы просто выводят.
[03:37:40.980 --> 03:37:41.980]  Кто-то живой есть.
[03:37:41.980 --> 03:37:43.980]  Нет, живой-то есть, но я просто не пойму этого,
[03:37:43.980 --> 03:37:46.980]  потому что он как бы никто не берет на себя ответственность.
[03:37:46.980 --> 03:37:47.980]  Что сказать?
[03:37:47.980 --> 03:37:48.980]  Не надо.
[03:37:48.980 --> 03:37:49.980]  Не надо.
[03:37:49.980 --> 03:37:50.980]  Не надо.
[03:37:50.980 --> 03:37:51.980]  Не надо.
[03:37:51.980 --> 03:37:52.980]  Не надо.
[03:37:52.980 --> 03:37:53.980]  Не надо.
[03:37:53.980 --> 03:37:54.980]  Не надо.
[03:37:55.900 --> 03:37:56.900]  Никто не берет на себя ответственность.
[03:37:56.900 --> 03:37:57.900]  Что сказать?
[03:37:57.900 --> 03:37:58.900]  Не надо.
[03:37:58.900 --> 03:37:59.900]  Или наоборот?
[03:37:59.900 --> 03:38:00.900]  Что как бы...
[03:38:00.900 --> 03:38:01.900]  Ответ...
[03:38:01.900 --> 03:38:02.900]  Нечем было ответить одному.
[03:38:02.900 --> 03:38:03.900]  Надо было знать...
[03:38:03.900 --> 03:38:04.900]  Ну вот, да.
[03:38:04.900 --> 03:38:05.900]  Хорошо.
[03:38:05.900 --> 03:38:06.900]  Да, но нет.
[03:38:06.900 --> 03:38:07.900]  Можно так сказать.
[03:38:07.900 --> 03:38:08.900]  Ставите это просто тут.
[03:38:08.900 --> 03:38:09.900]  Как всегда.
[03:38:09.900 --> 03:38:10.900]  Тут лучше аккуратно.
[03:38:10.900 --> 03:38:11.900]  Хорошо.
[03:38:11.900 --> 03:38:12.900]  Так.
[03:38:12.900 --> 03:38:13.900]  Ну ладно.
[03:38:13.900 --> 03:38:14.900]  Как мы сделали?
[03:38:14.900 --> 03:38:15.900]  И все.
[03:38:15.900 --> 03:38:16.900]  Потому что сплит делают только по ключу,
[03:38:16.900 --> 03:38:17.900]  который есть в дереве.
[03:38:17.900 --> 03:38:18.900]  Эм...
[03:38:18.900 --> 03:38:19.900]  Мы же сказали, что если в ключе нет деревья,
[03:38:19.900 --> 03:38:22.900]  давай поставим максимально из левого по дереву.
[03:38:22.900 --> 03:38:23.900]  Это мерже.
[03:38:23.900 --> 03:38:24.900]  Так.
[03:38:25.820 --> 03:38:26.820]  Нет.
[03:38:26.820 --> 03:38:27.820]  Ну, смотрите.
[03:38:27.820 --> 03:38:28.820]  Нет.
[03:38:28.820 --> 03:38:29.820]  Нет.
[03:38:29.820 --> 03:38:30.820]  Ну, идея...
[03:38:30.820 --> 03:38:31.820]  Значит, да.
[03:38:31.820 --> 03:38:32.820]  Действительно.
[03:38:32.820 --> 03:38:33.820]  Как правильно заметили, что...
[03:38:33.820 --> 03:38:34.820]  Действительно.
[03:38:34.820 --> 03:38:35.820]  Как там делать с...
[03:38:35.820 --> 03:38:36.820]  Как это...
[03:38:36.820 --> 03:38:39.220]  Ну, на самом деле, инсерт можно сделать так.
[03:38:39.220 --> 03:38:41.380]  Давайте этот инсерт честно искать.
[03:38:41.380 --> 03:38:45.580]  То есть, честно идем, идем, идем, идем.
[03:38:45.580 --> 03:38:48.020]  Ну, кстати, если мы его найдем, то не надо вставлять.
[03:38:48.020 --> 03:38:50.100]  Но, допустим, мы его не нашли.
[03:38:50.100 --> 03:38:52.340]  Тогда это означает, что мы тут шли, шли, шли, шли.
[03:38:52.340 --> 03:38:53.940]  Вот до какой-то вершинки дошли.
[03:38:53.980 --> 03:38:54.980]  Попытались пойти вправо.
[03:38:54.980 --> 03:38:55.980]  А там...
[03:38:55.980 --> 03:38:56.980]  Вот.
[03:38:56.980 --> 03:38:59.980]  Что мы тогда делаем?
[03:38:59.980 --> 03:39:05.460]  Ну, тогда, значит, у меня возникает мистическое подозрение.
[03:39:05.460 --> 03:39:08.660]  У меня возникает мистическое подозрение, что этот элемент
[03:39:08.660 --> 03:39:11.420]  был максимальным элементом в дереве, который больше
[03:39:11.420 --> 03:39:12.420]  этого.
[03:39:12.420 --> 03:39:13.420]  Ну, если мы здесь вправо попытались пойти.
[03:39:13.420 --> 03:39:14.420]  Меньше.
[03:39:14.420 --> 03:39:15.420]  Да.
[03:39:15.420 --> 03:39:16.420]  Это максимально...
[03:39:16.420 --> 03:39:19.020]  Ну, такой, типа да, а пербаунд наоборот.
[03:39:19.100 --> 03:39:28.100]  Ну, да, лавирует, то есть...
[03:39:28.100 --> 03:39:31.100]  Ну, вот.
[03:39:31.100 --> 03:39:34.100]  Значит, тогда идея такая.
[03:39:34.100 --> 03:39:35.100]  Ну, вот.
[03:39:35.100 --> 03:39:36.100]  Значит, смотрите.
[03:39:36.100 --> 03:39:37.100]  Нет.
[03:39:37.100 --> 03:39:38.100]  Просто тогда смотрите.
[03:39:38.100 --> 03:39:39.100]  Тогда идея такая.
[03:39:39.100 --> 03:39:41.460]  Тогда, раз это так, то нам останется просто посплеить
[03:39:41.460 --> 03:39:45.340]  этот элемент в корень и отпилить от него правое
[03:39:45.340 --> 03:39:46.340]  поддерево.
[03:39:46.340 --> 03:39:47.340]  Все.
[03:39:47.660 --> 03:39:49.820]  Все элементы будут больше, а в левом поддере будут
[03:39:49.820 --> 03:39:50.820]  все элементы меньше.
[03:39:50.820 --> 03:39:53.820]  Сплеем от него?
[03:39:53.820 --> 03:39:54.820]  Да.
[03:39:54.820 --> 03:39:57.820]  У нас в левом поддере.
[03:39:57.820 --> 03:39:58.820]  Ну, да.
[03:39:58.820 --> 03:39:59.820]  Ну, вот.
[03:39:59.820 --> 03:40:02.820]  Ну, так, то есть, я говорю, самое сложное здесь, это
[03:40:02.820 --> 03:40:05.660]  поверить, что этот элемент действительно максимальный
[03:40:05.660 --> 03:40:06.660]  и меньший.
[03:40:06.660 --> 03:40:08.860]  Мы делаем, может, подвесить просто копию себя, а потом
[03:40:08.860 --> 03:40:09.860]  просто их сверх корень?
[03:40:09.860 --> 03:40:10.860]  А нет.
[03:40:10.860 --> 03:40:11.860]  Ой, ой, ой, ой, ой, ой.
[03:40:11.860 --> 03:40:12.860]  А вот это небезопасно.
[03:40:12.860 --> 03:40:16.700]  Потому что вы конкретно этим подвешиваем, неконтролируемый
[03:40:16.700 --> 03:40:18.580]  вы повесили, там мы изменили потенциал.
[03:40:18.580 --> 03:40:21.980]  Потому что у кучи вершин ССшки поменялись, логарифы
[03:40:21.980 --> 03:40:22.980]  поменялись.
[03:40:22.980 --> 03:40:24.660]  И как их там адекватно оценить?
[03:40:24.660 --> 03:40:27.180]  В концерте просто вставляем и делаем сплей, да?
[03:40:27.180 --> 03:40:28.180]  Нет.
[03:40:28.180 --> 03:40:29.180]  Нет, нет, нет.
[03:40:29.180 --> 03:40:30.180]  То-то и прикол, что мы его не вставляем.
[03:40:30.180 --> 03:40:32.380]  Потому что, смотрите, просто, да, была бы мечта просто
[03:40:32.380 --> 03:40:35.500]  повесить его в это место и сделать его сплей, но
[03:40:35.500 --> 03:40:38.820]  просто проблема в том, что сама по себе вот эта операция
[03:40:38.820 --> 03:40:41.340]  подвешивания, вот этот потенциал увеличивает.
[03:40:41.340 --> 03:40:42.340]  Причем как-то не особо контролируемо.
[03:40:42.340 --> 03:40:46.380]  Ну, я не знаю, хотя там, конечно, разные потенциалы
[03:40:46.380 --> 03:40:47.380]  есть.
[03:40:47.380 --> 03:40:49.260]  Потому что там бывает потенциал, когда вы, кстати, эти логарифы
[03:40:49.260 --> 03:40:50.260]  округляете вниз.
[03:40:50.260 --> 03:40:51.260]  Вот.
[03:40:51.260 --> 03:40:54.380]  Мы им пользоваться не будем, потому что это не самый
[03:40:54.380 --> 03:40:55.380]  крутой потенциал.
[03:40:55.380 --> 03:40:59.820]  Но если там вот такой логариф, то как бы вам придется
[03:40:59.820 --> 03:41:02.300]  тогда пробежаться по всему этому пути, посмотреть,
[03:41:02.300 --> 03:41:05.140]  что у каждого из них ССшка там увеличилась на вот вес
[03:41:05.140 --> 03:41:07.780]  этой вершины и насколько там все изменилось суммарно,
[03:41:07.780 --> 03:41:08.780]  мы не знаем.
[03:41:08.780 --> 03:41:09.780]  Хорошо.
[03:41:09.780 --> 03:41:12.460]  А, то есть, тогда мы должны вызвать сплей от родителей.
[03:41:12.460 --> 03:41:15.500]  Поэтому мы вот от этой вершины, от родителя вызываем сплей.
[03:41:16.180 --> 03:41:18.180]  Я, скорее, сплит даже, на самом деле.
[03:41:18.180 --> 03:41:20.180]  Мы от него можем сплит вызвать.
[03:41:20.180 --> 03:41:23.380]  Ну, но это уже опять, да, другой причетальон.
[03:41:23.380 --> 03:41:26.700]  Зачем вы нам сами принесли письмо, лучше по почте отправить.
[03:41:26.700 --> 03:41:32.020]  Ну, вот это будет.
[03:41:32.020 --> 03:41:34.540]  Потому что мы уже пришли в эту вершину.
[03:41:34.540 --> 03:41:36.340]  Давайте лучше сплей от нее и вызовем.
[03:41:36.340 --> 03:41:38.640]  Она станет корнем и, собственно, отсплитчиваем правое под
[03:41:38.640 --> 03:41:39.640]  дерево.
[03:41:39.640 --> 03:41:40.640]  Все.
[03:41:40.640 --> 03:41:45.420]  Отсплитчиваем и добавляем вершину между ними.
[03:41:45.420 --> 03:41:47.380]  И, по сути, да.
[03:41:47.380 --> 03:41:48.380]  По сути, да.
[03:41:48.380 --> 03:41:49.380]  Вот.
[03:41:49.380 --> 03:41:50.380]  То есть, вот такая.
[03:41:50.380 --> 03:41:51.380]  То есть, вот так вот инцерк можно сделать.
[03:41:51.380 --> 03:41:52.380]  Мы сделали сплей от нее.
[03:41:52.380 --> 03:41:53.380]  И что там оказалось?
[03:41:53.380 --> 03:41:54.380]  Оказалось, что...
[03:41:54.380 --> 03:41:55.380]  Но оказалось.
[03:41:55.380 --> 03:41:58.060]  Нет, оказалось, что вот она оказалась корня, значит,
[03:41:58.060 --> 03:42:01.340]  тут все элементы больше х, она сама меньше х, и тут
[03:42:01.340 --> 03:42:04.340]  все элементы меньше х.
[03:42:04.340 --> 03:42:08.500]  Следовательно, как сделать сплит по х у этого дерева?
[03:42:08.500 --> 03:42:09.500]  Вот так.
[03:42:09.500 --> 03:42:10.500]  Просто подвешиваем х вот туда.
[03:42:10.500 --> 03:42:11.500]  Нет.
[03:42:11.500 --> 03:42:13.540]  Нет, знаете, пока ничего не подвешиваем.
[03:42:13.540 --> 03:42:14.540]  Нет.
[03:42:14.660 --> 03:42:17.700]  Х, скорее всего, мы, видимо, если мы скажем, что просто
[03:42:17.700 --> 03:42:22.620]  вот нам х и давайте подвесим его вот так и вот так.
[03:42:22.620 --> 03:42:23.620]  Да.
[03:42:23.620 --> 03:42:27.500]  Выглядит будет не совсем кузяво, конечно, но вроде
[03:42:27.500 --> 03:42:28.500]  адекват.
[03:42:28.500 --> 03:42:30.500]  А потенциал как изменится?
[03:42:30.500 --> 03:42:31.500]  Ну так...
[03:42:31.500 --> 03:42:34.500]  Не, от того, что отпилили под дерево, потенциал только
[03:42:34.500 --> 03:42:35.500]  уменьшился.
[03:42:35.500 --> 03:42:36.500]  А вот этот...
[03:42:36.500 --> 03:42:38.060]  А это идентично вот этой ситуации.
[03:42:38.060 --> 03:42:40.780]  Так что ничего страшного не произойдет.
[03:42:40.780 --> 03:42:42.820]  Ну, то есть, это будет гореть?
[03:42:42.820 --> 03:42:43.820]  Да.
[03:42:43.820 --> 03:42:44.820]  А потенциал...
[03:42:44.820 --> 03:42:46.820]  Да, то есть, потенциал и опять логарифм вас приветствует.
[03:42:46.820 --> 03:42:49.420]  То есть, тут, конечно, эти непрерывные какие-то
[03:42:49.420 --> 03:42:50.940]  монеточки, конечно, возникают.
[03:42:50.940 --> 03:42:51.940]  Вот.
[03:42:51.940 --> 03:42:52.940]  Но...
[03:42:52.940 --> 03:42:53.940]  Ну, ничего страшного.
[03:42:53.940 --> 03:42:56.940]  Такое может оказаться.
[03:42:56.940 --> 03:43:11.940]  Поэтому вам придется рассмотреть симметричный случай.
[03:43:12.060 --> 03:43:15.060]  Тогда в этом случае я утверждаю, что это будет как раз Супербаунд.
[03:43:15.060 --> 03:43:24.060]  Ну, придется, да.
[03:43:24.060 --> 03:43:26.060]  Ну да, да, да.
[03:43:26.060 --> 03:43:29.060]  Ну, это не то, чтобы сильно глобально.
[03:43:29.060 --> 03:43:30.060]  Вот.
[03:43:30.060 --> 03:43:32.060]  Так что-то получается, что да.
[03:43:32.060 --> 03:43:36.060]  То есть, если мы верим в эту мистическую операцию...
[03:43:36.060 --> 03:43:38.060]  Так, сколько?
[03:43:38.060 --> 03:43:39.060]  Ой.
[03:43:39.060 --> 03:43:40.060]  Ага.
[03:43:40.180 --> 03:43:41.180]  Ага.
[03:43:53.180 --> 03:43:54.180]  Так.
[03:43:56.180 --> 03:43:57.180]  Ну вот.
[03:43:57.180 --> 03:43:58.180]  Так, ну ладно.
[03:43:58.180 --> 03:44:00.180]  Выяснилось, что пара у нас еще не закончилась,
[03:44:00.180 --> 03:44:02.180]  поэтому мы все-таки еще можем обсуждать дальше.
[03:44:02.180 --> 03:44:04.180]  Но я надеюсь, что мы...
[03:44:04.180 --> 03:44:05.180]  Ну ладно.
[03:44:05.180 --> 03:44:07.180]  Но правда, по большому счету мы заметили, что, в общем-то,
[03:44:07.300 --> 03:44:10.300]  мы уже полностью свели задачу к чисто тому,
[03:44:10.300 --> 03:44:12.300]  чтобы адекватно реализовать сплей.
[03:44:12.300 --> 03:44:13.300]  Правда?
[03:44:13.300 --> 03:44:14.300]  Так что смотрите.
[03:44:14.300 --> 03:44:15.300]  Сейчас будет немножко мистики.
[03:44:15.300 --> 03:44:18.300]  Хотя ладно, с вами, конечно, по-моему, любая мистика
[03:44:18.300 --> 03:44:21.300]  оказывается хорявной, на самом деле.
[03:44:21.300 --> 03:44:22.300]  Ну вот.
[03:44:22.300 --> 03:44:23.300]  Вот.
[03:44:23.300 --> 03:44:24.300]  Да.
[03:44:24.300 --> 03:44:31.300]  Хотя, честно скажу, там чисто в среду, что-то, по-моему,
[03:44:31.300 --> 03:44:33.300]  ваши великие предшественники сильно удивились,
[03:44:33.300 --> 03:44:36.300]  в каком темпе мы идем.
[03:44:36.420 --> 03:44:37.420]  Да, будут.
[03:44:37.420 --> 03:44:38.420]  Типа шо, быстро.
[03:44:38.420 --> 03:44:39.420]  Шо, чо?
[03:44:39.420 --> 03:44:40.420]  Уже середина октября?
[03:44:40.420 --> 03:44:41.420]  Уже красно-черное дерево?
[03:44:41.420 --> 03:44:42.420]  Чего?
[03:44:42.420 --> 03:44:43.420]  Чего?
[03:44:43.420 --> 03:44:44.420]  Нет, старокурсники, да.
[03:44:44.420 --> 03:44:45.420]  Ну я говорю, ваши предшественники.
[03:44:45.420 --> 03:44:46.420]  По ходу, да.
[03:44:46.420 --> 03:44:47.420]  Так, безобразие.
[03:44:47.420 --> 03:44:48.420]  Ну так.
[03:44:48.420 --> 03:44:49.420]  Ладно.
[03:44:49.540 --> 03:44:53.540]  Не, как раз-таки, по-моему, он кому-то, он, типа, не
[03:44:53.540 --> 03:44:54.540]  проверял.
[03:44:54.540 --> 03:44:59.540]  Но он, как правило, 003, по-моему, больше, и он, типа, игнорк
[03:44:59.540 --> 03:45:00.540]  сразу же.
[03:45:00.540 --> 03:45:05.540]  Я думаю, что он, как правило, 003, по-моему, больше, и он
[03:45:05.540 --> 03:45:06.540]  игнорк сразу же.
[03:45:06.540 --> 03:45:09.540]  Я думаю, что он, как правило, 003, по-моему, больше, и он
[03:45:09.540 --> 03:45:10.540]  игнорк сразу же.
[03:45:10.540 --> 03:45:13.540]  Я думаю, что он, как правило, 003, по-моему, больше, и он
[03:45:13.540 --> 03:45:14.540]  игнорк сразу же.
[03:45:14.540 --> 03:45:17.540]  Я думаю, что он, как правило, 003, по-моему, больше, и он
[03:45:17.540 --> 03:45:18.540]  игнорк сразу же.
[03:45:18.660 --> 03:45:21.660]  Нет, игнори там быстро можно проверять.
[03:45:24.660 --> 03:45:25.660]  Так.
[03:45:25.660 --> 03:45:26.660]  Итак.
[03:45:26.660 --> 03:45:27.660]  Значит, внимание.
[03:45:27.660 --> 03:45:28.660]  Эк, внимание.
[03:45:28.660 --> 03:45:29.660]  Внимание.
[03:45:29.660 --> 03:45:32.660]  Значит, потенциал, значит, навесили.
[03:45:32.660 --> 03:45:33.660]  Так.
[03:45:33.660 --> 03:45:34.660]  Значит, цель.
[03:45:34.660 --> 03:45:43.820]  Значит, цель асимптотика от логарифма двоичного
[03:45:43.820 --> 03:45:48.020]  w минус логарифма двоичного ср.
[03:45:48.500 --> 03:45:49.500]  Так.
[03:45:49.500 --> 03:45:50.500]  Ну ладно.
[03:45:50.500 --> 03:45:51.500]  Я наврал.
[03:45:51.500 --> 03:45:52.500]  Да.
[03:45:52.500 --> 03:45:53.500]  К сожалению.
[03:45:53.500 --> 03:45:54.500]  Да.
[03:45:54.500 --> 03:45:55.500]  Тут как бы такая маленькая странность.
[03:45:55.500 --> 03:45:57.180]  Статья утверждает, что асимптотика такая.
[03:45:57.180 --> 03:46:06.180]  Но я все-таки вынужден констатировать, что там плюс один.
[03:46:06.180 --> 03:46:10.180]  Нет, ну минус один бы я поверил.
[03:46:10.180 --> 03:46:11.180]  Да, ну.
[03:46:11.180 --> 03:46:13.180]  Нет, вы знаете, там просто…
[03:46:13.180 --> 03:46:14.180]  Но дело в том…
[03:46:14.340 --> 03:46:17.340]  Да, можно и так.
[03:46:17.340 --> 03:46:18.340]  Да.
[03:46:18.340 --> 03:46:19.340]  Давай.
[03:46:19.340 --> 03:46:20.340]  Хорошо.
[03:46:20.340 --> 03:46:21.340]  Хорошо.
[03:46:21.340 --> 03:46:22.340]  Да.
[03:46:22.340 --> 03:46:23.340]  Плюс один.
[03:46:23.340 --> 03:46:24.340]  Нет, это как бы нам…
[03:46:24.340 --> 03:46:25.940]  Нет, кстати, в линкаче на самом деле этот лишний
[03:46:25.940 --> 03:46:29.060]  плюс один даст нам там небольшую техническую работу.
[03:46:29.060 --> 03:46:30.060]  Ну вот.
[03:46:30.060 --> 03:46:33.700]  Потому что как бы в телескопической суббите, да, там в одном месте
[03:46:33.700 --> 03:46:39.860]  логарифмы эти пошлеп-шлепаются, это да, но там плюс один.
[03:46:39.860 --> 03:46:40.860]  Все-таки плюс один.
[03:46:41.540 --> 03:46:44.220]  Сейчас кончится тем, что линкат у нас просто в следующий
[03:46:44.220 --> 03:46:45.220]  раз будет.
[03:46:45.220 --> 03:46:46.220]  Так.
[03:46:46.220 --> 03:46:49.220]  Ну хотя это из цикла, а почему бы и нет?
[03:46:49.220 --> 03:46:56.420]  Да, ну и что, нет, понятно, что для того, чтобы рассказать
[03:46:56.420 --> 03:46:59.660]  линкат, да, придется рассказать ХЛД, рассказать, как ХЛД
[03:46:59.660 --> 03:47:02.660]  делает залог, а не залог квадрат, там и так.
[03:47:02.660 --> 03:47:03.660]  Да.
[03:47:03.660 --> 03:47:04.660]  Да.
[03:47:05.460 --> 03:47:06.460]  Да.
[03:47:10.460 --> 03:47:12.460]  Чего это не имеет?
[03:47:12.460 --> 03:47:15.460]  Оно умеет все, что умеет делать ДО, умеет делать ХЛД-залог.
[03:47:18.460 --> 03:47:20.460]  А потому что его больно писать и типа не осмысленно.
[03:47:22.460 --> 03:47:23.460]  Чего?
[03:47:23.460 --> 03:47:24.460]  Тебе не рассказывали?
[03:47:24.460 --> 03:47:25.460]  Да ладно.
[03:47:25.460 --> 03:47:26.460]  Сейчас, погоди.
[03:47:26.460 --> 03:47:29.460]  Нет, это какой-то бред, потому что о том, как это делать,
[03:47:29.460 --> 03:47:31.460]  я от Филиппа Грибова лично и узнал.
[03:47:35.460 --> 03:47:36.460]  Ну я не знаю.
[03:47:36.460 --> 03:47:38.460]  Нет, я говорю, что такое ХЛД-залог, а как делать
[03:47:38.460 --> 03:47:40.460]  ХЛД-залог, я узнал от Филиппа Грибова.
[03:47:43.460 --> 03:47:46.460]  Нет, там просто, вместо двоичного дерева поиска,
[03:47:46.460 --> 03:47:49.460]  ну просто обычно, просто на каждом пути вы делаете
[03:47:49.460 --> 03:47:52.460]  не ДО-шку, а ну что-то типа ДО-шки, только делите
[03:47:52.460 --> 03:47:55.460]  как бы вершины не пополам, а там более как-то аккуратно,
[03:47:55.460 --> 03:47:58.460]  чтобы, чтобы там, ну увидите, короче.
[03:47:58.460 --> 03:48:02.460]  Ну так, чтобы балансировать, балансировать не количество
[03:48:03.260 --> 03:48:05.260]  обесящий на них под деревья, вот эти.
[03:48:05.260 --> 03:48:06.260]  Вот.
[03:48:06.260 --> 03:48:10.260]  То есть, оказывается, что это тоже как бы, на каждом
[03:48:10.260 --> 03:48:12.260]  конкретном пути это все равно логарифм, правда не
[03:48:12.260 --> 03:48:14.260]  логарифм этого пути, а логарифм глобального N.
[03:48:14.260 --> 03:48:17.260]  Но вот, но в сумме, оказывается, там логарифм, там красиво
[03:48:17.260 --> 03:48:19.260]  слопывается, это мы увидим.
[03:48:19.260 --> 03:48:20.260]  Вот.
[03:48:20.260 --> 03:48:23.260]  Пока же давайте вот с этим покончим, чтобы в следующий
[03:48:23.260 --> 03:48:24.260]  раз не возвращаться к этому.
[03:48:24.260 --> 03:48:28.260]  Итак, для этого я должен все-таки описать, какие
[03:48:28.260 --> 03:48:31.260]  конкретно повороты мы делаем в сплее.
[03:48:33.260 --> 03:48:34.260]  Значит, смотрите.
[03:48:34.260 --> 03:48:36.260]  Ну, на самом деле, да.
[03:48:36.260 --> 03:48:38.260]  В случае номер ноль.
[03:48:38.260 --> 03:48:41.260]  Ну, опять-таки каждый раз мы говорим, у нас есть
[03:48:41.260 --> 03:48:43.260]  вершина, мы хотим загнать ее в корень.
[03:48:43.260 --> 03:48:46.260]  В случае номер ноль, вершина уже корень.
[03:48:46.260 --> 03:48:48.260]  Делать ничего не надо.
[03:48:48.260 --> 03:48:52.260]  Нет, еще три случая есть.
[03:48:54.260 --> 03:48:56.260]  Уже?
[03:48:56.260 --> 03:48:58.260]  Ага, да-да-да.
[03:48:58.260 --> 03:49:00.260]  Да-да-да, как надо.
[03:49:01.060 --> 03:49:03.060]  На бизнес тренингах, так говорят.
[03:49:03.060 --> 03:49:05.060]  Итак, какая у нас цель?
[03:49:05.060 --> 03:49:07.060]  Цель первая, собрать с каждого из вас по 1000 рублей.
[03:49:07.060 --> 03:49:09.060]  И мы уже это сделали.
[03:49:09.060 --> 03:49:11.060]  Давайте поаплодируем.
[03:49:11.060 --> 03:49:13.060]  Вот именно.
[03:49:13.060 --> 03:49:15.060]  Вторая цель, это почесать мое ЧСВ.
[03:49:15.060 --> 03:49:17.060]  Третья цель, и так далее.
[03:49:17.060 --> 03:49:23.060]  Да, третья, провести время в хорошей компании.
[03:49:23.060 --> 03:49:25.060]  Ладно.
[03:49:25.060 --> 03:49:27.060]  Так вот.
[03:49:27.060 --> 03:49:29.060]  Значит, далее.
[03:49:29.060 --> 03:49:31.060]  Случай номер первый.
[03:49:31.060 --> 03:49:33.060]  Не сильно далеко ушедший.
[03:49:33.060 --> 03:49:35.060]  Вершина оказалась ребенком корня.
[03:49:37.060 --> 03:49:39.060]  Да.
[03:49:39.060 --> 03:49:41.060]  То есть, когда вершина В оказалась
[03:49:41.060 --> 03:49:43.060]  просто ребенком рута.
[03:49:45.060 --> 03:49:47.060]  Этот случай мы будем называть
[03:49:47.060 --> 03:49:49.060]  ЗИК.
[03:49:49.060 --> 03:49:51.060]  Нет, это официальная
[03:49:51.060 --> 03:49:53.060]  терминология, ничего не знаю.
[03:49:55.060 --> 03:49:57.060]  Вот. В этом случае
[03:49:57.060 --> 03:49:59.060]  мы тогда загоняем В в корень
[03:49:59.060 --> 03:50:01.060]  просто
[03:50:01.060 --> 03:50:03.060]  с помощью
[03:50:03.060 --> 03:50:05.060]  уже полюбившегося нам малого поворота.
[03:50:13.060 --> 03:50:15.060]  Ага.
[03:50:15.060 --> 03:50:17.060]  Ну, как видите, не убой.
[03:50:17.060 --> 03:50:19.060]  Это первый случай.
[03:50:19.060 --> 03:50:21.060]  Это называется ЗИК-ШАК.
[03:50:23.060 --> 03:50:25.060]  ЗИК-ШАК.
[03:50:25.060 --> 03:50:27.060]  Или там ЗИК-СТЕП.
[03:50:27.060 --> 03:50:29.060]  ЗИК-ФЕЙС.
[03:50:29.060 --> 03:50:31.060]  Ну, в общем, откройте статью.
[03:50:31.060 --> 03:50:33.060]  Я не знаю, почему
[03:50:33.060 --> 03:50:35.060]  тарьяны слей так называют это ЗИК.
[03:50:35.060 --> 03:50:37.060]  Хотя догадываюсь, почему.
[03:50:37.060 --> 03:50:39.060]  Потому что, смотрите,
[03:50:39.060 --> 03:50:41.060]  случай второй.
[03:50:43.060 --> 03:50:45.060]  Не, первый, тот был нулевой.
[03:50:45.060 --> 03:50:47.060]  Вот.
[03:50:47.060 --> 03:50:49.060]  Теперь случай второй.
[03:50:49.060 --> 03:50:51.060]  Значит,
[03:50:51.060 --> 03:50:53.060]  вершина В является не менее,
[03:50:53.060 --> 03:50:55.060]  чем внуком корня.
[03:50:57.060 --> 03:50:59.060]  Это означает, что у нее есть
[03:50:59.060 --> 03:51:01.060]  дедушка.
[03:51:01.060 --> 03:51:03.060]  Но не гарантируется,
[03:51:03.060 --> 03:51:05.060]  что дедушка является корнем.
[03:51:09.060 --> 03:51:11.060]  Но важный,
[03:51:11.060 --> 03:51:13.060]  но здесь вариант такой. Сейчас вот, слушайте внимательно.
[03:51:13.060 --> 03:51:15.060]  Вершина В
[03:51:15.060 --> 03:51:17.060]  висит относительно своего
[03:51:17.060 --> 03:51:19.060]  родителя с той
[03:51:19.060 --> 03:51:21.060]  же стороны, как этот родитель
[03:51:21.060 --> 03:51:23.060]  висит относительно
[03:51:23.060 --> 03:51:25.060]  дедушки.
[03:51:25.060 --> 03:51:27.060]  Да. То есть, как бы, либо
[03:51:27.060 --> 03:51:29.060]  В,
[03:51:29.060 --> 03:51:31.060]  левый ребенок А и А, левый ребенок
[03:51:31.060 --> 03:51:33.060]  В, либо В, правый ребенок А и
[03:51:33.060 --> 03:51:35.060]  А, правый ребенок В.
[03:51:35.060 --> 03:51:37.060]  Это называется
[03:51:37.060 --> 03:51:39.060]  ЗИК-ЗИК-ШАК.
[03:51:41.060 --> 03:51:43.060]  Это называется ЗИК-ЗИК.
[03:51:43.060 --> 03:51:45.060]  Вот здесь вот очень, как бы,
[03:51:45.060 --> 03:51:47.060]  вот единственная ситуация,
[03:51:47.060 --> 03:51:49.060]  когда мы не просто берем
[03:51:49.060 --> 03:51:51.060]  QV и применяем малый поворот.
[03:51:53.060 --> 03:51:55.060]  Мы здесь
[03:51:55.060 --> 03:51:57.060]  делаем вот такую операцию.
[03:51:57.060 --> 03:51:59.060]  Мы здесь просто...
[03:51:59.060 --> 03:52:01.060]  То есть, мы здесь просто жестко
[03:52:01.060 --> 03:52:03.060]  опускаем дедушку до внука.
[03:52:05.060 --> 03:52:07.060]  Ну да.
[03:52:07.060 --> 03:52:09.060]  Нет. Ну...
[03:52:09.060 --> 03:52:11.060]  Нет. Теоретически, в принципе,
[03:52:11.060 --> 03:52:13.060]  это иногда происходит, потому что, знаете, там
[03:52:13.060 --> 03:52:15.060]  когда там есть же
[03:52:15.060 --> 03:52:17.060]  эти стандарты, там шутки типа
[03:52:17.060 --> 03:52:19.060]  как в зависимости
[03:52:19.060 --> 03:52:21.060]  от возраста, там
[03:52:21.060 --> 03:52:23.060]  человек реагирует на Петросяна.
[03:52:23.060 --> 03:52:25.060]  Утверждается, что он почти...
[03:52:25.060 --> 03:52:27.060]  Он, как бы, жутко смеется до 5 лет
[03:52:27.060 --> 03:52:29.060]  и после, там, 90.
[03:52:29.060 --> 03:52:31.060]  А все остальное время он сидит с покерфейсом.
[03:52:33.060 --> 03:52:35.060]  И вот.
[03:52:35.060 --> 03:52:37.060]  А знаете ли вообще, кто такой Петросян?
[03:52:37.060 --> 03:52:39.060]  Ну да, да, да.
[03:52:39.060 --> 03:52:41.060]  Тигран Петросян. Чемпион мира по шахматам.
[03:52:41.060 --> 03:52:43.060]  Да, да, да.
[03:52:43.060 --> 03:52:45.060]  Ну как бы. А что, какой-то Петросян есть?
[03:52:45.060 --> 03:52:47.060]  А, кто там?
[03:52:47.060 --> 03:52:49.060]  А, вот это, Аделия Петросян.
[03:52:49.060 --> 03:52:51.060]  Вот эта фигуристка есть там, это да.
[03:52:53.060 --> 03:52:55.060]  Вот.
[03:52:55.060 --> 03:52:57.060]  Ладно.
[03:52:57.060 --> 03:52:59.060]  Ну ладно, с помощью Петросяна
[03:52:59.060 --> 03:53:01.060]  мы тут, оказывается, дорисовали эту штуку.
[03:53:01.060 --> 03:53:03.060]  Вот.
[03:53:03.060 --> 03:53:05.060]  Ну Петросян, как ему положено, позволит
[03:53:05.060 --> 03:53:07.060]  сделать так, чтобы это было не скучно.
[03:53:07.060 --> 03:53:09.060]  Вот. То есть вот такой поворот мы делаем.
[03:53:09.060 --> 03:53:11.060]  А почему мы нарисовали В в небе?
[03:53:11.060 --> 03:53:13.060]  Не совсем.
[03:53:13.060 --> 03:53:15.060]  Не знаю.
[03:53:21.060 --> 03:53:23.060]  Согласен, нет, согласен, согласен.
[03:53:23.060 --> 03:53:25.060]  Да, спасибо за замечание. Да, это правильно.
[03:53:27.060 --> 03:53:29.060]  Так. И наконец.
[03:53:31.060 --> 03:53:33.060]  Как вы уже догадываетесь,
[03:53:33.060 --> 03:53:35.060]  сейчас будет...
[03:53:35.060 --> 03:53:37.060]  А, ну это знающие люди.
[03:53:37.060 --> 03:53:39.060]  Так по локе, наверное, предполагают, сейчас будет зиг-зиг-зиг.
[03:53:39.060 --> 03:53:41.060]  Но нет.
[03:53:41.060 --> 03:53:43.060]  Будет действительно зиг-заг.
[03:53:45.060 --> 03:53:47.060]  Да.
[03:53:47.060 --> 03:53:49.060]  Если выяснилось, что Вершина В
[03:53:49.060 --> 03:53:51.060]  не такой ребенок,
[03:53:51.060 --> 03:53:53.060]  как ее родитель.
[03:53:53.060 --> 03:53:55.060]  А?
[03:53:59.060 --> 03:54:01.060]  Не, ну как сказать,
[03:54:01.060 --> 03:54:03.060]  не, ну как сказать, если у нее, ну типа, знаете,
[03:54:03.060 --> 03:54:05.060]  если родитель зига, она не зиг,
[03:54:05.060 --> 03:54:07.060]  то тут еще вопрос, что там хорошее.
[03:54:09.060 --> 03:54:11.060]  Да.
[03:54:15.060 --> 03:54:17.060]  Так появилась операция спит в дикартовом дереве.
[03:54:19.060 --> 03:54:21.060]  Вот.
[03:54:21.060 --> 03:54:23.060]  Так. Ну вот.
[03:54:23.060 --> 03:54:25.060]  Что мы делаем здесь?
[03:54:25.060 --> 03:54:27.060]  А вот здесь мы как раз не заморачиваемся.
[03:54:27.060 --> 03:54:29.060]  Просто делаем два малых поворота с Вершиной В
[03:54:29.060 --> 03:54:31.060]  и приводит нас это в итоге
[03:54:31.060 --> 03:54:33.060]  к вот такой простой ситуации.
[03:54:39.060 --> 03:54:41.060]  Опа.
[03:54:41.060 --> 03:54:43.060]  Красота.
[03:54:43.060 --> 03:54:45.060]  Благодарь.
[03:54:47.060 --> 03:54:49.060]  Давай.
[03:54:55.060 --> 03:54:57.060]  Нет, ну не совсем так.
[03:54:57.060 --> 03:54:59.060]  Ну, скажем так,
[03:54:59.060 --> 03:55:01.060]  возможно вам тогда
[03:55:01.060 --> 03:55:03.060]  после этого поворота есть, там вам придется делать
[03:55:03.060 --> 03:55:05.060]  зиг-зиг.
[03:55:05.060 --> 03:55:07.060]  Вот.
[03:55:09.060 --> 03:55:11.060]  Нет, там
[03:55:11.060 --> 03:55:13.060]  нет,
[03:55:13.060 --> 03:55:15.060]  теоретически
[03:55:15.060 --> 03:55:17.060]  не совсем.
[03:55:17.060 --> 03:55:19.060]  Теоретически может быть подлянка.
[03:55:19.060 --> 03:55:21.060]  Подлянка может быть в том, что ты сделал здесь
[03:55:21.060 --> 03:55:23.060]  зиг, а потом выяснилось, что в этом месте
[03:55:23.060 --> 03:55:25.060]  надо зиг-зиг делать.
[03:55:25.060 --> 03:55:27.060]  Если мы знаем, что в случае
[03:55:27.060 --> 03:55:29.060]  зиг-заг, конечно, мы можем сделать просто так.
[03:55:29.060 --> 03:55:31.060]  Верное утверждение такое,
[03:55:31.060 --> 03:55:33.060]  зиг-заг можно реализовать как два зига.
[03:55:33.060 --> 03:55:35.060]  Зиг-зиг тоже можно там реализовать.
[03:55:35.060 --> 03:55:37.060]  Почему это называется зиг-зиг?
[03:55:37.060 --> 03:55:39.060]  Потому что
[03:55:39.060 --> 03:55:41.060]  просто, смотрите, гарантируется,
[03:55:41.060 --> 03:55:43.060]  что просто требуется, чтобы было
[03:55:43.060 --> 03:55:45.060]  именно вот так.
[03:55:45.060 --> 03:55:47.060]  Чтобы не было, чтобы мы тут сделали зиг, а потом неожиданно
[03:55:47.060 --> 03:55:49.060]  побежали зиг-зиг делать, потому что тут дедушек,
[03:55:49.060 --> 03:55:51.060]  прадедушек куда-то в ту же сторону пошел.
[03:55:55.060 --> 03:55:57.060]  Нет.
[03:55:57.060 --> 03:55:59.060]  Но как бы зиг-заг,
[03:55:59.060 --> 03:56:01.060]  произошел зиг-заг. То есть вот поворот,
[03:56:01.060 --> 03:56:03.060]  вот этот вот зиг-заг.
[03:56:03.060 --> 03:56:05.060]  Да, тот отсылка к реально существующему слову зиг-заг.
[03:56:05.060 --> 03:56:07.060]  В русском языке даже такое есть.
[03:56:09.060 --> 03:56:11.060]  Есть даже там,
[03:56:11.060 --> 03:56:13.060]  есть даже фильм зиг-заг удачи.
[03:56:15.060 --> 03:56:17.060]  Сейчас.
[03:56:17.060 --> 03:56:19.060]  Чего?
[03:56:19.060 --> 03:56:21.060]  Никакой.
[03:56:21.060 --> 03:56:23.060]  Так, какой вопрос?
[03:56:25.060 --> 03:56:27.060]  Как кого?
[03:56:29.060 --> 03:56:31.060]  Как это большой поворот?
[03:56:31.060 --> 03:56:33.060]  Ну, да.
[03:56:33.060 --> 03:56:35.060]  Да.
[03:56:35.060 --> 03:56:37.060]  Ну, по большому, да.
[03:56:37.060 --> 03:56:39.060]  Ну, просто сейчас они называются вот так.
[03:56:39.060 --> 03:56:41.060]  Хотя в терминах Вэля, да, это большой поворот
[03:56:41.060 --> 03:56:43.060]  в чистом виде.
[03:56:45.060 --> 03:56:47.060]  Ну, зиг-заг,
[03:56:47.060 --> 03:56:49.060]  ну, конечно, прикольно, да.
[03:56:49.060 --> 03:56:51.060]  Да, господи, есть
[03:56:51.060 --> 03:56:53.060]  этого?
[03:56:53.060 --> 03:56:55.060]  Есть советский фильм зиг-заг удачи,
[03:56:57.060 --> 03:56:59.060]  но есть, есть
[03:56:59.060 --> 03:57:01.060]  фильм, но да, даже дети
[03:57:01.060 --> 03:57:03.060]  называют это. Итак, фильм зиг-заг удачи
[03:57:03.060 --> 03:57:05.060]  называется зиг-заг удачи.
[03:57:05.060 --> 03:57:07.060]  Спасибо, мистер Магди, там еще вот такое есть.
[03:57:11.060 --> 03:57:13.060]  А, то есть ваше поколение уже диснеевские мультики
[03:57:13.060 --> 03:57:15.060]  не застало, да?
[03:57:17.060 --> 03:57:19.060]  Или застали, но это не смешно.
[03:57:23.060 --> 03:57:25.060]  Так, ребят, ладно, юмор
[03:57:25.060 --> 03:57:27.060]  не юмор, но пришло время,
[03:57:27.060 --> 03:57:29.060]  значит, пришло время
[03:57:29.060 --> 03:57:31.060]  достаточно включать мозг.
[03:57:33.060 --> 03:57:35.060]  Да, ну, просто,
[03:57:35.060 --> 03:57:37.060]  то есть, логика, то есть, пока
[03:57:37.060 --> 03:57:39.060]  вершина В не стала корнем, говорим, так,
[03:57:39.060 --> 03:57:41.060]  если вершина В, ребенок, корня,
[03:57:41.060 --> 03:57:43.060]  делаем вот это.
[03:57:43.060 --> 03:57:45.060]  Если она не ребенок,
[03:57:45.060 --> 03:57:47.060]  ну, значит, тогда смотрим на дедушку,
[03:57:47.060 --> 03:57:49.060]  то есть, родителей и дедушку, и в зависимости
[03:57:49.060 --> 03:57:51.060]  от этого конфигурации делаем либо зиг-зиг,
[03:57:51.060 --> 03:57:53.060]  либо зиг-заг. Все.
[03:57:55.060 --> 03:57:57.060]  Что нам нужно показать?
[03:57:57.060 --> 03:57:59.060]  Я хочу показать,
[03:57:59.060 --> 03:58:01.060]  что учетная
[03:58:01.060 --> 03:58:03.060]  нот, что
[03:58:03.060 --> 03:58:05.060]  учетная стоимость вот этой
[03:58:05.060 --> 03:58:07.060]  нот, здесь вот этой вот операции,
[03:58:07.060 --> 03:58:09.060]  потому что, смотрите, давайте,
[03:58:09.060 --> 03:58:11.060]  значит, у нас будут
[03:58:11.060 --> 03:58:13.060]  соответственно всякие такие вот эти веса,
[03:58:13.060 --> 03:58:15.060]  ну, веса у нас не
[03:58:15.060 --> 03:58:17.060]  меняются, но у нас есть
[03:58:17.060 --> 03:58:19.060]  СЗ до
[03:58:19.060 --> 03:58:21.060]  и СЗ
[03:58:21.060 --> 03:58:23.060]  после.
[03:58:23.060 --> 03:58:25.060]  Вот будем говорить, что
[03:58:25.060 --> 03:58:27.060]  у каждого шага
[03:58:27.060 --> 03:58:29.060]  и у каждой вершины есть
[03:58:29.060 --> 03:58:31.060]  как бы СЗ до и СЗ
[03:58:31.060 --> 03:58:33.060]  после, правда?
[03:58:35.060 --> 03:58:37.060]  Понятно, да?
[03:58:37.060 --> 03:58:39.060]  Вот.
[03:58:39.060 --> 03:58:41.060]  Так вот.
[03:58:41.060 --> 03:58:43.060]  Я хочу показать, что
[03:58:43.060 --> 03:58:45.060]  учетная стоимость зига,
[03:58:45.060 --> 03:58:47.060]  учетная, она
[03:58:47.060 --> 03:58:49.060]  от, то есть,
[03:58:49.060 --> 03:58:51.060]  она не превосходит в некотором смысле
[03:58:51.060 --> 03:58:53.060]  три.
[03:58:57.060 --> 03:58:59.060]  Эх, мечта, мечта, мечта, но нет.
[03:58:59.060 --> 03:59:01.060]  Значит,
[03:59:01.060 --> 03:59:03.060]  лог двоичный СЗ
[03:59:03.060 --> 03:59:05.060]  после,
[03:59:05.060 --> 03:59:07.060]  СЗВ после,
[03:59:09.060 --> 03:59:11.060]  минус лог двоичный
[03:59:11.060 --> 03:59:13.060]  СЗВ до
[03:59:13.060 --> 03:59:15.060]  плюс один.
[03:59:15.060 --> 03:59:17.060]  Это я хочу показать
[03:59:17.060 --> 03:59:19.060]  для зига.
[03:59:19.060 --> 03:59:21.060]  Для зигзига
[03:59:21.060 --> 03:59:23.060]  я хочу доказать,
[03:59:23.060 --> 03:59:25.060]  для зигзига
[03:59:25.060 --> 03:59:27.060]  я хочу доказать, что
[03:59:27.060 --> 03:59:29.060]  будет не более чем три
[03:59:29.060 --> 03:59:31.060]  логарифма, тоже опять
[03:59:31.060 --> 03:59:33.060]  СЗ после
[03:59:33.060 --> 03:59:35.060]  минус логарифм двоичный
[03:59:35.060 --> 03:59:37.060]  СЗ до,
[03:59:37.060 --> 03:59:39.060]  но на этот раз
[03:59:39.060 --> 03:59:41.060]  без плюс единички.
[03:59:41.060 --> 03:59:43.060]  И более того,
[03:59:45.060 --> 03:59:47.060]  логарифм двоичный
[03:59:47.060 --> 03:59:49.060]  СЗВ.
[03:59:49.060 --> 03:59:51.060]  То есть, в зигзаге, короче говоря,
[03:59:51.060 --> 03:59:53.060]  я перерисовываю то же самое.
[03:59:55.060 --> 03:59:57.060]  Вот такая у нас будет ставка.
[03:59:57.060 --> 03:59:59.060]  Потому что если мы в это
[03:59:59.060 --> 04:00:01.060]  поверим, то я думаю, отсюда очевидно,
[04:00:01.060 --> 04:00:03.060]  что суммарное,
[04:00:03.060 --> 04:00:05.060]  тогда суммарное учетное время работы
[04:00:05.060 --> 04:00:07.060]  для всех подъемов будет,
[04:00:07.060 --> 04:00:09.060]  но там просто эти логарифмы все похлоп-хлопаются
[04:00:09.060 --> 04:00:11.060]  и останется только,
[04:00:11.060 --> 04:00:13.060]  а, кстати, набрал единичка даже не в скобочке,
[04:00:13.060 --> 04:00:15.060]  а здесь. Ну, не принципиально,
[04:00:15.060 --> 04:00:17.060]  реально очевидно.
[04:00:17.060 --> 04:00:19.060]  И тогда получается, если я это все просуммирую,
[04:00:19.060 --> 04:00:21.060]  то учитывая, что у меня,
[04:00:21.060 --> 04:00:23.060]  понятно, СЗ
[04:00:23.060 --> 04:00:25.060]  после предыдущего шага
[04:00:25.060 --> 04:00:27.060]  то же самое, что до следующего,
[04:00:27.060 --> 04:00:29.060]  поэтому суммарно
[04:00:29.060 --> 04:00:31.060]  получится три лог
[04:00:33.060 --> 04:00:35.060]  СЗВ итог
[04:00:37.060 --> 04:00:39.060]  минус три логарифма
[04:00:39.060 --> 04:00:41.060]  двоичных СЗВ
[04:00:41.060 --> 04:00:43.060]  начала. Ну и плюс один.
[04:00:45.060 --> 04:00:47.060]  Но это практически ровно то,
[04:00:47.060 --> 04:00:49.060]  что нам требуется.
[04:00:49.060 --> 04:00:51.060]  Потому что заметим,
[04:00:51.060 --> 04:00:53.060]  что лог, потому что СЗВ итог,
[04:00:53.060 --> 04:00:55.060]  это как раз суммара, практически,
[04:00:55.060 --> 04:00:57.060]  то есть СЗВ итоговая, это суммарный
[04:00:57.060 --> 04:00:59.060]  вес как раз всех вершин, потому что В
[04:00:59.060 --> 04:01:01.060]  стало коркин.
[04:01:01.060 --> 04:01:03.060]  Вот.
[04:01:03.060 --> 04:01:05.060]  Ну а здесь СЗВ то, что было в начале,
[04:01:05.060 --> 04:01:07.060]  но, на самом деле, да, можно это оценить снизу,
[04:01:07.060 --> 04:01:09.060]  как, собственно, тупо ее вес.
[04:01:11.060 --> 04:01:13.060]  Вот. Вводили, водили.
[04:01:13.060 --> 04:01:15.060]  СЗВ это что? Это сумма весов.
[04:01:15.060 --> 04:01:17.060]  Так что вот такая штука.
[04:01:17.060 --> 04:01:19.060]  Понятно?
[04:01:21.060 --> 04:01:23.060]  То есть таким образом,
[04:01:23.060 --> 04:01:25.060]  если мы докажем
[04:01:25.060 --> 04:01:27.060]  вот эти вот три оценочки,
[04:01:27.060 --> 04:01:29.060]  то мы победили.
[04:01:29.060 --> 04:01:31.060]  Отлично.
[04:01:31.060 --> 04:01:33.060]  Все. Значит, больше ни о чем
[04:01:33.060 --> 04:01:35.060]  не думаем, залазим в процедуру
[04:01:35.060 --> 04:01:37.060]  и начинаем. Так, ну начнем. Давайте
[04:01:37.060 --> 04:01:39.060]  выкинем из головы зиг шаг.
[04:01:39.060 --> 04:01:41.060]  Это означает, давайте
[04:01:41.060 --> 04:01:43.060]  докажем вот эту штуку.
[04:01:43.060 --> 04:01:45.060]  Итак, давайте подумаем,
[04:01:45.060 --> 04:01:47.060]  как поменялся,
[04:01:47.060 --> 04:01:49.060]  ну понятно, все шаги делаются
[04:01:49.060 --> 04:01:51.060]  за хорошее время, да?
[04:01:51.060 --> 04:01:53.060]  За единицу реальную, да?
[04:01:53.060 --> 04:01:55.060]  Значит, да.
[04:01:55.060 --> 04:01:57.060]  Значит, тут учетное время,
[04:01:57.060 --> 04:01:59.060]  то есть, так сказать,
[04:01:59.060 --> 04:02:01.060]  Т учетное зиг, напишу я, да,
[04:02:01.060 --> 04:02:03.060]  равно
[04:02:03.060 --> 04:02:05.060]  один плюс потенциал
[04:02:05.060 --> 04:02:07.060]  после
[04:02:07.060 --> 04:02:09.060]  фи после
[04:02:09.060 --> 04:02:11.060]  минус потенциал
[04:02:11.060 --> 04:02:13.060]  до.
[04:02:13.060 --> 04:02:15.060]  Это я написал просто определение
[04:02:15.060 --> 04:02:17.060]  учетной стоимости, правда?
[04:02:17.060 --> 04:02:19.060]  Это равно.
[04:02:19.060 --> 04:02:21.060]  Но я тут должен был
[04:02:21.060 --> 04:02:23.060]  суммировать по всем вершинам,
[04:02:23.060 --> 04:02:25.060]  но деревья, альфа, бета, гамма,
[04:02:25.060 --> 04:02:27.060]  вот эти все вершины я могу выкинуть.
[04:02:27.060 --> 04:02:29.060]  Почему я могу их выкинуть?
[04:02:29.060 --> 04:02:31.060]  Да, просто потому что там
[04:02:31.060 --> 04:02:33.060]  ничего не меняется.
[04:02:33.060 --> 04:02:35.060]  Поэтому по факту остается
[04:02:35.060 --> 04:02:37.060]  только логарифом
[04:02:37.060 --> 04:02:39.060]  двоичный
[04:02:39.060 --> 04:02:41.060]  значит
[04:02:41.060 --> 04:02:43.060]  СЗ В
[04:02:43.060 --> 04:02:45.060]  до
[04:02:45.060 --> 04:02:47.060]  плюс логарифом
[04:02:47.060 --> 04:02:49.060]  двоичный
[04:02:49.060 --> 04:02:51.060]  СЗ Рут
[04:02:51.060 --> 04:02:53.060]  до
[04:02:53.060 --> 04:02:55.060]  да, потому что я
[04:02:55.060 --> 04:02:57.060]  наврал, так,
[04:02:57.060 --> 04:02:59.060]  потому что я наврал, так,
[04:02:59.060 --> 04:03:01.060]  минус логарифом
[04:03:01.060 --> 04:03:03.060]  двоичный СЗ В
[04:03:03.060 --> 04:03:05.060]  СЗ В
[04:03:05.060 --> 04:03:07.060]  до, минус логарифом
[04:03:07.060 --> 04:03:09.060]  двоичный
[04:03:09.060 --> 04:03:11.060]  СЗ Рут
[04:03:11.060 --> 04:03:13.060]  до
[04:03:13.060 --> 04:03:15.060]  до
[04:03:15.060 --> 04:03:17.060]  да, скажи до, до
[04:03:17.060 --> 04:03:19.060]  скажи после, после
[04:03:19.060 --> 04:03:21.060]  вот это все, да, вот.
[04:03:21.060 --> 04:03:23.060]  Так, ну начнем
[04:03:23.060 --> 04:03:25.060]  с самого приятного
[04:03:25.060 --> 04:03:27.060]  для нас,
[04:03:27.060 --> 04:03:29.060]  что тут для нас самое приятное?
[04:03:29.060 --> 04:03:31.060]  Это, конечно, его величество
[04:03:31.060 --> 04:03:33.060]  но мало кто
[04:03:33.060 --> 04:03:35.060]  знает,
[04:03:35.060 --> 04:03:37.060]  но сумма весов
[04:03:37.060 --> 04:03:39.060]  в поддереве этой вершины
[04:03:39.060 --> 04:03:41.060]  и сумма весов в этой вершине
[04:03:41.060 --> 04:03:43.060]  в этом поддереве одна и та же.
[04:03:43.060 --> 04:03:45.060]  Это поразительно.
[04:03:45.060 --> 04:03:47.060]  Вот.
[04:03:47.060 --> 04:03:49.060]  Это равно.
[04:03:49.060 --> 04:03:51.060]  Значит давайте тут разминаемся
[04:03:51.060 --> 04:03:53.060]  логарифом двоичный СЗ
[04:03:53.060 --> 04:03:55.060]  Рут
[04:03:55.060 --> 04:03:57.060]  после
[04:03:57.060 --> 04:03:59.060]  минус логарифом
[04:03:59.060 --> 04:04:01.060]  двоичный СЗ
[04:04:01.060 --> 04:04:03.060]  В
[04:04:03.060 --> 04:04:05.060]  до.
[04:04:05.060 --> 04:04:07.060]  Время-то еще есть вообще?
[04:04:07.060 --> 04:04:09.060]  За 15 минут уложимся.
[04:04:09.060 --> 04:04:11.060]  Я надеюсь.
[04:04:11.060 --> 04:04:13.060]  Вот.
[04:04:13.060 --> 04:04:15.060]  Так, ну теперь можно оценить сверху,
[04:04:15.060 --> 04:04:17.060]  потому что СЗ Рут
[04:04:17.060 --> 04:04:19.060]  после можно оценить сверху как СЗ
[04:04:19.060 --> 04:04:21.060]  В после.
[04:04:21.060 --> 04:04:23.060]  Что не так?
[04:04:23.060 --> 04:04:25.060]  Ну вот.
[04:04:25.060 --> 04:04:27.060]  СЗ
[04:04:27.060 --> 04:04:29.060]  после
[04:04:29.060 --> 04:04:31.060]  значит В
[04:04:31.060 --> 04:04:33.060]  минус логарифом двоичный
[04:04:33.060 --> 04:04:35.060]  СЗ В до.
[04:04:35.060 --> 04:04:37.060]  Но это
[04:04:37.060 --> 04:04:39.060]  так как эта разность больше
[04:04:39.060 --> 04:04:41.060]  либо равна нуля, то она меньше либо
[04:04:41.060 --> 04:04:43.060]  равно 1 плюс 3 на
[04:04:43.060 --> 04:04:45.060]  лог 2
[04:04:45.060 --> 04:04:47.060]  минус лог 2
[04:04:47.060 --> 04:04:49.060]  честно скажу,
[04:04:49.060 --> 04:04:51.060]  потому что у меня
[04:04:51.060 --> 04:04:53.060]  где-то вот тут возникнет
[04:04:53.060 --> 04:04:55.060]  тройка.
[04:04:55.060 --> 04:04:57.060]  Чисто чтобы
[04:04:57.060 --> 04:04:59.060]  удобно было.
[04:04:59.060 --> 04:05:01.060]  Вот.
[04:05:01.060 --> 04:05:03.060]  Так что
[04:05:03.060 --> 04:05:05.060]  так что
[04:05:05.060 --> 04:05:07.060]  как видим в общем-то
[04:05:07.060 --> 04:05:09.060]  между Рутом
[04:05:09.060 --> 04:05:11.060]  и В хотя бы 1.
[04:05:11.060 --> 04:05:13.060]  Между Рутом и В?
[04:05:13.060 --> 04:05:15.060]  Нет.
[04:05:15.060 --> 04:05:17.060]  Потому что нет
[04:05:17.060 --> 04:05:19.060]  почему?
[04:05:19.060 --> 04:05:21.060]  Тут вес очень маленький, у самого Рута
[04:05:21.060 --> 04:05:23.060]  вес очень маленький.
[04:05:23.060 --> 04:05:25.060]  А тут все большие веса, поэтому не факт.
[04:05:27.060 --> 04:05:29.060]  Да, то есть от весов зависит.
[04:05:31.060 --> 04:05:33.060]  Что?
[04:05:33.060 --> 04:05:35.060]  В данном случае нет.
[04:05:35.060 --> 04:05:37.060]  Вот я честно скажу
[04:05:37.060 --> 04:05:39.060]  одна из самых крутых идей здесь
[04:05:39.060 --> 04:05:41.060]  это как эта единичка убьется в других
[04:05:41.060 --> 04:05:43.060]  шагах.
[04:05:43.060 --> 04:05:45.060]  Но здесь она не бьется.
[04:05:45.060 --> 04:05:47.060]  Поэтому
[04:05:47.060 --> 04:05:49.060]  я тут вынужден писать единиц.
[04:05:49.060 --> 04:05:51.060]  Вот.
[04:05:51.060 --> 04:05:53.060]  Более того, собственно, изучение авторского
[04:05:53.060 --> 04:05:55.060]  доказательства в общем-то не дало мне
[04:05:55.060 --> 04:05:57.060]  возможности сказать, что тут этой единицы нет.
[04:05:57.060 --> 04:05:59.060]  Понятно, что интуитивно хочется сказать,
[04:05:59.060 --> 04:06:01.060]  что наверно единица бьется этими
[04:06:01.060 --> 04:06:03.060]  логарифами, но
[04:06:03.060 --> 04:06:05.060]  тот и прикол, что логарифы могут быть
[04:06:05.060 --> 04:06:07.060]  сильно меньше. Единицы это принципиально.
[04:06:07.060 --> 04:06:09.060]  Вот.
[04:06:09.060 --> 04:06:11.060]  Зигом понятно?
[04:06:11.060 --> 04:06:13.060]  Так.
[04:06:13.060 --> 04:06:15.060]  Ну что ж, тогда я думаю мы просто пойдем
[04:06:15.060 --> 04:06:17.060]  обратно.
[04:06:23.060 --> 04:06:25.060]  Нет.
[04:06:25.060 --> 04:06:27.060]  Но разность логарифом миллион один
[04:06:27.060 --> 04:06:29.060]  и логарифом миллиона
[04:06:29.060 --> 04:06:31.060]  у них там
[04:06:31.060 --> 04:06:33.060]  чем больше вес
[04:06:35.060 --> 04:06:37.060]  эта разность может быть сколь угодно малой.
[04:06:37.060 --> 04:06:39.060]  Так что давайте так все. Зиг убираем.
[04:06:39.060 --> 04:06:41.060]  Я его даже полностью убираю.
[04:06:41.060 --> 04:06:43.060]  Потому что
[04:06:43.060 --> 04:06:45.060]  может понадобится чуть-чуть больше доски.
[04:06:45.060 --> 04:06:47.060]  Вот.
[04:06:47.060 --> 04:06:49.060]  И пришло время попробовать доказать
[04:06:49.060 --> 04:06:51.060]  зиг-зиг.
[04:06:53.060 --> 04:06:55.060]  Нет.
[04:06:55.060 --> 04:06:57.060]  Ну то есть да,
[04:06:57.060 --> 04:06:59.060]  но нет.
[04:06:59.060 --> 04:07:01.060]  Надо будет заметить,
[04:07:01.060 --> 04:07:03.060]  то есть сделать аналогичное,
[04:07:03.060 --> 04:07:05.060]  заметим что.
[04:07:05.060 --> 04:07:07.060]  А знаете что?
[04:07:07.060 --> 04:07:09.060]  А давайте зигзагой
[04:07:09.060 --> 04:07:11.060]  начнем.
[04:07:11.060 --> 04:07:13.060]  Потому что на зигзаге
[04:07:13.060 --> 04:07:15.060]  может быть чуть лучше
[04:07:15.060 --> 04:07:17.060]  более лучше
[04:07:17.060 --> 04:07:19.060]  лучше.
[04:07:21.060 --> 04:07:23.060]  Короче будет хорошо видно.
[04:07:27.060 --> 04:07:29.060]  Нет.
[04:07:29.060 --> 04:07:31.060]  В этой гамма
[04:07:31.060 --> 04:07:33.060]  не, в этой гамма по глубине
[04:07:33.060 --> 04:07:35.060]  как распределились, кстати. Это альфа и дельта остались
[04:07:35.060 --> 04:07:37.060]  на одинаковой глубине.
[04:07:37.060 --> 04:07:39.060]  Но на самом деле
[04:07:39.060 --> 04:07:41.060]  это сейчас не принципиально, потому что глубина сейчас не интересует
[04:07:41.060 --> 04:07:43.060]  от слова никак.
[04:07:45.060 --> 04:07:47.060]  А в этом смысле да.
[04:07:47.060 --> 04:07:49.060]  Но это они как бы глубины тут ни при чем.
[04:07:49.060 --> 04:07:51.060]  Тут важно, что их консервуют.
[04:07:51.060 --> 04:07:53.060]  Так, ну поехали.
[04:07:53.060 --> 04:07:55.060]  Итак,
[04:07:55.060 --> 04:07:57.060]  поехали. Т с крышечкой
[04:07:57.060 --> 04:07:59.060]  зиг-заг.
[04:07:59.060 --> 04:08:01.060]  Да, что такое крышечка?
[04:08:01.060 --> 04:08:03.060]  Ну да, крышечка да.
[04:08:03.060 --> 04:08:05.060]  Знаменитый польский режиссер.
[04:08:05.060 --> 04:08:07.060]  Да, в скобках нет.
[04:08:07.060 --> 04:08:09.060]  Так.
[04:08:09.060 --> 04:08:11.060]  У тебя есть одно видео с неописанной крышечкой.
[04:08:11.060 --> 04:08:13.060]  Ага.
[04:08:13.060 --> 04:08:15.060]  Да, да, да, да.
[04:08:15.060 --> 04:08:17.060]  И так.
[04:08:17.060 --> 04:08:19.060]  Значит оно равно.
[04:08:19.060 --> 04:08:21.060]  Значит один плюс.
[04:08:21.060 --> 04:08:23.060]  Ну как всегда.
[04:08:23.060 --> 04:08:25.060]  Ну давайте уж так начнем. Фи после
[04:08:25.060 --> 04:08:27.060]  минус Фидо.
[04:08:27.060 --> 04:08:29.060]  Не Фиде, а Фидо. Да.
[04:08:29.060 --> 04:08:31.060]  Вот.
[04:08:31.060 --> 04:08:33.060]  Один плюс.
[04:08:33.060 --> 04:08:35.060]  Так.
[04:08:35.060 --> 04:08:37.060]  Лог СЗ.
[04:08:39.060 --> 04:08:41.060]  Значит после А.
[04:08:43.060 --> 04:08:45.060]  Так, вот какие у нас тут вершины. Да.
[04:08:45.060 --> 04:08:47.060]  А, Б и В.
[04:08:47.060 --> 04:08:49.060]  Логично.
[04:08:49.060 --> 04:08:51.060]  Так.
[04:08:51.060 --> 04:08:53.060]  Лог два СЗ.
[04:08:53.060 --> 04:08:55.060]  После
[04:08:55.060 --> 04:08:57.060]  В. Минус.
[04:08:57.060 --> 04:08:59.060]  Лог два СЗ.
[04:08:59.060 --> 04:09:01.060]  В. После.
[04:09:01.060 --> 04:09:03.060]  Минус.
[04:09:03.060 --> 04:09:05.060]  Минус.
[04:09:05.060 --> 04:09:07.060]  Логарифом двоичной СЗ.
[04:09:07.060 --> 04:09:09.060]  А. До.
[04:09:09.060 --> 04:09:11.060]  Минус логарифом двоичной СЗ.
[04:09:11.060 --> 04:09:13.060]  В.
[04:09:13.060 --> 04:09:15.060]  Минус логарифом двоичной СЗ.
[04:09:15.060 --> 04:09:17.060]  В.
[04:09:17.060 --> 04:09:19.060]  До.
[04:09:19.060 --> 04:09:21.060]  Так. Ну что?
[04:09:21.060 --> 04:09:23.060]  Есть подозрение, что-то можно шлеп-шлепнуть.
[04:09:23.060 --> 04:09:25.060]  Как минимум да.
[04:09:25.060 --> 04:09:27.060]  Б и В можно.
[04:09:27.060 --> 04:09:29.060]  После В. До.
[04:09:29.060 --> 04:09:31.060]  Отлично.
[04:09:31.060 --> 04:09:33.060]  Как говорится? Отлично. Мы молодцы.
[04:09:33.060 --> 04:09:35.060]  Мы шлеп-шлепнулись.
[04:09:37.060 --> 04:09:39.060]  Значит шлеп-шлепнулись.
[04:09:39.060 --> 04:09:41.060]  Так.
[04:09:41.060 --> 04:09:43.060]  Ну давайте.
[04:09:45.060 --> 04:09:47.060]  А это следующим заходом.
[04:09:49.060 --> 04:09:51.060]  Плюс логарифом двоичной СЗ.
[04:09:51.060 --> 04:09:53.060]  В.
[04:09:53.060 --> 04:09:55.060]  После.
[04:09:57.060 --> 04:09:59.060]  Значит минус логарифом
[04:09:59.060 --> 04:10:01.060]  двоичной СЗ.
[04:10:01.060 --> 04:10:03.060]  А. До.
[04:10:03.060 --> 04:10:05.060]  Минус логарифом. Это я пока просто переписываю.
[04:10:05.060 --> 04:10:07.060]  Ничего.
[04:10:07.060 --> 04:10:09.060]  Так.
[04:10:09.060 --> 04:10:11.060]  Куда? Спрашивается.
[04:10:11.060 --> 04:10:13.060]  Куда девать единичку?
[04:10:13.060 --> 04:10:15.060]  Вот.
[04:10:15.060 --> 04:10:17.060]  Ну.
[04:10:17.060 --> 04:10:19.060]  На самом деле сейчас я поведаю.
[04:10:21.060 --> 04:10:23.060]  Сейчас я попробую поведать
[04:10:23.060 --> 04:10:25.060]  мистический факт.
[04:10:25.060 --> 04:10:27.060]  Я утверждаю.
[04:10:27.060 --> 04:10:29.060]  Смотрите.
[04:10:29.060 --> 04:10:31.060]  Мало кто знает.
[04:10:31.060 --> 04:10:33.060]  Вот вы возможно еще не знаете.
[04:10:33.060 --> 04:10:35.060]  Что логарифом
[04:10:35.060 --> 04:10:37.060]  это функция выпуклая вверх.
[04:10:37.060 --> 04:10:39.060]  Да.
[04:10:39.060 --> 04:10:41.060]  Формально вы этого еще не знаете.
[04:10:43.060 --> 04:10:45.060]  Вот.
[04:10:45.060 --> 04:10:47.060]  Нет. Дело вот чем.
[04:10:47.060 --> 04:10:49.060]  Ну я скажу так.
[04:10:49.060 --> 04:10:51.060]  Просто это мне дает подозрение такое.
[04:10:51.060 --> 04:10:53.060]  Если я хочу сложить логарифом Икса
[04:10:53.060 --> 04:10:55.060]  логарифом Икса
[04:10:55.060 --> 04:10:57.060]  и взять их среднее арифметическое.
[04:10:57.060 --> 04:10:59.060]  То оно окажется меньше, чем логарифом
[04:10:59.060 --> 04:11:01.060]  среднего арифметического Икса Икса.
[04:11:01.060 --> 04:11:03.060]  То есть логарифом
[04:11:03.060 --> 04:11:05.060]  значит Икс плюс логарифом Икс
[04:11:05.060 --> 04:11:07.060]  пополам.
[04:11:07.060 --> 04:11:09.060]  Он окажется просто меньше
[04:11:09.060 --> 04:11:11.060]  либо равен, чем логарифом двоичной
[04:11:11.060 --> 04:11:13.060]  Икс плюс Икс пополам.
[04:11:13.060 --> 04:11:15.060]  А вот вы спрашивали откуда берется
[04:11:15.060 --> 04:11:17.060]  как схлопнуть единичку.
[04:11:17.060 --> 04:11:19.060]  А вот и возникает такая идея.
[04:11:23.060 --> 04:11:25.060]  Вот.
[04:11:27.060 --> 04:11:29.060]  То есть как хлопнуть единичку.
[04:11:29.060 --> 04:11:31.060]  Вот.
[04:11:31.060 --> 04:11:33.060]  Смотрите.
[04:11:33.060 --> 04:11:35.060]  Теперь я просто
[04:11:35.060 --> 04:11:37.060]  хлопну.
[04:11:37.060 --> 04:11:39.060]  Хлопну ее вот каким
[04:11:39.060 --> 04:11:41.060]  вот. То есть я теперь могу просто
[04:11:41.060 --> 04:11:43.060]  заметить, что это теперь
[04:11:43.060 --> 04:11:45.060]  меньше либо равно. Получается один
[04:11:45.060 --> 04:11:47.060]  плюс. Так. Ну тут правда видите
[04:11:47.060 --> 04:11:49.060]  тут как двоечка.
[04:11:49.060 --> 04:11:51.060]  Поэтому тут надо...
[04:11:51.060 --> 04:11:53.060]  То есть поэтому я могу написать так.
[04:11:53.060 --> 04:11:55.060]  Два логарифма
[04:11:55.060 --> 04:11:57.060]  двоичных.
[04:11:57.060 --> 04:11:59.060]  Значит СЗА
[04:11:59.060 --> 04:12:01.060]  после.
[04:12:01.060 --> 04:12:03.060]  Плюс СЗБ
[04:12:03.060 --> 04:12:05.060]  после.
[04:12:05.060 --> 04:12:07.060]  И минус
[04:12:07.060 --> 04:12:09.060]  два. Ой, далее.
[04:12:11.060 --> 04:12:13.060]  Вот.
[04:12:13.060 --> 04:12:15.060]  Могу я такое заявить.
[04:12:15.060 --> 04:12:17.060]  И минус
[04:12:17.060 --> 04:12:19.060]  логарифма
[04:12:19.060 --> 04:12:21.060]  двоичных СЗА
[04:12:21.060 --> 04:12:23.060]  до.
[04:12:23.060 --> 04:12:25.060]  Минус логарифм двоичный
[04:12:25.060 --> 04:12:27.060]  СЗВ
[04:12:27.060 --> 04:12:29.060]  до.
[04:12:29.060 --> 04:12:31.060]  А теперь самое... А теперь почему
[04:12:31.060 --> 04:12:33.060]  я взял... Ну вот почему это вот хорошо взять.
[04:12:33.060 --> 04:12:35.060]  Потому что, смотрите.
[04:12:35.060 --> 04:12:37.060]  Просмотрим на А и В после.
[04:12:37.060 --> 04:12:39.060]  Заметим, что не просто...
[04:12:39.060 --> 04:12:41.060]  То есть заметим теперь следующее.
[04:12:41.060 --> 04:12:43.060]  Что их СЗшка даже в объединении
[04:12:43.060 --> 04:12:45.060]  она меньше
[04:12:45.060 --> 04:12:47.060]  чем СЗшка от В.
[04:12:47.060 --> 04:12:49.060]  Поэтому я могу
[04:12:49.060 --> 04:12:51.060]  здесь просто объявить,
[04:12:51.060 --> 04:12:53.060]  что это меньше либо равно.
[04:12:53.060 --> 04:12:55.060]  Чем минус один. Ну давайте
[04:12:55.060 --> 04:12:57.060]  сразу скажем, да.
[04:12:57.060 --> 04:12:59.060]  Плюс
[04:12:59.060 --> 04:13:01.060]  два
[04:13:01.060 --> 04:13:03.060]  логарифма двоичных СЗ
[04:13:03.060 --> 04:13:05.060]  до СЗ
[04:13:05.060 --> 04:13:07.060]  после В.
[04:13:07.060 --> 04:13:09.060]  Минус
[04:13:09.060 --> 04:13:11.060]  минус. А теперь заметим, что...
[04:13:11.060 --> 04:13:13.060]  Ну
[04:13:13.060 --> 04:13:15.060]  а теперь что мы вычитаем?
[04:13:15.060 --> 04:13:17.060]  Мы вычитаем одно СЗВ до
[04:13:17.060 --> 04:13:19.060]  и вычитаем еще что-то, что
[04:13:19.060 --> 04:13:21.060]  заведомо больше, чем СЗВ
[04:13:21.060 --> 04:13:23.060]  до. Потому что А это родитель В.
[04:13:23.060 --> 04:13:25.060]  Видите, да?
[04:13:25.060 --> 04:13:27.060]  Поэтому я
[04:13:27.060 --> 04:13:29.060]  здесь могу с абсолютно
[04:13:29.060 --> 04:13:31.060]  чистой совестью написать
[04:13:31.060 --> 04:13:33.060]  два логарифма СЗВ
[04:13:33.060 --> 04:13:35.060]  до.
[04:13:35.060 --> 04:13:37.060]  То есть это равно...
[04:13:39.060 --> 04:13:41.060]  Ну, короче говоря,
[04:13:41.060 --> 04:13:43.060]  меньше либо равно, чем два
[04:13:43.060 --> 04:13:45.060]  логарифма двоичных
[04:13:45.060 --> 04:13:47.060]  СЗВ
[04:13:47.060 --> 04:13:49.060]  после
[04:13:49.060 --> 04:13:51.060]  минус
[04:13:51.060 --> 04:13:53.060]  логарифм двоичный
[04:13:53.060 --> 04:13:55.060]  СЗВ до.
[04:13:57.060 --> 04:13:59.060]  А я
[04:13:59.060 --> 04:14:01.060]  его меньше либо равно.
[04:14:03.060 --> 04:14:05.060]  И в принципе могу сразу сказать
[04:14:05.060 --> 04:14:07.060]  меньше либо ров три от того же самого.
[04:14:07.060 --> 04:14:09.060]  Да, потому что
[04:14:09.060 --> 04:14:11.060]  этот логарифм заведомо больше, чем вот этот
[04:14:11.060 --> 04:14:13.060]  логарифм.
[04:14:13.060 --> 04:14:15.060]  Потому что тут в поддереве все, а тут не все.
[04:14:15.060 --> 04:14:17.060]  А тут почти все.
[04:14:17.060 --> 04:14:19.060]  Так штурм!
[04:14:19.060 --> 04:14:21.060]  Таким образом
[04:14:21.060 --> 04:14:23.060]  оказывается, что, видите, то есть
[04:14:23.060 --> 04:14:25.060]  оказывается, лишнюю минус единичку
[04:14:25.060 --> 04:14:27.060]  можно убить, если
[04:14:27.060 --> 04:14:29.060]  найти сумму каких-то двух, желательно
[04:14:29.060 --> 04:14:31.060]  не пересекающихся
[04:14:31.060 --> 04:14:33.060]  поддеревьев.
[04:14:37.060 --> 04:14:39.060]  Вот.
[04:14:39.060 --> 04:14:41.060]  Так что, так, ну давайте
[04:14:41.060 --> 04:14:43.060]  так, прежде чем я сотру зигзаг,
[04:14:43.060 --> 04:14:45.060]  есть ли тут какие-то вопросы?
[04:14:45.060 --> 04:14:47.060]  Так.
[04:14:47.060 --> 04:14:49.060]  Надо еще все, все кто хотел
[04:14:49.060 --> 04:14:51.060]  переписали, да?
[04:14:51.060 --> 04:14:53.060]  И теперь, ну и теперь
[04:14:53.060 --> 04:14:55.060]  собственно финалочка. Теперь вот, в общем-то,
[04:14:55.060 --> 04:14:57.060]  самое интересное, потому что вот теперь
[04:14:57.060 --> 04:14:59.060]  да, теперь как бы должен наконец ответиться, откуда мы
[04:14:59.060 --> 04:15:01.060]  тройку взяли, а не двойку.
[04:15:01.060 --> 04:15:03.060]  Вот.
[04:15:03.060 --> 04:15:05.060]  Давайте, значит, зигзагом мы разобрались.
[04:15:05.060 --> 04:15:07.060]  Вот.
[04:15:07.060 --> 04:15:09.060]  Вот, что так наконец-то.
[04:15:13.060 --> 04:15:15.060]  Мы зигзагнились.
[04:15:35.060 --> 04:15:37.060]  Вот.
[04:15:37.060 --> 04:15:39.060]  Итак, поехали.
[04:15:39.060 --> 04:15:41.060]  Итак, финалочка.
[04:15:41.060 --> 04:15:43.060]  Вас приветствует ZIGZIG.
[04:15:43.060 --> 04:15:45.060]  Да, хорошо звучит, конечно.
[04:15:45.060 --> 04:15:47.060]  Да, ну.
[04:15:47.060 --> 04:15:49.060]  Так.
[04:15:49.060 --> 04:15:51.060]  Ну, как говорится.
[04:15:51.060 --> 04:15:53.060]  Ну, в конце концов, да.
[04:15:53.060 --> 04:15:55.060]  Так. Итак, поехали.
[04:15:55.060 --> 04:15:57.060]  Значит, поехали.
[04:15:57.060 --> 04:15:59.060]  Значит, ну, как всегда, давайте.
[04:15:59.060 --> 04:16:01.060]  Ну, я тут не буду фиксировать.
[04:16:01.060 --> 04:16:03.060]  Ну, я тут не буду фиксировать.
[04:16:03.060 --> 04:16:05.060]  Значит, ну, как всегда, давайте.
[04:16:05.060 --> 04:16:07.060]  Ну, я тут не буду финито писать, я просто сразу
[04:16:07.060 --> 04:16:09.060]  напишу. Ложарифом двоичный
[04:16:09.060 --> 04:16:11.060]  значит СЗВ
[04:16:11.060 --> 04:16:13.060]  после.
[04:16:13.060 --> 04:16:15.060]  Плюс ложарифом двоичный
[04:16:15.060 --> 04:16:17.060]  СЗА
[04:16:17.060 --> 04:16:19.060]  после.
[04:16:19.060 --> 04:16:21.060]  Плюс ложарифом двоичный
[04:16:21.060 --> 04:16:23.060]  СЗБ
[04:16:23.060 --> 04:16:25.060]  после.
[04:16:25.060 --> 04:16:27.060]  Минус опять
[04:16:27.060 --> 04:16:29.060]  логарифом двоичный
[04:16:29.060 --> 04:16:31.060]  СЗВ до
[04:16:31.060 --> 04:16:33.060]  минус
[04:16:33.060 --> 04:16:35.060]  логарифом двоичный СЗА
[04:16:35.060 --> 04:16:37.060]  до
[04:16:37.060 --> 04:16:39.060]  минус
[04:16:39.060 --> 04:16:41.060]  СЗБ до.
[04:16:41.060 --> 04:16:43.060]  Так.
[04:16:43.060 --> 04:16:45.060]  Так. Ну, начнем с уже
[04:16:45.060 --> 04:16:47.060]  полюбившегося нам шлеп-шлепа.
[04:16:51.060 --> 04:16:53.060]  Да. В после,
[04:16:53.060 --> 04:16:55.060]  В до. В общем, зачем я стер первую
[04:16:55.060 --> 04:16:57.060]  строчку?
[04:16:57.060 --> 04:16:59.060]  Вот. Можно было не стирать.
[04:16:59.060 --> 04:17:01.060]  Ты можешь еще раз написать, как бы тогда
[04:17:01.060 --> 04:17:03.060]  как бы
[04:17:03.060 --> 04:17:05.060]  увеличить понимаемость.
[04:17:07.060 --> 04:17:09.060]  Так. Ну, что тут у нас?
[04:17:13.060 --> 04:17:15.060]  СЗА
[04:17:15.060 --> 04:17:17.060]  после СЗБ после снова
[04:17:17.060 --> 04:17:19.060]  так посумировать.
[04:17:19.060 --> 04:17:21.060]  Нет, ну просто
[04:17:21.060 --> 04:17:23.060]  проблема в том, что СЗА после плюс СЗБ
[04:17:23.060 --> 04:17:25.060]  после равны непонятно
[04:17:25.060 --> 04:17:27.060]  к чему.
[04:17:27.060 --> 04:17:29.060]  Нет, то давайте так, давайте я пока перепишу.
[04:17:29.060 --> 04:17:31.060]  Значит там просто, да.
[04:17:31.060 --> 04:17:33.060]  Как бы там не самая тривиальная идея, знаете, еще
[04:17:33.060 --> 04:17:35.060]  года, еще года два назад я тупил, если
[04:17:35.060 --> 04:17:37.060]  честно. Так.
[04:17:37.060 --> 04:17:39.060]  Вот.
[04:17:39.060 --> 04:17:41.060]  Ну, на самом деле сейчас
[04:17:41.060 --> 04:17:43.060]  СЗБ после плюс СЗА до
[04:17:43.060 --> 04:17:45.060]  да, и это ровно то, что нам нужно.
[04:17:45.060 --> 04:17:47.060]  Ну, у нас не плюс.
[04:17:47.060 --> 04:17:49.060]  СЗА до и СЗБ после
[04:17:49.060 --> 04:17:51.060]  Да. Совершенно верно.
[04:17:51.060 --> 04:17:53.060]  Да. То есть у нас
[04:17:53.060 --> 04:17:55.060]  идея в том, что оказывается вот это
[04:17:55.060 --> 04:17:57.060]  плюс вот это ее можно оценивать сверху
[04:17:57.060 --> 04:17:59.060]  как СЗВ после.
[04:17:59.060 --> 04:18:01.060]  Но у нас нету
[04:18:01.060 --> 04:18:03.060]  СЗВ до и СЗБ
[04:18:03.060 --> 04:18:05.060]  после. Точнее у нас есть СЗБ
[04:18:05.060 --> 04:18:07.060]  после, но нет СЗВ
[04:18:07.060 --> 04:18:09.060]  до.
[04:18:09.060 --> 04:18:11.060]  Нет, есть у нас минус.
[04:18:11.060 --> 04:18:13.060]  Да.
[04:18:13.060 --> 04:18:15.060]  Но есть действительно такой популярный
[04:18:15.060 --> 04:18:17.060]  в математике метод прибавим и вычтем
[04:18:17.060 --> 04:18:19.060]  называется.
[04:18:19.060 --> 04:18:21.060]  Да. Значит он
[04:18:21.060 --> 04:18:23.060]  мы его сделаем так, я его даже отдельно
[04:18:23.060 --> 04:18:25.060]  лог 2 СЗВ
[04:18:25.060 --> 04:18:27.060]  до.
[04:18:27.060 --> 04:18:29.060]  Плюс лог 2
[04:18:29.060 --> 04:18:31.060]  СЗБ
[04:18:31.060 --> 04:18:33.060]  после.
[04:18:33.060 --> 04:18:35.060]  Плюс
[04:18:35.060 --> 04:18:37.060]  логарифом
[04:18:37.060 --> 04:18:39.060]  2 СЗА
[04:18:39.060 --> 04:18:41.060]  после.
[04:18:41.060 --> 04:18:43.060]  Ну, это я просто вот это переписал, да.
[04:18:43.060 --> 04:18:45.060]  И минус
[04:18:45.060 --> 04:18:47.060]  логарифом, минус 2 на этот раз
[04:18:47.060 --> 04:18:49.060]  логарифом СЗВ
[04:18:49.060 --> 04:18:51.060]  до, минус
[04:18:51.060 --> 04:18:53.060]  логарифом 2 СЗА
[04:18:53.060 --> 04:18:55.060]  до.
[04:18:57.060 --> 04:18:59.060]  Ой, у меня место заканчивается, так.
[04:18:59.060 --> 04:19:01.060]  А, впрочем
[04:19:01.060 --> 04:19:03.060]  ну впрочем ладно, я думаю если мы
[04:19:03.060 --> 04:19:05.060]  летающий маркер.
[04:19:05.060 --> 04:19:07.060]  Так.
[04:19:07.060 --> 04:19:09.060]  Так.
[04:19:09.060 --> 04:19:11.060]  Значит, ну поехали.
[04:19:11.060 --> 04:19:13.060]  Так, ну к чему это
[04:19:13.060 --> 04:19:15.060]  нас приводит? Так, ну
[04:19:15.060 --> 04:19:17.060]  пишем. Это
[04:19:17.060 --> 04:19:19.060]  у нас оказывает нот. То есть это
[04:19:19.060 --> 04:19:21.060]  мы теперь можем поскладывать. Это оказывается
[04:19:21.060 --> 04:19:23.060]  теперь меньше
[04:19:23.060 --> 04:19:25.060]  либо равно. Давайте аккуратненько скажем
[04:19:25.060 --> 04:19:27.060]  один плюс
[04:19:27.060 --> 04:19:29.060]  два
[04:19:29.060 --> 04:19:31.060]  значит
[04:19:31.060 --> 04:19:33.060]  логарифма двоичного
[04:19:33.060 --> 04:19:35.060]  значит
[04:19:35.060 --> 04:19:37.060]  от СЗВ
[04:19:37.060 --> 04:19:39.060]  до, плюс СЗВ
[04:19:39.060 --> 04:19:41.060]  СЗБ
[04:19:41.060 --> 04:19:43.060]  после.
[04:19:43.060 --> 04:19:45.060]  Минус
[04:19:45.060 --> 04:19:47.060]  два.
[04:19:47.060 --> 04:19:49.060]  Вот. Ну и дальше
[04:19:49.060 --> 04:19:51.060]  все это безобразие переписываем.
[04:19:59.060 --> 04:20:01.060]  Чего?
[04:20:01.060 --> 04:20:03.060]  Вот это? Ну да.
[04:20:03.060 --> 04:20:05.060]  Ну да, то есть значит минус
[04:20:05.060 --> 04:20:07.060]  СЗВ
[04:20:07.060 --> 04:20:09.060]  до, минус лог
[04:20:09.060 --> 04:20:11.060]  два СЗА
[04:20:11.060 --> 04:20:13.060]  до. Так.
[04:20:13.060 --> 04:20:15.060]  Ну да, я пишу как идея, хотя как бы могли бы тут
[04:20:15.060 --> 04:20:17.060]  уже это свести к трем СЗВ
[04:20:17.060 --> 04:20:19.060]  до.
[04:20:19.060 --> 04:20:21.060]  Так, ну теперь оцениваем сверху.
[04:20:21.060 --> 04:20:23.060]  Значит, это меньше либо равно,
[04:20:23.060 --> 04:20:25.060]  чем, во-первых, минус один, плюс
[04:20:25.060 --> 04:20:27.060]  два логарифма
[04:20:27.060 --> 04:20:29.060]  двоичных СЗВ
[04:20:29.060 --> 04:20:31.060]  после. В этом
[04:20:31.060 --> 04:20:33.060]  ради этого мы, в общем-то, это слагаемые вводили.
[04:20:33.060 --> 04:20:35.060]  Да.
[04:20:35.060 --> 04:20:37.060]  Плюс
[04:20:37.060 --> 04:20:39.060]  лог два СЗА
[04:20:39.060 --> 04:20:41.060]  после. Ну у нас тут все
[04:20:41.060 --> 04:20:43.060]  это тоже. Значит, пишем
[04:20:43.060 --> 04:20:45.060]  лог два СЗВ
[04:20:45.060 --> 04:20:47.060]  после.
[04:20:47.060 --> 04:20:49.060]  Ну потому что СЗВ
[04:20:49.060 --> 04:20:51.060]  после он по-любому чемпион.
[04:20:51.060 --> 04:20:53.060]  Минус
[04:20:53.060 --> 04:20:55.060]  ну и здесь, в общем-то, все
[04:20:55.060 --> 04:20:57.060]  красиво схлопывается, потому что
[04:20:57.060 --> 04:20:59.060]  тут СЗВ до
[04:20:59.060 --> 04:21:01.060]  и минус тут лог два СЗА
[04:21:01.060 --> 04:21:03.060]  до, но СЗА до оно больше
[04:21:03.060 --> 04:21:05.060]  чем СЗВ до, потому что опять А родитель.
[04:21:05.060 --> 04:21:07.060]  Поэтому тут пишем
[04:21:07.060 --> 04:21:09.060]  с чистой совестью СЗВ
[04:21:09.060 --> 04:21:11.060]  до, и это
[04:21:11.060 --> 04:21:13.060]  пришли бы равно, чем три
[04:21:13.060 --> 04:21:15.060]  логарифма СЗВ
[04:21:15.060 --> 04:21:17.060]  после
[04:21:17.060 --> 04:21:19.060]  минус
[04:21:19.060 --> 04:21:21.060]  логарифм двоичный СЗВ
[04:21:21.060 --> 04:21:23.060]  до.
[04:21:23.060 --> 04:21:25.060]  Все.
[04:21:25.060 --> 04:21:27.060]  В общем, да.
[04:21:27.060 --> 04:21:29.060]  В общем, опять оказалось, что-то не сильно убойно.
[04:21:29.060 --> 04:21:31.060]  Да.
[04:21:31.060 --> 04:21:33.060]  Вот.
[04:21:33.060 --> 04:21:35.060]  Ну я не знаю, может, конечно, на экзамене будет сложности, я не знаю.
[04:21:35.060 --> 04:21:37.060]  Ну-ка,
[04:21:37.060 --> 04:21:39.060]  ну-ка,
[04:21:39.060 --> 04:21:41.060]  у кого-то буду, я не знаю,
[04:21:41.060 --> 04:21:43.060]  потому что, честно скажу, это
[04:21:43.060 --> 04:21:45.060]  вопросом до отел будет вряд ли.
[04:21:45.060 --> 04:21:47.060]  Ну,
[04:21:47.060 --> 04:21:49.060]  ну да.
[04:21:49.060 --> 04:21:51.060]  Нет, но это хор на отел.
[04:21:51.060 --> 04:21:53.060]  Ну, как минимум,
[04:21:53.060 --> 04:21:55.060]  софт хип.
[04:21:55.060 --> 04:21:57.060]  Чего?
[04:21:57.060 --> 04:21:59.060]  Как максимум.
[04:21:59.060 --> 04:22:01.060]  Ну я не знаю, честно скажу, в прошлом году
[04:22:01.060 --> 04:22:03.060]  вопросом на пять был линкат.
[04:22:03.060 --> 04:22:05.060]  Линкат?
[04:22:05.060 --> 04:22:07.060]  Да, но я не знаю, может, мы, конечно, все
[04:22:07.060 --> 04:22:09.060]  можем.
[04:22:09.060 --> 04:22:11.060]  Нет, на отел,
[04:22:11.060 --> 04:22:13.060]  на отел.
[04:22:15.060 --> 04:22:17.060]  Да, вот нет, отел 5 это да.
[04:22:17.060 --> 04:22:19.060]  Нет, ну почему, как сказать.
[04:22:19.060 --> 04:22:21.060]  Нет, отел 5 это нормально, если вы получите
[04:22:21.060 --> 04:22:23.060]  хор 5 и 3 СПС-бонусы.
[04:22:25.060 --> 04:22:27.060]  Нет, ну да.
[04:22:27.060 --> 04:22:29.060]  Ну или я за четверть финал
[04:22:29.060 --> 04:22:31.060]  расщедрюсь там, я не знаю.
[04:22:31.060 --> 04:22:33.060]  Ну, может, вы там решите 15 задач из 12
[04:22:33.060 --> 04:22:35.060]  возможных, там я не знаю.
[04:22:35.060 --> 04:22:37.060]  Не, как бы, если что, я не полил
[04:22:37.060 --> 04:22:39.060]  количество задач, потому что я их не знаю.
[04:22:39.060 --> 04:22:41.060]  Так это да.
[04:22:41.060 --> 04:22:43.060]  Ну,
[04:22:43.060 --> 04:22:45.060]  вот.
[04:22:45.060 --> 04:22:47.060]  Нет,
[04:22:47.060 --> 04:22:49.060]  ну сфоролирую так, ладно.
[04:22:49.060 --> 04:22:51.060]  На всякий случай лучше, как бы так.
[04:22:51.060 --> 04:22:53.060]  Тут надо аккуратно, без комментариев.
[04:22:53.060 --> 04:22:55.060]  Потому что
[04:22:55.060 --> 04:22:57.060]  утверждать, что я
[04:22:57.060 --> 04:22:59.060]  на этот раз не имею никакого отношения к подготовке,
[04:22:59.060 --> 04:23:01.060]  я не могу.
[04:23:01.060 --> 04:23:03.060]  Ну вот, поэтому без комментариев.
[04:23:03.060 --> 04:23:05.060]  Поэтому никаких
[04:23:05.060 --> 04:23:07.060]  подробностей я вам, естественно, не расскажу.
[04:23:13.060 --> 04:23:15.060]  Да, да, ой.
[04:23:15.060 --> 04:23:17.060]  Ну, как вам сказать.
[04:23:19.060 --> 04:23:21.060]  Нет, ну тут
[04:23:21.060 --> 04:23:23.060]  вы знаете, ну как сказать.
[04:23:23.060 --> 04:23:25.060]  Нет, ну как сказать, я не знаю там,
[04:23:25.060 --> 04:23:27.060]  конечно.
[04:23:27.060 --> 04:23:29.060]  Ну, я не могу никак
[04:23:29.060 --> 04:23:31.060]  комментировать, собираются ли тут добавить линкат или нет.
[04:23:31.060 --> 04:23:33.060]  Естественно.
[04:23:33.060 --> 04:23:35.060]  Нет, в принципе, конечно, да.
[04:23:35.060 --> 04:23:37.060]  Я помню на самом деле как-то раз, потому что
[04:23:37.060 --> 04:23:39.060]  каждый раз, обычно мы там с тренерами сидим
[04:23:39.060 --> 04:23:41.060]  где-нибудь и что-нибудь обсуждаем.
[04:23:41.060 --> 04:23:43.060]  И в принципе, да, на самом деле у какой-то тренера
[04:23:43.060 --> 04:23:45.060]  из какой-то неизвестного вуза на самом деле
[04:23:45.060 --> 04:23:47.060]  возник вопрос, так, погодите, стоп, чего?
[04:23:47.060 --> 04:23:49.060]  То есть вы тренера
[04:23:49.060 --> 04:23:51.060]  в своих вузах, да.
[04:23:51.060 --> 04:23:53.060]  И вы, значит, в жюри Олимпиады.
[04:23:53.060 --> 04:23:55.060]  Чего? Ну вот.
[04:23:55.060 --> 04:23:57.060]  Ну, можно им подсказать, а как? Ну мы же им не рассказываем задачи.
[04:23:57.060 --> 04:23:59.060]  А, ну вы же можете как будто случайно пройти
[04:23:59.060 --> 04:24:01.060]  нужную тему.
[04:24:01.060 --> 04:24:03.060]  Ну вот, думаю, ну да.
[04:24:03.060 --> 04:24:05.060]  Но правда, гарантировать
[04:24:05.060 --> 04:24:07.060]  можно только одной, в принципе, на видео это будет
[04:24:07.060 --> 04:24:09.060]  подтверждено. На самом деле, что
[04:24:09.060 --> 04:24:11.060]  обычно там порядок тем обычно принципиально
[04:24:11.060 --> 04:24:13.060]  не меняется, во-первых, это раз.
[04:24:13.060 --> 04:24:15.060]  В-третьих, пока еще, по крайней мере, ни разу не было,
[04:24:15.060 --> 04:24:17.060]  что я тут неожиданно переставил тему, и тут
[04:24:17.060 --> 04:24:19.060]  бабах, это кому-то помогло.
[04:24:19.060 --> 04:24:21.060]  Ну вот.
[04:24:21.060 --> 04:24:23.060]  Да, я рассказал софт.
[04:24:23.060 --> 04:24:25.060]  Да, я рассказал.
[04:24:25.060 --> 04:24:27.060]  Не, а как-то вам могло, потому что на софт-хип я знаю
[04:24:27.060 --> 04:24:29.060]  только одну задачу на софт-хип.
[04:24:29.060 --> 04:24:31.060]  Нет, я давал как-то на руку
[04:24:31.060 --> 04:24:33.060]  от задачи на софт-хип.
[04:24:33.060 --> 04:24:35.060]  Нет, там
[04:24:35.060 --> 04:24:37.060]  сейчас.
[04:24:37.060 --> 04:24:39.060]  Нет, там просто
[04:24:39.060 --> 04:24:41.060]  задача на самом деле не на софт-хип, а на
[04:24:41.060 --> 04:24:43.060]  там...
[04:24:43.060 --> 04:24:45.060]  Сейчас.
[04:24:47.060 --> 04:24:49.060]  Нет.
[04:24:49.060 --> 04:24:51.060]  Там была, знаете, какая задача?
[04:24:51.060 --> 04:24:53.060]  Значит, взяли числа от 1 до n
[04:24:53.060 --> 04:24:55.060]  в кучу там с параметром
[04:24:55.060 --> 04:24:57.060]  каким-то епсилон, по-моему.
[04:24:57.060 --> 04:24:59.060]  Значит, пихнули нот.
[04:24:59.060 --> 04:25:01.060]  И попытались им устроить софт-хип-сорт.
[04:25:01.060 --> 04:25:03.060]  Внимание, вопрос.
[04:25:03.060 --> 04:25:05.060]  По-моему, сколько
[04:25:05.060 --> 04:25:07.060]  согласно оглашенному инварианту
[04:25:07.060 --> 04:25:09.060]  различных массивов мог выдать
[04:25:09.060 --> 04:25:11.060]  софт-хип?
[04:25:13.060 --> 04:25:15.060]  И то инвариант задачи отлично.
[04:25:15.060 --> 04:25:17.060]  Естественно, сам софт-хип писать не надо было.
[04:25:17.060 --> 04:25:19.060]  Хотя это хорошая версия.
[04:25:19.060 --> 04:25:21.060]  Много-много раз генерим, сколько различных
[04:25:21.060 --> 04:25:23.060]  массивов сгенерилось, столько и выводим.
[04:25:25.060 --> 04:25:27.060]  Ну вот.
[04:25:29.060 --> 04:25:31.060]  Так что вот такая разница.
[04:25:33.060 --> 04:25:35.060]  Вот.
[04:25:35.060 --> 04:25:37.060]  Так что в этом смысле так.
[04:25:37.060 --> 04:25:39.060]  Ладно.
[04:25:39.060 --> 04:25:41.060]  Так, ну ладно, если тут нет вопросов,
[04:25:41.060 --> 04:25:43.060]  то, видимо, по хронометражу явно на сегодня
[04:25:43.060 --> 04:25:45.060]  все.
[04:25:45.060 --> 04:25:47.060]  Так что ответственно.
