[00:00.000 --> 00:28.000]  Лекции, три замечательные лекции будут посвящены теории чисел, все дело в том, что Филипп Рухович у вас заболел, попросил меня все это дело рассказать, ну точнее он это не планировал рассказать, у меня изначально просил рассказать вам алгоритм поиска дерево тандемных повторов за линейное время, где самая короткая статья, которую я нашел, была на 40 страниц. Вот, но я к сожалению отказался, потому что...
[00:28.000 --> 00:50.000]  В том, что читать статьи я не люблю, вот, и просто мы с ним договорились, чтобы я рассказал вам всякую базу о теории чисел, ну такой устраивал ликбез, как бы олимпиадникам, которые бывшие, нормально будет, я думаю, потому что вы так все алгоритмы знаете, у вас будет изи устный экзамен, а остальным, ну ликбез получается, и все такое.
[00:50.000 --> 00:55.000]  Ну давайте начнем с проверки на простоту.
[00:55.000 --> 00:57.000]  За линию.
[00:57.000 --> 01:02.000]  Одного числа, именно так. Ну проверка на простоту, естественно, чисел...
[01:02.000 --> 01:04.000]  Я могу за линию минус 1.
[01:04.000 --> 01:11.000]  От 1 до n.
[01:11.000 --> 01:14.000]  Кстати, вот вы как пруфы вообще любите?
[01:14.000 --> 01:16.000]  Филипп очень любит.
[01:16.000 --> 01:17.000]  Вы не очень.
[01:17.000 --> 01:19.000]  Лучше с пруфами.
[01:19.000 --> 01:23.000]  Хорошо, ну тогда я запрофаю обычный, что за n-lock-lock.
[01:23.000 --> 01:26.000]  Я думаю, кстати, вот не все умеют, ну типа...
[01:26.000 --> 01:29.000]  У нас в школе было это, да, естественно, не факт, что я его помню.
[01:29.000 --> 01:30.000]  Окей.
[01:30.000 --> 01:35.000]  Ну хорошо, собственно, как это делается?
[01:35.000 --> 01:46.000]  Ну делается достаточно просто, типа заводим какой-нибудь там вектор булов, там исправим, заполняем его изначально трушками и заполняем его краской размера n.
[01:46.000 --> 01:50.000]  Ну и алгоритм состоит в том, что мы просто проходимся...
[01:50.000 --> 01:55.000]  Ну мы как в школьном алгоритме, собственно, мы просто проходимся по всем числам от 2 до n.
[01:55.000 --> 02:04.000]  И, типа, если у нас от числов встретилось непростое, то мы ничего не делаем.
[02:04.000 --> 02:08.000]  А иначе мы пробегаемся по всем числам, которые кратны этому числу i.
[02:08.000 --> 02:09.000]  Ну, то есть мы...
[02:09.000 --> 02:13.000]  Можно начинать с 3 квадрата, но это такая себе оптимизация.
[02:13.000 --> 02:19.000]  Тем более, если мы работаем в числах там до 10, 7, 10, 8, это, кажется, роли не особо играет.
[02:19.000 --> 02:23.000]  Ну хотя давайте с i квадрата пробежимся, пофиг.
[02:23.000 --> 02:25.000]  Можно это и пооценивать?
[02:25.000 --> 02:27.000]  Оно одинаково оценивается.
[02:27.000 --> 02:29.000]  Ну в плане отдельно почитать.
[02:29.000 --> 02:31.000]  Ну окей.
[02:31.000 --> 02:33.000]  Ну давайте тут буду считать, что с 2 i бегу.
[02:33.000 --> 02:38.000]  Бегу по числам g кратным i.
[02:38.000 --> 02:43.000]  И, типа, помещаю все числа, которые кратны i, как непростые.
[02:43.000 --> 02:46.000]  Ну, собственно, на этом алгоритм закончился.
[02:46.000 --> 02:49.000]  Самый-то веселый это оценка времени его работы.
[02:49.000 --> 02:51.000]  Давайте это сделаем.
[02:51.000 --> 03:00.000]  Соответственно, есть пруфа, которая полагается на то, что у вас k-то простое число примерно натуральный алгоритм от k.
[03:00.000 --> 03:02.000]  K натуральный алгоритм от k.
[03:02.000 --> 03:03.000]  Вот.
[03:03.000 --> 03:05.000]  Но вы это умеете пруфать?
[03:05.000 --> 03:06.000]  Да.
[03:06.000 --> 03:07.000]  Ну мы доказывали, что...
[03:07.000 --> 03:09.000]  Нет, ну мы не совсем это умеем пруфать.
[03:09.000 --> 03:16.000]  Мы умеем пруфать, что среди первых n их от n делить на лог до 4n делить на лог.
[03:16.000 --> 03:17.000]  От n делить на лог?
[03:17.000 --> 03:18.000]  Ну хорошо.
[03:18.000 --> 03:19.000]  Ну там чуть меньше, чем n делить на лог.
[03:19.000 --> 03:20.000]  Ну окей.
[03:20.000 --> 03:23.000]  Ну нам, на самом деле, понравится простая оценка.
[03:23.000 --> 03:32.000]  Я, например, там легко выводил такую оценку, что это примерно k ln k, но лог 2-ичный k, поделить на 12.
[03:32.000 --> 03:33.000]  Вот.
[03:33.000 --> 03:34.000]  Ну в принципе, это пруфать можно очень просто.
[03:34.000 --> 03:39.000]  Типа, если мы просто посмотрим на, соответственно, числа от n до 2n невключительно.
[03:39.000 --> 03:42.000]  Ну и рассмотрим, например, какой-нибудь там...
[03:42.000 --> 03:45.000]  Давайте от 2n включительно будет, а n невключительно.
[03:45.000 --> 03:49.000]  Ну и посмотрим на какое-нибудь там выражение типа c с 2n по n.
[03:49.000 --> 03:51.000]  Собственно, оно как минимум...
[03:51.000 --> 03:53.000]  Хочешь пластула от беретрана?
[03:53.000 --> 03:54.000]  Не, ну...
[03:54.000 --> 03:55.000]  А нам пластула от беретрана не нужен.
[03:55.000 --> 04:00.000]  То есть там есть первая часть пластула от беретраны, которая начинается с того, что простых чисел не слишком много.
[04:00.000 --> 04:03.000]  И в принципе, она нам только и понадобится.
[04:03.000 --> 04:04.000]  Вот.
[04:04.000 --> 04:08.000]  Ну это типа произведение всех простых будет на этом отрезке.
[04:08.000 --> 04:12.000]  Сама эта штука меньше, чем 4 в степени n.
[04:12.000 --> 04:19.000]  Но произведение всех простых, оно, понятное дело, как минимум n в степени количества простых.
[04:19.000 --> 04:22.000]  Соответственно, мы отсюда сразу получаем нужное неравенство.
[04:22.000 --> 04:25.000]  Если все пролографмируем по основанию 2, тут получим 2n.
[04:25.000 --> 04:29.000]  Тут получим k ln 2n.
[04:30.000 --> 04:31.000]  Ну как-то так.
[04:31.000 --> 04:38.000]  Собственно, мы получаем, что у нас простых чисел не больше, чем 2n поделить на ln 2n.
[04:38.000 --> 04:40.000]  Вроде нигде не вру, да?
[04:40.000 --> 04:41.000]  Похоже.
[04:41.000 --> 04:42.000]  Похоже.
[04:42.000 --> 04:43.000]  Окей.
[04:43.000 --> 04:45.000]  Ну уже это так и доказывается.
[04:45.000 --> 04:46.000]  Ну да.
[04:46.000 --> 04:49.000]  Ну и типа дальше как бы proof к чему сводится.
[04:49.000 --> 04:51.000]  В общих чертах, если.
[04:51.000 --> 04:54.000]  Мы берем как бы наше число p-каты.
[04:54.000 --> 04:57.000]  Смотрим, в какую она попала блок.
[04:57.000 --> 05:00.000]  Ну и дальше у нас есть же не только этот блок.
[05:00.000 --> 05:03.000]  Есть еще чисто раньше него.
[05:03.000 --> 05:04.000]  Вот.
[05:04.000 --> 05:09.000]  И тут можно их количество оценить получается сверху.
[05:09.000 --> 05:14.000]  Если мы посмотрим блок от n по полам до n,
[05:14.000 --> 05:17.000]  от n поделить на 4 до n и так далее.
[05:17.000 --> 05:20.000]  То есть нам придется просуммировать какую-то такую сумму.
[05:20.000 --> 05:23.000]  Ну собственно, давайте это сделаем.
[05:23.000 --> 05:25.000]  Ну как сделаем?
[05:25.000 --> 05:28.000]  Я накурекую, что там если сворачивается, вы мне очень сильно поверите.
[05:28.000 --> 05:30.000]  Потому что там реально все делается школьными методами.
[05:30.000 --> 05:32.000]  Типа.
[05:32.000 --> 05:33.000]  Что?
[05:33.000 --> 05:35.000]  Четыре.
[05:35.000 --> 05:36.000]  Ну там не четыре выйдет.
[05:36.000 --> 05:38.000]  Там у меня на шестерку оценка была.
[05:38.000 --> 05:40.000]  Типа.
[05:40.000 --> 05:44.000]  Потому что мы делим его чуть меньше.
[05:44.000 --> 05:45.000]  Ну фиг знает.
[05:45.000 --> 05:49.000]  Ну короче, надо понять, как примерно такая сумма сворачивается.
[05:49.000 --> 05:50.000]  Тут у нас n это что?
[05:50.000 --> 05:51.000]  Это у нас будет в степени двойки.
[05:51.000 --> 05:54.000]  Соответственно у нас будет тут сумма 2 степени k плюс 1.
[05:54.000 --> 06:02.000]  Поделить на, а давайте с единички бежать, лог 2k.
[06:02.000 --> 06:03.000]  Окей.
[06:03.000 --> 06:06.000]  Ну среди этих слагаемых есть максимальная.
[06:06.000 --> 06:11.000]  Это 2 степени минус 1 на лог 2m.
[06:11.000 --> 06:12.000]  Вот.
[06:12.000 --> 06:13.000]  И в принципе там прав к чему сводится.
[06:13.000 --> 06:17.000]  Он сводится к тому, что если мы как бы берем и рассматриваем другие слагаемые,
[06:17.000 --> 06:20.000]  то у нас последняя слагаемая будет ровно эта слагаемая.
[06:20.000 --> 06:23.000]  Следующая слагаемая, она как бы с одной стороны в два раза меньше,
[06:23.000 --> 06:25.000]  а с другой чуть-чуть меньше знаменателя.
[06:25.000 --> 06:27.000]  И вот короче можно показать, что оно будет...
[06:27.000 --> 06:29.000]  Лог строгости.
[06:29.000 --> 06:30.000]  Не, ну в смысле.
[06:30.000 --> 06:31.000]  Я тут...
[06:31.000 --> 06:32.000]  Не, в смысле.
[06:32.000 --> 06:34.000]  Сея не равен спорам и жуточной вы сможете доказать.
[06:34.000 --> 06:35.000]  Просто ну зачем вам это?
[06:35.000 --> 06:40.000]  У нас соответственно последняя слагаемая будет 2 степени m минус 1 лог 2m.
[06:40.000 --> 06:42.000]  Вообще без труб, чем с такими трубами.
[06:42.000 --> 06:44.000]  Ну хорошо, давай докажем.
[06:44.000 --> 06:46.000]  Хорошо, давайте прям честно-честно это докажем.
[06:46.000 --> 06:48.000]  Я надеюсь код могу стереть?
[06:48.000 --> 06:49.000]  Да.
[06:49.000 --> 06:50.000]  Окей.
[06:50.000 --> 06:52.000]  Давайте прям аккуратно это сделаем.
[06:54.000 --> 06:56.000]  Соответственно, что тут?
[06:56.000 --> 06:58.000]  Ну давайте только тогда не так и нарисую,
[06:58.000 --> 07:00.000]  а нарисую, что мы прям смотрим на...
[07:00.000 --> 07:02.000]  А, я намокрый, поэтому все плохо.
[07:04.000 --> 07:07.000]  Давайте прям тогда степени двойки нарисую,
[07:07.000 --> 07:09.000]  чтобы все было красивенько.
[07:11.000 --> 07:13.000]  Типа вот наш ступэ,
[07:13.000 --> 07:17.000]  оно попало в какой-то полинтервал
[07:17.000 --> 07:19.000]  2 степени k, 2 степени k плюс 1.
[07:19.000 --> 07:22.000]  Тут был какой-то интервал 2 степени k минус 1, ну и так далее.
[07:22.000 --> 07:24.000]  Соответственно, нам надо начинать, естественно,
[07:24.000 --> 07:26.000]  с единички, как помню.
[07:26.000 --> 07:28.000]  Типа с два нулевой, да, два в первой включитель.
[07:28.000 --> 07:29.000]  Окей.
[07:29.000 --> 07:32.000]  Ну хотим просто оценить тут суммарное количество простых чисел,
[07:32.000 --> 07:34.000]  но, видимо, они тут,
[07:34.000 --> 07:37.000]  а вот тут, чтобы получить какое-то неравенство на вот это число.
[07:37.000 --> 07:40.000]  Чтобы оценить снизу как 2 степени k, ну и что-то сделать.
[07:40.000 --> 07:42.000]  Ну давайте посчитаем.
[07:43.000 --> 07:45.000]  Типа чего у нас тут будет?
[07:45.000 --> 07:49.000]  С 0 по k минус 1.
[07:50.000 --> 07:52.000]  Кстати, вот лог 2k, мне кажется,
[07:52.000 --> 07:54.000]  что-то двойку можно подставлять?
[07:54.000 --> 07:55.000]  Тяжко.
[07:55.000 --> 07:57.000]  Давайте здесь еще там выходит, кстати,
[07:57.000 --> 07:59.000]  надо посмотреть поаккуратнее.
[07:59.000 --> 08:02.000]  Типа у нас мы сюда логариф мы подставляем
[08:02.000 --> 08:05.000]  от правой границы, да?
[08:06.000 --> 08:08.000]  Или от левой?
[08:09.000 --> 08:11.000]  У нас тут это 2n,
[08:11.000 --> 08:13.000]  а, от левой границы, окей.
[08:13.000 --> 08:15.000]  Ну тут у нас левая тут граница 0,
[08:15.000 --> 08:17.000]  давайте это отдельно учтем, боксним.
[08:18.000 --> 08:20.000]  Т с единички по...
[08:21.000 --> 08:23.000]  Да, окей.
[08:23.000 --> 08:25.000]  И то что будет?
[08:25.000 --> 08:27.000]  Это количество как будет снизу оцениваться?
[08:27.000 --> 08:30.000]  Это будет 2 степени удвоено тут.
[08:30.000 --> 08:32.000]  И плюс первое поделить на И.
[08:32.000 --> 08:34.000]  Вот такая вот сумма выйдет.
[08:35.000 --> 08:37.000]  Ну потому что лог 2, типа он засунулся,
[08:37.000 --> 08:39.000]  вот у меня получилось, осталось только И.
[08:40.000 --> 08:41.000]  Ну и дальше, да, давайте посмотрим,
[08:41.000 --> 08:43.000]  как это выглядит с самого начала.
[08:43.000 --> 08:45.000]  У нас будет 2 степени...
[08:45.000 --> 08:47.000]  Ну давайте для...
[08:47.000 --> 08:49.000]  Потом как-нибудь поставим сюда k-1,
[08:49.000 --> 08:51.000]  давайте это n сделаем,
[08:51.000 --> 08:53.000]  чтобы все выглядело красиво.
[08:53.000 --> 08:55.000]  Давайте, во-первых, все разделим на 2.
[08:55.000 --> 08:57.000]  Такую сумму будет легче рассматривать.
[08:57.000 --> 08:59.000]  У нас получается вот такая сумма,
[08:59.000 --> 09:01.000]  на самом деле.
[09:01.000 --> 09:03.000]  Окей.
[09:03.000 --> 09:05.000]  Но давайте посмотрим на какое это слагаемое.
[09:05.000 --> 09:07.000]  Может разделить на 4 и взять интеграл?
[09:07.000 --> 09:09.000]  Да нет, зачем интегралы, господи?
[09:09.000 --> 09:11.000]  До интегралов как бы...
[09:11.000 --> 09:13.000]  Ну вы-то, возможно, доросли, я не очень.
[09:13.000 --> 09:15.000]  Что нам надо сделать?
[09:15.000 --> 09:17.000]  Оценка такая, мы хотим показать,
[09:17.000 --> 09:21.000]  что 2 степени n-t поделить на n-t
[09:21.000 --> 09:24.000]  поделить на 2 степени n поделить на n
[09:24.000 --> 09:30.000]  не превышает 2 третей в степени n-t.
[09:32.000 --> 09:36.000]  Ну давайте скажем, что при n больше равно 2, например.
[09:36.000 --> 09:38.000]  Достаточно для соседних, кажется.
[09:38.000 --> 09:40.000]  Ну можно для соседних, конечно,
[09:40.000 --> 09:42.000]  но для соседних как ты это хочешь сделать?
[09:42.000 --> 09:44.000]  Ну просто...
[09:44.000 --> 09:48.000]  Сейчас 2 в третьей степени может быть просто t.
[09:48.000 --> 09:50.000]  А, ну давайте по 2 степени n поделить на n.
[09:50.000 --> 09:52.000]  Ты хочешь что сделать?
[09:52.000 --> 09:55.000]  Ну поделить на 2 степени n-1 верить на n.
[09:55.000 --> 09:57.000]  Давай сделаем это, окей.
[09:57.000 --> 09:59.000]  Проверишь, что это, например, меньше чем 2 трети.
[09:59.000 --> 10:01.000]  Ну давай, окей.
[10:01.000 --> 10:03.000]  И потом все равно все как геометрически, соответственно, прогрессия.
[10:03.000 --> 10:05.000]  Окей, давайте сделаем это.
[10:05.000 --> 10:07.000]  То есть у нас тут получается 2,
[10:07.000 --> 10:11.000]  поделенное на n, умноженное на n-1.
[10:13.000 --> 10:15.000]  А сейчас кажется дичь какая-то.
[10:15.000 --> 10:17.000]  Нет, так нельзя делать.
[10:17.000 --> 10:21.000]  Не совсем 2 трети, но кажется вот отсюда надо скакать.
[10:23.000 --> 10:25.000]  Кажется все-таки так надо делать.
[10:25.000 --> 10:27.000]  Хотя, стоп.
[10:28.000 --> 10:30.000]  Там одна вторая.
[10:30.000 --> 10:32.000]  Там не 2, а одна вторая.
[10:32.000 --> 10:34.000]  Сейчас нет, стоп.
[10:34.000 --> 10:36.000]  Давай сделаем, окей.
[10:36.000 --> 10:37.000]  Так.
[10:37.000 --> 10:39.000]  Что-то кажется начало все подавиться.
[10:39.000 --> 10:41.000]  Давайте, окей, раскроем тут.
[10:41.000 --> 10:43.000]  Так.
[10:43.000 --> 10:44.000]  n-t, n-t.
[10:44.000 --> 10:46.000]  А, тут степени t, естественно.
[10:46.000 --> 10:48.000]  Да, тут степени t надо.
[10:48.000 --> 10:50.000]  Если t равно 0 поставить.
[10:52.000 --> 10:56.000]  Окей, ну n равно 0 мы никогда в жизни сюда подставлять не будем.
[10:57.000 --> 10:58.000]  t, да?
[10:58.000 --> 11:00.000]  Если t равно 0, то должна быть единичка.
[11:00.000 --> 11:01.000]  Окей.
[11:01.000 --> 11:02.000]  Хорошо.
[11:02.000 --> 11:03.000]  Давайте это сделаем.
[11:03.000 --> 11:04.000]  Что тут будет?
[11:04.000 --> 11:07.000]  2 степени t.
[11:08.000 --> 11:09.000]  Тут t.
[11:09.000 --> 11:11.000]  Оно ушло сюда, сократилось.
[11:11.000 --> 11:13.000]  Да нет, какая-то дичь выходит.
[11:13.000 --> 11:16.000]  Да, если t равно 1 поставить, то должно быть 2 трети тогда вырождаться.
[11:16.000 --> 11:18.000]  А у нас по-моему поистине что нет.
[11:21.000 --> 11:22.000]  Кажется я вас обманул.
[11:22.000 --> 11:24.000]  Профов не будет.
[11:25.000 --> 11:26.000]  Вот так.
[11:26.000 --> 11:28.000]  А если на экзамене вы даже соваем?
[11:28.000 --> 11:29.000]  Не, ну окей.
[11:29.000 --> 11:30.000]  Сейчас.
[11:30.000 --> 11:32.000]  Не, ну тут должен быть проф какой-то.
[11:32.000 --> 11:35.000]  Сейчас, я это просто делал как раз перед коллекцией.
[11:35.000 --> 11:37.000]  Прям готовился, жестко выводил.
[11:37.000 --> 11:40.000]  Не, ну хочется просто взять первую половину членов оценить.
[11:40.000 --> 11:42.000]  Как мы делим на n пополам.
[11:43.000 --> 11:45.000]  А на вторую половину плюс-минус забить.
[11:46.000 --> 11:47.000]  Давай сделаем, окей.
[11:47.000 --> 11:48.000]  Теперь что ты хочешь?
[11:48.000 --> 11:51.000]  Ты хочешь взять от i до от n пополам, да?
[11:51.000 --> 11:52.000]  Примерно.
[11:53.000 --> 11:54.000]  Да, n.
[11:54.000 --> 11:55.000]  Что тут?
[11:55.000 --> 11:57.000]  Это оценить снизу мы хотим.
[11:57.000 --> 11:58.000]  Мы хотим снизу оценить.
[11:58.000 --> 12:00.000]  Да, умножить просто на 2 будет.
[12:01.000 --> 12:03.000]  Ну потому что мы делим на n пополам.
[12:03.000 --> 12:04.000]  Ну окей, да.
[12:04.000 --> 12:05.000]  Мы везде, сейчас.
[12:05.000 --> 12:07.000]  Мы везде уменьшили знаменатель.
[12:07.000 --> 12:08.000]  У нас значение увеличилось.
[12:08.000 --> 12:09.000]  Нет, нам надо его наоборот увеличивать.
[12:09.000 --> 12:10.000]  Нет, подожди.
[12:11.000 --> 12:14.000]  Нет, мы хотим снизу оценить количество просто их.
[12:14.000 --> 12:15.000]  А снизу оценить?
[12:17.000 --> 12:18.000]  Или сейчас?
[12:18.000 --> 12:19.000]  Если снизу, то можно...
[12:19.000 --> 12:22.000]  Не, не, не, не, стоп.
[12:22.000 --> 12:23.000]  Мы хотим сверху.
[12:23.000 --> 12:24.000]  Нет, мы хотим сверху оценить.
[12:24.000 --> 12:25.000]  Все-все-все, я убил немножко.
[12:25.000 --> 12:26.000]  Мы сейчас вообще что?
[12:26.000 --> 12:28.000]  А мы профаем обычный рэштурер с фена,
[12:28.000 --> 12:29.000]  что он работает за iLogLog.
[12:31.000 --> 12:32.000]  Вот, ну и типа собственно чем?
[12:32.000 --> 12:34.000]  Мы воспользовались вот такой вот леммой,
[12:34.000 --> 12:36.000]  что типа у нас от n до 2n вот столько вот,
[12:36.000 --> 12:37.000]  не больше, чем столько простых чисел.
[12:38.000 --> 12:39.000]  А дальше мы хотим запрофать,
[12:39.000 --> 12:41.000]  что их в принципе, типа вот на таком префиксе,
[12:42.000 --> 12:45.000]  не больше, чем вот какая-то константа поделить на iLog2n.
[12:47.000 --> 12:48.000]  А зачем мы это делаем?
[12:48.000 --> 12:52.000]  Ну в смысле, это у нас доказывалось не в другом курсе.
[12:52.000 --> 12:53.000]  А, да?
[12:53.000 --> 12:55.000]  Зачем мы это еще раз доказываем?
[12:55.000 --> 12:56.000]  Ну ладно, окей.
[12:57.000 --> 12:58.000]  Не, ну действительно тогда.
[12:58.000 --> 13:00.000]  Не, ну можно довести тут уже что-то.
[13:01.000 --> 13:02.000]  Ну окей.
[13:02.000 --> 13:03.000]  Ну хорошо, я думаю да, можно сослаться.
[13:03.000 --> 13:04.000]  Да, окей, соря.
[13:04.000 --> 13:05.000]  Не, ну просто не знаешь,
[13:05.000 --> 13:06.000]  что вы проходили в этом,
[13:06.000 --> 13:07.000]  как бы большая проблема.
[13:07.000 --> 13:09.000]  Ну я говорю, кажется, мы просто берем
[13:09.000 --> 13:11.000]  деленное пополам у нас умножается на 2,
[13:12.000 --> 13:13.000]  но зато все делится на n.
[13:15.000 --> 13:16.000]  Сейчас.
[13:16.000 --> 13:17.000]  А вот этот достаточек он...
[13:17.000 --> 13:18.000]  Давай минус 1.
[13:20.000 --> 13:21.000]  Да нет, там типа...
[13:21.000 --> 13:23.000]  Нет, тут надо просто двумя этими штуками пользоваться.
[13:23.000 --> 13:24.000]  Типа одна...
[13:24.000 --> 13:25.000]  Двумя указателями?
[13:25.000 --> 13:26.000]  Да, двумя указателями.
[13:26.000 --> 13:27.000]  Двумя тряпками.
[13:27.000 --> 13:28.000]  Метод двух тряпок.
[13:28.000 --> 13:29.000]  Так и запишем.
[13:29.000 --> 13:30.000]  Окей.
[13:30.000 --> 13:31.000]  Ну хорошо, ладно.
[13:31.000 --> 13:33.000]  Там какую-то ценечку вы сделали,
[13:33.000 --> 13:35.000]  после этого у вас...
[13:38.000 --> 13:39.000]  А что не так-то?
[13:39.000 --> 13:40.000]  Конечно, хорошо.
[13:40.000 --> 13:41.000]  Да ладно, что тебе не нравится?
[13:41.000 --> 13:43.000]  Не, ну это правда, что у нас было много тачей.
[13:43.000 --> 13:45.000]  Я говорю, что количество простых до n
[13:45.000 --> 13:46.000]  не больше, чем 4...
[13:47.000 --> 13:48.000]  4...
[13:48.000 --> 13:50.000]  n деликанлоген, так?
[13:50.000 --> 13:51.000]  Не, ну нам...
[13:51.000 --> 13:52.000]  Ну хорошо, давайте просто представим,
[13:52.000 --> 13:53.000]  что мы знаем,
[13:53.000 --> 13:55.000]  какой-то нерайн, особенно на простое катое.
[13:55.000 --> 13:57.000]  Но из этого, да, не следует.
[13:57.000 --> 13:58.000]  Из этого, наверное, не следует.
[13:58.000 --> 13:59.000]  Нет, следует.
[13:59.000 --> 14:00.000]  Можно типа его оценить, типа, снизу,
[14:00.000 --> 14:02.000]  и радоваться жизни как-то.
[14:02.000 --> 14:03.000]  Вопрос.
[14:03.000 --> 14:05.000]  Вот мы не можем очень прям в тупую...
[14:05.000 --> 14:08.000]  типа мы знаем сколько на таком отрезке,
[14:08.000 --> 14:11.000]  потом добавить сколько на вот таком отрезке,
[14:11.000 --> 14:14.000]  который граничит с этим, но...
[14:14.000 --> 14:16.000]  А вот мы только что попытались это сделать,
[14:16.000 --> 14:17.000]  но не получилось немножко.
[14:17.000 --> 14:18.000]  Почти получилось.
[14:18.000 --> 14:20.000]  А нет, а нет, стой.
[14:20.000 --> 14:21.000]  Не, ну хорошо, окей.
[14:21.000 --> 14:22.000]  Ну хорошо, окей.
[14:22.000 --> 14:23.000]  Давай, типа, сравним все-таки, да?
[14:23.000 --> 14:24.000]  Окей.
[14:24.000 --> 14:25.000]  Мне кажется, все бы получилось, действительно.
[14:25.000 --> 14:26.000]  Не, вот этот раз, типа...
[14:26.000 --> 14:29.000]  Типа давайте поскажем, что 2...
[14:29.000 --> 14:31.000]  А, сейчас, нам же вот эту штуку,
[14:31.000 --> 14:32.000]  снизу надо оценивать.
[14:32.000 --> 14:34.000]  Нам надо не вот эту штуку,
[14:34.000 --> 14:35.000]  а вот такую, да, все получится.
[14:35.000 --> 14:38.000]  Не забиваем на логрифы, мы складываем эти карты.
[14:38.000 --> 14:40.000]  Вот, типа у нас что тут получится?
[14:40.000 --> 14:42.000]  Мы просто типа 2 степени n-1,
[14:42.000 --> 14:43.000]  типа оно тут...
[14:43.000 --> 14:45.000]  Получилась 1 вторая, как раз таки,
[14:45.000 --> 14:46.000]  у нас вышло.
[14:46.000 --> 14:48.000]  Тут n-1 на n.
[14:48.000 --> 14:49.000]  Да.
[14:49.000 --> 14:50.000]  Ну и давайте заметим,
[14:50.000 --> 14:52.000]  что при n больше либо равным 5.
[14:52.000 --> 14:53.000]  Так.
[14:53.000 --> 14:54.000]  Да, ну в смысле,
[14:54.000 --> 14:56.000]  ну мы все для больших чисел, да?
[14:56.000 --> 14:57.000]  При достаточно больших n,
[14:57.000 --> 14:58.000]  ну это типа штука,
[14:58.000 --> 15:01.000]  ну, например, меньше, чем 5 четвертых.
[15:02.000 --> 15:03.000]  5 восьмых.
[15:03.000 --> 15:04.000]  А, 5 восьмых.
[15:04.000 --> 15:05.000]  Да.
[15:05.000 --> 15:06.000]  Ну и все, как бы.
[15:06.000 --> 15:07.000]  Мы показали, что этот ряд,
[15:07.000 --> 15:09.000]  типа он у нас, соответственно,
[15:09.000 --> 15:12.000]  убывает как прогрессия геометрическая.
[15:12.000 --> 15:13.000]  Ну тогда он суммируется
[15:13.000 --> 15:14.000]  примерно как старший член,
[15:14.000 --> 15:16.000]  умноженный на какую-то константу.
[15:16.000 --> 15:17.000]  Вот.
[15:17.000 --> 15:18.000]  Ну исходя из этого уже,
[15:18.000 --> 15:19.000]  мы типа знаем, что вот у нас есть
[15:19.000 --> 15:20.000]  какое-то простое число.
[15:20.000 --> 15:22.000]  Давайте дальше без конкретных чисел.
[15:22.000 --> 15:23.000]  Мы асимптотики будем рассматривать,
[15:23.000 --> 15:25.000]  типа посмотрим на ПКТ,
[15:25.000 --> 15:27.000]  на ПКТ число.
[15:27.000 --> 15:29.000]  Пускай, типа оно...
[15:29.000 --> 15:31.000]  Ну и поместим его в какой-то,
[15:31.000 --> 15:32.000]  типа, собственно, блок.
[15:32.000 --> 15:34.000]  Чисел от 0 до n.
[15:34.000 --> 15:35.000]  Вот тут.
[15:35.000 --> 15:37.000]  И сейчас надо сделать аккуратную оценочку.
[15:39.000 --> 15:40.000]  Пускай вот перед ним было n-чисел.
[15:40.000 --> 15:42.000]  То есть тут у нас,
[15:42.000 --> 15:45.000]  соответственно, не меньше, чем...
[15:45.000 --> 15:46.000]  Тут, соответственно, давайте представим,
[15:46.000 --> 15:47.000]  что у нас камень...
[15:47.000 --> 15:48.000]  Хорошо, давайте посмотрим на отрезок,
[15:48.000 --> 15:50.000]  который содержит это число.
[15:50.000 --> 15:51.000]  Тут нам, как уже известно,
[15:51.000 --> 15:54.000]  чисел будет не больше...
[15:54.000 --> 15:56.000]  Соответственно, кау у нас будет не больше
[15:56.000 --> 15:59.000]  либо равно, чем 2 ПКТ.
[15:59.000 --> 16:01.000]  Вы вроде оценку снизу хотели, да?
[16:01.000 --> 16:02.000]  Да.
[16:02.000 --> 16:03.000]  Ну, собственно, сейчас у нас
[16:03.000 --> 16:05.000]  на ПКТ и возникнет оценка.
[16:05.000 --> 16:06.000]  На лог 2 ПКТ.
[16:06.000 --> 16:08.000]  Соответственно, ПКТ...
[16:08.000 --> 16:09.000]  Ну, тут только не двойка будет.
[16:09.000 --> 16:10.000]  Тут будет побольше, на самом деле.
[16:10.000 --> 16:14.000]  Я когда сворачивал, у меня получалась тут шестерка.
[16:14.000 --> 16:15.000]  Вот.
[16:15.000 --> 16:17.000]  Ну, это совершенно не принципиально.
[16:17.000 --> 16:19.000]  Типа, соответственно, ПКТ у нас будет больше
[16:19.000 --> 16:26.000]  либо равно, чем 6, 1 шестая, k, лог 2 ПК.
[16:26.000 --> 16:28.000]  Ну, давайте заметим, что, например,
[16:28.000 --> 16:30.000]  у нас катое простое число точно больше
[16:30.000 --> 16:31.000]  либо равно, чем k.
[16:31.000 --> 16:33.000]  Ну, и получаем, соответственно, оценочку,
[16:33.000 --> 16:37.000]  типа, что оно как минимум вот столько.
[16:37.000 --> 16:39.000]  Окей?
[16:39.000 --> 16:40.000]  Окей.
[16:40.000 --> 16:41.000]  Хорошо, теперь давайте наконец
[16:41.000 --> 16:43.000]  с помощью вот такого вот пререквизита
[16:43.000 --> 16:45.000]  докажем то, что у нас линейный рестор
[16:45.000 --> 16:46.000]  работает за n лог лог n.
[16:46.000 --> 16:50.000]  Соответственно...
[16:50.000 --> 16:51.000]  А как это делается?
[16:51.000 --> 16:54.000]  Ну, тут уже, наверное, без интегралов не обойтись.
[16:54.000 --> 16:55.000]  Что?
[16:55.000 --> 16:56.000]  Как-то мы это в школе нормально делали.
[16:56.000 --> 16:57.000]  Да нет, в смысле, я нормально сделал,
[16:57.000 --> 17:00.000]  просто запутался посередине.
[17:00.000 --> 17:01.000]  Там восстановится.
[17:01.000 --> 17:03.000]  Вот, собственно, за сколько это работает?
[17:03.000 --> 17:05.000]  Ну, соответственно, когда мы просеиваем
[17:05.000 --> 17:07.000]  по первому простому числу, мы, типа,
[17:07.000 --> 17:08.000]  делаем n поделить на P1.
[17:08.000 --> 17:10.000]  Действие, ну, округленное вниз,
[17:10.000 --> 17:11.000]  ну, давайте, типа, это от 1,
[17:11.000 --> 17:12.000]  на него забьем, в принципе.
[17:12.000 --> 17:14.000]  У нас, типа, оно не страшно.
[17:14.000 --> 17:16.000]  Потом, типа, у нас будет n поделить на P2.
[17:16.000 --> 17:17.000]  Ну, и так далее.
[17:17.000 --> 17:20.000]  Мы дошли до какого-то максимально большого,
[17:20.000 --> 17:22.000]  максимально большого простого числа,
[17:22.000 --> 17:23.000]  до которого мы дошли.
[17:23.000 --> 17:24.000]  Ну, пускай такая была.
[17:24.000 --> 17:26.000]  Соответственно, сейчас я k не фиксирую.
[17:26.000 --> 17:28.000]  Типа оно может быть как примерно
[17:28.000 --> 17:31.000]  Pk t равно от корни n примерно,
[17:31.000 --> 17:33.000]  так примерно, и линия может быть.
[17:33.000 --> 17:35.000]  Мы потом, в принципе, посмотрим, что выходит.
[17:35.000 --> 17:37.000]  Вот, соответственно, давайте эту штуку
[17:37.000 --> 17:38.000]  еще сверху оценим.
[17:38.000 --> 17:40.000]  Соответственно, мы знаем, что P1 каждая,
[17:40.000 --> 17:41.000]  оно снизу оценивается вот так.
[17:41.000 --> 17:43.000]  Поэтому получаем вот такую вот забавную
[17:43.000 --> 17:44.000]  сумму.
[17:44.000 --> 17:47.000]  Эта линия, давайте на нее забьем.
[17:47.000 --> 17:48.000]  А, нет, P1 нормально.
[17:48.000 --> 17:49.000]  Ну хорошо.
[17:49.000 --> 17:50.000]  Давайте на P1 все равно забьем.
[17:50.000 --> 17:52.000]  Что-то мне не нравится.
[17:52.000 --> 17:55.000]  И получим, типа, сумму n поделить на...
[17:55.000 --> 17:57.000]  Соответственно, на шестерку мы забиваем.
[17:57.000 --> 17:59.000]  У нас остается, типа, сумма примерно такая.
[17:59.000 --> 18:03.000]  ln2, плюс так далее, плюс nklnk.
[18:03.000 --> 18:04.000]  Вот.
[18:04.000 --> 18:07.000]  Ну и дальше, типа, на семинарах по матанальзу
[18:07.000 --> 18:09.000]  вы, скорее всего, доказывали, что эта штука,
[18:09.000 --> 18:13.000]  как раз таки, выглядит как...
[18:13.000 --> 18:15.000]  Ну, соответственно, n мы можем вынести из этой суммы,
[18:15.000 --> 18:20.000]  а эта штука, она сверху растет как lnlnk.
[18:20.000 --> 18:23.000]  Было же у вас это, да?
[18:23.000 --> 18:24.000]  Окей.
[18:24.000 --> 18:27.000]  Я не верю, что в таком виде было, но...
[18:27.000 --> 18:29.000]  Ну, можно проинтегрировать в любом случае.
[18:29.000 --> 18:30.000]  Хотя нет.
[18:30.000 --> 18:33.000]  Интегрирование-то нормально будет?
[18:33.000 --> 18:34.000]  Ну, хорошо, можно...
[18:34.000 --> 18:35.000]  Что конкретно такое?
[18:35.000 --> 18:37.000]  Ну, доказать, что эта сумма просто,
[18:37.000 --> 18:39.000]  у меня сверху оценивается как...
[18:39.000 --> 18:41.000]  Ну, понятно, n сопрощаем.
[18:41.000 --> 18:43.000]  Да, соответственно, ну, как это можно, типа, доказать?
[18:43.000 --> 18:46.000]  Ну, типа, как бы там сумму монотонно убывающую
[18:46.000 --> 18:49.000]  можно оценить интегралом всегда, вот, нотация.
[18:49.000 --> 18:51.000]  Вот, ну, интеграла считать не очень хорошо,
[18:51.000 --> 18:53.000]  но можно просто попытаться вот это продиференцировать.
[18:53.000 --> 18:56.000]  То есть нам нужно интеграл от 1 делить на x log x.
[18:56.000 --> 18:57.000]  Да.
[18:57.000 --> 18:58.000]  Вот.
[18:58.000 --> 18:59.000]  Ну, мы уже знаем результат заранее,
[18:59.000 --> 19:00.000]  так что можно это просто продиференцировать,
[19:00.000 --> 19:03.000]  убедиться, что тут краски выйдет то, что надо.
[19:03.000 --> 19:05.000]  Ну, а что не так-то?
[19:05.000 --> 19:07.000]  Мне кажется, что все так.
[19:07.000 --> 19:09.000]  Нет, ну, в смысле, давайте продиференцируем,
[19:09.000 --> 19:11.000]  типа, получится как раз, типа, у нас еще
[19:11.000 --> 19:14.000]  1 поделить на lnk умножить на производную внутреннюю функцию.
[19:14.000 --> 19:16.000]  Ну, это, типа, вот, как раз получили то, что надо.
[19:16.000 --> 19:18.000]  Окей.
[19:18.000 --> 19:19.000]  Хорошо.
[19:19.000 --> 19:22.000]  Ну, давайте теперь посмотрим, что будет при различных k.
[19:22.000 --> 19:24.000]  Вот, пускай мы pk-ты выбирали так,
[19:24.000 --> 19:28.000]  что pk-ты у нас доходила до корня n.
[19:28.000 --> 19:31.000]  Ну, тогда k это у нас примерно что?
[19:31.000 --> 19:33.000]  Ну, давайте не раньше фигнем фигли.
[19:33.000 --> 19:34.000]  Еще раз.
[19:34.000 --> 19:36.000]  Почему бы и нет?
[19:36.000 --> 19:39.000]  k это у нас pk-ты.
[19:39.000 --> 19:41.000]  У нас больше, чем 1.6.
[19:41.000 --> 19:43.000]  Ну, ладно, пофиг, напишем.
[19:43.000 --> 19:45.000]  k log2k, да?
[19:45.000 --> 19:47.000]  Ну, давайте точно скажем, что это меньше 1.6k.
[19:47.000 --> 19:49.000]  Ну, понятно, что log2k, типа, ну, можно пренебречь,
[19:49.000 --> 19:52.000]  типа, оно там у нас под логарифом.
[19:52.000 --> 19:54.000]  Да, еще раз, типа, ну, вообще никак не повлияется,
[19:54.000 --> 19:56.000]  скорее всего, то, что мы его убрали.
[19:56.000 --> 20:00.000]  Ну, и как бы все мы получили, что k у нас примерно 6 корня n будет.
[20:00.000 --> 20:02.000]  Ну, типа, оценивать сверху как 6 корня n.
[20:02.000 --> 20:05.000]  Типа, ну, у нас ln корня n, да?
[20:05.000 --> 20:07.000]  А то давайте заметим, что если бы у нас тут просто было n,
[20:07.000 --> 20:10.000]  то у нас бы получилось синтетически то же самое.
[20:10.000 --> 20:11.000]  Вот.
[20:11.000 --> 20:15.000]  И тут даже, типа, рост не в константу, а на константу n.
[20:15.000 --> 20:17.000]  Ну, коэффициент при n прибавляется на константу,
[20:17.000 --> 20:19.000]  потому что, типа, у нас еще раз логарифм берется.
[20:19.000 --> 20:23.000]  То есть оптимитация, как бы, синтетически такая и себе.
[20:23.000 --> 20:24.000]  Вот.
[20:24.000 --> 20:26.000]  Но, тем не менее, про линейный рашто еще можно,
[20:26.000 --> 20:28.000]  ну, про обычный рашто можно еще кое-что сказать.
[20:28.000 --> 20:31.000]  На самом деле, хоть тут оно и работает,
[20:31.000 --> 20:33.000]  но это вот это такое синтетику.
[20:33.000 --> 20:36.000]  Ну, lnk растет очень медленно.
[20:36.000 --> 20:39.000]  И, как бы, это считайте почти бесплатная линия.
[20:39.000 --> 20:42.000]  Ну, и как раз из-за этого возникают всякие эффекты,
[20:42.000 --> 20:47.000]  что константные, ну, как бы, линейные у нас слагаемые,
[20:47.000 --> 20:49.000]  о которых мы в онотации не учитывали,
[20:49.000 --> 20:51.000]  они у нас могут иметь гораздо большее значение,
[20:51.000 --> 20:54.000]  вот, чем вот это слагаемое.
[20:54.000 --> 20:57.000]  Поэтому, соответственно, существует множество алгоритмов,
[20:57.000 --> 20:59.000]  которые делают все возможные оптимизации,
[20:59.000 --> 21:02.000]  упаковывают как-то наш числ от 0 до n,
[21:02.000 --> 21:04.000]  так, чтобы алгоритм работал быстрее, быстрее, быстрее,
[21:04.000 --> 21:07.000]  и там люди добиваются каких-то больших цифр,
[21:07.000 --> 21:10.000]  маленьких, точнее, цифр.
[21:10.000 --> 21:13.000]  Большая производительность влечет маленькое время работы,
[21:13.000 --> 21:14.000]  как говорится.
[21:14.000 --> 21:16.000]  Соответственно, вот.
[21:16.000 --> 21:18.000]  Так что тема достаточно интересная,
[21:18.000 --> 21:20.000]  но мы, естественно, тут занимаемся теоретической фигней,
[21:20.000 --> 21:23.000]  поэтому на этом останавливаться не будем.
[21:23.000 --> 21:27.000]  Называть это теоретической фигней довольно самонадеянно.
[21:28.000 --> 21:31.000]  Нет, в смысле, так практически ты просто берешь
[21:31.000 --> 21:33.000]  и понимаешь, что у тебя оценка...
[21:35.000 --> 21:37.000]  Не, ну, напомнили.
[21:37.000 --> 21:39.000]  Ну, как бы, что, ну, по крайней мере,
[21:39.000 --> 21:41.000]  типа вспомнили, да, школьную программу,
[21:41.000 --> 21:44.000]  как там количество просто чисел оценивать, все такое.
[21:44.000 --> 21:47.000]  Хотя я не знаю, но мы школьный пример явно не доказывали.
[21:47.000 --> 21:50.000]  Мы там квадратное уравнение кое-как умели решать.
[21:51.000 --> 21:53.000]  В среднем по больнице.
[21:58.000 --> 22:00.000]  Не, ну, квадратное уравнение мы, кстати,
[22:00.000 --> 22:02.000]  сегодня тоже будем учиться решать.
[22:02.000 --> 22:03.000]  Чуть позже.
[22:03.000 --> 22:05.000]  Так что будет забавно.
[22:05.000 --> 22:07.000]  Так, ну давайте теперь к чему-то нормальному пройдем,
[22:07.000 --> 22:09.000]  типа за алгоритму, за ОАТН.
[22:12.000 --> 22:14.000]  Линейная Решетограэса Мисра.
[22:17.000 --> 22:19.000]  Я его не уважаю.
[22:21.000 --> 22:23.000]  Не, ну, как бы, алгоритм достаточно постой,
[22:23.000 --> 22:25.000]  типа я не знаю, зачем именовать его, это как не знаю.
[22:25.000 --> 22:29.000]  СНМ называть именем алгоритмом там не знаешь,
[22:29.000 --> 22:31.000]  какой-нибудь Шеховцово, что-то такое.
[22:31.000 --> 22:32.000]  Странная фигня.
[22:32.000 --> 22:33.000]  Ну окей.
[22:33.000 --> 22:35.000]  Как работает линейная Решетограэса?
[22:35.000 --> 22:38.000]  Давайте заметим, что мы когда просевали в обычном Решете числа,
[22:38.000 --> 22:40.000]  мы некоторые числа удаляли по несколько раз.
[22:40.000 --> 22:42.000]  Ну и как раз-таки у нас,
[22:42.000 --> 22:44.000]  из-за того, что у нас простые числа,
[22:44.000 --> 22:46.000]  они не так быстро растут, как хотелось бы,
[22:46.000 --> 22:49.000]  у нас получалось так, что в среднем мы каждое число
[22:49.000 --> 22:53.000]  зачеркивали ЛН на ЛН ОТН раз.
[22:55.000 --> 23:01.000]  Вообще, основываясь на каких-то там простых ретензических действий,
[23:01.000 --> 23:04.000]  можно типа так же доказать, что у нас в принципе количество простых делителей
[23:04.000 --> 23:08.000]  с учетом даже кратности будет тоже равняться ЛН ЛНН.
[23:08.000 --> 23:10.000]  Но это упражнение такое читательное небольшое.
[23:10.000 --> 23:13.000]  Ну, как бы это медленно.
[23:13.000 --> 23:16.000]  Среднее количество делителей у числа?
[23:16.000 --> 23:17.000]  Простых.
[23:17.000 --> 23:18.000]  Или максимально?
[23:18.000 --> 23:21.000]  В среднем от одного до Н.
[23:21.000 --> 23:24.000]  Ну окей, О от Н.
[23:24.000 --> 23:28.000]  Ну, я имею в виду, что если мы берем случайное число,
[23:28.000 --> 23:29.000]  у него примерно столько.
[23:29.000 --> 23:30.000]  Да, да.
[23:30.000 --> 23:32.000]  Простых делителей с учетом кратности.
[23:32.000 --> 23:35.000]  А оценка на максимальное количество простых делителей?
[23:35.000 --> 23:38.000]  Ой, на максимальное количество простых делителей?
[23:38.000 --> 23:39.000]  А смысл?
[23:39.000 --> 23:41.000]  Ну это с учетом кратности?
[23:41.000 --> 23:42.000]  Не-не-не.
[23:42.000 --> 23:44.000]  А, ну это ты про prime-логарифм, да?
[23:44.000 --> 23:45.000]  Ну типа.
[23:45.000 --> 23:48.000]  Ну давайте так, для алгоритмов нам понадобится,
[23:48.000 --> 23:50.000]  что он растет очень медленно.
[23:50.000 --> 23:53.000]  И на практических тестах типа не вращает 40.
[23:53.000 --> 23:56.000]  А на практических местах он растет все еще быстро,
[23:56.000 --> 23:58.000]  потому что там простые очень маленькие.
[23:58.000 --> 24:03.000]  Ну то есть он растет же, по-моему, медленнее, чем алгоритм в любой степени, вроде бы.
[24:05.000 --> 24:07.000]  Ну, типа такой, да.
[24:07.000 --> 24:10.000]  Практически, точка зрения, ну там, не знаю, алгоритм пополам.
[24:10.000 --> 24:12.000]  Ну окей.
[24:12.000 --> 24:14.000]  Не, ну там, да, естественно, все сводится к тому,
[24:14.000 --> 24:16.000]  что вы просто, типа, там, их произведение просто смотрите,
[24:16.000 --> 24:19.000]  вот по этой оценочке, типа KLNK, и смотрите, как она растет,
[24:19.000 --> 24:21.000]  естественно, так же оно будет, типа, расти.
[24:21.000 --> 24:23.000]  Ну окей.
[24:23.000 --> 24:25.000]  Ну я не думаю, что это прям сильно интересно.
[24:25.000 --> 24:27.000]  Там понятно, что LNLN, типа, это какая-то дичь,
[24:27.000 --> 24:29.000]  которая ни на что не влияет.
[24:29.000 --> 24:30.000]  Хорошо.
[24:30.000 --> 24:32.000]  Давайте проверка на постуду для числа от 1 до N.
[24:32.000 --> 24:34.000]  Собственно, проблема линейного расчета в том,
[24:34.000 --> 24:36.000]  что мы зачеркивали числа по много раз некоторые.
[24:36.000 --> 24:38.000]  В среднем LNLNN.
[24:38.000 --> 24:41.000]  Давайте зачеркивать их не более, чем по одному разу.
[24:41.000 --> 24:43.000]  Ну как это делается?
[24:45.000 --> 24:47.000]  Капец, у меня руки чмазые.
[24:47.000 --> 24:49.000]  Ну ладно, пофиг уже.
[24:49.000 --> 24:51.000]  Короче.
[24:51.000 --> 24:53.000]  Как мы будем зачеркивать числа?
[24:53.000 --> 24:55.000]  У нас у каждого числа, на самом деле,
[24:55.000 --> 24:57.000]  оно, на самом деле, как-то раскладывается на простые.
[24:57.000 --> 24:59.000]  Так вот, среди этих простых,
[24:59.000 --> 25:01.000]  однозначно, можно определить
[25:01.000 --> 25:03.000]  минимальный простой делитель.
[25:05.000 --> 25:07.000]  Стой, делитель.
[25:07.000 --> 25:09.000]  Стоит.
[25:09.000 --> 25:11.000]  Стоит.
[25:11.000 --> 25:13.000]  Стоит.
[25:13.000 --> 25:15.000]  Стоит.
[25:15.000 --> 25:17.000]  Стоит, делитель.
[25:19.000 --> 25:21.000]  Как, собственно, этим можно воспользоваться?
[25:21.000 --> 25:23.000]  Ну давайте мы будем бежать по линейному расчету.
[25:23.000 --> 25:27.000]  Опять-таки от чисел от 2 до N.
[25:27.000 --> 25:29.000]  Соответственно, мы будем также
[25:29.000 --> 25:31.000]  хранить массив помеченных, типа,
[25:31.000 --> 25:33.000]  чисел простой или непростой.
[25:33.000 --> 25:35.000]  Давайте теперь его хранить с большей информацией.
[25:35.000 --> 25:37.000]  Давайте для каждого числа хранить минимальный простой делитель.
[25:37.000 --> 25:39.000]  Вектор int.
[25:39.000 --> 25:41.000]  Какой-нибудь minP.
[25:41.000 --> 25:43.000]  Ну и давайте, типа,
[25:43.000 --> 25:45.000]  если у нас простых делителей еще не найдено,
[25:45.000 --> 25:47.000]  мы туда будем записывать нолик.
[25:47.000 --> 25:49.000]  Соответственно,
[25:49.000 --> 25:51.000]  если мы не нашли простой делитель,
[25:51.000 --> 25:55.000]  для какого-то числа i,
[25:55.000 --> 25:57.000]  то это значит, что оно само простое.
[25:57.000 --> 25:59.000]  И давайте его pushback-нем
[25:59.000 --> 26:01.000]  вектора простых чисел p.
[26:03.000 --> 26:05.000]  p, p, p, i.
[26:05.000 --> 26:07.000]  Окей.
[26:07.000 --> 26:09.000]  И установим значение minP тут как равное i.
[26:09.000 --> 26:11.000]  Окей.
[26:13.000 --> 26:15.000]  Как теперь мы будем проставлять числа?
[26:15.000 --> 26:17.000]  Ну давайте
[26:17.000 --> 26:19.000]  попытаемся домложить
[26:19.000 --> 26:21.000]  наше число i
[26:21.000 --> 26:23.000]  на все простые числа,
[26:23.000 --> 26:25.000]  которые меньше, чем minPi.
[26:25.000 --> 26:27.000]  То есть вне зависимости от того,
[26:27.000 --> 26:29.000]  исходно оно было простым или нет.
[26:29.000 --> 26:31.000]  То есть мы пробежимся, условно,
[26:31.000 --> 26:33.000]  по g in P
[26:33.000 --> 26:35.000]  и там если g меньше
[26:35.000 --> 26:37.000]  либо равно, чем minP,
[26:37.000 --> 26:39.000]  то мы, соответственно,
[26:39.000 --> 26:41.000]  пометим в нашем линейном решете
[26:41.000 --> 26:43.000]  число minPi умножить на g.
[26:43.000 --> 26:45.000]  И у него минимальный делитель,
[26:45.000 --> 26:47.000]  соответственно, тоже будет равняться g.
[26:47.000 --> 26:49.000]  Ну иначе сделаем брейк,
[26:49.000 --> 26:51.000]  потому что у нас векторы,
[26:51.000 --> 26:53.000]  они все pushback-и в предке возрастания.
[26:53.000 --> 26:55.000]  Соответственно, если у нас когда-то g
[26:55.000 --> 26:57.000]  и на g превысило
[26:57.000 --> 26:59.000]  требуемое значение,
[26:59.000 --> 27:01.000]  ну давайте тут еще int end
[27:01.000 --> 27:03.000]  i умножить на g меньше
[27:03.000 --> 27:05.000]  либо равно n.
[27:05.000 --> 27:07.000]  Соответственно, да, если у нас
[27:07.000 --> 27:09.000]  оба ограничения делают
[27:09.000 --> 27:11.000]  ограничение g сверху, поэтому если в какой-то момент
[27:11.000 --> 27:13.000]  она нарушилась, то дальше g будет только больше
[27:13.000 --> 27:15.000]  и мы можем сделать, в принципе, брейк.
[27:19.000 --> 27:21.000]  Вот утверждается, что вот этот алгоритм
[27:21.000 --> 27:23.000]  как раз-таки работает за линейное время.
[27:23.000 --> 27:25.000]  Ну как это делается?
[27:25.000 --> 27:27.000]  Как это доказывается?
[27:27.000 --> 27:29.000]  Ну давайте, во-первых,
[27:29.000 --> 27:31.000]  докажем, что
[27:31.000 --> 27:33.000]  любое число оно будет помечено.
[27:33.000 --> 27:35.000]  Ну это будем делать по индукции.
[27:35.000 --> 27:37.000]  Почему бы и нет?
[27:37.000 --> 27:39.000]  Вот у нас есть число n.
[27:39.000 --> 27:41.000]  Все остальные у нас корректно размещены,
[27:41.000 --> 27:43.000]  все простые корректно найдены.
[27:43.000 --> 27:45.000]  У нас может быть два варианта, либо n простое,
[27:45.000 --> 27:47.000]  но тогда мы тут, очевидно,
[27:47.000 --> 27:49.000]  его никак не задели,
[27:49.000 --> 27:51.000]  потому что тут у нас и ножи рассматривались только составные.
[27:51.000 --> 27:53.000]  Хорошо, тогда все будет OK.
[27:53.000 --> 27:55.000]  Мы его добавим в Prime,
[27:55.000 --> 27:57.000]  в MinP правильно установим, все будет хорошо.
[27:57.000 --> 27:59.000]  Напускай n составное тогда.
[27:59.000 --> 28:01.000]  Но опять-таки у него есть
[28:01.000 --> 28:03.000]  минимальный простой делитель.
[28:03.000 --> 28:05.000]  То есть n равняется P
[28:05.000 --> 28:07.000]  на n поделить на P.
[28:07.000 --> 28:09.000]  Но давайте заметим, что когда мы
[28:09.000 --> 28:11.000]  посещали тут
[28:11.000 --> 28:13.000]  в цикле i равно n поделить на P,
[28:13.000 --> 28:15.000]  то у нас, очевидно,
[28:15.000 --> 28:17.000]  выполняется неравенство, что
[28:17.000 --> 28:19.000]  минимальный простой делитель n поделить на P
[28:19.000 --> 28:21.000]  больше либо равен, чем P.
[28:21.000 --> 28:23.000]  Потому что мы тут либо
[28:23.000 --> 28:25.000]  от минимального простого делителя избавились
[28:25.000 --> 28:27.000]  и убили его совсем, либо он остался в какой-то кратности.
[28:27.000 --> 28:29.000]  Может быть два случая.
[28:29.000 --> 28:31.000]  Я думаю, что в этом циклике
[28:31.000 --> 28:33.000]  мы как раз и наши числа корректно пометим.
[28:33.000 --> 28:35.000]  Окей.
[28:35.000 --> 28:37.000]  Вот более того, утверждение более сильное,
[28:37.000 --> 28:39.000]  что каждое число помещено не более чем один раз.
[28:39.000 --> 28:41.000]  Как доказывается, мы могли пометить только
[28:41.000 --> 28:43.000]  по минимальному простому. Конец.
[28:43.000 --> 28:45.000]  Соответственно, вот это и что.
[28:45.000 --> 28:47.000]  Оно уже работает за O от n.
[28:47.000 --> 28:49.000]  Но потребление памяти у него
[28:49.000 --> 28:51.000]  пока что плохое.
[28:51.000 --> 28:53.000]  Оно как бы линейное.
[28:53.000 --> 28:55.000]  И казалось бы O от n и O от n, но на самом деле
[28:55.000 --> 28:57.000]  мы скорее всего будем
[28:57.000 --> 28:59.000]  работать с большими числами, поэтому хочется
[28:59.000 --> 29:01.000]  как-то оптимизировать это все дело.
[29:01.000 --> 29:03.000]  Оптимизировать с самым простым методом
[29:03.000 --> 29:05.000]  можно так. Мы можем, во-первых, MinP
[29:05.000 --> 29:07.000]  хранить не VectorInt.
[29:07.000 --> 29:09.000]  Ну, например, да.
[29:09.000 --> 29:11.000]  Давай первую
[29:11.000 --> 29:13.000]  такую оптимизацию сделаем.
[29:13.000 --> 29:15.000]  Давайте заметим, что нам не нужны
[29:15.000 --> 29:17.000]  VectorIntP, числа больше, чем Coordinate.
[29:19.000 --> 29:21.000]  Внутри?
[29:21.000 --> 29:23.000]  Внутри Vector нам не надо pushback эти числа.
[29:23.000 --> 29:25.000]  Вообще никак.
[29:25.000 --> 29:27.000]  Почему это так происходит?
[29:27.000 --> 29:29.000]  Ну, потому что, когда мы обновляемся,
[29:29.000 --> 29:31.000]  давайте это сделаем.
[29:31.000 --> 29:33.000]  Вот мы обновились тут через g на i.
[29:33.000 --> 29:35.000]  У нас i как бы оно меньше,
[29:35.000 --> 29:37.000]  чем минимальный просто делитель i, значит, соответственно,
[29:37.000 --> 29:39.000]  меньше либо равно, чем i. А эта штука
[29:39.000 --> 29:41.000]  меньше либо равна n. Значит, g нас интересует,
[29:41.000 --> 29:43.000]  только которые меньше либо равны корня n.
[29:43.000 --> 29:45.000]  От первой оптимизации,
[29:45.000 --> 29:47.000]  соответственно, этот вектор у нас был
[29:47.000 --> 29:49.000]  линейного, ну, n поделить на log n размера.
[29:49.000 --> 29:51.000]  А теперь он у нас стал
[29:51.000 --> 29:53.000]  от корня...
[29:53.000 --> 29:55.000]  Почему ты оптимизируешь Vector простых?
[29:55.000 --> 29:57.000]  Потому что
[29:57.000 --> 29:59.000]  с помощью этого я сейчас могу оптимизировать
[29:59.000 --> 30:01.000]  VectorIntP. В плане VectorIntP
[30:01.000 --> 30:03.000]  очевидно, занимает линейную память,
[30:03.000 --> 30:05.000]  а Vector простых линейно делить на log,
[30:05.000 --> 30:07.000]  а очевидно, на него кофе.
[30:07.000 --> 30:09.000]  Ну, я хочу сейчас делать аккуратную оценочку,
[30:09.000 --> 30:11.000]  чтобы в MinP минимально возможный тип уложить.
[30:11.000 --> 30:13.000]  То есть, соответственно,
[30:13.000 --> 30:15.000]  смотри, у нас если простых будет много,
[30:15.000 --> 30:17.000]  ну, например, все-таки даже
[30:17.000 --> 30:19.000]  если n поделить на l, да,
[30:19.000 --> 30:21.000]  мне все равно тут понадобится int, скорее всего.
[30:21.000 --> 30:23.000]  Если я рассматриваю число до миллиарда,
[30:23.000 --> 30:25.000]  мне тут, скорее всего, понадобится int.
[30:25.000 --> 30:27.000]  И я не смогу оптимизировать.
[30:27.000 --> 30:29.000]  Все еще short.
[30:29.000 --> 30:31.000]  Ну, в плане short это 65 тысяч.
[30:31.000 --> 30:33.000]  Сколько это?
[30:33.000 --> 30:35.000]  И в квадрате он больше.
[30:35.000 --> 30:37.000]  А сколько, типа, чисел простых до миллиарда?
[30:37.000 --> 30:39.000]  Примерно. Ты помнишь оценку?
[30:39.000 --> 30:41.000]  Ну, не оценку, а...
[30:41.000 --> 30:43.000]  В миллиарде, видно, log?
[30:43.000 --> 30:45.000]  Ну, нет, это, конечно, хорошо, да,
[30:45.000 --> 30:47.000]  но я разделю, типа, ну, там, не знаю,
[30:47.000 --> 30:49.000]  на ln 10, там,
[30:49.000 --> 30:51.000]  на 9, да, ln 10, типа, оно,
[30:51.000 --> 30:53.000]  что там, ну, примерно двоечек, да, ну, в 20, окей.
[30:53.000 --> 30:55.000]  Но получается 10 восьмой
[30:55.000 --> 30:57.000]  поделить на 2, 5
[30:57.000 --> 30:59.000]  на 10 седьмой, ну, кажется, это в short
[30:59.000 --> 31:01.000]  не укладывается.
[31:01.000 --> 31:03.000]  В плане внутри min p
[31:03.000 --> 31:05.000]  у тебя либо
[31:05.000 --> 31:07.000]  у тебя внутри min p либо само число
[31:07.000 --> 31:09.000]  простое, либо его минимальный простой
[31:09.000 --> 31:11.000]  делитель меньше, чем корень из него.
[31:13.000 --> 31:15.000]  Че?
[31:15.000 --> 31:17.000]  Ну, минимальный простой делитель s,
[31:17.000 --> 31:19.000]  либо само это число, либо оно меньше, чем корень
[31:19.000 --> 31:21.000]  из этого числа.
[31:21.000 --> 31:23.000]  Значит, я могу либо хранить отдельно, что
[31:23.000 --> 31:25.000]  это само число, ноль, например.
[31:25.000 --> 31:27.000]  А, окей, окей, окей, я понял,
[31:27.000 --> 31:29.000]  ты хочешь, соответственно, хранить,
[31:29.000 --> 31:31.000]  тут получается само число p, да?
[31:31.000 --> 31:33.000]  А я хочу сейчас предложить просто индекс
[31:33.000 --> 31:35.000]  простого числа хранить, ничего более.
[31:35.000 --> 31:37.000]  Ну, индекс все еще будет
[31:37.000 --> 31:39.000]  short, потому что...
[31:39.000 --> 31:41.000]  Ну, вот, типа...
[31:41.000 --> 31:43.000]  Ну, он чуть поменьше,
[31:43.000 --> 31:45.000]  да, да, да, но он чуть поменьше будет все-таки.
[31:45.000 --> 31:47.000]  Поэтому хочется...
[31:47.000 --> 31:49.000]  Окей, ну, хорошо,
[31:49.000 --> 31:51.000]  вектор primes, окей,
[31:51.000 --> 31:53.000]  мы как-то соптимизировали, например, да,
[31:53.000 --> 31:55.000]  кто-то говорит, что это не очень хорошая оптимизация,
[31:55.000 --> 31:57.000]  дальше, да, обсуждение провело к тому,
[31:57.000 --> 31:59.000]  что мы можем min p
[31:59.000 --> 32:01.000]  попытаться использовать там
[32:01.000 --> 32:03.000]  не int 32t, а, например, int 16t,
[32:03.000 --> 32:05.000]  например, и
[32:05.000 --> 32:07.000]  хранить там, соответственно, что?
[32:07.000 --> 32:09.000]  Ты в min p хранишь индекс
[32:09.000 --> 32:11.000]  простого? Да.
[32:11.000 --> 32:13.000]  Тогда у тебя просто неверный переход,
[32:13.000 --> 32:15.000]  да, нет, в смысле, вот, смотри,
[32:15.000 --> 32:17.000]  вот тут я храню простое число, но я же говорю
[32:17.000 --> 32:19.000]  устно как-то оптимизировать, я что, буду пояснять
[32:19.000 --> 32:21.000]  каждую строчечку кода, как ее менять, чтобы
[32:21.000 --> 32:23.000]  был нормальный алгоритм?
[32:23.000 --> 32:25.000]  Нет, в смысле, ну, типа, тут можно, да, типа, первый вариант,
[32:25.000 --> 32:27.000]  да, есть за ifat просто, если у нас
[32:27.000 --> 32:29.000]  min p равно i, то ifat это случаем
[32:29.000 --> 32:31.000]  ну, давайте как-то
[32:31.000 --> 32:33.000]  минимальный делитель
[32:33.000 --> 32:35.000]  n, неравный
[32:35.000 --> 32:37.000]  можно ifat, типа, это либо ноликом,
[32:37.000 --> 32:39.000]  как Миша предложил,
[32:39.000 --> 32:41.000]  вот, ну, и тогда, типа,
[32:41.000 --> 32:43.000]  у нас p, он не будет превышать корня n,
[32:43.000 --> 32:45.000]  ну, соответственно, нам, чтобы
[32:45.000 --> 32:47.000]  это число уместить, понадобится не более, чем
[32:47.000 --> 32:49.000]  там 10 четвертый на корень из 10,
[32:49.000 --> 32:51.000]  что влезает в int 16, да?
[32:51.000 --> 32:53.000]  Ладно, я понял, зачем. Вот.
[32:53.000 --> 32:55.000]  Либо мы можем
[32:55.000 --> 32:57.000]  делать то же самое, но при этом
[32:57.000 --> 32:59.000]  заметить, что у нас простые числа, типа,
[32:59.000 --> 33:01.000]  их мало до корня n, и хранить
[33:01.000 --> 33:03.000]  вместо, типа, самого числа его номер.
[33:03.000 --> 33:05.000]  У нас это особо сильно не замедлит код,
[33:05.000 --> 33:07.000]  потому что тут мы, ну, что такое
[33:07.000 --> 33:09.000]  пробежаться по массиву p, да, это на самом деле просто
[33:09.000 --> 33:11.000]  взять индекс какой-то
[33:11.000 --> 33:13.000]  и его перебирать
[33:13.000 --> 33:15.000]  от нуля до размера массива p, да?
[33:15.000 --> 33:17.000]  Соответственно, нам придется просто этот индекс
[33:17.000 --> 33:19.000]  сравнивать с нашим значением n, так что там
[33:19.000 --> 33:21.000]  особо по кишу хуже не станет,
[33:21.000 --> 33:23.000]  но при этом мы сможем
[33:23.000 --> 33:25.000]  все еще для больших n хранить
[33:25.000 --> 33:27.000]  наши значения в шарте.
[33:27.000 --> 33:29.000]  Типа, вторая оптимизация,
[33:29.000 --> 33:31.000]  типа, вместо числа
[33:31.000 --> 33:33.000]  простого, вместо простого делителя
[33:35.000 --> 33:37.000]  хранить
[33:37.000 --> 33:39.000]  номер простого.
[33:39.000 --> 33:41.000]  То есть тогда будет, типа,
[33:41.000 --> 33:43.000]  количество простых до корня n,
[33:43.000 --> 33:45.000]  то есть корня n делить на ладарифе корня n.
[33:45.000 --> 33:47.000]  Да-да-да, тогда у нас максимальное значение будет
[33:47.000 --> 33:49.000]  типа n поделить на lnn, примерно, да?
[33:49.000 --> 33:51.000]  Вот, ну и тут
[33:51.000 --> 33:53.000]  можно еще чутка для больших n
[33:53.000 --> 33:55.000]  попытаться упихать это в n16d.
[33:55.000 --> 33:57.000]  Вот, при этом, типа, не используя никакие там структуры
[33:57.000 --> 33:59.000]  данных жесткие, типа,
[33:59.000 --> 34:01.000]  хранить это все как-то в битах,
[34:01.000 --> 34:03.000]  да, аккуратно выделяя по минимальному количеству.
[34:03.000 --> 34:05.000]  В лонг-лонге 5 штук.
[34:05.000 --> 34:07.000]  Вот. Ну, как-то так.
[34:07.000 --> 34:09.000]  Вот, примерно такой алгоритм,
[34:09.000 --> 34:11.000]  примерно так он оптимизируется.
[34:11.000 --> 34:13.000]  Ну, самое главное, что этот алгоритм
[34:13.000 --> 34:15.000]  линейный. Вообще, типа, есть алгоритмы более
[34:15.000 --> 34:17.000]  сложные. Например, там
[34:17.000 --> 34:19.000]  Риштоаткино, оно вроде работает за
[34:19.000 --> 34:21.000]  n поделить на ln, lnn
[34:21.000 --> 34:23.000]  по их обещания.
[34:23.000 --> 34:25.000]  Делить.
[34:25.000 --> 34:27.000]  Но, типа, соответственно, у них,
[34:27.000 --> 34:29.000]  нет, у них, типа, есть действительно создание массива,
[34:29.000 --> 34:31.000]  да?
[34:31.000 --> 34:33.000]  Как бы они его не учитывают в
[34:33.000 --> 34:35.000]  линейном. Ну, вот, Риштоаткино,
[34:35.000 --> 34:37.000]  представим, что тебе сверху он пришел с единичками,
[34:37.000 --> 34:39.000]  да? А дальше действие, типа, они делают реально вот столько в нем.
[34:39.000 --> 34:41.000]  Он основан
[34:41.000 --> 34:43.000]  на том, что есть некоторые квадратичные
[34:43.000 --> 34:45.000]  формы, и там для простых чисел
[34:45.000 --> 34:47.000]  выполняются какие-то крутые свойства.
[34:47.000 --> 34:49.000]  Мы это
[34:49.000 --> 34:51.000]  делать не будем, потому что
[34:51.000 --> 34:53.000]  я не очень хорошо
[34:53.000 --> 34:55.000]  знаю теорию чисел и квадратичные формы, не очень
[34:55.000 --> 34:57.000]  хорошо изучал.
[34:57.000 --> 34:59.000]  Поэтому тут это все рассказывать не буду,
[34:59.000 --> 35:01.000]  но, соответственно, наука как бы дальше идет,
[35:01.000 --> 35:03.000]  там есть, и все круто.
[35:03.000 --> 35:05.000]  Ну, и давайте наконец
[35:05.000 --> 35:07.000]  последнюю модификацию Риштоа посмотрим.
[35:07.000 --> 35:09.000]  Это Риштоа для больших чисел.
[35:09.000 --> 35:11.000]  Пускай, типа, у нас такая
[35:11.000 --> 35:13.000]  издачка стоит, мы смотрим на,
[35:13.000 --> 35:15.000]  и, кстати, мы его оценим как раз таки.
[35:15.000 --> 35:17.000]  Нам понадобится вот эта оценка, что
[35:17.000 --> 35:19.000]  простых делителей даже с учетом кратности,
[35:19.000 --> 35:21.000]  я это доказывать не буду, сами докажете,
[35:21.000 --> 35:23.000]  оно доказывается так же абсолютно.
[35:23.000 --> 35:25.000]  Простых делителей с учетом кратности
[35:25.000 --> 35:27.000]  у нас
[35:27.000 --> 35:29.000]  в среднем
[35:29.000 --> 35:31.000]  по больнице
[35:31.000 --> 35:33.000]  не больше, чем
[35:33.000 --> 35:35.000]  ln, ln, n.
[35:37.000 --> 35:39.000]  Хорошо, как
[35:39.000 --> 35:41.000]  оно у нас выглядит?
[35:41.000 --> 35:43.000]  Как поставлять издачку? Настя, есть какой-то отрезок
[35:43.000 --> 35:45.000]  чисел l, r?
[35:45.000 --> 35:47.000]  Ну, r, например, не включительно.
[35:47.000 --> 35:49.000]  И мы хотим среди них
[35:49.000 --> 35:51.000]  найти все простые, или
[35:51.000 --> 35:53.000]  найти разложение всех этих чисел на множество.
[35:53.000 --> 35:55.000]  А как можно поступать?
[35:55.000 --> 35:57.000]  Давайте заметим, что если какое-то
[35:57.000 --> 35:59.000]  число отсюда не простое, то у него есть делитель меньше
[35:59.000 --> 36:01.000]  корни r. Давайте первым шагом
[36:01.000 --> 36:03.000]  просто посчитаем простые,
[36:03.000 --> 36:05.000]  а меньше корни
[36:05.000 --> 36:07.000]  из r.
[36:07.000 --> 36:09.000]  Дальше мы хотим
[36:09.000 --> 36:11.000]  просто взять по этим всем
[36:11.000 --> 36:13.000]  простым просеть. Алгоритм максимально глупый,
[36:13.000 --> 36:15.000]  тут не надо ничего себе придумывать,
[36:15.000 --> 36:17.000]  что-то сложно будет и так далее.
[36:17.000 --> 36:19.000]  Мы просто берем очередное
[36:19.000 --> 36:21.000]  простое число,
[36:21.000 --> 36:23.000]  и тут по всем кратным
[36:23.000 --> 36:25.000]  пробегаемся. Но делаем это, естественно,
[36:25.000 --> 36:27.000]  для каждого по отдельности. Берем простое число p,
[36:27.000 --> 36:29.000]  смотрим минимальное, которое на него делится,
[36:29.000 --> 36:31.000]  это можно сделать с помощью формул,
[36:31.000 --> 36:33.000]  типа там остатки, все такое, да, и пробежаться
[36:33.000 --> 36:35.000]  по этой штуке.
[36:35.000 --> 36:37.000]  Вот, оказывается,
[36:37.000 --> 36:39.000]  то есть тут главный вопрос,
[36:39.000 --> 36:41.000]  а за сколько это работает?
[36:41.000 --> 36:43.000]  Это все еще r-l.
[36:43.000 --> 36:45.000]  Это у нас, ну вот оказывается,
[36:45.000 --> 36:47.000]  что это работает у нас за r-l
[36:47.000 --> 36:49.000]  плюс корень r
[36:49.000 --> 36:51.000]  умножить на ln,
[36:51.000 --> 36:53.000]  ln, r.
[36:53.000 --> 36:55.000]  Вот, оказывается, что вот эта оценочка,
[36:55.000 --> 36:57.000]  она работает даже для каких-то больших
[36:57.000 --> 36:59.000]  вот таких отрезков.
[36:59.000 --> 37:01.000]  Наш алгоритм никак
[37:01.000 --> 37:03.000]  не меняется из заздвига.
[37:03.000 --> 37:05.000]  Да, он никак не меняется
[37:05.000 --> 37:07.000]  из заздвига, но тут
[37:07.000 --> 37:09.000]  вопрос
[37:09.000 --> 37:11.000]  в чем?
[37:11.000 --> 37:13.000]  Вопрос в том, почему тут
[37:13.000 --> 37:15.000]  умножить ln, ln, r? Вдруг у нас
[37:15.000 --> 37:17.000]  такая ситуация возникла, что тут простые,
[37:17.000 --> 37:19.000]  мы выбрали такой отрезочек r,
[37:19.000 --> 37:21.000]  что у нас тут простых дофигища,
[37:21.000 --> 37:23.000]  да, простых делителей,
[37:23.000 --> 37:25.000]  ну типа больше, чем в среднем, а такое может быть.
[37:25.000 --> 37:27.000]  Вот оказывается,
[37:27.000 --> 37:29.000]  что такого не происходит.
[37:29.000 --> 37:31.000]  Нам же интересует именно,
[37:31.000 --> 37:33.000]  но в плане
[37:33.000 --> 37:35.000]  тут, соответственно,
[37:35.000 --> 37:37.000]  поэтому тут такая оценочка.
[37:37.000 --> 37:39.000]  Вот там вот так прыгали?
[37:39.000 --> 37:41.000]  Здесь мы прыгаем ровно,
[37:41.000 --> 37:43.000]  только начинаем не соединиться с l.
[37:43.000 --> 37:45.000]  Ну вот,
[37:45.000 --> 37:47.000]  а почему у тебя все равно
[37:47.000 --> 37:49.000]  все так хорошо?
[37:49.000 --> 37:51.000]  Ну вдруг?
[37:51.000 --> 37:53.000]  Единичка от каждого простого.
[37:53.000 --> 37:55.000]  Давайте
[37:55.000 --> 37:57.000]  посчитаем просто, да.
[37:57.000 --> 37:59.000]  Давайте посчитаем, там все будет хорошо.
[37:59.000 --> 38:01.000]  Для каждого простого, по сути, надо просуммировать
[38:01.000 --> 38:03.000]  r поделить на p
[38:03.000 --> 38:05.000]  минус l поделить на p.
[38:05.000 --> 38:07.000]  Давайте просто посчитаем, не будем обсуждать это.
[38:07.000 --> 38:09.000]  Факт простой,
[38:09.000 --> 38:11.000]  но все-таки, мне кажется, надо проделать,
[38:11.000 --> 38:13.000]  он такой аккуратненький, тут хорошо выходит.
[38:13.000 --> 38:15.000]  Я хочу написать, что это
[38:15.000 --> 38:17.000]  r-l поделить на p, плюс
[38:17.000 --> 38:19.000]  да, я так же хочу сделать,
[38:19.000 --> 38:21.000]  именно так это делается.
[38:21.000 --> 38:23.000]  О большой, оно в сумме сколько выйдет?
[38:23.000 --> 38:25.000]  Давайте qr выйдет,
[38:25.000 --> 38:27.000]  фиг с ним.
[38:27.000 --> 38:29.000]  И тут, соответственно, просто
[38:29.000 --> 38:31.000]  r-l поделить на p.
[38:31.000 --> 38:33.000]  И вот у нас
[38:33.000 --> 38:35.000]  дальше сумма по простым p,
[38:35.000 --> 38:37.000]  и дальше мы знаем уже, как она сворачивается.
[38:37.000 --> 38:39.000]  Ну и еще,
[38:39.000 --> 38:41.000]  для того, чтобы посчитать посты на
[38:41.000 --> 38:43.000]  первом отрезке qr,
[38:43.000 --> 38:45.000]  мы воспользовались тоже линейным решетом.
[38:45.000 --> 38:47.000]  И у нас поэтому
[38:47.000 --> 38:49.000]  асимптотика такая, алгоритма
[38:49.000 --> 38:51.000]  такая асимптотика получилась.
[38:51.000 --> 38:53.000]  Следовательно, если там считать
[38:53.000 --> 38:55.000]  в среднем на этом отрезке
[38:55.000 --> 38:57.000]  количество делителей
[38:57.000 --> 38:59.000]  с счетом кратности, но если мы, например,
[38:59.000 --> 39:01.000]  хотим для каждого числа тут посмотреть его факторизацию,
[39:01.000 --> 39:03.000]  то оказывается, что
[39:03.000 --> 39:05.000]  тут оценка времени работает точно такая же,
[39:05.000 --> 39:07.000]  но в чем дело? Но дело в том, что
[39:07.000 --> 39:09.000]  у нас вот эта вся сумма
[39:09.000 --> 39:11.000]  r поделить на p,
[39:11.000 --> 39:13.000]  минус l поделить на p,
[39:15.000 --> 39:17.000]  а тут надо еще добавить k-ты степени,
[39:17.000 --> 39:19.000]  то есть мы прибираем просто число и k-ты степени.
[39:19.000 --> 39:21.000]  Вот оно у нас как раз таки
[39:21.000 --> 39:23.000]  будет равно.
[39:23.000 --> 39:25.000]  Давайте поставим, что у нас
[39:25.000 --> 39:27.000]  p фиксировано, мы прибираем k.
[39:27.000 --> 39:29.000]  Опять-таки у нас от каждого слага
[39:29.000 --> 39:31.000]  будет от 1,
[39:31.000 --> 39:33.000]  то есть давайте
[39:33.000 --> 39:35.000]  сверху асимп просто как 1
[39:35.000 --> 39:37.000]  прибавили, да?
[39:37.000 --> 39:39.000]  r-l поделить на p вкатый
[39:41.000 --> 39:43.000]  плюс 1 поделить
[39:43.000 --> 39:45.000]  на p вкатый.
[39:45.000 --> 39:47.000]  Вот, но каждая такая сумма
[39:47.000 --> 39:49.000]  оценивается сверху не более чем 2,
[39:49.000 --> 39:51.000]  поэтому у нас все еще линия выйдет
[39:51.000 --> 39:53.000]  r-l,
[39:53.000 --> 39:55.000]  а каждая такая сумма
[39:55.000 --> 39:57.000]  в целом, да, она тоже оценивается,
[39:57.000 --> 39:59.000]  но тут надо чуть-чуть постороже это сделать,
[39:59.000 --> 40:01.000]  как p и давайте умножить на 2.
[40:01.000 --> 40:03.000]  Вот уже так оценивается.
[40:03.000 --> 40:05.000]  Ну как-то так.
[40:05.000 --> 40:07.000]  То есть верен еще и более сильный факт,
[40:07.000 --> 40:09.000]  что если мы просто хотим факторизовать,
[40:09.000 --> 40:11.000]  то мы делаем тот же самый алгоритм, он работает
[40:11.000 --> 40:13.000]  на той же самой симптотику.
[40:13.000 --> 40:15.000]  Ну ладно, я понял, в чем могла быть проблема действительно.
[40:15.000 --> 40:17.000]  Вот. Привет!
[40:17.000 --> 40:19.000]  Давно не виделись.
[40:19.000 --> 40:21.000]  Это правда.
[40:21.000 --> 40:23.000]  Вот, ну как-то так.
[40:23.000 --> 40:25.000]  Хорошо.
[40:25.000 --> 40:27.000]  Так, а сколько сейчас времени?
[40:27.000 --> 40:29.000]  Я хочу посмотреть,
[40:29.000 --> 40:31.000]  сколько я на это все потратил времени уже.
[40:31.000 --> 40:33.000]  О, 40 минут мы общаемся на тему
[40:33.000 --> 40:35.000]  линейных решет всяких.
[40:35.000 --> 40:37.000]  Ну ладно.
[40:37.000 --> 40:39.000]  Соответственно,
[40:39.000 --> 40:41.000]  сейчас,
[40:41.000 --> 40:43.000]  что будет примерно происходить, давайте объявлю.
[40:43.000 --> 40:45.000]  Вот мы рассмотрели линейные
[40:45.000 --> 40:47.000]  решето, научились искать простые.
[40:47.000 --> 40:49.000]  Сейчас мне Филипп еще попросил
[40:49.000 --> 40:51.000]  очень настоятельно рассказать вам расширенный алгоритм
[40:51.000 --> 40:53.000]  невклида.
[40:53.000 --> 40:55.000]  Ну я его расскажу
[40:55.000 --> 40:57.000]  для многочленов, почему он работает
[40:57.000 --> 40:59.000]  от nm, нормальная версия алгоритма,
[40:59.000 --> 41:01.000]  которая всегда можно написать.
[41:03.000 --> 41:05.000]  Ну как бы...
[41:09.000 --> 41:11.000]  Как по модуле ты пишешь.
[41:11.000 --> 41:13.000]  Ну короче, можно написать алгоритм невклида.
[41:13.000 --> 41:15.000]  Как ты? Ну да, это правда.
[41:15.000 --> 41:17.000]  Да нет, в смысле, просто алгоритм
[41:17.000 --> 41:19.000]  невклида можно просто реально написать
[41:19.000 --> 41:21.000]  нормальную реализацию, и она будет работать
[41:21.000 --> 41:23.000]  типа быстро, клево, качественно, всегда
[41:23.000 --> 41:25.000]  бесплатно. И будет выдавать маленькие
[41:25.000 --> 41:27.000]  решения краски, а если точнее минимальные.
[41:27.000 --> 41:29.000]  Ты точно не хочешь сменить паркер или что-то?
[41:29.000 --> 41:31.000]  Да, давай сменю, наверное, все-таки.
[41:35.000 --> 41:37.000]  Ой, блин.
[41:39.000 --> 41:41.000]  Ну смотри, просто я там давно
[41:41.000 --> 41:43.000]  не работал с реальными досками.
[41:43.000 --> 41:45.000]  Которые так физически
[41:45.000 --> 41:47.000]  существуют в этом мире.
[41:47.000 --> 41:49.000]  Подожди, а у вас занятие full online?
[41:49.000 --> 41:51.000]  В смысле, так вышки не я занятия веду.
[41:51.000 --> 41:53.000]  Не, в плане
[41:53.000 --> 41:55.000]  теньков поколений.
[41:55.000 --> 41:57.000]  А, теньков поколений? А там электронная доска.
[41:57.000 --> 41:59.000]  Типа там... С этим есть свои
[41:59.000 --> 42:01.000]  проблемы, что приходится как-то ее заставлять
[42:01.000 --> 42:03.000]  зумиться, перемещаться, она думает, что
[42:03.000 --> 42:05.000]  ты хочешь на ней порисовать, но в принципе
[42:05.000 --> 42:07.000]  зато руки не пачкаются.
[42:07.000 --> 42:09.000]  Ну я с детства такой чумазый.
[42:09.000 --> 42:11.000]  У меня нормально. Окей.
[42:15.000 --> 42:17.000]  Ну давайте просто напомню.
[42:17.000 --> 42:19.000]  Нарисую схему, как пишется
[42:19.000 --> 42:21.000]  algorithm.evglide. Это будет коротко, просто напомню.
[42:21.000 --> 42:23.000]  Ну и потом без пруфов покажу, что он
[42:23.000 --> 42:25.000]  работает круто, потому что у вас это было на теории
[42:25.000 --> 42:27.000]  чисел. Зачем мне пафать второй раз?
[42:27.000 --> 42:29.000]  Расширенные algorithm.evglide,
[42:29.000 --> 42:31.000]  разумеется. Ну вот пусканность была по-арабы.
[42:31.000 --> 42:33.000]  Как у нас algorithm.evglide работает?
[42:33.000 --> 42:35.000]  Давайте больше, вычтем меньше.
[42:35.000 --> 42:37.000]  Ну хорошо, давайте это все сэкономим, и сразу
[42:37.000 --> 42:39.000]  его возьмем остаточек. Большего
[42:39.000 --> 42:41.000]  по модулю меньшего.
[42:41.000 --> 42:43.000]  Ну окей, произошло что-то просто замечательное.
[42:43.000 --> 42:45.000]  И мы, если будем дальше делать, получим
[42:45.000 --> 42:47.000]  пару G0.
[42:47.000 --> 42:49.000]  Окей, как отсюда
[42:49.000 --> 42:51.000]  выделить решение AX плюс BY
[42:51.000 --> 42:53.000]  равно AG?
[42:53.000 --> 42:55.000]  Метод очень простой, давайте заметим, что
[42:55.000 --> 42:57.000]  что у нас было на первой итрации? У нас было AB,
[42:57.000 --> 42:59.000]  потом, например, мы вычли A минус
[42:59.000 --> 43:01.000]  B, B, потом мы, например, вот так
[43:01.000 --> 43:03.000]  наоборот вычли, 2B минус
[43:03.000 --> 43:05.000]  A, получили A минус B. Типа, идея основная
[43:05.000 --> 43:07.000]  в том, что мы каждый раз вот будем получать
[43:07.000 --> 43:09.000]  числа вида AX1 плюс
[43:09.000 --> 43:11.000]  BY1,
[43:11.000 --> 43:13.000]  AX2 плюс BY2.
[43:13.000 --> 43:15.000]  Соответственно, мы знаем,
[43:15.000 --> 43:17.000]  что мы куда прибавляем с какими
[43:17.000 --> 43:19.000]  коэффициентами, поэтому можем типа X1, Y1,
[43:19.000 --> 43:21.000]  X2, Y2 в принципе поддерживать.
[43:21.000 --> 43:23.000]  Типа, спускаемся до конца, получили
[43:23.000 --> 43:25.000]  пару AX плюс BY.
[43:27.000 --> 43:29.000]  Что?
[43:29.000 --> 43:31.000]  Так это по коду выглядит очень просто,
[43:31.000 --> 43:33.000]  типа ты пишешь что-то вроде...
[43:33.000 --> 43:35.000]  Ну, я не знаю, я типа его несколько раз писал,
[43:35.000 --> 43:37.000]  но каждый раз ты сидишь, выводишь эти формулки
[43:37.000 --> 43:39.000]  и умираешь. В смысле, тут формул не надо выводить.
[43:39.000 --> 43:41.000]  В этом его прелесть, не надо вообще
[43:41.000 --> 43:43.000]  ничего выводить. Ну, формулы для пересчета
[43:43.000 --> 43:45.000]  вот этих X2, Y2.
[43:45.000 --> 43:47.000]  Так, в смысле, ну давай посмотрим, что за формулы.
[43:47.000 --> 43:49.000]  Типа, вот ты знаешь, типа вот тебе надо
[43:49.000 --> 43:51.000]  из A вычесть BK раз, ну K равно чему,
[43:51.000 --> 43:53.000]  ну A поделить на B, ну well. Ну, давай
[43:53.000 --> 43:55.000]  типа A минус равно B на K.
[43:55.000 --> 43:57.000]  Может дело в том, что я в последний раз делал
[43:57.000 --> 43:59.000]  кто-то 9 класс? Ну, возможно, типа.
[43:59.000 --> 44:01.000]  Y2 на K, Y1 минус равно Y2 на K.
[44:01.000 --> 44:03.000]  Ну, как бы, формулы закончились.
[44:03.000 --> 44:05.000]  Но просто когда ты свопаешь AB,
[44:05.000 --> 44:07.000]  надо не забыть X1, X2 по своей
[44:07.000 --> 44:09.000]  Y1, Y2. Вот.
[44:09.000 --> 44:11.000]  Типа, алгоритм он очень простой,
[44:11.000 --> 44:13.000]  формул никаких выводить не надо.
[44:13.000 --> 44:15.000]  Окей. Ну и более того,
[44:15.000 --> 44:17.000]  теперь у нас доказывается, что у нас в конце
[44:17.000 --> 44:19.000]  решение, вот если мы вот именно так делаем
[44:19.000 --> 44:21.000]  и никак не помодули, у нас получится так, что
[44:21.000 --> 44:23.000]  X у нас будет равняться,
[44:23.000 --> 44:25.000]  он не будет, точнее, превышать
[44:25.000 --> 44:27.000]  B поделить на модуль
[44:27.000 --> 44:29.000]  Nod AB все по модулю,
[44:29.000 --> 44:31.000]  а Y не будет,
[44:31.000 --> 44:33.000]  наверное, наоборот, да, X по модулю
[44:33.000 --> 44:35.000]  не будет превышать, и Y по модуле не будет превышать
[44:35.000 --> 44:37.000]  A поделить на Nod AB.
[44:37.000 --> 44:39.000]  И все еще
[44:39.000 --> 44:41.000]  пополам будет, даже вот
[44:41.000 --> 44:43.000]  так. То есть, вообще
[44:43.000 --> 44:45.000]  строго говоря, такое решение, оно может быть только
[44:45.000 --> 44:47.000]  одно, и
[44:47.000 --> 44:49.000]  как раз именно вот это минимальное
[44:49.000 --> 44:51.000]  в каком-то смысле решение у нас и находит этот алгоритм.
[44:51.000 --> 44:53.000]  Поэтому он такой приятный.
[44:53.000 --> 44:55.000]  Ну и работает, все очевидно, залог.
[44:55.000 --> 44:57.000]  Я объяснять, я думаю, это не буду.
[44:57.000 --> 44:59.000]  Это не то, чтобы прям супер очевидно.
[44:59.000 --> 45:01.000]  Что вот вы к этому приходите?
[45:01.000 --> 45:03.000]  Типа, если мы берем AB модулю B, то она в два раза уменьшается.
[45:03.000 --> 45:05.000]  Ну...
[45:05.000 --> 45:07.000]  Чуть-чуть неприятно, но в целом ладно.
[45:07.000 --> 45:09.000]  Не, ну...
[45:09.000 --> 45:11.000]  Нет, смотри, у вас это было на Теоречисел,
[45:11.000 --> 45:13.000]  вы это писали в школе. Вот. Тут, на самом деле,
[45:13.000 --> 45:15.000]  нитро реально, почему вот такие оценки получаются,
[45:15.000 --> 45:17.000]  тут надо прям жестко изучить последовательность, но вы это делали, да,
[45:17.000 --> 45:19.000]  вы там строили последовательность X1, X2, X3, X4,
[45:19.000 --> 45:21.000]  да, этих остаточков
[45:21.000 --> 45:23.000]  делали. Смотрели, что у вас там одно убывает,
[45:23.000 --> 45:25.000]  там X и Y строго возрастают по модулю.
[45:25.000 --> 45:27.000]  Я не помню, но в целом
[45:27.000 --> 45:29.000]  не обязательно это делать.
[45:29.000 --> 45:31.000]  Ну, в принципе, да, я думаю, типа,
[45:31.000 --> 45:33.000]  как бы, это в принципе один раз то,
[45:33.000 --> 45:35.000]  что надо проделать и забыть про это, в принципе, навсегда.
[45:35.000 --> 45:37.000]  Кстати, мне кажется, это тоже для
[45:37.000 --> 45:39.000]  флипчарта, тут нет нормальных маркеров.
[45:39.000 --> 45:41.000]  Что флипчарт?
[45:41.000 --> 45:43.000]  Это тоже...
[45:43.000 --> 45:45.000]  Тут, кажется, все маркеры они, вот.
[45:45.000 --> 45:47.000]  А там два сторонние?
[45:47.000 --> 45:49.000]  А там дальше мел.
[45:49.000 --> 45:51.000]  А, ну, отлично.
[45:51.000 --> 45:53.000]  Если будет только мел, его тоже
[45:53.000 --> 45:55.000]  принеси.
[45:55.000 --> 45:57.000]  А, Ваня!
[45:57.000 --> 45:59.000]  Саня, это я, да, я забыл.
[45:59.000 --> 46:01.000]  Окей.
[46:01.000 --> 46:03.000]  Ладно, погнали дальше.
[46:03.000 --> 46:05.000]  Хорошо, давайте что-то интересное про алгоритмы
[46:05.000 --> 46:07.000]  в клида, скажу.
[46:07.000 --> 46:09.000]  И вот сейчас как раз-таки подходим к теме
[46:09.000 --> 46:11.000]  ключевой, который я хотел раскрыть сегодня.
[46:11.000 --> 46:13.000]  Это всякие
[46:13.000 --> 46:15.000]  алгоритмы, которые
[46:15.000 --> 46:17.000]  решают многочлены по простому модулю P.
[46:17.000 --> 46:19.000]  Вот это уже плюс-минус
[46:19.000 --> 46:21.000]  Ну, прикольно, будет такой рандомизированный простой алгоритм,
[46:21.000 --> 46:23.000]  который изи написать.
[46:23.000 --> 46:25.000]  Никакие ффтшечки там, что-то подобное не надо,
[46:25.000 --> 46:27.000]  оно все равно вас ничего не ускорит.
[46:27.000 --> 46:29.000]  Мои алгоритмы какие-то базовые
[46:29.000 --> 46:31.000]  совсем вспомнили, то, что Филипп просил.
[46:31.000 --> 46:33.000]  Давайте к чему-то интересному переходить.
[46:33.000 --> 46:35.000]  Тема, на самом деле, тут
[46:35.000 --> 46:37.000]  две будет раскрыта.
[46:37.000 --> 46:39.000]  Это нод многочленов.
[46:39.000 --> 46:41.000]  Расширенный
[46:41.000 --> 46:43.000]  Euclid, по сути.
[46:43.000 --> 46:45.000]  Расширенный Euclid
[46:45.000 --> 46:47.000]  для полиномов за время
[46:47.000 --> 46:49.000]  от DEC P на DEC Q.
[46:51.000 --> 46:53.000]  С помощью него
[46:53.000 --> 46:55.000]  мы получим алгоритм,
[46:55.000 --> 46:57.000]  который
[46:57.000 --> 46:59.000]  ищет квадратный корень из чисел
[46:59.000 --> 47:01.000]  за время от LOC P, рандомизированной.
[47:01.000 --> 47:03.000]  Давайте с QRT
[47:03.000 --> 47:05.000]  за
[47:05.000 --> 47:07.000]  от LOC P.
[47:07.000 --> 47:09.000]  Вот.
[47:09.000 --> 47:11.000]  А уже с помощью этого алгоритма мы
[47:11.000 --> 47:13.000]  научимся
[47:13.000 --> 47:15.000]  решать произвольный полином,
[47:15.000 --> 47:17.000]  находить корни произвольного полинома
[47:17.000 --> 47:19.000]  за время. Давайте сейчас, чтобы не обмануть
[47:19.000 --> 47:21.000]  вас.
[47:21.000 --> 47:23.000]  O от N квадрат LOC P.
[47:27.000 --> 47:29.000]  N это степь многочленов.
[47:29.000 --> 47:31.000]  Что еще?
[47:31.000 --> 47:33.000]  Вот, как-то так.
[47:33.000 --> 47:35.000]  Ну и там дальше поговорим что-то про ток
[47:35.000 --> 47:37.000]  работает с кратностями. Ну там я особо
[47:37.000 --> 47:39.000]  честно не читал статьи по этому поводу.
[47:39.000 --> 47:41.000]  Там какие-то техники плюс-минус наскребываются
[47:41.000 --> 47:43.000]  и нормально, я думаю, хватит.
[47:43.000 --> 47:45.000]  Ну и вторая сейчас
[47:45.000 --> 47:47.000]  лекция, она будет посвящена тому,
[47:47.000 --> 47:49.000]  это вот мое обещание сейчас,
[47:49.000 --> 47:51.000]  что мы как-то поработаем с гауссовыми
[47:51.000 --> 47:53.000]  чистыми и посмотрим пару алгоритмов на них.
[47:55.000 --> 47:57.000]  А сейчас нет.
[47:57.000 --> 47:59.000]  Сейчас гауссовый это совсем бонус у меня был по плану.
[47:59.000 --> 48:01.000]  Ты уверен, что гаусс пишется
[48:01.000 --> 48:03.000]  со S? Я уверен, что
[48:03.000 --> 48:05.000]  мне очень тяжело писать вот этой штукой.
[48:05.000 --> 48:07.000]  Но я вот добавил S-ку.
[48:07.000 --> 48:09.000]  Это S уже?
[48:09.000 --> 48:11.000]  Надеемся. Это короче бонус, типа
[48:11.000 --> 48:13.000]  ну там научимся за отлокп
[48:13.000 --> 48:15.000]  находить вот решение такого уравнения.
[48:17.000 --> 48:19.000]  Для простого P.
[48:19.000 --> 48:21.000]  Ну оно в принципе существует, я думаю, вы это уже доказывали.
[48:21.000 --> 48:23.000]  Вот. Но есть такое
[48:23.000 --> 48:25.000]  доказательство, которое пользуется
[48:25.000 --> 48:27.000]  свойствами гауссовых чисел и позволяет
[48:27.000 --> 48:29.000]  еще построить явный алгоритм для нахождения
[48:29.000 --> 48:31.000]  за время отлокп.
[48:31.000 --> 48:33.000]  Да.
[48:35.000 --> 48:37.000]  Да, вполне и детерминировано можно сделать.
[48:37.000 --> 48:39.000]  Ну естественно, если
[48:39.000 --> 48:41.000]  у нас 4k плюс 1, потому что для 4k плюс 3
[48:41.000 --> 48:43.000]  решения просто нет.
[48:43.000 --> 48:45.000]  Но вообще, этот бонус
[48:45.000 --> 48:47.000]  есть просто время хватит между где-то двумя
[48:47.000 --> 48:49.000]  темами. А вторая тема это
[48:49.000 --> 48:51.000]  префиксная сумма для
[48:51.000 --> 48:53.000]  мультипликативных функций.
[49:05.000 --> 49:07.000]  Ну это, я думаю, те,
[49:07.000 --> 49:09.000]  которые были в тень кофе
[49:09.000 --> 49:11.000]  обучались, они уже знают, что это такое.
[49:11.000 --> 49:13.000]  Как это все считается, наверное, я думаю,
[49:13.000 --> 49:15.000]  не помните. Вот.
[49:15.000 --> 49:17.000]  Но оно позволяет, например, посчитать количество пар
[49:17.000 --> 49:19.000]  взаимопростых чисел от нода n,
[49:19.000 --> 49:21.000]  где 2 числа x и y перебираются
[49:21.000 --> 49:23.000]  от нода n, например, за время
[49:23.000 --> 49:25.000]  n степени 2 третьих.
[49:25.000 --> 49:27.000]  У нас на УКТЧ, да, у информатика
[49:27.000 --> 49:29.000]  что-то такое было. У вас было такое, да?
[49:29.000 --> 49:31.000]  На него всех. Ну окей.
[49:33.000 --> 49:35.000]  Ну значит, посмотрим, типа если
[49:35.000 --> 49:37.000]  будет время, просто выпишу эти формулы, расскажу,
[49:37.000 --> 49:39.000]  плюс-минус базовая теория
[49:39.000 --> 49:41.000]  и все будет ок. Ну хорошо, давайте
[49:41.000 --> 49:43.000]  начнем с многочленчиков,
[49:43.000 --> 49:45.000]  потому что они тут кажутся самыми интересными.
[49:47.000 --> 49:49.000]  И давайте
[49:49.000 --> 49:51.000]  начнем, собственно,
[49:51.000 --> 49:53.000]  с того, что научимся их
[49:53.000 --> 49:55.000]  правильно для них вычислять нод.
[49:55.000 --> 49:57.000]  Собственно,
[49:57.000 --> 49:59.000]  как он вычисляется?
[49:59.000 --> 50:01.000]  Вычисляется он достаточно просто.
[50:01.000 --> 50:03.000]  У нас опять-таки есть два многочлена,
[50:03.000 --> 50:05.000]  ну давайте вот будет P0,
[50:05.000 --> 50:07.000]  так как-то он не пишется,
[50:07.000 --> 50:09.000]  P0 от x будет
[50:09.000 --> 50:11.000]  и будет P1 от x.
[50:11.000 --> 50:13.000]  И мы хотим для них
[50:13.000 --> 50:15.000]  почитать нод. Делается это очень просто,
[50:15.000 --> 50:17.000]  мы просто вводим последовательность, типа P и
[50:17.000 --> 50:19.000]  плюс первая от x равняется
[50:19.000 --> 50:21.000]  P от
[50:21.000 --> 50:23.000]  x mod
[50:23.000 --> 50:25.000]  Pi-1x.
[50:27.000 --> 50:29.000]  Вот, ну проблема в чем? Проблема в том, что мы
[50:29.000 --> 50:31.000]  один раз можем поделить многочлены, но конечно
[50:31.000 --> 50:33.000]  давайте алгоритму с помощью FFT,
[50:33.000 --> 50:35.000]  как это делается, но применять его в данной задачке,
[50:35.000 --> 50:37.000]  как мы убедимся. А давайте посмотрим,
[50:37.000 --> 50:39.000]  что будет с моим упримением тут.
[50:39.000 --> 50:41.000]  Это, кстати, от x сколько будет? N log квадрат?
[50:41.000 --> 50:43.000]  Это N? Нет, деление у нас
[50:43.000 --> 50:45.000]  за N log работает.
[50:45.000 --> 50:47.000]  А суммарный лог делений примерно?
[50:47.000 --> 50:49.000]  Ну, у нас будет не лог делений,
[50:49.000 --> 50:51.000]  у нас логарифма,
[50:51.000 --> 50:53.000]  давайте проговорим,
[50:53.000 --> 50:55.000]  у нас логарифма тут никакого не возникнет
[50:55.000 --> 50:57.000]  от количества действий, у нас с количества действий
[50:57.000 --> 50:59.000]  будет N плюс M.
[50:59.000 --> 51:01.000]  Ну, или минимум N минус,
[51:01.000 --> 51:03.000]  ну, минимум N на 2, либо что-то такое.
[51:03.000 --> 51:05.000]  То есть у нас за каждое,
[51:05.000 --> 51:07.000]  хотя, скорее всего, минимум N
[51:07.000 --> 51:09.000]  плюс 1, да? У нас за каждое действие
[51:09.000 --> 51:11.000]  будет сноситься не более чем одна степень многочлена
[51:11.000 --> 51:13.000]  у каждого.
[51:13.000 --> 51:15.000]  И поэтому
[51:15.000 --> 51:17.000]  у нас оценка будет именно такая.
[51:17.000 --> 51:19.000]  Ну, хорошо.
[51:19.000 --> 51:21.000]  Ну, я думаю, все понимают, почему
[51:21.000 --> 51:23.000]  тогда. P от x, следующий многочлен
[51:23.000 --> 51:25.000]  мы можем только гарантировать, что он
[51:25.000 --> 51:27.000]  может снести, но мы
[51:27.000 --> 51:29.000]  это не можем гарантировать.
[51:29.000 --> 51:31.000]  Вот, и там как раз таки можно легко
[51:31.000 --> 51:33.000]  построить тест, когда это будет работать задолго.
[51:33.000 --> 51:35.000]  Ну, например, когда мы
[51:35.000 --> 51:37.000]  делаем что-то такое,
[51:37.000 --> 51:39.000]  смотрим на какую-то такую последовательность
[51:39.000 --> 51:41.000]  сейчас,
[51:41.000 --> 51:43.000]  x минус 1, например, да?
[51:43.000 --> 51:45.000]  Хотя...
[51:45.000 --> 51:47.000]  Ну, давайте, кстати,
[51:47.000 --> 51:49.000]  подумаем, да?
[51:49.000 --> 51:51.000]  Мы можем просто обратно его остановить. То есть мы
[51:51.000 --> 51:53.000]  ходим, чтобы срезалась не больше, чем одна.
[51:53.000 --> 51:55.000]  Да, да.
[51:55.000 --> 51:57.000]  Да, вроде работает.
[51:57.000 --> 51:59.000]  Можно просто начать уже с 1 0,
[51:59.000 --> 52:01.000]  и тут
[52:01.000 --> 52:03.000]  будет x, тут как сделать,
[52:03.000 --> 52:05.000]  чтобы снесталась одна? Ну, давайте сделаем
[52:05.000 --> 52:07.000]  x квадрат
[52:07.000 --> 52:09.000]  P от x, ну, там плюс
[52:09.000 --> 52:11.000]  x, например, да? И так далее у нас будет
[52:11.000 --> 52:13.000]  все по одной степени сноситься, мы можем построить
[52:13.000 --> 52:15.000]  такую пару многочленов. Хорошо.
[52:15.000 --> 52:17.000]  Ну,
[52:17.000 --> 52:19.000]  то есть у нас будет всего
[52:19.000 --> 52:21.000]  от n действий.
[52:21.000 --> 52:23.000]  Ну, пускай мы будем считать, что
[52:23.000 --> 52:25.000]  н меньше равно m, да?
[52:25.000 --> 52:27.000]  У нас будет от n действий,
[52:27.000 --> 52:29.000]  каждый будет происходить за
[52:29.000 --> 52:31.000]  n лог n. То есть мы получим
[52:31.000 --> 52:33.000]  n квадрат лог n.
[52:33.000 --> 52:35.000]  Ну, это как бы имеет
[52:35.000 --> 52:37.000]  смысл, но вообще-то
[52:37.000 --> 52:39.000]  если мы аккуратно
[52:39.000 --> 52:41.000]  реализуем алгоритм по-дормальному, то я вам
[52:41.000 --> 52:43.000]  обещаю синтетику от
[52:43.000 --> 52:45.000]  n квадрат
[52:45.000 --> 52:47.000]  плюс m
[52:47.000 --> 52:49.000]  лог n,
[52:49.000 --> 52:51.000]  m лог m. Если мы все-таки решили сделать первое
[52:51.000 --> 52:53.000]  деление честно через FFT и
[52:53.000 --> 52:55.000]  от n, если
[52:55.000 --> 52:57.000]  мы просто применили этот алгоритм.
[52:57.000 --> 52:59.000]  То есть, как вы видите,
[52:59.000 --> 53:01.000]  тут FFT нам никак не помогает
[53:01.000 --> 53:03.000]  улучшить синтетику, оно даже портит
[53:03.000 --> 53:05.000]  ситуацию.
[53:05.000 --> 53:07.000]  Кроме вот этого случая, если мы им грамотно воспользуемся.
[53:07.000 --> 53:09.000]  Так что тут надо
[53:09.000 --> 53:11.000]  делить их в тупую.
[53:11.000 --> 53:13.000]  Но давайте посмотрим, как работает деление
[53:13.000 --> 53:15.000]  двух многочленов.
[53:15.000 --> 53:17.000]  Вот у нас есть многочлен, какой-то
[53:17.000 --> 53:19.000]  PIT,
[53:19.000 --> 53:21.000]  у него пускай старшая степень
[53:21.000 --> 53:23.000]  это ANXN, например,
[53:23.000 --> 53:25.000]  и так далее. И вот у нас есть
[53:25.000 --> 53:27.000]  предыдущий многочлен,
[53:27.000 --> 53:29.000]  Pi-1x,
[53:29.000 --> 53:31.000]  у него степень
[53:31.000 --> 53:33.000]  должна быть побольше, ну давайте m,
[53:33.000 --> 53:35.000]  m же больше, чем
[53:35.000 --> 53:37.000]  n, как известно.
[53:37.000 --> 53:39.000]  И собственно, вот мы делим,
[53:39.000 --> 53:41.000]  а нет, вот Pi-1,
[53:41.000 --> 53:43.000]  надо взять по модулю
[53:43.000 --> 53:45.000]  PIT.
[53:45.000 --> 53:47.000]  И собственно, что мы делаем? Мы как бы
[53:47.000 --> 53:49.000]  хотим снести одну степень, и так далее,
[53:49.000 --> 53:51.000]  по алгоритму сносим в деление. И как раз
[53:51.000 --> 53:53.000]  мы снесли вычля,
[53:53.000 --> 53:55.000]  потом записали результат, что вот нам
[53:55.000 --> 53:57.000]  надо к частному приводить x-степенька,
[53:57.000 --> 53:59.000]  ну и так далее.
[53:59.000 --> 54:01.000]  А потом мы в основе
[54:01.000 --> 54:03.000]  массива такие, вот мы уже знаем, что надо умножить
[54:03.000 --> 54:05.000]  a, чтобы его вычесть
[54:05.000 --> 54:07.000]  из b, чтобы получить то, что надо.
[54:07.000 --> 54:09.000]  Давайте заметим, что мы
[54:09.000 --> 54:11.000]  делали ненужные действия,
[54:11.000 --> 54:13.000]  мы могли просто сразу начать сносить
[54:13.000 --> 54:15.000]  степень,
[54:15.000 --> 54:17.000]  прямо вот тут, не выполняя деления отдельно.
[54:17.000 --> 54:19.000]  Вот это вы же понимаете, да?
[54:19.000 --> 54:21.000]  То есть вместо того,
[54:21.000 --> 54:23.000]  чтобы их поделить стандартным алгоритмом,
[54:23.000 --> 54:25.000]  который будет все равно работать точно так же,
[54:25.000 --> 54:27.000]  мы можем просто снести первую степень,
[54:27.000 --> 54:29.000]  вторую, третью, четвертую, и так далее.
[54:29.000 --> 54:31.000]  Ну в плане подобрать вот это вот
[54:31.000 --> 54:33.000]  an-1 на bm,
[54:33.000 --> 54:35.000]  t умножить на x в m,
[54:35.000 --> 54:37.000]  да-да-да,
[54:37.000 --> 54:39.000]  там вычислить bm на an-1,
[54:39.000 --> 54:41.000]  все, вычислить этот коэффициент,
[54:41.000 --> 54:43.000]  вычислить его отсюда сразу.
[54:43.000 --> 54:45.000]  Потом типа, посмотри,
[54:45.000 --> 54:47.000]  дальше на степень, опять его вычесть.
[54:47.000 --> 54:49.000]  То есть это будет то же самое,
[54:49.000 --> 54:51.000]  что делать деление, по сути, у нас никакого проигрыша
[54:51.000 --> 54:53.000]  не будет, просто мы ускорим наш код в два раза,
[54:53.000 --> 54:55.000]  примерно. В два? Да.
[54:55.000 --> 54:57.000]  Почему в два? Потому что как у тебя
[54:57.000 --> 54:59.000]  проработал определение? Ты делал все то же самое,
[54:59.000 --> 55:01.000]  а потом забывал изменения в массиве b.
[55:03.000 --> 55:05.000]  А потом, типа, ты уже, когда знал частный,
[55:05.000 --> 55:07.000]  ты краски его домножал вот на многощельно anxn,
[55:07.000 --> 55:09.000]  если это применял,
[55:09.000 --> 55:11.000]  то есть ты два раза по кругу пускал вот операцию.
[55:13.000 --> 55:15.000]  Потому что, типа, тут работает вот метод сноса степеней.
[55:15.000 --> 55:17.000]  Мы сносим сначала старшую степень,
[55:17.000 --> 55:19.000]  потом следующую, и так далее.
[55:19.000 --> 55:21.000]  Поменяли степень местами,
[55:21.000 --> 55:23.000]  сделали наоборот.
[55:25.000 --> 55:27.000]  Ну и удивительно, за сколько это работает.
[55:27.000 --> 55:29.000]  Вот у нас вначале были степени, например, nm.
[55:31.000 --> 55:33.000]  А дальше мы сносим степень
[55:33.000 --> 55:35.000]  вот тут на единичку.
[55:35.000 --> 55:37.000]  Сколько мы на это действие потратим?
[55:37.000 --> 55:39.000]  Ну, точнее, большую степень, тут побольше у меня получилась n.
[55:39.000 --> 55:41.000]  Вот мы хотим ее на единичку снести,
[55:41.000 --> 55:43.000]  но степень второго многочлена.
[55:43.000 --> 55:45.000]  Да, это одно вычитание.
[55:45.000 --> 55:47.000]  Давайте из этого прямоугольника, по сути, вычислять один столбец.
[55:47.000 --> 55:49.000]  Дальше мы сносим опять ее.
[55:49.000 --> 55:51.000]  Мы опять столько же вот 10 потратим.
[55:51.000 --> 55:53.000]  И давайте заметим, что вот такой геометрический способ
[55:53.000 --> 55:55.000]  нам показывает, что
[55:55.000 --> 55:57.000]  суммарное количество действий, которое мы сделаем,
[55:57.000 --> 55:59.000]  оно будет равняться от nm.
[55:59.000 --> 56:01.000]  Все.
[56:01.000 --> 56:03.000]  Всем понятно, что произошло?
[56:03.000 --> 56:05.000]  Это плюс-минус очевидно.
[56:05.000 --> 56:07.000]  Ну вот еще, типа, забавный результат оказывается,
[56:07.000 --> 56:09.000]  если мы будем параллельно
[56:09.000 --> 56:11.000]  хранить, если мы захотим
[56:11.000 --> 56:13.000]  вдруг сделать...
[56:13.000 --> 56:15.000]  Кстати, вот такую оценку, типа,
[56:15.000 --> 56:17.000]  м логм плюс н квадрат. Вы же тоже понимаете,
[56:17.000 --> 56:19.000]  как она достигается, да?
[56:19.000 --> 56:21.000]  Да, просто...
[56:21.000 --> 56:23.000]  Теперь м меньше.
[56:23.000 --> 56:25.000]  Да, да, именно так.
[56:25.000 --> 56:27.000]  То есть ничего сложного в этом нет.
[56:29.000 --> 56:31.000]  Более того, там, кстати, можно
[56:31.000 --> 56:33.000]  эту оценку еще сильно уточнить, типа, в конце,
[56:33.000 --> 56:35.000]  если мы нод получим...
[56:35.000 --> 56:37.000]  Ну вот, что у нас получится?
[56:37.000 --> 56:39.000]  У нас будет много чаянина какие-то,
[56:39.000 --> 56:41.000]  но пускай у нас нод имеет степень D.
[56:41.000 --> 56:43.000]  Ну, это такое все уточнение,
[56:43.000 --> 56:45.000]  потому что обычно он маленькую степень.
[56:45.000 --> 56:47.000]  Да, он имеет обычно маленькую степень,
[56:47.000 --> 56:49.000]  но сейчас как бы...
[56:49.000 --> 56:51.000]  Сейчас увидим, зачем оно.
[56:51.000 --> 56:53.000]  И тогда у нас как раз последние D квадрат действия,
[56:53.000 --> 56:55.000]  они на самом деле выполнятся за от от D,
[56:55.000 --> 56:57.000]  и можно считать, что они не выполнились.
[56:57.000 --> 56:59.000]  Окей?
[56:59.000 --> 57:01.000]  Да, ну то есть мы сразу все обновим.
[57:01.000 --> 57:03.000]  Да.
[57:03.000 --> 57:05.000]  Вот, ну то есть будет оценка, типа,
[57:05.000 --> 57:07.000]  нодов.
[57:07.000 --> 57:09.000]  Но давайте заметим, что если мы ноды для
[57:09.000 --> 57:11.000]  нескольких многочленов уже выискиваем,
[57:11.000 --> 57:13.000]  то у нас это все, у нас будет
[57:13.000 --> 57:15.000]  телескопическая сумма,
[57:15.000 --> 57:17.000]  и у нас просто будет работать за квадрат
[57:17.000 --> 57:19.000]  степени минимального многочлена
[57:19.000 --> 57:21.000]  плюс суммарная длина остальных
[57:21.000 --> 57:23.000]  на логарифмы соответствующие.
[57:23.000 --> 57:25.000]  Это если мы делаем чс на первое деление,
[57:25.000 --> 57:27.000]  через f of t.
[57:27.000 --> 57:29.000]  Вот, но мне кажется, это вполне неплохо.
[57:31.000 --> 57:33.000]  Окей.
[57:33.000 --> 57:35.000]  Сейчас, почему у нас N квадрат минус D квадрат выходит?
[57:35.000 --> 57:37.000]  Почему?
[57:37.000 --> 57:39.000]  Потому что, ну помнишь, мы, типа, вычитали,
[57:39.000 --> 57:41.000]  а мы сносили степень по одной, да?
[57:41.000 --> 57:43.000]  Ну хорошо, мы снесли 1, 2, 3,
[57:43.000 --> 57:45.000]  вот мы дошли в какой-то момент
[57:45.000 --> 57:47.000]  до того, что у нас есть два многочлена степени D, да?
[57:47.000 --> 57:49.000]  Ну хорошо, да.
[57:49.000 --> 57:51.000]  Вот тогда, типа, мы за D операции
[57:51.000 --> 57:53.000]  снесем полностью один из многочленов в ноль.
[57:53.000 --> 57:55.000]  Потому что у нас D имеет
[57:55.000 --> 57:57.000]  как раз-таки степень их нода.
[57:57.000 --> 57:59.000]  Вот, значит, вот мы эти
[57:59.000 --> 58:01.000]  D действия сделали, ну давайте скажем, что мы их
[58:01.000 --> 58:03.000]  делали раньше, да, где-нибудь.
[58:03.000 --> 58:05.000]  Типа просто забудем про то, что мы их сделали.
[58:05.000 --> 58:07.000]  Типа скажем, что вот они учились
[58:07.000 --> 58:09.000]  где-то раньше, например. Вот.
[58:09.000 --> 58:11.000]  Ну и тогда вот у нас D квадрат действия остались не сделанными.
[58:11.000 --> 58:13.000]  Вот получили какую-то такую сумму.
[58:13.000 --> 58:15.000]  Она сворачивается иногда.
[58:15.000 --> 58:17.000]  Такой забавный факт.
[58:17.000 --> 58:19.000]  Вот.
[58:19.000 --> 58:21.000]  Давайте теперь поговорим про то,
[58:21.000 --> 58:23.000]  как работает расширенная лгм в клид для многочленов.
[58:23.000 --> 58:25.000]  Вот помните, я писал код типа
[58:25.000 --> 58:27.000]  A минус равно B на K,
[58:27.000 --> 58:29.000]  X1 минус равно, короче, пишем то же самое,
[58:29.000 --> 58:31.000]  как работает зафигеть как быстро.
[58:31.000 --> 58:33.000]  То есть это все еще будет упихиваться в отнм.
[58:35.000 --> 58:37.000]  Почему так
[58:37.000 --> 58:39.000]  происходит? Ну давайте
[58:39.000 --> 58:41.000]  я пару слов все-таки скажу. У нас все-таки строилась
[58:41.000 --> 58:43.000]  последность P0, P1, P2,
[58:43.000 --> 58:45.000]  когда мы один на другой делили, да.
[58:45.000 --> 58:47.000]  И так далее, мы в конце дошли до многочленов
[58:47.000 --> 58:49.000]  Pk, который равен ноду
[58:51.000 --> 58:53.000]  и нолику.
[58:53.000 --> 58:55.000]  Вот давайте вот тут при оценке
[58:55.000 --> 58:57.000]  считать, что мы как бы делали деление честно.
[58:57.000 --> 58:59.000]  Нам просто так будет удобней.
[58:59.000 --> 59:01.000]  Ну и тут, соответственно, запишем
[59:01.000 --> 59:03.000]  массивы частных, типа Q и T.
[59:03.000 --> 59:05.000]  Это типа P и T
[59:05.000 --> 59:07.000]  поделить на P и
[59:07.000 --> 59:09.000]  плюс один.
[59:09.000 --> 59:11.000]  Ну, без остатка. Типа, такая запись для
[59:11.000 --> 59:13.000]  многочленов не используется, но, я думаю, вы понимаете,
[59:13.000 --> 59:15.000]  что я имею в виду. Хорошо.
[59:17.000 --> 59:19.000]  И что тут можно понять про эти...
[59:19.000 --> 59:21.000]  И дальше мы строим последность X0,
[59:21.000 --> 59:23.000]  которая равна изначально единичке,
[59:23.000 --> 59:25.000]  и последность Y0, которая изначально равна 0.
[59:25.000 --> 59:27.000]  И вот так вот
[59:27.000 --> 59:29.000]  она у нас начинается, как
[59:29.000 --> 59:31.000]  неожиданно матрица E.
[59:31.000 --> 59:33.000]  Но для многочленов.
[59:33.000 --> 59:35.000]  Собственно, дальше что будет происходить?
[59:35.000 --> 59:37.000]  Мы будем делать эти операции. У нас X...
[59:37.000 --> 59:39.000]  Давайте, например, Y, да.
[59:39.000 --> 59:41.000]  Посмотрим на Y, он тут поудобнее будет.
[59:41.000 --> 59:43.000]  У нас будет Y и плюс 1
[59:43.000 --> 59:45.000]  вычисляться по формуле.
[59:45.000 --> 59:47.000]  Вот из большего вычили
[59:47.000 --> 59:49.000]  меньшее сколько-то раз, да. То есть мы
[59:49.000 --> 59:51.000]  из Y и минус 1
[59:51.000 --> 59:53.000]  вычили
[59:53.000 --> 59:55.000]  Q и T раз,
[59:55.000 --> 59:57.000]  Y и T.
[59:57.000 --> 59:59.000]  Не вру?
[59:59.000 --> 01:00:01.000]  Не X и T.
[01:00:01.000 --> 01:00:03.000]  Y и T.
[01:00:03.000 --> 01:00:05.000]  Это получилось, что они вообще
[01:00:05.000 --> 01:00:07.000]  между собой не коррелируют? Да. Именно так, все верно.
[01:00:07.000 --> 01:00:09.000]  Все так и должно быть.
[01:00:09.000 --> 01:00:11.000]  Давай вспомним, как Algorithm of Clid работал.
[01:00:11.000 --> 01:00:13.000]  Algorithm of Clid у меня
[01:00:13.000 --> 01:00:15.000]  X1, Y1, он как их искал?
[01:00:15.000 --> 01:00:17.000]  Все-таки, значит, надо это
[01:00:17.000 --> 01:00:19.000]  проговорить. Вот у меня была какая-то пара
[01:00:19.000 --> 01:00:21.000]  AX2 плюс BY2, да.
[01:00:21.000 --> 01:00:23.000]  Вот эти как разки X и Y
[01:00:23.000 --> 01:00:25.000]  это как разки члена
[01:00:25.000 --> 01:00:27.000]  вот этой последовательности. На каком-то шаге.
[01:00:27.000 --> 01:00:29.000]  Вот что происходит, когда я отсюда
[01:00:29.000 --> 01:00:31.000]  из первого слага вычитаю второе.
[01:00:31.000 --> 01:00:33.000]  У меня отдельно вычитается X1
[01:00:33.000 --> 01:00:35.000]  и отдельно вычитается Y1.
[01:00:37.000 --> 01:00:39.000]  То есть это действительно все происходит параллельно.
[01:00:39.000 --> 01:00:41.000]  Поэтому тут ошибок никаких нет.
[01:00:41.000 --> 01:00:43.000]  Подожди, а почему
[01:00:43.000 --> 01:00:45.000]  ты именно в таком виде записал?
[01:00:45.000 --> 01:00:47.000]  Почему я именно в таком виде записал? В плане
[01:00:47.000 --> 01:00:49.000]  ты не знаешь пока эти коэффициенты
[01:00:49.000 --> 01:00:51.000]  X1, Y1.
[01:00:51.000 --> 01:00:53.000]  Ну, то есть они есть такие.
[01:00:53.000 --> 01:00:55.000]  Подожди, изначально... Нет, я их всегда
[01:00:55.000 --> 01:00:57.000]  знаю. Я их могу запоминать. У меня изначально
[01:00:57.000 --> 01:00:59.000]  дана пара AB, да.
[01:00:59.000 --> 01:01:01.000]  Но это типа просто A умножить на
[01:01:01.000 --> 01:01:03.000]  единичку плюс B умножить на ноль.
[01:01:03.000 --> 01:01:05.000]  А тут у меня
[01:01:05.000 --> 01:01:07.000]  A умножить на ноль плюс B умножить на единичку.
[01:01:07.000 --> 01:01:09.000]  Я их изначально знаю.
[01:01:09.000 --> 01:01:11.000]  То есть... А ты же их местами должен менять
[01:01:11.000 --> 01:01:13.000]  в какой-то момент? Да, я их могу местами
[01:01:13.000 --> 01:01:15.000]  поменять. Я сделаю swap X1 и swap Y2
[01:01:15.000 --> 01:01:17.000]  swap Y1 и swap Y2, да.
[01:01:17.000 --> 01:01:19.000]  Все будет ок.
[01:01:19.000 --> 01:01:21.000]  Но просто для того, чтобы анализировать
[01:01:21.000 --> 01:01:23.000]  агретминиф клида, неудобно стоять, что мы
[01:01:23.000 --> 01:01:25.000]  меняем их местами, когда-то не меняем.
[01:01:25.000 --> 01:01:27.000]  Удобнее сразу сказать, чтобы у меня была пара P0 P1,
[01:01:27.000 --> 01:01:29.000]  я P0 поделил на P1
[01:01:29.000 --> 01:01:31.000]  с насадком, получил P2.
[01:01:31.000 --> 01:01:33.000]  Дальше у меня есть пара P1 P2.
[01:01:33.000 --> 01:01:35.000]  И дальше я вот так окошком двигаюсь.
[01:01:35.000 --> 01:01:37.000]  Удобнее для анализа делать именно так.
[01:01:37.000 --> 01:01:39.000]  То есть я так и написал сразу, потому что
[01:01:39.000 --> 01:01:41.000]  предполагал, что вы на ТЧ это делали.
[01:01:41.000 --> 01:01:43.000]  Ну, мы это делали на алгебре.
[01:01:43.000 --> 01:01:45.000]  Ну, я не знаю, как у вас эти
[01:01:45.000 --> 01:01:47.000]  предметы называются.
[01:01:47.000 --> 01:01:49.000]  Так что вот.
[01:01:49.000 --> 01:01:51.000]  И дальше мы вот также можем собственно X поддержать
[01:01:51.000 --> 01:01:53.000]  и Y. Они у нас
[01:01:53.000 --> 01:01:55.000]  также будут какие-то две последовательности.
[01:01:55.000 --> 01:01:57.000]  Вот.
[01:01:57.000 --> 01:01:59.000]  Значит, мне надо было нормально
[01:01:59.000 --> 01:02:01.000]  рассказать расширенный агретминиф клида, как Филипп
[01:02:01.000 --> 01:02:03.000]  обратил. Было бы меньше проблем.
[01:02:03.000 --> 01:02:05.000]  Да, все ок.
[01:02:05.000 --> 01:02:07.000]  Ну хорошо, у нас Y вычисляется
[01:02:07.000 --> 01:02:09.000]  по такой формуле. То есть действительно от X не зависит.
[01:02:09.000 --> 01:02:11.000]  Кстати, X по такой же формуле вычисляется.
[01:02:11.000 --> 01:02:13.000]  Там такая же рекурренты возникают.
[01:02:13.000 --> 01:02:15.000]  X1 равно X и
[01:02:15.000 --> 01:02:17.000]  минус 1, минус Q и
[01:02:17.000 --> 01:02:19.000]  X и T.
[01:02:19.000 --> 01:02:21.000]  И в конце мы получаем решение, и все круто.
[01:02:21.000 --> 01:02:23.000]  Давайте что заметим?
[01:02:23.000 --> 01:02:25.000]  Давайте заметим, что у нас
[01:02:25.000 --> 01:02:27.000]  Q может иметь степень...
[01:02:27.000 --> 01:02:29.000]  То есть на самом деле можно вычислять
[01:02:29.000 --> 01:02:31.000]  это как словно матрицу.
[01:02:31.000 --> 01:02:33.000]  Короче говоря, у нас только начальные данные
[01:02:33.000 --> 01:02:35.000]  не разные. Да-да-да.
[01:02:35.000 --> 01:02:37.000]  На самом деле типа агретмиф клида это у нас что-то вроде
[01:02:37.000 --> 01:02:39.000]  данного P0, типа X0, Y0.
[01:02:39.000 --> 01:02:41.000]  Даже если это числа.
[01:02:41.000 --> 01:02:43.000]  P1, X1, Y1.
[01:02:43.000 --> 01:02:45.000]  И мы просто довнажаем эту матрицу
[01:02:45.000 --> 01:02:47.000]  на такие вот штуки какие-то
[01:02:47.000 --> 01:02:49.000]  минус Q, потом опять
[01:02:49.000 --> 01:02:51.000]  минус Q и так далее.
[01:02:51.000 --> 01:02:53.000]  Ку2 и ку1 они могут быть разные.
[01:02:53.000 --> 01:02:55.000]  То есть, по сути, да,
[01:02:55.000 --> 01:02:57.000]  материчный подход к этому анализу тоже применим.
[01:02:57.000 --> 01:02:59.000]  Все ок.
[01:02:59.000 --> 01:03:01.000]  Давайте посмотрим на кушки внимательнее.
[01:03:01.000 --> 01:03:03.000]  В самом начале у нас могла быть подстава.
[01:03:03.000 --> 01:03:05.000]  У нас P0 и P1 могли иметь
[01:03:05.000 --> 01:03:07.000]  равную степень, или вовсе P0 мог иметь
[01:03:07.000 --> 01:03:09.000]  меньше степень, чем P1.
[01:03:09.000 --> 01:03:13.000]  Ну, давайте не менять даже.
[01:03:13.000 --> 01:03:15.000]  Давайте забьем в принципе.
[01:03:15.000 --> 01:03:17.000]  Тогда у нас Q1 мог быть константой.
[01:03:17.000 --> 01:03:19.000]  Верно?
[01:03:19.000 --> 01:03:21.000]  Мог быть константой.
[01:03:21.000 --> 01:03:23.000]  Но давайте заметим, что дальше тогда
[01:03:23.000 --> 01:03:25.000]  у нас никогда константы не бывают.
[01:03:25.000 --> 01:03:27.000]  Потому что степень
[01:03:27.000 --> 01:03:29.000]  соседних многочленов они всегда
[01:03:29.000 --> 01:03:31.000]  различны.
[01:03:31.000 --> 01:03:33.000]  Теперь, что я хочу сказать
[01:03:33.000 --> 01:03:35.000]  про Y, например. Я хочу сказать, что у Y
[01:03:35.000 --> 01:03:37.000]  в степень она строго возрастает.
[01:03:37.000 --> 01:03:39.000]  Тут
[01:03:39.000 --> 01:03:41.000]  как раз вот понравился факт, что
[01:03:41.000 --> 01:03:43.000]  не константа, потому что казалось бы,
[01:03:43.000 --> 01:03:45.000]  могло что-то сократиться,
[01:03:45.000 --> 01:03:47.000]  потому что в начале у нас такая вот ситуация.
[01:03:47.000 --> 01:03:49.000]  Но в принципе мы знаем,
[01:03:49.000 --> 01:03:51.000]  что тут у нас Y и T, он изначально
[01:03:51.000 --> 01:03:53.000]  имел степень больше Y и минус 1,
[01:03:53.000 --> 01:03:55.000]  но его еще умножили на что-то, что имеет какую-то степень.
[01:03:55.000 --> 01:03:57.000]  Значит, Y и плюс 1 имеют еще большую степень.
[01:03:57.000 --> 01:03:59.000]  То есть, дек
[01:03:59.000 --> 01:04:01.000]  так, чтобы было видно,
[01:04:01.000 --> 01:04:03.000]  дек Y и T, он растет.
[01:04:03.000 --> 01:04:05.000]  Про X и T я могу сказать то же самое.
[01:04:05.000 --> 01:04:07.000]  Но тут, видите, какой нюанс.
[01:04:07.000 --> 01:04:09.000]  У нас X0 равна 1, а тут у нас
[01:04:09.000 --> 01:04:11.000]  0 типа степени минуса бесконечности получается.
[01:04:11.000 --> 01:04:13.000]  Ну, хорошо, давайте скажем, что он растет
[01:04:13.000 --> 01:04:15.000]  просто с первого шага, потому что это РОМ,
[01:04:15.000 --> 01:04:17.000]  у него значение всегда будет равно 1.
[01:04:17.000 --> 01:04:19.000]  Всегда.
[01:04:19.000 --> 01:04:21.000]  Сейчас.
[01:04:21.000 --> 01:04:23.000]  Это X и минус 1.
[01:04:23.000 --> 01:04:25.000]  Да, всегда равно 1.
[01:04:25.000 --> 01:04:27.000]  Всегда X2 равняется 1.
[01:04:27.000 --> 01:04:29.000]  А, нет, X2, окей, возможно.
[01:04:29.000 --> 01:04:31.000]  Да, ну и давайте заметим, что тут...
[01:04:31.000 --> 01:04:33.000]  Не-не, ну X2, я про X2 говорю, да?
[01:04:33.000 --> 01:04:35.000]  Вот, давайте заметим, что вот X1
[01:04:35.000 --> 01:04:37.000]  равно 0, X2 равно 1, и дальше у нас все то же самое,
[01:04:37.000 --> 01:04:39.000]  что с Y только со сдвигом 1 пойдет.
[01:04:39.000 --> 01:04:41.000]  Поэтому типа степени
[01:04:41.000 --> 01:04:43.000]  X они тоже возрастают.
[01:04:43.000 --> 01:04:45.000]  Окей.
[01:04:45.000 --> 01:04:47.000]  Вот теперь сейчас нам... Хорошо,
[01:04:47.000 --> 01:04:49.000]  теперь что мы сейчас накопили в нашей копилке знаний?
[01:04:49.000 --> 01:04:51.000]  Мы накопили, что степени Y
[01:04:51.000 --> 01:04:53.000]  растут, ну и степени X
[01:04:53.000 --> 01:04:55.000]  растут.
[01:04:55.000 --> 01:04:57.000]  Причем они строго
[01:04:57.000 --> 01:04:59.000]  возрастают. Это тоже
[01:04:59.000 --> 01:05:01.000]  не мало важно.
[01:05:01.000 --> 01:05:03.000]  Ну с какого момента там со второго шага?
[01:05:03.000 --> 01:05:05.000]  Ну там до второго шага давайте считать, что мы линейные действия
[01:05:05.000 --> 01:05:07.000]  сделали, все пофиг.
[01:05:07.000 --> 01:05:09.000]  Хорошо.
[01:05:09.000 --> 01:05:11.000]  Теперь давайте оценивать.
[01:05:11.000 --> 01:05:13.000]  Сейчас
[01:05:13.000 --> 01:05:15.000]  как раз вот Миша верно все сказал,
[01:05:15.000 --> 01:05:17.000]  нам понадобится матрица.
[01:05:17.000 --> 01:05:19.000]  Нам понадобится рассмотреть матрицу
[01:05:19.000 --> 01:05:21.000]  P0,
[01:05:21.000 --> 01:05:23.000]  P1, X0,
[01:05:23.000 --> 01:05:25.000]  Y0, X1,
[01:05:25.000 --> 01:05:27.000]  Y1.
[01:05:27.000 --> 01:05:29.000]  Что происходило в алгоритме
[01:05:29.000 --> 01:05:31.000]  Euclid? Мы брали
[01:05:31.000 --> 01:05:33.000]  и домножали ее слева на матрицу,
[01:05:33.000 --> 01:05:35.000]  1,1 поменяли местами,
[01:05:35.000 --> 01:05:37.000]  и еще какой-то костюм вычисли,
[01:05:37.000 --> 01:05:39.000]  минус Q какой-то, и тут 0.
[01:05:39.000 --> 01:05:41.000]  Да, у нас сейчас в матрице
[01:05:41.000 --> 01:05:43.000]  многочлены, я думаю, это вас не пугает.
[01:05:43.000 --> 01:05:45.000]  В матрице можно пихать что угодно,
[01:05:45.000 --> 01:05:47.000]  что можно умножать и складывать.
[01:05:47.000 --> 01:05:49.000]  И по плюс-минус нормальным
[01:05:49.000 --> 01:05:51.000]  законам, типа кольца туда можно пихать же.
[01:05:51.000 --> 01:05:53.000]  Окей. И так далее
[01:05:53.000 --> 01:05:55.000]  мы делаем какие-то действия.
[01:05:55.000 --> 01:05:57.000]  0,1, минус Q, например.
[01:05:59.000 --> 01:06:01.000]  Давайте это все
[01:06:01.000 --> 01:06:03.000]  назовем буквкой G.
[01:06:03.000 --> 01:06:05.000]  Вот это у нас алгоритм Euclid,
[01:06:05.000 --> 01:06:07.000]  как он преобразовал наши данные.
[01:06:07.000 --> 01:06:09.000]  Там нетрудно
[01:06:09.000 --> 01:06:11.000]  понять, на самом деле, что тут были 1,1,
[01:06:11.000 --> 01:06:13.000]  0,0, и как раз результирующая
[01:06:13.000 --> 01:06:15.000]  матрица, которая получилась, это будет
[01:06:15.000 --> 01:06:17.000]  алгоритм Euclid G.
[01:06:19.000 --> 01:06:21.000]  Все больше и больше
[01:06:21.000 --> 01:06:23.000]  людей прошло, окей.
[01:06:23.000 --> 01:06:25.000]  Давайте посмотрим повнимательнее, что происходит.
[01:06:25.000 --> 01:06:27.000]  У нас вот эта матрица,
[01:06:27.000 --> 01:06:29.000]  она у нас имеет детерминат минус 1.
[01:06:29.000 --> 01:06:31.000]  И все матрицы
[01:06:31.000 --> 01:06:33.000]  тут имеют детерминат минус 1.
[01:06:33.000 --> 01:06:35.000]  Ну тогда DEDG, он типа
[01:06:35.000 --> 01:06:37.000]  минус 1 степени K.
[01:06:39.000 --> 01:06:41.000]  И что получается?
[01:06:41.000 --> 01:06:43.000]  Получается, что у нас в конце мы получим какое-то действие
[01:06:43.000 --> 01:06:45.000]  типа pk,
[01:06:45.000 --> 01:06:47.000]  pk плюс первое.
[01:06:47.000 --> 01:06:49.000]  Ну давайте я только тут индекса не буду
[01:06:49.000 --> 01:06:51.000]  писать, и так понятно.
[01:06:51.000 --> 01:06:53.000]  x и y.
[01:06:53.000 --> 01:06:55.000]  Ну ладно, все-таки напишу.
[01:06:57.000 --> 01:06:59.000]  Вот, и мы хотим понять, что получится.
[01:06:59.000 --> 01:07:01.000]  Но мы уже какими-то рассуждениями
[01:07:01.000 --> 01:07:03.000]  поняли, что x1,
[01:07:03.000 --> 01:07:05.000]  что соответственно у нас xk и yk
[01:07:05.000 --> 01:07:07.000]  будут удовлетворять,
[01:07:07.000 --> 01:07:09.000]  будут как раз решением уравнения
[01:07:09.000 --> 01:07:11.000]  p и x
[01:07:11.000 --> 01:07:13.000]  плюс q и y равно g, да,
[01:07:13.000 --> 01:07:15.000]  в гцдх.
[01:07:15.000 --> 01:07:17.000]  Но вот хочется что-то понять про остальные.
[01:07:17.000 --> 01:07:19.000]  Про xk плюс первое
[01:07:19.000 --> 01:07:21.000]  и про yk плюс первое.
[01:07:21.000 --> 01:07:23.000]  Ну тут надо понять, что у нас
[01:07:23.000 --> 01:07:25.000]  будет в p-шках. Вот тут в p у нас
[01:07:25.000 --> 01:07:27.000]  будет гцд, верно?
[01:07:27.000 --> 01:07:29.000]  А тут будет 0.
[01:07:29.000 --> 01:07:31.000]  Потому что мы закончили
[01:07:31.000 --> 01:07:33.000]  агритм Евклида вот тут.
[01:07:33.000 --> 01:07:35.000]  Он заканчивается именно так. Но давайте тогда
[01:07:35.000 --> 01:07:37.000]  посмотрим. Представим, что мы пальчиком
[01:07:37.000 --> 01:07:39.000]  закрыли последний столбик.
[01:07:39.000 --> 01:07:41.000]  Но тогда у нас просто квадратный матриц
[01:07:41.000 --> 01:07:43.000]  преумножается, верно? А это значит, что
[01:07:43.000 --> 01:07:45.000]  детерминат можно вычислить у конечного.
[01:07:45.000 --> 01:07:47.000]  То есть у нас будет
[01:07:47.000 --> 01:07:49.000]  гцд многочленов
[01:07:49.000 --> 01:07:51.000]  p0 и p1.
[01:07:51.000 --> 01:07:53.000]  Потом будет 0.
[01:07:53.000 --> 01:07:55.000]  Потом будет xkt
[01:07:55.000 --> 01:07:57.000]  y
[01:07:57.000 --> 01:07:59.000]  xk плюс первое.
[01:07:59.000 --> 01:08:01.000]  И вот оно будет как раз таки равняться
[01:08:01.000 --> 01:08:03.000]  изначальному
[01:08:03.000 --> 01:08:05.000]  детерминату. А вот он чему
[01:08:05.000 --> 01:08:07.000]  равнялся? У нас x0 был равен 1,
[01:08:07.000 --> 01:08:09.000]  а x1 равен 0, да?
[01:08:09.000 --> 01:08:11.000]  Соответственно, это просто было
[01:08:11.000 --> 01:08:13.000]  минус p1.
[01:08:13.000 --> 01:08:15.000]  OK?
[01:08:15.000 --> 01:08:17.000]  Минус p1 умножить на
[01:08:17.000 --> 01:08:19.000]  минус 1 степени k. Получается как раз
[01:08:19.000 --> 01:08:21.000]  минус 1 степени k плюс 1
[01:08:21.000 --> 01:08:23.000]  на...
[01:08:23.000 --> 01:08:25.000]  Чего там p1, да?
[01:08:25.000 --> 01:08:27.000]  OK?
[01:08:27.000 --> 01:08:29.000]  Тут можно сделать
[01:08:29.000 --> 01:08:31.000]  шпоньк.
[01:08:31.000 --> 01:08:33.000]  У нас детерминат вычислить, потому что
[01:08:33.000 --> 01:08:35.000]  мы уже взрослые дяденьки, мы умеем его вычитать
[01:08:35.000 --> 01:08:37.000]  устно.
[01:08:37.000 --> 01:08:39.000]  Отсюда можно заключить, что краски понятно,
[01:08:39.000 --> 01:08:41.000]  что будет на месте x.
[01:08:41.000 --> 01:08:43.000]  Это будет конкретно наш исходный чел
[01:08:43.000 --> 01:08:45.000]  p1 поделить на их ГСД.
[01:08:45.000 --> 01:08:47.000]  Ну и понятно, какая будет степень, да?
[01:08:47.000 --> 01:08:49.000]  Она, понятное дело, степень этой фигни
[01:08:49.000 --> 01:08:51.000]  не будет превышать n.
[01:08:51.000 --> 01:08:53.000]  А m, видимо.
[01:08:53.000 --> 01:08:55.000]  Так, второй рассматриваем, да?
[01:08:55.000 --> 01:08:57.000]  Это все понятно?
[01:08:57.000 --> 01:08:59.000]  Ну, sorry, что там так получается писать.
[01:08:59.000 --> 01:09:01.000]  Я не умею пользоваться мелками.
[01:09:01.000 --> 01:09:03.000]  Я в детстве мало рисовал на асфальте.
[01:09:03.000 --> 01:09:05.000]  Вот.
[01:09:05.000 --> 01:09:07.000]  Как-то так. Это OK?
[01:09:07.000 --> 01:09:09.000]  Точно?
[01:09:09.000 --> 01:09:11.000]  OK. Ну давайте заметим, что yк плюс 1
[01:09:11.000 --> 01:09:13.000]  мы можем сделать такую же оценку и заключить,
[01:09:13.000 --> 01:09:15.000]  что его степень не будет превышать n.
[01:09:19.000 --> 01:09:21.000]  Ну, на самом деле, n минус
[01:09:21.000 --> 01:09:23.000]  там их нод. Ну, давайте на это забьем сейчас, да?
[01:09:23.000 --> 01:09:25.000]  Это нас не особо интересует.
[01:09:25.000 --> 01:09:27.000]  Ну, давайте тогда это оценим точно так же, как мы
[01:09:27.000 --> 01:09:29.000]  оценивали вопрос с самым алгоритмом вклида.
[01:09:29.000 --> 01:09:31.000]  Мы доказали, что остатков степень не больше, чем...
[01:09:31.000 --> 01:09:33.000]  Стри, мы доказали во первых...
[01:09:33.000 --> 01:09:35.000]  Стри.
[01:09:35.000 --> 01:09:37.000]  Не-не-не, стоп, подожди.
[01:09:37.000 --> 01:09:39.000]  Мы смотрим на расширное алгоритм вклида.
[01:09:39.000 --> 01:09:41.000]  Стри, мы доказали...
[01:09:41.000 --> 01:09:43.000]  Мы доказали сначала, что
[01:09:43.000 --> 01:09:45.000]  степень иксов они растут.
[01:09:45.000 --> 01:09:47.000]  Ну, начиная с двойки, да? Мы доказали, что
[01:09:47.000 --> 01:09:49.000]  степень иксов растут.
[01:09:49.000 --> 01:09:51.000]  И мы доказали, что в конце они будут не очень большие.
[01:09:53.000 --> 01:09:55.000]  Самый последний элемент
[01:09:55.000 --> 01:09:57.000]  последовательности, да?
[01:09:57.000 --> 01:09:59.000]  Ну, это значит, что когда мы...
[01:09:59.000 --> 01:10:01.000]  Ну, я хочу сейчас, по сути, применить тот же метод,
[01:10:01.000 --> 01:10:03.000]  что мы использовали для оценки,
[01:10:03.000 --> 01:10:05.000]  вот сколько тот действие было, да?
[01:10:05.000 --> 01:10:07.000]  И сказать, что у меня будет отnм действие
[01:10:07.000 --> 01:10:09.000]  примерно.
[01:10:09.000 --> 01:10:11.000]  Вот.
[01:10:11.000 --> 01:10:13.000]  Почему это так работало?
[01:10:13.000 --> 01:10:15.000]  Ну, давайте опять это проделаем.
[01:10:15.000 --> 01:10:17.000]  Вначале мы сделали какие-то действия,
[01:10:17.000 --> 01:10:19.000]  был вот этот квадратик, да?
[01:10:19.000 --> 01:10:21.000]  Вот тут пускай будет степень икса,
[01:10:21.000 --> 01:10:23.000]  иксы этого очередного, тут степень дек
[01:10:23.000 --> 01:10:25.000]  у этого для вычислений.
[01:10:25.000 --> 01:10:27.000]  Ну, в конце у нас степень икса
[01:10:27.000 --> 01:10:29.000]  не будет превышать n, степень у не будет
[01:10:29.000 --> 01:10:31.000]  превышать m.
[01:10:31.000 --> 01:10:33.000]  Ну, я думаю, тут все очевидно, да?
[01:10:33.000 --> 01:10:35.000]  Типа просто у нас
[01:10:35.000 --> 01:10:37.000]  степень повышается,
[01:10:37.000 --> 01:10:39.000]  причем, как я тут раньше писал, тут это стерлось,
[01:10:39.000 --> 01:10:41.000]  у нас она повышается ровно
[01:10:41.000 --> 01:10:43.000]  на ту степень q,
[01:10:43.000 --> 01:10:45.000]  на которую мы домножаем.
[01:10:45.000 --> 01:10:47.000]  Соответственно, если у нас, типа, степень
[01:10:47.000 --> 01:10:49.000]  вот тут увеличилась на k какой-то,
[01:10:49.000 --> 01:10:51.000]  то мы ровно столько действий,
[01:10:51.000 --> 01:10:53.000]  типа k на текущую степень другого накачали,
[01:10:53.000 --> 01:10:55.000]  мы и потратим.
[01:10:55.000 --> 01:10:57.000]  Сейчас, и...
[01:10:57.000 --> 01:10:59.000]  Сейчас, стоп.
[01:10:59.000 --> 01:11:01.000]  Сейчас, стоп, да.
[01:11:01.000 --> 01:11:03.000]  Самовод через себя, да.
[01:11:03.000 --> 01:11:05.000]  Да.
[01:11:05.000 --> 01:11:07.000]  Кажется, ценка неверная.
[01:11:11.000 --> 01:11:13.000]  Не, ну, бывает забавности, бывает.
[01:11:13.000 --> 01:11:15.000]  Сейчас, да, прикинем.
[01:11:15.000 --> 01:11:17.000]  Там должно выходить отnm, точно,
[01:11:17.000 --> 01:11:19.000]  возможно, должно.
[01:11:19.000 --> 01:11:21.000]  В начале лекции все было OK.
[01:11:23.000 --> 01:11:25.000]  Там просто вы меня запутали,
[01:11:25.000 --> 01:11:27.000]  все было нормально.
[01:11:27.000 --> 01:11:29.000]  Да-да-да, именно так.
[01:11:29.000 --> 01:11:31.000]  Так, у нас иксы растут,
[01:11:31.000 --> 01:11:33.000]  мы их пересчитываем вот
[01:11:33.000 --> 01:11:35.000]  по такой формуле,
[01:11:35.000 --> 01:11:37.000]  которой тут нету.
[01:11:37.000 --> 01:11:39.000]  Надо что-то из этого вывести.
[01:11:41.000 --> 01:11:43.000]  Денис, ты умеешь профайчить, что это робот за отнm?
[01:11:43.000 --> 01:11:45.000]  Я не знаю, что это еще за мою формулю.
[01:11:45.000 --> 01:11:47.000]  А я расширенный алгоритм не вклит для многочленов.
[01:11:49.000 --> 01:11:51.000]  Ладно.
[01:11:51.000 --> 01:11:53.000]  Я никогда не видел, как это делать.
[01:11:55.000 --> 01:11:57.000]  Вот жаль, что ты опоздал.
[01:11:57.000 --> 01:11:59.000]  Очень жаль.
[01:11:59.000 --> 01:12:01.000]  Там формула,
[01:12:01.000 --> 01:12:03.000]  ты знаешь,
[01:12:03.000 --> 01:12:05.000]  что у нас
[01:12:05.000 --> 01:12:07.000]  существует решение для
[01:12:07.000 --> 01:12:09.000]  чисел просто, да?
[01:12:09.000 --> 01:12:11.000]  Для чисел существует решение
[01:12:11.000 --> 01:12:13.000]  x плюс y на 1, если ab взаимно просты.
[01:12:15.000 --> 01:12:17.000]  Вот очень жесткий факт, да?
[01:12:17.000 --> 01:12:19.000]  Очень жесткий факт, да?
[01:12:19.000 --> 01:12:21.000]  Как его можно запрофайть?
[01:12:21.000 --> 01:12:23.000]  Один из пруфов сказать, что у нас всегда
[01:12:23.000 --> 01:12:25.000]  первый-второй член нода,
[01:12:25.000 --> 01:12:27.000]  он будет линейные суммы i, b.
[01:12:27.000 --> 01:12:29.000]  Очень жестко.
[01:12:29.000 --> 01:12:31.000]  Давай вместо того, что писаете
[01:12:31.000 --> 01:12:33.000]  алгоритм x, просто будем поддерживать
[01:12:33.000 --> 01:12:35.000]  эти штуки.
[01:12:35.000 --> 01:12:37.000]  Утверждение это работать быстро.
[01:12:37.000 --> 01:12:39.000]  Для чисел.
[01:12:39.000 --> 01:12:41.000]  Утверждение №2 это быстро работать для многочленов.
[01:12:41.000 --> 01:12:43.000]  Ну вот все.
[01:12:43.000 --> 01:12:45.000]  Теперь ты знаешь алгоритм.
[01:12:45.000 --> 01:12:47.000]  Вот теперь докажи его.
[01:12:47.000 --> 01:12:49.000]  Ну ладно.
[01:12:49.000 --> 01:12:51.000]  Давайте тогда не буду заходить
[01:12:51.000 --> 01:12:53.000]  подалеко. Давайте скажу, что это работает за i квадрат
[01:12:53.000 --> 01:12:55.000]  плюс m квадрат. Как вам идея?
[01:12:55.000 --> 01:12:57.000]  Ну короче, за квадрат мы как-то научились
[01:12:57.000 --> 01:12:59.000]  находить эти коэффициенты, все круто.
[01:12:59.000 --> 01:13:01.000]  Ну за квадрат оценка очевидна.
[01:13:01.000 --> 01:13:03.000]  Повысили степень
[01:13:03.000 --> 01:13:05.000]  на, ну, типа на
[01:13:05.000 --> 01:13:07.000]  единичку. Знаете, мы потратили
[01:13:07.000 --> 01:13:09.000]  не больше мани-действий, потому что суммарная степень
[01:13:09.000 --> 01:13:11.000]  она будет не больше мани.
[01:13:11.000 --> 01:13:13.000]  Ну все. То есть эта оценка как раз
[01:13:13.000 --> 01:13:15.000]  плюс-минус очевидная.
[01:13:15.000 --> 01:13:17.000]  Ну просто обычный алгоритм
[01:13:17.000 --> 01:13:19.000]  Ивклида без этой фигни он работает за o отnm,
[01:13:19.000 --> 01:13:21.000]  что тоже приятно.
[01:13:21.000 --> 01:13:23.000]  И как раз-таки вот нам этот первый алгоритм не понадобится,
[01:13:23.000 --> 01:13:25.000]  потому что я честно говоря не помню у него применений никаких
[01:13:25.000 --> 01:13:27.000]  примерно. То есть он такой
[01:13:27.000 --> 01:13:29.000]  just for fun. А второй теперь сейчас
[01:13:29.000 --> 01:13:31.000]  мы будем использовать активно.
[01:13:31.000 --> 01:13:33.000]  А могу стирать, да?
[01:13:33.000 --> 01:13:35.000]  Давайте я сотру вот тут.
[01:13:35.000 --> 01:13:37.000]  Мне кажется тут совсем что-то бесполезное написано просто.
[01:13:39.000 --> 01:13:41.000]  Да и тут типа
[01:13:41.000 --> 01:13:43.000]  эти все обещания, как бы они
[01:13:43.000 --> 01:13:45.000]  все еще обещания, так что
[01:13:45.000 --> 01:13:47.000]  они ничего не значат.
[01:13:49.000 --> 01:13:51.000]  Хорошо.
[01:13:51.000 --> 01:13:53.000]  И давайте вот это сотру,
[01:13:53.000 --> 01:13:55.000]  потому что
[01:13:55.000 --> 01:13:57.000]  Что?
[01:13:57.000 --> 01:13:59.000]  О, Сашка кстати пара
[01:13:59.000 --> 01:14:01.000]  прошла.
[01:14:01.000 --> 01:14:03.000]  Давайте да, перерывчик сделаем.
[01:14:03.000 --> 01:14:05.000]  Там и так был перерыв, потому что я
[01:14:05.000 --> 01:14:07.000]  уходил руки мыть из маркерной доски.
[01:14:07.000 --> 01:14:09.000]  Будем честно. Давайте типа 10 минуток.
[01:14:09.000 --> 01:14:11.000]  Почему руки в геомикста?
[01:14:11.000 --> 01:14:13.000]  Да, руки в геомикста.
[01:14:13.000 --> 01:14:15.000]  Окей.
[01:14:15.000 --> 01:14:17.000]  Давайте
[01:14:17.000 --> 01:14:19.000]  короче 15 минут заберу.
[01:14:19.000 --> 01:14:21.000]  И потом перерыв.
[01:14:21.000 --> 01:14:23.000]  У нас же типа все равно тут нет жесткого расписания, так что
[01:14:23.000 --> 01:14:25.000]  пофиг.
[01:14:25.000 --> 01:14:27.000]  Если ты спросишь как вести занятия Филиппа, то
[01:14:27.000 --> 01:14:29.000]  Если все заберешь.
[01:14:29.000 --> 01:14:31.000]  Да нет смысла, ну пофиг.
[01:14:31.000 --> 01:14:33.000]  Иногда короче у
[01:14:33.000 --> 01:14:35.000]  прошлых курсов была так что
[01:14:35.000 --> 01:14:37.000]  пары рукавичей шли не подряд, то есть
[01:14:37.000 --> 01:14:39.000]  типа есть пара, окно, пара, пара.
[01:14:39.000 --> 01:14:41.000]  Короче окно он забирал.
[01:14:41.000 --> 01:14:43.000]  Ужас.
[01:14:43.000 --> 01:14:45.000]  Ну хорошо.
[01:14:45.000 --> 01:14:47.000]  Давайте разберем
[01:14:47.000 --> 01:14:49.000]  Рандомизированный алгоритм решения уравнений
[01:14:49.000 --> 01:14:51.000]  x квадрат равно a по модулю p.
[01:14:51.000 --> 01:14:53.000]  Вот вообще
[01:14:53.000 --> 01:14:55.000]  это вроде бы основному потоку рассказывали алгоритм
[01:14:55.000 --> 01:14:57.000]  уже, но он во-первых был какой-то мерзкий, противный.
[01:14:57.000 --> 01:14:59.000]  Его сложно запомнить.
[01:14:59.000 --> 01:15:01.000]  Какому основному потоку? 3?
[01:15:01.000 --> 01:15:03.000]  Да. Откуда ты знаешь?
[01:15:03.000 --> 01:15:05.000]  Короче я решил
[01:15:05.000 --> 01:15:07.000]  Стой. Мне Филипп сказал
[01:15:07.000 --> 01:15:09.000]  что будет запись. Я решил погуглить
[01:15:09.000 --> 01:15:11.000]  какие есть записи и нашел у основного потока теорию чисел.
[01:15:11.000 --> 01:15:13.000]  Ну там
[01:15:13.000 --> 01:15:15.000]  еще за полтора часа примерно рассказал
[01:15:15.000 --> 01:15:17.000]  3 алгоритма и нормально было.
[01:15:17.000 --> 01:15:19.000]  То есть это уже больше, чем я рассказал на самом деле.
[01:15:19.000 --> 01:15:21.000]  Но сейчас будет первый алгоритм нормальный.
[01:15:21.000 --> 01:15:23.000]  То есть как решать такие уравнения?
[01:15:23.000 --> 01:15:25.000]  Есть действительно
[01:15:25.000 --> 01:15:27.000]  подход, который рассказывали в основном по токену.
[01:15:27.000 --> 01:15:29.000]  Он не сильно обобщается на случай
[01:15:29.000 --> 01:15:31.000]  больших полиномов, поэтому мы его разбирать не будем.
[01:15:31.000 --> 01:15:33.000]  Мы разберем другой подход.
[01:15:33.000 --> 01:15:35.000]  Ну во-первых
[01:15:35.000 --> 01:15:37.000]  про квадратичные вычеты
[01:15:37.000 --> 01:15:39.000]  вы все теорию знаете?
[01:15:39.000 --> 01:15:41.000]  Понятное дело, что мы в самом начале проверяем, что a равно 0.
[01:15:41.000 --> 01:15:43.000]  Если там равно, то
[01:15:43.000 --> 01:15:45.000]  честно 1 корень. Если
[01:15:45.000 --> 01:15:47.000]  a в степени p-1 пополам равно
[01:15:47.000 --> 01:15:49.000]  минус 1, мы выводим, что корни нет.
[01:15:49.000 --> 01:15:51.000]  Вот у нас остался случай, когда
[01:15:51.000 --> 01:15:53.000]  корни все-таки есть, их равно 2, они различные.
[01:15:53.000 --> 01:15:55.000]  Окей.
[01:15:55.000 --> 01:15:57.000]  Ну пускай тогда это корни x и y.
[01:15:57.000 --> 01:15:59.000]  То есть x квадрат равняется y квадрат
[01:15:59.000 --> 01:16:01.000]  равняется a.
[01:16:01.000 --> 01:16:03.000]  Да, там это просто те же числа, но разные по знаку.
[01:16:07.000 --> 01:16:09.000]  1 и минус 1.
[01:16:09.000 --> 01:16:11.000]  Что, нет, они всегда различные, все нормально.
[01:16:11.000 --> 01:16:13.000]  Ну потому что если x подходит,
[01:16:13.000 --> 01:16:15.000]  то x минус x подходит. Это жесткий факт.
[01:16:15.000 --> 01:16:17.000]  2x равно 0.
[01:16:17.000 --> 01:16:19.000]  Окей.
[01:16:19.000 --> 01:16:21.000]  И типа в чем идея?
[01:16:21.000 --> 01:16:23.000]  Идея в том,
[01:16:23.000 --> 01:16:25.000]  чтобы их как-то научиться разделять.
[01:16:25.000 --> 01:16:27.000]  Но
[01:16:27.000 --> 01:16:29.000]  блин, мне кажется, я поспешил,
[01:16:29.000 --> 01:16:31.000]  ну ладно, пофиг. Давайте заденем это.
[01:16:31.000 --> 01:16:33.000]  Короче, их как-то хочется разделить.
[01:16:33.000 --> 01:16:35.000]  Но вот очень круто было бы,
[01:16:35.000 --> 01:16:37.000]  если бы одно из этих чисел...
[01:16:37.000 --> 01:16:39.000]  Что?
[01:16:39.000 --> 01:16:41.000]  Вот очень круто было бы, если бы
[01:16:41.000 --> 01:16:43.000]  эти числа, ну, одно удовлетворяло
[01:16:43.000 --> 01:16:45.000]  кому-то свойство, другое нет.
[01:16:45.000 --> 01:16:47.000]  Ну, например, одно было бы квадратичным
[01:16:47.000 --> 01:16:49.000]  вычетом, а другое не было бы.
[01:16:49.000 --> 01:16:51.000]  Вот давайте представим на секунду,
[01:16:51.000 --> 01:16:53.000]  что такая штука произошла,
[01:16:53.000 --> 01:16:55.000]  и попытаемся тогда
[01:16:55.000 --> 01:16:57.000]  решить задачку.
[01:16:57.000 --> 01:16:59.000]  Ну, как предлагается делать?
[01:16:59.000 --> 01:17:01.000]  Вот у нас есть x квадрат
[01:17:01.000 --> 01:17:03.000]  минус a многочлен.
[01:17:03.000 --> 01:17:05.000]  Теперь вот мы хотим...
[01:17:05.000 --> 01:17:07.000]  Что сделать?
[01:17:07.000 --> 01:17:09.000]  Мы хотим найти нод с каким-то многочленом,
[01:17:09.000 --> 01:17:11.000]  например, который будет содержать все квадратичные вычета.
[01:17:11.000 --> 01:17:13.000]  То есть это будет многочлен xp минус 1 пополам
[01:17:13.000 --> 01:17:15.000]  минус 1, да?
[01:17:15.000 --> 01:17:17.000]  Вот утверждение, если мы найдем
[01:17:17.000 --> 01:17:19.000]  нод этих многочленов, то мы вытащим
[01:17:19.000 --> 01:17:21.000]  один из корней.
[01:17:23.000 --> 01:17:25.000]  Вот, это в случае, если x, например...
[01:17:25.000 --> 01:17:27.000]  Если они действительно разные.
[01:17:27.000 --> 01:17:29.000]  Да, если один квадратичный вычет, а другой нет.
[01:17:29.000 --> 01:17:31.000]  Это понятно?
[01:17:31.000 --> 01:17:33.000]  Давайте обсудим, как это делается.
[01:17:33.000 --> 01:17:35.000]  Ну, делается это очень просто, да? То есть тут казалась бы
[01:17:35.000 --> 01:17:37.000]  степень большая, но давайте воспользуемся алгоритмом
[01:17:37.000 --> 01:17:39.000]  бинарного здания степень по модулю.
[01:17:39.000 --> 01:17:41.000]  И просто сразу xp минус 1 пополам
[01:17:41.000 --> 01:17:43.000]  вычислим по модулю.
[01:17:43.000 --> 01:17:45.000]  Это у нас затратит от логп действия, а потом будет от 1
[01:17:45.000 --> 01:17:47.000]  какой-то фигни.
[01:17:47.000 --> 01:17:49.000]  Ну, круто.
[01:17:49.000 --> 01:17:51.000]  Вот мы за от логп
[01:17:51.000 --> 01:17:53.000]  научились что-то делать.
[01:17:53.000 --> 01:17:55.000]  И, кстати, эта штука, она
[01:17:55.000 --> 01:17:57.000]  вообще-то выполняется.
[01:17:57.000 --> 01:17:59.000]  Иногда для некоторых простых p, всегда.
[01:17:59.000 --> 01:18:01.000]  Например, если у нас
[01:18:01.000 --> 01:18:03.000]  p имеет
[01:18:03.000 --> 01:18:05.000]  вид 4k плюс 1,
[01:18:05.000 --> 01:18:07.000]  4k плюс 3, наверное, да?
[01:18:07.000 --> 01:18:09.000]  Подожди.
[01:18:09.000 --> 01:18:11.000]  А на что бинарное возведение степени?
[01:18:11.000 --> 01:18:13.000]  А чтобы x с степенью p минус 1 пополам
[01:18:13.000 --> 01:18:15.000]  вычислить сразу по модуле x квадрат минуса.
[01:18:15.000 --> 01:18:17.000]  Я хочу вычислить этот нод, мне достаточно
[01:18:17.000 --> 01:18:19.000]  это вычислить по модулю первого.
[01:18:19.000 --> 01:18:21.000]  Вот, например, 4k плюс 3, да?
[01:18:21.000 --> 01:18:23.000]  Вот если я не ошибаюсь, тут минус 1
[01:18:23.000 --> 01:18:25.000]  не квадратичный вычет.
[01:18:25.000 --> 01:18:27.000]  Ну, там где-то квадратичный, а где-то нет.
[01:18:27.000 --> 01:18:29.000]  Сев, я него?
[01:18:29.000 --> 01:18:31.000]  Точно? Минус 1 это 3 по модулю
[01:18:31.000 --> 01:18:33.000]  не квадратичный вычет.
[01:18:33.000 --> 01:18:35.000]  2 не квадратичный вычет
[01:18:35.000 --> 01:18:37.000]  по модуле 3, все нормально.
[01:18:37.000 --> 01:18:39.000]  Окей, вот, и, например,
[01:18:39.000 --> 01:18:41.000]  так как мы знаем, что у нас корония, типа это y
[01:18:41.000 --> 01:18:43.000]  минус y, например, да?
[01:18:43.000 --> 01:18:45.000]  То мы можем сразу эту штуку применить
[01:18:45.000 --> 01:18:47.000]  и без каких-либо рандомов решить уравнение
[01:18:47.000 --> 01:18:49.000]  по вот такому модулю.
[01:18:49.000 --> 01:18:51.000]  Но вообще, там есть решение проще, можно еще раз формулу сделать,
[01:18:51.000 --> 01:18:53.000]  но это так, просто по приколу.
[01:18:53.000 --> 01:18:55.000]  Вилл, ну давайте что-то делать.
[01:18:55.000 --> 01:18:57.000]  А иначе минус один квадратичный вычет.
[01:18:57.000 --> 01:18:59.000]  Да, и там они одинаковые.
[01:18:59.000 --> 01:19:01.000]  Можно спастись, оказывается.
[01:19:01.000 --> 01:19:03.000]  Изначально были корни.
[01:19:03.000 --> 01:19:05.000]  Давайте ровнение, давайте a t его назову,
[01:19:05.000 --> 01:19:07.000]  чтобы многочлен был нормальный.
[01:19:07.000 --> 01:19:09.000]  Хорошо, подскажем, был t квадрат минуса.
[01:19:09.000 --> 01:19:11.000]  В чем идея?
[01:19:11.000 --> 01:19:13.000]  Давайте прибавим случайное,
[01:19:13.000 --> 01:19:15.000]  давайте выберем случайное число дельта какое-то
[01:19:15.000 --> 01:19:17.000]  и рассмотрим многочлен
[01:19:17.000 --> 01:19:19.000]  t а плюс дельта в квадрате
[01:19:19.000 --> 01:19:21.000]  минус a.
[01:19:21.000 --> 01:19:23.000]  Давайте t минус дельта в квадрате.
[01:19:23.000 --> 01:19:25.000]  Вот, тогда
[01:19:25.000 --> 01:19:27.000]  в чем мем? У нас оба корни увеличились
[01:19:27.000 --> 01:19:29.000]  на дельте, верно?
[01:19:29.000 --> 01:19:31.000]  То есть если мы уже решим это
[01:19:31.000 --> 01:19:33.000]  уравнение, то мы решим исходное.
[01:19:33.000 --> 01:19:35.000]  Вот, ну вот оказывается, что если мы такую
[01:19:35.000 --> 01:19:37.000]  штуку сделаем, то
[01:19:37.000 --> 01:19:39.000]  у нас корни будут
[01:19:39.000 --> 01:19:41.000]  иметь различный
[01:19:41.000 --> 01:19:43.000]  как называется,
[01:19:43.000 --> 01:19:45.000]  они будут один квадратичным вычетом,
[01:19:45.000 --> 01:19:47.000]  а другой нет, с вероятностью не менее одной второй.
[01:19:47.000 --> 01:19:49.000]  Почему это так?
[01:19:49.000 --> 01:19:51.000]  Давайте вот посмотрим.
[01:19:51.000 --> 01:19:53.000]  Сейчас, если p равно 4k плюс 1,
[01:19:53.000 --> 01:19:55.000]  то минус 1 это будет квадратичный вычет.
[01:19:55.000 --> 01:19:57.000]  Да тут вообще p не важно.
[01:19:57.000 --> 01:19:59.000]  Неважно какой p.
[01:19:59.000 --> 01:20:01.000]  Сейчас пройдем это рассуждение. Смотрите, вот пускай у нас сначально
[01:20:01.000 --> 01:20:03.000]  были альфа и бета, да?
[01:20:03.000 --> 01:20:05.000]  Они не равны друг другу, мы это уже знаем.
[01:20:05.000 --> 01:20:07.000]  Но давайте скажем, что альфа минус бета равняется
[01:20:07.000 --> 01:20:09.000]  какой-то константе лямбда.
[01:20:09.000 --> 01:20:11.000]  Тогда
[01:20:11.000 --> 01:20:13.000]  какие мы можем получить пары
[01:20:13.000 --> 01:20:15.000]  корней, если мы
[01:20:15.000 --> 01:20:17.000]  прибавим случайную константу дельта?
[01:20:17.000 --> 01:20:19.000]  Он утверждается, что это просто пары, типа
[01:20:19.000 --> 01:20:21.000]  какое-то случайное число х и х плюс лямбда,
[01:20:21.000 --> 01:20:23.000]  верно?
[01:20:23.000 --> 01:20:25.000]  Давайте запишем уравнение, что они
[01:20:25.000 --> 01:20:27.000]  одновременно
[01:20:27.000 --> 01:20:29.000]  либо являются квадратичным вычетом, либо не являются.
[01:20:29.000 --> 01:20:31.000]  Но утверждение это уравнение выглядит вот так.
[01:20:31.000 --> 01:20:33.000]  p минус 1 пополам степени
[01:20:33.000 --> 01:20:35.000]  х плюс лямбда, p минус 1 пополам
[01:20:35.000 --> 01:20:37.000]  равняется нулю.
[01:20:37.000 --> 01:20:39.000]  Вот.
[01:20:39.000 --> 01:20:41.000]  Давайте сюда поставим, например, нолик.
[01:20:41.000 --> 01:20:43.000]  Мы убедились, что наш
[01:20:43.000 --> 01:20:45.000]  многочлен не константно равен нулю.
[01:20:45.000 --> 01:20:47.000]  Но тогда он имеет степени
[01:20:47.000 --> 01:20:49.000]  больше, чем p минус 1 пополам.
[01:20:49.000 --> 01:20:51.000]  А значит у нас
[01:20:51.000 --> 01:20:53.000]  не более, чем p минус 1 пополам решения
[01:20:53.000 --> 01:20:55.000]  этой штуки.
[01:20:55.000 --> 01:20:57.000]  То есть не более, чем
[01:20:57.000 --> 01:20:59.000]  в p минус 1 пополам случаях,
[01:20:59.000 --> 01:21:01.000]  у нас они
[01:21:01.000 --> 01:21:03.000]  одновременно либо являются квадратичными вычетами,
[01:21:03.000 --> 01:21:05.000]  либо одновременно не являются.
[01:21:05.000 --> 01:21:07.000]  А значит p минус 1 пополам
[01:21:07.000 --> 01:21:09.000]  короче звучит, типа
[01:21:09.000 --> 01:21:11.000]  как что-то вроде
[01:21:11.000 --> 01:21:13.000]  с вероятностью
[01:21:13.000 --> 01:21:15.000]  p плюс 1 пополам,
[01:21:15.000 --> 01:21:17.000]  что больше 1 второй,
[01:21:17.000 --> 01:21:19.000]  один будет квадратичным вычетом, а другой
[01:21:19.000 --> 01:21:21.000]  не будет.
[01:21:21.000 --> 01:21:23.000]  Ну либо где-то еще будет нолик выскочит,
[01:21:23.000 --> 01:21:25.000]  но это тоже у нас положительный исход.
[01:21:25.000 --> 01:21:27.000]  Если мы будем выбирать дельта нулю,
[01:21:27.000 --> 01:21:29.000]  то у нас
[01:21:29.000 --> 01:21:31.000]  дельта равна нулю, если мы не будем выбирать, то у нас там тоже будет
[01:21:31.000 --> 01:21:33.000]  певец 1.
[01:21:33.000 --> 01:21:35.000]  Короче то, что мы певец 1 пополам.
[01:21:35.000 --> 01:21:37.000]  Ну, короче, там может быть крайний случай,
[01:21:37.000 --> 01:21:39.000]  когда мы пришли в ноль случайно.
[01:21:39.000 --> 01:21:41.000]  Да-да-да, он все равно хороший для нас.
[01:21:41.000 --> 01:21:43.000]  Нет, в смысле, если мы пришли в ноль,
[01:21:43.000 --> 01:21:45.000]  мы сразу поймем.
[01:21:45.000 --> 01:21:47.000]  Да, так что это тоже хороший случай,
[01:21:47.000 --> 01:21:49.000]  но, короче говоря, у нас удачный случай
[01:21:49.000 --> 01:21:51.000]  происходит с вероятностью как минимум 1 вторая.
[01:21:51.000 --> 01:21:53.000]  Вот.
[01:21:53.000 --> 01:21:55.000]  Ну, значит, алгоритм такой типо. Давайте пробиваем случайно дельта.
[01:21:55.000 --> 01:21:57.000]  Пересчитаем
[01:21:57.000 --> 01:21:59.000]  коэффициентики этого многочлена. У нас получится уже какой-то там
[01:21:59.000 --> 01:22:01.000]  не какой-то жалкий t квадрат
[01:22:01.000 --> 01:22:03.000]  минуса, а уже какой-то достаточно серьезный
[01:22:03.000 --> 01:22:05.000]  многочлен t квадрат плюс pt
[01:22:05.000 --> 01:22:07.000]  плюс q.
[01:22:07.000 --> 01:22:09.000]  И давайте вот для него сделаем вот эту штуку.
[01:22:11.000 --> 01:22:13.000]  Ну, от ожидания количества сделанных попыток
[01:22:13.000 --> 01:22:15.000]  2. Да, поэтому мы
[01:22:15.000 --> 01:22:17.000]  разработали алгоритм с ожидаемым временем работы
[01:22:17.000 --> 01:22:19.000]  от ЛАКП.
[01:22:19.000 --> 01:22:21.000]  Открывай дисперсию.
[01:22:23.000 --> 01:22:25.000]  Чел.
[01:22:25.000 --> 01:22:27.000]  Ну, почитай.
[01:22:27.000 --> 01:22:29.000]  В чем проблема?
[01:22:29.000 --> 01:22:31.000]  Понятно, что у меня вероятность того,
[01:22:31.000 --> 01:22:33.000]  что я у них...
[01:22:33.000 --> 01:22:35.000]  Ну, смотри, хорошо.
[01:22:35.000 --> 01:22:37.000]  У тебя вероятность того, что ты k раз обосрешься,
[01:22:37.000 --> 01:22:39.000]  она... Ой.
[01:22:39.000 --> 01:22:41.000]  Она у тебя 1 поделить на 2 степеника.
[01:22:41.000 --> 01:22:43.000]  Она падает очень мало.
[01:22:43.000 --> 01:22:45.000]  Она очень небольшая, короче.
[01:22:45.000 --> 01:22:47.000]  Вот, как-то так.
[01:22:47.000 --> 01:22:49.000]  Ну, и все.
[01:22:49.000 --> 01:22:51.000]  Я предлагаю сейчас прерывчик делать.
[01:22:51.000 --> 01:22:53.000]  И вот если...
[01:22:55.000 --> 01:22:57.000]  И, короче,
[01:22:57.000 --> 01:22:59.000]  после этого забрать уже сложный алгоритм.
[01:22:59.000 --> 01:23:01.000]  Ну, не сложный, на самом деле, простой, как пробка.
[01:23:01.000 --> 01:23:03.000]  Алгоритм, который решает просто полином
[01:23:03.000 --> 01:23:05.000]  в произволенной степени.
[01:23:05.000 --> 01:23:07.000]  Вот.
[01:23:07.000 --> 01:23:09.000]  Давайте вот алгоритм.
[01:23:09.000 --> 01:23:11.000]  Вот у нас есть произволенная многочлена p от x степени n.
[01:23:11.000 --> 01:23:13.000]  Собственно, что мы делаем?
[01:23:13.000 --> 01:23:15.000]  Во-первых, хочется избавиться
[01:23:15.000 --> 01:23:17.000]  от кратных корней.
[01:23:17.000 --> 01:23:19.000]  Ну, от кратных корней избавиться достаточно просто.
[01:23:19.000 --> 01:23:21.000]  Нет, зачем...
[01:23:21.000 --> 01:23:23.000]  Нет, производная, как раз,
[01:23:23.000 --> 01:23:25.000]  она у нас столько кратной корни найдет.
[01:23:25.000 --> 01:23:27.000]  Нет, я хочу, в принципе,
[01:23:27.000 --> 01:23:29.000]  чтобы у меня был многочлен p от x, да?
[01:23:29.000 --> 01:23:31.000]  У него выпускали корни
[01:23:31.000 --> 01:23:33.000]  лямбда 1, лямбда k,
[01:23:33.000 --> 01:23:35.000]  или так далее, лямбда k, да?
[01:23:35.000 --> 01:23:37.000]  Я хочу, чтобы, в принципе, получить многочлен
[01:23:37.000 --> 01:23:39.000]  x-лямбда 1,
[01:23:39.000 --> 01:23:41.000]  или x-лямбда k.
[01:23:41.000 --> 01:23:43.000]  Ну, так, чтобы экономно,
[01:23:43.000 --> 01:23:45.000]  чтобы у меня еще константа была хорошая исполнение.
[01:23:45.000 --> 01:23:47.000]  Чтобы я не отвлекался на всякие там
[01:23:47.000 --> 01:23:49.000]  квадратичные, ну, несократимые множки
[01:23:49.000 --> 01:23:51.000]  и так далее, степени больше одного.
[01:23:51.000 --> 01:23:53.000]  Как это сделать?
[01:23:53.000 --> 01:23:55.000]  Ну, давайте внезапно заметим, что
[01:23:55.000 --> 01:23:57.000]  нам надо просто найти нод этого многочлена
[01:23:57.000 --> 01:23:59.000]  с многочленом x степени p-x.
[01:23:59.000 --> 01:24:01.000]  Это очевидно?
[01:24:01.000 --> 01:24:03.000]  Ну, это плюс-минус очевидно.
[01:24:03.000 --> 01:24:05.000]  Почему это так?
[01:24:05.000 --> 01:24:07.000]  Ну, потому что это x степени p-x,
[01:24:07.000 --> 01:24:09.000]  то есть на x-1, так далее,
[01:24:09.000 --> 01:24:11.000]  на x-1.
[01:24:11.000 --> 01:24:13.000]  Вот, все хорошо, теперь у нас все корни
[01:24:13.000 --> 01:24:15.000]  сращаются по одному разу.
[01:24:15.000 --> 01:24:17.000]  Ну, мы получили какой-то многочлен
[01:24:17.000 --> 01:24:19.000]  новый p от x, простарый забыли.
[01:24:19.000 --> 01:24:21.000]  Ну, что делаем дальше?
[01:24:21.000 --> 01:24:23.000]  Дальше, типа, логерет такой,
[01:24:23.000 --> 01:24:25.000]  выбираем случайное дельта,
[01:24:25.000 --> 01:24:27.000]  причем его можно выбрать
[01:24:27.000 --> 01:24:29.000]  равным нулю, в этом ничего страшного нету,
[01:24:29.000 --> 01:24:31.000]  абсолютно.
[01:24:31.000 --> 01:24:33.000]  Типа и рассматриваем многочлен
[01:24:33.000 --> 01:24:35.000]  p от x плюс дельта,
[01:24:35.000 --> 01:24:37.000]  и берем его нод,
[01:24:37.000 --> 01:24:39.000]  соответственно, с многочленом
[01:24:39.000 --> 01:24:41.000]  x степени p-1
[01:24:41.000 --> 01:24:43.000]  пополам минус 1.
[01:24:43.000 --> 01:24:45.000]  Ну, еще, типа, если мы вдруг угадали
[01:24:45.000 --> 01:24:47.000]  какой-то корень, то
[01:24:47.000 --> 01:24:49.000]  у нас у нас p от x плюс дельта будет просто делиться на x,
[01:24:49.000 --> 01:24:51.000]  да, давайте, типа, сократим.
[01:24:51.000 --> 01:24:53.000]  Вот.
[01:24:53.000 --> 01:24:55.000]  Давайте как-то оценим алгоритм,
[01:24:55.000 --> 01:24:57.000]  то есть после этого у нас, типа, мы получим какой-то многочлен
[01:24:57.000 --> 01:24:59.000]  a от x, да.
[01:24:59.000 --> 01:25:01.000]  Вот, в принципе, мы
[01:25:01.000 --> 01:25:03.000]  могли получить вторую половину b от x,
[01:25:03.000 --> 01:25:05.000]  таким способом. Ну, мы могли либо p от x разделить
[01:25:05.000 --> 01:25:07.000]  на a от x,
[01:25:07.000 --> 01:25:09.000]  ну, кстати, так вроде бы эффективно и нормально, давайте так и сделаем.
[01:25:09.000 --> 01:25:11.000]  Вот.
[01:25:11.000 --> 01:25:13.000]  Собственно, мы получили
[01:25:13.000 --> 01:25:15.000]  многочлен a от x, b от x, который произведет
[01:25:15.000 --> 01:25:17.000]  p от x, и они примерно корень пополам
[01:25:17.000 --> 01:25:19.000]  разделили. Ну, мы пока в это верим,
[01:25:19.000 --> 01:25:21.000]  сейчас мы докажем, сейчас мы докажем,
[01:25:21.000 --> 01:25:23.000]  почему пополам. Там очень простая оценка.
[01:25:23.000 --> 01:25:25.000]  То есть даже я справился
[01:25:25.000 --> 01:25:27.000]  это доказать. Вот, собственно,
[01:25:27.000 --> 01:25:29.000]  и как бы дальше
[01:25:29.000 --> 01:25:31.000]  мы просто рекурсивно будем запускаться.
[01:25:31.000 --> 01:25:33.000]  Ну, итерацию разделения мы сделали за время,
[01:25:33.000 --> 01:25:35.000]  давайте посчитаем.
[01:25:35.000 --> 01:25:37.000]  А вот эту штуку мы делали за...
[01:25:37.000 --> 01:25:39.000]  Мы тут f of t, ничем не будем пользоваться,
[01:25:39.000 --> 01:25:41.000]  но все равно, типа, нот в конце, так что пофиг.
[01:25:41.000 --> 01:25:43.000]  Ну, собственно, самая тяжелая часть, а вычислить вот такую вот штуку,
[01:25:43.000 --> 01:25:45.000]  это работает за n квадрат логп.
[01:25:49.000 --> 01:25:51.000]  Ну, почему так? Потому что мы
[01:25:51.000 --> 01:25:53.000]  в тупую...
[01:25:53.000 --> 01:25:55.000]  Мы в тупую перемножили за n квадрат, да,
[01:25:55.000 --> 01:25:57.000]  а потом по модуле мы можем взять тоже за n квадрат.
[01:25:57.000 --> 01:25:59.000]  И все, у нас будет хорошо
[01:25:59.000 --> 01:26:01.000]  и отлично.
[01:26:01.000 --> 01:26:03.000]  Ну, окей.
[01:26:07.000 --> 01:26:09.000]  Нет, у нас, смотри, у нас n логена
[01:26:09.000 --> 01:26:11.000]  не будет тут никогда, потому что нам надо нот взять.
[01:26:13.000 --> 01:26:15.000]  Ну, как ты нот будешь быстро вычислять с помощью f of t?
[01:26:15.000 --> 01:26:17.000]  Или можно?
[01:26:17.000 --> 01:26:19.000]  Денис?
[01:26:21.000 --> 01:26:23.000]  Ну, так вроде бы я
[01:26:23.000 --> 01:26:25.000]  больше чем уверен, что вроде бы, ну, нельзя это делать.
[01:26:27.000 --> 01:26:29.000]  Ну, в общем, нельзя быстро.
[01:26:29.000 --> 01:26:31.000]  Окей. Ну, вот, все равно у нас
[01:26:31.000 --> 01:26:33.000]  крайняя операция ноты, да,
[01:26:33.000 --> 01:26:35.000]  ну, тут сильно это ускорять нет смысла.
[01:26:35.000 --> 01:26:37.000]  Ну, ладно, хорошо, мы можем сделать это
[01:26:37.000 --> 01:26:39.000]  за o от n квадрат
[01:26:39.000 --> 01:26:41.000]  плюс n лог n логп.
[01:26:41.000 --> 01:26:43.000]  Ну, есть ощущение, что это
[01:26:43.000 --> 01:26:45.000]  довольно значительное ускорение,
[01:26:45.000 --> 01:26:47.000]  потому что p до 10 в 9,
[01:26:47.000 --> 01:26:49.000]  n там тоже какое-то.
[01:26:49.000 --> 01:26:51.000]  Это значительно, ну...
[01:26:51.000 --> 01:26:53.000]  Окей, ну, можно, да, делать так, но, типа, сказать, что это
[01:26:53.000 --> 01:26:55.000]  просто o от n квадрат, да?
[01:26:55.000 --> 01:26:57.000]  Ну, у нас в итоге все равно получится
[01:26:57.000 --> 01:26:59.000]  либо o от n квадрат, либо o от n квадрат логп.
[01:26:59.000 --> 01:27:01.000]  Я тут какие-то там супер странные случаи, когда там, типа,
[01:27:01.000 --> 01:27:03.000]  p оно на несколько порядков больше,
[01:27:03.000 --> 01:27:05.000]  чем длина n, типа, не буду рассматривать.
[01:27:05.000 --> 01:27:07.000]  Понятно, что у нас, типа,
[01:27:07.000 --> 01:27:09.000]  либо n квадрат лог, либо n...
[01:27:09.000 --> 01:27:11.000]  И у нас в 30 раз ускорение.
[01:27:11.000 --> 01:27:13.000]  Нет, просто, типа, если многочлен, типа, 5000 размеров, да,
[01:27:13.000 --> 01:27:15.000]  то там уже, типа, f of t, как бы оно не особо
[01:27:15.000 --> 01:27:17.000]  эффективно, тебе лучше там, не знаю, крат,
[01:27:17.000 --> 01:27:19.000]  субы побаловаться чем-то еще таким.
[01:27:19.000 --> 01:27:21.000]  То есть многочлен в степени 5000, мне кажется,
[01:27:21.000 --> 01:27:23.000]  сомнительно f of t-шкой делать.
[01:27:23.000 --> 01:27:25.000]  Там, вроде, с 10, ну, хотя,
[01:27:25.000 --> 01:27:27.000]  с 40 f of t-шка как раз такие.
[01:27:27.000 --> 01:27:29.000]  Да, ну, понятно, короче, какую-то такую синтетику получаем.
[01:27:29.000 --> 01:27:31.000]  Давайте посмотрим, как они разделятся.
[01:27:31.000 --> 01:27:33.000]  Вот посмотрим на наши корни, как на полный граф,
[01:27:33.000 --> 01:27:35.000]  то есть, типа, у нас вершинка это будет корень,
[01:27:37.000 --> 01:27:39.000]  а, соответственно,
[01:27:39.000 --> 01:27:41.000]  типа,
[01:27:41.000 --> 01:27:43.000]  ребра они будут, как бы, ну, просто
[01:27:43.000 --> 01:27:45.000]  ребрами будут в графе, да, вот.
[01:27:45.000 --> 01:27:47.000]  Типа, давайте вот посмотрим, вот у нас, типа,
[01:27:47.000 --> 01:27:49.000]  мы как-то разделили x плюс дельта, да,
[01:27:49.000 --> 01:27:51.000]  какой-то дельта выбрали, вот у нас, типа,
[01:27:51.000 --> 01:27:53.000]  корни разделились на две группы.
[01:27:53.000 --> 01:27:55.000]  Квадратичные вычеты и неквадратичные вычеты.
[01:27:55.000 --> 01:27:57.000]  Ну, хорошо.
[01:27:57.000 --> 01:27:59.000]  А тогда, чтобы доказать, что они будут
[01:27:59.000 --> 01:28:01.000]  делиться хорошо, я буду смотреть на мат ожидания
[01:28:01.000 --> 01:28:03.000]  количества ребер в разрезе.
[01:28:05.000 --> 01:28:07.000]  Вроде бы очевидно. Почему все так?
[01:28:07.000 --> 01:28:09.000]  Ты все ребра проводишь?
[01:28:09.000 --> 01:28:11.000]  Да, я провожу все ребра.
[01:28:11.000 --> 01:28:13.000]  И давайте заметим, что у меня каждый отдельное ребро,
[01:28:13.000 --> 01:28:15.000]  оно вводит в разрез с вероятностью 1 на 2.
[01:28:15.000 --> 01:28:17.000]  Ну, как минимум 1 на 2.
[01:28:17.000 --> 01:28:19.000]  Это из того, что мы уже доказали.
[01:28:19.000 --> 01:28:21.000]  Да, это из того, что мы уже доказали.
[01:28:21.000 --> 01:28:23.000]  Из того, что я для двух значений,
[01:28:23.000 --> 01:28:25.000]  типа, если я к двум значениям
[01:28:25.000 --> 01:28:27.000]  провалю одинаковое случайное число,
[01:28:27.000 --> 01:28:29.000]  то у меня с вероятностью как минимум 1 на 2
[01:28:29.000 --> 01:28:31.000]  один будет квадратично вычетен, другой не будет.
[01:28:31.000 --> 01:28:33.000]  Но это, собственно, значит, что ребро
[01:28:33.000 --> 01:28:35.000]  пойдет в разрез.
[01:28:35.000 --> 01:28:37.000]  Да. Ну, типа, что у нас получается?
[01:28:37.000 --> 01:28:39.000]  Вот это вот мат ожидание количества ребер в разрезе,
[01:28:39.000 --> 01:28:41.000]  оно у нас с одной стороны
[01:28:41.000 --> 01:28:43.000]  как минимум, давайте, строго больше
[01:28:43.000 --> 01:28:45.000]  нарисую, давайте, ладно, нет, больше
[01:28:45.000 --> 01:28:47.000]  бы равно. Вдруг я где-то ошибся.
[01:28:47.000 --> 01:28:49.000]  Да, не, не понадобится.
[01:28:49.000 --> 01:28:51.000]  Все окей, все
[01:28:51.000 --> 01:28:53.000]  школьными фактами доказывается,
[01:28:53.000 --> 01:28:55.000]  все нормально. Вот.
[01:28:55.000 --> 01:28:57.000]  Окей, у нас оно, у нас с одной стороны
[01:28:57.000 --> 01:28:59.000]  больше бы равно, чем 1 вторая c из n по 2.
[01:28:59.000 --> 01:29:01.000]  Ну, это примерно, что?
[01:29:01.000 --> 01:29:03.000]  Давайте скажем, что это примерно n квадрат.
[01:29:03.000 --> 01:29:05.000]  Да.
[01:29:05.000 --> 01:29:07.000]  Ну, минус n, да?
[01:29:07.000 --> 01:29:09.000]  Бог с ним, это неважно.
[01:29:09.000 --> 01:29:11.000]  Хорошо, теперь давайте посмотрим, ну, типа, прям
[01:29:11.000 --> 01:29:13.000]  возьмем и посчитаем все
[01:29:13.000 --> 01:29:15.000]  возможные исходы. Вот пускай, типа, у нас в
[01:29:15.000 --> 01:29:17.000]  таких, они, вот при дельте
[01:29:17.000 --> 01:29:19.000]  к какому-то равному i у нас
[01:29:19.000 --> 01:29:21.000]  будет одна группа размера i и другая размера
[01:29:21.000 --> 01:29:23.000]  b i t.
[01:29:23.000 --> 01:29:25.000]  Ага. Ну, тогда,
[01:29:25.000 --> 01:29:27.000]  естественно, эта штука с другой стороны, она равна
[01:29:27.000 --> 01:29:29.000]  чему? Ну, по-среднеразметическому,
[01:29:29.000 --> 01:29:31.000]  по всей этой штуке. То есть, типа,
[01:29:31.000 --> 01:29:33.000]  среднее значение a i t
[01:29:33.000 --> 01:29:35.000]  умножить на b i t.
[01:29:35.000 --> 01:29:37.000]  Да?
[01:29:37.000 --> 01:29:39.000]  Нет.
[01:29:39.000 --> 01:29:41.000]  Да, именно так.
[01:29:41.000 --> 01:29:43.000]  У нас же сами группы неравно, вероятно,
[01:29:43.000 --> 01:29:45.000]  могут появляться. Нет, стоп, подожди. Ну, я говорю,
[01:29:45.000 --> 01:29:47.000]  вот пускай, типа, при дельте равном i у меня появится
[01:29:47.000 --> 01:29:49.000]  группа a i t и b i t. Да.
[01:29:49.000 --> 01:29:51.000]  Вот. Ну, хорошо, давай я просто все такие чисто
[01:29:51.000 --> 01:29:53.000]  выпишу. Я пока их никак не определяю, да?
[01:29:53.000 --> 01:29:55.000]  Ну, вот, хорошо.
[01:29:55.000 --> 01:29:57.000]  Ну, хорошо, давай тогда сделаем такое вот
[01:29:57.000 --> 01:29:59.000]  рассуждение. Ну, типа, в чем тут идея?
[01:29:59.000 --> 01:30:01.000]  Идея в том, что, ну, пускай, типа, разница между
[01:30:01.000 --> 01:30:03.000]  ними, она там, типа,
[01:30:03.000 --> 01:30:05.000]  x, да? Типа a i t это, типа,
[01:30:05.000 --> 01:30:07.000]  это n минус x пополам,
[01:30:07.000 --> 01:30:09.000]  а b i t это
[01:30:09.000 --> 01:30:11.000]  n плюс x пополам.
[01:30:11.000 --> 01:30:13.000]  Получается, вот мы за этим x будем следить.
[01:30:13.000 --> 01:30:15.000]  Ну, тогда, типа, это что такое? Это среднеархметическая по
[01:30:15.000 --> 01:30:17.000]  а
[01:30:17.000 --> 01:30:19.000]  n квадрат
[01:30:19.000 --> 01:30:21.000]  минус x и t
[01:30:21.000 --> 01:30:23.000]  в квадрате поделить на 4.
[01:30:23.000 --> 01:30:25.000]  Больше либо равно n квадрат
[01:30:25.000 --> 01:30:27.000]  минус n поделить на 4.
[01:30:27.000 --> 01:30:29.000]  Ну, на четверку домножаю, тут справа
[01:30:29.000 --> 01:30:31.000]  и слева. Еще получается,
[01:30:31.000 --> 01:30:33.000]  то есть, ну, и тут n квадрата я могу вычесть,
[01:30:33.000 --> 01:30:35.000]  тут получается минус n
[01:30:35.000 --> 01:30:37.000]  и получается, что у меня мот ожидания
[01:30:37.000 --> 01:30:39.000]  квадрата и их разницы не превышает n.
[01:30:41.000 --> 01:30:43.000]  А дальше, ну, не знаю, как-нибудь там можно
[01:30:43.000 --> 01:30:45.000]  поиграться, типа, сказать, ну, давайте
[01:30:45.000 --> 01:30:47.000]  допустим, что с вероятностью
[01:30:47.000 --> 01:30:49.000]  там разделим случай на 2, типа,
[01:30:49.000 --> 01:30:51.000]  ну, эта штука вроде бы она уже решается
[01:30:51.000 --> 01:30:53.000]  через дисперсик по-нормальному. Я просто
[01:30:53.000 --> 01:30:55.000]  сходу не помню, как это делается.
[01:30:55.000 --> 01:30:57.000]  Ну, давайте поскажем, что с вероятностью 1 вторая,
[01:30:57.000 --> 01:30:59.000]  типа, у нас, ну,
[01:30:59.000 --> 01:31:01.000]  с вероятностью 1 вторая у нас будет фигово делиться
[01:31:01.000 --> 01:31:03.000]  как-то, да? Ну, давайте назовем фигово,
[01:31:03.000 --> 01:31:05.000]  что x и t, типа, на 1 пример оно
[01:31:05.000 --> 01:31:07.000]  больше
[01:31:07.000 --> 01:31:09.000]  корни из 2n.
[01:31:09.000 --> 01:31:11.000]  А с вероятностью 1 вторая будет по-нормальному
[01:31:11.000 --> 01:31:13.000]  делиться.
[01:31:13.000 --> 01:31:15.000]  Ну, и тогда давайте
[01:31:15.000 --> 01:31:17.000]  заметим, что у нас тут уже получится
[01:31:17.000 --> 01:31:19.000]  притворить еще. То есть у нас, типа,
[01:31:19.000 --> 01:31:21.000]  с вероятностью как минимум 1 вторая,
[01:31:21.000 --> 01:31:23.000]  то есть с вероятностью
[01:31:23.000 --> 01:31:25.000]  больше 1
[01:31:25.000 --> 01:31:27.000]  и 2,
[01:31:27.000 --> 01:31:29.000]  размеры
[01:31:29.000 --> 01:31:31.000]  группы отличаются не более, чем на 2 корни n.
[01:31:31.000 --> 01:31:33.000]  Не более, чем
[01:31:33.000 --> 01:31:35.000]  на корни из 2n,
[01:31:35.000 --> 01:31:37.000]  точнее.
[01:31:37.000 --> 01:31:39.000]  Вот, ну, это все, в принципе, конец
[01:31:39.000 --> 01:31:41.000]  заказательства, да, типа.
[01:31:41.000 --> 01:31:43.000]  Дальше, что мы говорим? Ну, типа,
[01:31:43.000 --> 01:31:45.000]  говорим, что ну, пускай там n больше 100,
[01:31:45.000 --> 01:31:47.000]  ну, потому что n меньше 100, кого
[01:31:47.000 --> 01:31:49.000]  интересует? Ну, никого, верно.
[01:31:49.000 --> 01:31:51.000]  Ну, значит, там корни из 2n, типа, он там, ну, явно
[01:31:51.000 --> 01:31:53.000]  больше, чем там 1,5, меньше,
[01:31:53.000 --> 01:31:55.000]  чем 1,5n. Ну, значит, они примерно так
[01:31:55.000 --> 01:31:57.000]  поделятся, типа, 2, которые в худшем случае,
[01:31:57.000 --> 01:31:59.000]  с вероятностью 1 вторая. Ну, как-то так.
[01:31:59.000 --> 01:32:01.000]  То есть,
[01:32:01.000 --> 01:32:03.000]  ну, и давайте, типа, еще сделаем, типа, прям
[01:32:03.000 --> 01:32:05.000]  совсем шикарно. Понятно, делать это в жизни делать
[01:32:05.000 --> 01:32:07.000]  не надо, но давайте, типа, скажем, что если фигово разделилось,
[01:32:07.000 --> 01:32:09.000]  то давайте еще раз разделим.
[01:32:09.000 --> 01:32:11.000]  Ну, просто для того, чтобы было попроще запруфать.
[01:32:11.000 --> 01:32:13.000]  Не более того. Это, естественно, бесполезное действие.
[01:32:13.000 --> 01:32:15.000]  Оно только заметит
[01:32:15.000 --> 01:32:17.000]  наш алгоритм, но все равно, типа,
[01:32:17.000 --> 01:32:19.000]  оценка, симпатика будет нормально.
[01:32:19.000 --> 01:32:21.000]  Ну, хорошо, вот мы делим...
[01:32:21.000 --> 01:32:23.000]  В смысле, а как мы поймем, что фигово разделилось?
[01:32:23.000 --> 01:32:25.000]  Ну, просто берешь, типа,
[01:32:25.000 --> 01:32:27.000]  вычислил a, b, да? Вот, пускай степень
[01:32:27.000 --> 01:32:29.000]  а меньше.
[01:32:29.000 --> 01:32:31.000]  Двайн поделить.
[01:32:31.000 --> 01:32:33.000]  Да, да, да.
[01:32:33.000 --> 01:32:35.000]  Но мне просто так удобнее симпатику будет.
[01:32:35.000 --> 01:32:37.000]  Мне так удобнее просто симпатику будет оценивать. Ничего более.
[01:32:37.000 --> 01:32:39.000]  Ну, почему бы нет? Ну, в смысле,
[01:32:39.000 --> 01:32:41.000]  если я сейчас это начну учитывать, то у меня там вероятность
[01:32:41.000 --> 01:32:43.000]  и что-то такое. Я это всего не знаю, типа, я просто
[01:32:43.000 --> 01:32:45.000]  первокурсник.
[01:32:47.000 --> 01:32:49.000]  Вот. Ну, как-то он будет
[01:32:49.000 --> 01:32:51.000]  делиться. Ну, понятно, что, типа, у нас сколько будет делений?
[01:32:51.000 --> 01:32:53.000]  Ну, логен, типа, логен слоев, типа.
[01:32:53.000 --> 01:32:55.000]  Ну, круто. Ну, вообще
[01:32:55.000 --> 01:32:57.000]  давайте по-нормальному, давайте по-нормальному оценим, да,
[01:32:57.000 --> 01:32:59.000]  t от n. Вот у нас t от n чему будет равняться?
[01:32:59.000 --> 01:33:01.000]  Вот мы сделали
[01:33:01.000 --> 01:33:03.000]  n квадрат лог по действию, да? На то,
[01:33:25.000 --> 01:33:27.000]  что мы делаем,
[01:33:27.000 --> 01:33:29.000]  это у нас
[01:33:29.000 --> 01:33:31.000]  где-то universe.
[01:33:31.000 --> 01:33:33.000]  Вот у нас
[01:33:33.000 --> 01:33:36.000]  есть
[01:33:36.000 --> 01:33:38.000]  галлюцин,
[01:33:38.000 --> 01:33:40.000]  вон он, типа.
[01:33:40.000 --> 01:33:42.000]  Вопросов нет, потому что
[01:33:42.000 --> 01:33:44.000]  произошло?
[01:33:44.000 --> 01:33:46.000]  Для мастер-сериала мы умные. Ну, глобально порядок.
[01:33:46.000 --> 01:33:48.000]  Ну, то есть, как бы, алгрейт
[01:33:48.000 --> 01:33:50.000]  в принципе, ну, такой. Его даже школьники, мне кажется, поймут.
[01:33:50.000 --> 01:33:52.000]  И тут
[01:33:52.000 --> 01:33:54.000]  рассуждение не очень сложное с доказательством.
[01:33:54.000 --> 01:34:02.120]  Наверное, оффтеников я буду читать, хотя сейчас школьники вообще пошли нынче прям, ну не знаю, слабые, слабые.
[01:34:02.120 --> 01:34:02.800]  Слабые?
[01:34:02.800 --> 01:34:03.300]  Да, очень.
[01:34:03.300 --> 01:34:05.300]  Может быть, просто все сильные пошли в Яндекс?
[01:34:05.300 --> 01:34:18.680]  Не-не-не, в смысле, во-первых, во-первых, во-первых, во-вторых, в Яндексе тоже не очень сильно, ну типа там вообще в принципе по стране, ну кто там, Гемран остался, Дашка Грекова, кто еще, а, Иван Пискаров?
[01:34:19.680 --> 01:34:28.680]  А теперь, ну нет, ну нет, ну нет, ну Чесовских он математик, к сожалению, А это что?
[01:34:28.680 --> 01:34:48.520]  А это матиша, а, я тут еще хотел сказать пару слов о том, как, типа, смотреть на кратность крайней быстро, вот, это тоже, типа, может быть интересно, ну тут в чем идея, как бы, давайте, да, тут уже вот эта краска штук понадобится, и вот внимание, у этой штуки есть название, я в афиге, это короче называется,
[01:34:48.520 --> 01:35:16.360]  сейчас как это называется, а, это Square Root Decomposition, короче, это фигня на фулл сериозе дали название, а, не, Square Free, все-таки название адекватное, Square Free Decomposition, да-да-да, ну это тоже, ну это то, что происходит, да?
[01:35:16.360 --> 01:35:46.200]  Не, не, не, смысл, это получается, когда, типа, это берешь, типа, и f от x, ну, p от x, да, хорошо, p мы заменяем на, что, p поделить на нода p и p штрих, вот, это, короче, называется Square Free Decomposition, ну, давайте, заметьте, что после, что не так, ну, просто есть такое название, ну, смешно же, нет, ну, это плюс-минус, понятно, почему так, да, ну, потому что, типа, если p делился на, какую?
[01:35:46.360 --> 01:36:15.720]  На алгебре, это понятно, да, вот, окей, все, тогда не буду объяснять, типа, вот этому дали название, это смешно, вот, ну, и, типа, собственно, что мы можем делать, ну, мы можем сделать Square Free Decomposition, и после этого выделить все, типа, корни, которые случаются один раз, потом, типа, все, которые 2 и 3 и так далее, ну, после этого, типа, дальше каждый корень можно проверить, да-да-да, ну, то, типа, можно, в принципе, посмотреть вот на эту штуку, да, а потом, типа, отдельно запуститься для мода p и p штрих, да, это будут корни, которые два раза встретились, ну, можно и так, да.
[01:36:16.360 --> 01:36:22.000]  А это будут корни, которые ровно один раз встретились, все круто, все классно, позитивно, и так далее.
[01:36:22.000 --> 01:36:26.520]  Что лучше, чем вы проверяете все корни, которые мы нашли в одном, а то, в какой степени, на квадрате?
[01:36:26.520 --> 01:36:37.560]  Да, я фиг знает, ну, вообще, типа, а сколько ты будешь проверять каждый корень, ну, за 1 квадрат, типа, да, ну, вообще, да, кстати, ну, интеллектуально-интеллектуально.
[01:36:38.560 --> 01:36:41.280]  Нет, даже суммарно по всем за 1 квадрат кажется.
[01:36:41.280 --> 01:36:43.280]  Да, да, я об этом говорю, да, да.
[01:36:43.280 --> 01:37:00.120]  Не, стоп, а как-то суммарно, как-то один корень за линию, а, да, да, ну, сейчас, ну, ты одну делимость проверяешь, не, Сева, ты врешь, ты врешь, ты проверяешь за n квадрат логен, хорошо, как ты делаешь алгоритм?
[01:37:00.160 --> 01:37:03.160]  Ты врешь корень, делаешь, по-настоящему, это смеется за корень.
[01:37:03.160 --> 01:37:04.160]  Да.
[01:37:04.160 --> 01:37:07.160]  А, ты по одному делишь, все, окей, все, все, sorry.
[01:37:07.160 --> 01:37:09.160]  Все, sorry, все, sorry.
[01:37:09.160 --> 01:37:11.160]  Ну, да, действительно.
[01:37:11.160 --> 01:37:15.160]  Ну, тогда, типа, хуя, так это бесполезно получается.
[01:37:15.160 --> 01:37:17.160]  За то название.
[01:37:17.160 --> 01:37:19.160]  За то название, да, да.
[01:37:19.160 --> 01:37:21.160]  Блин.
[01:37:21.160 --> 01:37:29.160]  Как бы, вот, ну, и давайте, типа, у меня был блог, посвященный алгоритме в Клида, давайте еще про Гаусс, прочисла, немного поговорим.
[01:37:29.160 --> 01:37:36.160]  Короче, оказывается, что он не только для многощеленов, не только для чисел, но еще для офиговых чисел работает круто.
[01:37:37.160 --> 01:37:40.160]  Вот. Ну галусы все знают, что такое, да? Ну я думаю все.
[01:37:41.160 --> 01:37:45.160]  Просто взяли A и B игру, у которых A и B целые.
[01:37:46.160 --> 01:37:48.160]  Вот, оказывается, галусы для них можно сделать.
[01:37:49.160 --> 01:37:52.160]  Ну типа для них делимость вполне так же определяется, как для целых.
[01:37:53.160 --> 01:37:55.160]  Я думаю, ну давайте посмотрим на галусы для них, как его можно реализовать.
[01:37:55.160 --> 01:37:57.160]  Его можно реализовать. Реализуется, кстати, на удивление, очень просто.
[01:37:58.160 --> 01:38:00.160]  Мне кажется, поэтому его и стоит рассказать.
[01:38:01.160 --> 01:38:02.160]  А как-то определяет...
[01:38:03.160 --> 01:38:06.160]  Да, давайте его определим для начала, мне кажется, это будет полезно.
[01:38:08.160 --> 01:38:16.160]  Так. Давайте скажем, что вот у нас у каждого галусового числа есть типа норма.
[01:38:17.160 --> 01:38:20.160]  Типа его модуль в квадрате, ну короче Z на Z сопряженное.
[01:38:21.160 --> 01:38:30.160]  Собственно, я нодом, нода AB, типа галусовых чисел, просто буду называть число C,
[01:38:31.160 --> 01:38:36.160]  у которого будет два условия, типа C, его норма максимальна.
[01:38:39.160 --> 01:38:40.160]  Нет, норма это не длина.
[01:38:41.160 --> 01:38:42.160]  Ну это длина в квадрате просто.
[01:38:43.160 --> 01:38:44.160]  Окей.
[01:38:45.160 --> 01:38:47.160]  Ну короче, тут может длина, норма, типа тут одно и то же на самом деле будет.
[01:38:47.160 --> 01:38:50.160]  По сути не сильно отличается. Его короче длина максимальна,
[01:38:51.160 --> 01:38:55.160]  а, соответственно, при этом оно делит и A, и B.
[01:38:56.160 --> 01:38:59.160]  Кажется, нужно доказывать, что она точно всегда противна.
[01:39:00.160 --> 01:39:01.160]  Да, мне пока пофиг как-то.
[01:39:02.160 --> 01:39:03.160]  Иначе у нас?
[01:39:04.160 --> 01:39:07.160]  Ну, я просто буду нодом любое такое число называть пока что.
[01:39:08.160 --> 01:39:10.160]  Ну в плане, правда ли, что их всегда четыре?
[01:39:13.160 --> 01:39:14.160]  Ну, ща.
[01:39:14.160 --> 01:39:17.160]  Ну, вроде да.
[01:39:18.160 --> 01:39:19.160]  Ну, типа.
[01:39:20.160 --> 01:39:22.160]  Ща, ща, ты хочешь еще вот эту флагу доказать, да?
[01:39:23.160 --> 01:39:26.160]  Ну, их может быть больше, чем четыре, поэтому.
[01:39:27.160 --> 01:39:28.160]  В смысле?
[01:39:29.160 --> 01:39:31.160]  В смысле, я тут не говорю вообще, что нода единственная.
[01:39:32.160 --> 01:39:33.160]  Да, может быть, норма больше.
[01:39:34.160 --> 01:39:35.160]  Нет, давай.
[01:39:36.160 --> 01:39:38.160]  Короче, стри, Миш, Миш.
[01:39:39.160 --> 01:39:40.160]  Миш, ты подожди, давай так сделаем.
[01:39:41.160 --> 01:39:43.160]  Я сейчас вообще не говорю, что нода единственным образом определяется.
[01:39:44.160 --> 01:39:45.160]  Я вообще не накидываю.
[01:39:46.160 --> 01:39:48.160]  Окей? У меня все, просто единственное, что мне пользуется.
[01:39:49.160 --> 01:39:50.160]  Я могу число C называть нодом A и B, вот только в таком случае.
[01:39:51.160 --> 01:39:53.160]  Пока что я их не говорю, что их равны четыре, окей?
[01:39:54.160 --> 01:39:55.160]  Да, да, да.
[01:39:56.160 --> 01:39:57.160]  Ну, все, без проблем. Ну, типа давайте заметим, что.
[01:39:58.160 --> 01:40:00.160]  Давайте заметим, что агритмия в клида работает, да.
[01:40:01.160 --> 01:40:02.160]  Типа, если я попытаюсь вот.
[01:40:03.160 --> 01:40:04.160]  Вот если у меня C, типа это вот.
[01:40:05.160 --> 01:40:06.160]  Ну, нод, типа, пускай какое-то число, да.
[01:40:07.160 --> 01:40:10.160]  Это A и B, то у меня, типа оно также является нодом A-B и B, да.
[01:40:11.160 --> 01:40:12.160]  Ну, офигеть теперь, да.
[01:40:12.160 --> 01:40:14.160]  Теперь я более того могу B давать на что угодно, в принципе.
[01:40:15.160 --> 01:40:16.160]  Главное, чтобы оно было целым галсовым.
[01:40:17.160 --> 01:40:18.160]  Это все работает. И туда и обратно.
[01:40:19.160 --> 01:40:20.160]  Это очевидно вроде, да.
[01:40:21.160 --> 01:40:22.160]  Давайте теперь построим агритм галсов.
[01:40:23.160 --> 01:40:24.160]  Как он будет выглядеть?
[01:40:25.160 --> 01:40:27.160]  Вот пускай у меня было число B, которое больше по модулю.
[01:40:29.160 --> 01:40:31.160]  И тогда что хочется сделать?
[01:40:32.160 --> 01:40:34.160]  Вот я хочу из A вычесть B на какое-то целое число галсового.
[01:40:35.160 --> 01:40:36.160]  Ну, тогда вот как это число выглядит?
[01:40:37.160 --> 01:40:38.160]  Ну, это на самом деле просто какая-то решетка.
[01:40:39.160 --> 01:40:40.160]  Ну, не решетка, а такое вот клеточное поле.
[01:40:41.160 --> 01:40:42.160]  Я...
[01:40:45.160 --> 01:40:46.160]  Как тут она делит?
[01:40:47.160 --> 01:40:48.160]  Типа у нас есть B, есть BIT, ну и как-то...
[01:40:49.160 --> 01:40:50.160]  Где-то тут может быть...
[01:40:51.160 --> 01:40:52.160]  А что тут не так-то?
[01:40:54.160 --> 01:40:56.160]  Непарамельный вектор, в принципе.
[01:40:59.160 --> 01:41:00.160]  Ну...
[01:41:02.160 --> 01:41:04.160]  А почему ты сказал, что это не решетка, а всякая решетка?
[01:41:05.160 --> 01:41:08.160]  Не, ну слово решетка, ну просто типа еще в более общем случае применяется.
[01:41:08.160 --> 01:41:10.160]  Типа я не хочу его использовать, чтобы никого не напрягать.
[01:41:11.160 --> 01:41:12.160]  Не, у нас были решетки на...
[01:41:13.160 --> 01:41:14.160]  Ну, короче, просто какая-то сетка.
[01:41:15.160 --> 01:41:16.160]  Вот, и у нас где-то тут располагается число A.
[01:41:17.160 --> 01:41:18.160]  Ну, чем нам известно?
[01:41:19.160 --> 01:41:20.160]  Ну, вот это вот квадратик на самом деле, да?
[01:41:21.160 --> 01:41:26.160]  А значит, длина расстояния от A до ближайшей точки, оно не превышает, собственно, стороны квадрата.
[01:41:27.160 --> 01:41:29.160]  То есть B поделено корень из двух.
[01:41:30.160 --> 01:41:31.160]  Угу.
[01:41:32.160 --> 01:41:34.160]  Вот, ну как такие точки быстро искать?
[01:41:35.160 --> 01:41:36.160]  Ну, что тут можно сделать?
[01:41:36.160 --> 01:41:40.160]  Ну, можно просто взять, попытаться спроецировать A вот сюда.
[01:41:41.160 --> 01:41:43.160]  Спроецировать A вот сюда.
[01:41:44.160 --> 01:41:48.160]  Ну, короче, мы получим, мы просто в таком случае понимаем, что X плюс Y и E это на самом деле...
[01:41:49.160 --> 01:41:51.160]  Ну, A поделить на B, что очень неожиданно.
[01:41:52.160 --> 01:41:56.160]  Ну, что то же самое, что там A на B спряженное поделить на B.
[01:41:57.160 --> 01:41:58.160]  Окей.
[01:41:59.160 --> 01:42:00.160]  Ну, вот нам эту точку надо выбрать.
[01:42:01.160 --> 01:42:02.160]  Ну, понятно, как выбирать точку среди этих четырех.
[01:42:03.160 --> 01:42:04.160]  Нам надо округлиться в ближайшую сторону.
[01:42:04.160 --> 01:42:06.160]  Вот что это ты написал?
[01:42:07.160 --> 01:42:08.160]  Это вот я написал вот X и Y, вот эти.
[01:42:09.160 --> 01:42:10.160]  То есть я спроецировал A вот на эту сетку.
[01:42:11.160 --> 01:42:15.160]  Я говорю, что вот X типа плюс Y и E это на самом деле частное A и B.
[01:42:16.160 --> 01:42:17.160]  Это очевидно.
[01:42:18.160 --> 01:42:19.160]  Ну, и просто дальше расписал чуть подробнее.
[01:42:20.160 --> 01:42:21.160]  Вот, и дальше мне, типа, что надо?
[01:42:22.160 --> 01:42:26.160]  Мне надо просто, типа, действительную, ну, мне надо действительную часть и мнимую округлить к ближайшему целому числу.
[01:42:27.160 --> 01:42:28.160]  Ну, что заметим?
[01:42:29.160 --> 01:42:31.160]  Давайте заметим, что если мы A на B спряженное домножили, да,
[01:42:31.160 --> 01:42:33.160]  то у нас, типа, уже получилось какой-то там X штрих плюс Y штрих,
[01:42:34.160 --> 01:42:37.160]  который отдельно делится на B, да, на B.
[01:42:38.160 --> 01:42:39.160]  Норма B.
[01:42:40.160 --> 01:42:41.160]  И, типа, мы как-то, ну, как-то я думаю, что сможем, типа, тут найти ближайшее.
[01:42:42.160 --> 01:42:43.160]  Без выхода в добылы.
[01:42:44.160 --> 01:42:46.160]  Типа там не знаю какой-нибудь формулы типа X плюс там, не знаю,
[01:42:47.160 --> 01:42:51.160]  B, 2, там, поделить на B, там, округленное, строго вниз.
[01:42:52.160 --> 01:42:53.160]  Ну, короче, как-то так вот мы можем сообразить.
[01:42:54.160 --> 01:43:00.160]  И в итоге, типа, оказывается, что, ну, как-то за вот один вычисляется эта ближайшая точка.
[01:43:01.160 --> 01:43:02.160]  Ну, значит, что мы делаем?
[01:43:03.160 --> 01:43:06.160]  Просто ее из A вычитаем и продолжаем алгоритм.
[01:43:07.160 --> 01:43:09.160]  Ну, типа, за одну операцию у нас длина одного вектора,
[01:43:10.160 --> 01:43:13.160]  у нас длина вектора меньшего, она уменьшается в корень два раза.
[01:43:14.160 --> 01:43:15.160]  Вот.
[01:43:16.160 --> 01:43:17.160]  Какого-то вектора в корень в двух раз.
[01:43:18.160 --> 01:43:20.160]  Давайте заметим, что у нас изначально было их произведение,
[01:43:21.160 --> 01:43:23.160]  а их норма, соответственно, уменьшается в два раза.
[01:43:25.160 --> 01:43:29.160]  Давайте заметим, что изначально у них там произведение норм было равно чему-то.
[01:43:31.160 --> 01:43:33.160]  А в конце стало равно...
[01:43:34.160 --> 01:43:36.160]  Ну, в конце, типа, оно не могло стать меньше 1 никак.
[01:43:37.160 --> 01:43:40.160]  Ну и все, дальше мы понимаем, что у нас, соответственно, действие у нас будет log2,
[01:43:41.160 --> 01:43:45.160]  вот, умножить на норму норма A, умножить на норму B.
[01:43:46.160 --> 01:43:49.160]  Ну, и там, не знаю, давайте допишем сюда норму их нода в квадрате.
[01:43:50.160 --> 01:43:51.160]  Вот.
[01:43:52.160 --> 01:43:55.160]  Ну, как-то так, то есть, вообще, алгоритмическое время, типа, алгоритм вклита, в принципе, классно, прикольно.
[01:43:56.160 --> 01:43:57.160]  Вот.
[01:43:58.160 --> 01:43:59.160]  Ну, для чего он может использоваться, я думаю, вы и так понимаете,
[01:43:59.160 --> 01:44:03.160]  ну, например, типа, если у вас там есть две вот такие вот прямоугольные сетки,
[01:44:04.160 --> 01:44:06.160]  то вы можете, типа, смотреть их сумму по Миндковскому
[01:44:07.160 --> 01:44:09.160]  и там определять, что будет за сетку у вас в итоге выходить, например.
[01:44:10.160 --> 01:44:11.160]  Одно из применений.
[01:44:12.160 --> 01:44:14.160]  Вот, ну, тут дальше возникают вопросы, сколько у нас может быть нодов различных.
[01:44:15.160 --> 01:44:16.160]  Ну да.
[01:44:17.160 --> 01:44:18.160]  Ну, и давайте чего заметим.
[01:44:19.160 --> 01:44:20.160]  Ну, понятно дело, что если C-нот, то CIT тоже мод.
[01:44:21.160 --> 01:44:22.160]  И C в квадрате мод.
[01:44:23.160 --> 01:44:24.160]  И C в кубе мод.
[01:44:25.160 --> 01:44:26.160]  И C в кубе, даже так, да. Вот у нас, типа, есть эти вот ноды, да.
[01:44:29.160 --> 01:44:30.160]  Ну, хорошо.
[01:44:31.160 --> 01:44:33.160]  Тогда чего заметим.
[01:44:34.160 --> 01:44:36.160]  Вот пускай есть еще какой-то нод, который сюда не попал.
[01:44:37.160 --> 01:44:38.160]  Вот он по длине будет такой же.
[01:44:39.160 --> 01:44:40.160]  Да.
[01:44:46.160 --> 01:44:47.160]  И чего я хочу сказать?
[01:44:48.160 --> 01:44:49.160]  С третьим.
[01:44:50.160 --> 01:44:53.160]  Я хочу сказать следующее.
[01:44:54.160 --> 01:44:56.160]  Денис, ты понимаешь, какой проф там есть?
[01:44:56.160 --> 01:44:57.160]  Ну, не знаю.
[01:44:58.160 --> 01:44:59.160]  Можно сказать, что просто не делится.
[01:45:00.160 --> 01:45:01.160]  Ну да, можно, например, так сказать.
[01:45:02.160 --> 01:45:03.160]  Типа да, действительно.
[01:45:04.160 --> 01:45:05.160]  Давайте посмотрим, что будет, если их разделить друг на друга, да.
[01:45:06.160 --> 01:45:07.160]  Да.
[01:45:08.160 --> 01:45:09.160]  Вот типа.
[01:45:10.160 --> 01:45:11.160]  Почему делится?
[01:45:12.160 --> 01:45:13.160]  Потому что по алгоритме расширенной, я могу сделать расширенные алгоритмы в клида, да.
[01:45:14.160 --> 01:45:18.160]  Значит, у меня один из нодов представляется в виде ах исходной на плюс бу, да.
[01:45:19.160 --> 01:45:20.160]  Да.
[01:45:21.160 --> 01:45:22.160]  Значит, он тоже должен делиться вот на этот нод.
[01:45:23.160 --> 01:45:24.160]  С, да.
[01:45:24.160 --> 01:45:25.160]  С делится на этот С.
[01:45:26.160 --> 01:45:27.160]  Б делится на этот С.
[01:45:28.160 --> 01:45:29.160]  Значит, и это делится.
[01:45:30.160 --> 01:45:31.160]  Вот.
[01:45:32.160 --> 01:45:33.160]  Ну, тогда что?
[01:45:34.160 --> 01:45:35.160]  Давай разделим.
[01:45:36.160 --> 01:45:37.160]  Тогда что я получу?
[01:45:38.160 --> 01:45:39.160]  Так я получу вектор единичной длины, у которого угол ни 0, ни 90, ни 180, ни 270.
[01:45:40.160 --> 01:45:41.160]  Это противоречие.
[01:45:42.160 --> 01:45:43.160]  Вот на самом деле, вот этот момент с тем, что у нас есть расширенный алгоритм в клида, он на самом деле ключевой.
[01:45:44.160 --> 01:45:45.160]  Потому что есть такие странные случаи.
[01:45:46.160 --> 01:45:49.160]  Например, можно запускать в клида не только для полей, да.
[01:45:50.160 --> 01:45:51.160]  Ну, и для колец каких-то некоторых хороших, да.
[01:45:51.160 --> 01:45:54.160]  А, например, можно определять многочлены в кольцах.
[01:45:55.160 --> 01:45:57.160]  То есть, ну, например, рассматривать только целочисленные многочлены.
[01:45:58.160 --> 01:45:59.160]  Вот.
[01:46:00.160 --> 01:46:03.160]  Типа, ну, например, х квадрат, рассмотреть, да, и 2.
[01:46:04.160 --> 01:46:09.160]  Вот, например, если мы, типа, определили в расценах числа, они х квадрат на 2 делятся, а в целых, типа, они и делятся.
[01:46:10.160 --> 01:46:12.160]  Ну, потому что 2, ну, на шее недавно уже у меня будет старший коэффициент четным.
[01:46:13.160 --> 01:46:14.160]  Очевидно, да.
[01:46:15.160 --> 01:46:16.160]  Но у них вполне можно определить нод, да.
[01:46:17.160 --> 01:46:19.160]  Он вполне, типа, есть алгоритмы, которые его вычисляют.
[01:46:19.160 --> 01:46:25.160]  Но при этом, типа, у нас никакой простотии речи быть не может, ну, основной термин арифметики.
[01:46:26.160 --> 01:46:28.160]  Потому что у нас не работает расширенный алгоритм нефклида и все такое.
[01:46:29.160 --> 01:46:30.160]  Ну, тут расширенный алгоритм нефклида работает.
[01:46:31.160 --> 01:46:35.160]  Короче, и отсюда можно вывести, соответственно, и лему архимеда, насколько я помню.
[01:46:36.160 --> 01:46:38.160]  Это когда у нас AB делится на P, значит, одно из них делится на P, да.
[01:46:39.160 --> 01:46:40.160]  А значит, у нас работает основная термин арифметики.
[01:46:41.160 --> 01:46:42.160]  Ну, короче, круто.
[01:46:43.160 --> 01:46:45.160]  А есть ли у нас, кажется, область целостности?
[01:46:46.160 --> 01:46:47.160]  Короче, иди нафиг.
[01:46:48.160 --> 01:46:52.160]  Ну, конечно, у нас все поняли, или если внуля, то у нас все хорошо будет, или не будет ничего хорошего.
[01:46:53.160 --> 01:46:54.160]  А, ты про это?
[01:46:55.160 --> 01:46:57.160]  Ты вот имел в виду с нодами или с…
[01:46:58.160 --> 01:46:59.160]  Конечно, если у нас…
[01:47:00.160 --> 01:47:01.160]  Да, можно.
[01:47:02.160 --> 01:47:06.160]  Да, да, ноды можно вычислять в каких-то случаях, можно.
[01:47:07.160 --> 01:47:11.160]  Но тут, да, то есть тут никакой, типа, расширенного алгоритма нефклида и речи быть не может.
[01:47:12.160 --> 01:47:14.160]  Ну, типа, давай, например, вот тут, типа, как…
[01:47:15.160 --> 01:47:16.160]  Что?
[01:47:17.160 --> 01:47:19.160]  Ну, если у тебя исходный алгоритм у тебя не работает, там нужен модифицированный EF-клит.
[01:47:20.160 --> 01:47:21.160]  То есть для многочленов.
[01:47:22.160 --> 01:47:23.160]  То есть, например, вот ты x² 2 никак не вычислишь, да.
[01:47:24.160 --> 01:47:26.160]  Там какая идея? Там, типа, идея в том, чтобы сказать, что…
[01:47:27.160 --> 01:47:29.160]  Ну, давай x² плюс 1, да, будет, бог с ним.
[01:47:30.160 --> 01:47:31.160]  Там, типа, идея какая?
[01:47:32.160 --> 01:47:38.160]  Если у тебя этот многочлен не делится на x, то там можно показать, что в любом кольце, у тебя, типа, эту штуку можно домножить на x, у тебя нод не изменится.
[01:47:39.160 --> 01:47:42.160]  Ну, типа, после домножения у тебя будет что-то вроде x² нод 2x².
[01:47:42.160 --> 01:47:46.160]  Ну, и давай, типа, вот для этих старших коэффициентов начнем фигачить алгоритм EF-клита.
[01:47:47.160 --> 01:47:52.160]  Ну, это то же самое вы, наверное, делали на линейной алгебре, когда рассматривали системы целочисленных факторов.
[01:47:54.160 --> 01:47:55.160]  Мы рассматривали.
[01:47:56.160 --> 01:47:57.160]  Вот, ну, типа, алгоритм такой.
[01:47:58.160 --> 01:47:59.160]  Давайте просто, типа, вот из этого вычтем это.
[01:48:00.160 --> 01:48:01.160]  Ну, тут два раза.
[01:48:02.160 --> 01:48:03.160]  Ну, давайте просто, что-то тройка была, да, например.
[01:48:04.160 --> 01:48:05.160]  Тогда вот мы отсюда вот это вычтем.
[01:48:06.160 --> 01:48:07.160]  Получается, типа, x² плюс 1, 2x².
[01:48:08.160 --> 01:48:09.160]  Ну, и потом, типа, дальше алгоритм EF-клита тут.
[01:48:09.160 --> 01:48:10.160]  Ну, понятно.
[01:48:11.160 --> 01:48:12.160]  Вот, и дальше мы, типа, смогли сократить одну из степеней.
[01:48:13.160 --> 01:48:14.160]  Как бы он закончится у вас когда-нибудь.
[01:48:15.160 --> 01:48:18.160]  Но при этом, так как вы тут сделали такой вот лайфхак, да, можно сказать,
[01:48:19.160 --> 01:48:21.160]  который тут казался клевым для вычтения нода, вы домножили на x²,
[01:48:22.160 --> 01:48:24.160]  то у вас сломался расширенный алгоритм EF-клита.
[01:48:25.160 --> 01:48:28.160]  Потому что там надо было с этой точечкой в центре разделить на x².
[01:48:29.160 --> 01:48:30.160]  Это не всегда возможно.
[01:48:31.160 --> 01:48:32.160]  Как-то так.
[01:48:33.160 --> 01:48:34.160]  Ну, давайте про применение алгоритма.
[01:48:35.160 --> 01:48:37.160]  Ну, первое применение алгоритма EF-клита для гауссовых чисел понятно.
[01:48:37.160 --> 01:48:38.160]  Давайте что-нибудь более простое.
[01:48:39.160 --> 01:48:40.160]  Давайте что-нибудь простенькое предложу.
[01:48:41.160 --> 01:48:44.160]  Давайте вот сейчас я приведу доказательства всем известного факта,
[01:48:45.160 --> 01:48:47.160]  которые вы в школе еще доказывали, но вместе с ним приведу алгоритм.
[01:48:48.160 --> 01:48:53.160]  Доказательства того, что если у вас P имеет вид 4k плюс 1,
[01:48:54.160 --> 01:48:55.160]  простого числа P, то...
[01:48:56.160 --> 01:48:57.160]  Да, но не делится на 2.
[01:48:58.160 --> 01:48:59.160]  Да, но не делится на 2.
[01:49:00.160 --> 01:49:02.160]  Во-вторых, типа, x² плюс y² найдутся такие целые x и y,
[01:49:03.160 --> 01:49:04.160]  что x² плюс y² меняется P.
[01:49:04.160 --> 01:49:05.160]  Вот мы сейчас типа...
[01:49:06.160 --> 01:49:08.160]  Это факт, да, его все, я думаю, знают, все умеют доказывать,
[01:49:09.160 --> 01:49:11.160]  но мы сейчас, типа, найдем алгоритм, как их искать за отлаг P.
[01:49:12.160 --> 01:49:14.160]  Вот, придумал вчера ночью.
[01:49:15.160 --> 01:49:17.160]  Ну, это реально забавно.
[01:49:18.160 --> 01:49:19.160]  Окей, ну как мы это будем доказывать?
[01:49:20.160 --> 01:49:21.160]  Доказывать будем по индукции.
[01:49:22.160 --> 01:49:23.160]  Почему бы нет?
[01:49:24.160 --> 01:49:25.160]  Ну, во-первых, что надо понимать?
[01:49:26.160 --> 01:49:27.160]  Давайте про эту штуку еще поймем.
[01:49:28.160 --> 01:49:31.160]  Заметим, что это просто x плюс y и умножить на x минус y и.
[01:49:31.160 --> 01:49:32.160]  Уминус y и.
[01:49:33.160 --> 01:49:34.160]  Ага.
[01:49:35.160 --> 01:49:37.160]  Хорошо, но это просто какой-то z, но умножить на z сопряженное.
[01:49:38.160 --> 01:49:41.160]  Хорошо, то есть у нас, типа, утверждается, что на самом деле
[01:49:42.160 --> 01:49:45.160]  каждое простое число вида 4k плюс 1, но у нас перестало быть простым здесь.
[01:49:46.160 --> 01:49:47.160]  Окей.
[01:49:48.160 --> 01:49:51.160]  Отсюда следует мультипликативность наличия решений, например.
[01:49:52.160 --> 01:49:54.160]  Ну, пока что это вроде бы нам не надо особо.
[01:49:55.160 --> 01:49:56.160]  Давайте, да, давайте пока это не делать.
[01:49:57.160 --> 01:49:58.160]  Хорошо.
[01:49:59.160 --> 01:50:00.160]  Или надо.
[01:50:01.160 --> 01:50:02.160]  Нет, не надо.
[01:50:03.160 --> 01:50:04.160]  Хорошо, вот пускай мы встретили простое число.
[01:50:05.160 --> 01:50:06.160]  Оно имеет вид 4k плюс 3.
[01:50:07.160 --> 01:50:08.160]  Там решений нет, очевидно, по модуле 4 посочетали.
[01:50:09.160 --> 01:50:10.160]  Встретили новое число p.
[01:50:11.160 --> 01:50:13.160]  Равное 4k плюс 1.
[01:50:14.160 --> 01:50:16.160]  А, смотрите, тогда еще я сейчас сделаю.
[01:50:17.160 --> 01:50:23.160]  Я скажу, что у меня существуют такие x и y, что x квадрат плюс y квадрат
[01:50:24.160 --> 01:50:26.160]  равняется нулю, но только по модулю p.
[01:50:28.160 --> 01:50:29.160]  То есть почти то, что надо.
[01:50:29.160 --> 01:50:31.160]  Ну, например, p квадрат и 0 квадрат.
[01:50:32.160 --> 01:50:33.160]  Нет, вот мне вот тут важный нюанс.
[01:50:34.160 --> 01:50:36.160]  Мне надо не p квадрат, а кроть не тривиальную штуку.
[01:50:37.160 --> 01:50:39.160]  Ну, например, если 4k плюс 1, то у меня же существует
[01:50:40.160 --> 01:50:41.160]  коронизация единички, например, да?
[01:50:42.160 --> 01:50:46.160]  Ну, значит, я могу типа тут выбрать какое-то, ну, типа единичку
[01:50:47.160 --> 01:50:48.160]  плюс x квадрат, например, так.
[01:50:49.160 --> 01:50:50.160]  Такой в принципе подойдет.
[01:50:51.160 --> 01:50:54.160]  А теперь, и при этом я x могу выбрать так.
[01:50:55.160 --> 01:50:56.160]  Я могу тут поставить либо x, либо минус x.
[01:50:56.160 --> 01:50:57.160]  Либо x, либо минус x.
[01:50:58.160 --> 01:51:00.160]  Я при этом могу считать, что x у меня абсолютно не превосходит
[01:51:01.160 --> 01:51:02.160]  p минус 1 пополам.
[01:51:05.160 --> 01:51:08.160]  Окей, давайте посмотрим, что у меня получится тогда, если я сделаю просто равенство.
[01:51:09.160 --> 01:51:13.160]  В просто равенстве у меня получится 1 плюс x квадрат равняется p умножить на k.
[01:51:14.160 --> 01:51:19.160]  Где k у меня не превосходит, p минус 1 поделить на 4, например, да?
[01:51:20.160 --> 01:51:21.160]  Ну, короче, он меньше p.
[01:51:22.160 --> 01:51:23.160]  Это самое важное, что нам тут надо.
[01:51:23.160 --> 01:51:24.160]  Я вроде не обманываю.
[01:51:27.160 --> 01:51:28.160]  Ну, плюс 1 p, наверное, да.
[01:51:29.160 --> 01:51:30.160]  Ну, короче, он меньше p будет строго.
[01:51:31.160 --> 01:51:32.160]  Я вот это хочу сказать.
[01:51:34.160 --> 01:51:35.160]  И при этом не будет равняться 0.
[01:51:37.160 --> 01:51:38.160]  Ну, тогда смотрите, что получается.
[01:51:39.160 --> 01:51:41.160]  Вот мы нашли какой-то делитель.
[01:51:42.160 --> 01:51:47.160]  То есть мы знаем, что x плюс i на x минус i.
[01:51:48.160 --> 01:51:50.160]  Ну, x плюс i на x минус i.
[01:51:50.160 --> 01:51:54.160]  Ну, x плюс i на x минус i у нас равняется pk.
[01:51:57.160 --> 01:51:58.160]  Ну, хорошо.
[01:51:59.160 --> 01:52:01.160]  Давайте тогда рассмотрим x плюс i.
[01:52:02.160 --> 01:52:03.160]  Как он?
[01:52:04.160 --> 01:52:05.160]  Ну, давайте рассмотрим тогда, вот тут сюда перейдем.
[01:52:06.160 --> 01:52:08.160]  Давайте рассмотрим нода x плюс i и p.
[01:52:15.160 --> 01:52:16.160]  Какие могут быть случаи?
[01:52:17.160 --> 01:52:18.160]  Ну, во-первых, он пр-шки точно не равен.
[01:52:18.160 --> 01:52:20.160]  Во-вторых, он может быть равняться либо...
[01:52:21.160 --> 01:52:24.160]  Что, давайте предположим, что у p нет решений, например.
[01:52:25.160 --> 01:52:26.160]  Или нет, не надо это предполагать.
[01:52:27.160 --> 01:52:28.160]  Не-не-не, стоп, сейчас.
[01:52:29.160 --> 01:52:30.160]  Сейчас надо аккуратно это сделать.
[01:52:31.160 --> 01:52:32.160]  x плюс i, x минус i, да.
[01:52:33.160 --> 01:52:34.160]  Видимо.
[01:52:39.160 --> 01:52:40.160]  Давайте сейчас сделаем.
[01:52:41.160 --> 01:52:42.160]  А нет, все.
[01:52:43.160 --> 01:52:44.160]  Окей, x плюс i.
[01:52:45.160 --> 01:52:46.160]  Что надо сделать?
[01:52:46.160 --> 01:52:47.160]  Короче, идея...
[01:52:47.160 --> 01:52:48.160]  Короче, давайте алгоритм.
[01:52:48.160 --> 01:52:50.160]  Алгоритм заключается в том, что вот это число всегда будет, типа, решением.
[01:52:51.160 --> 01:52:52.160]  Чего мы делаем?
[01:52:53.160 --> 01:52:56.160]  Сейчас мы доказываем, что для любого простого p существуют такие штуки
[01:52:57.160 --> 01:52:58.160]  и находим алгоритм, который за lockpake находят.
[01:52:59.160 --> 01:53:00.160]  Вообще, на самом деле, алгоритм заключается в том,
[01:53:01.160 --> 01:53:03.160]  что если мы такой нод вычислим, то мы уже получим нужное решение.
[01:53:05.160 --> 01:53:06.160]  Вот сейчас надо это аккуратненько запров...
[01:53:07.160 --> 01:53:08.160]  Ты же x еще не нашел.
[01:53:09.160 --> 01:53:10.160]  Нет, так я x могу вот тут найти.
[01:53:11.160 --> 01:53:12.160]  Вычисляем как нод на x?
[01:53:13.160 --> 01:53:14.160]  Ну, например, да.
[01:53:14.160 --> 01:53:16.160]  Не надо просто из минус 1 вычислить корень.
[01:53:17.160 --> 01:53:18.160]  А, в плане ты берешь вот x оттуда.
[01:53:19.160 --> 01:53:20.160]  Да-да, я же x могу найти.
[01:53:21.160 --> 01:53:22.160]  Ладно.
[01:53:23.160 --> 01:53:24.160]  Вот, но идея в том, что вот это краски будет, типа, делителем p.
[01:53:25.160 --> 01:53:26.160]  Не тривиальным.
[01:53:27.160 --> 01:53:28.160]  Как это доказать?
[01:53:29.160 --> 01:53:30.160]  Давайте подумаем.
[01:53:31.160 --> 01:53:32.160]  Хорошо, давайте, во-первых, посмотрим на модуль.
[01:53:33.160 --> 01:53:34.160]  x плюс i.
[01:53:35.160 --> 01:53:38.160]  Но это очевидно x квадрат плюс 1.
[01:53:39.160 --> 01:53:40.160]  Но это равно p, да?
[01:53:41.160 --> 01:53:42.160]  Фигня какая-то.
[01:53:42.160 --> 01:53:43.160]  Так.
[01:53:46.160 --> 01:53:47.160]  Так.
[01:53:48.160 --> 01:53:49.160]  Сейчас все будет.
[01:53:50.160 --> 01:53:51.160]  А, ну давайте, типа, что заметим?
[01:53:52.160 --> 01:53:53.160]  Что вот эта штука, она нервна...
[01:53:54.160 --> 01:53:55.160]  Давайте закажем, что она нервна 1.
[01:53:56.160 --> 01:53:57.160]  Почему она нервна 1?
[01:53:58.160 --> 01:53:59.160]  Потому что, если я рассмотрю, тогда нод x...
[01:54:00.160 --> 01:54:01.160]  Я просто докажу это.
[01:54:02.160 --> 01:54:03.160]  Что?
[01:54:04.160 --> 01:54:05.160]  x минус i?
[01:54:06.160 --> 01:54:07.160]  Тогда, типа, смотри, если у меня эта штука...
[01:54:08.160 --> 01:54:09.160]  Представляешь, что эта штука равна 1, да?
[01:54:10.160 --> 01:54:11.160]  Тогда у меня вот эта штука тоже равна 1.
[01:54:12.160 --> 01:54:13.160]  Почему?
[01:54:14.160 --> 01:54:15.160]  Почему это так?
[01:54:16.160 --> 01:54:18.160]  Потому что у тебя, типа, это то же самое, что...
[01:54:19.160 --> 01:54:20.160]  Смысл, у тебя они сопряженные.
[01:54:21.160 --> 01:54:22.160]  Если у тебя есть какой-то общий делитель у сопряженных,
[01:54:23.160 --> 01:54:24.160]  то давай его сопряжен...
[01:54:25.160 --> 01:54:26.160]  Ну, это...
[01:54:27.160 --> 01:54:28.160]  x плюс z на самом деле с сопряженными к x плюс z.
[01:54:29.160 --> 01:54:30.160]  А p это сопряженная к p.
[01:54:31.160 --> 01:54:32.160]  Потому что p целая.
[01:54:33.160 --> 01:54:34.160]  Ну и давайте 또 заметим, что если у тебя тут есть какой-то делитель общий,
[01:54:35.160 --> 01:54:36.160]  то мы его можем сопрячь
[01:54:37.160 --> 01:54:38.160]  и получить делитель с таким же модулем здесь.
[01:54:39.160 --> 01:54:40.160]  И наоборот...
[01:54:40.160 --> 01:54:42.020]  Туда и сюда, окей?
[01:54:42.020 --> 01:54:50.400]  Сейчас мы сейчас для произвольного x проверяем, что x² плюс 1 не делится на p с помощью нода.
[01:54:50.400 --> 01:54:52.400]  Смотри, давай, вот ты тут пропустил немного.
[01:54:52.400 --> 01:54:58.960]  Мы нашли пару 1, мы нашли такой x, что 1 плюс x² делится на p.
[01:54:58.960 --> 01:55:00.960]  Такой мы можем найти залог p.
[01:55:00.960 --> 01:55:05.960]  Хорошо, теперь я рассматриваю, тогда смотри, у меня 1 плюс x² это p умножить на k.
[01:55:05.960 --> 01:55:09.960]  Вот я утверждаю, что можно рассмотреть нод x плюс i и p.
[01:55:09.960 --> 01:55:20.960]  И я хочу сейчас доказать, что он как раз-таки будет по модулю равен x² плюс 1 будет ровно p.
[01:55:20.960 --> 01:55:22.960]  Сейчас, нет, не то сказал.
[01:55:22.960 --> 01:55:24.960]  Смотри, я как-то фигню сказал.
[01:55:24.960 --> 01:55:27.960]  Я нашел 1 плюс x², которое делится на p.
[01:55:27.960 --> 01:55:30.960]  Вот это k у меня, можно считать, он меньше p.
[01:55:30.960 --> 01:55:32.960]  Что я хочу сделать?
[01:55:32.960 --> 01:55:36.960]  Я хочу вычислить вот такую штуку x плюс i и нод p.
[01:55:36.960 --> 01:55:38.960]  Она у меня будет равна какому-то комплексному числу.
[01:55:38.960 --> 01:55:40.960]  a плюс bi.
[01:55:40.960 --> 01:55:42.960]  Окей?
[01:55:42.960 --> 01:55:49.960]  Вот я сейчас хочу доказать, что вот на самом деле вот это число, оно типа по модулю,
[01:55:49.960 --> 01:55:52.960]  по норме, оно будет давать p.
[01:55:52.960 --> 01:55:56.960]  То есть a² плюс b² будет равняться ровно p.
[01:55:56.960 --> 01:55:58.960]  Вот цель у меня сейчас такая.
[01:55:58.960 --> 01:56:01.960]  Ну хорошо, давай предположим, что он равен 1, да?
[01:56:01.960 --> 01:56:03.960]  Пускай у меня случай фиговый.
[01:56:03.960 --> 01:56:05.960]  Тогда у меня эта штука равна 1.
[01:56:05.960 --> 01:56:06.960]  Не знаю, что у меня произошло.
[01:56:06.960 --> 01:56:10.960]  У меня x плюс i взаимно просто с p.
[01:56:10.960 --> 01:56:12.960]  x минус i взаимно просто с p.
[01:56:12.960 --> 01:56:14.960]  Ну тогда их произведение взаимно просто с p, да?
[01:56:14.960 --> 01:56:16.960]  Все такое.
[01:56:16.960 --> 01:56:18.960]  Ну типа тут через Euclid можно это доказать.
[01:56:18.960 --> 01:56:20.960]  Упражнение на теорию чисел.
[01:56:20.960 --> 01:56:22.960]  Вот, с другой стороны оно может равняться p, да?
[01:56:25.960 --> 01:56:27.960]  Точнее даже не так.
[01:56:27.960 --> 01:56:30.960]  С другой стороны его норма может равняться, да,
[01:56:30.960 --> 01:56:34.960]  его норма, она может равняться либо 1, либо p, либо p², да?
[01:56:34.960 --> 01:56:36.960]  Пускай она равняется p².
[01:56:36.960 --> 01:56:39.960]  Либо ещики, либо p, либо p²?
[01:56:39.960 --> 01:56:40.960]  Да.
[01:56:40.960 --> 01:56:42.960]  Ну понятно почему.
[01:56:42.960 --> 01:56:44.960]  Потому что у тебя делимость чисел,
[01:56:44.960 --> 01:56:48.960]  из нее следует делимость их, соответственно, норм.
[01:56:50.960 --> 01:56:52.960]  Ну потому что у тебя типа ab это
[01:56:54.960 --> 01:56:56.960]  норма a, потому что нормa b.
[01:56:56.960 --> 01:56:58.960]  Вот, ровно из этого, да?
[01:56:58.960 --> 01:57:00.960]  То есть ровно из этого следует, что у меня тут норма,
[01:57:00.960 --> 01:57:02.960]  она может быть равна либо ещики, либо p, либо p².
[01:57:02.960 --> 01:57:04.960]  В случае, когда норма равна ещике,
[01:57:04.960 --> 01:57:06.960]  у меня отселся.
[01:57:06.960 --> 01:57:09.960]  Я хочу сейчас отсеть, когда норма равна равняется p².
[01:57:10.960 --> 01:57:12.960]  Ну это что значит?
[01:57:12.960 --> 01:57:14.960]  Это значит...
[01:57:14.960 --> 01:57:16.960]  Это значит, что...
[01:57:16.960 --> 01:57:18.960]  Ну может быть сейчас...
[01:57:18.960 --> 01:57:20.960]  Ну если у того норма p²...
[01:57:20.960 --> 01:57:22.960]  Да, да, все, да, да, все.
[01:57:22.960 --> 01:57:26.960]  Действительно, у сопряженного тоже будет норма p², да?
[01:57:26.960 --> 01:57:28.960]  Ну тогда типа что будет?
[01:57:28.960 --> 01:57:30.960]  Будет произведением норма p².
[01:57:30.960 --> 01:57:32.960]  У их произведения...
[01:57:34.960 --> 01:57:36.960]  Сейчас, произведение вот этих нодов, да?
[01:57:38.960 --> 01:57:40.960]  А, да, то есть это значит, что у нас x плюс i норма,
[01:57:40.960 --> 01:57:42.960]  она как минимум p², да?
[01:57:44.960 --> 01:57:46.960]  x минус i как минимум норма p-square, да?
[01:57:48.960 --> 01:57:50.960]  Так...
[01:57:50.960 --> 01:57:52.960]  А это значит, что мы получили претворечие вот здесь.
[01:57:52.960 --> 01:57:54.960]  Да? Ты это имел в виду?
[01:57:54.960 --> 01:57:56.960]  Все, конец.
[01:57:56.960 --> 01:57:58.960]  Значит, мы доказали, что норма равняется p у этой штуки.
[01:57:58.960 --> 01:58:00.960]  Давайте заметим, что это значит,
[01:58:00.960 --> 01:58:02.960]  что мы нашли решение уравнения x²,
[01:58:02.960 --> 01:58:04.960]  потому что y² равно p.
[01:58:04.960 --> 01:58:06.960]  Как вам фокус?
[01:58:06.960 --> 01:58:08.960]  Не очень?
[01:58:08.960 --> 01:58:10.960]  А если у них норма...
[01:58:10.960 --> 01:58:12.960]  Представим, что у них норма у обоих по p.
[01:58:12.960 --> 01:58:14.960]  Нет, не может быть. Я рассмотрю k меньше p.
[01:58:14.960 --> 01:58:16.960]  А сейчас, у обоих по p?
[01:58:16.960 --> 01:58:18.960]  У x плюс i и x минус i.
[01:58:18.960 --> 01:58:20.960]  Ты это имеешь в виду?
[01:58:20.960 --> 01:58:22.960]  Сейчас...
[01:58:22.960 --> 01:58:24.960]  Короче, что у них норма
[01:58:24.960 --> 01:58:26.960]  из самой штуки,
[01:58:26.960 --> 01:58:28.960]  она очевидна больше
[01:58:28.960 --> 01:58:30.960]  либо равна норме нода,
[01:58:30.960 --> 01:58:32.960]  ее и его с чем угодно.
[01:58:32.960 --> 01:58:34.960]  Сейчас, что ты имеешь в виду?
[01:58:34.960 --> 01:58:36.960]  Я утверждаю,
[01:58:36.960 --> 01:58:38.960]  что у меня нода ab
[01:58:40.960 --> 01:58:42.960]  обязан быть делителем
[01:58:42.960 --> 01:58:44.960]  нормы a.
[01:58:44.960 --> 01:58:46.960]  Я хочу сказать,
[01:58:46.960 --> 01:58:48.960]  что тогда у нас норма x плюс i...
[01:58:48.960 --> 01:58:50.960]  Но x плюс i может быть любой,
[01:58:50.960 --> 01:58:52.960]  я рассматриваю только ноды x плюс i и p.
[01:58:52.960 --> 01:58:54.960]  Просто она у нас хотя бы p,
[01:58:54.960 --> 01:58:56.960]  у x минус i норма такая же,
[01:58:56.960 --> 01:58:58.960]  то есть хотя бы p,
[01:58:58.960 --> 01:59:00.960]  и у их произведения получается норма
[01:59:00.960 --> 01:59:02.960]  хотя бы p квадратка,
[01:59:02.960 --> 01:59:04.960]  у нас правое число меньше,
[01:59:04.960 --> 01:59:06.960]  а правое у нас норма...
[01:59:06.960 --> 01:59:08.960]  А, ну все, все.
[01:59:08.960 --> 01:59:10.960]  Так, давайте...
[01:59:10.960 --> 01:59:12.960]  У меня есть подозрение,
[01:59:12.960 --> 01:59:14.960]  что люди записи вообще ничего не поняли.
[01:59:14.960 --> 01:59:16.960]  У меня подозрение,
[01:59:16.960 --> 01:59:18.960]  что мы не вывели случайно,
[01:59:18.960 --> 01:59:20.960]  что ворона 1.
[01:59:20.960 --> 01:59:22.960]  Нет, мы рассматривали ноды,
[01:59:22.960 --> 01:59:24.960]  все окей.
[01:59:24.960 --> 01:59:26.960]  Да.
[01:59:26.960 --> 01:59:28.960]  Да, давайте еще раз повторю доказательства
[01:59:28.960 --> 01:59:30.960]  и алгоритмы.
[01:59:30.960 --> 01:59:32.960]  Все сходится.
[01:59:32.960 --> 01:59:34.960]  Мы можем за от лакп...
[01:59:34.960 --> 01:59:36.960]  Кстати, да, за от лакп
[01:59:36.960 --> 01:59:38.960]  можно не...
[01:59:38.960 --> 01:59:40.960]  Ладно, тоже равномизированный есть алгоритм,
[01:59:40.960 --> 01:59:42.960]  но он приятнее, пофиг.
[01:59:42.960 --> 01:59:44.960]  Можно вычислить x такой,
[01:59:44.960 --> 01:59:46.960]  что x квадрат сравним с минус 1
[01:59:46.960 --> 01:59:48.960]  по модулю p.
[01:59:48.960 --> 01:59:50.960]  Потому что у нас p имеет...
[01:59:50.960 --> 01:59:52.960]  Хорошо, ну тогда у нас 1 плюс x квадрат,
[01:59:52.960 --> 01:59:54.960]  мы можем также считать,
[01:59:54.960 --> 01:59:56.960]  что x меньше равен половинке p,
[01:59:56.960 --> 01:59:58.960]  а значит эта штука будет равна
[01:59:58.960 --> 02:00:00.960]  p на k,
[02:00:00.960 --> 02:00:02.960]  где k меньше, чем
[02:00:02.960 --> 02:00:04.960]  соответственно p
[02:00:04.960 --> 02:00:06.960]  строго.
[02:00:06.960 --> 02:00:08.960]  Ну тогда идея в чем?
[02:00:08.960 --> 02:00:10.960]  Идея в том, чтобы сказать, что это 1 плюс x
[02:00:10.960 --> 02:00:12.960]  и это 1 минус x.
[02:00:12.960 --> 02:00:14.960]  Да, нет, я просто повторяю,
[02:00:14.960 --> 02:00:16.960]  потому что, мне кажется, на камере
[02:00:16.960 --> 02:00:18.960]  вообще ничего не понятно.
[02:00:18.960 --> 02:00:20.960]  Он сказал, что что-то добавит, 100%.
[02:00:20.960 --> 02:00:22.960]  Он сказал, что что-то добавит,
[02:00:22.960 --> 02:00:24.960]  и мне кажется, вот это захочет.
[02:00:24.960 --> 02:00:26.960]  Пусть он лучше добавит это, чем
[02:00:26.960 --> 02:00:28.960]  галилы сейфирасы.
[02:00:28.960 --> 02:00:30.960]  Ну да.
[02:00:30.960 --> 02:00:32.960]  Вот, ну и типа...
[02:00:32.960 --> 02:00:34.960]  И тут мы какому противоречию приходили?
[02:00:34.960 --> 02:00:36.960]  Мы просто смотрели на
[02:00:36.960 --> 02:00:38.960]  1 плюс x и p.
[02:00:38.960 --> 02:00:40.960]  И 1 плюс...
[02:00:40.960 --> 02:00:42.960]  Минус...
[02:00:42.960 --> 02:00:44.960]  Господи.
[02:00:44.960 --> 02:00:46.960]  Все правильно делаю.
[02:00:46.960 --> 02:00:48.960]  И p. И типа дальше мы смотрели,
[02:00:48.960 --> 02:00:50.960]  у них норма одинаковой должна быть,
[02:00:50.960 --> 02:00:52.960]  и она может быть равна либо 1, либо p, либо p в квадрате,
[02:00:52.960 --> 02:00:54.960]  потому что это делитель p.
[02:00:54.960 --> 02:00:56.960]  И дальше мы отменили случай 1,
[02:00:56.960 --> 02:00:58.960]  p в квадрате остается только случай, когда норма тут равна p.
[02:00:58.960 --> 02:01:00.960]  А это значит, что вот как раз вот это число
[02:01:00.960 --> 02:01:02.960]  галсова, оно дает нам решение
[02:01:02.960 --> 02:01:04.960]  x квадрат просто y квадрат равно p. Конец.
[02:01:04.960 --> 02:01:06.960]  Вот, все.
[02:01:06.960 --> 02:01:08.960]  Это все, что касается
[02:01:08.960 --> 02:01:10.960]  алгоритма Ивклида. Я вроде бы
[02:01:10.960 --> 02:01:12.960]  все, что хотел
[02:01:12.960 --> 02:01:14.960]  рассказал. По алгоритму Ивклида
[02:01:14.960 --> 02:01:16.960]  наконец-то все.
[02:01:16.960 --> 02:01:18.960]  Вот, а дальше
[02:01:18.960 --> 02:01:20.960]  я не знаю, насколько это вам интересно будет.
[02:01:20.960 --> 02:01:22.960]  Типа
[02:01:22.960 --> 02:01:24.960]  мультипликативные функции
[02:01:24.960 --> 02:01:26.960]  свертки Деркли. Но кажется,
[02:01:26.960 --> 02:01:28.960]  все и так знают уже, когда школьниками были.
[02:01:30.960 --> 02:01:32.960]  Что нет.
[02:01:32.960 --> 02:01:34.960]  Вот.
[02:01:34.960 --> 02:01:36.960]  Расширенные алгоритмы Ивклида рассказали полностью.
[02:01:36.960 --> 02:01:38.960]  Галсовые числа рассказали.
[02:01:38.960 --> 02:01:40.960]  И расширение пленомов рассказали.
[02:01:40.960 --> 02:01:42.960]  Все, остается только мультипликативные функции тогда.
[02:01:42.960 --> 02:01:44.960]  Я думаю, это можно сделать все
[02:01:44.960 --> 02:01:46.960]  после третьего перерыва
[02:01:46.960 --> 02:01:48.960]  или второго.
[02:01:48.960 --> 02:01:50.960]  Мы Ленин Рештоф рассказали. Сейчас будет его применение.
[02:01:50.960 --> 02:01:52.960]  Некоторое. Там
[02:01:52.960 --> 02:01:54.960]  еще пару технических нюансов задену.
[02:01:54.960 --> 02:01:56.960]  Потому что это
[02:01:56.960 --> 02:01:58.960]  Ленин Рештоф придется немного модифицировать,
[02:01:58.960 --> 02:02:00.960]  чтобы быстро все вычислять. Ну и нормально.
[02:02:00.960 --> 02:02:02.960]  Ну типа тут для
[02:02:02.960 --> 02:02:04.960]  участников
[02:02:04.960 --> 02:02:06.960]  ACPC там ничего. Нового не будет
[02:02:06.960 --> 02:02:08.960]  особо. Ну и для тех, кто тайников посещал.
[02:02:08.960 --> 02:02:10.960]  Но
[02:02:10.960 --> 02:02:12.960]  ACPC иметься в виду 1 и 2 и там
[02:02:12.960 --> 02:02:14.960]  1 и 4.
[02:02:14.960 --> 02:02:16.960]  Скорее всего все знают. Ну типа
[02:02:16.960 --> 02:02:18.960]  для тех, кто олимпиадами
[02:02:18.960 --> 02:02:20.960]  не сильно занимался, я думаю, это будет полезно.
[02:02:20.960 --> 02:02:22.960]  Так что я это все-таки проговорю.
[02:02:22.960 --> 02:02:24.960]  Все будет ок. Давайте
[02:02:24.960 --> 02:02:26.960]  ведем определение мультипликативной функции.
[02:02:26.960 --> 02:02:28.960]  Вот у нас F
[02:02:28.960 --> 02:02:30.960]  будет называться мультипликативной.
[02:02:32.960 --> 02:02:34.960]  Тогда и только тогда,
[02:02:34.960 --> 02:02:36.960]  когда для любых
[02:02:36.960 --> 02:02:38.960]  взаимнопростых чисел A и B
[02:02:38.960 --> 02:02:40.960]  выполняется
[02:02:40.960 --> 02:02:42.960]  F от A
[02:02:42.960 --> 02:02:44.960]  B равняется
[02:02:44.960 --> 02:02:46.960]  F от A умножить на F от B.
[02:02:50.960 --> 02:02:52.960]  Ну как-то так.
[02:02:52.960 --> 02:02:54.960]  Окей. Какие есть примеры
[02:02:54.960 --> 02:02:56.960]  мультипликативных функций? Давайте
[02:02:56.960 --> 02:02:58.960]  самые базовые примеры проведем.
[02:03:00.960 --> 02:03:02.960]  Вот функция умножения.
[02:03:02.960 --> 02:03:04.960]  Вообще гениальная функция.
[02:03:04.960 --> 02:03:06.960]  Нет, ну хорошо. Есть типа
[02:03:06.960 --> 02:03:08.960]  давайте совсем
[02:03:08.960 --> 02:03:10.960]  есть функция ID, например,
[02:03:10.960 --> 02:03:12.960]  которая просто
[02:03:12.960 --> 02:03:14.960]  возвращает нам то же самое число N.
[02:03:14.960 --> 02:03:16.960]  Ну она очевидно мультипликативная.
[02:03:16.960 --> 02:03:18.960]  Несколько могу посудить.
[02:03:18.960 --> 02:03:20.960]  Вот.
[02:03:20.960 --> 02:03:22.960]  Key есть еще. Есть, например, функция,
[02:03:22.960 --> 02:03:24.960]  которая у нас
[02:03:24.960 --> 02:03:26.960]  называется Noxiat1.
[02:03:26.960 --> 02:03:28.960]  Это индикатор единички. То есть она
[02:03:28.960 --> 02:03:30.960]  возвращает единичку,
[02:03:30.960 --> 02:03:32.960]  если у нас N равна 1
[02:03:32.960 --> 02:03:34.960]  и 0 в ином случае.
[02:03:36.960 --> 02:03:38.960]  Корень. Ну корень степенные
[02:03:38.960 --> 02:03:40.960]  функции. Ну не хочется рассматривать. Мы все-таки хотим
[02:03:40.960 --> 02:03:42.960]  какие-то коммедаторы решать.
[02:03:42.960 --> 02:03:44.960]  Вообще да, в принципе, там любая функция, типа N
[02:03:44.960 --> 02:03:46.960]  степени альфы подходит, наверное.
[02:03:46.960 --> 02:03:48.960]  Вот. Но мы такие рассматривать не будем.
[02:03:48.960 --> 02:03:50.960]  Например, еще есть
[02:03:50.960 --> 02:03:52.960]  функция, которая всегда единичку возвращает.
[02:03:52.960 --> 02:03:54.960]  Какая-то константа.
[02:03:54.960 --> 02:03:56.960]  1. Она тоже у нас мультипликативная.
[02:03:56.960 --> 02:03:58.960]  Ну и давайте наконец
[02:03:58.960 --> 02:04:00.960]  до сложного примера доберемся. Я думаю
[02:04:00.960 --> 02:04:02.960]  многие знакомы с функцией Эллера.
[02:04:02.960 --> 02:04:04.960]  Которая определяется как...
[02:04:04.960 --> 02:04:06.960]  Она у нас была.
[02:04:06.960 --> 02:04:08.960]  Она у нас была, да?
[02:04:08.960 --> 02:04:10.960]  Да, конечно.
[02:04:10.960 --> 02:04:12.960]  Окей. Давайте напомним, что вопрос
[02:04:12.960 --> 02:04:14.960]  количества
[02:04:14.960 --> 02:04:16.960]  k, N. Количество k таких, что
[02:04:16.960 --> 02:04:18.960]  k, N, взаимнопросто, где k, типа у нас
[02:04:18.960 --> 02:04:20.960]  от 1 до N.
[02:04:20.960 --> 02:04:22.960]  У нас даже сверх, где все было.
[02:04:22.960 --> 02:04:24.960]  Даже так, да?
[02:04:24.960 --> 02:04:26.960]  Не у всех.
[02:04:26.960 --> 02:04:28.960]  Нет, у всех. В первом семестре
[02:04:28.960 --> 02:04:30.960]  комбы.
[02:04:30.960 --> 02:04:32.960]  Сейчас.
[02:04:32.960 --> 02:04:34.960]  Либо я не понимаю, что у нас сейчас сразу сверх,
[02:04:34.960 --> 02:04:36.960]  либо я... Кстати, камера
[02:04:36.960 --> 02:04:38.960]  второй доску записывает.
[02:04:38.960 --> 02:04:40.960]  Полностью.
[02:04:40.960 --> 02:04:42.960]  Ну хорошо, давайте напомним.
[02:04:42.960 --> 02:04:44.960]  Я думаю, не страшно.
[02:04:44.960 --> 02:04:46.960]  Ну окей.
[02:04:46.960 --> 02:04:48.960]  Хорошо.
[02:04:48.960 --> 02:04:50.960]  Давайте какие-то менее тривиальные примеры, которые
[02:04:50.960 --> 02:04:52.960]  возможно
[02:04:52.960 --> 02:04:54.960]  неподготовленный слушатель не знает.
[02:04:54.960 --> 02:04:56.960]  Например, есть такая функция замечательная.
[02:04:56.960 --> 02:04:58.960]  Мы возможно даже докажем,
[02:04:58.960 --> 02:05:00.960]  что она, типа, мультипликативная.
[02:05:00.960 --> 02:05:02.960]  Например, такая забавная функция. Мы суммируем k
[02:05:02.960 --> 02:05:04.960]  от 1 до N и суммируем
[02:05:04.960 --> 02:05:06.960]  значение нода k, N.
[02:05:06.960 --> 02:05:08.960]  Радикал, кажется, мультипликативный.
[02:05:08.960 --> 02:05:10.960]  Радикал, да.
[02:05:12.960 --> 02:05:14.960]  И давайте прям совсем
[02:05:14.960 --> 02:05:16.960]  какой-то жесткий пример проведу.
[02:05:16.960 --> 02:05:18.960]  Возможно, мы им, кстати, воспользуемся.
[02:05:18.960 --> 02:05:20.960]  Возможно, нет. Ну короче, типа, мы там
[02:05:20.960 --> 02:05:22.960]  обсуждали галосовый число, но на самом деле
[02:05:22.960 --> 02:05:24.960]  функция, которая
[02:05:24.960 --> 02:05:26.960]  равняется одной четвертой
[02:05:26.960 --> 02:05:28.960]  от количества решений уравнения
[02:05:28.960 --> 02:05:30.960]  х квадратов
[02:05:30.960 --> 02:05:32.960]  н,
[02:05:32.960 --> 02:05:34.960]  тоже является
[02:05:34.960 --> 02:05:36.960]  мультипликативной.
[02:05:38.960 --> 02:05:40.960]  Но это вроде бы очевидно.
[02:05:40.960 --> 02:05:42.960]  Ну, типа, кто хочет доказать,
[02:05:42.960 --> 02:05:44.960]  это я к чему привожу, к тому, что
[02:05:44.960 --> 02:05:46.960]  мультипликативных функций, ну, их, типа, много.
[02:05:46.960 --> 02:05:48.960]  То есть всякие разные бывают, всякие
[02:05:48.960 --> 02:05:50.960]  веселые. Давайте научимся их быстро вычислять
[02:05:50.960 --> 02:05:52.960]  для чисел от 1 до N.
[02:05:52.960 --> 02:05:54.960]  Ну,
[02:05:54.960 --> 02:05:56.960]  например,
[02:05:56.960 --> 02:05:58.960]  функцию
[02:05:58.960 --> 02:06:00.960]  вычислим фиата.
[02:06:00.960 --> 02:06:02.960]  Вот, а перед этим надо кое-что понять про них.
[02:06:02.960 --> 02:06:04.960]  Про мультипликтивные функции верен, по сути,
[02:06:04.960 --> 02:06:06.960]  один и тот же факт.
[02:06:06.960 --> 02:06:08.960]  Тут мы говорим, что мы можем функцию разложить
[02:06:08.960 --> 02:06:10.960]  на произведении двух функций за именно простыми
[02:06:10.960 --> 02:06:12.960]  аргументами. Но вот если у нас известна
[02:06:12.960 --> 02:06:14.960]  факторизация числа n,
[02:06:16.960 --> 02:06:18.960]  то что мы можем сделать? Ну, по сути, мы же можем
[02:06:18.960 --> 02:06:20.960]  просто взять эту функцию, расписать как
[02:06:20.960 --> 02:06:22.960]  f от p 1
[02:06:22.960 --> 02:06:24.960]  k 1, так далее,
[02:06:24.960 --> 02:06:26.960]  f от p mt в степени
[02:06:26.960 --> 02:06:28.960]  k mt.
[02:06:28.960 --> 02:06:30.960]  И, то есть, по факту, если мы знаем, как
[02:06:30.960 --> 02:06:32.960]  ведет себя функция в каждой такой
[02:06:32.960 --> 02:06:34.960]  точке в степени простого числа,
[02:06:34.960 --> 02:06:36.960]  то мы знаем, какая функция у нас в принципе задана.
[02:06:36.960 --> 02:06:38.960]  Окей.
[02:06:38.960 --> 02:06:40.960]  Ну, давайте, например, сделаем это для функции
[02:06:40.960 --> 02:06:42.960]  фи. Для функции фи все вроде бы очевидно, да?
[02:06:42.960 --> 02:06:44.960]  Типа там
[02:06:44.960 --> 02:06:46.960]  фи, если мы туда подставим сначала 1, потом
[02:06:46.960 --> 02:06:48.960]  p, потом p в квадрате, так далее.
[02:06:48.960 --> 02:06:50.960]  А что мы получим? Мы получим
[02:06:50.960 --> 02:06:52.960]  1, тут мы получим
[02:06:52.960 --> 02:06:54.960]  p-1, ну и дальше мы получим, понятно
[02:06:54.960 --> 02:06:56.960]  дело, p в квадрате
[02:06:56.960 --> 02:06:58.960]  минус p, p в
[02:06:58.960 --> 02:07:00.960]  кубе минус p в квадрате, ну и так далее.
[02:07:02.960 --> 02:07:04.960]  Собственно, как предлагается считать?
[02:07:04.960 --> 02:07:06.960]  Вот как предлагается это все дело считать?
[02:07:06.960 --> 02:07:08.960]  Предлагается для начала
[02:07:08.960 --> 02:07:10.960]  выделить простые числа,
[02:07:10.960 --> 02:07:12.960]  что кажется логичным, потом
[02:07:12.960 --> 02:07:14.960]  хочется
[02:07:14.960 --> 02:07:16.960]  взять и
[02:07:16.960 --> 02:07:18.960]  для них как-то формулы посчитать, а потом
[02:07:18.960 --> 02:07:20.960]  с помощью линейного решта как-то научиться быстро
[02:07:20.960 --> 02:07:22.960]  раскладывать число
[02:07:22.960 --> 02:07:24.960]  вида n на 2 взаимопростых делителя.
[02:07:24.960 --> 02:07:26.960]  Но вот оказывается, что
[02:07:26.960 --> 02:07:28.960]  этого делать не надо, можно просто немного модифицировать
[02:07:28.960 --> 02:07:30.960]  алгоритм линейного решта, и тогда
[02:07:30.960 --> 02:07:32.960]  оно все будет хорошо. Что я конкретно предлагаю
[02:07:32.960 --> 02:07:34.960]  сделать?
[02:07:34.960 --> 02:07:36.960]  Я предлагаю,
[02:07:36.960 --> 02:07:38.960]  ну давайте его заведем, собственно у нас
[02:07:38.960 --> 02:07:40.960]  будет вектор v'
[02:07:40.960 --> 02:07:42.960]  v' это вектор int,
[02:07:42.960 --> 02:07:44.960]  у нас там будет
[02:07:44.960 --> 02:07:46.960]  не знаю, minp, без оптимизации каких-либо
[02:07:46.960 --> 02:07:48.960]  серьезных.
[02:07:50.960 --> 02:07:52.960]  Как у нас выглядел алгоритм?
[02:08:00.960 --> 02:08:02.960]  Мы, собственно, проверяли, что у нас число
[02:08:02.960 --> 02:08:04.960]  простое, во-первых, мы могли вот так
[02:08:04.960 --> 02:08:06.960]  делать, если не minp
[02:08:08.960 --> 02:08:10.960]  от i, то мы понимали, что оно простое.
[02:08:10.960 --> 02:08:12.960]  Собственно, раньше мы просто помещали, что
[02:08:12.960 --> 02:08:14.960]  i равно i, но сейчас давайте сделаем
[02:08:14.960 --> 02:08:16.960]  кое-что посложнее, давайте
[02:08:16.960 --> 02:08:18.960]  возьмем и сразу посчитаем
[02:08:18.960 --> 02:08:20.960]  нашу функцию, ну в данном случае
[02:08:20.960 --> 02:08:22.960]  функцию l для всех значений
[02:08:22.960 --> 02:08:24.960]  вида i, и в квадрате, и в кубе
[02:08:24.960 --> 02:08:26.960]  и так далее.
[02:08:26.960 --> 02:08:28.960]  То есть тут мы заполняем
[02:08:28.960 --> 02:08:30.960]  значения вида
[02:08:30.960 --> 02:08:32.960]  phi
[02:08:34.960 --> 02:08:36.960]  и в каты, вот для всех таких значений
[02:08:36.960 --> 02:08:38.960]  что-то мы пишем.
[02:08:38.960 --> 02:08:40.960]  Ну для функции l
[02:08:40.960 --> 02:08:42.960]  соответственно понятно, что мы пишем pfk и
[02:08:42.960 --> 02:08:44.960]  minus p, да, для каждой
[02:08:44.960 --> 02:08:46.960]  такой степени.
[02:08:48.960 --> 02:08:50.960]  Сейчас, что, нет, pospfk в
[02:08:50.960 --> 02:08:52.960]  minus pfk и minus 1, окей, ладно,
[02:08:52.960 --> 02:08:54.960]  я, наверное, говорился, вот, но это делается
[02:08:54.960 --> 02:08:56.960]  просто обычным фурориком, я думаю, вы справитесь.
[02:08:56.960 --> 02:08:58.960]  Дальше мы что делали, мы перебирали
[02:08:58.960 --> 02:09:00.960]  простое число, на которое надо множить,
[02:09:00.960 --> 02:09:02.960]  оно у нас лежало вектор и праймс
[02:09:04.960 --> 02:09:06.960]  и у нас были какие-то
[02:09:06.960 --> 02:09:08.960]  ифы на ограничение сверху, что у нас, типа
[02:09:08.960 --> 02:09:10.960]  g должно быть меньше, чем minus pi
[02:09:10.960 --> 02:09:12.960]  и у нас было ограничение, что
[02:09:12.960 --> 02:09:14.960]  p, ну и что оно еще
[02:09:14.960 --> 02:09:16.960]  g на i меньше n,
[02:09:16.960 --> 02:09:18.960]  меньше равно n. Ну хорошо, вот мы это
[02:09:18.960 --> 02:09:20.960]  пускай все заефали, дальше, что мы делаем тут?
[02:09:20.960 --> 02:09:22.960]  Тут предлагается
[02:09:22.960 --> 02:09:24.960]  во-первых
[02:09:24.960 --> 02:09:26.960]  делать g,
[02:09:26.960 --> 02:09:28.960]  рассматривать только g, который меньше, чем
[02:09:28.960 --> 02:09:30.960]  minus pi, то есть это я вот тут
[02:09:30.960 --> 02:09:32.960]  пропишу отдельно, g меньше, чем
[02:09:32.960 --> 02:09:34.960]  minus pi.
[02:09:34.960 --> 02:09:36.960]  И
[02:09:36.960 --> 02:09:38.960]  еще одним внутренним
[02:09:38.960 --> 02:09:40.960]  фурориком,
[02:09:40.960 --> 02:09:42.960]  то есть
[02:09:42.960 --> 02:09:44.960]  мы будем перебирать степень g,
[02:09:44.960 --> 02:09:46.960]  на который мы домножим наше число i.
[02:09:46.960 --> 02:09:48.960]  То есть мы будем как бы
[02:09:48.960 --> 02:09:50.960]  вот тут записывать значение
[02:09:50.960 --> 02:09:52.960]  phi вида i
[02:09:52.960 --> 02:09:54.960]  умножить на g вкатый.
[02:09:54.960 --> 02:09:56.960]  То есть у нас будет 3 вложенных фурорика.
[02:09:56.960 --> 02:09:58.960]  Почему мы делаем так? Ну можно было
[02:09:58.960 --> 02:10:00.960]  действительно как-то поиграться,
[02:10:00.960 --> 02:10:02.960]  предпосчитать там разложения такие,
[02:10:02.960 --> 02:10:04.960]  но в принципе достаточно просто делается.
[02:10:04.960 --> 02:10:06.960]  Но вот такой подход он позволяет нам
[02:10:06.960 --> 02:10:08.960]  использовать от
[02:10:08.960 --> 02:10:10.960]  единички дополнительной памяти.
[02:10:10.960 --> 02:10:12.960]  Ну по сравнению с линейным рэштоном, естественно,
[02:10:12.960 --> 02:10:14.960]  то что мы линейный рэштон написали, нам это придется сделать,
[02:10:14.960 --> 02:10:16.960]  нам придется завести массив
[02:10:16.960 --> 02:10:18.960]  обязательно значение phi.
[02:10:18.960 --> 02:10:20.960]  Но при этом
[02:10:20.960 --> 02:10:22.960]  мы смогли как бы
[02:10:22.960 --> 02:10:24.960]  никакие другие данные
[02:10:24.960 --> 02:10:26.960]  не использовать в памяти.
[02:10:26.960 --> 02:10:28.960]  И у нас все хорошо.
[02:10:28.960 --> 02:10:30.960]  Но это вроде бы плюс-минус очевидно.
[02:10:30.960 --> 02:10:32.960]  На самом деле есть ощущение, что
[02:10:32.960 --> 02:10:34.960]  можно...
[02:10:34.960 --> 02:10:36.960]  Есть ощущение, что возникает какая-то
[02:10:36.960 --> 02:10:38.960]  копипаста в случае, когда у нас
[02:10:38.960 --> 02:10:40.960]  i вкатый и когда у нас g вкатый.
[02:10:40.960 --> 02:10:42.960]  Нет, смотри, тут копипасты нет, потому что
[02:10:42.960 --> 02:10:44.960]  и вкатый, тут конкретно ты прописываешь значение.
[02:10:44.960 --> 02:10:46.960]  А тут ты будешь
[02:10:46.960 --> 02:10:48.960]  прописывать...
[02:10:48.960 --> 02:10:50.960]  Да, ты можешь прописать и умножить на это значение,
[02:10:50.960 --> 02:10:52.960]  а можно написать, что мы просто
[02:10:52.960 --> 02:10:54.960]  сюда помещаем значение
[02:10:54.960 --> 02:10:56.960]  phi, а ты... Я могу посчитать phi
[02:10:56.960 --> 02:10:58.960]  от единицы как фиктивное значение.
[02:10:58.960 --> 02:11:00.960]  Или нефиктивное,
[02:11:00.960 --> 02:11:02.960]  оно один.
[02:11:02.960 --> 02:11:04.960]  А потом g вкатый
[02:11:04.960 --> 02:11:06.960]  оно будет домножаться на то же самое, но чтобы
[02:11:06.960 --> 02:11:08.960]  домножалось i вкатый.
[02:11:08.960 --> 02:11:10.960]  Оно будет домножаться на то же самое p вкатый
[02:11:10.960 --> 02:11:12.960]  минус p вкатый минус 1.
[02:11:12.960 --> 02:11:14.960]  И условно для пересчета
[02:11:14.960 --> 02:11:16.960]  видимо можно что-то...
[02:11:16.960 --> 02:11:18.960]  Тут можно придумать, но я предлагаю вот так
[02:11:18.960 --> 02:11:20.960]  перерасчитывать phi i на phi g вкатый, чтобы
[02:11:20.960 --> 02:11:22.960]  заново формулы просто не писать.
[02:11:22.960 --> 02:11:24.960]  Но в принципе можно так, да.
[02:11:24.960 --> 02:11:26.960]  Нет, тут на самом деле фиговые ситуации выходят.
[02:11:26.960 --> 02:11:28.960]  Вот тут можно либо...
[02:11:28.960 --> 02:11:30.960]  Что еще сделать? Либо тут можно
[02:11:30.960 --> 02:11:32.960]  вот тут сделать какой-то грязный хак,
[02:11:32.960 --> 02:11:34.960]  чтобы сказать, что если g у нас оказалась равно i,
[02:11:34.960 --> 02:11:36.960]  то давайте там
[02:11:36.960 --> 02:11:38.960]  заведем кому-нибудь еще
[02:11:38.960 --> 02:11:40.960]  t, с которой мы на самом деле будем
[02:11:40.960 --> 02:11:42.960]  обновляться. Ей просто вам единичку, изначально
[02:11:42.960 --> 02:11:44.960]  будет i. В общем можно делать...
[02:11:44.960 --> 02:11:46.960]  Там будет единичка, phi от одного будет у нас.
[02:11:46.960 --> 02:11:48.960]  Окей.
[02:11:48.960 --> 02:11:50.960]  Нет, нормально, да.
[02:11:50.960 --> 02:11:52.960]  Ну, как-то так. Но идея примерно какая-то такая.
[02:11:52.960 --> 02:11:54.960]  В принципе копипаста тут не страшна.
[02:11:54.960 --> 02:11:56.960]  Копипаста, она, как известно, на скорость работы
[02:11:56.960 --> 02:11:58.960]  не влияет.
[02:11:58.960 --> 02:12:00.960]  Окей.
[02:12:00.960 --> 02:12:02.960]  Вот.
[02:12:02.960 --> 02:12:04.960]  Ну, хорошо. Это вот первый подкод.
[02:12:04.960 --> 02:12:06.960]  И так, естественно, можно считать
[02:12:06.960 --> 02:12:08.960]  все мультипликативные функции на самом деле.
[02:12:08.960 --> 02:12:10.960]  То есть там для значения
[02:12:10.960 --> 02:12:12.960]  от 1 до n. Можно phi посчитать, можно rad
[02:12:12.960 --> 02:12:14.960]  посчитать, можно вот такую странную функцию
[02:12:14.960 --> 02:12:16.960]  посчитать. Все круто, все работает, плюс-минус очевидно
[02:12:16.960 --> 02:12:18.960]  почему. Вот. Есть еще один метод.
[02:12:18.960 --> 02:12:20.960]  Он такой уже
[02:12:20.960 --> 02:12:22.960]  более предлоговатый.
[02:12:22.960 --> 02:12:24.960]  Вот это если у нас просто мы получили
[02:12:24.960 --> 02:12:26.960]  свирку массив праймс.
[02:12:26.960 --> 02:12:28.960]  И у нас
[02:12:28.960 --> 02:12:30.960]  никакого линейного решета не было.
[02:12:30.960 --> 02:12:32.960]  Но тогда идея в том, что мы можем
[02:12:32.960 --> 02:12:34.960]  просто рекрусивно перебрать все числа,
[02:12:34.960 --> 02:12:36.960]  зная их факторизацию.
[02:12:36.960 --> 02:12:38.960]  Это будет работать точно так же, как этот форик.
[02:12:38.960 --> 02:12:40.960]  Ну, просто без
[02:12:40.960 --> 02:12:42.960]  допамяти.
[02:12:42.960 --> 02:12:44.960]  То есть там будет допамяти от log n числа
[02:12:44.960 --> 02:12:46.960]  на хранение стека вызовов.
[02:12:46.960 --> 02:12:48.960]  Окей.
[02:12:48.960 --> 02:12:50.960]  Ну, что?
[02:12:50.960 --> 02:12:52.960]  Ну, давайте
[02:12:52.960 --> 02:12:54.960]  будем как-нибудь ручками доказывать, что
[02:12:54.960 --> 02:12:56.960]  g-a-t у нас она мультипликативная.
[02:12:56.960 --> 02:12:58.960]  Давайте
[02:12:58.960 --> 02:13:00.960]  докажем. Давайте докажем.
[02:13:00.960 --> 02:13:02.960]  Хорошо. Вот пускай у нас.
[02:13:02.960 --> 02:13:04.960]  Ну, про остальные понятно, я думаю.
[02:13:04.960 --> 02:13:06.960]  Rad тоже понятно.
[02:13:06.960 --> 02:13:08.960]  f-a-t мы...
[02:13:08.960 --> 02:13:10.960]  f-a-t, ну,
[02:13:10.960 --> 02:13:12.960]  что-то не хочется доказывать.
[02:13:12.960 --> 02:13:14.960]  Ну, там любители галовских чисел
[02:13:14.960 --> 02:13:16.960]  могут доказать. Ну, давайте это сделаем.
[02:13:16.960 --> 02:13:18.960]  Вот g-a-t.
[02:13:18.960 --> 02:13:20.960]  Во-первых, я сделаю такую страшную вещь.
[02:13:20.960 --> 02:13:22.960]  Я
[02:13:22.960 --> 02:13:24.960]  переделаю суммирование
[02:13:24.960 --> 02:13:26.960]  не от 1 до n, а от 0
[02:13:26.960 --> 02:13:28.960]  до n-1.
[02:13:28.960 --> 02:13:30.960]  Ну, почему бы нет?
[02:13:30.960 --> 02:13:32.960]  Дальше.
[02:13:32.960 --> 02:13:34.960]  Ну, и тут у нас g-a-t.
[02:13:34.960 --> 02:13:36.960]  Ну, какая идея?
[02:13:36.960 --> 02:13:38.960]  Идея в том, что я могу
[02:13:38.960 --> 02:13:40.960]  эту сумму переписать.
[02:13:40.960 --> 02:13:42.960]  Я могу перебрать... Вот у меня
[02:13:42.960 --> 02:13:44.960]  если n равняется a-b.
[02:13:44.960 --> 02:13:46.960]  По китайской теории
[02:13:46.960 --> 02:13:48.960]  время об остатках я могу k перебрать
[02:13:48.960 --> 02:13:50.960]  либо просто k, либо остаток
[02:13:50.960 --> 02:13:52.960]  определений на a и остаток определений на b.
[02:13:52.960 --> 02:13:54.960]  Соответственно, пускай число x, y.
[02:13:54.960 --> 02:13:56.960]  То есть x, a, in, z,
[02:13:56.960 --> 02:13:58.960]  a,
[02:13:58.960 --> 02:14:00.960]  y, in, z, b.
[02:14:00.960 --> 02:14:02.960]  Вот.
[02:14:02.960 --> 02:14:04.960]  Из x, y у меня однозначно
[02:14:04.960 --> 02:14:06.960]  устанавливается k, например.
[02:14:06.960 --> 02:14:08.960]  Логично. Ну, тогда чему будет
[02:14:08.960 --> 02:14:10.960]  равен нод k, n?
[02:14:10.960 --> 02:14:12.960]  Ну,
[02:14:12.960 --> 02:14:14.960]  легко показать, что
[02:14:14.960 --> 02:14:16.960]  у нас будет равен просто произведению,
[02:14:16.960 --> 02:14:18.960]  собственно,
[02:14:18.960 --> 02:14:20.960]  x, n на y, n.
[02:14:20.960 --> 02:14:22.960]  Ну,
[02:14:22.960 --> 02:14:24.960]  а точнее не так, не-не-не, вру.
[02:14:24.960 --> 02:14:26.960]  x, a на y, b.
[02:14:26.960 --> 02:14:28.960]  Ну, почему
[02:14:28.960 --> 02:14:30.960]  так? Ну, потому что...
[02:14:30.960 --> 02:14:32.960]  Ну, понятно, потому что, типа, если у нас
[02:14:32.960 --> 02:14:34.960]  есть какие-то делители простые у а, то там
[02:14:34.960 --> 02:14:36.960]  именно от остатка x будет зависеть,
[02:14:36.960 --> 02:14:38.960]  типа, делится или не делится.
[02:14:38.960 --> 02:14:40.960]  Ну, и соответственно, также с простыми
[02:14:40.960 --> 02:14:42.960]  делителями числа b.
[02:14:42.960 --> 02:14:44.960]  Ну, и дальше, типа,
[02:14:44.960 --> 02:14:46.960]  тут просто у нас еще суммирование,
[02:14:46.960 --> 02:14:48.960]  суммирование, перемножение. Понятно, что это просто
[02:14:48.960 --> 02:14:50.960]  перемножение вот таких вот сумм.
[02:14:50.960 --> 02:14:52.960]  Сумма по x, x,
[02:14:52.960 --> 02:14:54.960]  сумма по y,
[02:14:54.960 --> 02:14:56.960]  z, b.
[02:15:00.960 --> 02:15:02.960]  Ну, и дальше, я думаю, вы понимаете, что
[02:15:02.960 --> 02:15:04.960]  это просто g от a,
[02:15:04.960 --> 02:15:06.960]  а это g от b.
[02:15:06.960 --> 02:15:08.960]  Как-то так.
[02:15:08.960 --> 02:15:10.960]  Вот. Ну, это такое вот...
[02:15:10.960 --> 02:15:12.960]  Простенькое применение мультипликативных функций,
[02:15:12.960 --> 02:15:14.960]  что они вот бывают такие странненькие,
[02:15:14.960 --> 02:15:16.960]  новенькие, они с нодами очень хорошо дружат,
[02:15:16.960 --> 02:15:18.960]  очень хорошо дружат с делителями. А, ну, кстати,
[02:15:18.960 --> 02:15:20.960]  еще на тему делителей можно
[02:15:20.960 --> 02:15:22.960]  еще докинуть очень много функций
[02:15:22.960 --> 02:15:24.960]  связанных с делителями, да, типа,
[02:15:24.960 --> 02:15:26.960]  sigma 0
[02:15:26.960 --> 02:15:28.960]  от n, типа, количество делителей,
[02:15:30.960 --> 02:15:32.960]  sigma 1 от n,
[02:15:32.960 --> 02:15:34.960]  сумма делителей.
[02:15:34.960 --> 02:15:36.960]  Ну, и типа
[02:15:36.960 --> 02:15:38.960]  sigma квадрат, например, я думаю, остановлюсь
[02:15:38.960 --> 02:15:40.960]  на этом. Это сумма квадратов.
[02:15:40.960 --> 02:15:42.960]  Типа...
[02:15:42.960 --> 02:15:44.960]  Ну, в принципе, упражнение
[02:15:44.960 --> 02:15:46.960]  для читателя, да, то есть типа там сумма по делителям
[02:15:46.960 --> 02:15:48.960]  точно так же делается, так типа у нас каждый делитель
[02:15:48.960 --> 02:15:50.960]  n, он будет формироваться как делитель a
[02:15:50.960 --> 02:15:52.960]  умножить на делитель b. И там поэтому все
[02:15:52.960 --> 02:15:54.960]  эти суммы квадратов, да. А давайте так
[02:15:54.960 --> 02:15:56.960]  запишу.
[02:15:56.960 --> 02:15:58.960]  Как в анекдоте.
[02:15:58.960 --> 02:16:00.960]  Если я попрошу, что такое sigma 3t?
[02:16:00.960 --> 02:16:02.960]  Ну, это
[02:16:02.960 --> 02:16:04.960]  сложный вопрос, на который надо читателю
[02:16:04.960 --> 02:16:06.960]  будет найти ответ самостоятельно.
[02:16:06.960 --> 02:16:08.960]  Ну вот, как-то так. То есть
[02:16:08.960 --> 02:16:10.960]  мультипликативных функций в принципе много,
[02:16:10.960 --> 02:16:12.960]  вот у нас есть алгоритм для их решения, но
[02:16:12.960 --> 02:16:14.960]  у этого алгоритма есть
[02:16:14.960 --> 02:16:16.960]  такая вот некоторая проблема.
[02:16:16.960 --> 02:16:18.960]  Он
[02:16:18.960 --> 02:16:20.960]  ищет от 1 до n
[02:16:20.960 --> 02:16:22.960]  все числа, а вот если мы хотим
[02:16:22.960 --> 02:16:24.960]  не все значения узнать, а просто сумму
[02:16:24.960 --> 02:16:26.960]  от 1 до n, ну, тогда этот алгоритм у нас
[02:16:26.960 --> 02:16:28.960]  работает
[02:16:28.960 --> 02:16:30.960]  за линейное время, ну, и кажется, что
[02:16:30.960 --> 02:16:32.960]  не особо можно его как-то ускорить, но оказывается,
[02:16:32.960 --> 02:16:34.960]  что все-таки для некоторых мультипликативных функций
[02:16:34.960 --> 02:16:36.960]  можно вычислить, делать вычисления быстрее.
[02:16:38.960 --> 02:16:40.960]  Так.
[02:16:40.960 --> 02:16:42.960]  Давайте
[02:16:42.960 --> 02:16:44.960]  обсудим свертку
[02:16:44.960 --> 02:16:46.960]  Dirichlet.
[02:16:46.960 --> 02:16:48.960]  Она была у вас вроде бы, но я просто напомню,
[02:16:48.960 --> 02:16:50.960]  что это такое.
[02:16:50.960 --> 02:16:52.960]  Так, Dirichlet, надо большую букву написать,
[02:16:52.960 --> 02:16:54.960]  Имиша, уважаемого человека,
[02:16:54.960 --> 02:16:56.960]  между прочим.
[02:16:56.960 --> 02:16:58.960]  Как она обозначается?
[02:16:58.960 --> 02:17:00.960]  Ну, собственно, представим, что у нас есть две функции f и g.
[02:17:00.960 --> 02:17:02.960]  Сверткой Dirichlet
[02:17:02.960 --> 02:17:04.960]  этих двух функций
[02:17:04.960 --> 02:17:06.960]  будет называться новая функция,
[02:17:06.960 --> 02:17:08.960]  f,
[02:17:08.960 --> 02:17:10.960]  которая в точке n у нас будет равна
[02:17:10.960 --> 02:17:12.960]  сумме по всем парам
[02:17:12.960 --> 02:17:14.960]  a умножить на a и b,
[02:17:14.960 --> 02:17:16.960]  которые в произведении дают n,
[02:17:16.960 --> 02:17:18.960]  f от a умножить на g от b.
[02:17:18.960 --> 02:17:20.960]  Вот такая
[02:17:20.960 --> 02:17:22.960]  функция.
[02:17:22.960 --> 02:17:24.960]  Окей.
[02:17:24.960 --> 02:17:26.960]  Что оказывается у нас?
[02:17:26.960 --> 02:17:28.960]  Оказывается, что
[02:17:28.960 --> 02:17:30.960]  у нас эта операция
[02:17:30.960 --> 02:17:32.960]  сверткой Dirichlet коммутативная,
[02:17:32.960 --> 02:17:34.960]  что она у нас клево дружит с умножением.
[02:17:36.960 --> 02:17:38.960]  И еще оказывается, что
[02:17:38.960 --> 02:17:40.960]  она дает всегда мультипликативную функцию.
[02:17:40.960 --> 02:17:42.960]  Это будем профайть
[02:17:42.960 --> 02:17:44.960]  или это у вас было все-таки?
[02:17:44.960 --> 02:17:46.960]  Вряд ли у всех точно.
[02:17:46.960 --> 02:17:48.960]  Давайте за профайем.
[02:17:48.960 --> 02:17:50.960]  Я думаю, тут не лишним будет.
[02:17:50.960 --> 02:17:52.960]  Давайте представим, что у нас
[02:17:52.960 --> 02:17:54.960]  мы хотим вычислить f от g,
[02:17:54.960 --> 02:17:56.960]  x и y взаимно просто.
[02:17:56.960 --> 02:17:58.960]  Кстати, вот тут взаимная простота не требуется.
[02:17:58.960 --> 02:18:00.960]  То есть если условие у нас требовало взаимной простоты,
[02:18:00.960 --> 02:18:02.960]  тут она не обязательно.
[02:18:02.960 --> 02:18:04.960]  Просто а умножить на b равно n.
[02:18:04.960 --> 02:18:06.960]  Только такой интересует. Окей.
[02:18:06.960 --> 02:18:08.960]  Ну хорошо.
[02:18:08.960 --> 02:18:10.960]  Тогда что тут получается? f на g от x и y.
[02:18:10.960 --> 02:18:12.960]  Давайте это распишем.
[02:18:12.960 --> 02:18:14.960]  У нас получится что?
[02:18:14.960 --> 02:18:16.960]  У нас сумма по всем a умножить на b
[02:18:16.960 --> 02:18:18.960]  равным x и y
[02:18:18.960 --> 02:18:20.960]  ведет суммирование f от a
[02:18:20.960 --> 02:18:22.960]  и g от b.
[02:18:22.960 --> 02:18:24.960]  Ну замечательно.
[02:18:24.960 --> 02:18:26.960]  Давайте теперь
[02:18:26.960 --> 02:18:28.960]  заметим вот что. x и y взаимно просто.
[02:18:28.960 --> 02:18:30.960]  Значит a можно разделить на два множества.
[02:18:30.960 --> 02:18:32.960]  Один из которых будет делителем x,
[02:18:32.960 --> 02:18:34.960]  а другой будет делителем y.
[02:18:54.960 --> 02:18:56.960]  Ну и что тогда получится?
[02:18:56.960 --> 02:18:58.960]  Тогда получится у нас следующее.
[02:18:58.960 --> 02:19:00.960]  f от a,
[02:19:00.960 --> 02:19:02.960]  x.
[02:19:02.960 --> 02:19:04.960]  Давайте тут я
[02:19:04.960 --> 02:19:06.960]  сделаю g от
[02:19:06.960 --> 02:19:08.960]  b,
[02:19:08.960 --> 02:19:10.960]  x.
[02:19:10.960 --> 02:19:12.960]  Потом за письмом
[02:19:12.960 --> 02:19:14.960]  будет делителем
[02:19:14.960 --> 02:19:16.960]  f от a,
[02:19:16.960 --> 02:19:18.960]  x.
[02:19:18.960 --> 02:19:20.960]  Давайте тут я
[02:19:20.960 --> 02:19:22.960]  сделаю g
[02:19:22.960 --> 02:19:36.360]  g от bx, потом запишу, потом запишу f от ay, извиняюсь, и g от by, что я получил?
[02:19:37.060 --> 02:19:42.560]  Ну, я получил 1 множитель, 2 множитель, этот множитель зависит только от элементов первой суммы,
[02:19:42.560 --> 02:19:48.420]  а этот множитель только от элементов второй, ну, значит, эта двойная сумма не есть что иное
[02:19:48.420 --> 02:20:00.020]  как произведение двух сумм. Соответственно, сумма по ax, bx равным x, f от ax, g от bx.
[02:20:01.020 --> 02:20:05.720]  Ну, я думаю, на самом деле вы понимаете, что это просто свертка дирекле в точке x.
[02:20:06.220 --> 02:20:09.220]  Ну, и тут давайте прям так сразу запишем, мне как-то лень это переписывать.
[02:20:09.720 --> 02:20:16.720]  f от g свертка в точке y. Ну, это в точке, соответственно, x.
[02:20:19.220 --> 02:20:24.720]  Ну, как бы вот, всю мультипрокативность доказали, то есть просто порасписывать суммы.
[02:20:25.220 --> 02:20:33.220]  Как-то так. Вот окажется, что для вычисления префиксных сумм, ну, сумм значений мультипрокативных функций
[02:20:33.720 --> 02:20:38.720]  свертка дирекле будет играть ключевое значение, поэтому давайте вот немного поподготовимся к этому моменту
[02:20:39.720 --> 02:20:48.220]  и попытаемся как-то попредставлять наши функции в виде соответствующих сверток дирекле.
[02:20:49.220 --> 02:20:53.220]  Ну, например, давайте возьмем… Что возьмем?
[02:20:54.220 --> 02:21:02.220]  Давайте, например, возьмем phi и рассмотрим ее свертку с id.
[02:21:03.220 --> 02:21:07.220]  phi id. Что тогда получится?
[02:21:07.720 --> 02:21:10.720]  Тогда у нас получится сумма по всем… Давайте так.
[02:21:11.520 --> 02:21:19.520]  Давайте так напишу. По всем делителям n phi от d умножить на n поделить на d.
[02:21:22.520 --> 02:21:27.520]  Собственно, что это такое? Что это за сумма такая? Ну, она что-то там суммирует, да?
[02:21:28.520 --> 02:21:30.520]  Но это не мебелось, ни фига нет.
[02:21:31.020 --> 02:21:35.020]  Это… Давайте вот посмотрим. Я думаю, вы угадаете, что это за функция.
[02:21:35.820 --> 02:21:40.820]  Ну, смотрите. Вот phi от n он умножил на единичку, да?
[02:21:41.820 --> 02:21:44.820]  Давайте представим, что у нас… Давайте phi от 6 посчитаем.
[02:21:45.820 --> 02:21:47.820]  Вот давайте в точке 6 посчитаем, да?
[02:21:48.820 --> 02:21:50.820]  Если мы в точке 6 считаем, то что у нас получается?
[02:21:51.820 --> 02:21:54.820]  У нас получается phi от 6 он умножил на… 6 поделить на 6.
[02:21:55.820 --> 02:22:00.820]  Плюс там, не знаю, phi от 3 он посчитал, умножил на, например…
[02:22:01.820 --> 02:22:03.820]  Давайте это единичка phi от 6.
[02:22:04.620 --> 02:22:05.620]  Просто n.
[02:22:09.620 --> 02:22:11.620]  Нет, n поделить на d.
[02:22:12.620 --> 02:22:14.620]  Плюс 2 на 3.
[02:22:15.620 --> 02:22:18.620]  И плюс phi от 6, наконец, он посчитал, умножил один раз, да?
[02:22:19.620 --> 02:22:21.620]  Ну, давайте попытаемся дать смысл этой фигни.
[02:22:25.620 --> 02:22:28.620]  Да, просто сумма всех фишек она просто id дает, да.
[02:22:28.620 --> 02:22:29.620]  Но это чуть посложнее.
[02:22:29.620 --> 02:22:30.620]  Вот, ну давайте посмотрим.
[02:22:30.620 --> 02:22:34.620]  Ну, типа у нас оно каждое взаимопростое число с 6, оно умножило на 1.
[02:22:35.620 --> 02:22:37.620]  А потом, вот что такое phi от 2, например?
[02:22:38.620 --> 02:22:41.620]  Ну, это то же самое, что phi от 6 поделить на 3, да?
[02:22:42.620 --> 02:22:43.620]  А это что такое?
[02:22:43.620 --> 02:22:47.620]  Это по сути количество чисел, которые имеют с 6 нот равный 3.
[02:22:49.620 --> 02:22:50.620]  Мы их умножили, соответственно, на 3.
[02:22:51.620 --> 02:22:56.620]  phi от 3 – это количество чисел от нота 6, которые имеют с 6 нот равным, соответственно, 2.
[02:22:57.620 --> 02:22:59.620]  Это мат ожидания нода.
[02:23:00.620 --> 02:23:02.620]  Умноженные на n, то есть просто сумму нотов.
[02:23:03.620 --> 02:23:04.620]  То есть это просто функция g от n у нас.
[02:23:04.620 --> 02:23:06.620]  В данном случае у нас вышла функция g от n.
[02:23:07.620 --> 02:23:08.620]  Например, так.
[02:23:08.620 --> 02:23:11.620]  Вот, и в принципе, так как мы знаем уже этот факт, что g – это просто…
[02:23:12.620 --> 02:23:13.620]  Давайте так запишу.
[02:23:13.620 --> 02:23:14.620]  Это просто g получится.
[02:23:15.620 --> 02:23:18.620]  Тут это в точке n, но я думаю, вы понимаете, что я имею в виду.
[02:23:19.620 --> 02:23:23.620]  То есть мы уже из этого факта, например, могли бы не доказывать, что g мультипликативная.
[02:23:23.620 --> 02:23:24.620]  Ну, прикольно.
[02:23:24.620 --> 02:23:27.620]  То есть это такой способ получать новую мультипликативную функцию.
[02:23:27.620 --> 02:23:30.620]  Ну, давайте еще что-нибудь сделаем.
[02:23:32.620 --> 02:23:34.620]  Давайте еще скажем пару очевидных слов.
[02:23:34.620 --> 02:23:40.620]  Наверное, мы хотим, очевидно, чтобы в мультипликативной функции у нас f от 1 равнялся 1, иначе бред получается, верно?
[02:23:43.620 --> 02:23:45.620]  Ну, a и b я могу поставить равными 1, да?
[02:23:46.620 --> 02:23:50.620]  Тогда у меня f от 1 должно равняться f от 1 в квадрате.
[02:23:50.620 --> 02:23:53.620]  Понятно, что еще 0 подходит, но давайте 0 не учитывать, он какой-то странный.
[02:23:54.620 --> 02:23:58.620]  Можно еще поговорить про обратимость.
[02:23:58.620 --> 02:24:03.620]  И вот оказывается, что все функции, они относительно свертки и диреклей обратимы.
[02:24:04.620 --> 02:24:15.620]  То есть для любой функции мультипликативной существует такая функция g, что f от g равняется нейтральному элементу.
[02:24:16.620 --> 02:24:20.620]  Ну, вот что такое у нас нейтральный элемент относительно свертки и диреклей?
[02:24:20.620 --> 02:24:26.620]  Вот может показаться, что это единичка либо id, но вот оказывается, что это не так, и оказывается, что это просто f от 1.
[02:24:27.620 --> 02:24:29.620]  Почему это так, я думаю, понятно.
[02:24:29.620 --> 02:24:35.620]  В принципе, у нас в этой сумме, если бы у нас тут была f от 1, например, f от n поделить на d,
[02:24:35.620 --> 02:24:39.620]  то у нас бы ровно одно слагаемое было бы не нулевым, равнялось единичке.
[02:24:39.620 --> 02:24:43.620]  То есть это было бы слагаемое, которое бы тут получалось при d равном n.
[02:24:43.620 --> 02:24:45.620]  Так что да.
[02:24:45.620 --> 02:24:48.620]  Вот, доказывать это не будем, потому что зачем, это делается очевидно,
[02:24:48.620 --> 02:24:52.620]  просто по индукции pn мы доказываем, что у нас существует значение в каждой точке.
[02:24:52.620 --> 02:24:59.620]  Вот, что интересно, это наконец-то уже решать задачку какие-то, начать.
[02:25:00.620 --> 02:25:07.620]  Да, ну вот про задачки там нужна функция мебельса, я как раз ее тут пропустил.
[02:25:07.620 --> 02:25:09.620]  Это забавно.
[02:25:09.620 --> 02:25:11.620]  Давайте ведем функцию мебельса.
[02:25:11.620 --> 02:25:18.620]  Как мы начнем про додвигации, вот с функциями мебельса мы начнем уже суммирование функции,
[02:25:18.620 --> 02:25:19.620]  объяснять эту технику.
[02:25:19.620 --> 02:25:21.620]  Вот пускай у нас есть какая-то милотен.
[02:25:21.620 --> 02:25:25.620]  Милотен такая достаточно простая функция, она будет определяется так, что
[02:25:25.620 --> 02:25:34.620]  милот p равно минус единичка, а милот p вкатый, где k больше единичка, будет равняться нулю.
[02:25:34.620 --> 02:25:39.620]  То есть такая функция, которая равна нулю, если у нас число делится на квадрат какого-то другого числа,
[02:25:39.620 --> 02:25:43.620]  и равняется минус один степени количества простых делителей.
[02:25:43.620 --> 02:25:47.620]  Вот, эта функция очень прикольная, она имеет какое-то большое значение в комбинаторике,
[02:25:47.620 --> 02:25:53.620]  то есть во многих случаях она работает как будто бы как функция включения и исключения,
[02:25:53.620 --> 02:25:56.620]  только в теории чисел, но мы пока этого сильно касаться не будем.
[02:25:56.620 --> 02:26:02.620]  Вот оказывается, что как раз на ее примеры будет очень удобно считать все это дело.
[02:26:02.620 --> 02:26:05.620]  Ну, мы ее пока что просто ввели, мы ее пока использовать не будем.
[02:26:05.620 --> 02:26:09.620]  То есть такое вот ружье, заготовленное чеш, чеховское ружье.
[02:26:09.620 --> 02:26:10.620]  Называется она функцией меблса.
[02:26:10.620 --> 02:26:15.620]  До чеховского ружья, когда мы ее ввели посередине лекции, далеко.
[02:26:15.620 --> 02:26:17.620]  Ну да, логично.
[02:26:17.620 --> 02:26:19.620]  Ну вот я ее забыл типа.
[02:26:19.620 --> 02:26:20.620]  Анти-чеховское.
[02:26:20.620 --> 02:26:22.620]  Анти-чеховское, да.
[02:26:22.620 --> 02:26:23.620]  Получается сланце, эре.
[02:26:23.620 --> 02:26:30.620]  Ну хорошо, давайте префиксные суммы, основное равенство мы видим, и из него научимся все считать.
[02:26:30.620 --> 02:26:33.620]  Префиксные суммы, давайте их обозначать вот так.
[02:26:33.620 --> 02:26:37.620]  Обозначений тут каких-то общепринятых нет, поэтому буду пользоваться теми, которые мы хочу.
[02:26:37.620 --> 02:26:40.620]  Но в течение префиксных сумм, например, удобно вот так обозначать.
[02:26:40.620 --> 02:26:49.620]  То есть это будет сумма f от n, это будет просто f от 1, плюс так далее, плюс f от n.
[02:26:49.620 --> 02:26:51.620]  Ну хорошо.
[02:26:51.620 --> 02:26:53.620]  Вот давайте сделаем странную вещь.
[02:26:53.620 --> 02:26:59.620]  Казалось бы, мы еще не умеем считать префиксные суммы для наших мультипликативных функций.
[02:26:59.620 --> 02:27:01.620]  Ну на самом деле для каких-то умеем.
[02:27:01.620 --> 02:27:04.620]  Для id умеем, например, для x1 умеем, для единички умеем.
[02:27:04.620 --> 02:27:06.620]  Но для остальных как-то не получается.
[02:27:06.620 --> 02:27:07.620]  Вот предложение такое.
[02:27:07.620 --> 02:27:13.620]  Давайте мы сейчас ведем какое-то равенство для префиксных сумм и суммы и свертки диреклей,
[02:27:13.620 --> 02:27:15.620]  и из этого научимся все считать.
[02:27:15.620 --> 02:27:17.620]  Оно будет работать на нас в общем случае.
[02:27:17.620 --> 02:27:26.620]  Вот пускай у нас мы рассматриваем свертку префиксной суммы, свертки phi и g от n.
[02:27:26.620 --> 02:27:28.620]  Тогда чему будет равно ее значение?
[02:27:32.620 --> 02:27:34.620]  Ну нам по-хорошему что надо сделать?
[02:27:34.620 --> 02:27:36.620]  Надо перебирать k.
[02:27:36.620 --> 02:27:38.620]  От 1 до n.
[02:27:38.620 --> 02:27:41.620]  Потом перебирать ab, который равны k.
[02:27:41.620 --> 02:27:46.620]  И соответственно просуммировать f от a на g от b.
[02:27:46.620 --> 02:27:48.620]  Это можно сделать проще.
[02:27:48.620 --> 02:27:53.620]  Давайте заметим, что мы перебираем k от 1 до n, потом перебираем ab равной k.
[02:27:53.620 --> 02:27:58.620]  Но мы вместо этого могли бы просто перебирать пары ab, которые в произведении дают меньше либо равно n.
[02:28:01.620 --> 02:28:04.620]  f от a, g от b.
[02:28:11.620 --> 02:28:13.620]  Ну вроде плюс-минус логично.
[02:28:13.620 --> 02:28:15.620]  Давайте дальше идти.
[02:28:15.620 --> 02:28:17.620]  Теперь давайте вытащим из этой суммы a.
[02:28:19.620 --> 02:28:21.620]  А у нас будет перебираться от 1 до n.
[02:28:23.620 --> 02:28:25.620]  И мы будем суммировать что?
[02:28:25.620 --> 02:28:27.620]  f от a можно вынести будет, да?
[02:28:27.620 --> 02:28:29.620]  А теперь нас интересуют какие-то b.
[02:28:29.620 --> 02:28:31.620]  А какие b можно k представить?
[02:28:31.620 --> 02:28:33.620]  Давайте вот сейчас подумаем.
[02:28:33.620 --> 02:28:37.620]  Но можно представить b равной единичке, наверное.
[02:28:37.620 --> 02:28:39.620]  Двойки, тройки, ну и так далее.
[02:28:39.620 --> 02:28:41.620]  Сколько это можно будет делать?
[02:28:41.620 --> 02:28:43.620]  n поделить на a кругленно вниз.
[02:28:43.620 --> 02:28:45.620]  Тоже логично.
[02:28:45.620 --> 02:28:47.620]  Ну значит, а это что такое?
[02:28:47.620 --> 02:28:52.620]  Давайте как сумму сначала нарисую, потом ее зачеркну и напишу по-нормальному.
[02:28:52.620 --> 02:29:02.620]  То есть это будет сумма k от 1 до n поделить на a.
[02:29:02.620 --> 02:29:04.620]  Ну дайте b.
[02:29:04.620 --> 02:29:06.620]  g от b.
[02:29:08.620 --> 02:29:10.620]  Ну это то же самое, что просто префиксная сумма g.
[02:29:10.620 --> 02:29:12.620]  Давайте вот так ее запишем сразу.
[02:29:12.620 --> 02:29:14.620]  То есть это будет умножить на...
[02:29:14.620 --> 02:29:21.620]  Это будет все равно умножить на префиксную сумму g от n поделить на a.
[02:29:22.620 --> 02:29:26.620]  Вот.
[02:29:26.620 --> 02:29:30.620]  И оказывается, что это равенство, которое мы сейчас получили, оно получается достаточно просто, как вы видите.
[02:29:30.620 --> 02:29:32.620]  Просто туда-сюда и готово.
[02:29:32.620 --> 02:29:34.620]  Вот оказывается, что оно прям капец какое полезное.
[02:29:34.620 --> 02:29:36.620]  Почему оно полезное?
[02:29:36.620 --> 02:29:42.620]  Потому что значение n поделить на a у нас может быть не более чем 2 корень n различных штук.
[02:29:42.620 --> 02:29:44.620]  Как это доказывается?
[02:29:44.620 --> 02:29:46.620]  Я сейчас это докажу.
[02:29:46.620 --> 02:29:50.620]  Нет, я знаю, что это очевидно, но я сейчас докажу картинкой, потому что нам еще кое-что понадобится.
[02:29:50.620 --> 02:29:52.620]  Доказывайте.
[02:29:52.620 --> 02:29:54.620]  Доказывайте, это очень просто.
[02:29:54.620 --> 02:29:56.620]  Давайте нарисуем вот такую вот гиперболу.
[02:30:00.620 --> 02:30:02.620]  Доказательство наглядное, если что.
[02:30:04.620 --> 02:30:06.620]  Нарисуем такую вот гиперболу.
[02:30:06.620 --> 02:30:08.620]  xy равно n.
[02:30:10.620 --> 02:30:12.620]  Да вроде гипербола называется.
[02:30:12.620 --> 02:30:14.620]  Или аллегория, я уже точно не помню.
[02:30:14.620 --> 02:30:16.620]  Можно перевести в...
[02:30:16.620 --> 02:30:18.620]  Вот это по-моему b от v.
[02:30:18.620 --> 02:30:20.620]  Можно перевести, например, v от t.
[02:30:20.620 --> 02:30:22.620]  Для чего-то.
[02:30:22.620 --> 02:30:24.620]  И так оказывается.
[02:30:24.620 --> 02:30:25.620]  Да, ну так.
[02:30:25.620 --> 02:30:27.620]  Нет, шикарное доказательство, но ладно.
[02:30:27.620 --> 02:30:31.620]  Под этой гиперболу у нас существуют какие-то столочисленные точки, на самом деле.
[02:30:31.620 --> 02:30:33.620]  Вот тогда как эти точки устроены?
[02:30:33.620 --> 02:30:37.620]  Вот тут у нас примерно есть то, что меньше корня, есть то, что больше.
[02:30:37.620 --> 02:30:39.620]  Вот тогда у нас значение n поделить на a это что?
[02:30:39.620 --> 02:30:45.620]  Это взять какую-то точку x и посмотреть, что находится в ближайшие точки под гиперболой.
[02:30:45.620 --> 02:30:46.620]  Окей.
[02:30:46.620 --> 02:30:47.620]  Вот тут их может...
[02:30:47.620 --> 02:30:49.620]  Тогда как у нас гипербола выглядит?
[02:30:49.620 --> 02:30:51.620]  Что у нас может тут в принципе стать вот такой вот точкой?
[02:30:51.620 --> 02:30:53.620]  Ну точка может стать...
[02:30:53.620 --> 02:30:56.620]  Мы можем попасть в эту точку, только если сверху от нее ничего нет.
[02:30:56.620 --> 02:31:00.620]  Но давайте так еще скажем, что если у нас справа есть соседь точки,
[02:31:00.620 --> 02:31:02.620]  то мы попадем именно в него.
[02:31:02.620 --> 02:31:05.620]  Ну то есть если у нас тут есть какие-то подряд идущие точки,
[02:31:05.620 --> 02:31:08.620]  то давайте скажем, что мы попадаем только в самую правую.
[02:31:10.620 --> 02:31:11.620]  Ну да.
[02:31:11.620 --> 02:31:16.620]  Такое вот накрытие точек под гиперболой минимальным количеством прямоугольников.
[02:31:16.620 --> 02:31:17.620]  Вот.
[02:31:17.620 --> 02:31:19.620]  То есть у нас раз точка появилась какая-то особенная.
[02:31:19.620 --> 02:31:20.620]  Два.
[02:31:20.620 --> 02:31:21.620]  Точка, в которую мы можем попасть.
[02:31:21.620 --> 02:31:22.620]  Три.
[02:31:22.620 --> 02:31:23.620]  Ну и давайте четыре.
[02:31:23.620 --> 02:31:24.620]  Какие-то такие точки.
[02:31:24.620 --> 02:31:25.620]  Вот.
[02:31:25.620 --> 02:31:27.620]  Их очевидно не больше, чем два корня из n.
[02:31:27.620 --> 02:31:28.620]  Ну почему так?
[02:31:28.620 --> 02:31:30.620]  Потому что их до корня из n...
[02:31:30.620 --> 02:31:32.620]  Ну давайте вот такую прямую проведем.
[02:31:32.620 --> 02:31:35.620]  Вот их тут меньше корня из n и тут меньше, чем корня из n.
[02:31:35.620 --> 02:31:36.620]  Окей.
[02:31:36.620 --> 02:31:39.620]  Давайте, чтобы было чуть-чуть понятнее, я нарисую это все-таки лесенкой.
[02:31:39.620 --> 02:31:41.620]  И покрупнее я попытаюсь.
[02:31:41.620 --> 02:31:42.620]  Типа раз.
[02:31:42.620 --> 02:31:43.620]  Два.
[02:31:43.620 --> 02:31:44.620]  Три.
[02:31:44.620 --> 02:31:45.620]  Четыре.
[02:31:45.620 --> 02:31:46.620]  Пять.
[02:31:46.620 --> 02:31:47.620]  Да.
[02:31:47.620 --> 02:31:48.620]  Эта картинка, она у нас, кстати, будет симметричная.
[02:31:48.620 --> 02:31:49.620]  Да.
[02:31:49.620 --> 02:31:50.620]  Окей.
[02:31:54.620 --> 02:31:55.620]  Хорошо.
[02:31:55.620 --> 02:32:00.620]  А тогда вот получается, что функцию g префиксами нам надо будет считать только вот в каких-то этих точках.
[02:32:02.620 --> 02:32:03.620]  В каких-то вот этих координатах.
[02:32:03.620 --> 02:32:04.620]  Верно?
[02:32:04.620 --> 02:32:08.620]  Теперь давайте подумаем, как можно вообще этим пользоваться.
[02:32:08.620 --> 02:32:14.620]  Вот у нас n поделить на a, оно вообще-то принимает постоянные значения на каком-то отрезке a.
[02:32:14.620 --> 02:32:17.620]  То есть какие нас префиксные суммы a интересуют?
[02:32:17.620 --> 02:32:21.620]  Нас интересуют только те префиксные суммы a, при которых значение n поделить на a меняется.
[02:32:22.620 --> 02:32:23.620]  Да.
[02:32:23.620 --> 02:32:25.620]  Ну тогда смотрите, что это за значение?
[02:32:25.620 --> 02:32:32.620]  Это значит, что если мы взяли точку какую-то, да, и вот прыгнули направо, то мы попали на следующую ступеньку.
[02:32:32.620 --> 02:32:35.620]  Ну давайте заметим, что это все те же самые точки.
[02:32:38.620 --> 02:32:39.620]  Окей.
[02:32:39.620 --> 02:32:49.620]  То есть у нас есть некоторое множество чисел m от n, которые равняются всем возможным вариантам n поделить на k круглить вниз при натуральных k.
[02:32:49.620 --> 02:32:52.620]  Ну включая 0, например, да, это неважно.
[02:32:52.620 --> 02:32:57.620]  И получается, что нам префиксную сумму g надо будет вычислить в точках из мн.
[02:32:57.620 --> 02:33:02.620]  И точке, и префиксной суммы f надо будет тоже вычислить в точках из этого множества.
[02:33:02.620 --> 02:33:08.620]  И этого будет достаточно для вычисления функций в точке х-вертки, в точке n.
[02:33:09.620 --> 02:33:11.620]  Ну, возможно, там нужно будет по плюс-минус 1.
[02:33:11.620 --> 02:33:13.620]  Нет, нет, вот не будет, оказывается.
[02:33:14.620 --> 02:33:15.620]  Оказывается, что не будет.
[02:33:15.620 --> 02:33:19.620]  Ну типа смотри, давай на эту лестнику подробнее посмотрим, да, еще раз.
[02:33:19.620 --> 02:33:21.620]  Вот типа ты смотришь на n равно 1, да.
[02:33:21.620 --> 02:33:24.620]  Вот у тебя раз первый отрезок, вот у тебя первый отрезок, да.
[02:33:24.620 --> 02:33:27.620]  Типа ты до m1 дошел.
[02:33:27.620 --> 02:33:29.620]  Потом типа ты идешь до m2.
[02:33:29.620 --> 02:33:33.620]  Вот, ну вот типа тебе нужна эта точка, вот минус префикс этих уже взятых.
[02:33:33.620 --> 02:33:34.620]  Ну ты их уже вычислил, да.
[02:33:34.620 --> 02:33:36.620]  Дальше ты идешь на следующую ступеньку.
[02:33:38.620 --> 02:33:42.620]  Тут типа ну тебе опять нужен весь этот префикс, минус последний вычисленный точек и так далее.
[02:33:42.620 --> 02:33:43.620]  То есть у тебя новых точек не возникает.
[02:33:43.620 --> 02:33:48.620]  У тебя реально нужны только точки множества m от n.
[02:33:48.620 --> 02:33:49.620]  Окей?
[02:33:49.620 --> 02:33:53.620]  Вот это такой важный достаточно момент, о котором стоит упомянуть.
[02:33:54.620 --> 02:33:56.620]  Вот, ну доказательства попростую.
[02:33:56.620 --> 02:33:59.620]  Потому что вот картинка у нас такая, она симметричная, классная, прикольная.
[02:33:59.620 --> 02:34:01.620]  Окей.
[02:34:01.620 --> 02:34:10.620]  Хорошо, то есть мы свели вычисления phi на g, по сути, к корнюю z вычисления префиксных сумм для f и для g.
[02:34:10.620 --> 02:34:14.620]  Пока что мы ну прям совсем мало сумм умеем считать.
[02:34:14.620 --> 02:34:17.620]  Давайте так, что хоть что-нибудь нетривиально посчитаем.
[02:34:17.620 --> 02:34:20.620]  И вот предлагается как раз начать с функции миобилса.
[02:34:20.620 --> 02:34:22.620]  Так, Сев, это og g?
[02:34:22.620 --> 02:34:25.620]  Вообще нет?
[02:34:25.620 --> 02:34:26.620]  А, ты не слушал?
[02:34:26.620 --> 02:34:29.620]  Окей, нормально.
[02:34:29.620 --> 02:34:31.620]  Давайте с функции миобилса начнем.
[02:34:31.620 --> 02:34:34.620]  Я думаю, я могу вот эту табличку функции стереть.
[02:34:34.620 --> 02:34:39.620]  Там все посмотрели на функции, они красивые, классно.
[02:34:39.620 --> 02:34:43.620]  Давайте функцию мио вычислим.
[02:34:43.620 --> 02:34:47.620]  Вот для того, чтобы мио вычислить, нам нужно какое-то равенство относительно мио.
[02:34:47.620 --> 02:34:51.620]  И вот я сейчас предлагаю взять равенство мио.
[02:34:51.620 --> 02:34:53.620]  И тут надо подумать.
[02:34:53.620 --> 02:34:56.620]  На ID, видимо.
[02:34:56.620 --> 02:35:02.620]  И тогда я получу функцию х от единички.
[02:35:02.620 --> 02:35:05.620]  Вот, утверждается так.
[02:35:05.620 --> 02:35:07.620]  Но почему это так? Давайте проверим.
[02:35:07.620 --> 02:35:10.620]  Х от единички это 1 в 1 и 0 в остальных.
[02:35:10.620 --> 02:35:11.620]  Да.
[02:35:11.620 --> 02:35:13.620]  Давайте проверим.
[02:35:13.620 --> 02:35:16.620]  Мы уже знаем, что результат будет в мультипликативной функции,
[02:35:16.620 --> 02:35:19.620]  поэтому надо посмотреть только то, что происходит в точках П степенника.
[02:35:19.620 --> 02:35:21.620]  Хорошо, давайте рассмотрим.
[02:35:21.620 --> 02:35:23.620]  Как будет вести себя мио в точках П степенника?
[02:35:23.620 --> 02:35:29.620]  Она будет сначала давать единичку, потом минус единичку, потом 0, 0 и так далее.
[02:35:29.620 --> 02:35:32.620]  Функция мио, она так определяется, да?
[02:35:32.620 --> 02:35:34.620]  Это с нулевой степени.
[02:35:34.620 --> 02:35:36.620]  Да, с нулевой степени, естественно.
[02:35:36.620 --> 02:35:38.620]  Программисты все такое.
[02:35:38.620 --> 02:35:40.620]  ID, 1.
[02:35:40.620 --> 02:35:42.620]  А нет, стоп, не ID.
[02:35:42.620 --> 02:35:44.620]  Не-не-не, ID наврал.
[02:35:44.620 --> 02:35:46.620]  Нам нужна функция, которая постоянно единичка,
[02:35:46.620 --> 02:35:48.620]  которая всегда единичку возвращает.
[02:35:48.620 --> 02:35:51.620]  1, 1, 1 и так далее.
[02:35:51.620 --> 02:35:53.620]  Это у нас единичка.
[02:35:53.620 --> 02:35:55.620]  Но не удивительно.
[02:35:55.620 --> 02:35:57.620]  Давайте, собственно, их вычислим.
[02:35:57.620 --> 02:35:59.620]  Эти две функции замечательные.
[02:35:59.620 --> 02:36:02.620]  Так, вот тут, чтобы вычислить 0, надо 1 на 1 умножить.
[02:36:02.620 --> 02:36:04.620]  И все, готово.
[02:36:04.620 --> 02:36:07.620]  Чтобы вычислить 2, надо 1 на 1 минус 1 на минус 1.
[02:36:07.620 --> 02:36:09.620]  Ну окей, 0.
[02:36:09.620 --> 02:36:13.620]  Тут вычисляем то же самое.
[02:36:13.620 --> 02:36:15.620]  То же самое, везде получится 0, да?
[02:36:15.620 --> 02:36:18.620]  То есть для того, чтобы нам какую-то единичку тут вычислить,
[02:36:18.620 --> 02:36:21.620]  надо взять эту единичку, ну, на единичку,
[02:36:21.620 --> 02:36:23.620]  а предыдущую на минус единичку, да?
[02:36:23.620 --> 02:36:25.620]  Может и все будет ок.
[02:36:25.620 --> 02:36:27.620]  X минус 1 может на 1 делить на X минус 1.
[02:36:27.620 --> 02:36:29.620]  Ну, возможно, да.
[02:36:29.620 --> 02:36:31.620]  Я, возможно, тупо объясняю, сорри.
[02:36:31.620 --> 02:36:33.620]  Возможно.
[02:36:33.620 --> 02:36:35.620]  Мне лень.
[02:36:35.620 --> 02:36:37.620]  Мне лень разбираться, но как-то так это работает.
[02:36:37.620 --> 02:36:39.620]  То есть мы действительно получаем het единички.
[02:36:39.620 --> 02:36:41.620]  Окей, ну, в чем проблема?
[02:36:41.620 --> 02:36:44.620]  То есть если мы совсем посмотрим на эту формулу пустыми глазами,
[02:36:44.620 --> 02:36:46.620]  мы что увидим?
[02:36:46.620 --> 02:36:48.620]  Мы увидим, что мы научились вычислять het единички,
[02:36:48.620 --> 02:36:50.620]  префиксную сумму, уже звучит смешно, да?
[02:36:50.620 --> 02:36:52.620]  Через вычисление функции мебиос,
[02:36:52.620 --> 02:36:54.620]  префиксная сумма функции мебиоса
[02:36:54.620 --> 02:36:56.620]  и префиксная сумма функции единички.
[02:36:56.620 --> 02:36:58.620]  Ну, кажется, мы хотели сделать что-то наоборот,
[02:36:58.620 --> 02:37:01.620]  но оказывается, что и в этом случае, в принципе, норма.
[02:37:01.620 --> 02:37:03.620]  Почему так?
[02:37:03.620 --> 02:37:05.620]  Ну, потому что давайте вот посмотрим
[02:37:05.620 --> 02:37:07.620]  на вот эту сумму.
[02:37:07.620 --> 02:37:09.620]  Давайте, что сделаем?
[02:37:09.620 --> 02:37:11.620]  Давайте представим,
[02:37:11.620 --> 02:37:13.620]  что n не равно единичка
[02:37:13.620 --> 02:37:15.620]  и посмотрим, что получилось.
[02:37:15.620 --> 02:37:17.620]  Я прямо это перепишу, наверное.
[02:37:17.620 --> 02:37:19.620]  У нас при n больше единички.
[02:37:19.620 --> 02:37:21.620]  У нас слева мы
[02:37:21.620 --> 02:37:23.620]  получили нолик,
[02:37:23.620 --> 02:37:25.620]  потому что свертка их равна het единички.
[02:37:25.620 --> 02:37:27.620]  Нолик равен.
[02:37:27.620 --> 02:37:29.620]  Почему нолик? Единичка?
[02:37:29.620 --> 02:37:31.620]  Хет 1 тут. Мы
[02:37:31.620 --> 02:37:33.620]  подставляем сюда вместо...
[02:37:33.620 --> 02:37:35.620]  Сверх же.
[02:37:35.620 --> 02:37:37.620]  Сумма сверта, это типа хет 1
[02:37:37.620 --> 02:37:39.620]  плюс хет 2, плюс так далее.
[02:37:39.620 --> 02:37:41.620]  Смотрим.
[02:37:41.620 --> 02:37:43.620]  Да.
[02:37:43.620 --> 02:37:45.620]  У нас мю на
[02:37:45.620 --> 02:37:47.620]  1 равняется хе 1, да?
[02:37:47.620 --> 02:37:49.620]  Да. Значит, это
[02:37:49.620 --> 02:37:51.620]  префиксная сумма хе 1, верно?
[02:37:51.620 --> 02:37:53.620]  Да. А это 1 сюда.
[02:37:53.620 --> 02:37:55.620]  Да, кстати, это всегда 1.
[02:37:55.620 --> 02:37:57.620]  Да, реально бомбанул.
[02:37:57.620 --> 02:37:59.620]  А тут давайте...
[02:37:59.620 --> 02:38:01.620]  Как будет удобнее
[02:38:01.620 --> 02:38:03.620]  подставить, я думаю?
[02:38:03.620 --> 02:38:05.620]  Ну, давайте у нас f это будет
[02:38:05.620 --> 02:38:07.620]  функция единичка, да?
[02:38:07.620 --> 02:38:09.620]  f это функция единичка будет.
[02:38:09.620 --> 02:38:11.620]  А g это
[02:38:11.620 --> 02:38:13.620]  у нас будет функция мю.
[02:38:13.620 --> 02:38:15.620]  Окей, тогда какое мы
[02:38:15.620 --> 02:38:17.620]  равенство получили? У нас
[02:38:17.620 --> 02:38:19.620]  получается, что для каждого
[02:38:19.620 --> 02:38:21.620]  такого значения сумма по a
[02:38:21.620 --> 02:38:23.620]  равна n,
[02:38:23.620 --> 02:38:25.620]  у нас дальше
[02:38:25.620 --> 02:38:27.620]  будет f от a,
[02:38:27.620 --> 02:38:29.620]  то есть это 1,
[02:38:29.620 --> 02:38:31.620]  умножить на
[02:38:31.620 --> 02:38:33.620]  сумму...
[02:38:35.620 --> 02:38:37.620]  Нет, да, n поделить на a.
[02:38:37.620 --> 02:38:39.620]  Вот так все будет. Все будет именно так.
[02:38:39.620 --> 02:38:41.620]  Все нормально. Окей?
[02:38:41.620 --> 02:38:43.620]  Окей. А что из этого
[02:38:43.620 --> 02:38:45.620]  получим? Ну, давайте отсюда
[02:38:45.620 --> 02:38:47.620]  вытащим сумму при
[02:38:47.620 --> 02:38:49.620]  a равна единичка, то есть получаем
[02:38:49.620 --> 02:38:51.620]  что у нас?
[02:38:51.620 --> 02:38:53.620]  Сумма мю n
[02:38:53.620 --> 02:38:55.620]  плюс сумма с a равна 2
[02:38:55.620 --> 02:38:57.620]  по n.
[02:38:57.620 --> 02:38:59.620]  Суммирование по
[02:38:59.620 --> 02:39:01.620]  n поделить на a. Ничего
[02:39:01.620 --> 02:39:03.620]  сложного, да? Ну, осталось только
[02:39:03.620 --> 02:39:05.620]  заметить следующее, что
[02:39:07.620 --> 02:39:09.620]  вот для вычисления
[02:39:09.620 --> 02:39:11.620]  этой суммы нам надо
[02:39:11.620 --> 02:39:13.620]  всего лишь-то вычислить
[02:39:13.620 --> 02:39:15.620]  сумму мю
[02:39:15.620 --> 02:39:17.620]  в корень из n точках.
[02:39:17.620 --> 02:39:19.620]  Что вы рожаете?
[02:39:19.620 --> 02:39:21.620]  А, ну понятно.
[02:39:21.620 --> 02:39:23.620]  Собственно, сумму мю
[02:39:23.620 --> 02:39:25.620]  в n точках надо вычислить
[02:39:25.620 --> 02:39:27.620]  и умножить на какие-то константы,
[02:39:27.620 --> 02:39:29.620]  потому что у нас эти значения будут все на какие-то
[02:39:29.620 --> 02:39:31.620]  отрезки, которые мы можем вычислить.
[02:39:31.620 --> 02:39:33.620]  Окей. Но проблема в том, что их надо
[02:39:33.620 --> 02:39:35.620]  вычислить. Давайте возьмем да их вычислим их.
[02:39:35.620 --> 02:39:37.620]  Рекурсивно. Рекурсивно. И давайте
[02:39:37.620 --> 02:39:39.620]  делать минимализация.
[02:39:39.620 --> 02:39:41.620]  Вот. А что оказывается?
[02:39:41.620 --> 02:39:43.620]  Есть такое свойство, оно в принципе достаточно простое,
[02:39:43.620 --> 02:39:45.620]  что n поделить на a
[02:39:45.620 --> 02:39:47.620]  округлитнице, потом еще раз поделить на b,
[02:39:47.620 --> 02:39:49.620]  это то же самое, что
[02:39:49.620 --> 02:39:51.620]  n поделить на ab.
[02:39:51.620 --> 02:39:53.620]  Отличное свойство. Нет, ну реально простое,
[02:39:53.620 --> 02:39:55.620]  ну доказывается в одну срочку.
[02:39:55.620 --> 02:39:57.620]  Как ты, но я это доказывал сначала плохо,
[02:39:57.620 --> 02:39:59.620]  а потом хорошо. Вот.
[02:39:59.620 --> 02:40:01.620]  Да, действительно,
[02:40:01.620 --> 02:40:03.620]  это доказывается очень просто, и
[02:40:03.620 --> 02:40:05.620]  оно нам гарантирует, что в рекурсивных
[02:40:05.620 --> 02:40:07.620]  вызовах нам не потребуется вычислять
[02:40:07.620 --> 02:40:09.620]  сумму мю в новых
[02:40:09.620 --> 02:40:11.620]  точках. Да.
[02:40:11.620 --> 02:40:13.620]  Ну и все, окей. Так давайте
[02:40:13.620 --> 02:40:15.620]  оценим алгоритм, что ли.
[02:40:15.620 --> 02:40:17.620]  За сколько он у нас будет работать?
[02:40:17.620 --> 02:40:19.620]  Так.
[02:40:19.620 --> 02:40:21.620]  Нам надо отдельно
[02:40:21.620 --> 02:40:23.620]  посмотреть, в случае a меньше
[02:40:23.620 --> 02:40:25.620]  корни из n, да? И больше.
[02:40:25.620 --> 02:40:27.620]  А нет, не-не-не.
[02:40:27.620 --> 02:40:29.620]  Хочется сначала расписать сумму, а потом уже...
[02:40:29.620 --> 02:40:31.620]  Да-да, давайте, окей, давайте сумму.
[02:40:31.620 --> 02:40:33.620]  Хорошо, вот у нас будет o от
[02:40:33.620 --> 02:40:35.620]  суммы по m,
[02:40:35.620 --> 02:40:37.620]  давайте, из m,
[02:40:37.620 --> 02:40:39.620]  из mn, да?
[02:40:39.620 --> 02:40:41.620]  Это те значения, которые у нас
[02:40:41.620 --> 02:40:43.620]  возникнут, да? Да.
[02:40:43.620 --> 02:40:45.620]  И что, каждую мы решаем, по сути, за o от корни
[02:40:45.620 --> 02:40:47.620]  из n? За количество
[02:40:47.620 --> 02:40:49.620]  делителей. Ой, ну да-да,
[02:40:49.620 --> 02:40:51.620]  за корень. Нет, за корень. Никакого количества
[02:40:51.620 --> 02:40:53.620]  делителей тут нет, да? Тут реально корень.
[02:40:53.620 --> 02:40:55.620]  Хорошо.
[02:40:55.620 --> 02:40:57.620]  Дальше что? Как эту сумму мы можем расписать?
[02:40:57.620 --> 02:40:59.620]  Ну если типа m, который меньше корни из n?
[02:40:59.620 --> 02:41:01.620]  Да, это типа что будет?
[02:41:01.620 --> 02:41:03.620]  Это будет сумма k
[02:41:03.620 --> 02:41:05.620]  от 1 до корня n?
[02:41:05.620 --> 02:41:07.620]  Корни из k, да?
[02:41:07.620 --> 02:41:09.620]  А тут
[02:41:09.620 --> 02:41:11.620]  что будет? Тут будет сумма
[02:41:11.620 --> 02:41:13.620]  от...
[02:41:13.620 --> 02:41:15.620]  Вот чисто больше...
[02:41:15.620 --> 02:41:17.620]  Не-не-не, пока что я
[02:41:17.620 --> 02:41:19.620]  и близко оптимизировать
[02:41:19.620 --> 02:41:21.620]  не хочу до n в степени 2 третьих,
[02:41:21.620 --> 02:41:23.620]  поэтому уж так запишу,
[02:41:23.620 --> 02:41:25.620]  так будет попроще.
[02:41:25.620 --> 02:41:27.620]  Тут до корни z, и тут, соответственно, будет суммироваться
[02:41:27.620 --> 02:41:29.620]  n поделить на k.
[02:41:29.620 --> 02:41:31.620]  Но оказывается, что если мы это все
[02:41:31.620 --> 02:41:33.620]  просуммируем, как-нибудь там проинтегрировали,
[02:41:33.620 --> 02:41:35.620]  мы получим оценку n в
[02:41:35.620 --> 02:41:37.620]  степени 3 четверти.
[02:41:37.620 --> 02:41:39.620]  Ну что быстрее, чем o от n, да?
[02:41:39.620 --> 02:41:41.620]  Это уже круто. То есть мы не зря делали всю эту фигню.
[02:41:41.620 --> 02:41:43.620]  Вот, замечательно.
[02:41:43.620 --> 02:41:45.620]  Но мы пока что вычислили
[02:41:45.620 --> 02:41:47.620]  только mu.
[02:41:47.620 --> 02:41:49.620]  Давайте посмотрим дальше, как мы, например,
[02:41:49.620 --> 02:41:51.620]  можем вычислить значение phi.
[02:41:51.620 --> 02:41:53.620]  Phi у нас чему уравняется?
[02:41:53.620 --> 02:41:55.620]  Ну это у нас
[02:41:55.620 --> 02:41:57.620]  чердмена как-то выражается, да,
[02:41:57.620 --> 02:41:59.620]  насколько я помню?
[02:41:59.620 --> 02:42:01.620]  Это id на mu, вроде как, насколько я помню.
[02:42:05.620 --> 02:42:07.620]  Вот.
[02:42:07.620 --> 02:42:09.620]  Вроде так.
[02:42:09.620 --> 02:42:11.620]  Ну почему так? Ну давайте действительно посмотрим,
[02:42:11.620 --> 02:42:13.620]  как у нас тогда будет выглядеть
[02:42:13.620 --> 02:42:15.620]  свертки Dirichlet по определению.
[02:42:15.620 --> 02:42:17.620]  Мы, типа, давайте переберем аргумент
[02:42:17.620 --> 02:42:19.620]  при mu. Мы будем перебирать делители
[02:42:19.620 --> 02:42:21.620]  n. Ну, естественно, можем считать, что только
[02:42:21.620 --> 02:42:23.620]  свободно от квадратов, да?
[02:42:23.620 --> 02:42:25.620]  И дальше мы, типа, вычтем из n все, которые
[02:42:25.620 --> 02:42:27.620]  делятся на p1, потом все, которые делятся на p2,
[02:42:27.620 --> 02:42:29.620]  на pk в этой свертке.
[02:42:29.620 --> 02:42:31.620]  Потом, типа, мы возьмем, переберем
[02:42:31.620 --> 02:42:33.620]  эти делители по 2 простые, их обратно
[02:42:33.620 --> 02:42:35.620]  прибавим к своему. Короче говоря, получим формулу вкушения
[02:42:35.620 --> 02:42:37.620]  исключения, которая, очевидно, считает значение функции phi.
[02:42:37.620 --> 02:42:39.620]  Вот. Ну и, типа, что посмотрим?
[02:42:39.620 --> 02:42:41.620]  ID мы умеем быстро считать? Ну умеем.
[02:42:41.620 --> 02:42:43.620]  mu мы умеем считать? Ну уже умеем.
[02:42:43.620 --> 02:42:45.620]  И более того, типа, нам mu
[02:42:45.620 --> 02:42:47.620]  надо считать только вот в этих точках m от n.
[02:42:47.620 --> 02:42:49.620]  Поэтому мы это отдельно сделали за n степень 3 четверть,
[02:42:49.620 --> 02:42:51.620]  а потом можем отдельно считать за n
[02:42:51.620 --> 02:42:53.620]  степень 3 четверть значение функции phi.
[02:42:53.620 --> 02:42:55.620]  Ровно так же. Да, и на самом деле
[02:42:55.620 --> 02:42:57.620]  так можно продолжать, что-то делать,
[02:42:57.620 --> 02:42:59.620]  радоваться жизни, но
[02:42:59.620 --> 02:43:01.620]  возникает вопрос, а можно ли быстрее
[02:43:01.620 --> 02:43:03.620]  оказываться, что ответ положительный?
[02:43:03.620 --> 02:43:05.620]  Делается это очень просто.
[02:43:05.620 --> 02:43:07.620]  Вот. Какая тут проблема
[02:43:07.620 --> 02:43:09.620]  алгоритма? Проблема в том, что
[02:43:09.620 --> 02:43:11.620]  у нас слишком глубокие
[02:43:11.620 --> 02:43:13.620]  рекурсы. Мы, типа, n, как бы,
[02:43:13.620 --> 02:43:15.620]  чтобы нам обрабатывать какое-то
[02:43:15.620 --> 02:43:17.620]  число n. Ну давайте даже
[02:43:17.620 --> 02:43:19.620]  так. Давайте представим, что мы маленькие
[02:43:19.620 --> 02:43:21.620]  числа n обрабатываем. Вот их
[02:43:21.620 --> 02:43:23.620]  относительно может быть, то есть все до корня могут быть.
[02:43:23.620 --> 02:43:25.620]  И мы каждый за корень обрабатываем.
[02:43:25.620 --> 02:43:27.620]  То есть кажется логичным, что мы их можем
[02:43:27.620 --> 02:43:29.620]  взять и за линию предпредсчитать. У нас же есть линии,
[02:43:29.620 --> 02:43:31.620]  наверное, что ретасфена. Вот так
[02:43:31.620 --> 02:43:33.620]  что давайте сделаем такую оптимизацию.
[02:43:35.620 --> 02:43:37.620]  Давайте
[02:43:37.620 --> 02:43:39.620]  все числа до какой-то
[02:43:39.620 --> 02:43:41.620]  константа k. Вот сейчас я уже веду.
[02:43:41.620 --> 02:43:43.620]  Сейчас понадобится...
[02:43:43.620 --> 02:43:45.620]  А k есть уже?
[02:43:45.620 --> 02:43:47.620]  Ну давайте m.
[02:43:47.620 --> 02:43:49.620]  Лучше?
[02:43:49.620 --> 02:43:51.620]  m у вас тоже в индексах.
[02:43:51.620 --> 02:43:53.620]  Где? Нет в индексах.
[02:43:53.620 --> 02:43:55.620]  m принадлежащей m. А это m
[02:43:55.620 --> 02:43:57.620]  большое? А, так оно только тут
[02:43:57.620 --> 02:43:59.620]  появляется, неважно.
[02:43:59.620 --> 02:44:01.620]  С большое. Давай
[02:44:01.620 --> 02:44:03.620]  t.
[02:44:03.620 --> 02:44:05.620]  Можно t?
[02:44:05.620 --> 02:44:07.620]  Большое.
[02:44:07.620 --> 02:44:09.620]  Это же константа.
[02:44:09.620 --> 02:44:11.620]  Константа должна писаться в капс локом.
[02:44:13.620 --> 02:44:15.620]  Но это не констэкспро.
[02:44:15.620 --> 02:44:17.620]  Константа я хочу заметить, поэтому...
[02:44:17.620 --> 02:44:19.620]  Вот, окей, давайте.
[02:44:19.620 --> 02:44:21.620]  Хорошо, мы первое значение t просто посчитаем за ot
[02:44:21.620 --> 02:44:23.620]  с помощью линейного решта.
[02:44:23.620 --> 02:44:25.620]  И мы будем сразу полагать,
[02:44:25.620 --> 02:44:27.620]  что мы сразу t выбираем больше, чем корень он.
[02:44:29.620 --> 02:44:31.620]  Теперь, тогда у нас вот тут
[02:44:31.620 --> 02:44:33.620]  остается что?
[02:44:33.620 --> 02:44:35.620]  Теперь вот тут нам остается
[02:44:35.620 --> 02:44:37.620]  вот за такую синтотику порешать только какие-то
[02:44:37.620 --> 02:44:39.620]  самые большие делители.
[02:44:39.620 --> 02:44:41.620]  Ну, это что будет за делители? Давайте в индексах
[02:44:41.620 --> 02:44:43.620]  используем. Сумма у нас пока будет.
[02:44:43.620 --> 02:44:45.620]  До скольки пока непонятно.
[02:44:45.620 --> 02:44:47.620]  Но это будет у нас корень из
[02:44:47.620 --> 02:44:49.620]  n поделить на k.
[02:44:51.620 --> 02:44:53.620]  Ну, почему непонятно?
[02:44:53.620 --> 02:44:55.620]  Ну, это будет, соответственно, да,
[02:44:55.620 --> 02:44:57.620]  поделить на t, да, именно так. Хорошо.
[02:44:57.620 --> 02:44:59.620]  Ну и давайте, собственно, что сделаем?
[02:44:59.620 --> 02:45:01.620]  Все посчитаем.
[02:45:01.620 --> 02:45:03.620]  У нас, ну, это ot, понятное дело.
[02:45:03.620 --> 02:45:05.620]  Вот мы хотим сейчас понять, какую t надо выбрать.
[02:45:05.620 --> 02:45:07.620]  Это будет ot.
[02:45:07.620 --> 02:45:09.620]  Эта сумма, ну,
[02:45:09.620 --> 02:45:11.620]  корень из n можно вынести.
[02:45:11.620 --> 02:45:13.620]  Корень из k можно представить в виде как
[02:45:13.620 --> 02:45:15.620]  корень из k плюс корень из k-1.
[02:45:15.620 --> 02:45:17.620]  Короче, получить телескопическую сумму и радоваться.
[02:45:17.620 --> 02:45:19.620]  Короче говоря, тут мы получаем n поделить на t.
[02:45:21.620 --> 02:45:23.620]  Ну, смотри, вот t из...
[02:45:23.620 --> 02:45:25.620]  А, знаменатель?
[02:45:25.620 --> 02:45:27.620]  Да, просто хотим такую сумму.
[02:45:27.620 --> 02:45:31.620]  А синтетически равна корню из k.
[02:45:31.620 --> 02:45:33.620]  Ну, это очевидно, плюс-минус.
[02:45:33.620 --> 02:45:35.620]  Ну, можно, типа, это делать с помощью...
[02:45:35.620 --> 02:45:37.620]  Что?
[02:45:37.620 --> 02:45:39.620]  Ну, это либо можно проинтегрировать,
[02:45:39.620 --> 02:45:41.620]  но интегрировать это, конечно, сложно.
[02:45:41.620 --> 02:45:43.620]  Можно проще прикол сделать, типа,
[02:45:43.620 --> 02:45:45.620]  увеличить каждый знаменатель, типа,
[02:45:45.620 --> 02:45:47.620]  ну, поделить как бы пополам ее,
[02:45:47.620 --> 02:45:49.620]  вот, подсмотреть вот на такую сумму.
[02:45:53.620 --> 02:45:55.620]  Да?
[02:45:55.620 --> 02:45:57.620]  Ну, примерно то же самое.
[02:45:57.620 --> 02:45:59.620]  Ну, оценка сверху вроде.
[02:45:59.620 --> 02:46:01.620]  Ну, типа, давай заметим, что это телескопическая сумма,
[02:46:01.620 --> 02:46:03.620]  потому что это, типа, корень из 1 минус корень из 0.
[02:46:03.620 --> 02:46:05.620]  Следующий будет корень из 2 минус корень из 1 и так далее.
[02:46:07.620 --> 02:46:09.620]  Да, корень из k минус корень из k-1.
[02:46:09.620 --> 02:46:11.620]  Ну, такой вот фокус есть.
[02:46:15.620 --> 02:46:17.620]  Ну что, ну...
[02:46:19.620 --> 02:46:21.620]  Не, ну интегрировать это я не умею, честно говоря.
[02:46:21.620 --> 02:46:23.620]  Поэтому я не интегрирую.
[02:46:23.620 --> 02:46:25.620]  Не, ну в смысле, ну вот это понятно, почему то же самое?
[02:46:25.620 --> 02:46:27.620]  Примерно то же самое.
[02:46:27.620 --> 02:46:29.620]  Ну, смотри, ну просто, типа, давай посмотрим на корень из n
[02:46:29.620 --> 02:46:31.620]  плюс корень из n-1, да.
[02:46:31.620 --> 02:46:33.620]  Да, множим на сопряженное.
[02:46:33.620 --> 02:46:35.620]  Тут что получится?
[02:46:35.620 --> 02:46:37.620]  Тут корень из n минус корень из n-1, а тут что?
[02:46:37.620 --> 02:46:39.620]  n минус n-1, да.
[02:46:39.620 --> 02:46:41.620]  Ну, это единичка, ну, получил телескопическую сумму.
[02:46:41.620 --> 02:46:43.620]  Вот самое главное, что не интегрируем.
[02:46:47.620 --> 02:46:49.620]  Окей.
[02:46:49.620 --> 02:46:51.620]  Вот, ну, короче, получили вот такую сумму, да.
[02:46:51.620 --> 02:46:53.620]  Вот это что такое?
[02:46:53.620 --> 02:46:55.620]  Это от t плюс n поделить на корень из t.
[02:46:55.620 --> 02:46:57.620]  Ну, и отсюда легко видеть, что
[02:46:57.620 --> 02:46:59.620]  оптимально выбрать t равное
[02:46:59.620 --> 02:47:01.620]  кубическому корню из n-2.
[02:47:03.620 --> 02:47:05.620]  Вот.
[02:47:05.620 --> 02:47:07.620]  Ну, и мы получим тогда асимптотику
[02:47:07.620 --> 02:47:09.620]  n в степени 2 трети.
[02:47:11.620 --> 02:47:13.620]  Вот.
[02:47:13.620 --> 02:47:15.620]  Как-то так.
[02:47:15.620 --> 02:47:17.620]  То есть, в принципе, ну, лгритм достаточно простой,
[02:47:17.620 --> 02:47:19.620]  типа там
[02:47:19.620 --> 02:47:21.620]  получаем, как бы, просто расписываем
[02:47:21.620 --> 02:47:23.620]  по вот этой сумме
[02:47:23.620 --> 02:47:25.620]  через свертку Dirichlet.
[02:47:25.620 --> 02:47:27.620]  Если просто так делаем, у нас
[02:47:27.620 --> 02:47:29.620]  n в степени 3 четверти, если посчитываем вначале, то у нас
[02:47:29.620 --> 02:47:31.620]  n в степени 2 третих. Конец.
[02:47:31.620 --> 02:47:33.620]  Вот.
[02:47:33.620 --> 02:47:35.620]  И у меня, видимо,
[02:47:35.620 --> 02:47:37.620]  материал вообще не хватает на три лекции.
[02:47:37.620 --> 02:47:39.620]  Ну, на три пары, как хотел Филипп.
[02:47:39.620 --> 02:47:41.620]  Три пары это гораздо больше, чем
[02:47:41.620 --> 02:47:43.620]  ты думаешь до того, как начинаешь читать.
[02:47:43.620 --> 02:47:45.620]  Да я это понимаю.
[02:47:45.620 --> 02:47:47.620]  Не, в смысле, я изначально понимал,
[02:47:47.620 --> 02:47:49.620]  что у меня времени не хватит.
[02:47:49.620 --> 02:47:51.620]  Поэтому я докидывал
[02:47:51.620 --> 02:47:53.620]  цыганских фокусов посередине, но, к сожалению,
[02:47:53.620 --> 02:47:55.620]  цыганский фокус рассказывать алгоритму
[02:47:55.620 --> 02:47:57.620]  Euclide полчаса не сработал.
[02:47:59.620 --> 02:48:01.620]  И поэтому как-то так.
[02:48:01.620 --> 02:48:03.620]  Ну, вот, в принципе, все.
[02:48:03.620 --> 02:48:05.620]  Может быть,
[02:48:05.620 --> 02:48:07.620]  что-то еще есть.
[02:48:07.620 --> 02:48:09.620]  Ну, вот если нет, я думаю,
[02:48:09.620 --> 02:48:11.620]  тут смысла нет собираться.
[02:48:11.620 --> 02:48:13.620]  Можно, в принципе, расходиться
[02:48:13.620 --> 02:48:15.620]  вам, типа,
[02:48:15.620 --> 02:48:17.620]  все.
[02:48:17.620 --> 02:48:19.620]  Вам, наверное, тоже не по кайфу учиться весь день.
[02:48:19.620 --> 02:48:21.620]  Весь день?
[02:48:21.620 --> 02:48:23.620]  Большинство из нас, только алгоритм.
[02:48:23.620 --> 02:48:25.620]  А, только алгоритм, окей.
[02:48:25.620 --> 02:48:27.620]  Ну, аж три пары.
[02:48:27.620 --> 02:48:29.620]  А, нормально.
[02:48:29.620 --> 02:48:31.620]  Сразу видно.
[02:48:33.620 --> 02:48:35.620]  Так, ну хорошо, давайте.
[02:48:37.620 --> 02:48:39.620]  Так, ну ладно,
[02:48:39.620 --> 02:48:41.620]  хорошо, давайте какую-нибудь фигню
[02:48:41.620 --> 02:48:43.620]  о мультипликативных функциях.
[02:48:43.620 --> 02:48:45.620]  Еще пару слов скажу, наверное,
[02:48:45.620 --> 02:48:47.620]  не то чтобы супер важно,
[02:48:47.620 --> 02:48:49.620]  но мультипликативные функции
[02:48:49.620 --> 02:48:51.620]  еще, оказывается,
[02:48:51.620 --> 02:48:53.620]  можно считать. Помните, мы обсуждали
[02:48:53.620 --> 02:48:55.620]  Решетто, ретосфена, которая работает
[02:48:55.620 --> 02:48:57.620]  от
[02:48:57.620 --> 02:48:59.620]  r-l
[02:48:59.620 --> 02:49:01.620]  плюс коренизер
[02:49:01.620 --> 02:49:03.620]  за log log r, да?
[02:49:05.620 --> 02:49:07.620]  Ну, обычный Решетто, ретосфена,
[02:49:07.620 --> 02:49:09.620]  по сути, да?
[02:49:09.620 --> 02:49:11.620]  На отрезке. Ничего сложного.
[02:49:11.620 --> 02:49:13.620]  Ну, вот оказывается, что есть иногда такие
[02:49:13.620 --> 02:49:15.620]  исключительные случаи, когда его можно
[02:49:15.620 --> 02:49:17.620]  использовать для обучения мультипликативных функций
[02:49:17.620 --> 02:49:19.620]  в достаточно больших точках.
[02:49:19.620 --> 02:49:21.620]  Тут пример с дачкой говорить не буду,
[02:49:21.620 --> 02:49:23.620]  потому что это с дачкой с китайского контеста.
[02:49:25.620 --> 02:49:27.620]  И, типа, она как раз была вот про
[02:49:27.620 --> 02:49:29.620]  эту функцию, помните, я сам показывал,
[02:49:29.620 --> 02:49:31.620]  одна четвертая количество решений с квадрат
[02:49:31.620 --> 02:49:33.620]  плюс игрок датков, наверное. Вот, короче, это оттуда была с дачкой.
[02:49:33.620 --> 02:49:35.620]  И как раз
[02:49:35.620 --> 02:49:37.620]  решалась вот такой техникой. Ну, и в принципе
[02:49:37.620 --> 02:49:39.620]  вот так вот.
[02:49:39.620 --> 02:49:41.620]  Вот.
[02:49:41.620 --> 02:49:43.620]  Вот.
[02:49:43.620 --> 02:49:45.620]  Вот.
[02:49:45.620 --> 02:49:47.620]  Вот.
[02:49:47.620 --> 02:49:49.620]  Вот.
[02:49:49.620 --> 02:49:51.620]  Вот.
[02:49:51.620 --> 02:49:53.620]  Вот.
[02:49:53.620 --> 02:49:55.620]  Вот.
[02:49:55.620 --> 02:49:57.620]  Вот.
[02:49:57.620 --> 02:49:59.620]  Вот.
[02:49:59.620 --> 02:50:01.620]  Вот.
[02:50:01.620 --> 02:50:03.620]  Вот.
[02:50:03.620 --> 02:50:05.620]  Вот.
