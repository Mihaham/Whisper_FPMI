[00:00.000 --> 00:09.000]  Вот, и всякие разные задачи с этими последовательствами можно делать.
[00:09.000 --> 00:15.000]  Первый самый такой самый траспорт и, возможно, самый популярный трек, который можно делать, — расширование.
[00:15.000 --> 00:24.000]  В этом работает так. Мы для каждой строки определим в ней ее числовой певалент.
[00:24.000 --> 00:33.000]  Давайте скажем, что х из строки s0, s1 и т.д., это такое выручисло.
[00:33.000 --> 00:53.000]  С0 на, давайте, x, нет, давайте b в степени n-1, плюс s1 на b в степени n-2, плюс т.д., плюс s0-1, по модулю какого-нибудь m.
[00:53.000 --> 00:59.000]  Вот, значит, m и b — это выручисло.
[00:59.000 --> 01:06.000]  А когда я пишу символ умножить на что-то или прибавить что-то, я имею в виду, ну, зачастую.
[01:06.000 --> 01:12.000]  Либо здесь написано просто ASCII код этого символа, то есть у нас есть таблица ASCII, где 256 символов.
[01:12.000 --> 01:17.000]  И, соответственно, в каждом из символов, ну, по крайней мере, 20 — это актуал.
[01:17.000 --> 01:20.000]  У них есть какой-то свой номер, число какое-то.
[01:20.000 --> 01:29.000]  И вот здесь, собственно, просто чар преобразовывается к n-2, не явно, и происходит перемножение, сложение, все как надо.
[01:29.000 --> 01:37.000]  Либо это просто ASCII код символа, либо можно считать, что это как бы порядка для номера уставителя.
[01:37.000 --> 01:43.000]  То есть на среди всех символов, которых у нас, на самом деле, гораздо больше, чем 26, чем бутсла символа уставителя.
[01:43.000 --> 01:48.000]  А, значит, ну просто номер, да? Вот у меня 25.
[01:48.000 --> 02:00.000]  И причем, наверное, хочу не от нуля, а от 1. Давайте два варианта, как умножаемость к данным символам.
[02:00.000 --> 02:11.000]  Ну, разница, например, в том, что строка из всех ASCII у вас будет всегда нулем.
[02:11.000 --> 02:19.000]  И независимой длины. Это, ну, как бы, может быть и нормально, но не совсем хорошо.
[02:19.000 --> 02:27.000]  Значит, первый вариант. Это просто ASCII заменяется на ASCII код.
[02:27.000 --> 02:32.000]  То есть это просто конвертация чар преобразовывается.
[02:32.000 --> 02:39.000]  Либо, в случае нашего алфавита, да, когда алфавит это маленькая вот эти буквы,
[02:39.000 --> 02:49.000]  мы можем вместо ASCII записывать, я вот так пишу, S I минус A плюс 1.
[02:49.000 --> 02:56.000]  Мы узнали порядковый номер символов алфавите путем вычитания символа I по выявлению 1.
[02:56.000 --> 03:00.000]  Ну и, собственно, это будет то самое число, которое в этой форме представляется.
[03:00.000 --> 03:08.000]  То есть это число от 1 до 26, это число от 1 до 26 и так далее в ход до последнего символа.
[03:08.000 --> 03:15.000]  Вот. Значит, давайте считать, в какое породение давайте, как мы живем,
[03:15.000 --> 03:20.000]  что каждый символ заменяется на какой-то число от 1 до 26.
[03:20.000 --> 03:27.000]  И тогда, смотрите, если я скажу, возьму B больше, чем 26,
[03:27.000 --> 03:33.000]  тогда у меня тоже написано в скобках, это, по сути, запись в обычной системе числения какого-то числа.
[03:33.000 --> 03:36.000]  Да, если, то есть мы вот это все воспринимаем на прозряды,
[03:36.000 --> 03:40.000]  с 0 и с 1, когда я сниму с 1, то это просто число в обычной системе числения,
[03:40.000 --> 03:45.000]  я сложусь с нужными степенями, да, и получил какое-то число.
[03:45.000 --> 03:53.000]  Тогда вот это вот, это просто число в обычной системе числения.
[04:02.000 --> 04:08.000]  Ну и такое понимание хорошо тем, что, например, разным строчкам соответствует разная вот эта вот величина,
[04:08.000 --> 04:10.000]  одинаковая, одинаковая.
[04:10.000 --> 04:13.000]  Понятно, что если у нас есть две разные строки,
[04:13.000 --> 04:16.000]  то их записи в этой вот обычной системе числения будут различные,
[04:16.000 --> 04:18.000]  а значит и эти числа будут различные.
[04:18.000 --> 04:21.000]  А если строки одинаковые, то они по символе равно,
[04:21.000 --> 04:24.000]  и значит у них будут одинаковые вот эти вот значения су.
[04:24.000 --> 04:29.000]  Ну то есть в идеале мы могли бы просто каждую строчку воспринимать как число
[04:29.000 --> 04:31.000]  в какой-то там достаточно большой системе числения,
[04:31.000 --> 04:34.000]  гумичной, да, где B больше размера алфавита.
[04:34.000 --> 04:38.000]  И тогда, скажем, проверять, строки нравятся или не нравятся,
[04:38.000 --> 04:41.000]  можно просто сравнивать эти два числа.
[04:41.000 --> 04:43.000]  Вот эти вот.
[04:43.000 --> 04:47.000]  Ну, проблема понятна в том, что эти числа могут быть слишком большие
[04:47.000 --> 04:49.000]  и ни в какой нормальный тип не помещаться.
[04:49.000 --> 04:52.000]  То есть, по сути, мы просто перекодировали строку в некое число,
[04:52.000 --> 04:55.000]  оно может быть такое же длинное, как и исходное,
[04:55.000 --> 04:59.000]  и поэтому, в принципе, мы мало что выиграли.
[04:59.000 --> 05:04.000]  Но, когда мы берем по модулю M, вот это вот взятие остатка по модулю M,
[05:04.000 --> 05:08.000]  мы в каком-то смысле, ну, конечно, мы уменьшаем информацию,
[05:08.000 --> 05:10.000]  то есть у нас, возможно, какие-то коллизии,
[05:10.000 --> 05:13.000]  что разные строки теперь отвечают одному и тому же хешу,
[05:13.000 --> 05:17.000]  после взятия по модулю M вот этого вот.
[05:17.000 --> 05:21.000]  Но все равно, как бы, хочется верить, что если строки были разные,
[05:21.000 --> 05:23.000]  то у них хеши будут разные.
[05:23.000 --> 05:26.000]  Конечно, это не всегда так, но довольно часто так.
[05:26.000 --> 05:29.000]  Что я хочу сказать?
[05:29.000 --> 05:31.000]  Да?
[05:37.000 --> 05:39.000]  Ну, типа когда-то.
[05:39.000 --> 05:42.000]  Вот это из 56 для ASCII кода.
[05:42.000 --> 05:44.000]  Смотрите, то есть...
[05:47.000 --> 05:48.000]  Я понимаю, да.
[05:48.000 --> 05:52.000]  Ну, как бы, использовать что угодно, на самом деле.
[05:52.000 --> 05:56.000]  Использовать и двойку, и, типа, и случайное число.
[05:56.000 --> 05:59.000]  Поэтому тут не особо важны какие-то числа.
[05:59.000 --> 06:01.000]  Почти что угодно сработают.
[06:03.000 --> 06:06.000]  Так, значит, давайте я напишу, что мы хотим делать.
[06:06.000 --> 06:12.000]  Мы хотим научиться определять,
[06:19.000 --> 06:21.000]  равны ли две строки?
[06:21.000 --> 06:24.000]  Сейчас у меня есть какие-то скотчки.
[06:24.000 --> 06:27.000]  Ну, давайте считать, что они одинаковые длины.
[06:27.000 --> 06:29.000]  Нам лень их проверять символенно.
[06:29.000 --> 06:31.000]  У нас есть их хеши.
[06:33.000 --> 06:35.000]  И мы хотим по значениям хешей сказать,
[06:35.000 --> 06:37.000]  равны исходные строчки или нет.
[06:37.000 --> 06:39.000]  Ну, и здесь, естественно, поведение такое,
[06:39.000 --> 06:42.000]  что если хеши совпали,
[06:42.000 --> 06:47.000]  то мы говорим, что строки исходные равны.
[06:47.000 --> 06:49.000]  Ну и это, действительно, с хорошей вероятностью
[06:49.000 --> 06:51.000]  будет верным ответом.
[06:51.000 --> 06:53.000]  Мы чуть-чуть позже поймем,
[06:53.000 --> 06:56.000]  почему при правильном выборе BEM
[06:56.000 --> 06:58.000]  это будет, ну почти всегда правильным утверждением.
[06:58.000 --> 07:00.000]  Понятное дело, у нас, конечно, бывают коллизии.
[07:00.000 --> 07:02.000]  Если мы берем по модулю BEM,
[07:02.000 --> 07:04.000]  мы сужаем пространство возможных значений.
[07:04.000 --> 07:06.000]  А значит, разные, ну, какие-то разные строки
[07:06.000 --> 07:08.000]  склеиваются в 1.js.
[07:08.000 --> 07:10.000]  Но, грубо говоря, так же,
[07:10.000 --> 07:12.000]  если мы берем по модуле BEM,
[07:12.000 --> 07:14.000]  мы сужаем пространство возможных значений,
[07:14.000 --> 07:22.000]  Но, грубо говоря, такое происходит. Но если у них не совпали хэши, то они, конечно, точно не равны.
[07:29.000 --> 07:33.000]  Ну и в этом случае все совсем понятно. Если у них различные хэши, то они точно различные, не могут быть одинаковые,
[07:33.000 --> 07:39.000]  потому что одинаковые строки дали бы одинаковые вот эти значения, а значит одинаковые х значения.
[07:44.000 --> 07:56.000]  Значит, случай, когда равны фэши, но сами строки не равны, называется коллизия.
[08:03.000 --> 08:08.000]  То есть хэши совпали, они должны были. В идеале они не должны были сюда впасть, потому что строки разные.
[08:09.000 --> 08:15.000]  Ну давайте в каком-то смысле посчитаем вероятность коллизии. То есть если мы там что-нибудь будем выбирать случайно,
[08:15.000 --> 08:24.000]  потому что понятно, если у нас все детерминировано и S, и T, и B, и M, то мы, конечно же, ну, такое бывает, и от этого никуда не веримся,
[08:24.000 --> 08:29.000]  что иногда бывают коллизии. Но вот если что-то выбирать случайно, то коллизии будут довольно редкие.
[08:29.000 --> 08:50.000]  Ну, подтверждение. Если B от M, так сейчас скажу, B меньше M – случайное число, нет, фиксированное число,
[08:50.000 --> 09:19.000]  а S и T – случайное строка длинной M, то вероятность коллизии не больше одной равны.
[09:20.000 --> 09:31.000]  То есть если бы у нас, скажем, были M не фиксированы, а то, что подается на вход представляли бы собой случайные строки,
[09:31.000 --> 09:38.000]  вот эти S и T, которые подаются, были бы случайными строками, тогда вероятность, ну, как бы ошибки максимум одна M.
[09:38.000 --> 09:46.000]  И, соответственно, если брать M порядка 10 в 9, ну, там, что в N помещается, 10 в 9 или 10 в 18, если мы хотим влонг-лонг считать ошибки,
[09:46.000 --> 09:52.000]  тогда вероятность ошибки будет, ну, пренебежимо, мала. 10 – 9 – это прямо супер-ед.
[09:52.000 --> 10:02.000]  Ну, доказательства. Что значит, что S не равно T, у них равны ошибки.
[10:02.000 --> 10:16.000]  Ну, давайте начнем вот такую строчку, я ее назову S, ну, это будет минус 5.
[10:16.000 --> 10:24.000]  То есть я сделал посимольное вычитание, и все равно, поскольку я считаю, что у меня аусловид – это там какие-то числа,
[10:24.000 --> 10:32.000]  то, соответственно, я просто посимольное число вычитаю, беру все по моделю M и опять получаю, ну, набор чисел.
[10:32.000 --> 10:40.000]  Я строку сейчас уже воспринимаю не как набор символов, A, B, C и так далее, а скорее как набор чисел, массив чисел в длинной ленте.
[10:40.000 --> 10:45.000]  И тогда, соответственно, я просто так по компоненту вычитаю из каждого из Итого числа строки ТС,
[10:46.000 --> 10:52.000]  получаю опять строку, как набор чисел.
[10:52.000 --> 10:55.000]  Тогда что мы про такую строчку можем сказать?
[10:55.000 --> 11:05.000]  Во-первых, не наливая строка, потому что S не равно T, не целиком из наливей стоит, но при этом у нее наливой хеш.
[11:05.000 --> 11:07.000]  При этом у нее наливой хеш.
[11:07.000 --> 11:12.000]  Ну, потому что понятно, что эта штука аддитивная, если я вот здесь вот из всех хешов вычитаю,
[11:12.000 --> 11:16.000]  например, из S-ы-то вычитаю T-и-то, то хеши тоже вычитаются.
[11:16.000 --> 11:18.000]  Вот.
[11:18.000 --> 11:22.000]  Значит, их разность тогда – это не наливая строка с наливым хешом.
[11:22.000 --> 11:25.000]  Давайте посчитаем, сколько вообще всего есть строк с наливым хешом.
[11:35.000 --> 11:39.000]  Хешом или хеш, это равно хешу правильно.
[11:39.000 --> 11:42.000]  Так, есть ли ответ в зале?
[11:42.000 --> 11:45.000]  Сколько есть строк данной длины, у которой хеш равен ею?
[12:05.000 --> 12:12.000]  Ну, смотрите, давайте переформирую вопрос.
[12:12.000 --> 12:15.000]  Представьте, что у вас зафиксированы вот эти вот все символы.
[12:15.000 --> 12:17.000]  А, наоборот.
[12:17.000 --> 12:22.000]  Вот эти вот все символы с U0 по U0,2.
[12:22.000 --> 12:28.000]  Ну, не более одного символа последней.
[12:28.000 --> 12:29.000]  Да.
[12:29.000 --> 12:34.000]  Значит, если это все зафиксировано, то не больше, чем один символ вот здесь вот даст нам наливую хеш.
[12:34.000 --> 12:39.000]  Ну, и более того, если sigma – это в точности числа от 0 до m-1, то ровно 1.
[12:39.000 --> 12:44.000]  Потому что, еще раз, да, что вот, допустим, эта штука зафиксирована, что значит, что хеш такой строки 0.
[12:44.000 --> 12:51.000]  Это значит, что, там, бла-бла-бла, плюс ugoi-1 делится на m.
[12:51.000 --> 12:55.000]  Ну, или там, сравнимо с 0 по U0.
[12:55.000 --> 13:03.000]  А значит, чтобы это выполнялось, то нужно просто чтобы ugoi-1 было сравнимо вот с, ну там, вот с минус этим по U0.
[13:03.000 --> 13:10.000]  Ну, и это, собственно, в точности дает нам значение, чему должно быть ровно ugoi-1.
[13:10.000 --> 13:16.000]  Да, поскольку у меня, ну, вот, я пишу, что m больше, чем b, а b еще больше, чем ugoi-1,
[13:16.000 --> 13:22.000]  тогда существует не больше, чем одно значение ugoi-1, которое будет эволюцировать к такому уравнению.
[13:22.000 --> 13:24.000]  Согласны?
[13:24.000 --> 13:29.000]  Ну, просто, просто, линейное сравнение, максимально одно решение.
[13:29.000 --> 13:38.000]  Значит, строк 0 х не больше, чем наборов из n-1 силы.
[13:38.000 --> 13:45.000]  Ответ их не больше, чем m в степени n-1.
[13:45.000 --> 13:55.000]  То есть из всех, да, ну, давайте, сейчас, сейчас, одну секунду.
[13:55.000 --> 14:02.000]  Больше, чем столько.
[14:02.000 --> 14:05.000]  Даже можно сказать, что их не больше, чем вот столько.
[14:05.000 --> 14:08.000]  А sigma в степени n-1, конечно.
[14:08.000 --> 14:12.000]  Вот их не больше, чем столько, а всего строк sigma в степени n-1.
[14:12.000 --> 14:14.000]  Мощность sigma в степени n-1.
[14:14.000 --> 14:23.000]  То есть, получается, всего лишь каждая одна сигмовая строка имеет 0 х.
[14:23.000 --> 14:25.000]  Вот, и сейчас мы это здесь тоже получим.
[14:25.000 --> 14:27.000]  Сейчас, одну секунду.
[14:27.000 --> 14:29.000]  Больше, чем столько.
[14:29.000 --> 14:31.000]  Ну, а строк всего sigma в степени n-1.
[14:31.000 --> 14:35.000]  Да, строк всего sigma в степени n-1.
[14:35.000 --> 14:40.000]  Что еще?
[14:40.000 --> 14:41.000]  А это чем больше?
[14:41.000 --> 14:44.000]  То есть это меньше значения, чем вот это.
[15:10.000 --> 15:12.000]  Ну, а строк всего sigma в степени n-1.
[15:12.000 --> 15:14.000]  Да, строк всего sigma в степени n-1.
[15:14.000 --> 15:16.000]  Ну, а строк всего sigma в степени n-1.
[15:16.000 --> 15:18.000]  Ну, а строк всего sigma в степени n-1.
[15:18.000 --> 15:20.000]  Ну, а строк всего sigma в степени n-1.
[15:20.000 --> 15:22.000]  Ну, а строк всего sigma в степени n-1.
[15:22.000 --> 15:24.000]  Ну, а строк всего sigma в степени n-1.
[15:24.000 --> 15:26.000]  Ну, а строк всего sigma в степени n-1.
[15:26.000 --> 15:28.000]  Ну, а строк всего sigma в степени n-1.
[15:28.000 --> 15:30.000]  Ну, а строк всего sigma в степени n-1.
[15:30.000 --> 15:32.000]  Ну, а строк всего sigma в степени n-1.
[15:32.000 --> 15:34.000]  Ну, а строк всего sigma в степени n-1.
[15:34.000 --> 15:36.000]  Ну, а строк всего sigma в степени n-1.
[15:36.000 --> 15:38.000]  Ну, да, смотрите, если я буду считать что у меня в качестве о самôleи-то вот здесь
[15:38.000 --> 15:40.000]  Ну, да, смотрите, если я буду считать что у меня в качестве о сам список
[15:40.000 --> 15:42.000]  Ну, да, смотрите, если я буду считать что у меня в качестве о сам Carouse-Newton
[15:42.000 --> 15:43.800]  Ну, да, смотрите если я буду считать что у
[15:43.800 --> 15:44.000]  Ну, да, смотрите если я буду считать что
[15:44.000 --> 15:46.000]  Ну, да, смотрите если я буду считать что в меня в
[15:46.000 --> 15:47.000]  Но, да, ideas
[15:47.000 --> 15:48.440]  вот здесь
[15:48.440 --> 15:52.440]  выступают как бы числа от 0 до m-1
[15:52.440 --> 15:55.300]  У меня как раз получится д在oc
[15:55.300 --> 15:58.440]  до m-1
[15:58.440 --> 16:00.000]  У меня как раз получится та сама att β
[16:00.000 --> 16:01.940]  Now, a little less that here
[16:01.940 --> 16:04.300]  То есть мы поняли что строк с древним хешем
[16:04.300 --> 16:10.300]  их примерно вот такая доля, значит, если я беру две случайные, то их как бы разность
[16:10.300 --> 16:16.300]  будет иметь любой hash вот с такой вероятностью, ну, значит, оказывает то, что здесь написано.
[16:16.300 --> 16:22.300]  Когда я беру две случайные строки, то есть если сигма, если я реально могу выбирать вот такие вот символы
[16:22.300 --> 16:29.300]  от неляда и минус одного, то здесь вероятность, ну, по сути, на одной и той же. Одна сигма в одной и той же.
[16:29.300 --> 16:31.300]  Вот.
[16:34.300 --> 16:41.300]  Хорошо, но это было для случая, когда у меня фиксировано B и M, да, а сами строки выбираете случайно.
[16:41.300 --> 16:48.300]  Скорее на практике происходит наоборот. Скорее на практике вам строки дают, ну, как бы, они даны на вход, вы не можете их менять.
[16:48.300 --> 16:56.300]  Но в качестве параметров вы можете как раз и уменять B и M. То, что, как бы, то, как вы строите ваш hash function.
[16:56.300 --> 17:19.300]  Ну, и в этом случае будет чуть похуже. Оценка, значит, оценка такая. Пусть S, T данные различные строки длины M.
[17:19.300 --> 17:41.300]  Тогда, при случайном выборе, нет, тогда пусть, пусть еще напишу, M какое-то фиксированное простое число
[17:41.300 --> 17:48.300]  больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше, больше.
[17:48.300 --> 18:13.300]  Тогда, при случайном выборе B, отверянная минус 1, вероятность комиссии не больше, чем N длина M.
[18:18.300 --> 18:26.300]  Вот, то есть мы поменяли местами, как бы, случайно и фиксированно, там у меня были случайные строки, здесь, наоборот, строки фиксированные,
[18:26.300 --> 18:35.300]  а я могу варьировать то, как я выбираю F, то есть M, M и B. Вот M я зафиксировал каким-то простым, достаточно большим,
[18:35.300 --> 18:42.300]  а дальше B выбираю случайно в отрезке от 0 до 1. Тогда оказывается, что вероятность комиссии вот такая небольшая.
[18:42.300 --> 18:51.300]  Ну и пример там, если примерно то что-то порядка 10 с пятой, то есть строки примерно там в какой-то такой длины,
[18:51.300 --> 19:05.300]  я выбираю M, ну давайте там порядка 10 с восемнадцатой, тогда вероятность комиссии ну что-то маленькое, до 10 минус 13.
[19:05.300 --> 19:15.300]  Вот, итоговая стратегия проведения. Мы фиксируем какое-нибудь большое M, скажем, порядка 10 с восемнадцатой,
[19:15.300 --> 19:24.300]  простое еще надо, ну чтобы работа этой выражения надо простое, вообще, конечно, тут оценка может быть сильно улучшена,
[19:24.300 --> 19:30.300]  и даже M не обязательно простое, ну давайте в какой-то остановке жить. То есть пусть M достаточно большое и простое,
[19:30.300 --> 19:40.300]  дальше я случайно выбираю B среди всех чисел, ну кольца выше по модуле M, и все хэши, я теперь знаю как определяются,
[19:40.300 --> 19:47.300]  я могу для любой строки найти хэш, и тогда из этого утверждения колись у меня будет очень редко, 10 минус 13.
[19:47.300 --> 20:03.300]  Если мы будем действовать не так, а будем случайно играть на каждой строке B, и писать B в начале кэша, то колисью будет меньше?
[20:03.300 --> 20:09.300]  А что если писать B типа пара, B запитает хэшу значение?
[20:16.300 --> 20:20.300]  Сейчас, а есть у вас разные больше кэши?
[20:33.300 --> 20:38.300]  Вот, ну и теперь вооружившись такой штукой, мы можем решить, например, следующую задачу.
[20:39.300 --> 20:51.300]  Задача. У вас есть строка с 0, с 1, с 1, с 1, с 1, и к ней поступают запросы вида для двух подстрок проверить равны или нет.
[20:51.300 --> 21:12.300]  Значит запрос вам дают l1, r1, l2, r2, надо проверить, равны ли s, l1, и так далее, s, r1, i, s2, и так далее, s, r2.
[21:12.300 --> 21:20.300]  Короче, выделили две подстроки индексами l1, r1, i, 2, r2, вам надо проверить, равны по строчке или нет.
[21:23.300 --> 21:26.300]  Вот, но решается это с помощью хэша следующим образом.
[21:27.300 --> 21:31.300]  Давайте мы заведем какой-нибудь массивчик, давайте его так назову h.
[21:32.300 --> 21:38.300]  Значит пусть h, i, t, это хэш строки с 0, у и и символ.
[21:39.300 --> 21:41.300]  Такой хэш, хэш на префекте.
[21:42.300 --> 21:52.300]  Пусть это хэш с 0, на b в степени i-1, плюс с 1, на b в степени i-2, плюс и так далее, плюс с it, и так далее.
[21:53.300 --> 21:57.300]  Значит, вот давайте такой массив посчитаем, массив хэша всех префексов.
[21:58.300 --> 22:04.300]  Его очень легко пересчитывать, потому что как меняется вот эта формула, то и в переходе вот i-1.
[22:05.300 --> 22:07.300]  Давайте напишем, что это написано.
[22:08.300 --> 22:16.300]  s0 на b в it, плюс s1 на b в it, плюс 1, плюс так далее, плюс s i, плюс 1.
[22:16.300 --> 22:24.300]  Вот, видно, что чтобы получить из этой формулы ретту, нужно умножить, видимо, на b и добавить s и плюс 1.
[22:26.300 --> 22:35.300]  То есть h и плюс 1, это b на ht, плюс s и плюс 1.
[22:37.300 --> 22:39.300]  Правда?
[22:39.300 --> 22:41.300]  Вот.
[22:42.300 --> 22:50.300]  Значит, все такие хэши на префексах мы можем посчитать за линиями время, просто проход слева-направо по строке, и вот такое регульсивное пересчитывание.
[22:51.300 --> 22:53.300]  Дальше всегда как на тим хэш какой-нибудь под строке.
[22:54.300 --> 22:57.300]  Ну, если мы знаем хэши всех префексов, то довольно легко.
[23:09.300 --> 23:21.300]  Что такое хэш строки, скажем, с л-того символа по хр?
[23:27.300 --> 23:30.300]  Вот, значит, у нас есть такой хэш, есть вот такой хэш.
[23:31.300 --> 23:33.300]  То есть это похоже на какие-нибудь частичные суммы, префексичные суммы.
[23:33.300 --> 23:35.300]  Подожди, мы ставим хэш так-выстреки, хэш так-выстреки.
[23:36.300 --> 23:39.300]  Значит, ну если аккуратно посмотреть, то формула будет такая.
[23:40.300 --> 23:42.300]  Давайте напишу сразу.
[23:42.300 --> 23:51.300]  Так, хр-т минус хр множество более степеней.
[24:04.300 --> 24:08.300]  Значит, потому что хр это какой-то лишний кусок.
[24:08.300 --> 24:11.300]  А дальше правильные хэшы от этой штуки.
[24:12.300 --> 24:17.300]  То есть если вы распишете х с индексом r, то здесь будут какие-нибудь ненужные слагаемые, вот эти вот первые.
[24:18.300 --> 24:21.300]  А дальше все слагаемые скелеты по плаве r будут как раз с нужным коэффициентом.
[24:22.300 --> 24:24.300]  Там будет с р, с равным с первым множеством b, и так далее.
[24:25.300 --> 24:27.300]  В общем, здесь будет все правильно.
[24:30.300 --> 24:33.300]  Вот, и нужно всего лишь вычесть то, что левее этого адреса находится.
[24:33.300 --> 24:35.300]  Это значит хр минус первое.
[24:36.300 --> 24:38.300]  Ну и только здесь еще нужно будет поправить степень.
[24:39.300 --> 24:44.300]  Потому что здесь будет степень нулевая, а надо чтобы была r-лт.
[24:47.300 --> 24:48.300]  Еще раз?
[24:49.300 --> 24:51.300]  Внутри скобок плюс т.
[24:52.300 --> 24:53.300]  А, вы про это.
[24:54.300 --> 24:57.300]  Ну, давай еще что-то не код, а типа математически сказать.
[24:58.300 --> 25:11.300]  Да, ну вообще, как бы формально, когда надо было бы, если бы это было строчкой кода, то когда надо вот это было бы сначала преобразовать как число по моделю m, потом перемножить, опять взять по моделю m, и потом еще прибавить.
[25:12.300 --> 25:15.300]  Ну, я такие подробности оставляю для кода.
[25:17.300 --> 25:21.300]  Вот, ну и тогда соответственно мы смогли начитать хэш под строки за вот и днице.
[25:22.300 --> 25:24.300]  За вот и днице.
[25:24.300 --> 25:35.300]  Ну и тогда соответственно, зная хэш, умея вычинять хэш любой под строки за вот и днице, мы можем вычтенить нужных наших двух под строк тоже х.
[25:36.300 --> 25:41.300]  Проверьте их на равенство, если равны, то значит скорее всего и под строки равны, если не равны, то точно не равны.
[25:42.300 --> 25:46.300]  Да, и из-за всяких наших подтверждений, редкость калитии будет маленькая.
[25:47.300 --> 25:51.300]  Не больше, чем там tn на m точке.
[25:55.300 --> 25:57.300]  Вопросы?
[26:00.300 --> 26:02.300]  Вот, хорошо.
[26:03.300 --> 26:06.300]  Значит, ну эта вот задача была про проверку под строк.
[26:07.300 --> 26:12.300]  Давайте вторая задача, о проверке вхождения.
[26:15.300 --> 26:17.300]  Проверка вхождения.
[26:18.300 --> 26:22.300]  Начнем задачу сформулируется так, у вас есть две строки, p и s.
[26:23.300 --> 26:25.300]  Две строки.
[26:26.300 --> 26:29.300]  Надо проверить, входит ли строка p в строчку s.
[26:30.300 --> 26:34.300]  То есть это у вас какое-то слово, какой-то шаблон, ну в виде небольшого текста.
[26:35.300 --> 26:38.300]  А это длинный текст, вам надо узнать, встречается ли маленький текст в большом.
[26:41.300 --> 26:46.300]  Встречается ли p, s, то есть входит ли как строка.
[26:47.300 --> 26:51.300]  Ну, собственно, здесь уже все просто.
[26:52.300 --> 26:57.300]  Если мы умеем вычленять хэши для подстрок s, то давайте просто вычленим хэши для всех подстрок s,
[26:58.300 --> 27:02.300]  в юмировом, такое как нам нужно, и проверим их на равности с хэшом от p.
[27:03.300 --> 27:07.300]  Если они совпали, то значит мы получили вхождение с хэшом от p.
[27:08.300 --> 27:12.300]  А если нет хэши, то мы получим хэши с хэшом от p.
[27:12.300 --> 27:14.300]  И проверим их на равности с хэшом от p.
[27:15.300 --> 27:18.300]  Если они совпали, то значит мы получили вхождение с хэшом от p.
[27:21.300 --> 27:25.300]  То есть еще раз, вот есть какая-то короткая строка p, есть длинная строка s.
[27:26.300 --> 27:30.300]  Давайте мы всюду, где возможно, приложим отрезок такой длины в s.
[27:31.300 --> 27:35.300]  То есть мы посчитаем хэш у такой строки, у такой, у такой, у такой и так далее.
[27:36.300 --> 27:38.300]  Возьмем все подстроки длины, ровно такой как p.
[27:38.300 --> 27:39.300]  Узнаем у них все хэши.
[27:40.300 --> 27:43.300]  На хэш подстроки мы умеем вычитать за единицу, убирая вот эта техника.
[27:44.300 --> 27:48.300]  И дальше, если среди них хотя бы один хэш равен хэшу от p,
[27:49.300 --> 27:51.300]  то мы говорим, что p входит в s.
[27:53.300 --> 27:56.300]  Потому что мы считаем, что нам достаточно вот эту уверенность,
[27:57.300 --> 28:00.300]  вероятность там 10-13, точнее 1-10-13.
[28:01.300 --> 28:05.300]  Если хэши где-то совпали, то мы говорим, что скорее всего p вот здесь входит.
[28:08.300 --> 28:10.300]  Если есть хотя бы одно совпадение, то p входит в s.
[28:11.300 --> 28:12.300]  А подстрока тут непрерывная?
[28:13.300 --> 28:16.300]  Подстрока это всегда несколько подряд символов.
[28:21.300 --> 28:23.300]  Ну, кажется, все. Тут есть вопрос.
[28:24.300 --> 28:28.300]  Тут надо просто поприкладывать и сравнить хэши у всех подстрок данной длины.
[28:29.300 --> 28:31.300]  Это называется рабинокартом.
[28:33.300 --> 28:36.300]  Рабинокартом.
[28:38.300 --> 28:40.300]  Рабинокартом.
[28:58.300 --> 28:59.300]  То есть в итоге мораль.
[29:00.300 --> 29:02.300]  Хэши довольно прикольная штука.
[29:03.300 --> 29:05.300]  Часто работают довольно быстро и весьма эффективно.
[29:05.300 --> 29:07.300]  Но, к сожалению, это всегда может ошибаться.
[29:08.300 --> 29:10.300]  Поскольку это все-таки вероятная штука.
[29:11.300 --> 29:13.300]  Мы понимаем, что бывают коллизии.
[29:14.300 --> 29:19.300]  Мы не можем там сколько годно длинные строки загнать в пространство размерности там 10-18.
[29:20.300 --> 29:23.300]  Если мы рассматриваем сечность по моделю n, то там гарантированно был коллизий.
[29:24.300 --> 29:25.300]  Мы когда-то точно ошибаемся.
[29:26.300 --> 29:30.300]  Но вероятность ошибки настолько ничтожна, что если у нас есть какие-то проблемы,
[29:30.300 --> 29:34.300]  а мы там b выбираем случайно прииксированным m, то тогда это происходит там почти никогда.
[29:35.300 --> 29:36.300]  Да, и можно об этом даже не задуматься.
[29:39.300 --> 29:42.300]  Но тем не менее, конечно, есть какие-то дисциплинированные алгоритмы,
[29:43.300 --> 29:46.300]  которые не используют случайности, которые умеют решать те же самые задачи.
[29:47.300 --> 29:49.300]  Значит, следующий.
[29:50.300 --> 29:51.300]  Это у нас предиспутцы.
[29:52.300 --> 29:53.300]  Посмотрим.
[29:53.300 --> 30:16.300]  Значит, пусть есть какая-то строка с 0 и
[30:17.300 --> 30:20.300]  7 번째 Art의 prolonged,
[30:20.300 --> 30:25.300]  Пусть есть некая строка s0, s1, y0, y0, y1.
[30:25.300 --> 30:31.300]  Префикс функции для нее, это набор значений t0, t1, и так далее, y0, y1.
[30:31.300 --> 30:42.300]  Такое, что принятое, это длина максимального собственного...
[30:42.300 --> 30:45.300]  Так, сейчас давайте я...
[30:45.300 --> 30:59.300]  Максимального собственного суффикса строки s0 и т.е. s1,
[30:59.300 --> 31:02.300]  которая совпадает с перефиксом той же длины.
[31:15.300 --> 31:21.300]  Так, я не буду писать определение перефикации суффикса,
[31:21.300 --> 31:23.300]  я давайте нарисую на картинке.
[31:23.300 --> 31:28.300]  Мы рассматриваем строку с 0 уйти символ.
[31:28.300 --> 31:34.300]  Вот такое начало наше строке.
[31:34.300 --> 31:39.300]  Здесь мы хотим найти суффикс, то есть несколько последних символов.
[31:39.300 --> 31:41.300]  Суффикс это то, что написано в конце,
[31:41.300 --> 31:45.300]  которые были бы равны те же префиксы, Luxuary that we introduced in the opening.
[31:45.300 --> 31:47.300]  Префиксы тоже написаны в начале.
[31:47.300 --> 31:50.300]  Среди всех таких, мы хотим найти максимальный, то есть самый длинный
[31:50.300 --> 31:52.300]  собственный суффикс.
[31:52.300 --> 31:55.300]  Собственный, значит, что строка не равна всей строке.
[31:55.300 --> 31:59.300]  Я могу сказать, что давайте 많이 было вот такой вот суффикс.
[31:59.300 --> 32:03.300]  Это суффикс, конечно, потому что это несколько последних символов строки.
[32:03.300 --> 32:06.300]  Это же префикс потому, что несколько первых символов строки.
[32:06.300 --> 32:09.300]  И они конечно друг weil равны, потому что она directamente из строках.
[32:09.300 --> 32:15.300]  В интересном случае тогда было бы просто всегда p i-то равно i плюс 1, и это никакой информации не несет.
[32:15.300 --> 32:22.300]  Но если я запрещаю вот этот искусственный случай, когда суффикс равен к рефиксу просто потому, что это одна и та же строка,
[32:22.300 --> 32:24.300]  я вот ввожу требование собственности.
[32:24.300 --> 32:30.300]  Собственность значит, что строка не равна всей строке от негого, у кого есть сил.
[32:30.300 --> 32:37.300]  Не равна всей строке.
[32:37.300 --> 32:41.300]  Собственность значит, что это не равен целиком к церкви.
[32:41.300 --> 32:48.300]  Меня интересует, как можно более длинный конец строки, но, наверное, до начала дольше длинный.
[32:48.300 --> 33:07.300]  Просто такая рефикс функция в каждой позиции определяет длинную строку.
[33:07.300 --> 33:09.300]  То есть алгоритм.
[33:09.300 --> 33:25.300]  А как мы его мы насчитываем?
[33:25.300 --> 33:29.300]  То есть простое замечание.
[33:29.300 --> 33:32.300]  Давай сначала о определении что сказать.
[33:32.300 --> 33:42.300]  Супрефиксом строки t называется...
[33:42.300 --> 34:00.300]  Ее суффикс равный к рефиксу той же длины.
[34:00.300 --> 34:06.300]  То есть вместо того, чтобы говорить эту громоздкую фразу суффикс равный к рефиксу той же длины, я буду говорить супрефикс.
[34:06.300 --> 34:08.300]  Длина ровно вот эта.
[34:08.300 --> 34:10.300]  Два кусочка.
[34:10.300 --> 34:12.300]  То есть один кусочек, который находится не в конце и в начале.
[34:12.300 --> 34:17.300]  Две равные строки, которые лежат вот здесь и вот здесь.
[34:17.300 --> 34:21.300]  Такое утверждение.
[34:21.300 --> 34:37.300]  Все суфрефиксы строки s0 и т.д. si имеют длинные.
[34:37.300 --> 34:41.300]  Их длинные характеризуются следующим набором чисел.
[34:41.300 --> 34:46.300]  Во-первых, как кашипоиды, как наибольший такой суфрефикс.
[34:46.300 --> 34:56.300]  Дальше p от p и минус один.
[34:56.300 --> 35:03.300]  Дальше p от этого же суфрефикса.
[35:03.300 --> 35:14.300]  Правило такое. Я из предыдущего вычитаю ничку и навешиваю на это p еще раз.
[35:14.300 --> 35:18.300]  Если я беру предыдущее значение, вычитаю линию и навешиваю b.
[35:18.300 --> 35:23.300]  Беру b с индексом на 1 меньше, чем предыдущее значение.
[35:23.300 --> 35:31.300]  До тех пор, пока эта штука не занулиться, если она уже ноль, то брать 1 уже нельзя.
[35:31.300 --> 35:36.300]  Почему это так? Давайте нарисуем.
[35:36.300 --> 35:40.300]  Понятно, что это самый длинный супрефикс.
[35:40.300 --> 35:44.300]  По определению, самый длинный собственный суфикс равный префиксу.
[35:44.300 --> 35:51.300]  Есть еще суфрефикс, отвечающий всей строке, но мы его не рассматриваем.
[35:51.300 --> 35:54.300]  Тут можно еще написать i плюс 1.
[35:54.300 --> 35:58.300]  Но это искусственный суфрефикс, который нам не нужен.
[35:58.300 --> 36:06.300]  Дальше я вижу, что есть максимальный суфрефикс.
[36:06.300 --> 36:09.300]  Как может выглядеть любой другой суфрефикс?
[36:09.300 --> 36:20.300]  Такое замечание, что любой суфрефикс строки от s0 до si также является суфрефиксом строки от s0 до spb минус 1.
[36:23.300 --> 36:25.300]  Давайте послушаем.
[36:39.300 --> 36:59.300]  Суфрефикс является также суфрефиксом строки от s0 до spb минус 1.
[36:59.300 --> 37:05.300]  Здесь все объясняется так.
[37:05.300 --> 37:09.300]  У меня есть строка своего поитой. Я рассмотрел какой-то суфрефикс.
[37:09.300 --> 37:13.300]  Например, такие две строки равны друг другу.
[37:13.300 --> 37:17.300]  И при этом есть максимальный суфрефикс длины поитой.
[37:17.300 --> 37:22.300]  То есть это какой-то произвольный суфрефикс, а это наибольший суфрефикс нашей строки.
[37:22.300 --> 37:25.300]  Вот эти две гарантируют на равные и это наибольший суфрефикс.
[37:25.300 --> 37:28.300]  А это просто какой-то произвольный, меньше длины.
[37:28.300 --> 37:32.300]  Но тогда, посмотрите, поскольку у меня вот эти верхние душки одинаковые,
[37:32.300 --> 37:36.300]  то я могу на самом деле вот эту вот штуку принести вот сюда.
[37:36.300 --> 37:43.300]  А поскольку суфикс здесь равен префиксу здесь, то вот эта строка равна вот этой строке.
[37:43.300 --> 37:47.300]  И тем самым, смотрите, у меня получилось, что в строке,
[37:47.300 --> 37:51.300]  состоящей из первых поитых символов нашей строки, несколько первых символов,
[37:51.300 --> 37:55.300]  но не несколько последних символов.
[37:55.300 --> 37:59.300]  А значит, то, что было суфрефиксом строки S0, S1,
[37:59.300 --> 38:07.300]  также является суфрефиксом строки от нулевого символа до вот этого вот P-1.
[38:07.300 --> 38:13.300]  Поэтому все суфрефиксы этой большой строки, они на самом деле являются также суфрефиксами
[38:13.300 --> 38:19.300]  всего, что было в строке от S0 до SPI-1.
[38:19.300 --> 38:29.300]  Вот поэтому, если, скажем, у меня индуктивно уже доказано, что вот здесь вот все суфрефиксы описываются вот так,
[38:29.300 --> 38:33.300]  значит к ним просто добавляется один вот этот максимальный P-1, и все.
[38:33.300 --> 38:38.300]  То есть мы показали, что в дополнение к суфрефиксу длины P-1,
[38:38.300 --> 38:44.300]  все суфрефиксы, кроме максимального, у нас уже были просчитаны,
[38:44.300 --> 38:50.300]  когда мы обрабатывали эту строчку P-1.
[38:50.300 --> 38:54.300]  И вот это утверждение оказывается, соответственно, индукцией по I.
[38:54.300 --> 38:59.300]  Да, и мы видим, что когда мы переходим к новому I, у нас точно добавляется суфрефикс такой длины.
[38:59.300 --> 39:04.300]  А все остальные, это просто перечтение суфрефиксов строки, вот здесь,
[39:04.300 --> 39:07.300]  в которой индуктивно уже доказано, что это вот эта последовательность.
[39:08.300 --> 39:10.300]  Окей?
[39:27.300 --> 39:30.300]  Ну, тогда отсюда возникает алгоритм построения плетиспункции.
[39:37.300 --> 39:39.300]  Чему равна P-0?
[39:39.300 --> 39:43.300]  Да, конечно, потому что у строки длины 1,
[39:43.300 --> 39:47.300]  ну и единственный собственный суффикс имеет длину 0.
[39:47.300 --> 39:49.300]  Ну просто по определению.
[39:49.300 --> 39:57.300]  Вот, а дальше пусть у нас уже посчитаны, пусть найдены P-0 и так далее,
[39:57.300 --> 40:01.300]  P и P-1, мы хотим найти P.
[40:01.300 --> 40:05.300]  Просто идем по строке слева направо, насчитываем итеративно все значения P.
[40:05.300 --> 40:08.300]  Хотим найти P.
[40:12.300 --> 40:15.300]  Значит, что у нас было? У нас была какая-то строка,
[40:15.300 --> 40:19.300]  для которой я знал значение тешпульции,
[40:19.300 --> 40:22.300]  то есть я не знал, что это значение,
[40:22.300 --> 40:24.300]  а то я знал, что это значение,
[40:24.300 --> 40:31.300]  для которой я знал значение х-кульции на всех позициях, пришел новый символ s и t
[40:31.300 --> 40:34.300]  я теперь хочу в этой строке найти максимальный супрефикс
[40:34.300 --> 40:39.300]  максимальный такой суфикс, который равен префиксу той же длины
[40:39.300 --> 40:44.300]  при этом смотрите, если я просто отброшу последний символ из обоих кусочков
[40:44.300 --> 40:50.300]  и отсюда и отсюда, то я получу супрефикс для предыдущей версии строки
[40:50.300 --> 40:53.300]  потому что отбрасывание этого последнего символа
[40:53.300 --> 40:58.300]  превращает в эту новую строчку вот супрефикс строки в млевого по имену первого символа
[40:58.300 --> 41:02.300]  я здесь вычеркну, значит тут сохранено зарядство, поэтому вот супрефикс
[41:02.300 --> 41:10.300]  и разве нужен самый длинный супрефикс, максимальный супрефикс моей новой версии строки
[41:10.300 --> 41:15.300]  то мне нужно найти наибольший супрефикс в предыдущей версии строки, вот здесь вот
[41:15.300 --> 41:19.300]  наибольший хабальчик, являющийся супрефиксом
[41:19.300 --> 41:23.300]  который продлевается направо к тем же символам, что вот здесь
[41:23.300 --> 41:31.300]  поэтому, чтобы найти по им
[41:31.300 --> 41:41.300]  нужно найти максимальный супрефикс строки
[41:41.300 --> 41:48.300]  с 0 и так далее, с и-1
[41:48.300 --> 41:54.300]  да, вот максимальный хабальчик, справа от которого написан символ ровно с и
[41:54.300 --> 41:59.300]  потому что если здесь вместо крестика написано с и, то я соответственно этот супрефикс продлеваю направо
[41:59.300 --> 42:05.300]  с и, и получаю супрефикс для строки вот этой новой, да, с любой символ
[42:05.300 --> 42:13.300]  чтобы найти по им, нужно найти максимальный супрефикс, справа от которого
[42:13.300 --> 42:20.300]  написано с и
[42:20.300 --> 42:24.300]  то есть, среди всех возможностей супрефиксов этой строки, я должен выбрать самый длинный
[42:24.300 --> 42:28.300]  среди всех вот этих вот там супрефиксов, должен быть самый длинный такой, что справа
[42:28.300 --> 42:33.300]  если его в начале приложить, то справа должен быть написан тот же символ, что вот здесь
[42:33.300 --> 42:40.300]  и соответственно продление на один символ даст нам тот самый искомый максимальный супрефикс
[42:40.300 --> 42:44.300]  а список всех супрефиксов мы знаем как получать
[42:44.300 --> 42:59.300]  это вот это вот итеративное навешивание пшки на предыдущее значение супрефикс
[42:59.300 --> 43:07.300]  ну давайте я начну с ж равно п и минус первое
[43:07.300 --> 43:16.300]  дальше пока
[43:16.300 --> 43:20.300]  так, сейчас, что там написано
[43:21.300 --> 43:30.300]  на idea, и не равноiu- first-nd Persimmon
[43:30.300 --> 43:32.300]  тогда sky, не равноiu- Oliver
[43:35.300 --> 43:38.300]  тогда я понял, что�aires уже равно bg минус первую
[43:38.300 --> 43:43.300]  вот, то есть, смотрите
[43:43.300 --> 43:48.300]  у меняardg равно длине максимального супрефбица на предыдущем шаге
[43:48.300 --> 43:54.540]  шаге P-1, а дальше я многократно от JIP прихожу к P-1,
[43:54.540 --> 43:58.940]  то есть беру все меньше и меньше супрефиксы, до тех пор, пока выполняется это условие,
[43:58.940 --> 44:05.100]  то есть пока JIP-символ вот здесь вот после этого овальчика, JIP-символ не равен
[44:05.100 --> 44:09.700]  ИТОМ, тогда мне нужно еще уменьшать супрефикс. То есть я уменьшаю, уменьшаю, уменьшаю
[44:09.700 --> 44:16.300]  супрефикс, пока первый символ после этого супрефикса не начнет играть без ИТОМ.
[44:16.300 --> 44:20.300]  Так как только это условие нарушится, у меня соответственно ЭТО равна вот этому,
[44:20.300 --> 44:25.300]  я могу продлить мой ответ, то есть могу увеличить JIP, увеличить этот супрефикс на единицу,
[44:25.300 --> 44:48.300]  получить супрефикс, да, но быстрее. Я уменьшу вот так. Вот, ну то есть каковы стои выхода из этого овала?
[44:48.300 --> 44:52.300]  Либо я дошел до адекватного супрефикса, справа от которого написано такое же символ как здесь,
[44:52.300 --> 44:56.300]  и тогда выполняется вот эта проверка, и в точности G увеличивается, да, увеличивается
[44:56.300 --> 45:02.300]  на супрефиксе, и по ИТО равно G становится. Либо же я дошел до G равно нулю, и у меня так получилось,
[45:02.300 --> 45:08.300]  что даже нулевой символ вот здесь не равен вот этому, даже нулевой символ не равен вот этому.
[45:08.300 --> 45:14.300]  Тогда после этой проверки G останется равно нулю, и по ИТО будет равно нулю.
[45:14.300 --> 45:20.300]  Вот, ну еще раз, давайте проговорю быстро. Мы поняли, что нам нужно найти супрефикс,
[45:20.300 --> 45:26.300]  какой-то супрефикс вот этой предыдущей строки, после которого стоит символ такой же как здесь.
[45:26.300 --> 45:30.300]  Мы знаем, что чтобы перебрать все супрефиксы, их можно просто вот таким вот алгоритмом,
[45:30.300 --> 45:35.300]  ну, интеративно навешивать, то есть вычитать единицу и навешивать плеер.
[45:35.300 --> 45:39.300]  Мы делаем, делаем, делаем так, пока справа от этого супрефикса не будет написано республика.
[45:39.300 --> 45:42.300]  Но в конце либо так и будет, и нам нужно будет увеличить этот супрефикс на один,
[45:42.300 --> 45:47.300]  потому что много символ пришло. Либо мы дошли до конца, ни одного из наших супрефикса,
[45:47.300 --> 45:51.300]  то есть если бы у нас было значение супрефикса справа, который был бы написан правильный символ,
[45:51.300 --> 46:01.300]  то тогда, соответственно, G будет равно нулю, эта проверка не выполнется, и по ИТО будет равно нулю.
[46:01.300 --> 46:03.300]  Вот, например, нарисуем еще.
[46:03.300 --> 46:27.300]  Вот так.
[46:27.300 --> 46:33.300]  Значит, смотрите, вот это, скажем, прошлая версия статьи, а это новый символ из ИТО равный B.
[46:33.300 --> 46:37.300]  То есть у меня вот здесь вот значительные все супрефиксы, все значения этих функций,
[46:37.300 --> 46:40.300]  это приходит новый символ B.
[46:40.300 --> 46:49.300]  Скорой вопрос, чему равно Q вот в этой позиции?
[46:49.300 --> 46:52.300]  Чему бы равно Q вот здесь?
[46:52.300 --> 46:55.300]  Пять.
[46:55.300 --> 46:57.300]  Еще варианты?
[46:57.300 --> 46:59.300]  Еще варианты?
[46:59.300 --> 47:00.300]  Семь.
[47:00.300 --> 47:05.300]  Так, мне кажется, семь, потому что вот обоцамо, и вот обоцамо.
[47:05.300 --> 47:10.300]  Суфикс равный префиксу. Никто не говорит, что меня не пересекаются, могут спокойно пересекаться.
[47:10.300 --> 47:13.300]  Значит, вот здесь вот мы снимаем супрефикс, я длинусь семь.
[47:13.300 --> 47:18.300]  Вопрос, если я просто этот супрефикс попытаюсь продолжить буквой вот этой такой же, как здесь,
[47:18.300 --> 47:21.300]  она же здесь будет написана? Нет, да? C не равно B.
[47:22.300 --> 47:26.300]  Берем следующий по величине супрефикс, вот это наша строка.
[47:26.300 --> 47:29.300]  Ну и здесь уже, видимо, это будет ABBA.
[47:29.300 --> 47:33.300]  Да, вот следующий супрефикс, он получается, собственно, вот так.
[47:33.300 --> 47:37.300]  Взяли ABBA, справа от ABBA написано тоже символ, что здесь.
[47:37.300 --> 47:39.300]  Опять нет, да, здесь C, здесь B.
[47:39.300 --> 47:42.300]  Поэтому нужно опять брать еще меньше супрефикс.
[47:42.300 --> 47:47.300]  Следующий супрефикс будет A, и справа уже от него написано B.
[47:47.300 --> 47:51.300]  Взяли супрефикс, посмотрели на символ справа, он такой же, как нам нужно, такой же B.
[47:51.300 --> 47:57.300]  Поэтому мы закончим на G равно единице, да, вот этот супрефикс зеленый A1 будет.
[47:57.300 --> 47:59.300]  И потом увеличим его на 1 в этом эффекте.
[47:59.300 --> 48:05.300]  И будет B, видно, равно 2, как знак того, что вот эти два символа равны вот этим.
[48:05.300 --> 48:07.300]  Да, и значение B будет равным.
[48:17.300 --> 48:19.300]  Значит, вот такой алгоритм.
[48:19.300 --> 48:21.300]  Что по времени работа?
[48:21.300 --> 48:31.300]  Ну, время работа здесь линейная, конечно же, от N.
[48:31.300 --> 48:35.300]  Потому что, ну, давайте просимеем вот эту переменную G.
[48:35.300 --> 48:39.300]  G всегда это значение последнего найденного P.
[48:39.300 --> 48:42.300]  Да, последнее найденное значение предпочтения.
[48:42.300 --> 48:46.300]  Вот оно очень похоже, да, это значение предыдущего найденного предпочтения.
[48:46.300 --> 48:49.300]  Каждая интерация ВАЛы уничтожает G хотя бы на 1.
[48:49.300 --> 48:53.300]  Потому что, что такое G равно G-1?
[48:53.300 --> 48:57.300]  Мы рассматриваем с того, что у него уже минус первый символ, то есть строка длинной G.
[48:57.300 --> 48:59.300]  И выбирая время, снимаем супрефикс.
[48:59.300 --> 49:01.300]  Ну, понятно, что от этого G уменьшается.
[49:01.300 --> 49:04.300]  Да, то есть мы находим вот такой супрефикс.
[49:04.300 --> 49:06.300]  G от этого уменьшается.
[49:06.300 --> 49:08.300]  Каждая интерация ВАЛы уменьшает G.
[49:08.300 --> 49:13.300]  А увеличение G происходит максимально один раз для каждого I.
[49:14.300 --> 49:19.300]  Ну, поэтому суммарно, а интерация G ВАЛ будет не больше, чем от это.
[49:19.300 --> 49:23.300]  Да, потому что увеличивается эта переменная максимально единицу для каждого I.
[49:23.300 --> 49:29.300]  Поэтому, ну, поскольку она всегда не отрицательна, уменьшаться она тоже не может больше, чем от это.
[49:32.300 --> 49:38.300]  G это всегда последнее найденное значение предпочтения.
[49:43.300 --> 50:01.300]  Каждая интерация ВАЛы уменьшает хотя бы на один, уменьшает G хотя бы на один.
[50:01.300 --> 50:13.300]  И при этом каждая I, то есть, ну, каждая интерация ВАЛ цикла по всем I, увеличивает G максимально на один.
[50:13.300 --> 50:23.300]  Каждая I увеличивает G не более, чем на один.
[50:23.300 --> 50:37.300]  Значит, увеличение всего максимума N, G всегда не отрицательна, значит, и уменьшение, ну, максимум, видимо, ну, тоже R.
[50:37.300 --> 50:43.300]  Да, то есть, если мы максимум N раз прибавили единичку, то уменьшить мы тоже можем максимум на R.
[50:43.300 --> 50:51.300]  Значит, суммарно, все ВАЛы работают за R.
[50:53.300 --> 51:07.300]  Да?
[51:07.300 --> 51:21.300]  Ну, а все остальное это, там, понятные линейные штуки, это цикл по всем E от 0 до 1.
[51:21.300 --> 51:31.300]  От 1 до 1, там всякие присвания, и все это все линейное время, то есть у нас, как часто бывает, проблема только в ВАЛе, но мы показали, что суммарно все ВАЛы работают максимум в OTA.
[51:31.300 --> 51:41.300]  Значит, в время работы все это OTA.
[51:41.300 --> 51:51.300]  Так, мы тогда вернемся, если мы научились находить эту струцию, мы вернемся к задаче о проверке вхождения.
[51:51.300 --> 52:01.300]  Поверка вхождения П в С.
[52:01.300 --> 52:11.300]  То есть давайте склеим такую строчку, давайте застрапим вот такую строку. Сначала напишем П, потом какой-нибудь разделитель, символ не входящий ни в П, ни в С.
[52:11.300 --> 52:19.300]  Скажем, если П и С состоят из, там, маленьких патинских букв, то это может быть, например, решетка. Потом С.
[52:19.300 --> 52:31.300]  Дальше, для такой строки посчитаем префикс-функцию, и если она хоть где-то равна длине П, в такой позиции префикс-функция равна длине П,
[52:31.300 --> 52:43.300]  тогда оказывается, что вот здесь вот мы получили вхождение той строки, что была вот здесь.
[52:43.300 --> 52:53.300]  Считаем префикс-функцию для строки П, пришел строк С.
[52:53.300 --> 53:05.300]  Если она хоть где-то, ну давайте не так, что я напишу, что каждое значение префикс-функции равно длине П, автоматически гарантирует нам, что только что кончилось вхождение П.
[53:05.300 --> 53:17.300]  Потому что если где-то значение функции равно длине П, значит, мы получили субпрефикс длины в точности такой, то есть П этот суфикс равен такому префиксу. То есть мы получили вхождение строки П.
[53:17.300 --> 53:45.300]  Всякий раз, когда значение префикс-функции равно длине П,
[53:45.300 --> 53:59.300]  мы получаем вхождение П в С.
[53:59.300 --> 54:05.300]  И при этом значение префикс-функции никогда не может быть больше, чем длина П.
[54:05.300 --> 54:19.300]  Потому что если бы где-то было, скажем, больше, чем П, это значит, что вот такая строка равна такой, но, извините, решетка у меня только один раз встречается, поэтому никакой сдвиг этой строки не может мне сохранить решетку.
[54:19.300 --> 54:29.300]  Если я говорю, что такая строка равна такой строке, значит эта решетка где-то еще встречается в другом месте, а такого не бывает. Мы решетку специально взяли, что она уникальна.
[54:29.300 --> 54:42.300]  Поэтому префикс-функции никогда не может быть больше, чем длина П. Ну а значение меньшее означает, что здесь не целиком входит П.
[54:42.300 --> 54:51.300]  А давайте еще раз рисуем вот здесь вот.
[54:51.300 --> 55:01.300]  Если где-то здесь значение префикс-функции меньше, чем длина П, это значит, что какой-то такой суффикс равен этому такому префиксу, но нельзя это продлить, нет большего суффрефикса.
[55:01.300 --> 55:07.300]  Поэтому, в частности, вот эта штука не является суффрефиксом, а значит здесь не заканчивается вхождение П.
[55:07.300 --> 55:17.300]  Поэтому нужно просто отследить все значения префикс-функции. Каждый раз, когда оно равно длине П, мы получаем, что вот здесь вот получилось только что вхождение этой строки П.
[55:17.300 --> 55:31.300]  Если оно меньше, значит оно здесь не получилось. А больше, ну не бывает.
[55:31.300 --> 55:42.300]  На самом деле можно, конечно, явно не вставляя здесь разделитель, можно было бы просто их склеить подряд П и С, но тогда нужно было бы как раз проверять на нестрогое равенство,
[55:42.300 --> 55:56.300]  что значение префикс-функции должно быть больше равно, чем длина П, тогда как раз это бы означало, нет, это бы не означало.
[55:56.300 --> 56:09.300]  То есть почему без разделителя нормально не получится? Потому что если я напишу их подряд, П и С, и буду, скажем, проверять на равенство в точности П,
[56:09.300 --> 56:24.300]  больше равно, чем П. Если я получил значение префикс-функции больше равно, чем длина П, то это говорит х знает о чем, это говорит о том, что где-то вот здесь раньше оно было, это вхождение.
[56:24.300 --> 56:32.300]  А дальше будут какие-то символы, которые равны вот этим вот символам. Но, извините, я это вхождение и так бы нашел, когда вот здесь вот стоял,
[56:32.300 --> 56:39.300]  у меня было бы значение префикс-функции, вот это вот равно вот этому. Да, и здесь опять префикс-функции была хотя бы длина П.
[56:39.300 --> 56:49.300]  Поэтому без разделителя, ну, наверное, можно это как-то модифицировать, но слишком, короче, вот из-за того, что у меня бывают вот такие вот супрефиксы,
[56:49.300 --> 56:59.300]  которые частично содержат П и частично содержат начало С. Это, в общем, нам немного портит понимание и проще вставить здесь что-нибудь такое эффективное,
[56:59.300 --> 57:09.300]  которое запрещает префикс-функции вылезать направо. Вот здесь вот не может быть значения префикс-функции больше, чем длина П. Вот.
[57:09.300 --> 57:24.300]  Илья, он же ломается, когда у нас префикс будет, значит, второй префикс будет заходить на П.
[57:24.300 --> 57:39.300]  Ну, типа раз второй префикс, ну, супфикс начинается с П. Да. Типа он заходит на П. Не-не-не-не, он заходит на часть П, которую мы написали сначала.
[57:39.300 --> 57:45.300]  Когда супрефикс пересекается в П. Да-да-да-да-да-да, когда они пересекаются.
[57:45.300 --> 57:59.300]  Типа вот что-то такое, или что? Да. Так, и что? Ну он ломается, потому что у нас часть П задействовала.
[57:59.300 --> 58:05.300]  Можно просто не смотреть. Можно просто не смотреть на все... Да, но в общем-то я дичь против этого не понимаю.
[58:05.300 --> 58:13.300]  Да не страшно вы, нет, но, в смысле, алгоритм все равно плохой, учит решетки, но можно просто не смотреть на первую каштуку с РКС.
[58:13.300 --> 58:18.300]  Почему на РКС? Надо только первую каштуку с РКС ломать.
[58:18.300 --> 58:25.300]  Ну, смотрите, а если у нас есть супрефикс, даже который заходит на строку П, не важно, но у которого хотя бы...
[58:25.300 --> 58:32.300]  Ну, короче, который кончается дальше чем-то через свой символ от начала с РКС, то это означает...
[58:32.300 --> 58:36.300]  Ну, и он, ну, вся в УП, то это означает, что...
[58:41.300 --> 58:44.300]  То есть такое-то может быть сколь угодно далеко с РКС, вот это вот перекрытие.
[58:44.300 --> 58:47.300]  Ну, может быть, сколь угодно там на правую ходить.
[58:50.300 --> 58:57.300]  Короче, да, то есть может быть и можно как-то подхватить, но на первый взгляд не видно как, прочность решетки.
[58:59.300 --> 59:09.300]  Так, еще один алгоритм, это Z функция, которая считает какую-то, ну, в общем, похожую статистику,
[59:09.300 --> 59:13.300]  которая считала предыдущую функцию, только, ну, короче, немножко в другую сторону.
[59:14.300 --> 59:17.300]  То есть опять пусть есть строка S0 и так далее, Sn-1.
[59:23.300 --> 59:36.300]  Мы хотим насчитать значения Z0, Z1 и так далее, Zn-1 такие, что Zn это максимальное значение K,
[59:36.300 --> 59:48.300]  такое, что строка длины K, начиная с китого символа, равна префиксу той же длины.
[59:55.300 --> 01:00:00.300]  То есть картинка такая, мы стоим в позиции И, а затем прыгнем как можно дальше направо, чтобы это было равно вот этим.
[01:00:00.300 --> 01:00:09.300]  То есть если раньше, когда мы считали префикс функцию, мы прыгали как бы влево, мы не рассматривали все, что правее,
[01:00:09.300 --> 01:00:11.300]  и хотели взять как можно больше суффикс, равный префикс.
[01:00:11.300 --> 01:00:19.300]  То есть теперь, наоборот, мы идем как бы направо и берем символы направо, которые равны тому, что было написано в начале.
[01:00:30.300 --> 01:00:45.300]  Вот. Ну давайте я вам поделение.
[01:00:45.300 --> 01:00:51.300]  Z-блок это вот ровно такая штука, ведущая направо, равная тому префиксу.
[01:00:51.300 --> 01:01:03.300]  З-блок это подстрока равная подстроке из первых кассировок.
[01:01:03.300 --> 01:01:11.300]  То есть мы как бы идем слева направо по строке, и когда мы нашли какое-то значение Z и T, мы будем вот это называть Z-блок.
[01:01:11.300 --> 01:01:31.300]  То есть все вот эти вот штуки, давайте вернусь, все вот эти подстроки, ведущие вправо, равные префиксу той же длины, мы будем называть Z-блок.
[01:01:31.300 --> 01:01:54.300]  И для нашего дейта мы будем хранить Z-блок с максимальной правой границы.
[01:01:54.300 --> 01:02:12.300]  То есть среди всех Z-блоков, которые мы нашли, я буду хранить тот, в котором как можно большая вот эта правая граница, вот эта.
[01:02:12.300 --> 01:02:17.300]  И давайте я буду говорить, что этот Z-блок имеет координаты стрель по R.
[01:02:17.300 --> 01:02:25.300]  Соответственно среди всех Z-блоков я храню, поддерживаю Z-блок, который равен R максимально.
[01:02:25.300 --> 01:02:39.300]  Ну вот и этим тогда так вот. Скорейший парадокс, который равен Z0 по определению.
[01:02:39.300 --> 01:02:50.300]  Вся строка, ну опять, это неслежательная информация, какая бы ни была строка, зато и равна ее длине, поэтому на нулевой значении, что префикс функции, что Z функции мы можем даже не смотреть.
[01:02:50.300 --> 01:02:53.300]  Тут ничего полезного не написано никогда.
[01:02:53.300 --> 01:03:03.300]  Вот дальше, ну там стрель давайте считаем, что R минус 1, пока мы не нашли ни одного Z-блока.
[01:03:03.300 --> 01:03:11.300]  Ну и в цикле от одного до N будем делать следующее.
[01:03:14.300 --> 01:03:19.300]  Значит, смотрите, пусть мы нашли уже какой-то Z-блок.
[01:03:19.300 --> 01:03:31.300]  Ну в какой-то ситуации, когда R и R равны уже чему-то осмысленному, в какой-то подстроке равной префиксу длины, пусть, например, E попадает в это вот сюда.
[01:03:31.300 --> 01:03:37.300]  То есть мы нашли значение Z здесь вот везде, теперь мы надеем на E, Z и D.
[01:03:37.300 --> 01:03:41.300]  И пусть так вышло, что E выпало вот рядом под R.
[01:03:41.300 --> 01:03:45.300]  Тогда можно писать следующее, смотрите.
[01:03:45.300 --> 01:03:50.300]  Я, наверное, перерисую, чтобы было еще более видно.
[01:03:54.300 --> 01:04:00.300]  Так, вот был какой-то Z-блок, и попало вот сюда.
[01:04:05.300 --> 01:04:11.300]  Вот, и я хочу как-нибудь оценить значение Z и D, зная все вот эти значения Z-ки левее, чем Z и D.
[01:04:12.300 --> 01:04:18.300]  Посмотрите, поскольку это Z-блок, то, соответственно, вот это вот все равно вот этому всему.
[01:04:18.300 --> 01:04:21.300]  Z-блок это строка равной префиксу длины.
[01:04:21.300 --> 01:04:34.300]  Поэтому, если я как бы эту точечку перенесу вот сюда, то есть параллельно сдвину эту строку на позицию E-D, то локально вот эта вот строка устроена ровно так.
[01:04:34.300 --> 01:04:37.300]  Все символы здесь равны всем символам здесь.
[01:04:37.300 --> 01:04:40.300]  Эта строчка равна.
[01:04:40.300 --> 01:04:54.300]  И поэтому, в частности, я могу сказать, что Z и D точно больше или равно, чем Z и E-D и E-D.
[01:04:57.300 --> 01:05:00.300]  То есть я отвержаю, чтобы всегда вернула вот такая вот оценка.
[01:05:00.300 --> 01:05:01.300]  Почему?
[01:05:01.300 --> 01:05:03.300]  Ну, что такое Z и E-D?
[01:05:03.300 --> 01:05:06.300]  Это максимальный Z-блок вправо начинается в этой позиции.
[01:05:06.300 --> 01:05:10.300]  То есть это вот несколько таких вот первых символов здесь, которые равны вот этим.
[01:05:10.300 --> 01:05:17.300]  Если эта штука не вылезает за вот эту большую строку, за вот этот максимальный Z-блок,
[01:05:17.300 --> 01:05:24.300]  если это не вылезает за границу максимального Z-блока, то тогда, раз это равно вот этому, то это равно вот этому.
[01:05:24.300 --> 01:05:29.300]  Потому что когда эта строка и параллельно перемещенная, значит эта штука приносится сюда, и я получу, что это равно вот этому.
[01:05:29.300 --> 01:05:32.300]  Я получу как раз Z-блок сначала в E.
[01:05:32.300 --> 01:05:38.300]  И из-за того, что эта не вылезает за R, соответственно, все эти символы точно они все будут.
[01:05:38.300 --> 01:05:47.300]  Если же эта вещь вылезает за границу моего найденного Z-блока, тогда картинка чуть хуже.
[01:05:47.300 --> 01:05:51.300]  То есть я знаю, что вот эта равно вот этому.
[01:05:51.300 --> 01:05:55.300]  Но про вот это я ничего не знаю. Я не знаю, что располагается вот здесь.
[01:05:55.300 --> 01:05:59.300]  Я не могу сказать, что вот эти символы также равны вот этим символам.
[01:05:59.300 --> 01:06:05.300]  Потому что все, что находится правее R, это уже какая-то черная зона.
[01:06:05.300 --> 01:06:09.300]  Здесь непонятно, что. Эти символы не обязательно равны вот этим.
[01:06:09.300 --> 01:06:14.300]  Поэтому, если у меня Z и минус 3T вылазят за границу вот этого большого Z-блока,
[01:06:14.300 --> 01:06:19.300]  мне нужно его обрубить и сказать, что он не больше, чем вот этот самый.
[01:06:19.300 --> 01:06:25.300]  Короче, не вылезает за R. Это характеризуется вот этим числом R.
[01:06:25.300 --> 01:06:27.300]  То есть если Z и минус 3T было достаточно большое,
[01:06:27.300 --> 01:06:32.300]  то его нужно обрубить по вот этой длине от и до R.
[01:06:32.300 --> 01:06:36.300]  То есть не больше, чем до R-минус 3T.
[01:06:36.300 --> 01:06:38.300]  Я потерялся от почему.
[01:06:38.300 --> 01:06:42.300]  Тогда у нас в котором классе был бы больше символов?
[01:06:42.300 --> 01:06:43.300]  Еще раз?
[01:06:43.300 --> 01:06:49.300]  Если бы эти полиции совпадали, а символ, который у нас попал, не был бы больше.
[01:06:49.300 --> 01:06:53.300]  То есть, если полиции совпадают, то Бог мог бы поверить, который получается.
[01:06:53.300 --> 01:06:55.300]  Дай секунду, давай подумаем.
[01:06:59.300 --> 01:07:01.300]  То есть если у нас следующий символ совпадает,
[01:07:01.300 --> 01:07:04.300]  у нас Вовка наканчивается DPR, а у нас плюс один.
[01:07:04.300 --> 01:07:06.300]  Где свой максимальный?
[01:07:06.300 --> 01:07:09.300]  Мы еще не проверили, что он совпадает.
[01:07:10.300 --> 01:07:12.300]  Сейчас, сейчас, сейчас.
[01:07:12.300 --> 01:07:15.300]  А если не совпадает, то цена будет строгая.
[01:07:15.300 --> 01:07:19.300]  То есть если не совпадает, то там Вовка строгая.
[01:07:19.300 --> 01:07:22.300]  У нас важный термин?
[01:07:22.300 --> 01:07:23.300]  Не, сейчас еще раз.
[01:07:23.300 --> 01:07:26.300]  Посмотрите, пусть здесь Z в этой позиции.
[01:07:26.300 --> 01:07:28.300]  Вот вылезает ZL.
[01:07:28.300 --> 01:07:29.300]  Что это значит?
[01:07:29.300 --> 01:07:31.300]  Значит, вот эти символы, вот эти блоки.
[01:07:31.300 --> 01:07:33.300]  Ну да.
[01:07:33.300 --> 01:07:35.300]  У нас ALR это блок.
[01:07:35.300 --> 01:07:36.300]  ALR это Z блок.
[01:07:36.300 --> 01:07:38.300]  То есть вот это равно вот это.
[01:07:38.300 --> 01:07:40.300]  Но правее нельзя продлить.
[01:07:40.300 --> 01:07:42.300]  Это значит, что вот это не равно вот этому.
[01:07:45.300 --> 01:07:47.300]  Еще раз.
[01:07:47.300 --> 01:07:51.300]  Раз это Z блок, то значит вот эту границу R нельзя сдвинуть направо.
[01:07:51.300 --> 01:07:53.300]  То есть то, что написано вот здесь, вот не равно,
[01:07:53.300 --> 01:07:55.300]  то можно написать здесь под вопросиками.
[01:07:55.300 --> 01:07:59.300]  Там раз, когда оно еще и диапевтикс тоже не равно.
[01:08:03.300 --> 01:08:06.300]  То есть у нас равно слева два.
[01:08:06.300 --> 01:08:07.300]  Ну.
[01:08:07.300 --> 01:08:09.300]  И один из них не равно правому блоку.
[01:08:09.300 --> 01:08:11.300]  Значит, второй блок тоже не равно.
[01:08:11.300 --> 01:08:14.300]  То есть это значит, если не ходится в блок.
[01:08:15.300 --> 01:08:16.300]  Да?
[01:08:17.300 --> 01:08:18.300]  Не понятно.
[01:08:18.300 --> 01:08:19.300]  Не понятно, да.
[01:08:19.300 --> 01:08:20.300]  Мне вопрос.
[01:08:20.300 --> 01:08:21.300]  Мы все знакомы, один по три.
[01:08:21.300 --> 01:08:26.300]  Мы знаем, что кружочек один по два равный.
[01:08:26.300 --> 01:08:27.300]  Да.
[01:08:27.300 --> 01:08:28.300]  И кружочек...
[01:08:28.300 --> 01:08:30.300]  Первый символ в блоке не равен к первому символу в тройке.
[01:08:30.300 --> 01:08:31.300]  Так.
[01:08:31.300 --> 01:08:32.300]  Кружочек тренируется к кружечку два.
[01:08:32.300 --> 01:08:33.300]  Да.
[01:08:33.300 --> 01:08:34.300]  Значит, он выше тренируется к кружечку два.
[01:08:34.300 --> 01:08:35.300]  Да.
[01:08:35.300 --> 01:08:36.300]  И что?
[01:08:36.300 --> 01:08:37.300]  Ну тогда у нас совершенно нет Z блока.
[01:08:37.300 --> 01:08:38.300]  Почему?
[01:08:38.300 --> 01:08:39.300]  Потому что кружочек один.
[01:08:39.300 --> 01:08:40.300]  ALR или Z блок?
[01:08:40.300 --> 01:08:41.300]  Это должен быть.
[01:08:41.300 --> 01:08:44.300]  Тогда Z блок ограниченно подвиняет.
[01:08:44.300 --> 01:08:45.300]  Еще раз.
[01:08:45.300 --> 01:08:46.300]  Z блок ALR?
[01:08:46.300 --> 01:08:50.300]  За блоком начинаются языки, конечно, с правого границы.
[01:08:50.300 --> 01:08:51.300]  А, ну да.
[01:08:51.300 --> 01:08:52.300]  Ну с того же ровно это здесь и написано.
[01:08:52.300 --> 01:08:55.300]  А в чем я работаю, что не право?
[01:08:55.300 --> 01:08:58.300]  Ну это верно и не нравится.
[01:09:02.300 --> 01:09:05.300]  Ну то есть в этом случае мы не можем сказать, что он просто равно.
[01:09:06.300 --> 01:09:07.300]  Да?
[01:09:09.300 --> 01:09:10.300]  Ну, по-моему, да.
[01:09:10.300 --> 01:09:12.300]  Ну, здесь тем не менее написано верное.
[01:09:12.300 --> 01:09:13.300]  Да, все ладно.
[01:09:13.300 --> 01:09:14.300]  Ага.
[01:09:16.300 --> 01:09:17.300]  Вот.
[01:09:23.300 --> 01:09:24.300]  У нас уже посрочная.
[01:09:24.300 --> 01:09:25.300]  Угу.
[01:09:25.300 --> 01:09:30.300]  Ну у нас посрочная эта с того же Z и ZZ.
[01:09:30.300 --> 01:09:32.300]  И так же Z.
[01:09:32.300 --> 01:09:33.300]  Да.
[01:09:33.300 --> 01:09:36.300]  Ну, значит сейчас, сейчас, сейчас, сейчас, сейчас забьем.
[01:09:36.300 --> 01:09:37.300]  Значит, итак.
[01:09:37.300 --> 01:09:39.300]  Мы получили хоть нижнюю оценку на ZZ.
[01:09:39.300 --> 01:09:42.300]  Не, что-то все перечеркано уже.
[01:09:42.300 --> 01:09:44.300]  Мы получили нижнюю оценку на ZZ.
[01:09:44.300 --> 01:09:47.660]  Затытая. Тогда давайте, чтобы найти точное значение затытая
[01:09:47.660 --> 01:09:50.360]  будем пытаться просто затытая на 1 увелич researched.
[01:09:50.360 --> 01:09:56.180]  То есть мы точно поняли, что несколько вот этих символов равны вот этим.
[01:09:56.180 --> 01:10:02.400]  Тогда давайте просто идти слева направо увеличив下去 пытаться на 1
[01:10:02.700 --> 01:10:05.280]  До тех пор пока эти символы не совпадают.
[01:10:05.280 --> 01:10:08.940]  Пока совпадают, будем идти направо и увеличиваться.
[01:10:08.940 --> 01:10:27.940]  Если он внутри блока, то знает, а если он вот здесь, то тоже на самом деле может, оно может увеличиваться направо.
[01:10:28.940 --> 01:10:39.940]  Сейчас, в общем, давайте я напишу, значит, то, что мы бы тогда и сделали. Мы написали, что z, y, t равно минимум из z, y-a, d и r-a, plus 1.
[01:10:39.940 --> 01:10:59.940]  Дальше, пока i плюс z, y, t меньше чем н, и s i плюс z, y равно s z, y, мы делаем плюс плюс z, y.
[01:10:59.940 --> 01:11:15.940]  Значит, еще раз, мы здесь получили какую-то нижнюю оценку, а дальше мы понимаем, что если есть нижняя оценка, то чтобы получить точное значение z, y, можно просто идти слева-направо и перевернуть символы до тех пор, пока они совпадают на те, которые нужны вот этим вот.
[01:11:15.940 --> 01:11:23.940]  Мы просто увеличиваем z до тех пор, пока они равны. Просто простым ваилом. Пока вот здесь равно 1 увеличен, следующий равно увеличен и так далее.
[01:11:24.940 --> 01:11:33.940]  Соответственно, i плюс z, y это первый непростонный символ вот здесь, а z, y это первый непростонный символ вот здесь. Пока они равны, их можно увеличить.
[01:11:36.940 --> 01:11:51.940]  Вот, и тогда смотрите, что я утверждаю. Я утверждаю, что если мы хотя бы раз вошли в ваил и выполнили увеличение z, y, то это тогда обязательно случай, когда вот здесь среди этих значений минимум попался вот сюда, r-1.
[01:11:51.940 --> 01:11:57.940]  Потому что если, скажем, из этих двух значений минимально было вот это, то оно было строго меньше, чем вот это.
[01:11:57.940 --> 01:12:10.940]  Давайте я опять нарисую картинку. Вот был какой-то z-блок, вот была i, вот была i минус a.
[01:12:10.940 --> 01:12:27.940]  Скажем, вот z минус a не выходило за границу этого z-блока. Тогда мы точно знаем, что то, что написано вот здесь, вот x, не равно тому, что написано вот здесь z-блок.
[01:12:27.940 --> 01:12:34.940]  Потому что здесь по переносу написан x, а это z-блок нельзя увеличить, потому что z-блок карминально, поэтому здесь стоят разные символы.
[01:12:34.940 --> 01:12:48.940]  Значит, и здесь стоят разные символы. Поэтому если z и минус r меньше, чем r минус r-1, то z-блок мы точно знаем, что равно z-минус 1.
[01:12:48.940 --> 01:13:01.940]  И оно уже увеличиться не будет. На, еще раз. Если я переношу параллельно вот этот z-блок вот сюда и понимаю, что z-минус r-д не выходит за границу,
[01:13:01.940 --> 01:13:11.940]  точнее, находится левее границы z и минус r, то есть такой строгой нерайс выполняется, тогда это значит, что этот блок, равный и вот этому, и вот этому, нельзя пролить направо.
[01:13:11.940 --> 01:13:20.940]  То есть этот символ не равен с лучшему в начале строки. Поэтому ваил не исполнит нам ни одной итерации, у меня уже точно найдено значение z, z-минус z.
[01:13:20.940 --> 01:13:26.940]  Вот, а иначе у меня будет увеличиться правая граница.
[01:13:26.940 --> 01:13:51.940]  Что происходит у нас? z и минус l, наоборот, больше всего значим r и минус r-1.
[01:13:51.940 --> 01:14:01.940]  То есть вот здесь вот z-блок, вот этот z-минус r-д равно вот этому, а если мы проложим сюда, то оно выходит за границы нашего lr-блок.
[01:14:01.940 --> 01:14:12.940]  Тогда я обрублюсь вот на этой позиции r, скажу, что изначально z и t равно r-минус 1, минимум за какие-то значения это r-минус 1.
[01:14:12.940 --> 01:14:23.940]  А дальше, если вдруг будет выполняться итерация цепловая, то я буду находить все новые и новые символы справа, которые равны новым символам вот здесь.
[01:14:23.940 --> 01:14:27.940]  То есть я здесь также обрубился и иду направо, пока они равны.
[01:14:27.940 --> 01:14:36.940]  Тогда у меня сдвигается граница r каждый раз. Если у меня происходит увеличение z и, то значит я нахожусь все более и более правой z-блок.
[01:14:36.940 --> 01:14:46.940]  Двигается эта правая граница, я выхожу из-за предела r, двигается правая граница. То есть, смотрите, каждая итерация цепловая, успешная,
[01:14:46.940 --> 01:14:51.940]  задвигает направо хотя бы на один правую границу нашего z-блока.
[01:14:51.940 --> 01:14:58.940]  Значит, это симпатичная линия, потому что эта правая граница не может двигаться больше чем на раз.
[01:14:58.940 --> 01:15:08.940]  Значит, вывод, каждая выполненная итерация вайла
[01:15:08.940 --> 01:15:27.940]  сдвигает самый правый z-блок направо.
[01:15:27.940 --> 01:15:45.940]  То есть раньше был вот этот z-блок lr, а потом мы нашли такой, у которого правая граница правее чем r.
[01:15:45.940 --> 01:15:48.940]  Потом еще z увеличилось, правая граница еще подвинулась и так далее и так далее.
[01:15:48.940 --> 01:15:52.940]  Каждая итерация вайла увеличивает нам r, хотя бы на один.
[01:15:52.940 --> 01:16:10.940]  Поэтому суммарно все вайлы работают за ot.
[01:16:10.940 --> 01:16:17.940]  Поэтому весь алгоритм тоже имеет.
[01:16:17.940 --> 01:16:24.940]  Еще раз говорю алгоритму. Мы заводим z ноль равно тому, чему нужно.
[01:16:24.940 --> 01:16:29.940]  lr пока что не надо ни один z-блок, lr равно минус 1.
[01:16:29.940 --> 01:16:32.940]  Потом идем по строке слева награбленного. Берем z и его добавляем.
[01:16:32.940 --> 01:16:38.940]  У нас есть вот такая оценка. Давайте тогда просто в качестве z и положим минимум эти два значения.
[01:16:38.940 --> 01:16:42.940]  Мы знаем, что r точно больше равен чем то, что мы туда положили.
[01:16:42.940 --> 01:16:47.940]  Давайте просто его пытаться итеративно вступу и пытаться увеличивать.
[01:16:47.940 --> 01:16:50.940]  Вопрос о равно ли следующее? Если равно, то увеличиваем z-блок.
[01:16:50.940 --> 01:16:53.940]  А равно ли следующее? Если равно, то увеличиваем и так далее.
[01:16:53.940 --> 01:16:56.940]  Пока не найдем различные силы.
[01:16:56.940 --> 01:17:00.940]  И в конце после этого вайла нужно не забыть обновить lr.
[01:17:00.940 --> 01:17:05.940]  Если найден z-блок только что найден, то есть с i по i плюс z и минус 1.
[01:17:05.940 --> 01:17:11.940]  Если эта штука правее, чем предыдущий блок lr, то нужно обновить наш максимальный z-блок.
[01:17:11.940 --> 01:17:13.940]  Здесь давайте напишем.
[01:17:20.940 --> 01:17:27.940]  То есть мы теперь нашли z-блок за границами год i, до i плюс z и минус 1.
[01:17:27.940 --> 01:17:37.940]  Соответственно, если его правая граница больше, чем r, она находится правее, чем тот предыдущий максимальный z-блок,
[01:17:37.940 --> 01:17:39.940]  то нужно пересчитать границы.
[01:17:39.940 --> 01:17:46.940]  Сказать, что lr это i, а r это i плюс l и минус 1.
[01:17:46.940 --> 01:17:53.940]  Тем самым, опять, lr это самый правый среди всех найденных z-блоков.
[01:17:53.940 --> 01:18:00.940]  То есть если я нашел какой-то более правый, с большей правой границей, то мне нужно эти границы пересчитать.
[01:18:00.940 --> 01:18:10.940]  Ну и все это когда видно, что это линейное время, потому что все вайлы суммарно работают за линейное время.
[01:18:10.940 --> 01:18:16.940]  То есть тут опять на каждой конкретной итерации i этот вайл может работать довольно долго.
[01:18:16.940 --> 01:18:25.940]  Перебирать силы до первой пары неравных может довольно долго, но суммарно все эти вайлы по всем i работают максимум от l.
[01:18:25.940 --> 01:18:34.940]  Ну видимо даже просто не больше н, потому что каждая итерация вайла увеличивает правую границу на 1, а она не может увеличиться больше н.
[01:18:42.940 --> 01:18:46.940]  Ну и тогда, наконец, опять задача проверки вхождения.
[01:18:55.940 --> 01:19:12.940]  П вкс.
[01:19:12.940 --> 01:19:15.940]  Давайте опять воспользуемся тем же трюком.
[01:19:15.940 --> 01:19:19.940]  Напишем P, решетка S.
[01:19:19.940 --> 01:19:24.940]  Где вновь решетка, это какой-то уникальный сил, который нигде больше не встречается, ни в кой, ни в с.
[01:19:24.940 --> 01:19:34.940]  Тогда каждая позиция, где z функция равна в точности длине P, отвечает началу вхождения вкс.
[01:19:34.940 --> 01:19:42.940]  Если вот здесь z ита равно длине P, значит следующие столько силов равны префинсу той же длине, то есть просто P.
[01:19:42.940 --> 01:19:45.940]  Ну и здесь решетка точно совсем не к чему.
[01:19:45.940 --> 01:19:48.940]  Верно.
[01:19:48.940 --> 01:19:51.940]  Давайте сначала отмечу, потом замечание ваше тоже отмечу.
[01:19:51.940 --> 01:20:15.940]  Всякий раз, когда значение z функции равно длине P, получаем начало вхождения вкс.
[01:20:21.940 --> 01:20:31.940]  Ну и опять из-за того, что я здесь ставил решетку искусственную, у меня значение z функции никогда не может быть больше, чем P.
[01:20:31.940 --> 01:20:35.940]  Если оно было бы больше, значит решетка где-то еще правее бы встречалась.
[01:20:35.940 --> 01:20:38.940]  Чего быть не может по предположению, потому что это уникальное.
[01:20:38.940 --> 01:20:43.940]  Если же здесь написано что-то меньше, чем P, значит вот это вот равно вот этому, а продлить нельзя.
[01:20:43.940 --> 01:20:49.940]  Если тут z функция меньше, чем длина P, значит P здесь не помещается.
[01:20:49.940 --> 01:20:54.940]  То есть какие-то символы, да, возможно, равные, но продлить это до всей P вот здесь нельзя.
[01:20:54.940 --> 01:21:00.940]  Поэтому только те и только те позиции, где z ита равно P, нам подходит.
[01:21:00.940 --> 01:21:03.940]  Это в том числе начало в хранении P вкс.
[01:21:03.940 --> 01:21:06.940]  И больше никаких.
[01:21:06.940 --> 01:21:12.940]  Вот, ну как правильно заметили, здесь решетка менее важна, чем при этой функции.
[01:21:12.940 --> 01:21:23.940]  Если я просто склею без разделителя P и S, то мне достаточно будет проверять все хранения, все позиции, где z ита больше, равно чем P.
[01:21:23.940 --> 01:21:31.940]  Вот если здесь z ита больше, равно чем длина P, тогда, ну, как ни крути, вот эти вот, да, возможно, какие-то символы равны вот этим.
[01:21:31.940 --> 01:21:35.940]  Но главное, что вот эти вот, равны вот этим.
[01:21:35.940 --> 01:21:40.940]  То есть каждый раз, когда z ита хотя бы длина P, я получаю начало в хранении P.
[01:21:40.940 --> 01:21:43.940]  А то, что там правее, ну, вовсе, вот эти равны вот этим хренственным.
[01:21:43.940 --> 01:21:47.940]  Главное, что вот эти вот штрихованные равны штрихованным.
[01:21:47.940 --> 01:21:53.940]  Поэтому в этом случае даже не обязательно решетка, но когда здесь правильство, значит, цена не строгая, не равна такой.
[01:21:53.940 --> 01:22:00.940]  Каждая позиция, где z ита больше, равно чем длина P, отвечает начало в хранении P вкс.
[01:22:00.940 --> 01:22:02.940]  Все, спасибо.
