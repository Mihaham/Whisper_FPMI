[00:00.000 --> 00:15.000]  Так, давайте начинать.
[00:15.000 --> 00:18.040]  Значит, сегодняшнюю лекцию я хочу посвятить основаниям
[00:18.040 --> 00:19.040]  криптография.
[00:19.040 --> 00:22.800]  Значит, в принципе, эта тема очень большая и при этом
[00:22.800 --> 00:23.800]  практически важная.
[00:23.800 --> 00:24.800]  Вот.
[00:24.800 --> 00:29.200]  Так что я хочу так пройтись по верхам, да, осветить
[00:29.200 --> 00:32.560]  некоторые ключевые моменты, да, еще некоторые основные
[00:32.560 --> 00:33.560]  идеи.
[00:33.560 --> 00:38.760]  Вот с тем, чтобы при желании это можно было изучать
[00:38.760 --> 00:44.560]  подробнее, да, и как бы было ясно место этой области
[00:44.560 --> 00:49.840]  и в теории, ну, и в практике, да, то есть в общем массиве
[00:49.840 --> 00:50.840]  знания.
[00:50.840 --> 01:04.480]  Какие вообще задачи называются криптографическими, да,
[01:04.480 --> 01:06.200]  и что такое предмет криптография.
[01:06.200 --> 01:11.000]  Ну, в самом общем виде можно сказать так, что есть некоторое
[01:11.000 --> 01:17.120]  количество агентов, да, значит их может быть двое, может
[01:17.120 --> 01:18.120]  быть больше.
[01:18.120 --> 01:25.160]  Есть какие-то каналы связи между ними, да, значит там
[01:25.160 --> 01:26.840]  двусторонние или односторонние.
[01:26.840 --> 01:35.320]  Вот, и соответственно есть какая-то информация, да,
[01:35.320 --> 01:39.000]  значит какая-то информация доступна публично какая-то
[01:39.000 --> 01:41.160]  только каким-то отдельным агентам.
[01:41.160 --> 01:48.280]  Вот, и в целом, да, значит есть понятие криптографического
[01:48.280 --> 01:52.920]  протокола, да, ну или вообще протокола, значит обычно
[01:52.920 --> 01:57.200]  протоколом называется совокупность алгоритмов, которые могут
[01:57.200 --> 02:00.280]  как бы друг другу пересылать сообщения и соответственно
[02:00.280 --> 02:03.200]  выход одного алгоритма может становиться входом другого
[02:03.200 --> 02:05.680]  и после этого там что-то происходит.
[02:05.680 --> 02:09.320]  Вот, поэтому, значит, протокол это совокупность алгоритмов.
[02:09.320 --> 02:28.640]  Значит, протокол это набор алгоритмов, связанных между
[02:28.640 --> 02:39.520]  собой, вот, ну, значит, связанных, ну, вот в каком-то таком
[02:39.520 --> 02:44.560]  смысле, ну, при этом может быть так, что алгоритм
[02:44.560 --> 02:46.560]  запускается много раз или несколько алгоритмов
[02:46.560 --> 02:50.480]  запускаются на одной точке, да, то есть кто-то что-то
[02:50.480 --> 02:53.280]  вычисляет, посылает это куда-то, там тоже что-то
[02:53.280 --> 02:56.320]  вычисляет, посылает это в ответ с учетом того, что
[02:56.360 --> 02:58.840]  было иного ответа, там что-то еще вычисляется и так далее.
[02:58.840 --> 03:02.880]  Вот, ну и соответственно, если опять же в общем виде
[03:02.880 --> 03:11.480]  говорить, то в итоге, значит, в итоге исполнения протокола,
[03:11.480 --> 03:22.640]  в итоге исполнения протокола, да, как бы все, так сказать,
[03:22.640 --> 03:32.000]  хорошие, все, да, даже неважно, хорошие или нехорошие,
[03:32.000 --> 03:39.320]  я не буду так писать про хороших или нехороших,
[03:39.320 --> 03:53.640]  значит, я, что так, значит, как бы вся предусмотренная
[03:53.640 --> 04:07.520]  информация, вся предусмотренная информация должна достичь
[04:07.520 --> 04:15.680]  получателей, значит, должна достичь предусмотренных
[04:15.680 --> 04:31.280]  получателей, ну а соответственно, как бы не предусмотренная
[04:31.280 --> 04:48.120]  информация не должна. Вот, то есть это, значит,
[04:48.120 --> 04:53.000]  вот некоторые вопросы, значит, некоторые вопросы о передаче
[04:53.000 --> 04:59.560]  информации, вот, то есть, ну то есть в итоге, например,
[04:59.560 --> 05:03.640]  вот этот вот участник должен получить там что-то, что зависит
[05:03.640 --> 05:06.960]  от того, что знает вот этот и знает вот этот, а при
[05:06.960 --> 05:09.280]  этом вот эти оставшиеся двое не должны в район узнать
[05:09.280 --> 05:11.960]  ничего, да, а эти двое не должны узнать друг про
[05:11.960 --> 05:15.320]  друга, да, там что-нибудь, что-нибудь вот в таком духе.
[05:15.320 --> 05:20.160]  Значит, это достаточно общий, достаточно абстрактное
[05:20.160 --> 05:25.040]  определение, значит, давайте посмотрим на разные конкретные
[05:25.040 --> 05:31.200]  примеры, примеры криптографических задач, да, то есть, то как
[05:31.200 --> 05:34.600]  бы задача, значит, задача это постановка, что означает
[05:34.600 --> 05:39.200]  предусмотренное и непредусмотренное, а дальше конкретный протокол
[05:39.200 --> 05:44.000]  это, ну, конкретный набор алгоритмов, при котором
[05:44.000 --> 06:00.840]  задача решается, так, вот примеры, примеры задач, так,
[06:00.840 --> 06:07.440]  ну, значит, первая задача, самая классическая, это
[06:07.440 --> 06:13.040]  шифрование, ну и, собственно, там на протяжении веков
[06:13.080 --> 06:15.400]  понятия криптографии, я тоже не связывался с вопросом
[06:15.400 --> 06:20.400]  шифрования, ну, то есть, никакие другие задачи не рассматривались,
[06:20.400 --> 06:24.880]  да, значит, нужно каким-то образом передать информацию
[06:24.880 --> 06:27.840]  нужному получателю так, чтобы никто ее не смог перехватить,
[06:27.840 --> 06:34.640]  вот, ну и, соответственно, есть огромное количество
[06:34.640 --> 06:39.160]  разных шифров, вот, ну и вообще, если смотреть на
[06:39.280 --> 06:42.360]  историю, то можно сказать, что, значит, долгое время
[06:42.360 --> 06:47.400]  было некоторое соревнование, да, значит, между криптографией
[06:47.400 --> 06:50.600]  и криптоанализом, знаешь, соответственно, криптография
[06:50.600 --> 06:54.280]  это понималась только как разработка шифров, как
[06:54.280 --> 06:59.480]  передать информацию, чтобы перехватчик ее не смог прочесть,
[06:59.480 --> 07:05.760]  а криптоанализ, это, наоборот, попытка взлома шифров,
[07:06.360 --> 07:10.840]  разработка методов взлома шифров, вот, ну, вот, например,
[07:10.840 --> 07:14.560]  какой простейший шифр, это шифр замены, что просто
[07:14.560 --> 07:19.160]  я заменяю одни буквы на другие, и у меня предусмотрено,
[07:19.160 --> 07:23.000]  что там буква А всюду заменяется на там, на букву D, а там
[07:23.000 --> 07:26.000]  буква B всюду заменяется на букву U и так далее,
[07:26.000 --> 07:28.480]  ну, а в общем, берется какая-то перестановка символов,
[07:28.480 --> 07:33.160]  и все слова заменяются, вот, но вот этот шифр на самом
[07:33.160 --> 07:39.920]  деле нестойкий, если писать на естественном языке тексты,
[07:39.920 --> 07:43.080]  то он нестойкий просто потому, что разные буквы с разной
[07:43.080 --> 07:50.800]  частотой встречаются в тексте, и после замены эта частота
[07:50.800 --> 07:53.960]  сохранится в среднем, и, соответственно, можно на
[07:53.960 --> 07:57.960]  основе частоты, а также понимания, как, в принципе,
[07:57.960 --> 08:00.240]  слова там в русском языке или в каком-нибудь другом
[08:00.240 --> 08:04.240]  устроенном, что там гласно-согласно бывают, и как-то чередуются
[08:04.240 --> 08:08.680]  так более-менее, вот, на некоторых буквы слова не
[08:08.680 --> 08:13.320]  может начинаться там, и так далее, да, в общем, с использованием
[08:13.320 --> 08:18.040]  информации о языке можно достаточно длинный текст
[08:18.040 --> 08:22.640]  просто взять и расшифровать, да, собственно, бывают там
[08:22.640 --> 08:25.240]  какие-нибудь там пляшущие человечки, да, это тоже шифр
[08:25.240 --> 08:29.360]  замены, и он был расшифрован вот на основании разного
[08:29.360 --> 08:33.760]  рода таких соображений, вот, но он мог быть более
[08:33.760 --> 08:38.840]  сложные какие-то, да, значит, более сложные какие-то
[08:38.840 --> 08:45.680]  методы, вот, но хорошо, а что в целом такое шифрование?
[08:45.680 --> 08:54.040]  Можно рисовать такую схему, значит, есть отправитель,
[08:54.120 --> 09:04.120]  есть получатель и есть перехватчик, соответственно,
[09:04.120 --> 09:10.840]  отправитель получает какое-то сообщение М, вот, возможно,
[09:10.840 --> 09:19.040]  он получает какой-то ключ, значит, это сообщение,
[09:19.040 --> 09:25.560]  и тут какой-то ключ, там, К, и на основании сообщения
[09:25.560 --> 09:37.120]  и ключа отправитель производит шифр текст, вот, а также этот
[09:37.120 --> 09:43.840]  шифр текст получает перехватчик, вот, а получатель получает
[09:43.840 --> 09:49.920]  шифр текст, ну и, возможно, тоже ключ, может быть, тот
[09:49.920 --> 09:55.360]  же самый, может быть, другой, значит, ключ К, и, соответственно,
[09:55.360 --> 10:00.440]  он должен восстановить М, вот, вот эта вот задача
[10:00.440 --> 10:05.000]  шифрования, да, что перехватчик, не зная ключа, по шифру
[10:05.000 --> 10:10.160]  ничего не сможет понять, а получатель сможет при помощи
[10:10.160 --> 10:19.480]  своего ключа получить, соответственно, исходное сообщение, вот,
[10:19.480 --> 10:22.120]  есть очень важный вариант, когда перехватчик также
[10:22.120 --> 10:30.800]  еще и ключ, вот этот вот получает, то есть, если еще К, но
[10:30.800 --> 10:34.960]  не К штрих, перехватчик тоже получает, то тогда это
[10:34.960 --> 10:47.160]  называется шифрование с открытым ключом, вот, ну и вот эта вот
[10:47.160 --> 10:50.560]  концепция шифрования с открытым ключом, это довольно новая
[10:50.560 --> 10:53.760]  концепция, значит, концепция второй плейн двадцатого
[10:53.760 --> 10:59.000]  века, вот, а до этого на протяжении веков все строилось в ситуации,
[10:59.000 --> 11:03.040]  что когда К штрих равно К, и держится в секрете, да,
[11:03.080 --> 11:07.440]  если украли ключ, да, если украли ключ, то тогда, соответственно,
[11:07.440 --> 11:13.320]  и все смогли прочесть, вот, вообще, на самом деле, последний
[11:13.320 --> 11:20.800]  крупный успех криптоанализа, то есть взлома шифров, это
[11:20.800 --> 11:25.720]  работа Тьюринга и его коллег во время Второй мировой
[11:25.720 --> 11:30.400]  войны, значит, когда они расшифровывали нацистскую
[11:30.400 --> 11:36.080]  машину Энигма, да, значит, вот она была довольно хитро
[11:36.080 --> 11:38.520]  устроена, и при этом ее было довольно удобно использовать,
[11:38.520 --> 11:42.160]  там была некоторая клавиатура и какие-то хитрые диски,
[11:42.160 --> 11:47.000]  которые, соответственно, в общем, там каждая буква
[11:47.000 --> 11:49.480]  заменялась на какую-то другую, но при этом это было
[11:49.480 --> 11:54.760]  непостоянно в зависимости от положения в тексте, да,
[11:54.760 --> 11:57.200]  то есть первый раз там буква заменялась там на букву
[11:57.200 --> 12:04.960]  С, а второй раз там на букву F, и так далее, вот, соответственно,
[12:04.960 --> 12:10.360]  и там прямо ключ представлял собой некоторый диск там
[12:10.360 --> 12:14.760]  с какими-то дырочками, вот, и, соответственно, отправителя
[12:14.760 --> 12:18.760]  и получателя, да, и как бы и у машины было два режима
[12:18.760 --> 12:21.080]  шифровки и дешифровки в одной и той же машине,
[12:21.840 --> 12:27.240]  вот, значит, там был рычажок переключить, и тогда, если с тем же
[12:27.240 --> 12:31.360]  самым ключом набирать полученные сообщения, то она вместо
[12:31.360 --> 12:34.800]  этого печатала исходный текст, вот, так что это, в общем,
[12:34.800 --> 12:40.120]  было довольно удобно ее использовать, и с другой стороны,
[12:40.120 --> 12:45.200]  там этих комбинаций дырочек было так много, да, что, в общем,
[12:45.200 --> 12:49.000]  там просто так подобрать было невозможно, вот, но,
[12:49.000 --> 12:55.320]  тем не менее, Тьюринг с коллегами нашли способ расшифровывать это,
[12:55.320 --> 12:59.400]  да, значит, ну, это, в общем, интересная история, там было несколько,
[12:59.400 --> 13:09.440]  даже фильм был, да, вот, то есть успех строился, во-первых,
[13:09.440 --> 13:13.760]  на том, что они просто эту машину добыли себе и полностью
[13:14.240 --> 13:22.040]  как она в принципе работает, вот, но, конечно, да, это означает,
[13:22.040 --> 13:25.200]  что они узнали, какой алгоритм используется вот здесь, вот,
[13:25.200 --> 13:27.400]  и какой алгоритм используется вот здесь, вот.
[13:27.400 --> 13:36.560]  Закрытым, да, да, да, да, да, да, то есть там вот КАШ-3
[13:36.560 --> 13:41.600]  равнялась Ка и представлял собой диск с дырочками, который
[13:41.600 --> 13:46.240]  вставлял в специальное место и тогда, если тот же самый диск
[13:46.240 --> 13:50.960]  и напечатать на клавиатуре полученный шифр текст, то тогда та же самая
[13:50.960 --> 13:52.800]  машина выдавала исходное сообщение.
[13:52.800 --> 14:06.400]  Это правда, да, да, то есть.
[14:06.400 --> 14:15.000]  Так, подождите, давайте я сначала про Энигму немножко расскажу,
[14:15.000 --> 14:21.800]  а потом про, значит, смотрите, там действительно частичный успех был,
[14:21.800 --> 14:25.360]  когда у них получалось просто перехватывать эти ключи, один раз даже
[14:25.360 --> 14:30.280]  на целый месяц перехватили и там месяц спокойно все читали, вот,
[14:30.280 --> 14:35.440]  но как бы глобально там на самом деле, там на каждый день был свой ключ
[14:35.480 --> 14:39.320]  и, собственно, эта вот группа сидела вместе под названием Bletchley Park
[14:39.320 --> 14:44.680]  в Лондоне и просто каждое утро они получали несколько перехватов
[14:44.680 --> 14:48.320]  и начинали расшифровывать, чтобы получить, какой именно там ключ
[14:48.320 --> 14:54.240]  сегодня используется, ну и они использовали, во-первых,
[14:54.240 --> 14:58.400]  некоторое понимание, как это работает, во-вторых, некоторое понимание,
[14:58.400 --> 15:03.320]  как устроены сообщения, да, например, что там утром часто передавали
[15:03.320 --> 15:06.880]  прогноз погоды, да, прогноз погоды довольно регулярно устроен,
[15:06.880 --> 15:11.480]  да, даже более регулярно, чем обычный текст, соответственно, это сильно
[15:11.480 --> 15:16.400]  сужало поиск, но кроме того, Тьюринг еще построил некоторую машину
[15:16.400 --> 15:21.680]  для автоматического перебора, да, который вот позволял это все ускорить,
[15:21.680 --> 15:26.400]  в общем, как правило, они там с утра за час понимали, какой сегодня ключ
[15:26.400 --> 15:32.640]  и после этого просто перехватывали все сообщения и их читали, вот,
[15:32.640 --> 15:36.800]  теперь действительно преимущество открытого ключа, действительно,
[15:36.800 --> 15:40.960]  если они даже разные, то если вы и ка, и ка штрих перехватите,
[15:40.960 --> 15:43.840]  то вы сможете прочесть, да, то есть, то это вообще для чтения только
[15:43.840 --> 15:51.080]  ка штрих нужен, вот, но есть такое преимущество, что если у вас
[15:51.080 --> 15:54.480]  ка равно ка штрих, то у вас сначала каким-то образом
[15:55.360 --> 16:05.360]  должны этот один ключ получить, вот, и какая-то коммуникация должна быть,
[16:05.360 --> 16:09.880]  но и соответственно, либо им как-то нужно встречаться и передавать,
[16:09.880 --> 16:15.360]  либо каким-то образом заветно защищенный канал использовать, чтобы его передать,
[16:15.360 --> 16:20.480]  вот, в общем, есть некоторая сложность с обменом,
[16:20.560 --> 16:25.960]  которая будет узким местом, а если эти ключи разные,
[16:25.960 --> 16:31.480]  тогда только получатель может сгенерировать пару ка и ка штрих,
[16:31.480 --> 16:35.280]  и ка штрих вообще никуда не пересылать, храни только у себя,
[16:35.280 --> 16:39.840]  а тогда ка вообще можно по открытому каналу передать, если мы не боимся,
[16:39.840 --> 16:45.520]  что ка будет известен на перехватчику, да, тогда ка можно передать там по радио,
[16:45.560 --> 16:50.800]  по открытому каналу, и соответственно, тогда кто угодно может зашифровать
[16:50.800 --> 16:57.000]  сообщение, которое сможет прочесть только получатель, вот, вот это вот
[16:57.000 --> 17:03.200]  концепция шифрования с открытым ключом, вот, это был определенный прорыв,
[17:03.200 --> 17:13.040]  это 1978, кажется, год, да, соответственно, вот, широко известная аббревиатура RSA,
[17:13.560 --> 17:21.720]  RSA это первые буквы фамилии авторов, Ривис, Шамир и Эйдельман, они придумали
[17:21.720 --> 17:31.840]  некоторый конкретный способ шифрования, вот, и они объявили тогда, написали статью,
[17:31.840 --> 17:39.560]  объявили, что вот, мол, мы зашифровали, кто сможет прочесть, то значит, там даже какой-то
[17:39.560 --> 17:45.200]  приз был объявлен, вот, кто сможет прочесть, то значит, заломал, на самом том, что они тогда написали,
[17:45.200 --> 17:50.560]  все-таки потом получилось взломать чисто за счет грубой силы, да, значит, за счет полного
[17:50.560 --> 17:56.880]  перебора, потому что, конечно, у вас компьютеры гораздо быстрее стали работать, вот, но это
[17:56.880 --> 18:03.920]  решается длиною ключа, то есть защититься от полного перебора можно за счет более длинного ключа,
[18:03.920 --> 18:16.800]  вот, ну, значит, это вот первая, первая классическая задача, задача шифрования,
[18:16.800 --> 18:38.160]  так, ну, дальше давайте, номер я напишу, обмен ключами, значит, вот отсюда видно, да,
[18:38.160 --> 18:44.120]  что даже если мы хотим, да, значит, если мы хотим, чтобы был один ключ, да, то, соответственно, надо им
[18:44.120 --> 18:49.520]  как-то обменяться, и вопрос, можно ли это сделать дистанционно, вот, ясно, что это нельзя пересылать
[18:49.520 --> 18:54.640]  прямым текстом, тогда его перехватят и потом все прочтут, вот, но, может быть, можно как-то
[18:54.640 --> 19:00.440]  долго друг другу что-нибудь пересылать, а потом на основании этого и на одной, и на другой стороне
[19:00.440 --> 19:10.480]  что-то вычислить, что будет ключом, вот, а при этом тот, кто подслушивает, и это, значит, не смог бы сделать.
[19:14.120 --> 19:22.240]  Вот, ну и вот это вот второй сюжет, он такой немножко странный, вот, а именно тоже довольно давно
[19:22.240 --> 19:30.120]  придуман некоторый метод, вот, но почти никакой теории нету, да, то есть вот про шифрование есть там
[19:30.120 --> 19:41.320]  подробная теория, при каких условиях оно возможно, там, то вот там доступно и так далее, вот, или там
[19:41.320 --> 19:46.600]  есть теорема, что если там какая-то функция обладает какими-то свойствами, такой протокол надежен,
[19:46.600 --> 19:54.320]  там и так далее, вот, но про обмен ключами ничего этого неизвестно, есть только один, ну не один,
[19:54.320 --> 20:03.000]  на самом деле, но не несколько хороших примеров, вот, дайте я прям напишу, а дайте я сначала нарисую
[20:03.000 --> 20:15.920]  схему, значит, вот есть две стороны, вот, и они вот долго друг с другом общаются, вот, а в итоге, значит,
[20:15.920 --> 20:26.640]  в итоге они должны один тот же ключка лучить, вот, но есть такой протокол Диффи Хэлмана,
[20:26.640 --> 20:54.680]  протокол Диффи Хэлмана, значит, есть две стороны, Алиса и Боб, значит, и есть, значит, они оба знают
[20:54.840 --> 21:11.640]  пару из простого модуля и генератора, первообразного корня, что-то первообразный, первообразный корень,
[21:11.640 --> 21:19.120]  знаете, да-да-да, порождающие мультипликативные группы, да, то есть, если мы возьмём этот, он же генератор,
[21:19.120 --> 21:25.360]  да, значит, если мы его возьмём во всех степенях, то получим, соответственно, все остатки, ну, кроме нуля,
[21:25.360 --> 21:32.960]  да, например, один не будет генератором, да, потому что один его степень это один, вот, а нужно только,
[21:32.960 --> 21:41.640]  чтобы он в по-минус первой степени был единицы, а раньше не был, вот, значит, кроме того, Алиса откуда-то
[21:41.640 --> 21:49.400]  ещё берёт число А, вот, а Боб откуда-то берёт число Б, значит, они могут там случайно генерировать, да, или просто
[21:49.400 --> 22:07.320]  откуда-то взять секретно, вот, и тогда, значит, Алиса передаёт G в степени A по модлю P, вот, а Боб
[22:07.320 --> 22:19.120]  передаёт G в степени B по модлю P, и тогда, соответственно, Алиса вычисляет ключ, как G в степени B,
[22:19.120 --> 22:32.920]  ещё в степени A, вот, а Боб вычисляет G в степени A ещё в степени B, да, и получается одно и то же, да, и то и другое
[22:32.920 --> 22:40.440]  будет G в степени A-B, но всё по модлю я уж не пишу, вот, и обе стороны это могут вычислить, да, потому что Боб
[22:40.440 --> 22:48.680]  уже в степени A получила, а Боб у него есть, а Алиса, наоборот, уже в степени B получила, а А у неё есть, вот, а,
[22:48.680 --> 22:59.320]  соответственно, перехватчик, значит, перехватчик, он может знать модуль генератор, он может знать вот эти вот G в степени A,
[22:59.320 --> 23:09.240]  а G в степени B, вот, но предполагается, так, наверное, это непростой нужен модуль, да, нет, с простым, наверное, это может не
[23:09.240 --> 23:15.400]  получиться, да, значит, давайте, секунду, наверное, там нужно, чтобы было произведение двух больших простых чисел,
[23:15.400 --> 23:25.080]  вот, тогда это, для каких-то модулей это будет сложно, предполагается, что зная G в степени A и зная G в степени B трудно
[23:25.080 --> 23:30.040]  посчитать G в степени A-B, вот,
[23:30.040 --> 23:55.880]  так, но там есть теорема, есть теорема, когда есть первообразный корень, там,
[23:55.880 --> 24:04.840]  там, там простой модуль, простой, простой, простой число в степени или два на простой число в степени,
[24:04.840 --> 24:19.400]  нет, а дальше уже прям первообразного не будет, вот, в общем, короче говоря, может быть, и простое работает,
[24:19.400 --> 24:27.080]  и надо смотреть, что написано, но, в общем, предполагается, да, предполагается, что нужно, чтобы трудно было, как бы,
[24:27.080 --> 24:35.560]  корень извлечь, точнее, не корень, а, наоборот, логарифм дискретный решить, да, то есть, должно быть трудно,
[24:35.560 --> 24:42.840]  должно быть трудно по G в степени A и G найти A, это задача логарифмирования, да, вот, логарифмирование по модуле,
[24:42.840 --> 24:48.600]  это называется задачей дискретного логарифма, да, потому что иначе, если бы могли по G в степени A найти A,
[24:48.600 --> 25:00.600]  тогда взломщик сам бы это посчитал после этого, вот, перехватчик точнее, вот, поэтому нужно, чтобы вот эта задача была сложной,
[25:00.600 --> 25:15.160]  ну вот, на самом деле, тут даже есть обобщенный протокол Диффи Хелмана, это ситуация, когда у вас не обязательно это группа вычетов,
[25:15.160 --> 25:24.840]  а какая-то группа, у которой есть генератор, ну и дальше тоже самое происходит, вот, соответственно, если у вас есть хоть какая-то группа,
[25:24.920 --> 25:33.240]  в которой предположительно задача логарифмирования сложна, и более того, никакого другого способа тоже нет по G в степени A и G в степени B найти G в степени A-B,
[25:33.240 --> 25:50.920]  то тогда вот этот протокол будет надежным, вот, ну вот, более-менее, это все, что известно про задачу обмена ключами, да, то есть, нет никакой общей теории,
[25:51.000 --> 26:12.040]  что если есть там какая-то задача, то на основании нее можно построить такой протокол, нет, ну нужна именно конкретная структура группы, чтобы вот это так работало, так, хорошо, так, третий пример,
[26:12.760 --> 26:39.960]  значит, третий пример это цифровая подпись, цифровая подпись, да, значит, есть вот такой канцеляризм, электронная цифровая подпись, и кажется, что это повторяется два раза одно и то же,
[26:40.680 --> 26:58.680]  но на самом деле в этом есть некоторый смысл, что именно оба прилагательных используются, да, значит, а именно электронно означает на электронном носителя, да, то есть, например, если я, скажем, с тилусом на экране расписался в файле, то это будет электронная подпись, но не цифровая,
[26:59.400 --> 27:19.400]  почему, да, значит, почему такое действие не очень надежное, да, что я просто с тилусом там в варде расписываюсь, но оно ненадежно тем, что можно эту картинку скопировать и вставить какой-нибудь другой текст, вот, поэтому хотя это часто применяется, да, но для серьезных вещей это вообще не подходит,
[27:20.120 --> 27:36.120]  вот, а с другой стороны, да, бывает наоборот, значит, бывает там файлы, и там как будто внизу штанпик стоит, чтобы подпись с электронной подписью,
[27:36.840 --> 27:53.840]  и этот штанг, конечно, тоже можно скопировать, но, может быть, там написано подпись с электронной подписью и дать какой-то ряд цифр, вот, и тогда, если этот файл напечатать, то вот этот ряд цифр будет цифровой подпися, но не электронной, да, чтобы его на бумажном носителе распечатали,
[27:54.560 --> 28:13.560]  от этого электронным он быть перестал, но цифровым не перестал, значит, в чем же смысл именно цифровой подпися? Ну, смысл, на самом деле, в том, что она зависит от документа, да, если она зависит от документа, то если вы ее скопируете на другой документ, то тогда она перестанет быть действительной, вот.
[28:13.560 --> 28:38.280]  Соответственно, но протокол цифровой подпися состоит из двух процедур, а именно процедуры подписи и процедуры проверки, вот, есть, значит, есть одна сторона, это подписывающий, подписывающий получает сообщение,
[28:43.560 --> 29:09.280]  получает ключ, ключ К, и, соответственно, генерирует, ну, собственно, некоторую подпись, подпись С, вот, и дальше есть проверяющий, да, или верификатор,
[29:14.280 --> 29:39.280]  который получает некоторую подпись С штрих, значит, получает тоже сообщение М, то же самое, тоже получает ключ, но, возможно, другой, значит, ключ К штрих, и возвращает 0 или 1, да, да, или нет.
[29:39.280 --> 30:09.000]  Вот, ну и, соответственно, нужно, что если С штрих равняется С, то есть подпись именно под этим сообщением, тогда нужно, да, значит, нужно, чтобы вывести 1, вот, ну, а если подпись какая-то другая, то нужно вывести 0, вот, но, точнее, в принципе, это не обязательно, он может быть, верификатор дает 1 на каких-то других подписях,
[30:10.000 --> 30:15.000]  но нельзя, чтобы взломщик, да, то есть тут еще есть взломщик,
[30:24.000 --> 30:30.000]  значит, что получает взломщик, значит, взломщик получает некоторое количество корректных подписей,
[30:30.720 --> 30:52.720]  да, потому что тут, тут предлагают, что нет шифрования, да, просто вот есть подпись под документом, да, то есть взломщик получает несколько, несколько корректных, корректных пар,
[30:53.440 --> 31:04.440]  значит, M, I, T, S, I, T, на то взломщик может как бы научиться, да, научиться, как выглядит подпись вот таким-то документами,
[31:05.160 --> 31:24.360]  вот, а дальше, значит, что он хочет, он хочет какое-то вывести M' и S', да, значит, такое, что M' не совпадает ни с одним из M'
[31:26.360 --> 31:32.360]  значит, M' не совпадает ни с каким из M'
[31:33.280 --> 31:38.280]  вот, но при этом, чтобы вот эту вот пару принял верификатор,
[31:39.280 --> 31:44.280]  вот, если взломщик такое сделает, то это считается успешной атакой,
[31:45.280 --> 31:49.280]  вот, но точнее можно несколько разных уровней атак рассматривать,
[31:49.280 --> 31:57.280]  да, может быть, атака, что просто кто-то с улицы пришел, да, и пытается сгенерировать сообщение и подпись под ним,
[31:58.200 --> 32:06.200]  да, это такая простая атака, может быть, однократная атака, когда он не несколько пар, а одну пару узнал и хочет чего-нибудь другое подписать,
[32:08.200 --> 32:10.800]  вот, а может быть, вот такая самая сильная атака
[32:10.800 --> 32:20.200]  да, значит, ну, и понятно, что на самом деле взломщик, наверное, хочет не что угодно подписать, а что-то, что ему нужно,
[32:21.200 --> 32:25.200]  вот, но если он вообще ничего не может подписать, то, тем более он не может подписать то, что ему нужно,
[32:25.200 --> 32:32.240]  вот поэтому то что здесь написано это самая сильная атака вот нужно чтобы вот это вот
[32:34.840 --> 32:36.840]  принималась верификатором
[32:39.040 --> 32:45.120]  да с ключами тоже есть вариант а значит может вариант что ключи к и к штрих
[32:47.000 --> 32:53.320]  одинаковые и тогда не взломщику неизвестная и это называется подпись с закрытым ключом
[32:55.960 --> 33:01.880]  вот и это подразумевает что вот эти контрагенты они как-то уже заранее связаны друг с другом
[33:02.640 --> 33:04.880]  да и они друг другу хотят посылать
[33:05.720 --> 33:07.920]  как бы верифицированные сообщения
[33:08.840 --> 33:11.780]  вот а может быть так что он к штрих и знает
[33:13.240 --> 33:16.240]  значит к штрих это если открытый ключ
[33:19.880 --> 33:21.880]  вот открытый ключ
[33:22.280 --> 33:26.680]  вот это подразумевает следующее да что вот подписывающие там где-то на личном сайте
[33:27.720 --> 33:30.600]  публикует что вот мой открытый ключ и
[33:31.760 --> 33:35.520]  с помощью него может проверять все про что говорят что есть что это я подписал
[33:37.280 --> 33:40.360]  на и тогда верификатор там кто угодно может верифицировать
[33:41.440 --> 33:43.200]  подпись под сообщением
[33:43.200 --> 33:48.880]  значит зная к штрих но взломщика тоже знает к штрих и может пытаться при помощи к штрих что-то делать
[33:52.800 --> 33:54.800]  вот
[33:58.400 --> 34:04.440]  так ну вот значит это своя подпись есть похожая задача
[34:07.880 --> 34:09.880]  аутентификация
[34:16.280 --> 34:19.560]  значит то это то с чем мы все сталкиваемся когда никуда не логинимся
[34:20.160 --> 34:26.400]  да там нужно доказать да что вы это вы да они кто-то кто пытается ломать ваш аккаунт
[34:28.400 --> 34:30.400]  вот но тут соответственно
[34:31.560 --> 34:33.560]  может считать что вот там есть
[34:35.920 --> 34:37.920]  значит есть клиент есть сервер
[34:44.520 --> 34:48.060]  вот соответственно клиент знает пароль
[34:49.560 --> 34:51.560]  вот
[34:52.160 --> 34:56.760]  ну а сервер тоже что-то знает вот но значит соответственно
[34:58.840 --> 35:04.040]  вот они как так обмениваться каким-то сообщениями в итоге сервер должен пустить или не пустить
[35:07.520 --> 35:09.520]  вот ну и тоже тут есть много разных
[35:10.800 --> 35:17.800]  да то есть тут вопрос что что именно еще знает сервер если сервер тоже прям пароль знает то это называется аутентификация закрытым ключом
[35:18.760 --> 35:21.460]  когда и у и у клиента и у сервера
[35:23.240 --> 35:25.520]  соответственно есть пароль один и тот же и
[35:26.320 --> 35:31.840]  опять что вопрос что может атакующий делать да например может ли атакующий вот это вот подслушивать
[35:34.040 --> 35:35.680]  вот
[35:35.680 --> 35:39.960]  там опять же есть несколько атак значит я сам проста так а просто
[35:40.840 --> 35:42.840]  взломщик с улицы приходит пытается логиниться
[35:43.760 --> 35:50.840]  вот а такой простой атаке может еще защититься тем что просто клиент посылает пароли вера проверяет что на свод赏ält тем что написано
[35:51.960 --> 35:58.080]  вот но я слышу вот это вот только такой простой атаке может защититься да потому что более сложная когда
[35:58.760 --> 36:00.920]  взломщик подслушивать что есть происходят и
[36:01.520 --> 36:03.640]  тогда уже перейду текстом нельзя пароль передавать
[36:05.600 --> 36:10.280]  нач forgive это подслушивает и соответственно потом пытается сам взлогиниться
[36:12.840 --> 36:19.840]  Он подслушивает все сообщения, которые идут между клиентом и сервером.
[36:19.840 --> 36:22.840]  Если среди этих сообщений будет пароль в прямом текстом,
[36:22.840 --> 36:26.840]  то тогда взломщик его подслушивает и сможет потом залогиниться.
[36:26.840 --> 36:31.840]  Поэтому пароль в прямом текстом лучше не пересылать.
[36:31.840 --> 36:41.840]  Есть такая атака с подслушиванием, а еще есть еще более сильная атака.
[36:41.840 --> 36:46.840]  Атака с фальшивым сервером, или то, что называется фишинговая атака.
[36:46.840 --> 36:49.840]  Когда взломщик сам притворяет с сервером,
[36:49.840 --> 36:52.840]  и соответственно сам беседует с клиентом,
[36:52.840 --> 36:55.840]  и вовсе не обязательно по тому же протоколу, который сервер использует,
[36:55.840 --> 36:57.840]  а может быть по какому-то другому.
[36:57.840 --> 37:03.840]  А после этого этот взломщик пытается пойти на настоящий сервер и там залогиниться.
[37:03.840 --> 37:10.840]  Идеальная система защищена от всех этих атак.
[37:10.840 --> 37:15.840]  Но, к сожалению, идеальная система довольно ресурсоемки.
[37:15.840 --> 37:20.840]  Они в теории есть и даже немножко на практике, но они ресурсоемки.
[37:20.840 --> 37:25.840]  Поэтому, как правило, используется что-то промежуточное,
[37:25.840 --> 37:30.840]  не пароль прямым текстом, но и не прям полномасштабная система,
[37:30.840 --> 37:32.840]  которая абсолютно защищена.
[37:42.840 --> 37:46.840]  Такая же история, на самом деле, при общении с банкоматом.
[37:46.840 --> 37:58.840]  Давным-давно были карточки банковские только с магнитной полосой и без чипа.
[37:58.840 --> 38:02.840]  Не знаю, вы, наверное, уже не заставили такое.
[38:02.840 --> 38:07.840]  Но теоретически они и сейчас даже могут выпускаться, но вроде так никто не делает.
[38:07.840 --> 38:11.840]  А магнитная полоса – это фактически пароль прямым текстом.
[38:11.840 --> 38:16.840]  Это, наверное, про что-то зашифровано намагничиванием полюсов.
[38:16.840 --> 38:18.840]  Какие-то данные.
[38:18.840 --> 38:25.840]  И, соответственно, банкомат их просто там читает и понимает, кто кто перед ним.
[38:25.840 --> 38:29.840]  И, соответственно, сколько можно денег выдать.
[38:29.840 --> 38:36.840]  И тогда, тем не менее, даже когда чипов не было, был все-таки пин-код.
[38:36.840 --> 38:39.840]  И это тоже…
[38:39.840 --> 38:44.840]  Но пин-код как бы отделен…
[38:44.840 --> 38:49.840]  В банкомате есть отдельно окошко, считывающее карточку,
[38:49.840 --> 38:52.840]  и есть отдельно клавиатура для пин-кода.
[38:52.840 --> 38:55.840]  Есть все-таки немножко разные устройства.
[38:55.840 --> 38:59.840]  Но вообще я к чему клоню, что когда-то давно, больше 10 лет назад,
[38:59.840 --> 39:03.840]  была такая атака на банкоматы.
[39:04.840 --> 39:12.840]  На эту щель для карточки нацепляли специальный считыватель магнитной полосы.
[39:12.840 --> 39:18.840]  И когда жертва вставляла карточку, то этот считыватель все там считывал.
[39:18.840 --> 39:20.840]  И где-то у себя хранили.
[39:20.840 --> 39:26.840]  А кроме того, была еще накладная клавиатура, которая запоминала пин-код.
[39:26.840 --> 39:28.840]  И после этого…
[39:28.840 --> 39:31.840]  Это мог быть даже настоящий банкомат.
[39:31.840 --> 39:36.840]  После этого жертва, соответственно, вводила пин-код.
[39:36.840 --> 39:39.840]  Может быть, даже получала какое-то обслуживание.
[39:39.840 --> 39:43.840]  Но злоумышленник мог изготовить копию магнитной полосы,
[39:43.840 --> 39:46.840]  и, зная пин-код, мог после этого сам прийти в банкомат
[39:46.840 --> 39:50.840]  и снять все, что там осталось на карточке.
[39:50.840 --> 39:54.840]  Была такая атака некоторое время популярна.
[39:54.840 --> 40:00.840]  Но от нее довольно быстро защитились техническими средствами,
[40:00.840 --> 40:06.840]  что просто переделали щели для карт, так что туда уже ничего нельзя приклеить.
[40:06.840 --> 40:08.840]  И это сейчас сохранилось.
[40:08.840 --> 40:13.840]  Можете замечать, что там обычно отверстия для картники такие вырезанные,
[40:13.840 --> 40:15.840]  какие-то хитрые формы.
[40:15.840 --> 40:19.840]  Это с того времени сохранилось более-менее.
[40:19.840 --> 40:22.840]  Так чтобы на них ничего постороннего нельзя было нацепить.
[40:22.840 --> 40:26.840]  Ну а глобально это ушло с внедрением чипов.
[40:26.840 --> 40:30.840]  Чип это не просто информация, а он какие-то вычисления делает.
[40:30.840 --> 40:34.840]  И вот чип с банкоматом как какой-то обмен сообщениями делают.
[40:34.840 --> 40:36.840]  И даже если вы подслушаете эти сообщения,
[40:36.840 --> 40:39.840]  то это еще не значит, что вы сможете воспроизвести.
[40:45.840 --> 40:47.840]  Давайте сделаем перерыв.
[40:47.840 --> 40:49.840]  Немножко задержал.
[40:49.840 --> 40:51.840]  Пять минут перерыв, потом продолжим.
[40:56.840 --> 41:00.840]  Дальше идет очень большой класс примеров,
[41:00.840 --> 41:07.840]  которые в целом можно назвать безопасные многосторонние вычисления.
[41:07.840 --> 41:11.840]  Я уже не буду так подробно на них останавливаться.
[41:11.840 --> 41:15.840]  Потому что тут вообще трудно остановиться.
[41:15.840 --> 41:17.840]  Потому что очень много разных примеров.
[41:17.840 --> 41:20.840]  Ну например, какие могут быть задачи?
[41:20.840 --> 41:41.840]  Ну например, на
[41:41.840 --> 41:45.840]  децентрализованной генерации случайных чисел.
[41:45.840 --> 41:48.840]  Да, это может быть важно.
[41:48.840 --> 41:53.840]  Например, если какую-нибудь там лотерею проводите через интернет,
[41:53.840 --> 41:59.840]  то тогда получается, что нужно, чтобы все были уверены,
[41:59.840 --> 42:03.840]  что там генерировано честно.
[42:03.840 --> 42:13.840]  Например, распределенная генерация случайных чисел.
[42:13.840 --> 42:21.840]  Мы уже в прошлый раз обсуждали много разных проблем с генераторами.
[42:21.840 --> 42:24.840]  Но также есть проблема доверия.
[42:24.840 --> 42:28.840]  Что если одна сторона генерирует случайные числа,
[42:28.840 --> 42:32.840]  то может быть у нее просто плохой генератор.
[42:32.840 --> 42:35.840]  Да, она не постаралась сделать хорошей.
[42:35.840 --> 42:38.840]  А может быть она еще и жульничает.
[42:38.840 --> 42:42.840]  И подкручивает случайные числа так, чтобы это ей было выгодно.
[42:42.840 --> 42:48.840]  И соответственно, если стороны друг другу не доверяют,
[42:48.840 --> 42:54.840]  то нужно как-то сделать так, что тем не менее,
[42:54.840 --> 42:56.840]  если только одна сторона жульничает,
[42:56.840 --> 43:00.840]  то у нее бы не получилось склонить в свою сторону.
[43:00.840 --> 43:07.840]  Но если есть возможность одновременного обмена сообщениями,
[43:07.840 --> 43:09.840]  то тогда можно сделать так.
[43:09.840 --> 43:12.840]  Например, если один бит нужно сгенерировать,
[43:12.840 --> 43:15.840]  то Алиса у себя бросает монетку, Боба у себя бросает монетку.
[43:15.840 --> 43:18.840]  А потом они, не зная результатов друг друга,
[43:18.840 --> 43:21.840]  посылают друг другу результаты своих монеток.
[43:21.840 --> 43:25.840]  А итог в результат это их сумма, по-моему, до 2.
[43:25.840 --> 43:27.840]  То есть их ксор.
[43:27.840 --> 43:31.840]  И тогда, если они действительно не могут подглядеть друг другу,
[43:31.840 --> 43:35.840]  то тогда, если одна из монеток случайная,
[43:35.840 --> 43:37.840]  то другая, даже если она не случайная,
[43:37.840 --> 43:39.840]  если она случайная, но не симметричная,
[43:39.840 --> 43:45.840]  все равно при ксоре даст равномерную величину.
[43:45.840 --> 43:49.840]  Понятно, что если у меня два бита ксорятся,
[43:49.840 --> 43:51.840]  то если один из них случайный,
[43:51.840 --> 43:54.840]  то второй же, не важно, какой результат будет случайный.
[43:54.840 --> 43:57.840]  Но это если они могут одновременно не подглядывать и послать,
[43:57.840 --> 43:59.840]  а если они обязательно последовательно,
[43:59.840 --> 44:01.840]  то там нужны дополнительные ухищрения.
[44:07.840 --> 44:09.840]  Распределена генерация.
[44:09.840 --> 44:13.840]  Есть такой интересный сюжет под названием Византийское соглашение.
[44:14.840 --> 44:18.840]  Византийское соглашение
[44:25.840 --> 44:29.840]  Византийское соглашение заключается в том,
[44:29.840 --> 44:34.840]  что несколько сторон должны прийти к одному решению,
[44:34.840 --> 44:37.840]  по крайней мере, те, из них, которые честные.
[44:38.840 --> 44:41.840]  Что может быть много сторон,
[44:41.840 --> 44:45.840]  и из них кто-то может быть нечестным,
[44:45.840 --> 44:50.840]  и пытаться жульничать, не в соответствии с протоколом как-то себя вести.
[44:50.840 --> 44:54.840]  Но, тем не менее, все остальные должны как-то договориться,
[44:54.840 --> 44:56.840]  несмотря на то, что там кто-то мешает.
[44:56.840 --> 44:59.840]  Не важно, о чем именно договориться.
[44:59.840 --> 45:05.840]  В узком смысле Византийское соглашение
[45:05.840 --> 45:08.840]  заключается в том, что там есть один начальник,
[45:08.840 --> 45:11.840]  и он передает приказы,
[45:11.840 --> 45:14.840]  и там есть два вида приказа.
[45:17.840 --> 45:19.840]  А все связи только двусторонние.
[45:19.840 --> 45:22.840]  И все подчиненные, общаясь друг с другом,
[45:22.840 --> 45:25.840]  должны в итоге понять, какой был приказ,
[45:25.840 --> 45:29.840]  даже если сам начальник нечестный.
[45:29.840 --> 45:32.840]  Если начальник нечестный, то он может разные приказы рассылать,
[45:32.840 --> 45:35.840]  но, тем не менее, все честные должны делать одно и то же.
[45:39.840 --> 45:42.840]  Это Византийское соглашение.
[45:42.840 --> 45:45.840]  Есть сюжет разделения секрета.
[45:52.840 --> 45:57.840]  Разделение секрета – это ситуация, когда есть какой-то секрет,
[45:57.840 --> 46:01.840]  и из него делается некоторое количество кусков,
[46:01.840 --> 46:04.840]  то есть просто некоторое количество слов,
[46:04.840 --> 46:07.840]  каких-то участков информации,
[46:07.840 --> 46:15.840]  и нужно, чтобы никто один не мог из своего участка понять секрет.
[46:15.840 --> 46:20.840]  Там никакие двое тоже не могли, даже если сговорятся.
[46:20.840 --> 46:24.840]  А вот выше кого-то порога, наоборот, уже точно смогли бы.
[46:24.840 --> 46:28.840]  Например, там никакие пятеро еще не смогли бы, а шестеро уже смогли бы.
[46:28.840 --> 46:31.840]  Вот это вот разделение секрета.
[46:31.840 --> 46:37.840]  У этого есть такая аналогия, такая топологическая.
[46:37.840 --> 46:42.840]  Представьте, что у вас есть ворота, и есть некоторое количество замков,
[46:42.840 --> 46:52.840]  и, например, нужно навесить три замка так, чтобы при открывании любого одного
[46:52.840 --> 46:57.840]  ворота еще не открывались, а при открывании любых двух они бы открывались.
[46:57.840 --> 47:02.840]  То есть смотрите, чтобы при открывании любого одного,
[47:02.840 --> 47:04.840]  чтобы ключи, тем не менее, были разные,
[47:04.840 --> 47:06.840]  при открывании любого одного ворота бы открывались.
[47:06.840 --> 47:09.840]  Это легко, нужно цепочку из трех замков.
[47:09.840 --> 47:12.840]  Они как бы дают такие замки на тросиках.
[47:12.840 --> 47:16.840]  Тогда, соответственно, можно их в цепочку сцепить,
[47:16.840 --> 47:19.840]  и тогда любой один будет открывать все.
[47:19.840 --> 47:21.840]  Если нужно только все три ключа сразу,
[47:21.840 --> 47:25.840]  тогда их нужно все три замка нацепить,
[47:25.840 --> 47:29.840]  и тогда нужно будет обязательно все три открыть, чтобы открылось.
[47:29.840 --> 47:32.840]  А вот чтобы при двух открывалось, а при одном еще не открывалось,
[47:32.840 --> 47:38.840]  это нужно придумать какую-то такую-то топологическую штуковину,
[47:38.840 --> 47:43.840]  как именно они должны быть зацеплены между собой.
[47:43.840 --> 47:50.840]  Ну, подумайте, порисуйте.
[47:50.840 --> 47:55.840]  Каждый замок – это просто окружность,
[47:55.840 --> 47:59.840]  окружность с какой-то точки, где он смыкается,
[47:59.840 --> 48:02.840]  но окружность гибкая.
[48:02.840 --> 48:21.840]  Ну, дальше могут быть совсем близкие к практике сюжеты.
[48:21.840 --> 48:28.840]  Например, электронные выборы.
[48:28.840 --> 48:31.840]  Такая довольно спорная для практики тема,
[48:31.840 --> 48:34.840]  но в теории что такое электронные выборы?
[48:34.840 --> 48:38.840]  Это означает, что есть у вас большое количество входов,
[48:38.840 --> 48:40.840]  и один вход – это один голос.
[48:40.840 --> 48:43.840]  А голос – это выбор одного из низких вариантов,
[48:43.840 --> 48:45.840]  например, в практическом случае.
[48:45.840 --> 48:50.840]  А результат – это какой вариант, сколько раз выбран.
[48:50.840 --> 48:56.840]  И в чем, собственно, основное противоречие электронных выборов?
[48:56.840 --> 49:01.840]  Почему это с трудом получается реализовывать?
[49:01.840 --> 49:07.840]  И все равно большинство реализаций работают или не работают на доверие.
[49:07.840 --> 49:13.840]  Основная проблема в том, что нужно одновременно соблюсти тайну голосования.
[49:13.840 --> 49:16.840]  Неизвестно, кто конкретно за что проголосовал.
[49:16.840 --> 49:22.840]  И при этом, чтобы была заведом корректность подсчета.
[49:22.840 --> 49:27.840]  И вот эти вот требования немножко противоречат друг другу.
[49:27.840 --> 49:33.840]  Мог бы быть даже более сильное требование, например, невозможность принуждения.
[49:33.840 --> 49:35.840]  Что означает невозможность принуждения?
[49:35.840 --> 49:42.840]  Это означает, что нельзя раскрыть, что тайно голосование не просто не может человек с улицы прийти и подглядеть.
[49:42.840 --> 49:49.840]  А даже сам избиратель, если хочет даже доказать, как он проголосовал, он не сможет проголосовать.
[49:49.840 --> 49:53.840]  Это гораздо более сильно, чем просто это не видно.
[50:00.840 --> 50:07.840]  В общем, реально получается, что эти проблемы доверия, они все равно никуда не деваются.
[50:07.840 --> 50:16.840]  И все равно надо быть как-то уверенным, что там нужны программы запущенные и так далее.
[50:19.840 --> 50:24.840]  Но также есть важная тема, это электронные платежи.
[50:30.840 --> 50:34.840]  Ну или шире вообще какой-то распределенный доступ к базе данных.
[50:34.840 --> 50:40.840]  Но с электронными платежами основная цель, чтобы не было возможна двойная трата.
[50:40.840 --> 50:44.840]  Электронные деньги это просто какие-то записи в базе данных.
[50:44.840 --> 50:52.840]  И, соответственно, если один раз потрачены эти деньги, то нельзя, чтобы второй раз те же самые деньги потратились.
[50:52.840 --> 51:02.840]  Притом с бумажными деньгами или железными это происходит путем физической передачи носителя.
[51:02.840 --> 51:06.840]  А с электронными физически ничего никуда не передается.
[51:06.840 --> 51:11.840]  И можно каким-то образом устроить обработку информации так, чтобы двойной траты не было.
[51:11.840 --> 51:19.840]  Ну и тут опять же есть решение централизованное типа платежных систем или банков.
[51:19.840 --> 51:24.840]  Есть решение децентрализованное типа всякого блокчейна, криптовалют и так далее.
[51:26.840 --> 51:32.840]  Ну и так далее. В общем, тут умные контракты могут быть, еще что-нибудь.
[51:32.840 --> 51:40.840]  Тут действительно очень много разных примеров популярных и не очень популярных.
[51:42.840 --> 51:49.840]  Так, ну хорошо, давайте я немножко опишу, как же это все связано с тем, что мы до сих пор изучали.
[51:53.840 --> 51:55.840]  Связано на самом вот как.
[51:55.840 --> 51:59.840]  Значит, более-менее можно это написать как теорема.
[51:59.840 --> 52:01.840]  Значит, теорема.
[52:04.840 --> 52:08.840]  Ну, я так неформально напишу.
[52:09.840 --> 52:14.840]  Значит, если P равно NP, то криптография невозможна.
[52:19.840 --> 52:21.840]  То криптография невозможна.
[52:25.840 --> 52:28.840]  Ну, на самом деле это я немножко преувеличил.
[52:28.840 --> 52:30.840]  Не то, чтобы совсем невозможно.
[52:30.840 --> 52:34.840]  Да, но возможно только самая простая криптография.
[52:34.840 --> 52:38.840]  Типа, ну например, может быть такое.
[52:41.840 --> 52:50.840]  Шифрование тоже бывает, что там для расшифровки нужно взять какой-то текст, там какую-то книгу.
[52:52.840 --> 52:58.840]  И с использованием того, что сообщили, и тексты из книги, восстановить то, что хотели передать.
[52:59.840 --> 53:02.840]  Вот это вот шифрование с закрытым ключом.
[53:03.840 --> 53:05.840]  Знаешь, шифрование с закрытым ключом.
[53:07.840 --> 53:09.840]  Но при этом очень неэкономное.
[53:12.840 --> 53:14.840]  Очень неэкономное.
[53:14.840 --> 53:18.840]  А именно, например, вы каждую...
[53:18.840 --> 53:26.840]  Например, номер буквы в тексте книги и номер букв в тексте шифра нужно сложить.
[53:27.840 --> 53:31.840]  Но если получилось больше, чем число букв в алфавите, то взять по моделю.
[53:31.840 --> 53:33.840]  И вот это будет буква исходного сообщения.
[53:35.840 --> 53:44.840]  То есть мы тоже как бы складываем по каждому символу в отдельности код сообщения и код ключа.
[53:47.840 --> 53:52.840]  Ну и тогда, соответственно, если шифрование это складывание, то дэш-шифрование будет вычитание.
[53:54.840 --> 53:57.840]  А если это еще, по-моему, для 2, то можно тоже складывать.
[53:57.840 --> 53:59.840]  Потому что, по-моему, на 2 плюс и минус это одно и то же.
[54:01.840 --> 54:03.840]  Вот. Вот такое будет возможно.
[54:05.840 --> 54:11.840]  Но тем не менее, представить себе, как это работает, как это могло бы работать.
[54:11.840 --> 54:15.840]  Как могли бы работать кинетеэлектронные платежи, если у нас криптография только такая же, нужно складывать.
[54:16.840 --> 54:23.840]  Но это работало бы так, что вы приходите в банк, и там вам дают флешку с одноразовыми ключами.
[54:24.840 --> 54:36.840]  Вообще, на самом деле, лет 15 назад такое бывало, что не флешку даже выдают, а выдают карточку такую пластиковую, скрэч-карту, что называется.
[54:37.840 --> 54:42.840]  Там можно ногтем стереть защитный слой, и там будет какое-то число из восьми цифр.
[54:43.840 --> 54:44.840]  И это будет одноразовую пароль.
[54:46.840 --> 54:52.840]  Или было такое, что можно на чеке напечатать, прийти в банкомат с карточкой и попросить.
[54:52.840 --> 54:54.840]  И попросить меня, пожалуйста, одноразовую пароль напечатать.
[54:55.840 --> 54:57.840]  Выдает чек там сколько-то.
[55:00.840 --> 55:03.840]  Ну, в общем, если P равно NP, то, более-менее, ничего другого невозможно.
[55:04.840 --> 55:08.840]  И, на самом деле, если P равно NP, то там восемь цифр, это не будет достаточно.
[55:09.840 --> 55:31.840]  Реально нужно, если P равно NP, то нужно приходить в банк, получать флешку с закрытым ключом, и дальше каждый раз ее подключать к компьютеру, или по Bluetooth к телефону, чтобы заплатить удаленно за что-нибудь.
[55:32.840 --> 55:39.840]  А если у вас ее украдут, то тогда нужно будет бежать в банк.
[55:40.840 --> 55:42.840]  И попытаться успеть заблокировать.
[55:43.840 --> 55:45.840]  В общем, какая-то немножко безрадостная картина.
[55:46.840 --> 55:48.840]  Так что можно считать, что это правильная теорема.
[55:49.840 --> 55:54.840]  Ее можно делать правильно, если точно сформулировать, что именно, я понимаю, под клиптографией.
[55:55.840 --> 55:59.840]  И, в общем, для большинства формулировок это будет правильно.
[56:00.840 --> 56:03.840]  Но, на самом деле, этого мало.
[56:04.840 --> 56:12.840]  Но и P не равно NP тоже недостаточно.
[56:19.840 --> 56:20.840]  С чем это связано?
[56:21.840 --> 56:28.840]  Это связано с тем, что то, что P равно NP или не равно NP, это в любом случае просто сложность в худшем случае.
[56:29.840 --> 56:35.840]  То есть, если P не равно NP, то в худшем случае взломщику придется считать сверхполинальное время.
[56:36.840 --> 56:38.840]  Но это не то, что нам нужно для надежности.
[56:39.840 --> 56:44.840]  Для надежности нас не устроит, что взломщик в 5% случаев не сможет взломать.
[56:46.840 --> 56:53.840]  Нам, наоборот, нужно, чтобы 99% и 9% случаев не мог взломать.
[56:54.840 --> 56:59.840]  То есть, получается, что, на самом деле, для клиптографии нужна некоторая сложность.
[57:00.840 --> 57:03.840]  Не просто наличие сложных задач, а наличие сложных задач в среднем.
[57:04.840 --> 57:06.840]  И вот это не умеют доказывать.
[57:07.840 --> 57:12.840]  То есть, не умеют доказывать, что если P не равно NP, тогда и в среднем тоже есть сложная задача.
[57:12.840 --> 57:22.840]  Вот. И более того, на самом деле, для криптографии нужны некоторые специально орденоструктурированные задачи, которые так называемы криптографические примитивы.
[57:22.840 --> 57:31.840]  Значит, для криптографии нужны так называемые криптографические примитивы.
[57:31.840 --> 57:37.840]  Ну, это такое тоже слова не очень четко определенные.
[57:38.840 --> 57:54.840]  То есть, могут быть и нашихyk online, и Dev Accounting и S0 recursion.
[57:55.840 --> 57:59.840]  Мы tan 05 как бы OG.
[57:59.840 --> 58:06.300]  определенная да то есть могут и там и что-нибудь из вот этого называть примитивами вот но я имею
[58:06.300 --> 58:13.540]  в виду более такие более теоретические вещи значит например значит например односторонняя функция
[58:13.540 --> 58:30.340]  значит односторонняя функция но это тоже на свою картинку да есть x
[58:30.340 --> 58:44.820]  есть x есть f от x и соответственно из x в f от x вычислить легко то есть дополнительное
[58:44.820 --> 58:55.180]  время можно а из f от x в x вычислить трудно вот при этом смотрите ясно что если у нас там
[58:55.180 --> 59:00.140]  функция f много склеивает то мы-то не сможем понять какой x там был в самом начале поэтому
[59:00.140 --> 59:07.380]  вот это вот получить x это означает что любой там x штрих у которого значение в то же самое вот
[59:07.380 --> 59:14.140]  вот это называется обратить функцию и вот эта задача решается трудно но опять же я сейчас не буду
[59:14.140 --> 59:22.780]  остановиться на том что что именно это означает вот ну и тогда вот это вот легко понять что если
[59:22.780 --> 59:31.580]  p равно np тогда вот такой штук не существует потому что это же как раз np задача найти прообраз
[59:31.580 --> 59:39.820]  если прообраз есть можем проверить что он правильный вот эта задача из np задача поиска но мы
[59:39.820 --> 59:45.900]  доказывали что если p равно np тогда задача поиска тоже быстро решается вот поэтому тогда такое
[59:45.900 --> 59:54.900]  невозможно вот но к сожалению доказать что если p равно np тогда такая штука есть тоже никто не
[59:54.900 --> 01:00:06.820]  умеет вот ну вот значит это вот односторонняя функция более-менее для всего нужна без нее без
[01:00:06.820 --> 01:00:16.260]  нее вообще никакая критография невозможно кроме вот самый примитивный вот значит могут быть разные
[01:00:16.260 --> 01:00:37.860]  варианты значит варианты можно может быть что это перестановка перестановка ну или биекция тогда
[01:00:37.860 --> 01:00:42.620]  как раз для каждого f от x будет однозначно определено x но его тем не менее трудно найти
[01:00:42.620 --> 01:00:51.260]  вот может быть но есть еще варианты что именно мы потрудно подразумеваем там есть много разных
[01:00:51.260 --> 01:01:08.260]  вариантов вот еще вариант с секретом так но это в общем они могут быть вместе и по отдельности вот
[01:01:08.260 --> 01:01:16.060]  а с секретом означает что если знать секрет то тогда обратить легко да то есть тут получается
[01:01:16.060 --> 01:01:26.380]  вот так вот трудно без секрета а если знать секрет вот тогда легко
[01:01:32.700 --> 01:01:40.820]  вот и вот это вот перестану функции там или перестановка с секретом это то что обязательно
[01:01:40.820 --> 01:01:48.620]  нужно для криптографии с открытым ключом то есть это же можно сформировать как теорема
[01:01:48.620 --> 01:02:06.020]  теорему да что для криптография с открытым ключом нужны односторонние функции с секретом
[01:02:06.020 --> 01:02:13.420]  с кроней функции с секретом
[01:02:20.540 --> 01:02:21.020]  так
[01:02:27.860 --> 01:02:34.180]  вот на самом деле получается как бы несколько несколько градаций несколько
[01:02:34.180 --> 01:02:42.100]  градаций разный гипотез да значит может быть может быть вообще что п равно np
[01:02:42.100 --> 01:02:56.100]  может быть они не равны там но равны в среднем вот может быть есть односторонние функции но
[01:02:56.100 --> 01:03:04.980]  не перестановки могут быть там не перестановки но не с секретом вот и вот для разного рода задач
[01:03:04.980 --> 01:03:18.580]  нужны разные предположения вот так ну дайте еще немножко расскажу какие тут еще бывают примитивы
[01:03:18.580 --> 01:03:27.620]  но бывает примитив который мы немножко в прошлый раз обсуждали значит это генератор
[01:03:27.620 --> 01:03:39.700]  сердца случайных чисел значит идея в том что тут есть я вот так нарисую на есть как бы маленький
[01:03:39.700 --> 01:03:53.580]  вот а есть большой g от x и соответственно вот это легко вычисляется дальше заполинальное
[01:03:53.580 --> 01:04:07.340]  время значит причем и к случайной а еще есть y который тоже случайный и получается что вот
[01:04:07.380 --> 01:04:14.420]  этот g от x он не будет случайно равномерный потому что ну тут всего точек как бы значений
[01:04:14.420 --> 01:04:18.940]  возможных столько же сколько вы видели возможных значений то есть совсем не все которые тут есть а
[01:04:18.940 --> 01:04:26.420]  тут все значит но тем не менее вот это вот да значит если отличитель
[01:04:26.420 --> 01:04:43.980]  отличитель получает g от x и y то отличить он не сможет не не сможет отличить
[01:04:48.940 --> 01:04:57.340]  но смотрите что значит не сможет отличить он получает какой-то вот какой-то элемент
[01:04:57.340 --> 01:05:02.500]  а вот вот это множество вот это одинаковая но у них разные распределения значит здесь
[01:05:02.500 --> 01:05:11.460]  это образ g от x здесь это произвольный y и он получает какое-то значит как какое-то
[01:05:11.460 --> 01:05:17.500]  какое-то слово и должен сказать как он думает это слово вот отсюда пришло или вот отсюда
[01:05:17.660 --> 01:05:27.260]  и нужно чтобы это не не не получилось сколько сколько-нибудь надежно делать да то есть
[01:05:27.260 --> 01:05:33.820]  реально он будет говорить что пришло что пришлось генератора примерно в одном проценте случаев и
[01:05:33.820 --> 01:05:38.820]  когда она на самом деле пришло из генератора когда на самом деле она случайная смотрите ну
[01:05:38.820 --> 01:05:45.500]  например если там у генератора значение генератора всегда первый бит 0 тогда отличитель может
[01:05:45.500 --> 01:05:48.500]  что если 1 бит 0, тогда есть генератор, а если 1 бит 1,
[01:05:48.500 --> 01:05:50.500]  то тогда случайно.
[01:05:50.500 --> 01:05:53.500]  Тогда здесь он будет всегда говорить, да,
[01:05:53.500 --> 01:05:55.500]  здесь будет всегда говорить, что есть генератор,
[01:05:55.500 --> 01:05:57.500]  а здесь только в половине случаев.
[01:05:57.500 --> 01:06:00.500]  Но вот это вот отличение.
[01:06:00.500 --> 01:06:05.500]  Это будет плохой генераторе, если у него всегда 1 бит 0.
[01:06:05.500 --> 01:06:10.500]  Значит, или он может, не знаю там, если
[01:06:10.500 --> 01:06:15.500]  доля, скажем, доля единиц близка к 1 и 2,
[01:06:15.500 --> 01:06:18.500]  говорить, что ее случайная, а если далека, то
[01:06:18.500 --> 01:06:20.500]  говорить, что есть генератор.
[01:06:20.500 --> 01:06:22.500]  Если у генератора не соблюдается частотный закон,
[01:06:22.500 --> 01:06:24.500]  тогда это будет плохой генератор, это отличительство
[01:06:24.500 --> 01:06:27.500]  сможет отличить.
[01:06:27.500 --> 01:06:29.500]  Вот.
[01:06:29.500 --> 01:06:31.500]  Ну и вот, соответственно, нужно, чтобы никакой
[01:06:31.500 --> 01:06:36.500]  отличитель отличить не смог.
[01:06:36.500 --> 01:06:38.500]  Вот так.
[01:06:38.500 --> 01:06:40.500]  Что бывает еще?
[01:06:40.500 --> 01:06:42.500]  Бывает хэш-функция.
[01:06:50.500 --> 01:06:52.500]  Хэш-функция.
[01:06:52.500 --> 01:06:55.500]  Значит, тут как бы ситуация обратная,
[01:06:55.500 --> 01:06:57.500]  с точки зрения размера кружков.
[01:06:57.500 --> 01:07:00.500]  Значит, тут есть какой-то большой х
[01:07:00.500 --> 01:07:03.500]  и какой-то маленький аж от х.
[01:07:04.500 --> 01:07:06.500]  Вот.
[01:07:06.500 --> 01:07:08.500]  Но нужно, чтобы было трудно.
[01:07:08.500 --> 01:07:11.500]  Да, нужно опять, чтобы было легко посчитать.
[01:07:14.500 --> 01:07:17.500]  А трудно найти коллизию.
[01:07:17.500 --> 01:07:22.500]  Значит, трудно найти различные х штрих.
[01:07:26.500 --> 01:07:28.500]  Трудно найти.
[01:07:33.500 --> 01:07:36.500]  Различные х и х штрих.
[01:07:36.500 --> 01:07:39.500]  Значит, такие, что
[01:07:39.500 --> 01:07:42.500]  хэш от х сравняется хэш от х штрих.
[01:07:45.500 --> 01:07:46.500]  Вот.
[01:07:46.500 --> 01:07:48.500]  Ну и хэш-функция как раз очень активно
[01:07:48.500 --> 01:07:50.500]  используется в самых разных областях.
[01:07:50.500 --> 01:07:52.500]  Ну, например,
[01:07:52.500 --> 01:07:55.500]  вот у меня еще осталась картинка с аутентификацией.
[01:07:55.500 --> 01:07:57.500]  Значит, например,
[01:07:57.500 --> 01:07:59.500]  некоторые, опять же, простые системы аутентификации
[01:07:59.500 --> 01:08:01.500]  построены на хэш-функциях.
[01:08:01.500 --> 01:08:04.500]  Что сервер хонит не пароль, а хэш от пароля.
[01:08:04.500 --> 01:08:07.500]  И, соответственно, когда клиент вводит пароль,
[01:08:07.500 --> 01:08:09.500]  то там на лету учисляется хэш и сравнивается
[01:08:09.500 --> 01:08:11.500]  с тем, что хонит на сервере.
[01:08:11.500 --> 01:08:13.500]  Значит, соответственно,
[01:08:13.500 --> 01:08:16.500]  ну вот если вам сайт предлагает
[01:08:16.500 --> 01:08:18.500]  как бы прислать пароль,
[01:08:18.500 --> 01:08:19.500]  который у него хранится,
[01:08:19.500 --> 01:08:21.500]  то это значит нехорошо.
[01:08:21.500 --> 01:08:23.500]  Он хранит в явном виде пароль, и их можно украсть.
[01:08:23.500 --> 01:08:24.500]  Вот.
[01:08:24.500 --> 01:08:27.500]  А если он предлагает только
[01:08:27.500 --> 01:08:29.500]  как бы сбросить пароль,
[01:08:29.500 --> 01:08:31.500]  тогда это уже хороший,
[01:08:31.500 --> 01:08:33.500]  относительно хороший сайт.
[01:08:33.500 --> 01:08:35.500]  По крайней мере, он прямым текстом
[01:08:35.500 --> 01:08:37.500]  пароль не хранит.
[01:08:37.500 --> 01:08:39.500]  Вот.
[01:08:39.500 --> 01:08:41.500]  Да, да, и тот ключевой момент.
[01:08:41.500 --> 01:08:43.500]  Ключевая проблема, а где, собственно, его вычислять?
[01:08:43.500 --> 01:08:45.500]  Значит, если на сервере,
[01:08:45.500 --> 01:08:47.500]  то тогда перехватить можно.
[01:08:47.500 --> 01:08:49.500]  А если на клиенте,
[01:08:49.500 --> 01:08:51.500]  то какая гарантия, что он правильно вычислен?
[01:08:51.500 --> 01:08:53.500]  Вот.
[01:08:53.500 --> 01:08:57.500]  Но это как раз и причина,
[01:08:57.500 --> 01:08:59.500]  в которой это не самый лучший подход.
[01:09:01.500 --> 01:09:03.500]  Вот.
[01:09:09.500 --> 01:09:11.500]  Ну вот.
[01:09:11.500 --> 01:09:15.500]  В общем, это вот ряд примеров.
[01:09:17.500 --> 01:09:19.500]  Дальше, как, в принципе,
[01:09:19.500 --> 01:09:21.500]  об этом все можно рассуждать?
[01:09:21.500 --> 01:09:23.500]  Может быть, несколько уровней.
[01:09:23.500 --> 01:09:25.500]  Может быть, совсем такой
[01:09:25.500 --> 01:09:27.500]  теоретический уровень,
[01:09:27.500 --> 01:09:29.500]  что типа там теорема,
[01:09:31.500 --> 01:09:33.500]  если есть односторонняя функция,
[01:09:35.500 --> 01:09:37.500]  то есть надежный в таком-то смысле
[01:09:37.500 --> 01:09:39.500]  протокол электронной подписи.
[01:09:39.500 --> 01:09:41.500]  Значит, например.
[01:09:43.500 --> 01:09:45.500]  Да, это нам совершенно не важно,
[01:09:45.500 --> 01:09:47.500]  как именно выглядит односторонняя функция.
[01:09:47.500 --> 01:09:49.500]  Вот.
[01:09:49.500 --> 01:09:51.500]  Это такой самый абстрактный уровень,
[01:09:51.500 --> 01:09:53.500]  то есть как, в принципе, что-то можно построить.
[01:09:55.500 --> 01:09:57.500]  Дальше может быть уровень
[01:09:57.500 --> 01:09:59.500]  как бы более конкретный,
[01:09:59.500 --> 01:10:01.500]  который подразумевает
[01:10:01.500 --> 01:10:05.500]  какие-то конкретные области математики,
[01:10:05.500 --> 01:10:07.500]  которые используются при построении
[01:10:07.500 --> 01:10:09.500]  вот этого всего.
[01:10:11.500 --> 01:10:13.500]  То есть, например, могут говорить про
[01:10:13.500 --> 01:10:15.500]  криптографию на основе
[01:10:15.500 --> 01:10:17.500]  модулярной арифметики,
[01:10:17.500 --> 01:10:20.500]  на основе электрических кривых
[01:10:20.500 --> 01:10:22.500]  или на основе теории решеток.
[01:10:22.500 --> 01:10:24.500]  Вот это три основных источника
[01:10:24.500 --> 01:10:27.500]  примитива для криптографии.
[01:10:29.500 --> 01:10:31.500]  Ну и тогда там может быть теория такая,
[01:10:31.500 --> 01:10:33.500]  что, типа, если мы считаем, что
[01:10:33.500 --> 01:10:35.500]  разложение на множители это сложная задача,
[01:10:35.500 --> 01:10:37.500]  то тогда такой-то протокол
[01:10:37.500 --> 01:10:39.500]  будет надежный в таком-то смысле.
[01:10:39.500 --> 01:10:41.500]  Да, то есть это тоже теория,
[01:10:41.500 --> 01:10:43.500]  где доказываются теория,
[01:10:43.500 --> 01:10:45.500]  но уже про конкретные функции,
[01:10:45.500 --> 01:10:47.500]  а не про какие угодно.
[01:10:47.500 --> 01:10:49.500]  Вот.
[01:10:49.500 --> 01:10:51.500]  Ну, значит, дальше могут быть
[01:10:51.500 --> 01:10:53.500]  такие стандарты.
[01:10:54.500 --> 01:10:56.500]  Стандарт может быть прописан,
[01:10:56.500 --> 01:10:58.500]  что мы используем там ключ
[01:10:58.500 --> 01:11:00.500]  такой-то длины
[01:11:00.500 --> 01:11:02.500]  и используем там такую-то
[01:11:02.500 --> 01:11:04.500]  хэш-функцию на основании всего.
[01:11:04.500 --> 01:11:06.500]  Мы там строим такой-то протокол.
[01:11:08.500 --> 01:11:09.500]  Вот.
[01:11:09.500 --> 01:11:11.500]  И самый нижний уровень
[01:11:11.500 --> 01:11:13.500]  это уже реализация стандартов,
[01:11:13.500 --> 01:11:15.500]  то есть как конкретную программу написать,
[01:11:15.500 --> 01:11:17.500]  чтобы она работала.
[01:11:17.500 --> 01:11:19.500]  В общем, на всех
[01:11:19.500 --> 01:11:21.500]  уровнях могут быть
[01:11:21.500 --> 01:11:23.500]  какие-то интересные задачи.
[01:11:24.500 --> 01:11:26.500]  Вот.
[01:11:30.500 --> 01:11:32.500]  Да, что вам неинтересно,
[01:11:32.500 --> 01:11:34.500]  содержательная и нетривиальная.
[01:11:34.500 --> 01:11:36.500]  Нет для всех задач
[01:11:36.500 --> 01:11:38.500]  есть теория на самом верхнем уровне.
[01:11:38.500 --> 01:11:40.500]  То есть некоторые реализованы
[01:11:40.500 --> 01:11:42.500]  только вот
[01:11:42.500 --> 01:11:44.500]  максимум на втором уровне,
[01:11:44.500 --> 01:11:46.500]  когда говорят,
[01:11:46.500 --> 01:11:48.500]  что вот как Дифи Хелман,
[01:11:48.500 --> 01:11:50.500]  что вот
[01:11:50.500 --> 01:11:52.500]  придумали что-то такое,
[01:11:52.500 --> 01:11:54.500]  как обмениваются ключами.
[01:11:54.500 --> 01:11:56.500]  А как на основе произволенностной функции
[01:11:56.500 --> 01:11:58.500]  обмениваться никто не знает.
[01:12:00.500 --> 01:12:02.500]  Вот.
[01:12:02.500 --> 01:12:04.500]  Ну еще у меня спрашивали о литературе.
[01:12:04.500 --> 01:12:06.500]  Значит, что про
[01:12:06.500 --> 01:12:08.500]  все это можно почитать.
[01:12:08.500 --> 01:12:10.500]  Да, ну во-первых,
[01:12:10.500 --> 01:12:12.500]  если кто из вас
[01:12:12.500 --> 01:12:14.500]  пойдет на кафетную дисклетику математики,
[01:12:14.500 --> 01:12:16.500]  то там я читаю целый курс.
[01:12:18.500 --> 01:12:20.500]  В осеннем семестре,
[01:12:20.500 --> 01:12:22.500]  на четвертом курсе
[01:12:22.500 --> 01:12:24.500]  можно будет изучить
[01:12:24.500 --> 01:12:26.500]  подробно.
[01:12:26.500 --> 01:12:28.500]  Вот я там
[01:12:28.500 --> 01:12:30.500]  какие-то тиремы доказываю.
[01:12:30.500 --> 01:12:32.500]  Значит, есть конспект лекций
[01:12:32.500 --> 01:12:34.500]  Верещагина.
[01:12:36.500 --> 01:12:38.500]  Значит, ну, не знаю,
[01:12:38.500 --> 01:12:40.500]  может я просто выложу текущий верс,
[01:12:40.500 --> 01:12:42.500]  потому что он его постоянно обновляет.
[01:12:44.500 --> 01:12:46.500]  Значит, Верещагин.
[01:12:46.500 --> 01:12:48.500]  Вот, но это именно теоретический уровень.
[01:12:48.500 --> 01:12:50.500]  Значит, Верещагин
[01:12:50.500 --> 01:12:52.500]  лекции
[01:12:56.500 --> 01:12:58.500]  по математической
[01:12:58.500 --> 01:13:00.500]  криптографии.
[01:13:02.500 --> 01:13:04.500]  Вот, а так есть много
[01:13:04.500 --> 01:13:06.500]  разных конспектов.
[01:13:06.500 --> 01:13:08.500]  Значит, есть
[01:13:08.500 --> 01:13:10.500]  книга. Книги
[01:13:10.500 --> 01:13:12.500]  тоже очень много. Значит, есть
[01:13:12.500 --> 01:13:14.500]  например, кацелиндл.
[01:13:14.500 --> 01:13:16.500]  Ну, что-то там
[01:13:16.500 --> 01:13:18.500]  криптография. Не помню, как называется.
[01:13:18.500 --> 01:13:20.500]  Значит, есть
[01:13:20.500 --> 01:13:22.500]  Гальдвассер
[01:13:24.500 --> 01:13:26.500]  Гальдвассер Белларе.
[01:13:28.500 --> 01:13:30.500]  Есть двухтомник Галдрайха.
[01:13:34.500 --> 01:13:36.500]  Галдрайх — это вот именно
[01:13:36.500 --> 01:13:38.500]  по теории книга.
[01:13:38.500 --> 01:13:40.500]  Если вам интересны теории, то
[01:13:40.500 --> 01:13:42.500]  вполне можно Верещагина или Галдрайх
[01:13:42.500 --> 01:13:44.500]  почитать.
[01:13:44.500 --> 01:13:46.500]  Вот, Галдрайх так очень
[01:13:46.500 --> 01:13:48.500]  крупулезно обо всем пишет, но немножко занудно.
[01:13:52.500 --> 01:13:54.500]  Вот, есть
[01:13:56.500 --> 01:13:58.500]  Ященко
[01:13:58.500 --> 01:14:00.500]  Валерий Владимирович
[01:14:00.500 --> 01:14:02.500]  с каким-то соавторами.
[01:14:02.500 --> 01:14:04.500]  И там, кстати,
[01:14:04.500 --> 01:14:06.500]  не помню тоже, как называется,
[01:14:06.500 --> 01:14:08.500]  там есть
[01:14:08.500 --> 01:14:10.500]  аннотированный список еще
[01:14:10.500 --> 01:14:12.500]  разных других книжек.
[01:14:12.500 --> 01:14:14.500]  То есть вы можете найти книжку Ященко
[01:14:14.500 --> 01:14:16.500]  и там читать, какие еще бывают книжки.
[01:14:18.500 --> 01:14:20.500]  Ну вот, наверное, хватит
[01:14:20.500 --> 01:14:22.500]  с литературой.
[01:14:24.500 --> 01:14:26.500]  Ну ладно, надеюсь, вам это понравилось.
[01:14:26.500 --> 01:14:28.500]  Я вас это и заинтересовала.
[01:14:28.500 --> 01:14:30.500]  Так что на сегодня все.
[01:14:30.500 --> 01:14:32.500]  Спасибо за внимание.
