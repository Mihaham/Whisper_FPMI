[00:00.000 --> 00:10.000]  В прошлый раз мы с вами занимались тем, что придумывали метод Тарьяна и применяли его для некоторых задач.
[00:10.000 --> 00:15.000]  В частности, в неориентированном графе мы с вами что сумели сделать?
[00:15.000 --> 00:19.000]  Мы сумели найти компоненты реберной вершины двухсвязности,
[00:19.000 --> 00:25.000]  ну а в качестве бесплатного довеска получились мосты точного сочленения.
[00:25.000 --> 00:27.000]  Было дело, да?
[00:27.000 --> 00:34.000]  Все это делалось по какой-то единой стандартной технологии.
[00:34.000 --> 00:42.000]  Сегодня мы попробуем повысить планочку и найти этой же технологией, внимание, компоненты сильной связности.
[00:42.000 --> 00:48.000]  Для начала тут возникает вопрос. Что же такое компонент сильной связности?
[00:48.000 --> 00:51.000]  Казалось бы, тут все легко.
[00:51.000 --> 00:59.000]  Потому что в прошлый раз приходилось с вами что-то страдать, доказывать, что компоненты вершины двухсвязности это оправданное словосочетание.
[00:59.000 --> 01:02.000]  Что это действительно какая-то связность.
[01:02.000 --> 01:04.000]  А в нашем случае что мы видим?
[01:04.000 --> 01:11.000]  В нашем случае мы видим, что определение, внимание, сегодня мы живем в ориентированном графе.
[01:11.000 --> 01:14.000]  И мы много будем сегодня жить в ориентированном графе.
[01:15.000 --> 01:26.000]  В ориентированном графе, то есть вершины у и в, давайте так их назовем, сильно связаны.
[01:34.000 --> 01:40.000]  Хочется написать слово цикл, но мы все-таки напишем, от у до в есть путь.
[01:41.000 --> 01:47.000]  И от в до у есть путь.
[01:51.000 --> 01:53.000]  Аж в одну строчку вместилось.
[01:53.000 --> 01:55.000]  Так, а видно вообще?
[02:06.000 --> 02:08.000]  А, камера вообще не работает.
[02:09.000 --> 02:10.000]  А, окей.
[02:10.000 --> 02:12.000]  Так, так видно вообще?
[02:12.000 --> 02:16.000]  А, или в принципе так очевидно, что там должно быть написано.
[02:16.000 --> 02:18.000]  Ну да.
[02:18.000 --> 02:20.000]  Нет, ну понятно, определение-то известно.
[02:20.000 --> 02:28.000]  Но самое приятное в нем, что то, что это отношение эквивалентности, в данном случае абсолютно очевидно.
[02:28.000 --> 02:32.000]  Потому что в данном случае у нас нет никаких непересекающихся...
[02:32.000 --> 02:41.000]  Потому что в данном случае у нас нет никаких ограничений на то, пересекаются ли эти пути вообще по вершинам, по ребрам, как угодно.
[02:41.000 --> 02:47.000]  То есть в принципе да, могут они спокойно по ребрам пересекаться, это не принципиально.
[02:48.000 --> 02:55.000]  То есть там в принципе можно даже привозить какой-нибудь пример в духе вот такого.
[02:56.000 --> 02:57.000]  Вот.
[02:58.000 --> 03:07.000]  То есть здесь мы заметим, что тут вы между У и В даже не выберете два ребер, даже ребер, не пересекающихся пути.
[03:09.000 --> 03:10.000]  Ну вот.
[03:10.000 --> 03:11.000]  Нет, ну почему жаль.
[03:11.000 --> 03:14.000]  То есть как бы это нехорошо и неплохо, это просто такая особенность.
[03:16.000 --> 03:17.000]  Вот.
[03:17.000 --> 03:19.000]  Да, казалось бы, да, уже хорошо.
[03:20.000 --> 03:24.000]  Ну собственно теперь хочется искать компоненты сильной связности.
[03:26.000 --> 03:27.000]  Но как же их искать теперь?
[03:29.000 --> 03:35.000]  Ну давайте вспоминать, что у нас говорит наша стандартная технология.
[03:38.000 --> 03:40.000]  Стандартная технология говорит следующее.
[03:40.000 --> 03:42.000]  Мы запускаем ДФС.
[03:43.000 --> 03:44.000]  Мы запускаем ДФС.
[03:44.000 --> 03:45.000]  Мы запускаем ДФС.
[03:47.000 --> 03:50.000]  У нас образуется дерево ДФС.
[03:53.000 --> 03:54.000]  Вот.
[03:54.000 --> 04:00.000]  Некоторые вершины становятся, скажем, первыми в своей компоненте.
[04:02.000 --> 04:03.000]  Некоторые не становятся.
[04:04.000 --> 04:08.000]  И вот эти первые мы объявляем корнями под деревья в своих компонентах.
[04:08.000 --> 04:16.000]  То есть скажем, если вот компоненты, то есть такими вот первыми оказались вот эта вершина, вот это допустим, вот это, ну и конечно вот это, куда же без нее.
[04:17.000 --> 04:18.000]  Тут всякое может быть.
[04:18.000 --> 04:20.000]  Давайте вот я тут еще чуть-чуть порисую.
[04:21.000 --> 04:22.000]  Вот.
[04:22.000 --> 04:23.000]  То тогда...
[04:24.000 --> 04:26.000]  Ну давайте еще допустим вот так вот сделаем.
[04:27.000 --> 04:37.000]  То тогда мы автоматически заявляем, что то есть компонентами у нас является вот эта, скажем, вот эта штука, вот эта штука, вот эта штука.
[04:38.000 --> 04:42.000]  Вот эта штука, вот эта штука, ну и конечно вот это вот.
[04:44.000 --> 04:45.000]  Вот так вот.
[04:46.000 --> 04:47.000]  Вот.
[04:47.000 --> 04:48.000]  Помните технологию, да?
[04:50.000 --> 04:53.000]  Ну правда для того, чтобы ее применить, остается только две вещи.
[04:54.000 --> 04:55.000]  Вещь номер раз.
[04:56.000 --> 05:07.000]  А верно ли, что действительно внутри компоненты сильной связности будет действительно вот какой-то корень, и все остальные вершины будут именно напрямую на нем висеть?
[05:09.000 --> 05:10.000]  Вот.
[05:11.000 --> 05:14.000]  Но на самом деле достаточно легко показать, что да, это так.
[05:15.000 --> 05:18.000]  Ну потому что действительно рассмотрим компонент усильной связности.
[05:19.000 --> 05:20.000]  Жил-был ДФС.
[05:22.000 --> 05:23.000]  Вот.
[05:23.000 --> 05:24.000]  Ну правда да.
[05:25.000 --> 05:33.000]  На самом деле надо было сделать маленькую оговорочку, что в ориентированном графе почти наверное мы не будем говорить о дереве ДФС, а будем говорить о чем.
[05:36.000 --> 05:37.000]  Как вы думаете?
[05:38.000 --> 05:39.000]  Не ориентированно.
[05:40.000 --> 05:43.000]  Ну и направление цикличество.
[05:44.000 --> 05:46.000]  Не, не, не, не, не в этом смысле.
[05:47.000 --> 05:49.000]  Ну я имею в виду мы будем говорить о лесе ДФС.
[05:51.000 --> 05:58.000]  Ну просто если раньше мы могли предполагать, что у нас есть компоненты связности и в каждом меже мы абсолютно независимы, здесь мы такого предполагать не можем.
[05:59.000 --> 06:07.000]  Тут к сожалению все будет, то есть тут это будет лес, причем сколько в нем будет деревьев, будет даже зависеть от того, в каком порядке мы запускаем ДФС.
[06:08.000 --> 06:17.000]  Потому что может быть так, что действительно мы тут запустили ДФС, а потом мы запустили ДФС от этой вершины и получилось вот, ну это не совсем то.
[06:18.000 --> 06:23.000]  То есть получилось вот как-то так, а если бы ДФС запустили из этой вершины, мы бы обошли все и было бы одно дерево.
[06:24.000 --> 06:25.000]  Что?
[06:26.000 --> 06:27.000]  А, ну тем более, да, спасибо.
[06:28.000 --> 06:29.000]  Вот.
[06:30.000 --> 06:32.000]  А, ну да, такие ребра мы рисуем зеленым, да.
[06:33.000 --> 06:37.000]  Ну как повезет, сейчас оно зеленое, а если бы запускали ДФС, оно было бы черным.
[06:38.000 --> 06:39.000]  Вот.
[06:40.000 --> 06:53.000]  Но, тем не менее, если ДФС зашел в какую-то компоненту сильной связности, вот эта вот первая вершина, то я ответу, то очевидно, что в поддеревье этой вершины будут все эти вершины.
[06:54.000 --> 06:56.000]  Ну просто по лиме белых путях, правда?
[06:57.000 --> 06:58.000]  Вот.
[06:59.000 --> 07:00.000]  Но, но, но.
[07:01.000 --> 07:11.000]  Но если только возникает вопрос, они будут идти подряд или может так произойти, что там будет какой-то, в поддеревье там мы в какой-то момент выйдем, а потом войдем обратно?
[07:13.000 --> 07:15.000]  Ну нет, потому что эти вершины тоже лежат в компенсильной связности.
[07:16.000 --> 07:17.000]  Совершенно верно, да.
[07:18.000 --> 07:24.000]  То есть действительно, так как от этой вершины можно дойти до этой по определению компенсильной связности, то и эти, получается, тоже мы вынуждены будем к ней прицеплять.
[07:24.000 --> 07:25.000]  Да, совершенно верно.
[07:32.000 --> 07:33.000]  Такое может быть, конечно.
[07:34.000 --> 07:41.000]  Но имейте в виду, что если вы идете из вершины в поддерево и вышли из ее компоненты сильной связности, то вы там дальше просто в нее не вернетесь.
[07:42.000 --> 07:43.000]  Да.
[07:44.000 --> 07:45.000]  Да, конечно же такое быть может, безусловно, да.
[07:46.000 --> 07:55.000]  Ну просто тогда это будет означать, что это тоже будет первая вершина в своей компоненте, и мы там тоже ее будем аккуратно нашей технологией поддерживать.
[07:56.000 --> 07:58.000]  Итак, внимание, вопрос теперь.
[07:59.000 --> 08:01.000]  То есть теперь для нас самое интересное.
[08:02.000 --> 08:04.000]  А как же находить?
[08:05.000 --> 08:13.000]  То есть нам теперь нужно просто для каждой вершины уметь говорить, она является первой в своей компоненте сильной связности или нет?
[08:15.000 --> 08:17.000]  Вот такая вот задачка.
[08:18.000 --> 08:21.000]  Вот является ли она первой в своей компоненте?
[08:24.000 --> 08:25.000]  Как же это понять?
[08:27.000 --> 08:31.000]  Ну, казалось бы, для этого у нас есть технология тоже.
[08:32.000 --> 08:33.000]  Что нам технология говорит?
[08:34.000 --> 08:39.000]  Технология говорит, что мы вводим такое понятие как uptime.
[08:39.000 --> 08:41.000]  А вот теперь давайте с вами.
[08:42.000 --> 08:45.000]  Так вот, жалко у нас рыжего маркера нет, но есть красный.
[08:47.000 --> 08:49.000]  Ну вот, значит, поэтому внимание.
[08:50.000 --> 08:51.000]  Что такое uptime?
[08:52.000 --> 08:54.000]  Да нет, не путать.
[08:55.000 --> 08:56.000]  Нет, uptime.
[08:57.000 --> 09:01.000]  Да, у нас, конечно же, обязательно есть такая штука как time.
[09:02.000 --> 09:04.000]  Да, это время входа.
[09:05.000 --> 09:07.000]  Ну, теоретически есть timeout, но нам он не нужен.
[09:07.000 --> 09:09.000]  Теперь давайте внимательно.
[09:10.000 --> 09:19.000]  Определение uptime давайте даже запишем, потому что нам это придется внимательно думать.
[09:20.000 --> 09:21.000]  Что такое uptime от В?
[09:34.000 --> 09:35.000]  Что такое попасть?
[09:35.000 --> 09:36.000]  Что такое попасть?
[09:40.000 --> 09:41.000]  Так, да.
[09:42.000 --> 09:44.000]  То есть минимальный таймин такой вершины.
[09:46.000 --> 09:47.000]  Ну, в начале так.
[09:48.000 --> 09:49.000]  Ну, у нас было так.
[09:50.000 --> 09:59.000]  Таймин от W такое, что UW это обратное ребро.
[10:02.000 --> 10:03.000]  Сейчас напишу.
[10:06.000 --> 10:11.000]  Вот, а у лежит, да.
[10:12.000 --> 10:16.000]  Или можно еще написать так, чтобы еще короче было UW, да.
[10:17.000 --> 10:18.000]  Вот.
[10:19.000 --> 10:20.000]  Такая вот красота.
[10:32.000 --> 10:33.000]  Ну, вот такой uptime.
[10:35.000 --> 10:38.000]  То есть мы действительно можем такое uptime насчитать без труда.
[10:39.000 --> 10:40.000]  Остается только внимание вопроса.
[10:41.000 --> 10:43.000]  Как с помощью uptime понять, какая вершина первая?
[10:48.000 --> 10:49.000]  Вот как это понять.
[10:53.000 --> 11:00.000]  Ну, если есть больше наверх, то uptime от W меньше, чем time от W.
[11:01.000 --> 11:02.000]  Ну, да.
[11:03.000 --> 11:04.000]  Действительно.
[11:05.000 --> 11:06.000]  Да, совершенно верно.
[11:07.000 --> 11:11.000]  То есть если у нас действительно uptime от W меньше, чем таймы на W, собственно,
[11:12.000 --> 11:15.000]  то это означало, что тут мы можем спуститься от вершины W до какой-то вершины U
[11:16.000 --> 11:17.000]  и пойти куда-то выше.
[11:18.000 --> 11:19.000]  Вот.
[11:20.000 --> 11:21.000]  А это означает, что вершина эта точно не первая,
[11:22.000 --> 11:25.000]  потому что вот вместе с ней в ее компонентной связности лежит и вот это вот все.
[11:26.000 --> 11:27.000]  Ну, и вот это вот все.
[11:28.000 --> 11:29.000]  Да.
[11:30.000 --> 11:31.000]  Поэтому очень, конечно...
[11:32.000 --> 11:33.000]  Ну, вот поэтому...
[11:36.000 --> 11:37.000]  Ну, вот перенот.
[11:38.000 --> 11:39.000]  Поэтому, да.
[11:40.000 --> 11:41.000]  То есть мы описываем технологию.
[11:42.000 --> 11:52.000]  И технология говорит, что мы говорим, что вершина W первая в своей компоненте сильной связности, так сказать.
[11:52.000 --> 12:04.000]  Ну, вот тогда и только тогда, когда time in от W оказался строго, строго больше.
[12:05.000 --> 12:06.000]  Такие наоборот.
[12:07.000 --> 12:08.000]  Ну, строго больше.
[12:09.000 --> 12:10.000]  Нет, наоборот, наоборот, наоборот.
[12:11.000 --> 12:12.000]  Чтобы она была первая...
[12:13.000 --> 12:19.000]  Чтобы она первая, оказалось, что таймы от W должны оказаться меньше либо равен uptime.
[12:20.000 --> 12:21.000]  Вот так.
[12:22.000 --> 12:23.000]  Может быть, наоборот было написать.
[12:24.000 --> 12:26.000]  Так что uptime больше либо равен.
[12:29.000 --> 12:30.000]  Вот.
[12:31.000 --> 12:37.000]  А если uptime строго больше, то разве у нас будет компонента сильной связности?
[12:38.000 --> 12:39.000]  А чего бы нет?
[12:40.000 --> 12:41.000]  Ну, она-то точно лежит в своей компонентной связи.
[12:42.000 --> 12:43.000]  Ну, самое главное, что она первая в своей компоненте.
[12:44.000 --> 12:48.000]  Нет, понятно, что у нас рассчитано то, что да, она первая в своей компоненте,
[12:48.000 --> 12:51.000]  но понятно, что в ее под дереве тоже могут быть вершины с таким свойством,
[12:52.000 --> 12:54.000]  и они... и просто это будет означать, что у нас есть компоненты,
[12:55.000 --> 12:56.000]  которые висят другие компоненты.
[12:57.000 --> 13:03.000]  Вот. То есть после этого мы там достаем эту нашу технологию с этим стеком, этим всем достаем и так далее.
[13:04.000 --> 13:05.000]  Вот у нас даже нарисовки были.
[13:06.000 --> 13:07.000]  Чего?
[13:08.000 --> 13:09.000]  У нас вот...
[13:10.000 --> 13:11.000]  Ну да, вот совершенно верно.
[13:12.000 --> 13:13.000]  Да, да, да.
[13:14.000 --> 13:15.000]  В этом вот идея.
[13:15.000 --> 13:21.000]  Но кто-то из вас, наверное, уже увидел, что конкретно в данном случае эта технология может дать немножко маху.
[13:24.000 --> 13:25.000]  Да?
[13:26.000 --> 13:27.000]  Да.
[13:28.000 --> 13:30.000]  Да, потому что причина фундаментальна.
[13:31.000 --> 13:34.000]  Где... чем отличается ориентированный граф от неориентированного?
[13:35.000 --> 13:38.000]  Потому что в неориентированном графе у нас действительно кроме...
[13:39.000 --> 13:41.000]  О, господи, на весь коридор это все кричу, да?
[13:42.000 --> 13:43.000]  Так.
[13:43.000 --> 13:44.000]  Так.
[13:45.000 --> 13:46.000]  А то прям эхо.
[13:48.000 --> 13:49.000]  Вот.
[13:50.000 --> 13:52.000]  Это обратное ребро.
[13:53.000 --> 13:59.000]  Просто кроме ребер дерева DFS и обратных ребер, помним, что в неориентированном графе, а других, собственно, и нет.
[14:00.000 --> 14:02.000]  А вот в ориентированном графе есть.
[14:03.000 --> 14:06.000]  Потому что в ориентированном графе есть перекрестные ребра.
[14:08.000 --> 14:09.000]  Вот.
[14:10.000 --> 14:11.000]  То есть действительно...
[14:11.000 --> 14:12.000]  Ну вот.
[14:13.000 --> 14:14.000]  Но к чему это нас приводит?
[14:15.000 --> 14:16.000]  А приводит нас вот к чему.
[14:17.000 --> 14:22.000]  С одной стороны, если вершина V первая в своей компоненте, то действительно uptime больше либо равен таймына.
[14:23.000 --> 14:26.000]  Но мы уже доказали, что если uptime меньше таймына, то V точно не первая, да?
[14:27.000 --> 14:29.000]  То есть в одну сторону это будет верно.
[14:30.000 --> 14:31.000]  Вот.
[14:32.000 --> 14:36.000]  То есть, соответственно, если она первая, то сработает.
[14:37.000 --> 14:39.000]  То есть как бы все первые вершины мы идентифицируем.
[14:39.000 --> 14:44.000]  Но может так получиться, что мы помимо них идентифицируем еще кого-то.
[14:45.000 --> 14:46.000]  Будут ложные срабатывания.
[14:47.000 --> 14:49.000]  Как это может быть?
[14:50.000 --> 14:51.000]  Да, очень просто.
[14:52.000 --> 14:53.000]  Компонента...
[14:54.000 --> 14:55.000]  Вот просто можно нарисовать такой пример.
[14:56.000 --> 15:00.000]  Вот, допустим, у нас компонента устроена так.
[15:01.000 --> 15:03.000]  Вот такие у нас перекрестные ребра, допустим, есть?
[15:04.000 --> 15:05.000]  Или даже вот такие?
[15:05.000 --> 15:06.000]  Или даже вот такие?
[15:07.000 --> 15:10.000]  И вот такая добивочка.
[15:16.000 --> 15:25.000]  Тогда мы заметим, то есть я утверждаю, что так как у нас тут в определении прописано обратное ребро, да?
[15:26.000 --> 15:27.000]  Видите, да?
[15:28.000 --> 15:30.000]  Обратное ребро, обратное ребро.
[15:31.000 --> 15:32.000]  Вот.
[15:33.000 --> 15:37.000]  То получается, что у этой вершины оптайм будет равен чему?
[15:54.000 --> 15:56.000]  По такому определению плюс бесконечность.
[15:56.000 --> 15:57.000]  Плюс бесконечность.
[15:58.000 --> 16:02.000]  Ну да, по тому, как это обычно пишут на Олимпиадах, конечно, оно оптайм будет равен таймы, но да.
[16:04.000 --> 16:07.000]  Но по нашему определению это плюс бесконечность.
[16:09.000 --> 16:14.000]  Да, просто потому, что из-под дерева этой вершины не торчит обратных ребер от слова вообще.
[16:15.000 --> 16:23.000]  Но как выясняется, если раньше у нас доказательство базировалось на том, что выйти из-под дерева вы сможете только по обратному ребру, то здесь это неверно.
[16:23.000 --> 16:26.000]  Вот здесь это неверно, потому что можно из-под дерева выйти еще по перекрестному ребру.
[16:28.000 --> 16:29.000]  Так, что делать?
[16:34.000 --> 16:35.000]  БФС.
[16:42.000 --> 16:44.000]  Ну да, только там все еще хуже будет.
[16:45.000 --> 16:52.000]  У нас хоть это все перекрестные ребра влево хотя бы ведут, а там они будут и влево, и вправо, и туда, и сюда.
[16:54.000 --> 16:59.000]  И можно кначитать суммцы, которые показывают, насколько вверх можно подняться.
[17:02.000 --> 17:04.000]  Осталось только это понять.
[17:05.000 --> 17:06.000]  Если можно свою идею продолжить.
[17:07.000 --> 17:08.000]  Чего можно продолжить?
[17:08.000 --> 17:13.000]  Короче, устроим дерево ДФС, в нем запускаем БФС из корни.
[17:14.000 --> 17:23.000]  БФС из корни нам дает послойное прохождение дерева, и мы для каждого слоя выше знаем уже посчитанный аптайм.
[17:24.000 --> 17:26.000]  Ну БФС лучше давайте сразу его откинем.
[17:27.000 --> 17:36.000]  Например, по той причине, что если в ДФС у нас хотя бы один корень в каждой компоненте, то в БФС мы как раз можем с десяти сторон зайти в одну и ту же компоненту.
[17:38.000 --> 17:40.000]  Так что давайте лучше без этого.
[17:41.000 --> 17:46.000]  Нет, на самом деле хочется вот действительно все-таки тут вот где-то вот, где-то вот и стены рядом как-то.
[17:47.000 --> 17:48.000]  Ну то есть как ее можно допилить?
[17:49.000 --> 17:56.000]  Ну ладно, если так обратно нельзя, ну хорошо, давайте напишем обратные или перекрестные.
[18:00.000 --> 18:01.000]  Ну давайте думать.
[18:01.000 --> 18:02.000]  Давайте думать.
[18:05.000 --> 18:06.000]  А вдруг нет.
[18:07.000 --> 18:11.000]  Как говорится, мы же программисты, мы можем потестить разные варианты.
[18:12.000 --> 18:13.000]  Вот.
[18:16.000 --> 18:17.000]  Ну нет, ну почему?
[18:18.000 --> 18:20.000]  Нет, ну статью пишут, когда все-таки есть строгое доказательство.
[18:22.000 --> 18:25.000]  Но я в данном случае бы математик.
[18:25.000 --> 18:29.000]  К сожалению, да, по программированию кто-то, как мы уже говорили, угнал.
[18:30.000 --> 18:31.000]  Почему-то.
[18:31.000 --> 18:32.000]  Нет, ну почему-почему?
[18:32.000 --> 18:33.000]  Ну что не произносит?
[18:33.000 --> 18:34.000]  В прошлый раз у вас было две лекции.
[18:36.000 --> 18:37.000]  Чего?
[18:38.000 --> 18:39.000]  Почему?
[18:39.000 --> 18:40.000]  Да потому что у нас может...
[18:41.000 --> 18:46.000]  Потому что нам важно то, что можно снизить не тот перекрестный мировой, а что потом оттуда можно добраться вверх.
[18:47.000 --> 18:49.000]  Да, причем, причем имя да-да, что важно до предка.
[18:49.000 --> 18:52.000]  А именно так, тайминг, именно вот вершины, именно сам перекрестный, не важно.
[18:53.000 --> 18:58.000]  То есть нам по сути нужен какой-то путь из нескольких перекрестных прямых и одного наверх.
[18:59.000 --> 19:00.000]  Ну это-то нет, ага.
[19:01.000 --> 19:03.000]  И в чем куда-то, чтоб гарантировано наверх.
[19:04.000 --> 19:07.000]  Потому что, да, основная подлость, конечно, в этом случае это вот такое ребро.
[19:08.000 --> 19:13.000]  Нет, ну то есть теперь мы можем заметить теперь следующее, что ложных срабатываний теперь не будет.
[19:13.000 --> 19:15.000]  Да, то есть теперь будет ситуация наоборот.
[19:16.000 --> 19:18.000]  Да, что вот эти все вершины точно не сработают, да.
[19:19.000 --> 19:25.000]  А вот, например, ну, просто если мы перекрестили игру, то вот у той вершинки слева тайминг меньше, чем у нашей.
[19:26.000 --> 19:27.000]  Да, вот именно, да.
[19:28.000 --> 19:29.000]  Это вообще вообще ужасно получается.
[19:30.000 --> 19:36.000]  Ну да, не ужасно, нет, просто как бы ложных срабатываний нет, но как бы, как говорится, и некоторые истинные зависятся.
[19:37.000 --> 19:43.000]  Ну да, не ужасно, нет, просто как бы ложных срабатываний нет, но как бы, как говорится, и некоторые истины зависают.
[19:44.000 --> 19:46.000]  Да, действительно такая проблема, ну вот.
[19:47.000 --> 19:49.000]  То есть действительно такая проблема у нас действительно есть.
[19:52.000 --> 19:54.000]  Правда возникает один такой маленький чит.
[19:55.000 --> 20:06.000]  Дело в том, что если бы так запускали DFS по этой логике, мы заметим, что эта компонента, она бы уже была идентифицирована и записана, правда?
[20:09.000 --> 20:10.000]  Вот.
[20:11.000 --> 20:16.000]  Но это означает, что мы бы уже по-любому сказали, что эта вершина первая, да.
[20:19.000 --> 20:20.000]  Ну и стержа.
[20:20.000 --> 20:21.000]  Ну и стержа.
[20:24.000 --> 20:25.000]  Вот.
[20:26.000 --> 20:30.000]  Это вершина первая, поэтому все на ней висящее мы бы идентифицировали как компоненту сильной связности.
[20:32.000 --> 20:33.000]  Вот.
[20:35.000 --> 20:41.000]  Ну вот, то есть, ну в принципе идентифицировали, что да, что у нас есть под дерево, и из него вы никуда не выйдете уж точно.
[20:43.000 --> 20:49.000]  Поэтому мы понимаем, что это компоненты сильной связности.
[20:50.000 --> 20:54.000]  Ну или, по крайней мере, набор компонентов сильной связности, конечно, слету не будем сейчас утверждать.
[20:55.000 --> 20:57.000]  Нет, хотя нет, ложных срабатываний у нас нету, напоминаю, да.
[20:58.000 --> 20:59.000]  Вот.
[21:00.000 --> 21:01.000]  А хотя, да, тут могли бы пропасть какие-то истинные.
[21:02.000 --> 21:15.000]  Но, по крайней мере, тем не менее, мы знаем следующее, что, по крайней мере, вот эта вот штука это какой-то набор компонентов сильной связности, но мы ничего к нему уже не присоединим, потому что оттуда нельзя выйти.
[21:18.000 --> 21:19.000]  Вот.
[21:20.000 --> 21:25.000]  И в результате, ну вот, и в результате оказывается тут весьма неожиданный чит.
[21:26.000 --> 21:29.000]  В DFS-е вводим четвертый цвет.
[21:32.000 --> 21:38.000]  То есть у нас в DFS-е теперь белый, серый, черный и фиолетовый.
[21:40.000 --> 21:42.000]  Вопрос к Тарьяну, почему фиолетовый.
[21:43.000 --> 21:46.000]  Ну вот, но почему-то фиолетовый.
[21:47.000 --> 21:52.000]  То есть технология в итоге предлагает следующее.
[21:53.000 --> 21:57.000]  То есть мы, ну понятно, белый цвет, когда в DFS не вошел в вершину.
[21:58.000 --> 22:01.000]  Серый цвет, когда он в него вошел, но еще не вышел.
[22:02.000 --> 22:04.000]  Черный, когда он вышел.
[22:05.000 --> 22:09.000]  И фиолетовый, когда вершина оказалась в своей компоненте сильной связности.
[22:10.000 --> 22:11.000]  Ну вот.
[22:12.000 --> 22:13.000]  Значит, смотрите.
[22:14.000 --> 22:19.000]  Потому что у нас код теперь будет выглядеть примерно следующим образом.
[22:21.000 --> 22:26.000]  Ну я сейчас не буду прописывать там все эти массивы типа таймы, наптаймы, прочие стэки с компонентами.
[22:28.000 --> 22:29.000]  То есть я напишу так.
[22:30.000 --> 22:33.000]  То есть вы делали void, значит DFS, как всегда.
[22:34.000 --> 22:35.000]  На этот раз int v.
[22:35.000 --> 22:36.000]  На этот раз int v.
[22:37.000 --> 22:43.000]  То есть на этот раз мне абсолютно незачем писать, по какому ребру я пришел, потому что обратно по нему я не пройду.
[22:44.000 --> 22:45.000]  Вот.
[22:46.000 --> 22:47.000]  Значит, поехали.
[22:48.000 --> 22:50.000]  Так, как у нас этот массив юзет назывался с цветами?
[22:51.000 --> 22:52.000]  House?
[22:53.000 --> 22:54.000]  Логично, да.
[22:55.000 --> 22:56.000]  Как называется массив с цветами?
[22:57.000 --> 22:58.000]  Наверное, цвета, да.
[22:59.000 --> 23:00.000]  Так, да, так и пишем.
[23:00.000 --> 23:03.000]  Е, DFS, gray.
[23:05.000 --> 23:06.000]  Вот такая красота была.
[23:09.000 --> 23:10.000]  Так.
[23:11.000 --> 23:12.000]  Что мы там еще делали?
[23:13.000 --> 23:15.000]  А, ну конечно, всякие эти таймы мы делали, да.
[23:17.000 --> 23:18.000]  Таймы на v.
[23:19.000 --> 23:22.000]  Там равно, как всегда, current time++.
[23:26.000 --> 23:27.000]  Так, что там у нас еще было?
[23:27.000 --> 23:32.000]  Uptime от v равно плюс бесконечность.
[23:34.000 --> 23:37.000]  И, конечно же, запихнуть вершину в stack.
[23:46.000 --> 23:47.000]  Вот такая красота.
[23:50.000 --> 23:51.000]  Так, ничего не забыл.
[23:52.000 --> 23:55.000]  Ну ладно, давайте оставим тут пару строчек, может что-то и забыл.
[23:55.000 --> 23:56.000]  А дальше начинается самое интересное.
[23:57.000 --> 24:03.000]  For int nv, там, соответственно, граф от v перебираем.
[24:08.000 --> 24:10.000]  Так, и вот тут начиналось, ну вот.
[24:11.000 --> 24:12.000]  И тут начиналось самое интересное.
[24:13.000 --> 24:15.000]  Значит, смотрите, как это будет работать.
[24:16.000 --> 24:17.000]  Ну, во-первых, так.
[24:17.000 --> 24:26.000]  Если оказывалось, что colors от nv равно E, DFS, white.
[24:29.000 --> 24:32.000]  То есть это означает, что это какое ребро?
[24:35.000 --> 24:36.000]  Да.
[24:37.000 --> 24:42.000]  То есть это vnv, ребро, white.
[24:42.000 --> 24:48.000]  Да, то есть это vnv, ребро, vdfs.
[24:51.000 --> 24:52.000]  И что мы в этом случае делаем?
[24:54.000 --> 24:55.000]  В этом случае мы...
[24:58.000 --> 25:02.000]  Ну да, ну в этом случае мы просто запускаем DFS от вершины nv.
[25:04.000 --> 25:06.000]  И, конечно же, не забываем обновить uptime.
[25:07.000 --> 25:13.000]  uptime от nv, min равно...
[25:16.000 --> 25:18.000]  Вот, как хорошо писать на доске.
[25:19.000 --> 25:21.000]  А, наоборот, да-да-да.
[25:22.000 --> 25:24.000]  Да, uptime от nv.
[25:29.000 --> 25:31.000]  Так, ну вроде кайф.
[25:31.000 --> 25:32.000]  Так.
[25:35.000 --> 25:36.000]  Ну что еще бывает?
[25:39.000 --> 25:41.000]  Значит, если...
[25:42.000 --> 25:43.000]  Ну вот.
[25:44.000 --> 25:46.000]  Значит, если оказалось, что это ребро обратное,
[25:49.000 --> 25:57.000]  colors от nv, E, DFS, grey.
[26:01.000 --> 26:05.000]  То есть, так сказать, vnv обратное.
[26:10.000 --> 26:11.000]  То что мы тогда делаем?
[26:15.000 --> 26:17.000]  Ну да, так и пишем.
[26:18.000 --> 26:23.000]  uptime от v, min равно...
[26:26.000 --> 26:29.000]  Правда, на этот раз не uptime от nv, а time in.
[26:31.000 --> 26:32.000]  Все-таки.
[26:36.000 --> 26:37.000]  Вот.
[26:39.000 --> 26:41.000]  Так, что же дальше?
[26:43.000 --> 26:44.000]  Чего?
[26:45.000 --> 26:48.000]  Ну, пока у нас такое определение.
[26:49.000 --> 26:51.000]  Пока у нас определение.
[26:52.000 --> 26:54.000]  То есть потом мы код, может быть, чуть-чуть поправим.
[26:55.000 --> 26:57.000]  Пользуясь тем, что у нас доска.
[26:57.000 --> 26:58.000]  Доска.
[26:59.000 --> 27:00.000]  Далее.
[27:01.000 --> 27:03.000]  Ну что, какие у нас еще ребры бывают?
[27:08.000 --> 27:09.000]  Чего-чего-чего?
[27:12.000 --> 27:13.000]  Ну черт, да.
[27:14.000 --> 27:15.000]  Может быть чертая.
[27:16.000 --> 27:19.000]  Но тут я просто думаю, каким цветом мне это писать?
[27:21.000 --> 27:22.000]  Потому что...
[27:23.000 --> 27:24.000]  Да, действительно, хорошо.
[27:24.000 --> 27:27.000]  Оставшийся вариант, это если мы ведем...
[27:28.000 --> 27:29.000]  Если у нас черная.
[27:30.000 --> 27:31.000]  Пока мы фиолетовую не ввели.
[27:32.000 --> 27:33.000]  Ну вот.
[27:34.000 --> 27:36.000]  Но на самом деле, не обязательно зеленый.
[27:37.000 --> 27:39.000]  На самом деле, если мы видим черную вершину,
[27:40.000 --> 27:42.000]  ребро может оказаться как перекрестным, так и прямым.
[27:45.000 --> 27:46.000]  Вот.
[27:49.000 --> 27:51.000]  Прямое, которое соединяет предка с потомком.
[27:51.000 --> 27:55.000]  То есть вот какое-то вот такое.
[27:58.000 --> 27:59.000]  Вот.
[28:00.000 --> 28:02.000]  Но по умолчанию оно, конечно, перекрестное.
[28:03.000 --> 28:05.000]  Но впрочем, нам на самом деле, сейчас по барабану,
[28:06.000 --> 28:07.000]  потому что, действительно, мы можем...
[28:08.000 --> 28:10.000]  Потому что изначально мы хотели бы сказать, что...
[28:11.000 --> 28:12.000]  Казалось бы, да.
[28:13.000 --> 28:16.000]  В противном случае, просто пишем...
[28:16.000 --> 28:20.000]  Оптайм тоже от В.
[28:21.000 --> 28:24.000]  Мин равно таймин.
[28:27.000 --> 28:28.000]  От НВ.
[28:29.000 --> 28:30.000]  Тоже хотелось бы сказать.
[28:31.000 --> 28:36.000]  Но тут комментарии пишем, что ВНВ это перекрестное...
[28:43.000 --> 28:44.000]  Или прямое.
[28:46.000 --> 28:50.000]  Но, да, можно было бы даже в явном виде идентифицировать,
[28:51.000 --> 28:52.000]  отличить одно от другого.
[28:53.000 --> 28:55.000]  Но нам нет смысла это делать,
[28:56.000 --> 28:58.000]  потому что таймы на ТНВ, по-любому, будет больше,
[28:59.000 --> 29:00.000]  чем таймы на ТВ, правда?
[29:01.000 --> 29:02.000]  Если это ребро прямое.
[29:03.000 --> 29:05.000]  Поэтому можно было бы не расписывать.
[29:06.000 --> 29:07.000]  Вот, казалось бы, так.
[29:09.000 --> 29:10.000]  Вот.
[29:11.000 --> 29:12.000]  Ну и, наверное, вот.
[29:13.000 --> 29:14.000]  То есть эта исходная технология бы так это и говорила.
[29:14.000 --> 29:18.000]  То есть после этого мы, соответственно, торжественно заявляем, что...
[29:19.000 --> 29:20.000]  Ну вот.
[29:21.000 --> 29:22.000]  Значит, теперь что дальше?
[29:23.000 --> 29:24.000]  Значит, так вот у нас фор закончился.
[29:25.000 --> 29:28.000]  Даже мы хотим все-таки в начале оптайма ТВ делать таймином от В.
[29:29.000 --> 29:30.000]  Да не, не обязательно.
[29:31.000 --> 29:33.000]  Ну можно, но без разницы.
[29:34.000 --> 29:35.000]  На самом деле.
[29:36.000 --> 29:37.000]  То есть, конечно...
[29:38.000 --> 29:39.000]  То есть, конечно, так.
[29:40.000 --> 29:41.000]  Ладно, если оптайм так дописывать,
[29:41.000 --> 29:46.000]  то, конечно, стоит тут, конечно, все-таки какой-нибудь ifчик вставить.
[29:47.000 --> 29:51.000]  То есть, скажем, if там вот так написать.
[29:52.000 --> 29:55.000]  То есть, if таймин от НВ
[29:57.000 --> 30:01.000]  там действительно оказался меньше, чем таймин от В.
[30:04.000 --> 30:05.000]  Вот.
[30:06.000 --> 30:07.000]  Тогда это мы вообще убираем.
[30:08.000 --> 30:10.000]  То есть, добавив этот if, мы теперь говорим,
[30:11.000 --> 30:15.000]  ребро теперь железо-бетонно-перекрестное, а прямые ребра нас не интересуют.
[30:16.000 --> 30:18.000]  То есть, мы даже этот случай не рассматриваем,
[30:19.000 --> 30:22.000]  просто в знак того, что если мы уберем из графа все прямые ребра,
[30:23.000 --> 30:25.000]  то компоненты сильной связности от этого не поменяются от слова никак.
[30:26.000 --> 30:28.000]  Вы понимаете, почему, да?
[30:29.000 --> 30:30.000]  Конечно.
[30:31.000 --> 30:33.000]  Ну и что нам теперь говорит технология, да?
[30:34.000 --> 30:37.000]  Ну теперь говорим, что...
[30:37.000 --> 30:42.000]  Что, значит, калакс у нас теперь от В становится черным.
[30:43.000 --> 30:45.000]  E, D, F, S, black.
[30:50.000 --> 30:51.000]  Вот.
[30:52.000 --> 30:53.000]  И дальше теперь, что мы говорим...
[30:54.000 --> 31:00.000]  И дальше говорим, неожиданно, что если оказалось, что uptime от В
[31:01.000 --> 31:04.000]  больше либо равен таймин от В,
[31:07.000 --> 31:09.000]  то надо было тренажный оператор писать.
[31:10.000 --> 31:11.000]  Что?
[31:12.000 --> 31:13.000]  Нет.
[31:14.000 --> 31:16.000]  Где тут тренажный оператор писать?
[31:17.000 --> 31:20.000]  Калакс от В равно uptime от В больше равно таймин.
[31:21.000 --> 31:24.000]  А, не, если бы, если бы, не получится.
[31:25.000 --> 31:26.000]  Ну вот.
[31:27.000 --> 31:32.000]  Ну и сейчас бы, потому что нам же еще вершины из стека доставать.
[31:33.000 --> 31:35.000]  То есть, по-хорошему надо написать.
[31:35.000 --> 31:36.000]  По-хорошему надо написать.
[31:37.000 --> 31:38.000]  Vector int comb.
[31:39.000 --> 31:40.000]  Да.
[31:41.000 --> 31:45.000]  То есть, допустим int u.
[31:46.000 --> 31:51.000]  И там do, какой-нибудь там u равно st.top.
[31:52.000 --> 31:55.000]  Там st.pop.
[31:56.000 --> 31:57.000]  U.
[31:58.000 --> 32:03.000]  Там это comp.push от u.
[32:03.000 --> 32:05.000]  Ну вот, и делаем мы все это.
[32:07.000 --> 32:08.000]  Вот так вот.
[32:09.000 --> 32:11.000]  И делаем мы все это.
[32:12.000 --> 32:13.000]  While что?
[32:15.000 --> 32:18.000]  While u не равно v, мы это делаем.
[32:20.000 --> 32:21.000]  Ну вот.
[32:22.000 --> 32:23.000]  Ну и там.
[32:24.000 --> 32:26.000]  Так, это как-то чуть-чуть кончилось.
[32:27.000 --> 32:28.000]  Ну вот.
[32:28.000 --> 32:29.000]  Вот так я пишу.
[32:30.000 --> 32:31.000]  Comp.pushback.
[32:34.000 --> 32:35.000]  Comp.
[32:36.000 --> 32:37.000]  Ну и все.
[32:40.000 --> 32:43.000]  Вот, примерно так хотелось бы сделать.
[32:46.000 --> 32:47.000]  Ну вот.
[32:48.000 --> 32:49.000]  Ну вот.
[32:50.000 --> 32:51.000]  Ну вот.
[32:52.000 --> 32:53.000]  Ну вот.
[32:54.000 --> 32:55.000]  Ну вот.
[32:55.000 --> 32:56.000]  Сделать.
[32:59.000 --> 33:01.000]  Но как вы убежали, что это не совсем работает?
[33:02.000 --> 33:05.000]  Ну, потому что это фактически отвечает вот тому, что там написано.
[33:06.000 --> 33:07.000]  Но мы уже выяснили, что это не работает.
[33:09.000 --> 33:11.000]  А как сделать так, чтобы это работало?
[33:13.000 --> 33:14.000]  Как же было сказано?
[33:15.000 --> 33:17.000]  Сейчас мы введем четвертый цвет в DFS.
[33:18.000 --> 33:20.000]  Как мы его введем?
[33:21.000 --> 33:22.000]  Да очень просто.
[33:23.000 --> 33:24.000]  Смотрите.
[33:25.000 --> 33:26.000]  Внимание.
[33:27.000 --> 33:28.000]  Вот сюда.
[33:29.000 --> 33:30.000]  Вот.
[33:31.000 --> 33:33.000]  Прямо вот в это вот место кода.
[33:34.000 --> 33:35.000]  Вот я тут даже.
[33:36.000 --> 33:40.000]  Ну давайте представим, что синий это еще и чуть-чуть фиолетовый.
[33:42.000 --> 33:45.000]  Значит, мы скажем, что colors
[33:50.000 --> 33:51.000]  от u
[33:52.000 --> 33:53.000]  равно
[33:53.000 --> 33:54.000]  внимание
[33:55.000 --> 33:57.000]  e DFS purple.
[34:01.000 --> 34:02.000]  О.
[34:04.000 --> 34:09.000]  То есть это будет знак того, что эта вершина уже в найденной компании.
[34:09.000 --> 34:13.000]  Но сама по себе, конечно, сама по себе эта штука нам бы никак не помогла.
[34:14.000 --> 34:17.000]  Потому что пока как бы ничего принципиально не поменялось.
[34:18.000 --> 34:21.000]  Мы просто тут это, то есть фактически какую-то там галочку поставили.
[34:23.000 --> 34:25.000]  Как же сделать так, чтобы она повлияла на логаритм?
[34:26.000 --> 34:27.000]  А вот как.
[34:28.000 --> 34:31.000]  Дело в том, что у нас есть один логаритм.
[34:32.000 --> 34:34.000]  А у нас есть один логаритм.
[34:35.000 --> 34:37.000]  А у нас есть один логаритм.
[34:38.000 --> 34:48.000]  Дело в том, что мы не будем учитывать перекрестные ребра, которые ведут в фиолетовые вершины.
[34:50.000 --> 34:57.000]  То есть когда у нас будет перекрестное ребро, мы будем проверять, а вершина-то у нас фиолетовая или не фиолетовая.
[34:57.000 --> 35:09.000]  И тогда это поможет следующим образом, что с одной стороны вот эти ребра учтутся, а вот это ребро нет.
[35:10.000 --> 35:13.000]  Потому что эта компонента будет уже фиолетовая.
[35:14.000 --> 35:17.000]  Такова идея. Естественно, это пока не доказательство.
[35:18.000 --> 35:21.000]  Сейчас мы будем это аккуратно доказывать.
[35:22.000 --> 35:25.000]  Но вот смысл такой.
[35:26.000 --> 35:31.000]  Сейчас мы возьмем губочку и напишем, что на самом деле, то есть тут будет иметь смысл написать.
[35:32.000 --> 35:37.000]  То есть видите, не вот этот вот ИВ писать, но вот.
[35:38.000 --> 35:46.000]  А важно тут будет написать именно ЛЗ.
[35:47.000 --> 36:02.000]  То есть вот этот дотоптайм, то есть учитывать нужно только если colors от nv равно edfs black.
[36:06.000 --> 36:11.000]  То есть можно было на самом деле вот сюда написать, если цвет серый или черный.
[36:12.000 --> 36:14.000]  Ну короче не фиолетовый.
[36:16.000 --> 36:18.000]  Вот такая идея.
[36:22.000 --> 36:24.000]  Так вот, алгоритм понятен?
[36:25.000 --> 36:27.000]  Именно как алгоритм.
[36:31.000 --> 36:34.000]  А понятно, что в этом коде написано.
[36:35.000 --> 36:39.000]  А то скопипастить можно, и при этом вообще не понимать, что это такое.
[36:39.000 --> 36:41.000]  Проблема?
[36:46.000 --> 36:49.000]  Проблема была, что предыдущие варианты не работали.
[36:50.000 --> 36:55.000]  Потому что в одном из этих вариантов у нас были ложные срабатывания на первую вершину, а в другом варианте наоборот.
[36:56.000 --> 36:58.000]  Ложных срабатываний не было, но и некоторые истинные не работали.
[36:59.000 --> 37:05.000]  Поэтому я утверждаю, что вот в этом варианте сработают ровно те и только те, которые надо.
[37:09.000 --> 37:14.000]  Вот в чем проблема. Вот была проблема, и вот сейчас мы ее пытаемся героически решить.
[37:19.000 --> 37:24.000]  Первая вершина в своей компоненте стильной саженности, это по таймингу первая?
[37:25.000 --> 37:26.000]  Ну да.
[37:27.000 --> 37:29.000]  Она же корень.
[37:32.000 --> 37:34.000]  Значит поехали. Что же делать?
[37:35.000 --> 37:39.000]  Как же это сделать? То есть как же это теперь доказывать?
[37:40.000 --> 37:42.000]  Ну я утверждаю следующее.
[37:43.000 --> 37:46.000]  Значит смотрите, как у нас устроены, вот давайте думать.
[37:47.000 --> 37:50.000]  Как у нас устроены компоненты?
[37:53.000 --> 37:56.000]  Вот рассмотрим какую-нибудь компоненту и ее дерево.
[37:57.000 --> 38:02.000]  Ну понятно, что у каждой компоненты будет корень дерева, вне зависимости от того, идентифицируем мы его или нет.
[38:03.000 --> 38:06.000]  Вот допустим там какое-то дерево, дерево, дерево.
[38:08.000 --> 38:12.000]  Ну тут еще какие-то ребра есть, будем их по мере необходимости рисовать.
[38:13.000 --> 38:18.000]  Ну и конечно из какого-то корня, то есть ДФС, мы сюда вообще пришли.
[38:19.000 --> 38:21.000]  Может быть тут еще кто-то был, вот так вот.
[38:24.000 --> 38:26.000]  Ну а теперь давайте вот что заметим.
[38:27.000 --> 38:30.000]  Значит по каким ребрам можно отсюда выйти?
[38:31.000 --> 38:37.000]  Докажем для начала, что эта вершина будет идентифицирована как первая.
[38:38.000 --> 38:41.000]  То есть докажем, что для нее аптайм больше либо равен таймэйну.
[38:49.000 --> 38:52.000]  Ну смотрите, вот у нас жила была компонент сильной связности.
[38:53.000 --> 38:55.000]  Да, нам надо доказать для нее две вещи.
[38:56.000 --> 38:59.000]  Во-первых, что для ее корня аптайм больше либо равен таймэйна.
[39:01.000 --> 39:04.000]  А второе мы даже докажем, что для этих всех вершин вот это неверно.
[39:05.000 --> 39:06.000]  То есть аптайм меньше таймэйна.
[39:11.000 --> 39:15.000]  Но на самом деле ладно, проще даже для этих вершин доказать, что аптайм меньше таймэйна.
[39:20.000 --> 39:21.000]  Почему?
[39:22.000 --> 39:24.000]  Ну потому что мы замечаем вот что.
[39:25.000 --> 39:31.000]  То есть рассмотрим, скажем, под дерево каждой вершины.
[39:32.000 --> 39:39.000]  Заметим, что из этого под деревом можно выйти, внимание, не выходя за пределы компоненты сильной связности.
[39:45.000 --> 39:48.000]  Ну потому что из этой части можно попасть в этот корень.
[39:48.000 --> 39:51.000]  Причем не выходя за пределы компоненты сильной связности.
[39:53.000 --> 39:59.000]  То есть значит из нее торчит какое-то ребро, которое ведет в какие-то другие вершины, но той же самой компонентой сильной связности.
[40:00.000 --> 40:01.000]  Но что это может быть?
[40:03.000 --> 40:04.000]  То есть вот из этого под дерева.
[40:05.000 --> 40:10.000]  Это может быть обратное ребро, и тогда аптайм этой вершины становится с точно меньше таймэйна.
[40:12.000 --> 40:16.000]  Либо это может быть перекрестное ребро.
[40:16.000 --> 40:19.000]  Это может быть перекрестное ребро вот куда-то в соседнее под дерево.
[40:23.000 --> 40:28.000]  Да, эти вершины не фиолетовые, потому что мы можем, мы просто вот аккуратненько по индукции доказываем,
[40:29.000 --> 40:33.000]  по таймэйну там сначала для этой, потом это, это и так далее, что эти все вершины фиолетовые,
[40:34.000 --> 40:39.000]  то есть эти все вершины для этих всех вершин аптайм меньше, чем таймэйн, поэтому фиолетовые они пока еще не стали.
[40:46.000 --> 40:57.000]  Ну да, помните, перекрестное ребро у нас ведет всегда в вершины с меньшими таймэйнами.
[40:58.000 --> 41:03.000]  Так что поэтому как бы вот это ребро уже у этой вершины таймэйн заведомо меньше, чем у этой.
[41:07.000 --> 41:12.000]  Ну смотрите, мы обходим вершины этой компоненты по очереди, да, в порядке таймэйна.
[41:12.000 --> 41:23.000]  Давайте вот просто мы в порядке этой очереди докажем, что для каждой из этих вершин аптайм будет меньше, чем таймэйн.
[41:23.000 --> 41:28.000]  Аптайм меньше, чем таймэйн, да.
[41:37.000 --> 41:43.000]  Нет, ну как, ну наша цель доказать, что аптайм меньше, чем таймэйн, то есть что на них ложного срабатывания не будет.
[41:45.000 --> 41:48.000]  Логично, да? Доказываем мы это так.
[41:48.000 --> 41:53.000]  Доказываем мы это так. Доказываем мы это в порядке по очереди происхождения таймэйн.
[41:53.000 --> 41:57.000]  Допустим, вот для всех вот этих вершин мы доказали, что ложных срабатываний здесь не будет.
[41:58.000 --> 42:02.000]  И дошли до этой вершины. Рассмотрим ее под дерево.
[42:08.000 --> 42:14.000]  То есть теперь доказываем, идем. То есть тут какое-то под дерево, мы его рассматриваем полностью.
[42:14.000 --> 42:21.000]  И теперь думаем, из него мы должны как умеем, из него торчит хотя бы одно ребро внутрь этой же компоненты сильной связности.
[42:22.000 --> 42:29.000]  Это ребро, либо обратное, либо, то есть либо оно, либо перекрестное.
[42:29.000 --> 42:36.000]  Если оно обратное, то оно ведет в предка этой вершины, да, и тогда аптайм меньше таймэйна, ура.
[42:36.000 --> 42:40.000]  В hä polarization у нас перекрестное, потому что мы сортировали.
[42:40.000 --> 42:46.000]  В перекрестном, во-первых, просто есть свойство что перекрестное всегда, ну перекрестное оно всегда ведет в вершину с меньшим таймэйном.
[42:46.000 --> 42:50.000]  В зависимости от наше сортировки он как-то где-то не completieht.
[42:50.000 --> 43:00.000]  Нет, почему таймэйн устроен так что перекрестовое ребро всегда ведет из вершин с большим таймэйном
[43:00.000 --> 43:02.000]  ну как минимум у нас было на прошлом лекции такое свойство.
[43:02.000 --> 43:21.000]  А у нас сейчас аптаймы вообще имеют какой-то более общий смысл, чем величина, которая считается вот так вот?
[43:21.000 --> 43:36.000]  Ну сложно сказать. Ну потому что смысл у него, как всегда, можно ли из-под дерева выйти? Желательно не выходя из компонента.
[43:36.000 --> 43:48.000]  А, ну на самом деле, да. Заметим, что, конечно, это доказательств еще не совсем полно, потому что в аптаймы участвуют еще всякие, то есть потому что тут же еще всякие компоненты висят.
[43:48.000 --> 43:55.000]  То есть тут вообще тут еще что-то висит. Вон целая под дерево компонент.
[43:55.000 --> 44:05.000]  Чего? Вориентированно. Ну конечно, сильная связность бывает только вориентированно.
[44:05.000 --> 44:21.000]  Ну вот. Ну то есть теоретически из этих компонент тоже может вести куда-то какие-то перекрестные игры, правда?
[44:22.000 --> 44:33.000]  Но правда интересующая нас, если тут они между компонентами отсюда-сюда, то это нас не интересует, потому что у всех этих вершин таймин больше, чем таймин этой вершины.
[44:33.000 --> 44:45.000]  Но с другой стороны, заметим теперь следующее. Ну вот. А, впрочем, стоп, а какая нам разница?
[44:45.000 --> 44:54.000]  А, на самом деле бесполезно это рассматривать, потому что мы уже исходя из этого под дерево уже доказали, что аптайм этой вершины будет меньше, чем ее таймин. Все.
[44:54.000 --> 45:04.000]  То есть может быть даже если тут что-то лишнее будет, на самом деле нет, но это мы чуть позже поймем. То есть таким образом мы поняли, что ложных срабатываний не будет.
[45:06.000 --> 45:13.000]  Вот, понятно? А будет ли истинное срабатывание? А будут ли все истинные срабатывания?
[45:15.000 --> 45:22.000]  То есть не может ли быть так, что вот эту вершину мы так жественно проигнорируем? На радость.
[45:27.000 --> 45:39.000]  Да, совершенно верно. Откуда мог взять саптайм меньше? Обратных ребер конечно нет, потому что если бы они были, то тогда эта вершина оказалась бы в одной компоненте сильной связности с этой.
[45:39.000 --> 45:49.000]  И первой бы не была. Ну а теперь думаем. Хорошо. А какие у нас в ее под дереве есть обратные ребра? Перекрестные.
[45:53.000 --> 46:01.000]  Ну есть перекрестные, ну могли бы быть в принципе, наш код дает апдейты по прямым ребрам, но прямые нам неинтересны, потому что прямые ведут ребра вниз.
[46:03.000 --> 46:06.000]  То есть вершины у которых таймин больше, чем у этой вершины.
[46:07.000 --> 46:17.000]  Так, рассматриваем перекрестные ребра. Ну теперь мы думаем вот о чем. Так, перекрестные ребра, если они не выходят за пределы под дерево, то они нас тоже не интересуют, правда?
[46:18.000 --> 46:30.000]  То есть они по крайней мере таймин будут, то есть аптайм меньше, чем таймин, не сделают. Но могут быть перекрестные ребра, которые в принципе выходят откуда-то, вот еще куда-то влево.
[46:31.000 --> 46:37.000]  Но они выходят в соседнее под дерево, правда? То есть вот как-то это вот так происходит.
[46:45.000 --> 46:47.000]  Но заметим мы тогда следующее.
[47:00.000 --> 47:06.000]  Ну вот тут не совсем так, тут надо аккуратно. Потому что тут мы заметим следующее.
[47:07.000 --> 47:13.000]  Тут как бы могло быть два варианта. То есть у нас действительно.
[47:14.000 --> 47:20.000]  Либо у нас тут вот после ответвления появляются новые компоненты, то есть вот как-то это вот так происходит.
[47:20.000 --> 47:24.000]  И тогда мы, то есть тогда тут как-то вот так это все начинается.
[47:25.000 --> 47:30.000]  И тогда мы замечаем, что это ребро мы не учитывали, потому что эта компонента уже была учтена ранее.
[47:31.000 --> 47:34.000]  Да, мы опять тут доказываем все по индукции, тоже по таймину.
[47:35.000 --> 47:39.000]  Но как бы получается мы ее обошли. Вот понимаете, да?
[47:40.000 --> 47:49.000]  Но это верно, но могло быть так, что на самом деле тут, то есть это верно только что если компоненты сильной связности этой вершины не дотягиваются вот до ДЛЦА.
[47:50.000 --> 47:52.000]  Ну она же могла дотянуться.
[47:53.000 --> 47:55.000]  То есть здесь.
[47:56.000 --> 48:05.000]  Ну вот смотрите, то есть рассуждение такое, что вот жила была ЛЦА, вот жил был путь в эту вершину.
[48:06.000 --> 48:08.000]  Вот эта вершина лежит в какой-то компоненте сильной связности.
[48:09.000 --> 48:15.000]  И она лежит в одной компоненте с этой вершины, с этой, с этой и так далее вот до какой-то.
[48:16.000 --> 48:18.000]  И вот это какая-то, она где?
[48:19.000 --> 48:21.000]  Она либо ниже ЛЦА-шки, либо не ниже.
[48:22.000 --> 48:27.000]  Если ниже, то тогда эта компонента уже была идентифицирована ранее, просто по индукции.
[48:29.000 --> 48:43.000]  Теперь, а если, ну вот, ну вот, нет, а если ЛЦА, то есть компонента устроена как-то там условно вот, как-то вот так вот.
[48:46.000 --> 48:48.000]  На самом деле, да?
[48:51.000 --> 48:56.000]  Что мы тогда? То тогда мы получаем просто противоречие.
[48:59.000 --> 49:06.000]  Потому что, если у нас так получилось, то мы замечаем, что у нас есть компонента сильной связности,
[49:07.000 --> 49:12.000]  из которой можно вот выйти через ЛЦА-шку в наш, сюда, прийти сюда и вернуться.
[49:12.000 --> 49:18.000]  То есть это означает, что все вот это вот, весь этот путь лежит в этой компоненте, и эта вершина первой реально не была.
[49:21.000 --> 49:23.000]  Ну вот все, доказательство завершено.
[49:27.000 --> 49:34.000]  Так что вот такое вот фиолетового цвета действительно позволяет нам найти еще и компоненты сильной связности.
[49:35.000 --> 49:39.000]  Абсолютно тема. То есть технология вот абсолютно такая же.
[49:40.000 --> 49:43.000]  Причем, как видим, код, в общем-то, даже не усложнился на самом деле.
[49:44.000 --> 49:49.000]  То есть подлянка может быть только в том, что, конечно, надо помнить. Надо помнить о том, что конкретно.
[49:50.000 --> 49:54.000]  Но с другой стороны, тут, как всегда, если вы помните, из каких соображений берется, то как бы восстановить,
[49:55.000 --> 49:59.000]  где тут фиолетовый цвет и где тут какие-то именно надо проверять, вы там сделаете без труда.
[50:01.000 --> 50:06.000]  Вот. Ну вот. Ну да, почему-то, да, на Олимпиаде этот алгоритм почему-то популярным не является.
[50:10.000 --> 50:12.000]  Ну проще. Ну проще писать.
[50:17.000 --> 50:20.000]  Ну, конденсация. Нет, конденсация. Вопрос решаемый, пожалуйста.
[50:21.000 --> 50:26.000]  Берете, конденсируете. Вот потому что вы тут, вот компоненты, в явном виде делаете, что хотите.
[50:29.000 --> 50:35.000]  Причем она тоже будет как в соседнем. А ну давайте, конечно, мы не можем не рассмотреть и соседний алгоритм, собственно,
[50:35.000 --> 50:42.000]  так сказать, конкурента. Да, в котором два ДФСа, но которые пишутся короче, чем этот один.
[50:45.000 --> 50:49.000]  Ну. Ну как сказать.
[50:52.000 --> 50:55.000]  Вот так. Ну вот.
[50:57.000 --> 50:59.000]  Хотя еще посмотрим, кого, кстати, проще доказать.
[51:01.000 --> 51:02.000]  Хотя.
[51:05.000 --> 51:08.000]  Болезненно. Ну посмотрим, сейчас посмотрим, посмотрим.
[51:09.000 --> 51:10.000]  Так.
[51:14.000 --> 51:15.000]  Вот.
[51:17.000 --> 51:19.000]  Так сейчас мы это все убираем.
[51:20.000 --> 51:23.000]  Ну вот. Ну потому что да. Какой у нас есть конкурирующий алгоритм?
[51:24.000 --> 51:29.000]  Да, конкурирующий алгоритм предполагает вообще никаких этих фиолетовых цветов не писать.
[51:30.000 --> 51:35.000]  Собственно, не заморачиваться, а вместо этого сказать следующее.
[51:36.000 --> 51:38.000]  Давайте запустим один ДФС.
[51:42.000 --> 51:48.000]  И просто выпишем вершины в порядке, только на этот раз не таймына, а таймалта.
[51:50.000 --> 51:51.000]  Вот.
[51:52.000 --> 51:54.000]  Вот выпишем вершины в порядке таймалта.
[51:56.000 --> 51:57.000]  То есть в порядке выхода.
[52:00.000 --> 52:08.000]  То есть можно таймалт даже не хранить, а можно просто там запустить тупо, самый тупой ДФС вообще ни с чем не заморачиваться, просто в конце пушбекнуть его в соответствующий вектор.
[52:10.000 --> 52:13.000]  Значит это первый ДФС, выписываем вершины.
[52:14.000 --> 52:25.000]  А потом после этого мы торжественно заявляем, что мы идем, то есть второй ДФС идет наоборот по этому списочку в порядке убывания таймына, таймалта точнее.
[52:26.000 --> 52:36.000]  Из каждой вершины запускается ДФС и утверждается, что в каждой вершине все, что ДФС обошел, это и есть компоненты сильной связности.
[52:38.000 --> 52:39.000]  Вот такой был алгоритм.
[52:42.000 --> 52:43.000]  Да.
[52:44.000 --> 52:46.000]  Ну-ка внимание и вопрос, дорогие олимпиадники, что я забыл?
[52:46.000 --> 52:53.000]  Да, а еще важный момент.
[52:54.000 --> 52:59.000]  Да, перед тем как запустить второй ДФС в сериал-правкрафе надо развернуть.
[53:04.000 --> 53:06.000]  До этого произошло следующее.
[53:07.000 --> 53:08.000]  Значит ДФС 1.
[53:09.000 --> 53:11.000]  Значит мы завели вот такой вектор.
[53:11.000 --> 53:25.000]  Ну вот, то есть допустим там назовем его LST и мы записываем в него все вершины в порядке убывания таймалта.
[53:26.000 --> 53:27.000]  То есть как бы да.
[53:28.000 --> 53:30.000]  Ну давайте, вот напишем.
[53:31.000 --> 53:32.000]  То есть ДФС 1.
[53:33.000 --> 53:34.000]  ИНТВ.
[53:35.000 --> 53:36.000]  Ну как всегда.
[53:37.000 --> 53:40.000]  Тут вообще не заворачивается, можно юзет прямо писать.
[53:41.000 --> 53:42.000]  А не эти вот.
[53:43.000 --> 53:44.000]  Там FOR.
[53:45.000 --> 53:46.000]  Там INT.
[53:46.000 --> 53:47.000]  NW.
[53:47.000 --> 53:48.000]  Пум-пум.
[53:48.000 --> 53:49.000]  Горят В.
[53:50.000 --> 53:51.000]  IF.
[53:52.000 --> 53:54.000]  Ну вот IF не юзет от NW.
[53:55.000 --> 53:56.000]  То что-то там.
[53:57.000 --> 53:58.000]  Ну вот от ДФС 1.
[53:59.000 --> 54:00.000]  От NW.
[54:01.000 --> 54:04.000]  И в самом конце LST.Pushback от В.
[54:11.000 --> 54:14.000]  Не, ну если спрашивать, что произошло, то вот.
[54:15.000 --> 54:16.000]  То есть произошло вот это.
[54:17.000 --> 54:18.000]  То есть вот так мы создали вид.
[54:19.000 --> 54:23.000]  Ну понятно, что ДФС запускался, типа прибираемся по всем вершинам, если она еще не юзит, пускаем ДФС.
[54:24.000 --> 54:25.000]  Поехали, хорошо.
[54:26.000 --> 54:27.000]  Теперь второй ДФС.
[54:28.000 --> 54:29.000]  Второй ДФС говорит так.
[54:30.000 --> 54:31.000]  Во-первых, мы работаем теперь не с графом, а с развернутым графом.
[54:32.000 --> 54:33.000]  То есть когда все ребра.
[54:34.000 --> 54:36.000]  То есть когда у нас все, когда у нас.
[54:37.000 --> 54:40.000]  То есть теперь вместо каждого ребра мы рассматриваем вот что-то такое.
[54:41.000 --> 54:51.000]  И говорим, запускаем ДФС в том порядке, в котором они записаны в LST, только вот справа налево.
[54:52.000 --> 54:53.000]  То есть в обратном порядке.
[54:54.000 --> 54:59.000]  И в каждом ДФСе говорим, что мы запустили ДФС от вершины.
[55:00.000 --> 55:02.000]  Все, что он обошел конкретно этот ДФС, это компоненты сильной связности.
[55:03.000 --> 55:05.000]  Вот такая идея.
[55:06.000 --> 55:08.000]  Да, это собственно алгоритм Косараю называется.
[55:08.000 --> 55:09.000]  Вот.
[55:10.000 --> 55:11.000]  Но внимание, вопрос.
[55:12.000 --> 55:13.000]  Что вдруг?
[55:17.000 --> 55:18.000]  Да, почему же это?
[55:19.000 --> 55:23.000]  Почему то, что ищет алгоритм имеет какое-то отношение к компонентам сильной связности?
[55:28.000 --> 55:29.000]  Ну, давайте смотреть.
[55:31.000 --> 55:34.000]  Значит, что можно сказать про эти компоненты?
[55:35.000 --> 55:38.000]  Значит, что можно сказать про эти компоненты?
[55:40.000 --> 55:43.000]  Ну, заметьте, вот с точки зрения первого ДФСа.
[55:44.000 --> 55:49.000]  Вот давайте теперь представим, что мы будем записывать эти вершины не слева направо, а снизу вверх.
[55:51.000 --> 55:52.000]  Вот можем себе такое представить, да?
[55:53.000 --> 56:00.000]  Тогда смотрите, ведь у каждой компоненты, как всегда, есть первая вершина, как мы уже выясняли, и висящая на ней под деревом.
[56:01.000 --> 56:02.000]  Ну, так или иначе, правда?
[56:05.000 --> 56:06.000]  Смотрите.
[56:07.000 --> 56:08.000]  Заметим.
[56:09.000 --> 56:11.000]  И заметим мы теперь следующее.
[56:12.000 --> 56:13.000]  Значит, что можно заметить?
[56:14.000 --> 56:22.000]  Заметим, что в принципе эти компоненты теоретически можно записать тоже так вот.
[56:23.000 --> 56:28.000]  Ну, давайте запишем эти компоненты в том порядке, в котором мы из них выходили.
[56:28.000 --> 56:29.000]  Выходили.
[56:32.000 --> 56:34.000]  Вот тут деревец какой-то.
[56:35.000 --> 56:36.000]  Вот так.
[56:39.000 --> 56:40.000]  Ну, теперь заметим следующее.
[56:41.000 --> 56:43.000]  Ну, тут еще что-нибудь там по мелочи нарисуем.
[56:44.000 --> 56:46.000]  Ну, теперь заметим следующее.
[56:47.000 --> 56:52.000]  Что если рассмотрим ребра, которые соединяют разные компоненты, то я утверждаю,
[56:53.000 --> 56:58.000]  я утверждаю, что все эти ребра ведут строго сверху вниз.
[56:59.000 --> 57:01.000]  Ну, снизу вверх вести, ну, вот.
[57:02.000 --> 57:03.000]  Ну, потому что действительно.
[57:04.000 --> 57:06.000]  Давайте, я утверждаю, что только вот так.
[57:07.000 --> 57:09.000]  Так, вот, вот так, вот как-то.
[57:10.000 --> 57:12.000]  Может быть еще вот так вот, вот так вот.
[57:13.000 --> 57:14.000]  Вот так вот как-нибудь.
[57:15.000 --> 57:16.000]  Но и наоборот.
[57:17.000 --> 57:21.000]  Напоминаю, мы написали эти компоненты, то есть мы для каждой компоненты рассмотрели первую вершину,
[57:22.000 --> 57:26.000]  тайм-аут, и выписали вершины вот в порядке возрастания тайм-аута снизу вверх.
[57:27.000 --> 57:28.000]  Видите, да?
[57:29.000 --> 57:30.000]  Видите, да.
[57:31.000 --> 57:36.000]  Вот, теперь думаем, ну, давайте поймем, почему не может быть какого-нибудь вот такого ребра, например.
[57:41.000 --> 57:44.000]  Да, ну, давайте подумаем, что мы...
[57:45.000 --> 57:49.000]  Ну, не совсем так. Нет же гарантии, что из этой компоненты в эту есть путь.
[57:53.000 --> 57:54.000]  Ну, да.
[57:55.000 --> 57:58.000]  Но теперь, да, заметим следующее, что тогда заметим, что...
[57:59.000 --> 58:00.000]  Нет, ну, не совсем так.
[58:01.000 --> 58:02.000]  Смотрите, то есть мы жил-был ДФС.
[58:03.000 --> 58:06.000]  Ну, вот, и когда мы были в этой вершине, мы смотрели на это ребро.
[58:07.000 --> 58:08.000]  Мы по нему либо пошли, либо нет.
[58:09.000 --> 58:16.000]  Но если мы по нему пошли, то тогда мы бы вошли в эту компоненту и из нее бы вышли раньше, чем из этой.
[58:17.000 --> 58:18.000]  Логично, да?
[58:19.000 --> 58:20.000]  Вот.
[58:21.000 --> 58:22.000]  Мужская нота.
[58:23.000 --> 58:24.000]  То есть там нужно быть ниже.
[58:25.000 --> 58:26.000]  Ну, вот, да.
[58:27.000 --> 58:29.000]  Но тогда это означает, что она уже была обойдена.
[58:30.000 --> 58:32.000]  Но это означает, что мы, видимо, из нее уже...
[58:33.000 --> 58:35.000]  Нет, хотя не совсем так.
[58:36.000 --> 58:37.000]  Она могла быть серой.
[58:38.000 --> 58:41.000]  Нет, на самом деле еще может быть так, что мы в нее вошли, эту компоненту, но еще не обошли.
[58:43.000 --> 58:44.000]  Еще такое могло быть.
[58:45.000 --> 58:48.000]  Но тогда это будет означать, что это ее потомок.
[58:49.000 --> 58:51.000]  Да, а это значит цикл, да.
[58:52.000 --> 58:55.000]  Тут, конечно, надо аккуратно рассматривать, потому что...
[58:56.000 --> 58:57.000]  Почему мы не пошли?
[58:58.000 --> 58:59.000]  Потому что либо эта вершина уже...
[59:04.000 --> 59:07.000]  То есть либо мы эту компоненту уже полностью обошли, и тогда она была ниже.
[59:08.000 --> 59:09.000]  Либо мы ее еще не полностью обошли.
[59:10.000 --> 59:11.000]  Значит, тут какие-то вершины серые.
[59:12.000 --> 59:15.000]  Не обязательно это вершина серая, но какие-то вершины серые.
[59:16.000 --> 59:17.000]  Но это все равно будет означать цикл.
[59:18.000 --> 59:20.000]  Так что получается, да, таких ребер не бывает.
[59:25.000 --> 59:26.000]  Но заметим, что самое приятное.
[59:27.000 --> 59:29.000]  Хорошо, компоненты действительно у нас в этом смысле так упорядочены.
[59:30.000 --> 59:36.000]  Но самое главное, что в каждой компоненте верно, что если мы в какую-то вершину зашли первой в компоненте, то мы из нее вышли последние, правда?
[59:37.000 --> 59:45.000]  Поэтому когда мы будем идти тут справа налево, для каждой компоненты мы сначала наткнемся на ее вот этот корень относительно первой DFS.
[59:46.000 --> 59:47.000]  Видите, да?
[59:48.000 --> 59:49.000]  К чему же нас это приведет?
[59:50.000 --> 59:51.000]  А приведет нас это вот к чему?
[59:52.000 --> 01:00:00.000]  То есть тогда получается, что у нас компоненты вот упорядочились в таком порядке, и теперь вот мы идем и попадаем теперь вот в эту вершину.
[01:00:01.000 --> 01:00:07.000]  Но если мы разворачиваем ребра теперь, то вот эту компоненту мы все равно обойдем.
[01:00:08.000 --> 01:00:12.000]  Ну да, потому что по определению скорее, по сильной связности.
[01:00:13.000 --> 01:00:17.000]  То есть до этих вершин мы можем дойти как по прямым ребрам, так и по, так сказать, наоборот.
[01:00:18.000 --> 01:00:23.000]  Но с другой стороны, выйти из нее больше нельзя, потому что ни одно ребро в эту компоненту не входило.
[01:00:24.000 --> 01:00:27.000]  То есть только выходили.
[01:00:28.000 --> 01:00:31.000]  Тогда поэтому когда мы развернули ребра теперь только все входят, но никто не выходит.
[01:00:32.000 --> 01:00:38.000]  Поэтому самый первый DFS тупо возьмет эту вершину, то есть это нот, и просто обойдет ровно ее компонент.
[01:00:39.000 --> 01:00:45.000]  Потом дальше мы получается попадем просто в эту вот вершину, и аналогичным образом обойдем ровно ее.
[01:00:46.000 --> 01:00:47.000]  Ну и так далее.
[01:00:48.000 --> 01:00:53.000]  То есть заодно еще и получается, что мы не просто обойдем компоненты, но еще и в порядке топологической сортировки.
[01:00:54.000 --> 01:00:58.000]  Топологическая сортировка для этого.
[01:00:59.000 --> 01:01:00.000]  Ну да.
[01:01:01.000 --> 01:01:04.000]  Но правда с другой стороны, тут это не то чтобы преимущество,
[01:01:05.000 --> 01:01:08.000]  потому что я утверждаю, что здесь у нас тоже получится топологическая сортировка на самом деле.
[01:01:09.000 --> 01:01:11.000]  Это еще надо доказать.
[01:01:12.000 --> 01:01:13.000]  Да.
[01:01:14.000 --> 01:01:21.000]  Ну я утверждаю действительно, что мы тут компоненты обошли в каком-то порядке.
[01:01:22.000 --> 01:01:32.000]  Так вот, я утверждаю в данном случае, что все ребра между компонентами будут вести из позже обойденной компоненты в ранее обойденную компонент.
[01:01:35.000 --> 01:01:36.000]  Почему?
[01:01:37.000 --> 01:01:42.000]  Ну потому что если мы рассмотрим конденсацию с точки зрения DFS, то есть вот у нас конденсация.
[01:01:43.000 --> 01:01:48.000]  Внутри мы подразумеваем, что это компоненты сильной связности.
[01:01:52.000 --> 01:01:55.000]  То какие ребра из компонент могут выходить?
[01:01:56.000 --> 01:01:58.000]  Обратных выходить не может.
[01:01:59.000 --> 01:02:02.000]  Потому что тогда это просто цикл одна компонента ай-ай-ай.
[01:02:03.000 --> 01:02:06.000]  Но тогда бывают только какие еще ребра бывают?
[01:02:07.000 --> 01:02:09.000]  Перекрестные могут быть?
[01:02:10.000 --> 01:02:12.000]  Тогда смотрите, какие могут быть ребра.
[01:02:13.000 --> 01:02:17.000]  Могут быть прямые ребра, которые соединяют предка с потомком.
[01:02:18.000 --> 01:02:21.000]  И могут быть еще перекрестные ребра.
[01:02:23.000 --> 01:02:31.000]  Но перекрестные ребра, они во-первых, идут из позже обойденных в ранее обойденную.
[01:02:32.000 --> 01:02:33.000]  Вот понимаете, да?
[01:02:34.000 --> 01:02:36.000]  Ну вот, это уже само по себе.
[01:02:37.000 --> 01:02:41.000]  А прямое, а тоже заметим, что эту компоненту мы идентифицировали позже, чем вот эту.
[01:02:46.000 --> 01:02:50.000]  Так что получается, что здесь тоже как бы топологическая циклировка тоже найдена.
[01:02:52.000 --> 01:02:54.000]  Так что само по себе это не преимущество.
[01:02:56.000 --> 01:02:59.000]  Ну вот, то есть и так, то есть в общем-то тут и так, и так.
[01:03:00.000 --> 01:03:06.000]  То есть дальше уже там на ваше усмотрение, как вам удобнее написать два коротких ДФСа или один вот там умный.
[01:03:08.000 --> 01:03:09.000]  Вот.
[01:03:12.000 --> 01:03:16.000]  Нет, ну, нет, практика здесь не показывает никак.
[01:03:18.000 --> 01:03:23.000]  Нет, практика тут не показывает никак, потому что, понимаете, тут просто все зависит от того, как сложилось.
[01:03:24.000 --> 01:03:27.000]  Так сложилось, что в олимпиаде программирования как-то принято рассказывать вот этот алгоритм.
[01:03:28.000 --> 01:03:30.000]  Ну, принято потому, что он тупо проще.
[01:03:31.000 --> 01:03:37.000]  Вот он тупо проще, чаще его рассказывают не в одной лекции с, скажем, мостами точного сочленения.
[01:03:38.000 --> 01:03:43.000]  Да, поэтому, ну вот, а этот алгоритм, если независимо его рассматривать, он тупо проще пишет.
[01:03:44.000 --> 01:03:45.000]  Ну вот.
[01:03:46.000 --> 01:03:50.000]  Ну а если еще вспомнить, что там во всяких ЛКШ далеко не всегда заморачиваются об строгие доказательства.
[01:03:51.000 --> 01:03:53.000]  Или всегда заморачиваются?
[01:03:54.000 --> 01:04:02.000]  Ну там, нет, ну по ситуации, насколько там ЛКШ всякое бывает, ЛКШ иногда и там, и всякие там теоретические занятия устраивает.
[01:04:03.000 --> 01:04:04.000]  Ну вот. Ну, впрочем, не суть.
[01:04:05.000 --> 01:04:06.000]  Так что пора.
[01:04:07.000 --> 01:04:08.000]  Так что вот получается такая красота.
[01:04:10.000 --> 01:04:13.000]  Так, ну это вот все, что я хотел сказать про сильную связь.
[01:04:14.000 --> 01:04:15.000]  Здесь есть ли тут вопросы?
[01:04:16.000 --> 01:04:21.000]  Ну вот. Ну, чем, да, только если у этих алгоритмов есть такая подлянка, что нам приходится запускать DFS,
[01:04:21.000 --> 01:04:27.000]  что там в зависимости от того, из каких вершин мы запускаем DFS в каком порядке, у нас будет еще сколько у нас деревьев DFS.
[01:04:28.000 --> 01:04:35.000]  А ближайшие несколько алгоритмов мы будем говорить о графах специального вида.
[01:04:37.000 --> 01:04:45.000]  Вот. Мы будем говорить о графах, у которых есть так называемый корень, то есть вершина, из которой DFS, из которой достижимы все.
[01:04:46.000 --> 01:04:54.000]  Вот. Это, более того, даже тут опять появляется такой термин, который вот не очень...
[01:04:55.000 --> 01:04:58.000]  Да, и более того, мы ее знаем и из нее будем запускать DFS.
[01:04:59.000 --> 01:05:11.000]  Более того, в тех задачах, которые мы сейчас будем рассматривать, ну вот, а мы будем на самом деле и дерево доминаторов строить, и начнем мы с миностола ориентированного.
[01:05:11.000 --> 01:05:16.000]  То есть нам будет принципиально, что да, такая вершина есть, мы ее знаем, это вершина R.
[01:05:19.000 --> 01:05:23.000]  Вот. Да.
[01:05:26.000 --> 01:05:33.000]  Это будет, то есть фактически так, это будет даже называться flow graph.
[01:05:34.000 --> 01:05:38.000]  То есть он создается G и R.
[01:05:39.000 --> 01:06:00.000]  То есть, где, значит, G равно VE, значит, это ориентированный граф, там R вершина, из R достижимы все вершины в множестве V.
[01:06:04.000 --> 01:06:10.000]  Нет, как это ни странно, нет. Нет, никакого отношения к потокам это все не имеет.
[01:06:12.000 --> 01:06:20.000]  Ну, знаете, тут сейчас посмотрим, у меня почему-то сейчас, у меня вообще уже возникло ощущение, что мы к ним близки на самом деле.
[01:06:21.000 --> 01:06:26.000]  Нет, не сейчас, то, что мы сейчас будем обсуждать, мы к потокам вообще никакого отношения не имеем, кроме слова flow.
[01:06:27.000 --> 01:06:30.000]  Но это не тот поток, но это, если подозревать, что не совсем тот поток.
[01:06:30.000 --> 01:06:43.000]  Ну, здесь правда есть, то есть здесь, как бы тут, тут какой-то вроде перевод есть, это обычно называют, там кто-то перевел как graph потока управления.
[01:06:49.000 --> 01:06:55.000]  Вот я запах, то есть, видимо, в каком-то переводе Аха Хопковта Ульмана, по-моему, или Аха Ульмана, там вот что-то такое.
[01:06:56.000 --> 01:06:59.000]  В какой-то из этих книж на что-то подобное наталкивал.
[01:07:03.000 --> 01:07:12.000]  То есть вот такое, но на самом деле в английской литературе есть термин flow graph, это вот означает вот это, то есть к потокам, в потоках там будет понятие network скорее.
[01:07:13.000 --> 01:07:24.000]  То есть там будет сеть, там будут эти все истоки, стоки, там остаточные сети и прочая страшная терминология, на самом деле нет, собственно, которую мы чувствуем, скоро будем изучать.
[01:07:26.000 --> 01:07:30.000]  Да, хоть и да, ну, то есть как по умолчанию программа третьего семестра.
[01:07:33.000 --> 01:07:34.000]  Да, да, именно.
[01:07:35.000 --> 01:07:46.000]  Ну, тут посмотрим много чего, нет, тут нет, потоки на самом деле тоже на самом деле стоят того, чтобы их изучать, никуда не торопясь, потому что это на самом деле отдельная, большая и очень красивая теория, собственно, как мы с вами убедимся.
[01:07:49.000 --> 01:07:50.000]  Это что?
[01:07:50.000 --> 01:07:54.000]  Си, си, си, си, си, ой, ну там, там другое.
[01:07:56.000 --> 01:08:07.000]  Нет, ну, не совсем, нет, да, ну, поток это не об этом, поток это все-таки как воду через этот провод пускать, ну или более, или может быть где-то более жизненно как машины по дорогам пускать еще.
[01:08:09.000 --> 01:08:15.000]  Там разные, разные задачи на эту тему, а может просто как искать разрез, как искать разрезу графии на самом деле.
[01:08:16.000 --> 01:08:19.000]  Ой, ну там, ну да.
[01:08:20.000 --> 01:08:24.000]  Так, да, на всякий случай мы с вами про сочетания не проходили, я надеюсь.
[01:08:25.000 --> 01:08:27.000]  Ну да, все, я с ума не сошел, конечно.
[01:08:28.000 --> 01:08:34.000]  Нет, могли бы мы их пройти, но на самом деле их надо проходить именно внутри потоков, собственно, увидите почему.
[01:08:36.000 --> 01:08:45.000]  Да, их можно проходить отдельно, но на самом деле все доказательства, которые вам рассказывают, это просто так, это немножко калька и упрощение просто из теории потоков на самом деле.
[01:08:47.000 --> 01:08:49.000]  Прикламировал, короче, будущие лекции.
[01:08:50.000 --> 01:08:52.000]  А пока, пока же мы этим всем не занимаемся.
[01:08:53.000 --> 01:08:59.000]  Пока же у нас есть вот ориентированный граф и вот есть вершина, из которой можно адекватно запустить DFS.
[01:09:01.000 --> 01:09:06.000]  И теперь, значит, ну для, для разминочки порешаем такую задачу.
[01:09:07.000 --> 01:09:10.000]  Ну даже не для разминочки, а просто порешаем такую задачу.
[01:09:11.000 --> 01:09:13.000]  Значит, есть, есть вот этот вот ориентированный граф.
[01:09:14.000 --> 01:09:15.000]  И на этот раз он взвешенный.
[01:09:15.000 --> 01:09:17.000]  Там минус восемь, там какие-нибудь вот, что-нибудь такое.
[01:09:18.000 --> 01:09:20.000]  Да, он не обязательно ациклический, боже упаси.
[01:09:22.000 --> 01:09:24.000]  То есть он тут, он тут вполне может быть чем угодно.
[01:09:27.000 --> 01:09:32.000]  Пожалуйста, там все, все, все, все, что угодно, любой каприз, как говорится, и так далее.
[01:09:33.000 --> 01:09:34.000]  Вот.
[01:09:35.000 --> 01:09:41.000]  Там два, один, минус восемь, два, четыре, шесть, пять, два, три, четыре.
[01:09:41.000 --> 01:09:46.000]  Там один, минус восемь, два, четыре, шесть, пять, два, три.
[01:09:47.000 --> 01:09:49.000]  Ну я абсолютно тут от балды пишу, естественно.
[01:09:50.000 --> 01:09:52.000]  Два, один, семь.
[01:09:53.000 --> 01:09:54.000]  А нижняя рубрика не забыла?
[01:09:55.000 --> 01:09:56.000]  Ну забыл.
[01:09:58.000 --> 01:09:59.000]  Вот.
[01:10:00.000 --> 01:10:03.000]  Я хочу построить на этом графе минус сто.
[01:10:05.000 --> 01:10:07.000]  Но что такое ас сто в ориентированном графе?
[01:10:08.000 --> 01:10:10.000]  Ну вот, ну в данном случае все очень просто.
[01:10:11.000 --> 01:10:17.000]  Я хочу построить ориентированное дерево, покрывающее все вершины, с корнем в вершине R.
[01:10:18.000 --> 01:10:19.000]  Что значит ориентированное дерево?
[01:10:20.000 --> 01:10:23.000]  Я хочу, чтобы каждое ребро было ориентировано от родителя к ребеночку.
[01:10:26.000 --> 01:10:27.000]  Хорошо.
[01:10:29.000 --> 01:10:30.000]  Во.
[01:10:31.000 --> 01:10:32.000]  Ну вот, например, вот такое.
[01:10:37.000 --> 01:10:38.000]  Ну я от балды тут что-нибудь такое рисую.
[01:10:39.000 --> 01:10:40.000]  Так вот.
[01:10:43.000 --> 01:10:44.000]  Ну вот, например, вот это вот.
[01:10:47.000 --> 01:10:48.000]  Если я...
[01:10:49.000 --> 01:10:50.000]  Забыл, забыл, забыл, забыл.
[01:10:51.000 --> 01:10:52.000]  Ну давайте вот сюда подвесим.
[01:10:57.000 --> 01:10:58.000]  Поярче.
[01:10:58.000 --> 01:10:59.000]  Ладно.
[01:11:06.000 --> 01:11:07.000]  Побольше красного.
[01:11:17.000 --> 01:11:18.000]  Ну теперь видно точно.
[01:11:19.000 --> 01:11:24.000]  Ну да, он говорила мне, мама красный и черный, где контрастируют.
[01:11:25.000 --> 01:11:29.000]  Ну ладно, это говорила не мама, это учитель рисования во втором классе говорил.
[01:11:36.000 --> 01:11:39.000]  Ну как сказать, они может и не должны сильно контрастить.
[01:11:40.000 --> 01:11:47.000]  Ну как сказать, красный красному розень, понимаете, вот помните у нас на слайдах-то красный в общем-то был ярко-красный, а этот такой темно-красный с примесью черного.
[01:11:48.000 --> 01:11:50.000]  А еще, а еще вот это, вот это мелочи.
[01:11:50.000 --> 01:11:51.000]  Вот это мелочи.
[01:11:54.000 --> 01:11:55.000]  Нет, это я вижу.
[01:11:56.000 --> 01:11:57.000]  Вот.
[01:11:58.000 --> 01:11:59.000]  Ну, например, вот это может быть остов.
[01:12:00.000 --> 01:12:01.000]  Ну то есть это я показывал, что такое остов.
[01:12:02.000 --> 01:12:10.000]  Если в графе есть циклы, да даже если их и нет, остовов может быть, ну вот, собственно, как, скажем, Дэн Браун до шиша.
[01:12:12.000 --> 01:12:13.000]  Вот.
[01:12:14.000 --> 01:12:16.000]  Но наша цель построить, естественно, такой остов минимального веса.
[01:12:21.000 --> 01:12:22.000]  Значит, остов.
[01:12:23.000 --> 01:12:27.000]  Ну, это подвешенные, ну, набор ребр, которые образуют подвешенное дерево.
[01:12:28.000 --> 01:12:33.000]  То есть дерево с корнем в R, которое покрывает все вершины.
[01:12:34.000 --> 01:12:38.000]  И причем ребра ориентированы, каждое ребро ориентировано от родителя к ребенку.
[01:12:39.000 --> 01:12:40.000]  Вот так.
[01:12:45.000 --> 01:12:46.000]  Ну то есть, или что то же самое.
[01:12:46.000 --> 01:12:53.000]  То есть под граф из N минус одного ребра, в котором все еще из вершины R можно добраться до всех остальных.
[01:12:54.000 --> 01:12:55.000]  Тоже эквивалентное определение.
[01:12:58.000 --> 01:13:05.000]  Ну и, естественно, нам очень хочется построить остов минимального веса.
[01:13:08.000 --> 01:13:09.000]  И вот на этот раз.
[01:13:10.000 --> 01:13:12.000]  Так, и вот сразу возникает вопрос.
[01:13:13.000 --> 01:13:15.000]  Ну-ка, а нас, вот для разминочки.
[01:13:16.000 --> 01:13:18.000]  Вот у меня тут нарисованы отрицательные ребра.
[01:13:19.000 --> 01:13:21.000]  А можем ли мы от них избавиться?
[01:13:23.000 --> 01:13:26.000]  Точнее от отрицательностей в них.
[01:13:33.000 --> 01:13:34.000]  Ну вот.
[01:13:35.000 --> 01:13:37.000]  Ну да, заметим, что сами по себе отрицательности ничего не дадут.
[01:13:37.000 --> 01:13:42.000]  Потому что, как и ранее, помните, когда мы искали минус 100 в неориентированном графе.
[01:13:43.000 --> 01:13:44.000]  Вот, кстати, мы его так и не доискали.
[01:13:45.000 --> 01:13:47.000]  А то, что мы с вами только алгоритм Прима знаем.
[01:13:51.000 --> 01:13:54.000]  Потому что мы с вами не обсуждали SNM.
[01:13:55.000 --> 01:13:59.000]  Вот, и надо еще не забыть, потому что нам обязательно нужно пообсуждать алгоритм Барувки.
[01:14:00.000 --> 01:14:02.000]  Но я думаю, мы это сегодня пообсуждаем в какой-то момент.
[01:14:03.000 --> 01:14:04.000]  Вот.
[01:14:04.000 --> 01:14:07.000]  Ну то есть его важно будет пообсуждать, потому что во всяких теориях он нам потом будет очень важен.
[01:14:08.000 --> 01:14:12.000]  А, ой, погодите, нам же еще это, ой, Кизеля надо обсуждать, наверное.
[01:14:13.000 --> 01:14:15.000]  Ну этот алгоритм, типа, зачем мы софтхип учили?
[01:14:18.000 --> 01:14:19.000]  Учили.
[01:14:20.000 --> 01:14:21.000]  Нет, учили.
[01:14:22.000 --> 01:14:24.000]  Выучили, насколько выучили, это другой вопрос.
[01:14:25.000 --> 01:14:27.000]  Ну, скажем так, то, чтобы его учили.
[01:14:28.000 --> 01:14:30.000]  Ну, как бы мы его учили.
[01:14:30.000 --> 01:14:31.000]  Ну это да.
[01:14:32.000 --> 01:14:34.000]  Ну, скажем так, честно, я пока алгоритма-то не знаю.
[01:14:35.000 --> 01:14:37.000]  Кизеля, вот как это узнаю, расскажу.
[01:14:39.000 --> 01:14:45.000]  Ну как бы я знаю только, что алгоритм по объему статья называется такого же объема, как статья по СССР.
[01:14:46.000 --> 01:14:48.000]  Но я не знаю, как это будет.
[01:14:49.000 --> 01:14:50.000]  Ну, как бы это будет?
[01:14:51.000 --> 01:14:52.000]  А так?
[01:14:52.000 --> 01:14:58.440]  скажу, но как бы я знаю только что как бы алгоритм по объему статья называется
[01:14:58.440 --> 01:15:06.000]  такого же объема как статья по софт хипу того же автора, так что наверное
[01:15:06.000 --> 01:15:15.000]  ну почему, софт хип мы за четыре пары уложились, помнится, успели, так что вот
[01:15:15.000 --> 01:15:20.640]  ладно, также давайте что-нибудь попроще, значит смотрите, значит здесь на самом
[01:15:20.640 --> 01:15:24.440]  деле в ориентированном, значит да, тут опять работает, что так как у нас ребер n-1,
[01:15:24.440 --> 01:15:28.440]  то мы можем ко всем ребрам вообще прибавить константу и минус 100 останется
[01:15:28.440 --> 01:15:35.840]  минус 100, потому что вес любого 100 увеличится на эту константу умножить на
[01:15:35.840 --> 01:15:45.800]  n-1, но более того в ориентированном графе на самом деле можно сделать еще круче,
[01:15:45.800 --> 01:15:50.040]  дело в том, что в ориентированном графе я могу даже не ко всем ребрам
[01:15:50.040 --> 01:15:56.760]  прибавлять константу, а могу рассмотреть вершину, не корень конечно, рассмотреть все
[01:15:56.760 --> 01:16:09.720]  ребра идущие в нее или все входящие ребра и ко всем им прибавить константу не трогая остальные
[01:16:09.720 --> 01:16:16.480]  ребра, да, то есть дело в том, что заметим, что остов устроен так, что в каждую вершину кроме корня
[01:16:16.480 --> 01:16:25.480]  входит ровно одно ребро, потому что по сути, что такое найти минус 100 в таком графе, по сути
[01:16:25.480 --> 01:16:32.200]  для каждой вершины кроме корня надо выбрать ровно одно входящее ребро, если вы выбрали ровно
[01:16:32.200 --> 01:16:42.200]  одно входящее ребро, то получился остов, так не успел сказать найдите ошибку, да, действительно,
[01:16:42.200 --> 01:16:48.960]  просто выбрать ребро это недостаточно, потому что если вы просто для каждой вершины выберете
[01:16:48.960 --> 01:16:56.200]  входящее ребро какое-нибудь, да, как-нибудь, то вы можете выбрать, то есть до чего-то из
[01:16:56.400 --> 01:17:13.440]  вы дойдете, а все остальное может быть разбито вот на циклы. Нет, нет, я говорю, нет, ну тут две мысли
[01:17:13.440 --> 01:17:21.000]  немножко перемешались, значит, вторая мысль была такая, что нам нужно, чтобы выбрать минус 100,
[01:17:21.000 --> 01:17:28.560]  хочется сказать, что для этого достаточно для каждой вершины выбрать входящее ребро, но мы
[01:17:28.560 --> 01:17:32.400]  обнаружили, что этого недостаточно, потому что если вы выберете от балды как-нибудь, то может
[01:17:32.400 --> 01:17:40.000]  оказаться, что у вас есть дерево плюс циклы, поэтому выбирать надо как-то чуть более аккуратно,
[01:17:40.000 --> 01:17:56.280]  это была вторая мысль. А первая мысль была такая, что, тем не менее, если мы рассмотрим все ребра
[01:17:56.280 --> 01:18:03.320]  входящие и увеличим их на одну и ту же константу, то минус 100 останется минус 100, потому что в
[01:18:03.320 --> 01:18:13.280]  любом минус 100, то есть в любом 100, в любое 100 в эту вершину входит ровно одно ребро, то есть это
[01:18:13.280 --> 01:18:26.280]  необходимые условия, недостаточные, но необходимые. Если мы возьмем и все ребра входящие в вершину и увеличим на одну и ту же константу.
[01:18:26.280 --> 01:18:39.080]  Одну вершину, но все ребра входящие. Вот. Тогда просто веса всех остовов увеличится на одну и ту же константу.
[01:18:39.080 --> 01:18:51.680]  Вот. И, собственно, мы этим можем воспользоваться и добиться того, что у нас ни одного отрицательного
[01:18:51.800 --> 01:19:05.720]  ребра нет. Понимаете, да? Вот. Более того, заметим, может даже сразу заметить, что если давайте пробежимся из-за, вот,
[01:19:05.720 --> 01:19:11.760]  по крайней мере, базовым алгоритмом двух китайцев, давайте просто пробежимся, например, за О от Е, это честно сделаем.
[01:19:11.760 --> 01:19:28.760]  Тогда заметим следующее. Ну В плюс Е, хорошо. Заметим, что в данном случае В плюс Е это О от Е. Почему? Потому что Е это не менее чем В минус 1, в противном случае
[01:19:28.760 --> 01:19:39.760]  В минус 1 не существует. Поэтому В плюс Е здесь это О от Е. Вот. Вот. Ну теперь, тогда утверждаю следующее.
[01:19:39.760 --> 01:19:49.760]  Такой тупой тюнинг. Если после этого окажется, что вы можете дойти от вершины Р до всех остальных по нулевым ребрам, то поздравляю,
[01:19:49.760 --> 01:20:07.760]  что В минус 1 вы нашли. Есть такое ощущение, да? Вот. Но с другой стороны есть, конечно, И. Вот еще. Но, конечно, нам так повезет не всегда.
[01:20:07.760 --> 01:20:24.760]  Но смотрите, что можно сделать. Можно добиться того, что за В плюс Е, за Е, можно добиться того, что в каждую вершину, кроме корня, будет входить хотя бы одно нулевое ребро, и при этом все ребра будут не отрицательны.
[01:20:24.760 --> 01:20:41.760]  Да, сейчас умная формулировка. Можно добиться того, что все ребра будут не отрицательны, но при этом в каждую вершину будет входить хотя бы одно нулевое ребро.
[01:20:41.760 --> 01:20:55.760]  Да, то есть просто в некоторых вершинах надо не только прибавлять, но и вычитать. Да, это тоже будет работать. Вот.
[01:20:55.760 --> 01:21:04.760]  Вот тогда рассмотрим, что у нас тогда представляет собой, давайте вот отдельно нарисуем, что у нас тогда будет представлять собой нулевые ребра.
[01:21:04.760 --> 01:21:13.760]  Ну, рассмотрим какую-нибудь вершину, в нее входит нулевое ребро. Теперь в каждую вершину входит хотя бы одно нулевое ребро. Приятно, да? Вот.
[01:21:13.760 --> 01:21:23.760]  Ну, а теперь давайте думать, что может произойти. Значит, смотрим эту вершину, видите, да? В нее тоже входит хотя бы одно нулевое ребро.
[01:21:23.760 --> 01:21:36.760]  Ну, вот и в эту входит. Ну и так, идем, идем, идем. Ну и чем это может закончиться? Ну, тут в принципе два варианта.
[01:21:36.760 --> 01:21:55.760]  Либо мы в какой-то момент неожиданно упремся в корень, либо зациклимся. Ну, логично, если из каждой вершины мы идем по какому-то входящему ребру.
[01:21:55.760 --> 01:22:09.760]  И оно всегда есть. Значит, как бы либо у нас начнут вершины повторяться, либо мы уткнемся в вершину, из которой мы пойти не можем. Тут, в общем, на самом деле никакой умной мысли тут даже особо не стоит.
[01:22:09.760 --> 01:22:21.760]  Вот. То есть, может быть, цикл. Но это если даже предполагать, что у нас, как всегда, там давайте, то есть, и в общем-то так и будет. То есть, на самом деле это будет какой-то.
[01:22:21.760 --> 01:22:34.760]  То есть, если предположить, что в каждую вершину уходит ровно одно нулевое ребро, а так и будет, если, например, мы будем рассматривать наш любимый случай, когда все ребра попарно различны по весу.
[01:22:34.760 --> 01:22:55.760]  То будет, то так и будет получаться. То есть, будет получаться, что у нас есть какое-то. Вот. То есть, будет дерево подвешенное на корне и какие-то циклы.
[01:22:55.760 --> 01:23:07.760]  Это если все ребра попарно различны. Если нет, то, конечно, тут могут быть какие-то более нетривиальные конструкции. То есть, там всякие какие-то вот такие.
[01:23:07.760 --> 01:23:15.760]  Тут внутри еще какая-то вот такая гадость там может быть. Вот тут все что угодно. Ну, как бы, то есть, по сути, получится все равно дерево.
[01:23:15.760 --> 01:23:27.760]  Ну, может быть, там дерево с каким-то безобразием внутри. Вот тут даже вот так как-то будет. Ну, и так далее. И какие-то. Ну, и какие-то. То есть, будет такое вот дерево.
[01:23:27.760 --> 01:23:40.760]  Ну, дерево. Ну, в общем, короче, дерево в том плане, что ладно. То есть, тоже из-за достижима. То есть, как бы есть дерево и какое-то лишнее безобразие.
[01:23:40.760 --> 01:23:43.760]  И какие-то еще отдельно компоненты сильной связности.
[01:23:48.760 --> 01:23:54.760]  Ну, кактус. Ну, не обязательно это именно кактус. В классическом понимании это слово кактус, конечно.
[01:24:01.760 --> 01:24:04.760]  Это как угодно. Вот это не кактус, например.
[01:24:11.760 --> 01:24:16.760]  Нет, если одинаковые ребра бывают, то такое бывает.
[01:24:20.760 --> 01:24:29.760]  Ну, не совсем. На самом деле мы добивались того, что в каждую вершину входит хотя бы одно нулевое ребро. В общем, все неотрицательные.
[01:24:29.760 --> 01:24:32.760]  И рассматриваем, как выглядят теперь нулевые ребра.
[01:24:33.760 --> 01:24:42.760]  То есть, нет, если бы мы ровно одно выбирали, то тут были бы только циклы не шоу кроме. То есть, было только голое дерево, голые циклы и все.
[01:24:45.760 --> 01:24:46.760]  Кактусы?
[01:24:49.760 --> 01:25:00.760]  Нет, кактусы. Если имеется в виду зацепленные циклы, то такого бы быть не могло, потому что в эту вершину бы и входило.
[01:25:03.760 --> 01:25:22.760]  А, да, пожалуй, вы правы. Действительно, неправда. На самом деле, действительно согласен, да. Может быть, на самом деле еще вот такая ситуация, да, что действительно цикл, на котором что-то подвешен.
[01:25:22.760 --> 01:25:28.760]  То есть, все висит либо на цикле, либо на корне. Вот так. То есть, несколько таких подвешенных безобразий.
[01:25:29.760 --> 01:25:35.760]  Ой, в другую сторону. Да, такое может быть, да, согласен, согласен, согласен, согласен.
[01:25:35.760 --> 01:25:43.760]  Да, хорошо. Вот. Но может быть так, а может быть, ну, может быть, нет смысла рассматривать, может быть, я вот отдельный компонент сильной связности.
[01:25:45.760 --> 01:25:53.760]  Вот. Так вот, что предлагается с этим всем делать? Предлагается сделать неожиданный финт ушами.
[01:25:53.760 --> 01:26:09.760]  Утверждается, что с точки зрения весов, на самом деле, можно и это дерево, и эти компоненты сжать в одну вершину, прям сконденсировать и повторить операцию капсу.
[01:26:09.760 --> 01:26:22.760]  Вот. И так вот, именно ее, то есть, и повторять ее, повторять, повторять до тех пор, пока мы не сожмемся в единую вершину, и тогда утверждать, что мы победили.
[01:26:22.760 --> 01:26:34.760]  По крайней мере, с точки зрения поиска веса. Ну, до победы, конечно. То есть, как идейная победа может где-то и есть, но это будет похоже на, да, скорее.
[01:26:35.760 --> 01:26:43.760]  То есть, это будет как в том анекдоте, когда человек, когда при пожаре математик вышел в коридор, увидел огнетушитель, понял, что решение есть и пошел спать дальше.
[01:26:45.760 --> 01:26:55.760]  Вот. То есть, тут прям вот максимально подходит. Потому что, на самом деле, надо еще, потому что, как бы, проблемы уже начнутся, если вы просто вздумаете, а как, собственно, строить сам мостов?
[01:26:56.760 --> 01:27:08.760]  Тут вот очень аккуратно это надо делать, потому что, знаете, как-то я, потому что, хорошо, давайте внимательно, а то, знаете, а то, знаете, хрустная ситуация была, это я потом прочитал опять.
[01:27:08.760 --> 01:27:14.760]  Вот я приводил пример, на самом деле, по-моему, скорее всего, рассказывал историю. Вот, на самом деле, с этим алгоритмом было. Я потом на себе отзыв читал так.
[01:27:14.760 --> 01:27:22.760]  И там было такое, что это было, было последние занятия, что-то там вот этот алгоритм, мы там до конца разобрать не успели.
[01:27:22.760 --> 01:27:32.760]  Вот. А в доказательстве, на экзамене выяснилось, что в вики-конспектах на доказательстве была ошибка. Арухович это пропалил и требовал правильного доказательства.
[01:27:34.760 --> 01:27:39.760]  Вот. На самом деле, я, по-моему, почти наверно рассказывал уже эту байку. Так вот, она была про этот алгоритм.
[01:27:43.760 --> 01:27:47.760]  Вот. Ну, слава богу, у нас и не конец семестра и времени у нас еще много, поэтому.
[01:27:53.760 --> 01:27:58.760]  У нас, ну. Ну, не корень, а цикл у нас есть.
[01:28:03.760 --> 01:28:05.760]  Ну да. Ну, мистическое что-то тогда.
[01:28:12.760 --> 01:28:15.760]  Не обязательно. Но сжимаем мы только компоненты из нулевых ребер.
[01:28:16.760 --> 01:28:24.760]  То есть, либо, во-первых, сжимаем компоненты из нулевых ребер, а во-вторых, ну и сжимаем, конечно, вот это дерево.
[01:28:30.760 --> 01:28:38.760]  Ну вот. Как восстанавливать? Ну, значит, как минимум, по умолчанию придется это делать рекурсивно.
[01:28:39.760 --> 01:28:43.760]  А именно. Значит, утверждается, что восстанавливать будет так.
[01:28:44.760 --> 01:28:47.760]  Значит, смотрите. Значит, давайте я все это сотру и покажу.
[01:28:48.760 --> 01:28:50.760]  Так. Плохая тряпочка. Так.
[01:28:51.760 --> 01:28:53.760]  О, хорошая тряпочка.
[01:28:54.760 --> 01:28:56.760]  Вот. Значит, смотрите.
[01:28:57.760 --> 01:29:02.760]  То есть, вот у вас будет какой-то, значит, то есть, идея будет такая.
[01:29:02.760 --> 01:29:04.760]  То есть, идея будет такая.
[01:29:05.760 --> 01:29:07.760]  Жил, был.
[01:29:08.760 --> 01:29:10.760]  Вот.
[01:29:12.760 --> 01:29:15.760]  То есть, вот у вас сжались вот какие-то компоненты.
[01:29:16.760 --> 01:29:19.760]  Вы построили минимальный остов на вот сжатом графе.
[01:29:21.760 --> 01:29:23.760]  Значит, восстанавливать ответ предлагается так.
[01:29:24.760 --> 01:29:27.760]  Вот, допустим, у вас там дерево оказалось, но я тут не буду сильно будрить.
[01:29:28.760 --> 01:29:31.760]  Вот какое-то такое. Вот такое, такое, вот такое.
[01:29:32.760 --> 01:29:35.760]  То есть, заметьте, вы берете, смотрите вершину, в которой это произошло.
[01:29:36.760 --> 01:29:39.760]  Это не обязан быть корень, который вы какой-то как-то там ранее нашли.
[01:29:40.760 --> 01:29:42.760]  Ну, да, то есть, тут все что угодно могло быть.
[01:29:43.760 --> 01:29:45.760]  Вот так вот.
[01:29:46.760 --> 01:29:48.760]  Вот.
[01:29:49.760 --> 01:29:54.760]  Но это не корень. Ну, там то, что вы могли считать корнем, могла оказаться совершенно другая вершина.
[01:29:55.760 --> 01:29:59.760]  Ну, мы знаем, что тут компонента сжалась, хотя компонентой могла быть одна вершина.
[01:29:59.760 --> 01:30:03.760]  То есть, видите, вот в этом примере, этот пример показывает, что на самом деле,
[01:30:04.760 --> 01:30:08.760]  то есть, у вас там, то есть, на самом деле, ну, что-то обязательно сожмется, да.
[01:30:10.760 --> 01:30:14.760]  То есть, хотя бы там, то есть, потому что цикл хотя бы длины 2 найдется обязательно.
[01:30:15.760 --> 01:30:21.760]  Но может быть, он будет один, и там, и вообще поэтому количество вершин на следующий итерация уменьшится вообще на одну.
[01:30:22.760 --> 01:30:25.760]  Поэтому алгоритм на самом деле не за такую крутую симптомику, как мечталось бы.
[01:30:26.760 --> 01:30:28.760]  Но, тем не менее.
[01:30:29.760 --> 01:30:34.760]  Каждый компонент в одну вершину сожмется.
[01:30:35.760 --> 01:30:37.760]  Да, но не компонент, а вот.
[01:30:38.760 --> 01:30:44.760]  Только проблема в том, что вот в этом вот случае, как вы же и предлагали, сожмется только этот цикл, а не все дерево.
[01:30:45.760 --> 01:30:48.760]  А, мы сжимаем только, сейчас мы сжимаем компонент в сильной связности.
[01:30:49.760 --> 01:30:50.760]  Да, мы сжимаем компонент в сильной связности.
[01:30:51.760 --> 01:30:53.760]  Для чего мы это делаем?
[01:30:53.760 --> 01:31:03.760]  А делаем это ровно для того, чтобы сказать, что если у нас тут есть какое-то дерево, то как бы внутри мы сжимаем так, мы объявляем это корнем.
[01:31:04.760 --> 01:31:06.760]  Объявляем это корнем.
[01:31:07.760 --> 01:31:10.760]  Значит, запускаем, ну вот, запускаем ДФС.
[01:31:12.760 --> 01:31:19.760]  Там вот запускаем ДФС и объявляем, что, ну вот, и вот остов обхода ДФС и объявляем, что это часть остова.
[01:31:20.760 --> 01:31:23.760]  То есть, но важно, что именно из этой вершины мы это делаем.
[01:31:24.760 --> 01:31:25.760]  Понимаете, да?
[01:31:27.760 --> 01:31:30.760]  Вот, то есть вот так мы это восстанавливаем.
[01:31:36.760 --> 01:31:37.760]  Это компоненты сильной связности.
[01:31:38.760 --> 01:31:39.760]  Да, это вот.
[01:31:40.760 --> 01:31:41.760]  Нет, и более того, это важно.
[01:31:42.760 --> 01:31:47.760]  То есть, на самом деле, хорошо, что вы задали вопрос, именно поэтому мы сжимаем не все вот это дерево, а только компонент в сильной связности.
[01:31:47.760 --> 01:31:51.760]  Вот ровно из-за того, что действительно, чтобы действительно мы все обошли.
[01:31:55.760 --> 01:31:56.760]  Правильно, правильно.
[01:31:58.760 --> 01:31:59.760]  Да, именно, именно.
[01:32:00.760 --> 01:32:01.760]  Это важно, это важно.
[01:32:02.760 --> 01:32:04.760]  Вот, так что вот такой вот механизм.
[01:32:05.760 --> 01:32:06.760]  По крайней мере, остов он нам построит.
[01:32:07.760 --> 01:32:10.760]  Но пока вовсе не очевидно, почему это действительно минимальный остов.
[01:32:12.760 --> 01:32:13.760]  Ну, как сказать?
[01:32:14.760 --> 01:32:15.760]  Что по индукции?
[01:32:15.760 --> 01:32:16.760]  И что по индукции?
[01:32:17.760 --> 01:32:20.760]  Что мы по индукции докажем?
[01:32:21.760 --> 01:32:22.760]  И что?
[01:32:23.760 --> 01:32:24.760]  Само по себе это ничего не знаю.
[01:32:25.760 --> 01:32:26.760]  И что?
[01:32:27.760 --> 01:32:30.760]  Мы тут сказали, что давайте вот гарантировать, что вот это вот, вот тут у нас компоненты сильной связности.
[01:32:31.760 --> 01:32:35.760]  Давайте гарантировать, что у нас будет такое нулевое под дерево, которое тут всю эту компоненту обходит.
[01:32:36.760 --> 01:32:38.760]  То есть, и тут тоже будет, и тут тоже.
[01:32:39.760 --> 01:32:43.760]  И еще и в корне мы утверждаем, что тут по нулевым ребрам мы должны до всех вершин доходить.
[01:32:43.760 --> 01:32:46.760]  Мы можем просто взять любой остов и перестроить так, чтобы...
[01:32:47.760 --> 01:32:48.760]  Да.
[01:32:49.760 --> 01:32:50.760]  Да, только да, вот, да.
[01:32:51.760 --> 01:32:52.760]  Ну да, вот тут-то, собственно, да.
[01:32:53.760 --> 01:32:55.760]  Вот тут-то, собственно, жалобы в отзывах и начинаются.
[01:32:56.760 --> 01:32:58.760]  Потому что не так-то просто это делать, как кажется.
[01:32:59.760 --> 01:33:01.760]  Да, то есть просто, ну как это у нас сейчас будет?
[01:33:02.760 --> 01:33:03.760]  Надо это сделать аккуратно.
[01:33:04.760 --> 01:33:05.760]  Да, это не очень сложно.
[01:33:06.760 --> 01:33:07.760]  Но, да, потому что совершенно верно, да.
[01:33:08.760 --> 01:33:09.760]  То есть, ну пока я говорю так, что как минимум это надо доказать.
[01:33:10.760 --> 01:33:11.760]  Что так можно.
[01:33:11.760 --> 01:33:17.760]  То есть для этого действительно докажем, что существует минимальный остов вот такого формата.
[01:33:19.760 --> 01:33:20.760]  Как же это доказать?
[01:33:21.760 --> 01:33:22.760]  Ну давайте начнем с простого.
[01:33:23.760 --> 01:33:24.760]  Начнем с корня.
[01:33:29.760 --> 01:33:39.760]  Вот утверждается, что если мы тут можем вот так как-то дойти, то утверждается, что можно действительно искать миностов среди тех остов, частью которых является конкретно это дерево из нулевых ребров.
[01:33:42.760 --> 01:33:43.760]  Как это доказать?
[01:33:44.760 --> 01:33:45.760]  А вот как.
[01:33:46.760 --> 01:33:47.760]  То есть метод, как уже было озвучено.
[01:33:48.760 --> 01:33:49.760]  Действительно.
[01:33:50.760 --> 01:33:51.760]  Рассмотрим реальный минимальный остов.
[01:33:52.760 --> 01:33:53.760]  Ну или какой-нибудь, да.
[01:33:55.760 --> 01:33:56.760]  Вот.
[01:33:57.760 --> 01:33:58.760]  Теперь.
[01:33:59.760 --> 01:34:02.760]  Есть какой-нибудь там минимальный остов, с этим вот всем никак не связан.
[01:34:03.760 --> 01:34:05.760]  То есть тут вообще что угодно там как-то вот.
[01:34:06.760 --> 01:34:10.760]  Страдания, страдания, страдания, там боль, боль, боль, там вот это все.
[01:34:17.760 --> 01:34:18.760]  Ну не знаю.
[01:34:19.760 --> 01:34:22.760]  Нет, просто по моим воспоминаниям как-то, не знаю, мне как-то.
[01:34:23.760 --> 01:34:27.760]  Нет, я просто помню, у меня, я вторую свою вторую сещу как-то на отлы как раз закрыл, в отличие от первой, поэтому.
[01:34:28.760 --> 01:34:30.760]  Поэтому там как раз ничего страшного не было.
[01:34:30.760 --> 01:34:31.760]  Почему?
[01:34:32.760 --> 01:34:33.760]  Вот, значит, смотрите.
[01:34:34.760 --> 01:34:36.760]  Давайте теперь вот идея такая, да.
[01:34:38.760 --> 01:34:44.760]  Вот рассмотрим, вот давайте рассматриваем вот эти ребра в порядке внимания БФС.
[01:34:47.760 --> 01:34:48.760]  Да.
[01:34:48.760 --> 01:34:49.760]  А можно и ДФС.
[01:34:49.760 --> 01:34:51.760]  Ну впрочем, главное вот аккуратно, главное чтобы.
[01:34:52.760 --> 01:34:53.760]  Ну чтобы в паре сверху вниз, так сказать.
[01:34:53.760 --> 01:34:55.760]  Значит, но нет, но тут важно в каком порядке, сейчас увидите почему.
[01:34:56.760 --> 01:34:58.760]  Потому что идея такая, вот рассмотрим вот это ребро.
[01:34:59.760 --> 01:35:04.760]  Оно реально, в реальности оно нас ведет куда-то, ну например, вот сюда.
[01:35:06.760 --> 01:35:07.760]  Ну тогда идея очень простая.
[01:35:08.760 --> 01:35:11.760]  Ладно, а давайте вот это ребро в дерево добавим, а вот это отпилим.
[01:35:13.760 --> 01:35:14.760]  Это реально.
[01:35:15.760 --> 01:35:16.760]  Это реально.
[01:35:17.760 --> 01:35:18.760]  Это реально.
[01:35:19.760 --> 01:35:20.760]  Это реально.
[01:35:21.760 --> 01:35:22.760]  Это реально.
[01:35:23.760 --> 01:35:26.760]  Вот тот остов, который нам тут это подсунули за минимальный.
[01:35:29.760 --> 01:35:30.760]  В компоненте сильный запас.
[01:35:31.760 --> 01:35:32.760]  Нет, ну вообще.
[01:35:34.760 --> 01:35:39.760]  То есть мы хотим доказать, что существует минимальный остов, то есть можно рассматривать только минимальные остовы,
[01:35:40.760 --> 01:35:43.760]  частью которых является конкретно вот эта штука.
[01:35:48.760 --> 01:35:49.760]  Вот что мы хотим.
[01:35:49.760 --> 01:35:52.760]  А мы же вот здесь оставили только нулевые ребра, правильно?
[01:35:53.760 --> 01:35:54.760]  Тут все ребра нулевые.
[01:35:55.760 --> 01:35:56.760]  Ну зеленые, только нулевые.
[01:35:57.760 --> 01:35:58.760]  А синий я не знаю.
[01:35:59.760 --> 01:36:00.760]  А вот эти вот между компоненты.
[01:36:01.760 --> 01:36:02.760]  А, все, все.
[01:36:03.760 --> 01:36:07.760]  Да, но важно, что, но сейчас мы будем важно пользоваться тем, что они не отрицательны.
[01:36:09.760 --> 01:36:10.760]  Где мы этим пользуемся?
[01:36:11.760 --> 01:36:13.760]  А мы этим пользуемся, когда вот заменяем вот это ребро на это,
[01:36:14.760 --> 01:36:16.760]  то есть от того, что мы заменили, вес ребра не увеличился.
[01:36:16.760 --> 01:36:18.760]  Да, кстати, вот это ребро теортически тоже, могло быть зеленым.
[01:36:19.760 --> 01:36:21.760]  А может и нет, я не знаю.
[01:36:22.760 --> 01:36:25.760]  Но самое главное для нас, почему мы, как бы, чем мы, ой.
[01:36:26.760 --> 01:36:27.760]  Ну, а вот точно зеленый значит.
[01:36:28.760 --> 01:36:29.760]  Круто.
[01:36:30.760 --> 01:36:31.760]  Чего мы, так, чего говорите?
[01:36:32.760 --> 01:36:33.760]  А вот точно тоже зеленый, тоже нулевой.
[01:36:34.760 --> 01:36:35.760]  Ну, можно и так сказать, да.
[01:36:36.760 --> 01:36:38.760]  Ну, что бы, ну, самоимечательно.
[01:36:39.760 --> 01:36:42.760]  Если бы мы, ну, новое нулевое ребро хребетия удалили бы не нулевое,
[01:36:42.760 --> 01:36:45.760]  если бы мы, ну, новое нулевое ребро хребетия удалили бы не нулевое.
[01:36:46.760 --> 01:36:47.760]  Ну, да.
[01:36:48.760 --> 01:36:49.760]  Ну, согласен, да.
[01:36:50.760 --> 01:36:51.760]  Да, просто.
[01:36:52.760 --> 01:36:53.760]  Или, можно сказать, да.
[01:36:54.760 --> 01:36:55.760]  Нет, или, да.
[01:36:56.760 --> 01:36:57.760]  Ну, тут по-разному можно доказать.
[01:36:58.760 --> 01:36:59.760]  Можно доказать просто.
[01:37:00.760 --> 01:37:01.760]  Пусть это миностов, да.
[01:37:02.760 --> 01:37:03.760]  И тогда заметим, что да, то есть можно это ребро заменить на это, и хуже не стало.
[01:37:04.760 --> 01:37:05.760]  А можно просто говорить, рассмотрим произвольный остов,
[01:37:06.760 --> 01:37:07.760]  и давайте его там превращать в остов такого вида,
[01:37:08.760 --> 01:37:09.760]  и доказывать попутно, что хуже от этого не стало.
[01:37:09.760 --> 01:37:12.760]  То есть тут это уже вкусовщина, а суть одна.
[01:37:14.760 --> 01:37:17.760]  Но самое главное, заметим, что почему тут нужна аккуратность.
[01:37:18.760 --> 01:37:22.760]  Но сейчас вот увидите какая, что как бы, что от того, что мы так заменили вот это ребро,
[01:37:23.760 --> 01:37:25.760]  остов остался остовом, обратите внимание.
[01:37:27.760 --> 01:37:28.760]  Значит, что дальше?
[01:37:30.760 --> 01:37:34.760]  Потому что дальше мы сделаем, теперь сделаем то же самое с вот этим ребром.
[01:37:35.760 --> 01:37:36.760]  Тоже его там.
[01:37:37.760 --> 01:37:40.760]  То есть где-то тут подвесим, вот сюда, а вот это вот удалим.
[01:37:41.760 --> 01:37:43.760]  Тоже остов пока остался остовом.
[01:37:46.760 --> 01:37:51.760]  Значит, соответственно, что у нас тут дальше теперь?
[01:37:53.760 --> 01:37:55.760]  Вот. Ну вот.
[01:37:56.760 --> 01:37:57.760]  Ну вот.
[01:37:58.760 --> 01:38:00.760]  Ну вот. Ну, значит, дальше у нас теперь происходит.
[01:38:01.760 --> 01:38:03.760]  Теперь то же самое делаем с вот этими ребрами.
[01:38:04.760 --> 01:38:06.760]  То есть кажется, что тут вот могут быть какие-то проблемы.
[01:38:07.760 --> 01:38:10.760]  То есть, видите, если там вот основные проблемы были с тем, что если вы просто
[01:38:11.760 --> 01:38:13.760]  отболдываете в каком-то порядке, заменяете ребра, то может так случиться,
[01:38:14.760 --> 01:38:16.760]  что остов в какой-то момент тупо перестанет быть остовом.
[01:38:17.760 --> 01:38:21.760]  Да, но если это делать именно в порядке БФС, то никаких проблем не будет.
[01:38:23.760 --> 01:38:25.760]  Почему проблем не будет?
[01:38:26.760 --> 01:38:29.760]  Потому что на этот раз вот эта вершина не может оказаться предком этой вершины,
[01:38:29.760 --> 01:38:34.760]  потому что в противном случае она была бы уже в нашем вот этом зеленом остове.
[01:38:40.760 --> 01:38:43.760]  Нет, но имеется в виду следующее, что в каждый момент времени у нас происходит следующее.
[01:38:44.760 --> 01:38:49.760]  То есть у вас есть вот, то есть у вас уже тут построена какая-то часть вот этого зеленого остова,
[01:38:50.760 --> 01:38:54.760]  и на ней там еще какие-то красные висят, в том числе, кстати, и на корне. Почему нет?
[01:38:54.760 --> 01:38:59.760]  Но заметим и здесь синие ребра, кстати, отметим на всякий случай, что они тут тоже на самом деле могут
[01:39:00.760 --> 01:39:02.760]  и вот таким вот образом идти. Почему нет?
[01:39:05.760 --> 01:39:07.760]  Да, но это нам не сильно принципиально.
[01:39:10.760 --> 01:39:16.760]  И вот нам очень хочется какое-нибудь тут следующее ребро зеленое вот тоже в БФС добавить.
[01:39:17.760 --> 01:39:21.760]  То есть ну тут, конечно, тут какое-то тут безобразие, безобразие, безобразие, безобразие, безобразие, безобразие.
[01:39:22.760 --> 01:39:27.760]  И вот неожиданно у нас тут потребовалось, чтобы следующее ребро было ввело вот сюда.
[01:39:28.760 --> 01:39:33.760]  Но заметим, что никаких проблем с тем, что вот добавить вот это ребро от пилитета у нас нет.
[01:39:34.760 --> 01:39:40.760]  То есть единственная проблема, которая могла быть, когда мы заменяем ребро на ребро, чтобы остов остался остовом.
[01:39:41.760 --> 01:39:45.760]  Но мы заметили, что до этой вершины мы как могли дойти от корня, так и можем.
[01:39:47.760 --> 01:39:49.760]  Ну вот, просто черезо зеленое, поэтому все в порядке.
[01:39:51.760 --> 01:39:56.760]  Но если бы такое ребро было бы брать предка, которое мы добавили.
[01:39:57.760 --> 01:39:59.760]  Ну да, но потому что, смотри, какая была бы ситуация.
[01:40:00.760 --> 01:40:05.760]  Вот если вот совсем от балды, то могло бы сказать так, что мы хотим в остов добавить вот такое ребро.
[01:40:06.760 --> 01:40:10.760]  Вот мы говорим, так, ну давайте вот это вот добавим, это добавим.
[01:40:11.760 --> 01:40:13.760]  Но тогда бах-бах, у нас тут цикл образовался.
[01:40:14.760 --> 01:40:20.760]  Да, поэтому надо, вот поэтому наша задача просто следить за тем, чтобы такого не было.
[01:40:21.760 --> 01:40:26.760]  Но конкретно в этом случае мы вот просто, если мы эти ребра в порядке БФС обходим.
[01:40:31.760 --> 01:40:34.760]  Ну да, по большому счету можно было и ДФС обходить.
[01:40:35.760 --> 01:40:38.760]  Но самое главное, чтобы каждое ребро рассматривалось после всех своих предков.
[01:40:39.760 --> 01:40:41.760]  Этого хватит.
[01:40:42.760 --> 01:40:44.760]  Ну конкретно в этом случае.
[01:40:45.760 --> 01:40:52.760]  Итак, мы, значит, добились того, что эту штуку действительно можно сжать, а потом, собственно, так жественно предъявить как ответ.
[01:40:53.760 --> 01:40:55.760]  Вот, понимаете, да?
[01:40:57.760 --> 01:40:58.760]  Вот.
[01:40:59.760 --> 01:41:02.760]  Значит, что у нас происходит теперь?
[01:41:04.760 --> 01:41:06.760]  Значит, что у нас происходит теперь?
[01:41:06.760 --> 01:41:11.760]  Ну да, нет, но это означает, что конкретно вот компонент, то есть вот это вот то, что мы можем по нулевым выборам дойти от корня.
[01:41:12.760 --> 01:41:17.760]  То есть мы действительно это можем сжать и искать минус 100 вот в предположении, что у нас внутри дерево будет такое.
[01:41:20.760 --> 01:41:22.760]  То есть вот.
[01:41:23.760 --> 01:41:25.760]  Ну вот.
[01:41:26.760 --> 01:41:28.760]  Ну вот.
[01:41:29.760 --> 01:41:31.760]  Ну вот.
[01:41:32.760 --> 01:41:34.760]  Ну вот.
[01:41:35.760 --> 01:41:37.760]  Ну вот.
[01:41:38.760 --> 01:41:39.760]  Теперь чуть более сложная.
[01:41:40.760 --> 01:41:41.760]  Теперь чуть-чуть, но чуть.
[01:41:42.760 --> 01:41:44.760]  Теперь вот заметим, вот рассмотрим вот эти все компоненты.
[01:41:45.760 --> 01:41:54.760]  Вот мы хотим показать, что действительно можно искать минус 100 в предположении, что каждая компонента будет образовывать связанное, так сказать, под дерево.
[01:41:55.760 --> 01:41:58.760]  Ну под дерево там с отпиленными пустиками, так сказать.
[01:41:59.760 --> 01:42:01.760]  Ну в том же смысле, в котором у нас были компоненты.
[01:42:02.760 --> 01:42:07.760]  Ну то есть что у нас там будет, что у нас там условно в этом будет вот какое-то дерево.
[01:42:18.760 --> 01:42:25.760]  Ну вот. И что любое там, и что наша компонента будет образовывать какое-то под дерево вот такого вида.
[01:42:26.760 --> 01:42:27.760]  Ну подвешенное.
[01:42:27.760 --> 01:42:32.760]  Ну вот, нет, а мы хотим доказать, что обязательно стоит искать именно так, чтобы оно таким и было.
[01:42:36.760 --> 01:42:37.760]  Значит как это доказывать?
[01:42:39.760 --> 01:42:41.760]  Ну доказывать ровно так же.
[01:42:51.760 --> 01:42:52.760]  Ну да, поэтому.
[01:42:52.760 --> 01:42:59.760]  Ну да, тут идея будет в том, что в этом дереве надо просто из этих всех вершин выбрать самую высокую.
[01:43:01.760 --> 01:43:05.760]  Ну то есть выбрать самую высокую, чтобы у нее там предков среди этих вершин не было.
[01:43:06.760 --> 01:43:15.760]  И после этого действительно строить стол, то есть там запустить из нее, то есть там соответственно будет запустить из нее вот это она, вот это она.
[01:43:15.760 --> 01:43:22.760]  Строить из нее, запустить из нее тут тоже построить вот это вот дерево внутри компоненты и построить его просто в этом столе.
[01:43:31.760 --> 01:43:32.760]  Вот такая вот будет идея.
[01:43:38.760 --> 01:43:43.760]  То есть тут тоже аккуратно с этими всеми отпилами и так далее и тому подобное.
[01:43:46.760 --> 01:43:51.760]  Да, получается, да, но правда я боюсь, у этого доказательства есть один маленький изъян.
[01:43:55.760 --> 01:43:57.760]  Потому что изъян заключается в следующем.
[01:43:57.760 --> 01:44:01.760]  Да, мы доказали, что существует минус 100, в котором можно сжать эту компоненту.
[01:44:04.760 --> 01:44:09.760]  Но на самом деле нам же требуется доказать больше, чтобы все одновременно.
[01:44:15.760 --> 01:44:34.760]  Ну по сути да, ну тут на самом деле да, то есть будет это из цикла, как сжимать компоненты, очень просто, рассмотрим все эти компоненты.
[01:44:34.760 --> 01:44:38.760]  Ну то есть так, сначала сожмем корень, это мы все сажали, все хорошо.
[01:44:39.760 --> 01:44:51.760]  Но на самом деле после этого делаем так, рассматриваем компоненты, в каждой находим вершину, которая выше всех и из них выбираем компоненту, в которой самая высокая вершина находится совсем-совсем выше всех.
[01:44:53.760 --> 01:44:54.760]  Вот сжимаем ее.
[01:44:56.760 --> 01:45:00.760]  Ну вот, но потом заметим, что эти компоненты могли переподвеситься там все.
[01:45:01.760 --> 01:45:02.760]  Вот понимаете, да?
[01:45:03.760 --> 01:45:08.760]  Поэтому кто-то оказался выше, кто-то ниже, поэтому каждый раз нам придется заново выбирать, кто выше, кто ниже.
[01:45:11.760 --> 01:45:17.760]  Вот тогда это если вот так уже действительно уже аккуратно довести, то тогда действительно вот это уже победой будет.
[01:45:20.760 --> 01:45:21.760]  Все совсем больно?
[01:45:23.760 --> 01:45:24.760]  Ну тебе-то да.
[01:45:25.760 --> 01:45:26.760]  А Данил что-то страдает.
[01:45:32.760 --> 01:45:33.760]  Компоненты.
[01:45:34.760 --> 01:45:35.760]  Постовы.
[01:45:35.760 --> 01:45:36.760]  Более.
[01:45:37.760 --> 01:45:38.760]  Ну да.
[01:45:38.760 --> 01:45:39.760]  Да.
[01:45:40.760 --> 01:45:48.760]  Почему, если мы в случайном порядке, у нас может нарушиться эта структура? Мы же никогда не будем выдерживать вершину из компонентов в районе рассмотания.
[01:45:49.760 --> 01:45:50.760]  Ну там.
[01:45:52.760 --> 01:45:54.760]  Ну по-по-по-по-по-по.
[01:45:55.760 --> 01:45:56.760]  А основной код припадет, конечно.
[01:45:57.760 --> 01:45:58.760]  Ну вот да, там просто.
[01:45:59.760 --> 01:46:00.760]  Хотя.
[01:46:03.760 --> 01:46:04.760]  Нет, ну просто.
[01:46:05.760 --> 01:46:06.760]  Нет, ну как бы нам что надо сделать.
[01:46:07.760 --> 01:46:08.760]  Вот мы тут построили вот это дерево.
[01:46:09.760 --> 01:46:10.760]  Допустим оно висит, вот с ним все хорошо, да.
[01:46:11.760 --> 01:46:12.760]  Теперь вот думаем.
[01:46:13.760 --> 01:46:14.760]  А если мы возьмем вот эти.
[01:46:15.760 --> 01:46:18.760]  А теперь давайте будем пытаться не трогая это под дерево припадвесить вот это.
[01:46:18.760 --> 01:46:22.760]  Ну просто какими мы делаем операцию, мы добавляем вот одно ребро, удаляем другое.
[01:46:23.760 --> 01:46:26.760]  Но ведь мы никогда не будем делать вершины из того под деревом, это будет вершина только из новой компоненты.
[01:46:27.760 --> 01:46:29.760]  Поэтому с другой компоненты бороться не будет.
[01:46:30.760 --> 01:46:31.760]  Мы ни одно ребро не удалим.
[01:46:32.760 --> 01:46:33.760]  А, ну получается да.
[01:46:34.760 --> 01:46:36.760]  Ну и все, когда оно даже не в порядке.
[01:46:37.760 --> 01:46:38.760]  Ну да, получается да.
[01:46:39.760 --> 01:46:40.760]  Так, хотя.
[01:46:41.760 --> 01:46:42.760]  Или что-то все-таки порочисто.
[01:46:45.760 --> 01:46:46.760]  Ну давай.
[01:46:46.760 --> 01:46:47.760]  А, ну хотя ладно.
[01:46:48.760 --> 01:46:49.760]  Ну тут получится так.
[01:46:50.760 --> 01:46:51.760]  Самое главное, что да.
[01:46:52.760 --> 01:46:54.760]  То есть утверждается, что вот эта компонента при перепадвешивании уже не пострадает никогда.
[01:46:55.760 --> 01:46:56.760]  То есть она может переподвеситься.
[01:46:57.760 --> 01:46:59.760]  Нет, она уже не переподвесится, потому что мы эту вершину трогать никогда не будем.
[01:47:00.760 --> 01:47:02.760]  Ну, ее родители где-то все-таки могут.
[01:47:03.760 --> 01:47:04.760]  Ну да, нет.
[01:47:05.760 --> 01:47:08.760]  Да, у какого-то ее родителя может замениться ребро, но это лишь означает, что само это дерево переподвесится.
[01:47:09.760 --> 01:47:14.760]  Да, но заметим, что у этих вершин ребра мы больше никогда не поменяем, поэтому структура останется.
[01:47:15.760 --> 01:47:19.760]  А мы всегда аккуратно следим, что у нас при каждой замене дерево остается деревом.
[01:47:20.760 --> 01:47:22.760]  А, ну да, вроде ладно все.
[01:47:23.760 --> 01:47:24.760]  У страха глаза велики.
[01:47:25.760 --> 01:47:26.760]  На самом деле все нормально.
[01:47:27.760 --> 01:47:28.760]  Ладно.
[01:47:29.760 --> 01:47:30.760]  Значит в самом начале делаем мы следующее.
[01:47:31.760 --> 01:47:35.760]  Мы, значит во-первых, значит каждая фаза алгоритма говорит нам следующее.
[01:47:36.760 --> 01:47:37.760]  Значит у нас есть граф.
[01:47:38.760 --> 01:47:39.760]  Да, взвешенный.
[01:47:39.760 --> 01:47:45.760]  Мы, во-первых, за е, за от е добиваемся того, что нету отрицательных ребр.
[01:47:46.760 --> 01:47:50.760]  Но в каждую вершину кроме корня входит хотя бы одно нулевое.
[01:47:53.760 --> 01:47:56.760]  Значит на этих нулевых ребрах мы делаем две вещи.
[01:47:57.760 --> 01:47:58.760]  Во-первых.
[01:48:01.760 --> 01:48:02.760]  Ну, в моей интерпретации.
[01:48:03.760 --> 01:48:04.760]  Ну, нулевых ребров.
[01:48:05.760 --> 01:48:07.760]  Да, вот рассмотрим только нулевые ребра.
[01:48:07.760 --> 01:48:08.760]  Нулевые ребра.
[01:48:09.760 --> 01:48:10.760]  Вот я когда зеленый рисую.
[01:48:11.760 --> 01:48:12.760]  Нулевые ребра.
[01:48:13.760 --> 01:48:15.760]  Во-первых, есть так, по не нулевым ребрам из эра мы некоторые вершины достижимы.
[01:48:16.760 --> 01:48:17.760]  Это во-первых.
[01:48:19.760 --> 01:48:20.760]  Вот.
[01:48:21.760 --> 01:48:23.760]  А также у нас еще есть какие-то компоненты сильной связности.
[01:48:25.760 --> 01:48:26.760]  На этих нулевых ребрах.
[01:48:27.760 --> 01:48:28.760]  Абсолютно.
[01:48:29.760 --> 01:48:32.760]  Ну, на этих нулевых ребрах тут еще какие-то безобразия могут быть.
[01:48:33.760 --> 01:48:35.760]  То есть входящие, тут висящие.
[01:48:35.760 --> 01:48:36.760]  Вот так вот.
[01:48:37.760 --> 01:48:39.760]  Нулевые как бы создали и все остальные просто забили.
[01:48:40.760 --> 01:48:42.760]  Почему из корня будет хотя бы одна вершина достижима?
[01:48:43.760 --> 01:48:44.760]  Ответ.
[01:48:45.760 --> 01:48:46.760]  Не почему.
[01:48:47.760 --> 01:48:48.760]  Это не обязательно.
[01:48:49.760 --> 01:48:50.760]  Нет.
[01:48:51.760 --> 01:48:52.760]  Ну, что-то будет достижимо.
[01:48:53.760 --> 01:48:54.760]  Хотя бы сама.
[01:48:55.760 --> 01:48:56.760]  Будет ли что-то большее?
[01:48:57.760 --> 01:48:58.760]  Не знаю.
[01:48:59.760 --> 01:49:01.760]  Более того, как бы если вы думаете, что там граф обязательно сожмется хотя бы в два раза, это вообще неверно.
[01:49:01.760 --> 01:49:05.760]  Потому что может быть вообще такая грустная ситуация, когда вот.
[01:49:06.760 --> 01:49:08.760]  Это вообще неверно.
[01:49:09.760 --> 01:49:16.760]  Потому что может быть, потому что может образоваться вот вообще вот такая грустная ситуация.
[01:49:18.760 --> 01:49:20.760]  Да, но для начала давайте обсудим, а что такое сжать.
[01:49:21.760 --> 01:49:23.760]  А сжать мы теперь говорим так.
[01:49:24.760 --> 01:49:25.760]  Значит, смотрите.
[01:49:26.760 --> 01:49:28.760]  То, что, до чего мы изр по нулевым ребрам дошли, мы сжимаем.
[01:49:28.760 --> 01:49:33.760]  А также сжимаем все найденные компоненты сильной связности.
[01:49:34.760 --> 01:49:35.760]  На графе с нулевыми ребрами?
[01:49:36.760 --> 01:49:37.760]  Да.
[01:49:38.760 --> 01:49:39.760]  Значит, мы сжимаем вершину.
[01:49:40.760 --> 01:49:41.760]  Вершина.
[01:49:42.760 --> 01:49:43.760]  У нас образовался граф.
[01:49:44.760 --> 01:49:45.760]  С меньшим числом вершин.
[01:49:46.760 --> 01:49:47.760]  Насколько меньшим?
[01:49:48.760 --> 01:49:49.760]  Возможно на одну вершину.
[01:49:50.760 --> 01:49:51.760]  Меньшим вот как в этом тесте.
[01:49:52.760 --> 01:49:53.760]  На этом новом графе мы повторяем.
[01:49:54.760 --> 01:49:56.760]  Мы рекурсивно находим миностов.
[01:49:57.760 --> 01:49:58.760]  Вот.
[01:49:59.760 --> 01:50:01.760]  И тогда и разжимаем эти компоненты.
[01:50:02.760 --> 01:50:03.760]  Что значит разжимаем?
[01:50:04.760 --> 01:50:09.760]  Это означает, что, во-первых, мы как бы вместо этой вершины добавляем корень и вот этот вот остов, по которому мы тут прошлись.
[01:50:10.760 --> 01:50:11.760]  Да.
[01:50:12.760 --> 01:50:16.760]  Да, напоминаю, исходно тут, конечно, вот это могла быть и вот такая история какая-то, в принципе.
[01:50:17.760 --> 01:50:18.760]  Поэтому надо оставить только остов.
[01:50:19.760 --> 01:50:25.760]  А в каждой компоненте мы, ну значит, мы для каждой вершины смотрим, по какому ребру мы в нее нашли в этом миностове.
[01:50:26.760 --> 01:50:28.760]  По какому-то вот такому ребру мы дошли.
[01:50:29.760 --> 01:50:30.760]  Всякое бывает.
[01:50:31.760 --> 01:50:34.760]  И из него, можно сказать, запускаем DFS.
[01:50:35.760 --> 01:50:36.760]  Вот так вот.
[01:50:37.760 --> 01:50:38.760]  Вот.
[01:50:39.760 --> 01:50:40.760]  Аккуратненько запускаем.
[01:50:42.760 --> 01:50:43.760]  И все.
[01:50:44.760 --> 01:50:47.760]  И после этого мы говорим, что мы победили.
[01:50:48.760 --> 01:50:51.760]  И говорим, что, собственно, полученное это и есть миностов.
[01:50:52.760 --> 01:50:54.760]  Вот так устроен алгоритм.
[01:50:55.760 --> 01:50:59.760]  Все остальное обсуждение, это аккуратные попытки доказать, что это вообще правда.
[01:51:12.760 --> 01:51:13.760]  Не-не-не.
[01:51:14.760 --> 01:51:15.760]  Ну оставили, естественно, только ребра, которые соединяли разные.
[01:51:16.760 --> 01:51:17.760]  То есть то, что было внутри, оно сжалось.
[01:51:18.760 --> 01:51:19.760]  Вот.
[01:51:20.760 --> 01:51:23.760]  Значит, на оставшемся, на полученном графе мы тоже нашли миностов.
[01:51:24.760 --> 01:51:25.760]  Рекурсивно.
[01:51:26.760 --> 01:51:27.760]  А теперь разжимаем.
[01:51:28.760 --> 01:51:29.760]  Каждая вершина разжалась.
[01:51:30.760 --> 01:51:33.760]  Каждая вершина, то есть у нас была бы жирная вершина.
[01:51:34.760 --> 01:51:38.760]  Но в ней осталось какое-то входящее ребро и куча исходящего.
[01:51:40.760 --> 01:51:45.760]  Но когда мы разжимаем, нам ее нужно заменить на какое-то зеленое поддерево.
[01:51:46.760 --> 01:51:50.760]  Ну мы просто смотрим, что это ребро на самом деле, оно входило в какую-то вершину.
[01:51:51.760 --> 01:51:52.760]  Да, мы вершину запускаем DFS.
[01:51:52.760 --> 01:51:56.760]  Да, мы знаем, что из этой вершины достижимы все, потому что это компоненты сильной связности.
[01:51:58.760 --> 01:51:59.760]  Ну вот.
[01:52:00.760 --> 01:52:08.760]  Поэтому, то есть это вот тут аккуратненько теперь превращается внутри себя вот в такую красоту.
[01:52:23.760 --> 01:52:24.760]  Конечно.
[01:52:25.760 --> 01:52:26.760]  Да.
[01:52:32.760 --> 01:52:33.760]  Ну сжатие проблема.
[01:52:34.760 --> 01:52:37.760]  Ну здесь сжатием никаких проблем нет.
[01:52:38.760 --> 01:52:42.760]  Более того, кстати, нет, сразу сжатием проблема вот в этих компонентах.
[01:52:43.760 --> 01:52:46.760]  Потому что непонятно, кто из них корень компоненты будет.
[01:52:46.760 --> 01:52:51.760]  Да, но это мы выясним потом, когда это дерево рекурсивно будет найдено.
[01:52:52.760 --> 01:52:54.760]  То есть заранее мы это предсказать не можем.
[01:52:55.760 --> 01:52:56.760]  Вот.
[01:52:57.760 --> 01:52:58.760]  И не должны.
[01:52:59.760 --> 01:53:00.760]  Вот, да.
[01:53:07.760 --> 01:53:08.760]  Ну сжали, да.
[01:53:09.760 --> 01:53:12.760]  Нет, проблема в том, чтобы аккуратно описать, как мы корень компоненты.
[01:53:12.760 --> 01:53:13.760]  Ну сжали, да.
[01:53:14.760 --> 01:53:17.760]  Нет, проблема в том, чтобы аккуратно описать, как мы приводим рожатие.
[01:53:18.760 --> 01:53:20.760]  Да, если для вас это не проблема, то ну и хорошо.
[01:53:27.760 --> 01:53:29.760]  Нет, мы не только корень.
[01:53:30.760 --> 01:53:32.760]  Нет, не путайте, корень просто тут видимо.
[01:53:33.760 --> 01:53:35.760]  Под этими словами может подмениваться несколько смыслов.
[01:53:39.760 --> 01:53:41.760]  Да, но мы все метавершины разжимаем.
[01:53:43.760 --> 01:53:44.760]  Ну по одной.
[01:53:51.760 --> 01:53:52.760]  Ну в данном случае да.
[01:53:53.760 --> 01:53:56.760]  Но пока это говорит нам только о том, что мы построили остов.
[01:53:59.760 --> 01:54:00.760]  Ну вот.
[01:54:01.760 --> 01:54:04.760]  Да, то есть дальнейшее мучение это то, почему он вообще минимальный.
[01:54:08.760 --> 01:54:09.760]  И что?
[01:54:09.760 --> 01:54:10.760]  И что?
[01:54:11.760 --> 01:54:12.760]  Нет, понимаете, мы, да, ну и что?
[01:54:13.760 --> 01:54:16.760]  А кто сказал, что обязательно там по нулевым ребрам надо бегать?
[01:54:17.760 --> 01:54:18.760]  Может вместо этого надо было просто?
[01:54:19.760 --> 01:54:20.760]  Да, почему мы?
[01:54:21.760 --> 01:54:22.760]  Почему обязательно?
[01:54:23.760 --> 01:54:24.760]  Может тут надо это как-то подразбить?
[01:54:25.760 --> 01:54:26.760]  Это там, это отдельно, это отдельно.
[01:54:27.760 --> 01:54:31.760]  Будут конечно куча положительных ребер, но суммарно они будут меньше, чем то, что получилось, если мы сказали, что мы это жестко сжимаем.
[01:54:39.760 --> 01:54:52.760]  Нет, мы же разрешили ставим, кажется, все и то, что у нас минастовы растут на одинаковую константу.
[01:54:57.760 --> 01:55:04.760]  Ну, как сказать, ну как бы от одного этого лайхака до вот этих сжатий все-таки тут еще доказывать и доказывать.
[01:55:05.760 --> 01:55:12.760]  Потому что мало ли, то есть пока это какая-то конструкция, она выглядит оптимально, но как бы одно дело выглядит, другое дело доказывать.
[01:55:14.760 --> 01:55:23.760]  А то у нас сегодня компоненты сильной связности конструкция тоже выглядела оптимально, но если копнуть, то выясняется, что она валится достаточно быстро, поэтому пришлось фиолетовый цвет выводить.
[01:55:23.760 --> 01:55:40.760]  Ну даже не что-то вроде, а она. Да, то есть этот алгоритм пока работает за ОАТВЕ по причине вот таких вот безобразных тестов.
[01:55:40.760 --> 01:55:59.760]  Так, нет, а что кратенько? Я думаю, тут и заново можно. Значит, алгоритм повторили, так, поняли алгоритм?
[01:55:59.760 --> 01:56:11.760]  Значит, теперь нам надо аккуратно доказать, что это действительно работает. Вот, что нам нужно доказать?
[01:56:12.760 --> 01:56:20.760]  Нам нужно доказать, что существует действительно минимальный остов, в котором действительно все эти найденные компоненты не разрывны.
[01:56:20.760 --> 01:56:42.760]  Ну в том плане, что, ну вот в этом смысле, что у каждой компоненты будет один корень и несколько потомков, в общем, идущих так сказать подряд, то есть не будет такого, что вот это вот, то есть не будет так, что это не в этой компоненте, а эти из этой компоненты. Такого не будет.
[01:56:42.760 --> 01:57:10.760]  Ну нам надо доказать, что если, что у нас в нашем остове, в минимальном, что можно сказать, что существует минимальный остов, в котором для каждой компоненты сильной связности вот этой нулевой, да, если мы рассмотрим ребра, лежащие строго внутри этой компоненты, то они будут образовывать подвешенные деревья.
[01:57:10.760 --> 01:57:27.760]  Подвешенный остов этой компоненты. Так это, так это как раз и есть переформулировка того, что мы действительно имеем право потом просто сжать эти компоненты в одну вершину и потом искать ответ рекурсивно.
[01:57:27.760 --> 01:57:41.760]  Причем все одновременно сжать, что важно. Нет, можно, конечно, на том уровне доказательства, которые у нас было, мы можем сжать одну компоненту искать рекурсивно дальше, этим точкой, кстати, будет та же.
[01:57:41.760 --> 01:57:54.760]  Почему у нас должно быть вот это непрерывным под деревом, чтобы это соответствовало сжатию?
[01:57:54.760 --> 01:58:04.760]  Ну, потому что когда мы будем разжимать, оно же будет непрерывным под деревом.
[01:58:04.760 --> 01:58:13.760]  Ну, поэтому как бы да. Если вы сказали, что существует миностов, в котором действительно будет сжимать, мы не знаем, кто кормит, то тогда значит мы тогда действительно сжимаем и ищем.
[01:58:13.760 --> 01:58:23.760]  Соответственно какой-то миностов. Потому что потом в будущем какой подвешенный не важно, потому что там все ребра все равно нулевые.
[01:58:23.760 --> 01:58:35.760]  Вот, собственно, чем мы и пользуемся. Теперь как выйдет доказательство? Доказательство будет такое, мы все это сжатые, делаем так.
[01:58:35.760 --> 01:58:48.760]  То есть мы берем какой-нибудь минимальный остов или просто какой-нибудь остов и аккуратно начинаем заменять какие-то ребра на нулевые ребра.
[01:58:48.760 --> 01:58:53.760]  Причем так, чтобы в этот остов вошли сначала вот эти все ребра.
[01:58:53.760 --> 01:58:56.760]  Подождите, мы же сжимали курсивно.
[01:58:56.760 --> 01:58:57.760]  Да.
[01:58:57.760 --> 01:59:06.760]  Тогда у вас же здесь какие компоненты вы рассматриваете при последней интерации разжатия?
[01:59:06.760 --> 01:59:10.760]  Нет, мы что сделали?
[01:59:10.760 --> 01:59:18.760]  Смотри, мы нашли компоненты, как алгоритм устроен, мы нашли компоненты, сжали, нашли шо-то рекурсивно, разжали.
[01:59:18.760 --> 01:59:28.760]  Ну вот, то есть мы доказываем, что мы имеем право сжимать. То есть что значит сжимать? Это означает, что мы ищем миностов?
[01:59:28.760 --> 01:59:34.760]  У нас есть какой-то граф, мы в нем находим эти компоненты.
[01:59:34.760 --> 01:59:40.760]  Значит, у нас известно, что на этом изначальном графе есть какой-то миностов.
[01:59:40.760 --> 01:59:43.760]  И типа мы хотим показать, что все работает хорошо.
[01:59:43.760 --> 01:59:45.760]  Да, что когда мы разжмем этот там?
[01:59:45.760 --> 01:59:49.760]  Сейчас когда мы сажмем начальник, сейчас надо лучше сажать. Это важно.
[01:59:49.760 --> 02:00:01.760]  Но нет, что мы имеем право сжимать. То есть мы имеем право искать миностов среди таких остовов, в которых в каждой компоненты индуцируют понтирила.
[02:00:11.760 --> 02:00:14.760]  Осталось только придумать. Как-то, видимо, надо переформулировать.
[02:00:14.760 --> 02:00:18.760]  В общем, проблема в том, что здесь очень много, здесь в общем 10 минут и заодно пытаются.
[02:00:18.760 --> 02:00:20.760]  Да нет, вроде.
[02:00:20.760 --> 02:00:22.760]  То есть мы сейчас итерационно доказываем.
[02:00:22.760 --> 02:00:25.760]  Да нет, ну по сути по индукции доказываем.
[02:00:25.760 --> 02:00:26.760]  Ну да.
[02:00:26.760 --> 02:00:30.760]  Хорошо, тогда у нас есть на каждой итерации, когда мы спускаемся вниз по алгоритму.
[02:00:30.760 --> 02:00:31.760]  Ну да.
[02:00:31.760 --> 02:00:34.760]  У нас на данную итерацию есть какой-то граф.
[02:00:34.760 --> 02:00:35.760]  Ну да.
[02:00:35.760 --> 02:00:38.760]  Там какие-то вершины, они на самом деле мета-вершины, но мы это как бы не знаем.
[02:00:38.760 --> 02:00:39.760]  Ну.
[02:00:39.760 --> 02:00:40.760]  Вот.
[02:00:40.760 --> 02:00:44.760]  Значит, мы вот на этом графе знаем, что есть какой-то миностов.
[02:00:44.760 --> 02:00:49.760]  И в тоже время строим эти, ну, ищем компоненты сильной связости.
[02:00:49.760 --> 02:00:51.760]  Вот в этом графе.
[02:00:51.760 --> 02:00:52.760]  Этот это какой?
[02:00:52.760 --> 02:00:54.760]  Это который в данной итерации.
[02:00:54.760 --> 02:00:55.760]  Угу.
[02:00:55.760 --> 02:01:01.760]  То есть вот для данной итерации у нас есть какой-то граф, для которого мы, ну, теоретически знаем миностов, что он есть.
[02:01:01.760 --> 02:01:04.760]  И еще на нем строим компонент сильной связости.
[02:01:04.760 --> 02:01:05.760]  Ну, на нулевых ребрах.
[02:01:05.760 --> 02:01:08.760]  Мы еще напоминаем, ребра висающие и подгоняем.
[02:01:08.760 --> 02:01:10.760]  Это самое начало, оно сделано.
[02:01:10.760 --> 02:01:11.760]  Нет.
[02:01:11.760 --> 02:01:13.760]  Просто завернем, что мы в рекурсии-то тоже это будем делать.
[02:01:13.760 --> 02:01:14.760]  Зачем?
[02:01:15.760 --> 02:01:16.760]  Они же у нас...
[02:01:16.760 --> 02:01:21.760]  Потому что там вот эта вершина сожмется и, возможно, в эту компоненту не входит ни одного зеленого ребра.
[02:01:23.760 --> 02:01:24.760]  Ну, мы же...
[02:01:24.760 --> 02:01:28.760]  Поэтому там будет абсолютно фактически, поэтому там веса еще поменяются.
[02:01:29.760 --> 02:01:32.760]  Тогда я уже опять не понял, как это.
[02:01:32.760 --> 02:01:34.760]  Мне казалось, что мы, типа, вначале в самом...
[02:01:34.760 --> 02:01:35.760]  Нет, смотри, да.
[02:01:35.760 --> 02:01:36.760]  Смотри, нет.
[02:01:36.760 --> 02:01:37.760]  Да, в начале мы все...
[02:01:37.760 --> 02:01:38.760]  Да, мы в начале добились того, что...
[02:01:38.760 --> 02:01:40.760]  Добились того, что у нас есть нулевые ребра и все...
[02:01:40.760 --> 02:01:42.760]  Да, в каждую вершину, кроме корня, входит ровно...
[02:01:42.760 --> 02:01:44.760]  Входит хотя бы одно нулевое ребро.
[02:01:45.760 --> 02:01:46.760]  Мы на них построили компоненты.
[02:01:47.760 --> 02:01:48.760]  На нулевых?
[02:01:48.760 --> 02:01:49.760]  Да.
[02:01:49.760 --> 02:01:50.760]  Сильной связости.
[02:01:50.760 --> 02:01:51.760]  Да.
[02:01:51.760 --> 02:01:52.760]  Построили компоненты сильной связности.
[02:01:52.760 --> 02:01:53.760]  Да.
[02:01:53.760 --> 02:01:54.760]  Сжали их в одну вершину, сконденсировали.
[02:01:55.760 --> 02:02:00.760]  На, получившимся в сжатом графе, мы рекурсивно нашли миностов.
[02:02:00.760 --> 02:02:02.760]  В сжатом графе ребра у него какие вот у сжатого графа?
[02:02:03.760 --> 02:02:05.760]  Мы добавляем обратно те, которые остались не нулевыми?
[02:02:06.760 --> 02:02:07.760]  Да.
[02:02:07.760 --> 02:02:09.760]  И которые будут между компонентами еще нулевыми?
[02:02:09.760 --> 02:02:10.760]  Да, конечно.
[02:02:10.760 --> 02:02:11.760]  Вот тогда окей.
[02:02:11.760 --> 02:02:13.760]  Да, конечно, будет нет.
[02:02:13.760 --> 02:02:16.760]  Потому что на этих нулевых ребрах, возможно, тупостого не существует.
[02:02:17.760 --> 02:02:18.760]  Ну, знаете...
[02:02:18.760 --> 02:02:21.760]  Нет, ну то есть так сказать, если существует, то вообще алгоритм на этом закончен,
[02:02:21.760 --> 02:02:24.760]  потому что все доступное из ЭР по нулевым ребрам это победа.
[02:02:25.760 --> 02:02:26.760]  Поэтому как бы...
[02:02:27.760 --> 02:02:28.760]  Хорошо, вот теперь все.
[02:02:28.760 --> 02:02:30.760]  Вот, да, старые ребра мы добавили.
[02:02:30.760 --> 02:02:32.760]  Ну вот, возвращаем на место.
[02:02:33.760 --> 02:02:35.760]  Да, теперь аккуратненько доказываем, значит.
[02:02:35.760 --> 02:02:37.760]  Почему сжимать можно?
[02:02:37.760 --> 02:02:40.760]  Почему вот так действительно все эти компоненты одновременно можно сжать?
[02:02:41.760 --> 02:02:46.760]  Ну, просто мы берем любой остов и аккуратно начинаем подменять ему ребра.
[02:02:46.760 --> 02:02:49.760]  То есть на каждом шаге мы там заменяем одно входящее ребро в вершину на другое.
[02:02:49.760 --> 02:02:51.760]  Так что остов остается остовом.
[02:02:51.760 --> 02:02:55.760]  Но при этом мы заменяем там какое-то условно...
[02:02:55.760 --> 02:02:58.760]  То есть какое-то ребро на зеленое ребро.
[02:02:58.760 --> 02:03:01.760]  При этом, что самое важное, старые зеленые ребра не убираем.
[02:03:01.760 --> 02:03:08.760]  Потому что наша цель добиться того, чтобы внутри каждой компоненты было остовное под дерево истины на зеленых ребрах.
[02:03:10.760 --> 02:03:11.760]  Пока вроде да.
[02:03:12.760 --> 02:03:13.760]  Ну вот.
[02:03:13.760 --> 02:03:14.760]  Ну, самое легкое.
[02:03:15.760 --> 02:03:16.760]  Ну, то есть будем делать это...
[02:03:16.760 --> 02:03:18.760]  Ну, начиная вот с этой вершины.
[02:03:18.760 --> 02:03:21.760]  То есть ребра будем перебирать в порядке БФСа, скажем.
[02:03:23.760 --> 02:03:24.760]  Ну вот.
[02:03:24.760 --> 02:03:25.760]  Ну, почему в порядке БФСа?
[02:03:25.760 --> 02:03:29.760]  То есть для того, чтобы убеждаться, что когда вы тут подменяете ребро на другое,
[02:03:29.760 --> 02:03:32.760]  у вас тут не получилось цикла какого-то.
[02:03:34.760 --> 02:03:35.760]  Ну или что то же самое.
[02:03:35.760 --> 02:03:36.760]  Нам нужно...
[02:03:36.760 --> 02:03:42.760]  Мы контролируем, что когда мы подменяем одно ребро на другое, у нас все еще доступно от корня.
[02:03:43.760 --> 02:03:44.760]  Вот.
[02:03:46.760 --> 02:03:47.760]  Да, на зеленом.
[02:03:48.760 --> 02:03:49.760]  То есть сначала вот эти ребра.
[02:03:49.760 --> 02:03:52.760]  Мы их можем добавить, потому что они ведут прямо из корня.
[02:03:52.760 --> 02:03:55.760]  Поэтому, что было доступно из корня, то и будет доступно из корня.
[02:03:56.760 --> 02:03:59.760]  То есть, ну, самое главное, вот эта вершина будет доступна из корня.
[02:03:59.760 --> 02:04:01.760]  Значит, все ее под дерево тоже будет доступно.
[02:04:06.760 --> 02:04:07.760]  Сейчас.
[02:04:08.760 --> 02:04:09.760]  Нет, красный это...
[02:04:09.760 --> 02:04:11.760]  Ну, просто произвольный какой-то остов.
[02:04:13.760 --> 02:04:15.760]  Можно даже не обязательно минимальный.
[02:04:15.760 --> 02:04:17.760]  Ну, если хотите, можно минимальный.
[02:04:17.760 --> 02:04:18.760]  Это неважно, мы этим не пользуемся.
[02:04:19.760 --> 02:04:23.760]  Нет, мы доказываем тем, что мы можем подменить у него ребра на ребра так,
[02:04:23.760 --> 02:04:26.760]  чтобы они как бы образовывали вот эти компоненты под деревья.
[02:04:28.760 --> 02:04:31.760]  И при этом то, что получилось не больше, чем красный.
[02:04:33.760 --> 02:04:34.760]  Не хуже.
[02:04:34.760 --> 02:04:35.760]  То есть это будет так.
[02:04:35.760 --> 02:04:40.760]  Для любого остова существует остов хорошего, то есть хорошего вида, который не хуже.
[02:04:40.760 --> 02:04:45.760]  Это и будет означать, что минимальный остов можно искать среди остовов там вот такого вида.
[02:04:45.760 --> 02:04:46.760]  Такого вида.
[02:04:50.760 --> 02:04:54.760]  Значит, сначала мы туда аккуратненько имплантируем вот это дерево.
[02:04:55.760 --> 02:04:58.760]  Потом из этих компонент у нас получился какое-то дерево.
[02:04:58.760 --> 02:05:00.760]  Заметьте, у нас тут под деревья переподвешивались только так.
[02:05:02.760 --> 02:05:05.760]  Поэтому после этого мы смотрим вот эти компоненты.
[02:05:05.760 --> 02:05:08.760]  В них находим самую высокую вершину.
[02:05:08.760 --> 02:05:10.760]  Вообще самую высокую.
[02:05:10.760 --> 02:05:13.760]  Допустим, какая-нибудь там вот она, скажем.
[02:05:14.760 --> 02:05:16.760]  Самая высокая вершина, да.
[02:05:16.760 --> 02:05:19.760]  И мы ту же операцию проворачиваем.
[02:05:20.760 --> 02:05:25.760]  Ну, то есть находим внутри этой компоненты сильной связисти под деревом, сколько именно в этой вершине.
[02:05:25.760 --> 02:05:27.760]  То есть старая, которая у нас жарит?
[02:05:27.760 --> 02:05:28.760]  Нет.
[02:05:31.760 --> 02:05:32.760]  Ну, я пока еще...
[02:05:32.760 --> 02:05:34.760]  Компонент сильной связисти это вообще пиздерит.
[02:05:34.760 --> 02:05:38.760]  Да, но компонент сильной связисти, опять же, что это такое?
[02:05:38.760 --> 02:05:45.760]  Это такой граф, в котором можно взять любую вершину и запустить DFS и построить астоп с корнем в ней.
[02:05:47.760 --> 02:05:50.760]  Мы из этих вершин выберем самую высокую вершину.
[02:05:53.760 --> 02:05:56.760]  Потому что у нас сейчас есть вот наше дерево, которое мы тут переделываем.
[02:05:59.760 --> 02:06:01.760]  Причем прямо сейчас.
[02:06:02.760 --> 02:06:06.760]  В момент, когда мы уже разобрались.
[02:06:06.760 --> 02:06:09.760]  То есть когда мы уже с этой разобрались, она уже есть.
[02:06:09.760 --> 02:06:11.760]  Все, мы это дерево больше трогать не будем.
[02:06:11.760 --> 02:06:14.760]  Теперь возьмем самую высокую вершину из этих вот всех.
[02:06:14.760 --> 02:06:16.760]  Вот пусть она вот в этой компоненте, вот она.
[02:06:16.760 --> 02:06:19.760]  Рассмотрим ее вот зеленое под дерево с корнем в ней.
[02:06:19.760 --> 02:06:21.760]  Ну, какое-нибудь.
[02:06:21.760 --> 02:06:23.760]  Зеленое под дерево с корнем в ней?
[02:06:23.760 --> 02:06:25.760]  Внутри этой компоненты.
[02:06:25.760 --> 02:06:26.760]  Хорошо рассмотрим.
[02:06:26.760 --> 02:06:32.760]  Вот тогда аккуратненько имплантируем его в наше дерево тем же методом.
[02:06:46.760 --> 02:06:47.760]  А очень просто.
[02:06:47.760 --> 02:06:48.760]  Значит давайте еще раз.
[02:06:48.760 --> 02:06:51.760]  Мы перебираем эти ребра в порядке BFS здесь.
[02:06:51.760 --> 02:06:55.760]  И каждый ребро говорим, что если это ребро уже есть в дереве, то все хорошо.
[02:06:55.760 --> 02:06:57.760]  Если нет, то мы его добавляем в дерево.
[02:06:57.760 --> 02:07:03.760]  И удаляем входящее ребро вот в эту вершину.
[02:07:03.760 --> 02:07:04.760]  Ну вот.
[02:07:04.760 --> 02:07:10.760]  То есть делая это в порядке BFS мы гарантируем, что на каждом шаге дерево остается деревом.
[02:07:15.760 --> 02:07:16.760]  Ну вот.
[02:07:16.760 --> 02:07:17.760]  Ну нет.
[02:07:17.760 --> 02:07:18.760]  Дерево осталось деревом.
[02:07:18.760 --> 02:07:24.760]  Ну как бы, если мы одно ребро добавили, одно удалили и все еще доступно искоре, значит это и остов.
[02:07:24.760 --> 02:07:29.760]  Причем хуже он не стал, потому что мы заменили какое-то ребро на нулевое ребро.
[02:07:32.760 --> 02:07:33.760]  Конечно.
[02:07:33.760 --> 02:07:35.760]  У нас все подвешено за R.
[02:07:36.760 --> 02:07:38.760]  Вот здесь в общем-то тоже мы примерно то же самое делаем.
[02:07:38.760 --> 02:07:42.760]  Здесь конечно уже хитрее, потому что эта вершина уже не совсем R.
[02:07:42.760 --> 02:07:44.760]  Но мы знаем, что она самая высокая.
[02:07:44.760 --> 02:07:52.760]  Поэтому окажется, что у нас до этой вершины на самом деле есть теперь какой-то вот такой вот путь.
[02:07:52.760 --> 02:07:57.760]  Но когда мы будем вот это дерево строить, то мы вот эти вершины трогать не будем.
[02:07:59.760 --> 02:08:00.760]  Понимаете, да?
[02:08:00.760 --> 02:08:04.760]  И вообще мы ни одной вершины, ни одной из этих компонент, кстати, тоже не тронем.
[02:08:04.760 --> 02:08:05.760]  Обратите внимание.
[02:08:07.760 --> 02:08:08.760]  Ну вот.
[02:08:08.760 --> 02:08:12.760]  Ну хотя нет, теоретически тронем в каком плане входящие ребра в них.
[02:08:12.760 --> 02:08:17.760]  Исходящие, то есть может быть нам придется, может быть тут на самом деле у нас в дереве было вот какое-то вот такое ребро.
[02:08:17.760 --> 02:08:19.760]  Мы его сейчас удалим для того, чтобы добавить вот это.
[02:08:20.760 --> 02:08:23.760]  Но ничего страшного само по себе это не делает.
[02:08:25.760 --> 02:08:31.760]  Потому что мы замечаем, что эта вершина, она была доступна из R и осталась доступна из R.
[02:08:31.760 --> 02:08:33.760]  Мы вот аккуратно проследили.
[02:08:35.760 --> 02:08:40.760]  Потому что, видите, когда мы заменяем ребро, единственное, почему может произойти, что эта вершина перестала быть доступна,
[02:08:40.760 --> 02:08:51.760]  это то, что, допустим, она была, то есть это то, что, скажем, она была доступна только, скажем, по этому ребру.
[02:08:56.760 --> 02:09:00.760]  Вот, то есть она вот, то есть может быть откуда-то отсюда шли.
[02:09:00.760 --> 02:09:02.760]  Но это возможно только при зацикливании.
[02:09:10.760 --> 02:09:23.760]  Ну, потому что в реальное красное дерево могло быть устроено вообще как угодно. Вот как-то вот так вот оно могло быть устроено.
[02:09:23.760 --> 02:09:25.760]  Какое-то вот такое безобразие.
[02:09:28.760 --> 02:09:29.760]  А что такое?
[02:09:29.760 --> 02:09:33.760]  На скорень был, была та вершина, в которой входит ребро.
[02:09:34.760 --> 02:09:41.760]  А, ну это я, ну я, я выбрал самое, ну там дерево могло быть так, что в эту компоненту пока входят и два, и три, и четыре ребра.
[02:09:42.760 --> 02:09:47.760]  То есть да, в какой-то момент, кстати, да, вот это вот там тоже придется отпилить на самом деле, но это я от балды нарисовал.
[02:09:48.760 --> 02:09:51.760]  Да, то есть надо было, может, правильнее вот эту красную там куда-нибудь сюда, но не важно.
[02:09:54.760 --> 02:09:55.760]  Ну да.
[02:09:56.760 --> 02:09:57.760]  Так что, ну вот.
[02:10:00.760 --> 02:10:01.760]  Ну вот.
[02:10:02.760 --> 02:10:09.760]  Так что, да, то есть главное следить, то есть главное аккуратно следить, да, что когда вы тут ставите ребро, что эта вершина не была потомком этой вершины.
[02:10:10.760 --> 02:10:19.760]  Вот, а потомком она не была, потому что мы, собственно, ну здесь она не была, потому что эту вершину мы самой высокой выбирали, да, втровно для того, чтобы избежать этой ситуации.
[02:10:20.760 --> 02:10:30.760]  Вот, тогда сначала построили вот эти ребра, потом автоматически понимаем, что там эта вершина не может быть теперь в новом дереве потомком, скажем, вот этой вершины.
[02:10:31.760 --> 02:10:32.760]  Ну вот.
[02:10:33.760 --> 02:10:37.760]  Ну, потому что если эта вершина предок этой вершины, то она и предок этой вершины, а такого у нас не бывает.
[02:10:38.760 --> 02:10:41.760]  Потому что у нас все происходит ниже этой вершины, и вот эта компонента построена.
[02:10:42.760 --> 02:10:49.760]  Теперь мы аккуратненько действительно потом из оставшихся вершин тоже выбираем там самую высокую, ну и так далее.
[02:10:50.760 --> 02:10:57.760]  То есть мы аккуратно убеждаемся, то есть аккуратно, то есть важно, что с этими компонентами ничего не произойдет, они там нигде не отсекутся.
[02:10:58.760 --> 02:10:59.760]  Ну хотя это, ну вот.
[02:11:00.760 --> 02:11:05.760]  То есть они не отсекутся, потому что заметим, что вот эти вот, конечно, вот эти вот под деревья их мы уже трогать не будем.
[02:11:06.760 --> 02:11:11.760]  Потому что мы не будем, потому что мы для этих вершин не будем подменять входящие в них ребра.
[02:11:12.760 --> 02:11:13.760]  Следовательно, под дерево останется.
[02:11:14.760 --> 02:11:20.760]  И тогда аккуратно разобрались здесь, ну вот, дальше аккуратно разобрались там со следующей компонентой, со следующей, ну и так далее по очереди.
[02:11:22.760 --> 02:11:27.760]  И таким образом мы доказали, что сжимать действительно можно все вершины.
[02:11:28.760 --> 02:11:29.760]  Вот, понимаете, да?
[02:11:30.760 --> 02:11:34.760]  То есть все вот эти найденные компоненты сильной связности реально можно.
[02:11:35.760 --> 02:11:36.760]  Сжимать.
[02:11:38.760 --> 02:11:40.760]  То есть таким образом алгоритм доказан.
[02:11:41.760 --> 02:11:42.760]  Его корректность.
[02:11:43.760 --> 02:11:45.760]  Но правда маленькая проблема, работает он CVE.
[02:11:48.760 --> 02:11:49.760]  Ну как проблема.
[02:11:51.760 --> 02:11:52.760]  Да, на самом деле, честно скажем, что...
[02:11:53.760 --> 02:11:56.760]  Так, вот да, теперь начинается самое интересное, потому что сейчас опять будет новинка.
[02:11:58.760 --> 02:11:59.760]  Вот.
[02:12:00.760 --> 02:12:04.760]  Ну вот, потому что до прошлого года включительно, в общем-то, мы бы на этом и остановились.
[02:12:06.760 --> 02:12:07.760]  Да.
[02:12:08.760 --> 02:12:09.760]  Но, как всегда, да.
[02:12:12.760 --> 02:12:13.760]  Ну вот, а теперь задача.
[02:12:14.760 --> 02:12:16.760]  Теперь задача вот такая, что...
[02:12:17.760 --> 02:12:19.760]  А теперь утверждается, что можно это реализовать за E лог В.
[02:12:21.760 --> 02:12:25.760]  Использовав магическое словосочетание, сливаемые кучи.
[02:12:25.760 --> 02:12:26.760]  Внимание, вопрос.
[02:12:27.760 --> 02:12:28.760]  Как?
[02:12:31.760 --> 02:12:32.760]  Вот действительно, как вы думаете?
[02:12:34.760 --> 02:12:37.760]  Как же мы могли бы действительно тут это все забабахать?
[02:12:42.760 --> 02:12:44.760]  Ну да, что такое сливаемые кучи, да?
[02:12:45.760 --> 02:12:48.760]  То есть это кучи, у которых есть операция возьми две кучи и объеди.
[02:12:50.760 --> 02:12:52.760]  Ну и понятно, Ирина, ну и как это?
[02:12:52.760 --> 02:12:53.760]  И объедини.
[02:12:54.760 --> 02:13:01.760]  Ну и понятно, Ирина, ну и как всегда, со старыми интерфейсами типа добавь элемент в кучу, там достань минимум, там посмотри минимум, достань минимум.
[02:13:03.760 --> 02:13:04.760]  Ну, собственно, и так далее и тому подобное.
[02:13:07.760 --> 02:13:09.760]  Ну вот, вот теперь давайте думать.
[02:13:10.760 --> 02:13:15.760]  Вот как вы думаете, вот как вы думаете, где здесь можно выковырить, собственно, E лог В?
[02:13:23.760 --> 02:13:26.760]  Вот как вы думаете, где здесь его можно выковырить?
[02:13:37.760 --> 02:13:47.760]  Ну действительно, в первую очередь, с одной стороны рекурсивно, да, но с другой стороны, смотрите, можно сделать так, вот мы говорим нулевые ребра, нулевые ребра математически, да?
[02:13:48.760 --> 02:14:00.760]  Но в реальности, на самом деле, мы говорим, что мы можем сказать, назовем ребро зеленым, если оно обладает минимальным весом среди всех ребр, входящих в эту вершину, правда?
[02:14:01.760 --> 02:14:02.760]  По факту-то, да?
[02:14:03.760 --> 02:14:05.760]  И работаем мы именно на этих зеленых ребрах.
[02:14:06.760 --> 02:14:30.760]  Вот, соответственно, вот, ну вот, поэтому, да, то есть, возникает действительно идея, что искать, действительно, эти минимальные ребра, действительно, можно было бы, вот, по принципу, что, то есть, давайте для каждой вершины все входящие ребра храним в какой-нибудь куче.
[02:14:31.760 --> 02:14:41.760]  Ну да, достаем оттуда минимум, а когда там у нас какие-то вершины сжимаются в компонент, мы эти кучи такжественно сжимаем.
[02:14:42.760 --> 02:14:43.760]  Ну сливаем, да.
[02:14:45.760 --> 02:14:47.760]  Ну вот, ну, да, сливаем, да.
[02:14:47.760 --> 02:14:48.760]  Сливаем, да.
[02:14:49.760 --> 02:14:50.760]  Вот.
[02:14:51.760 --> 02:15:01.760]  Ну, правда, то есть, вот, на уровне идеи, да, то есть, действительно, если мы, то есть, если бы мы за быстро как-нибудь умели находить, а что надо сливать, вот какой-нибудь вот такой циклик находить хотя бы, да?
[02:15:02.760 --> 02:15:11.760]  Вот хотя бы циклик. Ведь, на самом деле, заметим, тут даже можно ослабить доказательства, потому что мы могли бы работать по принципу, построим, то есть, допустим, у нас есть зеленые ребра, да?
[02:15:12.760 --> 02:15:20.760]  Если у нас эти ребра образуют какой-нибудь циклик, то мы этот циклик сжимаем и дальше запускаемся типа рекурсивно, да?
[02:15:21.760 --> 02:15:33.760]  А на самом деле мы сжимаем так, мы сжимаем циклик, да, обновляем понятие зеленые ребра, потому что когда мы сжали циклик, да, теперь нам нужно находить минимальные ребра, которые входят вот в целые четыре вершины вот эти.
[02:15:34.760 --> 02:15:35.760]  Ну в данном случае, четыре или сколько там их в цикле.
[02:15:36.760 --> 02:15:47.760]  Вот. Но для этого, как раз, мы делаем кучу сливаемыми, то есть мы сливаем четыре кучи, они достаем минимуме, причем аккуратно следим, что если у нас какое-то ребро сейчас лежит уже внутри одной компоненты, то мы его типа игнорируем.
[02:15:49.760 --> 02:15:55.760]  То есть лишних таких операций, так как каждое ребро будет выкинуто не более чем один раз, поэтому там больше чем ЕЛОКВМ и на это не потратим.
[02:15:56.760 --> 02:15:57.760]  Вот.
[02:15:58.760 --> 02:16:04.760]  Ну и теперь остается только интересный вопрос. А как же нам аккуратно следить?
[02:16:05.760 --> 02:16:09.760]  Как же нам вот аккуратно находить, а что вообще надо сжимать?
[02:16:12.760 --> 02:16:15.760]  Как бы мы могли это сделать?
[02:16:29.760 --> 02:16:31.760]  Вот давайте внимательно подумаем.
[02:16:32.760 --> 02:16:34.760]  Вот даже, даже вот дам чуть-чуть подумать.
[02:16:36.760 --> 02:16:38.760]  Компонент сильно связан с опытом.
[02:16:39.760 --> 02:16:40.760]  Вот.
[02:16:41.760 --> 02:16:43.760]  Забыстро. Задолго. Ну В плюс Е, да.
[02:16:44.760 --> 02:16:50.760]  Потому что он, не знаю, не искрает сильно связанности, а и только циклики.
[02:16:51.760 --> 02:16:55.760]  Да, да, поэтому да. То есть действительно искать течение, что можно искать напрямую циклики, это было бы удобно.
[02:16:56.760 --> 02:16:58.760]  Более того, я вам даже больше скажу.
[02:16:59.760 --> 02:17:03.760]  На самом деле мы всегда можем предположить, что ребра у нас все попарно различны.
[02:17:04.760 --> 02:17:11.760]  Ну потому что даже если они попарно не различны, да, ну мы же можем мысленно эти эпсилоны навесить, помните?
[02:17:14.760 --> 02:17:24.760]  Ну там, ну идея такая, что даже если они различны, то давайте рассмотрим какой-нибудь очень-очень-очень-очень-очень-очень-очень маленький эпсилон.
[02:17:26.760 --> 02:17:28.760]  Вот прям очень маленький.
[02:17:29.760 --> 02:17:35.760]  И прибавим к каждому ребру там, допустим, эпсилон умножить на два в степени его номер.
[02:17:41.760 --> 02:17:45.760]  Да, чтобы, ну во-первых, мы сделали их разными, то есть разными настолько, что как бы,
[02:17:46.760 --> 02:17:49.760]  то есть теперь, ну теперь заметим, теперь я просто могу гарантировать следующее.
[02:17:50.760 --> 02:17:54.760]  Что мало того, то есть я так гарантирую так, мало того, что у нас все ребра теперь попарно различны.
[02:17:55.760 --> 02:18:03.760]  Так еще и я утверждаю, что веса всех этих ребр тоже, веса всех остовов тоже стали теперь попарно различны.
[02:18:06.760 --> 02:18:14.760]  Но самое главное, что я утверждаю, что вес каждого остову увеличился не более, чем эпсилон умножить на два в степени количества ребр, правда?
[02:18:15.760 --> 02:18:16.760]  И еще умножить на два.
[02:18:17.760 --> 02:18:18.760]  Да, логично.
[02:18:19.760 --> 02:18:27.760]  Вот, но соответственно теперь, если, ну если предположить без особого ограничения в обществе, что все веса у нас целые, например,
[02:18:29.760 --> 02:18:34.760]  но вот, то тогда окажется, что все веса, то есть как бы, если эпсилон взять достаточно маленьким,
[02:18:35.760 --> 02:18:40.760]  то тогда окажется, что если были два остова и один был меньше другого, то так и осталось.
[02:18:41.760 --> 02:18:49.760]  Потому что разность между ними была один, а увеличились основы не более, чем на, там, эпсилон на два в степени, там, что-то там, и эпсилон, если взять очень маленький.
[02:18:51.760 --> 02:18:57.760]  То есть поэтому на уровне идеи, то есть можно, на самом деле, не заморачиваться об случае, то есть считать, что все веса попарно различны.
[02:18:58.760 --> 02:19:05.760]  То есть с точки зрения реализации это будет выглядеть как, что просто вы считаете, что если ребра по весу равны, вы их сравниваете тупо по ID-шкику.
[02:19:07.760 --> 02:19:08.760]  Вот, понимаете, да?
[02:19:09.760 --> 02:19:10.760]  Вот, понимаете?
[02:19:11.760 --> 02:19:13.760]  Отлично. Вот, топилича.
[02:19:14.760 --> 02:19:19.760]  Но тогда, что это нам дает? Это нам, тогда, чем нам приятен случай, когда у нас все ребра парно различны?
[02:19:20.760 --> 02:19:27.760]  Он нам приятен тем, что в каждую ребро, в каждую вершину, кроме корня, будет входить ровно одно ребро, правда?
[02:19:29.760 --> 02:19:30.760]  Понимаете, да?
[02:19:31.760 --> 02:19:33.760]  Ну вот, там скажем, ровно одно ребро.
[02:19:33.760 --> 02:19:43.760]  Но тогда давайте посмотрим, как же у нас выглядит, как же у нас выглядит граф, в котором в каждую вершину, кроме корня, входит ровно одно ребро.
[02:20:04.760 --> 02:20:05.760]  Ну вот.
[02:20:06.760 --> 02:20:08.760]  Ну да, то есть действительно, заметим.
[02:20:09.760 --> 02:20:10.760]  Ну да.
[02:20:11.760 --> 02:20:13.760]  То есть действительно, то есть заметим следующее, да?
[02:20:14.760 --> 02:20:17.760]  Ну давайте, как в этом убедиться? Просто мысленно в этом всегда убеждаться.
[02:20:18.760 --> 02:20:19.760]  Ну это, думаю, там это...
[02:20:20.760 --> 02:20:22.760]  А, или это так скучно, что все уже в телефонах?
[02:20:23.760 --> 02:20:24.760]  Нет? Ну мало ли.
[02:20:25.760 --> 02:20:30.760]  Нет, я понимаю, что нет, просто боюсь, что то, что я сейчас рассказываю мне на уровне ощущений, просто многие олимпиадники придумывают на олимпиаде сами.
[02:20:31.760 --> 02:20:36.760]  Ну просто тут идея такая, как выглядит граф, в котором в каждую вершину входит ровно одно ребро.
[02:20:37.760 --> 02:20:42.760]  Ну вот, для этого рассмотрим вершину, рассмотрим входящее в нее ребро.
[02:20:43.760 --> 02:20:44.760]  Вот оно пришло откуда-то.
[02:20:45.760 --> 02:20:46.760]  Сюда тоже входит какое-то ребро.
[02:20:47.760 --> 02:20:48.760]  Вот.
[02:20:49.760 --> 02:20:50.760]  И сюда входит.
[02:20:51.760 --> 02:20:52.760]  И будем так идти.
[02:20:53.760 --> 02:20:57.760]  Ну как бы уже сказали, мы либо упремся в наш корень, да?
[02:20:57.760 --> 02:20:58.760]  Да?
[02:20:59.760 --> 02:21:00.760]  Ну вот.
[02:21:01.760 --> 02:21:06.760]  Либо у нас это рано или поздно зациклится.
[02:21:09.760 --> 02:21:16.760]  То есть из этого будет следовать, что каждая вершина доступна либо из какого-то цикла, либо из корня.
[02:21:17.760 --> 02:21:23.760]  Кстати, с этой точки зрения можем просто даже для удобства считать, что просто корень это такая вершина, у которой есть ребро ведущее в себя.
[02:21:24.760 --> 02:21:26.760]  То есть все доступно.
[02:21:27.760 --> 02:21:37.760]  Но тогда заметим, что так как в каждую вершину входит ровно одно ребро, то получается, что если мы рассмотрим, что доступно из цикла, то получается, что есть цикл, в него ничего не входит больше.
[02:21:38.760 --> 02:21:40.760]  Но из него выходят вот какие-то подвешенные деревья.
[02:21:41.760 --> 02:21:44.760]  Кажется, чуть-чуть там сломались ребра.
[02:21:45.760 --> 02:21:47.760]  Цикл не цикл.
[02:21:48.760 --> 02:21:49.760]  Не цикличный цикл.
[02:21:50.760 --> 02:21:51.760]  Да, действительно.
[02:21:51.760 --> 02:21:52.760]  Да, действительно.
[02:21:53.760 --> 02:21:54.760]  Ну ничего.
[02:21:55.760 --> 02:21:56.760]  Не эти.
[02:21:57.760 --> 02:21:58.760]  Эти, эти, эти.
[02:21:59.760 --> 02:22:02.760]  Если бы я вот эти разворачивал, было бы два исходящих.
[02:22:09.760 --> 02:22:15.760]  То есть получается вот такой вот граф, именуемый среди мирного населения Солнышко.
[02:22:16.760 --> 02:22:17.760]  Вот такой может быть.
[02:22:18.760 --> 02:22:19.760]  Иногда Солнышко с щупальцами.
[02:22:19.760 --> 02:22:20.760]  Ну это уже.
[02:22:26.760 --> 02:22:27.760]  Ну я не знаю.
[02:22:28.760 --> 02:22:29.760]  Как бы этот граф именуемый не считается.
[02:22:30.760 --> 02:22:31.760]  Ну вот.
[02:22:32.760 --> 02:22:35.760]  Ну как бы да, в Олипиадах там на всех ростах бывали задачи на самом деле наподобные.
[02:22:36.760 --> 02:22:37.760]  На графы вот на этом.
[02:22:38.760 --> 02:22:39.760]  Там такого вида.
[02:22:40.760 --> 02:22:41.760]  Ну правда, может наоборот.
[02:22:42.760 --> 02:22:45.760]  Там чаще бывает структура, когда наоборот из каждой вершины исходит ровно одно ребро.
[02:22:46.760 --> 02:22:47.760]  Да.
[02:22:47.760 --> 02:22:48.760]  Вот.
[02:22:49.760 --> 02:22:50.760]  Ну и так далее.
[02:22:51.760 --> 02:22:52.760]  Так вот.
[02:22:53.760 --> 02:22:55.760]  Значит тогда у нас вот есть такие штуки.
[02:22:56.760 --> 02:22:57.760]  То есть вот так граф устроен.
[02:22:58.760 --> 02:23:01.760]  И нам нужно находить оперативно циклы и их сжимать.
[02:23:03.760 --> 02:23:04.760]  Вот там как это надо.
[02:23:06.760 --> 02:23:07.760]  И желательно находить их быстро.
[02:23:09.760 --> 02:23:12.760]  То есть в чем доказали мы эту структуру, используя вот это вот просто.
[02:23:12.760 --> 02:23:17.760]  Вот это вот просто взяв одну вершину и жадно начиная из нее идти.
[02:23:18.760 --> 02:23:19.760]  Понимаете, да?
[02:23:23.760 --> 02:23:24.760]  Ну так вот.
[02:23:25.760 --> 02:23:27.760]  На самом деле я утверждаю, что алгоритм использует сливаемые кучи.
[02:23:28.760 --> 02:23:31.760]  То есть в каждой вершине мы храним сливаемую кучу из ребер, входящих в нее.
[02:23:34.760 --> 02:23:37.760]  И зеленым ребром оказывается просто ребро минимальное по весу.
[02:23:38.760 --> 02:23:39.760]  То есть то, которое нам куча вытвердит.
[02:23:39.760 --> 02:23:42.760]  Так вот, алгоритм оказывается неожиданно простым.
[02:23:44.760 --> 02:23:45.760]  Ну или вы сейчас меня завалите.
[02:23:47.760 --> 02:23:49.760]  В принципе оба варианта будут веселыми.
[02:23:50.760 --> 02:23:56.760]  Смотрите, давайте просто применим, будем применять этот же жадник.
[02:23:58.760 --> 02:24:00.760]  Берем первую попавшуюся вершину.
[02:24:00.760 --> 02:24:06.760]  Рассмотрим, будем строить вот такую последовательность, такую цепочку.
[02:24:07.760 --> 02:24:09.760]  То есть берем зеленое ребро, то есть минимальное ребро, входящее в нее.
[02:24:12.760 --> 02:24:13.760]  Вот, берем эту вершину.
[02:24:15.760 --> 02:24:17.760]  Смотрим, берем ее зеленое ребро и так далее.
[02:24:18.760 --> 02:24:20.760]  Идем, идем, идем и строим прям в явном виде эту цепочку.
[02:24:22.760 --> 02:24:24.760]  В какой-то момент счастье закончится.
[02:24:25.760 --> 02:24:27.760]  В какой-то момент счастье закончится.
[02:24:30.760 --> 02:24:31.760]  Но чем оно закончится?
[02:24:32.760 --> 02:24:33.760]  Ну тут два варианта.
[02:24:34.760 --> 02:24:35.760]  Вариант номер раз.
[02:24:36.760 --> 02:24:38.760]  В какой-то момент может закончиться тем, что...
[02:24:39.760 --> 02:24:43.760]  Ну давайте предположим, что в какой-то момент неожиданно обнаружилось, что в какую-то вершину мы вошли второй раз.
[02:24:49.760 --> 02:24:50.760]  Тогда что же у нас получится?
[02:24:50.760 --> 02:24:51.760]  Что же у нас получится?
[02:24:52.760 --> 02:24:54.760]  Ну тогда этот цикл мы можем за от...
[02:24:55.760 --> 02:24:57.760]  Ну тогда мы понятно там где-нибудь в массиве юзид же мы наверно...
[02:24:58.760 --> 02:25:01.760]  В массиве юзид наверно можем хранить, что эта вершина у нас уже была.
[02:25:03.760 --> 02:25:04.760]  Ну понятно вот.
[02:25:05.760 --> 02:25:10.760]  И тогда раз мы находим эту вершину, то значит мы тогда за от длины этого цикла восстанавливаем сам этот цикл.
[02:25:11.760 --> 02:25:12.760]  Мы же все это записываем.
[02:25:14.760 --> 02:25:16.760]  И значит тогда просто сжимаем его.
[02:25:17.760 --> 02:25:18.760]  То есть у нас теперь цепочка.
[02:25:18.760 --> 02:25:29.760]  И вот эту вот новую вершину мы также теперь объявляем единой.
