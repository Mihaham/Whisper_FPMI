[00:00.000 --> 00:08.720]  Ладно, давайте тогда продолжим, собственно, на чём мы в прошлый
[00:08.720 --> 00:09.720]  раз остановились.
[00:09.720 --> 00:10.720]  Вот.
[00:10.720 --> 00:14.280]  Ну, как остановились, мы в принципе в прошлый раз
[00:14.280 --> 00:18.760]  активно занимались, ну, помимо того что мы там изучали
[00:18.760 --> 00:22.440]  как искать медиану за линию, в основном мы занимались
[00:22.440 --> 00:24.120]  амортизационным анализом.
[00:24.120 --> 00:28.760]  Ну вот, давайте кто мне скажет, что такое амортизационный
[00:28.760 --> 00:29.760]  анализ.
[00:30.200 --> 00:33.200]  Амортизация, мы в среднем.
[00:33.200 --> 00:35.200]  Так, в среднем, мотожедание?
[00:35.200 --> 00:36.200]  Ой.
[00:36.200 --> 00:37.200]  Мотожедание?
[00:37.200 --> 00:38.200]  Мотожедание хороший термин.
[00:38.200 --> 00:42.720]  Это, короче, мы берём кооперации и считаем отдельную
[00:42.720 --> 00:43.720]  струну.
[00:43.720 --> 00:44.720]  Удельную?
[00:44.720 --> 00:45.720]  Какую удельную?
[00:45.720 --> 00:48.720]  Это платформа в Питере такая?
[00:48.720 --> 00:58.600]  Мы оцениваем общее количество, мы оцениваем общее количество
[00:58.920 --> 01:00.400]  времени на все операции.
[01:00.400 --> 01:02.400]  Ну, типа того, да.
[01:02.400 --> 01:05.880]  То есть, идея заключается в том, что когда мы берём
[01:05.880 --> 01:08.760]  какую-то структуру данных, действительно, и мы выполняем
[01:08.760 --> 01:14.520]  какие-то запросы к ней, то мы разрешаем себе некоторые
[01:14.520 --> 01:19.200]  операции делать долго, но хотим чтобы в целом, то
[01:19.200 --> 01:22.720]  есть, в некотором смысле, в среднем, эти операции
[01:22.720 --> 01:23.720]  работали хорошо.
[01:23.720 --> 01:26.320]  Ну, что это за некоторый смысл?
[01:26.320 --> 01:28.120]  Ну, это как мы уже говорили.
[01:28.120 --> 01:35.600]  В общем, у нас есть там структура данных, вот от
[01:35.600 --> 01:38.600]  балды.
[01:38.600 --> 01:39.600]  Чёрный ящик.
[01:39.600 --> 01:43.640]  И говорят, давайте, что с ней можно делать там
[01:43.640 --> 01:44.880]  четыре операции.
[01:44.880 --> 01:45.880]  Нет.
[01:45.880 --> 01:52.800]  Ну, для начала операция – твёрдый знак, операция
[01:53.800 --> 02:02.800]  Операция мягкий знак, вот, да, и операция э, конечно,
[02:02.800 --> 02:03.800]  да.
[02:03.800 --> 02:04.800]  Вот.
[02:04.800 --> 02:10.000]  Ну, как говорится, не будем сгорать, да, хоть операция
[02:10.000 --> 02:11.000]  б52, да.
[02:11.000 --> 02:12.000]  Вот.
[02:12.000 --> 02:13.000]  Соответственно.
[02:13.000 --> 02:18.320]  И теперь говорится, вот, предположим, что мы делаем
[02:18.320 --> 02:20.720]  структуру данных, и у неё есть операции вот там
[02:20.720 --> 02:26.560]  С1, С2, С3, С4, С5 и так далее, допустим, N операции, каждая
[02:26.560 --> 02:30.520]  из которых, соответственно, это одна из этих, ну, допустим,
[02:30.520 --> 02:31.520]  четырёх.
[02:31.520 --> 02:33.120]  А тех, может быть, там 5, 6, 8 и так далее.
[02:33.120 --> 02:36.640]  И мы говорим, ну вот, и мы говорим, что, ну, как обычно
[02:36.640 --> 02:41.560]  меряется, то есть обычно, чтобы измерить время работы,
[02:41.560 --> 02:46.280]  для каждой операции пишется там типа какая-то оценка
[02:46.280 --> 02:47.280]  на её время работы.
[02:47.280 --> 02:50.640]  Ну, вот, допустим, операция твёрдый знак работает
[02:50.640 --> 02:57.240]  за там log N, операция И работает за корень из N, операция мягкий
[02:57.240 --> 03:00.960]  знак работает за, так, какие ещё симпотики бывают?
[03:00.960 --> 03:02.920]  Да, действительно, что тут думать.
[03:02.920 --> 03:10.040]  И операция E работает, не, ну, давайте уж тогда log звёздочка.
[03:10.040 --> 03:11.040]  Вот.
[03:11.040 --> 03:19.360]  Ну, там, в данном случае, даже не важно, что это,
[03:19.360 --> 03:23.560]  я тут мог бы вообще написать T1 от N, T2 от N, T3 от N, так
[03:23.560 --> 03:25.800]  что пока даже не важно, что это такое, хотя в своё
[03:25.800 --> 03:28.160]  время мы, конечно, это узнаем, в чём своё время даже в
[03:28.160 --> 03:29.640]  этом семестре, скорее всего, наступит.
[03:29.640 --> 03:34.840]  Вот я про это и говорю, узнаем в своё время, пока считайте,
[03:34.840 --> 03:35.840]  что какая-то чёрная магия.
[03:35.840 --> 03:44.280]  Сейчас, сейчас, нет, это не указатель, и это не указатель.
[03:45.160 --> 03:46.160]  Вот.
[03:46.160 --> 03:48.160]  Хотя, да, структурно, вот.
[03:48.160 --> 03:51.120]  Так что пока считайте, просто мистическая функция,
[03:51.120 --> 03:52.120]  какая-то, абсолютно мистическая.
[03:52.120 --> 03:53.120]  Так вот.
[03:53.120 --> 03:57.720]  Значит, тогда в чём ради, тогда говорим, если мы оцениваем
[03:57.720 --> 04:01.440]  это в честном или так в худшем случае, то это означает,
[04:01.440 --> 04:05.640]  что каждая, что если вот, скажем, C5 это операция твёрдый
[04:05.640 --> 04:08.600]  знак, то она работает прямо вот железно за логарифом,
[04:08.600 --> 04:11.920]  то есть там не более чем C log N действий, там операция
[04:12.480 --> 04:15.600]  Каждая операция выполняет не более чем корень из N действий,
[04:15.600 --> 04:19.320]  операция мягкий знак там требует не более чем от N действий
[04:19.320 --> 04:21.680]  гарантированно, да, это дольше чем это, но тем не менее
[04:21.680 --> 04:24.120]  гарантированно, что уж не более чем C N точно.
[04:24.120 --> 04:27.800]  И операция E, собственно, работает за железный лог
[04:27.800 --> 04:28.800]  звёздочек.
[04:28.800 --> 04:33.840]  Ну, что такое маркетизационный анализ, то есть когда мы
[04:33.840 --> 04:36.600]  говорим эти стоимости учётные, мы говорим, что на самом
[04:36.600 --> 04:40.280]  деле каждая конкретная операция E может занять
[04:40.280 --> 04:42.200]  у вас чуть дольше, время есть 7 лог звёздочек.
[04:42.200 --> 04:49.400]  Вот, да, правда, как и твёрдый знак, но в целом они работают
[04:49.400 --> 04:50.400]  именно так.
[04:50.400 --> 04:51.400]  Что такое в целом?
[04:51.400 --> 04:56.760]  В целом это означает, то есть в целом это означает,
[04:56.760 --> 05:01.240]  что если среди этих N операций у нас оказалось, там, допустим,
[05:01.240 --> 05:07.480]  K1 было операцией E, там K2 операции E, K3 операции мягкий
[05:07.480 --> 05:14.560]  знак и K4 операции E, то тогда мы гарантируем, что, да, то
[05:14.560 --> 05:17.120]  есть каждая конкретная операция будет работать там сколько
[05:17.120 --> 05:21.240]  угодно, но все вместе они будут работать не более
[05:21.240 --> 05:28.800]  чем за O от K1 на логарифом N, вот именно в сумме, плюс
[05:28.800 --> 05:37.160]  K2 на корень из N, плюс K3 на N, плюс K4 на лог звёздочка
[05:37.160 --> 05:44.320]  N, вот, то есть это более слабую структуру.
[05:44.320 --> 05:47.160]  Заметим, что если бы структура железная, каждая операция
[05:47.160 --> 05:49.640]  за столько работает, то все вместе они точно работают
[05:49.640 --> 05:50.640]  за такую асимптотику.
[05:50.640 --> 05:54.080]  Ну вот, но когда мы говорим учётную стоимость, мы говорим,
[05:54.080 --> 05:56.960]  что, то есть мы не требуем жёсткой асимптотики от
[05:56.960 --> 06:00.800]  каждой конкретной операции, но мы требуем суммарной
[06:00.800 --> 06:01.800]  эффективности.
[06:01.800 --> 06:05.040]  Вот, такой подход на самом деле замечательно работает,
[06:05.040 --> 06:07.560]  то есть он действительно в некотором смысле развязывает
[06:07.560 --> 06:13.480]  руки, ну вот, то есть там позволяет достаточно эффективно
[06:13.480 --> 06:17.800]  реализовывать там ещё какие-то вещи, ещё какими-то способами,
[06:17.800 --> 06:20.960]  ну то есть у нас, конечно, там аморизационные анализы,
[06:20.960 --> 06:23.360]  там такие вот учётные структуры будут появляться сплоши
[06:23.360 --> 06:24.360]  рядом.
[06:24.360 --> 06:28.840]  Вот, но оно вот, ну вот, и это действительно чаще
[06:28.840 --> 06:33.840]  всего, это вполне хорошо, но до определённого момента,
[06:33.840 --> 06:38.000]  потому что иногда, конечно, на самом деле такая амортизация
[06:38.000 --> 06:42.760]  может выдавать подлянки, потому что, вот, например,
[06:42.760 --> 06:46.800]  бывает, вот иногда возникает такое явление, как персистентные
[06:46.800 --> 06:53.440]  структуры данных, вот, значит персистентные структуры
[06:53.440 --> 06:54.440]  данных.
[06:54.440 --> 07:08.040]  Так, а ну-ка, поднимите руки, кто знаком со словосочетанием
[07:08.040 --> 07:10.760]  персистентной структуры данных?
[07:10.760 --> 07:17.760]  Так, хорошо, так, ладно, кто когда-нибудь раз в жизни
[07:17.760 --> 07:21.680]  писал хотя бы одну персистентную структуры данных?
[07:22.160 --> 07:27.440]  Ого, неплохо, так, мощно, мощно.
[07:27.440 --> 07:28.760]  Вот, хорошо.
[07:28.760 --> 07:31.800]  Да, действительно, а кто когда-нибудь писал какую-нибудь
[07:31.800 --> 07:35.000]  мощную персистентную структуры данных отличия от персистентного
[07:35.000 --> 07:36.220]  стэка?
[07:37.720 --> 07:40.640]  А, ну да, кто и когда пишет «спасибо, персистентный
[07:40.640 --> 07:41.640]  стэк!»
[07:41.640 --> 07:42.640]  Да, логично.
[07:42.640 --> 07:43.640]  Так, ладно.
[07:43.640 --> 07:44.640]  Хорошо.
[07:44.640 --> 07:45.640]  А кто писал?
[07:45.640 --> 07:46.640]  Ладно, поступим по-другому.
[07:46.640 --> 07:48.380]  Кто когда-нибудь писал персистентную структуры данных отличия
[07:48.380 --> 07:51.900]  перистентного деревоотреска.
[07:51.900 --> 07:52.900]  Так, уже меньше.
[07:52.900 --> 07:53.900]  О боже!
[07:53.900 --> 08:06.900]  Ну это мы сейчас убедимся, насколько или… Ладно, понятно.
[08:06.900 --> 08:09.980]  А кто как-нибудь писал перистентную очередь?
[08:09.980 --> 08:15.140]  А, а зал от леденицы?
[08:15.140 --> 08:16.140]  Ой-ой-ой.
[08:16.140 --> 08:18.140]  Да, мясо, да.
[08:18.140 --> 08:19.820]  Ну ладно, сейчас будем разбираться.
[08:19.820 --> 08:24.300]  Ну ладно, тогда давайте… Ну да, тут всегда сильно
[08:24.300 --> 08:26.540]  больших комментариев на тему того, что такое перистентность
[08:26.540 --> 08:27.540]  тогда делать.
[08:27.540 --> 08:28.540]  Нет смысла.
[08:28.540 --> 08:32.060]  Ну на всякий случай говорим, что… Ну вообще, что такое?
[08:32.060 --> 08:33.620]  Ну тогда вот кто мне скажет тогда?
[08:33.620 --> 08:36.820]  Что такое вообще перистентная структура данных вообще?
[08:36.820 --> 08:39.820]  Ну по-разному.
[08:40.020 --> 08:43.020]  Ну по-разному.
[08:43.020 --> 08:50.220]  Ну по-разному, да, давайте, то есть, на самом деле, может
[08:50.220 --> 08:51.220]  быть с оговорками.
[08:51.220 --> 08:55.220]  Основная суть то есть та же, что действительно, если
[08:55.220 --> 08:57.060]  вот рассматривать структуру данных, то в каждый момент
[08:57.060 --> 08:58.820]  времени у нее есть какое-то состояние.
[08:58.820 --> 09:00.700]  Ну например, если мы пишем стэк, то в каждый момент
[09:00.700 --> 09:02.540]  времени в стэке находится вот какой-то стаканчик
[09:02.540 --> 09:03.540]  элементов.
[09:03.540 --> 09:07.700]  Ну там, если мы пишем деревоотресков, то значит у нас есть в каждый
[09:07.700 --> 09:09.380]  момент времени какое-то состояние деревоотресков.
[09:09.380 --> 09:14.140]  И вот перистентная структура данных – это когда мы хотим
[09:14.140 --> 09:16.900]  помнить, собственно, все версии.
[09:16.900 --> 09:19.660]  Ну классический пример жизненный – это, конечно, любая система
[09:19.660 --> 09:20.660]  контроля версий.
[09:20.660 --> 09:23.620]  Так, ну-ка поднимите руки, кто когда-нибудь раз в жизни
[09:23.620 --> 09:25.940]  пользовался хоть одной системой контроля версий.
[09:25.940 --> 09:28.940]  А, так.
[09:28.940 --> 09:33.500]  Нет, это не система контроля версий.
[09:33.500 --> 09:35.860]  Нет, система контроля версий – это ГИП, СВН, там вот это
[09:35.860 --> 09:36.860]  все.
[09:37.620 --> 09:39.220]  Может, например, курял там вот это.
[09:39.220 --> 09:40.220]  Эти пользовались?
[09:44.220 --> 09:45.220]  Ну вот такое.
[09:45.220 --> 09:46.220]  Вот.
[09:46.220 --> 09:47.220]  И совсем.
[09:47.220 --> 09:48.220]  Ну вот.
[09:48.220 --> 09:49.220]  Ну вот.
[09:49.220 --> 09:50.220]  В чем здесь суть?
[09:50.220 --> 09:51.220]  Да.
[09:51.220 --> 09:53.220]  То есть, действительно, это оказывается там в ГИПах
[09:53.220 --> 09:56.500]  и СВНах очень удобно, потому что если вы там что-то поменяли
[09:56.500 --> 09:59.220]  и вам не понравилось, то можно, в принципе, посмотреть,
[09:59.220 --> 10:00.220]  о чем было раньше.
[10:00.220 --> 10:02.260]  И вообще посмотри, ну вот.
[10:02.260 --> 10:04.140]  Ну особенно удобно, если, конечно, несколько человек
[10:04.140 --> 10:06.380]  меняют, потому что если кто-то что-то поменял и все
[10:06.380 --> 10:08.500]  испортилось в какой-то момент, то вы можете там
[10:08.500 --> 10:12.500]  в любой момент просто посмотреть, а кто это был, и что он сделал.
[10:12.500 --> 10:13.500]  Вот.
[10:13.500 --> 10:16.260]  Ну там, соответственно, да нет, оставим вопрос,
[10:16.260 --> 10:20.060]  какие санкции нужно применять, но речь не об этом.
[10:20.060 --> 10:21.060]  Вот.
[10:21.060 --> 10:23.060]  Но к чему нас это приводит?
[10:23.060 --> 10:24.060]  Ну вот.
[10:24.060 --> 10:25.060]  Вот теперь выясняет вопрос.
[10:25.060 --> 10:26.700]  Как же эти версии хранить?
[10:26.700 --> 10:30.140]  Ну самый тупой вариант – это, ну как вот иногда
[10:30.140 --> 10:33.420]  питон поступает с целыми числами, это объявлять,
[10:33.580 --> 10:36.300]  что у нас все версии неизменяемые.
[10:36.300 --> 10:39.220]  То есть их менять нельзя.
[10:39.220 --> 10:40.220]  Да.
[10:40.220 --> 10:45.420]  Ну как бы вот, ну, по крайней мере, на уровне идеи, это
[10:45.420 --> 10:48.100]  вот удобно сказать, что версии, что менять нельзя.
[10:48.100 --> 10:51.100]  То есть если вот у меня есть версия номер пять, все,
[10:51.100 --> 10:53.500]  она вот такая навсегда, и больше она никакая не будет.
[10:53.500 --> 10:54.500]  Вот.
[10:54.500 --> 10:56.780]  Казалось бы, зачем нам это?
[10:56.780 --> 10:57.780]  Ну вот.
[10:57.780 --> 10:59.380]  То есть это не значит, что к ней нельзя применить
[10:59.380 --> 11:01.980]  операцию там, я не знаю, твердый знак.
[11:01.980 --> 11:08.020]  Это означает, что просто, то есть по факту вы можете
[11:08.020 --> 11:10.740]  себе вообразить, что по факту мы просто взяли
[11:10.740 --> 11:14.300]  эту пятую версию, типа условно стэка или чего там, скопировали
[11:14.300 --> 11:18.420]  ее полностью, и к этой копии применили операцию твердый
[11:18.420 --> 11:19.420]  знак.
[11:19.420 --> 11:21.980]  То, что у нас получилось, мы объявили, что это там
[11:21.980 --> 11:23.380]  версия номер девятнадцать.
[11:23.380 --> 11:24.380]  Вот.
[11:24.380 --> 11:27.380]  Но это другой вопрос.
[11:27.380 --> 11:29.220]  То есть мы сейчас говорим об идее.
[11:29.220 --> 11:30.220]  Вот.
[11:30.220 --> 11:33.620]  То есть, например, если вот мы хотим писать там, допустим,
[11:33.620 --> 11:36.140]  персистентный стэк, то это будет выглядеть так.
[11:36.140 --> 11:38.260]  То есть у нас изначально есть нулевая версия, где
[11:38.260 --> 11:39.260]  стэк пустой.
[11:39.260 --> 11:46.980]  Потом мы решили добавить элемент, там, троечку, там
[11:46.980 --> 11:50.660]  сделать push три к версии ноль.
[11:50.660 --> 11:52.460]  Вот давайте я версии буду писать в эшо, чтобы было
[11:52.460 --> 11:56.420]  понятно, где версия, где элемент.
[11:56.420 --> 11:59.220]  Тогда, заметим, нулевая версия от этого никак не меняется,
[11:59.220 --> 12:02.100]  а то появляется версия номер один.
[12:02.100 --> 12:05.380]  Это где мы как бы скопировали этот пустой элемент и добавили
[12:05.380 --> 12:06.380]  троечку.
[12:06.380 --> 12:07.380]  Вот.
[12:07.380 --> 12:11.620]  Допустим, вторая версия рождается, если мы решили
[12:11.620 --> 12:15.460]  сделать еще один push.
[12:15.460 --> 12:18.900]  Там элемент пятьдесят восемь добавить в версию один.
[12:18.900 --> 12:19.900]  Но так получается.
[12:19.900 --> 12:25.020]  Вот пятьдесят восемь, три, а тут мы неожиданно, так,
[12:25.020 --> 12:27.620]  погоди, парни, давайте возьмите снова первую версию, но
[12:27.620 --> 12:30.180]  добавь туда, вот мы что-то очепятались не пятьдесят
[12:30.180 --> 12:31.180]  восемь, а пятьдесят семь.
[12:31.180 --> 12:32.180]  Вот.
[12:32.180 --> 12:36.340]  А то что-то там, а то промашка какая-то произошла.
[12:36.340 --> 12:39.140]  Ну что, копируем опять первую версию и пишем уже тут пятьдесят
[12:39.140 --> 12:40.140]  семь.
[12:40.140 --> 12:42.900]  Тут мы еще радуемся, о, вот теперь хорошо, давай теперь
[12:42.900 --> 12:44.900]  вот в эту третью версию еще и сто семьдесят девять
[12:44.900 --> 12:45.900]  напишем.
[12:45.900 --> 12:46.900]  Вот.
[12:46.900 --> 12:49.420]  Вот получается такая красота.
[12:49.420 --> 12:53.500]  Так, ну вот.
[12:53.500 --> 12:56.660]  А потом говорить, так, стоп, нет.
[12:57.300 --> 12:58.300]  Сто семьдесят девять не надо.
[12:58.300 --> 13:00.300]  Рядом с пятьдесят седьмой точно не надо.
[13:00.300 --> 13:01.300]  Как вы запустите?
[13:01.300 --> 13:04.300]  У вас должна быть пятьдесят семь тире пятьдесят восемь
[13:04.300 --> 13:05.300]  тире.
[13:05.300 --> 13:06.300]  Нет.
[13:06.300 --> 13:07.300]  Нет, зачем тире?
[13:07.300 --> 13:09.980]  Видите, я каждую версию стека бережно отдельно
[13:09.980 --> 13:10.980]  храню.
[13:10.980 --> 13:12.980]  Ранень, вы уже в версию в два добавили пятьдесят семь.
[13:12.980 --> 13:14.700]  А ты смотрел, в какой версии?
[13:14.700 --> 13:17.700]  Нет, я в один ее добавил, обратите внимание.
[13:17.700 --> 13:19.500]  Видите, у меня тут не случайно это написано.
[13:19.500 --> 13:20.500]  Вот.
[13:20.500 --> 13:23.460]  А теперь говорим, так, да, точно, слушайте, а может
[13:23.460 --> 13:25.500]  лучше надо было это, пятьдесят восемь из второй версии,
[13:25.500 --> 13:27.940]  или пятьдесят восемь из второй версии, удалим, что
[13:27.940 --> 13:28.940]  это такое.
[13:28.940 --> 13:29.940]  Просто поп в два.
[13:29.940 --> 13:33.660]  И тогда у нас получается пятая версия, и в которой
[13:33.660 --> 13:34.660]  есть вот три.
[13:34.660 --> 13:39.660]  А потом вспоминаем, ой, а давайте, конечно, четвертую
[13:39.660 --> 13:41.780]  версию сто семьдесят девять удалим, а то что это такое
[13:41.780 --> 13:42.780]  вообще.
[13:42.780 --> 13:43.780]  Ну вот.
[13:43.780 --> 13:44.780]  Неправильный номер школы.
[13:44.780 --> 13:45.780]  Ну вот.
[13:45.780 --> 13:46.780]  Поп, наверное.
[13:46.780 --> 13:47.780]  Ну вот, да, поп.
[13:47.780 --> 13:50.780]  А, ну или да, надо было пушить ее второй раз, да, действительно,
[13:50.780 --> 13:53.780]  потому что замечательная школа и все такое, да.
[13:54.780 --> 13:59.780]  Так, да, поп в четыре пишем, и соответственно получается.
[13:59.780 --> 14:00.780]  Вот.
[14:00.780 --> 14:05.780]  А потом кто-то приходит и говорит, нет, нет, погодите,
[14:05.780 --> 14:07.780]  сто семьдесят девять это круто, лучше давайте идти
[14:07.780 --> 14:11.780]  дальше, давайте лучше в эту четвертую версию добавим
[14:11.780 --> 14:12.780]  еще.
[14:12.780 --> 14:13.780]  Чего добавить?
[14:13.780 --> 14:14.780]  Хорошо.
[14:14.780 --> 14:15.780]  Пожалуйста.
[14:15.780 --> 14:20.780]  Нет, ну уже двадцать девять было раньше, так что.
[14:20.780 --> 14:23.780]  Нет, ну уже двадцать девять было раньше, так что.
[14:23.780 --> 14:24.780]  Нет, два три девять.
[14:24.780 --> 14:25.780]  А, два три девять.
[14:25.780 --> 14:26.780]  Хорошо, хорошо.
[14:26.780 --> 14:27.780]  Пожалуйста.
[14:27.780 --> 14:28.780]  Так.
[14:28.780 --> 14:30.780]  Если продолжаем с номерами школы.
[14:30.780 --> 14:32.780]  Ну а что еще делать?
[14:32.780 --> 14:33.780]  Так.
[14:33.780 --> 14:36.780]  Ну я не знаю, ну не цифры же к числу АПИ вообще вставлять,
[14:36.780 --> 14:37.780]  правда?
[14:37.780 --> 14:38.780]  Так.
[14:38.780 --> 14:39.780]  Вот.
[14:39.780 --> 14:41.780]  Ну ладно, это можно остановиться, потому что суть в общем-то
[14:41.780 --> 14:42.780]  понятна.
[14:42.780 --> 14:43.780]  Все.
[14:43.780 --> 14:44.780]  Пушь, солнце в голову.
[14:44.780 --> 14:45.780]  Так вот.
[14:45.780 --> 14:46.780]  Не, ну если бы мы делали третью строчку, да.
[14:46.780 --> 14:47.780]  То есть, ну о чем суть?
[14:47.780 --> 14:48.780]  То есть видите.
[14:48.780 --> 14:52.780]  То есть мы теперь бережно храним на самом деле все
[14:52.780 --> 14:53.780]  версии стека.
[14:53.780 --> 14:57.780]  И, ну вот, и соответственно аккуратненько действительно
[14:57.780 --> 14:58.780]  все поддерживаем.
[14:58.780 --> 14:59.780]  Вот.
[14:59.780 --> 15:00.780]  Но.
[15:00.780 --> 15:01.780]  Ну вот.
[15:01.780 --> 15:07.780]  Но, конечно же, это, наверное, не самое эффективное, что
[15:07.780 --> 15:08.780]  может быть.
[15:08.780 --> 15:09.780]  Потому что вот действительно, если бы высвоение там допустим,
[15:09.780 --> 15:12.780]  то есть если бы в гите, например, там при изменении малейшей
[15:12.780 --> 15:17.780]  строчки копировали бы всю базу гита, то, наверное,
[15:17.780 --> 15:21.780]  там где-то в параллельной вселенной произошел бы коллапс.
[15:21.780 --> 15:24.780]  Ну даже не в параллельной вселенной, а там, видимо,
[15:24.780 --> 15:27.780]  с той стороны земного шара где-то коллапс произошел.
[15:27.780 --> 15:28.780]  Вот.
[15:28.780 --> 15:33.780]  Поэтому хотелось бы, конечно, это хранить как-то эффективно.
[15:33.780 --> 15:35.780]  Но, правда, ну вот.
[15:35.780 --> 15:36.780]  Ну как это можно сделать?
[15:36.780 --> 15:39.780]  Ну, конечно, основные идеи, которые тут возникают, они
[15:39.780 --> 15:42.780]  базируются на том, что все висит на указателях, вот
[15:42.780 --> 15:45.780]  которые вы как удачно только что проходили.
[15:45.780 --> 15:46.780]  Вот.
[15:46.780 --> 15:51.780]  То есть действительно, ведь нам, как можно заметить,
[15:51.780 --> 15:55.780]  в общем-то копировать иногда излишне, ну просто потому
[15:55.780 --> 15:58.780]  что, например, вот мы видим, что от версии v1 и v5, например,
[15:58.780 --> 15:59.780]  они совпадают.
[15:59.780 --> 16:01.780]  Что это значит?
[16:01.780 --> 16:04.780]  Ну вот, то есть в принципе можно было просто сказать,
[16:04.780 --> 16:08.780]  что там говорить, что версия v5, так, ну ладно, когда тебе
[16:08.780 --> 16:11.780]  обратятся к v5, ты просто смотри на версию v1 и делай то
[16:11.780 --> 16:12.780]  же самое.
[16:12.780 --> 16:18.780]  Да, но заметим, версия v5 не поменяется больше никогда.
[16:18.780 --> 16:21.780]  Потому что когда мы применим операцию, то есть мы ее типа
[16:21.780 --> 16:22.780]  копируем.
[16:22.780 --> 16:26.780]  В результате на примере персистентного стека получается,
[16:26.780 --> 16:29.780]  то есть можно хранить просто красивое дерево.
[16:29.780 --> 16:31.780]  Вот давайте преимулируем те же самые операции.
[16:31.780 --> 16:32.780]  Смотрите.
[16:32.780 --> 16:36.780]  Итак, у меня будет, начнем, то есть изначально все,
[16:36.780 --> 16:38.780]  гид будет начинаться с крестика.
[16:38.780 --> 16:39.780]  Вот.
[16:39.780 --> 16:44.780]  И на этот крестик мы будем смотреть как на нулевую версию.
[16:44.780 --> 16:46.780]  А теперь идея такая.
[16:46.780 --> 16:48.780]  То есть дальше мы сейчас будем строить такое деревце.
[16:48.780 --> 16:50.780]  То есть версию v1, значит.
[16:50.780 --> 16:53.780]  То есть мы, говорим, берем эту версию v0, вот как тут
[16:53.780 --> 16:57.780]  написано, да, создаем элемент номер 3 и из этой троечки
[16:57.780 --> 16:59.780]  вешаем указатель на версию 0.
[16:59.780 --> 17:02.780]  Ну, то есть на крестик.
[17:02.780 --> 17:05.780]  И получается, и говорим, что вот теперь эта троечка
[17:05.780 --> 17:09.780]  это типа начало версии v1.
[17:09.780 --> 17:13.780]  Теперь мы говорим, так, надо сделать пушк версии v1 и 58.
[17:13.780 --> 17:14.780]  Что значит это значит?
[17:14.780 --> 17:17.780]  Это значит, что мы создаем версию 58, то есть число 58
[17:17.780 --> 17:21.780]  и из него даем ссылку на то, что было раньше версии v1.
[17:21.780 --> 17:24.780]  Это будет называться v2.
[17:24.780 --> 17:25.780]  Вот.
[17:25.780 --> 17:27.780]  Если у нас версия 57, то что мы делаем?
[17:27.780 --> 17:29.780]  Ну, ничего страшного мы не делаем.
[17:29.780 --> 17:30.780]  Вот 57.
[17:30.780 --> 17:34.780]  Только теперь, видите, то есть ссылается она ровно на тот же элемент.
[17:34.780 --> 17:38.780]  То есть вот у нас получается такое вот красивое дерево.
[17:38.780 --> 17:40.780]  То есть есть вот v2, есть v3.
[17:40.780 --> 17:43.780]  Вот если мы к v3 еще хотим прицепить 179, пожалуйста,
[17:43.780 --> 17:46.780]  вот просто такие вот указатели.
[17:46.780 --> 17:47.780]  Вот.
[17:47.780 --> 17:50.780]  Или вот пришло время сделать поп.
[17:50.780 --> 17:53.780]  То есть вот у этой версии надо сделать поп.
[17:53.780 --> 17:56.780]  Смотрите, мы его будем делать достаточно хитерским образом.
[17:56.780 --> 18:00.780]  То есть мы просто скажем так, значит, последним элементом
[18:00.780 --> 18:02.780]  будет не этот элемент, а просто следующий.
[18:02.780 --> 18:04.780]  Вот давайте, вот мы 58 удалять не будем,
[18:04.780 --> 18:07.780]  но версия v5 будет указывать на следующий элемент.
[18:07.780 --> 18:10.780]  Вот теперь так и получилось, что версии v1 и v5 смотрят
[18:10.780 --> 18:12.780]  на один и тот же элемент.
[18:12.780 --> 18:14.780]  А поп из середины мы не делаем?
[18:14.780 --> 18:16.780]  Почему?
[18:16.780 --> 18:18.780]  Нет, поп это стэк.
[18:18.780 --> 18:20.780]  Нет, в смысле, что-то пока что.
[18:20.780 --> 18:22.780]  Это стэк.
[18:22.780 --> 18:26.780]  У стэка вы имеете право делать поп только с конца.
[18:26.780 --> 18:29.780]  Как вы делаете с середины, это уже другая структура данных.
[18:29.780 --> 18:31.780]  Там какие-то там.
[18:31.780 --> 18:33.780]  Вот.
[18:33.780 --> 18:35.780]  Ну да, там всякие вот это.
[18:35.780 --> 18:37.780]  До этого мы тоже доберемся, но пока вот.
[18:37.780 --> 18:39.780]  Но теперь что нам надо?
[18:39.780 --> 18:42.780]  Теперь вот из v4 тоже хочется сделать поп.
[18:42.780 --> 18:44.780]  Что мы делаем?
[18:44.780 --> 18:47.780]  Ну да, v4 сдвигаем вот сюда, то есть вот теперь v7.
[18:47.780 --> 18:49.780]  Ну даже не сдвигаем.
[18:49.780 --> 18:51.780]  В принципе, так, и что там?
[18:51.780 --> 18:53.780]  Теперь push v4 239.
[18:53.780 --> 18:55.780]  Ну, пожалуй, ничего страшного.
[18:55.780 --> 18:57.780]  Значит, рисуем сюда 239.
[18:57.780 --> 18:59.780]  То есть в принципе это оказывается очень удобно.
[18:59.780 --> 19:01.780]  Смотрите.
[19:01.780 --> 19:03.780]  Так.
[19:03.780 --> 19:05.780]  А, понял, да.
[19:05.780 --> 19:07.780]  То есть это все достаточно удобно.
[19:07.780 --> 19:09.780]  Все это просто.
[19:09.780 --> 19:11.780]  Вот, то есть получается будет,
[19:11.780 --> 19:13.780]  то есть будет получаться красивое дерево.
[19:13.780 --> 19:15.780]  Особенно если вы храните все версии.
[19:15.780 --> 19:19.780]  Ну персистентность стэка это, конечно, простейшая персистентная структура данных.
[19:19.780 --> 19:21.780]  То есть здесь максимально просто реализовать так,
[19:21.780 --> 19:23.780]  чтобы каждая операция работала за o от единицы.
[19:23.780 --> 19:25.780]  Действительно.
[19:25.780 --> 19:31.780]  Более того, здесь достаточно легко реализовать так, чтобы хранились только те элементы, которые нужны.
[19:31.780 --> 19:33.780]  Ну что я имею в виду?
[19:33.780 --> 19:35.780]  Я имею в виду следующее, что
[19:35.780 --> 19:39.780]  да, мы говорим, что мы хотим вот все версии,
[19:39.780 --> 19:43.780]  но иногда нам нужны не все версии.
[19:43.780 --> 19:45.780]  Ну, предположим, вот мы знаем, что на самом деле
[19:45.780 --> 19:47.780]  нас, допустим, мы там
[19:47.780 --> 19:49.780]  в целях какой-то оптимизации решили,
[19:49.780 --> 19:51.780]  что нас интересует там только
[19:51.780 --> 19:53.780]  нулевая версия, третья, пятая и двадцать восьмая.
[19:55.780 --> 19:57.780]  Тогда оказывается,
[19:57.780 --> 19:59.780]  что мы, в принципе, тогда эти указатели
[19:59.780 --> 20:01.780]  можем убрать, то есть все, кроме
[20:01.780 --> 20:03.780]  нулевого, третьего, пятого и двадцать восьмого.
[20:03.780 --> 20:05.780]  А если
[20:05.780 --> 20:07.780]  на какой-то элемент
[20:07.780 --> 20:09.780]  никакая версия уже больше не указывает
[20:09.780 --> 20:11.780]  и никакой предыдущий элемент
[20:11.780 --> 20:13.780]  не указывает, то его вообще
[20:13.780 --> 20:15.780]  можно удалить.
[20:17.780 --> 20:19.780]  Ну вот, ну в принципе,
[20:19.780 --> 20:21.780]  то есть можно даже там реализовать,
[20:21.780 --> 20:23.780]  то есть можно для каждого элемента посчитать
[20:23.780 --> 20:25.780]  сколько вот этих вот указателей, сколько
[20:25.780 --> 20:27.780]  версий на меня вообще указывают. Если их
[20:27.780 --> 20:29.780]  стало ноль, то давайте я себя просто удалю.
[20:29.780 --> 20:31.780]  Подожди, а почему их может стать ноль,
[20:31.780 --> 20:33.780]  только если мы версию удаляем?
[20:33.780 --> 20:35.780]  Ну да, если мы
[20:35.780 --> 20:37.780]  удаляем версии,
[20:37.780 --> 20:39.780]  тогда может стать ноль, значит, всегда будет
[20:39.780 --> 20:41.780]  положить на число какой-то.
[20:41.780 --> 20:43.780]  Ну вот, то как бы...
[20:43.780 --> 20:45.780]  У нас тогда уже версия появится.
[20:45.780 --> 20:47.780]  Ну мы как-то добавляем...
[20:47.780 --> 20:49.780]  Понятно, что в случае стека, да, на каждый элемент
[20:49.780 --> 20:51.780]  должна указывать хотя бы одна версия.
[20:51.780 --> 20:53.780]  Но если мы какие-то версии решили не хранить,
[20:53.780 --> 20:55.780]  то на какой-то элемент указать не мог.
[20:55.780 --> 20:57.780]  Вот, например, если мы решили
[20:57.780 --> 20:59.780]  сказать, что, например,
[20:59.780 --> 21:01.780]  версии второй больше нет,
[21:01.780 --> 21:03.780]  ну тогда мы торжественно объявляем,
[21:03.780 --> 21:05.780]  что тогда элемент 58
[21:05.780 --> 21:07.780]  можно торжественно удалить.
[21:07.780 --> 21:09.780]  Если на него ничего не указывает. Да.
[21:09.780 --> 21:11.780]  Вот, например, да, если мы решим удалить четвертую
[21:11.780 --> 21:13.780]  версию, то вот этот элемент 179
[21:13.780 --> 21:15.780]  не удалится.
[21:15.780 --> 21:17.780]  Почему он не удалится?
[21:17.780 --> 21:19.780]  Да потому что он еще является
[21:19.780 --> 21:21.780]  частью, на него еще указывает 239,
[21:21.780 --> 21:23.780]  который в свою очередь является V7.
[21:23.780 --> 21:25.780]  Пока он... Погодите,
[21:25.780 --> 21:27.780]  ну доживем. Да, удалять его не надо.
[21:27.780 --> 21:29.780]  Но, если мы после этого
[21:29.780 --> 21:31.780]  скажем, давайте удалим и версию V7,
[21:31.780 --> 21:33.780]  то тогда, по идее, должно произойти
[21:33.780 --> 21:35.780]  следующее. Элемент 239
[21:35.780 --> 21:37.780]  объявляет, что, ну, все, в принципе,
[21:37.780 --> 21:39.780]  я, там, я сделал свое дело,
[21:39.780 --> 21:41.780]  я могу уходить.
[21:41.780 --> 21:43.780]  И исчезает.
[21:43.780 --> 21:45.780]  Тогда элемент 179
[21:45.780 --> 21:47.780]  неожиданно понимает, что
[21:47.780 --> 21:49.780]  как бы да, я жил ради того, что на меня
[21:49.780 --> 21:51.780]  вот указывал этот 239,
[21:51.780 --> 21:53.780]  и 239 тоже ушел.
[21:53.780 --> 21:55.780]  Но тогда я вот в этом месте тоже
[21:55.780 --> 21:57.780]  разворачиваюсь и ухожу.
[21:57.780 --> 21:59.780]  Ну вот, теперь да, 57 тоже узнает
[21:59.780 --> 22:01.780]  эту трагическую новость, что на него указывает
[22:01.780 --> 22:03.780]  на одно 179 меньше.
[22:03.780 --> 22:05.780]  Но оно от этого
[22:05.780 --> 22:07.780]  не умирает.
[22:07.780 --> 22:09.780]  Почему оно не умирает? Потому что
[22:09.780 --> 22:11.780]  на него указывают еще две версии.
[22:11.780 --> 22:13.780]  То есть мы в каждом элементе храним
[22:13.780 --> 22:15.780]  сколько на него указывает?
[22:15.780 --> 22:17.780]  Ну, например, да.
[22:21.780 --> 22:23.780]  Нет, смотрите, нет.
[22:23.780 --> 22:25.780]  Удалять, ну, как сказать, удалять.
[22:25.780 --> 22:27.780]  Вот здесь, как ни странно,
[22:27.780 --> 22:29.780]  амортизация начинает работать.
[22:29.780 --> 22:31.780]  То есть, обратите внимание, да, тут амортизации
[22:31.780 --> 22:33.780]  изначально не было, потому что каждая операция
[22:33.780 --> 22:35.780]  за честную единицу работала.
[22:35.780 --> 22:37.780]  Но обратите внимание, глобально
[22:37.780 --> 22:39.780]  вы удалите не более, чем
[22:39.780 --> 22:41.780]  количество, каждый элемент,
[22:41.780 --> 22:43.780]  как бы, если он удалился, он удалился навсегда.
[22:43.780 --> 22:45.780]  Потому что если мы, допустим, указываем
[22:45.780 --> 22:47.780]  две версии на один и тот же элемент,
[22:47.780 --> 22:49.780]  сначала мы удаляем первую всю ветку, потом вторую всю ветку
[22:49.780 --> 22:51.780]  и третий снова всю ветку.
[22:51.780 --> 22:53.780]  Проходим и уже тогда удаляем.
[22:53.780 --> 22:55.780]  Да, ну, в смысле, что нам приходится
[22:55.780 --> 22:57.780]  изчетку всей ветки просто...
[22:57.780 --> 22:59.780]  Зачем мы только...
[22:59.780 --> 23:01.780]  Нет, ну, может так случиться,
[23:01.780 --> 23:03.780]  нет, правда, может так случиться,
[23:03.780 --> 23:05.780]  что мы действительно за один шаг,
[23:05.780 --> 23:07.780]  то есть когда после очередного неожиданного
[23:07.780 --> 23:09.780]  удаления версии,
[23:09.780 --> 23:11.780]  неожиданно удалим прям большую цепочку.
[23:11.780 --> 23:12.780]  Нет, вопрос не в этом.
[23:12.780 --> 23:13.780]  А в чем?
[23:13.780 --> 23:15.780]  Вопрос в том, что если мы в каждом элементе
[23:15.780 --> 23:17.780]  храним, то сколько на него есть ссылок,
[23:17.780 --> 23:19.780]  то надо после каждого действия
[23:19.780 --> 23:21.780]  обновлять всю...
[23:21.780 --> 23:22.780]  всех родителей.
[23:22.780 --> 23:24.780]  Не-не-не-не, всех родителей не нужно.
[23:24.780 --> 23:26.780]  Достаточно рядом с каждым элементом
[23:26.780 --> 23:28.780]  хранить, а сколько на меня
[23:28.780 --> 23:30.780]  указателей еще стоит.
[23:30.780 --> 23:31.780]  А как это делать?
[23:31.780 --> 23:33.780]  А элементарно.
[23:33.780 --> 23:34.780]  Но дело в том...
[23:34.780 --> 23:36.780]  А элементарно. Вот есть элемент,
[23:36.780 --> 23:38.780]  решили сделать к нему пуш.
[23:38.780 --> 23:40.780]  Все, вы говорите, что отлично, здесь плюс один.
[23:40.780 --> 23:41.780]  Все.
[23:41.780 --> 23:43.780]  Вот. И там если...
[23:43.780 --> 23:45.780]  Если у него там количество версий тоже плюс
[23:45.780 --> 23:47.780]  один, когда удаляете версию, значит говорите,
[23:47.780 --> 23:49.780]  что у конкретного элемента минус одна версия.
[23:49.780 --> 23:51.780]  Вот.
[23:51.780 --> 23:53.780]  То есть конкретно... Чего?
[23:53.780 --> 23:55.780]  А предки не... А зачем предки?
[23:55.780 --> 23:57.780]  Предки не надо.
[23:57.780 --> 23:59.780]  Нет, не нужно.
[23:59.780 --> 24:01.780]  Не нужно, не нужно.
[24:01.780 --> 24:03.780]  Не зачем, потому что, смотрите, тут все надежно так,
[24:03.780 --> 24:05.780]  что для каждого элемента
[24:05.780 --> 24:07.780]  мы просто храним даже не сколько у него предков,
[24:07.780 --> 24:09.780]  а сколько конкретно указатель
[24:09.780 --> 24:11.780]  на него указывает.
[24:11.780 --> 24:13.780]  Потому что, смотрите, элемент
[24:13.780 --> 24:15.780]  обязан жить
[24:15.780 --> 24:17.780]  только если выполнено хотя бы одно из двух
[24:17.780 --> 24:19.780]  условий. Хотя бы одно.
[24:19.780 --> 24:21.780]  Первое условие, на него указывает какая-то
[24:21.780 --> 24:23.780]  версия.
[24:23.780 --> 24:25.780]  И второе, он...
[24:25.780 --> 24:27.780]  И второе, может быть, он является
[24:27.780 --> 24:29.780]  не последним элементом какой-то версии.
[24:29.780 --> 24:31.780]  А это эквивалентно тому, что
[24:31.780 --> 24:33.780]  на него еще кто-то указывает вот из этих элементов.
[24:35.780 --> 24:37.780]  Сейчас, то есть если мы удаляем
[24:37.780 --> 24:39.780]  какую-то версию,
[24:39.780 --> 24:41.780]  мы просто сообщаем нашему клетку, что...
[24:41.780 --> 24:43.780]  Да, то есть когда мы удаляем 200,
[24:43.780 --> 24:45.780]  видите, вот 239, мы не просто ее удаляем,
[24:45.780 --> 24:47.780]  а вот смотрим на кого
[24:47.780 --> 24:49.780]  она указывала и сообщаем ему, что у него
[24:49.780 --> 24:51.780]  минус один указатель.
[24:51.780 --> 24:53.780]  Вот и все.
[24:53.780 --> 24:55.780]  То есть тогда гарантируется,
[24:55.780 --> 24:57.780]  что как бы у вас не может...
[24:57.780 --> 24:59.780]  То есть у вас, если на элемент
[24:59.780 --> 25:01.780]  никто, вот никакой другой элемент не ссылается,
[25:01.780 --> 25:03.780]  значит, на него ссылается какая-то версия.
[25:03.780 --> 25:05.780]  Потому что если ни то, ни другое, значит, этот элемент
[25:05.780 --> 25:07.780]  можно прямо сейчас удалить.
[25:07.780 --> 25:09.780]  В общем-то, технология классическая,
[25:09.780 --> 25:11.780]  когда вы будете проходить всякие
[25:11.780 --> 25:13.780]  шарит ПТР на C++,
[25:13.780 --> 25:15.780]  вы неожиданно эту технологию обнаружите
[25:15.780 --> 25:17.780]  просто во всей красе.
[25:17.780 --> 25:19.780]  Забегая вперед, скажу,
[25:19.780 --> 25:21.780]  что, скорее всего, вам придется ее даже писать.
[25:21.780 --> 25:23.780]  Вот.
[25:23.780 --> 25:25.780]  Да, к вопросу о домашних заданиях по C++.
[25:25.780 --> 25:27.780]  Да, они будут
[25:27.780 --> 25:29.780]  и достаточно мощные.
[25:29.780 --> 25:31.780]  Так что...
[25:31.780 --> 25:33.780]  Да ладно, я что-то не задавил завтра.
[25:33.780 --> 25:35.780]  Не.
[25:35.780 --> 25:37.780]  Детлайн будет вчера.
[25:37.780 --> 25:39.780]  Вот.
[25:39.780 --> 25:41.780]  Ладно.
[25:41.780 --> 25:43.780]  Так вот, идем дальше.
[25:43.780 --> 25:45.780]  То есть конкретно в стэке
[25:45.780 --> 25:47.780]  действительно тут максимально хорошо.
[25:47.780 --> 25:49.780]  Ну вот.
[25:49.780 --> 25:51.780]  Ну вот.
[25:51.780 --> 25:53.780]  Правда, ну вот.
[25:53.780 --> 25:55.780]  Тут, конечно, имеет смысл
[25:55.780 --> 25:57.780]  некоторая амортизация на тему удаления элементов.
[25:57.780 --> 25:59.780]  То есть каждый конкретный
[25:59.780 --> 26:01.780]  элемент может там неожиданно
[26:01.780 --> 26:03.780]  работать долго.
[26:03.780 --> 26:05.780]  Потому что вы удалили версию,
[26:05.780 --> 26:07.780]  и он неожиданно устроил тотальную зачистку.
[26:07.780 --> 26:09.780]  Но, впрочем,
[26:09.780 --> 26:11.780]  с другой стороны, если вас не устраивает,
[26:11.780 --> 26:13.780]  что тут происходит амортизация,
[26:13.780 --> 26:15.780]  то это делается просто. Вы можете там, скажем,
[26:15.780 --> 26:17.780]  отдельно хранить, какие элементы нужно удалить
[26:17.780 --> 26:19.780]  и на каждом шаге удалять по три
[26:19.780 --> 26:21.780]  элемента, скажем.
[26:21.780 --> 26:23.780]  Вот, понятна технология, да?
[26:23.780 --> 26:25.780]  А то сейчас чуть позже она тоже
[26:25.780 --> 26:27.780]  еще более мощно включится.
[26:27.780 --> 26:29.780]  То есть тогда суть будет такая,
[26:29.780 --> 26:31.780]  что если вы решили удалять элемент,
[26:31.780 --> 26:33.780]  надо его не удалять, а поместить,
[26:33.780 --> 26:35.780]  так сказать, в какой-то список элементов,
[26:35.780 --> 26:37.780]  которые подлежат удалению.
[26:37.780 --> 26:39.780]  Этот список он же должен быть там амортизированно
[26:39.780 --> 26:41.780]  работать.
[26:41.780 --> 26:43.780]  Ну вот. Нет.
[26:43.780 --> 26:45.780]  Нет, это будет реальный двусвязанный список,
[26:45.780 --> 26:47.780]  например.
[26:47.780 --> 26:49.780]  Вот прям реально двусвязанный список.
[26:49.780 --> 26:51.780]  И тогда на каждом шаге,
[26:51.780 --> 26:53.780]  то есть вы там сначала там, может быть,
[26:53.780 --> 26:55.780]  кого-то добавляете в карантин,
[26:55.780 --> 26:57.780]  а потом после этого говорите, что
[26:57.780 --> 26:59.780]  если есть что удалять, ну там возьмите
[26:59.780 --> 27:01.780]  первые три элемента и удалите.
[27:01.780 --> 27:03.780]  Вот.
[27:03.780 --> 27:05.780]  Да, причем, возможно, после этих трех
[27:05.780 --> 27:07.780]  удалений там появятся еще кандидаты
[27:07.780 --> 27:09.780]  на удаление, но их вы уже не удаляете.
[27:09.780 --> 27:11.780]  То есть тогда,
[27:11.780 --> 27:13.780]  смотрите, в чем тогда рахится?
[27:13.780 --> 27:15.780]  Тогда уже вообще никакой амортизации не будет,
[27:15.780 --> 27:17.780]  и тогда каждая конкретная
[27:17.780 --> 27:19.780]  операция будет работать за
[27:19.780 --> 27:21.780]  железобетонные от единицы.
[27:21.780 --> 27:23.780]  Ну то есть да, правда, с учетом
[27:23.780 --> 27:25.780]  этой вот, собственно, этого
[27:25.780 --> 27:27.780]  пылесоса, как этот пылесос
[27:27.780 --> 27:29.780]  в джаве называется, а,
[27:29.780 --> 27:31.780]  как бы, школлектор.
[27:31.780 --> 27:33.780]  Я не знаю, у меня почему-то в голове
[27:33.780 --> 27:35.780]  все равно я его пылесос почему-то называю,
[27:35.780 --> 27:37.780]  ну вот.
[27:37.780 --> 27:39.780]  Да ладно.
[27:39.780 --> 27:41.780]  Ну кто, в джаве не знаю.
[27:41.780 --> 27:43.780]  А конкретно тут,
[27:43.780 --> 27:45.780]  ну как бы мы реализовали пылесос,
[27:45.780 --> 27:47.780]  ну можно реализовать в тупую, что когда есть
[27:47.780 --> 27:49.780]  что удалять, давайте удалять до конца.
[27:49.780 --> 27:51.780]  Это тогда будет учетная стоимость
[27:51.780 --> 27:53.780]  единицы, в смысле, по всем созданиям Векси.
[27:53.780 --> 27:55.780]  Учетность.
[27:55.780 --> 27:57.780]  Но если вы будете, вот как я сказал,
[27:57.780 --> 27:59.780]  то есть хранить там
[27:59.780 --> 28:01.780]  двухсвязный список из того, что надо удалить
[28:01.780 --> 28:03.780]  и удалять на каждом шаге там, скажем, по три элемента,
[28:03.780 --> 28:05.780]  ну вот, то тогда
[28:05.780 --> 28:07.780]  окажется, что этот пылесос будет работать
[28:07.780 --> 28:09.780]  за, тогда это будет железобетонные
[28:09.780 --> 28:11.780]  единицы. То есть тогда
[28:11.780 --> 28:13.780]  так, то есть память будет очищаться не сразу,
[28:13.780 --> 28:15.780]  но вот постепенно вот так, постепенно.
[28:19.780 --> 28:21.780]  Когда нам приходит информация
[28:21.780 --> 28:23.780]  о том, что этот элемент
[28:23.780 --> 28:25.780]  надо удалить. Ну в том плане,
[28:25.780 --> 28:27.780]  чтобы когда на него больше ничего не указывать.
[28:29.780 --> 28:31.780]  Вот.
[28:31.780 --> 28:33.780]  Так что вот такая красота получается.
[28:37.780 --> 28:39.780]  Вот. В чем, казалось бы, кайф.
[28:39.780 --> 28:41.780]  Вот прям идеальный спект, то есть даже уже
[28:41.780 --> 28:43.780]  с удалениями за вот единицы.
[28:43.780 --> 28:45.780]  Ну а теперь какая следующая идея
[28:45.780 --> 28:47.780]  возникает? Так давайте,
[28:47.780 --> 28:49.780]  а может быть реализуем персистентную
[28:49.780 --> 28:51.780]  очередь?
[28:51.780 --> 28:53.780]  Нет.
[28:53.780 --> 28:55.780]  Но если очень хочется, то давайте.
[28:55.780 --> 28:57.780]  Ну вот, да. Нет, казалось бы
[28:57.780 --> 28:59.780]  причем. В чем проблема?
[29:01.780 --> 29:03.780]  Ну проблема, первая, конечно, проблема
[29:03.780 --> 29:05.780]  сразу заключается в том, что
[29:05.780 --> 29:07.780]  к сожалению, да, вот у стека есть маленькая
[29:07.780 --> 29:09.780]  приятная структура.
[29:09.780 --> 29:11.780]  То есть это приятное свойство. Его можно
[29:11.780 --> 29:13.780]  как бы подвесить за начальный элемент и как бы вот
[29:13.780 --> 29:15.780]  такой, да? И работа только с концом.
[29:15.780 --> 29:17.780]  У стека, у
[29:17.780 --> 29:19.780]  очереди это несколько не так.
[29:19.780 --> 29:21.780]  Потому что у очереди фактически
[29:21.780 --> 29:23.780]  есть такая висящая цепочка и работаете
[29:23.780 --> 29:25.780]  вы как с одним концом, так и с другим.
[29:25.780 --> 29:27.780]  То есть скажем, вот
[29:27.780 --> 29:29.780]  такая древесная структура уже не прокатит,
[29:29.780 --> 29:31.780]  потому что, например, если у какой-то версии
[29:31.780 --> 29:33.780]  скажем мы объявим поп, то теперь
[29:33.780 --> 29:35.780]  вопрос там куда двигаться, там условно. Сюда
[29:35.780 --> 29:37.780]  или сюда.
[29:37.780 --> 29:39.780]  Ну что же, что же делать?
[29:39.780 --> 29:41.780]  Тут мы говорим, хм,
[29:41.780 --> 29:43.780]  так какие проблемы-то вообще?
[29:43.780 --> 29:45.780]  Мы же, кажется, по-моему,
[29:45.780 --> 29:47.780]  там полтора часа в прошлом занятии,
[29:47.780 --> 29:49.780]  если не больше убили на то, чтобы реализовать
[29:49.780 --> 29:51.780]  очередь через два стека.
[29:51.780 --> 29:53.780]  Нельзя. Можно.
[29:53.780 --> 29:55.780]  Что это можно?
[29:55.780 --> 29:57.780]  Да, казалось бы,
[29:57.780 --> 29:59.780]  нет, казалось бы,
[29:59.780 --> 30:01.780]  нет, нет, скажи так, тут аккуратно.
[30:01.780 --> 30:03.780]  На самом деле, форум так. Реализовать-то можно все,
[30:03.780 --> 30:05.780]  что угодно. Да,
[30:05.780 --> 30:07.780]  сейчас, дойдем, дойдем, давай не перебивай. Да, все понятно.
[30:07.780 --> 30:09.780]  Молодец. Вот.
[30:09.780 --> 30:11.780]  Да, действительно, казалось бы,
[30:11.780 --> 30:13.780]  давайте, если мы хотим реализовать очередь,
[30:13.780 --> 30:15.780]  то давайте просто реализуем
[30:15.780 --> 30:17.780]  там, реализуем просто стек.
[30:17.780 --> 30:19.780]  Ну, там в лице даже у нас будет
[30:19.780 --> 30:21.780]  единый персистентный стек,
[30:21.780 --> 30:23.780]  и у каждой очереди это будет
[30:23.780 --> 30:25.780]  просто две версии стека.
[30:27.780 --> 30:29.780]  Ну, типа, одна версия соответствует стекуин,
[30:29.780 --> 30:31.780]  другая стека, думаю, понятно, о чем речь, да?
[30:31.780 --> 30:33.780]  И давайте,
[30:33.780 --> 30:35.780]  и прям честно делаем все эти операции.
[30:35.780 --> 30:37.780]  Ну, мы же знаем, что там все
[30:37.780 --> 30:39.780]  за вот единицы делается.
[30:39.780 --> 30:41.780]  Ну вот, возникает маленькая подлянка.
[30:41.780 --> 30:43.780]  Да, вот тут называется, вот, где
[30:43.780 --> 30:45.780]  амортизация нагревается.
[30:45.780 --> 30:47.780]  Потому что там
[30:47.780 --> 30:49.780]  оказывалось, что у от единицы,
[30:49.780 --> 30:51.780]  то есть это означает, что некоторые
[30:51.780 --> 30:53.780]  операции могут работать за линию, но гарантируется,
[30:53.780 --> 30:55.780]  что если вы делаете эти последовательные
[30:55.780 --> 30:57.780]  операции, то у вас
[30:57.780 --> 30:59.780]  тогда конкретно одна операция может
[30:59.780 --> 31:01.780]  работать за у от н, но в сумме все
[31:01.780 --> 31:03.780]  будет адекватно.
[31:03.780 --> 31:05.780]  Но в доказательстве этого,
[31:05.780 --> 31:07.780]  то есть в этом, в анализе, мы жестко
[31:07.780 --> 31:09.780]  пользовались тем, что
[31:09.780 --> 31:11.780]  все операции делаются последовательно.
[31:13.780 --> 31:15.780]  Вот.
[31:15.780 --> 31:17.780]  Потому что конкретными версиями
[31:17.780 --> 31:19.780]  действительно может так не получиться.
[31:19.780 --> 31:21.780]  Ведь действительно, если мы реализуем очередь,
[31:21.780 --> 31:23.780]  и у нас там получается, делаются
[31:23.780 --> 31:25.780]  операции, операции, операции, операции,
[31:25.780 --> 31:27.780]  операции, и, допустим,
[31:27.780 --> 31:29.780]  честного времени, допустим, c и t оказалось
[31:29.780 --> 31:31.780]  равно там teta от n.
[31:33.780 --> 31:35.780]  То есть мы тут делали, видимо, очередной
[31:35.780 --> 31:37.780]  поп, да?
[31:37.780 --> 31:39.780]  Допустим, поп
[31:39.780 --> 31:41.780]  из какой-нибудь там v
[31:41.780 --> 31:43.780]  какой-нибудь там 345, давайте.
[31:43.780 --> 31:45.780]  Вот.
[31:45.780 --> 31:47.780]  То есть если мы из этой версии делаем,
[31:47.780 --> 31:49.780]  и выяснилось, что она там работает за у от н.
[31:51.780 --> 31:53.780]  Вот.
[31:53.780 --> 31:55.780]  То есть там, ну, создалась
[31:55.780 --> 31:57.780]  конечно там новая версия там и все такое.
[31:57.780 --> 31:59.780]  Но проблема в том,
[31:59.780 --> 32:01.780]  что, как минимум в том, что вообще говоря
[32:01.780 --> 32:03.780]  структура этой амортизации
[32:03.780 --> 32:05.780]  позволяет нам вообще вызывать
[32:05.780 --> 32:07.780]  этот поп сколько угодно раз.
[32:07.780 --> 32:09.780]  От той же версии.
[32:09.780 --> 32:11.780]  Да, прям от той же версии, прям подряд.
[32:11.780 --> 32:13.780]  Pop v345.
[32:13.780 --> 32:15.780]  Pop v345.
[32:15.780 --> 32:17.780]  Pop v345.
[32:17.780 --> 32:19.780]  И каждый раз она будет, ну,
[32:19.780 --> 32:21.780]  если не принять там каких-то мер, она будет в тупую
[32:21.780 --> 32:23.780]  реализовываться за т.т.
[32:23.780 --> 32:25.780]  То есть знаете там вот
[32:25.780 --> 32:27.780]  как-то вот
[32:27.780 --> 32:29.780]  за эти вот
[32:29.780 --> 32:31.780]  там сразу ассоциация вот
[32:31.780 --> 32:33.780]  в Гарри Поттере было описана
[32:33.780 --> 32:35.780]  такая сцена, что например там
[32:35.780 --> 32:37.780]  ребята там поехали на чемпионат мира по квирикю
[32:37.780 --> 32:39.780]  и они там использовали какую-то
[32:39.780 --> 32:41.780]  бинокль с возможностью там
[32:41.780 --> 32:43.780]  перемотки и повтора.
[32:43.780 --> 32:45.780]  Чего?
[32:45.780 --> 32:47.780]  Ну я не помню как
[32:47.780 --> 32:49.780]  он называется, по-моему он так бинокль назывался.
[32:49.780 --> 32:51.780]  Ну ладно, от перевода зависит, не важно.
[32:51.780 --> 32:53.780]  Ну вот. Но как бы
[32:53.780 --> 32:55.780]  суть этого всего перемотка там
[32:55.780 --> 32:57.780]  замечательно сформулировал Рон Уизли.
[32:57.780 --> 32:59.780]  Который сказал, круто, я могу заставить
[32:59.780 --> 33:01.780]  того старого хрыча поковырять в носу еще раз.
[33:01.780 --> 33:03.780]  Еще раз. И еще раз.
[33:03.780 --> 33:05.780]  И еще раз.
[33:05.780 --> 33:07.780]  Ну вот.
[33:07.780 --> 33:09.780]  Вот тут примерно та же ситуация.
[33:09.780 --> 33:11.780]  Потому что тут, к сожалению,
[33:11.780 --> 33:13.780]  если это происходит
[33:13.780 --> 33:15.780]  за т.т.,
[33:15.780 --> 33:17.780]  то как бы
[33:17.780 --> 33:19.780]  то получается, что весь анализ
[33:19.780 --> 33:21.780]  на смарку все работает за N квадрат.
[33:23.780 --> 33:25.780]  То есть у нас если отдельные части
[33:25.780 --> 33:27.780]  работают за OATN, то каждый из них
[33:27.780 --> 33:29.780]  может быть заставлен и быть переделан еще раз.
[33:31.780 --> 33:33.780]  Вот. И это
[33:33.780 --> 33:35.780]  не то, что мы хотим.
[33:35.780 --> 33:37.780]  Вот.
[33:37.780 --> 33:39.780]  То есть получается действительно
[33:39.780 --> 33:41.780]  N квадрат. То есть мораль такая,
[33:41.780 --> 33:43.780]  что персистентность не очень дружит
[33:43.780 --> 33:45.780]  с амортизацией.
[33:45.780 --> 33:47.780]  То есть если мы хотим персистентизировать
[33:47.780 --> 33:49.780]  структуру, то мы должны как-то
[33:49.780 --> 33:51.780]  реализовать ее желательно таким
[33:51.780 --> 33:53.780]  образом, чтобы каждая операция работала
[33:53.780 --> 33:55.780]  за честную асимпозицию.
[33:55.780 --> 33:57.780]  Вот.
[33:57.780 --> 33:59.780]  Ну желательно там чтобы как-то еще удобные изменения
[33:59.780 --> 34:01.780]  проходили.
[34:01.780 --> 34:03.780]  Вот. В результате оказывается, чтобы реализовать
[34:03.780 --> 34:05.780]  персистентную очередь,
[34:05.780 --> 34:07.780]  приходится придумывать сильно более сложную
[34:07.780 --> 34:09.780]  структуру. Вот сейчас мы с вами
[34:09.780 --> 34:11.780]  с вами, возможно, сейчас
[34:11.780 --> 34:13.780]  впервые изучим реально сложный алгоритм.
[34:15.780 --> 34:17.780]  Не, не, не. Мы завод единицы.
[34:17.780 --> 34:19.780]  Не, не, не.
[34:23.780 --> 34:25.780]  Нет. С персистентным
[34:25.780 --> 34:27.780]  софхипом напряг, потому что
[34:27.780 --> 34:29.780]  структура нас просто пропитана
[34:29.780 --> 34:31.780]  амортизацией.
[34:31.780 --> 34:33.780]  Так что нет, персистентный
[34:33.780 --> 34:35.780]  софхип это не к нам.
[34:35.780 --> 34:37.780]  Да, вот там
[34:37.780 --> 34:39.780]  если
[34:39.780 --> 34:41.780]  хочется веселых словосочетаний,
[34:41.780 --> 34:43.780]  лучше пишите персистентную леватскую кучу.
[34:47.780 --> 34:49.780]  А есть ли какие-нибудь утверждения
[34:49.780 --> 34:51.780]  по поводу того, что любую структуру
[34:51.780 --> 34:53.780]  даже амортизированную можно сделать персистентной?
[34:53.780 --> 34:55.780]  Ну там не вся операция уже нет.
[34:55.780 --> 34:57.780]  Ну не знаю, мне об этом не известно.
[34:57.780 --> 34:59.780]  Вот так скажу.
[34:59.780 --> 35:01.780]  Итак.
[35:01.780 --> 35:03.780]  Знаете, смотрите.
[35:03.780 --> 35:05.780]  Что такое
[35:05.780 --> 35:07.780]  как же нам реализовать персистентную очередь?
[35:07.780 --> 35:09.780]  Ну, идея
[35:09.780 --> 35:11.780]  казалось бы, будет та же.
[35:11.780 --> 35:13.780]  Да, начало будет такое же.
[35:13.780 --> 35:15.780]  То есть у нас будет
[35:15.780 --> 35:17.780]  стэк L,
[35:17.780 --> 35:19.780]  в который мы будем добавлять элементы.
[35:21.780 --> 35:23.780]  Ну, по крайней мере, по идее.
[35:23.780 --> 35:25.780]  И стэк R,
[35:25.780 --> 35:27.780]  из которого мы эти элементы
[35:27.780 --> 35:29.780]  будем доставать.
[35:31.780 --> 35:33.780]  Вот, понятно, да?
[35:35.780 --> 35:37.780]  Ну, в принципе,
[35:37.780 --> 35:39.780]  до некоторого момента,
[35:39.780 --> 35:41.780]  то есть вообразив в себе
[35:41.780 --> 35:43.780]  какую-нибудь серединую ситуацию,
[35:43.780 --> 35:45.780]  что в этом стэке много элементов,
[35:45.780 --> 35:47.780]  в этом стэке меньше элементов.
[35:49.780 --> 35:51.780]  Ну, как бы, что мы делаем тогда?
[35:51.780 --> 35:53.780]  Ну, тогда, действительно, приходит push,
[35:53.780 --> 35:55.780]  запихиваем сюда, приходит pop,
[35:55.780 --> 35:57.780]  достаем отсюда.
[35:57.780 --> 35:59.780]  Ну, или там топ какой-нибудь, ну, смотрим сюда тоже.
[35:59.780 --> 36:01.780]  Не проблема.
[36:01.780 --> 36:03.780]  Понимаете, да?
[36:03.780 --> 36:05.780]  Вот.
[36:05.780 --> 36:07.780]  Но просто проблема возникнет в том,
[36:07.780 --> 36:09.780]  что когда-нибудь элементы здесь закончатся,
[36:09.780 --> 36:11.780]  и тогда все эти элементы придется
[36:11.780 --> 36:13.780]  перекинуть.
[36:13.780 --> 36:15.780]  Причем самое обидное, что мы должны
[36:15.780 --> 36:17.780]  озаботиться этим сильно заранее.
[36:17.780 --> 36:19.780]  Почему? Потому что если у нас, например,
[36:19.780 --> 36:21.780]  очистится весь вот этот стэк,
[36:21.780 --> 36:23.780]  и мы потребуем следующий, то нам придется
[36:23.780 --> 36:25.780]  докопаться аж до сюда.
[36:27.780 --> 36:29.780]  Прямо, то есть, возможно, потребуется
[36:29.780 --> 36:31.780]  отн операции, просто чисто для того, чтобы
[36:31.780 --> 36:33.780]  докопаться до этого элемента, не говоря уже о том,
[36:33.780 --> 36:35.780]  чтобы там куда-то кого-то перетащить.
[36:37.780 --> 36:39.780]  Поэтому, значит, мы...
[36:39.780 --> 36:41.780]  Ну, то есть вся суть, то есть сейчас будет действительно
[36:41.780 --> 36:43.780]  достаточно сложная, там, какие-то махинации,
[36:43.780 --> 36:45.780]  но смысл очень простой.
[36:45.780 --> 36:47.780]  Вот смысл очень простой.
[36:47.780 --> 36:49.780]  Мы на каждую операцию будем тратить
[36:49.780 --> 36:51.780]  время на то, чтобы
[36:51.780 --> 36:53.780]  перекинуть
[36:53.780 --> 36:55.780]  соответствующие элементы из стэка
[36:55.780 --> 36:57.780]  L в, там, условно, стэк R.
[36:59.780 --> 37:01.780]  Вот как бы, вот я не случайно
[37:01.780 --> 37:03.780]  вот упоминал структуру в стэке, когда
[37:03.780 --> 37:05.780]  мы амортизируем, то есть мы как бы
[37:05.780 --> 37:07.780]  постепенно удаляем, да, то есть
[37:07.780 --> 37:09.780]  у нас есть список элементов,
[37:09.780 --> 37:11.780]  которые надо удалить, и мы на каждом шаге
[37:11.780 --> 37:13.780]  удаляем по три элемента.
[37:13.780 --> 37:15.780]  То есть, как бы, чтобы делать
[37:15.780 --> 37:17.780]  как бы на каждом шаге
[37:17.780 --> 37:19.780]  за вот единицы. Вот сейчас у нас
[37:19.780 --> 37:21.780]  такая же смысл, то есть мы не будем
[37:21.780 --> 37:23.780]  полностью перетаскивания делать,
[37:23.780 --> 37:25.780]  мы сделаем какие-то
[37:25.780 --> 37:27.780]  там три или четыре
[37:27.780 --> 37:29.780]  шара навстречу этой светлой
[37:29.780 --> 37:31.780]  цели.
[37:33.780 --> 37:35.780]  В результате работать это
[37:35.780 --> 37:37.780]  будет так. Вот давайте так.
[37:37.780 --> 37:39.780]  Первое приближение. Значит, смотрите.
[37:39.780 --> 37:41.780]  Ну, во-первых, ну, давайте подумаем.
[37:41.780 --> 37:43.780]  Вот, если у нас уже прямо сейчас
[37:43.780 --> 37:45.780]  есть элементы в стеке L
[37:45.780 --> 37:47.780]  и элементы в стеке R.
[37:47.780 --> 37:49.780]  Значит, забирая вперед, сразу скажу,
[37:49.780 --> 37:51.780]  что, как бы, режим
[37:51.780 --> 37:53.780]  перекопирования, то есть, ну, то есть
[37:53.780 --> 37:55.780]  на самом деле, то есть, режим, то есть
[37:55.780 --> 37:57.780]  два режима. Нормальный режим, когда мы ничего не делаем.
[37:57.780 --> 37:59.780]  Почти.
[37:59.780 --> 38:01.780]  И режим перекопирования.
[38:01.780 --> 38:03.780]  Режим перекопирования включается, когда
[38:03.780 --> 38:05.780]  в стеке L становится на один элемент больше,
[38:05.780 --> 38:07.780]  чем в стеке R.
[38:07.780 --> 38:09.780]  То есть,
[38:09.780 --> 38:11.780]  то есть, пока в стеке L не больше,
[38:11.780 --> 38:13.780]  чем элементов, чем в стеке R, нас все
[38:13.780 --> 38:15.780]  устраивает. То есть, просто
[38:15.780 --> 38:17.780]  ничего не делаем. Вот.
[38:17.780 --> 38:19.780]  А есть режим перекопирования.
[38:19.780 --> 38:21.780]  Но теперь, смотрите, что нам нужно?
[38:21.780 --> 38:23.780]  Нам нужно каким-то образом вот эти элементы
[38:23.780 --> 38:25.780]  запихнуть вот сюда. Да?
[38:25.780 --> 38:27.780]  Вот.
[38:27.780 --> 38:29.780]  В чем сделать это? Желательно за там
[38:29.780 --> 38:31.780]  X-операцией.
[38:31.780 --> 38:33.780]  Почему именно за X-операцией? Потому что
[38:33.780 --> 38:35.780]  через X, потому что, ну,
[38:35.780 --> 38:37.780]  то есть, мы знаем, что не позже,
[38:37.780 --> 38:39.780]  чем через X, не раньше, чем
[38:39.780 --> 38:41.780]  через X даже, через X-операции,
[38:41.780 --> 38:43.780]  через X плюс один, нам вот этот элемент
[38:43.780 --> 38:45.780]  вообще, до этого элемента вообще докопаются.
[38:45.780 --> 38:47.780]  Поэтому, если к этому моменту
[38:47.780 --> 38:49.780]  он окажется в стеке R,
[38:49.780 --> 38:51.780]  то, в общем-то, нас то устроит.
[38:51.780 --> 38:53.780]  Но, правда,
[38:53.780 --> 38:55.780]  заметим, чтобы запихнуть его куда-то сюда,
[38:55.780 --> 38:57.780]  вот эти элементы тоже придется
[38:57.780 --> 38:59.780]  доставать, не правда ли?
[38:59.780 --> 39:01.780]  Понимаете, да? Вот.
[39:01.780 --> 39:03.780]  Поэтому,
[39:03.780 --> 39:05.780]  значит, нам придется
[39:05.780 --> 39:07.780]  провернуть такую махинацию. То есть, надо.
[39:07.780 --> 39:09.780]  Нам придется достать,
[39:09.780 --> 39:11.780]  значит, придется, значит, перекопирование.
[39:11.780 --> 39:13.780]  Будет устроено так.
[39:13.780 --> 39:15.780]  Сначала мы
[39:15.780 --> 39:17.780]  стек R,
[39:17.780 --> 39:19.780]  элементы
[39:19.780 --> 39:21.780]  из стека R перетащим в некий
[39:21.780 --> 39:23.780]  дополнительный стек S.
[39:25.780 --> 39:27.780]  Вот он.
[39:33.780 --> 39:35.780]  Вот. Потом,
[39:35.780 --> 39:37.780]  ну, то есть, эти элементы, вот давайте я сейчас нот.
[39:37.780 --> 39:39.780]  Вот.
[39:39.780 --> 39:41.780]  Потом, ну, давайте я сейчас абстрактно
[39:41.780 --> 39:43.780]  напишу, потом я, собственно, продемонстрирую, что тут
[39:43.780 --> 39:45.780]  в идеале хотелось бы иметь.
[39:45.780 --> 39:47.780]  Смотрите, это вот R, S.
[39:47.780 --> 39:49.780]  Потом все элементы
[39:49.780 --> 39:51.780]  перетащить
[39:51.780 --> 39:53.780]  из элемента нот
[39:53.780 --> 39:55.780]  из стека L в стек R.
[39:57.780 --> 39:59.780]  А потом из R,
[39:59.780 --> 40:01.780]  а потом из S вернуть элементы
[40:01.780 --> 40:03.780]  обратно в R.
[40:07.780 --> 40:09.780]  Сейчас, давайте, я сейчас вот,
[40:09.780 --> 40:11.780]  давайте так, чтобы было всем понятно,
[40:11.780 --> 40:13.780]  я сейчас это на примере просто покажу,
[40:13.780 --> 40:15.780]  что тут пока хочется делать.
[40:15.780 --> 40:17.780]  Пока это все там,
[40:17.780 --> 40:19.780]  то есть, знаете, так, идея и там,
[40:19.780 --> 40:21.780]  ну, я не знаю, там, что-то типа
[40:21.780 --> 40:23.780]  декларации намерений, что ли.
[40:23.780 --> 40:25.780]  Ну, вот. Ну, такие там может быть постепенное
[40:25.780 --> 40:27.780]  приближение, значит, что мы будем делать.
[40:27.780 --> 40:29.780]  Значит, смотрите, вот, допустим, у нас
[40:29.780 --> 40:31.780]  было, что у нас там в стеке R, допустим,
[40:31.780 --> 40:33.780]  там, допустим, элементы 2,
[40:33.780 --> 40:35.780]  3, 5, 8 там,
[40:35.780 --> 40:37.780]  я не знаю, 21, 38.
[40:45.780 --> 40:47.780]  Вот. А вот с этой стороны у нас тут
[40:47.780 --> 40:49.780]  образовались какие-нибудь числа.
[40:49.780 --> 40:51.780]  Я не знаю, 4, 9, 16,
[40:51.780 --> 40:53.780]  25, 49,
[40:53.780 --> 40:55.780]  52.
[40:55.780 --> 40:57.780]  И 8.
[40:57.780 --> 40:59.780]  Да, еще одна.
[40:59.780 --> 41:01.780]  Так, ну ладно, чтобы,
[41:01.780 --> 41:03.780]  давайте выясним.
[41:03.780 --> 41:05.780]  Ну, по барабану, да.
[41:05.780 --> 41:07.780]  Топеречи. Ну, вот.
[41:07.780 --> 41:09.780]  Что мы хотим сделать?
[41:09.780 --> 41:11.780]  Сначала мы хотим перекинуть
[41:11.780 --> 41:13.780]  все вот элементы из R в S.
[41:13.780 --> 41:15.780]  То есть, тогда у нас,
[41:15.780 --> 41:17.780]  если мы их будем по одному перекидывать,
[41:17.780 --> 41:19.780]  то у нас так и получится.
[41:19.780 --> 41:21.780]  38, там, соответственно, 21,
[41:21.780 --> 41:23.780]  ну, прям вот в том же порядке,
[41:23.780 --> 41:25.780]  8, 5, 3 и 2.
[41:27.780 --> 41:29.780]  Отлично. Наконец-то зачистили вот это все.
[41:31.780 --> 41:33.780]  Ой, да, легче уже так, да.
[41:33.780 --> 41:35.780]  Вот все за один заход.
[41:35.780 --> 41:37.780]  Нет.
[41:37.780 --> 41:39.780]  Это мы все хотим сделать,
[41:39.780 --> 41:41.780]  все вот это вот мы хотим делать за
[41:41.780 --> 41:43.780]  X заходов.
[41:43.780 --> 41:45.780]  Амортизирован, да?
[41:45.780 --> 41:47.780]  Нет. Ну, в итоге хотим, чтобы не амортизирован.
[41:47.780 --> 41:49.780]  Но, как бы, мы хотим, чтобы
[41:49.780 --> 41:51.780]  каждый из операций,
[41:51.780 --> 41:53.780]  то есть, параллельно с push и pop,
[41:53.780 --> 41:55.780]  то есть, рядом с каждым push и pop
[41:55.780 --> 41:57.780]  должно делаться какое-то константное количество
[41:57.780 --> 41:59.780]  операций, там, по 3, по 4,
[41:59.780 --> 42:01.780]  но так, чтобы суммарно потом
[42:01.780 --> 42:03.780]  за X этих операций произошло следующее.
[42:03.780 --> 42:05.780]  Во-первых, вот эти элементы перелезли
[42:05.780 --> 42:07.780]  в stack S.
[42:07.780 --> 42:09.780]  Потом мы перегнали вот эти
[42:09.780 --> 42:11.780]  элементы все в stack R.
[42:11.780 --> 42:13.780]  То есть, вот давайте
[42:13.780 --> 42:15.780]  так и перепишем. То есть,
[42:15.780 --> 42:17.780]  вот эти мыши отсюда достаем,
[42:17.780 --> 42:19.780]  как бы, да, и поехали. 18, 52,
[42:19.780 --> 42:21.780]  49,
[42:21.780 --> 42:23.780]  25, 16,
[42:23.780 --> 42:25.780]  29, 40.
[42:25.780 --> 42:27.780]  Вот. Ну, и этот stack становится
[42:27.780 --> 42:29.780]  пустым.
[42:29.780 --> 42:31.780]  Вот.
[42:31.780 --> 42:33.780]  И тогда получается
[42:33.780 --> 42:35.780]  следующее. Следующее, следующее.
[42:35.780 --> 42:37.780]  Вот. Теперь у нас stack пустой.
[42:37.780 --> 42:39.780]  И, наконец, все, что нам остается,
[42:39.780 --> 42:41.780]  это теперь вот эти элементы в том же порядке
[42:41.780 --> 42:43.780]  вернуть в stack R.
[42:43.780 --> 42:45.780]  И получится вот
[42:45.780 --> 42:47.780]  два, три,
[42:47.780 --> 42:49.780]  пять, соответственно,
[42:49.780 --> 42:51.780]  восемь,
[42:51.780 --> 42:53.780]  двадцать один и
[42:53.780 --> 42:55.780]  тридцать восемь.
[42:57.780 --> 42:59.780]  А что мы делаем, если
[42:59.780 --> 43:01.780]  по мере того, как там
[43:01.780 --> 43:03.780]  идут новые пуши и попы? Ну, что-то
[43:03.780 --> 43:05.780]  происходит с этими stackами?
[43:05.780 --> 43:07.780]  Вот. Да,
[43:07.780 --> 43:09.780]  правильный вопрос.
[43:09.780 --> 43:11.780]  Правильный, абсолютный вопрос. Да, поэтому я и говорю,
[43:11.780 --> 43:13.780]  что это декларация намеренности. Да, потому что
[43:13.780 --> 43:15.780]  да, мы будем это делать, но
[43:15.780 --> 43:17.780]  у нас параллельно что-то
[43:17.780 --> 43:19.780]  будет происходить.
[43:19.780 --> 43:21.780]  Что будет параллельно происходить?
[43:21.780 --> 43:23.780]  Параллельно будет происходить то, что нам
[43:23.780 --> 43:25.780]  нужно будет выполнять сами
[43:25.780 --> 43:27.780]  пуши и попы.
[43:27.780 --> 43:29.780]  То есть, скажем,
[43:29.780 --> 43:31.780]  может оказаться, например,
[43:31.780 --> 43:33.780]  что мы хотим за x операции, допустим,
[43:33.780 --> 43:35.780]  перекопировать x плюс один элемент.
[43:35.780 --> 43:37.780]  Но у нас есть маленькая подлянка,
[43:37.780 --> 43:39.780]  что если мы начнем перекопировать
[43:39.780 --> 43:41.780]  вот этот stack, а потом нам бабах
[43:41.780 --> 43:43.780]  сделали пуши, сделали пуши сюда же,
[43:43.780 --> 43:45.780]  то это будет
[43:45.780 --> 43:47.780]  немножко не очень, правда?
[43:47.780 --> 43:49.780]  Вот.
[43:49.780 --> 43:51.780]  Вот.
[43:51.780 --> 43:53.780]  Поэтому, то есть, такая проблема.
[43:53.780 --> 43:55.780]  Еще более того, если мы
[43:55.780 --> 43:57.780]  там что-то добавим, то порядок элементов
[43:57.780 --> 43:59.780]  просто навсегда порушится.
[43:59.780 --> 44:01.780]  Поэтому мы
[44:01.780 --> 44:03.780]  будем говорить нот. Поэтому сейчас
[44:03.780 --> 44:05.780]  вот и будут появляться, да, вот stack s у нас.
[44:05.780 --> 44:07.780]  Да, он будет, и смысл
[44:07.780 --> 44:09.780]  его будет ровно тот же.
[44:09.780 --> 44:11.780]  Вот.
[44:11.780 --> 44:13.780]  Но теперь
[44:13.780 --> 44:15.780]  смотрите, рядом со stack l
[44:15.780 --> 44:17.780]  мы заведем
[44:17.780 --> 44:19.780]  stack l'.
[44:25.780 --> 44:27.780]  Значит, смотрите, то есть, идея такая,
[44:27.780 --> 44:29.780]  в нормальном режиме,
[44:29.780 --> 44:31.780]  то есть, в нормальном режиме
[44:31.780 --> 44:33.780]  stack l', ну, равно как и stack s,
[44:33.780 --> 44:35.780]  не работают.
[44:35.780 --> 44:37.780]  Понимаете, да?
[44:37.780 --> 44:39.780]  То есть, просто они,
[44:39.780 --> 44:41.780]  то есть, они вот такие
[44:41.780 --> 44:43.780]  молодцы, они не работают.
[44:43.780 --> 44:45.780]  Что?
[44:45.780 --> 44:47.780]  Сейчас, то есть, не понял?
[44:47.780 --> 44:49.780]  Нет, сейчас дойдем,
[44:49.780 --> 44:51.780]  погодите.
[44:51.780 --> 44:53.780]  Давайте...
[44:53.780 --> 44:55.780]  Ну вот, значит, l',
[44:55.780 --> 44:57.780]  то есть,
[44:57.780 --> 44:59.780]  то есть, идея будет следующая, да,
[44:59.780 --> 45:01.780]  что получается
[45:01.780 --> 45:03.780]  в нормальном режиме,
[45:03.780 --> 45:05.780]  то есть, действительно, push
[45:05.780 --> 45:07.780]  соответственно просто в l,
[45:07.780 --> 45:09.780]  pop,
[45:09.780 --> 45:11.780]  в r.
[45:11.780 --> 45:13.780]  А в режиме
[45:13.780 --> 45:15.780]  перекопирования,
[45:15.780 --> 45:17.780]  ну, вот,
[45:17.780 --> 45:19.780]  ну, вот, ну, здесь придется
[45:19.780 --> 45:21.780]  еще оговариваться, но push
[45:21.780 --> 45:23.780]  будет делаться в l'.
[45:27.780 --> 45:29.780]  Ну, то есть, на уровне идеи уже говорим,
[45:29.780 --> 45:31.780]  что, да, в конце получится,
[45:31.780 --> 45:33.780]  что вы сделали вот это перекопирование,
[45:33.780 --> 45:35.780]  да?
[45:35.780 --> 45:37.780]  Да.
[45:37.780 --> 45:39.780]  Ну, вот, сделали это перекопирование,
[45:39.780 --> 45:41.780]  но при этом были запушены еще элементы.
[45:41.780 --> 45:43.780]  Но тогда у вас теперь будет l'
[45:43.780 --> 45:45.780]  пустой, а вот здесь у вас
[45:45.780 --> 45:47.780]  появились еще какие-то там элементы
[45:47.780 --> 45:49.780]  веселые.
[45:49.780 --> 45:51.780]  Да, совершенно верно. И тогда просто
[45:51.780 --> 45:53.780]  идея, что в этом месте вы эти стэки
[45:53.780 --> 45:55.780]  можете просто поменять местами.
[45:55.780 --> 45:57.780]  Да, ну, просто, да, если у вас стэки
[45:57.780 --> 45:59.780]  на указателях реализованы, то, в общем-то,
[45:59.780 --> 46:01.780]  вам их просто можно поменять местами.
[46:01.780 --> 46:03.780]  Да.
[46:03.780 --> 46:05.780]  Этот стэк нужен
[46:05.780 --> 46:07.780]  для того, чтобы в процессе
[46:07.780 --> 46:09.780]  ну, потому что
[46:09.780 --> 46:11.780]  перекопирование происходит параллельно
[46:11.780 --> 46:13.780]  с реальными push'ами и pop'ами,
[46:13.780 --> 46:15.780]  которые происходят.
[46:17.780 --> 46:19.780]  То есть, напоминаю, мы не можем просто
[46:19.780 --> 46:21.780]  взять и перекопировать, и потратить
[46:21.780 --> 46:23.780]  отn времени до того, как возьмем
[46:23.780 --> 46:25.780]  следующую операцию, да? То есть,
[46:25.780 --> 46:27.780]  напоминаю, в чем... То есть, как бы,
[46:27.780 --> 46:29.780]  мы вот это вот будем делать постепенно.
[46:29.780 --> 46:31.780]  То есть, как бы,
[46:31.780 --> 46:33.780]  вот мы себе описали, что мы вот,
[46:33.780 --> 46:35.780]  если у нас тут было x элементов,
[46:35.780 --> 46:37.780]  x плюс 1, то мы как бы
[46:37.780 --> 46:39.780]  за x элементов
[46:39.780 --> 46:41.780]  перекидываем из r в s,
[46:41.780 --> 46:43.780]  потом x плюс 1 элемент перекидываем
[46:43.780 --> 46:45.780]  сюда, из l в r,
[46:45.780 --> 46:47.780]  а потом из s в r перекидываем x элементов. То есть,
[46:47.780 --> 46:49.780]  и того у нас есть 3x плюс 1
[46:49.780 --> 46:51.780]  операции.
[46:51.780 --> 46:53.780]  Да, мы это делаем
[46:53.780 --> 46:55.780]  не сразу.
[46:55.780 --> 46:57.780]  То есть, фишка то, что на каждом шаге
[46:57.780 --> 46:59.780]  мы, ну, давайте так, для простоты скажем,
[46:59.780 --> 47:01.780]  тратим, то есть, делаем
[47:01.780 --> 47:03.780]  4 из вот этих необходимых действий.
[47:03.780 --> 47:05.780]  Сейчас, почему 4?
[47:05.780 --> 47:07.780]  4 для того, чтобы за x операции
[47:07.780 --> 47:09.780]  вот с этим всем покончить.
[47:09.780 --> 47:11.780]  Ну, привите, тут
[47:11.780 --> 47:13.780]  3x плюс 1, поэтому я говорю 4.
[47:13.780 --> 47:15.780]  Ну, если хотите, можете в самом начале
[47:15.780 --> 47:17.780]  сделать на одно действие больше, но суть
[47:17.780 --> 47:19.780]  одна. Мы уже не одновременно их делаем,
[47:19.780 --> 47:21.780]  мы изначально должны из r в s,
[47:21.780 --> 47:23.780]  потом...
[47:23.780 --> 47:25.780]  Да, мы их, ну, последовательно,
[47:25.780 --> 47:27.780]  эти действия делаем последовательно, да.
[47:27.780 --> 47:29.780]  Почему нам по 4 тогда? Ну, потому что
[47:29.780 --> 47:31.780]  суммарно мы делаем, должны сделать 3x плюс 1
[47:31.780 --> 47:33.780]  действие, а я очень хочу
[47:33.780 --> 47:35.780]  за x пушей попов
[47:35.780 --> 47:37.780]  это все сделать. Почему
[47:37.780 --> 47:39.780]  именно за x? Потому что напоминаю.
[47:39.780 --> 47:41.780]  Потому что напоминаю.
[47:43.780 --> 47:45.780]  Мы начали перекопирование,
[47:45.780 --> 47:47.780]  когда тут было x элементов,
[47:47.780 --> 47:49.780]  а тут x плюс 1.
[47:49.780 --> 47:51.780]  Почему я хочу успеть
[47:51.780 --> 47:53.780]  за x?
[47:53.780 --> 47:55.780]  Ну, вот. Ну, хотя можно делать
[47:55.780 --> 47:57.780]  и по 3 операции, потому что
[47:57.780 --> 47:59.780]  можно считать и ту, после которой
[47:59.780 --> 48:01.780]  вот это вообще произошло.
[48:01.780 --> 48:03.780]  Но я хочу... Но дело в том, что
[48:03.780 --> 48:05.780]  после x операции,
[48:05.780 --> 48:07.780]  в худшем случае, может быть, что тут будет
[48:07.780 --> 48:09.780]  x попов, да, и следующий
[48:09.780 --> 48:11.780]  элемент будет какой-нибудь фронт.
[48:11.780 --> 48:13.780]  И будет фронт. И тогда вот мне
[48:13.780 --> 48:15.780]  нужно, чтобы этот элемент уже был доступен.
[48:15.780 --> 48:17.780]  Именно поэтому
[48:17.780 --> 48:19.780]  я хочу успеть именно за x операции.
[48:19.780 --> 48:21.780]  Да.
[48:21.780 --> 48:23.780]  Да.
[48:23.780 --> 48:25.780]  Да.
[48:25.780 --> 48:27.780]  Да.
[48:27.780 --> 48:29.780]  Причем обратите внимание, мы действительно перешли
[48:29.780 --> 48:31.780]  в нормальный режим, потому что
[48:31.780 --> 48:33.780]  в эре тогда не менее, чем
[48:33.780 --> 48:35.780]  x плюс 1 элемент, то есть вот эти вот все,
[48:35.780 --> 48:37.780]  да, а при этом
[48:37.780 --> 48:39.780]  в L-штрихе на этот момент будет
[48:39.780 --> 48:41.780]  сделано не более, чем x пушей.
[48:43.780 --> 48:45.780]  Поэтому значит в эре будет меньше
[48:45.780 --> 48:47.780]  элементов, чем в эре, и тогда значит
[48:47.780 --> 48:49.780]  режим действительно нормальный. Да.
[48:49.780 --> 48:51.780]  В x может быть порядка n нет?
[48:51.780 --> 48:53.780]  Ну, может.
[48:53.780 --> 48:55.780]  И что?
[48:55.780 --> 48:57.780]  Ну, суммарно.
[48:57.780 --> 48:59.780]  Суммарно, да.
[48:59.780 --> 49:01.780]  Но еще раз идея, вот основная
[49:01.780 --> 49:03.780]  идея заключается в том, вот
[49:03.780 --> 49:05.780]  самое главное, что вы должны понять,
[49:05.780 --> 49:07.780]  что мы это делаем
[49:07.780 --> 49:09.780]  не за 1 операцию.
[49:09.780 --> 49:11.780]  То есть у нас есть
[49:11.780 --> 49:13.780]  запросы
[49:13.780 --> 49:15.780]  вот эти, да, вот там.
[49:15.780 --> 49:17.780]  Там запросы, там query1,
[49:17.780 --> 49:19.780]  query2, query3 и так далее.
[49:19.780 --> 49:21.780]  И так далее, да.
[49:21.780 --> 49:23.780]  Вот.
[49:23.780 --> 49:25.780]  И вот это вот перекопирование
[49:25.780 --> 49:27.780]  вы вот не между там
[49:27.780 --> 49:29.780]  третьим и четвертым делаете,
[49:29.780 --> 49:31.780]  а в течение некоторых запросов.
[49:37.780 --> 49:39.780]  Ага. А сейчас
[49:39.780 --> 49:41.780]  после x операции
[49:41.780 --> 49:43.780]  у нас в L будет x элементов,
[49:43.780 --> 49:45.780]  а в R получается 2x минус 1, да?
[49:45.780 --> 49:47.780]  Э, почему?
[49:47.780 --> 49:49.780]  Ну, в худшем случае...
[49:49.780 --> 49:51.780]  Ну, в идеале, конечно, их должно быть
[49:51.780 --> 49:53.780]  x плюс 1, но если там
[49:53.780 --> 49:55.780]  это x будет x push, то тут будет
[49:55.780 --> 49:57.780]  2x плюс 1 элемент.
[49:57.780 --> 49:59.780]  Вот. Но да,
[49:59.780 --> 50:01.780]  но правда, тут, конечно, еще есть оговорочка,
[50:01.780 --> 50:03.780]  что... сейчас дойдем.
[50:03.780 --> 50:05.780]  То есть будет оговорочка,
[50:05.780 --> 50:07.780]  что, конечно, это мог быть
[50:07.780 --> 50:09.780]  x попов, тогда тут будет x плюс 1 элемент.
[50:09.780 --> 50:11.780]  Вот.
[50:11.780 --> 50:13.780]  Нет, ну а так суть, вот действительно,
[50:13.780 --> 50:15.780]  как бы переформулировать суть следующая.
[50:15.780 --> 50:17.780]  То есть, смотрите,
[50:17.780 --> 50:19.780]  то есть, допустим, представьте себе, вот вам каждый
[50:19.780 --> 50:21.780]  день нужно учиться, да?
[50:21.780 --> 50:23.780]  Ну, в смысле, ходить на пары.
[50:23.780 --> 50:25.780]  Вот.
[50:25.780 --> 50:27.780]  А параллельно вы хотите,
[50:27.780 --> 50:29.780]  ну, я не знаю,
[50:29.780 --> 50:31.780]  прочитать книжку.
[50:31.780 --> 50:33.780]  Не, ну любую,
[50:33.780 --> 50:35.780]  там, смотрите,
[50:35.780 --> 50:37.780]  любую, ну там любую книжку, неважно.
[50:37.780 --> 50:39.780]  Там, пожалуйста, ладно, что-то, ладно,
[50:39.780 --> 50:41.780]  отбалдывай. Отбалдывай, в чем давайте,
[50:41.780 --> 50:43.780]  чтоб не связанность программировали, там, ладно,
[50:43.780 --> 50:45.780]  звать Анна Коренина.
[50:45.780 --> 50:47.780]  Нет, хорошая,
[50:47.780 --> 50:49.780]  нет, ну на самом деле нет,
[50:49.780 --> 50:51.780]  там, как бы...
[50:51.780 --> 50:53.780]  Нет,
[50:53.780 --> 50:55.780]  нет,
[50:55.780 --> 50:57.780]  нет, нет, нет,
[50:57.780 --> 50:59.780]  если я честно, на самом деле
[50:59.780 --> 51:01.780]  мотивирует, потому что там, как бы...
[51:01.780 --> 51:03.780]  Потому что
[51:03.780 --> 51:05.780]  как минимум, ну,
[51:05.780 --> 51:07.780]  потому что как минимум там история
[51:07.780 --> 51:09.780]  рассказывается трех семей, история одной
[51:09.780 --> 51:11.780]  из них очень мотивирует, правда.
[51:11.780 --> 51:13.780]  Чего?
[51:13.780 --> 51:15.780]  Анна Коренина, я же говорю.
[51:15.780 --> 51:17.780]  Да.
[51:17.780 --> 51:19.780]  Нет.
[51:19.780 --> 51:21.780]  Это вот пример того. Вот вы хотите прочитать?
[51:21.780 --> 51:23.780]  Да, она два тома.
[51:23.780 --> 51:25.780]  Но у вас есть вот эта вот учеба.
[51:25.780 --> 51:27.780]  Пум-пум-пум-пум-пум-пум.
[51:27.780 --> 51:29.780]  Да, вот вам нужно вот ходить
[51:29.780 --> 51:31.780]  на пары.
[51:31.780 --> 51:33.780]  Но, смотрите, можно сделать...
[51:33.780 --> 51:35.780]  Можно, конечно, сказать так, что
[51:35.780 --> 51:37.780]  да, мне нужно потратить там, вот, там много времени,
[51:37.780 --> 51:39.780]  чтобы ее прочитать.
[51:39.780 --> 51:41.780]  Но как бы, если вы будете делать это
[51:41.780 --> 51:43.780]  между какими-то парами,
[51:43.780 --> 51:45.780]  то, скорее всего, вы пары прогуляете.
[51:45.780 --> 51:47.780]  Потому что, ну, а ну-ка, ну,
[51:47.780 --> 51:49.780]  либо вы там будете читать, ну, совсем, там, быстро-быстро,
[51:49.780 --> 51:51.780]  там, лишая себя там сна, обеда, ужина и так далее.
[51:51.780 --> 51:53.780]  Даже если на выходных, потому что
[51:53.780 --> 51:55.780]  ну, реально, это, конечно, не война и мир, но тоже
[51:55.780 --> 51:57.780]  два тома. Вот.
[51:57.780 --> 51:59.780]  Какие есть варианты? Есть варианты
[51:59.780 --> 52:01.780]  другое. Значит, есть варианты
[52:01.780 --> 52:03.780]  амортизации. Это означает, что
[52:03.780 --> 52:05.780]  после каждой пары,
[52:05.780 --> 52:07.780]  скажем, на перемене,
[52:07.780 --> 52:09.780]  вы тратите пять минут на то,
[52:09.780 --> 52:11.780]  чтобы прочитать, допустим, о от единицы страниц
[52:11.780 --> 52:13.780]  данного романа.
[52:13.780 --> 52:15.780]  Вот, четкие о от единицы.
[52:15.780 --> 52:17.780]  Не скажите.
[52:17.780 --> 52:19.780]  То есть, это происходит
[52:19.780 --> 52:21.780]  достаточно параллельно.
[52:21.780 --> 52:23.780]  То есть, получается,
[52:23.780 --> 52:25.780]  как бы так, то есть, получается,
[52:25.780 --> 52:27.780]  что тогда, получается, вы с одной стороны
[52:27.780 --> 52:29.780]  на уроке успеваете.
[52:29.780 --> 52:31.780]  То есть, другое дело, что просто,
[52:31.780 --> 52:33.780]  ну, просто по сути у вас, да, каждый урок, конечно,
[52:33.780 --> 52:35.780]  виртуально увеличивается на пять минут, которые вы тратите
[52:35.780 --> 52:37.780]  на Анну Каренину.
[52:37.780 --> 52:39.780]  Вот. Но зато
[52:39.780 --> 52:41.780]  процесс идет стабильно.
[52:41.780 --> 52:43.780]  Абсолютно.
[52:43.780 --> 52:45.780]  Да.
[52:45.780 --> 52:47.780]  Мы же можем к разному
[52:47.780 --> 52:49.780]  состоянию вызывать. То есть, нам
[52:49.780 --> 52:51.780]  мы можем нескольким состоянием
[52:51.780 --> 52:53.780]  делать рекопи,
[52:53.780 --> 52:55.780]  тогда у нас будет много операций.
[52:55.780 --> 52:57.780]  Нет, нет, нет. У нас будет так. Если мы запустили
[52:57.780 --> 52:59.780]  рекопи, то как бы это
[52:59.780 --> 53:01.780]  рекопи идет до конца.
[53:01.780 --> 53:03.780]  И только когда мы вот дошли
[53:03.780 --> 53:05.780]  до этого рекопи, мы обнаруживаем нот.
[53:05.780 --> 53:07.780]  То есть, восстанавливаем и том же думаем.
[53:07.780 --> 53:09.780]  Надо ли дальше там рекопи еще?
[53:09.780 --> 53:11.780]  А, такое не будет.
[53:11.780 --> 53:13.780]  Смотрите еще раз почему.
[53:13.780 --> 53:15.780]  Значит, еще раз напоминаю.
[53:15.780 --> 53:17.780]  Рекопи запускается ровно в тот момент, когда
[53:17.780 --> 53:19.780]  в стеке L стало на один элемент больше,
[53:19.780 --> 53:21.780]  чем в R.
[53:21.780 --> 53:23.780]  Да, в какой-то момент.
[53:23.780 --> 53:25.780]  То есть, изначально режим нормальный.
[53:25.780 --> 53:27.780]  Ну, изначально режим нормальный,
[53:27.780 --> 53:29.780]  да?
[53:29.780 --> 53:31.780]  В какой-то момент на один элемент стало больше.
[53:31.780 --> 53:33.780]  Ровно в этот момент
[53:33.780 --> 53:35.780]  на ближайшие X
[53:35.780 --> 53:37.780]  или там X операций
[53:37.780 --> 53:39.780]  нот, ну и плюс одну операцию,
[53:39.780 --> 53:41.780]  когда вот это произошло,
[53:41.780 --> 53:43.780]  объявляем режим перекопирования.
[53:43.780 --> 53:45.780]  Это же состояние меняем?
[53:45.780 --> 53:47.780]  Или это новое состояние?
[53:47.780 --> 53:49.780]  Нет, ну как сказать...
[53:49.780 --> 53:51.780]  Режим перекопирования.
[53:51.780 --> 53:53.780]  Ну, не совсем. Нет, у нас пока нет
[53:53.780 --> 53:55.780]  версий. Пока мы
[53:55.780 --> 53:57.780]  просто делаем последовательно
[53:57.780 --> 53:59.780]  там очередь на стеках,
[53:59.780 --> 54:01.780]  так, чтобы это был мой нот.
[54:01.780 --> 54:03.780]  Так, чтобы каждый момент времени мы делали
[54:03.780 --> 54:05.780]  вот от единицы действий.
[54:05.780 --> 54:07.780]  Пока это не персистентное.
[54:07.780 --> 54:09.780]  Нет, персистентность, смотрите,
[54:09.780 --> 54:11.780]  ну цель такая, что если мы достигнем
[54:11.780 --> 54:13.780]  того, что у нас будет, может быть, много
[54:13.780 --> 54:15.780]  стеков, но зато каждая операция
[54:15.780 --> 54:17.780]  будет за железные от единицы,
[54:17.780 --> 54:19.780]  и только со стеками, то персистентно
[54:19.780 --> 54:21.780]  ее будет сделать очень легко.
[54:21.780 --> 54:23.780]  Потому что любую операцию с персистентностью
[54:23.780 --> 54:25.780]  она будет включать в себя, что
[54:25.780 --> 54:27.780]  на самом деле мы находимся вот на такой-то фазе
[54:27.780 --> 54:29.780]  перекопирования, и просто она там, когда вы
[54:29.780 --> 54:31.780]  на этой версии что-то запустите, она там сделает какую-то
[54:31.780 --> 54:33.780]  свою часть перекопирования.
[54:33.780 --> 54:35.780]  Вот. То есть глубокий
[54:35.780 --> 54:37.780]  смысл того, что происходит, вот.
[54:37.780 --> 54:39.780]  Да, давай.
[54:39.780 --> 54:41.780]  Два вопроса, один и другой не очень.
[54:41.780 --> 54:43.780]  Во-первых, почему не ходить на лекции
[54:43.780 --> 54:45.780]  амортизировано? Во-вторых,
[54:45.780 --> 54:47.780]  почему у нас все хорошо
[54:47.780 --> 54:49.780]  будет с попом, когда
[54:49.780 --> 54:51.780]  у нас и режим перекопирования будет?
[54:51.780 --> 54:53.780]  У нас же элементы перекладываются
[54:53.780 --> 54:55.780]  в стек-с, они там резко оказываются
[54:55.780 --> 54:57.780]  в другом порядке.
[54:57.780 --> 54:59.780]  Нет, ну, смотри так.
[54:59.780 --> 55:01.780]  Так, погодите.
[55:01.780 --> 55:03.780]  Так, погодите,
[55:03.780 --> 55:05.780]  погодите.
[55:05.780 --> 55:07.780]  Ну,
[55:07.780 --> 55:09.780]  ну, считать, значит, давайте так,
[55:09.780 --> 55:11.780]  почему это мы... Это не амортизировано,
[55:11.780 --> 55:13.780]  это просто, смотрите. То есть, ну
[55:13.780 --> 55:15.780]  просто ситуация здесь такая. Вот есть пары.
[55:15.780 --> 55:17.780]  И на них надо ходить.
[55:17.780 --> 55:19.780]  Так, можешь на них амортизировано ходить.
[55:19.780 --> 55:21.780]  Всё в записи есть.
[55:21.780 --> 55:23.780]  Ну, не, давайте так.
[55:23.780 --> 55:25.780]  Сейчас мы живем в предположении, что на пары жестко ходить надо.
[55:25.780 --> 55:32.540]  на самом деле хорошее предположение кстати вот кстати более того вот из этих причин тоже
[55:32.540 --> 55:38.500]  следует почему на самом деле вот сейчас даже расскажу почему значит смотрите то есть вот
[55:38.500 --> 55:41.860]  хорошо ну пока предположим что действительно вот на паре жестко ходить надо вот потому что
[55:41.860 --> 55:48.020]  иначе там я не знаю расстреляют там не зачет по физкультуре там ну вот вот это все вот то есть
[55:48.020 --> 55:53.500]  жестко ходить надо тогда получается что если вы хотите почитать анну коренину вы должны это
[55:53.500 --> 56:02.900]  жестко делать значит где-то между парами нет ну как сказать после пар это между последней
[56:02.900 --> 56:09.700]  сегодняшней парней завтрашней следующей так что вот но просто тут просто суть оказалась в том что
[56:09.700 --> 56:15.260]  вас между парами нету там промежутка который вот позволит вам просто вот прочитать анну коренину
[56:15.260 --> 56:22.100]  целиком вот ну и психологически это сложно потому что в это время хочется там ну я не знаю поесть
[56:22.300 --> 56:29.360]  там есть поесть по спать там я не знаю там называется погулять там потанцевать там и так далее ну вот все
[56:29.360 --> 56:38.080]  что угодно там спортом там позаниматься вот вот соответственно значит что еще эти нот и но вот
[56:38.080 --> 56:43.180]  поэтому просто называется не успятий психологически просто и вообще и даже поняли еще там есть
[56:43.180 --> 56:46.980]  психологический момент и дуйте что да это очень сложно меня может энергии не хватит что даже не
[56:46.980 --> 56:47.980]  не хочется пытаться.
[56:47.980 --> 56:51.060]  Поэтому что мы делаем вместо этого?
[56:51.060 --> 56:54.340]  Мы просто говорим, что после каждой пары мы 5 минут тратим
[56:54.340 --> 56:55.340]  на Анну Каренину.
[56:55.340 --> 56:58.900]  Вот все, прям каждую перемену, уходим, садимся на диван,
[56:58.900 --> 57:01.900]  5 минут читаем Анну Каренину.
[57:01.900 --> 57:04.020]  И тогда в чем разница?
[57:04.020 --> 57:06.100]  То есть тогда получается, что вы стабилизируете,
[57:06.100 --> 57:09.660]  тогда вы движетесь, может и медленно, но зато стабильно
[57:09.660 --> 57:10.660]  и надежно.
[57:10.660 --> 57:13.060]  Потому что 5 минут там после пары находятся.
[57:13.060 --> 57:15.100]  Вот стабильно.
[57:15.740 --> 57:20.060]  То есть более того, почему и на паре имеет смысл
[57:20.060 --> 57:22.300]  ходить, вот тоже на самом деле есть такой классический
[57:22.300 --> 57:24.660]  анекдот про студента сессию амортизации.
[57:24.660 --> 57:32.420]  То есть мало кто знает, но когда студент поступает,
[57:32.420 --> 57:39.020]  называется любой вуз, к нему приходит черт и говорит,
[57:39.020 --> 57:42.740]  поздравляю ты попал в ад, и у тебя только есть выбор
[57:42.740 --> 57:43.740]  режима.
[57:43.900 --> 57:47.700]  Режим нормальный и режим студенческий.
[57:47.700 --> 57:54.700]  Вот, ну студент говорит, ну давай попробуем нормальный.
[57:54.700 --> 57:58.060]  Ну вот что такое нормальный режим?
[57:58.060 --> 58:00.580]  Студент, значит человек приходит к студенту каждый
[58:00.580 --> 58:04.540]  день, забивает ему молотком в голову гвоздь и уходит.
[58:04.540 --> 58:07.540]  Каждый день.
[58:07.540 --> 58:10.460]  Ну студент там держится неделю, две, три, а потом
[58:10.460 --> 58:15.420]  говорит, давай попробуем по-другому, давайте попробуем
[58:15.420 --> 58:16.420]  студенческий ад.
[58:16.420 --> 58:20.500]  Вот, что говорит, окей, и исчезает.
[58:20.500 --> 58:25.460]  Месяц проходит, два молотни приходит, три проходит,
[58:25.460 --> 58:28.780]  и вот наконец-то декабрь, неожиданно вечером когда-то
[58:28.780 --> 58:32.660]  студент стук в дверь, значит на пороге стоит черт с коробкой
[58:32.660 --> 58:34.620]  гвоздей и говорит, ну что студент, сессия.
[58:34.620 --> 58:41.100]  Вот, вот это называется амортизация.
[58:41.100 --> 58:47.260]  То есть мы все время амортизировано учились, да?
[58:47.260 --> 58:50.980]  Да, точнее наоборот, нет, наоборот, хотя к сожалению
[58:50.980 --> 58:53.660]  это не амортизировано учились, вы амортизировано отдыхали.
[58:53.660 --> 58:57.100]  То есть у вас цель была вот сколько-то отдохнуть,
[58:57.100 --> 58:58.100]  да?
[58:58.100 --> 58:59.100]  Сколько-то отдохнуть.
[58:59.100 --> 59:01.580]  И вы как бы говорили, что вот давайте вот я как бы
[59:01.580 --> 59:04.180]  сейчас отдохну, но в сумме как бы будет нормально,
[59:04.380 --> 59:05.460]  что dann сессию сession.
[59:05.460 --> 59:08.460]  Абортизированная учеба.
[59:08.460 --> 59:15.380]  Нееет, это если ты решил, что вместо 6 пар в день
[59:15.380 --> 59:19.160]  у тебя ближайшее 2 месяца будет 12, зато потом последние
[59:19.160 --> 59:21.160]  2 месяца у тебя не будет пар вообще.
[59:21.160 --> 59:22.160]  Наоборот.
[59:22.160 --> 59:24.700]  Это амортизированная учеба.
[59:24.700 --> 59:28.260]  Если у тебя первые 2 месяца отдыха потом последние
[59:28.260 --> 59:30.820]  2 месяца по 12 пар в день, значит амортизированный
[59:30.820 --> 59:35.620]  отдых а принципиально на самом деле если внимательно посмотреть на
[59:35.620 --> 59:48.660]  амортизацию то это требует что но но хотя но хотя да да да вы правы пожалуй да
[59:48.660 --> 59:53.620]  но да да правильно да то есть до некоторые операции и перекладываем на
[59:53.620 --> 59:58.540]  потом но гарантируем что в каждом моментом да да да согласен согласен
[59:58.800 --> 01:00:05.100]  да хорошо да но в принципе да вот то есть гвоздями получается так то есть к заданному
[01:00:05.100 --> 01:00:10.220]  сроку как бы вы все равно в объёте в голову все гвозди только вопрос что вот но вот только
[01:00:10.220 --> 01:00:15.440]  если у вас там просто значит одновременно будет виды все вози у вас будет там мишанина
[01:00:15.440 --> 01:00:21.240]  собственно там взорвана голова и так далее вот а если вы будете собственно учится вот
[01:00:21.240 --> 01:00:27.060]  собственно постепенно уже там начiekну вот уже прямо сейчас собственно аккуратно там аккуратно
[01:00:27.060 --> 01:00:32.720]  там вот там по чуть-чуть все предметы, то ну во-первых это будет гораздо стабильнее, то есть
[01:00:32.720 --> 01:00:36.960]  во-первых это стабильнее, то есть вы уже так привыкнете к этому графику, да, то есть возможно
[01:00:36.960 --> 01:00:42.280]  там действительно там будет конечно некоторое страдание, отчасти из-за того, что да, приходится
[01:00:42.280 --> 01:00:48.200]  работать, да, отчасти из-за того, что вы там завидуете, что там ваши товарищи уже там, называется там,
[01:00:48.200 --> 01:00:54.240]  там бегают по дискотекам, они там играют в кёрлинг, там радуются там, называются жизни всеми
[01:00:54.240 --> 01:01:02.240]  способами, вот, но зато когда, но вот, но зато когда придет сессия, называется там, но вот вам
[01:01:02.240 --> 01:01:09.200]  особенно прииграться не придется, да вот, ну и потом стипендия, нет потом стипендия, которая даст вам
[01:01:09.200 --> 01:01:17.640]  собственно возможности, да, собственно самим потом играть, да, то есть тут вот, то есть как вы даете
[01:01:17.640 --> 01:01:22.040]  то, что заложить действительно семена, потому что потом это, потом знаете, на работе это вам потом
[01:01:22.040 --> 01:01:27.400]  собственно тоже в профит пойдет, нет, даже не потому, что там вы там пройдете собеседование, да, или не
[01:01:27.400 --> 01:01:33.000]  пройдете там, дело даже не в этом, просто дело в том, что ну как бы на работе подавляющие больше
[01:01:33.000 --> 01:01:37.480]  свойства скорее всего там, называется, пойдут работать в какие-нибудь IT-компании типа там Яндекс.АБИ,
[01:01:37.480 --> 01:01:45.440]  там ВК и так далее, да, ну вот, соответственно, и тогда что, ну вот, и тогда если у вас уже есть
[01:01:45.440 --> 01:01:50.480]  привычка того, что действительно вы вот можете действительно вот большой частью дыря там действительно
[01:01:50.480 --> 01:01:55.600]  посвящать именно какой-то вот учебе работе, то во-первых, вам будет легче адаптироваться к работе, а во-вторых,
[01:01:55.600 --> 01:02:00.640]  собственно, вы будете готовы, что вы можете рядом с этой учебой тратить там пять минут на то, чтобы
[01:02:00.640 --> 01:02:05.920]  там вместо Анны Корениной уже изучать что-нибудь там, что необходимо реально по работе, и в результате вы
[01:02:05.920 --> 01:02:12.040]  окажетесь сильно более востребованным специалистом в итоге, просто в конечном счете, то есть да, то есть на
[01:02:12.040 --> 01:02:17.160]  самом деле это даже преимущество, знаете, вот в этом смысле на самом деле вот эти вот иногда вот, например,
[01:02:17.360 --> 01:02:20.560]  какие-нибудь неолимпиагрики, например, вот боятся олимпиагников на тему того,
[01:02:20.560 --> 01:02:25.640]  что я там вот буду, вот я там с ними учусь, и все, там я услужу лекцию, я с трудом понимаю,
[01:02:25.640 --> 01:02:30.920]  я не знаю, эти олимпиагники там явно уже своими вос 我們 там, называется, дают понять, это все понятно
[01:02:30.920 --> 01:02:36.680]  давно там, это все там, ну ладно там, если даже, ладно, если они там знают это одно дело, ну
[01:02:36.680 --> 01:02:41.160]  тут даже не знаю, но это все самоочевидно ,что вы тут это все разжевываете, вообще, не интересно,
[01:02:41.160 --> 01:02:46.520]  давайте лучше дальше вот но если но в итоге на самом деле тут просто для
[01:02:46.520 --> 01:02:50.120]  олимпиагиков очень большая подлянка после есть но вот просто если я просто
[01:02:50.120 --> 01:02:53.760]  вдавал не олимпиагика подлянка сразу если они поздравлю скажут они и олимпиагиков
[01:02:53.760 --> 01:02:57.320]  никогда не дают это там какие-то божие мега там космические люди которые там
[01:02:57.320 --> 01:03:02.960]  называются умеют там якобы раз в десять больше чем обычный человек вот ну
[01:03:02.960 --> 01:03:06.840]  сразу скажу на самом деле нет вот как вот правильно вот на топкоге руки
[01:03:06.840 --> 01:03:11.880]  Надя Короткевич и замечательный статус на эту тему статус называется статус
[01:03:11.880 --> 01:03:19.080]  ее простой я не гений я просто хорош в этом вот просто помните да то есть
[01:03:19.080 --> 01:03:22.800]  то есть в общем да он просто он очень круто решает там спортивное
[01:03:22.800 --> 01:03:26.340]  программирование все то есть в общем-то высокий рейтинг на топкоге говорит
[01:03:26.340 --> 01:03:31.880]  практически только об этом сам себе вот а во вторых с отец но то есть подлянка
[01:03:31.880 --> 01:03:35.440]  вот для нет но если вы не сдадитесь то есть говорите ладно да нормально кто-то
[01:03:35.440 --> 01:03:39.520]  занимался этим больше там кто-то у кого-то может быть там может быть там
[01:03:39.520 --> 01:03:41.920]  больше способностей там и так далее и нынче страшного
[01:03:41.920 --> 01:03:45.840]  называется я но значит я буду все равно действительно двигаться собственно и
[01:03:45.840 --> 01:03:50.680]  собственно работать и тут тогда в перспективе подлянка начинается уже
[01:03:50.680 --> 01:03:55.560]  олимпиаде потому что олимпиагики некоторое время наоборот радуются вот
[01:03:55.560 --> 01:04:00.440]  очень сильно радуются на эту тему там что вот а мне тут вот очень все легко это
[01:04:00.440 --> 01:04:04.320]  я все знаю на мотоанализе там эти все пределы мы там уже во всех листочках
[01:04:04.320 --> 01:04:09.600]  мат школах там уже изучали поэтому там не напрягаться вообще не надо то есть
[01:04:09.600 --> 01:04:14.160]  сейчас вот это параметри время ну вот и собственно так привыкайте потом на
[01:04:14.160 --> 01:04:18.120]  самом деле этот архив быстро заканчивается потому что день там в
[01:04:18.120 --> 01:04:21.200]  лучшем случае в середине первого курса ну или хоть там середине там первое
[01:04:21.200 --> 01:04:24.280]  семестр или там в лучшем случае первого курса это уже все ваше знание
[01:04:24.280 --> 01:04:28.440]  заканчивается там уже приходится ботать но собственно вас уже организм привык
[01:04:28.440 --> 01:04:33.800]  к сильно более низкой нагрузке и тут тогда вот а вот у не олимпиоников на
[01:04:33.800 --> 01:04:39.040]  оборот собственно уже производная в этом смысле пошла выше ну вот то есть тут
[01:04:39.040 --> 01:04:42.080]  на самом деле вот олимпиаде тоже такая подлянка так что результат в результате
[01:04:42.080 --> 01:04:45.320]  оказывается что там олимпиадники вылетают также как не олимпиадники на
[01:04:45.320 --> 01:04:56.520]  самом вот чего вот так это я да это я на первый вопрос ответил дам да начали
[01:04:56.520 --> 01:05:01.640]  с Анны Корениной да так да ладно это я тут ладно потратил да на воспитательную
[01:05:01.640 --> 01:05:06.320]  работу ладно давайте теперь вернемся по делу да давай напомним вопрос как у
[01:05:06.320 --> 01:05:11.720]  нас при копии работает мы же перекладываем из рвс у нас с порядком
[01:05:11.720 --> 01:05:17.720]  все плохо они не с порядком ничего плохого не происходит вот видите ну
[01:05:17.720 --> 01:05:21.560]  смотрите вот это вот наглядно видно вот когда вот слева направо смотрите потому
[01:05:21.560 --> 01:05:25.720]  что когда вы из рвс кладете вы как бы достаете отсюда кладете сюда поэтому
[01:05:25.720 --> 01:05:31.160]  порядок как бы все еще слева направо ну смотри
[01:05:31.640 --> 01:05:40.040]  вон а это следующая проблема которая да вот дойдем потому что перед этим мы
[01:05:40.040 --> 01:05:44.400]  занимались тем что решали проблему лишних пушей которые происходят то есть
[01:05:44.400 --> 01:05:48.240]  теперь мы убедились что если мы гарантируем что ближайшие икс операции
[01:05:48.240 --> 01:05:52.840]  будут только пуши то в общем-то я структуру данных уже описал правда
[01:05:52.840 --> 01:06:00.800]  понимаете да значит теперь попробуем уровень следующий значит на самом деле
[01:06:00.960 --> 01:06:06.400]  может возникнуть такая проблема но на самом деле есть у вас стеги это такие
[01:06:06.400 --> 01:06:10.560]  вектора которые позволяют вам еще из в оператор квадратной скобки лазить да
[01:06:10.560 --> 01:06:15.700]  то вы бы могли на самом деле просто хранить сколько элементов на самом деле
[01:06:15.700 --> 01:06:21.120]  у вас было попопано да и там с точки зрения перекопирования просто сказать
[01:06:21.120 --> 01:06:24.720]  если оставшийся элемент который надо перекопировать они уже попопаны то в общем
[01:06:24.720 --> 01:06:28.440]  то надо их не копировать а тупо удалять то есть это тоже надо делать потому что
[01:06:28.440 --> 01:06:31.120]  может скопиться много элементов, которые надо удалить, но
[01:06:31.120 --> 01:06:33.200]  вы просто их удаляете, а не добавляете.
[01:06:33.200 --> 01:06:38.520]  Но поэтому, если бы у вас стэк еще и поддерживал
[01:06:38.520 --> 01:06:41.480]  какую-нибудь операцию вида, а покажи мне там какой-нибудь
[01:06:41.480 --> 01:06:43.880]  там седьмой с конца элемент, то, собственно, в общем-то,
[01:06:43.880 --> 01:06:45.680]  на этом структуру можно было, описание структуры
[01:06:45.680 --> 01:06:46.680]  можно было бы и закончить.
[01:06:46.680 --> 01:06:51.800]  Вот, понятная идея, да?
[01:06:51.800 --> 01:06:57.840]  Ну просто идея в том, что давайте так, просто храним
[01:06:57.840 --> 01:07:00.760]  сколько элементов из этих вот R мы попопали, вот из
[01:07:00.760 --> 01:07:01.760]  этого X.
[01:07:01.760 --> 01:07:03.120]  Ну, в процессе перекопирования.
[01:07:03.120 --> 01:07:08.560]  И тогда просто, когда вы будете перекапывая, перебирать
[01:07:08.560 --> 01:07:11.920]  элементы из S в R, то просто те элементы, вы знаете, что
[01:07:11.920 --> 01:07:13.760]  там последние несколько элементов просто надо не
[01:07:13.760 --> 01:07:15.080]  добавлять в R, а просто удалять.
[01:07:15.080 --> 01:07:22.960]  Ну да, то есть, когда вы поняли, что все вот эти
[01:07:22.960 --> 01:07:26.360]  элементы, они уже были попопаны, вы же можете легко хранить
[01:07:26.360 --> 01:07:30.280]  информацию о том, сколько элементов из этого R на момент
[01:07:30.280 --> 01:07:33.400]  начала перекопирования вы попопали, да?
[01:07:33.400 --> 01:07:34.760]  Да даже не указать переменную просто.
[01:07:34.760 --> 01:07:40.160]  А если мы уже начнем лишнее перекладывать в R?
[01:07:40.160 --> 01:07:42.520]  Ну вряд ли вы так начнете, потому что функция-то непрерывно
[01:07:42.520 --> 01:07:43.520]  растет.
[01:07:43.520 --> 01:07:50.000]  Ну потому что сначала 0, потом 1, потом 2 и так далее.
[01:07:50.000 --> 01:07:51.000]  Поэтому, соответственно.
[01:07:51.000 --> 01:07:54.200]  Поэтому просто, и потом, это решается очень просто.
[01:07:54.280 --> 01:07:56.880]  Это решается на момент того… Смотрите, keти, эти элементы
[01:07:56.880 --> 01:08:01.020]  вы по-любому перекладываете сюда честно и эти элементы
[01:08:01.020 --> 01:08:02.440]  вы тоже сюда перекладываете честно.
[01:08:02.440 --> 01:08:07.680]  А вот когда вы тут перекладываете, вы просто достаете очередной
[01:08:07.680 --> 01:08:08.980]  элемент и говорите.
[01:08:08.980 --> 01:08:10.620]  Так, этот элемент был попопан?
[01:08:10.620 --> 01:08:14.260]  Если он не был попопан, значит вы его перекладываете.
[01:08:14.260 --> 01:08:17.200]  Если он был попопан, значит вы его тупо удаляете, но
[01:08:17.200 --> 01:08:18.680]  из S вы его по-любому достаете.
[01:08:18.680 --> 01:08:22.720]  То есть, тогда заметим, что некоторое время может операция
[01:08:22.720 --> 01:08:25.560]  уже и закончится, и тогда там в эсе останется несколько
[01:08:25.560 --> 01:08:28.560]  элементов удаления, но это тоже будет у нас частью
[01:08:28.560 --> 01:08:29.560]  перекопирования.
[01:08:29.560 --> 01:08:33.400]  То есть еще есть перекопирования, те которые мы из эсе просили?
[01:08:33.400 --> 01:08:34.400]  Ну да.
[01:08:34.400 --> 01:08:36.680]  Это мы научились не добавлять удаленные элементы.
[01:08:36.680 --> 01:08:38.680]  Значит это мы, да.
[01:08:38.680 --> 01:08:40.400]  А находить какой элемент?
[01:08:40.400 --> 01:08:43.080]  Вот, а вот находить какой элемент, да, мы пока поверили,
[01:08:43.080 --> 01:08:44.080]  что мы это откуда-то можем.
[01:08:44.080 --> 01:08:46.320]  Находить какой элемент что-то?
[01:08:46.320 --> 01:08:48.960]  Ну просто, ну потому что смотрите, возите такой вопрос, у нас
[01:08:48.960 --> 01:08:52.320]  помимо операции push и pop есть операция top, которая
[01:08:52.320 --> 01:08:54.680]  говорит, так, скажи мне, пожалуйста, кто у тебя сейчас
[01:08:54.680 --> 01:08:55.680]  наверху.
[01:08:55.680 --> 01:08:58.680]  И тогда у нас возникнут проблемы.
[01:08:58.680 --> 01:08:59.680]  Почему?
[01:08:59.680 --> 01:09:03.320]  Потому что этот элемент может не находиться на верхушке
[01:09:03.320 --> 01:09:05.600]  ни одного стека.
[01:09:05.600 --> 01:09:09.400]  Он, там, он скорее всего в этот момент будет где-то
[01:09:09.400 --> 01:09:10.400]  в стеке S.
[01:09:10.400 --> 01:09:18.080]  Фронт, который раньше лежал в эльке наверху, а теперь...
[01:09:18.080 --> 01:09:19.080]  Нет, топ.
[01:09:19.840 --> 01:09:23.360]  А, топа, у нас нет топа, а у нас есть операция front.
[01:09:23.360 --> 01:09:26.520]  Нет, наоборот, front вот типа front вот здесь, а back вот здесь.
[01:09:26.520 --> 01:09:36.880]  Ну вот, да, поэтому, то есть, этот элемент, да, back без труда,
[01:09:36.880 --> 01:09:39.640]  но если бы у нас был не front, а back, это был бы стек и
[01:09:39.640 --> 01:09:40.640]  мы бы не заморачивались.
[01:09:40.640 --> 01:09:41.640]  А надо front.
[01:09:41.640 --> 01:09:42.640]  Чего?
[01:09:43.200 --> 01:09:44.200]  Вот.
[01:09:44.200 --> 01:09:51.360]  Но я говорю, вот эту проблему мы сейчас решаем.
[01:09:51.360 --> 01:09:52.360]  Ну вот.
[01:09:52.360 --> 01:09:58.680]  Ну смотрите, значит, еще раз, давайте так, раз у нас
[01:09:58.680 --> 01:10:02.840]  пара сейчас заканчивается, сейчас я подведу итог просто
[01:10:02.840 --> 01:10:05.160]  своего левра, до чего мы дошли и в каких предположениях
[01:10:05.160 --> 01:10:06.160]  мы уже победили.
[01:10:06.160 --> 01:10:10.800]  Значит, мы предполагаем сейчас, что у нас есть стеки,
[01:10:10.800 --> 01:10:15.720]  потому что в каждом стеке есть операция, возьми не
[01:10:15.720 --> 01:10:19.120]  самый верхний элемент в стеке, а возьми элемент,
[01:10:19.120 --> 01:10:22.080]  я не знаю, восьмой с верхней шины.
[01:10:22.080 --> 01:10:24.320]  Ну типа квадратные скобки такие, да?
[01:10:24.320 --> 01:10:28.040]  Предположим, что у нас такое есть.
[01:10:28.040 --> 01:10:29.440]  Тогда возникает следующее.
[01:10:29.440 --> 01:10:33.880]  Тогда, значит, реализация такая, мы заводим вот эти
[01:10:33.880 --> 01:10:34.880]  четыре стека.
[01:10:35.880 --> 01:10:41.600]  Значит, есть два режима, нормальный и перекопирование.
[01:10:41.600 --> 01:10:45.760]  Значит, нормальный режим, это когда в стеке, значит,
[01:10:45.760 --> 01:10:48.240]  в нормальном режиме, это вся очередь находится
[01:10:48.240 --> 01:10:52.440]  в двух стеках L и R, здесь x элементов, здесь меньше
[01:10:52.440 --> 01:10:53.440]  либо равно x.
[01:10:53.440 --> 01:10:55.440]  Понимаете, да?
[01:10:55.440 --> 01:11:00.360]  В этот момент стеки L' и S вообще пусты, мы их не
[01:11:00.360 --> 01:11:01.360]  трогаем.
[01:11:01.360 --> 01:11:03.120]  Потому что все, что мы делаем в нормальном режиме, это
[01:11:03.120 --> 01:11:06.280]  абсолютно то же самое, что мы делали в режиме двух
[01:11:06.280 --> 01:11:07.280]  стеков.
[01:11:07.280 --> 01:11:09.640]  То есть push добавляется сюда, pop удаляется отсюда.
[01:11:09.640 --> 01:11:16.160]  Top, соответственно, смотрится сюда, понятно, да?
[01:11:16.160 --> 01:11:19.000]  Но как только у нас наступил момент, когда после очередного
[01:11:19.000 --> 01:11:25.800]  push в стеке L стало x плюс один элемент Rx, то мы запускаем
[01:11:25.800 --> 01:11:27.440]  режим перекопирования.
[01:11:27.440 --> 01:11:31.680]  Значит, он делается так.
[01:11:31.680 --> 01:11:34.720]  То есть, во-первых, мы заводим переменную, которая будет
[01:11:34.720 --> 01:11:42.520]  считать, типа colpop, она изначально равна нулю, но вообще colpop
[01:11:42.520 --> 01:11:46.160]  это будет информация, сколько в процессе перекопирования
[01:11:46.160 --> 01:11:49.680]  элементов вот этих вот были уже попопаны.
[01:11:49.680 --> 01:11:54.280]  Понимаете, да?
[01:11:54.280 --> 01:11:58.280]  И теперь вы в ближайшие x операции, или x плюс одну
[01:11:58.360 --> 01:12:01.600]  включая эту, делаете вот эти вот, вот с этими элементами
[01:12:01.600 --> 01:12:05.040]  L, R, S, проворачиваете вот этот механизм.
[01:12:05.040 --> 01:12:08.960]  То есть, независимо от того, у вас там push или pop, вы
[01:12:08.960 --> 01:12:10.840]  прям проворачиваете вот этот механизм.
[01:12:10.840 --> 01:12:13.160]  Теперь, как вы делаете push и pop?
[01:12:13.160 --> 01:12:19.240]  Когда вы делаете pop, вы просто увеличиваете colpop.
[01:12:19.240 --> 01:12:20.240]  На единичку.
[01:12:20.240 --> 01:12:26.040]  Когда вы делаете push, значит push вы теперь делаете в,
[01:12:26.040 --> 01:12:30.520]  как уже сказано, в L'.
[01:12:30.520 --> 01:12:31.520]  Понимаете, да?
[01:12:31.520 --> 01:12:35.480]  И теперь, говорите, что независимо от того, был
[01:12:35.480 --> 01:12:42.000]  у вас push или pop, вы делаете следующее, то есть вы вот
[01:12:42.000 --> 01:12:45.080]  из этого механизма делаете, ну скажем, четыре действия.
[01:12:45.080 --> 01:12:51.920]  Вот, понятно, да?
[01:12:52.560 --> 01:12:53.560]  Ничего не понятно?
[01:12:53.560 --> 01:12:59.240]  Ну и сначала, если у нас есть в R, то мы копируем
[01:12:59.240 --> 01:13:00.240]  B3 или B4.
[01:13:00.240 --> 01:13:03.400]  Да, то есть, каждое действие, то есть, нам нужно сделать
[01:13:03.400 --> 01:13:04.600]  x плюс один действие.
[01:13:04.600 --> 01:13:10.320]  Каждое из действий говорит такое, если у нас, то есть,
[01:13:10.320 --> 01:13:12.680]  как бы мы храним, на какой фазе мы находимся, на первой,
[01:13:12.680 --> 01:13:13.680]  второй или на третьей.
[01:13:13.680 --> 01:13:16.080]  Если мы сейчас находимся в первой фазе, значит, наши
[01:13:16.080 --> 01:13:20.280]  действия перекинуть один элемент из R в S.
[01:13:22.320 --> 01:13:27.720]  Нет, мы делаем, я сказал, три действия, но я описываю
[01:13:27.720 --> 01:13:28.720]  одно действие.
[01:13:28.720 --> 01:13:31.920]  Одно действие – это перекидывание одного элемента из какого-то
[01:13:31.920 --> 01:13:32.920]  стека.
[01:13:32.920 --> 01:13:35.240]  Причем, мы можем понять, что если мы на этой фазе,
[01:13:35.240 --> 01:13:36.240]  значит, мы перекидываем это.
[01:13:36.240 --> 01:13:38.120]  Если эта фаза закончилась, значит, переходим ко второй
[01:13:38.120 --> 01:13:39.120]  фазе.
[01:13:39.120 --> 01:13:41.920]  Значит, если мы на второй фазе, значит, мы перекидываем
[01:13:41.920 --> 01:13:45.920]  один элемент из стека L в стек R.
[01:13:45.920 --> 01:13:48.040]  Как только мы перекинули последний элемент, мы объявляем
[01:13:48.040 --> 01:13:49.040]  третью фазу.
[01:13:49.040 --> 01:13:53.640]  На третьей фазе мы перекидываем элементы из S в R, но на этот
[01:13:53.640 --> 01:13:54.640]  раз с оговоркой.
[01:13:54.640 --> 01:14:00.720]  Оговорка заключается в том, что мы, когда, т.е. мы,
[01:14:00.720 --> 01:14:02.800]  когда приходит время перекинуть элемент, мы его достаем
[01:14:02.800 --> 01:14:07.200]  из S, но с помощью кол попа понимаем, а не был ли он случайно
[01:14:07.200 --> 01:14:08.200]  уже по попам.
[01:14:08.200 --> 01:14:12.840]  Если был, тогда мы его в R не добавляем, а мы его
[01:14:12.840 --> 01:14:13.840]  просто выкидываем.
[01:14:14.440 --> 01:14:17.440]  Как мы понимаем, был ли по попам или нет?
[01:14:17.440 --> 01:14:22.520]  Вот, просто, потому что, нет, не-не-не, все еще проще.
[01:14:22.520 --> 01:14:26.640]  Дело в том, что, ну, соответственно, просто S это, по сути, конец
[01:14:26.640 --> 01:14:27.640]  очереди.
[01:14:27.640 --> 01:14:29.200]  Ну, точнее, начало очереди.
[01:14:29.200 --> 01:14:36.240]  Поэтому, по сути, мы говорим, что если у нас в S 8 элементов,
[01:14:36.240 --> 01:14:39.800]  а кол поп равно 5, это означает, что три элемента надо еще
[01:14:39.800 --> 01:14:42.120]  перекопировать, а следующие 5 уже не надо.
[01:14:43.040 --> 01:14:45.880]  Или, если вы говорите, что кол поп равен 7, а у вас
[01:14:45.880 --> 01:14:48.320]  там стейк так, сколько у вас сейчас, достаем элемент,
[01:14:48.320 --> 01:14:49.320]  каким он был в стейке?
[01:14:49.320 --> 01:14:50.680]  Четвертым, а все, выкидываем.
[01:14:50.680 --> 01:14:53.680]  Потому что он был уже по попам.
[01:14:53.680 --> 01:14:59.360]  А если у нас кол поп, в принципе, превзошел стейк S?
[01:14:59.360 --> 01:15:01.560]  Ну, такая, отлично, и он и будет его превосходить.
[01:15:01.560 --> 01:15:04.280]  Нет, ну, просто, это еще будет приводить к тому,
[01:15:04.280 --> 01:15:07.160]  что если кол поп выиграет, то тогда можно просто из
[01:15:07.160 --> 01:15:10.920]  самого R уже поп делать и фронт в него смотреть.
[01:15:10.920 --> 01:15:13.960]  Остается только одна мелочь.
[01:15:13.960 --> 01:15:18.120]  А что делать, если от вас потребовали фронт, а как
[01:15:18.120 --> 01:15:27.400]  бы нот, а этот нот, что делать, если соответствующий
[01:15:27.400 --> 01:15:29.240]  элемент находится еще не в R, а вот соответствующий
[01:15:29.240 --> 01:15:30.960]  элемент еще где-то в S.
[01:15:30.960 --> 01:15:33.720]  И вот тут нам приходится ввести предположение, что
[01:15:33.720 --> 01:15:36.160]  мы можем в стейке рассматривать не только последний элемент,
[01:15:36.160 --> 01:15:37.520]  но и любой там i и t.
[01:15:37.680 --> 01:15:41.320]  Тогда мы говорим, что если у меня в стейке 9 элементов,
[01:15:41.320 --> 01:15:45.600]  а кол поп равно 5, значит, и в этот момент приходит
[01:15:45.600 --> 01:15:48.980]  фронт, значит, мы просто возвращаем из этого стека
[01:15:48.980 --> 01:15:50.240]  шестой элемент.
[01:15:50.240 --> 01:15:54.360]  Ну, потому что 5, вот эти они типа лишние, а вот шестой
[01:15:54.360 --> 01:15:55.360]  это то, что нам надо.
[01:15:55.360 --> 01:15:59.160]  А если кол поп превосходит стейк S, то мы вообще...
[01:15:59.160 --> 01:16:00.160]  Нет.
[01:16:00.160 --> 01:16:02.960]  Как только кол поп стал превосходить стейк S, это
[01:16:02.960 --> 01:16:07.840]  означает, что тогда у нас L' и R это уже актуальная
[01:16:07.840 --> 01:16:12.200]  очередь, актуальная очередь, а все что в S надо просто постепенно
[01:16:12.200 --> 01:16:13.200]  удалять.
[01:16:13.200 --> 01:16:15.720]  И тогда фронты и попы вы делаете уже честное из
[01:16:15.720 --> 01:16:16.720]  стека R.
[01:16:16.720 --> 01:16:21.200]  А, то есть вы начинаете в нормал мод, да?
[01:16:21.200 --> 01:16:22.200]  Нет.
[01:16:22.200 --> 01:16:23.200]  Нет-нет-нет-нет.
[01:16:23.200 --> 01:16:26.320]  Нормал мод вы переключаетесь только когда вы еще и S зачистили.
[01:16:26.320 --> 01:16:29.920]  Да, ну и в конце, да, то есть как бы, да, вот, режим
[01:16:29.920 --> 01:16:34.560]  рекопии заканчивается только в тот момент, когда вы не
[01:16:34.560 --> 01:16:37.360]  только все перегнали из L' в R, но и зачистили S.
[01:16:37.360 --> 01:16:44.800]  Мы с стеку R можем обращаться к этому элементу?
[01:16:44.800 --> 01:16:45.800]  Ну да.
[01:16:45.800 --> 01:16:48.760]  Но там лучше уже тогда лишние элементы удалять,
[01:16:48.760 --> 01:16:49.760]  чтобы просто их там не было.
[01:16:49.760 --> 01:16:53.760]  Нет, просто вот если у нас кол поп превосходит S, то
[01:16:53.760 --> 01:16:54.760]  нам нужно же...
[01:16:54.760 --> 01:16:55.760]  Кол поп не может превосходить.
[01:16:56.600 --> 01:16:59.680]  Чтобы кол поп на этом превосходить S, должно произойти хотя
[01:16:59.680 --> 01:17:00.680]  бы X попов.
[01:17:00.680 --> 01:17:03.760]  А мы строим ОГИ так, чтобы за X операция...
[01:17:03.760 --> 01:17:04.760]  Не-не-не-не-не-не-не-не-не.
[01:17:04.760 --> 01:17:05.760]  Не совсем так.
[01:17:05.760 --> 01:17:06.760]  Почему?
[01:17:06.760 --> 01:17:07.760]  Нужно 4 операции.
[01:17:07.760 --> 01:17:12.940]  Нет, кол поп легко может превосходить S по одной простой
[01:17:12.940 --> 01:17:13.940]  причине.
[01:17:13.940 --> 01:17:16.320]  Ну, предположим, что вы, значит, перегнали все элементы
[01:17:16.320 --> 01:17:19.520]  в S, потом даже из L' в R все перегнали, даже так, да?
[01:17:19.520 --> 01:17:22.800]  И после этого стали начинаться попы, да?
[01:17:22.840 --> 01:17:27.560]  И тогда представьте, у вас тут 57 элементов и начали
[01:17:27.560 --> 01:17:28.560]  приходить попы.
[01:17:28.560 --> 01:17:30.920]  Тогда как бы у вас один элемент вытянули, кол поп
[01:17:30.920 --> 01:17:33.040]  ставим равен один, а три элемента с другой стороны
[01:17:33.040 --> 01:17:34.040]  вы перетянули сюда.
[01:17:34.040 --> 01:17:39.860]  Тогда у вас тут вот, потом еще, тут еще кол поп увеличился
[01:17:39.860 --> 01:17:42.160]  на единичку, то есть уже два элемента лишних, и еще
[01:17:42.160 --> 01:17:43.160]  три.
[01:17:43.160 --> 01:17:44.160]  То есть получается они вот так сталкиваются.
[01:17:44.160 --> 01:17:45.160]  В какой-то момент они столкнутся.
[01:17:45.160 --> 01:17:48.480]  Ну там не в какой-то элемент, а в какой-то там, где-то
[01:17:48.480 --> 01:17:53.160]  через 14 шагов у вас получится, что там 42 элемента вы уже
[01:17:53.160 --> 01:17:56.960]  перекинули в R, а 14 элементов уже это типа вот кол поп.
[01:17:56.960 --> 01:17:59.600]  И тогда на следующем шаге вы оставшийся этот 43-й
[01:17:59.600 --> 01:18:03.480]  элемент перекинете в R, а потом обнаружите, что хотите
[01:18:03.480 --> 01:18:06.440]  перекинуть еще два, а потом окажется, что ой, а эти элементы
[01:18:06.440 --> 01:18:07.640]  уже подпадают под кол поп.
[01:18:07.640 --> 01:18:10.760]  И тогда получается, что когда вы их достаете, их просто
[01:18:10.760 --> 01:18:13.120]  не надо отправлять в R, их надо уже просто тупо удалять.
[01:18:13.120 --> 01:18:15.440]  А тогда мы кол поп уменьшим.
[01:18:15.440 --> 01:18:16.440]  Нет.
[01:18:16.440 --> 01:18:17.440]  Зачем?
[01:18:17.440 --> 01:18:18.440]  Кол поп не надо удалять?
[01:18:18.440 --> 01:18:19.440]  А зачем его уменьшать?
[01:18:19.440 --> 01:18:20.440]  Зачем?
[01:18:20.440 --> 01:18:21.440]  Кол поп...
[01:18:21.440 --> 01:18:22.440]  Что такое кол поп?
[01:18:22.440 --> 01:18:23.440]  Кол поп.
[01:18:23.440 --> 01:18:24.440]  Определение кол попа.
[01:18:24.440 --> 01:18:28.000]  Это сколько было попов в процессе нашего перекопирования.
[01:18:28.000 --> 01:18:32.440]  Это прям вот, просто математическое определение, это, собственно,
[01:18:32.440 --> 01:18:33.440]  это понятие.
[01:18:33.440 --> 01:18:36.440]  Да, но когда мы выбрасываем элементы из S, то кол поп
[01:18:36.440 --> 01:18:37.440]  уменьшаем.
[01:18:37.440 --> 01:18:38.440]  Нет.
[01:18:38.440 --> 01:18:39.440]  Нет.
[01:18:39.440 --> 01:18:42.360]  Определение кол попа не имеет никакого отношения
[01:18:42.360 --> 01:18:43.360]  к стеку S.
[01:18:43.360 --> 01:18:45.040]  Оно вообще определяется чисто для очереди.
[01:18:45.960 --> 01:18:49.360]  То есть, говорят, мы вырубили режим перекопирования.
[01:18:49.360 --> 01:18:50.360]  Кол поп.
[01:18:50.360 --> 01:18:53.520]  Это сколько произошло после этого события попов.
[01:18:53.520 --> 01:18:54.520]  Все.
[01:18:54.520 --> 01:18:55.520]  Хорошо.
[01:18:55.520 --> 01:18:56.520]  Если нам...
[01:18:56.520 --> 01:18:57.520]  Есть идея?
[01:18:57.520 --> 01:19:02.520]  Если мы видим, что элемент уже удален, ну, если кол
[01:19:02.520 --> 01:19:08.520]  поп больше, чем размер стек, то мы его сразу удаляем
[01:19:08.520 --> 01:19:10.520]  и уменьшаем кол поп.
[01:19:10.520 --> 01:19:11.520]  Нет.
[01:19:11.520 --> 01:19:12.520]  Не уменьшаем.
[01:19:12.520 --> 01:19:13.520]  Нет.
[01:19:13.520 --> 01:19:14.520]  Почему?
[01:19:14.520 --> 01:19:15.520]  Я скажу еще раз.
[01:19:15.520 --> 01:19:18.400]  Это количество попов, которое было выполнено после начала
[01:19:18.400 --> 01:19:19.400]  перекопирования.
[01:19:19.400 --> 01:19:23.200]  Кол поп — это не количество элементов стеки S, которые
[01:19:23.200 --> 01:19:24.200]  надо удалить.
[01:19:24.200 --> 01:19:25.200]  Хорошо.
[01:19:25.200 --> 01:19:26.200]  А если у нас был...
[01:19:26.200 --> 01:19:27.200]  Это разные вещи.
[01:19:27.200 --> 01:19:29.800]  Если у нас кол поп был уже больше, чем S, и мы сделали
[01:19:29.800 --> 01:19:33.000]  еще один поп, то мы уже должны удалить из S.
[01:19:33.000 --> 01:19:34.000]  Ты знаешь?
[01:19:34.000 --> 01:19:35.000]  Да.
[01:19:35.000 --> 01:19:36.000]  Абсолютно верно.
[01:19:36.000 --> 01:19:37.920]  И мы будем это делать, потому что нишо нам это не мешает
[01:19:37.920 --> 01:19:38.920]  делать.
[01:19:38.920 --> 01:19:39.920]  Но мы это сделали.
[01:19:39.920 --> 01:19:40.920]  Да.
[01:19:40.920 --> 01:19:43.640]  Как только кол поп стал больше либо равен размера S, начиная
[01:19:43.640 --> 01:19:46.960]  с этого момента, мы попы будем делать реально из стека
[01:19:46.960 --> 01:19:47.960]  S.
[01:19:47.960 --> 01:19:48.960]  Вот.
[01:19:48.960 --> 01:19:52.840]  То есть, по факту, все, что нам надо, на самом деле,
[01:19:52.840 --> 01:19:55.360]  это уметь и этот элемент искать только в стеке S,
[01:19:55.360 --> 01:19:56.360]  по сути, надо.
[01:19:56.360 --> 01:19:59.360]  В стеке S даже не обязательно.
[01:19:59.360 --> 01:20:00.360]  Да.
[01:20:00.360 --> 01:20:02.480]  Что-то бы изменилось, если бы мы...
[01:20:02.480 --> 01:20:08.280]  Тогда L больше и равно, чем X делено на 2 плюс 1.
[01:20:08.280 --> 01:20:09.280]  Сейчас.
[01:20:09.280 --> 01:20:10.280]  L...
[01:20:10.520 --> 01:20:13.520]  X делить на 2 плюс 1.
[01:20:13.520 --> 01:20:17.520]  Ну, там, Влада, по модулю некоторых начальных условий,
[01:20:17.520 --> 01:20:18.520]  что ли.
[01:20:20.520 --> 01:20:21.520]  Но стала вот такая.
[01:20:21.520 --> 01:20:22.520]  Нет.
[01:20:22.520 --> 01:20:23.520]  X пополам плюс 1.
[01:20:23.520 --> 01:20:24.520]  Ну, тут вот...
[01:20:24.520 --> 01:20:25.520]  Попопопа.
[01:20:25.520 --> 01:20:26.520]  Так что сложно.
[01:20:26.520 --> 01:20:27.520]  Ой.
[01:20:27.520 --> 01:20:28.520]  Так, кажется.
[01:20:28.520 --> 01:20:29.520]  Да.
[01:20:29.520 --> 01:20:30.520]  Ну, я не знаю.
[01:20:30.520 --> 01:20:31.520]  Понимаете, тут как бы еще начало, потому что есть вот 0.0,
[01:20:31.520 --> 01:20:34.400]  и, скорее всего, первый пуш уже вызовет режим перекопирования.
[01:20:34.400 --> 01:20:36.400]  В чем персистентность?
[01:20:36.400 --> 01:20:37.400]  Пока ни в чем.
[01:20:37.400 --> 01:20:39.280]  Нет, персистентность в том, что это теперь можно
[01:20:39.280 --> 01:20:41.320]  делать персистентом, потому что каждая операция делается
[01:20:41.320 --> 01:20:42.320]  за честных вот единиц.
[01:20:42.320 --> 01:20:43.320]  Сами делайте следующее.
[01:20:43.320 --> 01:20:44.320]  Ага.
[01:20:44.320 --> 01:20:45.320]  Так.
[01:20:45.320 --> 01:20:46.320]  Colpop у меня равно 8.
[01:20:46.320 --> 01:20:47.320]  Так.
[01:20:47.320 --> 01:20:48.320]  Значит, смотрите.
[01:20:48.320 --> 01:20:49.320]  Когда вы будете доставать восьмой элемент с конца
[01:20:49.320 --> 01:20:50.320]  стека, значит, вы, пожалуйста, там запишите и отправьте
[01:20:50.320 --> 01:20:51.320]  собственно вот в ответ на этот запрос.
[01:20:51.320 --> 01:20:52.320]  Сами запросы записываете в двухсвязанный список
[01:20:52.320 --> 01:20:53.320]  и, собственно, обрабатываете там, по мере достижения.
[01:20:53.320 --> 01:20:54.320]  Вот.
[01:20:54.320 --> 01:20:55.320]  Так.
[01:20:55.320 --> 01:20:56.320]  Так.
[01:20:56.320 --> 01:20:57.320]  Вот.
[01:20:57.320 --> 01:20:58.320]  Вот.
[01:20:58.320 --> 01:20:59.320]  Вот.
[01:20:59.320 --> 01:21:00.320]  Вот.
[01:21:00.320 --> 01:21:01.320]  Вот.
[01:21:01.320 --> 01:21:02.320]  Вот.
[01:21:02.320 --> 01:21:03.320]  Вот.
[01:21:03.320 --> 01:21:04.320]  Вот.
[01:21:04.320 --> 01:21:05.320]  Вот.
[01:21:05.320 --> 01:21:06.320]  Вот.
[01:21:06.320 --> 01:21:07.320]  Вот.
[01:21:07.320 --> 01:21:08.320]  Вот.
[01:21:09.320 --> 01:21:10.320]  Вот.
[01:21:10.320 --> 01:21:11.320]  Давайте, кстати, попробуем, честно, написать примерный
[01:21:11.320 --> 01:21:12.320]  код.
[01:21:12.320 --> 01:21:13.320]  Как это вообще будет выглядеть?
[01:21:13.320 --> 01:21:14.320]  Может, так передумаю.
[01:21:14.320 --> 01:21:15.320]  Так.
[01:21:15.320 --> 01:21:16.320]  Тоже, может, немножко лучше, там, понятнее, будет происходя
[01:21:16.320 --> 01:21:17.320]  чем е.
[01:21:17.320 --> 01:21:18.320]  Значит, ладно?
[01:21:18.320 --> 01:21:19.320]  Ой.
[01:21:19.320 --> 01:21:20.320]  Так.
[01:21:20.320 --> 01:21:21.320]  Хотя, честно, так.
[01:21:21.320 --> 01:21:22.320]  Так.
[01:21:22.320 --> 01:21:23.320]  Ладно.
[01:21:23.320 --> 01:21:24.320]  Ладно.
[01:21:24.320 --> 01:21:25.320]  Попишем код на доске.
[01:21:25.320 --> 01:21:26.320]  Хотя, конечно, могли быть линии, за которые, честно.
[01:21:26.320 --> 01:21:27.320]  Вот.
[01:21:27.320 --> 01:21:28.320]  Ну, я знаю.
[01:21:28.320 --> 01:21:29.320]  Не-не-не.
[01:21:29.320 --> 01:21:30.320]  Зачем?
[01:21:30.320 --> 01:21:31.320]  Да мы тогда не будем все описать.
[01:21:31.320 --> 01:21:32.320]  Нет.
[01:21:32.320 --> 01:21:33.320]  Только, кстати.
[01:21:33.320 --> 01:21:34.320]  Нет.
[01:21:34.320 --> 01:21:35.320]  Я тоже буду писать с нуля, если что.
[01:21:35.320 --> 01:21:36.320]  Нет.
[01:21:36.320 --> 01:21:37.320]  Ладно.
[01:21:37.320 --> 01:21:38.320]  Просто вопрос как бы как?
[01:21:38.320 --> 01:21:39.320]  Как я это буду писать?
[01:21:39.320 --> 01:21:40.320]  Я это буду писать по телевизору?
[01:21:40.320 --> 01:21:41.320]  Нет.
[01:21:41.320 --> 01:21:42.320]  Лучше на доске.
[01:21:42.320 --> 01:21:43.320]  Да.
[01:21:43.320 --> 01:21:44.320]  Но лучше на доске, потому что картинка интереснее.
[01:21:44.320 --> 01:21:45.320]  А есть какой-то онлайн-компилятор, который позволяет, типа,
[01:21:45.320 --> 01:21:46.320]  что-то на своих мониторах видеть, или что-то еще.
[01:21:46.320 --> 01:21:47.320]  Что?
[01:21:47.320 --> 01:21:48.320]  Чего еще?
[01:21:48.320 --> 01:21:49.320]  Есть какой-то онлайн-компилятор, который позволяет другим
[01:21:49.320 --> 01:21:50.320]  включаться.
[01:21:50.320 --> 01:21:51.320]  Ага.
[01:21:51.320 --> 01:21:52.320]  Онлайн-компилятор называется зум шерингом экрана.
[01:21:52.320 --> 01:21:53.320]  Мне кажется.
[01:21:53.320 --> 01:21:54.320]  Ну, там, может, прям текстом все работает.
[01:21:54.320 --> 01:21:55.320]  Ну, так.
[01:21:55.320 --> 01:21:56.320]  Не, ну ладно.
[01:21:56.320 --> 01:21:57.320]  Ну, не важно.
[01:21:57.320 --> 01:21:58.320]  Нет, на самом деле, ладно.
[01:21:58.320 --> 01:22:05.320]  На доске тоже хорошо, потому что можно это, писать строчки,
[01:22:05.320 --> 01:22:10.320]  это разными материнами, там, вот это все.
[01:22:10.320 --> 01:22:11.320]  Значит, смотри.
[01:22:11.320 --> 01:22:12.320]  Что мы будем делать?
[01:22:12.320 --> 01:22:13.320]  Итак, struct.
[01:22:13.320 --> 01:22:14.320]  Ну, я не знаю.
[01:22:14.320 --> 01:22:15.320]  Сейчас будет у нас это.
[01:22:15.320 --> 01:22:16.320]  Super stack.
[01:22:16.320 --> 01:22:17.320]  Как там это?
[01:22:17.320 --> 01:22:18.320]  Ага.
[01:22:18.320 --> 01:22:19.320]  Ну вот.
[01:22:19.320 --> 01:22:20.320]  Ну вот.
[01:22:20.320 --> 01:22:21.320]  Ладно.
[01:22:21.320 --> 01:22:22.320]  Давайте так.
[01:22:22.320 --> 01:22:23.320]  For.
[01:22:23.320 --> 01:22:24.320]  Ну, давайте так.
[01:22:24.320 --> 01:22:25.320]  Напишем.
[01:22:25.320 --> 01:22:26.320]  For stack.
[01:22:26.320 --> 01:22:27.320]  Пьюер.
[01:22:27.320 --> 01:22:28.320]  Можно вопрос?
[01:22:28.320 --> 01:22:29.320]  А.
[01:22:29.320 --> 01:22:30.320]  Это код на плюсах будет или всем такой же?
[01:22:30.320 --> 01:22:31.320]  Ну.
[01:22:31.320 --> 01:22:32.320]  Попробуем пример на плюсах, но там.
[01:22:32.320 --> 01:22:33.320]  Спасибо.
[01:22:33.320 --> 01:22:34.320]  Точную компилируемость не гарантируем.
[01:22:34.320 --> 01:22:35.320]  Хотя скорее всего.
[01:22:35.320 --> 01:22:36.320]  Ну вот.
[01:22:36.320 --> 01:22:37.320]  Ну как минимум из этого ладова.
[01:22:37.320 --> 01:22:38.320]  Как минимум из того, что мы сейчас поверим в мистическую
[01:22:38.320 --> 01:22:39.320]  структуру данных stack.
[01:22:39.320 --> 01:22:40.320]  В общем, stack как просто абсолютную черную ящик,
[01:22:40.320 --> 01:22:41.320]  который нам дает топ, поп, там.
[01:22:41.320 --> 01:22:42.320]  То топ, поп и там вот эти вот цепи.
[01:22:42.320 --> 01:22:43.320]  Ну вот.
[01:22:43.320 --> 01:22:44.320]  Ну вот.
[01:22:44.320 --> 01:22:45.320]  Ну вот.
[01:22:45.320 --> 01:22:46.320]  Ну вот.
[01:22:46.320 --> 01:22:47.320]  Ну вот.
[01:22:47.320 --> 01:22:48.320]  Ну вот.
[01:22:48.320 --> 01:22:49.320]  Ну вот.
[01:22:49.320 --> 01:22:50.320]  Ну вот.
[01:22:50.320 --> 01:22:51.320]  Ну вот.
[01:22:51.320 --> 01:22:52.320]  Ну вот.
[01:22:52.320 --> 01:22:53.320]  Ну вот.
[01:22:53.320 --> 01:22:54.320]  Ну вот.
[01:22:54.320 --> 01:22:55.320]  Ну вот.
[01:22:55.320 --> 01:22:56.320]  Ну вот.
[01:22:56.320 --> 01:22:57.320]  Ну вот.
[01:22:57.320 --> 01:22:58.320]  Ну вот.
[01:22:58.320 --> 01:22:59.320]  Ну вот.
[01:22:59.320 --> 01:23:00.320]  Ну вот.
[01:23:00.320 --> 01:23:01.320]  Ну вот.
[01:23:01.320 --> 01:23:02.320]  Ну вот.
[01:23:02.320 --> 01:23:03.320]  Ну вот.
[01:23:03.320 --> 01:23:04.320]  Ну вот.
[01:23:04.320 --> 01:23:05.320]  Ну вот.
[01:23:05.320 --> 01:23:06.320]  Ну вот.
[01:23:06.320 --> 01:23:07.320]  Ну вот.
[01:23:07.320 --> 01:23:08.320]  Ну вот.
[01:23:08.320 --> 01:23:09.320]  Ну вот.
[01:23:09.320 --> 01:23:10.320]  Ну вот.
[01:23:10.320 --> 01:23:11.320]  Ну вот.
[01:23:11.320 --> 01:23:12.320]  Ну вот.
[01:23:12.320 --> 01:23:13.320]  Ну вот.
[01:23:13.320 --> 01:23:14.320]  Ну вот.
[01:23:14.320 --> 01:23:15.320]  Ну вот.
[01:23:15.320 --> 01:23:16.320]  Ну вот.
[01:23:16.320 --> 01:23:17.320]  Ну вот.
[01:23:18.320 --> 01:23:19.320]  Ну вот.
[01:23:19.320 --> 01:23:20.320]  Ну вот.
[01:23:20.320 --> 01:23:21.320]  Ну вот.
[01:23:21.320 --> 01:23:22.320]  Ну вот.
[01:23:22.320 --> 01:23:23.320]  Ну вот.
[01:23:23.320 --> 01:23:24.320]  Ну вот.
[01:23:24.320 --> 01:23:25.320]  Ну вот.
[01:23:25.320 --> 01:23:26.320]  Ну вот.
[01:23:26.320 --> 01:23:27.320]  Ну вот.
[01:23:27.320 --> 01:23:28.320]  Ну вот.
[01:23:28.320 --> 01:23:29.320]  Ну вот.
[01:23:29.320 --> 01:23:30.320]  Ну вот.
[01:23:30.320 --> 01:23:31.320]  Ну вот.
[01:23:31.320 --> 01:23:32.320]  Ну вот.
[01:23:32.320 --> 01:23:33.320]  Ну вот.
[01:23:33.320 --> 01:23:34.320]  Ну вот.
[01:23:34.320 --> 01:23:35.320]  Ну вот.
[01:23:35.320 --> 01:23:36.320]  Ну вот.
[01:23:36.320 --> 01:23:37.320]  Ну вот.
[01:23:37.320 --> 01:23:38.320]  Ну вот.
[01:23:39.320 --> 01:23:40.320]  Ну вот.
[01:23:40.320 --> 01:23:41.320]  Ну вот.
[01:23:41.320 --> 01:23:42.320]  Ну вот.
[01:23:42.320 --> 01:23:43.320]  Ну вот.
[01:23:43.320 --> 01:23:44.320]  Ну вот.
[01:23:44.320 --> 01:23:45.320]  Ну вот.
[01:23:45.320 --> 01:23:46.320]  Ну вот.
[01:23:46.320 --> 01:23:47.320]  Ну вот.
[01:23:47.320 --> 01:23:48.320]  Ну вот.
[01:23:48.320 --> 01:23:49.320]  Ну вот.
[01:23:49.320 --> 01:23:50.320]  Ну вот.
[01:23:50.320 --> 01:23:51.320]  Ну вот.
[01:23:51.320 --> 01:23:52.320]  Ну вот.
[01:23:52.320 --> 01:23:53.320]  Ну вот.
[01:23:53.320 --> 01:23:54.320]  Ну вот.
[01:23:54.320 --> 01:23:55.320]  Ну вот.
[01:23:55.320 --> 01:23:56.320]  Ну вот.
[01:23:56.320 --> 01:23:57.320]  Ну вот.
[01:23:57.320 --> 01:23:58.320]  Ну вот.
[01:23:58.320 --> 01:23:59.320]  Ну вот.
[01:23:59.320 --> 01:24:00.320]  Ну вот.
[01:24:00.320 --> 01:24:01.320]  Ну вот.
[01:24:01.320 --> 01:24:02.320]  Ну вот.
[01:24:02.320 --> 01:24:03.320]  Ну вот.
[01:24:03.320 --> 01:24:04.320]  Ну вот.
[01:24:04.320 --> 01:24:05.320]  Ну вот.
[01:24:05.320 --> 01:24:06.320]  Ну вот.
[01:24:06.320 --> 01:24:07.320]  Ну вот.
[01:24:07.320 --> 01:24:08.320]  Ну вот.
[01:24:08.320 --> 01:24:09.320]  Ну вот.
[01:24:09.320 --> 01:24:10.320]  Ну вот.
[01:24:10.320 --> 01:24:11.320]  Ну вот.
[01:24:11.320 --> 01:24:12.320]  Ну вот.
[01:24:12.320 --> 01:24:13.320]  Ну вот.
[01:24:13.320 --> 01:24:14.320]  Ну вот.
[01:24:14.320 --> 01:24:15.320]  Ну вот.
[01:24:15.320 --> 01:24:16.320]  Ну вот.
[01:24:16.320 --> 01:24:17.320]  Ну вот.
[01:24:17.320 --> 01:24:18.320]  Ну вот.
[01:24:18.320 --> 01:24:19.320]  Ну вот.
[01:24:19.320 --> 01:24:20.320]  Ну вот.
[01:24:20.320 --> 01:24:21.320]  Ну вот.
[01:24:21.320 --> 01:24:22.320]  Ну вот.
[01:24:22.320 --> 01:24:23.320]  Ну вот.
[01:24:23.320 --> 01:24:24.320]  Ну вот.
[01:24:24.320 --> 01:24:25.320]  Ну вот.
[01:24:25.320 --> 01:24:26.320]  Ну вот.
[01:24:26.320 --> 01:24:27.320]  Ну вот.
[01:24:27.320 --> 01:24:28.320]  Ну вот.
[01:24:28.320 --> 01:24:29.320]  Ну вот.
[01:24:29.320 --> 01:24:30.320]  Ну вот.
[01:24:30.320 --> 01:24:31.320]  Ну вот.
[01:24:31.320 --> 01:24:32.320]  Ну вот.
[01:24:32.320 --> 01:24:33.320]  Ну вот.
[01:24:33.320 --> 01:24:34.320]  Ну вот.
[01:24:34.320 --> 01:24:35.320]  Ну вот.
[01:24:35.320 --> 01:24:36.320]  Ну вот.
[01:24:36.320 --> 01:24:37.320]  Ну вот.
[01:24:37.320 --> 01:24:38.320]  Ну вот.
[01:24:38.320 --> 01:24:39.320]  Ну вот.
[01:24:39.320 --> 01:24:40.320]  Ну вот.
[01:24:40.320 --> 01:24:41.320]  Ну вот.
[01:24:41.320 --> 01:24:42.320]  Ну вот.
[01:24:42.320 --> 01:24:43.320]  Ну вот.
[01:24:43.320 --> 01:24:44.320]  Ну вот.
[01:24:44.320 --> 01:24:45.320]  Ну вот.
[01:24:45.320 --> 01:24:46.320]  Ну вот.
[01:24:46.320 --> 01:24:47.320]  Ну вот.
[01:24:47.320 --> 01:24:48.320]  Ну вот.
[01:24:48.320 --> 01:24:49.320]  Ну вот.
[01:24:49.320 --> 01:24:50.320]  Ну вот.
[01:24:50.320 --> 01:24:51.320]  Ну вот.
[01:24:51.320 --> 01:24:52.320]  Ну вот.
[01:24:52.320 --> 01:24:53.320]  Ну вот.
[01:24:53.320 --> 01:24:54.320]  Ну вот.
[01:24:54.320 --> 01:24:55.320]  Ну вот.
[01:24:55.320 --> 01:24:56.320]  Ну вот.
[01:24:56.320 --> 01:24:57.320]  Ну вот.
[01:24:57.320 --> 01:24:58.320]  Ну вот.
[01:24:58.320 --> 01:24:59.320]  Ну вот.
[01:24:59.320 --> 01:25:00.320]  Ну вот.
[01:25:00.320 --> 01:25:01.320]  Ну вот.
[01:25:01.320 --> 01:25:02.320]  Ну вот.
[01:25:02.320 --> 01:25:03.320]  Ну вот.
[01:25:03.320 --> 01:25:04.320]  Ну вот.
[01:25:04.320 --> 01:25:05.320]  Ну вот.
[01:25:05.320 --> 01:25:06.320]  Ну вот.
[01:25:06.320 --> 01:25:07.320]  Ну вот.
[01:25:07.320 --> 01:25:08.320]  Ну вот.
[01:25:08.320 --> 01:25:09.320]  Ну вот.
[01:25:09.320 --> 01:25:10.320]  Ну вот.
[01:25:10.320 --> 01:25:11.320]  Ну вот.
[01:25:11.320 --> 01:25:12.320]  Ну вот.
[01:25:12.320 --> 01:25:13.320]  Ну вот.
[01:25:13.320 --> 01:25:14.320]  Ну вот.
[01:25:14.320 --> 01:25:15.320]  Ну вот.
[01:25:15.320 --> 01:25:16.320]  Ну вот.
[01:25:16.320 --> 01:25:17.320]  Ну вот.
[01:25:17.320 --> 01:25:18.320]  Ну вот.
[01:25:18.320 --> 01:25:19.320]  Ну вот.
[01:25:19.320 --> 01:25:20.320]  Ну вот.
[01:25:20.320 --> 01:25:21.320]  Ну вот.
[01:25:21.320 --> 01:25:22.320]  Ну вот.
[01:25:22.320 --> 01:25:23.320]  Ну вот.
[01:25:23.320 --> 01:25:24.320]  Ну вот.
[01:25:24.320 --> 01:25:25.320]  Ну вот.
[01:25:25.320 --> 01:25:26.320]  Ну вот.
[01:25:26.320 --> 01:25:27.320]  Ну вот.
[01:25:27.320 --> 01:25:28.320]  Ну вот.
[01:25:28.320 --> 01:25:29.320]  Ну вот.
[01:25:29.320 --> 01:25:30.320]  Ну вот.
[01:25:30.320 --> 01:25:31.320]  Ну вот.
[01:25:31.320 --> 01:25:32.320]  Ну вот.
[01:25:32.320 --> 01:25:33.320]  Ну вот.
[01:25:33.320 --> 01:25:34.320]  Ну вот.
[01:25:34.320 --> 01:25:35.320]  Ну вот.
[01:25:35.320 --> 01:25:36.320]  Ну вот.
[01:25:36.320 --> 01:25:37.320]  Ну вот.
[01:25:37.320 --> 01:25:38.320]  Ну вот.
[01:25:38.320 --> 01:25:39.320]  Ну вот.
[01:25:39.320 --> 01:25:40.320]  Ну вот.
[01:25:40.320 --> 01:25:41.320]  Ну вот.
[01:25:41.320 --> 01:25:42.320]  Ну вот.
[01:25:42.320 --> 01:25:43.320]  Ну вот.
[01:25:43.320 --> 01:25:44.320]  Ну вот.
[01:25:44.320 --> 01:25:45.320]  Ну вот.
[01:25:45.320 --> 01:25:46.320]  Ну вот.
[01:25:46.320 --> 01:25:47.320]  Ну вот.
[01:25:47.320 --> 01:25:48.320]  Ну вот.
[01:25:48.320 --> 01:25:49.320]  Ну вот.
[01:25:49.320 --> 01:25:50.320]  Ну вот.
[01:25:50.320 --> 01:25:51.320]  Ну вот.
[01:25:51.320 --> 01:25:52.320]  Ну вот.
[01:25:52.320 --> 01:25:53.320]  Ну вот.
[01:25:53.320 --> 01:25:54.320]  Ну вот.
[01:25:54.320 --> 01:25:55.320]  Ну вот.
[01:25:55.320 --> 01:25:56.320]  Ну вот.
[01:25:56.320 --> 01:25:57.320]  Ну вот.
[01:25:57.320 --> 01:25:58.320]  Ну вот.
[01:25:58.320 --> 01:25:59.320]  Ну вот.
[01:25:59.320 --> 01:26:00.320]  Ну вот.
[01:26:00.320 --> 01:26:01.320]  Ну вот.
[01:26:01.320 --> 01:26:02.320]  Ну вот.
[01:26:02.320 --> 01:26:03.320]  Ну вот.
[01:26:03.320 --> 01:26:04.320]  Ну вот.
[01:26:04.320 --> 01:26:05.320]  Ну вот.
[01:26:05.320 --> 01:26:06.320]  Ну вот.
[01:26:06.320 --> 01:26:07.320]  Ну вот.
[01:26:07.320 --> 01:26:08.320]  Ну вот.
[01:26:08.320 --> 01:26:09.320]  Ну вот.
[01:26:09.320 --> 01:26:10.320]  Ну вот.
[01:26:10.320 --> 01:26:11.320]  Ну вот.
[01:26:11.320 --> 01:26:12.320]  Ну вот.
[01:26:12.320 --> 01:26:13.320]  Ну вот.
[01:26:13.320 --> 01:26:14.320]  Ну вот.
[01:26:14.320 --> 01:26:15.320]  Ну вот.
[01:26:15.320 --> 01:26:16.320]  Ну вот.
[01:26:16.320 --> 01:26:17.320]  Ну вот.
[01:26:17.320 --> 01:26:18.320]  Ну вот.
[01:26:18.320 --> 01:26:19.320]  Ну вот.
[01:26:19.320 --> 01:26:20.320]  Ну вот.
[01:26:20.320 --> 01:26:21.320]  Ну вот.
[01:26:21.320 --> 01:26:22.320]  Ну вот.
[01:26:22.320 --> 01:26:23.320]  Ну вот.
[01:26:23.320 --> 01:26:24.320]  Ну вот.
[01:26:24.320 --> 01:26:25.320]  Ну вот.
[01:26:25.320 --> 01:26:26.320]  Ну вот.
[01:26:26.320 --> 01:26:27.320]  Ну вот.
[01:26:27.320 --> 01:26:28.320]  Ну вот.
[01:26:28.320 --> 01:26:29.320]  Ну вот.
[01:26:29.320 --> 01:26:30.320]  Ну вот.
[01:26:30.320 --> 01:26:31.320]  Ну вот.
[01:26:31.320 --> 01:26:32.320]  Ну вот.
[01:26:32.320 --> 01:26:33.320]  Ну вот.
[01:26:33.320 --> 01:26:34.320]  Ну вот.
[01:26:34.320 --> 01:26:35.320]  Ну вот.
[01:26:35.320 --> 01:26:36.320]  Ну вот.
[01:26:36.320 --> 01:26:37.320]  Ну вот.
[01:26:37.320 --> 01:26:38.320]  Ну вот.
[01:26:38.320 --> 01:26:39.320]  Ну вот.
[01:26:39.320 --> 01:26:40.320]  Ну вот.
[01:26:40.320 --> 01:26:41.320]  Ну вот.
[01:26:41.320 --> 01:26:42.320]  Ну вот.
[01:26:42.320 --> 01:26:43.320]  Ну вот.
[01:26:43.320 --> 01:26:44.320]  Ну вот.
[01:26:44.320 --> 01:26:45.320]  Ну вот.
[01:26:45.320 --> 01:26:46.320]  Ну вот.
[01:26:46.320 --> 01:26:47.320]  Ну вот.
[01:26:47.320 --> 01:26:48.320]  Ну вот.
[01:26:48.320 --> 01:26:49.320]  Ну вот.
[01:26:49.320 --> 01:26:50.320]  Ну вот.
[01:26:50.320 --> 01:26:51.320]  Ну вот.
[01:26:51.320 --> 01:26:52.320]  Ну вот.
[01:26:52.320 --> 01:26:53.320]  Ну вот.
[01:26:53.320 --> 01:26:54.320]  Ну вот.
[01:26:54.320 --> 01:26:55.320]  Ну вот.
[01:26:55.320 --> 01:26:56.320]  Ну вот.
[01:26:56.320 --> 01:26:57.320]  Ну вот.
[01:26:57.320 --> 01:26:58.320]  Ну вот.
[01:26:58.320 --> 01:26:59.320]  Ну вот.
[01:26:59.320 --> 01:27:00.320]  Ну вот.
[01:27:00.320 --> 01:27:01.320]  Ну вот.
[01:27:01.320 --> 01:27:02.320]  Ну вот.
[01:27:02.320 --> 01:27:03.320]  Ну вот.
[01:27:03.320 --> 01:27:04.320]  Ну вот.
[01:27:04.320 --> 01:27:05.320]  Ну вот.
[01:27:05.320 --> 01:27:06.320]  Ну вот.
[01:27:06.320 --> 01:27:07.320]  Ну вот.
[01:27:07.320 --> 01:27:08.320]  Ну вот.
[01:27:08.320 --> 01:27:09.320]  Ну вот.
[01:27:09.320 --> 01:27:10.320]  Ну вот.
[01:27:10.320 --> 01:27:11.320]  Ну вот.
[01:27:11.320 --> 01:27:12.320]  Ну вот.
[01:27:12.320 --> 01:27:13.320]  Ну вот.
[01:27:13.320 --> 01:27:14.320]  Ну вот.
[01:27:14.320 --> 01:27:15.320]  Ну вот.
[01:27:15.320 --> 01:27:16.320]  Ну вот.
[01:27:16.320 --> 01:27:17.320]  Ну вот.
[01:27:17.320 --> 01:27:18.320]  Ну вот.
[01:27:18.320 --> 01:27:19.320]  Ну вот.
[01:27:19.320 --> 01:27:20.320]  Ну вот.
[01:27:20.320 --> 01:27:21.320]  Ну вот.
[01:27:21.320 --> 01:27:22.320]  Ну вот.
[01:27:22.320 --> 01:27:23.320]  Ну вот.
[01:27:23.320 --> 01:27:24.320]  Ну вот.
[01:27:24.320 --> 01:27:25.320]  Ну вот.
[01:27:25.320 --> 01:27:26.320]  Ну вот.
[01:27:26.320 --> 01:27:27.320]  Ну вот.
[01:27:28.320 --> 01:27:29.320]  Ну вот.
[01:27:29.320 --> 01:27:30.320]  Ну вот.
[01:27:30.320 --> 01:27:31.320]  Ну вот.
[01:27:31.320 --> 01:27:32.320]  Ну вот.
[01:27:32.320 --> 01:27:33.320]  Ну вот.
[01:27:33.320 --> 01:27:34.320]  Ну вот.
[01:27:34.320 --> 01:27:35.320]  Ну вот.
[01:27:35.320 --> 01:27:36.320]  Ну вот.
[01:27:36.320 --> 01:27:37.320]  Ну вот.
[01:27:37.320 --> 01:27:38.320]  Ну вот.
[01:27:38.320 --> 01:27:39.320]  Ну вот.
[01:27:39.320 --> 01:27:40.320]  Ну вот.
[01:27:40.320 --> 01:27:41.320]  Ну вот.
[01:27:41.320 --> 01:27:42.320]  Ну вот.
[01:27:42.320 --> 01:27:43.320]  Ну вот.
[01:27:43.320 --> 01:27:44.320]  Ну вот.
[01:27:44.320 --> 01:27:45.320]  Ну вот.
[01:27:45.320 --> 01:27:46.320]  Ну вот.
[01:27:46.320 --> 01:27:47.320]  Ну вот.
[01:27:47.320 --> 01:27:48.320]  Ну вот.
[01:27:48.320 --> 01:27:49.320]  Ну вот.
[01:27:49.320 --> 01:27:50.320]  Ну вот.
[01:27:50.320 --> 01:27:51.320]  Ну вот.
[01:27:51.320 --> 01:27:52.320]  Ну вот.
[01:27:52.320 --> 01:27:53.320]  Ну вот.
[01:27:53.320 --> 01:27:54.320]  Ну вот.
[01:27:54.320 --> 01:27:55.320]  Ну вот.
[01:27:55.320 --> 01:27:56.320]  Ну вот.
[01:27:56.320 --> 01:27:57.320]  Ну вот.
[01:27:57.320 --> 01:27:58.320]  Ну вот.
[01:27:58.320 --> 01:27:59.320]  Ну вот.
[01:27:59.320 --> 01:28:00.320]  Ну вот.
[01:28:00.320 --> 01:28:01.320]  Ну вот.
[01:28:01.320 --> 01:28:02.320]  Ну вот.
[01:28:02.320 --> 01:28:03.320]  Ну вот.
[01:28:03.320 --> 01:28:04.320]  Ну вот.
[01:28:04.320 --> 01:28:05.320]  Ну вот.
[01:28:05.320 --> 01:28:06.320]  Ну вот.
[01:28:06.320 --> 01:28:07.320]  Ну вот.
[01:28:07.320 --> 01:28:08.320]  Ну вот.
[01:28:08.320 --> 01:28:09.320]  Ну вот.
[01:28:09.320 --> 01:28:10.320]  Ну вот.
[01:28:10.320 --> 01:28:11.320]  Ну вот.
[01:28:11.320 --> 01:28:12.320]  Ну вот.
[01:28:12.320 --> 01:28:13.320]  Ну вот.
[01:28:13.320 --> 01:28:14.320]  Ну вот.
[01:28:14.320 --> 01:28:15.320]  Ну вот.
[01:28:15.320 --> 01:28:16.320]  Ну вот.
[01:28:16.320 --> 01:28:17.320]  Ну вот.
[01:28:17.320 --> 01:28:18.320]  Ну вот.
[01:28:18.320 --> 01:28:19.320]  Ну вот.
[01:28:19.320 --> 01:28:20.320]  Ну вот.
[01:28:20.320 --> 01:28:21.320]  Ну вот.
[01:28:21.320 --> 01:28:22.320]  Ну вот.
[01:28:22.320 --> 01:28:23.320]  Ну вот.
[01:28:23.320 --> 01:28:24.320]  Ну вот.
[01:28:24.320 --> 01:28:25.320]  Ну вот.
[01:28:25.320 --> 01:28:26.320]  Ну вот.
[01:28:26.320 --> 01:28:27.320]  Ну вот.
[01:28:27.320 --> 01:28:28.320]  Ну вот.
[01:28:28.320 --> 01:28:29.320]  Ну вот.
[01:28:29.320 --> 01:28:30.320]  Ну вот.
[01:28:30.320 --> 01:28:31.320]  Ну вот.
[01:28:31.320 --> 01:28:32.320]  Ну вот.
[01:28:32.320 --> 01:28:33.320]  Ну вот.
[01:28:33.320 --> 01:28:34.320]  Ну вот.
[01:28:34.320 --> 01:28:35.320]  Ну вот.
[01:28:35.320 --> 01:28:36.320]  Ну вот.
[01:28:36.320 --> 01:28:37.320]  Ну вот.
[01:28:37.320 --> 01:28:38.320]  Ну вот.
[01:28:38.320 --> 01:28:39.320]  Ну вот.
[01:28:39.320 --> 01:28:40.320]  Ну вот.
[01:28:40.320 --> 01:28:41.320]  Ну вот.
[01:28:41.320 --> 01:28:42.320]  Ну вот.
[01:28:42.320 --> 01:28:43.320]  Ну вот.
[01:28:43.320 --> 01:28:44.320]  Ну вот.
[01:28:44.320 --> 01:28:45.320]  Ну вот.
[01:28:45.320 --> 01:28:46.320]  Ну вот.
[01:28:46.320 --> 01:28:47.320]  Ну вот.
[01:28:47.320 --> 01:28:48.320]  Ну вот.
[01:28:48.320 --> 01:28:49.320]  Ну вот.
[01:28:49.320 --> 01:28:50.320]  Ну вот.
[01:28:50.320 --> 01:28:51.320]  Ну вот.
[01:28:51.320 --> 01:28:52.320]  Ну вот.
[01:28:52.320 --> 01:28:53.320]  Ну вот.
[01:28:54.320 --> 01:28:56.320]  Ну вот.
[01:28:56.320 --> 01:28:57.320]  Ну вот.
[01:28:57.320 --> 01:28:58.320]  Ну вот.
[01:28:58.320 --> 01:28:59.320]  Ну вот.
[01:28:59.320 --> 01:29:00.320]  Ну вот.
[01:29:00.320 --> 01:29:01.320]  Ну вот.
[01:29:01.320 --> 01:29:02.320]  Ну вот.
[01:29:02.320 --> 01:29:03.320]  Ну вот.
[01:29:03.320 --> 01:29:04.320]  Ну вот.
[01:29:04.320 --> 01:29:05.320]  Ну вот.
[01:29:05.320 --> 01:29:06.320]  Ну вот.
[01:29:06.320 --> 01:29:07.320]  Ну вот.
[01:29:07.320 --> 01:29:08.320]  Ну вот.
[01:29:08.320 --> 01:29:09.320]  Ну вот.
[01:29:09.320 --> 01:29:10.320]  Ну вот.
[01:29:10.320 --> 01:29:11.320]  Ну вот.
[01:29:11.320 --> 01:29:12.320]  Ну вот.
[01:29:12.320 --> 01:29:13.320]  Ну вот.
[01:29:13.320 --> 01:29:14.320]  Ну вот.
[01:29:14.320 --> 01:29:15.320]  Ну вот.
[01:29:15.320 --> 01:29:16.320]  Ну вот.
[01:29:16.320 --> 01:29:17.320]  Ну вот.
[01:29:17.320 --> 01:29:18.320]  Ну вот.
[01:29:18.320 --> 01:29:19.320]  Ну вот.
[01:29:19.320 --> 01:29:20.320]  Ну вот.
[01:29:20.320 --> 01:29:21.320]  Ну вот.
[01:29:21.320 --> 01:29:22.320]  Ну вот.
[01:29:22.320 --> 01:29:23.320]  Ну вот.
[01:29:23.360 --> 01:29:24.360]  Ну вот.
[01:29:24.360 --> 01:29:25.360]  Ну вот.
[01:29:25.360 --> 01:29:26.360]  Ну вот.
[01:29:26.360 --> 01:29:27.360]  Ну вот.
[01:29:27.360 --> 01:29:28.360]  Ну вот.
[01:29:28.360 --> 01:29:29.360]  Ну вот.
[01:29:29.360 --> 01:29:30.360]  Ну вот.
[01:29:30.360 --> 01:29:31.360]  Ну вот.
[01:29:31.360 --> 01:29:32.360]  Ну вот.
[01:29:32.360 --> 01:29:33.360]  Ну вот.
[01:29:33.360 --> 01:29:34.360]  Ну вот.
[01:29:34.360 --> 01:29:35.360]  Ну вот.
[01:29:35.360 --> 01:29:36.360]  Ну вот.
[01:29:36.360 --> 01:29:37.360]  Ну вот.
[01:29:37.360 --> 01:29:38.360]  Ну вот.
[01:29:38.360 --> 01:29:39.360]  Ну вот.
[01:29:39.360 --> 01:29:40.360]  Ну вот.
[01:29:40.360 --> 01:29:41.360]  Но вот.
[01:29:41.360 --> 01:29:42.360]  Ну вот.
[01:29:42.360 --> 01:29:43.360]  Ну вот.
[01:29:43.360 --> 01:29:44.360]  Ну вот.
[01:29:44.360 --> 01:29:45.360]  Ну вот.
[01:29:45.360 --> 01:29:46.360]  Ну вот.
[01:29:46.360 --> 01:29:47.360]  Ну вот.
[01:29:47.360 --> 01:29:48.360]  Ну вот.
[01:29:48.360 --> 01:29:49.360]  Ну вот.
[01:29:49.360 --> 01:29:50.360]  Ну вот.
[01:29:50.360 --> 01:29:51.360]  Ну вот.
[01:29:51.360 --> 01:29:56.360]  они в этом месте вполне могли по памяти сэкономить
[01:29:56.360 --> 01:29:59.360]  так они для этого и выбрали красно-черное дерево, чтобы по памяти сэкономить
[01:29:59.360 --> 01:30:02.360]  да, но следующий элемент вам все равно придется искать
[01:30:02.360 --> 01:30:04.360]  красно-черное дерево выбиралось по памяти сэкономить
[01:30:04.360 --> 01:30:08.360]  потому что в ВВЛ дерево для вам пришлось бы в каждой вершине еще хранить переменную
[01:30:08.360 --> 01:30:11.360]  которая хранится, сколько там чисел в под дереве
[01:30:11.360 --> 01:30:14.360]  это вот в ВВЛ важно
[01:30:14.360 --> 01:30:17.360]  то есть лишние 4 байта памяти
[01:30:17.360 --> 01:30:21.360]  поэтому красно-черное дерево сделали для того, чтобы этого не надо было хранить
[01:30:21.360 --> 01:30:26.360]  там надо было хранить только один бит, который записывается в лишний бит в указатель прицепа
[01:30:26.360 --> 01:30:31.360]  поэтому согласно этой концепции, скорее всего, подобного не будет
[01:30:31.360 --> 01:30:34.360]  поэтому скорее всего...
[01:30:34.360 --> 01:30:40.360]  то есть понятно, что там фишка в том, что если вы прибежите с отбеги на дареты, то амортизировано это будет за ОАТЭ
[01:30:40.360 --> 01:30:43.360]  потому что вы по сути ДФСом дерева обойдете
[01:30:43.360 --> 01:30:47.360]  ну вот, конкретные плюс-плюс и минус-минус могут работать за реальностью
[01:30:50.360 --> 01:30:54.360]  и то там отдельная песня, что для вершины еще придется родителей там всяких хранить
[01:30:54.360 --> 01:30:57.360]  так что там вопрос еще как-то реализованный
[01:30:57.360 --> 01:31:00.360]  но в этом смысле надеяться на STL сложно
[01:31:00.360 --> 01:31:06.360]  но с другой стороны, может оказаться так, что конкретно вам те фишки, которые предлагает STL наоборот не надо, а вам нужны другие
[01:31:06.360 --> 01:31:11.360]  и тогда оказывается, что структуру данных можно реализовать там более эффективно
[01:31:11.360 --> 01:31:13.360]  то есть структури просто более под ваши нужды
[01:31:13.360 --> 01:31:15.360]  то есть стрей в этом месте не очень настраиваем
[01:31:15.360 --> 01:31:18.360]  поэтому иногда, тем не менее, несмотря на наличие STD-стринга
[01:31:18.360 --> 01:31:25.360]  соответственно, когда компании идут на то, чтобы записать свои версии структуры данных под свои нужды
[01:31:28.360 --> 01:31:34.360]  то есть там, по-моему, более этого помимо строти, на самом деле в Янтарсе еще STL есть
[01:31:34.360 --> 01:31:38.360]  тоже еще одна разновидность строки, но я там уже не помню деталей зачем
[01:31:38.360 --> 01:31:40.360]  но смысл есть
[01:31:41.360 --> 01:31:43.360]  вот, так что вот, T-Spring
[01:31:44.360 --> 01:31:46.360]  T-Spring 2
[01:31:46.360 --> 01:31:49.360]  ну вот еще один тип строки в Яндекс
[01:31:51.360 --> 01:31:53.360]  ну я не помню зачем, но вот так
[01:31:53.360 --> 01:31:55.360]  нам у нас еще не нужна очередь операции
[01:31:55.360 --> 01:31:57.360]  чего нужна?
[01:31:57.360 --> 01:31:59.360]  очередь операции, которую мы должны сделать
[01:31:59.360 --> 01:32:01.360]  режимикой, конечно
[01:32:01.360 --> 01:32:03.360]  нет, не нужно
[01:32:03.360 --> 01:32:05.360]  нет, смотрите, не нужно
[01:32:05.360 --> 01:32:07.360]  нам достаточно знать, на какой мы фазе находимся
[01:32:07.360 --> 01:32:09.360]  потому что у нас есть 3 фазы
[01:32:09.360 --> 01:32:11.360]  перекопирование из R-S
[01:32:11.360 --> 01:32:13.360]  перекопирование из L-V
[01:32:13.360 --> 01:32:15.360]  или перекопирование из S-V
[01:32:15.360 --> 01:32:17.360]  понятно, да?
[01:32:19.360 --> 01:32:21.360]  вот, значит, смотрите
[01:32:21.360 --> 01:32:23.360]  значит, пишечка
[01:32:23.360 --> 01:32:25.360]  теперь такая, ну вот
[01:32:25.360 --> 01:32:27.360]  так, вроде пока лучше ничего не надо, то есть еще допишем
[01:32:27.360 --> 01:32:29.360]  я тут тоже
[01:32:29.360 --> 01:32:31.360]  ну вот, теперь, значит, пишем
[01:32:31.360 --> 01:32:33.360]  так, даже некой нот
[01:32:33.360 --> 01:32:35.360]  давайте так
[01:32:35.360 --> 01:32:37.360]  что-то еще надо писать
[01:32:37.360 --> 01:32:39.360]  значит, ну
[01:32:39.360 --> 01:32:41.360]  теперь пишем так
[01:32:41.360 --> 01:32:43.360]  так, вот давайте
[01:32:43.360 --> 01:32:45.360]  начнем с push, да?
[01:32:47.360 --> 01:32:49.360]  значит, void
[01:32:49.360 --> 01:32:51.360]  push
[01:32:51.360 --> 01:32:53.360]  ну, допустим
[01:32:53.360 --> 01:32:55.360]  там
[01:32:55.360 --> 01:32:57.360]  t-element
[01:32:57.360 --> 01:32:59.360]  x
[01:32:59.360 --> 01:33:01.360]  нет, t-element плохо
[01:33:01.360 --> 01:33:03.360]  t-element
[01:33:03.360 --> 01:33:05.360]  t-element
[01:33:05.360 --> 01:33:07.360]  вот так
[01:33:07.360 --> 01:33:09.360]  ну, мы добавляем t-element, кстати
[01:33:09.360 --> 01:33:11.360]  но я специально избегаю
[01:33:11.360 --> 01:33:13.360]  тентов, чтобы мы не цеплялись, понятно?
[01:33:13.360 --> 01:33:15.360]  то есть, от этого мы сейчас обстрадились
[01:33:15.360 --> 01:33:17.360]  там был шаблон написан
[01:33:17.360 --> 01:33:19.360]  так, ну, поехали
[01:33:21.360 --> 01:33:23.360]  значит, по сути
[01:33:23.360 --> 01:33:25.360]  теперь будем говорить следующее
[01:33:25.360 --> 01:33:27.360]  значит, говорит так, что
[01:33:27.360 --> 01:33:29.360]  если у нас не
[01:33:29.360 --> 01:33:31.360]  режим перекопирования
[01:33:31.360 --> 01:33:33.360]  если не перекопии
[01:33:33.360 --> 01:33:35.360]  то мы
[01:33:35.360 --> 01:33:37.360]  просто говорим
[01:33:37.360 --> 01:33:39.360]  значит, мы просто говорим, что в stack l
[01:33:39.360 --> 01:33:41.360]  мы добавляем
[01:33:41.360 --> 01:33:43.360]  вот этот элемент
[01:33:49.360 --> 01:33:51.360]  и говорим
[01:33:51.360 --> 01:33:53.360]  что если
[01:33:55.360 --> 01:33:57.360]  если оказалось, что l.size
[01:33:57.360 --> 01:33:59.360]  внимание
[01:33:59.360 --> 01:34:01.360]  если оказался строго больше, чем r.size
[01:34:05.360 --> 01:34:07.360]  то, соответственно, мы неожиданно
[01:34:07.360 --> 01:34:09.360]  начинаем кричать, алярма, алярма
[01:34:09.360 --> 01:34:11.360]  в лице
[01:34:11.360 --> 01:34:13.360]  recopy
[01:34:13.360 --> 01:34:15.360]  равно true
[01:34:15.360 --> 01:34:17.360]  алярма
[01:34:17.360 --> 01:34:19.360]  значит, face
[01:34:19.360 --> 01:34:21.360]  будет равно
[01:34:21.360 --> 01:34:23.360]  id
[01:34:23.360 --> 01:34:25.360]  вот
[01:34:25.360 --> 01:34:27.360]  значит, далее
[01:34:29.360 --> 01:34:31.360]  значит, далее
[01:34:31.360 --> 01:34:33.360]  call pop пишем
[01:34:33.360 --> 01:34:35.360]  а, ну, call pop
[01:34:35.360 --> 01:34:37.360]  обязательно равен нужным, конечно
[01:34:37.360 --> 01:34:39.360]  так
[01:34:39.360 --> 01:34:41.360]  еще мы там еще пишем
[01:34:41.360 --> 01:34:43.360]  а, ну, и x можно написать
[01:34:43.360 --> 01:34:45.360]  равно r.stack
[01:34:45.360 --> 01:34:47.360]  хотя, на самом деле, не обязательно абсолютно
[01:34:47.360 --> 01:34:49.360]  и, конечно, уже здесь
[01:34:53.360 --> 01:34:55.360]  make
[01:34:55.360 --> 01:34:57.360]  теперь
[01:34:57.360 --> 01:34:59.360]  теперь
[01:34:59.360 --> 01:35:01.360]  делаем такую функцию, как
[01:35:01.360 --> 01:35:03.360]  make recopy steps
[01:35:09.360 --> 01:35:11.360]  внимание, да
[01:35:11.360 --> 01:35:13.360]  я вложу на будущее новый метод
[01:35:13.360 --> 01:35:15.360]  который будет
[01:35:15.360 --> 01:35:17.360]  получать
[01:35:17.360 --> 01:35:19.360]  на вход какую-то переменную
[01:35:19.360 --> 01:35:21.360]  и делать шаги перекопирования
[01:35:21.360 --> 01:35:23.360]  а
[01:35:23.360 --> 01:35:25.360]  в плане
[01:35:25.360 --> 01:35:27.360]  и в recopy
[01:35:27.360 --> 01:35:29.360]  то как раз
[01:35:29.360 --> 01:35:31.360]  попасть где
[01:35:31.360 --> 01:35:33.360]  в смысле
[01:35:33.360 --> 01:35:35.360]  не понял
[01:35:35.360 --> 01:35:37.360]  если бы у нас было recopy 1
[01:35:37.360 --> 01:35:39.360]  то мы бы все равно делали его
[01:35:39.360 --> 01:35:41.360]  перед теми
[01:35:41.360 --> 01:35:43.360]  а чем у нас сейчас recopy как раз
[01:35:43.360 --> 01:35:45.360]  сейчас recopy
[01:35:45.360 --> 01:35:47.360]  нет у нас
[01:35:47.360 --> 01:35:49.360]  а, в смысле потом
[01:35:49.360 --> 01:35:51.360]  не-не-не-не, потом не надо
[01:35:51.360 --> 01:35:53.360]  потому что если у нас прямо сейчас recopy
[01:35:53.360 --> 01:35:55.360]  понимаете, то эти операции
[01:35:55.360 --> 01:35:57.360]  надо посчитать
[01:35:57.360 --> 01:35:59.360]  вот
[01:35:59.360 --> 01:36:01.360]  так
[01:36:01.360 --> 01:36:03.360]  ну, давайте так
[01:36:03.360 --> 01:36:05.360]  так, ладно, я не умею так быстро
[01:36:05.360 --> 01:36:07.360]  ответить на этот вопрос, просто давайте лучше
[01:36:07.360 --> 01:36:09.360]  не будем так это сразу
[01:36:09.360 --> 01:36:11.360]  бежать и оптимизировать, давайте тут сразу
[01:36:11.360 --> 01:36:13.360]  что-то где-то учтем
[01:36:13.360 --> 01:36:15.360]  что?
[01:36:17.360 --> 01:36:19.360]  make recop
[01:36:19.360 --> 01:36:21.360]  потому что мы делаем три шага перекопирования
[01:36:21.360 --> 01:36:23.360]  а может четыре хотели
[01:36:23.360 --> 01:36:25.360]  пожалуйста
[01:36:25.360 --> 01:36:27.360]  сделать его и тут, то уже
[01:36:27.360 --> 01:36:29.360]  нас хватило три, потому что у нас есть 3 и плюс 1
[01:36:29.360 --> 01:36:31.360]  вот
[01:36:31.360 --> 01:36:33.360]  так, соответственно
[01:36:33.360 --> 01:36:35.360]  мы же не должны проверить
[01:36:35.360 --> 01:36:37.360]  то, что у нас сейчас recopy
[01:36:37.360 --> 01:36:39.360]  нет
[01:36:41.360 --> 01:36:43.360]  если не recopy
[01:36:43.360 --> 01:36:45.360]  нет, видите, если не recopy, то теперь он
[01:36:45.360 --> 01:36:47.360]  true и можно уже первые три шага сделать
[01:36:47.360 --> 01:36:49.360]  вот, это у нас будет перемен
[01:36:49.360 --> 01:36:51.360]  мы это чуть позже реализуем
[01:36:51.360 --> 01:36:53.360]  так, теперь давайте
[01:36:53.360 --> 01:36:55.360]  то есть просто говорим, что вот это шаги-шаги
[01:36:55.360 --> 01:36:57.360]  перекопирования делается
[01:36:57.360 --> 01:36:59.360]  вот, в противном
[01:36:59.360 --> 01:37:01.360]  случае
[01:37:01.360 --> 01:37:03.360]  а, ну
[01:37:03.360 --> 01:37:05.360]  в противном случае мы больше ничего не делаем
[01:37:05.360 --> 01:37:07.360]  просто сделали push, если у Эли
[01:37:07.360 --> 01:37:09.360]  все еще больше леврабдальмента, значит все в порядке
[01:37:09.360 --> 01:37:11.360]  никто ничего не делает
[01:37:11.360 --> 01:37:13.360]  то есть по
[01:37:13.360 --> 01:37:15.360]  поэтому
[01:37:15.360 --> 01:37:17.360]  все запишется
[01:37:17.360 --> 01:37:19.360]  на вот эту тифу
[01:37:19.360 --> 01:37:21.360]  то есть в противном случае
[01:37:21.360 --> 01:37:23.360]  то есть
[01:37:23.360 --> 01:37:25.360]  если recopy есть
[01:37:25.360 --> 01:37:27.360]  то, что мы делаем?
[01:37:29.360 --> 01:37:31.360]  то, ну
[01:37:31.360 --> 01:37:33.360]  да, отличие по большому счету только
[01:37:33.360 --> 01:37:35.360]  мы пихаем элемент
[01:37:35.360 --> 01:37:37.360]  просто stack
[01:37:37.360 --> 01:37:39.360]  edge-tripper, обратите внимание
[01:37:39.360 --> 01:37:41.360]  просто push
[01:37:41.360 --> 01:37:43.360]  и
[01:37:43.360 --> 01:37:45.360]  make a copy step
[01:37:45.360 --> 01:37:47.360]  yeah
[01:37:47.360 --> 01:37:49.360]  make a copy step
[01:37:49.360 --> 01:37:51.360]  yeah
[01:37:51.360 --> 01:37:53.360]  тоже давайте
[01:37:53.360 --> 01:37:55.360]  3, можно 4, 3
[01:37:55.360 --> 01:37:57.360]  да
[01:37:57.360 --> 01:37:59.360]  вы уже выяснили, что хватит
[01:37:59.360 --> 01:38:01.360]  ну, как бы
[01:38:01.360 --> 01:38:03.360]  если вам не хватит, пихайте 57
[01:38:03.360 --> 01:38:05.360]  и не парить
[01:38:05.360 --> 01:38:07.360]  так, ну а на самом деле
[01:38:07.360 --> 01:38:09.360]  хотя я вот так
[01:38:09.360 --> 01:38:11.360]  ну на самом деле пихайте 57, потому что он
[01:38:11.360 --> 01:38:13.360]  там
[01:38:13.360 --> 01:38:15.360]  там написано
[01:38:15.360 --> 01:38:17.360]  две строчки, первая строчка
[01:38:17.360 --> 01:38:19.360]  edge-tripper
[01:38:19.360 --> 01:38:21.360]  это не
[01:38:21.360 --> 01:38:23.360]  edge-tripper, точка push
[01:38:23.360 --> 01:38:25.360]  от элемента
[01:38:25.360 --> 01:38:27.360]  и второе
[01:38:27.360 --> 01:38:29.360]  вторая строчка
[01:38:29.360 --> 01:38:31.360]  make a copy step
[01:38:31.360 --> 01:38:33.360]  все
[01:38:33.360 --> 01:38:35.360]  дальше там все, две фигурные скобки
[01:38:35.360 --> 01:38:37.360]  и push заготь
[01:38:37.360 --> 01:38:39.360]  и push на этом
[01:38:39.360 --> 01:38:41.360]  то есть обратите, вы видите, мы так
[01:38:41.360 --> 01:38:43.360]  абстрагируемся, то есть
[01:38:43.360 --> 01:38:45.360]  единственная вот наша деталь будет сейчас
[01:38:45.360 --> 01:38:47.360]  когда мы будем реализовывать
[01:38:47.360 --> 01:38:49.360]  поп
[01:38:49.360 --> 01:38:51.360]  давайте я вот сейчас аккуратненько
[01:38:51.360 --> 01:38:53.360]  вот так писать
[01:38:53.360 --> 01:38:55.360]  так, попробую поп уже
[01:38:55.360 --> 01:38:57.360]  так, теперь
[01:38:57.360 --> 01:38:59.360]  а, ну нам
[01:38:59.360 --> 01:39:01.360]  правда теперь нужен не
[01:39:01.360 --> 01:39:03.360]  да, нам нужен теперь не
[01:39:03.360 --> 01:39:05.360]  поп, а соответственно
[01:39:05.360 --> 01:39:07.360]  front
[01:39:09.360 --> 01:39:11.360]  ну давайте вот для простоты напишем
[01:39:11.360 --> 01:39:13.360]  t-element
[01:39:13.360 --> 01:39:15.360]  так, внимание
[01:39:15.360 --> 01:39:17.360]  t-element front
[01:39:19.360 --> 01:39:21.360]  ну давайте вот там не ссылку будет
[01:39:21.360 --> 01:39:23.360]  возвращать
[01:39:23.360 --> 01:39:25.360]  в чем дело? то, в первых, как всегда
[01:39:25.360 --> 01:39:27.360]  если у нас нере копия
[01:39:27.360 --> 01:39:29.360]  то что мы делаем?
[01:39:31.360 --> 01:39:33.360]  из эра просто
[01:39:33.360 --> 01:39:35.360]  да, совершенно верно, это называется
[01:39:35.360 --> 01:39:37.360]  return nr
[01:39:37.360 --> 01:39:39.360]  .top
[01:39:39.360 --> 01:39:41.360]  все, да, front обратите внимание
[01:39:41.360 --> 01:39:43.360]  сам по себе ничего не делает, но при этом
[01:39:43.360 --> 01:39:45.360]  модификатор const мы тут
[01:39:45.360 --> 01:39:47.360]  не ставим, потому что структура внутри
[01:39:47.360 --> 01:39:49.360]  себя, ой как меняется
[01:39:49.360 --> 01:39:51.360]  что такое модификатор const?
[01:39:51.360 --> 01:39:53.360]  а, не проходили еще?
[01:39:53.360 --> 01:39:55.360]  да, ты можешь в класс поставить
[01:39:55.360 --> 01:39:57.360]  что бы гарантировать, что бы...
[01:39:57.360 --> 01:39:59.360]  так, давайте не будем сейчас
[01:39:59.360 --> 01:40:01.360]  если не знаете, то лучше пока и не узнавайте
[01:40:01.360 --> 01:40:03.360]  это пока не будет
[01:40:03.360 --> 01:40:05.360]  вот именно поэтому
[01:40:05.360 --> 01:40:07.360]  давайте не будем это копать
[01:40:07.360 --> 01:40:09.360]  понятно, что
[01:40:09.360 --> 01:40:11.360]  кто-то знает, мы можем сейчас бесконечно долго
[01:40:11.360 --> 01:40:13.360]  на эту тему говорить, но лучше
[01:40:13.360 --> 01:40:15.360]  в свое время лучше сначала следуя на эту тему
[01:40:15.360 --> 01:40:17.360]  поговорить
[01:40:17.360 --> 01:40:19.360]  так вот, если рекопии, то просто
[01:40:19.360 --> 01:40:21.360]  это точка копии
[01:40:21.360 --> 01:40:23.360]  а вот если рекопии
[01:40:23.360 --> 01:40:25.360]  ну что делать?
[01:40:25.360 --> 01:40:27.360]  что делать?
[01:40:27.360 --> 01:40:29.360]  ну как мы уже с вами
[01:40:29.360 --> 01:40:31.360]  выяснили
[01:40:31.360 --> 01:40:33.360]  если оказалось
[01:40:33.360 --> 01:40:35.360]  что call poop
[01:40:35.360 --> 01:40:37.360]  значит
[01:40:37.360 --> 01:40:39.360]  call poop оказался
[01:40:39.360 --> 01:40:41.360]  ну допустим
[01:40:41.360 --> 01:40:43.360]  чем он оказался?
[01:40:43.360 --> 01:40:45.360]  не, не больше
[01:40:45.360 --> 01:40:47.360]  не, если call poop все
[01:40:47.360 --> 01:40:49.360]  меньше, либо равен s.size
[01:40:49.360 --> 01:40:51.360]  ну
[01:40:51.360 --> 01:40:53.360]  меньше, меньше
[01:40:53.360 --> 01:40:55.360]  чего, чего, чего?
[01:40:59.360 --> 01:41:01.360]  да, мы же берем типа на
[01:41:01.360 --> 01:41:03.360]  не скажи меньше
[01:41:03.360 --> 01:41:05.360]  пока именно меньше, либо равно
[01:41:05.360 --> 01:41:07.360]  если он равен, то мы все и засветли
[01:41:07.360 --> 01:41:09.360]  нет, если равен, то значит
[01:41:09.360 --> 01:41:11.360]  а, ну то есть все эти удалили
[01:41:11.360 --> 01:41:13.360]  да, согласен, хорошо, говори
[01:41:13.360 --> 01:41:15.360]  если call poop оказался меньше, либо равен
[01:41:15.360 --> 01:41:17.360]  меньше
[01:41:17.360 --> 01:41:19.360]  нет, меньше, либо равен
[01:41:19.360 --> 01:41:21.360]  это фронт и не call
[01:41:23.360 --> 01:41:25.360]  хотя
[01:41:25.360 --> 01:41:27.360]  не важно, мы тут тоже
[01:41:27.360 --> 01:41:29.360]  эти рекопии можем вставить
[01:41:29.360 --> 01:41:31.360]  так, так
[01:41:31.360 --> 01:41:33.360]  ну давай так, ладно
[01:41:33.360 --> 01:41:35.360]  я хочу сравнить
[01:41:35.360 --> 01:41:37.360]  так, давайте я скажу идею
[01:41:37.360 --> 01:41:39.360]  если call poop
[01:41:39.360 --> 01:41:41.360]  с.size
[01:41:41.360 --> 01:41:43.360]  что-то там
[01:41:43.360 --> 01:41:45.360]  то мы хотим вернуть
[01:41:45.360 --> 01:41:47.360]  тоже
[01:41:47.360 --> 01:41:49.360]  add.pop
[01:41:51.360 --> 01:41:53.360]  add, а вот тут начинается
[01:41:53.360 --> 01:41:55.360]  мистическая функция
[01:41:55.360 --> 01:41:57.360]  return
[01:41:57.360 --> 01:41:59.360]  n.for
[01:41:59.360 --> 01:42:01.360]  s, во-первых
[01:42:01.360 --> 01:42:03.360]  .top
[01:42:03.360 --> 01:42:05.360]  от call poop
[01:42:05.360 --> 01:42:07.360]  допустим call poop
[01:42:07.360 --> 01:42:09.360]  плюс первого элемента
[01:42:09.360 --> 01:42:11.360]  давайте с единицей будем
[01:42:11.360 --> 01:42:13.360]  вот
[01:42:13.360 --> 01:42:15.360]  то есть
[01:42:15.360 --> 01:42:17.360]  вот, то есть нам нужен
[01:42:17.360 --> 01:42:19.360]  call poop плюс первый элемент
[01:42:19.360 --> 01:42:21.360]  ну соответственно он либо находится сейчас
[01:42:21.360 --> 01:42:23.360]  в s-ке
[01:42:23.360 --> 01:42:25.360]  либо нот
[01:42:25.360 --> 01:42:27.360]  ну вот, либо нот
[01:42:27.360 --> 01:42:29.360]  ну и соответственно для того чтобы находился в s-ке
[01:42:29.360 --> 01:42:31.360]  надо написать так
[01:42:31.360 --> 01:42:33.360]  нет, это мы r-то берем
[01:42:33.360 --> 01:42:35.360]  если m тоже будет больше или равно
[01:42:35.360 --> 01:42:37.360]  да, да, да
[01:42:37.360 --> 01:42:39.360]  окей
[01:42:39.360 --> 01:42:41.360]  вот, если
[01:42:41.360 --> 01:42:43.360]  у нас пока волнует
[01:42:43.360 --> 01:42:45.360]  только вот это вот
[01:42:45.360 --> 01:42:47.360]  что мы и не умеем
[01:42:47.360 --> 01:42:49.360]  ну и конечно не стоит забывать
[01:42:49.360 --> 01:42:51.360]  раз уж у нас рекопия, хотя в принципе это не обязательно
[01:42:51.360 --> 01:42:53.360]  честно скажу
[01:42:53.360 --> 01:42:55.360]  по большому счету
[01:42:55.360 --> 01:42:57.360]  то есть в принципе можно на этом закончить
[01:42:57.360 --> 01:42:59.360]  на самом деле
[01:42:59.360 --> 01:43:01.360]  ну да, то есть
[01:43:01.360 --> 01:43:03.360]  здесь не надо
[01:43:03.360 --> 01:43:05.360]  здесь
[01:43:05.360 --> 01:43:07.360]  не надо
[01:43:07.360 --> 01:43:09.360]  вот
[01:43:09.360 --> 01:43:11.360]  ну в принципе да
[01:43:11.360 --> 01:43:13.360]  давайте так и скажем
[01:43:13.360 --> 01:43:15.360]  давайте лучше вот
[01:43:15.360 --> 01:43:17.360]  да, то есть топ 1
[01:43:17.360 --> 01:43:19.360]  это значит верни первый элемент
[01:43:19.360 --> 01:43:21.360]  давайте иногда
[01:43:21.360 --> 01:43:23.360]  удобно выйти в первых этапах
[01:43:23.360 --> 01:43:25.360]  ой, как там 90-е
[01:43:25.360 --> 01:43:27.360]  года по гарнистам советовали
[01:43:27.360 --> 01:43:29.360]  когда общаетесь с девушкой, ни в коем случае не говорите
[01:43:29.360 --> 01:43:31.360]  ты у меня нулевая
[01:43:33.360 --> 01:43:35.360]  не указывайся елозой бинпоэстом
[01:43:35.360 --> 01:43:37.360]  начинай с печени
[01:43:39.360 --> 01:43:41.360]  нулевая
[01:43:41.360 --> 01:43:43.360]  начинай бинпоэст с 18
[01:43:43.360 --> 01:43:45.360]  так вот
[01:43:45.360 --> 01:43:47.360]  значит далее
[01:43:47.360 --> 01:43:49.360]  хорошо, и смотрите
[01:43:49.360 --> 01:43:51.360]  это фронт
[01:43:51.360 --> 01:43:53.360]  так
[01:43:53.360 --> 01:43:55.360]  значит это болты эвера
[01:43:55.360 --> 01:43:57.360]  теперь
[01:43:57.360 --> 01:43:59.360]  а теперь давайте делать пуп
[01:43:59.360 --> 01:44:01.360]  значит пойдем сразу
[01:44:01.360 --> 01:44:03.360]  в пуп и
[01:44:03.360 --> 01:44:05.360]  будем смотреть
[01:44:05.360 --> 01:44:07.360]  ну и здесь, значит внимание
[01:44:07.360 --> 01:44:09.360]  так
[01:44:11.360 --> 01:44:13.360]  значит
[01:44:13.360 --> 01:44:15.360]  смотрите, о, а вот тут
[01:44:15.360 --> 01:44:17.360]  начинается копипаста
[01:44:17.360 --> 01:44:19.360]  потому что
[01:44:19.360 --> 01:44:21.360]  если не в копии
[01:44:21.360 --> 01:44:23.360]  то что
[01:44:23.360 --> 01:44:25.360]  происходит
[01:44:25.360 --> 01:44:27.360]  ну понятно
[01:44:27.360 --> 01:44:29.360]  что во-первых в R
[01:44:29.360 --> 01:44:31.360]  значит
[01:44:31.360 --> 01:44:33.360]  из R мы этот элемент торжественно
[01:44:33.360 --> 01:44:35.360]  добавляем
[01:44:35.360 --> 01:44:37.360]  он там
[01:44:37.360 --> 01:44:39.360]  заведомо есть
[01:44:39.360 --> 01:44:41.360]  потому что размер R не меньше
[01:44:41.360 --> 01:44:43.360]  чем размер L
[01:44:43.360 --> 01:44:45.360]  единственное что может быть
[01:44:45.360 --> 01:44:47.360]  это оба они пустые, тогда очередь пустая
[01:44:47.360 --> 01:44:49.360]  там ладно, так что
[01:44:49.360 --> 01:44:51.360]  заниматься этими сериями
[01:44:51.360 --> 01:44:53.360]  олярными с эксепшнами мы сейчас не будем
[01:44:53.360 --> 01:44:55.360]  так же это R.пуп
[01:44:55.360 --> 01:44:57.360]  и неожиданно выясняется
[01:44:57.360 --> 01:44:59.360]  что если оказалось
[01:44:59.360 --> 01:45:01.360]  что L.size
[01:45:01.360 --> 01:45:03.360]  больше
[01:45:03.360 --> 01:45:05.360]  чем R.size, а после этого
[01:45:05.360 --> 01:45:07.360]  тоже так могло произойти случайно
[01:45:07.360 --> 01:45:09.360]  то
[01:45:09.360 --> 01:45:11.360]  ну я переписывать не буду
[01:45:11.360 --> 01:45:13.360]  вот этот блок
[01:45:13.360 --> 01:45:15.360]  торжественно
[01:45:15.360 --> 01:45:17.360]  целиком сюда
[01:45:17.360 --> 01:45:19.360]  помещается
[01:45:19.360 --> 01:45:21.360]  чисто по-хорошему
[01:45:21.360 --> 01:45:23.360]  если бы я сейчас
[01:45:23.360 --> 01:45:25.360]  кодил по телевизору
[01:45:25.360 --> 01:45:27.360]  то я бы это все выкопистил функцию
[01:45:27.360 --> 01:45:29.360]  старт или копия
[01:45:31.360 --> 01:45:33.360]  но делают буквально
[01:45:33.360 --> 01:45:35.360]  то же самое
[01:45:35.360 --> 01:45:37.360]  понимаете, да?
[01:45:37.360 --> 01:45:39.360]  ну а теперь самое интересное
[01:45:39.360 --> 01:45:41.360]  значит L.size
[01:45:41.360 --> 01:45:43.360]  а вот теперь начинается внимание
[01:45:43.360 --> 01:45:45.360]  самое интересное
[01:45:45.360 --> 01:45:47.360]  а нет, не самое интересное
[01:45:47.360 --> 01:45:49.360]  не здесь самое интересное
[01:45:49.360 --> 01:45:51.360]  а callpop
[01:45:51.360 --> 01:45:53.360]  должно нас остановить
[01:45:53.360 --> 01:45:55.360]  callpop
[01:45:55.360 --> 01:45:57.360]  смотрите
[01:45:57.360 --> 01:45:59.360]  пока у нас не происходит рекопия
[01:45:59.360 --> 01:46:01.360]  callpop2x вообще значения
[01:46:01.360 --> 01:46:03.360]  не имеет
[01:46:03.360 --> 01:46:05.360]  вот когда мы
[01:46:05.360 --> 01:46:07.360]  делаем
[01:46:07.360 --> 01:46:09.360]  так и что
[01:46:11.360 --> 01:46:13.360]  да
[01:46:13.360 --> 01:46:15.360]  callpop
[01:46:15.360 --> 01:46:17.360]  оно говорит сколько произошло попов
[01:46:17.360 --> 01:46:19.360]  после того как вырубился режим
[01:46:19.360 --> 01:46:21.360]  этот мы не считаем
[01:46:21.360 --> 01:46:23.360]  вот
[01:46:23.360 --> 01:46:25.360]  и то как бы без целей
[01:46:25.360 --> 01:46:27.360]  на будущем нам понадобится только Facebook
[01:46:27.360 --> 01:46:29.360]  но вы вообще уже можете увидеть
[01:46:29.360 --> 01:46:31.360]  что сам по себе этот X нам не особо понадобится
[01:46:31.360 --> 01:46:33.360]  его уже можно выпиливать
[01:46:33.360 --> 01:46:35.360]  мы пока не будем
[01:46:35.360 --> 01:46:37.360]  в противном случае
[01:46:37.360 --> 01:46:39.360]  что делать если рекопия
[01:46:39.360 --> 01:46:41.360]  уже идет
[01:46:41.360 --> 01:46:43.360]  callpop++
[01:46:43.360 --> 01:46:45.360]  так
[01:46:45.360 --> 01:46:47.360]  но не совсем
[01:46:47.360 --> 01:46:49.360]  не совсем
[01:46:49.360 --> 01:46:51.360]  смотрите, во-первых
[01:46:51.360 --> 01:46:53.360]  plus plus callpop
[01:46:53.360 --> 01:46:55.360]  а во-вторых нам, напоминая, надо проверить
[01:46:55.360 --> 01:46:57.360]  что этот элемент случайно не находится
[01:46:57.360 --> 01:46:59.360]  или он уже в R
[01:46:59.360 --> 01:47:01.360]  поэтому и говорим, что если оказалось
[01:47:01.360 --> 01:47:03.360]  что S.size
[01:47:03.360 --> 01:47:05.360]  меньше чем callpop
[01:47:05.360 --> 01:47:07.360]  то тогда что мы делаем
[01:47:07.360 --> 01:47:09.360]  правильно
[01:47:09.360 --> 01:47:11.360]  тогда мы из R
[01:47:11.360 --> 01:47:13.360]  реально делаем
[01:47:15.360 --> 01:47:17.360]  и конечно же
[01:47:17.360 --> 01:47:19.360]  не забываем про make
[01:47:19.360 --> 01:47:21.360]  recopy steps
[01:47:21.360 --> 01:47:23.360]  да
[01:47:23.360 --> 01:47:25.360]  вот тут
[01:47:25.360 --> 01:47:27.360]  да, тут у меня немножко сдвиг
[01:47:27.360 --> 01:47:29.360]  L
[01:47:29.360 --> 01:47:31.360]  относится вот к этому внешнему
[01:47:31.360 --> 01:47:33.360]  ИФу
[01:47:33.360 --> 01:47:35.360]  нам
[01:47:35.360 --> 01:47:37.360]  после этого
[01:47:37.360 --> 01:47:39.360]  ИФа нужно
[01:47:39.360 --> 01:47:41.360]  сделать callpop
[01:47:41.360 --> 01:47:43.360]  сейчас у нас может быть такое
[01:47:43.360 --> 01:47:45.360]  что у нас как раз
[01:47:45.360 --> 01:47:47.360]  S.size станет меньше
[01:47:47.360 --> 01:47:49.360]  чем callpop
[01:47:49.360 --> 01:47:51.360]  а, нет
[01:47:51.360 --> 01:47:53.360]  вот тут важно
[01:47:53.360 --> 01:47:55.360]  именно то, что нам нужен callpop
[01:47:55.360 --> 01:47:57.360]  именно актуальность
[01:47:57.360 --> 01:47:59.360]  с учетом именно этого callpop
[01:47:59.360 --> 01:48:01.360]  потому что, по сути, callpop
[01:48:01.360 --> 01:48:03.360]  символизирует, сколько элементов
[01:48:03.360 --> 01:48:05.360]  было ударено
[01:48:05.360 --> 01:48:07.360]  а S.size там говорит, сколько элементов
[01:48:07.360 --> 01:48:09.360]  еще не перефиксировано
[01:48:09.360 --> 01:48:11.360]  то есть, если их перекопировано
[01:48:11.360 --> 01:48:13.360]  меньше либо равно callpop
[01:48:13.360 --> 01:48:15.360]  значит, этот элемент еще рано ударяется
[01:48:15.360 --> 01:48:17.360]  вот, и make recopy steps
[01:48:17.360 --> 01:48:19.360]  так, тут закончили
[01:48:19.360 --> 01:48:21.360]  и вот тут, соответственно, то же
[01:48:21.360 --> 01:48:23.360]  сейчас, а у нас не может быть такого, что в R нет элемента?
[01:48:23.360 --> 01:48:25.360]  что?
[01:48:25.360 --> 01:48:27.360]  у нас вот на вот этом шаге
[01:48:27.360 --> 01:48:29.360]  может быть такого, что в R нет элемента?
[01:48:29.360 --> 01:48:31.360]  допустим, элементы лежат в L'
[01:48:31.360 --> 01:48:33.360]  элементы лежат
[01:48:33.360 --> 01:48:35.360]  в L'?
[01:48:35.360 --> 01:48:37.360]  нет
[01:48:37.360 --> 01:48:39.360]  этого не может произойти
[01:48:39.360 --> 01:48:41.360]  вот почему, смотрите внимательно
[01:48:41.360 --> 01:48:43.360]  важный момент, спасибо, Рус, значит, смотрите
[01:48:43.360 --> 01:48:45.360]  идея тут заключается в следующем
[01:48:45.360 --> 01:48:47.360]  когда мы стартовали recopy
[01:48:47.360 --> 01:48:49.360]  у нас в L' было
[01:48:49.360 --> 01:48:51.360]  x плюс один элемент
[01:48:51.360 --> 01:48:53.360]  и в R' x
[01:48:53.360 --> 01:48:55.360]  это важно
[01:48:55.360 --> 01:48:57.360]  то есть, получается, к тому моменту
[01:48:57.360 --> 01:48:59.360]  когда мы сделаем
[01:48:59.360 --> 01:49:01.360]  x раз pop отсюда
[01:49:01.360 --> 01:49:03.360]  мы уже сделаем
[01:49:03.360 --> 01:49:05.360]  3x плюс 3 операции
[01:49:05.360 --> 01:49:07.360]  перекопирования
[01:49:07.360 --> 01:49:09.360]  это даже чуть больше, чем достаточно
[01:49:09.360 --> 01:49:11.360]  для того, чтобы
[01:49:11.360 --> 01:49:13.360]  провести вот эти все операции
[01:49:13.360 --> 01:49:15.360]  допустим, у нас на каком-то pop'е
[01:49:15.360 --> 01:49:17.360]  в R не оказалось
[01:49:17.360 --> 01:49:19.360]  элемента
[01:49:19.360 --> 01:49:21.360]  вот именно мы уже все перенесли
[01:49:21.360 --> 01:49:23.360]  нет, ну, смотрите
[01:49:23.360 --> 01:49:25.360]  нет, убеждение такое
[01:49:25.360 --> 01:49:27.360]  промежуточное
[01:49:27.360 --> 01:49:29.360]  когда не west
[01:49:29.360 --> 01:49:31.360]  ну, не совсем, смотрите
[01:49:31.360 --> 01:49:33.360]  если не west, то мы поймаем
[01:49:33.360 --> 01:49:35.360]  не, просто смотрите
[01:49:35.360 --> 01:49:37.360]  на самом деле, то есть, идеально в каждый момент времени
[01:49:37.360 --> 01:49:39.360]  если бы там, типа, ничего не удаляли
[01:49:39.360 --> 01:49:41.360]  вот если бы там просто
[01:49:41.360 --> 01:49:43.360]  то есть, если бы у нас было
[01:49:43.360 --> 01:49:45.360]  все честно, то у нас были бы
[01:49:45.360 --> 01:49:47.360]  все элементы из R
[01:49:47.360 --> 01:49:49.360]  вот эти x элементы мы бы перегнали в west
[01:49:49.360 --> 01:49:51.360]  а потом бы вернули обратно
[01:49:51.360 --> 01:49:53.360]  и тогда
[01:49:53.360 --> 01:49:55.360]  тогда каждый элемент должен
[01:49:55.360 --> 01:49:57.360]  находиться в north
[01:49:57.360 --> 01:49:59.360]  как-то даже
[01:49:59.360 --> 01:50:01.360]  объяснить не знаю
[01:50:01.360 --> 01:50:03.360]  вот мы делаем pop'ы
[01:50:03.360 --> 01:50:05.360]  и вот, допустим, мы перекинули все элементы из R в west
[01:50:05.360 --> 01:50:07.360]  ну
[01:50:07.360 --> 01:50:09.360]  перекинули
[01:50:09.360 --> 01:50:11.360]  мы перекинули, никого не удаляли, pop'ы равен 0
[01:50:11.360 --> 01:50:13.360]  не, не, так
[01:50:13.360 --> 01:50:15.360]  не, стоп, стоп, стоп
[01:50:15.360 --> 01:50:17.360]  pop'ы
[01:50:17.360 --> 01:50:19.360]  нет, мы перекидывали
[01:50:19.360 --> 01:50:21.360]  потому что у нас были все
[01:50:21.360 --> 01:50:23.360]  допустим, у нас в левом x плюс 1
[01:50:23.360 --> 01:50:25.360]  а в правом x
[01:50:25.360 --> 01:50:27.360]  и мы вот после этого момента начинаем делать
[01:50:27.360 --> 01:50:29.360]  постоянно pop'ы
[01:50:29.360 --> 01:50:31.360]  да, ну, теперь, смотрите
[01:50:31.360 --> 01:50:33.360]  ну, тут, смотрите, во-первых, тут
[01:50:33.360 --> 01:50:35.360]  начинаем без того, что R
[01:50:35.360 --> 01:50:37.360]  перегоняем в west
[01:50:37.360 --> 01:50:39.360]  и мы сейчас pop'ы опустим
[01:50:39.360 --> 01:50:41.360]  и
[01:50:41.360 --> 01:50:43.360]  у нас на каком-то pop'е
[01:50:43.360 --> 01:50:45.360]  на каком-то pop'е
[01:50:45.360 --> 01:50:47.360]  у нас V закончились элементы
[01:50:47.360 --> 01:50:49.360]  и при этом количество pop'ов уже больше
[01:50:49.360 --> 01:50:51.360]  чем элементов
[01:50:51.360 --> 01:50:53.360]  в west сейчас может быть такое
[01:50:53.360 --> 01:50:55.360]  не может, в левом x по 3 за раз
[01:50:55.360 --> 01:50:57.360]  мы один D и вместе V
[01:50:57.360 --> 01:50:59.360]  не, ну ладно, тут может быть подлянка
[01:50:59.360 --> 01:51:01.360]  что это в самом
[01:51:01.360 --> 01:51:03.360]  в самом начале
[01:51:03.360 --> 01:51:05.360]  в самом начале уже L в R лежит, нет?
[01:51:05.360 --> 01:51:07.360]  нет, смотрите, в самом начале
[01:51:07.360 --> 01:51:09.360]  вообще так, основная идея
[01:51:09.360 --> 01:51:11.360]  была в том, что тут элементы
[01:51:11.360 --> 01:51:13.360]  при копировании R пополняются быстрее
[01:51:13.360 --> 01:51:15.360]  чем происходит pop'ы
[01:51:15.360 --> 01:51:17.360]  вопрос только в самом первом, потому что
[01:51:17.360 --> 01:51:19.360]  когда мы только начинаем эту фазу
[01:51:19.360 --> 01:51:21.360]  у нас может быть... так
[01:51:21.360 --> 01:51:23.360]  хотя нет, все нормально
[01:51:23.360 --> 01:51:25.360]  в самом начале вообще
[01:51:25.360 --> 01:51:27.360]  у нас в R лежит 3 штуки
[01:51:27.360 --> 01:51:29.360]  нет, в самом начале
[01:51:29.360 --> 01:51:31.360]  в R лежит 3 штуки
[01:51:31.360 --> 01:51:33.360]  мы и позаботились об этом
[01:51:33.360 --> 01:51:35.360]  если бы там было 0, ничего страшного
[01:51:35.360 --> 01:51:37.360]  мы просто сделали pop отсюда
[01:51:37.360 --> 01:51:39.360]  и потом начали бы при копировании
[01:51:39.360 --> 01:51:41.360]  с этого элемента, так что тоже кайф
[01:51:41.360 --> 01:51:43.360]  да, как-то да
[01:51:43.360 --> 01:51:45.360]  все оказывается еще надежнее
[01:51:45.360 --> 01:51:47.360]  но теперь остается только реализовать
[01:51:47.360 --> 01:51:49.360]  recopy steps
[01:51:49.360 --> 01:51:51.360]  собственно, да?
[01:51:51.360 --> 01:51:53.360]  как это будет выглядеть?
[01:51:53.360 --> 01:51:55.360]  ну давайте начнем с void
[01:51:55.360 --> 01:51:57.360]  make recopy steps
[01:51:59.360 --> 01:52:01.360]  ну ее реализовать очень просто как раз
[01:52:01.360 --> 01:52:03.360]  циклы пропижаться
[01:52:03.360 --> 01:52:05.360]  и выводить аккорды
[01:52:05.360 --> 01:52:07.360]  совершенно верно
[01:52:07.360 --> 01:52:09.360]  и говорим while
[01:52:09.360 --> 01:52:11.360]  я такие вещи пишу
[01:52:11.360 --> 01:52:13.360]  while k-минус
[01:52:13.360 --> 01:52:15.360]  make recopy steps
[01:52:15.360 --> 01:52:17.360]  все
[01:52:19.360 --> 01:52:21.360]  все, видите?
[01:52:21.360 --> 01:52:23.360]  очень простой
[01:52:23.360 --> 01:52:25.360]  третий шаг
[01:52:29.360 --> 01:52:31.360]  а теперь начинайте
[01:52:31.360 --> 01:52:33.360]  самое интересное
[01:52:33.360 --> 01:52:35.360]  как же этот мистический шаг сделать?
[01:52:37.360 --> 01:52:39.360]  так, тут скажем
[01:52:39.360 --> 01:52:41.360]  вызвать предыдущую функцию с параметром 1
[01:52:43.360 --> 01:52:45.360]  было бы неплохо, конечно
[01:52:45.360 --> 01:52:47.360]  да, но мы не будем это делать
[01:52:47.360 --> 01:52:49.360]  потому что мы не
[01:52:49.360 --> 01:52:51.360]  мы, видимо, сначала фазу пробираем
[01:52:51.360 --> 01:52:53.360]  но пока R не достойно
[01:52:53.360 --> 01:52:55.360]  ну давайте проверяем
[01:52:55.360 --> 01:52:57.360]  значит, теперь, смотрите
[01:52:57.360 --> 01:52:59.360]  ну здесь можно реализовать так
[01:53:01.360 --> 01:53:03.360]  я предлагаю так
[01:53:03.360 --> 01:53:05.360]  ну понятно, что пробираемся, естественно, по фазе
[01:53:05.360 --> 01:53:07.360]  значит, если
[01:53:07.360 --> 01:53:09.360]  phase равно
[01:53:09.360 --> 01:53:11.360]  1, ну допустим 1
[01:53:11.360 --> 01:53:13.360]  хотя тоже вы познакомитесь с енамами
[01:53:13.360 --> 01:53:15.360]  хорошо, что мы плохо писали магические константы
[01:53:15.360 --> 01:53:17.360]  но...
[01:53:17.360 --> 01:53:19.360]  то есть надо было ввести енам
[01:53:19.360 --> 01:53:21.360]  и будут фазы R to S
[01:53:21.360 --> 01:53:23.360]  L to R, S to R
[01:53:23.360 --> 01:53:25.360]  а нереально по Define
[01:53:25.360 --> 01:53:27.360]  не надо
[01:53:31.360 --> 01:53:33.360]  ну не знаю, Define
[01:53:33.360 --> 01:53:35.360]  я вообще никогда не пользуюсь Define
[01:53:35.360 --> 01:53:37.360]  а то и по
[01:53:37.360 --> 01:53:39.360]  подключишь файл, а там Define
[01:53:39.360 --> 01:53:41.360]  а в будущем, видимо,
[01:53:41.360 --> 01:53:43.360]  будет бана зарянула
[01:53:43.360 --> 01:53:45.360]  в будущем не будет банов, если вот так писать
[01:53:45.360 --> 01:53:47.360]  фаза равно 1?
[01:53:47.360 --> 01:53:49.360]  ну подумай, может и будет
[01:53:49.360 --> 01:53:51.360]  в будущем, когда у вас только появятся енамы
[01:53:51.360 --> 01:53:53.360]  то... ну ладно, либо это
[01:53:53.360 --> 01:53:55.360]  либо даже когда они не появятся, мы скажем
[01:53:55.360 --> 01:53:57.360]  а вы изучите, что такое енам
[01:53:57.360 --> 01:53:59.360]  да, но пока
[01:53:59.360 --> 01:54:01.360]  итак, если фаза 1
[01:54:03.360 --> 01:54:05.360]  то, значит, смотрите
[01:54:05.360 --> 01:54:07.360]  тут я сделаю следующий чип
[01:54:07.360 --> 01:54:09.360]  смотрите
[01:54:09.360 --> 01:54:11.360]  значит, внимание
[01:54:11.360 --> 01:54:13.360]  внимание, значит
[01:54:13.360 --> 01:54:15.360]  говори, значит, мы должны скопировать
[01:54:15.360 --> 01:54:17.360]  значит, не говори
[01:54:17.360 --> 01:54:19.360]  если не R
[01:54:19.360 --> 01:54:21.360]  точка
[01:54:21.360 --> 01:54:23.360]  если R еще не пустой
[01:54:25.360 --> 01:54:27.360]  ну, на всем
[01:54:27.360 --> 01:54:29.360]  я вот так аккуратно напишу, хотя можно играть
[01:54:29.360 --> 01:54:31.360]  если R не пустой
[01:54:31.360 --> 01:54:33.360]  то, соответственно, понятно
[01:54:33.360 --> 01:54:35.360]  S.push
[01:54:35.360 --> 01:54:37.360]  соответственно от R.top
[01:54:39.360 --> 01:54:41.360]  R.push
[01:54:41.360 --> 01:54:43.360]  и внимание
[01:54:43.360 --> 01:54:45.360]  return
[01:54:49.360 --> 01:54:51.360]  lz, внимание
[01:54:51.360 --> 01:54:53.360]  я пишу
[01:54:53.360 --> 01:54:55.360]  phase равно 2
[01:54:59.360 --> 01:55:01.360]  видите, да?
[01:55:01.360 --> 01:55:03.360]  то есть у нас два варианта
[01:55:03.360 --> 01:55:05.360]  либо мы на первой фазе
[01:55:05.360 --> 01:55:07.360]  и нам есть что копировать из R.west
[01:55:07.360 --> 01:55:09.360]  и мы тогда копируем и выбрасываемся
[01:55:09.360 --> 01:55:11.360]  а это не конец всей функции
[01:55:11.360 --> 01:55:13.360]  это конец только и факт
[01:55:13.360 --> 01:55:15.360]  потому что дальше я пишу
[01:55:15.360 --> 01:55:17.360]  и phase равно 2
[01:55:23.360 --> 01:55:25.360]  а мы не хотим
[01:55:25.360 --> 01:55:27.360]  а мы не хотим lz
[01:55:27.360 --> 01:55:29.360]  ну, я не знаю
[01:55:29.360 --> 01:55:31.360]  мы не хотим ли lz
[01:55:31.360 --> 01:55:33.360]  нет, вот и прикол
[01:55:33.360 --> 01:55:35.360]  что не хотим
[01:55:35.360 --> 01:55:37.360]  нам важно, чтобы мы после этого
[01:55:37.360 --> 01:55:39.360]  нам важно, чтобы мы после этого
[01:55:39.360 --> 01:55:41.360]  и фаза могли переключиться в вторую фазу
[01:55:41.360 --> 01:55:43.360]  и пойти ее делать
[01:55:43.360 --> 01:55:45.360]  все равно делать make recovery step
[01:55:45.360 --> 01:55:47.360]  понимаете, подлянка
[01:55:47.360 --> 01:55:49.360]  мы если тут вот R был пустой
[01:55:49.360 --> 01:55:51.360]  и фаза работала 1
[01:55:51.360 --> 01:55:53.360]  то мы по факту этот шаг не сделаем
[01:55:53.360 --> 01:55:55.360]  потому что шаг для нас это перемещение элементов из стека
[01:55:55.360 --> 01:55:57.360]  я не хочу вот этот лишний шаг
[01:55:57.360 --> 01:55:59.360]  то есть можно, конечно, его сделать
[01:55:59.360 --> 01:56:01.360]  и увеличить тройбан там на 57
[01:56:01.360 --> 01:56:03.360]  но как-то хочется поэкономнее
[01:56:03.360 --> 01:56:05.360]  что ли
[01:56:05.360 --> 01:56:07.360]  итак, фаза 2
[01:56:07.360 --> 01:56:09.360]  ну, в общем-то
[01:56:09.360 --> 01:56:11.360]  практически копипаста
[01:56:11.360 --> 01:56:13.360]  значит, смотрите
[01:56:13.360 --> 01:56:15.360]  дальше происходит следующее
[01:56:15.360 --> 01:56:17.360]  то есть я тут пишу
[01:56:17.360 --> 01:56:19.360]  если не l.empty
[01:56:19.360 --> 01:56:21.360]  если не l.empty
[01:56:21.360 --> 01:56:23.360]  то в чем идея
[01:56:23.360 --> 01:56:25.360]  то, соответственно, да
[01:56:25.360 --> 01:56:27.360]  что-то там l.push
[01:56:27.360 --> 01:56:29.360]  что там
[01:56:29.360 --> 01:56:31.360]  от l.no
[01:56:31.360 --> 01:56:33.360]  от l.no
[01:56:33.360 --> 01:56:35.360]  от l.o
[01:56:35.360 --> 01:56:37.360]  от l.o
[01:56:37.360 --> 01:56:39.360]  от l.o
[01:56:39.360 --> 01:56:41.360]  от l.o
[01:56:41.360 --> 01:56:43.360]  выбросится
[01:56:43.360 --> 01:56:45.360]  ну вот
[01:56:45.360 --> 01:56:47.360]  и л.l.s
[01:56:47.360 --> 01:56:49.360]  фейз равно 3
[01:56:53.360 --> 01:56:55.360]  и наконец
[01:56:55.360 --> 01:56:57.360]  самое интересное
[01:56:57.360 --> 01:56:59.360]  но теперь, в общем-то, фейз равно 3
[01:56:59.360 --> 01:57:01.360]  я напишу примерно то же самое
[01:57:01.360 --> 01:57:06.360]  Так, давайте, так, где бы мне это сделать, так.
[01:57:06.360 --> 01:57:08.360]  А может свопнули, или что?
[01:57:08.360 --> 01:57:10.360]  Пока не свопнули.
[01:57:10.360 --> 01:57:12.360]  Удачи, смотрите.
[01:57:15.360 --> 01:57:18.360]  Так, ой, на самом деле мы еще кое-что забыли.
[01:57:18.360 --> 01:57:20.360]  Да, на самом деле мы еще кое-что забыли.
[01:57:20.360 --> 01:57:23.360]  Так, это если вот у нас, да, делаем recopy step.
[01:57:23.360 --> 01:57:29.360]  Да, по-хорошему, ладно, на будущее тут придется, возможно, вставить, что a recopy вообще живой или нет.
[01:57:30.360 --> 01:57:35.360]  А то могло так случиться, что мы делаем лишние шаги пока нота, а уже не надо.
[01:57:35.360 --> 01:57:37.360]  Ну, это первая точка, их не легко греть.
[01:57:37.360 --> 01:57:39.360]  Хорошо, в...
[01:57:39.360 --> 01:57:40.360]  А разница?
[01:57:40.360 --> 01:57:42.360]  Ну, да везде можно проверить.
[01:57:42.360 --> 01:57:45.360]  Можно просто вот в том вайке добавить еще, что...
[01:57:45.360 --> 01:57:49.360]  Да, можно написать хоть в фейс равно 4, это мы тоже сделаем.
[01:57:49.360 --> 01:57:51.360]  Ну ладно, давайте, идем.
[01:57:51.360 --> 01:57:53.360]  Давайте по фазам, да.
[01:57:53.360 --> 01:57:58.360]  Итак, если равно 3, то что мы делаем?
[01:57:58.360 --> 01:58:06.360]  Так, t элемент, допустим, e, равен s точка top.
[01:58:07.360 --> 01:58:10.360]  И соответственно s точка pop.
[01:58:12.360 --> 01:58:25.360]  Ну и теперь говорим, если после этого оказалось, что col pop, то есть все удаленные элементы, все еще, то есть col pop они все еще в esc,
[01:58:29.360 --> 01:58:33.360]  то тогда этот элемент мы...
[01:58:38.360 --> 01:58:39.360]  А, ну да.
[01:58:39.360 --> 01:58:42.360]  То мы тогда в этот элемент записываем.
[01:58:43.360 --> 01:58:46.360]  В противном случае, естественно, нет.
[01:58:50.360 --> 01:58:52.360]  Вот, понятно, да?
[01:58:52.360 --> 01:58:55.360]  Да, но мы, естественно, поторопились это все писать.
[01:58:55.360 --> 01:58:56.360]  Да, меньше либо равно.
[01:58:56.360 --> 01:59:01.360]  Потому что надо было задать вопрос, а s случайно не пустой там?
[01:59:02.360 --> 01:59:03.360]  Ой.
[01:59:06.360 --> 01:59:07.360]  Да.
[01:59:08.360 --> 01:59:09.360]  А иначе mbs?
[01:59:09.360 --> 01:59:11.360]  Да, поэтому, значит, придется это все сдвинуть.
[01:59:11.360 --> 01:59:14.360]  Если s точка empty, а если col pop?
[01:59:14.360 --> 01:59:16.360]  Да, col pop.
[01:59:16.360 --> 01:59:17.360]  Нет, пока просто смотрите.
[01:59:17.360 --> 01:59:21.360]  Если оказалось, что s точка empty, то, в общем-то, на этом все с вами были подписаны.
[01:59:22.360 --> 01:59:30.360]  То есть, если мы на фазе 3 и s точка empty, то остается только сказать, фейс равно 4.
[01:59:30.360 --> 01:59:32.360]  Да, а, что там нам начало?
[01:59:32.360 --> 01:59:34.360]  А, посвапать l и l4.
[01:59:34.360 --> 01:59:35.360]  Их помните, да?
[01:59:35.360 --> 01:59:36.360]  Почему?
[01:59:36.360 --> 01:59:37.360]  Да.
[01:59:37.360 --> 01:59:44.360]  Мы это будем называть l точка свап от l4, чтобы почеркнуть, что вызывается именно внутренний метод, который умеет отзывать и делиться свапами.
[01:59:44.360 --> 01:59:45.360]  Разве надо?
[01:59:45.360 --> 01:59:46.360]  Ну, как сказать?
[01:59:46.360 --> 01:59:47.360]  Сейчас, сейчас.
[01:59:47.360 --> 01:59:48.360]  А где внутренний метод?
[01:59:48.360 --> 01:59:49.360]  Ну, где внутренний метод?
[01:59:55.360 --> 02:00:01.360]  Ну, я не могу гарантировать, что там по всей исторической структуре общий шамлонный свап перегружен.
[02:00:01.360 --> 02:00:03.360]  А такой свап существует?
[02:00:03.360 --> 02:00:08.360]  Если что, то такой метод, тот, что существует, еще до появления муссиматики.
[02:00:10.360 --> 02:00:17.360]  Там, по-моему, написано на cpp.reference, что свап от двух параметров вызывает первую точку свапа от второго.
[02:00:19.360 --> 02:00:22.360]  Ну, он просто думает или делает именно так?
[02:00:22.360 --> 02:00:23.360]  Нет, как сказать?
[02:00:23.360 --> 02:00:25.360]  Нет, общий, нет, общий свап такой.
[02:00:25.360 --> 02:00:27.360]  Вообще, по-моему, это вот просто такая обертка, по-моему.
[02:00:27.360 --> 02:00:34.360]  Ну, я не знаю, откуда будет метод свап вымта, потому что у этапа, в принципе, метода быть не может.
[02:00:35.360 --> 02:00:40.360]  Ну, скорее всего, определен свап для базовых типов, а потом определен свап.
[02:00:41.360 --> 02:00:47.360]  Ну, я не знаю, я вообще подозреваю, что там по идее свапи должно быть написано там t равно с tdmove от a,
[02:00:47.360 --> 02:00:50.360]  a равно с tdmove от b, b равно с tdmove от t.
[02:00:51.360 --> 02:00:53.360]  Вообще, должно быть так написано.
[02:00:58.360 --> 02:01:01.360]  А, ну и все, и мы тоже здесь с джестом выбрали.
[02:01:01.360 --> 02:01:03.360]  Фейс четвертая, что надежда.
[02:01:04.360 --> 02:01:06.360]  А фейс четвертая, это просто говорить о том...
[02:01:07.360 --> 02:01:09.360]  Ой, реклопер равно false, конечно.
[02:01:10.360 --> 02:01:12.360]  Так, recopy равно false.
[02:01:14.360 --> 02:01:17.360]  Нет, а face равно 4 будет, знаете, что делать?
[02:01:17.360 --> 02:01:20.360]  Оно просто будет говорить, что ни одно из этих крипов не сработало,
[02:01:20.360 --> 02:01:22.360]  поэтому make recopy false не сработало вообще.
[02:01:22.360 --> 02:01:25.360]  То есть это будет означать, что recopy false и ничего делать не надо.
[02:01:25.360 --> 02:01:29.360]  Ну, можно было с этим выпроситься прямо сразу, эту проверку сделать, но вот...
[02:01:29.360 --> 02:01:32.360]  Да, можно тут написать вот эту вставочку.
[02:01:32.360 --> 02:01:38.360]  Если вообще me recopy, то обошли мы отсюда.
[02:01:40.360 --> 02:01:45.360]  А так мы же можем просто выставить файлика, в файле можно просто делать...
[02:01:45.360 --> 02:01:54.360]  Не, но я имею в виду смысл make recopy steps, потому что, знаете, это неправильно делать make recopy steps, по каким причинам?
[02:01:54.360 --> 02:02:00.360]  Потому что, может быть, в будущем вы когда-нибудь здесь захотите использовать make recopy step как независимую функцию.
[02:02:01.360 --> 02:02:08.360]  Вот, и тогда как бы вспоминать, что там проверка recopy проверялась где-то в другом месте, это как бы вот плохо.
[02:02:08.360 --> 02:02:11.360]  То есть как бы это надежнее с точки зрения варианта.
[02:02:14.360 --> 02:02:15.360]  Чего?
[02:02:20.360 --> 02:02:22.360]  Чего меньше либо равно? Где?
[02:02:28.360 --> 02:02:29.360]  Вот здесь?
[02:02:30.360 --> 02:02:31.360]  Вот здесь, да?
[02:02:35.360 --> 02:02:43.360]  Ну, потому что, смотрите, принцип такой, что у нас в S находятся несколько последних еще не перекопированных элементов.
[02:02:44.360 --> 02:02:48.360]  А call-pop это сколько элементов вот спереди должно быть удавено?
[02:02:51.360 --> 02:02:52.360]  Вот.
[02:02:53.360 --> 02:02:54.360]  Или...
[02:02:55.360 --> 02:02:56.360]  Сейчас.
[02:02:56.360 --> 02:02:57.360]  Хотя...
[02:03:00.360 --> 02:03:07.360]  Нет, не совсем, не совсем.
[02:03:08.360 --> 02:03:09.360]  Вот.
[02:03:09.360 --> 02:03:13.360]  Нет, ну просто оказалось, смотрите, вот вы сделали плюс плюс call-pop, да?
[02:03:13.360 --> 02:03:20.360]  Теперь думаем, если выяснилось, что оказывается ты седьмой уже элемент, который надо удалить, и у вас в стеке S находятся семь элементов.
[02:03:21.360 --> 02:03:26.360]  То есть тогда это означает, что как бы этот элемент не надо удалять из зера, потому что он находится здесь.
[02:03:27.360 --> 02:03:28.360]  Вот.
[02:03:28.360 --> 02:03:30.360]  Поэтому при равенстве ничего делать не надо.
[02:03:31.360 --> 02:03:40.360]  Если бы этот элемент стал восьмым уже, а тут семь, то значит тогда этот восьмой элемент в R находится, или какой он там, и его точно надо удалить.
[02:03:41.360 --> 02:03:42.360]  Ну просто R.
[02:03:42.360 --> 02:03:43.360]  Вот так.
[02:03:43.360 --> 02:03:53.360]  Так вот, значит, и так, значит, S, M все разобрали, а если он не пустой, то вот тут мы уже и начинаем писать, вот это переписываю заново.
[02:03:54.360 --> 02:04:19.360]  T элемент E равно S точно pop, S точно pop, и теперь говорим, что если после этого, значит, да, мы достали этот элемент, и теперь надо выяснить, что если оказалось, что call-pop меньше либо равен текущего размера S,
[02:04:20.360 --> 02:04:27.360]  то есть там в S еще находятся все элементы, которые надо удалять, то тогда мы меньше просто, нет, меньше либо равно.
[02:04:28.360 --> 02:04:31.360]  Потому что, видите, потому что у нас только что размер S уменьшился.
[02:04:33.360 --> 02:04:34.360]  Вот.
[02:04:34.360 --> 02:04:36.360]  То есть пишем R.pushedE.
[02:04:38.360 --> 02:04:39.360]  Вот.
[02:04:40.360 --> 02:04:44.360]  И соответственно тоже, так, вот давайте, так вот.
[02:04:46.360 --> 02:04:47.360]  Вот так.
[02:04:48.360 --> 02:04:49.360]  Так.
[02:04:49.360 --> 02:04:50.360]  Ну и все.
[02:04:50.360 --> 02:04:53.360]  И тут, конечно, давайте тоже в любом случае выбросимся на всякий случай.
[02:04:53.360 --> 02:04:55.360]  Почему S, если R, да?
[02:04:56.360 --> 02:04:57.360]  Вот так.
[02:04:57.360 --> 02:04:58.360]  А, ну и все.
[02:05:00.360 --> 02:05:04.360]  То есть как бы, если фейзером будет 4, значит, просто реклопер уже закончился.
[02:05:05.360 --> 02:05:06.360]  Ну как бы, тут вот так.
[02:05:06.360 --> 02:05:10.360]  Можно, знаете, в таких случаях, говорят, что если до этого места программа она вообще не должна находить,
[02:05:11.360 --> 02:05:16.360]  можно написать тоже просто там assert false или там написать какой-нибудь exception, типа алия, я еще тоже.
[02:05:18.360 --> 02:05:21.360]  Мы дошли до сюда, а такого не было, не должно быть.
[02:05:22.360 --> 02:05:23.360]  Вот.
[02:05:25.360 --> 02:05:31.360]  Так что вот таким вот образом мог бы, могла бы выглядеть наша это, мистическая очередь на четырех стеках.
[02:05:32.360 --> 02:05:35.360]  Если бы из стека S мы могли бы доставать этот элемент.
[02:05:37.360 --> 02:05:38.360]  Вот.
[02:05:39.360 --> 02:05:40.360]  То есть, да.
[02:05:41.360 --> 02:05:42.360]  Почему уменьшить call pop?
[02:05:43.360 --> 02:05:44.360]  Call pop мы...
[02:05:45.360 --> 02:05:46.360]  Так, ну...
[02:05:47.360 --> 02:05:49.360]  Не, я просто сейчас...
[02:05:50.360 --> 02:05:53.360]  Не, я просто не очень понимаю, почему мы его должны уменьшать.
[02:05:54.360 --> 02:05:58.360]  Я для тебя родил 10 раз, проговорил о формальном определении, с которого следует, конечно, не доложить.
[02:05:59.360 --> 02:06:01.360]  Значит еще раз, формальное определение call pop.
[02:06:02.360 --> 02:06:11.360]  Как бы, сколько раз был вызван pop в глобальной очереди после объявления или popping?
[02:06:12.360 --> 02:06:13.360]  Все, вот что дает call pop.
[02:06:14.360 --> 02:06:15.360]  Поэтому, конечно, мы его уменьшать не должны.
[02:06:16.360 --> 02:06:18.360]  Ни с каким стеком S он не следует.
[02:06:19.360 --> 02:06:24.360]  Я не знаю, почему так хочется мыслить, что действительно удаление из S уменьшили call pop.
[02:06:24.360 --> 02:06:25.360]  Удаление из S уменьшили call pop.
[02:06:26.360 --> 02:06:29.360]  Я, честно говоря, я сейчас даже просто не понимаю, почему у вас всех так мало.
[02:06:30.360 --> 02:06:31.360]  Почему-то в эту сторону мозг поваляется.
[02:06:32.360 --> 02:06:33.360]  Ну, одно нет.
[02:06:33.360 --> 02:06:34.360]  Давай.
[02:06:35.360 --> 02:06:36.360]  Что?
[02:06:36.360 --> 02:06:37.360]  Петличку включите, пожалуйста.
[02:06:37.360 --> 02:06:38.360]  Чего?
[02:06:41.360 --> 02:06:42.360]  Не обнажать.
[02:06:43.360 --> 02:06:44.360]  Не, по-другим по...
[02:06:44.360 --> 02:06:45.360]  Ой, боже.
[02:06:46.360 --> 02:06:47.360]  Так, я не знаю.
[02:06:47.360 --> 02:06:48.360]  А, только я не слышал было, да?
[02:06:48.360 --> 02:06:49.360]  Да.
[02:06:51.360 --> 02:06:52.360]  А в прошлом году...
[02:06:53.360 --> 02:06:54.360]  Я не слышал.
[02:06:55.360 --> 02:06:56.360]  А, на записи?
[02:06:58.360 --> 02:06:59.360]  Нет.
[02:07:01.360 --> 02:07:02.360]  Ну, я не знаю.
[02:07:03.360 --> 02:07:04.360]  А там она прям принципиально туда...
[02:07:05.360 --> 02:07:08.360]  Нет, можно надеяться, что я говорил достаточно громко, чтобы было слышно хоть как-то, но вот...
[02:07:11.360 --> 02:07:14.360]  Нет, просто с прошлогодними лекциями просто есть такая проблема.
[02:07:14.360 --> 02:07:16.360]  Я их вчера на YouTube не нашел.
[02:07:16.360 --> 02:07:17.360]  Вот.
[02:07:20.360 --> 02:07:21.360]  Вот.
[02:07:21.360 --> 02:07:25.360]  Почему-то там по умолчанию сейчас в лектории ФПМИ находятся только те лекции, которые
[02:07:25.360 --> 02:07:26.360]  записываются в этом году.
[02:07:27.360 --> 02:07:29.360]  Там, собственно, это как бы...
[02:07:29.360 --> 02:07:30.360]  Почему не знаю, но вот...
[02:07:30.360 --> 02:07:32.360]  То есть свою там я только одну...
[02:07:32.360 --> 02:07:35.360]  Свою там я только почему-то какую-то там одну первую когда-то нашел.
[02:07:37.360 --> 02:07:40.360]  А, да-да, ну окей.
[02:07:40.360 --> 02:07:42.360]  Ну, может быть, хорошо, да-да-да.
[02:07:42.360 --> 02:07:44.360]  Ну, тогда их просто искать будет сильно сложнее.
[02:07:45.360 --> 02:07:46.360]  Вот.
[02:07:47.360 --> 02:07:48.360]  Так что вот.
[02:07:48.360 --> 02:07:49.360]  Так, господи, надо же.
[02:07:50.360 --> 02:07:51.360]  Ну, ладно.
[02:07:51.360 --> 02:07:52.360]  Так вот.
[02:07:52.360 --> 02:07:53.360]  Вот так бы это выглядит.
[02:07:53.360 --> 02:07:55.360]  Вот примерно вот такая у нас технология, да.
[02:07:56.360 --> 02:07:58.360]  А мы прикрутим к этому персистентность?
[02:07:58.360 --> 02:07:59.360]  Вот.
[02:08:00.360 --> 02:08:03.360]  Ну, разве что в самом конце это у нее если успеем.
[02:08:04.360 --> 02:08:05.360]  Ну, то есть продолжение...
[02:08:05.360 --> 02:08:08.360]  Нет, то есть персистентность из цикла, что мы это все делаем так, чтобы персистентность
[02:08:08.360 --> 02:08:10.360]  понятно как прикручивается.
[02:08:11.360 --> 02:08:12.360]  Это как бы просто...
[02:08:12.360 --> 02:08:13.360]  То есть это уже мелочь.
[02:08:13.360 --> 02:08:17.360]  То есть даже вот в персистентности, если мы какие-то элементы для...
[02:08:20.360 --> 02:08:24.360]  Для одной версии перебросили, то для другой версии мы тоже должны их перебросить, да?
[02:08:26.360 --> 02:08:27.360]  Ну, да.
[02:08:27.360 --> 02:08:29.360]  Каждой версии будем по чуть-чуть их перебрасывать.
[02:08:29.360 --> 02:08:30.360]  Да.
[02:08:30.360 --> 02:08:31.360]  Нет, ну просто смотрите.
[02:08:31.360 --> 02:08:32.360]  Просто...
[02:08:33.360 --> 02:08:35.360]  Нет, там понимаете как это будет устроено?
[02:08:35.360 --> 02:08:37.360]  Просто отличие персистентной будет такой.
[02:08:37.360 --> 02:08:41.360]  То есть будет такая же структура, только понятно в роли этого стека будет версия
[02:08:41.360 --> 02:08:43.360]  там, версия персистентного стека.
[02:08:44.360 --> 02:08:47.360]  И вместо вот этих воидов, сейчас вот скажу только,
[02:08:47.360 --> 02:08:51.360]  и вместо вот этих воидов будет возвращаться новая версия.
[02:08:52.360 --> 02:08:57.360]  То есть по факту мы там сделаем копию себя, в ней вот проделаем там вот эти вот все операции
[02:08:57.360 --> 02:08:58.360]  и вернем вот это.
[02:08:58.360 --> 02:09:00.360]  Только в этом будет разница.
[02:09:01.360 --> 02:09:02.360]  Вот.
[02:09:02.360 --> 02:09:04.360]  Или, может, скорее будет так.
[02:09:04.360 --> 02:09:05.360]  Можно даже сделать так.
[02:09:05.360 --> 02:09:07.360]  Все эти методы будут объявлены приватными.
[02:09:07.360 --> 02:09:10.360]  Все эти методы будут объявлены приватными.
[02:09:10.360 --> 02:09:12.360]  Там с нижним подчеркиванием.
[02:09:12.360 --> 02:09:16.360]  А по факту всякие пуши, фронты и так далее будут, соответственно, оберточкой.
[02:09:16.360 --> 02:09:18.360]  Что нам дают приватные?
[02:09:19.360 --> 02:09:21.360]  Ну, что в них никто кроме нас не влезет.
[02:09:22.360 --> 02:09:24.360]  Так, а вы еще не знаете, что такое приватные?
[02:09:24.360 --> 02:09:25.360]  Нет.
[02:09:25.360 --> 02:09:28.360]  Господи, вы чем там на C++ занимаетесь уже третью неделю?
[02:09:30.360 --> 02:09:31.360]  Господи, ну ладно.
[02:09:31.360 --> 02:09:33.360]  Оригинально, да, да, да.
[02:09:34.360 --> 02:09:35.360]  А.
[02:09:35.360 --> 02:09:36.360]  Ну хотя да.
[02:09:37.360 --> 02:09:38.360]  Понятно.
[02:09:38.360 --> 02:09:39.360]  Ну ладно.
[02:09:39.360 --> 02:09:40.360]  Ну окей, окей.
[02:09:40.360 --> 02:09:41.360]  Ладно.
[02:09:42.360 --> 02:09:45.360]  Ладно, Илья строит курс как-то по-другому.
[02:09:45.360 --> 02:09:46.360]  Поэтому окей.
[02:09:46.360 --> 02:09:47.360]  Ладно, неважно.
[02:09:47.360 --> 02:09:48.360]  Крывается.
[02:09:48.360 --> 02:09:49.360]  Геркин.
[02:09:51.360 --> 02:09:53.360]  Много раз мы все еще не научились брать, правда?
[02:09:54.360 --> 02:09:55.360]  Правильно.
[02:09:56.360 --> 02:09:58.360]  Нет, абсолютно верно, да.
[02:09:58.360 --> 02:10:01.360]  Поэтому я не случайно обвел это в рамочку, да.
[02:10:02.360 --> 02:10:05.360]  Потому что пока у нас этот код весь базируется на то,
[02:10:05.360 --> 02:10:07.360]  что почему-то со stackMS мы это умеем делать.
[02:10:07.360 --> 02:10:14.360]  Поэтому сейчас мы будем пытаться, значит, эту досадную оплошность поправить.
[02:10:15.360 --> 02:10:19.360]  А почему мы делаем make recap steps 3, а не не больше, не меньше?
[02:10:20.360 --> 02:10:23.360]  Ну сразу же так, больше можно, меньше не-не.
[02:10:24.360 --> 02:10:31.360]  Потому что, как мы уже сказали, нам нужно 3x плюс 1 step на то, чтобы сделать вот эту всю эту перегонку.
[02:10:32.360 --> 02:10:37.360]  И у нас на это есть, значит, наша текущая операция, где вот recopy стартовала.
[02:10:38.360 --> 02:10:41.360]  И еще x следующих операций.
[02:10:42.360 --> 02:10:47.360]  Ну потому что это до того, как там вот этот вот элемент, который вот тут на дне лежал, может понадобиться.
[02:10:48.360 --> 02:10:54.360]  Поэтому мы сказали, что так, у нас по факту вот мы x плюс 1 раз вызываем make recap steps,
[02:10:54.360 --> 02:10:57.360]  поэтому получается тройка, это минимум, которого нам хватит.
[02:10:57.360 --> 02:10:58.360]  Вот.
[02:11:01.360 --> 02:11:03.360]  Да, вот у нас такая проблема возникла.
[02:11:04.360 --> 02:11:06.360]  Как же ее мы будем решать?
[02:11:07.360 --> 02:11:14.360]  Ну, собственно, именно поэтому у нас очередь о 6 stack, а не о 3x.
[02:11:15.360 --> 02:11:17.360]  А как же мы будем решать?
[02:11:18.360 --> 02:11:24.360]  Ну, собственно, именно поэтому у нас очередь о 6 stack, а не о 3x.
[02:11:24.360 --> 02:11:25.360]  А как же мы будем решать?
[02:11:25.360 --> 02:11:29.360]  Ну, собственно, именно потому что у нас очередь о 6 stack, а не о 4x.
[02:11:30.360 --> 02:11:31.360]  Потому что...
[02:11:32.360 --> 02:11:33.360]  Вот, ну к черту.
[02:11:33.360 --> 02:11:35.360]  Вот, 4x, да, да, да.
[02:11:36.360 --> 02:11:37.360]  Знаешь, смотрите.
[02:11:38.360 --> 02:11:39.360]  Акция была хорошо.
[02:11:39.360 --> 02:11:43.360]  Итак, значит, ладно, давайте так, до этого момента все понятно?
[02:11:43.360 --> 02:11:44.360]  Да.
[02:11:44.360 --> 02:11:46.360]  Ну, по модулю того, что мы так и не научились.
[02:11:46.360 --> 02:11:47.360]  Вот сейчас будем учиться.
[02:11:47.360 --> 02:11:48.360]  Не будет.
[02:11:48.360 --> 02:11:51.360]  Но, точнее, будет, но вектор амортизированная структура данных.
[02:11:51.360 --> 02:11:53.360]  А у нас как раз цель избавиться от амортизации.
[02:11:53.360 --> 02:11:57.360]  Так-то мы бы уже на двух stack'ах все там, я думаю, вот в этой полосе все уместилось.
[02:11:59.360 --> 02:12:01.360]  Так что в том тыру...
[02:12:02.360 --> 02:12:04.360]  Да, в том тыру будет и смысл, да.
[02:12:09.360 --> 02:12:10.360]  Нет, так-то...
[02:12:10.360 --> 02:12:12.360]  Ладно, так вот, внимание.
[02:12:13.360 --> 02:12:14.360]  Так вот, теперь новинка.
[02:12:14.360 --> 02:12:18.360]  Значит, внимание, исходную концепцию мы чуть-чуть поменяем.
[02:12:19.360 --> 02:12:27.360]  Мы говорили, что в нормальном режиме у нас элементы кладутся в L и достаются из R.
[02:12:28.360 --> 02:12:31.360]  И мы можем в этом режиме внести амортизацию.
[02:12:31.360 --> 02:12:39.360]  Мы говорили, что в нормальном режиме у нас элементы кладутся в L и достаются из R.
[02:12:40.360 --> 02:12:43.360]  Так вот, ребята, теперь это не так.
[02:12:46.360 --> 02:12:47.360]  Не свисти!
[02:12:49.360 --> 02:12:51.360]  Денег не будет, примета такая.
[02:13:01.360 --> 02:13:02.360]  Вот.
[02:13:02.360 --> 02:13:05.360]  Значит, у нас мы введем новый stack.
[02:13:05.360 --> 02:13:06.360]  R, C.
[02:13:07.360 --> 02:13:09.360]  Ой, точно, а мы же еще...
[02:13:09.360 --> 02:13:10.360]  R, C.
[02:13:10.360 --> 02:13:11.360]  Что это такое?
[02:13:11.360 --> 02:13:12.360]  Так вот.
[02:13:12.360 --> 02:13:15.360]  Так, значит, сейчас я напишу нормальное состояние.
[02:13:16.360 --> 02:13:18.360]  Значит, нормальное состояние.
[02:13:18.360 --> 02:13:19.360]  Это когда?
[02:13:19.360 --> 02:13:21.360]  Ну, по крайней мере, поначалу.
[02:13:21.360 --> 02:13:24.360]  Сейчас мы тоже постепенно решим проблемы, как это называется.
[02:13:25.360 --> 02:13:26.360]  Так что смотрите.
[02:13:27.360 --> 02:13:29.360]  Постепенно решим проблемы.
[02:13:29.360 --> 02:13:30.360]  Смотрите.
[02:13:31.360 --> 02:13:32.360]  Постепенно мы их будем решать так.
[02:13:33.360 --> 02:13:34.360]  Значит, L' пустое.
[02:13:35.360 --> 02:13:36.360]  S пустое.
[02:13:37.360 --> 02:13:41.360]  И в L находятся что-то чуть-чуть элементов.
[02:13:41.360 --> 02:13:45.360]  8, 13, 22, 9.
[02:13:46.360 --> 02:13:49.360]  И в R находятся элементы буквально чуть-чуть побольше.
[02:13:49.360 --> 02:13:50.360]  Очень сильно.
[02:13:51.360 --> 02:13:52.360]  Так.
[02:13:52.360 --> 02:13:58.360]  3, 8, 5, 13, 179, 57, 2.
[02:14:00.360 --> 02:14:01.360]  1, 4.
[02:14:02.360 --> 02:14:03.360]  Нет.
[02:14:04.360 --> 02:14:05.360]  Почему?
[02:14:06.360 --> 02:14:07.360]  R не видно?
[02:14:08.360 --> 02:14:09.360]  Так, ладно, давайте.
[02:14:10.360 --> 02:14:11.360]  R.
[02:14:12.360 --> 02:14:14.360]  И он будет называться R, C.
[02:14:15.360 --> 02:14:17.360]  Вот C теперь даже лучше видно.
[02:14:18.360 --> 02:14:19.360]  Почему?
[02:14:20.360 --> 02:14:22.360]  Потом C от слова копия.
[02:14:22.360 --> 02:14:23.360]  Да, совершенно верно.
[02:14:24.360 --> 02:14:27.360]  В нем будут абсолютно те же элементы, что и в R.
[02:14:28.360 --> 02:14:29.360]  Это логичная идея.
[02:14:32.360 --> 02:14:38.360]  5, 13, 179, 57, 2, 1, 4.
[02:14:39.360 --> 02:14:40.360]  То же самое, да?
[02:14:41.360 --> 02:14:42.360]  Абсолютно.
[02:14:45.360 --> 02:14:47.360]  Значит, теперь магия такая.
[02:14:47.360 --> 02:14:49.360]  То есть идея будет в том, что на всякий случай.
[02:14:50.360 --> 02:14:51.360]  То есть для того, чтобы...
[02:14:52.360 --> 02:14:53.360]  Смотрите, то есть мы храним копию.
[02:14:53.360 --> 02:14:56.360]  То есть пока все нормально, мы будем доставать элемент прямо из двух копий.
[02:14:56.360 --> 02:14:58.360]  То есть отличие будет такое.
[02:14:59.360 --> 02:15:00.360]  То есть в пуше...
[02:15:01.360 --> 02:15:02.360]  Нет, ладно, в пуше это все в порядке.
[02:15:03.360 --> 02:15:07.360]  А вот в функции pop, соответственно...
[02:15:08.360 --> 02:15:11.360]  То есть если или копии нет, то я вот здесь приписываю.
[02:15:12.360 --> 02:15:13.360]  Обратите внимание.
[02:15:14.360 --> 02:15:15.360]  R, C.pop.
[02:15:17.360 --> 02:15:19.360]  Вот видите, я красненьким помечаю, что поменялось.
[02:15:20.360 --> 02:15:21.360]  Вот.
[02:15:23.360 --> 02:15:24.360]  Удобно, да?
[02:15:24.360 --> 02:15:25.360]  Удобно, да?
[02:15:25.360 --> 02:15:26.360]  Видите, да?
[02:15:27.360 --> 02:15:28.360]  Видите?
[02:15:30.360 --> 02:15:31.360]  Чего-чего?
[02:15:40.360 --> 02:15:41.360]  А вот смотрите, не совсем.
[02:15:42.360 --> 02:15:44.360]  Потому что отличие начинается в режиме перекопирования.
[02:15:46.360 --> 02:15:47.360]  Потому что фишка в том, что...
[02:15:48.360 --> 02:15:49.360]  Смотрите, мы сейчас будем заниматься следующим.
[02:15:49.360 --> 02:15:55.360]  Да, мы будем перекладывать элементы из R, значит вот тоже будем перекладывать.
[02:15:56.360 --> 02:16:02.360]  Но параллельно у нас будет еще и актуальная версия стека в R, C.
[02:16:03.360 --> 02:16:05.360]  Ну не актуальная, а вот типа то, что там осталось.
[02:16:06.360 --> 02:16:08.360]  Это нужно нам для того, чтобы мы делали адекватный pop.
[02:16:11.360 --> 02:16:12.360]  Адекватный...
[02:16:13.360 --> 02:16:14.360]  Адекватный фронт.
[02:16:15.360 --> 02:16:16.360]  Вот.
[02:16:17.360 --> 02:16:18.360]  То есть обратите внимание.
[02:16:19.360 --> 02:16:20.360]  Вот.
[02:16:21.360 --> 02:16:22.360]  Ну вот давайте попробуем подумать, как это можно сделать.
[02:16:23.360 --> 02:16:27.360]  Ну да, то есть смотрите, то есть pop в нормальном режиме, да, то есть все тривиально.
[02:16:28.360 --> 02:16:29.360]  Но теперь...
[02:16:30.360 --> 02:16:32.360]  Ну что тогда теперь должно поменяться?
[02:16:33.360 --> 02:16:34.360]  Ну должно поменяться, наверное...
[02:16:35.360 --> 02:16:36.360]  Ну вот, ну в передах.
[02:16:37.360 --> 02:16:39.360]  Ну кажется, что в перекопировании что-то может поменяться.
[02:16:40.360 --> 02:16:41.360]  Но тут теперь задумаемся вот о чем.
[02:16:42.360 --> 02:16:46.360]  Да, вот на уровне идеи мы себе представим, что мы занимаемся перекопированием,
[02:16:46.360 --> 02:16:50.360]  вот тут созданием, вот из, там, R, и R перекидывается в S,
[02:16:51.360 --> 02:16:55.360]  значит, ну там, R перекидывается в S, значит, L перекидывается в R,
[02:16:56.360 --> 02:17:00.360]  S перекидывается в R, и параллельно мы там лишние элементы в R не кладем, да.
[02:17:02.360 --> 02:17:06.360]  Но при этом у нас пока происходит рекопия, вот эта R, C остается на посту,
[02:17:07.360 --> 02:17:13.360]  с R, C мы ничего не делаем, и как бы фронты и, соответственно, pop мы, соответственно, делаем актуально с R, C.
[02:17:13.360 --> 02:17:15.360]  То есть примерно, смотрите, что поменяется?
[02:17:17.360 --> 02:17:21.360]  То есть, ну, соответственно, ну здесь, понятно, ничего не поменяется,
[02:17:22.360 --> 02:17:27.360]  значит, но, значит, во фронте теперь, то есть это даст нам возможность вместо,
[02:17:28.360 --> 02:17:35.360]  ой, не то, не тем зачеркиваю, вместо вот этого вот, я теперь пишу,
[02:17:35.360 --> 02:17:45.360]  Реатурн, R, C, точка, фронт. Вот.
[02:17:46.360 --> 02:17:47.360]  Вот.
[02:18:00.360 --> 02:18:06.360]  Вот. Ну, правда, да, придется, да. Ну, правда, возможно, да, придется еще допиливать, конечно, но сейчас будем смотреть.
[02:18:09.360 --> 02:18:10.360]  Что-что?
[02:18:10.360 --> 02:18:14.360]  У нас даже, когда есть рекопия, придется R, C, D, pop делать.
[02:18:16.360 --> 02:18:19.360]  Чего? Где рекопия, что рекопия?
[02:18:20.360 --> 02:18:24.360]  В поп функции. Зелит тоже, когда нет рекопии, тогда R, C, D, pop.
[02:18:25.360 --> 02:18:28.360]  Сейчас, ну мы, нет, естественно, R, C, нет, зачем?
[02:18:29.360 --> 02:18:33.360]  Пока нет рекопии, как бы R, top и R, C, top это одно и то же, так что без разницы.
[02:18:33.360 --> 02:18:42.360]  Тут в том-то и фишка. То есть, еще раз говорю, что фишка заключает в том, что, да, то есть R, C остается на посту,
[02:18:43.360 --> 02:18:45.360]  а с R мы пока вот развлекаемся.
[02:18:50.360 --> 02:18:52.360]  Вот в чем тут, собственно, теперь фишка.
[02:18:53.360 --> 02:18:58.360]  Ну, если мы делали pop, то тогда, когда мы сделаем front, то нам нужно R, C, D, top, C.
[02:18:59.360 --> 02:19:00.360]  Чего? Top.
[02:19:00.360 --> 02:19:03.360]  Проблема, что после рекопии R, C уже не будет совпадать с R.
[02:19:04.360 --> 02:19:06.360]  Да, вот, да, действительно. Видите, основная проблема, да.
[02:19:07.360 --> 02:19:10.360]  То есть, пока мы, конечно, живем, и на время рекопии нам этого хватит.
[02:19:11.360 --> 02:19:12.360]  А потом что делать?
[02:19:13.360 --> 02:19:18.360]  Но, но, действительно, в азинке это только действительно маленькая проблема, что в самом конце у нас, конечно,
[02:19:19.360 --> 02:19:24.360]  состояние этой штуки вообще, то есть, состояние R, состояние R, C совпадать не будут.
[02:19:25.360 --> 02:19:30.360]  Поэтому, с этой целью, вот и получается шестой стег.
[02:19:31.360 --> 02:19:32.360]  R, C штрих.
[02:19:42.360 --> 02:19:43.360]  Чего?
[02:19:46.360 --> 02:19:47.360]  Так, чего?
[02:19:48.360 --> 02:19:49.360]  Вопрос.
[02:19:49.360 --> 02:19:57.360]  Ну, смотрите, дело в том, что когда мы закончим режим перекопирования, у нас должен будет соблюдаться инвариант,
[02:19:58.360 --> 02:20:01.360]  что в R и R, C должны быть одинаковые состояния стека.
[02:20:02.360 --> 02:20:04.360]  А в процессе рекопии мы это явно нарушали.
[02:20:06.360 --> 02:20:07.360]  Вот.
[02:20:08.360 --> 02:20:11.360]  Хотя, хотя, погодите, а насколько явно мы его нарушали?
[02:20:13.360 --> 02:20:16.360]  Ведь обратите внимание на маленькую приятную вещь.
[02:20:17.360 --> 02:20:18.360]  А, нет.
[02:20:20.360 --> 02:20:22.360]  Когда мы в R, C вообще делаем пуши?
[02:20:23.360 --> 02:20:25.360]  Ага, а вот мы еще рекопии, потому что не модифицировали.
[02:20:26.360 --> 02:20:35.360]  Потому что по факту, вот в этом месте, а теперь, вот по хорошему, здесь мы должны вот в это R, C как раз пуши и делать.
[02:20:38.360 --> 02:20:40.360]  То есть, мы достаем из R, а потом как бы и да.
[02:20:40.360 --> 02:20:49.360]  Но, правда, здесь проблема будет, что пуши мы будем делать здесь, значит, не только в R, но и одновременно в R, C, но, внимание, штрих.
[02:20:50.360 --> 02:20:51.360]  Кажется, во втором шаге тоже.
[02:20:52.360 --> 02:20:53.360]  Чего?
[02:20:53.360 --> 02:20:54.360]  Кажется, во втором шаге тоже.
[02:20:55.360 --> 02:20:56.360]  Да.
[02:20:57.360 --> 02:20:58.360]  Во втором шаге мы тоже будем делать.
[02:20:59.360 --> 02:21:00.360]  Да, кстати, да, да, да.
[02:21:01.360 --> 02:21:02.360]  Вот, R, C, штрих.
[02:21:03.360 --> 02:21:04.360]  Да.
[02:21:05.360 --> 02:21:08.360]  Он неправильно работает, потому что он берет в ремере копии, он берет у нас в R, C топ.
[02:21:08.360 --> 02:21:13.360]  Нет, он-то берет как раз правильно, потому что во время рекопии R, C это типа дежурная копия.
[02:21:14.360 --> 02:21:16.360]  R, C поп надо сделать еще, когда мы поп делаем.
[02:21:17.360 --> 02:21:18.360]  И мы делаем.
[02:21:19.360 --> 02:21:20.360]  Где?
[02:21:21.360 --> 02:21:22.360]  Сейчас, когда не рекопит, да.
[02:21:23.360 --> 02:21:24.360]  А где рекопит?
[02:21:25.360 --> 02:21:26.360]  Так, сейчас.
[02:21:27.360 --> 02:21:28.360]  Ну, давайте смотреть, к чему нас это будет приводить.
[02:21:29.360 --> 02:21:30.360]  Когда мы делаем рекопи?
[02:21:31.360 --> 02:21:32.360]  Так, сейчас.
[02:21:33.360 --> 02:21:34.360]  А, ну да.
[02:21:35.360 --> 02:21:36.360]  Да, да, да.
[02:21:36.360 --> 02:21:37.360]  Нет, нет, здесь надо.
[02:21:38.360 --> 02:21:39.360]  Потому что...
[02:21:40.360 --> 02:21:41.360]  А, ну всегда надо делать, да.
[02:21:42.360 --> 02:21:43.360]  Да, да, да, да, да.
[02:21:44.360 --> 02:21:46.360]  То есть, да, это спасибо, это обязательно.
[02:21:47.360 --> 02:21:49.360]  R, C, точка, поп, обязательно, да.
[02:21:50.360 --> 02:21:51.360]  Вот.
[02:21:52.360 --> 02:21:53.360]  Вот.
[02:21:54.360 --> 02:21:55.360]  Значится.
[02:21:56.360 --> 02:22:01.360]  Так, хорошо, с поп-ом вроде разобрались.
[02:22:02.360 --> 02:22:03.360]  Что дальше?
[02:22:03.360 --> 02:22:04.360]  Что дальше?
[02:22:05.360 --> 02:22:08.360]  Но надо еще думать, как эти степы делать.
[02:22:09.360 --> 02:22:20.360]  Ну, давайте пишем, что на второй фазе, значит, мы торжественно пишем, что R, C штрих, точка, push, от L, точка, поп, обязательно.
[02:22:23.360 --> 02:22:24.360]  Вот сюда.
[02:22:25.360 --> 02:22:26.360]  Перед L, точка, поп, обязательно, да.
[02:22:27.360 --> 02:22:28.360]  Видите, что еще надо делать.
[02:22:29.360 --> 02:22:32.360]  Так, и по-моему еще на какой-то фазе это не помешало бы сделать, да.
[02:22:34.360 --> 02:22:36.360]  Так, ну смотрите, что еще надо сделать теперь.
[02:22:37.360 --> 02:22:39.360]  Надо теперь добавить в R, C, штрих.
[02:22:40.360 --> 02:22:41.360]  Так, вот где тут добавляем?
[02:22:42.360 --> 02:22:45.360]  А, вот этот элемент E, да, значит, col pop, S, точка, size.
[02:22:46.360 --> 02:22:48.360]  А, надо его добавить в R.
[02:22:49.360 --> 02:22:55.360]  А, ну здесь тоже, соответственно, если мы его добавляем в R, то мы его одновременно добавляем и в R, C, штрих.
[02:22:59.360 --> 02:23:00.360]  Так.
[02:23:01.360 --> 02:23:05.360]  То есть мы прям следим, что, вот. Чего?
[02:23:10.360 --> 02:23:11.360]  Что повторить?
[02:23:18.360 --> 02:23:29.360]  Нет, ну я сказал, что на второй и третьей фазе, да, что мы поддерживаем, мы стараемся поддерживать, когда мы из S начинаем копировать в R, мы поддерживаем, что мы это все делаем не только в R, но и в R, C, штрих.
[02:23:30.360 --> 02:23:32.360]  Для того, чтобы у нас R и R, C, штрих были одинаковы.
[02:23:33.360 --> 02:23:35.360]  А делаем мы это еще.
[02:23:36.360 --> 02:23:41.360]  Да, еще, кстати, важно, когда у нас заканчивается вот эта рекопия, у нас еще есть очень важный момент.
[02:23:42.360 --> 02:23:47.360]  Да, вот в этом месте я вставляю еще, что R, C мы свапаем с R, C, штрих.
[02:23:49.360 --> 02:23:50.360]  Какой?
[02:23:53.360 --> 02:23:54.360]  Так.
[02:23:55.360 --> 02:23:58.360]  Ну и тогда, ну тогда, ладно, смотрите, пока для просты скажем.
[02:23:59.360 --> 02:24:02.360]  Так, ну пока давайте убедимся, что это единственная проблема.
[02:24:03.360 --> 02:24:08.360]  То есть давайте я сейчас скажу, после этого я скажу R, C, штрих.clear.
[02:24:13.360 --> 02:24:14.360]  Вот.
[02:24:15.360 --> 02:24:19.360]  Сейчас, а зачем?
[02:24:20.360 --> 02:24:21.360]  Это фаза третья, да, и мы...
[02:24:22.360 --> 02:24:31.360]  Да, ну, потому что, ну, смотрите, нам просто потом, потом когда-нибудь очень сильно захочется, чтобы в тот момент, когда начнется следующая рекопия, R, C, штрих было пустым.
[02:24:32.360 --> 02:24:33.360]  Ну, мы же не можем сделать, это же...
[02:24:34.360 --> 02:24:36.360]  Так, ну, тут вообще какая-то вопрос отчетним.
[02:24:37.360 --> 02:24:38.360]  Ну, теоретически можем.
[02:24:39.360 --> 02:24:45.360]  Потому что, ну, особенно если пишем персистентный стек, потому что создать новую версию пустого стека, это заодно от единицы по-любому делается.
[02:24:52.360 --> 02:24:54.360]  Да, так, так, да, да, да, да, да.
[02:24:55.360 --> 02:24:56.360]  Но на самом деле, смотрите, так.
[02:24:57.360 --> 02:25:01.360]  Ну, по крайней мере, да, ну, давайте так, я сейчас тоже обведем в рамочку, да, то есть давайте, что?
[02:25:02.360 --> 02:25:03.360]  Да, у нас теперь новая проблема.
[02:25:04.360 --> 02:25:06.360]  Но это уже более такая проблема.
[02:25:10.360 --> 02:25:13.360]  Ну, чтобы, да, чтобы утищей памяти не было лишним.
[02:25:25.360 --> 02:25:27.360]  Да, но проблема просто в том, что нам не нравится.
[02:25:28.360 --> 02:25:32.360]  Стек, он очищает, стек размера N будет очищаться за O от N все-таки.
[02:25:33.360 --> 02:25:34.360]  Стоп, мы его не будем очищать.
[02:25:35.360 --> 02:25:36.360]  А если мы его не будем, ну, я говорю, тогда утища памяти.
[02:25:37.360 --> 02:25:38.360]  Да, нам это...
[02:25:39.360 --> 02:25:45.360]  Ну, то есть там во многих моделях, конечно, алгоритмов нам по барабану, но по факту вообще мы следим за тем, чтобы лишнюю память не использовать.
[02:25:46.360 --> 02:25:50.360]  Стоп, а у нас же по-любому мы с ним ничего не сможем сделать, потому что его будут использовать другие версии.
[02:25:51.360 --> 02:25:52.360]  Не-не-не, ну...
[02:25:53.360 --> 02:25:54.360]  А, но да.
[02:25:54.360 --> 02:25:56.360]  Ну, просто скажем, что указатели нулевые становятся.
[02:25:57.360 --> 02:26:00.360]  Ну вот, ну да. Ну, да, в персистентности, да, в персистентности, да, можно на это забить.
[02:26:01.360 --> 02:26:02.360]  Нет, там мы по-другому ничего не сможем сделать.
[02:26:03.360 --> 02:26:04.360]  Нет, ну...
[02:26:05.360 --> 02:26:08.360]  Нет, ну в принципе сможем. Нет, на самом деле можно и это допилить так, чтобы проблем не было.
[02:26:09.360 --> 02:26:10.360]  А давайте попробуем.
[02:26:11.360 --> 02:26:12.360]  Так, правда.
[02:26:13.360 --> 02:26:14.360]  Ну, в случае персистентности...
[02:26:15.360 --> 02:26:16.360]  Сейчас.
[02:26:17.360 --> 02:26:19.360]  Не важно ли, что можно реализовать стек как вектор, короче...
[02:26:19.360 --> 02:26:20.360]  Вектор вектор, короче, как...
[02:26:21.360 --> 02:26:23.360]  Вектор амортизированный, поэтому у нас запреты, такие штуктуры.
[02:26:24.360 --> 02:26:28.360]  В случае персистентности,実� stronglar, там, в случае не персистентности, почему бы просто не удалять, когда оно амортизировано?
[02:26:29.360 --> 02:26:30.360]  Нет, в случае не персистентности у нас остается...
[02:26:31.360 --> 02:26:34.360]  В случае не персистентности у нас так становятся две цели.
[02:26:35.360 --> 02:26:37.360]  Первая – чтобы все было честно завал от 1.
[02:26:38.360 --> 02:26:39.360]  И вторая – чтобы лишняя память при этом использовалась нея.
[02:26:40.360 --> 02:26:41.360]  Можно обмuxz reject?
[02:26:42.360 --> 02:26:43.360]  Или по... Или, по крайней мере, мы стремились к этому.
[02:26:43.360 --> 02:26:49.360]  Но без персистентности мы тогда можем все-таки опять закашировать, что мы должны быть удалять каждую...
[02:26:49.360 --> 02:27:01.360]  Да, на самом деле пробегаться по всем элементам не надо, но я так, я уже не буду дописывать, но суть, на самом деле, в том, что в реальности можно объявить, на самом деле, четвертую фазу.
[02:27:01.360 --> 02:27:07.360]  И четвертая фаза будет говорить, что уже все в порядке, просто в экс-штрихе еще лишние элементы находятся.
[02:27:07.360 --> 02:27:11.360]  Но там надо понять, почему оно успеет удалиться до того момента, когда нашнется новый...
[02:27:11.360 --> 02:27:12.360]  Похоже, мы больше элементов...
[02:27:12.360 --> 02:27:16.360]  Нет, на самом деле, нет, я утверждаю, нет, парадокс, на самом деле, знаете, в чем?
[02:27:16.360 --> 02:27:18.360]  Парадокс, на самом деле, в следующем.
[02:27:18.360 --> 02:27:23.360]  Смотрите, давайте я сейчас внимательно проанализирую, потому что решение проблемы тут может быть неожиданно просто.
[02:27:23.360 --> 02:27:36.360]  Давайте себе представим, что после вот этого вот, вот после того, что вот это произошло, у нас оказалось, что в rc-штрихе оказалось, допустим, к элементам.
[02:27:36.360 --> 02:27:44.360]  Тогда, смотрите, заметим, что ровно, то есть означает это на самом деле следующее.
[02:27:44.360 --> 02:27:48.360]  Ну потому что, потому что я утверждаю, происходит следующее.
[02:27:48.360 --> 02:27:56.360]  Что на самом деле r отличается от rc-штрихи сейчас только тем, что помимо, что там находятся ровно вот эти k элементов.
[02:27:56.360 --> 02:28:01.360]  И перед этим еще x плюс один элемент, который находились раньше.
[02:28:02.360 --> 02:28:06.360]  Сейчас, а rc-штрих не отличается, нет, разве?
[02:28:06.360 --> 02:28:07.360]  Чего еще раз?
[02:28:07.360 --> 02:28:09.360]  Ага, после того, как мы свапнули, да?
[02:28:09.360 --> 02:28:15.360]  Ну после, да, вот прямо сейчас, вот после того, как мы свапнули, да?
[02:28:15.360 --> 02:28:18.360]  В rc-штрихе пусть находится k элемент.
[02:28:18.360 --> 02:28:24.360]  Я утверждаю, что тогда в r находится x плюс один плюс k элемент.
[02:28:24.360 --> 02:28:25.360]  Да.
[02:28:25.360 --> 02:28:26.360]  Логично, да?
[02:28:26.360 --> 02:28:27.360]  Логично.
[02:28:27.360 --> 02:28:30.360]  Так, ну теперь давайте дубать.
[02:28:30.360 --> 02:28:34.360]  Почему, ну вот, то есть смотрите, что произошло в этот момент?
[02:28:34.360 --> 02:28:37.360]  В этот момент произошла следующая ситуация.
[02:28:37.360 --> 02:28:41.360]  То есть в этот момент прошло x плюс один операции push и pop, правда?
[02:28:41.360 --> 02:28:45.360]  Popов, видимо, было сколько вот этих?
[02:28:45.360 --> 02:28:47.360]  К чему call pop равен сейчас?
[02:28:47.360 --> 02:28:48.360]  Вот давайте так.
[02:28:48.360 --> 02:28:50.360]  Call pop в этот момент равен к чему?
[02:28:50.360 --> 02:28:59.360]  Ну получается, да, вот сейчас x минус k.
[02:28:59.360 --> 02:29:03.360]  Ну да, x минус k, действительно.
[02:29:03.360 --> 02:29:10.360]  Вот, да, x, ну вот, то есть и получилось действительно x минус k.
[02:29:10.360 --> 02:29:18.360]  Значит, после включения копий, строго после, получается, у нас было k push, правда?
[02:29:18.360 --> 02:29:19.360]  Да.
[02:29:19.360 --> 02:29:22.360]  Так, ну хотя нет, так тут.
[02:29:22.360 --> 02:29:23.360]  Теперь тогда смотрите.
[02:29:23.360 --> 02:29:31.360]  Тогда раз у нас было k push, это означает, что прямо сейчас у нас в стеке l находится
[02:29:31.360 --> 02:29:34.360]  k элементов.
[02:29:34.360 --> 02:29:38.360]  Ну и здесь x плюс один плюс k элементов здесь.
[02:29:38.360 --> 02:29:40.360]  Сейчас почему в l k элементов?
[02:29:40.360 --> 02:29:46.360]  Потому что вы вычислили, что после recopy было ровно k push, а мы, как бы, a l там, когда
[02:29:46.360 --> 02:29:48.360]  он был еще l 4, он заполнялся с нуля.
[02:29:48.360 --> 02:29:50.360]  Вроде x минус k push.
[02:29:50.360 --> 02:29:54.360]  Нет, popов было x минус k.
[02:29:54.360 --> 02:29:55.360]  Да.
[02:29:55.360 --> 02:29:56.360]  Почему?
[02:29:56.360 --> 02:29:58.360]  Потому что есть на копе.
[02:29:58.360 --> 02:30:02.360]  Да, ну да, фронты мы так аккуратно реализовали, что мы их не считаем.
[02:30:02.360 --> 02:30:04.360]  А было бы еще меньше, так еще лучше.
[02:30:04.360 --> 02:30:05.360]  Почему лучше?
[02:30:05.360 --> 02:30:07.360]  А потому что вот что, смотрите.
[02:30:07.360 --> 02:30:11.360]  Получается в эре на x плюс один элемент больше.
[02:30:11.360 --> 02:30:19.360]  То есть это означает, что следующие и как минимум x плюс один шагов recopy не включится.
[02:30:19.360 --> 02:30:21.360]  А, значит, можно просто спокойно...
[02:30:21.360 --> 02:30:22.360]  Да.
[02:30:22.360 --> 02:30:27.360]  И x плюс один, обратите внимание, что самое главное, это больше, чем k.
[02:30:27.360 --> 02:30:29.360]  Даже строго больше.
[02:30:29.360 --> 02:30:36.360]  Поэтому все, что на самом деле надо сделать, это просто вот если, ну вот, то есть просто
[02:30:36.360 --> 02:30:43.360]  сказать, если не recopy, то можно что в push, что в pop так жественно написать простую вещь.
[02:30:43.360 --> 02:30:54.360]  Написать, если не rc'.empty, то rc'.pop.
[02:30:54.360 --> 02:31:01.360]  Прям в самом начале, вот если не recopy, то прямо можно даже перед l написать.
[02:31:01.360 --> 02:31:05.360]  И функции pop мы обязательно это пишем, да.
[02:31:05.360 --> 02:31:07.360]  Вот-вот-вот-вот, да.
[02:31:07.360 --> 02:31:10.360]  Кстати, это само персистенция, это только хуже нам сделать.
[02:31:10.360 --> 02:31:11.360]  Да, нам лучше просто сделать.
[02:31:11.360 --> 02:31:14.360]  Нет, персистенция в принципе пока что нельзя такое сделать.
[02:31:14.360 --> 02:31:16.360]  Такое можно сделать.
[02:31:16.360 --> 02:31:18.360]  Нет, это нужно чтобы оно вышло.
[02:31:18.360 --> 02:31:20.360]  Мы все уже сделали персистенцию.
[02:31:20.360 --> 02:31:21.360]  Вот.
[02:31:21.360 --> 02:31:22.360]  Ну вот так.
[02:31:22.360 --> 02:31:25.360]  То есть тогда, в этом смысле, тогда как бы вот...
[02:31:25.360 --> 02:31:26.360]  Персистенции можно сделать.
[02:31:26.360 --> 02:31:28.360]  Тогда никаких clear'ов уже нет.
[02:31:28.360 --> 02:31:29.360]  То есть мы просто...
[02:31:29.360 --> 02:31:30.360]  Ну вот.
[02:31:30.360 --> 02:31:34.360]  То есть на самом деле, вот простой хак, и в общем-то поздравляю, мы победили.
[02:31:34.360 --> 02:31:48.720]  это это что значит еще раз пусть давайте значит и так фейс равно 3 давайте
[02:31:48.720 --> 02:31:54.120]  смотреть пусть у нас произошло так что вот наконец мы объявили что конец
[02:31:54.120 --> 02:32:01.360]  рекопи но при этом вот мы тут посвапали rc с rc штрих напоминаю да но
[02:32:01.360 --> 02:32:06.840]  при этом в rc штрих после этого оказалось к элементов что это значит это означает
[02:32:06.840 --> 02:32:14.080]  что когда было rc у нас изначально было x элементов да осталось к но после реку
[02:32:14.080 --> 02:32:23.080]  вызовы рекопи после вызовы рекопи мы как бы каждый поп честно из rc делали
[02:32:23.080 --> 02:32:32.040]  значит всего попов было x минус к ну как следствие пушей было к потому что
[02:32:32.040 --> 02:32:38.040]  фронт мы за операцию не считаем как видите но с точки зрения марктизации то
[02:32:38.040 --> 02:32:44.720]  есть пушей было к но теперь нет попов было x минус к потому что к это
[02:32:44.720 --> 02:32:51.960]  количество элементов которые выжили а теперь ну как бы у нас после этого ну
[02:32:51.960 --> 02:32:57.840]  когда ну как вы смотрите вот кстати да еще и к чему нас то есть к тому моменту
[02:32:57.840 --> 02:33:03.880]  когда у нас рекопи закончилась да у нас уже произошло
[02:33:03.880 --> 02:33:15.080]  значит произошло не менее чем x операции пуши поп правда вот то есть это но вот
[02:33:15.080 --> 02:33:19.920]  вот это вот соответственно произошло кстати в этом смысле сейчас становится
[02:33:19.920 --> 02:33:25.920]  хорошо почему у нас тут именно три они 57 вот и тогда происходит следующее что
[02:33:25.920 --> 02:33:30.320]  раз прошло но вот что раз прошло допустим x операции скорее всего ровно x
[02:33:30.320 --> 02:33:35.160]  потому что мы нам нужно сделать ровно 3 x плюс 1 операции именно через x
[02:33:35.160 --> 02:33:41.760]  операции это будет достигнуто вот соответственно поэтому получается что
[02:33:41.760 --> 02:33:48.240]  именно попов x минус к а пушей соответственно к но тогда это означает
[02:33:49.080 --> 02:33:57.200]  но теперь смотрим куда девались эти пуши раз у нас было к пушей вот ну вот вообще
[02:33:57.200 --> 02:34:15.520]  не понял вопроса что чего чего чего так ну как на фронт а ну да функции фронта
[02:34:15.520 --> 02:34:21.160]  когда мы специально так реализовали что ничего не делаем ну могли бы может это
[02:34:21.160 --> 02:34:25.920]  там даже ускорила бы амортизацию но в данном случае тогда как бы но в данном
[02:34:25.920 --> 02:34:30.320]  случае это нарушает степенность то есть посмотрите если никуда не торопиться то
[02:34:30.320 --> 02:34:35.880]  как бы у вас там получится что потом там следующая операция будет еще через долго
[02:34:35.880 --> 02:34:40.120]  поэтому вот еще поправить поэтому лучше вам вот так поправить хотя в общем-то это
[02:34:40.120 --> 02:34:45.680]  и неважно особо скорее всего наверно если вы 3 замените на 4 все равно нет хотя нет
[02:34:45.680 --> 02:34:52.520]  если 3 замените на 4 будет плохо но там но потому что это быстрее произойдет вот здесь мы сейчас
[02:34:52.520 --> 02:35:00.520]  жестко пользуемся тем что у нас как бы до конца рекопи произошло ровно их шагов то есть рекопи
[02:35:00.520 --> 02:35:08.480]  будет снята ровно через их шагов мы этим жестко пользуемся вот когда утверждаем что у нас в стеке
[02:35:08.480 --> 02:35:16.840]  р икс плюс один плюс к элемент а впрочем нет мы этим не здесь более неважно да в общем да да да да да
[02:35:16.840 --> 02:35:21.640]  все да мы этим пользуемся тем что тогда икс плюс один откуда взялся это вот эти вот стекл просто
[02:35:21.640 --> 02:35:26.680]  у нас цель была перекопировать перекопировали икс плюс один а к это те кто вот с хвоста еще остались
[02:35:26.680 --> 02:35:34.080]  да да да да икс не причем да чушь наговорил окей вот такая красота получается что теперь значит
[02:35:34.080 --> 02:35:42.720]  то есть это означает что после окончания этого рекопи получается что только через там не менее
[02:35:42.720 --> 02:35:51.160]  чем икс плюс один операции точнее более рекопи будет вызвано в следующий раз но при этом к обратите
[02:35:51.160 --> 02:35:57.920]  внимание оно не больше икса поэтому получается мы можем просто никуда не торопясь когда нет
[02:35:57.920 --> 02:36:02.960]  рекопии мы знаем что то есть теперь у нас инвариант рекопии то есть теперь инвариант режима
[02:36:02.960 --> 02:36:09.320]  перекопирования говорит так все стэки то есть как бы рс равны л значит заход л штрих с пусты а в
[02:36:09.320 --> 02:36:19.400]  рс штрих возможно остался мусор но там гарантируется что там скажем но там как гарантируется что
[02:36:19.400 --> 02:36:29.560]  размер этого мусора не превосходит размера там размеров стэков r минус l и он же память не
[02:36:29.560 --> 02:36:38.840]  отчаяет отчаяет драсти нет там же capacity остается какая capacity в стэке а вектор мы
[02:36:38.840 --> 02:36:48.000]  запрещаем напоминаю у стэка никаких capacity по умолчанию нет это смотря на нет смотря можно
[02:36:48.000 --> 02:36:53.760]  отдельно думать на чем выразить если на векторе туда если вы выразите нормально на указателях то
[02:36:53.760 --> 02:37:01.160]  никого capacity у него нет но вот поэтому тут в классическом стэке считается шинка амортизации
[02:37:01.160 --> 02:37:12.680]  чего мы не можем примут идею то что что когда у нас нет рекопитом мы чистим эти ноды он может
[02:37:12.680 --> 02:37:18.480]  являться для кого-то рц для кого-то просто рц штрих не вообще там а какая разница персистент
[02:37:18.480 --> 02:37:24.520]  персистент а в стэке каждый топ и поп это извините замена версия тут везде должен писать вот
[02:37:24.520 --> 02:37:31.560]  вместо s точка пуши должны писать там f равно s точка пуши условно мы не сумеем никак отчищать
[02:37:31.560 --> 02:37:39.440]  рц штрих но очистка это мы в этой мы создаем новое но там да вариант во-первых можно так не во-первых
[02:37:39.440 --> 02:37:43.920]  можно делать ровно то что написано это во-первых а во-вторых ну пожалуйста да в персистентной
[02:37:43.920 --> 02:37:49.040]  версии и да проще всего дописать что рц штрих это новая пустая версия все но по-другому же
[02:37:49.640 --> 02:37:59.160]  почему ну вот вот мы описали как можно по-другому почему у нас есть так рц штрих ну и что допустим
[02:37:59.160 --> 02:38:04.280]  у нас там есть какие-то ноды ну если что вот для каких-то версий эти ноды будут вполне реальны
[02:38:04.280 --> 02:38:14.360]  да но когда ты делаешь поп ты ничего не удаляешь да ты создаешь новую версию которая да ну да
[02:38:14.360 --> 02:38:21.120]  если чтобы сделать как заключается по памяти персистент с ним и никак не сумеем сэкономить
[02:38:21.120 --> 02:38:26.120]  персистент но почему нет это уже просто это уже забыли нет это уже забота другой структуры
[02:38:26.120 --> 02:38:34.760]  данных это забота структуры данных персистентный стек то есть это то есть она там то есть дальше
[02:38:34.760 --> 02:38:41.140]  уже персистентный секс там там будет себе там гарбыш коллектор какой-то включать вот персистентный
[02:38:41.140 --> 02:38:51.820]  стек соответственно и все нормально будет так что не паникуйте вот ну да но я говорю там уже это
[02:38:51.820 --> 02:38:55.960]  уже там персистентность, это уже тут без разницы. Так что вот получается такая красота, вот такая
[02:38:55.960 --> 02:39:11.280]  структура данных. Если тут соответственно какие-то вопросы. Ой, как хорошо-то. О, ну вот кажется у нас
[02:39:11.280 --> 02:39:20.040]  пара и прошла. А, ну почти. Ну ладно, так что думаю так. Ладно, так еще по этой структуре вопросы есть.
[02:39:20.040 --> 02:39:30.400]  Ну просто дальше мы как бы будем заниматься чем-то, ну вообще с этим не связанным. В домашке? Ну не
[02:39:30.400 --> 02:39:34.640]  уверен. Ну в ближайшее время точно нет, потому что, как выясняется, вы плюсов, вы плюсы для этого
[02:39:34.640 --> 02:39:40.760]  не знаете. Не, ну понимаете, чтобы нормально это реализовывать, тогда надо и констру и знать,
[02:39:40.760 --> 02:39:46.960]  и приваты надо знать, и шаблоны надо знать. То есть вот, чтобы совсем по-хорошему. Чего? Нет,
[02:39:47.440 --> 02:39:59.160]  экзамен естественно будет. Куда ж мы денемся. Так, напоминаю, напоминаю, что у нас будет,
[02:39:59.160 --> 02:40:05.360]  напоминаю, что у нас есть зачет и есть экзамен. Это независимая источность. То есть зачет это
[02:40:05.360 --> 02:40:09.280]  значит за домашние задания, оценка, которую мы выставим по итогу выполнения вами домашних
[02:40:09.280 --> 02:40:15.520]  заданий в семестре. Экзамен, это будет вот теоретический экзамен в вашу сессию. Это две разные
[02:40:45.520 --> 02:40:58.280]  соображения. Нет, ну, соображение там следующее, что, ну, скажем так, просто, как бы, скажем так,
[02:40:58.280 --> 02:41:04.920]  то есть просто, когда становится больше, это означает, что пока больше, но больше чуть-чуть, да? То есть
[02:41:04.920 --> 02:41:10.760]  непосредственно перед добавлением этого элемента были, элементы были приблизительно равны. И мы
[02:41:10.760 --> 02:41:15.920]  знаем, что если у нас там, скажем, х тут и х тут, то где-то за О от Х действия мы вот это вот сюда
[02:41:15.920 --> 02:41:23.320]  передать можем. Это с одной стороны, а с другой стороны было важное соображение, что вот этот
[02:41:23.320 --> 02:41:30.280]  элемент реально нам понадобится не раньше, чем через X операции. Поэтому получается вот такой вот
[02:41:30.280 --> 02:41:39.440]  покойничная застава получилась вот такая. Так, ребят, я вопрос не слышу, давай.
[02:41:40.760 --> 02:41:52.360]  Нет, ну это да. Нет, ну у нас в принципе цель, да, что по сути мы занимаемся тем же самым. Мы
[02:41:52.360 --> 02:41:57.800]  перегоняем эти элементы в stack R. Только проблема возникает в том, что, как бы, мы не хотим, чтобы
[02:41:57.800 --> 02:42:04.080]  было пусто-пусто-пусто и там до скончания века. То есть мы хотим, чтобы вот, условно, читать по
[02:42:04.080 --> 02:42:12.800]  пять страничек в день. Вот. Или там по пять минут в день мы хотим на это тратить. Вот. Так, ну что, еще вопросы?
[02:42:12.800 --> 02:42:28.160]  Вот. Так, но если вопросов нет, ладно, значит тогда пока перерыв, ну а соответственно минут через 15
[02:42:28.160 --> 02:42:42.840]  мы тогда и будем говорить о сортировках. Давай. Ну и тем более как-то вот может объединить это все вместе.
[02:42:42.840 --> 02:42:54.320]  Вот. Так. Значит соответственно, значит смотрите. Так, это у нас значит и так, так что краткое
[02:42:54.320 --> 02:43:00.280]  содержание сегодняшнего занятия и, возможно, следующего и еще предыдущих. Вот тут еще он про
[02:43:00.280 --> 02:43:07.400]  стэки тут еще. Вот. Да, это вот что такое stack, если что. Ну ладно, мы к этому там в какой-то момент
[02:43:07.400 --> 02:43:18.640]  вернемся. Так, кратенько прибежимся. Так. Вот. Так, ну вот. Так что да, это было краткое содержание того,
[02:43:18.640 --> 02:43:24.200]  что нас ждет. Что хотелось бы. Ну вот просто мы, ну у нас как-то вот пошло, мы немножко в другом
[02:43:24.200 --> 02:43:29.600]  порядке это стали проходить. Вот. А, кстати, да, да, на тему обратизационного анализа, кстати,
[02:43:29.600 --> 02:43:34.800]  обратите внимание, там у вас в домашних заданиях еще три задачи появились. Ну дедлайн, естественно,
[02:43:34.800 --> 02:43:44.240]  не сегодня. Так. Дедлайн нет, по умолчанию дедлайн через две недели. Да, но там подлянка такая,
[02:43:44.240 --> 02:43:49.640]  более того, как бы не уверен, что вам будет знаний хватать на то, чтобы уметь решить хотя бы две.
[02:43:49.640 --> 02:44:05.640]  Чего-чего? Кучу? Какую кучу? А, ну мы тут сейчас узнаем, что такое куча, так что можно. Так,
[02:44:05.640 --> 02:44:11.540]  смотрите. Так, ладно. Ну это так, если кто-то не помнит, что такое симтотики, то я думаю, тут все
[02:44:11.540 --> 02:44:18.660]  понятно. Вот. А теперь смотрите. Значит, ну задача о сортировке. Ну тут на самом деле, чтобы
[02:44:18.660 --> 02:44:24.820]  анализировать как бы сложные задачи об симтотике, тут как бы половину вопроса решает точная,
[02:44:24.820 --> 02:44:34.780]  соответственно, постановка задач. Вот. Потому что вот мы попытаемся ее решить вот в таком,
[02:44:34.780 --> 02:44:40.340]  вот в таком достаточно жесткой формулировке, чтобы вот легче было анализировать там самую
[02:44:40.340 --> 02:44:43.980]  лучшую симтотику. Ну у нас цель иногда не только сказать, что придумать самый лучший алгоритм,
[02:44:43.980 --> 02:44:50.780]  но еще и доказать, что лучше нельзя. Вот. Ну вот с другой стороны. Вот, например, вот у нас задача.
[02:44:50.780 --> 02:44:56.540]  Вот предположим, что у нас есть n камней, как написано. И причем, да, камни — это вот чисто
[02:44:56.540 --> 02:45:02.940]  название. И они абсолютно одинаковые на вид. Ну там ладно, максимум только маркером на них написано
[02:45:02.940 --> 02:45:09.500]  1, 2, 3 и так далее. И наша задача их отсортировать. Для этого нужно их как-то сравнивать. Теперь
[02:45:09.500 --> 02:45:16.060]  предположим, что все, что мы умеем — это брать два камня, положить их на весы. Весы подчешутся,
[02:45:16.060 --> 02:45:24.340]  подчешутся и скажут, у кого вес больше. Типа вот туда или туда. Все. Но для простоты предположим,
[02:45:24.340 --> 02:45:31.500]  что у нас там все камни веса попарно различны. И в результате даже вот совсем формально пропишем,
[02:45:31.500 --> 02:45:37.180]  что нам нужно их отсортировать. То есть выдать вот перестановку этих камней, такую, что в этой
[02:45:37.180 --> 02:45:46.140]  перестановке каждый следующий камень весит больше предыдущего. Вот теперь возникает вопрос.
[02:45:46.140 --> 02:45:55.540]  Хочется найти наилучшую асимптотику, за которую мы можем это сделать. Так вот прикинем все вениками,
[02:45:55.540 --> 02:46:06.660]  что мы пока этого не знаем. Вот давайте аккуратно. Значит, смотрите. Вот теперь давайте задавайте,
[02:46:06.660 --> 02:46:12.180]  за какое минимальное количество действий это можно сделать? Но на самом деле какая тут модель,
[02:46:12.180 --> 02:46:17.460]  может быть, как это вообще можно сделать? Но в принципе, одной из моделей является дерево решений.
[02:46:17.460 --> 02:46:23.900]  Вот сейчас вы видите, то есть смотрите, то в принципе, если бы мы отсортировали три камня,
[02:46:23.900 --> 02:46:29.300]  то по большому счету алгоритм, вот вы знали, что их ровно три, то алгоритм можно было бы представить,
[02:46:29.300 --> 02:46:36.020]  как вот такого рода набор ифов. Но даже этот набор на самом деле можно представить как просто
[02:46:36.020 --> 02:46:42.020]  вот такое двоичное дерево, где в каждой вершине мы говорим, возьми вот этот камень и вот этот.
[02:46:42.020 --> 02:46:47.940]  Если первый оказался весит меньше, то значит идем в левую веточку. И соответственно, вот,
[02:46:47.940 --> 02:46:55.340]  а что я вам руками показываю? Вот в левую веточку, вот. И соответственно, вот, а если этот вот,
[02:46:55.340 --> 02:47:01.820]  что вправую, вот что-нибудь такое. Ну вот, ну в данном случае, например, да, то есть если нулевой
[02:47:01.820 --> 02:47:08.980]  весит меньше первого, мы идем вот влево. Если первый весит меньше, то вправо. Вот, то есть получается,
[02:47:08.980 --> 02:47:14.180]  если просчитать все варианты, а всего у нас вариантов, а теперь заметим, что всего у нас
[02:47:14.180 --> 02:47:23.860]  вариантов ответов сколько? Ну n-факториал, ровно. То тогда получается, что у нас листов у этого
[02:47:23.860 --> 02:47:32.140]  двоичного дерева поиска должно быть n-факториал. Вот. Ну теоретически или более, ну потому что раз каждый
[02:47:32.140 --> 02:47:36.580]  может быть ответом, значит на каждый, то есть теоретически может быть так там, вообще в алгоритмах
[02:47:36.580 --> 02:47:42.300]  в общем, что там, что какие-нибудь там два листа дают одинаковый ответ. Но практически в нашем случае
[02:47:42.300 --> 02:47:58.700]  не очень понятно, как это, поэтому соответственно. Вот. Ну теоретически в других алгоритмах. Ну да,
[02:47:58.700 --> 02:48:05.340]  ну здесь как-то очень странно, потому что, нет, в данном случае, если мы сравнили х камень с
[02:48:05.340 --> 02:48:11.380]  игроковым, да, то тогда, ну там где нот, ну то есть как минимум, вот заметим, вот мы в корне сравнили
[02:48:11.380 --> 02:48:16.140]  нулевой с первым, тогда очевидно, что во всех листах левого по дереву нулевой камень будет стоять
[02:48:16.140 --> 02:48:20.660]  раньше первого, а во всех листах правого по дереву, наоборот, первый будет стоять раньше нулевого.
[02:48:20.660 --> 02:48:30.700]  Поэтому понятно, что там одинаковый не будет. Ну да, получается так. Нет, ну это вы, нет, стоп,
[02:48:30.700 --> 02:48:38.580]  стоп, стоп, не так. В один лист ведет одна ветвь, так или иначе, так дерево устроено. Но имейте в виду,
[02:48:38.580 --> 02:48:59.540]  что мы говорим о том, что не может быть двух одинаковых листов. Нет. Да. А вот какие-то,
[02:48:59.580 --> 02:49:06.140]  вот алгоритм так сказал. То есть на самом деле любой алгоритм, какой бы вы ни написали алгоритм,
[02:49:06.140 --> 02:49:13.020]  но если вы зафиксируете, ну детерминированный, конечно, да, то вы, если вы зафиксируете алгоритм и
[02:49:13.020 --> 02:49:19.340]  зафиксируете число n, то тогда по этому алгоритму можно нарисовать вот такое дерево.
[02:49:19.340 --> 02:49:34.860]  В один лист, не понял. Так, мы договорились, что это вообще дерево. Да, у нас мы договорились,
[02:49:34.860 --> 02:49:40.100]  что это дерево. Да, то есть как бы, ну что, что да, в один лист ни в одну вершину более одного
[02:49:40.100 --> 02:49:45.060]  ребра не ведет. То есть у нас не может быть так, что мы тут пришли и сказали, а вот в этом месте
[02:49:45.060 --> 02:49:58.500]  давайте одно и то же делать. Нет. Лист это уже ответ на задачу. Вопросы задаются в промежуточных
[02:49:58.500 --> 02:50:05.380]  вершинах. Так, давайте терминологически, да, помните, да, в дереве лист это вершина,
[02:50:05.380 --> 02:50:12.740]  у которой детей нет. Вот все остальные вершины листами не называются. А то давайте это,
[02:50:12.740 --> 02:50:17.260]  потому что в этом мире, где у нас оказывается в некоторых местах лист это массив, так называется,
[02:50:17.260 --> 02:50:26.460]  знаете, надо очень четко понимать действительно значение слов. Но тем более, знаете, очень
[02:50:26.460 --> 02:50:33.500]  сложно общаться с человеком, у которого представление о том, что значит слова,
[02:50:33.500 --> 02:50:40.580]  отличается от вашего представления. Ну, то есть типичный пример, это когда вам якобы на белое
[02:50:40.580 --> 02:50:49.540]  говорят, что это черное. Так вот, значит теперь, ну вот, значит, то есть каждый алгоритм по сути
[02:50:49.540 --> 02:50:53.860]  действительно можно прописать как вот такое дерево. Ну, потому что там любой мэш-сорт напишете,
[02:50:53.860 --> 02:50:59.300]  то есть по факту он там, вы просто можете проследить, просто дать ему на вход все n
[02:50:59.300 --> 02:51:03.740]  факториалы, собственно, вариантов ответа и смотреть, какие элементы он будет сравнивать и,
[02:51:03.740 --> 02:51:09.500]  собственно, какие результаты будут. И тогда в наборах будет получаться дерево. Потому что,
[02:51:09.500 --> 02:51:14.100]  по большому счету, разветвление у него по-любому будут только там где-нибудь в каких-нибудь ифах,
[02:51:14.100 --> 02:51:22.380]  правда? Ну вот, то есть, точнее так, все ифы будут зависеть от того, какие результаты сравнений были,
[02:51:22.380 --> 02:51:28.540]  потому что если вы сделали там, то есть скажем так, если первые там, скажем, десять сравнений там
[02:51:28.540 --> 02:51:34.500]  в мэш-сорте, например, дали одинаковый результат, как строчка 0,1, там 1,0 и так далее, то соответственно
[02:51:34.500 --> 02:51:42.180]  мэш-сорт до этого момента будет делать ровно одно и то же. Логично, да? Вот, поэтому получается дерево.
[02:51:42.180 --> 02:51:49.980]  И теперь возникает вопрос, что нас интересует? Нас, конечно, интересует высота этого дерева для
[02:51:49.980 --> 02:51:58.220]  каждого n. Ну, потому что что такое, вот алгоритм работает за о от, он работает за не менее чем
[02:51:58.220 --> 02:52:06.300]  о от, за омега от высоты этого дерева в худшем случае, правда? Потому что эти сравнения уже алгоритму
[02:52:06.300 --> 02:52:17.140]  сделать все равно придется, так или иначе. Вот, вот просто там без вариантов. Вот, то есть это, то есть,
[02:52:17.140 --> 02:52:24.260]  да, то есть, ну, точнее так, мы оцениваем, да, мы оцениваем время работы алгоритма любого снизу,
[02:52:24.260 --> 02:52:31.740]  как количество сравнений, которые он делает в худшем случае. А теперь замечаем следующее. Ну вот,
[02:52:31.740 --> 02:52:36.900]  но теперь заметим надо, чтобы алгоритм действительно работал четко и чтобы у этого дерева должно быть не
[02:52:36.900 --> 02:52:46.420]  менее чем n факториал листов. Вот, но теперь возникает вопрос, что же это может быть? Ну, с одной стороны,
[02:52:46.420 --> 02:52:53.580]  снизу, с другой стороны, давайте посмотрим, какие у нас алгоритмы вообще есть. Вот, ну, можно пробежаться
[02:52:53.580 --> 02:52:59.860]  так. Ну, например, как можно вообще сортировать? Ну, один из самых таких тупых алгоритмов, которые,
[02:52:59.860 --> 02:53:03.540]  там, возможно, вы там, если вас попросить, там, в седьмом классе придумать хоть какой-нибудь алгоритм
[02:53:03.540 --> 02:53:12.020]  сортировки, то можно придумать вот, например, такой. То есть, условно, в каждый момент времени мы тупо там
[02:53:12.020 --> 02:53:17.900]  находим, то есть, сначала тупо перебираем, находим минимум, ставим его на место, потом находим из
[02:53:17.900 --> 02:53:23.100]  оставшихся второй элемент, ставим его на место, потом третий, четвертый, пятый. Это называется сортировка выбора.
[02:53:23.100 --> 02:53:37.540]  Почему? Нет, next permutation это надо знать, что такое next permutation. Очень сомнится, что вам в седьмом классе вы
[02:53:37.540 --> 02:53:42.940]  будете знать, что такое next permutation, до того, как узнаете, что такое сортировка. Вот, ну,
[02:53:42.940 --> 02:53:54.340]  ой, ну, чтобы вы в седьмом классе знали, что такое рандом, вот, ну, адекватно хотя бы. Вот, значит,
[02:53:54.340 --> 02:53:58.940]  вот, то есть, такой вот, такая вот штука есть, но тут я скажу, да, алгоритмы простые, но их полезно
[02:53:58.940 --> 02:54:03.620]  помнить, потому что каждый из этих алгоритмов, на самом деле, может вылезти в абсолютно неожиданные
[02:54:03.620 --> 02:54:09.820]  места, на самом деле. Вот, поэтому, соответственно, надо знать. То есть, у всех там свои, на самом деле,
[02:54:09.820 --> 02:54:16.540]  неожиданные приколы есть, как мы увидим. Так вот. Какие еще варианты есть? Вот, ну,
[02:54:16.540 --> 02:54:21.940]  видим, за сколько у нас сортировка selection работает. Он работает за, даже не o от n квадрат,
[02:54:21.940 --> 02:54:27.460]  а theta от n квадрат. То есть, отметим, что этот алгоритм, он прям железобетонно за квадрат
[02:54:27.460 --> 02:54:38.820]  работает. Да, у него худший случай от лучшего, в общем-то, отличается не особо. Вот, сортировка
[02:54:38.820 --> 02:54:52.460]  вставками. Так, следующий вариант. Нет, ну, не совсем. Не-не-не. Разница такая, смотри. Нет,
[02:54:52.460 --> 02:54:56.780]  разница такая. Тут ты, смотри, да, у тебя тут слева отсортированная часть справа, но здесь,
[02:54:56.780 --> 02:55:01.820]  у тебя отсортированная, ты вне отсортированной части находишь минимальный элемент и помещаешь,
[02:55:01.820 --> 02:55:08.220]  и вставляешь его в начало, именно в конец. В insertion, в сортировке вставками ты делаешь по-другому.
[02:55:08.220 --> 02:55:15.420]  У тебя в каждый момент времени префикс отсортирован, ты берешь следующий за префиксом
[02:55:15.420 --> 02:55:23.660]  элемент и вставляешь, но уже не в конец, а уже куда придется. Вот, собственно, код, в общем-то,
[02:55:23.660 --> 02:55:36.340]  вы видите. Да. Как минимум, потому что некоторые нам пригодятся еще, как это ни странно. А вот,
[02:55:36.340 --> 02:55:47.900]  а что объяснять? Вот код. Чего не умеете? Код не умеете читать. Ну, смысл простой. Ну,
[02:55:47.900 --> 02:55:53.300]  по сути, то есть, сортировка вставками заключается в том, что у вас есть массив, то есть отсортированный,
[02:55:53.300 --> 02:55:58.460]  изначально пустой, и вы берете элементы по очереди и этот или и каждый элемент вставляете в массив так,
[02:55:58.460 --> 02:56:08.940]  чтобы было сортировано. Первая, да. А это сортировка вставками. А то и значит, прям в середину
[02:56:08.940 --> 02:56:15.940]  вставляем, там раздвигаем, если что, две половинки. Да. Да, вот обратите внимание, то есть, реально,
[02:56:15.940 --> 02:56:20.660]  внутри одного массива это можно сделать так. Вот вставляем, предположим, что у нас есть префикс
[02:56:20.660 --> 02:56:28.260]  длины и уже отсортирован. Тогда аит-элемент мы хотим вставить. Тогда идея такая. Тогда вот
[02:56:28.260 --> 02:56:35.060]  идея возникает такая, что мы, честно, все элементы, вот идем справа налево, начиная от именно с первого
[02:56:35.060 --> 02:56:40.180]  элемента, и все элементы, которые больше нас, нот, которые там, соответственно, больше нас,
[02:56:40.180 --> 02:56:46.980]  мы так жественно копируем вправо. А потом, собственно, на освободившееся место вот мы, собственно,
[02:56:46.980 --> 02:56:56.180]  тут вставляем вот эту tmp. Чего? Да, вот теперь, чем интересно это отличается, что если нам повезет,
[02:56:56.180 --> 02:57:01.940]  то это сработает за линию. То есть, в отличие от предыдущей сортировки, мы оставляем в себе
[02:57:01.940 --> 02:57:16.700]  возможность, что нам повезет. Чего-чего? Не, на каком стэке, где? Не-не-не, здесь нам не повезет,
[02:57:16.700 --> 02:57:23.540]  потому что мы минимум в честную ищем. По всему суффиксу прям честный минимум ищем. А тут,
[02:57:23.540 --> 02:57:28.060]  как вы видите, мы делаем, сдвигаем, то есть, ищем сколько элементов надо сдвигать и честно их
[02:57:28.060 --> 02:57:39.060]  сдвигаем. Прям предельно честно. Нет, не-не-не-не. Нет, bubble это более, это другое немножко. Нет,
[02:57:39.060 --> 02:57:44.100]  in session мы по одному элементу вот вставляем. Вот ровно по одному и не ноты. И причем именно
[02:57:44.100 --> 02:57:50.100]  вставляем. Но на самом деле, можно как бы более тупо доказать, что он на самом деле работает за
[02:57:50.100 --> 02:57:59.140]  О от количества инверсии в массиве. Да, даже не за О, а за тета от количества инверсии в массиве,
[02:57:59.140 --> 02:58:08.100]  ну плюс N еще. Обратите внимание, в худшем случае. Но если инверсия у тебя будет N,
[02:58:08.100 --> 02:58:20.300]  там О от Н, то алгоритм сработает за О от Н. Ну да, ну скажем так, да. Но да,
[02:58:20.300 --> 02:58:26.140]  математическое ожидание количества инверсии в рандомном массиве, конечно, N на N-1 поделить на
[02:58:26.140 --> 02:58:36.260]  4. Это да. Ну потому что всего пара элементов N на N-1 пополам и каждая будет составлять инверсию
[02:58:36.260 --> 02:58:45.180]  с приоритетностью 1 до 2. Ну и что оба, когда вы считаете мат ожидания, зависимость вообще ни при чем.
[02:58:45.180 --> 02:58:52.700]  Как бы, мат ожидания, скажем так, мат ожидания суммы случайных величин равно сумме мат ожиданий
[02:58:52.700 --> 02:58:59.300]  случайных величин и абсолютно не важно зависимы они или нет. Да, да, легче всего это вообразить,
[02:58:59.300 --> 02:59:04.700]  помните, мат ожидания это такой интеграл. А интеграл в сумме равен сумме интегралов независимости
[02:59:04.700 --> 02:59:11.180]  от того, там зависимы эти функции или нет. Да, но нет, это на всякий случай здесь понятно,
[02:59:11.180 --> 02:59:15.340]  что вы не знаете, что такое интеграл, что такое мат ожиданий, что такое случайная величина. Да,
[02:59:15.340 --> 02:59:21.100]  поверьте, вы не знаете, что такое случайная величина. Нет, что сейчас, да? Нет, ну вы нельзя,
[02:59:21.100 --> 02:59:25.900]  давайте проверяйтесь, просто вы сейчас реально готовы забабахивать за сигму алгебру. Ну кто-то
[02:59:25.900 --> 02:59:30.300]  наверно готов, конечно, но вот. Но там как бы, чтобы это определить, вам придется реально вводить
[02:59:30.300 --> 02:59:56.620]  понятие сигму алгебры, там вот и развлекаться с этим. Да. Нет, ну, а даже за линию ищем. Нет,
[02:59:56.620 --> 03:00:03.420]  потому что мы читеры, мы ее ищем справа налево. Как только мы интертусируем на элемент,
[03:00:03.420 --> 03:00:09.900]  который меньше нашего, значит все, здесь мы можем останавливаться. Вот. Ну, собственно,
[03:00:09.900 --> 03:00:15.260]  вот в этом коде это даже определено. Хотя правильно замечено на самом деле, что теоретически есть,
[03:00:15.260 --> 03:00:21.740]  да, возможны неосимпатические оптимизации у этого алгоритма. А вот смотрите.
[03:00:21.740 --> 03:00:35.060]  Но нет, это скажешь так, в некоторых случаях это может быть чуть быстрее, потому что раньше вы и
[03:00:35.060 --> 03:00:40.620]  искали за n квадраты, и сдвигать. Сдвигать, просто память сдвигать можно быстро, потому что там
[03:00:40.620 --> 03:00:43.300]  компьютер это как-то хорошо умеет с более лучшей константой.
[03:00:43.300 --> 03:00:57.460]  ДД, ага, это вероятност алгоритм, это нас не устраивает.
[03:00:57.460 --> 03:01:13.460]  Ну, ей там нужно передать, куда вы копируете, что вы копируете и сколько, то есть начиная с
[03:01:13.460 --> 03:01:24.060]  какого забора и до какого обеда. Нет, но нет, но это это сейшная функция, она вам в библиотеках
[03:01:24.060 --> 03:01:31.220]  распроставляется. Ну, в итоге получится за n квадрат, но сильно меньшая константа вот в такой версии.
[03:01:31.220 --> 03:01:36.100]  А когда вы ищете, вы можете искать за bin поиск. Смотрите, кстати, как интересно стало,
[03:01:36.100 --> 03:01:45.580]  сравнение уже стало n log n. Ну, в такой версии алгоритма insertion сорта сравнение теперь стало
[03:01:45.580 --> 03:01:52.500]  в худшем случае n log n. Ну да, правда алгоритм все еще работает за n квадрат, то есть у нас
[03:01:52.500 --> 03:01:57.420]  присваивание теперь стало чуть побольше. То есть, ну не побольше, а все еще квадрат, правда,
[03:01:57.420 --> 03:02:04.980]  константу мы уменьшили, но математически это еще не решение. А вот упомянутый ранее bubble sort,
[03:02:04.980 --> 03:02:11.380]  более известный как сортировку пузырьков. То есть, это такой, да, это аналог insertion
[03:02:11.380 --> 03:02:16.620]  сорта, но такой продвинутый. То есть, давайте пробежимся слева направо и будем говорить,
[03:02:16.620 --> 03:02:23.100]  если я вижу инверсию, давайте я ее посвапаю. То есть, если очередной элемент больше следующего,
[03:02:23.100 --> 03:02:40.020]  давайте я их посвапаю. Вот, ну, собственно, вот написано, в общем-то все. Ну, вообще нет. Да нет,
[03:02:40.020 --> 03:02:44.700]  принципиально разницы нет, потому что, ну, как бы для любого плохого теста для одной версии
[03:02:44.700 --> 03:02:53.300]  существует развернутый тест. Ну, скажем так, я так сказал, классическое представление bubble sort
[03:02:53.300 --> 03:03:08.220]  это, конечно, когда вы слева направо пробегаетесь. Нет, нет, нет, нет, нет, вообще нет. Ну и что, да,
[03:03:08.220 --> 03:03:13.580]  но bubble sort делает еще кучу всего дополнительного. Он еще какие-то элементы сдвинет влево,
[03:03:13.580 --> 03:03:18.980]  а insertion sort этим не занимается. И потом в selection sort тоже минимум в начале,
[03:03:18.980 --> 03:03:28.500]  оказывается в начале, но как бы. Да, но это не означает, что алгоритмы одинаковые.
[03:03:43.580 --> 03:03:51.660]  Нет, ну вот. Значит, смотрите, внимательно. Значит, что такое bubble sort? То есть, видите,
[03:03:51.660 --> 03:03:55.620]  то есть bubble sort тут фишка, что да, он, конечно, гарантированно за первую итерацию там, за первый
[03:03:55.620 --> 03:04:04.740]  проход наибольший элемент отправит в начало, но тем не менее окажется, что до того, как он в этом
[03:04:04.740 --> 03:04:09.580]  проходе встретил этот наибольший элемент, он там до этого действительно еще какой-то элемент куда-то
[03:04:09.580 --> 03:04:17.020]  подвигает. Поэтому, строго говоря, это лучше. И действительно, но правда, заметим, что в лучшем
[03:04:17.020 --> 03:04:21.460]  случае этот алгоритм, обратите внимание, вообще за линию работает, если вам подсунули отсортированный
[03:04:21.460 --> 03:04:27.980]  массив. Ну почти, что такое почти? Ну почти отсортированный.
[03:04:27.980 --> 03:04:36.860]  Параллельно.
[03:04:36.860 --> 03:04:54.180]  Ну, не знаю, ну по-моему, ой-ой-ой-ой. Ну, знаете, это, по-моему, нет смысла.
[03:04:54.180 --> 03:05:16.860]  Нет, ну понятно, ладно. Не сказал бы, что это, ну как сказать. Ну как? Ну в сортировке выбора мы
[03:05:16.860 --> 03:05:30.340]  честно находим минимум и честно его там помещаем в начало. Это выбором было. В сортировке выбора мы
[03:05:30.340 --> 03:05:35.900]  говорим так, из оставшегося берем минимум, помещаем куда надо. В сортировке вставками мы делаем
[03:05:35.900 --> 03:05:46.340]  наоборот. Мы берем очередной элемент, первый попавшийся, и вставляем его куда надо. Но почему?
[03:05:46.340 --> 03:05:50.060]  Ну не совсем, там много чего может происходить. Вот смотрите, вот давайте вот на этот тест
[03:05:50.060 --> 03:05:56.260]  посмотрим. Вот, например, был такой тест. Смотрите, первое некоторое время вот этот элемент 20 будет
[03:05:56.260 --> 03:06:01.940]  торжественно двигаться вправо. Но двигаться вправо он будет не до конца, только пока не встретит
[03:06:01.940 --> 03:06:12.340]  больше элемент 25. Но 25 тоже пока никуда не двигается, потому что он отнется на 35, он чуть-чуть
[03:06:12.340 --> 03:06:20.340]  подвигается, он отнется на 42, и после этого он уже додвигается до конца. То есть да, мы гарантируем,
[03:06:20.340 --> 03:06:27.380]  что после первого его прохода максимальный элемент оказался в конце, но эта сортировка сделала
[03:06:27.380 --> 03:06:39.420]  чуть больше. Видите, она перед этим тоже какие-то элементы куда-то подвигала. Да, ну заметим, что да,
[03:06:39.420 --> 03:06:45.420]  на следующем проходе мы можем, кстати, по этому последнему элементу уже не проходиться. Да, вот
[03:06:45.420 --> 03:06:50.060]  такие есть, да, вот это есть. То есть видим, что здесь как-то вот произошло, что за 6 проходов мы тут
[03:06:50.060 --> 03:06:56.860]  в принципе победили. Вот, то есть проходов тут может быть больше. То есть про проходов тут может
[03:06:56.860 --> 03:07:01.740]  быть меньше, чем в реальном там каком-нибудь Insection Selection. В худшем случае такая версия,
[03:07:01.740 --> 03:07:08.540]  конечно, если у вас тупо убывающий массив, но это работает за n квадрат. Чего?
[03:07:08.540 --> 03:07:22.460]  А при чем тут форма? Чего? Чего-чего? Так, давайте без умных слов сейчас лишних. Давайте так,
[03:07:22.460 --> 03:07:28.740]  лучше так, умные слова должны поступать так, собственно, все-таки ограниченными порциями. Ну вот,
[03:07:28.740 --> 03:07:33.180]  потому что можно, можно, конечно, их все забабахать там первым, там теоретически можно ужать лекцию
[03:07:33.180 --> 03:07:38.020]  просто так, что я там просто весь курс расскажу за полтора часа, ну или ладно, за три. Ну так,
[03:07:38.020 --> 03:07:44.020]  на уровне общих глобальных идей, если вы достаточно умные, вы сами додумаетесь. Тем более, что много
[03:07:44.020 --> 03:07:49.620]  из этого вы все равно все знаете. Да, все, увидимся на экзамене. Но мы все-таки так делать не будем.
[03:07:49.620 --> 03:07:59.540]  Вот, так вот. И так мы рассмотрели три алгоритма сортировки, поэтому все-таки. Вот, то есть выбором,
[03:07:59.540 --> 03:08:05.700]  ставками, пузырком. В худшем случае они работают за n квадрат, несмотря ни на там какие их там
[03:08:05.700 --> 03:08:10.380]  примочки на тему того, что они там в среднем лучше бы и так далее. А, ну в принципе, вчера мы еще
[03:08:10.380 --> 03:08:17.140]  quicksort рассмотрели, но в худшем случае он тоже за n квадрат работает. Да, да, мы в прошлый раз
[03:08:17.140 --> 03:08:28.220]  рассмотрели quicksort. Да, но там разные варианты, да. А, ну хотя нет, в итоге мы, если мы рассмотреть
[03:08:28.220 --> 03:08:34.980]  quicksort с правильным выбором медиана, то да. Да, тогда это уже n log n, да. Но если мы выбираем там
[03:08:34.980 --> 03:08:39.100]  детерминированный в плане, в качестве среднего элемента, выбираем, давайте, вот этот вот первый,
[03:08:39.100 --> 03:08:46.060]  или вот этот вот последний, или вот этот вот в середине массива. Нет, это не quicksort, это quickselect.
[03:08:46.060 --> 03:08:51.700]  Да, но quicksort он тоже помогает. Хорошо, углорили, углорили. Ладно, да.
[03:08:51.700 --> 03:09:04.340]  Тупо лучше константа. Понимаете, зачем этот quicksort с рандомом вообще нужен? Он нужен для того,
[03:09:04.340 --> 03:09:12.380]  что просто он, у него константа очень крутая, он очень, он быстро работает. В результате по факту
[03:09:12.380 --> 03:09:18.940]  это все приводится к тому, что в quicksort у нас, что в SPL работает так называемый introsort,
[03:09:18.940 --> 03:09:28.060]  который говорит так, запускаем quicksort, прям часто запускаем, но если в какой-то момент мы
[03:09:28.060 --> 03:09:32.420]  обнаружили, что надо отсортировать вот эту часть массива, а глубина рекурсии уже больше, чем там
[03:09:32.420 --> 03:09:40.540]  сколько-то логарифмов, там 2 log или что-то еще, то мы в этом месте конкретно этот кусочек
[03:09:40.540 --> 03:09:49.980]  сортируем хипсортом. Ну, потому что хипсорт он позволяет делать там уверенно без доп памяти.
[03:09:49.980 --> 03:09:59.460]  Можно, мы даже будем обсуждать, как этот inplace писать сводки единицы дополнительной памяти,
[03:09:59.460 --> 03:10:06.540]  да. Но алгоритм такой относительно гадостный и там приличная константа. Так что quicksort,
[03:10:06.540 --> 03:10:10.740]  а quicksort он как бы на мах, но мы увидим чуть позже, собственно, он тут тоже есть на самом деле.
[03:10:10.740 --> 03:10:19.260]  Так, так вот, ладно, но напоминаю, мы тут не просто изучаем сортировки, а мы как бы это,
[03:10:19.260 --> 03:10:26.580]  ищем лучше. То есть знаете, как это, да, вы ищете. Да, то есть как там, да, знаете, мы, да, мы
[03:10:26.580 --> 03:10:32.740]  путешествуем, ищем, что-то ищем, но вот попутно еще смотрим, что вообще есть. Итак, точно ли это
[03:10:32.740 --> 03:10:40.900]  оценка. Но, оказывается, есть, ну первая обычно сортировка zn log n, которая узнается, это сортировка
[03:10:40.900 --> 03:10:46.900]  слияния. Ну, собственно, да, ну вот, ну базируется она на простой идее, просто давайте разделяем
[03:10:46.900 --> 03:10:52.340]  властвой, как мы уже обсуждали, разбиваем массив на два равных, ну или там почти равных, сортируем
[03:10:52.340 --> 03:10:57.420]  рекурсивно один, сортируем рекурсивно второй, а дальше объединяем две отсортированные последовательности
[03:10:57.420 --> 03:11:03.620]  с помощью двух указателей в один. Так, если предполагать, что мы разрешаем себе пользоваться
[03:11:03.620 --> 03:11:19.180]  линейной доп-памятью, надо подробнее обсуждать. А это потому что кодовое словосочетание вариант без рекурсии.
[03:11:27.420 --> 03:11:37.260]  Ну да, тут 1, 2 и 3, 4, 5, 6 и 7, 8, а тут вот так, да. Ну, просто такая нерекурсивная версия.
[03:11:37.260 --> 03:11:42.420]  Чтоб не было это там, возьми два массива, там я их засортирую там рекурсивно, потом вот это вот.
[03:11:42.420 --> 03:11:53.820]  Ну, нелюбимые рекурсии. Где? Нет, 1, 2 это значит, у нас уже есть отсортированный, в 1 и 2 элемент
[03:11:53.820 --> 03:12:02.580]  образуют отсортированный подмассив. А также есть массив 3, 4, 5, 6, 7, 8. Видите, тут в конце надо
[03:12:02.580 --> 03:12:19.100]  отсортировать массив, который находится подмассив с 1 по 2 в степени k-1. По 2 в степени k. Ну вот.
[03:12:19.100 --> 03:12:26.660]  Ну, как сказать, ну здесь, да, если, да, тут. Так, ну да, тут не совсем точно написано, это да, но
[03:12:26.660 --> 03:12:34.340]  если n равно 2 в степени k, то это будет уверенно работало. Да, но не точность, не точность, согласен,
[03:12:34.340 --> 03:12:43.500]  согласен, да, мелче. Ну, просто как вы делаете слияние двух массивов? У вас есть два указателя и вы
[03:12:43.500 --> 03:12:49.380]  идете и в каждом интервью говорите, если у вас один элемент меньше другого, то вы этот элемент
[03:12:49.380 --> 03:12:57.180]  куда-то записываете и сдвигаете указатель. Остается такой, а куда вы записываете? Ну вот. Для этого
[03:12:57.180 --> 03:13:02.420]  нужна допамять, то есть вы создаете новый массив, в который вы эти элементы записываете. Ну а потом
[03:13:02.420 --> 03:13:07.620]  там эти два, если вы там сливали два, находясь рядом массива, вы их, собственно, потом копируете. Вот.
[03:13:07.620 --> 03:13:13.020]  То есть обойтись за вот единицу дополнительной памяти, это сильно усложняет алгоритм. Вот в следующий
[03:13:13.020 --> 03:13:24.180]  раз мы, видимо, будем это обсуждать. Ну вот. Но там мясо. Ну, конечно, N log N. Да, это, ну вот. А, вот.
[03:13:24.180 --> 03:13:34.740]  Да, это вот N log N. Ну, например, потому что есть вот такая рекуррента. Хотя можно понять и без
[03:13:34.740 --> 03:13:38.020]  рекуррента, просто себе это вообразив, собственно, это там дерево нарисовав.
[03:13:38.020 --> 03:13:48.900]  Ну да, да, да, да. Но это уже, но как говорится, вы уже решаете домашнее задание, поэтому мы как бы
[03:13:48.900 --> 03:13:58.620]  сможем в этом месте говорить с вами на более высоком уровне. Вот. Ну да, но я говорю, мы как бы, давайте, в
[03:13:58.620 --> 03:14:06.660]  этом месте мы как бы понимаем, что решение существует, поэтому уже не заморачиваемся. Ну вот. То есть знаете,
[03:14:07.060 --> 03:14:12.100]  то есть знаете, в каких-нибудь там, знаете, как представьте, сценка из жизни, там, скажем,
[03:14:12.100 --> 03:14:19.500]  Киргизхана. И там первая, первая, ну, там Чиргизхану приводит плен, ну вот. А, нет, там,
[03:14:19.500 --> 03:14:25.940]  или какой-нибудь русский, он приводит к какому-нибудь там плене какого-нибудь Монгола. И Монгол сказал,
[03:14:25.940 --> 03:14:30.060]  так, подождите, слушай, давай договоримся, на каком языке мы с тобой вообще говорим, а? А то малые
[03:14:30.060 --> 03:14:34.900]  там в зале какой-нибудь дотошник там какой-нибудь сидит, называется, еще спрашивать будет. На каком
[03:14:34.900 --> 03:14:40.580]  языке? Так, все, на русском, не заморачиваемся, это премьер-лига, да, все. Вот. Ну вот, но здесь
[03:14:40.580 --> 03:14:44.540]  то же самое. Мы уже там как бы все про себя поняли, что там какие-то есть, там может быть мелочи,
[03:14:44.540 --> 03:14:49.700]  типа там должны быть какие-то округления, какие-то более строгие доказательства могут быть. Там
[03:14:49.700 --> 03:14:54.900]  понятно, что это нот, но как бы мы мысленно умеем это делать, но вот поэтому нам это хватит. Вот.
[03:14:54.900 --> 03:15:02.660]  Итак, значит у нас есть вот batch sort, но мы уже даже более аккуратно доказывали, что он уже,
[03:15:02.660 --> 03:15:10.180]  что это n log n, и вот мы обнаружили, что оказывается, да, сортировка может работать за n log n,
[03:15:10.180 --> 03:15:17.740]  оказывается. Вот. То есть теперь можно, то есть можно t от n, то есть вот время работы там,
[03:15:17.740 --> 03:15:26.420]  лучше время работы сортировки оценить сверху как o от n log n. Но нет, концепцию мы не меняем,
[03:15:26.420 --> 03:15:31.420]  мы пока, у нас концепция, мы сортируем n камешков, которые мы умеем только там сравнивать,
[03:15:31.420 --> 03:15:43.140]  только там один с одним и всё. Вот. Но оказывается, теперь это уже точная оценка. Почему? А потому что
[03:15:43.140 --> 03:15:48.060]  давайте думать. Ну, во-первых, да, заметим, что t от n больше либо равно, чем это оптимальная высота
[03:15:48.060 --> 03:16:00.460]  того самого дерева, да. Помните, да? Ну, вот этого. Вот вспоминаем. Сейчас. А теперь смотрите. Ну,
[03:16:00.460 --> 03:16:04.660]  я сейчас вам примерно просто на примере этого дерева воспроизведу, что тут написано. Когда
[03:16:04.660 --> 03:16:10.780]  мы строим это дерево на присортировку n камней, да, то у нас получается двоичное дерево, у которого
[03:16:10.780 --> 03:16:23.820]  там n факториал листов. Понимаете, да? Вот n факториал листов. Ну, вот. Ну, в принципе отсюда следует,
[03:16:23.820 --> 03:16:29.100]  что высота дерева, по крайней мере, в худшем случае, не может быть меньше, чем логарифом этого n
[03:16:29.100 --> 03:16:37.380]  факториала. Ну, просто потому что, ну, утверждение такое, если высота дерева h, то листов не более
[03:16:37.380 --> 03:16:46.100]  чем два в степени h. Ну, да, стандарта, это максимальное расстояние или минимальное? Максимальное. Да,
[03:16:46.100 --> 03:16:53.660]  то есть, если максимальное расстояние до листа h, то листов всего не более, чем два в степени h. Ну,
[03:16:53.660 --> 03:16:57.500]  там, формальное доказательство можно по индукции провести, но, я думаю, это и так должно быть более
[03:16:57.500 --> 03:17:02.700]  или менее очевидно. Исходя из того, что, как бы, на каждом шаге у вас происходит, то есть, у вас как
[03:17:02.700 --> 03:17:08.500]  происходит, вот вы идёте с нуля и идёте как бы вниз, да, и тогда на очередном шаге вы либо встречаете,
[03:17:08.500 --> 03:17:15.820]  то есть, как бы, на очередном шаге, если вы там, вы либо раздваиваетесь, да, либо вы утыкаетесь в
[03:17:15.820 --> 03:17:22.940]  лист и завершаетесь. Вот, а дальше начинается просто элементарная алгебра. Ну, мы не знаем,
[03:17:22.940 --> 03:17:27.740]  чему он прям равен, то есть, тут нет такого log n факториала равен там, какой-нибудь там n
[03:17:27.740 --> 03:17:33.180]  в степени n, поделить на e в степени n, умножить там на обратную функцию кирмана, нет, такого нет. Ну,
[03:17:33.180 --> 03:17:39.740]  а симпатически оценить его точно очень просто. Вот, нет, у меня тут просто всё написано, на самом
[03:17:39.740 --> 03:17:46.220]  деле, даже вот. То есть, элементарно. Смотрите, log n факториал, это что такое? Формально говоря,
[03:17:46.220 --> 03:17:52.980]  это log 1 плюс log 2 плюс, так далее, плюс log n факториал, плюс log n. Ну, давайте, давайте
[03:17:52.980 --> 03:17:59.980]  предположим, для простоты Shen чётная. Ну, для простоты там, для нечётной, я думаю, понятно,
[03:17:59.980 --> 03:18:08.580]  тоже очевидно будет. Вот, тогда мы можем сказать, что это не менее чем, в общем, я написал то же
[03:18:08.580 --> 03:18:16.580]  самое, просто вытянул некоторые слагаемые. Да, я просто тупо вытянул первую половину слагаемых.
[03:18:16.580 --> 03:18:22.940]  Но вторая половина слагаемых, каждая слагаемая, можно оценить, как log 2 n пополам,
[03:18:22.940 --> 03:18:32.100]  правда? И тогда получается, что я могу оценить это снизу, как n пополам log n пополам. Ну,
[03:18:32.100 --> 03:18:40.100]  остаётся легко показать, что это ω от n log n. ω с константой, ну, я не знаю, 1 третье. Да,
[03:18:40.100 --> 03:18:45.380]  почему 1 третье? Потому что log n пополам, это всё-таки чуть-чуть меньше, чем log n. Но так как
[03:18:45.380 --> 03:18:54.260]  это равно по факту, но так как это log n пополам, это log n минус, умалое от log n. Ну, как умалое,
[03:18:54.260 --> 03:19:01.220]  это вот единицы. Там минус 1 по факту, поэтому это всё. Это получается вот ω от n log n.
[03:19:01.220 --> 03:19:08.900]  Ну, это типа, я могу доказать, что начиная с некоторого момента, вот это вот больше
[03:19:08.900 --> 03:19:21.180]  либо равно, чем n log n поделить на 3. Ну, чтобы вот тут вот, чтобы был именно ω от n log n,
[03:19:21.180 --> 03:19:25.820]  я должен доказать, что вот это вот не меньше, чем n log n умножить на какую-то положительную
[03:19:25.820 --> 03:19:31.180]  константу. Вот у меня эта константа будет 1 делить на 3. Ну, правда, там начиная с
[03:19:31.180 --> 03:19:37.260]  какого-то n, наверное, но хотя скорее, ну да, начиная с какого-то n, наверное, там, ну больше
[03:19:37.260 --> 03:19:45.060]  в единицы, но понятно. То есть таким образом получается, что чем приятно, то есть t от n,
[03:19:45.060 --> 03:19:52.140]  как мы уже поняли, t это от n log n, а merge sort это асимптотический оптимальный алгоритм. Ура! То
[03:19:52.140 --> 03:19:55.420]  есть если мы хотим найти асимптотический оптимальный алгоритм, то получается, во-первых,
[03:19:55.420 --> 03:19:59.980]  мы должны его предъявить, доказать его асимптотику, а во-вторых, доказать, что быстрее не получится.
[03:19:59.980 --> 03:20:18.860]  Ну вот да, вполне. Ну типа да. Ну да. Ну любая сортировка в нашей модели. Посмотри,
[03:20:18.860 --> 03:20:24.260]  любая сортировка, она по сути делает что? Она берет как-то детерминированно какие-то два камня
[03:20:24.260 --> 03:20:30.740]  и их сравнивает, да? В зависимости от результат, она делает еще какие-то действия, берет следующие
[03:20:30.740 --> 03:20:36.620]  два камня и сравнивает. Но какие она два камня возьмет на второй раз, детерминированно определяется
[03:20:36.620 --> 03:20:45.700]  результатами, первым результатом сравнения, правда? Ну потому что у нас детерминированы алгоритмы.
[03:20:45.700 --> 03:20:56.540]  Что значит выбирать роддомно? Нет, роддомные алгоритмы нас интересуют, нас интересуют
[03:20:56.540 --> 03:21:18.460]  детерминированные алгоритмы. Я еще не понимаю, что ты говоришь, можно понять? Где я такое написал?
[03:21:18.460 --> 03:21:31.260]  Ну в принципе, в случае Ошки вполне корректно. Ну понятно, что это не совсем формально, но как бы
[03:21:31.260 --> 03:21:35.900]  понятно, что имеется в виду, что T от N меньше либо равно некоторой функции, которая является O от N
[03:21:35.900 --> 03:21:43.420]  log N. Ну да, я думаю так, вполне может быть, скажем так, как говорят в английском языке,
[03:21:43.780 --> 03:21:50.820]  тебя поймут и поймут адекватно. Вот если ты напишешь T от N больше либо равно, чем O от N log N,
[03:21:50.820 --> 03:21:55.980]  то формально говоря это может быть, это ничего не значит, потому что единица это тоже O от N log N.
[03:21:55.980 --> 03:22:09.820]  Да, не T это, но O. Ну тоже поймут. То есть формально мы, конечно, не вводили такого понятия T от N меньше
[03:22:09.820 --> 03:22:28.740]  либо равно, но написать можно будет адекватно. Где? Ну конкретно в нашем контексте нормально,
[03:22:28.740 --> 03:22:37.740]  да. Но именно в случае с Ошкой, меньше либо равно омеге, это конечно бесполезно. Ладно, так вот,
[03:22:37.740 --> 03:22:46.140]  ребята-ребята-ребята-ребята. То есть мы, получается, оперируем три штамма слоев,
[03:22:46.140 --> 03:22:54.980]  смогли доказать то, что у нас идеальная, детерминированная сортировка работает за O от N log N.
[03:22:54.980 --> 03:23:05.820]  Ну да, ну за T это, да. Ну в худшем случае за T это, да. А как мы понимаем, какой нам в вершине,
[03:23:05.820 --> 03:23:13.580]  какие элементы нам сравнить? Или неважно? Ну так это алгоритм задает. Нет, ну просто
[03:23:13.580 --> 03:23:24.780]  от дерева, просто можно по любому алгоритму построить дерево, по сути. Ну вот. Почему?
[03:23:24.780 --> 03:23:35.700]  Да, ну это, ну как бы, ну так поэтому этим деревом мы доказывали оценку с
[03:23:35.700 --> 03:23:41.940]  низу. То есть мы говорим, что высота будет не менее, чем логариф на 2,9 факториал, а этот
[03:23:41.940 --> 03:23:47.540]  это от N log N. Отсюда следует, то есть это омера от N log N. То есть получается, что быстрее,
[03:23:47.540 --> 03:23:53.180]  чем за N log N, мы сортировку не напишем при всем желании. А за N log N мы ее напишем,
[03:23:53.180 --> 03:23:57.100]  потому что у нас есть, вот мы предъявили алгоритм. Так что. Да, высота логарифа.
[03:23:57.100 --> 03:24:09.820]  Нет, вопрос в дереве упоминается только сравнение. То есть мы смогли сделать, то есть как бы мы говорили,
[03:24:09.820 --> 03:24:14.740]  что у нас оказывается, мы не можем сделать алгоритм быстрее, чем log N факториал,
[03:24:14.740 --> 03:24:19.140]  потому что оказывается сравнений в худшем случае нам придется делать log N факториал.
[03:24:19.140 --> 03:24:27.420]  Вот. Ну да. То есть в принципе альтернативное доказание, доказательство без этого дерева
[03:24:27.420 --> 03:24:32.080]  могло выглядеть так. Сделаем, возьмем, то есть алгоритм, то есть наш алгоритм говорит,
[03:24:32.080 --> 03:24:43.860]  сравни вот эти два камешка, да? Мы говорим, что высота больше, чем N log N, ну потому,
[03:24:43.860 --> 03:24:49.780]  что у нас какие-то ветки прекращаются раньше, значит какие-то ветки должны идти дальше. Да,
[03:24:49.780 --> 03:24:55.980]  но мы же вход. И уже исходя из того факта, что мы придумали merge sort, который работает за N log N,
[03:24:55.980 --> 03:25:02.940]  нам нужно не только доказать то, что, не только взять логарифа от N log N,
[03:25:02.940 --> 03:25:08.500]  но еще и построить алгоритм, который делает сортировку за N log N в ранении. Конечно. Да.
[03:25:08.500 --> 03:25:19.700]  Ну да. Ну не двойное, а доказательство с двух сторон. Хочешь доказать что-то оптимальное,
[03:25:19.700 --> 03:25:27.100]  докажи, что а, это достижимо, б, лучше нельзя. Логично. То есть то, что это достижимо,
[03:25:27.100 --> 03:25:33.300]  это merge sort, а то, что лучше нельзя, вот собственно метод с деревом. Да, вот это хорошо,
[03:25:33.300 --> 03:25:37.060]  что уточняем, потому что у вас, кстати, у вас домашнее задание есть на это задачка.
[03:25:37.060 --> 03:25:44.260]  Нужно провести аналогичного рода анализ для следующей задачи. То есть вот тоже самое,
[03:25:44.260 --> 03:25:52.300]  даны те же самые N камешков, и надо их отсортировать. Но кроме этого, вам дано еще число k,
[03:25:52.300 --> 03:26:00.140]  и гарантируется, гарантируется, что каждый камешек находится на расстоянии не более,
[03:26:00.140 --> 03:26:03.780]  чем k от своей правильной позиции в отсортированном массиве.
[03:26:03.780 --> 03:26:21.700]  Вы уже прямо сейчас можете ее сделать. Это будет за N квадрат. А вы уверены,
[03:26:21.700 --> 03:26:33.700]  что нельзя быстрее? Ну, во-первых, это надо доказать. Во-вторых, вы уверены,
[03:26:33.700 --> 03:26:41.540]  что алгоритм нельзя написать быстрее, чем ZNK? Да, давай. Как считать оптимальную симпатику
[03:26:41.540 --> 03:26:48.900]  если у нас два параметра? Так а также. Ну, на самом деле, не надо их считать. Формально так скажем,
[03:26:48.900 --> 03:26:54.980]  достаточно предъявить асимптотику такую, что A быстрее, чем эта асимптотика, нельзя.
[03:26:54.980 --> 03:27:04.740]  А что такое быстрее, если у нас две переменные? Ну, для любых K и N существует такая константа C
[03:27:04.740 --> 03:27:11.900]  больше нуля, что любой алгоритм с параметрами N и K будет работать не менее, чем за C на вашу
[03:27:11.900 --> 03:27:25.500]  функцию от N и K. Ну и что, если у одного есть константа C и у другого есть константа C,
[03:27:25.500 --> 03:27:29.780]  вы берете минимум из этих константов и все равно мажорируется снизу. Так что какая разница?
[03:27:29.780 --> 03:27:51.620]  Ну, теперь надо как бы общую точную функцию поделить. Ну да, для K равно 1 и K равно N мы
[03:27:51.620 --> 03:27:56.660]  вот только что рассмотрели, то есть K равно N это означает просто элементы расположены как угодно,
[03:27:57.620 --> 03:28:04.220]  и мы доказали, что это быстрее, чем Z log N не получится. Но если K равно 1, это означает,
[03:28:04.220 --> 03:28:11.220]  что каждый элемент находится рядом со своей правильной позицией. Поэтому там можно
[03:28:11.220 --> 03:28:18.500]  идти слева направо и сначала понять, кто минимум, первый или второй. Ну вот, взять этот минимум,
[03:28:18.500 --> 03:28:25.100]  потом посмотрите, кто второй, это значит перебрать там, условно, первый, второй,
[03:28:25.100 --> 03:28:32.460]  третий и посмотреть или взять минимум из тех из них, кто не занят. Ну и так далее.
[03:28:32.460 --> 03:28:46.580]  Ну не совсем, вы делаете за от N, потому что вам надо вернуть ответ. Хотя по большому счету да.
[03:28:46.580 --> 03:29:08.020]  Ну типа того. Ну как сказать, если вы создадите от этого памяти,
[03:29:08.020 --> 03:29:12.500]  тоже не страшно в общем-то. Хотя можно удобно считать, что вы возвращаете перестановку.
[03:29:17.580 --> 03:29:27.060]  Чего-чего? Какие соображения? Не понял. Нет, ну а что дальше? Нет,
[03:29:27.060 --> 03:29:32.100]  чтобы обсудить дальше домашку, нужны еще два продвинутых алгоритма. А, не-не-не, вру-вру-вру,
[03:29:32.100 --> 03:29:36.580]  нет. И там есть еще одна задача, которую вы умеете решать. Она называется дек теория.
[03:29:36.580 --> 03:29:48.300]  Да, но дек теория, по сути, это вам нужно просто придумать дек, который, ну придумать дек,
[03:29:48.300 --> 03:29:54.820]  который работает за вот единицы, ну там по аналогии с вектором. Ну одно по аналогии с вектором,
[03:29:54.820 --> 03:29:59.900]  но соответственно, да, там амортизировано. Но внимание, амортизированность нужно доказать
[03:29:59.900 --> 03:30:03.060]  как с помощью метода потенциалов, так и с помощью монеток.
[03:30:03.060 --> 03:30:11.540]  То есть если придумать персистентный дек, то это не зачтется? Ну, формально говоря, зачтется,
[03:30:11.540 --> 03:30:29.100]  в принципе, да. Ну, лучше нет. Давайте вот векторы, нельзя ничего амортизированного там локально
[03:30:29.100 --> 03:30:33.020]  использовать. Лучше вот давайте использовать, то есть как бы все амортизировать надо полностью
[03:30:33.020 --> 03:30:36.300]  использовать. Если будете использовать вектор, значит его тогда тоже придется описывать и
[03:30:36.300 --> 03:30:51.740]  анализировать. Чего? Не, ну почему не обязательно, нет. На массиве можно. Не-не-не, ну сводить
[03:30:51.740 --> 03:30:55.960]  одно к другому не надо. Хочется вот как бы смысл этого в том, чтобы вы как бы потренировались и так
[03:30:55.960 --> 03:31:02.520]  и так делать, только чтобы это не было, что потенциалы мы сводим к монеткам. То есть да,
[03:31:02.520 --> 03:31:05.960]  они там плавно перетекают одно в другое, но тут надо не забыть, что монетки это монетки,
[03:31:05.960 --> 03:31:11.240]  потенциал это потенциал. То есть потенциал говорит, доказательство должно быть, что будем введем вот
[03:31:11.240 --> 03:31:19.960]  такой потенциал и докажем, что относительно его учетная стоимость там адекватная. А, и важный
[03:31:19.960 --> 03:31:25.840]  момент, по памяти, конечно же, должно быть так, что если у вас размер дк равен к, то
[03:31:25.840 --> 03:31:32.920]  соответственно реальный размер памяти, который вы в этот момент используете, не превосходит отка.
[03:31:32.920 --> 03:31:47.320]  Чего делать? Да, конечно. Да, мы лучше, чем истрейлевский вектор.
[03:31:47.320 --> 03:32:11.160]  Зачем? Надо. А что значит делать дек на вектора? Да, только вот есть ограничение по памяти,
[03:32:11.160 --> 03:32:21.000]  напоминаю, да? Нет, тета, тета должно быть. Ну в том плане, что, ну у тебя ж помнишь,
[03:32:21.000 --> 03:32:35.240]  да, не должно быть так, что там условно остался один элемент и вектор на миллион. Ну что-то сделал.
[03:32:35.240 --> 03:32:57.520]  Это уже детали решения там по-разному, можно? Ну это один из вариантов, там разные решения есть.
[03:32:57.520 --> 03:33:12.520]  Нет, я сказал так, если вы, ну там так, если вы используете вектор, то тогда вам придется
[03:33:12.520 --> 03:33:19.600]  описывать, как устроен вектор и доказывать театризированность и с его учетом тоже. Ну был
[03:33:19.600 --> 03:33:23.040]  вопрос просто, можно ли использовать вектор? Если вы не хотите его использовать, можете не
[03:33:23.040 --> 03:33:33.120]  использовать ни в коем случае. Да-да-да, именно. Так, ладно. Значит, идем дальше. Это как бы, да,
[03:33:33.120 --> 03:33:39.360]  MeshStore как бы знаем, это не единственный алгоритм за NLogN, но для следующего классического алгоритма
[03:33:39.360 --> 03:33:50.920]  нам потребуется, конечно, вот эту. Да, это такое абсолютно, вот это называется полное двойчное,
[03:33:50.920 --> 03:33:55.920]  да, внимание, тут написано определение, как видите, на кучи на максимум, да, сразу поговорим,
[03:33:55.920 --> 03:34:01.600]  вот мы будем оговариваться, потому что есть куча на максимум, есть куча на минимум. Ну,
[03:34:01.600 --> 03:34:05.720]  куча на максимум, это когда родитель больше ребенка, куча на минимум, когда родитель меньше
[03:34:05.720 --> 03:34:16.360]  ребенка. Вот здесь сейчас нарисовано куча на максимум. Значит, тут по-разному, ну как бы,
[03:34:17.320 --> 03:34:27.240]  чаще всего мы будем все-таки разговаривать о кучах на минимум. Да, мы говорим говорить о кучах на
[03:34:27.240 --> 03:34:35.040]  минимум, но имейте в виду, что в STL по умолчанию куча на максимум. Ну, куча это при приоритете QI,
[03:34:35.040 --> 03:34:52.600]  конечно. Конечно, будем, вот она тут, где-то она тут даже будет вот, вот, вот, ну да, вот она. Ну,
[03:34:52.600 --> 03:34:57.560]  то есть по большому счету да, то есть смотрите, то есть сразу давайте оговоримся, что на самом деле
[03:34:57.560 --> 03:35:04.400]  сортировать за Эмблоген очень легко, если у нас есть адекватная реализация вот такой структуры
[03:35:04.400 --> 03:35:11.520]  данных. Вот будем говорить, вот давайте, да, вот у нас в этой презентации еще используется понятие
[03:35:11.520 --> 03:35:16.480]  абстрактный тип данных. То есть абстрактный тип данных, это значит, что у вас есть черный ящик,
[03:35:16.480 --> 03:35:22.640]  который вот реализует там, там вот описано какие методы. Как он их реализует, мы не знаем,
[03:35:22.640 --> 03:35:30.440]  мы знаем только, что он их реализует и знаем, за какой асимптотику он это делает. Вот. Хотя,
[03:35:30.440 --> 03:35:34.320]  в общем, в абстрактом типе данных даже асимптотик особо нет, потому что на самом деле это,
[03:35:34.320 --> 03:35:39.720]  ну, фактически интерфейс такой. То есть просто такой, ну вот, то есть может быть, вот вы,
[03:35:39.720 --> 03:35:44.080]  ладно, с вильей вы когда-нибудь будете проходить, вот у вас-то будет какой-нибудь там виртуальные классы.
[03:35:44.080 --> 03:35:49.880]  Бывает, знаете, вы будете реализовать классы, где там метод вообще не реализованный, это нормально.
[03:35:49.880 --> 03:35:55.120]  То есть говорите, то есть это означает, что экземпляр такого класса вы не создадите,
[03:35:55.120 --> 03:36:02.000]  но вот наследники у него будут. Ну, там как-то так это будет. Вот. Так вот. Пока нужно,
[03:36:02.000 --> 03:36:06.920]  знаете, здесь у вас, пусть у вас есть черный ящик, который умеет реализовывать вот эти методы,
[03:36:06.920 --> 03:36:13.200]  то есть прям честно, то есть добавлять элемент, там доставать элемент с наивысшим приоритетом и
[03:36:13.200 --> 03:36:18.400]  там просмотреть элемент с наивысшим приоритетом. Вот предположим, что у вас есть структура данных,
[03:36:18.400 --> 03:36:22.760]  вот мы назовем ее очередь с приоритетом. Если все эти методы вы умеете делать за алгорифом,
[03:36:22.760 --> 03:36:33.520]  то тогда вы без труда сделаете сортировку с очередью с приоритетом. Как вы это сделаете?
[03:36:33.520 --> 03:36:42.600]  Это очень просто. Ну, по сути, поместим, можно просто сказать, поместим все n элементов в эту
[03:36:42.600 --> 03:36:49.400]  структуру, в черный ящик, а потом n раз достанем максимальный элемент и просто будем в классе
[03:36:49.400 --> 03:36:56.760]  справа-налево. То есть, если у вас есть черный ящик с алгорифмическими сложностями,
[03:36:56.760 --> 03:37:03.000]  то вы многое на сортировали уже. Но, как всегда, остается этот черный ящик теперь изобрести.
[03:37:03.000 --> 03:37:08.560]  Но теперь мы забываем о сортировке, теперь наша цель реализовать этот черный ящик так,
[03:37:08.560 --> 03:37:17.120]  чтобы он работал за алгорифм. Как мы это будем делать? Ну, вот, примерно так. Теперь подробнее.
[03:37:17.120 --> 03:37:23.200]  Итак, значит, во-первых, значит, у нас в черном ящике, ну, там разные варианты,
[03:37:23.200 --> 03:37:28.280]  мы могли бы там и овл-дерево, в общем-то, забабахать. Но мы начнем с более простого.
[03:37:28.280 --> 03:37:33.720]  Значит, мы забабахаем, что у нас есть двоичная куча. То есть, двоичная куча – это не просто,
[03:37:33.720 --> 03:37:41.600]  когда любой родитель больше детей, больше любого ребенка своего. Но, что для нас очень важно,
[03:37:41.600 --> 03:37:48.760]  то, что это дерево идеально сбалансировано. Ну, в том плане, что уровни прям заполняются,
[03:37:48.760 --> 03:37:53.760]  прям вот, тут, прям вот, сначала один, потом в следующем уровне два, потом на следующем
[03:37:53.760 --> 03:37:58.760]  уровне четыре и так далее. И каждый уровень заполняется слева направо. Если в таком-то
[03:37:58.760 --> 03:38:09.760]  уровне остановились, ну, значит, так и остановились. То есть, вот. Причем, что самое приятное? Что
[03:38:09.880 --> 03:38:18.000]  такую кучу очень удобно хранить в, обратите внимание, массиве. Особенно массиве,
[03:38:18.000 --> 03:38:28.560]  индексированном с единицы. Почему? Да, просто потому, что, на самом деле, попробую тут день
[03:38:28.560 --> 03:38:34.240]  нарисовать. Что оказывается, если у вас есть элемент номер И, то очень удобно найти его
[03:38:34.240 --> 03:38:50.280]  детей. Это элементы номер 2И и 2И плюс 1. А родитель это И пополам. Что 4Н? Что 4Н? Нет, в памяти Н.
[03:38:50.280 --> 03:38:58.600]  Никаких указателей, с указателями, да, если вы кучу можно на указателях написать, но это будет
[03:38:58.600 --> 03:39:16.320]  реально 4Н. А если в массиве, то ровно Н. Да. Если вы будете писать на указателях, то рядом с каждым
[03:39:16.320 --> 03:39:22.880]  элементом вам придется хранить как минимум два указателя. Налево ребенка и направо. А в массиве
[03:39:22.880 --> 03:39:27.920]  вам это не потребуется, потому что для элемента с номером И, то есть, который лежит в этой ячейке,
[03:39:28.160 --> 03:39:34.800]  оказывается, дети это те, кто лежат в ячейках номер 2И и 2И плюс 1. Все. А если у него прикол очень
[03:39:34.800 --> 03:39:43.120]  интересный, а у последнего элемента же 2Н будет лежать? Не, ну, значит, у Н-го элемента тупо нет
[03:39:43.120 --> 03:39:49.080]  детей. Но если у него есть дети? А у него их нет, потому что у нас куча так устроена, что он на
[03:39:49.080 --> 03:40:01.200]  последнем уровне находится. Так что да, то есть, пожалуйста, то есть, с точки зрения это, то есть,
[03:40:01.200 --> 03:40:09.760]  вот куча звучит так. В корне лежит первый элемент, его детьми левым является А2, этим А3. Потом идут
[03:40:09.760 --> 03:40:16.560]  4 и 5. Вот видите, я прям в порядке заполнения рисую. Если их 5, то будет так. Если 6, то еще вот так.
[03:40:16.560 --> 03:40:33.800]  Если 7, то вот так. Еще есть 8. А причем тут ДОшка вообще? Ну, не знаю. Ну, в ДОшке индексация та же,
[03:40:33.800 --> 03:40:39.840]  но суть принципиально другая. Да, потому что в ДОшке как бы сами элементы находятся в листях,
[03:40:39.840 --> 03:40:44.960]  а в каждой вершине написано какая-то агрегация на подмассиве. А тут принципиальное отличие
[03:40:44.960 --> 03:41:01.960]  от ДОшки, что каждый элемент это реальный элемент. Вот, поэтому... Нет, тут прям жестко,
[03:41:01.960 --> 03:41:08.720]  что расположение элементов именно вот такое. Например, если тут на последнем уровне не 8 элементов
[03:41:08.720 --> 03:41:13.880]  А3, то они расположены именно вот так и не как А3. То есть нет уже этот подвешен сюда, этот сюда,
[03:41:13.880 --> 03:41:26.920]  этот там туда. Вот последний слой заполняется слева направо. Там все написано. Тут это прописано.
[03:41:26.920 --> 03:41:36.120]  Это важный частин вариант. Да, видим, все очень жестко. Ну, поэтому возникает вопрос. Да, ну вот,
[03:41:36.120 --> 03:41:40.440]  это мы поговорили. Ну да, если у нас индексация с нуля, то тут, конечно, плюс-минус единички
[03:41:40.440 --> 03:41:50.720]  начинаются. Поэтому в этом месте лучше жить в один индексации, потому что приятно. Вот,
[03:41:50.720 --> 03:42:00.440]  ну а теперь остается такая очень интересная идея. Если в куче меняется один из элементов. Вот
[03:42:00.440 --> 03:42:07.760]  представим себе, что у нас там в куче... Так, давайте это сотрем. Так, зачем нам эта очередь на
[03:42:07.760 --> 03:42:17.720]  шести стэков? Как мы уже выяснили, она нам все равно не нужна толком. Так, ну вот, то есть давайте
[03:42:17.720 --> 03:42:29.440]  себе представим. Так, значит, смотрите, сейчас шоу мы себе представим. Мы себе представим, что у нас
[03:42:29.440 --> 03:42:39.080]  есть вот мистическая куча. То есть прям большое-большое дерево. Прям очень-очень-очень-очень-очень-очень-очень-очень
[03:42:39.080 --> 03:43:01.400]  большое дерево. Нет, больше не будет. И неожиданно вот этот элемент изменился. Что делать? Но,
[03:43:01.400 --> 03:43:08.680]  оказывается, вы за логорифом можете поменять местами некоторые элементы так, чтобы все поправилось.
[03:43:08.680 --> 03:43:18.560]  Нет, любой один. Нет, если мы там... Ну, как бы эти же элементы вы там как-то переставляете местами так,
[03:43:18.560 --> 03:43:25.840]  чтобы свойство кучи сохранилось. Ну, например, если вы неожиданно... Вот пусть у нас куча на максимум,
[03:43:25.840 --> 03:43:35.160]  и у нас неожиданно элемент увеличился. Тогда оказывается, что... Ну, тогда оказывается,
[03:43:35.160 --> 03:43:41.200]  что достаточно этот элемент просто пропихивать наверх. Ну, в каком плане? Заметим, что кроме этого
[03:43:41.200 --> 03:43:48.040]  элемента всегда верно то, что любой предок больше любого своего потомка, правда? То есть вот этот,
[03:43:48.040 --> 03:43:53.160]  ну, по транзитивности, да? Проблема только с этим элементом. Но пусть он увеличился. Если он увеличился,
[03:43:53.160 --> 03:44:00.040]  то он все еще больше своих потомков, правда? Но единственная будет проблема, что он может оказаться
[03:44:00.040 --> 03:44:08.520]  больше своего родителя, правда? Ну, тогда идея такая. Ой, а давайте-ка их посвапаем. Тогда заметим,
[03:44:08.520 --> 03:44:13.920]  что вот в этом вот поддереве полностью корректная куча, правда? Ну, и вообще она везде корректная.
[03:44:13.920 --> 03:44:20.920]  Любой элемент больше любого своего потомка, если только мы не говорим про этот элемент. Вот,
[03:44:20.920 --> 03:44:25.400]  но этот элемент он больше теперь все еще всего этого поддерева, но может быть меньше вот этого
[03:44:25.400 --> 03:44:30.680]  своего родителя. Если что, значит свапаем. Ну и так далее свапаем до тех пор, пока он не окажется
[03:44:30.680 --> 03:44:38.280]  меньше родителя, ну или там не воцарится в корне. Вот. Эта функция называется shift up.
[03:44:38.280 --> 03:44:47.160]  Shift up, yeah, yeah, shift up, yeah, yeah. Не знаю, так вот, что-то тут начало сифдауна. Ну ладно,
[03:44:47.160 --> 03:45:04.320]  давайте мы вот... О, да, вот такая красота была, да. Вот. Давай. Нет, сейчас увидите. Ну вот,
[03:45:04.440 --> 03:45:09.480]  на самом деле вот shift up в ноль индексации может быть реализован вот примерно вот таким вот простым
[03:45:09.480 --> 03:45:26.360]  вайлом. Видно, да? Понятно, да? Ну вот. Ну а теперь вот shift down. Значит, да, ну зачем нужен shift down?
[03:45:26.360 --> 03:45:49.400]  Ну shift down... А, ну нет, все-таки используется хиппи. Чего? Ну. Это в ноль индексации, да. Просто
[03:45:49.400 --> 03:46:03.800]  это в ноль индексации. Да, это... Да, то мы бы не вычитали, да. Так вот. А теперь просто еще
[03:46:03.800 --> 03:46:10.000]  чит. Значит, смотрите, что делает shift down? Shift down делает ровно то же... То есть он делает то же самое,
[03:46:10.000 --> 03:46:15.640]  если выяснилось, что вот там какой-нибудь вот этот элемент захотелось, он неожиданно уменьшился.
[03:46:15.640 --> 03:46:22.400]  Тогда оказывается наоборот, он заведомо меньше родителя, но может так оказаться, что он оказался
[03:46:22.400 --> 03:46:29.240]  меньше какого-то своего ребенка. Какого-то, обратите внимание. Что тогда делать? Ну тогда
[03:46:29.240 --> 03:46:36.960]  мы смотрим на обоих детей, смотрим, кто из этих ребенков больше. Ну, допустим, вот этот. Ну да,
[03:46:36.960 --> 03:46:43.760]  допустим, вот этот. И тогда свапаем, да, свапаем их. Вот это больший ребенок. Теперь заметим,
[03:46:43.760 --> 03:46:48.920]  что этот больший ребенок, он как бы больше этого элемента, поэтому теперь в куче никаких проблем,
[03:46:48.920 --> 03:46:53.960]  кроме этого элемента, нет. То есть любой предок больше любого потопка. Но теперь вот этот элемент,
[03:46:53.960 --> 03:47:01.560]  он снова может оказаться меньше какого-то своего ребенка. Но, допустим, на этот раз вот этого. Ну и
[03:47:01.560 --> 03:47:06.200]  тогда, значит, свапаем с ним и опять. И может так оказаться, что у вершин вообще стал только один
[03:47:06.200 --> 03:47:11.440]  ребенок, и этот случай тоже надо рассмотреть. Но тут просто, если этот один ребенок, но этот
[03:47:11.440 --> 03:47:15.600]  ребенок больше нас, значит мы тут тоже свапаем. Если мы уже дошли и ребенков нет, значит
[03:47:15.600 --> 03:47:20.640]  останавливаемся. Ну и, конечно же, если мы уменьшили, и в какой-то момент обнаружили, что элемент
[03:47:20.640 --> 03:47:30.520]  оказался больше своих детей, значит в этом месте тоже нужно остановиться. Вот. И в результате получается,
[03:47:30.520 --> 03:47:43.560]  в общем-то, видите, чуть более сложный код, чем у сифтапа. Вот. Но, как бы, сложность такая незначительная.
[03:47:43.560 --> 03:48:05.000]  Давай. А что означает слово сифт? А что такое? Ой, а куда у меня штучка? Ладно, придется ключ.
[03:48:05.000 --> 03:48:17.600]  А, ну да, тут картинки, если надо есть. А, но на самом деле, смотрите, как строится куча. Да, кто-то мог
[03:48:17.600 --> 03:48:23.040]  сказать, что давайте просто делаем и это, да вот, ам. Ну, то есть, как вставить элемент в кучу вообще, да?
[03:48:23.040 --> 03:48:28.680]  Теоретически просто попушбэкать элемент, да, и просто попушбэкать элемент и сделать от него сифтап,
[03:48:28.680 --> 03:48:36.360]  правда? Но на самом деле, если у вас есть n элементов, то на самом деле, оптимальнее сделать по-другому,
[03:48:36.360 --> 03:48:50.200]  пробежаться с конца к началу и у каждого элемента сделать сифтдаун. А? Вот, оказывается, да, что это
[03:48:50.200 --> 03:48:56.640]  круто по асимтотике. Ну, во-первых, да, понятно ли, почему это вообще работает правильно? Ну, то есть,
[03:48:57.000 --> 03:49:04.320]  просто после каждого сифтдауна получится, что сифтдаун отсюда, по дереву этой вершины,
[03:49:04.320 --> 03:49:16.400]  образует корректную кучу. Вот. Ага. Не, ну не по сортили, в данном случае, мы строим кучу. Мы не
[03:49:16.400 --> 03:49:21.440]  сортим. То есть, мы именно строим кучу. Вот, оказывается, пробегаемся снизу вверх по дереву и
[03:49:21.440 --> 03:49:48.200]  делаемся вдаун. Оказывается, что так куча строится за лигию. Ну, половина, ну и что? Не, ну. Ну,
[03:49:48.200 --> 03:49:52.680]  потому что есть подозрение, что первый элемент, у которого есть ребенок, имеет номер ровно n
[03:49:52.680 --> 03:50:04.480]  пополам. Ну, или в ноль индексации n пополам минус 1. А, да, да, правда. Да, но могли бы писать от
[03:50:04.480 --> 03:50:10.080]  n до одного пробежаться, не поменял бы ничего. Ну вот, теперь смотрите, теперь давайте внимательно
[03:50:10.080 --> 03:50:18.780]  думать. Давайте теперь, теперь смотрите. Теперь давайте вот каждую, каждую вершину говорить,
[03:50:18.780 --> 03:50:24.360]  какая у нее высота, причем высоту на этот раз будем мерить как глубину под дерево. То есть, у этих
[03:50:24.360 --> 03:50:31.160]  вершин высота ноль, у этих высота один, у этих высота два, три, четыре и так далее, да. Причем,
[03:50:31.160 --> 03:50:36.360]  причем там амортизированность? Ну, не важно, ладно, давайте считать, что там. Ну ладно,
[03:50:36.760 --> 03:50:42.080]  теперь смотрите, утверждение. На уровне h, то есть там вершин, у которых глубина h,
[03:50:42.080 --> 03:50:50.040]  как бы есть подозрение, что не более чем n поделить на два степени, там h0, там плюс один.
[03:50:50.040 --> 03:50:58.640]  Снизу? Снизу. То есть вот, например, если у нас, ну вот, ну, например, там, если у нас глубина 0,
[03:50:58.640 --> 03:51:04.280]  то есть вот на этом уровне находится не более чем n пополам вершин. На этом не более чем там n
[03:51:04.280 --> 03:51:10.120]  поделить на 4, ну и так далее. А, ну и тем более, что тут еще вот эти тоже считаются, видите, да? Вот.
[03:51:10.120 --> 03:51:16.600]  И тогда начинается очень интересное суммирование. Уровней у нас всего от 0 до алгоритма, и мы суммируем,
[03:51:16.600 --> 03:51:26.640]  то есть получается вот столько вершин, и shift down мы делаем на уровне h за o от h, правда? Или нет?
[03:51:26.640 --> 03:51:36.960]  То есть получается, что это o от n умножить на вот такую интересную, вот такую, на сумму вот такого,
[03:51:36.960 --> 03:51:41.760]  но это не ряд, конечно, но вот такой последовательность. Ну а теперь мистическое утверждение. Да,
[03:51:41.760 --> 03:51:46.600]  можно просто там, что когда-нибудь в ботанализе вы докажете, что на самом деле, если эту сумму
[03:51:46.600 --> 03:51:56.000]  взять до бесконечности, то она равна двойке. Вот. А сейчас мы не можем? Можем. Элементарно можем.
[03:51:56.000 --> 03:52:01.780]  Сатрить. На самом деле элементарно. Сейчас я вам, собственно, сейчас покажу, тут сейчас просто это
[03:52:01.780 --> 03:52:10.720]  красиво на пальцах делается, смотрите. Итак, что мы делаем, да? h, то есть получается у нас есть 1
[03:52:10.760 --> 03:52:17.880]  1 делить на 2 в 1, плюс 2 делить на 2 в квадрате, плюс 3 делить на 2 в 3, плюс 4 делить на 2 в 4,
[03:52:17.880 --> 03:52:26.200]  плюс 5 делить на 2 в 5, плюс там 6 делить на 2 в 6, плюс и так далее. Смотрите, как мы это запишем,
[03:52:26.200 --> 03:52:30.040]  Смотрите, я это запишу в виде вот такой пирамидки, смотрите.
[03:52:30.040 --> 03:53:00.040]  Одна вторая, одна четвертая, одна восьмая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцат
[03:53:00.040 --> 03:53:30.040]  шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая,
[03:53:30.040 --> 03:53:40.640]  одна шестнадцатая, одна шестнадцатая, одна шестнадцатая,
[03:53:40.640 --> 03:53:52.440]  одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая, одна шестнадцатая,
[03:53:52.440 --> 03:53:54.460]  одна шестнадцатая, uma, Gymno's embellishment,
[03:53:54.460 --> 03:53:55.460]  Да.
[03:53:55.460 --> 03:53:59.020]  Но там, конечно, чтобы доказать полную сумму, конечно, это
[03:53:59.020 --> 03:54:01.300]  надо там более аккуратно предел доказывать, но,
[03:54:01.300 --> 03:54:02.940]  в принципе, для наших целей этого достаточно.
[03:54:02.940 --> 03:54:06.540]  Потому что нам достаточно, правда, что эта сумма не
[03:54:06.540 --> 03:54:07.540]  происходит два.
[03:54:07.540 --> 03:54:08.540]  Следовательно, вот.
[03:54:08.540 --> 03:54:14.100]  А, ну, только тут С-шка забыта, конечно, немножко, но это
[03:54:14.100 --> 03:54:15.100]  не глобально.
[03:54:15.100 --> 03:54:18.460]  А, хотя С-шка не забыта, потому что есть О-шка, да.
[03:54:18.460 --> 03:54:22.380]  Так что вот такая получилась красота.
[03:54:23.380 --> 03:54:26.380]  То есть, оказывается, хип можно еще и за линию построить.
[03:54:26.380 --> 03:54:29.380]  Но, обратите внимание, это только хип, это еще не сортировка.
[03:54:29.380 --> 03:54:30.380]  Боже упаси.
[03:54:31.380 --> 03:54:32.380]  Вот, ну да.
[03:54:33.380 --> 03:54:36.380]  А, ну, а, еще момент, конечно.
[03:54:36.380 --> 03:54:38.380]  Ради чего мы этот хип вообще писали?
[03:54:38.380 --> 03:54:40.380]  Извлечение элемента.
[03:54:40.380 --> 03:54:42.380]  Как извлечь элемент?
[03:54:42.380 --> 03:54:44.380]  Да, ну, очень просто.
[03:54:44.380 --> 03:54:48.380]  Свопнуть с этим последним, отпилить этого последнего ребенка
[03:54:48.380 --> 03:54:51.380]  и сказать, что, ой, могут быть проблемы в корне, давайте
[03:54:51.380 --> 03:54:52.380]  возьмем его севдалм.
[03:54:52.380 --> 03:54:57.380]  То есть, получается, тоже такой красивый логарифм.
[03:54:57.380 --> 03:55:00.380]  Так что тут, в общем-то, не очень интересно.
[03:55:00.380 --> 03:55:04.380]  Вот, экстракт МАКС, видите, он работает за О от единицы
[03:55:04.380 --> 03:55:06.380]  плюс севдалм.
[03:55:09.380 --> 03:55:10.380]  Да.
[03:55:11.380 --> 03:55:12.380]  Так.
[03:55:14.380 --> 03:55:18.380]  Вот, да, нет, я как раз просматриваю зато, что я просто хочу
[03:55:18.380 --> 03:55:19.380]  сейчас закончить с кучей.
[03:55:20.380 --> 03:55:21.380]  Да.
[03:55:21.380 --> 03:55:24.380]  Ну, чтобы в следующий раз как бы с кучей не начинать.
[03:55:25.380 --> 03:55:33.380]  Да, в следующий раз мы начнем с воспоминания кусорта.
[03:55:33.380 --> 03:55:36.380]  Ну, там, ладно, если кому интересно, там, так, ладно,
[03:55:36.380 --> 03:55:39.380]  это мы промотаем, а вот тут начнется мясо, это вам
[03:55:39.380 --> 03:55:41.380]  потребуется в третьей домашней задаче.
[03:55:41.380 --> 03:55:43.380]  Кстати, сложные задачи сразу предупреждаю.
[03:55:45.380 --> 03:55:48.380]  Ну, можете забить, но она 6 баллов весит, поэтому
[03:55:48.380 --> 03:55:49.380]  тогда нельзя.
[03:55:49.380 --> 03:55:51.380]  Так что нет, тут поятия у нас подряд.
[03:55:51.380 --> 03:55:53.380]  А дедлайны работают еще раз?
[03:55:53.380 --> 03:55:56.380]  Ну, так и работают, там, адекватная, собственно,
[03:55:56.380 --> 03:56:00.380]  адекватная посылка должна быть сделана до дедлайна.
[03:56:00.380 --> 03:56:03.380]  А если после дедлайна это типа не считаться будет?
[03:56:03.380 --> 03:56:04.380]  Ну, да.
[03:56:04.380 --> 03:56:06.380]  А если я немного подправил и после дедлайна вообще
[03:56:06.380 --> 03:56:08.380]  чуть-чуть там подкорректировал, буквально?
[03:56:08.380 --> 03:56:09.380]  Ну, смотрите, там два варианта.
[03:56:09.380 --> 03:56:12.380]  Если проверяющий не успел добраться до вашей задачи,
[03:56:12.380 --> 03:56:14.380]  то как бы, ну, значит он последнюю версию прочтет
[03:56:14.380 --> 03:56:15.380]  и будет нормально.
[03:56:16.380 --> 03:56:17.380]  Что считается адекватным посылком?
[03:56:18.380 --> 03:56:19.380]  Ну...
[03:56:19.380 --> 03:56:22.380]  То есть если, например, задалить решение, которое
[03:56:22.380 --> 03:56:25.380]  на самом деле неправильно, считается адекватным?
[03:56:25.380 --> 03:56:28.380]  Ну, скажем так, если оно доводится, скажем так,
[03:56:28.380 --> 03:56:32.380]  ну, тут, конечно, такая неформальная замечание,
[03:56:32.380 --> 03:56:35.380]  но обычно так, то есть если вы там целенаправленно
[03:56:35.380 --> 03:56:37.380]  посылали условно чистые лица или просто какую-то
[03:56:37.380 --> 03:56:39.380]  бла-бла-бла, чтобы сделать вид, что вы что-то сделали,
[03:56:39.380 --> 03:56:42.380]  то это будет реджектно и сдавать задачу дальше нельзя.
[03:56:43.380 --> 03:56:44.380]  То это тогда не считается.
[03:56:44.380 --> 03:56:47.380]  Но если вы как бы заслали действительно какой-то
[03:56:47.380 --> 03:56:49.380]  действительно адекватный, действительно там
[03:56:49.380 --> 03:56:52.380]  добросовестные решения, в котором обнаружились ошибки,
[03:56:53.380 --> 03:56:54.380]  то есть может не тривиальные.
[03:56:54.380 --> 03:56:58.380]  Ну, тогда, конечно, эти ошибки можно и нужно исправлять.
[03:56:58.380 --> 03:57:02.380]  Нет, а если, например, доказал задачу по мастер-тиореме,
[03:57:02.380 --> 03:57:05.380]  заслал до дедуайна, а потом после дедуайна вспомнил,
[03:57:05.380 --> 03:57:07.380]  что мастер-тиорема тут не работает?
[03:57:07.380 --> 03:57:11.380]  Но если бы такое требование было, а мастер-тиорема
[03:57:11.380 --> 03:57:13.380]  у нас можно пользоваться, напоминаю.
[03:57:13.380 --> 03:57:15.380]  Не работает, потому что...
[03:57:15.380 --> 03:57:16.380]  Нет, если вы...
[03:57:16.380 --> 03:57:17.380]  Нет, если, например...
[03:57:18.380 --> 03:57:20.380]  Скажем так, если мы в явном виде говорили на паре,
[03:57:20.380 --> 03:57:21.380]  что нельзя пользоваться...
[03:57:21.380 --> 03:57:23.380]  Ладно, давайте не мастер-тиоремой, чтоб не путаться.
[03:57:24.380 --> 03:57:28.380]  Нельзя пользоваться тем, что там системы Кремля красные
[03:57:28.380 --> 03:57:29.380]  московского.
[03:57:30.380 --> 03:57:32.380]  Нет, там сейчас просили про то, что в этом случае
[03:57:32.380 --> 03:57:35.380]  мастер-тиорема не работала, но ее и применили к задаче.
[03:57:36.380 --> 03:57:38.380]  Она не корректно применялась была.
[03:57:39.380 --> 03:57:41.380]  Ну, если не корректно, мы подумаем.
[03:57:42.380 --> 03:57:43.380]  Как бы, возможно, мы посчитаем, что...
[03:57:43.380 --> 03:57:45.380]  Возможно, какие-то баги мы подумаем, что это слишком
[03:57:45.380 --> 03:57:49.380]  тупая бага, чтобы верить, что вы там вот так
[03:57:49.380 --> 03:57:50.380]  добросовестно заглючили.
[03:57:51.380 --> 03:57:52.380]  Дедлайн закончился, да?
[03:57:52.380 --> 03:57:53.380]  Ну, дедлайн закончился, да.
[03:57:54.380 --> 03:57:56.380]  А можно было мастер-тиорему использовать?
[03:57:57.380 --> 03:57:58.380]  Нет, везде можно было.
[03:57:59.380 --> 03:58:01.380]  Там, кажется, нигде не подходило мастер-тиорема.
[03:58:02.380 --> 03:58:04.380]  Где можно было свести к мастер-тиореме?
[03:58:05.380 --> 03:58:06.380]  Нет, ну где-то...
[03:58:06.380 --> 03:58:07.380]  Ну, не помню.
[03:58:07.380 --> 03:58:08.380]  Может быть, где-то и можно, не помню.
[03:58:08.380 --> 03:58:09.380]  А может и нет.
[03:58:09.380 --> 03:58:10.380]  Нет, нет, смотрите, смысл...
[03:58:11.380 --> 03:58:13.380]  Смотрите, после дедлайна задача сдавать имеет смысл,
[03:58:14.380 --> 03:58:16.380]  но проверяться они будут с, соответственно,
[03:58:16.380 --> 03:58:17.380]  низким приоритетом.
[03:58:18.380 --> 03:58:20.380]  Ну, то есть понятно, что, во-первых, будут...
[03:58:21.380 --> 03:58:23.380]  Ну, как бы, проверяться будут по ссылке, естественно,
[03:58:23.380 --> 03:58:24.380]  в первую очередь, с дедлайном.
[03:58:25.380 --> 03:58:26.380]  Вот.
[03:58:26.380 --> 03:58:27.380]  То есть там...
[03:58:27.380 --> 03:58:29.380]  Ну, то есть, по большому счету, вот, надеюсь, что,
[03:58:29.380 --> 03:58:31.380]  видимо, сегодня уже они будут начать и проверяться.
[03:58:32.380 --> 03:58:33.380]  Вот, собственно, вот.
[03:58:34.380 --> 03:58:35.380]  Вот.
[03:58:36.380 --> 03:58:38.380]  Ну да, ну, как бы дедлайн.
[03:58:38.380 --> 03:58:39.380]  Да.
[03:58:42.380 --> 03:58:47.380]  Соответственно, но потом...
[03:58:48.380 --> 03:58:50.380]  Ну, понятно, что ассистент, который будет это проверять,
[03:58:50.380 --> 03:58:51.380]  он как бы это...
[03:58:51.380 --> 03:58:56.380]  Называется занятой человек, он там еще что-то в этой
[03:58:56.380 --> 03:58:58.380]  жизни не занимается, ну там на пары ходит, и так далее.
[03:58:58.380 --> 03:59:00.380]  Тренируется там, и т.д.
[03:59:00.380 --> 03:59:07.380]  Поэтому, может быть, проверять он будет не всегда постоянно,
[03:59:07.380 --> 03:59:10.380]  но в любом случае он будет проверить актуальные пострелки,
[03:59:10.380 --> 03:59:12.380]  потом только в последней очереди, если ничего нет,
[03:59:12.380 --> 03:59:15.380]  то тогда он когда-нибудь проверит то, что после дедлайна.
[03:59:15.380 --> 03:59:17.380]  То есть, не гарантируешь, что они вообще будут проверены когда-либо?
[03:59:17.380 --> 03:59:21.380]  Нет, когда-либо они, конечно, проверены будут, но, естественно, это уже будет позже.
[03:59:21.380 --> 03:59:28.380]  То есть, единственное такое, что разные детали могут быть, то есть, конечно...
[03:59:28.380 --> 03:59:36.380]  Так что, послать всегда имеет смысл, но просто, скажем так, чем позже вы пошлете,
[03:59:36.380 --> 03:59:42.380]  тем больше шансов, что он проверит это очень поздно,
[03:59:42.380 --> 03:59:44.380]  ну и, соответственно, штраф по баллам.
[03:59:45.380 --> 03:59:47.380]  Так же, соответственно.
[03:59:48.380 --> 03:59:51.380]  Так, ну что? Давай.
[03:59:51.380 --> 03:59:54.380]  Как мы экстракт максимум делаем еще раз, то есть мы...
[03:59:54.380 --> 03:59:58.380]  Ну, смотри, свапаем первый корень сценным элементом вот последним листом, да?
[03:59:58.380 --> 03:59:59.380]  А, и делаем севдал?
[03:59:59.380 --> 04:00:03.380]  Да, ну, нет, во-первых, нет, мы делаем поп-бэк, то есть удаляем этот последний элемент,
[04:00:03.380 --> 04:00:06.380]  и после этого у корня делаем севдал.
[04:00:06.380 --> 04:00:07.380]  Да.
[04:00:09.380 --> 04:00:11.380]  Так, ну еще, еще вопросы?
[04:00:14.380 --> 04:00:15.380]  Вот, еще.
[04:00:15.380 --> 04:00:16.380]  Еще.
[04:00:28.380 --> 04:00:29.380]  Не совсем.
[04:00:30.380 --> 04:00:33.380]  Хотя все остальные кучи действительно будут.
[04:00:35.380 --> 04:00:36.380]  О, видали?
[04:00:37.380 --> 04:00:39.380]  А, ну это так, это уже мелочи, но вот досюда интересно.
[04:00:39.380 --> 04:00:40.380]  И вот.
[04:00:45.380 --> 04:00:46.380]  Разобрали.
[04:00:46.380 --> 04:00:48.380]  Еще перед самой кучей.
[04:00:51.380 --> 04:00:53.380]  Так что вот, так, еще вопросы?
[04:00:55.380 --> 04:00:57.380]  Так вот, я тебя спрашиваю, есть ли вопросы?
[04:00:59.380 --> 04:01:00.380]  Что?
[04:01:00.380 --> 04:01:03.380]  А, кстати, ну да, в свое время скину, да.
[04:01:04.380 --> 04:01:06.380]  Ну, в группу, как всегда куда.
[04:01:09.380 --> 04:01:14.380]  Ну, пока это бессмысленно, потому что мы TeamSort еще не обсудили, мы с этого начнем в следующий раз.
[04:01:15.380 --> 04:01:18.380]  Вопросы не совсем по теме, но у нас будут параллельные алгоритмы?
[04:01:20.380 --> 04:01:23.380]  Смотрите, сформулируем аккуратно.
[04:01:23.380 --> 04:01:26.380]  Курс с таким названием у вас будет в четвертом семестре.
[04:01:26.380 --> 04:01:28.380]  Причем уже без меня.
[04:01:29.380 --> 04:01:30.380]  Вот.
[04:01:30.380 --> 04:01:33.380]  Причем более того, насколько я знаю, это будет скорее всего не математически.
[04:01:33.380 --> 04:01:35.380]  Курс, это будет больше такой...
[04:01:35.380 --> 04:01:36.380]  Ну, сформулируем так.
[04:01:36.380 --> 04:01:42.380]  На самом деле, на третьем курсе у вас должен быть такой предмет, как распределенные параллельные вычисления.
[04:01:43.380 --> 04:01:44.380]  Вот.
[04:01:44.380 --> 04:01:51.380]  То есть параллельные алгоритмы это такая, некоторая подготовочка, где там, ну, вот вы будете хоть что-то делать, хотя бы внутри языка C++.
[04:01:51.380 --> 04:01:52.380]  Что внутри языка C++?
[04:01:52.380 --> 04:01:54.380]  Там тоже есть там всякие треды и так далее.
[04:01:55.380 --> 04:01:58.380]  Ну, и там какую-то параллельность там у себя локально запускать можно.
[04:01:58.380 --> 04:02:01.380]  Ну, вот какие-то вот базовые вещи вы там будете рассматривать.
[04:02:01.380 --> 04:02:05.380]  А потом там будут распределенные вычисления, где-то вы будете реально там на кластерах уже кодить.
[04:02:06.380 --> 04:02:08.380]  Раскодирование считается?
[04:02:08.380 --> 04:02:09.380]  Чего?
[04:02:09.380 --> 04:02:11.380]  Чего раскодирование?
[04:02:11.380 --> 04:02:13.380]  Чего вопрос какой-то был?
[04:02:13.380 --> 04:02:14.380]  Нет?
[04:02:14.380 --> 04:02:16.380]  Так, еще вопросы?
[04:02:20.380 --> 04:02:21.380]  Нету?
[04:02:21.380 --> 04:02:23.380]  Ну, тогда на сегодня все.
[04:02:36.380 --> 04:02:38.380]  Благодарю.
