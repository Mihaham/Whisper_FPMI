[00:00.000 --> 00:09.000]  значит давайте краткое содержание предыдущих серий ладно код попробуем не писать на этот раз
[00:09.000 --> 00:16.400]  или почти не писать так туда дот но так давайте я просто забыл все цвета которые мы все это
[00:16.400 --> 00:23.760]  рисовали так вот напомните мы бенемиальные деревья эти псевдобенемиальные деревья мы
[00:23.760 --> 00:33.120]  какими цветами рисовал так пиолетовым хорошо так значит давайте так вот у нас были фиолетовые
[00:33.120 --> 00:39.520]  деревья у них был фиолетовый next и фиолетовый вот фиолетовый брат которого мы назвали next и
[00:39.520 --> 00:47.200]  фиолетовый ребенок которого мы назвали child вот то есть это вот все у нас было было было было было
[00:47.200 --> 00:53.360]  то есть причем там дирея были конечно не совсем сбалансированная но гарантировалось что у каждой
[00:53.360 --> 01:05.120]  вершины ребенок и брат одинакового ранга так ранг мы чем обозначали а логично да да был у нас
[01:05.120 --> 01:14.960]  ранг а и был у нас коричневый да так собственно каждое дерево мы оборачивали в голову и
[01:14.960 --> 01:25.120]  собственно что такое у нас собственно soft hip это вот такое двоичное такие вот такая цепочка
[01:25.120 --> 01:32.520]  хедов более известная в науке как двусвязанный список мы знали что значит у каждой из них тут
[01:32.520 --> 01:41.200]  есть какие-то деревья деревья строго возрастающих рангов по крайней мере если верить корню то есть
[01:41.760 --> 01:49.240]  деревья конечно да если у вас там ранг 8 значит значит там в дереве 256 ключей да мы тут деревья
[01:49.240 --> 01:54.400]  храним крыши экзотические тут крыши вершин будет не 256 да а сколько там вершин кстати будет
[01:54.400 --> 02:05.240]  меньше так вот давайте задачка на воспоминание предположим что мы храним вот софт хип в котором
[02:05.240 --> 02:10.880]  есть 256 ключей ничего не попортилось сколько сколько вершиночек будет соответствующим
[02:10.880 --> 02:33.760]  дереве мимо мимо да вот 511 конечно но все очень просто потому что это будет потому что это
[02:33.760 --> 02:40.320]  будет идеальное такое дерево высоты соответственно 8 высоты по ребрам да и количество листов у вас
[02:40.320 --> 02:46.640]  будет равно там 256 потому что помним да что каждая вершинка просто идет по мэксом до вот уровня
[02:46.640 --> 02:52.280]  листа ну в идеале конечно вот поэтому получается у вас такое полное двоичное дерево и на нижнем
[02:52.280 --> 03:02.520]  уровне 256 листов следует на вершинту 256 128 432 и так далее до одного это естественно 511 вот так
[03:02.520 --> 03:11.000]  ну окей разомнулись как говорится да дальше будет сложнее конечно вот а ну самое главное так
[03:11.000 --> 03:19.640]  какого цвета какого цвета мы забыли вот да совершенно верно то есть мы не просто тут
[03:19.640 --> 03:28.520]  еще это мы еще да для каждой вершины храним минимум на суффиксе ну конечно деревья у нас
[03:28.520 --> 03:35.480]  ну если брать уж все цвета то мы помним что дерево устроен экзотическим образом что ну понятно
[03:35.480 --> 03:39.760]  что все эти вершины соответствуют как бы одному ключу но на самом деле они все соответствуют
[03:39.760 --> 03:47.400]  одному какому-то веселому листу ключей то есть мы говорим что все эти ключи у нас ключи у нас
[03:47.400 --> 03:52.640]  проходят под кодовым названием сики который находится вот здесь сики мы обозначали кажется
[03:52.640 --> 04:01.280]  рыженьким было дело да так так ну что вот сики тут вот абсолютно такой же сики вот мы
[04:01.280 --> 04:08.040]  гарантируем шести больше набираем всего того что тут вот в этом списке находится и помним
[04:08.040 --> 04:13.840]  да что то есть идея у нас то есть идея в том что да мы хотим делать пенмяльную кучу но при
[04:13.840 --> 04:19.600]  этом некоторые элементы объединять в такие классы эквивалентности и собственно сравнивать
[04:19.600 --> 04:26.520]  их по соответствующей этим сике вот тоже соответственно да в прошлый раз мы прям
[04:26.520 --> 04:39.400]  очень подробно с этим да ну как сказать ну можно сказать что ранг это такая мистическая величина
[04:39.400 --> 04:46.080]  которая хранится в вершине там ну там связь ее хоть какой-то реальностью могла бы быть так то
[04:46.080 --> 04:52.920]  есть ранг это то есть ранг это фактически если если бы ничего не удаляли ничего не портили то
[04:52.920 --> 04:59.760]  сколько деревен вот то тогда собственно как то есть какого ранга это было бы как биномиальное
[04:59.760 --> 05:07.560]  дерево вот можно так сказать вот мой но это ну или сказать что там есть и ранг като значит
[05:07.560 --> 05:13.400]  соответственно эта вершина составлена из 20 из там два степени как ключей например ну или как-то так
[05:13.400 --> 05:34.760]  психологически так а что нам надо от него требовать нет просто два но первых просто два
[05:34.760 --> 05:40.400]  степеника а вторых тут имеется в виду следующее то это мы в прошлый раз говорили о том что каждой
[05:40.400 --> 05:48.800]  вершине может соответствовать набор ключей которые были когда-то во всех деревьях из которых
[05:48.800 --> 05:55.920]  это дерево составлено вот то есть как бы да каждый раз когда мы там какой-нибудь ключик удаляем как
[05:55.920 --> 06:02.280]  говорится до вызываем сифта память остается вот помним у нас оказалось так интересно что у каждой
[06:02.280 --> 06:07.200]  вершины соответственно ранга к таких вершин как можно по индукции доказать ровно два степеника
[06:07.200 --> 06:18.000]  вот то есть по аннот память все время остается вот но вот но собственно отсюда и следующее как
[06:18.000 --> 06:25.040]  минимум и ранг не превосходит логарифма но она самом деле сейчас мы тут то есть по но то есть
[06:25.040 --> 06:29.240]  из этого уже следует что там все этом а симптоме не происходит логарифма а если еще и тут вот
[06:29.240 --> 06:38.160]  называется по шамане то симптомика будет еще меньше оказывается ну да ну сейчас будем
[06:38.160 --> 06:43.480]  вспоминать потому что ну помните какая у нас была идея когда мы пытаемся вот дли вот если
[06:43.480 --> 06:49.520]  вспоминать дельфин основная его идея была следующим следующее мы лезли собственно в вершину с
[06:49.520 --> 06:56.280]  минимальным секеем и лезли в ее список достаем из этого списка рандомный элемент и говорим что
[06:56.280 --> 07:04.000]  вот поздравляю это минимум давайте его дали вот но если выясняется что этот список пустой
[07:04.000 --> 07:12.720]  то неожиданно но то выясняется но то тогда что мы делаем мы вызываем от этой вершины но
[07:12.720 --> 07:19.320]  точнее не вызываем си а сначала проверяем сколько детей у этой вершины если выяснилось что меньше
[07:19.320 --> 07:25.240]  чем ранг пополам то тогда мы объявляем что этой вершины больше нет все оставшиеся эти
[07:25.240 --> 07:31.880]  деревья объявляются отдельными деревьями и вы их в мэл живаем обратно а если детей достаточно
[07:31.880 --> 07:45.560]  много то мы пытаемся обойтись своими силами и вызываем функцию сифт вот было дело что ну да
[07:45.560 --> 07:54.520]  вот вот сегодня мы попробуем выжимать еще круче но давай но давайте для начала вот
[07:54.520 --> 08:01.520]  посмотрим на код значит как у нас это так значит пишем сифт значит функция соответственно у нас
[08:01.520 --> 08:14.240]  воидовая так так ну придется нет ну как сказать я могу короче попытаться описать на пальцах
[08:14.240 --> 08:30.320]  ну естественно с использованием эпсилона без этого никак но вот но давайте так
[08:32.080 --> 08:37.400]  показала практика полно если мы начнем писать код может легче будет хотя хотя хотя хотя ну
[08:37.400 --> 08:43.040]  давайте смотреть вот допустим нам передали там как-то она как-то у нас называется там
[08:43.040 --> 08:54.160]  нодя звездочка допустим рут вот то есть цель такая что я считаю что у меня в кое вот мне
[08:54.160 --> 09:00.440]  да но корректное дерево я знаю что у меня там в корневом листе ничего нет я хочу
[09:00.440 --> 09:05.000]  собственно это испорт то есть хочу этот лист удалить и откуда-то из детей собственно там
[09:05.000 --> 09:11.320]  что-то подковырять но для этого я буду говорить что если подковыривать нечего то есть если
[09:11.320 --> 09:19.040]  выясняется что значит если выясняется что не там что там было в начале написано рут блабла
[09:19.040 --> 09:32.240]  next да то есть если соответственно рут next у нас нету но вот 100 вот то соответственно что
[09:32.240 --> 09:43.840]  мы тогда делаем но вот но мы объявляем что рут сикей тогда у нас там рут сикей равно плюс
[09:43.840 --> 09:51.800]  бесконечность ну и соответственно выбрасываемся вот ну можно было еще там какой-то лист наверное
[09:51.800 --> 09:55.360]  составит в общем-то плюс бесконечность это означает что как бы ничего нет ничего не
[09:55.360 --> 10:02.200]  можем сделать вот так но если выяснилось что next есть и соответственно часть есть то мы
[10:02.200 --> 10:09.320]  естественно каза то казалось бы мы тут запускаемся тут чуть пониже напишу то есть берем этот рут
[10:09.320 --> 10:16.440]  next и пытаемся что-то выковыривать уже из него что-то выковыривать это означает вызваться рекурсивно
[10:16.440 --> 10:32.600]  было дело да вот ну почему пока прям сразу вот да ну ну не совсем так на самом деле когда мы
[10:32.600 --> 10:38.200]  только начали shift практически с самого начала это и делаем так но теперь пришло время но вот
[10:38.200 --> 10:43.520]  разобраться да вы тут что-то поковыряли сикей там мог и поменяться скорее всего увеличится
[10:43.520 --> 10:50.920]  поэтому что мы делаем поэтому мы конечно объявляем что если оказалось что давайте
[10:50.920 --> 11:02.840]  рыженьким пишем действительно рут чайлд если у чайлда сикей оказался неожиданно меньше чем
[11:02.840 --> 11:14.520]  рут чайлд ту рут next сикей то мы неожиданно то мы тогда ну ничего неожиданного не делаем то
[11:14.520 --> 11:32.200]  мы неожиданно объявляем swap swap соответственно от рут чайлда и рут next вот после этого там
[11:32.200 --> 11:40.880]  и я но вот ну мы естественно теперь должны скопировать в себя новый сикей рут сикей равно
[11:40.880 --> 12:00.960]  чему теперь да рут next сикей вот вот ну и вот но вопер да еще что не помешает сделать заявить
[12:00.960 --> 12:11.520]  что если оказалось что он бесконечный могло ж такое оказаться правда да если он оказался
[12:11.520 --> 12:16.440]  бесконечный потому что ну как бы у нас тут случайно оказалось что два дерева на самом
[12:16.440 --> 12:19.840]  деле пусты да то что такое вершина плюс бесконечность она просто пустая то есть
[12:19.840 --> 12:25.680]  просто вот факт того что как бы она бесполезна там пустая я и но соответственно теперь что нам
[12:25.680 --> 12:33.120]  тогда остается но в общем конечно вот даже наверное фиолетовым напишем что мы удаляем
[12:33.120 --> 12:42.120]  рут чайлд то сирии все теперь удаляем и ребенка удаляем и брата удаляем в общем
[12:42.120 --> 12:56.240]  да чего последний остался и тот уже ежелец то есть в общем-то все умерли остался только
[12:56.240 --> 13:11.240]  рут это называется поэтому и остается только выброситься вот ну да но это по нет ну вот
[13:11.880 --> 13:18.260]  от последний такой едиальный ребенок остался так что еще могло быть но допустим нам повезло
[13:18.260 --> 13:27.560]  как бы но да значит допустим нам фантастически повезло и хотя бы брата у нас еще есть могло
[13:27.560 --> 13:33.580]  и так случиться но вот но могли соответственно так случиться что ребенка у нас вот что ребенка
[13:33.580 --> 13:37.760]  тем не менее нет belonging только что потому что мы тут посвалом сделали плюс бес蓬astian
[13:37.760 --> 13:45.880]  конечности посвапали и что мы тогда делаем но естественно но вот вот тогда мы помним
[13:45.880 --> 13:54.200]  нас была мистическая технология вида что если тут плюс бесконечность а тут лишний брат то
[13:54.200 --> 14:05.920]  давайте скажем что этого промежуточного брата мы уберем вот ну можно и так сказать да нет ну как
[14:06.000 --> 14:11.960]  нет у нас нет ну как сказать если ребенок лишний ну как сказать помню зачем нам братья помните
[14:11.960 --> 14:18.280]  да каждый брат нужен за тем чтобы следить за нашими детьми одному ребенку один брат но кроме
[14:18.280 --> 14:23.960]  меня конечно у меня свой ребенок есть да но если я понимаю что ребенок за которым я слежу он уже
[14:23.960 --> 14:35.120]  все то соответственно лишний брат мне тоже не нужен ну я в хорошей структуре чуть-чуть
[14:35.120 --> 14:47.920]  вот значит поехали что мы тогда делаем начну соответственно пишем так мой ребенок пишем мы
[14:47.920 --> 15:00.520]  это ребенок моего брата вот нет погодите погодите да мы забыли их написать не всегда
[15:00.520 --> 15:12.000]  же мы там это где дети и братьев отбираем зачем а вот нет ну тут бы я не сказал что мы это прям
[15:12.000 --> 15:22.320]  забыли так нет тут не совсем так просто мне кажется это можно как бы в самом конце сделать
[15:22.320 --> 15:32.360]  на самом деле вот значит смотрите но сейчас вот подумаем потому что я сказал так что пока мы
[15:32.360 --> 15:39.200]  вот с этим разбираемся пока все как бы нормально вот то есть теперь пишем что если оказалось что
[15:39.200 --> 15:49.360]  у меня root child во первых child сетей это неожиданно плюс бесконечность то давайте этого не тот только
[15:49.360 --> 15:53.840]  в этом случае мы вспоминаем шел одна раз то есть как бы да то есть если ребенок есть то
[15:53.840 --> 16:02.760]  собственно брату удалить не надо все нормально так то пишем что мой ребенок это теперь ребенок
[16:02.760 --> 16:10.720]  моего брата соответственно как говорится брату это не нравится ничего страшного мы пишем что
[16:10.720 --> 16:27.240]  теперь тогда наш брат это тоже брат нашего брата вот root next next так еще да но еще да в этом месте
[16:27.240 --> 16:31.760]  конечно немножко грустно получилось потому что да по-хорошему этого брата еще поделить надо
[16:31.760 --> 16:37.640]  да и ребенка бы не помешала но как мы уже договорились мы не в этом мы сейчас излишки
[16:37.640 --> 16:44.440]  обращать внимание на называется там утечку памяти не будем но могли бы тут там пару технических
[16:44.440 --> 16:51.400]  строчек написать на эту тему так ну и все в общем-то а больше в общем-то здесь ничего не надо делать так
[16:51.400 --> 16:57.240]  вот теперь как нам правильно заметили как вы так что-то надо с листом сделать
[16:57.240 --> 17:10.960]  вот здесь но здесь как бы по-хорошему говоря мы должны были написать что-нибудь типа root так
[17:10.960 --> 17:24.640]  как мы это лист называли так и называли да кейс там так и написать что root но вот ну соответственно
[17:24.640 --> 17:34.160]  да root next соответственно кейс вот ну и в общем-то на этом все то есть как бы и сифт от обычной
[17:34.160 --> 17:40.640]  биномиальной кучи в общем-то на этом бы заказ в общем так бы и выглядел примерно но мы там не
[17:40.640 --> 17:44.960]  будем повторять там все доказательства что там почему там все работает завод единицы кроме
[17:44.960 --> 17:55.040]  инсерта а если мы как бы нигде не нашли не пустой список а у нас нет смотрите цель сифта вот
[17:55.040 --> 18:00.520]  обратить внимание мы нигде не проверяем что вот этот список не пустой то есть помните дамы еще
[18:00.520 --> 18:04.920]  мы этого не реализовывали но имели в виду что вообще удаление может быть из произвольного
[18:04.920 --> 18:09.760]  места то есть если сказали ударить ключик то значит мы отправляемся в список где лежит этот
[18:09.760 --> 18:15.120]  ключик и достаем этот элемент то есть теоретически может быть что там все списки пустые или там
[18:15.120 --> 18:22.480]  почти все но это нас не волнует потому что цель цель сифта не соответственно добиться того чтобы
[18:22.480 --> 18:28.480]  какой-то список стал не пустым цель сифта удалить пусть список корневой список который оказался
[18:28.480 --> 18:50.800]  пустым вот собственно и все ну типа того а как там могло стать что он называется пустой
[18:58.800 --> 19:03.440]  так нет погодите значит мы только что смотрите что мы сейчас только что провели так сейчас
[19:03.440 --> 19:15.400]  сейчас ну смотрите дело в том что сейчас нету дело дело в том что мы добились того что сикей у
[19:15.400 --> 19:21.720]  нас все еще равен не бесконечности это означает что наш вот когда если мы до сюда дожили то у
[19:21.720 --> 19:29.800]  нашего брата ключик тоже значит не пустой а по видимо это означает что там и списочек еще жив
[19:29.800 --> 19:43.640]  может он и пустой но он жив но если у него нет детей он был бы плюс бесконечности мы бы всеке
[19:43.640 --> 19:52.640]  это узнали вот обратите внимание да то есть у нас могло быть так что да мы пошли в next и
[19:52.640 --> 19:58.840]  next оказался плюс бесконечность но ровно за этим у нас вот этот свап и стоит видите то есть как бы
[19:58.840 --> 20:05.600]  если у меня мой ребенок оказался меньше чем брат то давайте их поменяю местами вот но если
[20:05.600 --> 20:09.400]  там этот ребенок после этого оказался плюс бесконечность то я его соответственно потом
[20:09.400 --> 20:14.840]  ликвидирую но если и как бы и ребенок и next оказались плюс бесконечность уж совсем уже то
[20:14.840 --> 20:23.920]  тогда да соответственно тогда эти дети уже смысла не имеют вот но соответственно нет
[20:23.920 --> 20:48.280]  поэтому так вот вот в идеале было бы так вот ну типа того но не одну на самом деле видите
[20:48.280 --> 20:56.440]  она там целое дерево может перекорюшить вообще да вот но теперь но на самом деле есть фишка то
[20:56.440 --> 21:04.840]  есть здесь мы пользовались тем что мы прям передаем этот список но на самом деле здесь будет
[21:04.840 --> 21:14.000]  работать по следующему принципу иногда мы будем хотеть сделать это по второму раз то есть на самом
[21:14.000 --> 21:20.960]  деле вот теперь то есть это вот то есть теперь надо добавить какой-нибудь мистический цвет так
[21:20.960 --> 21:33.560]  какой мы мистический цвет еще не использовали вот этот вот да это какой желтый да вот так вот
[21:33.560 --> 21:39.480]  и ну по большому счету делать будем следующее говорить будет следующее то есть мы выполняем
[21:39.480 --> 21:51.720]  вот эту всю операцию и говорим ну вот значит и по нот и соответственно после этого говорим
[21:51.720 --> 22:03.080]  если выполнено мистическое условие но вот то тогда мы но тогда мы делаем вот это еще раз
[22:03.080 --> 22:21.080]  вот то есть примерно выглядеть это будет так то есть for допустим int 0 значит меньше либо
[22:21.080 --> 22:30.320]  равно 1 но давайте так вот можно писать плюс плюс быть вот примерно вот так вот это мы сделаем
[22:30.320 --> 22:41.720]  и будем говорить если значит идти равно равно 1 и не выполнено мистическое условие
[22:41.720 --> 22:53.200]  то ну соответственно тогда брякнуться
[23:00.320 --> 23:04.320]  то есть в чем идея в некоторых случаях мы говорим то есть как бы смотрите если бы делали
[23:04.320 --> 23:08.960]  это тупо один раз то действительно в каждом списке был бы не более чем один элемент и все было бы в
[23:08.960 --> 23:14.000]  порядке это было бы кивалетно тому что все элементы есть просто напротив некоторых стоят флаги на тему
[23:14.000 --> 23:20.960]  того что они удалены и оказывается были ну то есть знаете это как в классическом фильме да то
[23:20.960 --> 23:27.080]  есть это называется да да как как мы выяснили что да зачем человек что человек сделать в компании
[23:27.080 --> 23:31.840]  непонятно потому что он там принимает заказы его секретарша собственно она же относит там другой
[23:31.840 --> 23:36.120]  кабинетом его начальнику и он там собственно сам с ними что-то делает как говорится мы дамы
[23:36.120 --> 23:40.520]  покопались в бухгалтерии выяснилось что он был уволен три года назад но все в силу ошибки в
[23:40.520 --> 23:51.400]  программе он все еще получал зарплату вот так чему это вспомнил но так нет чему-то вспомнил
[23:51.400 --> 23:58.920]  но не важно так вот нет суть все в общем-то вот так вот что у нас будет здесь мы хотим то есть
[23:58.920 --> 24:03.800]  иногда чтобы списки сжимая там объединялись как это будет происходить то есть вообще говоря
[24:03.800 --> 24:08.800]  изначально сифт вызывался для пустого списка с целью его удаления и он удалялся за счет того
[24:08.800 --> 24:16.280]  что мы тут вот постепенно все вот указатели на него будем переписывать там переписывать на другой
[24:16.280 --> 24:28.880]  список который мы там откуда-то выкопаем вот но но но это что было но теперь идея такая иногда
[24:28.880 --> 24:34.480]  мы значит достаем секей значит достаем этот новый список а потом говорим вот в некоторых
[24:34.480 --> 24:43.320]  мистических слове говорим так знаете что этого мало как говорится брата давай еще то есть он
[24:43.320 --> 24:48.000]  нам выковы он то есть мы говорим что значит так у тебя же есть список вот прикинься что его
[24:48.000 --> 24:56.400]  нет скажи что тут пустота и достань мне еще и тогда мы говорим но вот и тогда он достает какой-то
[24:56.400 --> 25:07.080]  еще список и мы эти списки объединяем то есть в результате получится что вот это вот простая
[25:07.080 --> 25:13.960]  строчка на самом деле заменится теперь на сильно более мистическую но который я обозначу так
[25:13.960 --> 25:22.520]  смотрите root next но я так немножко по бетоновски напишу что в тот список который там был
[25:22.520 --> 25:40.520]  так так ладно значит смотрите вот это мы закрыли значит вместо этого вот вместо этого
[25:40.520 --> 25:48.080]  зачеркнутого мы напишем примерно следующий вот я тут повыше напишу я напишу root kiss
[25:48.080 --> 25:56.880]  такие вот значит берем этого брата и говорим так вот ты мне тут достал kiss
[25:56.880 --> 26:04.680]  пожалуйста таки добавь в этот список пожалуйста и еще то что уже есть у меня
[26:04.680 --> 26:21.600]  вот root соответственно kiss и после этого говорит так ну окей все значит root соответственно
[26:21.600 --> 26:39.440]  вот ну вот ну и соответственно root kiss тогда равно root next kiss вот примерно так это должно
[26:39.440 --> 26:53.280]  выглядеть вот ну да
[27:09.440 --> 27:20.000]  ну так тут да тут нет тут даже проблема что не только дети но и как бы и родители указывали
[27:20.000 --> 27:27.640]  на тот же самый список да вот действительно возникает вопрос действительно нет ли этого но
[27:27.640 --> 27:32.080]  нет но вот но некоторые противоречия есть но тут хочется показать смысл да то есть какой у нас
[27:32.080 --> 27:37.680]  смысл то есть смысл в том что то есть ну смысл том что можно считать что как бы этого списка
[27:37.680 --> 27:57.760]  соответственно нету но с целью такой безопасности можно написать что а потому что в этом месте
[27:58.760 --> 28:13.640]  смысл смотрите то есть так но смотрите то есть дело в том что как бы эту мысль то выразить да
[28:13.640 --> 28:18.720]  пожалуй может этот код ее недостаточно хорошо выражает наверное но просто нет имеется в виду
[28:18.720 --> 28:24.000]  смысл смысл такой что next вот давайте ладно вырези попробуем вырезать его таким образом
[28:24.000 --> 28:32.240]  смотрите то есть давайте скажем что значит нашего списка не существует вот допустим
[28:32.240 --> 28:47.120]  root соответственно кис точка ну давайте так root kiss равно ну допустим ну допустим условно ну
[28:47.120 --> 28:53.320]  птр не совсем конечно ну птр потому что видите то есть иногда мы пытаемся с кем-то что-то
[28:53.320 --> 29:03.000]  объединять то есть может быть правильнее сказать что там да ну то есть чего с что
[29:03.000 --> 29:11.560]  такое со сной ну можно ну птр можно сайз 0 но я просто хочу избежать это понятие создание
[29:11.560 --> 29:16.280]  нового списка но вот ну хотя можно конечно это составить давайте вот
[29:16.280 --> 29:32.400]  ну можно так делать да но вот ну просто смотрите давайте ладно если вы так неделю
[29:32.400 --> 29:38.000]  назад делали давайте сейчас так сделаем просто минус будет заключаться в том что вот это вот
[29:38.000 --> 29:42.840]  может быть некорректность потому что мы можем пихнуть оказывается пустой список то есть ну
[29:42.840 --> 29:47.720]  правда я не уверен правда что у root next на самом деле то есть что вообще у
[29:47.720 --> 29:55.480]  эстейлевского листа есть понятие extent но вот но допустим вы там сами можете написать функцию
[29:55.480 --> 29:59.800]  объедать добавь пожалуйста в конец списка еще один список а если вы его а если он пустой то
[29:59.800 --> 30:07.680]  ничего не добавляйте ну так что ладно эти диагноты эти детали мы пропишем то есть видим да что как
[30:07.680 --> 30:23.640]  бы то есть root next сейчас подожди сейчас почему пустой нет root next не обязательно пустой нет
[30:23.640 --> 30:29.840]  нет нет мы эту магию написали ровно из-за того что сифт может запускаться два раза если бы его
[30:29.840 --> 30:35.040]  запускали один раз то конечно мы тупо присвоили не парились я поэтому тут так и написал
[30:37.680 --> 30:47.560]  да он только перед форум обязательно это важно потому что мы говорим что в некоторых случаях вот
[30:47.560 --> 30:53.600]  это вот есть мистическое условие что в некоторых случаях мы говорим что нам мало и отправляемся
[30:53.600 --> 31:00.960]  брату и говорят пиши еще и он нам но вот он нам выковыривает еще соответственно листов и мы
[31:00.960 --> 31:22.480]  себе в список добавляем вот в чем глубокий смысл ну ребят что что нет это как это нет
[31:22.480 --> 31:28.920]  такого такого быть не может у нас каждый элемент находится ровно в одном списке в каждый момент
[31:28.920 --> 31:41.440]  времени это как вот ровно для того чтобы это не произошло мы ну вот это себе и написали то есть
[31:41.440 --> 31:47.480]  как вы смотрите видите когда вы вызываете даже второй раз сифт от нул птр а тьфуат от next то
[31:47.480 --> 31:55.960]  первое что он делает это отказывается от того на что он раньше указывал так и так и во время
[31:55.960 --> 32:10.680]  первой во время второго что да да это вот да это нужно это важно для того что как бы когда
[32:10.680 --> 32:17.040]  мы второй раз вызываем сифт мы первый лист потерять не должны если мы написали что вот кейс
[32:17.040 --> 32:33.520]  мы же нигде после этого вот кейс не обновили то тогда как это нигде ну нет смотрите то так
[32:33.520 --> 32:38.640]  первый раз она действительно когда вот на самой первой террасы действительно ничего не делает
[32:38.640 --> 32:45.840]  это эквивалентно вот этой строчки да совершенно верно но на второй раз если вот звезды сойдутся
[32:45.840 --> 32:50.400]  она как раз что-то делает поэтому ровно из-за этого мы эти строчки вообще писали
[32:50.400 --> 33:00.880]  да
[33:10.880 --> 33:11.640]  не будет
[33:16.200 --> 33:24.900]  как у него в паде у него в подделье но у него в подделье нету ссылок на этот кист потому что
[33:24.900 --> 33:28.920]  там он там пробегается по всему этому пути там может быть по всему этому пути от него
[33:28.920 --> 33:38.100]  категорически отказывается но вот ну или но так конечно дани там могут поставаться и не совсем
[33:38.100 --> 33:42.880]  там отказываться действительно от списка но вообще говоря как бы давайте можем по индукции
[33:42.880 --> 33:49.160]  проследить, что в итоге сифта, то есть оказывается все в порядке, в том плане, что
[33:49.160 --> 34:04.180]  каждый путь братьев указывают на свой какой-то список, но нет, но не совсем, как
[34:04.180 --> 34:09.280]  выясняется, но вообще исходно сифт вызывается, когда корневой список пустой, но
[34:09.280 --> 34:27.440]  это исходно. Ну да, ну то есть исходный сифт в этом и смысл был, чтобы этот список
[34:27.440 --> 34:30.320]  полностью исчез и у нас как бы количество списков уменьшилось на один.
[34:30.320 --> 34:58.520]  У сына не обязательно. Не-не-не, вот в мистическое условие такого не подразумевает как раз.
[34:58.520 --> 35:03.480]  Нет, мы его не потеряем, вот эта вся вот махинация вот эта вот ровно ради этого и была. Обратите
[35:03.480 --> 35:09.720]  внимание, после самой первой итерации мы в root keys написали то, что было пополучено из root next.
[35:09.720 --> 35:17.800]  Теперь, когда, если произошла вторая итерация, то происходит следующее. Жил-был root next, то есть
[35:17.800 --> 35:22.680]  мы ему сказали сифт, он первое что сделал забыл о том списке, на котором он, который нам только что
[35:22.680 --> 35:31.640]  передал. То есть вообще забыл, а как следствие там забыл, соответственно их как-то забыл.
[35:31.640 --> 35:38.360]  Вот, после этого значит происходила какая-то магия-магия-магия, но после этого он там значит
[35:38.360 --> 35:47.680]  выковырил еще. Потому что по факту он как бы, помните сифт устроен так, что он как бы по всему
[35:47.680 --> 35:56.000]  пути пробежал и весь путь об этом списке забыл. Вот, вместо этого там выковырилось что-то еще. Вот,
[35:56.000 --> 36:02.480]  и это что-то еще теперь вот благодаря этому прибавилось к тому, что было попоявилось перед этим.
[36:02.480 --> 36:15.920]  Next забыл, но у него там потом в итоге что-то появилось в результате сифта. Ну да, вот,
[36:16.880 --> 36:22.600]  поэтому мы писали, что значит, смотрите вот next, ты и все твои братья указывают на какой-то список,
[36:22.600 --> 36:30.200]  так вот, значит добавь туда еще вот это. Ну говорит, отлично, а теперь у меня тоже шея у тебя, вот так.
[36:30.200 --> 36:44.720]  Вот такая вот мистика неожиданная. Вот, ну а теперь самое интересное, да, вот вы с
[36:44.720 --> 36:51.320]  нетерпением ждете, когда же в этом коде будет Эпсилон, да? Прям можно сказать третьей недели
[36:51.320 --> 36:58.000]  уже пошла, как мы этого ждем, да. Ну во-первых, да, смотрите, ладно, завуалируем процесс. Во-первых,
[36:58.000 --> 37:05.240]  у нас будет мистическая константа R, ну как будет, была уже, которая равна плюс два корня на
[37:05.240 --> 37:15.320]  логарифм 2, на 1 делить на Эпсилон. Да, ну если Эпсилон это заданная константа исходная,
[37:15.320 --> 37:27.400]  помните, да, ну параметр куча, то по ней мы вычисляем вот это. Понятно, да? И теперь немножко мистики.
[37:27.400 --> 37:36.200]  Так вот, значит, мы убедились, что мы есть, мы убедились, что next у нас есть, когда мы уже дойдем
[37:36.200 --> 37:43.240]  до второго сфта, поэтому мистическое условие будет такое. Значит, вот, мистический, итак,
[37:43.240 --> 37:57.800]  внимание, мистическое условие. Внимание, внимание, да, значит, значит, это условие звучит так,
[37:57.800 --> 38:02.960]  значит, мистическое условие, во-первых, значит, что, ну чтобы это произошло, нужно, чтобы,
[38:02.960 --> 38:20.000]  во-первых, так, ноди, так, опять фиолетовый, ноди, стрелочка, кто? Ну вот, ноди, нет, внимание,
[38:20.000 --> 38:34.800]  ноди ранг должен быть, во-первых, больше, чем R, то есть обратите внимание, второй сифт мы делаем
[38:34.800 --> 38:41.320]  только для достаточно жирных вершин, то есть для, если ранги, пока ранги маленькие, нам по
[38:41.320 --> 38:56.520]  барабану. Что? Да, типа root, да, давайте. Значит, причем слили нод, но это, это необходимо,
[38:56.520 --> 39:04.840]  но недостаточно. Еще нужно выполнить одно из двух маленьких проверочек. Значит, во-первых,
[39:04.840 --> 39:15.960]  либо этот ранг нечетный, но, типа, мы будем это делать не каждый, там, типа, каждый второй раз.
[39:15.960 --> 39:25.600]  Ну, если докажете, что он работает, то будет нормально. Нет, ну, я не знаю, забегая вперед,
[39:25.600 --> 39:30.160]  у меня есть подозрение, что вы замените на каждый четный больше, либо равный двух,
[39:30.240 --> 39:36.360]  может, у вас даже и сработает, хотя, ну, вот, так вот, ну, тут, давайте, вот, следуем автора,
[39:36.360 --> 39:46.240]  вот, знаете, тут, как бы, так вот, или, но это еще не все. Если ранг четный, то не беда,
[39:46.240 --> 39:59.560]  потому что есть еще второй шанс. Скажи, пожалуйста, а у твоего брата? Нет, а если,
[39:59.560 --> 40:12.320]  еще такой шанс, что если у нашего брата ранг меньше, чем у нас, да, ну, казалось бы,
[40:12.720 --> 40:23.840]  это же всегда так, да, но не всегда меньше, чем наш ранг минус один. В общем, короче,
[40:23.840 --> 40:36.560]  если мы удалили, если ребенка там удалили, да, ну, да, то есть у нас, ну, да, вот,
[40:37.040 --> 40:42.120]  когда мы вот как раз тут брата удаляли вместе, там ребенка вместе с братом удаляли, да, то есть
[40:42.120 --> 40:48.360]  обнаружилась ситуация, что действительно у нас у брата ранг меньше, чем наш ранг минус один.
[40:48.360 --> 40:55.680]  То есть, ну, мы помним, да, как это устроено у нас. В идеале, если у меня ранг 9, то это означает,
[40:55.680 --> 41:03.280]  что вместе со мной у нас в семье 10 братьев. С рангами 9, 8, там, вот это, 9, 8, 7, 6, 5, 4, 3,
[41:04.080 --> 41:11.040]  2, 1, 0. Вот, поэтому если кто-то из них удален, ну, значит, то есть, как бы, значит какой-то
[41:11.040 --> 41:14.880]  ребенок соответствующий удален, и по рангам можно даже следить, каких конкретно детей не
[41:14.880 --> 41:25.720]  хватает. Ну, и братьев соответственно тоже. Вот. Ну, да, ну, мы помним, померло не более чем 5,
[41:25.720 --> 41:30.840]  потому что на смерти шестого ребенка, нет, не более чем 4, потому что на смерти где-то там
[41:30.840 --> 41:36.720]  пятого ребенка, по-моему, мы расформируем, мы нашу семью расформировываем, помните, да? То есть,
[41:36.720 --> 41:41.600]  дети объявляются самостоятельными товарищами, они там создают свою кучу и вмерживаются,
[41:41.600 --> 42:00.040]  собственно, в исходную. Вот. А. В смысле? Потому что мы... Сейчас.
[42:00.840 --> 42:13.240]  Потому что, смотрите внимательно. Потому что, смотрите, что произошло на первой
[42:13.240 --> 42:20.440]  итерации. Значит, во-первых, ребенок существовал, да? Мы обнаружили, после того, как мы посвапались,
[42:20.440 --> 42:27.520]  мы обнаружили, что ребенок не просто существует, но еще и не бесконечность. Вот. Если он бесконечность,
[42:27.520 --> 42:31.840]  то, соответственно, мы его там, соответственно... То есть, если он стал бесконечностью,
[42:31.840 --> 42:37.240]  тогда мы его ликвидируем. А если он не бесконечностью, то мы гарантируем, что уж дети у него, ну, уж как-нибудь
[42:37.240 --> 42:53.960]  да есть. Сейчас нет свап... Ну, как сказать? Нет. Ну, ранги у нас одинаковые, так что там... Как-то
[42:53.960 --> 43:07.160]  даже странно. Так, свапнем нет детей. Так. Просто не все представить, как мы делали. Нижнего уровня нет детей.
[43:07.160 --> 43:27.560]  Сейчас. Так. Так, может, и нету. Так, сейчас.
[43:27.560 --> 43:41.160]  Так. Нет. Ну, если... Ну, скажем так. Тут понимаете, какая ситуация? Если бы мы посвапали... Сейчас. Нет.
[43:41.160 --> 43:48.080]  Сейчас. А где мы? Мы где-то тут во внуков ходили, что ли? Ну, в последнем условии мы заменяли на внуков.
[43:48.080 --> 44:01.360]  Где вы? Где вы? Где вы внука? Видите, я не вижу внука. А, нет, ну, смотрите, если там пустое указатель, значит, мы себя подвесим. Так, а...
[44:01.360 --> 44:17.640]  То есть, как это здесь ошибок-то точно не будет? А, она... Ну вот. На следующей строке, да. А, ну да, то есть, если там все...
[44:17.640 --> 44:24.720]  Так, так, так, так, так, так, так.
[44:24.720 --> 44:47.560]  Сейчас. Ну, у нас, ну, формально у нас проблема в том, что да, вот в этом месте может оказаться, что там мы вот удалили этого брата, брат оказался последним, поэтому у нас эти указатели неожиданно стали подвесить.
[44:48.480 --> 44:54.760]  А это плохо? Ну, вот мы... Это плохо, это плохо, если мы потребуем вызова вот этого сифта.
[44:54.760 --> 44:58.640]  Ну, видите, даже нет, вот здесь уже Root Next мы обращаемся и все, это уже плохо.
[44:58.640 --> 45:02.600]  Не-не-не, здесь-то это неплохо, потому что в этом месте в самом первом Next еще существовал.
[45:02.600 --> 45:07.160]  Ну, там дальше, там где Root Next, кейс, мы делаем обращение и все.
[45:07.160 --> 45:08.000]  Э-э-э.
[45:08.000 --> 45:09.880]  Ну, ты заебать можешь просто.
[45:09.880 --> 45:10.880]  Ну, в принципе.
[45:10.880 --> 45:13.880]  Переделить там нашего экстра.
[45:14.200 --> 45:19.200]  Так, переделить, так, ну, да, так, ну, действительно, да, если выяснилось после этого, что...
[45:20.200 --> 45:21.200]  Так.
[45:28.200 --> 45:29.200]  Ну, да.
[45:33.200 --> 45:34.200]  Ну, да.
[45:34.200 --> 45:41.200]  Ну, про... Нет, тут, нет, тут, смотрите, тут еще тонкая фишка, что могло быть так еще, что да, мы хотим этого лишнего брата удалить,
[45:41.520 --> 45:45.520]  но этого лишнего брата еще какой-то собранный список остался,
[45:45.520 --> 45:48.520]  и нам бы забывать о нем не хотелось, да, поэтому, наверное...
[45:50.520 --> 45:58.520]  Да, поэтому, наверное, правильнее было бы все-таки, конечно, не сюда идти, а вот сюда.
[46:02.520 --> 46:07.520]  То есть, как бы со списочком решить проблему, а потом уже лишнего брата удалять.
[46:07.840 --> 46:10.840]  Так, хорошо, конкретно здесь тогда проблем уже нет, да?
[46:10.840 --> 46:12.840]  А что вы там поменяли?
[46:12.840 --> 46:17.840]  Я поменял то, что вот эти две строчки у меня теперь не в конце стоят, а перед ИФО.
[46:19.840 --> 46:21.840]  Это те, у которых есть право-зеленые.
[46:21.840 --> 46:22.840]  Чего?
[46:22.840 --> 46:25.840]  Вот эти, у которых есть право-зеленые, да?
[46:25.840 --> 46:27.840]  Это голубые.
[46:27.840 --> 46:29.840]  Тут нет зеленых строчек.
[46:29.840 --> 46:31.840]  А, конечно.
[46:31.840 --> 46:35.840]  Так, а вторая проблема, это то, что мы можем вызываться от...
[46:37.840 --> 46:39.840]  Ну, типа, ну вот.
[46:41.840 --> 46:43.840]  Ну да.
[46:43.840 --> 46:45.840]  Нет, ну да, то есть, ну вот.
[46:48.840 --> 46:52.840]  Ну да, можно, конечно, вот сюда прямо так и вставить, что да.
[46:52.840 --> 46:56.840]  А, ну можно прямо в мистическое условие, конечно, вставить, что, как говорится,
[46:56.840 --> 46:59.840]  есть откуда вынимать еще, да?
[47:01.840 --> 47:04.840]  То есть, типа, ранг наш больше N, и как бы...
[47:05.160 --> 47:07.160]  Рут next вообще.
[47:08.160 --> 47:10.160]  И после этого вообще думать.
[47:11.160 --> 47:17.160]  Ну, потому что, а какой смысл вызывать второй раз root next, если там, извините, если там пусто?
[47:19.160 --> 47:21.160]  То есть, как бы это ничего не даст.
[47:21.160 --> 47:23.160]  Еще вопрос вот.
[47:23.160 --> 47:25.160]  Когда у нас был обычный сифт?
[47:25.160 --> 47:27.160]  Потому что он гарантировался после сифта.
[47:27.160 --> 47:29.160]  То есть, мы могли вызвать сифт?
[47:29.160 --> 47:32.160]  У нас опять мог быть пустой список повышения.
[47:32.160 --> 47:34.160]  И что бы мы тогда делали?
[47:34.480 --> 47:36.480]  Я не совсем помню.
[47:38.480 --> 47:40.480]  Ну, в принципе, вот мы вызывали сифт.
[47:41.480 --> 47:44.480]  И у нас опять пустой список вышел после сифта.
[47:44.480 --> 47:46.480]  Что мы в таком случае делали?
[47:54.480 --> 47:56.480]  А, итак.
[48:04.480 --> 48:06.480]  Да, мы там прям вот совсем в наглую.
[48:06.480 --> 48:11.480]  Поэтому я и говорю, цель сифта не сделать так, что пустой список стал не пустым.
[48:11.480 --> 48:13.480]  Цель сифта ликвидировать пустой список один.
[48:13.480 --> 48:17.480]  Если там на аванс сцену выйдет другой пустой список, значит удалим и еще.
[48:21.480 --> 48:28.480]  То есть, да, возможно, у нас было много пустых список, но значит в этот момент пришел армагедон.
[48:28.480 --> 48:32.480]  То есть, когда он прилетел getmin, мы начинаем эти сифты раз за разом вызывать?
[48:32.800 --> 48:34.800]  Да, ну типа сифты, да.
[48:34.800 --> 48:39.800]  Ну да, по модулю того, что помните, что после того, как вы вызвали один раз сифт,
[48:39.800 --> 48:42.800]  вы тут еще суффикс min, естественно, пересчитали.
[48:42.800 --> 48:44.800]  Ну, потому что тут могло поменяться.
[48:44.800 --> 48:46.800]  Ну и так далее, да.
[48:46.800 --> 48:48.800]  И так далее, да.
[48:48.800 --> 48:52.800]  Поэтому мы там этот delete min в wild true оборачивали.
[48:52.800 --> 48:56.800]  То есть wild true говорит, так, отправься, пожалуйста, где у тебя тут минимум.
[48:56.800 --> 48:58.800]  Так, полезь в его корень.
[48:58.800 --> 49:00.800]  Так, список пустой.
[49:01.120 --> 49:02.120]  Нет, ух ты!
[49:02.120 --> 49:04.120]  Так, доставай оттуда элементы и пошли отсюда.
[49:04.120 --> 49:06.120]  О, пустой, да, ну вызывает сифт.
[49:06.120 --> 49:08.120]  Или там, ой, что, слишком мало детей, да.
[49:08.120 --> 49:10.120]  Ну ладно, расформировай чертям.
[49:14.120 --> 49:16.120]  Ну, ну да.
[49:18.120 --> 49:20.120]  Ну да.
[49:22.120 --> 49:27.120]  Ну, знаете, скажем так, там называется, там техническая задача.
[49:27.440 --> 49:29.440]  Нет, ну да.
[49:29.440 --> 49:33.440]  Ну вот delete hat типа там говорят, что возьми этого дерева,
[49:33.440 --> 49:35.440]  оно теперь существовать не должно, давай возьми там детей,
[49:35.440 --> 49:37.440]  составь из них кучу и в мер же обратно.
[49:39.440 --> 49:43.440]  Но там все как бы, но там все предельно чисто,
[49:43.440 --> 49:46.440]  там никаких мистических эров там нет.
[49:46.440 --> 49:49.440]  То есть просто сделай как в биномиальной куче и не парься.
[49:49.760 --> 49:51.760]  Так вот.
[49:53.760 --> 49:57.760]  Зачем мы это, соответственно, мистическое условие вставили вообще?
[49:59.760 --> 50:02.760]  Ну а какие у нас, ну вот, нам теперь надо доказать, что,
[50:02.760 --> 50:04.760]  ну две вещи надо доказать.
[50:04.760 --> 50:08.760]  Мы делаем больше операции, значит работаем быстрее.
[50:08.760 --> 50:13.760]  Ну, да, на самом деле более, ну скажем так,
[50:13.760 --> 50:15.760]  мегапарадоксальная формулировка звучит так,
[50:16.080 --> 50:18.080]  мы делаем больше объединений листов,
[50:20.080 --> 50:22.080]  и значит работаем быстрее.
[50:22.080 --> 50:24.080]  Потому что заметим, да, что,
[50:24.080 --> 50:26.080]  кажется, что мы стали делать больше сифтов,
[50:26.080 --> 50:28.080]  поэтому у нас там получается какие-то вот,
[50:28.080 --> 50:30.080]  вместо нормального линейного сифта у нас там какие-то вот
[50:30.080 --> 50:32.080]  разветления пошли, да.
[50:32.080 --> 50:36.080]  Но на самом деле заметим, что каждый раз,
[50:36.080 --> 50:40.080]  когда мы из какой-то сифт вызывает себя рекурсивно два раза,
[50:40.080 --> 50:42.080]  где-то в куче погибает один лист.
[50:42.400 --> 50:44.400]  Помните, да?
[50:46.400 --> 50:48.400]  То есть, помните, ну вот,
[50:48.400 --> 50:51.400]  то есть каждый раз, когда с каждым ответвлением
[50:51.400 --> 50:53.400]  погибает один лист.
[50:53.400 --> 50:57.400]  Поэтому самому себе ничего страшного в этом нет.
[50:57.400 --> 50:59.400]  Вот.
[50:59.400 --> 51:03.400]  И дальше, на самом деле, получается весьма забавно.
[51:03.400 --> 51:07.400]  Потому что, смотрите, давайте себе мысленно,
[51:07.720 --> 51:11.720]  то есть, смотрите, мысленно вообразим
[51:11.720 --> 51:13.720]  себе, вообще, действительно,
[51:13.720 --> 51:15.720]  вот, количество сифтов.
[51:15.720 --> 51:17.720]  Вот давайте начнем с симптотики, да.
[51:17.720 --> 51:19.720]  Ну, цель симптотики доказать, что
[51:19.720 --> 51:21.720]  суммарно все сифты работают
[51:21.720 --> 51:23.720]  за
[51:23.720 --> 51:25.720]  O от R умножить на N.
[51:29.720 --> 51:31.720]  Ну, то есть, если куча была составлена
[51:31.720 --> 51:33.720]  из N свежевставленных элементов,
[51:33.720 --> 51:35.720]  ну, или там как-то с смершенной,
[51:36.040 --> 51:38.040]  из куч, в которой суммарно было вставлено N элементов,
[51:38.040 --> 51:41.040]  то я утверждаю, что все сифты в ней
[51:41.040 --> 51:43.040]  работают суммарно
[51:43.040 --> 51:45.040]  за O от R умножить
[51:45.040 --> 51:47.040]  на N элементов.
[51:55.040 --> 51:57.040]  Ну, когда амортизировано, да, то есть, если мы докажем,
[51:57.040 --> 51:59.040]  что количество сифты суммарно работают за это,
[51:59.040 --> 52:01.040]  то мы можем просто добавить
[52:01.040 --> 52:03.040]  лишнее O от R в каждый инсерт
[52:03.040 --> 52:05.040]  и тогда считать после этого,
[52:05.360 --> 52:07.360]  что сифт работает за O от E.
[52:11.360 --> 52:13.360]  Ну, один лист удалить.
[52:15.360 --> 52:17.360]  Да, то есть, смотрите, как мы доказывали,
[52:17.360 --> 52:19.360]  что он как бенвельная куча
[52:19.360 --> 52:21.360]  работает. Мы говорили следующее,
[52:21.360 --> 52:23.360]  каждый сифт убивает там ровно один
[52:23.360 --> 52:25.360]  лист.
[52:25.360 --> 52:27.360]  Но, как бы, мы говорили, что
[52:27.360 --> 52:29.360]  мы уже тратим, то есть, когда
[52:29.360 --> 52:31.360]  мы создаем лист, мы тратим на него,
[52:31.360 --> 52:33.360]  там, мы кладем на него логарифом
[52:33.680 --> 52:35.680]  монеточек в самом начале, да.
[52:35.680 --> 52:37.680]  Поэтому, говорим, что, когда
[52:37.680 --> 52:39.680]  мы вот этот лист удаляем, а этот сифт,
[52:39.680 --> 52:41.680]  если вот без развилок, он работает за логарифом,
[52:41.680 --> 52:43.680]  то мы объявляем, что
[52:43.680 --> 52:45.680]  м-м-м-м-м-м-м.
[52:45.680 --> 52:47.680]  Ну, в отличный раз мы, ну,
[52:47.680 --> 52:49.680]  что мы объявляем,
[52:49.680 --> 52:51.680]  мы объявляем, что давайте эти логарифом
[52:51.680 --> 52:53.680]  оплатим этими монеточками, и получается
[52:53.680 --> 52:55.680]  непосредственно его удаление, тогда будет
[52:55.680 --> 52:57.680]  стоить 0.
[52:58.000 --> 53:00.000]  Все остальные операции можно доказать.
[53:02.000 --> 53:04.000]  Да.
[53:04.000 --> 53:06.000]  Но там доказательства будет особо
[53:06.000 --> 53:08.000]  не, собственно, особо не поменяется.
[53:10.000 --> 53:12.000]  То есть, остальная-то суть та же.
[53:12.000 --> 53:14.000]  Ну, то есть, возможно, будет иметь смысл
[53:14.000 --> 53:16.000]  перевспомнить действительно все доказательства,
[53:16.000 --> 53:18.000]  но давайте вот начнем с сифтов.
[53:18.000 --> 53:20.000]  Тем более, что там нужно доказать-то две
[53:20.000 --> 53:22.000]  вещи, вот, там первая из них,
[53:22.000 --> 53:24.000]  может быть, еще более простая, это почему
[53:24.000 --> 53:26.000]  у нас вообще Rn.
[53:28.000 --> 53:30.000]  Вот, потому что,
[53:30.000 --> 53:32.000]  смотрите, вот это
[53:32.000 --> 53:34.000]  мистическое условие, заметим,
[53:34.000 --> 53:36.000]  устроено так, что, ну, смотрите,
[53:36.000 --> 53:38.000]  да, то есть, ну, во-первых, каждый сифт,
[53:38.000 --> 53:40.000]  то есть, если вы вызвали сифт,
[53:40.000 --> 53:42.000]  то он, соответственно,
[53:42.000 --> 53:44.000]  удаляет, соответственно,
[53:44.000 --> 53:46.000]  один списочек, да?
[53:46.000 --> 53:48.000]  Удаляет, удаляет, удаляет.
[53:48.000 --> 53:50.000]  Но, смотрите, пока он
[53:50.000 --> 53:52.000]  идет-идет-идет, но заметим, что
[53:52.000 --> 53:54.000]  то два не позже, чем
[53:54.000 --> 53:56.000]  через R шагов,
[53:56.000 --> 53:58.000]  а, скорее всего, и меньше,
[54:00.000 --> 54:02.000]  он, на самом деле,
[54:02.000 --> 54:04.000]  сифт разветвится.
[54:06.000 --> 54:08.000]  То есть, мы вызовемся не только отсюда, но и отсюда,
[54:08.000 --> 54:10.000]  но заметим, что каждая развилка
[54:10.000 --> 54:12.000]  уничтожает
[54:12.000 --> 54:14.000]  еще один список.
[54:16.000 --> 54:18.000]  Чего?
[54:20.000 --> 54:22.000]  Ну да.
[54:22.000 --> 54:24.000]  А что?
[54:24.000 --> 54:26.000]  Мы сверху идем?
[54:26.000 --> 54:28.000]  Мы сверху идем.
[54:28.000 --> 54:30.000]  Чего?
[54:32.000 --> 54:34.000]  Ну, у нас
[54:34.000 --> 54:36.000]  мистическое, ну, мистическое условие,
[54:36.000 --> 54:38.000]  так что, то есть, мы, как бы,
[54:38.000 --> 54:40.000]  ну, тут два варианта, то есть, ну, на самом деле, даже
[54:40.000 --> 54:42.000]  не из R, а мы, на самом деле, быстрее,
[54:42.000 --> 54:44.000]  мы, на самом деле, не более, чем через два шага,
[54:44.000 --> 54:46.000]  на самом деле, ответвимся.
[54:46.000 --> 54:48.000]  Да, у нас так,
[54:48.000 --> 54:50.000]  на самом деле, там дерево будет,
[54:50.000 --> 54:52.000]  дерево, если его так воображать в себе как дерево,
[54:52.000 --> 54:54.000]  то оно там будет ответвляться быстро,
[54:54.000 --> 54:56.000]  и тут вот дальше оно тоже будет
[54:56.000 --> 54:58.000]  ответвляться быстро, то в какой-то момент мы достигнем
[54:58.000 --> 55:00.000]  ранка меньше либо равно R, и тогда тут будет
[55:00.000 --> 55:02.000]  идти цепочка, цепочка, цепочка, цепочка,
[55:02.000 --> 55:04.000]  которая, ну, и, собственно, и все.
[55:04.000 --> 55:06.000]  То есть, она будет длинной R, и все-таки уткнемся.
[55:06.000 --> 55:08.000]  Вот.
[55:08.000 --> 55:10.000]  То есть,
[55:10.000 --> 55:12.000]  теперь, значит, анализировать можно так.
[55:12.000 --> 55:14.000]  То есть,
[55:14.000 --> 55:16.000]  давайте так, на удаление вот этого списка,
[55:16.000 --> 55:18.000]  допустим, мы мысленно потратим
[55:18.000 --> 55:20.000]  вот эти R.
[55:20.000 --> 55:22.000]  Значит, когда мы вот
[55:22.000 --> 55:24.000]  ответвились вот тут,
[55:24.000 --> 55:26.000]  мы на удаление вот этого списка,
[55:28.000 --> 55:30.000]  ну, тут он тоже, видимо, потратили
[55:30.000 --> 55:32.000]  вот какие-нибудь вот эти вершины, их тоже от R, да?
[55:34.000 --> 55:36.000]  Вот. Тут как бы тоже,
[55:36.000 --> 55:38.000]  ну, тут будет вот, может быть, так,
[55:38.000 --> 55:40.000]  тут еще тоже могут быть какие-то ответвления, естественно.
[55:40.000 --> 55:42.000]  Могут быть даже и сразу
[55:42.000 --> 55:44.000]  ответвления, почему нет.
[55:44.000 --> 55:46.000]  Но в какой-то момент это заканчивается,
[55:46.000 --> 55:48.000]  заканчивается, заканчивается, заканчивается,
[55:48.000 --> 55:50.000]  и так далее.
[55:50.000 --> 55:52.000]  Вот. То есть, этот список так,
[55:52.000 --> 55:54.000]  вот, соответственно,
[55:54.000 --> 55:56.000]  ну, вот потом там еще
[55:56.000 --> 55:58.000]  какие-то списки, ну и так далее.
[56:00.000 --> 56:02.000]  То есть, вот на удаление,
[56:02.000 --> 56:04.000]  скажем, там вот этого списка, к этому списку
[56:04.000 --> 56:06.000]  мы еще вот этот прицепим, ну и так далее.
[56:06.000 --> 56:08.000]  Ну то есть смысл такой,
[56:08.000 --> 56:10.000]  что как бы реальное время работы
[56:10.000 --> 56:12.000]  сифта, это от количества,
[56:12.000 --> 56:14.000]  как бы так сказать,
[56:14.000 --> 56:17.600]  сказать, вершин, то есть это не совсем вершины дерева,
[56:17.600 --> 56:18.600]  правда?
[56:18.600 --> 56:23.840]  То есть это как бы я нарисовал дерево вызовов сифтов,
[56:23.840 --> 56:24.840]  да?
[56:24.840 --> 56:28.080]  То есть реальное время работы сифта, это конечно от количества
[56:28.080 --> 56:30.520]  этих вершин, правда?
[56:30.520 --> 56:31.520]  Ну вот.
[56:31.520 --> 56:35.320]  Но заметим теперь следующее, что какое количество списков
[56:35.320 --> 56:36.320]  мы удаляем?
[56:36.320 --> 56:40.000]  То есть количество списков мы удаляем, оно равно 1
[56:40.000 --> 56:44.880]  плюс количество вершин у которых тут типа два вызова,
[56:44.880 --> 56:45.880]  правда?
[56:45.880 --> 56:56.840]  Ну, утверждение, количество, сколько сифт реально удалит
[56:56.840 --> 56:57.840]  списков?
[56:57.840 --> 57:01.560]  Он реально удалит не один список, то есть вот первые
[57:01.560 --> 57:05.000]  вот эти операции как бы будут удалять этот один список,
[57:05.000 --> 57:07.720]  но заметим, что если мы тут решили ответвиться, то
[57:07.720 --> 57:12.640]  в общем-то и из этой вершины, ну вот, то есть как бы список
[57:12.640 --> 57:15.320]  соответственно удалится, точнее подмёрзется к вот
[57:15.320 --> 57:19.280]  новому списку, которую мы тут нашли, тут вот в чём
[57:19.280 --> 57:20.280]  проблема.
[57:20.280 --> 57:21.280]  Вот.
[57:21.280 --> 57:24.360]  То есть поэтому каждая развилка, она уменьшает
[57:24.360 --> 57:25.560]  количество списков на один.
[57:25.560 --> 57:40.360]  Так, Петя, если мы тут вызвали второй раз список, то даже
[57:40.360 --> 57:42.840]  если он не пустой, то как бы мы его, то есть смотрите,
[57:42.840 --> 57:45.680]  когда мы первый раз вызвали сифт, вызвали, да, у нас
[57:45.680 --> 57:48.760]  здесь оказался какой-то новый список взамен удалённого,
[57:48.760 --> 57:49.760]  правда?
[57:49.760 --> 57:52.960]  А теперь мы вызвали сифт второй раз, тут появился
[57:52.960 --> 57:56.040]  какой-то список другой, да?
[57:56.040 --> 57:57.040]  Вот.
[57:57.040 --> 58:01.760]  Но заметим, что произошло, что у нас произошло.
[58:01.760 --> 58:04.040]  Произошло теперь то, что мы этот список объединяем
[58:04.040 --> 58:05.040]  с вот этим.
[58:05.040 --> 58:13.240]  Нет, элементы не могли исчезнуть, тут просто эти
[58:13.240 --> 58:18.200]  два списка превратились в один список, поэтому количество
[58:18.200 --> 58:20.360]  списков всё ещё уменьшилось на один.
[58:20.360 --> 58:30.440]  Ну, элементы, которые мы достали этим сифтом, так
[58:30.440 --> 58:32.480]  вот, пожалуйста, только не путайте это дерево с
[58:32.480 --> 58:34.200]  реальным деревом, это вообще другое.
[58:34.200 --> 58:37.520]  Это дерево рекурсивных сифтов, то есть вот этот
[58:37.520 --> 58:40.000]  сифт и этот сифт вызывались, вполне вероятно, от одной
[58:40.000 --> 58:41.400]  и той же вершины на самом деле.
[58:41.400 --> 58:47.120]  Я нарисовал рекурсивное дерево вызовов сифтов.
[58:47.880 --> 58:48.880]  Что?
[58:48.880 --> 58:49.880]  Что?
[58:49.880 --> 58:50.880]  Чего, ещё раз?
[58:50.880 --> 58:58.640]  Не, не за каждый, не за каждый, потому что, ну, в
[58:58.640 --> 59:01.000]  идеале, смотрите, в идеале, если ответвлений не было
[59:01.000 --> 59:04.840]  вообще, мы как бы прибираемся по вот этой, там, у нас была
[59:04.840 --> 59:09.200]  цепочка, то есть мы прибирались по, вот, по списку next'ов,
[59:09.200 --> 59:10.200]  да?
[59:10.200 --> 59:14.320]  И удаляли один список и делали это за от длины
[59:14.320 --> 59:15.320]  вот этого списка.
[59:15.520 --> 59:16.520]  Вот.
[59:16.520 --> 59:22.000]  Но здесь обнаружилось, что иногда мы вызываемся,
[59:22.000 --> 59:24.240]  то есть раньше мы говорили, что у нас прямо вот есть
[59:24.240 --> 59:27.280]  магистральная цепочка вызовов сифтов рекурсивная,
[59:27.280 --> 59:28.280]  да?
[59:28.280 --> 59:31.000]  Но выясняется, что в некоторых случаях мы начинаем неожиданно
[59:31.000 --> 59:32.440]  вызывать сифт второй раз.
[59:32.440 --> 59:34.280]  Может быть даже от той же вершины, что и первый,
[59:34.280 --> 59:35.280]  но вызываем второй.
[59:35.280 --> 59:48.120]  Ну, потому что нам же нужно будет доказать еще второе,
[59:48.120 --> 59:51.160]  что покорапченых, то есть каждое объединение, то
[59:51.160 --> 59:55.720]  есть смотрите, каждый раз, когда выполнено мистическое
[59:55.720 --> 59:58.480]  условие, где-то в мире корраптятся новые элементы.
[59:58.480 --> 01:00:03.080]  А помните, что у нас цель не просто, чтобы это работало
[01:00:03.440 --> 01:00:05.520]  быстро, но еще и чтобы количество покорапченных элементов
[01:00:05.520 --> 01:00:06.680]  было не слишком большое.
[01:00:06.680 --> 01:00:12.920]  Да, поэтому мы тут вот, поэтому вот это очень аккуратная
[01:00:12.920 --> 01:00:13.920]  подгонка.
[01:00:13.920 --> 01:00:15.680]  Да, мы это будем доказывать, естественно, что там покорапченных
[01:00:15.680 --> 01:00:16.680]  не сильно много.
[01:00:16.680 --> 01:00:17.680]  Да.
[01:00:17.680 --> 01:00:22.680]  Чего ответляемся?
[01:00:22.680 --> 01:00:31.640]  Так, ну видите, у нас код устроен так, что мы как бы
[01:00:31.640 --> 01:00:34.160]  из одного сифта вызвать себя можем не более чем
[01:00:34.160 --> 01:00:35.160]  два раза.
[01:00:35.160 --> 01:00:46.440]  Ну да, ну то есть, смотрите, нет, видите, там написано,
[01:00:46.440 --> 01:00:49.360]  что если обнаружилось, что на второй итерации
[01:00:49.360 --> 01:00:53.000]  не выполнено мистическое условие, то мы просто брякаемся.
[01:00:53.000 --> 01:00:55.000]  И только после этого мы вызываем второй сифт.
[01:00:55.360 --> 01:01:06.360]  Ну по-любому удаляем, да, безусловно.
[01:01:06.360 --> 01:01:13.160]  Ну нет, потому что когда мы самый-самый первый раз
[01:01:13.160 --> 01:01:16.280]  вызвали сифт, этот список был пустым.
[01:01:16.280 --> 01:01:20.200]  Мы в ином случае сифт исходно просто бы не вызывали, но
[01:01:20.200 --> 01:01:22.560]  это в самом-самом первом случае.
[01:01:23.120 --> 01:01:26.760]  А когда потом мы их вызываем, мы их вызываем вот в этом
[01:01:26.760 --> 01:01:29.560]  месте, когда выполнено мистическое условие, но мы делаем очень
[01:01:29.560 --> 01:01:30.560]  аккуратно.
[01:01:30.560 --> 01:01:33.120]  Мы говорим, что, так, дорогой брат, и все последующие
[01:01:33.120 --> 01:01:35.760]  братья, забудьте о списке, на который вы сейчас указываете.
[01:01:35.760 --> 01:01:39.360]  То есть, вот видите, мы не случайно пишем, забудьте.
[01:01:39.360 --> 01:01:44.920]  Вот, и достаньте мне еще элемент, достаньте мне
[01:01:44.920 --> 01:01:46.840]  еще какой-нибудь список из тех, кто у вас есть.
[01:01:46.840 --> 01:01:51.840]  И после этого то, что вы достанете, объединяется
[01:01:51.840 --> 01:01:56.400]  с тем, что есть уже у нас.
[01:01:56.400 --> 01:01:57.400]  Поэтому ничего не потеряйте.
[01:01:57.400 --> 01:02:01.800]  То есть, обратите внимание, сифт никакие ключи не удаляет.
[01:02:01.800 --> 01:02:04.840]  Он их там может как-то перекладывать в другие списки, в смысле
[01:02:04.840 --> 01:02:06.600]  списки с ними еще как-то объединять.
[01:02:06.600 --> 01:02:12.920]  То есть, на эти списки могут начать ссылаться другие
[01:02:12.920 --> 01:02:13.920]  вершины.
[01:02:13.920 --> 01:02:17.200]  Но не более того, сами по себе элементы в сифте
[01:02:17.200 --> 01:02:18.200]  не удаляются.
[01:02:18.200 --> 01:02:21.400]  То есть, удалением элементов занимаются другие функции.
[01:02:21.400 --> 01:02:28.160]  У нас же ранды next и child строго меньше?
[01:02:28.160 --> 01:02:29.160]  Строго меньше.
[01:02:29.160 --> 01:02:30.680]  И, что самое важное, строго равен.
[01:02:30.680 --> 01:02:37.120]  Ну, ранды next и child равны между собой, в смысле.
[01:02:37.120 --> 01:02:39.120]  И они строго меньше нас, да.
[01:02:39.120 --> 01:02:42.120]  Ну, тогда мы будем, типа, разговариваться два раза,
[01:02:42.120 --> 01:02:45.120]  два раза, а потом какой-то момент перестанет играть
[01:02:45.120 --> 01:02:46.120]  у нас дерево.
[01:02:46.120 --> 01:02:47.120]  Ну, не совсем.
[01:02:47.120 --> 01:02:48.120]  Видите, у нас еще...
[01:02:48.120 --> 01:02:49.120]  А, еще кидают.
[01:02:49.360 --> 01:02:51.720]  Но, видите, во-первых, вот это условие говорит, что
[01:02:51.720 --> 01:02:55.360]  там не просто меньше, а, в смысле, через один меньше.
[01:02:55.360 --> 01:02:56.880]  Так что вызываться будем не просто так.
[01:02:56.880 --> 01:03:03.160]  Так вот, то есть, что тут теперь, значит, если вот
[01:03:03.160 --> 01:03:06.080]  вообразить в себе это, то тогда отсюда получается
[01:03:06.080 --> 01:03:07.080]  мистический факт.
[01:03:07.080 --> 01:03:10.720]  То есть, у нас, если вообразить в себе действительно дерево,
[01:03:10.720 --> 01:03:14.960]  внимание, дерево рекурсивных вызовов сифта, то получится,
[01:03:14.960 --> 01:03:16.840]  что дерево не более чем двоичное.
[01:03:17.680 --> 01:03:18.680]  Вот.
[01:03:18.680 --> 01:03:22.840]  И более того, заметим, что расстояние между развилками
[01:03:22.840 --> 01:03:25.360]  там, вот между развилкой и следующей развилкой,
[01:03:25.360 --> 01:03:27.880]  оно тут, в общем-то, или там ребенком не превосходит
[01:03:27.880 --> 01:03:28.880]  R.
[01:03:28.880 --> 01:03:31.560]  Ну, даже расстояние между развилкой и развилкой
[01:03:31.560 --> 01:03:32.840]  вообще не превосходит двух.
[01:03:32.840 --> 01:03:37.320]  А, ну и в конце тут висит цепочка длины не более
[01:03:37.320 --> 01:03:38.320]  чем R.
[01:03:38.320 --> 01:03:41.080]  Ну ладно, там R плюс один, это мелочи уже.
[01:03:41.080 --> 01:03:42.080]  Вот.
[01:03:42.080 --> 01:03:43.080]  И что?
[01:03:43.080 --> 01:03:47.600]  Ну, потому что у нас, видите, у нас ранг должен быть больше
[01:03:47.600 --> 01:03:50.040]  R, поэтому тут может быть цепочка R, R минус один, R минус два
[01:03:50.040 --> 01:03:51.160]  и так далее до нуля.
[01:03:51.160 --> 01:03:52.160]  Поэтому R плюс один.
[01:03:56.160 --> 01:03:57.160]  Не-не-не.
[01:03:59.160 --> 01:04:02.160]  Кстати, да, R-четная, обратите.
[01:04:02.160 --> 01:04:03.160]  Обратите внимание.
[01:04:03.160 --> 01:04:04.160]  Да.
[01:04:04.160 --> 01:04:05.160]  Но это все мелочи.
[01:04:05.160 --> 01:04:08.200]  То есть, получается вот такой, то есть, такой вот двоичный
[01:04:08.200 --> 01:04:09.200]  нот.
[01:04:09.200 --> 01:04:12.160]  То есть, получается такое двоичное дерево, и получается,
[01:04:12.240 --> 01:04:16.280]  что если, ну вот, то есть, получается, что, значит, мы
[01:04:16.280 --> 01:04:19.680]  сжимаем, то есть, удаляемое количество списков равно,
[01:04:19.680 --> 01:04:21.400]  получается, один плюс количество развилок.
[01:04:21.400 --> 01:04:22.400]  Вот.
[01:04:22.400 --> 01:04:28.440]  Это, соответственно, но заметим, что, но заметим
[01:04:28.440 --> 01:04:31.360]  следующее, что один плюс количество развилок – это
[01:04:31.360 --> 01:04:32.360]  количество листов, правда.
[01:04:32.360 --> 01:04:33.360]  Ну вот.
[01:04:33.360 --> 01:04:40.720]  Но с другой стороны, я утверждаю, что на самом деле в таком
[01:04:41.280 --> 01:04:43.120]  дереве, как несложно там доказать по какой-нибудь
[01:04:43.120 --> 01:04:44.760]  индукции, ну, на том, что это должно быть для вас
[01:04:44.760 --> 01:04:47.160]  уже простое упражнение, что количество вершин в
[01:04:47.160 --> 01:04:49.360]  таком дереве грузивных вызовов O от R.
[01:04:49.360 --> 01:04:51.760]  То есть, O от R на количество листов и есть.
[01:04:51.760 --> 01:04:56.760]  Да, ну хорошо.
[01:04:56.760 --> 01:05:02.160]  Значит, ну простые вещи такие можно видеть, ну,
[01:05:02.160 --> 01:05:04.280]  можно видеть следующим образом.
[01:05:04.280 --> 01:05:09.280]  Что вы идете по дереву снизу вверх, и неожиданно там
[01:05:09.360 --> 01:05:12.200]  у вас есть какие-то листы, по ним цепочки, цепочки,
[01:05:12.200 --> 01:05:13.800]  цепочки, и вдруг какие-то две цепочки объединились
[01:05:13.800 --> 01:05:14.800]  в одну.
[01:05:14.800 --> 01:05:16.120]  Мы сейчас доказываем, что количество перекрестков
[01:05:16.120 --> 01:05:17.960]  – это количество листов.
[01:05:17.960 --> 01:05:21.320]  Нет, мы пытаемся, ну я пытаюсь просто на пальцах показать
[01:05:21.320 --> 01:05:25.440]  простой факт, что там, ну вот, то есть, если у вас
[01:05:25.440 --> 01:05:29.080]  есть, значит, какое-то там двоичное дерево и длины
[01:05:29.080 --> 01:05:31.520]  всех цепочек не более чем R, то количество вершин
[01:05:31.520 --> 01:05:34.640]  в ней – это O от R умножить на количество листов.
[01:05:34.640 --> 01:05:37.640]  Ну вот.
[01:05:37.640 --> 01:05:44.640]  Ну у нас условия так же, то есть у нас тут либо в конце
[01:05:54.400 --> 01:05:58.960]  висит цепочка размера R, либо мы тут где-то выше,
[01:05:58.960 --> 01:06:01.520]  но расстояние между развилкой и развилкой вообще не происходит
[01:06:01.520 --> 01:06:03.920]  даже не просто R, а 2.
[01:06:03.920 --> 01:06:06.480]  Хотя, в общем-то, даже если бы она не происходила R,
[01:06:06.480 --> 01:06:07.720]  нас это бы тоже устраивало.
[01:06:07.720 --> 01:06:13.720]  В общем, с количеством вершин в длине у вас будет R на
[01:06:13.720 --> 01:06:14.720]  количество листов?
[01:06:14.720 --> 01:06:15.720]  Ну да.
[01:06:15.720 --> 01:06:18.720]  Ну O от, конечно.
[01:06:18.720 --> 01:06:23.720]  Да, может быть, умножить на 2, там, например, вот это
[01:06:23.720 --> 01:06:24.720]  все.
[01:06:24.720 --> 01:06:25.720]  А?
[01:06:25.720 --> 01:06:31.320]  А до оптимизации у нас рекурсивные сифты вообще
[01:06:31.320 --> 01:06:32.320]  вот так выглядели.
[01:06:32.320 --> 01:06:38.960]  Там вообще развилок не было, и эта длина была
[01:06:38.960 --> 01:06:39.960]  логорифом.
[01:06:39.960 --> 01:06:42.960]  И нас это устраивало.
[01:06:42.960 --> 01:06:43.960]  А?
[01:06:43.960 --> 01:06:44.960]  Ну да.
[01:06:44.960 --> 01:06:45.960]  Ну как бы, да.
[01:06:45.960 --> 01:06:46.960]  Нет, на каждой, нет.
[01:06:46.960 --> 01:07:00.600]  Ну, во-первых, так, соответственно, для чего, если утверждение
[01:07:00.600 --> 01:07:04.680]  для вот Rn, то для каждой развилки у нас удаляется
[01:07:04.680 --> 01:07:05.680]  лишний список.
[01:07:05.680 --> 01:07:13.600]  То есть, мы удалили количество списков, равное 1 плюс количество,
[01:07:13.600 --> 01:07:18.280]  значит, количество развилок, и потратили на это время
[01:07:18.280 --> 01:07:21.280]  равное 1 плюс количество развилок, умноженное на
[01:07:21.280 --> 01:07:24.280]  R.
[01:07:25.160 --> 01:07:26.160]  Утверждаю я.
[01:07:26.160 --> 01:07:27.160]  Вот.
[01:07:27.160 --> 01:07:39.040]  Ну, потому что R на количество листов мы потратили, да?
[01:07:39.040 --> 01:07:42.280]  А после этого в начале цепочки начинаются там какие-то
[01:07:42.280 --> 01:07:45.920]  вот по количеству листов вершины, которые там начинают
[01:07:45.920 --> 01:07:48.200]  объединяться, причем на расстоянии от себя не более
[01:07:48.200 --> 01:07:49.200]  чем 2.
[01:07:50.120 --> 01:07:55.120]  Почему, наверное, может быть, 12 цепочек больше, чем R1?
[01:07:55.120 --> 01:07:56.120]  Откуда?
[01:07:56.120 --> 01:07:57.920]  Ну, R плюс 1, допустим.
[01:07:57.920 --> 01:08:03.920]  Ну, просто заметим, что если тут была цепочка, 12 цепочек
[01:08:03.920 --> 01:08:06.240]  больше, чем R, значит, тут ранг какой-то как минимум
[01:08:06.240 --> 01:08:12.080]  R плюс 1, а R плюс 1 это уже нечетное число, и у него была бы развилка.
[01:08:20.080 --> 01:08:21.080]  А?
[01:08:39.080 --> 01:08:43.800]  Ну, не R плюс, это О от этого, умножить на 2, если быть
[01:08:43.800 --> 01:08:44.800]  точнее.
[01:08:44.800 --> 01:08:47.600]  Смотрите, самый тупой факт.
[01:08:48.000 --> 01:08:50.760]  Предположим, что, допустим, у вас цепочек нет вообще,
[01:08:50.760 --> 01:08:52.320]  у вас есть только листы и развилки.
[01:08:52.320 --> 01:08:58.160]  Тогда, если в таком дереве у вас L листов, то есть такой
[01:08:58.160 --> 01:09:00.320]  мистический факт, что у вас в дереве не более чем
[01:09:00.320 --> 01:09:01.640]  2L минус 1 вершина.
[01:09:01.640 --> 01:09:06.560]  Ну, там доказательство выглядит в духе, что идем
[01:09:06.560 --> 01:09:09.720]  сверху вниз, там у нас есть листы, и как бы в каждой
[01:09:09.720 --> 01:09:12.520]  развилке как бы два листа как бы объединяются в один,
[01:09:12.520 --> 01:09:14.280]  и у вас как бы на одну вершину цепочку меньше.
[01:09:14.960 --> 01:09:15.960]  Вот.
[01:09:15.960 --> 01:09:18.320]  И как бы у вас, получается, изначально было L, потом
[01:09:18.320 --> 01:09:21.280]  стало 1 и уменьшались не более чем на L минус 1 раз,
[01:09:21.280 --> 01:09:24.280]  то есть уменьшались, получается, не более чем L минус 1 раз,
[01:09:24.280 --> 01:09:25.280]  значит всего 2L минус 1.
[01:09:27.280 --> 01:09:31.280]  Здесь доказательство абсолютно то же самое, только мы говорим,
[01:09:31.280 --> 01:09:34.520]  что когда у нас две цепочки объединяются в одну, нам
[01:09:34.520 --> 01:09:38.800]  приходится этого ждать, уже там это не на одном шаре
[01:09:38.800 --> 01:09:42.800]  прям сразу произойдет, а там не позже, чем через
[01:09:42.800 --> 01:09:43.800]  L шаров это произойдет.
[01:09:47.800 --> 01:09:48.800]  Вот.
[01:09:48.800 --> 01:09:50.800]  Поэтому количество вершин там O от L.
[01:10:12.800 --> 01:10:13.800]  Ну смотри.
[01:10:13.800 --> 01:10:15.800]  Ну жила-была развилка, да?
[01:10:15.800 --> 01:10:17.800]  И теперь поехали.
[01:10:17.800 --> 01:10:21.800]  Так, у этой вершины, почему у нее не произошло, почему
[01:10:21.800 --> 01:10:23.800]  у нее не произошло?
[01:10:23.800 --> 01:10:28.800]  Потому что, во-первых, ну как сказать, смотри, потому
[01:10:28.800 --> 01:10:30.800]  что, да, ну допустим, она четная.
[01:10:30.800 --> 01:10:32.800]  Ну теперь два варианта.
[01:10:32.800 --> 01:10:35.800]  Если тут развилки не произошло, значит эта вершина тоже
[01:10:35.800 --> 01:10:37.800]  четная, да?
[01:10:37.800 --> 01:10:41.800]  Ну есть, ну потому что если бы она была не четная, то
[01:10:41.800 --> 01:10:42.800]  развилка произошла.
[01:10:45.800 --> 01:10:46.800]  Или-или-или, это важно.
[01:10:50.800 --> 01:10:51.800]  Так.
[01:10:52.800 --> 01:10:54.800]  Ну что, еще вопросы?
[01:10:56.800 --> 01:10:57.800]  Почему инвериант?
[01:10:58.800 --> 01:10:59.800]  Что?
[01:10:59.800 --> 01:11:00.800]  Инвериант.
[01:11:00.800 --> 01:11:01.800]  Что инвериант?
[01:11:01.800 --> 01:11:02.800]  Сохраняет.
[01:11:02.800 --> 01:11:03.800]  Ага.
[01:11:03.800 --> 01:11:05.800]  Так, ну то есть наконец перейдем ко второму вопросу, почему
[01:11:05.800 --> 01:11:07.800]  количества покорапченных элементов вот этим вот
[01:11:07.800 --> 01:11:09.800]  сифтом не слишком много?
[01:11:09.800 --> 01:11:12.800]  А может, у нас перерыв, потому что формально пара заканчивается.
[01:11:12.800 --> 01:11:13.800]  Нет.
[01:11:13.800 --> 01:11:16.800]  Так, я уже неоднократно говорил, да, тут есть большая
[01:11:16.800 --> 01:11:17.800]  утечка памяти.
[01:11:17.800 --> 01:11:19.800]  Потому что вот ведь здесь утечка памяти, обратите
[01:11:19.800 --> 01:11:20.800]  внимание, сильно.
[01:11:22.800 --> 01:11:25.800]  Ну, ставить лишние две строчки, то есть там сохранить
[01:11:25.800 --> 01:11:28.800]  вот эти два указателя сюда, значит удалить две вершинки,
[01:11:28.800 --> 01:11:29.800]  потом их там поставить обратно.
[01:11:30.800 --> 01:11:31.800]  Не, а с листом.
[01:11:32.800 --> 01:11:33.800]  С листом?
[01:11:34.800 --> 01:11:36.800]  Ну два варианта, да.
[01:11:36.800 --> 01:11:39.800]  Либо как-то тут аккуратно преследить, либо что самое
[01:11:39.800 --> 01:11:41.800]  надежное, это просто шарит ПТР.
[01:11:41.800 --> 01:11:43.800]  Ставить он тогда автоматически это будет.
[01:11:46.800 --> 01:11:47.800]  Шарит ПТР.
[01:11:47.800 --> 01:11:48.800]  Ой, боже мой.
[01:11:48.800 --> 01:11:51.800]  Сколько вам еще предстоит на C++ узнать?
[01:11:53.800 --> 01:11:56.800]  Ну, просто есть такая, что такие штука шарит ПТР.
[01:11:58.800 --> 01:12:00.800]  Она просто имеет в виду следующее, что это пистическая
[01:12:00.800 --> 01:12:03.800]  структура, которая указывает на какой-то объект и владеет
[01:12:03.800 --> 01:12:06.800]  как бы и, потому что гарантирует, что в этот объект можно
[01:12:06.800 --> 01:12:08.800]  попасть только через этот указатель и через какие-то
[01:12:08.800 --> 01:12:09.800]  его копии.
[01:12:10.800 --> 01:12:11.800]  Вот.
[01:12:11.800 --> 01:12:12.800]  Причем, значит, зачем-то нужно.
[01:12:12.800 --> 01:12:15.800]  Нужно следующее, что вы этот объект не удаляете,
[01:12:15.800 --> 01:12:17.800]  гарантирую, что как только там вызовется деструктура
[01:12:17.800 --> 01:12:19.800]  самого последнего указателя, указывающего на этот
[01:12:19.800 --> 01:12:22.800]  объект, значит в этот момент объект будет удален.
[01:12:23.800 --> 01:12:26.800]  То есть об этом заботится сам шарит ПТР, и вы об этом
[01:12:26.800 --> 01:12:27.800]  не думаете.
[01:12:28.800 --> 01:12:29.800]  Ну это же долго будет.
[01:12:29.800 --> 01:12:30.800]  Почему?
[01:12:30.800 --> 01:12:33.800]  Ну, в смысле, это просто гарантичка, декция, практика.
[01:12:33.800 --> 01:12:36.800]  Нет, а симпатически это вообще ни на что не влияет.
[01:12:36.800 --> 01:12:37.800]  Ну понятно.
[01:12:37.800 --> 01:12:38.800]  Вот.
[01:12:38.800 --> 01:12:40.800]  Ну вы понимаете, что это там очень важно, да?
[01:12:40.800 --> 01:12:44.800]  Ну, там есть количество этих штук, ну то есть там понятно
[01:12:44.800 --> 01:12:46.800]  есть какие-то реализации, но это не следует.
[01:12:46.800 --> 01:12:50.800]  Ну там такая есть, конечно, накруточка, но как бы
[01:12:50.800 --> 01:12:53.800]  эта накруточка дает вам просто безопасность.
[01:12:54.800 --> 01:12:55.800]  Поэтому ничего страшного.
[01:12:56.800 --> 01:12:58.800]  То есть нет, ну как сказать, если уж говорить о предельной
[01:12:58.800 --> 01:13:01.800]  эффективности, есть симпатической, то это называется там
[01:13:01.800 --> 01:13:05.800]  в 0.5 такого вообще, там обычно апдериты можно не
[01:13:05.800 --> 01:13:06.800]  заворачиваться.
[01:13:08.800 --> 01:13:09.800]  Ну там.
[01:13:10.800 --> 01:13:11.800]  Ну да.
[01:13:13.800 --> 01:13:16.800]  Да и Нью можно один раз вызвать там 10 седьмой
[01:13:16.800 --> 01:13:17.800]  аластировать и потом использовать.
[01:13:17.800 --> 01:13:20.800]  Да там чаще выгода уже бывает создать большой буфер
[01:13:20.800 --> 01:13:22.800]  вместо Нью писать, а там дай мне какой-нибудь 57
[01:13:22.800 --> 01:13:23.800]  лучей какой-то.
[01:13:23.800 --> 01:13:24.800]  Ну да.
[01:13:25.800 --> 01:13:26.800]  Да нет, а зачем?
[01:13:26.800 --> 01:13:28.800]  А зачем можно даже не без Нью, а просто ее глобально
[01:13:28.800 --> 01:13:29.800]  объявить и все.
[01:13:32.800 --> 01:13:35.800]  Просто тогда ты собственно гарантами не будешь
[01:13:35.800 --> 01:13:37.800]  тратить на выделение этой памяти.
[01:13:40.800 --> 01:13:43.800]  Ну да, но просто так ты это тратишь уже после начала
[01:13:43.800 --> 01:13:45.800]  кода, а так ты при компиляции это уже сделал.
[01:13:47.800 --> 01:13:49.800]  Тут еще такой лайфхак есть.
[01:13:50.800 --> 01:13:53.800]  Так, ну что, ладно, давайте попробуем это зафиналить
[01:13:53.800 --> 01:13:54.800]  наконец.
[01:13:55.800 --> 01:13:58.800]  А то когда-нибудь это должно закончиться, наверное,
[01:13:58.800 --> 01:13:59.800]  да?
[01:13:59.800 --> 01:14:00.800]  Так, давай.
[01:14:00.800 --> 01:14:03.800]  У нас сифт работает за 1, потому что мы на каждый
[01:14:03.800 --> 01:14:05.800]  список положили R монеты.
[01:14:05.800 --> 01:14:09.800]  Да, мы на каждый список положили R монеток.
[01:14:13.800 --> 01:14:16.800]  И соответственно, когда мы удаляем списки вот с
[01:14:16.800 --> 01:14:18.800]  помощью такого сифта, мы этими монетками получается
[01:14:18.800 --> 01:14:20.800]  эти операции оплачиваем, да?
[01:14:21.800 --> 01:14:24.800]  Собственно, поэтому получается учетная стоимость сифта
[01:14:24.800 --> 01:14:28.800]  0, а учетная стоимость инсорта от этого не поменялась.
[01:14:28.800 --> 01:14:29.800]  Почему?
[01:14:29.800 --> 01:14:30.800]  Потому что там...
[01:14:31.800 --> 01:14:34.800]  Ну так, учетная стоимость инсорта, как раз там вот
[01:14:34.800 --> 01:14:37.800]  мы вместо логарифма монеток на ее удаление кладем вот
[01:14:37.800 --> 01:14:39.800]  эти вот R монеток на удаление.
[01:14:40.800 --> 01:14:43.800]  Мы еще там какие-то монетки клали на какие-то там объединения
[01:14:43.800 --> 01:14:46.800]  или что-то еще, но этих монеток было вот единицы.
[01:14:47.800 --> 01:14:48.800]  Вот.
[01:14:49.800 --> 01:14:50.800]  То есть поэтому теперь...
[01:14:50.800 --> 01:14:53.800]  Обратите внимание, теперь учетная стоимость инсорта
[01:14:53.800 --> 01:14:57.800]  стала от R, ну то есть от лога 1 делить на эпсилон, как
[01:14:57.800 --> 01:14:58.800]  заказывали.
[01:15:01.800 --> 01:15:03.800]  Так, так, еще вопросы по...
[01:15:04.800 --> 01:15:06.800]  Вызывается свежепроводенному есть?
[01:15:09.800 --> 01:15:11.800]  Ну вот, ну теперь попробуем финалочку.
[01:15:11.800 --> 01:15:13.800]  Да, то есть сжимать, конечно, можно было до упора, можно
[01:15:13.800 --> 01:15:15.800]  было всегда вызывать сифт до тех пор, пока вершины
[01:15:15.800 --> 01:15:18.800]  не удалится там, я не знаю, или пока этот список не
[01:15:18.800 --> 01:15:20.800]  пустой, там что-нибудь еще в этом роде.
[01:15:20.800 --> 01:15:23.800]  Но наша цель была такая, нам еще нужно, чтобы покорапченных
[01:15:23.800 --> 01:15:25.800]  элементов, напоминаю, было поменьше.
[01:15:26.800 --> 01:15:28.800]  А теперь вот давайте думать.
[01:15:29.800 --> 01:15:33.800]  Сколько у нас вообще может быть покорапченных элементов?
[01:15:35.800 --> 01:15:37.800]  Ну, во-первых, заметим, что...
[01:15:38.800 --> 01:15:42.800]  Ну, обычно заметим следующее, что если в списке находится
[01:15:42.800 --> 01:15:44.800]  один элемент...
[01:15:45.800 --> 01:15:46.800]  Ну, значит, так вот.
[01:15:46.800 --> 01:15:50.800]  Смотрите, вот в самом начале у вершины был создан список
[01:15:50.800 --> 01:15:51.800]  и в нем находится какой-то элемент.
[01:15:51.800 --> 01:15:54.800]  Ну, во-первых, давайте так, начнем с того, что...
[01:15:55.800 --> 01:15:58.800]  То есть давайте так, в каких списках у нас может находиться
[01:15:58.800 --> 01:15:59.800]  более чем один элемент?
[01:16:04.800 --> 01:16:05.800]  Так, это вопрос.
[01:16:06.800 --> 01:16:07.800]  Еще раз.
[01:16:07.800 --> 01:16:10.800]  Ну, которые получились после второго прохождения в сифте.
[01:16:10.800 --> 01:16:14.800]  Ну вот, а с точки зрения, например, рангов.
[01:16:16.800 --> 01:16:18.800]  Какой вопрос еще?
[01:16:19.800 --> 01:16:23.800]  Ну, в каких списках вообще находятся покорапченные элементы?
[01:16:27.800 --> 01:16:29.800]  Ну, на самом деле, ну, как минимум...
[01:16:29.800 --> 01:16:32.800]  Ну, да, размер как минимум два, это понятно, да.
[01:16:32.800 --> 01:16:34.800]  Но и заметим следующее, что...
[01:16:34.800 --> 01:16:37.800]  Ну, утверждение такое, что если элемент, вот сам по себе
[01:16:37.800 --> 01:16:42.800]  элемент имеет ранг r или меньше, то он не покораптится.
[01:16:43.800 --> 01:16:46.800]  То есть если этот элемент там перейдет...
[01:16:46.800 --> 01:16:49.800]  Ну, то есть видим, да, что один и тот же ck, конечно, находится
[01:16:49.800 --> 01:16:51.800]  там в разных рангах, да, но давайте у каждого элемента
[01:16:51.800 --> 01:16:54.800]  считать, что у него ранг вот равен вот своей вершинке.
[01:16:55.800 --> 01:16:56.800]  Вот.
[01:16:56.800 --> 01:17:00.800]  Тут можно заметить действительно мистическую штуку.
[01:17:00.800 --> 01:17:05.800]  То есть можно заметить, что пока элемент имеет ранг r,
[01:17:05.800 --> 01:17:08.800]  он не покораптится никогда.
[01:17:12.800 --> 01:17:14.800]  Есть такое ощущение, да?
[01:17:16.800 --> 01:17:18.800]  Да, меньше либо равно r.
[01:17:20.800 --> 01:17:23.800]  Ну, просто потому что мы можем заметить, что если мы
[01:17:23.800 --> 01:17:26.800]  приходим случайно в силу каких-то разветвленных там
[01:17:26.800 --> 01:17:29.800]  либо shift вызываем от маленького дерева, да, то есть заметим,
[01:17:29.800 --> 01:17:31.800]  да, что простое наблюдение.
[01:17:31.800 --> 01:17:35.800]  Если мы вызываем shift от дерева ранга r или меньше,
[01:17:35.800 --> 01:17:38.800]  то делается абсолютно честный shift без всяких нижних
[01:17:38.800 --> 01:17:40.800]  размилок, правда?
[01:17:41.800 --> 01:17:42.800]  Логично, да?
[01:17:43.800 --> 01:17:45.800]  И там ничего не портится, обратите внимание, потому
[01:17:45.800 --> 01:17:49.800]  что мы заметим, что сама по себе порча происходит
[01:17:49.800 --> 01:17:51.800]  только в тот момент, когда мы начинаем какие-то
[01:17:51.800 --> 01:17:53.800]  листы сливать, правда?
[01:17:53.800 --> 01:17:56.800]  То есть если мы объединяем 2 листа, вот тогда у нас
[01:17:56.800 --> 01:17:58.800]  действительно все действительно портится.
[01:18:00.800 --> 01:18:03.800]  А пока у нас никаких слияния нет, ничего не портится.
[01:18:03.800 --> 01:18:07.960]  Причем более того заметим, что сама по себе порча
[01:18:07.960 --> 01:18:09.800]  происходит именно в момент слияния, то есть когда
[01:18:09.800 --> 01:18:13.280]  называем второй сифт, то получается, что там видимо
[01:18:13.280 --> 01:18:19.240]  можно сказать, что все элементы, которые оказались в листе,
[01:18:19.240 --> 01:18:22.440]  которые мы получили в результате этого сифта, он окажется
[01:18:22.440 --> 01:18:26.200]  соответственно, то есть все эти элементы будут испорчены.
[01:18:26.200 --> 01:18:27.960]  Ну может быть кроме одного.
[01:18:27.960 --> 01:18:32.720]  И при этом, правда, все, которые были на первом рекурсивном
[01:18:32.720 --> 01:18:34.840]  вызове получены, они тоже испорчены, потому что лист
[01:18:34.840 --> 01:18:35.840]  объединился.
[01:18:35.840 --> 01:18:38.000]  То есть может там есть кто-то один неиспорченный, но на
[01:18:38.000 --> 01:18:39.480]  самом деле его можно уже не считать.
[01:18:39.480 --> 01:18:45.040]  Так что вот такая вот тут интересность получилась.
[01:18:45.040 --> 01:18:53.740]  И теперь, соответственно, давайте думать, значит кто
[01:18:53.740 --> 01:18:56.680]  же у нас тут испорчен будет теперь.
[01:18:56.680 --> 01:19:01.920]  Ну давайте смотреть.
[01:19:01.920 --> 01:19:04.920]  Так, где бы нам тут?
[01:19:04.920 --> 01:19:06.680]  Ну давайте вот условия оставим.
[01:19:06.680 --> 01:19:14.960]  Значит, на самом деле ключевое утверждение такое.
[01:19:14.960 --> 01:19:21.520]  В статье оно называется там Лемма 5.1.
[01:19:21.520 --> 01:19:23.080]  Ну 5, наверное, мы уж так не будем.
[01:19:23.080 --> 01:19:30.000]  Итак, значит, мистическая лемма, формулируется она
[01:19:30.000 --> 01:19:31.000]  так.
[01:19:31.000 --> 01:19:37.480]  Размер вот этого вот листа, так сказать, допустим,
[01:19:37.480 --> 01:19:46.960]  у вершины В кииз не превосходит.
[01:19:46.960 --> 01:19:59.000]  Ну я так пишу, максимума из единицы и весьма мистической
[01:19:59.000 --> 01:20:00.000]  величины.
[01:20:00.000 --> 01:20:01.000]  Смотрите.
[01:20:01.000 --> 01:20:11.640]  Ну вот, если бы это было все, да?
[01:20:11.640 --> 01:20:12.640]  Ну вот.
[01:20:12.640 --> 01:20:15.280]  Но на самом деле там будет написано примерно следующее.
[01:20:15.280 --> 01:20:27.040]  Там будет написано 2 в степени V rank пополам минус R пополам.
[01:20:28.040 --> 01:20:31.040]  Это я сказал примерно.
[01:20:31.040 --> 01:20:32.040]  Да.
[01:20:32.040 --> 01:20:36.040]  Да, то есть сколько вообще может быть?
[01:20:36.040 --> 01:20:40.040]  Ну понятно, что вот обратите, почему я максимум пишу?
[01:20:40.040 --> 01:20:43.040]  То есть если у нас рамк не превосходит R, то как бы
[01:20:43.040 --> 01:20:46.040]  мы заявляем, что размер списка никогда не превосходит
[01:20:46.040 --> 01:20:47.040]  один.
[01:20:47.040 --> 01:20:50.040]  Но это, в общем-то, достаточно очевидно, потому что, как
[01:20:50.040 --> 01:20:55.160]  мы уже сказали, если мы вызываем сифт от вершины
[01:20:55.160 --> 01:20:58.160]  ранга R, то там, собственно, ничего не происходит.
[01:20:58.160 --> 01:21:01.160]  То есть там списки не объединяются.
[01:21:01.160 --> 01:21:02.160]  Вот.
[01:21:02.160 --> 01:21:05.160]  Ну вот, точно, значит, точно.
[01:21:05.160 --> 01:21:08.160]  А, ну вот, нет, я почти угадал.
[01:21:08.160 --> 01:21:09.160]  Смотрите.
[01:21:09.160 --> 01:21:10.160]  Еще вот так надо.
[01:21:10.160 --> 01:21:11.160]  О.
[01:21:11.160 --> 01:21:12.160]  Так.
[01:21:12.160 --> 01:21:13.160]  Вот.
[01:21:13.160 --> 01:21:14.160]  Вот.
[01:21:14.160 --> 01:21:31.160]  Но давайте думать, ну как всегда, тут 2 вопроса.
[01:21:31.160 --> 01:21:35.160]  Откуда такое утверждение берется и чем оно нам помогает?
[01:21:35.160 --> 01:21:40.160]  Но теперь давайте думать, как же мы можем такое утверждение
[01:21:40.160 --> 01:21:41.160]  доказать?
[01:21:41.160 --> 01:21:46.160]  Как же мы его докажем?
[01:21:46.160 --> 01:21:47.160]  Ну, естественно.
[01:21:47.160 --> 01:21:53.160]  Ну а как еще, собственно, давайте смотреть по индуции.
[01:21:53.160 --> 01:21:57.160]  Ну, на уровне базы все понятно, потому что там в самых-самых
[01:21:57.160 --> 01:22:01.160]  началах у каждой, ну вот, там допустим, у каждой вершины
[01:22:01.160 --> 01:22:04.160]  действительно там размер списка равен один, и это
[01:22:04.160 --> 01:22:05.160]  нас устраивает.
[01:22:05.160 --> 01:22:06.160]  Вот.
[01:22:06.160 --> 01:22:09.160]  То есть когда у нас начинаются проблемы, ну когда два дерева
[01:22:09.160 --> 01:22:12.160]  объединяются, списки от этого не объединяются, но
[01:22:12.160 --> 01:22:15.160]  один из этих, у одного из этих списков ранг повышается.
[01:22:15.160 --> 01:22:18.160]  А, да, подчеркиваю, да, что я тут написал V-кис, но
[01:22:18.160 --> 01:22:21.160]  на самом деле имеется в виду, конечно, я рассматриваю
[01:22:21.160 --> 01:22:23.160]  верхнюю вершину из списка.
[01:22:23.160 --> 01:22:25.160]  Потому что, как бы, можно так сказать, что давайте
[01:22:25.160 --> 01:22:28.160]  рассмотрим там, допустим, любую вершину V любого ранга,
[01:22:28.160 --> 01:22:32.160]  дойдем по, значит, до конца списка до нуля, да, по
[01:22:32.160 --> 01:22:34.160]  братьям, и тогда скажем, что, оказывается, размер
[01:22:34.160 --> 01:22:37.160]  списка там не может, не больше, чем один, потому что
[01:22:37.160 --> 01:22:40.160]  это, на самом деле, у этого вот последнего брата тоже
[01:22:40.160 --> 01:22:41.160]  кис.
[01:22:41.160 --> 01:22:46.160]  Но здесь имеется в виду, что вот это вот V – это верхний
[01:22:46.160 --> 01:22:47.160]  из братьев.
[01:22:47.160 --> 01:22:52.160]  Будь здоров.
[01:22:52.160 --> 01:22:55.160]  Вот.
[01:22:55.160 --> 01:22:59.160]  Ну вот.
[01:22:59.160 --> 01:23:02.160]  И теперь, соответственно, думаем.
[01:23:02.160 --> 01:23:05.160]  То есть можно говорить даже вот, удобно мыслить даже
[01:23:05.160 --> 01:23:08.160]  что у каждого списка есть ранг.
[01:23:08.160 --> 01:23:11.160]  Ну, потому что на каждый список указывает обычно
[01:23:11.160 --> 01:23:14.160]  такая указатель из цепочки братьев.
[01:23:14.160 --> 01:23:17.160]  Вот нам жутко интересно, собственно, ранг самого верхнего
[01:23:17.160 --> 01:23:19.160]  из этих братьев.
[01:23:19.160 --> 01:23:20.160]  Ну, логичь, помните, да?
[01:23:20.160 --> 01:23:23.160]  Ну, братья – это в принципе у нас, как бы, в биномиальной
[01:23:23.160 --> 01:23:25.160]  куче в первой версии вообще было, что у нас нет никаких
[01:23:25.160 --> 01:23:28.160]  братьев, а просто одна вершина контролирует, там,
[01:23:28.160 --> 01:23:31.160]  называется, там, некоторое количество детей.
[01:23:31.160 --> 01:23:35.160]  Это равное в худшем случае, собственно, этому рангу.
[01:23:35.160 --> 01:23:36.160]  Вот.
[01:23:36.160 --> 01:23:38.160]  Ну, а теперь давайте смотреть.
[01:23:38.160 --> 01:23:42.160]  Как же это у нас будет происходить?
[01:23:42.160 --> 01:23:43.160]  Вот.
[01:23:43.160 --> 01:23:45.160]  Ну, проблемы, ну, как сказать?
[01:23:45.160 --> 01:23:48.160]  Ну, основные проблемы возникают, конечно, в сифте.
[01:23:48.160 --> 01:23:51.160]  Потому что там в других местах, ну, там, как бы,
[01:23:51.160 --> 01:23:56.160]  бывает иногда, что во всех местах, кроме сифта, количество
[01:23:56.160 --> 01:23:58.160]  элементов в списках не увеличивается.
[01:23:58.160 --> 01:23:59.160]  Правда?
[01:23:59.160 --> 01:24:03.160]  Зато увеличивается иногда, зато может иногда увеличиваться
[01:24:03.160 --> 01:24:05.160]  ранг списка.
[01:24:05.160 --> 01:24:08.160]  Ну, например, когда два дерева вы объединяете, то
[01:24:08.160 --> 01:24:11.160]  у одного из списков ранг получается увеличивается.
[01:24:11.160 --> 01:24:16.160]  Да, но это, как бы, называется, только ослабляет ограничение.
[01:24:16.160 --> 01:24:17.160]  Вот.
[01:24:17.160 --> 01:24:19.160]  То есть проблемы у нас начинаются только когда у нас,
[01:24:19.160 --> 01:24:20.160]  только в сифте.
[01:24:20.160 --> 01:24:23.160]  Ну, давайте смотреть, что происходит в сифте.
[01:24:23.160 --> 01:24:29.160]  Ну, если мы вот пришли в вершину V и говорим, ну,
[01:24:29.160 --> 01:24:33.160]  вот, значит, пришли мы в вершину V и говорим, так,
[01:24:33.160 --> 01:24:36.160]  у нас тут сейчас пустой список, мы хотим его проигнорировать
[01:24:36.160 --> 01:24:38.160]  и сделать сифт.
[01:24:38.160 --> 01:24:39.160]  Вот.
[01:24:39.160 --> 01:24:42.160]  Ну, тогда, можно сказать, по предположению индукции,
[01:24:42.160 --> 01:24:45.160]  можно сказать, что, то есть, мы вот вызываем сифт
[01:24:45.160 --> 01:24:51.160]  от Next и получаем что-то еще.
[01:24:51.160 --> 01:24:52.160]  Вот.
[01:24:52.160 --> 01:24:53.160]  И получаем список.
[01:24:53.160 --> 01:24:56.160]  Причем, скорее по-видимому, получаем, ну, вот, причем,
[01:24:56.160 --> 01:24:59.160]  видимо, получаем список размера не более, чем вот
[01:24:59.160 --> 01:25:00.160]  такого.
[01:25:00.160 --> 01:25:03.160]  Понимаете, да?
[01:25:03.160 --> 01:25:05.160]  Потому что когда мы его получаем, этот список еще
[01:25:05.160 --> 01:25:07.160]  ранга вот этого VNext.
[01:25:07.160 --> 01:25:11.160]  Ну, и тогда получается, если этот сифт вызов был один,
[01:25:11.160 --> 01:25:14.160]  то тогда просто этот список повышает в себе ранг и
[01:25:14.160 --> 01:25:16.160]  ограничение от этого, собственно, только хуже не
[01:25:16.160 --> 01:25:19.160]  становится.
[01:25:19.160 --> 01:25:22.160]  Вот, понятная идея, да?
[01:25:22.160 --> 01:25:24.160]  То есть, самое интересное происходит, только если у
[01:25:24.160 --> 01:25:29.160]  нас получилось два объединения.
[01:25:29.160 --> 01:25:32.160]  Но что тогда?
[01:25:32.160 --> 01:25:33.160]  Вот.
[01:25:33.160 --> 01:25:36.160]  Ну, давайте подумаем.
[01:25:36.160 --> 01:25:37.160]  Что у нас тогда?
[01:25:37.160 --> 01:25:42.160]  То есть, как у нас тогда такое могло произойти?
[01:25:42.160 --> 01:25:43.160]  Вот.
[01:25:43.160 --> 01:25:46.160]  И откуда тут берется именно округление?
[01:25:46.160 --> 01:25:47.160]  А вот откуда.
[01:25:47.160 --> 01:25:48.160]  Смотрите.
[01:25:48.160 --> 01:25:52.160]  Вот, допустим, вы вызвали, действительно, сифт от
[01:25:52.160 --> 01:25:54.160]  V, да?
[01:25:54.160 --> 01:25:55.160]  Сифт от VNext.
[01:25:55.160 --> 01:25:59.160]  То есть, давайте скажем, что ранг от V, то есть, ранг
[01:25:59.160 --> 01:26:04.160]  от V равно чему?
[01:26:04.160 --> 01:26:08.160]  Какую букву вы предсчитаете в этом месте?
[01:26:08.160 --> 01:26:10.160]  T.
[01:26:10.160 --> 01:26:11.160]  Давайте.
[01:26:11.160 --> 01:26:14.160]  Буква ыть.
[01:26:14.160 --> 01:26:17.160]  Не, ну можно было, конечно, букву ына.
[01:26:17.160 --> 01:26:20.160]  О господи.
[01:26:20.160 --> 01:26:24.160]  О господи.
[01:26:24.160 --> 01:26:26.160]  Ять, о господи.
[01:26:26.160 --> 01:26:30.160]  Ну, давайте, хорошо.
[01:26:30.160 --> 01:26:37.160]  Итак, вот пусть ранг от V равно до ять.
[01:26:37.160 --> 01:26:38.160]  Ну вот.
[01:26:38.160 --> 01:26:39.160]  Значит, смотрите.
[01:26:39.160 --> 01:26:41.160]  Тогда обнаруживается следующее.
[01:26:41.160 --> 01:26:43.160]  Значит, мы вызвали сифт от этой штуки.
[01:26:43.160 --> 01:26:47.160]  А потом вызвали его второй раз.
[01:26:47.160 --> 01:26:52.160]  Ну, во-первых, ну, соответственно, смотрите, вот вызвались
[01:26:52.160 --> 01:26:53.160]  два раза.
[01:26:53.160 --> 01:26:58.160]  Ну, первый раз тут, соответственно, ранг не превосходит ять
[01:26:58.160 --> 01:26:59.160]  минус один.
[01:26:59.160 --> 01:27:04.160]  Поэтому получается, что в разверс списка у нас уже
[01:27:04.160 --> 01:27:08.160]  отсюда получается что-то не более чем два в степени
[01:27:08.160 --> 01:27:09.160]  округлённая вверх.
[01:27:09.160 --> 01:27:13.160]  Значит, значит, ять минус один пополам округлённая
[01:27:13.160 --> 01:27:14.160]  вверх.
[01:27:14.160 --> 01:27:15.160]  Минус R пополам.
[01:27:15.160 --> 01:27:24.160]  Размер списка, который образовался в nxt по результатам первого
[01:27:24.160 --> 01:27:25.160]  сифта.
[01:27:25.160 --> 01:27:32.160]  А к одному можем пользоваться предположение, что в этом
[01:27:32.160 --> 01:27:39.160]  случае мы используемся такой тонкостью, что в тот
[01:27:43.160 --> 01:27:48.160]  момент, когда мы вызываем сифт и работаем с этим списком,
[01:27:48.160 --> 01:27:51.160]  этот список имеет ранг вот такой вот.
[01:27:51.160 --> 01:27:54.160]  Ну, не более чем такой.
[01:27:54.160 --> 01:27:55.160]  Вот.
[01:27:55.160 --> 01:27:58.160]  Итак, теперь он повышает ранг.
[01:27:58.160 --> 01:28:01.160]  Ну, повышает ранг, но вызвался второй сифт.
[01:28:01.160 --> 01:28:06.160]  Теперь давайте думать, по каким причинам мы неожиданно
[01:28:06.160 --> 01:28:10.160]  вызвали, значит, по каким, ну, по каким причинам мы
[01:28:10.160 --> 01:28:15.160]  вызвали второй, ну, второй, короче, да, второй сифт.
[01:28:15.160 --> 01:28:20.160]  Ну, тут два варианта.
[01:28:20.160 --> 01:28:23.160]  Значит, мы должны рассмотреть два варианта.
[01:28:23.160 --> 01:28:26.160]  То есть тут первый вариант.
[01:28:26.160 --> 01:28:27.160]  Ну, то есть в каком случае?
[01:28:27.160 --> 01:28:30.160]  Ну, понятно, что тут ранг больше R, очевидно, и у нас
[01:28:30.160 --> 01:28:31.160]  два варианта.
[01:28:31.160 --> 01:28:32.160]  Первый вариант простой.
[01:28:32.160 --> 01:28:45.160]  Если этот ядь, процент два равно один.
[01:28:45.160 --> 01:28:48.160]  Ну, тогда это на самом деле для нас достаточно приятно,
[01:28:48.160 --> 01:28:51.160]  потому что мы замечаем, что вот это вот округление
[01:28:51.160 --> 01:28:53.160]  тут можно снять.
[01:28:53.160 --> 01:28:54.160]  Да?
[01:28:54.160 --> 01:28:57.160]  То есть если у нас вот, то есть произошло, то тогда
[01:28:57.160 --> 01:29:01.160]  вот это вот, то есть давайте рассмотрим случай, когда
[01:29:01.160 --> 01:29:04.160]  у нас ядь не делится на два.
[01:29:04.160 --> 01:29:07.160]  Тогда у нас получается, то есть первая сифта мы получили
[01:29:07.160 --> 01:29:10.160]  что-то не более чем два в степени ядь минус один
[01:29:10.160 --> 01:29:11.160]  пополам.
[01:29:11.160 --> 01:29:14.160]  Ну, потому что ядь минус один чётное число.
[01:29:14.160 --> 01:29:15.160]  Вот.
[01:29:15.160 --> 01:29:18.160]  А второй раз мы получили не более чем, а в общем-то
[01:29:18.160 --> 01:29:21.160]  столько же.
[01:29:21.160 --> 01:29:23.160]  Минус один пополам.
[01:29:23.160 --> 01:29:24.160]  Минус R пополам.
[01:29:24.160 --> 01:29:28.160]  И теперь, то есть получается, что в списке вот вершины
[01:29:28.160 --> 01:29:33.160]  V ранга ядь окажется сумма не более чем вот сумма.
[01:29:33.160 --> 01:29:37.160]  А в сумме это у нас сколько?
[01:29:37.160 --> 01:29:47.160]  Ну да, то есть это можно два в степени один плюс.
[01:29:47.160 --> 01:29:51.160]  Значит этот ядь минус один пополам.
[01:29:51.160 --> 01:29:54.160]  Минус R пополам, да.
[01:29:54.160 --> 01:29:55.160]  Вот.
[01:29:55.160 --> 01:29:56.160]  Что это такое?
[01:29:56.160 --> 01:30:01.160]  Это равно два в степени ядь плюс один пополам,
[01:30:01.160 --> 01:30:06.160]  минус R пополам.
[01:30:06.160 --> 01:30:12.160]  Вот.
[01:30:12.160 --> 01:30:16.160]  Так, что-то не получается, да?
[01:30:16.160 --> 01:30:23.160]  Мы рассматриваем случаи, когда мы звали C второй раз
[01:30:23.160 --> 01:30:26.160]  по причине того, что ядь не делится на два.
[01:30:26.160 --> 01:30:31.160]  А почему?
[01:30:31.160 --> 01:30:35.160]  А, ну да.
[01:30:35.160 --> 01:30:38.160]  Да, то есть да, действительно.
[01:30:38.160 --> 01:30:42.160]  Заметим, да, мистическую штуку, что это в точности
[01:30:42.160 --> 01:30:48.160]  два в степени ядь пополам и кругленный вверх, да.
[01:30:48.160 --> 01:30:50.160]  Вот.
[01:30:50.160 --> 01:30:52.160]  Да, просто так получилось, да.
[01:30:52.160 --> 01:30:54.160]  Потому что он вот нечетный.
[01:30:54.160 --> 01:30:58.160]  Ну, формула откровенно тут немножко подогнана, но вот так, да.
[01:30:58.160 --> 01:31:01.160]  Хорошо, то есть если ядь равно один, то вот действительно
[01:31:01.160 --> 01:31:06.160]  лемма выполнилась.
[01:31:06.160 --> 01:31:07.160]  Если оно нечетное, да.
[01:31:07.160 --> 01:31:10.160]  Ядь процент два равно один, конечно.
[01:31:10.160 --> 01:31:12.160]  Так.
[01:31:12.160 --> 01:31:13.160]  Ну, теперь думаем.
[01:31:13.160 --> 01:31:16.160]  А теперь давайте себе представим.
[01:31:16.160 --> 01:31:18.160]  Сейчас, а если мы вот в этот момент вдруг возьмем
[01:31:18.160 --> 01:31:20.160]  и уберем то, что у нас...
[01:31:20.160 --> 01:31:26.160]  Мы же все-таки об этом думали.
[01:31:26.160 --> 01:31:28.160]  То есть это просто оптимизация какая-то.
[01:31:28.160 --> 01:31:29.160]  Ну, может быть, да.
[01:31:29.160 --> 01:31:30.160]  Но сейчас...
[01:31:30.160 --> 01:31:32.160]  Нет, ну надо смотреть.
[01:31:32.160 --> 01:31:33.160]  Кажется, да.
[01:31:33.160 --> 01:31:34.160]  Сейчас все это верно.
[01:31:34.160 --> 01:31:36.160]  Да, это верно будет.
[01:31:36.160 --> 01:31:37.160]  Нет, если...
[01:31:37.160 --> 01:31:38.160]  Смотрите.
[01:31:38.160 --> 01:31:39.160]  Нет, просто смотрите.
[01:31:39.160 --> 01:31:40.160]  Если мы будем...
[01:31:40.160 --> 01:31:42.160]  Если мы будем всегда требовать, чтобы...
[01:31:42.160 --> 01:31:45.160]  То есть мы будем всегда требовать, чтобы...
[01:31:45.160 --> 01:31:50.160]  Ну, тогда...
[01:31:50.160 --> 01:31:57.160]  Смотри.
[01:31:57.160 --> 01:31:58.160]  Нет, смотри.
[01:31:58.160 --> 01:31:59.160]  Ну, да.
[01:31:59.160 --> 01:32:00.160]  У тебя могут быть только четные.
[01:32:00.160 --> 01:32:03.160]  У нас же было требование, что там каждые два раза
[01:32:03.160 --> 01:32:06.160]  разветвление обязательно произойдет.
[01:32:06.160 --> 01:32:08.160]  А так у тебя даже не каждые два раза,
[01:32:08.160 --> 01:32:11.160]  не каждый э-раз не получится и так далее.
[01:32:11.160 --> 01:32:12.160]  Вот.
[01:32:12.160 --> 01:32:13.160]  Так что...
[01:32:13.160 --> 01:32:14.160]  Так это называется.
[01:32:14.160 --> 01:32:16.160]  Автор думал, условия подгонял.
[01:32:16.160 --> 01:32:17.160]  Соответственно.
[01:32:17.160 --> 01:32:19.160]  Ну, впрочем, по предыдущей структуре тоже видно,
[01:32:19.160 --> 01:32:21.160]  что автор явно думал.
[01:32:21.160 --> 01:32:25.160]  Причем сильно.
[01:32:25.160 --> 01:32:29.160]  А давайте здесь минус 1,24 поставим?
[01:32:29.160 --> 01:32:31.160]  Так.
[01:32:31.160 --> 01:32:32.160]  Значит, смотрите.
[01:32:32.160 --> 01:32:33.160]  Хорошо.
[01:32:33.160 --> 01:32:34.160]  Это случай рассмотрения.
[01:32:34.160 --> 01:32:36.160]  Давайте рассмотрим второй случай.
[01:32:36.160 --> 01:32:40.160]  Второй случай, когда неожиданно, давайте,
[01:32:40.160 --> 01:32:44.160]  ядь на два делится.
[01:32:44.160 --> 01:32:48.160]  Но второй shift, тем не менее, вызван был.
[01:32:48.160 --> 01:32:50.160]  Что это значит?
[01:32:50.160 --> 01:32:53.160]  Ну, во-первых, это означает, что здесь вот это
[01:32:53.160 --> 01:32:57.160]  y-1 пополам, это то же самое, что...
[01:32:57.160 --> 01:32:59.160]  Что просто что это равно?
[01:32:59.160 --> 01:33:04.160]  Это ядь пополам минус 1, минус r пополам.
[01:33:04.160 --> 01:33:05.160]  Если этот ядь...
[01:33:05.160 --> 01:33:06.160]  Что это?
[01:33:06.160 --> 01:33:07.160]  Ну вот.
[01:33:07.160 --> 01:33:08.160]  А, хотя...
[01:33:08.160 --> 01:33:09.160]  Нет, ядь минус 1 пополам...
[01:33:09.160 --> 01:33:10.160]  А, наврал, наврал.
[01:33:10.160 --> 01:33:11.160]  Просто иди, ничего.
[01:33:11.160 --> 01:33:14.160]  Вот так.
[01:33:14.160 --> 01:33:16.160]  Вот.
[01:33:16.160 --> 01:33:18.160]  Мы же вверх окуляем, да?
[01:33:18.160 --> 01:33:20.160]  Да.
[01:33:20.160 --> 01:33:24.160]  А что у нас здесь?
[01:33:24.160 --> 01:33:27.160]  Два в степени...
[01:33:27.160 --> 01:33:30.160]  Ну, тут, видите, я...
[01:33:30.160 --> 01:33:31.160]  Что снизу?
[01:33:31.160 --> 01:33:36.160]  Два в степени, ядь пополам.
[01:33:36.160 --> 01:33:38.160]  Ну, просто смотрите, если там, допустим, ядь был равен,
[01:33:38.160 --> 01:33:40.160]  я не знаю, 28.
[01:33:40.160 --> 01:33:43.160]  28 минус 1 пополам, округленная верх.
[01:33:43.160 --> 01:33:49.160]  Это то же самое, что 28 пополам просто.
[01:33:49.160 --> 01:33:52.160]  Вот.
[01:33:52.160 --> 01:33:53.160]  Так.
[01:33:53.160 --> 01:33:56.160]  Правда, что-то меня тут, конечно, начинает смущать.
[01:33:56.160 --> 01:34:01.160]  Там же, когда ранг, вот, брата, он должен быть меньше, чем...
[01:34:01.160 --> 01:34:03.160]  Чего?
[01:34:03.160 --> 01:34:04.160]  Чего?
[01:34:04.160 --> 01:34:05.160]  Еще раз.
[01:34:05.160 --> 01:34:10.160]  Если у нас четный ранг, то, значит, выполнилось второе условие.
[01:34:10.160 --> 01:34:11.160]  Да.
[01:34:11.160 --> 01:34:13.160]  Да, это значит, что у нас хотя бы над 2 меньше.
[01:34:13.160 --> 01:34:14.160]  Да.
[01:34:14.160 --> 01:34:15.160]  Ага.
[01:34:15.160 --> 01:34:16.160]  Нет.
[01:34:16.160 --> 01:34:18.160]  Ну, тут, вот, смотрите, вот.
[01:34:18.160 --> 01:34:20.160]  Ну, тут, смотрите, какая подлянка.
[01:34:20.160 --> 01:34:23.160]  Подлянка заключается в том, что в первом, скажем так,
[01:34:23.160 --> 01:34:25.160]  в первом севте это условие никто не проверял.
[01:34:33.160 --> 01:34:35.160]  То есть, правда, вот, именно проблема в том, что в первом,
[01:34:35.160 --> 01:34:39.160]  да, в первом севте это условие никто не проверял.
[01:34:39.160 --> 01:34:42.160]  Поэтому ограничиваем как можем, но вообще, конечно,
[01:34:42.160 --> 01:34:44.160]  да, выглядит странно, как будто, потому что мы уже
[01:34:44.160 --> 01:34:46.160]  ограничение получили, а мы еще оттуда будем что-то
[01:34:46.160 --> 01:34:48.160]  выковыривать.
[01:34:48.160 --> 01:34:50.160]  То есть, да, можно сразу выковырить.
[01:34:50.160 --> 01:34:52.160]  На самом деле, это действительно тут написать, что здесь
[01:34:52.160 --> 01:34:54.160]  после второго севта у нас тут будет как минимум
[01:34:54.160 --> 01:34:56.160]  яд минус 2.
[01:34:56.160 --> 01:35:02.160]  То есть, яд минус 2 пополам, а это без округления,
[01:35:02.160 --> 01:35:05.160]  обратите внимание, потому что, вот.
[01:35:05.160 --> 01:35:09.160]  То есть, получается, просто, вот, минус 1.
[01:35:09.160 --> 01:35:11.160]  Так.
[01:35:11.160 --> 01:35:13.160]  Ну, а что ж тогда делать?
[01:35:15.160 --> 01:35:16.160]  Да.
[01:35:16.160 --> 01:35:20.160]  То есть, видим, что возникают какие-то вот странненькие
[01:35:20.160 --> 01:35:22.160]  проблемки.
[01:35:25.160 --> 01:35:26.160]  Вот.
[01:35:26.160 --> 01:35:28.160]  Да, вот, в идеале, конечно, да.
[01:35:28.160 --> 01:35:30.160]  Хочется сказать, что, а может быть, тут все-таки
[01:35:30.160 --> 01:35:32.160]  округление вниз?
[01:35:34.160 --> 01:35:36.160]  Вот, если округление вниз, то конкретно тут доказательство
[01:35:36.160 --> 01:35:38.160]  сойдется, правда?
[01:35:38.160 --> 01:35:40.160]  Так.
[01:35:40.160 --> 01:35:42.160]  А что там было?
[01:35:42.160 --> 01:35:44.160]  Вот.
[01:35:44.160 --> 01:35:46.160]  Ну, к автору, давайте сами придумаем.
[01:35:46.160 --> 01:35:48.160]  Хорошо.
[01:35:48.160 --> 01:35:50.160]  Вот.
[01:35:50.160 --> 01:35:52.160]  Значит, смотрите, давайте вспомним, что у нас
[01:35:52.160 --> 01:35:54.160]  вить минус 1 было.
[01:35:54.160 --> 01:35:56.160]  Ну, вить минус 1 было, тогда обратите внимание, тут
[01:35:56.160 --> 01:35:58.160]  был бы просто, то есть, яд минус 1 пополам, тут куда
[01:35:58.160 --> 01:36:00.160]  не округляй, получится 2 в степени
[01:36:00.160 --> 01:36:02.160]  вить минус 1 пополам минус r пополам.
[01:36:02.160 --> 01:36:04.160]  И это надо было еще умножить на 2,
[01:36:04.160 --> 01:36:06.160]  то есть, прибавить 1.
[01:36:06.160 --> 01:36:08.160]  Прибавляем 1,
[01:36:08.160 --> 01:36:10.160]  это равно 2 в степени
[01:36:10.160 --> 01:36:12.160]  яд плюс 1
[01:36:12.160 --> 01:36:14.160]  пополам минус r пополам.
[01:36:14.160 --> 01:36:16.160]  Так.
[01:36:16.160 --> 01:36:18.160]  Нет, ну,
[01:36:18.160 --> 01:36:20.160]  минус 1 пополам плюс 1, это то же самое,
[01:36:20.160 --> 01:36:22.160]  что здесь плюс 1.
[01:36:22.160 --> 01:36:24.160]  Ну да, я давно, да.
[01:36:24.160 --> 01:36:26.160]  Но я вот этот плюс 1 отсюда и взял.
[01:36:26.160 --> 01:36:28.160]  Ну да,
[01:36:28.160 --> 01:36:30.160]  я оговариваюсь.
[01:36:30.160 --> 01:36:32.160]  Ну что, мы тут 2 буквы
[01:36:32.160 --> 01:36:34.160]  не вводили же. Вот.
[01:36:34.160 --> 01:36:36.160]  Так.
[01:36:36.160 --> 01:36:38.160]  Ну вот, это вот яд плюс 1, значит,
[01:36:38.160 --> 01:36:40.160]  пополам.
[01:36:40.160 --> 01:36:42.160]  Так яд нечетный.
[01:36:42.160 --> 01:36:44.160]  А, нет.
[01:36:44.160 --> 01:36:46.160]  А, ну да.
[01:36:46.160 --> 01:36:48.160]  Поэтому да, что-то тут вот,
[01:36:48.160 --> 01:36:50.160]  тогда в эту сторону округление
[01:36:50.160 --> 01:36:52.160]  как-то почему-то не работает. Странно.
[01:36:52.160 --> 01:36:54.160]  Так.
[01:36:54.160 --> 01:36:56.160]  Ну-ка интрига.
[01:37:00.160 --> 01:37:02.160]  Чего мы не использовали?
[01:37:06.160 --> 01:37:08.160]  Нет, второе условие
[01:37:08.160 --> 01:37:10.160]  мы пишем, когда
[01:37:10.160 --> 01:37:12.160]  если идти равно 0,
[01:37:12.160 --> 01:37:14.160]  тогда вот это условие выполнено.
[01:37:14.160 --> 01:37:16.160]  А так как бы его получается
[01:37:16.160 --> 01:37:18.160]  негде использовать. Вот чем проблема.
[01:37:22.160 --> 01:37:24.160]  Чего-чего-чего-чего?
[01:37:28.160 --> 01:37:30.160]  Ну, нет.
[01:37:30.160 --> 01:37:32.160]  Вот мы и чешемся, где
[01:37:32.160 --> 01:37:34.160]  мы его где-то вот тут должны использовать
[01:37:34.160 --> 01:37:36.160]  и как бы тут по сумме должно адекватно сойтись.
[01:37:36.160 --> 01:37:38.160]  Ну вот.
[01:37:38.160 --> 01:37:40.160]  Здесь мы его использовали то, что тут
[01:37:40.160 --> 01:37:42.160]  да.
[01:37:42.160 --> 01:37:44.160]  Ну, что тут как бы
[01:37:44.160 --> 01:37:46.160]  идь минус два пополам. Вот мы как-то так
[01:37:46.160 --> 01:37:48.160]  это использовали.
[01:37:52.160 --> 01:37:54.160]  Ну вот, да. Так, странно.
[01:37:54.160 --> 01:37:56.160]  Почему-то да,
[01:37:56.160 --> 01:37:58.160]  странно.
[01:37:58.160 --> 01:38:00.160]  Нет, должно сходиться.
[01:38:02.160 --> 01:38:04.160]  Прям всю, да.
[01:38:04.160 --> 01:38:06.160]  Не, так
[01:38:06.160 --> 01:38:08.160]  настолько на халяву
[01:38:08.160 --> 01:38:10.160]  не получится.
[01:38:10.160 --> 01:38:12.160]  Ага.
[01:38:34.160 --> 01:38:36.160]  Так.
[01:38:40.160 --> 01:39:08.580]  У нас же уменьшили вершины, но ранг меньше, ищет а, ну раньше вот ранг у нашей вершины
[01:39:08.580 --> 01:39:38.580]  ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше
[01:39:38.580 --> 01:40:08.580]  вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше,
[01:40:08.580 --> 01:40:38.580]  ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а,
[01:40:38.580 --> 01:41:08.580]  ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг
[01:41:08.580 --> 01:41:38.580]  а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот ранг меньше, ищет а, ну раньше вот
[01:41:38.580 --> 01:41:43.700]  имеется ввиду, что вот это вот на самом деле делается не, собственно не в цикле
[01:41:43.700 --> 01:41:49.220]  смотрите
[01:41:49.220 --> 01:41:55.620]  почему без этого
[01:41:55.620 --> 01:41:58.700]  но без этого у нас лемма не работает
[01:41:58.700 --> 01:42:18.980]  последний да вот идея такая последний иф не в цикле да но потому что ну вот
[01:42:18.980 --> 01:42:25.260]  но вот нет а собственно к чему нас привело вот смотрите но тут идея такая то
[01:42:25.260 --> 01:42:30.420]  смотрите допустим с допустим после сифта неожиданно выяснилось что у нас теперь
[01:42:30.420 --> 01:42:35.620]  ребенок плюс бесконечность вот говорим вот хорошо вот нам надо его вот нам прям
[01:42:35.620 --> 01:42:41.820]  сейчас его приспичило удалять или вот зачем нам его сейчас удалять вот почему
[01:42:41.820 --> 01:42:46.500]  почему бы нам не вызвать второй сифт что-то сначала вызвать второй сифт а потом уже
[01:42:46.500 --> 01:42:55.220]  радоваться не могли он плюс бесконечность ну да то есть наоборот может выяснить
[01:42:55.220 --> 01:42:59.900]  давайте да то есть допустим брата по выковыриваем брат там еще какой-то тоже
[01:42:59.900 --> 01:43:04.740]  ребенок же есть ну вот и как бы вызвать то есть в общем таки что от этого поменялось
[01:43:04.740 --> 01:43:10.060]  казалось бы ничего ну то есть по крайней мере почему там
[01:43:10.060 --> 01:43:13.500]  алгоритм от этого должен перестать работать непонятно то есть разница будет
[01:43:13.500 --> 01:43:19.380]  то что ну то есть скажем так есть есть шанс что у нас будет то есть вот у вас
[01:43:19.380 --> 01:43:23.380]  был вопрос да откуда у нас появляются вершины с плюс бесконечностью да вот
[01:43:23.420 --> 01:43:28.900]  возможно вот по этой причине у нас есть лишние вершины с плюс бесконечностью то есть на самом
[01:43:28.900 --> 01:43:35.220]  деле кто-то говорит я вершина ранга 28 у меня еще есть 22 ребенка вот да на самом деле не
[01:43:35.220 --> 01:43:40.460]  бесконечных всего два но там все остальные плюс бесконечность за этот счет меня пока еще не
[01:43:40.460 --> 01:43:48.420]  удаляют то есть как бы ревизия еще мертвые души не нашла это называется вот то есть вот
[01:43:48.420 --> 01:43:59.460]  примерно так мне это предлагается видимо делать вот и поэтому получается следующий чит смотрите
[01:43:59.460 --> 01:44:09.260]  то есть то есть зачем мы это сделали а вот зачем дело в том что то есть дело в том что тогда
[01:44:09.260 --> 01:44:16.820]  гарантия что это нам гарантирует что сифт вызывается всегда от то есть эти вот при развилке
[01:44:16.820 --> 01:44:28.500]  он вызывается от абсолютно одинаковых рангов ну ну да ну то же смотрите когда вы пришли в
[01:44:28.500 --> 01:44:37.020]  вершину у нее есть брат и ребенок они одинаковых рангов но вот заметим что сифт от вершины саму
[01:44:37.020 --> 01:44:43.660]  вершину не меняет и не удаляет он может сделать плюс бесконечностью до сам он ее не удалит вот
[01:44:43.660 --> 01:44:48.580]  и тогда получается что да то есть и может показаться даже что вы едва ли нет не от одной
[01:44:48.580 --> 01:44:52.900]  той же вершины сифт вообще вызываете нет это конечно не так потому что перед вторым сифтом
[01:44:52.900 --> 01:45:02.340]  они там с ребенком могли и посвапаться случайно вот но ранги у них одни и те же и тогда но вот и
[01:45:02.340 --> 01:45:15.140]  тогда вот с этим округлением тогда все прокатывает в смысле нет но там просто нам вот при такой
[01:45:15.140 --> 01:45:22.060]  формулировке леммы нам очень жестко надо что там если ранг вершины четный то тогда у обоих
[01:45:22.060 --> 01:45:30.460]  запусков сифта он уменьшился хотя бы на два то есть просто вот просто тогда вот действительно
[01:45:30.660 --> 01:45:37.740]  если мы тут пишем о круглении в ве как вот это йать минус 2 пополам тогда тут пишем это тут пишем
[01:45:37.740 --> 01:45:42.540]  на то же inform но тут округления уже даже убрал потому что я от минус два вот это тоже что твое число
[01:45:42.540 --> 01:45:48.560]  но вот и тогда у нас получается что-то типа два в степени я от пополам минус 2 минус
[01:45:48.560 --> 01:45:56.380]  2 пополам ой паром не минус 2 здесь вот пополам тут limits пополам 9 плюс одинHiclapping
[01:45:56.380 --> 01:46:02.460]  Но этот плюс один благополучно с этой минус два убивается, и получается два в степени ядь пополам минус r пополам.
[01:46:03.260 --> 01:46:06.260]  А это то же самое, что ядь пополам округлённая вверх. В общем, всё чётенько.
[01:46:06.920 --> 01:46:07.420]  А?
[01:46:07.420 --> 01:46:12.260]  Просто как мы решили пропустить всё? Мы два раза запускаемся от брата?
[01:46:12.740 --> 01:46:16.140]  В смысле? Мы не как выправляем? Нет, мы продолжаем два раза запускаться от брата.
[01:46:16.540 --> 01:46:19.420]  Нет, ну вот вы говорили, что оценка не работает, потому что...
[01:46:19.420 --> 01:46:21.660]  Ну, смотрите, да, те... Нет. Нет.
[01:46:22.660 --> 01:46:26.660]  Ну, смотрите, там... Ну, могло произойти следующее.
[01:46:26.660 --> 01:46:36.660]  То есть, теперь мы сделали следующее... Мы сейчас добились следующего, что это мистическое условие, оно, на самом деле, это мистическое условие можно было проверить прям сразу.
[01:46:36.660 --> 01:46:38.660]  Не обязательно на вторую итерацию, а на первую.
[01:46:39.660 --> 01:46:49.660]  Потому что раньше могло бы быть... То есть, могла сложиться грустная ситуация, что у нас был наш ранг чётный, и ранг next у нас, этот, там, ядь минус один.
[01:46:50.660 --> 01:46:59.660]  Вот, мы как бы запустили от него next, и в результате этого, там, вот, пошаманили, и в результате, и соответствующий ребёнок неожиданно удалился.
[01:47:00.660 --> 01:47:01.660]  Вот.
[01:47:02.660 --> 01:47:03.660]  Соответственно.
[01:47:06.660 --> 01:47:07.660]  Ну, вот.
[01:47:10.660 --> 01:47:11.660]  Где, где минус три?
[01:47:11.660 --> 01:47:18.660]  Ну, вмести whole condition. Ну, минус один заменить на минус три, и особо ничего не поменялось.
[01:47:24.660 --> 01:47:27.660]  Ну, или на какой-то другой констант заменить.
[01:47:27.660 --> 01:47:34.660]  Ну, сейчас, я не знаю, как вы там... Ну, то есть, помните, нам же надо, чтобы длины цепочек были какие-то, там, желательно не больше, чем r, да?
[01:47:35.660 --> 01:47:40.660]  Ну, да, то есть, ну, как сказать, нет, ну, вопрос, как бы, а что бы это дало?
[01:47:42.660 --> 01:47:43.660]  То есть, если...
[01:47:45.660 --> 01:47:55.660]  Просто это ничего бы не дало, потому что, если тут ранг минус один, то, как бы, при чётном яте, то есть, на самом деле, мы уже получили вот это, и сколько тут не прибавляй, а всё равно получится больше.
[01:47:56.660 --> 01:47:58.660]  Так что, что минус три, что минус восемь, тут уже не важно.
[01:47:59.660 --> 01:48:10.660]  Поэтому, да, тут вот оказалось, видите, там, видимо, для технической реализации, оказывается, нужно вот, то есть, как бы, да, бесконечного ребёнка удаляйте, пожалуйста, не сразу.
[01:48:13.660 --> 01:48:25.660]  Ну, да, но я не знаю, то есть, понятно, что структура выглядит так, что тут, скорее, можно допилить доказательства до того, что всё и так работает, потому что, казалось бы, мы просто, как бы, убрали что-то лишнее.
[01:48:26.660 --> 01:48:27.660]  Вот.
[01:48:29.660 --> 01:48:32.660]  То есть, нот, то есть, действительно, это просто нот.
[01:48:34.660 --> 01:48:36.660]  Нет, хотя, с другой стороны, это не совсем так.
[01:48:37.660 --> 01:48:40.660]  Дело в том, что, видите, нет, на самом деле, есть подозрение, что структура, может, могла бы обвалиться.
[01:48:41.660 --> 01:48:44.660]  Видите, тут же, видите, нам же нужно, то есть, на самом деле, нам нужен трейдов.
[01:48:45.660 --> 01:48:52.660]  Нам нужен трейдов между тем, что структура быстро работает и что количество покорапченных элементов не слишком быстро растёт.
[01:48:55.660 --> 01:49:01.660]  То есть, мы добились того, что оно растёт так, что размер списка ключений превосходит вот этого.
[01:49:02.660 --> 01:49:17.660]  То есть, если бы мы там действительно поторопились бы, допустим, поторопились удалять ребёнка, то тогда, то есть, это бы привело к тому, что мы чаще бы делали разветвление.
[01:49:18.660 --> 01:49:25.660]  Но если делать разветвление прям чаще, то тогда, получается, и покорапченных элементов могло оказаться несколько побольше.
[01:49:26.660 --> 01:49:29.660]  А чем мы вообще используем этот вариант с покорапченным элементом?
[01:49:30.660 --> 01:49:31.660]  То есть?
[01:49:32.660 --> 01:49:33.660]  Ну, для чего он нам нужен?
[01:49:34.660 --> 01:49:35.660]  Ну, он нам нужен, ну, как сказать?
[01:49:36.660 --> 01:49:39.660]  Нет, он нам нужен для того, чтобы покорапченных элементов было не слишком много.
[01:49:40.660 --> 01:49:45.660]  Вот мы с помощью этой леммы сейчас попытаемся оценить, сколько у нас в каждый момент времени покорапченных элементов.
[01:49:46.660 --> 01:49:47.660]  А, давай.
[01:49:48.660 --> 01:49:49.660]  Ну, типа да.
[01:49:50.660 --> 01:50:04.660]  Простите, я туплю, может, вы ответили на вопрос, как мы разобрались с тем, что у нас в случае, когда у нас ранг, например, нечётный, но вторая ситуация.
[01:50:05.660 --> 01:50:08.660]  Нет, наоборот, когда ранг чётный, но вторая ситуация.
[01:50:09.660 --> 01:50:12.660]  Но в итоге, да, небольшим шаманством в реализации, да, разобрались в итоге.
[01:50:13.660 --> 01:50:14.660]  Что мы сделали?
[01:50:15.660 --> 01:50:18.660]  Вообще мы не стали торопиться удалять ребёнка.
[01:50:19.660 --> 01:50:22.660]  То есть мы удаляем, думаем, не удалить ли нам ребёнка только в самом конце.
[01:50:23.660 --> 01:50:24.660]  А, то есть, окей.
[01:50:25.660 --> 01:50:26.660]  Вот.
[01:50:27.660 --> 01:50:36.660]  То есть, как бы, это нам нужно для того, чтобы, вот, там, то есть для того, чтобы мистическое условие, там, может быть, чуть-чуть отдалить.
[01:50:37.660 --> 01:50:47.660]  То есть, потому что оказалось, что могла произойти такая ситуация, что на первой итерации мистическое условие не выполнено, а на второй итерации мистическое условие уже резко стало работать.
[01:50:48.660 --> 01:50:50.660]  И это нам, вот, по крайней мере, лемму портило.
[01:50:51.660 --> 01:50:53.660]  Может быть, можно доказать какую-то более слабую версию леммы.
[01:50:54.660 --> 01:50:56.660]  Но это вам уже остаётся, да, самостоятельное исследование.
[01:50:57.660 --> 01:50:58.660]  Вот.
[01:50:59.660 --> 01:51:02.660]  Вообще, в принципе, да, могла быть интересная задача, кстати, действительно.
[01:51:03.660 --> 01:51:04.660]  Вот.
[01:51:04.660 --> 01:51:05.660]  Как бы, вот.
[01:51:06.660 --> 01:51:09.660]  Хотя, да, знаете, это просто эпическая задача на какую-нибудь оценку на экзамене.
[01:51:10.660 --> 01:51:12.660]  А предположим, что мы этот ИВ всё-таки туда вставим.
[01:51:13.660 --> 01:51:14.660]  Какую асимптотику можно доказать?
[01:51:15.660 --> 01:51:17.660]  Точнее, так, можно ли доказать, что эта асимптотика верна?
[01:51:18.660 --> 01:51:20.660]  Или можно, например, приводить примеров так, что это не будет работать?
[01:51:23.660 --> 01:51:24.660]  Вот.
[01:51:26.660 --> 01:51:27.660]  Нет, ну а что?
[01:51:27.660 --> 01:51:28.660]  Здесь не ответим, всё меняется.
[01:51:29.660 --> 01:51:30.660]  Ага.
[01:51:31.660 --> 01:51:32.660]  Если человек хотя бы пытается, то тоже пить.
[01:51:33.660 --> 01:51:34.660]  Ну.
[01:51:35.660 --> 01:51:37.660]  Нет, ну, хотя бы пытается, ну, знаете, это как...
[01:51:38.660 --> 01:51:40.660]  Да, сейчас хотя бы...
[01:51:41.660 --> 01:51:43.660]  Не, хотя бы, да, хотя бы пытается, да, это уже там набор, да.
[01:51:44.660 --> 01:51:46.660]  Это называется дважды пять.
[01:51:47.660 --> 01:51:48.660]  Дважды два, пять, свободен.
[01:51:49.660 --> 01:51:50.660]  Там дважды два, семь.
[01:51:51.660 --> 01:51:52.660]  Ты ушёл, ты вернись.
[01:51:52.660 --> 01:51:54.660]  Так, если мы дальше, а дальше потом.
[01:51:55.660 --> 01:51:56.660]  Дважды два, Псков.
[01:51:57.660 --> 01:51:58.660]  Так, вернулись все, у кого были цифры.
[01:51:59.660 --> 01:52:00.660]  Ну и так далее, да.
[01:52:01.660 --> 01:52:02.660]  Так вот.
[01:52:03.660 --> 01:52:04.660]  Значит, чему мы эту?
[01:52:05.660 --> 01:52:07.660]  Ну, во-первых, теперь идея такая.
[01:52:08.660 --> 01:52:09.660]  Ребят, слушайте, да?
[01:52:10.660 --> 01:52:12.660]  Значит, смотрите, теперь, на самом деле, возникает такая интересная мысль.
[01:52:13.660 --> 01:52:14.660]  Надо...
[01:52:15.660 --> 01:52:17.660]  То есть, вы заметили, что покорапченные элементы у нас все находятся,
[01:52:17.660 --> 01:52:19.660]  в листах, ранга больше чем р, правда?
[01:52:23.660 --> 01:52:24.660]  Как мы уже поняли, что пока у нас лист имеет...
[01:52:25.660 --> 01:52:26.660]  Ну, опять, да.
[01:52:28.660 --> 01:52:31.660]  То есть, да, мы обнаружили, что пока у нас лист,
[01:52:32.660 --> 01:52:35.660]  как можно заметить, интересный такой факт, что у листов ранг только увеличивается,
[01:52:36.660 --> 01:52:37.660]  уменьшаться он не может.
[01:52:38.660 --> 01:52:41.660]  Сначала у нас ранг нуль, а топ ранг там постепенно увеличивается-увеличится,
[01:52:42.660 --> 01:52:43.660]  но уменьшится он не может.
[01:52:43.660 --> 01:52:46.100]  Сначала у нас ранг ноль, а топ ранг там постепенно
[01:52:46.100 --> 01:52:48.100]  увеличивается-увеличится, но мельшаться он не может.
[01:52:48.100 --> 01:52:49.100]  Вот.
[01:52:49.100 --> 01:52:52.580]  Ну там кажется, конечно, что когда вы там меняете
[01:52:52.580 --> 01:52:55.860]  местами ребенка и чайлда, то был лист какой-то там
[01:52:55.860 --> 01:52:58.420]  у длинной цепочки, а стал у короткой, но это не так.
[01:52:58.420 --> 01:53:00.260]  Потому что, напоминаю, когда они так меняются в этом
[01:53:00.260 --> 01:53:03.140]  месте, то оказывается, что просто это мы просто снизу
[01:53:03.140 --> 01:53:05.500]  на самом деле этот лист протаскивали, поэтому на
[01:53:05.500 --> 01:53:07.260]  самом деле он там прям увеличиться не успел.
[01:53:07.260 --> 01:53:10.260]  Вот.
[01:53:11.260 --> 01:53:14.620]  Поэтому остается только пробежаться, только пробежаться
[01:53:14.620 --> 01:53:19.120]  по всем вершинам ранга больше, чем r и просуммировать
[01:53:19.120 --> 01:53:21.660]  вот эти вот степени двойки и подумать, сколько получится.
[01:53:21.660 --> 01:53:24.660]  Вот.
[01:53:24.660 --> 01:53:30.860]  Ну а теперь внимание и вопрос.
[01:53:30.860 --> 01:53:35.140]  Спрашивается, а сколько у нас, соответственно, может
[01:53:35.140 --> 01:53:38.140]  быть, вершин ранга ядь?
[01:53:51.140 --> 01:53:54.140]  А почему нет-то?
[01:53:59.140 --> 01:54:02.140]  Нет, ну как, кстати, помните, да, у каждой вершины есть,
[01:54:02.140 --> 01:54:06.140]  не только у корня, а у всех есть былое величие.
[01:54:06.140 --> 01:54:10.140]  Причем эти белые величия, если вершины не являются
[01:54:10.140 --> 01:54:12.140]  под предками-потомками друг друга, эти белые
[01:54:12.140 --> 01:54:15.140]  величия не пересекаются.
[01:54:15.140 --> 01:54:21.140]  Типа, да, у меня свои великие предки, у тебя свой фундамент,
[01:54:21.140 --> 01:54:24.140]  короче, у меня свой.
[01:54:24.140 --> 01:54:27.140]  Вот.
[01:54:27.140 --> 01:54:30.140]  То есть, соответственно, каждая вершина помнит о
[01:54:30.140 --> 01:54:32.140]  своих великих потомках, но и заметим, что великие
[01:54:32.140 --> 01:54:34.140]  потомки, как вы помните, у нас не удаляются, но
[01:54:34.140 --> 01:54:37.140]  только там при объединении появляется новая вершина,
[01:54:37.140 --> 01:54:39.140]  у которой как бы теперь вот объединение двух кладбищ,
[01:54:39.140 --> 01:54:42.140]  помните, да?
[01:54:42.140 --> 01:54:46.140]  Ну то есть там, ну пойте, в прошлый раз, но там у нас
[01:54:46.140 --> 01:54:48.140]  припорядили образ, что у каждой вершины есть потенциальные
[01:54:48.140 --> 01:54:51.140]  и живущие потомки, а есть, собственно, это кладбище
[01:54:51.140 --> 01:54:55.140]  там тех, кто когда-то был, но умер.
[01:54:55.140 --> 01:54:56.140]  Вот.
[01:54:56.140 --> 01:54:58.140]  Ну вот, то есть, в этом смысле, когда два дерева объединяются,
[01:54:58.140 --> 01:55:00.140]  то есть два города объединяются, у них как бы кладбище
[01:55:00.140 --> 01:55:02.140]  объединяются, но в данном случае мыслим так, что
[01:55:02.140 --> 01:55:05.140]  да, кладбище как бы объединены, но как бы кладбище
[01:55:05.140 --> 01:55:08.140]  делится на два под кладбище, то есть там два под кладбище
[01:55:08.140 --> 01:55:11.140]  делятся еще там, собственно, под кладбище, ну в общем,
[01:55:11.140 --> 01:55:12.140]  иерархия такая.
[01:55:12.140 --> 01:55:16.140]  И в итоге у каждого паскетов в шкафу.
[01:55:16.140 --> 01:55:22.140]  Ну, ну не знаю.
[01:55:22.140 --> 01:55:24.140]  Ну да, нет, вот это, конечно, может напомнить скелет
[01:55:24.140 --> 01:55:27.140]  в шкафу, который решили похоронить, конечно, это да.
[01:55:27.140 --> 01:55:32.140]  То есть да, когда мы понимаем, что да, когда мы, то есть
[01:55:32.140 --> 01:55:35.140]  когда мы поняли, что наше время пришло, мы кладем
[01:55:35.140 --> 01:55:38.140]  себя в шкаф и закрываем дверь.
[01:55:38.140 --> 01:55:40.140]  Потом, когда выясняется, что да, у меня есть брат,
[01:55:40.140 --> 01:55:43.140]  у меня есть ребенок и не оба скелета в шкафу, то
[01:55:43.140 --> 01:55:46.140]  соответственно мы их хороним.
[01:55:46.140 --> 01:55:49.140]  Вот, а нет, тогда, а нет, мало того, что мы их хороним,
[01:55:49.140 --> 01:55:52.140]  так мы еще и после этого кладем в шкаф себя.
[01:55:52.140 --> 01:55:55.140]  Да.
[01:55:55.140 --> 01:55:58.140]  Да, это хорошо, да.
[01:55:58.140 --> 01:56:00.140]  Ну как хорошо, да.
[01:56:00.140 --> 01:56:03.140]  Вот, по крайней мере, весело.
[01:56:03.140 --> 01:56:05.140]  Так, особенно тому, кого да, ну ладно.
[01:56:05.140 --> 01:56:07.140]  Ну вот.
[01:56:07.140 --> 01:56:08.140]  Чему это нас приводит?
[01:56:08.140 --> 01:56:11.140]  В общем, приводит это нас к тому, что действительно
[01:56:11.140 --> 01:56:17.140]  у нас оказывается, что у нас в каждый момент времени,
[01:56:17.140 --> 01:56:19.140]  то есть такое может быть, давайте посмотрим там,
[01:56:19.140 --> 01:56:22.140]  Лемма два.
[01:56:22.140 --> 01:56:33.140]  Допустим, количество вершин ранга ить у нас не более чем,
[01:56:33.140 --> 01:56:38.140]  ну допустим, n поделить на, n поделить на 2 в степени
[01:56:38.140 --> 01:56:41.140]  вот этот вот ить.
[01:56:41.140 --> 01:56:44.140]  Ну и ять.
[01:56:44.140 --> 01:56:46.140]  Лучше бы ить, конечно.
[01:56:46.140 --> 01:56:49.140]  Нет, ладно, ить это, конечно, там, да, операция с полуфинала
[01:56:49.140 --> 01:56:52.140]  2010 года, но да.
[01:56:52.140 --> 01:56:53.140]  Ну а что там, ну да, там.
[01:56:53.140 --> 01:56:56.140]  Ну правда, это такой вопрос как переводить, конечно.
[01:56:56.140 --> 01:56:58.140]  В английской версии не было, потом в русской версии
[01:56:58.140 --> 01:56:59.140]  появилась.
[01:56:59.140 --> 01:57:01.140]  Операция ить, это там, что-нибудь там, операция на матрицах,
[01:57:01.140 --> 01:57:05.140]  которая там делается каким-то там образом.
[01:57:05.140 --> 01:57:06.140]  А, нет, ну вот.
[01:57:06.140 --> 01:57:07.140]  А, нет, не так.
[01:57:07.140 --> 01:57:09.140]  Операция ить от двух чисел.
[01:57:09.140 --> 01:57:11.140]  Раскладываем их в десятичной степени, как бы друг
[01:57:11.140 --> 01:57:14.140]  под другом в десятичной там, в десятичной степени
[01:57:14.140 --> 01:57:19.140]  и для каждой пары чисел выполняем операцию и.
[01:57:19.140 --> 01:57:20.140]  Вот.
[01:57:20.140 --> 01:57:22.140]  Операция и, ну это просто там матрица, которая двум
[01:57:22.140 --> 01:57:24.140]  цифрам там ставит в соответствии цифру, там типа там
[01:57:24.140 --> 01:57:28.140]  ноль и ноль равно нулю, а все остальные прям произвольные.
[01:57:28.140 --> 01:57:32.140]  Ну и там ваша задача найти операцию ить от а, а там
[01:57:32.140 --> 01:57:34.140]  а, ить, а плюс один, ить, а плюс два и так далее
[01:57:34.140 --> 01:57:35.140]  до б.
[01:57:35.140 --> 01:57:39.140]  А и б до десяти в восемнадцатый и время пошло.
[01:57:39.140 --> 01:57:42.140]  Кто переводил условия 2010 года?
[01:57:42.140 --> 01:57:44.140]  В 2010-м никто не переводил.
[01:57:47.140 --> 01:57:49.140]  Ну потом в группе хард потом появилось, да.
[01:57:49.140 --> 01:57:51.140]  Ну собственно я же и переводил.
[01:57:51.140 --> 01:57:53.140]  А, ну вот.
[01:57:53.140 --> 01:57:54.140]  Ну собственно.
[01:57:54.140 --> 01:57:57.140]  А, ну Вася решал эту задачу, так что соответственно.
[01:57:57.140 --> 01:57:59.140]  Так.
[01:57:59.140 --> 01:58:01.140]  А вот зря.
[01:58:03.140 --> 01:58:04.140]  Вот.
[01:58:04.140 --> 01:58:08.140]  Ну мало, ну не причитал он эту задачу, да, бывает.
[01:58:08.140 --> 01:58:11.140]  Ну когда ты решал полуфинал десятого года?
[01:58:11.140 --> 01:58:13.140]  Скорее всего в прошлом.
[01:58:13.140 --> 01:58:14.140]  Нет, а, ну вот.
[01:58:14.140 --> 01:58:15.140]  Ладно.
[01:58:15.140 --> 01:58:17.140]  Не, ну не на...
[01:58:17.140 --> 01:58:19.140]  Не, ну Вася конечно много проходил сменку в пхард,
[01:58:19.140 --> 01:58:21.140]  но не настолько, да.
[01:58:21.140 --> 01:58:22.140]  Ладно.
[01:58:22.140 --> 01:58:23.140]  Так вот.
[01:58:23.140 --> 01:58:25.140]  Значит чем нам это помогает?
[01:58:25.140 --> 01:58:29.140]  Давайте помогает нам это тем, что давайте просуммируем.
[01:58:29.140 --> 01:58:31.140]  Значит по всем рангам.
[01:58:31.140 --> 01:58:33.140]  Допустим по всем рангам.
[01:58:33.140 --> 01:58:35.140]  Допустим.
[01:58:35.140 --> 01:58:37.140]  Значит.
[01:58:37.140 --> 01:58:39.140]  От r плюс один до.
[01:58:39.140 --> 01:58:43.140]  Ну, наверное, лог 2n округленного вниз.
[01:58:43.140 --> 01:58:47.140]  Но больше у нас ранги не бывают, как вы помните, да.
[01:58:47.140 --> 01:58:51.140]  Мы просуммируем вот такую вот интересную величину, как.
[01:58:51.140 --> 01:58:55.140]  Ну, во-первых, n делить на 2 в степени.
[01:58:55.140 --> 01:58:57.140]  Ну, количество стока вершин.
[01:58:57.140 --> 01:59:00.140]  И в каждой из них у нас получается.
[01:59:00.140 --> 01:59:02.140]  Два.
[01:59:02.140 --> 01:59:04.140]  Там два в степени.
[01:59:04.140 --> 01:59:06.140]  Собственно, y пополам.
[01:59:06.140 --> 01:59:08.140]  Округленное вверх.
[01:59:08.140 --> 01:59:10.140]  Минус.
[01:59:10.140 --> 01:59:12.140]  R пополам вершин.
[01:59:12.140 --> 01:59:14.140]  Вот.
[01:59:14.140 --> 01:59:16.140]  Понятно, да?
[01:59:16.140 --> 01:59:18.140]  Да.
[01:59:18.140 --> 01:59:20.140]  Да.
[01:59:20.140 --> 01:59:22.140]  То самое n.
[01:59:22.140 --> 01:59:24.140]  Ну, во-первых, это можно оценить как.
[01:59:24.140 --> 01:59:26.140]  Какую единицу?
[01:59:26.140 --> 01:59:28.140]  Какую единицу?
[01:59:28.140 --> 01:59:32.140]  Ну, когда мы суммируем it от r плюс один, то уже не надо.
[01:59:32.140 --> 01:59:34.140]  Вот.
[01:59:34.140 --> 01:59:36.140]  Но это меньше либо равно.
[01:59:36.140 --> 01:59:38.140]  Ну, давайте вот это вот округление.
[01:59:38.140 --> 01:59:40.140]  Можно как it пополам.
[01:59:40.140 --> 01:59:42.140]  Ну, можно писать так.
[01:59:42.140 --> 01:59:44.140]  Ну, заметим, что.
[01:59:44.140 --> 01:59:46.140]  Да.
[01:59:46.140 --> 01:59:48.140]  Есть маленький приятный факт.
[01:59:48.140 --> 01:59:52.140]  Например, it пополам меньше либо равно, чем it пополам.
[01:59:52.140 --> 01:59:54.140]  Только вот здесь плюс один.
[01:59:54.140 --> 01:59:56.140]  Только вот здесь плюс один.
[01:59:56.140 --> 02:00:00.140]  Значит, это меньше либо равно, чем.
[02:00:00.140 --> 02:00:04.140]  Значит, сумма по тем же самым it.
[02:00:04.140 --> 02:00:06.140]  Там log 2n.
[02:00:06.140 --> 02:00:08.140]  Что у нас там получается?
[02:00:08.140 --> 02:00:10.140]  Я предлагаю просто, смотрите.
[02:00:10.140 --> 02:00:12.140]  Домножить всю сумму на два.
[02:00:12.140 --> 02:00:14.140]  Ну, точнее.
[02:00:14.140 --> 02:00:16.140]  Да, это не повлияет на симдотику.
[02:00:16.140 --> 02:00:18.140]  И убрать поправление вверх.
[02:00:18.140 --> 02:00:20.140]  Ну.
[02:00:20.140 --> 02:00:22.140]  Ну, можно и так, в принципе.
[02:00:22.140 --> 02:00:24.140]  Ну ладно, если так хотите, пожалуйста.
[02:00:24.140 --> 02:00:26.140]  Можно сделать так.
[02:00:26.140 --> 02:00:28.140]  Не более чем 2n.
[02:00:28.140 --> 02:00:30.140]  Нет, ну не совсем.
[02:00:30.140 --> 02:00:32.140]  Нам же нужно.
[02:00:32.140 --> 02:00:34.140]  Тут надо очень аккуратно.
[02:00:34.140 --> 02:00:36.140]  У нас же не симдотика нужна.
[02:00:36.140 --> 02:00:38.140]  Мы оцениваем количество покорапченных элементов.
[02:00:38.140 --> 02:00:40.140]  Нам нужно доказать, что их не более чем epsilon умножить на n.
[02:00:40.140 --> 02:00:42.140]  Напоминаю.
[02:00:42.140 --> 02:00:44.140]  Вот как-то это вот должно сойтись.
[02:00:44.140 --> 02:00:46.140]  Поэтому давайте лишней двоечкой тут не разбрасываться.
[02:00:46.140 --> 02:00:48.140]  Потому что скорее всего автор думал, цифры подбирал.
[02:00:48.140 --> 02:00:50.140]  Как всегда.
[02:00:50.140 --> 02:00:52.140]  Поэтому тут давайте.
[02:00:52.140 --> 02:00:54.140]  Поэтому давайте тут будет.
[02:00:54.140 --> 02:00:56.140]  Ну, я не знаю.
[02:00:56.140 --> 02:00:58.140]  Можно попробовать тут через корень из двух развлечься.
[02:00:58.140 --> 02:01:00.140]  Вот.
[02:01:00.140 --> 02:01:02.140]  Там.
[02:01:02.140 --> 02:01:04.140]  Так, тогда тут будет вот так.
[02:01:04.140 --> 02:01:06.140]  И минус r пополам.
[02:01:06.140 --> 02:01:08.140]  Это равно тогда к чему?
[02:01:08.140 --> 02:01:10.140]  Тогда это равно.
[02:01:10.140 --> 02:01:12.140]  Значит n на корень из двух.
[02:01:12.140 --> 02:01:14.140]  На такую сумму, как 2 в степени.
[02:01:14.140 --> 02:01:16.140]  Ить пополам.
[02:01:16.140 --> 02:01:18.140]  Ладно.
[02:01:18.140 --> 02:01:20.140]  2 в степени минус.
[02:01:20.140 --> 02:01:22.140]  Даже странно.
[02:01:22.140 --> 02:01:24.140]  Минус ить пополам.
[02:01:24.140 --> 02:01:26.140]  Минус r пополам.
[02:01:26.140 --> 02:01:28.140]  Где ить у нас суммируется от r плюс 1.
[02:01:28.140 --> 02:01:30.140]  Какого-то там несчастного алгорифма.
[02:01:30.140 --> 02:01:32.140]  Ну, уже по барабану до чего она суммируется.
[02:01:32.140 --> 02:01:34.140]  Потому что очень хочется его суммировать.
[02:01:34.140 --> 02:01:36.140]  Видимо уже прямо до бесконечности.
[02:01:36.140 --> 02:01:38.140]  Потому что все равно арифметическая прогрессия.
[02:01:38.140 --> 02:01:40.140]  Правда?
[02:01:40.140 --> 02:01:42.140]  Но как бы мы знаем, что эта сумма не превосходит.
[02:01:42.140 --> 02:01:44.140]  На самом деле.
[02:01:44.140 --> 02:01:46.140]  Если я сюда просто ить подставлю.
[02:01:46.140 --> 02:01:48.140]  То есть получится n корень из двух.
[02:01:48.140 --> 02:01:50.140]  2 в степени минус r.
[02:02:08.140 --> 02:02:10.140]  Но потому что, смотрите, вот эта сумма
[02:02:10.140 --> 02:02:12.140]  она имеет вид 1 делить на 2 в степени
[02:02:12.140 --> 02:02:14.140]  там, я не знаю, k плюс 1.
[02:02:14.140 --> 02:02:16.140]  Плюс 1 делить на 2 в степени k плюс 2.
[02:02:16.140 --> 02:02:18.140]  Плюс и так далее.
[02:02:18.140 --> 02:02:20.140]  Плюс 1 делить на 2 в степени l.
[02:02:20.140 --> 02:02:22.140]  Логично, да?
[02:02:22.140 --> 02:02:24.140]  Ну, только тут k равно r,
[02:02:24.140 --> 02:02:26.140]  а l равно
[02:02:26.140 --> 02:02:28.140]  лог 2n.
[02:02:28.140 --> 02:02:30.140]  Округленный вниз.
[02:02:30.140 --> 02:02:32.140]  Но заметим, что если я даже
[02:02:32.140 --> 02:02:34.140]  просто до бесконечности сумму допилю.
[02:02:34.140 --> 02:02:36.140]  То есть если я сумму эту до бесконечности пилю,
[02:02:36.140 --> 02:02:38.140]  то ее предел будет равен
[02:02:38.140 --> 02:02:40.140]  в точности 1 делить на 2 в степени k.
[02:02:40.140 --> 02:02:42.140]  Нет, я...
[02:02:42.140 --> 02:02:44.140]  Это понятно?
[02:02:44.140 --> 02:02:46.140]  Вот я отсюда и пишу,
[02:02:46.140 --> 02:02:48.140]  то есть я...
[02:02:48.140 --> 02:02:50.140]  А,
[02:02:50.140 --> 02:02:52.140]  я вас понял, да.
[02:02:52.140 --> 02:02:54.140]  А, тут проблема в том,
[02:02:54.140 --> 02:02:56.140]  что шаг тут, к сожалению,
[02:02:56.140 --> 02:02:58.140]  не 2, а корень из 2, да?
[02:03:02.140 --> 02:03:04.140]  Ну, ладно.
[02:03:04.140 --> 02:03:06.140]  Тогда я уточню так.
[02:03:06.140 --> 02:03:08.140]  2 на 1 плюс корень из 2
[02:03:08.140 --> 02:03:10.140]  на 2 в степени r.
[02:03:10.140 --> 02:03:12.140]  Вот так это на самом деле будет.
[02:03:12.140 --> 02:03:14.140]  Но я все эти слагаемые
[02:03:14.140 --> 02:03:16.140]  разобью на пары соседних.
[02:03:16.140 --> 02:03:18.140]  То есть как бы слагаемые
[02:03:18.140 --> 02:03:20.140]  и слагаемые там деленные еще
[02:03:20.140 --> 02:03:22.140]  дополнительно на корень.
[02:03:22.140 --> 02:03:24.140]  А, тут можно даже не...
[02:03:24.140 --> 02:03:26.140]  Вот.
[02:03:26.140 --> 02:03:28.140]  То есть как бы если их разбить на пары,
[02:03:28.140 --> 02:03:30.140]  то это будет там 1 плюс 1
[02:03:30.140 --> 02:03:32.140]  делить на корень из 2 на уже тоже
[02:03:32.140 --> 02:03:34.140]  геометрическая прогрессия, но на этот раз
[02:03:34.140 --> 02:03:36.140]  уже с шагом одна вторая.
[02:03:38.140 --> 02:03:40.140]  Ну,
[02:03:40.140 --> 02:03:42.140]  потому что тут шаг
[02:03:42.140 --> 02:03:44.140]  не 1, а
[02:03:44.140 --> 02:03:46.140]  2,
[02:03:46.140 --> 02:03:48.140]  а
[02:03:48.140 --> 02:03:50.140]  3,
[02:03:50.140 --> 02:03:52.140]  а
[02:03:52.140 --> 02:03:54.140]  4,
[02:03:54.140 --> 02:03:56.140]  а
[02:03:56.140 --> 02:03:58.140]  5,
[02:03:58.140 --> 02:04:00.140]  6,
[02:04:00.140 --> 02:04:02.140]  7,
[02:04:02.140 --> 02:04:04.140]  8,
[02:04:04.140 --> 02:04:06.140]  9,
[02:04:06.140 --> 02:04:08.140]  ну, потому что тут шаг не 1,
[02:04:08.140 --> 02:04:10.140]  а не 2,
[02:04:10.140 --> 02:04:12.140]  то есть как бы они тут увеличиваются не на 1,
[02:04:12.140 --> 02:04:14.140]  а одна вторая. Получается шаг аерисметической
[02:04:14.140 --> 02:04:16.140]  прогрессии как бы там.
[02:04:16.140 --> 02:04:18.140]  Ну, то есть если слагаемые вот разбить на пары,
[02:04:18.140 --> 02:04:20.140]  ну, то есть у нас там...
[02:04:20.140 --> 02:04:22.140]  Ну, то есть получается на самом деле так.
[02:04:22.140 --> 02:04:24.140]  Получается
[02:04:24.140 --> 02:04:26.140]  на самом деле так.
[02:04:26.140 --> 02:04:28.140]  1 делить на 2 в степени там
[02:04:28.140 --> 02:04:30.140]  допустим k плюс 1.
[02:04:30.140 --> 02:04:32.140]  Вот давайте так.
[02:04:32.140 --> 02:04:34.140]  1 k плюс 1 пополам плюс 1
[02:04:34.140 --> 02:04:36.140]  делить на 2 в степени k плюс 2 пополам
[02:04:36.140 --> 02:04:38.140]  там плюс 1 делить
[02:04:38.140 --> 02:04:40.140]  на 2 в степени k плюс 3 пополам
[02:04:40.140 --> 02:04:42.140]  плюс и так далее.
[02:04:42.140 --> 02:04:44.140]  Допустим до бесконечности, да?
[02:04:46.140 --> 02:04:48.140]  А, нет, давайте тут вот
[02:04:48.140 --> 02:04:50.140]  если я тут все-таки напишу 1 плюс
[02:04:50.140 --> 02:04:52.140]  корень из 2, то что это вот можно написать,
[02:04:52.140 --> 02:04:54.140]  что это равно 1 плюс корень
[02:04:54.140 --> 02:04:56.140]  из 2 на
[02:04:56.140 --> 02:04:58.140]  1 делить на 2 в степени
[02:04:58.140 --> 02:05:00.140]  k плюс 2 пополам
[02:05:00.140 --> 02:05:02.140]  k это 2, да?
[02:05:02.140 --> 02:05:04.140]  k это
[02:05:04.140 --> 02:05:06.140]  в нашем случае r на самом деле потом.
[02:05:06.140 --> 02:05:08.140]  Да.
[02:05:08.140 --> 02:05:10.140]  Да.
[02:05:10.140 --> 02:05:12.140]  Как я сейчас делаю это...
[02:05:12.140 --> 02:05:14.140]  А, ну там...
[02:05:16.140 --> 02:05:18.140]  У нас первая члена
[02:05:18.140 --> 02:05:20.140]  это 2r плюс 1 пополам.
[02:05:20.140 --> 02:05:22.140]  А, ну хорошо, тогда
[02:05:22.140 --> 02:05:24.140]  ну 2r получается, да, где-то.
[02:05:24.140 --> 02:05:26.140]  Где-то так.
[02:05:26.140 --> 02:05:28.140]  Так.
[02:05:28.140 --> 02:05:30.140]  Сейчас, ну вот 2 в степени
[02:05:30.140 --> 02:05:32.140]  1 плюс 6 пополам
[02:05:32.140 --> 02:05:34.140]  плюс и так далее.
[02:05:34.140 --> 02:05:36.140]  То есть, заметим, что
[02:05:36.140 --> 02:05:38.140]  а эта штука уже идет шагом
[02:05:38.140 --> 02:05:40.140]  одна вторая, то есть это у нас равно
[02:05:40.140 --> 02:05:42.140]  на самом деле 1 плюс корень из 2
[02:05:42.140 --> 02:05:44.140]  1 делить на 2 в степени
[02:05:44.140 --> 02:05:46.140]  k пополам.
[02:05:50.140 --> 02:05:52.140]  Ну, да.
[02:05:52.140 --> 02:05:54.140]  Откуда у нас там вообще кое-что взялось
[02:05:54.140 --> 02:05:56.140]  с самого начала?
[02:05:56.140 --> 02:05:58.140]  Ну, потому что, видите, у нас была геометрическая прогрессия
[02:05:58.140 --> 02:06:00.140]  корень из 2.
[02:06:00.140 --> 02:06:02.140]  Вот. Я как бы вынес 1 плюс корень из 2
[02:06:02.140 --> 02:06:04.140]  и как бы вот
[02:06:04.140 --> 02:06:06.140]  если из этой, то есть как бы это
[02:06:06.140 --> 02:06:08.140]  вот эта сумма от 2, это что такое?
[02:06:08.140 --> 02:06:10.140]  Это вот эта умноженная на 1 плюс корень из 2.
[02:06:10.140 --> 02:06:12.140]  Следующие это вот эти два, слагаем их на 1 плюс корень из 2.
[02:06:12.140 --> 02:06:14.140]  Все.
[02:06:14.140 --> 02:06:16.140]  Так.
[02:06:16.140 --> 02:06:18.140]  Ну, получилась, в общем, какая-то константа.
[02:06:20.140 --> 02:06:22.140]  Вот. Да, может быть,
[02:06:22.140 --> 02:06:24.140]  не идеальна точно как у автора, но
[02:06:24.140 --> 02:06:26.140]  получила, ну вот. Но, по крайней мере, теперь давайте
[02:06:26.140 --> 02:06:28.140]  подставим, что такое 2 в степени минус r?
[02:06:32.140 --> 02:06:34.140]  То есть, на самом деле, да, то есть
[02:06:34.140 --> 02:06:36.140]  2 в степени минус r, да, то есть это
[02:06:36.140 --> 02:06:38.140]  как бы по-нашему это получается равно
[02:06:38.140 --> 02:06:40.140]  там
[02:06:40.140 --> 02:06:42.140]  значит, 2 плюс
[02:06:42.140 --> 02:06:44.140]  корень из 2 r
[02:06:44.140 --> 02:06:46.140]  поделить на
[02:06:46.140 --> 02:06:48.140]  2 в степени
[02:06:48.140 --> 02:06:50.140]  2 плюс, значит,
[02:06:50.140 --> 02:06:52.140]  2 логарифма округленных
[02:06:52.140 --> 02:06:54.140]  вниз, 1 делить на епсел.
[02:06:56.140 --> 02:06:58.140]  Количество покорапченных элементов, мы считаем.
[02:07:00.140 --> 02:07:02.140]  Вот.
[02:07:02.140 --> 02:07:04.140]  Так, ладно, давайте вот это я сотру, а то что-то как-то
[02:07:04.140 --> 02:07:06.140]  ой, места уже не хватает.
[02:07:06.140 --> 02:07:08.140]  Так, теперь смотрите.
[02:07:08.140 --> 02:07:10.140]  Что приятно.
[02:07:10.140 --> 02:07:12.140]  С точки зрения меньше либо равно
[02:07:12.140 --> 02:07:14.140]  так, я тут
[02:07:14.140 --> 02:07:16.140]  ой, я, да, n должен убить.
[02:07:16.140 --> 02:07:18.140]  Так, тут n. Заметим 2 плюс
[02:07:18.140 --> 02:07:20.140]  вот эти вот зачем, видите, отчасти зачем
[02:07:20.140 --> 02:07:22.140]  это были 2 плюс 2 вот логарифма,
[02:07:22.140 --> 02:07:24.140]  не только для технической радости,
[02:07:24.140 --> 02:07:26.140]  а еще это нужно было бы для того,
[02:07:26.140 --> 02:07:28.140]  чтобы
[02:07:28.140 --> 02:07:30.140]  соответственно сказать, что это с точки зрения
[02:07:30.140 --> 02:07:32.140]  меньше либо равно вот эти 2 в квадрате убивают
[02:07:32.140 --> 02:07:34.140]  вот эти 2 плюс корней из 2.
[02:07:34.140 --> 02:07:36.140]  То есть получается это не более, чем n
[02:07:36.140 --> 02:07:38.140]  на 2 в степени
[02:07:38.140 --> 02:07:40.140]  2 логарифма, 1 делить
[02:07:40.140 --> 02:07:42.140]  на епсел.
[02:07:44.140 --> 02:07:46.140]  Вот.
[02:07:46.140 --> 02:07:48.140]  Как мы
[02:07:48.140 --> 02:07:50.140]  в знаменателе 2 в степени r плюс 2 логарифма
[02:07:50.140 --> 02:07:52.140]  1 делить на епсел.
[02:07:52.140 --> 02:07:54.140]  Чего-чего?
[02:07:54.140 --> 02:07:56.140]  А, это не только с точки зрения.
[02:08:02.140 --> 02:08:04.140]  Вот. Вот получается примерно так.
[02:08:04.140 --> 02:08:06.140]  То есть, ну, видите, в знаменателе,
[02:08:06.140 --> 02:08:08.140]  поэтому тут можно убрать это округление.
[02:08:08.140 --> 02:08:10.140]  Но 2 в степени лог 1 делить
[02:08:10.140 --> 02:08:12.140]  на епсел получается это. То есть получается
[02:08:12.140 --> 02:08:14.140]  n поделить надо. Тут даже
[02:08:14.140 --> 02:08:16.140]  вообще весело. 1 делить на епсел
[02:08:16.140 --> 02:08:18.140]  в квадрате.
[02:08:18.140 --> 02:08:20.140]  Это равно даже епселон квадрат n,
[02:08:20.140 --> 02:08:22.140]  что интересно.
[02:08:24.140 --> 02:08:26.140]  Ну, неплохо, Дэн.
[02:08:34.140 --> 02:08:36.140]  Чего епселон больше?
[02:08:36.140 --> 02:08:38.140]  Не, ну, епселон квадрат
[02:08:38.140 --> 02:08:40.140]  n это лучше, чем
[02:08:40.140 --> 02:08:42.140]  епселон n даже.
[02:08:42.140 --> 02:08:44.140]  Коррапченных элементов даже сильно
[02:08:44.140 --> 02:08:46.140]  оказалось меньше, чем мы думали.
[02:08:46.140 --> 02:08:48.140]  Ну, не особо меньше.
[02:08:48.140 --> 02:08:50.140]  В смысле,
[02:08:50.140 --> 02:08:52.140]  у нас епселон,
[02:08:52.140 --> 02:08:54.140]  если, например, она треть, то у нас вместо одной треть
[02:08:54.140 --> 02:08:56.140]  одна девятая. Так нет.
[02:08:56.140 --> 02:08:58.140]  Ну, у тебя асимплотика
[02:09:00.140 --> 02:09:02.140]  асимплотика работает
[02:09:02.140 --> 02:09:04.140]  логарифм от епселона.
[02:09:04.140 --> 02:09:06.140]  Ну, да.
[02:09:06.140 --> 02:09:08.140]  Поэтому, когда 2 епселона делить в квадрате,
[02:09:08.140 --> 02:09:10.140]  асимплотика не меняется. То есть,
[02:09:10.140 --> 02:09:12.140]  если мы теперь скажем, что у нас епселон штрих
[02:09:12.140 --> 02:09:14.140]  равно епселон квадрат,
[02:09:14.140 --> 02:09:16.140]  то мы, по сути, догадали то, что мы изначально хотели.
[02:09:16.140 --> 02:09:18.140]  Ну, по сути, да. То есть, может быть,
[02:09:18.140 --> 02:09:20.140]  можно даже задуматься, что r можно и ослабить
[02:09:20.140 --> 02:09:22.140]  чуть-чуть.
[02:09:22.140 --> 02:09:24.140]  Ну, да, получается.
[02:09:24.140 --> 02:09:26.140]  Может, получается, что у нас как будто
[02:09:26.140 --> 02:09:28.140]  это двойка даже.
[02:09:28.140 --> 02:09:30.140]  Но нет, может быть, знаете как,
[02:09:30.140 --> 02:09:32.140]  эта двойка, может быть,
[02:09:32.140 --> 02:09:34.140]  взята для технических нужд,
[02:09:34.140 --> 02:09:36.140]  для того, чтобы у нас там этот ранг всегда был
[02:09:36.140 --> 02:09:38.140]  хрен с ним чётный.
[02:09:38.140 --> 02:09:40.140]  Ну, помните, нам там где-то это
[02:09:40.140 --> 02:09:42.140]  как-то чуть-чуть технически помогло.
[02:09:44.140 --> 02:09:46.140]  В какой-то момент дело было.
[02:09:46.140 --> 02:09:48.140]  Вот. Поэтому можно и так.
[02:09:48.140 --> 02:09:50.140]  Ну, вот. Можно, конечно, пересмотреть, но,
[02:09:50.140 --> 02:09:52.140]  по-моему, да, там...
[02:09:52.140 --> 02:09:54.140]  То есть, тут надо глянуть. Интересно там.
[02:09:54.140 --> 02:09:56.140]  То есть, может, мы чё потеряли, я не знаю,
[02:09:56.140 --> 02:09:58.140]  по дороге? Ну, вроде нет.
[02:09:58.140 --> 02:10:00.140]  Давай.
[02:10:02.140 --> 02:10:04.140]  Мы же посчитали вот эту сумму,
[02:10:04.140 --> 02:10:06.140]  получили единиц, терянная на 2,
[02:10:06.140 --> 02:10:08.140]  не ка пополам.
[02:10:08.140 --> 02:10:10.140]  А тут у нас...
[02:10:10.140 --> 02:10:12.140]  Чего-чего?
[02:10:12.140 --> 02:10:14.140]  Вот мы посчитали вот эту сумму
[02:10:14.140 --> 02:10:16.140]  с кашками.
[02:10:16.140 --> 02:10:18.140]  Потому что, ну, смотрите, потому что получается,
[02:10:18.140 --> 02:10:20.140]  ну, как вы смотрите,
[02:10:20.140 --> 02:10:22.140]  если я вот так вот объединю,
[02:10:22.140 --> 02:10:24.140]  то у меня получится тут это
[02:10:24.140 --> 02:10:26.140]  ить плюс р, да?
[02:10:26.140 --> 02:10:28.140]  Ну, вот. То есть, ить начинает
[02:10:28.140 --> 02:10:30.140]  с r плюс 1, то есть, вот эта штука
[02:10:30.140 --> 02:10:32.140]  начинает с 2r плюс 1.
[02:10:32.140 --> 02:10:34.140]  Следовательно, то есть,
[02:10:34.140 --> 02:10:36.140]  равно 2r, тут, получается, должно быть
[02:10:36.140 --> 02:10:38.140]  2 в степени 2р пополам, отсюда r, да?
[02:10:38.140 --> 02:10:40.140]  Вот так.
[02:10:40.140 --> 02:10:42.140]  Угу.
[02:10:42.140 --> 02:10:44.140]  Так.
[02:10:48.140 --> 02:10:50.140]  Ну, да, нет,
[02:10:50.140 --> 02:10:52.140]  странно тут.
[02:10:58.140 --> 02:11:00.140]  Да, странно.
[02:11:00.140 --> 02:11:02.140]  Как будто...
[02:11:02.140 --> 02:11:04.140]  Ну, может.
[02:11:12.140 --> 02:11:14.140]  Ну, не знаю.
[02:11:14.140 --> 02:11:16.140]  Ладно.
[02:11:16.140 --> 02:11:18.140]  Так, ладно.
[02:11:18.140 --> 02:11:20.140]  Там, честно скажу, у автора, может, там вычисление,
[02:11:20.140 --> 02:11:22.140]  конечно, немножко по-другому, но...
[02:11:26.140 --> 02:11:28.140]  Чего автор?
[02:11:28.140 --> 02:11:30.140]  Ну...
[02:11:30.140 --> 02:11:32.140]  Не, ну он там...
[02:11:32.140 --> 02:11:34.140]  Не, ну он там сразу пытался какую-то сумму
[02:11:34.140 --> 02:11:36.140]  делать, но я не знаю, вот мы тут...
[02:11:36.140 --> 02:11:38.140]  То есть, можно, конечно, у автора было бы спросить,
[02:11:38.140 --> 02:11:40.140]  что мы, как бы, честно,
[02:11:40.140 --> 02:11:42.140]  по всем листам там всех рангов
[02:11:42.140 --> 02:11:44.140]  честно вот это просуммировали, у нас уже
[02:11:44.140 --> 02:11:46.140]  эпселон квадрат n получился, так что...
[02:11:46.140 --> 02:11:48.140]  Так что вроде не пострадали.
[02:11:48.140 --> 02:11:50.140]  Давай.
[02:11:50.140 --> 02:11:52.140]  Давай.
[02:11:58.140 --> 02:12:00.140]  Потому что
[02:12:00.140 --> 02:12:02.140]  в сеть ни одна из этих
[02:12:02.140 --> 02:12:04.140]  вершин не является потомком друг друга,
[02:12:04.140 --> 02:12:06.140]  и у каждой из этих вершин
[02:12:06.140 --> 02:12:08.140]  как бы есть память о своих
[02:12:08.140 --> 02:12:10.140]  два степени ядь
[02:12:10.140 --> 02:12:12.140]  в элементах, именно элементах.
[02:12:14.140 --> 02:12:16.140]  Ну, которые были
[02:12:16.140 --> 02:12:18.140]  когда-то в ней или в деревьях,
[02:12:18.140 --> 02:12:20.140]  как бы...
[02:12:24.140 --> 02:12:26.140]  Нет, только не обязательно, потому что
[02:12:26.140 --> 02:12:28.140]  могло быть так, в жиле были два дерева
[02:12:28.140 --> 02:12:30.140]  ранга r-1,
[02:12:30.140 --> 02:12:32.140]  там поудаляли по паре
[02:12:32.140 --> 02:12:34.140]  ключей, а потом эти деревья взяли
[02:12:34.140 --> 02:12:36.140]  и объединили.
[02:12:36.140 --> 02:12:38.140]  Вот, могло быть так.
[02:12:40.140 --> 02:12:42.140]  Вот. Но, как бы, тем не менее,
[02:12:42.140 --> 02:12:44.140]  в ней сохраняется память
[02:12:44.140 --> 02:12:46.140]  от тех, то есть, каждое дерево оно как бы
[02:12:46.140 --> 02:12:48.140]  создано из там...
[02:12:48.140 --> 02:12:50.140]  То есть, каждая вершина хранит в себе
[02:12:50.140 --> 02:12:52.140]  какую-то память. Если две вершины объединяются
[02:12:52.140 --> 02:12:54.140]  в более высокое дерево, то это более высокое
[02:12:54.140 --> 02:12:56.140]  дерево хранит память обо всех.
[02:12:56.140 --> 02:12:58.140]  То есть, иногда у нас случается,
[02:12:58.140 --> 02:13:00.140]  что как бы, помним, да, что вершина
[02:13:00.140 --> 02:13:02.140]  какого-то ранга исчезает.
[02:13:02.140 --> 02:13:04.140]  А дети там...
[02:13:04.140 --> 02:13:06.140]  Но у детей там память о своих
[02:13:06.140 --> 02:13:08.140]  потомках от этого все равно никуда не
[02:13:08.140 --> 02:13:10.140]  исчезает.
[02:13:10.140 --> 02:13:12.140]  Но эти деревья...
[02:13:12.140 --> 02:13:14.140]  Но тогда это...
[02:13:14.140 --> 02:13:16.140]  Тогда эти вершины предки друг друга
[02:13:16.140 --> 02:13:18.140]  и сразу сапопарно различными рангами.
[02:13:28.140 --> 02:13:30.140]  Вот.
[02:13:30.140 --> 02:13:32.140]  Как мы доказывали, что у нас
[02:13:32.140 --> 02:13:34.140]  ранги больше, чем блокарифы
[02:13:34.140 --> 02:13:36.140]  таким же образом?
[02:13:36.140 --> 02:13:38.140]  Ну, тоже по инду...
[02:13:38.140 --> 02:13:40.140]  Ну, часто по индукции доказывали, что
[02:13:40.140 --> 02:13:42.140]  как бы...
[02:13:42.140 --> 02:13:44.140]  Каждая вершина ранга
[02:13:44.140 --> 02:13:46.140]  какого-то там ранга х
[02:13:46.140 --> 02:13:48.140]  содержит память ровно
[02:13:48.140 --> 02:13:50.140]  2 в степени х своих собственных
[02:13:50.140 --> 02:13:52.140]  вершин.
[02:13:54.140 --> 02:13:56.140]  Какой?
[02:13:56.140 --> 02:13:58.140]  Вот.
[02:13:58.140 --> 02:14:00.140]  Вот строчка с...
[02:14:00.140 --> 02:14:02.140]  Там, где сумма начинается,
[02:14:02.140 --> 02:14:04.140]  всякие вычисления...
[02:14:04.140 --> 02:14:06.140]  Возникает
[02:14:06.140 --> 02:14:08.140]  самая правая штука
[02:14:08.140 --> 02:14:10.140]  в первой строчке, там неравенство n х2
[02:14:10.140 --> 02:14:12.140]  на 1 плюс х2 на 20
[02:14:12.140 --> 02:14:14.140]  и минус f, да?
[02:14:14.140 --> 02:14:16.140]  Вот как мы к этому перешли
[02:14:16.140 --> 02:14:18.140]  от первой штуковины?
[02:14:18.140 --> 02:14:20.140]  Да.
[02:14:20.140 --> 02:14:22.140]  Потому что вот эта штуковина имеет
[02:14:22.140 --> 02:14:24.140]  вот такой вид.
[02:14:24.140 --> 02:14:26.140]  Эта штуковина равна вот этой штуковине.
[02:14:28.140 --> 02:14:30.140]  Да.
[02:14:30.140 --> 02:14:32.140]  Ну вот, а эта штуковина
[02:14:32.140 --> 02:14:34.140]  уже геометрическая прогрессия шаром 2.
[02:14:36.140 --> 02:14:38.140]  То есть, можно сказать, что
[02:14:38.140 --> 02:14:40.140]  если тут суммы до бесконечности,
[02:14:40.140 --> 02:14:42.140]  то это 1 плюс х2 на 1 делить на 2 в степени как
[02:14:42.140 --> 02:14:44.140]  пополам.
[02:14:46.140 --> 02:14:48.140]  Ну и все.
[02:14:48.140 --> 02:14:50.140]  Вот так и перешли.
[02:14:52.140 --> 02:14:54.140]  Нет.
[02:14:54.140 --> 02:14:56.140]  Видите, тут минус... Тут как бы
[02:14:56.140 --> 02:14:58.140]  мы знаем, мы не с r плюс 1,
[02:14:58.140 --> 02:15:00.140]  а с r плюс 1 плюс r пополам.
[02:15:00.140 --> 02:15:02.140]  А, все понял.
[02:15:02.140 --> 02:15:04.140]  Вот, поэтому 2r.
[02:15:04.140 --> 02:15:06.140]  Так, ну что?
[02:15:06.140 --> 02:15:08.140]  Еще вопросы есть?
[02:15:10.140 --> 02:15:12.140]  По вот этому.
[02:15:12.140 --> 02:15:14.140]  По вот этому. Вот.
[02:15:14.140 --> 02:15:16.140]  Это будет на экзамене.
[02:15:16.140 --> 02:15:18.140]  А, как же.
[02:15:18.140 --> 02:15:20.140]  А зачем нам это сказать?
[02:15:20.140 --> 02:15:22.140]  Очевидно, мы это все-таки
[02:15:22.140 --> 02:15:24.140]  поделим, чтобы дать статистику.
[02:15:24.140 --> 02:15:26.140]  Вот.
[02:15:26.140 --> 02:15:28.140]  Вот это, вот это да.
[02:15:28.140 --> 02:15:30.140]  И вот это хорошая вещь.
[02:15:30.140 --> 02:15:32.140]  Мне кажется, что
[02:15:32.140 --> 02:15:34.140]  это будет в жизни использоваться каждый день, Миша.
[02:15:36.140 --> 02:15:38.140]  Ой, ладно.
[02:15:38.140 --> 02:15:40.140]  Мне кажется, единственное
[02:15:40.140 --> 02:15:42.140]  время, когда мы будем провозить.
[02:15:44.140 --> 02:15:46.140]  Ну это значит,
[02:15:46.140 --> 02:15:48.140]  что такое полезный.
[02:15:48.140 --> 02:15:50.140]  Так.
[02:15:54.140 --> 02:15:56.140]  Так, ладно, господа.
[02:15:58.140 --> 02:16:00.140]  Так, геома тоже будет,
[02:16:00.140 --> 02:16:02.140]  не волнуйся.
[02:16:12.140 --> 02:16:14.140]  Сейчас.
[02:16:14.140 --> 02:16:16.140]  Сейчас, что значит новые деревья?
[02:16:16.140 --> 02:16:18.140]  А, ну, нет.
[02:16:18.140 --> 02:16:20.140]  Вот там фишка такая. Смотрите.
[02:16:20.140 --> 02:16:22.140]  Без лишних вот этих вот удалений,
[02:16:22.140 --> 02:16:24.140]  там, удалений вершины новых молдов,
[02:16:24.140 --> 02:16:26.140]  у нас там все работало по принципу,
[02:16:26.140 --> 02:16:28.140]  что на корне,
[02:16:28.140 --> 02:16:30.140]  условно, там,
[02:16:30.140 --> 02:16:32.140]  на корне каждого дерева находится,
[02:16:32.140 --> 02:16:34.140]  допустим, монетка,
[02:16:34.140 --> 02:16:36.140]  которая будет, ну вот, и там,
[02:16:36.140 --> 02:16:38.140]  когда вы сливаете 2 дерева,
[02:16:38.140 --> 02:16:40.140]  вы одну монетку тратите, а вторую прикладываете на корень.
[02:16:40.140 --> 02:16:42.140]  Так вот, там будет все нормально.
[02:16:42.140 --> 02:16:44.140]  По той простой причине, что
[02:16:44.140 --> 02:16:46.140]  допустим, у вершинки выпиливаете ребенка,
[02:16:46.140 --> 02:16:48.140]  вот в этом вот месте,
[02:16:48.140 --> 02:16:50.140]  да, то вы, как бы,
[02:16:50.140 --> 02:16:52.140]  на, условно, саму эту вершину
[02:16:52.140 --> 02:16:54.140]  кладете монетку.
[02:16:54.140 --> 02:16:56.140]  И тогда получится,
[02:16:56.140 --> 02:16:58.140]  что если вы решили пройтись
[02:16:58.140 --> 02:17:00.140]  по ряду, обнаружили, что тут надо
[02:17:00.140 --> 02:17:02.140]  его удалять, то выяснится, что
[02:17:02.140 --> 02:17:04.140]  вы как бы выпилили там не менее, чем половину
[02:17:04.140 --> 02:17:06.140]  детей, и у вас на этом ряду, значит, лежит
[02:17:06.140 --> 02:17:08.140]  не менее половины монеток.
[02:17:08.140 --> 02:17:10.140]  Этими монетками,
[02:17:10.140 --> 02:17:12.140]  эти монетки вы, собственно, там детям раздаете,
[02:17:12.140 --> 02:17:14.140]  и все в порядке.
[02:17:14.140 --> 02:17:16.140]  Там вот такой
[02:17:16.140 --> 02:17:18.140]  тонкий.
[02:17:18.140 --> 02:17:20.140]  Вот такой вот тонкий шаманство.
[02:17:22.140 --> 02:17:24.140]  Так.
[02:17:24.140 --> 02:17:26.140]  Ладно.
[02:17:26.140 --> 02:17:28.140]  Так что пришло время, наконец, выдохнуть
[02:17:28.140 --> 02:17:30.140]  и перейти к чему-нибудь еще.
[02:17:30.140 --> 02:17:32.140]  Чего?
[02:17:32.140 --> 02:17:34.140]  Так, значит, смотрите.
[02:17:34.140 --> 02:17:36.140]  Так, а вот тут сейчас будем решать честно,
[02:17:36.140 --> 02:17:38.140]  демократическим путем.
[02:17:38.140 --> 02:17:40.140]  Нет, давайте так.
[02:17:40.140 --> 02:17:42.140]  Нет, честно скажу, я вам хочу...
[02:17:42.140 --> 02:17:44.140]  Нет, я хочу сейчас дать какой-нибудь блок,
[02:17:44.140 --> 02:17:46.140]  по которому можно, действительно, дать, наконец,
[02:17:46.140 --> 02:17:48.140]  хорошее домашнее задание.
[02:17:48.140 --> 02:17:50.140]  Вот, и у меня есть два...
[02:17:50.140 --> 02:17:52.140]  Нет, смотрите, у меня есть два... Нет.
[02:17:52.140 --> 02:17:54.140]  Нет, у Atomic Hip...
[02:17:56.140 --> 02:17:58.140]  Нет, не на столь.
[02:18:02.140 --> 02:18:04.140]  Проверят, проверят.
[02:18:04.140 --> 02:18:06.140]  Так, смотрите.
[02:18:06.140 --> 02:18:08.140]  Так, ребят, ребят, ребят.
[02:18:08.140 --> 02:18:10.140]  Ребят, ребят, ребят.
[02:18:10.140 --> 02:18:12.140]  Так, тишина. Ребят, давайте не тянем время.
[02:18:14.140 --> 02:18:16.140]  А то как выданут.
[02:18:16.140 --> 02:18:18.140]  Значит, смотрите.
[02:18:18.140 --> 02:18:20.140]  Значит, смотрите.
[02:18:20.140 --> 02:18:22.140]  Блоки, на самом деле, предлагаются
[02:18:22.140 --> 02:18:24.140]  следующими. Первый блок уже обсуждался.
[02:18:24.140 --> 02:18:26.140]  То есть, хочется...
[02:18:26.140 --> 02:18:28.140]  Это мы будем активно обсуждать всякие двоичные
[02:18:28.140 --> 02:18:30.140]  деревья поиска.
[02:18:30.140 --> 02:18:32.140]  Ну, то есть, да, их у нас там много.
[02:18:32.140 --> 02:18:34.140]  То есть, это там у нас...
[02:18:34.140 --> 02:18:36.140]  Это будет АВ, как минимум, АВ,
[02:18:36.140 --> 02:18:38.140]  это будет красночерное дерево,
[02:18:38.140 --> 02:18:40.140]  это будет сплей дерево,
[02:18:40.140 --> 02:18:42.140]  это будет Б дерево, конечно.
[02:18:42.140 --> 02:18:44.140]  Б.
[02:18:44.140 --> 02:18:46.140]  Б.
[02:18:46.140 --> 02:18:48.140]  Вторая буква латинского алфавитом.
[02:18:50.140 --> 02:18:52.140]  Вот, а Б...
[02:18:52.140 --> 02:18:54.140]  Вот.
[02:18:56.140 --> 02:18:58.140]  Ну, вот.
[02:18:58.140 --> 02:19:00.140]  Нет, ну, естественно, там упомянем,
[02:19:00.140 --> 02:19:02.140]  конечно, дикартьячку.
[02:19:02.140 --> 02:19:04.140]  Упомянем в том плане, что тервера мы не знаем,
[02:19:04.140 --> 02:19:06.140]  поэтому доказывать ее не будем,
[02:19:06.140 --> 02:19:08.140]  но нам это и не будет нужно.
[02:19:08.140 --> 02:19:10.140]  Потому что, если мы хотим делать сплит, мёртвый, прочий,
[02:19:10.140 --> 02:19:12.140]  и реверс на подотреске, который вы любите делать в дикарьтехах,
[02:19:12.140 --> 02:19:14.140]  на самом деле, и АВ,
[02:19:14.140 --> 02:19:16.140]  и Б дерево, и даже красночёрное дерево
[02:19:16.140 --> 02:19:18.140]  прекрасно умеют это делать.
[02:19:18.140 --> 02:19:20.140]  Просто мало кто об этом знает.
[02:19:20.140 --> 02:19:22.140]  Но на самом деле, они всё это умеют.
[02:19:22.140 --> 02:19:24.140]  Вот.
[02:19:24.140 --> 02:19:26.140]  Чего? Да.
[02:19:26.140 --> 02:19:28.140]  Ну, я не знаю. Нет, на самом деле, вам понравится.
[02:19:28.140 --> 02:19:30.140]  Значит, это
[02:19:30.140 --> 02:19:32.140]  один блок.
[02:19:32.140 --> 02:19:34.140]  Блок второй.
[02:19:34.140 --> 02:19:36.140]  Ну, в общем,
[02:19:36.140 --> 02:19:38.140]  ладно, не буду тут долго анонсировать.
[02:19:38.140 --> 02:19:40.140]  Блок второй – это про фурье.
[02:19:40.140 --> 02:19:42.140]  Значит,
[02:19:42.140 --> 02:19:44.140]  что такое фурье?
[02:19:44.140 --> 02:19:46.140]  Ну, давайте я тебя уже полностью анонсирую.
[02:19:46.140 --> 02:19:48.140]  Ну, про фурье там тоже
[02:19:48.140 --> 02:19:50.140]  на самом деле блок достаточно большой.
[02:19:50.140 --> 02:19:52.140]  Ну, потому что понятно,
[02:19:52.140 --> 02:19:54.140]  помимо самого фурье,
[02:19:54.140 --> 02:19:56.140]  мы делаем не только умножение многочленов,
[02:19:56.140 --> 02:19:58.140]  но и деление многочленов.
[02:19:58.140 --> 02:20:00.140]  Также мы научимся делать
[02:20:00.140 --> 02:20:02.140]  длинные деления даже чисел.
[02:20:02.140 --> 02:20:04.140]  Да.
[02:20:04.140 --> 02:20:06.140]  Ставка за nLogin.
[02:20:06.140 --> 02:20:08.140]  Вот.
[02:20:08.140 --> 02:20:10.140]  Да, я утверждаю, что
[02:20:10.140 --> 02:20:12.140]  я умею делить числа
[02:20:12.140 --> 02:20:14.140]  длины 100 тысяч
[02:20:14.140 --> 02:20:16.140]  с остатком за nLogin.
[02:20:20.140 --> 02:20:22.140]  Чего? По какому модулю?
[02:20:22.140 --> 02:20:24.140]  FFT? Нет. Ну, FFT по модулю
[02:20:24.140 --> 02:20:26.140]  тоже упомянем, куда же мы денемся.
[02:20:26.140 --> 02:20:28.140]  Вот. Может быть, даже в связи
[02:20:28.140 --> 02:20:30.140]  мы какую-нибудь течежку обсудим.
[02:20:30.140 --> 02:20:32.140]  Нет, там будут
[02:20:32.140 --> 02:20:34.140]  еще всякие вещи. Потому что, во-первых,
[02:20:34.140 --> 02:20:36.140]  будет еще многомерное преобразование
[02:20:36.140 --> 02:20:38.140]  DP. Там есть, конечно, всякие
[02:20:38.140 --> 02:20:40.140]  веселые свертки, типа SOS DP
[02:20:40.140 --> 02:20:42.140]  и его друзей.
[02:20:42.140 --> 02:20:44.140]  Там вот эти все. Так.
[02:20:44.140 --> 02:20:46.140]  Еще там будут...
[02:20:46.140 --> 02:20:48.140]  Ну, так.
[02:20:48.140 --> 02:20:50.140]  А, еще...
[02:20:50.140 --> 02:20:52.140]  А, еще будет неожиданное
[02:20:52.140 --> 02:20:54.140]  решение рекуррент.
[02:20:54.140 --> 02:20:56.140]  Ну, там в том плане,
[02:20:56.140 --> 02:20:58.140]  смотри, там фишка будет такая.
[02:20:58.140 --> 02:21:00.140]  Ну, для вас понятно, не секрет, наверное,
[02:21:00.140 --> 02:21:02.140]  что если вам дана рекуррента какая-нибудь,
[02:21:02.140 --> 02:21:04.140]  типа AN равно там, скажем,
[02:21:04.140 --> 02:21:06.140]  AN минус первое, плюс 2 AN
[02:21:06.140 --> 02:21:08.140]  минус второе, плюс там
[02:21:08.140 --> 02:21:10.140]  28 AN минус третье, да?
[02:21:10.140 --> 02:21:12.140]  И вы там хотите вычислить
[02:21:12.140 --> 02:21:14.140]  а какое-нибудь миллиардное
[02:21:14.140 --> 02:21:16.140]  по модулю миллиард 7.
[02:21:16.140 --> 02:21:18.140]  Как? Боже упаси.
[02:21:18.140 --> 02:21:20.140]  Ну, для вас самое тупое, что можно сделать,
[02:21:20.140 --> 02:21:22.140]  это как бы возвести матрицу 3 на 3
[02:21:22.140 --> 02:21:24.140]  в степень. Да.
[02:21:24.140 --> 02:21:26.140]  Там может быть какой-нибудь там берлекамп.
[02:21:26.140 --> 02:21:28.140]  Но, на самом деле, с помощью Фурятины
[02:21:28.140 --> 02:21:30.140]  мы это научимся делать тоже за...
[02:21:30.140 --> 02:21:32.140]  за еще быстрее,
[02:21:32.140 --> 02:21:34.140]  то есть научимся делать это для рекуррента
[02:21:34.140 --> 02:21:36.140]  размера 100 тысяч.
[02:21:36.140 --> 02:21:38.140]  Вот.
[02:21:38.140 --> 02:21:40.140]  Вот еще такие вещи.
[02:21:40.140 --> 02:21:42.140]  Потому что интересно.
[02:21:42.140 --> 02:21:44.140]  То есть мы сейчас решаем...
[02:21:44.140 --> 02:21:46.140]  Вот. Если мы выбираем одно,
[02:21:46.140 --> 02:21:48.140]  то другое мы никогда больше... Нет, это не верно.
[02:21:48.140 --> 02:21:50.140]  Нет, разумеется, оба блока обязательно
[02:21:50.140 --> 02:21:52.140]  будут. Но я, правда, про второй
[02:21:52.140 --> 02:21:54.140]  блок, я уже не знаю, будут ли они в каком семестре
[02:21:54.140 --> 02:21:56.140]  они будут в этом или в следующем.
[02:21:56.140 --> 02:21:58.140]  Но оба блока обязательно будут, куда ж без них.
[02:21:58.140 --> 02:22:00.140]  Поэтому...
[02:22:00.140 --> 02:22:02.140]  А, ну да, ну и всякие
[02:22:02.140 --> 02:22:04.140]  мелочи, вот эти вот там, типа,
[02:22:04.140 --> 02:22:06.140]  интерполяция многочлена там, вот это все.
[02:22:06.140 --> 02:22:08.140]  Но это все уже там... Относительно этого всего
[02:22:08.140 --> 02:22:10.140]  это все мелочи. Вот. Поэтому вопрос
[02:22:10.140 --> 02:22:12.140]  только такой. С чего мы начнем?
[02:22:12.140 --> 02:22:14.140]  Так, значит, смотрите.
[02:22:14.140 --> 02:22:16.140]  Значит, предлагаю так, ладно.
[02:22:16.140 --> 02:22:18.140]  Значит, предлагаю вам это немножко там,
[02:22:18.140 --> 02:22:20.140]  там, поиграть в кикера
[02:22:20.140 --> 02:22:22.140]  с этой мыслью.
[02:22:22.140 --> 02:22:24.140]  Поэтому давайте сейчас мы
[02:22:24.140 --> 02:22:26.140]  действительно там, давайте
[02:22:26.140 --> 02:22:28.140]  сколько-то выдохнем. И после этого
[02:22:28.140 --> 02:22:30.140]  тогда, собственно,
[02:22:30.140 --> 02:22:32.140]  демократически выберем и начнем.
[02:22:32.140 --> 02:22:34.140]  Ну а теперь, внимание у нас,
[02:22:34.140 --> 02:22:36.140]  теперь...
[02:22:36.140 --> 02:22:38.140]  Вот.
[02:22:38.140 --> 02:22:40.140]  Вот.
[02:22:40.140 --> 02:22:42.140]  Ну а теперь, внимание у нас, теперь
[02:22:42.140 --> 02:22:44.140]  кто за то, чтобы проходить
[02:22:44.140 --> 02:22:46.140]  FFT? Поднимаем руки.
[02:22:46.140 --> 02:22:48.140]  FFT!
[02:22:48.140 --> 02:22:50.140]  Ну вы чего?
[02:22:50.140 --> 02:22:52.140]  Так.
[02:22:52.140 --> 02:22:54.140]  Так. Руки держим выше.
[02:22:54.140 --> 02:22:56.140]  Так. Высоко держим руки.
[02:22:56.140 --> 02:22:58.140]  FFT!
[02:22:58.140 --> 02:23:00.140]  Так. Вверх, вверх, вверх.
[02:23:00.140 --> 02:23:02.140]  Руки преравниваются к испорченной блюте. Не надо.
[02:23:02.140 --> 02:23:04.140]  Так.
[02:23:04.140 --> 02:23:06.140]  6, 8, 11.
[02:23:06.140 --> 02:23:08.140]  И, соответственно,
[02:23:08.140 --> 02:23:10.140]  16, 18. Спасибо.
[02:23:10.140 --> 02:23:12.140]  Так. Ну ладно.
[02:23:12.140 --> 02:23:14.140]  Да.
[02:23:14.140 --> 02:23:16.140]  Нет, тут есть только...
[02:23:16.140 --> 02:23:18.140]  Хорошая попытка у нас.
[02:23:18.140 --> 02:23:20.140]  У вас тут не сорок.
[02:23:20.140 --> 02:23:22.140]  А еще некоторые
[02:23:22.140 --> 02:23:24.140]  любят второй раз руки поднимать, только
[02:23:24.140 --> 02:23:26.140]  на это надежда. Итак, кто за то, чтобы проходить
[02:23:26.140 --> 02:23:28.140]  OVL и прочее сбалансированные
[02:23:28.140 --> 02:23:30.140]  FFT?
[02:23:30.140 --> 02:23:32.140]  Да.
[02:23:36.140 --> 02:23:38.140]  Так. 1, 2, 3, 4, 5, 6,
[02:23:38.140 --> 02:23:40.140]  7, 8, 9, 10.
[02:23:40.140 --> 02:23:42.140]  Да!
[02:23:42.140 --> 02:23:44.140]  Итак.
[02:23:44.140 --> 02:23:46.140]  Так что да.
[02:23:46.140 --> 02:23:48.140]  Не, ну что, знаете, да.
[02:23:48.140 --> 02:23:50.140]  Не, ну знаете, в общем-то, там
[02:23:50.140 --> 02:23:52.140]  сериал «Слуга народа» тоже с этого начинается.
[02:23:52.140 --> 02:23:54.140]  По всем вопросам... По
[02:23:54.140 --> 02:23:56.140]  одним вопросам побеждает один кандидат.
[02:23:56.140 --> 02:23:58.140]  По другим – другой.
[02:23:58.140 --> 02:24:00.140]  В общем, если бабах 65%
[02:24:00.140 --> 02:24:02.140]  вообще у аутсайдера. Ну вот.
[02:24:02.140 --> 02:24:04.140]  Просто потому что за ним никакой олигархи не стоял.
[02:24:04.140 --> 02:24:06.140]  Так что, нет.
[02:24:06.140 --> 02:24:08.140]  Никакой геомы мы изучаем FFT.
[02:24:08.140 --> 02:24:10.140]  Все.
[02:24:10.140 --> 02:24:12.140]  Да, кстати, да.
[02:24:12.140 --> 02:24:14.140]  К вопросу окрикливо меньше.
[02:24:14.140 --> 02:24:16.140]  К вопросу окрикливо меньше.
[02:24:16.140 --> 02:24:18.140]  Вот. Знаете, смотрите.
[02:24:18.140 --> 02:24:20.140]  Так. Все.
[02:24:20.140 --> 02:24:22.140]  Значит, тишина. Итак, чем мы будем
[02:24:22.140 --> 02:24:24.140]  заниматься? Заниматься...
[02:24:24.140 --> 02:24:26.140]  Так, сначала мы возьмем микрофон. Да.
[02:24:26.140 --> 02:24:28.140]  Так. Все.
[02:24:28.140 --> 02:24:30.140]  А, жалко без... Ну вот. Ладно.
[02:24:30.140 --> 02:24:32.140]  Ладно, в любом случае, это было честно
[02:24:32.140 --> 02:24:34.140]  записано на камеру голосования.
[02:24:34.140 --> 02:24:36.140]  Так.
[02:24:40.140 --> 02:24:42.140]  Да, да, да.
[02:24:42.140 --> 02:24:44.140]  Ну ладно.
[02:24:48.140 --> 02:24:50.140]  Да, да, да. Просто кто-то
[02:24:50.140 --> 02:24:52.140]  вбросил. Да, да, да.
[02:24:52.140 --> 02:24:54.140]  Ладно.
[02:24:54.140 --> 02:24:56.140]  Смотрите.
[02:24:56.140 --> 02:24:58.140]  Вот.
[02:24:58.140 --> 02:25:00.140]  Ну, на самом деле, как бы, отчасти
[02:25:00.140 --> 02:25:02.140]  мотивация, конечно, то, чем мы сейчас будем
[02:25:02.140 --> 02:25:04.140]  заниматься, вызвана, конечно, из задач
[02:25:04.140 --> 02:25:06.140]  длинной арифметики.
[02:25:06.140 --> 02:25:08.140]  Ну вот.
[02:25:08.140 --> 02:25:10.140]  Потому что, как знают все сишники
[02:25:10.140 --> 02:25:12.140]  и не задумываются питанисты,
[02:25:12.140 --> 02:25:14.140]  действительно, числа бывают длинными.
[02:25:16.140 --> 02:25:18.140]  Вот. То есть, теперь вот C++,
[02:25:18.140 --> 02:25:20.140]  если вы хотите работать с числами
[02:25:20.140 --> 02:25:22.140]  порядка 10, например,
[02:25:22.140 --> 02:25:24.140]  100, или 1000,
[02:25:24.140 --> 02:25:26.140]  или даже 100000,
[02:25:26.140 --> 02:25:28.140]  то неожиданно выясняется, что
[02:25:28.140 --> 02:25:30.140]  надо что-то специальное
[02:25:30.140 --> 02:25:32.140]  кодить на эту тему.
[02:25:34.140 --> 02:25:36.140]  Вот. Но дальше...
[02:25:36.140 --> 02:25:38.140]  Ну вот. Ну как же мы будем
[02:25:38.140 --> 02:25:40.140]  хранить... Как же вообще такие длинные числа
[02:25:40.140 --> 02:25:42.140]  можно теоретически было бы хранить?
[02:25:42.140 --> 02:25:44.140]  Ну, например, вот.
[02:25:44.140 --> 02:25:46.140]  Как удобно работать
[02:25:46.140 --> 02:25:48.140]  с числом вида 9, 8, 5,
[02:25:48.140 --> 02:25:50.140]  4, 2, там, 0, 1, 5,
[02:25:50.140 --> 02:25:52.140]  2, 3, 6, 9, 2, 2, 5,
[02:25:52.140 --> 02:25:54.140]  2, 2, 2, 2, 2,
[02:25:54.140 --> 02:25:56.140]  2, 2, 2, 1, 5,
[02:25:56.140 --> 02:25:58.140]  9, 7, 3, 2,
[02:25:58.140 --> 02:26:00.140]  8, 0, 8,
[02:26:00.140 --> 02:26:02.140]  1, 0, 0, 1, 3,
[02:26:02.140 --> 02:26:04.140]  2.
[02:26:04.140 --> 02:26:06.140]  И вот тут еще 3.
[02:26:06.140 --> 02:26:08.140]  Вот.
[02:26:10.140 --> 02:26:12.140]  Вот.
[02:26:12.140 --> 02:26:14.140]  Ну не важно.
[02:26:14.140 --> 02:26:16.140]  Вот просто дано такое число.
[02:26:16.140 --> 02:26:18.140]  Как с подобного рода числами работать?
[02:26:18.140 --> 02:26:20.140]  Ну, конечно, самое тупое
[02:26:20.140 --> 02:26:22.140]  можно было хранить эти стильы в обстрочках.
[02:26:22.140 --> 02:26:24.140]  Но это не самое удобное,
[02:26:24.140 --> 02:26:26.140]  что можно сделать.
[02:26:26.140 --> 02:26:28.140]  Ну, самое удобное, первое,
[02:26:28.140 --> 02:26:30.140]  обычно, что приходит в голову,
[02:26:30.140 --> 02:26:32.140]  это, конечно, завести вектор
[02:26:32.140 --> 02:26:34.140]  и хранить там
[02:26:34.140 --> 02:26:36.140]  просто, скажем, по циферке
[02:26:36.140 --> 02:26:38.140]  в ячеечке.
[02:26:38.140 --> 02:26:40.140]  Например, 2, 3,
[02:26:40.140 --> 02:26:42.140]  1, допустим, там
[02:26:42.140 --> 02:26:44.140]  0, 0,
[02:26:44.140 --> 02:26:46.140]  там, соответственно, 1, 8,
[02:26:46.140 --> 02:26:48.140]  там, 0,
[02:26:48.140 --> 02:26:50.140]  0, 2,
[02:26:50.140 --> 02:26:52.140]  3, 7,
[02:26:52.140 --> 02:26:54.140]  9, 5,
[02:26:54.140 --> 02:26:56.140]  ну и так далее.
[02:26:56.140 --> 02:26:58.140]  Ну и так далее.
[02:26:58.140 --> 02:27:00.140]  Чем вообще такое
[02:27:00.140 --> 02:27:02.140]  удобно?
[02:27:02.140 --> 02:27:04.140]  Ну, на самом деле, если вам вот тут
[02:27:04.140 --> 02:27:06.140]  возникает вопрос, что с этими числами нужно делать?
[02:27:06.140 --> 02:27:08.140]  Самое первое, что приходит в голову,
[02:27:08.140 --> 02:27:10.140]  то есть обычно это сложение,
[02:27:10.140 --> 02:27:12.140]  вычитание, ну и какие-нибудь там сравнения.
[02:27:12.140 --> 02:27:14.140]  Вот.
[02:27:14.140 --> 02:27:16.140]  Ну, заметим, что
[02:27:16.140 --> 02:27:18.140]  если у нас есть, допустим,
[02:27:18.140 --> 02:27:20.140]  два числа такого вида, вот второе мы
[02:27:20.140 --> 02:27:22.140]  сразу напишем в таком виде.
[02:27:22.140 --> 02:27:24.140]  4, 8, 2, 6,
[02:27:24.140 --> 02:27:26.140]  0 там, ну от балды я сейчас что-нибудь напишу.
[02:27:26.140 --> 02:27:28.140]  7, 7,
[02:27:28.140 --> 02:27:30.140]  7, 8, 0,
[02:27:30.140 --> 02:27:32.140]  2, 4, 3, 6.
[02:27:34.140 --> 02:27:36.140]  Так, ну да, разряды даже
[02:27:36.140 --> 02:27:38.140]  почти совпали.
[02:27:38.140 --> 02:27:40.140]  Вот.
[02:27:40.140 --> 02:27:42.140]  Ну почти. Ну вот.
[02:27:42.140 --> 02:27:44.140]  Тогда мы обнаружим, что сравнивать эти числа достаточно
[02:27:44.140 --> 02:27:46.140]  легко. Как сравнивать эти числа?
[02:27:46.140 --> 02:27:48.140]  Ну, во-первых, сравнить по количеству
[02:27:48.140 --> 02:27:50.140]  разрядов, если они различаются, то значит,
[02:27:50.140 --> 02:27:52.140]  у кого меньше разряд, тут и меньше, правда?
[02:27:52.140 --> 02:27:54.140]  Вот.
[02:27:54.140 --> 02:27:56.140]  У кого тут меньше разрядов?
[02:28:00.140 --> 02:28:02.140]  Да, это оптический обман,
[02:28:02.140 --> 02:28:04.140]  у них количество разрядов по 14.
[02:28:06.140 --> 02:28:08.140]  Вот.
[02:28:08.140 --> 02:28:10.140]  Да, просто
[02:28:10.140 --> 02:28:12.140]  видите, так вот.
[02:28:12.140 --> 02:28:14.140]  А, ну да. А, тут мы еще не
[02:28:14.140 --> 02:28:16.140]  дописали. Ладно, второе точно меньше. Хорошо.
[02:28:16.140 --> 02:28:18.140]  Но если бы у нас число ограничивалось
[02:28:18.140 --> 02:28:20.140]  вот этим по 14,
[02:28:20.140 --> 02:28:22.140]  то тогда пришлось бы сравнивать
[02:28:22.140 --> 02:28:24.140]  честно за линию. Каким образом?
[02:28:24.140 --> 02:28:26.140]  Ну мы бы сравнили самый старший разряд, если они не совпадают,
[02:28:26.140 --> 02:28:28.140]  вот как у нас, то
[02:28:28.140 --> 02:28:30.140]  ну собственно, у кого меньше этот разряд,
[02:28:30.140 --> 02:28:32.140]  то число и меньше. Если
[02:28:32.140 --> 02:28:34.140]  эти равны, то равны и эти, и эти,
[02:28:34.140 --> 02:28:36.140]  и так далее.
[02:28:36.140 --> 02:28:38.140]  Вот.
[02:28:38.140 --> 02:28:40.140]  То есть сравнивать достаточно легко.
[02:28:40.140 --> 02:28:42.140]  А как же эти
[02:28:42.140 --> 02:28:44.140]  числа, если мы хотим эти числа
[02:28:44.140 --> 02:28:46.140]  складывать? Ну,
[02:28:46.140 --> 02:28:48.140]  и здесь мы поверим, что продвинутый поток, наверное,
[02:28:48.140 --> 02:28:50.140]  сможет достаточно легко реализовать сложение
[02:28:50.140 --> 02:28:52.140]  столбиком, правда?
[02:28:52.140 --> 02:28:54.140]  Тем более, ну алгоритм изучался
[02:28:54.140 --> 02:28:56.140]  во втором классе.
[02:28:56.140 --> 02:28:58.140]  Да ладно.
[02:29:02.140 --> 02:29:04.140]  Так, ну значит, давайте покажу,
[02:29:04.140 --> 02:29:06.140]  как сложить эти числа столбиком.
[02:29:08.140 --> 02:29:10.140]  Да, это быстро, смотрите.
[02:29:10.140 --> 02:29:12.140]  То есть складывать столбиком
[02:29:12.140 --> 02:29:14.140]  так, складываем разряд, 2 плюс 4,
[02:29:14.140 --> 02:29:16.140]  6, 3 плюс 8, 11.
[02:29:16.140 --> 02:29:18.140]  Так, раз 11, значит
[02:29:18.140 --> 02:29:20.140]  1 пишем, 1 в уме.
[02:29:20.140 --> 02:29:22.140]  Так, 1 плюс 2, и еще
[02:29:22.140 --> 02:29:24.140]  1 в уме, получается 4.
[02:29:24.140 --> 02:29:26.140]  Вот.
[02:29:26.140 --> 02:29:28.140]  Значит, тут
[02:29:28.140 --> 02:29:30.140]  получается 6, 0,
[02:29:30.140 --> 02:29:32.140]  8, о, 15, 1 в уме,
[02:29:32.140 --> 02:29:34.140]  значит, тут, соответственно, 8,
[02:29:34.140 --> 02:29:36.140]  8, ну и так далее, короче.
[02:29:38.140 --> 02:29:40.140]  С точки зрения кода, на самом деле
[02:29:40.140 --> 02:29:42.140]  теоретически, да,
[02:29:42.140 --> 02:29:44.140]  можно сразу, конечно, этот перенос хранить,
[02:29:44.140 --> 02:29:46.140]  а можно поскладывать так, можно в эти
[02:29:46.140 --> 02:29:48.140]  ячейки положить прям 6, 11,
[02:29:48.140 --> 02:29:50.140]  3, там 6, вот прям
[02:29:50.140 --> 02:29:52.140]  почленно сложить, 8,
[02:29:52.140 --> 02:29:54.140]  15, там я не знаю, 7, 8,
[02:29:54.140 --> 02:29:56.140]  там какой-нибудь 0.
[02:29:56.140 --> 02:29:58.140]  А почему не может быть
[02:29:58.140 --> 02:30:00.140]  10 в уме?
[02:30:00.140 --> 02:30:02.140]  Почему не может быть 10 в уме?
[02:30:02.140 --> 02:30:04.140]  Так, сейчас 7, 8,
[02:30:04.140 --> 02:30:06.140]  тут на самом деле будет 2, 5,
[02:30:06.140 --> 02:30:08.140]  потому что вот так вот, значит
[02:30:08.140 --> 02:30:10.140]  11, 12, 11.
[02:30:10.140 --> 02:30:12.140]  Вот.
[02:30:12.140 --> 02:30:14.140]  Но когда вы складываете, у вас
[02:30:14.140 --> 02:30:16.140]  в каждое время бывает не больше чем 9,
[02:30:16.140 --> 02:30:18.140]  плюс не более чем 9, плюс не более чем 1,
[02:30:18.140 --> 02:30:20.140]  прям по индукции, поэтому в сумме будет не более
[02:30:20.140 --> 02:30:22.140]  чем 19 и в переносе не более чем 1.
[02:30:22.140 --> 02:30:24.140]  Вот.
[02:30:24.140 --> 02:30:26.140]  И поэтому сработает это теперь так.
[02:30:26.140 --> 02:30:28.140]  То есть вы теперь пробежитесь по этому массиву
[02:30:28.140 --> 02:30:30.140]  и каждый раз, когда видите что-то больше
[02:30:30.140 --> 02:30:32.140]  либо равное 10 значит то, что делится
[02:30:32.140 --> 02:30:34.140]  на десять, перекидываете сюда.
[02:30:34.140 --> 02:30:36.140]  То есть получается 6, тут получается 1,
[02:30:36.140 --> 02:30:38.140]  тут получается 4,
[02:30:38.140 --> 02:30:40.140]  6, 0 там 8.
[02:30:40.140 --> 02:30:42.140]  Тут, значит, получается 5, тут получается 8,
[02:30:42.140 --> 02:30:44.140]  тут получается 8, 2, 5.
[02:30:44.140 --> 02:30:46.140]  11 – это значит 1, тут
[02:30:46.140 --> 02:30:48.140]  уже 13. Тут получается 3,
[02:30:48.140 --> 02:30:50.140]  перекидываем 1, тут получается 12,
[02:30:50.140 --> 02:30:52.140]  то есть 2 и 1.
[02:30:52.140 --> 02:30:54.140]  Вот.
[02:30:54.140 --> 02:30:56.140]  Это, если вкратце.
[02:30:56.140 --> 02:30:58.020]  Вот.
[02:30:58.020 --> 02:31:02.520]  Ну, аналогичным образом уже рассмотреться самостоятельно, можно попробовать сделать и вычитание.
[02:31:02.520 --> 02:31:06.220]  Разница только в том, что там в некоторых местах будут возникать отрицательные числа,
[02:31:06.220 --> 02:31:10.120]  поэтому вам придется где-то прибавлять 10 и вычитать единицу дальше.
[02:31:11.400 --> 02:31:15.480]  Ну, прежде чем двигаться, ну, хочется обратить внимание еще на следующий чит,
[02:31:15.480 --> 02:31:23.000]  что с целью несимпатического ускорения обычно замечают, что вот можно хранить эти числа не в десятичной системе счисления.
[02:31:24.000 --> 02:31:32.880]  А в системе счисления с основанием, вот я его называю, осен, равно, например, 10 тысяч.
[02:31:36.880 --> 02:31:39.440]  Ну, самое простое, пока 10 тысяч.
[02:31:39.440 --> 02:31:42.880]  Нет, можно и в двоичечной, конечно, хранить, но это...
[02:31:42.880 --> 02:31:45.340]  Но просто так, то так не попереводишь.
[02:31:45.340 --> 02:31:46.840]  То есть... А, ну давайте вот.
[02:31:46.840 --> 02:31:48.440]  Тогда просто в чем преимущество?
[02:31:48.440 --> 02:31:55.180]  Ну, преимущество в том, что в каждой ячейке типа int вы можете хранить теперь не одну цифру, а сразу по четыре.
[02:31:55.180 --> 02:31:58.680]  То есть, вот, например, тут будет 132, ну, там с ведущим нулем.
[02:31:58.680 --> 02:32:00.680]  Дальше у нас там будет что?
[02:32:00.680 --> 02:32:03.680]  Там 810 тоже с ведущим нулем.
[02:32:04.680 --> 02:32:06.680]  Ну вот, что у нас там дальше?
[02:32:06.680 --> 02:32:09.680]  Потом у нас 7320 будет идти.
[02:32:09.680 --> 02:32:15.680]  А это там, соответственно, 2159, потом там вот эти вот четыре двойки.
[02:32:15.920 --> 02:32:18.920]  Потом там 5 и еще три двойки.
[02:32:18.920 --> 02:32:21.920]  Ну и так далее я не буду уже дописывать.
[02:32:21.920 --> 02:32:25.920]  То есть, преимущество в том, что можно делать абсолютно то же самое,
[02:32:25.920 --> 02:32:28.920]  только там переносить не десятку, а 10 тысяч.
[02:32:29.920 --> 02:32:34.920]  То есть, асимпатически ничего не поменяет, не асимпатически выгода очевидна,
[02:32:34.920 --> 02:32:37.920]  потому что работает в четыре раза быстрее.
[02:32:37.920 --> 02:32:40.920]  Ну, начнутся там мелкие технические проблемы на тему того,
[02:32:41.160 --> 02:32:44.160]  когда вы захотите это число напечатать на экране.
[02:32:45.160 --> 02:32:48.160]  Потому что, как бы, в каждой ячейке, кроме самой первой,
[02:32:48.160 --> 02:32:50.160]  вам нужно напечатать ровно четыре цифры,
[02:32:50.160 --> 02:32:52.160]  то есть там с ведущими нулями в случае чего.
[02:32:52.160 --> 02:32:54.160]  Но это мелкая техническая проблема.
[02:32:55.160 --> 02:32:59.160]  Вот, ну там сложение, вычитание, сравнение делаются идентично.
[02:32:59.160 --> 02:33:02.160]  Причем более того, по идее, можно это сделать шабло,
[02:33:02.160 --> 02:33:04.160]  шаблонным параметром даже вот эту степень.
[02:33:04.160 --> 02:33:08.160]  Потому что можно делать так, а пока мы складываем и хотим складывать в интах,
[02:33:08.400 --> 02:33:11.400]  то можно вообще развлекаться и делать 10-9.
[02:33:14.400 --> 02:33:15.400]  Вот.
[02:33:16.400 --> 02:33:19.400]  Представляете когда-нибудь длинную арифметику с основанием миллиард?
[02:33:21.400 --> 02:33:24.400]  А ведь на самом деле в инты умещается прекрасно, очень рекомендую.
[02:33:25.400 --> 02:33:27.400]  Ну вот, ну там, ну пока, ну вот.
[02:33:27.400 --> 02:33:31.400]  Не, ну как, 10-6, с точки зрения умножения уже все равно плохо.
[02:33:31.400 --> 02:33:33.400]  А так, с точки зрения сложения можно уже и 10-9.
[02:33:34.400 --> 02:33:37.400]  А если мы вспоминаем, что у нас 64-битные машины,
[02:33:37.640 --> 02:33:40.640]  скорее всего, лонг-лонг-инт работают одинаково,
[02:33:44.640 --> 02:33:46.640]  то вот это тоже прекрасно будет работать.
[02:33:48.640 --> 02:33:49.640]  Да.
[02:33:50.640 --> 02:33:51.640]  Да.
[02:33:52.640 --> 02:33:59.640]  А при выводе на экран, когда вы видите число меньше 1000,
[02:33:59.640 --> 02:34:01.640]  например, то вам как минимум 1.0 тут придется вывести.
[02:34:02.640 --> 02:34:04.640]  Ну это просто мелкое техническое замечание.
[02:34:04.880 --> 02:34:05.880]  Вот.
[02:34:06.880 --> 02:34:09.880]  То есть пока вы складываете, вы читаете, все в порядке.
[02:34:10.880 --> 02:34:11.880]  Что еще можно делать?
[02:34:12.880 --> 02:34:15.880]  А, ну вот, штука, которая нам вот эту 10-18-ую радость
[02:34:16.880 --> 02:34:18.880]  немножко, значит, поумерит в пыл.
[02:34:19.880 --> 02:34:23.880]  Если от вас захотят эти числа умножать на короткое.
[02:34:24.880 --> 02:34:27.880]  То есть на короткое это на какое-то x, x меньше осна.
[02:34:28.120 --> 02:34:35.120]  Ну нет, то есть умножение, технология умножения на осн
[02:34:36.120 --> 02:34:38.120]  понятно, что, ну, то есть можно сказать так, делаем
[02:34:39.120 --> 02:34:41.120]  абсолютно то же самое, то есть подчленно умножаем,
[02:34:42.120 --> 02:34:44.120]  а потом проходимся слева направо и делаем перенос.
[02:34:45.120 --> 02:34:48.120]  Проблема только будет заключаться в том, что произведение
[02:34:49.120 --> 02:34:52.120]  осн на осн будет приводить к числу порядка осн в квадрате
[02:34:53.120 --> 02:34:54.120]  в лучшем случае, правда?
[02:34:55.120 --> 02:34:56.120]  Вот.
[02:34:56.360 --> 02:34:59.360]  И тогда получается, что, как бы, если числа до 10-18-ой,
[02:35:00.360 --> 02:35:01.360]  то у вас будут проблемы.
[02:35:02.360 --> 02:35:04.360]  То есть надо как минимум 10-9-ой тогда.
[02:35:05.360 --> 02:35:06.360]  Как максимум?
[02:35:07.360 --> 02:35:08.360]  Ну вот.
[02:35:09.360 --> 02:35:10.360]  Но на самом деле, если вы хотите, чтобы все вычтения
[02:35:11.360 --> 02:35:13.360]  вылезали в int, вот когда-то была привычка, что делаете
[02:35:14.360 --> 02:35:15.360]  желательно без лангов, потому что там в int все быстрее,
[02:35:16.360 --> 02:35:20.360]  то тогда, поэтому это и приводит к тому, что традиционный
[02:35:21.360 --> 02:35:23.360]  осн это все-таки 10-4-ый.
[02:35:26.360 --> 02:35:27.360]  Вот.
[02:35:28.360 --> 02:35:30.360]  То есть тогда получается вот умножение на короткое,
[02:35:31.360 --> 02:35:34.360]  а еще можно делить на короткое.
[02:35:35.360 --> 02:35:37.360]  Ну и делить на короткое тут уже никаких переполнений.
[02:35:38.360 --> 02:35:40.360]  Нет, оно потребует каких-то переполнений, потому что
[02:35:41.360 --> 02:35:43.360]  у вас там будете идти справа-налево, у вас будет
[02:35:44.360 --> 02:35:45.360]  остаток, который вы будете умножать на осн,
[02:35:46.360 --> 02:35:47.360]  прибавлять следующее число и делить.
[02:35:48.360 --> 02:35:51.360]  Ну там тоже деление столбиком следует.
[02:35:53.360 --> 02:35:54.360]  Вот.
[02:35:54.600 --> 02:35:55.600]  Да, достаточно простые операции.
[02:35:56.600 --> 02:35:57.600]  В общем-то, ничего умного они не требуют.
[02:35:58.600 --> 02:35:59.600]  Правда?
[02:36:00.600 --> 02:36:01.600]  А деление что нужно делать?
[02:36:02.600 --> 02:36:03.600]  Ну делить на короткое.
[02:36:04.600 --> 02:36:06.600]  Ну делить соответственно тоже столбиком.
[02:36:13.600 --> 02:36:14.600]  Что?
[02:36:16.600 --> 02:36:17.600]  Ну второй класс, ребят.
[02:36:18.600 --> 02:36:19.600]  Ну что такое?
[02:36:22.600 --> 02:36:23.600]  И что теперь?
[02:36:24.600 --> 02:36:25.600]  Можно чекать?
[02:36:26.600 --> 02:36:27.600]  Для блоков можно быстро.
[02:36:28.600 --> 02:36:29.600]  Ну да.
[02:36:30.600 --> 02:36:31.600]  Ну вот.
[02:36:32.600 --> 02:36:34.600]  Ну ладно, я могу показать, как делить длинное на короткое,
[02:36:35.600 --> 02:36:36.600]  конечно.
[02:36:37.600 --> 02:36:42.600]  Ну вот давайте, например, поделим 9, 8, 7, 2, 4, 6, 3.
[02:36:43.600 --> 02:36:45.600]  Давайте поделим на короткое число 7.
[02:36:47.600 --> 02:36:48.600]  Значит делается это так.
[02:36:49.600 --> 02:36:51.600]  Так, 9, 9 поделить на 7.
[02:36:52.600 --> 02:36:53.600]  Пишем 1.
[02:36:53.840 --> 02:36:56.840]  Значит тут типа вычитаем 7, тут в остатке 2, т.е. модуль.
[02:36:57.840 --> 02:37:00.840]  Сносим 8, 28 поделить на 7, 4.
[02:37:01.840 --> 02:37:02.840]  Получается 0.
[02:37:03.840 --> 02:37:04.840]  Но это будет не настолько эффективно, вы сейчас по одной цифре идем.
[02:37:05.840 --> 02:37:06.840]  Ну да.
[02:37:07.840 --> 02:37:10.840]  Вы хотите примера, когда тут 3 цифры будут?
[02:37:11.840 --> 02:37:12.840]  Давайте, пожалуйста.
[02:37:13.840 --> 02:37:15.840]  Значит, ну по одной цифре это будет работать за линию.
[02:37:16.840 --> 02:37:19.840]  Если вы хотите побыстрее, то значит ладно, запасайтесь калькуляторами.
[02:37:20.840 --> 02:37:21.840]  Значит поехали.
[02:37:22.080 --> 02:37:25.080]  7, 4, 9, 0, 0, 8, 6, 5.
[02:37:26.080 --> 02:37:30.080]  Вы хотите поделить на, ну для простоты там, я не знаю, 123.
[02:37:33.080 --> 02:37:35.080]  А можно на 1 для простоты, пожалуйста?
[02:37:36.080 --> 02:37:37.080]  Нет.
[02:37:38.080 --> 02:37:39.080]  У нас заказали, что блоки будут по 3.
[02:37:40.080 --> 02:37:41.080]  А на 0?
[02:37:42.080 --> 02:37:44.080]  Или вот даже, вот я давайте еще вот так 6 напишу.
[02:37:45.080 --> 02:37:46.080]  Это как бы тоже блок.
[02:37:47.080 --> 02:37:48.080]  Ну а теперь 6 делим на 123.
[02:37:49.080 --> 02:37:50.080]  Получается 0, тут получается 0, остается 6.
[02:37:50.320 --> 02:37:51.320]  Приносим следующий блок.
[02:37:52.320 --> 02:37:53.320]  274.
[02:37:54.320 --> 02:37:57.320]  Так, сколько будет 6274 поделить на 123?
[02:38:05.320 --> 02:38:06.320]  Чего?
[02:38:07.320 --> 02:38:11.320]  Ну да, но не за пределы основания в квадрате.
[02:38:12.320 --> 02:38:15.320]  Потому что у вас тут число меньше, чем 8 строго остаток.
[02:38:15.560 --> 02:38:16.560]  Потому что.
[02:38:17.560 --> 02:38:20.560]  Поэтому то, что результат должен уложиться вот в эти циты.
[02:38:21.560 --> 02:38:22.560]  Сколько?
[02:38:23.560 --> 02:38:24.560]  Остаток 1, а частные 51.
[02:38:25.560 --> 02:38:27.560]  Так, значит тут 51.
[02:38:28.560 --> 02:38:29.560]  Остаток прям попали, да?
[02:38:30.560 --> 02:38:31.560]  Ну хорошо.
[02:38:32.560 --> 02:38:33.560]  Отлично, 1.
[02:38:34.560 --> 02:38:35.560]  Так, 1900 теперь поделить на 123.
[02:38:36.560 --> 02:38:37.560]  Сколько будет?
[02:38:38.560 --> 02:38:39.560]  7, 8.
[02:38:40.560 --> 02:38:41.560]  15?
[02:38:42.560 --> 02:38:44.560]  Ну пожалуйста, 0, 15.
[02:38:45.560 --> 02:38:47.560]  Так, остаток какой?
[02:38:52.560 --> 02:38:53.560]  55.
[02:38:54.560 --> 02:38:55.560]  55?
[02:38:56.560 --> 02:38:57.560]  А, или это от балды там сказано, да?
[02:38:58.560 --> 02:38:59.560]  Так, и вот-вот уже побольше чисто.
[02:39:00.560 --> 02:39:02.560]  Так, 55865 теперь поделить.
[02:39:09.560 --> 02:39:10.560]  454.
[02:39:11.560 --> 02:39:12.560]  Чего?
[02:39:13.560 --> 02:39:14.560]  454.
[02:39:15.560 --> 02:39:16.560]  А остаток какой?
[02:39:17.560 --> 02:39:18.560]  23.
[02:39:19.560 --> 02:39:21.560]  А, я уже боялся, что сейчас 0 будет.
[02:39:24.560 --> 02:39:25.560]  Во.
[02:39:26.560 --> 02:39:29.560]  Так, ну теперь вот можно, да, теперь уже можно на том же калькуляторе проверить,
[02:39:30.560 --> 02:39:32.560]  что вот это на это плюс вот это равно вот этого.
[02:39:35.560 --> 02:39:36.560]  Вот.
[02:39:39.560 --> 02:39:42.560]  На самом деле вот механизм выглядит именно таким образом.
[02:39:42.800 --> 02:39:45.800]  Как мы понимаем, что нужно всегда выделять по три цифры?
[02:39:46.800 --> 02:39:49.800]  Ну потому что мы сказали, что осен равно тыша.
[02:39:52.800 --> 02:39:55.800]  То есть мы просто заранее себе прописали, что у нас блоки по три цифры.
[02:39:56.800 --> 02:39:58.800]  Были бы по четыре цифры, ну как бы мы бы...
[02:39:59.800 --> 02:40:00.800]  И тут число бы мы считали как по четыре.
[02:40:01.800 --> 02:40:02.800]  А в ответе по три цифры как бы?
[02:40:03.800 --> 02:40:05.800]  Ну так всегда и определяем, что их вот по три цифры.
[02:40:06.800 --> 02:40:08.800]  Их всегда по три цифры.
[02:40:09.800 --> 02:40:10.800]  Тут тоже как бы три цифры, просто тут вот.
[02:40:11.040 --> 02:40:12.040]  Три нуля.
[02:40:17.040 --> 02:40:19.040]  Нет, ну я могу, конечно, писать формальное доказательство,
[02:40:20.040 --> 02:40:21.040]  конечно, от того, что это работает.
[02:40:22.040 --> 02:40:23.040]  Нет.
[02:40:26.040 --> 02:40:27.040]  Ну да.
[02:40:28.040 --> 02:40:29.040]  Ну как-то да.
[02:40:30.040 --> 02:40:31.040]  Ну просто я не знаю, просто как-то вот.
[02:40:32.040 --> 02:40:34.040]  У вас это все должно было быть во втором классе.
[02:40:37.040 --> 02:40:38.040]  Так вот.
[02:40:41.040 --> 02:40:44.040]  Ну вот, я тоже в общем-то сейчас не хотел этим заниматься.
[02:40:45.040 --> 02:40:47.040]  Ну так, я просто к тому, что действительно это достаточно просто,
[02:40:48.040 --> 02:40:50.040]  чтобы я это достаточно просто закодить.
[02:40:51.040 --> 02:40:53.040]  В общем, делаться это все будет за линию.
[02:40:54.040 --> 02:40:55.040]  Вот.
[02:40:56.040 --> 02:40:58.040]  Но проблемы начинаются, когда мы хотим умножать,
[02:40:59.040 --> 02:41:01.040]  скажем, длинное на длинное.
[02:41:02.040 --> 02:41:05.040]  То есть вот представьте, у нас есть два числа длины 100 тысяч.
[02:41:06.040 --> 02:41:08.040]  И мы хотим друг на друга домножить.
[02:41:08.280 --> 02:41:10.280]  Перемножаем это в короткие.
[02:41:11.280 --> 02:41:13.280]  Перемножаем длинное на короткое и сдвигаем.
[02:41:14.280 --> 02:41:15.280]  Нет, ну можно длинное на короткое,
[02:41:16.280 --> 02:41:17.280]  а можно просто на самом деле в тупую.
[02:41:18.280 --> 02:41:20.280]  То есть смотрите, если у вас число, давайте допустим,
[02:41:21.280 --> 02:41:22.280]  осн равно 10 для простоты.
[02:41:23.280 --> 02:41:24.280]  Сейчас увидите, почему, кстати, имеет смысл именно 10.
[02:41:25.280 --> 02:41:27.280]  То допустим, у вас есть массив A,
[02:41:28.280 --> 02:41:30.280]  там 0, 1, 2 и тарталия n-1.
[02:41:31.280 --> 02:41:35.280]  И массив B от длины, ну например, тоже n-1 для простоты.
[02:41:35.520 --> 02:41:38.520]  И тогда, значит, перемножение могло бы выглядеть так.
[02:41:39.520 --> 02:41:41.520]  То есть мульт от AB.
[02:41:42.520 --> 02:41:44.520]  Значит, мы говорим c,
[02:41:45.520 --> 02:41:47.520]  значит, точка assign,
[02:41:48.520 --> 02:41:50.520]  допустим, 2 умножить на n и 0.
[02:41:51.520 --> 02:41:55.520]  Дальше говорим, что for i равно от 0 до n-1,
[02:41:56.520 --> 02:41:58.520]  for j равно от 0 до n-1,
[02:42:00.520 --> 02:42:02.520]  c i plus jt
[02:42:02.760 --> 02:42:04.760]  c i plus jt
[02:42:05.760 --> 02:42:07.760]  plus равно a i t
[02:42:08.760 --> 02:42:09.760]  умножить на b jt.
[02:42:10.760 --> 02:42:11.760]  Логично, да?
[02:42:12.760 --> 02:42:14.760]  И дальше мы бы сказали что-нибудь в духе,
[02:42:15.760 --> 02:42:18.760]  что for i равно от 0 до 2n-2.
[02:42:20.760 --> 02:42:22.760]  Значит, мы говорим, что c i plus 1
[02:42:23.760 --> 02:42:25.760]  plus равно c i t
[02:42:26.760 --> 02:42:27.760]  делить на 10 в нашем случае,
[02:42:28.760 --> 02:42:29.760]  и c i t
[02:42:30.000 --> 02:42:31.000]  там.
[02:42:32.000 --> 02:42:35.000]  Давайте только не на 10, а давайте все-таки на 8, конечно.
[02:42:36.000 --> 02:42:38.000]  И c i t процент равно 8.
[02:42:40.000 --> 02:42:44.000]  Вот так могло выглядеть самое тупое умножение за квадрат.
[02:42:48.000 --> 02:42:52.000]  Ну, здесь сразу оно обдороживает там технические моменты.
[02:42:53.000 --> 02:42:57.000]  Насколько большие числа в процессе этой c-шки могли возникнуть?
[02:42:57.240 --> 02:42:58.240]  8 в квадрате.
[02:42:59.240 --> 02:43:00.240]  Нет, больше.
[02:43:01.240 --> 02:43:02.240]  n в 8 в квадрате, да.
[02:43:03.240 --> 02:43:04.240]  Вот.
[02:43:05.240 --> 02:43:06.240]  Но на самом деле так.
[02:43:07.240 --> 02:43:09.240]  Порядок получается n на 8 в квадрате.
[02:43:10.240 --> 02:43:11.240]  Это надо внимательно смотреть.
[02:43:12.240 --> 02:43:14.240]  То есть получается n как минимум надо выбирать так,
[02:43:15.240 --> 02:43:17.240]  чтобы n на 8 в квадрате случайно не вылез за лонг-лонг.
[02:43:20.240 --> 02:43:21.240]  Ну, на самом деле, да.
[02:43:22.240 --> 02:43:24.240]  Кто-то мог бы справедливо заметить, что если тут произошло переполнение,
[02:43:24.480 --> 02:43:27.480]  так давайте мы тут сразу его там перетенем в следующую
[02:43:28.480 --> 02:43:30.480]  и тогда у нас с переполнением и будет сильно лучше,
[02:43:31.480 --> 02:43:33.480]  потому что там будет там, потому что этих переполнений будет меньше.
[02:43:34.480 --> 02:43:35.480]  Ну, там можно уже на эту тему рассуждать.
[02:43:36.480 --> 02:43:37.480]  Это 2 в квадрате.
[02:43:38.480 --> 02:43:39.480]  Да, но...
[02:43:40.480 --> 02:43:41.480]  Чего? Почему 2 в квадрате?
[02:43:42.480 --> 02:43:43.480]  Ну, потому что это переполняется.
[02:43:44.480 --> 02:43:47.480]  Ну, это переполняется, но тогда, когда вы делаете перенос,
[02:43:48.480 --> 02:43:50.480]  у вас там перенос уже получается...
[02:43:50.720 --> 02:43:53.720]  То есть каждый перенос не более чем на 8,
[02:43:54.720 --> 02:43:56.720]  то есть получается там в каждой ячейке получается там
[02:43:57.720 --> 02:44:00.720]  ну, что-то типа n на 8 или 2n на 8, что-то в этом роде.
[02:44:01.720 --> 02:44:02.720]  Ну, по сравнению с 8 в квадрате это...
[02:44:03.720 --> 02:44:04.720]  Вот.
[02:44:05.720 --> 02:44:07.720]  Но на самом деле мы даже не будем в это копать по одной простой причине.
[02:44:08.720 --> 02:44:10.720]  Потому что у этой задачи есть брат,
[02:44:11.720 --> 02:44:13.720]  в котором эта проблема не исчезает.
[02:44:14.720 --> 02:44:15.720]  Брат называется...
[02:44:16.720 --> 02:44:19.720]  А давайте перемножать не длинные числа, а многочлены.
[02:44:20.720 --> 02:44:22.720]  То есть давайте себе представим...
[02:44:23.720 --> 02:44:24.720]  То есть давайте...
[02:44:25.720 --> 02:44:26.720]  То есть альтернативная версия могла быть,
[02:44:27.720 --> 02:44:28.720]  что у нас есть вот такой многочлен Аt,
[02:44:29.720 --> 02:44:31.720]  вот A0, A1t, плюс и так далее,
[02:44:32.720 --> 02:44:34.720]  плюс An-1t в степени n-1,
[02:44:35.720 --> 02:44:36.720]  и есть второй многочлен.
[02:44:41.720 --> 02:44:44.720]  Вот Bn-1 на t в степени n-1.
[02:44:44.960 --> 02:44:45.960]  Вот.
[02:44:46.960 --> 02:44:48.960]  И я хочу найти произведение этих многочленов.
[02:44:49.960 --> 02:44:50.960]  Ну, видим многочлена.
[02:44:51.960 --> 02:44:54.960]  Тогда заметим, что код выглядел бы абсолютно так же,
[02:44:55.960 --> 02:44:56.960]  только вот просто...
[02:44:57.960 --> 02:44:58.960]  Только здесь бы мы остановились.
[02:44:59.960 --> 02:45:01.960]  То есть чем отличается с перемножением многочленов?
[02:45:02.960 --> 02:45:03.960]  Это перемножение длинных чисел.
[02:45:04.960 --> 02:45:05.960]  Никаких потом вот этих вот переносов не надо.
[02:45:06.960 --> 02:45:07.960]  Правда?
[02:45:08.960 --> 02:45:09.960]  И по большому счету, да,
[02:45:10.960 --> 02:45:13.960]  мы на самом деле не будем в этом копать по одной простой причине.
[02:45:14.960 --> 02:45:16.960]  На самом деле, может быть, будем решать на самом деле задачу
[02:45:17.960 --> 02:45:19.960]  именно перемножение многочленов в основном по вот этой вот причине.
[02:45:21.960 --> 02:45:23.960]  Потому что по факту перемножение длинных чисел
[02:45:24.960 --> 02:45:25.960]  будет заключаться в вида
[02:45:26.960 --> 02:45:27.960]  превратите числа в многочлены,
[02:45:28.960 --> 02:45:29.960]  перемножьте многочлены этой вашей фурьятины,
[02:45:30.960 --> 02:45:31.960]  ну или чем вы там будете,
[02:45:32.960 --> 02:45:33.960]  а мы там чем-то еще будем.
[02:45:34.960 --> 02:45:35.960]  Вот.
[02:45:36.960 --> 02:45:37.960]  Соответственно, и потом после этого в результатах,
[02:45:38.960 --> 02:45:39.960]  соответственно, то есть вы там получили вот эту вот штуку,
[02:45:40.960 --> 02:45:41.960]  и после этого тогда мы делаем переносы и радуемся.
[02:45:42.200 --> 02:45:43.200]  Вот.
[02:45:44.200 --> 02:45:45.200]  Понятно, да?
[02:45:46.200 --> 02:45:48.200]  То есть как бы задачи по идее братья.
[02:45:51.200 --> 02:45:53.200]  Но очень бы хотелось, конечно,
[02:45:54.200 --> 02:45:55.200]  чтобы эта задача как-то решалась,
[02:45:56.200 --> 02:45:58.200]  вот чтобы перемножение многочленов
[02:45:59.200 --> 02:46:00.200]  решалось не за n квадрат,
[02:46:02.200 --> 02:46:03.200]  а как-то побыстрее.
[02:46:05.200 --> 02:46:07.200]  Вот хотя бы перемножение многочленов.
[02:46:10.200 --> 02:46:11.200]  Как же это сделать?
[02:46:12.200 --> 02:46:13.200]  Корацуба.
[02:46:15.200 --> 02:46:16.200]  Да, Корацуба.
[02:46:17.200 --> 02:46:18.200]  Мистическая фамилия,
[02:46:19.200 --> 02:46:20.200]  относящая нас в какую-то пыльную аудиторию,
[02:46:21.200 --> 02:46:22.200]  ну ладно, не очень пыльную аудиторию
[02:46:23.200 --> 02:46:24.200]  мехматой МГУ в 60-е годы.
[02:46:25.200 --> 02:46:26.200]  Да, но я понимаю,
[02:46:27.200 --> 02:46:28.200]  что я сейчас рассказываю уже Дите Баян,
[02:46:29.200 --> 02:46:30.200]  но тем не менее.
[02:46:31.200 --> 02:46:32.200]  Но история действительно очень красивая,
[02:46:33.200 --> 02:46:34.200]  представьте, в 60-е годы,
[02:46:35.200 --> 02:46:36.200]  значит, на своем научном семинаре,
[02:46:37.200 --> 02:46:38.200]  то есть это уже научный семинар,
[02:46:39.200 --> 02:46:40.200]  то есть не в смысле мы там это,
[02:46:40.440 --> 02:46:41.440]  то есть как бы научный семинар,
[02:46:42.440 --> 02:46:43.440]  то есть о реальных вот научных проблемах,
[02:46:44.440 --> 02:46:45.440]  вот такой вот ремонт академик Калмогоров
[02:46:46.440 --> 02:46:47.440]  рассуждает.
[02:46:48.440 --> 02:46:49.440]  Вот ситуация, смотрите какая.
[02:46:50.440 --> 02:46:51.440]  Есть у нас вот такая веселая задача
[02:46:52.440 --> 02:46:53.440]  как перемножение, допустим,
[02:46:54.440 --> 02:46:55.440]  длинных чисел.
[02:46:56.440 --> 02:46:57.440]  Как ее делать за квадрат,
[02:46:58.440 --> 02:46:59.440]  знали там едва ли не древние вавилоняне.
[02:47:00.440 --> 02:47:01.440]  Ну там, в общем, несколько тысяч лет
[02:47:02.440 --> 02:47:03.440]  уже человечество прекрасно знает,
[02:47:04.440 --> 02:47:05.440]  как это делать за квадрат.
[02:47:06.440 --> 02:47:07.440]  А вот быстрее за столько же тысяч лет человечество
[02:47:08.440 --> 02:47:09.440]  как-то пока так и не придумало.
[02:47:10.440 --> 02:47:11.440]  И скорее всего, это означает,
[02:47:12.440 --> 02:47:13.440]  что это в принципе невозможно,
[02:47:14.440 --> 02:47:15.440]  поэтому надо искать действительно
[02:47:16.440 --> 02:47:18.440]  пути, как доказать, что это невозможно.
[02:47:19.440 --> 02:47:20.440]  И, собственно, продвигать математику,
[02:47:21.440 --> 02:47:22.440]  то есть узнавая, где у нас тут какие ограничения,
[02:47:23.440 --> 02:47:24.440]  тем самым вот это интересно.
[02:47:25.440 --> 02:47:27.440]  Ну буквально, едва ли не в конце семинара,
[02:47:28.440 --> 02:47:29.440]  к нему подходит,
[02:47:30.440 --> 02:47:31.440]  вот никогда, сколько лет рассказываю,
[02:47:32.440 --> 02:47:33.440]  никогда не помню, то ли студент старших курсов,
[02:47:34.440 --> 02:47:35.440]  то ли аспирант младших,
[02:47:36.440 --> 02:47:37.440]  и буквально в три строчки
[02:47:38.440 --> 02:47:39.440]  объясняет Калмогорову, что он неправ.
[02:47:40.440 --> 02:47:42.440]  Что же это были за три строчки?
[02:47:43.440 --> 02:47:45.440]  Я нашел число,
[02:47:46.440 --> 02:47:47.440]  которое разорвется на независимом пространстве
[02:47:48.440 --> 02:47:49.440]  в номере Атлантического Безболиста.
[02:47:50.440 --> 02:47:54.440]  СМЕХ
[02:47:55.440 --> 02:47:56.440]  УСМЕХАЕТСЯ
[02:47:57.440 --> 02:47:58.440]  УСМЕХАЕТСЯ
[02:47:59.440 --> 02:48:00.440]  УСМЕХАЕТСЯ
[02:48:01.440 --> 02:48:02.440]  Ничего себе.
[02:48:03.440 --> 02:48:04.440]  УСМЕХАЕТСЯ
[02:48:05.440 --> 02:48:06.440]  УСМЕХАЕТСЯ
[02:48:07.440 --> 02:48:08.440]  Я возьму два простых числа,
[02:48:08.440 --> 02:48:20.440]  Вот, ну да, потом меня выгнали с контрольной второго класса, правда, ну да.
[02:48:20.440 --> 02:48:26.440]  Так вот, нет, две строчки были такие, значит три строчки примерно такие.
[02:48:26.440 --> 02:48:29.440]  Ну ладно, то есть они там более быстро, мы их рассмотрим чуть более медленно,
[02:48:29.440 --> 02:48:31.440]  у нас чуть более строчек получится.
[02:48:31.440 --> 02:48:34.440]  Ну во-первых, когда мы, допустим, мы перемножаем два многочленна,
[02:48:34.440 --> 02:48:39.440]  пока для, без особого ограничения общности, мы будем предполагать,
[02:48:39.440 --> 02:48:49.440]  что все эти многочлены имеют размер n, где n равно степени двойки.
[02:48:49.440 --> 02:48:53.440]  Да, кстати, я сразу подчеркну терминологический момент.
[02:48:53.440 --> 02:48:58.440]  Я различаю понятие размер многочлена и степень многочлена.
[02:48:58.440 --> 02:49:04.440]  То есть я говорю, что у меня многочлен размера n, если у меня у него есть n коэффициентов.
[02:49:04.440 --> 02:49:08.440]  Степень, то есть обратите, степень этого многочлена, она не превосходит n-1,
[02:49:08.440 --> 02:49:12.440]  а может и меньше, если вот тут нули.
[02:49:12.440 --> 02:49:18.440]  Вот, но мы будем с вами говорить, что...
[02:49:18.440 --> 02:49:22.440]  Да, не знаю, привычнее что ли.
[02:49:22.440 --> 02:49:27.440]  Честно говоря, я не знаю, почему мне привычнее это писать, ну вот.
[02:49:27.440 --> 02:49:34.440]  Нет, знаете, хотя я знаю, почему.
[02:49:34.440 --> 02:49:39.440]  Дело в том, что, как многие из вас знают, на самом деле у нас тут вскоре вылезут комплексные числа,
[02:49:39.440 --> 02:49:43.440]  а в комплексных числах как-то называть переменную x бывает не очень,
[02:49:43.440 --> 02:49:46.440]  потому что можно ее перепутать с x координаты.
[02:49:46.440 --> 02:49:50.440]  Поэтому там обычно многочлены от t начинаются.
[02:49:50.440 --> 02:49:54.440]  Ну или там можно было многочлены от z, конечно, писать.
[02:49:54.440 --> 02:50:04.440]  Так вот, давайте без ограничений обществе считать, что у нас размером многочлена ровно степень 2, причем 1 этаж.
[02:50:04.440 --> 02:50:07.440]  Так вот, как мы будем умножать?
[02:50:07.440 --> 02:50:10.440]  Умножать будем так.
[02:50:10.440 --> 02:50:15.440]  Мы скажем, что A разобьем многочлен на 2 многочлена.
[02:50:15.440 --> 02:50:23.440]  Мы скажем, что A от t это многочлен A0 от t плюс t в степени n пополам на A1 от t.
[02:50:23.440 --> 02:50:30.440]  Где A0 от t и A1 от t это многочлены размера n пополам.
[02:50:34.440 --> 02:50:36.440]  Вот, как это может выглядеть?
[02:50:36.440 --> 02:50:43.440]  Ну, например, A0 от t это все то же самое только до n пополама.
[02:50:43.440 --> 02:50:48.440]  Вот.
[02:50:48.440 --> 02:50:53.440]  И A1 это то же самое только начиная с A n пополам.
[02:50:53.440 --> 02:51:06.440]  То есть очень приятно здесь вот такая примерно штука приятная.
[02:51:06.440 --> 02:51:10.440]  Это было A от t, а теперь будет B от t.
[02:51:10.440 --> 02:51:21.440]  B от t тоже мы аналогичным образом скажем, что это B0 от t плюс t в степени n пополам на B1 от t.
[02:51:21.440 --> 02:51:23.440]  Вот такая красота.
[02:51:23.440 --> 02:51:25.440]  Что сейчас будет?
[02:51:25.440 --> 02:51:33.440]  Теперь мы попробуем свести задачу перемножения A на B, но я не буду тут от t писать для краткости,
[02:51:33.440 --> 02:51:42.440]  к рекурсивным запускам перемножения многочленов на размера n пополам.
[02:51:42.440 --> 02:51:47.440]  То есть, смотрите, A умножить на B это что такое?
[02:51:47.440 --> 02:51:58.440]  Это A0 плюс A1 на t в степени n пополам, все это надо умножить на B0 плюс B1 на t в степени n пополам.
[02:51:59.440 --> 02:52:03.440]  Это равно. Чему это равно?
[02:52:03.440 --> 02:52:06.440]  Ну это равно на самом деле.
[02:52:06.440 --> 02:52:09.440]  Если пораскрывать скобки, я сразу напишу.
[02:52:09.440 --> 02:52:21.440]  A0 B0 плюс t в степени n пополам на A0 B1 плюс A1 B0 плюс t в степени n на A1 на B1.
[02:52:22.440 --> 02:52:26.440]  Все делается элементарно.
[02:52:26.440 --> 02:52:38.440]  То есть мы делаем 4 рекурсивных вызова, получаем какие-то произведения и после этого за o от n исхлопываем.
[02:52:42.440 --> 02:52:44.440]  За какое симптомико это работает?
[02:52:45.440 --> 02:52:53.440]  Получается, t от n равно 4t от n пополам, плюс o от n.
[02:52:53.440 --> 02:53:01.440]  Я даже раскрывать эту 8 точку не буду, у нас есть мастер теорема, который говорит нам о том, что t от n равно чему?
[02:53:01.440 --> 02:53:13.440]  N в степени логарифом по основанию 2 от 4.
[02:53:13.440 --> 02:53:15.440]  Молодец, красоба.
[02:53:24.440 --> 02:53:26.440]  Это n квадрат.
[02:53:31.440 --> 02:53:42.440]  А теперь, говорит этот студент, заметим, что вот эта вот штука,
[02:53:42.440 --> 02:53:46.440]  каждую из этих двух штук нам вычислять не надо, нам надо только сумму.
[02:53:46.440 --> 02:53:52.440]  И эта сумма оказывается равна следующей штуке.
[02:53:52.440 --> 02:53:55.440]  A0 плюс A1 на B0 плюс B1.
[02:53:56.440 --> 02:53:58.440]  Вот.
[02:54:03.440 --> 02:54:09.440]  Да, только надо, ну по модулю там что-то надо вычесть, но то, что надо вычесть, на самом деле вычислять уже не надо.
[02:54:09.440 --> 02:54:14.440]  Потому что вычесть надо в точности A0 B0 и A1 B1.
[02:54:16.440 --> 02:54:18.440]  Красота.
[02:54:18.440 --> 02:54:30.440]  Но тогда получается, то есть по факту получается, да, у нас конечно увеличивается константа, но вот этот вот от n остается от n.
[02:54:30.440 --> 02:54:37.440]  А количество произведений вместо 4 становится 3.
[02:54:37.440 --> 02:54:43.440]  И здесь логарифом уже не 4, а 3.
[02:54:43.440 --> 02:54:48.440]  Ну, в рекурренте.
[02:54:48.440 --> 02:54:54.440]  Да, то есть мы сказали, что эту штуку, оказывается, можно вычислить вот по такой формуле.
[02:54:54.440 --> 02:55:00.440]  Заметим, что вместо того, чтобы вычислять каждое из этих произведений, надо вычислить вот это произведение, ну и вот эти вот 2.
[02:55:00.440 --> 02:55:02.440]  И, собственно, после этого эта штука вычисляется.
[02:55:02.440 --> 02:55:04.440]  А, у нас 3 произведений.
[02:55:04.440 --> 02:55:07.440]  Ну да.
[02:55:07.440 --> 02:55:10.440]  Ну вот, так что вот такая получается магия.
[02:55:10.440 --> 02:55:17.440]  То есть получается в 3 строчки. Мы говорим, что получается, что умножать многочлены быстрее, чем за n квадрат.
[02:55:17.440 --> 02:55:20.440]  Вот вам, пожалуйста.
[02:55:20.440 --> 02:55:24.440]  А почему там написано дальше, что это от n квадрата?
[02:55:24.440 --> 02:55:28.440]  А, да.
[02:55:28.440 --> 02:55:33.440]  Да, правильно написать, что теперь это приблизительно θ от n в степени 1.58.
[02:55:33.440 --> 02:55:37.440]  Бла-бла-бла.
[02:55:37.440 --> 02:55:40.440]  Вот. Да. Соответственно, да.
[02:55:40.440 --> 02:55:45.440]  Ну вот, как всегда, я люблю иногда задавать такой человекашний вопрос, если лекция не связана с этим.
[02:55:45.440 --> 02:55:50.440]  Как звали этого студента?
[02:55:50.440 --> 02:55:53.440]  Да, студента звали Анатолий Александрович Корацуба.
[02:55:53.440 --> 02:55:56.440]  Да, совершенно верно.
[02:55:56.440 --> 02:56:04.440]  Вот. Ну то есть, да, там дальше уже легенда гласит, что там Колобогоров просто это трижды поменялся в лице и побежал это публиковать.
[02:56:04.440 --> 02:56:14.440]  Не-не-не, конечно, от имени Корацубы, но просто там дальше легенда как-то использует какие-то административные лазейки, чтобы это публиковать как можно быстрее.
[02:56:14.440 --> 02:56:24.440]  То есть там просто едва ли бы уже принятую к печати статью, там как будто быстро что-то допилили, как будто второй не связанный с ней раздел, в котором было вот на страничку описано вот это.
[02:56:24.440 --> 02:56:27.440]  Ну вот, получился это просто вот, ну потому что действительно прорыв.
[02:56:27.440 --> 02:56:34.440]  Как на том сценаре сказано, то с три тысячи лет никто не мог заметить что.
[02:56:34.440 --> 02:56:38.440]  То есть вот это называется на тему того, что все, что можно просто придумать, уже придумали до вас.
[02:56:38.440 --> 02:56:42.440]  Вот пример того, что это может оказаться не так, просто никто...
[02:56:42.440 --> 02:56:50.440]  Ну понятно, то есть как бы все в математике открывается отчасти по принципу, да, ну там во многом, конечно, из того, что вы там знаете много старых идей,
[02:56:50.440 --> 02:56:56.440]  но обнаружили, что на что-то вот просто под правилем углом никто не посмотрел, а вы посмотрели.
[02:56:56.440 --> 02:56:58.440]  Вот.
[02:56:58.440 --> 02:57:00.440]  Ну вот.
[02:57:00.440 --> 02:57:04.440]  Так что побежали публиковать и вот оказывается.
[02:57:04.440 --> 02:57:10.440]  Но сразу какой вопрос в науке тут, конечно, возникает.
[02:57:10.440 --> 02:57:14.440]  А нельзя ли бы, да, то есть нельзя ли побыстрее?
[02:57:14.440 --> 02:57:16.440]  И первая даже идея.
[02:57:16.440 --> 02:57:19.440]  Вот вы тут поделили на два.
[02:57:19.440 --> 02:57:25.440]  А не получится ли быстрее, если поделить на три, например?
[02:57:29.440 --> 02:57:34.440]  Вот давайте можем даже, вот знаете, я вам даже там по, называется, сколько-то минут дам, вот попробуйте.
[02:57:34.440 --> 02:57:40.440]  Как думаете, если поделить наращение на две части, а на три, можно ли пошаманить так, чтобы получилась более быстрая симптомика?
[02:57:50.440 --> 02:57:51.440]  Вот.
[02:57:51.440 --> 02:57:55.440]  Ну я тут даже пока, даже напишу, что нам примерно надо вычислить.
[02:57:57.440 --> 02:57:59.440]  На Е-части?
[02:57:59.440 --> 02:58:01.440]  А?
[02:58:01.440 --> 02:58:03.440]  Нет.
[02:58:09.440 --> 02:58:11.440]  На Е?
[02:58:11.440 --> 02:58:13.440]  Почему на Е?
[02:58:13.440 --> 02:58:17.440]  Может, ну Е с точностью до константа это все равно?
[02:58:17.440 --> 02:58:19.440]  Да.
[02:58:19.440 --> 02:58:21.440]  Ну вот, давайте вот посмотрим.
[02:58:21.440 --> 02:58:30.440]  Если А равно, допустим, A0 плюс там A1 на Т в степени N на 3, плюс A2 на Т в степени 2N на 3, да?
[02:58:30.440 --> 02:58:33.440]  Ну это я пока пишу, вы уже там, вы пока думайте.
[02:58:33.440 --> 02:58:35.440]  Так.
[02:58:35.440 --> 02:58:39.440]  N на 3 плюс B2 на Т в степени 2N на 3.
[02:58:39.440 --> 02:58:41.440]  И, соответственно, пишем.
[02:58:41.440 --> 02:59:01.440]  АВ равно, ну тут можно сразу написать, A0B0 плюс, значит, A0B1 плюс A1B0 на Т в степени N поделить на 3, плюс A0B2 плюс A1B1 плюс A2B0.
[02:59:01.440 --> 02:59:03.440]  А, это еще не все.
[02:59:03.440 --> 02:59:05.440]  А нет, это все.
[02:59:05.440 --> 02:59:09.440]  На Т в степени 2N на 3, плюс там, что там еще?
[02:59:09.440 --> 02:59:20.440]  А1B2 плюс A2B1 на Т в степени N, ну и плюс там A2B2 на Т в степени 4N на 3.
[02:59:25.440 --> 02:59:34.440]  Ну вот, спрашивается, к скольким рекурсивным произведениям многочленов размера N поделить на 3 это можно свести?
[02:59:40.440 --> 02:59:43.440]  Ну, видимо, не меньше, чем 5.
[02:59:43.440 --> 02:59:48.440]  Ну да уж, как-то меньше, чем 5, действительно, сомнительно.
[02:59:53.440 --> 02:59:56.440]  Так, ну давайте, 7 каким образом?
[02:59:59.440 --> 03:00:01.440]  О, 6 можно, ух ты.
[03:00:10.440 --> 03:00:12.440]  Так.
[03:00:14.440 --> 03:00:16.440]  6 остальных это каких?
[03:00:22.440 --> 03:00:24.440]  Ну давайте так вот.
[03:00:25.440 --> 03:00:27.440]  За 5? Ух ты.
[03:00:27.440 --> 03:00:29.440]  Ну каким образом?
[03:00:29.440 --> 03:00:31.440]  Так, ну давайте, ладно, давайте 6.
[03:00:31.440 --> 03:00:33.440]  Так, давайте так вот.
[03:00:33.440 --> 03:00:35.440]  Так, давайте, там кто-то заклассал, значит, за 6.
[03:00:35.440 --> 03:00:37.440]  Вот так, начнем вот с этого.
[03:00:37.440 --> 03:00:41.440]  А, за 7, ну давайте, хожу, вот это вычислили, дальше.
[03:00:47.440 --> 03:00:49.440]  Так, дальше, еще.
[03:00:52.440 --> 03:00:56.440]  Так, A0B2, A1B2.
[03:01:00.440 --> 03:01:02.440]  A0B1.
[03:01:02.440 --> 03:01:04.440]  Этого хватает?
[03:01:05.440 --> 03:01:08.440]  Ну у нас вот верхнее вот это общее тоже есть, так.
[03:01:08.440 --> 03:01:11.440]  Так, вы утверждаете, что этого хватает?
[03:01:13.440 --> 03:01:14.440]  А почему этого?
[03:01:14.440 --> 03:01:21.440]  А, ну потому что, а, если мы из этого вычтем вот это, это и это, то получится A0B1 на B0B1, да?
[03:01:21.440 --> 03:01:25.440]  А из него мы вычитаем это и это, получаем вот это.
[03:01:25.440 --> 03:01:29.440]  Так, вот это мы получаем, а вот это мы получаем откуда?
[03:01:34.440 --> 03:01:36.440]  Я считаю.
[03:01:38.440 --> 03:01:41.440]  Что мне продиктовали, то я сказал, я написал.
[03:01:45.440 --> 03:01:48.440]  Всего в тупую произведение 9.
[03:01:54.440 --> 03:01:57.440]  А, то есть считаем, считаем все кроме средних, да?
[03:01:57.440 --> 03:02:00.440]  Да, без средних мы считаем все кроме средних.
[03:02:05.440 --> 03:02:13.440]  Вообще я хотел A0B1 на B0B1, A0B2 на B0B2, A0B2 на B1B2.
[03:02:20.440 --> 03:02:22.440]  А верхнее не нужно помешивать?
[03:02:27.440 --> 03:02:29.440]  Ну там по-разному, да.
[03:02:29.440 --> 03:02:31.440]  Ну давайте я вот так уже напишу.
[03:02:31.440 --> 03:02:35.440]  А нет, тут A0A1 на B0B1, так.
[03:02:41.440 --> 03:02:43.440]  И что там еще хотелось?
[03:02:43.440 --> 03:02:49.440]  A0B0A1B1A2B2, вот.
[03:02:49.440 --> 03:02:51.440]  Утверждаете, что этого хватает?
[03:02:58.440 --> 03:03:01.440]  Еще A0B2 плюс A0B2?
[03:03:01.440 --> 03:03:03.440]  Ну тогда типа просто сразу вверх.
[03:03:03.440 --> 03:03:05.440]  Ну можно и так, да.
[03:03:05.440 --> 03:03:07.440]  Мы на каждую столбку написали.
[03:03:07.440 --> 03:03:09.440]  Ну пожалуйста, пожалуйста.
[03:03:09.440 --> 03:03:12.440]  Ну можно и так, можно и это, видите, тут суть одна.
[03:03:12.440 --> 03:03:14.440]  Да, ну хорошо.
[03:03:14.440 --> 03:03:16.440]  Да, то есть...
[03:03:16.440 --> 03:03:17.440]  Ой, ой, ой.
[03:03:17.440 --> 03:03:18.440]  А, ну...
[03:03:18.440 --> 03:03:20.440]  В смысле, A0A2 на B0B2.
[03:03:20.440 --> 03:03:22.440]  А, то есть прямо вот...
[03:03:22.440 --> 03:03:24.440]  Ну блин, у нас две уже такие столбки есть.
[03:03:24.440 --> 03:03:25.440]  Так.
[03:03:25.440 --> 03:03:27.440]  Ну давай, давай без блин только, пожалуйста.
[03:03:27.440 --> 03:03:29.440]  Так, а тогда...
[03:03:29.440 --> 03:03:31.440]  Окей.
[03:03:31.440 --> 03:03:32.440]  Так.
[03:03:32.440 --> 03:03:33.440]  Ну действительно, да.
[03:03:33.440 --> 03:03:37.440]  Заметим, что из этой суммы вот этих штук мы получаем как минимум вот это.
[03:03:37.440 --> 03:03:40.440]  Так, вот это мы получаем из этой штуки вот этих.
[03:03:40.440 --> 03:03:45.440]  Вот из этой штуки каких-то вот этих мы получаем с одной стороны вот это плюс вот это.
[03:03:45.440 --> 03:03:47.440]  И еще добавляем вот это, оно тоже есть.
[03:03:47.440 --> 03:03:49.440]  Да, ну вроде справились.
[03:03:49.440 --> 03:03:55.440]  Ну это асимпатически получается n в степени log3,6.
[03:03:55.440 --> 03:03:57.440]  А теперь мы добавляем plus, log3,6.
[03:03:57.440 --> 03:03:59.440]  Больше.
[03:03:59.440 --> 03:04:01.440]  Ну вот больше, откуда вы знаете?
[03:04:01.440 --> 03:04:03.440]  Вы уже в калькуляторе проверили?
[03:04:03.440 --> 03:04:06.440]  Нет, я так просто слету просто я не знаю почему.
[03:04:06.440 --> 03:04:08.440]  То есть нет, я знаю, что как бы да, это меньше.
[03:04:08.440 --> 03:04:11.440]  То есть это больше, да, это я знаю.
[03:04:11.440 --> 03:04:15.440]  А, хотя нет, это легко.
[03:04:15.440 --> 03:04:17.440]  Так, хотя тут вот...
[03:04:17.440 --> 03:04:21.440]  То есть log3,6 мы сравниваем с log2,3, да.
[03:04:21.440 --> 03:04:23.440]  1 плюс log3,6.
[03:04:23.440 --> 03:04:25.440]  Ну да, то есть это да.
[03:04:25.440 --> 03:04:27.440]  1 плюс log3,2.
[03:04:27.440 --> 03:04:30.440]  И тут, а тут получается 1 плюс...
[03:04:30.440 --> 03:04:32.440]  Просто log3,6.
[03:04:32.440 --> 03:04:34.440]  Чего?
[03:04:34.440 --> 03:04:35.440]  Просто log2,4.
[03:04:35.440 --> 03:04:37.440]  Так, log2,3.
[03:04:37.440 --> 03:04:39.440]  И что?
[03:04:39.440 --> 03:04:41.440]  Вычтем.
[03:04:45.440 --> 03:04:49.440]  1 плюс 1 делить на log2,3 против log2,3.
[03:04:49.440 --> 03:04:51.440]  И кто больше?
[03:04:58.440 --> 03:05:00.440]  Не, ну как сказать?
[03:05:00.440 --> 03:05:02.440]  Тут вы...
[03:05:02.440 --> 03:05:04.440]  Ну ладно, лучше на калькуляторе посчитайте
[03:05:04.440 --> 03:05:06.440]  и убедитесь, что это больше.
[03:05:06.440 --> 03:05:08.440]  Поэтому если мы хотим здесь
[03:05:08.440 --> 03:05:10.440]  выжать максимум, то как-то надо
[03:05:10.440 --> 03:05:12.440]  как-то обойтись 5 произведениями.
[03:05:12.440 --> 03:05:14.440]  А?
[03:05:14.440 --> 03:05:16.440]  А при четверке там что будет?
[03:05:16.440 --> 03:05:18.440]  Ну давайте сходим в стройка, разберемся
[03:05:18.440 --> 03:05:20.440]  для начала.
[03:05:20.440 --> 03:05:22.440]  Ну мы уже жили в стройке.
[03:05:22.440 --> 03:05:24.440]  Нет, у нас получилось 6 и мы обнаружили,
[03:05:24.440 --> 03:05:26.440]  что это хуже.
[03:05:26.440 --> 03:05:28.440]  Поэтому есть мечта, а может быть пятерка?
[03:05:28.440 --> 03:05:30.440]  Пятерка, я там сразу скажу, будет лучше.
[03:05:32.440 --> 03:05:34.440]  Она есть?
[03:05:34.440 --> 03:05:36.440]  А вот вопрос.
[03:05:38.440 --> 03:05:40.440]  Ну нет, я могу за 5 минут
[03:05:40.440 --> 03:05:42.440]  потребовать доказать, что нет.
[03:05:44.440 --> 03:05:46.440]  Поэтому, да, на самом деле утверждение есть.
[03:05:48.440 --> 03:05:50.440]  Даже вот интересно, хочется попробовать.
[03:05:52.440 --> 03:05:54.440]  Получится.
[03:06:08.440 --> 03:06:10.440]  Спасибо.
[03:06:10.440 --> 03:06:12.440]  Спасибо.
[03:06:12.440 --> 03:06:14.440]  Спасибо.
[03:06:14.440 --> 03:06:16.440]  На компьютере можно перебывать.
[03:06:16.440 --> 03:06:18.440]  Спасибо, что мы выбирали 5.
[03:06:18.440 --> 03:06:20.440]  Да.
[03:06:20.440 --> 03:06:22.440]  Зависит, сколько-то по 5.
[03:06:24.440 --> 03:06:26.440]  О, блин.
[03:06:38.440 --> 03:06:40.440]  О, блин.
[03:07:08.440 --> 03:07:10.440]  Ну внимательно надо
[03:07:10.440 --> 03:07:12.440]  слушать было.
[03:07:12.440 --> 03:07:14.440]  Пытаемся придумать,
[03:07:14.440 --> 03:07:16.440]  как здесь делать не 6 произведений,
[03:07:16.440 --> 03:07:18.440]  а 5.
[03:07:18.440 --> 03:07:20.440]  Ну,
[03:07:20.440 --> 03:07:22.440]  ну,
[03:07:22.440 --> 03:07:24.440]  ну,
[03:07:24.440 --> 03:07:26.440]  ну,
[03:07:26.440 --> 03:07:28.440]  ну,
[03:07:28.440 --> 03:07:30.440]  ну,
[03:07:30.440 --> 03:07:32.440]  ну,
[03:07:32.440 --> 03:07:34.440]  ну,
[03:07:34.440 --> 03:07:36.440]  ну,
[03:07:36.440 --> 03:07:38.440]  ну,
[03:07:38.440 --> 03:07:40.440]  ну,
[03:07:40.440 --> 03:07:42.440]  ну,
[03:07:42.440 --> 03:07:44.440]  ну,
[03:07:44.440 --> 03:07:46.440]  ну,
[03:07:46.440 --> 03:07:48.440]  ну,
[03:07:48.440 --> 03:07:50.440]  ну,
[03:07:50.440 --> 03:07:52.440]  ну,
[03:07:52.440 --> 03:07:54.440]  ну,
[03:07:54.440 --> 03:07:56.440]  ну,
[03:07:56.440 --> 03:07:58.440]  ну,
[03:07:58.440 --> 03:08:00.440]  ну,
[03:08:00.440 --> 03:08:02.440]  ну,
[03:08:02.440 --> 03:08:04.440]  ну,
[03:08:04.440 --> 03:08:27.360]  так так это раз что еще оставить сейчас так вот эту сумму взяли так вот эту сумму вот
[03:08:27.360 --> 03:08:37.920]  эту и вот эти я правильно понял а то есть вообще 4 так а 2 б 2
[03:08:37.920 --> 03:08:54.040]  так и так сейчас ну вычекиваем да но тут
[03:08:54.040 --> 03:09:09.440]  то есть как бы мы мы как бы вычеркнули вот это и добавили вот это то есть мы
[03:09:09.440 --> 03:09:15.040]  утверждаем что как минимум вот скажем что каждый из них мы каким-то образом видимо восстановим
[03:09:24.040 --> 03:09:43.880]  но это шестое мы же на 5 ставим ну нет ну есть подозрение что нам как-то все-таки 5 значений
[03:09:43.880 --> 03:10:11.960]  надо найти так сейчас еще часки да ну то что хотим
[03:10:13.880 --> 03:10:27.360]  я ну как сказать вот человек что идем пока не придумала как доказать шушу вот быстрее
[03:10:27.360 --> 03:10:41.480]  там нельзя нет можно там доказать что быстрее чем меньше чем за 5 нельзя потому что там доказать
[03:10:41.480 --> 03:10:47.040]  что они там какие там линейно независимые там там все дела вот это все то есть мы хотим там то
[03:10:47.040 --> 03:10:51.480]  есть доказать что мы хотим вон тут тоже послагаем и какого-то такого вида поэтому доказывает что
[03:10:51.480 --> 03:10:55.280]  мы там можем из них получить только линейное пространство не линейно независимый блаблабла
[03:10:55.280 --> 03:11:00.000]  мы все то есть там в этом поэтому меньше пяти да но как бы сделать за 5
[03:11:00.000 --> 03:11:21.760]  но да не такая тривиальная задача но это называется да
[03:11:21.760 --> 03:11:38.000]  но кто-то кто-то нашел я не знаю честно я честно то же свое время нашел то есть
[03:11:38.000 --> 03:11:42.040]  знаете это делается очень просто вы приходите на чайную церемонию там ритуал чайного молчания
[03:11:42.040 --> 03:11:46.880]  там была трейсер прихожу а там ритуал чайного молчания значит ну то есть вам просто наливают
[03:11:46.880 --> 03:11:50.560]  чай но там сообщает что это за чай но как бы вы должны молчать ну подразумевается что вы там
[03:11:50.560 --> 03:11:55.080]  в течение часа полутора должны там погрузиться в себя действительно размышлять о своих проблемах
[03:11:55.080 --> 03:11:59.800]  там каких-то вот там что-то решать задачи но конкретно в тот момент у меня никаких проблем не было
[03:11:59.800 --> 03:12:08.880]  не но там нет там чи были разные там пуэру лун там еще какие-то умные слова там в которых я
[03:12:08.880 --> 03:12:18.440]  честно говоря к сожалению не разбираюсь вот нет нет это было не в чайном ките это в локусе было
[03:12:18.440 --> 03:12:27.760]  но не важно вот а чайный кит кстати по моему как минимум переезжает но неважно вот так вот ну
[03:12:27.760 --> 03:12:31.480]  вот но соответственно но поэтому думали но вот поэтому действительно собственно чем заниматься
[03:12:31.480 --> 03:12:35.440]  тра ну соответственно вот возникает думать а как же тут действительно сделать из трех слагаемых
[03:12:35.440 --> 03:12:42.840]  побыстрее но вот но в результате в результате попив попив чаю действительно в хорошей тихой
[03:12:42.840 --> 03:12:48.880]  компании можно придумать следующее смотрите значит я предлагаю след на самом деле ну вот
[03:12:48.880 --> 03:13:02.600]  то есть слагаемый можно сделать такие а 0 на b значит а 0 плюс а 1 плюс а 2 до b 0 плюс
[03:13:02.600 --> 03:13:20.080]  b 1 плюс b 2 сейчас будет вообще внезапность а 0 плюс 2 а 1 плюс 4 а 2 на то же самое так ну
[03:13:20.080 --> 03:13:33.280]  и сколько там нам 5 слагаемых надо да пожалуйста пишем тройбан вот плюс там 9 б 2 и что-то еще
[03:13:33.280 --> 03:13:54.040]  пишем ну что-то еще то же самое с четверчкой вот б 0 плюс 4 б 1 плюс 16 б 2 вот но на самом
[03:13:54.040 --> 03:13:59.440]  деле как вы уже заметили конечно что да то есть здесь на самом деле можно было написать тоже
[03:13:59.440 --> 03:14:05.360]  1 умножить на и там 1 в квадрате умножить да а тут можно было написать а 0 плюс 0 умножить на
[03:14:05.360 --> 03:14:14.240]  а 1 да плюс 0 умножить на 2 то есть как бы мы можем сказать так что мы представили а и
[03:14:14.240 --> 03:14:19.440]  б как догочлен третьей степени по сути да ну просто в идеале мы хотим подставлять
[03:14:19.440 --> 03:14:25.600]  т в степени на три но будем подставлять что-нибудь еще просто получается следующее просто заметим
[03:14:25.600 --> 03:14:34.080]  просто ну то есть на самом деле просто по факту если сказать что вот это вот допустим ну там
[03:14:34.080 --> 03:14:42.880]  рекурсивно как и быть заменим на какую-нибудь еще букву например там д0 вот это вот на д1 вот
[03:14:42.880 --> 03:14:52.920]  это вот там получается д2 вот это вот д3 и там соответственно вот это вот это д4 да то на самом
[03:14:52.920 --> 03:14:59.840]  деле мы можем получить что вот эти вот числа всякие там допустим а 0 плюс вот вы хотели x
[03:14:59.840 --> 03:15:10.200]  плюс x а 1 плюс x в квадрате а 2 на b 0 плюс x на b 1 плюс x 2 на b 2 то есть на самом деле это
[03:15:10.200 --> 03:15:21.840]  равно в точности то есть получается д 0 плюс д 1 на x плюс д 2 x квадрат плюс д 3 x в кубе плюс
[03:15:22.180 --> 03:15:32.960]  4 x 4 все то есть получился такой обнарочен и вы получили его значение в пяти точках то есть все
[03:15:32.960 --> 03:15:38.000]  что вам то есть все что вам остается ну там то есть получаете эти дешки то есть вам нужно найти
[03:15:38.000 --> 03:15:43.460]  по сути эти дешки и у вас есть какая-то матрица там матрица матрица вендермонда по сути умножен
[03:15:43.460 --> 03:15:50.540]  Потому что, наверное, D равна, соответственно, вот этим вот значениям.
[03:15:50.540 --> 03:15:52.160]  То есть я прям вот здесь и напишу.
[03:15:52.160 --> 03:15:53.160]  То есть так и напишем.
[03:15:53.160 --> 03:16:10.040]  1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 8, 16, 1, 3, 9, 27, 81, 1, 4, 16, не перепутать, 64, 256 на, соответственно,
[03:16:10.040 --> 03:16:17.240]  D0, D1, D2, D3, D4, равно вот этому вот.
[03:16:17.240 --> 03:16:22.280]  А вы этого мне посчитали?
[03:16:22.280 --> 03:16:25.880]  Нет, у меня бумажки-карадашки там были.
[03:16:25.880 --> 03:16:33.680]  Нет, я не помню, вот что у меня там K5 у меня и без этого выплыло, а потом стал думать дальше и как бы обобщилась вот так.
[03:16:34.680 --> 03:16:44.680]  Потому что, ну, заметим, да, вам придется, конечно, обратить эту матрицу, но это делается за константу, за константу вычислений заранее.
[03:16:44.680 --> 03:16:52.680]  Можете это в захард кодить потом, эту обратную к этой матрице, но как бы нали-нали вы, наверное, уже знаете, что обратное существует и единственное, да?
[03:16:52.680 --> 03:17:01.680]  Ну, я не знаю, вообще, нали-нали вы должны, что у такой матрицы определитель не нулевой и даже знать, чему он равен.
[03:17:01.680 --> 03:17:03.680]  Не, матрица нужна, это может быть.
[03:17:03.680 --> 03:17:07.680]  Ну, это же определитель.
[03:17:07.680 --> 03:17:09.680]  Какой безобразный.
[03:17:09.680 --> 03:17:23.680]  Ну вот, ну ладно, покажите, просто поверим, как простой факт, что матрица, скажем так, если я в каждой строчке напишу степени вот от нулевой до N-1 каких-то чисел, эти числа будут по парам различны, то определитель будет не нулевой.
[03:17:23.680 --> 03:17:28.680]  Если он будет равен, там переберем все пары чисел и там нужен определитель их разность.
[03:17:28.680 --> 03:17:31.680]  Ну, там типа более низкая минус более ранняя.
[03:17:31.680 --> 03:17:37.680]  Вот это можно, там это при желании в качестве упражнения можете там даже подоказывать.
[03:17:37.680 --> 03:17:41.680]  А можете погуглить, матрица Вандермонда.
[03:17:41.680 --> 03:17:47.680]  Вот давайте я напишу фамилию, вот Вандермонд одним словом.
[03:17:47.680 --> 03:17:52.680]  Не через дефис, не морд, там вот это все, да.
[03:17:52.680 --> 03:17:55.680]  Ну вот, а вот так.
[03:17:59.680 --> 03:18:04.680]  Ну, получается, теперь N-степени лог 3,5.
[03:18:13.680 --> 03:18:15.680]  Ну, 5 это константа.
[03:18:18.680 --> 03:18:23.680]  Ну, вам один раз в жизни нужно обратить эту матрицу.
[03:18:23.680 --> 03:18:25.680]  Константового размера.
[03:18:25.680 --> 03:18:27.680]  То есть, получается, теперь решение такое.
[03:18:27.680 --> 03:18:33.680]  Вы, значит, берете коэффициент, многочлены 0, 1, 2, 0 за линию находите.
[03:18:33.680 --> 03:18:43.680]  Рекурсивными запусками, вычисляете вот там, вычисляете вот эти вот значения, вот эти вот многочлены.
[03:18:43.680 --> 03:18:47.680]  Находите эти перемножения вон там рекурсивными запусками.
[03:18:47.680 --> 03:18:53.680]  А, потому что здесь еще вот B0 плюс 0 на B1 плюс 0 на B2.
[03:18:53.680 --> 03:18:56.680]  Находите их рекурсивными запусками.
[03:18:56.680 --> 03:18:58.680]  Пятью рекурсивными запусками.
[03:18:58.680 --> 03:19:03.680]  И потом по вот этим значениям среди многочленов вы их обнажаете на матрицу.
[03:19:03.680 --> 03:19:05.680]  Ну вот.
[03:19:05.680 --> 03:19:07.680]  Да, ну, константного размера.
[03:19:07.680 --> 03:19:09.680]  И получаете еще.
[03:19:09.680 --> 03:19:11.680]  Ну, точнее так, это уже значение.
[03:19:11.680 --> 03:19:13.680]  Я это уже число напоминаю, да?
[03:19:13.680 --> 03:19:17.680]  Нет, хотя нет, это не число.
[03:19:17.680 --> 03:19:19.680]  Это многочлены.
[03:19:19.680 --> 03:19:21.680]  То есть, у вас получается многочлены.
[03:19:21.680 --> 03:19:23.680]  То есть, у вас там получается многочлены.
[03:19:23.680 --> 03:19:26.680]  Вы их домножаете на матрицу, получаете пятерку многочленов.
[03:19:26.680 --> 03:19:30.680]  И из них потом, собственно, получаете и итоговый результат.
[03:19:30.680 --> 03:19:33.680]  За сколько мы умеем обращать матрицу?
[03:19:33.680 --> 03:19:35.680]  Да какая разница за констант?
[03:19:35.680 --> 03:19:39.680]  Матрица константного размера обращается за константу.
[03:19:41.680 --> 03:19:49.680]  А там нам надо будет делить на короткое число, да?
[03:19:49.680 --> 03:19:51.680]  Ну да, ну или там написать...
[03:19:51.680 --> 03:19:53.680]  Ну вы там напишите, можно написать какие-нибудь там рациональные числа.
[03:19:53.680 --> 03:19:55.680]  Это не проблема.
[03:19:55.680 --> 03:19:57.680]  Вот.
[03:19:57.680 --> 03:20:00.680]  Значит, так, кто-то из вас уже посчитал, наверное, на калькуляторе,
[03:20:00.680 --> 03:20:04.680]  что это получается, наверное, меньше, чем m в степени log2,3, да?
[03:20:04.680 --> 03:20:06.680]  Получается 1,46.
[03:20:06.680 --> 03:20:08.680]  Так, уже неплохо, да?
[03:20:08.680 --> 03:20:11.680]  Вот в корень уложились.
[03:20:11.680 --> 03:20:14.680]  Но на самом деле, можешь мыслить дальше.
[03:20:14.680 --> 03:20:22.680]  А если константа не 3, а 4, то заметим, что мы тоже тут можем развлечься.
[03:20:22.680 --> 03:20:25.680]  То есть значение пронтует и будет не 5, а уже 7.
[03:20:25.680 --> 03:20:28.680]  И матрица тут будет 7 на 7, да?
[03:20:28.680 --> 03:20:31.680]  Но это все еще константа.
[03:20:31.680 --> 03:20:33.680]  Мы ее все равно один раз вычисляем.
[03:20:33.680 --> 03:20:36.680]  Да, мы ее один раз вычисляем.
[03:20:36.680 --> 03:20:42.680]  И получается, теперь дальше получается, получается еще меньше.
[03:20:42.680 --> 03:20:45.680]  m в степени log4,7.
[03:20:47.680 --> 03:20:52.680]  И вообще получается в итоге, что у вас для любого k получается,
[03:20:52.680 --> 03:20:55.680]  ладно, не k, то есть если вы выберете константу там какую-нибудь,
[03:20:55.680 --> 03:20:59.680]  то есть будем делить на там допустим l частей,
[03:20:59.680 --> 03:21:03.680]  то у вас получится асимпточка m в степени log по основанию l,
[03:21:03.680 --> 03:21:05.680]  2l минус 1.
[03:21:09.680 --> 03:21:11.680]  Ну l это же константа, да?
[03:21:14.680 --> 03:21:16.680]  Так, куда у нас стремится?
[03:21:16.680 --> 03:21:20.680]  Вот, log по основанию l, 2l минус 1.
[03:21:22.680 --> 03:21:23.680]  К чему?
[03:21:24.680 --> 03:21:29.680]  Если это стремится к бесконечности, то это стремится куда?
[03:21:29.680 --> 03:21:30.680]  Правильно, к нулю.
[03:21:30.680 --> 03:21:37.680]  Ну просто потому, что это не превосходит, а хотя нет, неправ, к единице все-таки.
[03:21:37.680 --> 03:21:39.680]  Да, да, к единице.
[03:21:43.680 --> 03:21:47.680]  Ну потому что это, ну потому что log, если бы единицу это убрали сверх,
[03:21:47.680 --> 03:21:52.680]  log l, 2l это то же самое, что 1 плюс log по основанию l, 2, это точно стремится к нулю.
[03:21:52.680 --> 03:21:54.680]  Поэтому это стремится к единице.
[03:21:55.680 --> 03:21:59.680]  Вывод отсюда. В результате есть мистическая теория.
[03:22:00.680 --> 03:22:04.680]  Но как бы заметим, что у нас это не значит, что мы придумали алгоритм,
[03:22:04.680 --> 03:22:06.680]  который работает за O от N.
[03:22:06.680 --> 03:22:08.680]  Это означает следующий факт.
[03:22:09.680 --> 03:22:19.680]  Для любого epsilon больше нуля существует алгоритм перемножения многочленов размера N,
[03:22:20.680 --> 03:22:25.680]  работающий за O от N в степени 1 плюс epsilon.
[03:22:25.680 --> 03:22:34.680]  Ну да, для достаточно большого N.
[03:22:34.680 --> 03:22:38.680]  На самом деле еще хуже.
[03:22:38.680 --> 03:22:45.680]  Мало того, что достаточно большого N, так еще и в предположении, что у нас эти коэффициенты достаточно короткие.
[03:22:46.680 --> 03:22:55.680]  Потому что когда у тебя будет, скажем, если у тебя там будет 100 тысяч, то у тебя тут будет 100 тысяч в степени 100 тысяч.
[03:22:55.680 --> 03:23:03.680]  То есть поэтому как бы совсем прям любое, это только еще в наглом предположении, что у вас числа там,
[03:23:03.680 --> 03:23:10.680]  ну то есть либо совсем мелкие коэффициенты, либо вы предполагаете, что у вас компьютер умеет работать с достаточно большими числами.
[03:23:10.680 --> 03:23:12.680]  Нет, это можно рекурсивно посчитать.
[03:23:12.680 --> 03:23:15.680]  Ага, ну еще там что-то допиливать.
[03:23:15.680 --> 03:23:16.680]  Ну может быть.
[03:23:16.680 --> 03:23:19.680]  Ну это все допиливается с R степени 1 плюс epsilon.
[03:23:19.680 --> 03:23:20.680]  Ну может быть, да.
[03:23:20.680 --> 03:23:21.680]  Честно говоря, не знаю.
[03:23:23.680 --> 03:23:25.680]  То есть в принципе, да, вот оказался такой интересный факт.
[03:23:25.680 --> 03:23:29.680]  Там по-моему фамилия, там по-моему это называется что-то типа алгоритм Шенхагео-Штрассена.
[03:23:30.680 --> 03:23:33.680]  Ну то есть я не знаю, может быть это они там что-то по-другому делали.
[03:23:33.680 --> 03:23:37.680]  То есть честно, я как бы что придумал, то рассказал называется.
[03:23:40.680 --> 03:23:41.680]  Ну естественно, да.
[03:23:42.680 --> 03:23:43.680]  Так что вот оказалось.
[03:23:43.680 --> 03:23:46.680]  Но правда, смотрите, тут интересная симпатическая подлянка.
[03:23:46.680 --> 03:23:52.680]  Что то, что мы для любого epsilon умеем решать с степень 1 плюс epsilon, это не означает, что мы умеем решать за линию.
[03:23:53.680 --> 03:23:54.680]  Да.
[03:23:54.680 --> 03:24:01.680]  Сейчас, а мы, вот это разуждение при увеличении деления на большее число частей.
[03:24:02.680 --> 03:24:07.680]  Все равно сохраняется то, что a0 плюс x1 плюс x квадрата 2.
[03:24:08.680 --> 03:24:12.680]  Ну и плюс и так далее, на сколько частей разделили.
[03:24:12.680 --> 03:24:13.680]  Ну конечно.
[03:24:14.680 --> 03:24:15.680]  Ну конечно.
[03:24:16.680 --> 03:24:21.680]  Ну по факту, смотрите, мы здесь написали абсолютно то же самое, только вместо x стояло t в степени на 3.
[03:24:25.680 --> 03:24:26.680]  Вот собственно и все.
[03:24:27.680 --> 03:24:29.680]  То есть да, то есть это в общем, да.
[03:24:30.680 --> 03:24:38.680]  То есть в общем-то, как на самом деле заметил еще, собственно, называется еще мой, то есть собственно мой научный руководитель.
[03:24:39.680 --> 03:24:41.680]  Он заметил, что в общем-то в каратсубе мы тоже вот что делаем.
[03:24:42.680 --> 03:24:47.680]  Мы представляем, что действительно a0 и 1 это такие действительно многочленные степени 1 или размера 2.
[03:24:48.680 --> 03:24:52.680]  Ну и в которые мы пытаемся подставить константы там скажем 0 и 1 на самом деле по большому счету.
[03:24:54.680 --> 03:24:55.680]  Вот.
[03:24:57.680 --> 03:25:04.680]  Ну то есть на самом деле да, то есть здесь конечно не совсем то, но по большому счету единственное различие от этой схемы, что вот тут вот есть,
[03:25:05.680 --> 03:25:13.680]  то есть как бы вот a0, b0, то есть мы посчитали бы a0, b0, а вот эту вот штуку и то же самое, только тут еще двойки бы стояли.
[03:25:15.680 --> 03:25:20.680]  То есть ну мы вместо этого там посчитали 1, b1, это проще, но суть на самом деле такая.
[03:25:21.680 --> 03:25:22.680]  А?
[03:25:27.680 --> 03:25:32.680]  Да, на самом деле это парадокс в том, что если мы придумаем алгоритм, который работает за n log n, то он уделает все вот это.
[03:25:36.680 --> 03:25:37.680]  Вот.
[03:25:38.680 --> 03:25:41.680]  Да, обратите внимание, да, что все эти алгоритмы n log n уделывает.
[03:25:42.680 --> 03:25:45.680]  Да, то есть помните, то есть видите тут вот 7 точек, это конечно такая нетривиальная вещь.
[03:25:46.680 --> 03:25:47.680]  Вот.
[03:25:48.680 --> 03:25:49.680]  Так.
[03:25:50.680 --> 03:25:51.680]  А сейчас.
[03:25:53.680 --> 03:25:54.680]  Сейчас.
[03:26:20.680 --> 03:26:21.680]  Так вот.
[03:26:26.680 --> 03:26:27.680]  Вот.
[03:26:28.680 --> 03:26:29.680]  Так вот.
[03:26:30.680 --> 03:26:31.680]  Так вот.
[03:26:43.680 --> 03:26:44.680]  Чего такие проблемы? Не понял.
[03:26:44.680 --> 03:26:54.680]  Ну если l увеличиваем, то как бы вот у вас там, ну во-первых, по факту у вас будет и матрица большая, хоть и константовая, но очень на практике очень большого размера.
[03:26:55.680 --> 03:26:58.680]  Но самое главное проблема, что там в этой матрице числа будут огромного размера.
[03:26:59.680 --> 03:27:07.680]  Поэтому как бы этот алгоритм не работает в модели, в которой, например, у вас, ну скажем, в нашей любимой модели w-bit в чисел это работает так себе.
[03:27:10.680 --> 03:27:11.680]  Да.
[03:27:11.680 --> 03:27:22.680]  Да, потому что везде получается матрица Вандермонда.
[03:27:23.680 --> 03:27:27.680]  И мистический факт из науки, что вот конкретно матрица такого вида, они линиями независимы.
[03:27:28.680 --> 03:27:30.680]  То есть они имеют не нулевой определитель.
[03:27:31.680 --> 03:27:34.680]  Как я сказал, это называется матрица Вандермонда.
[03:27:34.680 --> 03:27:37.680]  Ну странно, не знаю, у нас в курсе линала такая матрица была.
[03:27:38.680 --> 03:27:40.680]  Как-то вот откуда-то она возникала.
[03:27:41.680 --> 03:27:42.680]  Так вот.
[03:27:43.680 --> 03:27:51.680]  Значит попробуем, поэтому давайте, ладно, тут мы, значит, прекратим, значит, это все шаман, немножко прекратим.
[03:27:52.680 --> 03:27:56.680]  Соответственно, тут делать такие шаманства и пойдем другим способом.
[03:27:56.680 --> 03:28:00.680]  Соответственно, тут делать такие шаманства и пойдем другим способом.
[03:28:01.680 --> 03:28:05.680]  Собственно, еще одним, значит, пойдем еще одним вариантом разделяй и властвуй.
[03:28:07.680 --> 03:28:15.680]  Значит, смотрите, то есть попробуем внести сюда, то есть как бы это, то есть это мы называем выжимали максимум из одной идеи, что многочлен можно разбивать на две части.
[03:28:17.680 --> 03:28:24.680]  Но на самом деле возникла идея, что можно не просто разбивать многочлен на две части, а вот,
[03:28:24.680 --> 03:28:26.680]  а еще, но развиваться следующей мыслью.
[03:28:27.680 --> 03:28:32.680]  Вот давайте думать, чтобы задать многочлен, нам нужно n чисел.
[03:28:33.680 --> 03:28:34.680]  Ну если мы хотим задать многочлен размера n, да?
[03:28:35.680 --> 03:28:39.680]  Ну теперь возникает вопрос, а что это за n чисел?
[03:28:42.680 --> 03:28:45.680]  Вот какими n числами можно задать многочлен?
[03:28:46.680 --> 03:28:51.680]  Ну самый простой метод, казалось бы, да, просто написать его коэффициент, что тут думать?
[03:28:51.680 --> 03:28:55.680]  Но с другой стороны, а есть альтернативный метод.
[03:28:56.680 --> 03:29:14.680]  Если я знаю, что многочлен размера n, на самом деле я утверждаю, что мне хватит, если я буду знать значение этого многочлена в точках 0, 1, 2, ну и так далее, n-1.
[03:29:14.680 --> 03:29:26.680]  Ну потому что, вот вы знаете, что у вас был многочлен в степени, то есть размера n, и вы знаете его многочлен значения в n точках, да?
[03:29:27.680 --> 03:29:37.680]  То есть тогда вам придется просто решить систему 1, 0, 0, там и так далее, 0, там вот такого вида a1, a2, a n-1.
[03:29:38.680 --> 03:29:39.680]  У вас n-1 точка должна быть.
[03:29:39.680 --> 03:29:46.680]  Нет, размер n, нет, у нас размер n, степень n-1.
[03:29:47.680 --> 03:29:48.680]  Это важно.
[03:29:49.680 --> 03:29:57.680]  Вот поэтому очень удобно мыслить в терминах размера, тем более, что вам алгоритм все равно будет произвеваться, забирая вперед, что вы тут будете нолики пушбекать туда в конец.
[03:29:58.680 --> 03:30:05.680]  То есть размер увеличивается, степень нет, поэтому лучше давайте мыслить в терминах размера, это как бы ближе к, так сказать, физической сути происходящего.
[03:30:06.680 --> 03:30:07.680]  Вот.
[03:30:08.680 --> 03:30:15.680]  Значит, тут соответственно у нас, да, a от 0, а вот эти значения мы знаем откуда-то, a2 и a от n-1.
[03:30:16.680 --> 03:30:30.680]  То есть вот такая если, ну вот тут 1, 0, 0, тут 1, 1, 1, 1, 1, тут 1, 2, 4, 8 и так далее, там 2 в степени n-1, тут получается 1, 3, 9, там 27 в степени, там даже 3 в степени n-1, ну и так далее.
[03:30:33.680 --> 03:30:34.680]  Да, тут a3.
[03:30:35.680 --> 03:30:36.680]  Ну вот.
[03:30:37.680 --> 03:30:38.680]  Вот.
[03:30:41.680 --> 03:30:42.680]  Ну то есть, вот.
[03:30:44.680 --> 03:30:53.680]  Ну то есть, если вы фактически систему уравнений говорите, чтоб жил был многочлен, мы не знаем коэффициентов, но знаем, что в точке 0 он равен вот этому, в точке 1 вот этому и так далее.
[03:30:53.680 --> 03:30:58.680]  То же самое, что как бы у нас вот эти коэффициенты удовлетворяют вот этой системе уравнений.
[03:31:01.680 --> 03:31:02.680]  Вот, понятно, да?
[03:31:03.680 --> 03:31:04.680]  Да.
[03:31:05.680 --> 03:31:06.680]  Вот.
[03:31:07.680 --> 03:31:15.680]  Так что все, что вам остается, это как бы обратить, то есть скажем так, то есть мы знаем, что эта матрица опять в андермон, да?
[03:31:16.680 --> 03:31:22.680]  Она, у нее определить не равен нулю, значит решение этой системы существует и единственно.
[03:31:23.680 --> 03:31:30.680]  То есть следовательно по значениям многочленов этих, в точках 0, 1, 2 и так далее, n-1, многочлен восстанавливается однозначно.
[03:31:31.680 --> 03:31:32.680]  Понятно, да?
[03:31:35.680 --> 03:31:40.680]  Более того, на самом деле, заметим, что мы к 0, 1, 2, 3 и так далее можем не привязываться.
[03:31:41.680 --> 03:31:50.680]  Если я тут напишу 2, 3, 5 и так далее, и тут напишу какое-нибудь там p, n-ное какое-нибудь там, то есть n-ное простое число, например, да?
[03:31:54.680 --> 03:31:57.680]  То суть от этого не поменяется.
[03:31:58.680 --> 03:32:15.680]  То есть конечно матрица конкретная поменяется, тут будет 2, 2 в квадрате, 2 в кубе и так далее, 2 в n-1, тут будет 3, 3 в квадрате, там 3 в кубе, там 3 в n-1, там сколько там? 5, 5 в квадрате, 5 в кубе и так далее, 5 в степени n-1.
[03:32:15.680 --> 03:32:32.680]  Ага, ну и так далее, и там соответственно p, n, p, n в квадрате, p, n в кубе и так далее, p, n в степени n-1.
[03:32:33.680 --> 03:32:38.680]  Вот такая красота. То есть матрица поменялась, суть нет, потому что она все еще обратима.
[03:32:39.680 --> 03:32:42.680]  Еще раз, как мы спрямуем матрицу?
[03:32:47.680 --> 03:32:50.680]  Я даже не умею отвечать на этот вопрос, если честно.
[03:32:52.680 --> 03:33:04.680]  Ну просто если мы знаем многочлен, его значение в точках 2, 3, 5 и так далее, это эквивалент, вот если эту матрицу перемножить на коэффициенты, это то же самое, что в этот многочлен подставили 2.
[03:33:05.680 --> 03:33:08.680]  То есть в первой строчке двойку, тут потом тройку и так далее.
[03:33:12.680 --> 03:33:13.680]  Ну вот, все то же самое.
[03:33:14.680 --> 03:33:21.680]  Да, только разница в том, что здесь я конечно надо не 0, 1, 2, 3 писать, а писать именно там 2, 3, 5 и так далее, p.
[03:33:22.680 --> 03:33:28.680]  И вообще к числам можно не привязываться, это могут быть n различных чисел, в чем сами по себе эти числа абсолютно различны.
[03:33:28.680 --> 03:33:43.680]  То есть если я тут напишу какие-нибудь заранее фиксированные числа t0, t1 и так далее, tn-1, то неожиданно обнаруживается.
[03:33:45.680 --> 03:33:51.680]  Ну вот, то как бы восстановить, если у меня эти конечно t-шки известны, то здесь я тоже абсолютно то же самое пишу.
[03:33:52.680 --> 03:33:56.680]  То есть 1, t0, t0 в квадрате и так далее, t0, tn-1.
[03:33:57.680 --> 03:34:03.680]  Тут 1, t1, t1 в квадрате и так далее, t1 в степень n-1.
[03:34:05.680 --> 03:34:10.680]  1, t2, t2 в квадрате и так далее, t2 в степень n-1.
[03:34:10.680 --> 03:34:32.680]  Да, то есть надо, что действительно t-шки, то есть jt равно tk тогда и только тогда, когда j равно k.
[03:34:33.680 --> 03:34:37.680]  А с чем мы найдем решение?
[03:34:38.680 --> 03:34:41.680]  Ну с того, что это снова матрица Вандермонда.
[03:34:42.680 --> 03:34:43.680]  А это тоже матрица Вандермонда?
[03:34:44.680 --> 03:34:45.680]  Да.
[03:34:46.680 --> 03:34:47.680]  В практике вот определение.
[03:34:48.680 --> 03:34:50.680]  Матрица Вандермонда это когда мы берем n чисел и пишем вот это все.
[03:34:51.680 --> 03:34:55.680]  Ну ладно, может матрица Вандермонда вот эта транспонированная, конечно, но это уже детали.
[03:34:56.680 --> 03:34:59.680]  Ладно, от транспонирования матрицы ее ранг не меняется, как вы помните.
[03:35:02.680 --> 03:35:08.680]  Мы проходили ранг в случае 2 на 2 и 3 на 3.
[03:35:09.680 --> 03:35:14.680]  Нет ранг, ранг.
[03:35:15.680 --> 03:35:25.680]  Ну определить, определить, там определение определителя такое, что очевидно, что не меняется.
[03:35:26.680 --> 03:35:35.680]  Так что вот, так вот, ну вот и тут соответственно понятно.
[03:35:36.680 --> 03:35:40.680]  Вот, то есть тогда к чему я это все?
[03:35:44.680 --> 03:35:46.680]  Я это все к тому, к следующему.
[03:35:46.680 --> 03:35:47.680]  К следующему.
[03:35:51.680 --> 03:35:54.680]  Значит я это к тому, к следующему.
[03:35:55.680 --> 03:36:06.680]  Что получается, если мы, ну потому что предположим, что мы мистическим образом умеем как-то переходить из вот этого формата в вот этот формат.
[03:36:07.680 --> 03:36:21.680]  Тогда если мы это быстро делаем, то на самом деле получает, тогда нахождение произведения может выглядеть следующим образом, смотрите.
[03:36:22.680 --> 03:36:30.680]  Дело в том, что, значит раз мы, вот допустим мы знаем а0, а1, а2 и так далее, аn-1.
[03:36:31.680 --> 03:36:40.680]  Мы можем перейти к значениям a от t0, a от t1 и так далее, a от tn-1 соответственно.
[03:36:41.680 --> 03:36:43.680]  Ну и тут давайте от t2 напишем для ровного счета.
[03:36:44.680 --> 03:36:50.680]  Вот, где-то рядом мы тоже самое сделаем с многочленом b.
[03:36:51.680 --> 03:37:00.680]  Вот были коэффициенты, стали значения естественно в тех же самых точках.
[03:37:01.680 --> 03:37:08.680]  b от t1, b от t2, b от tn-1.
[03:37:08.680 --> 03:37:13.680]  Вот.
[03:37:14.680 --> 03:37:23.680]  Итак, вот допустим мы ищем, пытаемся найти многочлен c, который вот c от t, который должен быть равен a от t и b от t.
[03:37:23.680 --> 03:37:39.680]  Заметим, что я теперь по вот этим двум последовательностям, я могу очень легко получить значения многочленов c в точках t0, t1, t2 и так далее.
[03:37:40.680 --> 03:37:48.680]  То есть знаете, вот когда мы храним многочлен в виде значений в точках, то перемножать их очень легко, то есть надо просто поточечно поперемножать, правда?
[03:37:48.680 --> 03:37:56.680]  Ну просто потому что c от какого-нибудь t-житого это очевидно тупо a от t-житого, умножить на b от t-житого, что тут думать?
[03:37:59.680 --> 03:38:03.680]  Вот. Это мы прям за o от n времени потратили.
[03:38:04.680 --> 03:38:06.680]  И что нам после этого остается?
[03:38:08.680 --> 03:38:10.680]  Да, страдать остается, да?
[03:38:11.680 --> 03:38:13.680]  А как мы так быстро посчитали за o от n?
[03:38:14.680 --> 03:38:15.680]  Прямо?
[03:38:15.680 --> 03:38:17.680]  А значения не могут быть большими?
[03:38:18.680 --> 03:38:19.680]  Ну, предположим, что нет.
[03:38:20.680 --> 03:38:21.680]  А как не могут?
[03:38:22.680 --> 03:38:24.680]  Пока нот называется, поверим, что не могут.
[03:38:25.680 --> 03:38:27.680]  Там достаточно хорошее t, вот так скажем.
[03:38:29.680 --> 03:38:30.680]  Вот.
[03:38:31.680 --> 03:38:38.680]  То есть пока нот, предварительно можем временно поверить, что мы умеем делать вычисления для произвольно длинных чисел.
[03:38:39.680 --> 03:38:40.680]  Мы все равно многочлены перемножаем.
[03:38:40.680 --> 03:38:41.680]  Ну, по факту реально нот.
[03:38:42.680 --> 03:38:44.680]  И тогда раздаем значения в точках c.
[03:38:45.680 --> 03:38:54.680]  Теперь мы обратным переходом получаем вот-вот-вот, соответственно, c0, c1, c2 и так далее, cn-1. Ура!
[03:39:03.680 --> 03:39:07.680]  Ну, кажется, нам надо, правда, больше точек для интерполяции.
[03:39:08.680 --> 03:39:09.680]  Вот.
[03:39:10.680 --> 03:39:12.680]  Ну да, есть одна действительно маленькая тонкость.
[03:39:13.680 --> 03:39:18.680]  Маленькая тонкость заключается в том, что по n значениям многочлены c восстановить вряд ли получится.
[03:39:19.680 --> 03:39:22.680]  Потому что размер многочленов заведомо больше, чем n.
[03:39:25.680 --> 03:39:28.680]  Вот, поэтому идея такая. Докидаем тут ноликов.
[03:39:31.680 --> 03:39:33.680]  И докидаем лишних t-шек.
[03:39:35.680 --> 03:39:37.680]  То есть пусть у нас t-шек будет 2n.
[03:39:40.680 --> 03:39:43.680]  То есть тут тоже докидаем 0, 0 и так далее ноликов.
[03:39:44.680 --> 03:39:48.680]  То есть докидываем тут t, n и так далее b от t2n-1.
[03:39:49.680 --> 03:39:56.680]  И тогда мы уже получаем у c-шек 2n-2n точек.
[03:39:57.680 --> 03:40:01.680]  И после этого получается восстанавливаем все 2n коэффициентов c.
[03:40:02.680 --> 03:40:07.680]  Ну, на самом деле их не более чем 2n-1, то есть это по-любому 0 будет, но давайте для ровного счета оставим.
[03:40:11.680 --> 03:40:13.680]  То есть вот такая схема.
[03:40:14.680 --> 03:40:18.680]  Да, рискну, конечно, наврать, но это называется схема Кулитьюки такая.
[03:40:19.680 --> 03:40:22.680]  Хотя может это не она, ладно, неважно.
[03:40:24.680 --> 03:40:33.680]  То есть смотрите, если мы умеем мистическим образом переходить для многочлена от вот такого вида к вот такому и обратно,
[03:40:34.680 --> 03:40:38.680]  то мы тогда за такую же асимптотику умеем и перемножать два многочлена.
[03:40:41.680 --> 03:40:45.680]  Вот, понятна схема?
[03:40:46.680 --> 03:40:52.680]  То есть основная задача это по значению в точках получить коэффициенты?
[03:40:53.680 --> 03:40:54.680]  Да.
[03:40:55.680 --> 03:41:05.680]  Ну, точнее так, надо по коэффициентам быстро получить значение в точках и по значениям в точках получить, наоборот, значение коэффициентов.
[03:41:05.680 --> 03:41:07.680]  Коэффициентов.
[03:41:10.680 --> 03:41:11.680]  Чего?
[03:41:12.680 --> 03:41:13.680]  Нет, коэффициентов 2n.
[03:41:14.680 --> 03:41:15.680]  Ну, мы будем считать, что 2n для простоты.
[03:41:16.680 --> 03:41:20.680]  Хоть этот, конечно, почти, наверное, 0, но не почти, наверное, просто 0.
[03:41:21.680 --> 03:41:27.680]  Потому что там при перемножении наращения в степени не более чем n-1, получится наращение в степени там не более чем 2n-2.
[03:41:28.680 --> 03:41:34.680]  Но тем не менее нам будет удобно так считать, потому что вот это вот требование, что n у нас степень двойки, оно никуда не девается.
[03:41:35.680 --> 03:41:41.680]  Вот нам то, что n это степень двойки, продолжить быть удобно.
[03:41:42.680 --> 03:41:43.680]  Так вот.
[03:41:46.680 --> 03:41:48.680]  Итак, внимание.
[03:41:49.680 --> 03:41:50.680]  Какой задачи мы а?
[03:41:50.680 --> 03:41:55.680]  Сработает.
[03:41:56.680 --> 03:42:05.680]  Если мы еще посчитаем, добавим еще пару ноликов и посчитаем значение многочлена a или значение многочлена b в какой-то еще одной точке.
[03:42:06.680 --> 03:42:07.680]  Ни в одной?
[03:42:08.680 --> 03:42:15.680]  Нет, кроме этих, кроме тех, которые мы еще добавили, мы добавим еще по ноликам, ну, сколько-нибудь ноликов.
[03:42:16.680 --> 03:42:17.680]  Ну, не сколько.
[03:42:18.680 --> 03:42:19.680]  А зачем?
[03:42:20.680 --> 03:42:23.680]  Будем получать нули в цшках следующих или нет?
[03:42:24.680 --> 03:42:25.680]  На самом деле, ну, будем, конечно.
[03:42:26.680 --> 03:42:35.680]  Получится многочлен размера еще большего размера, размера как минимум 3, но как бы все равно, какая разница, если все равно его значение это произведение.
[03:42:38.680 --> 03:42:48.680]  Хорошо, а до этого цшки, которые мы получали, до cn-1, мы получали цшки, которые будут совпадать с конечным многочленом?
[03:42:49.680 --> 03:42:50.680]  Ну, конечно.
[03:42:51.680 --> 03:42:59.680]  Ну, в смысле, они будут совпадать, да, потому что значение многочлена c в каждой точке это произведение значения многочлена a в этой точке и значение многочлене b в этой точке.
[03:43:01.680 --> 03:43:04.680]  Это определение понятия произведения многочленов.
[03:43:04.680 --> 03:43:14.680]  И мы ждем то, что коэффициенты при многочлене c длиной n, которые мы получали до этого, и коэффициент при многочлене, ну, первой n коэффициент...
[03:43:15.680 --> 03:43:16.680]  Нет, там будет...
[03:43:17.680 --> 03:43:18.680]  Они не будут совпадать.
[03:43:19.680 --> 03:43:20.680]  Не, не будут, это другое, к сожалению.
[03:43:21.680 --> 03:43:22.680]  А почему еще?
[03:43:24.680 --> 03:43:25.680]  Ну, ладно.
[03:43:25.680 --> 03:43:32.680]  Ну, потому что проблема в том, что мы знаем, что произведение, ну, дорожчение c имеет произведение, то есть он, как бы, дорожчение на размере 2n.
[03:43:33.680 --> 03:43:36.680]  Следовательно, по значениям в 2n точках его можно восстановить.
[03:43:37.680 --> 03:43:39.680]  Ну, следует, поэтому мы эти 2n и подгоняем.
[03:43:40.680 --> 03:43:42.680]  Вот, итак, задача.
[03:43:43.680 --> 03:43:44.680]  То есть теперь n в 2n можно забыть.
[03:43:45.680 --> 03:43:50.680]  И теперь говорим, что у нас есть n равно 2 в степени k, у нас есть только один многочлен.
[03:43:51.680 --> 03:43:59.680]  То есть a t равно вот этот вот a 0 плюс a 1 t плюс a 2 t квадрат плюс и так далее e.
[03:44:03.680 --> 03:44:15.680]  И это должно быть со a t 0, a от t 1, a от t 2 и так далее, a от t n-1.
[03:44:16.680 --> 03:44:18.680]  Надо вот в обе стороны это как-то делать.
[03:44:19.680 --> 03:44:21.680]  Ну, каким образом делать?
[03:44:22.680 --> 03:44:24.680]  И теперь следующий лайфхак.
[03:44:25.680 --> 03:44:29.680]  Как вы могли заметить, какие конкретно t-шки мы можем выбирать под свое удобство, правда?
[03:44:31.680 --> 03:44:36.680]  То есть схема устроена так, что t-шки выбираем мы.
[03:44:38.680 --> 03:44:42.680]  Так вот, t-шки мы выберем следующим образом.
[03:44:43.680 --> 03:44:46.680]  Значит, n равно 2 в степени k, помните, да?
[03:44:48.680 --> 03:44:59.680]  Так вот, я попробую зафиксировать такое число w n, удовлетворяющее следующим свойствам.
[03:45:00.680 --> 03:45:06.680]  Во-первых, w n в степени n равно 1.
[03:45:10.680 --> 03:45:17.680]  И можно написать так, w n в степени n пополам не равно 1.
[03:45:18.680 --> 03:45:24.680]  А вам слабо.
[03:45:25.680 --> 03:45:27.680]  Это называется.
[03:45:28.680 --> 03:45:37.680]  А, но еще будет желательно подогнать так, чтобы w, условно, n пополам было равно, конечно, w n в квадрате.
[03:45:37.680 --> 03:45:49.680]  Вот еще я себе дополнительное требование такое сделаю, чтобы это было удобно.
[03:45:56.680 --> 03:45:59.680]  Я хочу найти одно такое w n.
[03:46:02.680 --> 03:46:04.680]  Чего?
[03:46:04.680 --> 03:46:09.680]  У нас же уже n использовано под размер, почему мы еще раз взяли, поставили n?
[03:46:10.680 --> 03:46:18.680]  Потому что для, ну я рассматривал n в степени 2, и для каждого n я выберу одно такое число w n, обладающее вот такими свойствами.
[03:46:19.680 --> 03:46:23.680]  Так, может быть какой-нибудь другой переменный обозначим?
[03:46:24.680 --> 03:46:26.680]  Потому что у нас же n под размер занято.
[03:46:27.680 --> 03:46:31.680]  Нет, w, вот это w важное, оно именно от n зависит.
[03:46:31.680 --> 03:46:33.680]  Так, хорошо, а для любого n равно?
[03:46:34.680 --> 03:46:45.680]  Равного 2 в степени k, я скажу, ну то есть w, ну их бывает несколько таких w, но я буду выбирать так, что w с индексом n пополам должно быть равно w n в квадрате.
[03:46:46.680 --> 03:46:52.680]  И куда мы уже поставляем все любые n, которые являются степенями?
[03:46:53.680 --> 03:46:58.680]  Чего? Ну вот сюда, да. Ну и для любого n мы такие подбираем, да.
[03:47:01.680 --> 03:47:05.680]  На всех n являющихся степенями 2 мы выбираем w n.
[03:47:06.680 --> 03:47:09.680]  Чего? Мы одно число ищем в итоге.
[03:47:10.680 --> 03:47:13.680]  Ну пока одно, оно будет порождать все остальные.
[03:47:15.680 --> 03:47:22.680]  Да, правда, ну правда тут можно сказать, сразу возникает ощущение, что да, в действительных числах вы такого вряд ли найдете, да?
[03:47:23.680 --> 03:47:24.680]  Ну если n хотя бы 4.
[03:47:25.680 --> 03:47:31.680]  То есть знаете ли вы такое число, что у него четвертая степень равна единице, а квадрат не единица?
[03:47:35.680 --> 03:47:36.680]  В действительных числах?
[03:47:37.680 --> 03:47:44.680]  Но предположим нам повезло, и мы перемножаем многочлены не в действительных числах, а в более адекватном поле.
[03:47:45.680 --> 03:47:47.680]  Ну что такое поле же, вы знаете?
[03:47:47.680 --> 03:47:48.680]  Вы знаете?
[03:47:51.680 --> 03:47:59.680]  Вот давайте, ну более адекватное поле, это поле в котором, ну я не знаю, можно найти какой-то более адекватной корененной степени из единицы.
[03:48:00.680 --> 03:48:02.680]  Ведь что эти свойства по большому счету значат?
[03:48:03.680 --> 03:48:06.680]  Эти свойства, ну вот, потому что какие я t-шки хочу предложить?
[03:48:07.680 --> 03:48:13.680]  Я хочу предложить в качестве t-шек такие, что t g t у меня должно быть равно w n в степени g.
[03:48:14.680 --> 03:48:23.680]  Ну то есть в качестве t-шек я хочу, чтобы это было 1, w n в первой, w n в квадрате и так далее, и тут w n в степени n-1.
[03:48:27.680 --> 03:48:36.680]  Но я утверждаю, что вот этого вот необходимой достаточно, чтобы эти, ну ладно, необходимой не обязательно, конечно.
[03:48:37.680 --> 03:48:44.680]  Но я утверждаю, что вот этих условий достаточно для того, чтобы сказать, что эти чиселки попарно различны.
[03:48:51.680 --> 03:48:53.680]  Ну там тоже такое простое упражнение на УКТЧ.
[03:48:55.680 --> 03:48:59.680]  Там с алгоритмом, у вас там может алгоритм Евквита там где-то встретиться в доказательстве и так далее.
[03:49:00.680 --> 03:49:02.680]  Ну вот, но это уже мелочи, это уже технические детали.
[03:49:02.680 --> 03:49:16.680]  Вот, то есть ну и так же там легко доказать, что если вы живете в поле, то это понятно, что в какой-нибудь поле не будет делителей нуля, естественно, но в поле нет делителей нуля, то у вас тут обязательно будет минус 1.
[03:49:19.680 --> 03:49:27.680]  Ну потому что если у вас уравнение x квадрат равно 1, то как бы это по-любому эквивалентно тому, что x минус 1 на x плюс 1 равно 0.
[03:49:27.680 --> 03:49:34.680]  И если делителей нуля нет, то x, то получается либо x равно 1, либо x равно минус 1, тут без вариантов.
[03:49:36.680 --> 03:49:37.680]  Так, но это мелочи.
[03:49:41.680 --> 03:49:42.680]  Нормально мы его определили.
[03:49:43.680 --> 03:49:49.680]  Нет, мы пока даже не определили, а задекларировали, что Wn мы выбираем так, что оно удовлетворяет вот таким свойствам.
[03:49:57.680 --> 03:49:59.680]  У нас, во-первых, n степень двойки.
[03:50:02.680 --> 03:50:03.680]  Да, n степень двойки, это важно.
[03:50:09.680 --> 03:50:15.680]  Ну там потому что, так как так у нас Wn степень n равно 1, то как бы минимальный период будет либо n, либо делитель n.
[03:50:16.680 --> 03:50:26.680]  А все делители n это степень двойки как раз, поэтому там получится, что если еще какой-то степень какого-то делителя n равно 1, то степень n пополам тоже будет 1.
[03:50:27.680 --> 03:50:28.680]  Вот, вот, вот.
[03:50:29.680 --> 03:50:30.680]  Так вот, чего?
[03:50:35.680 --> 03:50:36.680]  А это нам будет удобно просто.
[03:50:42.680 --> 03:50:50.680]  Нет, нет, ну просто заветьте маленькое приятное свойство, что Wn в квадрате подходит, если бы у нас размер многочлена был не n, а n пополам.
[03:50:51.680 --> 03:50:53.680]  То есть оно вот буквально этим свойством удовлетворяет.
[03:50:58.680 --> 03:50:59.680]  Нет, конечно.
[03:51:01.680 --> 03:51:02.680]  Ну просто нет.
[03:51:06.680 --> 03:51:09.680]  Вот, так что-то такая красота получается.
[03:51:12.680 --> 03:51:18.680]  Значит, ну краткая идея, откуда мы вообще это Wn возьмем?
[03:51:19.680 --> 03:51:23.680]  Как мы сказали, в поле действительных чисел такого нет, в поле рациональных чисел тоже тем более.
[03:51:25.680 --> 03:51:26.680]  Ну у нас?
[03:51:27.680 --> 03:51:29.680]  Ну в Z по PZ тоже как повезет.
[03:51:30.680 --> 03:51:31.680]  В смысле?
[03:51:32.680 --> 03:51:37.680]  Ну как бы там все будет зависеть от того, имеет ли отношение число P-1 к степеням двойки.
[03:51:38.680 --> 03:51:39.680]  Ну да.
[03:51:40.680 --> 03:51:41.680]  Так что не совсем все.
[03:51:42.680 --> 03:51:46.680]  Ну давайте так, то есть самое простое и общее решение, говорят, давайте выйдем в поле комплексных чисел.
[03:51:47.680 --> 03:51:48.680]  А как вы?
[03:51:49.680 --> 03:51:50.680]  Ну комплексные числа у вас уже были?
[03:51:53.680 --> 03:51:55.680]  Вот, так что-то как-то сомнительно были.
[03:51:58.680 --> 03:52:02.680]  Да, у вас во втором классе прямо это cos и sin было, да?
[03:52:03.680 --> 03:52:04.680]  Вот.
[03:52:05.680 --> 03:52:06.680]  Ну идея здесь простая.
[03:52:07.680 --> 03:52:08.680]  Что?
[03:52:09.680 --> 03:52:17.680]  Ну действительно, чтобы просто объявить, то есть как бы в комплексный классический вариант Wn это просто E в степени там 2Pi поделить на n.
[03:52:18.680 --> 03:52:25.680]  Или что то же самое, cos 2Pi n плюс I на sin 2Pi n.
[03:52:25.680 --> 03:52:33.680]  Вот такое приятное число.
[03:52:34.680 --> 03:52:36.680]  Ну что это за число?
[03:52:37.680 --> 03:52:47.680]  Ну если вот в комплексных числах тут порисовать чуть-чуть, то мы обнаружим, что вот у нас единичная окружность допустим, да?
[03:52:48.680 --> 03:52:52.680]  То тогда дальше у нас получится примерно следующее.
[03:52:53.680 --> 03:53:01.680]  То есть вектор, соответствующий этому числу, это вот единичный вектор с полярным углом 2Pi n.
[03:53:02.680 --> 03:53:15.680]  Приятно он тем, что если вы его будете возводить в степени, то вы получите, если это Wn, то это будет Wn в квадрате, это будет Wn в кубе, и вот эти все углы будут равны.
[03:53:16.680 --> 03:53:20.680]  То есть вот как-то вот так это вот красиво будет выглядеть.
[03:53:21.680 --> 03:53:30.680]  Правда тут я для m равно 20 конечно рисую, вот такая красота примерно получится.
[03:53:31.680 --> 03:53:33.680]  Но суть вы поняли.
[03:53:34.680 --> 03:53:40.680]  То есть вот легко обнаружили, что Wn удовлетворяет этому приятному свойству.
[03:53:40.680 --> 03:53:46.680]  Это не единственный вариант.
[03:53:47.680 --> 03:53:59.680]  Иногда бывает, многие спрашивают, почему в последнее время в олимпиадной информатике завирусилось мистическое число 98244353.
[03:54:00.680 --> 03:54:08.680]  И вас очень просят находить ответ по модулю именно вот этому, а не этим вашим миллиардом 7.
[03:54:09.680 --> 03:54:12.680]  Секрет очень простой.
[03:54:13.680 --> 03:54:19.680]  Дело в том, что это равно, поправьте если я ошибаюсь, но по-моему это 119 на 2 в 23 плюс 1.
[03:54:25.680 --> 03:54:26.680]  А что это означает?
[03:54:26.680 --> 03:54:27.680]  Что это означает?
[03:54:28.680 --> 03:54:46.680]  А это означает, что в поле, то есть если мы рассмотрим P по вот этому вот мистическому числу, то мы тогда знаем, что в этом поле есть 119 на 2 в 23 ни нулевых остатков.
[03:54:46.680 --> 03:54:47.680]  Правда?
[03:54:50.680 --> 03:54:51.680]  Ну мы там знаем...
[03:54:52.680 --> 03:54:53.680]  Ладно, сейчас.
[03:54:54.680 --> 03:54:57.680]  А, поле не P называется, там вот Z вот так называется, да?
[03:54:59.680 --> 03:55:06.680]  Так вот, в этом Z работает малая теорема фирма, которая говорит о том, что любого X не равного нулю.
[03:55:07.680 --> 03:55:16.680]  Там верно, что X в степени 998224353 минус 1 сравнимо по вот этому модулю мистическому.
[03:55:17.680 --> 03:55:18.680]  Так короче, оно равно мод.
[03:55:19.680 --> 03:55:20.680]  Все.
[03:55:23.680 --> 03:55:24.680]  Вот, с единицей.
[03:55:25.680 --> 03:55:26.680]  Да, это вот мод.
[03:55:27.680 --> 03:55:30.680]  Вот, но это мы просто знаем, это как бы для любого простого мода верно.
[03:55:31.680 --> 03:55:33.680]  А, это еще простое, это важно.
[03:55:34.680 --> 03:55:35.680]  Вот.
[03:55:36.680 --> 03:55:44.680]  Но на самом деле есть более мистическая теория, которая говорит о том, что в любом таком поле есть первообразный корень.
[03:55:48.680 --> 03:55:51.680]  Что такое первообразный корень в ZP?
[03:55:52.680 --> 03:55:54.680]  Значит, смотрите, определение такое.
[03:55:55.680 --> 03:55:56.680]  Так, давайте я еще другой маркер возьму.
[03:55:58.680 --> 03:55:59.680]  И напишем.
[03:56:00.680 --> 03:56:01.680]  Значит, определение такое.
[03:56:01.680 --> 03:56:02.680]  То есть там.
[03:56:03.680 --> 03:56:07.680]  Доказывайте это не будет, потому что это как бы, если вы еще не доказали это на УКТЧ, то докажете обязательно.
[03:56:08.680 --> 03:56:09.680]  Вот.
[03:56:11.680 --> 03:56:15.680]  Ну как-то я не могу поверить, что у вас как-то в курсе УКТЧ вы обойдетесь без понятия первообразный корень.
[03:56:18.680 --> 03:56:23.680]  Значит, первообразный корень в, соответственно, ZP.
[03:56:23.680 --> 03:56:26.680]  Значит, первообразный корень в ZP.
[03:56:27.680 --> 03:56:48.680]  Это такой х, что числа 1х, х квадрат, х кубе и так далее, х в степени p, минус 2, по парно, разли, нот, различные.
[03:56:50.680 --> 03:56:51.680]  А, о, привет.
[03:56:52.680 --> 03:56:54.680]  Туда уже можно сесть или лучше туда сначала?
[03:56:55.680 --> 03:56:56.680]  Да, ты садись, в общем-то.
[03:57:00.680 --> 03:57:01.680]  Не, элементы ZP.
[03:57:02.680 --> 03:57:03.680]  Нет, почему?
[03:57:05.680 --> 03:57:20.680]  Нет, это означает, нет, просто смотрите, по большому счету х, то есть как бы, если вы такой х находите, то в ZP мы этот х можем назвать х, то есть это w с индексом p-1, правда?
[03:57:22.680 --> 03:57:47.680]  А теперь заметим, если у нас вот наша p оказалась равно вот такому числу, 119 на 2 в 23 плюс 1, тогда я могу найти на самом деле, то есть сказать, что w, допустим, 2 в 23, это равно, ну вот, то есть w с индексом, допустим, 2 в 23, это получается w с индексом mod-1,
[03:57:47.680 --> 03:57:53.680]  и все это в степень, ну, по сути, mod по деликта 2 в 23, ладно, mod-1.
[03:58:02.680 --> 03:58:11.680]  Ну, это как бы, ну, как бы вот я вот просто провел аналогию, да, то есть я хотел вот взять, хочу взять такую, то есть я сказал, w p-1 это такое число элемент ZP,
[03:58:11.680 --> 03:58:24.680]  что вот все степени до p-1 включить на попарно различное, p-1 степень равна единице, ну, p-1 степень у всех равна единице, вот, ну и, соответственно, это называть первообразной коренью.
[03:58:24.680 --> 03:58:40.680]  Вот мистическая теорема говорит о том, что он есть, но там, по-моему, всегда есть, там даже есть мистический алгоритм, который пытается найти его перебором, и там утверждает, что он достаточно быстро да найдется.
[03:58:41.680 --> 03:58:49.680]  Ну, или можно спустить вероятность алгоритм, который там скажет, что вероятность того, что вы наткнетесь на, то есть есть теорема о том, что первообразный корень существует, а здесь следует там,
[03:58:49.680 --> 03:58:59.680]  что, видимо, этих первообразных корней это φ mad p, поэтому, если вы тыкнете рандомный остаток, то там получается с вероятностью фiyat p поделить на p-1, вы соответственно найдете первообразный корень.
[03:59:00.680 --> 03:59:07.680]  То фiat p-1, конечно, пардон, поделить на p-1, найдете первообразный корень. Стоится только написать адекватные тесты, является ли число первообразным корнем, да или нет?
[03:59:07.680 --> 03:59:12.360]  да или нет. Ну для этого надо перебрать все делители числа по и минус 1,
[03:59:12.360 --> 03:59:16.800]  возвести x в степень по и минус 1, делить на это делитель и получить там вот.
[03:59:16.800 --> 03:59:20.800]  Так что ладно, потом это на 0,5 на камере поставите, собственно, там можете послушать.
[03:59:20.800 --> 03:59:27.200]  А можно не слушать, потому что все это все равно будет только тч. Ну и в принципе это логичная
[03:59:27.200 --> 03:59:33.920]  вещь. Ну а заветим, что если у вас есть вот уже по парно различных степеней уже размера 119
[03:59:33.920 --> 03:59:41.440]  на 2 в 23, то если возьмете из этой последовательсти каждое 119 число, то у вас получится как раз такой
[03:59:41.440 --> 03:59:51.760]  цикл из 2 в 23 чисел. То есть тогда это означает, что вот в таком zp получается вы можете находить
[03:59:51.760 --> 03:59:59.560]  wn, вот n порядка 2 в 2 даже до 23 степени где-то. Обычно вы там в задачах перемножают многочлены
[03:59:59.560 --> 04:00:07.000]  по модулю там размера порядка миллиона, поэтому получается этого вам хватит. То есть вот такая вот
[04:00:07.000 --> 04:00:12.200]  идея. То есть там просто в некоторых задачах действительно идея бывает, что сделайте фурье только
[04:00:12.200 --> 04:00:18.840]  вот не по комплексным числам, а вот поэтому вот. То есть я поэтому специально такое определение
[04:00:18.840 --> 04:00:23.640]  написал, чтобы оно и для комплексных чисел работало и для простого модуля. Вообще оно будет
[04:00:23.640 --> 04:00:29.760]  работать в любом просто в любом поле, в котором у вас найдется там элемент порядка 2, там
[04:00:29.760 --> 04:00:38.520]  собственно порядка n по большому счету называется. Но найти первообразный корень и возвести его в
[04:00:38.520 --> 04:00:46.160]  119 степень. Ну или там если вам нужно n, если n у вас 2 в 16, там 2 в 15 какой-нибудь, то вы
[04:00:46.160 --> 04:01:01.120]  там этот вот первообразный корень возводите в степень 119 на 2 в 8 получается. Ну потому что тогда
[04:01:01.120 --> 04:01:07.280]  у вас из этой последствия получится каждое 119 число, да? Причем заметим, что получится степь вот
[04:01:07.880 --> 04:01:23.440]  1 х 119, х 119 на 2 и так далее. Ну если вы тут каждое 119 возьмете. Вот там 1 х 119, х в степени 119
[04:01:23.440 --> 04:01:32.000]  на 2 и так далее. Но тогда получится, что этих всех чисел получается вот это поделить на 119 раз
[04:01:32.000 --> 04:01:42.640]  меньше и они все попарно различны. Но х 119 в следующей степени там будет равно тоже 1 получается.
[04:01:42.640 --> 04:01:48.040]  Но это зацикленная последовательность, можно сказать. Вы берете каждое 119. То есть поэтому
[04:01:48.040 --> 04:01:53.640]  получится число, поэтому получается w вот 2 в 23. То есть получается, что у него будет свойство,
[04:01:53.640 --> 04:01:58.800]  что это число в степени 2 в 23 будет равно 1, а все предыдущие степени его единицы неравны.
[04:01:58.800 --> 04:02:12.560]  Ну там разные щиты могут быть. Там смотрите какие щиты могут быть. Вы можете на самом деле
[04:02:12.560 --> 04:02:17.520]  найти по несколько, еще есть щит, несколько таких модулей, проделать произведение по разным
[04:02:17.520 --> 04:02:27.880]  модулям, а потом скомбановать результат. Еще так можно. Не обязательно еще. Нет,
[04:02:28.760 --> 04:02:35.880]  может быть и 2 в 22, пожалуйста. Вы берете w2 в 23 и возбудите в квадрат, получаете w2 в степени 22.
[04:02:35.880 --> 04:02:45.640]  Что? Ну да, то есть понятно, что проблема в том, что n если будет 2 в 25, то конкретность по этому
[04:02:45.640 --> 04:02:55.920]  модулю у вас уже не получится. А для любой степени 2 в 23, пожалуйста. Ну вот, ну там вот пошла. То есть
[04:02:55.920 --> 04:03:00.080]  кто-то придумал задачу модуля, потом кто-то развлекся в фетерозаводске, дал контест,
[04:03:00.080 --> 04:03:04.040]  где во всех задачах был такой модуль, но только в одной из них нужно было реально фурьей писать.
[04:03:04.040 --> 04:03:11.800]  А потом пошла мода, чтобы не спалить лишнюю, чтобы не было такого, что увидел этот модуль,
[04:03:11.800 --> 04:03:15.880]  значит думай в сторону фурьи. Но в результате там и на всех кодфорсах вообще пошла мода,
[04:03:15.880 --> 04:03:23.280]  давайте использовать вот этот модуль. Ну не знаю, нет, я решал раунды, там вот эти модули были.
[04:03:23.280 --> 04:03:34.000]  Ну ладно, видимо, хорошо, ладно. Ну ладно, давайте так, это наверное зависит от автора, то есть ладно.
[04:03:34.000 --> 04:03:42.400]  То есть как бы я думаю так, в ДИВ два раунда, я скажу так, в ДИВ два раунда это смысла не имеет,
[04:03:42.400 --> 04:03:47.520]  потому что я думаю редакторы просто там, сейчас как редакторов-то? Ладно, координаторы,
[04:03:47.520 --> 04:04:03.240]  вряд ли дадут вам добро на дачу в ДИВ два раунда, а дачу на фурье. Ну 20 человек да, но из ДИВа два.
[04:04:03.240 --> 04:04:11.000]  Ну и потом нет, там все-таки, ну я не знаю, я по-моему, я встречал, я все-таки максимум,
[04:04:11.000 --> 04:04:18.040]  где я помню фурье, это все-таки скорее ДИВа-ДИВье все-таки. Ну ДИВ два уже точно давали потоки,
[04:04:18.040 --> 04:04:25.640]  поэтому... А, ну окей, ладно. Там стандарты растут постепенно. Не, ну растут, да. Ага. А если не
[04:04:25.640 --> 04:04:31.440]  превратится в комплексные числа, потому что мы просто нашли такое... Так вот. Омега Н. Так вот,
[04:04:31.440 --> 04:04:39.720]  я собственно к чему? Сколько у меня, сколько-то времени-то вообще? Минус шесть. Ай-яй-яй. Так,
[04:04:39.720 --> 04:04:48.080]  ну ладно. Ладно, я с утра опоздал, поэтому да. Нет. Обожаю этот аргумент, сам сюда так делаю.
[04:04:48.080 --> 04:04:54.720]  Поскольку я опоздал, мы задерживаемся. Нет, ну бывает поразу. Ладно, пока стираю. Нет, еще был,
[04:04:54.720 --> 04:04:58.120]  как предпочитает, говорит, что ладно, я сегодня, к сожалению, опоздал, но в качестве извинения я
[04:04:58.120 --> 04:05:05.760]  вас пораньше отпущу. Так вот. Значит, поверим в существование такое WN. Нет, на самом деле,
[04:05:05.760 --> 04:05:10.960]  сейчас мы само по себе фурье, просто на уровне идеи как это делать за N log N получим достаточно
[04:05:10.960 --> 04:05:17.920]  быстро. Значит, идея будет такая. Мы снова будем делать разделяй и властвуй. Только следующим
[04:05:17.920 --> 04:05:26.520]  образом. Мы введем многочлен А0 от T и А1 от T. Они снова будут размером N пополам, но они равны.
[04:05:26.520 --> 04:05:30.360]  На этот раз, смотрите, к чему-то более читерскому.
[04:05:30.360 --> 04:05:45.800]  Теперь мы коэффициенты делим на коэффициенты с четными индексами и коэффициенты с нечетными индексами.
[04:05:45.800 --> 04:06:09.680]  И теперь немножко мальки. Я утверждаю, что А от T равно А0 от T плюс T на А1 от T.
[04:06:09.680 --> 04:06:21.560]  Внимание, вопрос. Какие два символа я должен добавить в это равенство, чтобы оно стало верным?
[04:06:21.560 --> 04:06:35.320]  Нет, нужно, чтобы это было верное равенство, а не верное утверждение. А то так можно не равно,
[04:06:35.320 --> 04:06:46.360]  а это тоже не факт. Так, что говорите? Так, ладно, времени мало, поэтому давайте без лишних шуток.
[04:06:46.360 --> 04:06:58.560]  Короче, квадраты сюда надо поставить. А теперь зачем я вот это потребовал? Дело в том, что давайте я теперь
[04:06:58.560 --> 04:07:23.560]  попишу синеньким. Значит, внимание, А от Wn в степени g. Это что такое? Это получается А0 от Wn в степени 2g плюс Wn в степени g на A1 от Wn в степени 2g.
[04:07:23.560 --> 04:07:36.560]  Казалось бы, надо вычитать значение многочлена А0 и А1 в этих вот точках от n, но мистический факт.
[04:07:36.560 --> 04:07:45.560]  Дело в том, что когда как мы говорили, что Wn пополам равно Wn в квадрате, то получается, что Wn в степени 2g это Wn пополам в степени g.
[04:07:45.560 --> 04:08:05.560]  Вот нам зачем это было надо. Понимаете, да? То есть получается это равно А0 от Wn пополам в степени g плюс Wn в степени g на A1 от Wn пополам в степени g.
[04:08:05.560 --> 04:08:22.560]  То есть для того, чтобы найти значение многочлена А во всех вот таких n точках, нам надо просто найти значение многочленов A0 и A1 размера n пополам в точках вот по n пополам вот этих вот точках.
[04:08:22.560 --> 04:08:38.560]  Что мы делаем рекурсивно? Неплохо так, правда? То есть запускаемся рекурсивно, после этого за O от n. Их восстанавливаем в значение.
[04:08:38.560 --> 04:08:54.560]  И получаем, что 8 точек у нас получается t от n равно 2t от n пополам плюс O от n. Чему равно t от n? Ну, конечно, n log n, да. Мы уже там миллион раз встречали.
[04:08:54.560 --> 04:09:09.560]  Нет, какой последний? Нет, ну сейчас. А, да, вы правы. На самом деле по-хорошему вот эта схема нам, то есть мы сейчас log n смогли вот в эту сторону.
[04:09:09.560 --> 04:09:23.560]  А теперь как сделать в обратную сторону? Теперь на уровне идеи. Дело в том, что те действия, которые мы делаем, можно легко обратить.
[04:09:23.560 --> 04:09:39.560]  Обратить... Смотрите, значит... Ну, сейчас, что? Я стирал только что про n log n. И вот это вот я сейчас стру. Вот это я не собираюсь стирать, боже упаси.
[04:09:39.560 --> 04:09:50.560]  Значит, смотрите. На самом деле тут идея следующая. Вот мы знаем, что по значениям a0 и a1 мы можем восстановить значение a.
[04:09:50.560 --> 04:10:04.560]  А теперь я хочу сделать тот же самый алгоритм, только наоборот. А для этого вопрос. Как вы думаете, если я знаю значение многочлена a в этих точках, могу ли я получить значение a0 и a1 в этих точках?
[04:10:04.560 --> 04:10:17.560]  Ну, смотрите. Вот как вы правильно заметили, мы хотим, наоборот, вот отсюда перейти сюда. То есть по вот этим значениям я хочу получить вот эти значения и вот эти.
[04:10:17.560 --> 04:10:29.560]  Но если мы научимся это делать за линию, то как бы мы будем по каждым n значениям получать n пополам значений тут, n пополам значений тут, запускаться рекурсивно, получать коэффициенты,
[04:10:29.560 --> 04:10:36.560]  и потом их, собственно, вот таким вот образом вписывать. То есть тут получится коэффициенты a0, a2, a4 и так далее, тут a1, a3, a5 и так далее.
[04:10:36.560 --> 04:10:46.560]  Суммарно получится за n лог n, если мы по вот этим значениям получим вот эти значения, то есть вот эти значения за линию.
[04:10:46.560 --> 04:11:01.560]  Как же это сделать? Оказывается, идея очень проста. Смотрите, дело в том, что для любого g меньше, чем n пополам верны следующие факты.
[04:11:01.560 --> 04:11:15.560]  A wn в степени g равно a0 от wn пополам в степени g плюс wn в степени g на a1 от wn пополам в степени g.
[04:11:15.560 --> 04:11:29.560]  А еще я знаю, что a от wn в степени g плюс n пополам, чему это равно?
[04:11:29.560 --> 04:11:46.560]  Это равно, чему это равно? g плюс n пополам плюс wn в степени g плюс n пополам на a1 от wn пополам в степени g плюс n пополам.
[04:11:46.560 --> 04:11:55.560]  Вот, логично, да? А теперь вспомним, что wn пополам в степени n пополам равно единице.
[04:11:55.560 --> 04:12:06.560]  Логично, да? То есть получается, что я тут могу сделать, то есть я вот это n пополам и вот это n пополам могу убрать.
[04:12:06.560 --> 04:12:18.560]  Логично, да? Ну еще для красоты я могу убрать вот это n пополам и написать вот тут минус, потому что wn в степени n пополам очевидно равно минус единице, правда?
[04:12:18.560 --> 04:12:31.560]  И тогда, смотрите, и тогда получается по значениям wn в степени g и wn в степени g плюс n пополам мы получаем значение многочленов a0 и a1 в точке wn пополам в степени g.
[04:12:31.560 --> 04:12:39.560]  Потому что, видите, у нас просто система линейных уравнений из двух линейных уравнений с двумя неизвестными.
[04:12:42.560 --> 04:12:46.560]  Ну wn в степени g плюс n пополам это то же самое, что wn в степени g с минусом.
[04:12:46.560 --> 04:13:02.560]  Вот, то есть это просто система. То есть получается, что вот это там, отсюда можно вывести, что там, скажем, a0 там от wn пополам в степени g.
[04:13:02.560 --> 04:13:17.560]  Это, на самом деле, равно там что-то типа a0 в степени g точке, плюс значение g плюс n пополам в этой точке и поделить пополам.
[04:13:17.560 --> 04:13:24.560]  Вот, но там вторая точка тоже подобным образом ищет. Вы читаете, делитесь, тогда степень радуетесь.
[04:13:25.560 --> 04:13:37.560]  Отсюда следует, то есть получается, что по вот этим формулам, значит, если вы знаете вот эти значения все n, то вот эти вот все тут n пополам и тут n пополам вы тоже знаете.
[04:13:37.560 --> 04:13:44.560]  Вы их узнаете, вот за линию узнаете, запускаетесь рекурсивно, там получаете коэффициенты и их, собственно, обратно смерживаете.
[04:13:44.560 --> 04:13:49.560]  То есть получается обратное преобразование. Вы тоже успешно делаете.
[04:13:49.560 --> 04:13:59.560]  Ну, как минимум, в принципе. Естественно, в следующий раз мы будем подробно обсуждать, как это делать не таким черномагическим способом, а более приятным.
[04:13:59.560 --> 04:14:03.560]  То есть это редкий случай, когда нам придется рассмотреть, как это нормально кодить.
[04:14:03.560 --> 04:14:10.560]  Потому что если вы будете реально писать рекурсивно, то это будет работать в 10 раз быстрее, чем у, там, называется, тех, кто пишет правильно.
[04:14:10.560 --> 04:14:16.560]  Да, только не быстрее, а медленнее, к сожалению, да.
[04:14:16.560 --> 04:14:21.560]  Но квадраты тоже разные бывают, знаете.
[04:14:21.560 --> 04:14:26.560]  Ну, по крайней мере, как минимум, в принципе, вот это мы делаем.
[04:14:26.560 --> 04:14:34.560]  Ну, на самом деле, вот подстановка именно вот таких w и называется быстрое преобразование.
[04:14:34.560 --> 04:14:39.560]  Возвращение в фолье.
[04:14:46.560 --> 04:14:50.560]  Вот. Или сокращенно b, p, f.
[04:14:51.560 --> 04:14:53.560]  Соответственно.
[04:14:53.560 --> 04:14:57.560]  Вот. Так что подробнее.
[04:14:58.560 --> 04:15:01.560]  Ладно, по умолчанию, да.
[04:15:01.560 --> 04:15:06.560]  Со страшным подозрением, что продолжим мы с этим разбираться через две недели.
[04:15:06.560 --> 04:15:11.560]  Ну, если только случайно не выяснится, что в Бангладеше есть возможность провести удаленные лекции.
