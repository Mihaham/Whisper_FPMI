[00:00.000 --> 00:11.000]  Мы продолжаем говорить по динамику, первое что мы рассмотрим это задание перед ноги.
[00:30.000 --> 00:42.000]  Так, но задача классически сформулируется так-то грустно, что у вас есть гражданитель, который пришел в банк, у него есть рюкзак в местимости W.
[00:42.000 --> 00:52.000]  И он выйдет там, ну не знаю, не скидки золота, а какие-то драгоценные материалы.
[00:53.000 --> 00:57.000]  Вот, у каждого предмета есть стоимость и вес.
[00:59.000 --> 01:05.000]  Стоимость цельная, вес дубльвый, это характеристика каждого предмета.
[01:05.000 --> 01:08.000]  У каждого своя стоимость, свой вес.
[01:08.000 --> 01:14.000]  И он хочет украсть как можно больше, то есть максимально суммарную стоимость, чтобы потом продать ее, как можно подороже.
[01:14.000 --> 01:21.000]  И в этом все должно поместиться в рюкзак, то есть сумма весов тех предметов, которые он пройдет, должна быть больше дубльвая.
[01:21.000 --> 01:24.000]  Вот, такая классическая обстановка.
[01:24.000 --> 01:28.000]  Ну ничего, значит решается динамика.
[01:28.000 --> 01:39.000]  Давайте считаем, что у каждого предмета решается следующим образом.
[01:40.000 --> 01:46.000]  ВПР, ВПР.
[01:46.000 --> 01:51.000]  Так, давайте понемногу уберем.
[01:51.000 --> 01:53.000]  Давайте я их снышу здесь.
[01:53.000 --> 01:58.000]  Это максимальная суммарная стоимость предметов.
[02:10.000 --> 02:16.000]  Если можно брать только первые и предметов, то есть у вас не все предметы доступны, а только первые и.
[02:16.000 --> 02:18.000]  И при этом суммарная веса это х.
[02:18.000 --> 02:25.000]  Мы ограничиваем нашу задачу, ограничиваем тем, что рюкзак имеет размерность не дубльвое большое, а х какой-то.
[02:25.000 --> 02:28.000]  И можно использовать не все предметы, а только первые и.
[02:28.000 --> 02:31.000]  Так вот, максимальная суммарная стоимость предметов.
[02:31.000 --> 02:52.000]  Если можно выбирать только первые и предметов, ну только из первых и предметов, а суммарная вес ровно х.
[02:58.000 --> 03:08.000]  То есть у нас доступны первые и вот этих вот товаров, и нам надо набрать вес ровно х.
[03:08.000 --> 03:12.000]  Хорошо, ну база какая.
[03:12.000 --> 03:19.000]  Давайте когда у нас, скажем, доступны 0 предметов, тогда ВПР 0,0 это 0.
[03:19.000 --> 03:24.000]  Когда у нас есть 0 предметов и мы хотим набрать вес 0, то понятно, что у нас максимальная суммарная стоимость 0.
[03:24.000 --> 03:27.000]  Просто ничего брать мы не должны.
[03:27.000 --> 03:34.000]  А все остальные ДП 0 больше 0 равно минус бесконечности.
[03:34.000 --> 03:42.000]  В том смысле, что если у нас доступны 0 предметов и мы пытаемся набрать вес ровно какой-то положительный,
[03:42.000 --> 03:44.000]  то мы этого не можем сделать.
[03:44.000 --> 03:49.000]  Поэтому максимальная суммарная сумма их стоимости может быть только минус бесконечности.
[03:49.000 --> 03:55.000]  Ну это нет ничего, мы соответственно кладем сюда нейтральный элемент относительно максимума, то есть минус бесконечности.
[03:55.000 --> 03:59.000]  Это как бы знак того, что нельзя набрать такую стоимость.
[03:59.000 --> 04:03.000]  То это точно не такой вес, да? Никакой положительный вес мы брать не можем.
[04:03.000 --> 04:05.000]  Так, ну тогда переход.
[04:05.000 --> 04:09.000]  Если мы добавляем в рассмотрение новый предмет, увеличим его до 1 на 1.
[04:09.000 --> 04:14.000]  Как у нас может поменяться наш содержимый, наш рюкзака?
[04:14.000 --> 04:19.000]  Ну понятно, мы добавили один новый предмет в рассмотрение, значит нужно переврать, участвует он у нас в рюкзаке или нет.
[04:19.000 --> 04:21.000]  Кладем его в рюкзак или нет.
[04:21.000 --> 04:26.000]  Поэтому будет следующий, начальовательный шуток у формулы.
[04:26.000 --> 04:28.000]  Здесь, например.
[04:28.000 --> 04:32.000]  ДП и 1 и С.
[04:32.000 --> 04:36.000]  В этом акции мы целимся в большую.
[04:36.000 --> 04:39.000]  По-первых, если мы не берем ДП и 1 предмет,
[04:39.000 --> 04:45.000]  тогда это соответствует случаю ДП и Х, потому что мне нужно из оставшихся первых И,
[04:45.000 --> 04:47.000]  если я ДП и 1 точно не беру,
[04:47.000 --> 04:50.000]  тогда из оставшихся мне нужно выбрать вес ровно Х.
[04:50.000 --> 04:53.000]  Либо же я и плюс первый предмет беру,
[04:53.000 --> 04:56.000]  тогда из оставшихся И.
[04:56.000 --> 05:00.000]  Нужно выбрать сколько-то, чтобы суммарный вес был ровно Х,
[05:00.000 --> 05:03.000]  и выводить, ну, ДП и 1.
[05:03.000 --> 05:05.000]  ДП и 1.
[05:05.000 --> 05:07.000]  Значит, я один предмет в этом насильно беру.
[05:07.000 --> 05:12.000]  Он уменьшает оставшуюся необходимую массу на свой вес.
[05:12.000 --> 05:15.000]  Получается мне нужно брать такую массу за первый предмет.
[05:15.000 --> 05:19.000]  При этом стоимость здесь вот растет на целью сферы.
[05:25.000 --> 05:27.000]  Значит, еще раз давайте пробежимся.
[05:27.000 --> 05:29.000]  Если у меня доступны плюс один предмет,
[05:29.000 --> 05:31.000]  и я хочу набрать сумму весов ровно Х,
[05:31.000 --> 05:33.000]  тогда у меня есть два способа это сделать.
[05:33.000 --> 05:35.000]  Либо взять и плюс первый предмет.
[05:35.000 --> 05:37.000]  Либо не взять.
[05:37.000 --> 05:39.000]  Если его не беру, тогда мне нужно брать ту же сумму,
[05:39.000 --> 05:43.000]  меньшим числом предметов, и соответственно получить максимально возможную сумму.
[05:43.000 --> 05:45.000]  Либо я его беру,
[05:45.000 --> 05:47.000]  тогда мне нужно брать вот такую вот массу,
[05:47.000 --> 05:49.000]  такой вес с помощью первого предмета.
[05:49.000 --> 05:52.000]  Ну, соответственно, понятное дело, максимальная стоимость.
[05:52.000 --> 05:55.000]  И я еще учитываю вес до этого последнего предмета.
[05:55.000 --> 05:57.000]  Вот это не вес, а стоимость.
[05:57.000 --> 05:59.000]  Сэйм просто.
[05:59.000 --> 06:01.000]  Понятно?
[06:01.000 --> 06:03.000]  Хорошо, ну и здесь, значит, я считаю,
[06:03.000 --> 06:05.000]  что если вот эта сумма минус бесконечность,
[06:05.000 --> 06:07.000]  то минус бесконечность плюс какая-то стоимость,
[06:07.000 --> 06:09.000]  какое-то число, это тоже минус бесконечность.
[06:09.000 --> 06:12.000]  То есть, если вот эта флешка не доступна,
[06:12.000 --> 06:15.000]  то все это вот второе значение тоже минус бесконечность.
[06:15.000 --> 06:17.000]  Ну а если эта штука отрицательна,
[06:17.000 --> 06:19.000]  то тоже считаем, что там,
[06:19.000 --> 06:21.000]  вот так с такой ДПМ не лезем.
[06:21.000 --> 06:23.000]  То есть, если х меньше, чем w и плюс первая,
[06:23.000 --> 06:26.000]  тогда вообще вот эта вот сумма не растет.
[06:26.000 --> 06:28.000]  И платим, чтобы просто это было другое.
[06:30.000 --> 06:31.000]  Так, хорошо.
[06:31.000 --> 06:33.000]  Значит, форму у нас легко доесть.
[06:33.000 --> 06:35.000]  Ну, дальше нужно порядок пересчета.
[06:35.000 --> 06:37.000]  Ну понятно, нужно просто идти в порядок возрастания
[06:37.000 --> 06:39.000]  и в порядок возрастания х.
[06:39.000 --> 06:41.000]  Потому что видим, что каждая новая ДПШ
[06:41.000 --> 06:44.000]  идет дальше через меньшее значение первого аргумента
[06:44.000 --> 06:46.000]  и меньшее значение второго аргумента.
[06:46.000 --> 06:48.000]  Поэтому можно просто в таком варианте перебирать.
[06:48.000 --> 06:53.000]  Значит, сфор и, там можно было дать,
[06:53.000 --> 06:57.000]  сфор х, а у меня будет его большое.
[06:57.000 --> 06:59.000]  Значит, ну мы не вот этот формул записываем,
[06:59.000 --> 07:07.000]  а это так, что считаем ДПИТХ.
[07:08.000 --> 07:10.000]  Используем этот переход.
[07:10.000 --> 07:13.000]  А, и опять, корректно работает,
[07:13.000 --> 07:16.000]  потому что у нас вот этот ДПИ поражается
[07:16.000 --> 07:18.000]  через ДПИ с меньшим первым аргументом
[07:18.000 --> 07:20.000]  или с меньшим вторым аргументом,
[07:20.000 --> 07:22.000]  точнее, и с меньшим вторым аргументом.
[07:22.000 --> 07:25.000]  Такое, такое, последствия переходов нам больше подойдет.
[07:28.000 --> 07:30.000]  Так, значит, что есть?
[07:30.000 --> 07:33.000]  Определение форму перехода, порядок пересчета,
[07:35.000 --> 07:37.000]  база, да, и остался ответ.
[07:38.000 --> 07:41.000]  Ну, ответ здесь тоже несложный.
[07:41.000 --> 07:44.000]  Это максимум по всем х-ам отряда w,
[07:44.000 --> 07:48.000]  ДП, n и х.
[07:48.000 --> 07:51.000]  Тогда мы можем взять любые предметы,
[07:51.000 --> 07:53.000]  то есть мы можем использовать любые предметы из первых n
[07:53.000 --> 07:56.000]  и набрать суммарную массу ровно х.
[07:56.000 --> 07:58.000]  Мы не знаем, какая масса оптимальна,
[07:58.000 --> 08:00.000]  мы знаем лишь то, что она не больше,
[08:00.000 --> 08:01.000]  чем w большое.
[08:01.000 --> 08:02.000]  Ну, давайте всех переберем,
[08:02.000 --> 08:05.000]  мы возьмем ту, которая дает максимальную возможную стоимость всех предметов.
[08:07.000 --> 08:08.000]  Вот.
[08:08.000 --> 08:10.000]  Все, ну и понятно, да, что вот этот х,
[08:10.000 --> 08:12.000]  оно нигде, собственно, здесь я написал в цикле,
[08:12.000 --> 08:13.000]  х отряда w,
[08:13.000 --> 08:15.000]  нет смысла брать х больше, чем w,
[08:15.000 --> 08:17.000]  потому что, ну, мы никогда точно,
[08:17.000 --> 08:18.000]  у нас не будет рюкзака,
[08:18.000 --> 08:21.000]  в котором можно вместить больше, чем w большое,
[08:21.000 --> 08:23.000]  килограммов, все предметы.
[08:25.000 --> 08:26.000]  Вот, все.
[08:26.000 --> 08:28.000]  Такая задача.
[08:28.000 --> 08:30.000]  Значит, со симптомикой что здесь?
[08:32.000 --> 08:36.000]  Времени здесь будет t на w большое,
[08:36.000 --> 08:38.000]  естественно, начало предметов w большое,
[08:38.000 --> 08:40.000]  это птички мастер рюкзака.
[08:40.000 --> 08:42.000]  Да, ну понятно, потому что вот у меня здесь два вложенных цикла,
[08:42.000 --> 08:44.000]  первый заберется в торозе w,
[08:44.000 --> 08:46.000]  и за лог единицы внутри цикла
[08:46.000 --> 08:48.000]  насчитывается карта значений w.
[08:48.000 --> 08:50.000]  Насчитывается, естественно, w это работа цикла,
[08:50.000 --> 08:53.000]  и внутренняя часть работы за единицу.
[08:53.000 --> 08:55.000]  Значит, столько времени.
[08:57.000 --> 08:58.000]  Вот.
[08:58.000 --> 08:59.000]  Ну и памяти.
[08:59.000 --> 09:01.000]  Вот в такой релизации, как я написал,
[09:01.000 --> 09:02.000]  памяти будет столько же.
[09:02.000 --> 09:05.000]  Но опять, если мы заметим, что каждый слой w,
[09:05.000 --> 09:08.000]  выражается через предыдущий,
[09:08.000 --> 09:10.000]  то достаточно будет от w памяти.
[09:12.000 --> 09:14.000]  От w памяти.
[09:14.000 --> 09:16.000]  Давайте я еще раз это разговариваю,
[09:16.000 --> 09:18.000]  но в прошлый раз это замечали,
[09:18.000 --> 09:20.000]  но сейчас еще раз, конечно.
[09:20.000 --> 09:36.000]  Я хочу нарисовать эту дыка в виде таблицы,
[09:36.000 --> 09:40.000]  соответственно, n на w.
[09:40.000 --> 09:45.000]  Вот это будет дыка моего.
[09:45.000 --> 09:48.000]  И на эту формулу я вижу, что у меня
[09:48.000 --> 09:55.000]  И плюс первая строчка, когда у меня первый аргумент сенсирован, и плюс один, а второй пробегает все возможные значения.
[09:55.000 --> 09:59.000]  Так вот, и плюс первая строчка выражается через иту.
[09:59.000 --> 10:03.000]  И чтобы найти и плюс первый, мне достаточно знать только иту.
[10:03.000 --> 10:06.000]  Вся остальная эта история мне не важна.
[10:06.000 --> 10:13.000]  Поэтому на самом деле, чтобы все вот это насчитать, чтобы узнать последнюю строчку, где лежит ответ, максимальный число здесь – это ответ.
[10:13.000 --> 10:17.000]  Чтобы все это найти мне, не нужно хранить целиком это таблец.
[10:17.000 --> 10:34.000]  Мне достаточно хранить только две последние строчки в ней.
[10:34.000 --> 10:38.000]  и я использую вот эту память, которая хранилась для икру с первой строки.
[10:38.000 --> 10:41.000]  Теперь мы используем для хранения икру с третьей строки.
[10:41.000 --> 10:45.000]  Вот, поэтому памяти всего будет по W.
[10:52.000 --> 10:59.000]  Храним. Ну, я это называю два слоя, но можно говорить, что две строчки в нашей динамике.
[10:59.000 --> 11:05.000]  Два слоя, то есть, две строки в ВП.
[11:07.000 --> 11:11.000]  Вопросы есть? Хорошо.
[11:16.000 --> 11:20.000]  Вот это. Если мы просто, смотрите, что такое вот эти аргументы.
[11:20.000 --> 11:26.000]  Это значит, что мы хотим набрать вес ровно х, взяв несколько приметов, суммарного веса ровно х.
[11:26.000 --> 11:29.000]  И при этом мы можем брать только первый икру с один предмет.
[11:29.000 --> 11:31.000]  Первый и второй, когда икру с первый.
[11:31.000 --> 11:35.000]  Какие-то из них надо выбрать так, чтобы вес был ровно такой, а суммарные струбки тогда можно больше.
[11:35.000 --> 11:37.000]  И вот это значит недоступность.
[11:37.000 --> 11:42.000]  Ну, хорошо. Если у меня есть в доступности только вот эти предметы, и я хочу набрать этот вес,
[11:42.000 --> 11:47.000]  тогда давайте посмотрим, входит ли икру с первый предмет на последний предмет в оптимальное множество.
[11:47.000 --> 11:49.000]  Беру я его или нет.
[11:49.000 --> 11:52.000]  Но если я его не беру, тогда динамика просто равна вот этой штуке.
[11:53.000 --> 11:55.000]  Раз я гарантирую, что икру с первым я это не беру,
[11:55.000 --> 12:02.000]  тогда мне нужно, следя оставшихся предметов, взять несколько предметов веса ровно х в максимальную суммарную стоимость.
[12:02.000 --> 12:06.000]  Это вот это слагаемо, когда я не слагаю до этого момента, до максимала.
[12:06.000 --> 12:08.000]  Когда я не беру икру с первым предметом.
[12:08.000 --> 12:12.000]  Если же я его беру, когда я беру икру с первым предметом,
[12:12.000 --> 12:19.000]  тогда мне нужно из оставшихся предметов, из первых им, выбрать несколько суммарного веса вот такого.
[12:19.000 --> 12:24.000]  А чтобы потом, когда я добавляю эту дублевую икру с первым предметом, вес стал ровно х.
[12:24.000 --> 12:29.000]  Ну и дальше я гарантированно получаю такую стоимость из-за икру с первым предметом.
[12:29.000 --> 12:31.000]  То есть я его взял, отложил в сторонку,
[12:31.000 --> 12:37.000]  и из оставшихся им мне нужно получить несколько суммарного вот такого веса в максимальную суммарную стоимость.
[12:39.000 --> 12:43.000]  То есть это просто по случаю с 30 миллионов последних предметов.
[12:44.000 --> 12:46.000]  Хорошо.
[12:49.000 --> 12:51.000]  Так.
[12:51.000 --> 12:53.000]  Что я хочу сказать еще?
[12:55.000 --> 12:57.000]  Можно сделать немножко по-другому депешку.
[12:57.000 --> 12:59.000]  Давайте я раз это обрисую.
[12:59.000 --> 13:03.000]  То есть можно поменять местами вес и стоимость.
[13:03.000 --> 13:05.000]  Давайте я везу депешку 4.
[13:05.000 --> 13:07.000]  Вот y.
[13:08.000 --> 13:12.000]  Это, наоборот, минимальный суммарный вес.
[13:12.000 --> 13:14.000]  Если я могу брать только такой вес.
[13:14.000 --> 13:18.000]  Это, наоборот, минимальный суммарный вес,
[13:18.000 --> 13:21.000]  если я могу брать только какие-то предметы из первых и,
[13:21.000 --> 13:24.000]  чтобы набрать суммарную стоимость ровно y.
[13:24.000 --> 13:27.000]  То есть там раньше я фиксировал вес и считал максимальную стоимость.
[13:27.000 --> 13:28.000]  А теперь сделаю наоборот.
[13:28.000 --> 13:32.000]  Фиксирую стоимость и буду считать минимальный суммарный вес.
[13:35.000 --> 13:37.000]  Минимальный суммарный вес
[13:41.000 --> 13:43.000]  в предметах
[13:45.000 --> 13:47.000]  если доступны
[13:49.000 --> 13:51.000]  первые и
[13:55.000 --> 13:57.000]  а их суммарный вес,
[13:57.000 --> 13:59.000]  нужно взять суммарную стоимость ровно y.
[14:06.000 --> 14:09.000]  Так, нужно взять метов
[14:09.000 --> 14:11.000]  суммарную стоимость ровно y.
[14:19.000 --> 14:21.000]  То есть все похоже на предыдущий,
[14:21.000 --> 14:23.000]  только я поменял местами вес и стоимость.
[14:23.000 --> 14:26.000]  Здесь, соответственно, не максимальная стоимость,
[14:26.000 --> 14:28.000]  а минимальный вес.
[14:32.000 --> 14:34.000]  Тут, короче, я базу не буду писать.
[14:34.000 --> 14:36.000]  Форма перехода аналогичная.
[14:36.000 --> 14:39.000]  Давайте рассмотрим y плюс первый предмет.
[14:40.000 --> 14:43.000]  Если мы хотим получить стоимость суммарную ровно y,
[14:43.000 --> 14:45.000]  то давайте поймем,
[14:45.000 --> 14:47.000]  вот этот предмет плюс первый,
[14:47.000 --> 14:50.000]  он учитывается в оптимальном наборе или нет.
[14:50.000 --> 14:54.000]  Ну, тогда, соответственно, здесь нужно взять минимум из.
[14:54.000 --> 14:57.000]  В первом случае, когда я не беру y плюс первый предмет,
[14:57.000 --> 15:00.000]  значит мне нужно взять любое просто итое, игритое.
[15:02.000 --> 15:04.000]  А когда я y плюс первый предмет не беру,
[15:04.000 --> 15:06.000]  значит доступность, это только первое и,
[15:06.000 --> 15:08.000]  мне нужно набрать уже суммарную стоимость.
[15:08.000 --> 15:10.000]  Вес меняется.
[15:10.000 --> 15:12.000]  Второй случай, когда я его беру,
[15:12.000 --> 15:16.000]  значит доступность предметов опять первое и становится.
[15:16.000 --> 15:18.000]  Стоимость, которую они должны образовывать,
[15:18.000 --> 15:21.000]  это y минус c и плюс первое.
[15:21.000 --> 15:23.000]  Потому что я взял предмет,
[15:23.000 --> 15:26.000]  соответственно, стоимость вот тех товарищей ровно вот такая.
[15:26.000 --> 15:30.000]  Ну и вес здесь увеличился на w и плюс первое.
[15:34.000 --> 15:36.000]  Очень похожая форма,
[15:36.000 --> 15:38.000]  только по сути места менялись весы,
[15:38.000 --> 15:40.000]  ну и там максимум на минимум поменялся,
[15:40.000 --> 15:42.000]  потому что мне нужно прификсировать стоимость,
[15:42.000 --> 15:44.000]  как бы пытаться минимизировать суммарный объем,
[15:44.000 --> 15:46.000]  суммарный вес сетками.
[15:47.000 --> 15:49.000]  Вопросы?
[15:50.000 --> 15:52.000]  Ну и тогда, написав такой же цикл,
[15:52.000 --> 15:54.000]  то есть поняв, что здесь работает все аналогично,
[15:54.000 --> 15:57.000]  мы получаем алгоритм со синтозикой,
[15:57.000 --> 15:59.000]  примерно умножен на c,
[15:59.000 --> 16:01.000]  вместо n умножен на w.
[16:01.000 --> 16:03.000]  И, соответственно,
[16:03.000 --> 16:05.000]  это полезно может быть в случае,
[16:05.000 --> 16:07.000]  когда у нас, например,
[16:07.000 --> 16:10.000]  предметы тяжелые, но не очень дорогие.
[16:10.000 --> 16:12.000]  Например, там, не знаю, какие-то
[16:12.000 --> 16:14.000]  слитки какого-нибудь металла недорогого,
[16:14.000 --> 16:16.000]  но зато тяжелые.
[16:16.000 --> 16:18.000]  Тогда оптимальнее было бы работать
[16:18.000 --> 16:20.000]  за временем пропорциональной суммарной стоимости,
[16:20.000 --> 16:22.000]  ну или там, а че-то вот c большое,
[16:22.000 --> 16:25.000]  c большое суммарная стоимость всех предметов.
[16:31.000 --> 16:33.000]  C большое это суммарная стоимость
[16:33.000 --> 16:35.000]  всех предметов.
[16:41.000 --> 16:44.000]  Ну понятно, что пытаться брать y больше,
[16:44.000 --> 16:46.000]  чем c большое, бессмысленно,
[16:46.000 --> 16:48.000]  потому что невозможно брать стоимость
[16:48.000 --> 16:50.000]  больше, чем c большое,
[16:50.000 --> 16:52.000]  нельзя взять больше, чем сумму всех стоимости.
[16:52.000 --> 16:54.000]  Поэтому y недостаточно ограничивать
[16:54.000 --> 16:56.000]  вот этим вот c,
[16:56.000 --> 16:58.000]  от 0 до ci можно перебирать.
[16:58.000 --> 17:00.000]  То есть если раньше у меня было от 0 до w,
[17:00.000 --> 17:02.000]  то теперь будет от 0 до c большого.
[17:02.000 --> 17:04.000]  Ну и вот так я сказал,
[17:04.000 --> 17:06.000]  а если предметы тяжелые,
[17:06.000 --> 17:08.000]  но дешевые,
[17:08.000 --> 17:10.000]  то вот это будет оптимальнее.
[17:10.000 --> 17:12.000]  Если наоборот они легкие,
[17:12.000 --> 17:14.000]  но дорогие,
[17:14.000 --> 17:16.000]  тогда оптимальнее будет работать вот тем
[17:16.000 --> 17:18.000]  он говорит, ну тогда у меня, ну в общем,
[17:18.000 --> 17:20.000]  время работать за результат веса суммарного,
[17:20.000 --> 17:22.000]  ну или там, от месимости рюкзака,
[17:22.000 --> 17:24.000]  тогда это будет получше, чем вот это.
[17:24.000 --> 17:26.000]  То есть поскольку я просто сравниваю
[17:26.000 --> 17:28.000]  с ц и w, то лучше и порой применить.
[17:28.000 --> 17:30.000]  Вот такая идея, что видите.
[17:40.000 --> 17:42.000]  Да, хорошее замечание.
[17:42.000 --> 17:44.000]  Нет, не будем.
[17:48.000 --> 17:50.000]  То есть ничего лучше,
[17:50.000 --> 17:52.000]  чем то, чтобы
[17:52.000 --> 17:54.000]  их там умножить все на одну и ту же константу,
[17:54.000 --> 17:56.000]  ну там на 10 в степени 100500,
[17:56.000 --> 17:58.000]  чтобы они все стали целыми.
[17:58.000 --> 18:00.000]  Я ничего сказать здесь не могу,
[18:00.000 --> 18:02.000]  поэтому считаем, что они все целые.
[18:04.000 --> 18:06.000]  Вот, давайте
[18:06.000 --> 18:08.000]  опять попытаемся понять,
[18:08.000 --> 18:10.000]  нельзя ли было здесь действовать
[18:10.000 --> 18:12.000]  как-то более, ну в лоб что-ли.
[18:12.000 --> 18:14.000]  Давайте попытаемся понять,
[18:14.000 --> 18:16.000]  почему не работает жатану горить.
[18:18.000 --> 18:20.000]  Наверное, надо было
[18:20.000 --> 18:22.000]  то динамит рассказывать, то не важно.
[18:26.000 --> 18:28.000]  Ну как здесь может выглядеть жатный алгоритм?
[18:28.000 --> 18:30.000]  Например,
[18:30.000 --> 18:32.000]  просто из всех предметов, которые я вижу,
[18:32.000 --> 18:34.000]  брать самый дорогой,
[18:34.000 --> 18:36.000]  который еще умещается в рюкзак.
[18:36.000 --> 18:38.000]  Да, вот есть у меня там много предметов,
[18:38.000 --> 18:40.000]  я смотрю, какой из них для меня самый ценный,
[18:40.000 --> 18:42.000]  и кладу его в рюкзак, если он умещается.
[18:42.000 --> 18:44.000]  И так делаю много раз, пока рюкзак не заполнится.
[18:46.000 --> 18:48.000]  Первое, что приходит в голову,
[18:48.000 --> 18:50.000]  возможно там что-то есть более оптимальное,
[18:50.000 --> 18:52.000]  ну давайте я такой алгоритм предложу.
[18:52.000 --> 18:54.000]  То есть наивный.
[18:54.000 --> 19:00.000]  Показать предмет максимальной стоимости,
[19:04.000 --> 19:06.000]  пока он умещается в рюкзак.
[19:18.000 --> 19:20.000]  Так, ну на какой-нибудь пример,
[19:20.000 --> 19:22.000]  есть у кого-нибудь готовый?
[19:24.000 --> 19:26.000]  Ну очень много предметов.
[19:26.000 --> 19:28.000]  Есть один большой,
[19:28.000 --> 19:30.000]  тяжелый и очень ценный,
[19:30.000 --> 19:32.000]  а есть куча маленьких, очень легких,
[19:32.000 --> 19:34.000]  но в сумме их стоимость больше,
[19:34.000 --> 19:36.000]  чем один большой, тяжелый.
[19:38.000 --> 19:40.000]  Один предмет в рюкзаке,
[19:40.000 --> 19:42.000]  который получается полностью в рюкзаке,
[19:42.000 --> 19:44.000]  а остальные любятся один предмет,
[19:44.000 --> 19:46.000]  и стоят один.
[19:46.000 --> 19:48.000]  Да, да, да, действительно, да.
[19:48.000 --> 19:52.000]  Давайте что-нибудь до гульве конкретное возьмем,
[19:52.000 --> 19:54.000]  возьмем С1 равно двойке,
[19:54.000 --> 19:56.000]  а в гульве первое равно сотне.
[19:58.000 --> 20:00.000]  И потом у вас есть еще куча предметов,
[20:00.000 --> 20:02.000]  не знаю, там С2, С3 и так далее,
[20:02.000 --> 20:04.000]  они все имеют стоимость один и вес один.
[20:08.000 --> 20:10.000]  Тогда жадный алгоритм возьмет этот предмет
[20:10.000 --> 20:12.000]  как самый ценный, у него стоимость двойка,
[20:12.000 --> 20:14.000]  это самое большое число среди всех стоимости,
[20:14.000 --> 20:16.000]  мы его возьмем и все,
[20:16.000 --> 20:18.000]  и больше никого в рюкзак положить не можем.
[20:18.000 --> 20:20.000]  Получим стоимость два.
[20:20.000 --> 20:22.000]  Понятно, что можно сделать получше,
[20:22.000 --> 20:24.000]  можно взять вот этих предметов много,
[20:24.000 --> 20:26.000]  поскольку у них присоединится их там вместе со 100 штук,
[20:26.000 --> 20:28.000]  ну и суммарная стоимость будет минимум
[20:28.000 --> 20:30.000]  иста и количества этих предметов.
[20:30.000 --> 20:32.000]  Если там как-то алгоритм на это подхачивать,
[20:32.000 --> 20:34.000]  и сказать, что давайте мы будем
[20:34.000 --> 20:38.000]  брать предмет с максимальной плотностью,
[20:38.000 --> 20:40.000]  в том смысле, что мы будем брать
[20:40.000 --> 20:44.000]  максимальное значение стоимости на вес,
[20:44.000 --> 20:48.000]  то есть максимальная удельная стоимость,
[20:48.000 --> 20:50.000]  максимальная удельная стоимость,
[20:50.000 --> 20:52.000]  то есть стоимость, поделенная на вес.
[20:52.000 --> 20:54.000]  Ну здесь тоже самое будет работать,
[20:54.000 --> 20:56.000]  то есть в этом случае мы отработаем правильно,
[20:56.000 --> 20:58.000]  потому что у этого предмета
[20:58.000 --> 21:00.000]  удельная стоимость типа 1,50,
[21:00.000 --> 21:04.000]  одна единица веса стоит 1,50 рубля,
[21:04.000 --> 21:06.000]  а здесь удельная стоимость единицы,
[21:06.000 --> 21:08.000]  каждая единица массы
[21:08.000 --> 21:10.000]  весит одну единицу денег.
[21:10.000 --> 21:12.000]  Ну на самом деле,
[21:12.000 --> 21:14.000]  к этому тоже можно сделать пример,
[21:14.000 --> 21:16.000]  если хотите, можете подумать,
[21:16.000 --> 21:18.000]  что они просто тоже строятся.
[21:18.000 --> 21:20.000]  Короче, никакие такие жадные штуки
[21:20.000 --> 21:22.000]  у прайдонса.
[21:22.000 --> 21:24.000]  Чтобы вы не передумали,
[21:24.000 --> 21:26.000]  я вам могу подобрать какой-нибудь пример.
[21:28.000 --> 21:30.000]  И на самом деле, лучшее,
[21:30.000 --> 21:32.000]  что здесь можно сказать,
[21:32.000 --> 21:34.000]  ну на самом деле,
[21:34.000 --> 21:36.000]  нам мало известно хорошего прайдонса задачи.
[21:36.000 --> 21:38.000]  То есть смотрите, вот этот алгоритм жадный,
[21:38.000 --> 21:40.000]  он должен был бы по идее работать
[21:40.000 --> 21:42.000]  за какое-нибудь время
[21:42.000 --> 21:44.000]  по ненавиальной аттенне.
[21:44.000 --> 21:46.000]  То есть как работает жадный там по идее?
[21:46.000 --> 21:48.000]  Он как-то ранжирует все предметы
[21:48.000 --> 21:50.000]  в порядке хорошести,
[21:50.000 --> 21:52.000]  и каждый раз играет самый хороший предмет.
[21:52.000 --> 21:54.000]  То есть у него есть там какой-то порядок по предметам,
[21:54.000 --> 21:56.000]  либо, как я вот здесь в начале сказал,
[21:56.000 --> 21:58.000]  просто в порядке убывания стоимости сортируется,
[21:58.000 --> 22:00.000]  либо в порядке убывания вот эту делину веса.
[22:00.000 --> 22:02.000]  И каждый раз берется просто самый хороший
[22:02.000 --> 22:04.000]  из доступных предметов.
[22:04.000 --> 22:06.000]  Но на самом деле,
[22:06.000 --> 22:08.000]  пока неизвестно ни одного алгоритма,
[22:08.000 --> 22:10.000]  который бы работал за принимальное время
[22:10.000 --> 22:12.000]  в этой задаче, что за прямую аттенну?
[22:12.000 --> 22:14.000]  А это в общем-то случае.
[22:14.000 --> 22:16.000]  И давайте напишем следующее,
[22:16.000 --> 22:30.000]  что пока неизвестно ни одного алгоритма решения по задаче.
[22:34.000 --> 22:38.000]  Так бы работал за полимерное время вот размера фок.
[22:42.000 --> 22:50.000]  За полином, вот я напишу так,
[22:50.000 --> 22:56.000]  полином один и вход.
[22:56.000 --> 22:58.000]  Начну почему это так.
[22:58.000 --> 23:02.000]  Ну, окей, это сложный факт, конечно,
[23:02.000 --> 23:06.000]  но почему вот это не является полиномом от входа?
[23:06.000 --> 23:08.000]  Потому что смотрите, на самом деле,
[23:08.000 --> 23:10.000]  чтобы задать вот эту цель,
[23:10.000 --> 23:12.000]  давайте в этом случае.
[23:12.000 --> 23:14.000]  W занимает входных бит сколько?
[23:14.000 --> 23:16.000]  Чему равен разный вход,
[23:16.000 --> 23:18.000]  если мы пытаемся написать число W?
[23:18.000 --> 23:20.000]  Ну, там говорится логарифм от W.
[23:20.000 --> 23:22.000]  Если мы вот этот W подаем как набор битиков
[23:22.000 --> 23:24.000]  нашему компьютеру,
[23:24.000 --> 23:26.000]  то на самом деле разный вход будет примерно
[23:26.000 --> 23:28.000]  логарифм от W.
[23:28.000 --> 23:30.000]  А чтобы задать число, нужно логарифм bit.
[23:30.000 --> 23:32.000]  И потом у меня еще есть пара чисел,
[23:32.000 --> 23:34.000]  каждый из которых, ну не знаю,
[23:34.000 --> 23:36.000]  вес не больше, чем логарифм.
[23:36.000 --> 23:38.000]  Вот этого числа bit занимает,
[23:38.000 --> 23:40.000]  W bit, и еще там стоимость тоже какая-то
[23:40.000 --> 23:42.000]  тоже логарифмическая,
[23:42.000 --> 23:44.000]  а вот общая стоимость.
[23:44.000 --> 23:46.000]  Поэтому на самом деле вот эта штука,
[23:46.000 --> 23:48.000]  это не полинома от длинных входов,
[23:48.000 --> 23:50.000]  а экспонент, потому что вот это W большое,
[23:50.000 --> 23:52.000]  это экспонент от длинных входов.
[23:52.000 --> 23:54.000]  Давайте подробнее это напишу.
[24:04.000 --> 24:06.000]  Значит, напомню, как у нас выглядит вход
[24:06.000 --> 24:08.000]  в этой задачи. Есть число предметов n,
[24:08.000 --> 24:10.000]  стоимость,
[24:10.000 --> 24:12.000]  вместимость рюкзака от W,
[24:12.000 --> 24:14.000]  и потом n пар,
[24:14.000 --> 24:16.000]  W gt, ct,
[24:16.000 --> 24:18.000]  дофиг n пар.
[24:18.000 --> 24:20.000]  Давайте посчитаем суммарную длину
[24:20.000 --> 24:22.000]  этого входа, как мы это подаем компьютеру.
[24:22.000 --> 24:24.000]  Сколько нужно потратить бит
[24:24.000 --> 24:26.000]  или цифр, чтобы дать всю эту информацию?
[24:26.000 --> 24:28.000]  Сколько бит нужно, чтобы передать n?
[24:28.000 --> 24:30.000]  0 в n, 0 в 2n.
[24:30.000 --> 24:32.000]  Сколько бит нужно потратить,
[24:32.000 --> 24:34.000]  чтобы передать w? 0 в 2 w.
[24:36.000 --> 24:38.000]  И потом еще n раз
[24:38.000 --> 24:40.000]  мы передаем пару,
[24:40.000 --> 24:42.000]  где первые компоненты,
[24:42.000 --> 24:44.000]  ну, давайте скажем, тоже занимает
[24:44.000 --> 24:46.000]  максимум логи 2,0 бит.
[24:46.000 --> 24:48.000]  И есть какая-то мешок значения,
[24:48.000 --> 24:50.000]  скажем, на стоимость логи 2,
[24:50.000 --> 24:52.000]  cmax.
[24:52.000 --> 24:54.000]  Что если все стоимости не больше,
[24:54.000 --> 24:56.000]  чем cmax, то каждая вот эта штука
[24:56.000 --> 24:58.000]  занимает вам столько битиков,
[24:58.000 --> 25:00.000]  для того чтобы передать на карту.
[25:00.000 --> 25:02.000]  Вот, ну, здесь
[25:02.000 --> 25:04.000]  основное излагание это вот это
[25:04.000 --> 25:06.000]  и вот это.
[25:06.000 --> 25:08.000]  То есть лог 2 и меньше,
[25:08.000 --> 25:10.000]  чем n на какую-то константу.
[25:10.000 --> 25:12.000]  Ну, здесь там cmax мы
[25:12.000 --> 25:14.000]  поделим. Вот, получается лог 2 w,
[25:14.000 --> 25:16.000]  здесь и лог 2 w.
[25:16.000 --> 25:18.000]  А вот это вот w, которое время работает здесь,
[25:18.000 --> 25:20.000]  но это, понятное дело, не пальном от той штуки.
[25:20.000 --> 25:22.000]  Там вы не можете улагорить ни в какую степень
[25:22.000 --> 25:24.000]  возвести, чтобы получить пальном.
[25:24.000 --> 25:26.000]  Вам нужно только взять экспонент
[25:26.000 --> 25:28.000]  от этой суммы,
[25:28.000 --> 25:30.000]  возвести тройку в эту степень,
[25:30.000 --> 25:32.000]  только тогда получится w.
[25:32.000 --> 25:34.000]  Вот.
[25:34.000 --> 25:36.000]  Ну и
[25:36.000 --> 25:38.000]  часто такое бывает, что есть
[25:38.000 --> 25:40.000]  какие-то задачи, которые не решаются
[25:40.000 --> 25:42.000]  пальном от длины входа,
[25:42.000 --> 25:44.000]  то есть от описания вот этих входных данных.
[25:44.000 --> 25:46.000]  Такие задачи часто бывают
[25:46.000 --> 25:48.000]  очень трудные.
[25:48.000 --> 25:50.000]  Мы не будем вводить это определение,
[25:50.000 --> 25:52.000]  но так
[25:52.000 --> 25:54.000]  короче,
[25:54.000 --> 25:56.000]  будет у вас какой-то будет курс
[25:56.000 --> 25:58.000]  по сложности вычисления, вот такая задача будет.
[25:58.000 --> 26:00.000]  Для нас
[26:00.000 --> 26:02.000]  это важно только тем, что мы не умеем
[26:02.000 --> 26:04.000]  решать за пальном, и не только мы не умеем,
[26:04.000 --> 26:06.000]  но никто не умеет пока что.
[26:06.000 --> 26:08.000]  То есть если, например, где-нибудь хотите
[26:08.000 --> 26:10.000]  решить задачу о рюкзаке
[26:10.000 --> 26:12.000]  с большими параметрами C и W,
[26:12.000 --> 26:14.000]  здесь сделайте как-нибудь супер-быстрее,
[26:14.000 --> 26:16.000]  быстрее, чем вот то, и ожидаете, что
[26:16.000 --> 26:18.000]  ну и я там сейчас решу за пальном
[26:18.000 --> 26:20.000]  от длины входа, то
[26:20.000 --> 26:22.000]  либо вы действительно это сделаете
[26:22.000 --> 26:24.000]  толще миллион долларов в придачу за решением трудной задачи
[26:24.000 --> 26:26.000]  за пальном, либо вы будете долго думать,
[26:26.000 --> 26:28.000]  и у вас ничего не получится.
[26:28.000 --> 26:30.000]  То есть, чтобы реалистично оценивать свои силы,
[26:30.000 --> 26:32.000]  надо понимать, что какие-то задачи
[26:32.000 --> 26:34.000]  сложные, и если вы хотите пытаться их решать,
[26:34.000 --> 26:36.000]  то надо либо вовремя себя
[26:36.000 --> 26:38.000]  останавливать, либо действительно себя целиком
[26:38.000 --> 26:40.000]  этому посвящать и пытаться делать за пальном.
[26:40.000 --> 26:42.000]  Но пока никто не умеет.
[26:44.000 --> 26:46.000]  Это длина входа.
[26:48.000 --> 26:50.000]  Значит, давайте я напишу так.
[26:50.000 --> 26:52.000]  Количество бит
[26:52.000 --> 26:58.000]  для формировки задач.
[27:06.000 --> 27:08.000]  То есть, чтобы нашему компьютеру передать информацию
[27:08.000 --> 27:10.000]  о том, какую задачу мы решаем,
[27:10.000 --> 27:12.000]  мне нужно передать ему вот этот набор чисел.
[27:12.000 --> 27:14.000]  Я посчитал его длину и понял,
[27:14.000 --> 27:16.000]  что вот это время, которое здесь у меня подсчитано,
[27:16.000 --> 27:18.000]  не является пальном от этой штуки.
[27:18.000 --> 27:20.000]  Там оно является пальном.
[27:20.000 --> 27:22.000]  Ну, смотрите.
[27:22.000 --> 27:24.000]  Мне нужно вот этого степени получить.
[27:24.000 --> 27:26.000]  Н на w.
[27:26.000 --> 27:28.000]  Что можно сделать с этой функцией?
[27:28.000 --> 27:30.000]  Только получить n на w.
[27:30.000 --> 27:32.000]  Но в какой бы степени я ее не возводил,
[27:32.000 --> 27:34.000]  там, во 2, 3, 5, 10, у меня никогда
[27:34.000 --> 27:36.000]  не будет множества вот такого.
[27:36.000 --> 27:38.000]  У меня не будет w никогда.
[27:38.000 --> 27:40.000]  У меня будет степень только логеритма по w.
[27:40.000 --> 27:42.000]  Чтобы получить само w, мне нужно возвести
[27:42.000 --> 27:44.000]  двойку в эту степень.
[27:44.000 --> 27:46.000]  Вот если я возведу двойку в степень этой суммы,
[27:46.000 --> 27:48.000]  тогда у меня получится, ну да, один из множеств и будет w.
[27:48.000 --> 27:50.000]  В большей степени это там w на что-то там.
[27:50.000 --> 27:52.000]  Вот.
[27:52.000 --> 27:54.000]  А если просто буду возводить это в степень,
[27:54.000 --> 27:56.000]  то я не получу никогда w.
[27:56.000 --> 27:58.000]  Получу только степень логеритма w.
[27:58.000 --> 28:00.000]  Окей.
[28:00.000 --> 28:02.000]  Хорошо.
[28:02.000 --> 28:04.000]  Так.
[28:04.000 --> 28:06.000]  Ну все.
[28:06.000 --> 28:08.000]  Заком мы справились.
[28:18.000 --> 28:20.000]  Так, давайте еще
[28:20.000 --> 28:22.000]  про восстановление ответа
[28:22.000 --> 28:24.000]  пару слов скажем.
[28:30.000 --> 28:32.000]  Восстановление ответа
[28:32.000 --> 28:34.000]  всегда в динамике, когда мы хотим получить
[28:34.000 --> 28:36.000]  ну, грубо говоря, не только численное значение,
[28:36.000 --> 28:38.000]  но и то, как мы его получаем.
[28:38.000 --> 28:40.000]  Вот в этой задаче игроке наша цель была
[28:40.000 --> 28:42.000]  как бы сказать грабителю, какие приметы
[28:42.000 --> 28:44.000]  надо взять. Ну то есть понятно, что просто
[28:44.000 --> 28:46.000]  информация о том, какую максимальную
[28:46.000 --> 28:48.000]  мощность он может утащить, в принципе не очень полезна.
[28:48.000 --> 28:50.000]  Ему скорее нужно дать стратегию действий,
[28:50.000 --> 28:52.000]  что грабим первый предмет, седьмой и восьмой.
[28:52.000 --> 28:54.000]  Вот. А мы ему сообщаем
[28:54.000 --> 28:56.000]  только вот наш ответ, вот этот вот.
[28:56.000 --> 28:58.000]  Это просто значение, да, которое
[28:58.000 --> 29:00.000]  нужно украсить. Просто смартфон.
[29:00.000 --> 29:02.000]  Давайте тогда сообщим, какие
[29:02.000 --> 29:04.000]  предметы именно нужно взять.
[29:04.000 --> 29:06.000]  Вот. Это делается
[29:06.000 --> 29:08.000]  в многими способами.
[29:08.000 --> 29:10.000]  Ну давайте самый простой я скажу такой.
[29:10.000 --> 29:12.000]  Вместе с dp-шкой
[29:12.000 --> 29:14.000]  мы будем насчитывать
[29:14.000 --> 29:16.000]  массив
[29:18.000 --> 29:20.000]  как бы того,
[29:20.000 --> 29:22.000]  как нужно действовать. Вот смотрите,
[29:22.000 --> 29:24.000]  когда у меня фиксировано, ставим dp и т.д.,
[29:24.000 --> 29:26.000]  я выбираю одну из этих двух значений
[29:26.000 --> 29:28.000]  и давайте буду еще дополнительную
[29:28.000 --> 29:30.000]  информацию хранить. А как мы получили
[29:30.000 --> 29:32.000]  вот это значение? То есть мы либо одни из
[29:32.000 --> 29:34.000]  первых предметов не взяли, да, соответственно,
[29:34.000 --> 29:36.000]  вот эта штука равна вот этой штуке,
[29:36.000 --> 29:38.000]  мы сохраним отдельную териенцию, которая говорит, что
[29:38.000 --> 29:40.000]  в оптимальной стратегии
[29:40.000 --> 29:42.000]  для таких параметров нужно не брать
[29:42.000 --> 29:44.000]  первый предмет. Либо, наоборот, его надо было
[29:44.000 --> 29:46.000]  брать, и тогда, соответственно, dp-шка
[29:46.000 --> 29:48.000]  равна вот этому, и я сохраню отдельную
[29:48.000 --> 29:50.000]  териенцию, которая говорит, что нужно его брать.
[29:50.000 --> 29:52.000]  То есть формально я скажу
[29:52.000 --> 29:54.000]  следующее.
[29:56.000 --> 29:58.000]  Ну вот b пусть будет.
[30:00.000 --> 30:02.000]  Itxt
[30:02.000 --> 30:04.000]  это ноль, если
[30:06.000 --> 30:08.000]  значение
[30:08.000 --> 30:10.000]  dp и itx
[30:12.000 --> 30:14.000]  достигается
[30:16.000 --> 30:18.000]  без взятия
[30:18.000 --> 30:20.000]  иитого предмета.
[30:26.000 --> 30:28.000]  Ну и один иначе.
[30:32.000 --> 30:34.000]  Это
[30:34.000 --> 30:36.000]  насчитать очень просто. Вот в той формуле,
[30:36.000 --> 30:38.000]  когда мы считаем dp
[30:38.000 --> 30:40.000]  через что-то предыдущее,
[30:40.000 --> 30:42.000]  можно написать следующую стручку.
[30:42.000 --> 30:44.000]  Значит, окей, вот я хочу
[30:44.000 --> 30:46.000]  найти dp-пусть первое xt, давайте я
[30:46.000 --> 30:48.000]  сравню уже два выражения. Вот это и вот это.
[30:48.000 --> 30:50.000]  Если вот это больше, тогда понятно,
[30:50.000 --> 30:52.000]  что dp-пусть первое xt равно dp-питовое xt,
[30:52.000 --> 30:54.000]  и в p я
[30:54.000 --> 30:56.000]  положу нолик, положу нолик.
[30:56.000 --> 30:58.000]  То есть это означает, что в оптимальной
[30:58.000 --> 31:00.000]  стратегии для вот этих параметров брать
[31:00.000 --> 31:02.000]  последний предмет не выберу. Поэтому давайте
[31:02.000 --> 31:04.000]  я скажу, что dp-пусть первое xt это ноль.
[31:04.000 --> 31:06.000]  Вот это что-то перевешивает. Если в максимуме
[31:06.000 --> 31:08.000]  мы берем максимального значения,
[31:08.000 --> 31:10.000]  второй аргумент, тогда я набросил,
[31:10.000 --> 31:12.000]  что p равно единице, а p-пусть первое xt равно единице.
[31:12.000 --> 31:14.000]  Это означает, что в оптимальной стратегии
[31:14.000 --> 31:16.000]  выгодом взять последний предмет.
[31:16.000 --> 31:18.000]  То есть, по сути, я просто запоминаю,
[31:18.000 --> 31:20.000]  как именно я получил все значения динамики.
[31:20.000 --> 31:22.000]  Вот. Ну а дальше все уже очень просто.
[31:22.000 --> 31:24.000]  Если у меня есть, скажем,
[31:24.000 --> 31:26.000]  если я знаю, что ответ
[31:26.000 --> 31:28.000]  это какой-нибудь dp
[31:28.000 --> 31:30.000]  n и xt,
[31:30.000 --> 31:32.000]  то есть я знаю, что чтобы поучить максимальную
[31:32.000 --> 31:34.000]  стоимость, мне нужно набрать вес
[31:34.000 --> 31:36.000]  ровно x и использовать первый n-й предмет.
[31:36.000 --> 31:38.000]  Тогда, по сути,
[31:38.000 --> 31:40.000]  используя вот эти значения p, я могу
[31:40.000 --> 31:42.000]  восстановить целиком ответ. Потому что
[31:42.000 --> 31:44.000]  переменной pnx
[31:44.000 --> 31:46.000]  у меня лежит информация,
[31:46.000 --> 31:48.000]  в том, надо ли брать n-й предмет
[31:48.000 --> 31:50.000]  в ответ. Так если я знаю, что
[31:50.000 --> 31:52.000]  вот это оптимум, что вот здесь лежит оптимум,
[31:52.000 --> 31:54.000]  то вот эта штука мне говорит о том,
[31:54.000 --> 31:56.000]  лежит ли n-й предмет в ответе.
[31:56.000 --> 31:58.000]  Лежит ли он в оптимум.
[31:58.000 --> 32:00.000]  Тогда, соответственно, если эта штука ноль,
[32:00.000 --> 32:02.000]  я просто коррекфанширую,
[32:02.000 --> 32:04.000]  два случая,
[32:04.000 --> 32:06.000]  то есть здесь ноль,
[32:06.000 --> 32:08.000]  тогда я просто пытаюсь набрать тот же
[32:08.000 --> 32:10.000]  вес ровно x предметов,
[32:10.000 --> 32:12.000]  а если здесь единица,
[32:12.000 --> 32:14.000]  тогда, давайте,
[32:14.000 --> 32:16.000]  стрелочку нарисую.
[32:16.000 --> 32:18.000]  Если единица,
[32:18.000 --> 32:20.000]  то я пытаюсь опять использовать
[32:20.000 --> 32:22.000]  ровно x предмет, набрать вес
[32:22.000 --> 32:24.000]  уже x минус wn.
[32:26.000 --> 32:28.000]  Ну, мне просто говорят,
[32:28.000 --> 32:30.000]  надо использовать предмет или не надо,
[32:30.000 --> 32:32.000]  если не надо, тогда я уменьшаю количество
[32:32.000 --> 32:34.000]  и оставляю вес, а если надо,
[32:34.000 --> 32:36.000]  то я, соответственно, его печатаю и говорю,
[32:36.000 --> 32:38.000]  что порт, пожалуйста, украдите n-й предмет
[32:38.000 --> 32:40.000]  и реши задачу для n-й предмета
[32:40.000 --> 32:42.000]  веса x минус wn.
[32:42.000 --> 32:44.000]  Значит, дальше, для вот этого я знаю,
[32:44.000 --> 32:46.000]  что ему ровно w, то и знаю, надо или не надо
[32:46.000 --> 32:48.000]  брать последний предмет, где последний
[32:48.000 --> 32:50.000]  уже вот этот вот n-й предмет, ну и так далее.
[32:50.000 --> 32:52.000]  Итак, я как бы от n к нулю,
[32:52.000 --> 32:54.000]  я про каждый предмет знаю брать его
[32:54.000 --> 32:56.000]  или не брать, ну и тем самым выведу все
[32:56.000 --> 32:58.000]  предметы, нужно взять развертку
[32:58.000 --> 33:00.000]  оптимально от этого.
[33:00.000 --> 33:02.000]  Окей?
[33:06.000 --> 33:08.000]  Да, значит, здесь память действительно
[33:08.000 --> 33:10.000]  нельзя будет у меня
[33:10.000 --> 33:12.000]  с крошками находиться, как мы делали
[33:12.000 --> 33:14.000]  по оптимизации, вот такая память не получится.
[33:14.000 --> 33:16.000]  Ну, лучше,
[33:16.000 --> 33:18.000]  по крайней мере, с такой такой реализацией
[33:18.000 --> 33:20.000]  действительно будет n на w память нам здесь
[33:20.000 --> 33:22.000]  потребуется.
[33:26.000 --> 33:28.000]  Потому что здесь, чтобы
[33:28.000 --> 33:30.000]  восстановить ответ, мне нужны
[33:30.000 --> 33:32.000]  будут все значения p,
[33:32.000 --> 33:34.000]  мне нужна будет целиком табличка
[33:34.000 --> 33:36.000]  за это значение p,
[33:36.000 --> 33:38.000]  потому что, когда я буду проходить снизу-вверх,
[33:38.000 --> 33:40.000]  мне нужно будет запоминать, как я все ответы
[33:40.000 --> 33:42.000]  получал, поэтому нельзя будет
[33:42.000 --> 33:44.000]  уплотить на только 2-3 крошки,
[33:44.000 --> 33:46.000]  нужно будет хранить всю историю значений p.
[33:46.000 --> 33:48.000]  Вот, а на самом деле можно
[33:48.000 --> 33:50.000]  здесь что-нибудь улучшить,
[33:50.000 --> 33:52.000]  а Машке будет задача придумать, как
[33:52.000 --> 33:54.000]  здесь память чуть-чуть порезать,
[33:54.000 --> 33:56.000]  типа, в корень раз,
[33:56.000 --> 33:58.000]  по крайней мере, то, что это можно сделать,
[33:58.000 --> 34:00.000]  но это будет отдельное упражнение
[34:00.000 --> 34:02.000]  по дозе.
[34:08.000 --> 34:10.000]  Хорошо.
[34:24.000 --> 34:26.000]  Ну что ж, тогда, переходим к динамике на матрицах.
[34:26.000 --> 34:28.000]  Это p на матрице.
[34:54.000 --> 34:56.000]  Вот, начнем с такой задачи.
[35:00.000 --> 35:02.000]  Найти
[35:02.000 --> 35:04.000]  dfn
[35:04.000 --> 35:06.000]  в процент m
[35:08.000 --> 35:10.000]  за
[35:10.000 --> 35:12.000]  вот эвитмическое время,
[35:12.000 --> 35:14.000]  где f – это число бананчика.
[35:14.000 --> 35:16.000]  dfn
[35:16.000 --> 35:18.000]  – это n на число бананчика.
[35:24.000 --> 35:26.000]  Вот, у нас были числа бананчика в
[35:26.000 --> 35:28.000]  прошлом смеси, когда мы что-то там про Вэйль-дерево
[35:28.000 --> 35:30.000]  рассуждали. Давайте я скажу, что f0 – это
[35:30.000 --> 35:32.000]  1, f1 – это 1.
[35:32.000 --> 35:34.000]  Вот, а все последующие –
[35:34.000 --> 35:36.000]  это сумму с предыдущим.
[35:40.000 --> 35:42.000]  Значит, мне дает какой-то n
[35:42.000 --> 35:44.000]  достаточно большой, ну там, не знаю,
[35:44.000 --> 35:46.000]  10,9, скажем,
[35:46.000 --> 35:48.000]  ну, примерно 10,9 по порядку,
[35:48.000 --> 35:50.000]  и какой-нибудь модуль m,
[35:50.000 --> 35:52.000]  по которому надо произвести вычисление.
[35:52.000 --> 35:54.000]  То есть, если бы я не передавал здесь
[35:54.000 --> 35:56.000]  модуль и просто просил бы нас
[35:56.000 --> 35:58.000]  найти fn, то
[35:58.000 --> 36:00.000]  ну, здесь будет быть сядь линку,
[36:00.000 --> 36:02.000]  потому что мы знаем, что эти числа довольно
[36:02.000 --> 36:04.000]  быстро растут.
[36:04.000 --> 36:06.000]  Там есть как формула, что fn
[36:06.000 --> 36:08.000]  ну, давайте я напишу так,
[36:08.000 --> 36:10.000]  а симпатически равно там fi в n,
[36:10.000 --> 36:12.000]  где fi – это золотое сечение,
[36:12.000 --> 36:14.000]  то есть эта штука растет как специально
[36:14.000 --> 36:16.000]  быстро. И если мне
[36:16.000 --> 36:18.000]  надо будет найти точное
[36:18.000 --> 36:20.000]  значение, то, ну там,
[36:20.000 --> 36:22.000]  то само это число растет довольно быстро,
[36:22.000 --> 36:24.000]  вот, значит,
[36:24.000 --> 36:26.000]  вообще даже, просто чтобы его вывести,
[36:26.000 --> 36:28.000]  мне нужно будет потратить какое-то большое
[36:28.000 --> 36:30.000]  время, пропорционально, ну, по сути,
[36:30.000 --> 36:32.000]  потому что если на росте fn сайта,
[36:32.000 --> 36:34.000]  то длина растет линией на 1,5,
[36:34.000 --> 36:36.000]  вот, ну, да, фальминально как-то.
[36:40.000 --> 36:42.000]  И, в общем, ну, мы не хотим, да, мы не хотим
[36:42.000 --> 36:44.000]  теряемому числу печатать, вот.
[36:44.000 --> 36:46.000]  И часто в задаче кто таких наших?
[36:50.000 --> 36:52.000]  В общем, которые будут в контестах,
[36:52.000 --> 36:54.000]  часто ответ нужно будет вывести по модулю.
[36:54.000 --> 36:56.000]  То есть это нужно нам в основном для того, чтобы
[36:56.000 --> 36:58.000]  не париться с длинной арифметикой и не учитывать
[36:58.000 --> 37:00.000]  то время, которое выходит на, в общем,
[37:00.000 --> 37:02.000]  на подсчет, там, на сложение длинных чисел,
[37:02.000 --> 37:04.000]  умножение длинных чисел и так далее.
[37:04.000 --> 37:06.000]  Вот, поэтому мы обычно будем
[37:06.000 --> 37:08.000]  довольствовать с выводом ответа
[37:08.000 --> 37:10.000]  к какому-то модулю, нам это будет хватать.
[37:10.000 --> 37:12.000]  Ну и вообще понятно, что если вы там угадали
[37:12.000 --> 37:14.000]  fn на процент m, то, наверное, и
[37:14.000 --> 37:16.000]  без модули вы это сможете, сможете сделать.
[37:16.000 --> 37:18.000]  То есть если вы знаете ответ,
[37:18.000 --> 37:20.000]  если вы знаете остаток определения на m
[37:20.000 --> 37:22.000]  какого-то там большого числа, который надо найти,
[37:22.000 --> 37:24.000]  то, наверное, вы и само число умеете как его находить.
[37:24.000 --> 37:26.000]  Если вы угадали остаток определения,
[37:26.000 --> 37:28.000]  то и само число, наверное, как-то знаете.
[37:28.000 --> 37:30.000]  Вот, ну хорошо, значит, здесь
[37:30.000 --> 37:32.000]  работает следующее.
[37:32.000 --> 37:34.000]  Так.
[37:34.000 --> 37:36.000]  Так, здесь работает
[37:36.000 --> 37:38.000]  следующая штука.
[37:40.000 --> 37:42.000]  Ну ладно.
[37:42.000 --> 37:44.000]  Давайте заметим следующее соотношение.
[37:48.000 --> 37:50.000]  Вот.
[37:54.000 --> 37:56.000]  Вот.
[37:56.000 --> 37:58.000]  Если я напишу такое умножение двух матриц,
[37:58.000 --> 38:00.000]  здесь матрица 2 на 2
[38:00.000 --> 38:02.000]  из нички нулей,
[38:02.000 --> 38:04.000]  здесь матрица, ну, в общем,
[38:04.000 --> 38:06.000]  один столбец, два, после этого
[38:06.000 --> 38:08.000]  будет цепать по началу. Тогда понятно, что если я умножу 1 на 2,
[38:08.000 --> 38:10.000]  я получу ровно вот это.
[38:10.000 --> 38:12.000]  Ну потому что как это будет умножение матриц?
[38:12.000 --> 38:14.000]  То есть я первую строчку умножаю на первый столбец,
[38:14.000 --> 38:16.000]  получаю fn-1 умножить на 1,
[38:16.000 --> 38:18.000]  а вторую стручку умножу на 1.
[38:18.000 --> 38:20.000]  Это как раз fn.
[38:20.000 --> 38:22.000]  Беру вторую строчку умножаю на столбец,
[38:22.000 --> 38:24.000]  получаю, значит, просто fn-1,
[38:24.000 --> 38:26.000]  а это не учитывается,
[38:26.000 --> 38:28.000]  поэтому вот здесь копируется fn-1.
[38:28.000 --> 38:30.000]  Вот.
[38:30.000 --> 38:32.000]  Есть такое простое соотношение, которое, собственно, берется
[38:32.000 --> 38:34.000]  из вот этого рамки,
[38:34.000 --> 38:36.000]  что каждая число матрицы равно союет в двух предыдущих.
[38:36.000 --> 38:38.000]  Значит, если я продолбываю эту штуку
[38:42.000 --> 38:44.000]  и распишу вот этот столбец
[38:44.000 --> 38:46.000]  аналогичным образом через предыдущий столбец
[38:46.000 --> 38:48.000]  значения ровки,
[38:48.000 --> 38:50.000]  у меня будет вот такая
[38:50.000 --> 38:52.000]  записка.
[38:52.000 --> 38:54.000]  Да, но то же самое.
[38:54.000 --> 38:56.000]  Если fn-1 я выручу через fn-2 и fn-3,
[38:56.000 --> 38:58.000]  получится, что этот столбец
[38:58.000 --> 39:00.000]  заменяет вот такое произведение матрицы.
[39:00.000 --> 39:02.000]  Вот. Но если я так буду делать
[39:02.000 --> 39:04.000]  до упора,
[39:04.000 --> 39:06.000]  у меня получится
[39:06.000 --> 39:08.000]  что-то такое.
[39:08.000 --> 39:10.000]  У меня получится, что эта матрица
[39:10.000 --> 39:12.000]  произойдет в степени
[39:12.000 --> 39:14.000]  а... сейчас, как я покажу.
[39:16.000 --> 39:18.000]  Ну, видимо, и минус первую.
[39:20.000 --> 39:22.000]  Вот. А в конце получится столбец f1 в ноль.
[39:24.000 --> 39:26.000]  Значит, чтобы решить нашу задачу исходную,
[39:26.000 --> 39:28.000]  чтобы найти fn-1,
[39:28.000 --> 39:30.000]  мне достаточно будет возвестить как-то быстро
[39:30.000 --> 39:32.000]  вот эту матрицу в ноль на первой степени,
[39:32.000 --> 39:34.000]  посчитать от всей значения по мобиле грамма.
[39:34.000 --> 39:36.000]  Ну, и потом может столбец f1 в ноль.
[39:36.000 --> 39:38.000]  Потому что fn в ноль в ноль не единицы.
[39:38.000 --> 39:40.000]  Но давай здесь запишу.
[39:42.000 --> 39:44.000]  Вот.
[39:44.000 --> 39:46.000]  Результат у меня будет вот такой.
[39:46.000 --> 39:48.000]  Значит, чтобы найти начало типа нача,
[39:48.000 --> 39:50.000]  мне нужно просто вот эту матрицу
[39:50.000 --> 39:52.000]  быстро всех возвестить.
[39:52.000 --> 39:54.000]  Окей?
[39:54.000 --> 39:56.000]  Хорошо.
[40:02.000 --> 40:04.000]  Она нам не поможет скорее,
[40:04.000 --> 40:06.000]  потому что вот тут я когда писал,
[40:06.000 --> 40:08.000]  там есть явная формула
[40:08.000 --> 40:10.000]  через n степень золотого сечения.
[40:10.000 --> 40:12.000]  Но смотрите.
[40:12.000 --> 40:14.000]  У меня есть ли вы вот это число как эффективно
[40:14.000 --> 40:16.000]  возвестить в степень?
[40:16.000 --> 40:18.000]  Один плюс торминский по баллам.
[40:18.000 --> 40:20.000]  Мы его даже представить не можем точно.
[40:20.000 --> 40:22.000]  Мы можем его представить как бесценечную
[40:22.000 --> 40:24.000]  дистичную дровь
[40:24.000 --> 40:26.000]  и возвестить в степень с какой-то точностью.
[40:26.000 --> 40:28.000]  Но непонятно с какой точностью.
[40:30.000 --> 40:32.000]  Да, и там придется как-то округлять.
[40:32.000 --> 40:34.000]  В общем, непонятно.
[40:34.000 --> 40:36.000]  То есть в этой явной формуле
[40:36.000 --> 40:38.000]  есть воздействие степень дробного числа,
[40:38.000 --> 40:40.000]  национального.
[40:40.000 --> 40:42.000]  И что с ним делать, не очень понятно.
[40:42.000 --> 40:44.000]  А там с матрицами все хорошо.
[40:44.000 --> 40:46.000]  У нас все численное.
[40:46.000 --> 40:48.000]  Все будет замечательно.
[40:48.000 --> 40:50.000]  Осталось научиться возвестить матрицу в степень
[40:50.000 --> 40:52.000]  быстро.
[40:54.000 --> 40:56.000]  Это делается следующим образом.
[41:02.000 --> 41:04.000]  Пусть нужно найти
[41:04.000 --> 41:06.000]  а в степени m
[41:06.000 --> 41:08.000]  по модулю m.
[41:08.000 --> 41:10.000]  То есть все значения в матрице
[41:10.000 --> 41:12.000]  надо брать по модулю m.
[41:14.000 --> 41:16.000]  А это какая-то квадратная матрица, скажем,
[41:16.000 --> 41:18.000]  k на k.
[41:20.000 --> 41:22.000]  Матрица k на k.
[41:22.000 --> 41:24.000]  Тогда есть следующие
[41:24.000 --> 41:26.000]  простые соотношения.
[41:26.000 --> 41:28.000]  Во-первых, если n нечетно,
[41:28.000 --> 41:30.000]  то можно сказать, что av
[41:30.000 --> 41:32.000]  на это просто a на av минус 1.
[41:32.000 --> 41:34.000]  Если n нечетно.
[41:36.000 --> 41:38.000]  А если оно четно, то давайте
[41:38.000 --> 41:40.000]  мы возведем av в степень сначала m пополам,
[41:40.000 --> 41:42.000]  а потом возведем в квадрат.
[41:44.000 --> 41:46.000]  Если n нечетно.
[41:48.000 --> 41:50.000]  И на этом можно построить
[41:50.000 --> 41:52.000]  очень простой рекурсивный алгоритм.
[41:52.000 --> 41:54.000]  Чтобы посчитать в какой-то степени матрицы,
[41:54.000 --> 41:56.000]  точнее n степени матрицы,
[41:56.000 --> 41:58.000]  то если оно нечетно, то мы просто
[41:58.000 --> 42:00.000]  уменьшаем n на единичку и рекурсивно
[42:00.000 --> 42:02.000]  вычисляем av на n минус 1,
[42:02.000 --> 42:04.000]  уменьшаем ответ на a.
[42:04.000 --> 42:06.000]  Либо если n четно, то мы можем
[42:06.000 --> 42:08.000]  поделить его пополам,
[42:08.000 --> 42:10.000]  рекурсивно найти av в степень пополам
[42:10.000 --> 42:12.000]  и возвести в квадрат.
[42:12.000 --> 42:14.000]  Но понятно, что вот здесь
[42:14.000 --> 42:16.000]  возвести в квадрат
[42:16.000 --> 42:18.000]  это сильно проще, чем
[42:18.000 --> 42:20.000]  найти вот эту штуку
[42:20.000 --> 42:22.000]  и там на что-то еще умножать.
[42:22.000 --> 42:24.000]  То есть когда мы знаем этот результат,
[42:24.000 --> 42:26.000]  то знаем вот это,
[42:26.000 --> 42:28.000]  то можно получить это
[42:28.000 --> 42:30.000]  вот.
[42:30.000 --> 42:32.000]  Получится у нас рекурсивный алгоритм.
[42:36.000 --> 42:38.000]  За?
[42:38.000 --> 42:40.000]  Какая будет эта симпозиция?
[42:40.000 --> 42:42.000]  Скажите мне, пожалуйста.
[42:46.000 --> 42:48.000]  Я хочу написать k в кубе лвн,
[42:50.000 --> 42:52.000]  потому что да,
[42:52.000 --> 42:54.000]  шагов в рекурсе у меня будут
[42:54.000 --> 42:56.000]  в алгоритмическое количество,
[42:56.000 --> 42:58.000]  на каждом шаге у меня либо n
[42:58.000 --> 43:00.000]  из нечетного становится черным,
[43:00.000 --> 43:02.000]  потом 9 попало, либо оно сразу 9 попало.
[43:02.000 --> 43:04.000]  Тогда, конечно, глубина моего спуска
[43:04.000 --> 43:06.000]  она ограничена
[43:06.000 --> 43:08.000]  двумя алгоритмами, двоичными,
[43:08.000 --> 43:10.000]  потому что на каждом втором шаге
[43:10.000 --> 43:12.000]  я делил n пополам,
[43:12.000 --> 43:14.000]  но на каждом шаге рекурса
[43:14.000 --> 43:16.000]  я еще либо умножаю результат на a,
[43:16.000 --> 43:18.000]  либо возвышу результат в квадрат.
[43:18.000 --> 43:20.000]  То есть по сути я умножаю 2 градуса на k.
[43:20.000 --> 43:22.000]  Но это является заказом.
[43:22.000 --> 43:24.000]  Поэтому если a достаточно большая,
[43:24.000 --> 43:26.000]  то это значительный склад,
[43:26.000 --> 43:28.000]  и его пренеберегать не стоит.
[43:28.000 --> 43:30.000]  Вот, в общем-то,
[43:30.000 --> 43:32.000]  такой несложный алгоритм
[43:32.000 --> 43:34.000]  за k в кубе лвн.
[43:34.000 --> 43:36.000]  Ну и замечу,
[43:36.000 --> 43:38.000]  что так можно воздействовать
[43:38.000 --> 43:40.000]  не только матрицу,
[43:40.000 --> 43:42.000]  но и любые числа.
[43:42.000 --> 43:44.000]  Если у вас будет число a,
[43:44.000 --> 43:46.000]  вы его хотите почитать в степени лвн,
[43:46.000 --> 43:48.000]  то работает то же самое,
[43:48.000 --> 43:50.000]  но здесь будет просто алгоритмическая симпозиция,
[43:50.000 --> 43:52.000]  а у вас число самостоятельно умножается.
[43:56.000 --> 43:58.000]  Ну и вот здесь,
[43:58.000 --> 44:00.000]  давайте еще отмечу,
[44:00.000 --> 44:02.000]  что когда я беру по модулю,
[44:02.000 --> 44:04.000]  мне нужно все умножения,
[44:04.000 --> 44:06.000]  воздействия в квадрат,
[44:06.000 --> 44:08.000]  делать по модулю,
[44:08.000 --> 44:10.000]  чтобы никогда не переполнялся тип,
[44:10.000 --> 44:12.000]  не нужно было делать длинную рифметику,
[44:12.000 --> 44:14.000]  я просто всегда,
[44:14.000 --> 44:16.000]  когда возникает какая-то сложная операция,
[44:16.000 --> 44:18.000]  я ее беру по модуле m,
[44:18.000 --> 44:20.000]  и здесь я умею решать задачу за логер,
[44:20.000 --> 44:22.000]  потому что мне нужно вывести матрицу
[44:22.000 --> 44:24.000]  2 на 2 в степени минус 1,
[44:24.000 --> 44:26.000]  и это делается за время,
[44:26.000 --> 44:28.000]  что в 2 кубе множество логер,
[44:28.000 --> 44:30.000]  и потом может быть вот эта матрица,
[44:30.000 --> 44:32.000]  которая получится,
[44:32.000 --> 44:34.000]  на отбой столбец 1 на 1,
[44:34.000 --> 44:36.000]  тем самым я получу даже не только фн,
[44:36.000 --> 44:38.000]  но и фн минус 1,
[44:38.000 --> 44:40.000]  я сделаю больший процент задач,
[44:40.000 --> 44:42.000]  я найду не только одну числу,
[44:42.000 --> 44:44.000]  но и 2 соседних,
[44:44.000 --> 44:46.000]  фн и фн минус 1.
[44:46.000 --> 44:48.000]  Так, хорошо.
[44:48.000 --> 44:50.000]  Ну, на самом деле,
[44:50.000 --> 44:52.000]  можно сказать, что просто фн
[44:52.000 --> 44:54.000]  на меня искать не получится,
[44:54.000 --> 44:56.000]  то есть если я не буду писать такой столбец,
[44:56.000 --> 44:58.000]  а просто буду пытаться высчитывать
[44:58.000 --> 45:00.000]  фн и фн,
[45:00.000 --> 45:02.000]  то у меня ничего не получится,
[45:02.000 --> 45:04.000]  у меня не получится решить задачу,
[45:04.000 --> 45:06.000]  найти только f1,
[45:06.000 --> 45:08.000]  а фн минус 1 не находить,
[45:08.000 --> 45:10.000]  мне придется в мой столбец добавлять
[45:10.000 --> 45:12.000]  фн минус 1,
[45:12.000 --> 45:14.000]  потому что иначе что получится?
[45:16.000 --> 45:18.000]  Если я попробую как-то фн
[45:18.000 --> 45:20.000]  выразить домножением чего-то
[45:20.000 --> 45:22.000]  на матрице,
[45:22.000 --> 45:24.000]  ну значит это столб,
[45:24.000 --> 45:26.000]  нужно иметь такой же вид,
[45:26.000 --> 45:28.000]  чтобы оно перекурсивно также расписывается,
[45:28.000 --> 45:30.000]  если я фн расписываю через фн минус 1,
[45:30.000 --> 45:32.000]  фн минус 2,
[45:32.000 --> 45:34.000]  фн минус 1 через фн минус 2 и так далее,
[45:34.000 --> 45:36.000]  ну понятно, что фн и фн минус 1
[45:36.000 --> 45:38.000]  я не выключу,
[45:38.000 --> 45:40.000]  я не беру такое выражение,
[45:40.000 --> 45:42.000]  мне нужно знать фн минус 2,
[45:42.000 --> 45:44.000]  поэтому если здесь есть фн минус 2,
[45:44.000 --> 45:46.000]  то фн минус 1 еще добавляю фн минус 1,
[45:46.000 --> 45:48.000]  вот и так далее,
[45:48.000 --> 45:50.000]  получается тот вид матрицы,
[45:50.000 --> 45:52.000]  который там справа лежит.
[45:52.000 --> 45:54.000]  Кажется,
[45:54.000 --> 45:56.000]  можно домножить
[45:56.000 --> 45:58.000]  на соответствующую строку столбец,
[45:58.000 --> 46:00.000]  чтобы
[46:00.000 --> 46:02.000]  был только верхний элемент
[46:02.000 --> 46:04.000]  из какого-то столбца матрицы
[46:04.000 --> 46:06.000]  в матрицу 1 на 1.
[46:06.000 --> 46:08.000]  Не понял.
[46:08.000 --> 46:10.000]  В финальном выражении
[46:10.000 --> 46:12.000]  можно домножить на
[46:12.000 --> 46:14.000]  ну да, можно домножить на матрицу,
[46:14.000 --> 46:16.000]  которая просто
[46:16.000 --> 46:18.000]  верхний элемент столбца нам вылез,
[46:18.000 --> 46:20.000]  то есть
[46:20.000 --> 46:22.000]  есть матрица, домноженная,
[46:22.000 --> 46:24.000]  которая столбец, мы получаем просто
[46:24.000 --> 46:26.000]  первый элемент столбца,
[46:26.000 --> 46:28.000]  то есть слишком можно.
[46:28.000 --> 46:30.000]  Я про то, что да,
[46:30.000 --> 46:32.000]  я про то, что в твоем выражении
[46:32.000 --> 46:34.000]  скорее нужно две вычитать.
[46:34.000 --> 46:36.000]  Так, хорошо.
[46:36.000 --> 46:38.000]  Хорошо, мы это сделали.
[46:38.000 --> 46:40.000]  Вот, ну и давайте еще
[46:40.000 --> 46:42.000]  какой-нибудь пример
[46:42.000 --> 46:44.000]  аналогичного вида.
[46:44.000 --> 46:46.000]  Главное, чтобы найти
[46:46.000 --> 46:48.000]  значение конфликтуемки
[46:48.000 --> 46:50.000]  в какой-нибудь точке.
[46:50.000 --> 46:52.000]  Например, ну я
[46:52.000 --> 46:54.000]  от молодыши что-нибудь напишу, пусть.
[46:54.000 --> 46:56.000]  А 0, а 1, а 2
[46:56.000 --> 46:58.000]  как это число?
[47:00.000 --> 47:02.000]  И я знаю,
[47:02.000 --> 47:04.000]  и я знаю выражение для аяного,
[47:04.000 --> 47:06.000]  что это какая-нибудь там
[47:06.000 --> 47:08.000]  ленинная комбинация
[47:08.000 --> 47:10.000]  нескольких предыдущих слагаемых,
[47:10.000 --> 47:12.000]  нескольких предыдущих чинов
[47:12.000 --> 47:14.000]  последовательностей.
[47:14.000 --> 47:16.000]  Там скажем 3, а-1,
[47:16.000 --> 47:18.000]  минус 4,
[47:18.000 --> 47:20.000]  а-2,
[47:20.000 --> 47:22.000]  плюс а-3,
[47:22.000 --> 47:24.000]  плюс 1.
[47:24.000 --> 47:26.000]  Вот что-нибудь такое хочу сделать.
[47:26.000 --> 47:28.000]  Тогда скажите, пожалуйста,
[47:28.000 --> 47:30.000]  как мне поступить вот в том же стиле,
[47:30.000 --> 47:32.000]  какой столбец, вот здесь надо написать,
[47:32.000 --> 47:34.000]  чтобы был выразлен
[47:34.000 --> 47:36.000]  через аналогичный столбец предыдущего слоя.
[47:36.000 --> 47:38.000]  И соответственно, какую матчу надо дам.
[47:44.000 --> 47:46.000]  4, правда, и что мы тут храним в столбце?
[48:00.000 --> 48:02.000]  а-1, а-1, а-1,
[48:02.000 --> 48:04.000]  а-2, а-3,
[48:04.000 --> 48:06.000]  а-4,
[48:06.000 --> 48:08.000]  все верно, да?
[48:10.000 --> 48:12.000]  Давайте вот такой столбец
[48:12.000 --> 48:14.000]  вещать через аналогичный предыдущий столбец.
[48:22.000 --> 48:24.000]  Последний элемент столца будет единица.
[48:24.000 --> 48:26.000]  Выглядит супер тупо, конечно,
[48:26.000 --> 48:28.000]  вычислять значение единицы
[48:28.000 --> 48:30.000]  столбец, ну, чего поделать.
[48:30.000 --> 48:32.000]  Зато получится.
[48:32.000 --> 48:34.000]  Ну чего, напишем, значит,
[48:34.000 --> 48:36.000]  мне нужно взять на столбце 3,
[48:36.000 --> 48:38.000]  минус 4, единицу единицу,
[48:38.000 --> 48:40.000]  потому что это 3 на вот это,
[48:40.000 --> 48:42.000]  минус 4 на вот это, плюс 1 на вот это,
[48:42.000 --> 48:44.000]  плюс 1 на вот это.
[48:44.000 --> 48:46.000]  Дальше здесь будет такая строка,
[48:46.000 --> 48:48.000]  такая строка,
[48:48.000 --> 48:50.000]  и вот такая строка.
[48:50.000 --> 48:52.000]  Похоже, правда?
[48:52.000 --> 48:54.000]  Например, единица это 0,
[48:54.000 --> 48:56.000]  плюс 0, плюс 0, плюс 1.
[48:56.000 --> 48:58.000]  Все, получается, тоже значение единицы.
[48:58.000 --> 49:00.000]  Ну и соответственно,
[49:00.000 --> 49:02.000]  если я хочу вырызать через начальный столбец,
[49:02.000 --> 49:04.000]  который вот на 0,
[49:04.000 --> 49:06.000]  1, а-2,
[49:06.000 --> 49:08.000]  тогда мне нужно эту матчу возле степи,
[49:08.000 --> 49:10.000]  небольшую.
[49:14.000 --> 49:16.000]  Тоже, видимо, минус первая.
[49:16.000 --> 49:18.000]  Здесь будет
[49:18.000 --> 49:20.000]  а-2,
[49:20.000 --> 49:22.000]  а-1,
[49:22.000 --> 49:24.000]  а-0, единица.
[49:24.000 --> 49:26.000]  Ну и опять, у меня есть
[49:26.000 --> 49:28.000]  рекурсия на логарифм, который за логарифм
[49:28.000 --> 49:30.000]  от вот этого умножит на куб размера матрицы,
[49:30.000 --> 49:32.000]  то есть за 4 в кубе умножен на логарифм,
[49:32.000 --> 49:34.000]  находит вот этого матрицу
[49:34.000 --> 49:36.000]  по какому-то данному модулю,
[49:36.000 --> 49:38.000]  м,
[49:38.000 --> 49:40.000]  и потом надо будет просто их переноть,
[49:40.000 --> 49:42.000]  чтобы получить вот эту значение а.
[49:42.000 --> 49:44.000]  Вот,
[49:44.000 --> 49:46.000]  вот,
[49:46.000 --> 49:48.000]  вот,
[49:48.000 --> 49:50.000]  вот,
[49:50.000 --> 49:52.000]  вот,
[49:52.000 --> 49:54.000]  вот.
[50:00.000 --> 50:02.000]  Окей.
[50:02.000 --> 50:04.000]  Так, ну собственно, почему это вообще про динамику?
[50:04.000 --> 50:06.000]  Ну потому что можно, значит,
[50:06.000 --> 50:08.000]  было бы решать как-нибудь по дуберия
[50:08.000 --> 50:10.000]  за t,
[50:10.000 --> 50:12.000]  за t, за t.
[50:12.000 --> 50:14.000]  Даже можно сказать, за линейное время,
[50:14.000 --> 50:16.000]  ну можно просто, если у вас есть первые 3 значения,
[50:16.000 --> 50:18.000]  то можем из них выразить
[50:18.000 --> 50:20.000]  а-3, потом а-4,
[50:20.000 --> 50:22.000]  ну и так далее,
[50:22.000 --> 50:24.000]  то есть просто из этой формулы можно
[50:24.000 --> 50:26.000]  за линейное время простейшей динамикой,
[50:26.000 --> 50:28.000]  то есть завести массив длины n,
[50:28.000 --> 50:30.000]  и выражать каждое значение через 3 предыдущих вот в этой форму.
[50:30.000 --> 50:32.000]  То есть это как простейший динамик.
[50:32.000 --> 50:34.000]  Использовать по счёту
[50:34.000 --> 50:36.000]  числа через несколько предыдущих.
[50:36.000 --> 50:38.000]  Вот, но её можно оптимизировать
[50:38.000 --> 50:40.000]  таким образом возле а.
[50:50.000 --> 50:52.000]  Так, мы сейчас рассмотрим ещё пример
[50:52.000 --> 50:54.000]  задачи, которые можно
[50:54.000 --> 50:56.000]  решить с помощью вот этой вот апутехники.
[50:56.000 --> 50:58.000]  То есть это количество путей
[51:00.000 --> 51:02.000]  в динамику.
[51:06.000 --> 51:08.000]  Задача такая, у вас есть
[51:08.000 --> 51:10.000]  один пункт,
[51:10.000 --> 51:12.000]  который называется
[51:12.000 --> 51:14.000]  а-1,
[51:14.000 --> 51:16.000]  а-2,
[51:16.000 --> 51:18.000]  а-3,
[51:18.000 --> 51:20.000]  задача такая, у вас есть
[51:20.000 --> 51:22.000]  вот этот граф, давайте считаем, что ориентированный,
[51:22.000 --> 51:24.000]  и нам нужно узнать,
[51:24.000 --> 51:26.000]  сколько есть путей длины ровно k
[51:26.000 --> 51:28.000]  из u в v.
[51:30.000 --> 51:32.000]  Найти
[51:32.000 --> 51:34.000]  число путей
[51:34.000 --> 51:36.000]  из u в v
[51:36.000 --> 51:38.000]  длины ровно k.
[51:42.000 --> 51:44.000]  То есть граф ориентированный, то есть
[51:44.000 --> 51:46.000]  за каждый шаг проходит какое-то ребро,
[51:46.000 --> 51:48.000]  то есть из u сначала попали в какую-то вышину,
[51:48.000 --> 51:50.000]  потом из неё куда-то ещё перешли, и так далее,
[51:50.000 --> 51:52.000]  сделали ровно k переходов,
[51:52.000 --> 51:54.000]  и вам нужно очутиться в v. Вопрос, сколько
[51:54.000 --> 51:56.000]  способов у вас есть это сделать?
[51:56.000 --> 51:58.000]  Что?
[51:58.000 --> 52:00.000]  Да, можно, никаких ограничений
[52:00.000 --> 52:02.000]  на повторное посещение нет.
[52:04.000 --> 52:06.000]  Вот, если бы были, то
[52:06.000 --> 52:08.000]  было бы сильно-сильно сложно.
[52:10.000 --> 52:12.000]  Значит, здесь я утверждаю следующее.
[52:12.000 --> 52:14.000]  Пусть m это максимально
[52:14.000 --> 52:16.000]  высокая графа.
[52:20.000 --> 52:22.000]  Матрица смежности
[52:22.000 --> 52:24.000]  с графом.
[52:24.000 --> 52:26.000]  То есть это такая матрица n на n,
[52:26.000 --> 52:28.000]  где значение
[52:28.000 --> 52:30.000]  элементов этой житой клетки
[52:30.000 --> 52:32.000]  этой единицей, если есть переход из fg
[52:32.000 --> 52:34.000]  и нолик, если нет.
[52:38.000 --> 52:40.000]  Мы считаем, что из вершины можно
[52:40.000 --> 52:42.000]  из вершины перейти. В смысле
[52:42.000 --> 52:44.000]  стоять на месте?
[52:44.000 --> 52:46.000]  Но если есть петля, то можно, если нет, то нельзя.
[52:46.000 --> 52:48.000]  То есть у нас 2 петли.
[52:48.000 --> 52:50.000]  В принципе, да, ничего не мешает,
[52:50.000 --> 52:52.000]  то есть это ничему не мешает.
[52:52.000 --> 52:54.000]  То есть m или ж равно
[52:54.000 --> 52:56.000]  единица, если
[52:56.000 --> 52:58.000]  есть
[52:58.000 --> 53:00.000]  едро из ж.
[53:02.000 --> 53:04.000]  И ноль иначе.
[53:06.000 --> 53:08.000]  Поскольку граф ориентированный,
[53:08.000 --> 53:10.000]  то некаких ограничений
[53:10.000 --> 53:12.000]  на какую-нибудь симметричность.
[53:12.000 --> 53:14.000]  То есть не обязательно, если есть едро из ж, то есть
[53:14.000 --> 53:16.000]  едро из ж и, такого ограничения нет.
[53:16.000 --> 53:18.000]  Ну и петли, в принципе, тоже никто
[53:18.000 --> 53:20.000]  не заключает. Возможно, можно
[53:20.000 --> 53:22.000]  пройтись по петле и остаться
[53:22.000 --> 53:24.000]  в вершинке, пройдя
[53:24.000 --> 53:26.000]  как бы одну ребро. Петли, это когда на главной
[53:26.000 --> 53:28.000]  диагонали стоят единицы, то есть есть вершинки,
[53:28.000 --> 53:30.000]  можно перейти в себя за один шаг.
[53:40.000 --> 53:42.000]  Ну тогда, верно, следующее.
[53:42.000 --> 53:44.000]  Я утверждаю, что если я возведу матрицу
[53:44.000 --> 53:46.000]  в карту степени
[53:46.000 --> 53:48.000]  и посмотрю на
[53:48.000 --> 53:50.000]  ячейку из ж,
[53:50.000 --> 53:52.000]  то это будет с точности то количество,
[53:52.000 --> 53:54.000]  которое мне нужно.
[53:54.000 --> 53:56.000]  Это в точности число путей из ж длины
[53:56.000 --> 53:58.000]  ровно там.
[54:00.000 --> 54:02.000]  Число путей из ж
[54:02.000 --> 54:04.000]  длины ровно там.
[54:04.000 --> 54:06.000]  Число путей из ж
[54:06.000 --> 54:08.000]  длины ровно там.
[54:08.000 --> 54:10.000]  Число путей из ж
[54:10.000 --> 54:12.000]  длины ровно там.
[54:20.000 --> 54:22.000]  Вот, ну давайте докажем
[54:22.000 --> 54:24.000]  индукции по к.
[54:28.000 --> 54:30.000]  В к равной единице очевидно,
[54:30.000 --> 54:32.000]  потому что когда
[54:32.000 --> 54:34.000]  в к равной единице мы получаем
[54:34.000 --> 54:36.000]  м в первой степени, то есть матрицу смежности,
[54:36.000 --> 54:38.000]  в матрице смежности
[54:38.000 --> 54:40.000]  содержимые ячейки из ж
[54:40.000 --> 54:42.000]  это единицы, если есть путь из ж длины 1,
[54:42.000 --> 54:44.000]  ну то есть если есть зебро,
[54:44.000 --> 54:46.000]  и нолик, если нет путь.
[54:46.000 --> 54:48.000]  Поэтому база очевидна, просто матрица смежности
[54:48.000 --> 54:50.000]  она отражает, ну по сути, количество путей
[54:50.000 --> 54:52.000]  за один шаг, можно перейти или нельзя.
[54:54.000 --> 54:56.000]  Начну переход.
[54:56.000 --> 54:58.000]  Пусть верно для k-1.
[55:00.000 --> 55:04.000]  Верно для k-1.
[55:04.000 --> 55:06.000]  Тогда давайте поймем, что такое
[55:06.000 --> 55:08.000]  м в степени k в точке ежи.
[55:10.000 --> 55:12.000]  Вообще, что такое какая степень матрицы?
[55:12.000 --> 55:14.000]  Это, например, м в первой степени матрицы,
[55:14.000 --> 55:16.000]  у нас на k-1.
[55:18.000 --> 55:22.000]  М на м в степени k-1 в клетке ежи.
[55:24.000 --> 55:26.000]  Значит так, сейчас у меня есть произведение матрицы,
[55:26.000 --> 55:28.000]  и я хочу посчитать, чему равно значение
[55:28.000 --> 55:30.000]  в клетке ежи, но я знаю
[55:30.000 --> 55:32.000]  формулу для
[55:32.000 --> 55:34.000]  произведения матрицы,
[55:34.000 --> 55:36.000]  чему равна какая-то клетка.
[55:36.000 --> 55:38.000]  Это будет сумма,
[55:38.000 --> 55:40.000]  не окончили буквы.
[55:40.000 --> 55:42.000]  Пусть будет с, да и нибудь.
[55:44.000 --> 55:46.000]  М и д д
[55:48.000 --> 55:50.000]  умножить на м в степени k-1
[55:50.000 --> 55:52.000]  в клетке ежи.
[55:54.000 --> 55:56.000]  Правильно верно?
[55:58.000 --> 56:00.000]  Хорошо.
[56:00.000 --> 56:02.000]  В этой картинке можно рисовать такую.
[56:02.000 --> 56:04.000]  Есть вершинка и, есть вершинка ж,
[56:04.000 --> 56:06.000]  есть вершинка т.
[56:06.000 --> 56:08.000]  Тогда что здесь написано?
[56:08.000 --> 56:10.000]  Это я сначала пытаюсь попасть из и в т за один шаг.
[56:12.000 --> 56:14.000]  И потом из т в ж закануться один шаг.
[56:16.000 --> 56:18.000]  Ну и понятно, что если я переносу эти количества,
[56:18.000 --> 56:20.000]  то я получу всевозможные куди
[56:20.000 --> 56:22.000]  из и в ж длины ровно k,
[56:22.000 --> 56:24.000]  которые проходят на первом шаге через т.
[56:24.000 --> 56:26.000]  И потом нужно будет просуммировать а т,
[56:26.000 --> 56:28.000]  чтобы получить общее количество.
[56:28.000 --> 56:30.000]  И еще раз?
[56:30.000 --> 56:32.000]  Не обязательно.
[56:34.000 --> 56:36.000]  Ну типа это не важно.
[56:36.000 --> 56:38.000]  Если у нас есть петля,
[56:38.000 --> 56:40.000]  то может быть таковски я на первом шаге делаю петли,
[56:40.000 --> 56:42.000]  а потом делаю кубинный каменный сеттинг.
[56:42.000 --> 56:44.000]  И нет проблем с этим.
[56:44.000 --> 56:46.000]  То есть возможно т равно и,
[56:46.000 --> 56:48.000]  тогда мы просто делаем.
[56:48.000 --> 56:50.000]  Стоим на месте, это будет одно лимо.
[56:50.000 --> 56:52.000]  И потом еще ищем кубинный ровный каменный сеттинг.
[56:52.000 --> 56:54.000]  Поэтому это ничему не мешает.
[56:54.000 --> 56:56.000]  Вот. Ну и еще раз.
[56:56.000 --> 56:58.000]  Там мы получили такую формулу.
[56:58.000 --> 57:00.000]  И поняли, что если вот это отображает
[57:00.000 --> 57:02.000]  количество путей длины 11 в т,
[57:02.000 --> 57:04.000]  ну по предположению индукции,
[57:04.000 --> 57:06.000]  вот это количество путей длины ровно k,
[57:06.000 --> 57:08.000]  не из и из д в ж.
[57:08.000 --> 57:10.000]  Тогда понятно, что если я их переносу,
[57:10.000 --> 57:12.000]  то я получу количество путей из и в ж длины ровно k,
[57:12.000 --> 57:14.000]  которые проходят на первом шаге,
[57:14.000 --> 57:16.000]  который идет в т.
[57:16.000 --> 57:18.000]  Затем если я просуммирую это по всем т,
[57:18.000 --> 57:20.000]  я получу всевозможные пути,
[57:20.000 --> 57:22.000]  они все упущутся ровно по одному рам.
[57:22.000 --> 57:24.000]  Приказать.
[57:24.000 --> 57:26.000]  То есть это действительно вот эта вот штука
[57:26.000 --> 57:28.000]  в тожке и в ж.
[57:28.000 --> 57:30.000]  Это как раз количество тех самых путей длины ровно k.
[57:32.000 --> 57:34.000]  Значит, чтобы решить задачу,
[57:34.000 --> 57:36.000]  мне нужно просто возвести эту матуцу в степень,
[57:36.000 --> 57:38.000]  возвести матуцу в степень так,
[57:38.000 --> 57:40.000]  какой нужно, ровно k,
[57:40.000 --> 57:42.000]  ну и вывести там какой-то элемент.
[57:46.000 --> 57:48.000]  Да, все верно, все верно.
[57:48.000 --> 57:50.000]  Я просто скажу, значит,
[57:50.000 --> 57:52.000]  на всякий случай давайте считаем,
[57:52.000 --> 57:54.000]  что мы считаем все по модулю k.
[58:00.000 --> 58:02.000]  Чтобы опять, да,
[58:02.000 --> 58:04.000]  поскольку когда мы возводим матуцу в степень,
[58:04.000 --> 58:06.000]  там будет куча единиц, они будут перемножаться
[58:06.000 --> 58:08.000]  и складываться очень-очень много раз,
[58:08.000 --> 58:10.000]  и возможно здесь будут слишком большие числа,
[58:10.000 --> 58:12.000]  чтобы про это не париться,
[58:12.000 --> 58:14.000]  мы будем думать, что все литмичные операции
[58:14.000 --> 58:16.000]  занимают одну единицу времени, один такт.
[58:16.000 --> 58:18.000]  Это обеспечивается, например,
[58:18.000 --> 58:20.000]  мы все берем по модуле m.
[58:20.000 --> 58:22.000]  Да, значит, следующее замечание
[58:22.000 --> 58:24.000]  действительно про то, что
[58:24.000 --> 58:26.000]  можно было бы считать, что у нас не граф,
[58:26.000 --> 58:28.000]  а как это, мультиграф или что-то такое,
[58:28.000 --> 58:30.000]  тогда у нас бывают кратные ребра.
[58:30.000 --> 58:32.000]  То есть, например, если здесь я пису одни единицу,
[58:32.000 --> 58:34.000]  а когда есть много, скажем,
[58:34.000 --> 58:36.000]  ребр из NG,
[58:38.000 --> 58:40.000]  из NG может быть несколько ребр,
[58:40.000 --> 58:42.000]  и вот здесь я буду писать не единичку,
[58:42.000 --> 58:44.000]  а просто количество ребр между ними.
[58:44.000 --> 58:46.000]  То есть, просто им это же число ребр.
[58:46.000 --> 58:48.000]  А у меня здесь ничего не испортится.
[58:48.000 --> 58:50.000]  У меня по-прежнему m в первой степени
[58:50.000 --> 58:52.000]  это число путей длины 1,
[58:52.000 --> 58:54.000]  ну а дальше у меня в k-той
[58:54.000 --> 58:56.000]  ровно по тому же аргументу
[58:56.000 --> 58:58.000]  это количество путей длины ровно k,
[58:58.000 --> 59:00.000]  с учетом того, что у меня будет
[59:00.000 --> 59:02.000]  несколько разных ребр
[59:02.000 --> 59:04.000]  между одной и долей парой вершин.
[59:04.000 --> 59:06.000]  Поэтому вот здесь можно считать,
[59:06.000 --> 59:08.000]  что у меня может быть одни единицы,
[59:08.000 --> 59:10.000]  а просто число ребр, то есть могут быть кратные ребра,
[59:10.000 --> 59:12.000]  это ничего не противоречит.
[59:12.000 --> 59:14.000]  То есть, оказывается, это рекладывается доском.
[59:14.000 --> 59:22.000]  Да, у нас исходный граф не взвешен,
[59:22.000 --> 59:24.000]  то есть у нас нет.
[59:28.000 --> 59:30.000]  Типа число ребр с суммой длины ребр,
[59:30.000 --> 59:34.000]  число путей с суммой длины ребр ровно такое.
[59:44.000 --> 59:46.000]  Ну, не видно как, я не знаю.
[01:00:02.000 --> 01:00:04.000]  Думаю, что нельзя, это звучит...
[01:00:04.000 --> 01:00:06.000]  В общем, короче, думаю,
[01:00:06.000 --> 01:00:08.000]  что не получится даже никак это сделать нормально.
[01:00:10.000 --> 01:00:12.000]  Например, я не знаю.
[01:00:12.000 --> 01:00:14.000]  Итак, значит, следующая вещь,
[01:00:14.000 --> 01:00:16.000]  я хочу предложить, это найти
[01:00:16.000 --> 01:00:18.000]  схожую задачу, только теперь надо найти
[01:00:18.000 --> 01:00:20.000]  число путей длины не больше чем k.
[01:00:20.000 --> 01:00:28.000]  Найти число путей длины не больше k.
[01:00:30.000 --> 01:00:32.000]  Не в точности k, а вот не больше чем k.
[01:00:36.000 --> 01:00:40.000]  Так, есть идея, как решить такую задачу?
[01:00:40.000 --> 01:00:44.000]  У нас есть еще один эффективный вариант,
[01:00:44.000 --> 01:00:46.000]  сколько стоит матрица,
[01:00:46.000 --> 01:00:48.000]  ты скажешь, что это нулевой город, который...
[01:01:00.000 --> 01:01:02.000]  Да, мы сейчас так и сделаем.
[01:01:04.000 --> 01:01:06.000]  Да, а какие матрицы мы суммируем?
[01:01:10.000 --> 01:01:12.000]  Типа того, да, мы сейчас так и сделаем.
[01:01:12.000 --> 01:01:14.000]  А то, что вы сказали про введение
[01:01:14.000 --> 01:01:16.000]  как бы эффективной решения,
[01:01:16.000 --> 01:01:18.000]  то есть, как я понял, вашу идею,
[01:01:18.000 --> 01:01:20.000]  у вас есть граф, да, и...
[01:01:20.000 --> 01:01:22.000]  А, ну, непонятно, вам нужно
[01:01:22.000 --> 01:01:24.000]  попройти что-то потом сюда,
[01:01:24.000 --> 01:01:26.000]  и потом g как бы прийти, да?
[01:01:26.000 --> 01:01:28.000]  Да, просто так можно,
[01:01:28.000 --> 01:01:30.000]  но идея будет подведена несколько раз.
[01:01:30.000 --> 01:01:32.000]  Ну, в котором-то эффективно.
[01:01:32.000 --> 01:01:34.000]  Ну да, вот, хорошо,
[01:01:34.000 --> 01:01:36.000]  мне кажется, что можно доверить,
[01:01:36.000 --> 01:01:38.000]  но чуть-чуть больше надо готовить.
[01:01:38.000 --> 01:01:40.000]  Значит, действительно, ответ такой,
[01:01:40.000 --> 01:01:42.000]  значит, ответ следующий.
[01:01:42.000 --> 01:01:44.000]  Давайте мы сложим...
[01:01:44.000 --> 01:01:46.000]  Ну, я не...
[01:01:46.000 --> 01:01:48.000]  Возможно, и равно g,
[01:01:48.000 --> 01:01:50.000]  поэтому я буду складывать
[01:01:50.000 --> 01:01:52.000]  с ульевой степени.
[01:01:52.000 --> 01:01:54.000]  Давайте сложим все возможные
[01:01:54.000 --> 01:01:56.000]  в этой матрице
[01:01:56.000 --> 01:01:58.000]  и выведем содержимое
[01:01:58.000 --> 01:02:00.000]  и т.ж. течет.
[01:02:00.000 --> 01:02:02.000]  Потому что что такое
[01:02:02.000 --> 01:02:04.000]  подлинный в большем кадре?
[01:02:04.000 --> 01:02:06.000]  Это либо подлинный 1,
[01:02:06.000 --> 01:02:08.000]  когда у нас есть в этом матрице
[01:02:08.000 --> 01:02:10.000]  либо подлинный 0,
[01:02:10.000 --> 01:02:12.000]  либо 2, и тогда 3 пока.
[01:02:12.000 --> 01:02:14.000]  Если мы все эти матрицы сложим
[01:02:14.000 --> 01:02:16.000]  и выведем содержимое и т.ж.,
[01:02:16.000 --> 01:02:18.000]  то получится вот ровно то, что нужно.
[01:02:18.000 --> 01:02:20.000]  Получится, мы сейчас
[01:02:20.000 --> 01:02:22.000]  сделаем целый геймплей.
[01:02:22.000 --> 01:02:24.000]  А, ну я сейчас,
[01:02:24.000 --> 01:02:26.000]  ну да, да, да, все получится.
[01:02:26.000 --> 01:02:28.000]  Значит, первое соблазнство
[01:02:28.000 --> 01:02:30.000]  это следующее. У нас есть геометрическая прогрессия,
[01:02:30.000 --> 01:02:32.000]  давайте напишем форму
[01:02:32.000 --> 01:02:34.000]  геометрической прогрессии и что-нибудь сделаем.
[01:02:34.000 --> 01:02:38.000]  Я напишу, что это идея.
[01:02:38.000 --> 01:02:40.000]  То есть это на самом деле
[01:02:40.000 --> 01:02:42.000]  не решение, а только идея решения.
[01:02:44.000 --> 01:02:46.000]  Сейчас больше может быть
[01:02:46.000 --> 01:02:48.000]  не обратимая матрица.
[01:02:48.000 --> 01:02:50.000]  Именно так.
[01:02:50.000 --> 01:02:52.000]  Это я хочу сказать.
[01:02:52.000 --> 01:02:54.000]  Значит, если мы напишем форму для геометрической прогрессии,
[01:02:54.000 --> 01:02:56.000]  у нас получится что-то вот такое.
[01:03:00.000 --> 01:03:02.000]  Так, где есть единичная матрица
[01:03:02.000 --> 01:03:04.000]  такого же размера.
[01:03:04.000 --> 01:03:06.000]  Вот.
[01:03:06.000 --> 01:03:08.000]  И, как бы, тогда
[01:03:08.000 --> 01:03:10.000]  хотелось бы сказать следующее.
[01:03:10.000 --> 01:03:12.000]  Возьмем матрицу m, все пинка плюс 1, вычисляем единичную матрицу
[01:03:12.000 --> 01:03:14.000]  и делим на матрицу m-e.
[01:03:14.000 --> 01:03:16.000]  Вопрос, как выделить на эту матрицу,
[01:03:16.000 --> 01:03:18.000]  потому что иногда это невозможно сделать.
[01:03:18.000 --> 01:03:20.000]  А эта матрица может быть выраженной,
[01:03:20.000 --> 01:03:22.000]  и, соответственно, просто нельзя поделить.
[01:03:22.000 --> 01:03:24.000]  Ну да, ну в общем, нельзя делить на а.
[01:03:24.000 --> 01:03:26.000]  То есть это поделение, по сути, умножение на обратную,
[01:03:26.000 --> 01:03:28.000]  в эту матрицу может не быть обратной.
[01:03:32.000 --> 01:03:34.000]  Что?
[01:03:34.000 --> 01:03:36.000]  Если мы знаем какую сумму dk из m в карте,
[01:03:36.000 --> 01:03:38.000]  то мы можем узнать ее до двух кратче.
[01:03:38.000 --> 01:03:40.000]  Да-да, мы сейчас так и делаем.
[01:03:40.000 --> 01:03:42.000]  Значит, давайте я допишу, что вот это вот
[01:03:42.000 --> 01:03:44.000]  может быть необратимым.
[01:03:44.000 --> 01:03:46.000]  Поэтому вот такая идея не работает.
[01:03:48.000 --> 01:03:50.000]  И нам придется модифицировать тот наш алгоритм,
[01:03:50.000 --> 01:03:52.000]  который бинарно возводит матрицу в степени.
[01:03:52.000 --> 01:03:54.000]  При этом мы теперь будем не только степень узнавать,
[01:03:54.000 --> 01:03:56.000]  но и сумму первых степеней,
[01:03:56.000 --> 01:03:58.000]  первых нескольких степеней.
[01:04:02.000 --> 01:04:04.000]  Сделаем следующее.
[01:04:04.000 --> 01:04:06.000]  Пусть f, m, dk, d,
[01:04:06.000 --> 01:04:08.000]  это пара из двух матриц.
[01:04:08.000 --> 01:04:10.000]  Первая пусть будет m в карте,
[01:04:10.000 --> 01:04:12.000]  а вторая вот та самая сумма
[01:04:12.000 --> 01:04:14.000]  степеней от 0 до карты.
[01:04:14.000 --> 01:04:16.000]  m в 0, m в 1,
[01:04:16.000 --> 01:04:18.000]  и так далее m в карте.
[01:04:22.000 --> 01:04:24.000]  А вот эта сумма
[01:04:24.000 --> 01:04:26.000]  степени от 0 до карты.
[01:04:26.000 --> 01:04:28.000]  М в 0, m в 1,
[01:04:28.000 --> 01:04:30.000]  и так далее m в карте.
[01:04:32.000 --> 01:04:34.000]  То есть если мы раньше считали
[01:04:34.000 --> 01:04:36.000]  просто карту из степеней,
[01:04:36.000 --> 01:04:38.000]  то теперь мне нужна сумма вот этих вот первых
[01:04:38.000 --> 01:04:40.000]  степеней, ну точнее от 0 до карты.
[01:04:40.000 --> 01:04:42.000]  Вот тогда вопрос.
[01:04:42.000 --> 01:04:44.000]  Как выразить эту штуку
[01:04:44.000 --> 01:04:46.000]  через типа там f от m,
[01:04:46.000 --> 01:04:48.000]  k пополам?
[01:04:52.000 --> 01:04:54.000]  Так, сейчас.
[01:04:54.000 --> 01:04:56.000]  Тяжело, конечно, написать.
[01:04:58.000 --> 01:05:00.000]  Давайте я по-другому.
[01:05:02.000 --> 01:05:04.000]  Давайте это будет f первая
[01:05:04.000 --> 01:05:06.000]  от m, k.
[01:05:06.000 --> 01:05:08.000]  Ну короче, функция с двумя компонентами,
[01:05:08.000 --> 01:05:10.000]  мы на самом деле,
[01:05:10.000 --> 01:05:12.000]  если мы хотим это закодить,
[01:05:12.000 --> 01:05:14.000]  у нас будет просто функция, разучающая пару.
[01:05:14.000 --> 01:05:16.000]  Вот эта матрица и вот эта.
[01:05:16.000 --> 01:05:18.000]  Итак, что такое это f первая
[01:05:18.000 --> 01:05:20.000]  от m, k?
[01:05:20.000 --> 01:05:22.000]  Ну здесь все как обычно.
[01:05:22.000 --> 01:05:24.000]  Если k нечетно, то это просто
[01:05:24.000 --> 01:05:26.000]  f первая от m, k минус 1.
[01:05:26.000 --> 01:05:28.000]  Если четная, то мы выводим матрицу в квадрат.
[01:05:28.000 --> 01:05:30.000]  Вот так, если
[01:05:30.000 --> 01:05:32.000]  k нечетно
[01:05:34.000 --> 01:05:36.000]  и квадрат
[01:05:36.000 --> 01:05:38.000]  вот этой штуки,
[01:05:38.000 --> 01:05:40.000]  если k четко.
[01:05:40.000 --> 01:05:42.000]  Тут пока ничего нового.
[01:05:58.000 --> 01:06:00.000]  Что с f два?
[01:06:04.000 --> 01:06:06.000]  Если k нечетно,
[01:06:06.000 --> 01:06:08.000]  то можно, например, сделать следующее.
[01:06:08.000 --> 01:06:10.000]  Если k нечетно,
[01:06:10.000 --> 01:06:12.000]  то давайте мы отдельно посчитаем
[01:06:12.000 --> 01:06:14.000]  последнее спагами,
[01:06:14.000 --> 01:06:16.000]  рекурсивно найдем предыдущую сумму
[01:06:16.000 --> 01:06:18.000]  и добавим в той сумме вот это
[01:06:18.000 --> 01:06:20.000]  последнее спагами.
[01:06:20.000 --> 01:06:22.000]  То есть я сделаю следующее.
[01:06:22.000 --> 01:06:24.000]  f два от m, k минус 1
[01:06:24.000 --> 01:06:26.000]  плюс f один
[01:06:26.000 --> 01:06:28.000]  от m, k.
[01:06:30.000 --> 01:06:32.000]  То есть мы как бы сначала нашли
[01:06:32.000 --> 01:06:34.000]  к одной степени
[01:06:34.000 --> 01:06:36.000]  в нашей матрице, потом рекурсивно нашли
[01:06:36.000 --> 01:06:38.000]  вот эту вот сумму и добавили
[01:06:38.000 --> 01:06:40.000]  то спагами в конце.
[01:06:40.000 --> 01:06:42.000]  Есть ли конец?
[01:06:44.000 --> 01:06:46.000]  Значит, начнется оно черно,
[01:06:46.000 --> 01:06:48.000]  давайте я напишу, как это может выглядеть.
[01:06:50.000 --> 01:06:52.000]  То есть там будет где-то k пополам,
[01:06:52.000 --> 01:06:54.000]  k пополам плюс один,
[01:06:54.000 --> 01:06:56.000]  так далее.
[01:06:56.000 --> 01:06:58.000]  Пусть хочу.
[01:07:02.000 --> 01:07:04.000]  Тогда можно сгруппировать
[01:07:04.000 --> 01:07:06.000]  первую половину спагаемых
[01:07:06.000 --> 01:07:08.000]  и вторую половину спагаемых.
[01:07:10.000 --> 01:07:12.000]  Сейчас, сейчас, сейчас.
[01:07:20.000 --> 01:07:22.000]  Давайте я все-таки
[01:07:22.000 --> 01:07:24.000]  нулевой убью отсюда.
[01:07:24.000 --> 01:07:26.000]  С ним как-то неприятно получается.
[01:07:26.000 --> 01:07:28.000]  Потом я это еще добавлю в конце.
[01:07:28.000 --> 01:07:30.000]  Давайте вот просто сумму в первой касте
[01:07:30.000 --> 01:07:32.000]  меня и без нулевой.
[01:07:38.000 --> 01:07:40.000]  Вот так виноват.
[01:07:44.000 --> 01:07:46.000]  Вот, тогда будет приятней.
[01:07:46.000 --> 01:07:48.000]  Смотрите, я могу из этой второй скобки
[01:07:48.000 --> 01:07:50.000]  вынести я мкника пополам
[01:07:50.000 --> 01:07:52.000]  и после того, как это получится,
[01:07:52.000 --> 01:07:54.000]  слежим на первой скобке.
[01:07:54.000 --> 01:07:56.000]  Как раз с мкника пополам вынести
[01:07:56.000 --> 01:07:58.000]  я мкника первой, здесь я мкника второй,
[01:07:58.000 --> 01:08:00.000]  и тогда я мкника пополам.
[01:08:00.000 --> 01:08:02.000]  Поэтому здесь можно взять такое.
[01:08:02.000 --> 01:08:04.000]  Сначала я сумму первых
[01:08:04.000 --> 01:08:06.000]  как пополам степеней,
[01:08:06.000 --> 01:08:08.000]  потом нужно один разрядить вот это,
[01:08:08.000 --> 01:08:10.000]  а этому нужно мкника пополам.
[01:08:10.000 --> 01:08:12.000]  Ну, я буду взять линию сням адреса
[01:08:12.000 --> 01:08:14.000]  плюс мкника пополам.
[01:08:14.000 --> 01:08:16.000]  Согласен?
[01:08:16.000 --> 01:08:18.000]  Потому что здесь,
[01:08:18.000 --> 01:08:20.000]  ну, на сути, я выношу просто
[01:08:20.000 --> 01:08:22.000]  вот этот общий множитель,
[01:08:22.000 --> 01:08:24.000]  здесь умножается слева на е,
[01:08:24.000 --> 01:08:26.000]  а здесь умножается слева на мкопполок.
[01:08:28.000 --> 01:08:30.000]  Вот, поэтому что?
[01:08:30.000 --> 01:08:32.000]  Смотрите, а вот эта штука,
[01:08:32.000 --> 01:08:34.000]  это уже f2 от mкоппола.
[01:08:38.000 --> 01:08:40.000]  Е понятно, что такое единичная марка,
[01:08:40.000 --> 01:08:42.000]  тебе считать не нужно.
[01:08:42.000 --> 01:08:44.000]  А это f1 от mкоппола.
[01:08:46.000 --> 01:08:48.000]  Вот, и если я все равно рекурсивно считаю
[01:08:48.000 --> 01:08:50.000]  f1 от mкоппола, f2 от mкоппола,
[01:08:50.000 --> 01:08:52.000]  то потом я их могу вот так вот клеить,
[01:08:52.000 --> 01:08:54.000]  чтобы получить f2 от mкоппола.
[01:08:56.000 --> 01:08:58.000]  Поэтому формула здесь будет такая.
[01:08:58.000 --> 01:09:00.000]  f2 от mкоппола
[01:09:02.000 --> 01:09:04.000]  умножить на
[01:09:04.000 --> 01:09:06.000]  е плюс f1 от mкоппола.
[01:09:06.000 --> 01:09:08.000]  Здесь f1 от mкоппола.
[01:09:10.000 --> 01:09:12.000]  Здесь точно.
[01:09:18.000 --> 01:09:20.000]  Похоже?
[01:09:20.000 --> 01:09:22.000]  Хорошо.
[01:09:22.000 --> 01:09:24.000]  Вот, ну и все, получается, что
[01:09:24.000 --> 01:09:26.000]  опять то же самое, что если мне нужно,
[01:09:26.000 --> 01:09:28.000]  то есть еще раз, я пишу функцию f,
[01:09:28.000 --> 01:09:30.000]  которая означает пару из двух матов,
[01:09:30.000 --> 01:09:32.000]  левую компоненту вот этой пары правой,
[01:09:32.000 --> 01:09:34.000]  f1 и f2,
[01:09:34.000 --> 01:09:36.000]  то если k нечетно,
[01:09:36.000 --> 01:09:38.000]  то я запускаюсь от k-1
[01:09:40.000 --> 01:09:42.000]  и сначала нахожу
[01:09:42.000 --> 01:09:44.000]  вот эту бензебеника,
[01:09:44.000 --> 01:09:46.000]  потом использую эту вещь и использую то,
[01:09:46.000 --> 01:09:48.000]  что почти рекурсивно, нахожу f2, mk.
[01:09:48.000 --> 01:09:50.000]  Возвращаю f2. Если k четно,
[01:09:50.000 --> 01:09:52.000]  то я возвращаюсь с левской
[01:09:52.000 --> 01:09:54.000]  вот так пополам, возвожу
[01:09:54.000 --> 01:09:56.000]  первую компоненту в квадрат, получаю
[01:09:56.000 --> 01:09:58.000]  fкатой, затем вот такой комбинации
[01:09:58.000 --> 01:10:00.000]  получаю сумму
[01:10:00.000 --> 01:10:02.000]  первых кастепеней.
[01:10:02.000 --> 01:10:04.000]  Хорошо. Ну вот.
[01:10:04.000 --> 01:10:06.000]  Все. Получается, что
[01:10:06.000 --> 01:10:08.000]  ассимпозиция здесь
[01:10:08.000 --> 01:10:10.000]  будет такая же, потому что
[01:10:10.000 --> 01:10:12.000]  хотя бы на каждом втором шаге я делю как пополам,
[01:10:12.000 --> 01:10:14.000]  то есть если он нечетно, то я уменьшаю на один,
[01:10:14.000 --> 01:10:16.000]  а он стал четно делю пополам,
[01:10:16.000 --> 01:10:18.000]  если он исходно был исходно, то я сразу его делю пополам,
[01:10:18.000 --> 01:10:20.000]  а поэтому хотя бы каждые два шага
[01:10:20.000 --> 01:10:22.000]  надеются на два.
[01:10:22.000 --> 01:10:24.000]  Поэтому ассимпозиция будет такая же
[01:10:24.000 --> 01:10:26.000]  размер матрицы в кубе,
[01:10:26.000 --> 01:10:28.000]  пусть, например, в кубе,
[01:10:28.000 --> 01:10:30.000]  на лога.
[01:10:30.000 --> 01:10:32.000]  Логализм от показателя умножить
[01:10:32.000 --> 01:10:34.000]  на сложность вот тут
[01:10:34.000 --> 01:10:36.000]  возведения в квадрат, там у меня был
[01:10:36.000 --> 01:10:38.000]  возведение в квадрат, умножение на матрицу,
[01:10:38.000 --> 01:10:40.000]  тут сложение тоже умножение, но понять, что
[01:10:40.000 --> 01:10:42.000]  все эти грозы есть же
[01:10:42.000 --> 01:10:44.000]  ну за отвертку.
[01:10:44.000 --> 01:10:46.000]  Поэтому исходное значение тоже у нас решилось
[01:10:46.000 --> 01:10:48.000]  за fклок и kлок.
[01:10:48.000 --> 01:10:50.000]  Здесь я еще вот этот рем 0 удалил,
[01:10:50.000 --> 01:10:52.000]  ну вот смотрите, рем 0
[01:10:52.000 --> 01:10:54.000]  можно в конце просто всегда добавить,
[01:10:54.000 --> 01:10:56.000]  то есть если я знаю вот эту вот матрицу,
[01:10:56.000 --> 01:10:58.000]  то в конце добавить рем 0 это не очень сложно,
[01:10:58.000 --> 01:11:00.000]  это просто единичная матрица.
[01:11:00.000 --> 01:11:02.000]  Ее можно добавить в ответ.
[01:11:02.000 --> 01:11:04.000]  Я ее такое,
[01:11:04.000 --> 01:11:06.000]  она сильно выкинул, чтобы было проще считать ремку,
[01:11:06.000 --> 01:11:08.000]  но можно обратно ее вставить, чтобы найти
[01:11:08.000 --> 01:11:10.000]  ответ правильной.
[01:11:18.000 --> 01:11:20.000]  Вопросы?
[01:11:28.000 --> 01:11:30.000]  Хорошо.
[01:11:34.000 --> 01:11:36.000]  Так, тогда я хочу
[01:11:40.000 --> 01:11:42.000]  еще немножко переформулировать эту задачу.
[01:11:44.000 --> 01:11:46.000]  Значит нас спрашивают следующее,
[01:11:46.000 --> 01:11:48.000]  а есть ли
[01:11:48.000 --> 01:11:50.000]  хотя бы один путь
[01:11:52.000 --> 01:11:54.000]  из бифжи
[01:11:54.000 --> 01:11:56.000]  длины ровно k.
[01:12:00.000 --> 01:12:02.000]  То есть в прошлой задаче,
[01:12:02.000 --> 01:12:04.000]  мы нашли число путей
[01:12:04.000 --> 01:12:06.000]  длины ровно k, потом длины не больше
[01:12:06.000 --> 01:12:08.000]  чем k, а здесь у нас спрашивают,
[01:12:08.000 --> 01:12:10.000]  а есть ли он хотя бы один.
[01:12:10.000 --> 01:12:12.000]  Можно не считать число путей,
[01:12:12.000 --> 01:12:14.000]  а просто достаточно узнать,
[01:12:14.000 --> 01:12:16.000]  есть ли он хотя бы один или нет.
[01:12:16.000 --> 01:12:18.000]  То есть сравнить это, конечно, с 0.
[01:12:18.000 --> 01:12:20.000]  Есть ли хотя бы один путь.
[01:12:20.000 --> 01:12:22.000]  Можно, конечно, сделать то, что мы делали
[01:12:22.000 --> 01:12:24.000]  до этого,
[01:12:24.000 --> 01:12:26.000]  на возвести матрицу 7 и все такое.
[01:12:26.000 --> 01:12:28.000]  Но я хочу
[01:12:28.000 --> 01:12:30.000]  провестирую на этом значе
[01:12:30.000 --> 01:12:32.000]  другой подход.
[01:12:32.000 --> 01:12:34.000]  А именно, что можно
[01:12:34.000 --> 01:12:36.000]  переопределить умножение матрицы.
[01:12:36.000 --> 01:12:38.000]  Значит, смотрите, пусть так же,
[01:12:38.000 --> 01:12:40.000]  как раньше, это матрица смежности.
[01:12:48.000 --> 01:12:50.000]  Тогда я хочу
[01:12:50.000 --> 01:12:52.000]  примерно следующее.
[01:12:52.000 --> 01:12:54.000]  Я хочу, чтобы дым скатать,
[01:12:54.000 --> 01:12:56.000]  ну вот здесь,
[01:12:56.000 --> 01:12:58.000]  давайте я напишу.
[01:13:00.000 --> 01:13:02.000]  Я хочу
[01:13:02.000 --> 01:13:04.000]  какой-то новый путь навернее ввести на матрицу.
[01:13:08.000 --> 01:13:10.000]  Чтобы содержимое для кедежи
[01:13:10.000 --> 01:13:12.000]  было единице,
[01:13:12.000 --> 01:13:14.000]  если только есть
[01:13:14.000 --> 01:13:16.000]  путь длины ровно k между ними.
[01:13:16.000 --> 01:13:18.000]  Короче, если
[01:13:18.000 --> 01:13:20.000]  вот это вот есть
[01:13:20.000 --> 01:13:22.000]  хотя бы один путь длины ровно k.
[01:13:22.000 --> 01:13:24.000]  0 иначе.
[01:13:24.000 --> 01:13:26.000]  То есть я хочу знать
[01:13:26.000 --> 01:13:28.000]  не число путей,
[01:13:28.000 --> 01:13:30.000]  а просто да или нет.
[01:13:30.000 --> 01:13:32.000]  Едничку или ноль.
[01:13:32.000 --> 01:13:34.000]  Тогда, во-первых,
[01:13:34.000 --> 01:13:36.000]  не надо будет париться с тем,
[01:13:36.000 --> 01:13:38.000]  что мы считаем ответ по модулю.
[01:13:38.000 --> 01:13:40.000]  То есть то, что не нужна будет
[01:13:40.000 --> 01:13:42.000]  ни длинная аризметика,
[01:13:42.000 --> 01:13:44.000]  ни подборку модуля,
[01:13:44.000 --> 01:13:46.000]  правильно я считаю задачу.
[01:13:46.000 --> 01:13:48.000]  Но
[01:13:48.000 --> 01:13:50.000]  для этого нам
[01:13:50.000 --> 01:13:52.000]  будет по-другому определить умножение матрицы.
[01:13:52.000 --> 01:13:54.000]  Давайте сделаем следующее.
[01:13:58.000 --> 01:14:00.000]  Пусть A умножить B,
[01:14:00.000 --> 01:14:02.000]  вот это вот стиль умножения
[01:14:02.000 --> 01:14:04.000]  матрицы С,
[01:14:04.000 --> 01:14:06.000]  чтобы цей кедежи Т
[01:14:06.000 --> 01:14:08.000]  это дизюнкция
[01:14:08.000 --> 01:14:10.000]  вот таких конъюнкций.
[01:14:14.000 --> 01:14:16.000]  Раньше у меня формула для умножения
[01:14:16.000 --> 01:14:18.000]  была такая,
[01:14:18.000 --> 01:14:20.000]  сумма папарных произведений.
[01:14:20.000 --> 01:14:22.000]  Здесь была сумма,
[01:14:22.000 --> 01:14:24.000]  здесь было произведение,
[01:14:24.000 --> 01:14:26.000]  но здесь я взял дизюнкцию конъюнкцию.
[01:14:26.000 --> 01:14:28.000]  То есть по сути
[01:14:28.000 --> 01:14:30.000]  вид формулы остался,
[01:14:30.000 --> 01:14:32.000]  только я теперь использую
[01:14:32.000 --> 01:14:34.000]  другие операции.
[01:14:34.000 --> 01:14:36.000]  Не сумма и умножение,
[01:14:36.000 --> 01:14:38.000]  а дизюнкция конъюнкции.
[01:14:38.000 --> 01:14:40.000]  И тогда смотри,
[01:14:40.000 --> 01:14:42.000]  смысл будет ровно такой,
[01:14:42.000 --> 01:14:44.000]  потому что раньше,
[01:14:44.000 --> 01:14:46.000]  здесь стоял сумма,
[01:14:46.000 --> 01:14:48.000]  и я считал число путей.
[01:14:48.000 --> 01:14:50.000]  А здесь стало произведение,
[01:14:50.000 --> 01:14:52.000]  я считал число путей из IfT
[01:14:52.000 --> 01:14:54.000]  в.
[01:14:54.000 --> 01:14:56.000]  А теперь, смотрите,
[01:14:56.000 --> 01:14:58.000]  если у меня вот эта вот,
[01:14:58.000 --> 01:15:00.000]  это 1 или 0 означает,
[01:15:00.000 --> 01:15:02.000]  есть ли путь из IfT длинной 1,
[01:15:02.000 --> 01:15:04.000]  а эта 1 или 0 означает,
[01:15:04.000 --> 01:15:06.000]  есть ли путь из Т в Ж длинной коинс 1,
[01:15:06.000 --> 01:15:08.000]  тогда, когда я беру конъюнкцию,
[01:15:08.000 --> 01:15:10.000]  я узнаю есть ли путь из Т в Ж через Т.
[01:15:10.000 --> 01:15:26.000]  Я теперь не количество считаю, просто узнаю, есть ли он хотя бы один.
[01:15:26.000 --> 01:15:52.000]  Точно так же, пока можно показать, что точка в гружочной степени карм.
[01:15:52.000 --> 01:15:59.000]  То есть это в каждой степени не относительно обычного умножения, а относительно вот этого хитрого, буливского умножения в адрес.
[01:15:59.000 --> 01:16:11.000]  Так вот, вот это вот матрица, это ровно то, что нужно.
[01:16:11.000 --> 01:16:19.000]  Ну понятно, да, я еще раз на пальцах объясню, что если я перемножаю вот эту длину, а это m в кадре,
[01:16:19.000 --> 01:16:25.000]  тогда это будет m в кадре, с точки зрения вот этого нового умножения.
[01:16:25.000 --> 01:16:35.000]  Я пытаюсь пойти из i в t за один шаг, и потом из t в g, пока минус один шаг.
[01:16:35.000 --> 01:16:38.000]  Здесь единица, если есть такой путь, здесь единица, если есть такой путь.
[01:16:38.000 --> 01:16:42.000]  А то есть на конюнце это единица, только если есть путь из i вживленный карм через t,
[01:16:42.000 --> 01:16:44.000]  когда первая революция идет с t.
[01:16:44.000 --> 01:16:49.000]  Ну и потом я через дизюнцию пытаюсь все такие первые вершины, наверное, после i перебрать.
[01:16:49.000 --> 01:16:53.000]  Соответственно, дизюнция равна единице, если только есть, если я войдет в выгрузку.
[01:16:53.000 --> 01:16:58.000]  Из i в t, потом из t в g. Длины суммарны ровно карм.
[01:16:58.000 --> 01:17:05.000]  Поэтому, если бы мы умели возводить степень вот этой матрицы от такого произведения,
[01:17:05.000 --> 01:17:09.000]  то мы бы решили такую задачу без явного почитка рейтинга.
[01:17:09.000 --> 01:17:11.000]  Хорошо?
[01:17:11.000 --> 01:17:15.000]  То есть по сути мы просто опять объявляем новое умножение и понимаем, что для него
[01:17:15.000 --> 01:17:17.000]  выполняется его то, что мы хотим от этого.
[01:17:17.000 --> 01:17:20.000]  Ну и на самом деле его точно так же можно возводить в степень.
[01:17:20.000 --> 01:17:24.000]  Вот эти матрицы относительно нового умножения ровно так же хорошо работают.
[01:17:24.000 --> 01:17:40.000]  Значит, ну почему?
[01:17:40.000 --> 01:17:42.000]  А что мы там использовали?
[01:17:42.000 --> 01:17:46.000]  Мы использовали обычно, да, что m вкатый.
[01:17:46.000 --> 01:17:50.000]  Это m в степени каппула в карате и слегка четко.
[01:17:50.000 --> 01:17:56.000]  Здесь мы хотим получить что m в этой стильной степени кулифской степени k.
[01:17:56.000 --> 01:18:00.000]  Это то же самое. m в степени кулифской как пополам.
[01:18:00.000 --> 01:18:04.000]  И в квадрате в точку зрения вот этого вот кулифского произведения, если хочу.
[01:18:04.000 --> 01:18:08.000]  Вот это мы хотим. Если это верно, то у нас, собственно, выполняется то, что мы хотим
[01:18:08.000 --> 01:18:10.000]  от длинарного возведения степени.
[01:18:10.000 --> 01:18:13.000]  Опять, достаточно возлагарить москвоскоп в рекурсии,
[01:18:13.000 --> 01:18:17.000]  и потом матрица сама на себя вот так у кулифского нажать.
[01:18:17.000 --> 01:18:20.000]  Но чтобы доказать, давайте мы, наверное, будем доказывать.
[01:18:20.000 --> 01:18:26.000]  На самом деле, здесь достаточно только ассоциативность этой операции.
[01:18:26.000 --> 01:18:28.000]  Факт.
[01:18:32.000 --> 01:18:41.000]  Для этого достаточно ассоциативности.
[01:18:45.000 --> 01:18:48.000]  Экоперации мы уже делим кулифском, но уже не матрица.
[01:18:48.000 --> 01:18:51.000]  Ну, точнее, потому что это факт, это почти очевидно,
[01:18:51.000 --> 01:18:53.000]  потому что если у нас есть ассоциативность,
[01:18:53.000 --> 01:18:55.000]  то есть мы можем доказывать скопки как хотим.
[01:18:55.000 --> 01:18:58.000]  Тогда, что это количество m в степени k в кружочке?
[01:18:58.000 --> 01:19:03.000]  Ну, это m на m, на m и так далее, на m.
[01:19:03.000 --> 01:19:05.000]  И если у меня есть ассоциативность,
[01:19:05.000 --> 01:19:07.000]  я могу в этом произведении расширять скопки как хочу.
[01:19:07.000 --> 01:19:09.000]  Значит, давайте я расставлю скопки вот так вот,
[01:19:09.000 --> 01:19:11.000]  получившись в степени k в полам,
[01:19:11.000 --> 01:19:13.000]  потом вот так вот, еще получившись в степени k в полам,
[01:19:13.000 --> 01:19:14.000]  и потом их перемножим.
[01:19:14.000 --> 01:19:16.000]  Соответственно, если ассоциативность есть,
[01:19:16.000 --> 01:19:18.000]  то точность будет работать.
[01:19:18.000 --> 01:19:21.000]  Сначала первая половина множества литератур,
[01:19:21.000 --> 01:19:23.000]  потом вторая равна ей,
[01:19:23.000 --> 01:19:25.000]  и она выводит сама квадрату и сама на себя.
[01:19:25.000 --> 01:19:28.000]  Поэтому ассоциативности очевидно достаточно,
[01:19:28.000 --> 01:19:32.000]  ну и утверждать, что эта штука E обладает.
[01:19:32.000 --> 01:19:37.000]  Обладает ассоциативностью.
[01:19:37.000 --> 01:19:39.000]  Давайте напомним, что ассоциативность,
[01:19:39.000 --> 01:19:43.000]  это когда a на b на c,
[01:19:43.000 --> 01:19:49.000]  то же самое, что a на b на c.
[01:19:49.000 --> 01:19:51.000]  Ну и так же, как вы там на первой лекции
[01:19:51.000 --> 01:19:53.000]  по линалу кунуг доказывали,
[01:19:53.000 --> 01:19:55.000]  ассоциативность обычного произведения материи,
[01:19:55.000 --> 01:19:57.000]  можно доказать ассоциативность вот этого
[01:19:57.000 --> 01:19:59.000]  гулию кунугу не материи,
[01:19:59.000 --> 01:20:01.000]  когда вместо суммы произведения
[01:20:01.000 --> 01:20:03.000]  стоит резинца и конец.
[01:20:03.000 --> 01:20:05.000]  Вот, в этом мораль такая.
[01:20:05.000 --> 01:20:11.000]  Иногда может быть полезно ввести путь новое произведение,
[01:20:11.000 --> 01:20:13.000]  то есть необычное произведение.
[01:20:13.000 --> 01:20:15.000]  Обычное произведение нужно,
[01:20:15.000 --> 01:20:17.000]  когда нужно какое-то количество посчитать,
[01:20:17.000 --> 01:20:19.000]  посчитать различные способы,
[01:20:19.000 --> 01:20:23.000]  но иногда можно придумать какую-то свою функцию,
[01:20:23.000 --> 01:20:25.000]  свое произведение матрицы,
[01:20:25.000 --> 01:20:27.000]  и в семидарском листочке будет такая задача,
[01:20:27.000 --> 01:20:31.000]  где там нужно будет максимум плюс умножения ввести.
[01:20:33.000 --> 01:20:41.000]  Максимум плюс умножение.
[01:20:41.000 --> 01:20:45.000]  Когда вместо резинца стоит максимум,
[01:20:45.000 --> 01:20:49.000]  а здесь вместо резинца стоит сумма.
[01:20:49.000 --> 01:20:51.000]  В зависимости от задачи,
[01:20:51.000 --> 01:20:53.000]  вам может пригодиться
[01:20:53.000 --> 01:20:55.000]  разные произведения матрицы,
[01:20:55.000 --> 01:20:57.000]  и они соответственно работают точно так же.
[01:20:57.000 --> 01:20:59.000]  Если бинарного произведения в степень,
[01:20:59.000 --> 01:21:01.000]  то мы можем решить задачу
[01:21:01.000 --> 01:21:03.000]  произведения матрицы в степень,
[01:21:03.000 --> 01:21:05.000]  ну и ассимботика тогда будет как всегда
[01:21:05.000 --> 01:21:07.000]  куб размером матрицы
[01:21:07.000 --> 01:21:09.000]  и множного алгоритма в степень,
[01:21:09.000 --> 01:21:11.000]  который вы возводите.
[01:21:11.000 --> 01:21:13.000]  Вот, тогда давайте на этом закончим.
[01:21:13.000 --> 01:21:15.000]  Сейчас спасибо за внимание,
[01:21:15.000 --> 01:21:17.000]  я с вами очень рад.
