[00:00.000 --> 00:10.340]  так ну сегодня у нас второе занятие полотеху в рамках нашего курса и вот
[00:10.340 --> 00:15.000]  примерно чем собираемся сегодня говорить я много чего в прошлый раз
[00:15.000 --> 00:19.640]  анонсировал из вещей которые нам пока не хватало глубины понимания чтобы
[00:19.640 --> 00:23.840]  осознать которые нужно было вернуться потом вот сегодня мы будем закрывать
[00:23.840 --> 00:27.920]  такие пробелы поговорим про оформление документа целиком про всякие там поля
[00:27.920 --> 00:33.080]  колонтитлы заголовки такие вещи поговорим про то как вставлять какие-то
[00:33.080 --> 00:38.920]  брошени там лица и как собственно их создавать поговорим про кастомные
[00:38.920 --> 00:44.720]  команды очень важная тема как экономить свои силы при написании каких-то формул
[00:44.720 --> 00:49.480]  если там есть явный переиспользуемый код поговорим про окружение подробнее
[00:49.480 --> 00:53.840]  чем прошлый раз и еще про какие-то хаки для написания формул которых у нас
[00:53.840 --> 01:01.520]  раньше не было по оформлениям и ну напомню типичные названия разделов
[01:01.520 --> 01:07.280]  которые есть в разных документах лотеха как я говорил в тот раз конкретный набор
[01:07.280 --> 01:11.080]  названий которые доступны для одного документа он зависит от параметра
[01:11.080 --> 01:17.400]  document класс вот и поскольку мы будем работать почти всегда с классом article
[01:17.400 --> 01:23.360]  который дает все возможности которые нам потребовались бы для наших нужд вот
[01:23.360 --> 01:29.040]  в нем специфика такая что там нет раздела чепта все остальное есть ну
[01:29.040 --> 01:33.840]  синтаксис помните я думаю просто берется команда который название раздела и ее
[01:33.840 --> 01:38.440]  единственным аргументом является но тот заголовок который будет отрисовываться
[01:38.440 --> 01:43.440]  для данного раздела но есть однако побочный аргумент побочный аргумент
[01:43.440 --> 01:49.000]  указывается в скобках квадратных они фигурных это ну краткое название которое
[01:49.000 --> 01:53.960]  будет отрисовываться например в титулах или в содержании но вот такие вещи
[01:53.960 --> 01:58.360]  вернее такие эффекты короткое название мы сегодня построить не будем но вот они
[01:58.360 --> 02:03.920]  есть иногда это пригождается есть несколько команд которые но тоже гостно
[02:03.920 --> 02:08.040]  связаны со созданием своих разделов которые сами генерят какую-то страницу
[02:08.040 --> 02:13.160]  с каким-то контентом и тут я несколько садов перечислил есть команта моих
[02:13.160 --> 02:17.400]  тайтл которые возможно вы видели в разных документах которые в техе
[02:17.400 --> 02:22.760]  написаны вот сам вначале отрисовывает автора дату заголовок как правильном
[02:22.760 --> 02:27.560]  формате с правильным правильным шрифтом можем посмотреть как это будет на самом
[02:27.560 --> 02:34.680]  деле происходить акта у нас есть есть документ в котором но пока пусто этом
[02:34.680 --> 02:38.680]  что-то в прошлый раз набирал но более-менее почистил вот попробуем
[02:38.680 --> 02:46.560]  применить мэйк тайтл не то чтобы это прям часто возникает необходимость но
[02:46.560 --> 02:53.120]  если пустить какую-то статью и подаёте ее на фабрикацию то это бывает полезно
[03:02.560 --> 03:08.600]  вот такие команды там осады и тайтл они вбивают соответствующие данные
[03:08.600 --> 03:12.680]  соответствующие переменные у теха которые как-то запрятаны это не сами
[03:12.680 --> 03:15.240]  название переменных надо понимать это именно команда которые к нему
[03:15.240 --> 03:21.320]  обращаются но с этого момента он знает что отрисовывать при команде мэйк тайтл
[03:21.320 --> 03:25.520]  так что можно вызвать посмотреть что будет
[03:27.320 --> 03:32.240]  ну в общем-то ожидаемый результат наверное то что мы хотели так но
[03:32.240 --> 03:38.160]  обычно выглядит есть другие более полезные команды table of contents которые
[03:38.160 --> 03:41.320]  генерирует содержание ну то есть список всех ваших разделов под
[03:41.320 --> 03:47.120]  разделов и прочего со страницами на которых они впервые были упомянуты ну как
[03:47.120 --> 03:51.520]  обычно книги там все с отсылками с гипер ссылками можно переходить по этим
[03:51.520 --> 03:57.120]  ссылкам они будут я примечать прям к нужному разделу очень удобно про гипер
[03:57.120 --> 04:01.040]  ссылки и подробно будем говорить потом но уж по крайней мере встроенные
[04:01.040 --> 04:04.960]  инструменты в лотехе точно есть чтобы их просто создавать и даже нам в этом не
[04:04.960 --> 04:10.160]  думать аналогичного вида команды ведь то фигуры сейвисов тейблс они создают
[04:10.160 --> 04:15.040]  список разных картинок или таблиц которые тоже есть в моменте мы поговорим
[04:15.040 --> 04:19.160]  о том как такие штуки создавать ну то есть как создавать такие объекты
[04:19.160 --> 04:25.720]  которые бы упоминали с таких окружениях как лиса фиггер с лиса тейблс это тоже
[04:25.720 --> 04:30.360]  полезно скорее для таких статей в которых вы наверняка видели бывает по
[04:30.360 --> 04:33.120]  странице заняты какой-то картинкой которая написана рисунок таким-то
[04:33.120 --> 04:38.080]  номером с таким-то заголовком вот это такие уникальные объекты к которым
[04:38.080 --> 04:41.160]  можно присваивать некие ссылки и по этим ссылкам потом к ним переходить
[04:41.160 --> 04:47.960]  обратно и есть команда appendix довольно странного вида команды она преобразует
[04:47.960 --> 04:52.880]  правила по которым выдаются номера там разделом под разделом и прочему
[04:52.880 --> 04:59.960]  который встречается после этой команды ну мотивация в том что у статьи например
[04:59.960 --> 05:04.480]  могут быть какие-то предложения и было бы странно эти предложения
[05:04.480 --> 05:10.720]  номеровать продолжением номерации исходной глав статье и поэтому там
[05:10.720 --> 05:14.880]  номерация переходят цифры на буквы например это все кастомизуется можно
[05:14.880 --> 05:19.440]  выбирать какой будет правил номерации и до appendix и после но пока не заморачиваемся
[05:19.440 --> 05:25.040]  просто смотрю как-то действует вот допустим есть это две секции до этой
[05:25.040 --> 05:34.240]  команды и две секции после смотрю на эффект
[05:34.240 --> 05:40.200]  да ну примерно то чем я и говорил правила номерации изменилось они
[05:40.200 --> 05:44.640]  регулируемые можно сделать так чтобы разделы вашего исходного документа
[05:44.640 --> 05:48.600]  были нумерованы буквами причем хоть заголовами хоть строчными и даже русскими
[05:48.600 --> 05:52.520]  если угодно ну этот скорее экзотика правила номерации
[05:52.520 --> 05:55.880]  числями хватает поэтому пока мы об этом не говорим возможно потом нам это
[05:55.880 --> 06:02.760]  пригодится вот сортилами на этом кажется все и теперь другая важная часть это то
[06:02.760 --> 06:07.000]  как задавать всякие размеры полей документа размеры клон титулов да и
[06:07.000 --> 06:11.560]  вообще разместится с самой страницы по умолчанию в нашем документе сколько
[06:11.560 --> 06:17.760]  мы указали это прямо были у нас а4 paper как мы помним прошлого раза но это все
[06:17.760 --> 06:23.040]  вещи тоже редактируемые и посмотрим как есть такой пакет челометри который
[06:23.040 --> 06:27.960]  задает интерфейс обращения к разным переменам характеризующим страницу и
[06:27.960 --> 06:33.960]  позволяет их довольно быстро менять тут есть картинка которая в общем-то все
[06:33.960 --> 06:38.120]  охватывает что она вообще когда-то может из него требоваться но типично
[06:38.120 --> 06:42.800]  нужные перемены которые стоит внимание обратить это вот топ ботам отступы сверху
[06:42.800 --> 06:48.840]  и снизу и лев трайд левая правая поля вот это очень просто меняется
[06:48.840 --> 06:57.280]  синтаксис вот такой разговор челу него посмотреть ну вроде тут ничего такого не
[06:57.280 --> 07:01.560]  не происходит но казалось бы как все запоминать это с новой новой синтаксис
[07:01.560 --> 07:05.360]  у нас теперь фигурные скобки внутри переменные с равенством но вот это такие
[07:05.360 --> 07:09.600]  вещи которые раз в жизни пишутся прямо были потом никогда больше не используется
[07:09.600 --> 07:15.080]  то есть нет ничего плохого в том чтобы посмотреть синтаксис использовать нужно
[07:15.080 --> 07:19.920]  в строке кода и потом с этого момента только им пользоваться предлагаю так и
[07:19.920 --> 07:24.160]  сделать допустим мы вообще не знали как это пишется но мы можем скопировать
[07:24.160 --> 07:28.280]  нужен нам код прямо было но тут он уже был это не встречит потому что это
[07:28.280 --> 07:31.880]  экспериментировал но вот нам потребуется пакет челометри как всегда это команда
[07:31.880 --> 07:36.800]  юспеки ч и с этого момента можем задавать поля любого размера даже например
[07:36.800 --> 07:41.160]  абсурдного делаем очень большие поля сверху и сниз но если вас право тоже и
[07:41.160 --> 07:47.520]  убьемся что ну что это повлияет на что-то на генерим ковту текста
[07:47.520 --> 07:57.480]  ну вот да как видим поля стали явно больше причем но со всех сторон можем эксперимента
[07:57.480 --> 08:03.120]  ради поэкспериментирую чем-то еще к другим переменами например paper height высота
[08:03.120 --> 08:09.440]  страницы по умолчанию это там 28 что ли сантиметров ну вот обычно а4 формат но
[08:09.440 --> 08:14.080]  вот можно поменять его поменять насильно допустим мы забываем про все эти параметры
[08:14.080 --> 08:22.720]  полей они будут по умолчанию стоять и вот укажем paper height ну то есть разные
[08:22.720 --> 08:28.040]  единицы измерения я потом поговорю какие когда лучше использовать но вот допустим
[08:28.040 --> 08:35.200]  мы хотим не знаю 1000 100 сантиметров то есть ожидаем что будет длинная страница 4 раз длиннее
[08:35.200 --> 08:51.120]  чем обычно и это не сработал интересно ладно видимо все-таки это ограничение которое ну
[08:51.120 --> 08:57.120]  зашито в h4 paper и если мы хотим выменять но нужно выбирать другой класс документа не хочу
[08:57.120 --> 09:00.960]  ничего ломать но в всяком случае такая возможность есть есть переменные которые
[09:00.960 --> 09:06.200]  заотвечают и принято правильной стройки среды и можно их тоже редактировать но не то чтобы
[09:06.200 --> 09:12.760]  это было когда-то нужно что действительно нужно так это поля и с ним работать точно научились вот
[09:12.760 --> 09:20.080]  единицы измерения их всех и довольно много это не все только основные ну есть единицы
[09:20.080 --> 09:27.880]  основы на некоторых параметрах ну печатного текста скажем пт это ну видимо point элементарно
[09:27.880 --> 09:37.080]  единицы измерения размеров лотехи самая маленькая из всех вот есть x это высота буквы x довольно
[09:37.080 --> 09:44.600]  странная штука но иногда и пользуется бывает бывает такая ситуация когда нам хочется сопоставлять
[09:44.600 --> 09:50.040]  какие-то размеры в документе с размерами букв которые в нем пишутся то есть это единицы
[09:50.040 --> 09:55.080]  измерения она ну ее абсолютное значение вообще говоря зависит от того какой у нас шрифт потому
[09:55.080 --> 10:00.160]  что в разном шрифте в разном размере высота буквы x она будет разной если там какой-то причине
[10:00.160 --> 10:05.000]  удобно на ней ориентироваться то можем не воспользоваться ну и для тех тех же нужд бывает
[10:05.000 --> 10:11.880]  нужна команда м который отражает тоже ширину буквы именно м именно в текущем обычном шрифте
[10:11.880 --> 10:20.240]  ну то есть том который отрисуется если оставлять просто одну главную буквы это может когда-то
[10:20.240 --> 10:25.520]  пригодится опять же если нам полезно как-то сопоставлять размеры в документе с размерами
[10:25.520 --> 10:32.280]  букв но лично мне удобнее ссылаться на какие-то метрические измерения тут есть миллиметр сантиметра
[10:32.280 --> 10:39.640]  и дюймы ну в общем все как у людей и по умолчанию если мы говорим о бумаге формата 4 у нас ну
[10:39.640 --> 10:45.040]  действительно есть лист которые там 210 миллиметров на 280 ну или примерно так и
[10:45.040 --> 10:50.840]  все подчиняется обычным правилам есть другие числовые параметры которые не относится к
[10:50.840 --> 10:56.040]  эту геометрию но которые тоже бывает полезно знать их довольно много они гуглится но вот есть
[10:56.040 --> 11:03.280]  например параметры pair indent то есть paragraph indent это отступ первой строки каждого абзаца и
[11:03.280 --> 11:11.280]  paragraph skip это отступ после начала нового абзаца про то как абзаца новый создавать мы попозже
[11:11.280 --> 11:25.560]  поговорим но ну например любые любые две строки кода которые отделены пустой строкой считаются
[11:25.560 --> 11:32.480]  разными абзацами и если мы тут поменяем значение пары indent пар skip то расстояние там первая строка
[11:32.480 --> 11:37.600]  каждого этого абзаца расстояние между ними будет регулироваться нашим переменным например
[11:37.600 --> 11:43.640]  вот как видим то тут пары indent 50 на всех вот поинтов элементарных вот можем задать тут скажем
[11:43.640 --> 11:50.960]  4 сантиметра какой-то причине нам захотелось сделать так и здесь то же самое ну ожидаемое поведение
[11:50.960 --> 11:59.920]  что поменяется то что происходит пересчитается длина ну да мы именно этого добивались бывают
[11:59.920 --> 12:04.320]  такие ситуации в которых полезно какие-то переменные поменять можно погуглить их чтоб
[12:04.320 --> 12:10.760]  есть разных флотехи которые отвечают за всякие там пробелы между абзацами между строками вот
[12:10.760 --> 12:16.640]  такие вещи или там между формулом например в режим математическом они помолчание неплохо
[12:16.640 --> 12:20.680]  настроена и нормально выглядит но если вдруг возникает необходимость то вот обращаться к
[12:20.680 --> 12:25.320]  ним нужно вот так команды setlength который первый аргумент это название того параметра который мы
[12:25.320 --> 12:31.560]  редактируем второй аргумент это длина который мы присваиваем то есть если у нас раньше были
[12:31.560 --> 12:36.640]  переменные которые мы обращаемся как-то по-странному скажем команды title вот недавно
[12:36.640 --> 12:42.560]  заголовок который делается команды make title там это были команды которые обращаются каким-то
[12:42.560 --> 12:48.800]  внутренним переменным которые мы не знаем как называются здесь переменные вот они но задание
[12:48.800 --> 12:53.360]  и значений происходит не командой которая просто переменную использует а вот команды
[12:53.720 --> 12:59.240]  потому что интерфейса обращения к ним другого нет приходится делать так через полезный
[12:59.240 --> 13:05.360]  команды line spread который регулирует отступы ну междусрочный интервал ну вот вы знаете
[13:05.360 --> 13:10.840]  есть полуторные двойные но вот можно выбирать любой какой больше нравится как правило
[13:10.840 --> 13:17.400]  единичного по умолчанию вполне хватает но если у вас какой-то скажем конспект которым очень много
[13:17.400 --> 13:22.280]  такой внутри строчной математики кито выкладок внутри строк которые не хочется на себе отдельные
[13:22.280 --> 13:27.440]  строки из-за этого строки там мы расстаются по высоте но мы увидим примеры когда это возникает
[13:27.440 --> 13:34.320]  то ну бывает полезно поставить line spread например 1.2 как видим сейчас какой эффект это будет иметь
[13:34.320 --> 13:43.880]  ну вот чуть дальше строки друг от друга стали так по параметрам страницы думаю все вот теперь
[13:43.880 --> 13:49.960]  клон титулы снова некий массив кода который используется раз в жизни но вот нужно хотя бы
[13:49.960 --> 13:55.000]  раз прочитать что это такое много разных пакетов которые это делают ну вот я предлагаю использовать
[13:55.000 --> 14:08.720]  пакет title pc ps тоже очень понятно выглядит скопируем код и что тут происходит мы задаем стиль
[14:08.720 --> 14:14.360]  страницы команды new page style ну по стилям страницы понимается именно стиль расположения клон титулов
[14:14.360 --> 14:21.320]  на ней можем задать ширину прямых горизонтальных отделяющих клон титул с цельного текста и
[14:21.320 --> 14:28.680]  какие-то сами надписи которые будут там возникать здесь могут быть и переменные какие-то какие-то
[14:28.680 --> 14:34.280]  даже ароматические действия счетчиками встроенными про счетчики мы будем говорить позднее но в первом
[14:34.280 --> 14:43.120]  приближении это выглядит так теперь если я задам page style main который мы собственно объявили то с этого
[14:43.120 --> 14:48.920]  момента и далее когда не будет сказано обратное все страницы будут иметь такой стиль вот мы можем
[14:48.920 --> 14:58.560]  убедиться ну вот кстати сработала там модификация которую я ставил paper height внезапно видимо она не
[14:58.560 --> 15:03.240]  с первой компиляции применяется ну вот у нас пересчет очень длинная страница если друг там
[15:03.240 --> 15:07.480]  это было зачем-то нужно мы этого добились я предлагаю этого брать не то чтобы это очень полезный
[15:07.480 --> 15:15.600]  но вот есть та прямая которая точно которую мы обозначили есть текст который мы указали
[15:15.600 --> 15:24.120]  все как ожидалось но типично здесь указывают номер текущей страницы или снизу или сверху
[15:24.120 --> 15:31.600]  хоть в каком-то углу ну так не некоторые спольда как-то делается вот есть такая штука как счетчик
[15:31.600 --> 15:37.680]  и вот есть счетчика текущей страницы которому можно обратиться от команды the page ну и вот если
[15:37.680 --> 15:42.120]  я укажу его в качестве переменной титула он будет отрисовываться на каждую новую страницу свой
[15:42.120 --> 15:48.800]  если сделают новую страницу тоже команды которые пока не стоит запоминать мы про ней что поговорим
[15:48.800 --> 15:54.040]  но это будет у нас есть две страницы но на второй странице будет план титул в котором будет написано 2
[15:54.040 --> 16:01.360]  это счетчик тоже регулируемый можно менять его значение но сейчас не об этом главное что все
[16:01.360 --> 16:06.840]  работает да и стоит отметить что по очистаю работает как модификатор мы в прошлый раз говорили
[16:06.840 --> 16:13.840]  что коммунификатора это такие команды изменения стиля которые действует пока не будет сказано
[16:13.840 --> 16:19.520]  обратное скажем пока не закончится область видимости то есть текущие фигурные скобки или пока не
[16:19.520 --> 16:25.400]  будет задана другая команда модификатора той же категории которая будет говорить что-то другое
[16:25.400 --> 16:31.000]  допустим я захочу чтобы у меня новая страница не было клон титулов для этого есть встроенный
[16:31.000 --> 16:37.920]  page style но empty понятно что он что он говорит он говорит чтобы не было ничего лишнего на
[16:37.920 --> 16:49.520]  этой странице как что вот так это делается проверим да мы получили страницу у первой
[16:49.520 --> 16:56.320]  page style main на нем все как мы в прошлый раз установили вторая страница на ней ничего нет сверху снизу
[16:56.320 --> 17:02.560]  потому что у нее другой стиль если нам хочется работать как-то не модификаторным подходом есть
[17:03.560 --> 17:08.640]  который меняет стиль только у текущей страницы а дальше применяется тот который был по умолчанию
[17:08.640 --> 17:13.280]  ну или тот который сейчас активен в качестве монификатора здесь это будет
[17:13.280 --> 17:18.840]  эквалентная вещь потому что на какой странице мы находимся кто она применится но мне кажется так
[17:18.840 --> 17:25.680]  как-то понятнее что ли вот такой парадигме от рассматривать кладит его думаю что все и
[17:25.680 --> 17:32.120]  кратко есть такой пакет soul который дает некоторые модификаторы текста вот мы говорили есть там
[17:32.120 --> 17:38.320]  жирные шрифты там курсивные прочие вот есть еще некоторые команды дающие новый модификатор
[17:38.320 --> 17:44.360]  стиля но вот они лежат в пакете soul или если мы работаем с кинекодом в его варианте soul utf 8
[17:44.360 --> 17:52.840]  командой soul ставит пробелы между буквами у нас кстати используется в нашем клубе на заголовочной
[17:52.840 --> 17:57.280]  странице чтобы название предмета отрисовываю через пробелы чтобы это как-то более вытушительно
[17:57.280 --> 18:04.160]  выглядело есть модификатор заглобной букв вернее так сказать капиталий это такой стиль
[18:04.160 --> 18:09.640]  чертания при котором строчные буквы заменяются на маленькие заглобную вот ну есть подчеркивание
[18:09.640 --> 18:17.360]  и перечеркивание тоже можно использовать при необходимости потому что но считается что вы
[18:17.360 --> 18:22.280]  делите информацию какой-то капсум это дурной тон и лучше прибегать к другим средствам которые
[18:22.280 --> 18:27.000]  больше вам нравится и вот теперь у нас еще больше таких средств не только жирно-жирный
[18:27.000 --> 18:35.000]  курсивный а несколько других еще может пригодится и вот про отступы было аннотировано как работать
[18:35.000 --> 18:43.120]  пространство внутри страницы вот скажем как делать пробел есть команды аш-спейс и весь пейс они
[18:43.120 --> 18:49.640]  как не трудно догадаться делают горизонтальный или вертикальный пробел допустим мы хотим сделать
[18:49.640 --> 18:55.120]  пробел между этими буквами больше обычного по какой-то причине опять задается длина
[18:55.120 --> 19:00.360]  стоматежь единиц измерения которые мы упоминали раньше ну допустим два сантиметра
[19:08.360 --> 19:13.640]  а потому что я нашел весь пейс нужно было аш-спейс конечно
[19:13.640 --> 19:22.480]  но получен аж демо результат оступа сантиметра после первой буквы м да вот что было плохо
[19:22.480 --> 19:29.800]  когда этот набрал весь пейс это оступ горизонта вертикальный вертикал и ну вот я хоть непонятно
[19:29.800 --> 19:34.560]  что делать если он находится посреди строки а ему горе сделал вертикальный оступ но он доходит
[19:34.560 --> 19:38.440]  до конца строки в которой он находится а уже после нее делать этот отступ если я снова
[19:38.440 --> 19:43.560]  сделаю то же самое ну верну команду весь пейс то вот после первой строки на площади
[19:43.560 --> 19:49.680]  сантиметра по горизонтали по вертикали как мы зачем-то хотели это бывает нужно тоже когда
[19:49.680 --> 19:53.720]  делать какую-то заголовочную страницу вам не нужно всю и заполнять текстом вам хочется как-то
[19:53.720 --> 20:01.360]  разместить там ваше имя название может быть картинку и чтобы сделать это нужно в месте полезно
[20:01.360 --> 20:06.920]  такие команды использовать есть еще вариации этих команд с звездочкой я уже говорил что звездочка
[20:06.920 --> 20:12.200]  как-то меняет поведение команды каждый раз кип свои уникальным образом вот в случае
[20:12.200 --> 20:17.680]  команда пробелов она делает его так сказать жестким что это означает если мы поставим
[20:17.680 --> 20:23.400]  какой-то большой пробел в конце строки ну не буду писать чтобы ничего не сломалось если
[20:23.400 --> 20:28.120]  представим это большой пробел конце строки скажем там несколько сантиметров но вот
[20:28.120 --> 20:32.560]  кончится а пробел еще представилось не конца ну тогда часть пробела которая еще не
[20:32.560 --> 20:37.240]  проставилась, она просто отсечется, и перед нее забудут все. С новой строки уже будет следующий
[20:37.240 --> 20:42.280]  символ после этого пробела. А вот жесткие пробелы говорят, что требуется именно такой
[20:42.280 --> 20:47.440]  доступ никак не меньше, и тогда строка, в которой он начался, она заканчивается до этого пробела
[20:47.440 --> 20:53.040]  насильственно, и начинается уже с новой строки этот пробел целиком, чтобы целиком был
[20:53.040 --> 21:00.600]  проставлен. Мне ни разу такое не прикаждалось, но такое и есть. Ну есть полезные команды
[21:00.600 --> 21:07.560]  hskip и vskip. Если вам не хочется высчитывать конкретное число, насколько вам нужно далеко отступить,
[21:07.560 --> 21:10.760]  чтобы отрисовать в нужном месте, но вот вы знаете, что у вас есть часть контента,
[21:10.760 --> 21:14.480]  которую хочется написать сверху страницы, а часть снизу, вы можете между ней поставить
[21:14.480 --> 21:20.400]  распорку vskip. Она будет гарантировать, что то, что перед ней будет как можно ближе к верхнему
[21:20.400 --> 21:25.200]  краю страницы, то, что после нее как можно ближе к нижнему краю страницы. Можем посмотреть на
[21:25.200 --> 21:35.280]  такой эффект. Верхний текст. Что мы хотим сделать? Поставить команду vskip.
[21:42.800 --> 21:45.520]  Интересно. Видимо, потому что надо делать вот так.
[21:45.520 --> 21:55.600]  Тоже интересно. Ладно, с этим надо будет позже разобраться. Видимо,
[21:55.600 --> 21:59.360]  там есть какой-то аргумент, который нужно указать, но идеология точно такая.
[21:59.360 --> 22:04.280]  Не буду все это выбирать, что мы наделали, что времени тратить.
[22:04.280 --> 22:15.240]  Теперь переход на новую сроку. Они тоже бывают разные. Я упоминал, что любое количество переходов
[22:15.240 --> 22:22.040]  на новую строку, вот такое, оно склопывается в одну. То есть, операция перехода на новую
[22:22.040 --> 22:29.240]  строку, так сказать, идепатента. И тот же эффект имеет команда slashpar. Это абсолютно
[22:29.240 --> 22:34.560]  эквивалентные вещи. Если вам просто не хочется плодить пустые строки, но вы хотите, чтобы у вас
[22:34.560 --> 22:41.680]  эти две строки считались за два раза в параграфах, то можете разделять ее не вот так, а можете
[22:41.680 --> 22:51.200]  ставить команду par. Тут раньше быть не должно. Ну, очень большой доступ, потому что мы поставили
[22:51.200 --> 22:56.560]  его очень в больших настройках. Наверное, стоит это убрать. Не то чтобы... Это полезный параметр.
[22:56.560 --> 23:15.800]  Пусть будет 10. Ну, вот начался новый абзац. Если мы этого не сделали и просто оставили
[23:15.800 --> 23:20.240]  здесь седние строки, то их бытех не восприним как переход на новую строку. Ему нужно хотя бы
[23:20.240 --> 23:25.560]  одну пустую иметь, чтобы на это ориентироваться. Есть другие способы. Есть команда двойной
[23:25.560 --> 23:33.520]  backslash. Она просто насильно обрывает строку на нужном месте. И дальше начинается не новый абзац,
[23:33.520 --> 23:38.880]  но при этом новая строка. То есть, не используется правило, по которому там считывается осу,
[23:38.880 --> 23:44.960]  между абзацами, или там красная строка абзаца, просто начинается новая строка. И есть команда
[23:44.960 --> 23:50.120]  newline, которая делает то же самое, эквивалентные вещи. То, что там можно делать с страницами,
[23:50.120 --> 23:56.000]  можно насильно начать новую страницу. Команда newpage. Я про нее уже говорил и даже, конечно,
[23:56.000 --> 24:06.720]  использовал в одном из примеров. Ну да, получено то, что мы ожидали. И есть несколько другого стиля
[24:06.720 --> 24:13.520]  эти варианты команд linebreak, pagebreak. Они не говорят, что прям насильно, ровно в этом месте нужно
[24:13.520 --> 24:18.880]  срочно прийти на новую строку или там новую страницу. Они говорят у тех, чтобы он где-то в
[24:18.880 --> 24:23.520]  окрестности этого места высчитал наиболее оптимальную позицию, в которой эту страницу можно было бы
[24:23.520 --> 24:29.760]  начать. Допустим, у вас большой пласт текста, какая-то длинная теорема, и вот вы чувствуете, что
[24:29.760 --> 24:35.400]  не умещается на одну страницу, и почему-то настройка верски по умолчанию отрисовывает ее не очень
[24:35.400 --> 24:43.120]  хорошо. Тогда вам бывает полезно в нужном месте поставить pagebreak и ожидать, что у тех
[24:43.120 --> 24:48.320]  догадается, что именно в этом месте вы ожидаете одного расстрой страницы, а не в другом, и как-то
[24:48.320 --> 24:56.120]  верстка его в этом про не направить. То есть вы не до конца контролируете процесс, но вы, так
[24:56.120 --> 25:02.680]  сказать, свое мнение у тех указываете. Это бывает полезно. У меня такое чуть не в каждой работе встречалось,
[25:02.680 --> 25:08.160]  но в которой там больше 20 страниц, грубо говоря, такое неизбежно возникает. Когда копится много
[25:08.160 --> 25:15.480]  текста, в какой-то момент где-то лотех реверс автоматически ошибается, и делает не то, что мы
[25:15.480 --> 25:24.360]  бы от него хотели, но этим можно управлять. Еще один необычный эффект, который стоит упомянуть, если мы
[25:24.360 --> 25:35.280]  по умолчанию не используем никакую команду, вот если мы забудем про эту команду, чтобы она не
[25:35.280 --> 25:43.600]  значила, пока ее уберем временно, и попробуем сделать новую секцию, которая будет два абзаца, то есть
[25:43.600 --> 25:49.440]  все по-честному, есть пустые строки разделяющие, значит это точно новая абзац, то мы обнаружим,
[25:49.440 --> 25:56.360]  что первый абзац секции, он не начинается как раз со строки, но это такое правило типографии
[25:56.360 --> 26:04.280]  англоязычной, у нас так не принято, поэтому чтобы с этим бороться есть пакет in that first, он делает
[26:04.280 --> 26:10.760]  то, что у него написано, он делает, чтобы первый абзац каждого раздела отступался, и если мы
[26:10.760 --> 26:17.440]  скопируем это снова, то получим то, что хотели. Вот, ну это опять же такая команда, которая раз в
[26:17.440 --> 26:22.560]  жизни применяешь прямо или потом забываешь, я думаю, что в конце этого раздела такого у нас
[26:22.560 --> 26:28.880]  больше не будет, будут команды, которые нужны постоянно, и с ними как-то попроще. Да, изображение
[26:28.880 --> 26:34.960]  таблицы сегодня кратко, подробно будет, думаю, что в следующем занятии, пока на уровне идей,
[26:34.960 --> 26:40.280]  как вообще это реализовывать. Нам часто бывает нужно вставить какую-то таблицу в текст, есть такая
[26:40.280 --> 26:46.480]  команда tabular, синтаксис довольно неприятный, в нем можно вчитаться, но идея следующая, вот есть
[26:46.480 --> 26:53.520]  окружение tabular, у которого есть некоторое количество настроек, настроек такие, это некоторые коды
[26:53.520 --> 27:00.240]  выравнивания текста, вот я привел к примеру c, l или r, ну то есть выравнивание по центру,
[27:00.240 --> 27:06.880]  по левому краю или по правому краю, и прямые слеши, регулирующие количество вертикальных
[27:06.880 --> 27:12.640]  разделителей между этими столбцами, то есть каждый столбец, это своя буква правила выравнивания,
[27:12.640 --> 27:19.560]  между ними сколько угодно разделителей, и сами столбцы, вернее сами строки задаются следующим
[27:19.560 --> 27:25.240]  образом, вот очередная строка, ее контент, который должен находиться в разных столбцах,
[27:25.240 --> 27:30.640]  отделяется апельсантами, вот кажется это первый раз, когда он встретится как тимул
[27:30.640 --> 27:36.360]  зарезервированный, ну вот да, если он потребуется вам в тексте, то его нужно будет экранировать,
[27:36.360 --> 27:41.960]  а по умолчанию это тимул, который отделяет контент разных столбцов, ну такой код дает
[27:41.960 --> 27:48.320]  там такой результат, мы получаем четыре столбца, как и ожидали, первые два выравнены по центру,
[27:48.320 --> 27:55.960]  третий по правому краю, черта по левому краю, и между ними ровно такое количество разделителей,
[27:55.960 --> 28:01.640]  сколько мы нарисовали, это тоже все кастомизируется, но в общем-то такого понимания хватает для
[28:01.640 --> 28:08.840]  большинства задач, ну и да, по умолчанию строки в таблице не разделяются чертой горизонтальной,
[28:08.840 --> 28:13.440]  ее нужно проводить самому, потому что бывает вам она не нужна, или вам нужно сразу две,
[28:13.440 --> 28:19.920]  когда вы рисуете, ну пишете ашлайн два раза подряд, вот, ну вот синдекс не очень приятный,
[28:19.920 --> 28:27.640]  и ее можно упростить, до этого есть такая штука, как так сказать wizard, вот, по крайней мере в
[28:27.640 --> 28:33.880]  текст студии такая опция имеется, если я захочу быстро сделать таблицу, я жму quicktabular,
[28:33.880 --> 28:42.320]  и уже просто получаю человекочитаемый интерфейс того, как это создавать, что-то сейчас происходит,
[28:42.320 --> 28:52.520]  почему-то у меня 34, а там это где, сейчас я гляну презентацию, а, ну это потому что я забыл
[28:52.520 --> 29:00.960]  поменять, это забейте, просто в презентажке код, который отрисовывает тех его исходник,
[29:00.960 --> 29:05.040]  и код, который отрисовывает результаты, в два разных кода, в одном месте я поменял,
[29:05.040 --> 29:11.120]  а в другом не поменял, тут должно быть, конечно, что-то согласованное, либо здесь единички xy,
[29:11.120 --> 29:19.040]  либо здесь числа 24, это не очень важно, да, обратно к этому wizard, ну вот, получаем,
[29:19.040 --> 29:25.240]  что хотели, допустим, мы хотим там четыре колонки, или там одну строку при этом,
[29:25.240 --> 29:31.720]  можем забить каким-то контентом, можем даже выравнивание в каждом из них отрегулировать,
[29:31.720 --> 29:40.600]  вот, например, так, и весь код наберется за нас, это бывает полезно, этим можно пользоваться,
[29:40.600 --> 29:46.440]  да, и по умолчанию, такой вот tabular считается частью строки, в которой он написан,
[29:46.440 --> 29:52.280]  если мы хотим, чтобы он был на новой строке, мы его отделяем, как всегда, пустой строкой,
[29:52.280 --> 29:57.800]  более того, полезно такого рода окружение, значит, еще окружение, например,
[29:57.800 --> 30:04.360]  окружение Center, которое его выделит, ну, мы помним, окружение Center, это окружение,
[30:04.360 --> 30:12.280]  все внутри которого выравнивается по центру, обычно таблица это некая ключевая вещь в странице,
[30:12.280 --> 30:16.280]  которую хочется понимание привлекать, и вот так этого можно добиться, например,
[30:16.280 --> 30:24.000]  есть еще специальное окружение Table, которое как раз-таки создает объект, вида Table,
[30:24.000 --> 30:29.000]  который имеет там свое название, свою подпись, свою ссылку, и при этом отрисовывается,
[30:29.000 --> 30:33.800]  если мы сделаем команду List of Tables, которая у нас вначале была, сегодня мы об этом не
[30:33.800 --> 30:38.800]  будем, наверное, говорить, но, во всяком случае, почти всегда, если вы делаете какую-то таблицу,
[30:38.800 --> 30:45.040]  лучше во что-то ее завернуть, уж как-то форматирование ее отрегулировать, то же самое
[30:45.040 --> 30:49.200]  касается изображений, пример очень простой, есть команда Include Graphics,
[30:49.200 --> 30:56.640]  которая в качестве главного аргумента, я обязательно принимает только путь к изображению,
[30:56.640 --> 31:03.920]  вот у меня в папке с презентацией лежала картинка с котиком, сейчас попробую ее же отрисовать
[31:03.920 --> 31:15.720]  в нашем файле примере, скопируюсь в папку изображений, которые тут лежат, и попробую набрать
[31:15.720 --> 31:27.640]  что-нибудь, ну как я говорил, команда Include Graphics, работает ли оверлифе, надо посмотреть,
[31:27.640 --> 31:34.000]  я не уверен, я сам оверлифом мало пользуюсь, возможно, там тоже есть такой инструментарий,
[31:34.000 --> 31:41.240]  но даже если нет, то всегда можно набрать руками, это не очень сложно, обратно к изображению
[31:41.240 --> 31:46.360]  картинок, указываю путь до картинки, можно не указывать расширение, в тех раз партиз сам,
[31:46.360 --> 31:51.240]  какие файлы он может считать как картинку, и догадается, что должно быть что-то типа там
[31:51.240 --> 32:00.040]  .jpg или .png, простейшее применение будет таким, ну здорово, получили котика, только он не
[32:00.040 --> 32:04.600]  влиялся почему-то в страницу, потому что он слишком большого размера, размер можно регулировать,
[32:04.600 --> 32:08.880]  например команды width, очень удобно ориентироваться именно по ширине картинки,
[32:08.880 --> 32:15.200]  и можно указывать ее явно, например, вот точно знаю 10 сантиметров, могу это указать,
[32:15.200 --> 32:23.520]  другой вариант, мы можем указывать его как некий коэффициент от ширины текста,
[32:23.520 --> 32:29.440]  это встроенная переменная text-width, этих текстаков, что можно перед ней ставить здесь некий
[32:29.440 --> 32:36.840]  множествочисловой, допустим 0.8, вот полученная картинка после этого кода, она будет иметь
[32:36.840 --> 32:43.600]  ширину как 0.8 ширины основного текста, примерно то, что мы ожидали как раз таки получено,
[32:43.600 --> 32:49.600]  вот наверное такой вот теоретический минимум, который нужно вставить в картинки, он вот такой,
[32:49.600 --> 32:57.200]  ну и опять часто бывает полезно выделить картинку скажем в центр, или как-то еще выровнять,
[32:57.200 --> 33:01.440]  и поэтому какие-то окружения нам обычно пригодаются, я обычно делаю вот так,
[33:01.440 --> 33:12.360]  мне кажется как-то приятнее выглядит, дальше, наконец-то гвоздь программы, я говорил в прошлый
[33:12.360 --> 33:16.960]  раз, что можешь создавать свои команды, чтобы упрощать себе жизнь, или вообще чтобы исправлять
[33:16.960 --> 33:22.880]  какие-то нестыковки, которые раньше были в исходном теке, сейчас увидим это все, да, во первых,
[33:22.880 --> 33:29.360]  нам бывает часто нужно много раз набирать одно и то же, например, если мы набирали частную
[33:29.360 --> 33:37.760]  производную, так сказать, по символу, что бы мы сделали, как бы мы набрали df pdx,
[33:37.760 --> 33:45.760]  например, это была бы какая-то видимо дробь, фрег, как помню с прошлого раза, ну и значит спец
[33:45.760 --> 33:53.480]  символ, это вот буквучки, отражая частную производную, это partial команда, вот мы бы сделали
[33:53.480 --> 34:01.520]  вот так, ну это конечно работает, но вот кажется это какое-то очень большое усилие, целая куча
[34:01.520 --> 34:06.600]  символов, а вот такой результат, это можно инкапсулировать, делать специальную команду,
[34:06.600 --> 34:13.800]  которая будет иметь такой же эффект, но при этом аналог короче, будет вот такой, есть команда new
[34:13.800 --> 34:21.080]  command, у нее основной аргумент это название команды, которую вы создаете, ну допустим производную
[34:21.080 --> 34:26.760]  довольно логично назвать, что-то типа дариф или дариватив, ну давайте вот так, потом квадратные
[34:26.760 --> 34:31.400]  скобки, количество аргументов, если аргументов нет, это просто опускается, как всегда, квадратные
[34:31.400 --> 34:36.280]  скобки содержат какой-то необязательный параметр, но вот тут у нас два аргумента, это собственно
[34:36.280 --> 34:43.560]  какую функцию мы берем производную и какой перемен, вот так это будет выглядеть, я могу это
[34:43.560 --> 34:48.640]  скопировать и прямо здесь ставить, лучше конечно в преамбул, но можно здесь, и попробуем применить
[34:48.640 --> 34:55.280]  то же самое, но уже с точки зрения новой команды, как я уже говорил, если аргументов несколько,
[34:55.280 --> 35:05.880]  каждый по отдельности идет в свои фигурные скобки, лучше делать вот так, это сработало, но напомню
[35:05.880 --> 35:10.760]  также, что есть аргумент односимбльный, ну скобки можно опускать, то есть если мы сделаем просто
[35:10.760 --> 35:15.920]  вот так, то тех поймет, что первый аргумент это первый символ f, а второй это второй символ x,
[35:15.920 --> 35:23.240]  и получится тот же самый результат, хорошо, ну еще очень-очень часто нужно сокращение,
[35:23.240 --> 35:28.560]  постоянно бывает нужно какие-то числовые множества указывать, действительные числа,
[35:28.560 --> 35:34.360]  комплектные числа, вот чтобы короче это делать, каждый раз не модифицирующий лифт, о том, что это
[35:34.360 --> 35:39.800]  такое, мы поговорим чуть попозже, у нас, кажется, не было еще числа в математическом режиме, ну вот
[35:39.800 --> 35:44.720]  можно это сразу забить в команду slash изоглавная r, очень удобно, постоянно этим
[35:44.720 --> 35:54.080]  пользуюсь, в каждой наверное работе у меня это встречается, вот, понятно ли как это происходит?
[35:54.080 --> 36:02.320]  Ну да понятно, а можно допустим перегружать, чтобы одно и то же название команд принимало,
[36:02.320 --> 36:08.680]  то два параметра, то один параметр? Уф, хороший вопрос, честно говоря, я ни разу не пробовал,
[36:08.680 --> 36:15.640]  это стоит погуглить, ну можно поэкспериментировать, я подозреваю, что он пожалуется, типа это имя уже занято,
[36:15.640 --> 36:28.440]  вот и сейчас узнаем, допустим есть другая команда, которая делает, просто отрисовывает сам параметр,
[36:28.440 --> 36:33.600]  и там штрих после него ставит, но я подозреваю, что это не будет работать, сейчас узнаем,
[36:38.680 --> 36:47.480]  да, он пожалуется, тех не умеет перегрузку, значит, и если нам нужно иметь две похожие команды,
[36:47.480 --> 36:54.160]  значит надо по-разному называть, например Drift2, через двух аргументов, тут Drift1,
[36:54.160 --> 37:01.960]  это точно сработает, но уж по крайней мере что можно, так это заменять уже встроенные команды,
[37:01.960 --> 37:07.800]  давая им другую функциональность, допустим нам вот не нравится, что делает встроенная команда
[37:07.800 --> 37:13.760]  в лотехе, но при этом нам хочется использовать такое же сокращение, для этого есть вместо NewCommand
[37:13.760 --> 37:21.480]  команда ReviewCommand, ожидаемо, которая заменяет эффект текущей команды на свой, у нее стинтекс
[37:21.480 --> 37:28.480]  такой же, как у NewCommand, сначала название, которое мы хотим переопределить, потом количество
[37:28.480 --> 37:33.680]  аргументов, если аргументы есть, а потом то, что команда делает, ну вот типичный пример,
[37:33.680 --> 37:43.160]  тут он указан, если мы попробуем, если мы попробуем набрать буквы, скажем, фиди там,
[37:43.160 --> 37:51.360]  эпсилон или может быть капа, мы заметим, что начертание у них не такое, как мы привыкли,
[37:51.360 --> 37:59.280]  ну у вас наверное уже был всехматонарис и вы точно видели другие буквы фи, буквы
[37:59.280 --> 38:04.640]  эпсилон, буквы капа, вот хочется это как-то исправить, в лотехе есть для этого команды варфи,
[38:04.640 --> 38:11.440]  вар эпсилон, вар капа, вариант написания, но каждый раз набирать столько символов варфи ради
[38:11.440 --> 38:16.400]  вот такого, ну не хочется, поэтому предлагается переопределить команду фи, чтобы она делала
[38:16.400 --> 38:23.200]  что-то новое, ну как, ну с командой NewCommand, мы забиваем то название, которое нам потребуется,
[38:23.200 --> 38:28.600]  потом то, что будет не происходить, а именно вызов варфи, давайте то же самое для эпсилонной капы,
[38:28.600 --> 38:51.120]  видим получены требуемые, получены привычные нам греческие буквы, ну и если вам какая-то
[38:51.120 --> 38:55.480]  другая команда не нравится и при этом вы не можете, ну то есть вам хочется сделать команду,
[38:55.480 --> 39:00.480]  которая бы делала что-то вот такое, но при этом название уже занято, а вы хотите именно это
[39:00.480 --> 39:07.600]  название, ну значит, просто делайте NewCommand, еще бывает ситуация, когда есть какой-то встроенный
[39:07.600 --> 39:12.600]  модификатор стиля, который вам хочется, чтобы делал что-то другое, ну допустим вы много
[39:12.600 --> 39:16.680]  идеи его использовали, а потом поймаете, что вам он не нравится, но вам не хочется заменять его на
[39:16.680 --> 39:21.160]  другой, ну во всем тексте, поэтому вместо того, чтобы заменить модификатор стиля, заменяете то,
[39:21.160 --> 39:28.480]  что он делает, делайте RenewCommand и переопределяйте то, что вам потребуется, вот, но это очень рисковое,
[39:28.480 --> 39:35.960]  можно случайно переопределить что-то важное, поэтому, в общем, будьте с этим осторожны, вот,
[39:35.960 --> 39:40.880]  теперь что-то еще из математики, мы говорили в прошлый раз, что есть такая штука-операторы,
[39:40.880 --> 39:47.680]  ну там типа синуса, которые печатают некий текст, название оператора, опять же синус, а потом некий
[39:47.680 --> 39:54.360]  специального размера пробел, отделяющийся синус от аргумента, но при этом бывает часто, что операторы есть,
[39:54.360 --> 40:00.760]  ну, нам нужны какие-то свои операторы, которых нет в лотехе, но не хочется при этом пробел оставить
[40:00.760 --> 40:08.320]  самому правильное, есть команда для этого DeclineMathOperator, которая ровно то и делает, она берет то
[40:08.320 --> 40:14.760]  название, которое потом будет использоваться далее, то есть ту команду, а второй аргумент это текст,
[40:14.760 --> 40:19.800]  который будет писаться в качестве текста оператора, они все по умолчанию пишутся именно
[40:19.800 --> 40:27.080]  таким шрифтом, то есть прямым, для тех типичных, что в математике шрифт курсивный, ну давайте
[40:27.080 --> 40:40.480]  прям посмотрим, если бы я просто написал что-то типа, как здесь, что размерность ядра фи, плюс
[40:40.480 --> 40:48.120]  размерность образа и равномерности пространства без операторов, ну мы увидим какую-то слитную массу
[40:48.120 --> 40:54.680]  и притом курсивную, как правило, ну как мы понимаем, это должно выглядеть не так,
[40:54.680 --> 41:03.400]  чтобы это выглядело не так, мы создаем свои операторы, команда DeclineMathOperator,
[41:03.400 --> 41:10.320]  тут довольно много разных, ну то есть видно, что есть еще какая-то свобода в создании своих вещей,
[41:10.320 --> 41:15.160]  но мы все это не будем отвечать, потому что нам не все пригодится просто, ну полезно понимать,
[41:15.160 --> 41:22.160]  возможно вам потребуется что-то другое, но вот операторы сдаются так, мы хотим команду ядра,
[41:22.160 --> 41:28.280]  я бы хотел сделать так, но возможно эта штука уже чем-то занята, чтобы сейчас точно не ошибиться,
[41:28.280 --> 41:33.520]  я сделаю команду StumiR, ну то есть точно будет уникальное название, но при этом надпись будет
[41:33.520 --> 41:40.200]  просто Kerr, как бы мы и хотели, и то же самое здесь, я почти уверен, что команда им занята под
[41:40.200 --> 41:47.480]  подымнимую часть комплексного числа, а нам сейчас это не нужно, поэтому сделаем свою команду,
[41:47.480 --> 41:50.920]  а команда team уже существует, это я проверял,
[42:02.920 --> 42:15.000]  сработало, понятно что произошло, да понятно, ну вот про операторы более-менее вот так,
[42:15.000 --> 42:20.240]  особенно если возьмете какой-то алгеброй, там этих операторов масса, и обычно приамбла
[42:20.240 --> 42:24.960]  начинается там с 20-ти строк такого вида, миллион операторов, которые какой-то разный имеют эффект,
[42:24.960 --> 42:32.880]  еще есть такая штука оператора со звездой, это операторы, которые делают верхние-нижние индексы
[42:32.880 --> 42:39.440]  пределами, сейчас объясню, что я имею в виду, вот например оператор argmax, допустим нам просто
[42:39.440 --> 42:48.840]  пока нужно оператор argmax, делается он естественно вот так, ну что-то с ним напишем, argmax,
[42:48.840 --> 42:57.760]  f, да как всегда, если параметр 1, а тут параметр 1 symbol, пусть будет без скобочек, пусть будет
[42:57.760 --> 43:03.880]  равен 0, и как правило мы указываем какое-то множество, которое argmax пробегает, ну там
[43:03.880 --> 43:09.400]  нижним индексом укажем, что x пробегает отрезок от 0 до 1, посмотрим что будет,
[43:09.400 --> 43:16.440]  вот нам наверное хотелось бы, чтобы в такого рода командах вот эта вот надпись смещалась под
[43:16.440 --> 43:23.320]  оператор, наверное у вас нотация была тоже такой, и чтобы этого добиться мы используем тут звезду,
[43:23.320 --> 43:29.600]  она модифицирует оператор таким вот образом, это снова вот еще один пример, когда звезда меняет
[43:29.600 --> 43:36.920]  поведение команды, но при этом на какое-то очень похожее и тоже какое-то полезное, вот то что мы
[43:36.920 --> 43:43.000]  хотели, тут возникает такой вопрос, а что делать если у нас формула внутри строки,
[43:43.000 --> 43:55.600]  допустим мы тут допишем такое, было бы естественно чтобы у нас не вылезали какие-то лишние символы
[43:55.600 --> 44:01.360]  вверх-вниз, чтобы строка не разрасталась по ширине, чтобы она была такой же высоты как все
[44:01.360 --> 44:07.680]  остальные строки, и вот по умолчанию тогда указание ставить пределы сверху-снизу будет
[44:07.680 --> 44:14.480]  игнорироваться, вот, то есть хоть мы сделали такой оператор со звездой, если мы говорим про формулу
[44:14.480 --> 44:18.800]  в долларах единичных, то есть внутрисрочную, то такое требование все равно игнорируется,
[44:18.800 --> 44:24.220]  как это обойти поговорим попозже, но вообще лучше это не обходить, потому что это не очень красиво
[44:24.700 --> 44:34.780]  лучше так, здесь наверное тоже вопрос убить не должно, да, бинарная операция, это такая экзотика,
[44:34.780 --> 44:39.620]  мне показалось наверное раз в жизни, и это в теории групп, потому что там много бинарных операций,
[44:39.620 --> 44:46.540]  но вот допустим у нас возникла какая-то операция бинарная, символ которой LaTeX не
[44:46.540 --> 44:52.460]  считает бинарным оператором, например процент, ну процент обычно то и обозначает процент,
[44:52.460 --> 44:56.420]  но вот допустим мы хотим чтобы он был бинарным оператором, у них должны быть какие-то свои
[44:56.420 --> 45:04.620]  правила того как ставятся пробелы между операндами и самим символом, для того чтобы эти правила учесть
[45:04.620 --> 45:11.420]  вот помогает команда metbin, я снова просто скопирую код и потом поясню что он делает,
[45:11.420 --> 45:18.580]  вот мы создаем новую команду процент, которая, ну казалось бы просто печатая знак процента,
[45:18.580 --> 45:22.940]  то есть могли бы сделать вот так, но если мы сделали вот так, мы просто получили команду,
[45:22.940 --> 45:29.700]  которая печатает процент, она нужно чтобы она при этом грамотно расставляла пробелы, и чтобы
[45:29.700 --> 45:35.380]  на это указать мы говорим что то что происходит дальше это бинарная операция, заворачиваем
[45:35.380 --> 45:43.180]  это в команду metbin, вот, и теперь если мы попробуем сделать что-то вроде а персент b,
[45:43.180 --> 45:54.300]  то получим что-то разумно выглядящее, вот, похож на что-то вроде а плюс b, ну и давайте для сравнения
[45:54.300 --> 45:58.740]  что будет если я уберу эту команду, фигурные скопки сами по себе ни на что не влияют, поэтому я могу их
[45:58.740 --> 46:05.260]  просто оставить, убрать только при длине команды, ну как видим пробелы пропали и вообще выглядит не
[46:05.260 --> 46:16.420]  очень красиво, вот, надеюсь я вам мотивацию пояснил для чего это нужно, вот, думаю что про команду
[46:16.420 --> 46:24.260]  сделал все что хотел, если есть вопросы давайте сейчас обсудим, а кстати вот если например drop
[46:24.700 --> 46:34.740]  использовать вне долларов, имеешь в виду вот в таких окружениях, да, нет, вообще без всяких этих, скорее всего
[46:34.740 --> 46:41.020]  упадет, есть такие ну все команды которые математические как правило не определены вне окружения
[46:41.020 --> 46:48.900]  математики, ну можем попробовать, но я почти уверен что упадет, вот там вот это вот знаменатель
[46:48.900 --> 46:56.660]  он пишется нормально, а числитель нет, ну это скорее потому что когда мы делаем что-то, злотехо неожиданное
[46:56.660 --> 47:04.940]  мы можем взять неопределенное поведение, ну типичный случай, он попытался, но у него не вышло, поэтому лучше
[47:04.940 --> 47:16.060]  его не мучить и сделать вот так, это точно сработает, отмечу кстати что дроби как видим в строке и на своей
[47:16.060 --> 47:23.060]  строке вот таком окружении, они разного размера, это тоже сделано для того чтобы строки с текстом в
[47:23.060 --> 47:28.980]  которых и текст и математика, чтобы они не были слишком большие в высоту, это тоже можно обходить мы
[47:28.980 --> 47:34.980]  это потом увидим, но опять же лучше это не обходить, потому что это не очень красиво, мне кажется так оно
[47:34.980 --> 47:41.620]  как-то приятнее, когда не выбивается большим размером какая-то дробь из текста, да еще вопросы
[47:41.620 --> 47:49.900]  сегодня еще поведские окружения, мы в прошлый раз так начали обсуждать, поговорили там про окружение
[47:49.900 --> 47:56.780]  выравнивания, там center, flash left, flash right и немножко про теоремы, сегодня мы расширим это понимание, но это
[47:56.780 --> 48:04.860]  будет как бы не конец, оно будет расширяться еще, вот начнем с окружений номеровых маркерогных списков
[48:04.860 --> 48:13.100]  ну очень просто выглядит, это среды itemize и enumerate, itemize списки маркированные, enumerate
[48:13.100 --> 48:21.900]  номерованные, тут наверное даже ничего кодить показывать не буду, вроде все очевидно и команда
[48:21.900 --> 48:28.700]  item говорит что вот мы начинаем очередной пункт нашего списка, при этом даже не важно они
[48:28.700 --> 48:32.940]  оделены друг от друга, новый строкой или не оделены, все равно он будет понимать что это как бы
[48:32.940 --> 48:40.700]  новый абзац, новый item и правильно все отрисовывалось, давайте так понятно ли, если понятно то не будем
[48:40.700 --> 48:51.500]  задерживаться, довольно просто, ну в целом понятно да, списки бывают вложенными, тут я примера
[48:51.500 --> 48:55.980]  проводить не стал, потому что он очень много места занимает в презентажке, давайте один наберу
[48:55.980 --> 49:02.460]  какой-нибудь элементарный, допустим у нас есть маркированный список, внутри него на первом
[49:02.460 --> 49:09.860]  item еще есть маркированный список, внутри еще и номерованный список, вот так тоже бывает,
[49:09.860 --> 49:30.460]  допустим какой-то контент еще написан, еще какие-то, увидим что это ничего не портит,
[49:30.460 --> 49:36.460]  вот те кстати умеют работать, это рисовывает нам правильно и даже уровень вложенности отражает
[49:37.060 --> 49:43.700]  при этом маркеры меняются, вот на первом уровне маркированного списка были точечки, на втором
[49:43.700 --> 49:49.660]  теряшке, если мы пошли дальше были бы еще другие символы, это можно менять, можно выбирать свои,
[49:49.660 --> 49:54.460]  ну то есть прям глобально указать какие будут символы использоваться в маркированных списках
[49:54.460 --> 50:01.500]  везде на уровне вложенности 2, но об этом мы тоже не будем говорить сегодня, а вот что я еще отмечу,
[50:01.500 --> 50:08.460]  что если мы сделаем списки номерованными, то номерация не просто будет запускаться
[50:08.460 --> 50:12.980]  заново для каждого уровня вложенности, она будет еще разного стиля, давайте посмотрим на это,
[50:12.980 --> 50:21.260]  вот как видим номерация первого уровня, она арабская, потом латинская, а потом вообще римские цифры,
[50:21.260 --> 50:28.140]  это тоже все редактируется вплоть до того, что можно тут ставить точки вместо скобок,
[50:28.140 --> 50:32.500]  но опять же об этом не сегодня, встроение стилей мне кажется тоже вполне приемлемой,
[50:32.500 --> 50:39.860]  а вот о чем стоит поговорить, что можно в этом itemize у конкретных маркеров менять, что там будет
[50:39.860 --> 50:45.060]  написано, вот типичные примеры, когда это бывает нужно, допустим вы доказываете слева направо и
[50:45.060 --> 50:50.300]  справа налево, тогда вам бывает удобно сделать какой-то маркированный список, в котором первый
[50:50.300 --> 50:54.940]  элемент будет помечен маркером стрелочек справа налево, а второй маркером стрелочек слева направо,
[50:54.940 --> 51:00.980]  ну типа будете доказывать в одну сторону в одном item, а в другую в другом item, я так все конкретно
[51:00.980 --> 51:08.300]  сделаю, постоянно использую, очень полезно, вот, хинтекс тут такой, что после item мы берем еще
[51:08.300 --> 51:12.700]  квадратные скобки, как мы помним это всегда какой-то необязательный аргумент, в данном случае это
[51:12.700 --> 51:17.260]  аргументы того, что собственно нарисовать вместо маркера, понятно ли, как это происходит,
[51:17.260 --> 51:28.460]  да понятно, предлагаю еще маленький примерчик на эту тему, сразу зафиксирую, что маркеры могут
[51:28.460 --> 51:36.380]  быть не одним символом, а любым количеством символов, допустим, какой-то причине нам
[51:36.380 --> 51:51.180]  хочется, чтобы это был маркер 1, маркер E2, а тут сам текст, текст 1, текст 2, давайте посмотрим,
[51:51.180 --> 52:00.900]  ну как видим, слова 1 и 2 стали маркерами, но понятно также, что если слово очень большое,
[52:00.900 --> 52:07.380]  то оно вылезает куда-то влево, к такому лотях не был готов, он все-таки пусть и не ограничивает
[52:07.380 --> 52:11.460]  вас, но ожидает, что маркер будет не очень большого размера, иначе форматирование куда-то
[52:11.460 --> 52:17.900]  полетит, вот, лучше так не делать, думаю с этим все, вот, и немножко про теоремы,
[52:17.900 --> 52:23.860]  мы в прошлый раз заикались, как это делается, тут это зафиксировано более подробно,
[52:23.860 --> 52:29.620]  первых напомню, что чтобы делать теоремы, ну то есть такие окружения, которые имеют вид,
[52:29.620 --> 52:36.860]  теорема номер такой-то, автора такого-то, далее текст, и весь формат текста заранее фиксирован,
[52:36.860 --> 52:42.860]  допустим, название теоремы жирным, название автора там просто буквами, название текст теоремы
[52:42.860 --> 52:49.780]  курсивом, вот это сегодня капсулируется в теоремы, и делается это вот так, в приамбуле пишется
[52:50.540 --> 52:55.820]  модификатор TheoremStyle, подчеркну, это модификатор, то есть он действует, пока не будет применен
[52:55.820 --> 52:59.260]  другой модификатор стиле теоремы, то есть все теоремы, которые будут объявлены далее после этого
[52:59.260 --> 53:04.700]  модификатора, они по умолчанию имеют стиль Plane, стилей встроенных у нас 3, Plane, Definition и Remark.
[53:04.700 --> 53:10.340]  Plane делает название теоремы жирным, а текст теоремы курсивным, Definition делает название жирным,
[53:10.340 --> 53:16.460]  а текст обычным, Remark делает название курсивным, а текст обычным, но я предлагаю, например, посмотреть
[53:16.460 --> 53:21.340]  только на plane и вот раз я применил такой модификатор все что будет далее все
[53:21.340 --> 53:27.940]  объявления теорем они все используют стиль plane вот теорема является вот так
[53:27.940 --> 53:33.340]  это команда new theorem в которой два главных аргумента аргумент того как
[53:33.340 --> 53:36.940]  будет называться окружение этой теоремы на данном случае естественно
[53:36.940 --> 53:43.300]  назначим их theorem и второй аргумент какой текст будет отрисовываться вот
[53:44.300 --> 53:52.980]  аргумент необязательный который в квадратной скобке это номерация родителя за
[53:52.980 --> 53:56.140]  каким объектом будет номироваться данный объект
[53:56.140 --> 54:02.460]  допустим у нас есть номерация секций мы видели секции 1 2 3 все теоремы вида
[54:02.460 --> 54:07.540]  theorem поскольку мы указали им номироваться за секциями в секции 1
[54:07.540 --> 54:13.180]  будет иметь номера 1.1 1.2 и так далее секция 2 номера 1.2 2.1
[54:13.180 --> 54:17.140]  2.2 и так далее ну понятно а следствие будет номераться в
[54:17.140 --> 54:21.660]  честь теорем то есть если была теорема 1.2 то следствие после нее будет иметь
[54:21.660 --> 54:26.180]  номер 1.2.1 потом еще до следствия будет иметь номер 1.2.2
[54:26.180 --> 54:31.500]  ну и так далее ну и это поведение можно модифицировать можно поставить звезду
[54:31.500 --> 54:35.460]  чтобы номерации не было вообще у этого вида теорем допустим я хочу чтобы были
[54:35.460 --> 54:40.060]  все определения ненумерованными делаю нефтериум со звездой definition и
[54:40.060 --> 54:46.500]  вот определение вот предлагаю вам вообразить какой как какой эффект будет
[54:46.500 --> 54:52.060]  иметь такой вот код и потом в следующем слайде будет его результат
[54:52.060 --> 54:57.660]  там все обсудим а если мне например нужно теоремы в одном стиле следствие в
[54:57.660 --> 55:03.860]  другом я отдельно тогда ты делаешь ты меняешь модификатор стиля пишешь скажем
[55:03.860 --> 55:09.780]  вот вот здесь уже после этого всего theorem style definition и уже потом другие
[55:09.780 --> 55:14.660]  пишешь варианты нефтериум вот ну я думаю мы пример потом привезем
[55:14.660 --> 55:21.620]  предлагаю пока подумать вот написан вот такой код что произойдет а пруф он не
[55:21.620 --> 55:24.620]  определен да я предзабыл сказать извиняюсь
[55:24.620 --> 55:29.580]  пруф это теорема которые по умолчанию есть это такая штука которая пишет
[55:29.580 --> 55:33.660]  доказательства а в конце доказательства еще и ставит такой квадратик в конце
[55:33.660 --> 55:38.940]  но вот увидим ну в общем думаю вы прониклись предлагаю посмотреть что будет будет
[55:38.940 --> 55:44.900]  вот так вот давайте прямо посрочно мы говорим section 1 раздел делается новая
[55:44.900 --> 55:49.100]  секция называется первый раздел с первым номером потом мы говорим у нас есть две
[55:49.100 --> 55:53.020]  теоремы каждая теорема наследует номер от
[55:53.020 --> 55:57.740]  секшена потому что мы так указали поэтому у них будут номера 1.1 1.2
[55:57.740 --> 56:02.860]  ну вот действительно так оно и получилось потом используем встроенное
[56:02.860 --> 56:08.180]  окружение пруф как твоя до сеть не забыл сказать оно по умолчанию есть и
[56:08.660 --> 56:13.460]  и по умолчанию на русском языке пишет доказательства да если мы подключим пакет
[56:13.460 --> 56:17.260]  русского языка бэйбл но у нас он есть но мы в прошлый раз его подключили а то
[56:17.260 --> 56:25.420]  еще он как-то взаимодействует с пакетом пмс что-то там подозреваю что так ну то
[56:25.420 --> 56:30.340]  есть это все тоже вещь регулируемая если я напишу скажем пруф
[56:30.700 --> 56:37.180]  бигин пруф окружение среды и тут напишу какой-то текст то по умолчанию
[56:37.180 --> 56:41.060]  он конечно напишет мне доказательства с точкой ну он поймает что язык
[56:41.060 --> 56:44.700]  документов русский потому что мы это указали но я могу это менять я могу
[56:44.700 --> 56:48.220]  поставить здесь квадратные скобочки как необязательный аргумент и написать
[56:48.220 --> 56:51.420]  скажем пруф по-английски
[56:53.060 --> 56:58.100]  вот и будет английская пруф это редактируется ну давайте реальные
[56:58.100 --> 57:06.020]  эксперименты ради попробуем отрубить русский язык документа в мере что будет
[57:07.660 --> 57:14.900]  тут скорее сюда упадет если это сделаю это тоже поэтому это комментирую давайте
[57:14.900 --> 57:18.060]  попробуем просто пруф
[57:24.940 --> 57:28.820]  а поечисляем тоже надо отрубить
[57:31.300 --> 57:37.020]  да если мы отключаем русский язык то он по умолчанию пишет именно пруф вот
[57:37.020 --> 57:41.420]  так что мы проверили он определяется именно пакетом
[57:41.420 --> 57:45.500]  бейбл если мы укажем русский язык
[57:46.660 --> 57:51.420]  хорошо давайте смотреть дальше вот пруф доказательства она отрисовалась и
[57:51.420 --> 57:56.140]  что важно все доказательства завершают с таким квадратиком ну который обозначает
[57:56.140 --> 58:01.420]  его завершение собственно его можно менять на какой-то другой символ я
[58:01.420 --> 58:05.580]  этим никогда не пользовался если вам он очень не нравится может погулять как-то
[58:05.580 --> 58:09.860]  делается но мы про вот все такие вещи кастомитационные как менять какие-то
[58:09.860 --> 58:15.780]  конкретные символы мы попозже поговорим наверное не сегодня ну и вот дальше есть
[58:15.780 --> 58:19.860]  следствие которые у нас номируется вслед за теоремами то есть последний
[58:19.860 --> 58:24.460]  теорема была 1.2 следствие номируется 1.2.1 как мы
[58:24.460 --> 58:28.260]  ожидали но определение не номируется никак потому что это не номерованное
[58:28.260 --> 58:30.540]  окружение
[58:35.580 --> 58:40.180]  давайте дальше я хотел еще сегодня поговорить про только делать прям
[58:40.180 --> 58:44.860]  кастомное окружение с нуля но слайды сделать не успел я думаю что я могу
[58:44.860 --> 58:50.060]  сомпровизировать быстренько пока общая идея подробно будет следующий раз но вот
[58:50.060 --> 58:56.700]  есть такая команда new environment которая собственно не трудно догадаться что
[58:56.700 --> 59:04.580]  нужно писать название среды my environment и далее два
[59:04.580 --> 59:09.540]  аргумента это текст который предваряет то что происходит среде вот он текст
[59:09.540 --> 59:12.540]  который ну замыкает среду допустим мы хотим сделать чтобы он был
[59:12.540 --> 59:15.940]  центрированным и при этом жирным давайте значит тут писать begin
[59:15.940 --> 59:25.580]  center и еще bfs помните манификатор bfs который все что далее до конца области
[59:25.580 --> 59:31.100]  видимости делать жирным вот предлагаю его использовать то есть так мы скажем что
[59:31.100 --> 59:36.540]  вот мы хотим чтобы перед началом нашей среды написался текст begin
[59:36.540 --> 59:41.260]  центр и bfs но ведь по окончании среды нужно закрыть окружение
[59:41.260 --> 59:46.140]  центр чтобы ничего не упало поэтому по окончании пишем инцентр
[59:46.140 --> 59:54.740]  так что работать попробуем завернуть вот это вот сам в среду македонф
[59:54.740 --> 01:00:04.260]  ну вот сработала мы сделали свою среду которая какой-то код вставляет до текста
[01:00:04.260 --> 01:00:09.060]  в частности вот такой какой-то код вставляет после текста вот такой и
[01:00:09.060 --> 01:00:13.100]  комплиирует то что получится то есть на самом деле тут begin center он тоже
[01:00:13.100 --> 01:00:17.580]  разворачивается в еще выше определенную среду которая тоже в
[01:00:17.580 --> 01:00:22.260]  начале пишет какой-то текст в конце пишет какой-то текст и вот раскрывается
[01:00:22.260 --> 01:00:27.220]  реклассивно пока мы не упрёмся в чисто тех которые будут комплировать среды
[01:00:27.220 --> 01:00:31.580]  в общем-то это просто способа инкапсулировать какой-то код вот идея
[01:00:31.580 --> 01:00:35.860]  такая но надеюсь что вот такой пример крайней мере понять сложные примеры
[01:00:35.860 --> 01:00:38.900]  сегодня мы не будем слушать
[01:00:44.980 --> 01:00:51.780]  но надеюсь что так и еще сегодня стоит поговорить немножко про формулу в
[01:00:51.780 --> 01:00:56.260]  прошлый раз мы начали но как бы тут уровень погружения очень много вот мы
[01:00:56.260 --> 01:00:59.620]  сегодня на вторую уровень спустимся смотрим на более сложные примеры
[01:00:59.620 --> 01:01:07.340]  первых шрифты я их анонсировал как менять шрифты внутри математики есть именно
[01:01:07.340 --> 01:01:11.620]  команды уже не модификатор а именно команды которые свои аргументы
[01:01:11.620 --> 01:01:17.460]  преобразует такой конкретно шрифт есть разные шрифты математики их больше чем
[01:01:17.460 --> 01:01:22.940]  здесь их даже по умолчанию штук 10 но это типичные которые полезны 8 шрифт
[01:01:22.940 --> 01:01:28.300]  мэд биби нужно чтобы отрисовывать какие-то там множество чисел натуральных
[01:01:28.300 --> 01:01:33.860]  целых и вещественных как всегда есть аргумент в один символ то можно без
[01:01:33.860 --> 01:01:37.660]  колокова указывать вот именно символ эр заворачивается в модификатор мэд биби
[01:01:37.660 --> 01:01:42.660]  и становится у такого шрифта есть шрифт мэд биф но жирная шрифт с которой
[01:01:42.700 --> 01:01:49.740]  обычно отрисовывают какие-то векторы есть шрифт матор м это шрифт просто прямой
[01:01:49.740 --> 01:01:54.900]  обычной как в лотехе ну как в обычном тексте в лотехе им обычно отрисовываются
[01:01:54.900 --> 01:01:59.460]  операторы но вот если мы хотим сделать не оператор а просто не что такого же
[01:01:59.460 --> 01:02:04.920]  шрифта мы применяем модификатор маторе вернее команду матором и через мат сф
[01:02:04.920 --> 01:02:10.140]  средь без засечек который тоже бывает полезен там для того чтобы называть
[01:02:10.140 --> 01:02:14.100]  задачи сложности участений что писать там от ожидания гиперсию вот так он
[01:02:14.100 --> 01:02:20.660]  выглядит есть шрифт холиграфический москал он тоже бывает нужно чтобы часто
[01:02:20.660 --> 01:02:24.540]  наверное в лекциях слышали что-то вроде там п красивая или красивая вот
[01:02:24.540 --> 01:02:29.420]  обычно когда что-то такое говорят имеет в виду буквы с таким вот эффектом такой
[01:02:29.420 --> 01:02:33.860]  красивый шрифт да повторюсь их довольно много есть
[01:02:34.860 --> 01:02:41.180]  чтобы их использовать нужно их подключать и еще такое наблюдение каждый
[01:02:41.180 --> 01:02:46.660]  раз писать матор наверное длинно поэтому я например часто делаю вот так я говорю
[01:02:46.660 --> 01:02:52.980]  new command заменяем москал вернее она делает
[01:02:52.980 --> 01:02:58.660]  большинстве москал пишет скажем мс ну то есть покороче тогда если я напишу
[01:02:58.660 --> 01:03:05.920]  тут мс и то получу или красивую но при этом меньше кодом набрав вот это
[01:03:05.920 --> 01:03:09.700]  типичный прием если вас очень часто встречается какой-то модификатор вы
[01:03:09.700 --> 01:03:12.660]  мне каждый раз его набирать вы придумываете более короткое название
[01:03:12.660 --> 01:03:18.860]  делаете вот так понятно ли здесь
[01:03:20.100 --> 01:03:27.420]  окей ну и вот комментированная тоже сегодня проблема про пределы вот есть
[01:03:27.420 --> 01:03:30.940]  такие операторы типа сумма произведения у которых индексация по
[01:03:30.940 --> 01:03:36.060]  умолчанию переходят вверх или вниз ну то есть если я сделаю что-то типа сам
[01:03:36.060 --> 01:03:41.540]  нижний индекс верхний индекс то то что в индексах будет находиться не никак
[01:03:41.540 --> 01:03:46.020]  индексовых положениях а именно что сверху и снизу по крайней мере если мы
[01:03:46.020 --> 01:03:49.700]  находимся на новой строке то есть в окружении которые экранированы квадратные
[01:03:49.700 --> 01:03:56.860]  скобки вот если мы всем не находимся по умолчанию сам не делает так он их
[01:03:56.860 --> 01:04:01.380]  помещает все-таки справа от себя чтобы не выращивать высоту строки но это
[01:04:01.380 --> 01:04:04.940]  можно редактировать можно для этого насильно перед командой сам вернее
[01:04:04.940 --> 01:04:10.060]  после команды сам поставить команду limits команда limits говорит что предыдущий
[01:04:10.060 --> 01:04:16.140]  оператор вот у него теперь индексы сверху и снизу они в положенном месте
[01:04:16.140 --> 01:04:20.780]  тут это и происходит мы после команды сам пишем limits и теперь индексы
[01:04:20.780 --> 01:04:25.780]  оказываются сверху и снизу строки строка разрослась это вообще не очень
[01:04:25.780 --> 01:04:31.340]  хорошо но если вам очень хочется можно делать вот так и еще мы отмечали что у
[01:04:31.340 --> 01:04:38.020]  нас дроби бывают маленького размера которые внутри строки и обычного вот если
[01:04:38.020 --> 01:04:42.520]  мы пытаемся делать дроби на новой строке то все команды для дробей фраг или
[01:04:42.520 --> 01:04:46.380]  дифраг они делают одно и то же вот что такое команда дифраг она говорит что
[01:04:46.380 --> 01:04:52.100]  если мы находимся внутри строки то есть форм лежатого вида то в ней мы все
[01:04:52.100 --> 01:04:56.900]  равно отрисовываем полного размера дробь вот то есть просто фраг отрисовывает
[01:04:56.900 --> 01:05:03.060]  маленькую драк вот а дифраг отрисовывает дробь полноразмерная даже если
[01:05:03.060 --> 01:05:11.460]  внутри строки вот все отличия вот понятно ли здесь можно же какой-то примерчик еще
[01:05:16.460 --> 01:05:28.860]  например ну например что бы такое ну ладно пусть есть просто какое-то абстрактное
[01:05:28.860 --> 01:05:38.340]  произведение н-чисел его можно как записать с равно а умножить на 1 на 2 и так далее
[01:05:38.340 --> 01:05:47.220]  точки times а вот как мы там можем переписать нотации какой-то краткой можно сделать
[01:05:47.220 --> 01:05:55.300]  ворот и индексы и от одного дайан бегает умножаются айты посмотрим как это выглядит
[01:05:55.300 --> 01:06:07.220]  вот как видим у нас пока что пределы указываются ну как индексы просто и
[01:06:07.220 --> 01:06:15.420]  попробую сделать то же самое формуле которая вот квадратные скобочки я утверждаю что эти
[01:06:15.420 --> 01:06:21.180]  пределы переедут сверху снизу буквы п ну и вообще фарон будет по центру она будет большой красивый но
[01:06:21.180 --> 01:06:27.820]  вот это главный эффект индексы переехали если бы мы хотели чтобы также это выглядело в 3 строке
[01:06:27.820 --> 01:06:42.460]  мы для этого насильно ставим команду limits вот как видим индексы переехали при этом сама
[01:06:42.460 --> 01:06:49.500]  буквы п больше не стало ну если вдруг нам очень хотелось чтобы индексы были сверху и снизу мы
[01:06:49.500 --> 01:06:55.940]  этого можем добиться команды limits та же самая история с дробями допустим у нас это выражение
[01:06:55.940 --> 01:07:06.420]  там 1 вторая 1 вторая и то же самое здесь сейчас дроби которые в этой формуле и в этой будут
[01:07:06.420 --> 01:07:12.900]  разного размера здесь они полноразмерные здесь маленькие если бы мы хотели чтобы тут они были
[01:07:12.900 --> 01:07:19.900]  тоже большие мы бы делали команду не фраг а ди фраг иди от слова дисплей если не ошибаюсь
[01:07:19.900 --> 01:07:31.420]  вот вот все отличие теперь должен быть нормально ну да понятно кей кажется я обещал еще какой-то
[01:07:31.420 --> 01:07:39.380]  пример довольно давно но я про него забыл давайте предоставим как это могло возникать наверное
[01:07:39.380 --> 01:07:44.140]  где-то про теоремы да да что будет если будут разный стиль теорем я про это вспомню в конце
[01:07:44.140 --> 01:07:51.700]  занятия давайте чел договорим тоже про матику ну вот есть разные вид стрелок допустим многие из
[01:07:51.700 --> 01:07:58.380]  вас наверное налоги привидели что там сопоставление оператору матрицы имеет вот такой вид там
[01:07:58.740 --> 01:08:07.900]  стрелочка влево вправо буквы и индекса какая-то матрица вот наверное такая аннотация у вас
[01:08:07.900 --> 01:08:16.620]  встречалась вот есть у нее альтернатива можно писать это е тоже сверху или снизу как это
[01:08:16.620 --> 01:08:22.540]  сделать но есть два варианта можно насильно снова поставить лимит как мы делали это другими
[01:08:22.540 --> 01:08:32.820]  операциями а или даже нельзя потому что это не операция тем хуже значит так вообще
[01:08:32.820 --> 01:08:39.780]  сделать нельзя но допустим мы пока пытаемся жить вот так у нас возникает какой-то большой индекс
[01:08:39.780 --> 01:08:48.140]  много букв я ну получается что-то не очень приятное выглядящая как это ну не естественно далеко
[01:08:48.140 --> 01:08:54.700]  буква остается буквы фи чтобы этого избежать есть такая штука как x left right arrow ну и вообще
[01:08:54.700 --> 01:09:03.180]  в вариации строк ой в вариации стрелок у которой x в начале это нам производит строку у которой
[01:09:03.180 --> 01:09:10.180]  теперь есть аргументы в куриных скобках и кажется еще один квадратных сейчас если ошибется то
[01:09:10.180 --> 01:09:15.340]  даже не ошибся вот он принимает аргумент в куриных скобках и отрисовывает его уже прям над
[01:09:15.340 --> 01:09:19.740]  стрелкой и более того стрелку он делает ровно того размера какого надо постраивать под текст
[01:09:19.740 --> 01:09:26.180]  вот насколько я помню у него два аргумента еще есть квадратный аргумент сейчас посмотрю да все
[01:09:26.180 --> 01:09:32.140]  так и тут тоже можно что-то написать и вот он отрисует нам снизу сколько нужно сверху сколько
[01:09:32.140 --> 01:09:38.100]  нужно и выберет еще правильную длину вот такой хороший оператор советую использовать когда
[01:09:38.100 --> 01:09:43.940]  возникает необходимость если что-то большое подписываю подписываю сейчас стрелку ну и здесь
[01:09:43.940 --> 01:09:49.580]  я еще привел такой примерчик что можно посреди формулы набирать обычный текст это делается
[01:09:49.580 --> 01:09:56.300]  внутри команды текст тут даже как-то добавить нечего если мы просто тут будем набирать
[01:09:56.300 --> 01:10:02.260]  какой-то русский текст то это ну может и скомплируется но я не уверен но даже
[01:10:02.260 --> 01:10:06.420]  если комплируется тут просто ничего не будет потому что лотех не поддерживает русский язык
[01:10:06.420 --> 01:10:10.660]  математики ну допустим нам нужен какой-то текст посреди формулы вот очень хочется
[01:10:11.260 --> 01:10:21.060]  берем команду текст и не заворачиваю вот ну тут конечно до пробелы игнорируется
[01:10:21.060 --> 01:10:27.700]  поэтому это переспроставите собственноручно именно что в начале блока с обычным текстом но
[01:10:27.700 --> 01:10:37.540]  по крайней мере это работает вот ну вот что еще отмечу вот эти вот приемы как делать какие-то
[01:10:37.920 --> 01:10:44.040]  апператоры который сверху снизу ограничение пределы как делать длинные стрелки лучше делать
[01:10:44.040 --> 01:10:50.660]  это формулах которые в центре строки вот вот таких почему-то я так и не нашел у них названия
[01:10:50.660 --> 01:10:55.740]  как-то официально но вот лучше это делать формулах которые по центру а тех которые внутри текста
[01:10:55.740 --> 01:11:01.540]  лучше так не делать потому что они нарушают целостность текста нарушают баланс высот строк
[01:11:01.540 --> 01:11:07.020]  но это не очень красиво и не очень правильно, поэтому вообще эта команда довольно-таки злые,
[01:11:07.020 --> 01:11:14.380]  по крайней мере команда limits, то есть если вы хотите чтобы оператор принимал индексы качества
[01:11:14.380 --> 01:11:19.980]  верхнего и нижнего пределов, то вы лучше делать сразу оператор со звездой, то есть declare mass
[01:11:19.980 --> 01:11:28.460]  оператора звезда, и тогда он будет в формуле посреди строки вести себя как обычный оператор
[01:11:28.460 --> 01:11:33.980]  с индексами, а в формуле вот такой как оператор у которого предел, вот лучше делать так.
[01:11:33.980 --> 01:11:45.740]  Осталось немного, еще тут просто некая солянка из разных способов рисовать что-то над символами,
[01:11:45.740 --> 01:11:49.740]  это бывает полезно, там какие-то производные по времени точками, кажется, отображаются
[01:11:49.740 --> 01:11:57.380]  проколутые окрестности кружочком, например, и такие преобразования фурье этими крышечками,
[01:11:57.380 --> 01:12:04.180]  но синтез вот такой, есть команды, которые отрисовывают над заданным блоком текста заданную
[01:12:04.180 --> 01:12:09.660]  картиночку, почему есть короткий длинный вариант, давайте посмотрим, допустим мы хотим взять head
[01:12:09.660 --> 01:12:18.740]  над какой-то строкой, которая довольно длинная, посмотрим что будет, ну вообще говоря он сделал
[01:12:18.740 --> 01:12:24.140]  то что мы хотели, он написал стринг и сделал крышечку над ней, но крышечка, согласитесь,
[01:12:24.140 --> 01:12:29.500]  но неправильного размера, потому что это просто символ head, а вот крышечка регулируемого размера
[01:12:29.500 --> 01:12:36.260]  это whitehead, но что ожидаемо широкая крышечка, ну вот, наверное, мы хотели чтобы это было так,
[01:12:36.260 --> 01:12:42.860]  и вот подобный аналог есть у всех команд, тут я их привел, в презентацию вы можете почитать,
[01:12:42.860 --> 01:12:50.820]  тут увереный вопрос быть не должно, все более-менее понятно, и вот то что я сегодня хотел рассказать,
[01:12:50.820 --> 01:12:58.220]  но чувства уже будет многовато, есть еще разные другие окружения математические, не только парные
[01:12:58.220 --> 01:13:05.100]  доллары, парные квадратные скобки, а окружение виды там equation, line, mouth line и так далее, вот давайте я
[01:13:05.100 --> 01:13:09.220]  буквально пару примеров использования приведу, а подробно говорить не буду, потому что они вообще
[01:13:09.220 --> 01:13:18.220]  полезны, что такое equation, это уже среда, то есть делается begin и end, то что происходит внутри,
[01:13:18.220 --> 01:13:23.700]  по умолчанию уже математическая, вот, это такая среда, в которую уже как бы инкапсулирована
[01:13:23.700 --> 01:13:33.260]  математичность, если можно так сказать, в чем особенность, equation нумируется, то есть тут
[01:13:33.260 --> 01:13:42.900]  появится номер уравнения, и что естественно новое уравнение будет иметь новый номер, вот,
[01:13:42.900 --> 01:13:49.580]  эту номерации можно управлять, можно менять тут, скажем, чтобы была тут латиница, или там римские числа,
[01:13:49.580 --> 01:13:57.460]  или чтобы тут вообще были какие-то нужные вам спецсимволы, а не какая-то номерация правильная,
[01:13:57.460 --> 01:14:03.380]  мы про это поговорим в следующий раз, вот сейчас не будем, ну и как всегда есть ненумерованный вариант
[01:14:03.380 --> 01:14:10.020]  со звездой, вот, можно поставить звезду, тогда то что здесь на самом деле просто эквивалентно,
[01:14:10.020 --> 01:14:14.900]  эквивалентно окружению из квадратных скобок, просто формула посреди строки,
[01:14:14.900 --> 01:14:21.140]  вернее, на новой строке, без нумерации, без всего, это все то же самое, есть ряды более продвинутые,
[01:14:21.140 --> 01:14:26.480]  если die-line, то, к сожалению, подробно поговорить сегодня я не успею, поэтому давайте только один
[01:14:26.480 --> 01:14:37.260]  пример, эта штука нужна, чтобы написать несколько формул в одном блоке, допустим тут 1х равно бы 1,
[01:14:37.260 --> 01:14:47.700]  потом, как в таблицах, новая строка выделяется двойным бэкслэшем, а2х равно b2, и так далее,
[01:14:47.700 --> 01:14:58.460]  dots, anx равно an, что делает line, ну он просто позволяет отрисовывать это все, забыл про новую строку,
[01:14:58.460 --> 01:15:04.060]  отрисовывать это все сверху вниз, почему он называется line, потому что можно выбирать,
[01:15:04.060 --> 01:15:11.420]  по какому символу равнять эти строки, подумайте, что будет длинная нарисована,
[01:15:11.420 --> 01:15:20.020]  я могу сказать, вот поставлю я апельсанд, вот здесь, вот здесь, вот здесь и вот здесь,
[01:15:20.020 --> 01:15:27.860]  что будет, line выровняет все строки так, чтобы символы помещены апельсандом были на одной
[01:15:27.860 --> 01:15:35.540]  вертикальной прямой, давайте посмотрим, вот тут я пометил символы равенства и символ
[01:15:35.540 --> 01:15:43.180]  точечек, вот они все на одной вертикальной прямой, очень удобно, вариант alina без звезды,
[01:15:43.180 --> 01:15:47.660]  он нумерованный, там довольно сложные правила нумерации, мы сегодня тоже не будем говорить,
[01:15:47.660 --> 01:15:51.500]  ну то есть он нумерует каждую строку по отдельности, это тоже все регулируется,
[01:15:51.500 --> 01:15:59.100]  но об этом не сейчас, и вот есть среда gather, которая делает почти то же самое, но тут уже нету
[01:15:59.100 --> 01:16:04.860]  апельсандов для выравнивания, она просто равняет все по центру, если вам лень выяснять, где там у
[01:16:04.860 --> 01:16:10.780]  вас центр, как там выравнивать, но gather это хорошая среда, она помогает, она просто берет кучу формул
[01:16:10.780 --> 01:16:17.420]  и кидает их по центру, опять же есть наоборот нумерованная версия, которая без звезды, тоже
[01:16:17.420 --> 01:16:22.100]  там есть какие-то правила нумерации, но про них тоже сегодня мы говорить не будем, и последнее,
[01:16:22.100 --> 01:16:33.100]  что хочется отметить, я думаю сегодня, это среда multline, а что это из названия, это одна большая
[01:16:33.100 --> 01:16:38.780]  формула, разбита на несколько строк, допустим у нас длиннющая сумма, не знаю, один, плюс два,
[01:16:38.780 --> 01:16:46.460]  плюс три, плюс так далее, такая большая, что не влезает у нас, не влезает в одну строку,
[01:16:46.460 --> 01:17:01.300]  сделаем так, еще точки, допустим у нас есть еще строка, в которой просто точки,
[01:17:01.300 --> 01:17:18.940]  посмотрим, что получится, вот получится, да, то наверное лучше три строки сделать, чтобы не было
[01:17:18.940 --> 01:17:24.900]  проблем, в общем, это среда, которая равняет строки так, чтобы они были на одной диагонали начинались,
[01:17:24.900 --> 01:17:30.100]  вот, то есть, если строки были еще длиннее, допустим, я сделаю их еще вдвое больше,
[01:17:30.100 --> 01:17:41.580]  давайте вот так, то тогда оно делает так, чтобы центры этих строк геометрически находились на
[01:17:41.580 --> 01:17:46.100]  одной диагональной прямой, ну как бы отрисует одну длинную формулу более-менее корректно,
[01:17:46.100 --> 01:17:52.820]  вот для этого нужно это окружение, длинные формулы встречаются, с ними почти всегда работают
[01:17:53.820 --> 01:17:59.100]  и опять, если вам не нужна номерация, то используем звезду, я, честно скажу,
[01:17:59.100 --> 01:18:04.740]  номерация сам не пользуюсь почти никогда, как-то мне без нее проще, потому что ее настраивать довольно
[01:18:04.740 --> 01:18:12.700]  лениво, ну вот, как ее настраивать, мы поговорим попозже, вот, и последний обычный пример, как делать
[01:18:12.700 --> 01:18:18.740]  теоремы разного стиля, рамках одного документа, вот, тут у нас что-то происходило, сделали
[01:18:18.740 --> 01:18:25.220]  new theorem plane, потом объявили сколько-то теорем, как бы мы делали, если бы у нас потребовалось
[01:18:25.220 --> 01:18:30.900]  поменять стиль теоремы, напомню, SerumStyle это модификатор, пока что у нас все теоремы,
[01:18:30.900 --> 01:18:35.380]  которые объявляются, будут иметь стиль plane, чтобы это изменить, нужно применить другой модификатор,
[01:18:35.380 --> 01:18:41.660]  допустим, SerumStyle Remark, все поменяли, теперь все, что будет дальше, через это будет после этой
[01:18:41.660 --> 01:18:46.740]  строки, новые теоремы будут получать, ну, новые объявленные теоремы команды new theorem будут
[01:18:46.740 --> 01:18:53.540]  получать SerumStyle Remark, допустим, так и сделаю, новый вид теорем, который будет называться что-то типа
[01:18:53.540 --> 01:19:04.020]  node и говорить замечания, убедимся, что они имеют разный стиль, там потребуется один definition для
[01:19:04.020 --> 01:19:18.940]  сравнения и один node, даже не буду ничего менять, посмотрим, ну вот, как видим, стиль поменялся,
[01:19:18.940 --> 01:19:26.180]  стиль definition plane предполагает жирное название и курсивный текст, стиль node Remark предполагает
[01:19:26.180 --> 01:19:34.900]  курсивное название и обычный текст, вот примерно то, чего мы и хотели, я надеюсь, что тот пример,
[01:19:34.900 --> 01:19:41.540]  который у меня спрашивали очень давно, это то, что вы хотели, да, супер, вот, думаю, что это
[01:19:41.540 --> 01:19:46.940]  сегодня все, что хотел рассказать, мы много покрыли, на самом деле, вот то, что нам за занятием
[01:19:46.940 --> 01:19:51.660]  обсудили, вам уже хватает, чтобы прям сесть и писать целый конспект текций, целый курс, если вам
[01:19:51.660 --> 01:19:57.500]  тут захочется, вот, но тут еще есть много чего, что стоит обсудить, какие-то полезные техники,
[01:19:57.500 --> 01:20:02.380]  которые позволят как-то глубже понять, как это работает, это у нас все еще будет.
