[00:00.000 --> 00:15.000]  Сегодня рк-разбор. Попытка посмотреть на что-то не в терминах автоматов, чтобы понять, что надо делать, почему это будет работать.
[00:15.000 --> 00:24.000]  Была просьба взять предотвратительство, я докажу основную теорему. Некоторые ссылки оставлю открытыми, потому что кажется, что у меня может быть время.
[00:24.000 --> 00:30.000]  Я стараюсь своей целью объяснить, что конкретно в этом ритме происходит, и как его реализовать.
[00:30.000 --> 00:37.000]  С поправками на то, что там некоторые вещи будут неоптимальными, но я считаю это хорошее упражнение для политического трека, подумать как-то и писать прям пас.
[00:37.000 --> 00:43.000]  У нас рк-разбор, о нем надо думать как о том, как предпочтать он ритм early.
[00:43.000 --> 00:51.000]  На самом деле существуют задачи, я его в конце дан, так на подумать. У меня она была в домашнем задании, тут она будет очень стабциональная.
[00:51.000 --> 00:57.000]  Ситуация есть, а ситуация там. На самом деле это одно и то же, но обо всем по порядку.
[00:57.000 --> 01:09.000]  Рк-разбор это некоторая тема, набор правил. Любой разбор вида лр, перенос свертка, сделан функциями.
[01:09.000 --> 01:13.000]  Это функция действия, это экшн-функция.
[01:13.000 --> 01:18.000]  Функция перехода.
[01:18.000 --> 01:25.000]  Как бы вы не писали лр, на самом деле то, что скроют на один способ писатель лр, есть некоторые другие способы, у вас будет система правил.
[01:25.000 --> 01:31.000]  f это функция, которая на каждом шайке смотрит как символов.
[01:31.000 --> 01:35.000]  Или не больше, чем как символов, если у нас строка кончилась.
[01:35.000 --> 01:41.000]  Сейчас я напишу sigma объединен с пустым словом.
[01:41.000 --> 01:46.000]  Умный все равно по этой степени.
[01:46.000 --> 01:48.000]  И возвращаю это из действий.
[01:48.000 --> 01:52.000]  Что нужно сделать? Вы видите как символов в следующей налете.
[01:52.000 --> 01:58.000]  Нужно сделать либо перенос, либо свертку по какому-то правилу.
[01:58.000 --> 02:02.000]  Либо у нас будет use 0, это свертка по другому правилу.
[02:02.000 --> 02:07.000]  Это тоже самое, что принятие.
[02:07.000 --> 02:11.000]  Либо отвернуть.
[02:11.000 --> 02:14.000]  Что это за нулевое правило такое?
[02:14.000 --> 02:18.000]  Назовем граммачку пополненной, если мы такое нулевое правило добавим.
[02:18.000 --> 02:22.000]  То есть мы введем новый символ, это штриги, проводится сахарный символ, а здесь выводится все.
[02:22.000 --> 02:27.000]  Это как бы НФКомского, вы хотите потребовать, чтобы вот этот символ нигде больше не встречался, в правых частях.
[02:27.000 --> 02:33.000]  Если свернулись по новому правилу, то есть как только вы совершили свертку вот так, это означает, что ваше слово точно в языке.
[02:33.000 --> 02:38.000]  Более того, вы это неправильно сделаете.
[02:38.000 --> 02:43.000]  Это вы следоваете из того, что у нас будет лева, что если существует сплата, то есть какой-то вывод.
[02:43.000 --> 02:49.000]  Вот здесь, если существует вывод, применяющий это правило, то это вывод нашим словом и будет.
[02:49.000 --> 02:51.000]  Поэтому это reduce 0.
[02:51.000 --> 02:55.000]  Здесь критично важно, чтобы символа не было в правых частях.
[02:55.000 --> 02:57.000]  Иначе вы не поймете, вы выбили...
[02:57.000 --> 03:05.000]  Вот в случае 180-х ленок, то есть IFS ε, вы не поймете, вы выбили это международное или уже окончательное.
[03:05.000 --> 03:08.000]  Поэтому нужно, чтобы он был уникальным.
[03:08.000 --> 03:16.000]  Здесь замечу, что в случае переноса мы не думаем, в какое состояние мы переходим.
[03:16.000 --> 03:18.000]  Поэтому...
[03:18.000 --> 03:21.000]  Ну тут, на самом деле, кроме...
[03:21.000 --> 03:24.000]  Здесь еще мы видим уровня состояния в ПТС.
[03:24.000 --> 03:27.000]  В терминах книги, которые сейчас рассказываю,
[03:27.000 --> 03:31.000]  а это тот, кто говорит 430-е строительство Аха Ульмана,
[03:31.000 --> 03:34.000]  будет система функций, ну, ту же самую функцию двух перемен.
[03:34.000 --> 03:37.000]  Вот эта пара называется alert-таблицей.
[03:37.000 --> 03:39.000]  То есть у нас творится alert-таблиц.
[03:39.000 --> 03:42.000]  То есть эта вещь индексируется именно индексами.
[03:42.000 --> 03:44.000]  И вот что-то происходит.
[03:44.000 --> 03:46.000]  Находясь в каком-то состоянии,
[03:46.000 --> 03:48.000]  то есть мы смотрим на строку таблицы,
[03:48.000 --> 03:50.000]  и в виде окончательного мы выбираем, что делать.
[03:50.000 --> 03:53.000]  После того, как мы что-то сделали, нужно брать какую-то таблицу новую взять.
[03:53.000 --> 03:55.000]  Вот.
[03:55.000 --> 03:58.000]  Здесь функция, которая принимает уже одну букву.
[03:58.000 --> 04:01.000]  Либо σ, либо n.
[04:01.000 --> 04:04.000]  И что делает. Ну, очевидно, что с ним кто-то находится.
[04:04.000 --> 04:07.000]  Ну и показывает, куда надо идти.
[04:07.000 --> 04:11.000]  Можете в состоянии. Вот.
[04:11.000 --> 04:13.000]  Как происходит разбор?
[04:13.000 --> 04:15.000]  Мы смотрим на слово, на его первые k символы.
[04:15.000 --> 04:17.000]  Либо меньше, если у нас в символах меньше.
[04:17.000 --> 04:20.000]  Мы их забираем, смотрим на функцию.
[04:20.000 --> 04:22.000]  Делаем либо перерос, либо свертку.
[04:22.000 --> 04:25.000]  Ну, если что-то из этих, то мы разбор уже закончили.
[04:25.000 --> 04:30.000]  Если не перерос, то на переносе у нас появляется какая-то буква.
[04:30.000 --> 04:33.000]  Мы берем букву здесь, отправим ее на стэк.
[04:33.000 --> 04:36.000]  Что, как это произойдет со стэком, еще будет сказано.
[04:36.000 --> 04:38.000]  Ну, вот у нас появляется маленькая буква.
[04:38.000 --> 04:39.000]  На свертке.
[04:39.000 --> 04:41.000]  Если у вас программатика кс свободная,
[04:41.000 --> 04:43.000]  кс свободная,
[04:43.000 --> 04:47.000]  то у вас правило в том, что вы не так, а альфа.
[04:47.000 --> 04:49.000]  Если вы по нему свернулись, вы сгниливали большую букву.
[04:49.000 --> 04:50.000]  Вот она.
[04:50.000 --> 04:53.000]  То есть маленькая буква соответствует переносу, вы перенеслись,
[04:53.000 --> 04:55.000]  и теперь вы взяли функцию перехода.
[04:55.000 --> 04:57.000]  Вы перешли по этой букве.
[04:57.000 --> 04:59.000]  Большая буква соответствует свертке.
[04:59.000 --> 05:01.000]  Вы сгниливали большую букву себе сами,
[05:01.000 --> 05:03.000]  поставили на стэк.
[05:03.000 --> 05:05.000]  Она не переносится, она появляется на стэке,
[05:05.000 --> 05:06.000]  ходит в этот ритм.
[05:06.000 --> 05:08.000]  Пришел переход.
[05:08.000 --> 05:10.000]  Это опись утора разбора.
[05:10.000 --> 05:12.000]  Разбор тревелит.
[05:12.000 --> 05:14.000]  То есть сначала посмотри, что он дужден,
[05:14.000 --> 05:16.000]  потом перейди в новую таблицу.
[05:17.000 --> 05:19.000]  Дальше, вот если мы помним алгоритм Erli,
[05:19.000 --> 05:21.000]  что там происходило?
[05:21.000 --> 05:22.000]  Мы строили дерево разбора,
[05:22.000 --> 05:24.000]  и мы фокусировались на каком-то потере.
[05:24.000 --> 05:26.000]  Вот у нас была штрих,
[05:26.000 --> 05:28.000]  мы начинали разбор,
[05:28.000 --> 05:30.000]  доходили до буквы,
[05:30.000 --> 05:32.000]  и здесь брали какой-то кусочек.
[05:32.000 --> 05:34.000]  Альфа, точка, флэта.
[05:34.000 --> 05:35.000]  Алгоритм Erli.
[05:35.000 --> 05:37.000]  Это был на коробке, вы это все знаете.
[05:37.000 --> 05:39.000]  И в момент, когда мы были тут,
[05:39.000 --> 05:41.000]  когда мы видели здесь большую букву,
[05:41.000 --> 05:43.000]  мы фокусировались на этом поддереве,
[05:43.000 --> 05:45.000]  а про это как бы забывали.
[05:45.000 --> 05:47.000]  В комплит мы искали,
[05:47.000 --> 05:49.000]  какое правило породило это правило.
[05:49.000 --> 05:51.000]  И за это у нас был 20 квадрат.
[05:51.000 --> 05:53.000]  На самом деле кубический,
[05:53.000 --> 05:55.000]  но квадрат в лучшем случае.
[05:55.000 --> 05:57.000]  В алгоритме Erli та же картина.
[05:57.000 --> 05:59.000]  Вы по кому-то избираться,
[05:59.000 --> 06:01.000]  вы не смогли всю историю.
[06:01.000 --> 06:03.000]  Поэтому в стэк мы добавляем
[06:03.000 --> 06:05.000]  не только ту букву, которую мы видим,
[06:05.000 --> 06:07.000]  но автомат придет сверткой.
[06:07.000 --> 06:09.000]  Тоже был на колоколе.
[06:09.000 --> 06:11.000]  Автомат из двух состояний.
[06:11.000 --> 06:13.000]  Смотрите, что это.
[06:13.000 --> 06:15.000]  Здесь мы поставили букву Erli,
[06:15.000 --> 06:17.000]  и потом правило либо читаем на стэк,
[06:17.000 --> 06:19.000]  либо смотрите как бы все.
[06:19.000 --> 06:21.000]  Нам нужно помнить, что мы уже до этого
[06:21.000 --> 06:23.000]  по дереву прочитали.
[06:23.000 --> 06:25.000]  Для этого на стэк мы храним не только символы,
[06:25.000 --> 06:27.000]  но еще и состояние.
[06:27.000 --> 06:29.000]  Поэтому наш стэк
[06:29.000 --> 06:31.000]  в каждой адребе
[06:31.000 --> 06:33.000]  имеет такой вид.
[06:33.000 --> 06:35.000]  Там всегда будет это стартовое состояние.
[06:35.000 --> 06:37.000]  Дальше буквы
[06:37.000 --> 06:39.000]  и новое состояние.
[06:39.000 --> 06:41.000]  x и, s и,
[06:41.000 --> 06:43.000]  x и плюс один, s и плюс один.
[06:43.000 --> 06:45.000]  Всегда скажут, что у нас состояние,
[06:45.000 --> 06:47.000]  где мы сейчас находимся.
[06:47.000 --> 06:49.000]  Поэтому когда мы делаем свертку,
[06:49.000 --> 06:51.000]  мы сворачиваем не как здесь n символов,
[06:51.000 --> 06:53.000]  то есть вот он, 2 альфы,
[06:53.000 --> 06:55.000]  а 2 n символов, откатываясь назад.
[06:55.000 --> 06:57.000]  Откатились назад,
[06:57.000 --> 06:59.000]  это состояние, в котором мы находимся.
[06:59.000 --> 07:01.000]  В случае с функцией перехода,
[07:01.000 --> 07:03.000]  перенос, вы ставите букву сюда,
[07:03.000 --> 07:05.000]  вот состояние, вы из него переходите
[07:05.000 --> 07:07.000]  по букве,
[07:07.000 --> 07:09.000]  смотрите здесь, пишете новое состояние тут.
[07:09.000 --> 07:11.000]  Если свертка, вы все состерли,
[07:11.000 --> 07:13.000]  у вас появится большая буква.
[07:13.000 --> 07:15.000]  А.
[07:15.000 --> 07:17.000]  Видите состояние?
[07:17.000 --> 07:19.000]  Пишем состояние, которое там было.
[07:19.000 --> 07:21.000]  Ну не пишем, потому что уже было.
[07:21.000 --> 07:23.000]  Пишем больше буквы, которые мы получили,
[07:23.000 --> 07:25.000]  делаем функцию перехода из этого состояния.
[07:25.000 --> 07:27.000]  То есть почему я против автомата?
[07:27.000 --> 07:29.000]  Потому что в автоматах вот вы
[07:29.000 --> 07:31.000]  перешли по какой-то букве,
[07:31.000 --> 07:33.000]  перешли по новом состоянии.
[07:33.000 --> 07:35.000]  Единственный способ сменить состояние,
[07:35.000 --> 07:37.000]  это перейти по какой-то букве.
[07:37.000 --> 07:39.000]  Здесь не единственный способ.
[07:39.000 --> 07:41.000]  Здесь можно уйти в другое состояние,
[07:41.000 --> 07:43.000]  просто совершившись диноз.
[07:43.000 --> 07:45.000]  Это важно помнить, что это не перепадка в автомате.
[07:45.000 --> 07:47.000]  Это именно возвращение по истории.
[07:47.000 --> 07:49.000]  То есть когда мы достроим вот это дерево,
[07:49.000 --> 07:51.000]  мы фокусируемся вот на этом деле.
[07:51.000 --> 07:53.000]  Думаете об этом как о какой-то линзе.
[07:53.000 --> 07:55.000]  То есть вы поставите линзу тут,
[07:55.000 --> 07:57.000]  смотрите на этот кусочек.
[07:57.000 --> 07:59.000]  Вот, и так пока дерево не будет построено.
[08:01.000 --> 08:03.000]  Теперь немножко прямо теория.
[08:03.000 --> 08:05.000]  Человек был в разборке,
[08:05.000 --> 08:07.000]  если тут есть вопросы, скажите,
[08:07.000 --> 08:09.000]  как бы вы строили LRK,
[08:09.000 --> 08:11.000]  снова же, не единственный способ,
[08:11.000 --> 08:13.000]  что я вам сейчас рассказываю, что это оптимальные способы.
[08:13.000 --> 08:15.000]  Сейчас если кому интересно кайфа LRK,
[08:17.000 --> 08:19.000]  довольно интересная вещь,
[08:19.000 --> 08:21.000]  он тоже может строить состояние.
[08:21.000 --> 08:23.000]  Там не будут даже инквилиции,
[08:23.000 --> 08:25.000]  но при этом
[08:25.000 --> 08:27.000]  сложно состояние тоже будет какое-то.
[08:27.000 --> 08:29.000]  Эмоциальная машина остается.
[08:29.000 --> 08:31.000]  Последний шанс задать вопросы
[08:31.000 --> 08:33.000]  по поводу разбора,
[08:33.000 --> 08:35.000]  и сейчас переходим к строению.
[08:35.000 --> 08:37.000]  Да.
[08:37.000 --> 08:39.000]  Смотрите, что такое свертка.
[08:39.000 --> 08:41.000]  Вы когда были
[08:41.000 --> 08:43.000]  в шестой юнс автомате,
[08:43.000 --> 08:45.000]  вы забирали LRK,
[08:45.000 --> 08:47.000]  вставили A.
[08:47.000 --> 08:49.000]  Что означало, что
[08:49.000 --> 08:51.000]  ваш префикс, который вы прочитали,
[08:51.000 --> 08:53.000]  ваш вывод слова, которые вы сейчас отбираете,
[08:53.000 --> 08:55.000]  вот как я говорил,
[08:55.000 --> 08:57.000]  альфа-пет, и вы об это свернули.
[08:57.000 --> 08:59.000]  Означает, что
[08:59.000 --> 09:01.000]  в выводе до этого, тут
[09:01.000 --> 09:03.000]  стояла альфа-а, и оно раскрылось.
[09:03.000 --> 09:05.000]  Вы его спили обратно.
[09:05.000 --> 09:07.000]  То есть вы идете пошагово назад,
[09:07.000 --> 09:09.000]  пока не будет только с.
[09:09.000 --> 09:11.000]  Будут только отсюда идти h3, кажется, что все закончилось.
[09:11.000 --> 09:13.000]  Это так работает, как сверток-автомат.
[09:13.000 --> 09:15.000]  Потом вы заметили, что
[09:15.000 --> 09:17.000]  здесь проблема с историей.
[09:17.000 --> 09:19.000]  То есть вы не вспомните при какой,
[09:19.000 --> 09:21.000]  при каких обстоятельствах вы попадали в это
[09:21.000 --> 09:23.000]  поддерево, когда вы его начали детализировать.
[09:23.000 --> 09:25.000]  Вы были early, когда
[09:25.000 --> 09:27.000]  мы его изучали. Мы
[09:27.000 --> 09:29.000]  явно проверяли, а какая ситуация в этой ситуации
[09:29.000 --> 09:31.000]  породить, и комплетили все.
[09:31.000 --> 09:33.000]  Здесь комплетить все не надо,
[09:33.000 --> 09:35.000]  потому что есть сезонная ситуация, которая порождает.
[09:35.000 --> 09:37.000]  Сейчас я буду в определении.
[09:37.000 --> 09:39.000]  Поэтому мы точно знаем, где мы были
[09:39.000 --> 09:41.000]  в момент раскрытия этого правила.
[09:41.000 --> 09:43.000]  Асад сюда вернулся и пройти там
[09:43.000 --> 09:45.000]  по большой букве. То есть
[09:45.000 --> 09:47.000]  когда вы делали разбор,
[09:47.000 --> 09:49.000]  у вас шла буква A, она открывалась
[09:49.000 --> 09:51.000]  как альфа, б, бета.
[09:51.000 --> 09:53.000]  Вы тут все поделали,
[09:53.000 --> 09:55.000]  ушли в это поддерево.
[09:55.000 --> 09:57.000]  Сейчас...
[09:57.000 --> 09:59.000]  Нет, да, вот вы альфу прочитали,
[09:59.000 --> 10:01.000]  все полностью здесь раскрывали,
[10:01.000 --> 10:03.000]  начали читать б.
[10:03.000 --> 10:05.000]  Дочитали это концерт, там еще много шагов прошло,
[10:05.000 --> 10:07.000]  вы ее свернули.
[10:07.000 --> 10:09.000]  Впервые нужно почитать. Вы видите
[10:09.000 --> 10:11.000]  такой большой прыжок через нее, но
[10:11.000 --> 10:13.000]  этот прыжок совершается в состоянии, в котором вы были,
[10:13.000 --> 10:15.000]  когда это право раскрывали.
[10:15.000 --> 10:17.000]  То есть здесь, наверное, в дерево.
[10:17.000 --> 10:19.000]  Мы читали этот перерыв, читали его пассивно.
[10:19.000 --> 10:21.000]  Чтобы прочитать большую букву B, нужно прочитать
[10:21.000 --> 10:23.000]  все его поддерево.
[10:23.000 --> 10:25.000]  Надо вспомнить, что мы когда-то тут находились,
[10:25.000 --> 10:27.000]  а где мы тут находились?
[10:27.000 --> 10:29.000]  Вот в этом состоянии, вот оно.
[10:29.000 --> 10:31.000]  Поэтому на стеке мы пишем состояние, в котором мы были.
[10:31.000 --> 10:33.000]  Состояние отвечает
[10:33.000 --> 10:35.000]  за разбор вот этого поддерева, вот он.
[10:35.000 --> 10:37.000]  Соответственно,
[10:37.000 --> 10:39.000]  когда вы дерево дочитали, вам вот эта история не нужна.
[10:39.000 --> 10:41.000]  Но поскольку у вас справа до длины n,
[10:41.000 --> 10:43.000]  n букв,
[10:43.000 --> 10:45.000]  а тут у вас
[10:45.000 --> 10:47.000]  правило-буква-правило-буква,
[10:47.000 --> 10:49.000]  то чтобы считать правило, нужно считать больше символов.
[10:49.000 --> 10:51.000]  Поэтому два n.
[10:51.000 --> 10:53.000]  Ну что это за состояние? Это состояние, в котором вы начали читать
[10:53.000 --> 10:55.000]  вот это правило.
[10:55.000 --> 10:57.000]  Вот эта вот буква B, она тут возникала.
[10:57.000 --> 10:59.000]  Сейчас будет ситуация, это будет виднее.
[11:01.000 --> 11:03.000]  Надеюсь, что это пока на вопрос,
[11:03.000 --> 11:05.000]  или отослал подождать до ситуации.
[11:05.000 --> 11:07.000]  Вот, ну сейчас-то все прояснится.
[11:09.000 --> 11:11.000]  Ну, раз уже до ситуации,
[11:11.000 --> 11:13.000]  давайте о ситуации поговорим.
[11:13.000 --> 11:15.000]  Что сделаем, когда ситуация не видна?
[11:17.000 --> 11:19.000]  Это вот такой объект.
[11:21.000 --> 11:23.000]  У нас есть
[11:23.000 --> 11:25.000]  alpha.beta
[11:25.000 --> 11:27.000]  и u.
[11:27.000 --> 11:29.000]  Вот, где
[11:29.000 --> 11:31.000]  astrel alpha beta
[11:31.000 --> 11:33.000]  лежит f,
[11:33.000 --> 11:35.000]  это какой-то правило в романчике.
[11:35.000 --> 11:37.000]  Вот, и u
[11:39.000 --> 11:41.000]  все, присоединен к братой.
[11:43.000 --> 11:45.000]  И есть ситуация, то же самое, как и early.
[11:45.000 --> 11:47.000]  Она означает, что сейчас мы обрабатываем
[11:47.000 --> 11:49.000]  вот это правило, вот оно тут.
[11:49.000 --> 11:51.000]  Точка дошла до позиции alpha,
[11:51.000 --> 11:53.000]  u это означает,
[11:53.000 --> 11:55.000]  какое слово мы ожидаем после этого.
[11:55.000 --> 11:57.000]  То есть мы моделируем вывод.
[11:57.000 --> 11:59.000]  Я это говорил в своей группе, сейчас скажу тоже тут,
[11:59.000 --> 12:01.000]  что когда выводите слово,
[12:01.000 --> 12:03.000]  выводите его слева направо.
[12:03.000 --> 12:05.000]  У вас s3,
[12:05.000 --> 12:07.000]  потом s,
[12:07.000 --> 12:09.000]  alpha 0, alpha 1,
[12:09.000 --> 12:11.000]  alpha n
[12:11.000 --> 12:13.000]  равно омега.
[12:13.000 --> 12:15.000]  Вывод правосторонний, то есть вы
[12:15.000 --> 12:17.000]  всякий раз находите самую правую букву, открываете
[12:17.000 --> 12:19.000]  самую правую букву, открываете.
[12:19.000 --> 12:21.000]  Вот.
[12:21.000 --> 12:23.000]  Собственно говоря, это означает, что в этом выводе
[12:23.000 --> 12:25.000]  последнее правило вот такое,
[12:25.000 --> 12:27.000]  за этим правилом,
[12:27.000 --> 12:29.000]  за beta находится
[12:29.000 --> 12:31.000]  слово u. То есть утверждается,
[12:31.000 --> 12:33.000]  что фиксируя слово, которое
[12:33.000 --> 12:35.000]  мы будем детально, мы однозначно
[12:35.000 --> 12:37.000]  прям следующие правила в выводе.
[12:37.000 --> 12:39.000]  Давайте посмотрим тут.
[12:39.000 --> 12:41.000]  Пусть у нас там alpha i имела вид.
[12:45.000 --> 12:47.000]  Так, alpha a,
[12:47.000 --> 12:49.000]  омега. И потом оно
[12:49.000 --> 12:51.000]  открылось в alpha.
[12:51.000 --> 12:53.000]  Вот.
[12:53.000 --> 12:55.000]  Собственно говоря,
[12:55.000 --> 12:57.000]  давайте здесь чтобы не плються, поставим разные буквы.
[12:59.000 --> 13:01.000]  Вот.
[13:01.000 --> 13:03.000]  Ну то есть у вас
[13:03.000 --> 13:05.000]  буква a, это маленькие буквы.
[13:07.000 --> 13:09.000]  Самая правую букву была a.
[13:09.000 --> 13:11.000]  Вы ее открыли по этому правилу.
[13:11.000 --> 13:13.000]  Вот она открылась, омега осталась.
[13:13.000 --> 13:15.000]  Дальше тут beta, где-нибудь еще будет большая
[13:15.000 --> 13:17.000]  буква, вы будете открывать.
[13:17.000 --> 13:19.000]  Вот. Значит мы говорим, что
[13:19.000 --> 13:21.000]  вот эта ситуация возникает, если есть такой
[13:21.000 --> 13:23.000]  вывод. И тут
[13:23.000 --> 13:25.000]  первый k-букв это u.
[13:27.000 --> 13:29.000]  Что такое первый k-букв, сейчас будет сказано.
[13:29.000 --> 13:31.000]  Но, значит,
[13:31.000 --> 13:33.000]  в темноте стека мы читаем,
[13:33.000 --> 13:35.000]  читаем, читаем. Мы дочитали вот это.
[13:35.000 --> 13:37.000]  Вот оно.
[13:37.000 --> 13:39.000]  Вот очко.
[13:39.000 --> 13:41.000]  И мы предполагаем, что этот стек
[13:41.000 --> 13:43.000]  откроется вот так.
[13:43.000 --> 13:45.000]  Тогда мы дочитаем дальше beta
[13:45.000 --> 13:47.000]  и свернемся.
[13:47.000 --> 13:49.000]  Вот.
[13:49.000 --> 13:51.000]  Значит теперь вот это более формально.
[13:51.000 --> 13:53.000]  Значит назовем активным префиксом.
[13:53.000 --> 13:55.000]  Если
[13:55.000 --> 13:57.000]  существует такой вывод,
[13:57.000 --> 13:59.000]  но который порождает,
[13:59.000 --> 14:01.000]  что-то у нас из s-штрих
[14:01.000 --> 14:03.000]  выводится, насколько угодно, правил
[14:03.000 --> 14:05.000]  правым образом,
[14:05.000 --> 14:07.000]  вот так,
[14:07.000 --> 14:09.000]  за один шаг
[14:09.000 --> 14:11.000]  выводится,
[14:11.000 --> 14:13.000]  за сколько угодно правил
[14:13.000 --> 14:15.000]  правым образом,
[14:17.000 --> 14:19.000]  вот так,
[14:19.000 --> 14:21.000]  за один шаг
[14:21.000 --> 14:23.000]  выводится,
[14:23.000 --> 14:25.000]  за один шаг
[14:25.000 --> 14:27.000]  выводится,
[14:27.000 --> 14:29.000]  за один шаг у нас выводится
[14:29.000 --> 14:31.000]  гамма, альфа, бет.
[14:31.000 --> 14:33.000]  Вот.
[14:33.000 --> 14:35.000]  И
[14:35.000 --> 14:37.000]  здесь.
[14:37.000 --> 14:39.000]  Так, использовать обозначение
[14:39.000 --> 14:41.000]  двухразночника это плохая примета,
[14:41.000 --> 14:43.000]  никогда так не делайте.
[14:43.000 --> 14:45.000]  Вот префикс. Что означает?
[14:45.000 --> 14:47.000]  Есть такой вывод, при котором этот префикс получается на стреке.
[14:47.000 --> 14:49.000]  Вспомним, как работает шифр
[14:49.000 --> 14:51.000]  вот эта вот штука из двух состояний.
[14:51.000 --> 14:53.000]  Она читает, читает, читает,
[14:53.000 --> 14:55.000]  читает буквы, в какой-то момент сворачивает.
[14:55.000 --> 14:57.000]  Вспомним, это стэк.
[14:57.000 --> 14:59.000]  На стэке можно только то, что находится
[14:59.000 --> 15:01.000]  правее всего. Нельзя взять со стэка,
[15:01.000 --> 15:03.000]  это середины. Поэтому, когда вы читаете,
[15:03.000 --> 15:05.000]  вы со стэка
[15:05.000 --> 15:07.000]  срываете край и ставите его.
[15:07.000 --> 15:09.000]  Что тут означает в темных префиксах?
[15:09.000 --> 15:11.000]  Вы наберете бета,
[15:11.000 --> 15:13.000]  в какой-то момент вы решите, вот там
[15:13.000 --> 15:15.000]  недетерминировано, а тут по набору правил,
[15:15.000 --> 15:17.000]  что пора бы свернуть.
[15:17.000 --> 15:19.000]  То есть, вы сделаете выбор
[15:19.000 --> 15:21.000]  в пользу такого вывода.
[15:21.000 --> 15:23.000]  Вот. Почему этот выбор
[15:23.000 --> 15:25.000]  правильный? Ну, определение такое
[15:25.000 --> 15:27.000]  будет.
[15:27.000 --> 15:29.000]  Что вот такой вывод, он
[15:29.000 --> 15:31.000]  однозначно определяется. Но
[15:31.000 --> 15:33.000]  это активный префикс. Если существует
[15:33.000 --> 15:35.000]  такой вывод, при котором
[15:35.000 --> 15:37.000]  вы можете получить на стэке.
[15:37.000 --> 15:39.000]  Лемма. Тут только активные префиксы возникают.
[15:39.000 --> 15:41.000]  Эта лемма связана с шифрами
[15:41.000 --> 15:43.000]  и автоматами.
[15:43.000 --> 15:45.000]  Сейчас, наверное, доказывать не будем.
[15:45.000 --> 15:47.000]  Вот.
[15:47.000 --> 15:49.000]  Ситуация для префикса
[15:49.000 --> 15:51.000]  является допустимой,
[15:51.000 --> 15:53.000]  если, ну,
[15:53.000 --> 15:55.000]  все, что тут написано, верно,
[15:55.000 --> 15:57.000]  что это означает, что в этом выводе
[15:57.000 --> 15:59.000]  последнее правило
[15:59.000 --> 16:01.000]  имело вот такой вид.
[16:01.000 --> 16:03.000]  У принадлежит ферстка
[16:03.000 --> 16:05.000]  А,
[16:05.000 --> 16:07.000]  В,
[16:07.000 --> 16:09.000]  В,
[16:09.000 --> 16:11.000]  В,
[16:11.000 --> 16:13.000]  В,
[16:13.000 --> 16:15.000]  В,
[16:15.000 --> 16:17.000]  В. Это что?
[16:17.000 --> 16:19.000]  Почему это буквы? Потому что мы букву А раскрыли.
[16:19.000 --> 16:21.000]  Это означает, что она была самой правой.
[16:21.000 --> 16:23.000]  Тут везде. Только маленькие буквы есть,
[16:23.000 --> 16:25.000]  они навсегда фиксированы.
[16:25.000 --> 16:27.000]  Вот. Что такое ферст?
[16:31.000 --> 16:33.000]  Вот.
[16:35.000 --> 16:37.000]  Гамма это
[16:37.000 --> 16:39.000]  какое-то произвольное
[16:39.000 --> 16:41.000]  строка здесь.
[16:41.000 --> 16:55.040]  говорим, что first k от гамма это множество таких слов w, то из гамма выводится wx
[16:55.040 --> 17:05.640]  и либо w имя длину k, либо x пустое. Что это означает? Если мы вывели длинное слово,
[17:05.640 --> 17:11.160]  берем первый k-бук. Если вывели короткое слово, берем его. Для того, чтобы говорить,
[17:11.160 --> 17:15.080]  что слово, которое мы вывели, оно действительно полное, будем ставить в конце доллар. То есть
[17:15.080 --> 17:20.560]  в таком случае мы не ставим w и доллар. Это конец строки, это все означает, что такая
[17:20.560 --> 17:26.600]  ситуация только в конце. Так, вот на этом пока есть время создать какой-то вопрос.
[17:26.600 --> 17:42.680]  Вот так что, если хотите, задавайте. Ситуация допустима для префикса. То есть у вас будет
[17:42.680 --> 17:57.080]  некоторая функция, будет обозначаться как v, k, g от гамма. Это допустимые ситуации. Другой вопрос,
[17:57.080 --> 18:01.320]  что здесь нужно взять прям все допустимые ситуации, но это сейчас будет детализировано. Вот,
[18:01.320 --> 18:07.120]  но вот эти множества потом превратятся в множество состояния вот здесь. То есть из множества
[18:07.120 --> 18:20.000]  ситуации будет тихить множество ситуаций. Так, сейчас проверю, ничего ли я так. И тут.
[18:20.000 --> 18:41.560]  И здесь надо еще кое-что посмотреть. Я сейчас хочу сверить обозначение. Неделю я не напутал.
[18:41.560 --> 19:10.320]  Читаю альфа бета 1. Да, с определением вопросов нет.
[19:10.320 --> 19:16.280]  Так, помимо ферз нам еще потребуется следующее определение. Зачем оно потребуется, скажу позже.
[19:16.280 --> 19:25.680]  Ну, пока какая-то интуиция. Так, то есть или там от гамма. Кажется, там было два аргумента.
[19:25.680 --> 19:33.040]  Вот EFF это такой ферз, при котором вам нельзя открывать первый не терминал, как пустое слово. Вот,
[19:33.040 --> 19:42.360]  это нужно для того, чтобы правильно сделать функцию переходов. Ну да. Здесь есть два случая.
[19:42.360 --> 19:52.760]  Гамма от одного, ну да, мы же программисты здесь все. Так, если гамма от нуля это не терминал,
[19:52.760 --> 20:06.920]  то это ферст от гамма просто. А иначе, вот это такие слова омега, вот это вот все,
[20:06.920 --> 20:19.760]  то из гамма вводится в омега х. Вот, но здесь важно, что тогда не терминал, вот обозначим его,
[20:19.760 --> 20:38.320]  как А. И в этом выводе неверно, ну я не знаю, значит А не раскрывается, как эпсилон. То есть,
[20:38.320 --> 20:47.480]  что означает? Вы хотите точно зафиксировать первую букву? Вот. Для чего это нужно? Когда вы
[20:47.480 --> 20:53.640]  будете делать переход, для того, чтобы взять переход, вот, у вас будет стоять точка А, но я не знаю,
[20:53.640 --> 21:05.880]  вот это еще что-нибудь, вот, ну и еще что-нибудь. Вы захотите здесь взять переход по букве? Что
[21:05.880 --> 21:10.920]  есть переход по букве? Ну, чтобы эта буква была, потому что если вы делаете переход,
[21:10.920 --> 21:17.880]  ну вот здесь у вас получается для first, у вас будет first тут, и если это раскрывается,
[21:17.880 --> 21:25.200]  как пустое, ну, вот это вот раскрывается, как пустое слово, вот тут, то вы прочитали одну букву,
[21:25.200 --> 21:32.880]  которая находится дальше. Ну, здесь пока какая-то интуиция, а именно как определение, вам нужно
[21:32.880 --> 21:39.400]  скрыть А как пустое слово. Более того, не просто не раскрыть А, ситуация, когда у вас А выводит B,
[21:39.400 --> 21:44.480]  и отсюда выводится пустое слово, тоже плохая. Вам нужно, чтобы непременно первый символ открылся,
[21:44.480 --> 21:59.320]  хоть какое-то не пустое слово. Вот, пока можно в этом подумать. Да. Да. Это множество строк, как и тут. Это
[21:59.320 --> 22:06.600]  такие строки, которые являются первыми к буквам от вывода гамма, ну, либо короче, если выводятся
[22:06.600 --> 22:13.240]  короткие слова, но такие, что первый не терминал, если он действительно первый, не открывается,
[22:13.240 --> 22:21.960]  как пустое слово. Он непременно открывается, как какое-то не пустое слово. Вот. А так-то откуда-то
[22:22.320 --> 22:39.240]  first? Ну, здесь очевидно видно, что тут содержат только first, но не все. Вот. Так. С определениями тут мы все
[22:39.240 --> 22:46.400]  поговорили. Давай теперь прилягай к грамматику. First, E, F, понятно, да? Да, нет, нормально. Так, куда
[22:46.400 --> 22:53.480]  вы идти? Давайте сюда уйдем. Теперь вопрос, что эта вот вся машина работает не всегда. Основное
[22:53.480 --> 23:01.520]  предположение алгоритма, что, подсматривая следующие каосимволов, вот они тут, ну, или меньше,
[23:01.520 --> 23:05.120]  чем если мы в конце слова, можем однозначно определить, что происходит. Давайте это напишем.
[23:05.120 --> 23:23.040]  Грамматика G, ну, пополненная, текстом свободная, это леркограмматика, если, значит, давайте
[23:23.040 --> 23:27.960]  напишем, что мы ожидаем. Мы хотим, что, читая по стеку и подсматривая буквы, правило придется
[23:27.960 --> 23:32.040]  однозначно. Но в определении мы не можем писать, что мы что делаем со стеком, потому что это
[23:32.040 --> 23:39.920]  определение. Нужно писать в темных выводах. Предлагаю, что существует два вывода. Ну, тут,
[23:39.920 --> 23:51.920]  вот так вот, существует два вывода. Стрих-вывод, сейчас аккуратно все это припишу. Так, ну что так,
[23:51.920 --> 23:56.760]  маленький демотиватор, мне переписывать с конспектом можно, вам экзамене нельзя. Вот.
[23:56.760 --> 24:13.480]  Ну, значит, вам тем более не привыкать. Так, если существует альфа, а, икс, что отсюда выходит,
[24:13.480 --> 24:28.440]  это за много шагов правосторонним образом. Альфа, бета, это было проще. И, два вывода,
[24:28.440 --> 24:45.760]  гамма, бета, икс, что отсюда выходит, альфа, бета, игрек. Вот, здесь напишем, что гамма это префикс,
[24:45.760 --> 24:55.840]  возможно, не собственный альфы. Вот, а, икс, это, сейчас, как суффикс у вас обозначался на
[24:55.840 --> 25:04.840]  алгоритмах? Вот так. Правда ли, что вот это префикс, это суффикс? Кажется, да. Вот. И,
[25:04.840 --> 25:22.760]  ферст-к от у, то. Значит, что вот написано? Вот, если был какой-то вывод, вы шли-шли,
[25:22.760 --> 25:29.640]  получили альфа, а, омега, открыли как альфа, бета. Вот ваш префикс. Что касается алгоритма? Вы
[25:29.640 --> 25:35.760]  как-нибудь прочитаете? Ну, напоминаю, вводим мы вот так, парфим мы обратно. Прочитаете нас так
[25:35.760 --> 25:41.560]  альфа, бета. И зададитесь вопросом, верно ли, что я могу бета свернуть вот так? Вот. Для
[25:41.560 --> 25:48.000]  этих двух выводов говорить, что неверно. То есть алгоритм сейчас стоит перед некоторой дилеммой,
[25:48.000 --> 25:54.480]  что вот если я вижу бета, я могу свернуть а, либо мне нужно прочитать что-то еще и свернуть
[25:54.480 --> 25:59.480]  б. Значит, тут напишем, что у нас свертка по правилу альфа, бета, а тут свертка по правилу
[25:59.480 --> 26:10.200]  б это один, бета это два. Вот. Более того, тут вывод за один шаг, а тут не за один. Ну, давайте
[26:10.200 --> 26:18.400]  смотреть, что это означает? Вы здесь прочитали гамму, прочитали б, прочитали, ну, прочитали
[26:18.400 --> 26:25.960]  б. Открыли б как вот это вот. Потом это два поразбирали, оно ушло в у. В какой-то момент у вас
[26:25.960 --> 26:32.560]  доедет до б дело. И вот оно раскроется. Тут написано, что нужно бета смыть а. Тут написано,
[26:32.560 --> 26:38.520]  что нужно дочитать слово до это два. Тут его свернуть, получить вот это вот это правило. Тут могут
[26:38.520 --> 26:43.280]  быть как-то терминалы, так и нет терминалы. То есть мы читаем, читаем буквы. Здесь набираем вот это
[26:43.280 --> 26:48.320]  вот. На стеке получаем это один, бета это два. Только после этого сворачиваем. Более того,
[26:48.320 --> 26:53.400]  не только бета свернуть, как здесь. Вот здесь мы бета свернули и получили а. А еще больше
[26:53.400 --> 27:01.000]  сворачиваем и закрываем на b. Вот. И сейчас это такие две проблемные ситуации. Как мы решаем
[27:01.000 --> 27:22.760]  вопрос тем, что говорим, что такого не возникает. То а равно b, x равно y и ай. Сейчас, это не ай, а
[27:22.840 --> 27:35.720]  а нет, вот так нормально. Гамма, b, x. Что это означает? Что последнее правило у вас вот такое. То есть на
[27:35.720 --> 27:39.120]  самом деле, даже если вы клонируете символ и все его правила замените, то это уже описание
[27:39.120 --> 27:44.520]  бетелярка грамматики. Потому что тут не будет понятно, бета откуда сказать в а или в b. Вот. А
[27:44.520 --> 27:50.760]  здесь написано, что эта ситуация однозначная. То есть у вас символ одинаковый. Здесь слово,
[27:50.760 --> 27:56.320]  которое получается одинаковое. Тут вывод за один шаг и правило тоже открывается одинаковое. Вот.
[27:56.320 --> 28:03.200]  Еще раз. Вот активный префикс. И какие ситуации там не возникают? Вот такая ситуация там не
[28:03.200 --> 28:07.440]  возникает. Вот если такая возникает, то такая не возникла. Ну какая ситуация? Вот тут будет
[28:07.440 --> 28:18.920]  а, стрелка, точка, бета. Вот здесь бета с точкой ситуация. И вот у, вот эти вот first. А здесь
[28:18.920 --> 28:30.240]  будет ситуация b, стрелка, это 1, бета, точка, это 2. И тоже какое-то у. Все настолько плохо,
[28:30.240 --> 28:35.800]  что тут надо делать свертку, а тут надо делать не пойми что. Казалось бы, это два можно читать
[28:35.800 --> 28:40.760]  дальше, а можно не читать. Ладно бы, если вопрос был только в том, что свертка или не свертка.
[28:40.760 --> 28:46.840]  Дальше до свертки не понятно по какому правилу. То есть это пределение максимально плохое. Вот если
[28:46.840 --> 28:57.840]  это все верно, то тогда агроматика и лерка агроматика. Да? То а равно гамма. Ну смотрите,
[28:57.840 --> 29:02.160]  что у вас здесь получился вывод. Так что получили на стеке а, бета. Поскольку у вас последняя
[29:02.160 --> 29:12.280]  буква одинаковая. Поскольку у вас последняя буква одинаковая тут. Да, туда у вас бета свернется и
[29:12.280 --> 29:22.760]  здесь должно быть одинаково, потому что вы получили ровно бету из этого правила. Либо здесь могут
[29:22.760 --> 29:33.320]  быть истории с тем, что это один пуст, но это время даже разрешается. Вот, поэтому явно этого не пишут.
[29:33.320 --> 29:41.400]  Вот, кажется даже не нужно. Но я этого не проверял. Вот стоит вопрос вот это вот. Что из этого
[29:41.400 --> 29:45.640]  выходит пустое слово? Наверное ничего. Ну пусть выходит. Тогда получается, что тогда этот стек
[29:45.640 --> 29:53.240]  мы можем породить двумя способами. Главное, чтобы бета правильно свернули. Вот. Ну можно думать в
[29:53.240 --> 30:00.080]  термах того, что здесь просто вывод был одинаковый. Вот. Я призываю, думаю, в таком ключе для
[30:00.080 --> 30:07.480]  реализации это не повлияет. То есть в реализации вы будете знать, что вы читали бета, полюсь
[30:07.480 --> 30:13.000]  определение вы свернете в А и дальше поведешь что-то читать. Сказал что-то непонятно, надеюсь
[30:13.000 --> 30:21.920]  прояснилось. Да нет? Вот. То есть если есть два вывода, то тогда последняя буквы придется однозначно
[30:21.920 --> 30:32.080]  и правила придется однозначно, по которому надо свернуть. Вот. Это повод определения. Так, поехали
[30:32.080 --> 30:39.480]  дальше. Сейчас поговорим что-то про допустимые ситуации. Значит как их строить? Я пока не скажу,
[30:39.480 --> 30:47.320]  а попробую сказать почему это будет потом работать. Просто теперь опять девять. Значит допустимая
[30:47.320 --> 30:54.040]  ситуация. Здесь мало того, чтобы допустить, нужно брать замутые допустимые множества. Здесь сейчас
[30:54.040 --> 31:20.040]  это буду писать. Так, здесь А это множество ситуаций. А замкнуто.
[31:24.040 --> 31:48.720]  Если для любой ситуации вида А, стрелка, эта точка Б, лежащим А, существует ситуация. А, ну здесь для
[31:48.720 --> 32:07.680]  любого правила Б в бета множество правил. Ситуация Б, стрелка, точка Б, уж стрих лежит в А. Теперь давайте
[32:07.680 --> 32:13.360]  разбираться что тут написано. Тут было У. Что это означает? В выводе, который этим правилом
[32:13.360 --> 32:22.320]  порождался, У стояло за этим правилом. Почему тут не то же самое? Давайте смотреть. Было штрих, из него
[32:22.320 --> 32:39.000]  вывелось гамма штрих А В, из него вывелось это альфа В, и тут было У. Вот. Дальше это Б как-то раскрылось.
[32:39.000 --> 32:48.720]  Мы при просмотре ситуации наблюдаем раскрытие этой буквы. Тут буква А, мы в это раскрытие провели, но тут
[32:48.720 --> 32:59.000]  буква Б, поэтому нужно делать вывод еще на один шаг. Так, кажется нерационально использую доску. Да, это префикс, про
[32:59.000 --> 33:09.280]  который хочется не думать. Он сейчас не очень важен, поэтому потерял. Так, это Б раскрылось в бета, но дальше
[33:09.280 --> 33:16.080]  вот это. То есть до раскрытия Б нужно вот это вот все дело пораскрывать. Тут какой-то наблюдаешь штрих. То есть из вот этого
[33:16.080 --> 33:22.200]  выводится слово, а только потом бета откроется. И смотрите. Рассмотрим вывод, в котором раскрытие буквы А
[33:22.200 --> 33:27.800]  последнее, проявляет эту ситуацию. Вывод, при котором раскрытие буквы Б последнее, проявляет эту ситуацию, но вот
[33:27.800 --> 33:35.120]  второй вывод длиннее первого. Почему? Потому что мы должны открыть А, потом открыть вот это, потом открыть Б. Но при этом,
[33:35.120 --> 33:42.720]  по сути, при разборе стэка это одно и то же. Потому что вы видите, что этот вывод является сейчас префиксом этого вывода.
[33:42.720 --> 33:50.040]  Поэтому, если у нас есть такая ситуация, так она должна быть. Она допустима. Почему она допустима? Вот он префикс,
[33:50.040 --> 33:57.520]  вот он тут. Вот этот же префикс. Просто тут точка стояла вот здесь, вот она стоит вот здесь. Потому что это
[33:57.520 --> 34:03.680]  правила. А тут он стоит вот здесь, в том же самом месте. Мы слово прочитали настолько же,
[34:03.680 --> 34:10.360]  насколько и здесь. Просто в тернах правила оно вот в самом начале. Почему? Потому что b раскрылось,
[34:10.360 --> 34:16.600]  но то, что b открыло на b, вот этот вот bet, оно еще не прочитано на stack. Вот поэтому здесь точка в
[34:16.600 --> 34:26.040]  начале. А что такое u-штрих? Ну здесь видно из картинки, что u-штрих это first k, вот альфа u.
[34:26.040 --> 34:33.400]  Ну почему u? Тут понятное дело, что дубля могла быть длиннее, но на такую достаточно. u это уже хотя бы k
[34:33.400 --> 34:42.240]  символов. Вот, здесь, надеюсь, понятно, почему тут разные слова будут. Вот, значит, вот это,
[34:42.240 --> 34:54.320]  здесь мы допишем, что допустимые ситуации. Замкнутое множество. Так что такое, на самом деле,
[34:54.320 --> 35:02.600]  WKG? Это замыкание множества допустимых ситуаций для гаммы. Что такое замыкание? Берем все допустимые
[35:02.600 --> 35:07.120]  ситуации, берем всех замыканий, берем ничего другого. Ну там, было такое, окажется в мотоне,
[35:07.120 --> 35:13.600]  везде такое, вот стандартная техника. Вот, как это строить, но сейчас становится понятно. Нужно
[35:13.600 --> 35:20.040]  смотреть все выводы, брать все последние правила, замыкать, потом снова замыкать, так пока не
[35:20.040 --> 35:25.120]  дойдете до конца. Это в теории, в какой-то диапратики сейчас еще будем говорить, но вот такое вот множество.
[35:25.120 --> 35:31.880]  Вот оно тут. И последнее, что нам нужно, ну вот на самом деле, здесь action. Мы уже на самом деле построили,
[35:31.880 --> 35:39.160]  зная, что мы находимся в ситуации S и первый K-букв, мы обращаемся к правилам этой ситуации,
[35:39.160 --> 35:48.280]  смотрим K-букв тут. То есть, если эти K-букв, вот эти вот, совпали вот с этими K-букв, тогда мы
[35:48.280 --> 35:54.120]  говорим, что мы сейчас избираем одно из этих правил. Ну а тут, правда, явно говорит, нужно ли
[35:54.120 --> 36:01.320]  делать shift или reduce. Что такое reduce? Если тут находится ситуация вида B что-то, точка, точка
[36:01.320 --> 36:07.960]  или в конце, это reduce. Почему? Потому что последнее правило в выводе прочиталось полностью. Вот, если вот это
[36:07.960 --> 36:15.440]  все уберу, что это означает? При выводе мы откроем букву B, откроем это, и правило кончится. То есть,
[36:15.440 --> 36:21.240]  не читая ничего. Вот, это уже прочитано, делай reduce. Почему версия делает reduce? Потому что эти K-букв,
[36:21.240 --> 36:36.040]  мы их ровно тут и видим. А что такое shift? Смотрим на EFF от вот этого. Если вот это вот все, вот это все
[36:36.040 --> 36:43.480]  слово, при раскрытии этой буквы, как не пустое множество, попадает вот сюда, тогда мы должны читать.
[36:43.480 --> 36:49.200]  Для чего важно, чтобы это было A, не отрывать пустое множество? Потому что если A пустое, то мы его
[36:49.200 --> 36:54.680]  проскакиваем, читаем букву тут. А мы этого не хотим. Мы хотим начать читать букву A. Вот это был
[36:54.680 --> 37:09.560]  нужен EFF. Вот, так будет построен разборщик. А пока, да, точка перед A. Смотрите, это означает тут,
[37:09.560 --> 37:15.240]  что вы хотите начать читать что-то с буквой A. Вам надо опять спричтать первую букву. Вам нужно
[37:15.240 --> 37:20.920]  быть уверенным, что эта буква попадает сюда, потому что мало ли эта буква оказалась тут. Для этого
[37:20.920 --> 37:25.120]  вы ввели EFF. Тогда вы проверяете, что если ваше слово, которое вы видите здесь, вот оно тут,
[37:25.120 --> 37:32.240]  попадает в EFF от вот этого всего, от этой тройки. Когда вы уверены, что вы начнете читать правила
[37:32.240 --> 37:40.120]  с буквы A, вы прочитаете. Ну, тут с буквы A рядом шатались какие-то ситуации вида точка альфы,
[37:40.120 --> 37:44.200]  там что-нибудь. Ну, потому что вот так вы в этом замыкании. И вы вот здесь эту букву прочитаете.
[37:44.200 --> 37:49.920]  Ну, здесь, либо еще где-то пониже. Мало ли тут еще большая буква а штрих. Здесь утром какие-то
[37:49.920 --> 37:54.920]  ситуации. Вы прочитаете первую букву, которая скроется здесь как терминальная буква. Дальше
[37:54.920 --> 38:02.600]  совершите редьюс, совершите переход вот по этой букве, маленькой букве. И перейдете в ситуации,
[38:02.600 --> 38:08.800]  где у вас на буква будет сайд-оксант. А это вы уже как бы забудете. И начнете читать вот это правило.
[38:08.800 --> 38:15.280]  Это соответствует деревья разбора тому, что вы тут, вот тут стоит большая буква а штрих. Вы
[38:15.280 --> 38:22.240]  стоите тут. Буква маленькой нет. Идем еще ниже. Тут А2 штрих А. И так пока здесь не будет какая-то
[38:22.240 --> 38:28.900]  буква маленькая А. Увидели букву, перенесли точку. Спокусились на этом по дереве. То есть в этих
[38:28.900 --> 38:35.120]  ситуациях, как мы дальше заметим, про B ничего неизвестно вообще. Вот. А теперь вопрос, а когда мы
[38:35.120 --> 38:38.680]  прочитаем букву А, как вернуться обратно сюда? Ну а мы это уже знаем, потому что тут на стейке,
[38:38.680 --> 38:48.400]  вспоминаем, у нас стоит 0, X1, S1, X2, S2. И когда вы заредюсите все это, вы будете знать, что когда-то
[38:48.400 --> 38:56.520]  где-то возникало B. Вот он B. А здесь мы будем на стейке в состоянии S1. Вот вы это все тут закроете.
[38:56.520 --> 39:04.880]  Поймете, что вы сделали букву А, сгнидивали ее. Идете в переход. Этот переход соответствует тому,
[39:04.880 --> 39:10.320]  что пронесли точку сюда. Вот она. Точка пронеслась. Для этого на стейке это все нужно помнить.
[39:10.320 --> 39:21.000]  Вот. А теперь следующий вопрос. А что, если вам в вашей ситуации говорили две разные вещи? Вот.
[39:21.000 --> 39:26.720]  По такой ситуации нужно делать shift, а по какой-то reduce. Приведу пример. Пусть у вас в AKG попали
[39:26.720 --> 39:39.520]  две ситуации. Первая ситуация вида beta.u, и вторая ситуация вида... Дай, чтобы все совсем было плохо.
[39:39.520 --> 39:50.600]  Вот здесь. Да, вот достаточно. И здесь вот так вот. Так, питон был. Вот оказай без знакома.
[39:50.600 --> 39:58.240]  С первой буквы. Вот. И у от нуля равно А. Вот это как раз больше. Смотрите, что я должен сделать. Я,
[39:58.240 --> 40:03.120]  видя слово u, должен сделать B. Или видя слово u, должен прочитать букву А, которая является первой
[40:03.120 --> 40:08.400]  буквы слова u. Ну, тут понятно, что от одного до... Еще, чтобы была одна буква, это как-нибудь
[40:08.400 --> 40:15.880]  буква B. Потому что была K-буква. То есть алгоритм посмотрит, что если ты видишь здесь слово,
[40:15.880 --> 40:21.720]  которое сопалось с этим словом, и правильная точка в конце, то она идет reduce. То есть такая
[40:21.720 --> 40:25.840]  ситуация означает, что где-то был вывод, заканчивающийся, на вот такое правило,
[40:25.840 --> 40:31.480]  которое читается полностью. Но это значит надо сворачиваться. А эта ситуация означает, что
[40:31.480 --> 40:37.040]  если где-то был вывод, чтобы закончить это правило, нужно прочитать еще букву А. И такое же слово
[40:37.040 --> 40:46.400]  вот А и u от одного до конца слова. Эти два слова одинаковы. То есть при прочтении тут K-букв,
[40:46.400 --> 40:56.600]  вы их не отличите. То есть вы не поймете у вас такой вывод или такой вывод. Да, и вот здесь ты будешь
[40:56.600 --> 41:01.360]  как раз-таки играть, что эти две ситуации не возникнут. Это теряем 5-9, сейчас я буду выписывать.
[41:01.360 --> 41:07.080]  Но для того, чтобы гарантировать, что это не возникает, вам и нужно ходить эту букву У.
[41:07.080 --> 41:17.000]  Ну давайте сейчас какой-нибудь маленький пример для того, чтобы вы поняли. Почему не
[41:17.000 --> 41:26.360]  всплывает? Вы по этому У определяете, какой шаг нужно сделать. Так, давайте какую-нибудь грамматику
[41:26.360 --> 41:34.240]  рассмотрим. Верно ли, что вы придумали LR0 и не LR1 грамматику в домашнем задании? Давайте посмотрим,
[41:34.240 --> 41:47.600]  что у меня там пристали. Это сейчас разберем. Ну, Георгий неправ, что поделать. Так,
[41:47.600 --> 42:10.880]  ну про сейчас покажем, что тут нельзя делать LR0, можно LR1. Так, и BFA, CFA. Так, ну я позволю
[42:10.880 --> 42:21.920]  себе добавить сюда вот такое. Так, и все. Давайте смотреть. Ну давайте начнем строить VKG. Мы видим
[42:21.920 --> 42:28.400]  ну теперь какое-то нулевое множество ситуаций. Заодно и научимся пока строить эти допустимое
[42:28.400 --> 42:35.200]  множество. Пока теряем 5-9 остается чуть дальше. Нет, смотрите, я сейчас делаю LR0 разбор, покажу
[42:35.200 --> 42:43.200]  проблему. Потом сделаю LR1 разбор, покажу, что проблемы нет. Значит, ну кто не знает, это не LR0,
[42:43.200 --> 42:52.360]  но LR1. Вот. Кто с этим сомневается, могу представить домашнее задание этого студента, там это все
[42:52.360 --> 42:57.800]  доказано. Здесь, ну поскольку у нас слова пустые, я их не буду писать. Тут визитолы расстоят,
[42:57.800 --> 43:06.920]  ну эпсилоны. Вот, этого не будем делать. Вот, давайте это замыкать. Ситуации. Ну любовь
[43:06.920 --> 43:12.440]  нашей ситуации вот такой. Ну я пишу VKG. Вот оно. Ну я пишу ситуации допустимые для пустого префекса
[43:12.440 --> 43:20.080]  сейчас. Да. Просто сейчас эти префекса не буду выписывать, а просто буду писать ситуацию, буду
[43:20.080 --> 43:26.320]  как-нибудь переходить. Вот. Содержать, например, будет чуть позже. Ну давайте, для простоты,
[43:26.320 --> 43:34.200]  это эпсилон. Замыкаем. Видим правило s.b. Пишем точка b. Значит, о букве тут я не думаю, потому
[43:34.200 --> 43:40.200]  что это LR0 разбора, только смотрю на 0 букв вперед. Кстати, интересное замечание. Здесь, при LR0
[43:40.200 --> 43:46.280]  разборе, вы определяете, что нужно делать, не глядя вообще на слово. То есть, что нужно делать
[43:46.280 --> 43:52.480]  со стеком определяется однозначно. Если откроете нирк, там вот люди пишут таблицу какую-то. Давай,
[43:52.480 --> 43:58.080]  как бы, понять, что мы по букве определяемся. Это неверно. В примере на нирке, если в строке
[43:58.080 --> 44:02.680]  встречается редюс по какому-то правилу, там редюс по этому правилу встречается. А если shift,
[44:02.680 --> 44:08.040]  то тут у нас разные шифты, ну вот функция g. То есть, не обманывайтесь. Вот, когда будет
[44:08.040 --> 44:13.800]  стоять LR0 на нирке, там будет таблица. Но эта таблица в строке, все это определено вообще не зависит от
[44:13.800 --> 44:25.080]  буквы. Ну вот здесь давайте разбирать дальше. S.C.C. Открываем дальше. B.A. Я до конца это не доведу,
[44:25.080 --> 44:30.000]  я просто покажу противоречие. Ну смотрите, видите, я открою все, как тут написано. Вижу точку,
[44:30.000 --> 44:39.880]  открываю. Вижу точку, открываю. Теперь давайте посмотрим. А для перфекса A. Забирая в будущее,
[44:39.880 --> 44:44.360]  это будет go to. Но сейчас мы вот так не назовем. Для перфекса A мы должны взять, может быть,
[44:44.360 --> 44:49.440]  ситуацию. Как мы это делаем? Смотрим, где можно пройти по букве A. Мы тут будем ходить по букве
[44:49.440 --> 45:00.240]  A по слову, а тут принесем точку. Вот принесли точку. Значит, здесь B.A. с точкой C. Ну, что такое
[45:00.240 --> 45:06.800]  перфикс A? Это перфикс Эпсилон с добавлением буквы A. Как прочитать букву A? Нужно найти правила,
[45:06.800 --> 45:11.720]  в которых она фигурирует, и прочитать ее. Вот. Почему это верно? Это такая отдельная теория,
[45:11.720 --> 45:16.840]  мы сейчас будем доказывать. Ну, вот так строится ваш стрелять в ситуации. Для Эпсилона оно строится
[45:16.840 --> 45:22.320]  тем, что берете вот такую ситуацию всегда. А потом замыкаете ее, а потом делаете go to по
[45:22.320 --> 45:27.440]  разным буквам. Например, что здесь можно делать? Go to по S, go to по B, go to по C, go to по A. Но я еще это
[45:27.440 --> 45:31.320]  все делаю, так еще после перфекса противоречия. Если будет необходимость, можем это тоже разобрать.
[45:31.320 --> 45:38.760]  Так, значит, ну, по букве A. Перенесли, перенесли. Ну, запятая там пустое слово, и бог с ним. Ну,
[45:38.760 --> 45:46.240]  а теперь, вот мы находимся тут. Тут чисто технически, смотря на слово, смотрим, ноль букв. Ноль букв.
[45:46.240 --> 45:51.320]  Эпсилон. Верно ли, что Эпсилон совпадает с Эпсилоном вот здесь после запятой? Ну, верно, потому что Эпсилон
[45:51.320 --> 45:57.640]  один. У меня есть две команды. Reduce такой, Reduce такой. И все, я не знаю, что мне делать. Вот оно
[45:57.640 --> 46:04.080]  противоречие. А в тернах вывода означает, что вы могли открыть букву A как AB и как AC. Существуют два
[46:04.080 --> 46:09.040]  вывода. И не важно, что тут слова разные. Вот здесь мы даже слова еще не дочитали, а мы не знаем, что делать.
[46:09.040 --> 46:18.840]  Это не LR 0 грамматика, потому что вот оно противоречие, явно видно. Да, вы не понимаете, какой Reduce
[46:18.840 --> 46:24.120]  сделать. Вы можете делать Reduce, но просто можете делать больше, чем нет Reduce. Вот это пародит вам
[46:24.120 --> 46:35.800]  Reduce 0, 1, 2, 3, R3 команду. Это пародит R4 команду. Конечно, выполняя любой из этих команд,
[46:35.800 --> 46:48.920]  номер правила 0, 1, 2, 3, 4. Ну, как тут написано? О, ну уже не написано. ROT по этому правилу.
[46:48.920 --> 46:56.240]  Вот. Понятно дело, что здесь мы прочитали букву A, а дальше будет буква B. Надо делать Reduce такой, а если
[46:56.240 --> 47:03.480]  буква C, Reduce такой. Но мы-то букву B еще не видим, нам нельзя его смотреть. Это же LR 0. И поэтому тут
[47:03.480 --> 47:12.880]  противоречие. А в терминах подглядывания что произойдет? Давайте посмотрим. Так, значит здесь будет
[47:12.880 --> 47:18.200]  доллар. Потому что, если мы видим такой правильный конец, значит тут замыкает, тут ничего нет, поэтому тоже
[47:18.200 --> 47:23.560]  доллар. И тут тоже доллар. Почему я пишу доллары? Потому что, когда я замыкаю, я смотрю, что находится после этой
[47:23.560 --> 47:33.520]  буквы, чтобы раскрыть. Ну вот тут, смотрите. Тут был U, вот он был U, а осталось U3. Вот U3 определяется тем,
[47:33.520 --> 47:39.040]  что находится после буквы B. Но тут после буквы A ничего нет. А вот здесь уже есть буква B. Видим букву B,
[47:39.040 --> 47:53.440]  пишем сюда запятая B, запятая A. Что? Да, запятая C. Вот. Смотрите, в этом правиле, в этом правиле всегда такое.
[47:53.440 --> 48:00.840]  Значит, S.S запятая доллар. Почему? Потому что после буквы S слова нет. Все слово содержится тут. Вот. А дальше,
[48:00.840 --> 48:11.760]  как я тут писал? Замыкаем. Пишем правило. Какая стоит дальше буква? Эта буква состоит из двух частей.
[48:11.760 --> 48:17.280]  Часть после буквы S правиле и часть, которая стоит после запятой. Пустое слово, пустое слово – это пустое слово.
[48:17.280 --> 48:26.760]  Тут B и пустое слово – это B. Так. Ну, здесь пустое слово, пустое слово – это пустое слово.
[48:26.760 --> 48:32.480]  То, что написано. C пустое слово – это C. Теперь вы видите, что вы отличаетесь с ситуацией.
[48:32.480 --> 48:46.320]  Давайте посмотрим. Глуту по букве A. Парадит нам… Ну, то, что LR1 работает за линию – это тиремма,
[48:46.320 --> 48:52.520]  которая доказывается. Вот. Сейчас я говорю теоретически. Строить это нужно оптимально,
[48:52.520 --> 48:57.160]  поддерживая аккуратно first и везде аккуратно проставляя. Вот. Об этом поговорим к концу
[48:57.160 --> 49:02.520]  семинара ближе, пока я хочу именно теорию разобрать. Это первое. Второе. Это последний таблиц.
[49:02.520 --> 49:07.280]  Оно один раз делается. Оно может сделать сколько угодно сложно, но разбор потом будет линейный.
[49:07.280 --> 49:13.960]  Это классно. Вот. Но вообще, вот эта вот вещь, она, кажется, работает порядка квадрата от количества
[49:13.960 --> 49:20.960]  правил. Что-то такое. И еще на константу K, которая там везде тащится. Возможно, K в какой-то степени.
[49:20.960 --> 49:25.280]  Я не осуждаю об анализе пострения этой таблицы, потому что это константно все. У вас от длины слова
[49:25.280 --> 49:36.120]  это не зависит. У вас парсер, он работает в терминах как функции от длины слова. Вот это все от длины
[49:36.120 --> 49:43.120]  слова вообще не зависит. У нас, значит, от C – от грамматики. Ну, не от C, от K – от грамматики. Вот. Это все
[49:43.120 --> 49:47.720]  константы. Поэтому вот эта вот вся богадельная уходит сюда в констант и забывается. Кому интересно,
[49:47.920 --> 49:56.360]  быстрее? Ну, вот так. Там уже состояния не будут множественными ситуациями, там будет что-то более
[49:56.360 --> 50:04.520]  хитрое. Ну, а тем не менее. Вот, продолжаю здесь. Прошли по букве A. Вот здесь прошли по букве, а дальше
[50:04.520 --> 50:10.640]  видим букву B. Видим букву C. Ну, что это означает? Если вы видели вывод, при котором это правило последнее,
[50:10.640 --> 50:16.200]  зададим, что буква B. Если мы хотим, чтобы префикс расширился, мы в эту префикс эту букву добавим.
[50:16.200 --> 50:20.880]  Но это же правило. Это все еще тот же самый вывод. Просто мы на него смотрим с точки зрения более
[50:20.880 --> 50:26.560]  длинного префикса. После этого, правда, все еще B и C. А теперь то, что вы говорили. Подсматривая букву,
[50:26.560 --> 50:33.960]  вы понимаете, что это Reduce 3, а это Reduce 4. И теперь вы можете это точно сказать, потому что у вас эта
[50:33.960 --> 50:45.080]  буква есть. K равно 1. Видите B? Делайте Reduce 3. Да и Reduce 4. То есть слово U помогает разбить ситуацию на два
[50:45.080 --> 50:50.640]  множества. Вы здесь противоречие, вы его разыгнали, вы его разрешили. На празднике что происходит? На
[50:50.640 --> 50:57.040]  празднике люди пишут сначала ли разбор, если видят, что есть противоречие, что-нибудь делают, чтобы его
[50:57.040 --> 51:02.600]  избежать. Никто не про это определение. Но я-то в конце тоже еще скажу, что как проиграть грамматика
[51:02.600 --> 51:08.160]  LRK или не LRK. Запустите всю эту машину и посмотрите на таблицу глазами. Так, тут вопрос, надеюсь, нет.
[51:08.160 --> 51:21.800]  Зачем нужно U? Разобрали. Так, теперь LRK. Ладно, давайте еще один вопрос. Диарею мы еще дальше оставим.
[51:21.800 --> 51:29.240]  Как, значит, мы построили с вами VK гамма для всех перфиксов. Как мы построили? Построили для
[51:29.240 --> 51:36.360]  Апсилона. Посмотрели, что в эту песню можно добавить. S, B, C, A. Вот. Добавили все это. Посмотрели какие-то
[51:36.360 --> 51:45.680]  VK от S, VK от B, VK от C. Дальше, для них там тоже рекусины еще построили. Вот, значит, здесь существует, ну,
[51:45.680 --> 51:51.560]  поскольку это LRK грамматика, существует теорема, что это процесс остановится, вы посчитаете все VK g.
[51:51.560 --> 52:03.240]  Дальше вы говорите, что VK g, пронумерованные от гамма, это состояние. Вот они тут. Определяем функции
[52:03.240 --> 52:08.960]  перехода, если состояние, в котором вы находитесь, которое вы знаете, потому что LRK как функции,
[52:08.960 --> 52:19.480]  находится правило вида, ну, ситуация вида, не терминал, строка, точка в конце, какое-то слово U,
[52:19.480 --> 52:26.840]  то по этому слову U вы тут пишете reduce. По какому правилу reduce? Ситуация определяется каким-то
[52:26.840 --> 52:34.480]  правилом. Вот по этому правилу reduce будет. Дальше, это первая ситуация. Если вы видите здесь ситуацию вида,
[52:34.480 --> 52:49.600]  ну, как я там писал, ну, что-то, точка, там, буква U, и ваше слово тут подает множество EFF от вот этого.
[52:49.600 --> 53:01.280]  Здесь может быть дальше что угодно. Ну, давайте, ставим эту, чтобы вы не путались. Вот, 4EFF.
[53:01.280 --> 53:14.160]  Надо делать shift. Что еще надо делать shift? Вы букву переносите, тут эта точка, точка пройдет дальше,
[53:14.160 --> 53:21.520]  внутри буквы A, там какие-то правила будут. На самом деле, если у вас есть такая ситуация, то она же вам
[53:21.520 --> 53:27.040]  по замыканию пройдет до другой ситуации, в которой когда-нибудь возникнет вещь вида, там,
[53:27.040 --> 53:33.320]  какой-то штрихов, и здесь наконец-то найдет будет маленькая буква. Вот по эту букву вы shift'ете,
[53:33.320 --> 53:39.560]  но вам это не нужно знать, потому что эта буква не явно прописана вот здесь, в этом EFF. Эта буква
[53:39.560 --> 53:49.120]  появилась вот тут, и эти слова просто сравнили глазами. Слово, которое тут возникает. Вот, значит,
[53:49.120 --> 53:56.280]  тогда надо делать shift. Вот, если ни одна ситуация не возникает, то тогда надо делать reject. Ну, на самом
[53:56.280 --> 54:02.880]  деле, принятие accept это reduce 0. Если у вас возникает вот такая вот штука, то просто тут S, тут S, тут S.
[54:02.880 --> 54:19.680]  Как делать переход? Ну, мы знаем, как делать. Вы делаете shift, если верно, что ваш аргумент
[54:19.680 --> 54:27.040]  попадает вот сюда. EFF от вот этого. Как это думать в жизненных терминах? Надо найти вот здесь,
[54:27.480 --> 54:33.480]  вот такую ситуацию. Она точно тут будет. Потому что когда-нибудь вам же нужно эту букву раскрыть,
[54:33.480 --> 54:38.800]  а, аш три, а два штриха, а три штриха. Вот, если она никогда не закончится, то понятное дело,
[54:38.800 --> 54:44.200]  что эта ситуация, по ней shift просто не работает, там reject будет. Сейчас, потому что эта ситуация
[54:44.200 --> 55:02.360]  просто недопустима. Вот, но надо искать вот это. По замыканию, смотрите, вот. K букв. Да, вот K букв.
[55:02.360 --> 55:07.880]  А состояние, вы состояние берете ситуации. Если такая ситуация есть, то такая ситуация тоже возникнет.
[55:07.880 --> 55:13.360]  Тут есть небольшой вопрос, тема, что если у вас есть не терминалы, которые вообще никак не водят,
[55:13.960 --> 55:21.040]  то тогда тут EFF просто пустой. Ну, то есть EFF это такой кастель для теории. Для практики вы просто
[55:21.040 --> 55:26.560]  должны найти вот такую ситуацию и явно эту букву прочитать. Вот, а для теории вы видите,
[55:26.560 --> 55:33.600]  что если есть такая ситуация и улежит EFF тут, то все верно. Так, здесь, надеюсь, вопрос опал.
[55:33.600 --> 55:42.400]  А как-нибудь куда идет переход? Когда вы не нашли не вот это, не вот это. Режет означает,
[55:42.400 --> 55:47.800]  что ваши конфигурации здесь, буквы, которые тут следуют, они никак не подозревают наличие
[55:47.800 --> 55:56.760]  буквы U, наличие вот этой строки U штрих. Почему? Потому что, если бы был вывод, в котором эта
[55:56.760 --> 56:01.200]  ситуация реально возникает, то есть там что-то происходит в конце U штрих, вот, строки в конце U
[56:01.200 --> 56:08.320]  штрих, вот, если такой вывод есть, то вы этот вывод изучили и вы его здесь описали, что тогда вот этот
[56:08.320 --> 56:15.360]  вот U штрих попадает сюда, либо попадает вот сюда. А если вывод тут нет, это означает, что этот вывод
[56:15.360 --> 56:23.040]  просто не существует. Он существует не как вывод, даже не существует как последнее правило. То есть это
[56:23.040 --> 56:31.000]  в принципе невозможно получить. И алгоритм, вот, ну, теория 5.9, о которой я сейчас постоянно уже говорю, говорит,
[56:31.000 --> 56:35.280]  что если существует вывод, то обязательно такая ситуация будет допустим. Ну, на самом деле это
[56:35.280 --> 56:44.520]  из определения более-менее следует. Сейчас. Да, это же допустимые ситуации. Вот, поэтому если уж вывод есть,
[56:44.520 --> 56:50.200]  о котором вы хотите его получить, то ситуация должна быть допустимой, а у вас-то неверно. Тогда значит
[56:50.200 --> 56:56.400]  вывода нет. А если вывода нет, значит ничего делать, ничего не делать. Отвергать. Не дочитывая слова до конца,
[56:56.400 --> 57:04.920]  нам это даже не нужно. На, в этом случае, на это правило, в случае на это правило. То есть оно, какое правило
[57:04.920 --> 57:10.120]  сейчас обрабатываете? Выше по дереву были другие правила. Эти другие правила помнится в соответствующих
[57:10.120 --> 57:17.280]  состояниях. Вот, смотрите, в вашем примере, эта ситуация, эта множество ситуаций ничего не знают про вот
[57:17.280 --> 57:23.920]  это. Когда вы прочитаете букву Y, вы взяли reduce, и сюда вернетесь, и тут взяли shift точки по B и точки по C.
[57:26.400 --> 57:40.440]  А, ну что такое shift? Жк переход, функция g. Ну здесь все тривиально просто. Значит, из ситуации гамма по
[57:40.440 --> 57:53.280]  букве X, какая бы она ни была, назовем вот такое множество Vgk. Вот. Ну, удивительно, правда? Что перейти по
[57:53.280 --> 57:59.520]  букве X надо просто сюда добавить. То есть go to по букве X, это может быть ситуация для такого префекса.
[57:59.520 --> 58:06.120]  Мы префикс расширили. Здесь в терминах вот у вас этот префикс расширяется на букву a маленькая, а тут на
[58:06.120 --> 58:15.640]  букву b большое и c большое. Ну вот оно здесь происходит. Вот отсюда рождается функция g. Вот здесь. Ну как она
[58:15.640 --> 58:21.160]  рождается? Подставляете сюда ситуацию S, сюда подставляете вашу букву, какая бы она ни была,
[58:21.160 --> 58:29.320]  большая или маленькая. Получается множество ситуаций. Если мы утверждаем, что мы знаем алгоритм,
[58:29.320 --> 58:37.080]  который находят все Vkg, то мы утверждаем, что мы go to полностью построили. Так, теперь термин 5.9,
[58:37.080 --> 58:44.400]  наконец. Дожидались, да. Так, кто не уснул? Михаил уснул.
[58:46.720 --> 58:48.440]  Бывает. Так.
[58:51.000 --> 58:52.320]  Теремок, агрегнация алгоритма.
[59:07.680 --> 59:15.360]  Ну вот на самом деле, кстати, кто в моей группе, вот здесь вот это все, это суть последней замашки.
[59:15.360 --> 59:19.920]  Все-таки была шипка, я считаю, что на прокреке это можно не делать.
[59:19.920 --> 59:33.480]  Ну вот некоторые будут делать тесты, они все это сделают все равно. Так, 430, 435, что-то буду искать.
[59:33.480 --> 59:40.280]  Первый том. Ну давайте его формулировать.
[59:40.280 --> 59:57.720]  Если грамматика, это LRK-грамматика, то. Даже не то, а тогда, только тогда.
[59:57.720 --> 01:00:15.880]  Для каждого слова, длины K или меньше, верну следующие условия.
[01:00:15.880 --> 01:00:25.680]  Какого условия верно? Пусть есть активный префикс.
[01:00:25.680 --> 01:00:37.120]  Альфа, бета, активный префикс. Что такое активный префикс? Напоминаю. Это такой префикс, который
[01:00:37.120 --> 01:00:42.960]  встретится в выводе на стеке. Ну вот тут у нас был гам-альф, а тут там будет альфа-бета. Просто здесь
[01:00:42.960 --> 01:00:47.520]  мне бета нужно было тут, поэтому я приехал с обозначениями. Есть это активный префикс.
[01:00:47.520 --> 01:01:10.720]  Префикс для цепочки слова. Альфа, бета, W. Слушайте для этого слова, что сразу после него,
[01:01:10.720 --> 01:01:17.560]  вот какое слово получается. Альфа, бета, W. W это какие кабухи мы дальше будем видеть.
[01:01:17.560 --> 01:01:24.360]  И для него допустимые ситуации.
[01:01:24.360 --> 01:01:49.320]  Какие ситуации для него допустимые? Вот такая ситуация, как бета, точка, U и вторая ситуация.
[01:01:49.320 --> 01:02:07.240]  Ну сейчас это ровно то, о чем я говорил. А1, бета, точка, вот так вот. В, причем
[01:02:07.240 --> 01:02:29.200]  упина лежит вот такому множеству. Ну здесь, только к примечанию, бета 2, возможно, пустое. Возможно,
[01:02:29.880 --> 01:02:44.720]  вводит пустое слово, тем не менее. Вот. Ну вот это невозможно. Да, на самом деле,
[01:02:44.720 --> 01:02:47.720]  это пределение с соопределением. Ну просто вот это пределение нужно там построить.
[01:02:47.720 --> 01:02:53.640]  Вот сейчас нужно где-то некоторые зуборубительные выкладки для этого. Но в чем смысл? Смотрите,
[01:02:53.640 --> 01:03:01.880]  то же самое, что тут было. Такая ситуация, вот она тут. Это что? Это reduce. А такая ситуация,
[01:03:01.880 --> 01:03:08.200]  если бета 2 пуст, то это тоже reduce. Если бета 2 не пуст, ну если бета 2 пуст, то у вас не EFF,
[01:03:08.200 --> 01:03:18.520]  а просто first от W. Если бета 2 не пуст, это EFF, это shift. Это shift, это reduce. В таблице возникнут
[01:03:18.520 --> 01:03:23.320]  две команды. Вот они. И мы говорим, что если допустимая такая ситуация, то такая ситуация
[01:03:23.320 --> 01:03:31.360]  недопустима. Вот. Мы хотим, чтобы они не попали на время на множество. Тогда мы говорим,
[01:03:31.360 --> 01:03:35.800]  что в множестве лежит либо это, либо это, либо ничего, потому что они временно лежать не могут.
[01:03:35.800 --> 01:03:43.560]  А это означает, что у нас либо reduce, то в чем однозначный reduce, либо shift, либо ничего нет,
[01:03:43.560 --> 01:03:54.240]  то есть reject. Вот такая вот теорема. Что, будем доказывать? Давайте докажем. Я тут не очень
[01:03:54.240 --> 01:04:12.280]  знаменитого качества. Доказательство Лемма Огдана это значение от Л-10 на экзамене. Ее решают часа 3.
[01:04:12.280 --> 01:04:20.200]  Ну, вы понимаете, что любая значение от Л-10 на экзамене решается не менее трех часов. Конечно,
[01:04:20.200 --> 01:04:25.120]  Георгий над вами прикалывал осознанно. Наверное, он занят усадьбе миллион баллов, я так думаю.
[01:04:25.120 --> 01:04:45.360]  Что-ли тоже Лемма Огдана, что ли, доказывать? Значит, необходимость. Ну, пусть, наверное.
[01:04:50.200 --> 01:04:58.440]  Так, давайте сейчас все это рассмотрим. У нас есть две такие ситуации допустимые.
[01:04:58.440 --> 01:05:09.280]  Значит, два ситуации допустимые. Существуют два вывода. Для этой ситуации, как выглядит вывод,
[01:05:09.280 --> 01:05:39.280]  альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-
[01:05:39.280 --> 01:06:09.280]  бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, альфа-бета, аль
[01:06:09.280 --> 01:06:39.280]  фа-один, бета-один, сейчас, да, вы раскрыли как альфа-один, бета-один, альфа-один и бета-один высвернули в альфу, вот он тут, получили как-то бета-два, правильно-неправильно, альфа-один, бета-один, да, вот оно, вот это же, альфа-один, бета-один, бета-два, х, ну, вот это, вот это и теперь все одинаковые,
[01:06:39.280 --> 01:06:58.280]  вот и буквы одинаковые, ну, у нас, сейчас, омега, х, это те буквы, которые там находятся дальше, ну, здесь, на самом деле, мы это не пишем, потому что тут уже написано, что эти ситуации обе возникли вместе в выводе, написано, что, ой, это еф-эф от бета-два,
[01:06:59.280 --> 01:07:20.280]  так, где, вот тут, в определении, тут, да, ну, и здесь уже написано, что K-букв совпали, вот это написано, ну, поэтому здесь я это не пишу, не то, чтобы префиксы, у них K-букв одинаковые,
[01:07:20.280 --> 01:07:34.280]  ну, я не знаю, что там, бог знает, что, что происходит, вот, ну, здесь, first K-букв равно U, ну, все по классике,
[01:07:34.280 --> 01:07:59.280]  first K от х равно V, вот, и альфа-бета, это альфа-бета-один, да, альфа-один-бета-один, да, здесь у меня будет небольшой косяк, вот, то есть, не обязательно, что у нас именно альфа получается, важно, что,
[01:07:59.280 --> 01:08:17.280]  важно, что вот это, вот это и вот это совпали, вот оно тут, ну, то есть, мы получили префикс альфа-бета двумя способами, ну, давайте посмотрим разбор случаев,
[01:08:17.280 --> 01:08:36.280]  забудовительных два случаев, ну, тут нужно, на самом деле, сказать, что если это два редьюса, то сразу запределение следует, что они одинаковые, если это shift и reduce, то тоже запределение следует, что они одинаковые, вот,
[01:08:36.280 --> 01:08:50.280]  три случая, они как раз таки выглядят, что это два редьюса с одной длиной, два редьюса с разными длинами и shift и reduce вместе, ну, понятное дело, что два шестаника фликтует, потому что если вы читаете букву, то вы ее просто читаете,
[01:08:50.280 --> 01:09:18.280]  в этом случае один, бета два пуст, бета два пуст, так, давайте смотреть, так, отсюда следует, что если у нас бета два пуст, смотрим сюда, этого нет, значит, вот эти штуки одинаковые,
[01:09:18.280 --> 01:09:38.280]  что уравновое, ну, то есть, раз вот эти вещи одинаковые, то тут первые буквы совпали, а если первые буквы совпали, то вот они вместе равны, вот мы же хотим сказать, что эти два правила в итоге выводят под строку альфа-бета-омега,
[01:09:38.280 --> 01:09:54.280]  в чем тут кроется проблема, вот это альфа-бета, а омега она вот здесь, а если бета два у нас нет, то омега она вот здесь, значит, у и вы равны, так, значит, и вывод имеет вид,
[01:09:54.280 --> 01:10:22.280]  из стрих альфа-а-омега, альфа-бета-омега, или с опуска, если вдруг возникает вопрос, задайте его обязательно, вот, и first равны,
[01:10:22.280 --> 01:10:47.280]  начну, и там, так, поскольку ситуации различные, либо а не равно а один, либо бета не равно бета один,
[01:10:47.280 --> 01:11:01.280]  давайте смотреть, ситуации разные, а бета два у нас нет, значит, у нас либо это не одинаково, либо это не одинаково, ну, либо оба, ну, вы понимаете, что в обоих случаях у нас
[01:11:01.280 --> 01:11:20.280]  определение сломалось, что такое определение, у вас и буквы равны, где-то тут оно было, кажется, оно было, но мы его стерли, ну, вот, если вспомнить определение, у вас и буквы равны, и получаемые кусочки префикса равны, вот эти суффиксы префикса тоже равны,
[01:11:20.280 --> 01:11:36.280]  в этом случае у вас буквы, в этом случае префикса, ну, все, вот это противоречие определению, g не lrk, это понятно сейчас?
[01:11:36.280 --> 01:12:01.280]  Почему уровно v? Значит, пусть бета два пустой, если бета два пустой, у нас вот этого нет, вот, а тут следует, что раз мы выводили одинаково, то здесь мы, ну, слова, возможно, разделены, ну, просто по рассмотрению, кажется, что даже ω вну иксу, но нам это не нужно думать, мы здесь говорим, что,
[01:12:01.280 --> 01:12:26.280]  вот, получаемое слово одинаковое, претензия тоже одинаковая, значит, что у него first одинаковые, тут first равно вну, тут first равно v, и значит, у и v равны, поскольку, вот, ω, оно, на самом деле, сопроводит вот этим, если этого нет, сопроводит в том, правильно-неправильно?
[01:12:26.280 --> 01:12:56.280]  Вот, я сейчас боюсь сказать, что ω равна иксу, но мне сильно хочется отверить, вот, ну, если мы говорим, что мы выявили одно и то же слово, здесь, на самом деле, могут возникнуть проблемы с тем, что у иксе могут быть не терминалы, которые как-то потом раскрываются, вот, но именно то, что тут first равны, оно следует именно отсюда, вот, как вы сказали, у нас бета два нет, поэтому, eff, а у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас иксу, у нас и
[01:12:56.280 --> 01:13:03.240]  treatments, вот та партия выхода of actions, и, в Zugen е, е в иксу, е в иксу, е икс 대� дна, е ана икс, е икс икс, о riders, е е икс, е икс для негативных или в икс для негативных или beleza, chooses m
[01:13:03.240 --> 01:13:21.480]  shirts for the ears and inks for that,
[01:13:21.480 --> 01:13:24.480]  и там объясните, почему у вас правильное
[01:13:24.480 --> 01:13:27.480]  работопустение в ЭКЖ, и вас вот это не
[01:13:27.480 --> 01:13:30.480]  примет, то можно позвать меня. Я там поругаюсь,
[01:13:30.480 --> 01:13:33.480]  чтобы это тоже принималось. Не одним автоматом
[01:13:33.480 --> 01:13:36.480]  следует человека, говорят, в случае 2.
[01:13:40.480 --> 01:13:44.480]  Ну, я готов принимать что угодно, если там
[01:13:44.480 --> 01:13:47.480]  будет понятно.
[01:13:47.480 --> 01:13:50.480]  Так.
[01:13:51.480 --> 01:13:55.480]  Beta2 это просто строка.
[01:13:55.480 --> 01:13:58.480]  Именно строка из букв.
[01:13:58.480 --> 01:14:01.480]  Из терминалов.
[01:14:03.480 --> 01:14:06.480]  Что это означает? Что тут написан shift, тут
[01:14:06.480 --> 01:14:09.480]  написан reduce.
[01:14:10.480 --> 01:14:13.480]  Beta2 равно z.
[01:14:13.480 --> 01:14:15.480]  That's what it is.
[01:14:15.480 --> 01:14:18.480]  Обозначим его так.
[01:14:19.480 --> 01:14:22.480]  И выводы имеют вид.
[01:14:28.480 --> 01:14:31.480]  Так, из штрих
[01:14:31.480 --> 01:14:34.480]  α, омега,
[01:14:34.480 --> 01:14:37.480]  α, бета, омега,
[01:14:37.480 --> 01:14:40.480]  из штрих
[01:14:40.480 --> 01:14:43.480]  α1,
[01:14:43.480 --> 01:14:46.480]  а1х и дальше
[01:14:46.480 --> 01:14:49.480]  а1х1, а1бета2, но это явно напишем.
[01:14:49.480 --> 01:14:52.480]  α1, бета1, zx.
[01:14:52.480 --> 01:14:55.480]  Почему тут перешел от греческой буквы к английской
[01:14:55.480 --> 01:14:58.480]  букве, чтобы понять, что это строка из маленьких букв.
[01:14:58.480 --> 01:15:01.480]  Вот.
[01:15:01.480 --> 01:15:04.480]  Ставим равенство.
[01:15:04.480 --> 01:15:07.480]  Этому тоже уже знаем.
[01:15:07.480 --> 01:15:10.480]  Так, и
[01:15:10.480 --> 01:15:13.480]  EF меняем на first.
[01:15:13.480 --> 01:15:16.480]  Так, есть шанс у кого-то в зале показать, что он все понимает,
[01:15:16.480 --> 01:15:19.480]  и писите, почему тут не EFF, а first будет написано.
[01:15:22.480 --> 01:15:25.480]  Да, выдавая слово точно не пустое.
[01:15:25.480 --> 01:15:28.480]  Не терминала нет, поэтому по определению EFF все одинаковые.
[01:15:29.480 --> 01:15:32.480]  Так, а равно у.
[01:15:32.480 --> 01:15:35.480]  Так, давайте покажем противоречие.
[01:15:40.480 --> 01:15:43.480]  Так, хочу что-то, с чем не совпадает.
[01:15:44.480 --> 01:15:47.480]  αa за x.
[01:15:52.480 --> 01:15:55.480]  Точно не равно чему.
[01:15:55.480 --> 01:15:58.480]  α1
[01:15:58.480 --> 01:16:01.480]  и
[01:16:01.480 --> 01:16:04.480]  1x.
[01:16:04.480 --> 01:16:07.480]  Так, что тут написано?
[01:16:07.480 --> 01:16:10.480]  Тут написано, что если бы это было LRK-грамматикой,
[01:16:10.480 --> 01:16:13.480]  то поскольку мы здесь получили одинаковые префисы,
[01:16:13.480 --> 01:16:16.480]  одинаковый кабух, то должно быть одинаковое правило.
[01:16:16.480 --> 01:16:19.480]  Получается, что справа написано одно и то же.
[01:16:19.480 --> 01:16:22.480]  Вот.
[01:16:22.480 --> 01:16:25.480]  αa за x.
[01:16:25.480 --> 01:16:28.480]  Отсюда следует, что в этом выводе
[01:16:28.480 --> 01:16:31.480]  до свидания.
[01:16:31.480 --> 01:16:34.480]  Подставим вот этот zx
[01:16:34.480 --> 01:16:37.480]  и попробуем вот этот по a.
[01:16:37.480 --> 01:16:40.480]  Так это LRK-грамматика, эти выводы должны быть одинаковые.
[01:16:40.480 --> 01:16:43.480]  Означает, что это и z можно получить.
[01:16:43.480 --> 01:16:46.480]  А эти вещи не совпали.
[01:16:51.480 --> 01:16:54.480]  Так, как z не пусто?
[01:16:58.480 --> 01:17:01.480]  Ну, видите, тут поскольку заднее пустое,
[01:17:01.480 --> 01:17:04.480]  вот тут x букв, а тут стоит не терминал,
[01:17:04.480 --> 01:17:07.480]  а тут стоит терминал.
[01:17:07.480 --> 01:17:10.480]  Эти стоки не равны,
[01:17:10.480 --> 01:17:13.480]  а это противоречие определению.
[01:17:13.480 --> 01:17:16.480]  У нас в определении требовалось, чтобы...
[01:17:16.480 --> 01:17:19.480]  Давайте здесь выпишу еще раз для того, чтобы...
[01:17:19.480 --> 01:17:22.480]  Сдает 40 из маленьких букв,
[01:17:22.480 --> 01:17:25.480]  а 1-то большая буква.
[01:17:25.480 --> 01:17:28.480]  У вас изначально...
[01:17:28.480 --> 01:17:31.480]  Вот ситуация.
[01:17:34.480 --> 01:17:37.480]  Здесь хорошо бы написать...
[01:17:37.480 --> 01:17:40.480]  Это явно противоречие.
[01:17:40.480 --> 01:17:43.480]  Мы требовали αy, но γbx.
[01:17:43.480 --> 01:17:46.480]  Начну там пишу α.
[01:17:48.480 --> 01:17:51.480]  Это было определение.
[01:17:51.480 --> 01:17:54.480]  Ну, вот оно у вас αay.
[01:17:54.480 --> 01:17:57.480]  Вот это, это, это.
[01:17:57.480 --> 01:18:00.480]  Вот это, это, это.
[01:18:00.480 --> 01:18:03.480]  Ну, то есть, явно в определении мы требовали, чтобы эти выводы...
[01:18:03.480 --> 01:18:06.480]  Оно значительно определяли последние правила.
[01:18:06.480 --> 01:18:09.480]  Это означает, что...
[01:18:09.480 --> 01:18:12.480]  Оно значительно определяли ста, которые мы видим.
[01:18:12.480 --> 01:18:15.480]  То есть, если тут одинаковые ферсты,
[01:18:15.480 --> 01:18:18.480]  то тут должна открываться одна и та же буква.
[01:18:18.480 --> 01:18:21.480]  Точно до того, что если вдруг у нас
[01:18:21.480 --> 01:18:24.480]  между этими выводами с префиксами один другого,
[01:18:24.480 --> 01:18:27.480]  то есть а1 получается из а правилами гида.
[01:18:27.480 --> 01:18:30.480]  Вот.
[01:18:30.480 --> 01:18:33.480]  А1, что-то, давай так, а штрих, что-то из а штрих получается там,
[01:18:33.480 --> 01:18:36.480]  а2 штрих, а что-то.
[01:18:36.480 --> 01:18:39.480]  И потом в итоге получается а1.
[01:18:39.480 --> 01:18:42.480]  Поэтому явно сказать, что прямо один этаж живой нельзя.
[01:18:42.480 --> 01:18:45.480]  Бывают такие ситуации.
[01:18:45.480 --> 01:18:48.480]  Вот. Но здесь просто задний терминал.
[01:18:48.480 --> 01:18:51.480]  Это значит, что строки, которые мы тут видим, они разные.
[01:18:51.480 --> 01:18:54.480]  Это просто противоречие с определением.
[01:18:54.480 --> 01:18:57.480]  Я вот это выписал, потому что сейчас сам в этом немножко сомнился.
[01:18:57.480 --> 01:19:00.480]  Вот. Ну, тут это видно.
[01:19:00.480 --> 01:19:03.480]  Букво есть определение. Можете сейчас вот там подтвердить,
[01:19:03.480 --> 01:19:06.480]  предоставить и увидеть, что ровно это мы и требовали.
[01:19:06.480 --> 01:19:09.480]  Так, где оно еще раз?
[01:19:09.480 --> 01:19:12.480]  Альфа АХ.
[01:19:12.480 --> 01:19:15.480]  Вот он. Вот это, это.
[01:19:16.480 --> 01:19:21.480]  И гамма БХ.
[01:19:24.480 --> 01:19:27.480]  Гамма БХ вот.
[01:19:27.480 --> 01:19:30.480]  Что-то такое.
[01:19:33.480 --> 01:19:36.480]  Так, ну это второй случай, третий случай совсем будет попроще.
[01:19:36.480 --> 01:19:39.480]  Так.
[01:19:39.480 --> 01:19:42.480]  По поводу случаи два. Надеюсь, что стало понятнее,
[01:19:42.480 --> 01:19:45.480]  что происходит. Ну то есть,
[01:19:45.480 --> 01:19:48.480]  эта ситуация соответствует тому, что тут мы делаем шифт
[01:19:48.480 --> 01:19:51.480]  и делаем продюс.
[01:19:51.480 --> 01:19:54.480]  А в первом случае это два шифта.
[01:19:54.480 --> 01:19:57.480]  Ну и давайте где-нибудь сделаем третью ситуацию.
[01:19:57.480 --> 01:20:00.480]  Третий случай. Вот этот самый несодержательный. Мы его сотрем.
[01:20:08.480 --> 01:20:11.480]  Существует не терминал.
[01:20:12.480 --> 01:20:15.480]  Принадлежащий чему?
[01:20:15.480 --> 01:20:18.480]  Бета два.
[01:20:18.480 --> 01:20:21.480]  Последний случай.
[01:20:21.480 --> 01:20:24.480]  Строка не просто не пустая, еще и слезательная не пустая.
[01:20:24.480 --> 01:20:27.480]  Ну тогда следует, что здесь, чтобы взять редюс,
[01:20:27.480 --> 01:20:30.480]  нужно сначала бета два как-то свернуть, а только потом
[01:20:30.480 --> 01:20:33.480]  сворачиваться в А1.
[01:20:33.480 --> 01:20:36.480]  Ну здесь это явно написано.
[01:20:36.480 --> 01:20:39.480]  Бета два у нас выводит, что
[01:20:39.480 --> 01:20:42.480]  Б у3,
[01:20:42.480 --> 01:20:45.480]  У1, У2, У3
[01:20:45.480 --> 01:20:48.480]  и
[01:20:48.480 --> 01:20:51.480]  У1, У2 не
[01:20:51.480 --> 01:20:54.480]  Эпсилон.
[01:20:54.480 --> 01:20:57.480]  Ну то есть, это вывод содержательный.
[01:20:57.480 --> 01:21:00.480]  Так.
[01:21:00.480 --> 01:21:03.480]  Как
[01:21:03.480 --> 01:21:06.480]  не терминал B не
[01:21:06.480 --> 01:21:09.480]  меняется
[01:21:09.480 --> 01:21:12.480]  на Эпсилон?
[01:21:12.480 --> 01:21:15.480]  Почему на Эпсилон не меняется?
[01:21:15.480 --> 01:21:18.480]  Потому что в EFF явно написано,
[01:21:18.480 --> 01:21:21.480]  ну ладно, тут уже не написано, но было написано, что
[01:21:21.480 --> 01:21:24.480]  первый самый левый терминал на Эпсилон не заменяется.
[01:21:24.480 --> 01:21:27.480]  Мы гардерно читаем K букв.
[01:21:27.480 --> 01:21:30.480]  В случае с одной буквой мы прочитали одну букву
[01:21:30.480 --> 01:21:33.480]  и были уверены, что эта одна буква точно есть.
[01:21:33.480 --> 01:21:36.480]  Тут мы уверены, что K букв точно есть.
[01:21:36.480 --> 01:21:39.480]  Так есть два вывода.
[01:21:39.480 --> 01:21:42.480]  Первый как будто и остался.
[01:21:45.480 --> 01:21:48.480]  Альфа, бета, омега.
[01:21:48.480 --> 01:21:51.480]  Второй вывод стал сложнее.
[01:21:51.480 --> 01:21:54.480]  Альфа 1, бета 1, бета 2, х.
[01:21:54.480 --> 01:21:57.480]  Альфа 1, бета 1, бета 2, х.
[01:21:57.480 --> 01:22:00.480]  Альфа 1, бета 1, бета 1, бета 2, х.
[01:22:00.480 --> 01:22:03.480]  Я пропущу тут два шага.
[01:22:03.480 --> 01:22:06.480]  Бета 1, У1, У2, У3, х.
[01:22:06.480 --> 01:22:09.480]  Ну то есть,
[01:22:09.480 --> 01:22:12.480]  вот этот вывод поставили сюда.
[01:22:12.480 --> 01:22:15.480]  Альфа 1, бета 1 равно альфа,
[01:22:15.480 --> 01:22:18.480]  альфа, бета, как было до этого.
[01:22:18.480 --> 01:22:21.480]  В определении
[01:22:21.480 --> 01:22:24.480]  из определения
[01:22:24.480 --> 01:22:27.480]  из определения
[01:22:27.480 --> 01:22:30.480]  из определения, что мы требовали?
[01:22:30.480 --> 01:22:33.480]  Так что тут целая куча длинных срок одинаковых.
[01:22:33.480 --> 01:22:36.480]  Альфа, А, У1, У2, У3, х.
[01:22:36.480 --> 01:22:39.480]  Альфа, А, У1, У2, У3, х.
[01:22:39.480 --> 01:22:42.480]  Это вот то, что было там.
[01:22:42.480 --> 01:22:45.480]  Равно альфа 1, бета 1
[01:22:45.480 --> 01:22:48.480]  равно альфа 1, бета 1.
[01:22:48.480 --> 01:22:51.480]  То есть мы посмотрим эти выводы не вот так теперь,
[01:22:51.480 --> 01:22:54.480]  а вот эту часть и часть, которая с буквой Б.
[01:22:54.480 --> 01:22:57.480]  У нас теперь сам правильный терминал поменялся.
[01:22:57.480 --> 01:23:00.480]  Тут он был А1, а тут он уже не А1.
[01:23:00.480 --> 01:23:03.480]  Для определения это уже будет Б1.
[01:23:03.480 --> 01:23:06.480]  Альфа 1.
[01:23:06.480 --> 01:23:09.480]  Так.
[01:23:09.480 --> 01:23:12.480]  Бета 1, У1, Б.
[01:23:12.480 --> 01:23:15.480]  Бета 1, У1.
[01:23:21.480 --> 01:23:24.480]  Смотрите, у вас префикс
[01:23:24.480 --> 01:23:27.480]  стоит сразу после точки. Вот точка, вот точка, вот они.
[01:23:27.480 --> 01:23:30.480]  У вас префиксы совпали.
[01:23:30.480 --> 01:23:33.480]  Это самое главное, что нужно понимать об алгоритме, что у вас
[01:23:33.480 --> 01:23:36.480]  совпали префиксы и совпали части за правилами.
[01:23:36.480 --> 01:23:39.480]  Префиксы вы контролируете. Что видит алгоритм?
[01:23:39.480 --> 01:23:42.480]  Он смотрит, что у него есть на слове. Вот он вот это
[01:23:42.480 --> 01:23:45.480]  не отличает, что это за правилам или внутри правилам.
[01:23:45.480 --> 01:23:48.480]  Вот. Поэтому мы говорим, что тут за правилам, а если
[01:23:48.480 --> 01:23:51.480]  стоит точка, ну вот это за правилам. А это стек, он
[01:23:51.480 --> 01:23:54.480]  просто знает. Поэтому мы говорим, что мы всегда знаем
[01:23:54.480 --> 01:23:57.480]  две вещи. Вот эту вещь и вот эту вещь тут.
[01:23:57.480 --> 01:24:00.480]  Просто в тему чтения у вас вот эта часть
[01:24:00.480 --> 01:24:03.480]  эта часть вместе свернется, ну там же написано было
[01:24:03.480 --> 01:24:06.480]  first от альфа У.
[01:24:06.480 --> 01:24:09.480]  Вот. Поэтому мы не знаем положение точки в правиле,
[01:24:09.480 --> 01:24:12.480]  но мы знаем, что эта точка находится в слове где-то.
[01:24:12.480 --> 01:24:15.480]  Так. Здесь что написано?
[01:24:15.480 --> 01:24:18.480]  Мы рассматриваем два правых вывода. Порождающий
[01:24:18.480 --> 01:24:21.480]  стек. Ну, тут
[01:24:21.480 --> 01:24:24.480]  вывод с последним открытием, чтобы вот
[01:24:24.480 --> 01:24:27.480]  получить этот префикс. И тут чтобы все было
[01:24:27.480 --> 01:24:30.480]  буквами. Мы же хотели, чтобы у нас после
[01:24:30.480 --> 01:24:33.480]  префиксов только буквы шли. Тут нужно открыть просто
[01:24:33.480 --> 01:24:36.480]  букву А. А тут нужно открыть букву А1 и дойти
[01:24:36.480 --> 01:24:39.480]  до буквы Б. Поэтому тут вывод стал длиннее, мы
[01:24:39.480 --> 01:24:42.480]  фокусируемся на разных частях. Вот. Значит мы
[01:24:42.480 --> 01:24:45.480]  требуем определения вот это. Это можете проверить?
[01:24:45.480 --> 01:24:48.480]  Что-то, ну правда так есть.
[01:24:48.480 --> 01:24:51.480]  Так.
[01:24:51.480 --> 01:24:54.480]  Вот отсюда.
[01:24:54.480 --> 01:24:57.480]  Считая, что альфа Бета
[01:24:57.480 --> 01:25:00.480]  один равно альфа Бета.
[01:25:00.480 --> 01:25:03.480]  Получаем
[01:25:03.480 --> 01:25:06.480]  Ау1у2
[01:25:09.480 --> 01:25:12.480]  равно чему?
[01:25:12.480 --> 01:25:15.480]  Так. Ау1у2
[01:25:15.480 --> 01:25:18.480]  Бета1
[01:25:21.480 --> 01:25:24.480]  Вот.
[01:25:24.480 --> 01:25:27.480]  Ну это оттуда получается при помощи
[01:25:27.480 --> 01:25:30.480]  Постановки то, что у нас префиксы равны.
[01:25:30.480 --> 01:25:33.480]  Так.
[01:25:33.480 --> 01:25:36.480]  Сейчас посмотрим, как
[01:25:36.480 --> 01:25:39.480]  это получилось из определения.
[01:25:39.480 --> 01:25:42.480]  То есть,
[01:25:42.480 --> 01:25:45.480]  вот эта часть.
[01:25:45.480 --> 01:25:48.480]  Вот так.
[01:25:53.480 --> 01:25:56.480]  Вот так.
[01:25:56.480 --> 01:25:59.480]  Ну, это строки из букв.
[01:25:59.480 --> 01:26:02.480]  Вот.
[01:26:02.480 --> 01:26:05.480]  И тут из того, что у нас
[01:26:05.480 --> 01:26:08.480]  EFF верен, вот эти вот строки можно убрать.
[01:26:08.480 --> 01:26:11.480]  Осталось вот это.
[01:26:11.480 --> 01:26:14.480]  Вот это и вот это.
[01:26:14.480 --> 01:26:17.480]  Но если посмотреть внимательно, то
[01:26:17.480 --> 01:26:20.480]  то, что они совпали, написано здесь.
[01:26:20.480 --> 01:26:23.480]  Просто этот Бета2, он даже там открылся, открылся, открылся и получилось
[01:26:23.480 --> 01:26:26.480]  вот это вот ровно и получилось.
[01:26:26.480 --> 01:26:29.480]  У3 и потом Х, который вылез отсюда.
[01:26:29.480 --> 01:26:32.480]  Где он?
[01:26:32.480 --> 01:26:35.480]  Вот он Х.
[01:26:45.480 --> 01:26:48.480]  Да, но они же не обо откуда взялись.
[01:26:48.480 --> 01:26:51.480]  У нас же в правилах КАБУК зафиксировано.
[01:26:51.480 --> 01:26:54.480]  Но эти КАБУК,
[01:26:54.480 --> 01:26:57.480]  они выходят отсюда и отсюда.
[01:26:57.480 --> 01:27:00.480]  Кажется так. Сейчас, минутку.
[01:27:00.480 --> 01:27:03.480]  Так.
[01:27:03.480 --> 01:27:06.480]  В определении требуется, чтобы они были равны.
[01:27:06.480 --> 01:27:09.480]  Ага, вот.
[01:27:09.480 --> 01:27:12.480]  Значит, у нас не только префикс, у нас еще и КАБУК
[01:27:12.480 --> 01:27:15.480]  устроили, которые должны были записать. Спасибо, что меня
[01:27:15.480 --> 01:27:18.480]  остановили здесь.
[01:27:21.480 --> 01:27:24.480]  Вот.
[01:27:24.480 --> 01:27:27.480]  Здесь написано, что вот эти вот строки совпали.
[01:27:27.480 --> 01:27:31.480]  Вот он тут. У1, у2, у3, Х.
[01:27:31.480 --> 01:27:34.480]  Вот этот кусок, который находится за Бета1, за префиксом.
[01:27:34.480 --> 01:27:37.480]  Он совпал с куском за префиксом вот тут.
[01:27:37.480 --> 01:27:40.480]  Вот где мы получали А, получали ВА.
[01:27:40.480 --> 01:27:49.960]  так у у у нас возникало первого вывода я точно помню шон там был
[01:27:49.960 --> 01:27:56.580]  ири где у нас возникло сейчас
[01:27:56.580 --> 01:28:06.180]  Что, поехали по значению что ли? Так, ну тогда давайте разбираемся.
[01:28:06.180 --> 01:28:26.340]  Так, и рекордация где-то повыше был.
[01:28:26.340 --> 01:28:55.820]  У, по идее, должно получаться из, ну если мы говорим, что у нас есть веб,
[01:28:55.820 --> 01:29:03.700]  в котором получается W, и вывод в котором из А1 получается вот тут бета 1, бета 2,
[01:29:03.700 --> 01:29:10.740]  из бета 1 это даже открывается, то вот этот хвост, который находится после префикса,
[01:29:10.740 --> 01:29:23.260]  соответственно хвосту здесь. Кажется должно быть верно вот так. Сейчас я посмотрю. Нервно сложная
[01:29:23.260 --> 01:29:30.660]  теорема на самом деле. Так, давайте своими силами, сейчас попробую еще остылать, переписать и вытащить.
[01:29:30.660 --> 01:29:40.220]  Что? Как потом сократили? Ну дальше на самом деле нужно смотреть, что у нас известно. У нас известно,
[01:29:40.220 --> 01:29:50.220]  что альфа б, альфа 1, бета 1, вот. Видишь, что тут альфа 1, бета 1 есть как префикс, а тут нету.
[01:29:50.220 --> 01:29:54.820]  Означает, что здесь можно поставить бета вместо этого. Вот этот альфа сокращается,
[01:29:54.820 --> 01:30:06.420]  тут как-то сокращается, бета останется, и вот он тут будет. Сейчас вместо 1 бета надо поставить,
[01:30:06.420 --> 01:30:20.660]  проверяем. Так, попробую еще раз это вывести. Вот, я боюсь, что напулся на какую-то опечатку,
[01:30:20.660 --> 01:30:28.980]  но при этом настолько простая вещь, что сейчас мы, кажется, сами получим. Что? Нет опечаток,
[01:30:28.980 --> 01:30:46.260]  согласен. Первый вывод. Вот он. Альфа а, омега, альфа бета, омега. Второй вывод. Альфа 1,
[01:30:46.260 --> 01:31:05.620]  а1, а1 х, из а1, альфа 1. Так, из а1, из бета 1, бета 1, бета 2 пишем. Ну ладно, сейчас бета 2 раскроем.
[01:31:05.620 --> 01:31:31.380]  Вот х, отсюда а1, бета 1, о1, б, у3х. Открыл вот здесь. Дальше а1, бета 1, у1, у2, у3х.
[01:31:31.380 --> 01:31:35.780]  В терминах теоремы. Есть два вывода, где сам правильный терминал раскрывается. Мы дождались
[01:31:35.780 --> 01:31:51.420]  момента, где сам правильный терминал не терминал. Тут б, тут а. Альфа 1, бета 1, у1. Это, кажется,
[01:31:51.420 --> 01:32:07.620]  неправда, у вас точка. Вот у вас точка для активного префикса. У вас префикс. Вот. Вы смотрите на
[01:32:07.620 --> 01:32:21.540]  эту, на эти выводы. Так, давайте сейчас это примерно напишу и мы сейчас с ним посмотрим. Так, чтобы
[01:32:21.540 --> 01:32:34.020]  точно не наврать ужаса сложные вещи, именно потому что формальные. Альфа, альфа, бета, омега.
[01:32:37.620 --> 01:32:52.500]  Так, ну ферсты совпали. С этим вопросов не возникает, потому что это явно просели. Отсюда следует,
[01:32:52.500 --> 01:33:16.780]  что альфа, ау, но гамма, бх. Вот. То есть, альфа равно гамма, а равно б, х равен у. Давайте смотреть,
[01:33:16.780 --> 01:33:29.220]  что у вас активный префикс. Вот он, альфа, бета. Тут, вот он, альфа, бета. Тут эта гамма, даже не эта гамма.
[01:33:29.220 --> 01:33:49.020]  У вас вывод остается вот здесь. Вот. Сейчас попробую с этим посмотреть. То, что находится до правой
[01:33:49.020 --> 01:34:03.180]  буквы здесь. Вы считаете, что вот это активный префикс теперь будет? Так. Ну равно смутное
[01:34:03.180 --> 01:34:14.900]  ощущение, что это не должно быть так. Что? Да, это сейчас кажется, что такое должно получиться. Так,
[01:34:14.900 --> 01:34:30.420]  определение. Вот буква, вот буква. Хорошо. Вот префикс. Тут у нас что является? Давайте посмотрим.
[01:34:30.420 --> 01:34:43.620]  Нам нужно найти кусок, состоящий из букв. Тут этот кусок вот здесь, а тут это у3х. Вот.
[01:34:44.900 --> 01:34:50.660]  Значит, ну из того, что мы написали, мы знаем как раз таки, что эти вещи совпадают с первым к буквам.
[01:34:50.660 --> 01:35:06.740]  Хорошо. Значит, что мы вывели из b? Мы вывели у2. Тут что мы вывели? Так. Не, прежде, так вот он,
[01:35:06.740 --> 01:35:13.100]  активный префикс тут. Активный префикс тут, он кажется, еще длиннее. Вот он такой. Вот. Вот это
[01:35:13.100 --> 01:35:30.700]  я готов поверить. Так, ну раз они равны. Раз они равны. Так. Ну давайте теперь напишем тут. Значит,
[01:35:30.700 --> 01:35:57.900]  а равно b. А равно b. Дальше. Гамма равно альфа. Альфа равно тому, что было здесь. Вот. И, неужели,
[01:35:57.900 --> 01:36:11.420]  это удивительно. Нашли отпечатку Вахо Ульманью. Страшно становится. Так. И x. Здесь написано x равно y.
[01:36:11.420 --> 01:36:24.140]  Вот это равно вот этому. Здесь что написано? x равно y3x. Вот. Ну поскольку оттуда следует,
[01:36:24.140 --> 01:36:31.180]  что он равен еще и омеге, хочется получить, что на самом деле такая ситуация, в принципе, невозможна.
[01:36:31.180 --> 01:36:48.740]  Так. У1, у2 не пустое. Это не пусто, потому что вывод не тривиальный. Так.
[01:36:54.140 --> 01:37:09.580]  Подставляю. Меня вот этот меня смущает. Вот он. Если оттуда сказать, что у1 пусто,
[01:37:09.580 --> 01:37:13.940]  тогда получается, что у нас b выводится сразу. Сейчас попытаюсь понять, где это надо сказать.
[01:37:13.940 --> 01:37:39.020]  Получили два вывода. Хорошо. Так. Теперь здесь. Что является активным префиксом? Тут альфа,
[01:37:39.020 --> 01:37:45.180]  бета. То, что было здесь. Но активный префикс точно тут альфа, бета. Тут он должен быть каким-то...
[01:37:45.180 --> 01:37:54.620]  А здесь он получается... Кстати, нет, не полностью. Все-таки вы здесь неправильно говорите. Мы же
[01:37:54.620 --> 01:38:01.180]  берем не все, что получается тут. А, ну как я говорил в начале, у нас возникла ситуация,
[01:38:01.180 --> 01:38:08.220]  что здесь мы открыли по альфа, бета, а тут бета был длиннее. Тут у нас b открылась как это 1,
[01:38:08.220 --> 01:38:14.020]  бета это 2. В начале, помните, такое было? Вот мы говорили, что мы вот это заберем,
[01:38:14.020 --> 01:38:18.580]  это заберем в гамму, это как бета, а это откроем туда дальше.
[01:38:18.580 --> 01:38:31.660]  Гамма то, что до b большой выйдет, но префикс у нас в итоге короче. То есть получается гамма
[01:38:31.660 --> 01:38:39.540]  должно быть меньше, потом мы должны забрать. А если здесь говорить, что вот это гамма...
[01:38:39.540 --> 01:38:51.300]  Давайте посмотрим на этот вывод вот так. Вот, и потом заберем вот так. А все остальное скинем...
[01:38:51.300 --> 01:39:02.340]  Вот бету мы забрали, вот это мы забрали. А потом к тому, что вот оттуда как-то вылезет вот это.
[01:39:02.340 --> 01:39:10.180]  И вот это остаток слова. Посмотрим на один шаг назад. Вот. Да, вы кажется,
[01:39:11.180 --> 01:39:26.980]  тогда вот эта часть равна вот этой части. Что? B2 где? B2 это строка. B2 это вот она тут была,
[01:39:26.980 --> 01:39:37.420]  и B2, по-моему, даже тут не вводится, просто равно. Вот так обозначили, да. Хотя B2 не терминальный
[01:39:37.420 --> 01:39:43.780]  символ. А, мы видим последнее правило, то есть из него выводится. Тут был какой-то не терминальный
[01:39:43.780 --> 01:39:55.100]  символ, он как-то пооткрывался, и предпоследний шаг выглядит вот так. Вот вам два вывода. Здесь
[01:39:55.100 --> 01:40:01.020]  остановились, тут за один шаг получили это, а тут самый плохой случай реализовался. Так мы еще,
[01:40:01.940 --> 01:40:18.420]  ну ладно. Так, тут мы дочитали до B1. Ну, здесь получается, что вот этот кусок, он очень длинный,
[01:40:18.420 --> 01:40:27.660]  вот он тут. Мы оттуда сразу сюда идем, вот это тогда наш префикс, это наше слово. Тогда это слово
[01:40:27.660 --> 01:40:44.400]  должно быть равно чему. Что смотрим? Вот этот этот. Давайте смотрим. Так,
[01:40:44.400 --> 01:41:04.320]  и разбираемся. У1, у2, у3х. Остаток слова. Слово не удлинилось. Вот. Это уже что-то,
[01:41:04.440 --> 01:41:21.120]  что должно быть похоже. На один шаг назад. Я бы уверен, что это получалось, когда это все
[01:41:21.120 --> 01:41:42.440]  выписывал у себя сейчас перестало. Так, EF на First. Нам.
[01:41:42.440 --> 01:42:10.880]  Даже что-то Y вообще не выводился. Так, а еще здесь получается что? Получается вот он тут. Ну,
[01:42:10.880 --> 01:42:17.600]  давайте сейчас не терминал, когда разберемся. Тогда уже со словом потом будет видно, что у нас
[01:42:17.600 --> 01:42:34.640]  буквы равны. A равно A1. Это мы получили. Рефиксы мы тоже получили. И еще гамма совпала. Вот здесь
[01:42:34.760 --> 01:42:48.920]  совпало. Вот. Ну, просто отсюда должно получаться, что непременно у1, у2 пустое. Что? Ну, у3 как раз
[01:42:48.920 --> 01:42:55.280]  таки попадет сюда. Вот. И как раз таки тут, поскольку оно пусто, а мы предположим, что оно не пусто в
[01:42:55.280 --> 01:43:01.920]  терминах того, что здесь EFF, и здесь получается проблема. Вот противоречие, оно оказывается здесь,
[01:43:01.920 --> 01:43:06.680]  что поскольку тут EFF, это не должно быть пустым множеством, оно получается пустым, потому что
[01:43:06.680 --> 01:43:15.480]  восприятие такое. Кажется, распутались. Да, нет? Еще раз. Смотрите. Что значит, что у нас здесь
[01:43:15.480 --> 01:43:21.440]  написано EFF? Ну, блядь, shift. Значит, если у нас бета2 не пустой, то открываться, первый не терминал,
[01:43:21.440 --> 01:43:26.720]  как не пустое слово. Мы это предполагаем здесь и пишем тут, что вот это не пусто. Потому что такое
[01:43:26.720 --> 01:43:31.160]  принято EFF. И мы такое вот рассматриваем. Но, если мы его расписываем в терминах определения,
[01:43:31.160 --> 01:43:38.800]  мы получаем, что вот это слово должно совпасть вот этим словом. Чтобы они совпали, вот эти
[01:43:38.800 --> 01:43:44.160]  непременно пустыми словами. Это означает, что если мы сконцентрируемся на этом правиле,
[01:43:44.160 --> 01:43:56.880]  видим U, то здесь... Нет, вот U3, она попадает в V, вот так вот. Вот. Вот U1, U2 будут пустыми,
[01:43:56.880 --> 01:44:07.560]  а U3х попадут сюда. Видите, U это бета2V. В бета2 у вас вылезет U3, вот. И U у вас останется.
[01:44:07.560 --> 01:44:22.520]  Стало понятнее? Ну, здесь что написано? U лежит в EFF от бета2V. Что здесь означает? Вот он U,
[01:44:22.520 --> 01:44:37.160]  U, который там возникнет. Тут U, а здесь V лежит вот здесь. Означает, что вот эта вещь совпадает
[01:44:37.160 --> 01:44:43.160]  вот с этой вещью, а вот это не пусто, потому что EFF. Но мы и получили, что оно пустое,
[01:44:43.160 --> 01:44:59.640]  как раз таки тут. Вот это строка. Вот. Да, все, себя точно убедилось, осталось вас убедить.
[01:44:59.640 --> 01:45:17.400]  Так. Вот здесь, да? Так. X это тот же самый X.
[01:45:17.400 --> 01:45:31.880]  Так. Потом, сейчас, где-то в словах не потеряться, потому что здесь у нас А1,
[01:45:31.880 --> 01:45:40.440]  он открылся, открылся, открылся, пришел сюда. Вот. А1, бета1 и бета2 открывалось.
[01:45:40.440 --> 01:45:54.360]  Надо спросить, куда точка попала. Ну, здесь в определении у нас префикс, вот он тут,
[01:45:54.360 --> 01:46:09.320]  и вот он тут. А здесь, так, ну, мы используем понятие префикса. Сейчас я это найду и покажу.
[01:46:09.320 --> 01:46:24.000]  И X. И X это не то, что выходит из правила. То есть сюда еще дополнительно что-то попало,
[01:46:24.000 --> 01:46:29.960]  вот эта вот вещь. Ну, да, вообще получается, что вы правы, там не то, что у 2, там все ушки,
[01:46:29.960 --> 01:46:37.400]  все ушки пустые. Кажется, получается так. Но в любом случае нам нужно доказать,
[01:46:37.400 --> 01:46:43.760]  что у 2, у 3 пустой, у 1, у 2 пустой, а мы предположили, что они пустые, потому что ЕФФ. Ну,
[01:46:43.760 --> 01:46:46.880]  третья ситуация соответствует какому-то шрифту, после которого происходит какой-то
[01:46:46.880 --> 01:46:53.440]  редюс. Ну, самое плохое в своем определении, когда мы должны дочисать больше. Вот. Разбрались?
[01:46:53.440 --> 01:47:00.120]  Наверное. Так, это надо еще порасписывать. Я это еще порасписать. Я еще раз пишу,
[01:47:00.120 --> 01:47:12.320]  скину обязательно в канал. Канал общий, конечно. Не, ну, если это скину, то скину всем. Вот. У
[01:47:12.320 --> 01:47:17.400]  меня это точно работало, сейчас это что-то развалилось. Я сегодня еще это порасписываю.
[01:47:17.400 --> 01:47:38.360]  Я не верю, что я знаю кого-то, кто может это это нормально. Вот. Что? Ну,
[01:47:38.360 --> 01:47:47.880]  давайте тогда в обратную сторону разберемся, чтобы сейчас не дайте теме. Так, ну, J это не
[01:47:47.880 --> 01:48:09.640]  леограмматика. Построю вывод. Ну, построю эту систему вывода. Значит, это шрифт. Так, и
[01:48:09.640 --> 01:48:23.440]  второе вывод. Какой-то гамма BX. Откроем гамму, откроем B, дельта Х. Еще что-нибудь поделаем,
[01:48:23.440 --> 01:48:45.840]  получим альфа, альфа, бета, у. Ну, это все как тут. Чуть при которых альфа не равно гамма BX. Так.
[01:48:45.840 --> 01:49:10.560]  И ферсты совпали. Ферст К равно ферст К. Y. Что? Ну, написано альфа Y равно гамма BX. Сейчас,
[01:49:10.560 --> 01:49:23.080]  альфа АВ равно гамма BX. Сейчас проверю. Да, Y. Я прошу прощения, здесь описка. Так. Ну, значит,
[01:49:23.080 --> 01:49:28.720]  там доказывается промежуточная лемма, которую я краски опустил, о том, что здесь без значения
[01:49:28.720 --> 01:49:35.840]  общества можно считать, что прессикс длиннее. Сейчас объясню, как она доказывается. Гамма дельта
[01:49:35.840 --> 01:49:49.040]  больше, чем альфа, бета. Что это означает? Что тут нужно, непременно, читать больше. Ну,
[01:49:49.040 --> 01:49:52.160]  если больше читать не нужно, то давайте мы откажемся на пару правил назад и посмотрим,
[01:49:52.160 --> 01:49:59.440]  в какой момент мы перестали читать. Вот. Это что-то совсем техническое, поэтому я это пока оставлю.
[01:49:59.440 --> 01:50:08.080]  Ну, то есть, если вы вот, если вот это короче, то мы тут просто посмотрим на правила,
[01:50:08.080 --> 01:50:12.840]  которые идут, следует дальше, рассмотрим его. Так, чтобы мы прочитали сильно больше,
[01:50:12.840 --> 01:50:21.400]  чем здесь. Вот. Ну, поэтому будем считать, что тут пресс не длиннее, разбирая как-нибудь даль,
[01:50:21.400 --> 01:50:28.520]  там получим бета и видим у. Вот. Ну, еще раз, что я считаю, что у нас случае короче? Что тут оно
[01:50:28.520 --> 01:50:38.040]  короткое? Если вот это короткое, означает, что здесь есть не терминалы, которые в будущем откроют нам
[01:50:38.040 --> 01:50:45.000]  альфа, бета. Давайте не терминалы открывать, открывать, открывать. Пока в какой-то момент слова,
[01:50:45.000 --> 01:50:50.160]  которые будут фиксировать, фиксировать слова, пока не получится больше. Она точно получится больше,
[01:50:50.160 --> 01:50:59.440]  потому что нам нужно здесь получить. Сейчас. Нам нужно получить здесь по слова длины к. Ну, вот. Тут
[01:50:59.440 --> 01:51:07.440]  хвост слова, тут хвост слова. Вот. И если тут строка короткая, мы не терминалы, продолжаем дальше
[01:51:07.440 --> 01:51:12.440]  открывать, открывать, открывать, пока строка не станет длиннее. И в какой-то момент скажем,
[01:51:12.440 --> 01:51:28.080]  что вот это расширим. Дельта – это то, что уходит с бета. Вот. Так. Чуть дальше разбираемся.
[01:51:28.080 --> 01:51:46.200]  Так. Чуть. Пусть. Чуть последнее. В этом выводе. Здесь вывод 0, здесь вывод 1. В 1 последняя строка.
[01:51:46.200 --> 01:52:11.960]  Это. Ага. Последняя строка альфа 1. То есть, мы вывели вот это, потом получили это за один шаг.
[01:52:11.960 --> 01:52:22.960]  Это длина открытой части не больше, чем альфа бета плюс 1. Ну, смотрите, мы вывели вот это,
[01:52:22.960 --> 01:52:28.880]  и за один шаг получили вот это. Ну, то есть, это самая последняя цепочка, которая происходила
[01:52:28.880 --> 01:52:38.400]  перед выводом вот этой. Ну, как это выглядит? Я писал такую вот цепочку с альфа 0, альфа 1. Это
[01:52:38.400 --> 01:52:52.920]  последний. До него вот этот был. Вот. Значит, поскольку здесь больше, давайте поищем такую последнюю цепочку,
[01:52:52.920 --> 01:53:08.480]  что? Может, самый первый. Ну, просто здесь хочется сказать, что здесь топ-префикс на стеке под длине
[01:53:08.480 --> 01:53:15.760]  больше либо равен, чем альфа бета плюс 1. Ну, в конце больше. Вот. И давайте мы идем по выводам,
[01:53:15.760 --> 01:53:26.320]  идем, идем, идем, пока в первый раз не будет хотя бы альфа бета плюс 1. Ну, вот, остановились. Так,
[01:53:26.320 --> 01:53:32.240]  отсюда. Значит, куда-нибудь пойдем писать. Я очень хочу это стереть. Видимо, придется это стереть.
[01:53:32.240 --> 01:53:51.040]  Альфа 1, который меньше ли равен, чем альфа бета, меньше ли равен, чем гамма бета. Ну да, в силу выбора.
[01:53:51.040 --> 01:54:00.320]  Вот. Это потому что альфа 1 входит в альфа бета. Альфа 1, бета 1, то альфа бета. Вот там это было
[01:54:00.320 --> 01:54:10.400]  написано. А здесь, ну вот он, исполнил вот это. Тут альфа 1 взят. Ну, мы хотим построить вот это,
[01:54:10.400 --> 01:54:16.160]  может, на ситуации. То есть, мы говорим, рассмотрим выбор, в котором тут получается больше, чем здесь,
[01:54:16.160 --> 01:54:20.640]  открывание терминала. После этого рассмотрим последнюю строку, на которой было короче,
[01:54:20.640 --> 01:54:25.280]  потом стало длиннее. То есть, это первая такая строчка, что тот рефикс, который был на стеке,
[01:54:25.280 --> 01:54:29.520]  то есть, предпоследний шаг, должен быть не терминала, был хотя бы альфа бета плюс один.
[01:54:29.520 --> 01:54:40.320]  Но мы сейчас на построим. Мы хотим вытащить вот альфа 1, который был здесь, а1 и бета 1. Вот мы
[01:54:40.320 --> 01:55:00.400]  сейчас выбрали альфа 1. Вот мы вот так выбрали. Альфа 1, а здесь а1. Вот и в выводе нет правила
[01:55:00.400 --> 01:55:12.520]  бета в апсилон. Для чего нужно, чтобы не было такого правила, чтобы мы вот EFF капицаль. Вот,
[01:55:12.520 --> 01:55:20.320]  почему это можно достичь? Давайте посмотрим, почему это можно достичь. Ну да, если бы это правило
[01:55:20.320 --> 01:55:26.440]  применялось последним, то есть, если до этот класс в последний терминал, то значит, длина была
[01:55:26.440 --> 01:55:30.960]  такая же. Ну, у нас апсилон, значит, длина не увеличилась. Значит, эта строчка не первая, на которой
[01:55:30.960 --> 01:55:35.120]  длина стала больше. А мы взяли первую строчку, где длина стала больше. То есть, последнее правило
[01:55:35.120 --> 01:55:40.480]  не открывать интервал пустым словом. Ну, а дальше, оказывается, мы уже все построили до конца.
[01:55:40.480 --> 01:55:53.120]  То есть, надо это как-то произносить. Ну, таким образом, уровну first от Y. Не просто first от Y,
[01:55:53.120 --> 01:56:02.400]  а еще EFF от Y, потому что тут явно написано, что не терминал не пустой. Вот, и получаем ситуацию вот
[01:56:02.400 --> 01:56:07.760]  такую. Как раз-таки эта ситуация из вывода, на котором последнее правило, это то правило,
[01:56:07.760 --> 01:56:20.880]  на котором первая раз длина стала больше. Да. Мы взяли такое правило, что тут длинный, до него
[01:56:20.880 --> 01:56:27.040]  был короткий. Если не терминал открывался пустым, длина до него была такая же. Потому что пустое
[01:56:27.040 --> 01:56:32.200]  слово имеет нулевую длину. Значит, это не первая такая ситуация. А значит, если первая такая ситуация,
[01:56:32.200 --> 01:56:38.560]  то тут не терминал не открывается пустым. Означает, что first на EFF можно поменять. Этот вывод
[01:56:38.560 --> 01:56:45.840]  генерирует нам вот такую ситуацию. Но вот этот вывод генерирует вот такую ситуацию. И уровну EFF от
[01:56:45.840 --> 01:56:52.920]  beta2v, потому что мы явно нашли не терминал B, и явно сказали, что не пустой. В достаточном условии.
[01:56:52.920 --> 01:57:05.040]  Да. Тут. Вот. Это. Ну, нам нужно получить, что альфа-1 не больше, чем альфа-гамма тут. Это,
[01:57:05.040 --> 01:57:13.840]  это нужно здесь, чтобы сказать, что альфа-1 с этим кусочком проведет нам префикс. Вот он. Вот эта
[01:57:13.840 --> 01:57:21.840]  вот вещь не больше, чем вот это. Означает, что вот эта штука не пустая. Вот. Ну, или, возможно, пустая,
[01:57:21.840 --> 01:57:28.640]  но означает, что это правило, оно вот тут заканчивается. То есть, если beta1 пусто, то точка находится тут.
[01:57:28.640 --> 01:57:37.040]  Это часть ситуации, что альфа равно альфа-1 просто. И beta пуст. Вот эти вещи равны, и там равенство.
[01:57:37.040 --> 01:57:43.000]  Если тут не равенство, то beta не пуст, и beta1 тоже не пуст. Да, точка тут. Но нам нужно гарантировать,
[01:57:43.000 --> 01:57:52.360]  что здесь правило хоть сколько-то прочитается. Надеюсь, понятно. Да нет? Так. Ну, нам нужно, чтобы это правило было
[01:57:52.360 --> 01:57:59.680]  последним. Вот. Для того, чтобы оно было последним, нужно гарантировать, что альфа короче, чем здесь префикс.
[01:57:59.680 --> 01:58:05.200]  Вот. Ну, не длиннее. Если альфа длиннее, чем тут префикс, это правило длиннее, значит, нам нужно
[01:58:05.200 --> 01:58:10.760]  назвать не такую ситуацию, а какую-то ситуацию до нее. Вот. А мы хотим эту ситуацию явно описать.
[01:58:10.760 --> 01:58:18.280]  Поэтому говорим, что альфа-1 короткий, значит, beta-1 либо пустой, либо еще какой-то. Но если он длинный, то beta
[01:58:18.280 --> 01:58:23.800]  никак нельзя взять. Надо брать правила по range. Вот. Значит, здесь можно поставить вот такую ситуацию.
[01:58:23.800 --> 01:58:29.600]  В силу того, что терминал открывается непустым словом, здесь пишем EFF. Получается здесь ситуация,
[01:58:29.600 --> 01:58:34.160]  которая подсчитывает там противоречащие правила. Часть агроматика не ЛРК. Пример точно построится.
[01:58:34.160 --> 01:58:40.240]  На самом деле, вот это для алгоритма особо не нужна эта часть. Вот это позволяет что гарантировать.
[01:58:40.240 --> 01:58:45.680]  Если поставить таблицу, там есть противоречие, то грамматика точно не ЛРК. Вот. А необходимость
[01:58:45.680 --> 01:58:50.880]  гарантирует, что если вы взяли ЛРК-грамматику, как-нибудь вы проверили, поставили таблицу, там все будет
[01:58:50.880 --> 01:58:58.480]  хорошо. Это алгоритм. Ну, а это сказать заказчику, что он идиот. Вот. Вот вам таблица, там есть противоречие,
[01:58:58.480 --> 01:59:06.160]  ваша грамматика неправильная, извините. Это была тирема 5.9. Значит, пункт 3 я распишу, пришлю в чат,
[01:59:06.160 --> 01:59:15.640]  даже до экзамена. Вот. Это я готов пообещать. Так, ну и сейчас надо объяснить, как построить В. Это
[01:59:15.640 --> 01:59:28.440]  совсем просто. Ну, да, уже объясняли. Значит, строим ВКЖ, это все. Ну, как его строим? Берем правила,
[01:59:28.440 --> 01:59:37.400]  которые точно в выводе есть. Начинаем его пополнять, пока пополняется. Ну, замыкать. Смотрим, какие правила
[01:59:37.400 --> 01:59:43.240]  вводятся. Замыкаем, замыкаем, замыкаем. Дальше нужно получить для остальных префиксов. Ну, как мы делали
[01:59:43.240 --> 01:59:49.080]  взграмматику Артема? Брали, где ставят цитала точка перед А, переносили ее. При переносе говорим, что
[01:59:49.080 --> 01:59:57.920]  тут GoTo. Это лемма, доказанная с лекцией, то GoTo от В. Кажется, Павел на нее подавал всю лекцию,
[01:59:57.920 --> 02:00:07.160]  поэтому я точно сейчас доказывать не собираюсь. Вот, ну, как мы его определяли тут по x2, то это ВКЖ от
[02:00:07.160 --> 02:00:22.280]  гамма х. Как его построить? Это замыкание, может, таких ситуаций. Альфа точка х бета. Слово. Вот, вот так
[02:00:22.280 --> 02:00:32.120]  вот для ситуации вида альфа точка х бета. То есть, смотрите, как это сделать? Мы берем все ситуации,
[02:00:32.120 --> 02:00:37.920]  где из 3 точки предыдущим, тащим точку туда, а потом что-то замыкаем. Утверждается, что это будут все допустимые
[02:00:37.920 --> 02:00:43.240]  ситуации, только они. Это доказывается забодривительно в разном случае с выводом, но никогда это не детство.
[02:00:43.240 --> 02:00:48.320]  Это было в лекции. Вот, вот такой алгоритм. Или теорема, кажется, теорема 5-10.
[02:00:48.320 --> 02:00:56.920]  Можете посмотреть доказательства. Возможно, я когда-нибудь еще разобренирую аудиторию,
[02:00:56.920 --> 02:01:03.160]  еще проеду такой сценарий, теорема 5-10 докажу. Да, да, да, ну, будем разбираться. Так, ну,
[02:01:03.160 --> 02:01:07.480]  в общем-то говоря, это дается просто, вы смотрите просто в векторе все ваши правила,
[02:01:07.480 --> 02:01:17.360]  потаскать эти точки и это замыкать. Ну, как замыкать? Смотрим все правила и пишем их, где у нас после запятого будет
[02:01:17.360 --> 02:01:25.160]  стать first от вот этого. Построили vk от epsilon. Дальше где-то перетащились, еще и перетащились.
[02:01:25.160 --> 02:01:34.600]  Это у нас будет vk g от x. Теперь в чем проблема? У нас строки и префиксов бывает много, а в них, конечно,
[02:01:35.360 --> 02:01:39.480]  может со состояний. Но утверждается, что в какой-то момент вы начнете пересекаться. То есть,
[02:01:39.480 --> 02:01:43.560]  не пересекаться, а совпадать. То есть, у вас будут префиксы длинные и короткие. То есть,
[02:01:43.560 --> 02:01:56.200]  сами не знаю. x1, x2, xm. У него будет vk g совпадать с x и x и плюс 1 xm. То есть, оказывается,
[02:01:56.200 --> 02:02:00.100]  что для префекса вот этот кусок важен, этот кусок не важен. Но это просто я вам буду
[02:02:00.100 --> 02:02:05.580]  предупредить. То есть, вы тащитесь сквозь точку, пока появятся новые ситуации. Это bfs. То есть,
[02:02:05.580 --> 02:02:11.140]  старта состояния и поехали, поехали, поехали. Протащили точку, замкнули. Протащили точку,
[02:02:11.140 --> 02:02:14.780]  замкнули. И когда вы увидели, что, если у вас такое состояние уже было, вы в очереди кладете.
[02:02:14.780 --> 02:02:19.660]  Когда вы увидели, что у вас очередь пустая, вы посмотрели все состояние. Go to мы сделали под
[02:02:19.660 --> 02:02:25.540]  дороги. Как мы получали следующее состояние, как бы в обходе? Ну, go to делали. А все что go to у нас уже
[02:02:25.620 --> 02:02:32.020]  построено. Go to это функция g. Функция перехода по автомату или функции перехода по
[02:02:32.020 --> 02:02:38.980]  альтер таблицам. А функция действия мы тут и устроили до этого. Смотрим состояние, смотрим,
[02:02:38.980 --> 02:02:44.780]  если стоит точка в конце, делаем reduce. Стоит точка где-то в середине, и тут не пустое, а простое,
[02:02:44.780 --> 02:02:52.940]  делаем shift. Вот. Корректность полнота здесь доказана. На мне еще третий пункт. Засем все.
[02:02:52.940 --> 02:03:00.260]  Если есть вопросы, задавайте. Полнота, если вы видите нелеграмматику, то при
[02:03:00.260 --> 02:03:05.340]  построении нелерка от таблицы непременно получится противоречие. То есть в какой-то
[02:03:05.340 --> 02:03:09.820]  момент у вас будет префикс и два стандарта, которые дадут проблемы. Для таблицы, это означает,
[02:03:09.820 --> 02:03:19.820]  что у вас будет ячейка в таблице, в которой будут два разных действия. Вот. Давайте.
[02:03:22.940 --> 02:03:36.500]  Да. Нет, вы нашли все в ВКЖ, и уже GoTo пункт уже делает. Это она есть. Да. Как яйт функцию f?
[02:03:36.500 --> 02:03:57.060]  Reduce при условии, что вот это ваш аргумент. Да. А shift? Если бы это не пустое, и то, что будет,
[02:03:57.060 --> 02:04:02.420]  тоже не пустое. Смотрите, вы пока строите алгоритм, вы тут идете по префиксам, по дороге
[02:04:02.420 --> 02:04:10.740]  можно строить First и EFF. Я считаю, что те, кто прошли курс алгоритмов, понимают, как
[02:04:10.740 --> 02:04:18.020]  построить First и EFF, и я по грамматике, по символю. Ну, тогда вы просто знаете EFF здесь. Вы
[02:04:18.020 --> 02:04:25.420]  понимаете, если у вас V, лежит здесь. А это какой-то set слов. Вот. Ну, First нужно проверять, что у вас
[02:04:25.420 --> 02:04:39.500]  тут не терминал, который не открылся пустым словом, и все. Вот. Пока добавляется, не ситуация,
[02:04:39.500 --> 02:04:44.700]  пока добавляется новая множество ситуаций. Вы поставили старт в множество ситуаций, из него
[02:04:44.700 --> 02:04:49.500]  получили новую множество ситуаций. Пока эти множество ситуаций поменяются как-то, главное,
[02:04:49.500 --> 02:04:56.740]  помните, что это не вся ситуация. Ситуация поделится правилом с точкой и словом. Потому
[02:04:56.740 --> 02:05:01.740]  что мне вот некоторые студенты сслают неправильные множество ситуаций, где тут доллар, а тут а.
[02:05:01.740 --> 02:05:06.300]  А это одна та же ситуация. Нет, не одна та же. Тут доллар, а тут а. Если у вас одна та же ситуация, то у вас
[02:05:06.300 --> 02:05:14.700]  лер 0, простите, а не лер 1. Пока ваше множество окажей меняется. Поставили в очередь вот это.
[02:05:14.700 --> 02:05:20.660]  Достали из очереди черную ситуацию, протащили все точки, позамыкали. Если это не было обработано там,
[02:05:20.660 --> 02:05:26.220]  не знаю, не стоит в флаг, что это было обработано, в очередцу. Достали из очереди, добавили в очередь
[02:05:26.220 --> 02:05:30.660]  новые. Дальше надеетесь на судьбу в том, что когда-нибудь это все прекратится. Почему это прекратится?
[02:05:30.660 --> 02:05:39.300]  Ну, если то, что у вас алгоритм это лерка, это будет заканчиваться. Это терема 5 в 8, кажется. Вот.
[02:05:39.300 --> 02:05:56.540]  Что-то протосконечен. Такие вещи. Делайте до сходимости, по дороге строите go to, а потом
[02:05:56.540 --> 02:06:02.620]  проходите по всем вкж и строите f. Ну f вы сами сказали, как строить, вот так и строить. Вот.
[02:06:02.620 --> 02:06:07.340]  Ну как на практике проверяешь, что грамматика лерка? Если построили таблицу, там есть противоречие.
[02:06:07.340 --> 02:06:13.540]  Берем терему 5-10 в обратную сторону, говорим, что грамматика не лерка. Если противоречия нет,
[02:06:13.540 --> 02:06:18.660]  берем в прямую сторону, говорим, что грамматика лерка, таблица корректна, по ней парсим. Ну как
[02:06:18.660 --> 02:06:29.620]  парсим, в начале снарапс удалось. Так, еще вопросы? У вас? У вас? Ну отлично. У вас? Третий пункт
[02:06:29.620 --> 02:06:55.700]  точно докажу. Тут особо деваться некуда. Да? Ну смотрите, нам нужно, например, грамматики,
[02:06:55.700 --> 02:07:04.100]  чтобы по прессу правила поделялось. Вот. Тогда получается, что тут это один шаг, это не один шаг.
[02:07:04.100 --> 02:07:12.580]  Тогда, раз они совпали, вот. Здесь могли быть ситуации, когда они терминалы не терминалы раскрывают.
[02:07:12.580 --> 02:07:21.620]  Например, ситуация, когда у вас там b в c, c в d, d в e, вот. И тогда x он пополнится. И мы не знаем,
[02:07:21.620 --> 02:07:30.260]  что он не пополнится. Поэтому αay, вот, равно γbx. То есть это не полная строка. Для того, чтобы она
[02:07:30.260 --> 02:07:37.700]  была полной, мы можем сказать, что мы возьмем и прицепим сюда, потом это откроем, получим вот это.
[02:07:37.700 --> 02:07:46.340]  Есть омика какой-то. Вот. И поэтому, если мы взяли α до х, то мы не прочитаем буквы, которые из b
[02:07:46.420 --> 02:07:56.020]  выходили. Вы понимаете, что здесь β в b находится не в конце, а в середине. Здесь это было написано. Вот.
[02:07:56.020 --> 02:08:03.740]  И поэтому х еще пополнится чем-нибудь справа, слева. Вот сюда. Для того, чтобы это не произошло,
[02:08:03.740 --> 02:08:08.180]  нужно потребовать, что если мы прицепим это сюда и приложим вывод отсюда, то слово не укорочится.
[02:08:08.180 --> 02:08:14.420]  Ну а здесь это написано. Просто не терминал в терминалах грамматики. Вот. То есть получается,
[02:08:14.420 --> 02:08:20.660]  что у вас префиксы такие же. Последнее правило такое же. Открывается такая же самая буква. Вот.
[02:08:20.660 --> 02:08:34.820]  Здесь почему разные вещи? С точностью до того? Сейчас. Альфа, бета, у. Да, это могут быть разные
[02:08:34.820 --> 02:08:41.340]  слова. Вот в чем прикол. То есть противоречие, если оно возникает даже при том, что слова разные,
[02:08:42.340 --> 02:08:46.460]  алгоритм не знает, он находится тут или тут. Тут могло быть длинное слово, тут могло быть короткое
[02:08:46.460 --> 02:08:52.980]  слово. Вот. Если бы мы говорили, что одно и то же слово разбирается, то тогда да. Здесь можно
[02:08:52.980 --> 02:08:58.140]  вот эти вещи приравнять. Но это значит, что противоречие гипотетически возможно. Вы при чтении
[02:08:58.140 --> 02:09:02.140]  не отличите, что длинное слово выводите или короткое слово выводите. И ровно потому, что в
[02:09:02.140 --> 02:09:07.420]  определении у нас слова бывают разными, вот там вот здесь вот и мучились. То есть что надо
[02:09:07.420 --> 02:09:14.340]  осознать, я это понял далеко не сразу, что это выводы разных слов. Поэтому, мало ли, как тут
[02:09:14.340 --> 02:09:19.140]  альфа, бета раскроется еще как-нибудь дальше. Но при этом это слово оно откатится сюда, это
[02:09:19.140 --> 02:09:23.740]  слово откатится сюда. И при парсинге обоих этих слов, если что-то с ним размножился, кто-то там
[02:09:23.740 --> 02:09:29.900]  ждет, чтобы я отпустил. При парсинге этих слов эти ситуации возникнут, и они однозначно разберутся.
[02:09:29.900 --> 02:09:35.860]  Вот. Ну, это определение его построил человек, который точно знал, что из этого может что-то
[02:09:35.860 --> 02:09:42.860]  доказать. Поэтому, как его придумали, я тут не скажу. Ну, его изобрели для того, чтобы оно работало,
[02:09:42.860 --> 02:09:49.740]  оно максимально емкое. Вот. И как мы тут видели, в первых трех случаях, мы увидели бы, если бы доклад
[02:09:49.740 --> 02:09:56.220]  третий случай нормальный, это немножко развалился, что тут каждая буква верна на своем месте. Так,
[02:09:56.220 --> 02:10:04.420]  еще вопросы? Нету. Ну, тогда всем спасибо. Ну, скажу, эта теория достаточно, чтобы написать, чтобы доказать,
[02:10:04.420 --> 02:10:09.700]  нужно еще что-то послушать, что-то посмотреть. Вот. Я утверждаю, что LR, вот пока вы его не сделаете
[02:10:09.700 --> 02:10:14.820]  там руками, ногами, никак. Я его писал год назад, у меня уже память пропала. Если что, все свободны.
[02:10:14.820 --> 02:10:16.700]  Так. Небольшие диалоги.
