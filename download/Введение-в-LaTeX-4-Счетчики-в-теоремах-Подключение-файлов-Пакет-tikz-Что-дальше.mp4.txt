[00:00.000 --> 00:12.060]  Итак, мы начинаем последнее занятие курса по техо, и за сегодня хочется закрыть все открытые
[00:12.060 --> 00:18.000]  вопросы, которые возникали на прошлых занятиях. Все дело до обсудить. В моей части программы
[00:18.000 --> 00:25.120]  на сегодня завершение истории про счетчики и как использовать для нумерации сложных объектов,
[00:25.120 --> 00:31.480]  например, теориям. Работа с большими проектами в техе, а именно подключение всяких сторонних
[00:31.480 --> 00:37.080]  файлов, и немножко про графику в виде пакета тикс CD, после которого я передам слово Лешу.
[00:37.080 --> 00:44.000]  Сначала счетчики. Тут стоит рассказать про две техники, которые упоминались в прошлый раз.
[00:44.000 --> 00:52.040]  Во-первых, необязательно аргумент некоторого счетчика после команды Ethereum, который,
[00:52.040 --> 00:59.240]  как уже в прошлый раз говорилось, говорит, что данная теорема ведет нумерацию на один
[00:59.240 --> 01:05.720]  уровень глубже, чем тот счетчик, который поднадеет аргумент. То есть, если у нас есть первый
[01:05.720 --> 01:12.080]  уровень глубинный счетчик секций, просто 1.2.3.4, если указываем в качестве аргумента его для этой
[01:12.080 --> 01:19.320]  теоремы, то теорема будет нумероваться в виде 1.1, 1.2 и так далее, где первое число это номер
[01:19.320 --> 01:27.720]  текущей секции. Ну и вот есть пример кода. Мы говорим, что теорема нумеруются за пунктом
[01:27.720 --> 01:34.800]  секции, а следствие нумеруются за теоремами. И вот такой вот код, который приведен ниже,
[01:34.800 --> 01:38.600]  дает такой результат. Можно снова посмотреть на него.
[01:38.600 --> 01:42.200]  Можно вопрос? Хотя, я понял, все это пологло с кей.
[01:42.200 --> 01:47.880]  Ну, на всякий случай, я построчно прибегу в счет, произошло. Вот первые две теоремы,
[01:47.880 --> 01:53.320]  которые объявлены. Ну, они просто нумеруются как теорема 1.1, теорема 1.2, потому что в часть
[01:53.320 --> 02:00.000]  первого раздела они идут. Далее идет следствие, которое идет за второй теоремой, и поэтому следует
[02:00.000 --> 02:05.200]  счетчик от нее и ставит после этого свое число. Ну и да, если бы была еще одна теорема,
[02:05.200 --> 02:10.320]  потом еще наследствие. Еще наследствие, значит, надо было уже с теоремы 1.3. Вся нумерация
[02:10.320 --> 02:16.160]  обнулилась. И вторая вещь, которая в прошлый раз не была подробно сказана, но которая тоже
[02:16.160 --> 02:23.320]  бывает очень полезной, это аргумент, который можно передавать сразу после названия теоремы,
[02:23.320 --> 02:31.480]  которая на скобках. Это тоже может быть предзвольный счетчик, но эффект будет другим. Это будет означать,
[02:31.720 --> 02:37.320]  что данная теорема прям использует этот счетчик для своей нумерации, и соответственно,
[02:37.320 --> 02:42.800]  каждая новая теорема инкриментирует этот счетчик. Например, вот мы создали прям сами счетчик
[02:42.800 --> 02:50.120]  myCount и сделали две теоремы, вернее, утверждение и лему, два типа теорем, которые на счетчик
[02:50.120 --> 02:55.480]  опираются. И вот я утверждаю, что они будут вместе, вернее, каждая по очереди счетчик
[02:55.480 --> 03:01.520]  инкриментировать, если будем их использовать. Пример коры вот такой. Мы используем одно утверждение,
[03:01.520 --> 03:06.400]  потом одно лему, потом еще одно утверждение. Потом мы сами руками продвигаем счетчик еще на один и
[03:06.400 --> 03:15.120]  пишем еще одну лему. Получается вот такой результат. Как и ожидалось, эти два типа теорем используют
[03:15.120 --> 03:19.760]  один и тот же счетчик, поэтому их нумерация не просто согласована, а прям одна и та же нумерация.
[03:19.760 --> 03:25.960]  И первые три объекта нумируются как раз-два-три, потому что они идут подряд, с счетчиком больше
[03:25.960 --> 03:31.480]  ничего не происходит. Просто каждая новая появляющаяся теорема инкриментирует. А далее
[03:31.480 --> 03:36.560]  мы намеренно меняем счетчик еще на плюс один. И поэтому тот объект, который будет стертом,
[03:36.560 --> 03:42.880]  получает номер пять. Вот. Это бывает полезно, когда действительно в документе много похожих
[03:42.880 --> 03:48.440]  сущностей, которым уместно иметь одну и ту же нумерацию, как, например, утверждение и лемма,
[03:48.440 --> 03:57.280]  но возможно кому-то может потребоваться такая фича, что этот счетчик он вообще-то управляемый,
[03:57.280 --> 04:02.880]  и можно менять его даже между этими утверждениями. Ну и вот раз зашла речь про какие-то сложные файлы,
[04:02.880 --> 04:07.320]  в которых требуется какие-то сложные вещи с счетчиком производить, стоит наконец поговорить о
[04:07.320 --> 04:12.680]  том, как организовать большие проекты, а именно как подключать много файлов с кодом в один файл и
[04:12.680 --> 04:19.360]  компилировать его. Есть этого два инструмента, input и include. Мы говорим про input в первую очередь,
[04:19.360 --> 04:26.560]  а потом сравним вот с вторым инструментом. Вот. Как делается постановка кода в техе? Пишется
[04:26.560 --> 04:32.880]  команда input и ее аргумент, название этого файла, код которого хочется подставить прямо в данное
[04:32.880 --> 04:37.840]  место. На стадии компиляции этот код будет подставлен вместо команды input и будет
[04:37.840 --> 04:43.280]  компилироваться как единый документ, с которого эта компиляция запустилась. Что примечательно,
[04:43.280 --> 04:48.400]  ну можно указывать не просто файлы лежащие рядом с текущим файлом в качестве их названий,
[04:48.400 --> 04:52.960]  а можно искать файлы где-то по файловой иерархии, используя привычные команды там
[04:52.960 --> 05:00.880]  ., ., slash, и при этом область видимости, текущая местная иерархия, в которой мы находимся,
[05:00.880 --> 05:07.120]  это место, где лежит компилируемый файл. Вот мы ищем из него все остальные файлы. Даже если
[05:07.280 --> 05:14.440]  те input, которые используются, они какие-то вложенные один в другом, то есть мы подключаем с помощью
[05:14.440 --> 05:19.920]  input один файл, а внутри него допускаем еще один input, и вот он будет как-то искать файлы. Вот
[05:19.920 --> 05:23.680]  надо помнить, что все равно область видимости у него будет из корневого файла, который компилируется.
[05:23.680 --> 05:32.400]  Не относительно. Ну и да, как было сказано, инструментов два, у input есть альтернатива include,
[05:32.400 --> 05:38.960]  но работа несколько по-разному. Вот я привожу сравнение каких-то главных отличий между ними,
[05:38.960 --> 05:46.040]  но самое счастное, наверное, в том, что input предполагает, что он будет использоваться для
[05:46.040 --> 05:51.240]  включения всяких цельных кусков кода, которые хранят себе целые главы, может быть, какого-то
[05:51.240 --> 05:58.080]  произведения. Поэтому он много производит работы по подчистке страницы, каких-то еще добытных
[05:58.080 --> 06:04.840]  манипуляций, и начиная текст с новой страницы, с чистого стиля, и это не всегда бывает полезно.
[06:04.840 --> 06:10.000]  Более того, это лишнюю серия для компилятора, поэтому лично я так никогда не делаю. Мне кажется
[06:10.000 --> 06:15.480]  более разумным в такой ситуации делать совмещение команд new page, которая просто делает новую
[06:15.480 --> 06:22.280]  страницу, и команда input, которая была ниже, выше. Ну input просто подставляет текст, больше ничего
[06:22.280 --> 06:29.480]  не делает. Следующая тонкость, input бывает вложенным, то есть можно подключить один файл в main,
[06:29.480 --> 06:34.040]  потом от этого файла еще один файл. С include так не сработает, как раз из-за тех манипуляций,
[06:34.040 --> 06:37.880]  которые он производит. Это тоже некоторая опасность, которая может себе много выстрелить.
[06:37.880 --> 06:44.320]  Но у него есть такая фича, что если потребуется в целях, скажем, отладки компилировать не все
[06:44.320 --> 06:49.880]  подключаемые файлы, то в преамбулу можно просто добавить вот такую вот команду include only и все
[06:49.880 --> 06:56.840]  имена, которые будут компилироваться при подключении. Все остальные будут игнорироваться. Это полезно,
[06:56.840 --> 07:01.360]  если вам не хочется, скажем, по большому файлу идти и отслеживать, какие мы файлы вообще подключали,
[07:01.360 --> 07:07.160]  и комментировать отдельно каждую строку. В случае с input-ом tp-фичи нет, но мне кажется,
[07:07.160 --> 07:11.120]  это не очень большая потеря, потому что файл main, повторюсь, как правило, выглядит очень компактно,
[07:11.120 --> 07:16.920]  и в нем легко оследить, какие файлы компилируются, какие нет. И если вам это нелегко, то скорее всего
[07:16.920 --> 07:21.360]  у вас архитектура проекта не очень удобная, и стоит ее поменять в первую очередь, а не переходить
[07:21.360 --> 07:30.920]  на include. Еще раз напоминание о том, как происходит поиск имен. В этой технологии всегда, даже из
[07:30.920 --> 07:38.000]  сложенных файлов, весь поиск происходит из искорневого файла. И более того, это касается не
[07:38.000 --> 07:43.040]  только input-а и include-а, это также касается команды include-graphics, которые уже были,
[07:43.040 --> 07:50.000]  которые получают изображение, и тех команд, которые будут дальше. Бывает полезно в тех интегрировать
[07:50.000 --> 07:57.440]  какую-то еще pdf-ку, ставить несколько страниц другого pdf, а потом продолжить свой. Это делается,
[07:57.440 --> 08:03.560]  в частности, пакетом PDF-pages, наверняка есть альтернатива, но вот есть такой пакет,
[08:03.560 --> 08:10.840]  который очень простой indexes. В нужном месте нам просто требуется сделать include-pdf и далее указать
[08:10.840 --> 08:15.080]  какие-то нужные нам аргументы того, как это будет подключаться, например, номера страниц,
[08:15.080 --> 08:21.440]  которые потребуется подключить. Причем, опять же, вариантов как это указать много. Можно указать
[08:21.440 --> 08:25.680]  отдельные страницы, можно интервалы. Ну и у этого пакета, как у всех остальных, есть удобная
[08:25.680 --> 08:30.240]  документация, ее можно посчитать, посмотреть все остальные параметры, вплоть до того, что
[08:30.240 --> 08:36.320]  пылучки подключаемых страниц можно подключать не в прямом порядке, а в таком, который требуется для
[08:36.320 --> 08:43.120]  печати буклетов. Ну, то есть, книжечек формата A4, припечатен на всех сторонах файла. Он сам это
[08:43.120 --> 08:48.720]  посчитает и правильно разместит. Но это все гуглится. А синтезис первоочередный, он вот такой.
[08:48.720 --> 08:57.080]  И последняя история, которая будет рассказана мной, это про то, как делать техи-графику,
[08:57.080 --> 09:03.440]  ну и в частности коммутативные диаграммы. Вообще, пакет TIX, он очень большой, мы про него будем
[09:03.440 --> 09:09.840]  сегодня подробно говорить, но уже не я, а Леш. Но вот есть такая у него особая технология, ну и
[09:09.840 --> 09:14.720]  вообще их несколько. Есть разные пакеты поменьше, которые решат какие-то конкретные графические задачи.
[09:14.720 --> 09:20.440]  И вот есть такой пакет TIX-SD, который делает коммутативные диаграммы. Это вещи из алгебры,
[09:20.440 --> 09:24.920]  с которой вы, наверное, отсталкивались. И, ну, поскольку я часто пишу, что по алгебре, мне он
[09:24.920 --> 09:30.560]  постоянно пригождается. Но, опять же, из его специфики я приведу только конкретный пример
[09:30.560 --> 09:38.320]  использования. И на его примере я просто разберу, ну, каков синтез происходящего. TIX-SD позволяет нам
[09:38.320 --> 09:44.960]  использовать такое имяное окружение TIX-SD, внутри которого будет такой особый синтаксис, который
[09:44.960 --> 09:49.680]  поддерживается только внутри этого окружения, который будет отрисовываться в диаграмму. Вот,
[09:49.680 --> 09:55.160]  я предлагаю прям посмотреть на то, что получится в итоге. Вот такая картинка. И постараюсь
[09:55.160 --> 10:02.240]  анализировать код, смотреть, что он делает. Значит, первоочередно, TIX-SD устроен как некое
[10:02.240 --> 10:09.920]  многострочное окружение, как таблицы, как элайны. Мы можем указать параметр, скажем, насколько будет
[10:09.920 --> 10:16.360]  большими отдевители строк или столбцов в качестве аргументов ROGSEP или COLUMNSEP. Это будет влиять на
[10:16.360 --> 10:20.800]  то, насколько друг от друга далеко стоят ячейки этой диаграммы. Ну, вот теперь с самой ячейки,
[10:20.800 --> 10:26.640]  что это такое. Как в таблице, у нас есть некоторое количество строк, в каждой из которых одно и то же
[10:26.640 --> 10:30.880]  фиксированное количество ячейок. Здесь мы не указываем его заранее, но мы выбираем с собой,
[10:30.880 --> 10:35.800]  чтобы это число было согласованными, чтобы было одинаково на каждый строк. Здесь строк всего две,
[10:35.800 --> 10:42.160]  поэтому на каждый строк у меня по три ячейки. Причем три ячейки я делаю заполненными текстом,
[10:42.160 --> 10:46.880]  а три пустыми. Ну, для того, чтобы мне было вообще реально организовать такую диаграмму,
[10:46.880 --> 10:52.480]  то есть строки будут все по-тиагонали. У меня есть три ячейки сверху, три ячейки снизу.
[10:52.480 --> 10:59.680]  В каждой ячейке можно написать некий текст, который будет в ней адресован, и эти ячейки
[10:59.680 --> 11:03.920]  можно соединить между собой стрелочками. Синдоксистибичная стрелочка имеет вот такой вид.
[11:03.920 --> 11:11.280]  Это arrow и два параметра аргументов. Иногда даже три. Аргумент в скопках квадратных,
[11:11.280 --> 11:16.880]  это аргумент необязательный, он подключает некий модификатор стилей для стрелочки. Например,
[11:16.880 --> 11:24.280]  если я пишу здесь dash right arrow, то это будет стрелка, адресованная пунктиром. Если я пишу swap,
[11:24.280 --> 11:32.600]  это будет стрелка, ну в общем, подпись к ней текстовая будет размещена не в привычном для
[11:32.600 --> 11:38.480]  нее месте, вот здесь, а в противоположном, вот здесь. Swap просто меняет позицию текста в
[11:39.040 --> 11:44.960]  зеркальте относительно стрелки. Далее обязательный аргумент, в котором придается направление стрелки.
[11:44.960 --> 11:54.800]  Причем в виде такого вот сокращения из буквок, где RL это right left, а DU это down up. Это может быть
[11:54.800 --> 12:00.440]  любого вида комбинации, скажем, три буквы R и четыре буквы U будут означать, что стрелочка
[12:00.440 --> 12:06.480]  ведет на три ячейки вправо и на четыре ячейки вверх. Но это, конечно, экзотика. В данном случае
[12:06.480 --> 12:11.600]  хватает вот такого. RL означает, что у нас остается стрелочка, которая ведет на две ячейки вправо,
[12:11.600 --> 12:19.440]  то есть не на одну и заканчивается здесь, а сразу на две, идет в третью. Две стрелочки тут отрисовываются
[12:19.440 --> 12:27.400]  как одна влево вниз, одна вправо вверх. Последний аргумент, это собственно текстовая подпись,
[12:27.400 --> 12:32.600]  которая будет размещена на стрелочке. По умолчанию она будет размещена сверху от нее,
[12:32.600 --> 12:38.280]  либо в том аналоге верха, который соответствует данному направлению стрелочки. Например,
[12:38.280 --> 12:42.840]  стрелочка идет вот так, то на нее, вверх, он вообще, говорят, здесь. То есть поворот на
[12:42.840 --> 12:48.600]  270 градусов относительно текущего положения. И если мы хотим, чтобы текст был на самом деле
[12:48.600 --> 12:52.960]  на настоящем верху, а не там, который предполагается, мы делаем команду swap,
[12:52.960 --> 12:58.760]  о которой я уже тоже упомянул. Вот. Базу синтезисов такой. На самом деле,
[12:58.760 --> 13:03.640]  то минимума хватает для того, чтобы рисовать диаграммы. Но, опять же, есть целая документация,
[13:03.640 --> 13:08.400]  о которой можно читать, разбираться и смотреть на другие возможности. Вот.
[13:08.400 --> 13:12.840]  Лично я на этом заканчиваю и хочу передать слово Леше. Надеюсь, ты уже здесь и готов.
[13:12.840 --> 13:24.520]  Да, я здесь и я готов. Да. Так. В общем, сегодня я расскажу вам про фикс. Ну, Даню уже начал.
[13:24.520 --> 13:33.360]  В общем, основная идея – это нам нужны рисуночки в техе, и мы хотим рисовать как-то векторами. Ну,
[13:33.360 --> 13:43.120]  в смысле, не кисточкой, не мышкой водить, а создавать такие рисунки, которые не трудно изменить
[13:43.120 --> 13:50.280]  и которые, в общем, дают команду. Вот. Ну, в общем, самые простые примеры – это просто линия или там
[13:50.280 --> 13:57.880]  вот точечка. Вот. Но мы сейчас подробно разберем, что это значит. Просто для демонстрации. В общем,
[13:57.880 --> 14:09.120]  основная идея, основной блок всех рисунков в тигзе – это путь. И путь состоит из точек и вот,
[14:09.120 --> 14:15.520]  в общем, двух диафисов, которые соединяют эти точки между собой. И получается вот такой нарисованный
[14:15.520 --> 14:29.840]  путь. Вот. Вот так он выглядит, если по нему пройтись. Да. Для того, чтобы рисовать в тигзе,
[14:29.840 --> 14:37.760]  нужно… можно либо использовать окружение – tixpicture, либо использовать команду tix,
[14:37.760 --> 14:43.560]  дальше какой-нибудь код, и все заканчивается точкой за пятой, или tix и в фигурных скобках.
[14:43.560 --> 14:51.000]  Набор команд. Вот. Ну, понятное вплощительное, самый способ – это писать окружением. Вот. Но
[14:51.000 --> 14:58.080]  иногда я буду в экономии писать просто тигз, чтобы не тратить вертикальную высоту слайда.
[14:58.080 --> 15:08.840]  Чтобы нарисовать ellipse, ну, например, круг, нужно просто нарисовать круг и его радиус.
[15:08.840 --> 15:17.920]  Чтобы нарисовать ellipse, нужно передать ему его полуосе. Чтобы нарисовать повернутый ellipse,
[15:17.920 --> 15:28.840]  достаточно просто сказать ему «повернись 30 градусов». Еще иногда бывает полезно рисовать
[15:28.840 --> 15:37.180]  сетку. Тоже такой просто пример. Чтобы нарисовать ее, мы говорим… ну, вообще для
[15:37.180 --> 15:42.040]  любого объекта, для круга тоже вначале можно сказать точку, к которой мы рисуем. То есть,
[15:42.040 --> 15:47.920]  если ничего не указывать, то он будет рисовать… то он как-то сам ее выберет. Вот. Но так можно
[15:47.920 --> 15:53.800]  явно указать, где рисовать, и это все может быть частью пути. Вот. Для того, чтобы нарисовать
[15:53.800 --> 15:59.200]  сетку нужно также в параметрах, помните, как бы параметр повернуть, также в параметрах
[15:59.200 --> 16:11.560]  передать шаг по стороне xtepp или xtt. Вот ну или просто xtans. Давайте proposed все, что ты нарисовал.
[16:11.560 --> 16:17.120]  Ну все, что ты тут сказал. Нарисуем круглый круг, ecological ellipse, еще один ellipse и сетку такую.
[16:17.120 --> 16:28.400]  но это все выглядит уже как-то слишком сумбурно и неприятно, поэтому давайте я скажу, что сетка
[16:28.400 --> 16:36.920]  у нас будет серенькой и тоненькой, серенькой и очень тонкой, ну и в принципе ничего не изменит,
[16:36.920 --> 16:44.240]  вот теперь это выглядит приятнее, даже можно чем-то красиво назвать, то есть сетка выполняется
[16:44.240 --> 16:51.600]  скорее такой вспомогательный вид, как просто как фон, в общем эти все линии, их можно считать
[16:51.600 --> 16:58.120]  вспомогательными и чтобы сделать их вспомогательными, я сказал, что они должны быть серыми и тонкими,
[16:58.120 --> 17:03.040]  вот, но на самом деле тут не существенно то, что они серые и тонкие, а существенно то, что они
[17:03.040 --> 17:13.920]  вспомогательными, и чтобы не возникало, ну, чтобы логичнее, куда логичнее, куда правильнее с точки
[17:13.920 --> 17:19.440]  зрения общественного программирования, будет выделить это как в отдельную функцию что ли, в общем
[17:19.440 --> 17:27.720]  сделать такой define, в чем сделать свой стиль, сделать свой стиль, например стиль вспомогательной линии,
[17:27.720 --> 17:33.560]  ну, в синтакте у него вот такой, вот, может показаться немного странный, но в общем какой есть, вот,
[17:33.560 --> 17:38.800]  ну, это делается с командой TXS, то есть стиль можно применять конкретно к кому-то одному рисунку,
[17:38.800 --> 17:44.120]  вот, а можно и делать глобальным для всего вашего документа, вот, ну, в общем пример таких,
[17:44.120 --> 17:50.480]  пример такого использованного вспомогательной линии, очень частый, еще точка, но к ней мы чуть
[17:50.480 --> 17:57.360]  позже вернемся, в конце, я там большой пример разберу, так, теперь материал чуть с изветочкой,
[17:57.360 --> 18:11.200]  в общем, во-первых, можно передавать в параметр, то, что, вы смотрите, например, hell appliance,
[18:11.200 --> 18:19.680]  style, и вот здесь передал параметр, это как в командах, хештег 1, синтаксис,
[18:19.680 --> 18:25.360]  высказательный знак 50 для цвета означает, что, ну, потом расскажу, что это означает, в общем,
[18:25.360 --> 18:32.720]  этот синтакс относится именно к цвету, а вот хештег 1 относится к команде, которая придет,
[18:32.720 --> 18:40.000]  и дальше мы указываем дефолтное значение, ну, в дефолту пускай будет black, вот, а дальше мы можем
[18:40.000 --> 18:45.840]  сделать, то, что здесь писал hell appliance равно black, это можно было не писать, они бы, по умолчанию,
[18:45.840 --> 18:54.480]  были равно black, и можно делать второй стиль, вспомогательная сетка, где будем задавать,
[18:54.480 --> 19:01.600]  то есть как мы вот здесь сделали, мы сделали step и hell appliance, вот, а все это можно объединить
[19:01.600 --> 19:06.800]  в один аргумент hell grid и указывать после равен, ну, то есть hell grid равно 0,5 сантиметров,
[19:07.440 --> 19:12.600]  как здесь, то есть hell grid равно 0,5 сантиметров, это будет еще один аргумент, который, в общем,
[19:12.600 --> 19:18.120]  мы опять уменьшаем сущности, которые будут встречаться в новом рисунке, вот, делаем его более читаемым,
[19:18.120 --> 19:27.680]  вот, ну, опять-таки, если для самураев можно делать несколько параметров, вот, в общем,
[19:27.680 --> 19:35.920]  синтаксис можно на эти метры. Я уже говорил пару опций, помните, типа поворот или шаг, вот, но основные,
[19:35.920 --> 19:44.560]  конечно, это как бы опции пера, опции линий, и основная характеристика толщина, это ultra
[19:44.560 --> 19:52.480]  vary thin, thin, thin, thick, thick, ultra vary thick, вот, в общем, вот, понятно, такая градация, цвета,
[19:52.480 --> 19:57.920]  как можно назвать цвета, можно либо название, либо rgb, вот такой синтаксис, то есть можно сказать
[19:57.920 --> 20:05.520]  не rgb 250, а rgb 10, ну, то есть, вообще говоря, можно вот таким синтаксисом смешивать, в общем, раз в род
[20:05.520 --> 20:10.960]  цвета, не только rgb, там разные палитры, и не только из 255, это просто категорическое значение, ну, в общем,
[20:10.960 --> 20:18.120]  можно из другое какое-то значение дать, не знаю, из ста в процентах. Можно смешивать два цвета,
[20:18.120 --> 20:26.360]  такая запись означает то, что 10% красного и 90% синего, вот, и помните, я говорил о синтаксисе,
[20:27.360 --> 20:31.800]  в конце это означает прозрачность, то есть, сначала цвет, и в конце,
[20:35.880 --> 20:42.320]  да, в общем, сначала цвет, и в конце прозрачность, вот, и заполнение линии имеется в виду, в общем,
[20:42.320 --> 20:49.280]  dash, это пунктирует dot в точках, ну, loose или dense, типа, редко часто, вот, ну, вот, примеры,
[20:49.280 --> 20:57.880]  такие простенькие уже, уже выглядит приятно, в общем, fill, это для заливки используется, ну,
[20:57.880 --> 21:08.520]  то есть, можно просто color, это цвет линии, а если fill, это цвет заливки пути, в общем, вот, первый
[21:08.520 --> 21:13.920]  вариант, вот второй, тут немного надо пояснить, в общем, в пути я использовал cycle, это, значит,
[21:13.920 --> 21:20.800]  вернуться к первой точке пути, ну, и в общем, зациклить путь, чтобы не копить власти.
[21:20.800 --> 21:34.400]  В втором треугольнике, что я сделал, ну, вот, это сегмент окружности. Я начал с точки 2.0,
[21:34.400 --> 21:42.320]  дальше значок плюс означает то, что 10.2, сейчас объясню, что это значит, в общем, значок плюс
[21:42.320 --> 21:48.200]  означает то, что эта точка отсчитывается от предыдущей точки пути, то есть, не абсолютное значение
[21:48.200 --> 21:56.720]  координата относительно, да, дальше, 10.2 означает, в общем, эта координата точек в полярных координатах,
[21:56.720 --> 22:05.440]  то есть, 10 градусов, против числа стрелки, и два, две единицы длины, вот, дальше я сказал в этой
[22:05.440 --> 22:19.520]  точке разместить дугу, в общем, дугу вот с такими, ну, от нуля до 30 градусов с радиусом 2,
[22:19.520 --> 22:33.000]  вот, и, в общем, зациклил, вот, да, и залил все это синим, с 10 процентов яркости.
[22:33.000 --> 22:43.320]  Еще, в общем, еще такое, иногда будет полезно рисовать стрелки, хочется рисовать стрелки,
[22:43.320 --> 22:48.680]  ну, я не знаю, вектор скорости, например, и, ну, в общем, стандартный вот синтаксис для стрелки,
[22:48.680 --> 22:53.760]  это вот стрелочка, вот, но она выглядит не очень приятно, это та самая стрелка из тех,
[22:53.760 --> 22:59.400]  которые ту или не ту, в общем, вот эта обычная стрелка, которая с ним было стрелки, но куда
[22:59.400 --> 23:07.800]  более приятная стрелочка, это стилс, вот, выглядит, и чтобы все стрелки были такими,
[23:07.800 --> 23:17.400]  можно тоже в параметрах всей, всего, ну, или в параметрах конкретного, конкретной строчки,
[23:17.400 --> 23:20.600]  или в параметрах всего окружения, или можно в свой стиль это засунуть,
[23:20.600 --> 23:25.800]  которых мы обсуждали в стиле, в общем, чтобы все стрелочки были вот такого вида, это стилс,
[23:25.800 --> 23:33.600]  вот, ну, тут я еще показываю то, что дугу можно делать еще эллипса, то есть, помните,
[23:33.600 --> 23:37.680]  там, угол-угол-радиус, а тут, как бы, вот такой синтаксис, значит, там, два радиуса,
[23:37.680 --> 23:47.280]  ну, то есть, малая и большая площадь, ну, дугая эллипса. Стрелочки, может быть, две штуки,
[23:47.280 --> 23:55.440]  и еще, на самом деле, вот, вместо самой стрелочки можно писать название стрелочки, например, вот,
[23:55.440 --> 23:59.640]  вот такая стрелочка называется лотьях. То есть, вместо, здесь можно было писать лотьях,
[23:59.640 --> 24:11.160]  тогда все стрелочки были такими в этом рисунке. В общем, да, вот тут я еще указал такой параметр
[24:11.160 --> 24:19.680]  scale. Это тоже параметр, который применяется, ну, или к всему рисунку, или там, к конкретному,
[24:19.680 --> 24:24.520]  к какой-то строчке. Это, в общем, масштабирование, потому что масштабирование влияет только на
[24:24.520 --> 24:28.480]  координаты, то есть, там, буквы не изменяются, что такое, то есть, масштабируется координат,
[24:28.480 --> 24:33.320]  но подписи, которые вы будете делать, ну, обычные технические, они останутся таким же. Ну, да,
[24:33.320 --> 24:42.120]  соответственно, и с документами. И вот здесь еще после, я не написал, в общем, после названия
[24:42.120 --> 24:46.280]  стрелочки, или даже вот здесь вот, сразу после, можно написать в тоже квадратных скобочках size,
[24:46.280 --> 24:54.080]  равноту и размер. Если хотите уточнить размер, ну, обычно стандарты подходят. Так, теперь я
[24:54.080 --> 25:01.720]  немного про точки поговорим. Чтобы задать координату точки, существует синдоксис типа расположить,
[25:01.720 --> 25:08.560]  дальше вот эти названия точки в круговых скобках, и где расположить. Координат стоит в логичной
[25:08.560 --> 25:16.360]  синдоксе. И дальше вот, ой, я тут не исправил, короче, тут не прямая, а кружочка. В общем, там
[25:16.360 --> 25:26.800]  просто draw, a, и дальше вот здесь circle. Ну, там обычная кружочка. А сейчас, в общем, это было
[25:26.800 --> 25:32.440]  быстрое введение в самую основу тигза, а сейчас будут чуть-таки уже какие-то более содержательные
[25:32.440 --> 25:40.560]  примеры. Окей, в общем, первое, что зачем нужен тигз, это чтобы бы считать, ну, то есть, чтобы
[25:40.560 --> 25:46.120]  упрощать немного в числении себя. То есть, мы же там, когда хотим, например, может, мы хотим провести
[25:46.120 --> 25:52.720]  окружность через точку. То есть, конечно, можно посчитать радиус, но это выглядит кастрюля немного.
[25:52.720 --> 25:58.520]  Вот, поэтому синтаксис такой. В общем, вот мы располагаем две точки, и дальше, я потом объясню,
[25:58.520 --> 26:06.600]  что значит node, и дальше мы говорим то, что, в общем, такой синтаксис. Провести окружность через
[26:06.600 --> 26:17.360]  точку a, все это провести в точке b, вот, и нарисовать. Вот, node это, в общем, такая концепция тоже тигза,
[26:17.360 --> 26:24.600]  и, в общем, о ней как бы так быстро ничего полезно не сказать. В общем, просто в некоторых случаях я буду
[26:24.600 --> 26:32.680]  писать node, ну, в общем, таким синтаксисом. В общем, это концепция узлов, и как хорошо про нее рассказать
[26:32.680 --> 26:40.280]  быстро не получится. Вот, ну, в общем, она, как это можно просто смотреть и пользоваться. Вот, но потом
[26:40.280 --> 26:46.120]  я чуть побольше про нее расскажу как конец. В общем, глобально это мы просто говорим то, что у нас есть узел,
[26:46.120 --> 26:52.840]  расположен точке b. Если мы здесь что-то здесь напишем, фигурно в скобках, то это будет нарисовано в
[26:52.840 --> 26:57.520]  точке b. Ну, то есть, вот, напишем тут букву a, и прямо здесь вот появится буква a.
[27:02.520 --> 27:11.960]  Прям в той точке, где мы расположили узел. Вот, а теперь начинается, в общем, вся макия его. Ну,
[27:11.960 --> 27:21.120]  хорошо, в общем, я там, вот, coordinate a и b, в общем, я располагаю точку. Ну, точку a и c расположилась чем
[27:21.120 --> 27:27.240]  по-обычному. Точку b расположил в полярных координатах, а точку d расположила относительно точки a. Вот.
[27:27.240 --> 27:38.400]  В общем, пакет tixcalc позволяет проводить вычисления точками, типа, складывать их там, ну, такие
[27:38.400 --> 27:43.200]  вычисления проводить, но для этого надо как бы оформить такое окружение скобочка долларов,
[27:43.200 --> 27:51.680]  ну, как формула. Вот, теперь началась магия. Смотрите, вот такой синтаксис обозначает точку,
[27:51.680 --> 27:58.000]  причем это даже без tixcalc. В общем, такой синтаксис обозначает точку, лежащую на пресечении вертикальной
[27:58.000 --> 28:02.880]  линии, проходящей через a, и горизонтальной, проходящей через b. Ну, вот, вот эта точка я
[28:02.880 --> 28:09.680]  вот провел путем. Вот a, это точка b. Вот он нарисовал, и вот он как вертикальная линия через a,
[28:09.680 --> 28:14.480]  и горизонтальная через b. И вот он нашел пресечение этой линии. Ну, там b.d.c я просто
[28:14.480 --> 28:21.440]  нарисовал. Вот дотат. Дальше интересное. Вот такой синтаксис. Ладно, начну с a. Вот такой синтаксис.
[28:21.440 --> 28:28.560]  Он обозначает то, что мы провольем от точки b до точки d отрезок и выбираем что-то на расстоянии 0,5
[28:28.560 --> 28:32.960]  от длины этого отрезка от b в сторону d. То есть здесь может быть отрицательное число. Например,
[28:32.960 --> 28:39.760]  минус 1 означает вот эту точку. Ну, то есть, которое отражение b на этом отрезке. То есть,
[28:39.760 --> 28:44.760]  на таком же расстоянии вот в эту сторону идем. Вот. Если бы я взял 1, это взял бы вот точку d. 0.b.
[28:44.760 --> 28:56.800]  2 это вот отражение b за d. Вот. А вот такой синтаксис dbc означает проекция b напрямую
[28:56.800 --> 29:00.960]  соединяющей d.c. То есть, ну, здесь треугольник dbc получился сейчас треугольный, поэтому,
[29:00.960 --> 29:07.680]  ну, это просто высота. Но если бы, например, точка c была здесь, то оно просто
[29:07.680 --> 29:24.000]  опускается на линию и не парится. Шампакет тикс евклит позволяет работать с отрезками углами.
[29:24.000 --> 29:30.560]  И там можно нарисовать бисикрису лбу. Все красиво сделать. Давайте вот в этот рисунок добавим,
[29:30.560 --> 29:37.120]  отметим угол. Вот здесь можно нарисовать, например, ватикальную палочку. Это будет
[29:37.120 --> 29:42.080]  означать черточка. Можно нарисовать букву s. Это будет означать вот такое, знаете, когда, в общем,
[29:42.080 --> 29:49.840]  волнистая отметка. Ну, и там есть какой-то список. Можно загуглить. После арк надо писать количество
[29:49.840 --> 29:58.720]  букв l. Это вот этот угол. Он никак не помещен. 2 l означает 2 дуги. 1 l, 1 дуга. 3 l, 3 дуги.
[29:58.720 --> 30:04.280]  Сайз 10 пт. Ну, это так просто по вкусу подбирать, чтобы прилично выглядело. И дальше говорите
[30:04.280 --> 30:13.160]  какой угол. cdb. Вот cdb. Если вы скажете bdc, он пометит вот этот внешний угол. Так,
[30:13.160 --> 30:25.440]  tx mark right angle. Это отвечает прямой угол. Вот он отмечен. Это спойлер. Дальше label angle.
[30:25.440 --> 30:30.880]  Это пометить angle. Ну, вот cdb. cdb помещаем синтаксис альфа. Ну, помещаем вот такой синтаксис,
[30:30.880 --> 30:37.400]  помещаем его значением альфа. Вот пометили альфа. Дальше tx mark сегмент. Как помещать вертикальную
[30:37.400 --> 30:42.560]  палочку одной чертой, две вертикальные двумя. Буква s. Это такой волнистая пометка. Это отрезок
[30:42.560 --> 30:49.760]  eb. Вот отрезок eb и ed. Мы пометили, потому что они равны, потому что, помните,
[30:49.760 --> 30:59.760]  а вот сюда это была просто середина отрезка bd. Ну, в общем, они равны, мы их ответили. Вот так
[30:59.760 --> 31:03.200]  вот можно конструировать такие геометрические рисунки. На самом деле очень просто, очень удобно.
[31:03.200 --> 31:15.360]  Небольшое отступление про лотех. В общем, один из создателей вот этого еще движения придумал
[31:15.360 --> 31:22.600]  еще циклы. Циклы в чехе. И они не только про, ну, то есть они там подключаются к какой-то библиотекой,
[31:22.600 --> 31:29.920]  но это тоже легко загуглить, но они идут вместе с тигзом. И, ну, работают не только в тигзе. Вот.
[31:29.920 --> 31:33.840]  И, например, можно привернуть вот такую вот махинацию. То есть, какой синтаксис?
[31:33.840 --> 31:42.160]  Forage переменная, дальше диапазон. И тут может быть, аж, он понял, что это значит. Могут быть
[31:42.160 --> 31:50.600]  большие буквы. Можно один, там, один, и там, один запятая многоточие, один, ну, один запятая многоточие
[31:50.600 --> 31:57.720]  пять. Это все числа до 9. Можно комбинировать и буквы, и цифры. В общем, такой синтаксис очень,
[31:57.720 --> 32:05.160]  очень свободный. Надо поэкспериментировать и, в общем, поймете. Ну, или загуглить. Дальше условный
[32:05.160 --> 32:12.440]  оператор. Ifs and else. В общем, он принимает на первое утверждение, на первое, в общем, первым
[32:12.440 --> 32:17.600]  аргументом он принимает утверждение. Дальше, что надо делать, когда истинно, когда ложно.
[32:17.600 --> 32:29.840]  Вот. Ну, в общем, что это делает? Это внутри формулы. Под корнем он передвигает все буквы от
[32:29.840 --> 32:35.880]  а до ж, и если это буква а, то он ничего не пишет. А если любая другая буква, то он пишет плюс,
[32:35.880 --> 32:43.120]  а дальше в любом случае пишется буква в квадрате. Потому что вот такая запись, вместо, не очень удобно
[32:44.120 --> 32:48.400]  руками писать, превращается в более компактно. Ну, здесь, конечно, это может не так быть очевидно,
[32:48.400 --> 32:57.240]  но когда у вас какие-то очень сложные конструкции, там много, в общем, на самом деле, так это, в общем,
[32:57.240 --> 33:05.720]  по жизни замечается, когда это может быть полезно. В общем, это может быть удобно, правда. Вот. Дальше,
[33:05.720 --> 33:11.680]  в общем, все опять увеличение какое-то происходит. Вот здесь такой синтаксис, я объявил переменным.
[33:11.680 --> 33:21.440]  То есть, объявил то, что примена r равна единице. Вот. И дальше я расположил a вот такой точкой. Ну,
[33:21.440 --> 33:25.240]  там остальные точки не так важны, чтобы места не занимать. Вот эти точки, вот я их расположил,
[33:25.240 --> 33:34.000]  и дальше я... Ой, тут съехало. В общем, вот тут в цикле, тут уже существенно, потому что вот
[33:34.000 --> 33:37.600]  это все, что копируют для каждой точки, не так удобно. Тем более, тут точка в трех местах
[33:37.600 --> 33:43.480]  встречается. В общем, я написал там... Ну, то есть, что я написал? Для каждой p из вот этих букв он
[33:43.480 --> 33:51.800]  сразу догадал. Ой, тут должно было быть е. И тут е. Ну, в общем, тут точки a, b, c, d, e. Тут
[33:51.800 --> 34:01.120]  должно было быть a, t, e. И здесь последняя точка должна быть е. Вот. То есть, он рисует, заполняет
[34:01.120 --> 34:08.560]  черным кружочек размера 1 point. Вот. То есть, тут подставляется p просто вместо... То есть,
[34:08.560 --> 34:13.920]  вместо p подставляется буква a. Вот. И вот, а скобочка как эта точка. Помните, как мы уже делали?
[34:13.920 --> 34:23.320]  Вот. Ну, и дальше... Вот. Еще один пример, когда нужно node. Если хотите что-то подписать как-то по
[34:23.320 --> 34:32.040]  умному, то нужно написать node. Ну, то есть, нужно сделать узел в этой точке и как-то поменять
[34:32.040 --> 34:40.760]  это лейблом. Вот. И вот здесь задается положение. То есть, можно above, below, left, right комбинировать
[34:40.760 --> 34:46.120]  или даже угол написать. То есть, лейбл равно 30 двоеточек. И что вы пишете, это значит будет под
[34:46.120 --> 34:51.440]  углом 30. Ну, в общем, можно прям точно, точно пересценировать, где его расположить. Как-то так.
[34:51.440 --> 35:02.120]  Следующая интересная вещь, которая есть, это пути их пресечения. В общем, давайте нарисую путь ab
[35:02.120 --> 35:10.640]  и обозначу то, что это путь ab. Как не странно. Ну, можно было как-то другом назвать. Дальше,
[35:10.640 --> 35:26.960]  в точке d я нарисую круг через, ну, точке d. Точнее, не так. Я скажу, что d, узел d. Что такое узел d?
[35:26.960 --> 35:35.240]  Это... Ну, он располагается в точке a. Он есть окружность, проходящая через b.
[35:35.240 --> 35:43.440]  С центром точки a. Его надо нарисовать, это окружность. Называть эту окружность, то есть,
[35:43.440 --> 35:50.520]  то, что нарисовалось, это будет путь, назвать его d. И еще пометить слева d. Сейчас покажу
[35:50.520 --> 35:54.560]  следующий пример, что получится. То есть, мы задали точки a и b только. Дальше говорим,
[35:54.560 --> 35:59.920]  надо в точке a провести окружность, проходящую через b. Называть эту окружность d и пометить
[35:59.920 --> 36:07.040]  слева. Ну, вот он это и сделал. То же самое с точкой e. То есть, мы говорим, то, что надо провести,
[36:07.040 --> 36:19.600]  надо расположить узел e. Называю это узел e. Первое, что располагаю его в точке b. Это есть окружность,
[36:19.600 --> 36:25.760]  которую нужно нарисовать, которая проходит через точку a. И подписать его надо справа. Вот так он
[36:25.760 --> 36:38.080]  подписывает. И дальше, в чем величие, мы называем перещение of, перещение d и e. Называю его c и ch3.
[36:45.120 --> 36:49.480]  Поскольку перещение d и e 2, ну, то есть, их может быть и больше, может быть и меньше,
[36:49.480 --> 36:57.240]  вот. То синтактис такой, то, что intersection of, intersection равно тигуру скопочка of каких путей,
[36:57.240 --> 37:07.360]  точнее, да, тут назвали пути d, назвали пути e. Путей d и e. И как его назвать? И дальше,
[37:07.360 --> 37:11.640]  поскольку тут много, тоже надо тигуру скопочка все написать. И дальше мы перечисляем все
[37:11.640 --> 37:16.400]  перещения. Они там, по-моему, отсортированы сначала по x, потом по y, но это так. В общем,
[37:16.400 --> 37:21.440]  экспериментальным путем выясняется, как что называется. Вот. И помимо того, что мы обозначаем
[37:21.440 --> 37:30.040]  каждую точку c или ch3, но мы еще и... В общем, он там располагает узлы те самые, и мы подписываем
[37:30.040 --> 37:36.040]  еще вот, например, подписать сверху, подписать снизу. Вот. Вот он нашел перещение, подписал сверху это,
[37:36.040 --> 37:43.160]  подписал снизу это. И теперь к ним можно обращаться. Теперь я пройду через эти две точки путь ch3 и
[37:43.160 --> 37:55.120]  назову его, как ни странно, cc3. И скажу, что он будет красным. И дальше я найду перещение ab и cc3 и
[37:55.120 --> 38:03.640]  назову его f. Вот. И нашел перещение путей ab и cc3. И назвал его f. Ну и там дальше я уже не стал писать код. Там я эту точку
[38:03.640 --> 38:15.000]  как-то нарисовал красненьким. Ну в общем, ей можно пользоваться. Вот. В общем, вот величина. И еще
[38:15.000 --> 38:24.880]  следующий шаг. Смотрите, задача нарисовать на стороне треугольника, например. Ну как это можно
[38:24.880 --> 38:32.880]  сделать? Ну еще отрезок. Ну что мы с Гееминым помним? Ну то есть мы должны как бы дойти до середины, то есть
[38:32.880 --> 38:37.680]  ну понятно, что можно провести две окружности такого радиуса. Ну в общем, вот здесь вот у нас
[38:37.680 --> 38:43.480]  получился на стороне треугольник. И на самом деле помните, я говорил то, что вот здесь говорил draw, да,
[38:43.480 --> 38:48.880]  нарисовать круг. На самом деле можно было не рисовать его. Тогда бы круг, сами круги не нарисовались. То есть
[38:48.880 --> 38:54.280]  но перо бы по ним прошло. То есть как бы пути остались, но они не были нарисованы. И точку c мы бы
[38:54.280 --> 39:01.320]  нашли как прещение этих двух кругов. Надеюсь, понятно мысль. То есть если я уберу вот здесь вот этот
[39:01.320 --> 39:07.880]  draw, то сами круги перестанут быть нарисованы. Но эти точки все равно я смогу их найти и отметить.
[39:07.880 --> 39:14.080]  В общем, это один способ нарисовать, например, на стороне треугольника. Но следующий способ, наверное, самый короткий.
[39:14.080 --> 39:21.720]  В общем, у меня есть отрезок АКБ. Все что делаю. Ну помните, я могу найти середину точки x. Я вот сначала
[39:21.720 --> 39:29.000]  снизу пройду. Вот по нижнему. То есть я расположил точки A и B. Провел путь A-B. Дальше.
[39:29.000 --> 39:43.280]  Смотрите, я провожу, я смещаю точку x по середине между A и B. Вот расположил точку x.
[39:43.280 --> 39:59.120]  В общем, я рисую от A до x. И дальше я вот эту точку. Вот эту точку. Это как раз будет D точка.
[39:59.120 --> 40:06.200]  Я что делаю? Как казалось бы, тот же самый синтаксис, который я уже говорил, он только какие-то странные 92
[40:07.200 --> 40:15.000]  В общем, я беру точку x, точнее отрезок xB. Беру вот это расстояние. Можно синус считать, что угодно.
[40:15.000 --> 40:20.760]  Можно считать. Все формы доступны. В общем, беру синус 60, умножаю его на 2. То есть получаю ровно это расстояние,
[40:20.760 --> 40:30.680]  только оно идет в сторону точки B. Если бы я убрал 90, то у нас была бы вот эта точка вот здесь.
[40:30.680 --> 40:39.440]  Но значение 90 значит еще и повернуть на угол. И это как раз то, что нам нужно. То есть мы отверяем такое расстояние в эту сторону и поворачиваем на угол 90.
[40:39.440 --> 40:49.640]  Но угол может быть не только 90, может быть 45. Какого угода угол может быть. И вообще, вот это все,
[40:49.640 --> 40:55.640]  то, что я написал, можно сократить в один код. То есть вот такая длинная запись для формулы.
[40:55.640 --> 41:04.200]  То есть она вычисляется слева направо. То есть мы сначала берем точки A и B, берем их середину, и потом от этой середины до точки B
[41:04.200 --> 41:12.040]  проводим расстояние, равное по длине. Вот. Восток это раз больше. То есть синус 60 умножить на 2. Это как бы коэффициент,
[41:12.040 --> 41:16.440]  с которым надо умножить расстояние. И потом еще повернуть на 90 градусов. И по мне все проще.
[41:16.440 --> 41:26.120]  Говорю то, что надо разместить точки D. Ну то есть, точнее назвать узел D вот этим всем.
[41:26.120 --> 41:32.360]  Разбужить его вот здесь. Вот узел D. Можно было им сказать координат. И помимо всего, я говорю,
[41:32.360 --> 41:39.280]  его нарисовать. Ну то есть заполнить красным. Intercept это размер точки. Это размер точки.
[41:39.280 --> 41:47.920]  Вот она как квадратка такая. В общем, может он так и рисует. Вот. В общем, идея такая.
[41:47.920 --> 41:55.160]  Например, вот картинка, которую хочу показать, картинка, которую нарисовал. Ну, если интересно,
[41:55.160 --> 41:58.640]  здесь просто показываю. Ну, это решение одной издачи, там, по сравнению с прознаменением.
[41:58.640 --> 42:03.520]  В общем, вот какой-то диск, он заходит, в общем, тут вот выходит всякая геометрия касательная.
[42:03.520 --> 42:12.080]  Содержательный рисунок. А теперь иду к рассказу о том, как я его получил.
[42:12.080 --> 42:20.320]  В общем, здесь вот, ну, сначала я немного объясню. Еще есть такой класс документов Standalone.
[42:20.320 --> 42:25.040]  Он позволяет, в общем, только рисовать. Ну, в общем, он такой технический класс. Видите у меня
[42:25.040 --> 42:31.200]  PDF, он ровно по картиночке. Ну вот, еще с границ 11 метров. В общем, в этом его предназначение.
[42:31.200 --> 42:37.920]  Тут нажито не по-сильному. В общем, нажито за всю жизнь библиотека TIX,
[42:37.920 --> 42:44.680]  которую я когда-либо использовал. Все, вот этот, кстати, вот этот калк, который позволяет считать
[42:44.680 --> 42:52.920]  точки. Intersections, который позволяет, ну, калк, это точка, скобочка, доллар. Intersections,
[42:52.920 --> 42:57.600]  который позволяет искать перещения. True, это вот это, проести круг через точку.
[42:57.600 --> 43:09.120]  TIX и CLID, это вот этот пакет. Ну, в общем, все, что получилось. Теперь еще расскажу про сам рисунок.
[43:09.120 --> 43:17.960]  Вначале я задаю два стиля. Стиль точка, что это означает? Это значит то, что надо рисовать,
[43:17.960 --> 43:25.840]  заполнить черным. Цвет тоже черный, который надо рисовать. Это должен быть кружочек и
[43:25.840 --> 43:30.680]  радиус 1. Помните, я не писал тогда кружочек, и если бы я беру вот сюда все кружочки,
[43:30.680 --> 43:35.800]  то они бы станут кларатиками точкой. Слову кружочек беру. В общем, dot означает вот такой
[43:35.800 --> 43:46.280]  набор параметров. Help означает то, что все должно быть серым. Дальше. Я ввожу два радиуса,
[43:46.280 --> 43:53.000]  большой и маленький, и ввожу некий уголочек альфа. То есть, это те основные характеристики,
[43:53.000 --> 44:01.720]  которые, то есть, я как бы все способы изменить картинку вынес вот в одно место. То есть,
[44:01.720 --> 44:06.400]  чтобы не вводить каких-то абстрактных чисел, которые сильно меняют картинку потом, а основные
[44:06.400 --> 44:11.120]  задающие картинку значения, я вот вывел в начало. Чтобы, если я хочу изменить радиус,
[44:11.120 --> 44:21.480]  я мог вместо сверки напишу восьмерку. Я нажму скопировать. В общем, давайте вместо восьмерки
[44:21.480 --> 44:28.080]  я сделаю пятерку. И видите, все опять перестрауло, все стало как нужно. Но картинка сильно
[44:28.080 --> 44:35.120]  изменилась, но опять все точки там, где нужны. То есть, я могу менять только один параметр,
[44:35.120 --> 44:41.120]  а все остальное будет оставаться. Все причечения будут там, где нужно, и, в общем, это очень
[44:41.120 --> 44:46.920]  удобно. Дальше, что я делаю? Я пишу координаты, дальше перейду к параметру dot. То есть, надо,
[44:46.920 --> 44:52.960]  что значит? Ну, значит, перейду к сеть параметру, чтобы нарисовать точку черную. Размещаю точку
[44:52.960 --> 45:00.640]  о в центре. Размещаю точку t в вот таком месте. Минус альфа r. Ну, альфа – это вот этот уголочек.
[45:00.640 --> 45:10.160]  Вот этот, видимо. А, минус альфа, да, минус альфа. То есть, вот отсюда, вот сюда он отсчитывается
[45:10.160 --> 45:19.040]  в 155 градусов. То есть, если я сделаю 130, например, то он станет куда, вот видите, он стал куда меньше.
[45:19.040 --> 45:23.120]  Корзинка перестала быть такой красивой еще, говоря. Вот, в общем, так не надо делать, наверное.
[45:23.120 --> 45:29.540]  В общем, могу там 170 показать. Это я вот делаю больше. Видите, опять, все как нужно расположилось,
[45:29.540 --> 45:39.920]  но не так приятно выглядит, потому что 155 – это подобранное значение. Вот, хорошо. Размещаю t вот
[45:39.920 --> 45:45.680]  здесь, и t вот здесь. Видите, тут вот все работает легко. То есть, я на расстоянии r plus r. Ну, вот так
[45:45.680 --> 45:57.800]  пишу. r plus r. Дальше. Называю путь. Называю звезда. В точке o рисую круг радиус mr. Это звезда.
[45:57.800 --> 46:09.160]  И этот путь называется звезда. И планеты называю этот путь планетой. И рисую его в точке p. И радиус
[46:09.160 --> 46:17.640]  mr. Вот. Дальше. В общем, дальше я просто рисую линию, соединяющую звезду и планету o и p. Вот. Дальше.
[46:17.640 --> 46:28.320]  Дальше я прожжу касательную. Называю этот путь касательной. Прожжу ее пунктирной. И вот этот
[46:28.320 --> 46:35.160]  100pt, 100pt – это я просто задал размер, как бы. То есть, что тут произошло? Я пришел от t к точке p.
[46:35.160 --> 46:44.760]  Ну, помните, как я говорил, пришел от точки t, ну, к точке x. А от t точки p вернулся на 90 градусов
[46:44.760 --> 46:50.280]  и прошел расстояние 100pt. То есть, тут я задал конкретное расстояние points. Поэтому это не в
[46:50.280 --> 46:57.240]  процентах, а какое-то расстояние. Потом, в общем, от этой точки иду к точке t. Иду к точке,
[46:57.240 --> 47:02.400]  расположенной, ну, тут уже плюс 90. То есть, он отсчитал свои 100pt и вернулся на 90 градусов.
[47:02.400 --> 47:12.640]  Дальше я называю путь путь, потому что это путь прохождения планеты. Тоже пунктирный. Он
[47:12.640 --> 47:21.480]  начинается в точке p и заканчивает опять относительно позиционирование и плюс. И я тут
[47:21.480 --> 47:27.760]  считаю, видите, 2.2 умножить на 0r. Ну, то есть, ой, что-то он скомпилировал как r. В общем,
[47:27.760 --> 47:36.280]  2.2 умножить на, то есть, на самом деле, 0r это можно было произвинить на 0.r. Вот. Но я тут
[47:36.280 --> 47:40.480]  хотел почему-то, на какую сторону, в общем, так мне было удобнее. То есть, как бы в ту сторону на r,
[47:40.480 --> 47:51.480]  на расстоянии 2.2. Ну, 2.2 умножить на r. Дальше я называю intersection of касательный путь
[47:51.480 --> 47:57.080]  планеты. Вот эта селенькая точка. Называю ее ti. Не помню, почему. Вот. И дальше, видите, note help
[47:57.080 --> 48:01.800]  at ti. Вот. Help. И она вот становится вот в тот самый стиль help. И она вот становится вот такой
[48:01.800 --> 48:26.760]  селенькой точкой. Дальше я... Дальше я взмещаю точку и называю ее pr0path. Это, ну,
[48:26.760 --> 48:34.640]  в общем, так называл. Точки могут называться как угодно. Как угодно длинными. Это все, в общем,
[48:34.640 --> 48:42.800]  доступно. И вот, располагая ее, вот, как раз, то есть, это вот эта точка. Ну, то есть, это
[48:42.800 --> 48:54.600]  прегуляр из 0 на путь. Из o на путь. Вот. Это прегуляр из p. То есть, я беру точку планета. Вот эта ti.
[48:54.600 --> 49:04.120]  И, ну, в общем, я пускаю определенного. Но я уже рассказывал о чём-то синтакте. Я его сам только недавно
[49:04.120 --> 49:25.680]  узнал. То есть, получается, это же можно было бы сделать и вот. Заодно проверим. Ну да. То есть,
[49:25.680 --> 49:31.040]  надо вертикальную линию через o. То есть, вертикальная линия... Да, вот. Видите? То есть,
[49:31.040 --> 49:35.720]  вот точка o, вот точка p. То есть, я говорю, вертикальная линия, проходящая через o,
[49:35.720 --> 49:41.440]  и горизонтальная линия, проходящая через планету. И вот они здесь пересекаются.
[49:41.440 --> 50:02.360]  Дальше я рисую от 0 до... от o до этой точки. И тут, в этой точке, в этой точке, точнее вот,
[50:02.360 --> 50:07.960]  после этого перехода, я располагаю узел и говорю, что находится midway. Что значит? Это значит,
[50:07.960 --> 50:12.840]  что надо располагать посередине последнего перехода. Вот. Ну и дальше вот, то самое label.
[50:12.840 --> 50:19.600]  Write b. В общем, так я помещаю вот это пройденное расстояние. То есть, так я помещаю вот этот
[50:19.600 --> 50:26.200]  отрезок. То есть, я говорю, идти из 0 в эту точку и параллельно на серединке, ну, то есть,
[50:26.200 --> 50:33.280]  и параллельно, говорю, midway, то есть, посередине пути пометить точка b справа. Вот. Дальше помещаю
[50:33.280 --> 50:48.400]  прямой угол. Вот этот прямой угол помещаю. Дальше помещаю прямой угол вот этот. Дальше помещаю
[50:48.400 --> 50:59.000]  просто угол, вот видите. Да, вот надо написать mark, чтобы он пометился. Но он пустой. То есть,
[50:59.000 --> 51:09.680]  если напишу, например, обещанное s, видите, он такой вот волнистый пометился. В общем,
[51:09.680 --> 51:17.040]  он такой волнистый пометился. Но тут не нужно было, чтобы он хоть как-то помещался. Вот поэтому
[51:17.040 --> 51:20.720]  просто искал mark. То есть, чтобы было видно. Все, наверное, если уберу mark, ничего не изменится.
[51:20.720 --> 51:29.760]  Вот. Дальше я подписываю тугл бета. Дальше я рисую, видите, опять везде help, чтобы такое было
[51:29.760 --> 51:41.760]  серенькое. И тут начинается. Я рисую от точки t, то есть, здесь я вот так захотел пометить
[51:41.760 --> 51:47.360]  расстояние. Может быть, можно как-то модернизировать этот способ, но я не придумал. В общем, что тут
[51:47.360 --> 51:53.040]  делаю? Я от точки t, к точке касания провожу, видите, вверх на расстоянии 6, прямую просто,
[51:53.040 --> 51:58.640]  и от точки o прохожу вверх на расстоянии 3 прямую. То есть, просто вот как от руки рисую прямую
[51:58.640 --> 52:10.400]  вверх. И вот от точки p и ti рисую прямую вниз. Дальше... Дальше тут немного сложный кусочек.
[52:10.400 --> 52:21.320]  Я говорю... Ну, я начинаю путь. Дальше говорю звепременные локально. Это такой синтаксис let p1 и p2,
[52:21.320 --> 52:29.000]  in. Как помните, был для цикла, но тут вот как бы, в общем, не цикл, а такой синтаксис. Вот. Дальше
[52:29.000 --> 52:37.440]  я начинаю рисовать. Ну, говорю draw. Помните, лотех? Что вот здесь написано? Лотех. Трелотех.
[52:37.440 --> 52:49.720]  Вот этот скейл за все. Это просто стрелочки. Это стрелочка лотех. И дальше у него параметр скейл
[52:52.560 --> 52:58.080]  полтора. То есть, это стрелочка лотех увеличена в полтора. Слева и стрелочка справа. То есть,
[52:58.080 --> 53:04.800]  вот это чтобы эти были две стрелочки. Дальше прохожу... Дальше вот точки p1. Я это не рассказывал,
[53:04.800 --> 53:10.160]  знаете, можно... То есть, когда я так называю p1, и тут именно обязательно синтаксис. Если
[53:10.160 --> 53:14.600]  хотите знать точку, то обязательно говорите именно p. Дальше можно p1, p2. В смысле можно
[53:14.600 --> 53:21.360]  вместо 1 и 2 в фигурных скобочках написать название. Вот. Дальше его использовать. Но обязательно
[53:21.360 --> 53:27.600]  в начале синтаксис. Дальше я беру координаты x второй точки, ставлю в координату x точки,
[53:27.600 --> 53:33.040]  а вторая координата единица. Ну и вот, в общем, вот такой... Ну вот так. То есть,
[53:33.040 --> 53:40.400]  я беру иксовый координат и прошу прямую. И опять-таки говорю о посередине этого пути,
[53:40.400 --> 53:49.040]  который только что прошел. Сейчас я немного поясню. Еще раз. Вот эту штуку можно было заменить.
[53:58.600 --> 54:07.800]  Сейчас. Вот эту всю штуку можно заменить на... Просто вот так вот. И вот видите,
[54:07.800 --> 54:11.840]  просто стрелочки стали такими. Здесь я ради красоты стрелочек это сделал, в общем,
[54:11.840 --> 54:24.840]  и побольше, и стилил от тех. Вот. В общем, вот так вот я помещаю этот r-штик. Ну,
[54:24.840 --> 54:34.200]  аналогично нормально, кажется, их. Наверное, везде, наверное, мне было лучше вынести вот этот
[54:34.200 --> 54:45.600]  вот весь стиль. Помните, как я... Ну, вот давайте я прямо сейчас это сделаю. То есть, я вот найду
[54:45.840 --> 54:54.080]  его. А, нет, ну так это просто сделать. А, нет, все придумал. В общем, когда она справа,
[54:54.080 --> 55:08.520]  я заменю это на правую стрелочку. Когда она слева, я заменю ее на левую стрелочку.
[55:15.600 --> 55:32.640]  И в самом начале, где-то вот здесь, я скажу то, что... Вот. Вот, все, видите? Короче, я тоже...
[55:32.640 --> 55:38.200]  Главное, это уметь исправить свои ошибки. То есть, я вместо того, чтобы копить кучу раз,
[55:38.200 --> 55:45.600]  я в общем так не делал, а теперь сделал. Смотрите, код куда более читаемый. И, ну вот, я тут задал ему,
[55:45.600 --> 55:49.320]  что все стрелочки должны быть в лотех и размер. А теперь, если я хочу, например, сделать чуть-чуть
[55:49.320 --> 55:53.360]  поменьше, то я только в одном месте изменяю. Не, все дружно становятся чуть меньше. Видите,
[55:53.360 --> 56:01.160]  как все замечательно. Вот мы, вот. Вот мы с вами. И выясним все. Вот. Так. В общем, мы
[56:01.160 --> 56:09.000]  остановились вот здесь. Вот. Так. Теперь стрелочка направо из планеты. Ну, просто тут как-то я хотел
[56:09.000 --> 56:15.240]  поменить радиус. Да? То есть, вот. Стрелочка направо. По центру подписываю радиус. Это я помещаю
[56:15.240 --> 56:23.120]  радиус. Ну, вот 160р. В общем, 160 градусов. Вот 160 градусов. Также помещаю большой радиус. Это вот здесь помещаю.
[56:23.120 --> 56:34.840]  Да. В общем, теперь это вот была вся левая часть рисунка. То есть, вот это все, вся левая часть рисунка.
[56:34.840 --> 56:47.040]  Теперь вот проправочная часть рисунка. Я даже немного приближу. Что-то происходит. Ну, то есть, тут
[56:47.040 --> 56:54.680]  вот примерно впечатление, как в истории было. Неважно. Что делаю? Я размещаю точку выхода. Ну,
[56:54.680 --> 57:01.760]  просто говорю. Альфа минус 180. То есть, это. То есть, помните, там угол альфы вот этот был. В общем,
[57:01.760 --> 57:09.720]  как раз получается противоположная точка. Альфа минус 180. Ровно эта точка. Ну, и радиусом r
[57:09.720 --> 57:15.600]  плюс r. Это получается вот эта точка. Вот эта точка. То есть, она противоположна вот этой точке.
[57:15.600 --> 57:31.480]  По углу. То есть, этот угол. Ну да. Дальше называю этот путь planet out. Серая. Прерывистая. Кружок.
[57:31.480 --> 57:48.760]  Радиус r. Дальше опять вот. Let p1 pout, p2 p, p3 ti. Ну, в общем, здесь просто вот такая геометрия.
[57:48.760 --> 58:04.120]  x1 плюс x2 минус x3. Это. Я располагаю вот эту точку. Видимо. А нет, вот эту точку. Видимо. Не знаю.
[58:04.120 --> 58:10.600]  Какую-то из этих точек я располагаю просто, в общем. Ну, по координатам я располагаю. То есть,
[58:10.600 --> 58:16.640]  я выражаю через координаты других точек. Да. То есть, мне нужно было, чтобы вот это расстояние r
[58:16.640 --> 58:21.680]  было равно на одно расстояние r. И ровно этого я здесь и добиваюсь. То есть, что такое r? Это расстояние
[58:21.680 --> 58:28.880]  между точкой p и ti. Вот. То есть, p ti это 2 и 3. То есть, экзамен с x3. И проявляю точки x1. То есть,
[58:28.880 --> 58:35.720]  к точке pout. В общем, получаю вот эту точку. А y беру такой же, ну, у них всех был. Вот. И получаю ровно
[58:35.720 --> 58:42.920]  эту точку. Вот. Дальше p in. Это planet внутри. Это, в общем, я просто вот такой синтез с минус 1. То есть,
[58:42.920 --> 58:54.560]  я как бы за точку ti2 в другую сторону от pout на расстоянии 1. В общем, такой рисунок. Дальше
[58:54.560 --> 59:04.000]  называю этот путь планеты внутреннее. В общем, вот такое рисую. Да. То есть, вот эта точка, ой,
[59:04.000 --> 59:10.240]  эта точка, она как раз не лежит на окружности. У нее смысл было, чтобы ровно r3 было. В общем,
[59:10.440 --> 59:19.560]  добился вот в этих учтениях. Назвал. Вот я назвал этот кружочек внутри. Это планета внутри.
[59:22.960 --> 59:34.760]  И дальше что делаю? В общем, я расположил. Ну, я вот эти прямые рисую. То есть, я рисую прямую.
[59:34.760 --> 59:44.400]  То есть, я из точки вычитаю точку. То есть, я как бы иду вот в эту сторону на 92.3. То есть,
[59:44.400 --> 59:50.560]  на 90 градусов. Ну, минус. То есть, 90 градусов это вот сюда вот. И 3 это длина. Только минус,
[59:50.560 --> 59:57.920]  значит это вниз. В общем, так я получаю точку. Вот так вот рисую. Ну, и дальше вот в конце это
[59:57.920 --> 01:00:12.960]  я провожу. Сначала помещаю r' и r'. И дальше вот у нижней стрелки. Тут я как бы применяю,
[01:00:12.960 --> 01:00:19.280]  то есть, то же самое x1-x2 и 0. Это какая-то высота. Ну, точнее вот, видите, плюс относительное
[01:00:19.280 --> 01:00:27.400]  положение. То есть, в общем, тут я выбрал какую-то высоту y2-2.6 сантиметров. Просто вот это на глаз
[01:00:27.400 --> 01:00:31.800]  убрал. А тут, чтобы не дублировать это, я пишу относительное положение. Вот. Это, чтобы не
[01:00:31.800 --> 01:00:37.760]  дублировать 2.6 сантиметров, которые выбраны были на глаз. И дальше здесь я два раза подписал. И
[01:00:37.760 --> 01:00:44.920]  сверху у Tao. И снизу просто обычным текстом. Вот. Ну, и на самом деле вот такое. Ну, то есть,
[01:00:44.920 --> 01:00:50.560]  это нужно было для решения знача рисунок. И рисунок вроде сложный. То есть, я не знаю,
[01:00:50.560 --> 01:00:55.680]  где его можно аккуратно нарисовать. Ну, то есть, может есть какие-то. Вот. Но, может тексты выглядят
[01:00:55.680 --> 01:01:02.880]  сложным. Но я так, просто немного принорвишно рисовать. Я минут за 15 или даже меньше рисовал.
[01:01:02.880 --> 01:01:08.960]  Наверное, минут за 10. В общем, на самом деле, синтаксис, если чуть-чуть попрактиковаться,
[01:01:08.960 --> 01:01:14.480]  порисовать, очень воспривыкается, что-то для себя запоминается. И вот это реально на ходу
[01:01:14.480 --> 01:01:20.880]  уберется. То есть, это как свободный поток. То есть, расположить точку здесь, взять пересечение. Вот.
[01:01:20.880 --> 01:01:33.280]  То есть, момент, что я время-тремя лезу в Google за синтаксисом. Но... В общем, время-тремя я ложу
[01:01:33.280 --> 01:01:38.520]  синтаксисом. Но в этом как бы ничего такого нет. Такова жизнь. Вот. И еще я хотел показать,
[01:01:38.520 --> 01:01:44.720]  перед тем, как я совсем закончу. Да. В общем, вот книжка. Это просто прекрасная книжка. И, не знаю,
[01:01:44.720 --> 01:01:53.840]  ее Кристоф Нодону, Кирилю Тенко просто... Ну да, в общем, понятно. Кафедра математического анализа.
[01:01:53.840 --> 01:01:59.680]  В общем, это прекрасная книжка. И тут очень-очень подробно и очень, на самом деле, ну,
[01:01:59.680 --> 01:02:07.920]  в общем, честно расписано. В общем, расписано все. Тут еще с примерами, все с синтаксисом. Все как бы
[01:02:07.920 --> 01:02:12.480]  везде в примерах вы можете найти все основное. И на самом деле очень легко найти именно какие-то
[01:02:12.480 --> 01:02:17.640]  основные вопросы. Но если именно читать весь текст, то внутри очень рассказано очень много полезных
[01:02:17.640 --> 01:02:24.960]  фишечек маленьких. Как там что-то делать. Вот. Ну, я сейчас просто пролистаю просто. Ну, вот то,
[01:02:24.960 --> 01:02:31.680]  что я показывал. И тут разбираться какие-то конкретные примеры. И вот так вот шаг за шагом
[01:02:31.680 --> 01:02:43.920]  все пишется, показывается. Ну, в общем, реально очень, очень просто. Вот. То есть очень, по ней
[01:02:43.920 --> 01:02:49.280]  очень легко ориентироваться. И я ее реально использую как настольную книжку. И, ну, в общем, очень классная
[01:02:49.280 --> 01:03:02.240]  фишка. Я ее в чат скинул, конечно. Вот. И, в общем, тикс позволяет рисовать ну, прям очень какие-то
[01:03:02.240 --> 01:03:09.560]  крутые картинки. И можно в интернете погуглить там типа тикс картинки. Ну, тикс картинки. И там есть
[01:03:09.560 --> 01:03:13.400]  очень много картин, которые, на первый взгляд, кажутся очень сложными. Но, во-первых, код у них там
[01:03:13.400 --> 01:03:17.760]  занимается срочек 100 всего лишь. Вот. И если его почитать, видно, что он совсем простой и синтаксис
[01:03:17.760 --> 01:03:23.040]  даже. Ну, в общем, там просто вот это все комбинирование отцы. Ну, то есть, в общем,
[01:03:23.040 --> 01:03:30.720]  простым гуглингом почти любая картинка рисуется. Ну, в общем, ну, как-то так. Вот. В общем, основной
[01:03:30.720 --> 01:03:42.720]  посыл то, что в нем очень легко считать, делать модифицирующиеся картинки, которые можно
[01:03:42.720 --> 01:03:49.880]  создать параметрами. Вот. И, ну да, вот этот синтаксис, например, который говорил про проектирование.
[01:03:49.880 --> 01:04:01.280]  Вот. Там вот еще такие вот рисунки. Что-то такое интересное. В общем, я думаю, на этом все про тикс,
[01:04:01.280 --> 01:04:08.400]  но еще небольшой комментарий. Есть pgfplots. Это свойство, это, в общем, такая вещь,
[01:04:08.400 --> 01:04:14.080]  чтобы рисовать графики. И про нее, как бы, в двух словах не скажешь. Потому что, ну, то есть,
[01:04:14.080 --> 01:04:22.240]  это потратить было еще минут 20 нашего времени. Но я думаю, в общем, если вам интересно, можете
[01:04:22.240 --> 01:04:27.160]  погуглить pgfplots. Я там ссылочку тоже в чат скину. В общем, она позволит рисовать именно графики.
[01:04:27.160 --> 01:04:31.880]  И, на самом деле, там тоже, в общем, синтаксис там немного заимствованный. Ну, то есть, немного
[01:04:31.880 --> 01:04:37.120]  схожий с тиксом. И графики получаются очень хорошие. Ну, то есть, очень легко их рисовать,
[01:04:37.120 --> 01:04:43.800]  очень подстраивать. Вот, на самом деле. Вот теперь все, и я передаю слово дальше.
[01:04:43.800 --> 01:04:49.840]  Ну, во-первых, стоит отметить, что мы далеко не сел в множестве тех,
[01:04:49.840 --> 01:04:56.520]  кто смогли покрыть четыре занятия. Поскольку некоторые фишки, которые представляют с
[01:04:56.520 --> 01:05:03.400]  некоторыми пакетами, они при всем там, насколько они хороши и удобные, очень узконаправленные,
[01:05:03.400 --> 01:05:07.080]  решают какую-то конкретную задачу. И если у вас задача не возникнет, то вы, скорее всего,
[01:05:07.080 --> 01:05:12.480]  никогда просто не узнаете об этом пакете. Если так, то зачем про него слушать? Вот. Ну, вот стоит
[01:05:12.480 --> 01:05:17.800]  хотя бы несколько из них упомянуть. Есть такая штука multicoll, чтобы описать, ну, знаете, как журналик
[01:05:17.800 --> 01:05:24.280]  ланта, текст несколько столбцов на одной странице. Там вот все управляется. Есть пакет color, чтобы
[01:05:24.280 --> 01:05:28.920]  всякие RGB-шные цвета подключать в документы. Если вам требуется как-то тонко настроить,
[01:05:28.920 --> 01:05:34.680]  какой у вас будет шрифт, то вот вам сюда. Есть пакет talkloft, который здорово настраивает
[01:05:34.680 --> 01:05:42.920]  содержание. Визуализируется то, как отрисовываются всякие символы перед номерацией секций. Вот все
[01:05:42.920 --> 01:05:47.600]  вот это управляется talkloft. Ну, возможно, опять же есть и лернативы, но это очень хороший вариант.
[01:05:47.600 --> 01:05:54.840]  Есть пакет для написания кода или алгоритмов. Ну, в общем, чего-то при информатике. Есть пакет
[01:05:54.840 --> 01:05:59.800]  listings, который именно что визуализирует всякий код, подчеркнул, не комплинирует, а именно
[01:05:59.800 --> 01:06:04.200]  визуализирует его написание. Возможно, это для ключевые слова. Это может быть полезно,
[01:06:04.200 --> 01:06:09.160]  если вы конспектируете какой-то там курс по языку программирования или там пишете что-то
[01:06:09.160 --> 01:06:15.480]  подобное. И есть пакет algorithm2e. Это штука для написания именно алгоритмов, для их описания
[01:06:15.480 --> 01:06:23.240]  информатического, а не кода. Ну, там такой довольно общий псевдокод, который в общем понятие там
[01:06:23.240 --> 01:06:29.800]  можно посчитать, какие в нем есть поддерживаемые ключевые слова, может создавать свои. Тоже вещь
[01:06:29.800 --> 01:06:36.560]  удобная, сам периодически пользуюсь. И пакет rapfig, которым вообще я планирую рассказать когда-нибудь,
[01:06:36.560 --> 01:06:42.840]  но как-то вот в общем дело не дошло, но эта штука для того, чтобы размещать всякие картинки,
[01:06:42.840 --> 01:06:49.280]  таблицы и прочие плавающие объекты, не там где-то отдаленное текст в своем окружении,
[01:06:49.280 --> 01:06:54.080]  типа центр или чего-то еще. А прям посреди текста я задаю конкретные правила обтекания,
[01:06:54.080 --> 01:06:59.920]  слева-справа, на нужном расстоянии, ну, примерно как в Word, но по-человечески,
[01:06:59.920 --> 01:07:06.480]  чтобы ничего не ломалось. Не необходимости не возникало, но вообще говоря, возникнуть можно.
[01:07:06.480 --> 01:07:12.720]  Ну, и еще стоит отметить, что действительно очень много людей пользуются латехом всегда,
[01:07:12.720 --> 01:07:19.000]  если что-то непонятно, и по крайней мере есть понимание, что именно непонятно, и что именно
[01:07:19.000 --> 01:07:23.240]  стоит гуглить, то скорее всего вы это найдете, даже если это будет какой-то форум с индустрией
[01:07:23.240 --> 01:07:29.080]  2008 года, но он точно будет, если это решение, которое нужно вам на один раз, скорее всего оно
[01:07:29.080 --> 01:07:35.560]  сработает. Не всегда стоит прям внимательно вчитываться в каждую строчку кода, которую вы
[01:07:35.560 --> 01:07:41.320]  копируете, если это какая-то конкретная команда, которая нужна для конкретного вопроса, ну,
[01:07:41.320 --> 01:07:47.640]  в образовательных целях, но вот поэтому не стоит бояться, надо много гуглить, если что-то
[01:07:47.640 --> 01:07:53.240]  не получается, скорее всего что-нибудь найдется. Прям больших книг, в которых было бы все на свете,
[01:07:53.240 --> 01:07:59.400]  по тех, у я, ну, как бы не знаю, есть старые мануалы, которых тоже было бы не актуального написано,
[01:07:59.400 --> 01:08:05.760]  и которые тоже неизбежно скатываются в то, что там обозревают возможности, которые очень редко
[01:08:05.760 --> 01:08:13.000]  кому-то потребоваться, поэтому, мне кажется, тех удобнее изучать, когда у тебя возникает вопрос,
[01:08:13.000 --> 01:08:19.640]  и ты ищешь на него ответ. И, думаю, на этом оправданно закончить. Вот, если вопросов ни у кого
[01:08:19.640 --> 01:08:24.160]  не осталось, хотя, наверное, по этой части вопросов быть не должно было, то предлагаю
[01:08:24.160 --> 01:08:25.600]  на этом закончить. Всем спасибо.
