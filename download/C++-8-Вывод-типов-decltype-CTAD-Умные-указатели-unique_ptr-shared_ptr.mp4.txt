[00:00.000 --> 00:13.440]  Мы сейчас закончим тему вывода типов и перейдем к следующей теме, по которой у вас будет третья задача.
[00:13.440 --> 00:28.000]  Давайте вспомним, на чем мы остановились. Мы остановились на обсуждении того,
[00:28.000 --> 00:39.600]  что такое декл-тайп. В принципе, мы почти все обсудили про декл-тайп, что я хотел, кроме одной такой
[00:39.600 --> 00:51.720]  интересной детали. Вот смотрите, давайте разберем такой пример. Вот представьте, я хочу написать
[00:51.720 --> 01:14.840]  функцию, которая берет какой-то элемент контейнера, которая, скажем так, является оберткой над
[01:14.840 --> 01:24.320]  квадратными скобочками в контейнере. То есть, ну скажем, она логирует что-то и возвращает,
[01:24.320 --> 01:40.800]  ну ссылку на этот элемент скажем. Вот, контейнер, контейнер, там и sizeT-индекс. То есть, как я хочу
[01:40.800 --> 01:51.040]  пользоваться этой функцией? Я хочу говорить, например, std vector int v там от 10 и сказать
[01:51.040 --> 02:02.120]  v.getByIndex, не знаю, 5 присвоить 1. Ну вот так я хочу делать. То есть, это такая обертка над
[02:02.120 --> 02:16.960]  квадратными скобочками, не знаю, std out blah blah blah. И, значит, вот return контейнер с квадратными
[02:16.960 --> 02:22.640]  скобочками индекс. Это пример не я придумал, это пример придумал Скотт Меерс. Ну, вероятно,
[02:22.640 --> 02:28.680]  может, и не он сам лично его придумал. В его книжке есть про эффективность современной C++. Вопрос.
[02:28.680 --> 02:37.360]  Мы умеем, мы вообще умеем так сделать. В смысле, что мы умеем добавить функции к классу, хоть как-нибудь,
[02:37.360 --> 02:45.440]  хоть не шаблонные, какие угодно. Ой, господи, я ерунду написал, конечно. GetByIndex v5. Это я написал чушь
[02:45.440 --> 02:54.760]  какую-то, да. Да-да-да. Вот. А вопрос, какой должен быть возвращаемый тип? Пример из книжки просто,
[02:54.760 --> 03:01.200]  вот. Я сейчас просто хочу вам кое-какую фичу показать, но вот прежде чем я ее покажу,
[03:01.200 --> 03:06.040]  вот давайте ответим на вопрос. Мотивирующий пример. Каким должен быть возвращаемый тип у этой
[03:06.040 --> 03:13.160]  штуки? Ну, тот же, что у квадратных скобочек. То есть желательно можно... Тупой вариант это контейнер
[03:13.160 --> 03:24.840]  2.2.type что-то там. Ну, референс type, да. Умный вариант. Да, умный вариант. Вот, я хочу донести мысль. Да,
[03:24.840 --> 03:33.080]  decal type, вот контейнер, значит, индекс, да. Но я хочу донести мысль, что здесь ни авто нельзя написать,
[03:33.080 --> 03:38.320]  ни автоамперсант нельзя написать. Почему нельзя написать авто? Потому что надо бросить ссылку и
[03:38.320 --> 03:42.640]  тогда никого присваивать не получится. Например, даже для интов-то не будет работать для вектора интов.
[03:42.640 --> 03:49.240]  Почему нельзя написать автоамперсант? Потому что... Почему нельзя написать, кстати, автоамперсант?
[03:49.240 --> 04:00.640]  Пусть он вернул int, а мы ссылку добавим на что. В смысле, пусть он вернул позначение. А почему он
[04:00.640 --> 04:07.240]  мог вернуть позначение? Ну, контейнеры иногда возвращают там int, например, просто в квадратной
[04:07.240 --> 04:30.000]  скобочке. В квадратной скобочке в контейнере. А, нет, не бывает, не бывает. Справедливо. Бывает вектор буль. Ну, да, понятно, но просто не понятно, я не понимаю, да, нет, нет. Все, ну, типа, если это вектор буль, то это не сработает. Ну, потому что у нас, короче, иногда бывает возвращение по ссылке, иногда по значению в квадратной
[04:30.000 --> 04:59.640]  скобочке. Иногда устроено так, что возвращает ссылку, иногда, наш любимый контрпример, вектор буль, они возвращают значение, которому присваивание меняет контейнер. Ну, мы хотим, чтобы он сохранял ссылочность. То есть, чтобы ссылка... Чтобы, короче, возвращаемый тип был ссылкой, если и этот был ссылкой, и не был ссылкой в противном случае. Я мог бы, конечно, писать декл-тайп от контейнера квадратной скобочки индекс. Это было бы правильно, формально, но очень плохо с точки зрения код-стайла, потому что
[04:59.640 --> 05:17.280]  мне пришлось бы повторять мое выражение дважды, и если бы я его чуть поменял, то потом возвращаемый тип у меня мог бы не совпасть, и все плохо. Вот, поэтому в C++14, уже не в 11, а в 14 появилась такая странная языковая конструкция под названием декл-тайп от авто.
[05:17.280 --> 05:45.520]  Хоть на это время большого мозга. Да, вы ее можете видеть иногда в некоторых методах стандартной библиотеки, возвращаемый тип такой. Ну, ладно, не знаю, не уверен, что прямо вы ее можете увидеть на CBP-референс, но, короче, скажем так, кое-где в реализации кое-каких классов в некоторых методах вам она может понадобиться.
[05:45.520 --> 05:59.280]  То есть, вам нужно самостоятельно вывести тип возвращаемого значения, но при этом вывести его по правилам декл-тайпа, а не по правилам авто. То есть, в частности, не отбрасывать ссылку, если она была.
[05:59.280 --> 06:13.440]  То есть, не декл-тайп от выражения, которое вам придется крипастить, если оно там длинное, это плохой код-стайл, а декл-тайп от сам догадайся чего, ну понятно от чего, от вот этого выражения.
[06:13.440 --> 06:26.880]  Ну, значит, это такой способ сказать, выведи тип сам, но по правилам декл-тайп, то есть, в точности повтори тип возвращаемого значения, если он был ссылочным, не отбрасывай ссылку, вот.
[06:26.880 --> 06:37.760]  Ну, и если он был с двумя амперсандами, то, значит, будет два амперсанды, ну и так далее. Вот такая вот странная конструкция, ну вот, иногда пригождается.
[06:37.840 --> 06:41.680]  А какая у нас проблема была из-за того, что мы бит референс по ссылке возвращали?
[06:44.560 --> 07:06.480]  Потому что, если ты присвоишь бит референс, сейчас, ну давай подумаем, вот у тебя создался бит референс, ты вернул ссылку на бит референс, а бит референс, а, ну понятно какая, у тебя временный бит референс же, у тебя битая ссылка просто кажется.
[07:08.480 --> 07:10.480]  Отлично.
[07:10.480 --> 07:34.960]  Потому что, ты, когда обратился по индексу, у тебя создался R-value бит референс, это будет CE даже, я бы сказал, потому что это же R-value, а ты возвращаешь автамперсанд, это будет CE, вот, ну и всё, это не скомпилируется для VectorBuy, а так нормально будет работать.
[07:37.760 --> 07:42.960]  Ну вот, такие дела.
[07:42.960 --> 07:48.400]  А вот эта штука по UAC++14, то есть, по UAC не возможно написать декл-тайп от авто, или что?
[07:48.400 --> 08:00.960]  Ну просто не было такой конструкции, ну декл-тайп, ну это же новоязыковая фича, декл-тайп от типа пишется авто, это что такое? Ну вот такая вот, придумали такой синтезис декл-тайп от авто у UAC++14.
[08:00.960 --> 08:03.360]  То есть, это как бы считается как единая конструкция, да?
[08:03.440 --> 08:18.240]  Ну да, это не подчиняется тем же правилам, что декл-тайп отдельно и авто отдельно, это так не работает, ну понятно, что это новоязыковая фича.
[08:19.120 --> 08:34.080]  Ну ладно, давайте последний пункт отойти, ну или привет последний, давайте теперь поговорим вот ещё про что.
[08:34.960 --> 08:52.960]  Это стало актуально только с C++17, но раз уж у нас тема TypeDeduction, то мне кажется, что уместно прямо здесь поговорить вот про это.
[08:53.840 --> 09:07.840]  Класс TemplateArgumentDeduction, ну сокращённо это обозначается ct.ad, про это есть прям длинная статья на ct.preference,
[09:08.720 --> 09:20.720]  эта штука, которая появилась с C++17, и наверное под неё даже имеет смысл создать отдельный файл, давайте так и сделаем.
[09:26.720 --> 09:34.720]  Что такое класс TemplateArgumentDeduction? Ну смотрите, у нас в принципе, ну вы уже можете догадаться, что это такое,
[09:35.600 --> 09:37.600]  я думаю некоторые из вас и так знают, что это такое.
[09:38.600 --> 09:40.600]  Вектор от авто?
[09:41.600 --> 09:45.600]  Да не вектор от авто, просто вектор, а компилятор сам догадается от чего.
[09:48.600 --> 10:00.600]  Ну то есть, вот у вас есть, скажем, у вас есть отличный механизм вывода типов.
[10:01.480 --> 10:09.480]  Вы уже умеете выводить типы возвращаемых значений функций, типы параметров функций, когда они шаблонные,
[10:11.480 --> 10:17.480]  типы переменных, когда инициализируете переменные, и вы можете даже выводить автоматические типы шаблонных параметров функций,
[10:18.480 --> 10:25.480]  то есть когда вы вызываете f от чего-то, а f шаблонная, вы же не пишете явно шаблонный аргумент, они сами выводятся.
[10:26.360 --> 10:35.360]  Но в C++17 люди подумали, а зачем нам писать явно шаблонные аргументы класса, если можно то же самое сделать,
[10:36.360 --> 10:43.360]  можно же шаблонные аргументы класса тоже выводить автоматически, если это получается сделать однозначно.
[10:44.360 --> 10:49.360]  Но когда это получается сделать однозначно, ну например, вот когда вы объявляете какую-нибудь пару,
[10:50.240 --> 10:59.240]  вот уж точно, когда вы объявляете пару, я не знаю, 1.0, запятая abc, ну тут, конечно, без abc, вот 1.0, запятая 1.
[11:00.240 --> 11:09.240]  Вот понятно, что однозначно ясно, из каких аргументов пара состоит.
[11:10.240 --> 11:13.240]  Сейчас, правда, я немножечко не уверен, что это скомпилируется.
[11:14.120 --> 11:20.120]  Так, ну давайте сначала попробуем без слага C++17, это не скомпилироваться, это не должно скомпилироваться, да.
[11:21.120 --> 11:30.120]  Missing template arguments before p, это понятно, а вот если минус abc++17, то это компилируется, да, все нормально.
[11:32.120 --> 11:41.120]  Начиная с C++17, значит, комплятор умеет, если у него однозначно получается догадаться из параметров конструктора,
[11:42.000 --> 11:45.000]  какие шаблоны аргумента к классу надо подставить, то он это подставляет.
[11:46.000 --> 11:50.000]  То есть вам, в частности, вам не надо, когда вы объявляете пару, говорить пара из чего.
[11:51.000 --> 11:55.000]  Вы еще, не дай бог, ошибетесь и не точно скажете из чего, а тут он сам догадается из чего она.
[11:57.000 --> 12:00.000]  Ну вот, давайте попробуем с вектором так сделать.
[12:05.000 --> 12:10.000]  Кстати, почему пара добавилась, заинклудилась, если меня только его стрим подключит, интересно, ну ладно.
[12:10.880 --> 12:12.880]  Вот давайте я сделаю вектор.
[12:15.880 --> 12:17.880]  А вектор так можно инициализировать?
[12:20.880 --> 12:25.880]  Конечно, конечно можно, уже давным-давно, уже 10 лет как, с C++11?
[12:26.880 --> 12:27.880]  Ладно.
[12:28.880 --> 12:30.880]  Ну с 11-го года initializer list это называется.
[12:31.760 --> 12:36.760]  Это обычная работа, когда у вас, типа, переменные конкретные там определенные.
[12:37.760 --> 12:40.760]  Сейчас, я в нем почему-то для пары работаю, почему-то для вектора пока не понимаю.
[12:41.760 --> 12:42.760]  Ну ладно, работает, работает.
[12:43.760 --> 12:46.760]  Нет-нет-нет, у вас есть тип std и initializer list.
[12:47.760 --> 12:50.760]  Я про это не говорил, что ли, в первом семестре, может быть и забыл сказать.
[12:51.760 --> 12:52.760]  Что-то про него говорили.
[12:53.760 --> 12:56.760]  У вас есть такой тип std и initializer list, который появился с C++11.
[12:57.640 --> 13:02.640]  И он привел к тому, что вы можете в фигурных скобочках перечислять длинные списки,
[13:03.640 --> 13:05.640]  в частности вы можете вектор вот так инициализировать.
[13:06.640 --> 13:08.640]  То есть initializer list это такой встроенный тип,
[13:09.640 --> 13:11.640]  который, ну он непонятно как реализован,
[13:12.640 --> 13:14.640]  его как-то компилятор реализует, его самим не реализовать.
[13:15.640 --> 13:22.640]  Но он, когда вы конструируете контейнер от чего-то в фигурных скобочках,
[13:23.640 --> 13:24.640]  через запятую,
[13:25.520 --> 13:30.520]  он в первую очередь проверяет, нельзя ли это подставить как initializer list,
[13:31.520 --> 13:32.520]  конструктор от initializer lista.
[13:33.520 --> 13:38.520]  И если можно, если у вас в списке все перемены одного и того же типа,
[13:39.520 --> 13:44.520]  то он просто выберет конструктор лучше от initializer list и сумеет,
[13:45.520 --> 13:50.520]  ну и поймет, что это вот оно, вы просто элементы вектора хотите этим пронициализировать.
[13:51.400 --> 13:54.400]  Ну вот это работает начиная с целью 11.
[13:55.400 --> 13:58.400]  Правда ли, что пара тоже инициализируется от initializer list?
[13:59.400 --> 14:01.400]  Нет, пара инициализируется не от initializer lista сейчас,
[14:02.400 --> 14:04.400]  пара инициализируется агрегатной инициализацией, разные вещи.
[14:05.400 --> 14:06.400]  А, ну...
[14:09.400 --> 14:11.400]  Меня именно это спутало, просто обычно я пишу,
[14:12.400 --> 14:14.400]  в равно initializer list, то есть равно фигурной скобочке,
[14:15.400 --> 14:17.400]  так можно, я офигел, но без проблем.
[14:18.400 --> 14:20.400]  А, вот так ты имеешь ввиду?
[14:21.400 --> 14:23.400]  Не-не-не, так оно...
[14:24.400 --> 14:27.400]  А, тебя смутило именно то, что ты, то, что я равно не написал?
[14:28.400 --> 14:31.400]  Ну да, ну так тоже можно, ну да.
[14:32.400 --> 14:36.400]  Ну так вот, теперь я хочу убрать int.
[14:37.400 --> 14:39.400]  Да, давайте проверим, что я вас не обманул.
[14:40.400 --> 14:42.400]  v.size, сейчас должно быть 5.
[14:43.400 --> 14:45.400]  В принципе, если не 5, то...
[14:46.400 --> 14:48.400]  Ой, я себе 17 скомпилировал.
[14:49.280 --> 14:51.280]  А, да, теперь...
[14:55.280 --> 14:57.280]  Ну ладно, это мы закомментируем.
[15:00.280 --> 15:02.280]  Ну да, 5, все нормально.
[15:03.280 --> 15:05.280]  Вот, а теперь я уберу int.
[15:08.280 --> 15:09.280]  Черт возьми.
[15:10.280 --> 15:14.280]  Я уберу int и посмотрим, как это работает, себе 17.
[15:15.160 --> 15:17.160]  Вот, не работает.
[15:18.160 --> 15:22.160]  Но если я добавлю c+, 17, работает и размер 500.
[15:25.160 --> 15:27.160]  Вот, такие дела.
[15:31.160 --> 15:33.160]  А можно...
[15:34.160 --> 15:36.160]  Насчет пары, применимость.
[15:37.160 --> 15:40.160]  Ну то есть, мы получается балансируем между тем, чтобы не ошибиться,
[15:41.160 --> 15:43.160]  и тем, что код менее читабельный.
[15:44.040 --> 15:48.040]  Точно ли, Анатолий, стоит, что мы не ошибемся в двух чиселках?
[15:49.040 --> 15:55.040]  Ну, в целом, вопрос достаточно справедливый.
[15:56.040 --> 16:03.040]  И надо сказать, что там в комитете кое о чем пожалели c+, 20,
[16:04.040 --> 16:06.040]  когда поняли, что они натворили,
[16:07.040 --> 16:09.040]  с этими initializer-листами и выводом шаблонных параметров.
[16:09.920 --> 16:14.920]  В общем, приколов достаточно много возникает в связи с этим,
[16:15.920 --> 16:17.920]  но я не буду их все перечислять, потому что я многие из них не помню,
[16:18.920 --> 16:20.920]  но про некоторые из них написано в книжке Мейерса,
[16:21.920 --> 16:27.920]  про некоторые из них там я сам слушал на лекциях от некоторых там,
[16:28.920 --> 16:30.920]  значит, членов комитета.
[16:31.920 --> 16:35.920]  Ну вот, если вкратце, то у этого много неожиданных побочных эффектов.
[16:36.800 --> 16:38.800]  В большинстве случаев это работает как ожидается,
[16:39.800 --> 16:41.800]  ну, например, в таких случаях,
[16:42.800 --> 16:44.800]  но в некоторых это работает странно.
[16:45.800 --> 16:47.800]  Ну, например, давайте вот такой вопрос зададим,
[16:48.800 --> 16:52.800]  что если я решу создать вектор,
[16:53.800 --> 17:03.800]  вот, смотрите, у меня есть вектор от пяти интов,
[17:04.680 --> 17:06.680]  вот я его создал,
[17:09.680 --> 17:12.680]  но я же могу создать вектор, вообще, у меня есть такой конструктор,
[17:13.680 --> 17:15.680]  от...
[17:18.680 --> 17:22.680]  А, да, еще нужно важный момент сказать,
[17:23.680 --> 17:25.680]  в C++11 вообще такая мода пошла,
[17:26.680 --> 17:29.680]  фигурные скобки вообще предпочтительно использовать перед круглыми,
[17:30.560 --> 17:33.560]  то есть, когда вы инициализируете что-то,
[17:34.560 --> 17:37.560]  когда вы пишете там, объявляете объект класса,
[17:38.560 --> 17:42.560]  то фигурные скобки предпочтительнее, чем круглые.
[17:43.560 --> 17:45.560]  Почему? Потому что круглые лишают вас возможности
[17:46.560 --> 17:48.560]  попасть в конструктор и нишалайзер листа,
[17:49.560 --> 17:53.560]  а фигурные, типа, они, если найдется нишалайзер лист от таких параметров,
[17:54.560 --> 17:57.560]  то, значит, вы попадете в него,
[17:58.440 --> 18:01.440]  а если не найдется, то он просто аналог круглых сделает.
[18:02.440 --> 18:07.440]  Ну, в частности, я могу написать vv от пяти запятая там шести,
[18:08.440 --> 18:11.440]  ну, тут, ну, хорошо, тут я, конечно, непонятно, что сказал,
[18:12.440 --> 18:14.440]  но вот я могу так сделать,
[18:15.440 --> 18:17.440]  это будет означать, что я создал вектор из пяти интов,
[18:18.440 --> 18:20.440]  каждый из которых равен шести.
[18:21.440 --> 18:23.440]  Нет, я не уверен, что это равно,
[18:24.440 --> 18:26.440]  я уже не уверен, что это равно,
[18:26.440 --> 18:28.440]  это не то, наверное, это все-таки вектор из двух интов.
[18:29.440 --> 18:33.440]  Нет, все правильно, это вектор из пяти интов, кажется, который равен шести.
[18:34.440 --> 18:36.440]  Вы не тот сайс выявили.
[18:37.440 --> 18:41.440]  А, да, тогда я все-таки думал, что это вектор из двух интов.
[18:42.440 --> 18:44.440]  Ну да.
[18:45.440 --> 18:49.440]  Потому что конструктор и нишалайзер листа предпочтительнее,
[18:50.440 --> 18:53.440]  вот если бы я так написал, то это было бы по-другому.
[18:57.440 --> 18:59.440]  Так о чем мораль в итоге не очень понятна?
[19:00.440 --> 19:02.440]  Пока морали нет, сейчас будет, подождите.
[19:05.440 --> 19:07.440]  Ну вот,
[19:08.440 --> 19:10.440]  сейчас будет мораль, почему
[19:11.440 --> 19:14.440]  иногда это приводит к странным последствиям.
[19:15.440 --> 19:17.440]  Вот смотрите, я стираю
[19:22.440 --> 19:24.440]  шаблонный параметр,
[19:24.440 --> 19:26.440]  и меняю скобочки на фигурный.
[19:27.440 --> 19:30.440]  Вот раньше у меня была возможность сделать вот так.
[19:36.440 --> 19:38.440]  Ну, я могу создать вектор
[19:39.440 --> 19:41.440]  от двух итераторов.
[19:42.440 --> 19:45.440]  Ну, я могу создать вектор от диапазона, правда?
[19:46.440 --> 19:48.440]  То есть это будет что?
[19:49.440 --> 19:51.440]  А теперь вы сделаете вектор из двух итераторов?
[19:51.440 --> 19:54.440]  Вот если бы я так написал,
[19:55.440 --> 19:58.440]  то это был бы вектор размера 5 из 5 интов,
[19:59.440 --> 20:01.440]  он просто скопировал диапазон.
[20:02.440 --> 20:04.440]  Но если я сейчас сотру
[20:05.440 --> 20:07.440]  параметр шаблонный,
[20:11.440 --> 20:13.440]  ну, все еще нормально,
[20:14.440 --> 20:16.440]  потому что он однозначно понял,
[20:17.440 --> 20:19.440]  что если я создал соц. итераторов, то он понял.
[20:19.440 --> 20:21.440]  Ну, короче, если я буду использовать круглые скобочки,
[20:22.440 --> 20:24.440]  то это еще нормально.
[20:25.440 --> 20:27.440]  А если я буду, как мне завещали там,
[20:28.440 --> 20:30.440]  с 11 использовать фигурные скобочки по максимуму,
[20:31.440 --> 20:33.440]  то это приведет к тому,
[20:34.440 --> 20:37.440]  что у меня будет вектор из двух элементов.
[20:38.440 --> 20:40.440]  И что это будет за элемент?
[20:41.440 --> 20:43.440]  Это будет вектор не из интов,
[20:44.440 --> 20:46.440]  а из итераторов на вектор от интов.
[20:46.440 --> 20:49.440]  Второй вектор, он не от инт, а от std-вектор-инт-итератор.
[20:50.440 --> 20:52.440]  А почему тогда фигурных скобочей удобнее круглых,
[20:53.440 --> 20:55.440]  если они такой дичьей сделают?
[20:56.440 --> 20:58.440]  Вот, и начиная с C++20,
[20:59.440 --> 21:01.440]  в комитете передумали и сказали нет,
[21:02.440 --> 21:04.440]  все-таки используйте круглые предпочтительнее, чем фигурные.
[21:05.440 --> 21:09.440]  Ну, то есть, я уже не помню всю хронологию истории,
[21:10.440 --> 21:12.440]  но помню, что, в общем,
[21:13.440 --> 21:15.440]  я уже забыл причины,
[21:16.440 --> 21:18.440]  но про это в книжке MERS написано,
[21:19.440 --> 21:22.440]  вот, эффективность элемента C++ нам тоже пропагандирует фигурные скобочки.
[21:23.440 --> 21:26.440]  Вот, но в C++20 все переосмыслили и сказали нет,
[21:27.440 --> 21:29.440]  все-таки эти круглые, потому что с фигурными вот такая дичь иногда происходит,
[21:30.440 --> 21:32.440]  и там еще несколько примеров дичи есть, но я их тоже забыл.
[21:33.440 --> 21:35.440]  Короче, надо быть аккуратными.
[21:36.440 --> 21:40.440]  Вот, поведение иногда бывает необычным.
[21:41.440 --> 21:44.440]  Вот, но о чем я хотел рассказать?
[21:44.440 --> 21:50.440]  Я хотел рассказать еще о user-defined deduction rules.
[21:51.440 --> 21:55.440]  Смотрите, C++17 в связи с этим
[22:02.440 --> 22:07.440]  позволяет вам для своих классов определить
[22:08.440 --> 22:13.440]  правила вывода типов, кастомные, по своему желанию.
[22:14.440 --> 22:18.440]  Ну, то есть, представьте, что у меня был бы
[22:21.440 --> 22:24.440]  какой-нибудь мой вектор.
[22:25.440 --> 22:31.440]  Ну, с моим вектором, конечно, тут не очень хорошо, но
[22:31.440 --> 22:35.440]  что-нибудь бытовое вам привести пример, чтобы было покороче.
[22:36.440 --> 22:41.440]  А не буду приводить пример, просто открою страницу референс, и там пример привезем.
[22:44.440 --> 22:52.440]  В общем, вы можете определить для своих классов свои собственные правила вывода.
[22:53.440 --> 22:55.440]  Значит, вот эта страница про class template argument deduction,
[22:56.440 --> 22:58.440]  вы видите ее размер,
[22:58.440 --> 23:03.440]  она достаточно внушительная по объему, и тут в C++20 еще ничего появилось, добавилось.
[23:04.440 --> 23:07.440]  Вот, то есть, вот как работает этот вывод типов для шаблонов классов,
[23:08.440 --> 23:11.440]  и вот, что добавилось в эти правила, значит, в C++20.
[23:12.440 --> 23:21.440]  Вот, но вот как выглядит кастомное правило для user-defined deduction guides.
[23:22.440 --> 23:24.440]  Смотрите, вот у меня есть контейнер,
[23:24.440 --> 23:27.440]  ну, вот, собственно, тот самый пример, у меня есть контейнер от T,
[23:28.440 --> 23:31.440]  и его можно конструировать, значит, от T, а еще можно конструить от пара итераторов.
[23:34.440 --> 23:37.440]  Ну, контейнер от T, а конструировать его можно от пары итераторов.
[23:38.440 --> 23:44.440]  Тогда я беру и говорю, давайте-ка я добавлю свой собственный deduction guide.
[23:45.440 --> 23:49.440]  Я говорю, что если для некоторого шаблона классов, например,
[23:49.440 --> 23:54.440]  дедакшн гайд, я говорю, что если для некоторого шаблонного типа итер,
[23:55.440 --> 23:58.440]  мой контейнер конструирует от пары таких вещей,
[23:59.440 --> 24:03.440]  то это должно, вот такой вот синтез, стрелочка,
[24:04.440 --> 24:08.440]  интерпретироваться, как если бы контейнер конструировались шаблонным параметром вот таким.
[24:12.440 --> 24:15.440]  Ну, то есть, я просто явно прописываю дедакшн гайд для шаблона.
[24:15.440 --> 24:19.440]  То есть мы по сути этой конструкции явно указываем возвращаемый тип для такой функции.
[24:20.440 --> 24:22.440]  Для конструктора, например, да?
[24:24.440 --> 24:27.440]  Ну, нет, конструкторы остаются как были конструкторами.
[24:28.440 --> 24:31.440]  Вы можете, для произвольного T, это отдельно от класса пишется,
[24:32.440 --> 24:37.440]  я говорю, для произвольного типа итер, если мой контейнер конструируется от двух вещей такого типа,
[24:38.440 --> 24:41.440]  то это понимается как контейнер вот с таким шаблонным параметром.
[24:41.440 --> 24:44.440]  Потому что автоматический компилятор бы выявил непонятно, какой шаблонный параметр,
[24:45.440 --> 24:48.440]  а я явно ему сказал, какой, надо вывести, если его от такого сконструировали.
[24:49.440 --> 24:54.440]  Ну и вот, компилятор будет следовать этому правилу переопределить стрелочку,
[24:55.440 --> 24:57.440]  может, в смысле, переопределить стрелочку.
[24:59.440 --> 25:05.440]  Это не оператор-стрелочка, это синтаксис такой, просто кастом дедакшн гайд.
[25:05.440 --> 25:07.440]  Нет никакого оператора, тут нет никакого выражения,
[25:08.440 --> 25:11.440]  это просто такая дополнительная, дополнительная синтаксическая конструкция,
[25:12.440 --> 25:18.440]  введенная в язык, кастомный гайд, как выводить типы.
[25:19.440 --> 25:26.440]  Вот, ну, ну в общем, это всё.
[25:26.440 --> 25:30.440]  Тут много ещё интересных примеров, кому хочется разобраться, почитайте,
[25:31.440 --> 25:34.440]  но мне кажется, что я не буду дальше на этом задерживаться, в общем.
[25:35.440 --> 25:42.440]  Проблема, они себе создали массу, и нам тоже, ну, и веселье тоже.
[25:43.440 --> 25:44.440]  Ещё какие там...
[25:45.440 --> 25:47.440]  Ну, в общем, это всё.
[25:47.440 --> 25:54.440]  Проблема, они себе создали массу, и нам тоже, ну, и веселье тоже.
[25:55.440 --> 25:58.440]  Ещё какие там, какие там правила вывода работают, в каком случае,
[25:59.440 --> 26:05.440]  мы с этим ещё когда-нибудь огребём тоже, наверное.
[26:06.440 --> 26:07.440]  Вот.
[26:11.440 --> 26:16.440]  Ну и последнее, о чём я хотел рассказать в этом пункте, в этой главе, точнее,
[26:17.440 --> 26:19.440]  в этой теме, это...
[26:23.440 --> 26:25.440]  Ну, давайте я назову это пунктом 11.4.
[26:35.440 --> 26:36.440]  Так, сейчас, минуточку.
[26:36.440 --> 26:38.440]  Господи, я забыл, как это называется по-английски.
[26:46.440 --> 26:47.440]  А-а-а!
[26:50.440 --> 26:51.440]  Вот это...
[26:53.440 --> 26:54.440]  Вот это прикол.
[26:57.440 --> 26:58.440]  А-а-а!
[27:00.440 --> 27:01.440]  Вот это...
[27:03.440 --> 27:04.440]  Вот это прикол.
[27:07.440 --> 27:08.440]  Сейчас.
[27:13.440 --> 27:14.440]  А-а-а!
[27:14.440 --> 27:15.440]  Господи!
[27:37.440 --> 27:38.440]  Да, вот как это называется.
[27:38.440 --> 27:40.440]  Называется structured binding.
[27:43.440 --> 27:45.440]  Так, хорошо, давайте...
[27:46.440 --> 27:47.440]  покажу.
[27:53.440 --> 27:56.440]  Ну, давайте сначала пример просто покажу, простой.
[27:56.440 --> 27:58.440]  Значит, structured binding.
[27:58.440 --> 27:59.440]  Binding.
[27:59.440 --> 28:00.440]  Структурд байдинг.
[28:01.440 --> 28:02.440]  Байндинг.
[28:05.440 --> 28:07.440]  Тоже начинается и плюс 17 они появились.
[28:08.440 --> 28:09.440]  А кто знает, что это такое?
[28:11.440 --> 28:13.440]  Что такое structured bindings?
[28:13.440 --> 28:15.440]  Перевода на русский я вообще не знаю, но вот...
[28:16.440 --> 28:18.440]  Я и по-английски забываю, как это называется.
[28:20.440 --> 28:21.440]  Никто не знает?
[28:21.440 --> 28:24.440]  Может, в одну строчку много присваиваний сделать можно?
[28:26.440 --> 28:28.440]  Ну, типа...
[28:28.440 --> 28:30.440]  Ну, нет, ну...
[28:32.440 --> 28:34.440]  Мне даже интересно, кто-нибудь из вас пользовался таким когда-нибудь или нет.
[28:34.440 --> 28:36.440]  Ну, хорошо, сейчас вам покажу.
[28:37.440 --> 28:39.440]  Вот у меня есть мэп.
[28:59.440 --> 29:01.440]  Вот я хочу обойти мэп.
[29:02.440 --> 29:08.440]  Вот как совсем модно по современному написать для каждого элемента мэпы.
[29:09.440 --> 29:11.440]  Ну, мы понимаем, что можно написать вот так, да.
[29:14.440 --> 29:15.440]  И что-то сделать.
[29:16.440 --> 29:19.440]  Но C++17 позволяет нам написать еще круче.
[29:20.440 --> 29:22.440]  Можно написать вот так.
[29:29.440 --> 29:31.440]  А, ну да, есть такое.
[29:31.440 --> 29:34.440]  Разве что не все компиляторы это поддерживают вроде до сих пор.
[29:35.440 --> 29:36.440]  Да ладно, а какой не поддерживает?
[29:36.440 --> 29:39.440]  Это уж очень давно есть, чтоб не поддерживали.
[29:40.440 --> 29:41.440]  Вот, ну...
[29:42.440 --> 29:44.440]  Я точно знаю, что в EJUDGE так нельзя писать.
[29:45.440 --> 29:49.440]  Я не знаю, каким там компиляторам пользоваться, надумаю я C++17.
[29:50.440 --> 29:53.440]  Что странно, казалось бы, должно уже поддерживаться.
[29:54.440 --> 29:56.440]  Ну, в общем, да, вот это так работает.
[29:56.440 --> 29:58.440]  Это называется structured bindings.
[29:59.440 --> 30:00.440]  Вот.
[30:01.440 --> 30:13.440]  Ну, опять же, есть целая длинная статья про то, как это работает.
[30:14.440 --> 30:20.440]  Про то, как, для каких типов это, значит, определено.
[30:21.440 --> 30:25.440]  Ну вот, вы можете это делать для массива, во-первых.
[30:26.440 --> 30:30.440]  То есть вы можете таким образом инициализировать.
[30:31.440 --> 30:35.440]  Если у вас есть массив из нескольких элементов, то вы можете сказать авто.
[30:36.440 --> 30:39.440]  И вот такая штука, и каждый из них будет, соответственно, равен, соответственно, массиву.
[30:40.440 --> 30:44.440]  Дальше вы можете байнить tuple-like type.
[30:45.440 --> 30:47.440]  Что такое tuple-like type?
[30:48.440 --> 30:53.440]  Это тип, ну, к нему пара тоже относится.
[30:53.440 --> 30:56.440]  А, нет, наверное, к нему пара не относится, виноват.
[30:57.440 --> 30:59.440]  Пара относится к третьему случаю.
[31:00.440 --> 31:01.440]  Это когда у вас просто aggregate type.
[31:02.440 --> 31:04.440]  То есть когда у вас просто поля это...
[31:05.440 --> 31:11.440]  Ну, короче, когда у вас просто агрегат, как пара, то получается, что вы просто...
[31:12.440 --> 31:18.440]  Каждые перемены, соответственно, инициализируются соответствующим полем с этого класса.
[31:19.440 --> 31:20.440]  Вот.
[31:20.440 --> 31:27.440]  Ну а tuple-like type – это тип, который ведет себя как tuple, штука tuple, но это как пара только из нескольких элементов.
[31:28.440 --> 31:37.440]  Значит, чтобы это работало, у вас должно быть, чтобы std tuple-size от вашего типа был корректным выражением.
[31:38.440 --> 31:46.440]  И чтобы еще tuple-element, такая метафункция от вашего, значит, по индексу E от вашего типа,
[31:46.440 --> 31:47.440]  type был определен.
[31:48.440 --> 31:56.440]  Вот если это так, и если у вас ваш тип таков, что он это поддерживает, то, значит, это будет работать.
[31:57.440 --> 31:59.440]  Ну, в частности, это будет работать для std tuple.
[32:01.440 --> 32:04.440]  std tuple – это просто кортеж из нескольких элементов.
[32:05.440 --> 32:06.440]  Это, по сути, такое обобщение пары.
[32:07.440 --> 32:09.440]  Ну, вот как раз у вас есть такой коррект.
[32:09.440 --> 32:12.440]  std tuple – это просто кортеж из нескольких элементов.
[32:13.440 --> 32:14.440]  Это, по сути, такое обобщение пары.
[32:15.440 --> 32:18.440]  Ну вот как раз это та задача, которая у вас не будет.
[32:19.440 --> 32:23.440]  Но я думаю, что мы с вами на какой-нибудь паре обсудим реализацию std tuple,
[32:24.440 --> 32:29.440]  просто потому что у нас теперь будет на это время,
[32:30.440 --> 32:34.440]  и реализовывать вам самим это, наверное, будет не надо, но мы поговорим о том, как он реализован.
[32:35.440 --> 32:37.440]  Там некоторая шаблонная магия происходит.
[32:38.440 --> 32:40.440]  Можно на код обратно на секундочку?
[32:41.440 --> 32:43.440]  Куда? А, окей, сейчас.
[32:50.440 --> 32:55.440]  Я правильно понимаю, что авто здесь имеет не совсем тот же самый смысл, что обычно?
[32:56.440 --> 32:58.440]  Или это реально какой-то тип данных теперь?
[32:58.440 --> 33:01.440]  Ну как? Здесь авто ни во что не разворачивается.
[33:02.440 --> 33:03.440]  Я могу здесь не написать авто?
[33:04.440 --> 33:07.440]  Просто вот что-то сделать так, чтобы не избежать слова авто?
[33:08.440 --> 33:10.440]  По-моему, нет, но я не знаю способа.
[33:11.440 --> 33:12.440]  Хорошо.
[33:13.440 --> 33:18.440]  Ну, здесь важно написал ли я просто авто или конста автоамперсант, или просто автоамперсант.
[33:19.440 --> 33:22.440]  То есть понятно, что смысл вот от того, что я написал,
[33:22.440 --> 33:24.440]  авто, автоамперсант или конста автоамперсант, смысл будет разным.
[33:25.440 --> 33:31.440]  Я по-прежнему либо получу копию, либо ссылку, либо константную ссылку на каждые из вещей.
[33:32.440 --> 33:35.440]  Да, это непонятно, как это сработает, в смысле, что это значит.
[33:36.440 --> 33:41.440]  Обычно, если дальше идет элемент, то есть, ну там, буквально P по M, где P это там пара,
[33:42.440 --> 33:46.440]  то понятно, что такое константная ссылка на константную ссылку.
[33:46.440 --> 33:50.440]  Ну, на каждый из элементов, ну как, я фактически объявил константную ссылку на первое поле,
[33:51.440 --> 33:53.440]  константную ссылку на второе поле и так далее.
[33:54.440 --> 33:55.440]  Хорошо.
[33:56.440 --> 33:57.440]  Вот.
[33:58.440 --> 34:03.440]  Ну, там, конечно, есть наверняка дофига тонкостей, которые я не знаю, они все перечислены на той странице,
[34:04.440 --> 34:08.440]  которую я показал, но, так скажем, в базовом случае,
[34:08.440 --> 34:11.440]  это вот так работает, я думаю, что здесь не надо подробнее на это восстанавливаться.
[34:12.440 --> 34:13.440]  А можно вопрос?
[34:14.440 --> 34:17.440]  А вот если бы мы написали константный автоэмперсант P, 2.M,
[34:18.440 --> 34:19.440]  ну, то есть, P было бы парой.
[34:20.440 --> 34:21.440]  Да.
[34:22.440 --> 34:23.440]  А у нас не происходило бы копирований?
[34:24.440 --> 34:25.440]  Не происходило бы, да.
[34:26.440 --> 34:27.440]  А почему?
[34:28.440 --> 34:30.440]  Ну, я думаю, потому что у нас не было бы копирований.
[34:31.440 --> 34:33.440]  Ну, я думаю, потому что у нас не было бы копирований.
[34:33.440 --> 34:34.440]  Не происходило бы копирований?
[34:35.440 --> 34:36.440]  Не происходило бы, да.
[34:37.440 --> 34:38.440]  А почему?
[34:42.440 --> 34:43.440]  Ну, как почему?
[34:44.440 --> 34:47.440]  Ну, как я сделал константную ссылку на пару, а откуда копирование должно было произойти?
[34:48.440 --> 34:52.440]  Ну, а как эта пара конструировалась бы?
[34:53.440 --> 34:54.440]  Она никак бы не конструировалась.
[34:55.440 --> 34:57.440]  Я ссылку объявил на пару, а не копил пары.
[34:58.440 --> 35:00.440]  Ну, в мэпе же нет пар.
[35:01.440 --> 35:02.440]  Как это нет? Есть?
[35:04.440 --> 35:05.440]  Ну...
[35:06.440 --> 35:10.440]  Вообще, что такое конс автоэмперсант, что-то, 2.container.
[35:12.440 --> 35:15.440]  Это сокращенная запись для for.
[35:16.440 --> 35:21.440]  auto it равно m.cbegin, it не равно m.cend, plus, plus it.
[35:22.440 --> 35:24.440]  auto p равно звёдочка it.
[35:25.440 --> 35:28.440]  Ну, конс автоэмперсант p равно звёдочка it.
[35:29.440 --> 35:34.440]  Под итератором, разыменованным, лежит пара, на неё ссылка и получается.
[35:38.440 --> 35:39.440]  Понятно.
[35:48.440 --> 35:49.440]  Это я.
[35:50.440 --> 35:51.440]  А я?
[35:52.440 --> 35:54.440]  Это двоеточие, которым я тоже много раз использовался.
[35:54.440 --> 35:58.440]  Например, если я сейчас возьму свой лист и напишу двоеточие.
[35:59.440 --> 36:01.440]  Это же сработает, потому что у меня определённые итераторы.
[36:02.440 --> 36:05.440]  Да, это должно сработать, если у тебя определены методы begin и end
[36:06.440 --> 36:10.440]  с правильными там условиями, которые где-то перечислены.
[36:12.440 --> 36:17.440]  Да, ну, можно по этому поводу тоже запариться и открыть...
[36:25.440 --> 36:33.440]  вот эту страничку на этот раз открыть.
[36:38.440 --> 36:40.440]  В принципе, тоже к теме типов относится.
[36:40.440 --> 36:50.440]  Ну, вот здесь формально объяснено, во что расшифровывается range-based-for.
[36:52.440 --> 36:56.440]  Здесь объяснено, что такое begin-export-end-export.
[36:57.440 --> 37:01.440]  Вот, begin-export-end.
[37:01.440 --> 37:05.440]  Ну, в зависимости от того, что за тип, значит, begin-export – это...
[37:15.440 --> 37:23.440]  Ну, я мельком объяснил, что такое begin-export-end-export.
[37:23.440 --> 37:35.440]  Ну, я мельком увидел в форе using, где-то в самом низу примеров.
[37:40.440 --> 37:42.440]  Using LMT равна decal type...
[37:43.440 --> 37:47.440]  Это кажется C++23. Это ещё мы такого не дошли. Подождите.
[37:47.440 --> 37:55.440]  Это слишком высокий уровень. Подождите, пока мы такого не дошли.
[37:58.440 --> 38:05.440]  Ну, в общем, да, если ваш класс поддерживает соответствующий функционал, то оно развернётся правильно.
[38:08.440 --> 38:16.440]  Всё. Ну, тут можно много ещё всяких фишечек обсуждать, на самом деле.
[38:18.440 --> 38:22.440]  Например, в C++20 появились так называемые...
[38:24.440 --> 38:26.440]  Господи, я тоже забыл, как они называются.
[38:28.440 --> 38:32.440]  Ну, в общем, вы можете теперь начинать C++20.
[38:32.440 --> 38:41.440]  C++20 при...
[38:47.440 --> 38:53.440]  Сейчас. Извините меня. Да, вот. Designed initializers.
[38:56.440 --> 38:58.440]  Я не знаю, как это даже правильно прочитать по-английски.
[38:59.440 --> 39:01.440]  Designed.
[39:02.440 --> 39:07.440]  Designed.
[39:08.440 --> 39:14.440]  Вот вы можете начинать C++20, инициализировать объект свой, явно указывая, какие поля вы инициализируете.
[39:19.440 --> 39:21.440]  Ну, вот про это написано здесь.
[39:22.440 --> 39:28.440]  То есть я могу не просто агрегатную инициализацию использовать, а designed initializers.
[39:28.440 --> 39:31.440]  Я не могу говорить, что это поле равно такому, это поле равно такому.
[39:32.440 --> 39:33.440]  Это немножечко питон-стайл.
[39:34.440 --> 39:36.440]  Мы вот давно мечтали об этом.
[39:37.440 --> 39:40.440]  А почему вы такую, если честно, ключу так подновели?
[39:43.440 --> 39:47.440]  Думаю, потому что у них было много более важных проблем до этого.
[39:50.440 --> 39:52.440]  Какие конструкторы будут вызваны?
[39:53.440 --> 39:55.440]  Никакие. Это будет агрегат. Ну как это? Это...
[39:56.440 --> 39:58.440]  В смысле, это агрегатная инициализация.
[39:59.440 --> 40:02.440]  Она работает, если у вас нету конструкторов.
[40:05.440 --> 40:07.440]  Каждое поле инициализируется по отдельности.
[40:08.440 --> 40:10.440]  Не, ну мы же можем ее вызвать, и когда есть конструктор?
[40:11.440 --> 40:13.440]  Не думаю. Думаю, что нет.
[40:13.440 --> 40:19.440]  Вот, агрегат – это такой тип, что это либо массив, либо класс, в котором нету, в частности, user-deployed constructors.
[40:21.440 --> 40:26.440]  Вот, ну это все синтактические детали.
[40:27.440 --> 40:29.440]  Я думаю, что хватит про это говорить.
[40:30.440 --> 40:32.440]  На самом деле, понятно, что...
[40:32.440 --> 40:34.440]  никакого принципиально нового функционала они не вносят,
[40:35.440 --> 40:37.440]  но это просто такой синтактический сахар, это называется.
[40:38.440 --> 40:45.440]  Или разные детали того, как сделали, чтобы было удобнее писать.
[40:46.440 --> 40:49.440]  Вот, но концептуально тут особо глубокого ничего нет.
[40:50.440 --> 40:51.440]  Просто очень много проблем.
[40:52.440 --> 40:54.440]  Ну, в общем-то, я думаю, что это будет очень интересно.
[40:55.440 --> 40:57.440]  Детали того, как сделали, чтобы было удобнее писать.
[40:58.440 --> 41:01.440]  Вот, но концептуально тут особо глубокого ничего нет.
[41:02.440 --> 41:05.440]  Просто очень много правил, которые пришлось вести в язык в связи с этим,
[41:06.440 --> 41:09.440]  как теперь, что, какая синтактическая запись обозначает.
[41:10.440 --> 41:13.440]  Вот, но я думаю, на этом можно тему завершить.
[41:14.440 --> 41:18.440]  Вот, теперь мы формально умеем пользоваться автодекл-тайпом.
[41:19.440 --> 41:21.440]  Это нам пригодится неоднократно.
[41:21.440 --> 41:27.440]  Но еще можем теперь явно не объявлять, не упоминать шамлонный аргумент класса.
[41:28.440 --> 41:36.440]  Ну, иногда я буду теперь тоже пользоваться и structured-binding-ами,
[41:37.440 --> 41:38.440]  и designed-binding-ами, и shalizer-ами.
[41:39.440 --> 41:41.440]  То есть, просто, чтобы вы не спрашивали, что это такое.
[41:42.440 --> 41:44.440]  В своих примерах буду пользоваться, возможно.
[41:45.440 --> 41:46.440]  Все.
[41:46.440 --> 41:47.440]  Давайте перейдем к следующей теме.
[41:48.440 --> 41:50.440]  Следующая тема гораздо более содержательная,
[41:51.440 --> 41:55.440]  и она у нас тоже займет там, ну, больше одной пары.
[41:56.440 --> 41:57.440]  Она займет у нас, я думаю.
[41:58.440 --> 41:59.440]  И мы к ней еще потом будем возвращаться,
[42:00.440 --> 42:03.440]  и по ней же у вас будет третье задание, называется «Умные указатели».
[42:04.440 --> 42:07.440]  Наша задача понять, как работают умные указатели,
[42:08.440 --> 42:09.440]  как они реализованы.
[42:11.440 --> 42:16.440]  И, конечно, главным образом, как реализован shared-PTR, что он делает.
[42:18.440 --> 42:20.440]  Что такое умные указатели, я надеюсь, вы уже помните.
[42:21.440 --> 42:23.440]  И, конечно, это будет очень интересно.
[42:24.440 --> 42:26.440]  И, конечно, я думаю, что это будет очень интересно.
[42:26.440 --> 42:28.440]  Реализован shared-PTR, что он делает.
[42:30.440 --> 42:32.440]  Что такое умные указатели, я надеюсь, вы уже помните.
[42:33.440 --> 42:35.440]  Мы с ними впервые встречались, когда...
[42:36.440 --> 42:37.440]  Что ж такое?
[42:38.440 --> 42:39.440]  Когда обсуждали исключения.
[42:40.440 --> 42:42.440]  Значит, какая у нас проблема была.
[42:43.440 --> 42:45.440]  Кстати, у меня, возможно, даже сохранился этот файл.
[42:48.440 --> 42:50.440]  Какая была проблема? Вот давайте посмотрим, вспомним.
[42:51.440 --> 42:52.440]  У меня есть...
[42:57.440 --> 42:59.440]  У меня была какая-то функция.
[43:01.440 --> 43:02.440]  Ну вот она, f.
[43:03.440 --> 43:05.440]  И я в ней выделяю какой-то ресурс,
[43:07.440 --> 43:11.440]  а потом выхожу из функции и, возможно, выхожу нештатно.
[43:12.440 --> 43:13.440]  То есть у меня...
[43:14.440 --> 43:15.440]  Я могу нормальным образом из нее выйти,
[43:16.440 --> 43:18.440]  а могу выйти из-за того, что исключение выбросилось.
[43:19.440 --> 43:23.440]  И у меня появляется проблема, что если я выйду из исключения,
[43:23.440 --> 43:27.440]  мне придется вручную дописывать deletePTR в нужное место,
[43:28.440 --> 43:29.440]  а то утечка памяти будет.
[43:30.440 --> 43:33.440]  Да и на самом деле, даже если бы у меня не было проблемы исключений...
[43:39.440 --> 43:40.440]  Господи.
[43:41.440 --> 43:44.440]  Ну то есть с исключениями это уж прям совсем плохо.
[43:45.440 --> 43:47.440]  Но даже без исключений, честно говоря,
[43:48.440 --> 43:51.440]  всякий раз следить за тем, что я написал delete ровно столько раз,
[43:51.440 --> 43:53.440]  сколько написал new и нигде не забыл.
[43:54.440 --> 43:56.440]  И если вдруг у меня просто в нескольких местах return,
[43:57.440 --> 44:00.440]  то я тоже не должен забывать написать delete, прежде чем сделать return.
[44:01.440 --> 44:02.440]  Сделал не только в исключениях.
[44:03.440 --> 44:06.440]  Дело просто в том, что если я выхожу из функции разными путями потенциально,
[44:07.440 --> 44:09.440]  у меня может быть в нескольких местах return написано,
[44:10.440 --> 44:12.440]  то мне получается надо в каждом месте не забыть delete сделать.
[44:13.440 --> 44:14.440]  Но это совсем плохо.
[44:15.440 --> 44:18.440]  Это очень неудобно и, так сказать, error prone это называется,
[44:18.440 --> 44:20.440]  способствует ошибкам в точкам памяти.
[44:21.440 --> 44:24.440]  Умный указатель это просто в базовой версии.
[44:25.440 --> 44:28.440]  Это класс, который конструируется от какого-то ресурса,
[44:29.440 --> 44:33.440]  ну вот типичный самый такой, наверное, распространенный
[44:34.440 --> 44:38.440]  базой примера-то от указателя, и в деструкторе просто делает delete ptr.
[44:39.440 --> 44:42.440]  За счет того, что деструктор локального объекта в любом случае вызывается,
[44:43.440 --> 44:46.440]  когда мы выходим из функции, delete ptr будет сделано в любом случае.
[44:46.440 --> 44:47.440]  Вот.
[44:51.440 --> 44:56.440]  Ну и когда мы это впервые обсуждали, мы говорили о том,
[44:57.440 --> 45:02.440]  что с этим умным указателем очевидная проблема,
[45:03.440 --> 45:05.440]  непонятно, например, как его копировать.
[45:07.440 --> 45:10.440]  Такой указатель там по значению передать в другую функцию –
[45:11.440 --> 45:13.440]  это уже проблема, потому что чтоб из себя предследовать,
[45:13.440 --> 45:14.440]  копирование такого указателя.
[45:15.440 --> 45:17.440]  Это сразу нужно как-то усложнять его конструкцию,
[45:18.440 --> 45:22.440]  нужно либо считать, сколько еще копий существует от этого указателя,
[45:23.440 --> 45:26.440]  что они указывают на то же самое, либо указатель нельзя копировать.
[45:27.440 --> 45:31.440]  А если его нельзя копировать, то тогда его, например, в контейнеры нельзя класть.
[45:32.440 --> 45:33.440]  Ну так было до C++11.
[45:35.440 --> 45:37.440]  Ну а вот теперь, когда мы с вами знаем,
[45:37.440 --> 45:42.440]  му в семантику, то мы можем эту проблему решить легко.
[45:44.440 --> 45:48.440]  И первое, с чего мы начнем разговор про умные указатели,
[45:50.440 --> 45:52.440]  это будет, конечно же, unique ptr.
[45:54.440 --> 45:59.440]  Значит, пункт 12.1 будет называться unique ptr.
[45:59.440 --> 46:03.440]  Мы не понимаем, как копировать его, как этот умный указатель копировать.
[46:04.440 --> 46:06.440]  Если мы хотим его копировать, сразу возникает проблема,
[46:07.440 --> 46:11.440]  надо где-то счетчик вести, сколько еще умных указателей указывают на то же самое.
[46:13.440 --> 46:19.440]  Но, если мы, например, не понимаем, как это сфотографировать,
[46:20.440 --> 46:22.440]  то мы можем как-то указать на то же самое.
[46:22.440 --> 46:34.880]  указано то же самое. Но если мы не хотим копировать умный указатель, мы можем разрешить его перемещать.
[46:34.880 --> 46:43.240]  У нас же move теперь есть. Когда у нас есть move семантика, не обязательно чтобы типы умели
[46:43.240 --> 46:46.840]  копироваться, достаточно чтобы они умели перемещаться, с ними в принципе можно будет нормально
[46:46.840 --> 46:51.000]  работать. Потому что тип, который нельзя ни копировать, ни переместить, это довольно сложный
[46:51.000 --> 46:58.080]  в работе тип, его никуда не передашь нормально, его в контейнер не положишь, в вектор например. А тип,
[46:58.080 --> 47:04.240]  который можно перемещать нормально, и вот Unique PTR это как раз классический прям, канонический
[47:04.240 --> 47:11.760]  пример типа, который move-ать можно, копировать нельзя. Что он на себя представляет? Он на себя
[47:11.760 --> 47:15.600]  представляет минималистичный совершенно смартпойнтер, который делает вот ровно то,
[47:15.600 --> 47:30.440]  что заявлено, значит у него есть шаблонный параметр Unique, шаблонный параметр T, он себя хранит,
[47:30.440 --> 47:37.160]  давайте ладно, я назову его так, как он на самом деле называется, хотя нет, не буду, а то сейчас
[47:37.160 --> 47:45.720]  опять будет какой-то аргумент до плен влука, по чём-нибудь сломается. Ну вот у меня есть сырой
[47:45.720 --> 48:02.200]  сишный указатель в полях, а публично у меня есть конструктор от этого указателя, и я просто заполняю
[48:02.280 --> 48:15.000]  указатель, а диструктор просто делает delete этого PTR. Вот, и что важно, Unique PTR не позволяет
[48:15.000 --> 48:21.160]  себя копировать. Понятно почему копирование это проблема, потому что тогда два указателя будут
[48:21.160 --> 48:26.800]  указать на одно и то же, и когда будут удаляться они, ну получается двойное удаление. Ну вот чтобы
[48:26.800 --> 48:38.160]  такого не было, мы явно запрещаем конструктор копирования и явно запрещаем
[48:38.160 --> 49:01.080]  копирующий оператор присваивания, но зато мы разрешаем муловающий конструктор. Мы говорим,
[49:01.080 --> 49:19.880]  что вот такой конструктор, он просто будет, значит, забирать PTR у того PTR, а тот PTR делать
[49:19.880 --> 49:41.200]  NullPTR. Ну это будет NullXR. Delete NullPTR ни к чему не приводит. Кстати, да, это еще важный,
[49:41.200 --> 49:59.800]  а нет, Free даже от NullPTR ни к чему не приводит. Вот, ну и теперь я уже могу смело писать для краткости
[49:59.800 --> 50:17.960]  авто. Значит, я говорю, что PTR, ну мне надо сделать delete сначала моего PTR, потом сделать PTR равно OtherPTR,
[50:17.960 --> 50:37.040]  OtherPTR равно NullPTR и return this. Ну тут, наверное, опять можно было копить, ой, двойной персент,
[50:37.040 --> 50:44.080]  ну тут, наверное, можно было опять копии and swap какой-нибудь сделать, ну в общем, все понятно. Вот,
[50:44.080 --> 50:56.200]  по сути все. Я тем самым реализовал Unique PTR. Вот это по сути почти вся реализация Unique PTR. Почему
[50:56.200 --> 51:03.480]  почти вся? Ну потому что там еще есть пара полезных методов, такие как Get, это получить
[51:03.480 --> 51:09.080]  сижный pointer, прям сырой. Еще есть метод reset, сбросить, то есть сделать NullPTR,
[51:09.080 --> 51:17.040]  тогда удалится то, что лежит под Unique PTR. Но в принципе все. Если вам нужен минималистичный,
[51:17.040 --> 51:28.200]  с минимумом нынешних расходов Unique PTR, SmartPtr, то вот Unique PTR это ваш выбор. Он появился в
[51:28.200 --> 51:36.480]  стандартной библиотеке C++11, и он является, еще раз повторю, прям каноническим примером класс,
[51:36.480 --> 51:45.680]  который move-ить можно, копировать нельзя. Можно ли создать вектор из Unique PTR-ов и pushback-ить
[51:45.680 --> 51:53.400]  у него, и там этот вектор куда-то передавать потом? Можно, конечно. Только нужно отдавать ему move
[51:53.400 --> 52:03.800]  от этого сразу. Ну да, положить вектор Unique PTR по значению, то есть если у меня есть Unique PTR-U,
[52:03.800 --> 52:20.160]  ну давайте вот я сейчас продемонстрирую что-нибудь. std-vector std Unique PTR Attent
[52:23.400 --> 52:47.240]  v. Вот. Ну и давайте скажу std Unique PTR up равно newint от 5. Я уже не пишу шаблонный параметр,
[52:47.240 --> 52:51.320]  потому что он должен сам вывести для Unique PTR здесь. Назначу, что он должен понять,
[52:51.320 --> 53:00.800]  какой Unique PTR от чего. Ну теперь, если я скажу v.pushback up, это будет, конечно же,
[53:00.800 --> 53:05.800]  ошибка компиляции, потому что... почему? Давайте вопрос в зал.
[53:05.800 --> 53:17.520]  Нельзя скопировать. Всем понятно? Ну да, нельзя. Нужно по rvlu ссылки отдавать. Это как называется?
[53:18.360 --> 53:27.080]  Да, у меня все это было не подключено. Сейчас я подключу. Значит, Unique Pointer у нас находится в
[53:27.080 --> 53:46.840]  memory, а Vector у нас находится в Vector. А зачем тебе Unique PTR подключать? А, потому что ты
[53:47.440 --> 54:07.880]  я ошибся. Он не справился с выводом шаблонного аргумента. Возможно, потому что нужно было вот так
[54:07.880 --> 54:21.240]  сделать. Нет, он все равно не справился. Ну что ж поделать, придется я вам написать int.
[54:21.240 --> 54:33.360]  А нельзя написать Unique PTR up просто от 5? Тогда это объяснить. Нет, нельзя. От указателя нужно.
[54:33.360 --> 54:46.160]  Нужно конструировать Unique PTR от ресурса. Вот это, кстати, очень важный момент. Вот это очень важный
[54:46.160 --> 54:54.120]  вопрос, который вы сейчас задали. Это очень типичная ошибка. Вот уверен, что на экзамене многие
[54:54.120 --> 55:00.040]  люди наложают в этом, когда будут про Unique PTR писать что-нибудь или рассказывать. Нельзя
[55:00.040 --> 55:06.320]  создавать SmartPointer от T, где T сам объект. SmartPointer создается от C-шного Пойнтера.
[55:06.320 --> 55:16.880]  SmartPointer New за вас не сделает. Он только Delete за вас сделает. Но New вы сами должны делать,
[55:16.880 --> 55:22.200]  если хотите создать SmartPointer самостоятельно. Другой вопрос, что есть функция MakeUnique,
[55:22.200 --> 55:28.360]  которая за вас New сделает, но про нее мы чуть позже поговорим. Но конструктор SmartPointer,
[55:28.360 --> 55:34.040]  он принимает уже выделенный ресурс. Он за вас ресурс не выделяет. Задача SmartPointer — только
[55:34.040 --> 55:39.720]  освободить за вас ресурс, не выделить его за вас, только освободить за вас. Поэтому в Unique PTR надо
[55:39.720 --> 55:46.480]  передавать именно уже указатель. Илья, короче, сделай всем то, что хотел. Ты создал вектор SD
[55:46.480 --> 55:54.960]  Unique PTR, а у тебя свой Unique PTR. Я думаю, мы хотели его проверить. Нет, я хотел именно STD Unique PTR вам
[55:54.960 --> 55:59.400]  показать, как работает. Потому что я реализовал Unique PTR не полностью. Я вам показал схему,
[55:59.400 --> 56:03.520]  как примерно он реализован, но, конечно, не написал туда кучу конструкторов, кучу
[56:03.520 --> 56:07.320]  вспугательных функций и так далее. Но основной функционал вот так выглядит. Сейчас вектор от него
[56:07.320 --> 56:15.360]  не получится сделать. Вектор от этой штуки, ну, наверное, получится. Но с точки зрения того,
[56:15.360 --> 56:21.600]  что я вам хочу показать, разницы вроде не должно быть в поведении. А какую кучу конструкторов ты
[56:21.600 --> 56:26.840]  пропустил, я не очень понимаю. Ну, вот все эти те, которые он не смог между которыми выбрать,
[56:26.840 --> 56:40.880]  когда решал, что ему нужно за конструктор вызвать. Ну, у него есть конструктор от устаревшего
[56:40.880 --> 56:51.200]  авто PTR, от другого Unique PTR, от другого типа, от Unique PTR, от Null PTR, от Пойнтера и еще дополнительного
[56:51.200 --> 56:59.560]  параметра, кастомная функция удалитель. Ну, он не смог выбрать, вероятно, между, ну, я так полагаю,
[56:59.560 --> 57:05.520]  он не смог выбрать между вот этим и, допустим, конструктором от Null PTR или конструктором от
[57:05.520 --> 57:13.080]  другого Unique PTR, от другого типа. Ну, в общем, между какими-то двумя он не смог выбрать,
[57:13.080 --> 57:21.800]  он не смог вывести типа из-за этого. Не знаю, почему именно он не смог вывести тип.
[57:21.800 --> 57:30.480]  А, я понял, почему он не смог вывести тип, вероятно, он не смог вывести тип,
[57:30.480 --> 57:38.960]  потому что он конструироваться умеет не только от T звездочки, а от U звездочки. Ну, то есть,
[57:38.960 --> 57:52.560]  на самом деле, у него там вот такой конструктор. Это нужно, например, за тем,
[57:52.560 --> 58:03.600]  что я могу создать указатель на родителя, а подсунуть ему наследника. Вот. Если у меня есть
[58:03.600 --> 58:08.720]  base и derived, я могу создать Unique PTR на base, а подсунуть ему указатель на derived. Ну, то есть,
[58:08.720 --> 58:14.120]  тут понятно, написано что-то типа enable if, бла-бла-бла, ну, или даже этого не написано,
[58:14.120 --> 58:23.120]  просто он CE выдаст, если PTR от того не создается. Вот поэтому он не смог вывести тип, я думаю.
[58:23.120 --> 58:27.920]  Вот я думаю, поэтому, потому что у него он не только от T звездочки непосредственно может
[58:27.920 --> 58:40.960]  создаваться, еще от других, ну, грубо говоря, ну да, между родителем и наследником, как минимум,
[58:40.960 --> 58:49.480]  он может еще создаваться. Ну вот, чтобы в это все не влезать, я хотел на STD Unique PTR показать
[58:49.480 --> 58:55.880]  поведение. Ну вот, на STD Unique PTR сейчас у меня ожидаемое CE, которое я хотел продемонстрировать,
[58:55.880 --> 59:08.160]  что, заметьте, кстати, в каком именно месте произошла CE. Ну, мы хотели forward передать,
[59:08.160 --> 59:16.160]  не получилось. Да, вот смотрите, вы уже теперь должны понимать, что именно сломалось, то есть,
[59:16.160 --> 59:23.480]  вот видите, где произошло CE, в new allocator.h, то есть, на самом деле, в STD-аллокаторе произошел CE,
[59:23.480 --> 59:34.560]  а в каком месте, когда мы в векторе делали, ну, клали в вектор объект, там вызвался вот этот вот
[59:34.560 --> 59:45.120]  оператор new, placement new, вот этого типа от STD forward args a args. Он успешно дошел, то есть,
[59:45.120 --> 59:53.360]  он прошел через allocator trades, allocator, дошел до функции construct, все это по правильной ссылке
[59:53.360 --> 59:59.680]  туда передавалось, и вот там, когда оказалось вот это new от blah-blah-blah Unique PTR, от старого Unique PTR,
[59:59.680 --> 01:00:07.360]  он понял, что это at all value конструктор, а он удален, поэтому нельзя. Какой выход? Нужно
[01:00:07.360 --> 01:00:20.960]  написать sdmove, понятно. Вот, ну можно было так и не делать, а можно было как сделать. Можно было
[01:00:20.960 --> 01:00:27.840]  сказать v.pushback. Pushback что? Ну, если я напишу так, то это будет опять CE, потому что он не
[01:00:27.840 --> 01:00:38.720]  поймет. А, нет, вот так, наверное, он поймет, какой тип. Нет, не понял, какой тип, почему он не понял.
[01:00:50.960 --> 01:01:09.600]  Возможно, потому что Unique PTR explicit конструктор. Да, вот еще какая история, потому что у Unique PTR
[01:01:09.600 --> 01:01:18.120]  вот этот конструктор explicit. Я думаю, потому что, ну, чтоб не происходило неявной конверсии в Unique PTR,
[01:01:18.120 --> 01:01:27.200]  где не надо, если я не прошу Unique PTR сделать. Вот, я думаю, поэтому он сейчас не смог.
[01:01:27.200 --> 01:01:44.720]  Да, это explicit конструктор. Вот, но я могу написать mplaceback.
[01:01:44.720 --> 01:02:01.360]  mplaceback. И вот сейчас должно все получиться. Теперь получилось все. Потому что в случае pushback он
[01:02:01.360 --> 01:02:06.560]  должен был неявно создать ссылку на код stampersound. Из вот этого это неявный вызов конструктора,
[01:02:06.560 --> 01:02:12.720]  а в случае placeback там уже такого нету, там он явно создает, t из нее и 5. Ну все, вот эта
[01:02:12.720 --> 01:02:20.840]  корректная программа, в ней нет ничего, нет утечек памяти. Но я могу спокойно делать вот так,
[01:02:20.840 --> 01:02:32.120]  и говорить в .mplaceback.new.pt. В это время век три будут релокации там в каком-то количестве,
[01:02:32.120 --> 01:02:39.200]  что-то там будет переладываться. Но все это будет корректно работать, потому что просто при
[01:02:39.200 --> 01:02:53.440]  релокации он умывает старый Unique PTR. В конце все они корректно удалятся. Вот, это Unique PTR. Ну прекрасно.
[01:02:55.440 --> 01:03:02.960]  Давайте вот здесь я остановлюсь и спрошу, есть ли вопросы про Unique PTR, все ли с ним понятно,
[01:03:02.960 --> 01:03:16.000]  вот в рамках того, что я рассказал. Да, Unique PTR очень простой. Если вам не нужно, если вы знаете,
[01:03:16.000 --> 01:03:22.560]  что у вас лишь один объект в каждом интервью, лишь один указатель будет указывать на этот объект,
[01:03:22.560 --> 01:03:29.920]  у вас единоличный владелец у этого ресурса, указателя. Мы потом обсудим другие виды ресурсов,
[01:03:29.920 --> 01:03:35.880]  то есть не только указателей, но пока только указатели с new и delete. То Unique PTR это минимум
[01:03:35.880 --> 01:03:42.680]  латинных расходов, очень простой класс, очень базовый просто. Реализовать его это задача на
[01:03:42.680 --> 01:03:54.520]  тройку просто, ну вот в таком виде, как я сейчас написал. Вот, ну хорошо. Теперь мы переходим к
[01:03:54.520 --> 01:04:02.800]  обсуждению того, как устроен класс. Возможно, ну там, после вектора и мэпа какого-нибудь,
[01:04:02.800 --> 01:04:10.720]  возможно, он входит в топ-3 по полезности в C++, ну после стринг еще. Вот, значит,
[01:04:10.720 --> 01:04:17.240]  один из самых нужных и часто используемых реально классов и плюсах современных — это
[01:04:17.240 --> 01:04:26.840]  shared PTR. Вот если вы где-нибудь придете в какую-нибудь компанию, где прод на плюсах написан,
[01:04:26.840 --> 01:04:35.280]  то именно на современных, не на C, которые маскируются под плюсы. Вот если вы придете в
[01:04:35.280 --> 01:04:38.640]  компанию, в которой люди говорят, что пишут на плюсах, хотя на самом деле пишут на C,
[01:04:38.640 --> 01:04:43.040]  то это другое дело. Но если вы придете в компанию, где реально люди на плюсах пишут,
[01:04:43.040 --> 01:04:49.240]  то вы прям вот наверняка увидите либо shared PTR в куче в коде, либо аналогов своих shared PTR.
[01:04:49.240 --> 01:04:59.120]  Shared PTR — это штука, которая прям очень часто используется, очень нужна. И вы будете ей в дальнейшем
[01:04:59.120 --> 01:05:08.200]  тоже, наверное, хотя нет, у нас, наверное, уже таких задач не будет, но вам предстоит его
[01:05:08.200 --> 01:05:17.960]  реализовать еще самим. Это умный указатель с разделяемым владением. То есть это класс,
[01:05:17.960 --> 01:05:24.040]  который менеджит ресурс и следит за тем, сколько еще объектов, сколько еще таких же указателей
[01:05:24.040 --> 01:05:30.360]  на этот же ресурс указывают. Когда они все умирают, ресурс удаляется. Вот. Эта вещь
[01:05:30.360 --> 01:05:38.040]  появилась в C++11 и завоевала просто мировую популярность, потому что с приходом shared PTR
[01:05:38.040 --> 01:05:47.200]  вам уж почти никогда не надо… с приходом shared PTR вам никогда не надо делать delete самому,
[01:05:47.200 --> 01:05:55.360]  а с приходом еще кое-чего, небольшого улучшения, вам и new никогда не надо делать самому. То есть
[01:05:55.480 --> 01:06:01.760]  современные плюсы, они таковые, что в них никогда почти не надо писать new delete
[01:06:01.760 --> 01:06:07.440]  самостоятельно. Вообще никогда не надо писать new delete самостоятельно, даже так скажем. Все,
[01:06:07.440 --> 01:06:13.520]  что я вам говорил до этого, вы жили в мире лжи. То есть мы вас учили пользоваться операторами new
[01:06:13.520 --> 01:06:20.880]  delete, там писать аллокаторы. На самом деле это все был мир лжи. В настоящих плюсах современных
[01:06:20.880 --> 01:06:34.120]  new delete никто не пишет вручную. Все пользуются shared PTR. Вот. Давайте сейчас я попробую
[01:06:34.120 --> 01:06:48.520]  обсудить в базовом варианте, как он устроен. Ну смотрите, значит, пункт 12.2, basic,
[01:06:48.520 --> 01:07:12.960]  давайте скажу, простая версия of shared PTR. Давайте я так скажу, MVP, shared PTR MVP,
[01:07:12.960 --> 01:07:22.680]  minimum valuable product. Минимальная рабочая версия, короче, shared PTR. Сейчас у нас будет.
[01:07:22.680 --> 01:07:35.240]  Ну с shared PTR как с вектором. Мы сейчас его как-то худо-бедно реализуем, а потом мы поймем,
[01:07:35.240 --> 01:07:42.000]  что есть проблема, о которой мы не подумали, исправим ее, потом через некоторое время поймем,
[01:07:42.000 --> 01:07:46.640]  что есть еще проблемы, опять вернемся, опять исправим ее, а потом, в общем, в несколько
[01:07:46.640 --> 01:07:50.600]  итераций будет shared PTR, и в конце концов вам нужно будет написать полноценный уже shared PTR
[01:07:50.600 --> 01:07:57.960]  с настоящим, с решением всех проблем. То есть то, что я сейчас напишу, это будет такой очень-очень
[01:07:57.960 --> 01:08:05.680]  примитивный shared PTR с кучей потенциальных недостатков. В общем, как с вектором,
[01:08:05.680 --> 01:08:12.560]  как с пушбеком, мы будем к нему еще неоднократно возвращаться. Ну для начала, что мы хотим от
[01:08:12.560 --> 01:08:21.280]  shared PTR? Мы хотим, чтобы мы его могли вот так вот заводить. Shared PTR от it, там, P от new int,
[01:08:21.280 --> 01:08:30.960]  от PT. Вот, дальше я говорю, авто PPR равно P. Создалась копия shared PTR. Там, я не знаю,
[01:08:30.960 --> 01:08:40.480]  вот у меня есть какая-то функция F, которая принимает, хочу сказать, авто, но у меня кажется,
[01:08:40.480 --> 01:08:55.200]  нет C++20, поэтому придется написать. Вот, я могу его сюда передать, и тут что-то сделать.
[01:08:55.200 --> 01:09:08.240]  Get, это штука, которая возвращает мне просто сырой point. Вот, я могу, значит, F вызвать от P. Могу
[01:09:08.240 --> 01:09:20.240]  вызвать F от std move, от P. Вот, все это время shared PTR, ну в одном случае он копируется, в другом
[01:09:20.240 --> 01:09:29.040]  случае он move-ается, но все это должно корректно обрабатываться, и лишь в самом конце, когда все
[01:09:29.040 --> 01:09:38.920]  shared PTR на мой объект уничтожились, там я могу написать еще P равно std move, не знаю, PPR равно,
[01:09:38.920 --> 01:09:47.680]  теперь могу сказать, std move от P. У меня сначала в P лежал такой же pointer, как в PP, я его скопировал,
[01:09:47.680 --> 01:09:54.200]  отдал в эту функцию, он там с ним что-то поделался, уничтожился, локальная копия. Потом я move-нул PPR туда,
[01:09:54.200 --> 01:10:02.560]  теперь в PP NALPTR лежит, а в том локальном P что-то лежит. Оно тоже уничтожилось, но у меня еще остался
[01:10:02.560 --> 01:10:11.720]  жить вот этот изначальный P. Теперь я в PP присвоил его, и в P у меня теперь NALPTR, а в PPL лежит тот самый
[01:10:11.720 --> 01:10:17.360]  изначальный PTR, то есть у меня в одном экземпляре теперь храницы, и только когда все это закончилось,
[01:10:17.360 --> 01:10:25.280]  у меня должен вызваться деструктор моего, ну не деструктор, а delete, вот тот самый PTR,
[01:10:25.280 --> 01:10:30.960]  который в самом начале я создал. То есть я в своей программе постоянно туда-сюда отдаю этот
[01:10:30.960 --> 01:10:37.320]  shared PTR, копирую, перемещаю, присваиваю за меня один на другой, все что угодно делаю, и он все
[01:10:37.320 --> 01:10:42.320]  время помнит так, еще кто-нибудь жив, кто указывает на него или нет, как только никто не жив, все он
[01:10:42.320 --> 01:10:50.640]  удаляет. Вот, наша задача сейчас реализовать минимальную рабочую версию этого shared PTR,
[01:10:50.640 --> 01:11:05.720]  ну и, видимо, на этом мы закончим сегодня. Ну давайте подумаем. Класс shared PTR, значит, как
[01:11:05.720 --> 01:11:14.840]  это должно быть устроено, чтобы это работало. Что мы будем хранить в полях? Ну, очевидно,
[01:11:14.840 --> 01:11:25.560]  будем хранить PTR, и вот мой конструктор shared PTR от T звездочки PTR. Ну, я опять же говорю,
[01:11:25.560 --> 01:11:30.720]  что на самом деле он от U звездочки, где U это, возможно, наследник T, ну это вот те самые детали,
[01:11:30.720 --> 01:11:48.880]  которых мы сейчас не будем думать, он еще explicit. Ну вот, вопрос, давайте сразу, это можно считать
[01:11:48.880 --> 01:12:00.160]  упражнение такое, очень хорошее, для вот чисто упражнение по ОП. Как мне организовать это, чтобы
[01:12:00.160 --> 01:12:13.560]  оно нормально копировалось? Ну, то есть понятно, что я сохраняю PTR в полях, ну и, допустим,
[01:12:13.560 --> 01:12:17.920]  пока ничего не делаю. Вот самое интересное начинается, когда я хочу скопировать shared PTR.
[01:12:17.920 --> 01:12:33.520]  Я говорю PTR, other PTR, и тут возникает интересный вопрос, а как мне вот, собственно, поддержать
[01:12:33.520 --> 01:12:39.840]  счетчик-то? Если среди вас кто-нибудь, кто знает, как это реализовано уже, вот кто знает,
[01:12:39.840 --> 01:12:45.200]  там тому не интересно. Кто не знает, я предлагаю прямо вот сесть и подумать, а что сделать надо?
[01:12:45.200 --> 01:12:50.720]  Мне надо как-то уметь считать, сколько еще shared PTR, но то же самое, что и у меня.
[01:12:50.720 --> 01:12:59.240]  Можете создать им звездочка общей, которая будет обновляться с каждым созданием и уничтожением
[01:12:59.240 --> 01:13:09.800]  shared PTR? Да, ну ты слишком умный, так неинтересно. Значит, обычно люди, когда им задышат этот
[01:13:09.800 --> 01:13:18.080]  вопрос, они проходят три стадии. Первый, давайте сначала две неверных идеи, а потом объясню
[01:13:18.080 --> 01:13:26.120]  верную, но у нас сразу верная идея прозвучала. Скорее всего, многим из вас, тут у нас с нами в
[01:13:26.120 --> 01:13:32.600]  основном со мной общаются всего 3-4 человека, вот остальные, если вас когда-нибудь спросит,
[01:13:32.600 --> 01:13:38.600]  как реализовать shared PTR, вам может прийти в голову идея просто им хранить, помимо этой звездочки,
[01:13:38.600 --> 01:13:46.000]  но это не рабочая идея, потому что она еще будет рабочей, пока у вас две всего, пока у вас единственный
[01:13:46.000 --> 01:13:51.520]  shared PTR и вы копируете LDA2, но когда у вас станет их три, вам нужно обновить этот инт у всех
[01:13:51.520 --> 01:13:56.440]  shared PTR, который у вас есть на то же самое, как вы третий достанете, непонятно. То есть хранить
[01:13:56.440 --> 01:14:02.280]  просто инт наряду с Т не рабочая идея. Следующая идея, которая обычно приходит людям в голову,
[01:14:02.280 --> 01:14:11.160]  это сделать статик инт, ну типа общее поле для всех. Это опять не рабочая идея, потому что тогда у
[01:14:11.160 --> 01:14:20.280]  вас будет общий инт на все вообще shared PTR от инт, а не только на shared PTR с таким PTR. Дальше
[01:14:20.280 --> 01:14:24.760]  люди обычно начинают тупить и говорят, ну давайте заведем какой-нибудь глобальную статическую мэпу,
[01:14:24.760 --> 01:14:33.640]  в которую будем пихать, значит, PTR, а значением будет инт, и мы будем, короче, всякий раз обращаться
[01:14:33.640 --> 01:14:39.960]  к этой мэпе, она будет статической, мы будем смотреть типа, что там это для нашего PTR,
[01:14:39.960 --> 01:14:46.160]  какое там сейчас число и так далее, но это понятно. Отличный план, надежный. Да, очень надежный,
[01:14:46.160 --> 01:14:55.720]  отличный план. Это, конечно, ну он даже рабочий, но слишком сложно. Конечно же, самый простой и
[01:14:55.720 --> 01:15:03.600]  логичный вариант, до которого не все догадываются, это просто завести общий инт звездочку еще,
[01:15:03.600 --> 01:15:14.520]  который будет у всех наших PTR одинаковый, и он будет указывать на число, которое, собственно,
[01:15:14.520 --> 01:15:21.160]  означает сколько еще PTR, но то же самое. Тогда нам при создании нового shared PTR нужно этот
[01:15:21.160 --> 01:15:32.040]  вкаунт инициализировать числом. Секундочку, секундочку, секундочку. Я, конечно, все понимаю,
[01:15:32.040 --> 01:15:40.000]  но если мы двум разным shared PTR дадим один указатель, это нормально, что все пойдет по-плохому?
[01:15:40.000 --> 01:15:53.840]  Это не нормально, это правильное замечание, а это мы никак не починим. Да, еще одно очень...
[01:15:53.840 --> 01:16:00.720]  Можно делать вот в ситуации, когда мы хотим генерировать shared PTR от чистых-сырых указателей,
[01:16:00.720 --> 01:16:05.200]  но при этом чтобы они, то есть не давая их знать о существовании друг друга, но при этом чтобы они
[01:16:05.200 --> 01:16:13.920]  корректно работали. Тут есть что-то более умное, чем хранить глобальную маку? Значит, смотрите, вы сейчас еще
[01:16:13.920 --> 01:16:21.600]  одно очень популярное заблуждение или, не знаю, что такое, мнение про shared PTR вы сказали, что типа,
[01:16:21.600 --> 01:16:26.760]  а как же быть, если мы просто создаем два сырых C-шных поинтера и сконструируем два разных,
[01:16:26.760 --> 01:16:33.280]  один C-шный поинтер и два разных shared PTR от него сконструируем? Что тогда будет? Возможно,
[01:16:33.280 --> 01:16:37.960]  я про это уже говорил раньше, а может быть, забыл, когда мы про исключение говорим. Ну, короче, нет,
[01:16:37.960 --> 01:16:46.160]  умные указатели не защищают вот этого. Это не проблема класса shared PTR, это ваша проблема,
[01:16:46.160 --> 01:16:51.200]  не так, не надо так делать. Вопрос как раз в том, можно ли в таком случае делать что-то кроме
[01:16:51.200 --> 01:16:59.520]  как мабух хранить? Не знаю и знать не хочу, просто не надо не писать никогда самому. Вот так звучит
[01:16:59.520 --> 01:17:07.560]  ответ современный на этот вопрос. Значит, если вы вручную создадите C-шный поинтер и присвоите
[01:17:07.560 --> 01:17:13.800]  двум разным shared PTR, его будет двойное удаление и, конечно, все будет плохо. Shared PTR не защищает
[01:17:13.800 --> 01:17:18.960]  вот этого, они не предназначены для решения этой проблемы, а если вы так делаете, значит, вы
[01:17:18.960 --> 01:17:24.480]  просто не умеете shared PTR пользоваться. Просто решение заключается в том, что не надо никогда
[01:17:24.480 --> 01:17:33.280]  создавать C-шные поинтеры вручную. А как надо их создавать, это мы обсудим в следующий раз,
[01:17:33.280 --> 01:17:38.600]  но для этого есть функция make shared как раз, которая маскирует вызов new так,
[01:17:38.600 --> 01:17:43.600]  чтобы вам не приходилось никогда делать иметь дело с C-шным поинтером непосредственно.
[01:17:43.600 --> 01:17:53.520]  На самом деле правила код стайла говорят, что современный каноничный подход к этому говорит,
[01:17:53.520 --> 01:18:00.280]  что даже конструктор shared PTR явно не надо вызывать, надо просто делать через функцию make shared,
[01:18:00.280 --> 01:18:06.960]  которая за вас делает new. Но вот мы немножечко забежали вперед. Ну, короче, от этой проблемы
[01:18:06.960 --> 01:18:14.960]  shared PTR не защищает, и я не собираюсь эту проблему решать с помощью shared PTR. Понятно? Это важно очень,
[01:18:14.960 --> 01:18:20.080]  надо понимать, что это не та проблема, от которой shared PTR спасает. Просто так не надо писать.
[01:18:20.080 --> 01:18:29.160]  Вот. Ну, возможно, ну да, глобальная мапа бы решила этот вопрос, но у нас нет такой цели решить этот
[01:18:29.160 --> 01:18:37.520]  вопрос. Понятно, что если бы была глобальная мапа, то мы бы от этого защитились, но мы не ставим себе
[01:18:37.520 --> 01:18:47.280]  цель от этого защититься, просто мы говорим пользователям не писать так. Так, окей? Ну вот,
[01:18:47.280 --> 01:18:55.520]  хорошо, теперь что я говорю? Ну, other PTR, ну, теперь я просто говорю звёздочка count,
[01:18:55.520 --> 01:19:15.400]  ну, плюс-плюс звёздочка count. А, ну да, точно, count other.count и вот так. Ну, кажется, это no accept,
[01:19:15.400 --> 01:19:28.440]  а вот просто эта штука не no accept. Ну, давайте для упражнения там, что делает move конструктор.
[01:19:28.440 --> 01:19:40.400]  Ну, он тоже no accept будет. Секундочку, я понимаю, что мы сейчас рассчитываем на то, что new от одного
[01:19:40.400 --> 01:19:49.120]  мта может дать нам исключение. Конечно. Круто. Ты этот вопрос уже задавал однажды. Да, мы... Я думал
[01:19:49.120 --> 01:19:57.720]  про вектор, но ладно. Мы... Да, это сильно. В смысле? Ну, это... Я не могу назвать эту операцию no accept,
[01:19:57.720 --> 01:20:03.160]  даже формально просто не могу назвать. No accept считается, когда нету вызовов не no accept
[01:20:03.160 --> 01:20:09.600]  операторов. Вот просто некорректный код, если я назову это no accept. А, окей. Ну,
[01:20:09.600 --> 01:20:15.520]  есть он скопилируется, но это будет просто нарушение всемыслимых контрактов. Давайте move
[01:20:15.520 --> 01:20:28.880]  конструктор. Ну, что с move конструктором? Ну, всё то же самое. other.ptr count other.count,
[01:20:28.880 --> 01:20:38.520]  а вот тут интересно становится. А что нам надо сделать в move конструкторе?
[01:20:38.520 --> 01:20:57.560]  Ну, вроде ничего, всё. надо сказать other.ptr равно null.ptr и other.count равно типа 0. А вот нельзя же так.
[01:20:57.560 --> 01:21:09.840]  Ну, точнее вот так. Но есть проблемка. Он же указывает на то, что ему можно так писать.
[01:21:09.840 --> 01:21:16.040]  Чё? other.count у нас такой же как count у нас, как можно писать other.count.
[01:21:16.040 --> 01:21:25.120]  А, да, так мы не должны сделать, так мы не должны делать. Сейчас. Да, правильно.
[01:21:25.120 --> 01:21:37.600]  Можно остаться в other.count, мы не должны его тоже null.ptr сделать. Сейчас, подождите. other.count тоже
[01:21:37.600 --> 01:21:44.560]  null.ptr надо сделать. Да, я всё перепутал. Тут как раз всё просто. Да-да-да-да-да-да. Мы создали,
[01:21:44.560 --> 01:21:49.520]  ну, мы просто всё забрали у того и взяли это себе. Всё, ничего больше не произошло. Да, ничего
[01:21:49.520 --> 01:21:57.840]  интересного не произошло. Вот. Да, это move конструктор. Move assignment оператор будет интереснее,
[01:21:57.840 --> 01:22:04.880]  а move конструктор неинтересный. Деструктор. Вот сейчас интересно тоже будет. Чё делать
[01:22:04.880 --> 01:22:15.280]  деструктор? Ну, если other.count и other.count... Ну, я бы сказал minus minus звёздочка count в любом случае,
[01:22:15.280 --> 01:22:20.840]  а вот теперь я говорю, если звёздочка count... Нет, не в любом. В нём же может лежать null.ptr.
[01:22:20.840 --> 01:22:32.040]  Minus minus звёздочка null.ptr это вроде плохо очень. Да, согласен. Ну... Просто если не count, то выходи.
[01:22:32.040 --> 01:22:39.000]  Да, это нам нужно просто вот так сделать сначала, такой разобрать. Теперь мы его вычитаем,
[01:22:39.000 --> 01:22:43.000]  и если обнаружим, что мы были последними, то чё делаем?
[01:22:43.000 --> 01:23:03.120]  Удаляем и то и другое. Delete ptr, delete count. Ну, в общем-то, да, примерно так. Вот. Ну, я не буду
[01:23:03.120 --> 01:23:08.520]  реализовывать копии assignment оператора move assignment оператор. Это неинтересно, это понятно.
[01:23:08.520 --> 01:23:27.480]  Ну вот. Это, в принципе, базовая рабочая версия shared ptr. Ну, в ней есть много проблем.
[01:23:27.480 --> 01:23:39.480]  Первая проблема... Ну, как минимум о двух мы уже упомянули. Первая проблема в том, что этот shared ptr
[01:23:39.480 --> 01:23:45.160]  потенциально таков, что можно создать два разных shared ptr на один и тот же указатель, будет плохо.
[01:23:45.160 --> 01:23:49.920]  То есть мы ещё хотим написать вспомогательную функцию, которая будет маскировать за нас вызовы
[01:23:49.920 --> 01:23:56.400]  new на самом деле. Make shared она будет называться. Ещё проблема, что мы хотим уметь создавать
[01:23:56.400 --> 01:24:02.800]  shared ptr на родителя, когда нам дали наследника. Вот. Но есть и ещё несколько проблем. Например,
[01:24:02.800 --> 01:24:14.720]  такая проблема. Что если у нас будет такая структура данных, в которой несколько shared ptr,
[01:24:14.720 --> 01:24:25.040]  ну, в которой... В общем, что если мы создадим закольцованный список? Если мы теперь всегда
[01:24:25.120 --> 01:24:32.720]  вместо сишных pointer будем использовать shared pointer, то мы можем... У нас может произойти ситуация,
[01:24:32.720 --> 01:24:37.800]  что у нас возник закольцованный список. То есть, ну, в простейшем случае, у нас там есть дерево,
[01:24:37.800 --> 01:24:44.160]  в котором родитель ссылается на ребёнка, ребёнок на родителя, и они все shared ptr друг на друга.
[01:24:44.160 --> 01:24:52.120]  И поэтому, когда мы отцепим всю эту штуку, они оба будут думать, что ещё кто-то на них указывает,
[01:24:52.120 --> 01:24:56.720]  а на самом деле уже больше никто, они недоступны извне. И они не удалятся,
[01:24:56.720 --> 01:25:05.400]  потому что ещё счётчики будут единицей. А должны бы. Понятно проблема?
[01:25:05.400 --> 01:25:10.960]  Мы реально сможем это решить без особых накладок?
[01:25:10.960 --> 01:25:15.280]  Никто не обещал, что не будет особых накладок. Они будут.
[01:25:15.280 --> 01:25:20.680]  А я не понял проблему. Проблема. Мы всё. Мы перешли
[01:25:20.680 --> 01:25:25.200]  на shared ptr полностью. Мы больше не используем сишные пойнтеры. Давай напишем какое-нибудь
[01:25:25.200 --> 01:25:31.560]  двоичное дерево поиска на shared ptr, например, красно-чёрное дерево. Теперь у тебя, у каждого
[01:25:31.560 --> 01:25:37.880]  родителя есть shared ptr на сынове, у каждого сына есть shared ptr на родителя. И вот ты решил
[01:25:37.880 --> 01:25:47.480]  отцепить под дерево. Ты просто стёр... ну, забыл про shared ptr на родителя, на вот этого,
[01:25:47.480 --> 01:25:54.200]  на корень под дерево. По-хорошему бы надо, чтобы всё под дерево удалилось тогда, потому что у тебя
[01:25:54.200 --> 01:26:01.600]  внешний... ну всё, у тебя пропал поинтер на любую из его вершин извне. Но на самом деле ничего не
[01:26:01.600 --> 01:26:06.400]  удалится, потому что они друг на друга ссылаются закольцовано и будут из-за этого думать, что ещё
[01:26:06.400 --> 01:26:13.480]  кто-то на них ссылается. На самом деле уже есть программа доступ к ним потерян. Да, хорошо.
[01:26:13.480 --> 01:26:22.200]  Это тоже проблема, которую тоже нужно уметь решать. Именно эта проблема, кстати, возникает
[01:26:22.200 --> 01:26:26.800]  в сборке мусора. Когда у вас есть, например, ну, когда у вас есть язык со сборкой мусора,
[01:26:26.800 --> 01:26:34.600]  например, java или csharp, то это одна из главных проблем, которая утяжеляет это. Когда у вас
[01:26:34.600 --> 01:26:40.520]  автоматически система сборки мусора следит за... считает ссылки на каждый объект, если у вас
[01:26:40.520 --> 01:26:46.760]  закольцованный список, все ссылаются друг на друга, а внешний указатель потерян, то это нужно
[01:26:46.760 --> 01:26:54.240]  как-то обрабатывать. И вот это существенно утяжеляет процесс сборки мусора. Ну и у нас это вызовет
[01:26:54.240 --> 01:27:02.680]  некоторые трудности, то есть мы на какие-то ситуации будем тоже обрабатывать. Ну и ещё мы
[01:27:02.680 --> 01:27:08.280]  хотим уметь использовать, кроме как delete, ещё кастомную функцию удалитель. То есть мы хотим,
[01:27:08.280 --> 01:27:13.640]  чтобы SharedPtr работал не только для NewDelete, а для произвольного ресурса, у которого своя функция
[01:27:13.640 --> 01:27:20.760]  освобождения. То есть это не обязательно pointer, который delete надо делать. Может быть, что-то другое,
[01:27:20.760 --> 01:27:25.120]  что в качестве удаления нужно другую функцию вызвать. Вообще не связанную с освобождением памяти,
[01:27:25.120 --> 01:27:32.640]  а просто там отпускать какой-нибудь... разъединять соединения, допустим, по сети. Это всё тизер к
[01:27:32.640 --> 01:27:38.040]  следующему разу, то есть у нас много на самом деле проблем, и это я не все ещё перечислил, но вот мы их
[01:27:38.040 --> 01:27:45.080]  всё будем решать по очереди, и в конце концов у нас будет внимание, как работает SharedPtr достаточно
[01:27:45.080 --> 01:27:47.440]  глубоко. Ну а на сегодня всё, пока.
