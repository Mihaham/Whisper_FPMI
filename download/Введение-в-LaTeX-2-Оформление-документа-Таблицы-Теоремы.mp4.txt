[00:00.000 --> 00:12.000]  Так, всем привет. Начинаем второе занятие курса. Второе в основном всеми, кто будет смотреть это в записи.
[00:12.000 --> 00:19.000]  Но тем не менее, в прошлый раз остались некоторые вопросы, которые были вновь не отвечены или отвечены не очень корректно,
[00:19.000 --> 00:23.000]  и хочется сначала это закладить, потом уже двигаться по темам.
[00:23.000 --> 00:29.000]  Во-первых, я завекался, что есть такая вещь как макросы, которые конечно психичны для каждого редактора в техе в отдельности,
[00:29.000 --> 00:35.000]  но по крайней мере в ВСКоде есть вот такая штука. Если пройти в специальные настройки,
[00:35.000 --> 00:44.000]  которые здесь указаны Preference Scaber Shortcuts и там перейти в специальный файлик, который содержит всякие пользовательские конфиги,
[00:44.000 --> 00:55.000]  то у него можно прям писать код своих новых команд, вернее реакции на нажатие клавиш, которые вот так вот вид имеют.
[00:55.000 --> 01:00.000]  Это словарь, вида, какие-то аргументы, какие-то значения.
[01:00.000 --> 01:08.000]  И вот как видим, в текущей команде я говорю, что хочется на нажатие клавиш CMD SHIFT 9, ну или CTRL SHIFT 9, если вы пишете на винде,
[01:08.000 --> 01:15.000]  применять загадочную команду INSERT SNIPPED, ну и далее указывается сам SNIPPED, который будет вставляться.
[01:15.000 --> 01:22.000]  И значит, например, следующее. Вот выделенный текст, который буквально выделен в редакторе, нужно взять,
[01:22.000 --> 01:30.000]  обернуть с кубочки LEFT-RIGHT, бэкслэши экранированные, поэтому их тут два. В итоговом тексте их будет по одному.
[01:30.000 --> 01:39.000]  И далее поставить курсор на позицию $0. Можно проверить, как это выглядит на практике.
[01:39.000 --> 01:47.000]  Я буквально опишу какой-то текст, выделяю его, делаю CMD SHIFT 9 и получаю именно то, о чем написал.
[01:47.000 --> 01:53.000]  На всякий случай визуально покажу, где есть этот настройка. Каждый раз я не смог его найти, видимо, это не очень тривиально.
[01:53.000 --> 02:00.000]  Да, preferences, keyboard shortcuts. И далее такая кнопочка, открывающая специальный файл.
[02:00.000 --> 02:05.000]  Тут у меня еще парочка команд. Они специфичны скорее для того, что я пишу именно в VSCode.
[02:05.000 --> 02:16.000]  В TechStudio нажатие CTRL B и CTRL I применяют и используют команду дежурного или курсивного текста,
[02:16.000 --> 02:22.000]  ко всему выделенному тексту. Здесь такого, к сожалению, нет, потому что CTRL B и CTRL U чем-то занято,
[02:22.000 --> 02:29.000]  и приходится писать свое на CTRL B и CTRL SHIFT I. Тоже можно проверить, что это действительно работает.
[02:30.000 --> 02:36.000]  Ну и в общем, таких штук можно придумать массу. Мы, скажем, видели разные виды скобочек, всякие там квадратные, фигурные,
[02:36.000 --> 02:43.000]  которые тоже хочется иногда делать разноразмерными, как прямо в этом примере с обычными скобками.
[02:43.000 --> 02:49.000]  Ну и можно придумать такие же команды, сделать их и дальше пользоваться. Я здесь составил такой самый минимум,
[02:49.000 --> 02:54.000]  чтобы гладни разбегались. Очень удобная штука, в дальнейшем она может сильно разрастаться.
[02:54.000 --> 02:59.000]  Стоит пользоваться, если пишете в S-коде. С этим разобрались.
[02:59.000 --> 03:03.000]  Да, видно, что было в S-код, когда я в него переключился.
[03:06.000 --> 03:08.000]  Да, в S-код было видно.
[03:08.000 --> 03:11.000]  Огонь. Значит, тогда дальше можно по этому поводу не переживать.
[03:11.000 --> 03:16.000]  И второй был вопрос, который решить не получилось, как использовать всякие кириллические, ну и другие
[03:16.000 --> 03:21.000]  юникодные символы в математике. У меня все падало при попытках хоть что-то сделать.
[03:21.000 --> 03:28.000]  Разгадка следующая. Во-первых, для того, чтобы использовать какие угодно символы в математике,
[03:28.000 --> 03:33.000]  есть пакет MathText. Мы в прошлый раз не смогли его правильно набрать, поэтому ничего не заработало.
[03:33.000 --> 03:38.000]  Но вот прямо сейчас прям будем. Я могу его проставить.
[03:38.000 --> 03:48.000]  Ну и гипотеза такая, что если я напишу какую-то формулу, в которой будут русские буквы, то она хотя бы скомпилируется.
[03:48.000 --> 03:57.000]  Ага. Она при этом все еще не ускоритовала символы.
[03:57.000 --> 04:03.000]  И это, видимо, потому что MathText нужно применять до указания всех символов.
[04:04.000 --> 04:09.000]  И это, видимо, потому что MathText нужно применять до указания всех кодировок.
[04:09.000 --> 04:15.000]  Да, у меня уже была эта строчка закомментирована, и, видимо, стоит ее раскомментировать.
[04:15.000 --> 04:18.000]  Огонь. Это работает.
[04:18.000 --> 04:24.000]  Мне такой вариант вообще не очень нравится, потому что есть подозрение, что этот пакет может чем-то контактовать.
[04:24.000 --> 04:29.000]  Вот даже его расположение после пакетов с кодировками уже все попортило.
[04:29.000 --> 04:31.000]  Поэтому я предлагаю забыть про его существование.
[04:31.000 --> 04:36.000]  И также вторым способом, который я предлагаю, есть такая штука команда Text.
[04:36.000 --> 04:43.000]  В прошлый раз я пытался тоже ее набрать, но, как оказалось, она приезжает не сама по себе, а в пакете IMS Math.
[04:43.000 --> 04:47.000]  Если его подключить, то все должно заработать.
[04:47.000 --> 04:55.000]  В прошлый раз мы писали документ буквально с нуля, там не было ни такой прямбулы, никаких пакетов, поэтому кто мог подумать, у нас ничего не получилось.
[04:59.000 --> 05:05.000]  Видимо, в случае с командой Text нужно оказать прям таки аргумент в скобочках.
[05:05.000 --> 05:10.000]  Не знаю, почему для нее правда отличается от всего остального, но почему бы нет.
[05:13.000 --> 05:15.000]  Огонь. Все заработало.
[05:15.000 --> 05:24.000]  Возможно, проблема в том, что после команды Text он начинает партий все далее происходящее, как какие-то юникодные строки, которые бывают разной длины.
[05:24.000 --> 05:29.000]  И поэтому ему уже хочется видеть прям фигурную скобку, чтобы было от чего отталкиваться.
[05:29.000 --> 05:33.000]  Но тут же я не верю, что у него конкретная проблема, но главное, что так оно работает.
[05:33.000 --> 05:35.000]  И хорошо.
[05:35.000 --> 05:37.000]  Дальше.
[05:37.000 --> 05:41.000]  Более-менее к тому, что я собирался сегодня говорить.
[05:44.000 --> 05:46.000]  Презентация зависла.
[05:46.000 --> 05:48.000]  Поговорим по оформлению документа.
[05:48.000 --> 05:56.000]  Это, в частности, покрывает некоторые вопросы, которые тоже задавали в прошлый раз, которые стоят осветить, как делать всякие оступы по горизонтали и по вертикали.
[05:56.000 --> 06:05.000]  Это бывает в полезном оформлении, например, титульника, в котором много разных оступов и довольно мало текста, и хочется разместить его именно там, где хочется, а не где получится.
[06:05.000 --> 06:11.000]  Есть такие команды, как HSPACE и VSPACE, которые неожиданно лепят в тексте.
[06:11.000 --> 06:13.000]  Как указываются длины, мы еще поговорим.
[06:13.000 --> 06:15.000]  Есть разные единицы измерения.
[06:15.000 --> 06:22.000]  В частности, из того, что часто может пригождаться, это, например, пяти, ну, то есть, point.
[06:22.000 --> 06:26.000]  Буквально в точках или в пикселях замеряется расстояние.
[06:26.000 --> 06:36.000]  Если я тут какой-то текст напишу, еще какой-то текст, то по умолчанию, как мы помним, любое количество расстояния в тексте, это может быть очень много.
[06:36.000 --> 06:40.000]  Если хочется чего-то большего, то придется использовать какую-то команду.
[06:40.000 --> 06:46.000]  Тут неважно, может вообще не быть стихотступов, если я ее применил.
[06:46.000 --> 06:49.000]  На всякий случай.
[06:49.000 --> 06:56.000]  Проверим, заработает ли так. Если не заработает, то поставим еще один пробел.
[06:56.000 --> 07:07.000]  Да, почему не сработало, потому что по умолчанию команда vspace, которая делает вертикальный пробел, она на самом деле действует по окончании текущей строки.
[07:07.000 --> 07:15.000]  А текущая строка, несмотря на то, что, казалось бы, есть переход на новые строчки, они все одинарные, и поэтому переобразуются в пробелы при компиляции.
[07:15.000 --> 07:17.000]  И поэтому ничего не получается.
[07:17.000 --> 07:23.000]  Поэтому, да, для безопасности, видимо, лучше всегда оборачивать такие штучки в Enter, чтобы точно ничего не поломалось.
[07:23.000 --> 07:25.000]  Есть такая вещь.
[07:25.000 --> 07:27.000]  Есть также горизонтальный пробел.
[07:27.000 --> 07:31.000]  Если мы будем использовать этот пробел, то мы будем использовать этот пробел.
[07:31.000 --> 07:35.000]  Если мы будем использовать этот пробел, то мы будем использовать этот пробел.
[07:35.000 --> 07:41.000]  Если мы будем использовать этот пробел, то мы будем использовать этот пробел.
[07:41.000 --> 07:43.000]  И есть еще также их версии со звездочками.
[07:43.000 --> 07:45.000]  И есть еще также их версии со звездочками.
[07:45.000 --> 07:47.000]  И есть еще также их версии со звездочками.
[07:47.000 --> 07:51.000]  Как мы уже видели такую идеологию, что звездочка меняет поведение команды на не очень сильно.
[07:51.000 --> 07:53.000]  Как мы уже видели такую идеологию, что звездочка меняет поведение команды на не очень сильно.
[07:53.000 --> 07:55.000]  И есть еще также их версии со звездочками.
[07:55.000 --> 07:57.000]  И есть еще также их версии со звездочками.
[07:57.000 --> 07:59.000]  И есть еще также их версии со звездочками.
[07:59.000 --> 08:01.000]  И есть еще также их версии со звездочками.
[08:01.000 --> 08:03.000]  И есть еще также их версии со звездочками.
[08:03.000 --> 08:05.000]  И есть еще также их версии со звездочками.
[08:05.000 --> 08:07.000]  Если звездочка меняет поведение команды на не очень сильно.
[08:07.000 --> 08:09.000]  Если звездочка меняет поведение команды на не очень сильно.
[08:09.000 --> 08:11.000]  Здесь идея такая, что если обычный ажспейс начнется где-то близ к концу строки.
[08:11.000 --> 08:13.000]  Здесь идея такая, что если обычный ажспейс начнется где-то близ к концу строки.
[08:13.000 --> 08:15.000]  И то расстояние, которое мы ему подали на вход, не умещается целиком до конца строки.
[08:15.000 --> 08:17.000]  И то расстояние, которое мы ему подали на вход, не умещается целиком до конца строки.
[08:17.000 --> 08:19.000]  И то расстояние, который мы ему подали на вход, не умещается целиком до конца строки.
[08:19.000 --> 08:21.000]  То оно просто обрежется.
[08:21.000 --> 08:23.000]  То оно просто обрежется.
[08:23.000 --> 08:25.000]  Если же мы используем ажспейс со звездочкой, то это расстояние, сколько влезет, будет размещено в конце этой строки.
[08:25.000 --> 08:27.000]  Если же мы используем ажспейс со звездочкой, то это расстояние, сколько влезет, будет размещено в конце этой строки.
[08:27.000 --> 08:29.000]  Если же мы используем ажспейс со звездочкой, то это расстояние, сколько влезет, будет размещено в конце этой строки.
[08:29.000 --> 08:31.000]  Если же мы используем ажспейс со звездочкой, то это расстояние, сколько влезет, будет размещено в конце этой строки.
[08:31.000 --> 08:33.000]  А что останется уже в начале следующей.
[08:33.000 --> 08:35.000]  А что останется уже в начале следующей.
[08:35.000 --> 08:37.000]  И это еще больше экзотика, чем просто ажспейс.
[08:37.000 --> 08:39.000]  Но, наверное, стоит упомянуть, что такая разница в поведении есть.
[08:39.000 --> 08:41.000]  Но, наверное, стоит упомянуть, что такая разница в поведении есть.
[08:41.000 --> 08:43.000]  Хотя бы потому, что возникает вопрос, зачем вы вообще придумали две разные команды, которые делают вроде как одно и то же.
[08:43.000 --> 08:45.000]  Хотя бы потому, что возникает вопрос, зачем вы вообще придумали две разные команды, которые делают вроде как одно и то же.
[08:45.000 --> 08:47.000]  Хотя бы потому, что возникает вопрос, зачем вы вообще придумали две разные команды, которые делают вроде как одно и то же.
[08:47.000 --> 08:49.000]  Хотя бы потому, что возникает вопрос, зачем вы вообще придумали две разные команды, которые делают вроде как одно и то же.
[08:49.000 --> 08:51.000]  Но на самом деле поведение иногда отличается.
[08:51.000 --> 08:53.000]  Но на самом деле поведение иногда отличается.
[08:53.000 --> 08:55.000]  Но на самом деле поведение иногда отличается.
[08:55.000 --> 08:57.000]  Есть также команды Achille и V-Fill.
[08:57.000 --> 08:59.000]  Они очень полезны, на самом деле бывают при оформлении того же самого титульника.
[08:59.000 --> 09:01.000]  Они очень полезны, на самом деле бывают при оформлении того же самого титульника.
[09:01.000 --> 09:03.000]  Если хочется написать что-то вверху, какой-нибудь заголовок.
[09:03.000 --> 09:05.000]  Если хочется написать что-то вверху, какой-нибудь заголовок.
[09:05.000 --> 09:07.000]  И что-нибудь внизу в странице.
[09:07.000 --> 09:09.000]  И что-нибудь внизу в странице.
[09:09.000 --> 09:11.000]  Ну, например, дата.
[09:11.000 --> 09:13.000]  Ну, потом поговорим, как грамотно задавать заголовки даты.
[09:13.000 --> 09:15.000]  И вот хочется, чтобы это было прямо верхней страницы.
[09:15.000 --> 09:17.000]  И вот хочется, чтобы это было прямо верхней страницы.
[09:17.000 --> 09:19.000]  А вот чтобы оно прямо само считалось и располагало где следует.
[09:19.000 --> 09:21.000]  А вот чтобы оно прямо само считалось и располагало где следует.
[09:21.000 --> 09:23.000]  Это весь команды V-Fill.
[09:23.000 --> 09:25.000]  Она буквально замощает всё пространство по вертикали, которое сможет.
[09:25.000 --> 09:27.000]  Она буквально замощает всё пространство по вертикали, которое сможет.
[09:27.000 --> 09:29.000]  Прямо в ходной странице.
[09:29.000 --> 09:31.000]  И да, ожидаемый эффект.
[09:31.000 --> 09:33.000]  Мы получили заголовок в самом верху.
[09:33.000 --> 09:35.000]  Ну, то, что ещё выше это поля, мы ещё поговорим про это настройку.
[09:35.000 --> 09:37.000]  Ну, то, что ещё выше это поля, мы ещё поговорим про это настройку.
[09:37.000 --> 09:39.000]  И вот в самом низу дата.
[09:39.000 --> 09:41.000]  Вот.
[09:41.000 --> 09:43.000]  Есть также команда Achille.
[09:43.000 --> 09:45.000]  Она делает то же самое, но по коризонтали.
[09:45.000 --> 09:47.000]  Проверить ещё раз не будем.
[09:47.000 --> 09:49.000]  Понятно, что эффект будет примерно таким же.
[09:49.000 --> 09:51.000]  Да, переход на новую строку.
[09:51.000 --> 09:53.000]  Есть много разных способов.
[09:53.000 --> 09:55.000]  Про это даже как-то мы говорили в чате.
[09:55.000 --> 09:57.000]  Про это даже как-то мы говорили в чате.
[09:57.000 --> 09:59.000]  Ну, вот вообще говоря,
[10:01.000 --> 10:03.000]  Сначала перечислю все команды.
[10:03.000 --> 10:05.000]  Есть просто команда Park.
[10:05.000 --> 10:07.000]  Которая делает примерно то же самое, что и 2 Enter подряд.
[10:07.000 --> 10:09.000]  Которая делает примерно то же самое, что и 2 Enter подряд.
[10:09.000 --> 10:11.000]  Они просто задают новый абзац.
[10:11.000 --> 10:13.000]  Есть команды
[10:13.000 --> 10:15.000]  Двойной Backslash и New Line.
[10:15.000 --> 10:17.000]  Которые с некоторыми там
[10:17.000 --> 10:19.000]  внутренними техническими трудностями
[10:19.000 --> 10:21.000]  делают примерно то же самое.
[10:21.000 --> 10:23.000]  Но как раз эти технические трудности, которые нам лучше не вдаваться,
[10:23.000 --> 10:25.000]  их не стоит использовать.
[10:25.000 --> 10:27.000]  И уж тем более не стоит использовать много подряд.
[10:27.000 --> 10:31.000]  Так получается, что их эффекты друг другу пересекаются и конфликтуют.
[10:31.000 --> 10:33.000]  Это может создать проблемы.
[10:33.000 --> 10:35.000]  Если вам хочется сделать много оступов по вертикали,
[10:35.000 --> 10:37.000]  используйте, скажем, V-Space.
[10:37.000 --> 10:39.000]  Ну, или несколько команд Park,
[10:39.000 --> 10:41.000]  если вам очень хочется делать ещё команды Park.
[10:41.000 --> 10:43.000]  Но я с вами рекомендую пользоваться везде командами
[10:43.000 --> 10:45.000]  V-Space и F-Space.
[10:45.000 --> 10:47.000]  Это намного читаемее, как мне кажется.
[10:47.000 --> 10:49.000]  И не требует большого дублирования кода.
[10:49.000 --> 10:51.000]  Которое возникало бы, если бы делали
[10:51.000 --> 10:53.000]  много оступов подряд,
[10:53.000 --> 10:55.000]  используя одну и ту же команду.
[10:55.000 --> 10:57.000]  Ну, есть также команды Line, LineBreak, PageBreak.
[10:57.000 --> 10:59.000]  Они
[10:59.000 --> 11:01.000]  сильно...
[11:01.000 --> 11:03.000]  просто насильственно переключают
[11:03.000 --> 11:05.000]  страницу стекущую на новую
[11:05.000 --> 11:07.000]  или строчку стекущую на новую.
[11:07.000 --> 11:12.000]  Тоже есть некая техническая разница между NewPage и PageBreak.
[11:12.000 --> 11:15.000]  Вот я тут написал, он не наше сформатирование.
[11:15.000 --> 11:18.000]  Ну это то же словом, долгости, которые нас не очень интересуют.
[11:18.000 --> 11:22.000]  Глобально NewPage, наверное, немножко безопаснее,
[11:22.000 --> 11:25.000]  но в целом большую разницу я бы между ним не выделал.
[11:25.000 --> 11:27.000]  И да, еще одно важное замечание.
[11:27.000 --> 11:30.000]  Был вопрос в прошлый раз, как быть, если...
[11:30.000 --> 11:32.000]  Вот, посмотрим на такой эффект.
[11:32.000 --> 11:34.000]  Попробуем начать какую-то секцию.
[11:34.000 --> 11:36.000]  Которые будут...
[11:36.000 --> 11:38.000]  Ну какие-то два абзац.
[11:38.000 --> 11:41.000]  Пока не очень важно какие.
[11:41.000 --> 11:44.000]  Но вот мы замечаем, что первый абзац
[11:44.000 --> 11:46.000]  он начинается несколько раз на строке.
[11:46.000 --> 11:50.000]  Это американская типографская традиция.
[11:50.000 --> 11:52.000]  У нас так не принято, хочется с этим бороться.
[11:52.000 --> 11:55.000]  Для этого есть специальный пакет InDentFirst,
[11:55.000 --> 11:57.000]  который буквально это и делает.
[11:57.000 --> 11:59.000]  Он делает так, чтобы первый абзац
[11:59.000 --> 12:02.000]  как бы не был наше сформатирование.
[12:02.000 --> 12:05.000]  Так, чтобы первый абзац каждого раздела
[12:05.000 --> 12:07.000]  он тоже отступался.
[12:07.000 --> 12:09.000]  То есть, связался перед ним InDent.
[12:11.000 --> 12:12.000]  Тоже.
[12:12.000 --> 12:14.000]  Тоже позволение ставлю.
[12:14.000 --> 12:16.000]  И проверю, что это работает.
[12:16.000 --> 12:19.000]  Но вряд ли что-то изменилось в прошлый раз, как я это запускал.
[12:22.000 --> 12:24.000]  Да, действительно, теперь у нас
[12:24.000 --> 12:26.000]  наше традиционное сформатирование,
[12:26.000 --> 12:28.000]  красные строки и все хорошо.
[12:28.000 --> 12:29.000]  Это точно.
[12:29.000 --> 12:31.000]  Одна из команд с той категории,
[12:31.000 --> 12:32.000]  где ты оставляешь преамбль
[12:32.000 --> 12:34.000]  и больше никогда не переиспользуешь.
[12:34.000 --> 12:35.000]  Вернее, не перенабираешь.
[12:35.000 --> 12:36.000]  Переиспользуешь ты ее постоянно,
[12:36.000 --> 12:38.000]  но она все время там и остается.
[12:38.000 --> 12:40.000]  Поэтому, скажем, я сходы,
[12:40.000 --> 12:42.000]  наверное, в прошлый раз бы ее и не вспомнил.
[12:42.000 --> 12:44.000]  Я помню только примерно, как она называется.
[12:44.000 --> 12:46.000]  Вот такой синтаксис.
[12:47.000 --> 12:49.000]  Идем дальше.
[12:52.000 --> 12:54.000]  В прошлый раз мы начали говорить
[12:54.000 --> 12:56.000]  про то, как делать всякие разделы и подразделы.
[12:56.000 --> 12:58.000]  Их на самом деле сильно больше,
[12:58.000 --> 13:00.000]  чем то, что мы видели в прошлый раз.
[13:00.000 --> 13:02.000]  Есть еще подсекции и всяких подсекций.
[13:02.000 --> 13:04.000]  Есть еще part, chapters,
[13:04.000 --> 13:06.000]  paragraph и subparagraph.
[13:06.000 --> 13:08.000]  Вообще говоря, неполный набор
[13:08.000 --> 13:10.000]  есть в любом документе.
[13:10.000 --> 13:12.000]  Да, напомню, что когда мы только создавали документы,
[13:12.000 --> 13:14.000]  мы указывали в документ-класс.
[13:14.000 --> 13:16.000]  И вот я сказал, что нам пригодится скорее всего
[13:16.000 --> 13:18.000]  только артикл, и нам хватит ее официальности.
[13:18.000 --> 13:20.000]  Но вот в частности,
[13:20.000 --> 13:22.000]  разные документ-классы определяют
[13:22.000 --> 13:24.000]  то, какой набор разных
[13:24.000 --> 13:26.000]  именования разделов
[13:26.000 --> 13:28.000]  можно в этом документе использовать.
[13:28.000 --> 13:30.000]  Есть люди вроде book,
[13:30.000 --> 13:32.000]  которые имеют больше опций
[13:32.000 --> 13:34.000]  в предположении, что там будет куда более глубокая структура,
[13:34.000 --> 13:36.000]  которую нужно будет
[13:36.000 --> 13:38.000]  тезинклассифицировать, и потребуется
[13:38.000 --> 13:40.000]  все эти наименования сразу.
[13:40.000 --> 13:42.000]  Есть еще некие различия,
[13:42.000 --> 13:44.000]  но пока их не будем упоминать.
[13:44.000 --> 13:46.000]  Но главное, что есть такие названия,
[13:46.000 --> 13:48.000]  и в артикле, из того, что я тестил
[13:48.000 --> 13:50.000]  из этого списка,
[13:50.000 --> 13:52.000]  не работает только chapter.
[13:52.000 --> 13:54.000]  Все остальное в принципе работает.
[13:54.000 --> 13:56.000]  Другое дело, что paragraph, скорее всего, практически незаметен.
[13:56.000 --> 13:58.000]  Можно попробовать.
[14:06.000 --> 14:08.000]  Да, он
[14:08.000 --> 14:10.000]  даже не делает переход
[14:10.000 --> 14:12.000]  на новую строку. Считается, что это буквально
[14:12.000 --> 14:14.000]  заголовок текущего облаца, что-то в этом духе.
[14:14.000 --> 14:16.000]  Ну что ж, такая экзотика, я ей довольно
[14:16.000 --> 14:18.000]  редко пользуюсь. Мне, как правило, хватает
[14:18.000 --> 14:20.000]  секций и подсекций,
[14:20.000 --> 14:22.000]  но в худшем случае над ними можно навесить парты,
[14:22.000 --> 14:24.000]  которые, слава богу, есть
[14:24.000 --> 14:26.000]  в случае артиклей.
[14:26.000 --> 14:28.000]  Вот.
[14:28.000 --> 14:30.000]  Ну и стоит также упомянуть, что вообще-то
[14:30.000 --> 14:32.000]  к секции можно приписывать также более короткое
[14:32.000 --> 14:34.000]  наименование. Для чего оно нужно?
[14:34.000 --> 14:36.000]  Короткое наименование пойдет, например,
[14:36.000 --> 14:38.000]  в содержание,
[14:38.000 --> 14:40.000]  table of contents, до которого мы скоро дойдем.
[14:40.000 --> 14:42.000]  Ну то есть,
[14:42.000 --> 14:44.000]  это такое техническое наименование,
[14:44.000 --> 14:46.000]  которое будет применяться где-то,
[14:46.000 --> 14:48.000]  где длина не умещается. Примерно такая идея.
[14:50.000 --> 14:52.000]  Да, и вот к слову table of contents
[14:52.000 --> 14:54.000]  о том, какие вообще будут автогенерируемые разделы,
[14:54.000 --> 14:56.000]  их несколько, как ни странно.
[14:56.000 --> 14:58.000]  Во-первых, есть точка моих title,
[14:58.000 --> 15:00.000]  которого наверняка, ну не прямо ее,
[15:00.000 --> 15:02.000]  а эффект ее использования, сейчас видите
[15:02.000 --> 15:04.000]  в статях,
[15:04.000 --> 15:06.000]  делается на следующее. Оно берет значение
[15:06.000 --> 15:08.000]  переменных автора
[15:08.000 --> 15:10.000]  заголовка и даты, в которых
[15:10.000 --> 15:12.000]  ну, давайте попробуем без них запустить, скорее
[15:12.000 --> 15:14.000]  всего ничего не получится. Но вот если их задать,
[15:14.000 --> 15:16.000]  то оно их грамотно отрисует. Пробуем
[15:16.000 --> 15:18.000]  сначала без них.
[15:18.000 --> 15:20.000]  Даже не нужны скобочки.
[15:20.000 --> 15:22.000]  Потому что команды аргументов не имеет.
[15:24.000 --> 15:26.000]  И да, все попадало.
[15:28.000 --> 15:30.000]  Смотрим почему.
[15:30.000 --> 15:32.000]  Да, ну буквально то, что я говорю.
[15:32.000 --> 15:34.000]  Он не умеет правильно
[15:34.000 --> 15:36.000]  функционировать, если мы ему не задали
[15:36.000 --> 15:38.000]  ни заголовка, ни автора.
[15:38.000 --> 15:40.000]  Кстати, на дату он не жалуется.
[15:40.000 --> 15:42.000]  Видимо, даты это вещь опциональная.
[15:42.000 --> 15:44.000]  Ну, положим, что мы все можем отцедать,
[15:44.000 --> 15:46.000]  мне очень трудно.
[15:50.000 --> 15:52.000]  16 октября.
[15:52.000 --> 15:54.000]  Разумеется, формат задания свободный.
[15:54.000 --> 15:56.000]  Это просто три строки, которые ничего, ну,
[15:56.000 --> 15:58.000]  никакой особой темантики не имеют. Он просто отрисует их
[15:58.000 --> 16:00.000]  в нужном формате. Если бы тут была не дата,
[16:00.000 --> 16:02.000]  а любой другой текст, это не вызвал бы проблемы.
[16:02.000 --> 16:04.000]  Ну, попробуем так.
[16:06.000 --> 16:08.000]  И да, оно
[16:08.000 --> 16:10.000]  грамотно отрисует
[16:12.000 --> 16:14.000]  сначала чуть большего размера
[16:14.000 --> 16:16.000]  заголовок, потом чуть меньшего размера автора
[16:16.000 --> 16:18.000]  и такого же размера дата.
[16:18.000 --> 16:20.000]  Вот я почти уверен, что вы подобную
[16:20.000 --> 16:22.000]  роду штуки видели где-то в каких-то статях.
[16:30.000 --> 16:32.000]  Переболят такие экзотичные вещи.
[16:32.000 --> 16:34.000]  Во-первых, TableFont, который я
[16:34.000 --> 16:36.000]  упоминал, это команда,
[16:36.000 --> 16:38.000]  которая берет всю информацию,
[16:38.000 --> 16:40.000]  которую мы задавали всякими
[16:40.000 --> 16:42.000]  секциями, подсекциями и прочим,
[16:42.000 --> 16:44.000]  и указывает на дельной странице,
[16:44.000 --> 16:46.000]  где искать, какую из секций.
[16:46.000 --> 16:48.000]  Посмотрим действия.
[17:02.000 --> 17:04.000]  Кстати, чтобы сымитировать переход
[17:04.000 --> 17:06.000]  в новую страницу, я буду вылечить
[17:06.000 --> 17:08.000]  пользоваться NewPage, потому что я не очень хочу
[17:08.000 --> 17:10.000]  генерировать целую страницу текста.
[17:16.000 --> 17:18.000]  Гипотеза такая, что
[17:18.000 --> 17:20.000]  он не сгенерирует
[17:20.000 --> 17:22.000]  заголовки первого-второго раздела
[17:22.000 --> 17:24.000]  на нужных страницах,
[17:24.000 --> 17:26.000]  а во-вторых, он на первые страницы
[17:26.000 --> 17:28.000]  делает отдельную штучку,
[17:28.000 --> 17:30.000]  которая имеет формление заголовок
[17:30.000 --> 17:32.000]  содержания, и дальше все разделы подряд
[17:32.000 --> 17:34.000]  и страницы, которых надо искать.
[17:34.000 --> 17:36.000]  Да, действительно оно сработало.
[17:36.000 --> 17:38.000]  Другое дело, что пока что эти ссылки
[17:38.000 --> 17:40.000]  не окликабельны, это хочется
[17:40.000 --> 17:42.000]  исправить, мы исправим это чуть-чуть погодя.
[17:42.000 --> 17:44.000]  Но уж по крайней мере нам дает
[17:44.000 --> 17:46.000]  это числовое значение, куда идти,
[17:46.000 --> 17:48.000]  а именно страницу номер два
[17:48.000 --> 17:50.000]  и двое страниц.
[17:50.000 --> 17:52.000]  И мы можем сделать это,
[17:52.000 --> 17:54.000]  если мы не будем искать,
[17:54.000 --> 17:56.000]  то мы будем искать,
[17:56.000 --> 17:58.000]  а если мы не будем искать,
[17:58.000 --> 18:00.000]  то мы будем искать,
[18:00.000 --> 18:02.000]  то мы будем искать,
[18:02.000 --> 18:04.000]  а именно страницу номер два
[18:04.000 --> 18:06.000]  и спустим теперь в раздел.
[18:06.000 --> 18:08.000]  Это тоже вы увидели наверняка в любой работе,
[18:08.000 --> 18:10.000]  которая написана на техне.
[18:10.000 --> 18:12.000]  Да, есть более экзотичные
[18:12.000 --> 18:14.000]  аналоги этой команды
[18:14.000 --> 18:16.000]  list of figures, list of tables.
[18:16.000 --> 18:18.000]  Мы пока не говорили ни о том, ни о другом,
[18:18.000 --> 18:20.000]  но в общем есть некие инструменты,
[18:20.000 --> 18:22.000]  позволяющие в отдельный списочек
[18:22.000 --> 18:24.000]  загонять все изображения,
[18:24.000 --> 18:26.000]  которые есть в вашей сайте
[18:26.000 --> 18:28.000]  и все таблицы, которые в ней есть.
[18:28.000 --> 18:30.000]  Потом, с помощью этой команды
[18:30.000 --> 18:32.000]  генерить некий аналог содержания,
[18:32.000 --> 18:34.000]  который указывает ссылочки
[18:34.000 --> 18:36.000]  только на эти специальные объекты.
[18:36.000 --> 18:38.000]  Да, есть также команда appendix,
[18:38.000 --> 18:40.000]  она сама по себе
[18:40.000 --> 18:42.000]  ничего не делает,
[18:42.000 --> 18:44.000]  но она несколько меняет поведение
[18:44.000 --> 18:46.000]  команды видосекция, подсекция и прочее.
[18:46.000 --> 18:48.000]  Она немножко
[18:48.000 --> 18:50.000]  меняет способ номерации.
[18:50.000 --> 18:52.000]  А именно,
[18:52.000 --> 18:54.000]  если мы по умолчанию ничего не трогали,
[18:54.000 --> 18:56.000]  у нас секции номировались
[18:56.000 --> 18:58.000]  обычными арабскими числами,
[18:58.000 --> 19:00.000]  то если мы хотим, чтобы дальше
[19:00.000 --> 19:02.000]  начинался аппендикс,
[19:02.000 --> 19:04.000]  ну то есть предложение, как еще говорят,
[19:04.000 --> 19:06.000]  то утверждается,
[19:06.000 --> 19:08.000]  что номерация станет не арабской,
[19:08.000 --> 19:10.000]  какой-то другой.
[19:18.000 --> 19:20.000]  И действительно,
[19:20.000 --> 19:22.000]  номерация стала вообще латиевскими буквами.
[19:22.000 --> 19:24.000]  Это все регулируется, это можно настраивать,
[19:24.000 --> 19:26.000]  но это лучше погуглить как,
[19:26.000 --> 19:28.000]  конечно же, вещь. Кажется, что
[19:28.000 --> 19:30.000]  обычно такого разделения
[19:30.000 --> 19:32.000]  числа в обычном содержании
[19:32.000 --> 19:34.000]  и на буквы в предложениях
[19:34.000 --> 19:36.000]  его обычно хватает.
[19:36.000 --> 19:38.000]  Уж по крайней мере как содержание управлять
[19:38.000 --> 19:40.000]  не касательно аппендикса мы еще поговорим,
[19:40.000 --> 19:42.000]  но это тоже будет не в этот раз.
[19:46.000 --> 19:48.000]  Да, еще один важный комментарий,
[19:48.000 --> 19:50.000]  который мне наверное стоило оставить,
[19:50.000 --> 19:52.000]  что вот команды вида
[19:52.000 --> 19:54.000]  new page,
[19:54.000 --> 19:56.000]  они
[19:56.000 --> 19:58.000]  работают не сиюминутно.
[19:58.000 --> 20:00.000]  Они
[20:00.000 --> 20:02.000]  ищут ближайшее подходящее
[20:02.000 --> 20:04.000]  место, в котором они в состоянии сделать
[20:04.000 --> 20:06.000]  новую строчку, новую страницу,
[20:06.000 --> 20:08.000]  и тут довольно трудно сделать
[20:08.000 --> 20:10.000]  что-то более серьезное, тех он довольно
[20:10.000 --> 20:12.000]  самостоятельный и сам вычитывает
[20:12.000 --> 20:14.000]  многие штуки, которые касаются верстки,
[20:14.000 --> 20:16.000]  и мы можем вам только подсказать,
[20:16.000 --> 20:18.000]  где конкретно мы хотим сделать
[20:18.000 --> 20:20.000]  переход,
[20:20.000 --> 20:22.000]  могут быть такие ситуации, в которых не с
[20:22.000 --> 20:24.000]  первого раза получится правильно это указать.
[20:24.000 --> 20:26.000]  Это к сожалению так,
[20:26.000 --> 20:28.000]  это тоже можно настраивать,
[20:28.000 --> 20:30.000]  но это такие довольно продвинутые, довольно
[20:30.000 --> 20:32.000]  узко специализированные вещи,
[20:32.000 --> 20:34.000]  я думаю, что я оставлю это совсем на потом,
[20:34.000 --> 20:36.000]  но вообще говорится быть аккуратным,
[20:36.000 --> 20:38.000]  то есть нельзя быть уверенным, что
[20:38.000 --> 20:40.000]  как только вы применили
[20:40.000 --> 20:42.000]  команду new page или page break,
[20:42.000 --> 20:44.000]  она сделает прямо то, что вам нужно,
[20:44.000 --> 20:46.000]  а не что-то немножечко другое.
[20:46.000 --> 20:48.000]  Лучше всегда комплиировать, смотреть, что получится.
[20:48.000 --> 20:50.000]  Есть некая вероятность, что вам придется
[20:50.000 --> 20:52.000]  написать не так, как вы ожидали,
[20:52.000 --> 20:54.000]  а как-то по-другому, чтобы это заработало правильно.
[20:56.000 --> 20:58.000]  Ну и последнее, наверное,
[20:58.000 --> 21:00.000]  что касается документов в целом, это пакет
[21:00.000 --> 21:02.000]  Geometry, это то, что мы говорили о полях,
[21:02.000 --> 21:04.000]  как задавать правильно поля сверху,
[21:04.000 --> 21:06.000]  снизу, с левого справа.
[21:06.000 --> 21:08.000]  Есть такой пакет, который делает довольно
[21:08.000 --> 21:10.000]  удобный интерфейс,
[21:10.000 --> 21:12.000]  примерно такой
[21:12.000 --> 21:14.000]  интерфейс. Мы делаем use package
[21:14.000 --> 21:16.000]  geometry, а потом применяем такого
[21:16.000 --> 21:18.000]  виду команды. Просто geometry
[21:18.000 --> 21:20.000]  и конкретная переменная,
[21:20.000 --> 21:22.000]  соответственно, отступы там сверху, топ, снизу,
[21:22.000 --> 21:24.000]  ботом, слева, лево, справа, райт
[21:24.000 --> 21:26.000]  и их какие-то размеры физические.
[21:26.000 --> 21:28.000]  И вот одно на этом же слайде про
[21:28.000 --> 21:30.000]  единицы измерения, которые я уже упоминал.
[21:30.000 --> 21:32.000]  Вот те,
[21:32.000 --> 21:34.000]  которые вам часто могут пригождаться,
[21:34.000 --> 21:36.000]  они примерно такие. Есть такие
[21:36.000 --> 21:38.000]  компьютерная природа, единицы.
[21:38.000 --> 21:40.000]  pt – это буквально
[21:40.000 --> 21:42.000]  точка, пиксель, x – это
[21:42.000 --> 21:44.000]  как сказано, высота буквы x,
[21:44.000 --> 21:46.000]  именно таким шрифтом, а m – это
[21:46.000 --> 21:48.000]  ширина буквы m, именно таким шрифтом.
[21:48.000 --> 21:50.000]  Конечно, мы видели его в прошлый раз,
[21:50.000 --> 21:52.000]  и тогда еще не мы не поняли, для чего
[21:52.000 --> 21:54.000]  он нужен, но, например, для этого.
[21:54.000 --> 21:56.000]  Ну, это моноширидная
[21:56.000 --> 21:58.000]  стандаршрифта.
[21:58.000 --> 22:00.000]  И также поддерживаются чисто физические
[22:00.000 --> 22:02.000]  единицы измерения, миллиметров, сантиметра
[22:02.000 --> 22:04.000]  и даже дюйма, inches.
[22:04.000 --> 22:06.000]  Поскольку у нас все документы, как правило,
[22:06.000 --> 22:08.000]  имеют форматы A5 или A4, у них вполне
[22:08.000 --> 22:10.000]  понятные геометрические размеры,
[22:10.000 --> 22:12.000]  из них имеет смысл все привычные нам
[22:12.000 --> 22:14.000]  единицы измерения.
[22:14.000 --> 22:16.000]  В частности, для полей
[22:16.000 --> 22:18.000]  так даже как считаемые
[22:18.000 --> 22:20.000]  получается, если их указывать именно в
[22:20.000 --> 22:22.000]  2 миллиметрах, а не в чем-то типа x.
[22:22.000 --> 22:24.000]  Предлагаю попробовать
[22:24.000 --> 22:26.000]  это тоже в действии.
[22:26.000 --> 22:28.000]  Ну, как всегда,
[22:28.000 --> 22:30.000]  usePackage
[22:30.000 --> 22:32.000]  в геометре
[22:32.000 --> 22:34.000]  и то, что я скопировал.
[22:38.000 --> 22:40.000]  Каждое поведение такое, что он даст
[22:40.000 --> 22:42.000]  правильные размеры полей. Наверное, чтобы было заметно,
[22:42.000 --> 22:44.000]  стоит, например, указать на контрасте,
[22:44.000 --> 22:46.000]  что будут очень большие поля снизу
[22:46.000 --> 22:48.000]  и очень маленькие сверху, чтобы заметить, что хоть
[22:48.000 --> 22:50.000]  что-то изменилось.
[22:54.000 --> 22:56.000]  Ну, действительно, как видим,
[22:56.000 --> 22:58.000]  текст начинается практически
[22:58.000 --> 23:00.000]  у начала страницы, а заканчивается
[23:00.000 --> 23:02.000]  далеко не в конце, имеется
[23:02.000 --> 23:04.000]  счастный уступ, потому что мы вот так
[23:04.000 --> 23:06.000]  указали. Это все регулируется,
[23:06.000 --> 23:08.000]  есть какие-то стендарты, наверняка им можно
[23:08.000 --> 23:10.000]  пользоваться.
[23:10.000 --> 23:12.000]  И есть еще парочку параметров,
[23:12.000 --> 23:14.000]  которые стоят в минуточку.
[23:14.000 --> 23:16.000]  Во-первых, параметр lineSpread
[23:16.000 --> 23:18.000]  он регулирует
[23:18.000 --> 23:20.000]  коэффициент
[23:20.000 --> 23:22.000]  межзрочного интервала.
[23:22.000 --> 23:24.000]  По умолчанию строчки между собой довольно тесно
[23:24.000 --> 23:26.000]  расположены.
[23:28.000 --> 23:30.000]  Нагенерю парочку,
[23:30.000 --> 23:32.000]  чтобы было наглядно.
[23:36.000 --> 23:38.000]  Вот.
[23:38.000 --> 23:40.000]  Ожидаемо, что сейчас они просто
[23:40.000 --> 23:42.000]  построятся прямо друг под другом,
[23:42.000 --> 23:44.000]  с довольно малыми межними расстояниями,
[23:44.000 --> 23:46.000]  и вообще говоря, для обычного текста это нормально.
[23:46.000 --> 23:48.000]  Это никакой проблемы не вызовет.
[23:48.000 --> 23:50.000]  Но если получается так, что у нас
[23:50.000 --> 23:52.000]  в строках довольно много вложенной математики,
[23:52.000 --> 23:54.000]  ну, вот окружений, которые пишутся в долларах,
[23:54.000 --> 23:56.000]  именно внутристрочных,
[23:56.000 --> 23:58.000]  то они могут
[23:58.000 --> 24:00.000]  или распирать строку
[24:00.000 --> 24:02.000]  по высоте,
[24:02.000 --> 24:04.000]  и вот скажем, если
[24:04.000 --> 24:06.000]  во второй строке напишу что-то, скажем,
[24:06.000 --> 24:08.000]  подробью,
[24:08.000 --> 24:10.000]  которая будет еще, это у нас
[24:10.000 --> 24:12.000]  главный букв, например, что-то довольно крупное.
[24:16.000 --> 24:18.000]  Окей, нужно еще крупнее, например,
[24:18.000 --> 24:20.000]  А в степени А.
[24:26.000 --> 24:28.000]  Не получается поломать.
[24:28.000 --> 24:30.000]  В общем, утверждение такое, что
[24:30.000 --> 24:32.000]  если прям очень громоздкие формулы писать
[24:32.000 --> 24:34.000]  посреди строк, то есть
[24:34.000 --> 24:36.000]  некий риск, кстати,
[24:36.000 --> 24:38.000]  не знаю, как точно можно сделать,
[24:38.000 --> 24:40.000]  это способ, который мы еще не говорили,
[24:40.000 --> 24:42.000]  но придется им воспользоваться, иначе ничего не получится.
[24:42.000 --> 24:44.000]  Например, поставить сумму
[24:44.000 --> 24:46.000]  с индексами,
[24:46.000 --> 24:48.000]  которые будут
[24:48.000 --> 24:50.000]  прям сверху и снизу.
[24:54.000 --> 24:56.000]  Да, получилось.
[24:56.000 --> 24:58.000]  Вот если есть некая очень толстая по высоте формула,
[24:58.000 --> 25:00.000]  она возьмет
[25:00.000 --> 25:02.000]  увеличит высоту всей строки,
[25:02.000 --> 25:04.000]  а форматирование текста поплывет,
[25:04.000 --> 25:06.000]  будет не очень симпатично,
[25:06.000 --> 25:08.000]  с этим хочется бороться.
[25:08.000 --> 25:10.000]  Первый способ бороться, это, конечно, не писать такие формулы,
[25:10.000 --> 25:12.000]  но если никуда не деться, нужно делать лайн спред
[25:12.000 --> 25:14.000]  более разумным.
[25:14.000 --> 25:16.000]  Обычно подходит что-то вроде 1.4, 1.5,
[25:16.000 --> 25:18.000]  ровно 1.4.
[25:18.000 --> 25:20.000]  Если это не сработает,
[25:20.000 --> 25:22.000]  то я сделаю еще один комментарий,
[25:22.000 --> 25:24.000]  но вроде сработать должно.
[25:24.000 --> 25:26.000]  Окей, нет, дело в том, что
[25:26.000 --> 25:28.000]  шрифт обновляется не прям сразу,
[25:28.000 --> 25:30.000]  нужно сделать такую команду, как
[25:30.000 --> 25:32.000]  он буквально
[25:32.000 --> 25:34.000]  обновляет состояние шрифта.
[25:36.000 --> 25:38.000]  Это сделает то, что нужно,
[25:38.000 --> 25:40.000]  теперь все наши строки
[25:40.000 --> 25:42.000]  на одинаковом расстоянии,
[25:42.000 --> 25:44.000]  расстояние чуть меньше,
[25:44.000 --> 25:46.000]  не достаточно, все, что мы видели,
[25:46.000 --> 25:48.000]  выпирающиеся от этого дроп, которое
[25:48.000 --> 25:50.000]  сильно заставляет эту строчку от других отстоять,
[25:50.000 --> 25:52.000]  но вот
[25:52.000 --> 25:54.000]  стоит подгонять непосредственно для вашей задачи.
[25:54.000 --> 25:56.000]  Хватит ли вам такого расстояния,
[25:56.000 --> 25:58.000]  или нужно побольше, это все регулируемая вещь.
[26:00.000 --> 26:02.000]  Еще,
[26:02.000 --> 26:04.000]  советую обмянуть такие штуки, как
[26:04.000 --> 26:06.000]  ParIndent и ParSkip.
[26:06.000 --> 26:08.000]  Ну, во-первых, такой интерфейс,
[26:08.000 --> 26:10.000]  команда setLength буквально задает некие
[26:10.000 --> 26:12.000]  физические размеры по объектам,
[26:12.000 --> 26:14.000]  которые есть на странице. В данном случае,
[26:14.000 --> 26:16.000]  ParIndent – это отступ
[26:16.000 --> 26:18.000]  первой строки параграфа,
[26:18.000 --> 26:20.000]  буквально красная строка,
[26:20.000 --> 26:22.000]  а ParSkip – это расстояние между параграфами.
[26:22.000 --> 26:24.000]  Ну, параграфы – это точно то, что абзац.
[26:24.000 --> 26:26.000]  Тоже штука
[26:26.000 --> 26:28.000]  регулируемая, можно делать побольше,
[26:28.000 --> 26:30.000]  есть тоже какие-то стандарты, их можно
[26:30.000 --> 26:32.000]  использовать ими, но, в общем,
[26:32.000 --> 26:34.000]  на глаз тоже подбирается неплохо.
[26:34.000 --> 26:36.000]  Главное, что это вообще существует,
[26:36.000 --> 26:38.000]  и этим можно пользоваться.
[26:38.000 --> 26:40.000]  И последнее,
[26:40.000 --> 26:42.000]  вот на этот раз точно последнее, что касается
[26:42.000 --> 26:44.000]  о сформлении страницы – это Calentitula.
[26:44.000 --> 26:46.000]  Calentitula – это такая штука, которая пишет
[26:46.000 --> 26:48.000]  текст сверху всей страницы,
[26:48.000 --> 26:50.000]  снизу всей страницы, а вот примерно там же,
[26:50.000 --> 26:52.000]  где
[26:52.000 --> 26:54.000]  номер страницы и
[26:54.000 --> 26:56.000]  такие объекты.
[26:56.000 --> 26:58.000]  Ну, опять же, вы наверняка видели, что
[26:58.000 --> 27:00.000]  в каждой книге в верху страницы написано
[27:00.000 --> 27:02.000]  название книги, там автор
[27:02.000 --> 27:04.000]  или, может быть, какие-то еще побольше информации,
[27:04.000 --> 27:06.000]  и только потом весь основной текст, и так на каждой странице.
[27:06.000 --> 27:08.000]  Это все Calentitula, это тоже все легко
[27:08.000 --> 27:10.000]  регулируется.
[27:10.000 --> 27:12.000]  Следующим образом, ну, например, с помощью пакета,
[27:12.000 --> 27:14.000]  который я тут указал, TitlePS,
[27:14.000 --> 27:16.000]  наверняка есть
[27:16.000 --> 27:18.000]  другие, для тех, которые это вообще типично,
[27:18.000 --> 27:20.000]  что одна и та же дача может торчаться очень разными способами,
[27:20.000 --> 27:22.000]  они все более или менее эквивалентны,
[27:22.000 --> 27:24.000]  но вот я предлагаю такое, которое
[27:24.000 --> 27:26.000]  точно сработает и которое
[27:26.000 --> 27:28.000]  проверили. Интерфейс
[27:28.000 --> 27:30.000]  следующий,
[27:30.000 --> 27:32.000]  вводится такое понятие,
[27:32.000 --> 27:34.000]  как стиль страницы,
[27:34.000 --> 27:36.000]  new page style, задаю новый,
[27:36.000 --> 27:38.000]  и далее два аргумента, это
[27:38.000 --> 27:40.000]  команды, собственно, название стиля, который дальше будет
[27:40.000 --> 27:42.000]  использоваться, и вот содержимое. Содержимое
[27:42.000 --> 27:44.000]  задается так, задается
[27:44.000 --> 27:46.000]  set head, set foot,
[27:46.000 --> 27:48.000]  это задание
[27:48.000 --> 27:50.000]  верхнего и нижнего Calentitula, то есть
[27:50.000 --> 27:52.000]  header и footer, и далее три аргумента,
[27:52.000 --> 27:54.000]  левые, центральные, правые, собственно,
[27:54.000 --> 27:56.000]  надписи, для различия
[27:56.000 --> 27:58.000]  от 1 до 2.
[28:00.000 --> 28:02.000]  Ну, а head rule, foot rule,
[28:02.000 --> 28:04.000]  это толщина линии
[28:04.000 --> 28:06.000]  отделяющих кадра от текста
[28:06.000 --> 28:08.000]  и, соответственно, текста
[28:08.000 --> 28:10.000]  от футера. Можно делать это
[28:10.000 --> 28:12.000]  побольше, просто чтобы было заметно, разумеется, не
[28:12.000 --> 28:14.000]  рекомендуется делать так в реальной жизни.
[28:14.000 --> 28:16.000]  И теперь, когда у нас есть page style,
[28:16.000 --> 28:18.000]  мы можем его использовать, например,
[28:18.000 --> 28:20.000]  используем его
[28:20.000 --> 28:22.000]  в нашем документе.
[28:28.000 --> 28:30.000]  Да, ожидаемый эффект, мы получили,
[28:30.000 --> 28:32.000]  что...
[28:32.000 --> 28:34.000]  Ну, во-первых, Calentitula пока плохо видно,
[28:34.000 --> 28:36.000]  потому что мы забыли отрубить
[28:36.000 --> 28:38.000]  довольно плохо настроенные поля.
[28:38.000 --> 28:40.000]  Я верну в какое-то более разумное
[28:40.000 --> 28:42.000]  положение, скажем такое.
[28:42.000 --> 28:44.000]  Да, есть Calentitula,
[28:44.000 --> 28:46.000]  есть тексты
[28:46.000 --> 28:48.000]  и слева, и по центру, и справа, отделенные
[28:48.000 --> 28:50.000]  нужной толщиной линией,
[28:50.000 --> 28:52.000]  и то же самое снизу.
[28:52.000 --> 28:54.000]  Здорово, мы справились.
[28:54.000 --> 28:56.000]  И, как правило, снизу по центру указывается
[28:56.000 --> 28:58.000]  номер текущей страницы.
[28:58.000 --> 29:00.000]  Пока что предлагаю как мантеру использовать
[29:00.000 --> 29:02.000]  команду cepage.
[29:02.000 --> 29:04.000]  Вот утверждается, что она всегда протягивает номер
[29:04.000 --> 29:06.000]  текущей страницы. О том, что это,
[29:06.000 --> 29:08.000]  почему это работает, мы поговорим, когда будем
[29:08.000 --> 29:10.000]  говорить про счетчики, это будет не сегодня,
[29:10.000 --> 29:12.000]  но пока так.
[29:12.000 --> 29:14.000]  И ура,
[29:14.000 --> 29:16.000]  теперь у нас есть номер страницы. Понятно, что
[29:16.000 --> 29:18.000]  будет вторая страница, ну то есть следующая по счету.
[29:18.000 --> 29:20.000]  Номер будет другой, как раз такой, какой
[29:20.000 --> 29:22.000]  нужно.
[29:24.000 --> 29:26.000]  И да, стоит упомянуть,
[29:26.000 --> 29:28.000]  что штуки вроде patchstyle, это модификаторы,
[29:28.000 --> 29:30.000]  они работают пока
[29:30.000 --> 29:32.000]  несказанно обратно, пока мы его
[29:32.000 --> 29:34.000]  явно не отключим, пока не кончится блок
[29:34.000 --> 29:36.000]  и пока не будет включен другой модификатор.
[29:36.000 --> 29:38.000]  Если хочется модифицировать только
[29:38.000 --> 29:40.000]  текущую страницу,
[29:40.000 --> 29:42.000]  например, это верно бывает для
[29:42.000 --> 29:44.000]  случаев, когда вы делаете титульник,
[29:44.000 --> 29:46.000]  которым не нужны титулы,
[29:46.000 --> 29:48.000]  на котором нужен был голый без всего.
[29:48.000 --> 29:50.000]  Используется команда не patchstyle,
[29:50.000 --> 29:52.000]  а thispatchstyle. Она работает
[29:52.000 --> 29:54.000]  до конца текущей страницы, а не до конца,
[29:54.000 --> 29:56.000]  не до конца пока может.
[29:58.000 --> 30:00.000]  Вот.
[30:00.000 --> 30:02.000]  И штука осталась
[30:02.000 --> 30:04.000]  в этой части рассказа,
[30:04.000 --> 30:06.000]  наверное, случайно, следует принести
[30:06.000 --> 30:08.000]  следующую часть. Ну, в общем, есть такой
[30:08.000 --> 30:10.000]  пакет sol, который просто позволяет
[30:10.000 --> 30:12.000]  некоторые модификаторы начертания, которые мы уже
[30:12.000 --> 30:14.000]  начали писать.
[30:14.000 --> 30:16.000]  Ну, или как-то иногда упрощает нам жизнь
[30:16.000 --> 30:18.000]  следующим образом.
[30:18.000 --> 30:20.000]  Она добавляет команды sol, caps,
[30:20.000 --> 30:22.000]  ol и st.
[30:22.000 --> 30:24.000]  Sol это буквально
[30:24.000 --> 30:26.000]  следующая команда. Она берет текст
[30:26.000 --> 30:28.000]  и печатает его, но через пробел
[30:28.000 --> 30:30.000]  между каждой буквой.
[30:30.000 --> 30:32.000]  Команда caps применяет модификатор
[30:32.000 --> 30:34.000]  капитального начертания. Ну, и в прошлый раз
[30:34.000 --> 30:36.000]  вы видели. Команда ol
[30:36.000 --> 30:38.000]  это то же самое, что underline,
[30:38.000 --> 30:40.000]  это неквалентная вещь. Она просто подчеркивает весь
[30:40.000 --> 30:42.000]  текст, который является реагументом.
[30:42.000 --> 30:44.000]  Команда st это штучка,
[30:44.000 --> 30:46.000]  которая перечеркивает весь текст.
[30:46.000 --> 30:48.000]  Вот такое мне пока не перерождалось, но
[30:48.000 --> 30:50.000]  оно существует.
[30:50.000 --> 30:52.000]  Ура. Следующий больший раздел,
[30:52.000 --> 30:54.000]  который стоит хотя бы упомянуть сегодня.
[30:54.000 --> 30:56.000]  Как вставлять всякие
[30:56.000 --> 30:58.000]  изображения и всякие таблицы
[30:58.000 --> 31:00.000]  в тех.
[31:00.000 --> 31:02.000]  Ну, пример прямо сразу синтеза.
[31:02.000 --> 31:04.000]  Он сначала может быть немножко
[31:04.000 --> 31:06.000]  устрашающим, я его совет подробно
[31:06.000 --> 31:08.000]  разобрать.
[31:08.000 --> 31:10.000]  Я скопирую его
[31:10.000 --> 31:12.000]  и применю только для того, чтобы
[31:12.000 --> 31:14.000]  убедиться, что он работает. Ну, вернее,
[31:14.000 --> 31:16.000]  чтобы вы убедились, что он работает.
[31:16.000 --> 31:18.000]  А далее мы вернемся на слайды и просто
[31:18.000 --> 31:20.000]  поговорим, что происходит и почему
[31:20.000 --> 31:22.000]  он не так. Да, действительно,
[31:22.000 --> 31:24.000]  что-то загенерировалось, давайте обсуждать.
[31:24.000 --> 31:26.000]  Итак,
[31:26.000 --> 31:28.000]  интерфейс у таблицы такой. Во-первых,
[31:28.000 --> 31:30.000]  таблица это окружение.
[31:30.000 --> 31:32.000]  Так же, как мы видели в прошлый раз, скажем,
[31:32.000 --> 31:34.000]  окружение Center.
[31:34.000 --> 31:36.000]  Естественно, она открывается-закрывается,
[31:36.000 --> 31:38.000]  и на End.
[31:38.000 --> 31:40.000]  Далее
[31:40.000 --> 31:42.000]  идет
[31:42.000 --> 31:44.000]  некая специальная
[31:44.000 --> 31:46.000]  вида строка, которая регулирует форматирование
[31:46.000 --> 31:48.000]  таблицы.
[31:48.000 --> 31:50.000]  Читать ее нужно так.
[31:50.000 --> 31:52.000]  Каждая буковка C,
[31:52.000 --> 31:54.000]  R или L
[31:54.000 --> 31:56.000]  это отдельный столбец.
[31:56.000 --> 31:58.000]  Эта буковка обозначает, как будет
[31:58.000 --> 32:00.000]  выравниваться текст в рамках столбца.
[32:00.000 --> 32:02.000]  C по центру, R к правому краю,
[32:02.000 --> 32:04.000]  L к левому краю. Есть еще
[32:04.000 --> 32:06.000]  варианты настройки.
[32:06.000 --> 32:08.000]  Я их уполню, наверное, в следующий раз.
[32:08.000 --> 32:10.000]  Пока вот так.
[32:10.000 --> 32:12.000]  Это тоже будут какие-то буковки,
[32:12.000 --> 32:14.000]  возможно, с каким-то еще дополнительным аргументом.
[32:14.000 --> 32:16.000]  Еще поговорим.
[32:16.000 --> 32:18.000]  Некоторое количество прямых слеша между ними
[32:18.000 --> 32:20.000]  регулирует буквально
[32:20.000 --> 32:22.000]  сколько будет вертикальных черт
[32:22.000 --> 32:24.000]  отделять данный столбец с следующего.
[32:26.000 --> 32:28.000]  Как видим, тут действительно 4 столбца.
[32:28.000 --> 32:30.000]  Первые два оравниваются по центру.
[32:30.000 --> 32:32.000]  Третий по правому краю,
[32:32.000 --> 32:34.000]  четвертый по левому краю.
[32:34.000 --> 32:36.000]  И между ними ровно такое количество черточек,
[32:36.000 --> 32:38.000]  какое мы указали. Причем как между ними,
[32:38.000 --> 32:40.000]  так и там
[32:40.000 --> 32:42.000]  самого левого краю, самого правого краю таблицы.
[32:42.000 --> 32:44.000]  Тут тоже можно регулировать.
[32:44.000 --> 32:46.000]  А интерфейс самой таблицы, например, следующий.
[32:46.000 --> 32:48.000]  В рамках одной строки
[32:48.000 --> 32:50.000]  элементы разных столбцов
[32:50.000 --> 32:52.000]  отделяются амперсантами.
[32:52.000 --> 32:54.000]  Потому что раз я упоминал, что амперсант
[32:54.000 --> 32:56.000]  это спецсимвол, он в первый раз пригодился
[32:56.000 --> 32:58.000]  в такой ситуации.
[32:58.000 --> 33:00.000]  Ну и буквально такая запись,
[33:00.000 --> 33:02.000]  что вот контент всей строки,
[33:02.000 --> 33:04.000]  отделенная амперсантами,
[33:04.000 --> 33:06.000]  где нужно, записывается подряд.
[33:06.000 --> 33:08.000]  А чтобы строка кончилась, используется
[33:08.000 --> 33:10.000]  бутыляной бэкслэш.
[33:10.000 --> 33:12.000]  Это тот же самый бэкслэш, который делает переход
[33:12.000 --> 33:14.000]  на новую строку.
[33:14.000 --> 33:16.000]  И вот в частности, поэтому его не рекомендуется
[33:16.000 --> 33:18.000]  пользоваться самого к себе,
[33:18.000 --> 33:20.000]  потому что у него сейчас такое специальное изношение.
[33:20.000 --> 33:22.000]  И не только такое. Он много где перегружен
[33:22.000 --> 33:24.000]  на немножко другую семантику.
[33:24.000 --> 33:26.000]  Мы еще раз на окружении увидим.
[33:26.000 --> 33:28.000]  И в общем лучше его применять только там,
[33:28.000 --> 33:30.000]  где его ожидают.
[33:30.000 --> 33:32.000]  Ну и далее тут еще есть такая штука,
[33:32.000 --> 33:34.000]  команда ашлайн, которая просто рисует
[33:34.000 --> 33:36.000]  гаранитальную черту между данными двумя строками.
[33:36.000 --> 33:38.000]  Их может быть тоже несколько подряд.
[33:38.000 --> 33:40.000]  Давайте проверим,
[33:40.000 --> 33:42.000]  что это действительно верно.
[33:42.000 --> 33:44.000]  Вот ожидаемо, что дальше
[33:44.000 --> 33:46.000]  у нас будет три черты вместо одной.
[33:50.000 --> 33:52.000]  Что характерно, между ними
[33:52.000 --> 33:54.000]  нет черты
[33:54.000 --> 33:56.000]  вертикально.
[33:56.000 --> 33:58.000]  Возможно, это можно как-то настроить
[33:58.000 --> 34:00.000]  и я никогда не пытался.
[34:00.000 --> 34:02.000]  Наверняка все гуглится.
[34:02.000 --> 34:04.000]  Более того, можно делать
[34:04.000 --> 34:06.000]  черту, которая отделяет
[34:06.000 --> 34:08.000]  не все целцы друг от друга, а скажем,
[34:08.000 --> 34:10.000]  только второй и третий.
[34:10.000 --> 34:12.000]  А между первым и четвертым она просто не рисуется.
[34:12.000 --> 34:14.000]  Это будет команда стилайн.
[34:14.000 --> 34:16.000]  У нее есть такого вида
[34:16.000 --> 34:18.000]  специального аргумента. Через
[34:18.000 --> 34:20.000]  дефис пишут номера целца, с которого начать,
[34:20.000 --> 34:22.000]  и на котором закончить. Нумерация соединиться.
[34:22.000 --> 34:24.000]  И все включительно. В каждом месте скажу
[34:24.000 --> 34:26.000]  2 по 3,
[34:26.000 --> 34:28.000]  то увидим, что будет.
[34:28.000 --> 34:30.000]  Будет следующее.
[34:30.000 --> 34:32.000]  Первый столбец оказался без черты,
[34:32.000 --> 34:34.000]  последний тоже,
[34:34.000 --> 34:36.000]  а вот второй и третий действительно отделены друг от друга.
[34:36.000 --> 34:38.000]  Это бывает полезно. В некоторых таблицах
[34:38.000 --> 34:40.000]  бывает, что не все клетки
[34:40.000 --> 34:42.000]  нужно друг от друга отделять.
[34:42.000 --> 34:44.000]  Там есть еще некоторые вещи, вроде
[34:44.000 --> 34:46.000]  многостройщих и многостолбцовых
[34:46.000 --> 34:48.000]  ячеек,
[34:48.000 --> 34:50.000]  но в предыдущем тоже поговорим потом.
[34:50.000 --> 34:52.000]  Базовый интерфейс такой.
[34:54.000 --> 34:56.000]  И про изображение.
[34:56.000 --> 34:58.000]  Тоже пока очень коротко.
[34:58.000 --> 35:00.000]  Вот буквально есть такая команда include-graphics.
[35:00.000 --> 35:02.000]  То, что она делает, она вставляет картинку,
[35:02.000 --> 35:04.000]  лежащую по данному пути.
[35:04.000 --> 35:06.000]  Тут предложим пример.
[35:06.000 --> 35:08.000]  Аргументов include-graphics
[35:08.000 --> 35:10.000]  довольно много. Обязательно их всего один.
[35:10.000 --> 35:12.000]  Это будет до картинки. Причем
[35:12.000 --> 35:14.000]  как с указанием расширения
[35:14.000 --> 35:16.000]  .png, .tpg,
[35:16.000 --> 35:18.000]  так и без него. Он все равно разберется.
[35:18.000 --> 35:20.000]  Возможно, будет проблема, если
[35:20.000 --> 35:22.000]  у вас есть несколько файлов, которых одинаковые
[35:22.000 --> 35:24.000]  разное расширение, тогда он, наверное, может поругаться.
[35:24.000 --> 35:26.000]  Но глобально может не указывать.
[35:26.000 --> 35:28.000]  Скорее всего, у вас не будет такой ситуации.
[35:28.000 --> 35:30.000]  И есть обстоятельный аргумент,
[35:30.000 --> 35:32.000]  который пишется
[35:32.000 --> 35:34.000]  весь набор модификаторов стиля,
[35:34.000 --> 35:36.000]  который вам хочется указать. В данном случае
[35:36.000 --> 35:38.000]  я указываю только модификатор width.
[35:38.000 --> 35:40.000]  Всякие разные нужно гуглить.
[35:40.000 --> 35:42.000]  Они похожи на HTML.
[35:42.000 --> 35:44.000]  Но то, что вам часто будет приглажаться,
[35:44.000 --> 35:46.000]  скорее всего, это модификатор ширины
[35:46.000 --> 35:48.000]  или ему эквалютно модификатор высоты,
[35:48.000 --> 35:50.000]  что удобнее задать.
[35:50.000 --> 35:52.000]  И в качестве аргумента он
[35:52.000 --> 35:54.000]  принимает либо
[35:54.000 --> 35:56.000]  число с единственными измерениями,
[35:56.000 --> 35:58.000]  как те, которые мы видели раньше,
[35:58.000 --> 36:00.000]  или в сметрах миллиметрах,
[36:00.000 --> 36:02.000]  или в пойнтах, или в
[36:02.000 --> 36:04.000]  X или в M. По-разному можно.
[36:04.000 --> 36:06.000]  Еще один вариант
[36:06.000 --> 36:08.000]  это вот такого специального вида
[36:08.000 --> 36:10.000]  строка. Это переменная
[36:10.000 --> 36:12.000]  textWidth, в которой хранится
[36:12.000 --> 36:14.000]  ширина строки
[36:14.000 --> 36:16.000]  данного элемента
[36:16.000 --> 36:18.000]  текста. Причем если мы находимся, скажем,
[36:18.000 --> 36:20.000]  в рамках таблички в одном столце,
[36:20.000 --> 36:22.000]  то берется именно ширина этого столца.
[36:22.000 --> 36:24.000]  То есть какую ширину занимала бы
[36:24.000 --> 36:26.000]  строка текста в самом маленьком
[36:26.000 --> 36:28.000]  блоке, содержащем текущий элемент.
[36:28.000 --> 36:30.000]  Примерно такая идея.
[36:30.000 --> 36:32.000]  Ну и перед ней можно код числовой коэффициент.
[36:32.000 --> 36:34.000]  В данном случае 0.25, и поэтому получится
[36:34.000 --> 36:36.000]  кодик на четверть строки.
[36:36.000 --> 36:38.000]  Стоит также отметить,
[36:38.000 --> 36:40.000]  что вот такие вот
[36:40.000 --> 36:42.000]  и таблички, и картинки
[36:42.000 --> 36:44.000]  стоят обычно в завершении
[36:44.000 --> 36:46.000]  что-нибудь еще, поскольку
[36:46.000 --> 36:48.000]  по умолчанию они размещаются
[36:48.000 --> 36:50.000]  вот прям в ближайшую строку,
[36:50.000 --> 36:52.000]  к которой они могут уместиться.
[36:52.000 --> 36:54.000]  Довольно тесно, не очень хорошо выглядит.
[36:54.000 --> 36:56.000]  Лучше отформатировать, например, по центру,
[36:56.000 --> 36:58.000]  в муче окружения Center.
[36:58.000 --> 37:00.000]  Или вообще заворачивать в окружении
[37:00.000 --> 37:02.000]  Figure или Table.
[37:02.000 --> 37:04.000]  Потом что это, мы поговорим попозже.
[37:04.000 --> 37:06.000]  Но это как раз те самые объекты,
[37:06.000 --> 37:08.000]  которые подтягиваются в List of Figures,
[37:08.000 --> 37:10.000]  List of Tables. Это, в общем, способ некий
[37:10.000 --> 37:12.000]  более высокороднего взаимодействовать
[37:12.000 --> 37:14.000]  со всеми картинками, со всеми
[37:14.000 --> 37:16.000]  табличками и чуть
[37:16.000 --> 37:18.000]  точнее настраивать,
[37:18.000 --> 37:20.000]  как с этими объектами
[37:20.000 --> 37:22.000]  работать тексту в том плане, что
[37:22.000 --> 37:24.000]  обтекать их как-то, или оставлять
[37:24.000 --> 37:26.000]  на своей строке и не трогать.
[37:26.000 --> 37:28.000]  Это все настраиваемое, при этом будем потом
[37:28.000 --> 37:30.000]  говорить не сегодня.
[37:30.000 --> 37:32.000]  Но, опять же, базовый интерфейс, который
[37:32.000 --> 37:34.000]  стоит знать, он вот такой.
[37:34.000 --> 37:36.000]  Да, были ли какие-то вопросы
[37:36.000 --> 37:38.000]  по в третьей части?
[37:38.000 --> 37:40.000]  Здесь он автоматически
[37:40.000 --> 37:42.000]  сам решил, что хочет слева
[37:42.000 --> 37:44.000]  рисунок поставить, да?
[37:44.000 --> 37:46.000]  Ну, я бы сказал даже не так. По умолчанию
[37:46.000 --> 37:48.000]  поведение такое, что он всегда рисует слева.
[37:48.000 --> 37:50.000]  Я бы сказал, что у него в приоритете
[37:50.000 --> 37:52.000]  как можно левее и как можно выше
[37:52.000 --> 37:54.000]  разместить текущий объект.
[37:54.000 --> 37:56.000]  Вот.
[37:56.000 --> 37:58.000]  Ну, и если он не помещался бы там, то он
[37:58.000 --> 38:00.000]  бы выкинул его куда-нибудь вообще,
[38:00.000 --> 38:02.000]  куда-то хотел бы, и...
[38:02.000 --> 38:04.000]  Если бы он не помечался, скажем, по ширине,
[38:04.000 --> 38:06.000]  то он бы выкинул его куда-нибудь вообще, куда-то хотел бы, и...
[38:06.000 --> 38:08.000]  Если бы он не помечался, скажем, по ширине,
[38:08.000 --> 38:10.000]  блин, у меня с собой нет картинки,
[38:10.000 --> 38:12.000]  которую можно вставить. Ладно, скажу тогда на словах.
[38:12.000 --> 38:16.620]  Если бы он не помечался
[38:16.620 --> 38:17.640]  по ширине, то он бы просто вышел за пределы страницы.
[38:17.640 --> 38:18.120]  Ну, то есть сколько влезло бы, smooth будет дометвosely
[38:18.120 --> 38:19.520]  дорисовалось, дальше была критика будет Hawaii
[38:19.520 --> 38:20.560]  за пределы страницы.
[38:20.560 --> 38:22.560]  Если бы по высоте, он бы translitşt
[38:22.560 --> 38:24.560]  новую страницу чтобы хотя бы на нее уместиться.
[38:24.560 --> 38:26.560]  Если бы там места не хватило,
[38:26.560 --> 38:28.620]  то он бы влез из за пределы страницы тоже.
[38:28.620 --> 38:31.320]  liked Palm by HiChan
[38:31.320 --> 38:33.240]  но такого лучше вообще не допускать
[38:33.240 --> 38:35.240]  и всегда регулировать это параметрами
[38:35.240 --> 38:39.240]  высоты или там ширины, ну вот WITS или Festa-Height.
[38:46.240 --> 38:48.240]  Ну, все вроде понятно.
[38:48.240 --> 38:50.240]  Здорово, значит, двигаемся дальше.
[38:52.240 --> 38:55.240]  Второе важное, что стоит сегодня обсудить, это создание команд.
[38:56.240 --> 38:57.240]  Всякие юскейсы.
[38:58.240 --> 39:01.240]  Ну, их довольно много, мы сегодня увидим только самые простые.
[39:02.240 --> 39:05.240]  Да, что такое команда? Мы уже видели всякие разные.
[39:06.240 --> 39:08.240]  Команда – это, ну, некий набор символов после бэкслэша,
[39:09.240 --> 39:12.240]  который имеет какое-то свое поведение, ну, вот, который говорит компилятору
[39:13.240 --> 39:14.240]  нарисовать что-то особое.
[39:15.240 --> 39:17.240]  Можно задавать свои, интерфейс такой.
[39:18.240 --> 39:20.240]  Специальная команда, для этого есть NewCommand,
[39:21.240 --> 39:23.240]  которая в качестве аргументов принимает следующее.
[39:24.240 --> 39:26.240]  Принимает название команды, ну, то есть,
[39:27.240 --> 39:29.240]  на какой набор символов теху нужно триггериться,
[39:29.240 --> 39:30.240]  что вот, ага, это команда.
[39:31.240 --> 39:32.240]  Начинается слово, что у нас бэкслэша, разумеется.
[39:33.240 --> 39:35.240]  Дальше, аргумент опциональный – это количество аргументов.
[39:36.240 --> 39:37.240]  Их может вообще не быть у этой команды.
[39:38.240 --> 39:41.240]  В таком случае просто опускается, ну, этого часть.
[39:42.240 --> 39:44.240]  Ну, поскольку это скобки квадратные, видно, что это аргумент опциональный.
[39:45.240 --> 39:46.240]  Его может и не быть.
[39:47.240 --> 39:49.240]  Но если они есть, то они указываются именно после названия команды.
[39:50.240 --> 39:52.240]  Следующий аргумент, который тоже обязательный – второй из двух.
[39:53.240 --> 39:55.240]  Это непосредственно текст команды, то есть, буквально,
[39:56.240 --> 39:58.240]  что будет подставлено вместо названия команды.
[39:59.240 --> 40:00.240]  Вот такой жизненный пример.
[40:01.240 --> 40:03.240]  Часто бывает полезно рисовать частные предводные, например,
[40:04.240 --> 40:06.240]  и делать это, ну, например, вот так.
[40:07.240 --> 40:10.240]  Я, опять же, скопирую этот текст, чтобы не набирать его заново,
[40:11.240 --> 40:13.240]  чтобы проверить, что это работает.
[40:14.240 --> 40:16.240]  А здесь попробуем прочитать, что происходит.
[40:17.240 --> 40:18.240]  Я говорю, что вот хочу сделать команду derivative,
[40:19.240 --> 40:22.240]  ну, слово derivative, которое будет принимать два аргумента.
[40:23.240 --> 40:24.240]  И дело следующее.
[40:24.240 --> 40:25.240]  Дело следующее.
[40:26.240 --> 40:30.240]  Рисовать фрег, дробь, который будет в числителе значетчик partial,
[40:31.240 --> 40:33.240]  ну, который рисует вот этот вот перевернутый шестерку
[40:34.240 --> 40:35.240]  и частный предводный.
[40:36.240 --> 40:37.240]  И далее первый аргумент.
[40:38.240 --> 40:40.240]  Обращение к аргументу происходит через хэштег.
[40:41.240 --> 40:42.240]  А в знаменателе будет тоже значетчик partial,
[40:43.240 --> 40:45.240]  и второй аргумент тоже через хэштег.
[40:46.240 --> 40:48.240]  Ну, и проверим, что действительно работает.
[40:49.240 --> 40:51.240]  Тут мы, как видим, хочется, чтобы у нас отрисовалась
[40:51.240 --> 40:53.240]  один раз частный предводной f по х,
[40:54.240 --> 40:55.240]  один раз по у.
[40:59.240 --> 41:00.240]  Так, так, все попало.
[41:11.240 --> 41:13.240]  Подозреваю, что он не знает шестерку madbb.
[41:14.240 --> 41:16.240]  И поэтому предлагаю пока на это забить,
[41:17.240 --> 41:18.240]  просто сделать r.
[41:19.240 --> 41:20.240]  За шестеркой мы еще придем.
[41:22.240 --> 41:23.240]  Да.
[41:24.240 --> 41:26.240]  Ну, глобально это пока что для того, что мы написали, точно работает.
[41:27.240 --> 41:30.240]  Мы нарисовали частную производную, она нарисовалась так, как мы хотели.
[41:31.240 --> 41:33.240]  И при этом нам и пришлось набирать каждый раз заново
[41:34.240 --> 41:35.240]  фраг, потом на два раза partial,
[41:36.240 --> 41:37.240]  и еще отдельно x и y в нужных местах.
[41:38.240 --> 41:39.240]  Так, кажется, как-то удобнее.
[41:40.240 --> 41:41.240]  Ну, и для многого, при использовании моего кода,
[41:42.240 --> 41:43.240]  стоит заводить команды,
[41:44.240 --> 41:45.240]  и потом где-то пользоваться только ими.
[41:46.240 --> 41:48.240]  Может быть, это как-то понижает читаемость,
[41:48.240 --> 41:49.240]  ну, локально,
[41:50.240 --> 41:52.240]  для читателей, которые не знают, что это за команда такая.
[41:53.240 --> 41:54.240]  Но для вас это точно будет удобнее.
[41:55.240 --> 41:56.240]  Вам не придется каждый раз писать много одного и того же,
[41:57.240 --> 41:58.240]  и довольно унывально.
[41:59.240 --> 42:00.240]  Вторая команда, которую я привел,
[42:01.240 --> 42:03.240]  сделала бы нам символ r,
[42:04.240 --> 42:05.240]  но красивый,
[42:06.240 --> 42:07.240]  как вновь, чтобы сейчас насчистил,
[42:08.240 --> 42:09.240]  специального шрифта.
[42:10.240 --> 42:11.240]  Но вот конкретно у меня упало, потому что,
[42:12.240 --> 42:13.240]  опять же, голый пример, которым мало чего заинклужено,
[42:14.240 --> 42:16.240]  и в частности, нет пакета, который подключает шрифты из математики,
[42:16.240 --> 42:17.240]  и мы еще дойдем до того, как подключать,
[42:18.240 --> 42:19.240]  поэтому пока предлагаю просто это опустить.
[42:20.240 --> 42:22.240]  Хотя, наверное, я смогу вспомнить сам,
[42:23.240 --> 42:24.240]  как этот пакет выглядит,
[42:25.240 --> 42:26.240]  или угадать.
[42:27.240 --> 42:28.240]  Кажется, что MS-Font что-то такое.
[42:29.240 --> 42:30.240]  Да, наверное, MS-Font.
[42:31.240 --> 42:32.240]  Давайте попробуем
[42:33.240 --> 42:36.240]  вернуть на место команду backslash r,
[42:37.240 --> 42:39.240]  у которой, да, нет аргумента, количество аргументов,
[42:40.240 --> 42:41.240]  потому что она на вход ничего не принимает,
[42:42.240 --> 42:43.240]  и дальше только сам текст команды,
[42:43.240 --> 42:44.240]  буквально символ r, которым применяется команда msvb.
[42:45.240 --> 42:46.240]  Напоминаю, что если аргумент односимволный,
[42:47.240 --> 42:48.240]  того не нужно заворачивать скобки.
[42:49.240 --> 42:51.240]  Вот тех сам разберется, что вот это именно один символ-аргумент,
[42:52.240 --> 42:53.240]  и больше никаких.
[42:54.240 --> 42:55.240]  И ожидаемо, что если мы теперь поставим здесь backslash r,
[42:56.240 --> 42:57.240]  это будет уже команда,
[42:58.240 --> 42:59.240]  и она нарисует нам симпатичную букву r.
[43:01.240 --> 43:02.240]  Да, это работает.
[43:03.240 --> 43:05.240]  В целом, почти любая теховая работа
[43:06.240 --> 43:09.240]  начинается с того, что есть некоторые количества аргументов,
[43:09.240 --> 43:11.240]  которые говорят симпатичная буква c,
[43:12.240 --> 43:13.240]  она уже, наверное, чем-то занята,
[43:14.240 --> 43:15.240]  скажем, cn,
[43:16.240 --> 43:17.240]  потом симпатичная буква n,
[43:18.240 --> 43:19.240]  числа натуральные писать,
[43:20.240 --> 43:21.240]  симпатичная буква z.
[43:22.240 --> 43:23.240]  Это типичные вещи.
[43:24.240 --> 43:25.240]  Есть еще другие же ститы в математике,
[43:26.240 --> 43:27.240]  которые тоже часто пригождаются,
[43:28.240 --> 43:29.240]  мы про них еще поговорим.
[43:30.240 --> 43:31.240]  В общем, это очень удобно,
[43:32.240 --> 43:34.240]  потому что это потом впредь экономит себе аж 8 символов,
[43:35.240 --> 43:36.240]  которые надо было бы набирать иначе.
[43:36.240 --> 43:37.240]  Вся команда еще и пробил довольно много.
[43:38.240 --> 43:39.240]  Здорово.
[43:40.240 --> 43:41.240]  Понятно ли еще, что произошло?
[43:42.240 --> 43:43.240]  Ну, я так понимаю, что
[43:44.240 --> 43:45.240]  когда мы сдаем свои команды,
[43:46.240 --> 43:47.240]  нужно быть внимательным, чтобы
[43:48.240 --> 43:50.240]  то же имя, что уже существует, не используется.
[43:51.240 --> 43:52.240]  Да, это очень хорошее наблюдение.
[43:53.240 --> 43:54.240]  Действительно, если мы попробуем сдать
[43:55.240 --> 43:56.240]  команду, которая уже занята,
[43:57.240 --> 43:59.240]  какие мы знаем команды, которые точно заняты?
[44:00.240 --> 44:02.240]  Например, вот текст bf,
[44:03.240 --> 44:04.240]  команда, которая уже занята,
[44:04.240 --> 44:05.240]  попробуем ее переопределить.
[44:06.240 --> 44:07.240]  Скорее всего, он поругается
[44:08.240 --> 44:09.240]  и вообще упадет на спирту.
[44:10.240 --> 44:11.240]  Да, это надо убрать,
[44:12.240 --> 44:13.240]  потому что нет почт такой команды.
[44:14.240 --> 44:15.240]  Да, он говорит already defined,
[44:16.240 --> 44:17.240]  в общем, я так не могу.
[44:18.240 --> 44:19.240]  Для этого есть такой обход,
[44:20.240 --> 44:21.240]  не new command, а renew command.
[44:22.240 --> 44:24.240]  Он говорит, вот теперь мы переопределяем команду,
[44:25.240 --> 44:26.240]  она теперь делает другое.
[44:27.240 --> 44:28.240]  Кажется, у меня при этом будет прям следующий слайд.
[44:29.240 --> 44:30.240]  Да, действительно.
[44:31.240 --> 44:32.240]  Тут немножко другой use case.
[44:32.240 --> 44:33.240]  Вот мы в прошлый раз заметили,
[44:34.240 --> 44:35.240]  что некоторые греческие буквы
[44:36.240 --> 44:37.240]  плохо отрисовываются по умолчанию.
[44:38.240 --> 44:39.240]  Вернее, не плохо, они отрисовываются правильно,
[44:40.240 --> 44:41.240]  но по правильной точке зрения традиции
[44:42.240 --> 44:43.240]  американской типографии,
[44:44.240 --> 44:45.240]  они наши, нам не привычно.
[44:46.240 --> 44:47.240]  И вообще-то нам хочется навсегда отказаться
[44:48.240 --> 44:50.240]  от той традиции и пользоваться нашей,
[44:51.240 --> 44:52.240]  потому что скорее всего нам прямая буква phi
[44:53.240 --> 44:54.240]  нигде особо не пригодится.
[44:55.240 --> 44:56.240]  Сейчас, секундочку.
[44:57.240 --> 44:58.240]  Во-первых, я сначала
[44:59.240 --> 45:00.240]  снова нарисовываю эту букву,
[45:00.240 --> 45:01.240]  чтобы было на что смотреть.
[45:06.240 --> 45:07.240]  Epsilon.
[45:08.240 --> 45:09.240]  Ну и кажется, я еще капу приводил.
[45:12.240 --> 45:13.240]  Сейчас мы увидим, что по умолчанию
[45:14.240 --> 45:15.240]  они довольно плохи,
[45:16.240 --> 45:17.240]  по крайней мере для русскоязычного читателя.
[45:19.240 --> 45:20.240]  Да.
[45:21.240 --> 45:22.240]  Какая-то прямая phi,
[45:23.240 --> 45:24.240]  какая-то прямая epsilon,
[45:25.240 --> 45:26.240]  какая-то вообще непонятная капла.
[45:27.240 --> 45:28.240]  Есть для этого обход, можно просто сказать,
[45:28.240 --> 45:31.240]  var phi, var epsilon, var kappa.
[45:32.240 --> 45:34.240]  Локально это, конечно, решает нашу проблему.
[45:35.240 --> 45:36.240]  Сейчас мы это увидим.
[45:37.240 --> 45:38.240]  Не понял.
[45:39.240 --> 45:40.240]  Что-то она не знает.
[45:41.240 --> 45:42.240]  Тоже нужно же какой-то IMS что-то включать.
[45:43.240 --> 45:44.240]  Ладно.
[45:45.240 --> 45:46.240]  Капу пока не будем.
[45:47.240 --> 45:48.240]  Видимо, она тоже приезжает с каким-то пакетом от IMS.
[45:49.240 --> 45:50.240]  Я в прошлый раз запомнил, что их довольно много.
[45:51.240 --> 45:52.240]  Хотя опять-таки я могу просто угадать,
[45:53.240 --> 45:54.240]  какое-то мне куда идет.
[45:55.240 --> 45:56.240]  Наверное, IMSSync должен сработать.
[45:56.240 --> 45:57.240]  Это не что-то новое.
[45:58.240 --> 45:59.240]  Это в прошлый раз было,
[46:00.240 --> 46:01.240]  что вот есть некий набор пакетов от IMS,
[46:02.240 --> 46:03.240]  которые можно всегда подключать.
[46:04.240 --> 46:05.240]  Они ничего не попортят.
[46:06.240 --> 46:07.240]  Но поскольку это голый пример,
[46:08.240 --> 46:09.240]  я каждый раз забываю, что он голый
[46:10.240 --> 46:11.240]  и что-то чего-то не хватает.
[46:12.240 --> 46:13.240]  Огонь сработало.
[46:14.240 --> 46:15.240]  Вот.
[46:16.240 --> 46:17.240]  Локально мы решили проблему.
[46:18.240 --> 46:19.240]  Мы смогли отрисовать символы так, как мы хотели,
[46:20.240 --> 46:21.240]  используя команду начинающего существования.
[46:22.240 --> 46:23.240]  Глобально проблема осталась,
[46:24.240 --> 46:25.240]  потому что у нас все еще очень длинные названия
[46:26.240 --> 46:27.240]  на обычной ECAP порисовали вот такие штуки,
[46:28.240 --> 46:29.240]  а не те, которые мы видели раньше.
[46:30.240 --> 46:31.240]  Но наш выход – это RenewCommand.
[46:32.240 --> 46:34.240]  Мы говорим, что вот теперь команда phi
[46:35.240 --> 46:36.240]  делает то, что раньше делала команда var phi.
[46:37.240 --> 46:38.240]  Напинаю интерфейс.
[46:39.240 --> 46:40.240]  Сначала название команды,
[46:41.240 --> 46:42.240]  которую мы переопределяем,
[46:43.240 --> 46:44.240]  потом то, что она делает.
[46:45.240 --> 46:46.240]  Вот.
[46:47.240 --> 46:48.240]  Ну, и то же самое с AppSoul на MacApp.
[46:50.240 --> 46:51.240]  Можно сделать, скажем, Apps,
[46:52.240 --> 46:53.240]  но тогда уже это, наверное, будет NewCommand,
[46:54.240 --> 46:55.240]  потому что, скорее всего,
[46:56.240 --> 46:57.240]  команды ее раньше не было.
[46:58.240 --> 46:59.240]  А если мы говорим про переопределение
[47:00.240 --> 47:01.240]  и хотим прям точно попасть,
[47:02.240 --> 47:03.240]  то мы пишем AppSoul.
[47:04.240 --> 47:06.240]  И проверим, что это действительно сработает.
[47:07.240 --> 47:08.240]  Да, ожидаемый сейчас результат,
[47:09.240 --> 47:10.240]  что ничего не изменится.
[47:11.240 --> 47:12.240]  Вот мы убрали вары,
[47:13.240 --> 47:14.240]  но при этом все еще будет все рисоваться так,
[47:15.240 --> 47:16.240]  как если бы это было с варами.
[47:17.240 --> 47:18.240]  И да, действительно, это сработало.
[47:19.240 --> 47:20.240]  Вот.
[47:21.240 --> 47:22.240]  Ну, действительно,
[47:23.240 --> 47:25.240]  еще полезное такое предупреждение.
[47:26.240 --> 47:27.240]  Можно случайно переопределить
[47:28.240 --> 47:29.240]  что-то важное.
[47:30.240 --> 47:31.240]  И это, конечно, будет верно
[47:32.240 --> 47:33.240]  только в рамках вашего документа,
[47:34.240 --> 47:35.240]  причем только вот,
[47:36.240 --> 47:37.240]  начиная с вашего момента переопределения
[47:38.240 --> 47:39.240]  и до конца документа.
[47:40.240 --> 47:41.240]  Если вы эту строчку уберете
[47:42.240 --> 47:43.240]  и перекапеллируете заново,
[47:44.240 --> 47:45.240]  то все починится.
[47:46.240 --> 47:47.240]  Но глобально, ваш документ,
[47:48.240 --> 47:49.240]  это может на время одной компрессии попортить.
[47:50.240 --> 47:51.240]  Если вы не уверены,
[47:52.240 --> 47:53.240]  что вы не попортите ничего
[47:54.240 --> 47:55.240]  переопределением команды,
[47:56.240 --> 47:57.240]  а иначе вот не стоит.
[47:58.240 --> 47:59.240]  Иначе лучше придумать новое название.
[48:00.240 --> 48:01.240]  Скажем, для Epsilon, мне кажется,
[48:02.240 --> 48:03.240]  очень даже годится команда EPS.
[48:04.240 --> 48:05.240]  В чем бы нет.
[48:06.240 --> 48:07.240]  Проверишь, что это работает?
[48:08.240 --> 48:09.240]  Ну, хотя, разумеется, должно.
[48:10.240 --> 48:11.240]  Не вижу препятствий.
[48:12.240 --> 48:13.240]  Ну, действительно,
[48:14.240 --> 48:15.240]  Epsilon теперь рисуется с командой EPS.
[48:16.240 --> 48:17.240]  Можешь сделать так.
[48:18.240 --> 48:19.240]  Тут дело вкуса, никакой разницы.
[48:20.240 --> 48:21.240]  Да.
[48:22.240 --> 48:23.240]  Про команды более-менее все.
[48:24.240 --> 48:25.240]  Понятно ли еще сейчас?
[48:26.240 --> 48:27.240]  Ну, вроде понятно, да.
[48:28.240 --> 48:29.240]  Огонь.
[48:30.240 --> 48:31.240]  Тогда небольшая настройочка
[48:32.240 --> 48:33.240]  на тем, что мы только что обсуждали.
[48:34.240 --> 48:35.240]  Помимо команд, есть такая штука оператора.
[48:36.240 --> 48:37.240]  Это такая вещь в себе,
[48:38.240 --> 48:39.240]  чисто из математики пришедшая,
[48:40.240 --> 48:41.240]  ну, вернее, из математической режимовтики.
[48:42.240 --> 48:43.240]  Вот мы видели в прошлый раз,
[48:44.240 --> 48:45.240]  что есть штучки, скажем, как
[48:46.240 --> 48:47.240]  SinusX,
[48:48.240 --> 48:49.240]  и что то, что пишется перед X,
[48:50.240 --> 48:51.240]  вот это вот Sinus, называется оператором.
[48:52.240 --> 48:53.240]  Эффект, в рамках теха, у него такой.
[48:54.240 --> 48:55.240]  Он пишет такой эффект,
[48:56.240 --> 48:57.240]  что он пишет Sinus,
[48:58.240 --> 48:59.240]  ну или какой-то другой текст,
[49:00.240 --> 49:01.240]  не курсивом, как обычно в математике,
[49:02.240 --> 49:03.240]  а прямым шрифтом,
[49:04.240 --> 49:05.240]  и еще грамотно расставляет пробел
[49:06.240 --> 49:07.240]  между собственным названием команды и аргументом.
[49:08.240 --> 49:09.240]  Очень часто бывает нужно,
[49:10.240 --> 49:11.240]  особенно в алгебре,
[49:12.240 --> 49:13.240]  задавать свои операторы,
[49:14.240 --> 49:15.240]  интерфейс у этого такой.
[49:16.240 --> 49:17.240]  Буквально DeclareMathOperator.
[49:18.240 --> 49:19.240]  Объявите свой оператор в математике.
[49:20.240 --> 49:21.240]  У него два аргумента.
[49:22.240 --> 49:23.240]  Так же, как и с NewCommand,
[49:24.240 --> 49:25.240]  аргументы прямо в таком же порядке.
[49:26.240 --> 49:27.240]  Как мы хотим потом к ней обращаться,
[49:28.240 --> 49:29.240]  а потом тот текст,
[49:30.240 --> 49:31.240]  который будет написан в оператор.
[49:32.240 --> 49:33.240]  В данном случае, я хочу скажем,
[49:34.240 --> 49:35.240]  операторы ядра и образа,
[49:36.240 --> 49:37.240]  ну поскольку они были в представстве в примере.
[49:38.240 --> 49:39.240]  Но вот я опасаюсь,
[49:40.240 --> 49:41.240]  что просто BackslashIm
[49:42.240 --> 49:44.240]  уже занято под команду
[49:45.240 --> 49:47.240]  им как мнимая часть комплексного числа.
[49:48.240 --> 49:50.240]  Это рисует некий спецсимвол,
[49:51.240 --> 49:52.240]  и в общем, не стоит рисковать.
[49:53.240 --> 49:54.240]  Как-то вот я не умею делать,
[49:54.240 --> 49:55.240]  чтобы это было одновременно
[49:56.240 --> 49:57.240]  и переопределение еще и оператор,
[49:58.240 --> 49:59.240]  чтобы все работало,
[50:00.240 --> 50:01.240]  будем делать вот так.
[50:02.240 --> 50:03.240]  Команда немножко длиннее,
[50:04.240 --> 50:05.240]  но это ничего страшного.
[50:06.240 --> 50:07.240]  И вот утверждается,
[50:08.240 --> 50:09.240]  что нам это даст команды вида Kerr и Im,
[50:10.240 --> 50:11.240]  которые будут операторами
[50:12.240 --> 50:13.240]  и будут грамотно отрисовываться.
[50:14.240 --> 50:15.240]  Опять же скопирую код,
[50:16.240 --> 50:17.240]  проверю, что все заработает.
[50:18.240 --> 50:19.240]  Ну действительно все так.
[50:20.240 --> 50:21.240]  Да, у нас снова плохая буква phi,
[50:22.240 --> 50:23.240]  потому что я убрал ее переопределение,
[50:24.240 --> 50:26.240]  главное, что это получилось сделать.
[50:31.240 --> 50:32.240]  Тоже небольшая настройка.
[50:33.240 --> 50:34.240]  Как я уже упоминал,
[50:35.240 --> 50:36.240]  звездочка немножко меняет поведение
[50:37.240 --> 50:38.240]  некоторых команд.
[50:39.240 --> 50:40.240]  Тут тоже верно.
[50:41.240 --> 50:42.240]  Здесь она означает следующее.
[50:43.240 --> 50:44.240]  По умолчанию, для оператора
[50:45.240 --> 50:46.240]  верхние и нижние индексы
[50:47.240 --> 50:48.240]  это верхние и нижние индексы.
[50:49.240 --> 50:50.240]  Сейчас я сделаю некорректную
[50:51.240 --> 50:52.240]  отсутствия математики запись,
[50:52.240 --> 50:53.240]  что значит.
[50:54.240 --> 50:55.240]  Допустим, у размерности есть
[50:56.240 --> 50:57.240]  какой-то индекс сверху А,
[50:58.240 --> 50:59.240]  и какой-то индекс снизу Б.
[51:00.240 --> 51:01.240]  Для обычного оператора они отрисуются
[51:02.240 --> 51:03.240]  просто как индексы.
[51:04.240 --> 51:05.240]  Но бывают операторы, для которых нужно,
[51:06.240 --> 51:07.240]  чтобы это были прям верхние и нижние пределы.
[51:08.240 --> 51:09.240]  В чем разница?
[51:10.240 --> 51:11.240]  Текст рисуется не сбоку от символа,
[51:12.240 --> 51:13.240]  а прямо под ним и над ним соответственно.
[51:14.240 --> 51:15.240]  Если я здесь добавлю звездочку,
[51:16.240 --> 51:17.240]  то...
[51:18.240 --> 51:19.240]  Сейчас, неправда.
[51:20.240 --> 51:21.240]  Для Дима это не получится сделать,
[51:22.240 --> 51:23.240]  потому что это оператор,
[51:24.240 --> 51:25.240]  который работал с коробки,
[51:26.240 --> 51:27.240]  он уже был определен для нас.
[51:28.240 --> 51:29.240]  Я хочу свой определить, давайте
[51:30.240 --> 51:31.240]  про им говорим.
[51:32.240 --> 51:33.240]  Сначала был просто им с индексами,
[51:34.240 --> 51:35.240]  а вот теперь я хочу, чтобы это
[51:36.240 --> 51:37.240]  были для него пределы сверху и снизу.
[51:38.240 --> 51:39.240]  Я ставлю звезду, и утверждаю,
[51:40.240 --> 51:41.240]  что все заработает.
[51:42.240 --> 51:43.240]  А, тут еще нужна одна оговорка.
[51:44.240 --> 51:45.240]  Сейчас я в режиме математики
[51:46.240 --> 51:47.240]  внутри строки.
[51:48.240 --> 51:49.240]  Внутри строки, что пределы,
[51:50.240 --> 51:51.240]  что индексы эквивалентны.
[51:52.240 --> 51:53.240]  Внутри строчная формула,
[51:54.240 --> 51:55.240]  которая там текст,
[51:56.240 --> 51:57.240]  потом еще какой-то текст,
[51:58.240 --> 51:59.240]  и вот оно все рисуется в одну строку
[52:00.240 --> 52:01.240]  и не парится.
[52:02.240 --> 52:03.240]  Чтобы эти индексы,
[52:04.240 --> 52:05.240]  переходящие в пределы,
[52:06.240 --> 52:07.240]  имели эффект, нужно, чтобы формула
[52:08.240 --> 52:09.240]  была выключной.
[52:10.240 --> 52:11.240]  То есть, завернутой в экранированные
[52:12.240 --> 52:13.240]  квадратные скобки.
[52:14.240 --> 52:15.240]  Мы это просто раз обсуждали,
[52:16.240 --> 52:17.240]  что они немножко меняют поведение
[52:18.240 --> 52:19.240]  в математике.
[52:20.240 --> 52:21.240]  В частности, вот такой есть эффект.
[52:22.240 --> 52:23.240]  И теперь у оператора им
[52:24.240 --> 52:25.240]  есть верх и нижний пределы.
[52:26.240 --> 52:27.240]  Что бы они не значили,
[52:28.240 --> 52:29.240]  не очень важно.
[52:30.240 --> 52:31.240]  Из жизненных примеров, например,
[52:32.240 --> 52:33.240]  всякие арг-максы, арг-мины
[52:34.240 --> 52:35.240]  требуют подписи сверху снизу.
[52:36.240 --> 52:37.240]  Или просто максимум минимум.
[52:38.240 --> 52:39.240]  Но максимум минимум наверняка
[52:40.240 --> 52:41.240]  уже есть в стихе.
[52:42.240 --> 52:43.240]  Я даже в этом прям уверен.
[52:44.240 --> 52:45.240]  Они точно есть в стихе.
[52:46.240 --> 52:47.240]  А вот арг-максов, например, нет.
[52:48.240 --> 52:49.240]  Нужно создавать слой.
[52:50.240 --> 52:51.240]  Делается это вот так.
[52:52.240 --> 52:53.240]  Это буду нужно, наверное, раз в жизни.
[52:54.240 --> 52:55.240]  Но, в общем, можно делать
[52:56.240 --> 52:57.240]  через свои бинарные операции.
[52:58.240 --> 52:59.240]  Ну, тут такая же история,
[53:00.240 --> 53:01.240]  как с операторами,
[53:02.240 --> 53:03.240]  что вся райтница именно в расположении
[53:04.240 --> 53:05.240]  пробелов грамотно.
[53:06.240 --> 53:07.240]  Нужно, чтобы бинарная операция
[53:08.240 --> 53:09.240]  размещала пробел и перед собой,
[53:10.240 --> 53:11.240]  и после себя, и чтобы это хорошо
[53:12.240 --> 53:13.240]  выглядело.
[53:14.240 --> 53:15.240]  Ну, тут такой пример.
[53:16.240 --> 53:17.240]  Как это делается?
[53:18.240 --> 53:19.240]  Снова не комманд.
[53:20.240 --> 53:21.240]  Обычно не комманд.
[53:22.240 --> 53:23.240]  Это текст, который будет внутри написан.
[53:24.240 --> 53:25.240]  В данном случае внутри написанный текст,
[53:26.240 --> 53:27.240]  это просто процент.
[53:28.240 --> 53:29.240]  Он экранирован, поскольку
[53:30.240 --> 53:31.240]  обычный процент в стихе,
[53:32.240 --> 53:33.240]  он, кажется, в комментарии делает.
[53:34.240 --> 53:35.240]  Что-то я уже мог перепутать.
[53:36.240 --> 53:37.240]  Да, в комментарии.
[53:38.240 --> 53:39.240]  Ну и, разумеется, мы хотим, чтобы
[53:40.240 --> 53:41.240]  процент, а не начало комментария,
[53:42.240 --> 53:43.240]  поэтому его экранируем.
[53:44.240 --> 53:45.240]  Ну и вот уж не буду копировать
[53:46.240 --> 53:47.240]  такой результат.
[53:48.240 --> 53:49.240]  Это теоретически может пригодиться,
[53:50.240 --> 53:51.240]  если в какой-то алгебре занимаетесь.
[53:52.240 --> 53:53.240]  Я думаю, что про кастомную команду все.
[53:54.240 --> 53:55.240]  Да, и сейчас разумно спросить,
[53:56.240 --> 53:57.240]  было ли понятно от этого часть
[53:58.240 --> 53:59.240]  про операторы и про операции?
[54:05.240 --> 54:06.240]  Ну, вроде понятно,
[54:09.240 --> 54:11.240]  но не понятно, когда это прямо
[54:12.240 --> 54:13.240]  использовать.
[54:14.240 --> 54:15.240]  Ну, я думаю, что вы в это
[54:16.240 --> 54:17.240]  прямо уверуете, когда у вас
[54:18.240 --> 54:19.240]  на всякие операторы будут на алгебре
[54:20.240 --> 54:21.240]  возникать в больших количествах.
[54:22.240 --> 54:23.240]  Ну, если вопросов других,
[54:24.240 --> 54:25.240]  кстати, не того,
[54:26.240 --> 54:27.240]  где это применять,
[54:28.240 --> 54:29.240]  а как это реализовывать, нет,
[54:30.240 --> 54:31.240]  то в общем здорово.
[54:32.240 --> 54:33.240]  Тут довольно простой интерфейс,
[54:34.240 --> 54:35.240]  тем более, что есть слайды,
[54:36.240 --> 54:37.240]  их потом скину, конечно,
[54:38.240 --> 54:39.240]  можно будет смотреть, пользоваться,
[54:40.240 --> 54:41.240]  так что выйти, двигаться дальше.
[54:42.240 --> 54:43.240]  Немножко поговорим про окружение.
[54:44.240 --> 54:45.240]  Важная вещь, которую
[54:46.240 --> 54:47.240]  ссылок мы нашли в прошлый раз,
[54:48.240 --> 54:49.240]  что есть такая штука,
[54:50.240 --> 54:51.240]  номированные, маркированные списки.
[54:52.240 --> 54:53.240]  Ну, они делают буквально то,
[54:54.240 --> 54:55.240]  как они называются.
[54:56.240 --> 54:57.240]  Есть окружение itemize,
[54:58.240 --> 54:59.240]  оно делает маркированный список.
[55:00.240 --> 55:01.240]  Есть окружение enumerate,
[55:02.240 --> 55:03.240]  оно делает номерованный список.
[55:04.240 --> 55:05.240]  Каждый элемент списка
[55:06.240 --> 55:07.240]  начинается с команды item.
[55:08.240 --> 55:09.240]  Ну, с большим разумеется.
[55:10.240 --> 55:11.240]  Я могу это скопировать,
[55:12.240 --> 55:13.240]  проверить, что это
[55:14.240 --> 55:15.240]  отрисуется так же, как презентация,
[55:16.240 --> 55:17.240]  но как бы разумеется, должно.
[55:22.240 --> 55:23.240]  Ну, действительно, мы получили
[55:24.240 --> 55:25.240]  какой-то список, у которого есть маркеры,
[55:26.240 --> 55:27.240]  и какой список, у которого есть номера.
[55:28.240 --> 55:29.240]  Возникает закономерный вопрос,
[55:30.240 --> 55:31.240]  можно ли сделать маркеры другими?
[55:32.240 --> 55:33.240]  Можно. Для этого есть у команды item
[55:34.240 --> 55:35.240]  аргумент опциональный,
[55:36.240 --> 55:37.240]  то есть в квадратной скобочке заворачиваемый,
[55:38.240 --> 55:39.240]  в которой пишется далее что-то,
[55:40.240 --> 55:41.240]  что вы хотите видеть в качестве маркера.
[55:42.240 --> 55:43.240]  Например, я хочу видеть в качестве маркера
[55:44.240 --> 55:45.240]  по какой-то причине значок плюс.
[55:46.240 --> 55:47.240]  Вот тут.
[55:48.240 --> 55:49.240]  Оставляю там плюс.
[55:50.240 --> 55:51.240]  И вот теперь у нас вместо точки
[55:52.240 --> 55:53.240]  это можно заменить глобально
[55:54.240 --> 55:55.240]  для всего документа,
[55:56.240 --> 55:57.240]  чтобы прям значение по умолчанию
[55:58.240 --> 56:00.240]  у item было не вот этими вот точечками,
[56:01.240 --> 56:02.240]  а какой-то другой символ.
[56:03.240 --> 56:04.240]  Я про это потом поговорю,
[56:05.240 --> 56:06.240]  видимо, в рециде, когда будем про счетчики говорить,
[56:07.240 --> 56:08.240]  тоже не сегодня.
[56:09.240 --> 56:10.240]  Ну, в общем, такая опция тоже бывает.
[56:11.240 --> 56:12.240]  Но локально для чего может быть нужно
[56:13.240 --> 56:14.240]  менять именно в конкретном списке
[56:15.240 --> 56:16.240]  символы маркеров?
[56:17.240 --> 56:18.240]  Скажем, вы пишете какое-то доказательство,
[56:19.240 --> 56:20.240]  скажем, у нас есть какая-то
[56:20.240 --> 56:21.240]  теорема в прошлом раз,
[56:22.240 --> 56:23.240]  есть какая-то теорема,
[56:25.240 --> 56:26.240]  и там есть какое-то утверждение вида,
[56:27.240 --> 56:28.240]  что там a, a
[56:29.240 --> 56:30.240]  эквивалентно b.
[56:33.240 --> 56:34.240]  Ну да, лест-райтера у команды
[56:35.240 --> 56:36.240]  рисует двустороннюю стрелочку.
[56:37.240 --> 56:39.240]  И вот когда вы хотите доказывать такую теорему,
[56:40.240 --> 56:41.240]  вы обычно доказываете сначала в одну сторону,
[56:42.240 --> 56:43.240]  а потом в другую.
[56:44.240 --> 56:45.240]  И для этого удобно делать
[56:46.240 --> 56:47.240]  маркированный список, у которого
[56:48.240 --> 56:49.240]  в качестве маркеров используется
[56:50.240 --> 56:51.240]  стрелочка в одну сторону
[56:52.240 --> 56:53.240]  и в другую сторону.
[56:54.240 --> 56:55.240]  На всякий случай я их заверну в доллары,
[56:56.240 --> 56:57.240]  поскольку это вообще говорят символы математики,
[56:58.240 --> 56:59.240]  и без них они могут просто не скомпелироваться,
[57:00.240 --> 57:01.240]  сказать, хочу математическое окружение.
[57:02.240 --> 57:03.240]  Чтобы точно такого не было,
[57:04.240 --> 57:05.240]  страхуемся.
[57:06.240 --> 57:07.240]  Лест-райтеру
[57:08.240 --> 57:09.240]  и то же самое райтеру.
[57:17.240 --> 57:18.240]  Смотрим, что будет.
[57:18.240 --> 57:19.240]  Ну, ура,
[57:20.240 --> 57:21.240]  заменилась на
[57:22.240 --> 57:23.240]  стрелочки влево, стрелочки вправо.
[57:24.240 --> 57:25.240]  Мне кажется, у меня даже была эта презентация.
[57:26.240 --> 57:27.240]  Да, действительно.
[57:28.240 --> 57:29.240]  Буквально такой же use case.
[57:30.240 --> 57:31.240]  Если мы хотим доказывать теорему обе стороны,
[57:32.240 --> 57:33.240]  мы скорее всего сделаем так.
[57:34.240 --> 57:35.240]  Это очень удобно.
[57:36.240 --> 57:37.240]  Еще для доказательств типично,
[57:38.240 --> 57:39.240]  что в правом нижнем уголке доказательства
[57:40.240 --> 57:41.240]  пишется какой-то значок,
[57:42.240 --> 57:43.240]  указывающий на его завершение,
[57:44.240 --> 57:45.240]  скажем, пустой квадратик или
[57:46.240 --> 57:47.240]  нарисованный квадратик.
[57:48.240 --> 57:49.240]  Ну, касательно списков,
[57:50.240 --> 57:51.240]  вот такая история.
[57:52.240 --> 57:53.240]  Нумерации тоже ее можно сильно регулировать.
[57:54.240 --> 57:55.240]  Можно сделать так, чтобы она была
[57:56.240 --> 57:57.240]  не арабской,
[57:58.240 --> 57:59.240]  а тоже или римской,
[58:00.240 --> 58:01.240]  или плотненскими буквами,
[58:02.240 --> 58:03.240]  или как угодно еще.
[58:04.240 --> 58:05.240]  И более того, если мы делаем вложенные списки,
[58:06.240 --> 58:07.240]  скажем, enumerate, а внутри него
[58:08.240 --> 58:09.240]  в качестве одного из идомов
[58:10.240 --> 58:11.240]  еще один enumerate вложенный,
[58:12.240 --> 58:13.240]  то вот тогда нумерация в вложенном списке
[58:14.240 --> 58:15.240]  будет уже другой.
[58:16.240 --> 58:17.240]  В данном случае будут плотненские буквы.
[58:18.240 --> 58:19.240]  То есть чтобы тут были, скажем,
[58:20.240 --> 58:21.240]  римские цифры вместо этого
[58:22.240 --> 58:23.240]  и чтобы оно было не в скобочках,
[58:24.240 --> 58:25.240]  как-то через девиз или еще по-другому.
[58:26.240 --> 58:27.240]  Тоже про это будем потом говорить.
[58:28.240 --> 58:29.240]  Но в эскавровании в интерфейс
[58:30.240 --> 58:31.240]  опять же вот такое.
[58:32.240 --> 58:33.240]  Есть окружение enumerate,
[58:34.240 --> 58:35.240]  есть команда item,
[58:36.240 --> 58:37.240]  которая вытеряет отдельные элементы этого окружения.
[58:38.240 --> 58:39.240]  О, про вложенные тут, конечно, тоже было, да?
[58:40.240 --> 58:41.240]  Нет, про вложенные не было.
[58:42.240 --> 58:43.240]  Ну ладно.
[58:44.240 --> 58:45.240]  Странно, заголовок в вложенные списки,
[58:46.240 --> 58:47.240]  а про вложенные списки тут нет.
[58:48.240 --> 58:49.240]  Просто нет примера.
[58:50.240 --> 58:51.240]  Ну и ладно, пример мы уже привыкли,
[58:52.240 --> 58:53.240]  так что ничего страшного.
[58:54.240 --> 58:55.240]  Да, и еще что касается окружений
[58:56.240 --> 58:57.240]  и что не очень сложно,
[58:58.240 --> 58:59.240]  как делать свои теоремы.
[59:00.240 --> 59:01.240]  В прошлый раз я показал буквально пример кода
[59:02.240 --> 59:03.240]  и просто сказал, что она работает вот так.
[59:04.240 --> 59:05.240]  Сейчас я предлагаю немножко подробнее
[59:06.240 --> 59:07.240]  по этому делу пройтись.
[59:08.240 --> 59:09.240]  Помню.
[59:10.240 --> 59:11.240]  Есть пакет ams-cm,
[59:12.240 --> 59:13.240]  ну, особо theorem.
[59:14.240 --> 59:15.240]  Он позволяет такой интерфейс,
[59:16.240 --> 59:17.240]  он позволяет сделать свои теоремы
[59:18.240 --> 59:19.240]  и сначала говорится,
[59:20.240 --> 59:22.240]  какой далее будет использоваться стиль теоремы.
[59:23.240 --> 59:25.240]  Это опять же штучка-модификатор,
[59:26.240 --> 59:27.240]  как, если помните, из сегодняшнего раза,
[59:28.240 --> 59:29.240]  page-style,
[59:30.240 --> 59:31.240]  который действует, пока его не переобредит
[59:32.240 --> 59:33.240]  на что-нибудь другое.
[59:34.240 --> 59:35.240]  И вот он говорит, что все теоремы,
[59:36.240 --> 59:37.240]  которые будут дальше объявлены,
[59:38.240 --> 59:39.240]  вот они будут именно в таком стиле plain.
[59:40.240 --> 59:41.240]  В стиле plain он получается,
[59:42.240 --> 59:43.240]  вот этот вот текст теоремы номер такой-то
[59:44.240 --> 59:45.240]  делает жирным,
[59:46.240 --> 59:47.240]  а сам текст теоремы просто обычный.
[59:48.240 --> 59:49.240]  Это скорее полезно,
[59:50.240 --> 59:51.240]  не только для теоремы,
[59:52.240 --> 59:53.240]  скажем, я использую для определений
[59:54.240 --> 59:55.240]  или для замечаний чего-нибудь такого,
[59:56.240 --> 59:57.240]  но для примера они очень важны.
[59:58.240 --> 59:59.240]  Пусть будет так.
[01:00:00.240 --> 01:00:01.240]  И сами команды объявления теоремы
[01:00:02.240 --> 01:00:03.240]  выглядят следующим образом.
[01:00:04.240 --> 01:00:05.240]  Эта команда не в theorem,
[01:00:06.240 --> 01:00:07.240]  команда, напомню, без звезды,
[01:00:08.240 --> 01:00:09.240]  делает нумерованные теоремы,
[01:00:10.240 --> 01:00:12.240]  причем нумерация для каждой категории теорем,
[01:00:13.240 --> 01:00:14.240]  ну, то есть для каждого ключевого слова,
[01:00:15.240 --> 01:00:16.240]  которое мы тут напишем,
[01:00:16.240 --> 01:00:17.240]  она будет своей.
[01:00:18.240 --> 01:00:19.240]  Более того, эту нумерацию можно управлять.
[01:00:20.240 --> 01:00:21.240]  Можно сказать, чтобы она
[01:00:22.240 --> 01:00:25.240]  нумеровалась вслед за текущей секцией.
[01:00:26.240 --> 01:00:28.240]  Это делается не за этим аргументом,
[01:00:29.240 --> 01:00:31.240]  который пишется после обязательных.
[01:00:32.240 --> 01:00:33.240]  Если вот я здесь укажу
[01:00:34.240 --> 01:00:35.240]  в качестве этого аргумента section,
[01:00:36.240 --> 01:00:37.240]  я скажу следующее.
[01:00:38.240 --> 01:00:39.240]  Теперь все теоремы категории theorem
[01:00:40.240 --> 01:00:41.240]  номируются так.
[01:00:42.240 --> 01:00:43.240]  Берет номер текущей секции,
[01:00:44.240 --> 01:00:45.240]  потом точка, а уже потом
[01:00:46.240 --> 01:00:47.240]  будет какая-то единица.
[01:00:48.240 --> 01:00:49.240]  Давайте пример кончик приведу.
[01:00:50.240 --> 01:00:52.240]  Пусть есть у нас секция первая.
[01:00:55.240 --> 01:00:56.240]  Есть какая-то теорема.
[01:01:05.240 --> 01:01:06.240]  И еще одна.
[01:01:07.240 --> 01:01:09.240]  Я утверждаю, что это будет теорема 1.1 и теорема 1.2.
[01:01:11.240 --> 01:01:12.240]  Ну, действительно так.
[01:01:13.240 --> 01:01:14.240]  Кстати, я немножко набрал
[01:01:14.240 --> 01:01:15.240]  стиль plane.
[01:01:16.240 --> 01:01:17.240]  Он делает текст самой теоремы крусивно.
[01:01:18.240 --> 01:01:19.240]  Вот.
[01:01:20.240 --> 01:01:21.240]  Ну, опять же, все стили куглиться.
[01:01:22.240 --> 01:01:23.240]  Их-то довольно мало.
[01:01:24.240 --> 01:01:25.240]  По-моему, всего три.
[01:01:26.240 --> 01:01:27.240]  По умолчанию можно делать свои,
[01:01:28.240 --> 01:01:29.240]  но мы это будем позже делать явно не сейчас.
[01:01:30.240 --> 01:01:31.240]  Это не очень просто.
[01:01:32.240 --> 01:01:33.240]  Вот.
[01:01:34.240 --> 01:01:35.240]  Ну и также можно сказать, что
[01:01:36.240 --> 01:01:37.240]  можно унаследовать нумерацию
[01:01:38.240 --> 01:01:39.240]  одной теоремы, одной категории теоремы
[01:01:40.240 --> 01:01:41.240]  за другую категорию теоремы.
[01:01:42.240 --> 01:01:43.240]  Вот скажем, как здесь.
[01:01:44.240 --> 01:01:45.240]  Перед следствием
[01:01:46.240 --> 01:01:47.240]  номируется уже после теоремы.
[01:01:48.240 --> 01:01:49.240]  То есть берется номер текущей теоремы,
[01:01:50.240 --> 01:01:51.240]  даже если он многочительный,
[01:01:52.240 --> 01:01:53.240]  там 1.1, например.
[01:01:54.240 --> 01:01:55.240]  Вот он берется целиком.
[01:01:56.240 --> 01:01:57.240]  И вот уже в рамках него,
[01:01:58.240 --> 01:01:59.240]  через еще одну точку,
[01:02:00.240 --> 01:02:01.240]  номируются объекты категории как короллари.
[01:02:02.240 --> 01:02:03.240]  Тут, наверное, есть пример,
[01:02:04.240 --> 01:02:05.240]  как это будет выглядеть.
[01:02:06.240 --> 01:02:07.240]  Да.
[01:02:08.240 --> 01:02:09.240]  Давайте посмотрим.
[01:02:10.240 --> 01:02:11.240]  Вот я говорю, беги на теорем,
[01:02:12.240 --> 01:02:13.240]  пишу какую-то теорему,
[01:02:14.240 --> 01:02:15.240]  сейчас пока не очень важно,
[01:02:16.240 --> 01:02:17.240]  еще обсудим.
[01:02:18.240 --> 01:02:19.240]  Но главное, что потом я пишу
[01:02:20.240 --> 01:02:21.240]  еще одну теорему ножей категории короллари,
[01:02:22.240 --> 01:02:23.240]  и вот ее нумерация будет такой.
[01:02:24.240 --> 01:02:25.240]  Она возьмет номер текущей теоремы,
[01:02:26.240 --> 01:02:27.240]  и дальше насчет съединиться.
[01:02:28.240 --> 01:02:29.240]  Если там будет еще одно следствие,
[01:02:30.240 --> 01:02:31.240]  будет следствие 1.2.2.
[01:02:32.240 --> 01:02:33.240]  Ну и далее понятно.
[01:02:34.240 --> 01:02:35.240]  Вот.
[01:02:36.240 --> 01:02:37.240]  Да, теперь про доказательства.
[01:02:38.240 --> 01:02:39.240]  Есть такая встроенная теорема,
[01:02:40.240 --> 01:02:41.240]  которая по умолчанию работает
[01:02:42.240 --> 01:02:43.240]  и уже объявлена,
[01:02:44.240 --> 01:02:47.240]  для теоремы из категории proof.
[01:02:49.240 --> 01:02:50.240]  Как раз-таки в конце
[01:02:51.240 --> 01:02:53.240]  всего блока текста пишется,
[01:02:54.240 --> 01:02:56.240]  сейчас сделаю, чтобы это было видно,
[01:02:57.240 --> 01:02:58.240]  квадратный значечек,
[01:02:59.240 --> 01:03:00.240]  ну, типа конец теоремы,
[01:03:01.240 --> 01:03:02.240]  конец доказательств теоремы.
[01:03:03.240 --> 01:03:05.240]  Можно управлять, каким он будет,
[01:03:06.240 --> 01:03:07.240]  переопределяя его,
[01:03:08.240 --> 01:03:09.240]  про переопределение таких вещей
[01:03:10.240 --> 01:03:11.240]  мы будем говорить примерно тогда же,
[01:03:12.240 --> 01:03:13.240]  когда про переопределение маркеров
[01:03:14.240 --> 01:03:15.240]  но вот глобальное отличие такое,
[01:03:16.240 --> 01:03:17.240]  что он сам догадается
[01:03:18.240 --> 01:03:19.240]  разместить в нужном месте
[01:03:20.240 --> 01:03:21.240]  значечек конца доказательства.
[01:03:22.240 --> 01:03:23.240]  То есть, если строк будет много,
[01:03:24.240 --> 01:03:25.240]  так бывает,
[01:03:26.240 --> 01:03:27.240]  и это как раз тоже более типично,
[01:03:28.240 --> 01:03:29.240]  я нагенерю просто какие-то строки,
[01:03:30.240 --> 01:03:31.240]  вот он в конце последней
[01:03:32.240 --> 01:03:33.240]  в нужном месте разместит этот квадратик.
[01:03:34.240 --> 01:03:35.240]  Более того, если последней строкой будет,
[01:03:36.240 --> 01:03:38.240]  ну скажем, какая-то формула,
[01:03:39.240 --> 01:03:43.240]  совершенно неважно, что там будет написано,
[01:03:45.240 --> 01:03:47.240]  поведение изначально будет не очень хорошее.
[01:03:48.240 --> 01:03:49.240]  Он разместит квадратик на
[01:03:50.240 --> 01:03:51.240]  новой текстовой строке.
[01:03:52.240 --> 01:03:53.240]  То есть, он увидит, что последнее,
[01:03:54.240 --> 01:03:55.240]  что происходит в теореме,
[01:03:56.240 --> 01:03:57.240]  не текстовая строка,
[01:03:58.240 --> 01:03:59.240]  он создает слою, пишет на ней.
[01:04:00.240 --> 01:04:01.240]  Это можно обойти, указав в конкретном месте
[01:04:02.240 --> 01:04:03.240]  команду get here.
[01:04:04.240 --> 01:04:05.240]  get – это QED,
[01:04:06.240 --> 01:04:07.240]  сокращение как раз для этого значечка.
[01:04:08.240 --> 01:04:09.240]  Ну, как 4D по-русски,
[01:04:10.240 --> 01:04:11.240]  QED, конечно, как-то переводится в латыни,
[01:04:12.240 --> 01:04:13.240]  сейчас не буду текстово шифровать,
[01:04:14.240 --> 01:04:15.240]  в общем, дело-то на следующее.
[01:04:16.240 --> 01:04:18.240]  Оно говорит, вот пишет квадратик
[01:04:19.240 --> 01:04:20.240]  прямо на этой строке, где я тебе указал.
[01:04:21.240 --> 01:04:22.240]  Не прямо в текущем месте,
[01:04:23.240 --> 01:04:24.240]  но в конце текущей строки.
[01:04:25.240 --> 01:04:26.240]  Это получается как-то покомпактнее,
[01:04:27.240 --> 01:04:28.240]  и мне кажется, лучше, если у вас
[01:04:29.240 --> 01:04:30.240]  доказательство кончается формулой,
[01:04:31.240 --> 01:04:32.240]  или скажем, каким-то маркированным списком,
[01:04:33.240 --> 01:04:35.240]  который тоже до и после себя оставляет
[01:04:36.240 --> 01:04:37.240]  некоторые пробелы,
[01:04:38.240 --> 01:04:39.240]  чтобы не было проблем, лучше делать уже
[01:04:40.240 --> 01:04:41.240]  внутри них get here.
[01:04:42.240 --> 01:04:43.240]  Более того, если я сделаю его даже
[01:04:44.240 --> 01:04:45.240]  на этой теореме, на какой-то строке,
[01:04:46.240 --> 01:04:47.240]  то он ее нарисует там,
[01:04:48.240 --> 01:04:49.240]  ну, некуда деваться,
[01:04:50.240 --> 01:04:51.240]  где сказали, там и нарисуют.
[01:04:52.240 --> 01:04:53.240]  Но это, конечно, не понятно, зачем нужно.
[01:04:54.240 --> 01:04:55.240]  Казалось бы, доказательство нужно сначала
[01:04:56.240 --> 01:04:57.240]  закончить, потом же квадратик рисовать.
[01:05:02.240 --> 01:05:03.240]  Да, про окружение,
[01:05:04.240 --> 01:05:05.240]  ну, по крайней мере, на сегодня тоже все.
[01:05:06.240 --> 01:05:07.240]  Давайте сама спрошу,
[01:05:08.240 --> 01:05:09.240]  было ли понятно.
[01:05:09.240 --> 01:05:10.240]  Там всем было понятно.
[01:05:11.240 --> 01:05:12.240]  Я очень рад, что так.
[01:05:17.240 --> 01:05:18.240]  Ну, и
[01:05:19.240 --> 01:05:20.240]  последнее на сегодня, что стоит обсудить,
[01:05:21.240 --> 01:05:22.240]  это еще немножко побольше проходов было,
[01:05:23.240 --> 01:05:24.240]  чем в прошлый раз.
[01:05:25.240 --> 01:05:26.240]  Во-первых, теки и шрифты.
[01:05:27.240 --> 01:05:28.240]  Мы в прошлый раз говорили про шрифты вне математики.
[01:05:29.240 --> 01:05:30.240]  Но три математики, они глобально,
[01:05:31.240 --> 01:05:32.240]  по крайней мере, те, что простенькие, похожи
[01:05:33.240 --> 01:05:34.240]  и даже пишутся похожими, как я.
[01:05:35.240 --> 01:05:36.240]  То есть, в том числе,
[01:05:36.240 --> 01:05:37.240]  те, что простенькие, похожи
[01:05:38.240 --> 01:05:39.240]  и даже пишутся похожими кавандали.
[01:05:40.240 --> 01:05:41.240]  Скажем, мы видели,
[01:05:42.240 --> 01:05:43.240]  мы точно видели textBF,
[01:05:44.240 --> 01:05:45.240]  мы точно видели textRM
[01:05:46.240 --> 01:05:47.240]  и точно видели textSF.
[01:05:48.240 --> 01:05:49.240]  В математике это делается mathBF,
[01:05:50.240 --> 01:05:51.240]  mathSRM, mathSF.
[01:05:52.240 --> 01:05:53.240]  Еще есть mathBB.
[01:05:54.240 --> 01:05:55.240]  Мы его видели, когда рисовали значок на чисел.
[01:05:56.240 --> 01:05:57.240]  И есть маскал.
[01:05:58.240 --> 01:05:59.240]  Это типа каллиграфические символы.
[01:06:00.240 --> 01:06:01.240]  Когда говорят, там,
[01:06:02.240 --> 01:06:03.240]  какой-нибудь п красивое или красивое,
[01:06:04.240 --> 01:06:05.240]  имеется в виду обычно
[01:06:06.240 --> 01:06:07.240]  маскал.
[01:06:08.240 --> 01:06:09.240]  Либо со шрифтом mathFrag,
[01:06:10.240 --> 01:06:11.240]  но это такой готический шрифт.
[01:06:12.240 --> 01:06:13.240]  В общем, их довольно много,
[01:06:14.240 --> 01:06:15.240]  я тут не все упасал, только парочку примеров.
[01:06:16.240 --> 01:06:17.240]  Они гуглится,
[01:06:18.240 --> 01:06:19.240]  и у всех интервейс одинаковый.
[01:06:20.240 --> 01:06:21.240]  Вот какая-то команда, и дальше,
[01:06:22.240 --> 01:06:23.240]  то, что является ее аргументом,
[01:06:24.240 --> 01:06:25.240]  заворачивается в такой-то шрифт.
[01:06:26.240 --> 01:06:27.240]  Какие бывают use-кейсы?
[01:06:28.240 --> 01:06:29.240]  mathBB нужно на фиг их в множество чисел.
[01:06:30.240 --> 01:06:31.240]  mathBF просто жирная шрифта,
[01:06:32.240 --> 01:06:33.240]  ему обычно всякие векторы матовцы выделяют.
[01:06:34.240 --> 01:06:35.240]  mathRM — это текст,
[01:06:36.240 --> 01:06:37.240]  с шрифт-засечками из обычного текста,
[01:06:38.240 --> 01:06:39.240]  им же рисуются всякие операторы.
[01:06:40.240 --> 01:06:41.240]  Если помните, в прошлый раз мы говорили,
[01:06:42.240 --> 01:06:43.240]  как писать синус разными способами,
[01:06:44.240 --> 01:06:45.240]  и там у нас был синус,
[01:06:46.240 --> 01:06:47.240]  как разовят шрифт mathRM.
[01:06:48.240 --> 01:06:49.240]  Он бывает нужен сам по себе,
[01:06:50.240 --> 01:06:51.240]  и вне операторов.
[01:06:52.240 --> 01:06:53.240]  Пишется вот так.
[01:06:54.240 --> 01:06:55.240]  Есть шрифт без засечек mathSF,
[01:06:56.240 --> 01:06:57.240]  ну, скажем, там,
[01:06:58.240 --> 01:06:59.240]  стандартные символы для мотождания дисперсии
[01:07:00.240 --> 01:07:01.240]  пишутся таким шрифтом,
[01:07:02.240 --> 01:07:03.240]  еще в 30.
[01:07:04.240 --> 01:07:05.240]  Маскал тоже бывает нужен.
[01:07:06.240 --> 01:07:07.240]  Какие нужны.
[01:07:08.240 --> 01:07:09.240]  Можно даже, кажется, делать свои.
[01:07:10.240 --> 01:07:11.240]  Ну, парочку я перечислил,
[01:07:12.240 --> 01:07:13.240]  уж хотя бы так.
[01:07:14.240 --> 01:07:15.240]  Да, опять же, как я уже говорил,
[01:07:16.240 --> 01:07:17.240]  если у нас там mathBBR
[01:07:18.240 --> 01:07:19.240]  очень много переиспользуется,
[01:07:20.240 --> 01:07:21.240]  мы хотим не каждый раз написать,
[01:07:22.240 --> 01:07:23.240]  а завернуть в команду в отдельную,
[01:07:24.240 --> 01:07:25.240]  но мы это уже делать научились.
[01:07:26.240 --> 01:07:27.240]  Мы уже научились делать new command,
[01:07:28.240 --> 01:07:29.240]  backflashr и все такое.
[01:07:30.240 --> 01:07:31.240]  Вот.
[01:07:32.240 --> 01:07:33.240]  И подробнее про пределы.
[01:07:34.240 --> 01:07:35.240]  Это что-то, что сегодня тоже уже было,
[01:07:36.240 --> 01:07:37.240]  случайная вмешка в другой момент.
[01:07:38.240 --> 01:07:39.240]  Человек просто копирует текст,
[01:07:40.240 --> 01:07:41.240]  посмотрю, что будет, и прокомментирует.
[01:07:54.240 --> 01:07:55.240]  Ага.
[01:07:56.240 --> 01:07:57.240]  Как видим, у нас есть
[01:07:58.240 --> 01:07:59.240]  похожего вида выражения,
[01:08:00.240 --> 01:08:01.240]  которые начинаются с sum
[01:08:02.240 --> 01:08:03.240]  и далее к какой-то верхней и нижней индексы,
[01:08:04.240 --> 01:08:05.240]  но пишутся они по-разному.
[01:08:06.240 --> 01:08:07.240]  Они пишутся просто как индексы,
[01:08:08.240 --> 01:08:09.240]  а потом как пределы.
[01:08:10.240 --> 01:08:11.240]  Более того,
[01:08:12.240 --> 01:08:13.240]  когда я точно такую же строку
[01:08:14.240 --> 01:08:15.240]  пишу не как формулу внутри строки в долларах,
[01:08:16.240 --> 01:08:17.240]  а как формула выключенного
[01:08:18.240 --> 01:08:19.240]  в квадратноскопах,
[01:08:20.240 --> 01:08:21.240]  они уже оба оказываются пределами вообще,
[01:08:22.240 --> 01:08:23.240]  и индексов уже каких-то вообще нет.
[01:08:24.240 --> 01:08:25.240]  Сейчас разберемся.
[01:08:26.240 --> 01:08:27.240]  Стоимость на следующий.
[01:08:28.240 --> 01:08:29.240]  По умолчанию вообще никакие способы
[01:08:30.240 --> 01:08:31.240]  сформулировать.
[01:08:33.240 --> 01:08:34.240]  Если у нас есть какой-то оператор,
[01:08:34.240 --> 01:08:35.240]  который был по умолчанию
[01:08:36.240 --> 01:08:37.240]  определен со звездочкой,
[01:08:38.240 --> 01:08:39.240]  то есть для него по умолчанию
[01:08:40.240 --> 01:08:41.240]  индексы верхней и нижней являются пределами,
[01:08:42.240 --> 01:08:44.240]  даже для него в рамках формулы внутри строки
[01:08:45.240 --> 01:08:46.240]  эти индексы в пределы переходить не будут,
[01:08:47.240 --> 01:08:48.240]  будут оставаться индексами.
[01:08:49.240 --> 01:08:50.240]  Если мы хотим это поведение изменить,
[01:08:51.240 --> 01:08:52.240]  мы явно указываем команду limits
[01:08:53.240 --> 01:08:54.240]  сразу после этого оператора,
[01:08:55.240 --> 01:08:56.240]  чтобы даже внутри строки
[01:08:57.240 --> 01:08:58.240]  индексы переходили в пределы.
[01:08:59.240 --> 01:09:00.240]  Делать так вообще говоря не рекомендуется,
[01:09:01.240 --> 01:09:02.240]  потому что это как раз портит все форматирование,
[01:09:02.240 --> 01:09:03.240]  делают строчку очень большой высоты,
[01:09:04.240 --> 01:09:05.240]  у нас расползают строки друг от друга,
[01:09:06.240 --> 01:09:07.240]  внутри текста это не очень хорошо,
[01:09:08.240 --> 01:09:09.240]  но если вдруг вам очень захотелось
[01:09:10.240 --> 01:09:11.240]  и выхода вы другого не видите,
[01:09:12.240 --> 01:09:13.240]  то делается это так с помощью команды limits.
[01:09:14.240 --> 01:09:15.240]  Более того, я подозреваю,
[01:09:16.240 --> 01:09:17.240]  команда limits позволяет пришить индексы
[01:09:18.240 --> 01:09:19.240]  в качестве пределов вообще к любому оператору,
[01:09:20.240 --> 01:09:21.240]  который даже по умолчанию предела не поддерживает,
[01:09:22.240 --> 01:09:23.240]  например, к оператору sinus.
[01:09:24.240 --> 01:09:26.240]  Оператору sinus явно индексы принимают
[01:09:27.240 --> 01:09:28.240]  именно как индексы, а не как пределы,
[01:09:29.240 --> 01:09:30.240]  но вот если я ему с limits,
[01:09:30.240 --> 01:09:31.240]  а нет, не сработало,
[01:09:32.240 --> 01:09:33.240]  но на самом деле слава богу.
[01:09:34.240 --> 01:09:36.240]  Значит, утверждение теперь такое,
[01:09:37.240 --> 01:09:39.240]  limits позволяет менять поведение только у операторов,
[01:09:40.240 --> 01:09:42.240]  которые были по умолчанию с индексами переходящих в пределы,
[01:09:43.240 --> 01:09:44.240]  то есть операторами подзвёдочкой.
[01:09:45.240 --> 01:09:46.240]  Ни для чего другого эта команда не нужна.
[01:09:47.240 --> 01:09:50.240]  И если вы хотите следовать какие-то рекомендации,
[01:09:51.240 --> 01:09:52.240]  как писать не очень страшный текст,
[01:09:53.240 --> 01:09:54.240]  лучше вообще никогда его не использовать,
[01:09:55.240 --> 01:09:56.240]  но если вы хотите следовать какие-то рекомендации,
[01:09:57.240 --> 01:09:58.240]  то лучше вообще никогда его не использовать,
[01:09:58.240 --> 01:09:59.240]  но если вы хотите следовать какие-то рекомендации,
[01:10:00.240 --> 01:10:01.240]  то лучше вообще никогда его не использовать,
[01:10:02.240 --> 01:10:03.240]  потому что если вы его используете,
[01:10:04.240 --> 01:10:05.240]  значит вы где-то внутри статьи хотите сделать очень высокую формулу
[01:10:06.240 --> 01:10:07.240]  и лучше так не делать.
[01:10:08.240 --> 01:10:09.240]  Вот.
[01:10:10.240 --> 01:10:11.240]  Ну и то, что мы уже видели,
[01:10:12.240 --> 01:10:13.240]  когда что-то делали суммами,
[01:10:14.240 --> 01:10:15.240]  когда мне хотелось просто перевести пример,
[01:10:16.240 --> 01:10:19.240]  есть операторы, у которых индексы переходят в пределы,
[01:10:20.240 --> 01:10:21.240]  и по умолчанию формулы на новой строке,
[01:10:22.240 --> 01:10:24.240]  в обычных, они, собственно, переходят в пределы,
[01:10:25.240 --> 01:10:26.240]  так как мы бы и ожидали.
[01:10:26.240 --> 01:10:28.240]  Но при этом, если это будет опять же оператор синуса,
[01:10:29.240 --> 01:10:30.240]  то ничего не произойдет.
[01:10:31.240 --> 01:10:33.240]  Они все еще будут верхними и нижними индексами, не пределами.
[01:10:34.240 --> 01:10:35.240]  Вот.
[01:10:36.240 --> 01:10:37.240]  То есть зависит это в первую очередь от того,
[01:10:38.240 --> 01:10:40.240]  какой у нас оператор, со звездочкой или без.
[01:10:41.240 --> 01:10:43.240]  И даже если мы хотим поведение поменять
[01:10:44.240 --> 01:10:45.240]  с помощью команды limits,
[01:10:46.240 --> 01:10:48.240]  у нас ничего не получится, если вначале этот оператор так не умел.
[01:10:49.240 --> 01:10:50.240]  Если мы хотим, чтобы он так научился,
[01:10:51.240 --> 01:10:53.240]  придется делать как-то ринью комод, как-то переопределять,
[01:10:54.240 --> 01:10:55.240]  и в общем, что-то довольно сложно,
[01:10:56.240 --> 01:10:57.240]  в общем, никогда не писать.
[01:10:59.240 --> 01:11:00.240]  Вот. Это обсудили.
[01:11:01.240 --> 01:11:02.240]  Ну и да, есть команда prod.
[01:11:03.240 --> 01:11:05.240]  Вот есть команда sum, которая рисует большую сигму для суммирования,
[01:11:06.240 --> 01:11:08.240]  а есть команда prod, которая рисует большую букву p для произведений,
[01:11:09.240 --> 01:11:10.240]  ну а слово product.
[01:11:12.240 --> 01:11:14.240]  Да, еще есть лекарственная стрелочка с надписями.
[01:11:15.240 --> 01:11:17.240]  Ну, тоже бывает нужна всякая алгебра.
[01:11:18.240 --> 01:11:19.240]  И есть два интерфейса.
[01:11:20.240 --> 01:11:22.240]  Ну, просто два разных способа это делать,
[01:11:23.240 --> 01:11:24.240]  в зависимости от того, как вам больше нравится.
[01:11:24.240 --> 01:11:26.240]  Если вы хотите, чтобы ваша стрелочка была обычного размера
[01:11:27.240 --> 01:11:28.240]  и просто как-то подписывалась,
[01:11:29.240 --> 01:11:31.240]  то вы просто берете и пишете верх-нижний, нижний индекс.
[01:11:32.240 --> 01:11:33.240]  Стрелочка это не оператор.
[01:11:34.240 --> 01:11:37.240]  Вернее так, уж точно не оператор с оведочкой.
[01:11:38.240 --> 01:11:40.240]  Поэтому для нее это будут просто верхние-нижние индексы,
[01:11:41.240 --> 01:11:42.240]  а не прям текст сверху и прям снизу.
[01:11:43.240 --> 01:11:44.240]  Если мы хотим, чтобы был текст сверху или снизу,
[01:11:45.240 --> 01:11:46.240]  это уже будут не обычные стрелочки, а стрелочки,
[01:11:47.240 --> 01:11:48.240]  которые начинаются буквы x.
[01:11:49.240 --> 01:11:50.240]  Вот.
[01:11:51.240 --> 01:11:52.240]  Ну вот, можно просто сравнить две строки.
[01:11:52.240 --> 01:11:59.440]  сравнить две строки, они отличаются примерно только этим. Ну ладно, еще тем, что на самом деле вот у этой команды
[01:11:59.440 --> 01:12:08.080]  собственно текст сверху и снизу является уже не индексами вообще, а специальными аргументами, причем что
[01:12:08.080 --> 01:12:12.960]  характерно аргумент подпись снизу обязательной фигурной скобки, а подпись вверху не обязательной
[01:12:12.960 --> 01:12:16.960]  квадратной скобки. Ну видимо это сделали так просто чтобы можно было друг от друга отличить,
[01:12:16.960 --> 01:12:25.960]  не знаю как это еще объяснить. Ну вот так это работает, ничего сложного. И да, тут еще один
[01:12:25.960 --> 01:12:31.680]  комментарий, который я уже говорил, лучше так вообще говоря не делать. Лимит лучше не использовать,
[01:12:31.680 --> 01:12:36.480]  стрелочки которые пишут текст над собой тоже лучше не использовать, ну по крайней мере если делать
[01:12:36.480 --> 01:12:44.880]  внутри строки, потому что это просто расползает строку в высоту, это не очень красиво. Далее,
[01:12:44.880 --> 01:12:50.680]  ну всякие есть модификаторы начертания, которые рисуют над символом что-то. Точку типа там,
[01:12:50.680 --> 01:12:57.160]  производная по времени, там две точки, есть мастеринг, ну как может быть уже там какие-то проколы
[01:12:57.160 --> 01:13:02.560]  и окрестности, вот там это возникает. Просто всякие модификаторы, которые к текущему символу
[01:13:02.560 --> 01:13:07.880]  прорисовывают что-то. Тут такая сладочка, как это можно по-разному делать, какой это имеет эффект.
[01:13:07.880 --> 01:13:14.600]  И есть вот такой комментарий, что есть просто хед, а есть y-хед, в чем разница? Просто хед рисует
[01:13:14.600 --> 01:13:20.320]  крышечку фиксированного размера над текстом любого размера. Да, здесь я как бы не указываю
[01:13:20.320 --> 01:13:25.480]  фигурные скобки, но они всегда есть. Это всегда символ a является аргументом предыдущей команды,
[01:13:25.480 --> 01:13:30.440]  будь то мастеринг, хед, ну и так далее. А вот если я хочу чтобы у меня большим текстом была
[01:13:30.440 --> 01:13:36.360]  большая крышечка, то я использую y-thed соответственно, чтобы она растянулась на тот размер, который мне
[01:13:36.360 --> 01:13:41.280]  потребуется. Тут я обновить забыл, тут должна быть конечно длинная тильда, то есть есть такие же
[01:13:41.280 --> 01:13:46.480]  аналоги, y-thed, длинная тильда, есть команда bar, которая делает фиксированного размера черточку,
[01:13:46.480 --> 01:13:52.200]  есть overline, которая подчеркивает сверху весь текст. Ну так же как underline, такая же логика. И есть
[01:13:52.200 --> 01:13:59.080]  также overwrite arrow, которая рисует прям большую стрелочку над текстом. Что характерно, как видим,
[01:13:59.080 --> 01:14:06.320]  overwrite arrow сделала последнюю строку больше по высоте, она как-то от других отползла. Это как бы
[01:14:06.320 --> 01:14:12.520]  намекает, что overwrite arrow тоже не стоит использовать внутри строки, а только формулах, которые на своей
[01:14:12.520 --> 01:14:18.960]  строке, иначе высота у вас тоже попалдит. Ну и опять же это все будет в флайдах, можно будет
[01:14:18.960 --> 01:14:29.600]  пользоваться, все такое. Да, и тут еще, ну уже так, в заключение есть всякие эквиваленты окружения
[01:14:29.600 --> 01:14:35.640]  из экранированных квадратных скобок для математики, которые немножко по-разному себя ведут,
[01:14:35.640 --> 01:14:41.960]  если у нас возникает необходимость писать много строк в математике подряд. Вот тут я перечисляю много
[01:14:41.960 --> 01:14:49.840]  разных, ну дальше попробуем просто их действия. В-первых, есть окружение begin and equation. Это полный
[01:14:49.840 --> 01:14:56.200]  эквивалент квадратных скобок. То есть то, что внутри этого уже считается математикой,
[01:14:56.200 --> 01:15:04.200]  никакие доллары, никакие другие идентификаторы этого не нужны, оно уже математик. Но вот такая
[01:15:04.200 --> 01:15:11.320]  незадача, теперь эти формулы стали нумероваться. Equation – это нумерованное окружение. Про то,
[01:15:11.320 --> 01:15:15.560]  как с этой нумерацией работать, как к ней ссылаться и все такое, мы еще поговорим, потому что точно не
[01:15:15.560 --> 01:15:23.280]  сегодня. Если мы хотим, чтобы ее не было, я как-то чаще как раз так и делаю. Я делаю окружение с
[01:15:23.280 --> 01:15:27.680]  звездочкой. Как всегда, звездочка немножко меняет поведение. В данном случае она все, что она меняет,
[01:15:27.680 --> 01:15:36.200]  убирает нумерацию. Далее есть многосрочное окружение, которое уже больше отличается от equation.
[01:15:36.200 --> 01:15:42.360]  Например, align. Если мы пишем что-то на одной строке, скорее всего, мы ранницы не заметим.
[01:15:42.360 --> 01:15:50.400]  Давайте проверим. Да, ранницы мы не заметили, за тем исключением, что нумерация снова появилась,
[01:15:50.400 --> 01:15:56.000]  потому что нет звездочки. Что делает align? Он берет, если мы пишем несколько строк,
[01:15:56.000 --> 01:16:03.200]  пишем их снова через двойные бэкслэши, как в таблицах. Снова еще один случай, когда двойной
[01:16:03.200 --> 01:16:09.040]  бэкслэш имеет какое-то перегруженное значение. В данном случае такое. Допустим, три раза подряд
[01:16:09.040 --> 01:16:15.440]  напишем одну и ту же строчку. align возьмет их все и выровняет, кажется, по левому краю. Давайте
[01:16:15.440 --> 01:16:29.320]  проверить. По умолчанию он равняется иформам по правому краю. Если мы хотим этим управлять,
[01:16:29.320 --> 01:16:33.880]  есть такая штука снова амперсанды, здесь имеют немножко другое значение. Здесь амперсанд говорит,
[01:16:33.880 --> 01:16:41.120]  вот равнять будем по этому символу. То есть там, где я поставлю амперсанд, он выровняет все амперсанды
[01:16:41.120 --> 01:16:46.960]  по одной вертикальной прямой, а весь текст отрисует так, чтобы это выравнивание сохранилось.
[01:16:46.960 --> 01:16:53.240]  В данном случае амперсанды у меня предшествуют символом равно и равно на строках верхний и нижний
[01:16:53.240 --> 01:17:04.600]  и символу B посередине. Как видим, немножко сбонтовался, немножко он влево сдвинул. Но
[01:17:04.600 --> 01:17:09.520]  в всяком случае, как видим, он сильно приблизился к тому, чтобы выровнять буквально по одной
[01:17:09.520 --> 01:17:16.480]  вертикальной прямой. И что-то сходу не соображу, в чем разница, почему он сдвинул B еще немножко левее.
[01:17:16.480 --> 01:17:23.400]  Ну ладно, это не очень важно. Более часто кейс выравнивать все-таки не по каким-то обычным
[01:17:23.400 --> 01:17:29.240]  символам текста, а по каким-то операторам, скажем, плюс или равно, в таком случае точно будет
[01:17:29.240 --> 01:17:34.880]  корректно работать. Ура, прям видим ровненькая вертикальная прямая, на ней находятся равно,
[01:17:34.880 --> 01:17:40.040]  плюс и равно, потому что мы их выделили амперсандами. И да, нумерация, в случае
[01:17:40.040 --> 01:17:46.040]  алайна, действует в поединке для каждой строки. Если мы хотим ее убрать, мы делаем вот так.
[01:17:46.040 --> 01:17:52.640]  Как сделать нумерацию только для одной строки? Я сейчас как-то подзабыл, никогда этим не
[01:17:52.640 --> 01:17:59.080]  пользовался. Я еще раз этим вопросом займусь и расскажу, если вам это потребуется. Есть похожее
[01:17:59.080 --> 01:18:09.480]  на него окружение, тут я его даже не указал, gather, оно делает то же самое, что align, только равняет
[01:18:09.480 --> 01:18:15.880]  по умолчанию не по правому краю, а по середине. Вот мне чаще им приходится пользоваться как-то
[01:18:15.880 --> 01:18:20.520]  посимпатичнее по правому краю, но вот здесь уже управление амперсандами не работает. Gather,
[01:18:20.520 --> 01:18:28.360]  он только по центру и больше никак. Есть также окружение mouthline, это для одной длинной формулы,
[01:18:28.360 --> 01:18:33.040]  которая пишет несколько строк. Допустим, у вас там a, plus b, plus c, plus и так далее,
[01:18:33.040 --> 01:18:40.760]  то dots будем писать корректно. И вот хочется продолжить на новой строке, и продолжаем.
[01:18:40.760 --> 01:18:54.520]  Допустим dots, plus, d, plus e, plus f, plus dots. Допустим plus, z, последний буквал фрита, равно 0.
[01:18:54.520 --> 01:19:02.880]  Что делает mouthline? Он сделает так, чтобы середины всех строк, у меня всего три строки, чтобы середины
[01:19:02.880 --> 01:19:08.720]  всех строк находились на одной диагонали из левого верхнего угла формулы, вправо и нижний.
[01:19:08.720 --> 01:19:16.320]  Давайте посмотрим. Да, тут формула просто не очень длинная, не очень длинные кусочки, но что она
[01:19:16.320 --> 01:19:24.080]  сделала? По одной диагонали, как я сказал, выровняла центр всех строк. Это было полезнее и осмысленнее,
[01:19:24.080 --> 01:19:29.240]  будь у меня прям выколотка на целую строку, и здесь, и здесь, и здесь, тогда будет выглядеть очень
[01:19:29.240 --> 01:19:35.240]  симпатично, и тогда очень рекомендуется пользоваться этим окрушением. Ну и снова
[01:19:35.240 --> 01:19:40.600]  про нумерацию. Если звезды не будет, нумерация появится, причем на этот раз уже одна на всю формула,
[01:19:40.600 --> 01:19:48.000]  поскольку это единая формула, но то это и mouthline. Ну еще есть aligned, это его эквивалент, но не так,
[01:19:48.000 --> 01:19:53.320]  aligned это эквивалент окружения aligned, но он используется внутри какой-то другой формулы.
[01:19:53.320 --> 01:19:59.720]  Скажем, нам здесь потребовалось внутри еще сделать ну какое-то подокружение, чтобы зачем-то написать
[01:19:59.720 --> 01:20:07.000]  вот две строки рядышком что-то, тогда мы сделали бы begin aligned и end aligned. То есть разница в том,
[01:20:07.000 --> 01:20:13.640]  что по умолчанию внутри aligned не включается математика сама по себе. Можешь, конечно,
[01:20:13.640 --> 01:20:20.000]  так подсвечиваться, но просто не скомплируется. Для использования вовне нужно делать align,
[01:20:20.000 --> 01:20:27.240]  aligned для использования внутри чего-то еще. Еще есть штучка cases, она нужна для указания
[01:20:27.640 --> 01:20:37.120]  f от x равно и далее разные случаи. Давайте тоже нарисую, почему бы нет. Есть такое окружение cases,
[01:20:37.120 --> 01:20:45.440]  оно тоже уже как aligned живет только внутри другой математики. Допустим, f равно, тут скажем 1,
[01:20:45.440 --> 01:21:03.200]  допустим, если x равно 0, снова новая строка, 0, если x не равно 0. Да, ne это not equal. Посмотрим,
[01:21:03.200 --> 01:21:10.560]  что получится. Ну вот, окружение cases сделало нам фигурную скобочку и разместило строки друг на другу.
[01:21:10.560 --> 01:21:17.000]  Больше ни для чего эта штука не нужна. Но вообще-то грамотнее, если мы хотим записывать условия,
[01:21:17.000 --> 01:21:22.000]  то есть 1 в случае таком-то, если x равно 0, 0 в случае таком-то, если x не равно 0,
[01:21:22.000 --> 01:21:27.600]  условия лучше поставить просто амперсанда. Это просто немножко поменяет правила размещения.
[01:21:27.600 --> 01:21:33.880]  В общем, они будут равняться немножко иначе. Будет некий пробел, причем правильного расстояния,
[01:21:33.880 --> 01:21:39.960]  если у нас будет какое-то длинное выражение, то он сделает так, чтобы они были на одном расстоянии,
[01:21:39.960 --> 01:21:44.120]  вот эти вот два условия. В общем принято делать так. Это специальное окружение,
[01:21:44.120 --> 01:21:49.520]  которое для такого предназначено. Им рекомендуется пользоваться, все такое. И кажется,
[01:21:49.520 --> 01:21:54.520]  что на сегодня я все рассказал, что хотел. Да, действительно. Но на всякий случай,
[01:21:54.520 --> 01:21:59.960]  есть ли вопросы по последней части? Тут вроде бы все прозрачно, просто нужно посмотреть слайды
[01:21:59.960 --> 01:22:09.480]  и попользоваться. Так, я так понял. Все кроме aligned и cases, они автоматически включают
[01:22:09.480 --> 01:22:16.920]  внутри себя математический режим? Да, все так. А вот эти две надо использовать внутри математической?
[01:22:16.920 --> 01:22:22.840]  Да. Ну для cases это прямо очевидно, поскольку это нужно для записи какого-то кусочка формулы,
[01:22:22.840 --> 01:22:28.640]  вида что-то равно чему-то в разных случаях. И у тебя не получится это сделать, если ты уже не
[01:22:28.640 --> 01:22:34.200]  был в математике до этого. Поэтому cases по умолчанию считается уже в ложную математику. Для aligned,
[01:22:34.200 --> 01:22:40.880]  ну просто нужен был какой-то эквивалент aligned, но который при этом можно делать в ложную.
[01:22:40.880 --> 01:22:44.640]  Aligned в ложную быть не умеет, потому что скажет, я включаю математику, она уже включена,
[01:22:44.640 --> 01:22:54.200]  как такое может быть. И не скомплируется просто. Понятно. Ну, здорово. Тогда думаю,
[01:22:54.200 --> 01:23:00.840]  что на сегодня можно заканчивать. Спасибо за присутствие. Буду всех ждать в следующий раз.
