[00:00.000 --> 00:07.420]  Давайте сейчас быстренько, прежде чем мы вернёмся к
[00:07.420 --> 00:08.420]  DFS-у.
[00:08.420 --> 00:09.720]  Да, по DFS-у у нас всё равно много разговоров будет.
[00:09.720 --> 00:14.240]  Значит, начнём быстренько с DP по профилю.
[00:14.240 --> 00:16.880]  Ну, в чём заключается идея?
[00:16.880 --> 00:18.880]  Да, идея у нас заключается в том, что одно из состояний
[00:18.880 --> 00:22.080]  динамики является под множество какого-то множества.
[00:22.080 --> 00:25.800]  То есть, у нас есть какая-то мистическая вселенная, там,
[00:25.800 --> 00:28.720]  ну, какая-то там вселенная на N объектах, N обычно
[00:28.720 --> 00:32.360]  не превосходит, ну, я не знаю, там, 15, там, 20, в редких
[00:32.360 --> 00:38.160]  случаях там 24 бывает, вот, и очень хочется что-то делать.
[00:38.160 --> 00:41.160]  Ну, классическая задача, которую нельзя не рассмотреть,
[00:41.160 --> 00:44.040]  это, конечно, задача о Гамильтоновом пути.
[00:44.040 --> 00:47.480]  Ну, по идее, задача едва ли не N по полу, по-моему,
[00:47.480 --> 00:48.840]  N по полу, если я не ошибаюсь.
[00:48.840 --> 00:49.840]  Вот.
[00:49.840 --> 00:55.280]  Но, соответственно, N у нас маленькая, поэтому мы
[00:55.280 --> 00:58.560]  себе даже усложним немножко жизнь.
[00:58.560 --> 01:06.200]  Мы хотим, мы скажем, что веса, что ребра у нас взвешенные
[01:06.200 --> 01:10.000]  и нам очень-очень-очень хочется не просто найти
[01:10.000 --> 01:13.920]  Гамильтонов путь, но Гамильтонов путь минимального веса.
[01:13.920 --> 01:17.480]  Так, что такое Гамильтонов путь вопросов не вызывает.
[01:17.480 --> 01:21.280]  Так, ну ладно, для наших телезрителей на всякий
[01:21.280 --> 01:24.760]  случай скажем, что Гамильтонов путь это путь, который проходит
[01:24.760 --> 01:27.320]  по каждой вершине ровно один раз.
[01:27.320 --> 01:28.320]  Вот.
[01:28.320 --> 01:29.320]  Соответственно.
[01:29.320 --> 01:30.320]  Вот.
[01:30.320 --> 01:31.320]  Значит, хорошо.
[01:31.320 --> 01:35.320]  Значит, как же нам это сделать?
[01:35.320 --> 01:43.640]  Ну, здесь оказывается такая классическая, то есть классическая
[01:43.640 --> 01:44.640]  динамика.
[01:44.640 --> 01:45.640]  Здесь оказывается какая?
[01:45.640 --> 01:48.920]  Ну, заметим, что, то есть как мы будем все это строить?
[01:48.920 --> 01:51.640]  Мы будем как-то набирать этот путь, то есть набирая
[01:51.640 --> 01:53.640]  по вершинке, по вершинке, по вершинке, по вершинке
[01:53.640 --> 01:56.560]  и смотреть, сколько, какой у нас сейчас вес.
[01:56.560 --> 01:58.920]  Но заметим, что когда мы пытаемся добавить в пути
[01:58.920 --> 02:02.120]  следующую вершину, что нам надо знать?
[02:02.120 --> 02:07.080]  Ну, нам надо знать все предыдущие, но заметим, что конкретный
[02:07.080 --> 02:09.360]  порядок нам особо не принципиален.
[02:09.360 --> 02:11.240]  Нам надо знать, в общем-то, только последнюю.
[02:11.240 --> 02:15.240]  В результате получается классическая динамика
[02:15.240 --> 02:19.120]  DP, маск, В.
[02:19.120 --> 02:20.120]  Ну вот.
[02:20.120 --> 02:23.600]  Ну, как кодировать под множество битвами, числами с вами
[02:23.600 --> 02:26.760]  не надо обсуждать, потому что мы уже там Фенлика
[02:26.760 --> 02:27.760]  обсудили.
[02:27.760 --> 02:30.360]  А до этого еще что-то обсудили там, по-моему.
[02:30.360 --> 02:32.160]  Вот, кстати, у нас в первом семестре тоже что-то с масками
[02:32.160 --> 02:33.160]  было, по-моему.
[02:33.160 --> 02:34.160]  Нет?
[02:34.160 --> 02:35.160]  Ну, неважно.
[02:35.160 --> 02:36.160]  Вот.
[02:36.160 --> 02:40.840]  А, ну, да, да, да, да, да, то есть много чего было,
[02:40.840 --> 02:41.840]  а много чего не было.
[02:41.840 --> 02:42.840]  Ну вот.
[02:42.840 --> 02:43.840]  Но маски были.
[02:43.840 --> 02:45.560]  Так что тут комментарии, думаю, излишни.
[02:45.560 --> 02:46.560]  Вот.
[02:46.560 --> 02:47.560]  Ну вот.
[02:47.560 --> 02:50.600]  Ну и получается DP от Масковая, то есть вы собрали путь,
[02:50.600 --> 02:53.400]  который проходит ровно по одному разу в точности
[02:53.400 --> 02:57.600]  вот этим вершинам и заканчивается в вершине В, и DP это минимальный
[02:57.600 --> 03:00.760]  вес, за который можно этого достичь.
[03:00.760 --> 03:06.920]  В результате, в результате эту DP можно искать, ну сами
[03:06.920 --> 03:10.840]  выбираете, можно искать DP, можно делать DP назад, можно
[03:10.840 --> 03:11.840]  делать DP вперед.
[03:11.840 --> 03:12.840]  Вот.
[03:12.840 --> 03:17.440]  И получается, ну вот, и получается, что там получается,
[03:17.440 --> 03:21.000]  ну переходов у нас, ну вот, вот там асимптотика получается,
[03:21.000 --> 03:23.200]  если вы храните матрицы смежности, граф получается
[03:23.200 --> 03:27.280]  два в степени N на N квадрат, или, на самом деле, можно
[03:27.280 --> 03:30.280]  аккуратно доказать, что если списком смежности,
[03:30.280 --> 03:34.280]  то получается два в степени N на M, ну, потому что при
[03:34.280 --> 03:36.680]  каждой фиксированной маске вы, по сути, перебираете
[03:36.680 --> 03:37.680]  в серебра.
[03:37.680 --> 03:38.680]  Вот.
[03:38.680 --> 03:42.640]  Ну, формально там M плюс N, но если вы хотите, но как
[03:42.640 --> 03:46.360]  бы если M меньше чем, меньше чем N минус 1, то вы можете
[03:46.360 --> 03:48.160]  сразу сказать, что Гамильтонного пути нету.
[03:48.160 --> 03:49.160]  Вот.
[03:49.160 --> 03:50.160]  Вот.
[03:50.160 --> 03:51.160]  Вот.
[03:51.160 --> 03:56.160]  Ну, вот эта вот классика есть, там есть, собственно,
[03:56.160 --> 03:59.160]  и другое, ну думаю, ну вот.
[03:59.160 --> 04:00.160]  Ну вот.
[04:00.160 --> 04:04.160]  Так, ладно, только на всякий случай спрошу, может, я
[04:04.160 --> 04:07.160]  просто слишком быстро говорю, и так, поднимите руки,
[04:07.160 --> 04:10.160]  кто когда-нибудь вообще писал в своей жизни DP на
[04:10.160 --> 04:13.160]  подмазках в том или ином виде.
[04:13.160 --> 04:14.160]  Вот.
[04:14.160 --> 04:17.160]  Так, ну поэтому я и сказал, да, на всякий случай, да.
[04:17.160 --> 04:20.160]  Нет, вообще, в будущем, честно говоря, вообще мысли, что,
[04:20.160 --> 04:22.160]  по-моему, да, прежде чем начинать семестр, надо просто
[04:22.160 --> 04:24.160]  эту вот анкету аналогичную Лошевскую пропускать и
[04:24.160 --> 04:27.160]  думать вообще просто какие, какие темы надо проговаривать,
[04:27.160 --> 04:30.160]  какие можно лучше предположить, что все знают, и лучше
[04:30.160 --> 04:33.160]  заняться деревом NMD Boss, например.
[04:33.160 --> 04:35.160]  Ну или там, я не знаю.
[04:35.160 --> 04:37.160]  Ну просто надо, что это вот тут.
[04:37.160 --> 04:40.160]  А то, знаете, просто если много времени тратить на
[04:40.160 --> 04:42.160]  то, что все и так знают, то как бы это будет немножко
[04:42.160 --> 04:43.160]  грустно.
[04:43.160 --> 04:44.160]  Вот.
[04:44.160 --> 04:45.160]  Значит, далее.
[04:47.160 --> 04:49.160]  Значит, это у нас DP на подмазках.
[04:49.160 --> 04:50.160]  Это у нас это.
[04:50.160 --> 04:51.160]  Вот.
[04:51.160 --> 04:54.160]  Ну, теперь, соответственно, немножко про DP по профилю.
[04:54.160 --> 04:55.160]  Так.
[04:55.160 --> 04:56.160]  Значит, что такое DP по профилю?
[04:56.160 --> 04:59.160]  Ну, на самом деле DP по профилю это, можно сказать, частный
[04:59.160 --> 05:01.160]  случай DP на подмазках.
[05:01.160 --> 05:03.160]  А можно даже сказать, что это оно есть.
[05:03.160 --> 05:06.160]  Потому что задача, которую мы будем сейчас некоторое
[05:06.160 --> 05:10.160]  время долго и успешно решать, звучит так.
[05:10.160 --> 05:15.160]  Жила была табличка.
[05:19.160 --> 05:21.160]  Есть табличка NM.
[05:22.160 --> 05:24.160]  Пум-пум, пум-пум-пум.
[05:24.160 --> 05:26.160]  Там пум, соответственно, пум.
[05:26.160 --> 05:28.160]  Пум-пум.
[05:29.160 --> 05:30.160]  Во.
[05:31.160 --> 05:36.160]  Значит, надо замастить эту табличку доминожками.
[05:36.160 --> 05:41.160]  Ну, доминожка, это такая штучка.
[05:41.160 --> 05:42.160]  Там два на один.
[05:42.160 --> 05:45.160]  Каждая доминожка, вы должны замастить две соседние
[05:45.160 --> 05:46.160]  перебру клетки.
[05:46.160 --> 05:47.160]  Там, естественно, там всякие.
[05:47.160 --> 05:49.160]  В общем, каждая доминожка должна замастеть именно
[05:49.160 --> 05:50.160]  две клетки.
[05:50.160 --> 05:53.160]  То есть там она высовываться за пределы не должна.
[05:53.160 --> 05:55.160]  Пересекаться доминожки тоже не должны.
[05:55.160 --> 05:59.160]  И вот сразу первая задача уровня ноль.
[05:59.160 --> 06:01.160]  Можно ли это сделать, да или нет?
[06:07.160 --> 06:10.160]  Если хотя бы одна четная, то можно.
[06:10.160 --> 06:11.160]  Ну, да.
[06:11.160 --> 06:12.160]  Да, какой-то вариант.
[06:12.160 --> 06:13.160]  Боже упаси.
[06:13.160 --> 06:15.160]  Да, это называется, да.
[06:15.160 --> 06:18.160]  Задача из цикла, да, чем вы младше и менее искушены
[06:18.160 --> 06:20.160]  в математике, тем быстрее вы правильно ответите
[06:20.160 --> 06:21.160]  на этот вопрос.
[06:21.160 --> 06:22.160]  Да.
[06:22.160 --> 06:23.160]  Потому что ответ предельно простой.
[06:23.160 --> 06:26.160]  Если одна из этих измерений четна, то вы можете вдоль
[06:26.160 --> 06:28.160]  этого измерения просто положить доминожки и, собственно,
[06:28.160 --> 06:29.160]  все заполнить.
[06:29.160 --> 06:30.160]  Вот.
[06:30.160 --> 06:33.160]  А если NM оба нечетные, то в принципе не судьба,
[06:33.160 --> 06:35.160]  потому что количество клеток нечетные.
[06:36.160 --> 06:37.160]  Тут все просто.
[06:38.160 --> 06:39.160]  Вот.
[06:39.160 --> 06:42.160]  Но сложнее начинается, когда вам гарантируется,
[06:42.160 --> 06:45.160]  что NM допустим четна, и вас спрашивают, а сколько
[06:45.160 --> 06:47.160]  способов замастить вообще?
[06:50.160 --> 06:51.160]  Вот.
[06:51.160 --> 06:52.160]  Да.
[06:52.160 --> 06:54.160]  То есть это можно свести задачу количества порсочей
[06:54.160 --> 06:56.160]  в дудольном графе, конечно, да.
[06:58.160 --> 06:59.160]  Ну, а что?
[06:59.160 --> 07:02.160]  Да, известная в скопках нет задача.
[07:02.160 --> 07:05.160]  Ну да, там, хотя нет, кто-то там можно что-то делать,
[07:05.160 --> 07:07.160]  там начинаются какие-то безобразия типа матрица
[07:07.160 --> 07:09.160]  Тата там или что-то еще в этом роде.
[07:09.160 --> 07:10.160]  Ой.
[07:10.160 --> 07:12.160]  Ну ладно, не будем так себе усложнять жизнь.
[07:13.160 --> 07:14.160]  Вот.
[07:15.160 --> 07:16.160]  Так что вот.
[07:16.160 --> 07:18.160]  Значит, что у нас получается теперь?
[07:20.160 --> 07:21.160]  Вот.
[07:21.160 --> 07:23.160]  Значит, как будем замастять?
[07:24.160 --> 07:27.160]  Ну, классический способ здесь говорить так.
[07:27.160 --> 07:30.160]  Значит, идем слева направо и замастяем по столбцу.
[07:30.160 --> 07:32.160]  Вот давайте будем, да, ну естественно, да, скажем
[07:32.160 --> 07:33.160]  про ограничения.
[07:33.160 --> 07:37.160]  Обычно в такой задаче у нас там N какое-то небольшое.
[07:38.160 --> 07:39.160]  Ну, дальше как повезет.
[07:39.160 --> 07:42.160]  То есть допустим вот, допустим N у нас совсем до пяти
[07:42.160 --> 07:44.160]  и M до стоточки.
[07:46.160 --> 07:47.160]  Тогда идея такая.
[07:47.160 --> 07:51.160]  На каждом шаге мы, значит, замастяем очередной столбец.
[07:51.160 --> 07:53.160]  То есть вот, например, сейчас мы говорим, мы замастили
[07:53.160 --> 07:56.160]  два столбца, и вот мы хотим замастить третий.
[07:56.160 --> 07:59.160]  Но мы себе разрешаем, что у нас слева в него что-то торчит.
[08:01.160 --> 08:05.160]  То есть на текущем шаге наша задача замастить третий столбец.
[08:06.160 --> 08:09.160]  То есть сделать, ну вот, то есть положить доминожки так,
[08:09.160 --> 08:12.160]  чтобы доминожка там, каждая доминожка лежала хотя бы
[08:12.160 --> 08:16.160]  одной клеточкой в этом столбце, и при этом все, все клеточки были заняты.
[08:17.160 --> 08:19.160]  Ну, можно перебрать все способы это сделать.
[08:21.160 --> 08:22.160]  Вот.
[08:22.160 --> 08:24.160]  Ну и, например, вот один из способов вот такой.
[08:25.160 --> 08:26.160]  Вот, отлично.
[08:26.160 --> 08:27.160]  Все, тут замастили, теперь так.
[08:28.160 --> 08:30.160]  Следующий шаг может быть вот такой.
[08:30.160 --> 08:32.160]  То есть теперь мы дошли до четвертого столбца, замастяем его.
[08:32.160 --> 08:33.160]  Ну, например, вот так.
[08:34.160 --> 08:35.160]  Там могли по-другому.
[08:35.160 --> 08:37.160]  Теперь пятый столбец пустой.
[08:37.160 --> 08:38.160]  Ну, такое тоже бывает.
[08:39.160 --> 08:41.160]  А бывает и обратная ситуация, когда...
[08:45.160 --> 08:48.160]  Наоборот, смотрите, то есть выяснилось, что торчащие доминожки
[08:48.160 --> 08:49.160]  замастяют все.
[08:49.160 --> 08:50.160]  Такое тоже бывает.
[08:51.160 --> 08:55.160]  Ну, значит, тогда этот столбец мы замастяем триверально.
[08:55.160 --> 08:56.160]  Ну и так далее.
[08:58.160 --> 08:59.160]  Вот.
[08:59.160 --> 09:03.160]  И в результате возникает естественная динамика.
[09:03.160 --> 09:05.160]  ДП, то есть такая.
[09:05.160 --> 09:10.160]  ДП получается, значит, и масковая.
[09:11.160 --> 09:13.160]  То есть это называется...
[09:14.160 --> 09:15.160]  Прошли.
[09:16.160 --> 09:18.160]  То есть прошли из столбцов.
[09:18.160 --> 09:20.160]  Вот, я даже так и буду писать.
[09:22.160 --> 09:24.160]  Там, соответственно, в и плюс первый
[09:24.160 --> 09:25.160]  первый
[09:26.160 --> 09:27.160]  ведет
[09:29.160 --> 09:30.160]  торчат
[09:32.160 --> 09:34.160]  доминожки, маски, маски.
[09:34.160 --> 09:35.160]  Вот эти вот.
[09:37.160 --> 09:38.160]  Вот, понятно, да?
[09:40.160 --> 09:41.160]  Вот.
[09:42.160 --> 09:43.160]  Вот.
[09:43.160 --> 09:44.160]  Ну, что можно сделать?
[09:46.160 --> 09:47.160]  Значит, ну теперь возникает вопрос.
[09:47.160 --> 09:48.160]  Как эту динамику улучшать?
[09:48.160 --> 09:49.160]  Ну, ответ на задачу.
[09:50.160 --> 09:51.160]  Где у нас, кстати, ответ на задачу?
[09:51.160 --> 09:54.160]  ДП, Н, ноль.
[09:55.160 --> 09:56.160]  Ну, по сути, да.
[09:59.160 --> 10:00.160]  Нет, почему нет?
[10:00.160 --> 10:01.160]  Именно ДП...
[10:01.160 --> 10:02.160]  Нет, ДП, Н, ноль, да.
[10:03.160 --> 10:05.160]  Астактовое состояние ДП от ноль-ноль равно 1.
[10:05.160 --> 10:08.160]  То есть мы прошли ноль столбцов, и в первый столбец ничего не торчит.
[10:09.160 --> 10:10.160]  Вот.
[10:11.160 --> 10:12.160]  Но теперь возникает вопрос.
[10:12.160 --> 10:14.160]  Как же это вычислять?
[10:15.160 --> 10:17.160]  Ну, самый тупой способ, конечно.
[10:17.160 --> 10:19.160]  Ну, я сейчас не буду полный код писать.
[10:19.160 --> 10:20.160]  Но можно писать так.
[10:21.160 --> 10:22.160]  То есть 4и.
[10:23.160 --> 10:26.160]  Ну, то есть там понятно, что ДП, ноль-ноль равно 1, естественно.
[10:28.160 --> 10:29.160]  Вот.
[10:30.160 --> 10:31.160]  Значит, 4и от 1 до н.
[10:32.160 --> 10:37.160]  Пишем, 4маск равно от 0 до 2 в степени n-1.
[10:38.160 --> 10:44.160]  Значит, дальше, 4маск штрих равно от 0 до 2n-1.
[10:45.160 --> 10:47.160]  Значит, соответственно, если маски не пересек...
[10:47.160 --> 10:48.160]  То есть если...
[10:51.160 --> 10:52.160]  Ну вот.
[10:52.160 --> 10:55.160]  Если эти маски могут быть соседними...
[11:07.160 --> 11:12.160]  Ну, как-нибудь за ОАТ мы, наверное, как-нибудь поймем, могут ли эти маски быть соседними.
[11:13.160 --> 11:17.160]  То, соответственно, пишем там ДП, ит масковое.
[11:19.160 --> 11:22.160]  Там плюс равно ДП, а ты минус 1.
[11:23.160 --> 11:25.160]  Маск штрихное.
[11:27.160 --> 11:28.160]  Вот.
[11:28.160 --> 11:29.160]  То есть можно вот уже так написать.
[11:33.160 --> 11:34.160]  Вот.
[11:34.160 --> 11:35.160]  Спрашивается...
[11:35.160 --> 11:36.160]  Ну вот.
[11:36.160 --> 11:37.160]  За какой симпатикой это будет работать?
[11:37.160 --> 11:40.160]  Ну, не на n квадрата, n на m.
[11:40.160 --> 11:42.160]  Да, тут вот m, я ошибся.
[11:43.160 --> 11:44.160]  Вот.
[11:46.160 --> 11:48.160]  Ну, базовая версия такая.
[11:48.160 --> 11:51.160]  То есть самую первую задачу так, в принципе, уже можно написать.
[11:51.160 --> 11:53.160]  Кодик, кстати, получится простой.
[11:53.160 --> 11:57.160]  А, впрочем, поднимите руки, кто такой изракод уже писал.
[11:57.160 --> 11:58.160]  Так.
[11:58.160 --> 12:00.160]  Такой или его аналог по симпатичным узорам?
[12:13.160 --> 12:15.160]  Потому что мы предположим, что мы за линию проверяем.
[12:16.160 --> 12:17.160]  Вот.
[12:18.160 --> 12:19.160]  Да, но теперь давайте поехали.
[12:20.160 --> 12:21.160]  Без чего можно обойтись?
[12:21.160 --> 12:23.160]  Без умножения на n.
[12:23.160 --> 12:24.160]  n или m?
[12:25.160 --> 12:26.160]  n.
[12:26.160 --> 12:28.160]  Так, а как обойтись без обнажения на n?
[12:28.160 --> 12:36.160]  Ну, потому что у нас понятно, если на следующем столбце какие-то торчат, то это только горизонтальные в текущем столбце.
[12:36.160 --> 12:40.160]  Ну, я скажу так, это необходимо, но недостаточно.
[12:40.160 --> 12:43.160]  Мне кажется, мы можем предпочитать все.
[12:43.160 --> 12:46.160]  Да, вот погодите, тут как бы разные оптимизации.
[12:46.160 --> 12:54.160]  Потому что если хочется не домножать на n, то можно заметить, что функция maybe neighboring никак не зависит от того, при каком им мы ее вычисляем.
[12:54.160 --> 13:03.160]  И в принципе, и на самом деле действительно можно сделать какой-то там предподсчет.
[13:03.160 --> 13:07.160]  Там какой-нибудь m, b, n.
[13:07.160 --> 13:10.160]  Только я уже пишу на этот раз маском а штрих.
[13:10.160 --> 13:14.160]  Но, правда, его придется еще предпочитать.
[13:14.160 --> 13:20.160]  А умножение на n можно заменить налогами?
[13:21.160 --> 13:23.160]  Сейчас, дойдем.
[13:23.160 --> 13:28.160]  Ну, там разные веточки, но мы сейчас дойдем, не волнуйтесь.
[13:28.160 --> 13:29.160]  Все сделаем.
[13:29.160 --> 13:37.160]  For mask, for mask штрих равно от нуля до 2 в степени n-1.
[13:37.160 --> 13:49.160]  Значит, там m, b, n от маском а штрих равно maybe neighboring.
[13:50.160 --> 13:52.160]  Burying.
[13:52.160 --> 13:58.160]  От соответственно, mask.
[13:58.160 --> 14:00.160]  Вот.
[14:00.160 --> 14:01.160]  Ну, тут все просто.
[14:01.160 --> 14:03.160]  Так, давайте.
[14:03.160 --> 14:05.160]  В принципе, да.
[14:05.160 --> 14:07.160]  Вот это уже действительно приятная штука.
[14:07.160 --> 14:09.160]  То есть теперь у нас асимптотика превращается.
[14:09.160 --> 14:14.160]  Теперь она становится 2 в степени 2n на n плюс n.
[14:14.160 --> 14:16.160]  Это приятнее.
[14:16.160 --> 14:18.160]  Вот.
[14:18.160 --> 14:21.160]  То есть на самом деле это чуть-чуть расширяет нам возможности.
[14:21.160 --> 14:27.160]  Потому что там, скажем так, n уже может быть даже не 5, а вполне себе 10.
[14:27.160 --> 14:29.160]  Это же.
[14:29.160 --> 14:31.160]  Так.
[14:31.160 --> 14:34.160]  Что еще можно оптимизировать?
[14:34.160 --> 14:36.160]  Да.
[14:36.160 --> 14:37.160]  Ну да.
[14:37.160 --> 14:45.160]  Одна из читерских оптимизаций заключается в том, что можно заметить, что для того, чтобы маска и баш-штрих были совместимы,
[14:45.160 --> 14:50.160]  необходимо, чтобы маск и макс-штрих не пересекались.
[14:50.160 --> 14:52.160]  Вот.
[14:52.160 --> 14:54.160]  Как минимум.
[14:54.160 --> 14:57.160]  Но спрашивается, насколько это прооптимизирует?
[14:57.160 --> 14:59.160]  Ну да.
[14:59.160 --> 15:01.160]  Да, классия нот.
[15:01.160 --> 15:04.160]  Так, мы на пути, мы обсуждали уже эту идею или еще нет?
[15:04.160 --> 15:06.160]  Ну, давайте быстро обсудим, да.
[15:06.160 --> 15:08.160]  То есть, ну, в принципе, да.
[15:08.160 --> 15:10.160]  У вас могла быть даже задача по комбинаторике.
[15:10.160 --> 15:14.160]  Сколько существует пар масочек из n, которые не пересекаются?
[15:14.160 --> 15:19.160]  Но ответ про спойлеры.
[15:19.160 --> 15:21.160]  Оказывается, их ровно 3 в степени n.
[15:21.160 --> 15:23.160]  В чем там разные доказательства бывают?
[15:23.160 --> 15:29.160]  Потому что кто-то, на самом деле, там честно посчитал какую-то сумму цешек и получился бином ньютона.
[15:29.160 --> 15:32.160]  Да, вот именно.
[15:32.160 --> 15:36.160]  Но на самом деле, да, можно увидеть это и сильно проще, конечно.
[15:36.160 --> 15:37.160]  Вот.
[15:37.160 --> 15:39.160]  Потому что что такое не пересекающиеся маски?
[15:40.160 --> 15:44.160]  Не пересекающиеся маски – это когда у нас действительно маска…
[15:44.160 --> 15:49.160]  То есть, когда у нас на каждой позиции стоит либо 0,0, либо 1,0, либо 0,1.
[15:49.160 --> 15:51.160]  А 1,1 не стоит.
[15:51.160 --> 15:56.160]  То есть, получается, на каждой позиции у вас три варианта того, что там может стоять.
[15:56.160 --> 15:59.160]  Итого получается 3 в степени n вариантов.
[15:59.160 --> 16:05.160]  Остается только мелкий вопрос, а как это адекватно перебирать?
[16:05.160 --> 16:06.160]  Потому что…
[16:06.160 --> 16:08.160]  Ну, то есть, конечно, если бы у вас…
[16:08.160 --> 16:11.160]  То есть, проблема в том, что, конечно, мы бы за…
[16:11.160 --> 16:14.160]  На самом деле, мог бы быть такой чит, смотрите, какой.
[16:14.160 --> 16:19.160]  То есть, может быть, чит, что вы тут не просто предпочитываете не в матрице смежности, а в списке смежности.
[16:19.160 --> 16:23.160]  То есть, для каждой маски насчитываете, какие маски вообще валидны.
[16:23.160 --> 16:25.160]  И тогда у вас… Ну вот.
[16:25.160 --> 16:26.160]  И что тогда получается?
[16:26.160 --> 16:32.160]  Тогда получается, что вы там будете работать за от реального количества переходов, а их не более чем 3 в степени n.
[16:33.160 --> 16:39.160]  И в результате, если сделать список смежности, то получается там от 2 в степени 2n на n.
[16:39.160 --> 16:42.160]  Но этот предпочет никуда не девается пока, да?
[16:42.160 --> 16:47.160]  Плюс, ну, уже что-то не более чем 3 в степени n на m.
[16:47.160 --> 16:49.160]  Так, ну, в принципе, тоже неплохо.
[16:49.160 --> 16:52.160]  А зачем мы предпочитывали?
[16:52.160 --> 16:58.160]  Вот. Ну, потому что мы пока еще не научили перебирать непересекающиеся маски быстро.
[16:58.160 --> 17:00.160]  Пока не научились, конечно.
[17:00.160 --> 17:08.160]  Но, конечно же, на самом деле, если ваша задача просто перебирать непересекающиеся маски, то это достаточно простая задача.
[17:09.160 --> 17:14.160]  Ну, точнее так, потому что она сводится к одной известной задаче.
[17:15.160 --> 17:18.160]  Задача называется перебирать под маски.
[17:19.160 --> 17:21.160]  Вот. А вы уж перебирали под маски?
[17:24.160 --> 17:26.160]  Нет, ну, баллики мы там в ФТ занимались.
[17:26.160 --> 17:27.160]  Может, и этим тоже.
[17:27.160 --> 17:29.160]  Сейчас, а зачем нам перебирать под маски?
[17:29.160 --> 17:38.160]  Мы не можем просто, ну вот, перебирать не маски, а до 3 в степени n и просто динамику в первую очередь.
[17:47.160 --> 17:48.160]  Слушайте, какой хороший чит.
[17:48.160 --> 17:53.160]  Давайте вместо вот этого форика, вместо этих двух фориков реально переберем числа до 3 в степени n,
[17:53.160 --> 17:57.160]  каждый из них распарсим и создадим по нему две динамики, то есть две масочки.
[17:58.160 --> 18:03.160]  И еще не забудем, то есть maybe neighboring все равно придется вставлять, если что.
[18:05.160 --> 18:07.160]  Но, на самом деле, в этом необходимости нет.
[18:07.160 --> 18:12.160]  Ну, точнее так, так тоже можно, но это будет сильно сложнее, чем то, что я сейчас вам предложу.
[18:14.160 --> 18:17.160]  Потому что, на самом деле, заклинание перебора будет звучать так.
[18:17.160 --> 18:18.160]  Значит, перебираем маску.
[18:18.160 --> 18:27.160]  Теперь говорим, значит, ввожу переменную in в маск равно 2 в степени n минус 1 минус маск.
[18:29.160 --> 18:30.160]  Ну, короче, я инвертировал маску, да?
[18:32.160 --> 18:34.160]  Теперь я должен перебрать все ее под маски.
[18:39.160 --> 18:41.160]  Сделаю я это весьма простым способом.
[18:41.160 --> 18:42.160]  Значит, for.
[18:43.160 --> 18:45.160]  Сделаю я это весьма простым способом.
[18:45.160 --> 18:46.160]  Значит, for.
[18:47.160 --> 18:51.160]  Маск штрих равно in в маск.
[18:55.160 --> 18:57.160]  Маск штрих больше нуля.
[18:58.160 --> 18:59.160]  Вот.
[19:05.160 --> 19:06.160]  Ну, можно так написать.
[19:06.160 --> 19:08.160]  Маск штрих равно
[19:12.160 --> 19:16.160]  маск штрих минус 1 and in в маск.
[19:19.160 --> 19:20.160]  Все.
[19:20.160 --> 19:21.160]  Значит, мистический факт.
[19:21.160 --> 19:29.160]  Я утверждаю, что вот этот for переберет в точности не пустые под маски in в маска.
[19:33.160 --> 19:34.160]  Вот что.
[19:34.160 --> 19:36.160]  Можно оставить в качестве упражнения.
[19:36.160 --> 19:37.160]  Почему?
[19:39.160 --> 19:40.160]  Чего?
[19:40.160 --> 19:41.160]  Можно?
[19:43.160 --> 19:44.160]  Так, все.
[19:44.160 --> 19:45.160]  Можно, да?
[19:45.160 --> 19:46.160]  Ну ладно.
[19:46.160 --> 19:47.160]  Оставим в качестве упражнения.
[19:47.160 --> 19:48.160]  На экзамене у кого-нибудь спрошу.
[19:48.160 --> 19:49.160]  Вот.
[19:49.160 --> 19:55.160]  Ну, оговоримся, что здесь придется вам тогда все-таки запускать функцию maybe neighbouring.
[20:00.160 --> 20:01.160]  Ну, вот.
[20:01.160 --> 20:02.160]  Вот.
[20:02.160 --> 20:06.160]  Ну, оговоримся, что здесь придется вам тогда все-таки запускать функцию maybe neighbouring.
[20:11.160 --> 20:12.160]  Вот.
[20:12.160 --> 20:16.160]  И еще заметим, что нулевую маску придется обработать отдельно.
[20:19.160 --> 20:20.160]  Вот.
[20:21.160 --> 20:22.160]  Значит, соответственно.
[20:23.160 --> 20:27.160]  Ну, на то это и нулевая, потому что в этот for она как-то не власть.
[20:27.160 --> 20:34.160]  Но, тем не менее, вот, то есть, конечно, да, ну, в этом случае вам, конечно, не потребуется никакой вот этот вот for.
[20:34.160 --> 20:37.160]  То есть, и тогда уже действительно все это мы тоже выкидываем, выкидываем.
[20:37.160 --> 20:46.160]  В общем, короче говоря, 3 в степени n получается на nm получается.
[20:51.160 --> 20:54.160]  Хотя, с другой стороны, с maybe neighbouring можно было бы уже и разобраться.
[20:58.160 --> 21:01.160]  Потому что, на самом деле, я утверждаю, что maybe neighbouring легко реализовать.
[21:01.160 --> 21:05.160]  С очень маленьким предподсчетом можно сделать так, чтобы он работал за вот единицы практически.
[21:06.160 --> 21:14.160]  Maybe neighbouring все, что проверяет, что у нас между двумя выбираниями четное число клеточек или что?
[21:15.160 --> 21:16.160]  Нет.
[21:16.160 --> 21:27.160]  Но нет, он проверяет, что можно ли взять маску, там, можно ли взять маску маск-штрих и замастить ее полностью так, чтобы в следующую столбец толчала ровно маск.
[21:28.160 --> 21:37.160]  Ну, это практически эквалентно тому, что, во-первых, верно лишь, то есть, если вот писать эту функцию, там bool maybe neighbouring.
[21:43.160 --> 21:53.160]  То есть, соответственно, если я буду перебирать там, соответственно, маск-штрих и обязательно n, то первое, что я проверю, пересекаются ли в маске.
[21:53.160 --> 22:02.160]  То есть, просто я скажу, что если окажется, что они пересекаются, то есть, маск and маск-штрих, то я просто сразу выбрасываю с криком false.
[22:06.160 --> 22:08.160]  А в противном случае, что я делаю?
[22:09.160 --> 22:31.160]  Да, в противном случае я пишу некоторый код за линию, который говорит мне, return may, ну, я его называю вот так, may zeros be filled by, ну, допустим, vertical до минус, я не знаю.
[22:31.160 --> 22:45.160]  Вот. Ну, то есть, передаю я туда вот эту вот маску, их вот, маск или маск-штрих и обязательно n, потому что я как бы не знаю, сколько там нулей в конце, поэтому я передаю все.
[22:46.160 --> 22:54.160]  Ну, просто в чем фишка? Фишка заключается в том, что я передаю в эту функцию всего два в степени n вариантов масочек и я их могу предподсчитать.
[22:55.160 --> 22:58.160]  То есть, в принципе, предподсчет этой функции он работает за два в степени n.
[22:59.160 --> 23:07.160]  И после этого тогда функция maybe neighboring презаразно работает за у от единицы и на самом деле, конечно, никакого n тут нет уже давно.
[23:09.160 --> 23:14.160]  Вот. Получается вот такой красивый три в степени n на m.
[23:15.160 --> 23:27.160]  Можно уже заметить, что, в общем, n можно уже и не десятки, там уже и, ну, так, уже аккуратненько, ну, 12 точно, а так можно уже аккуратно и в сторону 15.
[23:28.160 --> 23:29.160]  Посматривать дальше.
[23:31.160 --> 23:37.160]  Впрочем, есть, ну, впрочем, на самом деле есть, конечно, там, конечно, разные варианты.
[23:38.160 --> 23:39.160]  Есть какая нот.
[23:41.160 --> 23:44.160]  То есть, на самом деле дальше ограничения могут просто пойти в две стороны.
[23:45.160 --> 23:57.160]  Ну, есть, конечно, классическая ситуация, вот у вас тоже, ну, обе, там, классическая ситуация, когда, наоборот, n у вас все еще не превосходит 6, но зато m не превосходит 10.
[23:58.160 --> 23:59.160]  В сотой.
[24:01.160 --> 24:03.160]  Ну, ответ, естественно, по какой-нибудь простому модулю.
[24:04.160 --> 24:09.160]  Или бывает еще, чтоб совсем было быстро, давайте сделаем это по модулю два в тридцать второго, ой.
[24:10.160 --> 24:15.160]  Ну, типа, чтобы вы там просто делаете, да, делайте все вычления в Oneside Pint и не парьтесь.
[24:17.160 --> 24:22.160]  Ну, ой, ну, как сказать, эта задача появилась до появления фурьерского модуля, так что.
[24:24.160 --> 24:25.160]  Ой, Господи.
[24:26.160 --> 24:38.160]  Главное, самое страшное, что, знаете, самое смешное, что если говорить об истории, то, по-моему, задача симпатичной узоры появилась просто едва ли не на в кашпе 2003 года.
[24:39.160 --> 24:42.160]  Нет, а то и рай, там где-то вот 2003 или совсем вот какого-то лохматого года.
[24:44.160 --> 24:46.160]  Ей решила только команда Пяти Митричева.
[24:47.160 --> 24:50.160]  Да, тогда это, естественно, не было теории, которую все знают.
[24:51.160 --> 24:53.160]  То есть, это сейчас как бы тоже такие базовые вещи.
[24:55.160 --> 24:56.160]  Вот.
[24:57.160 --> 24:58.160]  Получается, надо ДП изучать.
[24:59.160 --> 25:00.160]  Ну.
[25:01.160 --> 25:03.160]  Ну, ДП всегда надо изучать, да.
[25:04.160 --> 25:05.160]  Самое время тащить в кошки.
[25:06.160 --> 25:14.160]  Ну, там, нет, ну, там, правда, все аккуратно, это все достаточно быстро развивалось, потому что если вы там будете решать, я не знаю, может вам когда-нибудь надо на кубок МВТ дать финал 2000 года.
[25:15.160 --> 25:17.160]  Там такая замечательная личная тренировка.
[25:18.160 --> 25:23.160]  В чем-то такая блицевая такая немножко тренировочка, там, по-моему, только одна задача реально сложная, потому что где-то там будет просто едва ли не упр...
[25:23.160 --> 25:26.160]  Просто там будет, просто буквально будет задача, напишите Флойда.
[25:27.160 --> 25:28.160]  Флойда.
[25:29.160 --> 25:30.160]  Ну, практически.
[25:31.160 --> 25:32.160]  То есть, там, не, придумывать ничего не надо.
[25:33.160 --> 25:38.160]  То есть, там вот уже, то есть, 2008 там, скажем, финал, ну, мы какие-то старые финалы вот решали, но вот очень старые, мы вот порешали двухтысячные.
[25:39.160 --> 25:40.160]  Вот впечатление вот такое.
[25:41.160 --> 25:43.160]  Там, скажем, 2008 это вот там, там уже нормальные задачи.
[25:44.160 --> 25:45.160]  Ну, вот уже.
[25:46.160 --> 25:47.160]  Ну, уже более похожие на современные.
[25:48.160 --> 25:49.160]  Вот.
[25:50.160 --> 25:51.160]  Так что.
[25:51.160 --> 25:53.160]  Финал 2000 года, да.
[25:54.160 --> 25:56.160]  Осталось только его найти.
[25:57.160 --> 25:58.160]  СПС?
[25:59.160 --> 26:06.160]  Нет, ну, в коже 2000 года тоже прикольно, но я боюсь, там все задачи вы уже давно знаете, потому что они уже раздеребанины по домашним заданиям.
[26:07.160 --> 26:08.160]  Вот.
[26:09.160 --> 26:11.160]  Ну, там те же симпатичные узоры, например.
[26:12.160 --> 26:13.160]  Вот.
[26:14.160 --> 26:22.160]  Не, ну, в конце концов, кто решал вот первый контест Танкевича, вот тоже можете убедиться, действительно, что, что было в 2002 году сложным контестом, то сейчас это как бы уже учебные, там какие-то простые учебные задачи.
[26:23.160 --> 26:24.160]  Ну, относительно.
[26:25.160 --> 26:26.160]  Вот.
[26:27.160 --> 26:29.160]  Так вот, ну, давайте скажем, как решается задача в таких ограничениях?
[26:31.160 --> 26:35.160]  Ну, в таких, в таких ограничениях, оказывается, у нас есть матрицы.
[26:35.160 --> 26:55.160]  Потому что вот это вот, там, на этот раз вот эту матрицу, maybe neighboring на самом деле можно интерпретировать как матрицу, то есть если сказать, что у нас есть вот такая, такая целая матрица mbn от нуля до 2 в степени n-1 и от нуля до 2 в степени n-1, то можно заметить следующий приятный факт.
[26:55.160 --> 27:12.160]  Что если я выпишу в таблицу такой dp и плюс первое, то есть я выпишу такой в столбец там 2 в степени значений динамик прификсированном i, то я могу заметить маленький приятный момент.
[27:13.160 --> 27:21.160]  Что i плюс первый столбец я могу получить как матрицу mbn, домноженную на такой же столбец dp и того.
[27:25.160 --> 27:30.160]  Вот, согласны?
[27:31.160 --> 27:38.160]  Ну там, в общем случае с точностью доинверсии, да, но, хотя в данном случае матрица симметричная, поэтому не принципиально.
[27:39.160 --> 27:42.160]  Вот. То есть к чему нас это приводит?
[27:42.160 --> 27:55.160]  То есть к чему нас это приводит? Это нас приводит к тому, что вот если я вот обзову вот эту штуку dp и плюс первое, то тогда я могу обнаружить, что dpmt это что такое?
[27:56.160 --> 28:01.160]  Это матрица наша в степени m умножить на dp нулевое.
[28:03.160 --> 28:07.160]  Все, что вам останется, это с помощью быстрого возведения в степень вывести матрицу в степень.
[28:08.160 --> 28:09.160]  Что получится?
[28:10.160 --> 28:13.160]  Вот. Ну получится там асимптотика.
[28:14.160 --> 28:18.160]  Ну то есть получается, что в таком варианте асимптотика может получиться за o от.
[28:19.160 --> 28:24.160]  Ну, возведение матрицы в степени оно конечно, то есть умножение матрицы у нас это 2 в степени 3n получается.
[28:25.160 --> 28:29.160]  Но зато вместо m у вас лога и получается адекватно.
[28:30.160 --> 28:32.160]  Но это конечно работает только при очень маленьком n.
[28:33.160 --> 28:37.160]  Потому что скажем при n равно 12 вам это к сожалению не поможет.
[28:38.160 --> 28:40.160]  Потому что кто-то упихивает дальше.
[28:41.160 --> 28:48.160]  Вот у вас будет домашнее задание, в котором например у вас размер таблички, произведение таблички может быть до 300.
[28:49.160 --> 28:50.160]  Но при этом нет никаких ограничений на минимум.
[28:51.160 --> 28:53.160]  То есть может быть табличка там скажем 17 на 17.
[28:54.160 --> 28:57.160]  Ну это там макстест практически в этой задаче.
[28:58.160 --> 29:07.160]  Вот. И тогда замечаем, что там допустим если у нас вот представить себе n равно m равно 17, то у нас проблемы.
[29:10.160 --> 29:15.160]  Потому что это естественно не работает, 3 в степени n у нас тоже не устраивает.
[29:16.160 --> 29:20.160]  Потому что это уже 3 в степени 17.
[29:21.160 --> 29:22.160]  Это у нас что такое?
[29:23.160 --> 29:26.160]  Это у нас 243 в кубе и еще на 9.
[29:28.160 --> 29:30.160]  Ну там, то есть это пока еще в ТЛ, ну вот.
[29:31.160 --> 29:33.160]  Ну то есть так, это на самом деле, ну то есть там да.
[29:34.160 --> 29:36.160]  То есть какая-то там если будет то пожрана застава какая-то откровенная.
[29:37.160 --> 29:39.160]  Потому что 243 в кубе это сколько у нас?
[29:42.160 --> 29:44.160]  Ну это получается там наверное 9-10 миллионов уже где-то.
[29:45.160 --> 29:48.160]  Если домножить еще на 9, то это уже там.
[29:49.160 --> 29:51.160]  3 в 17 это 1 и 3 на 10 в 8.
[29:52.160 --> 29:53.160]  А, спасибо.
[29:53.160 --> 29:54.160]  Вот. Да.
[29:55.160 --> 29:56.160]  Это само ток 3 в степени.
[29:57.160 --> 29:58.160]  Домножить еще на 17, но как бы ТЛ там.
[29:59.160 --> 30:03.160]  При всем том, что как вы наверное знаете, что действительно константа у этих решений прям муа.
[30:04.160 --> 30:06.160]  Просто одна из лучших вообще во всем спортивном программировании.
[30:07.160 --> 30:11.160]  Потому что, заметим да, что тут как бы у вас только сложение.
[30:12.160 --> 30:16.160]  Ну то есть вам нужно делать сложение по модулю, но если вы избавитесь от процентиков, там совсем летать будет.
[30:17.160 --> 30:21.160]  Но тем не менее там 17 на 17, скорее всего там тот ТЛ, который хочется не упихнется.
[30:23.160 --> 30:24.160]  Вот.
[30:25.160 --> 30:30.160]  Но оказывается есть тоже на самом деле весьма неожиданная техника.
[30:31.160 --> 30:33.160]  Причем очень забавно, то есть техника нот.
[30:34.160 --> 30:36.160]  То есть на самом деле код получится еще более маленький.
[30:37.160 --> 30:42.160]  Так, техника называется, сейчас мы будем писать ДП по изломанному профилю.
[30:43.160 --> 30:46.160]  Так, ну-ка кто знает что такое ДП по изломанному профилю?
[30:47.160 --> 30:48.160]  Так кто его когда-нибудь писал?
[30:50.160 --> 30:52.160]  Ага, так уже, так уже чуть меньше.
[30:53.160 --> 30:54.160]  Так, ну ладно.
[30:55.160 --> 30:56.160]  Что?
[30:57.160 --> 30:59.160]  Ну да, ну да.
[31:00.160 --> 31:01.160]  Ну мало ли, окей.
[31:02.160 --> 31:03.160]  Я вот это слушал, но забыл вообще.
[31:04.160 --> 31:07.160]  Ну вот, нет, сейчас давайте, вот сейчас быстренько вспомню.
[31:08.160 --> 31:11.160]  Думал, что понял, а начал писать, понял, что не понял.
[31:12.160 --> 31:13.160]  Ну сейчас.
[31:14.160 --> 31:16.160]  А, правильно.
[31:17.160 --> 31:18.160]  Я окончательно понял, когда написал.
[31:19.160 --> 31:20.160]  Ну да, да, да.
[31:20.160 --> 31:23.160]  А потом задумался, почему оно работает, и не понял.
[31:24.160 --> 31:25.160]  Я понял, ладно.
[31:28.160 --> 31:29.160]  Ну вот, ну, ой да.
[31:30.160 --> 31:31.160]  Ну да, да, да, да.
[31:32.160 --> 31:33.160]  Ну давайте таких фасот.
[31:34.160 --> 31:35.160]  Ну вот, да.
[31:36.160 --> 31:37.160]  Ну значит идея здесь оказывается достаточно простой.
[31:38.160 --> 31:40.160]  То есть идея будет в том, что откуда у нас проблемы.
[31:41.160 --> 31:47.160]  То есть отчасти одно из узких мест предыдущего решения было в том, что у нас переходов из там и этого столбства в ИТ плюс первый столбец очень много.
[31:48.160 --> 31:49.160]  Вот.
[31:50.160 --> 31:53.160]  Теперь мы сделаем так, что может состояние у нас будет побольше, зато переходов будет мало.
[31:54.160 --> 31:55.160]  Вот.
[31:56.160 --> 32:00.160]  Идея будет заключаться в том, что мы теперь будем класть не прям по несколько доминошек, чтобы замастить прям целый столбец.
[32:01.160 --> 32:04.160]  А будем класть по одной, потому что мы будем проходить по клеточкам вот в таком порядке.
[32:07.160 --> 32:11.160]  И следить за тем, что и в каждый момент времени говорить, так, эта клеточка занята.
[32:12.160 --> 32:14.160]  Если не занята, то быстренько чем-нибудь занять.
[32:14.160 --> 32:16.160]  Положить доминошку там либо такую, либо такую.
[32:17.160 --> 32:18.160]  То есть мы уже видите, так это будет так.
[32:19.160 --> 32:20.160]  Так чем с этой клеточки?
[32:21.160 --> 32:22.160]  Ну положим горизонтальную.
[32:23.160 --> 32:24.160]  То мы идем дальше, положим в эту вертикальную.
[32:25.160 --> 32:26.160]  Идем в эту.
[32:27.160 --> 32:28.160]  Ой, она занята!
[32:29.160 --> 32:30.160]  Так.
[32:31.160 --> 32:33.160]  Сюда положим, например, горизонтальную, а здесь она без вариентов.
[32:34.160 --> 32:35.160]  Так эта занята.
[32:36.160 --> 32:37.160]  Сюда положим тоже горизонтальную.
[32:38.160 --> 32:39.160]  Сюда, ну здесь тоже без вариентов.
[32:40.160 --> 32:41.160]  Ой, занята, а recall занята.
[32:42.160 --> 32:43.160]  Не занята, но без вариентов.
[32:44.160 --> 32:48.480]  Вот, тут занято, тут занято, давайте наконец-то положим
[32:48.480 --> 32:49.480]  вертикальную.
[32:49.480 --> 32:53.960]  Так, тут занято, тут занято, тут не занято, значит тут
[32:53.960 --> 32:54.960]  кладём вертикальную.
[32:54.960 --> 33:02.640]  Вот, ну сейчас давайте так, тут кладём горизонтальную,
[33:02.640 --> 33:09.320]  тут допустим кладём вертикальную, вот, тут кладём горизонтальную
[33:09.320 --> 33:12.280]  и вот допустим, значит вот теперь пока остановимся.
[33:12.280 --> 33:13.880]  Что мы на очередном шаге имеем?
[33:13.880 --> 33:15.880]  Мы дошли, прошли какое-то количество клеточек.
[33:15.880 --> 33:24.120]  Вот, и теперь мы знаем, что справа от этих клеточек
[33:24.120 --> 33:27.280]  есть вот набор из N клеточек, которые заняты.
[33:27.280 --> 33:31.560]  Вот они заняты, вот, которые заняты, то есть кто-то из
[33:31.560 --> 33:33.840]  них занят, кто-то нет, потому что могут торчать до минушки.
[33:33.840 --> 33:36.000]  Остальные клеточки точно тут не заняты, а эти все
[33:36.000 --> 33:37.000]  заняты.
[33:37.000 --> 33:42.160]  Вот, но эта информация, ну вот, ну вот идея
[33:42.160 --> 33:44.600]  заключается в том, что давайте вот эту информацию
[33:44.600 --> 33:45.760]  и хранить в масочке.
[33:45.760 --> 33:49.360]  То есть вот эти клеточки так и перенумеруют, ну там
[33:49.360 --> 33:52.440]  по-разному можно перенумеровать, там есть разные технологии.
[33:52.440 --> 33:54.480]  Есть технология, когда мы перенумеруем клеточки
[33:54.480 --> 33:57.240]  в соответствии с их строками и есть вариант, когда мы
[33:57.240 --> 33:59.400]  будем нумеровать клеточки в соответствии, вот, начиная
[33:59.400 --> 34:00.400]  просто вот с этой.
[34:00.400 --> 34:02.560]  То есть типа я каждый раз хочу заместить именно
[34:02.560 --> 34:03.560]  нулевую клеточку.
[34:03.560 --> 34:06.720]  Вот, то есть можно вот так делать, это уже там на самом
[34:06.720 --> 34:07.720]  деле на вкус и цвет.
[34:08.560 --> 34:09.560]  Вот.
[34:09.560 --> 34:12.560]  Значит, ну в чем теперь фишка?
[34:12.560 --> 34:17.280]  Ну теперь фишка заключается в том, что у нас есть состояние
[34:17.280 --> 34:22.760]  по сути dp, там допустим x, y, ну допустим вот пусть у
[34:22.760 --> 34:28.480]  меня будет x здесь, y здесь, x, y и маск.
[34:28.480 --> 34:29.480]  Вот.
[34:29.480 --> 34:32.280]  И тогда получается, то есть это означает, допустим
[34:32.280 --> 34:40.040]  это означает, что мы, ну вот, то есть хотим замастить
[34:40.040 --> 34:41.040]  x и y.
[34:41.040 --> 34:42.040]  Вот так.
[34:42.040 --> 34:47.080]  Ну вот типа до нее все замастили и тарчат у нас вот ровно
[34:47.080 --> 34:48.080]  маски вот этой маски.
[34:48.080 --> 34:51.160]  Ну и как мы это делаем, ну заметим, что у нас замастить
[34:51.160 --> 34:54.520]  эту клеточку всего два способа, либо положить, если она
[34:54.520 --> 34:58.560]  занята как у нас, то переход в принципе один, а если она
[34:58.560 --> 35:01.480]  не занята, то кладете либо горизонтальную доминожку
[35:01.480 --> 35:04.640]  либо вертикальную доминожку и в общем-то все.
[35:04.640 --> 35:05.640]  Вот.
[35:05.640 --> 35:08.480]  И получается в результате, что да, состояние у нас
[35:08.480 --> 35:12.840]  конечно стало больше, состояние стало два в степени n на
[35:12.840 --> 35:16.160]  n на m, но зато и обрабатываете каждое состояние теперь
[35:16.160 --> 35:17.840]  за o от единицы.
[35:17.840 --> 35:21.800]  В результате получается совсем просто минималистическая
[35:21.800 --> 35:24.080]  симпточка, которая просто в одну калитку выносит все,
[35:24.080 --> 35:25.080]  что у вас было раньше.
[35:25.080 --> 35:29.640]  Ну кроме, конечно, ситуации, когда тут логариф m и это
[35:29.640 --> 35:30.640]  прям критично.
[35:30.640 --> 35:31.640]  Вот.
[35:31.640 --> 35:37.640]  Ну да, то есть вот, собственно, вот так, конечно, да, то есть
[35:37.640 --> 35:40.800]  это вот при nm 300, конечно, это начинает летать.
[35:40.800 --> 35:41.800]  Понятно?
[35:41.800 --> 35:48.080]  Так, ладно, кто-то тут руки не подымал, так, надо ли
[35:48.080 --> 35:49.080]  подробнее?
[35:49.080 --> 35:50.080]  Вот.
[35:50.080 --> 35:54.080]  Ну, видимо, не надо.
[35:54.080 --> 35:56.080]  Окей, хорошо.
[35:56.080 --> 35:59.600]  Значит, тогда можно, значит, можно наконец возвращаться
[35:59.600 --> 36:00.600]  собственно к DFS.
[36:00.600 --> 36:01.600]  Вот.
[36:01.600 --> 36:06.840]  Да, мы наконец с вами в прошлый раз узнали, что такое DFS,
[36:06.840 --> 36:08.880]  для этого нам потребовалось целых полтора семестра.
[36:08.880 --> 36:10.520]  Ну, технология сложная, действительно.
[36:10.520 --> 36:17.320]  Да, надо было к ней готовиться, там FFT изучать, да.
[36:17.320 --> 36:18.320]  Чего?
[36:18.320 --> 36:26.320]  Нет, это никак не связано, это просто вот, ну вот,
[36:26.320 --> 36:28.840]  ну это сформулирует так, что просто это надо как-то
[36:29.080 --> 36:31.080]  быстро закрыть, чтобы больше об этом уже не думать.
[36:31.080 --> 36:36.080]  Ну да, было, да, хотя, видимо, в текущем расходу был вариант,
[36:36.080 --> 36:38.840]  ой, Господи, давайте я лучше просто в экзамене вам билет
[36:38.840 --> 36:42.680]  оставлю, а там, называется, там, тратить на это время
[36:42.680 --> 36:43.680]  мы не будем.
[36:43.680 --> 36:44.680]  Ну вот.
[36:44.680 --> 36:46.160]  Нет, просто в DFS есть, на самом деле, на что потратить
[36:46.160 --> 36:48.680]  время и на что, и что чуть-чуть проговорить.
[36:48.680 --> 36:52.640]  Вот.
[36:52.640 --> 36:57.080]  Потому что начнём мы, вот с чего, значит, начнём
[36:57.320 --> 37:00.320]  мы, пожалуй, с деревьев всё-таки.
[37:00.320 --> 37:01.320]  Вот.
[37:01.320 --> 37:05.760]  Ну, потому что, значит, ну, ну, потому что по поводу
[37:05.760 --> 37:07.920]  деревьев, ну, есть хотя бы самая первая задача.
[37:07.920 --> 37:11.680]  Найти диаметр графа.
[37:11.680 --> 37:16.880]  Так, ну-ка, поднимите руки, кто умеет искать диаметр
[37:16.880 --> 37:18.880]  дерева?
[37:18.880 --> 37:20.880]  Так.
[37:21.680 --> 37:23.680]  Ну, вот.
[37:23.680 --> 37:26.680]  Кто умеет искать диаметр дерева за линию?
[37:26.680 --> 37:30.680]  Ну, мало ли.
[37:30.680 --> 37:33.680]  А кто умеет доказывать ваш алгоритм?
[37:40.680 --> 37:42.680]  Так, хорошо.
[37:42.680 --> 37:44.680]  Какой алгоритм для начала?
[37:44.680 --> 37:47.680]  Да, правильно, всё это подлянка, потому что если у вас задача
[37:47.680 --> 37:50.680]  найти диаметр дерева, то есть, конечно, читерский
[37:50.680 --> 37:53.680]  вариант сделать это через ДП на поддеревьях.
[37:53.680 --> 37:55.680]  Ну, там запустим два ДФС.
[37:55.680 --> 37:58.680]  В одном ДФС мы для каждой вершины посчитаем вот этот
[37:58.680 --> 38:02.680]  максимальный путь от меня до какой-нибудь вершины
[38:02.680 --> 38:04.680]  у меня в поддереве.
[38:04.680 --> 38:06.680]  А потом после этого, а, может, даже не после этого,
[38:06.680 --> 38:09.680]  а прямо в этот момент для каждой вершины говорить,
[38:09.680 --> 38:12.680]  так, ну, наверное, как бы у каждого пути есть толца.
[38:12.680 --> 38:13.680]  Да.
[38:13.680 --> 38:16.680]  И для каждой, когда мы обсуждаем, думаем вершины, думаем,
[38:16.680 --> 38:19.680]  так, значит, мне нужно пойти в два моих поддерева.
[38:19.680 --> 38:22.680]  И там в каждом из них выбрать самую глубокую вершину.
[38:22.680 --> 38:24.680]  Так, ну, отлично.
[38:24.680 --> 38:26.680]  Так, давайте я переберу эти поддеревья.
[38:26.680 --> 38:28.680]  То есть, из каждого из них там найду самую глубокую.
[38:28.680 --> 38:29.680]  Их просуммирую.
[38:29.680 --> 38:31.680]  Вот, типа, вариант делать диаметр.
[38:31.680 --> 38:34.680]  То есть, в принципе, так можно.
[38:34.680 --> 38:37.680]  Так, ну, и что?
[38:37.680 --> 38:39.680]  Обривите руки, кто это реально когда-нибудь писал.
[38:39.680 --> 38:41.680]  Ух ты.
[38:41.680 --> 38:42.680]  Ох.
[38:42.680 --> 38:45.680]  Ну, слушайте, поиск диаметра именно таким образом.
[38:46.680 --> 38:49.680]  Нет, просто динамику на поддеревье я понимаю,
[38:49.680 --> 38:51.680]  что вы писали в том или ином виде, да.
[38:51.680 --> 38:53.680]  Вот.
[38:53.680 --> 38:57.680]  Да, потому что, да, есть вот действительно такой чип.
[38:57.680 --> 39:00.680]  Да, потому что такой чип есть, да, как всегда,
[39:00.680 --> 39:04.680]  знаете, как всегда, да, он приятен тем, что он, конечно,
[39:04.680 --> 39:06.680]  самодоказывающийся.
[39:06.680 --> 39:08.680]  То есть, что вы пишете, то и очевидно,
[39:08.680 --> 39:10.680]  тут в данном случае очевидно, что работает.
[39:10.680 --> 39:13.680]  Но есть сильно более простой алгоритм.
[39:14.680 --> 39:16.680]  Проще, чем вот это.
[39:16.680 --> 39:18.680]  Проще, чем вот это.
[39:18.680 --> 39:20.680]  Есть сильно более простой алгоритм.
[39:20.680 --> 39:22.680]  Алгоритм звучит так.
[39:22.680 --> 39:24.680]  Возьмем первую попавшуюся вершину,
[39:24.680 --> 39:26.680]  запустим DFS
[39:26.680 --> 39:28.680]  и найдем самую удаленную вершину от нее.
[39:30.680 --> 39:32.680]  Вот.
[39:32.680 --> 39:34.680]  Это была вершина А, это была вершина В.
[39:34.680 --> 39:36.680]  Теперь возьмем вершину В.
[39:36.680 --> 39:40.680]  Запустим DFS от вершины В.
[39:40.680 --> 39:43.680]  И найдем тоже самую удаленную вершину.
[39:45.680 --> 39:47.680]  Это будет вершина С.
[39:47.680 --> 39:49.680]  Да, утверждение.
[39:49.680 --> 39:51.680]  BC диаметр.
[39:55.680 --> 39:56.680]  Вот.
[39:56.680 --> 39:59.680]  Так, ну, поднимите руки, кто когда-нибудь писал такое.
[40:02.680 --> 40:04.680]  Ну, это делается с двумя адресами.
[40:06.680 --> 40:08.680]  Ну, чтоб он возвращал пару,
[40:08.680 --> 40:10.680]  пару, типа, расстояния.
[40:10.680 --> 40:12.680]  Два вызова одного DFS.
[40:12.680 --> 40:14.680]  А, ну, понятно, что это два вызова одного DFS.
[40:14.680 --> 40:16.680]  Естественно, да.
[40:16.680 --> 40:18.680]  Написать нужно один DFS.
[40:18.680 --> 40:20.680]  А, в этом смысле, да.
[40:20.680 --> 40:22.680]  Вот.
[40:22.680 --> 40:24.680]  Кто умеет доказывать этот алгоритм?
[40:30.680 --> 40:32.680]  А, ну, вот мы и натулились на тему,
[40:32.680 --> 40:34.680]  которую имеет смысл обсуждать на лекции.
[40:34.680 --> 40:36.680]  Так вот.
[40:36.680 --> 40:38.680]  На самом деле, нет.
[40:38.680 --> 40:40.680]  Тут, на самом деле, важно уметь,
[40:40.680 --> 40:42.680]  потому что, на самом деле, сейчас мы просто увидим,
[40:42.680 --> 40:44.680]  поймем, кое-что важное эти дома деревья, на самом деле.
[40:44.680 --> 40:46.680]  Вот 630.
[40:46.680 --> 40:48.680]  Итак.
[40:48.680 --> 40:50.680]  Ну, действительно так.
[40:50.680 --> 40:52.680]  Ну, ладно, тут все знают, что такое диаметр.
[40:52.680 --> 40:54.680]  Диаметр – это у нас максимальной длины простой путь в графе.
[40:54.680 --> 40:56.680]  Или, что то же самое, расстояние
[40:56.680 --> 40:58.680]  между двумя самыми удаленными вершинами.
[40:58.680 --> 41:00.680]  А давайте, давайте рассмотрим.
[41:00.680 --> 41:02.680]  А как устроено дерево с точки зрения этого?
[41:02.680 --> 41:04.680]  То есть, на самом деле,
[41:04.680 --> 41:06.680]  может быть, может и много.
[41:06.680 --> 41:08.680]  Но давайте вот представим себе,
[41:08.680 --> 41:10.680]  как может выглядеть дерево, у которого диаметр,
[41:10.680 --> 41:12.680]  ну, например, 10.
[41:12.680 --> 41:14.680]  Как оно выглядит?
[41:14.680 --> 41:16.680]  Вот.
[41:16.680 --> 41:18.680]  Так.
[41:18.680 --> 41:20.680]  Ну, нет, это, ну, да.
[41:20.680 --> 41:22.680]  Это реальный пример такого дерева.
[41:22.680 --> 41:24.680]  Действительно, вот он, да. Просто бамбуча, да.
[41:24.680 --> 41:26.680]  Но на этой бамбуче, наверное,
[41:26.680 --> 41:28.680]  что-то еще висит.
[41:28.680 --> 41:30.680]  Ну, вот, может быть, центральное
[41:30.680 --> 41:32.680]  решение, сколько угодно
[41:32.680 --> 41:34.680]  Ну, да.
[41:34.680 --> 41:36.680]  Ну, да.
[41:36.680 --> 41:38.680]  Вот, да.
[41:38.680 --> 41:40.680]  Ну, на самом деле, смотрите, да, вот эту вершину,
[41:40.680 --> 41:42.680]  середину диаметра, действительно, мы, кстати,
[41:42.680 --> 41:44.680]  вполне официально назовем центр.
[41:48.680 --> 41:50.680]  Вот. И теперь я утверждаю,
[41:50.680 --> 41:52.680]  ну, да, действительно, заметим, что на нее
[41:52.680 --> 41:54.680]  я могу вот такие диаметры от ветвлений
[41:54.680 --> 41:56.680]  веса 5 навесить
[41:56.680 --> 41:58.680]  сколько угодно.
[41:58.680 --> 42:00.680]  Могу еще вот тут что-то сделать, вот так еще могу сделать.
[42:00.680 --> 42:02.680]  То есть вот что-то такое,
[42:02.680 --> 42:04.680]  тут еще вот такие, кстати, да, они там не обязаны
[42:04.680 --> 42:06.680]  быть там какой-то такой глубины.
[42:06.680 --> 42:08.680]  Вот так можно сделать.
[42:08.680 --> 42:10.680]  Как угодно.
[42:10.680 --> 42:12.680]  Вот. То есть все, что угодно можно сделать,
[42:12.680 --> 42:14.680]  но есть маленький приятный нюанс.
[42:14.680 --> 42:16.680]  Приятный нюанс
[42:16.680 --> 42:18.680]  заключается в том,
[42:18.680 --> 42:20.680]  что я утверждаю, что диаметр в графе может быть
[42:20.680 --> 42:22.680]  сколько угодно,
[42:22.680 --> 42:24.680]  а центр в графе,
[42:24.680 --> 42:26.680]  а в центр дерева может быть только один.
[42:30.680 --> 42:32.680]  Ну, при условии,
[42:32.680 --> 42:34.680]  ладно, при условии,
[42:34.680 --> 42:36.680]  ну, смотря как определять центр,
[42:36.680 --> 42:38.680]  но в том определении, который я дам,
[42:38.680 --> 42:40.680]  как бы центр один.
[42:40.680 --> 42:42.680]  Вот так.
[42:42.680 --> 42:44.680]  Чего?
[42:44.680 --> 42:46.680]  Во, да, потому что я определю так.
[42:50.680 --> 42:52.680]  Хорошо, хорошо.
[42:52.680 --> 42:54.680]  Да, согласен.
[42:54.680 --> 42:56.680]  Ну, хорошо, если у меня диаметр 9, то я диаметр объявлю
[42:56.680 --> 42:58.680]  вот это центральное ребро.
[43:00.680 --> 43:02.680]  То есть если диаметр 9,
[43:02.680 --> 43:04.680]  то я объявляю ребро,
[43:04.680 --> 43:06.680]  то есть ребро и соответствующие две вершины в центр.
[43:06.680 --> 43:08.680]  А если у меня диаметр
[43:08.680 --> 43:10.680]  четный, то я объявляю
[43:10.680 --> 43:12.680]  центр центральной вершины.
[43:12.680 --> 43:14.680]  Так вот, я утверждаю, что
[43:14.680 --> 43:16.680]  центры от диаметров
[43:16.680 --> 43:18.680]  не зависят. То есть дереве
[43:18.680 --> 43:20.680]  может быть сколько угодно диаметров,
[43:20.680 --> 43:22.680]  ну, там,
[43:22.680 --> 43:24.680]  вплоть до тета от н квадрат,
[43:24.680 --> 43:26.680]  но ровно один
[43:26.680 --> 43:28.680]  центр.
[43:28.680 --> 43:30.680]  Ну, в этом вроде вообще
[43:30.680 --> 43:32.680]  просто верится.
[43:32.680 --> 43:34.680]  Вот, то есть, ну да,
[43:34.680 --> 43:36.680]  ну вот.
[43:36.680 --> 43:38.680]  Ну, нам же доказать надо.
[43:38.680 --> 43:40.680]  Ну, пусть положим, что их два.
[43:40.680 --> 43:42.680]  Рассмотрим.
[43:42.680 --> 43:44.680]  Рассмотрим.
[43:44.680 --> 43:46.680]  У каждого из двух диаметров,
[43:46.680 --> 43:48.680]  проходящих через центр.
[43:48.680 --> 43:50.680]  Получим, чтобы у нас дина больше диаметра больше.
[43:50.680 --> 43:52.680]  Ну, да,
[43:52.680 --> 43:54.680]  то есть действительно, заметим, что рассмотрим,
[43:54.680 --> 43:56.680]  то есть действительно, вот у нас есть центр у одного
[43:56.680 --> 43:58.680]  диаметра. Допустим, что у другого диаметра
[43:58.680 --> 44:00.680]  нашелся где-то там
[44:00.680 --> 44:02.680]  другой центр.
[44:02.680 --> 44:04.680]  Вот как-то вот так.
[44:04.680 --> 44:06.680]  Тогда мы замечаем,
[44:06.680 --> 44:08.680]  что в данном случае мы от этой вершины
[44:08.680 --> 44:10.680]  можем пойти в две стороны
[44:10.680 --> 44:12.680]  и уйти на расстояние пять.
[44:12.680 --> 44:14.680]  Так давайте я просто пойду
[44:14.680 --> 44:16.680]  по какому-то из путей не в сторону
[44:16.680 --> 44:18.680]  центра.
[44:18.680 --> 44:20.680]  Ну, как бы да, у него тут, я как бы
[44:20.680 --> 44:22.680]  могу пойти,
[44:22.680 --> 44:24.680]  есть одно направление в сторону
[44:24.680 --> 44:26.680]  центра, есть остальные.
[44:26.680 --> 44:28.680]  Но так как у меня есть два направления с пятеркой,
[44:28.680 --> 44:30.680]  то я выбираю просто, хотя бы одно из них точно
[44:30.680 --> 44:32.680]  ведет не в ту сторону.
[44:32.680 --> 44:34.680]  Ну, так я тогда иду-иду-иду-иду-иду
[44:34.680 --> 44:36.680]  и получаю больший диаметр.
[44:36.680 --> 44:38.680]  Все.
[44:38.680 --> 44:40.680]  Вывод.
[44:40.680 --> 44:42.680]  Получается противоречие, значит, центр один.
[44:42.680 --> 44:44.680]  То есть на самом деле все
[44:44.680 --> 44:46.680]  диаметры базируются
[44:46.680 --> 44:48.680]  на одном центре.
[44:48.680 --> 44:50.680]  Но
[44:50.680 --> 44:52.680]  аналогичным образом можно, кстати,
[44:52.680 --> 44:54.680]  можно доказать, естественно, и в нечетных диаметрах,
[44:54.680 --> 44:56.680]  что вот это центральное ребро
[44:56.680 --> 44:58.680]  оно одно.
[44:58.680 --> 45:00.680]  Других вариантов нет.
[45:00.680 --> 45:02.680]  Вот.
[45:02.680 --> 45:04.680]  То есть в принципе
[45:04.680 --> 45:06.680]  что вам, то есть по сути,
[45:06.680 --> 45:08.680]  что вам нужно, чтобы сгенерить дерево
[45:08.680 --> 45:10.680]  диаметра десять? Вам нужно взять центр
[45:10.680 --> 45:12.680]  и сгенерить там, ну вот,
[45:12.680 --> 45:14.680]  и сгенерить несколько
[45:14.680 --> 45:16.680]  поддеревьев, хотя бы два из которых
[45:16.680 --> 45:18.680]  будут глубины пять. Все.
[45:18.680 --> 45:20.680]  Но все эти, все деревья должны быть глубины
[45:20.680 --> 45:22.680]  не более чем пять, но хотя бы два
[45:22.680 --> 45:24.680]  из них должны этой глубины достигать.
[45:24.680 --> 45:26.680]  Тогда это будет
[45:26.680 --> 45:28.680]  дерево с диаметром десять.
[45:28.680 --> 45:30.680]  Вот.
[45:30.680 --> 45:32.680]  Это, собственно, вот такой вот важный момент.
[45:32.680 --> 45:34.680]  Вот. Понятно?
[45:34.680 --> 45:36.680]  Вот. Ну, исходя
[45:36.680 --> 45:38.680]  такого понятия центр, теперь легко доказать
[45:38.680 --> 45:40.680]  про то, что там
[45:40.680 --> 45:42.680]  предложенный алгоритм диаметр так реально ищет.
[45:44.680 --> 45:46.680]  Вот. Ну, потому что
[45:46.680 --> 45:48.680]  заметьте маленький приятный факт.
[45:48.680 --> 45:50.680]  Концом диаметра
[45:50.680 --> 45:52.680]  является любая вершина
[45:52.680 --> 45:54.680]  на расстоянии, ну, в нашем случае пять
[45:54.680 --> 45:56.680]  от центра, правда?
[45:58.680 --> 46:00.680]  Ну, потому что я могу пройти
[46:00.680 --> 46:02.680]  до центра, а потом просто уйти
[46:02.680 --> 46:04.680]  в направлении не в эту сторону,
[46:04.680 --> 46:06.680]  в которую можно пройти по пять, а такое
[46:06.680 --> 46:08.680]  точно существует, потому что хотя бы два есть.
[46:08.680 --> 46:10.680]  Понимаете, да?
[46:10.680 --> 46:12.680]  Вот. Понятно, о чем вы говорите, да?
[46:12.680 --> 46:14.680]  То есть, скажем, вот там вот эту вершину взять,
[46:14.680 --> 46:16.680]  я просто иду пум-пум-пум-пум-пум и иду вот сюда.
[46:16.680 --> 46:18.680]  То есть, везде,
[46:18.680 --> 46:20.680]  где я беру вершину не из этого
[46:20.680 --> 46:22.680]  поддерева, я просто вот могу
[46:22.680 --> 46:24.680]  дополнять диаметр так.
[46:24.680 --> 46:26.680]  А если я беру вершину из этого поддерева, то я просто
[46:26.680 --> 46:28.680]  ухожу вот туда наоборот.
[46:28.680 --> 46:30.680]  Вот.
[46:30.680 --> 46:32.680]  Ну, получается, более
[46:32.680 --> 46:34.680]  этого там в принципе уже можно даже решать какую-нибудь
[46:34.680 --> 46:36.680]  веселую задачу вида сколько диаметров в дереве.
[46:38.680 --> 46:40.680]  Вот.
[46:40.680 --> 46:42.680]  То есть, исходя из этого,
[46:42.680 --> 46:44.680]  видите, да, то все достаточно просто.
[46:44.680 --> 46:46.680]  Надо посчитать, значит, найти центр,
[46:46.680 --> 46:48.680]  надо найти, значит,
[46:48.680 --> 46:50.680]  вершины на расстоянии, там,
[46:50.680 --> 46:52.680]  на нужном расстоянии количество вершин
[46:52.680 --> 46:54.680]  и ответ этот будет C из этих вершин
[46:54.680 --> 46:56.680]  по два, минус там сумма C-шек,
[46:56.680 --> 46:58.680]  чтобы мы эти две вершины не взяли из одного
[46:58.680 --> 47:00.680]  поддерева. Все. Получается
[47:00.680 --> 47:02.680]  решение за линию.
[47:02.680 --> 47:04.680]  Так, тут понятно, о чем речь?
[47:04.680 --> 47:06.680]  Да, будет понятно. Вот.
[47:06.680 --> 47:08.680]  Ну, а теперь, чтобы что, как доказать алгоритм
[47:08.680 --> 47:10.680]  теперь про два диаметра?
[47:10.680 --> 47:12.680]  То есть, про два DFS вот эти.
[47:12.680 --> 47:14.680]  Ну, практически,
[47:14.680 --> 47:16.680]  ну вот, ну да, идея, ну, во-первых, да,
[47:16.680 --> 47:18.680]  то есть, для этого надо просто
[47:18.680 --> 47:20.680]  доказать, что первая вершина, до которой мы дойдем,
[47:20.680 --> 47:22.680]  это действительно вершина на расстоянии,
[47:22.680 --> 47:24.680]  ну, в нашем случае, 5 от центра.
[47:26.680 --> 47:28.680]  Вот. Но, действительно, давайте подумать,
[47:28.680 --> 47:30.680]  что у нас это может быть?
[47:30.680 --> 47:32.680]  Ну, давайте, вот это будет не 5, а мы это
[47:32.680 --> 47:34.680]  будем называть все-таки N.
[47:36.680 --> 47:38.680]  Значит, что это за самая удаленная
[47:38.680 --> 47:40.680]  вершина?
[47:40.680 --> 47:42.680]  Ну, а с два варианта.
[47:42.680 --> 47:44.680]  Либо мы, соответственно, до центра вот тут у нас
[47:44.680 --> 47:46.680]  AB, до центра не дошли,
[47:46.680 --> 47:48.680]  и тогда у нас вот тут, то есть, до какой-то LCA
[47:48.680 --> 47:50.680]  дошли, а потом ушли вниз. Но тогда у нас тут
[47:50.680 --> 47:52.680]  ребер строго меньше, чем L, и тут
[47:52.680 --> 47:54.680]  строго...
[47:54.680 --> 47:56.680]  Ну, точнее так, здесь у нас
[47:56.680 --> 47:58.680]  ребер строго меньше, чем
[47:58.680 --> 48:00.680]  DIST, соответственно,
[48:00.680 --> 48:02.680]  от, значит, A и центра,
[48:02.680 --> 48:04.680]  и тут их строго меньше, чем L.
[48:06.680 --> 48:08.680]  Вот. А если мы пойдем через
[48:08.680 --> 48:10.680]  центр, то через центр мы можем
[48:10.680 --> 48:12.680]  найти не более, чем DIST плюс L,
[48:12.680 --> 48:14.680]  но DIST плюс L мы найти можем.
[48:18.680 --> 48:20.680]  То есть, DIST A, значит,
[48:20.680 --> 48:22.680]  вот это, и в какую-нибудь сторону
[48:22.680 --> 48:24.680]  можно найти такое. Больше мы не найдем,
[48:26.680 --> 48:28.680]  но заметим, что, ну, вот, то есть, получается,
[48:28.680 --> 48:30.680]  максимальное расстояние будет ровно
[48:30.680 --> 48:32.680]  такое, причем любая вершина на таком расстоянии
[48:32.680 --> 48:34.680]  должна обладать вот таким свойством.
[48:35.680 --> 48:37.680]  То есть, мы обязаны пройти через
[48:37.680 --> 48:39.680]  центр и из этого центра уйти ровно на L,
[48:39.680 --> 48:41.680]  потому что она меньше нам неинтересна.
[48:41.680 --> 48:43.680]  Вот. То есть отсюда действительно
[48:43.680 --> 48:45.680]  следует, что у нас эта
[48:45.680 --> 48:47.680]  первая вершина, значит, соответственно,
[48:47.680 --> 48:49.680]  она находится на расстоянии L от центра
[48:49.680 --> 48:51.680]  и, получается, значит, из нее диаметра найти
[48:51.680 --> 48:53.680]  можно. Вот, собственно, и доказательства,
[48:53.680 --> 48:55.680]  ну, а попутно еще вот
[48:55.680 --> 48:57.680]  пара интересных вот
[48:57.680 --> 48:59.680]  хороших взглядов.
[48:59.680 --> 49:01.680]  Вот.
[49:01.680 --> 49:03.680]  То есть,
[49:03.680 --> 49:05.680]  то есть, на самом деле, отсюда
[49:05.680 --> 49:07.680]  можно вывести даже вообще весьма
[49:07.680 --> 49:09.680]  неожиданную задачу.
[49:09.680 --> 49:11.680]  Вот, если мы все-таки уже говорили про какие-то
[49:11.680 --> 49:13.680]  НП полные задачи.
[49:13.680 --> 49:15.680]  И вот, есть следующая задача.
[49:15.680 --> 49:17.680]  Вот, изоморфизм графов.
[49:19.680 --> 49:21.680]  О, да.
[49:21.680 --> 49:23.680]  Нет, я, кстати, не уверен, что она, по-моему, она даже
[49:23.680 --> 49:25.680]  не НП полная, кстати.
[49:25.680 --> 49:27.680]  Что?
[49:27.680 --> 49:29.680]  Ну, она, по-моему, какая-то там тоже из каких-то
[49:29.680 --> 49:31.680]  серьезных классов, но не НП полная там, я не
[49:31.680 --> 49:33.680]  помню.
[49:33.680 --> 49:35.680]  Ну,
[49:35.680 --> 49:37.680]  я вот не помню.
[49:37.680 --> 49:39.680]  Ну, я не помню детали, но не важно.
[49:39.680 --> 49:41.680]  В общем, была такая сложная задача.
[49:45.680 --> 49:47.680]  Вот.
[49:49.680 --> 49:51.680]  Значит,
[49:51.680 --> 49:53.680]  то есть, соответственно, у нас тут
[49:53.680 --> 49:55.680]  действительно есть какая-то вот НП полная
[49:55.680 --> 49:57.680]  нот, то есть, какая-то вот
[49:57.680 --> 49:59.680]  НП полнота.
[49:59.680 --> 50:01.680]  Вот. Но, соответственно,
[50:01.680 --> 50:03.680]  это если говорить об обычном графе.
[50:03.680 --> 50:05.680]  Ну, там об обычном графе. То есть, там, то есть,
[50:05.680 --> 50:07.680]  обычных графов.
[50:07.680 --> 50:09.680]  Вот.
[50:09.680 --> 50:11.680]  На самом деле, я утверждаю, что
[50:11.680 --> 50:13.680]  вот, то есть, мы сейчас будем решать такую задачу
[50:13.680 --> 50:15.680]  изоморфизм деревьев.
[50:21.680 --> 50:23.680]  Значит, а именно
[50:27.680 --> 50:29.680]  вот, а именно, то есть,
[50:29.680 --> 50:31.680]  то есть, задача данных два дерева
[50:31.680 --> 50:33.680]  надо проверить, изоморфны ли они.
[50:33.680 --> 50:35.680]  То есть, можно ли там перенумеровать
[50:35.680 --> 50:37.680]  в одном из них
[50:37.680 --> 50:39.680]  вершины так, чтобы
[50:39.680 --> 50:41.680]  деревья прям совпали в точности.
[50:43.680 --> 50:45.680]  Как же это сделать?
[50:49.680 --> 50:51.680]  Ну, идея оказывается такая. Во-первых,
[50:51.680 --> 50:53.680]  основная идея заключается в том, что
[50:53.680 --> 50:55.680]  центр у деревьев
[50:55.680 --> 50:57.680]  один должен быть.
[50:57.680 --> 50:59.680]  Ну, то есть, начнем с того,
[50:59.680 --> 51:01.680]  что просто найдем у обоих деревьев
[51:01.680 --> 51:03.680]  диаметры и центра.
[51:03.680 --> 51:05.680]  Но если выяснить, что диаметры не совпадают,
[51:05.680 --> 51:07.680]  то до свидания сразу.
[51:07.680 --> 51:09.680]  Но если диаметры совпали,
[51:09.680 --> 51:11.680]  то тогда,
[51:11.680 --> 51:13.680]  давайте сейчас для простоты рассмотрим
[51:13.680 --> 51:15.680]  ситуацию, когда у нас диаметр
[51:15.680 --> 51:17.680]  оказался четен.
[51:17.680 --> 51:19.680]  Тогда заметим, что центр у обоих деревьев
[51:19.680 --> 51:21.680]  восстанавливается однозначно, и по изоморфизме
[51:21.680 --> 51:23.680]  они должны наложиться друг на друга.
[51:23.680 --> 51:25.680]  Правда?
[51:25.680 --> 51:27.680]  Ну, тогда давайте подвесим
[51:27.680 --> 51:29.680]  оба дерева за эти центры,
[51:29.680 --> 51:31.680]  и
[51:31.680 --> 51:33.680]  получим маленькую приятную вещь.
[51:33.680 --> 51:35.680]  То есть, получим немножко
[51:35.680 --> 51:37.680]  другую задачу.
[51:37.680 --> 51:39.680]  Задача будет называться изоморфизм
[51:39.680 --> 51:41.680]  подвешенных деревьев.
[51:41.680 --> 51:43.680]  То есть, ситуация,
[51:43.680 --> 51:45.680]  то есть, данные два подвешенных дерева,
[51:45.680 --> 51:47.680]  изоморфны ли они, но в том плане,
[51:47.680 --> 51:49.680]  что корень разрешаете переводить только в корень.
[51:49.680 --> 51:51.680]  Понятно, да?
[51:51.680 --> 51:53.680]  Ну, то есть, если диаметр
[51:53.680 --> 51:55.680]  четный, то мы легко сводим задачу именно
[51:55.680 --> 51:57.680]  к такой, но, правда, если он
[51:57.680 --> 51:59.680]  нечетный, то тоже не проблема, потому что
[51:59.680 --> 52:01.680]  то есть, это там
[52:01.680 --> 52:03.680]  да
[52:03.680 --> 52:05.680]  ну, можно, да, ну, там, да, там
[52:05.680 --> 52:07.680]  два варианта могут, ну, в принципе, да.
[52:07.680 --> 52:09.680]  То есть, самое тупое можно что сделать, это
[52:09.680 --> 52:11.680]  взять эти центральные ребра и вставить
[52:11.680 --> 52:13.680]  на них вот такую вершину, например.
[52:13.680 --> 52:15.680]  Вот один из способов такой.
[52:15.680 --> 52:17.680]  То есть, там, как угодно.
[52:17.680 --> 52:19.680]  Итак, значит, данные два
[52:19.680 --> 52:21.680]  подвешенных дерева, и нам
[52:21.680 --> 52:23.680]  нужно понять, изоморфны ли
[52:23.680 --> 52:25.680]  они.
[52:25.680 --> 52:27.680]  Как же это сделать?
[52:29.680 --> 52:31.680]  Да вот.
[52:31.680 --> 52:33.680]  Ну, в принципе,
[52:33.680 --> 52:35.680]  ну, если у нас задача просто это сделать хоть
[52:35.680 --> 52:37.680]  как-то за полиномиальное время, чтобы убедить,
[52:37.680 --> 52:39.680]  что эта задача там не НП какая-нибудь.
[52:41.680 --> 52:43.680]  А мы не можем придумать какой-нибудь хэш подвешенный
[52:43.680 --> 52:45.680]  дерева?
[52:45.680 --> 52:47.680]  Ну, это хэш, это даже уже оптимизация.
[52:47.680 --> 52:49.680]  Нет, в смысле, который
[52:49.680 --> 52:51.680]  будет, честно
[52:51.680 --> 52:53.680]  может
[52:53.680 --> 52:55.680]  как-то не хэшами делать.
[52:55.680 --> 52:57.680]  Ну,
[52:57.680 --> 52:59.680]  на самом деле, да, но до этого надо дойти.
[53:01.680 --> 53:03.680]  То есть, скажем так, кончится тем, что я
[53:03.680 --> 53:05.680]  утверждаю, что ее можно решить Н лог
[53:05.680 --> 53:07.680]  Н без хэшей.
[53:09.680 --> 53:11.680]  Хотя, самое самое, что идея
[53:11.680 --> 53:13.680]  останется, но как бы исчезнут
[53:13.680 --> 53:15.680]  эти ваши рандомности какие-то
[53:15.680 --> 53:17.680]  и возможности. И теоретическая
[53:17.680 --> 53:19.680]  вероятность коллизий каких-то.
[53:19.680 --> 53:21.680]  Ну, потому что что имеется в виду обычно под
[53:21.680 --> 53:23.680]  решением с хэшами?
[53:23.680 --> 53:25.680]  Под решением с хэшами может
[53:25.680 --> 53:27.680]  иметься в виду следующее, да, то есть
[53:27.680 --> 53:29.680]  как описать дерево. Да, вот как описать дерево.
[53:29.680 --> 53:31.680]  Вот у вас есть дерево, да.
[53:31.680 --> 53:33.680]  Мы можем, допустим, запустить
[53:33.680 --> 53:35.680]  DFS и прям
[53:35.680 --> 53:37.680]  честно, там, каждый, там
[53:37.680 --> 53:39.680]  и честно его записывать. То есть, знаете, вот эти
[53:39.680 --> 53:41.680]  через открывающие, закрывающие, открываются,
[53:41.680 --> 53:43.680]  открываются, открываются, да.
[53:43.680 --> 53:45.680]  Открывается,
[53:45.680 --> 53:47.680]  значит, закрывается,
[53:47.680 --> 53:49.680]  значит, там открывается, закрывается,
[53:49.680 --> 53:51.680]  закрывается, закрывается, закрывается,
[53:51.680 --> 53:53.680]  там что-то еще, пум-пум-пум-пум-пум,
[53:53.680 --> 53:55.680]  пум-пум-пум. Вот можно так
[53:55.680 --> 53:57.680]  описать, да.
[54:01.680 --> 54:03.680]  Вот, но в принципе, ну правда, заметим,
[54:03.680 --> 54:05.680]  что если я попереставляю под деревья,
[54:05.680 --> 54:07.680]  то может получиться другая скопочная
[54:07.680 --> 54:09.680]  последовательность, правда?
[54:09.680 --> 54:11.680]  Может такое быть, да?
[54:11.680 --> 54:13.680]  Ну, тогда у меня
[54:13.680 --> 54:15.680]  будет,
[54:15.680 --> 54:17.680]  будет, например, такая.
[54:17.680 --> 54:19.680]  То есть, давайте я эти
[54:19.680 --> 54:21.680]  скопочные последовательности буду
[54:21.680 --> 54:23.680]  сортить.
[54:23.680 --> 54:25.680]  Да, то есть, ну чтобы идентичность, я
[54:25.680 --> 54:27.680]  буду все под деревья выписывать в
[54:27.680 --> 54:29.680]  отсортированном, по,
[54:29.680 --> 54:31.680]  например, длине, при равных длинах
[54:31.680 --> 54:33.680]  лексикографически, соответственно,
[54:33.680 --> 54:35.680]  там, в общем, короче,
[54:35.680 --> 54:37.680]  по строкам.
[54:37.680 --> 54:39.680]  Вот. Ну там я не буду говорить,
[54:39.680 --> 54:41.680]  ну вот. И тогда у нас получается,
[54:41.680 --> 54:43.680]  что каждое, каждое
[54:43.680 --> 54:45.680]  поддерево, то есть,
[54:45.680 --> 54:47.680]  то есть, по каждому поддереву соответствует
[54:47.680 --> 54:49.680]  fierce такая строка. Причем, более
[54:49.680 --> 54:51.680]  того, разные по изоморфности
[54:51.680 --> 54:53.680]  деревья, то есть неизоморфным
[54:53.680 --> 54:55.680]  деревьям соответствуют разные строки.
[54:55.680 --> 54:57.680]  Понимаете, да?
[54:57.680 --> 54:59.680]  Ну, в принципе, то есть, это уже,
[54:59.680 --> 55:01.680]  то есть, ну, то есть, какой-то
[55:01.680 --> 55:03.680]  полином, в принципе, уже, честно,
[55:03.680 --> 55:05.680]  получили. Ну я
[55:05.680 --> 55:07.680]  так в слету там можно бить квадрат там
[55:07.680 --> 55:09.680]  это или куб там, вот, неважно.
[55:09.680 --> 55:16.080]  Но, на самом деле, если вы приходите и говорите, что
[55:16.080 --> 55:20.680]  я олимпиагик, я могу что-нибудь попихать, я могу вместо того,
[55:20.680 --> 55:23.440]  чтобы хранить последовательность, значит, именно правильных
[55:23.440 --> 55:26.920]  скопчатых последовательностей, я могу вместо этих правильных
[55:26.920 --> 55:29.440]  скопчатых последовательностей хранить хэши.
[55:29.440 --> 55:37.320]  Ну вот, ну могу же я у стройки хэш взять, правда?
[55:37.320 --> 55:39.320]  Честное его величество хэш.
[55:39.320 --> 55:45.200]  И тогда возникает, ну вот, ну возникает такая идея,
[55:45.200 --> 55:54.520]  что, ну вот, тогда у меня будет идея, а давайте я буду упорядочивать эти строчки не по, значит,
[55:54.520 --> 56:05.840]  литерографически, а просто по хэшу. Понятно, да? Вот. И тогда что у меня получится? Ну тогда,
[56:05.840 --> 56:12.200]  значит, ну вот, но тогда единственное, ну вот, то тогда, значит, как тогда у нас будет решение
[56:12.200 --> 56:20.400]  задачи устроено? Ну, заметим, что, ну вот, то есть хэш я так, а, ну в принципе, я могу вычислить,
[56:20.400 --> 56:26.840]  вычислить на самом деле объявном виде хэш. А, ну в принципе, да, если я в каждой, значит, храню хэш
[56:26.840 --> 56:33.880]  и еще сколько вершин, то тогда, получается, суммарно я потратил, то есть, то тогда, получается,
[56:33.880 --> 56:41.160]  я все хэши честно вычислю за время, ну, заметим, что если я знаю хэши, знаю размеры строчек,
[56:41.160 --> 56:45.520]  то я, в принципе, хэш могу вычислить честно. Правда у нас полиминальный хэш, да? Ну, потому что
[56:45.520 --> 56:52.280]  здесь я беру, там, h1 умножить на, там, основание в степени v2 плюс h2, все это, там, ну, понятен
[56:52.280 --> 57:01.560]  принцип, да? Вот. Значит, что будет, ну вот, но тогда, получается, я могу, получается, здесь,
[57:01.560 --> 57:09.760]  тогда, прям эти хэши честно вычислить за время, получается, n log n. Ну, потому что я должен, там,
[57:09.760 --> 57:15.600]  в каждой вершине еще что-то сортировать. И после этого, собственно, там, то есть, получается,
[57:15.600 --> 57:25.680]  я должен насчитать хэш одного дерева, насчитать одного и выяснить, равны ли хэши. Но у этого
[57:25.680 --> 57:32.280]  решения есть недостаток. Это хэши все-таки. То есть, может быть, случайная коллизия. А как ее избежать?
[57:32.280 --> 57:42.440]  Вот. А оказывается, можно. То есть, на самом деле, сейчас я проделаю примерно то же самое, но никаких
[57:42.440 --> 57:49.280]  хэшей не будет. Значит, смотрите, ведь дело в том, что, пока я запускаю ДФС в одном дереве,
[57:49.280 --> 57:54.120]  потом в другом, я встречаю какие-то поддеревья. Этих поддеревьев у меня небольшое количество,
[57:54.120 --> 58:02.960]  правда? Так вот, я буду пытаться делать следующее. Я буду говорить, каждое поддерево, которое я вижу,
[58:02.960 --> 58:09.760]  я буду пытаться перенумеровать. Ну, в том плане, я вижу поддерево. Вот, допустим, я буду говорить так.
[58:09.760 --> 58:16.520]  Вот я запустил ДФС, я тут вижу. Так, вижу поддерево из одной вершины. Я объявляю, что это поддерево,
[58:17.080 --> 58:23.800]  это будет у меня такое поддерево номер ноль. Вот. Ну, потом пошел тут куда-нибудь еще. Тут тоже ноль.
[58:23.800 --> 58:30.420]  Вот. Тут я вот пошел вот так-так. Тут я тоже вижу поддерево из одной вершины. Оно у меня уже было.
[58:30.420 --> 58:38.360]  Это ноль. А теперь я вижу, что у меня поддерево, из которого у меня еще не было. Ну, что это за поддерево,
[58:38.360 --> 58:43.280]  говорю я? Так, это поддерево, у которого у корня есть ровно один ребенок, и это
[58:43.280 --> 58:49.680]  дерево номер ноль у меня такого дерева еще не было поэтому я говорю так у меня
[58:49.680 --> 58:54.320]  есть поэтому я объявляю это дерево номер 1 то есть смотрите я буду записывать так
[58:54.320 --> 58:58.600]  то есть я могу сказать что каждое дерево задается тем какие деревья висят
[58:58.600 --> 59:05.120]  на корне правда то есть я буду вот так писать если на вершине ничего не висит
[59:05.120 --> 59:12.040]  то это наверное будет наверное дерево номер ноль если висит одно дерево номер
[59:12.040 --> 59:17.160]  ноль то значит это будет дерево номер один что я теперь вижу так теперь я
[59:17.160 --> 59:21.400]  вижу что у меня здесь висит два ребенка с нулями и одна единица ну естественно
[59:21.400 --> 59:26.960]  я тут ну то есть пишу 001 пишу что это у меня будет 2
[59:26.960 --> 59:33.440]  вот понятно да вот тут у меня еще какой-то dfs значит он тут тоже куда-то
[59:33.440 --> 59:39.120]  нас отправит то есть это 0 потому что тут детей нет значит тут у нас допустим пусть
[59:39.120 --> 59:44.840]  будет 00 и тут видим все но тогда видим а мы объявляем что дерево у которого
[59:44.840 --> 59:57.360]  значит есть два ребенка и оба нули такого не было а мы теперь заносим да
[59:57.360 --> 01:00:10.560]  именно то есть по факту мы делаем мап из вектора интов в нты да естественно
[01:00:10.560 --> 01:00:16.720]  все вектора в этом мапе должны быть отсортированы вот то есть вот таким вот
[01:00:16.720 --> 01:00:22.320]  но то есть dfs будет работать так мы запустимся от под деревья получим их
[01:00:22.320 --> 01:00:29.480]  номера вот там n1 n2 там n3 там и тогда ленка отсортируем их то есть вот скажем
[01:00:29.480 --> 01:00:34.960]  что они вот такие и теперь просто лезем в мапчик честно говорим если такой вектор
[01:00:34.960 --> 01:00:40.320]  уже есть значит там там написано написано какой номер и тут должен писать если
[01:00:40.320 --> 01:00:47.440]  такого вектора нет значит честно вставляем понятна
[01:00:47.440 --> 01:00:55.800]  так вот теперь давайте смотреть внимательно что может показаться что
[01:00:55.800 --> 01:00:58.840]  действительно это громоздко ну потому что понятно ну то есть дальше решение
[01:00:58.840 --> 01:01:03.440]  понятно да то есть мы запустим dfs от одного дерева в том не вне стирая мап
[01:01:03.440 --> 01:01:09.640]  внимание не стирая мап мы запускаем такой же dfs от второго дерева ну как бы
[01:01:09.640 --> 01:01:13.400]  если у центров получится при этом одинаковые номера но там если у корней
[01:01:13.400 --> 01:01:19.760]  получится одинаковые номера значит мы победили логично да вот ну если нет то
[01:01:19.760 --> 01:01:26.640]  нет или что для того чтобы те деревья которые под деревья которые мы уже
[01:01:26.640 --> 01:01:31.240]  встречали в первом дереве там были записаны сюда и номировались дальше в
[01:01:31.240 --> 01:01:37.520]  этом и смысл вот но теперь вот самая большая такая не самый не тривиальный
[01:01:37.520 --> 01:01:44.280]  момент за какую 8 точку это работает вот может показаться что то есть
[01:01:44.280 --> 01:01:48.320]  действительно кажется что это едва ли какой-то там страшно n квадрат лог n
[01:01:48.320 --> 01:01:55.440]  почему потому что для каждой вершины мы берем там вектор размера n и пихая нод
[01:01:55.440 --> 01:02:00.280]  и ищем его где-то в мапе да а в мапе мы делаем логариф мн сравнений каждый из
[01:02:00.280 --> 01:02:07.840]  которых работает тоже за отн и получается н квадрат логен так ну во
[01:02:07.840 --> 01:02:12.880]  первых мы хотим отказаться от хэшей а во вторых это позволил логарифом это
[01:02:12.880 --> 01:02:20.880]  убьет логарифом но не н квадрат поэтому увы придется а хотя нет но то есть это
[01:02:20.880 --> 01:02:24.200]  но то есть нет по факту на самом деле если вы делаете он ордерет мап это просто
[01:02:24.200 --> 01:02:28.640]  другая реализация уже того что могли бы сделать и без этого то есть просто хэш
[01:02:28.640 --> 01:02:38.920]  будет по-другому устроен но относительно нет а на самом деле идея такая на самом
[01:02:38.920 --> 01:02:46.720]  деле заметим что ну n квадрат вот этот лог n который у нас получился да но
[01:02:46.720 --> 01:02:51.480]  оценку здесь можно конечно оптимизировать
[01:02:51.480 --> 01:03:01.160]  да потому почему потому что на самом деле можно заметить следующее что у нас
[01:03:01.160 --> 01:03:07.560]  ни как далеко не каждый вектор будет размера n более того у нас вектора суммарно
[01:03:07.560 --> 01:03:12.320]  имеют размер н даже n минус один правда ну некоторые из них пустые правда но
[01:03:12.320 --> 01:03:18.400]  суммарно н минус вот но там вот это вот и тогда что получается но тогда я
[01:03:18.400 --> 01:03:24.840]  утверждаю следующее что если вы в мапчер подсовываете вектор размера к то все
[01:03:24.840 --> 01:03:31.600]  сравнения в мапе происходят за от как потому что даже если вы этот вектор
[01:03:31.600 --> 01:03:37.280]  сравниваете с каким-то более длинным вектором то все равно больше чем от к
[01:03:37.280 --> 01:03:41.000]  операции ты сравнение вам не надо правда потому что либо вы эти два указатель
[01:03:41.000 --> 01:03:45.040]  дошли до конца к и тогда вы тут же сразу поняли ответ либо не дошли и тогда это
[01:03:45.040 --> 01:03:51.480]  еще быстрее вот ну то есть единственное только надежда что мапчик наверно не
[01:03:51.480 --> 01:03:57.520]  копирует ключи для того чтобы сравнивать но он их не копирует поэтому
[01:03:57.520 --> 01:04:02.080]  спасибо ему за это ром хотя тут оговорка не копирует это потому что вы прям так
[01:04:02.080 --> 01:04:08.080]  написали чтобы не копировал но на самом деле да потому что потому что в мапе там
[01:04:08.080 --> 01:04:12.200]  на самом деле пара хранятся в виде констов поэтому хотя нет хотя это как раз на
[01:04:12.200 --> 01:04:17.760]  ворот повод скопировать конечно но нет он конечно этого не делает он да
[01:04:17.760 --> 01:04:24.680]  называется он не псих и абсолютно молодец вот но тогда получается что по
[01:04:24.680 --> 01:04:31.240]  факту у вас асимптует скринен квадрат логен а тогда вы прибегает то есть
[01:04:31.240 --> 01:04:38.000]  получается сумма по всем вершинам и тогда в каждой вершине сумма это то есть
[01:04:38.440 --> 01:04:44.360]  длина вектора это степень вершины и все сравнения будут делаться за степень
[01:04:44.360 --> 01:04:52.040]  вершины умножить на ну логарифм n потому что логарифм n размер мапа но
[01:04:52.040 --> 01:04:56.760]  сумма всех степень в смысле в смысле количества детей ну там можно 1 плюс
[01:04:56.760 --> 01:05:07.440]  конечно что честно было но заметим что сумма 1 плюс дегов это буквально 2 и
[01:05:07.440 --> 01:05:15.920]  минус 1 на логен ну то есть короче-то это от н лога то есть отсюда следует что
[01:05:15.920 --> 01:05:22.240]  а что оказывается этот алгоритм работает за н логен
[01:05:23.640 --> 01:05:28.200]  нет на самом деле знаете еще в строчках у вас такая ситуация могла возникнуть
[01:05:28.200 --> 01:05:32.480]  потому что например вот знаете бывает такая ситуация вот когда когда у вас
[01:05:32.480 --> 01:05:36.960]  там какой-нибудь первое занятие набор там первая задача может быть такая
[01:05:36.960 --> 01:05:41.520]  реализуйте сет строчек сет на уровне вставьте строчку удалите строчку скажите
[01:05:41.520 --> 01:05:47.680]  есть ли такая строчка естественно есть очень большой соблазн возможно кто-то
[01:05:47.680 --> 01:05:52.920]  из вас делал просто взять и сделать это через остд сет ну хотя бы попробовать а
[01:05:52.920 --> 01:05:57.960]  вдруг и выясняется что это решение получает от ей я получал кто-нибудь
[01:05:57.960 --> 01:06:06.440]  окей таким способом а тут все честные всем все борьбе с другой задачей добавить
[01:06:06.440 --> 01:06:14.920]  строчку и найти катерик сихографическую а ну ордера да ну ордер это слава богу
[01:06:14.920 --> 01:06:18.800]  хоть кат элемент за логарифом ищет но на самом деле а вот это вот это фактически
[01:06:18.800 --> 01:06:23.400]  доказательства почему как бы ставка удаления и поиск такой строки на сад
[01:06:23.400 --> 01:06:27.360]  то есть на самом деле работают за удобавливаемую ассимптутику которую не
[01:06:27.360 --> 01:06:33.600]  так просто обвалить потому что по факту все вставки удаю потому что каждая вставка
[01:06:33.600 --> 01:06:38.840]  удаления и проведет поиск строчки будут работать за авто в таком сете за длину
[01:06:38.840 --> 01:06:44.360]  этой строчки на логарифом количество строчек так что на самом деле да то есть
[01:06:44.360 --> 01:06:47.600]  там то есть надо про очень жесткие ограничения ставить что прямо работала
[01:06:47.600 --> 01:06:53.200]  только линия интересно да нет ну это наверное возможно возможно но это больно
[01:06:53.200 --> 01:07:01.440]  нет ну как сказать нет ну если прям совсем поставить речи не прям зажать тель прям
[01:07:01.440 --> 01:07:08.560]  совсем то может быть и может да не на уборной не на сток константа чтобы она не
[01:07:08.560 --> 01:07:15.320]  перешибала логарифом хотя там проблем хоть и там а хотя быть я там отдельная
[01:07:15.320 --> 01:07:19.680]  подлянка будет еще в том что если что у вас как бы либо строчек много либо
[01:07:19.680 --> 01:07:25.760]  строчки либо строчки то есть либо строчки длинные либо строчек много а и то и то
[01:07:25.760 --> 01:07:33.240]  одновременно как-то будет плохо вот там просто если строчек мало то там может начаться вообще
[01:07:33.240 --> 01:07:39.520]  едва ли не перебор в тупую может работать если неправильно тесты делать его так что там да то
[01:07:39.520 --> 01:07:45.000]  есть если как то есть если копнуть то на самом то есть хотя полезно задачи в таких то таким
[01:07:45.000 --> 01:07:51.680]  задачем тесты делать конечно столько много во строчках узнать и понять можно вот так что то
[01:07:51.680 --> 01:07:55.680]  есть на самом деле тут еще вот такие интересные штуки есть так что вот так вот мы решаем из
[01:07:55.680 --> 01:08:02.560]  маркфизом за н лога так то есть так как я уже сказал то есть без без всяких шей то есть это
[01:08:02.560 --> 01:08:10.440]  прям предельно честное решение там можно ли решить эту задачу за линию я не знаю вот но
[01:08:10.440 --> 01:08:15.000]  пока меня такой алгоритм метко тоже есть в общем-то пишется тоже не сложно есть ли тут какие-то
[01:08:15.760 --> 01:08:18.960]  так
[01:08:35.720 --> 01:08:36.680]  так вот
[01:08:45.000 --> 01:09:03.080]  На самом деле, что еще нужно знать про дерево?
[01:09:03.080 --> 01:09:06.600]  На самом деле центр, полезно помнить, что центр это не
[01:09:06.600 --> 01:09:09.040]  единственная вершина, за которую можно подвесить
[01:09:09.040 --> 01:09:10.040]  дерево.
[01:09:10.040 --> 01:09:16.240]  Ну скажем так, то есть центр это не единственная в своем
[01:09:16.240 --> 01:09:17.240]  роде вершина.
[01:09:17.240 --> 01:09:18.240]  Вот так скажем.
[01:09:18.240 --> 01:09:24.480]  Вот, потому что в некоторых случаях оказывается полезным
[01:09:24.480 --> 01:09:28.920]  конечно найти, подвешивать дерево не за центр, а за
[01:09:28.920 --> 01:09:29.920]  центруид.
[01:09:29.920 --> 01:09:36.240]  Так, ну-ка внимание, вопрос, поднимите руки, кто знает,
[01:09:36.240 --> 01:09:37.240]  что такое центруид.
[01:09:37.240 --> 01:09:45.120]  Так, вот, так, уже что-то не 100% пошло, да.
[01:09:45.120 --> 01:09:48.160]  Так, ну и ничего, сейчас все узнаете.
[01:09:48.160 --> 01:09:52.200]  Да, по каким-то меркам это звать, а как вы все расвоиговали
[01:09:52.200 --> 01:09:53.200]  без этого знания.
[01:10:23.200 --> 01:10:27.480]  Так что, соответственно, что будет дальше?
[01:10:27.480 --> 01:10:30.640]  Ну вот, значит, что такое центруид?
[01:10:30.640 --> 01:10:34.960]  Значит, тут центруид, это такая вершина в дереве,
[01:10:34.960 --> 01:10:36.640]  значит, тут рассмотрим какое-нибудь абсолютно произвольное
[01:10:36.640 --> 01:10:37.640]  дерево.
[01:10:37.640 --> 01:10:41.040]  Да, ну, наверное, нет нужды говорить, что мы рассматриваем
[01:10:41.040 --> 01:10:46.880]  не двоичные деревья, а произвольные деревья, в принципе они
[01:10:46.880 --> 01:10:48.400]  пока даже не обязательно подвешены.
[01:10:49.280 --> 01:10:57.400]  Значит, если у этого дерева N-вершин, то центруид, это
[01:10:57.400 --> 01:11:04.200]  такая вершина, что если ее удалить вместе с ее ребрами,
[01:11:04.200 --> 01:11:09.480]  то дерево разобьется на компоненты связности,
[01:11:09.480 --> 01:11:15.640]  каждая из которых по размеру не более чем N пополам.
[01:11:39.640 --> 01:11:48.640]  Вот, то есть вот такая красота, N пополам, или не N пополам,
[01:11:48.640 --> 01:11:49.640]  но N-N.
[01:11:49.640 --> 01:11:50.640]  Вот, красота.
[01:11:50.640 --> 01:11:54.880]  Ну, вот и крайний вопрос, а такая красота существует
[01:11:54.880 --> 01:11:55.880]  вообще?
[01:11:55.880 --> 01:12:02.520]  Вот, оказывается, существует, причем более того, есть
[01:12:02.520 --> 01:12:04.760]  вполне себе конструктивный алгоритм, как ее найти.
[01:12:05.040 --> 01:12:12.200]  Найти ее можно следующим образом, смотрите, берем,
[01:12:12.200 --> 01:12:16.160]  подвешиваем дерево за первую попавшуюся вершину, да,
[01:12:16.160 --> 01:12:21.760]  буквально первую попавшуюся, и запускаем DFS, запускаем
[01:12:21.760 --> 01:12:25.560]  DFS, насчитываем СЗ.
[01:12:25.560 --> 01:12:30.320]  Насчитали СЗ, пришли, значит, теперь смотрим, если у всех
[01:12:30.320 --> 01:12:35.640]  детей СЗ меньше или равно чем N пополам, то, поздравляю,
[01:12:35.640 --> 01:12:36.640]  мы попали сразу.
[01:12:36.640 --> 01:12:41.520]  Но, нам, предположим, нам не повезло, но заметим,
[01:12:41.520 --> 01:12:46.120]  что такой тяжелый ребенок ровно один, если он есть,
[01:12:46.120 --> 01:12:47.120]  конечно.
[01:12:47.120 --> 01:12:48.480]  Да, но мы это уже в Хавилайте обсуждали.
[01:12:48.480 --> 01:12:55.600]  Хорошо, пойдем туда, посмотрим на его детей, ну вот, ну и
[01:12:55.600 --> 01:12:58.960]  на детей его детей, соответственно, потому что смотрим, есть
[01:12:58.960 --> 01:13:04.560]  или у него тяжелые дети, ну есть так, идем, идем,
[01:13:04.560 --> 01:13:07.760]  идем, ну дети, конечно, тяжелые, но тяжесть постепенно уменьшается.
[01:13:07.760 --> 01:13:13.240]  И вот, явно, наконец, в какой-то момент, то есть обязательно
[01:13:13.240 --> 01:13:16.040]  наступит момент, когда вот у вершины СЗ больше, чем
[01:13:16.040 --> 01:13:21.720]  N пополам, а у всех ее детей меньше либо равно, чем N пополам.
[01:13:21.720 --> 01:13:22.720]  Рано или поздно такое наступит.
[01:13:22.720 --> 01:13:26.200]  Я утверждаю, что это и есть центроид.
[01:13:26.200 --> 01:13:27.200]  Почему?
[01:13:28.200 --> 01:13:31.560]  Ну, потому что если мы удалим эту вершину, останутся дети,
[01:13:31.560 --> 01:13:34.120]  на которых висит не более, чем N пополам, и останется
[01:13:34.120 --> 01:13:35.120]  то, что сверху.
[01:13:35.120 --> 01:13:39.360]  Но так как, что такое то, что сверху?
[01:13:39.360 --> 01:13:43.080]  Это все без того, что висит на нас.
[01:13:43.080 --> 01:13:46.840]  Но если на нас висит больше, чем N пополам, значит, без
[01:13:46.840 --> 01:13:48.800]  нас меньше, чем N пополам.
[01:13:48.800 --> 01:13:51.200]  Значит, ура, это и есть центроид.
[01:13:51.200 --> 01:13:54.400]  Значит, получается два вывода.
[01:13:54.480 --> 01:13:56.480]  А. Центроид существует.
[01:13:56.480 --> 01:13:58.480]  Б.
[01:13:58.480 --> 01:14:02.480]  Существует алгоритм, который за ОАТН его найдет.
[01:14:02.480 --> 01:14:04.480]  Удобно, правда?
[01:14:04.480 --> 01:14:06.480]  Вот.
[01:14:06.480 --> 01:14:08.480]  Чего?
[01:14:08.480 --> 01:14:12.480]  Так, вот возникает вопрос.
[01:14:12.480 --> 01:14:14.480]  Единственен ли центроид?
[01:14:14.480 --> 01:14:18.480]  Ну, вроде как, из этого жалко рифму, практически следует
[01:14:18.480 --> 01:14:20.480]  доказательство единственности.
[01:14:20.480 --> 01:14:22.480]  Да.
[01:14:22.560 --> 01:14:26.560]  Нет.
[01:14:26.560 --> 01:14:28.560]  Ну, смотрите, на самом деле, да.
[01:14:28.560 --> 01:14:30.560]  Сразу высекает пример такой, что может быть вот такая
[01:14:30.560 --> 01:14:32.560]  вот, собственно, такая вот бабочка.
[01:14:32.560 --> 01:14:34.560]  Такая галстук бабочка.
[01:14:34.560 --> 01:14:38.560]  То есть, такая два дерева размера N пополам, соединенные
[01:14:38.560 --> 01:14:40.560]  ребром.
[01:14:40.560 --> 01:14:42.560]  Тогда обе эти вершины являются центроидами.
[01:14:42.560 --> 01:14:46.560]  Но сразу заметим, что никто, кроме них, центроидом
[01:14:46.560 --> 01:14:48.560]  не является.
[01:14:48.560 --> 01:14:50.560]  Ну, потому что, если я, скажем, возьму какую-нибудь
[01:14:50.640 --> 01:14:54.640]  вершину здесь и отпилю ее, то в одном из-под деревьев
[01:14:54.640 --> 01:14:58.640]  будет обязательно вот просто целая балалайка, вот типа
[01:14:58.640 --> 01:15:00.640]  висящая на этом дереве.
[01:15:00.640 --> 01:15:02.640]  А на этой балалайке N пополам плюс один вершин есть.
[01:15:02.640 --> 01:15:04.640]  Понятно, да?
[01:15:04.640 --> 01:15:06.640]  Вот.
[01:15:06.640 --> 01:15:10.640]  Значит, в этом случае, то есть, да, может быть, когда
[01:15:10.640 --> 01:15:12.640]  центроида два.
[01:15:12.640 --> 01:15:16.640]  А может быть, может быть, когда центроида три, четыре,
[01:15:16.640 --> 01:15:18.640]  девятнадцать.
[01:15:18.720 --> 01:15:20.720]  Но тут все просто.
[01:15:20.720 --> 01:15:22.720]  Да, пятьдесят семь, конечно.
[01:15:22.720 --> 01:15:24.720]  Сто семьдесят девять, две тысячи семь там.
[01:15:24.720 --> 01:15:26.720]  Ну и просто десять пятый, да.
[01:15:26.720 --> 01:15:28.720]  Вот.
[01:15:28.720 --> 01:15:32.720]  Нет, а на самом деле, смотрите, значит, тут помогает следующие
[01:15:32.720 --> 01:15:34.720]  рассуждения.
[01:15:34.720 --> 01:15:36.720]  Рассмотрим центроид.
[01:15:36.720 --> 01:15:38.720]  Посмотрим под деревьем, на котором, на нем висят.
[01:15:38.720 --> 01:15:44.720]  Если они все строго меньше, чем N пополам, то вариантов
[01:15:44.720 --> 01:15:46.720]  нет.
[01:15:46.800 --> 01:15:50.800]  Ну, потому что любую вершину из любого поддерева возьмем
[01:15:50.800 --> 01:15:54.800]  и тогда, значит, получается, на ней будет висеть все
[01:15:54.800 --> 01:15:56.800]  без этого поддерева.
[01:15:56.800 --> 01:15:58.800]  А это уже больше, чем N пополам.
[01:15:58.800 --> 01:16:00.800]  Плюс еще там, плюс еще кто-то.
[01:16:00.800 --> 01:16:02.800]  Понимаете, да?
[01:16:02.800 --> 01:16:04.800]  Может быть, кто-то.
[01:16:04.800 --> 01:16:06.800]  Но если мы эту вершину выкинем, то да.
[01:16:06.800 --> 01:16:08.800]  Но нам без нее уже плохо.
[01:16:08.800 --> 01:16:10.800]  Вот.
[01:16:10.800 --> 01:16:12.800]  И второй случай.
[01:16:12.800 --> 01:16:14.800]  Если оказалось, что существует под деревьем пополам.
[01:16:14.880 --> 01:16:16.880]  Ну, два поддерева размера N пополам существовать не
[01:16:16.880 --> 01:16:18.880]  могут.
[01:16:18.880 --> 01:16:20.880]  Вот.
[01:16:20.880 --> 01:16:22.880]  Но что тогда?
[01:16:22.880 --> 01:16:24.880]  Тогда мы замечаем, что вот этот случай просто,
[01:16:24.880 --> 01:16:26.880]  на самом деле, это вот этот случай.
[01:16:26.880 --> 01:16:28.880]  Вот.
[01:16:28.880 --> 01:16:30.880]  То есть, просто на самом деле, мы просто берем вот
[01:16:30.880 --> 01:16:32.880]  это вот, просто глобально объявляем, что это просто
[01:16:32.880 --> 01:16:34.880]  ровная N пополам.
[01:16:34.880 --> 01:16:36.880]  Все.
[01:16:36.880 --> 01:16:38.880]  То есть, вывод опять тот же самый, да?
[01:16:38.880 --> 01:16:40.880]  То есть, либо у нас центроид единственный, либо у нас
[01:16:40.880 --> 01:16:42.880]  существует такое центроидное ребро.
[01:16:42.960 --> 01:16:44.960]  Вот.
[01:16:44.960 --> 01:16:46.960]  Вот.
[01:16:46.960 --> 01:16:48.960]  Которое соединяет две половинки.
[01:16:48.960 --> 01:16:50.960]  Ну, по размеру половинки.
[01:16:50.960 --> 01:16:52.960]  Конечно, эти деревья, может быть, это бамбуча, а это
[01:16:52.960 --> 01:16:54.960]  куча.
[01:16:54.960 --> 01:16:56.960]  Вот.
[01:16:56.960 --> 01:16:58.960]  Куча бамбуча.
[01:16:58.960 --> 01:17:00.960]  Ой.
[01:17:00.960 --> 01:17:02.960]  Как сложно.
[01:17:02.960 --> 01:17:04.960]  Вот.
[01:17:04.960 --> 01:17:06.960]  Так что вот такая вот приятная штука.
[01:17:06.960 --> 01:17:08.960]  Такая вот приятная штука.
[01:17:08.960 --> 01:17:10.960]  Вправивается.
[01:17:11.040 --> 01:17:13.040]  Вправивается.
[01:17:13.040 --> 01:17:15.040]  Что с ней делать?
[01:17:15.040 --> 01:17:17.040]  Ну, на самом деле, с помощью уже центроида,
[01:17:17.040 --> 01:17:19.040]  конечно,
[01:17:19.040 --> 01:17:21.040]  можно забабахивать, конечно,
[01:17:21.040 --> 01:17:23.040]  какие-нибудь решения, какие-нибудь задачи
[01:17:23.040 --> 01:17:25.040]  в виде разделяй и властвуй.
[01:17:25.040 --> 01:17:27.040]  Вот.
[01:17:27.040 --> 01:17:29.040]  Разделяй и властвуй.
[01:17:29.040 --> 01:17:31.040]  Ну, например, классическим примером
[01:17:31.040 --> 01:17:33.040]  на разделяй и властвуй можно ввести такую задачу,
[01:17:33.040 --> 01:17:35.040]  например.
[01:17:35.040 --> 01:17:37.040]  Вот давайте так.
[01:17:37.040 --> 01:17:39.040]  Сейчас я все это уберу.
[01:17:39.120 --> 01:17:41.120]  Так.
[01:17:47.120 --> 01:17:49.120]  Вот.
[01:17:49.120 --> 01:17:51.120]  Хорошо.
[01:17:51.120 --> 01:17:53.120]  Ну, разумеется.
[01:17:53.120 --> 01:17:55.120]  Да.
[01:17:55.120 --> 01:17:57.120]  Ну, да.
[01:17:57.120 --> 01:17:59.120]  Знаете, как это?
[01:17:59.120 --> 01:18:01.120]  Как это?
[01:18:01.120 --> 01:18:03.120]  Да, да, да, да, да.
[01:18:03.120 --> 01:18:05.120]  Как бы, да, задачи на дерево делятся
[01:18:05.120 --> 01:18:07.120]  на два типа. В первых написано
[01:18:07.200 --> 01:18:09.200]  дерево, а во вторых написано
[01:18:09.200 --> 01:18:11.200]  называется дан связанный граф
[01:18:11.200 --> 01:18:13.200]  с, там, n-1 вершина,
[01:18:13.200 --> 01:18:15.200]  n-1 ребро.
[01:18:15.200 --> 01:18:17.200]  Там условно, да.
[01:18:17.200 --> 01:18:19.200]  Да.
[01:18:19.200 --> 01:18:21.200]  Или между любыми двумя вершинами
[01:18:21.200 --> 01:18:23.200]  ровно один путь, там еще можно, да.
[01:18:23.200 --> 01:18:25.200]  Ладно, там много, там много типов,
[01:18:25.200 --> 01:18:27.200]  но в общем...
[01:18:27.200 --> 01:18:29.200]  Да, да, да, да, да.
[01:18:29.200 --> 01:18:31.200]  Да.
[01:18:31.200 --> 01:18:33.200]  Да, связанный граф
[01:18:33.200 --> 01:18:35.200]  без циклов.
[01:18:35.280 --> 01:18:37.280]  Да.
[01:18:37.280 --> 01:18:39.280]  Ой.
[01:18:39.280 --> 01:18:41.280]  Ой, ну, да, да, да, говорят, классический...
[01:18:41.280 --> 01:18:43.280]  Да, классический пример.
[01:18:43.280 --> 01:18:45.280]  Да, серый с 2009 года.
[01:18:45.280 --> 01:18:47.280]  Как говорится, условие
[01:18:47.280 --> 01:18:49.280]  жюри. Дан кактус.
[01:18:49.280 --> 01:18:51.280]  Уложите его в квадрат 10 на 9.
[01:18:55.280 --> 01:18:57.280]  Вот. Как говорится.
[01:18:57.280 --> 01:18:59.280]  Ну, естественно, в условии задачи
[01:18:59.280 --> 01:19:01.280]  официальном было написано другое.
[01:19:01.280 --> 01:19:03.280]  Там было написано.
[01:19:03.360 --> 01:19:05.360]  Называется был крыша.
[01:19:05.360 --> 01:19:07.360]  Там что-то был крыша. Там на Новый год или День День
[01:19:07.360 --> 01:19:09.360]  привезли n-компьютеров.
[01:19:09.360 --> 01:19:11.360]  Они были соединены проводами.
[01:19:11.360 --> 01:19:13.360]  И теперь эти компьютеры нужно установить.
[01:19:13.360 --> 01:19:15.360]  Для этого есть огромный зал.
[01:19:15.360 --> 01:19:17.360]  Там 10-9 на 10-9.
[01:19:17.360 --> 01:19:19.360]  Естественно.
[01:19:19.360 --> 01:19:21.360]  И их можно компьютер установить.
[01:19:21.360 --> 01:19:23.360]  Ну, там не указано.
[01:19:25.360 --> 01:19:27.360]  Не указано.
[01:19:27.360 --> 01:19:29.360]  Все что угодно может быть.
[01:19:29.360 --> 01:19:31.360]  Вот.
[01:19:31.440 --> 01:19:33.440]  Каждый компьютер хочется установить какую-то точку.
[01:19:33.440 --> 01:19:35.440]  Но при этом хочется, чтобы провода, конечно,
[01:19:35.440 --> 01:19:37.440]  не путались.
[01:19:37.440 --> 01:19:39.440]  Поэтому требуется, чтобы
[01:19:39.440 --> 01:19:41.440]  все провода были прямые.
[01:19:41.440 --> 01:19:43.440]  Ну, там их можно растягивать или сужать.
[01:19:43.440 --> 01:19:45.440]  И при этом, чтобы эти провода
[01:19:45.440 --> 01:19:47.440]  не пересекались и не касались, кроме как в вершинах.
[01:19:49.440 --> 01:19:51.440]  Но при этом
[01:19:51.440 --> 01:19:53.440]  при анализе
[01:19:53.440 --> 01:19:55.440]  обнаружилось мистическое свойство.
[01:19:55.440 --> 01:19:57.440]  То есть, видимо, сеть устроена
[01:19:57.440 --> 01:19:59.440]  таким безопасным образом,
[01:19:59.520 --> 01:20:01.520]  но ребро не лежит
[01:20:01.520 --> 01:20:03.520]  более чем в одном простом цикле.
[01:20:05.520 --> 01:20:07.520]  Вот.
[01:20:07.520 --> 01:20:09.520]  Ну, и, собственно, была такая задача.
[01:20:09.520 --> 01:20:11.520]  Ну, и, собственно, задача, короче, можно ли уложить...
[01:20:11.520 --> 01:20:13.520]  Там, ну, и граф, естественно,
[01:20:13.520 --> 01:20:15.520]  25 вершин. Можно ли его так уложить?
[01:20:15.520 --> 01:20:17.520]  Если да, то расскажите как.
[01:20:19.520 --> 01:20:21.520]  Ну, кстати, поднимите руки, кто решал
[01:20:21.520 --> 01:20:23.520]  когда-нибудь такую задачу.
[01:20:23.520 --> 01:20:25.520]  Ага. Ну, да, логично.
[01:20:25.520 --> 01:20:27.520]  Ну, просто кто-то, может, проиграл в серии
[01:20:27.600 --> 01:20:29.600]  9-го года, собственно.
[01:20:33.600 --> 01:20:35.600]  Ну, вот я и рассказал,
[01:20:35.600 --> 01:20:37.600]  куда она взялась, в общем-то.
[01:20:37.600 --> 01:20:39.600]  Ой, нехорошая задача, я тогда на нее...
[01:20:39.600 --> 01:20:41.600]  Ну, это был просто мой последний сервис.
[01:20:41.600 --> 01:20:43.600]  Собственно, я на нее тогда 3,5 часа
[01:20:43.600 --> 01:20:45.600]  убил.
[01:20:45.600 --> 01:20:47.600]  Нет, ну, правда...
[01:20:47.600 --> 01:20:49.600]  Слушай, и там...
[01:20:53.600 --> 01:20:55.600]  То ты прикол, что нет.
[01:20:55.680 --> 01:20:57.680]  Я прям... С начала контеста 3,5...
[01:21:01.680 --> 01:21:03.680]  Нет, там было... Нет, в этом смысле
[01:21:03.680 --> 01:21:05.680]  было забавно. Представьте еще в качестве
[01:21:05.680 --> 01:21:07.680]  добивки, там еще, извините, оффлайн-тестирование было
[01:21:07.680 --> 01:21:09.680]  полное. Вообще.
[01:21:09.680 --> 01:21:11.680]  Нет, до 2010-го
[01:21:11.680 --> 01:21:13.680]  года включительно на сервисе было
[01:21:13.680 --> 01:21:15.680]  полностью оффлайн-тестирование. На самом
[01:21:15.680 --> 01:21:17.680]  сервисе вы посылали, вас проверяли,
[01:21:17.680 --> 01:21:19.680]  говорили, принято на проверку.
[01:21:19.680 --> 01:21:21.680]  Все. Это все, что вы знали.
[01:21:21.680 --> 01:21:23.680]  Вообще.
[01:21:23.760 --> 01:21:25.760]  Да. Да.
[01:21:25.760 --> 01:21:27.760]  Мы так жили, да.
[01:21:27.760 --> 01:21:29.760]  Да, были
[01:21:29.760 --> 01:21:31.760]  люди в наше время, да.
[01:21:31.760 --> 01:21:33.760]  Не то, что...
[01:21:33.760 --> 01:21:35.760]  Стрессы все писали, да.
[01:21:35.760 --> 01:21:37.760]  Да, ну, и... Ну, я не писал.
[01:21:37.760 --> 01:21:39.760]  А, ну, я поэтому на международный,
[01:21:39.760 --> 01:21:41.760]  видимо, не попал, потому что я не писал
[01:21:41.760 --> 01:21:43.760]  стрессы, да. А может, ну...
[01:21:43.760 --> 01:21:45.760]  Ну, вот.
[01:21:45.760 --> 01:21:47.760]  Да, правда, правда, правда думаешь, да.
[01:21:47.760 --> 01:21:49.760]  Правда, нет, у меня нет, у меня в этом смысле
[01:21:49.760 --> 01:21:51.760]  было эпическое достижение по официально
[01:21:51.840 --> 01:21:53.840]  публикованной табличке, я в таблице был четвертое
[01:21:53.840 --> 01:21:55.840]  место, но на международный меня не взяли.
[01:21:55.840 --> 01:21:57.840]  Вот.
[01:21:57.840 --> 01:21:59.840]  Нет, потому что это таблица...
[01:21:59.840 --> 01:22:01.840]  Нет, но дело в том, что таблицу делал
[01:22:01.840 --> 01:22:03.840]  просто по официальным данным, не завище от
[01:22:03.840 --> 01:22:05.840]  джуристнарк, а он просто брал, собственно,
[01:22:05.840 --> 01:22:07.840]  ну, там, типа, берем все контесты, суммируем все.
[01:22:07.840 --> 01:22:09.840]  Ну, вот. А там, как бы,
[01:22:09.840 --> 01:22:11.840]  а там Кирюхина Светкова,
[01:22:11.840 --> 01:22:13.840]  наоборот, Кирюхин Светковый,
[01:22:13.840 --> 01:22:15.840]  вот, да, наоборот. Это там они более
[01:22:15.840 --> 01:22:17.840]  хитрые, они смотрели. Так, ну, во-первых, сервис мы
[01:22:17.840 --> 01:22:19.840]  не учитываем. Так, почему? Ну, там
[01:22:19.920 --> 01:22:21.920]  тупые задачи какие-то неправильные.
[01:22:21.920 --> 01:22:23.920]  Там, ну, вот.
[01:22:23.920 --> 01:22:25.920]  Так, ну, опять, выкинем развлекательный тур,
[01:22:25.920 --> 01:22:27.920]  потому что там был один тур, типа, одна задача, напишите
[01:22:27.920 --> 01:22:29.920]  стратегию игр в дурака.
[01:22:29.920 --> 01:22:31.920]  Обычного подкидного.
[01:22:31.920 --> 01:22:33.920]  Вот. И там турникчик устраивался.
[01:22:33.920 --> 01:22:35.920]  Вот, да, было там такой турник,
[01:22:35.920 --> 01:22:37.920]  что-то еще там было. Ну, вот. То есть, выкинем
[01:22:37.920 --> 01:22:39.920]  это, выкинем это. Потом давайте
[01:22:39.920 --> 01:22:41.920]  еще поанализируем там еще, кто там
[01:22:41.920 --> 01:22:43.920]  больше задач на сотку сдал. В общем, посчитали,
[01:22:43.920 --> 01:22:45.920]  посчитали, пришли к выводу, что
[01:22:45.920 --> 01:22:47.920]  не я. Вот. Ну, там
[01:22:48.000 --> 01:22:50.000]  в общем, какие-то такие тогда рассуждения были, не как
[01:22:50.000 --> 01:22:52.000]  вот сейчас просто вот. Вот есть четыре
[01:22:52.000 --> 01:22:54.000]  тура, кто их выиграл, тот и сборная Россия.
[01:22:54.000 --> 01:22:56.000]  Вот. А
[01:22:56.000 --> 01:22:58.000]  тогда вот было мутно. Но там
[01:22:58.000 --> 01:23:00.000]  после этого там еще какие-то
[01:23:00.000 --> 01:23:02.000]  скандалы были, потому что кто-то так тоже сильно
[01:23:02.000 --> 01:23:04.000]  не понял, с какого перепугания
[01:23:04.000 --> 01:23:06.000]  я вообще. Ну, вот.
[01:23:06.000 --> 01:23:08.000]  Ну, вот.
[01:23:08.000 --> 01:23:10.000]  Но в результате
[01:23:10.000 --> 01:23:12.000]  соответственно, сейчас-то делается по-другому.
[01:23:12.000 --> 01:23:14.000]  Но сейчас, я думаю, и фамилии
[01:23:14.000 --> 01:23:16.000]  Кирюхин Светкова, и вам, собственно, ничего не говорят.
[01:23:16.080 --> 01:23:18.080]  Светкова прославилась.
[01:23:18.080 --> 01:23:20.080]  Ну, нет, она прославилась, но сейчас
[01:23:20.080 --> 01:23:22.080]  она как бы к этому никакого отношения не имеет.
[01:23:22.080 --> 01:23:24.080]  Ну, вот.
[01:23:24.080 --> 01:23:26.080]  Ну, это другая история. Ладно.
[01:23:26.080 --> 01:23:28.080]  Вот.
[01:23:28.080 --> 01:23:30.080]  Ну, да, тут, конечно, если возвращаться к этой
[01:23:30.080 --> 01:23:32.080]  задаче, да ладно, у меня основная проблема, что я писал
[01:23:32.080 --> 01:23:34.080]  на Паскале, на Паскале я не умел делать там большой
[01:23:34.080 --> 01:23:36.080]  стэк, поэтому пришлось написать не рекурсивный
[01:23:36.080 --> 01:23:38.080]  ДФС.
[01:23:38.080 --> 01:23:40.080]  Вот, внезапно у меня получилось.
[01:23:40.080 --> 01:23:42.080]  Вот.
[01:23:42.080 --> 01:23:44.080]  Но там, честно, форта нула, что там из застав
[01:23:44.160 --> 01:23:46.160]  одна была халява совсем.
[01:23:46.160 --> 01:23:48.160]  Вот. Ладно.
[01:23:48.160 --> 01:23:50.160]  Так, все. Не будем зависать.
[01:23:50.160 --> 01:23:52.160]  А будем рассматривать другую
[01:23:52.160 --> 01:23:54.160]  задачу. Значит, задача теперь такая.
[01:23:54.160 --> 01:23:56.160]  Дано дерево.
[01:23:58.160 --> 01:24:00.160]  Ладно.
[01:24:00.160 --> 01:24:02.160]  Ну, вот.
[01:24:06.160 --> 01:24:08.160]  Значит, дано дерево.
[01:24:14.160 --> 01:24:16.160]  Вот.
[01:24:20.160 --> 01:24:22.160]  Вот.
[01:24:22.160 --> 01:24:24.160]  Значит, дано какое-то дерево.
[01:24:24.160 --> 01:24:26.160]  На ребрах написано какие-то числа.
[01:24:28.160 --> 01:24:30.160]  Числа могут быть даже отрицательные, а также дано еще
[01:24:30.160 --> 01:24:32.160]  мистическое число К.
[01:24:32.160 --> 01:24:34.160]  Задача.
[01:24:34.160 --> 01:24:36.160]  Сколько судьб?
[01:24:36.160 --> 01:24:38.160]  Сколько судьб?
[01:24:38.160 --> 01:24:40.160]  Сколько судьб?
[01:24:40.160 --> 01:24:42.160]  Сколько судьб?
[01:24:42.240 --> 01:24:44.240]  Задача.
[01:24:44.240 --> 01:24:46.240]  Сколько существует путей
[01:24:46.240 --> 01:24:48.240]  длины
[01:24:48.240 --> 01:24:50.240]  ровно К?
[01:24:56.240 --> 01:24:58.240]  Ну, как-то
[01:24:58.240 --> 01:25:00.240]  поможет.
[01:25:00.240 --> 01:25:02.240]  Но начнем не с этого.
[01:25:02.240 --> 01:25:04.240]  Но начнем с того, что подвесим дерево
[01:25:04.240 --> 01:25:06.240]  с какой-нибудь вершин.
[01:25:06.240 --> 01:25:08.240]  И заметим, что пути бывают
[01:25:08.240 --> 01:25:10.240]  двух типов, которые проходят через этот корень
[01:25:10.320 --> 01:25:12.320]  и которые не проходят.
[01:25:12.320 --> 01:25:14.320]  Давайте...
[01:25:14.320 --> 01:25:16.320]  За какой этим точку мы можем найти количество путей
[01:25:16.320 --> 01:25:18.320]  размера К,
[01:25:18.320 --> 01:25:20.320]  которые проходят через этот...
[01:25:20.320 --> 01:25:22.320]  через корень?
[01:25:24.320 --> 01:25:26.320]  Да. А, ну если хэш-мапом, то да.
[01:25:30.320 --> 01:25:32.320]  Количество путей
[01:25:32.320 --> 01:25:34.320]  длины К.
[01:25:34.400 --> 01:25:36.400]  Через центр.
[01:25:38.400 --> 01:25:40.400]  Сейчас, ну да.
[01:25:40.400 --> 01:25:42.400]  Но проходить их через корень.
[01:25:42.400 --> 01:25:44.400]  За ОАТН без таких хочу.
[01:25:44.400 --> 01:25:46.400]  Нет, у К дерево взвешенное, да?
[01:25:46.400 --> 01:25:48.400]  А где?
[01:25:48.400 --> 01:25:50.400]  Ну, тогда с кучей.
[01:25:50.400 --> 01:25:52.400]  Да.
[01:25:52.400 --> 01:25:54.400]  Ну, у каждого
[01:25:54.400 --> 01:25:56.400]  ребра есть длина.
[01:25:58.400 --> 01:26:00.400]  Ну, как это сделать? Ну, идея, по сути, такая.
[01:26:00.400 --> 01:26:02.400]  Запускаем ДФС и для каждой вершины
[01:26:02.480 --> 01:26:04.480]  находим путь до корня. То есть, теперь получается,
[01:26:04.480 --> 01:26:06.480]  сколько способов у нас взять два числа
[01:26:06.480 --> 01:26:08.480]  из разных поддеревьев,
[01:26:08.480 --> 01:26:10.480]  так, чтобы сумма этих чисел была равна К?
[01:26:12.480 --> 01:26:14.480]  Логично, да?
[01:26:14.480 --> 01:26:16.480]  Понятно, что имеется в виду?
[01:26:16.480 --> 01:26:18.480]  Ну, как это сделать?
[01:26:18.480 --> 01:26:20.480]  Ну, можно сделать так.
[01:26:20.480 --> 01:26:22.480]  Вот у вас есть какие-то мешки чисел.
[01:26:22.480 --> 01:26:24.480]  И, допустим, говорим, что первый мешок
[01:26:24.480 --> 01:26:26.480]  мы прям честно записываем хэш-мап.
[01:26:26.480 --> 01:26:28.480]  Теперь берем второй мешок
[01:26:28.480 --> 01:26:30.480]  и подливаем к первому.
[01:26:30.560 --> 01:26:32.560]  Ну, если подливать, мы для каждого числа проверим,
[01:26:32.560 --> 01:26:34.560]  для каждого числа х проверим,
[01:26:34.560 --> 01:26:36.560]  есть ли в этом дереве число
[01:26:36.560 --> 01:26:38.560]  К-х, если да, то сколько их и добавим
[01:26:38.560 --> 01:26:40.560]  это сколько к ответу.
[01:26:40.560 --> 01:26:42.560]  Ну вот, после этого пробежались еще раз,
[01:26:42.560 --> 01:26:44.560]  там подлили. Теперь берем это, ну и так далее.
[01:26:44.560 --> 01:26:46.560]  Понятная идея, да?
[01:26:46.560 --> 01:26:48.560]  А ну-ка, поднимите руки,
[01:26:48.560 --> 01:26:50.560]  кто, собственно, сталкивался раньше с этой
[01:26:50.560 --> 01:26:52.560]  или подобной задачей.
[01:26:54.560 --> 01:26:56.560]  Так, вот, постепенно уменьшаемся.
[01:26:56.560 --> 01:26:58.560]  Окей.
[01:26:58.640 --> 01:27:00.640]  Я буду ленису руки подымать.
[01:27:02.640 --> 01:27:04.640]  А то, как говорится, если на каждый вопрос буду руки
[01:27:04.640 --> 01:27:06.640]  подымать, это я программировать не смогу.
[01:27:08.640 --> 01:27:10.640]  Или две.
[01:27:10.640 --> 01:27:12.640]  Ну, хотя, ну, что делать?
[01:27:12.640 --> 01:27:14.640]  Хотя в гадли, что вас
[01:27:14.640 --> 01:27:16.640]  на физкультуре подтягиваться не заставляют?
[01:27:16.640 --> 01:27:18.640]  Нет.
[01:27:18.640 --> 01:27:20.640]  Нет? Не везде.
[01:27:20.640 --> 01:27:22.640]  А, вы что, плаванием занимаетесь?
[01:27:22.640 --> 01:27:24.640]  А, везет.
[01:27:24.640 --> 01:27:26.640]  В последние месяцы почти у всех плавание, кажется.
[01:27:26.720 --> 01:27:28.720]  Что?
[01:27:28.720 --> 01:27:30.720]  Здесь у всех плавание?
[01:27:30.720 --> 01:27:32.720]  Слышь, смотри,
[01:27:32.720 --> 01:27:34.720]  на весной сейчас начали всех отправлять
[01:27:34.720 --> 01:27:36.720]  в бассейн.
[01:27:36.720 --> 01:27:38.720]  Кому-то отправляли осенью в бассейн.
[01:27:38.720 --> 01:27:40.720]  А, ну, нормально. Слушайте, мне нравится.
[01:27:40.720 --> 01:27:42.720]  Повезло, повезло.
[01:27:42.720 --> 01:27:44.720]  Ну, вот.
[01:27:44.720 --> 01:27:46.720]  Ну, вот.
[01:27:46.720 --> 01:27:48.720]  Ну, не знаю, нашел ПФ, вы никогда
[01:27:48.720 --> 01:27:50.720]  не отправляли в бассейн. Нет, нас отправляли
[01:27:50.720 --> 01:27:52.720]  на лыжи, во.
[01:27:52.720 --> 01:27:54.720]  Не, сейчас все специализации в бассейн получим.
[01:27:54.800 --> 01:27:56.800]  Это хорошо.
[01:27:56.800 --> 01:27:58.800]  А специализа бассейна куда отправляется?
[01:28:00.800 --> 01:28:02.800]  Ну, просто при такой толпе
[01:28:02.800 --> 01:28:04.800]  она же должна куда-то отправляться. Или там
[01:28:04.800 --> 01:28:06.800]  на фистейке появился второй бассейн.
[01:28:06.800 --> 01:28:08.800]  Вот. Ну, ладно.
[01:28:08.800 --> 01:28:10.800]  Значит, хорошо. Значит, это мы
[01:28:10.800 --> 01:28:12.800]  за линию проходить через корень научились.
[01:28:12.800 --> 01:28:14.800]  Дальше возникает естественная идея
[01:28:14.800 --> 01:28:16.800]  вида разделяй и властвуй.
[01:28:16.800 --> 01:28:18.800]  А давайте теперь пойдем в каждое под дерево
[01:28:18.800 --> 01:28:20.800]  и запустимся рекурсивно.
[01:28:20.880 --> 01:28:22.880]  Вот.
[01:28:22.880 --> 01:28:24.880]  Да, может показаться,
[01:28:24.880 --> 01:28:26.880]  что это решение за n квадрат
[01:28:26.880 --> 01:28:28.880]  лог n.
[01:28:28.880 --> 01:28:30.880]  Но это не так.
[01:28:32.880 --> 01:28:34.880]  Ну, потому что, смотрите, вот вы...
[01:28:34.880 --> 01:28:36.880]  Нет, смотрите.
[01:28:36.880 --> 01:28:38.880]  Но дело в том, что, смотрите,
[01:28:38.880 --> 01:28:40.880]  вот вы корень обработали за линию, правда?
[01:28:40.880 --> 01:28:42.880]  Теперь заметим, что если вы запустите
[01:28:42.880 --> 01:28:44.880]  вот этого под дерево, вы обработаете его
[01:28:44.880 --> 01:28:46.880]  не за от n, а за от сколько там вершин,
[01:28:46.880 --> 01:28:48.880]  правда?
[01:28:48.960 --> 01:28:50.960]  Ну вот. И это, ну вот, и это.
[01:28:50.960 --> 01:28:52.960]  Ну, по крайней мере, тоже для вот этой вершины,
[01:28:52.960 --> 01:28:54.960]  для этой, для этой тоже. То есть, суммарно
[01:28:54.960 --> 01:28:56.960]  каждый из этих DFS, все эти DFS будут
[01:28:56.960 --> 01:28:58.960]  за линию, за n работать.
[01:28:58.960 --> 01:29:00.960]  То есть, в результате получится
[01:29:00.960 --> 01:29:02.960]  даже не... Нет, получится следующее.
[01:29:02.960 --> 01:29:04.960]  Получится
[01:29:04.960 --> 01:29:06.960]  от n умножить на, вот я так напишу,
[01:29:06.960 --> 01:29:08.960]  глубину рекурсии.
[01:29:08.960 --> 01:29:10.960]  Ну, потому что
[01:29:10.960 --> 01:29:12.960]  заметим, что у нас на каждой глубине рекурсии
[01:29:12.960 --> 01:29:14.960]  вы суммарно работаете за линию.
[01:29:15.040 --> 01:29:17.040]  Ну, это правда.
[01:29:17.040 --> 01:29:19.040]  Ну вот. По такому раскладу
[01:29:19.040 --> 01:29:21.040]  можно это оценивать как глубина дерева.
[01:29:21.040 --> 01:29:23.040]  Потому что есть там дерево у вас там небольшой
[01:29:23.040 --> 01:29:25.040]  глубины, то, в принципе, это решение вполне адекватно.
[01:29:27.040 --> 01:29:29.040]  Ни хрена не загорит.
[01:29:29.040 --> 01:29:31.040]  Ну да, но можешь не повести, потому что дерево
[01:29:31.040 --> 01:29:33.040]  может быть бомбу-ча.
[01:29:33.040 --> 01:29:35.040]  Если дерево бомбу-ча, то
[01:29:35.040 --> 01:29:37.040]  вы, конечно, из него, там дерево
[01:29:37.040 --> 01:29:39.040]  просто глубины никакой не сделаете.
[01:29:39.040 --> 01:29:41.040]  Но!
[01:29:41.040 --> 01:29:43.040]  Теперь мы можем воспользоваться щитом.
[01:29:43.120 --> 01:29:45.120]  Как бы, тут возникает вопрос.
[01:29:45.120 --> 01:29:47.120]  Если мы выбрали корень, то хочется сказать,
[01:29:47.120 --> 01:29:49.120]  что у этого под дерево корень будет вот эта вершина.
[01:29:49.120 --> 01:29:51.120]  Но возникает мысль,
[01:29:51.120 --> 01:29:53.120]  а кто сказал, что это?
[01:29:53.120 --> 01:29:55.120]  Я ж могу вот это под дерево
[01:29:55.120 --> 01:29:57.120]  подвесить уже, закрутить вот
[01:29:57.120 --> 01:29:59.120]  эту вершину?
[01:29:59.120 --> 01:30:01.120]  Ну, могу?
[01:30:01.120 --> 01:30:03.120]  Вот, могу просто.
[01:30:03.120 --> 01:30:05.120]  Хочу и делаю.
[01:30:05.120 --> 01:30:07.120]  Вот, просто беру, подвешиваю за центро
[01:30:07.120 --> 01:30:09.120]  и обрабатываю. Потом тут тоже подвешиваю
[01:30:09.120 --> 01:30:11.120]  это и так далее.
[01:30:11.200 --> 01:30:13.200]  Заметим, что N на глубину рекурсии,
[01:30:13.200 --> 01:30:15.200]  а симтотика от этого не поменяется.
[01:30:15.200 --> 01:30:17.200]  Но если я буду на каждом дереве
[01:30:17.200 --> 01:30:19.200]  тратить O от количества вершин на то, чтобы
[01:30:19.200 --> 01:30:21.200]  искать подходящую вершину, то тогда
[01:30:21.200 --> 01:30:23.200]  я могу попробовать уменьшить глубину рекурсии.
[01:30:23.200 --> 01:30:25.200]  И вот возникает вот зачем нужны центроиды.
[01:30:25.200 --> 01:30:27.200]  А давайте сделаем центроид.
[01:30:27.200 --> 01:30:29.200]  Зачем нам нужен центроид? Чтоб глубина рекурсии
[01:30:29.200 --> 01:30:31.200]  была логарифом.
[01:30:31.200 --> 01:30:33.200]  Чтоб каждый раз, когда вы идете в под дерево,
[01:30:33.200 --> 01:30:35.200]  оно было размером в два раза меньше.
[01:30:35.200 --> 01:30:37.200]  Понимаете, да?
[01:30:37.200 --> 01:30:39.200]  Понимаете?
[01:30:39.280 --> 01:30:41.280]  И в результате тогда, если вы будете брать
[01:30:41.280 --> 01:30:43.280]  на каждом шаге, то есть тратить O от N
[01:30:43.280 --> 01:30:45.280]  времени, чтобы найти центроид,
[01:30:45.280 --> 01:30:47.280]  то тогда вместо
[01:30:47.280 --> 01:30:49.280]  вот этой симтотики вы получите
[01:30:49.280 --> 01:30:51.280]  O от N
[01:30:51.280 --> 01:30:53.280]  лог N.
[01:30:55.280 --> 01:30:57.280]  То есть получается, смотрите, то есть зачем
[01:30:57.280 --> 01:30:59.280]  нужна, то есть как бы в чем смысл
[01:30:59.280 --> 01:31:01.280]  центроида. То есть сам по себе центроид
[01:31:01.280 --> 01:31:03.280]  позволяет найти,
[01:31:03.280 --> 01:31:05.280]  то есть позволяет вам запускать
[01:31:05.280 --> 01:31:07.280]  что-то типа разделяй властвуй
[01:31:07.280 --> 01:31:09.280]  на дереве.
[01:31:09.280 --> 01:31:11.280]  Вот.
[01:31:11.280 --> 01:31:13.280]  То есть просто вот такое
[01:31:13.280 --> 01:31:15.280]  разделяй властвуй на дереве.
[01:31:15.280 --> 01:31:17.280]  То есть можно
[01:31:17.280 --> 01:31:19.280]  выбирать, то есть технология решения
[01:31:19.280 --> 01:31:21.280]  выглядит так. Берем центроид, рассматриваем
[01:31:21.280 --> 01:31:23.280]  все, что проходит через центроид за какую быструю
[01:31:23.280 --> 01:31:25.280]  симтотику, а потом после этого
[01:31:25.280 --> 01:31:27.280]  выкидываем центроид и
[01:31:27.280 --> 01:31:29.280]  рассматриваем оставшееся под дереве рекурсивно.
[01:31:29.280 --> 01:31:31.280]  Это работает, получается, суммарно
[01:31:31.280 --> 01:31:33.280]  за логарифом
[01:31:33.280 --> 01:31:35.280]  за логарифом N умножить
[01:31:35.280 --> 01:31:37.280]  за сколько вы
[01:31:37.280 --> 01:31:39.280]  обрабатываете все проходящее через
[01:31:39.280 --> 01:31:41.280]  центроид.
[01:31:41.280 --> 01:31:43.280]  Вот. Понятно, да?
[01:31:43.280 --> 01:31:45.280]  Я не понял, как мы пересчитываем тогда,
[01:31:45.280 --> 01:31:47.280]  если у нас корень будет в вершины не подвешенная,
[01:31:47.280 --> 01:31:49.280]  а какая-то надобная?
[01:31:49.280 --> 01:31:51.280]  А так, а что вам надо?
[01:31:51.280 --> 01:31:53.280]  У вас есть ОАТН-времени на то,
[01:31:53.280 --> 01:31:55.280]  чтобы просто из этой вершины запустить
[01:31:55.280 --> 01:31:57.280]  ДФС по этому дереву пересчитать
[01:31:57.280 --> 01:31:59.280]  собственно длины путей.
[01:31:59.280 --> 01:32:01.280]  Так что, ну вот.
[01:32:01.280 --> 01:32:03.280]  Нам надо научиться
[01:32:03.280 --> 01:32:05.280]  вообще центроид
[01:32:07.280 --> 01:32:09.280]  Да, но так вы же только что обсуждали,
[01:32:09.280 --> 01:32:11.280]  как это делать.
[01:32:11.280 --> 01:32:13.280]  Нет, скажем так, если вам
[01:32:13.280 --> 01:32:15.280]  дано дерево, то вы за линию можете
[01:32:15.280 --> 01:32:17.280]  его найти. Да,
[01:32:17.280 --> 01:32:19.280]  фишка в том, что имеется в виду, что
[01:32:19.280 --> 01:32:21.280]  на каждой грузе надо делать
[01:32:21.280 --> 01:32:23.280]  прям максимально с нуля.
[01:32:23.280 --> 01:32:25.280]  То есть, никакие
[01:32:25.280 --> 01:32:27.280]  старые ССС-шки уже не работают, надо
[01:32:27.280 --> 01:32:29.280]  считать новые.
[01:32:29.280 --> 01:32:31.280]  Мне кажется, не обязательно
[01:32:31.280 --> 01:32:33.280]  Нет, чтобы глубина рекурсия
[01:32:33.280 --> 01:32:35.280]  была ЛОГН, нужно брать центроид.
[01:32:35.280 --> 01:32:37.280]  Это другой метод решения задачи.
[01:32:37.280 --> 01:32:39.280]  Да, эту задачу можно решать
[01:32:39.280 --> 01:32:41.280]  действительно методом сливаемых сетов.
[01:32:41.280 --> 01:32:43.280]  Возможно, мы даже ее с вами рассматривали
[01:32:43.280 --> 01:32:45.280]  в какой-то момент.
[01:32:45.280 --> 01:32:47.280]  Или не было такого?
[01:32:47.280 --> 01:32:49.280]  Ну ладно, это локальность.
[01:32:49.280 --> 01:32:51.280]  Да, но есть просто,
[01:32:51.280 --> 01:32:53.280]  нет, есть разные методы.
[01:32:53.280 --> 01:32:55.280]  Да, конкретно эту задачу, конечно,
[01:32:55.280 --> 01:32:57.280]  можно и переливать, короче,
[01:32:57.280 --> 01:32:59.280]  можно и переливать.
[01:32:59.280 --> 01:33:01.280]  Нет, на эту задачу, конечно, можно и переливайкой
[01:33:01.280 --> 01:33:03.280]  решать, безусловно, я не претендую.
[01:33:03.280 --> 01:33:05.280]  Да, ну вот,
[01:33:05.280 --> 01:33:07.280]  красивой переливайкой, но на самом деле
[01:33:07.280 --> 01:33:09.280]  это не нуля, а можно и так.
[01:33:09.280 --> 01:33:11.280]  Но это, конечно, более
[01:33:11.280 --> 01:33:13.280]  технический, потому что я помню, как-то я писал задачу
[01:33:13.280 --> 01:33:15.280]  таким методом, и с этим мне оказалось удобно
[01:33:15.280 --> 01:33:17.280]  каждое дерево просто честно копировать.
[01:33:17.280 --> 01:33:19.280]  То есть копировать, перенумеровать
[01:33:19.280 --> 01:33:21.280]  и передавать в рекурсию.
[01:33:21.280 --> 01:33:23.280]  Это редкий случай, когда вы передаете
[01:33:23.280 --> 01:33:25.280]  в рекурсию вектор векторов,
[01:33:25.280 --> 01:33:27.280]  даже без ссылки.
[01:33:27.280 --> 01:33:29.280]  Но это, оказывается, удобно.
[01:33:31.280 --> 01:33:33.280]  То есть там, оказывается,
[01:33:33.280 --> 01:33:35.280]  знаете, у меня там получалось
[01:33:35.280 --> 01:33:37.280]  с помощью этого решения zn2logn,
[01:33:37.280 --> 01:33:39.280]  прием там, по-моему, 2 или 3 тысячи, это прям
[01:33:39.280 --> 01:33:41.280]  замгновенно работало. Правда, может быть,
[01:33:41.280 --> 01:33:43.280]  часть из-за того, что судя по авторскому
[01:33:43.280 --> 01:33:45.280]  учению, жюри такого не ожидало,
[01:33:45.280 --> 01:33:47.280]  там была какая-то адекватная динамика,
[01:33:47.280 --> 01:33:49.280]  ну вот.
[01:33:49.280 --> 01:33:51.280]  Ну или там с каким-то там
[01:33:51.280 --> 01:33:53.280]  адекватной
[01:33:53.280 --> 01:33:55.280]  рекуррентной формулой,
[01:33:55.280 --> 01:33:57.280]  может, из числа тех, которые мы с вами
[01:33:57.280 --> 01:33:59.280]  в прошлом году обсуждали. Ну не помню.
[01:33:59.280 --> 01:34:01.280]  Но, как бы, в случае чего
[01:34:01.280 --> 01:34:03.280]  как бы можно.
[01:34:03.280 --> 01:34:05.280]  Ой.
[01:34:05.280 --> 01:34:07.280]  Капомысо-оддовик. Ну вот.
[01:34:07.280 --> 01:34:09.280]  Но это, как бы, это на самом деле, да,
[01:34:09.280 --> 01:34:11.280]  кто-то может сказать, что это вот это есть
[01:34:11.280 --> 01:34:13.280]  центроидная декомпозиция,
[01:34:13.280 --> 01:34:15.280]  но на самом деле это не так
[01:34:15.280 --> 01:34:17.280]  еще. Ну вот, конечно,
[01:34:17.280 --> 01:34:19.280]  скажи так, это, конечно, терминологичный
[01:34:19.280 --> 01:34:21.280]  вопрос, является ли то, что я рассказывал
[01:34:21.280 --> 01:34:23.280]  с центроидной декомпозицией,
[01:34:23.280 --> 01:34:25.280]  но на самом деле я бы сказал, что центроидная
[01:34:25.280 --> 01:34:27.280]  декомпозиция является то, что я скажу
[01:34:27.280 --> 01:34:29.280]  дальше.
[01:34:29.280 --> 01:34:31.280]  Вот, потому что это, как бы, это такой просто
[01:34:31.280 --> 01:34:33.280]  разделяю властву через центроиды.
[01:34:33.280 --> 01:34:35.280]  Вот.
[01:34:35.280 --> 01:34:37.280]  Соответственно.
[01:34:43.280 --> 01:34:45.280]  Значит, смотрите.
[01:34:47.280 --> 01:34:49.280]  Значит, какую тут еще неожиданную
[01:34:49.280 --> 01:34:51.280]  задачу можно решать?
[01:34:51.280 --> 01:34:53.280]  Потому что как можно еще
[01:34:53.280 --> 01:34:55.280]  ну вот,
[01:34:55.280 --> 01:34:57.280]  может быть, обобщить дерево отрезков?
[01:34:57.280 --> 01:34:59.280]  Потому что есть вот такая весьма неожиданная
[01:34:59.280 --> 01:35:01.280]  задача. Задача
[01:35:01.280 --> 01:35:03.280]  называется такая тоже. Представим себе, что
[01:35:03.280 --> 01:35:05.280]  у вас есть тоже вот такое взвешенное дерево,
[01:35:05.280 --> 01:35:07.280]  но веса пусть будут
[01:35:07.280 --> 01:35:09.280]  не отрицательные.
[01:35:09.280 --> 01:35:11.280]  И будет такая неожиданная ситуация.
[01:35:11.280 --> 01:35:13.280]  А давайте
[01:35:13.280 --> 01:35:15.280]  мы будем делать присваивание
[01:35:15.280 --> 01:35:17.280]  в радиусе.
[01:35:17.280 --> 01:35:19.280]  То есть у каждой вершины есть какой-то цвет.
[01:35:21.280 --> 01:35:23.280]  И у нас есть запрос
[01:35:23.280 --> 01:35:25.280]  вида
[01:35:25.280 --> 01:35:27.280]  значит, покрасить
[01:35:27.280 --> 01:35:29.280]  все вершины
[01:35:29.280 --> 01:35:31.280]  находящиеся в радиусе
[01:35:31.280 --> 01:35:33.280]  до расстояния не более
[01:35:33.280 --> 01:35:35.280]  чем R от вершины V
[01:35:35.280 --> 01:35:37.280]  в какой-нибудь цвет C.
[01:35:41.280 --> 01:35:43.280]  Вот такой вот неожиданный вот
[01:35:43.280 --> 01:35:45.280]  покраску.
[01:35:47.280 --> 01:35:49.280]  Вот прято.
[01:35:49.280 --> 01:35:51.280]  И второй запрос,
[01:35:51.280 --> 01:35:53.280]  ну хотя бы такой самый минимальный простой.
[01:35:57.280 --> 01:35:59.280]  Скажите, пожалуйста, а вершина V
[01:35:59.280 --> 01:36:01.280]  вообще там в какой цвет покрашена?
[01:36:03.280 --> 01:36:05.280]  Ну и как всегда,
[01:36:05.280 --> 01:36:07.280]  вот дано дерево на 100 тысяч вершин
[01:36:07.280 --> 01:36:09.280]  и какие-нибудь там 200 тысяч вот этих вот запросов.
[01:36:11.280 --> 01:36:13.280]  А ну-ка, так, тоже давайте
[01:36:13.280 --> 01:36:15.280]  тесить. А ну-ка поднимите руки, кто
[01:36:15.280 --> 01:36:17.280]  начался с такой задачи?
[01:36:19.280 --> 01:36:21.280]  О, как все уменьшается-то, да.
[01:36:21.280 --> 01:36:23.280]  Ну окей, а где сталкивались, кстати?
[01:36:27.280 --> 01:36:29.280]  Ага, логично.
[01:36:29.280 --> 01:36:31.280]  А в какой-то группе было?
[01:36:35.280 --> 01:36:37.280]  Нет, я говорю, в какой группе ЛКШ это было?
[01:36:37.280 --> 01:36:39.280]  В 7.
[01:36:39.280 --> 01:36:41.280]  Это в 7, да, было, но
[01:36:41.280 --> 01:36:43.280]  тогда было 5.
[01:36:43.280 --> 01:36:45.280]  Ой, Господи, да.
[01:36:45.280 --> 01:36:47.280]  Не, ну это круто, да, конечно, хотя
[01:36:47.280 --> 01:36:49.280]  там уже страшно было, да, потом.
[01:36:49.280 --> 01:36:51.280]  В общем, после, как я впервые в жизни
[01:36:51.280 --> 01:36:53.280]  узнал Дашу, я кому-то рассказываю про тот
[01:36:53.280 --> 01:36:55.280]  ЛКШ, а говорят, ой, какой-то ой,
[01:36:55.280 --> 01:36:57.280]  а у нас ЛКШ был.
[01:36:57.280 --> 01:36:59.280]  Правда, в 11-й группе, но был.
[01:37:01.280 --> 01:37:03.280]  Вот. Да, такое бывает.
[01:37:03.280 --> 01:37:05.280]  Нет, или у вас он тоже был, просто я забыл
[01:37:05.280 --> 01:37:07.280]  спросить.
[01:37:07.280 --> 01:37:09.280]  Кто-то ЛКШ?
[01:37:09.280 --> 01:37:11.280]  Ну, помните, мы вот это две недели назад рассматривали,
[01:37:11.280 --> 01:37:13.280]  эту веселую задачу, про найдите
[01:37:13.280 --> 01:37:15.280]  там наибольшего все подпоследствия
[01:37:15.280 --> 01:37:17.280]  между строкой С и всеми подстроками
[01:37:17.280 --> 01:37:19.280]  строки Т?
[01:37:19.280 --> 01:37:21.280]  Нет, не было такого?
[01:37:21.280 --> 01:37:23.280]  Рассматривали что-то такое, да.
[01:37:23.280 --> 01:37:25.280]  Где?
[01:37:25.280 --> 01:37:27.280]  На лекции это было?
[01:37:27.280 --> 01:37:29.280]  Нет, правильно, у нас-то
[01:37:29.280 --> 01:37:31.280]  да, мы это с вами рассматривали, да.
[01:37:31.280 --> 01:37:33.280]  Но просто я помню,
[01:37:33.280 --> 01:37:35.280]  просто мне сообщили, что где-то в 11-й группе
[01:37:35.280 --> 01:37:37.280]  ЛКШ это тоже есть.
[01:37:37.280 --> 01:37:39.280]  Учитывая, что в 11-й группе ЛКШ
[01:37:39.280 --> 01:37:41.280]  появилось совсем недавно?
[01:37:41.280 --> 01:37:43.280]  Ну да. Не, ну понятно.
[01:37:43.280 --> 01:37:45.280]  Если в них кто-то был.
[01:37:45.280 --> 01:37:47.280]  Ну кто-то был, нет, мне бы
[01:37:47.280 --> 01:37:49.280]  сказал человек по имени Илюша Васильев,
[01:37:49.280 --> 01:37:51.280]  так что да.
[01:37:51.280 --> 01:37:53.280]  Так что да, тут
[01:37:53.280 --> 01:37:55.280]  видимо важное
[01:37:55.280 --> 01:37:57.280]  уточнение. Ну им такое
[01:37:57.280 --> 01:37:59.280]  рассказывали, да.
[01:37:59.280 --> 01:38:01.280]  Ну это
[01:38:01.280 --> 01:38:03.280]  да.
[01:38:03.280 --> 01:38:05.280]  Кошмар.
[01:38:05.280 --> 01:38:07.280]  Хотя да, нет, хотя да,
[01:38:07.280 --> 01:38:09.280]  это тот человек, который знаете, да.
[01:38:09.280 --> 01:38:11.280]  А, ну этот, да.
[01:38:11.280 --> 01:38:13.280]  Тот человек, который был. Да, я был
[01:38:13.280 --> 01:38:15.280]  ЛКШ, читал так, делал лекцию по
[01:38:15.280 --> 01:38:17.280]  Дереву Гомориху, я базировал
[01:38:17.280 --> 01:38:19.280]  енот, я подготовки смотрел вашу лекцию.
[01:38:19.280 --> 01:38:21.280]  У вас там в конце ошибка.
[01:38:21.280 --> 01:38:23.280]  Вин, это тот чувак,
[01:38:23.280 --> 01:38:25.280]  который на сервисе
[01:38:25.280 --> 01:38:27.280]  после четвертого часа был там
[01:38:27.280 --> 01:38:29.280]  топ 70,
[01:38:29.280 --> 01:38:31.280]  а по итогу
[01:38:31.280 --> 01:38:33.280]  что-то типа третий.
[01:38:33.280 --> 01:38:35.280]  Не-не-не, он, не, у него,
[01:38:35.280 --> 01:38:37.280]  ну воверх где-то после
[01:38:37.280 --> 01:38:39.280]  момента второго часа я его вообще
[01:38:39.280 --> 01:38:41.280]  вообще на втором месте видел,
[01:38:41.280 --> 01:38:43.280]  но итог у него седьмой, к сожалению.
[01:38:43.280 --> 01:38:45.280]  По первому кем?
[01:38:45.280 --> 01:38:47.280]  Вообще.
[01:38:47.280 --> 01:38:49.280]  Нет, по первому было нормально, да.
[01:38:49.280 --> 01:38:51.280]  Да, но там
[01:38:51.280 --> 01:38:53.280]  4 часа было нет. Ну да, да, да.
[01:38:53.280 --> 01:38:55.280]  Ну посмотрим, ладно, главное.
[01:38:55.280 --> 01:38:57.280]  Как это называется, главное, чтоб он там где-нибудь
[01:38:57.280 --> 01:38:59.280]  был, по итогу Змороз намежна, да.
[01:38:59.280 --> 01:39:01.280]  Вот.
[01:39:01.280 --> 01:39:03.280]  Вот. Хотя, конечно,
[01:39:03.280 --> 01:39:05.280]  будет чуть сложнее.
[01:39:05.280 --> 01:39:07.280]  Но, впрочем, как повезет.
[01:39:07.280 --> 01:39:09.280]  Ладно, не будем на это.
[01:39:09.280 --> 01:39:11.280]  Ладно, это уже другое дело.
[01:39:11.280 --> 01:39:13.280]  Значит, идем дальше.
[01:39:13.280 --> 01:39:15.280]  Значит, вернемся к этой задаче.
[01:39:15.280 --> 01:39:17.280]  Потому что вот оказывается, вот,
[01:39:17.280 --> 01:39:19.280]  при решении этой задачи, собственно, сейчас вы
[01:39:19.280 --> 01:39:21.280]  ну, может быть, не то чтобы узрите всю мощь
[01:39:21.280 --> 01:39:23.280]  центроидной декомпозиции,
[01:39:23.280 --> 01:39:25.280]  но, пока и мере.
[01:39:25.280 --> 01:39:26.280]  Ну, что такое вообще
[01:39:26.280 --> 01:39:28.280]  центроидная декомпозиция?
[01:39:28.280 --> 01:39:30.280]  Ну на самом деле, это то, что будет,
[01:39:30.280 --> 01:39:32.280]  если мы всю вот эту рекурсию пропишем
[01:39:32.280 --> 01:39:33.280]  в явном виде.
[01:39:34.280 --> 01:39:36.280]  Что я имею ввиду?
[01:39:36.280 --> 01:39:38.280]  Я имею ввиду следующее.
[01:39:38.280 --> 01:39:40.280]  Значит, я возьму какое-нибудь дерево.
[01:39:40.280 --> 01:39:42.280]  Вот это вот дерево я возьму,
[01:39:42.280 --> 01:39:44.280]  вовсю, возьму. У меня тут веточки разрастаются,
[01:39:44.280 --> 01:39:46.280]  разрастаются, разрастаются, разрастаются,
[01:39:46.280 --> 01:39:48.280]  разрастаются, разрастаются, разрастаются,
[01:39:48.280 --> 01:39:50.280]  да, сейчас я побольше
[01:39:50.280 --> 01:39:52.280]  нарисую, чтобы тут совсем наглядно было.
[01:39:52.280 --> 01:39:54.280]  Вот, побольше, побольше,
[01:39:54.280 --> 01:40:02.280]  побольше там бамбуча какая-то разрастается там вот вот бамбуча бамбуча да вот как так это
[01:40:02.280 --> 01:40:08.280]  называется да кошмар вот кока-кола вон главное почему-то у нас есть афанты нет вот странно да
[01:40:08.280 --> 01:40:18.880]  а нет хотя есть господи что это вот вот значит смотрите берем центроид ну допустим вот эту
[01:40:19.240 --> 01:40:31.920]  значит я объявляю ее центроидом первого уровня такой это такой федеральный центроид вот
[01:40:31.920 --> 01:40:42.720]  ну хотя но но но я не знаю ладно там можно сказать как же такая столица да хоть этот
[01:40:42.720 --> 01:40:46.400]  центроид федерального уровня но у нас возникнет ощущение что таких центроидов у нас будет
[01:40:46.880 --> 01:40:53.240]  вот но у нас у нас будет такой один ну ладно ну ладно лучше без федерального
[01:40:53.240 --> 01:40:57.680]  уровня будет столица вот ну как всегда да естественно если у нас там в графе два
[01:40:57.680 --> 01:41:04.800]  центроида вы выбираете любой вот значит теперь говорите так что у нас теперь есть столица и
[01:41:04.800 --> 01:41:13.600]  все остальное но значит все остальное это значит у нас в данном случае три ну там сколько там в
[01:41:13.600 --> 01:41:20.000]  общем случае может быть сколько угодно под дерево под деревьев каждое под дерево мы объявляем
[01:41:20.000 --> 01:41:30.160]  федеральным округом и вы в каждом из этих федеральных округов тоже есть своя столица
[01:41:30.160 --> 01:41:40.480]  федерального округа ну типа там вот вот то есть ну так кто тут центроид у этого то она
[01:41:40.480 --> 01:41:49.840]  наверное вот это вот ну типа вот питер но типа ну питер город такой там ну знаете это к югу от
[01:41:49.840 --> 01:41:58.720]  петрозаводска такой маленький вот что там 5 миллионов там всего чего вот да вот ну вот ну
[01:41:58.720 --> 01:42:09.800]  вот допустим вот это будет новосибирск вот это будет ну да лучше сдастся больше на казань похоже
[01:42:09.800 --> 01:42:19.560]  да вот это будет казань условно но теперь заметим что мы значит идем дальше значит в каждом внутри
[01:42:19.560 --> 01:42:25.560]  федеральных округов есть всякие области у всякие республики типа на теперь облики республики
[01:42:25.560 --> 01:42:34.200]  литокрай края там эти все вот вот так вот вот так вот там ведь их уже много много много там у нас
[01:42:34.200 --> 01:42:46.800]  уже вот так что там у нас еще а ну вот вот вот это вот еще конечно так что там а ну тут вот так
[01:42:46.800 --> 01:42:53.080]  вот получается да ну кто-то большой кто-то маленький тут всякое бывает вот внутри каждой этой области
[01:42:53.080 --> 01:43:01.280]  лекаря есть обл центр то есть вот наверное вот вот уже наверное вот это иванова например как раз
[01:43:01.280 --> 01:43:11.080]  вот это там кострома это там что там еще у нас есть липецк например вот что еще есть вот там
[01:43:11.080 --> 01:43:21.040]  томск какой-нибудь так честь а ну давайте вот тут будет видите новгород где-нибудь так есть
[01:43:21.040 --> 01:43:41.520]  какой-нибудь маленький сингапурчик автономный городочек такой да так что тут еще ладно так
[01:43:41.520 --> 01:43:47.840]  ладно давайте еще вот это благовещенск еще вот будет пусть будет так есть благовещенск ну и давайте
[01:43:47.840 --> 01:43:58.320]  что там еще владивосток давайте вот тут ой тут еще ой тут еще под дерево есть ой ой ой а тут
[01:43:58.320 --> 01:44:12.240]  правда а потому что тут прям под дерево прям вот так вот так ну да как ой это вот точно да это
[01:44:12.240 --> 01:44:19.320]  да как говорится это мы назовем перм да это мы назовем перм потому что по-моему это первая
[01:44:19.320 --> 01:44:23.840]  по-моему пермский край у пермского края так это он такой большой но перм где-то на юге находится
[01:44:23.840 --> 01:44:30.240]  там недвалинина границ или что-то в этом роде впрочем неважно но что будем делать дальше но
[01:44:30.240 --> 01:44:38.240]  каждое внутри каждой области есть районы да вот ну вот так что тут можно давайте вот
[01:44:39.240 --> 01:44:46.880]  есть вот районы районы районы там ну скажем там если это так это было Иваново так ну ладно
[01:44:46.880 --> 01:44:52.760]  к сожалению не силен киография Ивановской области вот но правда тут заметим что города уже автоном
[01:44:52.760 --> 01:44:59.320]  но их ничего нет да вот здесь можно чуть посложнее смотрите да вот условно если это Кострома то вот
[01:44:59.320 --> 01:45:07.200]  это вот получается судеславль вот ну а вот это вот это уже типа берендеевы поляны вот
[01:45:07.200 --> 01:45:20.320]  судеславль город ну скажем так в районе судеславском районе есть и такой объект вот так ну тут так что-то
[01:45:20.320 --> 01:45:25.200]  отдельное там всякое висит ну не боюсь в общем короче говоря то есть я думаю суть вы уже более
[01:45:25.200 --> 01:45:30.160]  менее поняли то есть на самом деле центроидная декомпозиция это когда мы едва ли не в явном
[01:45:30.160 --> 01:45:37.560]  виде храним все вот эти деревья в логарифме рекурсии то есть смотрите имеется в виду что я храню прям значит
[01:45:37.560 --> 01:45:44.880]  все цены то есть каждая вершина является центроидом то есть знаете вот в древней греческо демократия где там
[01:45:44.880 --> 01:45:49.880]  получалось что каждый человек там хоть в каком-то виде но государство управлял ну потому что там
[01:45:50.160 --> 01:45:54.620]  должностей немного и на каждой должности нельзя было много раз избираться поэтому
[01:45:54.620 --> 01:46:01.300]  получало что практически каждый там хоть какой-нибудь после получал и там государство отношения или contenido
[01:46:01.300 --> 01:46:06.080]  и он но здесь будет получается так что каждый город то есть как у нас есть иерархия вершим
[01:46:06.080 --> 01:46:10.240]  каждой вершины является центроидом вопросу только какого-то уровня то есть есть главный
[01:46:10.240 --> 01:46:16.080]  центроид есть центроиды второго уровня т fishes тогда причем более того у каждого центроидом есть
[01:46:16.080 --> 01:46:21.920]  есть такая зона влияния, то есть, скажем, Москва влияет на все,
[01:46:23.120 --> 01:46:25.400]  там, скажем, Новосибирск влияет только на свой округ,
[01:46:26.200 --> 01:46:28.800]  ну вот там, скажем, Кострома влияет на Костромскую область,
[01:46:29.480 --> 01:46:34.160]  ну вот, Бериндеревы поляны — это вещь себе, да.
[01:46:35.880 --> 01:46:38.040]  Ну и так далее. Ну, глубина может быть тогда алгоритма.
[01:46:39.480 --> 01:46:41.080]  То есть, мы будем прямо в явном виде,
[01:46:41.760 --> 01:46:45.760]  каждое из этих поддеревий, для каждой решины мы можем что-нибудь в явном виде хранить и что-то делать.
[01:46:46.680 --> 01:46:49.280]  Вот в качестве примера обычно и рассматривается вот эта задача.
[01:46:51.760 --> 01:46:55.240]  Потому что идея будет следующая. Ну, значит, начнем сначала с разминочки, да.
[01:46:55.640 --> 01:46:59.640]  Вот, ну, вернемся к задаче. То есть, мы хотим красить в каком-то радиусе и получать цвет.
[01:47:00.880 --> 01:47:04.560]  А теперь представьте себе, что вы красите в радиусе только одной вершины.
[01:47:06.600 --> 01:47:09.320]  Вот тычетесь только в одну вершину и краситесь только вокруг нее.
[01:47:10.400 --> 01:47:11.400]  Как тогда решать задачу?
[01:47:11.400 --> 01:47:12.400]  Структура данных в массе.
[01:47:16.400 --> 01:47:20.400]  Ну, я, ну, не совсем. На самом деле будет структура данных стек все-таки.
[01:47:21.400 --> 01:47:22.400]  Даже дек, я бы сказал.
[01:47:23.400 --> 01:47:26.400]  Ну, потому что, нет, первая идея, конечно, будет понятна.
[01:47:26.400 --> 01:47:31.400]  Сначала мы из этого корня, из этой вершины, из этого корня запустим DFS,
[01:47:31.400 --> 01:47:35.400]  выпишем вершины с расстояниями и, а, ну и все, в общем-то.
[01:47:36.400 --> 01:47:39.400]  Потому что, на самом деле, теперь покраски в радиусе,
[01:47:39.400 --> 01:47:44.400]  потому что, на самом деле, теперь покраски в радиусах будут теперь в каждый момент времени выглядеть следующим образом.
[01:47:45.400 --> 01:47:49.400]  То есть, мы знаем, что у нас там в радиусе до трех все покрашено в цвет A.
[01:47:51.400 --> 01:47:55.400]  Потом, где больше трех, но не превосходит семи, было покрашено в цвет X.
[01:47:57.400 --> 01:48:01.400]  Потом, до цвета десять, тут все покрашено в цвет Z.
[01:48:02.400 --> 01:48:04.400]  Потом дальше идет там цвет 57.
[01:48:06.400 --> 01:48:08.400]  И тут покрашено в цвет B.
[01:48:09.400 --> 01:48:11.400]  Ну, давайте тут уже 179 нарисуем.
[01:48:14.400 --> 01:48:17.400]  А, ну тут может быть еще в 2007, а там снова все покрашено в A.
[01:48:18.400 --> 01:48:19.400]  Вот.
[01:48:20.400 --> 01:48:22.400]  То есть, по идее, можно описать запросы вот таким образом.
[01:48:23.400 --> 01:48:26.400]  То есть, у вас, то есть, форцухи, это вот такие вот концентрические такие окружности,
[01:48:27.400 --> 01:48:29.400]  и в каждом слое все покрашено в свой цвет, понимаете, да?
[01:48:30.400 --> 01:48:33.400]  Тогда, если вам нужно для какой-то вершины понять, в какой цвет она покрашена,
[01:48:34.400 --> 01:48:38.400]  просто нужно бинпольском в этом деке найти, в какой-то слой она попала, правда?
[01:48:39.400 --> 01:48:40.400]  Вот, понимаете?
[01:48:41.400 --> 01:48:42.400]  А что если...
[01:48:43.400 --> 01:48:47.400]  Ну понятно, если нам пришел запрос покрасить, условно, какую-то область,
[01:48:48.400 --> 01:48:51.400]  и область на этом расстоянии целиком принадлежит этому центроиду.
[01:48:52.400 --> 01:48:55.400]  Нет, парни, пока у нас нет центроид, пока мы временно забыли про центроиды,
[01:48:56.400 --> 01:48:59.400]  сказали, что у нас покраски приходят в радиусе от одной вершины.
[01:49:00.400 --> 01:49:01.400]  А, все тогда.
[01:49:02.400 --> 01:49:03.400]  От одного корки.
[01:49:04.400 --> 01:49:05.400]  Вот.
[01:49:05.400 --> 01:49:10.400]  И тогда, если нам приходит запрос о покраске все в радиусе 35 в цвет П,
[01:49:11.400 --> 01:49:12.400]  то тогда что у вас получается?
[01:49:13.400 --> 01:49:17.400]  Вы тогда фактически из этой штуки просто выкидываете, выкидываете, выкидываете что-то,
[01:49:18.400 --> 01:49:22.400]  и вместо этого довешиваете, тут вот пишете 35 П.
[01:49:23.400 --> 01:49:24.400]  Понимаете, да?
[01:49:25.400 --> 01:49:26.400]  Вот для этого нужен дек, хотя...
[01:49:27.400 --> 01:49:28.400]  Ну, это лучше дек, это в принципе больше на стек похоже,
[01:49:29.400 --> 01:49:31.400]  но на самом деле лучше дек, потому что в деке удобнее бинпоиск писать,
[01:49:32.400 --> 01:49:33.400]  там есть оператор квадратной скобочки.
[01:49:34.400 --> 01:49:35.400]  Вы писали, кстати, уже?
[01:49:36.400 --> 01:49:37.400]  Уже написали этот дек?
[01:49:38.400 --> 01:49:39.400]  Отлично.
[01:49:40.400 --> 01:49:41.400]  Вот.
[01:49:42.400 --> 01:49:43.400]  Так вот.
[01:49:44.400 --> 01:49:48.400]  Но это если вас тычут в одну и ту же вершину.
[01:49:49.400 --> 01:49:51.400]  Но, естественно, теперь возникает вопрос.
[01:49:52.400 --> 01:49:56.400]  А что делать, если вас в задаче тычут в разные вершины?
[01:49:56.400 --> 01:49:57.400]  Идея в вершине.
[01:50:01.400 --> 01:50:03.400]  Значит, тогда возникает такая идея.
[01:50:05.400 --> 01:50:07.400]  Ну вот, идея будет возникает такой.
[01:50:08.400 --> 01:50:09.400]  Сейчас вот будет, может быть, немножко сложно,
[01:50:10.400 --> 01:50:11.400]  но, значит, сейчас вот будьте внимательны.
[01:50:12.400 --> 01:50:13.400]  Значит, идея такая.
[01:50:15.400 --> 01:50:22.400]  Допустим, что вам пришел какой-то рандомный запрос в вершину В.
[01:50:22.400 --> 01:50:23.400]  В вершину В.
[01:50:24.400 --> 01:50:28.400]  С запрос, типа, радиус какой-нибудь, я не знаю, 345, свет Q.
[01:50:30.400 --> 01:50:36.400]  Тогда вы говорите, так, интересно, а дойдет ли это до столицы?
[01:50:37.400 --> 01:50:38.400]  И, допустим, выясняемся.
[01:50:39.400 --> 01:50:40.400]  Думаем, какое у нас расстояние до столицы?
[01:50:41.400 --> 01:50:45.400]  До столицы у нас расстояние 179.
[01:50:48.400 --> 01:50:51.400]  Отсюда можно сделать вообще весьма неожиданный вывод.
[01:50:52.400 --> 01:50:59.400]  Все в радиусе 345-179 от столицы должно быть покрашено.
[01:51:01.400 --> 01:51:05.400]  То есть, поэтому я объявляю, 345-179 это у нас сколько?
[01:51:06.400 --> 01:51:08.400]  Так, это 145 плюс 21, 166.
[01:51:09.400 --> 01:51:13.400]  То есть, забабахиваем тут запрос, типа, 166 Q.
[01:51:16.400 --> 01:51:21.400]  То есть, все вершины на расстоянии не более, чем 166 от этой вершины,
[01:51:22.400 --> 01:51:23.400]  которая будет покраситься.
[01:51:24.400 --> 01:51:25.400]  Но все ли мы покрыли?
[01:51:26.400 --> 01:51:27.400]  Нет, не все.
[01:51:28.400 --> 01:51:31.400]  Могут быть вершины на хорошем расстоянии от В, путь до которых не проходит через столицу.
[01:51:32.400 --> 01:51:33.400]  Может быть такое.
[01:51:34.400 --> 01:51:35.400]  Но тогда идея следующая.
[01:51:36.400 --> 01:51:41.400]  Но заметим, что все такие вершины лежат, естественно, в дереве второго уровня,
[01:51:42.400 --> 01:51:43.400]  в котором лежит вершина В.
[01:51:44.400 --> 01:51:45.400]  Правда?
[01:51:46.400 --> 01:51:47.400]  Теперь давайте смотреть.
[01:51:48.400 --> 01:51:50.400]  У этого дерева тоже есть центроид.
[01:51:51.400 --> 01:51:52.400]  Вот этот, центроид второго уровня.
[01:51:53.400 --> 01:51:57.400]  И до него расстояние, допустим, оказалось, какое?
[01:51:58.400 --> 01:52:00.400]  Ну, допустим, 343.
[01:52:01.400 --> 01:52:05.400]  Да, могло оказаться, что расстояние до центроида второго уровня больше, чем расстояние до столицы.
[01:52:06.400 --> 01:52:07.400]  Это нормально.
[01:52:08.400 --> 01:52:09.400]  Вот.
[01:52:10.400 --> 01:52:11.400]  Значит, соответственно.
[01:52:12.400 --> 01:52:15.400]  Тогда, получается, в радиусе его, значит, тогда мы говорим так.
[01:52:16.400 --> 01:52:19.400]  Значит, тогда мы этому центроиду второго уровня тоже передаем запрос.
[01:52:20.400 --> 01:52:25.400]  Что в радиусе два от него красим все в цветку.
[01:52:26.400 --> 01:52:30.400]  Но это касается только дерева второго уровня.
[01:52:31.400 --> 01:52:32.400]  Понимаете, да?
[01:52:33.400 --> 01:52:36.400]  Ну, то есть можно было сказать и про все, но мы будем говорить только про дерева второго уровня.
[01:52:37.400 --> 01:52:42.400]  И отправляемся теперь под дерево относительно этого центроида третьего уровня.
[01:52:43.400 --> 01:52:48.400]  Ну и, в общем-то, делаем примерно то же самое до тех пор, пока сама вершина В не окажется центроидом своего дерева.
[01:52:49.400 --> 01:52:51.400]  То есть, по сути, идея такая.
[01:52:52.400 --> 01:52:56.400]  Вот эту технологию со стеком мы проворачиваем в каждой вершине.
[01:52:57.400 --> 01:53:00.400]  То есть, в каждой вершине мы, но в каждой вершине отвечает только за свое дерево.
[01:53:01.400 --> 01:53:10.400]  То есть, мы в этом дереве как бы храним все расстояния, а также в этом, и в этом дереве мы храним все запросы, которые касаются именно этого дерева, именно этого центроида.
[01:53:11.400 --> 01:53:24.400]  То есть, мы себе говорим, мы разрешаем себе делать запрос, записывать запрос в какой-то вершине, но только, но касается этот запрос только того под дерево, центроидом которого она является.
[01:53:26.400 --> 01:53:27.400]  Понятно, да?
[01:53:28.400 --> 01:53:33.400]  И получается, что исходный запрос вот так мы разбили на логарифом запроса.
[01:53:34.400 --> 01:53:35.400]  Вот, понятно?
[01:53:35.400 --> 01:53:37.400]  Правда, есть, конечно, теперь маленькая оговорочка.
[01:53:38.400 --> 01:53:44.400]  Что когда нам придет запрос, в какой цвет она покрашена, мы начнем думать.
[01:53:45.400 --> 01:53:47.400]  А кто ее мог покрасить?
[01:53:52.400 --> 01:53:55.400]  Ну, кто-то из, действительно, центроидов начальников.
[01:53:56.400 --> 01:53:58.400]  Да, у нас есть такая, можно вести понятие, центроидная иерархия.
[01:54:00.400 --> 01:54:02.400]  То есть, я получил этот запрос.
[01:54:03.400 --> 01:54:13.400]  То есть, получается, что если вершина у нас центроид пятого уровня, то она могла сама покраситься, а могли ее покрасить кто-то из четырех центроидов ее начальников.
[01:54:14.400 --> 01:54:16.400]  Типа, вот столица, федеральный округ и так далее.
[01:54:17.400 --> 01:54:19.400]  Но как понять, кто из них покрасил?
[01:54:20.400 --> 01:54:23.400]  Ну, в них же мы храним вот такую штуку.
[01:54:24.400 --> 01:54:25.400]  Какую?
[01:54:26.400 --> 01:54:27.400]  Какие запросы внизу.
[01:54:28.400 --> 01:54:29.400]  Да.
[01:54:29.400 --> 01:54:34.400]  Если в домах хранить еще типа, понять, который из запросов, захватывающих нас, был последний.
[01:54:35.400 --> 01:54:36.400]  Ну, да.
[01:54:37.400 --> 01:54:43.400]  То есть, идея такая, давайте если просто для каждого запроса видеть, в какое время оно произошло, то получается у вас есть логарифм вариантов.
[01:54:44.400 --> 01:54:50.400]  То есть, каждый начальник говорил, кого окрасил, и, собственно, вы из этих запросов просто берете последний и говорите, вот он.
[01:54:52.400 --> 01:54:54.400]  В результате, ну, что получается?
[01:54:54.400 --> 01:54:59.400]  Ну, тогда получается, что запрос гет вы обрабатываете, получается, за кое-сем точку.
[01:55:00.400 --> 01:55:01.400]  Лог квадрат.
[01:55:02.400 --> 01:55:08.400]  Да, лог квадрат, потому что у вас, ну, потому что центроидная глубина до логарифма и бинпоиск.
[01:55:09.400 --> 01:55:15.400]  Вот, калори же вы делаете, ну, тут амортизация, но суммарно, но получается залог.
[01:55:16.400 --> 01:55:22.400]  Потому что, заметим, вот это вот выкидывание стека, конечно, амортизированно, там за от единицы работает.
[01:55:23.400 --> 01:55:24.400]  Понимаете, да?
[01:55:25.400 --> 01:55:28.400]  Вот, ну, там. Думаю, достаточно очевидно, да.
[01:55:29.400 --> 01:55:38.400]  Нет, почему за от единицы-то? У нас же каждый запрос, он появляется в логарифме вершины.
[01:55:39.400 --> 01:55:49.400]  Нет, я имею в виду, что если вы работаете со стеком вот этим, вам пришел запрос новой покраски, то он амортизированно будет за от единицы работать.
[01:55:49.400 --> 01:55:53.400]  Да, конечно же, здесь пишу логарифм, потому что вы логарифм, раз так делаете.
[01:55:54.400 --> 01:55:55.400]  Да, тут, тут, да.
[01:55:56.400 --> 01:56:00.400]  Вот, так что получается, вот это уже действительно и называется центроидная декомпозиция.
[01:56:01.400 --> 01:56:02.400]  Кажется, можно где-то залогу делать.
[01:56:03.400 --> 01:56:04.400]  Каким образом?
[01:56:05.400 --> 01:56:08.400]  Потому что мы, по-моему, делаем супермного листьев действий.
[01:56:09.400 --> 01:56:12.400]  Ну, мы делаем логарифм бинпоисков тут основная.
[01:56:13.400 --> 01:56:14.400]  А какие действия мы делаем листья?
[01:56:14.400 --> 01:56:25.400]  Я про то, что вот, как минимум, вот, когда мы центроидные, у нас в этих тителях есть какой-то запрос присвоения.
[01:56:26.400 --> 01:56:27.400]  Так.
[01:56:28.400 --> 01:56:39.400]  Точно, что если наш титель нас задевает в своем запросе, то, типа, нам уже ценнее его информация.
[01:56:41.400 --> 01:56:42.400]  Ну, не совсем.
[01:56:43.400 --> 01:56:44.400]  Нет, ну, конечно, да, нет.
[01:56:45.400 --> 01:56:53.400]  Мы можем оказаться покрашены уже в запросе высшего центроида, но это не значит, что мы покрасим этим все, потому что там всякое бывает.
[01:56:54.400 --> 01:56:55.400]  Вот.
[01:56:56.400 --> 01:56:59.400]  Но, действительно, тут вот, ну, по крайней мере, вот такое вот есть.
[01:57:00.400 --> 01:57:02.400]  Так что вот это уже и больше похоже на центроидную декомпозицию.
[01:57:03.400 --> 01:57:04.400]  Ну, там много разных задач на это могут быть.
[01:57:05.400 --> 01:57:08.400]  Там на каких-то серосах, по-моему, восьмой задачи, по-моему, уже это подсовывали даже.
[01:57:09.400 --> 01:57:10.400]  Нет? Ну, вот.
[01:57:10.400 --> 01:57:13.400]  Ну, да, не на последних серосах, но на, вот.
[01:57:14.400 --> 01:57:16.400]  Но, как бы, если вы хотите уметь решать восьмую задачу, то да.
[01:57:17.400 --> 01:57:21.400]  То есть, обычно для всяких там, чтобы стать призером-победителем вам, конечно, этого знать не надо.
[01:57:22.400 --> 01:57:23.400]  Ну, вот, да.
[01:57:24.400 --> 01:57:29.400]  Хотя, ну, хотя, нет, уровень, знаете, уровень постепенно растет, может, уже и на, может, когда-нибудь и надо будет.
[01:57:30.400 --> 01:57:31.400]  Все-таки.
[01:57:32.400 --> 01:57:34.400]  Ну, нет, ну, все-таки, знаете, уровень растет, конкуренция высокая, там, знаете.
[01:57:35.400 --> 01:57:36.400]  Хотя.
[01:57:36.400 --> 01:57:37.400]  Ну, тут по-разному, да.
[01:57:38.400 --> 01:57:41.400]  Ну, нет, понимаете, ну, просто, по-разному.
[01:57:42.400 --> 01:57:47.400]  Нет, понятно, что идеал, да, в идеале, конечно, да, серос, конечно, да, выигрывает не тот, кто знает, а тот, кто лучше придумает.
[01:57:48.400 --> 01:57:53.400]  Но просто тут как бы дальше будет просто из цикла, может быть, сложнее, иногда будет просто сложнее дать задачи.
[01:57:54.400 --> 01:57:56.400]  То есть, конечно, там на последнем, хотя на последнем серосе, да, повезло.
[01:57:57.400 --> 01:58:00.400]  Вот там еще и жюри смогло дать достаточно сложные задачи, в которых ничего не надо знать.
[01:58:00.400 --> 01:58:01.400]  А все надо придумать.
[01:58:02.400 --> 01:58:05.400]  Ну, правда, вот там, правда, на Код Фольксисе это вызвало кучу негатива.
[01:58:06.400 --> 01:58:12.400]  Там, потому что у кого-то был комментарий, там, в духе, ой, боже, вот зачем я ездил, я ездил во все эти школы, там, изучал эти сложные алгоритмы,
[01:58:13.400 --> 01:58:16.400]  чтобы приехать на серос и выяснить, что я должен был написать два конструктива и один ДФС.
[01:58:17.400 --> 01:58:18.400]  Оказывается.
[01:58:19.400 --> 01:58:20.400]  А ей какое безобразие.
[01:58:21.400 --> 01:58:23.400]  Ну, вот, ну, как говорится, жалко.
[01:58:24.400 --> 01:58:26.400]  Жалко, что для человека, конечно, да, ликвидирование.
[01:58:27.400 --> 01:58:28.400]  Как говорится, жалко.
[01:58:29.400 --> 01:58:32.400]  Жалко, что для человека, конечно, да, Олимпиада это не придумать, а выучить.
[01:58:33.400 --> 01:58:37.400]  Ну, вот, но это не отменяет того, что как бы в следующий раз могут дать задачи на это.
[01:58:38.400 --> 01:58:41.400]  Ну, впрочем, не то чтобы я там, да, не то чтобы вы там когда-нибудь будете участвовать во серосе.
[01:58:42.400 --> 01:58:44.400]  Ну, разве что в качестве членов жюри, конечно.
[01:58:45.400 --> 01:58:46.400]  Ладно.
[01:58:47.400 --> 01:58:50.400]  Так, ну, что ж, значит, получается, Centroid Decomposition обсудили, обсудили.
[01:58:51.400 --> 01:58:52.400]  Так, ну, Heavy Light еще раньше обсудили.
[01:58:53.400 --> 01:58:55.400]  Так же, ну, кажется, это вроде все, что я хотел сказать про деревья.
[01:58:56.400 --> 01:59:00.400]  Поэтому сейчас у нас будет перерыв, после чего мы перейдем к DFS-у на более продвижение.
[01:59:01.400 --> 01:59:02.400]  Наконец-то что-то руки стали подымать не все, так что.
[01:59:03.400 --> 01:59:04.400]  Так же, значит.
[01:59:05.400 --> 01:59:11.400]  Вот, хотя нет, сейчас я думаю, сейчас я буду рассказывать темы, на которые вы руки будете подымать достаточно активнее.
[01:59:12.400 --> 01:59:21.400]  Да, потому что сейчас мы, конечно, будем рассматривать метод Ториана, который будет одним хопом находить нам, значит, целых пять объектов.
[01:59:22.400 --> 01:59:23.400]  Значит, мосты.
[01:59:24.400 --> 01:59:25.400]  Компоненты реберной досвязности.
[01:59:26.400 --> 01:59:27.400]  Точки сочленения.
[01:59:28.400 --> 01:59:29.400]  Компоненты вершины двусвязности.
[01:59:30.400 --> 01:59:32.400]  И компоненты сильной связности.
[01:59:33.400 --> 01:59:36.400]  Да, это будет делать практически один и тот же алгоритм.
[01:59:37.400 --> 01:59:38.400]  Вот.
[01:59:39.400 --> 01:59:41.400]  Так, ну вот.
[01:59:42.400 --> 01:59:46.400]  Значит, но для начала оговоримся, что да, зачем я это дерево оставил.
[01:59:47.400 --> 01:59:52.400]  Мы, конечно, то есть мы, конечно, сейчас с деревом о дереве говорить не будем.
[01:59:53.400 --> 01:59:54.400]  Значит, уровень Easy.
[01:59:54.400 --> 01:59:55.400]  Значит, уровень Easy.
[01:59:56.400 --> 01:59:57.400]  Значит, метода Ториана.
[01:59:58.400 --> 01:59:59.400]  Ну, этого метода Ториана.
[02:00:00.400 --> 02:00:02.400]  Я думаю, там многие методы можно назвать методом Ториана, конечно.
[02:00:03.400 --> 02:00:06.400]  Но конкретно у этого, конечно, есть уровень Easy.
[02:00:07.400 --> 02:00:09.400]  Ну, там будет у нас уровень Easy, уровень Medium, уровень Card.
[02:00:10.400 --> 02:00:15.400]  Уровень Easy и Medium будет работать на неориентированных графах.
[02:00:16.400 --> 02:00:18.400]  Ну, естественно, да.
[02:00:19.400 --> 02:00:22.400]  Ну, там все будет базироваться на DFS.
[02:00:22.400 --> 02:00:27.400]  Но давайте вспомним, да, что когда мы запускаем DFS в неориентированном графе,
[02:00:28.400 --> 02:00:32.400]  как мы уже с вами в прошлый раз договорились, для нас будут существовать только два типа ребер.
[02:00:33.400 --> 02:00:36.400]  Ребра дерева DFS и обратные ребра.
[02:00:37.400 --> 02:00:38.400]  Как мы с вами, ну вот.
[02:00:39.400 --> 02:00:40.400]  Ну, то есть ребра, которые соединяют потомка с предком.
[02:00:41.400 --> 02:00:43.400]  Ну, предка с потомками тоже соединяет, но вот для нас это неважно.
[02:00:44.400 --> 02:00:48.400]  То есть мы будем считать, что существуют только такие ребра.
[02:00:49.400 --> 02:00:50.400]  Вот. Понятно, да?
[02:00:51.400 --> 02:00:54.400]  Вот. Ну, собственно, полезно такое, полезно так считать.
[02:00:55.400 --> 02:00:56.400]  Вот.
[02:00:57.400 --> 02:01:03.400]  Ну, а теперь, значит, задача, значит, номер Easy.
[02:01:04.400 --> 02:01:06.400]  Так, ну, во-первых, конечно, введем простое определение.
[02:01:08.400 --> 02:01:09.400]  Определение.
[02:01:10.400 --> 02:01:17.400]  Конечно, мост это, да, дальше, да, я перестаю диктовать, вы на автомате пишете.
[02:01:17.400 --> 02:01:27.400]  Да, то есть, можно так сказать, мост это ребро, удаление которого приводит.
[02:01:28.400 --> 02:01:32.400]  Все, вы как-то не так пишете?
[02:01:33.400 --> 02:01:37.400]  К увеличению числа компонент связанности.
[02:01:38.400 --> 02:01:47.400]  Числа компонент связанности.
[02:01:49.400 --> 02:01:50.400]  Вот.
[02:01:53.400 --> 02:01:58.400]  Так, ну вот спрашивается, какие ребра в этом графе, вот в таком графе являются мостами?
[02:02:01.400 --> 02:02:02.400]  Все.
[02:02:02.400 --> 02:02:04.400]  Нет, красные ребра существуют тоже.
[02:02:05.400 --> 02:02:06.400]  Да.
[02:02:07.400 --> 02:02:08.400]  Два.
[02:02:09.400 --> 02:02:10.400]  Второе.
[02:02:11.400 --> 02:02:12.400]  Вот оно, вот оно.
[02:02:13.400 --> 02:02:14.400]  О, вот так, вот так, хорошо.
[02:02:17.400 --> 02:02:18.400]  Да?
[02:02:21.400 --> 02:02:22.400]  Да.
[02:02:24.400 --> 02:02:25.400]  Так.
[02:02:26.400 --> 02:02:27.400]  Ну, да, да.
[02:02:27.400 --> 02:02:30.400]  Ну, в принципе, да, заметьте, в этом графе у нас есть.
[02:02:30.400 --> 02:02:31.400]  Ну, да, да.
[02:02:32.400 --> 02:02:40.400]  Ну, в принципе, да, заметим, что да, мостом является там, ну, фактически все ребра, на которых висят висячие вершины, или под деревья там, или вот что-то такое.
[02:02:41.400 --> 02:02:44.400]  Ну, вот, ну, самый нетривиальный мост здесь, конечно, вот это.
[02:02:45.400 --> 02:02:51.400]  Потому что он разделяет граф на две самые нетривиальные части.
[02:02:52.400 --> 02:02:53.400]  Вот.
[02:02:54.400 --> 02:02:58.400]  Ну, у этого моста есть, конечно, понятие более нетривиальное.
[02:03:00.400 --> 02:03:01.400]  О, поздороваться.
[02:03:02.400 --> 02:03:03.400]  Я что, здравствуйте, нет?
[02:03:04.400 --> 02:03:06.400]  Или я сам себе сказал, в голове, я про его поводу.
[02:03:07.400 --> 02:03:09.400]  Вот, да, вот у меня такая же проблема есть, вот такая.
[02:03:10.400 --> 02:03:11.400]  О, ладно, добрый день, добрый день.
[02:03:12.400 --> 02:03:13.400]  Вот.
[02:03:16.400 --> 02:03:17.400]  Вот.
[02:03:18.400 --> 02:03:19.400]  Так вот.
[02:03:20.400 --> 02:03:21.400]  Значит, опарник такой.
[02:03:22.400 --> 02:03:24.400]  Значит, ну сейчас придется работать чуть посложнее.
[02:03:25.400 --> 02:03:26.400]  Значит, определение.
[02:03:27.400 --> 02:03:30.400]  Вершины уйве.
[02:03:31.400 --> 02:03:32.400]  Значит, тут прям вот аккуратнее.
[02:03:33.400 --> 02:03:34.400]  Вершины уйве.
[02:03:35.400 --> 02:03:36.400]  Внимание.
[02:03:37.400 --> 02:03:38.400]  Рёберна двусвязаны.
[02:03:41.400 --> 02:03:42.400]  Рёберна, да.
[02:03:43.400 --> 02:03:44.400]  Двусвязаны.
[02:03:44.400 --> 02:04:02.400]  Если существует два рёберна непересекающихся пути.
[02:04:03.400 --> 02:04:04.400]  И это важная оговорка.
[02:04:14.400 --> 02:04:23.400]  Соединяющих уйве.
[02:04:24.400 --> 02:04:25.400]  Во.
[02:04:26.400 --> 02:04:27.400]  Вот.
[02:04:28.400 --> 02:04:33.400]  Ну, то есть типичный пример, то есть, может показаться,
[02:04:34.400 --> 02:04:37.400]  что можно было сказать другими словами, что через уйве можно провести цикл.
[02:04:38.400 --> 02:04:39.400]  Но это не очень точно.
[02:04:40.400 --> 02:04:42.400]  То есть, воображать себе можно вот такое.
[02:04:42.400 --> 02:04:43.400]  Но не нужно.
[02:04:44.400 --> 02:04:49.400]  Потому что гораздо лучше себе, конечно, воображать вот какого-нибудь такого рода пример.
[02:04:50.400 --> 02:04:51.400]  Вот.
[02:04:52.400 --> 02:04:57.400]  Потому что обратите внимание, вот эти два пути, они рёберна не пересекаются.
[02:04:58.400 --> 02:04:59.400]  Вот.
[02:05:00.400 --> 02:05:01.400]  Вершина, сколько угодно.
[02:05:02.400 --> 02:05:03.400]  Понятно, да?
[02:05:04.400 --> 02:05:05.400]  Ну и, конечно, да.
[02:05:06.400 --> 02:05:08.400]  Ну и слава богу, что если уйве совпадают, то, конечно,
[02:05:08.400 --> 02:05:14.400]  путь, который стоит только из вершины, он сам с собой рёберна не пересекается.
[02:05:15.400 --> 02:05:16.400]  Так.
[02:05:17.400 --> 02:05:23.400]  Ну, возникает сразу первое утверждение, которое оказывается не таким уж тривиальным.
[02:05:24.400 --> 02:05:29.400]  Рёберная двусвязанность – это отношение эквивалентности.
[02:05:38.400 --> 02:05:39.400]  Вот.
[02:05:52.400 --> 02:05:53.400]  А что тут не тривиальный?
[02:05:54.400 --> 02:05:56.400]  Да, ну давайте, ну-ка докажите мне, почему это так.
[02:05:57.400 --> 02:06:00.400]  Ну, вот у нас есть УВДВ в вершинке, да?
[02:06:01.400 --> 02:06:02.400]  Так.
[02:06:05.400 --> 02:06:06.400]  Ну.
[02:06:07.400 --> 02:06:11.400]  Так, ну давайте, да, сразу оговоримся, да, заметим, что рефлексивность очевидна,
[02:06:12.400 --> 02:06:13.400]  то есть симметричность тоже.
[02:06:14.400 --> 02:06:15.400]  Так.
[02:06:16.400 --> 02:06:17.400]  Да, то есть теперь надо доказать транзитивность.
[02:06:18.400 --> 02:06:20.400]  То есть надо доказать, что если между У и В есть хорошие пути,
[02:06:21.400 --> 02:06:24.400]  и между В и В есть хорошие пути, то между У и В есть хорошие пути.
[02:06:25.400 --> 02:06:27.400]  Склеим пути, ну а если они…
[02:06:28.400 --> 02:06:30.400]  Ага, склеим, но только маленькая проблема.
[02:06:31.400 --> 02:06:34.400]  Да, в идеале, конечно, хочется нарисовать какую-то картинку вот такую.
[02:06:35.400 --> 02:06:38.400]  Так кажется, что проще всего просто выкинуть все мосты из графа
[02:06:39.400 --> 02:06:41.400]  и сказать, что вот не наш компонент реабилитации.
[02:06:42.400 --> 02:06:43.400]  Ага.
[02:06:44.400 --> 02:06:46.400]  Это не докажет отношения эквивалентности.
[02:06:47.400 --> 02:06:49.400]  То есть это докажет, что внутри…
[02:06:50.400 --> 02:06:51.400]  Своили вот так.
[02:06:52.400 --> 02:06:53.400]  Это докажет, что внутри компоненты связности
[02:06:54.400 --> 02:06:56.400]  там любое ребро там лежит на цикле, это да.
[02:06:57.400 --> 02:07:00.400]  Но это докажет, что любые две вершины соединенные ребром
[02:07:00.400 --> 02:07:02.400]  у ребер-нуду связаны, но это не докажет, что ребер-нуду связаны
[02:07:03.400 --> 02:07:04.400]  в отношении эквивалентности.
[02:07:10.400 --> 02:07:11.400]  Так, ну-ка, вот давайте.
[02:07:12.400 --> 02:07:14.400]  Так, давайте, подготовимся, у вас там как раз теоретическая задача.
[02:07:15.400 --> 02:07:16.400]  Это все будет.
[02:07:17.400 --> 02:07:18.400]  Даже две.
[02:07:19.400 --> 02:07:20.400]  Да, но там вот хорошие.
[02:07:21.400 --> 02:07:22.400]  Вот давайте к ним немножко подготовимся.
[02:07:23.400 --> 02:07:24.400]  Там мясо полное.
[02:07:25.400 --> 02:07:27.400]  Так, ну-ка, вот давайте, давайте, давайте.
[02:07:28.400 --> 02:07:29.400]  Вот.
[02:07:30.400 --> 02:07:31.400]  Ну вот, а ведь…
[02:07:32.400 --> 02:07:33.400]  Синий.
[02:07:34.400 --> 02:07:35.400]  У нас синий.
[02:07:36.400 --> 02:07:37.400]  Там две задачи по 7 утра рождения.
[02:07:38.400 --> 02:07:39.400]  Сейчас.
[02:07:40.400 --> 02:07:41.400]  Ну.
[02:07:42.400 --> 02:07:44.400]  Нет, тихо, тихо, давайте лучше задавайте.
[02:07:45.400 --> 02:07:48.400]  Нет, там-то будет вкуснятина, это да, но…
[02:07:49.400 --> 02:07:53.400]  Ну, окей, давайте мы рассмотрим самые ближайшие пересечения.
[02:07:54.400 --> 02:07:56.400]  Да, первые пересечения.
[02:07:57.400 --> 02:07:58.400]  Какое первые пересечения?
[02:07:59.400 --> 02:08:00.400]  У нас из 2 цикла, давайте лучше склеим из 2 цикла.
[02:08:01.400 --> 02:08:02.400]  Что такое склеим из 2 цикла?
[02:08:03.400 --> 02:08:06.400]  Давайте вот, у нас есть путь из куб В и из В в В.
[02:08:07.400 --> 02:08:08.400]  Есть.
[02:08:09.400 --> 02:08:10.400]  Нижние 2.
[02:08:11.400 --> 02:08:13.400]  Ну, допустим, они может даже пересекаются паре вокруг, кстати.
[02:08:14.400 --> 02:08:17.400]  Вот, ну, давайте, вот мы взяли путь из куб В, дальше идем по пути из В в В,
[02:08:18.400 --> 02:08:22.400]  до первого либра, который есть на, собственно…
[02:08:23.400 --> 02:08:24.400]  Ну да.
[02:08:25.400 --> 02:08:26.400]  На пути из куб В.
[02:08:27.400 --> 02:08:37.400]  Ну, мы с тем же успехом просто можем тогда взять первое вхождение вот этого ребра на путь из куб В
[02:08:38.400 --> 02:08:45.400]  и к нему прицепить, типа, конец, то, что после этого ребра на пути из В в В.
[02:08:46.400 --> 02:08:49.400]  Ну, хорошо, ну, по сути это называется, мы возьмем путь вот этот у В В,
[02:08:50.400 --> 02:08:54.400]  там, допустим, выкинем за него лишние крюки, там внутри него возьмем там простой какой-то путь,
[02:08:55.400 --> 02:08:56.400]  может он вот так вот будет выглядеть.
[02:08:57.400 --> 02:08:59.400]  Мы можем даже из этих двух тоже это сделать.
[02:09:00.400 --> 02:09:03.400]  Остается только вопрос, а почему вот этот путь и этот путь не пересекаются?
[02:09:04.400 --> 02:09:05.400]  Ну…
[02:09:06.400 --> 02:09:07.400]  А теперь же…
[02:09:08.400 --> 02:09:15.400]  Ну, если вот смотреть именно такой способ, как мы делали, у нас получается путь,
[02:09:16.400 --> 02:09:22.400]  оба пути имеют вид, как это, типа, префикс пути из куб В и суффикс пути из В в В.
[02:09:22.400 --> 02:09:23.400]  Ну…
[02:09:27.400 --> 02:09:29.400]  В таком виде, кстати, не совсем.
[02:09:31.400 --> 02:09:35.400]  Ну, там тогда надо точнее формулировать, что в том виде, как мы сказали, по-моему, это не так.
[02:09:36.400 --> 02:09:43.400]  Ну, там, типа, берем путь от УВ, а потом там что-то, находим первое пересечение, что-то там выкидываем.
[02:09:43.400 --> 02:09:44.400]  То есть это как-то, по-моему…
[02:09:45.400 --> 02:09:47.400]  Ну, либо у меня какие-то в голове не те ассоциации вызывает.
[02:09:48.400 --> 02:09:49.400]  Мне кажется, да.
[02:09:50.400 --> 02:09:57.400]  Кажется, что проще, чем это, вот, предпочтение доказать, типа, то, что если вот рассмотреть компоненты по мостам,
[02:09:58.400 --> 02:10:05.400]  ну, типа, после удаления мостов, то вот все вершины внутри одной компоненты, например, на двух связанных.
[02:10:05.400 --> 02:10:07.400]  И из этого уже тогда очевидно, что это ошибка.
[02:10:08.400 --> 02:10:10.400]  Ну, кажется, что вот это просто доказывает.
[02:10:11.400 --> 02:10:12.400]  Ну, и как она, ну…
[02:10:13.400 --> 02:10:15.400]  Ну, это картинка называется, ну, и как вы это докажете.
[02:10:16.400 --> 02:10:21.400]  Ну, в одну сторону очевидно, типа, если у нас есть…
[02:10:22.400 --> 02:10:23.400]  Вот гуд реально, да.
[02:10:25.400 --> 02:10:29.400]  Ну, типа, если у нас есть мост, то это…
[02:10:30.400 --> 02:10:34.400]  Ну, типа, если у нас есть мост, то это…
[02:10:35.400 --> 02:10:39.400]  То это неправда, что пара всех вершин вверху на двух связанных.
[02:10:40.400 --> 02:10:41.400]  Потому что, ну, понятно.
[02:10:42.400 --> 02:10:46.400]  Просто поселим две вершины по разные стороны.
[02:10:47.400 --> 02:10:48.400]  Нет, ну, это понятно, да. Хорошо.
[02:10:49.400 --> 02:10:53.400]  Поэтому из того, что существует мост, получили…
[02:10:54.400 --> 02:10:55.400]  Да, это понятно. А в другую сторону?
[02:10:56.400 --> 02:10:58.400]  Ну, а теперь, допустим, у нас мостов нет.
[02:10:59.400 --> 02:11:00.400]  Ну, рассмотрим.
[02:11:02.400 --> 02:11:05.400]  Любой путь. Из УВ.
[02:11:06.400 --> 02:11:07.400]  Да.
[02:11:10.400 --> 02:11:13.400]  Вот. Надо не один путь, надо два пути.
[02:11:17.400 --> 02:11:19.400]  Ну, вот у нас есть, получается, первые две вершинки.
[02:11:20.400 --> 02:11:21.400]  Есть первая, вторая, вторая, вторая, третья.
[02:11:22.400 --> 02:11:23.400]  Есть цикл, который…
[02:11:24.400 --> 02:11:26.400]  Ревер на простой цикл, который содержит первые две вершинки есть.
[02:11:27.400 --> 02:11:29.400]  Ревер на простой цикл, который содержит вторые две вершинки.
[02:11:30.400 --> 02:11:31.400]  Значит, первый и последний мы как бы пометим.
[02:11:32.400 --> 02:11:35.400]  Теперь посмотрим на общие вершинки у этих циклов.
[02:11:36.400 --> 02:11:37.400]  Если у этих циклов всего одна общая вершинка,
[02:11:38.400 --> 02:11:40.400]  то мы можем как бы склеить его типа восьмерткой.
[02:11:41.400 --> 02:11:42.400]  Вот. Теперь, если у этих циклов…
[02:11:43.400 --> 02:11:46.400]  Ну, общие ребра, потому что, может, от склеивания мы их избавиться не можем иногда.
[02:11:47.400 --> 02:11:49.400]  Ну, помните, да, что у нас вот так бывает, да?
[02:11:50.400 --> 02:11:51.400]  Да.
[02:11:52.400 --> 02:11:55.400]  Теперь пусть у нас у циклов есть это.
[02:11:56.400 --> 02:11:57.400]  Подождите, подождите.
[02:11:58.400 --> 02:12:00.400]  Мы и пишем теперь первый цикл в какой-нибудь поярке.
[02:12:01.400 --> 02:12:02.400]  В какой-нибудь цикл.
[02:12:03.400 --> 02:12:05.400]  А теперь будем смотреть на его вершинки в таком поярке.
[02:12:06.400 --> 02:12:07.400]  Не, ну и потом что? И потом что, значит, склеим восьмерткой?
[02:12:08.400 --> 02:12:10.400]  Ну, если у нас только одна общая вершинка.
[02:12:11.400 --> 02:12:13.400]  А, ну это если одна, а если…
[02:12:14.400 --> 02:12:17.400]  Ну, дальше. Пусть у нас теперь можно…
[02:12:18.400 --> 02:12:19.400]  Ну, давай.
[02:12:20.400 --> 02:12:21.400]  Пусть у нас есть несколько общих вершинок.
[02:12:22.400 --> 02:12:23.400]  Получается, у нас вот есть…
[02:12:24.400 --> 02:12:25.400]  Так.
[02:12:26.400 --> 02:12:27.400]  Затем здесь вот.
[02:12:28.400 --> 02:12:29.400]  Раз вершинка общая, два вершинка общая.
[02:12:30.400 --> 02:12:31.400]  Со вторым.
[02:12:32.400 --> 02:12:33.400]  Первый там дальше как-то идет.
[02:12:34.400 --> 02:12:35.400]  Дальше могут быть пересечения.
[02:12:36.400 --> 02:12:37.400]  И вот тут второй цикл он как-то идет.
[02:12:38.400 --> 02:12:39.400]  Возможно поэтому, или было возможно, поэтому.
[02:12:40.400 --> 02:12:41.400]  Так.
[02:12:42.400 --> 02:12:43.400]  Теперь у нас получается здесь какой-то кусочек.
[02:12:44.400 --> 02:12:45.400]  Здесь какой-то кусочек.
[02:12:46.400 --> 02:12:47.400]  Здесь первая важная вершинка.
[02:12:48.400 --> 02:12:49.400]  Тут вторая важная вершинка.
[02:12:50.400 --> 02:12:51.400]  Ноги.
[02:12:52.400 --> 02:12:54.400]  Теперь мы возьмем эту часть от этого цикла.
[02:12:55.400 --> 02:12:56.400]  Получается из двух частей.
[02:12:57.400 --> 02:12:59.400]  На нашу исходную циклу мы возьмем ту, в которой есть важная вершинка.
[02:13:00.400 --> 02:13:01.400]  И вот эту мы возьмем ту, в которой есть важная вершинка.
[02:13:02.400 --> 02:13:04.400]  И соответственно оставшуюся часть мы как бы отпилим.
[02:13:05.400 --> 02:13:06.400]  Дальше мы вернулись в то же самое место.
[02:13:07.400 --> 02:13:08.400]  Дальше мы можем продолжать склеивать.
[02:13:09.400 --> 02:13:11.400]  То есть у нас цикл был как-то, допустим, как-то странно пересекаться.
[02:13:12.400 --> 02:13:13.400]  Ну, по-моему, цикл перестал быть циклом.
[02:13:14.400 --> 02:13:16.400]  То есть было два цикла, стало просто два пути какое-то.
[02:13:17.400 --> 02:13:18.400]  Которые описывали один цикл, но они могли пересекаться.
[02:13:19.400 --> 02:13:21.400]  Я не суду, что у нас вот пошло как-то так.
[02:13:21.400 --> 02:13:28.400]  Пошло как-то так, затем второй шел вот так вот зашел, вышел, зашел, вышел, зашел, вышел.
[02:13:29.400 --> 02:13:30.400]  Ну, например.
[02:13:31.400 --> 02:13:32.400]  И такое могло быть, да.
[02:13:33.400 --> 02:13:34.400]  И где-нибудь у нас вот так вот.
[02:13:35.400 --> 02:13:36.400]  Вот у нас две важные вершины.
[02:13:37.400 --> 02:13:38.400]  Вот у нас есть первые два пересечения.
[02:13:39.400 --> 02:13:40.400]  Мы смотрим.
[02:13:41.400 --> 02:13:42.400]  У нас наша вторая важная вершинка в этой части.
[02:13:43.400 --> 02:13:45.400]  В этой части, которая между пересечениями выциклется.
[02:13:46.400 --> 02:13:47.400]  Вот.
[02:13:48.400 --> 02:13:49.400]  Вот.
[02:13:50.400 --> 02:13:51.400]  Вот.
[02:13:52.400 --> 02:13:53.400]  А нет, он шел вот так.
[02:13:54.400 --> 02:13:55.400]  Мы смотрим, она здесь или нет.
[02:13:56.400 --> 02:13:57.400]  Она у нас, она есть здесь, поэтому мы эту часть удаляем.
[02:13:58.400 --> 02:13:59.400]  Вот так вот.
[02:14:00.400 --> 02:14:03.400]  То есть мы смотрим, она здесь, она здесь или здесь.
[02:14:04.400 --> 02:14:05.400]  Она, она, она, она.
[02:14:06.400 --> 02:14:07.400]  Сейчас, подождите, на какую часть удаляем?
[02:14:08.400 --> 02:14:09.400]  Мы часть какого цикла удаляем?
[02:14:10.400 --> 02:14:11.400]  А, ну да, если они пересекаются.
[02:14:12.400 --> 02:14:13.400]  У нас вот есть циклы.
[02:14:14.400 --> 02:14:15.400]  У них есть пересечения.
[02:14:16.400 --> 02:14:17.400]  Вот есть две вершинки в первом цикле.
[02:14:18.400 --> 02:14:19.400]  Идешь однажды после второй.
[02:14:20.400 --> 02:14:22.400]  И у нас у второго цикла тоже есть.
[02:14:23.400 --> 02:14:24.400]  Второй цикл как бы до них шел.
[02:14:25.400 --> 02:14:28.400]  А если на этом пересечении есть сама вершина W, кстати?
[02:14:29.400 --> 02:14:30.400]  Значит, мы говорим, что она нам нужна.
[02:14:31.400 --> 02:14:33.400]  И остальную штуку отбрасываем.
[02:14:36.400 --> 02:14:38.400]  То есть у нас вот они как-то пересеклись вот так.
[02:14:39.400 --> 02:14:42.400]  И мы берем нужную нам часть из пересечения.
[02:14:44.400 --> 02:14:45.400]  И казалось бы, идем дальше.
[02:14:45.400 --> 02:14:46.400]  Идем дальше.
[02:14:47.400 --> 02:14:48.400]  Давай можем склеить циклы.
[02:14:49.400 --> 02:14:50.400]  Ну, я что-то не понял.
[02:14:51.400 --> 02:14:54.400]  Как мы как бы убрали склейку сейчас?
[02:14:55.400 --> 02:14:57.400]  Мы их типа, образно у нас есть циклы.
[02:14:58.400 --> 02:15:00.400]  Если у нас возникают конфликты, когда мы можем склеить,
[02:15:01.400 --> 02:15:02.400]  то мы просто отрезаем от них куски,
[02:15:03.400 --> 02:15:04.400]  в которых нет нужной вершинки.
[02:15:05.400 --> 02:15:06.400]  Ну, отрезаем.
[02:15:07.400 --> 02:15:08.400]  Но если от цикла отрезать кусок, он перестает быть циклом.
[02:15:09.400 --> 02:15:10.400]  У нас были два цикла.
[02:15:11.400 --> 02:15:12.400]  Вот у нас есть два цикла.
[02:15:13.400 --> 02:15:14.400]  Мы отрезали кусок и вклеили кусок из второго.
[02:15:15.400 --> 02:15:16.400]  В конфликты.
[02:15:17.400 --> 02:15:18.400]  Мы отрезаем не нужные куски,
[02:15:19.400 --> 02:15:21.400]  сейчас в итоге один большой, хороший цикл с нужной вершинкой.
[02:15:22.400 --> 02:15:26.400]  Мне кажется, я могу на поле показать, что у нас есть.
[02:15:27.400 --> 02:15:28.400]  Ну, давай.
[02:15:29.400 --> 02:15:30.400]  Давай.
[02:15:39.400 --> 02:15:41.400]  Вернемся к этому рисунку.
[02:15:42.400 --> 02:15:43.400]  Допустим.
[02:15:43.400 --> 02:15:44.400]  Допустим.
[02:15:45.400 --> 02:15:46.400]  Вот.
[02:15:47.400 --> 02:15:51.400]  И, допустим, у нас вот тут вот, да, какое-то пересечение.
[02:15:52.400 --> 02:15:56.400]  То есть, типа, тут мы прошли с порыбром X, Y, да?
[02:15:57.400 --> 02:15:58.400]  Да.
[02:15:59.400 --> 02:16:01.400]  И тут мы прошли с порыбром X, Y.
[02:16:02.400 --> 02:16:03.400]  Вот.
[02:16:04.400 --> 02:16:07.400]  А мы хотим, ну, вот, что-то вот такое вот сделать.
[02:16:08.400 --> 02:16:10.400]  Ну, ну, тогда давайте мы, типа, вот,
[02:16:10.400 --> 02:16:13.400]  вся вот это вот просто удалим.
[02:16:14.400 --> 02:16:15.400]  Угу.
[02:16:16.400 --> 02:16:20.400]  И из этого, ну, вот, и вот, короче,
[02:16:21.400 --> 02:16:25.400]  из этого Y пойдем так же, как мы шли бы отсюда.
[02:16:26.400 --> 02:16:27.400]  Нет?
[02:16:28.400 --> 02:16:29.400]  Нет?
[02:16:30.400 --> 02:16:31.400]  Сейчас.
[02:16:32.400 --> 02:16:35.400]  Тут вам проблема какая-то с тем, что у нас теперь вид другой.
[02:16:36.400 --> 02:16:38.400]  Непонятно, как это все мы делаем.
[02:16:38.400 --> 02:16:39.400]  Нет, то сейчас.
[02:16:40.400 --> 02:16:41.400]  Не, ну.
[02:16:42.400 --> 02:16:43.400]  У нас уменьшается количество ребер.
[02:16:44.400 --> 02:16:45.400]  Да, ну, теперь вид меняется.
[02:16:46.400 --> 02:16:48.400]  Нет, ну да, но вид как-то, но вид как-то меняется.
[02:16:49.400 --> 02:16:50.400]  Это больше не у восьмерка вот такая.
[02:16:51.400 --> 02:16:52.400]  Почему?
[02:16:53.400 --> 02:16:54.400]  Такая же у восьмерка.
[02:16:55.400 --> 02:16:58.400]  После первого же удаления у тебя не это вот той вот вершины V,
[02:16:59.400 --> 02:17:00.400]  с которой ты два раза приходишь.
[02:17:01.400 --> 02:17:04.400]  Не, ну, скажем так, у этого, кстати, тут у этого рассуждения
[02:17:05.400 --> 02:17:07.400]  еще такая вообще сильно болезненная дыра такая, что если тут X, Y,
[02:17:08.400 --> 02:17:09.400]  это X игрок, а не игрок X.
[02:17:10.400 --> 02:17:12.400]  Нет, это только по общению не важно.
[02:17:13.400 --> 02:17:14.400]  Да?
[02:17:15.400 --> 02:17:17.400]  Вот ты прошел по X игрок, а потом по игроку ты куда пошел?
[02:17:18.400 --> 02:17:19.400]  Вот так что ли пошел?
[02:17:20.400 --> 02:17:21.400]  А можно просто не проходить.
[02:17:22.400 --> 02:17:23.400]  Да, можно с X сразу в X.
[02:17:24.400 --> 02:17:26.400]  Можно сразу вот с того дела X пойти дальше.
[02:17:27.400 --> 02:17:28.400]  Ага, так.
[02:17:29.400 --> 02:17:30.400]  Это вообще не проблема.
[02:17:31.400 --> 02:17:32.400]  Ну.
[02:17:32.400 --> 02:17:42.400]  У нас есть два пути, справа верхний и нищий.
[02:17:43.400 --> 02:17:47.400]  Давайте в обоих из них возьмем два самых правых.
[02:17:48.400 --> 02:17:52.400]  Не, ну там начнутся всякие подлянки, что вы рассмотрите вот эти пути.
[02:17:53.400 --> 02:17:56.400]  Но там просто выяснится следующее, что тут вам хотя бы гаранти...
[02:17:57.400 --> 02:17:58.400]  Сейчас.
[02:17:59.400 --> 02:18:00.400]  Что вам...
[02:18:01.400 --> 02:18:03.400]  Нет, ну да, там просто с видами напряг.
[02:18:04.400 --> 02:18:06.400]  Там просто надо тогда очень аккуратный какой-то инвариант тогда расписывать.
[02:18:07.400 --> 02:18:11.400]  Потому что у нас как бы вот этот вот выкидывание этого пути выкидывает у нас в вершину V.
[02:18:12.400 --> 02:18:13.400]  Сейчас.
[02:18:14.400 --> 02:18:16.400]  То есть можно правда прописывать инвариант, что у вас есть два пути,
[02:18:17.400 --> 02:18:21.400]  значит каждый из которых содержит там какой-то там...
[02:18:22.400 --> 02:18:25.400]  там префикс какой-то, там суфикс какой-то,
[02:18:26.400 --> 02:18:28.400]  кто-то там с кем-то не пересекается и так далее.
[02:18:28.400 --> 02:18:30.400]  Мне сейчас так получилось, что...
[02:18:31.400 --> 02:18:32.400]  Что получилось?
[02:18:33.400 --> 02:18:40.400]  Вот мы гарантированно избавились от пересечений на одном из двух правых путей, да?
[02:18:41.400 --> 02:18:43.400]  Нет, не да, мы избавились от одного конкретного,
[02:18:44.400 --> 02:18:46.400]  то есть мы взяли пересенье и конкретно от него избавились.
[02:18:47.400 --> 02:18:48.400]  Но пока это все, что можно сказать, что он выкинулось какой-то.
[02:18:49.400 --> 02:18:53.400]  Потому что у нас теперь есть путь вот такой, в смысле вот такой, и вот это вот.
[02:18:54.400 --> 02:18:56.400]  Как они между собой пересекаются вообще непонятно.
[02:18:56.400 --> 02:19:00.400]  Сейчас я говорю, что можно взять самое правое из пересечений.
[02:19:01.400 --> 02:19:03.400]  И тогда у нас теперь...
[02:19:04.400 --> 02:19:07.400]  Вот путь, который есть у В, мы сейчас построили.
[02:19:08.400 --> 02:19:10.400]  Он вообще ни с кем не пересекается.
[02:19:11.400 --> 02:19:12.400]  Сейчас, а что такое самое правое пересечение?
[02:19:13.400 --> 02:19:15.400]  Само ближайшее к В, в W.
[02:19:16.400 --> 02:19:17.400]  Так.
[02:19:18.400 --> 02:19:23.400]  Ну допустим, да, возьмем X игрок, да, первое ребро X игрок на пути,
[02:19:23.400 --> 02:19:25.400]  который пересекается хоть с кем-то, так.
[02:19:26.400 --> 02:19:28.400]  Так, ну окей, значит мы его, так.
[02:19:29.400 --> 02:19:35.400]  Тогда на пути с W до U теперь становится вот таким, тут путь становится таким.
[02:19:36.400 --> 02:19:37.400]  И что нам это дает?
[02:19:38.400 --> 02:19:41.400]  Ну само по себе, так.
[02:19:42.400 --> 02:19:44.400]  Ну что это нам дает?
[02:19:45.400 --> 02:19:46.400]  Так как новых ребер у нас в путях не появилось,
[02:19:47.400 --> 02:19:50.400]  то вот этот вот кусочек, видимо, как ни с кем не пересекался,
[02:19:51.400 --> 02:19:52.400]  так ни с кем и не пересекается.
[02:19:53.400 --> 02:19:54.400]  Угу.
[02:19:55.400 --> 02:19:56.400]  Так.
[02:19:57.400 --> 02:19:59.400]  Ну в принципе, да, повторяю, да.
[02:20:00.400 --> 02:20:01.400]  То есть повторяю, да, хорошо.
[02:20:02.400 --> 02:20:04.400]  Повторяю, да, повторяю эту операцию.
[02:20:05.400 --> 02:20:06.400]  Может там, сейчас.
[02:20:07.400 --> 02:20:08.400]  Ну вот, да, все, теперь у нас,
[02:20:09.400 --> 02:20:13.400]  этот вот вторая половина пути может пересекаться только сама собой,
[02:20:14.400 --> 02:20:16.400]  а для нее мы уже можем проделать такую операцию.
[02:20:17.400 --> 02:20:18.400]  Сейчас, не, погодите, погодите.
[02:20:19.400 --> 02:20:20.400]  В какой-то момент, может, до того, как мы,
[02:20:20.400 --> 02:20:21.400]  потому что мы ж могли в какой-то...
[02:20:22.400 --> 02:20:23.400]  Нет, ну тут, сейчас.
[02:20:25.400 --> 02:20:26.400]  Угу.
[02:20:29.400 --> 02:20:30.400]  Нет, погодите, ну тут, погодите,
[02:20:31.400 --> 02:20:32.400]  мы тут на картинке явно пользуемся тем,
[02:20:33.400 --> 02:20:34.400]  что у нас есть какая-то вершина В такая,
[02:20:35.400 --> 02:20:36.400]  что тут ребро было до, а тут ребро после.
[02:20:38.400 --> 02:20:40.400]  Потому что если это первое пересечение в озеро,
[02:20:41.400 --> 02:20:42.400]  что вот этот путь не пересекается ни с кем,
[02:20:43.400 --> 02:20:44.400]  а вот этот вот возникает,
[02:20:45.400 --> 02:20:46.400]  а тут возникает пересечение чем где-нибудь вот с этим,
[02:20:47.400 --> 02:20:49.400]  то, по-моему, нам может оказаться больно.
[02:20:50.400 --> 02:20:58.400]  А ладно, есть беда с тем, что нижняя половина
[02:20:59.400 --> 02:21:02.400]  равна пути может пересекаться только сама.
[02:21:03.400 --> 02:21:05.400]  Ну вот, разные проблемы есть, конечно, да.
[02:21:06.400 --> 02:21:08.400]  Да, в идеале, конечно, да.
[02:21:09.400 --> 02:21:11.400]  Оставить бы об этом, ладно, давайте до краткости.
[02:21:12.400 --> 02:21:14.400]  Ладно, на самом деле, ну тут можно бесконечно долго,
[02:21:15.400 --> 02:21:16.400]  конечно, думать, то есть в идеале, конечно, так и да,
[02:21:17.400 --> 02:21:18.400]  но не будем тратить время.
[02:21:18.400 --> 02:21:20.400]  Потому что есть, на самом деле, сильно более простая технология
[02:21:21.400 --> 02:21:22.400]  доказательства этого всего.
[02:21:23.400 --> 02:21:24.400]  Значит, звучит она так.
[02:21:25.400 --> 02:21:26.400]  Сейчас у нас просто единая такая технология.
[02:21:27.400 --> 02:21:29.400]  Значит, вот у нас есть пути УВ.
[02:21:32.400 --> 02:21:38.400]  И мы знаем, что от В есть два, то есть от В есть два
[02:21:39.400 --> 02:21:40.400]  реберно не пересекающихся пути до В.
[02:21:41.400 --> 02:21:43.400]  Так вот, идея такая, давайте пойдем по этим путям,
[02:21:43.400 --> 02:21:50.400]  от W по направлению к В до первого, до первой, даже не ребра,
[02:21:51.400 --> 02:21:54.400]  а до первой вершины, которая попала вообще в циклу В.
[02:21:56.400 --> 02:21:57.400]  Понимаете, да?
[02:21:58.400 --> 02:22:00.400]  Одно и допустим другое.
[02:22:03.400 --> 02:22:06.400]  То есть, заметим, что вот эти два пути и эти части пути
[02:22:07.400 --> 02:22:09.400]  уж точно никто ни с кем реберно не пересекается.
[02:22:09.400 --> 02:22:11.400]  Ну, вершин, насколько угодно, реберно точно нет.
[02:22:14.400 --> 02:22:17.400]  Но тогда, но тогда заметим, что два пути, в общем-то,
[02:22:18.400 --> 02:22:19.400]  налицо, вот путь и вот путь.
[02:22:20.400 --> 02:22:22.400]  Формальное доказательство, конечно, требует тут
[02:22:23.400 --> 02:22:24.400]  рассмотрения двух случаев.
[02:22:25.400 --> 02:22:27.400]  Потому что, во-первых, вы, конечно, В могло оказаться
[02:22:28.400 --> 02:22:30.400]  между этими клеммочками, тогда вот путь такой, да?
[02:22:31.400 --> 02:22:33.400]  Могло, в принципе, еще оказаться, что клеммочки
[02:22:34.400 --> 02:22:35.400]  подсоединились к одной стороне.
[02:22:36.400 --> 02:22:37.400]  Потому что, в принципе, вот такое тоже могло быть.
[02:22:37.400 --> 02:22:40.400]  Да, но по большому счету, да, нам не принципиально.
[02:22:41.400 --> 02:22:44.400]  Просто тогда вы делаете вот такой путь и вот такой путь.
[02:22:45.400 --> 02:22:46.400]  Просто через В будет проходить.
[02:22:47.400 --> 02:22:49.400]  То есть, по факту, можно сказать, что у вас был цикл,
[02:22:50.400 --> 02:22:52.400]  вы к нему подсоединились клеммочками В и получили
[02:22:53.400 --> 02:22:55.400]  реберно простой цикл через В и В.
[02:22:56.400 --> 02:22:57.400]  Да.
[02:22:58.400 --> 02:22:59.400]  Вот.
[02:23:00.400 --> 02:23:02.400]  То есть, в общем-то, это все, что вам нужно.
[02:23:03.400 --> 02:23:04.400]  Вот.
[02:23:04.400 --> 02:23:05.400]  То есть, тут пора...
[02:23:06.400 --> 02:23:08.400]  То есть, кажется, вот самое простое по формулевке доказательство
[02:23:09.400 --> 02:23:10.400]  на самом деле вот такое.
[02:23:11.400 --> 02:23:12.400]  Ну там, потому что кто-то это доказывает.
[02:23:13.400 --> 02:23:14.400]  Например, там еще по индукции бывает, что пусть расстояние
[02:23:15.400 --> 02:23:17.400]  между ними к, значит, для к-1 это верно.
[02:23:18.400 --> 02:23:19.400]  Поэтому тут рассматриваем этот цикл.
[02:23:20.400 --> 02:23:21.400]  Если это ребро попало, то хорошо.
[02:23:22.400 --> 02:23:23.400]  Если нет, то заметим, что это не мост, то там существует
[02:23:24.400 --> 02:23:25.400]  другой путь.
[02:23:26.400 --> 02:23:27.400]  Это просто вторая клеммочка, по сути.
[02:23:28.400 --> 02:23:29.400]  Вот.
[02:23:30.400 --> 02:23:31.400]  Ну и заметим, да, ну и совсем заметим, что бывает еще
[02:23:31.400 --> 02:23:32.400]  такой случай, когда эта вершина вообще одна и та же.
[02:23:33.400 --> 02:23:34.400]  Вот так еще могло быть.
[02:23:35.400 --> 02:23:36.400]  Видите, да?
[02:23:37.400 --> 02:23:39.400]  Но как бы это нас тоже устраивает, но просто вот
[02:23:40.400 --> 02:23:41.400]  оговорка, что такая картинка тоже бывает.
[02:23:42.400 --> 02:23:43.400]  Понятно, да?
[02:23:44.400 --> 02:23:45.400]  Вот.
[02:23:46.400 --> 02:23:47.400]  То есть, таким образом у нас получается, что реберная
[02:23:48.400 --> 02:23:49.400]  двухсвязанность это отношение эквивалентности.
[02:23:50.400 --> 02:23:51.400]  И, как следствие, существует понятие компонента реберной
[02:23:52.400 --> 02:23:53.400]  двухсвязанности.
[02:23:54.400 --> 02:23:55.400]  А теперь возникает вопрос.
[02:23:56.400 --> 02:23:58.400]  Как мы видим, что реберная двухсвязанность
[02:23:58.400 --> 02:23:59.400]  это отношение эквивалентности?
[02:24:00.400 --> 02:24:01.400]  А теперь возникает вопрос.
[02:24:02.400 --> 02:24:05.400]  Как же найти компоненты реберной двухсвязанности?
[02:24:06.400 --> 02:24:07.400]  Ну, по сути, да.
[02:24:08.400 --> 02:24:09.400]  Да, в данном случае все просто.
[02:24:10.400 --> 02:24:11.400]  Надо просто удалить все мосты.
[02:24:12.400 --> 02:24:13.400]  Вот.
[02:24:14.400 --> 02:24:17.400]  То есть, мистическая, ну тут по-разному, вот действительно
[02:24:18.400 --> 02:24:19.400]  как можно доказывать.
[02:24:20.400 --> 02:24:21.400]  Ну, можно доказать, что это может быть, но это
[02:24:22.400 --> 02:24:23.400]  не может быть.
[02:24:24.400 --> 02:24:25.400]  Ну, можно доказать, что это может быть, но это
[02:24:26.400 --> 02:24:27.400]  не может быть.
[02:24:28.400 --> 02:24:29.400]  Ну, можно доказать пока простой факт, хотя бы
[02:24:30.400 --> 02:24:31.400]  не знаю, насколько там поможет ли он нам полностью,
[02:24:32.400 --> 02:24:33.400]  но такое утверждение.
[02:24:34.400 --> 02:24:39.400]  Там, допустим, скажем, пусть, значит, у и в, пусть у
[02:24:40.400 --> 02:24:41.400]  в это ребро.
[02:24:42.400 --> 02:24:50.400]  Тогда, можно сказать так, у в мост, тогда и только
[02:24:50.400 --> 02:25:05.400]  тогда, когда у и в в одной компоненте реберной
[02:25:06.400 --> 02:25:07.400]  двухсвязанности.
[02:25:08.400 --> 02:25:09.400]  Вот.
[02:25:10.400 --> 02:25:13.400]  Можно, кстати, такую утверждение сравнивать.
[02:25:14.400 --> 02:25:19.400]  Ну, действительно, заметив, да, что как-то да, странно
[02:25:20.400 --> 02:25:24.400]  что-то, то есть, заметим, да, что если это мост, то
[02:25:25.400 --> 02:25:27.400]  тогда я утверждаю, что между у и в единственный,
[02:25:28.400 --> 02:25:31.400]  реберно, единственный вообще простой, то есть скажем
[02:25:32.400 --> 02:25:34.400]  так, то есть между у и в могут быть разные, конечно,
[02:25:35.400 --> 02:25:36.400]  реберно, простые пути, потому что мало ли там какие
[02:25:37.400 --> 02:25:38.400]  циклы можно описывать.
[02:25:39.400 --> 02:25:40.400]  Но я утверждаю, что все они проходят через у в.
[02:25:41.400 --> 02:25:43.400]  Ну потому что как-то, наверное, если, ну вот, ну потому
[02:25:44.400 --> 02:25:48.400]  что, раз это, потому что, как бы, если существует
[02:25:48.400 --> 02:25:58.400]  Если существует путь между УЕВ, который не проходит через это ребро, то тогда получается, что это просто не мост, потому что как минимум между УЕВ все равно пройти можно, понимаете, да?
[02:25:59.400 --> 02:26:07.400]  Тогда что это означает, да? То есть это означает, что если это мост, то тогда это заведомо...
[02:26:09.400 --> 02:26:12.400]  Да, наоборот, не в одной компании.
[02:26:12.400 --> 02:26:13.400]  Да.
[02:26:16.400 --> 02:26:18.400]  Тогда они заведомо не в одной.
[02:26:19.400 --> 02:26:27.400]  А теперь возникает вопрос. Если две вершины соединены ребром и находятся в разных компонентах реберной двусвязности, верно ли, что это мост?
[02:26:29.400 --> 02:26:32.400]  Ну конечно верно, потому что удалим это ребром.
[02:26:34.400 --> 02:26:35.400]  Да, Е, ну вот.
[02:26:35.400 --> 02:26:36.400]  Вот.
[02:26:37.400 --> 02:26:45.400]  Тогда предположим, что оказалось, что это не мост. Тогда между УЕВ существует какой-то путь. Ну вот, ура, мы нашли два пути между УЕВ, ребры не пересекающихся.
[02:26:46.400 --> 02:26:48.400]  Все, вывод, это... Ну вот.
[02:26:49.400 --> 02:26:53.400]  Так же, значит, получалось, что это не... Да.
[02:26:54.400 --> 02:26:55.400]  Это не мост. Ну в общем-то и все.
[02:26:56.400 --> 02:26:57.400]  Понятно, да?
[02:26:58.400 --> 02:26:59.400]  Вот.
[02:27:00.400 --> 02:27:03.400]  Ну вот, ну как бы, да, тут новая этика эта вопрос, насколько нам это поможет.
[02:27:04.400 --> 02:27:18.400]  Потому что, в принципе, если вот так по ребрам скакать, то кажется тогда действительно, что... То есть, идея после этого кажется очевидным, да, что если мы идем по ребру в дерево ДФС, если это как бы одна компонента реберной двусвязности, то если это не мост, значит одна компонента продолжаем.
[02:27:19.400 --> 02:27:25.400]  А если там, допустим, оказалась не одна, ну значит началась какая-то другая, значит там это мост и началась другая.
[02:27:26.400 --> 02:27:31.400]  Ну правда, конечно, конкретно такой метод, конечно, возникает такую оговорку.
[02:27:32.400 --> 02:27:45.400]  А почему не может быть так, когда вы идете ДФСом и у вас будет там, что вот это первая компонента, вот это какая-то вторая, вон там еще третья какая-то началась, вот тут еще началась какая-то четвертая, но тут неожиданно выяснилось, что эта четвертая, она на самом деле первая.
[02:27:46.400 --> 02:27:59.400]  Сейчас, так мы же определяем, в какой компоненте относится вершина, только в тот момент, когда мы закончили вне ДФС.
[02:28:00.400 --> 02:28:02.400]  Ну мы, я еще пока никакого алкоголитма не говорил.
[02:28:03.400 --> 02:28:09.400]  Ну я пока говорил просто, что предположим, что мы для каждого ребра, вот там, с небес по факсу прислали мост это или нет.
[02:28:10.400 --> 02:28:19.400]  Тогда вот я запускаю ДФС и вот иду по ребрам дерева ДФС и говорю, так, вот у меня там это типа одна компонента, ой, это другая.
[02:28:20.400 --> 02:28:21.400]  И тут говорю, это третья, это четвертая.
[02:28:22.400 --> 02:28:26.400]  А теперь возникает вопрос, а может какая-нибудь из этих последующих компонентов подает с первой, например, или со второй?
[02:28:27.400 --> 02:28:33.400]  Ну, если мы прошли по какому-то мосту, в какую-то вершину, да?
[02:28:34.400 --> 02:28:35.400]  Да.
[02:28:35.400 --> 02:28:41.400]  То исходная вершина и вот новая, они будут лежать в одной компоненте.
[02:28:44.400 --> 02:28:45.400]  Да, ну в принципе, да, в данном случае...
[02:28:46.400 --> 02:28:47.400]  То есть, собственно, то же самое рассуждение, которое мы...
[02:28:48.400 --> 02:28:52.400]  Да, ну в данном, да, в данном случае заметим, да, что действительно, если мы прошли откуда-то по мосту...
[02:28:53.400 --> 02:28:58.400]  Да, ладно, то есть, просто ладно, видимо, просто нам это в вершинной двухсвязности будет чуть сложнее, видимо, тогда.
[02:28:59.400 --> 02:29:00.400]  В вершинной двухсвязности там же это и действительно неправда.
[02:29:01.400 --> 02:29:03.400]  Но там, но там все по-другому будет.
[02:29:03.400 --> 02:29:05.400]  Ладно, так вот, значит, если мы выкинем...
[02:29:06.400 --> 02:29:15.400]  То есть, действительно, если мы прошли вниз по мосту, то при удалении его граф распадется на под дерево, дерево DFS вот на этой вершине и все остальное.
[02:29:17.400 --> 02:29:25.400]  Ну и тогда легко заметить, что никакие две вершины, значит, из этих разных частей точно в одной компоненте Рюбергной двухсвязности не лежат.
[02:29:26.400 --> 02:29:31.400]  Вот, поэтому действительно, получается, если компонента поменялась, то она поменялась навсегда и можно, в принципе...
[02:29:32.400 --> 02:29:33.400]  Вот.
[02:29:35.400 --> 02:29:41.400]  И тогда в результате, то есть, на самом деле получается примерно, то есть, на самом деле код можно написать примерно следующим образом.
[02:29:42.400 --> 02:29:46.400]  Ой, а не пришло ли на время немножко компьютера?
[02:29:48.400 --> 02:29:49.400]  Вот.
[02:29:50.400 --> 02:29:52.400]  Сейчас, я быстренько.
[02:29:52.400 --> 02:29:53.400]  Вот.
[02:29:54.400 --> 02:29:55.400]  Потому что...
[02:29:56.400 --> 02:29:57.400]  Так.
[02:29:58.400 --> 02:30:00.400]  Сейчас вы его быстренько.
[02:30:01.400 --> 02:30:06.400]  Ну, я же говорю, что у нас как бы все единым миром будет мазано, поэтому...
[02:30:07.400 --> 02:30:08.400]  Соответственно.
[02:30:09.400 --> 02:30:10.400]  Вот.
[02:30:11.400 --> 02:30:12.400]  Оп-оп-оп.
[02:30:13.400 --> 02:30:17.400]  Оп-оп-оп, оп-оп-оп, оп-оп-оп, оп-оп-оп, оп-оп-оп, оп-оп-оп.
[02:30:18.400 --> 02:30:19.400]  Блин.
[02:30:22.400 --> 02:30:23.400]  Так, значит, это вот так.
[02:30:24.400 --> 02:30:25.400]  Это вот так.
[02:30:26.400 --> 02:30:28.400]  Телевизор включаем.
[02:30:29.400 --> 02:30:30.400]  Так.
[02:30:33.400 --> 02:30:34.400]  Телевизор.
[02:30:42.400 --> 02:30:43.400]  Вот теперь хорошо.
[02:30:43.400 --> 02:30:44.400]  Так, вот.
[02:30:45.400 --> 02:30:46.400]  Так, а наша телевизор...
[02:30:46.400 --> 02:30:47.400]  Так, а камера повернута.
[02:30:48.400 --> 02:30:49.400]  Так, ой.
[02:30:50.400 --> 02:30:51.400]  Немножко магии.
[02:30:51.400 --> 02:30:52.400]  Так.
[02:30:55.400 --> 02:30:56.400]  Вот.
[02:30:57.400 --> 02:30:58.400]  Вот это.
[02:31:03.400 --> 02:31:04.400]  Так.
[02:31:04.400 --> 02:31:05.400]  Опа.
[02:31:06.400 --> 02:31:07.400]  Так.
[02:31:08.400 --> 02:31:09.400]  Вот.
[02:31:10.400 --> 02:31:11.400]  Так.
[02:31:11.400 --> 02:31:12.400]  Так.
[02:31:12.400 --> 02:31:13.400]  Опа.
[02:31:14.400 --> 02:31:15.400]  Так.
[02:31:18.400 --> 02:31:19.400]  Ого.
[02:31:21.400 --> 02:31:23.400]  Ой, красивая зелененькая винда.
[02:31:25.400 --> 02:31:26.400]  Так.
[02:31:30.400 --> 02:31:33.400]  Это новая желто-зеленая винда.
[02:31:33.400 --> 02:31:34.400]  Окей.
[02:31:35.400 --> 02:31:36.400]  Так, окей.
[02:31:36.400 --> 02:31:37.400]  Теперь у нас есть красота.
[02:31:41.400 --> 02:31:44.400]  А, точнее не в шуда.
[02:31:44.400 --> 02:31:45.400]  Правильно воткнуть, если быть точнее.
[02:31:46.400 --> 02:31:47.400]  Ну, давайте попробуем.
[02:31:48.400 --> 02:31:50.400]  Так, что у нас тут есть?
[02:31:50.400 --> 02:31:52.400]  Давайте новый файл.
[02:31:53.400 --> 02:31:55.400]  C++, nex, nex.
[02:31:56.400 --> 02:31:58.400]  Файл какой-то там.
[02:32:00.400 --> 02:32:01.400]  Ой.
[02:32:02.400 --> 02:32:03.400]  Так.
[02:32:05.400 --> 02:32:07.400]  Так, второй курс.
[02:32:07.400 --> 02:32:09.400]  Это первый курс.
[02:32:10.400 --> 02:32:12.400]  А вот у нас наша папочка.
[02:32:14.400 --> 02:32:15.400]  Чего?
[02:32:15.400 --> 02:32:17.400]  А, у нас весна 23, господи.
[02:32:20.400 --> 02:32:21.400]  Вот.
[02:32:22.400 --> 02:32:23.400]  Так.
[02:32:23.400 --> 02:32:24.400]  Ну ладно.
[02:32:25.400 --> 02:32:27.400]  Создадим новую папочку и напишем заново.
[02:32:27.400 --> 02:32:28.400]  Тут как бы в этом маге скорее.
[02:32:28.400 --> 02:32:29.400]  Так.
[02:32:31.400 --> 02:32:32.400]  Так.
[02:32:33.400 --> 02:32:34.400]  Осень 2000.
[02:32:34.400 --> 02:32:35.400]  Так.
[02:32:36.400 --> 02:32:37.400]  У нас же весна, да?
[02:32:40.400 --> 02:32:41.400]  Что?
[02:32:41.400 --> 02:32:42.400]  Нет?
[02:32:43.400 --> 02:32:44.400]  Зима.
[02:32:44.400 --> 02:32:45.400]  Зима?
[02:32:45.400 --> 02:32:46.400]  О боже.
[02:32:46.400 --> 02:32:47.400]  Блин.
[02:32:48.400 --> 02:32:49.400]  Господи, какой кошмар.
[02:32:51.400 --> 02:32:52.400]  Ну да, да, да.
[02:32:52.400 --> 02:32:53.400]  Так.
[02:32:57.400 --> 02:32:58.400]  О, Евковт.
[02:32:58.400 --> 02:32:59.400]  Да.
[02:33:00.400 --> 02:33:01.400]  Такой, да.
[02:33:01.400 --> 02:33:02.400]  Ученый Евковт.
[02:33:02.400 --> 02:33:03.400]  Да.
[02:33:03.400 --> 02:33:04.400]  Так.
[02:33:05.400 --> 02:33:06.400]  Так.
[02:33:06.400 --> 02:33:09.400]  Ну давайте, будем искать мосты.
[02:33:16.400 --> 02:33:17.400]  Значит, поехали.
[02:33:18.400 --> 02:33:20.400]  Значит, ну у нас там, допустим, есть какой-то граф.
[02:33:20.400 --> 02:33:24.400]  Так, ну напоминаю, что у нас есть их величество цвета.
[02:33:25.400 --> 02:33:26.400]  Но это там потом...
[02:33:26.400 --> 02:33:27.400]  А, впрочем, пока они нам не нужны.
[02:33:29.400 --> 02:33:30.400]  Так.
[02:33:31.400 --> 02:33:32.400]  Ну, во-первых, запускаем.
[02:33:33.400 --> 02:33:35.400]  Значит, ну у нас есть вот стандартный DFS, конечно,
[02:33:35.400 --> 02:33:36.400]  который нам говорит.
[02:33:37.400 --> 02:33:39.400]  Там user.atv равно.
[02:33:42.400 --> 02:33:45.400]  Ну ладно, давайте пока оставим DFS там color.
[02:33:54.400 --> 02:33:55.400]  DFS gray.
[02:33:59.400 --> 02:34:01.400]  Ну или просто gray, ладно.
[02:34:02.400 --> 02:34:03.400]  Так.
[02:34:03.400 --> 02:34:07.400]  Так, потом for int у gray.atv.
[02:34:08.400 --> 02:34:11.400]  Значит, if user.atv равно white.
[02:34:13.400 --> 02:34:14.400]  То, что мы делаем.
[02:34:16.400 --> 02:34:20.400]  Ну, во-первых, там запускаем DFS.atv.
[02:34:25.400 --> 02:34:30.400]  Ну вот, и говорим, что если vu мост,
[02:34:30.400 --> 02:34:36.400]  то мы что-то начинаем делать.
[02:34:38.400 --> 02:34:39.400]  Значит, а именно.
[02:34:39.400 --> 02:34:41.400]  Какая тут у нас будет технология?
[02:34:41.400 --> 02:34:42.400]  Идея будет такая.
[02:34:42.400 --> 02:34:44.400]  Мы заведем мистический stack.
[02:34:48.400 --> 02:34:52.400]  Ну вот, первое, что мы будем делать, это вершину в stack пихать.
[02:34:52.400 --> 02:35:03.400]  Значит, если здесь оказалось, что vu мост, то что нужно сделать.
[02:35:10.400 --> 02:35:12.400]  Значит, vector int comb.
[02:35:13.400 --> 02:35:14.400]  То есть я сейчас найду новую компоненту.
[02:35:22.400 --> 02:35:23.400]  Вот, поняли, да?
[02:35:43.400 --> 02:35:44.400]  Так, ладно, пишем по-русски.
[02:35:44.400 --> 02:35:45.400]  Сохранить.
[02:35:49.400 --> 02:35:56.400]  Comp как новую компоненту реберной двусвязности.
[02:36:00.400 --> 02:36:01.400]  Вот, по идее, вот можно так.
[02:36:01.400 --> 02:36:09.400]  А, ну и не забыть, конечно, в конце все-таки это непонятно зачем, но use.atv равно black.
[02:36:09.400 --> 02:36:17.400]  То есть вот получается, что компоненты на самом деле реберной двусвязности можно искать вот таким образом,
[02:36:17.400 --> 02:36:21.400]  если, конечно, кто-то с небес по факсу нам сообщает, является ли вершина vu мостом.
[02:36:23.400 --> 02:36:24.400]  Вот, понятно, да?
[02:36:28.400 --> 02:36:29.400]  Вот.
[02:36:29.400 --> 02:36:31.400]  Ну а возникает вопрос, как же это сделать?
[02:36:31.400 --> 02:36:33.400]  Ну правда, есть одна маленькая оговорщика.
[02:36:33.400 --> 02:36:35.400]  Все ли компоненты реберной двусвязности мы так найдем?
[02:36:39.400 --> 02:36:51.400]  Ну, как минимум, если граф не связан, мы и DFS будем запускать несколько раз.
[02:36:52.400 --> 02:36:55.400]  Так что без ограничений общества можем считать, что граф связан.
[02:36:57.400 --> 02:36:59.400]  Вот все ли мы так компоненты сохраним?
[02:37:01.400 --> 02:37:04.400]  Да, все, да, корневую компоненту мы так не сохраним.
[02:37:04.400 --> 02:37:10.400]  Поэтому в идеале, в идеале, на самом деле лучше было бы написать следующим образом.
[02:37:12.400 --> 02:37:13.400]  Даже не если...
[02:37:26.400 --> 02:37:28.400]  Потому что, я же говорю, у нас общая технология.
[02:37:28.400 --> 02:37:31.400]  Это то же самое, зачем так странно будет искать компоненты сильной связи,
[02:37:31.400 --> 02:37:34.400]  когда можно было вот эти вот два DFS от косарая написать.
[02:37:35.400 --> 02:37:36.400]  Вот.
[02:37:36.400 --> 02:37:38.400]  А у нас такой единый красивый сейчас технологий будет.
[02:37:39.400 --> 02:37:43.400]  Потому что, на самом деле, если vu мост, то можно его просто сохранить как мост,
[02:37:43.400 --> 02:37:44.400]  а можно на самом деле сделать вот так.
[02:37:45.400 --> 02:37:46.400]  Значит, смотрите.
[02:37:47.400 --> 02:37:50.400]  То есть наша технология будет работать скорее так.
[02:37:51.400 --> 02:37:52.400]  Может быть так.
[02:37:52.400 --> 02:37:54.400]  Обработали вершину и после этого сказали.
[02:37:55.400 --> 02:37:58.400]  Ну, можно, конечно, отдельно сохранить, достать из стека потом корневую,
[02:37:58.400 --> 02:38:00.400]  а можно сделать вот так.
[02:38:00.400 --> 02:38:01.400]  Смотрите.
[02:38:05.400 --> 02:38:06.400]  Если...
[02:38:06.400 --> 02:38:10.400]  Вот нам надо уметь четко определять, вот это будет максимально общее,
[02:38:10.400 --> 02:38:17.400]  если v корень там первая в своей компоненте,
[02:38:23.400 --> 02:38:24.400]  то вот сделать вот так.
[02:38:28.400 --> 02:38:29.400]  Вот, понятно?
[02:38:31.400 --> 02:38:32.400]  Вот.
[02:38:33.400 --> 02:38:34.400]  Да, нет, наверное.
[02:38:38.400 --> 02:38:39.400]  Не слышу.
[02:38:41.400 --> 02:38:42.400]  Да, наверное, может быть.
[02:38:43.400 --> 02:38:44.400]  Да.
[02:38:49.400 --> 02:38:50.400]  Вот.
[02:38:51.400 --> 02:38:52.400]  Вот.
[02:38:53.400 --> 02:38:56.400]  Ну, действительно, правда, то есть такая технология всегда будет работать,
[02:38:56.400 --> 02:38:58.400]  если выполнено два условия.
[02:38:58.400 --> 02:38:59.400]  Первое.
[02:39:00.400 --> 02:39:06.400]  Компонента Рюберна до связанности образует связное подвешенное дерево в дереве DFS.
[02:39:09.400 --> 02:39:17.400]  Ну, то есть заметим следующее, что внутри дерева DFS вот это вот должно образовывать
[02:39:17.400 --> 02:39:19.400]  какой-то связанный подграф.
[02:39:21.400 --> 02:39:22.400]  Понятно, да?
[02:39:22.400 --> 02:39:25.400]  И более того, этого связанного подграфа должен быть единый корень.
[02:39:28.400 --> 02:39:29.400]  Понимаете, да?
[02:39:29.400 --> 02:39:32.400]  А, ну, впрочем, ладно, у любого связанного подграфа в дереве есть корень.
[02:39:32.400 --> 02:39:33.400]  Ну, LCA.
[02:39:34.400 --> 02:39:35.400]  Вот.
[02:39:36.400 --> 02:39:38.400]  Но теперь вот возникает вопрос.
[02:39:38.400 --> 02:39:40.400]  Вот поэтому я знаете, вот к чему я это все говорил.
[02:39:40.400 --> 02:39:44.400]  Верно ли, что действительно любая компонента Рюберны до связанности
[02:39:44.400 --> 02:39:47.400]  образует внутри дерева DFS связанный подграф?
[02:39:50.400 --> 02:39:53.400]  Ну, то есть от любой вершины до другой можно по дереву пройти,
[02:39:53.400 --> 02:39:56.400]  при этом проходя только через вершины той же компоненты Рюберны до связанности.
[02:39:59.400 --> 02:40:00.400]  Так, ну-ка...
[02:40:00.400 --> 02:40:02.400]  Все мосты это...
[02:40:06.400 --> 02:40:07.400]  Ну, кто...
[02:40:07.400 --> 02:40:08.400]  Ну, вот.
[02:40:08.400 --> 02:40:09.400]  Ну, по сути, да.
[02:40:09.400 --> 02:40:10.400]  Да, можно...
[02:40:10.400 --> 02:40:11.400]  Да, ну ладно.
[02:40:11.400 --> 02:40:13.400]  Если плясать от этого, то можно сказать, да, что...
[02:40:13.400 --> 02:40:16.400]  Заметим следующее, что, как бы, если мы удалим все мосты,
[02:40:16.400 --> 02:40:19.400]  то как бы дерево распадется на такие поддеревья.
[02:40:20.400 --> 02:40:21.400]  Ну да.
[02:40:21.400 --> 02:40:23.400]  По сути, каждый из этих деревьев, как мы уже убедились,
[02:40:23.400 --> 02:40:25.400]  компоненты Рюберны до связанности, так что в принципе сработает.
[02:40:25.400 --> 02:40:29.400]  Но тогда отсюда получается, что если мы научимся про вершину говорить,
[02:40:29.400 --> 02:40:32.400]  что она первая в своей компоненте Рюберны до связанности, ну или нет...
[02:40:34.400 --> 02:40:37.400]  А, кстати, такой оговор, когда это должно быть вот так.
[02:40:38.400 --> 02:40:39.400]  Дай.
[02:40:39.400 --> 02:40:40.400]  Так, вот.
[02:40:41.400 --> 02:40:43.400]  Да, вот так должно быть.
[02:40:46.400 --> 02:40:47.400]  Вот.
[02:40:47.400 --> 02:40:49.400]  То есть сначала DFS и потом вот так.
[02:40:51.400 --> 02:40:53.400]  То получается, что можно так компоненту найти.
[02:40:55.400 --> 02:40:56.400]  Вот, понятно?
[02:40:57.400 --> 02:41:00.400]  Ну, думаю, так требуется доказывать, что если условия, которые я сказал, выполнены,
[02:41:00.400 --> 02:41:03.400]  то компоненты вот такими стеками реально найдутся.
[02:41:09.400 --> 02:41:10.400]  Да, нет, наверное.
[02:41:14.400 --> 02:41:15.400]  Так, есть кто живой вообще?
[02:41:18.400 --> 02:41:19.400]  Ну, вроде понятно, да?
[02:41:20.400 --> 02:41:21.400]  Или непонятно?
[02:41:22.400 --> 02:41:23.400]  Все понятно, ну вот, хорошо.
[02:41:25.400 --> 02:41:26.400]  Ну вот.
[02:41:26.400 --> 02:41:27.400]  И тогда получается, ну вот.
[02:41:27.400 --> 02:41:29.400]  Но остался только действительно интеллектуальный момент.
[02:41:29.400 --> 02:41:32.400]  А как же все-таки понять, является ли вершина первой в своей компоненте?
[02:41:33.400 --> 02:41:35.400]  Ну, тут два варианта, действительно.
[02:41:35.400 --> 02:41:36.400]  Либо она...
[02:41:38.400 --> 02:41:43.400]  Ну, действительно, оказывается, что либо она тогда, значит, просто корень.
[02:41:45.400 --> 02:41:50.400]  То есть либо оказывается, что она корень, либо мы в нее попали по мосту, в дереве DFS.
[02:41:52.400 --> 02:41:54.400]  Но как же нам это определить?
[02:41:54.400 --> 02:41:56.400]  Если она первая в DFS, то, конечно, легко определить.
[02:41:57.400 --> 02:41:59.400]  А как отличить мост от немоста?
[02:42:03.400 --> 02:42:06.400]  Но для этого есть тоже не менее стандартная технология.
[02:42:08.400 --> 02:42:10.400]  Так, что-то вы уж совсем зависаете.
[02:42:11.400 --> 02:42:13.400]  Или эту технологию никто не знает?
[02:42:14.400 --> 02:42:16.400]  Так, ну поднимите руки, кто умеет искать мосты.
[02:42:18.400 --> 02:42:19.400]  Ну вот.
[02:42:19.400 --> 02:42:20.400]  Ну вот, логично, да.
[02:42:21.400 --> 02:42:22.400]  Чего?
[02:42:24.400 --> 02:42:25.400]  Ну...
[02:42:26.400 --> 02:42:27.400]  Такое.
[02:42:28.400 --> 02:42:29.400]  Скорее, нет.
[02:42:30.400 --> 02:42:31.400]  Ну тогда вот скорей.
[02:42:31.400 --> 02:42:32.400]  Значит, давайте вводим.
[02:42:33.400 --> 02:42:38.400]  Ну, во-первых, для того, чтобы это было, мы тогда должны считать, конечно, в этом DFS.
[02:42:39.400 --> 02:42:41.400]  У нас вводим такое понятие таймы.
[02:42:43.400 --> 02:42:44.400]  Ну, мы обсуждали, что это такое, да?
[02:42:47.400 --> 02:42:49.400]  И, конечно же, введем понятие uptime.
[02:42:51.400 --> 02:42:52.400]  Что такое uptime?
[02:42:53.400 --> 02:42:55.400]  То есть uptime от V...
[02:43:00.400 --> 02:43:07.400]  Значит, это минимальное такое, смотрите, внимание, таймин от какой-то вершины U.
[02:43:08.400 --> 02:43:11.400]  Ну, тут по-разному можно вводить, но я введу так, смотрите.
[02:43:12.400 --> 02:43:18.400]  Минимальное таймин от U такое, что WU это обратное ребро.
[02:43:18.400 --> 02:43:19.400]  Обратное ребро.
[02:43:21.400 --> 02:43:24.400]  В общем, обратное ребро именно вот в порядке WU.
[02:43:25.400 --> 02:43:26.400]  То есть вот это вот предок.
[02:43:32.400 --> 02:43:34.400]  Хотя не сильно принципиально, в общем-то.
[02:43:35.400 --> 02:43:37.400]  Ну вот, WU значит обратное ребро.
[02:43:38.400 --> 02:43:39.400]  Важно, что это именно обратное ребро.
[02:43:40.400 --> 02:43:44.400]  Ну вот, а W потомок V.
[02:43:44.400 --> 02:43:50.400]  Вот такое формальное определение я введу.
[02:43:53.400 --> 02:43:54.400]  То есть меня интересует...
[02:43:55.400 --> 02:43:56.400]  Вы как-то не так нас ты ищете?
[02:43:59.400 --> 02:44:02.400]  Да. Или вы просто как-то не в этой технологии над этим задумывались?
[02:44:04.400 --> 02:44:06.400]  А что для вас up? Хорошо, может я просто могу...
[02:44:09.400 --> 02:44:10.400]  Ну да, видимо, да.
[02:44:11.400 --> 02:44:13.400]  Да, если да. Хотя, на самом деле, да.
[02:44:14.400 --> 02:44:17.400]  Когда-то этого не задумываешь над строгой информировкой этого всего.
[02:44:18.400 --> 02:44:19.400]  Ну это да.
[02:44:20.400 --> 02:44:21.400]  Но суть, в общем, действительно понятна.
[02:44:22.400 --> 02:44:26.400]  Потому что мы когда задумываемся, вот это у нас ребро, это мост или нет.
[02:44:27.400 --> 02:44:28.400]  Но тогда, значит, мы знаем, что у нас есть поддерево.
[02:44:29.400 --> 02:44:34.400]  Если это не мост, то тогда, значит, у нас из этого поддерева есть какой-то путь вовне.
[02:44:35.400 --> 02:44:38.400]  Но из этого поддерева мы можем выйти только...
[02:44:39.400 --> 02:44:42.400]  Ну, выйти, просто сделать первый шаг куда-то вне этого поддерева.
[02:44:42.400 --> 02:44:44.400]  Вне этого поддерева мы можем только через обратное ребро.
[02:44:45.400 --> 02:44:51.400]  Потому что мы помним, у нас в графе никаких ребер, кроме дерева DFS и обратных ребер, нет.
[02:44:53.400 --> 02:44:58.400]  То есть получается следующее, что ребро является мостом дерева DFS тогда и только тогда,
[02:44:59.400 --> 02:45:02.400]  когда из этого поддерева не существует обратного ребра, ведущего куда-то выше этой вершины.
[02:45:04.400 --> 02:45:05.400]  Понимаете, да?
[02:45:06.400 --> 02:45:07.400]  Но тогда отсюда и получается.
[02:45:07.400 --> 02:45:12.400]  То есть тогда автоматически получается такое красивое, красненькое утверждение.
[02:45:14.400 --> 02:45:16.400]  Значит, смотрим. Начинается с черного.
[02:45:17.400 --> 02:45:21.400]  Пусть УВ ребро дерева DFS.
[02:45:26.400 --> 02:45:29.400]  Ребро дерева DFS В ребенок.
[02:45:29.400 --> 02:45:30.400]  Ребенок.
[02:45:35.400 --> 02:45:37.400]  Вот. Тогда...
[02:45:38.400 --> 02:45:39.400]  Как сказать? Тогда...
[02:45:40.400 --> 02:45:46.400]  Тогда, значит, оказывается, что УВ мост тогда и только тогда,
[02:45:47.400 --> 02:45:53.400]  когда я утверждаю таймин от В больше либо равен.
[02:46:00.400 --> 02:46:02.400]  Нет, это оборот.
[02:46:03.400 --> 02:46:06.400]  Да, наоборот, меньше либо равен uptime от В.
[02:46:07.400 --> 02:46:09.400]  Наоборот, uptime от В больше либо равен таймин.
[02:46:10.400 --> 02:46:11.400]  Вот так.
[02:46:13.400 --> 02:46:17.400]  Кстати, да, по этому определению uptime, кстати, может оказаться и плюс бесконечности.
[02:46:18.400 --> 02:46:22.400]  Ну, понятно, что в реальном коде вы часто пишете просто uptime от В равно таймин от В,
[02:46:23.400 --> 02:46:24.400]  потому что вас интересует можно ли меньше.
[02:46:25.400 --> 02:46:28.400]  Но на самом деле, если вот формально писать, то можно написать плюс бесконечности.
[02:46:29.400 --> 02:46:31.400]  Да, но действительно заметим, что...
[02:46:32.400 --> 02:46:34.400]  Да, действительно заметим, что если УВ мост, то значит,
[02:46:35.400 --> 02:46:38.400]  здесь все обратные ребра, если они есть, ведут куда-то внутрь этого под дерево,
[02:46:39.400 --> 02:46:42.400]  и от таймин всех этих вершин больше либо равен, чем таймин этой.
[02:46:43.400 --> 02:46:44.400]  Поэтому получается верно.
[02:46:45.400 --> 02:46:46.400]  Вот.
[02:46:47.400 --> 02:46:50.400]  Ну и наоборот, если он не мост, значит, существует какое-то обратное ребро выше,
[02:46:51.400 --> 02:46:52.400]  и uptime вы найдете.
[02:46:53.400 --> 02:46:55.400]  Ну, пересчитать uptime получается достаточно легко.
[02:46:56.400 --> 02:46:58.400]  Но более того, на самом деле для нас ключевое будет другое.
[02:46:59.400 --> 02:47:00.400]  Вот, утверждение.
[02:47:01.400 --> 02:47:09.400]  То есть это называется В первое в своей, ну первое в смысле корень,
[02:47:10.400 --> 02:47:17.400]  в своей компоненте реберной двусвязности.
[02:47:18.400 --> 02:47:19.400]  Вот так.
[02:47:20.400 --> 02:47:28.400]  Тогда и только тогда, когда uptime от В больше либо равен таймин от В.
[02:47:30.400 --> 02:47:31.400]  Вот.
[02:47:32.400 --> 02:47:36.400]  Ну, я более это аккуратно написал, потому что сюда попадают как вершины,
[02:47:37.400 --> 02:47:41.400]  висящие на мосту, так и, собственно, первая вершина.
[02:47:42.400 --> 02:47:45.400]  Ну, самая первая вершина, из которой мы DFS запускаем,
[02:47:46.400 --> 02:47:47.400]  она же, очевидно, является первой в своей компоненте, правда?
[02:47:48.400 --> 02:47:50.400]  Поэтому вот я вот так аккуратненько и написал.
[02:47:51.400 --> 02:47:53.400]  А ее uptime равен?
[02:47:54.400 --> 02:47:58.400]  Ну, ее uptime равен, ну, как бы у нее минимальный таймин.
[02:47:59.400 --> 02:48:04.400]  Поэтому как бы uptime у нее чему-то равен, но как бы уж не меньше, чем таймин.
[02:48:05.400 --> 02:48:06.400]  Вот.
[02:48:07.400 --> 02:48:09.400]  Правда, тут, конечно, важная оговорка, когда вы считаете uptime,
[02:48:10.400 --> 02:48:12.400]  то есть важно смотреть, что это было именно обратное ребро.
[02:48:13.400 --> 02:48:14.400]  То есть когда вы просто перебираете ребра и смотрите,
[02:48:15.400 --> 02:48:18.400]  то вы не должны пройти вот по этому ребру и учесть его как обратное,
[02:48:19.400 --> 02:48:20.400]  потому что оно им не является.
[02:48:21.400 --> 02:48:22.400]  Понимаете, да?
[02:48:23.400 --> 02:48:27.400]  Ну вот, поэтому, на самом деле, для этого, значит, вам придется сделать так.
[02:48:28.400 --> 02:48:29.400]  Ну, во-первых, насчитываем таймины.
[02:48:30.400 --> 02:48:33.400]  Да, у нас есть stack, у нас есть, давайте уж полностью допишу тогда,
[02:48:34.400 --> 02:48:38.400]  vector edfs color.
[02:48:42.400 --> 02:48:44.400]  Там use it, что у нас еще есть?
[02:48:45.400 --> 02:48:50.400]  Там vector int таймин и uptime.
[02:48:53.400 --> 02:48:58.400]  Ну и, конечно, нам придется ввести вот эту техническую переменную current time.
[02:49:00.400 --> 02:49:03.400]  Ну и понятно, что первое здесь, что мы делаем, да, current,
[02:49:04.400 --> 02:49:11.400]  то есть там пишем, что, значит, time int от v равно current time плюс плюс.
[02:49:12.400 --> 02:49:13.400]  Вот.
[02:49:14.400 --> 02:49:15.400]  Но как теперь насчитывать uptime?
[02:49:16.400 --> 02:49:17.400]  Ну uptime, в общем-то, насчитывается с помощью динамики на дереве,
[02:49:18.400 --> 02:49:19.400]  ну и какой-то проверки самих ребер.
[02:49:20.400 --> 02:49:23.400]  Но для этого нам придется сделать тут, написать какой-то ID-шник.
[02:49:26.400 --> 02:49:29.400]  ID-шник, он будет, внимание, номер ребра.
[02:49:30.400 --> 02:49:31.400]  Понимаете, да?
[02:49:32.400 --> 02:49:34.400]  То есть правильнее здесь написать так.
[02:49:37.400 --> 02:49:42.400]  Значит, for, даже мы и по-другому напишем, for edge e град v,
[02:49:43.400 --> 02:49:45.400]  но это я для того, чтобы избавиться сразу от кратного ребра.
[02:49:45.400 --> 02:49:49.400]  Значит, я сразу говорю, что если ID-шник этого ребра совпадает с тем,
[02:49:50.400 --> 02:49:55.400]  по которому мы пришли, то мы просто его игнорируем.
[02:49:56.400 --> 02:49:57.400]  Понимаете, да?
[02:49:58.400 --> 02:50:02.400]  А теперь надо отличить, то есть у нас это может быть прямое ребро,
[02:50:03.400 --> 02:50:06.400]  это может быть ребро дерева DFS, а может быть обратное ребро.
[02:50:07.400 --> 02:50:08.400]  Как отличить эти три случая?
[02:50:15.400 --> 02:50:17.400]  Ну да, но на самом деле это чуть-чуть там.
[02:50:18.400 --> 02:50:19.400]  Получается, заметим, что...
[02:50:20.400 --> 02:50:23.400]  Да, ну, во-первых, давайте int u равно, конечно, e.finish.
[02:50:24.400 --> 02:50:30.400]  Если оказалось, что user tattoo равно white, то что это значит?
[02:50:33.400 --> 02:50:39.400]  То это означает, что значит e ребро дерева DFS.
[02:50:39.400 --> 02:50:44.400]  И мы запускаем DFS от u и, соответственно, ID-шника этого ребра.
[02:50:45.400 --> 02:50:48.400]  И после этого не забываем пересчитать uptime.
[02:50:49.400 --> 02:50:50.400]  А, я забыл инициализировать uptime.
[02:50:51.400 --> 02:50:54.400]  Значит, пишем uptime от v равно infinity.
[02:50:56.400 --> 02:50:58.400]  Ну, по нашему определению это пока infinity.
[02:50:59.400 --> 02:51:04.400]  Ну, а дальше пишем uptime от v равно infinity.
[02:51:04.400 --> 02:51:13.400]  Ну, а дальше пишем uptime от v, min равно uptime от u.
[02:51:14.400 --> 02:51:17.400]  О, интересно, может быть в каком-нибудь там лохматом стандарте
[02:51:18.400 --> 02:51:19.400]  будет операция min равно хоть в каком-нибудь языке.
[02:51:20.400 --> 02:51:24.400]  Вот, так, ладно, надо поправить или поняточить такое.
[02:51:25.400 --> 02:51:28.400]  Вот, значит, lz.
[02:51:28.400 --> 02:51:36.400]  Значит, если оказалось user tattoo, значит, если оказалось, что цвет серый,
[02:51:37.400 --> 02:51:43.400]  то тогда это означает, что e именно в этом направлении обратное ребро.
[02:51:45.400 --> 02:51:46.400]  И что тогда это означает?
[02:51:47.400 --> 02:51:50.400]  Ну, тогда это означает, что просто надо пересчитать uptime,
[02:51:51.400 --> 02:51:54.400]  только в min равно подсунуть уже time in.
[02:51:55.400 --> 02:51:57.400]  Ну, просто чисто по определению, понимаете, да?
[02:51:58.400 --> 02:52:03.400]  Ну, и в противном случае, ну, следующий случай,
[02:52:04.400 --> 02:52:12.400]  если ребро черное, ну уж пропишем честно, значит, тогда можно сказать,
[02:52:13.400 --> 02:52:15.400]  что e это, так сказать, прямое ребро.
[02:52:16.400 --> 02:52:21.400]  А, ну, тут вообще тогда ничего делать не надо,
[02:52:22.400 --> 02:52:23.400]  потому что прямые ребра мы игнорили.
[02:52:23.400 --> 02:52:28.400]  Ну, на самом деле мы договорились, что у нас прямых ребер нет вообще,
[02:52:29.400 --> 02:52:31.400]  но по факту мы как бы каждое обратное ребро рассмотрим и как прямое.
[02:52:32.400 --> 02:52:33.400]  Видите, да?
[02:52:34.400 --> 02:52:39.400]  Так, но если оно не белое, не серое, не черное, то что тогда?
[02:52:39.400 --> 02:52:53.400]  Ну, ладно, назовем это assert false, да.
[02:52:54.400 --> 02:52:58.400]  Хотя, ладно, более продвинутые скажут throw exception там какой-нибудь.
[02:52:58.400 --> 02:53:15.400]  Ну, потому что, смотрите, дело в том, что мы с вами договорились,
[02:53:16.400 --> 02:53:18.400]  что бывает только обратное ребро, потому что нам интересно рассматривать
[02:53:19.400 --> 02:53:20.400]  ребра не дерево DFS, только вверх.
[02:53:21.400 --> 02:53:23.400]  Но реально DFS, когда будет перебирать ребра, он каждое ребро
[02:53:24.400 --> 02:53:26.400]  рассмотрит все-таки как смотрящие вверх и как смотрящие вниз.
[02:53:26.400 --> 02:53:33.400]  Вот, поэтому я все-таки на всякий случай прописал.
[02:53:34.400 --> 02:53:36.400]  То есть для нас здесь важная теория о том, что в неориентированном графе
[02:53:37.400 --> 02:53:38.400]  нет перекрестных ребер.
[02:53:39.400 --> 02:53:40.400]  Собственно, этот assert это и символизирует.
[02:53:41.400 --> 02:53:44.400]  Так что как будет по-английски перекрестное ребро?
[02:53:45.400 --> 02:53:46.400]  Crossing edge.
[02:53:47.400 --> 02:53:49.400]  А, throw crossing edge exception, да.
[02:53:49.400 --> 02:53:54.400]  Слушайте, прям скороговорка.
[02:53:55.400 --> 02:53:57.400]  Crossing edge exception.
[02:53:58.400 --> 02:54:00.400]  Господи, crossing edge exception.
[02:54:01.400 --> 02:54:06.400]  В нашем случае тут скорее broken math exception,
[02:54:07.400 --> 02:54:11.400]  потому что мы же доказались на таких.
[02:54:12.400 --> 02:54:15.400]  Нет, понимаете, сломанная математика это как-то очень глобально.
[02:54:16.400 --> 02:54:18.400]  Знаете, это из цикла доказывается, да.
[02:54:19.400 --> 02:54:22.400]  Доказывается, это почему так жизнь сложилась или так мир устроен.
[02:54:23.400 --> 02:54:25.400]  Знаете, некоторые люди, к сожалению, вредные такие,
[02:54:26.400 --> 02:54:29.400]  очень любят такие вопросы отвечать именно таким образом.
[02:54:30.400 --> 02:54:31.400]  Ну, так жизнь сложилась.
[02:54:32.400 --> 02:54:33.400]  Какое доказательство?
[02:54:34.400 --> 02:54:35.400]  Какое доказательство?
[02:54:36.400 --> 02:54:37.400]  Это он все кроме тебя и так уже давно знает.
[02:54:38.400 --> 02:54:40.400]  То есть, знаете, в детском садике все позавтракали,
[02:54:41.400 --> 02:54:43.400]  доказали, что мы от ожидания линейно, собственно, пошли обед.
[02:54:44.400 --> 02:54:45.400]  Еще там погулять успели.
[02:54:46.400 --> 02:54:47.400]  Все кроме тебя так жили.
[02:54:47.400 --> 02:54:48.400]  Ну, ты что?
[02:54:49.400 --> 02:54:50.400]  Все бывало такое, да?
[02:54:51.400 --> 02:54:52.400]  Как это, да.
[02:54:53.400 --> 02:54:54.400]  Как говорится, да.
[02:54:55.400 --> 02:54:57.400]  Народ замечает, о чем я говорю, да.
[02:54:58.400 --> 02:54:59.400]  Как говорят некоторые армяне.
[02:55:00.400 --> 02:55:01.400]  Так.
[02:55:02.400 --> 02:55:03.400]  Ну ладно.
[02:55:04.400 --> 02:55:05.400]  Неважно.
[02:55:06.400 --> 02:55:07.400]  Вот.
[02:55:08.400 --> 02:55:11.400]  Правда, потом кто-то это говорит, а потом бабаха и в академу идет.
[02:55:12.400 --> 02:55:13.400]  Ну ладно.
[02:55:14.400 --> 02:55:15.400]  Так.
[02:55:16.400 --> 02:55:17.400]  А, нет, самое главное.
[02:55:18.400 --> 02:55:19.400]  Хорошо.
[02:55:20.400 --> 02:55:21.400]  Аптайм-то я насчитал.
[02:55:22.400 --> 02:55:23.400]  Зачем?
[02:55:24.400 --> 02:55:25.400]  Пока это сферически аптайм-ваговыми.
[02:55:26.400 --> 02:55:27.400]  Так, теперь вот как мне понять...
[02:55:28.400 --> 02:55:29.400]  А, ну да, в общем-то теперь вот про вот это как понять,
[02:55:30.400 --> 02:55:31.400]  что v первая в своей компоненте вершины для связности,
[02:55:32.400 --> 02:55:34.400]  то это эквивалентно, это эквивалентно тому,
[02:55:35.400 --> 02:55:39.400]  что f аптайм от v больше либо равно time in от v.
[02:55:40.400 --> 02:55:41.400]  А, а вот это мы вообще уберем.
[02:55:42.400 --> 02:55:43.400]  Вот.
[02:55:43.400 --> 02:55:46.400]  Ну я не буду писать, как сохранять компоненту,
[02:55:47.400 --> 02:55:49.400]  потому что там все что угодно можете сделать.
[02:55:50.400 --> 02:55:52.400]  Можете, например, там пробежаться в номерах компонент,
[02:55:53.400 --> 02:55:54.400]  перенумеровать компоненту новым номером,
[02:55:55.400 --> 02:55:57.400]  можете там вектор векторов из компонентов сделать,
[02:55:58.400 --> 02:55:59.400]  в общем, как угодно.
[02:56:00.400 --> 02:56:01.400]  Понятно, да?
[02:56:02.400 --> 02:56:03.400]  Ну в общем, тут в принципе это.
[02:56:04.400 --> 02:56:06.400]  То есть вот таким вот нехитрым образом находим мы находим мы мосты
[02:56:07.400 --> 02:56:08.400]  и точные сочленения.
[02:56:09.400 --> 02:56:11.400]  А, ну ладно, мосты мы не находим, к сожалению.
[02:56:12.400 --> 02:56:16.400]  Потому что, ну если очень хочется отметить именно мосты,
[02:56:17.400 --> 02:56:18.400]  то в том же DFS лучше это сделать так.
[02:56:19.400 --> 02:56:26.400]  Если оказалось, что, значит, аптайм от u больше либо равен аптайм от v,
[02:56:28.400 --> 02:56:33.400]  то, значит, то там пишем что-то типа сохранить,
[02:56:35.400 --> 02:56:38.400]  сохранить e как мост.
[02:56:38.400 --> 02:56:39.400]  Вот, можно еще так.
[02:56:40.400 --> 02:56:43.400]  Да, получается, ну я понимаю, что вы, наверное, пишете код чуть проще,
[02:56:44.400 --> 02:56:46.400]  потому что вам нужно либо, ну потому что вам,
[02:56:47.400 --> 02:56:50.400]  поднимите руки, кто когда-нибудь искал именно компоненты рюберной двусвязности.
[02:56:53.400 --> 02:56:55.400]  Ух ты, а для чего вам это было надо?
[02:56:56.400 --> 02:56:58.400]  Задача компонентной двусвязности.
[02:56:59.400 --> 02:57:00.400]  Так.
[02:57:01.400 --> 02:57:02.400]  Нет, я помню какая-то задача, которая ты использовал,
[02:57:03.400 --> 02:57:04.400]  наверное, не помню.
[02:57:05.400 --> 02:57:06.400]  Сэшка в серосах.
[02:57:07.400 --> 02:57:08.400]  Сэшка только не в серосах.
[02:57:09.400 --> 02:57:11.400]  Нет, там было совершенно это связано с нашей Сэшкой в серосах.
[02:57:12.400 --> 02:57:13.400]  Не надо было.
[02:57:14.400 --> 02:57:17.400]  Там было еще два региона подряд, по-моему, 16 и 17 годы,
[02:57:18.400 --> 02:57:22.400]  когда в первый год дали поезд мостов, а во второй год поезд точек сошнений.
[02:57:23.400 --> 02:57:25.400]  Значит, нам остальное было искать компоненты рюберной двусвязности.
[02:57:26.400 --> 02:57:27.400]  Прикольно.
[02:57:28.400 --> 02:57:29.400]  Да, нет, ну.
[02:57:30.400 --> 02:57:31.400]  Нет, это дэшка прошлого.
[02:57:31.400 --> 02:57:32.400]  Не последнего, а типа.
[02:57:33.400 --> 02:57:34.400]  Как вообще?
[02:57:35.400 --> 02:57:37.400]  В какой-то дэшке в серосах нам нужны были тоже компоненты рюберной двусвязности.
[02:57:38.400 --> 02:57:39.400]  А, да.
[02:57:40.400 --> 02:57:41.400]  Это была частичка.
[02:57:42.400 --> 02:57:43.400]  Дополнительно 17 баллов дали.
[02:57:44.400 --> 02:57:45.400]  Ну да, ну все-таки.
[02:57:46.400 --> 02:57:47.400]  Да, да, да.
[02:57:48.400 --> 02:57:49.400]  Ну бывает.
[02:57:50.400 --> 02:57:51.400]  Ну всякое бывает.
[02:57:52.400 --> 02:57:53.400]  Нет, если копать дальше, ладно, рюберная еще, да.
[02:57:54.400 --> 02:57:55.400]  Да, конечно, немножко более сложно.
[02:57:56.400 --> 02:57:58.400]  Можно было просто сказать, давайте удалим мосты и запустим там DFS покрасим.
[02:57:59.400 --> 02:58:00.400]  Можно было и так.
[02:58:01.400 --> 02:58:03.400]  Дополнительно DFS, которые ищут мосты вот таким простым способом.
[02:58:04.400 --> 02:58:05.400]  Вот.
[02:58:06.400 --> 02:58:07.400]  Так.
[02:58:08.400 --> 02:58:09.400]  Ну что, перед дальнейшим перерыв нужен?
[02:58:10.400 --> 02:58:11.400]  Да.
[02:58:12.400 --> 02:58:13.400]  Ну да.
[02:58:14.400 --> 02:58:15.400]  Ладно, идем дальше.
[02:58:16.400 --> 02:58:17.400]  Так, ой, не зря я это все стираю.
[02:58:18.400 --> 02:58:19.400]  А, нет, не зря.
[02:58:20.400 --> 02:58:21.400]  Сейчас, может быть, мне надо было убрать компьютер, конечно.
[02:58:22.400 --> 02:58:23.400]  Потому что сейчас мы снова займемся математикой.
[02:58:24.400 --> 02:58:25.400]  Потому что начинается уровень медиум.
[02:58:25.400 --> 02:58:26.400]  Это уровень медиума.
[02:58:27.400 --> 02:58:30.400]  Точка сочленения и компоненты вершины двусвязности.
[02:58:31.400 --> 02:58:35.400]  Ну первое определение, конечно, очевидно, да.
[02:58:36.400 --> 02:58:37.400]  А, определение.
[02:58:38.400 --> 02:58:39.400]  В, точка сочленения.
[02:58:40.400 --> 02:58:41.400]  Если что?
[02:58:42.400 --> 02:58:43.400]  Ри, да.
[02:58:44.400 --> 02:58:45.400]  Если, да.
[02:58:46.400 --> 02:58:50.400]  Если удаление ее инцидентных рейсбер.
[02:58:51.400 --> 02:58:53.400]  Удаление ее инсидентных рейсбер.
[02:58:53.400 --> 02:59:18.400]  Ребро инцидентно в вершине, если оно из нее торчит.
[02:59:23.400 --> 02:59:31.400]  Ребро инцидентно в вершине, если оно из нее торчит.
[02:59:53.400 --> 03:00:18.400]  Ребро инцидентно в вершине, если оно из нее торчит.
[03:00:23.400 --> 03:00:25.400]  Ребро инцидентно в вершине, если оно из нее торчит.
[03:00:53.400 --> 03:01:13.400]  Ребро А и Б.
[03:01:13.400 --> 03:01:40.400]  Вершинно двусвязаны, если существуют, внимание, вершинно не пересекающиеся пути,
[03:01:40.400 --> 03:01:54.400]  вообще не пересекающиеся, вершинно не пересекающиеся
[03:01:54.400 --> 03:02:05.400]  между собой пути.
[03:02:05.400 --> 03:02:19.400]  Ребро инцидентно в вершине, если существуют, внимание, вершинно не пересекающиеся пути,
[03:02:19.400 --> 03:02:33.400]  вообще не пересекающиеся пути.
[03:02:33.400 --> 03:02:53.400]  Ребро инцидентно в вершине, если существуют, внимание, вершинно не пересекающиеся пути.
[03:02:53.400 --> 03:03:00.400]  Но если написать вот так аккуратно, то да, оказывается, что любое ребро все-таки вершинно двусвязано с самим собой,
[03:03:00.400 --> 03:03:07.400]  потому что можно из вершины в себя взять пути и из вершины в себя, понимаете, да?
[03:03:07.400 --> 03:03:20.400]  Вот, а, ну, конечно же, как вы уже гадались, да, утверждение, вершинная двусвязанность на ребрах
[03:03:20.400 --> 03:03:30.400]  это отношение эквивалентности.
[03:03:30.400 --> 03:03:33.400]  Красота, красота.
[03:03:33.400 --> 03:03:34.400]  Теперь как мы это будем доказывать?
[03:03:34.400 --> 03:03:39.400]  Ну вот, благодаря замороченному определению рефлексивность доказана.
[03:03:39.400 --> 03:03:44.400]  Ну, симметричность, опять же, сама очевидна.
[03:03:44.400 --> 03:03:53.400]  А как же доказать транзитивность?
[03:03:53.400 --> 03:03:58.400]  Вот, на этот раз, да, если выбрать правильную технологию, то оно покрывает все.
[03:03:58.400 --> 03:04:02.400]  Потому что берем вот эти два ребра, находим между ними вот эти два пути.
[03:04:02.400 --> 03:04:04.400]  Берем третье ребро.
[03:04:04.400 --> 03:04:09.400]  Мы знаем, что между этими двумя ребрами есть два вершины вершинно, обратите внимание,
[03:04:09.400 --> 03:04:11.400]  на этот раз не пересекающиеся пути.
[03:04:11.400 --> 03:04:17.400]  Поэтому их соединяем, поэтому можно тоже по этим путям пойти до первой вершины,
[03:04:17.400 --> 03:04:19.400]  которая на этом цикле лежит.
[03:04:19.400 --> 03:04:22.400]  Вот так и, ну, допустим, вот так.
[03:04:22.400 --> 03:04:25.400]  Все, подсоединяемся опять к циклу клеммочками.
[03:04:25.400 --> 03:04:30.400]  То есть, заметим, что конструкция вершинно простая, никаких повторов нет,
[03:04:30.400 --> 03:04:34.400]  поэтому, в принципе, вот спокойно вот эти два пути мы можем уверенно рассмотреть.
[03:04:34.400 --> 03:04:37.400]  Ну, или если клеммочка с этой стороны, то там какие-то просто,
[03:04:37.400 --> 03:04:40.400]  один из этих путей будет содержать вот это ребро, но суть, в общем-то, одна.
[03:04:40.400 --> 03:04:42.400]  Вот, понятно?
[03:04:46.400 --> 03:04:50.400]  Ну, вот, то есть, заметим, что там могут быть всякие частные случаи,
[03:04:50.400 --> 03:04:54.400]  то есть, на самом деле, это рассуждение одинаково хорошо проходит,
[03:04:54.400 --> 03:04:56.400]  если, например, вот, бывает еще вот такой случай, например,
[03:04:56.400 --> 03:04:59.400]  когда вот третье ребро, например, вот с этим связано.
[03:04:59.400 --> 03:05:04.400]  Но это означает, что одна из клеммочек просто состоит из одной вершины, ничего страшного.
[03:05:04.400 --> 03:05:05.400]  Понимаете, да?
[03:05:05.400 --> 03:05:09.400]  Ну, вторая какая-нибудь там вот такая, уже и там не заморачиваемся.
[03:05:10.400 --> 03:05:11.400]  Вот.
[03:05:12.400 --> 03:05:19.400]  Итак, вершинная двусвязанность – это отношение эквивалентности.
[03:05:22.400 --> 03:05:23.400]  Вот.
[03:05:27.400 --> 03:05:29.400]  Ну, теперь мне интересный вопрос.
[03:05:30.400 --> 03:05:32.400]  Как найти точки сочленения?
[03:05:33.400 --> 03:05:37.400]  И как найти компоненты вершинной двусвязанности?
[03:05:40.400 --> 03:05:42.400]  Таким же ДФС, как точки.
[03:05:43.400 --> 03:05:47.400]  Ну, вот, для этого, для того, чтобы говорить о каком-то там ДФСе,
[03:05:47.400 --> 03:05:52.400]  нужно, опять же, говорить о, как доказывать какие-то теоремы.
[03:05:53.400 --> 03:05:55.400]  Ну, есть, конечно, простая теорема,
[03:05:55.400 --> 03:06:00.400]  которая быстренько сведет нас с точки сочленения к поиску компонент вершины двусвязанности.
[03:06:00.400 --> 03:06:02.400]  То есть, можно просто себе сказать утверждение.
[03:06:03.400 --> 03:06:06.400]  В – точка сочленения.
[03:06:10.400 --> 03:06:26.400]  Точка сочленения – я тогда и только тогда, когда В инцидентно ребрам хотя бы двух…
[03:06:29.400 --> 03:06:32.400]  хотя бы двух различных…
[03:06:32.400 --> 03:06:44.400]  компонент вершины двусвязанности.
[03:06:46.400 --> 03:06:48.400]  Вот такое мистическое утверждение.
[03:06:48.400 --> 03:06:50.400]  Если мы в него поверим, то как бы все.
[03:06:50.400 --> 03:06:52.400]  Ищем компонент вершины двусвязанности,
[03:06:52.400 --> 03:06:57.400]  и для каждой вершины помечаем, собственно, какие там ребра есть.
[03:06:59.400 --> 03:07:00.400]  Спрашивается.
[03:07:00.400 --> 03:07:02.400]  Но как же их доказать?
[03:07:05.400 --> 03:07:07.400]  Рассмотрим вот эти два ребра.
[03:07:09.400 --> 03:07:10.400]  Да, в одну сторону.
[03:07:10.400 --> 03:07:12.400]  Если хотя бы жила была вершина,
[03:07:12.400 --> 03:07:15.400]  у нее есть два ребра из разных компонентов вершины двусвязанности.
[03:07:15.400 --> 03:07:18.400]  Тогда я утверждаю, что вот эти две вершины,
[03:07:18.400 --> 03:07:20.400]  по удалению хотя бы этой вершины,
[03:07:20.400 --> 03:07:22.400]  окажутся в разных компонентах связанности.
[03:07:23.400 --> 03:07:24.400]  Почему?
[03:07:24.400 --> 03:07:27.400]  Да просто потому, что если ее удалить, а путь типа есть,
[03:07:27.400 --> 03:07:31.400]  то, ну, поздравляю, вот на этих ребрах найден простой цикл.
[03:07:31.400 --> 03:07:32.400]  Ура!
[03:07:32.400 --> 03:07:34.400]  Да, это в одну сторону.
[03:07:34.400 --> 03:07:35.400]  В обратную сторону также.
[03:07:35.400 --> 03:07:37.400]  Возьмем, типа, две соседние.
[03:07:37.400 --> 03:07:38.400]  Ну да.
[03:07:38.400 --> 03:07:41.400]  Да, здесь картинка может быть та же самая.
[03:07:41.400 --> 03:07:43.400]  Удалим, значит, вершинку,
[03:07:43.400 --> 03:07:45.400]  граф распался на компонент связанности.
[03:07:45.400 --> 03:07:49.400]  Но, очевидно, с какими-то из этих хотя бы двумя компонентами связанности,
[03:07:49.400 --> 03:07:51.400]  она связана ребром.
[03:07:51.400 --> 03:07:54.400]  То есть развал оказался, вот тут такая компонента, допустим.
[03:07:54.400 --> 03:07:55.400]  Тут такая.
[03:07:55.400 --> 03:07:57.400]  Может, там еще какая-то есть, я не знаю.
[03:07:57.400 --> 03:07:58.400]  Ну, вот хотя бы две есть.
[03:07:58.400 --> 03:08:00.400]  Может, там еще что-нибудь там левое.
[03:08:00.400 --> 03:08:01.400]  Вот.
[03:08:03.400 --> 03:08:05.400]  Ну, тогда я утверждаю, что вот,
[03:08:05.400 --> 03:08:07.400]  ну, я не знаю, конечно, за всю компоненту,
[03:08:07.400 --> 03:08:09.400]  но вот эти ребра точно,
[03:08:09.400 --> 03:08:13.400]  точно тогда из различных компонент вершины и двух связанностей.
[03:08:13.400 --> 03:08:15.400]  Потому что в противном случае между ними был бы путь,
[03:08:15.400 --> 03:08:17.400]  не прошадящий через эту вершину.
[03:08:17.400 --> 03:08:19.400]  Ну, вот, и тогда противоречие с тем,
[03:08:19.400 --> 03:08:21.400]  что они из разных компонент связанности.
[03:08:22.400 --> 03:08:23.400]  Вот, понятно?
[03:08:24.400 --> 03:08:25.400]  Вот.
[03:08:25.400 --> 03:08:28.400]  Так что да, это утверждение простое.
[03:08:29.400 --> 03:08:32.400]  А теперь возникает мести.
[03:08:32.400 --> 03:08:33.400]  А теперь вот самое интересное.
[03:08:33.400 --> 03:08:35.400]  А как же, что же представляете?
[03:08:35.400 --> 03:08:37.400]  Все компоненты вершины двух связанностей,
[03:08:37.400 --> 03:08:39.400]  как же их найти?
[03:08:45.400 --> 03:08:46.400]  Как же это сделать?
[03:08:49.400 --> 03:08:52.400]  Ну, вот здесь уже доказывать надо будет сильно аккуратнее,
[03:08:52.400 --> 03:08:55.400]  потому что этой красивой картинки с мостами у нас уже нет.
[03:08:56.400 --> 03:08:58.400]  Я помню, когда-то я провел эксперимент,
[03:08:58.400 --> 03:09:00.400]  я просто, честно говоря, там, просто честно,
[03:09:00.400 --> 03:09:03.400]  там прописал просто все жуткие леммы,
[03:09:03.400 --> 03:09:06.400]  которые написаны в этом месте у Тарьяна в статье 75-го года.
[03:09:07.400 --> 03:09:09.400]  Это было страшно.
[03:09:09.400 --> 03:09:10.400]  Можно у вас вопрос?
[03:09:11.400 --> 03:09:14.400]  Если мы рассмотрим граф,
[03:09:15.400 --> 03:09:18.400]  в котором заменены вершины с реврами,
[03:09:18.400 --> 03:09:20.400]  не поменены листами?
[03:09:21.400 --> 03:09:22.400]  Ну, больно, и что?
[03:09:23.400 --> 03:09:24.400]  Вот.
[03:09:24.400 --> 03:09:27.400]  Тогда мы случайно не свидевали задачу?
[03:09:31.400 --> 03:09:32.400]  Нет.
[03:09:32.400 --> 03:09:34.400]  Ну, потому что точка сочетания,
[03:09:34.400 --> 03:09:37.400]  ну, как сказать, точка сочетания превратится не в мост,
[03:09:37.400 --> 03:09:39.400]  она превратится в какой-то...
[03:09:39.400 --> 03:09:42.400]  То есть если у какой-то вершины степень 57,
[03:09:42.400 --> 03:09:44.400]  то там на ее месте образуется там, я не знаю,
[03:09:44.400 --> 03:09:46.400]  полный граф на 57 вершинах.
[03:09:47.400 --> 03:09:49.400]  Мостами там не пахнет.
[03:09:52.400 --> 03:09:53.400]  Значит, что же делать?
[03:09:54.400 --> 03:09:56.400]  Ну, теперь давайте хотя бы мысли на это, конечно,
[03:09:56.400 --> 03:09:58.400]  не совсем формально пока, но подумаем,
[03:09:58.400 --> 03:10:03.400]  как вообще должны выглядеть компоненты вершины двусвязности.
[03:10:03.400 --> 03:10:06.400]  Ну, во-первых, можно сразу заметить,
[03:10:06.400 --> 03:10:10.400]  что любые две компоненты вершины двусвязности
[03:10:11.400 --> 03:10:14.400]  пересекаются не более, чем по одной вершине, правда?
[03:10:15.400 --> 03:10:16.400]  Так, ну, во-первых,
[03:10:16.400 --> 03:10:18.400]  заметим, что компоненты вершины двусвязности
[03:10:18.400 --> 03:10:20.400]  это связное множество, правда?
[03:10:21.400 --> 03:10:24.400]  То есть если взять все ребра одной компоненты вершины двусвязности
[03:10:24.400 --> 03:10:25.400]  и инцидентные вершины,
[03:10:25.400 --> 03:10:27.400]  то получится связный подграф, правда?
[03:10:28.400 --> 03:10:29.400]  Срочно?
[03:10:29.400 --> 03:10:31.400]  Я, т.е., что-то я не знаю,
[03:10:32.400 --> 03:10:34.400]  я утверждаю, что два таких связных подграфа,
[03:10:34.400 --> 03:10:37.400]  они пересекаются между собой не более, чем по одной вершинке.
[03:10:38.400 --> 03:10:42.400]  Ну, потому что, если у вас два связных подграфа пересекаются,
[03:10:42.400 --> 03:10:44.400]  скажем, по двум вершинкам,
[03:10:45.400 --> 03:10:49.400]  то тогда у нас в одном подграфе есть путь между ними
[03:10:49.400 --> 03:10:51.400]  и в другом подграфе есть путь между ними,
[03:10:51.400 --> 03:10:54.400]  и тогда получается, что это не две разные компоненты вершины двусвязности.
[03:10:57.400 --> 03:11:00.400]  А теперь давайте мысленно можно составить такой граф,
[03:11:00.400 --> 03:11:04.400]  смотрите, можно составить граф между вершинами
[03:11:08.400 --> 03:11:11.400]  и компонентами вершины двусвязности.
[03:11:11.400 --> 03:11:13.400]  Вот представьте себе, вот есть вот это,
[03:11:13.400 --> 03:11:16.400]  а есть вот всякие вот компоненты вершины двусвязности.
[03:11:18.400 --> 03:11:20.400]  Оп, там разные.
[03:11:21.400 --> 03:11:23.400]  И между ними,
[03:11:23.400 --> 03:11:26.400]  и мы будем, давайте, между вершиной компоненты
[03:11:26.400 --> 03:11:28.400]  мы как бы нарисуем ребро,
[03:11:28.400 --> 03:11:32.400]  если эта вершина имеет к этой компоненте вершины двусвязности отношение.
[03:11:34.400 --> 03:11:38.400]  Граф может получиться, ну, более-менее произвольный.
[03:11:39.400 --> 03:11:43.400]  По модулю одного важного факта.
[03:11:44.400 --> 03:11:47.400]  Это будет дерево.
[03:11:53.400 --> 03:11:55.400]  Ну, потому что, действительно, я утверждаю,
[03:11:55.400 --> 03:12:00.400]  что не может быть вот такого экзотического зацикла быть не может.
[03:12:01.400 --> 03:12:04.400]  Потому что если у нас обнаружился вот такой вот цикл,
[03:12:04.400 --> 03:12:08.400]  то на самом деле можно убедиться, что это одна компонент вершины двусвязности.
[03:12:08.400 --> 03:12:10.400]  Понятно, да?
[03:12:12.400 --> 03:12:15.400]  То есть на самом деле вот такой вот граф, то есть он дерево.
[03:12:15.400 --> 03:12:18.400]  Ну и можно сказать, что вершина является точкой сочленения,
[03:12:18.400 --> 03:12:24.400]  если она связана ребрами с несколькими компонентами вершины двусвязности.
[03:12:24.400 --> 03:12:26.400]  Ну вот как-то так это будет.
[03:12:27.400 --> 03:12:30.400]  Там как-то вот так, может быть вот так, ну по-разному.
[03:12:30.400 --> 03:12:32.400]  Понятно?
[03:12:32.400 --> 03:12:33.400]  Вот.
[03:12:33.400 --> 03:12:35.400]  Ну ладно, правда есть оговорка, что каждый компонент...
[03:12:35.400 --> 03:12:38.400]  А, ну еще оговорка, что каждый компонент вершины двусвязности
[03:12:38.400 --> 03:12:41.400]  связан хотя бы с двумя вершинами, естественно.
[03:12:41.400 --> 03:12:44.400]  Ну потому что в ней есть хотя бы одно ребро.
[03:12:45.400 --> 03:12:46.400]  Так.
[03:12:46.400 --> 03:12:48.400]  Да, вопрос на понимание происходящего.
[03:12:48.400 --> 03:12:52.400]  Как в науке называется компонента...
[03:12:53.400 --> 03:12:54.400]  Такие как...
[03:12:55.400 --> 03:13:00.400]  Смотри, бывает так, что компонент вершины двусвязности состоит из одного ребра.
[03:13:01.400 --> 03:13:04.400]  Как в науке называется это ребро?
[03:13:08.400 --> 03:13:09.400]  Что?
[03:13:09.400 --> 03:13:10.400]  Мост.
[03:13:10.400 --> 03:13:11.400]  Совершенно верно, да.
[03:13:11.400 --> 03:13:13.400]  В науке это называется мост, да.
[03:13:15.400 --> 03:13:16.400]  Просто определение.
[03:13:16.400 --> 03:13:18.400]  Мост – это компонент вершины двусвязности.
[03:13:18.400 --> 03:13:21.400]  Это ребро, который образует компонент вершины двусвязности из себя любимой.
[03:13:21.400 --> 03:13:22.400]  Да.
[03:13:23.400 --> 03:13:24.400]  Вот.
[03:13:24.400 --> 03:13:25.400]  Можно еще таким определением пользоваться.
[03:13:26.400 --> 03:13:28.400]  Да, не надо, конечно, но можно.
[03:13:29.400 --> 03:13:30.400]  Но полезное такое свойство есть.
[03:13:31.400 --> 03:13:32.400]  Вот.
[03:13:32.400 --> 03:13:35.400]  То есть, в принципе, иногда в некоторых задачах полезно как минимум
[03:13:35.400 --> 03:13:37.400]  воображать в себе существование такого дерева.
[03:13:37.400 --> 03:13:40.400]  Может, в некоторых задачах даже полезно его даже строить.
[03:13:43.400 --> 03:13:46.400]  Ну, там есть всякие кошмерские задачи.
[03:13:48.400 --> 03:13:49.400]  Вот.
[03:13:50.400 --> 03:13:53.400]  В первую очередь, тут вопрос, как найти компонент.
[03:13:53.400 --> 03:13:54.400]  Ну, вот.
[03:13:54.400 --> 03:13:59.400]  То есть, на самом деле, в некотором смысле это образует дерево.
[03:13:59.400 --> 03:14:02.400]  То есть, по большому счету выглядит это примерно следующим образом.
[03:14:02.400 --> 03:14:09.400]  То есть, на самом деле, получается, по крайней мере, себе на уровне неформального воображения
[03:14:09.400 --> 03:14:14.400]  можно себе вообразить, что получается вот такой снеговичок.
[03:14:15.400 --> 03:14:18.400]  Ну, такой разветляющийся снеговичок, конечно.
[03:14:18.400 --> 03:14:19.400]  Ну, вот.
[03:14:22.400 --> 03:14:25.400]  То есть, да-да, тут бывают вот эти вот мосты типа.
[03:14:25.400 --> 03:14:27.400]  Ну, вот, соответственно.
[03:14:28.400 --> 03:14:33.400]  Но это пока может быть немножко на не совсем формальном уровне.
[03:14:33.400 --> 03:14:38.400]  То есть, ладно, мы-то с вами с этим работали, поэтому себе это достаточно уверенно вообразить можем.
[03:14:39.400 --> 03:14:42.400]  Но как бы надо же доказать, представьте, вы пишете статью 75-го года,
[03:14:42.400 --> 03:14:47.400]  когда вы это только что придумали, и как бы никто, кроме вас, этого вообще не знает, не понимает и вообще.
[03:14:47.400 --> 03:14:50.400]  Ну, а свойства ДФС-а пока еще глубоко никто не копал.
[03:14:51.400 --> 03:14:56.400]  То есть, как убедить людей, что действительно это все не рукомахание.
[03:14:57.400 --> 03:15:00.400]  Там не просто какой-то язык очесания и тыканье в картинке.
[03:15:00.400 --> 03:15:04.400]  И там, знаете, это древнегреческое тыканье в картинке с подписью «Смотри».
[03:15:08.400 --> 03:15:11.400]  Нет. Ух ты. В древней Японии были математики?
[03:15:12.400 --> 03:15:16.400]  Там были места, где там в добычке висели и типа…
[03:15:16.400 --> 03:15:19.400]  Не знаю про математики, но картинки рисовать умею.
[03:15:20.400 --> 03:15:21.400]  Ну, может.
[03:15:21.400 --> 03:15:24.400]  Нет, ну скажем так, я ничего не знаю про математику в древней Японии.
[03:15:24.400 --> 03:15:27.400]  Если честно, я не уверен, что мы сильно много знаем про древнюю Японию на самом деле.
[03:15:27.400 --> 03:15:29.400]  Правда, про супердревнюю.
[03:15:29.400 --> 03:15:33.400]  Потому что про математику мы знаем в древнегреческую, естественно.
[03:15:33.400 --> 03:15:38.400]  Потому что первое время там все доказательства сводились действительно к нарисованию картинки «тыканье носом смотри».
[03:15:38.400 --> 03:15:42.400]  Но потом они достать в какой-то момент все-таки пришли к тому, что это не совсем работает.
[03:15:42.400 --> 03:15:45.400]  Потому что, да, особенно в геометрии, где как бы…
[03:15:45.400 --> 03:15:50.400]  Да, ну вы уже опытные люди, вы знаете, что как бы нарисованная картинка в геометрии это еще не accepted.
[03:15:51.400 --> 03:15:55.400]  Потому что, да, VA-47 считает, что картинку можно было и по-другому нарисовать.
[03:15:58.400 --> 03:16:01.400]  Да, далеко не всегда вы там обвалились именно по точности и ПТЛ,
[03:16:01.400 --> 03:16:04.400]  а просто потому что там нарисовали более правильную картинку.
[03:16:06.400 --> 03:16:07.400]  Да, бывает такое.
[03:16:09.400 --> 03:16:14.400]  Вот, ну это была геометрия.
[03:16:14.400 --> 03:16:19.400]  Значит, а это… Ну, значит, как же тут доказывать что-то?
[03:16:20.400 --> 03:16:23.400]  Ну, правда, тут это называется что, тут из этой картинки надо вывести.
[03:16:23.400 --> 03:16:25.400]  Мы же хотим какой-то алгоритм доказать.
[03:16:25.400 --> 03:16:28.400]  Мы хотим найти компоненты вершины двусвязности.
[03:16:29.400 --> 03:16:31.400]  Но как мы их хотим найти?
[03:16:31.400 --> 03:16:34.400]  Ну, во-первых, начнем с маленького утверждения.
[03:16:34.400 --> 03:16:40.400]  Нам очень хочется сказать, что вот, что наверно, наверно, да,
[03:16:42.400 --> 03:16:46.400]  хотя бы в каждой компоненты вершины двусвязности,
[03:16:47.400 --> 03:16:51.400]  то есть если вы пересечете дерево ДФС и компоненты вершины двусвязности,
[03:16:52.400 --> 03:16:58.400]  то очень хочется сказать, что вы получите связный подграф.
[03:17:00.400 --> 03:17:01.400]  Хочется такое сказать?
[03:17:04.400 --> 03:17:07.400]  Так вот, на самом деле, мистическое утверждение…
[03:17:09.400 --> 03:17:12.400]  А давайте, вот, на этот раз, видимо, раз уж формализм, так напишу.
[03:17:13.400 --> 03:17:14.400]  Потому что жалко.
[03:17:14.400 --> 03:17:16.400]  Вот, знаете, вот, действительно, почему это уровень медиум?
[03:17:16.400 --> 03:17:19.400]  Потому что вот при мостах мы не обязаны были об этом заморачиваться.
[03:17:20.400 --> 03:17:23.400]  То есть потому что там как бы все, удали мосты и все очевидно.
[03:17:24.400 --> 03:17:27.400]  А тут вот, тут нельзя удалить точки сочленения и сказать все хорошо.
[03:17:28.400 --> 03:17:30.400]  В тот место этого приходится делать следующее.
[03:17:31.400 --> 03:17:32.400]  Значит, утверждение.
[03:17:34.400 --> 03:17:35.400]  Утверждение.
[03:17:41.400 --> 03:17:43.400]  Значит, пересечение… Ну, вот.
[03:17:45.400 --> 03:17:46.400]  Я утверждаю следующее.
[03:17:47.400 --> 03:17:48.400]  Пересечение…
[03:17:50.400 --> 03:17:51.400]  Пересечение…
[03:17:52.400 --> 03:17:53.400]  Пересечение…
[03:17:54.400 --> 03:17:55.400]  Пересечение…
[03:17:55.400 --> 03:18:13.400]  Рюбер нот, дерево ДФС и произвольные компоненты
[03:18:13.400 --> 03:18:17.400]  Вершинные двусвязности
[03:18:17.400 --> 03:18:27.400]  Это связное дерево
[03:18:27.400 --> 03:18:41.400]  Корень которого
[03:18:41.400 --> 03:18:49.400]  Корень которого имеет ровно одного ребенка
[03:18:49.400 --> 03:19:09.400]  Корень этого индуцируется деревом ДФС
[03:19:09.400 --> 03:19:25.400]  Вершинные двусвязности
[03:19:25.400 --> 03:19:41.400]  Вершинные двусвязности
[03:19:41.400 --> 03:19:51.400]  Вершинные двусвязности
[03:20:11.400 --> 03:20:21.400]  Вершинные двусвязности
[03:20:41.400 --> 03:20:51.400]  Вершинные двусвязности
[03:21:11.400 --> 03:21:21.400]  Вершинные двусвязности
[03:21:41.400 --> 03:21:51.400]  Вершинные двусвязности
[03:22:11.400 --> 03:22:21.400]  Вершинные двусвязности
[03:22:41.400 --> 03:22:51.400]  Вершинные двусвязности
[03:23:11.400 --> 03:23:21.400]  Вершинные двусвязности
[03:23:41.400 --> 03:23:51.400]  Вершинные двусвязности
[03:24:11.400 --> 03:24:21.400]  Вершинные двусвязности
[03:24:41.400 --> 03:24:51.400]  Вершинные двусвязности
[03:24:51.400 --> 03:25:01.400]  Вершинные двусвязности
[03:25:01.400 --> 03:25:11.400]  Вершинные двусвязности
[03:25:31.400 --> 03:25:41.400]  Вершинные двусвязности
[03:26:01.400 --> 03:26:11.400]  Вершинные двусвязности
[03:26:31.400 --> 03:26:41.400]  Вершинные двусвязности
[03:27:01.400 --> 03:27:11.400]  Вершинные двусвязности
[03:27:31.400 --> 03:27:41.400]  Вершинные двусвязности
[03:28:01.400 --> 03:28:11.400]  Вершинные двусвязности
[03:28:31.400 --> 03:28:41.400]  Вершины
[03:29:01.400 --> 03:29:11.400]  Вершины
[03:29:31.400 --> 03:29:41.400]  Вершины
[03:30:01.400 --> 03:30:11.400]  Вершины
[03:30:31.400 --> 03:30:41.400]  Вершины
[03:31:01.400 --> 03:31:11.400]  Вершины
[03:31:31.400 --> 03:31:41.400]  Вершины
[03:32:01.400 --> 03:32:11.400]  Вершины
[03:32:31.400 --> 03:32:41.400]  Вершины
[03:33:01.400 --> 03:33:11.400]  Вершины
[03:33:31.400 --> 03:33:41.400]  Вершины
[03:34:01.400 --> 03:34:11.400]  Вершины
[03:34:31.400 --> 03:34:41.400]  Вершины
[03:35:01.400 --> 03:35:11.400]  Вершины
[03:35:31.400 --> 03:35:41.400]  Вершины
[03:36:01.400 --> 03:36:11.400]  Вершины
[03:36:31.400 --> 03:36:41.400]  Вершины
[03:37:01.400 --> 03:37:11.400]  Вершины
[03:37:31.400 --> 03:37:41.400]  Вершины
[03:38:01.400 --> 03:38:11.400]  Вершины
[03:38:31.400 --> 03:38:41.400]  Вершины
[03:39:01.400 --> 03:39:11.400]  Вершины
[03:39:31.400 --> 03:39:41.400]  Вершины
[03:40:01.400 --> 03:40:11.400]  Вершины
[03:40:31.400 --> 03:40:41.400]  Вершины
[03:41:01.400 --> 03:41:11.400]  Вершины
[03:41:31.400 --> 03:41:41.400]  Вершины
[03:42:01.400 --> 03:42:11.400]  Вершины
[03:42:31.400 --> 03:42:41.400]  Вершины
[03:43:01.400 --> 03:43:11.400]  Вершины
[03:43:31.400 --> 03:43:41.400]  Вершины
[03:44:01.400 --> 03:44:11.400]  Вершины
[03:44:31.400 --> 03:44:41.400]  Вершины
[03:45:01.400 --> 03:45:11.400]  Вершины
[03:45:31.400 --> 03:45:41.400]  Вершины
[03:46:01.400 --> 03:46:11.400]  Вершины
[03:46:31.400 --> 03:46:41.400]  Вершины
[03:47:01.400 --> 03:47:11.400]  Вершины
[03:47:31.400 --> 03:47:41.400]  Вершины
[03:48:01.400 --> 03:48:11.400]  Вершины
[03:48:31.400 --> 03:48:41.400]  Вершины
[03:49:01.400 --> 03:49:11.400]  Вершины
[03:49:31.400 --> 03:49:41.400]  Вершины
[03:50:01.400 --> 03:50:11.400]  Вершины
[03:50:31.400 --> 03:50:41.400]  Вершины
[03:51:01.400 --> 03:51:11.400]  Вершины
[03:51:31.400 --> 03:51:41.400]  Вершины
[03:52:01.400 --> 03:52:11.400]  Вершины
[03:52:31.400 --> 03:52:41.400]  Вершины
[03:53:01.400 --> 03:53:11.400]  Вершины
[03:53:31.400 --> 03:53:41.400]  Вершины
[03:54:01.400 --> 03:54:11.400]  Вершины
[03:54:31.400 --> 03:54:41.400]  Вершины
[03:55:01.400 --> 03:55:11.400]  Вершины
[03:55:31.400 --> 03:55:41.400]  Вершины
[03:56:01.400 --> 03:56:11.400]  Вершины
[03:56:31.400 --> 03:56:41.400]  Вершины
[03:57:01.400 --> 03:57:11.400]  Вершины
[03:57:31.400 --> 03:57:41.400]  Вершины
[03:58:01.400 --> 03:58:11.400]  Вершины
[03:58:31.400 --> 03:58:41.400]  Вершины
[03:59:01.400 --> 03:59:11.400]  Вершины
