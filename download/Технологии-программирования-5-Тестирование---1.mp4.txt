[00:00.000 --> 00:04.320]  Родительский контроль.
[00:04.320 --> 00:12.640]  Так, я не знаю, давайте опять, да, приношу извинения
[00:12.640 --> 00:13.760]  за то, что мы задержались.
[00:13.760 --> 00:21.520]  Создать, сохранить.
[00:21.520 --> 00:37.040]  Так, не знаю, экран видно или нет.
[00:37.040 --> 00:38.040]  Нормально.
[00:38.040 --> 00:39.040]  Проверим.
[00:39.040 --> 00:42.920]  Не, проектор видно, нормально, что написано.
[00:42.920 --> 00:49.760]  Не, ну мы, конечно, опять можем потушить свет, и тогда
[00:49.760 --> 00:53.640]  ютуб не увидит меня, но мне-то как-то без разницы.
[00:53.640 --> 01:00.720]  Так, опять рубрика эта.
[01:00.720 --> 01:08.280]  Нет, не угадали.
[01:08.280 --> 01:11.920]  А почему, интересно, схема так работает, электрическая.
[01:11.920 --> 01:16.640]  О, нормально.
[01:16.640 --> 01:23.320]  Мне кажется, чуть-чуть темнее сделали, но при этом презентация
[01:23.320 --> 01:24.320]  стала виднее.
[01:24.320 --> 01:29.920]  Так, давайте начнем мы с вами, у нас сегодня будет
[01:29.920 --> 01:34.200]  новая тема, которая продлится, не поверите, аж три недели.
[01:34.200 --> 01:36.040]  Почему продлится три недели, потому что следующая среда
[01:36.040 --> 01:37.040]  выходной.
[01:37.040 --> 01:43.480]  Тема называется тестирование, тема достаточно важная
[01:43.480 --> 01:49.200]  с учетом даже того, что у нас с вами было на первом
[01:49.200 --> 01:52.000]  задании, то есть вам так или иначе самостоятельно
[01:52.000 --> 01:55.160]  уже необходимо тестировать тот код, который написали
[01:55.160 --> 02:00.840]  просто по той причине, что система не выдает никаких
[02:00.840 --> 02:01.840]  вердиктов.
[02:01.840 --> 02:05.680]  То есть надо запаковать файлы в архив, нужно их распаковать.
[02:05.680 --> 02:08.960]  Значит, это наша сегодняшняя тема, теперь две организационных
[02:08.960 --> 02:10.840]  вещи, которые я хотел сказать.
[02:11.200 --> 02:13.640]  Дедлайн по первому заданию перенесем на два дня, с
[02:13.640 --> 02:14.880]  пятого на седьмое марта.
[02:14.880 --> 02:20.680]  Значит, мы выкатим еще до конца недели, постараемся
[02:20.680 --> 02:21.680]  выкатить.
[02:21.680 --> 02:24.040]  Значит, второе задание, оно будет посвящено системам
[02:24.040 --> 02:25.040]  сборки проектов.
[02:25.040 --> 02:29.520]  Раз, и второе задание мы выкатим, это будет первая часть
[02:29.520 --> 02:30.520]  проекта.
[02:30.520 --> 02:33.920]  Сейчас мы одобряем всякие шаблоны проектов и, в принципе,
[02:33.920 --> 02:34.920]  можно будет их начать делать.
[02:34.920 --> 02:38.160]  Второе организационное объявление у нас будет контрольное
[02:38.160 --> 02:39.760]  все-таки промежуточное.
[02:39.760 --> 02:43.600]  Она будет предварительно пока на 5 апреля поставлена.
[02:43.600 --> 02:48.440]  Значит, что касается тем этих контрольных, это будут
[02:48.440 --> 02:54.040]  все темы, которые мы пройдем до того момента, плюс будут
[02:54.040 --> 02:56.400]  некоторые задачи на решение именно.
[02:56.400 --> 02:59.320]  То есть это немножко про тестирование, больше не
[02:59.320 --> 03:02.560]  про сегодняшнюю лекцию, а именно про следующую лекцию.
[03:02.560 --> 03:06.920]  Будут темы, посвященные тому, что надо будет нарисовать
[03:06.920 --> 03:11.960]  какую-то UML-диаграмму, и будет еще возможно что-то
[03:11.960 --> 03:14.460]  по паттернам, которые мы с вами сейчас проходим
[03:14.460 --> 03:15.460]  на семинарах.
[03:15.460 --> 03:20.320]  Значит, и еще мы определились с цепороговыми баллами.
[03:20.320 --> 03:24.520]  Значит, у нас будет 5 технических заданий, каждый из них
[03:24.520 --> 03:29.560]  будет стоить по 8 баллов, то есть те 10 баллов, которые
[03:29.560 --> 03:33.280]  вы получаете в задании, трансформируются в 8 баллов
[03:33.280 --> 03:34.280]  в итоговой оценке.
[03:35.280 --> 03:38.480]  Немножко сложная формула, но я думаю, мы ее приведем
[03:38.480 --> 03:39.480]  к общему знаменателю.
[03:39.480 --> 03:42.200]  Так, что я еще забыл сказать.
[03:42.200 --> 03:47.400]  По-моему, я все сказал по организационным вещам.
[03:47.400 --> 03:50.200]  Возможно, что если я что-то забыл, спросите меня, может
[03:50.200 --> 03:52.200]  быть.
[03:52.200 --> 03:53.200]  Контрольных будет две.
[03:53.200 --> 03:55.560]  Первая пятого и вторая ближе к концу семестра.
[03:55.560 --> 04:03.880]  Ну, давайте, может быть, попробуем сделать, но поскольку
[04:03.880 --> 04:07.360]  это первый раз контрольная, может быть, не быть, но
[04:07.360 --> 04:09.880]  какие-то примеры тестовых задач мы пришлем.
[04:09.880 --> 04:10.880]  Вот так.
[04:10.880 --> 04:14.960]  А прикол в том, что формат контроля меняется в этом
[04:14.960 --> 04:15.960]  году.
[04:15.960 --> 04:16.960]  Да.
[04:16.960 --> 04:21.160]  А, все, вспомнил, и еще раз, значит, мы тоже чуть-чуть
[04:21.160 --> 04:25.600]  усложнили систему сдачи курса, значит, сразу скажу,
[04:25.600 --> 04:29.720]  что если какой-то из порогов не проходит, то это перездача.
[04:29.720 --> 04:33.080]  Возможно, кроме контрольных.
[04:33.080 --> 04:35.840]  Почему кроме контрольных, как вы думаете?
[04:35.840 --> 04:39.000]  Да, может быть, такое, что не повезло.
[04:39.000 --> 04:41.560]  Ну, и мы в этом году снизили пороги на контрольных, а
[04:41.560 --> 04:43.960]  вот те задания, которые вы делаете в рамках семестра,
[04:43.960 --> 04:44.960]  пожалуйста, делайте.
[04:44.960 --> 04:49.520]  Ага, значит, пороги 15 баллов на тех заданиях, 10 баллов
[04:49.520 --> 04:51.080]  на проекты, 5 баллов на контрольные.
[04:51.080 --> 04:52.080]  Вот.
[04:52.080 --> 04:59.080]  То есть, еще раз.
[05:00.080 --> 05:08.280]  То есть, надо по заданиям набрать 15 из 40, 10 из 40 на
[05:08.280 --> 05:14.280]  проект и 5 из 20 – это коррель.
[05:14.280 --> 05:15.280]  Вот.
[05:15.280 --> 05:19.280]  В сумме сколько получается?
[05:19.280 --> 05:20.280]  30.
[05:20.280 --> 05:23.280]  30 из 100.
[05:23.280 --> 05:27.600]  То есть, если вы сдаете все эти пороги, вы автоматно
[05:27.600 --> 05:28.600]  получаете зачет.
[05:29.600 --> 05:30.600]  Да.
[05:33.600 --> 05:34.600]  Вот.
[05:34.600 --> 05:35.600]  Да.
[05:35.600 --> 05:37.600]  Значит, смотрите, сегодняшняя тема – это тема тестирования,
[05:37.600 --> 05:39.600]  но мы сегодня поговорим не только про тестирование,
[05:39.600 --> 05:42.600]  но и поговорим немножечко про качество ПО.
[05:42.600 --> 05:44.600]  Давайте вспомним, что у нас было в прошлый раз.
[05:55.600 --> 05:57.600]  Методология разработки.
[05:57.600 --> 05:59.600]  Есть разные методологии разработки, и мы с вами
[05:59.600 --> 06:01.600]  как раз детально с ними разобрались.
[06:01.600 --> 06:05.600]  Значит, сегодняшняя тема – это, по-моему, первая такая
[06:05.600 --> 06:08.600]  достаточно техническая тема, но сегодня мы начнем
[06:08.600 --> 06:11.600]  именно эту тему с точки зрения именно теоретического
[06:11.600 --> 06:12.600]  обоснования.
[06:12.600 --> 06:14.600]  Зачем это необходимо?
[06:14.600 --> 06:16.600]  Посмотрим, что такое пирамидотестирование.
[06:16.600 --> 06:19.600]  А в следующий раз, уже после выходных, мы с вами будем
[06:19.600 --> 06:22.600]  говорить про какие-то тонкие технические вещи, связанные
[06:22.600 --> 06:24.600]  именно с тестированием.
[06:24.600 --> 06:27.600]  Как замерять то, что наш продукт хорошо протестирован.
[06:27.600 --> 06:31.600]  Прежде чем мы с вами начнем, мы с вами поиграем в небольшую
[06:31.600 --> 06:32.600]  игру.
[06:32.600 --> 06:35.600]  Представьте себе, что у нас есть некоторая функция,
[06:35.600 --> 06:40.600]  которая принимает на вход некоторый набор чисел,
[06:40.600 --> 06:43.600]  а на выход выдает, являются ли эти числа сторонами
[06:43.600 --> 06:44.600]  треугольника.
[06:44.600 --> 06:47.600]  Наша задача состоит в том, чтобы придумать как можно
[06:47.600 --> 06:50.600]  больше выходных данных, на которых можно проверить
[06:50.600 --> 06:51.600]  результат работы функции.
[06:52.600 --> 06:54.600]  Ну, поехали.
[06:59.600 --> 07:01.600]  От минус 100 до 100.
[07:01.600 --> 07:02.600]  Ну, хорошо.
[07:02.600 --> 07:04.600]  Сколько тестов получится?
[07:09.600 --> 07:10.600]  От минус 100 до 100?
[07:10.600 --> 07:11.600]  Ну да, 8 миллионов.
[07:14.600 --> 07:18.600]  Ну, значит, смотрите, мы сразу сталкиваемся с проблемой
[07:18.600 --> 07:21.600]  того, что называется комбинаторным взрывом.
[07:21.600 --> 07:24.600]  Что количество вариантов у нас растет в достаточно
[07:24.600 --> 07:26.600]  большой прогрессии.
[07:26.600 --> 07:29.600]  И вообще, по-хорошему говоря, вот такой именно сетап
[07:29.600 --> 07:32.600]  тестов лучше не использовать, потому что иначе мы придем
[07:32.600 --> 07:34.600]  к избыточному тестированию.
[07:42.600 --> 07:45.600]  Да, ну, давайте пример.
[07:46.600 --> 07:49.600]  Нам нужен некоторый сетап примеров написать.
[07:52.600 --> 07:53.600]  Нет, конкретно.
[07:53.600 --> 07:55.600]  Нам нужен именно конкретный тест.
[07:55.600 --> 07:56.600]  Почему?
[07:56.600 --> 07:58.600]  Чтобы наш результат мог воспроизводиться.
[07:59.600 --> 08:00.600]  1, 2, 1.
[08:00.600 --> 08:01.600]  Хорошо.
[08:05.600 --> 08:06.600]  Какой ответ на эту задачу?
[08:10.600 --> 08:11.600]  Хорошо.
[08:12.600 --> 08:13.600]  Какой?
[08:14.600 --> 08:16.600]  Да, 1, 1, 1, 1.
[08:18.600 --> 08:20.600]  Это интересный тест.
[08:20.600 --> 08:22.600]  Что на него мы должны выдавать?
[08:24.600 --> 08:27.600]  Значит, смотрите, в зависимости от того, как мы реализуем
[08:27.600 --> 08:30.600]  это все, по-хорошему, он должен выдавать ошибку.
[08:30.600 --> 08:35.600]  То есть, давайте я напишу, что exception выдает.
[08:35.600 --> 08:39.600]  Значит, раз говорю, товарищам тоже некоторая техническая
[08:39.600 --> 08:42.600]  вещь, которая заточена под разные языки программирования.
[08:42.600 --> 08:44.600]  Разные стили.
[08:44.600 --> 08:50.600]  Значит, во всяких языках типа C подобных, у нас нет
[08:50.600 --> 08:52.600]  такого понятия как exception.
[08:52.600 --> 08:54.600]  Тогда используется следующая вещь.
[08:54.600 --> 08:56.600]  Код возврата ошибки.
[08:56.600 --> 08:58.600]  Оно еще обычно называется ерно.
[08:59.600 --> 09:02.600]  На курсе по косу вы будете сталкиваться с этим.
[09:02.600 --> 09:04.600]  Либо делается следующая вещь.
[09:05.600 --> 09:08.600]  Когда у нас вызывает какая-то функция, которая должна
[09:08.600 --> 09:11.600]  возвращать ошибку, пишут, обычно это будет
[09:11.600 --> 09:15.600]  что-то подобное. Ер запитает result.
[09:15.600 --> 09:18.600]  То есть, тем самым мы говорим, что мы возвращаем результат,
[09:18.600 --> 09:21.600]  но ты, пожалуйста, проверь, что у тебя находится в ошибках.
[09:22.600 --> 09:25.600]  А в высокоуровнях языках больше принято кидать exception
[09:25.600 --> 09:27.600]  в таких сценариях и его ловить.
[09:29.600 --> 09:31.600]  Давайте еще примеры.
[09:35.600 --> 09:37.600]  Так, минус два, ноль.
[09:42.600 --> 09:44.600]  Ну, три. Какой ответ?
[09:47.600 --> 09:49.600]  Ну, давайте, да.
[09:53.600 --> 09:55.600]  Ну, ответ, конечно же, нет, потому что
[09:55.600 --> 09:57.600]  сторона треугольника должна быть неотрицательна.
[10:00.600 --> 10:02.600]  Ладно, зависит от сценария.
[10:07.600 --> 10:10.600]  Да, что одно из чисел является отрицательным.
[10:10.600 --> 10:12.600]  Согласен.
[10:14.600 --> 10:16.600]  Ага.
[10:19.600 --> 10:21.600]  Да.
[10:26.600 --> 10:29.600]  Да, восемь. Да, можно.
[10:33.600 --> 10:36.600]  Да, это если есть тест даблов, да.
[10:40.600 --> 10:42.600]  Угу.
[10:43.600 --> 10:45.600]  Угу.
[10:49.600 --> 10:51.600]  Угу.
[10:53.600 --> 10:57.600]  Да, кстати, кто-то сказал, нужно еще и все перестановки проверить.
[10:58.600 --> 11:00.600]  Почему надо перестановки проверить?
[11:02.600 --> 11:05.600]  Да, у нас может быть, в принципе, код такой,
[11:05.600 --> 11:08.600]  что if a plus b больше c return true.
[11:11.600 --> 11:13.600]  Все.
[11:21.600 --> 11:23.600]  Ну, да.
[11:26.600 --> 11:28.600]  Ну, ноль семьдесят один. Хорошо.
[11:29.600 --> 11:31.600]  Да. Угу.
[11:31.600 --> 11:33.600]  Так.
[11:33.600 --> 11:36.600]  Вообще, по-хорошему, нужен тест, который выдает true?
[11:40.600 --> 11:42.600]  Ну, да, можно.
[11:42.600 --> 11:44.600]  Это граничный кейс, я согласен.
[11:44.600 --> 11:46.600]  Давайте корректный тест какой-нибудь.
[11:54.600 --> 11:56.600]  Угу.
[11:56.600 --> 11:57.600]  Да.
[11:57.600 --> 12:00.600]  Я не понимаю, почему у нас есть
[12:00.600 --> 12:02.600]  Да.
[12:02.600 --> 12:05.600]  Я не понимаю, почему ручка работает как ластик.
[12:06.600 --> 12:07.600]  Так.
[12:07.600 --> 12:10.600]  Что предлагает бесконечный минус один, бесконечный минус один, бесконечный минус один.
[12:10.600 --> 12:12.600]  Давайте я так напишу.
[12:16.600 --> 12:18.600]  Так.
[12:18.600 --> 12:23.600]  Смотрите, на самом деле, сейчас мы опираемся на то,
[12:23.600 --> 12:26.600]  по факту, как вызывается эта функция.
[12:26.600 --> 12:27.600]  Да.
[12:27.600 --> 12:29.600]  Давайте подумаем гипотетически,
[12:29.600 --> 12:32.600]  на каком языке мы с вами будем писать эту функцию.
[12:32.600 --> 12:34.600]  Да.
[12:34.600 --> 12:36.600]  Ну, на C.
[12:36.600 --> 12:39.600]  Смотрите, если мы пишем это все на C++,
[12:39.600 --> 12:43.600]  то, скорее всего, у нас вот этой ошибки может не быть,
[12:43.600 --> 12:46.600]  потому что мы передаем три числа a, b, c, d, a, b, c,
[12:46.600 --> 12:49.600]  и у нас просто ошибка компиляции возникнет на этом тесте.
[12:49.600 --> 12:51.600]  Ну, смотрите.
[12:51.600 --> 12:54.600]  А давайте предположим, что у нас будет функция вот такая вот.
[12:58.600 --> 13:01.600]  Вот такая у нас функция с вами будет.
[13:06.600 --> 13:07.600]  Что делать будем?
[13:07.600 --> 13:08.600]  Давай.
[13:08.600 --> 13:10.600]  Да, типа.
[13:10.600 --> 13:12.600]  Значит, анекдот.
[13:12.600 --> 13:15.600]  Два тестировщика заходят в бар и заказывают
[13:15.600 --> 13:18.600]  одну кружку пива, две кружки пива, три кружки пива,
[13:18.600 --> 13:21.600]  полторы кружки пива, 0,585 кружек пива,
[13:21.600 --> 13:24.600]  минус 500 кружек пива, кварте кружек пива.
[13:28.600 --> 13:30.600]  А?
[13:34.600 --> 13:36.600]  Ага.
[13:36.600 --> 13:37.600]  Вот.
[13:37.600 --> 13:39.600]  Ну, давайте еще один тест.
[13:44.600 --> 13:47.600]  И что на нем должно выдаться?
[13:50.600 --> 13:52.600]  Ну, да.
[13:52.600 --> 13:56.600]  Ну, моя цель показать приблизительно, как эти тесты выглядят.
[13:56.600 --> 13:57.600]  Так.
[13:57.600 --> 14:00.600]  Ну, на самом деле, если еще взять все перестановки,
[14:00.600 --> 14:03.600]  то какое количество сценариев у нас есть?
[14:03.600 --> 14:07.600]  Кстати, у нас еще, кажется, нету одного сценария.
[14:11.600 --> 14:12.600]  Ну, хорошо.
[14:12.600 --> 14:15.600]  Если мы в питоне работаем, то у нас не будет переполнений.
[14:15.600 --> 14:17.600]  Давайте другой еще тест.
[14:17.600 --> 14:19.600]  А?
[14:19.600 --> 14:21.600]  Да.
[14:21.600 --> 14:22.600]  Ну, да.
[14:22.600 --> 14:25.600]  Давайте его тоже сюда куда-нибудь запишу.
[14:26.600 --> 14:28.600]  Да, еперный.
[14:32.600 --> 14:34.600]  А еще один кейс.
[14:39.600 --> 14:40.600]  Не-не-не.
[14:40.600 --> 14:43.600]  Ну, два от четыре, как бы три между ними.
[14:47.600 --> 14:49.600]  Да.
[14:53.600 --> 14:55.600]  Чего выдает?
[14:55.600 --> 14:57.600]  По-хорошему фолс можно выдавать.
[14:57.600 --> 14:59.600]  И еще один кейс.
[15:02.600 --> 15:04.600]  Да...
[15:04.600 --> 15:06.600]  Ладно, да, согласен.
[15:07.600 --> 15:08.600]  Да.
[15:08.600 --> 15:10.600]  И еще нужен случай со всеми нулями.
[15:10.600 --> 15:12.600]  Почему?
[15:14.600 --> 15:15.600]  Ну, да.
[15:15.600 --> 15:17.600]  То есть, возможно, есть такая проверка,
[15:17.600 --> 15:20.600]  и кто-то, возможно, математик, может сказать,
[15:20.600 --> 15:23.600]  что равносторонний треугольник, у которого сторона стремится к нулю,
[15:23.600 --> 15:25.600]  является правильным треугольником.
[15:25.600 --> 15:28.600]  Поэтому треугольник со сторонами 0,0,0 может существовать.
[15:29.600 --> 15:32.600]  Но мы же не знаем, кто пишет код.
[15:33.600 --> 15:35.600]  Может быть, его пишет Убермегаматематика,
[15:35.600 --> 15:39.600]  которая считает, что треугольник со всеми нулями — это треугольник.
[15:40.600 --> 15:42.600]  Вот, в общем, такие тесты есть.
[15:42.600 --> 15:45.600]  И, как видно, сценариев может быть огромное количество.
[15:45.600 --> 15:48.600]  Значит, я не знаю, сколько у нас сценариев.
[15:48.600 --> 15:50.600]  Давайте посчитаем. Раз, два, три, четыре,
[15:50.600 --> 15:53.600]  пять, семь, восемь, девять, десять, одиннадцать.
[15:53.600 --> 15:56.600]  Перестановки все двенадцать.
[15:56.600 --> 15:59.600]  Возможно, что еще есть какие-то варианты.
[15:59.600 --> 16:03.600]  Но, по факту, из книжки, из которой я взял этот пример,
[16:03.600 --> 16:05.600]  в нем было четырнадцать тестовых вариантов,
[16:05.600 --> 16:07.600]  четырнадцать вариантов тестов.
[16:07.600 --> 16:09.600]  А?
[16:10.600 --> 16:11.600]  Ну, да.
[16:11.600 --> 16:14.600]  На самом деле, вот еще тест с равенством есть.
[16:14.600 --> 16:16.600]  Вот тут вот значений.
[16:16.600 --> 16:19.600]  Да, там типа два, три, пять треугольник мы опустили.
[16:20.600 --> 16:22.600]  Ну, вот.
[16:23.600 --> 16:25.600]  Ну, да, ладно, согласен.
[16:25.600 --> 16:27.600]  Надо посмотреть, честно, результаты.
[16:27.600 --> 16:29.600]  Ну, в общем, двенадцать с четырнадцать — это очень даже хорошо.
[16:29.600 --> 16:34.600]  Почему? Потому что, если проводить этот тест в среднем по больнице,
[16:34.600 --> 16:38.600]  среди команды разработки, то они покрывают только половину случаев.
[16:38.600 --> 16:40.600]  То есть не более семи вариантов выделяют.
[16:40.600 --> 16:43.600]  Мы с вами покрыли четырнадцать вариантов.
[16:43.600 --> 16:47.600]  Вот. И вот как раз вот этой книжке можно прочитать этот тест.
[16:47.600 --> 16:50.600]  Значит, книжка называется MyAirsoft,
[16:50.600 --> 16:53.600]  Глент-Портмайер, Art of Software Testing.
[16:53.600 --> 16:55.600]  Это четвертое издание.
[16:55.600 --> 16:57.600]  Оно вышло, по-моему, в 2004 году.
[16:57.600 --> 17:00.600]  Как вы думаете, в каком году первое издание вышло?
[17:02.600 --> 17:04.600]  Еще раньше.
[17:06.600 --> 17:09.600]  Ну, в 79-м, по-моему, если не ошибаюсь.
[17:09.600 --> 17:11.600]  Значит, классическая книжка.
[17:11.600 --> 17:14.600]  Она у меня из дома, она где-то двести страниц занимает.
[17:14.600 --> 17:18.600]  Она очень тонкая, но там есть особенности современного тестирования.
[17:18.600 --> 17:22.600]  Там именно такая хорошая теоретическая книжка по основам тестирования.
[17:22.600 --> 17:24.600]  Значит, вторая книжка.
[17:24.600 --> 17:26.600]  Это такая более практическая книжка.
[17:26.600 --> 17:31.600]  Она заточена по то, чтобы сначала писать тест, а потом писать код.
[17:31.600 --> 17:34.600]  Эта методология называется Test Driven Development.
[17:34.600 --> 17:40.600]  Мы с вами, наверное, попробуем поговорить про нее на следующей лекции.
[17:40.600 --> 17:43.600]  Возможно, кто-то и на семинарах ее посмотрят.
[17:43.600 --> 17:45.600]  Просто это интересно получается.
[17:45.600 --> 17:48.600]  Идея такая, что мы сначала пишем тест, а потом пишем код.
[17:50.600 --> 17:51.600]  И это хорошая вещь.
[17:51.600 --> 17:54.600]  Если вы, допустим, хотите стать внезапно веб-разработчиком,
[17:54.600 --> 17:58.600]  то на самом деле можно писать код вот таким вот способом.
[17:58.600 --> 18:03.600]  На Python здесь используется как раз фреймворк Django для написания сайта.
[18:03.600 --> 18:06.600]  И третья книжка.
[18:06.600 --> 18:11.600]  Это еще одна книжка по TDD, но она уже немножко про другую методологию.
[18:11.600 --> 18:14.600]  Давайте в прошлый раз мы с вами говорили про экстремальное программирование.
[18:16.600 --> 18:20.600]  Где мы предполагали, что сидит либо два человека за компьютером,
[18:20.600 --> 18:25.600]  либо один человек сидит за компьютером, а другой человек – это заказчик, который мы командуем.
[18:25.600 --> 18:29.600]  В данном случае еще могут подкидываться тестировщики.
[18:29.600 --> 18:35.600]  Значит, сразу скажу, что мы сегодня будем смотреть на тестирование немножко с другой стороны.
[18:35.600 --> 18:39.600]  Мы больше сегодня будем говорить про автоматическое тестирование.
[18:39.600 --> 18:43.600]  То есть тестирование, которое запускается посредством кода.
[18:43.600 --> 18:46.600]  Но есть еще и ручное тестирование, и оно даже превалирует.
[18:46.600 --> 18:50.600]  Это тот случай, когда мы с вами не пишем код,
[18:50.600 --> 18:53.600]  а мы просто, возможно, визуально отсматриваем результаты
[18:53.600 --> 18:57.600]  или что-то вбиваем в какой-нибудь веб-браузер.
[18:57.600 --> 19:01.600]  Пример теста. Мы хотим проверить, пишет ли ручка.
[19:03.600 --> 19:05.600]  Наводим на доску, начинаем писать.
[19:05.600 --> 19:09.600]  Ручка не пишет, исполняется эластик. Тест провален.
[19:12.600 --> 19:16.600]  Ну да, тогда нам надо выяснить причину, кто проваливает тест.
[19:16.600 --> 19:20.600]  Ручка или карандаш.
[19:20.600 --> 19:26.600]  И тогда мы должны закопаться глубже и, возможно, написать отдельный подтест для ручки и отдельный подтест для карандаша.
[19:28.600 --> 19:31.600]  Для того, чтобы выяснить, у кого проблема.
[19:31.600 --> 19:38.600]  Итак, давайте я расскажу, что на самом деле, что касается тестирования,
[19:38.600 --> 19:40.600]  есть международный стандарт тестирования.
[19:40.600 --> 19:43.600]  Он называется ASTQB.
[19:43.600 --> 19:47.600]  И вообще, если тут есть интернет, по-моему, здесь можно зайти на ссылку
[19:47.600 --> 19:52.600]  и посмотреть, в общем, какие здесь уровни есть.
[19:52.600 --> 20:00.600]  Значит, смотрите. Всего в этом стандарте тестирования разделяются три подсоставных части.
[20:00.600 --> 20:03.600]  Это ядровая часть тестирования.
[20:03.600 --> 20:10.600]  Справа это тестирование, которое заточено под именно определенных специалистов.
[20:10.600 --> 20:14.600]  То есть, если здесь внимательно посмотреть, не видно, да?
[20:14.600 --> 20:18.600]  Я просто не знаю, как это визуально выглядит.
[20:18.600 --> 20:21.600]  Ну и с чем можно презентацию открыть?
[20:21.600 --> 20:24.600]  Значит, смотрите, какие составные части есть здесь.
[20:24.600 --> 20:26.600]  Это приемочное тестирование.
[20:26.600 --> 20:30.600]  Это, по-моему, скриншот с 17-го или 19-го года.
[20:30.600 --> 20:33.600]  Сейчас все, что написано in development, оно уже разработано.
[20:33.600 --> 20:37.600]  Дальше есть тестирование мобильных приложений.
[20:37.600 --> 20:43.600]  Есть тестирование используемости юзабилити тестинг.
[20:43.600 --> 20:47.600]  Дальше, на более продвинутом уровне, можно даже тестировать безопасность.
[20:47.600 --> 20:51.600]  А там еще есть еще один уровень.
[20:51.600 --> 20:54.600]  Это по факту инженер, который автоматизирует тесты.
[20:54.600 --> 20:58.600]  То, что мы с вами подразумеваем под профессией тестировщика,
[20:58.600 --> 21:05.600]  которые именно связаны с разработкой, то это как раз вот про этот уровень.
[21:05.600 --> 21:09.600]  Значит, с другой стороны, мы можем с вами пойти в гибкие методологии разработки
[21:09.600 --> 21:14.600]  и понять, как тестировать продукт в рамках как раз гибких методологий.
[21:14.600 --> 21:17.600]  Почему это важно? Давайте подумаем.
[21:17.600 --> 21:23.600]  Почему тестирование в гибкой методологии может отличаться от тестирования в классической разработке?
[21:23.600 --> 21:26.600]  В других методологиях?
[21:30.600 --> 21:35.600]  Да, нам нужно реально очень часто общаться с разработчиком.
[21:35.600 --> 21:44.600]  И есть юанцы, которые связаны именно с тем, что оба у нас выкатилась новая фишка,
[21:44.600 --> 21:46.600]  и нам быстро надо ее протестировать.
[21:46.600 --> 21:48.600]  И каким образом протестировать?
[21:48.600 --> 21:53.600]  Количество изменений, которое у нас появляется в один день, оно очень огромное.
[21:55.600 --> 21:58.600]  Ну или можно пойти в управление тестами.
[21:58.600 --> 22:06.600]  И тогда у нас появляются менеджер тестов, управление тестами, анализ тестов, тест аналитик.
[22:06.600 --> 22:10.600]  И дальше, на более высоком уровне, это управление процессом тестирования.
[22:10.600 --> 22:14.600]  И это уже по факту глава команды QA.
[22:14.600 --> 22:18.600]  QA расшифровывается как quality assurance. Уверенность в качестве.
[22:18.600 --> 22:22.600]  Так, давайте вопрос по этой картинке.
[22:22.600 --> 22:25.600]  Мы с вами сегодня посмотрим, начнем смотреть нижний самый уровень.
[22:25.600 --> 22:27.600]  Это Certify Tester.
[22:27.600 --> 22:31.600]  И если вы зайдете на сайт и скачаете Syllabus этой программы,
[22:31.600 --> 22:35.600]  если вы мне напомните в чате, я вам скину Syllabus.
[22:35.600 --> 22:40.600]  Это, короче, документ такой на 100 страниц PDF-ка, в котором есть вот это все.
[22:40.600 --> 22:44.600]  И вот мы с вами, кажется, что мы пришли на курс технологии программирования.
[22:44.600 --> 22:46.600]  Да, мы должны писать код.
[22:46.600 --> 22:54.600]  И мы говорим, что давайте мы с вами будем именно технически заряженными, уметь писать, автоматизировать все вещи.
[22:54.600 --> 22:58.600]  Но оказывается, чтобы сдать на этот уровень, не обязательно уметь писать код.
[23:00.600 --> 23:02.600]  Вот, это надо понимать.
[23:02.600 --> 23:07.600]  Поэтому сегодня мы смотрим на тестирование немножко с другой стороны,
[23:07.600 --> 23:09.600]  по сравнению с разработкой ПО.
[23:10.600 --> 23:13.600]  Так, есть вопросы по слайду?
[23:16.600 --> 23:18.600]  Движемся дальше.
[23:18.600 --> 23:27.600]  Значит, смотрите, дальше в каждом из уровней этого стандарта есть подсоставные части.
[23:27.600 --> 23:32.600]  И вот из каких составных частей состоит Foundation Level, про который мы с вами говорим.
[23:32.600 --> 23:35.600]  Начнем рассматриваться тема, как основы тестирования.
[23:35.600 --> 23:37.600]  Что же такое тестирование?
[23:37.600 --> 23:42.600]  А второе, это тестирование, как оно проходит через цикл разработки.
[23:42.600 --> 23:48.600]  И здесь важная составная часть, какие типы тестов бывают и какие уровни тестирования бывают.
[23:48.600 --> 23:54.600]  А Software Development Life Cycle Models, то есть методология разработки, мы с вами рассмотрели в прошлый раз.
[23:54.600 --> 23:56.600]  Поэтому мы с вами про них говорить не будем.
[23:56.600 --> 24:00.600]  Дальше, следующая составная часть, это статическое тестирование.
[24:00.600 --> 24:02.600]  Это очень важно.
[24:02.600 --> 24:07.600]  И на самом деле, забегая немножко наперед, ваш код проходит статическое тестирование.
[24:09.600 --> 24:11.600]  Когда вы сдаете технические задания.
[24:11.600 --> 24:13.600]  В какой момент оно проходит?
[24:18.600 --> 24:23.600]  Статическое тестирование – это тестирование, которое не запускает код.
[24:23.600 --> 24:26.600]  Код StyleChecker к ним тоже относится.
[24:26.600 --> 24:29.600]  И процесс Review – это процесс статического тестирования кода.
[24:33.600 --> 24:35.600]  Не, наоборот.
[24:35.600 --> 24:37.600]  Это то, что проверяет человек.
[24:37.600 --> 24:39.600]  То есть смотрит код, говорит, стабуляция не та.
[24:41.600 --> 24:43.600]  Вот это вот все.
[24:43.600 --> 24:45.600]  Там типа куча переменных на одной строке.
[24:45.600 --> 24:48.600]  Пайп на 500 символов и так далее.
[24:49.600 --> 24:51.600]  И дальше есть код Stack.
[24:51.600 --> 24:55.600]  И дальше есть некоторые методики тестирования.
[24:55.600 --> 25:01.600]  Так называемый метод черного ящика, метод белого ящика и метод, основанный на опыте.
[25:03.600 --> 25:08.600]  Может быть кому-нибудь интересно, кто-нибудь здесь учится на управленцев?
[25:12.600 --> 25:14.600]  Нет, нет.
[25:14.600 --> 25:21.600]  Но возможно, что если кто учится на управленцев, тому будет полезно как раз изучить основы управления тестами.
[25:22.600 --> 25:28.600]  Ну и дальше есть набор инструментов, которые поддерживают инфраструктуру тестирования.
[25:28.600 --> 25:30.600]  То есть каким образом их нужно использовать.
[25:30.600 --> 25:34.600]  Вот такая вот у нас с вами категоризация.
[25:34.600 --> 25:40.600]  Мы с вами посмотрим первые четыре пункта точно из этой все части.
[25:40.600 --> 25:47.600]  И заодно еще на лекциях посмотрим некоторые методики, а на семинарах попробуем их в автоматическом режиме применения.
[25:49.600 --> 25:53.600]  Это, наверное, одна из первых лекций, которая прямо будет в темах семинара.
[25:55.600 --> 25:57.600]  Так, ну смотрите, давайте...
[25:57.600 --> 25:59.600]  Так, извините.
[25:59.600 --> 26:01.600]  Вопросы.
[26:03.600 --> 26:05.600]  Поехали дальше?
[26:07.600 --> 26:09.600]  Да, вопрос.
[26:11.600 --> 26:15.600]  В чем заключается задача тестирования?
[26:15.600 --> 26:23.600]  Значит, задача тестирования необходима для того, чтобы оценить артефакты тестирования.
[26:23.600 --> 26:24.600]  Что такое артефакты?
[26:24.600 --> 26:28.600]  Артефакты это по факту выходной продукт того или иного действия.
[26:28.600 --> 26:31.600]  Значит, у нас здесь могут быть разные вещи.
[26:31.600 --> 26:33.600]  У нас может быть код.
[26:33.600 --> 26:36.600]  То есть мы пытаемся оценить код.
[26:36.600 --> 26:39.600]  Более того, у нас с вами может быть дизайн.
[26:39.600 --> 26:42.600]  Это дизайн графический там какой-то странички.
[26:42.600 --> 26:45.600]  Либо дизайн с точки зрения архитектуры.
[26:46.600 --> 26:51.600]  Дальше мы можем оценивать те требования, которые нам предоставил заказчик.
[26:51.600 --> 26:56.600]  То есть есть функциональные требования, то, что система должна делать с точки зрения функции.
[26:56.600 --> 27:00.600]  То есть при нажатии на кнопку у нас должна вываливаться вот такая вот плашка.
[27:00.600 --> 27:02.600]  Или совершаться заказ.
[27:02.600 --> 27:05.600]  Да, но при этом бывают не функциональные требования.
[27:05.600 --> 27:09.600]  Допустим, к ним относятся требования о локализации продукта.
[27:09.600 --> 27:12.600]  Да, локализация это перевод на другой язык.
[27:12.600 --> 27:20.600]  То есть если вы, допустим, на нашем сайте попробуете нажать в правом верхнем углу язык выбрать,
[27:20.600 --> 27:23.600]  то вы увидите, что интерфейс переключится на английский язык.
[27:23.600 --> 27:28.600]  Правда, не во всех местах тестов на локализацию на сайте не написаны.
[27:30.600 --> 27:34.600]  Да, но на самом деле есть две плашки условия на русском и условия на английском.
[27:34.600 --> 27:37.600]  Я просто взял их, скопировал и не парился.
[27:37.600 --> 27:41.600]  По факту мне надо сесть в какой-нибудь момент времени и перевести задание на английский язык.
[27:42.600 --> 27:49.600]  Вот, а user story это, давайте так скажу, это термин больше из скрама.
[27:50.600 --> 27:52.600]  Просто эта лекция делалась после скрама.
[27:52.600 --> 27:54.600]  Это задача, которую мы решаем на текущий момент.
[27:54.600 --> 28:01.600]  Которая вносит некоторое новое value в наш продукт.
[28:01.600 --> 28:07.600]  Допустим, создать такую-то кнопку, реализовать такой-то функционал, внедрить то-то.
[28:08.600 --> 28:14.600]  А, то есть это какой-то новый функционал и по факту мы при помощи него можем оценить, сделана задача или нет.
[28:15.600 --> 28:20.600]  Более того, мы верифицируем то, что требования некоторые выполнены.
[28:20.600 --> 28:22.600]  Значит, смотрите, тонкий момент.
[28:22.600 --> 28:24.600]  Что такое верификация?
[28:24.600 --> 28:25.600]  Верификация.
[28:25.600 --> 28:32.600]  Верификация – это процесс, который показывает, что наш продукт работает грамотно.
[28:33.600 --> 28:37.600]  Не то, что он делает необходимые вещи, а то, что он делает грамотно.
[28:38.600 --> 28:42.600]  Давайте пример поясню анекдотом.
[28:43.600 --> 28:48.600]  Значит, барышня с некоторым цветом волос начинает печатать текст.
[28:49.600 --> 28:53.600]  Говорят, я печатаю со скоростью 600 знаков в минуту.
[28:54.600 --> 28:56.600]  Я спрашиваю, как так?
[28:56.600 --> 28:58.600]  Говорят, ну я просто сижу, печатаю.
[28:58.600 --> 29:00.600]  И что, отличие получается?
[29:00.600 --> 29:02.600]  Ну да, получается, только непонятно, что написано.
[29:04.600 --> 29:05.600]  Вот.
[29:05.600 --> 29:07.600]  Вот это процесс валидации.
[29:07.600 --> 29:12.600]  То есть процесс валидации того, что барышня пишет 600 знаков в минуту.
[29:13.600 --> 29:15.600]  Нет, это валидация.
[29:15.600 --> 29:19.600]  Барышня, ты же можешь написать текст со скоростью 600 знаков в минуту?
[29:20.600 --> 29:23.600]  Валидация – это мы проверяем, что мы делаем вроде бы нормальные вещи.
[29:24.600 --> 29:28.600]  А верификация – это то, что мы написали не фигню, а написали нормальный текст.
[29:31.600 --> 29:34.600]  Не-не-не, это две просто разных ветви.
[29:35.600 --> 29:37.600]  И по факту, давайте тоже вперед забегу.
[29:37.600 --> 29:43.600]  На статическом тестировании мы верифицируем наш продукт, наш код или так далее.
[29:43.600 --> 29:47.600]  А на стадии валидации мы проверяем, что когда мы его запускаем, он работает.
[29:47.600 --> 29:48.600]  Ну, вроде так это.
[29:48.600 --> 29:50.600]  Что-то тест проходит.
[29:51.600 --> 29:53.600]  Типа, как говорится, пивком покатит.
[29:55.600 --> 29:57.600]  А, тонкий процесс.
[29:58.600 --> 30:00.600]  На этом нужно замечать.
[30:00.600 --> 30:02.600]  Ну, мы еще поговорим про верификацию.
[30:02.600 --> 30:07.600]  Ну, следующая история про задачи тестирования – это избегание дефектов.
[30:08.600 --> 30:12.600]  То есть нам нужно избежать того, что мы в каком-то месте посадим баг.
[30:15.600 --> 30:19.600]  Ну, если вдруг мы не нашли дефекты, то нам что надо сделать?
[30:22.600 --> 30:23.600]  А?
[30:23.600 --> 30:24.600]  Ну, да.
[30:24.600 --> 30:27.600]  То есть если мы не предотвратили, нам надо быстро иметь из Кати.
[30:28.600 --> 30:34.600]  То есть нам передал код команды разработки, и нам нужно найти эти збой и эти дефекты.
[30:34.600 --> 30:35.600]  Вот.
[30:35.600 --> 30:36.600]  Значит...
[30:38.600 --> 30:39.600]  А?
[30:39.600 --> 30:41.600]  Ну, исправить потом, конечно же.
[30:43.600 --> 30:47.600]  Да, ну, естественно, это передается все команде разработки, и команда разработки это фиксит.
[30:49.600 --> 30:50.600]  А?
[30:50.600 --> 30:51.600]  Тонкий момент.
[30:51.600 --> 30:53.600]  Чем отличается збоя дефекта?
[30:53.600 --> 30:54.600]  Збоя дефекта.
[30:56.600 --> 31:07.600]  Дефект – это та вещь, которая еще может пока каким-то косвенным стороной влиять на то, что у нас процесс какой-то происходит.
[31:07.600 --> 31:08.600]  Возможно, правильный.
[31:09.600 --> 31:15.600]  Вы же знаете, наверное, что в каком-то месте можно допустить две ошибки, и кажется, что все будет работать нормально.
[31:17.600 --> 31:18.600]  Знакомо, да.
[31:18.600 --> 31:19.600]  Это два дефекта по факту.
[31:20.600 --> 31:24.600]  А збоя – это когда мы наткнулись на это место, и у нас все падает.
[31:26.600 --> 31:27.600]  Понятно разница?
[31:29.600 --> 31:34.600]  То есть дефект – это то, что потенциально может дать збоя, а збоя – это, по факту, уже произошедшее мероприятие.
[31:35.600 --> 31:36.600]  Вот.
[31:37.600 --> 31:42.600]  Значит, еще одна вещь – это больше такая отчетная деятельность.
[31:42.600 --> 31:49.600]  То есть нам нужно предоставить информацию основателям, ну, либо заказчикам об уровне тестирования и уверенности в работе нашей системы.
[31:50.600 --> 31:57.600]  То есть мы говорим, мы провели набор тестов, и, пожалуйста, 99% времени, типа, наша система будет стоять стабильно.
[31:58.600 --> 32:00.600]  Из-за этого мы можем делать какие-то выводы.
[32:02.600 --> 32:05.600]  Вот. Ну и последнее, что нам необходимо точно делать.
[32:06.600 --> 32:13.600]  Помните, мы в прошлый раз говорили, что нам важно говорить про сертификацию.
[32:14.600 --> 32:22.600]  Помните, я показывал сертификацию ответствия, там, типа, когда мы говорили, какие требования бывают, факторы к ПО.
[32:23.600 --> 32:29.600]  Вот в данном случае нам нужно еще во время тестов убедиться, что мы соответствуем необходимым стандартному качеству ПО.
[32:30.600 --> 32:32.600]  А они есть, их реально много.
[32:33.600 --> 32:37.600]  Так, вот, вот это у нас задача тестирования. Давайте вопрос по ним.
[32:45.600 --> 32:46.600]  Да.
[32:48.600 --> 32:50.600]  Хорошо, движемся дальше тогда.
[32:51.600 --> 32:59.600]  Значит, смотрите, следующий момент, который нам необходимо пояснить, есть профессия тестировщик, есть профессия КУА-инженер.
[32:59.600 --> 33:12.600]  Наверное, слышали или читали где-нибудь, что есть люди бесятся, когда их называют тестировщиками, хотя они хотят называться КУА-инженерами,
[33:13.600 --> 33:18.600]  quality assurance-инженерами по контролю в степени уверенности.
[33:19.600 --> 33:22.600]  Значит, смотрите, и здесь получается такая разница.
[33:23.600 --> 33:25.600]  Значит, в чем цель тестирования по факту?
[33:25.600 --> 33:32.600]  Цель тестирования по факту. Это нахождение и решение появившихся сбоев и дефектов.
[33:33.600 --> 33:39.600]  И при этом тестировщики больше заточены на исходном коде и архитектурном дизайне.
[33:40.600 --> 33:45.600]  Ну, собственно, кто этим занимается? Этим занимаются как раз тест-инженеры и разработчики.
[33:46.600 --> 33:49.600]  Чего у вас там? Все нормально? Все. Ага.
[33:50.600 --> 33:57.600]  Вот. И видно, когда это происходит. Это тестирование происходит на стадии тестирования и параллельно со стадией разработки.
[33:58.600 --> 34:01.600]  Значит, дальше есть некоторая другая более расширенная вещь, так quality control.
[34:02.600 --> 34:09.600]  Мы проверяем, что наш продукт соответствует требованиям перед тем, как его внедрят в реальную жизнь.
[34:10.600 --> 34:13.600]  Вот. И здесь фокус идет уже на оценке всего продукта так-такового.
[34:14.600 --> 34:19.600]  И вот как раз здесь и появляется та самая необходимая верификация нашего продукта.
[34:20.600 --> 34:22.600]  Да, мы проверяем, что продукт делает грамотно.
[34:23.600 --> 34:29.600]  Потому что вы могли, в принципе, сделать все, что надо, а потом оказывается, что вы сделали совсем не то, что хотели.
[34:30.600 --> 34:35.600]  То есть вы... Ну, опять же, наш эфемерный пример с фиксиками. Возможно, кому-то надоели.
[34:36.600 --> 34:42.600]  Мы сделали крутую онлайн-платформу, а потом смотрим на эту платформу и получаем, что у нас вместо фиксиков, я не знаю, кто.
[34:43.600 --> 34:44.600]  Такие... А?
[34:45.600 --> 34:51.600]  Ну, либо вирусы, либо человечки из этого... из Саус-Парка или, хуже того, Хэппи Три Фрэнс.
[34:52.600 --> 34:57.600]  Ну, соответственно, мы нарушаем просто стандарт качества, и мы проиграли.
[34:58.600 --> 35:00.600]  Просто потому что мы хотели фиксики онлайн.
[35:01.600 --> 35:03.600]  Насколько сделать? Там 6 плюс или 0 плюс?
[35:04.600 --> 35:10.600]  По-моему, ну, типа ограничений по возрасту. А получается хардкорный 18 плюс, если не 21 плюс.
[35:11.600 --> 35:12.600]  А?
[35:13.600 --> 35:14.600]  Да-да-да-да.
[35:15.600 --> 35:18.600]  Вот. Значит, и есть еще одна статья. Это Quality Assurance.
[35:19.600 --> 35:24.600]  Значит, мы устанавливаем уже грамотный процесс с точки зрения стандартов качества.
[35:25.600 --> 35:30.600]  Вот. И здесь мы уже фокусируемся не на продукте, не на дизайне, а на большем.
[35:31.600 --> 35:34.600]  На том процессе, который у нас с вами проходит в выкоманде.
[35:35.600 --> 35:37.600]  Вот. И цель этого всего.
[35:37.600 --> 35:43.600]  Если, как говорится, если у нас порядок, то вероятность того, что у нас где-то произойдет сбой, намного меньше.
[35:44.600 --> 35:46.600]  И здесь уже принимают участие также из заказчика.
[35:47.600 --> 35:53.600]  И этот процесс происходит повсеместно, то есть во все время развития нашего продукта.
[35:54.600 --> 35:57.600]  Вот. Поэтому Куа, это намного больше, чем тестирование.
[35:58.600 --> 36:06.600]  Вот. Хотя, возможно, что мы сегодня будем говорить про тестирование из точки зрения того, что у нас будет в QA.
[36:07.600 --> 36:09.600]  Но надо отслеживать точно.
[36:10.600 --> 36:14.600]  Вот. И, скорее всего, мы сегодня затрагиваем на стадии Quality Control и тестирование.
[36:15.600 --> 36:21.600]  Вот. Пожалуйста, отличайте этих людей и не называйте, пожалуйста, тестировщиков-тестировщиков.
[36:22.600 --> 36:24.600]  Они могут обижаться на это.
[36:25.600 --> 36:27.600]  Они любят называть себя QA-инженерами.
[36:29.600 --> 36:31.600]  Так. По этому слайду вопросы.
[36:34.600 --> 36:35.600]  Окей.
[36:36.600 --> 36:37.600]  Развет вопросов.
[36:38.600 --> 36:40.600]  Значит, мы посмотрим немножко про стандарты качества.
[36:41.600 --> 36:43.600]  Какие они есть? Сейчас это просто ознакомительный слайд.
[36:44.600 --> 36:46.600]  В следующих лекциях мы в деталях поговорим.
[36:47.600 --> 36:48.600]  Значит, что такое стандарт качества?
[36:49.600 --> 36:50.600]  Значит, есть два стандарта ISO.
[36:51.600 --> 36:52.600]  Первый более старый – это 9.1.2.6.
[36:53.600 --> 36:54.600]  Более новый – это 25.0.10.
[36:55.600 --> 36:56.600]  Стандарт оценки качества софта.
[36:57.600 --> 36:59.600]  Нас интересует в данном случае поддерживаемость.
[37:00.600 --> 37:04.600]  То есть, эта способность продукта сохраняет свою способность в поддержке.
[37:05.600 --> 37:06.600]  Ну, грубо говоря, пример.
[37:07.600 --> 37:09.600]  Чтобы вы понимали, представьте себе, вы написали код на алгосах.
[37:10.600 --> 37:11.600]  Не в обиду алгосах.
[37:12.600 --> 37:16.600]  Когда вы последний код, первый контест по алгосам сдали свой?
[37:19.600 --> 37:21.600]  Ну, во время обучения.
[37:30.600 --> 37:31.600]  Ну, что-то мощное.
[37:32.600 --> 37:33.600]  У вас что, вот такая контест по алгосам долгая?
[37:35.600 --> 37:36.600]  Понятно.
[37:37.600 --> 37:39.600]  Ладно, все равно четыре месяца прошло.
[37:40.600 --> 37:41.600]  Так, декабрин, варь, февраль.
[37:42.600 --> 37:43.600]  А, три месяца.
[37:44.600 --> 37:45.600]  Три месяца прошло сегодня, первый день весны.
[37:46.600 --> 37:48.600]  Попробуйте открыть этот код.
[37:49.600 --> 37:50.600]  И понять, что в нем происходит.
[37:55.600 --> 37:56.600]  Вот как раз…
[37:57.600 --> 37:58.600]  Ладно, до понятия.
[37:59.600 --> 38:00.600]  Сможете ли вы модифицировать для своих новых целей?
[38:01.600 --> 38:02.600]  Из-за сколько?
[38:03.600 --> 38:04.600]  А?
[38:05.600 --> 38:06.600]  Нет, нет, нет.
[38:07.600 --> 38:09.600]  Вот как раз использовать как черный ящик нарушает свойство поддерживаемости.
[38:10.600 --> 38:14.600]  Потому что, если, допустим, нам баги чинить в этой штуке, мы это просто не сможем сделать.
[38:15.600 --> 38:16.600]  А?
[38:17.600 --> 38:18.600]  Нет, не факт.
[38:19.600 --> 38:23.600]  Нет, ну а вдруг тесты не покрыли всевозможные баги?
[38:24.600 --> 38:25.600]  Вы верите тестам?
[38:26.600 --> 38:27.600]  Я нет.
[38:28.600 --> 38:29.600]  Ну вот.
[38:30.600 --> 38:32.600]  Значит, тут есть шесть составных частей, нас интересует сегодня поддерживаемость.
[38:32.600 --> 38:37.600]  Значит, есть стадии, связанные с эффективностью и пользованием.
[38:38.600 --> 38:39.600]  Видите, тут всякие интересные вещи.
[38:40.600 --> 38:41.600]  Типа usability.
[38:42.600 --> 38:43.600]  Там есть такая подкладочка.
[38:44.600 --> 38:46.600]  Learnability и understandability.
[38:47.600 --> 38:51.600]  Learnability – это способность к обучению к тому интерфейсу, который мы осваиваем.
[38:52.600 --> 38:53.600]  Это, знаете, вот всякие туториалы есть.
[38:54.600 --> 38:58.600]  Вы заходите в первый раз на сайт, или в первый раз в игру, и внедряются в туториалы.
[38:59.600 --> 39:00.600]  Вот.
[39:00.600 --> 39:01.600]  То есть вы про свой сталернабилити.
[39:02.600 --> 39:04.600]  А destability вы открываете, и вам все понятно, что тут происходит.
[39:05.600 --> 39:08.600]  Значит, есть еще функциональность.
[39:09.600 --> 39:10.600]  Есть надежность.
[39:11.600 --> 39:12.600]  И портируемость.
[39:13.600 --> 39:18.600]  Портируемость – это значит, что адаптивность нашего продукта для того, чтобы перенести его, допустим, с PlayStation на Xbox.
[39:19.600 --> 39:22.600]  Так вот, что касается поддерживаемости.
[39:23.600 --> 39:25.600]  Она состоит из вот таких вот составных частей.
[39:25.600 --> 39:31.600]  То есть поддерживаемость составляет в себе модифицированность, анализируемость кода и тестируемость кода.
[39:32.600 --> 39:36.600]  И дальше, если спускаться на более низкий уровень, есть устойчивость к ошибкам.
[39:37.600 --> 39:41.600]  А complexity, сложность кода, зависит от его возможности тестировать.
[39:42.600 --> 39:46.600]  Давайте попробуем какие-то выводы сделать из этой картинки.
[39:47.600 --> 39:50.600]  Тут надо логическую связь простроить.
[39:51.600 --> 39:54.600]  У вас как раз был матлок предыдущей парой.
[39:55.600 --> 39:56.600]  Давайте еще раз включим.
[39:59.600 --> 40:01.600]  Причем матлок, потому что нам надо понять.
[40:02.600 --> 40:05.600]  Смотрите, если у нас мы…
[40:10.600 --> 40:18.600]  Смотрите, вопрос в том, что если у нас код сложный, как вы думаете, тестируем мы он или нет?
[40:19.600 --> 40:20.600]  Можно ли его протестировать?
[40:25.600 --> 40:29.600]  Иногда бывает такое, что у нас функции 50 аргументов.
[40:30.600 --> 40:32.600]  Как написать тест для функций с 50 аргументами?
[40:46.600 --> 40:49.600]  Во-первых, эти 50 аргументов надо подготовить.
[40:50.600 --> 40:51.600]  Это хорошо, если они енты.
[40:52.600 --> 40:56.600]  А если это какие-то еще сложные структуры, нам эти структуры надо подготовить, запаковать,
[40:57.600 --> 41:01.600]  еще проверить, как эти стадии идут внутри нашего кода, как они ввятся и так далее.
[41:02.600 --> 41:03.600]  Это реально сложный процесс.
[41:05.600 --> 41:08.600]  Поэтому если код сложный, то протестировать его сложно.
[41:09.600 --> 41:12.600]  А если код сложно тестировать, вывод какой?
[41:17.600 --> 41:19.600]  Мы потратим огромное количество времени на поддержку.
[41:19.600 --> 41:21.600]  Просто невозможно, возможно экспоненциальное время.
[41:22.600 --> 41:26.600]  Поэтому вывод из этой картинки, да, кстати, снизу, это метрики качества кода,
[41:27.600 --> 41:32.600]  которые можно использовать для того, чтобы отвлечь ту или иную составную часть.
[41:33.600 --> 41:36.600]  Лог – это lines of code, если что.
[41:37.600 --> 41:38.600]  А про остальные надо смотреть.
[41:39.600 --> 41:43.600]  Значит, вывод, чтобы код был поддерживаемым, он должен быть тестированным.
[41:44.600 --> 41:49.600]  То есть наша цель, если мы хотим с вами уметь поддерживать код, правильно писать тестовую базу.
[41:51.600 --> 41:53.600]  Так, сейчас у нас...
[41:54.600 --> 41:55.600]  Ага, я понял.
[41:56.600 --> 41:57.600]  Что, делаем перерыв?
[41:59.600 --> 42:01.600]  Да, хорошо, давайте сделаем перерыв.
[42:02.600 --> 42:06.600]  Дальше мы поговорим про принципы тестирования, и, наверное, сегодня на пирамиде тестирование закончено.
[42:07.600 --> 42:12.600]  Итак, мы с вами продолжаем, и сейчас мы будем говорить с вами по принципам тестирования.
[42:13.600 --> 42:14.600]  Их всего семь штук.
[42:15.600 --> 42:22.600]  Значит, два этих принципа очень похожи, но в них есть небольшая разница, поэтому мы их тоже разберем.
[42:23.600 --> 42:26.600]  Значит, принцип первый. Тестирование показывает наличие дефектов, а не их отсутствие.
[42:30.600 --> 42:37.600]  То есть, смотрите, вывод такой, который может сказать следующим, что если у нас есть тесты,
[42:38.600 --> 42:42.600]  то вероятность того, что мы найдем тот или иной дефект, подрастает.
[42:43.600 --> 42:46.600]  То есть, в обратную сторону не работает.
[42:47.600 --> 42:48.600]  Что если у нас с вами...
[42:50.600 --> 42:52.600]  Да, то не факт, что мы его найдем тестово.
[42:54.600 --> 42:59.600]  Да, вероятность уменьшается, конечно, что мы не найдем этот дефект, но все-таки он и есть.
[43:00.600 --> 43:01.600]  Вот.
[43:02.600 --> 43:04.600]  Второй тезис. Избыточное тестирование невозможно.
[43:05.600 --> 43:08.600]  Значит, чтобы вы поняли, я приведу один пример.
[43:09.600 --> 43:12.600]  Представьте себе, что у нас есть код с ветвлением.
[43:13.600 --> 43:15.600]  Сколько вариантов нам добавляет ветвление?
[43:16.600 --> 43:20.600]  Два. Два варианта. Либо в одну сторону идем, либо во вторую сторону идем.
[43:21.600 --> 43:25.600]  А теперь представьте, что если у нас идет в коде десять ветвлений подряд.
[43:26.600 --> 43:29.600]  Одно, потом второе ветвление, потом третье, четвертое и так далее.
[43:30.600 --> 43:31.600]  Сколько у нас вариантов получается?
[43:32.600 --> 43:33.600]  Два в десятый.
[43:33.600 --> 43:34.600]  Два в десятый.
[43:35.600 --> 43:40.600]  Да, то есть у нас количество тестов в худшем варианте на каждое ветвление увеличивается в два раза.
[43:41.600 --> 43:44.600]  Которое необходимо для того, чтобы рассмотреть все тестовые сценарии.
[43:46.600 --> 43:47.600]  А?
[43:48.600 --> 43:49.600]  Ага.
[43:50.600 --> 43:57.600]  И в итоге, для того, чтобы проверить все тестовые сценарии, мы можем просто сидеть и каждую секунду проводить какой-то тест.
[43:58.600 --> 43:59.600]  Все равно до конца жизни времени не хватит.
[44:00.600 --> 44:03.600]  Да, просто количество вариантов, которые у нас есть, оно будет крайне большим.
[44:04.600 --> 44:06.600]  Поэтому избыточное тестирование невозможно.
[44:07.600 --> 44:10.600]  И поэтому все время на тестирование тратить не очень хорошо.
[44:11.600 --> 44:13.600]  Поэтому есть следующий, третий принцип тестирования.
[44:14.600 --> 44:17.600]  Ранее начало тестирования экономит время, деньги и даже нервы.
[44:18.600 --> 44:25.600]  Значит, давайте я как раз, наверное, на слайде изображу график, который можно увидеть.
[44:26.600 --> 44:27.600]  Значит, это будет три картинки.
[44:29.600 --> 44:39.600]  График в зависимости количества сожженных нервных клеток от времени разработки.
[44:44.600 --> 44:45.600]  Так.
[44:46.600 --> 44:49.600]  Давайте подумаем, как выглядит график, в котором тестов нету.
[44:52.600 --> 44:53.600]  Ага, конечно.
[44:54.600 --> 44:55.600]  Экспоненциально.
[44:56.600 --> 44:59.600]  Есть? Так, есть маркеры разных цветов?
[45:01.600 --> 45:02.600]  Нету?
[45:05.600 --> 45:06.600]  Где?
[45:08.600 --> 45:09.600]  А, меню вижу.
[45:17.600 --> 45:18.600]  А, ёберный.
[45:19.600 --> 45:21.600]  Юзабилити не очень.
[45:22.600 --> 45:25.600]  Так, значит, давайте я даже скажу, что оно...
[45:26.600 --> 45:27.600]  Я же выбрал цвет.
[45:48.600 --> 45:49.600]  Я и не понял.
[45:50.600 --> 45:51.600]  Так.
[46:00.600 --> 46:02.600]  Юзабилити такое юзабилити.
[46:11.600 --> 46:12.600]  Вот.
[46:13.600 --> 46:16.600]  А потому что у нас комминаторный взрыв происходит.
[46:16.600 --> 46:18.600]  Чем больше вариантов, тем хуже.
[46:19.600 --> 46:20.600]  Чем сложнее тестировать код.
[46:21.600 --> 46:25.600]  Если у нас на каждое условие, а мы внедряем по одному условию в минуту,
[46:26.600 --> 46:28.600]  усложняется увеличивать количество вариантов в два раза,
[46:29.600 --> 46:31.600]  то вопрос, какая у нас функция?
[46:32.600 --> 46:33.600]  Время?
[46:35.600 --> 46:37.600]  Время разработки нашего проекта.
[46:40.600 --> 46:43.600]  То есть сначала мы начинаем писать код int main, образно говоря.
[46:44.600 --> 46:45.600]  Все, нервов нисколько.
[46:46.600 --> 46:50.600]  Количество нервов, которые мы тратим для того, чтобы это протестировать, увеличивается.
[46:51.600 --> 46:53.600]  А потом у нас ходу кин-код стайл какой-нибудь.
[46:54.600 --> 46:55.600]  И вы такие, сиди, ёберный балет.
[46:56.600 --> 46:57.600]  А как же это протестировать?
[47:02.600 --> 47:05.600]  Ну, там проблема в том, что это все делается через callback hell,
[47:06.600 --> 47:08.600]  и callback debugging еще сложнее.
[47:09.600 --> 47:11.600]  Вот, значит, смотрите, теперь представим себе второй кейс.
[47:12.600 --> 47:14.600]  Я надеюсь, что я с ручкой справлюсь.
[47:14.600 --> 47:15.600]  Желтенький.
[47:16.600 --> 47:17.600]  Так, давайте оранжевенький кейс.
[47:18.600 --> 47:20.600]  Значит, мы начали тестироваться чуть-чуть позже.
[47:21.600 --> 47:23.600]  Вот где-то вот здесь мы начали писать тесты.
[47:25.600 --> 47:27.600]  И тогда количество тестов у нас...
[47:28.600 --> 47:30.600]  Это идет какая-то экспоненциальная функция, но она...
[47:38.600 --> 47:40.600]  Вот, значит, если мы сразу сделали нормально,
[47:40.600 --> 47:43.600]  то количество неров уже, возможно, будет расти линейным образом.
[47:50.600 --> 47:54.600]  На контрольной вы увидите этот эффект в рамках
[47:55.600 --> 47:56.600]  не готовились к контрольной,
[47:57.600 --> 47:58.600]  готовились к контрольной чуть-чуть,
[47:59.600 --> 48:00.600]  готовились к контрольной хорошо.
[48:05.600 --> 48:07.600]  Вот, значит, вот такое у нас грайк получается.
[48:07.600 --> 48:08.600]  Опять же, он может быть неточным.
[48:09.600 --> 48:11.600]  Смотрите, этот график неточный.
[48:12.600 --> 48:14.600]  Давайте его поправлю немножечко.
[48:18.600 --> 48:20.600]  График, скорее всего, такой.
[48:25.600 --> 48:26.600]  Вот такой вот.
[48:28.600 --> 48:30.600]  Как вы думаете, почему всплеск неровов возник?
[48:33.600 --> 48:34.600]  Нет, вы...
[48:35.600 --> 48:37.600]  Нет, вы с этим столкнетесь.
[48:38.600 --> 48:40.600]  Когда вы начнете писать первые тесты, вы поймете,
[48:41.600 --> 48:42.600]  что, блин, это тут происходит?
[48:43.600 --> 48:44.600]  Какой-то сложный фреймбор для тестирования.
[48:45.600 --> 48:46.600]  Как его там записать?
[48:47.600 --> 48:48.600]  Как его подключить в зависимости?
[48:49.600 --> 48:50.600]  Как эту вещь, черт возьми, собирать?
[48:51.600 --> 48:52.600]  Как эту вещь запускать?
[48:53.600 --> 48:56.600]  То есть вот этот первый скачок – это просто людей приучить к тестированию.
[48:58.600 --> 48:59.600]  Вот, это сложно.
[49:00.600 --> 49:02.600]  Не всегда получается, но надо.
[49:03.600 --> 49:04.600]  Это помогает.
[49:06.600 --> 49:08.600]  Да, ну и в оранжевом тоже будет небольшой всплеск.
[49:13.600 --> 49:16.600]  Да, в красном сначала классно, а потом будет плохо.
[49:19.600 --> 49:23.600]  Вот, значит, еще один сценарий, который важно разобрать.
[49:24.600 --> 49:30.600]  Еще один график, который показывает...
[49:32.600 --> 49:37.600]  Каким образом ресурсы на разработку должны связываться с ресурсами на тестирование?
[49:38.600 --> 49:39.600]  А скорее всего...
[49:40.600 --> 49:43.600]  Вот, давайте подумаем, если мы попытаемся затушить красный график,
[49:44.600 --> 49:45.600]  каким образом мы захотим его тушить?
[49:51.600 --> 49:54.600]  Ну, нанять команду тестировщиков.
[49:56.600 --> 50:01.600]  И тогда, смотрите, у нас затраты на тестирование будут сильно превышать затраты на разработку.
[50:02.600 --> 50:03.600]  Логично.
[50:04.600 --> 50:08.600]  А если мы с вами больше денег тратим на разработку, нежели чем на тестирование,
[50:09.600 --> 50:10.600]  то с чем у нас проблема возникает?
[50:11.600 --> 50:12.600]  Мы будем развивать наш продукт или нет?
[50:13.600 --> 50:14.600]  А?
[50:15.600 --> 50:18.600]  Ладно, с багом. Мы просто будем тратить время на то, чтобы фиксить баги
[50:19.600 --> 50:21.600]  и никак не приступать к развитию нашего проекта в дальнейшем.
[50:22.600 --> 50:26.600]  Поэтому, по факту, если мы говорим, что это время на разработку...
[50:27.600 --> 50:31.600]  Нет, то затраты на тестирование обычно не должны превышать затраты на разработку.
[50:32.600 --> 50:33.600]  Это такое афемерное правило.
[50:38.600 --> 50:39.600]  Что они должны идти параллельно?
[50:40.600 --> 50:45.600]  И как раз при помощи этого синего графика, при помощи вот таких затрат,
[50:46.600 --> 50:47.600]  в принципе, вот такое плюс-минус получается.
[50:52.600 --> 50:53.600]  Понятен тезис?
[50:54.600 --> 50:55.600]  Понятен тезис?
[51:04.600 --> 51:07.600]  Ну понятно, но наш проект же тоже растет, он начинает получать ресурсы,
[51:08.600 --> 51:10.600]  инвесторы подключаются и так далее,
[51:11.600 --> 51:16.600]  поэтому мы считаем, что если мы грамотно управляем нашим продуктом тем,
[51:17.600 --> 51:19.600]  чем мы занимаемся, то и ресурсов у нас будут на это больше.
[51:19.600 --> 51:25.600]  Мы сможем нанимать больше людей и, соответственно, тратить больше денег.
[51:26.600 --> 51:28.600]  Плюс мы возможно, за счет того, что у нас есть раннее тестирование,
[51:29.600 --> 51:33.600]  мы возможно мигрируем со старой версии 1 на новую версию 2
[51:34.600 --> 51:35.600]  чуть меньшим ресурсом, чем нам нужны.
[51:36.600 --> 51:40.600]  Просто мы сэкономим время на оптимизацию той или иной версии.
[51:42.600 --> 51:43.600]  Правило про это.
[51:44.600 --> 51:47.600]  80% дефектов содержатся в 20% кода.
[51:47.600 --> 51:51.600]  То есть, скорее всего, та ядреная технология, которая у нас есть,
[51:52.600 --> 51:56.600]  кор, поскольку от нее зачастую все зависят,
[51:57.600 --> 51:58.600]  вот эта у нас кор компонента,
[51:59.600 --> 52:01.600]  а эта, допустим, какая-то другая компонента, которая зависит от нее,
[52:02.600 --> 52:03.600]  и от нее зависит все компоненты,
[52:04.600 --> 52:09.600]  и скорее всего, вероятнее всего, что у нас бак находится в ядре,
[52:10.600 --> 52:13.600]  в нашей системе, в каком-то ядреном компоненте.
[52:13.600 --> 52:15.600]  Было ли бы в каком-то месте накапливаются баги?
[52:18.600 --> 52:22.600]  Ну, кор это, возможно, низкоуровневая библиотека какая-то.
[52:25.600 --> 52:27.600]  Грубо говоря, идея такая.
[52:28.600 --> 52:30.600]  Если тараканы скопились в одном месте,
[52:31.600 --> 52:34.600]  то, скорее всего, тараканы будут искапливаться в этом месте.
[52:37.600 --> 52:38.600]  Такой же вещь.
[52:38.600 --> 52:39.600]  То есть, это классическое правило Парета.
[52:40.600 --> 52:42.600]  Следующий интересный кейс.
[52:43.600 --> 52:44.600]  А парадокс пестицидон.
[52:45.600 --> 52:47.600]  Он говорит о том, что старые тесты не помогают находить новые дефекты.
[52:50.600 --> 52:54.600]  Да, то есть, тестовая база должна развиваться параллельно с кодовой базой.
[52:57.600 --> 53:01.600]  Да, то есть, тестовая база должна развиваться параллельно с кодовой базой.
[53:01.600 --> 53:03.600]  Да, это называется регрессионное тестирование.
[53:06.600 --> 53:08.600]  Вот. Идея такая, что...
[53:09.600 --> 53:10.600]  Ну, представьте себе, вы травите тараканов.
[53:11.600 --> 53:12.600]  Я не знаю, вообще есть таракан или нет сейчас.
[53:17.600 --> 53:19.600]  Ну, слава богу.
[53:20.600 --> 53:22.600]  Ну вот, они могут быть.
[53:23.600 --> 53:24.600]  Представьте, вы травите их одним средством.
[53:25.600 --> 53:26.600]  Вроде они уходят.
[53:27.600 --> 53:28.600]  Ну, это, конечно, не так.
[53:28.600 --> 53:29.600]  Вроде они уходят.
[53:30.600 --> 53:32.600]  Потом начинаете травить тем же средством, когда они приходят второй раз,
[53:33.600 --> 53:35.600]  а они резистентны к этому тесту.
[53:36.600 --> 53:37.600]  Вот.
[53:38.600 --> 53:39.600]  И возникает проблема.
[53:40.600 --> 53:43.600]  Та же самая проблема с тем, почему нельзя часто пить антибиотики.
[53:44.600 --> 53:45.600]  Ровно поэтому.
[53:46.600 --> 53:48.600]  Потому что вирус становится резистентным к этому антибиотику.
[53:49.600 --> 53:50.600]  Понятен тезис.
[53:53.600 --> 53:54.600]  Шестой тезис.
[53:55.600 --> 53:56.600]  Тестирование зависит от контекста.
[53:56.600 --> 53:59.600]  Оно сильно зависит от методологии разработки и от сфер разработки.
[54:00.600 --> 54:03.600]  То есть подмобильные девайсы тестируются все по-разному.
[54:04.600 --> 54:05.600]  Вопрос.
[54:06.600 --> 54:07.600]  Как вы думаете, кому жить на свете легче?
[54:08.600 --> 54:10.600]  Тестировщикам Android или тестировщикам iOS?
[54:11.600 --> 54:12.600]  Да.
[54:13.600 --> 54:14.600]  Почему?
[54:15.600 --> 54:16.600]  Давайте варианты.
[54:17.600 --> 54:18.600]  Почему iOS, почему Android?
[54:19.600 --> 54:20.600]  А?
[54:26.600 --> 54:30.600]  Для миллион разных версий Android, миллион разных марок и так далее.
[54:31.600 --> 54:32.600]  А?
[54:33.600 --> 54:34.600]  Ну да.
[54:35.600 --> 54:36.600]  Вот, оно есть все, достаточно просто.
[54:37.600 --> 54:40.600]  Я говорю, что у меня на практике был кейс, когда мы нейросетку под телефон запускали.
[54:41.600 --> 54:43.600]  У нас в итоге 10 отдельных Android устройств.
[54:44.600 --> 54:46.600]  На одном видеокарте нормально работает, на втором работает ненормально.
[54:47.600 --> 54:48.600]  На третьем оно жрет дофига памяти.
[54:49.600 --> 54:50.600]  На четвертом оно вообще не жрет памяти.
[54:51.600 --> 54:53.600]  При этом выполняет за 100-500 секунд обработку.
[54:53.600 --> 54:57.600]  В общем, реально какой-то зоопарк моделей возникает.
[54:58.600 --> 55:02.600]  Ну и front-end тестируется, наверное, не те же самые методы, на что и backend.
[55:05.600 --> 55:06.600]  То есть сильно все зависит.
[55:07.600 --> 55:10.600]  И последняя вещь, это тезис, который очень сильно похож на первый тезис.
[55:11.600 --> 55:12.600]  Но суть в чем?
[55:13.600 --> 55:15.600]  Отсутствие ошибок – это ошибочное суждение.
[55:16.600 --> 55:20.600]  То есть, что значит, что если у вас нет ошибок,
[55:20.600 --> 55:23.600]  то у вас все замечательно.
[55:24.600 --> 55:25.600]  На самом деле это не так.
[55:26.600 --> 55:27.600]  Возможно, вы просто не до конца искали.
[55:29.600 --> 55:30.600]  Вот.
[55:31.600 --> 55:33.600]  Это 7 принципов, на которых основывается тестирование.
[55:34.600 --> 55:35.600]  Давайте вопроса.
[55:36.600 --> 55:37.600]  По ним?
[55:42.600 --> 55:43.600]  Да, конечно, будет.
[55:45.600 --> 55:46.600]  А содержание будет такое.
[55:47.600 --> 55:48.600]  Есть код.
[55:49.600 --> 55:54.600]  Да, написать к нему тест, чтобы покрылось как можно больше процентов кода.
[56:02.600 --> 56:04.600]  Нет, там багов в коде нет.
[56:05.600 --> 56:10.600]  Там нужно именно удостовериться, что этот код тестируется нормально.
[56:11.600 --> 56:12.600]  Нет, кстати, там был баг.
[56:13.600 --> 56:16.600]  Там был баг в задании, который пришлось фиксить.
[56:16.600 --> 56:17.600]  Это забавный кейс.
[56:18.600 --> 56:22.600]  Короче, был написан проект удалить папки в проекте.
[56:23.600 --> 56:27.600]  И там была опция удалить папку текущую.
[56:28.600 --> 56:31.600]  В итоге вы запускаете этот код, и он удаляет папку с проекта.
[56:35.600 --> 56:36.600]  Пришлось exception закидывать туда.
[56:37.600 --> 56:38.600]  Что типа, are you sure, товарищ?
[56:39.600 --> 56:41.600]  Удалять проект из текущей директории.
[56:43.600 --> 56:44.600]  Вот.
[56:45.600 --> 56:51.600]  В общем, давайте поговорим теперь, если про принципы хорошо, давайте поговорим про психологию.
[56:52.600 --> 56:54.600]  Давайте подумаем, почему тестировщики и разработчики должны быть разными людьми.
[56:57.600 --> 56:59.600]  Мысление разное. В чем оно заключается?
[57:05.600 --> 57:09.600]  Они не копают по-другому. Смотрите, разработчики это больше творческие люди.
[57:09.600 --> 57:15.600]  Разработчики творческие люди, они хотят создавать новый код, создавать новые продукты, и так далее.
[57:16.600 --> 57:18.600]  А тестировщики зачастую...
[57:20.600 --> 57:23.600]  Ну, если говорить на терминах физтеха, то да, они факеры.
[57:25.600 --> 57:26.600]  На самом деле, они критики.
[57:27.600 --> 57:33.600]  То есть, их цель, чтобы продукт был качественный, из-за этого они достаточно серьезно придираются к тому, что написано.
[57:34.600 --> 57:35.600]  Вот.
[57:36.600 --> 57:41.600]  Ну, пример, я не знаю, по-моему, сейчас в 11 классе уже пишут все сочинения, да?
[57:44.600 --> 57:49.600]  А проблема в том, вспомните свое ощущение, когда вы написали свое первое сочинение.
[57:50.600 --> 57:52.600]  Какое у вас было ощущение?
[57:53.600 --> 57:54.600]  О, я родил это.
[57:56.600 --> 57:57.600]  А?
[57:58.600 --> 58:00.600]  Ага, да, и так сойдет.
[58:00.600 --> 58:01.600]  И так сойдет.
[58:02.600 --> 58:06.600]  Это вспоминаем с 39-го государства, который...
[58:07.600 --> 58:08.600]  И так сойдет.
[58:10.600 --> 58:11.600]  Вот.
[58:12.600 --> 58:16.600]  А тестировщики, они, наоборот, говорят учителю, типа, исправь, пожалуйста.
[58:17.600 --> 58:21.600]  Поэтому, на самом деле, смотрите, важно в стадии тестирования, чтобы люди не критиковали друг друга.
[58:22.600 --> 58:24.600]  Важно не переходить на личности, важно содействовать в нейтральном ключе.
[58:25.600 --> 58:26.600]  Вы обсуждаете код, а не людей.
[58:27.600 --> 58:29.600]  И обсуждаете тоже код, а не людей.
[58:31.600 --> 58:32.600]  Вот.
[58:33.600 --> 58:34.600]  Ну, это такой важный намек.
[58:35.600 --> 58:38.600]  Так что, когда вы будете работать, не обижайтесь, пожалуйста, на тестировщиков.
[58:39.600 --> 58:40.600]  Они делают благое дело.
[58:41.600 --> 58:42.600]  Вот.
[58:43.600 --> 58:45.600]  Кстати, возможно, кто-то из вас пойдет в КУА инженеры.
[58:46.600 --> 58:47.600]  Вполне возможно.
[58:48.600 --> 58:49.600]  Кто-то из вас пойдет в разработчики.
[58:50.600 --> 58:51.600]  Такое тоже вполне возможно.
[58:52.600 --> 58:53.600]  Так, понятно про психологию.
[58:55.600 --> 58:56.600]  А?
[58:57.600 --> 58:58.600]  Про психологию тестирования.
[58:58.600 --> 59:00.600]  Так, есть КУА инженеры, они ведут себя в разном ключе.
[59:01.600 --> 59:02.600]  Угу.
[59:03.600 --> 59:04.600]  Движемся дальше.
[59:05.600 --> 59:07.600]  Значит, смотрите, дальше следующий кейс.
[59:08.600 --> 59:09.600]  Больше теоретически.
[59:10.600 --> 59:12.600]  Нам больше важно именно про пирамиду тестирования поговорить.
[59:13.600 --> 59:19.600]  А детали, если что, можно прочесть будет на слайдах, на презентациях.
[59:20.600 --> 59:21.600]  Что в чем каждый уровень заключается.
[59:22.600 --> 59:26.600]  Мы с вами поговорим крайне на таком низком уровне.
[59:26.600 --> 59:27.600]  Какие уровни тестирования бывают?
[59:28.600 --> 59:33.600]  Значит, разные системы говорят, что уровней тестирования может быть огромное количество.
[59:34.600 --> 59:38.600]  Кто-то перечисляет одну пирамиду, кто-то дает вторую пирамиду, кто-то дает третью, четвертую, так далее.
[59:39.600 --> 59:42.600]  Ну, в общем, каноническая, если говорить по формату СКБ, такая пирамида,
[59:43.600 --> 59:45.600]  что на самом нижнем уровне у нас находится юни-тестирование,
[59:46.600 --> 59:49.600]  на среднем уровне у нас находится интеграционное тестирование,
[59:50.600 --> 59:53.600]  далее дальше запускаются системные тестирования,
[59:53.600 --> 59:57.600]  и на верхнем уровне запускается приемочное тестирование.
[59:57.600 --> 59:58.600]  Оно же Acceptance Testing.
[59:58.600 --> 01:00:02.600]  И вот, чтобы вы понимали, я приведу некоторую математическую абстракцию.
[01:00:02.600 --> 01:00:04.600]  У вас же с математикой нормально?
[01:00:05.600 --> 01:00:07.600]  Смотрите.
[01:00:07.600 --> 01:00:12.600]  Представим себе, что мы с вами тестируем граф.
[01:00:13.600 --> 01:00:15.600]  Какой-то математический объект.
[01:00:15.600 --> 01:00:19.600]  Грубо говоря, вершина этого графа — это класс.
[01:00:19.600 --> 01:00:23.600]  Тогда у нас на самом деле мы можем сказать, что unit-тестирование...
[01:00:23.600 --> 01:00:27.600]  Так, нам надо вернуть на черный цвет.
[01:00:27.600 --> 01:00:29.600]  Да еперны балета.
[01:00:33.600 --> 01:00:37.600]  Первое, вершина графа — это unit-тестирование.
[01:00:38.600 --> 01:00:41.600]  То есть мы тестируем вершину определенного графа.
[01:00:41.600 --> 01:00:45.600]  По факту мы тестируем с вами класс, модуль или компонент.
[01:00:46.600 --> 01:00:50.600]  Проверяем, что наш класс работает так, как нужно.
[01:00:50.600 --> 01:00:54.600]  Второй кейс — это интеграционное тестирование.
[01:00:56.600 --> 01:00:59.600]  Что в графе у нас помимо вершин есть?
[01:01:00.600 --> 01:01:01.600]  Ребра.
[01:01:01.600 --> 01:01:05.600]  И в интеграционном тестировании мы тестируем не вершину...
[01:01:07.600 --> 01:01:09.600]  Да еперны.
[01:01:12.600 --> 01:01:14.600]  А тестируем ребро.
[01:01:14.600 --> 01:01:18.600]  Ну вот считать, что у нас ребро порванное, значит у нас тест не пройдет.
[01:01:18.600 --> 01:01:20.600]  Просто доска постаралась.
[01:01:20.600 --> 01:01:25.600]  То есть мы с вами берем два компонента, либо некоторый набор компонент,
[01:01:25.600 --> 01:01:28.600]  и проверяем взаимодействие между ними.
[01:01:29.600 --> 01:01:36.600]  Представьте, Вася отправляет Пете тысячу рублей по протоколу.
[01:01:36.600 --> 01:01:42.600]  Вася снимается тысячу рублей, потом обрыв связи, Петя тысячу рублей не приходит.
[01:01:42.600 --> 01:01:44.600]  Что делать?
[01:01:45.600 --> 01:01:47.600]  А все, тютик.
[01:01:47.600 --> 01:01:51.600]  Как говорится, застали вы это или нет, была песенка такая.
[01:01:51.600 --> 01:01:54.600]  Сел на пятенок, должен был косарь отдать.
[01:02:03.600 --> 01:02:05.600]  Русское народное творчество.
[01:02:05.600 --> 01:02:10.600]  Следующий более высокий уровень — это системное тестирование.
[01:02:11.600 --> 01:02:14.600]  И как вы думаете, что мы здесь тестируем?
[01:02:17.600 --> 01:02:19.600]  Четко КСС.
[01:02:22.600 --> 01:02:27.600]  Я бы сказал, ну можно так сказать, если мы тестируем компоненту сильно связанности,
[01:02:27.600 --> 01:02:32.600]  либо еще что-то, это окей, тогда будет еще системное интеграционное тестирование,
[01:02:32.600 --> 01:02:35.600]  которое тестирует связи между этими сильно связанными компонентами.
[01:02:35.600 --> 01:02:38.600]  Но в целом, в каноническом определении, это граф.
[01:02:40.600 --> 01:02:42.600]  Вопрос, а что может быть выше?
