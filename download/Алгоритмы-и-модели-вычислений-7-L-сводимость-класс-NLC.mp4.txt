[00:00.000 --> 00:12.840]  Прошлый раз мы обсуждали логигмическую память при
[00:12.840 --> 00:20.760]  детерминирных вычислениях. Мы обсудили две группы задач.
[00:20.760 --> 00:26.040]  Одна группа это разного рода арифметические операции над двоечными числами,
[00:26.040 --> 00:31.600]  а вторая группа это разного рода синтактический анализ, то есть
[00:31.600 --> 00:37.760]  проверка баланса скобок и так далее. Но теперь я хочу еще про одну задачу
[00:37.760 --> 00:46.480]  рассказать. В принципе тоже включается в некоторый более широкий контекст.
[00:46.480 --> 00:51.440]  Продолжим имирацию с прошлого раза. Третья область, про которую мы поговорим,
[00:51.440 --> 01:08.880]  это теория графов. Про графы очень много, задач НП полных и всякие
[01:08.880 --> 01:17.060]  другие задач интересных очень много. Но сейчас поговорим про такую
[01:17.060 --> 01:32.660]  стандартную задачу. Она называется U-path. U от слова undirected, то есть
[01:32.660 --> 01:42.740]  ненаправленной, неориентированной. Это множество таких троек из графа
[01:42.740 --> 01:56.560]  начала и конца, что в неориентированном графе
[01:56.560 --> 02:14.440]  есть путь из S в T. Если буквки U нету, то это будет просто PATH, то же
[02:14.440 --> 02:20.580]  самое, что в ориентированном графе. Но из точки зрения времени, значит, и та и
[02:20.580 --> 02:29.300]  другая задача. Давайте я их сразу напишу. Просто PATH. В общем, то же самое, только
[02:29.300 --> 02:39.060]  в вор графе. Но в ориентированном графе и, соответственно, путь тоже должен быть
[02:39.060 --> 02:46.060]  ориентированный. В точки зрения времени работы эти задачи не сильно друг от друга
[02:46.060 --> 02:49.780]  отличаются. Решается примерно одинаково. Наверное, вы это изучали,
[02:50.180 --> 02:57.380]  поиском, в ширину, глубину. Много есть разных вариантов, но можно описывать так,
[02:57.380 --> 03:04.100]  что у нас есть граф, у нас есть вершина S, и мы красим вершину S в какой-то цвет.
[03:04.100 --> 03:12.260]  Помечаем. Дальше, на следующем этапе помечаем все соединенные с ней вершины в
[03:12.260 --> 03:15.940]  неориентированном случае, а в ориентированном все, в которой из нее идет
[03:15.940 --> 03:21.900]  ребро. Ну и дальше для вновь помеченных вершин делаем все то же самое. И если
[03:21.900 --> 03:27.940]  рано или поздно процесс дойдет до T, то значит, T достижимо. А если в какой-то
[03:27.940 --> 03:31.380]  момент у нас новых вершин не появится, а T все еще не будет отмечено, значит,
[03:31.380 --> 03:39.180]  T недостижимо. Этот алгоритм довольно хороший, но проблема в том, что он
[03:39.180 --> 03:44.220]  требует пометок на графе, то есть он требует примерно линейной памяти.
[03:44.260 --> 04:05.700]  То есть стандартные алгоритмы требуют линейной памяти, хотя и
[04:05.700 --> 04:16.620]  работают за полинамеральное время. Вот. Но окажется, что с точки зрения
[04:16.620 --> 04:20.980]  алгоритмической памяти неориентированный случай и ориентированный случай
[04:20.980 --> 04:29.340]  друг от друга отличаются. Вот. Но ясно, что и то, и другое лежит в НЛ.
[04:29.340 --> 04:34.620]  Мы еще не знакомились близко с этим классом, но сейчас как раз с ним постепенно
[04:34.620 --> 04:59.420]  переходим. Ясно, что оба языка лежат в НЛ. Но хотя, может, не очень ясно, чтобы
[04:59.420 --> 05:03.580]  совсем ясно, там нужно немножко другое определение НЛ дать. Но в принципе, можно
[05:03.860 --> 05:08.900]  сказать так, что у нас будет счетчик, все-таки можно сказать, почему ясно, у нас
[05:08.900 --> 05:13.060]  будет счетчик числа шагов. И дальше мы начинаем с С и просто начинаем
[05:13.060 --> 05:17.580]  недетерминированно идти по ребрам. То есть сколько там ребер выходят, столько у нас
[05:17.580 --> 05:24.140]  вариантов действия, и мы один из них выбираем. И делаем столько шагов, сколько
[05:24.140 --> 05:31.260]  вершин у графия. Дальше, если есть какой-то путь из С в Т, то есть путь без циклов,
[05:31.980 --> 05:36.500]  потому что все циклы можно удалить. Этот путь из циклов будет не длиннее, чем
[05:36.500 --> 05:43.660]  число вершин в графе. Поэтому можно сделать N шагов. Если хотя бы одна ветка
[05:43.660 --> 05:47.860]  придет в Т, значит путь есть. А если ни одна не придет в Т, значит пути нет.
[05:47.860 --> 05:53.860]  И это как раз то же самое, что происходит в НЛ. Поэтому действительно оба языка
[05:53.860 --> 05:59.860]  лежат в НЛ. Но дальше есть довольно сложная
[05:59.860 --> 06:16.260]  теорема Рейнгольда, что U path
[06:16.260 --> 06:21.700]  на самом деле лежит в L. Что может каким-то образом на логографической памяти
[06:22.260 --> 06:27.340]  именно для неориентированного графа понять, лежит он в L или нет. Но это реально
[06:27.340 --> 06:38.620]  сложная теорема, она доказана не так давно, в 2005 году, уже в этом веке. Используй
[06:38.620 --> 06:43.140]  довольно сложную технику. Я ее иногда рассказываю на спецкурсах, но это
[06:43.140 --> 06:49.020]  занимает 3-4 лекции. Там нужно изучить много специальных конструкций. Но знать
[06:49.020 --> 06:55.580]  эти мнения полезно, потому что, например, можно с ее помощью про какие-нибудь другие
[06:55.580 --> 07:10.260]  задачи тоже доказывать, что они лежат в L. Например, следствие такое,
[07:10.860 --> 07:23.460]  что 3 лежит в L, но 3 означает, что граф является деревом. Вот почему, но что такое
[07:23.460 --> 07:32.420]  дерево вообще? Дерево связано с графом без циклов,
[07:32.420 --> 07:42.220]  вот. Это даже более простой шаг, что просто проверка
[07:42.220 --> 07:46.900]  на связанность лежит в L. Потому что проверка на связанность означает, что мы
[07:46.900 --> 07:52.980]  для каждой пары вершин проверяем, есть между ними путь или нет. Ну и, соответственно,
[07:52.980 --> 07:59.660]  можно устроить перебор. Да, 3 это немножко более сложно, более простое следствие,
[07:59.660 --> 08:11.380]  что язык связанных графов connected лежит в L, потому что нужно по циклу устроить перебор.
[08:11.380 --> 08:23.060]  Но если примитивно делать, то нужно выделить перебор под X, перебор под Y, и дальше проверка
[08:23.060 --> 08:47.300]  наличия пути из X в Y. Ну и, соответственно, можно перебирать X, перебирать Y и
[08:47.300 --> 08:51.580]  на одной и той же памяти проверять, соответственно, всех вершин N. Поэтому тут
[08:51.580 --> 08:58.540]  у нас логарифм N битов занят, и тут логарифм N, и еще какой-то большой логарифм на эту проверку.
[08:58.540 --> 09:12.380]  Поэтому получается логарифмическая процедура. Ну а после этого проверка на древесность будет
[09:12.380 --> 09:16.260]  работать так, что такое дерево. Значит, по определению, связанный граф без циклов.
[09:16.260 --> 09:24.940]  Соответственно, мы сначала проверили связанность, а потом проверили, что нет циклов. Ну как это проверять?
[09:24.940 --> 09:30.740]  Можно что-нибудь другое проверять. Например, можно проверять, что есть такая теремма,
[09:30.740 --> 09:36.660]  что граф — это дерево тогда и только тогда, когда он связан, и в нем число ребер одно меньше,
[09:36.660 --> 09:43.140]  чем число вершин. И вот это вот число ребер гораздо проще подсчитывать, чем проверять,
[09:43.140 --> 09:49.980]  что нет циклов. Вот. Можно, если только в рамках связанности оставаться, можно такое проверять,
[09:49.980 --> 09:55.940]  что сам граф связан, но если любое ребро из него вычеркнуть, то получится несвязанный граф.
[09:55.940 --> 10:06.860]  Это тоже критерий. На древесность можно его проверять. Что еще раз?
[10:13.940 --> 10:23.260]  Ну понятно, как это будет сделано, что когда мы проверяем, когда мы хотим узнать, есть ли ребро в том графе,
[10:23.260 --> 10:28.820]  который мы проверяем, то мы сначала смотрим, есть ли оно в исходном графе, а потом смотрим,
[10:28.820 --> 10:34.300]  не совпадает ли оно с тем, который вычеркнули. Вот. Если есть и не совпадает, то оно есть,
[10:34.300 --> 10:42.780]  а если есть и совпадает, или если его изначально не было, то его нет. Вот. В общем, так или иначе это
[10:42.780 --> 10:49.620]  можно проверить. Ну и другие такого же рода вещи, там какая-то уницикличность, там еще чего-нибудь.
[10:49.620 --> 11:00.860]  Это все можно проверять. Там двудольность даже можно проверить. В общем, это все можно сводить
[11:01.180 --> 11:15.180]  к наличию пути. Вот. Хорошо. Значит, соответственно, вот, а для пути в ориентированном графе ничего такого нет.
[11:15.180 --> 11:40.380]  То есть в то же время задача ПФ, ориентированная, будет НЛ полной. Вот. Это мы обсудим попозже,
[11:40.380 --> 11:47.700]  почему это так. Но вот тут видна некоторая разница, что в неретеронографе это Л, а в ориентированном
[11:47.700 --> 11:55.180]  это НЛ полная, и гипотетически это не ВЛ. Вот. Это мы поговорим попозже. Да. Ну, относительно
[11:55.180 --> 11:59.020]  логарифмической, конечно, да, нет. Потому что это все внутри П происходит, поэтому старую
[11:59.020 --> 12:04.540]  полинарную нельзя использовать. Вот. А относительно логарифмической, что конкретно это означает,
[12:04.540 --> 12:09.300]  вот, поговорим попозже. Потому что сейчас я хочу сказать следующее, что на самом деле то, что вот
[12:09.300 --> 12:16.500]  проверка надревесности лежит в Л, можно доказать более элементарными методами, и довольно красиво.
[12:16.500 --> 12:28.380]  Значит, без ссылки на тиреморинголь, да. Элементарное доказательство соответственно
[12:28.380 --> 12:44.340]  того, что проверка надревесности лежит в Л. Так. Ну, смотрите, значит, что мы знаем про дерево,
[12:44.340 --> 12:55.220]  и что мы умеем проверять точно. Ну, а мы умеем проверять, что в графе на одно, значит,
[12:55.220 --> 13:04.180]  ребер на один меньше, чем в вершине. Ну, то есть, вот это как первое соображение, значит, что можно
[13:04.180 --> 13:31.180]  проверить. Значит, можно проверить, что в графе число ребер на единицу меньше
[13:34.180 --> 13:52.980]  числа вершин. Ну, это как бы у нас граф не задавался, уж ребра мы как-нибудь сможем посчитать
[13:52.980 --> 13:59.100]  на логарифмической памяти. Заведен для них счетчик. Да, если он смотрит за смежностью, то мы
[13:59.100 --> 14:06.700]  просто идем по ней, считаем единица. Ну, может, пополам делим, если она симметричная. Если у нас
[14:06.700 --> 14:12.260]  просто список ребер, то мы просто идем по нему и считаем, сколько там ребер. В общем, вот это вот
[14:12.260 --> 14:18.380]  можно проверить на логарифмической памяти. Значит, дальше. И это, конечно, еще не критерий. Потому
[14:18.380 --> 14:23.940]  что что может быть? Либо это дерево, либо это несвязанный граф, у него несколько компонент,
[14:23.940 --> 14:33.580]  и на самом деле, грубо говоря, не совсем точно, но если грубо говорить, там будет циклов столько же
[14:33.580 --> 14:44.100]  на один меньше, чем компонент связанности. Это не совсем точно, но это, интуитивно говоря, за счет
[14:44.100 --> 14:51.540]  того, что мы одно ребро убираем, у нас граф распадается. Мы его должны добавить где-то еще, за счет
[14:51.700 --> 15:01.940]  цикла появится. И, может быть, там что-то еще делаем. Так, в общем, что точно можно сказать? Значит,
[15:01.940 --> 15:07.940]  что если при этом, значит, если это не выполнено, значит, точно не дерево. Если это выполнено,
[15:07.940 --> 15:14.060]  то, вообще говоря, есть два варианта. Может быть так, что там есть несколько нетривиальных
[15:14.060 --> 15:19.740]  компонент, в каждой из которых есть ребра. Тогда, соответственно, в каждой компоненте
[15:19.740 --> 15:39.260]  число ребр будет меньше, чем m-1. Значит, если это неверно, то есть два варианта. Да, значит,
[15:39.260 --> 16:07.940]  либо в каждой компоненте связанности число ребр строго меньше, чем m-1, где n число вершин
[16:07.940 --> 16:14.700]  во всем графе. То есть, n-1 число ребр во всем графе. Либо у нас есть несколько компонент,
[16:14.700 --> 16:20.620]  связанных с ребрами, тогда в каждой из них меньше, чем m-1 ребро. Либо есть изолированные вершины,
[16:20.620 --> 16:33.780]  либо есть изолированные вершины, которые ни с какой другой не соединены. Но, соответственно,
[16:33.780 --> 16:41.260]  наличие изолированных вершин тоже можно проверить. Если там вообще в графе больше,
[16:41.260 --> 16:50.100]  чем одна вершина, но при этом есть изолированная, значит, он тоже не дерево. Получается, что вторую
[16:50.100 --> 17:05.580]  часть наличия изолированных вершин тоже можно проверить на логеретнической памяти. Тоже проверяется,
[17:05.580 --> 17:19.020]  n это число вершин во всем графе. Соответственно, m-1 это число ребр во всем графе. Либо у нас
[17:19.020 --> 17:28.140]  ребра разбежались по разным компонентам, тогда в каждой компоненте меньше, чем n-1. Либо они все
[17:28.140 --> 17:35.460]  собрались в одну, но тогда, если это не дерево, значит, есть изолированные вершины. Ну вот,
[17:35.460 --> 17:45.860]  соответственно, если есть изолированные вершины, то это тоже мы проверим, это будет не дерево. А дальше
[17:45.860 --> 18:09.740]  в первом случае можно начать проводить некоторый обход. Тут, значит, можно устроить обход графа.
[18:09.740 --> 18:19.660]  Значит, я сейчас так неформально нарисую, а потом говорим формально, что это значит. Значит,
[18:19.660 --> 18:34.260]  вот два варианта. Тут пусть будет дерево, а тут пусть будет не дерево, но, например, такой
[18:34.260 --> 18:48.180]  нециклический граф. Это, что в графе число ребер на единицам меньше, чем числа вершин.
[18:48.180 --> 19:04.460]  Ой, да, сейчас, правильно, это да, не то. Сейчас, правильно вы говорите, не то я написал. Если,
[19:04.460 --> 19:20.900]  наоборот, если это верно, но граф не дерево, если это верно, но граф не дерево,
[19:20.900 --> 19:41.420]  то тогда вот два варианта. Спасибо за уточнение. Вот, значит, смотрите, я тут так хорошо нарисовал
[19:41.420 --> 19:54.020]  на плоскости, и такие вот графы можно обходить по правой-левой руке. Тут берем, берем вот так вот
[19:54.020 --> 20:11.300]  обходим. Значит, тут всюду есть там какое-то направление движения, и получается, что мы на
[20:11.300 --> 20:18.580]  самом деле каждый, значит, каждый ребро мы проходим два раза, если это дерево, значит, один раз в
[20:18.580 --> 20:27.260]  одну сторону, другой раз в другую. Ну, я написал планарный, да, сейчас поговорим о том, как это вообще в
[20:27.260 --> 20:48.660]  общем случае делать. Вот, а вот если, например, тут будет один цикл, то тут получилось, что не все
[20:48.660 --> 21:02.100]  ребра прошел два раза туда-обратно. Вот, и вообще, если вот только на этот обход смотреть, то может
[21:02.100 --> 21:07.500]  показаться, что нужно просто его устроить этот обход и посмотреть, прежде чем мы пришли на то же
[21:07.500 --> 21:13.620]  самое ребро в том же самом направлении, мы все ребра прошли туда-обратно. А как это проверить?
[21:13.620 --> 21:18.620]  Ну, нужно посчитать, вернее, что мы там два, наверное, минус один шагов сделали, прежде чем
[21:18.620 --> 21:28.660]  вернуться обратно. Вот, но, к сожалению, только для планарных графов это верно, что, действительно,
[21:28.660 --> 21:36.540]  если это дерево, то мы пройдем два раза туда-обратно по каждому ребру, прежде чем вернемся на исходное,
[21:36.540 --> 21:41.980]  а если это не дерево, но планарный граф, тогда мы меньше, чем два раза пройдем по некоторым
[21:41.980 --> 21:56.180]  ребрам. Вот, но, к сожалению, в общем виде для непланарх это неверно. Вот, неверно, что мы, что если мы
[21:56.180 --> 22:01.260]  прошли два раза по каждому ребру в одну и другую сторону, то этот граф был деревом.
[22:01.260 --> 22:16.260]  Ну, это вы правильно говорите, да, и вообще у нас, на самом деле, это такая иллюстрация, да, а на самом деле у
[22:16.260 --> 22:23.860]  нас нет никакого расположения на плоскости, и мы вам ничего не можем сделать. Вот, поэтому, значит,
[22:23.860 --> 22:37.100]  без рисунка на плоскости обход делается так. Значит, как устроен обход? Как устроен обход?
[22:37.100 --> 22:44.940]  Значит, после, значит, в отличие от самого графа, обход ориентированный, да, то есть у обхода есть
[22:44.940 --> 23:04.140]  направление. Соответственно, после ребра и ежи, значит, обход идет в точку K,
[23:04.140 --> 23:26.980]  которая равна следующему, да, значит, K у нас минимум из х больше и таких, что есть ребро и ежи в х,
[23:26.980 --> 23:35.820]  вот, если это множество не пусто, да, то есть если ежи соединена с какой-то вершину,
[23:35.820 --> 23:43.900]  которой номер больше, чем и, тогда, соответственно, минимально из таких вершин ребро идет, значит,
[23:43.900 --> 23:59.380]  если это множество не пусто. Но это и, соответственно, K равнеется просто минимум из таких х,
[23:59.380 --> 24:18.620]  что gx лежит в е, соответственно, иначе. Вот, в крайнем случае, если у нас g это вообще висячая вершина,
[24:18.620 --> 24:33.260]  да, то тогда обход пойдет обратно в и. Вот, но можно расставить номера так, чтобы вот этот обход
[24:33.260 --> 24:39.100]  соответствовал тому правилу, но более-менее номера так и должны быть расставлены. Значит,
[24:39.100 --> 24:57.620]  тут один, два, три, четыре, пять, шесть, семь, восемь, девять, десять и дальше одиннадцать,
[24:57.620 --> 25:05.780]  двенадцать, тринадцать. Да, тогда, смотрите, мы начинаем с один два, начинаем с один два,
[25:05.780 --> 25:10.700]  но два это висячая вершина, поэтому мы собираемся только с единицей, мы возвращаемся с единицей.
[25:10.700 --> 25:16.980]  Дальше, смотрите, мы пришли из двойки, соответственно, мы идем в минимальный следующий номер, который
[25:16.980 --> 25:22.500]  соединен с единицей, это тройка, в данном случае. Да, возвращаемся все обратно, потом в четверку,
[25:22.500 --> 25:27.580]  потом обратно, потом в пятерку, потом это уже не висячая вершина, мы идем в минимальную,
[25:27.580 --> 25:32.660]  с номером большей единицы, с которой соединена еще пять, а дальше соединен шестой из одиннадцатой,
[25:32.660 --> 25:42.260]  поэтому выбираем шестой. Ну и так дальше. По этому правилу, теперь из шестой нужно минимальную,
[25:42.260 --> 25:48.140]  с номером больше пяти, которая соединена, это из семьи и восемь, это семь получается. Ну и так
[25:48.140 --> 25:54.900]  далее. В общем, обход будет завершен, и мы, соответственно, обойдя все ребра, два раз туда
[25:54.900 --> 26:08.300]  обратно, придем снова вот сюда. Ну это пресне еще важно. А понимаешь, что мы завершились,
[26:08.300 --> 26:13.020]  когда то ребро, с которым мы стартовали, снова пройдено в том же самом направлении,
[26:13.020 --> 26:22.860]  с которым мы стартовали. Вот, тогда смотрите, значит, ясно, что при таком обходе,
[26:22.860 --> 26:32.740]  значит, при таком обходе каждое ребро мы можем пройти максимум дважды. Потому что если мы его
[26:32.740 --> 26:35.980]  прошли трижды, значит, два раза было в одном направлении, значит, мы уже зациклились.
[26:35.980 --> 26:59.860]  Получается, что при таком обходе, при таком обходе каждое ребро, каждое ребро пройдено
[26:59.860 --> 27:18.860]  максимум дважды. Нет, мы как раз, мы, конечно, можем зациклиться, но нас именно интересует
[27:18.860 --> 27:26.300]  размер цикла. Мы не только можем, но и должны зациклиться. Но утверждение, что это случится не
[27:26.300 --> 27:38.180]  позже, чем мы два раза пройдем по каждому ребру. Вот, соответственно, если, да, теперь вот в этом
[27:38.180 --> 27:45.180]  случае, значит, если число ребра меньше чем n-1 в компоненте связанности, да, ясно, что при обходе
[27:45.180 --> 27:52.660]  мы также не можем выбраться за пределы компонента связанности. Да, мы только по ребрам будем ходить,
[27:52.660 --> 28:06.060]  поэтому за пределы компонента не выберемся. Вот, да, соответственно, при этом, при этом он останется
[28:06.060 --> 28:26.220]  внутри компонента связанности. Вот, ну, соответственно, получается, что если ребер меньше чем n-1,
[28:26.220 --> 28:40.020]  то тогда шагов будет меньше, чем 2 на n-1 до зацикливания. Значит, если ребер меньше, чем n-1,
[28:40.020 --> 28:56.100]  то тогда получается, что длина цикла должна быть меньше, чем 2 на n-1. Вот, ну, и остался
[28:56.100 --> 29:01.140]  доказать, что с деревом все-таки все будет нормально, независимо от нумерации, да, это вот,
[29:01.140 --> 29:07.380]  я там пронумерал так, чтобы именно тот обход, который я нарисовал, получился, а так при любой
[29:07.380 --> 29:15.900]  нумерации вершин на дереве будет цикл, проходящий по каждому ребру, два раза. Да, то есть, соответственно,
[29:15.900 --> 29:33.380]  если, значит, если ребер в точности n-1 и это дерево, значит, и это дерево, то тогда получается,
[29:33.380 --> 29:50.500]  что длина обхода будет 2. Да, не, меньше либо равно в точности равно 2 на n-1. Вот, ну, это доказывается
[29:50.500 --> 30:01.620]  более-менее по инукции. Да, вообще, давайте я попробую сношу руменифировать на картинке,
[30:01.620 --> 30:11.700]  потом обсудим, как это превратить в формальное рассуждение. Ну, значит, на самом деле удобно, да,
[30:11.700 --> 30:16.620]  хотя префрес даже неважно, да, неважно, откуда мы начинаем. Вот, пусть есть, значит, пусть есть
[30:16.620 --> 30:27.060]  какой-то корень, значит, мы одну вершину выбрали, и это у нас будет корень. И дальше есть у этого
[30:27.060 --> 30:35.180]  корня, значит, есть непосредственные потомки, значит, ну, например, вот, и j и k. И, соответственно,
[30:35.180 --> 30:54.900]  у каждого потомка есть какое-то поддерево. Вот, и, например, значит, например, мы начали
[30:54.900 --> 31:05.300]  с ребра из r в i. Смотрите, значит, по правилам, если это не висячая вершина, а тут еще что-то есть,
[31:05.300 --> 31:15.620]  то тогда дальше обход должен быть, то есть дальше шаг из i должен быть не обратно в r, а куда-то
[31:15.620 --> 31:24.020]  здесь внутри поддерево. Да, то есть если есть еще какие-то соседи, кроме r, то тогда шаг будет
[31:24.020 --> 31:31.780]  в минимального соседа, у которого номер больше, чем r. И дальше все будет проходить вот внутри этого
[31:31.780 --> 31:41.620]  поддерево так же, как если бы только оно и было. Вот, и нужно только доказать, что обратно из i в r
[31:41.620 --> 31:49.540]  пусть пойдет, только когда он уже целиком обойдет это поддерево. Вот, ну а почему это будет так? Ну,
[31:49.540 --> 31:56.820]  потому что вот у i есть какие-то соседи, есть r. И здесь вот под деревья она обходит в порядке,
[31:56.820 --> 32:01.300]  соответственно, номеров этих соседей, и только когда она их всех обойдет, она уже вернется в r.
[32:01.300 --> 32:09.300]  Поэтому, соответственно, идет поход сюда, дальше обход вот этого поддерева, и потом только
[32:09.300 --> 32:18.820]  возвращение сюда. И дальше точно так же по очереди будут обходиться все остальные поддеревья. Вот,
[32:18.820 --> 32:24.420]  ну и дальше получается, что по индукции в поддеревях каждое будет пройдено дважды туда обратно, и вот эти
[32:24.420 --> 32:29.500]  ребра тоже будут пройдены дважды туда обратно, когда мы идем в поддерево, и потом их не возвращаемся.
[32:29.500 --> 32:52.780]  Это хороший вопрос, но, опять же, потому что, если посмотреть на номера всех соседей i, то они как бы цикл образуют,
[32:52.780 --> 33:00.180]  да, r, потом минимальное больше r, потом минимальное больше того, и тогда, и потом, как перескакивает
[33:00.180 --> 33:06.100]  через ноль, да, будет просто минимальный, минимальный на следующий, потом снова r. И, соответственно,
[33:06.100 --> 33:11.380]  вот здесь соседи в том порядке будут обходиться, когда они все будут объединены, то после этого
[33:11.380 --> 33:21.180]  нужно будет обязательно вернуться в r. Нет, не обязательно, у нас все по циклу. Да, у нас пока есть
[33:21.180 --> 33:26.460]  больше, пока есть номера больше, чем тот, куда мы пришли раньше, мы идем в большее, а когда они
[33:26.460 --> 33:30.980]  закончились, мы приходим по циклу в самые маленькие и снова идем по возрастанию.
[33:30.980 --> 33:44.220]  Ну тогда сначала будут объединены те, у которых номера больше, а потом те, у которых меньше, а потом вернемся в r.
[33:44.220 --> 33:52.300]  Ну, потому что мы каждый раз собираем минимальное доступное.
[34:06.300 --> 34:13.180]  Нет, ну сначала будем обходить те, у которых номера больше r, да, потому что вот, ну в данном случае и
[34:13.180 --> 34:27.260]  у нас получается, что g вместо вот этого i, да, а вот это i вместо r. Сначала, пока есть номера больше r, мы их обходим, а потом с 0 начинаем, да.
[34:27.260 --> 34:43.100]  Нет, не больше, но раз это для любых верен. Просто потому что, ну если, если в третий раз все в два направления, то если мы в третий раз посетили, то он
[34:43.100 --> 34:59.020]  в два направления повторил, значит, мы уже зацепились. Поэтому до начала цикла, значит, до начала цикла больше двух нельзя, но просто для деревьев ровно два, а для остальных меньше ровно двух.
[34:59.020 --> 35:18.940]  Ну вот, значит, что здесь осталось сказать, что вот этот вот обход можно запускать на логатмической памяти, да, то есть нужно запомнить, с какого ребра мы начинали, а, вот, каждый раз
[35:18.940 --> 35:33.900]  помнить предыдущую вершину и текущую, перебирать там всех соседей текущей вершины и искать минимальные, которые подходят, и после этого, соответственно, предыдущую
[35:33.900 --> 35:46.860]  заменить на текущую, а текущую на ту, которую мы нашли, вот, и еще каждый раз сравнивать ребро из предыдущей в текущую с запомненным начальным, и еще нужно считать число ребер, вот.
[35:46.860 --> 35:59.820]  Ну вот, получается несколько счетчиков, да, то есть, самая первая вершина, вторая вершина, значит, предыдущая вершина, текущая вершина, счетчик для перебора икса и счетчик для подсчета шагов.
[36:00.740 --> 36:15.740]  Так, ну, вроде, шесть основных счетчиков получается, ну, может, еще несколько технических, чтобы работать, собственно, с графом, в общем, десятка счетчиков хватает, каждый из них не больше, чем м, и получается, что на все нужна логеркеническая память.
[36:16.660 --> 36:28.660]  Вот, так, ну, ничего, понятно? Ладно, да, сейчас перерыв, потом поговорим про NL.
[36:28.660 --> 36:49.580]  Так, давайте переходить к вопросу про NL, ну, видимо, сначала нужно поговорить про то, какая там свадимость, что такое логеркеническая свадимость.
[36:59.580 --> 37:09.580]  Ну, если коротко, то это свадимость, которая задается логеркенической вычиненной функцией.
[37:09.580 --> 37:37.500]  Да, то есть, в целом, определение такое же, как и обычно, значит, а-логеркенические свойства к b, если существует логеркенические вычислимая функция f, такая, что, значит, для любого x,
[37:40.500 --> 37:52.500]  x принадлежит a, тогда, только тогда, когда f от x принадлежит b. Вот, ну, и нужно сказать, что такое логеркенические вычислимая.
[37:53.420 --> 37:56.420]  Значит, ну, для этого есть два подхода.
[38:05.420 --> 38:12.420]  Значит, два определения логеркенической вычислимости, да, NL, можно считать одно из них определением, да, а другое свойством.
[38:13.340 --> 38:31.340]  Вот, значит, первое такое, что, значит, у нас есть логеркеническая машина, но еще с выходной лентой, на которую биты ответы печатаются один с другим.
[38:32.260 --> 38:45.260]  Да, значит, то есть первый вариант, есть логеркенические вычислимая машина,
[38:46.180 --> 39:05.180]  значит, ну, которая, соответственно, x преобразует в f от x, но и здесь имеется в виду, что биты f от x печатаются слева направо,
[39:06.100 --> 39:08.100]  да, значит, без возможности изменения.
[39:11.100 --> 39:13.100]  Здесь биты ответа
[39:18.100 --> 39:21.100]  печатаются слева направо
[39:27.100 --> 39:31.100]  и, соответственно, не меняются, не запоминаются.
[39:36.100 --> 39:45.100]  Вот, тогда, соответственно, есть там входная лента неизменяемая тоже, но по которой можно двигаться в любую сторону и читать.
[39:46.100 --> 39:48.100]  Есть маленькая рабочая, на которой памяти считается,
[39:49.100 --> 39:56.100]  и есть выходная, на которой вот биты печатаются один с другим, и потом их уже печатают слева направо.
[39:57.020 --> 39:59.020]  А также читать оттуда нельзя.
[40:02.020 --> 40:04.020]  Вот, еще есть второе определение.
[40:05.020 --> 40:13.020]  Второе определение, что просто есть два языка, значит, множество пар.
[40:13.940 --> 40:32.940]  Таких, что длина f от x больше либо равно i, значит, и множество пар x и i таких, что i тыб и i больше либо равно i,
[40:33.860 --> 40:52.860]  значит, и множество пар x и i таких, что i тыбит f от x равен единице, значит, вот эти два языка лежат в L.
[40:53.780 --> 41:01.780]  Вот, я тебе вкратце скажу, почему это эквалентное свойство.
[41:02.780 --> 41:11.780]  Значит, с первого и второго, пусть у нас есть такая машина, тогда мы можем ее запускать и просто игнорировать все, что она печатает,
[41:12.780 --> 41:14.780]  но мы только будем считать, сколько бит она напечатала.
[41:15.780 --> 41:20.780]  И дальше она в какой-то момент остановится, и у нас будет число напечатанных битов, это есть длина.
[41:21.700 --> 41:29.700]  И после этого нам просто нужно будет сравнить эту полученную длину с i, и это нам даст ответ вот на этот вопрос.
[41:30.700 --> 41:36.700]  Вот, а на этот вопрос нужно их тоже считать, пока соответственно не встретится i ты.
[41:37.700 --> 41:43.700]  И если до i-того дела дошло, он выведен равен единице, тогда тут нужно ответить да, а во всех остальных случаях нужно ответить нет.
[41:51.700 --> 42:12.700]  Это хороший вопрос, значит, это на самом деле зависит от деталей модели, но тут вроде бы стандарт модели должно следовать,
[42:13.620 --> 42:23.620]  потому что у вас число конфигурации определяется числом возможных записей на рабочей ленте плюс число указателей, и оно будет просто полиномиальным.
[42:24.620 --> 42:31.620]  Поэтому получится, что если вы уже вывели больше знаков, чем у вас есть конфигурации,
[42:32.620 --> 42:36.620]  то у вас конфигурация повторила, значит вы зациклились и будете до бесконечности печатать ответ.
[42:37.540 --> 42:46.540]  Так что это, конечно, должно быть, но вроде бы это просто будет следовать отсюда.
[42:47.540 --> 42:52.540]  Но в некоторых других ситуациях это может быть важно,
[42:53.540 --> 43:02.540]  например, в некоторых моделях вероятных вычислений нужно дельно потребовать, кроме логерсимической памяти, еще полиномиальное время,
[43:03.460 --> 43:08.460]  а в других не нужно, начинаются такие нескоро у него особенности.
[43:11.460 --> 43:16.460]  Ну, а значит, это если из первого-второго, ну и из второго-второго,
[43:17.460 --> 43:23.460]  получается так, пусть мы уже сколько-то битов напечатали и мы запомнили сколько, нам нужно очередной печатать.
[43:24.460 --> 43:31.460]  Тогда сначала запуская машину для первого вопроса мы понимаем есть вообще такой бит или нет.
[43:32.380 --> 43:35.380]  Если его нет, значит уже все напечатали, нужно остановиться.
[43:36.380 --> 43:41.380]  Если он есть, тогда мы запускаем машину для второго вопроса и понимаем, равен ли он единице.
[43:42.380 --> 43:45.380]  Если он равен, то печатаем единицу, если не равен, то печатаем ноль.
[43:46.380 --> 43:49.380]  Дальше увеличиваем счетчик и идем дальше.
[43:50.300 --> 43:52.300]  Вот.
[44:00.300 --> 44:02.300]  Так, хорошо.
[44:03.220 --> 44:07.220]  Ну, такая вот, значит такая сводимость применительно к лог-памяти,
[44:08.220 --> 44:12.220]  играет уже роль, что и полиномиальная сводимость для полиномиального времени.
[44:32.300 --> 44:35.220]  Вот.
[45:03.220 --> 45:11.220]  Вот, то есть тут будут всякие стандартные свойства выполнены типа того, что там транзитивность будет,
[45:12.220 --> 45:18.220]  или что если там A сводится к B, значит A в L,
[45:19.220 --> 45:21.220]  то тогда A в L.
[45:25.220 --> 45:28.220]  Вот, всякие такого рода утверждения, тут все будут выполнены.
[45:29.140 --> 45:34.140]  Ну и определение трудностей и полноты тоже будет аналогичное.
[45:35.140 --> 45:40.140]  То есть будет, значит, язык B, NL полон.
[45:42.140 --> 45:47.140]  Значит, если он сам лежит в NL,
[45:48.060 --> 45:59.060]  и для любого A из NL, значит, верно, что A логарифмически вводится в B.
[46:03.060 --> 46:11.060]  Вот. То есть, в общем, все определения те же самые, значит, с заменой полиномиальной сводимости на логарифмическую.
[46:11.980 --> 46:17.980]  Ну и всякие теремы будут те же самые, типа того, что если у нас какой-то там NL полный язык лежит в L,
[46:18.980 --> 46:21.980]  то тогда A равно NL, и так далее.
[46:22.980 --> 46:30.980]  В общем, это я все повторять не хотел бы, значит, хотел бы сосредоточиться на конкретных NL полных задачах.
[46:31.980 --> 46:33.980]  Ну и докажем то, что я уже анонсировал,
[46:34.900 --> 46:46.900]  что задача о наличии пути в ориентированном графе будет NL полный.
[46:47.820 --> 47:04.820]  Так, значит, теорема, что P, это будет NL полная задача.
[47:05.820 --> 47:10.820]  Но тут тоже есть много технических деталей, на которых я не хотел бы заострять внимание,
[47:11.740 --> 47:14.740]  хотел поговорить про саму суть этой теоремы.
[47:17.740 --> 47:25.740]  Значит, а суть состоит в том, что для логарифмической машины есть конфигурационный граф полиномиального размера.
[47:26.660 --> 47:52.660]  Значит, для логарифмической машины есть конфигурационный граф полиномиального размера.
[47:53.580 --> 48:01.580]  При этом, поскольку это недоторминированная машина, то там исходящей степени может быть больше единицы.
[48:03.580 --> 48:12.580]  Соответственно, если участие недоторминированное, то из каждой конфигурации есть ровно одна следующая допустимая.
[48:13.580 --> 48:16.580]  Если недоторминированная, то может быть больше, чем одна.
[48:17.500 --> 48:29.500]  Но так или иначе у нас определяется результат работы конфигурации этой недоторминированной машины.
[48:30.500 --> 48:35.500]  Так что если у нас достигнуто принимающее состояние, то ответ «Да».
[48:36.500 --> 48:41.500]  Если хоть на какой-то ветви достигнут, то ответ «Да», если на всех ветвях не достигнут, то ответ «Нет».
[48:42.420 --> 48:56.420]  Но можно искусственно сделать ровно одну принимающее вершину, и тогда вопрос о том, лежит ли слово в языке эквивалентен вопросу о том,
[48:56.420 --> 49:00.420]  есть ли в этом графе путь изначальной вершины вопринимающее.
[49:01.340 --> 49:23.340]  То есть х лежит ва, тогда и только тогда, когда в конфигурационном графе для ма,
[49:23.340 --> 49:46.260]  ма вместо машины, которая распынует а, в конфигурационном графе для ма есть путь из начальной вершины в принимающее.
[49:54.260 --> 50:06.260]  Но вот это и есть сводимость, то есть произвольный язык сводится к наличию пути, и дальше начинаются технические детали, почему аналогарифмическая.
[50:08.260 --> 50:14.260]  Ну, по крайней мере, это так может быть, потому что конфигурационный граф имеет полимерный размер.
[50:15.180 --> 50:31.180]  Вот как вы уточняли, что должно быть полимерное время работы, но раз у нас выход полимерной длины, то по крайней мере может быть полимерное время.
[50:31.180 --> 50:41.180]  Нам нужна более того логографическая память, и чтобы это аккуратно показать, нужно четко договориться о кодировании конфигурационного графа.
[50:42.100 --> 50:54.100]  То есть нужно, чтобы все конфигурации каким-то образом легко кодировались, так чтобы, ну тут удобно вот на это определение смотреть.
[50:54.100 --> 51:03.100]  Значит, х, х это как бы исходный х, по которому строится конфигурационный граф, а и, ну можно считать, что это пара вершин,
[51:04.020 --> 51:11.020]  да, можно считать, что граф задан на матрице смежности, а и задает пару вершин, и нам нужно понять между этой парой вершин есть ребро или нет.
[51:13.020 --> 51:23.020]  Ну вот если там кодирование какое-то достаточно хорошее, то тогда по этим кодам действительно можно на логографической памяти понять, есть там ребро или нет.
[51:23.940 --> 51:34.940]  Ну потому что что такое конфигурация? Конфигурация это содержимые рабочей ленты, внутреннее состояние машины и положение указателей на рабочей ленте и на входной ленте.
[51:36.940 --> 51:45.940]  Ну и соответственно у нас есть две таких конфигурации, нужно проверить, что из первого и второго идет переход в соответствии с программами машины Тьюринга.
[51:46.860 --> 51:56.860]  Ну грубо говоря, как это проверяется, что почти во всем эти конфигурации совпадают, кроме небольшой окрестности указателей, а в этой окрестности переход проводится по программам машины Тьюринга.
[51:57.860 --> 52:08.860]  Вот программ машины Тьюринга, это хоть и довольно большой текст, но он константной длины, то есть он вообще не зависит от длины входа, поэтому считать, что он просто дан целиком.
[52:09.780 --> 52:17.780]  Ну и мы соответственно ищем в этой программе нужную команду и проверяем, что то, что у нас произошло соответствует этой команде.
[52:20.780 --> 52:23.780]  Ну в общем такая вот идея, дальше можно это технически уточнять.
[52:25.780 --> 52:27.780]  Так, есть какие-нибудь вопросы?
[52:28.700 --> 52:47.700]  Конечно, потому что, смотрите, что дает X в точке зрения конфигурационного графа.
[52:48.620 --> 52:54.620]  X это фиксированные содержимые входной ленты, поэтому для разных X будут совершенно разные конфигурационные графы.
[52:56.620 --> 53:13.620]  Хотя, да, поэтому, когда мы вычисляем, есть ли там ребро, язык же или нет, мы должны посмотреть и на тот бит X, на котором стоит указатель, и это использовать при проверке.
[53:18.620 --> 53:28.620]  Ну они все, но они все для фиксированного X, то есть у нас X фиксированный, а содержимый рабочий лент какой угодно, новой графической длины.
[53:32.620 --> 53:40.620]  X это вход, да, X это вход, вход фиксирован, а содержимый рабочий лент какой угодно.
[53:40.620 --> 53:43.540]  Так.
[54:11.540 --> 54:13.540]  Так.
[54:16.540 --> 54:18.540]  Так.
[54:20.540 --> 54:22.540]  Так.
[54:25.540 --> 54:27.540]  Так.
[54:30.540 --> 54:32.540]  Так.
[54:35.540 --> 54:37.540]  Так.
[54:38.460 --> 54:40.460]  Так.
[54:45.460 --> 54:47.460]  Так.
[54:52.460 --> 54:54.460]  Хорошо.
[54:56.460 --> 55:03.460]  Но теперь надо изучать разные другие, значит, разные другие.
[55:04.380 --> 55:07.380]  НЛ полная задача.
[55:08.380 --> 55:14.380]  Так, давайте начнем с того, что изучим язык сильно связанности.
[55:15.380 --> 55:24.380]  Значит, S connected, S connected это множество таких G.
[55:25.300 --> 55:42.300]  Значит, G таких, что G это сильно связанный, сильно связанный ориентированный граф.
[55:43.220 --> 55:45.220]  Так.
[55:50.220 --> 55:54.220]  Значит, он, NL полный, эта задача.
[55:55.220 --> 55:59.220]  Ну и давайте сначала обсудим, почему она лежит в NL.
[56:03.220 --> 56:05.220]  Ну, смотрите, что такое сильно связанный.
[56:05.220 --> 56:10.220]  Сильно связанный означает, что для любой пары вершин i и g есть ребро из i в g.
[56:11.220 --> 56:14.220]  Не ребро в смысле, а путь, значит, путь из i в g.
[56:15.220 --> 56:19.220]  На самом деле, для этого достаточно, чтобы был путь из первой вершины во вторую,
[56:20.220 --> 56:24.220]  из второй в третью, из третью в четвертую и так далее, и из N в первую.
[56:28.220 --> 56:34.220]  Значит, соответственно, сильная связанность, сильная связанность.
[56:35.220 --> 56:47.220]  Верна тогда и только тогда, когда есть пути, значит, из первую в вторую, из вторую в третью,
[56:48.220 --> 56:54.220]  и так далее, из N минус первой в N и из N в первую.
[56:54.220 --> 56:58.220]  Вот. Ну и, как и прежде, значит, если есть какой-то путь, то есть путь без циклов.
[56:59.220 --> 57:03.220]  То есть, суммарная длина всех этих путей будет не больше, чем N в квадрате.
[57:06.220 --> 57:22.220]  Значит, суммарная длина всех путей будет не больше, чем N в квадрате.
[57:25.220 --> 57:27.220]  Максимум N в квадрате.
[57:36.220 --> 57:46.220]  Вот. Тогда, соответственно, недоторминированный алкоголь будет таким,
[57:46.220 --> 57:53.220]  что мы начинаем недоторминированные блуждания с первой вершины,
[57:54.220 --> 58:00.220]  и последовательно ждем, пока там встретится вторая, третья, четвертая и так далее, N и первая.
[58:03.220 --> 58:10.220]  То есть, тут получается недоторминированный алгоритм.
[58:10.220 --> 58:24.220]  А алгоритм заключается в том, что мы запускаем из вершины 1 недоторминированные блуждания
[58:26.220 --> 58:28.220]  на N в квадрате шагов.
[58:29.220 --> 58:31.220]  На N в квадрате шагов.
[58:35.220 --> 58:50.220]  Значит, и, соответственно, ждем встречи, соответственно, второй, третьей и так далее, N и первой.
[58:51.220 --> 59:00.220]  Ну, если они все встретились именно в таком порядке, то говорим да, а если нет, то нет.
[59:07.220 --> 59:14.220]  Ну вот, соответственно, если сильно связанность есть, то есть вот и такое блуждание, и алгоритм его найдет.
[59:15.220 --> 59:17.220]  Значит, одна из ветвей ровно по нему пройдет.
[59:18.220 --> 59:26.220]  Если сильно связанности нет, то какого-то одного из этих путей нет,
[59:27.220 --> 59:35.220]  и тогда, соответственно, если машина до него дойдет, например, если из пятой в шестую, например, нет,
[59:35.220 --> 59:39.220]  то даже если она дошла до пятой, потом она не сможет лечь в шестую.
[59:41.220 --> 59:43.220]  Либо она и до пятой не дойдет.
[59:44.220 --> 59:50.220]  В общем, так или иначе, так или иначе проверка не пройдет.
[59:52.220 --> 59:54.220]  Вот, поэтому этого N лежит.
[59:56.220 --> 59:58.220]  Так, ну что, понятно?
[01:00:00.220 --> 01:00:03.220]  Вот, а теперь почему N полнота?
[01:00:03.220 --> 01:00:23.220]  Значит, N полнота, значит, нужно свести, свести P, алгоритмически, к S connected.
[01:00:33.220 --> 01:00:35.220]  Так, как это можно делать?
[01:01:03.220 --> 01:01:22.220]  Так, смотрите, я картинку нарисую, значит, вот есть граф, вот есть вершина S, вот есть вершина T.
[01:01:23.220 --> 01:01:25.220]  И мы сделаем следующее.
[01:01:25.220 --> 01:01:44.220]  Значит, из всех остальных вершин мы добавим ребра в S, а также добавим в них ребра из T.
[01:01:44.220 --> 01:01:55.220]  Вот, тогда смотрите, во-первых, если пути из S в T не было, то он и не появится.
[01:01:57.220 --> 01:02:10.220]  То есть получается, что в исходный граф добавляем ребра T в S.
[01:02:11.220 --> 01:02:15.220]  Соответственно, если пути не было, то он и не появится.
[01:02:24.220 --> 01:02:34.220]  Почему? Ну, если пути есть, то он есть там без циклов, тогда там по дороге S и T не встречается, только на краях S и T.
[01:02:34.220 --> 01:02:44.220]  А тогда, соответственно, вот эти добавленные ребра, они либо приходят в S, либо выходят из T, поэтому не могут там встретиться.
[01:02:45.220 --> 01:02:49.220]  Иначе там как раз второй раз по дороге встретится S или встретится T.
[01:02:50.220 --> 01:02:54.220]  Поэтому, значит, если в новом графе есть пути из S и T, то он был и в старом.
[01:02:54.220 --> 01:03:19.220]  Вот, а если путь был, ну, путь из S в T, понятное дело, то теперь есть все пути из U в S, потом в T, потом в V.
[01:03:24.220 --> 01:03:34.220]  Вот, ну, это для случаев, когда U и V не совпадают с S и T, когда не совпадает, там тоже все случаи перебираются.
[01:03:35.220 --> 01:03:38.220]  Да, то есть, например, ну, из T в S автоматически получается.
[01:03:39.220 --> 01:03:50.220]  А, ну, все остальные либо автоматически получаются прямо под добавленным ребром, либо аналогично, там не знаю, если U совпадает с S, то оно аналогично тоже получается.
[01:03:50.220 --> 01:04:00.220]  Вот, ну, то есть граф сильно связан, значит, граф сильно связан.
[01:04:01.220 --> 01:04:08.220]  Вот, а если пути не было, то он не появится, и, соответственно, граф не связан.
[01:04:08.220 --> 01:04:33.220]  Вот, ну, вот и получается, что действительно равносильно, то есть, вот эта вот тройка GST лежит в PATH, тогда и только тогда, когда наша построенная игра в G-штрих лежит в S-Connected.
[01:04:38.220 --> 01:04:47.220]  Вот, ну, действительно, сводим слогарифмическое, да, тут очень легко, просто, особенно в моде смежности легко.
[01:04:48.220 --> 01:05:00.220]  Мы проверяем, что если конец ребра это S, то добавляем единицу, если сначала ребра это T, то тоже добавляем единицу, а иначе берем тоже то же самое, что было в исходном графе.
[01:05:00.220 --> 01:05:10.220]  Вот, ну, вот пример, значит, пример другого NL-полного графа, NL-полного языка.
[01:05:14.220 --> 01:05:20.220]  Так, ну, что, какие-нибудь вопросы?
[01:05:21.220 --> 01:05:35.220]  Так, ну, у нас еще некоторое время есть, значит, для дальнейшего мне понадобится альтернативное определение NL, NL-сертификатное.
[01:05:36.220 --> 01:05:42.220]  Значит, сертификатное.
[01:05:49.220 --> 01:05:52.220]  Значит, CNP было очень удобно.
[01:05:52.220 --> 01:06:10.220]  Вот, было определение через нетерминированные машины, было определение через сертификаты, и в большинстве случаев мы излагали, как должен быть устроен сертификат, чтобы было принадлежно CNP.
[01:06:11.220 --> 01:06:20.220]  Здесь я пока что излагал, как должна нетерминированная машина быть устроена, чтобы, соответственно, вернуть правильный ответ.
[01:06:22.220 --> 01:06:39.220]  Вот, ну, первая идея сертификатного определения состоит в том, что, ну, просто будет то же самое, вместо полиминальной вычислимости будет логарифмическая, то есть тот же самый вертификатор, вот X и Y.
[01:06:40.220 --> 01:06:47.220]  Но просто мы скажем, что он будет не полиминальный по времени, а логарифмический по памяти.
[01:06:47.220 --> 01:06:52.220]  Но так в существовании не получится. Значит, если такое определение дать, то тоже NP получится.
[01:06:53.220 --> 01:07:01.220]  Если просто вертификатор логарифмический по памяти, но тем не менее он может как угодно изучать сертификат, то это будет тоже NP.
[01:07:02.220 --> 01:07:18.220]  Можете проверить, что когда мы проверяем три раскраска, например, нам не нужно хранить и работать со всей раскраской, а нам нужно в каждый момент проверять два соседних цвета, проверять, что они разные.
[01:07:19.220 --> 01:07:22.220]  И это будет вполне себе логарифмическая процедура.
[01:07:23.220 --> 01:07:38.220]  Поэтому здесь определение такое, да, с одной стороны все так же, да, должно быть, что X пронжета тогда и только тогда, когда существует Y такой, что V от XY равно единице,
[01:07:38.220 --> 01:07:51.220]  и V использует логарифмическую память, но кроме этого есть должно быть еще одно условие.
[01:07:51.220 --> 01:08:15.220]  Значит, V читает Y слева направо, то есть это такой сертификат для однократного чтения, и получается, что нельзя его целиком никуда копировать, можно запоминать только маленькую часть.
[01:08:15.220 --> 01:08:30.220]  Ну а, конечно, любые эти проверки коррекции три раскраски, они требуют, что мы туда-сюда ходили и все время разные цвета сравнивали, поэтому такого для NP уже не получится сделать.
[01:08:30.220 --> 01:08:58.220]  Ну а почему это так? Ну, на самом деле, это, конечно, примерно логично, да, то есть из нетерминированного сертификатного, но мы просто в сертификат запишем нужную ветку вычислений, и нужную ветку вычислений как раз слева направо нужно читать.
[01:09:01.220 --> 01:09:19.220]  Тут получается, что Y это ветвь вычислений, приводящая к положительному ответу.
[01:09:19.220 --> 01:09:47.220]  Но в обратную сторону сертификатного, из сертификатного в нетерминированные вычисления, ну просто тоже будем угадывать битв сертификат по одному. Мы все равно только слева направо читаем, поэтому каждый раз, когда хотим прочесть новый битв сертификата, мы вместо этого идем по одной из ветвей нетерминированного вычисления.
[01:09:47.220 --> 01:10:06.220]  То есть получается, что угадываем биты сертификата, ну а в остальном те же самые учления проводим, что были.
[01:10:06.220 --> 01:10:29.220]  Поэтому получается, что это одно и то же. Ну и тогда то, что у нас было, можно изложить попроще. Почему наличие ориентированного пути лежит в НЛ? Потому что в качестве сертификата мы сам этот путь можем передать.
[01:10:29.220 --> 01:10:46.220]  И как раз будем идти по нему от начала к концу и проверять, что действительно между соседними вершинами есть ребра. И будем каждый раз хранить там текущий вершин предыдущего, ну и какие-то счетчики, чтобы искать в графе есть там это ребро или нет.
[01:10:46.220 --> 01:11:05.220]  Вот почему сильно связан будет лежать в НЛ. Ну мы то же самое, то же путь туда положим, только вот такой вот длинный, который сначала проходит через один, потом через два, потом через три и так далее.
[01:11:05.220 --> 01:11:19.220]  И в итоге приходится снова в один. И то же будем идти по этому длинному пути, проверять, что он путь, что там все ребра есть необходимое, и что действительно встречается вершинами в таком порядке. Один, потом два, потом три и так далее.
[01:11:19.220 --> 01:11:36.220]  Вот. Ну вот оказывается, что хотя вот в этом случае довольно легко это излагалось и в тернах недотриминированного блуждания, в общем случае это будет не очень легко.
[01:11:36.220 --> 01:11:50.220]  Так, под конец я анонсирую то, что мы будем в следующий раз делать, по крайней мере на первый плане лекция. Значит на первый плане лекция, ну посмотрим, может это на всю лекцию затянется.
[01:11:50.220 --> 01:12:19.220]  Мы обсудим такую теорему, значит теорему Иммермана, теорема Иммермана Сейлопченья, которая заключается в том, что NL равняется QNL.
[01:12:19.220 --> 01:12:32.220]  В свое время в конце 80-х годов эта теорема Большой Фурор произвела, потому что до этого думали, что в общем L и NL примерно так же, как P и NP.
[01:12:32.220 --> 01:12:49.220]  И в NP есть гипотеза довольно широко принятая, что NP все-таки не равно QNP. То есть мы не можем быстро доказать, что чего-то нет. Можем только быстро доказать, что что-то есть.
[01:12:49.220 --> 01:13:04.220]  Но оказывается, что если речь идет не о времени, а о маленькой памяти, то тогда все-таки можно доказать, что чего-то нет, используя такую же память, как нужно для того, чтобы доказать, что оно есть.
[01:13:04.220 --> 01:13:24.220]  Ну вот, в общем мы это докажем, и это нам даст еще несколько других NL полных задач. Я думаю, что на сегодня можно поставить точку. Спасибо за внимание.
