[00:00.000 --> 00:10.000]  Окей, сегодня, так опять же, тема довольно большая,
[00:10.000 --> 00:14.160]  но я скорее так, широкими мазками, идейно расскажу
[00:14.160 --> 00:16.960]  хотя бы кусочек из того, что происходит здесь.
[00:16.960 --> 00:21.220]  Частично про это в том числе рассказывал Саша Панин
[00:21.220 --> 00:27.280]  из Яндекса на семинаре по выбору, но он скорее рассказывал
[00:27.280 --> 00:35.280]  о своих инженерных вещах, которые связаны, прежде всего, с тем, как это происходит у них в Яндексе
[00:35.280 --> 00:43.280]  либо в тех продуктах, в тех библиотеках, которые он и его коллеги производят в свободное время
[00:43.280 --> 00:45.280]  для такого массового общего пользования.
[00:45.280 --> 00:49.280]  Окей, мы скорее сейчас поговорим про то, что происходит в теории,
[00:49.280 --> 00:54.280]  но все равно, в любом случае, мне нужно дать вам интродакшн, чтобы было понимание того,
[00:54.280 --> 00:56.280]  зачем мы вообще это все делаем.
[00:56.280 --> 01:01.280]  А делать мы сегодня будем, соответственно, изучать распределенную оптимизацию.
[01:01.280 --> 01:04.280]  Оптимизация, которая происходит не на одном устройстве,
[01:04.280 --> 01:08.280]  потому что до этого мы с вами все делали все вычисления,
[01:08.280 --> 01:11.280]  отталкиваясь от того, что у нас есть вот какой-то компьютер,
[01:11.280 --> 01:15.280]  который умеет решать задачу оптимизации, окей, супер.
[01:15.280 --> 01:18.280]  Теперь, соответственно, хочется перейти к ситуации,
[01:18.280 --> 01:23.280]  когда у нас в вычислении делать не одно какого-то устройства, а сразу несколько.
[01:23.280 --> 01:30.280]  Ну, это связано с тем, что наблюдается сейчас прям бум машинного обучения,
[01:30.280 --> 01:34.280]  особенно языковых моделей, которые, я думаю, вы уже прекрасно знаете,
[01:34.280 --> 01:37.280]  используются не только для того, чтобы там общаться с людьми,
[01:37.280 --> 01:41.280]  генерировать запросы, там классифицировать тексты,
[01:41.280 --> 01:45.280]  но и вот эти все языковые модели являются более того хорошими апроксиматорами,
[01:45.280 --> 01:48.280]  которые, в принципе, можно использовать для любых задач,
[01:48.280 --> 01:50.280]  не обязательно связанных с текстами.
[01:50.280 --> 01:54.280]  Просто потому что модель огромная, куча весов, куча параметров,
[01:54.280 --> 01:57.280]  по факту она может апроксимировать любые зависимости
[01:57.280 --> 02:02.280]  и вытягивать любую полезную информацию не обязательно, это могут быть тексты.
[02:02.280 --> 02:06.280]  Ну и, опять же, тенденция, как я уже сказал, ведет к тому,
[02:06.280 --> 02:11.280]  что количество весов этих моделей, то есть оптимизационных переменных настройки,
[02:11.280 --> 02:16.280]  модели машинного обучения растет просто экспоненциальным образом,
[02:16.280 --> 02:20.280]  на графике видно, он заканчивается 2021 годом, сейчас 23,
[02:20.280 --> 02:23.280]  но тенденция сохраняется.
[02:23.280 --> 02:28.280]  К сожалению, пока комьюнити машинного обучения ничего лучше не придумала,
[02:28.280 --> 02:32.280]  кроме того, как просто увеличить размер модели и размер обучающей выборки,
[02:32.280 --> 02:35.280]  чтобы достигать более классных результатов.
[02:35.280 --> 02:40.280]  Туда или это путь или нет, в любом случае это приносит людям огромные деньги,
[02:40.280 --> 02:43.280]  поэтому почему бы нет, почему бы нет?
[02:43.280 --> 02:47.280]  Кажется, что все же, конечно, более умные вещи, это придумывать что-то более хитрое,
[02:47.280 --> 02:52.280]  более новое, идейное, а не просто увеличивать размер апроксиматора,
[02:52.280 --> 02:56.280]  но как бы кто их осудит, это же работает.
[02:56.280 --> 03:02.280]  Ну и, соответственно, с динамикой увеличения обучающих выборок ровно такая же ситуация,
[03:02.280 --> 03:05.280]  просто тут по оси Y отложено в алгоритмическом масштабе,
[03:05.280 --> 03:09.280]  поэтому тут тоже рост экспоненциальный, как и на верхнем графике.
[03:10.280 --> 03:17.280]  Поэтому, чтобы обрабатывать все это в безобразии, решать такие огромные задачи оптимизации,
[03:17.280 --> 03:19.280]  ну, современных вычислителей не хватает.
[03:19.280 --> 03:23.280]  То есть на одном вычислителе вы не обучите современную модель машинного обучения,
[03:23.280 --> 03:27.280]  точнее обучите, но к тому моменту, когда процесс обучения закончится,
[03:27.280 --> 03:30.280]  она уже будет, скорее всего, не актуальна.
[03:31.280 --> 03:36.280]  Поэтому крупные компании применяют такой подход, что они покупают целые дома
[03:36.280 --> 03:40.280]  с видеокартами, забивают их, соответственно,
[03:40.280 --> 03:44.280]  современными, этими самыми крутыми тензорными видеокартами,
[03:44.280 --> 03:47.280]  которые как раз предоставлены, производятся для машинного обучения,
[03:47.280 --> 03:49.280]  а не для игрушек.
[03:49.280 --> 03:54.280]  И этот домик, соответственно, жестко греясь, считает,
[03:54.280 --> 03:59.280]  вам обучает какую-то новую модель, которую потом выкатят в прод.
[04:00.280 --> 04:04.280]  Нормальный подход раскидать данные между вычислительными устройствами,
[04:04.280 --> 04:09.280]  и чтобы, соответственно, считать градиент, вам будут помогать не одна видеокарта,
[04:09.280 --> 04:11.280]  а сразу несколько.
[04:11.280 --> 04:17.280]  Второй подход такой, в некотором смысле, как раз более актуальный для наших реалий.
[04:17.280 --> 04:22.280]  У нас эти видеокарты покупать сейчас стало, ну и на самом деле до этого тоже было,
[04:22.280 --> 04:26.280]  далеко не самым приятным образом это можно было сделать,
[04:26.280 --> 04:31.280]  потому что дефицит на вычислительное устройство наблюдался всегда.
[04:31.280 --> 04:35.280]  Видеокарты, я не знаю, застали вы эти времена или нет,
[04:35.280 --> 04:38.280]  в плане, как бы ощутили вы на себе это или нет,
[04:38.280 --> 04:43.280]  но в какой-то момент эти современные видеокарты 30-го поколения NVIDIA,
[04:43.280 --> 04:47.280]  на которых все игрались и все писались от них,
[04:47.280 --> 04:50.280]  было сложно довольно купить.
[04:50.280 --> 04:54.280]  Ну и на самом деле с картами для машинного обучения та же самая ситуация.
[04:54.280 --> 04:59.280]  Хорошими вычислительными ресурсами сейчас в России, можно сказать,
[04:59.280 --> 05:02.280]  владеют единицы компаний.
[05:02.280 --> 05:06.280]  А если вообще говорить про прекрасные вычислительные ресурсы, то никто.
[05:06.280 --> 05:09.280]  Потому что, даже если так посмотреть, то тот же СБР, Яндекс
[05:09.280 --> 05:12.280]  и какие-нибудь там богатые университеты типа Скалтех,
[05:12.280 --> 05:15.280]  они тоже жалуются, что им просто не на чем считать.
[05:15.280 --> 05:18.280]  Хотя, на самом деле есть, но опять же,
[05:18.280 --> 05:23.280]  мощности такие, как у каких-то западных компаний мы воспроизвести не можем.
[05:23.280 --> 05:26.280]  Но есть из этого всего выход.
[05:26.280 --> 05:29.280]  Можно объединять эти просто усилия.
[05:29.280 --> 05:32.280]  Условно там крупные компании, плюс крупные университеты
[05:32.280 --> 05:36.280]  накупили какие-то неплохие видеокарты для вычислений.
[05:36.280 --> 05:39.280]  Это все можно объединить по сети интернет.
[05:39.280 --> 05:42.280]  Понятно, что это появится в проблемы в плане того,
[05:42.280 --> 05:47.280]  что это уже не так стабильно, как работа в пределах одного домика,
[05:47.280 --> 05:50.280]  где вы все контролируете самостоятельно.
[05:50.280 --> 05:53.280]  Третья парадигма, которая тоже становится суперпопулярной,
[05:53.280 --> 05:55.280]  это федеративное обучение.
[05:55.280 --> 05:58.280]  Это в некотором смысле диаметрально противоположный подход первым в двум.
[05:58.280 --> 06:01.280]  Если в первых двух случаях вы просто обучаете что-то большое
[06:01.280 --> 06:04.280]  на каких-то открытых данных и хотите это сделать быстрее,
[06:04.280 --> 06:06.280]  поэтому объединяйтесь.
[06:06.280 --> 06:11.280]  Федеративное обучение, ситуация иная, у вас здесь.
[06:11.280 --> 06:14.280]  Обучается, возможно, что-то не очень большое,
[06:14.280 --> 06:19.280]  но важно, что это обучается на каких-то приватных данных пользователей.
[06:19.280 --> 06:21.280]  В связи с тем, что вы хотите оттолкнуться от того,
[06:21.280 --> 06:24.280]  что у вас есть просто какие-то известные открытые датасеты
[06:24.280 --> 06:30.280]  и хотите в некотором смысле открыть такие золотые залежи данных,
[06:30.280 --> 06:33.280]  которые лежат на ваших телефонных планшетах в компьютерах.
[06:33.280 --> 06:40.280]  Точнее, даже не вы, а крупные гиганты, которые за счет этого хотят зарабатывать большие деньги.
[06:40.280 --> 06:42.280]  Они хотят, соответственно, залезть к вам в телефон,
[06:42.280 --> 06:44.280]  и на самом деле они уже давно там лазят.
[06:44.280 --> 06:47.280]  Просто вы этого не замечаете.
[06:47.280 --> 06:51.280]  И более-менее уважающие себя производители софта,
[06:51.280 --> 06:58.280]  типа Apple, Google, у них во многих сервисах уже встроены алгоритмы федеративного обучения,
[06:58.280 --> 07:01.280]  которые как раз обучают эту большую модель,
[07:01.280 --> 07:03.280]  не обязательно большую даже модель,
[07:03.280 --> 07:05.280]  на каких-то ваших пользовательских данных,
[07:05.280 --> 07:07.280]  которых просто тупо больше.
[07:07.280 --> 07:10.280]  И это можно использовать и в каких-то их целях,
[07:10.280 --> 07:13.280]  и в ваших целях, чтобы улучшать конкретно ваши продукты,
[07:13.280 --> 07:16.280]  какие-то, которые хранятся у вас локально.
[07:16.280 --> 07:18.280]  Плюс, соответственно, им зарабатывать на том,
[07:18.280 --> 07:20.280]  что они тянут от вас информацию,
[07:20.280 --> 07:24.280]  и как-то это используют в своей какой-то глобальной модели машинного обучения.
[07:24.280 --> 07:31.280]  Формально, соответственно, задача распределенная постановка выглядит следующим образом.
[07:31.280 --> 07:33.280]  Это далеко не единственное.
[07:33.280 --> 07:35.280]  Тут как раз в кнопочках у вас написано
[07:35.280 --> 07:38.280]  «Горизонтальная оффлайн постановка».
[07:38.280 --> 07:41.280]  Понятно, что есть еще и вертикальная, есть и онлайн.
[07:41.280 --> 07:43.280]  Вот как раз оффлайн онлайн мы уже знаем,
[07:43.280 --> 07:45.280]  но горизонтальная и вертикальная мы не знаем.
[07:45.280 --> 07:47.280]  Вертикальная сегодня касаться не будет.
[07:47.280 --> 07:48.280]  Суть очень простая.
[07:48.280 --> 07:52.280]  Хотите вычислить градиент, вот этой loss функции,
[07:52.280 --> 07:55.280]  которую вы считаете, вам может помочь что?
[07:55.280 --> 07:56.280]  Что может помочь?
[07:56.280 --> 08:01.280]  Ну то, что у вас на самом деле функция потерь-то она сепарабельна.
[08:01.280 --> 08:03.280]  Сепарабельна и разделяется на кусочки.
[08:03.280 --> 08:07.280]  То есть это просто loss на каждой из точки данных.
[08:07.280 --> 08:11.280]  Вот, поэтому вы можете теперь раскидать точки данных между устройствами,
[08:11.280 --> 08:14.280]  и на каждом устройстве будет какой-то хранится
[08:14.280 --> 08:16.280]  свой кусочек общей функции потери.
[08:16.280 --> 08:19.280]  Вы по нему спокойно можете считать градиенты.
[08:19.280 --> 08:22.280]  Ну и чтобы посчитать полный градиент функции f,
[08:22.280 --> 08:26.280]  вам нужно просто собрать эти кусочки в едино.
[08:26.280 --> 08:29.280]  И тогда получится уже полный градиент.
[08:29.280 --> 08:30.280]  Все, вся суть.
[08:30.280 --> 08:33.280]  За счет того, что вы разделяете данные,
[08:33.280 --> 08:35.280]  вы хотите быстрее считать градиент.
[08:35.280 --> 08:39.280]  Ну и вам помогает то, что как раз в некотором смысле
[08:39.280 --> 08:43.280]  градиент по каждому из кусочек данных считается независимо.
[08:43.280 --> 08:46.280]  Окей, самая простая процедура.
[08:46.280 --> 08:51.280]  Как обратить обычный градиентный спуск в распределенный градиентный спуск?
[08:51.280 --> 08:54.280]  Ну соответственно, берете веса модели,
[08:54.280 --> 08:56.280]  оптимизационные перемены,
[08:56.280 --> 09:00.280]  отправляете их всем устройствам.
[09:03.280 --> 09:08.280]  Устройства у вас считают градиент по своей локальной функции.
[09:08.280 --> 09:12.280]  Дальше они, соответственно, этот градиент отправляют обратно на сервер.
[09:12.280 --> 09:14.280]  Сервер эти градиенты принимает,
[09:14.280 --> 09:17.280]  усредняет, получает полный градиент,
[09:17.280 --> 09:20.280]  ну и делает шаг градиентного спуска, например.
[09:20.280 --> 09:22.280]  Дальше процесс повторяется.
[09:22.280 --> 09:24.280]  То есть появились новые оптимизационные перемены,
[09:24.280 --> 09:26.280]  сделан шаг метода,
[09:26.280 --> 09:28.280]  опять рассылаете эти оптимизационные переменные устройства,
[09:28.280 --> 09:31.280]  мне считают градиенты и так далее и так далее.
[09:31.280 --> 09:33.280]  Очень просто с точки зрения теории,
[09:33.280 --> 09:36.280]  с точки зрения теории это вообще не отличается от того,
[09:36.280 --> 09:42.280]  что происходит в обычном градиентном спуске.
[09:42.280 --> 09:44.280]  То есть тут какая-то специфика,
[09:44.280 --> 09:46.280]  она вообще не прослеживается.
[09:46.280 --> 09:48.280]  Реально, с точки зрения теории вот он шаг,
[09:48.280 --> 09:50.280]  и он понятен.
[09:50.280 --> 09:52.280]  Вы его можете спокойно сходимости следовать.
[09:52.280 --> 09:54.280]  Специфика она вот скорее в том,
[09:54.280 --> 09:58.280]  что это все вычисляется как на стороне именно реализации.
[09:58.280 --> 10:00.280]  Как посчитать средний градиент и так далее.
[10:00.280 --> 10:04.280]  Возвращаясь к вопросу, зачем нужна распределенность,
[10:04.280 --> 10:06.280]  понятно, мы уже вроде поняли,
[10:06.280 --> 10:08.280]  что за счет того, что мы раскидали данные,
[10:08.280 --> 10:11.280]  то есть в некотором смысле разделили нашу всю функцию потерь,
[10:11.280 --> 10:13.280]  мы можем вычислить градиент,
[10:13.280 --> 10:17.280]  полный градиент по нашей выборке значительно быстрее,
[10:17.280 --> 10:21.280]  то есть условно янустройство, они вычислят нам градиент вен раз быстрее.
[10:21.280 --> 10:23.280]  Но возникает такой вопрос,
[10:23.280 --> 10:28.280]  а в реальности почему-то не наблюдается полное распараллеливание при таком подходе.
[10:28.280 --> 10:30.280]  Почему?
[10:31.280 --> 10:34.280]  Да, происходят соответственно затраты на коммуникации,
[10:34.280 --> 10:39.280]  которые могут сильно портить вашу вот эту кайф от параллелизации.
[10:39.280 --> 10:41.280]  Причем эта проблема,
[10:41.280 --> 10:46.280]  она актуальна не только в каком-то там федеративном обучении,
[10:46.280 --> 10:50.280]  где у вас устройство там связано понятно по сети интернет
[10:50.280 --> 10:52.280]  и могут спокойно вылетать просто потому,
[10:52.280 --> 10:54.280]  чтобы там телефон отключили,
[10:54.280 --> 10:58.280]  или отрубили его от сети интернет и ничего никуда больше не передается.
[10:58.280 --> 11:00.280]  Ну и для коллаборативного обучения,
[11:00.280 --> 11:04.280]  когда вы тоже по сети интернет связываетесь с остальными устройствами,
[11:04.280 --> 11:08.280]  и тогда хочется как раз чтобы все работало быстрее,
[11:08.280 --> 11:13.280]  но опять же сеть интернет это не самый быстрый способ коммуникации,
[11:13.280 --> 11:16.280]  особенно когда вы там обучаете какую-то огромную модель,
[11:16.280 --> 11:18.280]  у которой там миллиарды параметров,
[11:18.280 --> 11:21.280]  эти миллиарды нужно передавать по интернету.
[11:21.280 --> 11:22.280]  Вот.
[11:22.280 --> 11:25.280]  Дорого, дорого, конечно, поэтому и долго.
[11:25.280 --> 11:29.280]  На самом деле в кластерном случае там ситуация не особо радужная,
[11:29.280 --> 11:33.280]  потому что там же тоже хочется, чтобы все это работало быстро,
[11:33.280 --> 11:36.280]  и там тоже приходится бороться с коммуникациями,
[11:36.280 --> 11:39.280]  несмотря на то, что там у вас все это соединено по какому-то кабелю,
[11:39.280 --> 11:41.280]  причем скорее всего даже хорошему кабелю,
[11:41.280 --> 11:43.280]  что-то типа того проволоконного,
[11:43.280 --> 11:46.280]  но все равно, все равно.
[11:46.280 --> 11:50.280]  Вопрос актуальный и полной параллелизации никогда нет.
[11:50.280 --> 11:51.280]  Вот.
[11:51.280 --> 11:54.280]  Сегодня поэтому мы говорим с вами про эффективные коммуникации,
[11:54.280 --> 11:57.280]  понятно, что вопросы они есть разные,
[11:57.280 --> 12:00.280]  какие можно вообще рассматривать в распределенной оптимизации,
[12:00.280 --> 12:03.280]  в том числе там приватность, федеративное обучение,
[12:03.280 --> 12:06.280]  но это тема не сегодняшней лекции.
[12:06.280 --> 12:07.280]  Вот.
[12:07.280 --> 12:09.280]  Сегодня мы про распределенные оптимизации.
[12:09.280 --> 12:12.280]  Первое, соответственно, первый сюжет,
[12:12.280 --> 12:14.280]  который вообще связан с эффективными коммуникациями,
[12:14.280 --> 12:16.280]  это сжатие информации.
[12:16.280 --> 12:18.280]  Сжатие информации, соответственно, все очень просто.
[12:18.280 --> 12:23.280]  Хотите сделать общение быстрее, эффективнее?
[12:23.280 --> 12:26.280]  Давайте тогда передавать не полную информацию,
[12:26.280 --> 12:29.280]  а какие-то сжатые ее варианты.
[12:29.280 --> 12:32.280]  Для этого используются, например, операторы квантизации,
[12:32.280 --> 12:35.280]  которые вот формально описываются следующим образом.
[12:35.280 --> 12:38.280]  Это некоторый какой-то стахастический оператор,
[12:38.280 --> 12:42.280]  вот, для которого выполнены следующие свойства.
[12:42.280 --> 12:46.280]  По матрежданию, этот оператор равен просто честному вектору X.
[12:46.280 --> 12:49.280]  В второй момент у него ограничены константы Омега.
[12:49.280 --> 12:52.280]  Общее определение, непонятно пока, что это такое.
[12:52.280 --> 12:55.280]  На самом деле, с такого рода операторами в некотором смысле сталкивались.
[12:55.280 --> 12:56.280]  Вот.
[12:56.280 --> 13:00.280]  И такой оператор, это, например, случайный выбор координат.
[13:00.280 --> 13:03.280]  Мы это затрагивали в координатном спуске,
[13:03.280 --> 13:06.280]  когда говорили про то, что можно считать просто градиенты по координатам.
[13:06.280 --> 13:10.280]  На самом деле, в случае координатного спуска есть и хороший бонус
[13:10.280 --> 13:12.280]  с точки зрения коммуникации,
[13:12.280 --> 13:14.280]  потому что вы не только считаете производную
[13:14.280 --> 13:16.280]  только по некоторым координатам,
[13:16.280 --> 13:19.280]  но еще и передаете только эти координаты.
[13:19.280 --> 13:21.280]  То есть, если мы говорим про распределенный случай.
[13:21.280 --> 13:22.280]  Вот.
[13:22.280 --> 13:23.280]  Ну и здесь это все реализовано.
[13:23.280 --> 13:28.280]  Соответственно, выбираете какой-то набор координат размера K.
[13:28.280 --> 13:29.280]  Размера K.
[13:29.280 --> 13:30.280]  Вот.
[13:30.280 --> 13:33.280]  И, соответственно, эти координаты и передаете.
[13:33.280 --> 13:36.280]  То есть, только их оставляете в итоговом векторе.
[13:36.280 --> 13:38.280]  Иногда у меня к вам вопрос,
[13:38.280 --> 13:41.280]  а зачем вот здесь дополнительно в бахана D делить на K?
[13:44.280 --> 13:45.280]  Для мат ожидания.
[13:45.280 --> 13:49.280]  Чтобы по математическому ожиданию у вас тут появился несмещенный вектор.
[13:49.280 --> 13:53.280]  Когда вы берете мат ожидания от этого оператора,
[13:53.280 --> 13:55.280]  чтобы там появилось все четко,
[13:55.280 --> 13:57.280]  вам нужно D делить на K.
[13:57.280 --> 13:58.280]  D делить на K.
[13:58.280 --> 14:01.280]  Но это ровно потому, что мы, как уже много раз обсуждали,
[14:01.280 --> 14:03.280]  в том же координатном спуске добавляем D.
[14:03.280 --> 14:09.280]  Добавляли D перед координатой, чтобы, опять же, в среднем у вас все было хорошо.
[14:09.280 --> 14:10.280]  Вот.
[14:10.280 --> 14:11.280]  Окей.
[14:12.280 --> 14:14.280]  Можно вычислить Омега.
[14:14.280 --> 14:19.280]  В принципе, делается ровно то же самое, как с мат ожиданием.
[14:19.280 --> 14:24.280]  В частности, вы расписываете выражение конкретно для оператора компрессии.
[14:24.280 --> 14:26.280]  Расписываете его по координатно.
[14:26.280 --> 14:31.280]  А дальше там математическое ожидание вносится под сумму.
[14:31.280 --> 14:37.280]  И для каждой компоненты вы знаете, что с вероятностью K делить на D вы ее берете.
[14:37.280 --> 14:40.280]  А с вероятностью, соответственно, 1 минус K делить на D.
[14:40.280 --> 14:42.280]  Вы ее не берете.
[14:42.280 --> 14:48.280]  Поэтому в математическом ожидании там будет K делить на D умножить на просто эту координату в квадрате.
[14:48.280 --> 14:50.280]  Ну и D в квадрате делить на K в квадрате.
[14:50.280 --> 14:55.280]  Это просто как раз вылезает из-за того, что мы в операторе тут накинули этот дополнительный множитель.
[14:55.280 --> 14:56.280]  Вот.
[14:56.280 --> 14:58.280]  Получается следующее.
[14:58.280 --> 15:02.280]  И, как вы видите, Омега у этого оператора равно D делить на K.
[15:02.280 --> 15:04.280]  Что может быть довольно большим числом.
[15:04.280 --> 15:08.280]  То есть получается так, что дисперсия велика.
[15:08.280 --> 15:10.280]  Но, опять же, мы видели еще и в координатных методах.
[15:10.280 --> 15:13.280]  Поэтому, удивительно, тут ничего не должно быть.
[15:13.280 --> 15:14.280]  Вот.
[15:14.280 --> 15:15.280]  Окей.
[15:15.280 --> 15:18.280]  Есть более такие, что ли, и хитрые схемы.
[15:18.280 --> 15:23.280]  Сжатие, например, вот трехуровневая, так называемая, L2-квантизация.
[15:23.280 --> 15:26.280]  Суть, ну, довольно агрессивный оператор.
[15:26.280 --> 15:28.280]  Как вы видите, здесь не просто выбор случайных координов.
[15:28.280 --> 15:31.280]  Здесь происходит более жесткая операция.
[15:31.280 --> 15:34.280]  Смотрите, что тут предлагается передавать.
[15:34.280 --> 15:37.280]  Здесь предлагается передавать просто норму вектора.
[15:37.280 --> 15:39.280]  Норму вектора.
[15:39.280 --> 15:43.280]  И для каждой координаты передавать только ее знак.
[15:45.280 --> 15:47.280]  Вместо самой координаты вы передаете ее знак.
[15:47.280 --> 15:51.280]  И получается, в некотором смысле, вы вместо каждой координаты
[15:51.280 --> 15:53.280]  просто знаете знак и просто норму вектора.
[15:53.280 --> 15:55.280]  И поэтому пытаетесь идти.
[15:55.280 --> 15:59.280]  Более того, здесь еще добавляется один агрессивный член.
[15:59.280 --> 16:02.280]  Это случайная величина axi, которая еще отвечает.
[16:02.280 --> 16:04.280]  Вообще передавать эту координату или нет.
[16:04.280 --> 16:07.280]  Если координата по модулю довольно большая,
[16:07.280 --> 16:10.280]  то вероятность ее передачи увеличивается.
[16:10.280 --> 16:13.280]  Если координата по модулю не очень большая,
[16:13.280 --> 16:16.280]  то и вероятность того, что она будет передана,
[16:16.280 --> 16:18.280]  она будет уменьшаться.
[16:18.280 --> 16:20.280]  В итоге получается вот такое вот агрессивное сжатие.
[16:20.280 --> 16:22.280]  Вы не только передаете только знак.
[16:22.280 --> 16:24.280]  Каждый из координат вы еще и выбираете,
[16:24.280 --> 16:26.280]  стоит ли ее передавать или нет из-за того,
[16:26.280 --> 16:28.280]  что она там маленькая либо большая
[16:28.280 --> 16:30.280]  по своему абсолютному значению.
[16:30.280 --> 16:32.280]  Омега тоже можно вычислить,
[16:32.280 --> 16:34.280]  равно корень СД.
[16:36.280 --> 16:38.280]  Что еще?
[16:38.280 --> 16:40.280]  Давайте я спрошу, а какие-нибудь там самые простые
[16:40.280 --> 16:42.280]  операции округления.
[16:42.280 --> 16:46.280]  Хотим, например, было число 10,5,
[16:46.280 --> 16:48.280]  а мы его округлили до десятки.
[16:48.280 --> 16:50.280]  Это такого рода операции у нас будут,
[16:50.280 --> 16:52.280]  не смещенными или нет?
[16:52.280 --> 16:54.280]  А в частном?
[16:56.280 --> 17:00.280]  Ну, если в какие-то точки попадать хорошие,
[17:00.280 --> 17:02.280]  то, наверное, да, там что-то...
[17:02.280 --> 17:04.280]  Если в саму точку попадать,
[17:04.280 --> 17:06.280]  то, наверное, когда условно 10,
[17:06.280 --> 17:08.280]  мы округляем его до 10,
[17:08.280 --> 17:10.280]  тогда, действительно, вектор остается верным.
[17:10.280 --> 17:12.280]  А так, в какое число они вы,
[17:12.280 --> 17:14.280]  не бы, попадали?
[17:14.280 --> 17:16.280]  Вот. А, ну, там, в серединку?
[17:16.280 --> 17:18.280]  Ну, может быть, да.
[17:18.280 --> 17:20.280]  Ну, короче, в общем случае,
[17:20.280 --> 17:22.280]  это не смещенная вещь.
[17:22.280 --> 17:24.280]  А как можно тогда делать
[17:24.280 --> 17:26.280]  округление не смещенным?
[17:26.280 --> 17:28.280]  Вот, гарантированно.
[17:32.280 --> 17:34.280]  Да, то есть, смотрите,
[17:34.280 --> 17:36.280]  у вас есть некоторые уровни,
[17:36.280 --> 17:38.280]  у вас есть некоторые уровни 1, 2,
[17:38.280 --> 17:40.280]  до которого вы округляете.
[17:40.280 --> 17:42.280]  Например, 10, тут 11.
[17:42.280 --> 17:44.280]  Попалось вам число 10,5, 4.
[17:44.280 --> 17:46.280]  С вероятностью, некоторые вы округляетесь туда,
[17:46.280 --> 17:48.280]  с вероятностью, некоторые вы округляетесь туда,
[17:48.280 --> 17:50.280]  некоторые вы округляетесь туда,
[17:50.280 --> 17:52.280]  с вероятностью, некоторые вы округляетесь до 11.
[17:52.280 --> 17:54.280]  Понятно, что эти вероятности
[17:54.280 --> 17:56.280]  должны быть обратно пропорциональны
[17:56.280 --> 17:58.280]  расстоянием для этих чисел.
[17:58.280 --> 18:00.280]  То есть, близки вы к 10,
[18:00.280 --> 18:02.280]  вероятность округления к 10 будет ближе.
[18:02.280 --> 18:04.280]  Вот, близки к 11, соответственно,
[18:04.280 --> 18:06.280]  вероятность к нему округлиться будет ближе.
[18:06.280 --> 18:08.280]  В среднем, в итоге, будете получать 10,5,4.
[18:08.280 --> 18:10.280]  Вот.
[18:10.280 --> 18:12.280]  Окей, разобрались,
[18:12.280 --> 18:14.280]  как сделать это рандомизировано.
[18:14.280 --> 18:16.280]  Вот.
[18:18.280 --> 18:20.280]  Ну, с точки зрения компьютера,
[18:20.280 --> 18:22.280]  вообще округление до
[18:22.280 --> 18:24.280]  каких-то знаков,
[18:24.280 --> 18:26.280]  это мы в десятичной системе живем.
[18:26.280 --> 18:28.280]  Какое округление будет более натуральное
[18:28.280 --> 18:30.280]  с точки зрения компьютера?
[18:36.280 --> 18:38.280]  Ну, смотрите,
[18:38.280 --> 18:40.280]  мне, например, легче округлять как раз до 10.
[18:40.280 --> 18:42.280]  Вам, я думаю, тоже, потому что мы привыкли
[18:42.280 --> 18:44.280]  в десятичной системе счисления.
[18:44.280 --> 18:46.280]  К компьютеру в десятичной системе
[18:46.280 --> 18:48.280]  счисления жить неприятно.
[18:48.280 --> 18:50.280]  Вот. Как он округлять?
[18:50.280 --> 18:52.280]  Как ему округлять будет приятнее?
[18:52.280 --> 18:54.280]  В двоичной. Да, в двоичной системе счисления.
[18:54.280 --> 18:56.280]  Ну, и вот в этом
[18:56.280 --> 18:58.280]  есть, как бы, одна из идей,
[18:58.280 --> 19:00.280]  что можно сделать, округлять
[19:00.280 --> 19:02.280]  в двоичной системе счисления,
[19:02.280 --> 19:04.280]  и это делается, на самом деле, очень просто
[19:04.280 --> 19:06.280]  в случае компьютера.
[19:06.280 --> 19:08.280]  Опять же, если мы рассмотрим такой стандартный
[19:08.280 --> 19:10.280]  вариант, 32-битовый тип,
[19:10.280 --> 19:18.280]  1 бит на знак, 8 бит на экспоненты, остальные биты на мантису.
[19:18.280 --> 19:24.280]  Получается, что знак и экспоненты вам отображают степень двойки.
[19:24.280 --> 19:28.280]  Для числа мантиса его добивает до какого-то более приятного значения.
[19:28.280 --> 19:32.280]  Ну, господи, давайте отрежем мантису просто.
[19:32.280 --> 19:37.280]  Получается, мы будем таким образом просто это подбивать к степени двойки.
[19:37.280 --> 19:42.280]  К степени двойки и более чем нормальный вариант вместо 32 бит передавать 9.
[19:42.280 --> 19:45.280]  Знак и степень двойки.
[19:45.280 --> 19:53.280]  На самом деле в современных каких-то задачах обучения такого рода способы округления,
[19:53.280 --> 19:59.280]  которые просто в некотором смысле агрессивно меняют тип данных
[19:59.280 --> 20:04.280]  с какого-то жирного, типа 32 бит или 64 бит,
[20:04.280 --> 20:08.280]  на какой-то такой более лайтовый, в плане давайте отрежем мантису.
[20:08.280 --> 20:11.280]  Но без этого уже очень сложно обойтись.
[20:11.280 --> 20:18.280]  К сожалению, в этих миллиардных задачах все это очень дорого с точки зрения передачи.
[20:18.280 --> 20:24.280]  Поэтому даже в пределах кластера все вычисления пытаются делать, ну или хотя бы передачу делать,
[20:24.280 --> 20:28.280]  сжимая информацию вот таким вот образом, как минимум.
[20:28.280 --> 20:36.280]  Окей, если мы говорим вообще про то, как решать задачу, которая у нас получилась,
[20:36.280 --> 20:42.280]  ну вот, используя операторы компрессии, теперь мы хотим как бы их встроить в наш алгоритм.
[20:42.280 --> 20:45.280]  Да все очень просто на самом деле.
[20:45.280 --> 20:51.280]  Тут что делается? Вместо того, чтобы передавать полный градиент, я говорю, что я буду передавать
[20:51.280 --> 20:55.280]  от устройств к серверу сжатую версию этого градиента.
[20:55.280 --> 20:59.280]  Вот, и тогда у меня сервер будет принимать эти градиенты, ну сжатые версии,
[20:59.280 --> 21:02.280]  усреднять и делать шаг градиентного спуска по ним.
[21:02.280 --> 21:06.280]  Чем-то похоже на координатный просто спуск, только теперь у вас тут как бы,
[21:06.280 --> 21:12.280]  если мы говорим про оператор random, окей, вот, только теперь у вас тут координат случайно выбирает
[21:12.280 --> 21:14.280]  не одно устройство, а сразу несколько.
[21:14.280 --> 21:22.280]  Вот, вся идея. То есть на самом деле тут, опять же, совсем базовая версия, такая простая,
[21:22.280 --> 21:24.280]  ничего такого сверхъестественного нет.
[21:24.280 --> 21:28.280]  Понятно, можете сказать, что на самом деле мы сжимаем информацию только в одну сторону,
[21:28.280 --> 21:34.280]  потому что от сервера к устройствам информация идет не сжатая.
[21:34.280 --> 21:38.280]  Вот, не сжатая, здесь это ровно так и написано, мы не сжимаем информацию.
[21:38.280 --> 21:42.280]  Ну, это не страшно, на самом деле можно добавить сжатие и туда.
[21:42.280 --> 21:45.280]  То есть на самом деле, когда вы посчитали вот этот жкат, и вы можете отправить
[21:45.280 --> 21:51.280]  сжатую версию жката на устройство, и они сами сделают шаги градиентного спуска локально.
[21:51.280 --> 21:55.280]  Вот, по сжатой версии жката. Ну, тогда у вас будет двойное сжатие.
[21:55.280 --> 22:00.280]  Здесь скорее так, чтобы в теории у вас, ну, чтобы в теории хотя бы какие-то результаты сейчас
[22:00.280 --> 22:02.280]  пополучать, мы рассмотрим такой вариант.
[22:02.280 --> 22:08.280]  Плюс, часто замеры показывают, что именно основным узким местом является передача
[22:08.280 --> 22:13.280]  от устройств к серверу, когда много устройств пытаются закинуть какую-то жирную информацию
[22:13.280 --> 22:18.280]  на одно устройство, ему это необходимо в режиме реального времени все обрабатывать.
[22:18.280 --> 22:24.280]  Вот, поэтому обратный бродкастинг, когда вы просто сервер раскидывает одно и то же
[22:24.280 --> 22:30.280]  на все устройства, это дешевле. И там по замерам 5 раз быстрее, чем серверу принять
[22:30.280 --> 22:37.280]  информацию от всех. Вот. Окей, доказательств давайте пролеснем. В принципе, идея понятна.
[22:37.280 --> 22:42.280]  То есть тут ничего такого сверхъестественного по сравнению с координатным спуском нету.
[22:42.280 --> 22:47.280]  Вот. Пробежались, пробежались. По мотожданию все замечательно, потому что оператор
[22:47.280 --> 22:52.280]  не смещенный. Изжимаем что-то не смещенное, получаем что-то хорошее.
[22:52.280 --> 22:58.280]  Дальше важные аспекты, которые нужно осветить. Ну, во-первых, что тут возникает из-за того,
[22:58.280 --> 23:03.280]  что вы используете оператор сжатия. Это у нас в принципе и было в координатном спуске.
[23:03.280 --> 23:09.280]  У нас вылезал здесь вот множитель D. То есть перед этим как бы членом, который у нас
[23:09.280 --> 23:14.280]  возникал по разнице по функции, когда мы оценивали нормы градиента, там выскакивала D.
[23:14.280 --> 23:20.280]  Здесь вылезает как бы, так как у нас оператор это уже более общая вещь, там не только координатные
[23:20.280 --> 23:25.280]  вещи, там могут быть и какие-то там округления в том числе. Здесь вылезает, то есть омега,
[23:25.280 --> 23:30.280]  то есть та дисперсия оператора. Для координатного спуска это была просто D. Вот.
[23:30.280 --> 23:37.280]  Но важный эффект то, что здесь вылезает еще и M. M, потому что наблюдается, если у вас устройство
[23:37.280 --> 23:42.280]  независимо между собой, появляется такой вот batch эффект. Как будто, как будто если мы говорим
[23:42.280 --> 23:50.280]  про координатный спуск, вы уменьшаете дисперсию в M раз. В M раз, потому что независимое устройство
[23:50.280 --> 23:56.280]  кажется, что если каждое пришлет по одной координате, все пришлют M координат, поэтому дисперсия уменьшится.
[23:56.280 --> 24:01.280]  Вот и на весь эффект. То есть вот такая у него физика. Но это наблюдается только в случае независимых
[24:01.280 --> 24:07.280]  устройств. Это важно. Вот. Плюс вот этот кусочек, который непрятен. Вот с этим все окей, вот с этим все
[24:07.280 --> 24:12.280]  понятно. Мы его видели. Это было в координатном спуске. Вот этот. Этот был вообще в обычном
[24:12.280 --> 24:18.280]  градиентном спуске. А вот второй кусочек, который я обвел, ну он, как вы видите, неприятный. Это опять же
[24:18.280 --> 24:25.280]  дисперсия, которая у нас выскочила. Вот. И эта дисперсия в оптимуме. Понятно, что мы решаем задачу
[24:25.280 --> 24:33.280]  минимизации функции F, при этом градиенты функции FM3 в оптимуме могут не равняться 0 в общем случае.
[24:33.280 --> 24:38.280]  Ну, понятная ситуация. Уже много раз обсуждали, в том числе, почему HDD не сходится. Вот.
[24:38.280 --> 24:44.280]  Начинаются осцилляции, потому что просто каждый тянет в свое место. Но здесь то же самое.
[24:44.280 --> 24:51.280]  Появляется вот этот дисперсионный эффект, который не компенсируется. Вот. Который еще и не уменьшается.
[24:51.280 --> 24:57.280]  Из-за того, что вы сжимаете что-то, что не стремится к нулю. Получается у вас как бы разница между честным
[24:57.280 --> 25:02.280]  градиентом и стахастическим, который возникает из зажатия, не стремится к нулю, потому что вы жали
[25:02.280 --> 25:09.280]  что-то, что не стремится к нулю. Поэтому и разность между честным градиентом и сжатой версией не стремится к нулю.
[25:09.280 --> 25:17.280]  Вот. Получается вот этот дополнительный эффект, который мешает сходимости. Дальше бла-бла-бла пробежались.
[25:17.280 --> 25:23.280]  С шагом все понятно. Ровно как в координатном спуске там Dшка возникала. У нас здесь возникла
[25:23.280 --> 25:32.280]  Здесь возникла Омега делить на М. Вот. Получилась вот такая вот сходимость градиентного спуска,
[25:32.280 --> 25:39.280]  либо координатного там градиентного спуска. Плюс асцеляции из-за дисперсии. Здесь шаг подобран опять же хитро.
[25:39.280 --> 25:49.280]  Говорил про то, что это можно сделать в SGD. Вот. Но по факту это результатом означает то, что при фиксированном шаге,
[25:49.280 --> 25:54.280]  при константном шаге, у вас будут просто асцеляции. Асцеляции вокруг решения.
[25:54.280 --> 26:01.280]  Вот такая вот ситуация, к сожалению. Ну, не к сожалению. Вот. И в экспериментах она и наблюдается.
[26:01.280 --> 26:09.280]  То есть до какого-то качества решения доползаете, потом начинаете асцелировать. Все. Конец. Вот.
[26:12.280 --> 26:17.280]  Это можно решить. Это можно решить. Потому что, опять же, техники редукции дисперсии мы с вами проходили.
[26:17.280 --> 26:28.280]  То есть суть такая, что не хотите, чтобы асцелировать в окрестности решения, нужно стахастику в некотором смысле сводить на ноль в ходе работы алгоритма.
[26:28.280 --> 26:34.280]  Вот. Для этого, для этого вводится так называемая техника памяти. Алгоритм называется Диана.
[26:34.280 --> 26:43.280]  Диана. Ну, это прям реально в честь девушки названа. В некотором смысле такая оптимизационная татуировка.
[26:43.280 --> 26:53.280]  Вот. Вот. И в чем суть? В чем суть? Смотрите, поняли, что мы сжимаем то, что не стремится к нулю.
[26:53.280 --> 26:58.280]  Давайте сжимать то, что стремится к нулю, тогда дисперсия будет тоже стремиться к нулю стахастического градиента.
[26:58.280 --> 27:04.280]  Для этого вводится дополнительная последовательность H, которая называется последовательностью памяти.
[27:04.280 --> 27:11.280]  Последовательностью памяти. И здесь, ну, идея близка вот ко многим техникам редукции дисперсии.
[27:11.280 --> 27:18.280]  Если вы, мы уже когда-то что-то считали, когда-то что-то передавали, почему это нужно забывать?
[27:18.280 --> 27:29.280]  Вот. В связи с тем, что, ну, ситуация такая, что у вас кажется в ходе работы алгоритма там все посылки, они будут более-менее сжимать одно и то же.
[27:29.280 --> 27:37.280]  То есть у вас все стремится к оптимуму, градиенты стремятся к оптимуму. Градиент в оптимуме вот так вот.
[27:37.280 --> 27:45.280]  Ну а значит и посылки будут пересылать примерно одно и то же, просто сжимая по-разному, там выбирая случайные координаты или там округляют и все как-то по-разному.
[27:45.280 --> 27:54.280]  Вот. Ну давайте я в этой памяти буду сохранять то, что я передал в прошлые разы. Вот. И в этом вся соль.
[27:54.280 --> 28:00.280]  То есть изначально это просто 0, это просто 0, а дальше ну, начинается алгоритм.
[28:00.280 --> 28:11.280]  Я сжимаю то, что хочу переслать, ну изначально просто градиент. Я хочу переслать градиент, отправляю сжатую версию градиента на сервер.
[28:11.280 --> 28:16.280]  Отправляю сжатую версию градиента на сервер, а он принимает и делает шаг градиентного спуска.
[28:16.280 --> 28:27.780]  Но при этом сервер получает от меня эту посылку и у себя локально тоже сохраняет то, что он от меня получил вот эту посылку.
[28:27.780 --> 28:32.660]  Вот это обновляется как бы и на устройстве, и на сервере.
[28:32.660 --> 28:42.500]  Сервер сохранил посылку, то есть вот эту сжатую версию градиента, я сохранил то, что я серверу передал вот эту сжатую версию градиента.
[28:42.500 --> 28:49.100]  И на следующей атерации что происходит? На следующей атерации я говорю, что а я буду досылать теперь не просто градиент,
[28:49.100 --> 28:56.300]  ну мне же нужно посылать вроде как градиент, но я же знаю, что сервер от меня уже получал какую-то информацию и ее сохранил.
[28:56.300 --> 29:02.940]  Окей, а давайте тогда я ему дошлю разность. Зачем мне посылать все, если я могу досылать разность?
[29:03.740 --> 29:14.740]  Понятная тоже естественная идея. Если, опять же, h будет стремиться просто к градиенту, а так на самом деле и будет, что h будет стремиться просто к градиенту fn в эссо звездой,
[29:14.740 --> 29:26.620]  то я буду по факту просто чуть-чуть модифицировать то, что у меня хранится на сервере, вот эту h, и добивать его до истинного значения.
[29:26.620 --> 29:34.860]  Вот, поэтому пересылать разность и довольно такая понятная и естественная идея, которая играет ключевую здесь роль.
[29:34.860 --> 29:43.260]  У вас вот эта разность действительно будет стремиться к нулю, потому что fmt будет стремиться к оптиму, вот к градиенту в оптимуме,
[29:43.260 --> 29:48.620]  h тоже к этому будет стремиться, и вы его потихонечку таким вот небольшими шашками уже будете модифицировать.
[29:48.620 --> 29:54.420]  Вот, опять же, вся суть в очень простой вещи запоминать то, что мы когда-то делали до этого.
[29:54.420 --> 30:00.820]  Вот, и досылать, все, досылаем только разность, все, суть такая алгоритма Дианы.
[30:00.820 --> 30:10.740]  Оценки исходимости хотелось бы на них посмотреть, вот, доказывать понятно, мы уже ничего не будем, вот такая вот оценка для Дианы,
[30:10.740 --> 30:20.380]  для Дианы, вот такая вот оценка я напоминаю для обычного градиентного спуска, если бы мы тупо коммуницировали по полным градиентам.
[30:20.380 --> 30:23.380]  Какая из наценок лучше, вы мне сразу скажите, какая?
[30:25.380 --> 30:32.780]  Вторая, не верхняя, не правда, что верхняя, верхняя хуже, она же видите, у вас не просто единица стоит в скобках,
[30:32.780 --> 30:37.780]  у вас там дополнительный множитель ω делить на m, ω может, как мы поняли, быть огромной,
[30:37.780 --> 30:47.580]  передаете одну координату из миллиона, в итоге ω равна миллиону, вот, ну и все, получается верхняя оценка хуже,
[30:47.780 --> 30:54.380]  нижняя лучше, и это означает, что вроде как градиентный спуск с точки зрения итерации лучше, вот.
[30:54.380 --> 31:00.380]  Понятно, естественно, на самом деле эффект, передаете меньше, передаете, агрессивно сжимаете информацию,
[31:00.380 --> 31:08.380]  с чего вы должны от этого не потерять с точки зрения итерации, конечно, потеряете, но вот здесь эта потеря и отражена,
[31:08.380 --> 31:15.380]  но интересен не этот результат, интересен результат, когда вы говорите о том, что насколько вы меньше это передаете,
[31:16.180 --> 31:21.180]  потому что да, с точки зрения итерации вы проиграете, но с точки зрения именно количества переданной информации,
[31:21.180 --> 31:25.180]  а значит и скорости передачи, вот, вы можете выиграть.
[31:25.180 --> 31:30.180]  Давайте ведем такой вот параметр β, во сколько раз вы сжали информацию,
[31:30.180 --> 31:38.180]  потому что ω и β, ну они не всегда связаны прямым соотношением, что β равно ω, вот,
[31:38.180 --> 31:46.180]  и тогда, а давайте, кстати, обсудим, чему равна вот эта β, во сколько вы сжимаете информацию, например, для random k,
[31:46.180 --> 31:52.180]  когда вы передаете вместо k координат, вместо d координат k, вот, чему равна β в этом случае будет?
[31:54.180 --> 31:58.180]  k делить на d, это получается что, ну точнее даже d делить на k, да,
[31:58.180 --> 32:05.180]  потому что мы передали k координат вместо d, поэтому передали вроде как d делить на k раз меньше информации,
[32:05.180 --> 32:11.180]  но давайте порассуждаем, а что мне нужно передать, вот, я вот хочу передать k координат вместо d,
[32:11.180 --> 32:15.180]  ну да, мне сами значения координат нужно передать, а что мне нужно передать еще?
[32:18.180 --> 32:25.180]  Ну, куда я ставлю эти координаты, потому что передал я вот это, одну координату вместо тысячи, а какую, вот,
[32:25.180 --> 32:30.180]  это, конечно, самый интересный вопрос, пришло число, куда ставить его, вот,
[32:31.180 --> 32:38.180]  поэтому дополнительно нужно еще, конечно, передать номера координат, которые вы передали,
[32:38.180 --> 32:49.180]  поэтому если у вас там всего d координат, то вам нужно еще логарифм от двойки по основанию 2d бит,
[32:49.180 --> 32:56.180]  чтобы закодировать все эти числа, вот, и вы дополнительно еще дошлете вот столько бит, чтобы просто передать эту информацию,
[32:56.180 --> 33:02.180]  вот, и кажется, что тогда вообще бета станет меньше, чем омега, но тут можно выкрутиться,
[33:02.180 --> 33:08.180]  можно выкрутиться, особенно с рандомизированной стратегией следующим образом, вот, маску можно на самом деле не передавать,
[33:08.180 --> 33:17.180]  вот, как это сделать, ну, смотрите, ситуация следующая, координаты же выбираются каким-то случайным процессом,
[33:17.180 --> 33:24.180]  алгоритмом, у которого, который на самом деле ни разу не случайный, и там просто это реализовано
[33:24.180 --> 33:30.180]  псевдослучайность и случайные сиды и знание алгоритма вам в этом плане может помочь,
[33:30.180 --> 33:38.180]  если вы воспользуетесь одним и тем же генератором случайных чисел, вот, на устройстве и на сервере, вот,
[33:38.180 --> 33:48.180]  то устройство условно выберет координату с номером i, а сервер возьмет тот же самый генератор, возьмет тот же самый рандом сид
[33:48.180 --> 33:54.180]  и сгенерирует ровно эту же координату, скажет, что устройство мне передало номер этой координаты,
[33:54.180 --> 34:00.180]  точнее, вот, значение этой координаты, просто потому что я могу воспроизвести ту же самую случайность у меня локально,
[34:00.180 --> 34:08.180]  вот, в этом помогает нам псевдослучайность, поэтому здесь вот эта дополнительная передача k умножить на алгоритм d бит,
[34:08.180 --> 34:16.180]  она не нужна, она не нужна и окей, я вот здесь даже сразу в оценки положил, что бета равно омега,
[34:16.180 --> 34:22.180]  разделил те оценки, которые у нас были до этого на бету и получил вот такое вот выражение для нашего метода,
[34:22.180 --> 34:30.180]  такой множитель, ну а для градиентного спуска в связи с тем, что он не сжимает информацию, я просто разделил на единичку и ничего не сдвинулось,
[34:30.180 --> 34:38.180]  вот, и вот здесь как раз уже виден эффект, виден эффект там, что вот этот множитель может действительно быть меньше единицы,
[34:38.180 --> 34:46.180]  берете бету довольно большой, мку довольно, то есть берете 100 устройств, 1000 устройств учителей, получаете хороший множитель,
[34:46.180 --> 34:56.180]  хороший множитель, который действительно показывает то, что ускорение-то оно и есть, вот, кстати, в том числе как бы показательный результат,
[34:56.180 --> 35:02.180]  тут важно, что координатный метод, когда вы как раз делаете его распределенное, тут уже будет ускорение,
[35:02.180 --> 35:08.180]  на одном устройстве никакого ускорения нет, потому что опять же у нас была мка равна единице на прошлом занятии,
[35:08.180 --> 35:19.180]  ну и там ничего хорошего не произошло, вот, окей, вот такая вот ситуация, следующий сюжет, который вообще хочется обсудить,
[35:19.180 --> 35:31.180]  вроде как получили, быстрее общаемся с сервером, меньше тратим на коммуникации, опять же, как вам рассказывал Саша из Яндекса,
[35:31.180 --> 35:42.180]  у вас, к сожалению, наблюдается немного другая ситуация с точки зрения организации коммуникаций, общаться с сервером это не самый практичный вариант,
[35:42.180 --> 35:54.180]  да, вы можете поставить, ну, в реальности, в этих кластерах действительно есть управляющий сервер, но он не синхронизирует процесс общения в том виде, в котором мы это описали,
[35:54.180 --> 36:02.180]  модель вот этого общения с сервером, она скорее такая игрушечная и искусственная, вот, которая просто помогает пониманию того, что может происходить,
[36:02.180 --> 36:11.180]  ну нам нужно усреднить, давайте как бы скинем все на сервер, он нам все усреднит, но существование сервера, оно предполагается скорее так, вот, в теории,
[36:11.180 --> 36:24.180]  потому что в реальной жизни общение с сервером реализуется другим образом, другим образом, вот, реализуется оно через так называемый L-Getheral Reduce процедуры,
[36:24.180 --> 36:37.180]  что это подразумевает? Подразумевает то, что у вас есть вот эти вычислительные устройства, они между собой как-то соединены в сетку, вот,
[36:37.180 --> 36:45.180]  чаще всего в этой сетке еще есть все ребра, то есть это просто полный граф, между всеми видеокартами есть проводок, между всеми там процессорами,
[36:45.180 --> 36:55.180]  между всеми вычислителями есть проводок, который их между собой соединяет, вот, лежат они там в пределе одной вообще платы или в разных, в любом случае связи есть все, вот,
[36:55.180 --> 37:09.180]  и поэтому в некотором смысле вот эта процедура усреднения, которая у нас до этого делал сервер, вот, мы эту процедуру можем симулировать в такой сетке,
[37:09.180 --> 37:19.180]  если каждый передаст каждой просто свое значение, они все усреднят внутри себя и получится итоговое осреднение, вот, и никакой сервер здесь особо и не нужен, вот,
[37:19.180 --> 37:29.180]  в реальности так и происходит, то есть проводки, видеокарты между собой просто общаются и выдают ответы, выдают, ну, в итоге каждый получает среднее,
[37:29.180 --> 37:39.180]  каждый делает шаг и на этом все обрывается, то есть нет никакого сервера, единственное, проблема, конечно, возникает в том, что, ну, давайте вот какой-то протокол,
[37:39.180 --> 37:50.180]  я не знаю, вот, ходили на Саша Панина, его семинар или нет, не ходили, ну, давайте я тогда расскажу как раз, кто-то там ходил, ну, там, по-моему, человек 30 был,
[37:50.180 --> 38:04.180]  в принципе, неплохо записал, конечно, 100, но дошло 30, ладно, суть вообще того, хочется, почему придумают про то, как делать вот эти процедуры усреднения без сервера более эффективными,
[38:04.180 --> 38:16.180]  понятно, что передать все всем это, конечно, выход, вот, но дорого, дорого, вот, более дешевый вариант, это если все скинут, как бы симулируют работу сервера,
[38:16.180 --> 38:28.180]  одно из устройств выступит данным случае сервером, все на него просто скинут, и усреднят, устройство усреднит внутри себя это все безобразие,
[38:28.180 --> 38:38.180]  и потом это все отбродкастит всем остальным, симуляция работы сервера, симуляция, в такой системе это все работает, потому что, как я сказал, все связи есть,
[38:38.180 --> 38:47.180]  но есть более эффективные вещи, есть более эффективные вещи, потому что, опять же, как я сказал, в случае, когда у вас одно устройство работает,
[38:47.180 --> 39:00.180]  то ему нужно принять D посылок от всех параллельно, еще и усреднить полный вектор длины D, дорого, вот, можно дешевле, смотрите, следующая процедура называется Rinkle-reduce процедурой,
[39:00.180 --> 39:14.180]  в чем суть? Пусть у вас есть 4 устройства, 4 устройства, раз 4 устройства мы разбиваем наш полный вектор, который мы хотим усреднить, на каждом из устройств на 4 равные части, вот, здесь это и делается, вот,
[39:14.180 --> 39:31.180]  ну, в общем случае понятно, там условно K устройство, M устройство вы развиваете на M частей, вот, и что происходит? Мы передаем не все, первое устройство передает только первую часть вектора, передает только первую часть вектора,
[39:31.180 --> 39:45.180]  второе устройство, причем соседу по кругу, вот, второе устройство передает вторую часть вектора, третью, третью и четвертую, четвертую, тогда вот после такой передачи на первом устройстве у меня скопится
[39:45.180 --> 40:14.180]  первый кусочек от первого устройства и первый кусочек, который у меня и так там хранился, вот, ну и так далее, то есть вот здесь это скопится там B1, здесь дальше скопится C2, дальше скопится тут D3, вот, дальше происходит следующее, ну раз у меня тут скопилась A0 плюс B0, дальше я буду передавать его, дальше я буду передавать его, ну и во всех устройствах аналогично, то есть как они скопили сумму двух, вот, они ее и передали.
[40:14.180 --> 40:30.180]  И далее, далее, далее у вас происходит абсолютно такая же вещь, здесь у вас дальше скопится уже сумма из трех, поэтому вы дальше будете передавать уже сумму из трех, по кругу, по кругу, там дальше скопится сумма из четырех, передайте сумму из четырех.
[40:30.180 --> 40:51.180]  В итоге у вас, а, ну уже сумму четырех уже передавать не надо, потому что это все, больше четырех устройств у нас нет. В итоге на каждом устройстве будет храниться сумма всех четырех значений с разных устройств, но по кусочкам, не у каждого будет все, а у каждого будет только кусочек.
[40:51.180 --> 41:04.180]  Понятно, что к среднему это легко привести, мы разделили на четыре, вот, то есть мы по факту усреднили вектор, но пока он так вот разбросанно хранится, ну а дальше вы по кругу это просто передаете.
[41:04.180 --> 41:12.180]  У меня этот кусочек R0 хранится, ну окей, я его передаю, это он же не знает сосед, этот передает R1, этот передает R2, этот передает R3.
[41:12.180 --> 41:36.180]  Дальше, соответственно, по кругу, то, что кто не знает, все передается и получается, что у каждого окажется полный вектор, ну то есть здесь, например, окажется в итоге R0, здесь будет R1, вот, ну дальше что нужно передать, вот этот, например, не знает R0, теперь я на следующей террации передам R0 сюда, вот, здесь скопится R3, дальше я буду передавать R3.
[41:36.180 --> 41:59.180]  Ну вот так вот это по кругу все пойдет, пойдет, пойдет и получится вот такое вот честное усреднение. Такая процедура работает быстрее, чем, понятно, усреднение с одним устройством, просто за счет такой вот хитрой параллелизации, то есть каждый выполняет одну операцию, одинаковый пул операции, то есть делает вот такое вот усреднение.
[41:59.180 --> 42:23.180]  Называется WrinkleReduce, опять же, Саша про это рассказывал, говорил про то, что то усреднение, которое у вас было, это, ну вот, честное усреднение через сервер это OAD операций, вот, ну и OAD получается временных тактов, потому что это все выполняется на одном устройстве, вот. С помощью такой процедуры можно OAD единицы временных тактов делать, и это значительно эффективнее.
[42:29.180 --> 42:57.180]  Окей, смотрите, если мы говорим теперь про те методы сжатия, которые мы с вами вроде как проходили, вот, я не перестаю удивляться тому университету, восемь лет уже, восьмой год уже здесь, ну, может заплутал, вот, а то это вроде бы уверенно ходит, но явно не так.
[42:59.180 --> 43:14.180]  Так, смотрите, в чем вообще возникают проблемы, то есть до этого как бы вроде как расобщение с сервером, мы передаем ему меньше информации, ну и что-то там вроде как действительно с точки зрения именно скорости передач, это хорошо.
[43:14.180 --> 43:34.180]  Ну, если мы работаем в пределах вот такого кластера вычислительного, где нет сервера, где мы, например, запускаем OLD reduce процедуры по колечку, вот, какие вы проблемы видите, какие вы проблемы видите, насколько это вообще будет выглядеть эффективно?
[43:34.180 --> 43:57.180]  Ну, это с одной стороны, да, ну, почему, на самом деле нет, когда вы усреднили у всех, они все посчитают среднюю точку, ну, следующую точку, да, без проблем, господи, у вас так вы ждете одного, когда он вам посчитает, а так вы сами посчитали, ну, с точки зрения вычислений не страшно.
[43:57.180 --> 44:27.180]  Тут скорее другая опасность, тут, видите, возникает то, что с одной стороны вроде как мы обсудили, что эффекта того, что вы независимо на всех устройствах генерируете случайность, он хороший, он там проявляется в улучшении сходимости, но, с точки зрения OLD reduce процедуры, это тоже не очень хорошо, это как раз минус, потому что, ну, например, на какую-то из координатов выбрали все устройства, какую-то координат выбрало только два устройства, какую-то координат
[44:27.180 --> 44:29.780]  из координат выбрали никто.
[44:29.780 --> 44:33.300]  Как это делать эффективно, усреднять, делать all-reduce,
[44:33.300 --> 44:37.300]  когда какую-то координату нужно усреднить у всех устройств,
[44:37.300 --> 44:40.980]  какую-то координату нужно усреднить у частью устройств, какую-то ни у кого.
[44:40.980 --> 44:44.740]  При этом, ну да, можно задать одинаковый рандом CD,
[44:44.740 --> 44:48.900]  чтобы они в итоге знали, какую случайность сгенерировал каждый.
[44:48.900 --> 44:54.820]  Но как это эффективно организовать именно менеджерские, это очень костыльно получается.
[44:54.820 --> 44:59.020]  То есть, есть такие процедуры, которые работают с такого рода сжатиями
[44:59.020 --> 45:02.940]  и как-то это костыльно преобразует в более-менее эффективное усреднение.
[45:02.940 --> 45:07.980]  Но базово, лучше, чем просто запустить честный wrinkle-reduce
[45:07.980 --> 45:12.540]  вот с этими незначащими ничего нулями, потому что вы как бы их не передаете,
[45:12.540 --> 45:15.300]  ну не получается, не получается.
[45:15.300 --> 45:20.100]  Поэтому возникает такая идея, возникает такая идея,
[45:20.100 --> 45:23.380]  а давайте я сделаю тогда зависимую случайность.
[45:24.340 --> 45:30.500]  И скажу, что я на каждом устройстве, опять же, задаю один и тот же генератор,
[45:30.500 --> 45:34.300]  задаю один и тот же рандом CD.
[45:34.300 --> 45:40.060]  И каждый из устройств генерирует перестановку, одну и ту же перестановку из номеров координат.
[45:40.060 --> 45:42.540]  Номеров координат.
[45:45.340 --> 45:47.140]  Нет, надо помочь явно.
[45:47.140 --> 45:51.460]  Вот, номеров координат, и у каждого эта перестановка одна и та же.
[45:51.460 --> 45:53.740]  Все эту, одну и ту же перестановку знают.
[45:54.940 --> 45:56.460]  Вы заплутали, да?
[46:01.260 --> 46:03.260]  А, понятно, понятно.
[46:08.540 --> 46:10.020]  Главное, будьте уверены в себе.
[46:10.020 --> 46:11.340]  Вот я уверен на сфоки.
[46:12.220 --> 46:12.740]  Вот.
[46:13.860 --> 46:16.740]  Смотрите, каждый знает эту перестановку.
[46:16.740 --> 46:18.500]  Каждый знает перестановку.
[46:19.060 --> 46:22.380]  И суть такая, что первое устройство выбирает,
[46:22.380 --> 46:24.780]  условно там, перестановка, восьми координат,
[46:24.780 --> 46:25.940]  у нас четыре устройства.
[46:25.940 --> 46:31.500]  Один, восемь, семь, пять, четыре, три, пять, два.
[46:31.500 --> 46:32.020]  Вот.
[46:32.020 --> 46:35.980]  И первое устройство, соответственно, выбирает первую и восьмую координаты.
[46:35.980 --> 46:39.260]  Второе устройство выбирает седьмую и пятую координаты,
[46:39.260 --> 46:41.620]  третье, соответственно, третью и четвертую.
[46:41.620 --> 46:44.220]  Четвертый вычисляет пятую и вторую.
[46:44.220 --> 46:48.300]  В итоге, видите, каждый выбирает непересекающийся набор координат.
[46:48.300 --> 46:51.620]  не пересекающийся набор координат, но это же по факту
[46:51.620 --> 46:55.500]  эквивалентно вот той ситуации, которая нарисована здесь.
[46:55.500 --> 47:01.060]  Получается у нас у каждого устройства есть не пересекающаяся посылка,
[47:01.060 --> 47:06.540]  которую ему нужно послать. Просто по кругу запускаем, все пересылаем.
[47:06.540 --> 47:12.900]  По кусочкам. Получается мы вот таким вот сжатием, мы all-reduce процедуру
[47:12.900 --> 47:16.500]  упростили, потому что там не нужно считать что-то среднее в силу того, что
[47:16.500 --> 47:23.220]  каждый из кусочков независим. Вот. И на самом деле эффективно поработали с точки
[47:23.220 --> 47:27.500]  зрения компрессии, потому что эффект передачи опять же тоже будет наблюдаться,
[47:27.500 --> 47:31.940]  потому что там вот это batch эффект тоже будет, потому что здесь есть случайность,
[47:31.940 --> 47:36.340]  она такая конечно зависимая, но вот этот один делить на m он тоже будет. Вот.
[47:36.340 --> 47:44.780]  Вот такая вот вещь. Соответственно, когда у вас нет сервера, идея более чем рабочая.
[47:44.780 --> 47:53.420]  Хорошо. Обсудили такую вот идею. Перерыв делаем или идем дальше? Ну, давайте
[47:53.420 --> 47:56.020]  дальше обсуждать. Сегодня без доказательств, поэтому мы скорее так
[47:56.020 --> 48:03.260]  идейно обсуждаем, что происходит. Дальше. Следующий сюжет про то, что на самом деле
[48:03.260 --> 48:10.860]  случайность, это конечно все классно, замечательно. Вот. Но вообще кажется, что
[48:10.860 --> 48:17.540]  выбор чего-то не случайного может быть значительно лучше. Вот. Поэтому возникает
[48:17.540 --> 48:23.780]  идея, что давайте-ка мы ведем более такой общий класс операторов, который назовем
[48:23.780 --> 48:27.700]  смещенными операторами компрессии. Тут уже не будет то, что математическое
[48:27.700 --> 48:34.460]  ожидание оператора равно самому значению вектора. Вот. Но такой класс можно погрузить
[48:34.460 --> 48:39.380]  значительно больше операторов, и это как раз хорошо. В частности, погружается сюда
[48:39.380 --> 48:45.060]  вот такой вот оператор, который называется TOP-K. Он же жадная спорсификация, он же в
[48:45.060 --> 48:50.700]  некотором смысле аналог random-K на случай, когда вы вместо случайного набора координат
[48:50.700 --> 48:56.860]  пересылаете максимальные по модулю. Пересылаете максимальные по модулю. Понятная тоже идея,
[48:56.860 --> 49:03.540]  а суть тоже у нее как бы более чем ясна. Ну какие-то координаты может быть, могут быть маленькие.
[49:03.540 --> 49:09.180]  Зачем их выбирать тогда? Давайте я перешлю самые большие там в слои или вообще во всей
[49:09.180 --> 49:15.780]  модели. То есть, когда оба с данной нормализованы, вот, более-менее, то тогда такого рода пересылки
[49:15.780 --> 49:20.900]  градиентов, они более чем имеют место, потому что, ну, каждый из признаков более-менее имеет
[49:20.900 --> 49:26.500]  одинаковый размер. А значит, градиенты можно считать более-менее равномерными, и тогда,
[49:26.500 --> 49:31.700]  где градиент меньше, тогда его пересылать вроде как не нужно. Поэтому нужно пересылать только
[49:31.700 --> 49:37.980]  самое большое, и здесь эта идея как раз реализована. Понятно, все приятно. Единственное, что как раз
[49:37.980 --> 49:43.620]  тут уже возникает смысл в том, что маску-то нужно будет переслать, потому что сервер уже не знает,
[49:43.620 --> 49:50.740]  какие у вас конкретно топовые координаты. Вот, тут уже без маски не обойтись. Вот, это все безобразие
[49:50.740 --> 49:56.580]  здесь есть. Разного рода операторы тут можно придумывать, в том числе вокруг округления,
[49:56.580 --> 50:09.100]  вокруг, опять же, выборов каких-то координат. Можно и совсем извращаться, и предлагать сжатие
[50:09.100 --> 50:15.540]  на основе всяких СВД-разложений, причем атеративных СВД-разложений. Тоже классная вещь, работает,
[50:15.540 --> 50:21.660]  вот на практике вообще последняя вообще супер. Вот, вот выбор, там, условно, как координат работает,
[50:21.660 --> 50:28.540]  а СВД-разложения вообще супер. В том числе, пробовали на экспериментах, обучение там всяких
[50:28.540 --> 50:38.420]  больших языковых моделей, нормально отрабатывает. Вот, самая базовая идея, вообще, вот, ну, в силу того,
[50:38.420 --> 50:42.060]  что вроде как мы используем оператор сжатия, ну, давайте тот же самый этот, который у нас был,
[50:42.060 --> 50:51.500]  где мы просто сжимали передаваемые градиенты, ну, давайте его использовать, окей. Ну, и в случае,
[50:51.500 --> 50:55.940]  вроде как, одного устройства, который не особо интересен именно с точки зрения практики,
[50:55.940 --> 51:01.100]  потому что, ну, а зачем вообще распределено что-то вычислять на одном устройстве? Да, оно может
[51:01.100 --> 51:07.140]  быть как-то круче с точки зрения вычислительных мощностей, но неинтересно. Интересно, конечно,
[51:07.140 --> 51:12.300]  когда много устройств. И в случае одного устройства все это можно доказать, получается
[51:12.300 --> 51:20.020]  линейная сходимость, все красиво, все стильно модно и не страшно. Вот. Проблемы возникают,
[51:20.020 --> 51:29.060]  когда у вас устройств будет несколько. И вот здесь такая простенькая задачка, двоечка не влезла
[51:29.060 --> 51:36.260]  по ходу. Три устройства, размерность задачи три. Вот. Квадратичная задача не сложная, видите,
[51:36.260 --> 51:44.220]  что тут просто квадратичная функция зашита. Вот. Оптимум у нее в нуле. И вот такие вот градиенты.
[51:44.220 --> 51:52.580]  Я беру стартовую точку, которая, например, она ТТТ. Вот. Просто, ну, там, 111. Вот. И, соответственно,
[51:52.580 --> 51:58.820]  считаю градиенты. Градиенты получаются вот такие вот. Какой у меня тогда суммарный градиент будет,
[51:58.820 --> 52:03.860]  если я никакие сжатия не буду использовать? Быстренько мне подскажите, какой будет суммарный градиент.
[52:03.860 --> 52:14.580]  Ну, что там, Т пополам. И если мы все складываем и делим на три, что там будет? 11 плюс 9 плюс
[52:14.580 --> 52:24.220]  9. Это что? 7, да? Минус 11. Да-да-да-да. 7 третьих. Вот. Ну и везде там будет 7 третьих. Давайте так,
[52:24.220 --> 52:33.220]  вот так напишу. 111 и здесь еще 7 третьих. Вот. Но. А что будет, что в итоге у меня будет в качестве
[52:33.220 --> 52:46.780]  градиента, если я использую топ-1 сжатия для каждой из компонентов? Минус 11, минус 11, минус 11.
[52:46.780 --> 52:55.900]  Ну, давайте вот так. Ну и что вы можете сказать про вот этот градиент и про вот этот градиент?
[52:55.900 --> 53:05.580]  Насколько они вообще отражают физику задач. Ну понятно, первые отражают полностью. Вот. Второй,
[53:05.580 --> 53:11.540]  но он вообще указывает не туда. То есть это вообще противоположное направление. И оказывается,
[53:11.540 --> 53:15.780]  ну действительно, вы таким образом просто от решения будете отваливать. Отваливать куда
[53:15.780 --> 53:21.460]  подальше из-за того, что используете топ-1 сжатия. Получается вот даже для таких квадратичных
[53:21.460 --> 53:32.860]  задачек. Для любого топ-1 сжатия, вроде как, как мы вроде прикинули неплохой вариант, вы будете
[53:32.860 --> 53:41.260]  просто экспоненциально отваливать от решения, что явно нехорошо. Тут нам на помощь приходит тоже
[53:41.260 --> 53:47.980]  в некотором смысле такая идея с памятью. Ну это называется техника компенсации ошибки. Идея с
[53:47.980 --> 53:53.780]  памятью на самом деле здесь тоже может выстрелить. И дальше я покажу, что там и Диану можно сделать для
[53:53.780 --> 54:02.620]  такого оператора. Вот. Но есть еще такая техника error-feedback, которая более чем является рабочим
[54:02.620 --> 54:09.320]  вариантом. Суть тоже очень простая. Я хочу передать градиент. Вот. Передал в итоге сжатую версию этого
[54:09.320 --> 54:18.200]  градиента. Давайте я сохраню то, что я не передал. Вот. Из честного градиента вычту посылку. Понятно.
[54:18.200 --> 54:24.720]  Хорошо, вычли, так вычли. Вот. А к будущей посылке я добавлю то, что я не передал. То есть я хочу в
[54:24.720 --> 54:30.480]  следующий раз послать градиент, но я говорю, а на прошлой итерации я не послал вот это. Вот. Не
[54:30.480 --> 54:35.800]  дослал. Вот. Ну давайте тогда теперь моя новая посылка это то, что я не дослал, плюс то, что я
[54:35.800 --> 54:44.840]  хочу послать сейчас. Вот. Сжимаю ее, получаю новую посылку. Ну и так далее. Сжатую посылку посылаем.
[54:44.840 --> 54:52.640]  Новая ошибка это что? Это просто то, что я опять же хотел послать. Ошибка с прошлой итерации, плюс
[54:52.640 --> 54:57.440]  новый градиент. Минус то, что я в итоге послал. Сжатая версия этого всего безобразия. Все,
[54:57.440 --> 55:06.880]  простая идея, но она решает эту задачу. Решает проблему с тем, что ничего не сходится. Вот. Ну
[55:06.880 --> 55:14.840]  и он, например, на каком-то там бейзлане можно посмотреть. Небольшая сетка. Несколько сотен тысяч
[55:14.840 --> 55:22.680]  параметров. Ну, вы там обучали какой-нибудь на маршрумсах. Там сто переменных. Здесь ну там
[55:22.680 --> 55:30.280]  200 тысяч переменных. И, соответственно, вместо передачи полного вектора я передаю пять компонентов.
[55:30.280 --> 55:39.280]  Пять компонентов. Ну и все на самом деле живет. Живет и пахнет. Зеленым показан бейзлайн, как будто
[55:39.280 --> 55:47.920]  я использую честный SGD. Синий. Передаю пять компонентов. Пять компонентов. Максимальный по
[55:47.920 --> 55:54.720]  модулю. Вот. Желтый. Пять случайных компонентов. Ничего не обучается. Ну синий более-менее как-то
[55:54.720 --> 56:02.920]  ползет. В случае с компенсацией ошибки все вообще замечательно. Все вообще замечательно. То есть видно,
[56:02.920 --> 56:10.120]  что он работает, ну понятно, хуже чем зеленый. Вот. Потому что зеленый передает полные градиенты.
[56:10.120 --> 56:16.880]  Но если вот это все безобразие отложить не в эпохах, то есть не в итерациях, а по количеству
[56:16.880 --> 56:22.960]  переданной информации, то там красный он вот здесь вообще оказывается. То есть там сильно вообще, ну то есть
[56:22.960 --> 56:30.480]  пять координат вместо там тысячи, сто тысяч это конечно там вот так что-то будет выглядеть. Это обучение.
[56:30.480 --> 56:37.920]  Вот. Поэтому тут понятно есть эти значительные улучшения. Вот. Теория сходимости. Опять же линейная
[56:37.920 --> 56:46.240]  сходимость. Вот. Плюс кусочек, который нужно компенсировать. Опять же сходимость к окрестности.
[56:46.240 --> 56:56.200]  Вот. Можно опять же решить этот вопрос с помощью Дианы. Вот. Называется Error Feedback 21. По-другому
[56:56.200 --> 57:03.440]  назвали алгоритм, но суть такая то, что это просто Диана. Вот. Память вводите, сжимаете и пересылаете не
[57:03.440 --> 57:12.320]  градиенты, а пересылаете разность между градиентом и тем, что послали дальше. Вот. Та же самая идея. Вот.
[57:12.320 --> 57:18.000]  Сходимости. Сходимости. Чтобы закончить сюжет с компрессиями, нужно обсудить сходимости. Вот.
[57:18.000 --> 57:26.760]  Диана вот такая оценка, Error Feedback 21 вот такая оценка. Обе линейные, обе-обе вроде хорошие, но здесь есть
[57:26.760 --> 57:34.080]  эффект от Эмки, он ключевой. Здесь этого эффекта нету. Вот. То есть, к сожалению, это вообще проблема
[57:34.080 --> 57:41.080]  теории смещенных операторов сжатия, что для них не получается доказать, что они лучше,
[57:41.080 --> 57:50.680]  чем обычный градиентный спуск. Вот. Но на практике все, конечно, летает. Единственное, что та теория,
[57:50.680 --> 57:54.880]  которая вообще создана вот в этой распределенной оптимизации с смещенными компрессорами, она хотя
[57:54.880 --> 58:01.600]  бы помогла прийти к тому, что вот с Error Feedback сходится, без Error Feedback не сходится, поэтому давайте
[58:01.600 --> 58:09.480]  использовать. Опять же, Диана, ну или вариант Дианы, который назван Error Feedback 21, он помогает тоже
[58:09.480 --> 58:14.480]  сходимости работать даже лучше, чем, например, обычный Error Feedback в некоторых ситуациях. Ну вот,
[58:14.480 --> 58:22.680]  теория скорее про это. Пока получить улучшение, почему там топ-1 сжатия там работает, работает для
[58:22.680 --> 58:28.560]  Server Feedback и работает лучше, чем обычный градиентный спуск, не получается. Хотя графики показывают,
[58:28.560 --> 58:37.920]  что там реально просто замечательная сходимость. Вот. Но, в теории, все не так радужно. Вот в этом вопросе.
[58:40.480 --> 58:49.560]  Окей. Второй сюжет. Можно же не сжимать информацию, можно пойти другим путем. То есть сжать информацию,
[58:49.560 --> 58:55.200]  мы опять же коммуницируем каждую итерацию, но коммуницируем соответственно по сжатым пакетам,
[58:55.200 --> 59:01.480]  поэтому за счет этого получается более эффективно. Второй подход. Давайте тогда не сжимать передаваемую
[59:01.480 --> 59:07.360]  информацию, но коммуницировать реже. Коммуницировать реже не каждую итерацию. Диаметральный взгляд,
[59:07.360 --> 59:13.920]  вот. Но тоже рабочий. Суть очень простая. Давайте я на каждом из устройств буду запускать
[59:13.920 --> 59:24.200]  градиентный спуск. Стокастический либо обычный градиентный спуск. Вот. По своей локальной функции,
[59:24.200 --> 59:30.520]  по своей локальной функции, не по функции f. То есть каждое устройство просто независимо начинает
[59:30.520 --> 59:35.960]  спускаться по своей функции, получая там идя к своему оптимуму. Дальше я говорю, давайте как
[59:35.960 --> 59:41.880]  каждую итерацию вы мне усредните это значение. То, что вы там наполучали, свои переменные,
[59:41.880 --> 59:48.880]  вы усредните между собой. И дальше вы пойдете уже делать эти, опять же, локальные шаги не с той точки,
[59:48.880 --> 59:54.960]  которая у вас была, а вот с этой средней точки. Вся идея. Очень простая. Называется параллельный
[59:54.960 --> 01:00:02.000]  градиентный спуск, параллельный sgd. Придумано там больше 30 лет назад, но опять же она в некотором смысле
[01:00:02.000 --> 01:00:07.200]  реэнкарнировала. В силу того, что распределенная оптимизация стала супер популярна, а такого
[01:00:07.200 --> 01:00:13.800]  рода алгоритм очень просто. Что его реализовывает? Чтобы меньше коммуницировать, просто делай локальные
[01:00:13.800 --> 01:00:20.920]  шаги и усредняйся. Проблема этого алгоритма заключается в том, что в силу того, что вы по факту
[01:00:20.920 --> 01:00:28.800]  просто ползете к каждому из локальных оптимумов, это проявляется вот таким вот образом. Делайте одну
[01:00:28.800 --> 01:00:33.680]  локальную итерацию и каждый раз усредняйтесь. Это просто градиентный спуск. Вроде как сходите все
[01:00:33.680 --> 01:00:43.200]  хорошо, леднее на крешению. Делаете много локальных итераций, сходите к крешению быстрее с точки
[01:00:43.200 --> 01:00:50.040]  зрения коммуникации, но начинайте стопориться. В какой-то момент начинаете асцелировать.
[01:00:50.040 --> 01:00:57.080]  Чем больше локальных итераций, тем у вас асцеляция не хуже. Понятно, что там
[01:00:57.080 --> 01:01:05.240]  две локальные итерации. Решение хорошее, но там уже 32 локальные итерации и у вас там решение
[01:01:05.240 --> 01:01:14.360]  стало значительно хуже. И на самом деле этот фактор не убираем. Это физика этого метода, потому что
[01:01:14.360 --> 01:01:20.320]  у вас есть какая-то стартовая точка и все как-то поползли в своем траектории. Ну пусть у них
[01:01:20.320 --> 01:01:30.920]  там вот как-то так лежат решения. А оптивум где-то например здесь находится. Это оптивум каждого из
[01:01:30.920 --> 01:01:37.720]  устройств. И вроде бы на начальных итерациях все хорошо. Вы усреднились, получили что-то здесь.
[01:01:37.720 --> 01:01:43.120]  Дальше опять же все поползли по своим направлениям, усреднились, получили что-то здесь. Вы приближаетесь
[01:01:43.120 --> 01:01:49.200]  и к своим локальным решениям и приближаетесь к оптивуму. Все хорошо. Но когда вы находитесь уже
[01:01:49.200 --> 01:01:55.480]  близко к решению, ситуация резко меняется. Потому что ну вот например вы и дошли до какой-то
[01:01:55.480 --> 01:02:02.280]  такой точки, она у вас стартовая. Вот вы начинаетесь каждый ползти к своему решению. Усредняетесь,
[01:02:02.280 --> 01:02:06.960]  оказываетесь где-то здесь. Ну и опять же начинаете ходить к своему решению, усредняетесь опять же
[01:02:06.960 --> 01:02:12.920]  оказываетесь здесь. При этом решение вот это х звездой оно остается в некотором смысле в стороне.
[01:02:12.920 --> 01:02:26.920]  Вот. Решение х звездой она остается в стороне. Так, и соответственно.
[01:02:31.920 --> 01:02:34.520]  Надо ответить. Просто это.
[01:02:34.520 --> 01:02:45.840]  Она просто кофе-машину доставляет в лаборатории, надо ее принять. Вот. Получается вот такая вот
[01:02:45.840 --> 01:02:54.480]  ситуация. Ну и как показывает теория, этот фактор не устраним. Этот фактор не устраним и ничего вы с
[01:02:54.480 --> 01:03:01.960]  этим безобразием не сделаете. Поэтому приходится с этим жить. Но давайте попробуем придумать какой-то
[01:03:01.960 --> 01:03:08.280]  способ, как это можно устранить. Вот что-то уже из машинного обучения знаете. Вот. Что-нибудь вы уже
[01:03:08.280 --> 01:03:20.640]  знаете, да? Да, это хороший вариант, но хочется, не уменьшая глубину, вот как-то все равно это объезжать.
[01:03:20.640 --> 01:03:25.640]  В чем эффект? Вот смотрите, я каждый раз, вот локальные шаги, мы поняли, это не очень хорошо,
[01:03:25.640 --> 01:03:34.480]  потому что каждый из устройств начинает ползти к своему оптимуму, да? И поэтому усредненная точка,
[01:03:34.480 --> 01:03:40.040]  она не очень хороша. А что значит вот с точки зрения машинного обучения, вот это локальный оптимум?
[01:03:40.040 --> 01:03:50.960]  Оверфит. Правильно. Это эффект переобучения. То есть вы начинаете, чем больше вы делаете
[01:03:50.960 --> 01:03:56.840]  локальных шагов, тем вы как бы переобучаетесь на своих локальных данных, и это переобучение,
[01:03:56.840 --> 01:04:05.800]  оно вам мешает. Защита от переобучения? Как защититься от переобучения? Регуляризатор,
[01:04:05.800 --> 01:04:13.240]  пожалуйста. Вот. Давайте тогда, когда я буду решать эту локальную задачу, я буду просить делать
[01:04:13.240 --> 01:04:19.840]  шаги не просто по функции локальной, а по локальной функции плюс регуляризатор. И суть этого регуляризатора
[01:04:19.840 --> 01:04:26.400]  заключается в том, что у меня есть некоторая точка В, которая является референсной. Ну,
[01:04:26.400 --> 01:04:31.640]  например, последняя средняя точка, которую я там когда-то усреднял. Вот. И тогда в силу того,
[01:04:31.640 --> 01:04:38.760]  что этот регуляризатор меня держит, я от нее не отвалю. Вот. Далеко. Из-за оверфитинга. Все. Вся
[01:04:38.760 --> 01:04:45.560]  идея. Ну, вот здесь, например, она реализована. Там написано абсолютно по-другому. Там рассказываются
[01:04:45.560 --> 01:04:50.720]  про шифты, какие-то дополнительные последовательности. Суть очень простая. Регуляризатор. Вот.
[01:04:50.720 --> 01:04:58.120]  И, на самом деле, эта идея с регуляризатором в локальных методах, она такая, что ли, сквозная. И
[01:04:58.120 --> 01:05:08.480]  сейчас мы посмотрим, как ее можно использовать. Вот. Но изначально вообще возникает вопрос. Вот.
[01:05:08.480 --> 01:05:16.440]  Возникает вопрос. А зачем вообще нужны локальные методы? Потому что, ну, вот, кажется, что нижняя
[01:05:16.440 --> 01:05:22.600]  оценка на число итерации, она же на число коммуникации, она вот такая. Вот. А какой метод дает такую оценку?
[01:05:22.600 --> 01:05:34.040]  Нестер. То есть, кажется, что можно просто делать распределенный Нестеров. Вот. И все. И все.
[01:05:34.040 --> 01:05:39.080]  Потому что, а лучше ничего не придумаешь, потому что лучше, чем нижняя оценка, вы не сделаете. И,
[01:05:39.080 --> 01:05:43.560]  получается, как вот мы адаптировали градиентный спуск под распределенный сеттинг, можно также
[01:05:43.560 --> 01:05:52.040]  адаптировать Нестерова. Вот. Единственное, что понятно, что все эти локальные методы изначально
[01:05:52.040 --> 01:05:56.520]  придумывались не просто для детерминистического случая, когда у вас вот такие оценки. Они
[01:05:56.520 --> 01:06:02.000]  придумывались для стахотического случая, когда у вас есть ограниченная дисперсия, ну, в теории. Вот.
[01:06:02.000 --> 01:06:06.880]  И хотелось бы что-то как-то с этой дисперсией делать, потому что она вот о вас так вот возникает. Вот. А
[01:06:06.880 --> 01:06:10.960]  какого бы эффекта хотелось добиться за счет большего числа вычислений? То есть, на одном устройстве
[01:06:10.960 --> 01:06:16.960]  вы вроде как можете все решить. Получится там сигма, оценка какая-то гамма в квадрате и так далее.
[01:06:16.960 --> 01:06:22.160]  Хотелось бы что сделать за счет большего числа в устройстве? Получить батч-эффект. Потому что с сил
[01:06:22.160 --> 01:06:27.960]  того, что у вас стахастика везде независима, вы складываете независимые стахастические случайные
[01:06:27.960 --> 01:06:34.920]  величины. Вот. И дисперсия у них уменьшается в М раз, потому что у вас используется М-устройство. Вот.
[01:06:34.920 --> 01:06:39.400]  Вот такого эффекта хотелось добиться. И он реально, в реальности можно добиться, когда вы просто,
[01:06:39.400 --> 01:06:43.800]  если не делаете никакие локальные шаги, просто, например, говорите, я посчитал градиенты
[01:06:43.800 --> 01:06:49.360]  стахастические. Вот. На всех устройствах они мне его слили, и тогда дисперсия общего градиента
[01:06:49.360 --> 01:06:56.600]  будет в М раз больше просто из-за независимости. Вот. Но этого эффекта нету, к сожалению. У локальных
[01:06:56.600 --> 01:07:03.960]  методов вот его искали, показали, что его нет. И получается, что в некотором смысле в общем
[01:07:03.960 --> 01:07:10.960]  сеттинге локальные методы, ну, ничего не дают. Вот. Хотя они классно работают на практике, все это
[01:07:10.960 --> 01:07:16.560]  можно использовать, все это применяется в реальных задачах, в том числе в ваших телефонщиках это уже
[01:07:16.560 --> 01:07:22.600]  давно крутится. Вот. Но с точки зрения теории, тут, к сожалению, есть более эффективные вещи.
[01:07:22.600 --> 01:07:29.280]  Единственное, что хочется рассказать про сюжет, когда вообще локальные шаги действительно имеют
[01:07:29.280 --> 01:07:35.480]  место. Вот. Этот сюжет называется Data Similarity, и суть этого сюжета заключается в том, что,
[01:07:35.480 --> 01:07:41.800]  ну, не зря он так называется, похожесть данных. Похожесть данных и, оказывается, в случае
[01:07:41.800 --> 01:07:47.920]  похожести данных вот уже можно вытащить то, что локальный метод дает улучшение, дает улучшение.
[01:07:47.920 --> 01:07:56.400]  Так. В чем суть? В чем суть? Опять же, делим нашу выборку на кусочки. Вот. Только здесь эти кусочки будут
[01:07:56.400 --> 01:08:08.320]  уже распределяться равномерно. Вот. Почему равномерно? На самом деле пока, пока. Я говорю равномерно,
[01:08:08.320 --> 01:08:16.560]  в конце я сделаю референс, что на самом деле достаточно и обычного деления, вот, ну, произвольного.
[01:08:16.560 --> 01:08:21.920]  Но пока будем считать, что пусть у нас будет все равномерно разделено. Вот. И что я хочу сделать?
[01:08:21.920 --> 01:08:26.040]  Я хочу ввести дополнительное, в дополнительное предположение. Потому что мы понимаем, что без
[01:08:26.040 --> 01:08:31.120]  дополнительного предположения тут не выжить. Это вот ровно то, что происходит, например, вот,
[01:08:31.120 --> 01:08:38.000]  почему Нестеров, ну, не улучшаемый метод среди методов первого порядка, имеет какие-то определенные
[01:08:38.000 --> 01:08:43.600]  оценки и лучше, чем они не получаются. При этом можно, например, в случае стокастической задачи
[01:08:43.600 --> 01:08:49.840]  получить методы лучше. Там условно, как мы знаем, там редукция дисперсии работает быстрее, чем Нестеров
[01:08:49.840 --> 01:08:54.360]  для стокастической задачи. Но вы ввели специфику задачи, вы говорите, что она имеет вид суммы,
[01:08:54.360 --> 01:09:01.160]  потому что Нестеров это не учитывает, что можно считать сумму не полностью, то есть не полный
[01:09:01.160 --> 01:09:07.000]  градиент, а по бачу. Поэтому вот, опять же, чтобы получить какие-то более классные результаты и
[01:09:07.000 --> 01:09:12.920]  получить какой-то эффект от локальных шагов, нужно в некотором смысле сузить задачу, ввести
[01:09:12.920 --> 01:09:17.720]  специфику, и эта специфика даст улучшение. Специфика будет следующая. Похожесть гесианов,
[01:09:17.720 --> 01:09:24.600]  то что у меня гесиан функции fm и гесиан функции f, они похожи, отличаются на некоторую константу дельта.
[01:09:24.600 --> 01:09:32.960]  Вот. Понятно, тоже хорошее такое свойство, потому что, опять же, часто рассматривают,
[01:09:32.960 --> 01:09:38.720]  например, похожесть градиентов. Но это не очень классно, потому что для квадратичной задачи
[01:09:38.720 --> 01:09:48.720]  матрица минус матрица, ну это как-то оценивается в духе матрица минус матрица на вектор х. Если х у
[01:09:48.720 --> 01:09:56.000]  вас не ограничен, то у вас, соответственно, это просто устремляется в бесконечность. Вот. А здесь
[01:09:56.000 --> 01:10:02.920]  гесиан, там будет вылезут просто разница матриц, все четко. Более того, на самом деле можно и доказать,
[01:10:02.920 --> 01:10:08.440]  что все будет хорошо. Для этого нужны концентрационные неравенства, в частности, вот неравенство Хевдинга,
[01:10:08.440 --> 01:10:18.200]  давайте я его пролесну, покажу, что оно используется. Потом можно в презентации просто посмотреть. На самом
[01:10:18.200 --> 01:10:23.360]  деле, ну, предельно неравенства, они все более-менее похожи друг на друга. Суть их заключается в том,
[01:10:23.360 --> 01:10:29.160]  что в некотором смысле оценить дисперсию. Здесь, ну, потому что мотождание тут ноль, здесь оценивается
[01:10:29.160 --> 01:10:34.680]  дисперсия, тут можно эту щуянку впихать сюда. Вот. И тогда у вас здесь будет корень из N. То есть,
[01:10:34.680 --> 01:10:41.800]  дисперсия вот такого вот, такой суммы матриц, оно для матриц случайно записывается, она уменьшается
[01:10:41.800 --> 01:10:48.000]  как корень из N. Ну, понятный эффект вроде как. Вот. Понятно, что в тупом случае у вас вот этого корня из N
[01:10:48.000 --> 01:10:53.160]  нету, вы просто дисперсию оцениваете как сверху, как А в квадрате, потому что матрица так ограничена
[01:10:53.160 --> 01:10:59.360]  а в квадрате. Ну, оказывается, что если у вас они независимые между собой генерируются, понятно,
[01:10:59.360 --> 01:11:08.160]  что возникает эффект, батч-эффект. Вот. И на самом деле можно воспользоваться теми равенствами хэудинга
[01:11:08.160 --> 01:11:15.160]  для нашей задачи, для нашей функции fm. И почему я говорил про равномерность данных? У вас есть
[01:11:15.160 --> 01:11:23.800]  гисиан один, гисиан другой. Вот. И получается, что здесь вот этот гисиан, который по конкретному
[01:11:23.800 --> 01:11:29.040]  сэмплу, он зависит от этого сэмпла. И если этот сэмпл распределен равномерно, то есть вы конкретно
[01:11:29.040 --> 01:11:34.240]  вот на этом устройстве их раскидали равномерно между собой, то в среднем этот сэмпл будет просто равен
[01:11:34.240 --> 01:11:39.320]  честным гисиану. Это ровно как у нас был стахистический градиент, так взяли градиент по одному сэмплу,
[01:11:39.320 --> 01:11:45.480]  в среднем это просто честный градиент. И здесь то же самое. Поэтому вот нужно равномерное деление,
[01:11:45.480 --> 01:11:51.720]  чтобы воспользоваться хэудингом. И хэудинг вам даст, что оказывается, константа дельта, это
[01:11:51.720 --> 01:11:58.400]  similarity, это просто константа l делить на корень из n, где n это количество данных, которые вы запихали
[01:11:58.400 --> 01:12:06.520]  на устройство. И видно, что чем больше данных вы запихали, тем параметр похожести меньше. И вот
[01:12:06.520 --> 01:12:16.280]  сейчас мы это будем использовать. Вот. Использовать мы это будем довольно-то хитро. Будем рассматривать
[01:12:16.280 --> 01:12:22.440]  зеркальный спуск, знакомый уже с этим методом, но он возникнет сейчас в какой-то такой красивой
[01:12:22.440 --> 01:12:29.000]  апостасе. Не для вот этих симплексов и так далее, а вот для конкретной задачи similarity. Вот. Как он
[01:12:29.000 --> 01:12:34.760]  сходится, мы с вами знаем. Но здесь факт доказательства сделан другой через относительную
[01:12:34.760 --> 01:12:39.680]  выпуклость и относительную сильную гладкость. То есть здесь предполагается относительная сильная
[01:12:39.680 --> 01:12:44.480]  выпуклость относительно дивергенции Брегмана и гладкость аналогична. Но вы знаете, что там
[01:12:44.480 --> 01:12:49.680]  дивергенция Брегмана, в частном случае, там евклидовой нормы, это просто вот такое вот. И вот
[01:12:49.680 --> 01:12:54.280]  это определение, которое написано на самом деле по факту, ну в частном случае, эквивалент от
[01:12:54.280 --> 01:13:00.880]  того, с чем мы обычно работаем. Но в общем случае можно определить вот так. Вот так вот гладкость,
[01:13:00.880 --> 01:13:06.280]  вот так вот выпуклость. Относительную сильную выпуклость. В таком сеттинге тоже можно работать,
[01:13:06.280 --> 01:13:11.920]  можно доказать сходимость. Вот. Вот такая вот получается, как у обычного градиентного спуска.
[01:13:11.920 --> 01:13:19.240]  Только тут уже фигурируют константы сильной выпуклости, сильной гладкости в нашем конкретном
[01:13:19.240 --> 01:13:23.280]  случае. Ну то есть вот эти относительные. Относительные дивергенции Брегмана.
[01:13:23.280 --> 01:13:29.440]  И метод будет довольно хитрый. Давайте вот мы сейчас быстренько про него поймем физику. И
[01:13:29.440 --> 01:13:36.760]  это главное, что нужно понять про этот метод. Дальше уже там скорее так. Будут больше такие. Я
[01:13:36.760 --> 01:13:41.560]  вообще ни слова. Вот такой вот метод я хочу сделать, конкретно уже под нашу задачу. И
[01:13:41.560 --> 01:13:50.040]  дивергенцию Брегмана породить вот такой вот функцией. f1, f1 то, что у меня хранится на сервере,
[01:13:50.040 --> 01:13:58.880]  плюс дельта х. Дельта пополам х. Вот. Давайте порассуждаем. Вот я сделал к итерации этого метода.
[01:13:58.880 --> 01:14:04.320]  К большой итерации. Сколько я сделал коммуникации? Вроде бы метод довольно сложный. То есть тут
[01:14:04.320 --> 01:14:11.600]  нужно сначала градиент посчитать, потом вот эту аргумина отрешать. Вот. Сколько я при этом сделал
[01:14:11.600 --> 01:14:17.200]  коммуникации? Вот. В этой методе. Опять же в ситуации, когда у нас есть просто сервер, например.
[01:14:17.200 --> 01:14:25.360]  Вот. Куда мы все скидываем? Когда нам может понадобиться коммуникация?
[01:14:25.360 --> 01:14:36.200]  Все правильно. Смотрите. Во-первых, понятно, нам нужно передать точку. Вот. Ну, вся операция,
[01:14:36.200 --> 01:14:41.480]  которая, во-первых, мне точно нужна, это посчитать полный градиент точки VK. Поэтому мне нужно от
[01:14:41.480 --> 01:14:48.200]  сервера передать точку VK. Все по ней посчитают градиенты. И дальше я на сервере соберу полный
[01:14:48.200 --> 01:14:55.960]  градиент F. Вот. Окей, посчитали. Теперь мне нужно отрешать аргуминимум. Что мы можем про этот
[01:14:55.960 --> 01:15:05.240]  аргуминимум сказать? Сколько тогда будет коммуникаций, чтобы отрешать этот аргуминимум?
[01:15:05.240 --> 01:15:15.520]  Там же будет какая-то оптимизационная задача. Вот. Не самая простая, кстати. То есть, возможно,
[01:15:15.520 --> 01:15:21.360]  этот аргуминимум придется решать численно. Вот. Не обязательно. То есть, там это будет явное
[01:15:21.360 --> 01:15:28.000]  выражение. Он завязан на F1. Но то, что он завязан на F1, это ключевое. То есть,
[01:15:28.000 --> 01:15:37.560]  аргуминимум зависит только от F1. Так. Получается, я посчитал градиент и больше его не трогаю. Так.
[01:15:37.560 --> 01:15:44.640]  У меня осталась задача, которая зависит только от F1. Получается, я могу ее отрешать тупо на сервере.
[01:15:44.640 --> 01:15:52.560]  Не коммуницирую я вообще. Вся идея вот в этом. То есть, вот за одну итерацию такого метода вы
[01:15:52.560 --> 01:15:58.760]  коммуницируете один раз. Все остальные вычисления вы делаете тупо на одном устройстве. Это, кстати,
[01:15:58.760 --> 01:16:03.400]  в некотором смысле новиночка тех методов, которые мы вообще рассматривали. До этого на все считали
[01:16:03.400 --> 01:16:09.720]  все. И все были в некотором смысле равны между собой. Здесь у нас все вычисления делают одного
[01:16:09.720 --> 01:16:15.480]  устройства. Ему нужно просто прислать градиент. И, оказывается, можно доказать сходимость этого
[01:16:15.480 --> 01:16:21.880]  метода, оценить константы L и mu, и они окажутся довольно хорошими. L окажется единичке равна,
[01:16:21.880 --> 01:16:27.400]  mu окажется равна своему значению. И получится вот такая вот сходимость. Сейчас покажу. Вот.
[01:16:27.400 --> 01:16:34.280]  По количеству утераций вот так вот получаем. 1 плюс дельта делить на mu. 1 плюс дельта делить на mu.
[01:16:34.280 --> 01:16:42.760]  Ну и давайте сравним, соответственно, с градиентным спуском. Ну, понятно, что лучше. Что лучше?
[01:16:45.080 --> 01:16:52.400]  Какая лучше? Верхняя или нижняя оценка? Верхняя, конечно, лучше, потому что мы знаем, что дельта у
[01:16:52.400 --> 01:16:58.360]  нас это L делить на корень из N, где N — это количество данных. Все. Вот он эффект. То есть вот мы
[01:16:58.360 --> 01:17:04.440]  разбили вот за счет дополнительного предположения вот этого хитрого зеркального спуска. Мы пришли к
[01:17:04.440 --> 01:17:12.400]  тому, что с точки зрения коммуникации и похожести мы вытянулись. Мы вытянулись отлично. Ну а теперь
[01:17:12.400 --> 01:17:18.040]  немного про физику этого всего безобразия, чтобы стало еще более понятно. Смотрите, вот этот аргмент,
[01:17:18.040 --> 01:17:23.520]  который я здесь записал, можно же честно реально подставить эту фи сюда и записать. Ну вот я
[01:17:23.520 --> 01:17:30.600]  диверген субрегмана конкретно расписываю, который порождает функция вот эта фи, f1,
[01:17:30.600 --> 01:17:36.640]  бла-бла-бла и так далее. Вот. Это вот порождается как раз вот этой нормой, просто этот ифклидова
[01:17:36.640 --> 01:17:42.880]  норма в квадрате порождает вот такую норму. Вот. Получается вот такая вот задачка. Вот. И эту
[01:17:42.880 --> 01:17:49.080]  задачку еще можно чуть-чуть покрутить, потому что под аргминемумом стоит, понятно, какое-то выражение.
[01:17:49.080 --> 01:17:55.040]  Я, например, сюда могу написать vk дополнительно, потому что от vk у меня ничего не зависит. Ну,
[01:17:55.040 --> 01:18:01.480]  аргминемум же это просто значение v. Поэтому добавление любого вещи, которое просто меняет
[01:18:01.480 --> 01:18:07.080]  целевую функцию, оно не меняет аргминемум. Поэтому я могу сюда дописать vk, дописать что-то в духе вот
[01:18:07.080 --> 01:18:13.320]  этого в квадрате, вот этого безобразия в квадрате. Вот. И занести это под норму. И получится вот такое
[01:18:13.320 --> 01:18:17.800]  вот выражение. Вот такое вот выражение, что мы вот минимизируем на самом деле на каждой
[01:18:17.800 --> 01:18:27.240]  итерации вот вот это. Вот. А это же на что похоже? f1 плюс, ну я могу даже дельту вот сюда написать,
[01:18:27.240 --> 01:18:38.000]  плюс что? Что это? Ну вот это вот на что похоже. Я уже вроде показывал сегодня такое. Ну это
[01:18:38.000 --> 01:18:44.160]  регулизатор. Вот. Это же просто регулизатор. Берем локальную задачку, говорим, минимизируем мне
[01:18:44.160 --> 01:18:48.920]  эту локальную задачу. Там градиентным спуском, ускоренным, неважно. Вот, стахистическим методом.
[01:18:48.920 --> 01:18:54.680]  Вот. Но минимизируй, пожалуйста, с регулизатором. И вот это в некотором смысле закольцовка идеи,
[01:18:54.680 --> 01:19:01.560]  что здесь она тоже возникает. И без вот этой идеи с регулизатором жить довольно сложно. Вот. Тут
[01:19:01.560 --> 01:19:07.560]  просто референс на точку довольно хитрая. Вот. Как еще на это все безобразие можно смотреть? То
[01:19:07.560 --> 01:19:13.720]  есть мы поняли, сначала зеркальный спуск, первый вариант понятно. Оказывает, это еще и решение
[01:19:13.720 --> 01:19:25.440]  регулизованной задачи. Но можно смотреть еще похитрее. Вот. Смотрите, как еще приятно это можно
[01:19:25.440 --> 01:19:30.960]  смотреть, как будто у нас задача композитной оптимизации. Мы для нее знаем метод, этот метод
[01:19:30.960 --> 01:19:36.080]  проксимальный. Проксимальный метод, который соответственно что? По одной из функций считает
[01:19:36.080 --> 01:19:41.000]  прокс, а по другой честный градиент. Но это же здесь и записано было. Потому что здесь стоит как
[01:19:41.000 --> 01:19:47.000]  будто градиент какой-то функции, а здесь другая функция. И оказывается, если эти функции g и g2
[01:19:47.000 --> 01:19:54.960]  хитро определить, то у вас появится просто проксимальный метод. g2 это просто f1. Так. А здесь
[01:19:54.960 --> 01:20:02.440]  у вас g1, в которой вы посчитали градиент. Разница f и f1. Тоже же вариант, потому что исходная задача
[01:20:02.440 --> 01:20:08.680]  у вас f, а вы ее вот так вот расписываете на два куска. Искусственно, искусственно, но это же здесь
[01:20:08.680 --> 01:20:15.720]  и проявляется. Вот. Получается вы сделали еще и проксимальный метод. Для такой вот задачи.
[01:20:15.720 --> 01:20:20.080]  Композитный. Вот для такой. Единственная специфика этой композитной задачи заключается в том,
[01:20:20.080 --> 01:20:27.760]  что у вас вот эта функция f-f1, она в общем случае вообще не выпуклая. Потому что разница двух
[01:20:27.760 --> 01:20:33.160]  выпуклых функций, хрен знает, что с ней произошло. Но она дельта гладкая. Дельта гладкая, потому что как
[01:20:33.160 --> 01:20:42.680]  раз у нее гессиан будет ограничен. Вот. А f1 выпуклая. Вот. Такая вот необычная задачка. Такая вот необычная
[01:20:42.680 --> 01:20:47.920]  задачка. Получается, что вы делаете проксимальный метод для не выпуклой задачи. Ну, для не выпуклой
[01:20:47.920 --> 01:20:54.560]  функции. Ну, общая, кстати, функция тоже будет выпуклая. Выпуклая. Как мы знаем. Вот. Получается у вас
[01:20:54.560 --> 01:21:00.880]  один кусочек не выпуклый. Второй выпуклый. Вся функция выпукла. Но вот плохой кусочек. Он дельта гладкий.
[01:21:00.880 --> 01:21:08.080]  А констат гладкости лучше. Поэтому вы как бы его выпихиваете на внешнюю террацию. А вот f1 вы
[01:21:08.080 --> 01:21:16.920]  запихиваете в прокс. Вот. Еще один взгляд вот такой вот. Как еще можно на это все безобразие
[01:21:16.920 --> 01:21:23.400]  посмотреть? Я здесь это не написал. Но смотрите, если вот для вот этого метода, который написан вот
[01:21:23.400 --> 01:21:30.440]  здесь вот. Запишем шаг градиентного спуска. Запишем шаг градиентного спуска. У вас же что будет?
[01:21:30.440 --> 01:21:37.960]  Считаться градиенту f1 в какой-то там новой точке. Ну, вот. Вы решаете тут вот этот аргминимум. Решайте
[01:21:37.960 --> 01:21:42.880]  этот аргминимум дополнительным градиентным спуском. Ну, у вас что будет? Какой-то градиент
[01:21:42.880 --> 01:21:48.040]  f1 считаться. Плюс градиент от этой нормы в квадрате. А из этой нормы в квадрате у вас
[01:21:48.040 --> 01:21:55.640]  будет вылезать. Соответственно что? Градиент f в точке vk фиксированный. Минус градиент f1 в
[01:21:55.640 --> 01:22:02.800]  точке vk. Вот что это такое? Там еще будут вылезать другие члены. Но вот. Вот так вот еще будут вылезать.
[01:22:02.800 --> 01:22:14.960]  На что похоже? Честная функция, но в старой точке. Минус моя локальная функция в старой точке. Плюс
[01:22:14.960 --> 01:22:26.760]  в новой точке. Редукция дисперсии. Ну, редукция дисперсии svrg. Но единственное, что тут стахастики
[01:22:26.760 --> 01:22:33.760]  конечно нету, потому что у вас f1. Вот. Вот такую технику, которая, например, с проксимальным
[01:22:33.760 --> 01:22:40.160]  оператором называется. Это называется слайдинг. Когда вы по одной функции сделали один градиентный
[01:22:40.160 --> 01:22:46.440]  шаг, градиент зафиксировали. Но вот как здесь. Опять же, по функции этой вы сделали один
[01:22:46.440 --> 01:22:52.520]  градиентный шаг, градиент зафиксировали. А по второй функции продолжаете итерироваться.
[01:22:54.520 --> 01:22:59.560]  По этой функции вы итерируетесь, по этой функции у вас все зафиксировано. Это называется техника
[01:22:59.560 --> 01:23:04.880]  скольжения. По одной функции вы скользите, а другой вы фиксируете. И по этой небольшой шаге
[01:23:04.880 --> 01:23:11.300]  делайте по этой вот такая вот физика этого всего безобразия вот то есть тут
[01:23:11.300 --> 01:23:17.420]  довольно такие красивые идеи смотрите заканчивать нужно ну давайте быстренько
[01:23:17.420 --> 01:23:23.900]  совсем и обзорно покажу что еще тут можно сделать и что сделано смотрите то
[01:23:23.900 --> 01:23:28.220]  есть вот наша оценка вроде как лучше чем у градиентного спуска у скорины
[01:23:28.220 --> 01:23:32.660]  нестеров дает корень какая из них лучше вообще непонятно то есть корень может
[01:23:32.660 --> 01:23:39.400]  быть даже лучше чем дельта делить на мю вот и была получила нижняя оценка там
[01:23:39.400 --> 01:23:46.460]  в 15 году что вроде как можно добиться результата того чтобы получить
[01:23:46.460 --> 01:23:51.540]  ускорение для similarity но 8 лет этого добиться не могли что-то куча работ было
[01:23:51.540 --> 01:23:56.420]  от разных авторов но получилось у нас в прошлом году на конференции подали
[01:23:56.420 --> 01:24:02.380]  статью что этот результат возможен вот такой вот метод довольно хитрый то есть
[01:24:02.380 --> 01:24:06.700]  тут используется сразу три идеи 1 это ускорение нестерова плюс идея слайдинга
[01:24:06.700 --> 01:24:10.700]  но первое как раз вот первое второе это понятно что это нужно делать потому что
[01:24:10.700 --> 01:24:14.340]  чтобы получить ускоренный метод нужно ускорить его вот поэтому нестеров там
[01:24:14.340 --> 01:24:17.860]  нужен слайдинг ну опять же слайдинг как раз нужно для того чтобы вытащить
[01:24:17.860 --> 01:24:21.860]  similarity мы это и использовали для этого ну как называйте как угодно это мир
[01:24:21.860 --> 01:24:28.460]  аппрокс там не зеркальный спуск такой специализированный слайдинг вот но
[01:24:28.460 --> 01:24:32.380]  треть вот треть первые две идеи не давали результат на самом деле то есть
[01:24:32.380 --> 01:24:37.380]  понятно что люди бились пытались третья идея на самом деле дала результат
[01:24:37.380 --> 01:24:43.260]  использование экстраградиентного метода непонятно как бы физика поэтому понятно
[01:24:43.260 --> 01:24:48.920]  что здесь это можно сделать да да что-то даст результат но оказалось дало дало
[01:24:48.920 --> 01:24:53.660]  в силу специфики как раз задачки то что там есть не выпуклый кусочек вот а
[01:24:53.660 --> 01:24:58.780]  экстраградиент он в некотором смысле как бы придуман то прежде всего для
[01:24:58.780 --> 01:25:03.580]  седловых задач и вариационных неравенств и вот там вот не нужно как-то
[01:25:03.580 --> 01:25:06.940]  пользоваться вообще существования функции там достаточно просто полипшится в
[01:25:06.940 --> 01:25:12.260]  исте оператора все расписывать и эта идея выстрелил то есть тут вот видите такая
[01:25:12.260 --> 01:25:17.380]  синергия трех идей ускорение слайдинг плюс метод вообще для седловых задач и
[01:25:17.380 --> 01:25:24.140]  вариационных неравенств который оказался классный с этой точки зрения вот так
[01:25:24.140 --> 01:25:29.620]  ну еще здесь еще рассказываю говорю о том что опять же результаты нестира можно
[01:25:29.620 --> 01:25:33.740]  ускорить за счет специфики задачи и результаты семиллярити тоже можно
[01:25:33.740 --> 01:25:39.060]  ускорить за счет специфики задачи вот потому что если у вас задача соответственно
[01:25:39.060 --> 01:25:44.020]  дает вот такие вот оценки можно вы выбить оценки лучше за счет того что
[01:25:44.020 --> 01:25:48.460]  вы введете дополнительную специфику еще например скажете что теперь можно
[01:25:48.460 --> 01:25:52.940]  пересылать жатую информацию вот разрешите сделать компрессию потому что
[01:25:52.940 --> 01:26:00.420]  нижние оценки для семиллярити были придуманы исходя из того что вы передаете
[01:26:00.420 --> 01:26:04.420]  полные градиенты поэтому получается вот такая вот оценка и так далее дальше вы
[01:26:04.420 --> 01:26:09.300]  говорите окей я разрешаю делать коммуника сжатия нижняя оценка становится лучше
[01:26:09.300 --> 01:26:13.800]  нижняя оценка становится не ну меньше и метод станет появляется который это
[01:26:13.800 --> 01:26:18.580]  может сделать вот введение опять же дополнительные специфики разрешить не
[01:26:18.580 --> 01:26:23.900]  просто учитывать семиллярити но сделать еще компрессию соединять эти две идеи и
[01:26:23.900 --> 01:26:28.940]  как раз может дать дополнительный буст дополнительный буст и получится еще более
[01:26:28.940 --> 01:26:32.860]  такая хорошая синергия вот и более классный результат с точки зрения
[01:26:32.860 --> 01:26:37.620]  исходимости в частности вот тут был м можно поставить им в степени 3 четвертых
[01:26:37.620 --> 01:26:43.900]  здесь вот вот чуть-чуть улучшить результат ну в частности тут все статьи
[01:26:43.900 --> 01:26:50.700]  которые написаны ну одна моя тут две моих первая ну она так вот вторая на
[01:26:50.700 --> 01:26:54.780]  на текущем не все была только что вот ее пару дней назад постер в америке
[01:26:54.780 --> 01:27:03.220]  представили вот третья она на айси лар это вторая по крутости конференции по
[01:27:03.220 --> 01:27:10.260]  машинам обучение вот как-то так все это все на сегодня все ну и вообще это все
[01:27:10.260 --> 01:27:15.420]  по всему курсу спасибо кто дожил в таком небольшом количестве но дожили
[01:27:15.420 --> 01:27:21.180]  приятно вот от меня и от всех ребят кто делал этот курс ну все тогда
[01:27:21.180 --> 01:27:25.660]  поздравляю вас наступающим желаю хорошо сдать сессию у вас была гана какая-то
[01:27:25.660 --> 01:27:30.380]  такая довольно жесткая но я надеюсь там вы семинаристами договоритесь так
[01:27:30.380 --> 01:27:35.500]  чтобы переход именно от зачетной недели по оптимизации к сессии у вас был
[01:27:35.500 --> 01:27:40.180]  довольно плавненький все спасибо большое
