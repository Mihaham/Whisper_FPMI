[00:00.000 --> 00:12.160]  Всем привет! У нас сегодня четвертое занятие по теху, и на самом деле сегодня будет последний
[00:12.160 --> 00:17.200]  раз, когда мы обсуждаем такие базовые вещи, которые касаются набора текста и чего-то вокруг его
[00:17.200 --> 00:25.480]  форматирования. И после этого планируется еще два занятия посвятить тому, чтобы за один раз
[00:25.480 --> 00:31.840]  разобраться со всякой векторной графикой, в частности пакетом TIX, а еще одно занятие, чтобы
[00:31.840 --> 00:36.800]  разобраться с тем, как я вас презентации, вроде той, которая сейчас показывается. Это тоже бывает
[00:36.800 --> 00:40.960]  очень полезно, если вы в всяких конференциях участвуете, ну или просто какие-то штуки для
[00:40.960 --> 00:47.800]  отчетности делаете. Тоже полезный навык. Сегодня я буду, в частности, почищать всякие хвосты,
[00:47.800 --> 00:52.960]  которые образовались за прошлые пары, чтобы потом в чистосовете заниматься с чем-то другим.
[00:52.960 --> 01:01.920]  Да, содержание того, что было сегодня, но, в общем, еще увидим. Сначала всякое разное. Во-первых,
[01:01.920 --> 01:08.320]  я обещал разобраться, чем разница между табьюлерами и тэббингами. Это, как мы в
[01:08.320 --> 01:12.360]  прошлый раз видели, разные окружения, чтобы делать таблицы, и я тогда по старой памяти
[01:12.360 --> 01:18.040]  случайно написал где-то тэббинг, и оно почему-то не заработало, и стало думать, почему. Это очень
[01:18.040 --> 01:22.240]  простой тэббинг, это вообще-то устаревшая штука, лучше вообще никогда не пользоваться. Я не знаю,
[01:22.240 --> 01:27.760]  почему она у меня была в главе вместо табьюлера, но, в общем, тут такая короткая сводка, почему
[01:27.760 --> 01:32.560]  тэббингом лучше не пользоваться и выбирать вместо табьюлера. Во-первых, в тэббинге нет настройки
[01:32.560 --> 01:38.320]  выравнивания текста, по какому из краев. Ну, как помним, окружение тэбьюла принимает первым
[01:38.320 --> 01:44.280]  аргументом некую специальную строку, которая партится на буковке, идентифицирующую выравнивание
[01:44.280 --> 01:48.320]  в колонках, и некоторое количество прямых слайшей, которые отвечают за количество разделителей,
[01:48.320 --> 01:53.920]  ну, линии разделителей между этими колонками. Вот, тэббинга такого нет. Потом там вообще другой
[01:53.920 --> 02:01.360]  тиндексис, там вместо апперсандов что-то вроде знак больше и бэкфлэш, в общем, что-то неудобное и
[02:01.360 --> 02:08.200]  что-то несовместимое с другими окружениями вроде там рэя или матрицы, которые мы уже видели, тоже
[02:08.200 --> 02:16.840]  неудобно. Потом в тэббингах, во-первых, поскольку нет способ делать всякие выравнивания текста,
[02:16.840 --> 02:21.800]  потому что нет аргумента, который подается на вход тэббингу, значит нет способа разделять
[02:21.800 --> 02:29.480]  колонки линиями друг от друга, и поэтому тоже проблема. Ну и да, кроме того, в тэббинге нет
[02:29.480 --> 02:34.040]  ничего из того, что будет дальше, чего мы еще не обсуждали. Я вот решил, раз разговор зашел,
[02:34.040 --> 02:39.000]  обмянуть, какие еще бывают настройки таблиц, потому что мне это периодически бывало полезно,
[02:39.000 --> 02:44.120]  и это, конечно, такая вещь в себе, которую приходится, ну, наверное, каждый раз гуглить заново,
[02:44.120 --> 02:48.880]  когда-то начинаешь с этим пользоваться, как-то не откладывается в памяти, но полезно понимать,
[02:48.880 --> 02:53.800]  что такое вообще существует и этим как-то можно воспользоваться в своей жизни. Вот. Ну, как мы
[02:53.800 --> 02:59.400]  видели, что когда мы открываем окружение тэббюлар, и мы можем подать аргумент вот такого вида,
[02:59.400 --> 03:04.600]  как я написал, то, что я уже упоминал, что вот там идентификаторы и буковки, по какому краю
[03:04.600 --> 03:08.400]  выравнивать, и некоторое количество слэшей, отвечающих за количество вертикальных линий
[03:08.400 --> 03:13.920]  между колонками. Вместо этих буковок могут быть другие буковки, такие, как в первом пункте.
[03:13.920 --> 03:21.520]  Вот такие есть варианты. Соответственно, P в честь переграф, M, видимо, в честь middle,
[03:21.520 --> 03:29.280]  а B, видимо, в честь bottom. Что это за буковки? Они заводят на каждую ячейку в этой колонке специальный,
[03:29.280 --> 03:34.400]  так сказать, параграф. Это некое особое окружение, которое по-хорошему форматируется. Во-первых,
[03:34.400 --> 03:40.000]  в нём по умолчанию выравнивание по ширине, а не по одному из краёв. Ну и во-вторых,
[03:40.000 --> 03:43.960]  внутри него работают всякие модификаторы, как в отдельном блоке. Это бывает удобно.
[03:43.960 --> 03:51.360]  Ну, поскольку тут выравнивание уже не к какому-то краю, а по ширине, то хочется эту ширину указать.
[03:51.360 --> 03:57.920]  И обязательный аргумент любого такого параметра — это, собственно, ширина колонки. Её придётся
[03:57.920 --> 04:03.600]  подбирать руками. Ну, когда вы посмотрите, как будет лучше смотреться и примете какое-то решение,
[04:03.600 --> 04:12.960]  тогда и будет хорошо. Ну, ровно той, за которую отвечает этот конкретный модификатор. Ну, как
[04:12.960 --> 04:22.680]  раньше было, что вместо LRC теперь у нас новая нотация P, M или B. В какой пишем, за ту колонкой
[04:22.680 --> 04:27.920]  отвечает. Ну и есть такое преимущество, если не хочется прямо все колонки вычислять точно
[04:27.920 --> 04:31.960]  сюда. А вот, например, у вас есть некоторое количество колонок, которые нужно сделать там
[04:31.960 --> 04:38.600]  фиксировано маленькими. Ну, допустим, колонка там номер чего-нибудь, какая-нибудь дата. Их мы более
[04:38.600 --> 04:43.080]  или менее понимаем, какой они должны быть ширины, и можем это указать. А все остальные — это какой-то
[04:43.080 --> 04:50.360]  там неограниченно большой текст. И чтобы с ним не париться, есть замена всей этой истории просто
[04:50.360 --> 04:56.200]  большая буква X. Она говорит следующее. Все колонки, которые помещены буквой X, вот между ними вся
[04:56.200 --> 05:00.520]  ширина, которая осталась, делится поровну. Ну, то есть вся ширина, которая осталась после вычета
[05:00.520 --> 05:03.080]  других параметров, если они вообще присутствовали.
[05:03.080 --> 05:10.040]  То есть после фигурных скобок X можно... Да. Причем, если мы, скажем, делаем фигурные скобки 3X,
[05:10.040 --> 05:15.240]  значит, что мы скажем? У нас есть три колонки, и они все равны ширине, и эта ширина делится между
[05:15.240 --> 05:20.880]  ними. Вот ширина всей таблицы делится между ними поровну. Ну, поскольку мы не написали больше ничего,
[05:20.880 --> 05:26.280]  если у нас только 3X, и ничего не отнималось, то, собственно, у нас все и осталось. Но я думаю,
[05:26.280 --> 05:31.360]  это стоит хотя бы раз посмотреть, как это выглядит в коде. Да, на этот раз я не перепутаю,
[05:31.360 --> 05:41.000]  напишу begin tabular, а не begin tabbing. Тут еще всякие разные параметры, опциональные не очень. Я
[05:41.000 --> 05:46.200]  уж в этом не хочу копаться, потому что я сам пользуюсь, наверное, раз в год, и, наверное,
[05:46.200 --> 05:52.560]  ничего не помню. Ну вот, положим, у нас есть 3X, и есть три колонки, в которых есть какой-то текст.
[05:56.280 --> 06:04.160]  Ну, привычная нотация, мы разделяем содержимые колонки амперсендами. Строка завершать не
[06:04.160 --> 06:08.560]  нужно, поскольку у нас строка в таблице всего одна. Так уж сложилось. Посмотрим, что будет.
[06:08.560 --> 06:27.720]  Будет падение. Интересно. Хорошо. Яподеза такая, что чтобы X заработал, нам нужно хотя бы одну
[06:27.720 --> 06:33.400]  колонку с какой-то шириной указать. Попробуем так. Допустим, у нас есть какая-то колонка,
[06:33.400 --> 06:41.960]  шириной там 2 сантиметра, и уже потом 2X. Все еще не нравится. Что будешь делать?
[06:41.960 --> 06:49.600]  Окей, видимо, это что-то, что мне придется еще погуглить и рассказать попозже. Возможно,
[06:49.600 --> 06:55.240]  после какого-то перерыва. Нет, есть уверенность, что это работает, но, возможно, по модулю еще
[06:55.240 --> 06:59.720]  какого-то пакета, который я не подключил, или какой-то настройки, которые нужно указать. Но,
[06:59.720 --> 07:04.800]  чтобы сейчас время не тратить, уж, думаю, ладно, можем смириться, но в качестве компенсации покажу
[07:04.800 --> 07:10.880]  хотя бы как работают модификаторы Пешки. Вот, я утверждаю, у нас получится таблица
[07:10.880 --> 07:17.400]  шириной не во всю страницу, а только на 6 сантиметров, которые мы ей отвели. Да, уж,
[07:17.400 --> 07:24.560]  по крайней мере, это слава богу заработало. Вот с X нужно еще как-то поколдовать. Не могу
[07:24.560 --> 07:29.840]  искать сходу, в чем дело, не помню. Но, во всяком случае, Пешки работают, это уже хорошо. Уже
[07:29.840 --> 07:35.760]  чем-то мы научились бороться. Ну, эксперименты ради, если у нас будут все Пешки, а одна Ц, у которой
[07:35.760 --> 07:40.920]  не фиксирована ширина. Что можно ожидать? Ну, что он подберет просто такую ширину, которая ему кажется
[07:40.920 --> 07:47.480]  оптимальной. Например, чтобы влез весь текст, как здесь. Я в том, что не рекомендую сочетать два
[07:47.480 --> 07:53.320]  подхода одновременно, но это как будто бы два разных мира. Один мир делает все через параграфы,
[07:53.320 --> 07:58.120]  вот эти вот PBM, а другой — через выравнивание. И тот, который с параграфами, на самом деле,
[07:58.120 --> 08:02.440]  более гибкий, мы еще увидим почему. И, на самом деле, тот эффект, который сейчас достигается,
[08:02.440 --> 08:08.680]  буквочка C, его можно достичь в рамках параграфа тоже. Это потребует некой более хитрой нотации,
[08:08.680 --> 08:13.320]  но это будет более расширяемо и в целом рекомендуется, если у вас будут какие-то большие,
[08:13.320 --> 08:21.320]  сложные таблицы. Нотация такая. Можно каждый символ, отвечающий за колонку, еще обрамить вот
[08:21.320 --> 08:28.120]  в такие вот две команды. Знак больше и аргумент, и знак меньше и аргумент. Что это за команды? Они
[08:28.120 --> 08:35.280]  говорят, какой код, ну, тот код, который будет являться аргументом этих команд, какой код подставить
[08:35.280 --> 08:41.000]  перед текстом каждой ячейки в этой таблице, ну, в рамках данной колонки, которую мы описываем,
[08:41.000 --> 08:45.480]  естественно, после него. Ну, примерно, как это было с окружениями. Вот у нас был код,
[08:45.480 --> 08:50.640]  который пресидент текст и был код, который саксидент текст. То, что строго до и строго после
[08:50.640 --> 08:56.040]  вставляется и потом уже компилируется. Ну, например, такой use case нам хочется, чтобы одна из колонок
[08:56.040 --> 09:01.880]  была написана вся жирным шрифтом. И при этом не хочется руками указывать в каждой ячейке этот
[09:01.880 --> 09:07.160]  модификатор жирного шрифта. Мы можем указать его прямо в колонке. Естественно, поскольку это
[09:07.160 --> 09:11.520]  модификатор, нам хочется написать его перед текстом. Нам потребуется вот эта вот левая из команд,
[09:11.520 --> 09:17.480]  знак больше и какой это текст. Ну и этим каким-то текстом, который будет поставляться,
[09:17.480 --> 09:22.640]  будет команда bf-series, которая, как мы помним, открывает модификатор жирного шрифта до конца
[09:22.640 --> 09:31.880]  текущего блока. Мне кажется, можно вообще любой текст. Мы можем проверить, кстати. Во-первых,
[09:31.880 --> 09:39.080]  вот я перед модификатором третьей колонки открываю мою команду больше и в ней пишу bf-series.
[09:39.080 --> 09:45.720]  Ну и проверим, что какой-то текст еще можно написать. Допустим, текст капсом. Вот я утверждаю,
[09:45.720 --> 09:50.320]  ну вернее, предполагаю, что нарисуется четвертое слово текст перед теми тремя,
[09:50.320 --> 09:57.640]  которые уже есть. И все они к тому же будут жирными. И это верная гипотеза. Оно буквально
[09:57.640 --> 10:01.920]  подставляет все, что видит. Вначале ячейки, а потом уже комплиирует то, что получится. Да,
[10:01.920 --> 10:14.280]  могу. Давай. Да, это хороший план. Код тоже стоит зумить. Вот так, наверное, лучше. Ну ладно,
[10:14.280 --> 10:21.360]  я попробую сделать так, чтобы не очень большим. Вот. Что мы сделали? Мы написали вот такую штуку.
[10:21.360 --> 10:29.120]  Знак больше и в скобочках bf-series-txt. Он посмотрел, ага, bf-series-txt. Подставил его сюда,
[10:29.120 --> 10:38.520]  в третий столбец. И написал еще один текст, сделал все жирным. Ну и более того, чтобы уж проверить,
[10:38.520 --> 10:44.480]  чтобы проверить, что это работает на все ячейки данного столбца, просто протублируем эту строку,
[10:44.480 --> 10:51.200]  посмотрим, что они будут две одинаковых. Да. Эффект распространяется на весь столбец. Это
[10:51.200 --> 10:55.280]  бывает полезно. И в частности, так можно управлять. Ну, поскольку по умолчанию в параграфе
[10:55.280 --> 10:59.720]  выравнивания только по ширине, и мы как будто бы воруем у себя функционал того,
[10:59.720 --> 11:04.720]  что раньше было выравнивание там по левому-правому краю или по центру, вот можно это решать таким
[11:04.720 --> 11:10.480]  способом. Можно указывать там centering или flash left или flash right, или как там это называется.
[11:10.480 --> 11:15.120]  Можно посмотреть, как эти модификаторы выглядят. Вот, можно подставлять их сюда в качестве аргумента
[11:15.120 --> 11:29.600]  команды больше. А, BAM, да, сейчас вернусь. BAM, эти буквы отвечают за горизонтальное
[11:29.600 --> 11:36.920]  выравнивание текста. Ой, сейчас, набрал, за вертикальное. Ну смотри, допустим, у нас есть
[11:36.920 --> 11:46.200]  какая-то очень длинная по тексту колонка. Тогда нам уместно говорить о том, как будет
[11:46.200 --> 11:52.680]  относительно длинной колонке выровнен по вертикали текст, которого в колонках не очень много. Ну,
[11:52.680 --> 11:58.800]  есть три подхода. Можно выравнивать его по верхнему краю таблицы, можно посередине всей этой строки,
[11:58.800 --> 12:04.600]  а можно по нижнему краю. И вот это как раз отвечает выбор P, M или B. Ну вот, можем для
[12:04.600 --> 12:11.200]  примера одной колонке предсвоить значение M в честь middle, а другой B в честь bottom. Смотри,
[12:11.200 --> 12:19.480]  что будет. Проблема. Колонка, которая сентеринг, она на самом деле имеет неограниченную ширину,
[12:19.480 --> 12:25.080]  и она будет вот туда перейти вообще, пока у нее хоть какая-то на это совесть имеется. Ну,
[12:25.080 --> 12:31.960]  придется заменить ее тоже на P и тоже дать ей, скажем, три сантиметра ширины, фиксированное
[12:31.960 --> 12:45.360]  количество. Вот. Что мы видим? Они выровнялись по-разному. Для меня, на самом деле, загадка,
[12:45.360 --> 12:52.080]  почему то, что помещено буквой M, плохо разместилось по центру, назови это, конечно,
[12:52.080 --> 12:59.080]  нифига не центр, а что-то непонятное. Но, возможно, дело в том, что, например, модификаторы M и B плохо
[12:59.080 --> 13:03.400]  работают, будучи одновременно указанными. Мы можем попробовать сделать два модификатора B.
[13:03.400 --> 13:19.460]  Жесть. Посмотрим, что будет. Ну да, это поведение не похоже на то, что мы ожидали, это правда. Как
[13:19.460 --> 13:23.640]  будто бы это, наоборот, выравнивание поверху, хотя я был убежден, что это работает несколько
[13:23.640 --> 13:27.840]  иначе. Ну хорошо, а если это будут два модификатора P, то что произойдет?
[13:27.840 --> 13:44.320]  В общем, это заставляет задуматься. Нет, есть прям полная уверенность, что это должно работать
[13:44.320 --> 13:51.520]  так, но, возможно, дело в том, что весь текст, который на самом деле в правой строке, это же все,
[13:51.520 --> 13:57.360]  в общем-то, одна строка. Ну просто так сложилось, что она очень длинная и нужно много раз переносить.
[13:57.360 --> 14:05.160]  Возможно, если бы мы сделали это несколькими строками, то стало бы лучше. Сейчас пока не
[14:05.160 --> 14:09.400]  нужно запоминать то, что я пишу. Что я пытаюсь сделать? Я пытаюсь побить текст на строке поменьше
[14:09.400 --> 14:15.280]  с помощью команды, которую вы уже видели, New Line или Line Break. Сейчас нам это не очень важно,
[14:15.280 --> 14:30.120]  в чем между ними разница. Вот, мне кажется, тогда эффект должен проявиться. Ну и, например,
[14:30.120 --> 14:41.160]  буква B обещанная. Окей, чтобы эксперимент был еще чище, уберем лишнее пояснение здесь.
[14:41.160 --> 14:51.840]  В общем, какая мораль. Модификаторы M и B явно делают не то же самое, что модификатор P,
[14:51.840 --> 14:58.200]  но при этом они почему-то делают не то, что я ожидал. Этот вопрос нужно бы решить,
[14:58.200 --> 15:02.680]  но, видимо, вместе с вопросом, про то, почему не работает X, и более того, мне кажется,
[15:02.680 --> 15:07.400]  это связанные вопросы, которые чем-то одним решаются, какой-то одной лишней командой. Вот
[15:07.400 --> 15:13.720]  я их предлагаю на потом оставить. Сейчас не будем тратить время. Ну, повторюсь, сегодня в Афтежен
[15:13.720 --> 15:18.440]  такие вещи, за которыми даже я хожу, как правило, в Google и, в общем, пользуюсь довольно редко.
[15:18.440 --> 15:22.760]  Полезно понимать, что такое существует, что этим можно воспользоваться по необходимости,
[15:22.760 --> 15:27.440]  но в голове это, конечно, все не удержишь. Вот я не удержал, например, почему B и M работают
[15:27.600 --> 15:33.400]  не так, как я от них ожидал. Но, по крайней мере, мы посмотрели на эффекты от постановки кода до и
[15:33.400 --> 15:39.920]  после конца ячейки, и это уже, в общем-то, хороший результат. Кстати, можно еще разобраться. Ну и ладно.
[15:39.920 --> 15:46.040]  Да, окружение array. Я обещал вообще сказать, что это за окружение такое. Огромнее следующее. Это
[15:46.040 --> 15:51.600]  буквально аналог таблиц, но для математического режима. Но поскольку tabular работает с обычным
[15:51.600 --> 15:56.120]  текстом, вот хочется иметь какой-то аналог, но вот есть array. У него там очень много настроек
[15:56.120 --> 16:01.000]  разных, можно посмотреть, как это делается. Ну вот базовый вискейс он такой. У нас когда-то был
[16:01.000 --> 16:07.240]  вопрос, как нам нарисовать матрицу, у которой будут эти вот скобочки слева и справа ограничительные,
[16:07.240 --> 16:12.880]  будут двойные вертикальные черты, как, скажем, ущербники Бекли-Мишева. Ну вот, можно так сделать.
[16:12.880 --> 16:18.760]  Можно сделать array, ну буквально таблицы, это же есть матрица, одно и то же. Ну и задать в этом array
[16:18.760 --> 16:24.720]  явно, что вот левая граница будет две вертикальные черты и правая тоже. Ну и допустим, это была матрица
[16:24.720 --> 16:30.160]  какой-то системы уравнений, и поэтому нам захотелось отделить квадратик в левой ее части от самого
[16:30.160 --> 16:36.200]  крайнего правого столбца. Соответственно, для этого тоже array нам помог. Он так работает из коробки.
[16:36.200 --> 16:41.640]  Ну так же, как tabular, но при этом в математике. Вот. Это может быть полезно как раз-таки во всей
[16:41.640 --> 16:46.400]  этой алгебраической истории, когда вы рисуете всякие матрицы, и причем матрица какого-то
[16:46.400 --> 16:50.080]  хитрого блочного вида, в котором нужны вроде какие-то черты, какие-то вертикальные, горизонтальные,
[16:50.080 --> 16:58.240]  вот. Наверное, этим стоит пользоваться. Это полезно. Повторюсь, тут есть много настроек,
[16:58.240 --> 17:03.840]  ну в духе тех, что мы видели на прошлом слайде, там mb и прочее, тут какие-то другие. В общем,
[17:03.840 --> 17:08.240]  вот здесь можно еще много чего писать. Но я сейчас не скажу, что именно. Это все гуглится,
[17:08.240 --> 17:12.720]  и более того, этого может даже никогда в жизни не пригодиться. Поэтому предлагаю не заморачиваться.
[17:12.720 --> 17:21.840]  Вот сам array, сам по себе. Вот он, да, он полезен, он нужен, его я привел. Да, еще один долг был
[17:21.840 --> 17:27.200]  про кликабельные ссылки. У нас ни таковыми не были, хочется это исправить. Первая важная
[17:27.200 --> 17:32.280]  оговорка. В прошлый раз я говорил про команду href, которая делает гиперсылки. Ну, команда,
[17:32.280 --> 17:38.280]  которая принимает аргументами какой-то URL, который она хочет ссылаться, и текст, который будет
[17:38.280 --> 17:42.880]  являться ссылкой на этот URL, и по клику на который захочется переходить на этот URL. Вот,
[17:42.880 --> 17:48.600]  чтобы оно вообще работало, нужен специальный пакет hyperf. Ну, кто бы мог подумать, гиперсылки. И более
[17:48.600 --> 17:53.160]  того, этот же пакет, он, собственно, и открывает нам те функции, которые нам хотелось бы, чтобы
[17:53.160 --> 17:58.920]  ссылки внутри текста тоже были кликабельными. Ну вот, чтобы это произошло, нужно после подключения
[17:58.920 --> 18:05.320]  пакета еще вот такую команду запустить hypersetup. Ну, то есть, буквально настроить работу гиперсилы
[18:05.320 --> 18:10.680]  в ранг данного документа. Настройка такая, чисто косметическая. Во-первых, есть параметры
[18:10.680 --> 18:19.480]  unicode-true и colorlink-true. Ну, unicode-true, понятно, что значит. Хочется, чтобы тот текст, который
[18:19.480 --> 18:25.960]  является ссылками, он мог быть уникодным. Поскольку мы пишем на русском языке, в кодировке
[18:25.960 --> 18:31.560]  бывают проблемы как некоторыми англоязычными. Вот unicode-true, это точно наш выход. В конституции
[18:31.560 --> 18:40.680]  падают. Надеюсь, они больше не упадут. Да, потом параметры colorlinks. Тут две альтернативы. Либо
[18:40.680 --> 18:46.440]  можно делать ссылки обравленными в такие рамочки цветные, либо их можно выделять текстом самими
[18:46.440 --> 18:51.280]  себе эти ссылки. Вот, мне кажется, в литературе более принято второй вариант, ссылки, выделенные
[18:51.280 --> 18:56.920]  текстом. Я сам обычно им пользуюсь и поэтому обычно представляю значение true. А дальше миллион
[18:56.920 --> 19:01.960]  параметров, какого цвета нужно красить ссылки, какого вида. Я привел только 4 тех, которые вам
[19:01.960 --> 19:08.240]  теоретически могут пригодиться. Ну, типа ссылка на, ну, просто команды ref, ссылка на какие-то файлы,
[19:08.240 --> 19:14.120]  ссылка на какие-то библиографические вещи. Ну, при этом попозже поговорим. Ну, не в этот раз уже.
[19:14.120 --> 19:21.120]  Ну и вот, собственно, ссылка на URL-ы, куда-то во внешний интернет. И вот их всем можно делать
[19:21.120 --> 19:26.360]  разными цветами. Цвета, есть некоторые встроенные в техе, их там можно погуглить, там штук 10,
[19:26.360 --> 19:32.680]  всякие там red, yellow, green, blue. Вот эти вот обычные английские слова. Но есть, на самом деле, много
[19:32.680 --> 19:38.920]  способов настройки. Во-первых, можно задавать, скажем, набор из двух цветов и числовой параметр
[19:38.920 --> 19:44.000]  между ними в восклицательных знаках. Он отражает, в каком соотношении нужно одно к другому взять.
[19:44.000 --> 19:52.800]  Скажем, вот здесь это означает, что я беру 70 процентов черного и 30 процентов синего. Ну,
[19:52.800 --> 19:58.560]  в церемониях RGB просто берутся те числа, которые кодируют черный, ну, то есть 255 по всем, по всем
[19:58.560 --> 20:04.600]  каналам. Берется то, что кодирует синий, то есть 255 по синим, и остальные все по нулям. Ну и вот
[20:04.600 --> 20:10.120]  считается их среднее взвешенное с такими вот коэффициентами 0.7 и 0.3. И получается какой-то
[20:10.120 --> 20:14.680]  цвет типа темно-синий. Он выглядит довольно симпатично. Ну и, опять же, можно все подбирать,
[20:14.680 --> 20:20.120]  чтобы это было хорошо именно для вас. Можно вообще руками указывать RGB-шный код, цвета,
[20:20.120 --> 20:26.440]  который вам нравится. Но там уже не в int, а в числах от нуля до одного, ну, степени яркости
[20:26.440 --> 20:31.600]  каждого канала. Чтобы это работало, потребуется пакет xcolor, ну, просто, как всегда, use package
[20:31.600 --> 20:36.560]  xcolor и дальше в пишете все, что вам нравится. Команда define color, которой нужно подать на вход
[20:36.560 --> 20:42.440]  название вашего цвета, которым дальше будет пользоваться. А дальше один из способов задать
[20:42.440 --> 20:46.880]  цвет. Ну вот я привожу способ задать цвет непосредственно через RGB, ну, потому что это довольно
[20:46.880 --> 20:52.240]  удобно и довольно человекочитаемо. И вот с этого момента у вас есть ваше забронированное слово,
[20:52.240 --> 20:57.520]  там darkblue, которое можно подставлять в такие же окружения, и оно будет работать.
[20:57.520 --> 21:10.840]  Не, он буквально пишется hyperf, как я написал. Слушай, может быть, если у тебя, скажем,
[21:10.840 --> 21:22.880]  setup mektech, то, может быть, ну, VSCode с mektech. Ну, смотри, просто, ну, я выгружал довольно много
[21:22.880 --> 21:26.760]  гайдов, штук пять, а там они по-разному работают, ну, типа, кому что понравится. Ну, в общем,
[21:26.760 --> 21:31.080]  я подозреваю, что просто у тебя он в рамках базового пакета теха, который скачивается по
[21:31.080 --> 21:35.800]  умолчанию, вот его там не было, и нужно будет отдельно докачать. И это делается как? Проходишь
[21:35.800 --> 21:41.640]  в консоль mektech, в раздел packages, ищешь там, нужно, и скачиваешь. Ну, сейчас нам дальше это не очень
[21:41.640 --> 21:46.280]  пригодится в рамках сегодняшнего занятия, поэтому успеешь починить, ничего страшного. Но пакет
[21:46.280 --> 21:51.920]  точно такой, я проверял. Вот буквально соседняя вкладочка, вот у меня тут есть, вот hyperf,
[21:51.920 --> 21:59.480]  она вот так вот работает. Вот, про это поговорили, это уточнили. Да, еще был маленький должок,
[21:59.480 --> 22:04.620]  как сделать велическое значение счетчиков. Ну, вот вдруг нам захочется, чтобы наши секции были не
[22:04.620 --> 22:13.040]  раз-два-три, а там abvgd. Это можно сделать. Для этого, ну, вот как мы видели, есть команды там,
[22:13.040 --> 22:21.360]  роуман, какие еще были, аребик, лейтен, или нет, было не лейтен, а альф. В общем, всякие команды,
[22:21.360 --> 22:27.400]  которые принимают на вход название счетчика, выдают некую интерпретацию этого счетчика с
[22:27.400 --> 22:31.720]  точки зрения того, какая была команда. Будет что там римская цифра, или там арабская цифра,
[22:31.720 --> 22:38.600]  или вообще латинская буква, которая под нужным номером. Вот с таким пакетом, с русским байбелем,
[22:38.600 --> 22:45.280]  ну, то есть байбел, который еще и с параметром russian, приезжает команда asbook, ну, вот видимо,
[22:45.280 --> 22:50.920]  как альф в счастье алфавита, вот asbook в счастье асбуки. И команда asbook, она по названию счетчика
[22:50.920 --> 22:55.840]  выдаёт его кириллическое значение. Ну, то есть ту букву кириллического алфавита, ну, то есть нашего
[22:55.840 --> 23:02.680]  русского, под каким номером, вернее, под тем номером, какое значение этого счетчика. Ну,
[23:02.680 --> 23:06.960]  вот такой маленький пример кода, как это будет выглядеть. Мы создаем счетчик, который называется
[23:06.960 --> 23:15.240]  кир в счастье кириллице, представим ему значение 5, и говорим, вот выдай мне asbook от счетчика кир.
[23:15.240 --> 23:21.000]  Ну, то есть он выдаст нам пятую букву алфавита, и это букву D. Что характерно, есть команды с буквы
[23:21.000 --> 23:25.760]  заглавной и с буквы строчной, ну, разница как раз в том, что выходные буквы будут либо заглавными,
[23:25.760 --> 23:31.480]  либо строчными. Мы такой же видели эффект, скажем, с романом, альфом, всякими такими вещами.
[23:31.480 --> 23:37.840]  Ну, просто как-то разговор зашел, вот я решил, что почему бы не упомянуть. Ну,
[23:37.840 --> 23:42.920]  смотри, иногда в некоторых текстах тебе может захотеться сделать
[23:42.920 --> 23:47.320]  нумерованный список, в котором нумерация будет буквами алфавита. Это же типично,
[23:47.320 --> 23:54.800]  так бывает, вполне себе. И тогда ты делаешь, соответственно, begin enumerate, и вот как я показывал
[23:54.800 --> 24:00.280]  в прошлый раз специальным аргументом, какую команду модификатор применить ко всем значениям
[24:00.280 --> 24:05.080]  счетчика, и там в качестве команды модификатора будет выступать команда asbook. И вот с тех пор
[24:05.080 --> 24:13.600]  тебя enumerate, ну, текущий enumerate, будет нумеровать не числами, а русскими буквами. Ну, это же,
[24:13.600 --> 24:18.000]  скажем, противоестественно, когда у тебя в тексте на русском языке есть нумерованный список,
[24:18.000 --> 24:22.040]  который нумеруют латинскими буквами. Как-то это неудобно. Но вот если хочешь с этим побороться,
[24:22.040 --> 24:30.680]  то вот это делается примерно вот так. Ага, был еще такой вопрос. Вот я загнулся про окружение split,
[24:30.680 --> 24:35.960]  и что-то у меня вообще не заработало, мы не поняли со всеми остальными. Решение такое. Сплит,
[24:35.960 --> 24:40.000]  на самом деле, это окружение, которое работает внутри другой математики. Ну, то есть как окружение
[24:40.000 --> 24:45.120]  aligned, как окружение cases, которое само по себе математику не открывает, не закрывает, ожидает
[24:45.120 --> 24:51.160]  ее извне. Ну и такое применение есть. Вот мы открыли честное окружение математическое equation,
[24:51.160 --> 24:57.640]  где математика началась, и внутри нее можно делать окружение split. Сплит очень похож на aligned,
[24:57.640 --> 25:04.560]  он, на самом деле, я тут даже, я пытался почитать, в чем существенная разница между split и aligned,
[25:04.560 --> 25:10.720]  и существенной разницы я не нашел в рамках тех cases, которые нам потребуются, ну, вам для вашей
[25:10.720 --> 25:15.240]  дальнейшей работы в ближайшие годы, я думаю, вы раньше не заметите. Но, во всяком случае,
[25:15.240 --> 25:20.040]  вот есть окружение split, что оно делает? Оно берет все строки, которые ей поданы,
[25:20.040 --> 25:24.720]  и подаются они также через двойной backslash, ну, как вот в окружении всяком табличном,
[25:24.720 --> 25:28.600]  и так же, как в aligned, тут есть параметр ampersand, который позволяет их выравнивать,
[25:28.600 --> 25:33.760]  ну, выравнивать по одной вертикальной прямой. Все символы, помеченные этим ampersand,
[25:33.760 --> 25:39.080]  работают так же, как aligned. Вот он берет все эти строки и говорит, что теперь это один объект,
[25:39.080 --> 25:43.720]  который нужно нумеровать как один объект. В частности, если этот объект оказался в окружении
[25:43.720 --> 25:48.120]  equation, который нумируется, то пронумируется оно посередине, ну, потому что это один объект,
[25:48.120 --> 25:52.920]  и вот его оно хорошо выровняло. Вот был такой вопрос, я точно помню, и вот мы начались его решать.
[25:52.920 --> 25:58.200]  Это, наверное, может быть полезно, но я, честно говоря, просто сам особо не пользуюсь нумерованными
[25:58.200 --> 26:10.680]  формулами, как-то мне это не очень нравится. Чисто дело вкуса. Да, то, что мы… филандом. Вот,
[26:10.680 --> 26:16.680]  возможно, даже и нет. Вот это настолько похожее окружение. Возможно, что-то из этого было устаревшее,
[26:16.680 --> 26:22.720]  приехало еще из старого теха, ну, еще не из латеха, не знаю, не могу утверждать. Ну, в общем,
[26:22.720 --> 26:28.080]  все кейсы, которые у нас, скорее всего, с aligned сорвутся более-менее так же. Ну, вот главная
[26:28.080 --> 26:32.040]  мораль какая? У нас есть какое-то внешнее окружение из математики, которое нумируется,
[26:32.040 --> 26:37.200]  например, equation. И если мы хотим, чтобы объекты внутри нумеровали как-то хорошо, скажем, у нас
[26:37.200 --> 26:41.680]  есть много строк, мы хотим нумеровать все вместе, как единый блок, то мы заворачиваем их в какое-то
[26:41.680 --> 26:47.160]  еще окружение, скажем, split или aligned. Хотя, кстати, я, кажется, читал, что split не поддерживает
[26:47.160 --> 26:51.880]  никакой текст в математике до и после себя, как будто бы это штука, которая должна быть в вакууме
[26:51.880 --> 26:59.720]  сама по себе. Ну, давай проверим. Прям скопирую этот код и попробую, скажем, написать, ну,
[26:59.720 --> 27:03.920]  вот не просто его, а сказать, что же система уравнений. И раз система, то вот хочется,
[27:03.920 --> 27:13.320]  чтобы тут была слева фигурная скобка. Ну, а справа, допустим, точка. Ну, уже видели,
[27:13.320 --> 27:19.360]  кажется, в прошлый раз такие эффекты, что так бывает. Ну, смотри, он отработал, но пожаловался.
[27:19.360 --> 27:24.960]  Вот, пожалуйста, split не использую, использовал вместо этого aligned. Ну, как бы так мягко пожаловался,
[27:24.960 --> 27:29.880]  и поэтому все равно сделал то, что мы ожидали. В общем, да, странная вещь. Для меня загадка,
[27:29.880 --> 27:34.000]  почему эти окружения существуют одновременно. Возможно, они приехали от разных поставщиков.
[27:34.000 --> 27:38.680]  Например, aligned приехал от amsmath, и это скорее всего правда, потому что все окружения,
[27:38.680 --> 27:42.640]  которые про вравнивание, они оттуда. А split откуда-то еще. Ну, бок его знает.
[27:42.640 --> 27:54.440]  Не, ну, это чисто в кассовщину. То есть, не знаю почему. Мне больше нравится нумеровать
[27:54.440 --> 28:01.480]  теоремы целиком. Вот, вот эти вот лейблы делать, вот, к окружениям, которые теоремы, и ссылаться
[28:01.480 --> 28:15.040]  уже на них. Не запишу, но, ну, в общем, тут вопрос. Можно по разным подходам придумать. Я бы сделал
[28:15.040 --> 28:20.120]  как. Я бы все промежуточные важные результаты выделил в отдельные леммы. И вот на лемму уже
[28:20.120 --> 28:25.640]  ссылался. Но это все вообще дело вкуса, ни на что не влияет. Как хотите, так и делайте. Мы научились,
[28:25.640 --> 28:34.600]  что вот так оно работает. Окей. И последнее, конечно, что было обещано, это вот есть окружение
[28:34.600 --> 28:39.840]  фигур и тейбл. Вот мы как-то говорили, что есть способы вставлять в тех всякие там картинки,
[28:39.840 --> 28:46.240]  там таблицы, и что сами по себе эти объекты, они довольно, ну, плохо устроены в том плане,
[28:46.240 --> 28:50.520]  что их в тех не умеют грамотно размещать в тексте. Он его размещает прямо посреди строки,
[28:50.520 --> 28:55.520]  и если при этом это была огромная картинка, то он строку, получается, расширит, а следующее
[28:55.520 --> 29:00.320]  начнет только вот далеко после. Это будет не симпатично. И поэтому приходится такие объекты
[29:00.320 --> 29:04.320]  заворачивать какие-то еще окружения, вроде окружения Center или там окружения Flash Left,
[29:04.320 --> 29:10.440]  Flash Right. Вот более общий подход к этому — это окружение фигуры тейбл. Это специальное окружение,
[29:10.440 --> 29:13.840]  которое для того и нужны, чтобы в себе инкапсулировать всякие картинки и таблицы,
[29:13.840 --> 29:20.200]  т.е. фигур для картинок, тейбл для таблиц. Синдексис буквально такой. Есть окружение фигур,
[29:20.200 --> 29:24.800]  какой-то параметр, сейчас поговорим, что это значит. А дальше все, как мы привыкли. Include
[29:24.800 --> 29:33.600]  Graphics, который вставляет какую-то картинку в данное место. Ну и вот мы еще прибили к этому label.
[29:33.600 --> 29:38.920]  Ну, мы в прошлый раз видели, что label — это буквально штучка, позволяющая потом ссылаться на этот
[29:38.920 --> 29:43.960]  с помощью ссылок, пометить какое-то место в коде. А caption — это такая команда специфичная для
[29:43.960 --> 29:50.720]  фигуры тейбл. Она специальным образом готовит подпись для данной картинки. Сейчас мы на примере
[29:50.720 --> 29:55.360]  в коде увидим, что это значит. В общем, это все собирается в новый объект, который называется
[29:55.360 --> 30:01.160]  фигурой. И вот фигура — это уже хороший объект, его теха умеет грамотно размещать в тексте. И то,
[30:01.160 --> 30:05.080]  как он это размещает, определяется вот этим вот параметром, который вообще-то необязательный
[30:05.080 --> 30:09.520]  аргумент. Но, честно говоря, даже не уверен, что без него это сработает. Вот такой синдоксис,
[30:09.520 --> 30:15.520]  квадратные скобки. Эти аргументы принимают разные значения. Вот такие. Я списочек привел.
[30:15.520 --> 30:22.600]  Просто страшная аж. Она говорит, ну вот примерно как у нас была история с linebreak и pagebreak. Она
[30:22.600 --> 30:27.800]  дает лотеху рекомендации. Размести примерно здесь. Но если тебе по форматированию не очень будет
[30:27.800 --> 30:32.720]  нравиться, то ты можешь подвигать, чтобы у тебя было хорошо. В общем, такая либеральная команда.
[30:32.720 --> 30:43.400]  Есть варианты T и B. Топ и bottom. Оно говорит следующее. Размести данный объект, будь то картинка
[30:43.400 --> 30:48.840]  или таблица, строго вверху текущей страницы или внизу текущей страницы. Но если вы читали
[30:48.840 --> 30:54.720]  какие-то статьи, вы видели, что там часто так делают, постоянно используются. Еще есть странный
[30:54.720 --> 30:59.960]  вариант буквы P. Видимо, есть слово page. Оно говорит, сделай отдельную страницу для всех таких
[30:59.960 --> 31:04.280]  объектов. Ну, допустим, у вас их много. Много таблиц. Какая-то стадия по машинному обучению.
[31:04.280 --> 31:09.400]  Какие-то метрики считаете. И вот все таблицы будут на одной отдельной странице. И поскольку мы эти
[31:09.400 --> 31:17.520]  таблицы научились и подписывать, и нумеровать, то в принципе нам не страшно, что они находятся,
[31:17.520 --> 31:21.800]  скажем, далеко от того места, где, собственно, про них говорится. Потому что если мы на них
[31:21.800 --> 31:26.000]  ссылаться, то мы на них сошлемся, и проблемы не будет. У нас, слава богу, электронный документ,
[31:26.000 --> 31:33.120]  который может ходить туда-сюда. У нас на отдельной странице будет таблица, которая в одном окружении,
[31:33.120 --> 31:40.680]  или может разной. То есть если мы делаем разное окружение и в них выделим P, то они все будут на
[31:40.680 --> 31:45.640]  одной странице или на трех страницах. Это хороший вопрос. Я часто скажу, я ни разу не пользовался
[31:45.640 --> 31:48.880]  вариантом с P. Можем просто протестить, сработает ли.
[31:48.880 --> 31:54.880]  Может быть реально удобно, потому что, допустим, я делаю праг, и таблицы чаще всего удобны,
[31:54.880 --> 31:59.800]  они были отдельно где-то реально. Ну, это хорошая мысль. Ну, давай попробуем, действительно.
[31:59.800 --> 32:03.600]  Ну, так, только не фигура тейбл, потому что картинки у меня заготовлены при себе нет.
[32:03.600 --> 32:22.760]  Это правда. Это можно перегрузить, сделав аж восклицательный знак искать. Вот прямо здесь
[32:22.760 --> 32:26.480]  поставь знак восклицания, как будто ты очень, не знаю, яростно говоришь «Теху, пожалуйста,
[32:26.480 --> 32:32.480]  именно сюда». Но есть более, как это, более хорошо работающий из коробки вариант. Это
[32:32.480 --> 32:37.840]  заглавная аж. Ну, вместо страшной аж просто. Она говорит «Вот прям тут размести, пожалуйста,
[32:37.840 --> 32:45.360]  вот прям в текущем месте». Вот. Но да, мы говорили про вариант с пейдж, и во-первых,
[32:45.360 --> 32:48.400]  нам нужно сначала сделать, собственно, этот пейдж, а во-вторых, делать хоть какую-то таблицу,
[32:48.400 --> 32:55.640]  чтобы она была про что говорить. То есть набегим tabular, end tabular, ну, и какое-то там неважно,
[32:55.640 --> 33:04.080]  A и B. Ну, и теперь хочется, видимо, размножить эту таблицу, сделать их несколько, да, и посмотреть,
[33:04.080 --> 33:14.280]  что будет при вот таком вот варианте. Ну, только у нас теперь это будут разные фигуры. Ну,
[33:14.280 --> 33:23.320]  и можно еще подписи делать разными, чтобы мы, точнее, их отличили друг от друга. Смотри,
[33:23.320 --> 33:30.600]  он собрал их все на одну страницу. Это, конечно, маленькие таблички, поэтому тут не очень наглядно,
[33:30.600 --> 33:36.120]  но да, он сделал специальную страницу, которая хранит именно такие вот объекты, как table и
[33:36.120 --> 33:41.720]  figure. И там они по порядку идут. Там первая, вторая, третья. Причем он даже знает русское слово
[33:41.720 --> 33:48.640]  «таблица», написал его руками. Видимо, оно приезжает с пакетом Babel Russian. Вот. Ну, а дальше наши
[33:48.720 --> 33:52.960]  подписи кавтомные, которые уже мы руками подписывали. Ну, а нумерация, разумеется,
[33:52.960 --> 33:58.680]  такая какая, ну, у всех таблиц общая нумерация. Мы про это говорили в прошлый раз. Вот. Есть счетчик
[33:58.680 --> 34:03.640]  table, который за это отвечает. И, наверное, можно им даже манипулировать. Если, скажем, здесь сделаю
[34:03.640 --> 34:18.160]  set counter table, ну, не знаю, 10, то, наверное, следующая таблица будет 11 по счету. Да,
[34:18.160 --> 34:22.760]  действительно, она будет 11. В общем, остальные правила, которые касаются счетчиков, прочего,
[34:22.760 --> 34:29.240]  они как какие были, таки и остались. Ну, просто новый объект, теперь это таблица. Ну, и да, еще
[34:29.240 --> 34:33.080]  одно преимущество такого подхода, заворачивать всякие таблицы и картинки в таблицы и фигуры,
[34:33.080 --> 34:39.640]  следующее. Мы видели специальные команды list of figures, list of tables. Ну, как table of contents,
[34:39.640 --> 34:44.240]  есть команда, которая генерирует содержание и перерисовывает там все секции, и на какой странице
[34:44.240 --> 34:48.440]  их можно найти. Есть такие же команды, которые генерят список всех табличек, которые есть в
[34:48.440 --> 34:53.280]  статье или там всех картинок, и, опять же, со страницами, на которых можно найти. Это очень
[34:53.280 --> 34:59.800]  удобно, этим можно пользоваться. Собственно, в этом была мотивация по них вообще рассказать,
[34:59.800 --> 35:06.880]  вот, ради этих команд. Ну, и да, еще вариант, если мы хотим сделать какую-то не очень большую
[35:06.880 --> 35:11.360]  табличку или не очень большую картинку, которая, скажем, занимает место только там в углу страницы,
[35:11.360 --> 35:15.880]  а дальше обтекается текстом. Вот как такое настроить? Для этого table уже не годится,
[35:15.880 --> 35:21.520]  потому что он умеет размещать только его дипа на всю ширину страницы, а нам хочется иначе. Для
[35:21.520 --> 35:27.600]  этого есть специальное окружение wrapFigure и wrapTable, ну, то есть, заворачиваемые объекты,
[35:27.600 --> 35:33.120]  так сказать, фигуры и таблицы. У них два обязательных аргумента. Вот у figure был один
[35:33.120 --> 35:37.720]  аргумент, причем он почему-то необязательный, почему-то в квадратных скобках, хотя, на самом
[35:37.720 --> 35:43.560]  деле, он, без него, наверное, даже не сработает. Но вот у wrapTable аргументов два вместо этого,
[35:43.560 --> 35:50.080]  и не оба в скобках фигурных. Собственно, какой ширины должна быть данная штучка? Ну, поскольку
[35:50.080 --> 35:53.160]  теперь мы хотим, чтобы она была посреди текста, она должна обтекаться, значит, у них какая-то
[35:53.160 --> 35:57.940]  конкретная ширина, которую мы хотим указать, там, два сантиметра. А также параметр, собственно,
[35:57.940 --> 36:04.920]  по какой стороне мы его выравниваем, по левой или по правой? Вот. Ну и что получится на выходе?
[36:05.040 --> 36:11.400]  Объект, который прям в данном месте попадает на страницу, выравнивается по этому левому или
[36:11.400 --> 36:16.920]  правому краю и грамотно обтекается текстом по всем правилам, какие все есть. Обычно выглядит
[36:16.920 --> 36:22.200]  симпатично. Да, но чтобы это работало, нужно подключить еще пакет wrapFig. Ну, как всегда, usePackage
[36:22.200 --> 36:31.680]  и далее название. Нумерация у тех таблиц, которые получены из table и тех таблиц, которые
[36:31.680 --> 36:39.000]  получены из wrapTable, она общая. Это все один объект. Да, всякие долги я почистил, теперь хочется
[36:39.000 --> 36:45.120]  поговорить про чуть-чуть более продвинутые вещи на тему того, что мы уже обсуждали. Вот мы говорили
[36:45.120 --> 36:50.600]  про счетчики, говорили про теоремы, и вот я немножко заикался, как устроена номерация теорем,
[36:50.600 --> 37:00.480]  и как ее можно управлять. Вот тут я разные способы основу привожу. А первых, да, как мы, я не
[37:00.480 --> 37:05.640]  верен. Наверное, такое я уже показывал. Мы можем при объявлении теоремы после двух аргументов,
[37:05.640 --> 37:11.400]  которые обязательные, а именно, собственно, название категории теорем, как мы будем дальше к нему в
[37:11.400 --> 37:15.720]  тексте отсылаться, и его русскоязычное название, которое будет писаться при генерации документа,
[37:15.720 --> 37:23.360]  есть необязательный аргумент. Вот теперь мы уже можем это по-честному сказать. Это имя счетчика,
[37:23.360 --> 37:32.640]  в честь которого нумируется данный объект. Ну, то есть, если счетчик section инкремитируется на 1,
[37:32.640 --> 37:39.120]  он сбрасывает счетчик вот этот вот теоремы обратно до единицы, до своего первого значения.
[37:39.120 --> 37:46.720]  То есть, теорема в втором секции будет 2.1? Да, все так. Правильно. 2.1 звучит, если это не был
[37:46.720 --> 37:53.080]  слышно на микрофон. Значит, в первой секции будут теоремы вида 1.1, 1.2 и так далее. Как только секция
[37:53.080 --> 37:58.120]  обновилась и стала равной значением 2, то есть, ее счетчик инкремитировался, теорема, счетчик
[37:58.120 --> 38:03.520]  с теоремы сбросился, и теперь они нумируются снова с единицы 2.1, 2.2 и так далее. И также можно
[38:03.520 --> 38:09.280]  сделать нумерацию, скажем, следствий в честь теорем. То есть, с каждой новой теоремой счетчик
[38:09.280 --> 38:17.040]  следствия будет обнуляться. И при этом после теоремы 1.2 будут следствия 1.2.1, 1.2.2 и так далее.
[38:17.040 --> 38:19.560]  Ну, естественно, после каждой теоремы префикс будет свой.
[38:19.560 --> 38:23.720]  То есть, оно понимает, когда теорема – это кодовое слово, когда это счетчик?
[38:23.720 --> 38:28.720]  Да. Ну, потому что у нее просто разные контексты. На название счетчика поступают в качестве
[38:28.720 --> 38:34.120]  аргумента только в такого вида параметры или в команда вида там setCounter, newCounter,
[38:34.120 --> 38:38.920]  всякие такие. А когда мы делаем begin-end, то есть, окружение какое-то, открываем-закрываем,
[38:38.920 --> 38:42.720]  то, понятно, я делаю это не иначе как окружение, не счетчик.
[38:42.720 --> 38:45.480]  То есть, идти по перегрузке? Ну, наверное, можно так сказать.
[38:45.880 --> 38:51.360]  Я уж на самом деле сам не вполне шарю как-то прям со стенки, как устроено, но, наверное,
[38:51.360 --> 38:56.520]  наверное, как-то так. То есть, понятно, что это какой-то синтезактический анализ.
[38:56.520 --> 38:59.480]  Он просто, скорее всего, смотрит на то, какое было предыдущее слово,
[38:59.480 --> 39:03.640]  ну, вернее, смотрит, как бы, на структуру дерева разбора, если уж там более хитро говорить.
[39:03.640 --> 39:07.320]  Но вот, я думаю, это слово, оно является определяющим. В данном случае он видит,
[39:07.320 --> 39:11.880]  что мы делаем newserum, и, знаешь, он не ожидает того, что мы напишем какое-то,
[39:11.880 --> 39:15.520]  ну, в этом аргументе напишем что-то, что будет не счетчиком.
[39:15.520 --> 39:24.080]  Ну и вот такой вот пример. Предлагаю вчитаться, что происходит. Есть секция первая, потому что
[39:24.080 --> 39:29.160]  их просто не было до этого в тексте. И дальше мы пишем две теоремы, пишем какое-то доказательство,
[39:29.160 --> 39:34.400]  пишем какое-то следствие и определение. Вот какая будет нумерация? Предлагаю фиксировать.
[39:34.400 --> 39:40.000]  Думаем, у нас есть первая секция, есть иоремы, которые нумируются за секциями. Значит, у нас
[39:40.000 --> 39:45.680]  будет теорема 1.1, 1.2. Правильно? Да. Далее есть окружение доказательства, которое вообще не
[39:45.680 --> 39:49.020]  нумируется, оно просто доказательство без номера, без всего. Ну и тут тоже не
[39:49.020 --> 39:53.900]  будет номера. Далее есть короллари, следствие, которое нумируется в честь теоремы. Поскольку
[39:53.900 --> 39:59.160]  прямо перед ней значение счётика теоремы равно 2, а теорема нумируется в честь секции,
[39:59.160 --> 40:05.540]  значение счетчика секции равно 1, то значит это будет следствие 1.2.1. То есть он подтянул значение
[40:05.540 --> 40:08.580]  черчика в секции и теорема, и их в качестве перегрессов
[40:08.580 --> 40:09.580]  вказал.
[40:09.580 --> 40:14.540]  Ну и да, дальше у нас теорема определения, но поскольку
[40:14.540 --> 40:16.940]  это окружение с звездочкой, оно вообще не нумерованное,
[40:16.940 --> 40:19.100]  то есть тут вообще не будет номера, думать про него
[40:19.100 --> 40:20.100]  не нужно.
[40:20.100 --> 40:25.580]  Ну и да, оно выглядит ровно так, как я сказал.
[40:25.580 --> 40:27.700]  Две теоремы под разными номерами, и следствие
[40:27.700 --> 40:30.380]  у которого префикс номера — это номер и теорема,
[40:30.380 --> 40:31.380]  который предшествует.
[40:31.380 --> 40:34.700]  Вот.
[40:34.700 --> 40:36.700]  Немножко другой синтаксис.
[40:36.700 --> 40:40.780]  То был официальный аргумент после обязательных, вот
[40:40.780 --> 40:41.780]  вот здесь.
[40:41.780 --> 40:47.140]  Если мы укажем этот официальный аргумент между обязательными,
[40:47.140 --> 40:50.620]  вот такой синтаксис, это будет значит следующее.
[40:50.620 --> 40:56.660]  Это значит, что мы теперь счетчиком для теорем категории
[40:56.660 --> 41:00.820]  proposition будет не свой счетчик proposition, а тот счетчик,
[41:00.820 --> 41:01.820]  который мы укажем здесь.
[41:01.820 --> 41:05.820]  То есть мы зададим свой счетчик какой-то, ну new counter,
[41:05.820 --> 41:07.940]  это значит мы инициализируем счетчик, который называется
[41:07.940 --> 41:12.180]  my count, и говорим, что именно этот счетчик будут использовать
[41:12.180 --> 41:15.260]  как теоремы категории proposition, так и теоремы категории
[41:15.260 --> 41:16.260]  lemma.
[41:16.260 --> 41:17.540]  То есть у них будет общая номерация.
[41:17.540 --> 41:22.420]  Значит, смотрим на примере.
[41:22.420 --> 41:27.620]  Есть некая солянка из propositions и lemma, и они все используют
[41:27.620 --> 41:30.380]  один счетчик my count, который на момент инициализации
[41:30.380 --> 41:31.380]  равен, конечно, нулю.
[41:31.380 --> 41:32.380]  Мы это обсуждали.
[41:32.380 --> 41:36.820]  Значит, первое утверждение proposition, как всегда, инкриментирует
[41:36.820 --> 41:38.700]  счетчик на 1, которому оно пользуется счетчиком
[41:38.700 --> 41:39.700]  my count.
[41:39.700 --> 41:42.540]  И значит, наверное, это будет утверждение 1.
[41:42.540 --> 41:46.300]  Дальше идет lemma, поскольку у них счетчик тот же, она
[41:46.300 --> 41:48.780]  снова инкриментирует, значит, получится lemma 2.
[41:48.780 --> 41:51.340]  Далее снова proposition, будет утверждение 3.
[41:51.340 --> 41:55.340]  А дальше мы говорим step counter my count, то есть мы насильно
[41:55.340 --> 41:57.820]  инкриментируем счетчик еще на 1.
[41:57.820 --> 41:59.980]  Когда следующая lemma, она будет под каким номером?
[41:59.980 --> 42:07.700]  Ну было раз, два, три, а потом мы его еще инкриментировали
[42:07.700 --> 42:08.700]  насильно.
[42:08.700 --> 42:09.700]  Ну значит, пятый.
[42:09.700 --> 42:10.700]  Действительно так.
[42:10.700 --> 42:11.700]  Проверим, что действительно так.
[42:11.700 --> 42:12.700]  Да, ура.
[42:12.700 --> 42:17.900]  Вот тот самый счетчик качует из утверждения в утверждение
[42:17.900 --> 42:19.740]  и увеличивается так, как мы ему сказали.
[42:19.740 --> 42:24.980]  Ну вот, это похоже на какой-то странный случай, и непонятно,
[42:24.980 --> 42:25.980]  где его использовать.
[42:26.220 --> 42:29.620]  Тот вискист, который у меня в голове, что вот иногда
[42:29.620 --> 42:32.060]  утверждение lemma это что-то очень родственное, их можно
[42:32.060 --> 42:33.060]  нумеровать подряд.
[42:33.060 --> 42:34.660]  В целом, да.
[42:34.660 --> 42:37.180]  Поэтому в принципе в такой ситуации, наверное, можно
[42:37.180 --> 42:38.180]  использовать.
[42:38.180 --> 42:39.820]  Если вдруг пишете какой-то конспект и лектор, которого
[42:39.820 --> 42:44.020]  вы слушаете смешивает утверждение lemma, то вот это ваш выход.
[42:44.020 --> 42:45.020]  Вот.
[42:45.020 --> 42:48.860]  Ну и да, тут есть тоже комментарий, который я уже говорил,
[42:48.860 --> 42:50.780]  что счетчиками, которые отвечают за те олемы, можно
[42:50.780 --> 42:52.940]  манипулировать так же, как обычными счетчиками, там
[42:52.940 --> 42:55.500]  делают step counters, делают step counters.
[42:55.500 --> 42:57.140]  Если вам это вдруг почему-то необходимо.
[42:57.140 --> 43:00.860]  Да, теперь чуть-чуть про кастомные символы.
[43:00.860 --> 43:04.500]  У нас про это был разговор в прошлый раз, как делать
[43:04.500 --> 43:06.500]  символ делимости, всякие такие вещи.
[43:06.500 --> 43:08.740]  Ну вот есть такой инструментарий, в тех, которые называются
[43:08.740 --> 43:09.740]  бокс.
[43:09.740 --> 43:11.140]  Есть куча разных боксов.
[43:11.140 --> 43:13.940]  Бокс — это буквально контейнер, ну, так переводится.
[43:13.940 --> 43:16.700]  И есть разные боксы, которые умеют применять разные
[43:16.700 --> 43:18.860]  модификаторы к тексту, которые внутри.
[43:18.860 --> 43:22.740]  У них еще какие-то есть свои там свойства версточного
[43:22.740 --> 43:25.180]  характера, которых я сейчас не хочу говорить, которых
[43:25.180 --> 43:26.180]  я сам не очень знаю.
[43:26.180 --> 43:31.340]  Но вот нам как юзерам интересно, что умеют эти боксы делать
[43:31.340 --> 43:32.340]  с текстом.
[43:32.340 --> 43:34.780]  Есть просто пара бокс, который просто заворачивает
[43:34.780 --> 43:36.660]  текст в контейнер фиксированной ширины.
[43:36.660 --> 43:39.260]  Значит, весь текст будет по ширине, может быть, не
[43:39.260 --> 43:41.340]  такой, как вся страница, а какой мы укажем.
[43:41.340 --> 43:44.340]  Есть framebox, он просто заворачивает то, что внутри в рамочку.
[43:44.340 --> 43:49.900]  Есть colorbox, он подкрашивает, по-моему, фон подкрашивает,
[43:49.900 --> 43:50.900]  но, может быть, и сам текст.
[43:50.900 --> 43:51.900]  Надо проверить.
[43:51.900 --> 43:54.580]  Я сам никогда не пользовался конкретно colorbox, не могу сказать.
[43:54.580 --> 43:56.580]  Но это точно работает.
[43:56.580 --> 44:02.460]  Racebox берет содержимое, которое мы подали, и поднимает,
[44:02.460 --> 44:05.260]  слово race, либо опускает его на значение lift.
[44:05.260 --> 44:08.140]  Ну то есть, lift это будет какое-то число указанное
[44:08.140 --> 44:09.780]  в единицких измерениях, которые к тебе отвечают на
[44:09.780 --> 44:13.300]  всякие размерности, ну то есть там или point, или x, или
[44:13.300 --> 44:16.300]  m, или сантиметры, все, что мы обсуждали на первых
[44:16.300 --> 44:17.300]  занятий.
[44:17.300 --> 44:20.220]  И вот он поднимает его или опускает на такую величину.
[44:20.220 --> 44:21.220]  Почему может опускать?
[44:21.220 --> 44:22.780]  Потому что значение может быть отрицательным.
[44:22.780 --> 44:26.980]  Скажем, racebox минус 5 сантиметров текст, он возьмет конкретный
[44:26.980 --> 44:29.460]  текст, который в скобочках, и опустит его на 5 сантиметров.
[44:29.460 --> 44:30.460]  При этом…
[44:30.460 --> 44:31.460]  Да-да?
[44:31.460 --> 44:33.460]  Как он может его поднять в плане, если сверху текст,
[44:33.460 --> 44:34.460]  мы пишем racebox…
[44:34.460 --> 44:35.460]  Прямо насильно.
[44:35.460 --> 44:36.460]  То есть оно перерекается.
[44:36.460 --> 44:39.780]  Да, это не повлияет ни на что вне этой коробки.
[44:39.780 --> 44:43.380]  Он просто возьмет текущий текст и вот прям вот визуально
[44:43.380 --> 44:44.740]  его поднимет еще на 5 сантиметров.
[44:44.740 --> 44:45.740]  Клинж.
[44:45.740 --> 44:49.340]  Ну, казалось бы, клинж, но есть кейси, о которых это
[44:49.340 --> 44:50.340]  может быть полезно.
[44:50.340 --> 44:52.260]  Например, у нас есть какие-то кастомные символы, нам нужно
[44:52.260 --> 44:55.140]  по какой-то причине какие-то два объекта друг на другом
[44:55.140 --> 44:56.140]  положить, например.
[44:56.140 --> 44:59.860]  Ну, какой-то нужен такой сложный композитный символ.
[44:59.860 --> 45:02.500]  Я такого примера не приведу, но предлагаю поверить, что
[45:02.500 --> 45:04.460]  они есть, и вдруг они вам когда-нибудь тоже встретятся.
[45:04.460 --> 45:06.340]  Да, есть…
[45:06.340 --> 45:09.340]  Блин, я забыл перепечатать.
[45:09.340 --> 45:11.380]  Короче, это не racebox, это rotatebox.
[45:11.380 --> 45:14.180]  Rotatebox, ну, значит, бокс, который вращает.
[45:14.180 --> 45:17.540]  У него в качестве обязательного аргумента количество градусов,
[45:17.540 --> 45:20.540]  на который он повернет текст, ну, кажется, противчасовой.
[45:20.540 --> 45:22.940]  Ну, это можно проверить, противчасовой или почасовой.
[45:22.940 --> 45:25.220]  Ну, как-то детерминирован, там явно прописано.
[45:25.220 --> 45:28.740]  Ну, есть scalebox, который масштабирует содержимое.
[45:28.740 --> 45:31.860]  Вот scalebox мне прямо прикажетался, мне вот, например, чисто
[45:31.860 --> 45:35.260]  идеологически не нравится, как в техе написаны буквы
[45:35.260 --> 45:36.260]  хи заглавные.
[45:36.260 --> 45:38.500]  Вот, предлагаю посмотреть.
[45:38.500 --> 45:43.140]  Кстати, я не помню, работают ли хи вне математики, но
[45:43.140 --> 45:44.140]  предлагаю попробовать.
[45:44.140 --> 45:45.140]  Может быть, сработает.
[45:45.140 --> 45:46.140]  Не, не сработало.
[45:46.140 --> 45:47.140]  Ну, это же математика.
[45:47.540 --> 45:48.540]  Мне не жалко.
[45:50.540 --> 45:51.540]  Что опять?
[45:51.540 --> 45:52.540]  Сейчас почему?
[45:55.940 --> 45:58.140]  Может, мне какие-то AMS чего-нибудь не подключено?
[45:59.340 --> 46:00.340]  Вроде подключено.
[46:00.940 --> 46:01.940]  Почему же тогда нет?
[46:02.940 --> 46:03.940]  Ну, хорошо.
[46:03.940 --> 46:04.940]  И что-то интересно, а если эпсилон?
[46:05.940 --> 46:06.940]  Эпсилон ты знаешь.
[46:06.940 --> 46:08.340]  Чего-то ты не знаешь то о хи.
[46:12.940 --> 46:13.940]  А, я понял.
[46:13.940 --> 46:16.940]  Заглавное хи — это буквально латинское х.
[46:17.940 --> 46:18.940]  Поэтому он, собственно, ничего и не делает.
[46:20.940 --> 46:21.940]  А, сейчас у меня опять падает студия.
[46:24.940 --> 46:25.940]  Вроде перестали падать.
[46:25.940 --> 46:26.940]  Да.
[46:26.940 --> 46:29.940]  Ну, вот, особенность буквы хи в том, что некоторые,
[46:29.940 --> 46:32.700]  скажем, лекторы на физтехе рисуют ее даже заглавную
[46:32.700 --> 46:35.340]  не как просто х, а как что-то симпатичное, ну, там как-то
[46:35.340 --> 46:36.340]  вот загогулиными.
[46:36.340 --> 46:41.340]  И вот в обычном техе хи только строчная, которая так
[46:41.340 --> 46:42.340]  умеет.
[46:42.340 --> 46:43.540]  Вот, предлагаю посмотреть.
[46:43.940 --> 46:47.860]  Ну, то есть, буква симпатичная, но сейчас мы скажем, делаем
[46:47.860 --> 46:52.420]  хи для сравнения ABC, но вот она почему-то опущена
[46:52.420 --> 46:53.420]  вниз.
[46:53.420 --> 46:55.300]  А вот мы хотим, чтобы теперь это было наше заглавное
[46:55.300 --> 46:56.300]  хи.
[46:56.300 --> 46:58.380]  Вот, переопределим мы вот таким вот образом.
[46:58.380 --> 47:00.900]  Вернее так, даже не переопределим, а просто определим, потому
[47:00.900 --> 47:03.420]  что команды хи заглавной их в техе вообще нет, потому
[47:03.420 --> 47:05.940]  что он думает, что заглавное хи — это просто х.
[47:05.940 --> 47:08.660]  Вот, предлагаю определить заглавную хи.
[47:08.660 --> 47:11.420]  Ну, как мы это сделаем?
[47:11.420 --> 47:12.420]  Мы сделаем нюком.
[47:12.420 --> 47:15.860]  Во-первых, уже известное сочетание.
[47:15.860 --> 47:16.860]  Сделаем команду хи.
[47:16.860 --> 47:20.300]  И, собственно, что нам нужно?
[47:20.300 --> 47:23.260]  Видимо, нужно этот хи, во-первых, отмасштабировать за счет
[47:23.260 --> 47:26.820]  скейлбокса, а во-вторых, поднять вверх строки за счет
[47:26.820 --> 47:27.820]  рейсбокса.
[47:27.820 --> 47:30.060]  Предлагаю так и сделать.
[47:30.060 --> 47:31.060]  Вверх скейлбокс.
[47:31.060 --> 47:34.900]  Ну, допустим, 1.1.
[47:34.900 --> 47:35.900]  Не очень сильно ее увеличим.
[47:35.900 --> 47:39.580]  И, да, посмотрим, что будет.
[47:40.500 --> 47:44.780]  Так, видимо, здесь потребуется, скажем, вот так вот сделать.
[47:51.380 --> 47:52.740]  Как всегда, проблемы.
[47:52.740 --> 47:58.700]  Ладно, предлагаю тогда пока что забыть о том, что хи
[47:58.700 --> 48:01.820]  в математике, и вот эти доллары оставить здесь.
[48:05.700 --> 48:06.700]  Не понял.
[48:09.580 --> 48:15.300]  Как будто бы он не знает скейлбокса.
[48:15.300 --> 48:17.300]  Ну, как такое может быть?
[48:17.300 --> 48:19.980]  Сейчас, из чистого интереса, а если я просто делаю, ну,
[48:19.980 --> 48:20.980]  какой это скейлбокс?
[48:20.980 --> 48:26.140]  Может так казаться, что он тоже приезжает с каким-то
[48:26.140 --> 48:28.700]  пакетом, а я, может, забыл, с каким.
[48:28.700 --> 48:29.700]  У них, конечно, неудобно.
[48:29.700 --> 48:39.340]  Да, он не знает, что такое скейлбокс.
[48:39.340 --> 48:43.340]  И я тебе позволю погуглить, откуда он приходит, с какого
[48:43.340 --> 48:44.340]  пакета.
[48:44.340 --> 48:45.940]  Просто, чтобы время не тратить.
[48:45.940 --> 48:47.100]  Примерно перевести хочется.
[48:47.100 --> 48:54.220]  Ну, то есть, не мог же написать что-то совсем неправильное.
[48:54.220 --> 49:05.220]  Скорее всего, не мог.
[49:05.220 --> 49:06.860]  Да, действительно, он приезжает с пакетом графикс.
[49:06.860 --> 49:09.180]  Его нужно подключить, чтобы это заработало.
[49:09.180 --> 49:14.140]  Ну, хорошо, делаем use package, graphics, и пробуем еще раз.
[49:14.140 --> 49:18.100]  Окей, оно смогло обнасумировать букву А.
[49:18.100 --> 49:19.100]  Хорошо.
[49:19.100 --> 49:21.420]  А теперь попробуем, что будет, если мы сделаем, собственно,
[49:21.420 --> 49:22.420]  нашу хи.
[49:22.420 --> 49:25.700]  Ну окей, буквы хи стало, кажется, больше.
[49:25.700 --> 49:29.300]  Но она все еще опущена вниз с строки, и это хочется
[49:29.300 --> 49:30.300]  исправить.
[49:30.300 --> 49:32.260]  Ну, вспоминаем, что у нас есть инструмент racebox.
[49:32.260 --> 49:36.700]  Он поднимает весь текст на какую-то величину, какую
[49:36.700 --> 49:37.700]  мы укажем.
[49:38.660 --> 49:41.660]  К сожалению, придется подгонять, какая именно величина.
[49:41.660 --> 49:44.460]  Ну, как будто это что-то типа половинка буквы X, ну,
[49:44.460 --> 49:46.340]  то есть половинка строчной буквы.
[49:46.340 --> 49:51.100]  Поэтому я предлагаю написать 05X.
[49:51.100 --> 49:52.340]  Ну, как будто угадал.
[49:52.340 --> 49:55.780]  Все, ура, мы сделали свою кастомную заклавную букву
[49:55.780 --> 49:57.620]  хи, которой раньше техи не было, и теперь можем ей
[49:57.620 --> 49:58.620]  пользоваться.
[49:58.620 --> 50:02.660]  А что это за гвозда, конечно, насчет математики, что
[50:02.660 --> 50:05.100]  вообще-то эта буква хотите еще в математике применять,
[50:05.100 --> 50:06.620]  а мы тоже доллары использовали внутри.
[50:06.620 --> 50:14.260]  Но, оказывается, оно, в общем, оно это схавало.
[50:14.260 --> 50:17.940]  Видимо, я так это для себя объяснил.
[50:17.940 --> 50:20.860]  Вообще-то, скейлбокс, он создает такое маленькое
[50:20.860 --> 50:22.860]  окружение внутри себя, такой вот параграф.
[50:22.860 --> 50:26.980]  И все, что внутри него находится, оно, собственно, только то,
[50:26.980 --> 50:27.980]  что внутри влияет.
[50:27.980 --> 50:31.020]  И оно даже не знает, что снаружи математика, не
[50:31.020 --> 50:32.900]  математика, ему это неважно, потому что он в вакууме
[50:33.700 --> 50:34.700]  существует.
[50:34.700 --> 50:35.700]  Ну, на то и ты бокс, контейнер.
[50:35.700 --> 50:38.340]  В общем, мы с этим справились.
[50:38.340 --> 50:43.460]  И второй такой полезный пример была речь о том, как сделать
[50:43.460 --> 50:44.460]  значок делимости.
[50:44.460 --> 50:45.460]  Три точки друг на другом.
[50:45.460 --> 50:51.380]  Я позволю себе украсть код, который я нашел на Stack Overflow.
[50:51.380 --> 50:55.740]  Ну уж не будем набирать, просто зачитаю, что тут
[50:55.740 --> 50:56.740]  написано.
[50:56.740 --> 51:01.100]  H-боксы и V-боксы – это тоже какие-то боксы, причем древние
[51:01.100 --> 51:04.140]  боксы, приехавшие еще из Теха, которые просто
[51:04.140 --> 51:08.220]  заворачивают текст в горизонтальную коробку, в данном случае
[51:08.220 --> 51:09.220]  в вертикальную коробку.
[51:09.220 --> 51:11.500]  Сейчас это все не очень важно.
[51:11.500 --> 51:18.700]  Важно следующее, что, во-первых, у нас три H-бокса подряд, значит,
[51:18.700 --> 51:22.340]  мы насильно размещаем три коробки друг на другом,
[51:22.340 --> 51:23.340]  каждый с новой строки.
[51:23.340 --> 51:26.700]  Ну потому что это горизонтальные коробки, они вот так вот устроены.
[51:26.700 --> 51:30.660]  Но при этом каждая новая строка, мы говорим, будет
[51:30.740 --> 51:31.740]  довольно маленькой.
[51:31.740 --> 51:35.260]  Мы задаем параметры baseline-skip довольно маленьким, чтобы
[51:35.260 --> 51:39.300]  эти новые строки, они были прям меньше одной буквы
[51:39.300 --> 51:40.300]  x.
[51:40.300 --> 51:43.020]  Тут сейчас много еще непонятного, я даже не призываю все это
[51:43.020 --> 51:45.740]  распарности понять, я призываю понять философию, что вот
[51:45.740 --> 51:49.380]  есть боксы, они позволяют текст внутри себя как-то
[51:49.380 --> 51:52.100]  им манипулировать, чуть хитрее, чем мы раньше умели.
[51:52.100 --> 51:54.020]  И вот мы вот тут манипулируем так.
[51:54.020 --> 51:56.960]  Мы заворачиваем в боксы точечки, ставим точечки друг
[51:56.960 --> 52:01.480]  на другом и вот еще заворачиваем все это в команду mustrel.
[52:01.480 --> 52:03.880]  Если помните, мы во второй раз обсуждали, что вот есть
[52:03.880 --> 52:07.520]  mustbin, который весь текст, который внутри нее превращает
[52:07.520 --> 52:12.320]  в математическую бинарную операцию и примет соответствующие
[52:12.320 --> 52:15.840]  правила выставления пробелов там до и после аргументов.
[52:15.840 --> 52:17.640]  Вот mustrel это почти то же самое.
[52:17.640 --> 52:20.720]  Ну просто правила расстановки пробелов между бинарными
[52:20.720 --> 52:25.400]  операциями и аргументами и между relation, отношениями
[52:25.400 --> 52:27.200]  и аргументами, оно немножечко разное.
[52:27.200 --> 52:30.160]  Ну и вот уж для чистоты, поскольку все-таки это отношение,
[52:30.160 --> 52:32.600]  мы именно по-моему mustrel, а не mustbin.
[52:32.600 --> 52:33.880]  Ну и на выходе мы что имеем?
[52:33.880 --> 52:36.840]  Оно взяло три точечки, их нарисовало друг на другом
[52:36.840 --> 52:38.720]  и получилось, в общем-то, симпатично.
[52:38.720 --> 52:42.640]  Уж всяко симпатичнее, чем команды видос, да?
[52:42.640 --> 52:44.400]  Ну если вам этиологически очень не нравится что-то
[52:44.400 --> 52:46.640]  очень много непонятного кода, который даже я украл
[52:46.640 --> 52:48.920]  и я бы сам его не написал скорее всего, потому что
[52:48.920 --> 52:50.620]  ну это какие-то странные параметры, их тоже раз
[52:50.620 --> 52:53.560]  в жизни задаешь, но можем попробовать иначе.
[52:53.560 --> 52:56.440]  Какой подход естественный намечается?
[52:56.440 --> 53:00.440]  Мы же знаем про команду видос, вертикальные точечки.
[53:00.440 --> 53:01.440]  Вот допустим.
[53:01.440 --> 53:04.400]  Не-не, вертикальные точечки, они уже вертикальные.
[53:04.400 --> 53:09.560]  Ой, сейчас, кто-то написал видос.
[53:09.560 --> 53:10.560]  Чем плохо?
[53:10.560 --> 53:12.680]  Во-первых, это не отношение, поэтому пробелы плохо стоят.
[53:12.680 --> 53:16.360]  Во-вторых, они какие-то большие, они торчат куда-то вверх.
[53:16.360 --> 53:19.080]  Наверное нам поможет скейлбокс.
[53:19.080 --> 53:21.200]  Можем попробовать.
[53:21.200 --> 53:25.680]  Предлагаю сделать new command, который будет называться
[53:25.680 --> 53:34.480]  div by, divisible by, а внутри скейлбокс, ну наверное 0.9, нет, 0.8,
[53:34.480 --> 53:37.120]  вот с таким коэффициентом давайте попробуем, а внутри
[53:37.120 --> 53:38.920]  что ну вот видос.
[53:38.920 --> 53:45.320]  Напомню, что то, что в боксе, да, правильно, напомню еще
[53:45.320 --> 53:48.200]  раз то, что в боксе оно не видит математики снаружи,
[53:48.200 --> 53:50.840]  поэтому нам придется доллар внутри тоже поставить.
[53:50.960 --> 53:54.640]  Оттейс, да, мафрел, чтобы правильные пробелы были
[53:54.640 --> 53:55.640]  ко всему прочему.
[53:55.640 --> 53:58.240]  Если сейчас все это заработать в первый раз, то будет конечно
[53:58.240 --> 53:59.240]  очень приятно.
[53:59.240 --> 54:02.880]  Ну а вдруг, о, заработало, смотрите, получилось.
[54:02.880 --> 54:05.440]  Мы сделали почти то же самое, но при этом кодом, который
[54:05.440 --> 54:06.440]  мы понимаем.
[54:06.440 --> 54:08.680]  Да, мне кажется, это довольно приятно.
[54:08.680 --> 54:11.640]  Ну и понятно, что можно там подбирать значение масштабирования
[54:11.640 --> 54:14.160]  там, может быть 0.8.5, какое-то самое оптимальное, чтобы
[54:14.160 --> 54:16.000]  это было прям очень симпатично.
[54:16.000 --> 54:19.280]  И ну вот, мы изобрели символ и можем теперь им пользоваться.
[54:19.280 --> 54:20.280]  Вот такая история.
[54:20.280 --> 54:21.280]  Для этого боксы и нужны.
[54:24.840 --> 54:25.840]  Ага.
[54:25.840 --> 54:28.760]  Что-то вот перемудренное какое-то.
[54:28.760 --> 54:33.480]  Ну, я его украл с отца Коверфлоу, ну то есть там сидят такие
[54:33.480 --> 54:36.040]  адепты теха, которые, во-первых, на нем писали, когда мы еще
[54:36.040 --> 54:39.520]  там только-только родились, скорее всего, и там было
[54:39.520 --> 54:42.640]  очень много разного старого синдекса, за который сейчас,
[54:42.640 --> 54:45.360]  ну может быть работает, поддерживается, но никем
[54:45.360 --> 54:46.360]  не используется.
[54:46.360 --> 54:49.360]  Ну в частности, аж боксы, это, да, штуки прямо из старого
[54:49.360 --> 54:50.360]  теха, например.
[54:50.360 --> 54:53.400]  Ну, как бы, это решение, которое у кого-то сработало,
[54:53.400 --> 54:54.400]  почему бы не воспользоваться.
[54:54.400 --> 54:56.960]  У меня про это сегодня еще будет, что, в принципе, старые
[54:56.960 --> 54:58.760]  решения, они, ну, типа, ничем не плохи.
[54:58.760 --> 55:00.920]  Если мы хотим просто их применить раз в жизни, а
[55:00.920 --> 55:03.280]  не выучить понять, почему они работают, дальше пользоваться
[55:03.280 --> 55:04.280]  именно ими.
[55:04.280 --> 55:06.080]  А вот просто решить конкретную проблему.
[55:06.080 --> 55:08.080]  Конкретная проблему у нас нет трехточечек.
[55:08.080 --> 55:09.920]  Возьмем триточки вот таким вот образом.
[55:09.920 --> 55:13.040]  Ну, можно и такое взять, и работает, и слава богу.
[55:13.040 --> 55:15.240]  Мы хотя бы поняли, что хотя бы примерно написано.
[55:15.240 --> 55:18.160]  Примерно тут тоже какие-то боксы как-то друг с другом
[55:18.160 --> 55:21.840]  размещаются, какое-то соотношение метрическое
[55:21.840 --> 55:24.000]  между ними останавливается, ну, и как-то оно работает.
[55:24.000 --> 55:28.360]  Ну да, это, конечно, громоздкое решение.
[55:28.360 --> 55:30.440]  Уж по крайней мере, когда мы научились делать свое,
[55:30.440 --> 55:33.680]  мы, наверное, будем пользоваться им, как-то это в душе приятнее.
[55:33.680 --> 55:34.680]  Ну и тем более все понятно.
[55:34.680 --> 55:38.440]  Да, про декомпозицию на файлы.
[55:38.440 --> 55:40.600]  Тут будет совсем просто.
[55:40.600 --> 55:43.480]  Как я уже упоминал, большие проекты, все их, ну, их
[55:43.480 --> 55:46.160]  трудно поддерживать в одном файле, в самом ожидаемом,
[55:46.160 --> 55:48.640]  в стадии композировать, и потом подключать уже по
[55:48.640 --> 55:52.240]  кусочкам какой-то большой документ, который в Main.Tech,
[55:52.240 --> 55:56.160]  собственно, который потом будет собираться, и результат
[55:56.160 --> 55:58.240]  сборки которого и будет нашей работой.
[55:58.240 --> 55:59.240]  Вот.
[55:59.240 --> 56:00.960]  Ну, как это делается?
[56:00.960 --> 56:04.600]  Мы пишем разные коды в разных файликах, как-то их называем,
[56:04.600 --> 56:08.320]  а потом подключаем их в Main.Tech с помощью команды input.
[56:08.320 --> 56:11.360]  Команда input буквально берет тот код, который написан
[56:11.360 --> 56:14.480]  в соответствующем аргументе, в следующем файле, и подставляет
[56:14.480 --> 56:17.120]  этот код на стадии компиляции, и собирает его все вместе
[56:17.120 --> 56:19.160]  уже как будто это единый файл.
[56:19.160 --> 56:20.160]  Вот.
[56:20.160 --> 56:22.400]  Можно тут писать в конце точка тех, название файлов
[56:22.400 --> 56:24.120]  можно не писать, но он догадается.
[56:24.120 --> 56:26.480]  Ну, просто потому что мы input'ом бы не стали подключать
[56:26.480 --> 56:30.120]  ничего кроме файлов в точке тех, и как-то, в общем, сообразит,
[56:30.120 --> 56:31.120]  даже если мы это не укажем.
[56:31.120 --> 56:36.640]  Есть у него альтернатива include, но небольшая табличка,
[56:36.640 --> 56:38.640]  в чем разница между ними есть.
[56:38.640 --> 56:42.040]  Да, можно подключать файлы с помощью input, можно с помощью
[56:42.040 --> 56:43.040]  include.
[56:43.600 --> 56:45.200]  Разница следующая.
[56:45.200 --> 56:47.640]  Во-первых, input подставляет просто текст.
[56:47.640 --> 56:49.920]  Include окружает себя некоторым информатированием.
[56:49.920 --> 56:53.160]  Он начинает с новой строки, с новой страницы, с красной
[56:53.160 --> 56:55.160]  строки и всякие такие вещи.
[56:55.160 --> 56:57.920]  Если мы делаем какие-то логически очень друг от друга независимые
[56:57.920 --> 57:01.080]  вещи, скажем, в каждом файле у нас какая-то большая
[57:01.080 --> 57:03.600]  голова книги, и мы хотим эти главы друг от друга
[57:03.600 --> 57:06.400]  более-менее независимым початать, то тогда, в принципе,
[57:06.400 --> 57:07.400]  можно через input это делать.
[57:07.400 --> 57:08.400]  Почему бы нет?
[57:08.400 --> 57:09.400]  Потом.
[57:09.400 --> 57:10.400]  Input'ы могут быть вложенными.
[57:10.760 --> 57:13.360]  У нас, допустим, гигантский проект, в котором файлы
[57:13.360 --> 57:15.240]  вложены, файлы вложены, файлы вложены, вот тогда
[57:15.240 --> 57:18.000]  тоже input это наш выход, а include не наш.
[57:18.000 --> 57:21.280]  Кроме того, если мы хотим в какой-то причине комплировать
[57:21.280 --> 57:23.760]  не все, ну скажем, мы на стадии отладки находимся
[57:23.760 --> 57:27.520]  и проверяем конкретные главы, напечатанные хорошо.
[57:27.520 --> 57:32.240]  Мы можем для includ'а задавать специальную команду include-only,
[57:32.240 --> 57:35.200]  указывать преамбулу и далее какое-то количество
[57:35.200 --> 57:38.720]  имен, и тогда он будет делать что-то нетривиальное при
[57:38.720 --> 57:43.320]  команде include-filename, только если filename это одно из этих
[57:43.320 --> 57:45.560]  имен, которые мы указали, а иначе он просто ничего
[57:45.560 --> 57:46.560]  не будет делать.
[57:46.560 --> 57:49.440]  Ну то есть это удобно тем, что мы написали одну строчку
[57:49.440 --> 57:53.360]  и вот вся отладка, а в случае с input'ом придется ходить
[57:53.360 --> 57:57.200]  и комментировать намеренно каждую строку, которая
[57:57.200 --> 58:00.760]  что-то input'ит, еще может что-то просмотрим, пусть нехорошо
[58:00.760 --> 58:01.760]  тогда.
[58:01.760 --> 58:04.800]  Ну в общем-то такие, минорные различия, на стадии продакшена
[58:04.800 --> 58:09.000]  конечно это не влияет, ну когда почитать готовый
[58:09.000 --> 58:10.000]  текст.
[58:10.000 --> 58:12.720]  На стадии продакшена, разница основная в том, что input он
[58:12.720 --> 58:14.880]  просто подставляет текст, а include его заворачивает
[58:14.880 --> 58:19.280]  в новые страницы и вот как-то обоставляет от всего остального.
[58:19.280 --> 58:26.760]  Да, еще одно уточнение, что весь этот поиск файлов
[58:26.760 --> 58:32.080]  он идет из корневой директории, в которой лежит main, то есть
[58:32.080 --> 58:34.680]  он когда собирает main, он переходит в директорию,
[58:34.680 --> 58:37.600]  которая находится и уже оттуда начинает искать.
[58:37.600 --> 58:40.320]  Возможно можно как-то этим управлять и указать в переменную,
[58:40.320 --> 58:42.440]  ну что-то вроде переменный path, ну для теха какой-то
[58:42.440 --> 58:45.080]  своей, не знаю, есть ли такая, наверняка есть, указать
[58:45.080 --> 58:46.840]  им какие-то еще пути, по которым ему нужно искать
[58:46.840 --> 58:50.360]  файлы, но мне кажется это какие-то заморочки и один
[58:50.360 --> 58:54.200]  теховый проект лучше хранить как-то в одном месте и думаю,
[58:54.200 --> 58:56.200]  что от этого вам сильно неудобнее не станет.
[58:56.200 --> 59:14.000]  Да, это буквально такой файл с помогательной, которая
[59:14.000 --> 59:16.200]  именно чтобы подставиться в основной, там уже нет
[59:16.200 --> 59:20.120]  ни преамбулы, ни begin document, ни end document, там только голый
[59:20.120 --> 59:21.120]  код.
[59:22.120 --> 59:27.240]  Да, сам по себе он не скомплируется, это хорошее замечание,
[59:27.240 --> 59:28.240]  действительно так.
[59:28.240 --> 59:33.120]  На самом деле, если мы посмотрим на преамбулу, ну вот у нас
[59:33.120 --> 59:35.920]  же были уже там Playground и у них были преамбулы, а наш
[59:35.920 --> 59:38.080]  тоже вообще не скомплируется, просто потому что у нее
[59:38.080 --> 59:41.560]  вообще нет begin document, end document, но при этом оно как-то работает,
[59:41.560 --> 59:43.600]  потому что мы его подставили, команда input, она просто
[59:43.600 --> 59:46.640]  подставила код преамбулы и пошла комплировать дальше,
[59:46.640 --> 59:49.040]  где уже document есть, вот.
[59:49.520 --> 59:52.200]  Вот, если помните, input, собственно, и был тем спойлером, который
[59:52.200 --> 59:54.360]  я еще на первом занятии, кажется, озвучил, что вот
[59:54.360 --> 59:56.800]  можно так преамбулы подключать, но вот можно не только
[59:56.800 --> 59:59.160]  преамбулы, а можно вообще что угодно, и вообще это
[59:59.160 --> 01:00:01.960]  хороший тон, где композировать проекты, скажем, на главы
[01:00:01.960 --> 01:00:05.960]  или там на лекции, ну, зависит от того, чего пишете, так
[01:00:05.960 --> 01:00:08.400]  и вам удобнее, и читателям, и тем, кто поддерживает
[01:00:08.400 --> 01:00:09.680]  ваш код, если кто его поддерживает.
[01:00:09.680 --> 01:00:13.720]  Да, еще есть способ подключать под рефники, вот прямо уже
[01:00:13.720 --> 01:00:15.520]  скомплированные под рефники или вообще под рефники
[01:00:15.520 --> 01:00:17.600]  другой природы, ну просто какие-то у вас были, вы
[01:00:17.600 --> 01:00:19.560]  хотите их в тех вставить.
[01:00:19.560 --> 01:00:24.920]  Есть команда input pdf, прижатая с пакетом pdf pages, там есть
[01:00:24.920 --> 01:00:27.280]  разные настройки, можно в разном порядке их указывать,
[01:00:27.280 --> 01:00:30.000]  вот тут я привел пример, что можно, скажем, вставить
[01:00:30.000 --> 01:00:32.200]  меня в страничку первую, третью, и все из интервалов
[01:00:32.200 --> 01:00:34.480]  с пятой по шестую, ну как бы это тут не очень интересно,
[01:00:34.480 --> 01:00:36.400]  потому что это подряд пятая и шестая, но можно было
[01:00:36.400 --> 01:00:40.040]  бы, скажем, 5-7, там было бы 3 страницы, и он их, соответственно,
[01:00:40.040 --> 01:00:42.680]  страничками подряд вставит в то место, где мы это попросили
[01:00:42.680 --> 01:00:45.200]  сделать, вот.
[01:00:45.200 --> 01:00:46.840]  Если бы мы хотели, чтобы это было именно как векторная
[01:00:46.840 --> 01:00:50.080]  картинка вставлена, мы бы сделали input graphics, input pdf,
[01:00:50.080 --> 01:00:53.520]  он буквально вставляет прям страницы в наш документ,
[01:00:53.520 --> 01:00:56.440]  вот прям после нашей страницы текущей вставляет новой
[01:00:56.440 --> 01:01:01.280]  pdf страницы, вот.
[01:01:01.280 --> 01:01:05.920]  Это бывает полезно, если вы, скажем, готовите что-то
[01:01:05.920 --> 01:01:10.400]  для печати на буклетах, скажем, у которых там типа
[01:01:10.400 --> 01:01:14.480]  три разворота, да, вот такие сверточные, и их, ну вообще-то
[01:01:14.480 --> 01:01:17.960]  текст удобно генерить просто подряд сверху вниз, весь
[01:01:17.960 --> 01:01:23.320]  в каком-то документике теховом, да, текст удобно генерить
[01:01:23.320 --> 01:01:25.800]  прямо подряд в одном документике, но при этом, когда вы будете
[01:01:25.800 --> 01:01:27.920]  готовить его на печати, вам потребуются эти блоки
[01:01:27.920 --> 01:01:30.520]  текста как-то переставить, потому что, как мы понимаем,
[01:01:30.520 --> 01:01:33.440]  на печати, особенно странного буклета, там, с цельными
[01:01:33.440 --> 01:01:35.760]  разворотами, страницы будут в каком-то другом порядке
[01:01:35.760 --> 01:01:38.960]  идти, чтобы это было правильно на печати, и вот тогда нам
[01:01:38.960 --> 01:01:41.680]  поможет pdf pages, потому что там есть некие настройки,
[01:01:41.680 --> 01:01:44.320]  которые такой заточены, но я, конечно, в этой подробности
[01:01:44.320 --> 01:01:46.600]  не вдаюсь, потому что не уверен, что это многим
[01:01:46.600 --> 01:01:47.600]  потребуется в жизни.
[01:01:47.600 --> 01:01:49.640]  Ну, мне когда-то приказалось, поэтому решил включить.
[01:01:49.640 --> 01:01:56.880]  И вот такой небольшой спойлер к тому, что мы будем
[01:01:56.880 --> 01:01:58.240]  заниматься в следующий раз, заниматься будет
[01:01:58.240 --> 01:02:00.360]  компьютерной графикой, ну там, всякие векторные
[01:02:00.360 --> 01:02:04.040]  рисуночки, там, графики функций, какая-то геометрия,
[01:02:04.040 --> 01:02:08.000]  вот такая демо-версия его, это пакет tixcd, вот, все
[01:02:08.000 --> 01:02:11.240]  графикой заведут пакет tix, а вот tixcd, это его расширение
[01:02:11.240 --> 01:02:13.160]  все обрисовать так называемые компутативные диаграммы.
[01:02:13.160 --> 01:02:17.440]  Сейчас не очень важно, что это значит, но можно воспринимать
[01:02:17.440 --> 01:02:18.440]  это так.
[01:02:18.440 --> 01:02:20.400]  Это способ рисовать схемы, в которых у вас есть только
[01:02:20.400 --> 01:02:23.000]  объекты и стрелочки, которые их соединяют.
[01:02:23.000 --> 01:02:26.080]  Ну скажем, какие-то графы, какие-то там автоматы, может
[01:02:26.080 --> 01:02:28.520]  быть, вот какие-то такие штуки, если хочется рисовать,
[01:02:28.520 --> 01:02:29.520]  tixcd вам может помочь.
[01:02:29.520 --> 01:02:33.240]  Буквально всего один пример приведу, ну во-первых,
[01:02:33.240 --> 01:02:37.160]  что вы делаете, вы подключаете пакет, как всегда, usePackage tixcd,
[01:02:37.160 --> 01:02:41.120]  а useCase будет такой, есть окружение tixcd, вы его
[01:02:41.120 --> 01:02:42.880]  открываете, закрываете.
[01:02:42.880 --> 01:02:46.560]  Ну какой-то параметр, тут всякие настройки стиля
[01:02:46.560 --> 01:02:47.560]  можно производить.
[01:02:47.560 --> 01:02:51.760]  Ну вот тут я сделаю rowSeparator равно huge, то есть я говорю,
[01:02:51.760 --> 01:02:54.240]  что пожалуйста мне между строками сделай большое
[01:02:54.240 --> 01:02:55.240]  расстояние.
[01:02:55.240 --> 01:02:56.240]  Буквально это оно значит.
[01:02:56.240 --> 01:03:00.640]  А дальше такое, дальше синтаксис прямо как в таблицах.
[01:03:00.640 --> 01:03:04.320]  У нас есть, ну, наша диаграмма делит все пространство
[01:03:04.320 --> 01:03:07.080]  на какие-то строки и на какие-то колонки.
[01:03:07.080 --> 01:03:10.680]  И тут даже не нужно заранее задавать их количество,
[01:03:10.840 --> 01:03:12.920]  чтобы оно было согласовано бы в течение всего текста.
[01:03:12.920 --> 01:03:15.900]  Тут у меня будет, если мы посчитаем три колонки и
[01:03:15.900 --> 01:03:16.920]  две строки.
[01:03:16.920 --> 01:03:20.440]  То есть я в рамках вот одной строки, у меня есть некий
[01:03:20.440 --> 01:03:24.560]  текст, амперсант разделяющий две колонки, ну какая-то
[01:03:24.560 --> 01:03:27.220]  пустая колонка, снова амперсант, и третья колонка.
[01:03:27.220 --> 01:03:30.440]  То же самое здесь.
[01:03:30.440 --> 01:03:33.100]  Какая-то пустая колонка, амперсант, как это не пустая
[01:03:33.100 --> 01:03:35.480]  колонка, снова амперсант, еще какая-то пустая колонка.
[01:03:35.480 --> 01:03:38.000]  Ну то есть по три колонки, и на первой строки, и на
[01:03:38.000 --> 01:03:39.000]  второй.
[01:03:39.000 --> 01:03:42.000]  Это какой-то обычный математический текст, который, ну, просто как вставлится, мы пишем.
[01:03:42.000 --> 01:03:46.000]  А вот есть особая команда arrow, которая специфична именно для ticcd.
[01:03:46.000 --> 01:03:52.000]  Она буквально рисует стрелочку в заданном направлении, подписанную заданной буквкой или заданным текстом.
[01:03:52.000 --> 01:03:59.000]  Что такое заданное направление? Тут я rr. Стрелочка ведущая на две ячейки вправо, ну, то есть right-right.
[01:03:59.000 --> 01:04:04.000]  Тут у меня есть стрелочка ведущая dr, ведущая на одну ячейку вниз, на одну ячейку вправо.
[01:04:04.000 --> 01:04:09.000]  Напоминаю, что у нас все побито на три ячейки по горизонтали, две по вертикали.
[01:04:09.000 --> 01:04:13.000]  Всего шесть ячейк. Я просто управляю, откуда, куда, какая стрелочка будет вести.
[01:04:13.000 --> 01:04:19.000]  Ну, и там дальше подписывается какая-то будет буковкой phi, какая-то будет буковкой pi, какая-то будет буковкой psi, del это down-left.
[01:04:19.000 --> 01:04:22.000]  А еще есть необязательный аргументом как-то модифицирующего начертания.
[01:04:22.000 --> 01:04:27.000]  Есть, например, dash-right arrow означает, что наша стрелочка будет необычной, а пунктирной.
[01:04:27.000 --> 01:04:30.000]  Ну, типа dash-arrow, пунктирная стрелочка.
[01:04:30.000 --> 01:04:34.000]  А swap означает, что оно обычно подписывается, скажем, сверху.
[01:04:34.000 --> 01:04:39.000]  Текст общается сверху стрелочки относительно той ориентации, которая у стрелочки.
[01:04:39.000 --> 01:04:42.000]  Если она перевернута, значит текст будет снизу стрелочки.
[01:04:42.000 --> 01:04:45.000]  А вот наоборот. Вот это вообще команда swap.
[01:04:45.000 --> 01:04:49.000]  Ну, сейчас я не призываю это сразу вникнуть, но тут, в общем, все довольно просто.
[01:04:49.000 --> 01:04:52.000]  С этим можно разобраться буквально за вечер, если вам это потребуется.
[01:04:52.000 --> 01:04:58.000]  Ну вот как это нам это отрисует? Получилась такая симпатичная картинка, которая отрисовала нужные стрелочки.
[01:04:58.000 --> 01:05:02.000]  Да, у нас, видите, шесть ячеек. Раз, два, три, четыре, пять, шесть.
[01:05:02.000 --> 01:05:04.000]  Просто три из них пустые. Ну, они и были в коде пустые.
[01:05:04.000 --> 01:05:07.000]  А те, которые не пустые, там наш текст, который мы писали.
[01:05:07.000 --> 01:05:11.000]  И вот грамотные ведущие стрелочки, которые там right-right два раза.
[01:05:11.000 --> 01:05:15.000]  Да, там down-right тоже грамотно отрисованная стрелочка.
[01:05:15.000 --> 01:05:18.000]  И какие-то подписи, которые мы указали.
[01:05:18.000 --> 01:05:20.000]  Давай.
[01:05:20.000 --> 01:05:22.000]  Тут было бы, конечно, хорошо, чтобы это было все на одном слайде.
[01:05:22.000 --> 01:05:24.000]  Но, к сожалению, не умещалось.
[01:05:24.000 --> 01:05:26.000]  Не, все окей.
[01:05:28.000 --> 01:05:30.000]  В общем, такой вот простой пакет.
[01:05:30.000 --> 01:05:33.000]  С помощью него можно рисовать, повторюсь, всякие графчики.
[01:05:33.000 --> 01:05:37.000]  Всякие автоматы, если вы какие-то там формальными языками занимаетесь.
[01:05:37.000 --> 01:05:41.000]  И для этого вам не нужно изобретать велосипеды и пользоваться большим пакетом TIX.
[01:05:41.000 --> 01:05:43.000]  Можно пользоваться TIX-CD.
[01:05:43.000 --> 01:05:45.000]  Этот TIX-CD сразу в математике надо.
[01:05:45.000 --> 01:05:47.000]  Да, все верно.
[01:05:47.000 --> 01:05:49.000]  Я его уже внутри формулы включаю.
[01:05:51.000 --> 01:05:53.000]  Это хорошее замечание.
[01:05:53.000 --> 01:05:55.000]  Да, ну и всякие напуственные слова.
[01:05:55.000 --> 01:05:57.000]  Поскольку у нас следующие занятия будут уже специфичные.
[01:05:57.000 --> 01:06:03.000]  Будем говорить именно про векторную графику, про презентации, про библиографии.
[01:06:03.000 --> 01:06:07.000]  В общем, такие вещи, которые уже касаются не прям набора какого-то текста в техе.
[01:06:07.000 --> 01:06:09.000]  Ну, для любых задач.
[01:06:09.000 --> 01:06:11.000]  Какие-то специфичные.
[01:06:11.000 --> 01:06:13.000]  То вот для общих задач я какие-то напустные слова скажу.
[01:06:13.000 --> 01:06:15.000]  Во-первых, есть еще куча пакетов.
[01:06:15.000 --> 01:06:17.000]  Мы далеко не все посмотрели.
[01:06:17.000 --> 01:06:19.000]  Вам будет приказано что-то по жизни разное.
[01:06:19.000 --> 01:06:21.000]  Скорее всего, если вы какую-то задачу не можете решить,
[01:06:21.000 --> 01:06:23.000]  придете в Google, типа LaTeX, HowTo, что-то там.
[01:06:23.000 --> 01:06:25.000]  Вам будет даться какой-то ответ в интернете.
[01:06:25.000 --> 01:06:27.000]  Скорее всего, там будут еще какие-то новые пакеты,
[01:06:27.000 --> 01:06:29.000]  которым придется пользоваться.
[01:06:29.000 --> 01:06:31.000]  Вот есть, скажем, вот такие, которые стоит хотя бы упомянуть.
[01:06:31.000 --> 01:06:33.000]  Есть мультикол, чтобы писать текст несколько колонок.
[01:06:33.000 --> 01:06:35.000]  Ну, я не знаю, как это делать.
[01:06:35.000 --> 01:06:37.000]  Я не знаю.
[01:06:37.000 --> 01:06:39.000]  Вот такие, которые стоит хотя бы упомянуть.
[01:06:39.000 --> 01:06:41.000]  Есть мультикол, чтобы писать текст несколько колонок.
[01:06:41.000 --> 01:06:45.000]  Ну, то есть, не во всю эту ширину страницы,
[01:06:45.000 --> 01:06:47.000]  а вот в полширины и до конца страницы.
[01:06:47.000 --> 01:06:49.000]  Потом снова в полширину и до конца страницы.
[01:06:49.000 --> 01:06:51.000]  Ну, так бывает полезно.
[01:06:51.000 --> 01:06:53.000]  Есть пакет TokLoft, который подходит к левому настроению содержания.
[01:06:53.000 --> 01:06:55.000]  Я про него, наверное, еще расскажу.
[01:06:55.000 --> 01:06:57.000]  Ну, там, через раз может быть.
[01:06:57.000 --> 01:06:59.000]  Есть listings.
[01:06:59.000 --> 01:07:01.000]  Это пакет, чтобы отрисовывать грамотно всякий код.
[01:07:01.000 --> 01:07:03.000]  Плюсовый, питонячий, чтобы это выглядело красиво.
[01:07:03.000 --> 01:07:05.000]  А не голым текстом LaTeX,
[01:07:05.000 --> 01:07:07.000]  а, типа, там, чтобы синексы посвечивало всякие такие вещи.
[01:07:07.000 --> 01:07:09.000]  Приятно.
[01:07:09.000 --> 01:07:11.000]  Есть algorithm2e.
[01:07:11.000 --> 01:07:13.000]  И еще целая пачка пакетов, которые
[01:07:13.000 --> 01:07:15.000]  подойдут рисовать алгоритмы всяким псевдокодом.
[01:07:15.000 --> 01:07:17.000]  Ну, типа, оно умеет всякие форы, элсы и зены
[01:07:17.000 --> 01:07:19.000]  рисовать с символами.
[01:07:19.000 --> 01:07:21.000]  Ну, вот, им часто пользуются всякие там математики,
[01:07:21.000 --> 01:07:23.000]  которые пишут что-то про алгоритмы.
[01:07:23.000 --> 01:07:25.000]  Вот, таким вещами.
[01:07:25.000 --> 01:07:27.000]  Ну, а, есть Repfig.
[01:07:27.000 --> 01:07:29.000]  Но, да, это слайд с прошлого года.
[01:07:29.000 --> 01:07:31.000]  Я в прошлом году вообще про него не рассказывал,
[01:07:31.000 --> 01:07:33.000]  сейчас вспоминал, поэтому это уже вам и неинтересно.
[01:07:33.000 --> 01:07:35.000]  Потому что я уже показал, как им пользоваться.
[01:07:35.000 --> 01:07:37.000]  Ну, да, такое тоже есть.
[01:07:37.000 --> 01:07:39.000]  Что там еще я говорил?
[01:07:39.000 --> 01:07:41.000]  Ну, и да, я говорю, что
[01:07:41.000 --> 01:07:43.000]  стоит гуглить.
[01:07:43.000 --> 01:07:45.000]  LaTeX очень долго существует.
[01:07:45.000 --> 01:07:47.000]  И на ваши вопросы наверняка уже есть ответы.
[01:07:47.000 --> 01:07:49.000]  А то еще и много ответов.
[01:07:49.000 --> 01:07:51.000]  И среди них могут быть, конечно, какие-то упорты.
[01:07:51.000 --> 01:07:53.000]  Мы, скажем, видели сегодня упорты и вариант
[01:07:53.000 --> 01:07:55.000]  нарисовать три точки друг на другом.
[01:07:55.000 --> 01:07:57.000]  При том, что мы придумали свой, который намного проще.
[01:07:57.000 --> 01:07:59.000]  Но тот тоже сработал.
[01:07:59.000 --> 01:08:01.000]  И, в общем-то, слава богу.
[01:08:01.000 --> 01:08:03.000]  Не надо бояться.
[01:08:03.000 --> 01:08:05.000]  Если вы понимаете не весь код, который копируете,
[01:08:05.000 --> 01:08:07.000]  это ничего страшного.
[01:08:07.000 --> 01:08:09.000]  Для тех, к сожалению, это ничего страшного.
[01:08:09.000 --> 01:08:11.000]  Но главное, чтобы это у вас сработало.
[01:08:11.000 --> 01:08:13.000]  Думаю, что на этом стоит закончить.
[01:08:13.000 --> 01:08:15.000]  Ура.
[01:08:15.000 --> 01:08:17.000]  Всякий анонс в следующий раз я сделал.
[01:08:17.000 --> 01:08:19.000]  Спасибо за внимание.
