[00:00.000 --> 00:09.120]  Одним давно, когда с дерева Фенвика начинался второй
[00:09.120 --> 00:13.440]  семестр, в принципе, была создана вот такая презентация.
[00:13.440 --> 00:17.680]  Так, ну давайте смотреть, значит, как мы ее будем.
[00:17.680 --> 00:20.760]  Значит, я сразу предупреждаю, будьте внимательны, потому
[00:20.760 --> 00:24.000]  что, как бы, то того Фенвика, который я вам сейчас буду
[00:24.000 --> 00:25.800]  рассказывать, он может немножко отличаться от
[00:25.800 --> 00:26.920]  того, к которому вы привыкли.
[00:26.920 --> 00:27.920]  Вот.
[00:27.920 --> 00:28.920]  Чего?
[00:28.920 --> 00:29.920]  А, вообще не привыкли, да?
[00:29.920 --> 00:30.920]  Ну ладно.
[00:30.920 --> 00:31.920]  Хотя что-то сомневаюсь.
[00:31.920 --> 00:36.840]  Ну-ка поднимите руки, кто хотя бы раз в жизни писал
[00:36.840 --> 00:37.840]  дерево Фенвика.
[00:37.840 --> 00:42.840]  Вот, логично, практически, да.
[00:42.840 --> 00:50.880]  Нет, ну сформулируем так, пишется дерево действительно
[00:50.880 --> 00:51.880]  редко.
[00:51.880 --> 00:53.800]  То есть вообще структура, конечно, сугубо практическая.
[00:53.940 --> 00:55.400]  Ну потому что, да.
[00:55.400 --> 00:57.300]  Мы же с вами выяснили, что, на самом деле, с точки зрения
[00:57.300 --> 01:01.000]  глобальной теории, там, на самом деле у нас даже дерево
[01:01.000 --> 01:03.360]  отрезков крайне редко вообще надо, потому что все, что
[01:03.360 --> 01:05.960]  оно умеет, умеет阿вель дерево, например.
[01:11.400 --> 01:13.100]  Вот.
[01:13.100 --> 01:17.040]  Это называется, да, спорт теоретика с практиком,
[01:17.040 --> 01:18.040]  это называется.
[01:18.040 --> 01:19.040]  Да.
[01:19.040 --> 01:20.120]  Потому что да, авель дерево вот так..
[01:20.120 --> 01:22.120]  Да, да, на поверх, да, на поверх.
[01:22.120 --> 01:23.760]  Да, то есть на поверх куда с одной стороны.
[01:23.760 --> 01:27.760]  АВЛ прекрасно пишется, я надеюсь к концу к дедлайну вы в этом прекрасно убедитесь.
[01:27.760 --> 01:32.760]  Теоретически вам можно написать на контесте, это не означает, что вы его будете на 5 часов дуэй.
[01:32.760 --> 01:38.760]  Да, но проблема даже не в этом, даже если убрать там конкретный какой-то там экзотический спорт,
[01:38.760 --> 01:42.760]  в котором кто-то из вас там случайно занимается, допустим, да.
[01:42.760 --> 01:44.760]  Писто случайно, да.
[01:44.760 --> 01:46.760]  Ну вот. О, ты занимаешься керлингом?
[01:46.760 --> 01:47.760]  Пока нет.
[01:47.760 --> 01:52.760]  Пока это обнадеживает. Эх, я бы тоже когда-то так мог сказать.
[01:52.760 --> 01:53.760]  Ну ладно.
[01:53.760 --> 01:57.760]  Ой. Ну да, да. А потом чемпионат мира перестали показывать на ютубе.
[01:57.760 --> 01:59.760]  Да, обидно стало, да.
[01:59.760 --> 02:01.760]  Вот. Значит, да.
[02:01.760 --> 02:03.760]  Но тут проблема действительно в том, что да.
[02:03.760 --> 02:08.760]  Конечно, использовать AVL-дерево там под задачей решать деревоотресков немножко глуповато,
[02:08.760 --> 02:11.760]  просто потому что деревоотресков А, проще пишется,
[02:11.760 --> 02:14.760]  Б, что самое главное, констант у него, конечно, лучше.
[02:14.760 --> 02:17.760]  Вот. А у Фенрика еще лучше.
[02:17.760 --> 02:21.760]  Поэтому, конечно, можно говорить о структуре данных,
[02:21.760 --> 02:27.760]  которая с точки зрения практики, наверное, пишет там, проще пишется и быстрее работает.
[02:27.760 --> 02:32.760]  Правда, к сожалению, про нее нельзя сказать, что он умеет даже то же самое, что деревоотресков,
[02:32.760 --> 02:37.760]  потому что массовое, скажем, присваивание наотрески деревоотресков,
[02:37.760 --> 02:41.760]  у дерева Фенрика полномочия тут, как вы сами понимаете, все.
[02:41.760 --> 02:45.760]  Правда, вот прибавление наотрески, как это ни странно,
[02:45.760 --> 02:48.760]  дерево Фенрика прекрасно кушает.
[02:48.760 --> 02:51.760]  Потому что это можно делать без массовых операций.
[02:51.760 --> 02:53.760]  Ну, на самом деле, да.
[02:53.760 --> 02:56.760]  Вот, в общем-то, массовое дерево, там какой-нибудь двумерный,
[02:56.760 --> 03:01.760]  или там какой-нибудь, знаете, хит-сезон, конечно, двумерные деревоотресков,
[03:01.760 --> 03:04.760]  конечно, на самом деле, может оказаться сложнее, чем двумерные дерево Фенрика.
[03:04.760 --> 03:07.760]  Хотя как сложнее, они на самом деле одинаковые.
[03:07.760 --> 03:10.760]  Вот. Ну, в этом все, в общем, мы попробуем убедиться.
[03:10.760 --> 03:12.760]  Да, стой.
[03:17.760 --> 03:21.760]  Вот тут мы будем аккуратны в терминологии, на всякий случай.
[03:21.760 --> 03:24.760]  Потому что я вам сразу скажу, то, что мы сегодня будем называть деревом Федрика,
[03:24.760 --> 03:29.760]  деревом Федрика, деревья Фенрика, это не является там двумерным деревом Федрика.
[03:29.760 --> 03:34.760]  Да, там немножко будут разные технологии, но это, конечно, чисто терминологический вопрос.
[03:34.760 --> 03:38.760]  Вот. То есть у нас будет идея в том, что будем и заведем дерево Фенрика
[03:38.760 --> 03:40.760]  в каждой ячейке, в которой находятся деревы Фенрика,
[03:40.760 --> 03:43.760]  но при этом эти деревья на разные размеры.
[03:43.760 --> 03:47.760]  Вот. Мы, собственно, посмотрим, где же это возникнет.
[03:47.760 --> 03:50.760]  Вот. Но с точки зрения теории, оказывается, это тоже не без интереса,
[03:50.760 --> 03:53.760]  потому что это оказывается еще там такой альтернативный взгляд
[03:53.760 --> 03:56.760]  на то, как это все может быть устроено.
[03:56.760 --> 03:59.760]  Вот. Будьте здоровы.
[03:59.760 --> 04:02.760]  Вот так значится. Поехали. Давайте.
[04:02.760 --> 04:04.760]  Как тут вообще?
[04:04.760 --> 04:06.760]  Так. Слайд-шоу. Ну, давайте.
[04:06.760 --> 04:08.760]  А, вот так надо.
[04:08.760 --> 04:11.760]  Значит, давайте смотреть.
[04:11.760 --> 04:15.760]  Так. Ну, давайте воспоминать, чем мы из этого уже занимались.
[04:15.760 --> 04:19.760]  Вот. Ну, вот базовая задача, которую мы попытаемся сегодня решать,
[04:19.760 --> 04:23.760]  это дан массив. Допустим, в ноль индексации.
[04:25.760 --> 04:26.760]  Че?
[04:26.760 --> 04:27.760]  Яндекс-контест.
[04:27.760 --> 04:28.760]  Что Яндекс-контест?
[04:28.760 --> 04:30.760]  Пять раз за славу на пятый зашел.
[04:30.760 --> 04:32.760]  Замечательно. Замечательно.
[04:32.760 --> 04:34.760]  Обязательно вам им лекции это делать?
[04:34.760 --> 04:35.760]  Да.
[04:35.760 --> 04:36.760]  Нет.
[04:36.760 --> 04:38.760]  Вот. Итак.
[04:38.760 --> 04:41.760]  И, соответственно, хочется нам искать, допустим, сумму,
[04:41.760 --> 04:45.760]  пока просто сумму на отрезке и делать присваивание.
[04:45.760 --> 04:47.760]  Но присваивание одного элемента, да.
[04:47.760 --> 04:50.760]  То есть менять мы будем, к сожалению, только один элемент.
[04:50.760 --> 04:52.760]  Вот.
[04:52.760 --> 04:56.760]  Но зато, когда мы меняем один элемент, тут вот он есть две классические задачи.
[04:56.760 --> 05:00.760]  Искать сумму на отрезке и искать минимум на отрезке.
[05:00.760 --> 05:03.760]  Вот. Ну, в принципе, конечно, да.
[05:03.760 --> 05:06.760]  С помощью всяких там дикартовых сплей и прочих эвей,
[05:06.760 --> 05:08.760]  или, конечно, мы это все умеем делать за логарифом.
[05:08.760 --> 05:09.760]  Вот.
[05:09.760 --> 05:12.760]  Но, таки, попробуем, значит, более простые.
[05:12.760 --> 05:14.760]  Значит, что мы хотим?
[05:14.760 --> 05:15.760]  Так.
[05:15.760 --> 05:18.760]  Ну, в первую очередь мы, конечно, сосредоточимся на задаче риску,
[05:18.760 --> 05:21.760]  хотя, забегая вперед, рэмку мы тоже делать научимся.
[05:21.760 --> 05:23.760]  Вот как это не странно.
[05:23.760 --> 05:25.760]  Значит, смотрите.
[05:25.760 --> 05:27.760]  То есть мы здесь немножко подмодифицируем.
[05:27.760 --> 05:29.760]  Говорим, что вместо операции присвоить элемент,
[05:29.760 --> 05:31.760]  мы будем говорить прибавить элемент,
[05:31.760 --> 05:34.760]  потому что, в общем-то, принципиально ничего не поменять.
[05:34.760 --> 05:37.760]  Вот. То есть у нас такая модифицированная задача риску.
[05:37.760 --> 05:39.760]  Присвоить одну прибавку.
[05:39.760 --> 05:41.760]  А! В одном месте.
[05:41.760 --> 05:43.760]  В одном. Да.
[05:43.760 --> 05:45.760]  В один элемент, если быть точнее.
[05:49.760 --> 05:50.760]  Нет.
[05:50.760 --> 05:51.760]  Что?
[05:51.760 --> 05:55.760]  Ну, для минимума наоборот отрицательный.
[05:55.760 --> 05:56.760]  Да.
[05:56.760 --> 05:58.760]  Да, но мы сейчас для риску.
[05:58.760 --> 05:59.760]  Нет.
[05:59.760 --> 06:02.760]  Когда мы ищем сумму, можем прибавлять что угодно.
[06:02.760 --> 06:04.760]  Сейчас мы в этом убедимся.
[06:04.760 --> 06:05.760]  Вот.
[06:05.760 --> 06:09.760]  Значит, будем решать для массива, ну, допустим, целых чисел.
[06:09.760 --> 06:11.760]  Целость тоже не принципиально.
[06:11.760 --> 06:13.760]  Ну, соответственно, значит, что у нас тут требуется?
[06:13.760 --> 06:15.760]  Огромное количество там всего.
[06:15.760 --> 06:18.760]  Но как бы это все требует у нас о отн дополнительной памяти.
[06:18.760 --> 06:19.760]  Прошу, помните, да?
[06:19.760 --> 06:23.760]  Потому что даже в каких-то самых простых версиях там все равно
[06:23.760 --> 06:27.760]  для любого элемента вам потребуется в деревьях какая-то вершина.
[06:27.760 --> 06:29.760]  У нее должно быть хотя бы два указателя.
[06:29.760 --> 06:31.760]  Вот эти left и right.
[06:31.760 --> 06:33.760]  Ну и там дальше можно там выкручиваться как угодно.
[06:33.760 --> 06:35.760]  То есть там один бит там какой-нибудь.
[06:35.760 --> 06:37.760]  Там что-нибудь там AVL какая-нибудь или там.
[06:37.760 --> 06:41.760]  Вот иногда говорят, давайте в AVL хранить не высоту дерева, например,
[06:41.760 --> 06:45.760]  а только там разность между высотами там сосекими.
[06:45.760 --> 06:47.760]  Да, там плюс-минус один.
[06:47.760 --> 06:49.760]  И как-то там подгоняться можно так пробовать.
[06:49.760 --> 06:50.760]  Вот.
[06:50.760 --> 06:54.760]  Ну, правда, там сплитые мержи, правда, тут начинают вылетать в трубу немножко.
[06:54.760 --> 06:55.760]  Ну вот.
[06:55.760 --> 06:58.760]  Ну, по крайней мере, за идеальную там для нас асимптотику, конечно.
[06:58.760 --> 06:59.760]  Ну вот такое.
[06:59.760 --> 07:02.760]  Но так или иначе отн дополнительной памяти есть.
[07:02.760 --> 07:04.760]  Ну и там всякие еще динамические памяти есть.
[07:04.760 --> 07:08.760]  Ну, можно, понятно, там, конечно, там попытаться это оптимизировать,
[07:08.760 --> 07:12.760]  там вызывать какой-нибудь буфер, там заводить себе заранее буфер
[07:12.760 --> 07:13.760]  и там выкапывать это.
[07:13.760 --> 07:15.760]  То есть там всякое можно.
[07:15.760 --> 07:16.760]  Вот.
[07:16.760 --> 07:19.760]  Но наша структура, по крайней мере, вот в исходной простой задачи
[07:19.760 --> 07:23.760]  будет занимать едва ли не от единицы дополнительной памяти.
[07:23.760 --> 07:26.760]  Ну, потому что реально мы массив хранить не будем,
[07:26.760 --> 07:28.760]  мы будем хранить только само дерево.
[07:28.760 --> 07:31.760]  И оказывается, что там на него требуется буквально вот массив размера N
[07:31.760 --> 07:35.760]  и какой-то там может быть от единицы памяти и то необязательно.
[07:37.760 --> 07:38.760]  Вот.
[07:38.760 --> 07:40.760]  То есть сейчас вот посмотрим, как же это будет работать.
[07:42.760 --> 07:43.760]  Вот.
[07:45.760 --> 07:46.760]  Значит, работать будет так.
[07:46.760 --> 07:48.760]  Значит, у нас есть массив A.
[07:49.760 --> 07:51.760]  Значит, мы будем хранить, значит, внимание, вот тут
[07:51.760 --> 07:53.760]  классическое такое отличие, у нас будет...
[07:53.760 --> 07:55.760]  Мы заведем такой массив B,
[07:57.760 --> 07:59.760]  который мы позже будем называть массив F
[07:59.760 --> 08:01.760]  большое на самом деле.
[08:02.760 --> 08:03.760]  Вот.
[08:03.760 --> 08:05.760]  Ну ладно, раз уж кто-то в презентации написал,
[08:05.760 --> 08:06.760]  что уж нам менять, что ли.
[08:06.760 --> 08:07.760]  Вот.
[08:08.760 --> 08:10.760]  Значит, соответственно, но внимание,
[08:10.760 --> 08:12.760]  массив у нас B будет у нас со сдвигом,
[08:12.760 --> 08:15.760]  то есть у нас будет массив в один индексации.
[08:17.760 --> 08:19.760]  И после этого
[08:19.760 --> 08:20.760]  вот.
[08:22.760 --> 08:23.760]  Ну вот.
[08:23.760 --> 08:26.760]  И в этом массиве, значит, мы будем хранить
[08:26.760 --> 08:29.760]  суммы на некоторых подотресках.
[08:31.760 --> 08:33.760]  Ну что это за подотрески?
[08:33.760 --> 08:34.760]  А вот очень интересно.
[08:34.760 --> 08:37.760]  Оказывается, что в этом отрезке
[08:37.760 --> 08:40.760]  мы будем хранить сумму на, обратите внимание,
[08:40.760 --> 08:41.760]  полуинтервале.
[08:42.760 --> 08:43.760]  Видите, да?
[08:44.760 --> 08:47.760]  Полуинтервале от F, от E включительно,
[08:47.760 --> 08:49.760]  до E не включительно.
[08:52.760 --> 08:53.760]  Вот.
[08:53.760 --> 08:55.760]  Ну будет вот у нас такая приятная штука.
[08:57.760 --> 08:58.760]  Вот.
[08:58.760 --> 09:02.760]  То есть если у нас такой массив B есть,
[09:02.760 --> 09:06.760]  то можно как минимум префиксные суммы достаточно просто искать.
[09:06.760 --> 09:08.760]  То есть вот какую-нибудь там префиксную сумму
[09:08.760 --> 09:13.760]  там от 0 до E, допустим, да,
[09:13.760 --> 09:15.760]  можно теперь найти,
[09:15.760 --> 09:19.760]  просто найдя такую сумму элементов B и плюс первое,
[09:19.760 --> 09:23.760]  B, F от E плюс первое, B, F от F это и плюс первое,
[09:23.760 --> 09:24.760]  и так далее.
[09:25.760 --> 09:26.760]  Вот.
[09:26.760 --> 09:27.760]  Понята логика, да?
[09:28.760 --> 09:29.760]  Вот.
[09:29.760 --> 09:32.760]  Ну и, конечно же, если мы умеем искать префиксную сумму,
[09:32.760 --> 09:35.760]  то мы умеем, собственно, и обычную сумму искать.
[09:36.760 --> 09:39.760]  Да, потому что суммы у нас какими свойствами овладают?
[09:40.760 --> 09:41.760]  Обратимость.
[09:42.760 --> 09:44.760]  Ну да, в данном случае обратимость.
[09:44.760 --> 09:45.760]  Да.
[09:45.760 --> 09:47.760]  Да, вот эту штуку мы умеем искать,
[09:47.760 --> 09:49.760]  потому что сумма ассоциативна,
[09:49.760 --> 09:51.760]  а эту штуку умеем искать, потому что она обратима.
[09:51.760 --> 09:54.760]  Коммутативность тут, в принципе, пока ни при чем.
[09:55.760 --> 09:56.760]  То есть коммутативность нам понадобится,
[09:56.760 --> 09:58.760]  когда мы будем менять.
[10:00.760 --> 10:01.760]  Вот.
[10:01.760 --> 10:02.760]  Но для того, чтобы менять,
[10:02.760 --> 10:03.760]  сначала нам нужно понять,
[10:03.760 --> 10:05.760]  а чему равна функция F?
[10:05.760 --> 10:06.760]  Потому что самая,
[10:06.760 --> 10:07.760]  чему может быть равна функция F?
[10:07.760 --> 10:10.760]  На самом деле она может быть равна практически чему угодно,
[10:10.760 --> 10:11.760]  если мы гарантируем,
[10:11.760 --> 10:13.760]  что F от И всегда строго меньше И.
[10:14.760 --> 10:15.760]  Логично, да?
[10:16.760 --> 10:17.760]  Ну, с точки зрения того,
[10:17.760 --> 10:20.760]  чтобы, по крайней мере, находить эти префиксные суммы правильно.
[10:21.760 --> 10:23.760]  Но нам же нужно эффективно,
[10:24.760 --> 10:27.760]  потому что, в принципе, так-то можно было ввести там F от И равно
[10:28.760 --> 10:29.760]  И-1.
[10:31.760 --> 10:32.760]  Вот.
[10:32.760 --> 10:33.760]  И тогда, по большому счету,
[10:33.760 --> 10:34.760]  то есть получается массив В,
[10:34.760 --> 10:35.760]  это такой же массив А,
[10:35.760 --> 10:36.760]  только сдвинутый на единичку,
[10:36.760 --> 10:37.760]  по каким-то причинам.
[10:38.760 --> 10:39.760]  Вот.
[10:39.760 --> 10:41.760]  И получается, что чьи префиксные суммы ищутся за И.
[10:41.760 --> 10:43.760]  Ну, зато обновлять элемент легко.
[10:45.760 --> 10:46.760]  Вот.
[10:46.760 --> 10:47.760]  Можно было бы и наоборот.
[10:47.760 --> 10:50.760]  А давайте в каждом B-итам хранить E.
[10:50.760 --> 10:52.760]  Вот, допустим, F от И равно ноль.
[10:53.760 --> 10:56.760]  То есть просто в B-итам честно префиксные суммы храним.
[10:56.760 --> 10:57.760]  Ну классно.
[10:57.760 --> 10:59.760]  Тогда префиксные суммы ищутся за O от единицы.
[11:01.760 --> 11:03.760]  Правда, потом обновлять будут проблемы, да?
[11:03.760 --> 11:06.760]  Потому что, чтобы обновить И-то элемент,
[11:06.760 --> 11:07.760]  что нам надо сделать?
[11:09.760 --> 11:11.760]  Уходить по всем ответствам, которые его пересекали?
[11:11.760 --> 11:12.760]  Да.
[11:12.760 --> 11:14.760]  Ну, точнее, содержат.
[11:14.760 --> 11:15.760]  Если быть точнее.
[11:15.760 --> 11:16.760]  Да.
[11:16.760 --> 11:17.760]  Чтобы обновить.
[11:17.760 --> 11:18.760]  То есть теперь, чтобы сделать там,
[11:18.760 --> 11:20.760]  добавить И-тому элементу 57,
[11:20.760 --> 11:22.760]  надо перебрать все подотрески,
[11:22.760 --> 11:25.760]  которые содержат И-то элемент,
[11:25.760 --> 11:28.760]  и ко всем их суммам прибавить 57.
[11:29.760 --> 11:30.760]  Вот.
[11:30.760 --> 11:32.760]  Но хочется, конечно, это делать как-то эффективно.
[11:33.760 --> 11:37.760]  И вот тут начинается немножко битовой магии.
[11:39.760 --> 11:40.760]  Вот.
[11:40.760 --> 11:43.760]  Потому что по каким-то вот мистическим причинам
[11:43.760 --> 11:45.760]  вот сидел товарищ Фенвик, думал.
[11:45.760 --> 11:47.760]  Да, Фенвик это реальная фамилия, естественно,
[11:47.760 --> 11:48.760]  как вы догадываетесь.
[11:48.760 --> 11:50.760]  Собственно даже статья есть.
[11:50.760 --> 11:51.760]  Вот.
[11:52.760 --> 11:54.760]  То есть шаманим, шаманим, шаманим, шаманим.
[11:54.760 --> 11:58.760]  И оказывается мистическое определение.
[11:58.760 --> 12:02.760]  Да, тут официально какая-то магия,
[12:02.760 --> 12:05.760]  а значит она на самом деле маленькую простую вещь.
[12:05.760 --> 12:09.760]  Мы берем двоичную запись числа,
[12:11.760 --> 12:14.760]  берем самый младший единичный бит,
[12:14.760 --> 12:15.760]  то есть самый правый,
[12:15.760 --> 12:17.760]  и обнуляем его.
[12:20.760 --> 12:23.760]  Вот таково у нас будет определение функции Ф.
[12:24.760 --> 12:28.760]  Просто убить последний единичный бит.
[12:28.760 --> 12:29.760]  Ну, Ф от нуля так и быть,
[12:29.760 --> 12:31.760]  напишем нулю, хотя Ф от нуля нам
[12:31.760 --> 12:33.760]  может быть нам даже правильнее было бы считать,
[12:33.760 --> 12:35.760]  что Ф от нуля не определено.
[12:36.760 --> 12:37.760]  Вот.
[12:38.760 --> 12:39.760]  Соответственно.
[12:41.760 --> 12:42.760]  Ну тогда.
[12:43.760 --> 12:44.760]  И даже вот.
[12:45.760 --> 12:47.760]  То есть как бы правильнее считать,
[12:47.760 --> 12:48.760]  что оно не определено,
[12:48.760 --> 12:51.760]  и там в реальном коде уже писать,
[12:51.760 --> 12:53.760]  если вы там пытаетесь вычислить Ф от нуля,
[12:53.760 --> 12:56.760]  значит там кинуть какое-то исключение.
[12:57.760 --> 12:59.760]  Ну или вызапить каким-то другим способом.
[12:59.760 --> 13:00.760]  Вот.
[13:02.760 --> 13:04.760]  Ну тогда, значит, чем приятна эта функция?
[13:04.760 --> 13:05.760]  Да.
[13:05.760 --> 13:06.760]  Но эта функция приятна тем, конечно,
[13:06.760 --> 13:10.760]  что получается префиксную сумму от элемента,
[13:10.760 --> 13:13.760]  и вы найдете за какое время?
[13:17.760 --> 13:18.760]  Ну это да, верно.
[13:18.760 --> 13:19.760]  Да.
[13:19.760 --> 13:20.760]  Точная оценка, конечно,
[13:20.760 --> 13:24.760]  это количество единичных бит в числе каком?
[13:26.760 --> 13:27.760]  Совершенно верно.
[13:27.760 --> 13:28.760]  И плюс один.
[13:28.760 --> 13:29.760]  И плюс один.
[13:29.760 --> 13:30.760]  Право.
[13:30.760 --> 13:31.760]  Да.
[13:31.760 --> 13:32.760]  Вот.
[13:33.760 --> 13:35.760]  В среднем примерно будет попало.
[13:36.760 --> 13:37.760]  Ну да.
[13:37.760 --> 13:38.760]  Если не кидается рандомно,
[13:38.760 --> 13:39.760]  то да.
[13:39.760 --> 13:40.760]  Вот.
[13:40.760 --> 13:41.760]  Ну вот.
[13:41.760 --> 13:42.760]  Не, ну это тоже неплохо вообще.
[13:42.760 --> 13:43.760]  Вот.
[13:43.760 --> 13:44.760]  Ну правда, тут еще, конечно,
[13:44.760 --> 13:46.760]  константа еще будет зависеть от того,
[13:46.760 --> 13:48.760]  а как вообще эту Ф вычислять?
[13:49.760 --> 13:50.760]  Ну да.
[13:50.760 --> 13:51.760]  Желательно за быстро.
[13:51.760 --> 13:52.760]  Ну как за быстро?
[13:52.760 --> 13:55.760]  Ну за вот единицу ее вычислить достаточно легко.
[13:55.760 --> 13:57.760]  Ну, например, предподсчитав ее
[13:57.760 --> 13:58.760]  я всех чисел от 0 до n.
[14:00.760 --> 14:01.760]  А вы не можете сказать,
[14:01.760 --> 14:03.760]  что операции с машинными словами
[14:03.760 --> 14:04.760]  работают за один день?
[14:05.760 --> 14:06.760]  Можем.
[14:06.760 --> 14:07.760]  Но для этого надо просто подумать.
[14:07.760 --> 14:09.760]  Просто они буквально за один работают.
[14:09.760 --> 14:11.760]  То есть это наша единица измерения.
[14:11.760 --> 14:12.760]  Нет, безусловно, да.
[14:12.760 --> 14:13.760]  Но там да.
[14:13.760 --> 14:14.760]  Да, безусловно верно,
[14:14.760 --> 14:16.760]  то, что функция на самом деле вычисляется
[14:16.760 --> 14:18.760]  напрямую с помощью битовых операций.
[14:18.760 --> 14:20.760]  Мы чуть позже даже обсудим как конкретно.
[14:21.760 --> 14:22.760]  Да.
[14:22.760 --> 14:23.760]  Но как бы, смотрите,
[14:23.760 --> 14:24.760]  пока мы просто,
[14:24.760 --> 14:26.760]  пока мы временно оставим этот вопрос,
[14:26.760 --> 14:28.760]  просто пока временно удовлетворившись тем,
[14:28.760 --> 14:30.760]  что там как-нибудь за вот единицы это вычисляется.
[14:32.760 --> 14:33.760]  Вот.
[14:34.760 --> 14:35.760]  Итак.
[14:35.760 --> 14:37.760]  Значит, как же нам теперь вычислять?
[14:38.760 --> 14:39.760]  Ну вот.
[14:39.760 --> 14:40.760]  Но как же теперь вот вычислять этот?
[14:41.760 --> 14:43.760]  Вот возникает маленькая проблема.
[14:45.760 --> 14:46.760]  Вот.
[14:47.760 --> 14:49.760]  Ну, здесь действительно все, казалось бы, просто.
[14:49.760 --> 14:50.760]  Действительно.
[14:51.760 --> 14:53.760]  То есть нужно просто увеличить на дэйта все такие,
[14:53.760 --> 14:55.760]  такие бриты, что, значит, FAT меньше либо равно
[14:56.760 --> 14:58.760]  индексов, которые мы обновляем, там меньше.
[14:59.760 --> 15:00.760]  Вот.
[15:01.760 --> 15:02.760]  Так.
[15:02.760 --> 15:04.760]  Но дальше вот начинается черная магия.
[15:06.760 --> 15:07.760]  Так.
[15:07.760 --> 15:08.760]  Дальше там написан какой-то текст.
[15:09.760 --> 15:11.760]  Давайте-ка я лучше достану доску
[15:11.760 --> 15:13.760]  и попробую, собственно, прямо
[15:13.760 --> 15:15.760]  просто наглядно показать на картинке,
[15:15.760 --> 15:16.760]  о чем он значит.
[15:17.760 --> 15:18.760]  Так.
[15:19.760 --> 15:20.760]  Значит, смотрите.
[15:20.760 --> 15:21.760]  Ой.
[15:27.760 --> 15:28.760]  А, там уже все понятно, да?
[15:29.760 --> 15:30.760]  Так.
[15:31.760 --> 15:32.760]  Значит, ну давайте думать.
[15:33.760 --> 15:36.760]  Жило было какое-нибудь рандомное число индекса.
[15:38.760 --> 15:41.760]  До какого-то момента оно, ну то есть оно бесконечно влево,
[15:42.760 --> 15:43.760]  но там бесконечное число нулей.
[15:44.760 --> 15:45.760]  А вот количество единиц?
[15:46.760 --> 15:47.760]  Конечно.
[15:48.760 --> 15:49.760]  Вот.
[15:50.760 --> 15:51.760]  Ну тут вот.
[15:52.760 --> 15:53.760]  Вот так вот.
[15:54.760 --> 15:55.760]  Ой.
[15:56.760 --> 16:03.760]  Значит, тут получается 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0.
[16:04.760 --> 16:05.760]  Так.
[16:06.760 --> 16:07.760]  Итак, что мы теперь хотим?
[16:08.760 --> 16:11.760]  Мы хотим найти какое-то, какие-то числа И, а желательно все,
[16:12.760 --> 16:15.760]  чтобы FAT было меньше либо равно индекса,
[16:16.760 --> 16:18.760]  индекс был строго меньше, чем И.
[16:20.760 --> 16:21.760]  Вот понятно, да?
[16:22.760 --> 16:23.760]  Так.
[16:24.760 --> 16:25.760]  Ну давайте думать.
[16:26.760 --> 16:28.760]  Что означает, что И строго больше индекса?
[16:29.760 --> 16:34.760]  Это означает, что мы идем, идем, идем, идем слева-направо идем
[16:35.760 --> 16:37.760]  и биты И и индекса совпадают.
[16:39.760 --> 16:41.760]  До какого-то момента.
[16:42.760 --> 16:44.760]  А в какой-то момент они впервые не совпадают.
[16:45.760 --> 16:47.760]  Но в тот момент, когда они не совпадают,
[16:47.760 --> 16:48.760]  в тот момент, когда они не совпадают,
[16:49.760 --> 16:53.760]  неожиданно выясняется, что раз И больше, значит и в И бит должен быть больше.
[16:54.760 --> 16:56.760]  Но единственный вариант, это когда у нас в И тут единичка,
[16:57.760 --> 16:58.760]  а в индексе в этом месте стоит 0.
[16:59.760 --> 17:01.760]  Пока логично вроде, да?
[17:02.760 --> 17:03.760]  Вот.
[17:04.760 --> 17:05.760]  Так.
[17:06.760 --> 17:07.760]  Ну теперь думаем.
[17:08.760 --> 17:09.760]  Чему должен быть равен FAT?
[17:10.760 --> 17:12.760]  Ну у него 0 должен быть в этом месте.
[17:13.760 --> 17:14.760]  Вот, да.
[17:15.760 --> 17:16.760]  Ведь действительно смотрим, что FAT.
[17:17.760 --> 17:19.760]  Пока существует эта единица,
[17:20.760 --> 17:22.760]  заметим, что FAT вот эти биты по-любому не тронет.
[17:23.760 --> 17:27.760]  Потому что эта единица, может последняя, может нет,
[17:28.760 --> 17:29.760]  но может последняя где-то правее.
[17:30.760 --> 17:32.760]  Но уж эти единицы точно не последние.
[17:33.760 --> 17:34.760]  Поэтому пишем тут.
[17:35.760 --> 17:36.760]  Тут все как бы красиво-красиво-красиво.
[17:37.760 --> 17:38.760]  Так.
[17:39.760 --> 17:40.760]  Ну а теперь следующий вопрос.
[17:41.760 --> 17:42.760]  Ну это следующий момент.
[17:43.760 --> 17:45.760]  Но теперь заметим, что если я тут напишу единицу,
[17:45.760 --> 17:48.760]  то тогда получится, что FAT тоже строго больше индекса.
[17:49.760 --> 17:50.760]  Правда?
[17:51.760 --> 17:52.760]  Пока логично, да?
[17:53.760 --> 17:54.760]  Так.
[17:55.760 --> 17:57.760]  Но получается единицу тут написать нельзя.
[17:58.760 --> 17:59.760]  Так нельзя, значит пишем 0.
[18:00.760 --> 18:02.760]  Так, но получается, что конкретно в этом бите получается
[18:03.760 --> 18:04.760]  и FAT отличаются.
[18:05.760 --> 18:06.760]  Но вывод очень простой.
[18:07.760 --> 18:09.760]  Это означает, что справа от этого элемента
[18:10.760 --> 18:12.760]  все биты числа i равны 0.
[18:15.760 --> 18:16.760]  Вот.
[18:17.760 --> 18:19.760]  Ну и FAT автоматически тоже, да.
[18:20.760 --> 18:21.760]  Совершенно верно.
[18:22.760 --> 18:25.760]  Это единственный вариант вообще, который нас может устроить.
[18:26.760 --> 18:27.760]  Так.
[18:28.760 --> 18:30.760]  Что же это все означает?
[18:31.760 --> 18:33.760]  Так, означает это маленькую приятную вещь.
[18:34.760 --> 18:35.760]  То есть это означает, что как...
[18:36.760 --> 18:41.760]  То есть необходимые условия для того, чтобы i подходило нам.
[18:42.760 --> 18:43.760]  То есть должно быть так.
[18:43.760 --> 18:47.760]  То есть мы должны взять индекс, взять у него какой-то нулевой бит,
[18:48.760 --> 18:51.760]  заменить его на единицу, а все справа заменить на нули.
[18:52.760 --> 18:56.760]  То есть вот i должно быть таким, чтобы, может быть, оно было хорошим.
[18:57.760 --> 19:00.760]  Правда, на самом деле это не только необходимые условия,
[19:01.760 --> 19:02.760]  но очевидно и достаточно.
[19:03.760 --> 19:06.760]  Потому что FAT от индекса будет отличаться тем,
[19:07.760 --> 19:09.760]  что мы как будто просто начиная с какого-то момента
[19:10.760 --> 19:11.760]  все биты занулили.
[19:11.760 --> 19:14.760]  Но обратите внимание, число могло, кстати, вообще не поменяться,
[19:15.760 --> 19:16.760]  если тут единиц не было вообще.
[19:17.760 --> 19:19.760]  Вот, здорово.
[19:20.760 --> 19:21.760]  Так.
[19:22.760 --> 19:23.760]  Ну вот.
[19:24.760 --> 19:25.760]  Но правда возникает вопрос.
[19:26.760 --> 19:27.760]  Вот.
[19:28.760 --> 19:29.760]  Есть.
[19:30.760 --> 19:31.760]  Вот.
[19:32.760 --> 19:33.760]  Вопрос какой?
[19:34.760 --> 19:35.760]  А сколько подходящих чисел i вообще есть?
[19:36.760 --> 19:37.760]  И как их найти?
[19:37.760 --> 19:39.760]  Нужны i, которые не больше, чем i большое.
[19:40.760 --> 19:42.760]  Кажется столько нулевых битов.
[19:43.760 --> 19:45.760]  Так, а сколько у нас нулевых битов в числе?
[19:46.760 --> 19:47.760]  Десять.
[19:48.760 --> 19:49.760]  Стас, совершенно верно.
[19:50.760 --> 19:53.760]  Да, обратите внимание, что на самом деле подходящих i для любого индекса
[19:54.760 --> 19:55.760]  бесконечно много.
[19:56.760 --> 19:57.760]  Ура!
[19:58.760 --> 19:59.760]  Есть.
[20:00.760 --> 20:01.760]  Но мы не на Питоне пишем, поэтому и в 60.
[20:02.760 --> 20:03.760]  Или сколько?
[20:04.760 --> 20:05.760]  64.
[20:05.760 --> 20:06.760]  Но это работает не по такой логике.
[20:07.760 --> 20:08.760]  Тут работает по логике.
[20:09.760 --> 20:10.760]  Действительно, заметим, что i-то нам нужны действительно не все,
[20:11.760 --> 20:12.760]  а только те, которые не превосходят n.
[20:13.760 --> 20:14.760]  Вот.
[20:15.760 --> 20:21.760]  Но тогда очевидно, что количество подходящих i не превосходит логарифма.
[20:22.760 --> 20:28.760]  А точнее не превосходит количество нулевых бит в числе индекс,
[20:29.760 --> 20:34.760]  если дописывать все нули, в степени двойки которых не превосходят, собственно, числа n.
[20:36.760 --> 20:37.760]  Вот так вот.
[20:38.760 --> 20:39.760]  Так.
[20:40.760 --> 20:41.760]  Но остается только вот маленький вопрос.
[20:42.760 --> 20:43.760]  Как же их аккуратненько вычислить?
[20:44.760 --> 20:46.760]  Ну, для того, чтобы их аккуратненько...
[20:47.760 --> 20:48.760]  Так, интересно, может там следующий...
[20:49.760 --> 20:53.760]  Ой, нет, дальше я писать не буду, потому что у меня в следующем слайде, наверное, все красиво написано.
[20:54.760 --> 20:55.760]  Вот.
[20:56.760 --> 20:57.760]  О, Господи.
[20:58.760 --> 20:59.760]  Внезапно, да?
[21:02.760 --> 21:03.760]  Да.
[21:03.760 --> 21:04.760]  Ну, тут вот да.
[21:05.760 --> 21:07.760]  Нет, тут на самом деле просто написано то, что я тут сказал, по большому счету, да.
[21:08.760 --> 21:09.760]  Вот.
[21:11.760 --> 21:12.760]  Вот.
[21:13.760 --> 21:14.760]  Значит, ну теперь оказывается следующее.
[21:15.760 --> 21:16.760]  Что если мы...
[21:17.760 --> 21:19.760]  То есть оказывается на самом деле следующее.
[21:20.760 --> 21:22.760]  Рассмотрим какой-нибудь вот первый попавшийся число индекс, да?
[21:23.760 --> 21:24.760]  Ну, там немножко другое, но вот.
[21:25.760 --> 21:27.760]  И тогда рассмотрим все числа, которые нам нужны.
[21:28.760 --> 21:29.760]  Вот давайте пока вот этот столбец я вот так вот закрою, да?
[21:30.760 --> 21:31.760]  Вот.
[21:31.760 --> 21:32.760]  И давайте смотреть.
[21:33.760 --> 21:35.760]  То есть у нас первое число, это вот действительно берем,
[21:36.760 --> 21:39.760]  заединичиваем вот этот нолик и обнуляем все справа.
[21:40.760 --> 21:44.760]  Потом берем вот этот нолик, заединичиваем его, обнуляем все справа.
[21:45.760 --> 21:47.760]  Берем этот нолик, тоже там единица справа, ну и так далее.
[21:49.760 --> 21:54.760]  Ну, легко заметить, что первое число, которое мы берем, это всегда просто вот это число плюс один, правда?
[21:55.760 --> 21:59.760]  Ну, кстати, если бы тут в конце стоял нолик, то как бы этот нолик мы на 1 заменяли, в общем, очень удобно.
[22:00.760 --> 22:01.760]  Вот.
[22:02.760 --> 22:09.760]  А каждое следующее число, а каждое следующее число на самом деле идет,
[22:10.760 --> 22:13.760]  зависит только от предыдущего, устроено очень простым образом.
[22:14.760 --> 22:20.760]  Мы находим последнюю единичку, находим этот непрерывный блок с этой единичкой,
[22:21.760 --> 22:26.760]  смотрим на нолик перед ними и объединичиваем этот нолик, а остальное за нулями.
[22:27.760 --> 22:31.760]  Вот видно, да, что вот каждое следующее ровно так и устроено.
[22:32.760 --> 22:33.760]  Вот.
[22:35.760 --> 22:41.760]  Ну вот и так у нас естественным образом возникает функция G.
[22:45.760 --> 22:47.760]  Вот. То есть вот так мы ее и определим.
[22:48.760 --> 22:49.760]  Вот давайте прыгаем.
[22:49.760 --> 22:57.760]  G от положительных целых чисел, это функция, которая делает вот эту капсу.
[22:59.760 --> 23:00.760]  Вот.
[23:01.760 --> 23:08.760]  То есть если мы откуда-то эту G научимся вычислять, то тогда модифицировать дерево нам будет достаточно легко.
[23:08.760 --> 23:09.760]  Вот.
[23:10.760 --> 23:15.760]  Но на следующем слайде мы видим, как на самом деле с помощью битовых операций эту штуку вообще вычислять.
[23:18.760 --> 23:19.760]  Вот.
[23:20.760 --> 23:26.760]  Но здесь немножко магии, да, то есть действительно если рассмотрим число И, там рассмотрим число И-1,
[23:28.760 --> 23:34.760]  вот, и быстренько обнаружим, что для того, чтобы занулить последнюю единичку, мы будем вычислять,
[23:34.760 --> 23:38.760]  и быстренько обнаружим, что для того, чтобы занулить последний единичный бит,
[23:39.760 --> 23:41.760]  на самом деле нужно просто написать вот такое мистическое заклинание.
[23:45.760 --> 23:46.760]  Видно почему, да?
[23:47.760 --> 23:52.760]  Ну потому что да, смотрите, то есть как бы вычитание единички как бы зануляет последний единичный бит,
[23:53.760 --> 23:55.760]  но объединичивает все стоящие справа от него нули.
[23:56.760 --> 24:01.760]  Ну вот, но если вы берете N этих чисел, то у вас тогда получается, что единичка занулилась,
[24:01.760 --> 24:05.760]  единичка занулилась, все справа тоже занулилась, все остальное не поменялось, то что на 0.
[24:06.760 --> 24:07.760]  Очень удобно.
[24:09.760 --> 24:10.760]  Вот.
[24:11.760 --> 24:15.760]  Но если вы вместо N-да возьмете OR, то наоборот, получится, что последний блок нулей,
[24:16.760 --> 24:18.760]  ну, возможно, пустой, кстати, заединичится.
[24:21.760 --> 24:22.760]  Вот.
[24:23.760 --> 24:26.760]  И тогда оказывается, что если вы к этой штуке прибавите 1, то получится ровно функция G,
[24:27.760 --> 24:28.760]  ну и таким образом вот формулы есть.
[24:31.760 --> 24:32.760]  Вот.
[24:33.760 --> 24:39.760]  Так что да, тут, ну тут, конечно, ну вот, то есть на самом деле тут, конечно, по-разному можно мыслить.
[24:40.760 --> 24:41.760]  Вот.
[24:42.760 --> 24:44.760]  То есть получается, что F и G у нас вот так вычислились.
[24:45.760 --> 24:50.760]  Но на самом деле, конечно, отметим, да, в презентации этого нету, но на самом деле можно еще,
[24:51.760 --> 24:54.760]  вот нам еще пригодится рассматривать и функции немножко по-другому.
[24:54.760 --> 24:57.760]  То есть на самом деле в этом месте целесообразно ввести функцию H.
[25:00.760 --> 25:04.760]  Где H от И, это будет просто 2 в степени, угадайте, какой?
[25:05.760 --> 25:06.760]  Младший единичный бит.
[25:07.760 --> 25:08.760]  Да.
[25:09.760 --> 25:10.760]  Ну давайте так и напишем.
[25:11.760 --> 25:14.760]  Младший единичный бит числа И.
[25:15.760 --> 25:16.760]  Вот так.
[25:17.760 --> 25:18.760]  Вот.
[25:19.760 --> 25:20.760]  Вот.
[25:21.760 --> 25:22.760]  Вот.
[25:22.760 --> 25:23.760]  Вот так.
[25:26.760 --> 25:27.760]  Вот.
[25:28.760 --> 25:31.760]  Если вы правильно понимаете, что это, то становится очевиден, очевиден маленький приятный факт,
[25:32.760 --> 25:36.760]  что F от И это на самом деле тождественно равно И минус H от И.
[25:39.760 --> 25:40.760]  Удобно, правда?
[25:41.760 --> 25:42.760]  Вот.
[25:43.760 --> 25:44.760]  Но.
[25:45.760 --> 25:46.760]  Вот.
[25:47.760 --> 25:48.760]  Чуть менее очевидно, но даже более красиво.
[25:49.760 --> 25:50.760]  Оказывается, еще больше магия.
[25:51.760 --> 25:55.760]  G от И это всегда И плюс H от И.
[26:00.760 --> 26:01.760]  Вот.
[26:02.760 --> 26:06.760]  Ну да, по большому счету, да, легко убедиться, что вот это, что мы говорили про последний блок единичек,
[26:07.760 --> 26:08.760]  на самом деле это вот буквально это мы и делаем.
[26:09.760 --> 26:13.760]  Да, к сожалению, у меня нет красивой интерпретации действительно,
[26:14.760 --> 26:17.760]  из каких глобальных, красивых соображений это сразу глобально взялось.
[26:17.760 --> 26:21.760]  То есть просто пока вот, то есть просто рассматривали функции F и G и вот заметили, что.
[26:22.760 --> 26:23.760]  Да, так получилось.
[26:24.760 --> 26:25.760]  Вот.
[26:26.760 --> 26:27.760]  Почему?
[26:28.760 --> 26:29.760]  Не знаю.
[26:30.760 --> 26:31.760]  Вот.
[26:32.760 --> 26:33.760]  Ну вот.
[26:34.760 --> 26:35.760]  Это было F, это было G.
[26:36.760 --> 26:37.760]  Вот.
[26:38.760 --> 26:39.760]  Ну и соответственно H можно там пытаться отдельно вычислять,
[26:40.760 --> 26:42.760]  но правда тут дальше аккуратно надо делать, действовать, конечно.
[26:43.760 --> 26:46.760]  Потому что на самом деле, да, тут сразу возникает вопрос,
[26:47.760 --> 26:49.760]  как с помощью битвах операций вычислить функцию H.
[26:50.760 --> 26:52.760]  Ну можно вычислять F и потом вычислить.
[26:53.760 --> 26:54.760]  Ну да.
[26:55.760 --> 26:56.760]  Но тут на самом деле аккуратный момент.
[26:57.760 --> 26:58.760]  Тут смотрите, какой аккуратный момент есть.
[26:59.760 --> 27:05.760]  Потому что, с одной стороны, да, тупой вариант для нас, конечно, И минус F, а ты, который мы напрямую вычислять умеем.
[27:06.760 --> 27:07.760]  Так, есть кто живой?
[27:09.760 --> 27:10.760]  Вот.
[27:11.760 --> 27:12.760]  Значит, смотрите.
[27:14.760 --> 27:15.760]  Ну вот.
[27:15.760 --> 27:23.760]  Но, с другой стороны, потому что на каких-нибудь этих ваших E-max очень любят вычислять что-то типа H, а ты
[27:26.760 --> 27:30.760]  там с помощью каких-то формул типа E и минус E.
[27:31.760 --> 27:32.760]  Ну да.
[27:39.760 --> 27:40.760]  Это внезапно, да?
[27:40.760 --> 27:41.760]  Ну вот.
[27:42.760 --> 27:43.760]  Ну, скажем так.
[27:44.760 --> 27:45.760]  Ну, на самом, а я тоже так скажу.
[27:46.760 --> 27:49.760]  С точки зрения стандарта C++, кстати, эта магия не работает.
[27:50.760 --> 27:54.760]  Это, капиллятор же не, нет стандарта, как капиллятор хранит числа.
[27:55.760 --> 27:56.760]  Он может хранить их в любой запас.
[27:57.760 --> 27:58.760]  Капиллятор их не хранит.
[27:59.760 --> 28:00.760]  Нет, ну там нет.
[28:01.760 --> 28:02.760]  Да.
[28:03.760 --> 28:08.760]  Нет, стандарта C++ говорит, насколько я помню, следующее, что не отрицательные целые числа хранятся адекватно.
[28:08.760 --> 28:14.760]  Обычные там инты хранятся, пока они не отрицательные, хранятся тоже адекватно.
[28:15.760 --> 28:20.760]  Вроде и соответствуется явно, что у нас, как это называется, дополнительная форма записи для отрицательных интов.
[28:21.760 --> 28:26.760]  Да, а вот по-моему в стандарте это не прописано, что возможно по-другому.
[28:27.760 --> 28:34.760]  Да, конечно, с вероятностью 99.9999999 у нас целые числа, отрицательные числа используют дополнительные.
[28:34.760 --> 28:39.760]  9999999 у нас целые числа, отрицательные числа используют дополнительную форму записи.
[28:40.760 --> 28:43.760]  А как мы бы складывали числа, если это было бы не всегда так?
[28:44.760 --> 28:48.760]  Ну, возможно существовала бы другая архитектура, которая делала бы это как-то красиво.
[28:49.760 --> 28:50.760]  Ну или не красиво.
[28:51.760 --> 28:53.760]  Так что философский вопрос. Ну да, давайте напомню на всякий случай.
[28:54.760 --> 28:57.760]  То есть действительно, что тут имеется в виду?
[28:57.760 --> 29:04.760]  Имеется в виду следующее. Допустим, у нас число 0 обычно записывается как сколько-то нулевых бит.
[29:05.760 --> 29:08.760]  Ну давайте я пока 8-битное число напишу, хотя суть везде одинаковая.
[29:09.760 --> 29:19.760]  Там 0, значит это у нас 1, 2, это у нас 0000010, там 3, там это 000001.
[29:20.760 --> 29:23.760]  То есть как бы честно в битовой записи 1 прибавляем и хорошо.
[29:24.760 --> 29:27.760]  Вот. Ну и так мы идем до 127.
[29:28.760 --> 29:35.760]  Где у нас тут? То есть мы тогда идем до соответственно 0 и 111111111111.
[29:37.760 --> 29:40.760]  Вот. То есть что такое дополнительная форма записи?
[29:41.760 --> 29:42.760]  Ну она предлагает следующее.
[29:43.760 --> 29:46.760]  То есть давайте вот по этой логике просто пойдем не только вперед, но и назад.
[29:47.760 --> 29:49.760]  И скажем, что если у нас минус 1, давайте тут единичку вычтем.
[29:49.760 --> 29:56.760]  Ну будем вычитать, вычитаем ее с переносом, переносом, переносом, переносом, переносом, переносом, перенос, вылез, вау, мы говорим окей.
[29:58.760 --> 30:01.760]  Вот. То есть вот так хранится минус 1.
[30:02.760 --> 30:08.760]  Вот. Соответственно минус 2, значит получается 111111110.
[30:09.760 --> 30:14.760]  Да. 1111110. Слушайте, а поднимите руки ради интереса.
[30:15.760 --> 30:18.760]  А кто когда-нибудь был в олимпиадных школах по информатике?
[30:19.760 --> 30:21.760]  Нет. Именно олимпиадных школах. Тут важная сейчас.
[30:22.760 --> 30:23.760]  Которая наша, да.
[30:24.760 --> 30:25.760]  Да. Так и будет.
[30:26.760 --> 30:27.760]  Ага. Так. Окей.
[30:28.760 --> 30:33.760]  Так. А кто был когда-нибудь на лекциях Снарка?
[30:35.760 --> 30:37.760]  А. Из вас никто, да?
[30:39.760 --> 30:40.760]  Ну окей. Нет. Просто жалко.
[30:41.760 --> 30:44.760]  Ну это логично, потому что он обычно рассказывает там в самой младшей группе.
[30:45.760 --> 30:47.760]  Но при этом он очень любит рассказывать вот эту.
[30:48.760 --> 30:49.760]  В самой младшей группе?
[30:50.760 --> 30:54.760]  Нет. Он там конечно не рассказывает Фенлика, естественно.
[30:55.760 --> 30:59.760]  Но он рассказывает. Но как бы там же есть же такая там тема как типы данных.
[31:00.760 --> 31:03.760]  Вот. Но он собственно и рассказывает, собственно как они устроены.
[31:04.760 --> 31:09.760]  Вот. Поэтому просто на всякий случай так, что возможно от него вы еще могли все это знать.
[31:10.760 --> 31:13.760]  Вот. Но вы с ним не пересеклись в этом месте. Окей.
[31:14.760 --> 31:15.760]  Нет. Так-то да.
[31:16.760 --> 31:17.760]  Хотя да. Кто был в олимпиадных школах?
[31:18.760 --> 31:21.760]  Ну понятно, что да. В олимпиадных школах скорее всего были там чуть менее чем все.
[31:22.760 --> 31:23.760]  Или нет?
[31:24.760 --> 31:26.760]  Ну-ка поднимите руки, кто никогда не был ни в одной олимпиадной школе.
[31:27.760 --> 31:28.760]  Нет. Вот на этот раз да.
[31:29.760 --> 31:31.760]  Ни в ЛКШ не был. Ни в наших олимпиадных школах.
[31:32.760 --> 31:33.760]  Ни в инополисе там каком-нибудь. Или еще что-то в этом.
[31:34.760 --> 31:35.760]  Серьезно считается?
[31:36.760 --> 31:37.760]  Конечно.
[31:38.760 --> 31:39.760]  Господи.
[31:40.760 --> 31:41.760]  Как вы это сделали?
[31:42.760 --> 31:43.760]  Просто да.
[31:44.760 --> 31:45.760]  Мастовские сборы считаются?
[31:46.760 --> 31:47.760]  Нет.
[31:48.760 --> 31:49.760]  А вы из Беларуси?
[31:50.760 --> 31:51.760]  Нет.
[31:52.760 --> 31:53.760]  Хотя в Беларуси тоже школы есть.
[31:54.760 --> 31:55.760]  Нет. Они-то везде есть.
[31:56.760 --> 31:57.760]  Господи. Как вы это сделали вообще?
[32:01.760 --> 32:02.760]  Ну окей.
[32:03.760 --> 32:05.760]  Человек сидит на оке, он по жизни самостоятельно.
[32:06.760 --> 32:07.760]  Правильно. Ну да.
[32:08.760 --> 32:09.760]  Окей.
[32:10.760 --> 32:11.760]  А вы с Кена на Мальсармении не знакомы случайно?
[32:12.760 --> 32:13.760]  Нет.
[32:14.760 --> 32:15.760]  Нет. Но нет. Это просто вот тоже.
[32:16.760 --> 32:17.760]  Нет. Просто еще один студент МФ3.
[32:18.760 --> 32:19.760]  Вот тоже, который никогда никуда не ездил.
[32:20.760 --> 32:21.760]  И все изучал самостоятельно.
[32:22.760 --> 32:23.760]  Называйте уровень финалист чемпионата мира.
[32:24.760 --> 32:25.760]  Опистиха.
[32:26.760 --> 32:27.760]  Вот.
[32:28.760 --> 32:29.760]  Ну хотя да. Мало вероятно, что вы с ним пересеклись.
[32:30.760 --> 32:31.760]  Да. Уже.
[32:32.760 --> 32:33.760]  Вот. Окей.
[32:34.760 --> 32:35.760]  Хорошо.
[32:36.760 --> 32:37.760]  Да.
[32:37.760 --> 32:38.760]  Ну да. Действительно.
[32:39.760 --> 32:40.760]  Зачем эти школы ездить?
[32:41.760 --> 32:42.760]  Реально.
[32:43.760 --> 32:44.760]  Только время тратить.
[32:45.760 --> 32:46.760]  Так.
[32:47.760 --> 32:48.760]  Так вот.
[32:49.760 --> 32:50.760]  Вернемся к делу.
[32:51.760 --> 32:52.760]  Чем удобна вообще такая запись?
[32:53.760 --> 32:54.760]  Казалось бы, что-то очень сложно.
[32:55.760 --> 32:56.760]  Минус один, вот это, минус два.
[32:57.760 --> 32:58.760]  Это как-то перекореживаться.
[32:59.760 --> 33:00.760]  К компьютеру, когда он перчатает число на экран,
[33:01.760 --> 33:02.760]  приходится еще что-то как-то думать.
[33:03.760 --> 33:05.760]  Как переводить вот это в дистичную систему
[33:05.760 --> 33:06.760]  и так далее.
[33:07.760 --> 33:08.760]  Особенно, когда тут 32 бита, 64.
[33:09.760 --> 33:11.760]  Но о этой штуке, конечно, есть очевидное преимущество.
[33:12.760 --> 33:15.760]  Потому что по большому счету заметим, что в каждый момент времени
[33:16.760 --> 33:19.760]  мы в числе храним остаток отделения числа на 256,
[33:20.760 --> 33:22.760]  ну или там два в степени количества бит.
[33:23.760 --> 33:24.760]  И при этом губилеатор все равно,
[33:25.760 --> 33:27.760]  но то, по-моему, считает остаток промазанной.
[33:28.760 --> 33:29.760]  Ну.
[33:30.760 --> 33:31.760]  Да.
[33:32.760 --> 33:33.760]  Все плюс-плюси, да.
[33:33.760 --> 33:35.760]  Ну, почему-то там так приписали.
[33:36.760 --> 33:37.760]  Да.
[33:38.760 --> 33:40.760]  Хотя в какой-нибудь питоне, как вы помните,
[33:41.760 --> 33:43.760]  минус два процент пять равно вполне себе три.
[33:44.760 --> 33:45.760]  Да.
[33:46.760 --> 33:47.760]  Да.
[33:48.760 --> 33:50.760]  Да-да-да-да.
[33:51.760 --> 33:52.760]  Если питон, да.
[33:53.760 --> 33:54.760]  Если питон еще и быстро работал, конечно.
[33:55.760 --> 33:56.760]  Но что делать?
[33:57.760 --> 33:58.760]  Ну вот, здесь просто оказывается удобно,
[33:59.760 --> 34:01.760]  что если мы вместо каждого числа храним остаток по модулю два в степени,
[34:01.760 --> 34:04.760]  то складывать, вычитать и умножать становится легко и приятно.
[34:05.760 --> 34:09.760]  Также легко заметить, что как стануть теперь in consint into?
[34:10.760 --> 34:11.760]  Что надо сделать с числом?
[34:12.760 --> 34:13.760]  Да, правильно.
[34:14.760 --> 34:15.760]  Ничего.
[34:16.760 --> 34:17.760]  Просто поставить пометку, что он теперь не знаковое число,
[34:18.760 --> 34:19.760]  а безнаковое, биты те же.
[34:20.760 --> 34:21.760]  Очень удобно.
[34:22.760 --> 34:23.760]  Вот, действительно.
[34:24.760 --> 34:25.760]  Поэтому, конечно, скорее всего,
[34:26.760 --> 34:30.760]  такую систему встретите с вероятностью 99.99999999%
[34:31.760 --> 34:36.760]  и тогда вот в этом предположении может работать функция h вот такая.
[34:37.760 --> 34:40.760]  Ладно, а разве g++ явно не прописано, что это должно быть?
[34:41.760 --> 34:42.760]  Нет.
[34:43.760 --> 34:45.760]  Нет, там в явном виде прописано, что...
[34:46.760 --> 34:48.760]  Что в стабилитаре плюсов это не прописано,
[34:49.760 --> 34:50.760]  может g++ это всегда так, извините?
[34:51.760 --> 34:52.760]  Ну, это интересно.
[34:53.760 --> 34:54.760]  Это как?
[34:55.760 --> 34:56.760]  В смысле, что комбинатор конкретно говорит, что это так?
[34:57.760 --> 34:58.760]  В смысле, что комбинатор говорит, что у меня всегда так,
[34:59.760 --> 35:00.760]  или он используется на всех линкадах всегда?
[35:01.760 --> 35:03.760]  Нет, погоди, я боюсь, что это дело не в g++,
[35:04.760 --> 35:07.760]  а дело в том, что в какой архитектуре у вас, собственно, это все вычисляется.
[35:08.760 --> 35:11.760]  Потому что вычисление, то, что я описываю, это не компилятор c++.
[35:12.760 --> 35:15.760]  Это как бы зависит от архитектуры компьютера.
[35:16.760 --> 35:18.760]  Потому что как бы там всякие непосредственно сложения битовых чисел,
[35:19.760 --> 35:22.760]  у вас там все-таки зашиты там на аппаратном уровне практически.
[35:23.760 --> 35:26.760]  То есть там какие-то там буквально едва ли не схемы там спаяны.
[35:27.760 --> 35:29.760]  Поэтому на самом деле это не от компилятора зависит.
[35:30.760 --> 35:31.760]  Вот, то есть скорее всего архитектуры.
[35:32.760 --> 35:33.760]  Да, то есть там понятно, что какая-то там условная там,
[35:34.760 --> 35:37.760]  какое-то умное словосочетание гарвардская архитектура там, по-моему,
[35:38.760 --> 35:39.760]  или вот что-то в этом роде.
[35:40.760 --> 35:41.760]  То есть она там встречается чуть менее там практически всегда.
[35:42.760 --> 35:43.760]  Но там, возможно, там все остальное прописали,
[35:44.760 --> 35:47.760]  потому что теоретически возможны другие архитектуры,
[35:48.760 --> 35:50.760]  а мы должны быть там толерантные, соответственно, и все такое.
[35:51.760 --> 35:52.760]  Вот.
[35:53.760 --> 35:54.760]  А вот.
[35:55.760 --> 35:56.760]  Но, соответственно.
[35:57.760 --> 35:58.760]  Да.
[35:59.760 --> 36:01.760]  Поэтому дело тут вообще не в компиляторе.
[36:02.760 --> 36:03.760]  Вот.
[36:04.760 --> 36:05.760]  Но если вот в это поверить, да.
[36:06.760 --> 36:08.760]  Но там подробнее на самом деле вы все это на окосе будете изучать на самом деле.
[36:09.760 --> 36:10.760]  Это знаете, если мы поверим в другие архитектуры,
[36:11.760 --> 36:12.760]  у нас вот это все в целом ломается,
[36:13.760 --> 36:15.760]  потому что нам берут какие-нибудь троичные числа вместо дворечных и все.
[36:16.760 --> 36:17.760]  А, ну.
[36:18.760 --> 36:19.760]  Да, да.
[36:20.760 --> 36:21.760]  Нет, ну почему?
[36:22.760 --> 36:23.760]  Ну да.
[36:24.760 --> 36:25.760]  Ну не знаю.
[36:26.760 --> 36:27.760]  Но вот такой тонкий момент,
[36:28.760 --> 36:29.760]  чтобы почему-то про беззнаковые числа
[36:30.760 --> 36:31.760]  уже даже компилятор C++ все-таки верит,
[36:32.760 --> 36:33.760]  что там все адекватно устроено, поэтому.
[36:34.760 --> 36:35.760]  Вот.
[36:36.760 --> 36:37.760]  Ну да.
[36:38.760 --> 36:39.760]  Или, по крайней мере, он будет гарантировать,
[36:40.760 --> 36:41.760]  что беззнаковые числа,
[36:42.760 --> 36:43.760]  то есть для беззнаковых чисел есть вот эти вот все битвы-операции.
[36:44.760 --> 36:45.760]  Да, битвы-энд, битвы-или,
[36:46.760 --> 36:47.760]  то есть да, может быть, конечно,
[36:48.760 --> 36:50.760]  там просто в других архитектурах эта операция будет как-то плохо работать.
[36:51.760 --> 36:52.760]  Ну вот.
[36:53.760 --> 36:54.760]  Ну там как-то понятно, что, знаете,
[36:54.760 --> 36:55.760]  чтобы сделать битвы-энд,
[36:56.760 --> 36:57.760]  вам придется перегнать число из троичного вида в двоичный,
[36:58.760 --> 36:59.760]  сделать энд, перегнать его обратно, там вот это все.
[37:00.760 --> 37:01.760]  Но,
[37:02.760 --> 37:03.760]  ну вот.
[37:04.760 --> 37:05.760]  Но здесь, видимо, все-таки считается,
[37:06.760 --> 37:07.760]  что, ну, скорее всего, ну как-то странно, да, это у вас.
[37:08.760 --> 37:09.760]  Ну в смысле и здесь как-то странно, что такое вообще-то.
[37:10.760 --> 37:11.760]  Ну да.
[37:12.760 --> 37:13.760]  Ну вот.
[37:14.760 --> 37:15.760]  Но факт остается фактом.
[37:16.760 --> 37:17.760]  Так написано в стандарте.
[37:18.760 --> 37:19.760]  Вы же помните, в стандарте много удивлений, да,
[37:20.760 --> 37:21.760]  потому что в конце концов как-то тут почему сет реализован так,
[37:22.760 --> 37:23.760]  что, например, как каты порядка,
[37:24.760 --> 37:25.760]  ну вот.
[37:26.760 --> 37:27.760]  Вот так договорились по каким-то причинам.
[37:28.760 --> 37:29.760]  Вот.
[37:30.760 --> 37:31.760]  Да.
[37:32.760 --> 37:33.760]  Ну понятно, да, что причина, конечно, да.
[37:34.760 --> 37:35.760]  То есть, видимо, решили, что всем одновременно неугодимая эффективность
[37:36.760 --> 37:37.760]  хоть какая-то должна быть, да,
[37:38.760 --> 37:39.760]  а для всех остальных существует оргнорецепт.
[37:40.760 --> 37:41.760]  Но такие потом уже кто-то допилил,
[37:42.760 --> 37:43.760]  то это пока неофициально.
[37:44.760 --> 37:46.760]  То есть это как бы вот реально там гнушная подхачка.
[37:47.760 --> 37:48.760]  Да, не гнусная, а гнушная, да, понимаете.
[37:49.760 --> 37:50.760]  Вот.
[37:51.760 --> 37:52.760]  А.
[37:53.760 --> 37:54.760]  Что бы я знал.
[37:55.760 --> 37:56.760]  Нет.
[37:57.760 --> 37:58.760]  Что-то не стандартирует.
[37:59.760 --> 38:00.760]  Как бы мы что-то работаем с безнаковыми числами,
[38:01.760 --> 38:02.760]  и у них не будет работать.
[38:03.760 --> 38:05.760]  У них есть много разных идей.
[38:06.760 --> 38:07.760]  Ну, не знаю.
[38:08.760 --> 38:09.760]  Нет.
[38:10.760 --> 38:11.760]  Возможно, через 20 недель придет какая-то крутая идея,
[38:12.760 --> 38:13.760]  а у тебя уже все карты написаны.
[38:14.760 --> 38:15.760]  Нет, почему отрицательные?
[38:16.760 --> 38:17.760]  Нет, для безнакових чисел нет минуса.
[38:18.760 --> 38:19.760]  У тебя этот трюк работает, типа.
[38:20.760 --> 38:21.760]  У тебя же по идее для безнаковых чисел минус
[38:22.760 --> 38:23.760]  ты должен в плане взять отрицательное само у себя.
[38:24.760 --> 38:25.760]  Да, есть определенное читание в чисел,
[38:26.760 --> 38:27.760]  которое может быть сделано как-то внутри.
[38:28.760 --> 38:29.760]  Нет, подожди.
[38:30.760 --> 38:31.760]  Ты можешь написать,
[38:32.760 --> 38:33.760]  минус size t равно минус один.
[38:34.760 --> 38:35.760]  Это каст.
[38:36.760 --> 38:37.760]  Нет, это да, но он кастанет,
[38:38.760 --> 38:39.760]  и получится там,
[38:40.760 --> 38:41.760]  и получится там,
[38:42.760 --> 38:43.760]  называется, max size t, да.
[38:44.760 --> 38:45.760]  В смысле, выход на каком языке пишете,
[38:46.760 --> 38:47.760]  на плюсах, вроде как можно отрицательные брать.
[38:48.760 --> 38:49.760]  Нет, ну там просто,
[38:50.760 --> 38:51.760]  нет, если вы возьмете
[38:52.760 --> 38:53.760]  там unsigned things, там a,
[38:54.760 --> 38:55.760]  и напишете равно минус один,
[38:56.760 --> 38:57.760]  то это просто будет каст.
[38:58.760 --> 38:59.760]  Это не явный каст.
[39:00.760 --> 39:01.760]  Он вызывает функцию.
[39:02.760 --> 39:03.760]  Эта функция может ничего не делать,
[39:04.760 --> 39:05.760]  если она не нормальная.
[39:06.760 --> 39:07.760]  А, все, я понял.
[39:08.760 --> 39:09.760]  Нет, потому что я сказал,
[39:10.760 --> 39:11.760]  что просто вот,
[39:12.760 --> 39:13.760]  как бы теоретически просто можно вычитать fg
[39:14.760 --> 39:15.760]  вот таким вот образом,
[39:16.760 --> 39:17.760]  но это работает только вот в этом жестком предположении.
[39:18.760 --> 39:19.760]  Хорошо, можно написать size t0
[39:19.760 --> 39:20.760]  minus size ti.
[39:21.760 --> 39:26.760]  И это с точки зрения стандарта кажется...
[39:27.760 --> 39:28.760]  Ну, как сказать,
[39:29.760 --> 39:30.760]  ну будет переполнение,
[39:31.760 --> 39:32.760]  но дальше уже надо,
[39:33.760 --> 39:34.760]  да, настолько глубоко в стандарт,
[39:35.760 --> 39:36.760]  это уже не ко мне.
[39:37.760 --> 39:38.760]  Переполнение безнаковых, это точно нормально.
[39:39.760 --> 39:40.760]  Это нормально.
[39:41.760 --> 39:42.760]  Переполнение безнаковых, да.
[39:43.760 --> 39:44.760]  Окей.
[39:45.760 --> 39:46.760]  Но это переполнение нот.
[39:47.760 --> 39:48.760]  Нет, ну просто это означает,
[39:49.760 --> 39:50.760]  что примерно так,
[39:51.760 --> 39:52.760]  только там число минус один
[39:53.760 --> 39:54.760]  не называется числом минус один,
[39:55.760 --> 39:56.760]  потому что беззнаковое.
[39:57.760 --> 39:58.760]  А вот int могут быть устроены как угодно.
[39:59.760 --> 40:00.760]  В int может это уже работать не будет.
[40:01.760 --> 40:02.760]  Мы же не гарантируем,
[40:03.760 --> 40:04.760]  что у нас число минус один
[40:05.760 --> 40:06.760]  в беззнаковом типе устроено как все единицы.
[40:07.760 --> 40:08.760]  Это стандарты не гарантируют.
[40:09.760 --> 40:10.760]  Нет.
[40:11.760 --> 40:12.760]  Так, минус один в беззнаковом типе
[40:13.760 --> 40:14.760]  не устроен никак,
[40:15.760 --> 40:16.760]  по определению словосочетания беззнаковый тип.
[40:17.760 --> 40:18.760]  Хорошо, мы гарантируем,
[40:19.760 --> 40:20.760]  я бы не гарантировал.
[40:21.760 --> 40:22.760]  Ну я скажу так, я бы не гарантировал,
[40:23.760 --> 40:24.760]  но опять...
[40:25.760 --> 40:26.760]  Если стандарт гарантирует,
[40:27.760 --> 40:28.760]  что минус один это максимально,
[40:29.760 --> 40:30.760]  то почему мы обсуждаем,
[40:31.760 --> 40:32.760]  как конец социализации?
[40:33.760 --> 40:34.760]  Это на питание будешь писать?
[40:35.760 --> 40:36.760]  Сказали, что это не гарантируется стандартом,
[40:37.760 --> 40:38.760]  это гарантируется стандартом.
[40:39.760 --> 40:40.760]  Если в вас статикаст, то да.
[40:41.760 --> 40:42.760]  Нет, беззнаковый...
[40:43.760 --> 40:44.760]  Если мы гарантируем,
[40:45.760 --> 40:46.760]  что минус один переходит в максимум ССТ,
[40:47.760 --> 40:48.760]  тогда...
[40:49.760 --> 40:50.760]  То есть ноль беззнакового типа,
[40:51.760 --> 40:52.760]  минус один.
[40:53.760 --> 40:54.760]  Да хорош уже, блин.
[40:55.760 --> 40:56.760]  Ну хорошо, ладно.
[40:57.760 --> 40:58.760]  По-хорошему говоря,
[40:59.760 --> 41:00.760]  эти все вопросы лучше сегодня,
[41:01.760 --> 41:02.760]  ближе к вечеру обсуждать с Мещегеном,
[41:03.760 --> 41:04.760]  собственно, на лекциях по С++.
[41:05.760 --> 41:06.760]  Вопросов того, что написано в стандарте,
[41:07.760 --> 41:08.760]  он, я думаю, компетентнее меня.
[41:11.760 --> 41:12.760]  О, Господи.
[41:13.760 --> 41:14.760]  Вот.
[41:15.760 --> 41:16.760]  Ладно, поэтому пока
[41:17.760 --> 41:18.760]  просто понаслаждаемся
[41:19.760 --> 41:20.760]  как классическим.
[41:21.760 --> 41:22.760]  Ну, почти.
[41:26.760 --> 41:27.760]  Не, ну конечно,
[41:28.760 --> 41:30.760]  классическим для условных там СИШников,
[41:31.760 --> 41:32.760]  которые не очень любят вектора.
[41:33.760 --> 41:34.760]  Да, потому что, да,
[41:35.760 --> 41:36.760]  как можно писать себе дерево фермика,
[41:37.760 --> 41:38.760]  если вы не любите.
[41:39.760 --> 41:40.760]  Соответственно, если...
[41:45.760 --> 41:46.760]  Не, ну нормально.
[41:47.760 --> 41:48.760]  Не, ну как сказать,
[41:49.760 --> 41:50.760]  СИС классами, да,
[41:51.760 --> 41:52.760]  какое-нибудь такое, да.
[41:53.760 --> 41:54.760]  Что?
[41:55.760 --> 41:56.760]  Где аллокатор?
[41:57.760 --> 41:58.760]  А что?
[41:59.760 --> 42:00.760]  А у нас уже
[42:01.760 --> 42:02.760]  New Delete не работает?
[42:03.760 --> 42:04.760]  Не, ну да.
[42:05.760 --> 42:06.760]  С этой точки зрения,
[42:07.760 --> 42:08.760]  а где шаблоны?
[42:09.760 --> 42:10.760]  Почему интернет там,
[42:11.760 --> 42:12.760]  какой-нибудь template там,
[42:13.760 --> 42:14.760]  по этой логике.
[42:15.760 --> 42:16.760]  Вообще-то да.
[42:17.760 --> 42:18.760]  Не, не надо.
[42:19.760 --> 42:20.760]  Это просто тщательные решения,
[42:21.760 --> 42:22.760]  которые решили написать дерево фермика.
[42:23.760 --> 42:24.760]  У нас тут все просто, да.
[42:25.760 --> 42:26.760]  Вот.
[42:27.760 --> 42:28.760]  Вот, так соответственно, да,
[42:29.760 --> 42:30.760]  мы тут завели массив размера N3S1.
[42:31.760 --> 42:32.760]  Да, ну допоминаю, что обнуляется массив,
[42:33.760 --> 42:34.760]  кстати, вот таким приятным способом.
[42:35.760 --> 42:36.760]  А если мы верим в ту архитектуру,
[42:37.760 --> 42:38.760]  то, кстати, очень удобно,
[42:39.760 --> 42:40.760]  на самом деле, в массе там заполнять
[42:41.760 --> 42:42.760]  массив N-тов числами минус 1.
[42:45.760 --> 42:46.760]  Для этого нужно просто вместо нуля
[42:47.760 --> 42:48.760]  написать, соответственно,
[42:49.760 --> 42:50.760]  вот.
[42:51.760 --> 42:52.760]  Вот.
[42:53.760 --> 42:54.760]  Ну, потому что да.
[42:55.760 --> 42:56.760]  Потому что тут указывается,
[42:57.760 --> 42:58.760]  как бы, проверить по всем байтам
[42:59.760 --> 43:00.760]  вот этого диапазона
[43:01.760 --> 43:02.760]  и в каждой из них запиши вот это.
[43:03.760 --> 43:04.760]  Вот.
[43:05.760 --> 43:06.760]  Так, ну и дальше, оказывается,
[43:07.760 --> 43:08.760]  действительно, код оказывается,
[43:09.760 --> 43:10.760]  действительно, как-то вот очень красиво устроен.
[43:11.760 --> 43:12.760]  Вот, ну да.
[43:13.760 --> 43:14.760]  А если вы еще на Олимпиаде,
[43:15.760 --> 43:16.760]  то там всяких вот этих вот вещей
[43:17.760 --> 43:18.760]  вообще писать не надо.
[43:20.760 --> 43:21.760]  А здесь нигде.
[43:22.760 --> 43:23.760]  Мы использовали только F и G.
[43:24.760 --> 43:25.760]  Кстати, эта презентация не знает
[43:26.760 --> 43:27.760]  о существовании функции H.
[43:28.760 --> 43:29.760]  Почему?
[43:30.760 --> 43:31.760]  Где?
[43:32.760 --> 43:33.760]  Нет, презентация об этом не знает.
[43:34.760 --> 43:35.760]  Презентация знает только функции F и G.
[43:36.760 --> 43:37.760]  Про H это я вот потом, это я вот
[43:38.760 --> 43:39.760]  отдельно рассказываю, да.
[43:40.760 --> 43:41.760]  То есть как бы презентация старая,
[43:42.760 --> 43:43.760]  там потом как бы, знаете, данные
[43:44.760 --> 43:45.760]  обновлялись, соответственно,
[43:46.760 --> 43:47.760]  и так далее.
[43:48.760 --> 43:49.760]  Сейчас, как?
[43:50.760 --> 43:51.760]  Чего еще раз, как пройдет?
[43:52.760 --> 43:53.760]  Ну, мы не обсудили, почему,
[43:54.760 --> 43:56.760]  если мы будем проходить по функции F и G
[43:57.760 --> 43:58.760]  и так прибавлять,
[43:59.760 --> 44:01.760]  то тогда у нас будет корректно.
[44:02.760 --> 44:03.760]  Обсудили, ну как,
[44:04.760 --> 44:05.760]  обсудили примерно еще в этом месте.
[44:06.760 --> 44:07.760]  А, да.
[44:08.760 --> 44:09.760]  Ну как бы, ну как, логично,
[44:10.760 --> 44:11.760]  потому что, да, мы храним вариант на пол.
[44:12.760 --> 44:13.760]  Ладно, давайте, краткое содержание
[44:14.760 --> 44:15.760]  предыдущих серий, а то что-то мы тут
[44:15.760 --> 44:16.760]  оставляем.
[44:17.760 --> 44:18.760]  Чем мы занимаемся?
[44:19.760 --> 44:20.760]  Мы занимаемся тем, что у нас вот
[44:21.760 --> 44:22.760]  есть дерево, которое в этой ячейке
[44:23.760 --> 44:24.760]  хранит сумму чисел от F от и включительно,
[44:25.760 --> 44:26.760]  да и не включительно.
[44:27.760 --> 44:28.760]  Прям на уровне определения,
[44:29.760 --> 44:30.760]  где F это там, типа, вот такая функция.
[44:31.760 --> 44:32.760]  Ну ладно, мы сказали, что это функция,
[44:33.760 --> 44:34.760]  которая там обнуляет последний,
[44:35.760 --> 44:36.760]  младший единичный бит, ну потом выяснили,
[44:37.760 --> 44:38.760]  что она вот так вот вычисляется, да.
[44:39.760 --> 44:40.760]  Ну и понятно, говорим, что
[44:41.760 --> 44:42.760]  префиксную сумму вот так
[44:43.760 --> 44:44.760]  найти можно.
[44:45.760 --> 44:46.760]  Потому что с таким вариантом
[44:47.760 --> 44:48.760]  уж точно она ровно так и ищется.
[44:49.760 --> 44:50.760]  Вот.
[44:51.760 --> 44:52.760]  А дальше мы, вот, то есть дальше
[44:53.760 --> 44:54.760]  у нас было аккуратно, что мы там
[44:55.760 --> 44:56.760]  сидели, аккуратно говорили, что если
[44:57.760 --> 44:58.760]  вы хотим там обновить, допустим,
[44:59.760 --> 45:00.760]  элемент номер индекс, то нам нужно
[45:01.760 --> 45:03.760]  перебрать все и такие, что F от и
[45:04.760 --> 45:05.760]  меньше, либо равно индекса меньше и,
[45:06.760 --> 45:07.760]  и ко всем этим суммам прибавить дельта,
[45:08.760 --> 45:09.760]  потому что такие суммы увеличились
[45:10.760 --> 45:11.760]  на дельта, а все остальные нет.
[45:12.760 --> 45:13.760]  Вот. И мы вот аккуратно доказали,
[45:13.760 --> 45:14.760]  ну вот действительно, что оказывается,
[45:15.760 --> 45:16.760]  эти все подходящие и перебираются
[45:17.760 --> 45:18.760]  ровно таким нехитрым способом.
[45:19.760 --> 45:20.760]  Да, вот это вот эта функция
[45:21.760 --> 45:22.760]  G от индекса, на самом деле.
[45:23.760 --> 45:24.760]  То есть тут можно написать,
[45:25.760 --> 45:26.760]  индекс равно G от индекса.
[45:27.760 --> 45:28.760]  Так что нет, тут мы вполне себе все
[45:29.760 --> 45:30.760]  обсудили.
[45:31.760 --> 45:32.760]  Вот.
[45:33.760 --> 45:34.760]  Итак.
[45:35.760 --> 45:36.760]  Но замечаем,
[45:37.760 --> 45:38.760]  да, пока, ну вот, то есть это вот все
[45:39.760 --> 45:40.760]  красиво работает,
[45:40.760 --> 45:41.760]  но теперь попробуем это как-то обобщить.
[45:42.760 --> 45:43.760]  Потому что, заметим, что,
[45:44.760 --> 45:45.760]  то есть можно, конечно, подсовывать любые
[45:46.760 --> 45:47.760]  какие-то типы, любые там бинарную
[45:48.760 --> 45:49.760]  операцию с ними,
[45:50.760 --> 45:51.760]  ну как любую, но правда, это любая
[45:52.760 --> 45:53.760]  операция должна обладать жесткими
[45:54.760 --> 45:55.760]  свойствами.
[45:56.760 --> 45:57.760]  Как бы, чтобы найти хотя бы,
[45:58.760 --> 45:59.760]  чей префиксную сумму нужна
[46:00.760 --> 46:01.760]  ассоциативность,
[46:02.760 --> 46:03.760]  чтобы работал файн сумм
[46:04.760 --> 46:05.760]  с помощью там префиксной суммы
[46:06.760 --> 46:07.760]  минус префиксной суммы,
[46:07.760 --> 46:08.760]  нужна обратимость,
[46:09.760 --> 46:10.760]  а чтобы работал add,
[46:11.760 --> 46:12.760]  очевидно, нужна еще и коммутативность
[46:13.760 --> 46:14.760]  сверху.
[46:15.760 --> 46:16.760]  Потому что мы прибавляем
[46:17.760 --> 46:18.760]  это, то, что нужно добавить,
[46:19.760 --> 46:20.760]  абсолютно рандомный момент времени.
[46:21.760 --> 46:22.760]  Вот.
[46:23.760 --> 46:24.760]  Ну, видимо, не момент времени.
[46:25.760 --> 46:26.760]  Но сначала мы вычисляем всю сумму,
[46:27.760 --> 46:28.760]  а потом еще вот это.
[46:29.760 --> 46:30.760]  Ну, как бы в конце к нему
[46:31.760 --> 46:32.760]  прибавляем.
[46:33.760 --> 46:34.760]  Ну, как бы в конце к нему
[46:35.760 --> 46:36.760]  прибавляем.
[46:37.760 --> 46:38.760]  Для того, чтобы работала
[46:39.760 --> 46:40.760]  вот эта вот типа
[46:41.760 --> 46:42.760]  сумма на подотреске,
[46:43.760 --> 46:44.760]  это сумма на префиксе,
[46:45.760 --> 46:46.760]  минус сумма на префиксе.
[46:47.760 --> 46:48.760]  Вот тут обратимости есть,
[46:49.760 --> 46:50.760]  вот это знак минус.
[46:51.760 --> 46:52.760]  Вот.
[46:53.760 --> 46:54.760]  Значит, то спрашивается,
[46:55.760 --> 46:56.760]  можно ли как-то ославить требования?
[46:57.760 --> 46:58.760]  Деревоотресков лучше чем.
[46:59.760 --> 47:00.760]  Деревоотресков работает, как вы помните,
[47:01.760 --> 47:02.760]  для абсолютно любой ассоциативной операции.
[47:03.760 --> 47:04.760]  Да.
[47:05.760 --> 47:06.760]  То есть коммутативность не нужна,
[47:07.760 --> 47:08.760]  я вообще не знаю структуры данных,
[47:09.760 --> 47:10.760]  которые работают с не ассоциативными операциями,
[47:11.760 --> 47:12.760]  если честно.
[47:13.760 --> 47:14.760]  То есть, потому что все оптимизации
[47:15.760 --> 47:16.760]  все-таки как бы все, что там,
[47:17.760 --> 47:18.760]  все структуры данных все-таки там,
[47:19.760 --> 47:20.760]  которые ищут как-то быстро суммы
[47:21.760 --> 47:22.760]  на каких-то подотресках,
[47:23.760 --> 47:24.760]  они по-любому базируются на том,
[47:25.760 --> 47:26.760]  что суммы на некоторых подотресках
[47:27.760 --> 47:28.760]  вы в том или ином виде храните.
[47:29.760 --> 47:30.760]  Ну, а какие у нас вообще есть
[47:31.760 --> 47:32.760]  осмысленные не ассоциативные операции?
[47:33.760 --> 47:34.760]  Можно рассчитать прыжки на корень
[47:35.760 --> 47:36.760]  типа из каждого индаста,
[47:37.760 --> 47:38.760]  но если операция не ассоциативна,
[47:39.760 --> 47:40.760]  то это все как бы не поможет.
[47:41.760 --> 47:42.760]  А, черт, да, блин, ладно.
[47:43.760 --> 47:44.760]  Вот тут и проблема, да.
[47:45.760 --> 47:46.760]  Ну, можно рассчитать на всех подотресках,
[47:47.760 --> 47:48.760]  а потом отдельно.
[47:49.760 --> 47:50.760]  Ну, разве что.
[47:51.760 --> 47:52.760]  Но это не структура данных,
[47:53.760 --> 47:54.760]  это полный предподсчет.
[47:55.760 --> 47:56.760]  Нет, дадаем в степени 5 в треть.
[47:57.760 --> 47:58.760]  Делим на блоки по...
[47:59.760 --> 48:00.760]  Да.
[48:01.760 --> 48:02.760]  Если мы потом компонуем эти блоки,
[48:03.760 --> 48:04.760]  то мы опять делим на блоки по...
[48:05.760 --> 48:06.760]  Да.
[48:07.760 --> 48:08.760]  То есть мы опять требуем ассоциативность.
[48:09.760 --> 48:11.760]  Нет, мы из каждого индаста насчитываем.
[48:12.760 --> 48:13.760]  Ага.
[48:14.760 --> 48:15.760]  Ага.
[48:16.760 --> 48:17.760]  Вообще из каждого.
[48:18.760 --> 48:19.760]  Это точно не квадрат.
[48:20.760 --> 48:21.760]  Из каждого, но при этом таких отрезков
[48:22.760 --> 48:23.760]  самих, типа корень.
[48:24.760 --> 48:25.760]  Ну, допустим, хорошо.
[48:26.760 --> 48:27.760]  Ну, окей, ладно.
[48:28.760 --> 48:29.760]  Можно повыкручиваться.
[48:30.760 --> 48:31.760]  Да.
[48:32.760 --> 48:33.760]  Ну, окей, ладно, пойдемте дальше.
[48:34.760 --> 48:35.760]  Итак, перейдем к дереву Фенрика.
[48:35.760 --> 48:36.760]  Дереву Фенрика.
[48:37.760 --> 48:38.760]  Более известному как встречное дерево Фенрика,
[48:39.760 --> 48:41.760]  в котором от операции используется только ассоциативность.
[48:42.760 --> 48:43.760]  Ну, как и нот.
[48:44.760 --> 48:45.760]  Ну, и у нас есть...
[48:46.760 --> 48:47.760]  Ну, в первую очередь мы, конечно, будем работать с операцией минимум,
[48:48.760 --> 48:49.760]  хотя хоть она и коммутативна.
[48:50.760 --> 48:51.760]  Но на самом деле...
[48:52.760 --> 48:53.760]  Ну, вот.
[48:54.760 --> 48:55.760]  Она, конечно, коммутативна, но она так немножко полукоммутативна
[48:56.760 --> 48:57.760]  с нашей точки зрения.
[48:58.760 --> 48:59.760]  Что я имею в виду?
[49:00.760 --> 49:02.760]  Потому что заметим, что прибавить к элементу что-то,
[49:03.760 --> 49:04.760]  если мы ищем минимум на подотрезке,
[49:05.760 --> 49:06.760]  то мы не можем.
[49:07.760 --> 49:10.760]  Вот, потому что если мы там к какому-то элементу прибавили 5,
[49:11.760 --> 49:12.760]  то на всех подотрезках, в которых он лежит,
[49:13.760 --> 49:15.760]  минимум на 5 увеличиваться не обязан.
[49:16.760 --> 49:17.760]  Логично, да?
[49:18.760 --> 49:19.760]  Вот.
[49:20.760 --> 49:22.760]  Значит, мы теперь будем работать так.
[49:23.760 --> 49:27.760]  Значит, выясняется, что раз у нас F и G так красиво симметрично устроены,
[49:28.760 --> 49:30.760]  так давайте-ка хранить два массива.
[49:31.760 --> 49:32.760]  Мы будем хранить массив ТФ.
[49:33.760 --> 49:34.760]  Ну, это было то же, что было раньше.
[49:35.760 --> 49:38.760]  А также будем хранить массив ТЖ.
[49:39.760 --> 49:40.760]  Вот.
[49:41.760 --> 49:42.760]  Ладно, на поверхную я вам даже больше скажу.
[49:43.760 --> 49:44.760]  Тут написана такая интерпретация,
[49:45.760 --> 49:46.760]  но в реальности мы ТЖ от нуля хранить даже не будем,
[49:47.760 --> 49:48.760]  оно нам не понадобится никогда.
[49:49.760 --> 49:52.760]  У нас просто Ж от нуля толком не определено, правда, поэтому...
[49:53.760 --> 49:55.760]  Ж от нуля определено.
[49:56.760 --> 49:57.760]  Ж от нуля? Нет.
[49:58.760 --> 49:59.760]  А, сейчас.
[50:00.760 --> 50:02.760]  Тут написано, что до определим,
[50:03.760 --> 50:04.760]  но это скорее под хак.
[50:05.760 --> 50:06.760]  А, да.
[50:07.760 --> 50:08.760]  То есть, на самом деле, это разный способ навести марафет.
[50:09.760 --> 50:10.760]  Хотя, может быть, правильнее было бы сказать,
[50:11.760 --> 50:13.760]  что давайте Ж от нуля не определим и будем следить за тем,
[50:14.760 --> 50:15.760]  что мы Ж от нуля никогда вызывать не будем.
[50:16.760 --> 50:17.760]  Вот.
[50:18.760 --> 50:19.760]  Значит, смотрите.
[50:20.760 --> 50:21.760]  Значит, что же...
[50:22.760 --> 50:25.760]  Ну, будем говорить, что каждая такая структура будет хранить себе минимум,
[50:26.760 --> 50:28.760]  ну или там, мистическую операцию ИТЬ
[50:29.760 --> 50:32.760]  от полуинтервала LR.
[50:32.760 --> 50:34.760]  Ну, полуинтервал, он либо F от RR,
[50:35.760 --> 50:37.760]  либо L Ж от L, соответственно.
[50:38.760 --> 50:39.760]  Вот.
[50:40.760 --> 50:41.760]  Тут мы говорим, да, говорим, минимум, подразумеваем ИТЬ.
[50:42.760 --> 50:43.760]  Вот.
[50:44.760 --> 50:46.760]  Решали когда-нибудь задачу R ИТЬКУ?
[50:47.760 --> 50:48.760]  Нет.
[50:49.760 --> 50:50.760]  Ассоциативную?
[50:51.760 --> 50:52.760]  Конечно.
[50:53.760 --> 50:54.760]  Да-да-да. Такая задача.
[50:55.760 --> 50:56.760]  Ассоциативная ИТЬКУ.
[50:57.760 --> 50:58.760]  ИТЬКУ.
[50:59.760 --> 51:00.760]  Ой, можно это как-то быстро произносить?
[51:00.760 --> 51:01.760]  ИТЬКУ.
[51:02.760 --> 51:03.760]  РИТЬКУ.
[51:04.760 --> 51:05.760]  Пойдемте-ка.
[51:06.760 --> 51:07.760]  Пойдемте-ка ИТЬКУ попьем.
[51:08.760 --> 51:09.760]  Так.
[51:10.760 --> 51:11.760]  Ну да, наверное как-то так.
[51:12.760 --> 51:13.760]  Не важно.
[51:14.760 --> 51:15.760]  РИТЬКУ объелись просто.
[51:16.760 --> 51:17.760]  Верните, пожалуйста, на секунду.
[51:18.760 --> 51:19.760]  Пожалуйста, пожалуйста.
[51:24.760 --> 51:25.760]  О господи.
[51:26.760 --> 51:27.760]  Ну хорошо.
[51:28.760 --> 51:29.760]  Ну как вы догадываетесь, презентация у вас естественно будет.
[51:30.760 --> 51:33.760]  Так у нас в итоге произведение матрицы лимитировано?
[51:33.760 --> 52:03.760]  Ааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа
[52:03.760 --> 52:07.600]  там уйтят и уйтят или там уйтят их сыгрок-то, я не знаю
[52:10.400 --> 52:15.600]  да знаете, чтоб лишний раз подчеркнуть, что как бы это алгебра, тут как бы сами по себе буквы значений не имеют
[52:16.880 --> 52:19.760]  можно там этот твердый знак там можно еще написать
[52:20.800 --> 52:21.440]  вот
[52:24.640 --> 52:25.360]  итак
[52:25.760 --> 52:26.720]  значит, смотрите
[52:27.040 --> 52:29.600]  значит, для того, чтобы чуть-чуть-то работать вот с этим деревом
[52:29.680 --> 52:33.600]  ну понятно, что надо как-то значит с помощью этих штук находить нам себе
[52:33.600 --> 52:38.560]  как-то там все-таки суммы там или там эти на полуинтервале LR
[52:38.560 --> 52:41.440]  в чем на это распроизвольном, а не том, что там хранится
[52:41.440 --> 52:45.440]  а также еще нужно если там и-то элемент поменялся
[52:45.440 --> 52:49.440]  то надо, наверно, пробежаться по всем отрезкам здесь и по всем отрезкам здесь
[52:49.440 --> 52:51.680]  и на самом деле суммы поменять
[52:54.640 --> 52:55.120]  вот
[52:56.160 --> 52:58.480]  для этого мы заметим кое-что
[53:00.480 --> 53:02.080]  значит, ну давайте скажем, да
[53:02.080 --> 53:06.080]  то есть назовем полуинтервал LR интересным, будь здоров
[53:06.080 --> 53:09.440]  если этот полуинтервал у нас тут где-то лежит
[53:10.080 --> 53:13.040]  то есть если этот полуинтервал у нас встречается в дереве
[53:15.440 --> 53:15.940]  вот
[53:18.320 --> 53:20.320]  значит, но мистический факт
[53:20.320 --> 53:26.160]  интересный полуинтервал содержит в себе ровно 2 в степени k для некоторого целого k идущих подряд чисел
[53:26.160 --> 53:34.640]  но более мистическое свойство заключается в том, что, оказывается, эти числа отличаются только в младших k двоичных битах
[53:48.640 --> 53:50.640]  вот, да, тут вот
[53:50.640 --> 53:52.640]  так что такая вот красота
[53:53.120 --> 54:01.120]  ну вот, отсюда, на самом деле, следует уже такая более нетривиальная, но очень важная для нас лемма
[54:01.120 --> 54:05.120]  что рассмотрим два интересных полуинтервала
[54:05.120 --> 54:09.120]  тогда эти полуинтервалы либо не пересекаются, либо один из них вложен другой
[54:13.120 --> 54:15.120]  но на самом деле, да
[54:15.120 --> 54:17.120]  знаете, мы сейчас сделаем даже по-другому
[54:17.120 --> 54:21.120]  для Жени правда, что они различаются только меньшим видом?
[54:21.600 --> 54:25.600]  ну если мы же от нуля определяем, то, конечно, неправда
[54:25.600 --> 54:27.600]  не-не-не, бюджет от нуля
[54:27.600 --> 54:29.600]  почему?
[54:29.600 --> 54:33.600]  число вида, например, было 110 в двоичной, а стало 1000
[54:33.600 --> 54:41.600]  у нас в степени k это типа k равно 2, но отличаются они в 3-4 младших
[54:41.600 --> 54:45.600]  ну k почему? в данном случае k будет просто
[54:45.600 --> 54:47.600]  сколько там?
[54:47.600 --> 54:49.600]  просто k будет 1
[54:50.080 --> 54:54.080]  разность у них это 2, но отличаются они в 4-4 младших
[54:54.080 --> 55:00.080]  да, они будут отличаться еще в тех видах, в которых у нас была такая цепочка единиц
[55:00.080 --> 55:02.080]  а насколько это длинно?
[55:02.080 --> 55:04.080]  у них префикс совпадать должен
[55:04.080 --> 55:08.080]  да, но это префикс не длинный, без х младших
[55:08.080 --> 55:10.080]  он может быть вот так
[55:10.080 --> 55:12.080]  что-что-что-что
[55:12.080 --> 55:14.080]  мы замеляем единицы
[55:14.080 --> 55:16.080]  ты меняешь только правую часть
[55:16.080 --> 55:18.080]  нет, ну давайте, так, сейчас, смотрите, давайте посмотрим
[55:18.560 --> 55:20.560]  так, если число и равно 110
[55:20.560 --> 55:22.560]  то, смотрите, f от и
[55:22.560 --> 55:24.560]  g от и
[55:24.560 --> 55:26.560]  сейчас, и то и то
[55:26.560 --> 55:28.560]  f от и равно 1,00
[55:28.560 --> 55:30.560]  и получается хороший полуинтервал f от и
[55:30.560 --> 55:36.560]  он содержит в себе числа 1,00 и что-то в конце
[55:38.560 --> 55:40.560]  с f от и понятно
[55:40.560 --> 55:42.560]  вот, теперь g от и
[55:42.560 --> 55:44.560]  g от и
[55:44.560 --> 55:46.560]  это 1000
[55:47.040 --> 55:49.040]  значит, тогда полуинтервал и g от и
[55:49.040 --> 55:53.040]  тогда я утверждаю, что он равен чему
[55:53.040 --> 55:57.040]  так как 1000-то в этом полуинтервале не содержится, напоминаю
[55:57.040 --> 55:59.040]  а и содержится
[55:59.040 --> 56:01.040]  поэтому получается, что тут содержится числа вполне себе
[56:01.040 --> 56:03.040]  1,1 и последний бит
[56:03.040 --> 56:05.040]  какой угодно
[56:05.040 --> 56:07.040]  а какого туждения левому 1,9?
[56:07.040 --> 56:09.040]  а
[56:09.520 --> 56:11.520]  а
[56:15.520 --> 56:17.520]  младших
[56:17.520 --> 56:19.520]  справа
[56:19.520 --> 56:21.520]  а содержит в себе
[56:21.520 --> 56:23.520]  равно
[56:23.520 --> 56:25.520]  ну точно тогда
[56:25.520 --> 56:27.520]  ладно, утверждение верну, но не точно
[56:27.520 --> 56:29.520]  хорошо
[56:29.520 --> 56:31.520]  хотя
[56:31.520 --> 56:33.520]  не, ладно, вроде нормально
[56:33.520 --> 56:35.520]  нет, нет, правильно
[56:35.520 --> 56:37.520]  то есть у нас само же от и в него не включается
[56:38.000 --> 56:40.000]  не включается, да
[56:40.000 --> 56:42.000]  это важно
[56:42.000 --> 56:44.000]  но на самом деле тут есть
[56:44.000 --> 56:46.000]  может быть еще более красиво
[56:46.000 --> 56:48.000]  давайте возьмем доску
[56:48.000 --> 56:50.000]  и нарисуем
[56:50.000 --> 56:52.000]  как эти полуинтервалы вообще устроены
[56:52.000 --> 56:54.000]  вот полуинтервалы
[56:54.000 --> 56:56.000]  которые берутся из f от и
[56:56.000 --> 56:58.000]  я буду рисовать с зеленым
[56:58.000 --> 57:00.000]  а полуинтервалы из g от и
[57:00.000 --> 57:02.000]  я буду рисовать красным
[57:08.000 --> 57:10.000]  отставим
[57:10.000 --> 57:12.000]  вот
[57:12.000 --> 57:14.000]  значит смотрите
[57:14.000 --> 57:16.000]  так нет, это мы тоже уберем
[57:16.000 --> 57:18.000]  ну давайте
[57:18.000 --> 57:20.000]  представим себе
[57:20.000 --> 57:22.000]  что n у нас равно
[57:22.000 --> 57:24.000]  ну я не знаю, 16
[57:26.000 --> 57:28.000]  значит смотрите
[57:28.000 --> 57:30.000]  так ну
[57:30.000 --> 57:32.000]  начнем с того, в каких случаях h от и
[57:32.000 --> 57:34.000]  будет равно 1?
[57:34.480 --> 57:36.480]  для чего?
[57:36.480 --> 57:38.480]  для ничего
[57:38.480 --> 57:40.480]  для нечетных
[57:40.480 --> 57:42.480]  и только для них
[57:42.480 --> 57:44.480]  поэтому рисуем
[57:44.480 --> 57:46.480]  так
[57:46.480 --> 57:48.480]  сейчас я попробую тут узенько
[57:48.480 --> 57:50.480]  нарисовать
[57:50.480 --> 57:52.480]  0,1
[57:52.480 --> 57:54.480]  но как вы смотрите
[57:54.480 --> 57:56.480]  f от и от единицы равно 0
[57:56.480 --> 57:58.480]  g от единицы равно 2
[57:58.480 --> 58:00.480]  так это мы убираем
[58:00.480 --> 58:02.480]  и нарисуем
[58:02.480 --> 58:04.480]  1,2
[58:04.480 --> 58:06.480]  вот
[58:06.480 --> 58:08.480]  дальше идет полуинтервал
[58:08.480 --> 58:10.480]  2,3
[58:10.480 --> 58:12.480]  ну потому что f от 3 равно 2
[58:12.480 --> 58:14.480]  дальше получается
[58:14.480 --> 58:16.480]  3,4
[58:16.480 --> 58:18.480]  вот это я просто рисую
[58:18.480 --> 58:20.480]  все полуинтервалы
[58:20.480 --> 58:22.480]  для всех u у которых h от и
[58:22.480 --> 58:24.480]  равно 1
[58:24.480 --> 58:26.480]  то есть они так красиво
[58:26.480 --> 58:28.480]  их красиво так подряд можно нарисовать
[58:28.480 --> 58:30.480]  вот
[58:30.480 --> 58:32.480]  так
[58:32.480 --> 58:34.480]  для ускорения процесса
[58:40.480 --> 58:42.480]  ну как
[58:42.480 --> 58:44.480]  ну я так скажу
[58:44.480 --> 58:46.480]  все таки
[58:46.480 --> 58:48.480]  я рисую такой минимальный тест
[58:48.480 --> 58:50.480]  который нарисовать с одной стороны можно
[58:50.480 --> 58:52.480]  но с другой стороны чтобы он был максимально нагляден
[58:52.480 --> 58:54.480]  в подобных случаях бывает
[58:54.480 --> 58:56.480]  помните фурятери, что мы тоже рисовали
[58:56.480 --> 58:58.480]  я до сих пор помню как вы
[58:58.480 --> 59:00.480]  рисовали и я уснул где-то между
[59:00.480 --> 59:02.480]  проснулся и вы все еще его
[59:02.480 --> 59:04.480]  рисовали
[59:04.480 --> 59:06.480]  спойлеры
[59:06.480 --> 59:08.480]  я все сразу
[59:08.480 --> 59:10.480]  спойлеры
[59:10.480 --> 59:12.480]  что сразу спойлеры
[59:12.480 --> 59:14.480]  кому-то я рассказывал дерево в олимпиадной школе в чем проблема
[59:14.480 --> 59:16.480]  не волнуйтесь
[59:16.480 --> 59:18.480]  это все будет еще
[59:18.480 --> 59:20.480]  конкретные примеры я конечно не обещаю
[59:20.480 --> 59:22.480]  сэмпл
[59:22.480 --> 59:24.480]  на всю доску
[59:24.480 --> 59:26.480]  я каждый раз его вспоминаю
[59:26.480 --> 59:28.480]  видишь как полезно
[59:36.480 --> 59:38.480]  так ну вот
[59:40.480 --> 59:42.480]  так
[59:42.480 --> 59:44.480]  нет
[59:44.480 --> 59:46.480]  он хороший
[59:46.480 --> 59:48.480]  есть о чем пожалеть
[59:48.480 --> 59:50.480]  так вот
[59:50.480 --> 59:52.480]  если правильно хорошо понять алгоритм
[59:52.480 --> 59:54.480]  то он красивый
[59:54.480 --> 59:56.480]  идем дальше
[59:56.480 --> 59:58.480]  это было ашаты равно 1
[59:58.480 --> 01:00:00.480]  а как устроены числа у которых ашаты равно 2
[01:00:06.480 --> 01:00:08.480]  нечетные поделенные на 2
[01:00:08.480 --> 01:00:10.480]  наоборот
[01:00:10.480 --> 01:00:12.480]  нечетные поделенные
[01:00:14.480 --> 01:00:16.480]  это не целое что ли
[01:00:20.480 --> 01:00:22.480]  нечетные умноженные на 2
[01:00:24.480 --> 01:00:26.480]  нет
[01:00:26.480 --> 01:00:28.480]  нечетные деленные на 2
[01:00:28.480 --> 01:00:30.480]  это называется полу целое
[01:00:30.480 --> 01:00:32.480]  вот
[01:00:32.480 --> 01:00:34.480]  ну поехали
[01:00:34.480 --> 01:00:36.480]  делится на 2 но не на 4
[01:00:36.480 --> 01:00:38.480]  тут я нарисую
[01:00:38.480 --> 01:00:40.480]  в таком виде
[01:00:40.480 --> 01:00:42.480]  нечетные
[01:00:42.480 --> 01:00:44.480]  не квадратичные
[01:00:44.480 --> 01:00:46.480]  это новые не квадратичные вычеты
[01:00:46.480 --> 01:00:48.480]  не квадратичные вычеты
[01:00:52.480 --> 01:00:54.480]  ну а что такое
[01:00:56.480 --> 01:00:58.480]  не квадратичные вычеты
[01:00:58.480 --> 01:01:00.480]  действительно что-то новое
[01:01:00.480 --> 01:01:02.480]  не важно
[01:01:02.480 --> 01:01:04.480]  как бы ладно
[01:01:04.480 --> 01:01:06.480]  мы быстренько рисуем конечно
[01:01:10.480 --> 01:01:12.480]  там есть 12
[01:01:12.480 --> 01:01:14.480]  что там дальше
[01:01:14.480 --> 01:01:16.480]  14
[01:01:16.480 --> 01:01:18.480]  что да
[01:01:18.480 --> 01:01:20.480]  догадывайтесь что будет дальше
[01:01:22.480 --> 01:01:24.480]  ну дальше мы будем рисовать
[01:01:24.480 --> 01:01:26.480]  а если ашаты равно 4
[01:01:30.480 --> 01:01:32.480]  делится на 4 но не делится на 2
[01:01:32.480 --> 01:01:34.480]  это как?
[01:01:34.480 --> 01:01:36.480]  точнее не весна
[01:01:44.480 --> 01:01:46.480]  делится на 4 но не делится на 2
[01:01:46.480 --> 01:01:48.480]  так что тут происходит вообще
[01:01:48.480 --> 01:01:50.480]  человек после этого передумывает
[01:01:50.480 --> 01:01:52.480]  заходить по аудиторию
[01:01:52.480 --> 01:01:54.480]  да-да-да осторожно что-то
[01:01:54.480 --> 01:01:56.480]  так человек же математикой может перестать заниматься
[01:01:56.480 --> 01:01:58.480]  от шока вообще
[01:01:58.480 --> 01:02:00.480]  не было
[01:02:02.480 --> 01:02:04.480]  так вот
[01:02:04.480 --> 01:02:06.480]  4 8 8 12
[01:02:16.480 --> 01:02:18.480]  так ну вот
[01:02:18.480 --> 01:02:20.480]  дальше я тут уже рисовал
[01:02:22.480 --> 01:02:24.480]  ну и до кучи еще вот это
[01:02:24.480 --> 01:02:26.480]  так ну что
[01:02:26.480 --> 01:02:28.480]  ничего не вспоминает
[01:02:32.480 --> 01:02:34.480]  да
[01:02:34.480 --> 01:02:36.480]  мало кто знает
[01:02:36.480 --> 01:02:38.480]  но встречное дерево федвика
[01:02:38.480 --> 01:02:40.480]  это просто практически в явном виде
[01:02:40.480 --> 01:02:42.480]  они буквально те же отрезки
[01:02:42.480 --> 01:02:44.480]  просто
[01:02:44.480 --> 01:02:46.480]  в двух массивах и в другом порядке
[01:02:48.480 --> 01:02:50.480]  а так суть
[01:02:50.480 --> 01:02:52.480]  вообще одна
[01:02:54.480 --> 01:02:56.480]  ну как
[01:02:56.480 --> 01:02:58.480]  бесполезно
[01:03:00.480 --> 01:03:02.480]  хотя
[01:03:02.480 --> 01:03:04.480]  это практически идентична операциям снизу
[01:03:04.480 --> 01:03:06.480]  в дереве отрезков
[01:03:10.480 --> 01:03:12.480]  ну а
[01:03:12.480 --> 01:03:14.480]  а что бы нет
[01:03:14.480 --> 01:03:16.480]  но если там
[01:03:16.480 --> 01:03:18.480]  для двумерности операция по-любому должна быть коммутативной
[01:03:24.480 --> 01:03:26.480]  но тогда вы как бы не сможете
[01:03:26.480 --> 01:03:28.480]  брать квадратные блоки
[01:03:28.480 --> 01:03:30.480]  так что коммутативность по-любому вам понадобится
[01:03:34.480 --> 01:03:36.480]  минимум вы там найдете
[01:03:36.480 --> 01:03:38.480]  а вот там произведение матрицы
[01:03:38.480 --> 01:03:40.480]  уже не гарантирует
[01:03:42.480 --> 01:03:44.480]  но соответственно
[01:03:44.480 --> 01:03:46.480]  из такой картинки уже наглядно видно
[01:03:46.480 --> 01:03:48.480]  что полуинтервалы либо не пересекаются
[01:03:48.480 --> 01:03:50.480]  либо ложены друг в друга
[01:03:50.480 --> 01:03:52.480]  это прям вот максимально наглядно
[01:03:54.480 --> 01:03:56.480]  но отсюда следует маленькое
[01:03:56.480 --> 01:03:58.480]  приятное такое техническое утверждение
[01:03:58.480 --> 01:04:00.480]  я
[01:04:00.480 --> 01:04:02.480]  она говорит что если у нас l меньше
[01:04:02.480 --> 01:04:04.480]  чем r то тогда у нас
[01:04:04.480 --> 01:04:06.480]  оказывается что
[01:04:06.480 --> 01:04:08.480]  или g от l меньше либо равно
[01:04:08.480 --> 01:04:10.480]  или l меньше либо равно
[01:04:10.480 --> 01:04:12.480]  f от r
[01:04:12.480 --> 01:04:14.480]  то есть если у нас есть какой-то lr
[01:04:14.480 --> 01:04:16.480]  то не может быть так что f от r скокнется
[01:04:16.480 --> 01:04:18.480]  и
[01:04:18.480 --> 01:04:20.480]  g от l скокнется
[01:04:20.480 --> 01:04:22.480]  то есть как видите такого не
[01:04:22.480 --> 01:04:24.480]  бывает
[01:04:24.480 --> 01:04:26.480]  если поверить
[01:04:26.480 --> 01:04:28.480]  в эту лему
[01:04:28.480 --> 01:04:30.480]  то в результате
[01:04:30.480 --> 01:04:32.480]  оказывается вот таким вот простым
[01:04:32.480 --> 01:04:34.480]  образом на самом деле можно найти
[01:04:34.480 --> 01:04:36.480]  соответственно
[01:04:36.480 --> 01:04:38.480]  нечто там произведение
[01:04:38.480 --> 01:04:40.480]  матриц оно же там или минимум
[01:04:40.480 --> 01:04:42.480]  на полуинтервале lr
[01:04:44.480 --> 01:04:46.480]  ну
[01:04:46.480 --> 01:04:48.480]  не совсем
[01:04:48.480 --> 01:04:50.480]  о вот вы заказывали шаблон
[01:04:50.480 --> 01:04:52.480]  да вот он пожалуйста
[01:04:52.480 --> 01:04:54.480]  так
[01:04:54.480 --> 01:04:56.480]  то есть
[01:04:56.480 --> 01:04:58.480]  то есть
[01:05:16.480 --> 01:05:18.480]  почему
[01:05:18.480 --> 01:05:20.480]  почему
[01:05:20.480 --> 01:05:22.480]  а потому что если
[01:05:22.480 --> 01:05:24.480]  это не так вот пусть для каких-то lr
[01:05:24.480 --> 01:05:26.480]  это не так
[01:05:26.480 --> 01:05:28.480]  тогда у вас получается что вот есть
[01:05:28.480 --> 01:05:30.480]  lg от l а есть rf от r
[01:05:30.480 --> 01:05:32.480]  получается что отрезки пересекаются у нас такого
[01:05:32.480 --> 01:05:34.480]  не бывает
[01:05:36.480 --> 01:05:38.480]  так что вот и все
[01:05:42.480 --> 01:05:44.480]  что там
[01:05:46.480 --> 01:05:48.480]  лучше убирать
[01:05:52.480 --> 01:05:54.480]  а то понимаешь чем проблема
[01:05:54.480 --> 01:05:56.480]  то есть ты садишься на первую парту
[01:05:56.480 --> 01:05:58.480]  смотри делать что-то постороннее
[01:05:58.480 --> 01:06:00.480]  чем больше делаешь тем больше улектра возникает соблазн
[01:06:00.480 --> 01:06:02.480]  сделать тебе точечный массаж
[01:06:02.480 --> 01:06:04.480]  лица понимаешь
[01:06:04.480 --> 01:06:06.480]  а вот
[01:06:14.480 --> 01:06:16.480]  так вот
[01:06:16.480 --> 01:06:18.480]  как же нам это считать
[01:06:18.480 --> 01:06:20.480]  то есть оказывается
[01:06:20.480 --> 01:06:22.480]  это очень удобно то есть как найти сумму
[01:06:22.480 --> 01:06:24.480]  на lr если это полуинтервал конечно
[01:06:28.480 --> 01:06:30.480]  вот так
[01:06:30.480 --> 01:06:32.480]  ну на самом деле ладно код написан неправильно
[01:06:34.480 --> 01:06:36.480]  хорошо
[01:06:36.480 --> 01:06:38.480]  вот
[01:06:38.480 --> 01:06:40.480]  ладно если мы верим что
[01:06:40.480 --> 01:06:42.480]  g от 0 равно 1 то конечно можно и так
[01:06:42.480 --> 01:06:44.480]  но на самом деле можно и без этого
[01:06:44.480 --> 01:06:46.480]  если тут писать про if что
[01:06:46.480 --> 01:06:48.480]  если f от
[01:06:48.480 --> 01:06:50.480]  index right больше либо равен index left
[01:06:50.480 --> 01:06:52.480]  тогда берем вот это иначе вот это
[01:06:54.480 --> 01:06:56.480]  понятно что тут написано в принципе
[01:06:58.480 --> 01:07:00.480]  почему у нас
[01:07:00.480 --> 01:07:02.480]  else на другой строчке
[01:07:02.480 --> 01:07:04.480]  а
[01:07:04.480 --> 01:07:06.480]  а надо типа на той же
[01:07:08.480 --> 01:07:10.480]  ну не знаю
[01:07:10.480 --> 01:07:12.480]  я что-то так пишу
[01:07:12.480 --> 01:07:14.480]  в прочем не суть
[01:07:14.480 --> 01:07:16.480]  вот
[01:07:16.480 --> 01:07:18.480]  технология понятно
[01:07:18.480 --> 01:07:20.480]  ну
[01:07:20.480 --> 01:07:22.480]  по большому счету да
[01:07:22.480 --> 01:07:24.480]  она эквивалентная она конечно очень
[01:07:24.480 --> 01:07:26.480]  похожа на то как искать там допустим
[01:07:26.480 --> 01:07:28.480]  сумму там в дереве отрезков с помощью
[01:07:28.480 --> 01:07:30.480]  там операции снизу
[01:07:30.480 --> 01:07:32.480]  ну вот но как вот строим немножко по
[01:07:32.480 --> 01:07:34.480]  другому
[01:07:34.480 --> 01:07:36.480]  чего
[01:07:36.480 --> 01:07:38.480]  различия чего
[01:07:38.480 --> 01:07:40.480]  дерево отрезки снизу
[01:07:40.480 --> 01:07:42.480]  и вот это вот стричь
[01:07:42.480 --> 01:07:44.480]  глобально
[01:07:44.480 --> 01:07:46.480]  в интерпретации скорее
[01:07:46.480 --> 01:07:48.480]  потому что мы
[01:07:48.480 --> 01:07:50.480]  через какие-то битвы операции это вот
[01:07:50.480 --> 01:07:52.480]  по другому делаем
[01:07:52.480 --> 01:07:54.480]  другой взгляд хотя храним
[01:07:54.480 --> 01:07:56.480]  да буквально то же самое
[01:07:56.480 --> 01:07:58.480]  деревья отрезков мы как бы эти отрезки
[01:07:58.480 --> 01:08:00.480]  по другому храним и по другому ищем
[01:08:02.480 --> 01:08:04.480]  ну на самом деле да
[01:08:08.480 --> 01:08:10.480]  а очень просто значит
[01:08:10.480 --> 01:08:12.480]  смотрите ну давайте нарисую картинку
[01:08:12.480 --> 01:08:14.480]  значит смотрите то есть
[01:08:14.480 --> 01:08:16.480]  нет вот то есть
[01:08:16.480 --> 01:08:18.480]  происходит это примерно следующим образом
[01:08:18.480 --> 01:08:20.480]  в идеале по крайней мере
[01:08:20.480 --> 01:08:22.480]  вот у нас есть элер да
[01:08:22.480 --> 01:08:24.480]  господи что у нас
[01:08:24.480 --> 01:08:26.480]  только красный зеленый маркер
[01:08:26.480 --> 01:08:28.480]  вот у нас есть элер какой-то
[01:08:28.480 --> 01:08:30.480]  значит идея очень простая
[01:08:30.480 --> 01:08:32.480]  значит мы
[01:08:32.480 --> 01:08:34.480]  значит мы говорим так
[01:08:34.480 --> 01:08:36.480]  то есть мы идем
[01:08:36.480 --> 01:08:38.480]  то есть некоторое время
[01:08:38.480 --> 01:08:40.480]  мы поделим этот полуинтервал
[01:08:40.480 --> 01:08:42.480]  вот тут где вот это вот равно f от r
[01:08:42.480 --> 01:08:44.480]  потом идем там
[01:08:44.480 --> 01:08:46.480]  f от f от r
[01:08:46.480 --> 01:08:48.480]  ну вот можно так
[01:08:48.480 --> 01:08:50.480]  вот берем вот эти все полуинтервалы
[01:08:50.480 --> 01:08:52.480]  и насчитываем
[01:08:52.480 --> 01:08:54.480]  получается произведение на
[01:08:54.480 --> 01:08:56.480]  в суферсе
[01:08:56.480 --> 01:08:58.480]  вот обратите внимание да когда мы тут это делаем
[01:08:58.480 --> 01:09:00.480]  нам принципиально с какой стороны домножать
[01:09:00.480 --> 01:09:02.480]  кстати помните да у нас нет
[01:09:02.480 --> 01:09:04.480]  комбатативности поэтому здесь это принципиально
[01:09:04.480 --> 01:09:06.480]  но в какой-то момент
[01:09:06.480 --> 01:09:08.480]  неожиданно выяснилось что f от
[01:09:08.480 --> 01:09:10.480]  f от f но если мы просто упёрлись
[01:09:10.480 --> 01:09:12.480]  в l то кайф мы победили
[01:09:12.480 --> 01:09:14.480]  но если выяснилось что мы как бы
[01:09:14.480 --> 01:09:16.480]  следующие тут у нас
[01:09:16.480 --> 01:09:18.480]  где-то дальше идет
[01:09:20.480 --> 01:09:22.480]  то теперь мы
[01:09:22.480 --> 01:09:24.480]  делаем немножко другое мы от l
[01:09:24.480 --> 01:09:26.480]  теперь идем
[01:09:26.480 --> 01:09:28.480]  и идем значит у нас тут получается
[01:09:28.480 --> 01:09:30.480]  g от l
[01:09:30.480 --> 01:09:32.480]  там g от g от l
[01:09:34.480 --> 01:09:36.480]  и соответственно опах
[01:09:36.480 --> 01:09:38.480]  ну вот и в какой-то момент мы упираемся
[01:09:38.480 --> 01:09:40.480]  собственно вот в эту вот границу почему
[01:09:40.480 --> 01:09:42.480]  мы в нее упираемся
[01:09:42.480 --> 01:09:44.480]  потому что у нас есть вот этот вот мистически
[01:09:44.480 --> 01:09:46.480]  большой полуинтервал
[01:09:46.480 --> 01:09:48.480]  внутри которого l находится
[01:09:48.480 --> 01:09:50.480]  и g от l
[01:09:50.480 --> 01:09:52.480]  и все эти g от l
[01:09:52.480 --> 01:09:54.480]  перескочить через эту штуку
[01:09:54.480 --> 01:09:56.480]  не могут ну потому что если какая-то перескочится
[01:09:56.480 --> 01:09:58.480]  значит будут пересекающиеся полуинтервал у нас такого
[01:09:58.480 --> 01:10:00.480]  не бывает
[01:10:02.480 --> 01:10:04.480]  получается вот мы тут что-то
[01:10:04.480 --> 01:10:06.480]  на суффиксе нашли на префиксе нашли
[01:10:06.480 --> 01:10:08.480]  остается их только перемножить
[01:10:08.480 --> 01:10:10.480]  ну и на этом все
[01:10:10.480 --> 01:10:12.480]  с вами были подписывайтесь
[01:10:12.480 --> 01:10:14.480]  ставьте лайки и вот
[01:10:14.480 --> 01:10:16.480]  соответственно
[01:10:16.480 --> 01:10:18.480]  вот больше тут ничего не будет все
[01:10:18.480 --> 01:10:20.480]  понятно
[01:10:24.480 --> 01:10:26.480]  сейчас все будет
[01:10:26.480 --> 01:10:28.480]  ой тут аж презентация от этого
[01:10:28.480 --> 01:10:30.480]  вылетает
[01:10:34.480 --> 01:10:36.480]  презентация этого не знает
[01:10:38.480 --> 01:10:40.480]  замечательно
[01:10:42.480 --> 01:10:44.480]  так
[01:10:44.480 --> 01:10:46.480]  последние леммы это простые
[01:10:46.480 --> 01:10:48.480]  они на тему того что find product
[01:10:48.480 --> 01:10:50.480]  работает за логарифом
[01:10:50.480 --> 01:10:52.480]  или на самом деле вот даже вот
[01:10:52.480 --> 01:10:54.480]  за логарифом
[01:10:54.480 --> 01:10:56.480]  подотреска
[01:10:56.480 --> 01:10:58.480]  но презентации у нас
[01:10:58.480 --> 01:11:00.480]  в этой презентации
[01:11:00.480 --> 01:11:02.480]  этого нет
[01:11:02.480 --> 01:11:04.480]  но у нас есть вторая
[01:11:04.480 --> 01:11:06.480]  презентация
[01:11:12.480 --> 01:11:14.480]  давным-давно этот
[01:11:14.480 --> 01:11:16.480]  этот предмет назывался объектно-ориентированное
[01:11:16.480 --> 01:11:18.480]  программирование
[01:11:18.480 --> 01:11:20.480]  а в первом семе это называлось введение
[01:11:20.480 --> 01:11:22.480]  в программирование
[01:11:22.480 --> 01:11:24.480]  алгоритмы структуры данных вы бы изучали только на втором курсе
[01:11:28.480 --> 01:11:30.480]  да ну не совсем
[01:11:30.480 --> 01:11:32.480]  по моему зачет вы будете получать под именем практику
[01:11:32.480 --> 01:11:34.480]  по программированию
[01:11:36.480 --> 01:11:38.480]  нет вам сейчас все нормально
[01:11:38.480 --> 01:11:40.480]  потому что как бы практика по алгоритмам потом
[01:11:40.480 --> 01:11:42.480]  там
[01:11:42.480 --> 01:11:44.480]  а ну да хотя отдельно
[01:11:48.480 --> 01:11:50.480]  доброе утро
[01:11:50.480 --> 01:11:52.480]  давайте напомним раз об этом
[01:11:52.480 --> 01:11:54.480]  раз возить вопрос
[01:11:54.480 --> 01:11:56.480]  отценки две нет
[01:11:56.480 --> 01:11:58.480]  отценки будут две
[01:11:58.480 --> 01:12:00.480]  но предупреждаю в этом семестре
[01:12:00.480 --> 01:12:02.480]  если PC бонусов нет
[01:12:02.480 --> 01:12:04.480]  вот
[01:12:04.480 --> 01:12:06.480]  отлично
[01:12:08.480 --> 01:12:10.480]  потому что зачет вы получаете за практику
[01:12:10.480 --> 01:12:12.480]  а экзамен за теорию
[01:12:22.480 --> 01:12:24.480]  не знаю
[01:12:24.480 --> 01:12:26.480]  видимо их кафедра
[01:12:26.480 --> 01:12:28.480]  решила так а наша кафедра решила так
[01:12:28.480 --> 01:12:30.480]  и вот так
[01:12:30.480 --> 01:12:32.480]  ну отчасти
[01:12:32.480 --> 01:12:34.480]  отчасти тоже кстати
[01:12:34.480 --> 01:12:36.480]  исторически вещь такая
[01:12:36.480 --> 01:12:38.480]  исторически складывалось что мы в этом предмете должны были
[01:12:38.480 --> 01:12:40.480]  C++ как-то на семинарах изучать
[01:12:44.480 --> 01:12:46.480]  презентация осталось все времена когда так и было
[01:12:48.480 --> 01:12:50.480]  но нет это не совсем то
[01:12:50.480 --> 01:12:52.480]  сейчас у вас
[01:12:52.480 --> 01:12:54.480]  как бы тут
[01:12:54.480 --> 01:12:56.480]  в результате
[01:12:56.480 --> 01:12:58.480]  на самом деле тут огромная заслуга собственно
[01:12:58.480 --> 01:13:00.480]  на самом деле только недавно
[01:13:00.480 --> 01:13:02.480]  стало что C++ стал отдельным предметом
[01:13:02.480 --> 01:13:04.480]  с отдельными зачетами
[01:13:04.480 --> 01:13:06.480]  то есть вы по моему едва не первое поколение у которых там зачеты
[01:13:06.480 --> 01:13:08.480]  по C++ за счет по алгоритмам не пересекаются
[01:13:08.480 --> 01:13:10.480]  от слова никак
[01:13:10.480 --> 01:13:12.480]  просто а так мы по моему едва не в прошлом
[01:13:12.480 --> 01:13:14.480]  ваши предшествия
[01:13:14.480 --> 01:13:16.480]  просто нынешние второкуры возможно получали
[01:13:16.480 --> 01:13:18.480]  одну оценку за C++ алгоритмы как-то там
[01:13:18.480 --> 01:13:20.480]  пополам я уж не помню мы там как-то
[01:13:20.480 --> 01:13:22.480]  с межирием договаривались
[01:13:22.480 --> 01:13:24.480]  так что знаете
[01:13:24.480 --> 01:13:26.480]  так что
[01:13:26.480 --> 01:13:28.480]  так что на самом деле тут
[01:13:28.480 --> 01:13:30.480]  да правда
[01:13:30.480 --> 01:13:32.480]  то есть на самом деле в этом смысле
[01:13:32.480 --> 01:13:34.480]  организация учебного процесса
[01:13:34.480 --> 01:13:36.480]  вот
[01:13:36.480 --> 01:13:38.480]  а в этом
[01:13:38.480 --> 01:13:40.480]  вот
[01:13:40.480 --> 01:13:42.480]  но почему это как устроено у нас на кафедре
[01:13:42.480 --> 01:13:44.480]  как устроено на кафедре высшей математики я не знаю
[01:13:44.480 --> 01:13:46.480]  но правда я знаю только что кафедра высшей математики
[01:13:46.480 --> 01:13:48.480]  там она история
[01:13:48.480 --> 01:13:50.480]  насчитывает уже там много десятилетий
[01:13:50.480 --> 01:13:52.480]  ну вот поэтому там
[01:13:52.480 --> 01:13:54.480]  поэтому почему у них там собственно
[01:13:54.480 --> 01:13:56.480]  там отдельный зачет по мотану
[01:13:56.480 --> 01:13:58.480]  за DZ по мотану не ставят этого я честно говоря
[01:13:58.480 --> 01:14:00.480]  не знаю
[01:14:00.480 --> 01:14:02.480]  вот
[01:14:02.480 --> 01:14:04.480]  и это при том что
[01:14:04.480 --> 01:14:06.480]  по традиции вы же там по мотану
[01:14:06.480 --> 01:14:08.480]  еще помнится два экзамена сдаете
[01:14:08.480 --> 01:14:10.480]  ну письменный и устный да
[01:14:10.480 --> 01:14:12.480]  логично
[01:14:12.480 --> 01:14:14.480]  ну да
[01:14:14.480 --> 01:14:16.480]  ну как бы да
[01:14:16.480 --> 01:14:18.480]  не ну там
[01:14:18.480 --> 01:14:20.480]  все равно оговорка что там за устный
[01:14:20.480 --> 01:14:22.480]  что там за устный вы скорее всего
[01:14:22.480 --> 01:14:24.480]  чтобы результат за устный вы вряд ли там
[01:14:24.480 --> 01:14:26.480]  получите выше чем то что получили за письменный
[01:14:26.480 --> 01:14:28.480]  да
[01:14:28.480 --> 01:14:30.480]  ну плюс минус один плюс один какой
[01:14:30.480 --> 01:14:32.480]  это письмак 16 из 30
[01:14:32.480 --> 01:14:34.480]  за устный 10
[01:14:34.480 --> 01:14:36.480]  ну примерно так
[01:14:36.480 --> 01:14:38.480]  у нас примерно всего потока
[01:14:38.480 --> 01:14:40.480]  что то подобное
[01:14:40.480 --> 01:14:42.480]  письменный экзамен глина а устный экзамен идея
[01:14:42.480 --> 01:14:44.480]  ну да
[01:14:44.480 --> 01:14:46.480]  не ну просто скажешь не ну просто странно
[01:14:46.480 --> 01:14:48.480]  ну не знаю не ну значит все меняется
[01:14:48.480 --> 01:14:50.480]  в первом семе мне так сказали что как бы да
[01:14:50.480 --> 01:14:52.480]  что там на устном экзамене еще нет уровень ваших ответов
[01:14:52.480 --> 01:14:54.480]  там называется там
[01:14:54.480 --> 01:14:56.480]  на голову выше там многих ваших коллег
[01:14:56.480 --> 01:14:58.480]  но называется уровень вашего
[01:14:58.480 --> 01:15:00.480]  письменного экзамена выше хора поставить не позволяет
[01:15:00.480 --> 01:15:02.480]  ну вот
[01:15:02.480 --> 01:15:04.480]  ну да ну вот
[01:15:04.480 --> 01:15:06.480]  у меня в первом семе это не получилось
[01:15:06.480 --> 01:15:08.480]  во втором пробить удалось да
[01:15:08.480 --> 01:15:10.480]  но там как бы
[01:15:10.480 --> 01:15:12.480]  но там повезло я собственно лектору отвечал
[01:15:12.480 --> 01:15:14.480]  но там как бы там
[01:15:14.480 --> 01:15:16.480]  другая ситуация была там еще удалось
[01:15:16.480 --> 01:15:18.480]  сапелировать на том что там сказали что
[01:15:18.480 --> 01:15:20.480]  там
[01:15:20.480 --> 01:15:22.480]  сейчас как там был
[01:15:22.480 --> 01:15:24.480]  история про синус
[01:15:24.480 --> 01:15:26.480]  а ну
[01:15:26.480 --> 01:15:28.480]  не про синус это на дифурах было
[01:15:28.480 --> 01:15:30.480]  вот нет там была другая история
[01:15:30.480 --> 01:15:32.480]  там была история о том что некоторые решения
[01:15:32.480 --> 01:15:34.480]  были зарублены потому что там ожидалось
[01:15:34.480 --> 01:15:36.480]  что надо это делать каким-то вот фиксированным
[01:15:36.480 --> 01:15:38.480]  заданным методом который там
[01:15:38.480 --> 01:15:40.480]  ну вот а я делал видимо каким-то другим
[01:15:40.480 --> 01:15:42.480]  вот ну как бы
[01:15:42.480 --> 01:15:44.480]  ну я как бы
[01:15:44.480 --> 01:15:46.480]  что значит
[01:15:46.480 --> 01:15:48.480]  где было написано что я обязан решать
[01:15:48.480 --> 01:15:50.480]  ровно этим методом и никаким кроме
[01:15:50.480 --> 01:15:52.480]  вот
[01:15:52.480 --> 01:15:54.480]  то есть ну как бы просто предупреждать надо
[01:15:54.480 --> 01:15:56.480]  просто таких вещах что это такое
[01:15:56.480 --> 01:15:58.480]  на эту тему беден вот поэтому там
[01:15:58.480 --> 01:16:00.480]  сапелировать удалось вот
[01:16:00.480 --> 01:16:02.480]  так вот
[01:16:02.480 --> 01:16:04.480]  идем дальше
[01:16:04.480 --> 01:16:06.480]  напоминать да давным-давно
[01:16:06.480 --> 01:16:08.480]  это вообще были старые времена когда лекция
[01:16:08.480 --> 01:16:10.480]  была одна
[01:16:10.480 --> 01:16:12.480]  а семинаров было два и они были в другое время
[01:16:12.480 --> 01:16:14.480]  иногда даже в другой день
[01:16:14.480 --> 01:16:16.480]  они как у нас вот собственно
[01:16:16.480 --> 01:16:18.480]  три пары подряд и собственно вот
[01:16:18.480 --> 01:16:20.480]  то есть не надо ничего напоминать
[01:16:20.480 --> 01:16:22.480]  не надо ничего напоминать
[01:16:22.480 --> 01:16:23.960]  так вот
[01:16:26.480 --> 01:16:28.480]  так но вот это уже всё понятно
[01:16:28.480 --> 01:16:30.480]  мы вообще обсудили обсудили
[01:16:30.480 --> 01:16:32.480]  обсудили obs Idaho
[01:16:32.480 --> 01:16:34.480]  так вот
[01:16:34.480 --> 01:16:36.480]  значит смотрите
[01:16:36.480 --> 01:16:38.480]  интересные интервалы
[01:16:40.480 --> 01:16:42.480]  итак значит задача надо
[01:16:42.480 --> 01:16:44.480]  изменить значения в ди
[01:16:44.480 --> 01:16:46.480]  jesteśmy по интервалу у нас индекс содержат
[01:16:46.480 --> 01:16:48.480]  вопрос только как это делать
[01:16:48.480 --> 01:16:50.480]  ну вот
[01:16:50.480 --> 01:16:53.180]  Ну давайте для начала уже хотя бы простой притат в ТФ,
[01:16:53.180 --> 01:16:57.180]  вопрос, как эти интересные полуинтервалы хотя бы найти?
[01:16:59.180 --> 01:17:00.180]  Как их хотя бы найти?
[01:17:02.180 --> 01:17:05.680]  Вот. Ну как бы в ТФ, как их искать, мы уже знаем.
[01:17:06.180 --> 01:17:08.680]  А вот как их искать в ТЖ, это уже вопрос.
[01:17:13.180 --> 01:17:13.680]  Вот.
[01:17:14.380 --> 01:17:15.880]  Вот.
[01:17:15.880 --> 01:17:19.880]  Но на самом деле, оказывается, можно прописать просто примерно
[01:17:19.880 --> 01:17:24.880]  какой-нибудь такой анализ, который был уже ранее.
[01:17:24.880 --> 01:17:25.880]  Значит, смотрите.
[01:17:28.880 --> 01:17:32.880]  Мы хотим найти в массиве ТЖ все интересные полуинтервалы.
[01:17:32.880 --> 01:17:34.880]  То есть полуинтервалы, которые...
[01:17:34.880 --> 01:17:35.880]  Да.
[01:17:36.880 --> 01:17:40.880]  То есть дано число индекс, я хочу найти все такие условно И,
[01:17:41.080 --> 01:17:45.080]  что и меньше либо равно индекс, и строго меньше, чем g от k.
[01:17:47.080 --> 01:17:53.080]  Ну без этого как-то наша жизнь легко приятной явно не будет.
[01:17:53.080 --> 01:17:58.080]  А можно просто все пропуски из ТФ заполнить в ТЖ?
[01:17:58.080 --> 01:18:00.080]  Что такое пропуск из ТФ?
[01:18:01.080 --> 01:18:06.080]  Вот у нас в ТФ есть отрезки размера 1 и 4.
[01:18:06.080 --> 01:18:09.080]  Обрезок размера 2 точно из ТЖ.
[01:18:09.280 --> 01:18:11.280]  Ну...
[01:18:11.280 --> 01:18:13.280]  Ну главное, его там правильно находить.
[01:18:13.280 --> 01:18:16.280]  Нет, ну в принципе можно, но давайте все равно вот.
[01:18:17.280 --> 01:18:19.280]  Но давайте, смотри, тут по-разному можно.
[01:18:19.280 --> 01:18:21.280]  Давайте тут разные подходы уже посмотрим.
[01:18:21.280 --> 01:18:23.280]  Значит такой более старый подход.
[01:18:23.280 --> 01:18:25.280]  Давайте честно вот посмотрим.
[01:18:25.280 --> 01:18:28.280]  Как-то вот жил-был число индекс.
[01:18:30.280 --> 01:18:31.280]  Вот.
[01:18:31.480 --> 01:18:41.480]  Там 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1.
[01:18:41.480 --> 01:18:43.480]  Вот.
[01:18:43.480 --> 01:18:46.480]  1, 0, 0, 1, 0.
[01:18:46.480 --> 01:18:47.480]  Вот.
[01:18:47.480 --> 01:18:49.480]  И тут мы говорим, так.
[01:18:49.480 --> 01:18:53.480]  Значит нам нужно, чтобы у нас было число И, которое меньше либо равно,
[01:18:53.480 --> 01:18:57.480]  и нужно число g от i, которое строго больше.
[01:18:57.680 --> 01:18:59.680]  Так, ну давайте думать.
[01:18:59.680 --> 01:19:01.680]  Что значит g, а ты строго больше?
[01:19:01.680 --> 01:19:03.680]  Значит g, а ты должно быть устроено как?
[01:19:03.680 --> 01:19:07.680]  До какого-то момента у нас копипаста, копипаста, копипаста, копипаста.
[01:19:07.680 --> 01:19:09.680]  Копипаста, копипаста.
[01:19:09.680 --> 01:19:12.680]  А потом в какой-то момент неожиданно 0 заменился на единичку.
[01:19:14.680 --> 01:19:15.680]  Вот.
[01:19:18.680 --> 01:19:19.680]  Так.
[01:19:19.680 --> 01:19:20.680]  Вот.
[01:19:20.680 --> 01:19:22.680]  Может быть здесь?
[01:19:24.680 --> 01:19:25.680]  Но нет.
[01:19:27.680 --> 01:19:29.680]  Ну причина очень простая.
[01:19:29.680 --> 01:19:34.680]  Потому что, значит, если тут g, а ты здесь, и чтобы i было меньше либо равно,
[01:19:34.680 --> 01:19:36.680]  нам придется, чтобы i было здесь равно 0.
[01:19:37.680 --> 01:19:40.680]  Но для того, чтобы i было тут равно 0,
[01:19:40.680 --> 01:19:43.680]  нужно, чтобы тут хотя бы одна единичка добыла.
[01:19:43.680 --> 01:19:45.680]  Тут же должен быть блок из единичек, правильно?
[01:19:45.680 --> 01:19:49.680]  Но если тут стоит 0, тогда это число i будет больше индекса.
[01:19:50.680 --> 01:19:51.680]  Ой-ой.
[01:19:51.680 --> 01:19:53.680]  Вывод.
[01:19:53.880 --> 01:19:56.880]  Значит, получается, вот эта единичка должна стоять.
[01:19:58.880 --> 01:19:59.880]  Вот.
[01:19:59.880 --> 01:20:01.880]  Ну получается, где она должна стоять?
[01:20:02.880 --> 01:20:03.880]  Ну да.
[01:20:03.880 --> 01:20:09.880]  Действительно, где-то в конце блока нулей перед какой-то единичкой получается.
[01:20:11.880 --> 01:20:12.880]  Вот.
[01:20:13.880 --> 01:20:14.880]  Да, соответственно.
[01:20:15.880 --> 01:20:18.880]  Значит, ну тогда тут получается действительно все аккуратненько.
[01:20:18.880 --> 01:20:21.880]  Тут получается 1, 1, 1, 0, 0, 1, 0.
[01:20:22.080 --> 01:20:25.080]  Ну а тут автоматически получается зачистка.
[01:20:25.080 --> 01:20:26.080]  Естественно.
[01:20:30.080 --> 01:20:31.080]  Вот.
[01:20:31.080 --> 01:20:32.080]  А что такое?
[01:20:32.080 --> 01:20:33.080]  Да.
[01:20:34.080 --> 01:20:35.080]  Ну правда...
[01:20:35.080 --> 01:20:36.080]  Ну вот.
[01:20:36.080 --> 01:20:37.080]  Чего?
[01:20:37.080 --> 01:20:38.080]  Ну давайте, да.
[01:20:38.080 --> 01:20:39.080]  Тут должен стоять 0.
[01:20:39.080 --> 01:20:40.080]  Хорошо.
[01:20:40.080 --> 01:20:43.080]  Да, там должен быть отрезок единицы, а потом все 0.
[01:20:43.080 --> 01:20:44.080]  Да.
[01:20:44.080 --> 01:20:48.080]  Ну а теперь давайте думать, сколько тут единиц может быть?
[01:20:48.080 --> 01:20:50.080]  Ну больше, чем вот этого не будет?
[01:20:50.080 --> 01:20:51.080]  Да.
[01:20:51.280 --> 01:20:55.280]  С одной стороны, заметим, что любое количество единиц здесь нас, в принципе, вполне устроит.
[01:20:55.280 --> 01:20:56.280]  Да, да.
[01:20:56.280 --> 01:20:57.280]  Вот это нас тоже устроит.
[01:20:58.280 --> 01:20:59.280]  Так.
[01:21:00.280 --> 01:21:01.280]  Ну тогда получается.
[01:21:01.280 --> 01:21:03.280]  Получается, что у нас тогда получается.
[01:21:05.280 --> 01:21:06.280]  Ну вот.
[01:21:06.280 --> 01:21:07.280]  Ну опять же.
[01:21:07.280 --> 01:21:11.480]  Если вот опять взять, вот дорисовать, просто взять какой-то индекс и нарисовать
[01:21:11.480 --> 01:21:18.160]  все числа, которые нам подходят, начиная с самого индекса, да, то мистическим
[01:21:18.360 --> 01:21:23.400]  образом окажется, что, по большому счету, это как бы любое подходящее число, это
[01:21:23.400 --> 01:21:28.400]  число индекс, у которого взяли несколько единичных битов младших и их все занулили.
[01:21:28.400 --> 01:21:30.400]  Но там все-таки не остались все.
[01:21:30.400 --> 01:21:31.400]  Нет, тут как СФ.
[01:21:31.400 --> 01:21:34.400]  Ф, который уменьшает.
[01:21:34.400 --> 01:21:35.400]  Да.
[01:21:35.400 --> 01:21:39.400]  Ф это индекс минус х от индекса.
[01:21:39.400 --> 01:21:40.400]  Х от индекса.
[01:21:40.400 --> 01:21:44.400]  Ну Ф это, которое обнуляет младший единичный бит.
[01:21:44.400 --> 01:21:45.400]  А-а-а.
[01:21:45.400 --> 01:21:46.400]  Ну да.
[01:21:46.640 --> 01:21:50.640]  То есть, обратите, то есть, действительно, как вы только что доказали, получается
[01:21:50.640 --> 01:21:55.640]  И это такой индекс, у которого обнулили какое-то число единичных бит младших.
[01:21:55.640 --> 01:22:00.640]  И легко убедиться, что любое такое число нам подойдет.
[01:22:00.640 --> 01:22:04.640]  Поэтому получается, что, видите, то есть G и F, они такие вот, действительно, напарники.
[01:22:04.640 --> 01:22:09.640]  То есть, получается, у F, значит, интересный интервал ищется с помощью G и уже интересный
[01:22:09.640 --> 01:22:11.640]  интервал ищется с помощью F.
[01:22:11.640 --> 01:22:14.640]  Вот, понятно, да?
[01:22:14.880 --> 01:22:17.880]  Так, дальше, оказывается, достаточно удобно.
[01:22:17.880 --> 01:22:20.880]  То есть, в результате, вот.
[01:22:20.880 --> 01:22:24.880]  То есть, на самом деле, код можно написать примерно вот таким вот образом.
[01:22:26.880 --> 01:22:27.880]  Вот.
[01:22:39.880 --> 01:22:40.880]  Вот.
[01:22:41.120 --> 01:22:44.120]  Но, правда, за кое-чем точку это будет работать?
[01:22:47.120 --> 01:22:48.120]  Да.
[01:22:48.120 --> 01:22:50.120]  А тут мы уже пользуемся квадративностью?
[01:22:50.120 --> 01:22:51.120]  Нет.
[01:22:52.120 --> 01:22:53.120]  Нет, зачем?
[01:22:53.120 --> 01:22:59.120]  Нет, здесь заметим, что в такая функция все, что делает, это перебирает интересные
[01:22:59.120 --> 01:23:06.120]  полуинтервалы и для каждого из них находит, как бы, новое произведение честно.
[01:23:06.120 --> 01:23:07.120]  Это лог квадрат?
[01:23:07.120 --> 01:23:08.120]  Лог квадрат?
[01:23:08.360 --> 01:23:11.360]  Да, это лог квадрат, да.
[01:23:14.360 --> 01:23:19.360]  А мы знаем, что вот это, когда мы, мы же сейчас по ходу изменяем дело, и во время
[01:23:19.360 --> 01:23:21.360]  его еще вызываем...
[01:23:21.360 --> 01:23:26.360]  Да, да, вот есть такой психологический момент, но никаких, но это ничего страшного
[01:23:26.360 --> 01:23:27.360]  в этом нет, вот почему.
[01:23:27.360 --> 01:23:31.360]  Дело в том, что мы find product вызываем от полуинтервалов, которые вот этот
[01:23:31.360 --> 01:23:34.360]  изменяемый элемент не содержит.
[01:23:34.600 --> 01:23:40.600]  Поэтому мы лезем только в полуинтервале, который индекс не содержит, поэтому
[01:23:40.600 --> 01:23:41.600]  ничего страшного.
[01:23:43.600 --> 01:23:44.600]  Вот.
[01:23:45.600 --> 01:23:46.600]  Так что вот такой вот...
[01:23:46.600 --> 01:23:50.600]  Мы не можем что-то подоптимизировать, вот сюда то, что у нас не за алгоритм,
[01:23:50.600 --> 01:23:53.600]  а не за алгоритм, а за алгоритм.
[01:23:53.600 --> 01:23:54.600]  Да.
[01:23:54.600 --> 01:23:57.600]  Ну, как же, конечно, можем.
[01:23:57.600 --> 01:23:58.600]  Еще как можем.
[01:24:00.600 --> 01:24:01.600]  Вот.
[01:24:04.600 --> 01:24:05.600]  Вот.
[01:24:05.600 --> 01:24:07.600]  Не надо, конечно, так писать.
[01:24:07.600 --> 01:24:11.600]  Ну, идея кода на самом деле базируется вот на чем.
[01:24:13.600 --> 01:24:14.600]  Да.
[01:24:16.600 --> 01:24:19.600]  Так, да, что тут написано, в общем.
[01:24:21.600 --> 01:24:22.600]  Так.
[01:24:22.600 --> 01:24:25.600]  Как это еще, я не понял.
[01:24:26.600 --> 01:24:28.600]  Ой, все в этом...
[01:24:28.600 --> 01:24:33.600]  А на самом деле, просто идея базируется в следующем, что если рассмотреть
[01:24:33.840 --> 01:24:38.840]  последовательность полуинтервалов, вот, допустим, вот этих красивых
[01:24:38.840 --> 01:24:42.840]  полуинтервалов на f-очке, то на самом деле можно заметить маленькую
[01:24:42.840 --> 01:24:46.840]  приятную вещь, что каждый следующий полуинтервал, то есть каждый
[01:24:46.840 --> 01:24:49.840]  предыдущий полуинтервал вложен в следующий, правда?
[01:24:51.840 --> 01:24:52.840]  Поэтому на самом деле...
[01:24:54.840 --> 01:24:55.840]  Так, что происходит?
[01:24:56.840 --> 01:25:02.840]  Поэтому на самом деле оказывается, что можно на самом деле
[01:25:03.080 --> 01:25:07.080]  эти произведения на всех таких вот такого рода последовательности
[01:25:07.080 --> 01:25:10.080]  полуинтервалов насчитывать не за лог квадрат, а за логарифом
[01:25:10.080 --> 01:25:12.080]  с помощью очень простой технологии.
[01:25:13.080 --> 01:25:16.080]  Ну, самый первый полуинтервал, это тут какой-нибудь типа
[01:25:16.080 --> 01:25:19.080]  индекс, индекс плюс один, ну или там индекс минус один,
[01:25:19.080 --> 01:25:20.080]  индекс, я уж не знаю, неважно.
[01:25:21.080 --> 01:25:22.080]  Вот.
[01:25:23.080 --> 01:25:24.080]  Но теперь заметим следующее.
[01:25:26.080 --> 01:25:27.080]  Что...
[01:25:28.080 --> 01:25:29.080]  Ну вот.
[01:25:29.080 --> 01:25:31.080]  Значит, как теперь найти сумму на этом полуинтервале?
[01:25:31.320 --> 01:25:34.320]  Ну заметим, что надо просто скакать f-очками вот сюда.
[01:25:35.320 --> 01:25:37.320]  То есть заметим, так как вот этот хороший полуинтервал
[01:25:37.320 --> 01:25:38.320]  вложен вот в этот, да?
[01:25:39.320 --> 01:25:41.320]  То есть это вот какой-то хороший полуинтервал, то
[01:25:42.320 --> 01:25:43.320]  оказывается, что если вы будете из этой позиции
[01:25:44.320 --> 01:25:46.320]  скакать f-очками, то вы ровно вот сюда и придете в какой-то момент.
[01:25:47.320 --> 01:25:48.320]  Еще из-за малалаш A BC.
[01:25:49.320 --> 01:25:50.320]  Да, ну мимо не проскочите.
[01:25:51.320 --> 01:25:53.360]  Ну пока главное, что мимо не проскочите.
[01:25:54.360 --> 01:25:57.360]  Ну да, суммарно будет логорифм, потому что дальше вы от этой
[01:25:57.360 --> 01:26:00.360]  границы потом тоже будете двигаться f-очками вот сюда,
[01:26:00.360 --> 01:26:06.360]  на этих шагов, в принципе, логарифм будет. Потому что если проскочите мимо, то у вас будут два
[01:26:06.360 --> 01:26:15.680]  пересекающихся хороших полуинтервалов, которые либо от f от и до и, либо от и до g от и. Мы уже
[01:26:15.680 --> 01:26:20.760]  выяснили, что они либо любые два интервала, либо не пересекаются вообще, либо один выложим
[01:26:20.760 --> 01:26:28.920]  другой. То есть вот классического вот этого пересечения нет. Ну да, пока рассматриваем
[01:26:28.920 --> 01:26:36.080]  только полуинтервалы f. Сейчас, но у нас уже каждый раз будет либо увеличение f на 1,
[01:26:36.080 --> 01:26:43.280]  либо g на 1. Но это это уже более глубоко. Мы пока этого не замечаем. Мы пока замечаем,
[01:26:43.280 --> 01:26:49.120]  что каждый следующий, каждый предыдущий вложен в следующий. Вот, и тогда получается,
[01:26:49.120 --> 01:26:54.120]  что тут левую границу, то есть как бы что делать, если у вас есть сумма на полуинтервале, и надо
[01:26:54.120 --> 01:27:00.200]  вот расширить полуинтервал, но тогда левую границу значит добиваем f, правую границу добиваем
[01:27:00.200 --> 01:27:06.040]  g. Вот, ну и оказывается, что суммарное количество шагов и влево, и вправо у вас будет, оказывается,
[01:27:06.040 --> 01:27:11.040]  от логарифма, ну потому что сколько вы можете с g скакать, чтобы выйти за n или сколько скакать
[01:27:11.040 --> 01:27:18.640]  f, чтобы прийти в ноль. Вот, то есть вот такая, то есть вот таким вот образом можно, то есть
[01:27:18.640 --> 01:27:22.200]  можно вот даже на эту на эту тему вот такой код экзотический написать.
[01:27:22.200 --> 01:27:42.480]  Или нет. Да, но этого делать не надо, конечно. Или надо. Ну да, тут, конечно, да, такая вселенная,
[01:27:42.480 --> 01:27:47.960]  у кого-то там это просто вселенская грузь, конечно, такая от этого кода. Зачем вообще такое писать? Ну
[01:27:47.960 --> 01:27:52.200]  да, потому что действительно, на самом деле, конечно, такое писать, если вспомнить дерево
[01:27:52.200 --> 01:27:56.920]  отрезков, то такого писать не надо. Нет, не в смысле, что надо вместо этого написать дерево отрезков,
[01:27:56.920 --> 01:28:05.960]  конечно. Вот, но на самом деле, конечно, и конкретно Фенрики, да, ну тут просто старая презентация,
[01:28:05.960 --> 01:28:12.080]  там просто, знаете, ой, как бы наука в голове автора с тех пор, конечно, немножко развилась.
[01:28:12.080 --> 01:28:26.200]  Так что да, нет, кофейпаст не надо, потому что на самом деле мысль простая, то есть на самом деле
[01:28:26.200 --> 01:28:31.320]  вместо того, чтобы рассматривать ТФТЖ, можно рассматривать все интервалы подряд, потому что
[01:28:31.320 --> 01:28:36.520]  заметим, что нам нужно, как мы помним из картинки с деревом отрезков, что у нас есть какой-то
[01:28:36.520 --> 01:28:42.520]  исходный полуинтервал, ну а дальше у нас есть там бывает следующий полуинтервал, потом следующий
[01:28:42.520 --> 01:28:48.480]  полуинтервал, потом еще следующий полуинтервал и так далее. То есть у нас точно все вот полуинтервалы
[01:28:48.480 --> 01:28:56.800]  длины 1, длины 2, длины 4, длины 8 и так далее. И более того, можно заметить, что каждый следующий,
[01:28:56.800 --> 01:29:05.480]  на самом деле, получается из предыдущего путем домножения слева или справа на один не меняющийся
[01:29:05.480 --> 01:29:18.640]  полуинтервал. Вот видите, да? Да, тут не совсем такая картинка, но суть на самом деле такая,
[01:29:18.640 --> 01:29:24.360]  просто идея такая, что исходно у нас есть полуинтервал, ну какой-нибудь там допустим,
[01:29:24.360 --> 01:29:34.000]  равен он, понятно, индекс и индекс плюс один. И теперь думаем, так есть полуинтервал длины 2,
[01:29:34.000 --> 01:29:43.920]  который его содержит. Но как его найти? Ну найти его очень просто. Тут возникает вопрос,
[01:29:43.920 --> 01:29:53.720]  этот полуинтервал, он как бы из f или от z? Вот, но если он, ну проверить очень легко просто там,
[01:29:53.720 --> 01:30:01.400]  верно ли, что вот эта штука равна f от этой штуки? Понимаете, да? Кстати, интересно,
[01:30:02.360 --> 01:30:09.240]  а вот можно сразу заметить, что вот есть такая система уравнений f от l равно r, g от r равно l.
[01:30:09.240 --> 01:30:29.440]  Спрашивается, есть ли у этой системы решение? Кто пустой? Я не типа, да? Заметим, что, не, ну как
[01:30:29.440 --> 01:30:43.680]  сказать, l равно r быть не может у нас? Ну разве что, да. Но если предположить, что g от 0 все-таки не
[01:30:43.680 --> 01:30:49.200]  определено, потому что оно в дереве отрезков не вписывается, то на самом деле оказывается,
[01:30:49.200 --> 01:30:54.880]  что таких решений нет. Раз решений у этой системы нет, значит, если у нас есть интересный
[01:30:54.880 --> 01:30:59.880]  полуинтервал, то мы можем легко понять, он из g или от f однозначно. То есть просто проверить,
[01:30:59.880 --> 01:31:06.400]  верно ли, что l равно f от r, да или нет? Если да, то он из f, если нет, то значит он из g. Но если он из
[01:31:06.400 --> 01:31:18.360]  f, то значит, у него слева есть вот такой напарник, и их объединение дает какой-то отрезок. Правда,
[01:31:18.360 --> 01:31:24.760]  непонятно, он из f или из g, но уж, по крайней мере, сумму на нем вы найти можете легко. Понимаете,
[01:31:24.760 --> 01:31:38.960]  да? На этот раз да. Ну да, ну по крайней мере код будет, ну код ладно, может не будем писать код,
[01:31:38.960 --> 01:31:47.960]  но конечно код будет сильно проще, чем вот это. Ну ладно, не сильно. Хотя... Один вопрос, зачем
[01:31:47.960 --> 01:32:01.560]  это писать? Ну, я подозреваю, что это работает примерно за ту же скорость. Ну может быть,
[01:32:01.560 --> 01:32:08.560]  вот это чуть быстрее, а может и нет. Хотя пишется-то примерно за столько же, да. Только там вам придется
[01:32:08.560 --> 01:32:14.600]  с индексами пошаманить. Нет, ну мы понимаем, кто у нас родители, мы не теряем на левой и правой,
[01:32:14.600 --> 01:32:22.960]  поэтому нам гораздо меньше. Не, ну там код на самом деле нет, ну давайте попробуем, кстати. Так,
[01:32:22.960 --> 01:32:37.920]  что там у нас с кодом-то, так. Ох.
[01:32:52.960 --> 01:33:21.920]  Так, ну ладно, напишем так. Ну и всем смотрите. Так, ладно, вот, кстати, альтернативная версия
[01:33:21.920 --> 01:33:28.880]  фенвика, ну ладно. То есть, на самом деле, такой встречный фенвик может выглядеть примерно
[01:33:28.880 --> 01:33:47.240]  следующим образом. Так, как вы там писали, t-matrix, да. Ну вот, ну допустим, так, как у меня там написано
[01:33:47.240 --> 01:34:00.520]  было, uint32r. Ну и допустим, что lr это полуинтервал. Я так напишу. Тот же самый find product,
[01:34:00.520 --> 01:34:11.960]  только попроще. Ну, который был вот, вот этот вот. Вот, на самом деле, его можно писать сильно
[01:34:11.960 --> 01:34:25.760]  проще. А, хотя нет, подождите, какой find product? Ой боже, и все, я с ума сошел. Да, assign. Да,
[01:34:25.760 --> 01:34:40.160]  то есть, на самом деле, да, t-matrix atu key и там, соответственно, uint32index. Значит, смотрите.
[01:34:40.160 --> 01:34:53.880]  Значит, пишем так, uint32l равно изначально индекс. Вот, uint32r равно индекс плюс 1.
[01:34:53.880 --> 01:35:11.600]  Ну и, конечно, t-matrix current product равно, соответственно, пока ключ. Вот, понятно? Значит,
[01:35:11.600 --> 01:35:20.400]  ну и дальше будем говорить. While, ну допустим, r меньше либо равно n. Ну ладно, там в каком-то
[01:35:20.400 --> 01:35:27.000]  локальном n, конечно, мы же там. Значит, дальше тут два случая. То есть, мы находимся в полуинтервале,
[01:35:27.000 --> 01:35:31.560]  на котором у нас есть сумма, которая равна, то есть произведение, которое равно current product.
[01:35:31.560 --> 01:35:38.120]  Мы его хотим, во-первых, значит, записать, куда надо, а во-вторых, там, проапдейтить отрезок.
[01:35:38.120 --> 01:35:43.160]  Делать мы это будем так. То есть, во-первых, то есть, надо рассмотреть два случая. Если оказалось,
[01:35:43.160 --> 01:35:52.520]  что f of r равно l, даже лучше по-другому будет писать, l равно f of r, то тогда идея очевидна. Тогда мы
[01:35:52.520 --> 01:36:02.520]  пишем, что tf of r равно, соответственно, current product. Так, но заметьте, тогда у нас есть вот этот
[01:36:02.520 --> 01:36:08.520]  отрезок tf of r, в котором мы пишем current product, а напарник его находится в tg of r, очевидно.
[01:36:08.680 --> 01:36:15.080]  Поэтому пишем, что current product равно current product,
[01:36:15.080 --> 01:36:29.080]  product умножить нас, соответственно, tg of r. Ну вот, ну и типа того. Хотя ладно,
[01:36:29.080 --> 01:36:34.320]  тут лучше, конечно, написать, если r равно n, то, наверное, мы брякаемся.
[01:36:39.480 --> 01:36:50.480]  Вот, и дальше, соответственно, r равно g of t. Вот, соответственно, в противном случае,
[01:36:50.480 --> 01:36:56.720]  что мы делаем? В противном случае, значит, у нас напарник слева. То есть, наоборот, пишем,
[01:36:56.720 --> 01:37:06.480]  tg of l равно current product. Ну вот, но l у нас, конечно, заведомо больше нуля, поэтому тут уже без всяких
[01:37:06.480 --> 01:37:12.240]  ифов. То есть, теперь внимание, current product равно, соответственно, внимание, тут мы, наоборот,
[01:37:12.240 --> 01:37:17.920]  пишем tf of l умножить. То есть, видите, напоминаю, у нас нет коммутативности, поэтому нам принципиально.
[01:37:17.920 --> 01:37:33.280]  И l равно f of l. Ладно, тут нижнее подчеркиваем. А, и мы все, в общем-то. То есть, вот на самом деле,
[01:37:33.280 --> 01:37:41.440]  код можно написать вот таким нехитрым образом. Но это уже сопоставимо, по-моему, по сложности,
[01:37:41.440 --> 01:37:57.280]  с дерева снизу. Вот. Так что вот такой вот красота, на самом деле. Так что да. Ну,
[01:37:57.280 --> 01:38:10.320]  можете вот так написать, конечно. Но после вот этого, мне кажется, не нужно. А, смотрите,
[01:38:11.320 --> 01:38:34.600]  я знаю, что надо делать. Ну а вы думаете, те слайды как-то принципиально по-другому делались?
[01:38:34.600 --> 01:38:46.040]  Были надежды на это. Правда, ой, что-то, что-то, шрифт какой-то подслеповатый. Ну ладно, так тоже
[01:38:46.040 --> 01:39:15.600]  пойдет. Ну ладно. Так вот. Ну что ж. Ну как теперь в таком виде кода уже действительно
[01:39:15.600 --> 01:39:20.320]  легко понять, что действительно тут все работает за логорифом, причем так железобетонно и надежно.
[01:39:20.320 --> 01:39:28.280]  Вот. Так что получается массив А мы при этом не храним. Кстати, обратите внимание, мы храним
[01:39:28.280 --> 01:39:33.440]  просто чисто два массива. Да, ну суммарно по памяти это буквально идентично дереву отрезков.
[01:39:33.440 --> 01:39:48.560]  Ну вот. Ну и нормально. Так, ну что, есть ли тут какие-то вопросы? Так, ну просто у меня
[01:39:48.560 --> 01:40:08.760]  есть ощущение, что пришло время перерыва. Нет, почему-то общее предупреждение. Задачи в кубке
[01:40:08.760 --> 01:40:19.160]  ФТИ по сложности отсортированы, обязаны быть не. Там часто получается так, что они примерно по сложности отсортированы,
[01:40:19.160 --> 01:40:25.160]  но бывает что-нибудь в последних халеаптоваях. Нет, давайте в белом, то это в последние две по-другому.
[01:40:25.160 --> 01:40:38.880]  Но есть утверждение, что в предпоследние две по-другому. По крайней мере. Честно, я возможно не придумал
[01:40:38.880 --> 01:41:02.160]  в последние две по-другому. Вот, значит, поехали дальше. Так, сейчас у нас будет немножко такой приятности,
[01:41:02.160 --> 01:41:08.480]  потому что мы изучили, как работает дерево Фенлика, искреченное дерево Фенлика, но возможно в
[01:41:08.480 --> 01:41:16.680]  будущем мы почти не будем пользоваться, теперь смотреть, как оно устроено. Нет, хотя нет, но для того, чтобы изучить дерево Фенлика,
[01:41:16.680 --> 01:41:28.560]  дерево Фенлика, нам, конечно, потребуется изучить, как оно устроено. Нет, тут, нет, нам потребуется. Нет, там даже не для профов, там,
[01:41:28.560 --> 01:41:35.320]  что, извините, в каждой ячейке дерева Фенлика вам придется хранить дерево Фенлика. Так что для этого придется
[01:41:35.360 --> 01:41:44.200]  понимать, как устроено дерево Фенлика. Я имею в виду следующее. Вот сейчас мы перейдем к следующей задаче. Сейчас мы будем делать прибавление на отрезки.
[01:41:44.200 --> 01:42:00.360]  Да, сейчас мы забываем о препарации. Мы слов вспоминаем, что у нас есть классическое сложение, и мы хотим искать сумму на отрезке и прибавлять теперь на отрезки. Вот такая у нас мечта.
[01:42:00.400 --> 01:42:10.400]  Вот. Но мы будем не просто мечтать, но и воплощать мечты. Да, все это мы будем делать с помощью дерева Фенлика.
[01:42:10.440 --> 01:42:26.440]  Да. Значит, смотри. Начнем мы вот с чего. Ну, давайте, да. Конечно, важную роль у нас в игре будет, будет, конечно, у дерева Фенлика, у дерева Нот, у префиксных сумм.
[01:42:26.440 --> 01:42:55.480]  Естественно. Вот. Ну вот, но начнем, начать можно даже не с этой задачи. Ну да, потому что префиксные суммы возникают где? Ну, допустим, если нам не надо было бы обновлять массив вообще, а нужно было бы изменять только, только искать там, скажем, сумму на подотреске, да, статической массиве, то с помощью префиксных сумм мы бы сделали легко, да, там, вот, при подсчета, вот, единицы, там, ответа на любой запрос. Верно, да?
[01:42:56.480 --> 01:43:00.480]  Или нет? Вот. Вот.
[01:43:01.480 --> 01:43:13.480]  Но, оказывается, значит, давайте сейчас попробуем себе упростить задачу. Представим, вот мы с помощью обычного дерева Фенлика научились изменять один элемент и искать сумму на подотреске. Было дело?
[01:43:13.480 --> 01:43:15.480]  Было.
[01:43:15.520 --> 01:43:17.520]  Было.
[01:43:17.520 --> 01:43:25.520]  А теперь, смотрите, сейчас мы неожиданно себе, скажем так, смотрите, теперь давайте себе представим, что мы хотим прибавлять на подотреске.
[01:43:29.520 --> 01:43:31.520]  И все.
[01:43:31.520 --> 01:43:34.520]  Ну можно ничего не делать, запросов никаких нет?
[01:43:34.560 --> 01:43:36.560]  Ну конечно, да.
[01:43:36.560 --> 01:43:54.560]  Ну а чтобы, конечно, избежать метода УГУ, мы скажем, что, знаете, такая классическая постановка задачи, у нас будет куча запросов, типа, на прибавляй на подотреске, на прибавляй на подотреске, вот, а потом скажите в конце, что получилось.
[01:43:54.600 --> 01:43:56.600]  Ну да.
[01:43:56.600 --> 01:43:58.600]  Ну вот.
[01:43:58.600 --> 01:44:04.600]  Ну и здесь просто важно, да, пока деревья Фенлика для этой задачи не надо, но здесь просто очень важно, действительно, причеркнуть этот метод.
[01:44:04.600 --> 01:44:10.600]  Значит, смотрите, как у нас, значит, делается очень просто. Допустим, у нас есть мотив А, который равен?
[01:44:10.600 --> 01:44:12.600]  Устроим разность приносить.
[01:44:12.600 --> 01:44:14.600]  Да, ну обязательно, да, вот.
[01:44:14.600 --> 01:44:16.600]  Но это просто обязательно надо обсудить.
[01:44:16.600 --> 01:44:18.600]  Что? Кто шарит? Куда шарит?
[01:44:19.600 --> 01:44:21.600]  Шарит ПТР.
[01:44:21.600 --> 01:44:23.600]  А, ПТР шарит.
[01:44:23.640 --> 01:44:25.640]  Ну да.
[01:44:25.640 --> 01:44:27.640]  Так.
[01:44:27.640 --> 01:44:29.640]  ПТР шарит, да.
[01:44:29.640 --> 01:44:31.640]  Это да.
[01:44:31.640 --> 01:44:33.640]  Да, ну вот.
[01:44:33.640 --> 01:44:35.640]  Значит, идея такая.
[01:44:35.640 --> 01:44:37.640]  Значит, мысль может возникнуть такая.
[01:44:37.640 --> 01:44:39.640]  Так, вот, допустим, мы тут решили что-то поприбавлять.
[01:44:39.640 --> 01:44:43.640]  Вот к этому подотреску мы решили прибавить плюс 57.
[01:44:46.640 --> 01:44:48.640]  Если делать это в массиве А,
[01:44:48.640 --> 01:44:50.640]  Ну почему 57?
[01:44:50.680 --> 01:44:52.680]  А какие еще числа мы прибавляем вообще?
[01:44:52.680 --> 01:44:54.680]  Вот.
[01:44:54.680 --> 01:44:56.680]  Реально других титулов нет.
[01:44:56.680 --> 01:44:58.680]  Летово.
[01:44:58.680 --> 01:45:00.680]  Ну нет, есть 179, конечно.
[01:45:00.680 --> 01:45:02.680]  Есть нет.
[01:45:02.680 --> 01:45:04.680]  Летово это не число.
[01:45:04.680 --> 01:45:06.680]  Почему?
[01:45:06.680 --> 01:45:08.680]  Нет, летово и фото летово, и прочее.
[01:45:08.680 --> 01:45:10.680]  Фоксфорды мы будем использовать.
[01:45:10.680 --> 01:45:12.680]  Ну вот.
[01:45:14.680 --> 01:45:18.680]  Извините, я не хотел обидеть выпускников Фоксфорда. Извините.
[01:45:20.680 --> 01:45:22.680]  Ха-ха-ха.
[01:45:25.680 --> 01:45:27.680]  Кирилл, а что пока снялся?
[01:45:33.680 --> 01:45:35.680]  Ну да.
[01:45:35.680 --> 01:45:37.680]  Ну, как-то я думал, можно, да, давайте.
[01:45:37.680 --> 01:45:39.680]  Нет, что, можно, можно с энергию вставить.
[01:45:39.680 --> 01:45:41.680]  У летовцев вены полопались просто.
[01:45:41.680 --> 01:45:43.680]  У кого?
[01:45:43.680 --> 01:45:47.680]  У летовцев в этой аудитории полопались вены от напряжения.
[01:45:47.720 --> 01:45:51.720]  Знаете, Катя не похожа на человека, который полопался веном.
[01:45:51.720 --> 01:45:53.720]  Катя из летового?
[01:45:53.720 --> 01:45:55.720]  Точно нет.
[01:46:03.720 --> 01:46:05.720]  Вот, значит, смотрите.
[01:46:05.720 --> 01:46:07.720]  Значит, да, пока мы тут обсуждали какие-то там школы,
[01:46:07.720 --> 01:46:09.720]  значит, я тут нарисовал еще один массив.
[01:46:09.720 --> 01:46:15.720]  Значит, смотрите, идея такая, давайте вместо массива A хранить частичные разности.
[01:46:15.760 --> 01:46:19.760]  Да, претекстные разности, ладно, разности соседей.
[01:46:19.760 --> 01:46:23.760]  Он просто так, вместо каждого элемента будет пройти разность этого элемента
[01:46:23.760 --> 01:46:25.760]  и предыдущего.
[01:46:37.760 --> 01:46:41.760]  Там изначально было хорошо, как будто ноль был.
[01:46:41.800 --> 01:46:45.800]  Ну, кстати, Кир, что приятно?
[01:46:45.800 --> 01:46:51.800]  Заметим, что, кстати, операция взять такие вот разности соседних
[01:46:51.800 --> 01:46:57.800]  и операция найти префиксные суммы, это взаимообратная операция.
[01:46:57.800 --> 01:46:59.800]  То есть, если я возьму префиксные суммы от этого массива,
[01:46:59.800 --> 01:47:01.800]  я найду буквально массив A.
[01:47:01.800 --> 01:47:03.800]  Вот, удобно, правда?
[01:47:05.800 --> 01:47:06.800]  Но чем нам это приятно?
[01:47:06.800 --> 01:47:07.800]  Приятно мы на этом обучим.
[01:47:07.840 --> 01:47:11.840]  Если мы хотим теперь прибавить в массиве A57 на подотрезке,
[01:47:11.840 --> 01:47:16.840]  то оказывается, что в случае рейна частичных разностей
[01:47:16.840 --> 01:47:18.840]  тут становится все удобно,
[01:47:18.840 --> 01:47:21.840]  потому что меняются только две разности.
[01:47:21.840 --> 01:47:24.840]  Вот это и, соответственно, вот это.
[01:47:24.840 --> 01:47:26.840]  Удобно, правда?
[01:47:26.840 --> 01:47:28.840]  Невероятно.
[01:47:28.840 --> 01:47:32.840]  Ну да, как говорили в одном мистическом шоу, поразительное,
[01:47:32.840 --> 01:47:34.840]  не могу бы это поверить.
[01:47:34.880 --> 01:47:38.880]  Теперь элемент, это просто взять сумму на префикс.
[01:47:38.880 --> 01:47:40.880]  Ну да, то есть теперь,
[01:47:40.880 --> 01:47:42.880]  да, во-первых, действительно,
[01:47:42.880 --> 01:47:44.880]  если у вас просто надо сделать это,
[01:47:44.880 --> 01:47:46.880]  потом в конце восстановить массив,
[01:47:46.880 --> 01:47:48.880]  то как бы вы просто делаете все операции за УАД единицы
[01:47:48.880 --> 01:47:53.880]  и потом по этим разностям восстанавливаете массив очень легко.
[01:47:53.880 --> 01:47:55.880]  В целом, нам вообще коротко.
[01:47:57.880 --> 01:47:59.880]  Вот, конкретно тут пока не нужно.
[01:47:59.880 --> 01:48:01.880]  Ну а теперь следующая мысль.
[01:48:01.880 --> 01:48:03.880]  Теперь давайте себе представим,
[01:48:03.920 --> 01:48:06.920]  что мы теперь хотим в онлайне все-таки получать
[01:48:06.920 --> 01:48:08.920]  не только прибавление на отрезки,
[01:48:08.920 --> 01:48:10.920]  но и получать
[01:48:12.920 --> 01:48:14.920]  элемент вот такой.
[01:48:14.920 --> 01:48:16.920]  А кто там у тебя сейчас в позиции пост находится?
[01:48:16.920 --> 01:48:18.920]  Ну это Фенрик тогда уже.
[01:48:18.920 --> 01:48:19.920]  Вот.
[01:48:19.920 --> 01:48:21.920]  Ну это получается мы забабакиваем просто дерево Фенрика,
[01:48:21.920 --> 01:48:23.920]  ну или там, я не знаю, дерево отрезков
[01:48:23.920 --> 01:48:25.920]  на массиве префиксных разностей.
[01:48:25.920 --> 01:48:27.920]  Как их называть?
[01:48:27.920 --> 01:48:30.920]  Хочется называть вообще частичные разности.
[01:48:30.920 --> 01:48:32.920]  Ну давайте будем их называть частичные разности
[01:48:32.960 --> 01:48:33.960]  или простоты.
[01:48:33.960 --> 01:48:34.960]  Да.
[01:48:34.960 --> 01:48:35.960]  Вот так.
[01:48:35.960 --> 01:48:37.960]  Тогда получается, что get от pos
[01:48:37.960 --> 01:48:41.960]  это всего лишь там просто сумма на префиксе
[01:48:41.960 --> 01:48:43.960]  в массиве dA очень легко.
[01:48:43.960 --> 01:48:44.960]  Вот.
[01:48:44.960 --> 01:48:46.960]  Ну просто важный такой лайфхак.
[01:48:46.960 --> 01:48:47.960]  Иногда там в Олимпиадах тоже помогает,
[01:48:47.960 --> 01:48:48.960]  поэтому вот помнить полезно.
[01:48:48.960 --> 01:48:49.960]  Ну и вообще.
[01:48:51.960 --> 01:48:52.960]  Вот.
[01:48:52.960 --> 01:48:54.960]  Но нам хочется, конечно, получать.
[01:48:54.960 --> 01:48:57.960]  Нам хочется, конечно, и прибавлять на подотрезки
[01:48:57.960 --> 01:48:59.960]  и искать сумму на подотрезки.
[01:49:00.000 --> 01:49:02.000]  Или хотя бы сумму на префиксе.
[01:49:02.000 --> 01:49:04.000]  Ну если мы научимся сумму на префиксе искать,
[01:49:04.000 --> 01:49:06.000]  то, наверное, сумму на подотрезке мы тоже легко найдем.
[01:49:06.000 --> 01:49:07.000]  Правда?
[01:49:08.000 --> 01:49:09.000]  Так.
[01:49:09.000 --> 01:49:10.000]  Итак.
[01:49:10.000 --> 01:49:12.000]  Сумма на подотрезке.
[01:49:15.000 --> 01:49:17.000]  Значит, для этого, ну там можно,
[01:49:17.000 --> 01:49:21.000]  да, знаете, по-разному можно делать, знаете,
[01:49:21.000 --> 01:49:25.000]  да, можно просто делать какую-то минимоническую операцию
[01:49:25.000 --> 01:49:27.000]  и заметить, что они работают.
[01:49:27.000 --> 01:49:28.000]  Вот.
[01:49:28.040 --> 01:49:29.040]  Ну и сейчас убит.
[01:49:29.040 --> 01:49:30.040]  Но мы будем делать так.
[01:49:30.040 --> 01:49:32.040]  Итак, мы хотим найти сумму на префиксе.
[01:49:32.040 --> 01:49:33.040]  Внимание.
[01:49:33.040 --> 01:49:34.040]  Так.
[01:49:34.040 --> 01:49:35.040]  Внимание.
[01:49:35.040 --> 01:49:37.040]  Итак, мы хотим найти сумму на префиксе.
[01:49:38.040 --> 01:49:40.040]  То есть сумму вот таких элементов.
[01:49:45.040 --> 01:49:47.040]  Но, как вы уже сказали, нам их,
[01:49:47.040 --> 01:49:49.040]  так, хранить не очень хочется,
[01:49:49.040 --> 01:49:51.040]  поэтому мы пойдем в ДАЖ.
[01:49:53.040 --> 01:49:54.040]  Ну, вот.
[01:49:54.080 --> 01:49:58.080]  То есть, каждая алина я пока записываю вот там.
[01:49:59.080 --> 01:50:00.120]  Что же я делаю дальше?
[01:50:00.120 --> 01:50:02.120]  Замечаем, что
[01:50:02.120 --> 01:50:04.120]  да, я замечаю, что действительно,
[01:50:04.120 --> 01:50:06.120]  я перебираю ДАЖ иOK,
[01:50:06.120 --> 01:50:22.120]  и которые я буду использовать,
[01:50:22.120 --> 01:50:33.120]  Что действительно, я перебираю ДАшки от 0 до f и каждую из них просто суммирую какое-то количество раз.
[01:50:33.120 --> 01:50:36.120]  То есть я могу вот так написать.
[01:50:36.120 --> 01:50:46.120]  То есть я могу написать dAj умножить на... а сколько раз я суммирую dAjt?
[01:50:46.120 --> 01:50:50.120]  R-j...
[01:51:11.120 --> 01:51:15.120]  Ну посмотрите, этот элемент мы смотрим один раз.
[01:51:15.120 --> 01:51:18.120]  R-1 два раза.
[01:51:18.120 --> 01:51:21.120]  А R-2 получается три раза.
[01:51:21.120 --> 01:51:23.120]  Ну и так далее.
[01:51:23.120 --> 01:51:28.120]  Поэтому получается, когда мы дойдем до нуля, нам будет все-таки R-1 должен.
[01:51:28.120 --> 01:51:30.120]  Вот.
[01:51:30.120 --> 01:51:33.120]  Ну да, R-x это как раз R.
[01:51:33.120 --> 01:51:35.120]  R-t элемент сколько?
[01:51:35.120 --> 01:51:37.120]  У нас же первый элемент всегда наливает.
[01:51:37.120 --> 01:51:39.120]  R-t элемент один.
[01:51:39.120 --> 01:51:42.120]  Мы от нуля даем, видите, суммируем.
[01:51:42.120 --> 01:51:44.120]  R-t элемент один раз, да, все.
[01:51:44.120 --> 01:51:46.120]  Вот.
[01:51:46.120 --> 01:51:48.120]  Не, ну как бы Д, да?
[01:51:48.120 --> 01:51:51.120]  Значит, запишем теперь это по-другому.
[01:51:51.120 --> 01:51:58.120]  Я могу это описать как R плюс один сумма дАжитых.
[01:51:58.120 --> 01:52:06.120]  Да, и это очень приятно, потому что вот эту штуку мы уже с помощью обычного фенлика искать научились.
[01:52:06.120 --> 01:52:09.120]  И теперь еще один маленький подлянка.
[01:52:09.120 --> 01:52:16.120]  Ну почему?
[01:52:16.120 --> 01:52:19.120]  Ну это элементарно.
[01:52:19.120 --> 01:52:23.120]  Ну а теперь, да, вот такую сумму, конечно, из вот этого массива мы не посчитаете.
[01:52:23.120 --> 01:52:24.120]  Заводим еще один.
[01:52:24.120 --> 01:52:26.120]  Да-да, ну спокойно, давай.
[01:52:26.120 --> 01:52:29.120]  Что ты так любишь спойлеры?
[01:52:29.120 --> 01:52:30.120]  Спокойно.
[01:52:30.120 --> 01:52:31.120]  Спойлеры?
[01:52:31.120 --> 01:52:33.120]  Ну блин, баяны разбираем.
[01:52:33.120 --> 01:52:35.120]  Ну не баян, а классик.
[01:52:35.120 --> 01:52:41.120]  Скажем так, все, что рассказывается практически на всех предметах на самом деле в данном Узе,
[01:52:41.120 --> 01:52:43.120]  или в любом-любом, является баянами.
[01:52:43.120 --> 01:52:46.120]  Не все является настолько баянами.
[01:52:46.120 --> 01:52:47.120]  Не знаю.
[01:52:47.120 --> 01:52:48.120]  Смотря для кого.
[01:52:48.120 --> 01:52:49.120]  Смотря для кого.
[01:52:49.120 --> 01:52:50.120]  Ну, как сказать.
[01:52:50.120 --> 01:52:53.120]  А потом на экзамене все это спрошу, ага.
[01:52:53.120 --> 01:53:02.120]  Давай вот задание, допиши, да, допиши мне это, давай, трехмерного фенлика с прибавлением на попринянную пипель.
[01:53:03.120 --> 01:53:06.120]  Я это один раз писал, и мне не понравилось.
[01:53:06.120 --> 01:53:07.120]  Молодец.
[01:53:09.120 --> 01:53:10.120]  Ну вот.
[01:53:10.120 --> 01:53:12.120]  С прибавлением на попринянную пипель.
[01:53:12.120 --> 01:53:13.120]  Ну все равно, дальше, да.
[01:53:13.120 --> 01:53:15.120]  Тут все просто.
[01:53:15.120 --> 01:53:18.120]  В конце концов, если вы уже так понял, что тут настолько все неинтересно,
[01:53:18.120 --> 01:53:22.120]  можно в конце концов взять вот все вот это вот, пойти вот там в коридорчик,
[01:53:22.120 --> 01:53:27.120]  там вот столик стоит с диванчиками, там автоматами, можно вот там для нас прекрасно порешать.
[01:53:28.120 --> 01:53:30.120]  Дальше это все лучше, чем выпить.
[01:53:31.120 --> 01:53:32.120]  Называйте.
[01:53:32.120 --> 01:53:34.120]  Нет, ну на самом деле, нет, можно еще по-любому, ладно.
[01:53:34.120 --> 01:53:36.120]  Ну поднимите руки, кто все это действительно и так знает.
[01:53:36.120 --> 01:53:37.120]  Что конкретно?
[01:53:37.120 --> 01:53:42.120]  Ну вот, вот это вот все, вот эту всю технологию с прибавлением на подотрезки с помощью дерева Федрика.
[01:53:42.120 --> 01:53:43.120]  Ну давайте так.
[01:53:43.120 --> 01:53:45.120]  Может я вас действительно все зря рассказываю?
[01:53:48.120 --> 01:53:49.120]  Окей.
[01:53:49.120 --> 01:53:50.120]  Нет.
[01:53:50.120 --> 01:53:51.120]  Большинство все-таки не знает.
[01:53:51.120 --> 01:53:52.120]  Так что, нет, увы.
[01:53:52.120 --> 01:53:53.120]  Лом, самый умный.
[01:53:54.120 --> 01:53:55.120]  Так что, нет.
[01:53:57.120 --> 01:53:58.120]  Так что нет, да.
[01:53:58.120 --> 01:53:59.120]  Не все так просто.
[01:54:00.120 --> 01:54:01.120]  Ну вот.
[01:54:01.120 --> 01:54:02.120]  Ну да.
[01:54:02.120 --> 01:54:06.120]  Да, суммой заключает в том, что приехать ко мне в Лоши, я просто, я же это все и рассказывал.
[01:54:06.120 --> 01:54:07.120]  При чем?
[01:54:07.120 --> 01:54:08.120]  А, ну может и не я.
[01:54:08.120 --> 01:54:10.120]  Не, без значения, я все и делаю.
[01:54:10.120 --> 01:54:11.120]  А Локшай тоже рассказываю?
[01:54:11.120 --> 01:54:12.120]  Это ведь те рассказывали?
[01:54:12.120 --> 01:54:15.120]  О, слушай, вот это точно, ну типа младших параллелей.
[01:54:15.120 --> 01:54:16.120]  Ух ты, зачем это?
[01:54:16.120 --> 01:54:18.120]  Ух ты, а кто это Локшай рассказывал?
[01:54:18.120 --> 01:54:19.120]  Это бесполезно, зачем он это знает?
[01:54:19.120 --> 01:54:21.120]  Нет, Лоши будет на Ферме рассказывать.
[01:54:21.120 --> 01:54:25.120]  Нет, ну нет, а Ферме, конечно, Лоши это я рассказываю, да, Локшай это кто рассказывал?
[01:54:25.120 --> 01:54:30.120]  В Лоши я точно видел это где-то там, в третьей параллели может быть.
[01:54:31.120 --> 01:54:33.120]  Нет, Лоша это понятно.
[01:54:33.120 --> 01:54:34.120]  Это вот эта параллель.
[01:54:34.120 --> 01:54:35.120]  Нет, вот третья параллель.
[01:54:35.120 --> 01:54:37.120]  Это очень, очень элементная Лоша.
[01:54:37.120 --> 01:54:38.120]  Ну это да.
[01:54:38.120 --> 01:54:39.120]  Ну правда.
[01:54:39.120 --> 01:54:40.120]  Испитива.
[01:54:40.120 --> 01:54:41.120]  Нет, ну окей, окей.
[01:54:41.120 --> 01:54:42.120]  Ну там, ладно.
[01:54:42.120 --> 01:54:43.120]  Рассказывай, ну вот.
[01:54:43.120 --> 01:54:44.120]  Ну не важно.
[01:54:44.120 --> 01:54:47.120]  Нет, просто, нет, интересно, кто это параллель еще рассказывает.
[01:54:47.120 --> 01:54:53.120]  Потому что Лоша там скорее всего просто рассказала, рассказала либо я, либо там, собственно, по моему же плану.
[01:54:53.120 --> 01:54:54.120]  Или что-то в этом роде.
[01:54:55.120 --> 01:54:56.120]  Вот.
[01:54:56.120 --> 01:54:59.120]  Поэтому просто если Лоша рассказывает, кто это еще рассказывает.
[01:55:00.120 --> 01:55:01.120]  Так, ну давайте так.
[01:55:01.120 --> 01:55:02.120]  Вот вам-то кто рассказывал, кстати?
[01:55:03.120 --> 01:55:04.120]  Это в основе.
[01:55:05.120 --> 01:55:06.120]  В основе?
[01:55:12.120 --> 01:55:14.120]  А, ну точно, Илья Степанов, да, так.
[01:55:15.120 --> 01:55:16.120]  А, ну откуда он?
[01:55:17.120 --> 01:55:18.120]  Не-не-не.
[01:55:18.120 --> 01:55:19.120]  Не-не-не.
[01:55:19.120 --> 01:55:20.120]  Ну я не знаю такого.
[01:55:20.120 --> 01:55:23.120]  Именно Ильи Степанова, по-моему, называется вот этого в программе не было.
[01:55:26.120 --> 01:55:27.120]  Это уже знали всех.
[01:55:29.120 --> 01:55:30.120]  Мне не знали.
[01:55:31.120 --> 01:55:32.120]  Ну я не знаю, я откуда-то не знал.
[01:55:32.120 --> 01:55:37.120]  Я это узнал, потому что когда-то там прочитал подобное там просто в блоге Петро Митекчева на самом деле.
[01:55:37.120 --> 01:55:42.120]  И то он, на самом деле, и то он выдал это, что как делать прибавление там на отрезку с помощью чатировок Фенлика.
[01:55:42.120 --> 01:55:45.120]  Ну на самом деле нужно просто взять вот эти два Фенлика и сделать вот так.
[01:55:45.120 --> 01:55:47.120]  Ну, собственно, очевидно, что это правда все.
[01:55:48.120 --> 01:55:49.120]  Ну правда.
[01:55:49.120 --> 01:55:53.120]  То есть у меня там были какие-то жуткие интерпретации, там жуткие доказательства, действительно, почему это так.
[01:55:53.120 --> 01:55:57.120]  Но вот очень позже до меня дошло, что на самом деле это берется вот отсюда.
[01:55:58.120 --> 01:55:59.120]  На самом деле это какие-то технологии.
[01:56:00.120 --> 01:56:02.120]  Так, ну давайте разберемся, откуда это все берем.
[01:56:03.120 --> 01:56:04.120]  Значит, смотрите дальше.
[01:56:05.120 --> 01:56:10.120]  Так, значит, ноль, минус два, десять, значит, минус шесть.
[01:56:10.120 --> 01:56:12.120]  Значит, что такое dAj, короче?
[01:56:12.120 --> 01:56:21.120]  Ну вы уже догадываетесь, что по определению я просто скажу, что dAj, jt это будет просто равно j умножить на dAj.
[01:56:22.120 --> 01:56:31.120]  То есть когда вы прибавляете 57 к третьему элементу, надо просто в dAj к третьему элементу прибавить 57 умножить на 3.
[01:56:33.120 --> 01:56:41.120]  А если вы там из четыре, пять, шесть, семь, восьмого элемента вычитаете 57, то значит здесь надо вычесть 57 умножить на 8.
[01:56:42.120 --> 01:56:46.120]  Ну, то есть у нас просто прибавление этой четыре эфирации изменения в точке, а...
[01:56:46.120 --> 01:56:47.120]  Ну да, да, да.
[01:56:47.120 --> 01:56:51.120]  То есть по факту, да, обратите внимание, то есть все, что вы делаете, вы просто храните двух фен...
[01:56:52.120 --> 01:57:01.120]  Ну вот, то есть просто заводите два массива, там, таких, разности, разности, до множества, и, собственно, честно храните аккуратненьких фен-венчиков.
[01:57:05.120 --> 01:57:07.120]  Как мы обновляем вот этот новый...
[01:57:08.120 --> 01:57:09.120]  А мы это еще не прошли.
[01:57:10.120 --> 01:57:11.120]  Прошли, прошли.
[01:57:11.120 --> 01:57:12.120]  Как мы обновляем...
[01:57:12.120 --> 01:57:23.120]  У нас есть дерево фен-венчика, которое умеет искать сумму на отрезке и обновлять в точке, да?
[01:57:25.120 --> 01:57:26.120]  Ну, используем как черный ящик.
[01:57:27.120 --> 01:57:33.120]  Да, мы заводим, то есть вместо массива A мы храним массив его частичных разностей, частичных разностей, да, множенных на индекс.
[01:57:36.120 --> 01:57:39.120]  На обоих этих массивах мы честно заводим фен-венчиков.
[01:57:40.120 --> 01:57:43.120]  Теперь, значит, когда мы ищем сумму...
[01:57:44.120 --> 01:57:46.120]  Ну да, мы пользуемся вот этой формой, то есть находим там сумму на префиксе...
[01:57:47.120 --> 01:57:54.120]  Когда ищем сумму на префиксе R, мы находим сумму на префиксе в одном, сумму на префиксе в другом, первую домножаем на R плюс один, вторую вычитаем, радуемся.
[01:57:56.120 --> 01:58:02.120]  Но второй вопрос у нас, который есть, это прибавление на отрезке в исходном массиве A.
[01:58:02.120 --> 01:58:03.120]  Как мы это делаем?
[01:58:04.120 --> 01:58:07.120]  Ну, мы замечаем, что мы в массиве A не храним, а вместо R храним DA и DAG.
[01:58:08.120 --> 01:58:13.120]  Но мы замечаем, что частичная разность, что при вот таком прибавлении только две частичные разности поменяются.
[01:58:18.120 --> 01:58:19.120]  Почему?
[01:58:20.120 --> 01:58:25.120]  Ну, потому что, смотрите, у нас бывает четыре типа партий соседних элементов.
[01:58:25.120 --> 01:58:28.120]  Первый тип, расс untersеля dellом два по типам.
[01:58:29.120 --> 01:58:32.120]  Ну да первый тип, те, которые слева от этого отрезка.
[01:58:33.120 --> 01:58:35.120]  Два элемента не поменялись, разность не поменялась!
[01:58:36.120 --> 01:58:39.120]  Есть два элемента, которые находятся после отрезка, но они не поменялись, разность не поменялась!
[01:58:40.120 --> 01:58:42.120]  А вот дальше интерес.
[01:58:43.120 --> 01:58:49.120]  Есть два, если эти два элемента находятся внутри отрезка, то оба увеличились на одно и то же число и разница опять не поменялась.
[01:58:49.120 --> 01:58:51.120]  опять не поменялось.
[01:58:51.120 --> 01:58:53.120]  Ааа, ну, сейчас.
[01:58:55.120 --> 01:58:57.120]  Оба линейки
[01:58:57.120 --> 01:58:59.120]  разности умножены
[01:58:59.120 --> 01:59:01.120]  на джипа.
[01:59:01.120 --> 01:59:03.120]  Не-не-не, погодите,
[01:59:03.120 --> 01:59:05.120]  смотрите, вот этот вот массив
[01:59:05.120 --> 01:59:07.120]  он порождается чисто вот этим, то есть я
[01:59:07.120 --> 01:59:09.120]  джипа, это вот берем разность жито,
[01:59:09.120 --> 01:59:11.120]  если разность не поменялась, то и разность умножена
[01:59:11.120 --> 01:59:13.120]  на жито тоже не поменялась.
[01:59:19.120 --> 01:59:21.120]  Нет, ну да, тут вот я...
[01:59:21.120 --> 01:59:23.120]  Да, хорошо, да.
[01:59:23.120 --> 01:59:25.120]  Да, тут надо...
[01:59:25.120 --> 01:59:27.120]  Возможно, не надо
[01:59:27.120 --> 01:59:29.120]  искать какой-то физический смысл у этого массива,
[01:59:29.120 --> 01:59:31.120]  он просто порожден вот тем, что мы тут
[01:59:31.120 --> 01:59:33.120]  посчитали, получилось.
[01:59:33.120 --> 01:59:35.120]  Вот. Ну вот, так что получается,
[01:59:35.120 --> 01:59:37.120]  вот эти два не поменялись,
[01:59:37.120 --> 01:59:39.120]  и получается, то есть надо брать только две пары
[01:59:39.120 --> 01:59:41.120]  соседних, которые один лежит
[01:59:41.120 --> 01:59:43.120]  в отрезке, другой нет.
[01:59:43.120 --> 01:59:45.120]  Вот этот берем, разница тут увеличивается,
[01:59:45.120 --> 01:59:47.120]  а тут разность уменьшается, но это всего две точки.
[01:59:47.120 --> 01:59:49.120]  Да, и ДА поменялась,
[01:59:49.120 --> 01:59:51.120]  и ДАЖ, ну просто одновременно,
[01:59:51.120 --> 01:59:53.120]  если вы меняете в точке ДА,
[01:59:53.120 --> 01:59:55.120]  то надо и ДАЖ тоже в точке
[01:59:55.120 --> 01:59:57.120]  по-меня-те, будет здорово.
[01:59:59.120 --> 02:00:01.120]  Так что вот такой вот
[02:00:01.120 --> 02:00:03.120]  не сильно
[02:00:03.120 --> 02:00:05.120]  хитрый красота оказался.
[02:00:05.120 --> 02:00:07.120]  То есть обратите внимание, то есть мы никак
[02:00:07.120 --> 02:00:09.120]  не пользовались тем, что мы на ДАЖ
[02:00:09.120 --> 02:00:11.120]  используем реально дерево фермика. В принципе,
[02:00:11.120 --> 02:00:13.120]  с деревом отрезка вы такое могли
[02:00:13.120 --> 02:00:15.120]  провернуть вполне.
[02:00:15.120 --> 02:00:17.120]  То есть помните, да, что если вам нужно только
[02:00:17.120 --> 02:00:19.120]  прибавлять на подотрезке, то отложенной
[02:00:19.120 --> 02:00:21.120]  операции в дереве отрезка вам писать
[02:00:21.120 --> 02:00:23.120]  надо совершенно не.
[02:00:23.120 --> 02:00:25.120]  Вот.
[02:00:25.120 --> 02:00:27.120]  Там можно модификаты просто хранить,
[02:00:27.120 --> 02:00:29.120]  но в вершине не проталкивая.
[02:00:29.120 --> 02:00:31.120]  Нет, но это тоже
[02:00:31.120 --> 02:00:33.120]  отложенная, это тоже своего рода
[02:00:33.120 --> 02:00:35.120]  отложенная операция. Да, без облака.
[02:00:35.120 --> 02:00:37.120]  Да, без, ну да-да-да-да-да,
[02:00:37.120 --> 02:00:39.120]  есть так. Ну нет, такие хаки
[02:00:39.120 --> 02:00:41.120]  тоже есть, иногда помогают, но там уже да.
[02:00:41.120 --> 02:00:43.120]  Хотя, конечно, вот иногда
[02:00:43.120 --> 02:00:45.120]  иногда забавно отметить, что почему-то
[02:00:45.120 --> 02:00:47.120]  так мне никто не сказал, что я без микрофона
[02:00:47.120 --> 02:00:49.120]  это все говорил.
[02:00:49.120 --> 02:00:51.120]  Да?
[02:00:51.120 --> 02:00:53.120]  Или я говорю достаточно громко, что я могу
[02:00:53.120 --> 02:00:55.120]  микрофон не одевать?
[02:00:55.120 --> 02:00:57.120]  Ну ладно, давайте все-таки одену, а то мало ли.
[02:00:59.120 --> 02:01:01.120]  Хотя не знаю, да,
[02:01:01.120 --> 02:01:03.120]  тут я неожиданно одеваю микрофон
[02:01:03.120 --> 02:01:05.120]  и тут кто-то неожиданно просыпается, да.
[02:01:05.120 --> 02:01:07.120]  Мало ли.
[02:01:07.120 --> 02:01:09.120]  Ну да.
[02:01:09.120 --> 02:01:11.120]  Не, ну по-разному.
[02:01:11.120 --> 02:01:13.120]  Ну вот.
[02:01:13.120 --> 02:01:15.120]  Чего доцент Степен?
[02:01:17.120 --> 02:01:19.120]  Нет, ну мало ли.
[02:01:21.120 --> 02:01:23.120]  Какую бы.
[02:01:23.120 --> 02:01:25.120]  Так, ладно.
[02:01:25.120 --> 02:01:27.120]  Какой-то какие-то сложные внутрики пошли.
[02:01:27.120 --> 02:01:29.120]  Ага,
[02:01:29.120 --> 02:01:31.120]  предел по базе это доцент Степен,
[02:01:35.120 --> 02:01:37.120]  но как бы да.
[02:01:37.120 --> 02:01:39.120]  Как это называется? Я мало информации,
[02:01:39.120 --> 02:01:41.120]  я пытаюсь ее компоновать как могу.
[02:01:41.120 --> 02:01:43.120]  Получается вот так, да.
[02:01:43.120 --> 02:01:45.120]  Так.
[02:01:45.120 --> 02:01:47.120]  Ну вот, значит это было прибавление
[02:01:47.120 --> 02:01:49.120]  на подотрески.
[02:01:49.120 --> 02:01:51.120]  Так, ну теперь
[02:01:51.120 --> 02:01:53.120]  соседней задачей возникает
[02:01:55.120 --> 02:01:57.120]  ой, даже не знаю с чего она.
[02:01:57.120 --> 02:01:59.120]  Ну ладно.
[02:01:59.120 --> 02:02:01.120]  Ладно, теперь следующий номер
[02:02:01.120 --> 02:02:03.120]  нашей программы, двумя
[02:02:03.120 --> 02:02:05.120]  дерево чего-нибудь.
[02:02:05.120 --> 02:02:07.120]  Ну, например, фенвика.
[02:02:07.120 --> 02:02:09.120]  Хотя, опять же, технология,
[02:02:09.120 --> 02:02:11.120]  которую сейчас расскажу, будет работать и
[02:02:11.120 --> 02:02:13.120]  на двумерном дереве отрезков. На самом деле,
[02:02:13.120 --> 02:02:15.120]  как это ни странно.
[02:02:17.120 --> 02:02:19.120]  Вот.
[02:02:21.120 --> 02:02:23.120]  Тоже не, ну вот, в общем-то
[02:02:23.120 --> 02:02:25.120]  не сильно сложно.
[02:02:27.120 --> 02:02:29.120]  Фенвик, фенвик, фенвик.
[02:02:29.120 --> 02:02:31.120]  Значит, смотрите,
[02:02:31.120 --> 02:02:33.120]  что будет дальше?
[02:02:33.120 --> 02:02:35.120]  А дальше будет примерно
[02:02:35.120 --> 02:02:37.120]  следующее.
[02:02:37.120 --> 02:02:39.120]  Значит, представьте себе, что мы теперь снова хотим
[02:02:39.120 --> 02:02:41.120]  искать сумму, но
[02:02:43.120 --> 02:02:45.120]  в двумерном массиве.
[02:02:45.120 --> 02:02:47.120]  На каком-то его подмассиве.
[02:02:51.120 --> 02:02:53.120]  Так. Ну, значит
[02:02:53.120 --> 02:02:55.120]  попробуем применить технологию.
[02:02:55.120 --> 02:02:57.120]  Пока пять на пять.
[02:02:57.120 --> 02:02:59.120]  Так, ну давайте тут.
[02:02:59.120 --> 02:03:01.120]  Так, у меня тут ИЖ будут
[02:03:01.120 --> 02:03:03.120]  как-нибудь вот так идти.
[02:03:05.120 --> 02:03:07.120]  Так, ну и я тут какие-нибудь числа от балды напишу.
[02:03:11.120 --> 02:03:13.120]  Конечно.
[02:03:15.120 --> 02:03:17.120]  Будьте здоровы.
[02:03:25.120 --> 02:03:27.120]  Во. Итак, вот
[02:03:27.120 --> 02:03:29.120]  представьте себе, что массив может быть не пять
[02:03:29.120 --> 02:03:31.120]  на пять, а побольше, там, ну,
[02:03:31.120 --> 02:03:33.120]  N на M, например. Вот.
[02:03:33.120 --> 02:03:35.120]  И нам хочется, конечно, тоже делать те же самые
[02:03:35.120 --> 02:03:37.120]  операции. То есть, менять элемент в точке.
[02:03:37.120 --> 02:03:39.120]  Ну, пока в точке.
[02:03:39.120 --> 02:03:41.120]  Значит, меняем элемент
[02:03:41.120 --> 02:03:43.120]  в точке.
[02:03:43.120 --> 02:03:45.120]  И, соответственно, потом
[02:03:45.120 --> 02:03:47.120]  ищем сумму на под прямоугольники.
[02:03:49.120 --> 02:03:51.120]  В тупом виде, конечно, изменения,
[02:03:51.120 --> 02:03:53.120]  то есть, какой-нибудь там
[02:03:53.120 --> 02:03:55.120]  edit
[02:03:55.120 --> 02:03:57.120]  от ИЖ делается
[02:03:57.120 --> 02:03:59.120]  за от единицы.
[02:03:59.120 --> 02:04:01.120]  А вот поиск какой-нибудь суммы
[02:04:01.120 --> 02:04:03.120]  от там L1,
[02:04:03.120 --> 02:04:05.120]  R1 и там L2, R2.
[02:04:05.120 --> 02:04:07.120]  Он ищется за сколько?
[02:04:07.120 --> 02:04:09.120]  Правильно,
[02:04:09.120 --> 02:04:11.120]  за от NM.
[02:04:13.120 --> 02:04:15.120]  Вот.
[02:04:15.120 --> 02:04:17.120]  Это многовато.
[02:04:19.120 --> 02:04:21.120]  Спрашивается, да. Но можно
[02:04:21.120 --> 02:04:23.120]  говорить, что можно, конечно, жизнь себе тут немножко
[02:04:23.120 --> 02:04:25.120]  сократить.
[02:04:25.120 --> 02:04:27.120]  Вот.
[02:04:27.120 --> 02:04:29.120]  Это, господи, первый раз, что ли?
[02:04:29.120 --> 02:04:31.120]  Ну что вы такие?
[02:04:31.120 --> 02:04:33.120]  А, это самое тупое.
[02:04:33.120 --> 02:04:35.120]  Да.
[02:04:35.120 --> 02:04:37.120]  Значит, нет, самое
[02:04:37.120 --> 02:04:39.120]  там тупое, что есть, ну так.
[02:04:39.120 --> 02:04:41.120]  Значит, да, то есть
[02:04:41.120 --> 02:04:43.120]  идея такая.
[02:04:43.120 --> 02:04:45.120]  Значит, да, можно заметить.
[02:04:45.120 --> 02:04:47.120]  А, ну давайте так, ладно, для разминочки.
[02:04:47.120 --> 02:04:49.120]  Нет, знаете, это идея, на самом деле,
[02:04:49.120 --> 02:04:51.120]  пока без Z давайте делать.
[02:04:51.120 --> 02:04:53.120]  Вот если просто сумму хранить,
[02:04:53.120 --> 02:04:55.120]  то значит, можно было бы сократить, конечно,
[02:04:55.120 --> 02:04:57.120]  себе поиск суммы.
[02:04:57.120 --> 02:04:59.120]  Для этого давайте просто в каждом,
[02:04:59.120 --> 02:05:01.120]  допустим,
[02:05:01.120 --> 02:05:03.120]  ряду мы можем
[02:05:03.120 --> 02:05:05.120]  просто насчитывать префиксные суммы.
[02:05:07.120 --> 02:05:09.120]  Прямо вот
[02:05:09.120 --> 02:05:11.120]  честно взять и насчитывать, да?
[02:05:11.120 --> 02:05:13.120]  Пять там, сколько у нас там будет?
[02:05:13.120 --> 02:05:15.120]  Шесть, десять, одиннадцать,
[02:05:15.120 --> 02:05:17.120]  семнадцать.
[02:05:17.120 --> 02:05:19.120]  Вот, красота.
[02:05:19.120 --> 02:05:21.120]  Благотать.
[02:05:21.120 --> 02:05:23.120]  Мы обожаем
[02:05:23.120 --> 02:05:25.120]  двумерное DO или двумерное ферми?
[02:05:27.120 --> 02:05:29.120]  Знаете, отличий
[02:05:29.120 --> 02:05:31.120]  особо не будет.
[02:05:31.120 --> 02:05:33.120]  Ну, скажем так, двумерное DO
[02:05:33.120 --> 02:05:35.120]  будет жрать, правда, четыре раза больше памяти.
[02:05:35.120 --> 02:05:37.120]  А трехмерное DO
[02:05:37.120 --> 02:05:39.120]  восемь.
[02:05:39.120 --> 02:05:41.120]  Где вы видели трехмерное DO?
[02:05:41.120 --> 02:05:43.120]  Ну...
[02:05:47.120 --> 02:05:49.120]  А трехмерное ферми, трехмерное DO
[02:05:49.120 --> 02:05:51.120]  в классе.
[02:05:51.120 --> 02:05:53.120]  Ну, а что такое?
[02:05:53.120 --> 02:05:55.120]  Нет, трехмерный фенвик, конечно, будет проще описаться,
[02:05:55.120 --> 02:05:57.120]  чем трехмерное DO, да?
[02:05:57.120 --> 02:05:59.120]  Но, в принципе, теоретически можно.
[02:05:59.120 --> 02:06:01.120]  Трехмерное DO.
[02:06:07.120 --> 02:06:09.120]  Да.
[02:06:09.120 --> 02:06:11.120]  Хотя...
[02:06:11.120 --> 02:06:13.120]  Ну, правда, нет, не волнуйтесь.
[02:06:13.120 --> 02:06:15.120]  Когда мы будем прибавлять на подпараллелепипеде,
[02:06:15.120 --> 02:06:17.120]  то, на самом деле, это, по-моему, разница нивелируется.
[02:06:19.120 --> 02:06:21.120]  А вот увидите.
[02:06:21.120 --> 02:06:23.120]  Ну, могу уже намекнуть.
[02:06:23.120 --> 02:06:25.120]  Вы же, как бы, ни одного фенвика
[02:06:25.120 --> 02:06:27.120]  храните в водомерном случае, а двух.
[02:06:27.120 --> 02:06:29.120]  Так вот, открою страшную тайну.
[02:06:29.120 --> 02:06:31.120]  В двумерной версии вы будете хранить четырех фенвиков.
[02:06:31.120 --> 02:06:33.120]  А в трехмерной
[02:06:33.120 --> 02:06:35.120]  будете хранить восьми.
[02:06:35.120 --> 02:06:37.120]  Нет, как еще двух камер не хватает вот этих?
[02:06:39.120 --> 02:06:41.120]  Это вот, знаете, типа, которые...
[02:06:43.120 --> 02:06:45.120]  Ну, там...
[02:06:45.120 --> 02:06:47.120]  Ну, знаете, это да.
[02:06:47.120 --> 02:06:49.120]  Как вот, если в недавнюю формулировку брать,
[02:06:49.120 --> 02:06:51.120]  то, да,
[02:06:51.120 --> 02:06:53.120]  журналисты это те люди, которые
[02:06:53.120 --> 02:06:55.120]  профессионально делят любую фразу на две части,
[02:06:55.120 --> 02:06:57.120]  чтобы вторую часть сказать другую
[02:06:57.120 --> 02:06:59.120]  камеру.
[02:06:59.120 --> 02:07:01.120]  Ну, вот это вот все.
[02:07:01.120 --> 02:07:03.120]  Вот.
[02:07:03.120 --> 02:07:05.120]  Ну, да, можно, ну, там более старые отсылки на дружку,
[02:07:05.120 --> 02:07:07.120]  конечно, есть, да, но...
[02:07:13.120 --> 02:07:15.120]  Он это тоже говорил, да?
[02:07:15.120 --> 02:07:17.120]  А, ну, хотя, ладно, он там затыл, да,
[02:07:17.120 --> 02:07:19.120]  там было 30 выпусков, что он только там мог
[02:07:19.120 --> 02:07:21.120]  не говорить, да.
[02:07:21.120 --> 02:07:23.120]  Действительно.
[02:07:27.120 --> 02:07:29.120]  Ну, не все же там про
[02:07:29.120 --> 02:07:31.120]  Джарахова и Ларина рассказывать, действительно.
[02:07:31.120 --> 02:07:33.120]  Вот.
[02:07:33.120 --> 02:07:35.120]  Так вот.
[02:07:35.120 --> 02:07:37.120]  Значит, ладно, пока мы тут обсуждали
[02:07:37.120 --> 02:07:39.120]  Джарахова и Навального, значит, я тут насчитал
[02:07:39.120 --> 02:07:41.120]  префиксные суммы.
[02:07:41.120 --> 02:07:43.120]  Да, камера, камера,
[02:07:43.120 --> 02:07:45.120]  да, я помню, так.
[02:07:45.120 --> 02:07:47.120]  Значит, соответственно.
[02:07:47.120 --> 02:07:49.120]  Ой.
[02:07:49.120 --> 02:07:51.120]  Значит, смотрите.
[02:07:51.120 --> 02:07:53.120]  Значит, тут у нас соответственно И, тут у нас
[02:07:53.120 --> 02:07:55.120]  соответственно G.
[02:07:55.120 --> 02:07:57.120]  Ну, вот, то есть,
[02:07:57.120 --> 02:07:59.120]  закрою симптомику,
[02:07:59.120 --> 02:08:01.120]  теперь мы можем искать сумму.
[02:08:01.120 --> 02:08:03.120]  Ну, теперь мы ее можем искать
[02:08:03.120 --> 02:08:05.120]  за время
[02:08:05.120 --> 02:08:07.120]  получается от M.
[02:08:07.120 --> 02:08:09.120]  Ну, если вот это N
[02:08:09.120 --> 02:08:11.120]  типа, а это M, то как получается
[02:08:11.120 --> 02:08:13.120]  от M? Почему? Потому что
[02:08:13.120 --> 02:08:15.120]  если мы ищем сумму,
[02:08:15.120 --> 02:08:17.120]  допустим, на подотрезке,
[02:08:17.120 --> 02:08:19.120]  вот на под
[02:08:19.120 --> 02:08:21.120]  прямоугольники, ну, например,
[02:08:21.120 --> 02:08:23.120]  вот на таком,
[02:08:23.120 --> 02:08:25.120]  да, то есть я вот должен,
[02:08:25.120 --> 02:08:27.120]  тут бы я должен был просуммировать все вот это
[02:08:27.120 --> 02:08:29.120]  вот, а здесь
[02:08:29.120 --> 02:08:31.120]  на самом деле все гораздо проще.
[02:08:31.120 --> 02:08:33.120]  Теперь я должен просуммировать все,
[02:08:33.120 --> 02:08:35.120]  плюсовать все вот эти элементы
[02:08:35.120 --> 02:08:37.120]  и повычитать все
[02:08:37.120 --> 02:08:39.120]  вот эти элементы.
[02:08:39.120 --> 02:08:41.120]  Но теперь мы замечаем
[02:08:41.120 --> 02:08:43.120]  там, замечаем маленькую
[02:08:43.120 --> 02:08:45.120]  мистическую, маленький мистический момент.
[02:08:45.120 --> 02:08:47.120]  Маленький
[02:08:47.120 --> 02:08:49.120]  мистический момент заключается в том,
[02:08:49.120 --> 02:08:51.120]  что оказывается в каждой,
[02:08:51.120 --> 02:08:53.120]  ну, вот, что, во-первых, да, мы задействуем
[02:08:53.120 --> 02:08:55.120]  всего два столбца, но в каждом столбце
[02:08:55.120 --> 02:08:57.120]  мы ищем сумму одного и
[02:08:57.120 --> 02:08:59.120]  того же подотрезка элементов.
[02:09:01.120 --> 02:09:03.120]  Удобно, да?
[02:09:03.120 --> 02:09:05.120]  И поэтому возникает
[02:09:05.120 --> 02:09:07.120]  естественная идея.
[02:09:07.120 --> 02:09:09.120]  А давайте еще раз найдем
[02:09:09.120 --> 02:09:11.120]  префиксные суммы.
[02:09:11.120 --> 02:09:13.120]  Но на этот раз не на строчках,
[02:09:13.120 --> 02:09:15.120]  а на столбцах.
[02:09:19.120 --> 02:09:21.120]  Что же тогда получится?
[02:09:23.120 --> 02:09:25.120]  Так, ну, получится тут понятно
[02:09:25.120 --> 02:09:27.120]  пять, шесть, восемь, тринадцать, девятнадцать.
[02:09:27.120 --> 02:09:29.120]  Так, ну, дальше тут проматываем.
[02:09:29.120 --> 02:09:31.120]  Так, ага.
[02:09:31.120 --> 02:09:33.120]  Так.
[02:09:33.120 --> 02:09:35.120]  Так, ага.
[02:09:39.120 --> 02:09:41.120]  Тридцать семь, пятьдесят, ага.
[02:09:41.120 --> 02:09:43.120]  Одиннадцать, двадцать один,
[02:09:43.120 --> 02:09:45.120]  тридцать два,
[02:09:45.120 --> 02:09:47.120]  сорок шесть,
[02:09:47.120 --> 02:09:49.120]  шестьдесят девять,
[02:09:49.120 --> 02:09:51.120]  семнадцать, тридцать два,
[02:09:51.120 --> 02:09:53.120]  сорок девять.
[02:09:53.120 --> 02:09:55.120]  Там, соответственно, шестьдесят пять
[02:09:55.120 --> 02:09:57.120]  и девяносто семь. Вот.
[02:09:57.120 --> 02:09:59.120]  В такой версии оказывается, что
[02:09:59.120 --> 02:10:01.120]  чтобы найти сумму на
[02:10:01.120 --> 02:10:03.120]  таком подотреске,
[02:10:03.120 --> 02:10:05.120]  надо, получается, просто взять, вот, прибавить
[02:10:05.120 --> 02:10:07.120]  вот этот элемент и вычесть вот этот.
[02:10:07.120 --> 02:10:09.120]  Ну, а здесь, соответственно, вычесть вот этот,
[02:10:09.120 --> 02:10:11.120]  найти вот этот.
[02:10:11.120 --> 02:10:13.120]  Получается, что мы теперь научились искать
[02:10:13.120 --> 02:10:15.120]  сумму за
[02:10:15.120 --> 02:10:17.120]  от единицы.
[02:10:21.120 --> 02:10:23.120]  Так. Ну, в принципе, это то, что я
[02:10:23.120 --> 02:10:25.120]  тут пока описал то, что известно, как
[02:10:25.120 --> 02:10:27.120]  собственно двумерные
[02:10:27.120 --> 02:10:29.120]  префиксные суммы.
[02:10:31.120 --> 02:10:33.120]  Потому что, ну, как легко убедиться,
[02:10:33.120 --> 02:10:35.120]  то есть, в каждой
[02:10:35.120 --> 02:10:37.120]  то, что написано в каждой ячейке здесь,
[02:10:37.120 --> 02:10:39.120]  это не более чем сумма на вот
[02:10:39.120 --> 02:10:41.120]  таком вот под прямоугольнике здесь.
[02:10:41.120 --> 02:10:43.120]  Логично, да?
[02:10:43.120 --> 02:10:45.120]  Ну, как понятно, да? Мы тут, как бы,
[02:10:45.120 --> 02:10:47.120]  посчитали сумму на префиксах в строчках
[02:10:47.120 --> 02:10:49.120]  и потом еще просуммировали на столбцах.
[02:10:49.120 --> 02:10:51.120]  Получилась, например, сумма на вот таких под прямоугольниках.
[02:10:53.120 --> 02:10:55.120]  Вот. Ну и оказывается, что чтобы найти
[02:10:55.120 --> 02:10:57.120]  теперь сумму на подотреске, то есть, можно интерпретировать
[02:10:57.120 --> 02:10:59.120]  вот так, просто сказать, что вот
[02:10:59.120 --> 02:11:01.120]  я вот нам сказала, что это надо делать вот так.
[02:11:01.120 --> 02:11:03.120]  Ну или можно просто
[02:11:03.120 --> 02:11:05.120]  это приинтерпретировать, что на самом деле
[02:11:05.120 --> 02:11:07.120]  сумма под таком прямоугольнике
[02:11:07.120 --> 02:11:09.120]  это как сумма на таком
[02:11:09.120 --> 02:11:11.120]  минус tam вот сумма
[02:11:11.120 --> 02:11:13.120]  на таком, минус сумма на таком,
[02:11:13.120 --> 02:11:15.120]  минус сумма на таком, и еще плюс сумма
[02:11:15.120 --> 02:11:17.120]  на таком. Потому что мы тут 2 раза вытесли,
[02:11:17.120 --> 02:11:19.120]  ну там, начинается вот эти там заклинания,
[02:11:19.120 --> 02:11:21.120]  типа формула включения-исключения, там вот это все.
[02:11:21.120 --> 02:11:23.120]  Ну вот.
[02:11:23.120 --> 02:11:25.120]  А это вот это вот.
[02:11:25.120 --> 02:11:27.120]  Хех.
[02:11:27.120 --> 02:11:32.240]  то есть на самом деле так но я так не буду сейчас совсем углубляться потому
[02:11:32.240 --> 02:11:35.560]  что на всяких там комбинаторика хвостом форма включение исключение еще обязательно
[02:11:35.560 --> 02:11:45.680]  вы а было даже о чем вы тогда спрашиваете что это а это шутка ой хорошо а ну раз было так
[02:11:45.680 --> 02:11:54.960]  тем более хорошо значит так плюсик минусик минусик плюсик кайф но кайф кайф вот но теперь
[02:11:54.960 --> 02:11:59.520]  оказывается что подобного рода технология но технология даже не в том что тут плюс
[02:11:59.520 --> 02:12:05.720]  минус минус плюс а в том что можно на каждом в каждой строке что-то сделать а потом с
[02:12:05.720 --> 02:12:12.200]  результатом сделать что-то в каждом столбце на самом деле прекрасно миксуется например с
[02:12:12.200 --> 02:12:19.560]  деревом фенлика а именно вот теперь давайте я уже тут примеров тут уже рисовать не буду
[02:12:19.560 --> 02:12:26.880]  но теперь представим себе что у нас есть массив в котором мы хотим делать операцию
[02:12:26.880 --> 02:12:36.120]  это до к одному элементу и хотим делать сумму на поднот сумму на подотрески
[02:12:36.120 --> 02:12:47.080]  да пока изменяем один элемент значит замечаем что сейчас это у нас работает за от единицы
[02:12:47.080 --> 02:12:57.400]  а сумма за отнм вот здесь мы делали значит тут мы искали префиксные суммы горизонтально
[02:12:57.400 --> 02:13:02.520]  а вот тут префиксные суммы вертикально
[02:13:02.520 --> 02:13:21.920]  вот ну теперь у тебя такая а давайте теперь вместо того чтобы значит то есть вместо то
[02:13:21.920 --> 02:13:26.440]  есть теперь делаем тоже самое только в каждой строчке мы вместо того чтобы построить
[02:13:26.440 --> 02:13:37.560]  префиксные суммы мы построим фенлика то есть вот так скажем фенлик горизонтальный
[02:13:37.560 --> 02:13:48.160]  господи звучит как лорд какой-то там до фенлик горизонтальный да видимо часто проигрывал на
[02:13:48.160 --> 02:14:04.000]  турнирах видимо да так значит смотрим что же у нас тогда получится если в каждой горизонтали
[02:14:04.000 --> 02:14:10.520]  теперь сумма ищется через фенлика то конечно сумма у нас теперь ищется уже за тут был отнм а
[02:14:10.520 --> 02:14:21.400]  тут теперь отнм но правда прибавление поменялось потому что теперь нам нужно взять этого в одном
[02:14:21.400 --> 02:14:31.760]  фенлике сделать одно изменение это делается за логан но уже неплохо но если эддев не то есть
[02:14:31.760 --> 02:14:36.480]  там если эддев не прям прям супер пупер гипер криминально больше чем сумма то это на самом
[02:14:36.480 --> 02:14:48.080]  деле уже лучше почему но нет нет ну так знаете если эддев плюс бесконечность а сумм 3 то как бы
[02:14:48.080 --> 02:14:56.560]  называется вот это вот это будет лучше чем вот это вот но смотрим то есть это ну ладно вот это да
[02:14:56.560 --> 02:15:12.320]  так вот смотрите что же будет дальше до минимума где вот здесь что ли а ну можно но не нужно потому
[02:15:12.320 --> 02:15:18.600]  что мы все равно сейчас как бы потому что действительно у фенлика горизонтального есть
[02:15:18.600 --> 02:15:29.820]  напарник фенлик вертикальный но не оно мало ли не знаю нет на самом деле они все равно друзья как
[02:15:29.820 --> 02:15:34.480]  бы да они тот как бы и фенлик горизонтальный фенлик вертикальный они как бы и один без другого они
[02:15:34.480 --> 02:15:40.720]  в общем-то там живут только в одномерном мире а в двумерном мире сначала один потрогают другой
[02:15:40.720 --> 02:15:44.880]  причем они хорошо так взаимозаменяем это в каком порядке не сделает все равно мы кстати с
[02:15:44.880 --> 02:15:50.680]  этими доблестными лицами уже встречались в общем-то в фуриатине но ладно не не с фенликами это
[02:15:50.680 --> 02:15:55.920]  были это конечно там это были там там фурия горизонтальный фурии вертикальный там вот ну
[02:15:55.920 --> 02:16:07.760]  на самом деле да мало кто знает но лица любили ходить парами вот вот нет в общем проблем нет ну
[02:16:07.760 --> 02:16:13.200]  а что такое на самом деле конечно то есть как-то знаете одно дело там что-то там называется одному
[02:16:13.200 --> 02:16:17.520]  ходить воевать а другое дело называть когда вас два товарищей когда как каждый другого поддержит
[02:16:17.520 --> 02:16:35.020]  что проблема но чуда нет ну да нет она но да у меня была бы и следа выучить кучу песен и
[02:16:35.020 --> 02:16:48.540]  петь их пока я тут что-то рисую да чего но этой куче не знаю нет но там дайте тот
[02:16:48.540 --> 02:16:52.980]  проблем еще в том что они еще контекст должны вылезти так-то нет что-то я конечно знаю но там
[02:16:52.980 --> 02:17:15.580]  иногда ой да прозвучало как заклинание честно говоря а да мы не знаю это я знаю потом др потом
[02:17:15.580 --> 02:17:36.620]  пока да и все две недели там караоке караоке 30 но даже нет у меня 1 апреля я не знаю
[02:17:36.620 --> 02:18:06.620]  пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп п
[02:18:06.620 --> 02:18:13.620]  пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп
[02:18:36.620 --> 02:19:06.620]  пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп пеп п
[02:19:06.620 --> 02:19:36.500]  пеп пеп пеп пеп пеп пеп пеп пеп пеп
[02:19:36.500 --> 02:19:42.460]  сумму на каком-то прямоугольнике, мы фактически перебираем
[02:19:42.460 --> 02:19:45.020]  сколько-то последовательных подряд идущих рядов и на
[02:19:45.020 --> 02:19:51.100]  каждом из них берем какие-то значения.
[02:19:51.100 --> 02:19:54.740]  Причем более того, эти значения в каждом ряду как бы одни
[02:19:54.740 --> 02:19:56.380]  и те же, в смысле по позиции.
[02:19:56.380 --> 02:20:01.900]  Ну вот, ну и минусики там еще какие-то есть, вот такие,
[02:20:01.900 --> 02:20:02.900]  да?
[02:20:02.900 --> 02:20:03.900]  Вот.
[02:20:04.380 --> 02:20:06.780]  И тогда, давайте сказать, идея такая, а вместо того,
[02:20:06.780 --> 02:20:09.420]  чтобы прям каждое значение из каждого столбца брать,
[02:20:09.420 --> 02:20:11.660]  так может быть переберем все столбцы, в которых надо
[02:20:11.660 --> 02:20:15.060]  что-то взять, да, и возьмем из них сумму на подотрезке
[02:20:15.060 --> 02:20:16.060]  в этих столбцах.
[02:20:16.060 --> 02:20:18.660]  Ну и следующая идея, так давайте просто на каждом
[02:20:18.660 --> 02:20:22.620]  столбце тоже забабахаем вот этого фенвика-напарника.
[02:20:22.620 --> 02:20:26.860]  Но тогда получается, что действительно сумму мы теперь
[02:20:26.860 --> 02:20:30.540]  ищем за произведение логарифмов, но правда и Эдды нам теперь
[02:20:30.620 --> 02:20:35.900]  придется делать, соответственно, за произведение логарифмов.
[02:20:35.900 --> 02:20:38.300]  Понимаете почему, да?
[02:20:38.300 --> 02:20:42.300]  Ну потому что если здесь изменяется логарифм значений,
[02:20:42.300 --> 02:20:45.020]  то как бы тогда получается в логарифме фенвиков получается
[02:20:45.020 --> 02:20:46.820]  нам надо поменять значение за логами.
[02:20:46.820 --> 02:20:51.500]  Ну, в общем-то, вот я и описал, как выглядит, в общем-то,
[02:20:51.500 --> 02:20:52.500]  двумерный фенвик.
[02:20:52.500 --> 02:20:53.500]  Вот.
[02:20:53.500 --> 02:20:58.820]  То есть код уже, ну, получается, то есть код пишется достаточно
[02:20:58.820 --> 02:20:59.820]  тривиально.
[02:20:59.980 --> 02:21:02.460]  Можете изначально считать, что там все элементы нули.
[02:21:02.460 --> 02:21:03.460]  Вот.
[02:21:03.460 --> 02:21:07.980]  И дальше, если вам там приходит какой-нибудь запрос поменять,
[02:21:07.980 --> 02:21:10.820]  ну вот, то есть скажем, приходит какой-нибудь там запрос поменять,
[02:21:10.820 --> 02:21:15.980]  то вы, говорите, вы перебираете, в каких столбцах вы должны
[02:21:15.980 --> 02:21:16.980]  делать прибавления.
[02:21:16.980 --> 02:21:19.940]  Это вы делаете с помощью функции g внешней, да?
[02:21:19.940 --> 02:21:26.900]  То есть там получается там условно for и и, значит, равно
[02:21:26.900 --> 02:21:35.300]  i плюс 1, и и меньше либо равно n, значит, и и равно g от и и.
[02:21:35.300 --> 02:21:36.300]  Вот.
[02:21:36.300 --> 02:21:38.700]  Это вы перебираете столбцы, в которых надо что-то поменять.
[02:21:38.700 --> 02:21:39.700]  Понимаете, да?
[02:21:39.700 --> 02:21:44.540]  Но в каждом столбце, значит, надо поменять, ну, здесь
[02:21:44.540 --> 02:21:47.100]  вы бы просто поменяли житую ячейку, да?
[02:21:47.100 --> 02:21:50.580]  А вот в глобальном фенвике, ну, значит, вы пишете for ж
[02:21:50.580 --> 02:21:59.460]  ж равно ж плюс 1, ж меньше либо равно n, ж равно ж от ж ж.
[02:21:59.460 --> 02:22:00.460]  Вот.
[02:22:00.460 --> 02:22:06.620]  Значит, и, соответственно, пишем 3 и и т ж ж т будет
[02:22:06.620 --> 02:22:08.660]  0 плюс равно х.
[02:22:08.660 --> 02:22:10.660]  О, все.
[02:22:10.660 --> 02:22:12.860]  Удобно, правда?
[02:22:12.860 --> 02:22:13.860]  Да.
[02:22:13.860 --> 02:22:16.980]  И вы можете, да, кстати, да, то же самое у технологий,
[02:22:16.980 --> 02:22:20.300]  которые, конечно, могли тут в каждом месте вместо
[02:22:20.300 --> 02:22:23.220]  дерева фенвика хранить реально дерево отрезков,
[02:22:23.220 --> 02:22:24.220]  кстати.
[02:22:24.220 --> 02:22:25.860]  Правда, дерево отрезков потребовало от вас в два
[02:22:25.860 --> 02:22:26.860]  раза больше памяти.
[02:22:26.860 --> 02:22:31.700]  Ну, по горизонтали в два, а в совокупности в четыре.
[02:22:31.700 --> 02:22:36.460]  Да, в коммерном пространстве в два степеника раз больше,
[02:22:36.460 --> 02:22:37.460]  конечно.
[02:22:37.460 --> 02:22:39.140]  Но, в принципе, вот просто двумерный дерево отрезков,
[02:22:39.140 --> 02:22:42.420]  да, но существует и вот реализуется, в общем-то, буквально на
[02:22:42.420 --> 02:22:43.420]  этой же технологии.
[02:22:44.420 --> 02:22:47.420]  Ну, это, блять, логично.
[02:22:47.420 --> 02:22:48.420]  Да.
[02:22:48.420 --> 02:22:49.420]  Так вот.
[02:22:49.420 --> 02:22:50.420]  Вот.
[02:22:50.420 --> 02:22:53.420]  Значит, add мы нашли.
[02:22:53.420 --> 02:22:57.020]  Ну, а теперь все, что вам остается, это уметь находить
[02:22:57.020 --> 02:22:58.820]  теперь сумму на подпрямоугольнике.
[02:22:58.820 --> 02:23:03.740]  Но, правда, замечаем, что сумма на подпрямоугольнике
[02:23:03.740 --> 02:23:06.620]  достаточно быстро сведется к, действительно, к четырём
[02:23:06.620 --> 02:23:07.620]  префиксным суммам.
[02:23:07.620 --> 02:23:11.420]  Ну, к четырём там суммам вот такого вида, да?
[02:23:12.420 --> 02:23:14.420]  На подпрямоугольнике это еще приятно.
[02:23:14.420 --> 02:23:17.420]  А там на подприлепипеде это уже совсем отравление.
[02:23:17.420 --> 02:23:18.420]  Нет, какая разница?
[02:23:18.420 --> 02:23:19.420]  Нет, наоборот.
[02:23:19.420 --> 02:23:20.420]  Ты пишешь просто общий код.
[02:23:20.420 --> 02:23:21.420]  Нет, погоди, давай так.
[02:23:21.420 --> 02:23:22.420]  Вот давай посмотрим.
[02:23:22.420 --> 02:23:25.420]  Как будет выглядеть, значит, как будет выглядеть это нахождение
[02:23:25.420 --> 02:23:28.420]  суммы на префиксном подпрямоугольнике?
[02:23:28.420 --> 02:23:29.420]  Да, будет 4,4.
[02:23:29.420 --> 02:23:32.420]  В трехмерном пространстве 4,4,4, да?
[02:23:32.420 --> 02:23:33.420]  Ну и так далее.
[02:23:34.420 --> 02:23:35.420]  Это префикс.
[02:23:35.420 --> 02:23:37.420]  Да, но это на префиксе.
[02:23:37.420 --> 02:23:40.420]  Проблема будет в том, что здесь вам придется вызвать
[02:23:40.420 --> 02:23:44.420]  4 раза, в трехмерном 8 раз и так далее.
[02:23:44.420 --> 02:23:46.420]  То есть вот эту формулу включения и включения.
[02:23:46.420 --> 02:23:49.420]  8 раз, что аккуратно расписать, нигде не попечататься
[02:23:49.420 --> 02:23:52.420]  в индексах, в которых вы пишете 8 вызовов.
[02:23:52.420 --> 02:23:55.420]  А ты фориком пиши.
[02:23:55.420 --> 02:23:58.420]  То есть там перебираем масочку и говорим, что запускаем,
[02:23:58.420 --> 02:24:02.420]  и если там элик нечетное количество, значит, мы читаем.
[02:24:02.420 --> 02:24:04.420]  Если четное, то прибавляем все.
[02:24:07.420 --> 02:24:08.420]  Ну или так, да.
[02:24:08.420 --> 02:24:12.420]  Хотя, ну, да, допустим.
[02:24:12.420 --> 02:24:13.420]  Так вот.
[02:24:13.420 --> 02:24:15.420]  Вот такая красота у нас получилась.
[02:24:15.420 --> 02:24:17.420]  То есть так выглядит двумерный фенвик.
[02:24:17.420 --> 02:24:21.420]  Так, смотрите, так выглядит, значит, внимание, внимание,
[02:24:21.420 --> 02:24:22.420]  сейчас будет аккуратно.
[02:24:22.420 --> 02:24:25.420]  Так выглядит двумерный фенвик, если вы обновляете
[02:24:25.420 --> 02:24:26.420]  один элемент.
[02:24:28.420 --> 02:24:30.420]  Но теперь возникает немножко медицинство.
[02:24:30.420 --> 02:24:35.420]  А если мы хотим делать прибавление на подпрямоугольники?
[02:24:39.420 --> 02:24:41.420]  Ну, на самом деле, на уровне идеи можно посмотреть
[02:24:41.420 --> 02:24:42.420]  на эту картинку и сказать вот.
[02:24:44.420 --> 02:24:47.420]  Потому что, в общем-то, технология работает буквально так же.
[02:24:49.420 --> 02:24:50.420]  То есть сначала у нас есть...
[02:24:51.420 --> 02:24:54.420]  Ну вот, так, ну давайте я ее могу третий раз нарисовать.
[02:24:54.420 --> 02:24:59.420]  То есть прибавляем, допустим, L1, R1, L2, R2.
[02:24:59.420 --> 02:25:02.420]  Ой, ладно, тут еще иксик, наверное, не помешает.
[02:25:05.420 --> 02:25:06.420]  Ну вот.
[02:25:07.420 --> 02:25:11.420]  И как бы можно, по идее, делать обе эти операции за OATM.
[02:25:15.420 --> 02:25:16.420]  Вот.
[02:25:16.420 --> 02:25:20.420]  Но у нас есть рыцарь-фенвик.
[02:25:20.420 --> 02:25:22.420]  Вот наш горизонтальный фенвик.
[02:25:24.420 --> 02:25:29.420]  Который умеет действительно сказать, что и add, и sum у нас
[02:25:29.420 --> 02:25:33.420]  теперь будут работать за OATM лог N.
[02:25:34.420 --> 02:25:38.420]  Потому что в каждом ряду мы забабахиваем, что мы забабахиваем?
[02:25:39.420 --> 02:25:42.420]  Обычного одноверного фенвика с прибавлением на подотрески.
[02:25:43.420 --> 02:25:44.420]  Продолжаем.
[02:25:44.420 --> 02:25:45.420]  Бабахиваем.
[02:25:46.420 --> 02:25:49.420]  Обычного одноверного фенвика с прибавлением на подотрески.
[02:25:50.420 --> 02:25:51.420]  Правда, с мелкой оговоркой.
[02:25:53.420 --> 02:25:57.420]  Потому что был у нас массив A, а теперь у нас будет, значит,
[02:25:57.420 --> 02:25:59.420]  массив DA.
[02:26:04.420 --> 02:26:06.420]  Я его даже так напишу, потом увидите почему.
[02:26:07.420 --> 02:26:11.420]  Значит, DEA и DEI.
[02:26:15.420 --> 02:26:17.420]  Ну что такое DEA?
[02:26:17.420 --> 02:26:20.420]  Это типа префиксные разности по переменной I.
[02:26:21.420 --> 02:26:28.420]  А DEI это означает, что это префиксные разности массива A по I умноженное на I.
[02:26:30.420 --> 02:26:31.420]  Логично, да?
[02:26:31.420 --> 02:26:33.420]  То есть, ну, мнимоника у меня будет такая.
[02:26:35.420 --> 02:26:39.420]  Но массива всего два, поэтому, в общем-то, на симптомику это не влияет.
[02:26:39.420 --> 02:26:41.420]  Но теперь вычекается следующая идея.
[02:26:41.420 --> 02:26:46.420]  Можешь к горизонтальному фенвику теперь прицепить и вертикального.
[02:26:47.420 --> 02:26:48.420]  Все равно он где-то рядом бродит.
[02:26:50.420 --> 02:26:51.420]  Вот.
[02:26:52.420 --> 02:26:53.420]  Вот.
[02:26:54.420 --> 02:26:56.420]  Значит, соответственно, что же будет дальше?
[02:26:59.420 --> 02:27:00.420]  Вот.
[02:27:01.420 --> 02:27:03.420]  Ну дальше замечаем, что теперь просто на...
[02:27:04.420 --> 02:27:06.420]  То есть, нет, фенвик фенвиков это другая технология.
[02:27:06.420 --> 02:27:08.420]  Мы еще сегодня это обсудим.
[02:27:10.420 --> 02:27:11.420]  Вот.
[02:27:11.420 --> 02:27:12.420]  Значит, DEA, DEI.
[02:27:13.420 --> 02:27:16.420]  Но теперь идея такая, что теперь на каждом из этих вот фенвиков,
[02:27:17.420 --> 02:27:21.420]  то есть, на каждой из этих массивов хочется по каждой вертикали
[02:27:21.420 --> 02:27:24.420]  под тем же причинам забабахать тоже фенвик.
[02:27:26.420 --> 02:27:27.420]  Понятно, да?
[02:27:29.420 --> 02:27:30.420]  Ну вот.
[02:27:30.420 --> 02:27:34.420]  То есть, тогда это приведет к тому, что у нас тут будет log N,
[02:27:34.420 --> 02:27:39.420]  значит, сумма будет, соответственно, тоже от log M, log N.
[02:27:40.420 --> 02:27:41.420]  Вот.
[02:27:43.420 --> 02:27:44.420]  Вот.
[02:27:44.420 --> 02:27:47.420]  Не, ну что, для этого просто каждый массив превращается в два.
[02:27:48.420 --> 02:27:50.420]  Значит, во-первых, он превращается в DEI...
[02:27:51.420 --> 02:27:54.420]  Ну, во-первых, так, в DEJI, DEIA.
[02:27:58.420 --> 02:28:01.420]  И в DEJI, DEIA.
[02:28:04.420 --> 02:28:06.420]  DEJI, DEIA.
[02:28:09.420 --> 02:28:11.420]  Это первый массив вот тут превращается, да?
[02:28:12.420 --> 02:28:14.420]  То есть, как бы, просто разности по JI, а тут разности по JI,
[02:28:15.420 --> 02:28:16.420]  еще и продолженные на JI.
[02:28:16.420 --> 02:28:18.420]  Видите, то есть, сначала мы взяли разность по I, потом разность по JI.
[02:28:19.420 --> 02:28:20.420]  Понимаете, да?
[02:28:21.420 --> 02:28:22.420]  Вот.
[02:28:23.420 --> 02:28:26.420]  И, наконец, и напарник.
[02:28:27.420 --> 02:28:31.420]  Значит, ну, напарник, понятно, пишем DEJI, DEIA.
[02:28:31.420 --> 02:28:37.420]  Ну, и, конечно же, то, что мы напишем DEJI, AIG.
[02:28:38.420 --> 02:28:39.420]  Вот.
[02:28:40.420 --> 02:28:42.420]  То есть, на самом деле мы храним...
[02:28:43.420 --> 02:28:45.420]  Ну, можно тоже поинтерпетировать, что мы храним, на самом деле,
[02:28:46.420 --> 02:28:49.420]  просто массив таких разностей, где мы взяли разности по I,
[02:28:50.420 --> 02:28:51.420]  потом разности по JI.
[02:28:52.420 --> 02:28:54.420]  То есть, по большому счету, это если у нас тут есть четыре клеточки, да?
[02:28:55.420 --> 02:28:57.420]  То мы как бы храним разность, что-то типа берем вот эту,
[02:28:58.420 --> 02:28:59.420]  минус вот эту, минус вот эту, плюс вот эту.
[02:28:59.420 --> 02:29:02.420]  То есть, такой двумерный аналог частичных разностей.
[02:29:04.420 --> 02:29:08.420]  Да, тоже, кстати, по ним можно также восстановить там исходный массив, там вот это все.
[02:29:09.420 --> 02:29:10.420]  Вот.
[02:29:11.420 --> 02:29:13.420]  Ну, вот. Ну, в трехмерном пространстве то же самое надо инвертировать,
[02:29:14.420 --> 02:29:18.420]  написать там под ним, и получится такой кубик трехмерных разностей.
[02:29:19.420 --> 02:29:20.420]  Ну, и так далее.
[02:29:21.420 --> 02:29:22.420]  Ну, что сразу дичь?
[02:29:23.420 --> 02:29:24.420]  Это не дичь.
[02:29:25.420 --> 02:29:26.420]  Это да, это не дичь.
[02:29:27.420 --> 02:29:28.420]  Это трехмерные частичные разности.
[02:29:29.420 --> 02:29:30.420]  Это трехмерные дичь.
[02:29:31.420 --> 02:29:32.420]  Ну, вот.
[02:29:33.420 --> 02:29:34.420]  Ну, допустим, ладно.
[02:29:35.420 --> 02:29:36.420]  Так.
[02:29:37.420 --> 02:29:38.420]  Так вот.
[02:29:39.420 --> 02:29:40.420]  Может еще раз какие там массивы?
[02:29:41.420 --> 02:29:42.420]  Где массивы?
[02:29:43.420 --> 02:29:44.420]  Ну, смотрите.
[02:29:45.420 --> 02:29:46.420]  Вот у нас здесь какие массивы были?
[02:29:47.420 --> 02:29:50.420]  Массивы с разностями по I, и тут массивы с разностями по I, умноженных на I, да?
[02:29:51.420 --> 02:29:53.420]  Значит, теперь аналогично мы теперь делаем фенвиров пожи.
[02:29:54.420 --> 02:29:58.420]  Для этого нужно в каждом из этих массивов взять разности пожи и разности пожи, умноженные ножи.
[02:29:59.420 --> 02:30:01.420]  Каждому массиву DI.
[02:30:02.420 --> 02:30:03.420]  Ну, вот.
[02:30:04.420 --> 02:30:05.420]  Поэтому я тут пишу DG DI.
[02:30:06.420 --> 02:30:09.420]  А, то есть я просто взял вот эти разности DI и в них взял частичные разности пожи.
[02:30:15.420 --> 02:30:16.420]  Нет, это не Федрик.
[02:30:17.420 --> 02:30:18.420]  Вот.
[02:30:19.420 --> 02:30:20.420]  Ну, вот.
[02:30:21.420 --> 02:30:24.420]  И у него на парке я взял те же самые разности, но каждую домножил на жи, то есть номер строки.
[02:30:24.420 --> 02:30:29.420]  То есть теперь я вот на каждом столбце вот этого массива умею делать прибавления на отрезки.
[02:30:30.420 --> 02:30:31.420]  И сумму надо.
[02:30:32.420 --> 02:30:34.420]  То есть сумму на под столбце, так сказать.
[02:30:37.420 --> 02:30:38.420]  Я не понимаю, что это массивы.
[02:30:39.420 --> 02:30:40.420]  Чего?
[02:30:41.420 --> 02:30:42.420]  Я все равно не понимаю, что это массивы.
[02:30:43.420 --> 02:30:44.420]  Можно написать формулу.
[02:30:45.420 --> 02:30:46.420]  Формулу?
[02:30:47.420 --> 02:30:49.420]  Нет, тут технологика растребует, чтобы и формула не писалась.
[02:30:50.420 --> 02:30:51.420]  Ну, еще раз.
[02:30:52.420 --> 02:30:53.420]  Ну, D и A.
[02:30:54.420 --> 02:30:55.420]  Давайте D и A.
[02:30:56.420 --> 02:30:57.420]  Значит там A и T житое.
[02:30:58.420 --> 02:30:59.420]  То есть D и A и T житое.
[02:31:00.420 --> 02:31:01.420]  Это у нас что такое?
[02:31:02.420 --> 02:31:04.420]  Это просто A и T житое.
[02:31:05.420 --> 02:31:07.420]  Минус A и минус 1 житое.
[02:31:10.420 --> 02:31:11.420]  D и A и.
[02:31:12.420 --> 02:31:13.420]  D и A.
[02:31:14.420 --> 02:31:15.420]  Значит это было D и A.
[02:31:16.420 --> 02:31:18.420]  D и A и и T житое.
[02:31:19.420 --> 02:31:23.420]  Равно, короче, то же самое D и A и T житое умножить на I.
[02:31:24.420 --> 02:31:28.420]  То есть это те же самые формулы, которые написали, когда делали одномерного Фенрика.
[02:31:31.420 --> 02:31:37.420]  Но теперь у меня технология заключается в том, что я в каждом из этих массивов буду обращаться к одним и тем же элементам.
[02:31:38.420 --> 02:31:39.420]  Ну, с точки зрения по столбцам.
[02:31:40.420 --> 02:31:44.420]  То есть я переберу нужные строчки и в каждой из них обращусь к элементам в одних и тех же позициях.
[02:31:45.420 --> 02:31:50.420]  Поэтому я хочу вместо этого в каждом из этих столбцов сделать что-то на подотреске.
[02:31:50.420 --> 02:31:57.420]  Поэтому я на вот каждом из этих массивов забабахиваю, соответственно, тоже дерево Фенрика, но уже по вертикали.
[02:31:58.420 --> 02:31:59.420]  В результате.
[02:32:00.420 --> 02:32:04.420]  Чтобы забабахивать в массиве D и A, я тебе говорю D жи, D и А.
[02:32:05.420 --> 02:32:06.420]  Значит пишу.
[02:32:07.420 --> 02:32:08.420]  D жи, D и А.
[02:32:09.420 --> 02:32:10.420]  И Т житое.
[02:32:11.420 --> 02:32:12.420]  Равно.
[02:32:13.420 --> 02:32:14.420]  D и A и Т житое.
[02:32:16.420 --> 02:32:17.420]  Минус.
[02:32:18.420 --> 02:32:19.420]  D и A и Т житое.
[02:32:20.420 --> 02:32:21.420]  Понятно, да?
[02:32:22.420 --> 02:32:38.420]  А здесь, ну здесь понятно, что D жи, D и А жи равно, соответственно, ну здесь понятно D жи, D и А умножить на жи.
[02:32:39.420 --> 02:32:40.420]  Тут индексы писать не буду.
[02:32:41.420 --> 02:32:42.420]  Тут индекс и жи и тут индексы жи.
[02:32:43.420 --> 02:32:44.420]  Понятно, да?
[02:32:45.420 --> 02:32:48.420]  Ну то же самое вот можно написать здесь, просто буквок еще больше будет.
[02:32:49.420 --> 02:32:55.420]  Но как бы я сделаю просто абсолютно тот же самый по вертикали, только для массива D и A и.
[02:32:59.420 --> 02:33:00.420]  Так что вот такая вот магия.
[02:33:01.420 --> 02:33:02.420]  В скопках нет.
[02:33:05.420 --> 02:33:06.420]  Вот.
[02:33:08.420 --> 02:33:09.420]  Понятно?
[02:33:11.420 --> 02:33:12.420]  Во.
[02:33:13.420 --> 02:33:14.420]  Вот.
[02:33:15.420 --> 02:33:16.420]  То есть получается 4.
[02:33:17.420 --> 02:33:23.420]  Как я уже говорил, да, то есть как вы дорадуетесь, в трехмерном Федвике с прибавлением на под Параллелепипеде вам придется заводить 8 массивов.
[02:33:24.420 --> 02:33:29.420]  В четырехмерном 16, в пятимерном 32, в шестимерный, дай бог, чтоб встретился.
[02:33:31.420 --> 02:33:32.420]  То есть по сути мы...
[02:33:33.420 --> 02:33:34.420]  Скорее, чтоб не встретился.
[02:33:35.420 --> 02:33:36.420]  Тихо, тихо.
[02:33:36.420 --> 02:33:41.420]  Наш, как бы, массив внешний на столбцы, в которых нам нужно найти сумму.
[02:33:42.420 --> 02:33:45.420]  И делегируем обязанность поиска суммы на внутренние Федвики.
[02:33:46.420 --> 02:33:47.420]  Да.
[02:33:56.420 --> 02:33:57.420]  Не, не, не.
[02:33:58.420 --> 02:33:59.420]  Нет, 4 это вот эти.
[02:34:00.420 --> 02:34:01.420]  Нет, 4 массивы это
[02:34:10.420 --> 02:34:12.420]  Ну, короче, Dg, Di, A это общий префикс.
[02:34:13.420 --> 02:34:14.420]  Потому что мы везде берем сначала...
[02:34:15.420 --> 02:34:16.420]  То есть фишка такая.
[02:34:16.420 --> 02:34:21.420]  То есть мы берем как бы частичные разности по I, а потом в результате берем частичные разности по G.
[02:34:22.420 --> 02:34:23.420]  А дальше зависит от того, на что мы домножаем.
[02:34:24.420 --> 02:34:29.420]  Здесь мы не домножаем и на show, здесь домножаем на I, здесь домножаем на G, а здесь домножаем на обоих.
[02:34:31.420 --> 02:34:33.420]  То есть нет, если будет так проще, вы можете вот...
[02:34:34.420 --> 02:34:36.420]  Вот мы писали вот формулу для 1-мерного Фенрика, да?
[02:34:37.420 --> 02:34:41.420]  Так вот, на самом деле вы можете попытаться написать ту же самую формулу и для 2-мерного Фенрика.
[02:34:42.420 --> 02:34:47.420]  Ну, просто там у вас вылезут суммы, в которых не помешает вот такого рода элемент.
[02:34:49.420 --> 02:34:50.420]  То есть можно мыслить так.
[02:34:50.420 --> 02:34:54.420]  Что, действительно, прибавлять так, а когда вы будете там, скажем, прибавлять на под прямоугольники,
[02:34:55.420 --> 02:34:56.420]  вы заметите, что такое...
[02:34:57.420 --> 02:34:59.420]  Вот еще раз, что такое частичная разность на под прямоугольники, да?
[02:35:00.420 --> 02:35:02.420]  То есть вообще глобально в массиве частичная разность.
[02:35:03.420 --> 02:35:07.420]  Это когда вы берете элемент, вы читаете два соседних и прибавляете вот этот по диагонали, да?
[02:35:08.420 --> 02:35:09.420]  Ну вот.
[02:35:10.420 --> 02:35:15.420]  И тогда оказывается, что если вы храните не массив A, а массив вот такой, это и есть, кстати, D, G, D и A, да?
[02:35:16.420 --> 02:35:23.420]  То тогда оказывается, что если вы прибавляете на под прямоугольники, то, оказывается, изменяется ограниченное число элементов.
[02:35:24.420 --> 02:35:25.420]  Значит, а именно что меняется?
[02:35:26.420 --> 02:35:37.420]  Значит, к этому элементу происходит плюсик, к вот этому минусик, к вот этому минусик и к вот этому плюсик.
[02:35:38.420 --> 02:35:40.420]  На самом деле все остальные, как легко убедиться, не меняются.
[02:35:40.420 --> 02:35:50.420]  Ну просто потому, что там либо кто внутри пересекается не интересно, кто не пересекается не интересно, кто пересекается по двум соседним элементам тоже не интересно, они взаимо убиваются.
[02:35:51.420 --> 02:35:52.420]  Вот.
[02:35:53.420 --> 02:35:57.420]  Поэтому остаются только те, кто пересекается по одному или по трем элементам.
[02:35:59.420 --> 02:36:01.420]  Ну с по трем элементам у нас никто не пересекается.
[02:36:02.420 --> 02:36:03.420]  Поэтому пишем.
[02:36:04.420 --> 02:36:05.420]  Все.
[02:36:06.420 --> 02:36:09.420]  Так что оказывается не сильно сложным.
[02:36:10.420 --> 02:36:12.420]  технология
[02:36:13.060 --> 02:36:16.300]  ну пока и но вот но такие знаете она может казаться
[02:36:16.900 --> 02:36:23.580]  контринтуитивной но на самом деле видите мы просто сделали пару технических вещей причем обратите внимание фурятине мы эту
[02:36:23.980 --> 02:36:25.380]  делали
[02:36:25.380 --> 02:36:28.520]  было дело да было было дело да было дело да
[02:36:30.300 --> 02:36:32.300]  ой
[02:36:32.540 --> 02:36:34.540]  а
[02:36:38.940 --> 02:36:40.540]  вот
[02:36:40.540 --> 02:36:45.860]  так что вот это был так что таким образом получается что прибавлять по примере
[02:36:46.460 --> 02:36:49.140]  прибавлять на под прямоугольник это пожалуйста
[02:36:49.820 --> 02:36:53.860]  кстати что интересно присваивать на под прямоугольники вы так конечно не сможете
[02:36:54.660 --> 02:36:57.540]  ну скажем так вот так сможете а
[02:36:58.540 --> 02:37:00.540]  вот так уже затруднительно
[02:37:01.500 --> 02:37:06.420]  в чем самое самое страшное что как прибавить как присваивать на под прямоугольник я честно говоря не знаю
[02:37:10.060 --> 02:37:11.460]  я
[02:37:11.460 --> 02:37:18.460]  тот и прикол что нет понимаете потому что все вот у нас одномерное присваивание базировались на технологии отложенных операций
[02:37:20.100 --> 02:37:22.100]  так что поэтому получается что
[02:37:22.940 --> 02:37:24.700]  технологии отложенных операций
[02:37:25.180 --> 02:37:27.180]  жутко базируется на том что
[02:37:27.740 --> 02:37:32.500]  как бы вы к любому элементу пройдете только из какого-то корня по фиксированному пути в дереве
[02:37:33.140 --> 02:37:37.580]  вот в двумерно в двумерном дереве отрезков такой структуры нет поэтому извиняйте
[02:37:39.220 --> 02:37:41.220]  то есть нет там в
[02:37:41.300 --> 02:37:43.500]  некоторых редких случаях на самом деле иногда
[02:37:43.900 --> 02:37:50.980]  удается обойтись например делать присваивание на подотрезке и все-таки обойтись на самом деле без отложенных операций
[02:37:51.700 --> 02:37:56.300]  потому что вот давайте я в этом месте тогда расскажу один маленький чит вот предположим что у нас есть тупая задача
[02:37:56.820 --> 02:38:01.060]  дан массив но не важно там от 0 до 10 в 9 даже например даже сейчас будет него
[02:38:01.060 --> 02:38:06.620]  но хотя ладно 25 и массив и вам нужно делать и вам нужно сделать кучу присваивания на подотрезках
[02:38:08.620 --> 02:38:14.100]  ну как всегда там сделай 100 тысяч присваивания на подотрезках потом в конце выдай результаты выдать что там в итоге получилось
[02:38:15.500 --> 02:38:20.500]  или даже еще круче вот давайте вот задача будет такая давайте это я убираю
[02:38:20.980 --> 02:38:27.420]  задача будет такая то есть вы хотите уметь делать присваивание на подотрезке да мы возвращаемся в одномерии и
[02:38:30.220 --> 02:38:32.220]  получить гетатпоз
[02:38:37.980 --> 02:38:45.860]  что да то есть я утверждаю что эта задача прекрасно решается тупо с этими
[02:38:51.780 --> 02:38:58.660]  да я так вот я да это задача на самом деле никаких деревьев отрезков писать не надо это задача решается тупо с этом
[02:39:03.300 --> 02:39:09.460]  но вот но там правда вам тебе все немножко амортизационного анализа конечно чтобы доказать что все работает
[02:39:12.700 --> 02:39:17.140]  но просто идея будет такая но давайте представим себе что изначально у вас
[02:39:17.740 --> 02:39:24.580]  отрезок то есть идея такая мы в сете будем хранить то есть мы массив будем хранить как набор полуинтервалов
[02:39:26.180 --> 02:39:29.700]  набор полуинтервалов на каждом из которых значение одинаково
[02:39:31.460 --> 02:39:33.460]  вот
[02:39:33.580 --> 02:39:35.580]  то есть в результате такой цепочки
[02:39:36.420 --> 02:39:42.020]  ну изначально вы можете считать что в сети у вас вообще один полуинтервал на котором присвоен 0
[02:39:42.020 --> 02:39:49.260]  ну типа если там массив изначально задан ну там сделайте еще лишних там 10 в пятый присваивание длины 1 это мелочи
[02:39:50.900 --> 02:39:53.900]  вот а теперь значит история так но
[02:39:54.580 --> 02:40:02.860]  но как делать дед то есть если вы эти полуинтервалы то есть прям заводите прям структурку в которой храните или там допустим лр х да
[02:40:03.620 --> 02:40:08.580]  то вы как бы эти полуинтервалы можете хранить с эти с компаратором по эльки
[02:40:08.980 --> 02:40:12.620]  ну вы конечно гарантируете что они только соприкасаются на не касаются да и
[02:40:14.500 --> 02:40:22.420]  тогда если у вас такой сет хранится то где-то вы получаете просто на уровне просто с помощью там какого-то там лавербаунда а пербаунда правда
[02:40:24.260 --> 02:40:31.340]  потому что вам нужно пройти там какой-то минимальный отрезок то есть там какой-то полуинтервал который содержит пост да то есть для этого нужно
[02:40:31.620 --> 02:40:35.700]  найти там что-то типа последний полуинтервал у которого элька не
[02:40:36.500 --> 02:40:38.500]  превосходит поса
[02:40:39.780 --> 02:40:43.020]  по каким строкам мы мы вернулись в одномерие напоминаю
[02:40:44.620 --> 02:40:46.620]  вы другую задачу решаем
[02:40:47.660 --> 02:40:53.020]  нет это одномерный случай это присваивание напоминаю присваивать на одно под прямоугольники я не умею вообще
[02:40:55.900 --> 02:40:57.900]  не не обожжу
[02:41:00.300 --> 02:41:02.140]  да ну
[02:41:02.180 --> 02:41:08.860]  ну вот но я просто всякий случай рассказываю то что кто-то там не задумывался в эту сторону то есть понятно да что решение простое да но вот
[02:41:09.300 --> 02:41:11.820]  помните что оказывается что здесь мы тогда там
[02:41:12.140 --> 02:41:17.740]  находим просто полуинтервал в котором лежит постом это в сете там с помощью лавербаунда фапер баундов сделается да а
[02:41:18.740 --> 02:41:22.940]  если вы хотите делать присваивание на по присваивание то как это делается
[02:41:25.420 --> 02:41:32.020]  то получится примерно следующее то есть вы там находите полуинтервалы которые пересекаются с вашим
[02:41:32.660 --> 02:41:33.860]  и
[02:41:33.860 --> 02:41:37.980]  что вы заметили но как бы есть два крайних которые надо вот просто уменьшить и
[02:41:39.700 --> 02:41:44.060]  есть те которые струй лежат внутри значит вы их из сета честно удаляете
[02:41:45.620 --> 02:41:49.460]  часто правут буквально итератором прибегаем все прям вырезаем а
[02:41:51.420 --> 02:41:56.420]  вместо этого вставляем один полуинтервал на вот это все с числом x
[02:41:56.420 --> 02:42:05.220]  но легко убедиться что на каждом таком на каждом таком шаге на каждом таком эти вы создадите не более то есть вы будете удалять
[02:42:05.540 --> 02:42:12.220]  какие-то полуинтервалы но взамен создавать не более двух поэтому суммарно вы создадите не более чем 2 на когда 2 q
[02:42:13.020 --> 02:42:15.820]  полуинтервалов 2 q плюс 1 если считать исходный и
[02:42:17.220 --> 02:42:21.580]  получается что учетная стоимость тогда всех этих операций получается лог и
[02:42:22.180 --> 02:42:27.900]  ну потому что каждый каждая вставка удаления полуинтервалы это естественно зелого рифом делается не заединиться
[02:42:28.900 --> 02:42:35.420]  вот то есть вот полезно помнить вот такой технологии вот эти то есть иногда на самом деле можно там без деревьев отрезков обходиться
[02:42:37.420 --> 02:42:38.420]  вот
[02:42:39.420 --> 02:42:41.420]  так что если вам вот такое
[02:42:43.420 --> 02:42:44.420]  вот
[02:42:44.420 --> 02:42:50.060]  так что это вот просто вот хотелось ответить вот да и то есть редкий случай когда вот какие-то простые операции дайда и
[02:42:50.060 --> 02:42:55.060]  иногда можно там без всяких деревьев отрезков и феновиков обходиться вот такими вот простыми штуками
[02:42:56.060 --> 02:42:57.060]  вот
[02:42:57.060 --> 02:43:01.060]  но это вот такие локальность так сколько у нас там времени
[02:43:11.060 --> 02:43:12.060]  да
[02:43:12.060 --> 02:43:18.060]  так ну ладно тогда видимо пришло время устроить еще один перерыв после которого мы рассмотрим еще одну красивую задачу видимо с кодексом
[02:43:19.060 --> 02:43:20.060]  да
[02:43:21.060 --> 02:43:28.060]  но вот просто задача которую мы решим двумя способами и все милы по-своему они
[02:43:48.060 --> 02:43:49.060]  вот
[02:43:49.060 --> 02:43:50.060]  вот
[02:43:50.060 --> 02:43:51.060]  вот
[02:43:51.060 --> 02:43:52.060]  вот
[02:43:52.060 --> 02:43:53.060]  вот
[02:43:53.060 --> 02:43:54.060]  вот
[02:43:54.060 --> 02:43:55.060]  вот
[02:43:55.060 --> 02:43:56.060]  вот
[02:43:56.060 --> 02:43:57.060]  вот
[02:43:57.060 --> 02:43:58.060]  вот
[02:43:58.060 --> 02:43:59.060]  вот
[02:43:59.060 --> 02:44:00.060]  вот
[02:44:00.060 --> 02:44:01.060]  вот
[02:44:01.060 --> 02:44:02.060]  вот
[02:44:02.060 --> 02:44:03.060]  вот
[02:44:03.060 --> 02:44:04.060]  вот
[02:44:04.060 --> 02:44:05.060]  вот
[02:44:05.060 --> 02:44:06.060]  вот
[02:44:06.060 --> 02:44:07.060]  вот
[02:44:07.060 --> 02:44:08.060]  вот
[02:44:08.060 --> 02:44:09.060]  вот
[02:44:09.060 --> 02:44:10.060]  вот
[02:44:10.060 --> 02:44:11.060]  вот
[02:44:11.060 --> 02:44:12.060]  вот
[02:44:12.060 --> 02:44:13.060]  вот
[02:44:13.060 --> 02:44:14.060]  вот
[02:44:14.060 --> 02:44:15.060]  вот
[02:44:15.060 --> 02:44:16.060]  вот
[02:44:16.060 --> 02:44:17.060]  вот
[02:44:17.060 --> 02:44:18.060]  вот
[02:44:18.060 --> 02:44:19.060]  вот
[02:44:19.060 --> 02:44:20.060]  вот
[02:44:20.060 --> 02:44:21.060]  вот
[02:44:21.060 --> 02:44:22.060]  вот
[02:44:22.060 --> 02:44:23.060]  вот
[02:44:23.060 --> 02:44:24.060]  вот
[02:44:24.060 --> 02:44:25.060]  вот
[02:44:25.060 --> 02:44:26.060]  вот
[02:44:26.060 --> 02:44:27.060]  вот
[02:44:27.060 --> 02:44:28.060]  вот
[02:44:28.060 --> 02:44:29.060]  вот
[02:44:29.060 --> 02:44:30.060]  вот
[02:44:30.060 --> 02:44:31.060]  вот
[02:44:31.060 --> 02:44:32.060]  вот
[02:44:32.060 --> 02:44:33.060]  вот
[02:44:33.060 --> 02:44:34.060]  вот
[02:44:34.060 --> 02:44:35.060]  вот
[02:44:36.060 --> 02:44:37.060]  вот
[02:44:37.060 --> 02:44:38.060]  вот
[02:44:41.060 --> 02:44:44.060]  вот
[02:44:45.060 --> 02:44:46.060]  вот
[02:44:48.060 --> 02:44:49.060]  вот
[02:44:49.060 --> 02:44:50.060]  вот
[02:44:50.060 --> 02:44:51.060]  вот
[02:44:51.060 --> 02:44:52.060]  вот
[02:44:52.060 --> 02:44:53.060]  вот
[02:44:53.060 --> 02:44:54.060]  вот
[02:44:54.060 --> 02:44:55.060]  вот
[02:44:55.060 --> 02:44:56.060]  вот
[02:44:56.060 --> 02:44:57.060]  вот
[02:44:57.060 --> 02:44:58.060]  вот
[02:44:58.060 --> 02:44:59.060]  вот
[02:44:59.060 --> 02:45:02.060]  вот
[02:45:02.060 --> 02:45:03.060]  вот
[02:45:03.060 --> 02:45:04.060]  вот
[02:45:04.060 --> 02:45:11.800]  мкашпана несколько раз не успевали на 20 секунд запихать задачу ну вот так что дальше так
[02:45:11.800 --> 02:45:18.680]  что помните да то есть на самом деле с этой точки зрения помните помните да что на тренировке вы
[02:45:18.680 --> 02:45:22.840]  помните вот так то есть конечно да один из важнейших скиллов это крыша уметь решать средние
[02:45:22.840 --> 02:45:29.440]  главное сложные задачи но не менее важный скилл это уметь решать простые задачи быстро но вот
[02:45:29.440 --> 02:45:34.280]  вот в этом смысле кстати до половины смысла кубка мф 3 кстати именно в этом то есть да там
[02:45:34.280 --> 02:45:37.920]  мой там у вас в контесте могут быть там много халявных задач но эти халявные задачи нужно а
[02:45:37.920 --> 02:45:43.320]  быстро распоздать б очень быстро написать вот потому что чем быстрее вы напишите издадите
[02:45:43.320 --> 02:45:48.400]  вообще там без багов собственно простую задачу тем больше нот времени у вас будет на то чтобы
[02:45:49.400 --> 02:46:05.080]  это решается два варианта либо тренируетесь его переписывать без этого либо вот лекция вот
[02:46:05.080 --> 02:46:11.960]  предыдущие три часа были ровно за то чтобы ты как бы это понимал что тут происходит вот отлично
[02:46:11.960 --> 02:46:26.840]  значит лекция прошла не зря но я скажу вот ну скажем так ну как по хорошему тут
[02:46:26.840 --> 02:46:35.120]  проблема швейк и проверю но я скажу так в идее нет значит идея но я вам скажу так я думаю так
[02:46:35.120 --> 02:46:41.320]  я даже разрешу пользоваться при этом кодом если вы его переписываете с бумажки ну объясню
[02:46:41.320 --> 02:46:47.640]  смысл объясню смысл но как бы цель этого всего это что это подготовка к cpc на cpc вы копипастить
[02:46:47.640 --> 02:46:53.280]  код там из другого места у себя не можете потому что вы пишите его с нуля но на практически любой
[02:46:53.280 --> 02:46:57.920]  адекватный контест по моему уже не осталось в этом смысле не адекватных контестов вы можете
[02:46:57.920 --> 02:47:03.680]  предоставить им ноутбук да то есть там ранее написанная заранее написаны какой-то там вашей
[02:47:03.680 --> 02:47:09.520]  команды код какой-то вот и собственно тогда там какие-то алгоритмы типа там какого-нибудь у
[02:47:09.800 --> 02:47:15.700]  или там вот я не знаю фенвика например но вы тогда спокойно спокойно можете переписывать
[02:47:15.700 --> 02:47:20.440]  бумажки так что я думаю с этой точки зрения у вас там заготовЛ evolutionary notebook тогда вот я
[02:47:20.440 --> 02:47:25.200]  сказал да то есть я думаю потом тогда вы если вы будете там отрабатывать переписывание таких
[02:47:25.200 --> 02:47:29.600]  алгоритмов то это будет хорошо да нет и то чтобы вам там сильно часто это будет надо но
[02:47:29.600 --> 02:47:35.800]  ну хотя иногда надо правда кстати кстати с этой точки зрения еще можноribly задуматься потому
[02:47:35.800 --> 02:47:40.080]  потому что если вы будете часто переписывать большой код, кстати, тоже на самом деле вы CPC такой скилл,
[02:47:40.080 --> 02:47:46.120]  может быть там относительно второстепенный, но тоже иногда полезный, это убение вот этой вот быстрой печати.
[02:47:49.280 --> 02:47:55.400]  Ну, кстати, я не знаю, когда я был на сборах на межна, кстати, там, собственно, там требовалось, что как бы, что как бы,
[02:47:55.400 --> 02:48:00.240]  там от всех, там, по крайней мере, высказывали пожелание, что все вы должны научиться быстро печатать.
[02:48:01.920 --> 02:48:04.960]  Вот, ну я не знаю, там, не сильно много народу в итоге реально умело, но вот...
[02:48:06.640 --> 02:48:12.040]  Ну вот, ну там, конечно, такой момент, что как бы понятно, что реально быстрое печатание вам скорее всего поможет только в том случае,
[02:48:12.040 --> 02:48:14.880]  когда вы там переписываете какой-то большой код или там пишете,
[02:48:15.560 --> 02:48:21.440]  потому что в остальные моменты, в общем-то, вы пишете с той скоростью, с которой вы думаете, поэтому, в общем-то,
[02:48:23.040 --> 02:48:25.560]  локально, но тем не менее, если вам, ну вот, ну...
[02:48:25.560 --> 02:48:30.320]  Ну, видимо, подразумевается, что думаете быстрее и тогда вы придете скорой с печати.
[02:48:30.360 --> 02:48:32.080]  Ну, в принципе, да. Ну, тут вот, да.
[02:48:32.080 --> 02:48:40.080]  Не, ну как сказать, если у вас слепая, как бы вы там, допустим, вам не надо смотреть на клавиатуру там лишний раз, чтобы напечатать там неожиданную букву, то, в общем-то,
[02:48:40.560 --> 02:48:42.760]  это вам тоже какое-то преимущество даст.
[02:48:44.560 --> 02:48:52.400]  Потому что, вот видите, как мы уже, потому что я уже говорю, то есть, знаете, там, все-таки принципиально, да, то есть, например, там, за какое время вы решите там задачи, да.
[02:48:53.640 --> 02:48:59.400]  Все-таки, ну вот, то есть, там всякое, конечно, может быть, это да, потому что, то есть, как бы все-таки, ну вот,
[02:49:00.000 --> 02:49:05.040]  то есть, все-таки, как бы, чем быстрее вы решите, соответственно, быстрые задачи, тем, собственно, может быть, лучше.
[02:49:06.120 --> 02:49:10.000]  Потому что, на самом деле, просто быстрое решение может дать неожиданный профит.
[02:49:11.080 --> 02:49:13.480]  Ну, потому что, ну, относительно быстрое.
[02:49:14.200 --> 02:49:21.560]  Ну, вот, потому что, ну да, там всякое может быть, конечно, быть, то есть, там, потому что классический пример, вот, на моем единственном финале ACPC в истории,
[02:49:21.800 --> 02:49:25.880]  это, ну, вот, это был финал, по финалу 14-го года.
[02:49:26.240 --> 02:49:27.960]  Там произошла эпическая ситуация.
[02:49:29.640 --> 02:49:37.040]  Вот, значит, команда МГУ по результатам в заморозке, значит, на момент заморозки, то есть, после 4 часов решила 6 задач.
[02:49:38.440 --> 02:49:40.760]  Второе место, 4 задачи.
[02:49:42.760 --> 02:49:45.480]  В общем, отдельно вам дам, в контесте было 12 задач, если что.
[02:49:46.360 --> 02:49:48.560]  Вот, там, отдельная песня.
[02:49:49.440 --> 02:49:51.760]  Вот, мы вообще две решили, не важно.
[02:49:52.080 --> 02:49:57.720]  Вот, значит, так вот, так вот, команда МГУ в заморозку сдала еще одну задачу.
[02:49:59.480 --> 02:50:02.280]  Но при этом уситрилась чемпионат не выиграть.
[02:50:04.680 --> 02:50:05.320]  Значит, почему?
[02:50:06.480 --> 02:50:07.880]  Потому что в заморозку мало сдали.
[02:50:08.400 --> 02:50:13.760]  Нет, они сдали в заморозку одну задачу, а вот команда SPBU-4, собственно, сдала в заморозку 3 задачи.
[02:50:14.480 --> 02:50:18.120]  Но оказалось, что у нее там первые 4 задачи, она решила прям вот очень быстро.
[02:50:18.760 --> 02:50:23.640]  И в результате со счетом 7-7 чемпионом 14-го года стала команда SPBU-4 в составе.
[02:50:25.040 --> 02:50:29.280]  Ну, что, ну, там в составе, понятно, там Павел Курявский, Егор Суворов, там Дмитрий Егоров, если быть напрямую.
[02:50:29.760 --> 02:50:30.040]  Вот.
[02:50:30.760 --> 02:50:34.400]  А команда МГУ, очередной на тот момент, раз, значит, заняла второе место.
[02:50:35.160 --> 02:50:38.120]  Ну, просто до Рэд Панды на самом деле у МГУ была традиция.
[02:50:38.120 --> 02:50:41.600]  МГУ на финале получает либо второе место, либо 10-е, либо без медалек.
[02:50:43.400 --> 02:50:45.720]  Да, Петр Митричев два раза второе место брал.
[02:50:47.560 --> 02:50:51.600]  Вот, ну, там, там, ну, там всякое бывало, там, вот.
[02:50:53.920 --> 02:50:57.840]  Ну, потому что мало ли, там, на одном финале просто, да, ну, то есть всякое такое.
[02:50:57.840 --> 02:51:02.120]  Ну, вот. Ну, то есть Рэд Панда потом выиграла там два раза, но это вот только второе место.
[02:51:02.720 --> 02:51:10.400]  Ну, в 14-м году это был не Петр Митричев, это была, это была там команда, собственно, там, Евстропов-Пидёркин, там, соответственно, Амельяненко, но это уже, соответственно.
[02:51:11.440 --> 02:51:19.120]  Вот. Так вот. Это я вот к тому, что оказывается, что, то есть быстро сданные, собственно, задачи в начале, это на самом деле может так зарешать.
[02:51:20.120 --> 02:51:28.400]  Ну, собственно, вчера на тренировке, в общем-то, тоже при счёте 7-7 победил тот, кто, собственно, это не начал сдавать задачи после тренировки, то после второго часа.
[02:51:29.120 --> 02:51:32.400]  Вот. Соответственно.
[02:51:34.120 --> 02:51:47.400]  Ну, вот. Нет, правда, тут бывает, конечно, обратная ситуация, да, то есть обратная ситуация в этом смысле произошла на, вот, когда, вот, когда команда Линкетт, собственно, на финал выходила, она выходила совершенно внезапно.
[02:51:49.120 --> 02:51:58.400]  Ну, вот. Потому что там, да, да, по идее, как фавориты шла, как бы, сильно более опытная команда, там, сильно более опытная команда, и, в общем-то, казалось бы, всё, всё шло хорошо. Ну, вот.
[02:52:00.120 --> 02:52:06.400]  Ну, как сказать? Ну, то и значит, на самом деле. Потому что команда Линкетт, это была просто, там, молодая, просто, команда второкуровка.
[02:52:07.120 --> 02:52:15.400]  Ну, вот. Ну, вот. А была команда, тогда называлась Малая Бронная, там, в составе, там, собственно, Мачулок, Аминетян, там, Семёнов.
[02:52:16.400 --> 02:52:19.680]  Вот. Ну, у которой Юра Семёнов, конечно, а не Костя. Вот.
[02:52:20.400 --> 02:52:24.680]  Ну, соответственно. Ну, вот. Ну, то есть, нет, это была много...
[02:52:26.400 --> 02:52:30.680]  Нет, просто это, ну, нет, это, собственно, было, просто это уже опытные, там, старшекуры были, соответственно.
[02:52:31.400 --> 02:52:34.680]  То есть, так, ну, вот. Ну, и в тот момент это, как бы, вроде, шёл безоговорочный фаворит.
[02:52:35.400 --> 02:52:41.680]  Ну, вот. Ну, как бы, если сравнивать с Линкеттом, то, как бы, на момент середины контеста Малая Бронная выигрывала со счётом 4-1.
[02:52:41.680 --> 02:52:48.960]  Да. Ну, вот. Ну, в итоге. Ну, вот. Более того, там. Ну, в результате я проиграли со счётом 5-6.
[02:52:49.680 --> 02:52:55.960]  Ну, там, правда, там, другая песня произошла, потому что там они сдав пятую задачу, потом в последний час пытались сдать две задачи, не получилось ни одной.
[02:52:56.680 --> 02:53:05.960]  В результате Линкетт в результате там Халяву всё-таки доздал, потом сдал пятую задачу, потом они там втроём, собственно, добивали там шестую геому и за три минуты до конца её сдали.
[02:53:06.960 --> 02:53:10.240]  Вот. И потом, с удивлением для себя, обнаружили, что они, оказывается, в финал вышли.
[02:53:10.960 --> 02:53:16.240]  Потому что, собственно, никто этого не ожидал. Как потом грустно, по-моему, там, по-моему, подсчитали то ли они, то ли Мачуло, то ли все вместе.
[02:53:16.960 --> 02:53:21.240]  По-моему, это был единственный раз в истории, когда команда Линкетта выиграла команду Малая Бронная.
[02:53:21.960 --> 02:53:28.240]  Вот. Ну, не знаю. Вот. Ну, просто внезапно немножко получилось.
[02:53:28.960 --> 02:53:30.240]  Единственный, зато какой.
[02:53:30.240 --> 02:53:33.520]  Нет. Ну, тут, нет. Тут мораль это называется, что крайне нежелательно просто в последний час.
[02:53:34.240 --> 02:53:39.520]  Вот. Поэтому я вот всем советую активно всегда, что по возможности, то есть в последний час две задачи параллельно не решать.
[02:53:40.240 --> 02:53:44.520]  То есть обычно на момент 50-60 минут до конца. Просто надо обычно садиться.
[02:53:45.240 --> 02:53:53.520]  И, то есть обычно так, уже просто сесть в команду и посмотреть, что у вас есть, выбрать задачу, вот, которая, значит, с большей вероятностью сдаться и наброситься на неё втроём.
[02:53:54.520 --> 02:53:59.800]  Ну, потому что пятый час вы уже устали, то есть, а явно уже не халяву, скорее всего, пишете, поэтому там соответственно.
[02:54:00.520 --> 02:54:02.800]  Ну, если, конечно, это не блиц какой-нибудь, но вот, поэтому так.
[02:54:03.520 --> 02:54:08.800]  В конце концов, если там втроём сдадите эту задачу, можете наброситься на другую, но это как бы больше шансов будет просто.
[02:54:09.520 --> 02:54:18.800]  Ну, и у нашей команды как-то вот в каком-то Петрозаводске как-то результаты прям на голову скакнули, как только мы приняли тактическое решение в последний час более там, собственно, больше одной задачи не писать.
[02:54:19.800 --> 02:54:27.080]  И как-то вместо стабильного нуля в последний час у нас стали там появятся стабильные единички в последний час, и как бы места сильно от этого увеличились.
[02:54:27.800 --> 02:54:28.080]  Вот.
[02:54:29.800 --> 02:54:35.080]  Так, ладно, не сейчас, возможно, да, не сейчас я, возможно, должен об этом говорить, но ладно.
[02:54:36.800 --> 02:54:38.080]  Так вот, значит, идём дальше.
[02:54:39.800 --> 02:54:46.080]  Значит, последняя задача, которую мы сегодня рассмотрим, ну, возможно, мы её рассмотрим двумя способами, будет звучать так.
[02:54:46.080 --> 02:54:59.360]  Смотрите, дан квадрат десять девятый на десять девятый, а в нём точки, десять в пятый точек, в каждой точке написано чиселка, ну, как всегда там.
[02:55:02.080 --> 02:55:03.360]  Сумма на прямоугольнике.
[02:55:03.360 --> 02:55:08.640]  Да, значит, два запроса, вот традиционных два запроса.
[02:55:10.360 --> 02:55:13.640]  Первый запрос, возьми точку и там измени число, ну, там прибавь ещё что-нибудь.
[02:55:15.360 --> 02:55:16.640]  Ну, точку уже известны ранее.
[02:55:17.360 --> 02:55:20.640]  Что? Да, координаты точек известны заранее, и они, что приятно, не меняются.
[02:55:20.640 --> 02:55:22.920]  Так что, ну, чиселки, которые на них написаны, меняться могут.
[02:55:23.640 --> 02:55:30.920]  То есть, первый запрос, то есть, это опять, значит, добавь к какой-то точке какой-нибудь х.
[02:55:31.640 --> 02:55:32.920]  Именно к точке, которая уже есть.
[02:55:33.640 --> 02:55:33.920]  Да.
[02:55:35.640 --> 02:55:39.920]  И на этой точке, то есть, мы уже знаем, что точка, которая уже есть.
[02:55:39.920 --> 02:55:42.200]  И на этой точке, то есть, мы уже знаем, что точка, которая уже есть.
[02:55:42.920 --> 02:55:48.200]  То есть, это опять, значит, добавь к какой-то точке какой-нибудь х.
[02:55:48.920 --> 02:55:50.200]  Именно к точке, которая уже есть.
[02:55:50.920 --> 02:55:51.200]  Да.
[02:55:52.920 --> 02:56:02.200]  И на этот раз, ладно, тут, допустим, прибавь там какой-нибудь вал, а тут х1, х1, х2, х2.
[02:56:03.920 --> 02:56:08.200]  Ну, вот опасно тут думать на тему там явных-неявных ДО, ну, потому что, например,
[02:56:08.200 --> 02:56:09.480]  можно сжать координаты.
[02:56:10.200 --> 02:56:14.480]  Так, ну, хорошо, значит, ладно, да, хорошо, начнем с того, что можно сжать координаты
[02:56:15.200 --> 02:56:17.480]  без граничей общества и считать, что тут 10 пятый на 10 пят.
[02:56:19.200 --> 02:56:23.480]  Ну, и там понятно, что во всех запросах там на сумму, естественно, там просто,
[02:56:24.200 --> 02:56:28.480]  там придется потратить логарифом времени на 4 бин поиска.
[02:56:29.200 --> 02:56:30.480]  Магнитный ГПХ тейбл.
[02:56:31.200 --> 02:56:32.480]  И Феллик Фелликов.
[02:56:33.200 --> 02:56:34.480]  И Феллик Фелликов.
[02:56:35.200 --> 02:56:36.480]  И Феллик Фелликов.
[02:56:36.480 --> 02:56:37.760]  Пыщ, пыщ, пыщ.
[02:56:38.480 --> 02:56:40.760]  Да, да, да, давай, иди пиши, иди пиши.
[02:56:41.480 --> 02:56:45.760]  Так, иди пиши, иди пиши, да, давай, иди пиши, я пока подробнее расскажу, давай.
[02:56:46.480 --> 02:56:48.760]  Значит, смотрите, что произойдет дальше.
[02:56:50.480 --> 02:56:53.760]  Ну, потому что просто, конечно, двумерное, давайте, двумерное ДО тут не напишешь,
[02:56:54.480 --> 02:56:56.760]  потому что массив 10 пятый на 10 пятый, это больно.
[02:57:00.480 --> 02:57:05.760]  Вот, да, поэтому тут, ну да, можно, ну вот, скажем так, ну тут, конечно, есть разница,
[02:57:06.480 --> 02:57:10.760]  разные щиты, да, можно попытаться, конечно, хранить действительно двумерный,
[02:57:11.480 --> 02:57:15.760]  там действительно двумерного Фенлика, как мы описывали, но хранить при этом,
[02:57:16.480 --> 02:57:19.760]  но при этом хранить в хэштейбле не все под прямоугольники, которые есть,
[02:57:20.480 --> 02:57:22.760]  а только те под прямоугольники, которые содержат точечку.
[02:57:23.480 --> 02:57:24.760]  Причем тут хэштейбл, я не понимаю.
[02:57:26.480 --> 02:57:28.760]  Ну, а как вы предлагаете?
[02:57:29.480 --> 02:57:30.760]  Какой хэштейбл?
[02:57:31.480 --> 02:57:34.760]  Ну, идея такая, давайте хранить двумерную, там допустим,
[02:57:36.480 --> 02:57:39.760]  там действительно заведем, представим, что это массив 10 пятый на 10 пятый,
[02:57:40.480 --> 02:57:41.760]  и заведем на нем двумерного Фенлика.
[02:57:42.480 --> 02:57:44.760]  Да, ой, у нас проблема, это требует слишком много памяти.
[02:57:45.480 --> 02:57:47.760]  Так вот, идея такая, давайте хранить не все отрезки,
[02:57:48.480 --> 02:57:51.760]  а хранить только те отрезки, в которых реально хотя бы одна точка Д есть.
[02:57:54.480 --> 02:57:59.760]  Да, вот, ну такой метод тоже есть, это уже более, это уже может зайти,
[02:58:00.480 --> 02:58:02.760]  но как повезет, потому что по памяти это очевидно сколько?
[02:58:03.480 --> 02:58:04.760]  Правильно, n лог квадрат.
[02:58:06.480 --> 02:58:09.760]  Потому что каждая точка лежит в лог квадрате прямоугольников.
[02:58:11.480 --> 02:58:14.760]  Ну, кажется, что там можно и логом оценить.
[02:58:16.480 --> 02:58:18.760]  А, не, не, нельзя лог оценить.
[02:58:19.480 --> 02:58:21.760]  Да, n лог квадрат, особенно если он маленький, точно не оценить.
[02:58:22.480 --> 02:58:24.760]  То есть какие-то такие идеи могут у вас там пройдить,
[02:58:25.480 --> 02:58:27.760]  или там какой-нибудь ДО какой-то еще тоже не явно забабахать,
[02:58:28.480 --> 02:58:29.760]  у вас там будет тоже лог квадрат.
[02:58:31.480 --> 02:58:34.760]  Поэтому мы пойдем, поэтому слюшайте другой метод.
[02:58:36.480 --> 02:58:38.760]  И я расскажу то, что называется фенвик фенвиков.
[02:58:39.480 --> 02:58:41.760]  Нужна двумерная неявность, там нужна одномерная неявность.
[02:58:42.480 --> 02:58:45.760]  Погодите, сейчас, нет, сейчас мы будем вообще хранить все более-менее явно,
[02:58:46.480 --> 02:58:47.760]  но в другом формате.
[02:58:48.480 --> 02:58:51.760]  Значит, смотрите, сейчас будет, вот сейчас будет то, что я называю фенвик фенвиков.
[02:58:52.480 --> 02:58:53.760]  Не путайте двумерным фенвиком.
[02:58:54.480 --> 02:58:58.760]  Потому что идея у меня будет такая, заведем одномерного фенвика.
[02:59:01.480 --> 02:59:04.760]  Вот, ну вот, допустим, если это x, это y, то давайте вот по x заведем фенвика.
[02:59:04.760 --> 02:59:06.040]  Ну, на 10 в пятый, да?
[02:59:08.760 --> 02:59:14.040]  Но, но при этом, значит, что такое будет tf от x?
[02:59:16.760 --> 02:59:19.040]  Значит, но для начала вообразим себе такое,
[02:59:19.760 --> 02:59:22.040]  пока для начала, в итоге будет не совсем так,
[02:59:22.760 --> 02:59:28.040]  но давайте вообразим себе, что в tf от x мы будем хранить множество точек.
[02:59:28.760 --> 02:59:34.040]  То есть впервые в истории мы будем хранить не одно число, а какое-то множество точек.
[02:59:35.760 --> 02:59:39.040]  Ну, естественно, это будет множество точек, значит,
[02:59:40.760 --> 02:59:49.040]  соответственно, там pit такие, что, значит, x pit у нас лежит в хорошем полуинтервале,
[02:59:49.760 --> 02:59:53.040]  то есть в полуинтервале от f от x до x.
[02:59:54.760 --> 02:59:57.040]  То есть вот такая вот красота.
[03:00:03.760 --> 03:00:04.040]  Вот.
[03:00:04.760 --> 03:00:06.040]  То есть вот такая идея.
[03:00:06.760 --> 03:00:10.040]  То есть я заведу 10 в пятый множество, и в каждом множестве буду хранить точки.
[03:00:10.760 --> 03:00:13.040]  Да, множества, как вы понимаете, пересекаются.
[03:00:16.760 --> 03:00:18.040]  Ну и, конечно, они разные по размеру.
[03:00:18.760 --> 03:00:22.040]  Где-то лежит много элементов, где-то лежит мало элементов.
[03:00:23.760 --> 03:00:28.040]  Но как вы думаете, каков суммарный размер этих множеств?
[03:00:31.760 --> 03:00:32.040]  Да.
[03:00:33.040 --> 03:00:34.320]  Суммарный размер, очевидно, n log n.
[03:00:35.040 --> 03:00:39.320]  Просто потому, что каждая точка лежит в не более чем логарифме таких множеств.
[03:00:41.040 --> 03:00:41.320]  Понимаете, да?
[03:00:43.040 --> 03:00:43.320]  Ну вот, удобно, правда?
[03:00:45.040 --> 03:00:45.320]  Вот, удобно?
[03:00:47.040 --> 03:00:47.320]  Отлично.
[03:00:50.040 --> 03:00:51.320]  То есть в каких-то множествах лежит так.
[03:00:53.040 --> 03:00:53.320]  Ну а теперь идея такая.
[03:00:56.040 --> 03:00:57.320]  Что мы будем делать дальше?
[03:00:58.040 --> 03:01:00.320]  Значит, следующая идея, конечно, уже банальная для нас,
[03:01:00.320 --> 03:01:01.600]  она будет заключаться в том,
[03:01:02.320 --> 03:01:04.600]  что мы, конечно же, задачу поиска суммы на прямоугольнике
[03:01:05.320 --> 03:01:08.600]  будем сводить на задачу поиска суммы на, так сказать,
[03:01:09.320 --> 03:01:10.600]  префиксном прямоугольнике, да?
[03:01:11.320 --> 03:01:12.600]  И будем их 4 раза запускать.
[03:01:13.320 --> 03:01:13.600]  Понимаете, да?
[03:01:14.320 --> 03:01:15.600]  Никогда такого не было и вот опять.
[03:01:16.320 --> 03:01:16.600]  Ну, естественно.
[03:01:17.320 --> 03:01:18.600]  Ну вот, как-то у нас нередко бывает.
[03:01:20.320 --> 03:01:20.600]  Вот.
[03:01:21.320 --> 03:01:22.600]  Значит, как теперь искать это на префиксе?
[03:01:23.320 --> 03:01:23.600]  Ну идея очень простая.
[03:01:24.320 --> 03:01:26.600]  Значит, тут у нас есть подотрезок от 0 до x,
[03:01:27.320 --> 03:01:27.600]  тут от 0 до i.
[03:01:27.600 --> 03:01:29.880]  Значит, этот отрезок мы разбиваем
[03:01:30.600 --> 03:01:32.880]  на вот такие фенвиковые отрезки.
[03:01:33.600 --> 03:01:36.880]  То есть это x, это вот понятно, f от x, это f от f от x.
[03:01:38.600 --> 03:01:40.880]  Ну вот это там f от f от f от x, ну и так далее.
[03:01:43.600 --> 03:01:43.880]  Понимаете?
[03:01:45.600 --> 03:01:46.880]  И теперь у меня идея, что...
[03:01:47.600 --> 03:01:48.880]  Ну теперь у меня захочется понятно,
[03:01:49.600 --> 03:01:52.880]  что для каждого подотрезка мне захочется залезть в tf
[03:01:53.600 --> 03:01:55.880]  от него и найти сумму тихой.
[03:01:55.880 --> 03:01:59.160]  И найти сумму чисел на всех точках,
[03:01:59.880 --> 03:02:01.160]  которые туда попали,
[03:02:01.880 --> 03:02:04.160]  но при этом они еще и должны попадать вот в этот прямоугольник.
[03:02:06.880 --> 03:02:07.160]  Так, ну думаю, кто-то...
[03:02:07.880 --> 03:02:09.160]  Думаю, многие из вас уже пробили,
[03:02:09.880 --> 03:02:11.160]  что я буду делать дальше, да?
[03:02:14.880 --> 03:02:16.160]  Вы сказали да-да или дэ-дэ?
[03:02:17.880 --> 03:02:18.160]  Нет.
[03:02:18.880 --> 03:02:20.160]  Нет, идея очень простая.
[03:02:20.880 --> 03:02:22.160]  То есть внутри каждого множества
[03:02:22.160 --> 03:02:28.440]  я буду точке, отсортирую точки по y.
[03:02:30.160 --> 03:02:31.440]  То есть внутри одного множества, да,
[03:02:32.160 --> 03:02:33.440]  мне будет уже начхать на x,
[03:02:34.160 --> 03:02:35.440]  главное, я их отсортирую по y.
[03:02:37.160 --> 03:02:38.440]  И на этом массиве
[03:02:42.160 --> 03:02:45.440]  забабахаю фенвика размера, вот сколько там точек.
[03:02:49.160 --> 03:02:49.440]  Вот.
[03:02:50.160 --> 03:02:51.440]  Поэтому я это называю фенвик фенвиков.
[03:02:52.160 --> 03:02:56.440]  Работает это тоже за лог квадрат,
[03:02:57.160 --> 03:02:58.440]  ну потому что у нас лог фенвиков,
[03:02:59.160 --> 03:03:00.440]  в каждом из которых мы работаем за лог.
[03:03:01.160 --> 03:03:03.440]  Ну и если нам надо поменять значение в точке,
[03:03:04.160 --> 03:03:05.440]  то нам нужно пробежаться по логарифму фенвиков,
[03:03:06.160 --> 03:03:07.440]  в каждом из которых за логарифм поменять.
[03:03:09.160 --> 03:03:12.440]  То есть вот это считается таким классическим решением этой задачи,
[03:03:13.160 --> 03:03:14.440]  где вот у нас асимптотика на запрос
[03:03:15.160 --> 03:03:17.440]  o от лог квадрат n.
[03:03:23.160 --> 03:03:24.440]  Все, сколько времени?
[03:03:25.160 --> 03:03:26.440]  О, нормально, отлично.
[03:03:27.160 --> 03:03:28.440]  Так что вот это называть фенвик фенвиков,
[03:03:29.160 --> 03:03:30.440]  это полезная технология, так что вот,
[03:03:31.160 --> 03:03:32.440]  рекомендую поуметь.
[03:03:33.160 --> 03:03:34.440]  Вот, понятно?
[03:03:35.160 --> 03:03:36.440]  Вот такая красота.
[03:03:40.160 --> 03:03:41.440]  Чего, когда вы меняете число?
[03:03:42.160 --> 03:03:44.440]  Нет, да, но одна точка находится не в одном фенвике,
[03:03:45.160 --> 03:03:46.440]  а в логарифме фенвиков.
[03:03:47.160 --> 03:03:49.440]  Ведь эти же полуинтервалы, они же не пересекаются,
[03:03:50.160 --> 03:03:51.440]  вот эти вот, этих логарифм.
[03:03:53.160 --> 03:03:54.440]  То есть получается вы как бы глобая, да,
[03:03:55.160 --> 03:03:57.440]  то есть вы пробегаете, то есть получается фенвик-фенвик,
[03:03:58.160 --> 03:03:59.440]  потому что как бы у вас дерево фенвика,
[03:04:00.160 --> 03:04:01.440]  в каждой ячейке которого находится тоже фенвик,
[03:04:02.160 --> 03:04:04.440]  причем свой, локальный, там, свой глубоко локальный.
[03:04:07.160 --> 03:04:11.440]  Вот, но пожалуй, знаете, Сергей, да, ну обычно, да,
[03:04:12.160 --> 03:04:13.440]  на этом в общем-то и заканчивается то,
[03:04:14.160 --> 03:04:15.440]  что я обычно рассказываю про дерево фенвика,
[03:04:16.160 --> 03:04:17.440]  хотя я не знаю, может я что-то забыл,
[03:04:18.160 --> 03:04:19.440]  может с фенвиком что-то еще делать.
[03:04:20.160 --> 03:04:21.440]  А, нет, ну обычно, а, ну ладно, посмотри,
[03:04:22.160 --> 03:04:23.440]  если останется время, есть, конечно,
[03:04:24.160 --> 03:04:25.440]  такая штука, как казахский фенвик.
[03:04:28.160 --> 03:04:29.440]  Нет, казахский фенвик, как говорят,
[03:04:30.160 --> 03:04:32.440]  это решение последней задачи вашего ДЗ,
[03:04:33.160 --> 03:04:34.440]  но используют только мапчики и фенвички.
[03:04:36.160 --> 03:04:39.440]  А мы здесь нигде, по сути, явно не пользовались тем,
[03:04:40.160 --> 03:04:41.440]  что это фенвик.
[03:04:42.160 --> 03:04:44.440]  Ну да, да, внутри, но нет, не совсем,
[03:04:45.160 --> 03:04:47.440]  ну внутри вот этого глобального фенвика
[03:04:48.160 --> 03:04:49.440]  вы можете, во-первых, забабахать дерево отрезков.
[03:04:50.160 --> 03:04:51.440]  Это раз, а во-вторых,
[03:04:52.160 --> 03:04:53.440]  в принципе, на этих десяти пятый
[03:04:54.160 --> 03:04:55.440]  вы вместо дерева фенвиков можете забабахать дерево отрезков.
[03:04:56.160 --> 03:04:58.440]  То есть будет такое дерево отрезков, дерево отрезков.
[03:04:59.160 --> 03:05:00.440]  Вот, кстати, интересный момент,
[03:05:01.160 --> 03:05:02.440]  вот знаете, я вот часто люблю говорить,
[03:05:03.160 --> 03:05:04.440]  что дерево отрезков, с точки зрения теории, не нужно,
[03:05:05.160 --> 03:05:06.440]  как и дерево фенвика.
[03:05:07.160 --> 03:05:08.440]  Так вот, на самом деле, это не совсем так.
[03:05:10.160 --> 03:05:11.440]  Ну, потому что, смотрите,
[03:05:12.160 --> 03:05:13.440]  просто у дерево отрезков и дерево фенвика
[03:05:14.160 --> 03:05:15.440]  есть одна маленькая приятная вещь,
[03:05:16.160 --> 03:05:17.440]  стабильность структуры.
[03:05:18.160 --> 03:05:19.440]  Потому что всяких вот авиалек, да,
[03:05:20.160 --> 03:05:21.440]  вы никогда не можете гарантировать,
[03:05:22.160 --> 03:05:23.440]  а кто у вас находится в корне, правда?
[03:05:24.160 --> 03:05:25.440]  То есть в корне может быть кто угодно.
[03:05:27.160 --> 03:05:28.440]  Вот, а там в каком-нибудь сплее дереве,
[03:05:29.160 --> 03:05:30.440]  ну, вообще кто угодно.
[03:05:31.160 --> 03:05:32.440]  Соответственно.
[03:05:33.160 --> 03:05:35.440]  Ну, и в дикартеачке тоже там от рандома зависит.
[03:05:36.160 --> 03:05:39.440]  Но периодически вот встречаются вот подобного рода задача.
[03:05:40.160 --> 03:05:41.440]  Вот, видите, мне здесь жестко пользуемся тем,
[03:05:42.160 --> 03:05:43.440]  что вот у фенвика или там дерево отрезков
[03:05:44.160 --> 03:05:45.440]  структура никогда не поменяется.
[03:05:46.160 --> 03:05:48.440]  А у вас будет какой-нибудь типа скейпгоат 3?
[03:05:49.160 --> 03:05:50.440]  Чего? Кто?
[03:05:50.440 --> 03:05:51.720]  У вас будет какая-нибудь гадость типа скейпгоат 3,
[03:05:52.440 --> 03:05:55.720]  которая без поворотов балансирует самортизированное?
[03:05:56.440 --> 03:05:57.720]  Ух ты, скейпгоат 3?
[03:05:58.440 --> 03:05:59.720]  А что это?
[03:06:01.440 --> 03:06:04.720]  Ну, типа, когда мы добавляем вершинки,
[03:06:05.440 --> 03:06:07.720]  мы их сначала подвешиваем, подвешиваем, подвешиваем,
[03:06:08.440 --> 03:06:09.720]  пока можем.
[03:06:10.440 --> 03:06:12.720]  А как только разбалансировалось достаточно сильно,
[03:06:13.440 --> 03:06:14.720]  говорим, ну, в топку это под дерево,
[03:06:15.440 --> 03:06:17.720]  и перестраиваем его заново в виде идеально сбалансированного.
[03:06:18.440 --> 03:06:19.720]  О господи.
[03:06:20.440 --> 03:06:21.720]  Ага.
[03:06:22.440 --> 03:06:24.720]  Да, и это прям официальное название структуры.
[03:06:25.440 --> 03:06:26.720]  Вроде так оно называется, да.
[03:06:27.440 --> 03:06:28.720]  Ну, ладно, если такое есть, пришлите,
[03:06:29.440 --> 03:06:30.720]  это будет очень интересно, да.
[03:06:31.440 --> 03:06:33.720]  Хотя, да, скейпгоат, да, скейпгоат, господи.
[03:06:34.440 --> 03:06:35.720]  Нет, конечно, да, технология с перестройками,
[03:06:36.440 --> 03:06:37.720]  это, конечно, всегда хорошо, да.
[03:06:38.440 --> 03:06:40.720]  Да, ну, правда, это называется, а что такое слишком сильно?
[03:06:41.440 --> 03:06:42.720]  Потому что, как бы, если каждый корень раз перестраивает,
[03:06:43.440 --> 03:06:45.720]  то, как бы, мы такое даже уже обсуждали.
[03:06:47.440 --> 03:06:48.720]  Вот, как балансировать?
[03:06:48.720 --> 03:06:50.000]  Правильно, да, за корень, да.
[03:06:50.720 --> 03:06:52.000]  Так, ну, а теперь, смотрите, ладно,
[03:06:52.720 --> 03:06:54.000]  про фенвика, как бы, все обсудили,
[03:06:54.720 --> 03:06:57.000]  но, тем не менее, конкретно у этой задачи есть другое решение.
[03:06:57.720 --> 03:06:59.000]  Я, конечно, обычно рассказываю в курсе геометрии,
[03:07:00.720 --> 03:07:03.000]  но оно, конечно, уместнее здесь.
[03:07:06.720 --> 03:07:08.000]  О, скейпгоат.
[03:07:08.720 --> 03:07:10.000]  Ага, классно.
[03:07:11.720 --> 03:07:14.000]  Так вот, поэтому, значит, забыли о фенвиках,
[03:07:14.720 --> 03:07:17.000]  это, слушайте другой метод.
[03:07:19.720 --> 03:07:21.000]  Сейчас будет вообще другой метод
[03:07:22.720 --> 03:07:25.000]  с вообще неожиданной асимптотикой.
[03:07:25.720 --> 03:07:27.000]  Ладно, кто знает, не палите.
[03:07:27.720 --> 03:07:29.000]  Вот.
[03:07:31.720 --> 03:07:34.000]  Это ожидаемая асимптотика.
[03:07:35.720 --> 03:07:39.000]  Значит, смотрите, обычно на таких задачах,
[03:07:39.720 --> 03:07:42.000]  обычно на таких, ну, просто в одномерном случае
[03:07:42.720 --> 03:07:45.000]  на подобного рода задачах, вот какой-то дерево отрезков, да,
[03:07:45.720 --> 03:07:48.000]  и, как бы, к каждой точке мы там аккуратно как-то спускаемся.
[03:07:48.720 --> 03:07:50.000]  Так вот, идея такая.
[03:07:50.720 --> 03:07:53.000]  А давайте-ка, ну, давайте я тут побольше точек нарисую.
[03:07:53.720 --> 03:07:56.000]  Ну, мы запомнили, что на каждой есть число.
[03:07:56.720 --> 03:07:58.000]  И давайте попробуем построить
[03:07:58.720 --> 03:08:01.000]  какой-нибудь аналог дерево отрезков.
[03:08:03.720 --> 03:08:05.000]  Как он будет выглядеть?
[03:08:05.720 --> 03:08:07.000]  Значит, идея такая.
[03:08:07.720 --> 03:08:10.000]  Так, ну, во-первых, давайте разделим эти точки
[03:08:10.720 --> 03:08:14.000]  на пополам какой-нибудь вертикальной прямой.
[03:08:16.720 --> 03:08:18.000]  Ну, пока можем для простоты считать,
[03:08:18.720 --> 03:08:21.000]  что все точки там различны по иксу и различны по икаку,
[03:08:21.720 --> 03:08:24.000]  хотя в реальности там на самом деле просто,
[03:08:24.720 --> 03:08:26.000]  если там на медианной вот этой вот половине
[03:08:26.720 --> 03:08:28.000]  будут там, будет слишком много точек,
[03:08:28.720 --> 03:08:30.000]  то значит, какая, до какого-то момента они будут
[03:08:30.720 --> 03:08:33.000]  отправляться влево, а после этого момента вправо.
[03:08:33.720 --> 03:08:35.000]  Вот, понятно, да?
[03:08:36.720 --> 03:08:38.000]  Вот.
[03:08:38.720 --> 03:08:40.000]  Значит, смотрите.
[03:08:40.720 --> 03:08:42.000]  Значит, вот разделили эти точки.
[03:08:42.720 --> 03:08:44.000]  И как бы говорим теперь, что у нас есть,
[03:08:44.720 --> 03:08:47.000]  вот был корень, который отвечал за все,
[03:08:47.000 --> 03:08:49.280]  а теперь у него есть левое и правое под дерево,
[03:08:50.000 --> 03:08:51.280]  которые отвечают вот за, так сказать,
[03:08:52.000 --> 03:08:53.280]  эту половинку эту, то есть вот за вот эти точки
[03:08:54.000 --> 03:08:55.280]  и за вот эти точки.
[03:08:56.000 --> 03:08:57.280]  Понятно, да?
[03:08:58.000 --> 03:08:59.280]  Теперь следующая идея.
[03:09:00.000 --> 03:09:01.280]  А теперь каждую из этих половин
[03:09:02.000 --> 03:09:03.280]  мы тоже поделим пополам,
[03:09:04.000 --> 03:09:06.280]  но делим пополам по количеству точек, а не по площади.
[03:09:08.000 --> 03:09:09.280]  Поэтому вполне вероятно, что прямое разделение
[03:09:10.000 --> 03:09:12.280]  у вас пройдет в разных местах.
[03:09:14.000 --> 03:09:15.280]  Во.
[03:09:16.280 --> 03:09:18.560]  Но очень важно, что разделять мы будем не по иксу,
[03:09:19.280 --> 03:09:20.560]  а на этот раз по игроку.
[03:09:23.280 --> 03:09:24.560]  Вот, понятно, да?
[03:09:25.280 --> 03:09:26.560]  Вот, понятно?
[03:09:27.280 --> 03:09:28.560]  Не слышу.
[03:09:29.280 --> 03:09:31.560]  А вот принципиальная разница.
[03:09:32.280 --> 03:09:33.560]  Потому что, видите, у нас как бы получается отсечка
[03:09:34.280 --> 03:09:35.560]  и по иксу, и по игроку.
[03:09:36.280 --> 03:09:37.560]  Да.
[03:09:38.280 --> 03:09:41.560]  Ну, да.
[03:09:42.280 --> 03:09:44.560]  Такой типа, еще скажем так,
[03:09:45.280 --> 03:09:47.560]  еще может быть у вас ассоциироваться
[03:09:48.280 --> 03:09:49.560]  с понятием двумерное ДО.
[03:09:50.280 --> 03:09:51.560]  А это типа 2D3, как это называется?
[03:09:52.280 --> 03:09:54.560]  Это называется 2D3.
[03:09:55.280 --> 03:09:57.560]  Оно же известно как КД дерева, на самом деле.
[03:09:59.280 --> 03:10:01.560]  Да, потому что дальше каждую следующую иксу
[03:10:02.280 --> 03:10:03.560]  мы тоже будем делить напополам,
[03:10:04.280 --> 03:10:05.560]  по точкам, обратите внимание, да?
[03:10:06.280 --> 03:10:07.560]  Ну, там мы, например, ну, ладно,
[03:10:08.280 --> 03:10:09.560]  пока мы теоретики, нас устроит вариант,
[03:10:10.280 --> 03:10:11.560]  что, ну, как бы вы же медиану, что по иксу,
[03:10:12.280 --> 03:10:13.560]  что по игроку можете найти, правда?
[03:10:13.560 --> 03:10:14.840]  Вододерево называется?
[03:10:15.560 --> 03:10:16.840]  Да.
[03:10:17.560 --> 03:10:18.840]  Да, по факту, да.
[03:10:19.560 --> 03:10:21.840]  У вас там вот этот уголочек зеленый нарисован.
[03:10:22.560 --> 03:10:24.840]  Нет, этот зеленый уголочек, он случайный, да.
[03:10:25.560 --> 03:10:27.840]  Никакого.
[03:10:28.560 --> 03:10:29.840]  Да, и все, и фенвичков этих тоже мы забыли.
[03:10:30.560 --> 03:10:32.840]  Технология будет базироваться вообще не на этом.
[03:10:37.560 --> 03:10:38.840]  Вот, ну и дальше, соответственно, там распиливаем,
[03:10:39.560 --> 03:10:40.840]  но, естественно, когда у нас в прямоугольнике
[03:10:41.560 --> 03:10:42.840]  осталась всего одна точка,
[03:10:43.560 --> 03:10:46.840]  то, естественно, мы, там, как бы, поезд дальше не идет,
[03:10:47.560 --> 03:10:48.840]  естественно, просьба там, соответственно,
[03:10:49.560 --> 03:10:50.840]  остановить рекурсию.
[03:10:51.560 --> 03:10:52.840]  Вот.
[03:10:53.560 --> 03:10:54.840]  Вот такая красота.
[03:10:55.560 --> 03:10:56.840]  Ой, прям совсем красота получилась, ну ладно.
[03:10:57.560 --> 03:10:58.840]  Вот.
[03:10:59.560 --> 03:11:00.840]  То есть, идея такая, то есть, что, то есть,
[03:11:01.560 --> 03:11:02.840]  получился такой аналог дерева, да?
[03:11:03.560 --> 03:11:05.840]  То есть, тоже мы, как бы, только каждый раз,
[03:11:06.560 --> 03:11:07.840]  то есть, каждая вершина отвечает теперь не за подотрезок,
[03:11:08.560 --> 03:11:09.840]  а за под прямоугольник.
[03:11:10.560 --> 03:11:11.840]  В общем, под прямоугольник можно хранить прям в точности,
[03:11:11.840 --> 03:11:13.120]  потому что каждая вершина знает,
[03:11:13.840 --> 03:11:15.120]  за какие точки она отвечает.
[03:11:15.840 --> 03:11:17.120]  Поэтому для всех этих точек можно хранить,
[03:11:17.840 --> 03:11:19.120]  когда минимальный х, ну, в общем, короче, их bounding box
[03:11:19.840 --> 03:11:21.120]  легко хранить, правда?
[03:11:22.840 --> 03:11:24.120]  Ну и дальше.
[03:11:24.840 --> 03:11:27.120]  И дальше технология очень, ну дальше прям буквально
[03:11:27.840 --> 03:11:29.120]  будет работать, как в дереве отрезков.
[03:11:31.840 --> 03:11:34.120]  То есть, да, именно, мы на каждом вот этой вершине храним
[03:11:34.840 --> 03:11:37.120]  честно сумму всех чисел, чисел всех точек,
[03:11:37.840 --> 03:11:39.120]  которые в них попадают.
[03:11:39.840 --> 03:11:41.120]  И делаем прям буквально нет.
[03:11:41.840 --> 03:11:43.120]  Это, я говорю, это квадродерево.
[03:11:43.840 --> 03:11:45.120]  Это аля квадродерево?
[03:11:45.840 --> 03:11:47.120]  Нет, нет, квадродерево, это если вы там делили
[03:11:47.840 --> 03:11:49.120]  на четыре части и там когда-то отсекались.
[03:11:49.840 --> 03:11:51.120]  Ну да.
[03:11:51.840 --> 03:11:53.120]  А это 2D-дерево, это другое.
[03:11:53.840 --> 03:11:55.120]  Мы спускаемся рекурсивно, пока нам нужно.
[03:11:55.840 --> 03:11:57.120]  Да, но оговорка, в квадродерево вы, как бы,
[03:11:57.840 --> 03:11:59.120]  честно на четыре части делите прям вот как плюсик.
[03:11:59.840 --> 03:12:01.120]  А тут каждый раз, каждый раз делите пополам,
[03:12:01.840 --> 03:12:03.120]  причем независимо и в разных местах.
[03:12:03.840 --> 03:12:05.120]  Ну, это понятно.
[03:12:05.840 --> 03:12:07.120]  Да, это важно.
[03:12:07.840 --> 03:12:09.120]  Сейчас мы храберат делим пополам.
[03:12:09.840 --> 03:12:11.120]  Да, ну понятно, плюс-минус один.
[03:12:11.840 --> 03:12:13.120]  Ну понятно.
[03:12:13.840 --> 03:12:15.120]  По очереди.
[03:12:15.840 --> 03:12:19.120]  Это на четных уровнях по вертикали,
[03:12:19.840 --> 03:12:21.120]  а на нечетных по горизонтали.
[03:12:21.840 --> 03:12:23.120]  То есть нам прям принципиально, что мы меняем.
[03:12:23.840 --> 03:12:25.120]  Это очень важно.
[03:12:25.840 --> 03:12:27.120]  Кстати, в более мерных аналогах, например,
[03:12:27.840 --> 03:12:29.120]  вы будете просто по циклу проходить по всем координатам.
[03:12:29.840 --> 03:12:33.120]  Там x и z, там x и z, x и z, x и z.
[03:12:33.840 --> 03:12:35.120]  Вот.
[03:12:35.840 --> 03:12:37.120]  То есть заметим, кстати, у этого решения есть
[03:12:37.840 --> 03:12:41.120]  даже преимущество по сравнению с деревом Фенрика.
[03:12:41.840 --> 03:12:43.120]  Потому что эта штука будет работать,
[03:12:43.840 --> 03:12:47.120]  даже если у вас будет присваивание на под прямоугольнике.
[03:12:49.840 --> 03:12:51.120]  Кстати.
[03:12:51.840 --> 03:12:53.120]  Но вы еще не сказали, как она будет работать?
[03:12:53.840 --> 03:12:55.120]  В смысле?
[03:12:55.840 --> 03:12:57.120]  Ладно, мы просто рекурсивно опускаемся по...
[03:12:57.840 --> 03:12:59.120]  Нет, просто, нет, смотрите, делаем,
[03:12:59.840 --> 03:13:01.120]  нет, все делаем прям буквально как в дереве отрезков.
[03:13:01.840 --> 03:13:03.120]  То есть у нас хранится вот прямоугольник,
[03:13:03.840 --> 03:13:05.120]  на который мы хотим что-то сделать.
[03:13:05.840 --> 03:13:07.120]  Значит, мы пришли в вершину.
[03:13:07.840 --> 03:13:09.120]  Если вершина с нами не пересекается,
[03:13:09.840 --> 03:13:11.120]  то до свидания с нулем.
[03:13:11.840 --> 03:13:13.120]  А если у нас полностью входит,
[03:13:13.840 --> 03:13:17.120]  значит тоже выбрасываемся, но уже с хранимой суммой.
[03:13:17.840 --> 03:13:21.120]  Ну пишется прям вообще практически как дерево отрезков, в общем-то.
[03:13:21.840 --> 03:13:23.120]  Вот.
[03:13:23.840 --> 03:13:26.120]  Ну вот, а в противном случае, если там вершина пересекается,
[03:13:26.840 --> 03:13:29.120]  ну значит придется запуститься от двух детей рекурсивно что делать.
[03:13:29.840 --> 03:13:32.120]  Ну да, то есть теоретически это может быть и из-за n.
[03:13:32.840 --> 03:13:34.120]  Ну да.
[03:13:34.840 --> 03:13:37.120]  Вот самое интересное, да, самое веселое в этом месте,
[03:13:37.840 --> 03:13:41.120]  за какую асимптотику на каждый запрос это работает.
[03:13:41.840 --> 03:13:47.120]  Мечты, мечты, да.
[03:13:47.840 --> 03:13:53.120]  Значит, смотрите.
[03:14:02.840 --> 03:14:05.120]  Ну там как пойдет, они там все будут отсекаться.
[03:14:05.840 --> 03:14:07.120]  Поэтому, значит, смотрите.
[03:14:07.840 --> 03:14:11.120]  Сейчас я вот покажу технологию, как можно вычислить асимптотику.
[03:14:11.840 --> 03:14:14.120]  Значит, как я тут обычно вычисляю асимптотику.
[03:14:14.840 --> 03:14:16.120]  Значит, смотрите.
[03:14:16.840 --> 03:14:19.120]  Я думаю, интрига будет, конечно, держаться до последнего.
[03:14:19.840 --> 03:14:21.120]  Но на самом деле, смотрите.
[03:14:21.840 --> 03:14:27.120]  Так, ну во-первых, начнем с того, что время, которое мы ищем, это t от n.
[03:14:27.840 --> 03:14:29.120]  Значит, смотрите.
[03:14:29.840 --> 03:14:32.120]  Но t от n будет, смотрите какой.
[03:14:32.840 --> 03:14:35.120]  Значит, как я буду его хранить?
[03:14:35.840 --> 03:14:40.120]  Значит, я буду, значит, смотрите, я буду рисовать вот такую диаграмму.
[03:14:41.120 --> 03:14:43.400]  Диаграмма, вот такая диаграмма будет считать,
[03:14:44.120 --> 03:14:46.400]  что, вот смотрите, я буду зелененьким рисовать запрос,
[03:14:47.120 --> 03:14:49.400]  а красненьким рисовать вершину, в которой мы сейчас находимся.
[03:14:52.120 --> 03:14:56.400]  И вот t от такой диаграммы будет означать, что у меня,
[03:14:57.120 --> 03:15:01.400]  ну вот, что у меня, соответственно, там мой запрос входит внутрь,
[03:15:02.120 --> 03:15:04.400]  внутрь вершинки, в которой я сейчас нахожусь.
[03:15:06.120 --> 03:15:08.400]  Значит, t от n, чему оно равно?
[03:15:08.400 --> 03:15:11.680]  Ну, когда вы попилите этот запрос на два,
[03:15:12.400 --> 03:15:13.680]  а вы его по-любому попилите, у вас может быть два варианта.
[03:15:14.400 --> 03:15:19.680]  Ну, когда вы его решили попилить, да, вот давайте я вот тут погромче нарисую.
[03:15:20.400 --> 03:15:21.680]  Так, вот.
[03:15:22.400 --> 03:15:24.680]  Значит, когда я тут решил попилить, то у вас два варианта.
[03:15:25.400 --> 03:15:28.680]  Либо я как бы пройду мимо, и тогда, значит, выброшусь за 1, да,
[03:15:29.400 --> 03:15:32.680]  из одного из рекурсий, либо я вот попилю здесь.
[03:15:33.400 --> 03:15:36.680]  Но тогда у меня будет, да, уже два рекурсивных нетривиальных запуска,
[03:15:36.680 --> 03:15:40.960]  но при этом обратите внимание, но при этом в обоих уже,
[03:15:41.680 --> 03:15:43.960]  как бы мы знаем о пересечении чуть больше.
[03:15:45.680 --> 03:15:46.960]  Понимаете, да?
[03:15:47.680 --> 03:15:48.960]  То есть я буду рисовать, то есть у меня два варианта.
[03:15:49.680 --> 03:15:56.960]  Либо я сведусь к такому же случаю, но от n пополам.
[03:16:00.680 --> 03:16:01.960]  Либо...
[03:16:01.960 --> 03:16:03.240]  Сейчас.
[03:16:03.960 --> 03:16:07.240]  А, если... сейчас, что?
[03:16:08.960 --> 03:16:10.240]  А разве не просто вот, ну...
[03:16:10.960 --> 03:16:12.240]  Нет.
[03:16:12.960 --> 03:16:15.240]  Ну, нет, как бы мы ж в этом случае влево-то пойдем,
[03:16:15.960 --> 03:16:17.240]  и тут будем это ответ искать, куда ж мы денемся.
[03:16:17.960 --> 03:16:20.240]  Если у нас распил проходит не по нам...
[03:16:20.960 --> 03:16:22.240]  Не по запросу, да, то значит...
[03:16:22.960 --> 03:16:24.240]  Либо сразу выходим и возвращаем ответ, либо сразу выходим...
[03:16:24.960 --> 03:16:29.240]  Нет, нет, это если, нет, как бы такой выбросу от единицы,
[03:16:29.960 --> 03:16:31.240]  это будет вот в таком случае.
[03:16:31.960 --> 03:16:37.240]  Ну вот у нас там вторая тэшка, она...
[03:16:37.960 --> 03:16:39.240]  Что у вас что обозначает?
[03:16:39.960 --> 03:16:43.240]  Ну зеленая это запрос, а вот эта красная это вершина.
[03:16:43.960 --> 03:16:45.240]  То есть поэтому пилем мы вершину.
[03:16:45.960 --> 03:16:48.240]  То есть она либо не пересекается, если содержится то одного,
[03:16:48.960 --> 03:16:50.240]  красная...
[03:16:50.960 --> 03:16:53.240]  Нет, если содержится, то один рекурсивный вызов такой же,
[03:16:53.960 --> 03:16:55.240]  если не содержится, то от единицы.
[03:16:55.960 --> 03:16:58.240]  Если мы содержимся в запросе, то один?
[03:16:58.960 --> 03:17:00.240]  Да.
[03:17:00.240 --> 03:17:02.520]  Если не содержим запрос.
[03:17:04.240 --> 03:17:07.520]  Вот, то зачем от него честно рекурсивно запускаемся.
[03:17:08.240 --> 03:17:09.520]  От кого?
[03:17:10.240 --> 03:17:12.520]  Ну от этой вершины, в которой нас запрос содержится.
[03:17:13.240 --> 03:17:14.520]  Слева справа или справа?
[03:17:15.240 --> 03:17:16.520]  Ну слева справа не принципиально.
[03:17:17.240 --> 03:17:18.520]  Потому что все равно он будет один.
[03:17:19.240 --> 03:17:20.520]  Ну симметричность лучше будет.
[03:17:21.240 --> 03:17:25.520]  Нет, ну вот если не пересеклось с разрезом, то один.
[03:17:26.240 --> 03:17:28.520]  Потому что второй у нас как бы будет не пересекаться,
[03:17:28.520 --> 03:17:29.800]  и мы выпустимся с разреза.
[03:17:36.520 --> 03:17:40.800]  Да, мы запустимся от того, кто содержит вот эту вершину.
[03:17:41.520 --> 03:17:42.800]  Ну да.
[03:17:43.520 --> 03:17:44.800]  Запустимся от обоих.
[03:17:45.520 --> 03:17:46.800]  Другой вопрос, что если мы быстро выясним,
[03:17:47.520 --> 03:17:48.800]  что вершина не пересекается с запросом,
[03:17:49.520 --> 03:17:50.800]  то мы просто выбросимся за от единицы.
[03:17:51.520 --> 03:17:53.800]  Ага, и поэтому мы ровно от одного ребенка запустимся?
[03:17:54.520 --> 03:17:55.800]  Да.
[03:17:56.520 --> 03:17:57.800]  Но это если разрез не пересекает запрос.
[03:17:58.520 --> 03:18:01.800]  Если пересекает, то рекурсивных запусков нетривиальных будет два,
[03:18:02.520 --> 03:18:04.800]  но я их нарисую вот таким интересным образом.
[03:18:11.520 --> 03:18:12.800]  Ну то есть да, на самом деле там они конечно,
[03:18:13.520 --> 03:18:14.800]  будет один слева, один справа,
[03:18:15.520 --> 03:18:17.800]  но заметим, что мы как бы дальше будем делить по игроку,
[03:18:18.520 --> 03:18:21.800]  поэтому целесообразно как бы повернуть картинку там на 90 градусов.
[03:18:25.520 --> 03:18:26.800]  И оба раза получится, как бы смотрите,
[03:18:26.800 --> 03:18:30.080]  что у нас есть вершинка и прямоугольник запроса,
[03:18:30.800 --> 03:18:32.080]  точнее та часть, которая внутри находится,
[03:18:32.800 --> 03:18:34.080]  но мы можем всегда пересечение хранить,
[03:18:34.800 --> 03:18:37.080]  она как бы прижата к нижней части,
[03:18:37.800 --> 03:18:40.080]  ну может быть к верхней, но это точно симметрично.
[03:18:40.800 --> 03:18:42.080]  Ну или к левой и правой, но видимо...
[03:18:42.800 --> 03:18:44.080]  Нет, ну смотрите, проблема такая,
[03:18:44.800 --> 03:18:46.080]  что когда я тут смотрю, я подразумеваю,
[03:18:46.800 --> 03:18:48.080]  что я как бы первое деление буду проводить по иксу.
[03:18:48.800 --> 03:18:50.080]  А где будут варианты?
[03:18:50.800 --> 03:18:52.080]  Ну в расположении запроса.
[03:18:52.800 --> 03:18:54.080]  Ну у нас же может быть и второе деление.
[03:18:54.080 --> 03:18:55.360]  У нас же может быть и второе деление,
[03:18:56.080 --> 03:18:58.360]  если мы второй раз так делаем, то мы уже по им границам.
[03:18:59.080 --> 03:18:59.360]  Сейчас, нет, ну подождите,
[03:19:00.080 --> 03:19:01.360]  смотрите, когда вы здесь поделили,
[03:19:02.080 --> 03:19:03.360]  то как бы, когда вы вот так здесь поделили,
[03:19:04.080 --> 03:19:04.360]  вы находитесь как?
[03:19:05.080 --> 03:19:06.360]  То есть у вас как бы одна часть прижата к левой части,
[03:19:07.080 --> 03:19:08.360]  другая к правой, да?
[03:19:09.080 --> 03:19:11.360]  Но на этом уровне рекурсии вы как бы пошли
[03:19:12.080 --> 03:19:13.360]  теперь делить и по игроку,
[03:19:14.080 --> 03:19:15.360]  поэтому давайте поберем картинку на 90 градусов.
[03:19:16.080 --> 03:19:18.360]  Да, на той террации мы могли делить и по игроку.
[03:19:19.080 --> 03:19:21.360]  Нет, на этой мы будем считать, что по иксу.
[03:19:22.080 --> 03:19:23.360]  Без границ меня, в общем-то.
[03:19:24.080 --> 03:19:25.360]  Ну и здесь просто сведем к по иксу,
[03:19:26.080 --> 03:19:27.360]  просто поворачиваем на 90 градусов,
[03:19:28.080 --> 03:19:29.360]  ну там можно, то есть на самом деле один снизу,
[03:19:30.080 --> 03:19:31.360]  один сверху, но это будет одно и то же.
[03:19:32.080 --> 03:19:33.360]  Но правда с этой точки зрения оказывается,
[03:19:34.080 --> 03:19:35.360]  что снизу сверху это одно и то же,
[03:19:36.080 --> 03:19:37.360]  слева справа это одно и то же,
[03:19:38.080 --> 03:19:40.360]  но снизу и слева это не одно и то же, очевидно.
[03:19:45.080 --> 03:19:48.360]  Ну да, то есть короче мы сначала вращаем тот прямоугольник,
[03:19:49.080 --> 03:19:50.360]  чтобы разрез проходил вертикально,
[03:19:51.080 --> 03:19:52.360]  а после этого мы понимаем,
[03:19:52.360 --> 03:19:53.640]  что тогда следующий будет...
[03:19:55.360 --> 03:19:56.640]  Точнее так, мы делим вертикально,
[03:19:57.360 --> 03:19:58.640]  а потом оба эти поворачиваем на 90 градусов,
[03:19:59.360 --> 03:20:00.640]  чтобы разрез тоже был для них вертикальный.
[03:20:01.360 --> 03:20:03.640]  Да, это нас сокращает количество случаев.
[03:20:04.360 --> 03:20:05.640]  Снизу и слева это не одно и то же.
[03:20:06.360 --> 03:20:06.640]  Что?
[03:20:07.360 --> 03:20:08.640]  Снизу и слева это не одно и то же.
[03:20:09.360 --> 03:20:11.640]  Ну потому что когда он будет снизу или сверху,
[03:20:12.360 --> 03:20:13.640]  мы как бы делить будем вот так,
[03:20:14.360 --> 03:20:15.640]  а когда он будет слева, то мы как бы будем делить
[03:20:16.360 --> 03:20:17.640]  и там просто другие картинки будут возникать.
[03:20:18.360 --> 03:20:19.640]  Сейчас мы это увидим, смотрите.
[03:20:20.360 --> 03:20:21.640]  Ну во-первых, давайте,
[03:20:22.360 --> 03:20:23.640]  когда появилась новая рекуррента,
[03:20:24.360 --> 03:20:25.640]  давайте расписывать ее.
[03:20:29.360 --> 03:20:30.640]  Оп-оп-оп-оп-оп-оп.
[03:20:31.360 --> 03:20:34.640]  Значит, t от n, ну я буду все от n писать, равно.
[03:20:36.360 --> 03:20:37.640]  Ну и здесь два варианта,
[03:20:38.360 --> 03:20:39.640]  либо распил пройдет мимо этого зубчика,
[03:20:40.360 --> 03:20:42.640]  и тогда этот зубчик повернется на 90 градусов.
[03:20:44.360 --> 03:20:45.640]  То есть получится t от,
[03:20:46.360 --> 03:20:48.640]  короче, n пополам плюс o от единицы,
[03:20:49.360 --> 03:20:50.640]  но этот зубчик будет находиться,
[03:20:50.640 --> 03:20:51.920]  ну там либо слева, либо справа,
[03:20:52.640 --> 03:20:53.920]  но это одно и то же.
[03:20:56.640 --> 03:20:57.920]  Если распил прошел мимо него.
[03:20:58.640 --> 03:20:58.920]  Да.
[03:20:59.640 --> 03:21:05.920]  А если не мимо, то на самом деле будет 2t от уголочка, да.
[03:21:09.640 --> 03:21:09.920]  Так.
[03:21:14.640 --> 03:21:17.920]  Так, классно, у нас появились две новые рекурренты.
[03:21:18.640 --> 03:21:19.920]  С какой начнем?
[03:21:20.640 --> 03:21:22.920]  Ну, очевидно, что вот вторая рекуррента,
[03:21:23.640 --> 03:21:24.920]  она симметрично наша.
[03:21:25.640 --> 03:21:25.920]  Вот это?
[03:21:26.640 --> 03:21:26.920]  Какой?
[03:21:28.640 --> 03:21:28.920]  Не факт.
[03:21:29.640 --> 03:21:29.920]  Чего?
[03:21:32.640 --> 03:21:33.920]  Ну, потому что если распилить вот так вот,
[03:21:35.640 --> 03:21:36.920]  то вот получится уголочка.
[03:21:37.640 --> 03:21:38.920]  Что за издевательства?
[03:21:40.640 --> 03:21:41.920]  И что сразу издевательства?
[03:21:42.640 --> 03:21:43.920]  Так, ладно, у нас появились две новые рекурренты.
[03:21:44.640 --> 03:21:44.920]  С первой начнем.
[03:21:45.640 --> 03:21:46.920]  Ну да, лагит, ну ладно, да.
[03:21:48.640 --> 03:21:49.920]  Да нет, там, ну господи.
[03:21:51.640 --> 03:21:51.920]  Вот.
[03:21:52.640 --> 03:21:53.920]  Значит, поехали.
[03:21:59.640 --> 03:21:59.920]  Чего?
[03:22:02.640 --> 03:22:02.920]  Вот это?
[03:22:04.640 --> 03:22:04.920]  Не факт.
[03:22:05.640 --> 03:22:07.920]  Ну, потому что разделять-то мы будем строго вот так по иксу.
[03:22:09.640 --> 03:22:10.920]  И получится, смотрите, два случая получится.
[03:22:12.640 --> 03:22:14.920]  Либо разрез опять прошел мимо,
[03:22:15.640 --> 03:22:17.920]  и мы снова свелись к уже вот такой рекурренте.
[03:22:20.640 --> 03:22:20.920]  Будь здоров.
[03:22:21.640 --> 03:22:21.920]  Так.
[03:22:26.640 --> 03:22:26.920]  Либо.
[03:22:28.640 --> 03:22:30.920]  О, ребят, смотрите, сейчас вообще весело будет.
[03:22:31.640 --> 03:22:31.920]  Так, и распил вот здесь.
[03:22:32.640 --> 03:22:34.920]  Тогда здесь оказывается следующее.
[03:22:36.640 --> 03:22:40.920]  Тогда получается, значит, здесь, ну когда мы тут поворачиваем,
[03:22:42.640 --> 03:22:42.920]  значит, что у нас тут получится?
[03:22:43.640 --> 03:22:44.920]  Получится вот примерно вот такая штука.
[03:22:46.640 --> 03:22:47.920]  Да, ну как бы.
[03:22:48.920 --> 03:22:50.200]  Пока вроде да.
[03:22:50.920 --> 03:22:54.200]  Но при этом во втором рекурсивном запуске появляется уже полюбившийся нам зубчик.
[03:22:58.920 --> 03:23:04.200]  Вот это вот штука, когда у нас много границы, по какому-то направлению задется.
[03:23:04.920 --> 03:23:06.200]  Это можно, кажется, оценить.
[03:23:06.920 --> 03:23:07.200]  Ну вот.
[03:23:09.920 --> 03:23:13.200]  Ну там аккуратненько надо будет делать, поэтому на всякий случай пока так распишем.
[03:23:14.200 --> 03:23:18.480]  Ну пока мы уже можем как бы в принципе сказать, что вот это вот мы можем в принципе из
[03:23:19.200 --> 03:23:21.480]  рассмотрения выкинуть, потому что вот эта рекуррента вот эту по любому мы жерирует.
[03:23:23.200 --> 03:23:26.480]  Ну понятно, схема будет понятна, что мы там будем потом доказывать, что каждая T не
[03:23:27.200 --> 03:23:29.480]  превосходит, ну там чего там она не будет превосходить, мы пока не знаем.
[03:23:31.200 --> 03:23:31.480]  Ну вот.
[03:23:32.200 --> 03:23:34.480]  Но как бы очевидно, что в доказательстве по индукции там понятно, что если это
[03:23:35.200 --> 03:23:36.480]  докажем, то и это упадет само.
[03:23:38.200 --> 03:23:39.480]  Поэтому можно считать, что тут случай один.
[03:23:41.200 --> 03:23:41.480]  Так.
[03:23:42.200 --> 03:23:42.480]  Что дальше?
[03:23:43.200 --> 03:23:44.480]  Дальше уголочек.
[03:23:47.200 --> 03:23:48.480]  Так, поехали, уголочек.
[03:23:55.200 --> 03:23:57.480]  Так, ну тут тоже на самом деле два случая.
[03:23:59.200 --> 03:24:02.480]  Но на самом деле заметим, что в обоих случаях будет уголочек, вопрос только в том,
[03:24:03.200 --> 03:24:05.480]  будет ли уголок кроме уголочка что-нибудь еще или не будет.
[03:24:06.200 --> 03:24:08.480]  Поэтому давайте так, я этот случай даже писать сразу не буду.
[03:24:09.200 --> 03:24:11.480]  Поэтому честно напишу самый интересный случай.
[03:24:11.480 --> 03:24:12.760]  А интересный случай звучит так.
[03:24:14.480 --> 03:24:17.760]  Значит тут получается примерно вот такая уже штука.
[03:24:30.480 --> 03:24:31.760]  Так, ну здесь уголочек никуда не делся.
[03:24:38.480 --> 03:24:39.760]  Так, идем дальше.
[03:24:39.760 --> 03:24:41.040]  Значит так, с уголочек расписали.
[03:24:41.760 --> 03:24:43.040]  Так, что у нас там дальше идет?
[03:24:43.760 --> 03:24:47.040]  О, дальше идет вот этот вот красивый вертикальный полоса.
[03:24:48.760 --> 03:24:50.040]  Да, он красивый.
[03:24:50.760 --> 03:24:53.040]  Так, настолько красивый, что я давайте вот это все сотру.
[03:24:53.760 --> 03:24:55.040]  Так.
[03:24:57.760 --> 03:25:00.040]  Так, сейчас это мы стираем.
[03:25:03.760 --> 03:25:05.040]  Так, так, так, так.
[03:25:06.760 --> 03:25:08.040]  Значит он...
[03:25:09.760 --> 03:25:11.040]  Так, значит смотрите.
[03:25:11.760 --> 03:25:13.040]  Так, Т от этой вот полоса.
[03:25:14.760 --> 03:25:16.040]  Какая-то просто полоса.
[03:25:16.760 --> 03:25:18.040]  Так.
[03:25:19.760 --> 03:25:21.040]  Чего, что не так?
[03:25:22.760 --> 03:25:24.040]  А это работает значит...
[03:25:24.760 --> 03:25:28.040]  Так, вот тут нам принципиально распил произойдет по полосе или мимо полосы.
[03:25:30.760 --> 03:25:39.040]  Потому что, если он пройдет мимо полосы, то получится очевидно Т от горизонтальной полосы,
[03:25:39.760 --> 03:25:41.040]  получается теперь.
[03:25:45.760 --> 03:25:47.040]  И плюс тому от единицы какой-то.
[03:25:50.760 --> 03:25:56.040]  Либо распил произойдет по полосе, и тогда у нас получится два Т от...
[03:25:58.760 --> 03:26:01.040]  Кстати, от того, чего у нас опять еще не было.
[03:26:02.760 --> 03:26:04.040]  Вот такой красоты.
[03:26:05.760 --> 03:26:07.040]  Спасибо, Господи.
[03:26:09.760 --> 03:26:11.040]  Ой.
[03:26:11.760 --> 03:26:13.040]  Так, ладно.
[03:26:13.760 --> 03:26:15.040]  Так, бфэсимся дальше.
[03:26:16.760 --> 03:26:18.040]  Так, что мы еще не...
[03:26:18.760 --> 03:26:20.040]  Так, что мы еще не расписывали?
[03:26:21.760 --> 03:26:23.040]  Так.
[03:26:23.760 --> 03:26:26.040]  А, этот зубчик мы расписывали, уголочек расписали.
[03:26:26.760 --> 03:26:28.040]  А, получается вот эта штука у нас дальше идет.
[03:26:28.760 --> 03:26:30.040]  Можно пока сделать...
[03:26:30.760 --> 03:26:33.040]  Нет, у нас еще не было полосы горизонтальной, которая вот там была.
[03:26:33.760 --> 03:26:35.040]  Вот эта?
[03:26:35.760 --> 03:26:37.040]  Нет, пройдем.
[03:26:37.760 --> 03:26:39.040]  Но сначала у нас еще вот это не было, поэтому все постепенно.
[03:26:40.760 --> 03:26:42.040]  Спасибо.
[03:26:42.760 --> 03:26:44.040]  Ну как бы, раз уж мы тут в порядке...
[03:26:44.760 --> 03:26:46.040]  Раз уж мы завели структуру данных очередь.
[03:26:47.760 --> 03:26:49.040]  Так, значит смотрим.
[03:26:50.760 --> 03:26:52.040]  Вот.
[03:26:52.760 --> 03:26:55.040]  Так, ну здесь на самом деле тоже становится достаточно приятно.
[03:26:56.760 --> 03:26:59.040]  Потому что заметим, что распил тут устроен так,
[03:26:59.760 --> 03:27:02.040]  что как бы у нас либо пустая ячейка пойдет в ноль,
[03:27:02.760 --> 03:27:05.040]  либо полная ячейка пойдет в ноль, да?
[03:27:05.760 --> 03:27:07.040]  Ну не в ноль, а там в единицу идет.
[03:27:07.040 --> 03:27:09.320]  Поэтому получается железобетонная ситуация,
[03:27:10.040 --> 03:27:12.320]  когда у вас будет Т от Н пополам плюс О от единицы,
[03:27:13.040 --> 03:27:17.320]  от ячейки вот такого красивого рода.
[03:27:19.040 --> 03:27:20.320]  Ой, как удачно.
[03:27:22.040 --> 03:27:23.320]  А можно вопрос?
[03:27:24.040 --> 03:27:26.320]  Почему с права у нас не повернулись?
[03:27:27.040 --> 03:27:28.320]  Последний.
[03:27:29.040 --> 03:27:30.320]  Что там?
[03:27:31.040 --> 03:27:32.320]  С права, в последней строке,
[03:27:33.040 --> 03:27:36.320]  у нас же должны были повернуться и стать горизонтальными.
[03:27:37.040 --> 03:27:38.320]  Справа где?
[03:27:39.040 --> 03:27:40.320]  Вот здесь?
[03:27:41.040 --> 03:27:42.320]  Нет, но повернулась, потому что когда вы тут распилили,
[03:27:43.040 --> 03:27:44.320]  у вас тут была полоса как бы отсеченная по вертикали,
[03:27:45.040 --> 03:27:47.320]  поэтому она повернулась, стала отсеченной по горизонтали.
[03:27:48.040 --> 03:27:49.320]  А тут еще остался угол.
[03:27:50.040 --> 03:27:51.320]  Ну да, этот угол, конечно, должен быть немножко может быть в другом месте,
[03:27:52.040 --> 03:27:54.320]  но там в каком из четырех мест угол, на самом деле, неважно.
[03:27:55.040 --> 03:27:57.320]  Это называется 2D-дерево, а не дерево разбого случая.
[03:27:59.040 --> 03:28:02.320]  Это называется доказательство 2D-дерево.
[03:28:03.040 --> 03:28:04.320]  Точнее, выводы симпатики.
[03:28:04.320 --> 03:28:05.600]  А это же...
[03:28:07.320 --> 03:28:09.600]  Это же даже не близко доказательства общего случая.
[03:28:10.320 --> 03:28:11.600]  Не близко.
[03:28:12.320 --> 03:28:14.600]  Я честно говоря, я доказательства общего случая не знаю,
[03:28:15.320 --> 03:28:18.600]  но я призываю, что общий случай, наверное, как-то обобщает это все.
[03:28:19.320 --> 03:28:20.600]  Аккуратненько.
[03:28:21.320 --> 03:28:22.600]  Разбирает случаи, да, опять.
[03:28:23.320 --> 03:28:24.600]  Разбор случаев кажется совсем немного,
[03:28:25.320 --> 03:28:27.600]  но вот глобально, что у нас происходит?
[03:28:28.320 --> 03:28:29.600]  У нас либо что-то отсекается,
[03:28:30.320 --> 03:28:32.600]  мы просто испускаем рекурсивный вызов от этого пола,
[03:28:32.600 --> 03:28:34.880]  либо у нас одна из сторон,
[03:28:35.600 --> 03:28:37.880]  как будто бы, ну, почти всегда у нас одна из сторон
[03:28:38.600 --> 03:28:39.880]  просто добавляется в количество прижатых сторон
[03:28:40.600 --> 03:28:41.880]  без нашей возможности.
[03:28:42.600 --> 03:28:43.880]  Кроме одного единственного случая,
[03:28:44.600 --> 03:28:48.880]  когда мы подряд отсекаем сначала одну сторону
[03:28:49.600 --> 03:28:51.880]  и противоположную ей там сверху, и с другой стороны.
[03:28:52.600 --> 03:28:53.880]  Я просто как-то...
[03:28:54.600 --> 03:28:55.880]  Я не могу сейчас нормально это промализовать,
[03:28:56.600 --> 03:28:57.880]  но на самом деле...
[03:28:58.600 --> 03:28:59.880]  Сделать типа один вариант.
[03:28:59.880 --> 03:29:02.160]  То есть количество прижатых сторон
[03:29:02.880 --> 03:29:04.160]  либо не меняется,
[03:29:04.880 --> 03:29:06.160]  мы идем только в одну ветвь,
[03:29:06.880 --> 03:29:08.160]  либо увеличивается на одну ветвь.
[03:29:08.880 --> 03:29:11.160]  Ну вот, хорошо, давайте это добьем, и там уже...
[03:29:11.880 --> 03:29:14.160]  Чуть аккуратнее, потому что прижатые стороны может быть...
[03:29:14.880 --> 03:29:16.160]  Ладно.
[03:29:16.880 --> 03:29:19.160]  Прижатые стороны может быть там примерно посередине,
[03:29:19.880 --> 03:29:21.160]  потом в углу, а потом вся сторона.
[03:29:21.880 --> 03:29:24.160]  Значит, смотрите, так, что мы там дальше должны?
[03:29:24.880 --> 03:29:26.160]  Так, дальше у нас идет горизонтальная полоса,
[03:29:26.880 --> 03:29:29.160]  но здесь, слава богу, все в порядке.
[03:29:29.880 --> 03:29:32.160]  Потому что это 2t от вертикальной полосы,
[03:29:32.880 --> 03:29:34.160]  а то он пополам.
[03:29:34.880 --> 03:29:36.160]  300 единиц.
[03:29:37.880 --> 03:29:40.160]  Так, хлоп-хлоп.
[03:29:40.880 --> 03:29:42.160]  Так, что там у нас осталось?
[03:29:42.880 --> 03:29:44.160]  Так, у нас еще осталось что-нибудь?
[03:29:44.880 --> 03:29:47.160]  А, у нас осталась еще вот эта штука.
[03:29:47.880 --> 03:29:53.160]  Давайте t от вот этой вот красивой штуки, штукенцы.
[03:29:55.880 --> 03:29:58.160]  А t равно у нас чему?
[03:29:59.880 --> 03:30:01.160]  Не слышу.
[03:30:01.880 --> 03:30:04.160]  Я вас не слышу.
[03:30:11.880 --> 03:30:13.160]  Да пытаться-то всегда можно.
[03:30:13.880 --> 03:30:15.160]  Так.
[03:30:19.880 --> 03:30:21.160]  Так, ну давайте так.
[03:30:21.880 --> 03:30:24.160]  Так, правильно ли я понял, что у нас все это...
[03:30:24.880 --> 03:30:26.160]  Рекуренты закончились.
[03:30:27.160 --> 03:30:28.440]  Так, ладно.
[03:30:29.160 --> 03:30:30.440]  Давайте, есть ли у нас рекуренты,
[03:30:31.160 --> 03:30:34.440]  которые еще надо раскручивать?
[03:30:35.160 --> 03:30:36.440]  Или все, система замкнулась?
[03:30:37.160 --> 03:30:38.440]  Так.
[03:30:40.160 --> 03:30:41.440]  Стоп, вот это мне не нравится.
[03:30:42.160 --> 03:30:43.440]  Где?
[03:30:44.160 --> 03:30:45.440]  Что тебе не нравится?
[03:30:48.160 --> 03:30:49.440]  Нет, что?
[03:30:50.160 --> 03:30:51.440]  Тут распилы однозначно идут.
[03:30:52.160 --> 03:30:53.440]  Вот так и вот так.
[03:30:54.160 --> 03:30:55.440]  Мне не нравится, что она в два переходит.
[03:30:56.160 --> 03:30:57.440]  Ну в два.
[03:30:58.160 --> 03:31:00.440]  Но при этом ее состояние не меняется.
[03:31:01.160 --> 03:31:02.440]  Ну как не меняется?
[03:31:03.160 --> 03:31:04.440]  Поворачивается.
[03:31:05.160 --> 03:31:07.440]  В плане мы можем так рекурсить.
[03:31:08.160 --> 03:31:09.440]  А теперь смотреть.
[03:31:10.160 --> 03:31:11.440]  Так, ладно.
[03:31:12.160 --> 03:31:13.440]  Так.
[03:31:14.160 --> 03:31:15.440]  А чего нам не хватает?
[03:31:16.160 --> 03:31:17.440]  Типа не только адена еще не знаю, а...
[03:31:18.160 --> 03:31:19.440]  Нет.
[03:31:20.160 --> 03:31:21.440]  И сведение с Терон, чтобы он уже вычислялся.
[03:31:22.160 --> 03:31:23.440]  Типа каждый...
[03:31:24.160 --> 03:31:25.440]  Да нет, смотрите.
[03:31:26.160 --> 03:31:29.440]  Типа за два шага уменьшаем все в три раза.
[03:31:30.160 --> 03:31:31.440]  Что такое?
[03:31:32.160 --> 03:31:33.440]  Ой, сейчас.
[03:31:34.160 --> 03:31:35.440]  Так.
[03:31:36.160 --> 03:31:37.440]  Ну давайте думать.
[03:31:38.160 --> 03:31:39.440]  Кажется, на два раза...
[03:31:40.160 --> 03:31:41.440]  А вот там справа, по случаю, с уголком...
[03:31:42.160 --> 03:31:43.440]  Где?
[03:31:44.160 --> 03:31:45.440]  А после повернули...
[03:31:46.160 --> 03:31:47.440]  Ну рядом.
[03:31:48.160 --> 03:31:51.440]  Ну а если мы рядом прошли, то останется только вот это и это,
[03:31:52.160 --> 03:31:53.440]  это будет мажорироваться.
[03:31:54.160 --> 03:31:55.440]  Вот я тут имел в виду, что тут должно быть вот это,
[03:31:56.160 --> 03:31:59.440]  потому что у нас такая ситуация уже встречалась.
[03:32:00.160 --> 03:32:03.440]  Ну было бы, типа, то же самое, но без этого.
[03:32:04.160 --> 03:32:05.440]  Ну кому это надо?
[03:32:06.160 --> 03:32:11.440]  Вот сверхоригинальная удавка из капронового волокна.
[03:32:12.160 --> 03:32:13.440]  Так.
[03:32:14.160 --> 03:32:17.440]  Как говорится, пальчики оближете.
[03:32:18.160 --> 03:32:19.440]  Значит, смотрите.
[03:32:20.160 --> 03:32:23.440]  Так, ребят, смотрите.
[03:32:23.440 --> 03:32:24.720]  Смотрите.
[03:32:25.440 --> 03:32:26.720]  Сейчас будет немножко магии.
[03:32:27.440 --> 03:32:28.720]  Так.
[03:32:29.440 --> 03:32:30.720]  Система рекурренции замкнулась.
[03:32:31.440 --> 03:32:36.720]  И мы можем начать, кажется, собственно, нормально жить.
[03:32:37.440 --> 03:32:40.720]  Так, ну давайте начнем с того, что избавимся от вот этой.
[03:32:41.440 --> 03:32:42.720]  Так.
[03:32:43.440 --> 03:32:44.720]  Нет, ладно, избавляться от нее не будем.
[03:32:45.440 --> 03:32:50.720]  А сразу заметим следующее, что вот в эту штуку можно сразу подставить вот эту.
[03:32:51.440 --> 03:32:52.720]  Видите, да?
[03:32:53.440 --> 03:32:56.720]  Понятно, что это на самом деле равно чему?
[03:32:57.440 --> 03:33:02.720]  Это равно 2t от того же самого, но n поделить на 4 плюс o от единиц.
[03:33:07.440 --> 03:33:08.720]  Опа.
[03:33:09.440 --> 03:33:10.720]  Ой, сюрприз.
[03:33:11.440 --> 03:33:14.720]  Это равно 2t от того же самого от n делить на 4 плюс 1.
[03:33:15.440 --> 03:33:16.720]  Опа.
[03:33:17.440 --> 03:33:18.720]  Так, то есть веселое время, да?
[03:33:18.720 --> 03:33:24.000]  2t от n равно 2t от n делить на 4 плюс o от единиц.
[03:33:24.720 --> 03:33:26.000]  Так, задачка есть там первая, из первой семи.
[03:33:26.720 --> 03:33:28.000]  Ставим два линии первой лекции.
[03:33:28.720 --> 03:33:30.000]  Может, второй.
[03:33:30.720 --> 03:33:32.000]  Чему равно t от n?
[03:33:32.720 --> 03:33:36.000]  Но если я все это умею считать, то это корень.
[03:33:36.720 --> 03:33:38.000]  Да, это...
[03:33:38.720 --> 03:33:40.000]  Да, да, да.
[03:33:40.720 --> 03:33:42.000]  А кто-то прям вообще был в шоке.
[03:33:42.720 --> 03:33:44.000]  Но да, это...
[03:33:44.720 --> 03:33:48.000]  Но это n в степени 2 поделить на 4 равно t от корень из n.
[03:33:48.720 --> 03:33:50.000]  Ну вот, факт остается факт.
[03:33:50.720 --> 03:33:52.000]  Ну что делать, знаете?
[03:33:52.720 --> 03:33:54.000]  Ну знаете, да...
[03:33:54.720 --> 03:33:56.000]  Нет, ну знаете, что делать, когда там...
[03:33:56.720 --> 03:34:00.000]  Для того, чтобы понять, как устроен мир, вы там отправляетесь
[03:34:00.720 --> 03:34:04.000]  в какую-то эпическую экспедицию, и результатом этой экспедиции
[03:34:04.720 --> 03:34:08.000]  узнаете, что на самом деле вы существуете только там в компьютере
[03:34:08.720 --> 03:34:10.000]  какого-то нерадивого студента, которому дали задание
[03:34:10.720 --> 03:34:12.000]  проимулировать жизнь.
[03:34:12.720 --> 03:34:14.000]  Ну там есть такой красивый рассказ.
[03:34:14.720 --> 03:34:16.000]  Так вот откуда столько бара.
[03:34:16.720 --> 03:34:18.000]  Ну да.
[03:34:18.720 --> 03:34:20.000]  Так там был такой человек, да.
[03:34:20.720 --> 03:34:24.000]  То есть там студент был таким не особо хорошим физиком, но хорошим программистом.
[03:34:24.720 --> 03:34:26.000]  Поэтому забабахал какую-то физику.
[03:34:26.720 --> 03:34:28.000]  То, что происходит на длинных меньше 10-9.
[03:34:28.720 --> 03:34:30.000]  И так, ладно, закидаем рандомом.
[03:34:30.720 --> 03:34:32.000]  Ну и так далее.
[03:34:32.720 --> 03:34:34.000]  Вот.
[03:34:34.720 --> 03:34:36.000]  Ну там отдельно рассказ могу...
[03:34:36.720 --> 03:34:38.000]  Идея интересная, реализация, к сожалению, не очень.
[03:34:38.720 --> 03:34:40.000]  Но вот...
[03:34:40.720 --> 03:34:42.000]  Но прикольная хотя бы идея.
[03:34:42.720 --> 03:34:44.000]  То есть, в результате, кончилось тем, что вообще очень грустно,
[03:34:44.720 --> 03:34:48.000]  что цивилизация по ее меркам миллион лет жила,
[03:34:48.720 --> 03:34:50.000]  а потом...
[03:34:50.720 --> 03:34:52.000]  Умерла на том, что диск формат нули.
[03:34:52.720 --> 03:34:54.000]  Ну в итоге-то да.
[03:34:54.720 --> 03:34:56.000]  Хотя картинку оставил, потому что это было грустно,
[03:34:56.720 --> 03:34:58.000]  потому что там какой-то товарищ научился жить вечно.
[03:34:58.720 --> 03:35:02.000]  Но как бы и в результате сделал просто меропроект максимум, что мог сделать.
[03:35:02.720 --> 03:35:04.000]  То есть он полностью разобрался в мире
[03:35:04.720 --> 03:35:11.000]  и там переставил звезды таким образом, чтобы на рабочем столе они выражались просто в такую огромную на весь экран фразу.
[03:35:11.720 --> 03:35:14.000]  Твой быдлокот нас огорчает.
[03:35:14.720 --> 03:35:17.000]  Вот, кстати, так и гуглите.
[03:35:17.000 --> 03:35:18.280]  Так рассказ и называется.
[03:35:19.000 --> 03:35:20.280]  Твой быдлокот нас огорчает.
[03:35:21.000 --> 03:35:22.280]  Вот очень рекомендую на самом деле, да.
[03:35:23.000 --> 03:35:26.280]  Нет, на самом деле, конечно, это очень грустно, да, потому что...
[03:35:27.000 --> 03:35:32.280]  Конечно, да, что вся наша жизнь это просто курсовая работа раздолбанного студента, да.
[03:35:33.000 --> 03:35:34.280]  Что?
[03:35:35.000 --> 03:35:36.280]  Ну, не знаю.
[03:35:37.000 --> 03:35:38.280]  Ну, как сказать?
[03:35:39.000 --> 03:35:44.280]  Ну в дачном мире это означает, что в любой момент времени крышка ноутбука может быть захлопнута.
[03:35:44.280 --> 03:35:45.560]  В смысле?
[03:35:46.280 --> 03:35:47.560]  Мы делаем бэкап.
[03:35:48.280 --> 03:35:49.560]  Мы не делаем бэкап.
[03:35:50.280 --> 03:35:51.560]  Мы внутри.
[03:35:52.280 --> 03:35:53.560]  Мы живем в бэкапе.
[03:35:54.280 --> 03:35:57.560]  А в трехмерном случае там вообще получится что-то другое?
[03:35:58.280 --> 03:35:59.560]  Ну, пока не знаю.
[03:36:00.280 --> 03:36:01.560]  Ладно, давайте тут добьем вообще.
[03:36:02.280 --> 03:36:03.560]  Как бы корень и зен, это вот это вот корень и зен.
[03:36:04.280 --> 03:36:05.560]  Вот давайте разбираться.
[03:36:06.280 --> 03:36:07.560]  Так, вот это вот корень и зен.
[03:36:08.280 --> 03:36:09.560]  И вот это автоматика.
[03:36:10.280 --> 03:36:11.560]  И вот это корень и зен.
[03:36:12.280 --> 03:36:13.560]  А теперь давайте разберемся.
[03:36:14.280 --> 03:36:15.560]  Я думаю, что мы можем с верхней разобраться.
[03:36:16.280 --> 03:36:17.560]  Так, ну давайте разбираться.
[03:36:18.280 --> 03:36:19.560]  Так, нет.
[03:36:20.280 --> 03:36:21.560]  Ну, смотрите, не совсем.
[03:36:22.280 --> 03:36:23.560]  Вот здесь мы можем сказать, что в этом случае корень и зен.
[03:36:24.280 --> 03:36:25.560]  А вот в этом не факт.
[03:36:26.280 --> 03:36:27.560]  Повторить, пожалуйста.
[03:36:28.280 --> 03:36:29.560]  Как мы говорим по очереди?
[03:36:30.280 --> 03:36:35.560]  Ну, смотрите, потому что вот здесь мы вот это раскрыли по этой формуле.
[03:36:36.280 --> 03:36:41.560]  И получилось, что t от n, вот от этого равно 2t с той же самой картинкой, но от n делить на 4.
[03:36:41.560 --> 03:36:44.840]  И все еще плюс о от единицы, но там чуть более жирных.
[03:36:45.560 --> 03:36:46.840]  И получилось вот такая рекуррента.
[03:36:47.560 --> 03:36:54.840]  Сейчас мы можем заменить вот там вот сверху такой палки.
[03:36:55.560 --> 03:36:56.840]  Ну да.
[03:36:57.560 --> 03:37:06.840]  То есть на самом деле да, мы можем тоже сказать, что если вот по этому случаю пошли, то получится 2t от вертикальной полосы, n делить на 4 плюс о от единицы.
[03:37:07.560 --> 03:37:10.840]  И там по аккуратной индукции тоже вывести, что это тоже корень.
[03:37:11.560 --> 03:37:16.840]  То есть как бы либо мы сразу получим корень, либо круты рекурсию, которая сама нам дает корень.
[03:37:17.560 --> 03:37:18.840]  Вот.
[03:37:19.560 --> 03:37:20.840]  Ну там можно аккуратно по индукции уже расписывать, что это корень.
[03:37:21.560 --> 03:37:24.840]  Так, ну и как вы догадываетесь, ну это автоматически тоже корень.
[03:37:25.560 --> 03:37:30.840]  Но притем дальше, по-моему, там сопротивление начинает быть уже более-менее бесполезным.
[03:37:31.560 --> 03:37:32.840]  Вот.
[03:37:33.560 --> 03:37:36.840]  Ну потому что вот в этой ситуации очевидно, что у вас тут корень плюс какой-то рекурсивный запуск.
[03:37:36.840 --> 03:37:42.120]  Ну здесь понятно будет корень из n плюс корень из n пополам, плюс корень из n на 4 и так далее, если расписывать это прям до упора.
[03:37:42.840 --> 03:37:46.120]  Ну вот, поэтому это автоматически.
[03:37:46.840 --> 03:37:48.120]  Поэтому пока не интересует корень из n.
[03:37:48.840 --> 03:37:52.120]  Так, ну вертикальная полоса у нас теперь тоже корень из n.
[03:37:52.840 --> 03:37:56.120]  Поэтому получается опять, значит, что тут получается?
[03:37:56.840 --> 03:38:04.120]  А, ну здесь смотрите, здесь тоже как-то аккуратно получается, что тут как бы этот зубчик это вот корень из n плюс зубчик.
[03:38:04.120 --> 03:38:11.400]  Ну вот, а зубчик либо сразу выдает вам корень, либо вы сводитесь к себе g.
[03:38:12.120 --> 03:38:17.400]  Да, то есть опять получится корень из n плюс g, и там получится тоже и тут корень из n, короче, и тут корень из n.
[03:38:18.120 --> 03:38:19.400]  Ну и как вы догадываетесь?
[03:38:20.120 --> 03:38:25.400]  Ну тут тоже, видите, до какого-то момента спуска не больше, чем логарифм шагов, и после этого корень.
[03:38:26.120 --> 03:38:29.400]  То есть получается, ну вот, то есть мораль.
[03:38:30.120 --> 03:38:33.400]  Да, то есть это было абсолютно непредсказуемо.
[03:38:34.120 --> 03:38:39.400]  Оказывается, что у нас t от n равно t это от корень из n.
[03:38:40.120 --> 03:38:41.400]  Оказывается, что лучше было писать корневуху.
[03:38:42.120 --> 03:38:47.400]  Ну вот, ну я не знаю, я не знаю, как ты тут будешь писать корневуху.
[03:38:48.120 --> 03:38:51.400]  Типу фен, видите, построить на блоках по корням.
[03:38:52.120 --> 03:38:57.400]  Ага, разобьем точки на множество по корень, в каждом из них, а в каждом из них попытаемся что-то там, да.
[03:38:58.120 --> 03:39:01.400]  В общем, я боюсь там, да, напрямую.
[03:39:01.400 --> 03:39:04.680]  Слушайте, когда дерево работает за корень катой степени или n-кодат.
[03:39:05.400 --> 03:39:06.680]  Нет, скорее, на целик на n-коди.
[03:39:07.400 --> 03:39:08.680]  В общем, там в общем, значит...
[03:39:09.400 --> 03:39:10.680]  Может быть с n-коди или 2-коди степени каты?
[03:39:11.400 --> 03:39:12.680]  Нет, там...
[03:39:15.400 --> 03:39:16.680]  Да, вот, n-коди.
[03:39:17.400 --> 03:39:18.680]  Да, в демерном случае на самом деле вот так.
[03:39:19.400 --> 03:39:20.680]  Ну, кстати, да, сколько у нас времени есть?
[03:39:21.400 --> 03:39:22.680]  Потому что мы до раз проведем.
[03:39:23.400 --> 03:39:26.680]  О, кайф, ой, кайф, время еще есть, давайте думать.
[03:39:26.680 --> 03:39:29.960]  В демерном случае оно обретает смысл какой-то, что мы такое делаем, что...
[03:39:30.680 --> 03:39:31.960]  Оно теряется.
[03:39:32.680 --> 03:39:35.960]  Да-да, делаем не за ОАТН, а за ОАТН, да, вот в такой степени, да.
[03:39:38.680 --> 03:39:41.960]  Не, ну это меньше, чем n-код будет, да.
[03:39:42.680 --> 03:39:43.960]  Там константа, скорее всего, такая будет.
[03:39:44.680 --> 03:39:45.960]  Ну, это понятно.
[03:39:46.680 --> 03:39:47.960]  Ну, а вы когда последний раз это делали в шестилетии?
[03:39:48.680 --> 03:39:49.960]  В шестилетии.
[03:39:50.680 --> 03:39:51.960]  В шестилетии.
[03:39:52.680 --> 03:39:53.960]  В шестилетии.
[03:39:54.680 --> 03:39:55.960]  В шестилетии.
[03:39:56.680 --> 03:39:57.960]  В демерном мире, да.
[03:39:58.680 --> 03:40:01.960]  Константа как раз не должна быть большая, мы просто проходимся, но у нас рекурсия...
[03:40:02.680 --> 03:40:05.960]  Но не совсем, знаете, константа, когда у вас шестимерный массив, она жирная.
[03:40:06.680 --> 03:40:17.960]  На практике оказывается, что константа от собственного вот этого по счету шестимерного индекса оказывается больше, чем если бы этот шестимерный массив хранили в одномерном и вычисляли бы индексы ручками.
[03:40:18.680 --> 03:40:22.960]  Нет, базируясь на своем опыте, я говорю, у меня была ситуация, когда я написал пятимерный массив.
[03:40:23.680 --> 03:40:24.960]  Задача получала ТЛ.
[03:40:25.960 --> 03:40:27.240]  Вот, ТЛ был 15.
[03:40:27.960 --> 03:40:34.240]  Я заменил пятимерные индексы на одномерные индексы, ну там честно ручками прям расшифровывал, там 1 в 5, 5, 1.
[03:40:34.960 --> 03:40:38.240]  И получил окей, причем зашло за время 9, точка там бла-бла-бла.
[03:40:40.960 --> 03:40:43.240]  Если вы сдавали на Яндекс.Контесте, это ни о чем не говорит?
[03:40:43.960 --> 03:40:46.240]  Да, но если мне не изменяет память, я сдавал на Код Форсисе.
[03:40:49.960 --> 03:40:51.240]  Жалко, жалко.
[03:40:52.240 --> 03:40:54.520]  Да, Як умеет в 3 секунды.
[03:40:55.240 --> 03:41:01.520]  Вот, а так вот действительно можно додуматься. Интересно, вот да, потому что, потому что возможно да, то есть я тут конечно расписал прям максимально скрупулезно.
[03:41:02.240 --> 03:41:06.520]  Но теперь да, но вот какая-то идея, вот можно оставшиеся 10 минут подумать действительно.
[03:41:07.240 --> 03:41:09.520]  А нельзя ли этот одализ действительно упростить?
[03:41:11.240 --> 03:41:18.520]  Ну я так понимаю, мы типа, мы каждый раз либо витруемся один раз, либо витруемся два раза, но переходим в следующую категорию состояния.
[03:41:18.520 --> 03:41:25.800]  Их там порядка D в какой-то степени, или там 2 в степени D, ну D короче маленький.
[03:41:26.520 --> 03:41:27.800]  2 в степени D скорее всего.
[03:41:28.520 --> 03:41:37.800]  Ну да, и потом короче мы приходим в итоге вот в такую категорию, что каждый раз когда мы проворачиваемся D раз, у нас идет один рекурсийный вызов, а остальные два раза.
[03:41:40.520 --> 03:41:41.800]  Ну да, ну можно да.
[03:41:48.520 --> 03:41:53.800]  Можно получить вообще типа сразу просто вверх на последние параметры.
[03:41:56.520 --> 03:41:57.800]  Ну снизу да.
[03:41:59.520 --> 03:41:59.800]  Ну да.
[03:42:03.520 --> 03:42:07.800]  А, ну типа если вам сразу запрос вот такого вида, то вы как бы уже на него отвечаете за кое-что.
[03:42:08.520 --> 03:42:10.800]  Ну вроде более-менее очевидно, что мы можем его построить.
[03:42:11.520 --> 03:42:16.800]  Ну типа того да. Ну да, то есть получается, что да, что как бы лучше мы не получим, да.
[03:42:16.800 --> 03:42:18.080]  Да.
[03:42:23.800 --> 03:42:24.080]  Нет.
[03:42:26.800 --> 03:42:27.080]  Нет.
[03:42:27.800 --> 03:42:28.080]  Зачем?
[03:42:28.800 --> 03:42:29.080]  Не надо.
[03:42:30.800 --> 03:42:32.080]  Потому что, не, ну не совсем.
[03:42:32.800 --> 03:42:34.080]  Не, ну...
[03:42:35.800 --> 03:42:46.080]  Нет, там просто получится, что скорее всего там просто в глубину мы будем идти там, то есть на какой-то такой полосе мы туда будем идти там скажем на глубину, там на какую-то глубину D, то есть D поворотов.
[03:42:46.800 --> 03:42:51.080]  Там у вас как бы получится, да, два в степени D, значит слагаемых, одно из которых отсечется.
[03:42:51.800 --> 03:42:52.080]  И получ...
[03:42:52.800 --> 03:42:55.080]  А D в степени D.
[03:42:55.800 --> 03:42:57.080]  Нет, там два в степени D.
[03:42:57.800 --> 03:42:58.080]  Ну вот.
[03:42:58.800 --> 03:42:59.080]  Ну давайте так, смотрите.
[03:42:59.800 --> 03:43:01.080]  Так, ладно, тут все понятно, смотрите.
[03:43:01.800 --> 03:43:04.080]  Значит, смотрите, давайте попробуем проанализировать инмерный случай.
[03:43:04.800 --> 03:43:10.080]  Кажется вроде, вот конкретно сейчас у меня начинает уже ощущение, что не убой, вроде как.
[03:43:10.800 --> 03:43:11.080]  Не убой?
[03:43:11.800 --> 03:43:12.080]  Не убой.
[03:43:13.800 --> 03:43:14.080]  Ну вот.
[03:43:15.080 --> 03:43:16.360]  Ну, можно, конечно, отдельно посмотреть.
[03:43:17.080 --> 03:43:17.360]  Да.
[03:43:19.080 --> 03:43:20.360]  Но давайте смотреть.
[03:43:21.080 --> 03:43:30.360]  Мы введем такое понятие, как, значит, T с индексом, значит, с допустим индексом K от N.
[03:43:31.080 --> 03:43:32.360]  Что это означает?
[03:43:33.080 --> 03:43:37.360]  Это означает, что в подпрямоугольнике, то есть допустим...
[03:43:41.080 --> 03:43:42.360]  Вот как бы это сформулировать-то, а?
[03:43:44.080 --> 03:43:45.360]  Ну ладно.
[03:43:46.080 --> 03:43:49.360]  Как бы сформулировать камерную картинку из головы словами, да?
[03:43:50.080 --> 03:43:50.360]  Ну да.
[03:43:51.080 --> 03:43:51.360]  Нет, ну просто видите, у нас тут...
[03:43:52.080 --> 03:43:53.360]  Нет, просто видите, у нас сколько картинок получилось?
[03:43:54.080 --> 03:43:54.360]  Ну вот.
[03:43:55.080 --> 03:43:55.360]  Ну да.
[03:43:56.080 --> 03:43:56.360]  То есть там...
[03:43:57.080 --> 03:43:58.360]  Обычно получается у нас что-то типа...
[03:43:59.080 --> 03:44:00.360]  Каких-то там...
[03:44:01.080 --> 03:44:02.360]  Что-то типа 9 картинок.
[03:44:04.080 --> 03:44:06.360]  Вообще, по идее, тут должно было в двумерном случае получиться 9 картинок.
[03:44:07.080 --> 03:44:08.360]  Потому что по каждому направлению...
[03:44:09.080 --> 03:44:12.360]  По каждому направлению X и Y, да, мы как бы либо не прижаты вообще,
[03:44:12.360 --> 03:44:16.640]  либо прижаты к одной стороне, либо прижаты к обеим сторонам.
[03:44:17.360 --> 03:44:21.640]  Мы можем быть прижаты в центре стороны, с края стороны и на всю сторону.
[03:44:23.360 --> 03:44:27.640]  Ну, я и говорю, то есть прижаты по направлению к одной стороне или к двум сторонам.
[03:44:28.360 --> 03:44:30.640]  А вы фиксируете стороны относительно ее стороны.
[03:44:31.360 --> 03:44:31.640]  Ну типа того, да.
[03:44:32.360 --> 03:44:35.640]  Ну вот, хотя, видимо, у нас какой-то случай просто не произошел.
[03:44:38.360 --> 03:44:39.640]  Так, какой у нас случай не произошел?
[03:44:40.360 --> 03:44:40.640]  Ко всем прижаты.
[03:44:40.640 --> 03:44:44.920]  А, да, потому что, да, есть когда ко всем прижата, но мы ее расписывать не стали,
[03:44:45.640 --> 03:44:46.920]  потому что это вот единица все равно.
[03:44:49.640 --> 03:44:49.920]  Бесполезный случай.
[03:44:50.640 --> 03:44:51.920]  Так, не, ну не скажите, не скажите.
[03:44:52.640 --> 03:44:52.920]  Почему?
[03:44:54.640 --> 03:44:54.920]  Так.
[03:44:55.640 --> 03:44:57.920]  Это самый полезный случай, наоборот, который есть, в этом он говорит.
[03:44:58.640 --> 03:44:58.920]  Благодаря ему он работает.
[03:44:59.640 --> 03:45:00.920]  Не, ну можно как бы так, а можно...
[03:45:01.640 --> 03:45:02.920]  Нет, ну можно пытаться вообще попроще.
[03:45:03.640 --> 03:45:04.920]  Изначально думал попроще, давайте так.
[03:45:05.640 --> 03:45:06.920]  Давайте просто говорить, давайте считать, что нам просто...
[03:45:07.640 --> 03:45:09.920]  Нам интересно только, он прижат, он как бы прижат или не прижат.
[03:45:10.640 --> 03:45:13.920]  Ну хотя бы, хотя бы по одному направлению.
[03:45:15.640 --> 03:45:20.920]  И пусть у нас ТК от Н будет говорить о том, что, значит, к К-сторонам,
[03:45:22.640 --> 03:45:24.920]  К-направлением не прижато.
[03:45:26.640 --> 03:45:27.920]  Вот давайте попробуем, вот интересно сейчас получится или нет.
[03:45:30.640 --> 03:45:30.920]  И что получится?
[03:45:34.640 --> 03:45:38.920]  Ну получится следующее, что когда мы сейчас запускаем от Х, то что у нас получается?
[03:45:40.640 --> 03:45:44.920]  То есть либо по этому направлению произойдет распил,
[03:45:46.640 --> 03:45:47.920]  и тогда что получится?
[03:45:49.640 --> 03:45:49.920]  Ну давайте так.
[03:45:50.640 --> 03:45:54.920]  Значит у нас, ну скажем так, по конкретно нашему направлению,
[03:45:55.640 --> 03:45:56.920]  который у нас сейчас есть, там что могло произойти?
[03:45:59.640 --> 03:46:01.920]  Мог произойти распил, а мог не произойти.
[03:46:02.640 --> 03:46:04.920]  При этом по этому направлению уже прижато или не прижато, да?
[03:46:06.640 --> 03:46:06.920]  Вот.
[03:46:07.640 --> 03:46:09.920]  Получается что-то типа четыре случая.
[03:46:11.640 --> 03:46:14.920]  Так, ну допустим, ну правда, если не произошел распил,
[03:46:16.640 --> 03:46:20.920]  ну могло ж быть так, что как бы, ну вот, ну правда, если не произошел распил,
[03:46:21.640 --> 03:46:23.920]  то в общем-то скорее всего ничего и не поменялось, правда?
[03:46:24.640 --> 03:46:28.920]  То есть получится два Т от Н пополам, плюс 100 единицы,
[03:46:29.640 --> 03:46:31.920]  с индексом того же самого К.
[03:46:32.640 --> 03:46:34.920]  Ну того же самого, но с поворотом.
[03:46:37.640 --> 03:46:39.920]  Что-то если вот прям так анализировать...
[03:46:41.640 --> 03:46:41.920]  Что?
[03:46:42.640 --> 03:46:43.920]  А, хотя нет, наврал.
[03:46:44.640 --> 03:46:44.920]  Сейчас, наврал.
[03:46:45.640 --> 03:46:46.920]  Если распила не произошло, по-моему, просто вот так даже.
[03:46:47.640 --> 03:46:48.920]  Вот так похоже, на правду.
[03:46:49.640 --> 03:46:49.920]  Так.
[03:46:50.640 --> 03:46:50.920]  Вы уже провалились.
[03:46:51.640 --> 03:46:51.920]  Ну понятно.
[03:46:52.640 --> 03:46:52.920]  Давайте идти дальше.
[03:46:53.640 --> 03:46:53.920]  Хорошо.
[03:46:55.640 --> 03:46:58.920]  Значит, если распил произошел, то тут как бы два варианта.
[03:46:59.640 --> 03:47:04.920]  Либо распил уже был, ну вот, либо распила...
[03:47:06.640 --> 03:47:08.920]  Ну правда, смотрите, если распила не была, он произошел, да?
[03:47:10.640 --> 03:47:11.120]  Ну да.
[03:47:12.640 --> 03:47:13.920]  Нет, хотя тут как бы возникает вопрос...
[03:47:14.640 --> 03:47:14.920]  Сейчас.
[03:47:16.640 --> 03:47:17.920]  Потому что мы же там еще типа поворачивать будем.
[03:47:18.640 --> 03:47:19.920]  А, хотя нет, какая разница?
[03:47:21.640 --> 03:47:22.920]  Значит, если...
[03:47:25.640 --> 03:47:25.920]  Так.
[03:47:27.640 --> 03:47:31.920]  Ну да, тут же надо еще правильно вообразить себе распил.
[03:47:33.640 --> 03:47:34.920]  В коммерном пространстве?
[03:47:35.640 --> 03:47:38.920]  Ну да, главное распил, то есть мы делаем распил не по Х, а по всему, кроме Х.
[03:47:38.920 --> 03:47:42.200]  То есть у нас такая гиперплоскость, которая как бы разделяет Х и все остальное.
[03:47:42.920 --> 03:47:45.200]  Ну я вот в трехмерном пространстве вот сейчас себе воображаю плоскость.
[03:47:46.920 --> 03:47:48.200]  У меня уже плоскость стала.
[03:47:48.920 --> 03:47:50.200]  То есть как бы, да, если произошел...
[03:47:50.920 --> 03:47:58.200]  Если распила не было, а он резко стал, то получается, что у нас там 2t от n пополам плюс о от единицы,
[03:47:58.920 --> 03:48:01.200]  но на этот раз индекс стал уже резко k-минус 1.
[03:48:03.920 --> 03:48:05.200]  Так, что еще могло произойти?
[03:48:05.200 --> 03:48:06.480]  Что еще могло произойти?
[03:48:08.200 --> 03:48:12.480]  Ну еще могло произойти, что как бы у нас по этому направлению уже прижатость.
[03:48:16.200 --> 03:48:16.480]  Ну вот, и...
[03:48:17.200 --> 03:48:21.480]  Кажется, что оценка лучше, чем первая мы уже не получим, и хуже, чем вторая тоже не получим.
[03:48:22.200 --> 03:48:23.480]  Давайте с этим жить просто.
[03:48:24.200 --> 03:48:24.480]  Ну да.
[03:48:25.200 --> 03:48:26.480]  Нет, можно даже, знаете как, можно сказать даже не...
[03:48:27.200 --> 03:48:28.480]  Нет, а может все-таки это...
[03:48:29.200 --> 03:48:31.480]  Кажется, следующий случай будет симпатически где-то между этими двумя.
[03:48:32.200 --> 03:48:33.480]  Ну, может быть.
[03:48:33.480 --> 03:48:35.760]  О, или может быть, знаете еще как надо сделать?
[03:48:36.480 --> 03:48:36.760]  А давайте...
[03:48:37.480 --> 03:48:38.760]  Нет, а может считать, давайте так.
[03:48:39.480 --> 03:48:41.760]  У нас всего из 2k направлений, ну типа там...
[03:48:42.480 --> 03:48:43.760]  Ну типа вверх-вниз отличаем, да?
[03:48:44.480 --> 03:48:46.760]  И говорим, что k из них не прижато.
[03:48:47.480 --> 03:48:51.760]  То есть говорим, всего направлений у нас 2d направлений.
[03:48:52.480 --> 03:48:53.760]  Вот.
[03:48:55.480 --> 03:48:55.760]  Вот.
[03:48:56.480 --> 03:49:00.760]  Тогда как бы, да, получается, что действительно если конкретный распил произошел,
[03:49:00.760 --> 03:49:04.040]  то значит, наверное, какая-то прижатость определенно наблюдается.
[03:49:04.760 --> 03:49:08.040]  А если, то есть, как бы, а если тут по этому направлению прижатость была,
[03:49:08.760 --> 03:49:12.040]  то тогда получается, может остаться прижатость та же, да?
[03:49:12.760 --> 03:49:15.040]  То есть t с индексом k, а t пополам.
[03:49:16.760 --> 03:49:19.040]  Но вторая, но в этом случае тогда...
[03:49:20.760 --> 03:49:23.040]  Вторая прижатость все-таки откровенно остается...
[03:49:25.760 --> 03:49:27.040]  Ну да.
[03:49:28.760 --> 03:49:30.040]  Так, а t пополам.
[03:49:30.760 --> 03:49:32.040]  Ну и плюс 1.
[03:49:32.760 --> 03:49:34.040]  Плюс от единиц.
[03:49:34.760 --> 03:49:36.040]  Но это все равно, кажется, лучше.
[03:49:36.760 --> 03:49:38.040]  Так, а если... ну вот.
[03:49:38.760 --> 03:49:40.040]  Нет, ну на самом деле или еще...
[03:49:40.760 --> 03:49:45.040]  Нет, ну там всякое могло быть, на самом деле еще могло так случиться, что...
[03:49:45.760 --> 03:49:47.040]  Нет, знаете еще какая проблема могла быть?
[03:49:47.760 --> 03:49:50.040]  Нет, подлянка еще заключается в том, что могло быть так,
[03:49:50.760 --> 03:49:52.040]  что по этому направлению уже есть две прижатости.
[03:49:52.760 --> 03:49:55.040]  То есть вот этот случай, когда у нас как бы одна прижатость.
[03:49:56.760 --> 03:49:58.040]  По этому направлению.
[03:49:58.760 --> 03:50:00.040]  А если у нас как бы двум сторонам прижато,
[03:50:00.760 --> 03:50:03.040]  то рискует особо ничего не поменяться,
[03:50:03.760 --> 03:50:05.040]  и нам все-таки придется написать вот это вот.
[03:50:07.760 --> 03:50:08.040]  Вот.
[03:50:08.760 --> 03:50:10.040]  Тогда нам нужно как-то аккуратно расписать,
[03:50:10.760 --> 03:50:12.040]  в каких случаях это происходит,
[03:50:12.760 --> 03:50:15.040]  потому что иначе в таком виде мы получаем от t.
[03:50:15.760 --> 03:50:16.040]  Вот прям сейчас.
[03:50:16.760 --> 03:50:17.040]  Нет.
[03:50:18.760 --> 03:50:20.040]  Ну, значит, смотрите.
[03:50:20.760 --> 03:50:23.040]  Нет, ну мистицизм тут обычно заключается в следующем.
[03:50:26.760 --> 03:50:28.040]  А может быть мы разметнулись?
[03:50:28.760 --> 03:50:29.040]  Нет, просто нет.
[03:50:29.040 --> 03:50:30.320]  Фишка...
[03:50:31.040 --> 03:50:31.320]  Размерность.
[03:50:32.040 --> 03:50:32.320]  В смысле?
[03:50:33.040 --> 03:50:33.320]  Размерность.
[03:50:34.040 --> 03:50:35.320]  У нас прижато по всей стороне,
[03:50:36.040 --> 03:50:37.320]  значит можно эту размерность не учитывать.
[03:50:41.040 --> 03:50:42.320]  Ну как, разве не учитывать не получится,
[03:50:43.040 --> 03:50:44.320]  потому что надо на двойку дом нажать.
[03:50:45.040 --> 03:50:45.320]  Нет, смотрите.
[03:50:46.040 --> 03:50:48.320]  Мы возьмем, мы введем параметр k и d,
[03:50:49.040 --> 03:50:50.320]  и типа напишем там шаг.
[03:50:51.040 --> 03:50:53.320]  Нет, там, знаете, фишка будет такая.
[03:50:54.040 --> 03:50:55.320]  На самом деле как угадываете симпточку?
[03:50:56.040 --> 03:50:57.320]  Ну а симпточку можно угадывать так.
[03:50:58.320 --> 03:50:59.600]  То есть теперь вспомним,
[03:51:00.320 --> 03:51:03.600]  что так прям до бесконечности вот эта вот рекуррента распиливаться не может.
[03:51:06.320 --> 03:51:07.600]  Потому что на самом деле,
[03:51:08.320 --> 03:51:08.600]  ну,
[03:51:09.320 --> 03:51:10.600]  то есть там произойдет так,
[03:51:11.320 --> 03:51:14.600]  что вот как бы переход каким-то более мелким случаем, да,
[03:51:16.320 --> 03:51:17.600]  то есть на самом деле у вас не более,
[03:51:18.320 --> 03:51:19.600]  чем задез запросов произойдет,
[03:51:20.320 --> 03:51:21.600]  потому что, помните, вы же пилите все.
[03:51:26.320 --> 03:51:26.600]  Ну как бы, вы же пилите не просто,
[03:51:27.320 --> 03:51:28.600]  вы пилили по одному направлению туда,
[03:51:29.320 --> 03:51:30.600]  но могли бы до бесконечности ходить вот в этот случай
[03:51:31.320 --> 03:51:32.600]  и получать свое отм.
[03:51:33.320 --> 03:51:34.600]  Ну все равно не очень понятно,
[03:51:35.320 --> 03:51:36.600]  почему у нас не может быть.
[03:51:37.320 --> 03:51:38.600]  Вы хотите ввести параметр?
[03:51:39.320 --> 03:51:40.600]  Ну не каждый, но почти каждый случай там.
[03:51:41.320 --> 03:51:42.600]  У нас почти каждый и есть,
[03:51:43.320 --> 03:51:44.600]  потому что у нас 1 минус 1 dt.
[03:51:45.320 --> 03:51:45.600]  Вот.
[03:51:46.320 --> 03:51:46.600]  Вы хотите ввести параметр,
[03:51:47.320 --> 03:51:48.600]  который говорит, на какой стороне мы сейчас находимся?
[03:51:49.320 --> 03:51:49.600]  Ну да.
[03:51:50.320 --> 03:51:50.600]  Нет, ну я говорю, что,
[03:51:51.320 --> 03:51:53.600]  нет, я говорю, что на каждом шаге у меня как бы получается,
[03:51:54.320 --> 03:51:55.600]  ну, если допустим выкинуть этот случай,
[03:51:55.600 --> 03:51:56.880]  как мы жарируем и вот этим,
[03:51:57.600 --> 03:51:59.880]  да, ну или там можно случай,
[03:52:00.600 --> 03:52:01.880]  то я как бы, каждый случай,
[03:52:02.600 --> 03:52:03.880]  у меня как бы как бы распадается на 2,
[03:52:04.600 --> 03:52:07.880]  да, и на следующей глубине каждой 2 распадается точно на 2,
[03:52:08.600 --> 03:52:09.880]  то есть если я сделаю глубину D,
[03:52:10.600 --> 03:52:11.880]  у меня это распадется на как бы 2 в степени D слагаемых,
[03:52:12.600 --> 03:52:13.880]  да, но я утверждаю,
[03:52:14.600 --> 03:52:18.880]  что все они свестись в степени Tk, Tn не могут.
[03:52:23.600 --> 03:52:24.880]  Почему?
[03:52:25.600 --> 03:52:26.880]  Потому что это означает,
[03:52:27.600 --> 03:52:28.880]  что как бы мы, ну вот,
[03:52:29.600 --> 03:52:29.880]  потому что это означает,
[03:52:30.600 --> 03:52:31.880]  на самом деле, что во всех запросах у нас получится
[03:52:32.600 --> 03:52:33.880]  по всем сторонам прижатости,
[03:52:34.600 --> 03:52:34.880]  потому что это может быть только,
[03:52:35.600 --> 03:52:36.880]  когда в той стороне,
[03:52:37.600 --> 03:52:37.880]  которой мы сейчас распиливаем,
[03:52:38.600 --> 03:52:40.880]  у нас будет обязательно там обе прижатости события.
[03:52:41.600 --> 03:52:42.880]  То есть мы сейчас получим что-то по типу 1 минус 1 делить
[03:52:43.600 --> 03:52:44.880]  на 2 в степени D?
[03:52:46.600 --> 03:52:46.880]  Или...
[03:52:47.600 --> 03:52:47.880]  Ну сейчас давайте думать.
[03:52:48.600 --> 03:52:49.880]  Потому что мы из 2D случаев выкинули.
[03:52:50.600 --> 03:52:50.880]  Ну вот, нет, просто самое плохое,
[03:52:51.600 --> 03:52:52.880]  что можно получить в этом плане,
[03:52:53.600 --> 03:52:54.880]  это, ну вот, ну тогда получается,
[03:52:55.600 --> 03:52:57.880]  давайте так, получается Tk, Tn.
[03:52:58.600 --> 03:52:59.880]  Должно быть,
[03:53:00.600 --> 03:53:01.880]  должно быть получается,
[03:53:02.600 --> 03:53:04.880]  ну там, ну допустим так,
[03:53:05.600 --> 03:53:06.880]  если это расписывать,
[03:53:07.600 --> 03:53:11.880]  то у нас получится Tk, Tn равно Z какой-то там на Tk, Tn.
[03:53:14.600 --> 03:53:15.880]  Ладно, вру, вру, вру,
[03:53:16.600 --> 03:53:19.880]  делить на 2 степени D, конечно, да?
[03:53:20.600 --> 03:53:23.880]  Плюс, ну нечто явно,
[03:53:23.880 --> 03:53:27.160]  явно, плюс нечто, что там получается?
[03:53:27.880 --> 03:53:30.160]  Ой, K не там написал.
[03:53:30.880 --> 03:53:32.160]  Вот, нет.
[03:53:32.880 --> 03:53:35.160]  Дальше получается ровно 2 в степени D минус Z,
[03:53:35.880 --> 03:53:37.160]  ну нечто не больше, там 2 в степени Z,
[03:53:37.880 --> 03:53:39.160]  на T с индексом там k минус 1.
[03:53:39.880 --> 03:53:41.160]  Ну может давайте как-нибудь поверим,
[03:53:41.880 --> 03:53:44.160]  что там, наверное, T с индексом каким-нибудь
[03:53:44.880 --> 03:53:47.160]  явно мажорирует T с меньшим.
[03:53:50.880 --> 03:53:53.160]  Потому что я считаю, что T с индексом k минус 1
[03:53:53.880 --> 03:53:56.160]  мажорирует T с индексом k минус 2, k минус 3 и так далее.
[03:53:56.880 --> 03:53:58.160]  Да, там естественно могут быть там...
[03:53:58.880 --> 03:54:00.160]  То есть мы просто сверху пытаемся оценить.
[03:54:00.880 --> 03:54:02.160]  Да, конечно, ну вообще мы думаем,
[03:54:02.880 --> 03:54:04.160]  что мы тут можем выжить.
[03:54:04.880 --> 03:54:06.160]  Ну вот, ну я просто вот утверждаю,
[03:54:06.880 --> 03:54:08.160]  что вот может быть вот такое.
[03:54:08.880 --> 03:54:12.160]  Ну вот, ну тогда теперь, значит,
[03:54:12.880 --> 03:54:14.160]  начинаем думать, да, спрашивать,
[03:54:14.880 --> 03:54:16.160]  а к чему может быть равно вот это вот там,
[03:54:16.880 --> 03:54:20.160]  соответственно, T, особенно в предположении,
[03:54:20.880 --> 03:54:22.160]  что это...
[03:54:23.160 --> 03:54:26.440]  Ну вот, ну как бы в идеале как бы распишется вот так,
[03:54:27.160 --> 03:54:28.440]  но теперь вот возникает вопрос,
[03:54:29.160 --> 03:54:30.440]  а что такое Z?
[03:54:31.160 --> 03:54:33.440]  Ну вот, но на самом деле можно заметить,
[03:54:34.160 --> 03:54:35.440]  я утверждаю, что на самом деле утверждается,
[03:54:36.160 --> 03:54:39.440]  что 2 в степени D слагаемых за D шагов не выживет.
[03:54:41.160 --> 03:54:43.440]  Что-то явно отсечется и уйдет вот единица.
[03:54:49.160 --> 03:54:51.440]  Ну это нас не сильно спасет.
[03:54:52.160 --> 03:54:53.440]  Нет, ну вот.
[03:54:54.160 --> 03:54:56.440]  Так, ну хотя, нет, хотя, нет, не факт.
[03:54:58.160 --> 03:54:59.440]  Нам же надо...
[03:55:00.160 --> 03:55:02.440]  Так, нет, почти, ну сейчас,
[03:55:03.160 --> 03:55:05.440]  а, ну да, это будет не 1-1 делить на D,
[03:55:06.160 --> 03:55:07.440]  а 1-1 делить на 2D, что ли вы хотите сказать.
[03:55:08.160 --> 03:55:09.440]  В степене D у нас, да, получается,
[03:55:10.160 --> 03:55:11.440]  в двумерном случае оценка 3 четверти.
[03:55:13.160 --> 03:55:14.440]  Нет, ну...
[03:55:15.160 --> 03:55:16.440]  Нет, ну как сказать, сейчас посмотрим.
[03:55:17.160 --> 03:55:19.440]  Мы хотим в двумерном случае корень, а не...
[03:55:20.160 --> 03:55:21.440]  Нет, погоди, ну давай посмотрим,
[03:55:22.160 --> 03:55:23.440]  если D от N равно, допустим,
[03:55:24.160 --> 03:55:26.440]  окажется там 2 в степени D минус 1,
[03:55:27.160 --> 03:55:29.440]  на T, соответственно...
[03:55:34.160 --> 03:55:36.440]  От N делить на 2 в степени D.
[03:55:37.160 --> 03:55:38.440]  Ну да, ага.
[03:55:40.160 --> 03:55:41.440]  Ну и плюс 1.
[03:55:42.160 --> 03:55:43.440]  Да, вот допустим, у нас получилось такое.
[03:55:44.160 --> 03:55:45.440]  Да, вот могло такое получиться, допустим.
[03:55:47.160 --> 03:55:49.440]  Так, спрашивается, к чему это нас приведет.
[03:55:50.440 --> 03:55:52.720]  Так, это нас приведет, что...
[03:55:54.440 --> 03:55:55.720]  Нет, почему?
[03:55:56.440 --> 03:55:58.720]  Нет, погоди, это придет N в степени,
[03:55:59.440 --> 03:56:00.720]  логарифум по основанию...
[03:56:01.440 --> 03:56:03.720]  А, кстати, я тут наврал, тут не 2 четверти.
[03:56:04.440 --> 03:56:07.720]  Тут лог по основанию 4-2 вообще-то.
[03:56:08.440 --> 03:56:10.720]  Да, по случайному совпадению тоже 1-2.
[03:56:13.440 --> 03:56:16.720]  Так что здесь получается лог по основанию 2 в степени D,
[03:56:17.440 --> 03:56:18.720]  числа 2 в степени D минус 1.
[03:56:20.440 --> 03:56:21.720]  Это называется ИЧО.
[03:56:23.440 --> 03:56:25.720]  Давайте положим сюда D равно 2
[03:56:26.440 --> 03:56:27.720]  и увидим, что это не то, что мы доказали ранее.
[03:56:28.440 --> 03:56:29.720]  Дааа...
[03:56:31.440 --> 03:56:33.720]  Поэтому такая оценка нам не годится.
[03:56:34.440 --> 03:56:35.720]  Да...
[03:56:36.440 --> 03:56:37.720]  Чья слипа нам не нужна.
[03:56:38.440 --> 03:56:39.720]  Ну окей, ладно.
[03:56:40.440 --> 03:56:41.720]  Не получилось, жалко.
[03:56:42.440 --> 03:56:43.720]  По крайней мере, она как минимум не точна.
[03:56:44.440 --> 03:56:45.720]  Но она как минимум меньше N.
[03:56:45.720 --> 03:56:48.000]  Она меньше N, но она не точна.
[03:56:48.720 --> 03:56:50.000]  Наверное, но я не знаю, да.
[03:56:50.720 --> 03:56:52.000]  Скажем так, сформулирую так.
[03:56:52.720 --> 03:56:54.000]  Здесь я, конечно, просто ссылаюсь на книжку.
[03:56:54.720 --> 03:56:56.000]  Да, кстати, литература про эту.
[03:56:56.720 --> 03:56:58.000]  По крайней мере, первая про исходный метод,
[03:56:58.720 --> 03:57:00.000]  но он, по крайней мере, надежный.
[03:57:00.720 --> 03:57:02.000]  Или нет?
[03:57:02.720 --> 03:57:04.000]  Исходный, надежный.
[03:57:04.720 --> 03:57:05.000]  Ну вот.
[03:57:05.720 --> 03:57:07.000]  Но здесь, кстати, книжка вообще, в принципе,
[03:57:07.720 --> 03:57:09.000]  могу порекомендовать.
[03:57:09.720 --> 03:57:11.000]  На экзамене же не будет KД дерева?
[03:57:11.720 --> 03:57:12.000]  Как же, будет.
[03:57:12.720 --> 03:57:13.000]  2D дерева.
[03:57:13.720 --> 03:57:15.000]  Ну 2D, но KД дерева, конечно, нет.
[03:57:15.720 --> 03:57:17.000]  Но мы его, конечно, на следующем занятии
[03:57:17.720 --> 03:57:18.000]  не докажем случайно.
[03:57:18.720 --> 03:57:19.000]  Вот.
[03:57:19.720 --> 03:57:21.000]  А сразу так БПС захотелось?
[03:57:21.720 --> 03:57:22.000]  Угу.
[03:57:22.720 --> 03:57:23.000]  Мне тоже, да.
[03:57:23.720 --> 03:57:24.000]  БПС.
[03:57:24.720 --> 03:57:25.000]  Чего?
[03:57:25.720 --> 03:57:26.000]  Чего?
[03:57:26.720 --> 03:57:28.000]  Игры еще есть?
[03:57:28.720 --> 03:57:29.000]  Нет, смотрите.
[03:57:29.720 --> 03:57:31.000]  Нет, понимаете, дело в том, что ретроанализ,
[03:57:31.720 --> 03:57:33.000]  это же он базируется на БФС.
[03:57:33.720 --> 03:57:35.000]  Поэтому, наверное, логично пройти,
[03:57:35.720 --> 03:57:36.000]  обсудить БФС.
[03:57:36.720 --> 03:57:37.000]  Вот там просто обсуждаем БФС.
[03:57:37.720 --> 03:57:39.000]  Там тоже, возможно, в следующий раз даже
[03:57:39.720 --> 03:57:40.000]  не успеем теорию игр начать.
[03:57:41.720 --> 03:57:44.000]  Ну, вы знаете, там в БФС есть что обсуждать.
[03:57:44.720 --> 03:57:45.000]  Вы знаете?
[03:57:45.720 --> 03:57:47.000]  0.1 БФС, 0.2 БФС.
[03:57:47.720 --> 03:57:48.000]  Не, не в том порядке.
[03:57:48.720 --> 03:57:49.000]  Не-не-не.
[03:57:49.720 --> 03:57:50.000]  Не-не-не, погоди.
[03:57:50.720 --> 03:57:51.000]  Не, ты не угадал.
[03:57:51.720 --> 03:57:52.000]  Нет.
[03:57:52.720 --> 03:57:53.000]  Там порядок другой.
[03:57:53.720 --> 03:57:54.000]  Там будет так.
[03:57:54.720 --> 03:57:57.000]  БФС, значит, 1К БФС там с ответвлением
[03:57:57.720 --> 03:57:59.000]  в 0.1 БФС и 0К БФС.
[03:57:59.720 --> 03:58:02.000]  Потом, соответственно, БФС, там 1К БФС
[03:58:02.720 --> 03:58:05.000]  с дробными ребрами, значит, увеличение
[03:58:05.720 --> 03:58:07.000]  кадра бесконечности, и так мы выходим
[03:58:07.720 --> 03:58:08.000]  на алгоритм ДЭКСТР.
[03:58:08.720 --> 03:58:10.000]  То есть ДЭКСТР это такой БФС,
[03:58:10.720 --> 03:58:12.000]  на просто бесконечном числе очередей,
[03:58:12.720 --> 03:58:15.000]  в котором мы не храним явно очереди.
[03:58:15.720 --> 03:58:18.000]  Вот.
[03:58:18.720 --> 03:58:20.000]  Нет, другой вывод скорее.
[03:58:20.720 --> 03:58:21.000]  Чего?
[03:58:21.720 --> 03:58:22.000]  Тихо, тихо, тихо.
[03:58:22.720 --> 03:58:23.000]  Чего?
[03:58:23.720 --> 03:58:25.000]  В этой книге там прям вот такое доказательство.
[03:58:25.720 --> 03:58:29.000]  Ну, насколько я помню, да, ну, я же это откуда?
[03:58:29.720 --> 03:58:31.000]  Ну, скажем так, я это вроде оттуда брал,
[03:58:31.720 --> 03:58:33.000]  потому что откуда я еще это мог взять,
[03:58:33.720 --> 03:58:34.000]  я не помню.
[03:58:41.720 --> 03:58:42.000]  Вот.
[03:58:42.720 --> 03:58:43.000]  Так что вот.
[03:58:44.720 --> 03:58:45.000]  Нет, ну в принципе,
[03:58:45.720 --> 03:58:47.000]  тут вообще могу посоветовать книжку,
[03:58:47.720 --> 03:58:49.000]  если это считается одним из просто классических
[03:58:49.720 --> 03:58:51.000]  таких учебников, он, конечно, относительно старый,
[03:58:51.720 --> 03:58:52.000]  там 80-е годы какие-то.
[03:58:52.720 --> 03:58:53.000]  Вот.
[03:58:53.720 --> 03:58:55.000]  Но какая-то вообще, какая-то база по геометрии
[03:58:55.720 --> 03:58:56.000]  там есть.
[03:58:56.720 --> 03:58:58.000]  В общем, но правда интересно, что половину
[03:58:58.720 --> 03:59:00.000]  структуры там слабо будут применимы именно
[03:59:00.720 --> 03:59:02.000]  в олимпиадах в силу там непонятной какой
[03:59:02.720 --> 03:59:03.000]  асимптотики у алгоритмов.
[03:59:03.720 --> 03:59:04.000]  Ну вот.
[03:59:04.720 --> 03:59:06.000]  Но на реальной практике геометрической,
[03:59:06.720 --> 03:59:08.000]  собственно, они там будут активно использоваться.
[03:59:08.720 --> 03:59:10.000]  Так что кто там занимается чем-то
[03:59:10.720 --> 03:59:12.000]  связанным с геометрией, там, я не знаю,
[03:59:12.720 --> 03:59:14.000]  может там, может там какой-нибудь
[03:59:14.000 --> 03:59:15.280]  рисованием каких-то картинок там,
[03:59:16.000 --> 03:59:17.280]  визуализация там трехмерных пространств
[03:59:18.000 --> 03:59:19.280]  и так далее, это вам может очень сильно помочь.
[03:59:22.000 --> 03:59:23.280]  Ну, по геометрии, а, ну я вообще,
[03:59:24.000 --> 03:59:25.280]  если уж по геометрии, я всегда, конечно,
[03:59:26.000 --> 03:59:27.280]  рекламирую там еще, ну там,
[03:59:28.000 --> 03:59:29.280]  пока нас геометрии не будет, то к следующему
[03:59:30.000 --> 03:59:31.280]  семестру вы уже можете хорошо подготовиться,
[03:59:32.000 --> 03:59:33.280]  потому что, на самом деле, в интернете,
[03:59:34.000 --> 03:59:35.280]  ну, во-первых, есть такая вещь, как
[03:59:36.000 --> 03:59:37.280]  компьютер science club, кстати,
[03:59:38.000 --> 03:59:39.280]  ну ее можно просто абстрактно
[03:59:39.280 --> 03:59:40.560]  абстрактно.
[03:59:43.280 --> 03:59:44.560]  Или там сокращенно, компский клаб,
[03:59:45.280 --> 03:59:46.560]  в общем, погуглите там, в общем,
[03:59:47.280 --> 03:59:48.560]  что-то найдете. То есть, на самом
[03:59:49.280 --> 03:59:50.560]  деле, просто в Питере есть вот такой
[03:59:51.280 --> 03:59:52.560]  компьютер science club, в котором, ну,
[03:59:53.280 --> 03:59:54.560]  можно сказать что-то, сейчас, сейчас,
[03:59:55.280 --> 03:59:56.560]  что-то типа шада. Ну, это что-то типа
[03:59:57.280 --> 03:59:58.560]  шада, ну вот, и там, собственно,
[03:59:59.280 --> 04:00:00.560]  проводится огромное количество лекций,
[04:00:01.280 --> 04:00:02.560]  в том числе, кстати, и там знакомые
[04:00:03.280 --> 04:00:04.560]  преподаватели тоже найдете, ну и в том числе
[04:00:05.280 --> 04:00:06.560]  не знакомые. Ну вот, но там есть какие-то
[04:00:07.280 --> 04:00:08.560]  видео лекции каких-то старых курсов,
[04:00:09.280 --> 04:00:10.560]  и вот тут, с точки зрения геометрии,
[04:00:11.280 --> 04:00:12.560]  крайне рекомендую познакомиться с
[04:00:13.280 --> 04:00:14.560]  таким замечательным человеком, как
[04:00:15.280 --> 04:00:16.560]  Кира Вяткина.
[04:00:20.280 --> 04:00:22.560]  Вот. То есть, это вот абсолютно, это
[04:00:23.280 --> 04:00:24.560]  абсолютно реальные ученые в области
[04:00:25.280 --> 04:00:26.560]  вычислительной геометрии.
[04:00:27.280 --> 04:00:28.560]  Вот, и, собственно, поэтому вот лекции
[04:00:29.280 --> 04:00:30.560]  от нее, это будут просто лекции просто
[04:00:31.280 --> 04:00:32.560]  от специалистов просто из этой области.
[04:00:33.280 --> 04:00:34.560]  Ну, вот так, что там, то есть, я думаю,
[04:00:35.280 --> 04:00:36.560]  некоторые лекции, возможно, скорее
[04:00:37.280 --> 04:00:38.560]  все она прочитает даже лучше, чем я.
[04:00:39.280 --> 04:00:40.560]  Выше озвученной причины.
[04:00:41.280 --> 04:00:42.560]  Так что, вот там, собственно, Кира Вяткина
[04:00:43.280 --> 04:00:44.560]  там курсы у нее так называют, там
[04:00:45.280 --> 04:00:46.560]  вычислительная геометрия или там еще
[04:00:47.280 --> 04:00:48.560]  какие-нибудь там курсы типа диаграмма
[04:00:49.280 --> 04:00:50.560]  Воронова там и так далее. Вот.
[04:00:51.280 --> 04:00:52.560]  Так что, вот, могу просто вот заранее
[04:00:53.280 --> 04:00:54.560]  вот очень порекомендовать, на самом деле
[04:00:55.280 --> 04:00:56.560]  вот будет очень интересно. Вот.
[04:00:57.280 --> 04:00:58.560]  Так, ну, на этом мы, собственно, и закончим.
