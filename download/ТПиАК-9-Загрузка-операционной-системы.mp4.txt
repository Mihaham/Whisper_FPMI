[00:00.000 --> 00:09.000]  Добрый день, как я собрал вас, чтобы сообщить вам про неприятие известия.
[00:09.000 --> 00:18.000]  Помимо пришедшего сюда ревизора, похоже, наш проектор, что и аудитории объявил нам санкции.
[00:18.000 --> 00:21.000]  И более не работает 239 аудитории.
[00:21.000 --> 00:27.000]  Похоже, что в санкции скоро нам объявят всякие процессорные системы.
[00:28.000 --> 00:30.000]  Придется написать их самостоятельно.
[00:34.000 --> 00:37.000]  Ну и как же это мы сделаем?
[00:37.000 --> 00:40.000]  Есть такие вот замечательные примеры.
[00:43.000 --> 00:45.000]  На I7A2 рождили язык ассамбля.
[00:46.000 --> 00:49.000]  Который мы сейчас соберем и попробуем запустить.
[00:50.000 --> 00:55.000]  А в частности, вот такой код.
[00:55.000 --> 00:57.000]  Hello world from diskette.
[01:00.000 --> 01:02.000]  Берем этот код.
[01:02.000 --> 01:18.000]  И собираем.
[01:18.000 --> 01:21.000]  Собирать будем в простой бинарный формат.
[01:32.000 --> 01:50.000]  Нас выдал размером 512 байк.
[01:50.000 --> 01:52.000]  Очень такой характерный размер.
[01:52.000 --> 01:59.000]  Совпадающий, как и странно, с размером сектора на большинстве устройств, в которых можно добиться.
[01:59.000 --> 02:07.000]  На дискетках, жестких дисках, флешках, оптических дисках.
[02:12.000 --> 02:14.000]  И как же он работает?
[02:19.000 --> 02:22.000]  Во-первых, обратите внимание, сколько бит на это код.
[02:24.000 --> 02:26.000]  16 бит.
[02:29.000 --> 02:36.000]  Потому что все наши x86 компьютеры в момент старта работают в 16 битом реальном режиме.
[02:42.000 --> 02:47.000]  И только выгрузившаяся операционка переключает их вообще остальные.
[02:53.000 --> 02:56.000]  Базовая система ввода-вывода, она же BIOS, закинет.
[02:57.000 --> 03:01.000]  Вот это самое первое сектор, считанное загрузочным устройством.
[03:03.000 --> 03:12.000]  Если он, конечно, имеет сигнатуру.
[03:14.000 --> 03:18.000]  Вот эти два байта, а5.5 указывает на то, что сектор у нас загрузчий.
[03:18.000 --> 03:22.000]  Расположит по адресу 7C00.
[03:28.000 --> 03:33.000]  Видим, что для этого достаточно 16 бит на адреса.
[03:35.000 --> 03:37.000]  И передал с управлением.
[03:39.000 --> 03:42.000]  Все, а дальше эта операционка загружается сама.
[03:43.000 --> 03:46.000]  Все, а дальше эта операционка загружается сама.
[03:49.000 --> 03:51.000]  Без всяких габилетик.
[03:53.000 --> 03:55.000]  Все самостоятельно.
[03:58.000 --> 04:00.000]  Вот мы оказались здесь.
[04:01.000 --> 04:03.000]  И запрещаем все прерывания.
[04:03.000 --> 04:07.000]  После этого обнуляем AX.
[04:08.000 --> 04:13.000]  Заносим в регистр дат сегмента, стэк сегмент, этот самый 0.
[04:14.000 --> 04:18.000]  Стэк-поинтер у нас будет расти, начиная с от нашей метки старта.
[04:21.000 --> 04:24.000]  А пересекутся при этом стэк и код.
[04:27.000 --> 04:30.000]  Стэк растет у нас вниз, в сторону уменьшения адресов.
[04:30.000 --> 04:35.000]  Код растет в сторону увеличения адресов.
[04:39.000 --> 04:42.000]  Так что они не пересекутся, как раз не подерутся.
[04:43.000 --> 04:45.000]  После этого мы прерывания разрешаем.
[04:46.000 --> 04:53.000]  А вдруг кто-то в этот момент прервет нашу работу и что-то не будет на порту.
[04:55.000 --> 04:57.000]  Это для нас очень критичное зеркало.
[05:01.000 --> 05:05.000]  После этого мы хотим позвать функцию.
[05:06.000 --> 05:09.000]  У нас свои операционные системы соответственно свое соглашение вызовет.
[05:11.000 --> 05:20.000]  В качестве соглашения вызовет договоримся, что мы как в современных системах передаем все через регистры.
[05:21.000 --> 05:23.000]  В частности через регистры SE.
[05:24.000 --> 05:26.000]  Передаем аргументы через SE.
[05:27.000 --> 05:30.000]  И вызываем нашу функцию капусту.
[05:33.000 --> 05:42.000]  Целые функции с помощью команды loadSB мы делаем сразу кучу вещей.
[05:43.000 --> 05:51.000]  Загружаем по адресу SE 1 байт в регистр AL и увеличиваем это самое SE наедине.
[05:52.000 --> 05:54.000]  И загружаем и увеличиваем.
[05:55.000 --> 05:56.000]  Да, это циск.
[06:03.000 --> 06:04.000]  Проверяем.
[06:05.000 --> 06:07.000]  Делаем побитого умножения AL на AL.
[06:08.000 --> 06:09.000]  Результат выбрасываем.
[06:10.000 --> 06:11.000]  Но у нас что-то остается.
[06:12.000 --> 06:13.000]  В чем остаются следы вычислений?
[06:14.000 --> 06:15.000]  Да.
[06:16.000 --> 06:19.000]  И мы смотрим не поднялся ли у нас лок-нуля.
[06:22.000 --> 06:23.000]  Нет, не поднялся.
[06:24.000 --> 06:26.000]  Тогда продолжаем работу.
[06:27.000 --> 06:29.000]  А если поднялся, куда-то прыгнет.
[06:30.000 --> 06:34.000]  А что означает у нас, что в некой строчке у нас встретился нулевой байт?
[06:40.000 --> 06:41.000]  Строчка закончилась.
[06:45.000 --> 06:48.000]  Все как в обычных SE строчках.
[06:49.000 --> 06:54.000]  После этого мы все-таки решили с биосом нашим пообщаться.
[06:57.000 --> 06:59.000]  Пока еще мы имеем такую возможность.
[07:01.000 --> 07:06.000]  Через прерывание, а аргументы на него передадим через регистр.
[07:07.000 --> 07:12.000]  В AH заносим, что мы от него хотим, вывести символ.
[07:13.000 --> 07:15.000]  В AL сам символ.
[07:15.000 --> 07:16.000]  Нет, сам символ.
[07:17.000 --> 07:19.000]  И прыгаем обратно на начало SE.
[07:20.000 --> 07:23.000]  Если же мы упрыгали на вот эту метку, выходим из функции.
[07:29.000 --> 07:34.000]  Ну а после этого мы запрещаем все прерывания.
[07:35.000 --> 07:37.000]  Никто нашу программу не прервет.
[07:38.000 --> 07:42.000]  Мы имеем на это право, потому что мы находимся в реальном режиме процессора.
[07:43.000 --> 07:46.000]  Никто нас не ограничивает пока еще.
[07:47.000 --> 07:48.000]  Остановим процессор.
[07:49.000 --> 07:51.000]  Если этого не хватило, делаем бесконечную цепь.
[07:52.000 --> 07:54.000]  Прыгаем на то место, где сейчас находимся.
[07:57.000 --> 07:58.000]  Вот наша данная.
[08:03.000 --> 08:04.000]  Строчка.
[08:05.000 --> 08:07.000]  Два байта ее завершающий перевод строки.
[08:08.000 --> 08:17.000]  Потому что BIOS как и многие антикварные системы используют два байта для завершения строки.
[08:18.000 --> 08:23.000]  Нулевой байт для окончания строки вообще в конце сигнатура.
[08:24.000 --> 08:29.000]  А дальше нам нужно заполнить все это нулями до размера 512 байтов.
[08:30.000 --> 08:33.000]  Чтобы сигнатура оказалась в нужном месте в конце этого секр.
[08:34.000 --> 08:38.000]  То есть, 510 минус текущее положение минус начало.
[08:39.000 --> 08:42.000]  Почему 510 и не 512? Потому что вот еще два байта.
[08:43.000 --> 08:44.000]  Просто 0.
[08:46.000 --> 08:51.000]  А для того, чтобы все это запустить, мы воспользуемся,
[08:52.000 --> 08:59.000]  поскольку он у нас нужен для того, чтобы все это писать и показывать, виртуальный машин.
[08:59.000 --> 09:00.000]  Виртуальный машин.
[09:03.000 --> 09:04.000]  Вот она.
[09:06.000 --> 09:07.000]  Oracle VirtualBox.
[09:11.000 --> 09:13.000]  Создаем новую виртуальную машину.
[09:22.000 --> 09:23.000]  Да, там будет что-то другое.
[09:24.000 --> 09:25.000]  Наша.
[09:29.000 --> 09:34.000]  Четырех мегабайтов хватит всем. Жестких дисков нам не нужно.
[09:41.000 --> 09:47.000]  Зато мы добавляем floppy-контроллер.
[09:49.000 --> 09:53.000]  Почему нужно дискет? Потому что у них наиболее простая конструкция.
[09:53.000 --> 09:56.000]  Там нет разметки на разделы.
[09:57.000 --> 10:00.000]  И это существенно упрощает нашу работу.
[10:01.000 --> 10:03.000]  По созданию такого загрузочного порта.
[10:04.000 --> 10:06.000]  IDE-контроллер нам не нужен.
[10:07.000 --> 10:12.000]  И к этому floppy-контроллеру мы добавляем образ нашей виртуальной дискетки,
[10:14.000 --> 10:16.000]  который собрал нам нас.
[10:23.000 --> 10:24.000]  И запускаем.
[10:40.000 --> 10:41.000]  Разворачиваем побольше.
[10:43.000 --> 10:47.000]  Вот наша операционная система сумела загрузиться.
[10:48.000 --> 10:49.000]  Сигнат того есть.
[10:49.000 --> 10:51.000]  И дальше операционка.
[10:54.000 --> 10:55.000]  И даже выбрал нам текст.
[11:01.000 --> 11:03.000]  Можно операционкой выходить что-нибудь еще.
[11:06.000 --> 11:08.000]  Сейчас у нас был один единственный процесс.
[11:09.000 --> 11:11.000]  Работающий в режиме реальном.
[11:12.000 --> 11:16.000]  То есть ему можно все управлять в 16-битном.
[11:16.000 --> 11:21.000]  Хочется чего-то большего, чем 16-бит.
[11:22.000 --> 11:27.000]  А в 16-битах какие адреса мы можем адресовать?
[11:28.000 --> 11:31.000]  Сколько памяти мы можем адресовать в 16-битном режиме?
[11:40.000 --> 11:43.000]  Ну хорошо. Мы можем адресовать каждый отдельный байк.
[11:47.000 --> 11:50.000]  Именно. Два шестнадцатого байта.
[11:52.000 --> 11:53.000]  Как-то не очень много.
[11:55.000 --> 12:01.000]  Ну нам хватило. У нас вообще весь код нашей операционки 512 байтов лет.
[12:04.000 --> 12:06.000]  Нам хочется адресовать побольше.
[12:07.000 --> 12:10.000]  А допустим в 37-битном режиме мы сколько сможем адресовать?
[12:13.000 --> 12:14.000]  Это сколько?
[12:16.000 --> 12:17.000]  Где-то 4 гигабайта.
[12:18.000 --> 12:20.000]  Мега? Вот что вы на таком компе габали.
[12:21.000 --> 12:22.000]  На 4 гигабайтах.
[12:24.000 --> 12:26.000]  Все-таки математическая школа умеет считать.
[12:27.000 --> 12:28.000]  4 гигабайта.
[12:29.000 --> 12:30.000]  Вот это уже явно прииск.
[12:40.000 --> 12:42.000]  А еще мы хотим чтобы у нас были...
[12:46.000 --> 12:47.000]  Еще какие-то...
[12:51.000 --> 12:54.000]  Процессы. И чтобы они друг с другом не передрались.
[13:09.000 --> 13:14.000]  А для этого нам нужно чтобы процесс переключился в защитном режиме.
[13:16.000 --> 13:29.000]  Так. У нас есть всяческая магия.
[13:31.000 --> 13:35.000]  А может быть кто-то из вас читал толкины?
[13:38.000 --> 13:40.000]  Есть такие? Кто толкины читал?
[13:47.000 --> 13:48.000]  Ага. Хорошо.
[13:51.000 --> 14:01.000]  Все приключения Борсеточника по кличке Бильба были из-за того, что он спер некий магический артефакт.
[14:01.000 --> 14:02.000]  Какой?
[14:03.000 --> 14:04.000]  Кольцо.
[14:04.000 --> 14:05.000]  Ага.
[14:05.000 --> 14:06.000]  С некое кольцо.
[14:11.000 --> 14:16.000]  Какие-то кольца предназначались у нас для всяких эльфов.
[14:19.000 --> 14:22.000]  Ну, в частности программа Вэйс Пиддогла из мутного формата.
[14:26.000 --> 14:29.000]  Может быть там вводятся также всякие гномы.
[14:31.000 --> 14:33.000]  Ну, в общем моды и environment.
[14:34.000 --> 14:37.000]  Один из вариантов графического интерфейса.
[14:44.000 --> 14:47.000]  Вот. Нашелся поклонник гномов.
[14:49.000 --> 14:52.000]  Формат finals-dwarf тоже есть.
[14:57.000 --> 14:59.000]  Ну и гном это аббревиатура.
[15:05.000 --> 15:09.000]  Сколько-то их там было? Ну, минимум штучки три.
[15:17.000 --> 15:19.000]  Ну и самое главное.
[15:24.000 --> 15:25.000]  Что там было?
[15:26.000 --> 15:27.000]  Что там было?
[15:30.000 --> 15:35.000]  Две централизации управления всем этим. Из некой башни, типа той, в которой мы сейчас находимся.
[15:40.000 --> 15:43.000]  Одно кольцо, чтобы править ими всеми.
[15:43.000 --> 15:45.000]  Хуже всем этим.
[15:47.000 --> 15:52.000]  Вдохновлялись разработчики Intel и AMD, когда создавали кольца привилей.
[15:55.000 --> 15:56.000]  Так.
[15:58.000 --> 16:07.000]  Было для архитектуры x86 сделано изначально четыре кольца привилей.
[16:07.000 --> 16:12.000]  Изначально четыре кольца привилей.
[16:19.000 --> 16:27.000]  Ну, роздавая всем гномовым людям третье кольцо.
[16:28.000 --> 16:34.000]  Для того, чтобы просто работала какая-то предлагательная программа.
[16:38.000 --> 16:46.000]  В каждом следующем кольце у нас доступны все те регистры и команды, которые в предыдущем, но доступны еще какие-то.
[16:50.000 --> 16:55.000]  Предполагалось, что второе кольцо это чуть-чуть больше прав.
[16:57.000 --> 17:00.000]  Может пригодиться для чего-нибудь типа атлантчика.
[17:00.000 --> 17:10.000]  Первое кольцо еще больше прав для каких-нибудь программ, управляющих физическим устройством, драйверу.
[17:14.000 --> 17:19.000]  Ну и наконец нулевое кольцо, чтобы править ими всеми.
[17:20.000 --> 17:23.000]  Там располагается ядро торцовной системы.
[17:26.000 --> 17:28.000]  На нулевом кольце привилей.
[17:30.000 --> 17:35.000]  Что же получилось в реальности?
[17:39.000 --> 17:44.000]  Реально эксплуатируется третье кольцо для обычных программ и нулевое кольцо.
[17:45.000 --> 17:51.000]  Потому что разработчики операционных систем забили на возможность и полезность того,
[17:51.000 --> 18:00.000]  что какой-нибудь драйвер будет работать так, чтобы не стеснить всю операционку.
[18:03.000 --> 18:13.000]  И обычно получается, что все ядро и все его модули работают на нулевом кольце привилей и можно все.
[18:21.000 --> 18:35.000]  Ну, как и в Толкина, там развелись всякие, помимо этих колец, развелись всякие мудрые энты и прочее.
[18:36.000 --> 18:45.000]  Потому что внезапно выяснилось, что мы хотим запускать операционку, чтобы она ничего не подозревала, что она на компания 1.
[18:46.000 --> 18:50.000]  Ну и появились дополнительные расширения для виртуализации.
[18:51.000 --> 19:00.000]  То есть, вот все этот метод VirtualBox, который мы продемонстрировали, работает за счет того, что у нас есть расширение.
[19:01.000 --> 19:05.000]  Например, какие у нас есть способности у процессора?
[19:11.000 --> 19:13.000]  Что он у нас умеет?
[19:16.000 --> 19:18.000]  Процессор у нас интеловский.
[19:21.000 --> 19:49.000]  А где-то там среди флагов должна быть его возможность и поддержка Intel VTD.
[19:51.000 --> 19:53.000]  И вот это все.
[20:21.000 --> 20:30.000]  В AMD, в MX, в общем, какие-то...
[20:30.000 --> 20:49.000]  На самом деле, все эти средства безопасности, как выяснилось, еще несколько дырявые, и через них кое-что может потенциально проплавиться.
[20:49.000 --> 21:11.000]  Но до сих пор все эти технологии используются, баги падятся, типа не будем создавать условия, в которых что-то может быть записать куда попало.
[21:11.000 --> 21:19.000]  Но чтобы это работало, нужно это хотя бы включить.
[21:23.000 --> 21:25.000]  Так, попробуем это включить.
[21:29.000 --> 21:36.000]  Тут все по-старому. Обнуляем сегментные регистры, стэк у нас растет от начала кода вниз.
[21:41.000 --> 21:45.000]  Дальше мы должны описать глобальную таблицу дискриптеров.
[21:54.000 --> 21:59.000]  У нас тут будет три дискриптера, которые описывают три кусочка памяти.
[22:00.000 --> 22:02.000]  В частности, будет нулевой дискриптер.
[22:03.000 --> 22:12.000]  Если вы пойдете по нулевому адресу, то что с вами будет, судя по опыту написания программы CES++?
[22:17.000 --> 22:21.000]  Вам скажут, что вам туда идти нельзя, и программу срочно предприят.
[22:21.000 --> 22:26.000]  Еще два сегмента.
[22:28.000 --> 22:46.000]  Это сегмент кода и сегмент данных, начинающийся по нулевому адресу, лимитом в 4 ГБ, чем-то не отличаются.
[22:47.000 --> 22:53.000]  Хотя оба предназначены для нулевого кольца привлеки до того самого тронуземол.
[22:56.000 --> 23:00.000]  Но посмотрите внимательно, в чем между ними разница.
[23:00.000 --> 23:18.000]  Если вы не заметили, то у сегмента кода есть вот этот битик, а здесь это битик-брос.
[23:19.000 --> 23:22.000]  Вы подумайте, что это битик означает?
[23:27.000 --> 23:35.000]  Какое право нужно сегменту, в котором есть исполненный плод, но не нужно сегменту, в котором есть просто данный?
[23:36.000 --> 23:40.000]  Да, правильное исполнение. Вот он, битик правильный исполненный.
[23:40.000 --> 23:49.000]  Ну, это один из методов, которым пытаются затыкать всякие были.
[23:50.000 --> 23:58.000]  Давайте мы пометим, что вот эти кусочки памяти мы можем исполнять, и в эти кусочки памяти мы можем писать. Желательно, чтобы они не пересекались.
[24:10.000 --> 24:27.000]  Ну, а значение, которое будет загружено в GlobalDescriptableTail регистр, это ссылка на массив ГДТ с дескрипторами и вот эта константа.
[24:27.000 --> 24:49.000]  Ну, дальше, циск-то циск, регистр специальный, команда для работы с ними специальная, ЛГДТ, Load GlobalDescriptableTail.
[24:49.000 --> 25:01.000]  А дальше начинается магия, связанная с тем, каким антиквариатом на самом деле является X76.
[25:02.000 --> 25:13.000]  Ну, во-первых, вспомните, что до сих пор мы находимся в 16-битном режиме.
[25:13.000 --> 25:22.000]  И сколько же памяти мы можем с помощью этих 16-битных рисовать?
[25:23.000 --> 25:29.000]  Ну, в самом деле все страшнее. Оказывается, мегабайт.
[25:29.000 --> 25:45.000]  В какой-то момент осознали, что 6,4 килобайта не всем хватает, и нужно сделать какую-нибудь систему, которая позволяла бы адресовать больше.
[25:46.000 --> 25:52.000]  И в какой-то момент решили, что на мегабайты-то всем хватит.
[25:53.000 --> 25:57.000]  А для мегабайтов сколько бит нужно?
[25:58.000 --> 26:06.000]  Как нам сделать из двух кусочков по 16,2?
[26:13.000 --> 26:16.000]  Решили складывать?
[26:27.000 --> 26:53.000]  Вот таким образом.
[26:53.000 --> 26:56.000]  Взяли, сложили.
[27:03.000 --> 27:11.000]  Получили 20-битный адрес. Из двух регистров один из которых сдвинут на 4 бита.
[27:16.000 --> 27:19.000]  Ну, как?
[27:23.000 --> 27:27.000]  Доставать целый мегабайт можно. Ну, как известно, 640 килобайт хватит всем?
[27:53.000 --> 28:03.000]  Ну, вот такие костыли сделали.
[28:04.000 --> 28:19.000]  Хуже того, вот у нас от процессора отходили линии адресной шины от А0 до А19, которые были подключены к памяти.
[28:20.000 --> 28:29.000]  А начиная с линии А20, контроллеру клавиатуры.
[28:30.000 --> 28:48.000]  Да, было совершенно логичное решение, а именно, использовать те же линии, которые нужны идти к памяти, на управление клавиатурой.
[28:49.000 --> 28:55.000]  Вот такие быстрые и медленные устройства. Абсолютно логичное решение.
[28:56.000 --> 29:03.000]  Ну, и соображение совместимости, оно до сих пор работает так, вы заставьте.
[29:06.000 --> 29:09.000]  К счастью, ее можно переключить.
[29:09.000 --> 29:21.000]  Чтобы включить 20-ю адресную линию и дальше, мы читаем из регистра A из порта.
[29:22.000 --> 29:32.000]  Вот с таким номером, общаясь с нашим чипсетом материнки, читаем в регистр.
[29:33.000 --> 29:40.000]  С помощью побитого O ставим битик и записываем обратно.
[29:43.000 --> 29:51.000]  Все, у нас включена 20-я линия и мы можем адресовать больше 1 ГБ.
[29:51.000 --> 30:05.000]  И наконец, нам нужно включить защиту, чтобы, работающие на третьем конце привилегии, программы не могли залезть и помыть друг друга.
[30:06.000 --> 30:16.000]  Для этого у нас есть всякие управляющие регистры. В частности, нас интересует нулевой управляющий регистр.
[30:17.000 --> 30:31.000]  Заносим его содержимое в ЯХ, ставим самый младший битик в единичку и записываем обратно.
[30:36.000 --> 30:43.000]  Ну, нельзя так просто взять и поменять битик в регистр.
[30:44.000 --> 30:49.000]  Ну, зато можно не инстаграммировать.
[30:56.000 --> 31:06.000]  Мы не можем напрямую записать селектор нужного сегмента в регистр код и сегмент.
[31:06.000 --> 31:18.000]  Ну, просто нет такого кода, запиши в регистр цельствия.
[31:20.000 --> 31:28.000]  Но вспоминаем, что джампы это на самом деле мовы инструкционпоинта и код и сегмент.
[31:28.000 --> 31:36.000]  То есть, до этого адвеса были такие.
[31:43.000 --> 31:48.000]  То есть, сегментный регистр и инструкционпоинта.
[31:48.000 --> 31:56.000]  Какой сегмент и по какому смещению он находится?
[31:59.000 --> 32:07.000]  ЦС это первый регистр, который со смещением на 4, то есть с умножением на 16.
[32:08.000 --> 32:13.000]  Второй просто прибавлялся. Ну или, допустим, дата сегмент.
[32:13.000 --> 32:21.000]  Сорсинг. Какие данные могли по такому адвесу лежать?
[32:21.000 --> 32:39.000]  То, что лежит на 4, плюс С.
[32:51.000 --> 33:05.000]  То есть, ЦС заносится смещение на 8 от начала глобальной интервью из дискрипторов.
[33:21.000 --> 33:43.000]  А, в инструкционпоинтер заносится адвес у следующей метки.
[33:43.000 --> 34:05.000]  Мы наконец-то в 32-битном защищенном режиме после всех этих страшных преследований.
[34:05.000 --> 34:15.000]  В отличие от ЦС мы в ДС и СС сможем писать в даты сегмента и стэк сегмент.
[34:15.000 --> 34:25.000]  Туда записываем 16, то есть адвес, где у нас описаны сегменты данных.
[34:25.000 --> 34:30.000]  Дальше делаем то же самое, только уже в 16-битном режиме.
[34:30.000 --> 34:40.000]  Заносим туда СИ и вызываю функцию.
[34:40.000 --> 34:48.000]  Там расстановим процессор.
[34:48.000 --> 34:55.000]  Прерывание не обращаем. Все. Никто нас не прервет. Билса больше нет в 16-битном режиме.
[34:55.000 --> 34:59.000]  Никто нам больше не помешает.
[34:59.000 --> 35:04.000]  И, если это не помогает, то цепляемся.
[35:04.000 --> 35:13.000]  Но, есть одна проблема. В прошлый раз мы вывод делали с помощью прерываний, с помощью функции, которая обеспечила нам билс.
[35:13.000 --> 35:20.000]  А теперь билс у нас больше нет.
[35:20.000 --> 35:29.000]  Мы уже, мы теперь ядра операционной системы, мы на все ответственны.
[35:29.000 --> 35:35.000]  И как ли нам что-нибудь взять и вывести?
[35:35.000 --> 35:37.000]  Есть такая возможность.
[35:37.000 --> 35:51.000]  Дело в том, что VGA-шные карточки отображают память видеоадаптера по адресу 8.0.
[35:51.000 --> 35:57.000]  По краю дефолтного видеорежима в момент старта.
[35:57.000 --> 36:02.000]  И мы можем прямой записью видеопамяти что-то замести в память видеокарты.
[36:02.000 --> 36:06.000]  И, соответственно, это может появиться на экране.
[36:06.000 --> 36:14.000]  Ну, если, конечно, к этой видеокарте экран подключен.
[36:14.000 --> 36:23.000]  Мы хоть и в своей операционной системе, самое главное, все равно соблюдаем соглашение VGA.
[36:23.000 --> 36:27.000]  Мы запихиваем все регистры, стэп.
[36:27.000 --> 36:33.000]  Да, вот для этого нам и нужен был в стэп-сегменте конкретный адрес.
[36:43.000 --> 36:49.000]  После окончания функции мы все оттуда выпихиваем и возвращаемся.
[36:50.000 --> 36:55.000]  У нас со своем соглашением две аргументы через ESC.
[36:55.000 --> 36:59.000]  Никакие регистры портить нельзя.
[36:59.000 --> 37:03.000]  Наше собственное соглашение VGA.
[37:03.000 --> 37:08.000]  Аналогично, загружаем по адресу S.
[37:13.000 --> 37:16.000]  То, что лежит по адресу.
[37:19.000 --> 37:27.000]  Если вылечим на единичку.
[37:27.000 --> 37:36.000]  Проверяем, не дошли ли до нуля. Если дошли до нулевого байта, значит все.
[37:36.000 --> 37:38.000]  Зарешаем нашу программу.
[37:38.000 --> 37:48.000]  Если не дошли, то записываем куда-то в видеопамять.
[37:50.000 --> 37:54.000]  Увеличиваем это число.
[37:54.000 --> 37:58.000]  И снова возвращаемся в начало цепи.
[38:19.000 --> 38:37.000]  В свой простой бинальный формат, а не в эльф как раньше, мы компилируем нашу программу в тот же файл.
[38:49.000 --> 39:13.000]  А теперь мы хотим запустить нашу программу.
[39:19.000 --> 39:38.000]  Хочу видеть режим масштабирования.
[39:38.000 --> 39:43.000]  Запускается наша программка, и она вывела нам сообщение.
[40:08.000 --> 40:18.000]  Теперь посмотрим внимательно на код и выводы функций.
[40:18.000 --> 40:31.000]  Во все байты видеопамяти мы что-то пишем.
[40:31.000 --> 40:56.000]  Если не все, то почему?
[40:56.000 --> 41:06.000]  Курсор – это у нас переменная. Даблорд – проинферизированный уровень.
[41:06.000 --> 41:25.000]  Она у нас постепенно увеличивается.
[41:25.000 --> 41:35.000]  А что будет, если туда все-таки что-нибудь записать?
[41:55.000 --> 42:17.000]  Добавляем единичку.
[42:17.000 --> 42:21.000]  А что туда будем писать?
[42:21.000 --> 42:27.000]  ЕЦХ у нас увеличивается, курсор у нас увеличивается.
[42:27.000 --> 42:29.000]  Значит, младшая часть ЕЦХ.
[42:29.000 --> 42:46.000]  Какая у нас младшая часть ЕЦХ, самая маленькая?
[42:46.000 --> 42:51.000]  Ну, также как АЛ, младшая часть АХ и ЕАХ.
[42:51.000 --> 43:10.000]  Попробуем туда занести цель.
[43:10.000 --> 43:38.000]  Так, а если бы...
[43:38.000 --> 43:54.000]  Сделаем масштабирование.
[43:54.000 --> 43:58.000]  Собрали.
[43:58.000 --> 44:04.000]  Запустили.
[44:04.000 --> 44:11.000]  Что у нас получилось?
[44:11.000 --> 44:33.000]  А теперь попробуем объяснить эту картинку.
[44:33.000 --> 44:48.000]  Мы туда записывали число, которое постепенно увеличивается.
[44:48.000 --> 44:54.000]  То есть, вот у нас ноль.
[44:54.000 --> 45:02.000]  Это черная буквы на черном поле. Естественно, она не видна.
[45:02.000 --> 45:10.000]  Нет, это одинаковость цвета фона и цвета шрифта.
[45:10.000 --> 45:17.000]  Затем у нас синяя буква на черном поле.
[45:17.000 --> 45:27.000]  Там, где у нас единичка.
[45:27.000 --> 45:40.000]  Это цвет чего?
[45:40.000 --> 45:47.000]  У нас, похоже, завелся хороший ревьюерсер.
[45:47.000 --> 45:53.000]  Который, всего лишь взглянув на цветную картинку, понял, какой формат представления цвета.
[45:53.000 --> 46:13.000]  Итак, у нас есть 8 бит.
[46:13.000 --> 46:16.000]  И что за что означает?
[46:16.000 --> 46:20.000]  12 бит. Как тут уже предположили.
[46:20.000 --> 46:28.000]  Означает что?
[46:28.000 --> 46:38.000]  Да.
[46:38.000 --> 46:45.000]  Хорошо. Следующий бит.
[46:45.000 --> 47:01.000]  Хорошо. Зеленый.
[47:01.000 --> 47:06.000]  Ну, может быть, это как раз D3.
[47:06.000 --> 47:21.000]  Дальше?
[47:21.000 --> 47:35.000]  Дальше?
[47:35.000 --> 47:45.000]  Дальше?
[47:45.000 --> 47:54.000]  Да. Ну, какой-то он сероватый.
[47:54.000 --> 47:59.000]  Темно-белый.
[47:59.000 --> 48:16.000]  Дальше?
[48:16.000 --> 48:28.000]  Да. Какой-то светло-черный.
[48:28.000 --> 48:44.000]  Значит, за что отличается следующий бит?
[48:44.000 --> 48:56.000]  На магическом обыске.
[48:56.000 --> 49:13.000]  Хорошо. То есть мы сделали предположение, что за яркость фона...
[49:13.000 --> 49:26.000]  Хорошо. Если наше предположение верно, нам нужно что-то, чтобы попало в старший бит.
[49:26.000 --> 49:32.000]  И доказать.
[49:32.000 --> 50:00.000]  Давайте сейчас проверим.
[50:00.000 --> 50:08.000]  Уложим на 16.
[50:08.000 --> 50:15.000]  Сдвигом влево на 4 бита.
[50:15.000 --> 50:19.000]  Цель нам портить не надо, да и можно портить.
[50:19.000 --> 50:26.000]  Почему можно портить?
[50:26.000 --> 50:34.000]  Все регистры мы спрятали, а потом мы их все вернем.
[50:34.000 --> 50:41.000]  Мы честно соблюдаем соглашение о вызове.
[50:41.000 --> 50:47.000]  Сборка.
[50:47.000 --> 50:54.000]  Так, и вообще, что это мы мелочимся?
[50:54.000 --> 51:16.000]  Каждый раз команду набирать.
[51:16.000 --> 51:41.000]  Не забываем про символ табуляции.
[51:41.000 --> 52:06.000]  Ну и что у нас получилось?
[52:06.000 --> 52:15.000]  Так, значит, за что отвечает у нас старший бит?
[52:15.000 --> 52:20.000]  Да, за мигание.
[52:20.000 --> 52:28.000]  Как бы это примить?
[52:28.000 --> 52:56.000]  Больше всего у нас пушит ОПСК.
[52:56.000 --> 52:59.000]  Мы ее прибили.
[52:59.000 --> 53:15.000]  Добавим это в мейпфайл.
[53:15.000 --> 53:20.000]  Чтобы, если она фейлится, ничего с ней не случилось.
[53:20.000 --> 53:44.000]  Чтобы мейпфайл продолжал выполняться, если у нас нет ни этого процесса.
[53:44.000 --> 53:53.000]  Значит, это у нас мигание.
[53:53.000 --> 54:03.000]  Ну вот, мы расшифровали, как у нас представляется дело.
[54:03.000 --> 54:12.000]  Теперь, как из этого делать что-нибудь полезное?
[54:12.000 --> 54:19.000]  Мы умеем наладить любой текст на любом ходе.
[54:19.000 --> 54:44.000]  Купы желания ложим, дарим мне.
[54:44.000 --> 55:04.000]  Одинаковый.
[55:04.000 --> 55:12.000]  Примерно как на некоторых форумах какие-то, помните ли, добавляли в плотность картинку.
[55:12.000 --> 55:18.000]  Дивки с текстом от библии, что за косяк форума, буквы пляшек.
[55:18.000 --> 55:22.000]  Ну и буквы, дай гипситой гребещей.
[55:22.000 --> 55:30.000]  А, у меня буквально вчера, он будет, в своем плане, все отформливать на треночках, и он просто писал как-то.
[55:30.000 --> 55:39.000]  Вообще, я бы сказал, на самом деле, это как раз такая, я просто, я просто, я просто, я просто, я просто, я просто, я просто, я просто, я просто, я просто, я просто, я просто, я просто,
[55:39.000 --> 56:04.000]  То есть, записанное вот сюда, мы пишем.
[56:04.000 --> 56:22.000]  Так, пишем цвет, здесь, выписывая здесь, пишем текст.
[56:22.000 --> 56:40.000]  И у нас есть цикл. В этом цикле мы последовательно, лол, или байт за байтом, или через байт, пишем какой-то, и что-то пишем.
[56:40.000 --> 56:46.000]  У нас есть объявление константа.
[56:46.000 --> 56:52.000]  А как мы будем из памяти читать?
[56:52.000 --> 57:04.000]  Как мы, вот так мы память пишем из регистра, а как будем читать из памяти регистра?
[57:04.000 --> 57:11.000]  Стоп, привет, вспомняйте.
[57:11.000 --> 57:24.000]  Вот, мы по адресу просор читаем из памяти регистра.
[57:24.000 --> 57:31.000]  Но в наше время верить нельзя никому, не можно.
[57:31.000 --> 57:38.000]  В том числе нельзя верить оперативной памяти.
[57:38.000 --> 57:44.000]  Как бы нам эту оперативку проверить?
[57:44.000 --> 57:52.000]  Что она работает не как псы, а именно как памятник.
[57:52.000 --> 58:06.000]  То бишь, то что туда записал, то оттуда и прочитал.
[58:06.000 --> 58:16.000]  То есть записать и сразу же считать, так?
[58:16.000 --> 58:26.000]  Итак, делаем большой цикл, и от одной константа до другой пишем что-то в память.
[58:26.000 --> 58:36.000]  От какой константа можно начинать, чтобы точно ничего не затереть весь наш код?
[58:36.000 --> 58:51.000]  Нет, от начала видеопамяти не стоит, потому что мы хотим что-нибудь на экран все-таки вывезти.
[58:51.000 --> 59:04.000]  Ну смотрите, мы спокойно работали с выпищенной линией А20, и наша программа спокойно жила, и никто ее не трогал.
[59:04.000 --> 59:10.000]  Наконясь в самом первом мегабайте памяти.
[59:10.000 --> 59:20.000]  Значит, начиная с первого мегабайта памяти вполне можно тестить.
[59:20.000 --> 59:30.000]  Адрес видеопамяти находится где?
[59:30.000 --> 59:37.000]  Внутри 0 мегабайта, не дальше.
[59:37.000 --> 59:48.000]  Ну, мегабайт это 2 в 20, то есть 20 битиков.
[59:48.000 --> 59:53.000]  А адрес педалично, значит это сколько?
[59:53.000 --> 59:57.000]  То есть до 5 эффек это у нас 0 мегабайт.
[59:57.000 --> 01:00:00.000]  Это у нас меньше, чем 5 эффек.
[01:00:00.000 --> 01:00:07.000]  Значит, это все в 0 мегабайте, все хорошо.
[01:00:07.000 --> 01:00:13.000]  То есть 0 мегабайт мы зарезервируем.
[01:00:14.000 --> 01:00:23.000]  Оставим там наш код, наш стэк, данные и все прочее.
[01:00:23.000 --> 01:00:26.000]  Ну, а также видеопамяти.
[01:00:26.000 --> 01:00:31.000]  А адрес куда нас возместил биос тоже находится внутри 0 мегабайта. Все хорошо.
[01:00:31.000 --> 01:00:37.000]  А начиная с первого мегабайта по сколько там мегабайт можно тестировать?
[01:00:37.000 --> 01:00:41.000]  Стоит ли в одном цикле записывать и сразу считывать?
[01:00:55.000 --> 01:00:59.000]  Ну, если мы так будем делать, записать и сразу считать, то мы памяти протестируем.
[01:00:59.000 --> 01:01:02.000]  Мы протестируем, как работает пэш.
[01:01:08.000 --> 01:01:13.000]  Нам нужно записать больше памяти, чем у нас отъем кэша процесса.
[01:01:13.000 --> 01:01:16.000]  Тогда им действительно придется писать памяти.
[01:01:23.000 --> 01:01:27.000]  Большим циклом написали, а тем большим циклом считали.
[01:01:27.000 --> 01:01:34.000]  Если мы хоть раз считали не тот байк, который писали, например, припишем один константный байк.
[01:01:35.000 --> 01:01:39.000]  Тогда проводим текст. Текст мы вводим уметь.
[01:01:39.000 --> 01:01:42.000]  Это даже выведется на отдельную функцию.
[01:01:42.000 --> 01:01:45.000]  Опустим на сильном фоне.
[01:01:49.000 --> 01:01:59.000]  Если нашли ошибку, а для целях отладки мы можем между циклами записи и чтения
[01:01:59.000 --> 01:02:04.000]  и не поставить просто запись по слединке какого-то одном нового байка.
[01:02:04.000 --> 01:02:08.000]  И вывесим на красный фоне memory bet, если нашли ошибку.
[01:02:10.000 --> 01:02:19.000]  Ну и дома попробуйте взять эти примеры, которые лежат на i7 True в разделе языка ассемблера.
[01:02:30.000 --> 01:02:34.000]  Вот это слово ассемблера.
[01:02:49.000 --> 01:02:53.000]  И попробуйте их модифицировать и превратить в i7 True.
[01:02:54.000 --> 01:03:08.000]  Цикл в записи. Возможно, выкомментированный этап внесения ошибки и цикл чтения.
[01:03:08.000 --> 01:03:11.000]  Вот какой-то классный, но какой-то короткий.
[01:03:11.000 --> 01:03:25.000]  Собирать просто насмом, в простой бинарный формат, испытывать можно на виртуоблоксе.
[01:03:25.000 --> 01:03:43.000]  Вот еще один случай, когда ассемблер действительно нужен, это вот как раз разработка нискованного пазового печенья,
[01:03:43.000 --> 01:03:49.000]  разработка загрузчика, ну по крайней мере из намых первых его этапов.
[01:03:49.000 --> 01:04:01.000]  Когда нам действительно нужно сделать некие действия, для которых нет подходящих выражений в языках ассокуума.
[01:04:04.000 --> 01:04:06.000]  Вот, например, вот эти.
[01:04:19.000 --> 01:04:29.000]  Ну вот, просто смотри в виртуоблокс, дальше.
[01:04:32.000 --> 01:04:47.000]  Создаете новую виртуальную машину, называйте как-нибудь, никаких подсказок, что эта система ему не нужна, указывайте обе виртуальные памяти.
[01:04:47.000 --> 01:04:57.000]  Кстати, смотрите, что будет, мы будем исследовать больше памяти, чем дальше в виртуалбоксе.
[01:04:57.000 --> 01:05:11.000]  Виртуальный жесткий диск нам не нужен, вместо этого настроить машину, носители.
[01:05:12.000 --> 01:05:26.000]  И две контроллеры нам не нужны, вместо этого добавляем floppy-контроллер и образ дискетки, который собран на нас.
[01:05:26.000 --> 01:05:29.000]  Вот это виртуальный памятник.
