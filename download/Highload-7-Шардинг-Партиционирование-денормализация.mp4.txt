[00:00.000 --> 00:10.800]  Так, ну что, давайте, Махач, на чем мы остановились?
[00:10.800 --> 00:16.840]  На двух способах стабилизации положения чего-либо.
[00:16.840 --> 00:17.840]  Да.
[00:17.840 --> 00:18.840]  Табличный?
[00:18.840 --> 00:23.840]  А что, вам присоединился к табличной работе?
[00:23.840 --> 00:24.840]  Табличный, это ты между какой?
[00:24.840 --> 00:27.840]  А когда на какой табличной работе?
[00:27.840 --> 00:29.840]  Так, окей.
[00:30.680 --> 00:33.680]  Ну, погнали.
[00:33.680 --> 00:38.880]  Идогом, мы, напомню, мы в прошлый раз с вами обсуждали
[00:38.880 --> 00:42.120]  ситуацию, пытались разобраться в ситуации, что делать, если
[00:42.120 --> 00:46.000]  у нас очень много данных, и они не влезают на одну
[00:46.000 --> 00:47.000]  машину.
[00:47.000 --> 00:52.280]  В одну базу данных или в одну, не знаю, на один диск.
[00:52.280 --> 00:55.320]  Ну и суть, важно, не влезают, нам их нужно разбить.
[00:55.320 --> 00:56.720]  По какому принципу бить?
[00:56.720 --> 00:57.720]  Есть два варианта.
[00:58.600 --> 01:01.080]  Ну, в смысле вариантов множество, но есть два принципиальных
[01:01.080 --> 01:02.080]  подхода.
[01:02.080 --> 01:05.960]  Первый вариант, первый подход, у нас есть некий центральный
[01:05.960 --> 01:08.360]  диспетчер, который точно знает, где лежит тот или
[01:08.360 --> 01:09.360]  иной элемент.
[01:09.360 --> 01:12.360]  И мы к нему, например, входим очень часто и спрашиваем.
[01:12.360 --> 01:15.360]  Пользователь, вот этот, файл, вот этот, где лежат.
[01:15.360 --> 01:16.960]  Он нам говорит, иди туда.
[01:16.960 --> 01:22.240]  Это первый вариант, второй вариант, некая функция,
[01:22.240 --> 01:26.160]  от чего-то, от логина, от идентификатора, от имени
[01:26.160 --> 01:27.160]  и так далее.
[01:27.160 --> 01:30.720]  Которая тоже, которая выполняется, вы передаете ей элемент,
[01:30.720 --> 01:35.720]  она возвращает вам номер сервака, ну или адрес сервака.
[01:35.720 --> 01:37.720]  Идогон, плюсы-минусы, погнали.
[01:37.720 --> 01:39.720]  Центральный диспетчер.
[01:49.720 --> 01:51.720]  Так, плюс, легко менять.
[01:54.720 --> 01:55.720]  Согласна.
[01:56.720 --> 02:07.720]  Вместо положения, тебе нужно пользователя перебросить,
[02:07.720 --> 02:10.440]  его перебрасываешь и в этом странном диспетчере
[02:10.440 --> 02:11.440]  меняешь, да.
[02:11.440 --> 02:12.440]  Либо удаляешь, либо еще что-то.
[02:12.440 --> 02:15.440]  Ну то есть с ним легко работать, да.
[02:15.440 --> 02:16.440]  Здесь функция.
[02:16.440 --> 02:17.440]  Так, еще.
[02:17.720 --> 02:19.720]  Ну, ты можешь делегировать.
[02:40.720 --> 02:42.720]  Не, ну подожди, это можно, там дохрена.
[02:42.720 --> 02:44.720]  Ну то есть у тебя…
[02:47.440 --> 02:57.720]  Давайте, ну быстрее, быстрее, быстрее.
[02:57.720 --> 03:02.720]  Чисто теоретически эта таблица может не влезть
[03:02.720 --> 03:03.720]  в одну машину, но…
[03:03.720 --> 03:06.720]  Блин, ну давайте прикинем хотя бы, для Facebook это возможно,
[03:06.720 --> 03:07.720]  а вот Facebook.
[03:07.720 --> 03:08.720]  Сколько?
[03:08.720 --> 03:11.720]  Два миллиарда, да.
[03:11.720 --> 03:12.720]  Два миллиарда записей.
[03:13.000 --> 03:26.000]  Фэш-таблица из двух миллиардов, ну мне кажется 64.
[03:26.000 --> 03:33.000]  Не считается.
[03:33.000 --> 03:38.000]  Не считается, дальше.
[03:38.280 --> 03:41.280]  А погоди.
[03:53.280 --> 03:58.280]  Ну это такой очень слабенький плюсик, это маленький минусик,
[03:58.280 --> 03:59.280]  как бы, несколько занимает.
[03:59.280 --> 04:13.280]  Это почти не минус. А какая нам разница?
[04:13.280 --> 04:18.280]  Ой, ну бросьте, это все равно внутренние адреса, закрытые адреса.
[04:18.280 --> 04:30.280]  У вас же все равно, у вас в любом проекте у вас есть внешние квантов и есть внутренние квантов.
[04:30.280 --> 04:33.280]  И то, что происходит внутри, отсюда не видно.
[04:33.280 --> 04:39.280]  И, да, все эти вагины. Виден один сервак, через который все проходит.
[04:39.280 --> 04:43.280]  Ну если хоть какая-то безопасность внутри проекта есть, то это как-то так.
[04:43.280 --> 04:46.280]  Так, все? Выбрали центральный диспетчер?
[04:46.280 --> 04:56.280]  Короче, блин, колоссальный минус. У вас есть одна точка отказа.
[04:56.280 --> 05:02.280]  А вот как ты собираешься это сделать?
[05:02.280 --> 05:06.280]  Перевернуть? Перевернуть вот тут, да?
[05:06.280 --> 05:31.280]  Хорошо, одна точка отказа или усложнение логики, я бы так написал. Усложнение.
[05:31.280 --> 05:46.280]  А тебе реплецировать нужно будет здесь не совсем в базу данных. Это у тебя кусочек памяти, да?
[05:46.280 --> 05:57.280]  Алгоритмы репликации понятны. Какую конкретно ты для этого будешь делать?
[05:57.280 --> 06:02.280]  Что это будет такое? Какой софт?
[06:02.280 --> 06:07.280]  Ты сам себе сейчас минус заработал.
[06:07.280 --> 06:12.280]  Нет, не на экзамене, здесь, в этой штуке.
[06:12.280 --> 06:17.280]  Это не простая софтинка.
[06:17.280 --> 06:25.280]  Это веб-сервер, который работает очень быстро, который вам придется писать самим.
[06:25.280 --> 06:31.280]  А что ты сюда поставишь?
[06:31.280 --> 06:36.280]  Что это будет? Кэш? Это не может быть кэша.
[06:36.280 --> 06:41.280]  Распределенная база данных будет работать очень медленно, она будет в базе данных.
[06:41.280 --> 06:52.280]  Тебе нужно что-то принципиальное, что держит все в памяти.
[06:52.280 --> 07:02.280]  А что делать за кипер?
[07:02.280 --> 07:08.280]  Я не знаю название софта, но знаю, что это такое.
[07:08.280 --> 07:17.280]  Чего знаешь? Что?
[07:17.280 --> 07:21.280]  Ребята, алгоритмы все известны. Репликация, шаргирование и прочее.
[07:21.280 --> 07:30.280]  Тебе нужна определенная логика поведения вот этого самого центрального диспетчера.
[07:30.280 --> 07:35.280]  Ты должен уметь с ним общаться.
[07:35.280 --> 07:40.280]  Ты должен уметь задавать ему вопрос. Это ладно, это может быть какой-то, я не знаю, чуть ли не кэш.
[07:40.280 --> 07:45.280]  Но он же у тебя посложнее.
[07:45.280 --> 07:50.280]  Ты должен уметь с ним управлять, перебрасывать пользователи с одного адреса на другой,
[07:50.280 --> 07:55.280]  сбрасывать на диск, читать с диска.
[07:55.280 --> 08:00.280]  То есть какая-то история, какая-то логика у него есть. Ее нужно будет программировать.
[08:00.280 --> 08:05.280]  Она нестандартная. То есть такой прям штуки взять из коробки, я не знаю, что такая штука была взять из коробки.
[08:05.280 --> 08:10.280]  Можно будет взять какой-нибудь полустандарт, взять, например, NGNX, написать для него модуль, еще что-то.
[08:10.280 --> 08:19.280]  Но минус здесь заключается в том, что тебе придется использовать довольно серьезного программиста для того, чтобы это написать.
[08:19.280 --> 08:22.280]  Да, это не простой программист.
[08:22.280 --> 08:27.280]  Но давай прикинем, какое количество...
[08:27.280 --> 08:36.280]  Вот у нас есть Фейсбук. Если бы Фейсбук был сделан через центральный диспетчер, какое количество запросов шло бы к этой?
[08:36.280 --> 08:38.280]  Перекидывайте.
[08:38.280 --> 08:41.280]  Фейсбук, два миллиарда пользователей.
[08:41.280 --> 08:44.280]  Как будете считать?
[08:55.280 --> 08:57.280]  Давайте.
[08:57.280 --> 09:00.280]  Формулу. Итак, два миллиарда пользователей.
[09:00.280 --> 09:07.280]  Давай, говори. Вот эти люди. Фейсбук, два миллиарда. Считай.
[09:07.280 --> 09:10.280]  Сколько кликов пользователей? Чего умножать на что?
[09:10.280 --> 09:13.280]  Два миллиарда.
[09:13.280 --> 09:19.280]  Предполагайся. Вы архитектора, предполагайся.
[09:19.280 --> 09:31.280]  Так, два миллиарда неодновременно. Сколько одновременно?
[09:31.280 --> 09:35.280]  Возьмем 1 десятую. Окей, хорошо.
[09:35.280 --> 09:39.280]  Итого 200 миллионов у нас...
[09:39.280 --> 09:44.280]  1 десятая?
[09:44.280 --> 09:47.280]  Не, она предложила, я согласился.
[09:48.280 --> 09:51.280]  Ну, кажется разумным.
[09:51.280 --> 09:57.280]  Ну, обычно 1 десятая. Мой опыт подсказывает, что 1 десятая в среднем. Пиковый час.
[09:57.280 --> 10:00.280]  Пиковый час. Не постоянно.
[10:00.280 --> 10:03.280]  Давайте, как бы вы посчитали?
[10:08.280 --> 10:12.280]  А почему, собственно говоря, ты собираешься только крики считать?
[10:18.280 --> 10:21.280]  Окей, кликает раз в минуту.
[10:21.280 --> 10:24.280]  Давайте так, вот 200 миллионов пиковый час.
[10:24.280 --> 10:28.280]  А сколько времени проводит на страничках?
[10:28.280 --> 10:31.280]  Как бы вы, вообще, вот вам задачу...
[10:31.280 --> 10:33.280]  Посчитайте.
[10:33.280 --> 10:35.280]  Как бы вы считали?
[10:35.280 --> 10:38.280]  Чтобы вы посмотрели, какую статистику еще очень.
[10:38.280 --> 10:41.280]  Давайте.
[10:48.280 --> 10:51.280]  Ну, прикинь.
[10:53.280 --> 10:56.280]  10 кликов в минуту?
[11:03.280 --> 11:06.280]  Ну, я не знаю.
[11:06.280 --> 11:09.280]  Возможно, 10 кликов в минуту.
[11:09.280 --> 11:12.280]  Смотри. Мы сейчас находимся на ситуации,
[11:12.280 --> 11:15.280]  на точке 200 миллионов пользователей в час.
[11:18.280 --> 11:21.280]  Он сидит весь час, или что?
[11:21.280 --> 11:24.280]  Как?
[11:24.280 --> 11:27.280]  Он сидит весь час, или что?
[11:27.280 --> 11:30.280]  Он сидит весь час, или что?
[11:30.280 --> 11:33.280]  Он сидит весь час, или что?
[11:33.280 --> 11:36.280]  Он сидит весь час, или что?
[11:36.280 --> 11:39.280]  Как?
[11:39.280 --> 11:42.280]  Давайте, дальше, дальше.
[11:55.280 --> 11:58.280]  Договаривайтесь.
[11:58.280 --> 12:00.280]  Договоритесь друг с дружкой.
[12:00.280 --> 12:03.280]  Давайте посчитаем.
[12:30.280 --> 12:33.280]  Здесь правильного ответа нету.
[12:33.280 --> 12:36.280]  То есть, как бы пока...
[12:48.280 --> 12:51.280]  Три часа?
[12:51.280 --> 12:54.280]  Здесь три часа нужно пределить? Нет?
[12:54.280 --> 12:57.280]  На три. Хорошо.
[12:57.280 --> 13:00.280]  10, 6 миллионов.
[13:00.280 --> 13:03.280]  Сидит прямо сейчас. Дальше.
[13:12.280 --> 13:15.280]  Каждый кликает 10 раз в минуту.
[13:15.280 --> 13:18.280]  Так, окей, хорошо.
[13:18.280 --> 13:21.280]  10 раз в минуту это означает, что...
[13:22.280 --> 13:25.280]  10 раз в минуту.
[13:25.280 --> 13:28.280]  66 миллионов.
[13:28.280 --> 13:31.280]  Почему не 660?
[13:31.280 --> 13:34.280]  Каждые минуты по 10 раз.
[13:34.280 --> 13:37.280]  660 миллионов кликов в минуту.
[13:37.280 --> 13:40.280]  Окей.
[13:43.280 --> 13:46.280]  Дальше.
[13:52.280 --> 13:55.280]  30, 40, 50, 50, 60, 60, 70.
[13:55.280 --> 13:58.280]  30, 40, 50, 60, 60, 60.
[13:58.280 --> 14:01.280]  30, 40, 50, 60, 60, 60.
[14:01.280 --> 14:04.280]  30, 40, 50, 50, 60.
[14:04.280 --> 14:07.280]  30, 40, 50, 60, 60.
[14:07.280 --> 14:10.280]  All right?
[14:10.280 --> 14:13.280]  Он сидит весь час.
[14:13.280 --> 14:16.280]  Договорились друг с дружкой.
[14:16.280 --> 14:19.280]  Мы к нему обращаемся.
[14:19.280 --> 14:27.780]  получить ответ на вопрос где лежит информация о пользователе а пользователи
[14:33.280 --> 14:37.280]  я понятия не имею давайте думать
[14:50.280 --> 14:56.280]  пользователь может закешировать какого-то
[14:56.280 --> 15:03.280]  отвечаю на вопрос да пользователь может что угодно закешировать по идее
[15:03.280 --> 15:24.280]  так и ребят 660 миллионов кликов в минуту я как пользователь делаю 660 миллионов
[15:24.280 --> 15:28.280]  пользователи делают 660 миллионов действий на сайте facebook
[15:29.280 --> 15:36.280]  каждое действие сколько вызывает обращение к центральному диспетчу
[15:38.280 --> 15:41.280]  почему
[15:48.280 --> 15:54.280]  например нажатие кнопки еще там еще что-то
[15:55.280 --> 16:01.280]  так вы исходите из того что 660 миллионов грубо говоря авторских действий
[16:01.280 --> 16:06.280]  но когда я что-то делаю на страничке фейсбука вот я открыл френд ленту
[16:06.280 --> 16:10.280]  сколько запросов сюда пошло
[16:12.280 --> 16:16.280]  сколько пользователей попалось мне на этой страничке столько сюда запросов и
[16:16.280 --> 16:19.280]  пошло
[16:20.280 --> 16:28.280]  ну как грустно вот так и есть я встречаю аватарку где она лежит центральный
[16:28.280 --> 16:35.280]  диспетчер я встречаю новое имя комментарии где оно лежит
[16:35.280 --> 16:54.280]  ну да возможно вот у вас уже как бы здесь уплажнение в квадрате получается уже
[16:54.280 --> 17:03.280]  не просто поле и так вот прикиньте сколько запросов к этой вот штуке на
[17:03.280 --> 17:06.280]  одно обращение
[17:12.280 --> 17:20.280]  давай это у нас сколько будет 11 миллионов секунд
[17:20.280 --> 17:23.280]  да
[17:26.280 --> 17:37.280]  ну и каждый запрос генерирует несколько запросов туда но вот смотри я открываю
[17:37.280 --> 17:40.280]  бэка
[17:40.280 --> 18:09.280]  я собрался просто открыть страничку в к и посмотреть сколько у меня здесь
[18:09.280 --> 18:18.280]  разных мордашек и имен мне здесь раз два три четыре 5 6 8 9 10 у меня загрузилось
[18:18.280 --> 18:29.280]  примерно 20 этих историй 5 возможных друзей и она загрузила сразу десяток
[18:29.280 --> 18:37.280]  постов каждому по три комментария а еще мордашки еще лайки извините ребят там
[18:37.280 --> 18:42.080]  лайки тоже показываются мордачки людей
[18:45.280 --> 18:54.080]  короче тут 50 на френд-ленту но это на френд-лент а там же у нас же вы же под
[18:54.080 --> 18:58.600]  кликами любое движение мышки насколько я понимаю здесь посчитать ну давайте
[18:59.600 --> 19:04.600]  превратится в 60 миллионов запросов в секунду
[19:08.600 --> 19:15.600]  не надо умножать это уже понятно что до хрена не одна машина
[19:17.600 --> 19:25.600]  это значит эволюция эволюция айтишной мысли 15 лет назад мы обсуждали проблему
[19:25.600 --> 19:34.600]  10 к вот несколько лет назад стало проблема ставка сколько запросов
[19:34.600 --> 19:39.600]  обсуждается с одной машины одного сервера сейчас по моему реальные реальные цифры
[19:39.600 --> 19:44.600]  для некоторых проектов некоторыми запросами этот у нас был доклад прошлой
[19:44.600 --> 19:52.600]  осенью миллион запросов с машины машины 160 миллионов секунды это 60
[19:52.600 --> 20:00.600]  серверов то есть вас собираетесь построить нормально реплицируемую систему на 60 серверов
[20:00.600 --> 20:11.600]  ну давай так не 60 нам и не знаю реально не знаю настоек он опасно потому что ключевая
[20:11.600 --> 20:17.600]  функция и тп тп ну еще как вам идея
[20:21.600 --> 20:24.600]  иерархии диспетчера
[20:31.600 --> 20:37.600]  понимаете то есть это то есть 60 серверов да хорошо вы это реплицируете но как
[20:37.600 --> 20:43.600]  вы с этой тренером работать будете то есть книжу нужно ходить запросы делать то есть
[20:43.600 --> 20:47.600]  вот каждый бэкен будет выбирать себе своего центрального диспетчера дай
[20:47.600 --> 21:04.600]  короче
[21:04.600 --> 21:16.600]  усложнения да еще и в квадрате усложнения ребят ладно здесь плюсом здесь есть плюс
[21:16.600 --> 21:36.600]  то просто почему не работать нельзя еще раз сформулировать
[21:46.600 --> 21:54.600]  сложности с добавлением парки серверов да
[21:54.600 --> 22:02.600]  окей
[22:02.600 --> 22:11.600]  и так как решить эту проблему инженеры думать
[22:11.600 --> 22:18.600]  расти извращение еле снесешь не пойдет давай другого попроще проще проще проще проще
[22:18.600 --> 22:23.600]  проще одна функция другая функция тяжело
[22:23.600 --> 22:29.600]  ну во первых первая
[22:29.600 --> 22:35.600]  во первых есть такие функции которые очень мало которые вот с этой именно из-за этой
[22:35.600 --> 22:41.600]  проблемы как-то изменены или как-то построены так что при добавлении нового
[22:41.600 --> 22:46.600]  элемента там происходит минимальное количество изменений
[22:46.600 --> 22:53.600]  и так как вы говорили о том что у вас есть какие-то функции которые не
[22:53.600 --> 23:05.600]  нового элемента там происходит минимальное количество изменений они есть эти функции
[23:05.600 --> 23:11.600]  придуманы они не специалисты специалистов может и нет а функции функции есть да функции придуманы
[23:11.600 --> 23:20.600]  еще ну давайте давайте давайте давайте еще еще еще вариант проще проще проще проще проще
[23:20.600 --> 23:36.600]  варианты попроще у нас есть проблема мы добавляем новый сервак и наша функция часто теоретически
[23:36.600 --> 23:45.600]  все ломает заставляя нас перекладывая кучу вещей из одного места в другое пока самое прикольная
[23:45.600 --> 23:51.600]  идея додержать две функции но идея
[23:56.600 --> 24:00.600]  дата заведения пользователя вам в данный момент недоступна вам приходит
[24:00.600 --> 24:05.600]  вопрос на пользователя вам сначала нужно поднять пользователя потом вы узнаете дату
[24:05.600 --> 24:11.600]  ее заведения либо вам нужно кодировать в идентификаторе пользователя дату его
[24:11.600 --> 24:20.600]  заведения можно сделать панатона айдишники и смотреть по айдишнику когда функция у вас
[24:20.600 --> 24:26.600]  появляет прекращает быть элегантной но становится рабочей чисто теоретически да то есть ты
[24:26.600 --> 24:34.600]  хочешь новых пользователей отправлять куда-то новое место и так первый вариант новый пользователь
[24:34.600 --> 24:38.600]  в новое место
[24:51.600 --> 24:59.600]  правильно у вас будут будут новые серваки нормально заполненный и нормально работающий и старые
[24:59.600 --> 25:08.600]  серваки нахер никому не нужны понимаете да плюс-минус да этот вариант работает новые пользователи
[25:08.600 --> 25:16.600]  новую новое место есть функция некрасивая у нас внутри там куча ифов еще что-то но она работает
[25:16.600 --> 25:21.600]  проблема в том что в этом случае
[25:39.600 --> 25:42.600]  ну сложнее ну и ладно
[25:46.600 --> 25:53.600]  она будет такой большой пухленькой функцией такой большой
[25:53.600 --> 26:05.600]  ну можно кстати ее какой-нибудь табличной сделать типа не погоди зачем тебе таблицы тебя айдишники
[26:05.600 --> 26:10.600]  с миллионного по двух миллионов и сюда двух миллионов по трех миллионов и сюда
[26:10.600 --> 26:23.600]  зачем диапазоны как вы собираетесь решать проблему что старые машины со временем будут никому не нужны
[26:23.600 --> 26:31.600]  а там ты можешь что угодно туда вот и видишь что у тебя машина перестает использоваться
[26:31.600 --> 26:35.600]  да перебросил несколько пользователей или просто новых пользователей
[26:35.600 --> 26:44.600]  от нулевого до первого миллиона они умерли уже давно
[26:44.600 --> 27:06.600]  ну то есть у тебя я понял у тебя там с нулевого миллионный на первый сервак не знаю с миллионного
[27:06.600 --> 27:12.600]  на двух миллионов и со второго на втором сервак а с двух миллионов на третий вновь на первый сервак
[27:12.600 --> 27:14.600]  как-то так да
[27:14.600 --> 27:21.600]  так
[27:21.600 --> 27:33.600]  нет
[27:33.600 --> 27:46.600]  кромолу говоришь но как данные удаляются не удаляется теперь же вечно вы когда удаляетесь что-нибудь в интернете
[27:46.600 --> 27:51.600]  она не удаляется помечать как удаленно никто никогда ничего не удаляет
[27:51.600 --> 28:03.600]  но она просто не используется она данными но у тебя нагрузка не равномерно
[28:03.600 --> 28:10.600]  потому что тебе приходится тратить больше денег у тебя вот сюда нагрузка мне не знаю 100 запросов в сутки а сюда миллион
[28:10.600 --> 28:19.600]  но у тебя функция простая пока что придумывай
[28:19.600 --> 28:39.600]  то есть ты собираешься их еще перетусовывать периодически
[28:39.600 --> 28:44.600]  а давайте попроще вариант придумаем еще проще
[28:44.600 --> 28:53.600]  ну без вот этих перестановок перестановка это просто нужно перекладывать каждый раз что-то еще что-то
[28:53.600 --> 29:00.600]  поэтому сейчас еще придумаем как
[29:00.600 --> 29:07.600]  хорошо как эта функция тогда выглядит с перестановками
[29:07.600 --> 29:11.600]  подожди псевдослучайность тебе же нужно чтобы это псевдослучайность
[29:11.600 --> 29:15.600]  псевдослучайность ты используешь для того чтобы переложить что-то в одно и другое
[29:15.600 --> 29:20.600]  у тебя функция это нужно при псевдослучайности записать намертво прибить гвоздями
[29:20.600 --> 29:31.600]  когда ты после того как ты переложил у тебя функция должна поменяться вот как она выглядит диктуй я записываю
[29:31.600 --> 29:33.600]  да
[29:33.600 --> 29:37.600]  ну получится
[29:51.600 --> 29:56.600]  вам лучше вообще памяти не использовать вам лучше кодом это сделать
[29:56.600 --> 30:02.600]  у вас здесь там вся фишка что здесь вы памяти храните а здесь у вас код программный код
[30:02.600 --> 30:12.600]  в памяти ничего ну в смысле вы код в памяти храните но вы меняете когда функцию меняете вы перепрограммируете вашу систему
[30:12.600 --> 30:24.600]  я пока не понимаю принципов ее построения которые ты мне предлагаешь
[30:24.600 --> 30:30.600]  я понимаю что да вот и случайно перетусовал а как
[30:43.600 --> 30:50.600]  ну это очень ну какую некоторые как как некоторые случайно потом функцию положишь
[31:02.600 --> 31:10.600]  так короче плюс и минусы в смысле вот как бы минусы понятно новую пользу в новое место
[31:10.600 --> 31:20.600]  пока выглядит тремно вы пока не придумали как быть с тем что у вас новые серваки перегружены а старые не догружены
[31:20.600 --> 31:35.600]  и даже не так ладно бы это хорошо старые серваки пусть помирает но у вас новый сервак будет это
[31:35.600 --> 31:43.600]  всех новые регистрации отправляете всех новых пользователей то есть самых активных пользователей
[31:43.600 --> 31:52.600]  которые прямо сейчас сидят сто процентов и отправляете на новый сервак на один как случайное место
[31:52.600 --> 31:59.600]  ты новый сервер добавил вот у тебя есть 5 серверов они есть ты добавляешь новый сервер они
[31:59.600 --> 32:10.920]  заполнены как-то вот так я не знаю этот заполнен на 70 процентов это тоже на 7 процентов этот
[32:10.920 --> 32:21.520]  нас на 50 этот на 50 этот на 90 ты добавляешь новый сервак который заполнен на 10 процентов куда
[32:21.520 --> 32:32.200]  класть нового пользователя зло это перемешивать ну зло понимаешь перемешивать каждый раз зло
[32:51.520 --> 33:13.200]  так
[33:21.520 --> 33:28.520]  Объясните мне, что вы придумали.
[33:28.520 --> 33:31.520]  Так.
[33:31.520 --> 33:34.520]  Так.
[33:34.520 --> 33:36.520]  Так.
[33:46.520 --> 33:49.520]  Так.
[33:53.520 --> 33:56.520]  Так.
[34:01.520 --> 34:08.520]  Мы берем твою логическую машину, и вы их перетерпите.
[34:08.520 --> 34:19.520]  Молодец. Ты придумал или вы вместе придумали вариант, который называется архитектурный паттерн, который называется виртуальные шарды.
[34:19.520 --> 34:23.520]  Сейчас вернемся, погоди.
[34:23.520 --> 34:29.520]  Отдельно вернемся к этому вопросу. Итак, виртуальные шарды.
[34:29.520 --> 34:33.520]  Логика заключается в следующем.
[34:33.520 --> 34:42.520]  Вы берете весь ваш массив, например, пользователей, которые у вас есть изначально, и делите его не на...
[34:42.520 --> 34:53.520]  У вас два сервера. Вы его делите не на два. Вы его делите, например, на 10 тысяч виртуальных шардов.
[34:53.520 --> 35:01.520]  Никаких 10 тысяч. А потом решаете, что первые 5 тысяч сейчас лежат на одном сервере.
[35:01.520 --> 35:06.520]  Вторые 5 тысяч лежат сейчас на втором сервере.
[35:06.520 --> 35:18.520]  И вот это у вас. Вот это у вас. Вот это у вас пункт. Отпад к отделению на 10 тысяч.
[35:18.520 --> 35:26.520]  А вот это у вас некая табличка.
[35:26.520 --> 35:32.520]  Примерно то же самое, что ты сказал, только ты это сделал более математически.
[35:32.520 --> 35:40.520]  А программисты они потупее. Они вот так. Раз-раз.
[35:40.520 --> 35:49.520]  Она очень маленькая. И ты ее можешь закодировать чуть ли не в коде.
[35:49.520 --> 35:59.520]  Ее можно положить в базу данных и читать ее при старом.
[35:59.520 --> 36:09.520]  Добавляется новая машина. Ты берешь и какое-то количество виртуальных шардов целиком переносишь.
[36:09.520 --> 36:18.520]  То есть ты не переносишь пользователя. Ты переносишь их пачками по, не знаю, по 10 тысяч.
[36:18.520 --> 36:21.520]  И у тебя вот эта функция, она не меняется никогда.
[36:21.520 --> 36:27.520]  Тебе больше не нужно. Тебе 10 тысяч шардов виртуальных хватит на всю жизнь.
[36:27.520 --> 36:30.520]  Для какого размера ты бы не вырос.
[36:30.520 --> 36:34.520]  Да. При добавлении нового сервера меняется таблица.
[36:34.520 --> 36:47.520]  Посылается всем бэкендам сигнал перечитать новую таблицу.
[36:47.520 --> 36:54.520]  Таблица памяти. У тебя вот здесь нужно ходить в новое место каждый раз.
[36:54.520 --> 37:01.520]  Потому что держать весь объем. То есть вот смотри, у тебя работает 100 бэкендам.
[37:01.520 --> 37:05.520]  Запрос приходит случайно на него. На пользователя. Покажи мне что-то.
[37:05.520 --> 37:09.520]  Каждый из этих бэкендов идет в центральный диспетчер каждый раз.
[37:09.520 --> 37:14.520]  Потому что вот этот объем памяти в бэкенд не влезает.
[37:14.520 --> 37:20.520]  А там влезает 10 тысяч записей.
[37:20.520 --> 37:25.520]  Это может быть даже не хэштаблица. Это просто тупо массив.
[37:25.520 --> 37:29.520]  Из 10 тысяч элементов. Очень маленький массив.
[37:29.520 --> 37:35.520]  10 тысяч элементов.
[37:35.520 --> 37:40.520]  Ты берешь весь свой объем данных, которые тебе нужно зашартировать.
[37:40.520 --> 37:47.520]  И делишь его заранее на очень большое количество виртуальных шартов.
[37:47.520 --> 37:50.520]  На 10 тысяч. На 100 тысяч. Насколько хочешь.
[37:50.520 --> 37:58.520]  И вот эту функцию, которая делит весь объем пользователей на 10 тысяч виртуальных шартов.
[37:58.520 --> 38:02.520]  Ты харт кодишь. Она у тебя никогда больше не поменяется.
[38:02.520 --> 38:07.520]  По ID-шнику. Остаток отделения ID-шника на 10 тысяч.
[38:07.520 --> 38:11.520]  Все. Ты получаешь номер виртуального шарта.
[38:11.520 --> 38:18.520]  А дальше у тебя есть таблица соответствия. Виртуальный шарт. Реальная машина.
[38:18.520 --> 38:22.520]  И эта таблица тоже закартожена. Она состоит из 10 тысяч элементов.
[38:22.520 --> 38:26.520]  И она меняется уже как хочешь. Когда ты добавляешь новых пользователей.
[38:26.520 --> 38:30.520]  Перекидываешь что-то. Добавляешь новые сервера.
[38:36.520 --> 38:46.520]  Когда ты добавляешь новый сервер, ты берешь и по какому хочешь принципу перебрасываешь виртуальные шарты на новый сервак.
[38:48.520 --> 38:52.520]  Это примерно то же самое, что с вашей идеей с логарифом.
[38:52.520 --> 38:57.520]  Только в логарифе вы перебрасывали беточку, а здесь вы перебрасываете тупо виртуальные шарты.
[39:00.520 --> 39:06.520]  Это некое решение вот здесь сложности с переездом.
[39:06.520 --> 39:09.520]  Сейчас у нас еще куча вопросов.
[39:13.520 --> 39:15.520]  Центральный диспетчер неплох на самом деле.
[39:15.520 --> 39:19.520]  И не отбрасываем его. Хотя он сложнее, чем вот эта штука.
[39:19.520 --> 39:25.520]  Вопрос такой. Центральный диспетчер. Вот у вас серваки.
[39:28.520 --> 39:30.520]  И вот мы решили добавить новый.
[39:31.520 --> 39:33.520]  Загрузка наливаем.
[39:33.520 --> 39:36.520]  Как к центральному диспетчеру распределять новых пользователей?
[39:38.520 --> 39:42.520]  Это загрузка. 70-70% 50-50-90-10-0.
[39:43.520 --> 39:45.520]  Добавили новый сервер.
[39:51.520 --> 39:52.520]  Зачем?
[40:06.520 --> 40:08.520]  Ну мы точно знаем загруженность. Вон она.
[40:12.520 --> 40:16.520]  И так, вариант первый. На самый незагруженный сервер.
[40:16.520 --> 40:18.520]  Этот вариант плох. Чем?
[40:18.520 --> 40:22.520]  Да весь поток пойдет сразу на этот сервер, и он дедолага помрет.
[40:22.520 --> 40:26.520]  Правильное слово было озвучено. Распределение вероятности.
[40:26.520 --> 40:28.520]  В учетом вот этой загрузки.
[40:28.520 --> 40:31.520]  Туда все пойдет более вероятно, но тем не менее и не все.
[40:34.520 --> 40:36.520]  Ну правильно, но он и свободный.
[40:38.520 --> 40:40.520]  Можно, то есть, да,
[40:40.520 --> 40:43.520]  то есть как бы...
[40:43.520 --> 40:45.520]  как бы новый сервер?
[40:46.520 --> 40:47.440]  Да!
[40:48.520 --> 40:50.960]  Получلام.
[40:51.520 --> 40:53.520] uger?
[40:53.520 --> 41:00.840]  можно то есть как бы да и то есть как бы второй вариант с учетом распределения
[41:00.840 --> 41:04.480]  вероятностей и в этом случае ты все равно прав потому что сюда пойдет больше
[41:04.480 --> 41:12.400]  всего запрос и она опять же может не выдержать а как еще
[41:24.120 --> 41:28.400]  придумай элегантнее решение
[41:40.400 --> 41:41.040]  еще раз
[41:41.040 --> 42:00.800]  но все равно если у тебя поток людей как-то пропорционален его загрузки то ты
[42:00.800 --> 42:08.680]  можешь что-то вырубить хорошо у него 30 всех остальных у него 70 процентов
[42:08.680 --> 42:17.960]  свободно свободное место всех остальных по 10 мы не таблица мы центральный
[42:17.960 --> 42:21.440]  диспетчер построили теперь мучимся
[42:22.200 --> 42:30.320]  придумайте элегантнее решение с учетом загрузки загрузки серверов но при этом
[42:30.320 --> 42:33.240]  так чтобы вы не класс
[42:38.680 --> 42:51.440]  старт пользователи мы не перебрасываем это проблема сейчас мы будем пытаться ее
[42:51.440 --> 42:56.560]  решить следующим следующим ходом старт после не перебрасываем сейчас речь про
[42:56.560 --> 43:00.720]  новых пользователей придумайте алгоритм что когда приходит новый
[43:00.720 --> 43:06.440]  пользователь ваша система максимально легко это
[43:06.640 --> 43:23.800]  да но пока он заполняется ты собираешься на него очень сильно давить ему больно
[43:23.800 --> 43:50.280]  ну больно ему нет не надо это это это это невероятность это у нас загрузка вот
[43:50.320 --> 43:53.600]  у вас есть цифры загрузки
[44:06.880 --> 44:13.120]  мне не нравится вообще пропорция слово пропорционально
[44:20.280 --> 44:39.960]  значит чем мне не нравится слово вероятность у вас потому что она она
[44:39.960 --> 44:44.880]  делает неравномерный доступ этому неравномерную нагрузку у вас какие-то
[44:44.880 --> 44:52.600]  части системы больше загружены чем другие трафикам загружен почему
[44:52.600 --> 45:03.640]  подождите у вас есть несколько проблем вы про это помните у вас есть загрузка именно
[45:03.640 --> 45:09.320]  количество жесткого диска у вас еще сеть у вас еще трафик и прочего и вы должны
[45:09.320 --> 45:12.960]  примерно следить у вас все всегда примерно было равномерно между всеми
[45:12.960 --> 45:18.000]  серверами распределено а вы собираетесь какую-то пропорцию вычислять и мочить
[45:18.000 --> 45:24.000]  какого-то бедолагу окей хорошо он свободен абсолютно с точки зрения диска но трафик
[45:24.000 --> 45:35.160]  то нет все равно там гигабайтные или сколько гигабитный сеточка проще
[45:35.160 --> 45:48.640]  делай новый пользователь пришел куда его положить нет ложно ложно ты прогресса таких
[45:48.640 --> 45:57.480]  не найдешь мы сейчас не про шарды мы уже сделали выбор когда-то давным-давно плохо
[45:57.480 --> 46:02.400]  учились и сделали выбор центральный диспетчер мы неплохо учились маленький был проект
[46:02.400 --> 46:06.080]  центральный диспетчер идеально подходил сделали выбор центрального диспетчер у нас
[46:06.080 --> 46:13.240]  центральный диспетчер мы пытаемся обучить нового пользователя куда засунуть ну
[46:15.600 --> 46:17.000]  я вам сейчас расскажу вы будете
[46:21.000 --> 46:25.480]  но это самые активные пользователи они вот ток ток ток проявились
[46:32.400 --> 46:46.000]  меньше все загружен он знает статистику использования диска а статистику загрузки
[46:46.000 --> 46:57.400]  с точки зрения ресурсов это уж этот с точки зрения ресурсов можем но это такие системы
[46:57.400 --> 46:59.480]  строить не любят конечно но можем
[47:10.480 --> 47:13.200]  эту штуку придется либо очень часто спрашивать
[47:27.400 --> 47:49.000]  предлагаемое решение ставится точка некая точка отсечения но например я не знаю 80 процентов
[47:49.000 --> 47:58.720]  80 процентов загрузки и дальше по всем седарам у которых заполненность диска меньше чем 80
[47:58.720 --> 48:00.880]  процентов идет случайное распределение
[48:19.000 --> 48:31.120]  это решение одно из решений да то есть как бы но ты не отсрочил ты должен
[48:31.120 --> 48:35.640]  будешь к этому моменту что-то придумать новые сервера купить или еще что-то короче плюс
[48:35.640 --> 48:43.720]  минусы понятно да то есть если мы выбираем вот эту схему случайная после отсечки случайно
[48:43.720 --> 48:51.680]  выбор сервака после отсечки то тогда плюс в том что мы стеть не перегружаем у нас все равномерно
[48:51.680 --> 48:58.040]  расходуется минус в том что мы не на 100 процентов используем всю нашу систему да то есть у нас
[48:58.040 --> 49:06.840]  какой-то момент будет 80 80 здесь будет у нас 80 80 80 здесь будет и не знаю сок ну как
[49:43.720 --> 50:00.640]  нет ну подожди тут у тебя тоже не так чтобы резко у тебя сначала выборки участвует раз два три
[50:00.640 --> 50:08.760]  четыре пять шесть серверов потом бац четыре сервера потом бац два сервера и только потом
[50:08.760 --> 50:12.200]  один то есть а тоже здесь будет какая-то постепенная постепенная выход из строя
[50:12.200 --> 50:23.160]  добавлять новый сервер конечно просто ранее когда ты же это видишь как
[50:23.160 --> 50:39.680]  да да это нормально надо использовать центральный диспетчер
[50:39.680 --> 50:50.040]  а он используется да надо перемешивать ладно давайте перемешивать и того нам нужно переложить
[50:50.040 --> 51:11.200]  один виртуальный шар с одной машиной на другую как мы будем делать не ну погоди
[51:11.200 --> 51:18.280]  первая проблема пользователи не знают о том что ты наводишь порядок у себя на серверах и
[51:18.280 --> 51:29.760]  продолжают идти попросить его подождать нельзя но прикинь ты вот банк клиент заходишь
[51:29.760 --> 51:45.840]  и тебе пишут чувак прости банк вот предложи их ребятам прийти к нам сюда поучиться
[51:45.840 --> 51:58.840]  банк может так и делать но платёжная система например никогда типа вот ты
[51:58.840 --> 52:06.040]  сейчас пытаешься какой-нибудь на борделе расплатиться карточкой не работает нет не прокатит
[52:06.040 --> 52:17.320]  итак что делать с теми кондлами которые прямо сейчас заходят на нашу страничку пока мы
[52:47.320 --> 53:05.240]  окей за это эта процедура может занимать какое-то время какое бы время она не занимала хоть
[53:05.240 --> 53:14.720]  минуту хоть секунду за это время кто-то может что-то в нее записать так то есть давайте так
[53:14.720 --> 53:21.560]  первое чтение решили да то есть те кто читает читает откуда со старой тени а со старой
[53:21.560 --> 53:35.000]  так и что с ними сделать
[53:44.880 --> 53:46.480]  новое место
[54:08.480 --> 54:10.640]  ну договоритесь ничего не быть
[54:14.960 --> 54:16.960]  нет мы не можем не давать гарантии
[54:30.280 --> 54:39.800]  что пользователь хранится в нескольких местах ты имеешь в виду ну подожди а потом и у тебя
[54:40.400 --> 55:07.640]  так ладно пишем два места да и так ребят пишем два места сразу а если вот прямо сейчас именно
[55:07.640 --> 55:14.880]  в ту миллисекунду на на секунду когда я пишу в два места сразу кто-то третий мигрирующий мой
[55:14.880 --> 55:27.360]  сервер копирует одно в другое у меня там какая-то коллизия то есть я пишу вот сюда и вот сюда и
[55:27.920 --> 55:34.680]  кто-то в этот же самый момент копирует теоретический результат не пред не предсказуем
[55:34.680 --> 55:51.640]  отлично тогда строите временную диаграмму вот в этот момент мигрирующий сервер считал
[55:51.640 --> 56:00.440]  старая читал старая вот в этот момент я записал сюда новое как бы старый сервер
[56:00.440 --> 56:10.160]  вот этот вот в этот момент я записал новое в новый сервер а вот этот момент этот чувак
[56:10.160 --> 56:22.640]  записал старая в новый сервер короче у тебя race condition между двумя сущностями первая
[56:22.640 --> 56:31.120]  это твоя программа второе это мигрирующий сервер я не помню как он решился как мы решили
[56:31.120 --> 57:01.040]  хорошо хорошо но тогда пока пользователь работает с пользователь продолжает работать
[57:01.360 --> 57:06.680]  то есть ты будешь смотреть в два места да то что продолжать ему показывать анкету
[57:06.680 --> 57:21.520]  я понимаю ты читай то есть как бы третий вариант который был предложен писать некое временное
[57:21.520 --> 57:42.400]  хранище в некое временное хранище и с этим временным хранищем когда мы делаем когда мы
[57:42.400 --> 57:49.920]  читаем с ноды которая прямо сейчас с шарда который прямо сейчас копируется мы должны считать из двух
[57:49.920 --> 57:58.000]  мест правильно мы сначала должны посмотреть во временном хранилище а потом должны если там
[57:58.000 --> 58:07.240]  нет то идем в старую ноду не с новой ноды мы пока еще не знаем мы если мы хотим прочитать с ноды
[58:07.240 --> 58:12.960]  которые прямо сейчас переносит мы читаем сначала из ну не из лога это тоже какая-то
[58:12.960 --> 58:22.640]  табличка из лога ну как из лога куда
[58:22.640 --> 58:42.360]  старую ноду не это это решение без без гона в идее как бы ну то есть хотя значит на самом
[58:42.360 --> 58:46.200]  деле знаешь как решение чем а что ты будешь делать когда ты должен будешь временное хранище
[58:46.200 --> 59:00.200]  сбросить новую ноду у тебя будет то же самое только в мини-масштабе понял
[59:00.200 --> 59:22.840]  ну короче не прокатит не прокатит почему ребят за то что вы представите не можете обязательно
[59:22.840 --> 59:28.360]  случиться это вот всегда так бывает то есть если есть хоть какая-то вероятность логическая что
[59:28.360 --> 59:37.640]  это произойдет и оно произойдет и потом ты замучишься это искать закон мёртвый
[59:37.640 --> 01:00:04.000]  так так нет не получится у тебя запрещать изменение ну как бы хорошо до какого до какого
[01:00:04.000 --> 01:00:14.320]  размера ты будешь бить на 10 тысяч поделили виртуальный шарт разбили на 10 тысяч и все
[01:00:14.320 --> 01:00:23.840]  с дописью пока миграция не закончится мы не знаем сколько надлится если мы говорим про
[01:00:23.840 --> 01:00:30.200]  шарта она может длиться несколько минут неприемлемо блин что у вас за это конечно
[01:00:30.200 --> 01:00:48.440]  неприемлемо но вы сами 100 миллисекунд пол пол пол секунды чего по дыму
[01:00:48.440 --> 01:01:05.360]  как и да го хорошо значит четвертый вариант бьем на маленькие таблеточки дальше
[01:01:05.360 --> 01:01:16.160]  бьем дальше берем шарт раздеваем его на совсем малюсенькие кусочки а дальше
[01:01:16.160 --> 01:01:37.760]  значит разбили и разбили на кусочки хорошо помним дальше
[01:01:46.760 --> 01:01:51.760]  окей то есть то есть если я вас правильно понимаю вы собираетесь вот у вас была
[01:01:51.760 --> 01:01:57.600]  система с виртуальными шардами вы поверх этой системы виртуальной шарды повесили
[01:01:57.600 --> 01:02:04.000]  центральный диспетчер для конкретного переносимого прямо сейчас шарда правильно
[01:02:04.000 --> 01:02:10.920]  ну что-то типа того для того чтобы знать что конкретно прямо сейчас переносит
[01:02:16.160 --> 01:02:28.880]  погоди нет нет нет нет ребят этого информации у вас хранится в том самом
[01:02:28.880 --> 01:02:49.520]  центральном месте который пользователь направляет и хорошо и там выясняется что
[01:02:49.520 --> 01:02:57.360]  у тебя состояние 3 да старая переносится переносится и новым
[01:02:57.360 --> 01:03:04.840]  выясняется есть если вы
[01:03:08.840 --> 01:03:16.480]  значит у тебя информация вот этого таблица с переносами хранится не на шарде а на уровень
[01:03:16.480 --> 01:03:22.480]  выше там где ты отправляешь на шард потому что мы должны будем отправить либо на старый либо на новый
[01:03:22.480 --> 01:03:40.360]  ребят вы как-то немножко то есть у вас шард может быть вообще просто тупо машины с диском и все там на
[01:03:41.360 --> 01:03:48.480]  никуда ничего никого не может отправить но может только файлов дать не надо его делать чуть умнее
[01:03:48.480 --> 01:03:59.640]  вас не хватит программистов умных они все уехали они найдут работу
[01:04:10.360 --> 01:04:22.600]  правильно правильно на самом деле думаете все все верно пока все это делается действительно внутри
[01:04:22.600 --> 01:04:28.840]  вот этой функции на либо этот центральный диспетчер либо это вот этот система под
[01:04:28.840 --> 01:04:34.840]  виртуальными шардами с виртуальными шардами когда вы переносите вы включаете просто спецрежим
[01:04:34.840 --> 01:04:44.080]  у вас появляется поверх системы с виртуальными шардами у вас появляется некое исключение для
[01:04:44.080 --> 01:04:52.880]  одного конкретного виртуального шарда вот для этого конкретно виртуального шарда я бы не разбивал
[01:04:52.880 --> 01:05:01.240]  это на кусочки не городил бы историю а переносит бы тупо по пользователю последовательно друг за
[01:05:01.240 --> 01:05:07.200]  друга и пользователь у вас у вас появляется центральный диспетчер для одного для только
[01:05:07.200 --> 01:05:12.720]  для тех пользователей которые внутри этого ш продается которые сейчас переносится у
[01:05:12.720 --> 01:05:20.640]  него три состояния ставит переносится новое и в случае если у вас это пользователь один переносится
[01:05:20.640 --> 01:05:29.520]  можно даже не блокировать можно даже подождать то есть переносит а если пользователь если вот
[01:05:29.520 --> 01:05:32.100]  вот эта вот единичка, на которой вы разбили, настолько
[01:05:32.100 --> 01:05:35.760]  мала, что она переносится, ну блин, за секунду-то
[01:05:35.760 --> 01:05:37.960]  ж пользователь точно перенесется?
[01:05:37.960 --> 01:05:40.000]  Можно секунду подождать.
[01:05:40.000 --> 01:05:41.000]  Нет.
[01:05:41.000 --> 01:05:48.080]  А, на другой машине есть, нет, почему, у тебя виртуальный
[01:05:48.080 --> 01:05:51.280]  шар просто находится в спецрежиме, переносится,
[01:05:51.280 --> 01:05:52.280]  и все.
[01:05:52.280 --> 01:05:54.400]  Он у тебя пока что лежит как бы в двух местах.
[01:05:55.400 --> 01:06:07.040]  Вот есть вот эта вот таблица, которая вычисляет по ID-шнику
[01:06:07.040 --> 01:06:10.320]  виртуальный шар, вычислили виртуальный шар, смотрим
[01:06:10.320 --> 01:06:11.320]  в эту табличку.
[01:06:11.320 --> 01:06:14.760]  У всех здесь написан IP-адрес, первый IP-адрес, второй IP-адрес,
[01:06:14.760 --> 01:06:18.720]  третий, четвертый, пятый, а вот здесь написано спецрежим.
[01:06:18.720 --> 01:06:21.920]  Окей, спецрежим вызываем в следующую функцию, которая
[01:06:21.920 --> 01:06:25.440]  на самом деле центральный диспетч, и который уже как-то
[01:06:25.440 --> 01:06:30.160]  у себя внутри в памяти что-то хранит и так далее, исключительно
[01:06:30.160 --> 01:06:36.960]  для вот этого шарда, который переносится, да, это замедлят
[01:06:36.960 --> 01:06:50.400]  саму миграцию.
[01:06:50.400 --> 01:06:53.600]  Не десять тысяч раз, а сколько у нас в шарде, сколько у нас
[01:06:53.600 --> 01:07:02.240]  там, может миллион, да, да, там может быть много.
[01:07:02.240 --> 01:07:06.040]  Выбирайте, то есть у вас каждый раз будет выбор
[01:07:06.040 --> 01:07:11.640]  между простотой и скоростью, например, а это вариант
[01:07:11.640 --> 01:07:15.640]  простой и надежный, да, он будет работать неделю.
[01:07:15.640 --> 01:07:25.520]  Ну и что, по десять пользователей можно, но в таком случае
[01:07:25.520 --> 01:07:29.800]  у тебя функция время переносов может расти, найди некий
[01:07:29.800 --> 01:07:30.800]  баланс.
[01:07:30.800 --> 01:07:43.520]  Ну если перенести одного пользователя, выбирайте.
[01:07:43.520 --> 01:07:47.520]  Вот на основе чего ты будешь принимать решение?
[01:07:47.520 --> 01:07:50.320]  Ты придешь к менеджеру и спросишь, чувак, можно я
[01:07:50.320 --> 01:07:55.360]  десять заплокирую, у нас два миллиарда, будет вероятность
[01:07:55.360 --> 01:07:59.560]  одна миллионная, что десять, что ты будешь заплокирован,
[01:08:00.520 --> 01:08:03.720]  менеджер тебе скажет, можно или нельзя, в случае, если
[01:08:03.720 --> 01:08:06.200]  это платежная система, тебе скажут, скорее всего, нельзя,
[01:08:06.200 --> 01:08:11.960]  а в случае, если это фейсбук, тебе скажут, да, по одному
[01:08:11.960 --> 01:08:19.960]  переносим, нельзя по одному переносим, а одного ты не
[01:08:19.960 --> 01:08:23.400]  блокируешь, ты просто его ждешь, если приходит, если
[01:08:23.400 --> 01:08:26.200]  именно так совпало, что в этот самый момент ты переносишь
[01:08:26.200 --> 01:08:30.160]  этого пользователя, то бэкэнд, который пытается
[01:08:30.160 --> 01:08:38.680]  найти данные по этому пользователю, просто ждет, они ждут пока
[01:08:38.680 --> 01:08:43.680]  все десять переносу.
[01:08:43.680 --> 01:08:51.000]  Может быть, но десять, чисто теоретически, дольше, короче,
[01:08:51.000 --> 01:08:53.240]  вот каждый раз садитесь и думаете, все, я вам варианты
[01:08:53.240 --> 01:08:54.240]  все обрисовал.
[01:08:54.240 --> 01:09:16.360]  В этом варианте у тебя к виртуальному шарду привязана
[01:09:16.360 --> 01:09:19.720]  некая пометочка, потому что включить для этого виртуального
[01:09:19.720 --> 01:09:26.560]  шарда спецрежим, он сейчас переносит, включает спецрежим,
[01:09:26.560 --> 01:09:31.120]  где уже просто тупо таблица по каждому пользователю
[01:09:31.120 --> 01:09:37.760]  или по группе пользователей, почему, ты можешь ее сделать
[01:09:37.760 --> 01:09:43.320]  для, только для части пользователей, не для всех, да, нет, ничего
[01:09:43.320 --> 01:09:44.320]  тебя не держит.
[01:09:44.320 --> 01:09:57.880]  Так, закончили с функцией шардирования, но это тяжелая
[01:09:57.880 --> 01:09:58.880]  проблема.
[01:09:58.880 --> 01:10:12.760]  Так, что у нас еще, о, что у нас, а чем мы занимались
[01:10:12.760 --> 01:10:25.760]  в этом варианте, только в варианте, так, ладно, давайте
[01:10:25.760 --> 01:10:35.360]  быстренько, еще три способа работы с базами данных.
[01:10:35.360 --> 01:10:39.600]  Есть еще один способ, вот мы с вами сейчас брали базу
[01:10:39.600 --> 01:10:44.160]  и аккуратненько били ее на кусочек, а у нас с вами
[01:10:44.160 --> 01:10:50.760]  был паттерн, который назывался функциональное разделение
[01:10:50.760 --> 01:10:51.760]  для бэкэнда.
[01:10:51.760 --> 01:10:52.760]  Помните?
[01:10:52.760 --> 01:10:53.760]  А?
[01:10:53.760 --> 01:10:54.760]  Не-не-не-не-не.
[01:10:54.760 --> 01:10:55.760]  Нет.
[01:10:55.760 --> 01:11:08.760]  Рестопид, какая разница, это растопид, это растопид,
[01:11:09.760 --> 01:11:15.600]  да, сплошевообщение, функциональное разделение, когда мы берем
[01:11:15.600 --> 01:11:21.400]  и бьем нашу систему на части по их функциональной задаче,
[01:11:21.400 --> 01:11:24.280]  то есть типа пором лежит в одном месте, новости в
[01:11:24.280 --> 01:11:25.280]  другом.
[01:11:25.280 --> 01:11:38.520]  Ну вообще, ну да, это паттерн.
[01:11:39.280 --> 01:11:41.880]  Что не отменяешь, что так нужно делать, то же самое
[01:11:41.880 --> 01:11:44.040]  применимое к базам теоретически.
[01:11:44.040 --> 01:11:47.360]  Вы точно также можете разбить разные функциональные
[01:11:47.360 --> 01:11:52.360]  части, разные таблицы вынести на разные машины.
[01:11:52.360 --> 01:11:55.360]  Что там интересное?
[01:11:55.360 --> 01:12:00.840]  Например, пором на одно, новости на другое, вы можете
[01:12:00.840 --> 01:12:04.720]  даже больше пойти, вы можете даже разные базы данных
[01:12:04.720 --> 01:12:08.120]  выбрать для разных систем хранения.
[01:12:08.720 --> 01:12:12.720]  Вы новости можете хранить в SQL, что-то другое в Монге,
[01:12:12.720 --> 01:12:15.720]  в новом SQL и так далее.
[01:12:15.720 --> 01:12:20.720]  Например, пользователи, вы в чем хранили?
[01:12:20.720 --> 01:12:25.720]  Вот с которыми мы сейчас, с которыми мы сейчас учимся.
[01:12:25.720 --> 01:12:26.720]  Почему?
[01:12:26.720 --> 01:12:27.720]  А?
[01:12:27.720 --> 01:12:54.720]  Пользователи, где бы хранили, какой база?
[01:12:54.720 --> 01:13:03.720]  Вот, это правильный вопрос.
[01:13:03.720 --> 01:13:05.720]  Что мы хотим с ним делать?
[01:13:05.720 --> 01:13:08.720]  Если мы хотим только доставать его по айдишнику, то тогда
[01:13:08.720 --> 01:13:10.720]  конечно на SQL.
[01:13:10.720 --> 01:13:11.720]  Это проще всего.
[01:13:11.720 --> 01:13:14.720]  А если мы хотим, можно еще без баз обойтись, если мы
[01:13:14.720 --> 01:13:16.720]  хотим по айдишнику его доставать.
[01:13:16.720 --> 01:13:18.720]  А если мы хотим чего-нибудь вычислять, какие-нибудь
[01:13:18.720 --> 01:13:22.720]  выборки делать, статистику считать, то уже надо думать.
[01:13:22.720 --> 01:13:25.720]  Так, следующая история.
[01:13:25.720 --> 01:13:33.720]  Мы делили с вами пользователей по нашу армию.
[01:13:33.720 --> 01:13:39.720]  А как бы вы поделили новость?
[01:13:39.720 --> 01:13:51.720]  Вот новость, новостной сайт.
[01:13:51.720 --> 01:13:53.720]  Мы РБК делаем.
[01:13:53.720 --> 01:14:01.720]  Новость, кусочек теста.
[01:14:01.720 --> 01:14:06.720]  Да, у нас их просто, не то чтобы у нас их много.
[01:14:06.720 --> 01:14:07.720]  У нас проблема в другом.
[01:14:07.720 --> 01:14:12.720]  У нас проблема в том, что у нас трафик слишком большой.
[01:14:12.720 --> 01:14:14.720]  У нас серваки не справляются не потому, что они хранить
[01:14:14.720 --> 01:14:22.720]  это не могут, а потому что считать, отдавать тяжело.
[01:14:22.720 --> 01:14:29.720]  Новостей слишком, новости запрашивают слишком часто.
[01:14:29.720 --> 01:14:30.720]  Но новостей мало.
[01:14:30.720 --> 01:14:49.720]  Хорошо, закашировать мы можем.
[01:14:49.720 --> 01:14:51.720]  Ну давай тогда не так.
[01:14:51.720 --> 01:14:53.720]  Усложню, ладно.
[01:14:53.720 --> 01:15:03.720]  Усложню новости, а какие-нибудь...
[01:15:03.720 --> 01:15:05.720]  Давай так, вот представь себе какие-нибудь объекты,
[01:15:05.720 --> 01:15:09.720]  которые ведут себя по принципу новостей, но мы закашируем,
[01:15:09.720 --> 01:15:10.720]  ну мы не можем.
[01:15:10.720 --> 01:15:17.720]  Не знаю, котировки или там, не знаю, посты, что-нибудь такое.
[01:15:17.720 --> 01:15:22.720]  Они быстро устаревают.
[01:15:22.720 --> 01:15:27.720]  Ну здрасьте, двухнедельный пост, все, его уже не было никогда.
[01:15:27.720 --> 01:15:35.720]  Это в прошлой жизни, никто не помнит, о чем ты говорил.
[01:15:35.720 --> 01:15:40.720]  Итак, объекты, которые мы храним, очень быстро устаревают.
[01:15:40.720 --> 01:15:44.720]  Одна база данных не справляется даже с тем, что мы перед ней
[01:15:44.720 --> 01:15:50.720]  кеширование построили, не справляется с тем, чтобы читать эти данные.
[01:15:50.720 --> 01:15:57.720]  Нам приходится ее каким-то образом масштабировать на два-три сервера.
[01:15:57.720 --> 01:16:17.720]  Как?
[01:16:17.720 --> 01:16:22.720]  Да, допустим.
[01:16:22.720 --> 01:16:27.720]  Но по ним нужны выборки, то есть это какая-то SQL-ная история.
[01:16:27.720 --> 01:16:30.720]  Ну конечно.
[01:16:30.720 --> 01:16:35.720]  Или это не новости, давайте так, это видеофайлы.
[01:16:35.720 --> 01:16:40.720]  Но читают последние видеофайлы, как те, которые в тренде.
[01:16:40.720 --> 01:16:41.720]  Последний день.
[01:16:41.720 --> 01:16:47.720]  Короче, любые объекты, в которых есть огромный архив,
[01:16:47.720 --> 01:16:55.720]  но из этого огромный объем, то есть, короче, у нас вот здесь с пользователями все более-менее ровно.
[01:16:55.720 --> 01:17:00.720]  А здесь у нас проблема, здесь у нас вот так.
[01:17:00.720 --> 01:17:02.720]  Сюда очень много пользы.
[01:17:02.720 --> 01:17:06.720]  А вот сюда огромный кусок никому не нужного.
[01:17:06.720 --> 01:17:24.720]  Что делать?
[01:17:24.720 --> 01:17:35.720]  Что такое холодный хранищ?
[01:17:35.720 --> 01:17:39.720]  То есть ты предлагаешь разбить тюбасу на две части.
[01:17:39.720 --> 01:17:44.720]  Некий горячий кусок и холодный.
[01:17:44.720 --> 01:17:48.720]  Так?
[01:17:48.720 --> 01:17:50.720]  Что скажете?
[01:17:50.720 --> 01:18:15.720]  Так, плюсы в том, что ты придумал паттерн, который называется partitioning.
[01:18:15.720 --> 01:18:22.720]  Да, он есть. Есть горячий кусок для одного влока, есть холодный для архива.
[01:18:22.720 --> 01:18:26.720]  Логичный минус. Перекладывать.
[01:18:26.720 --> 01:18:32.720]  Мы опять-то придумали проблемы на голову.
[01:18:32.720 --> 01:18:39.720]  Ну все равно, понятно, мы перекладываем из одного места в другое, когда...
[01:18:39.720 --> 01:18:44.720]  Что делать?
[01:18:44.720 --> 01:18:52.720]  Нет, записали в горячее, а потом раз какое-то время переносим в холодное.
[01:18:52.720 --> 01:18:55.720]  Записали в холодное, говорили в горячее.
[01:18:55.720 --> 01:19:05.720]  Окей. А вот в какой момент это происходит?
[01:19:05.720 --> 01:19:08.720]  А вот я бедный несчастный бэкэнд.
[01:19:08.720 --> 01:19:10.720]  Вот у меня пришел запрос на новость.
[01:19:10.720 --> 01:19:14.720]  Мне ее нужно показать, мне куда идти.
[01:19:14.720 --> 01:19:16.720]  В два раза.
[01:19:16.720 --> 01:19:28.720]  То есть я всегда, ради даже каких-то архивных историй, должен буду идти сначала в горячую?
[01:19:28.720 --> 01:19:41.720]  А как я...
[01:19:41.720 --> 01:19:43.720]  Мы все запросы делаем горячими.
[01:19:43.720 --> 01:19:45.720]  Придумайте полигантнее решение.
[01:19:45.720 --> 01:19:53.720]  Ну как бы, так можно сделать, но так немножко в лоб.
[01:19:53.720 --> 01:19:57.720]  Дату отдельно хранить.
[01:19:57.720 --> 01:20:02.720]  Не нужно просто тупо закодировать дату в айдишник.
[01:20:02.720 --> 01:20:10.720]  Если посмотришь тот же самый РБК, вообще любой новостной сайт, у него дата закодирована в адрес Урла.
[01:20:10.720 --> 01:20:11.720]  Это неспроста.
[01:20:11.720 --> 01:20:21.720]  Окей, хорошо, мы дату знаем, дальше.
[01:20:21.720 --> 01:20:23.720]  Окей.
[01:20:23.720 --> 01:20:25.720]  Вот последнее.
[01:20:25.720 --> 01:20:27.720]  Избавьтесь от вот этого.
[01:20:27.720 --> 01:20:33.720]  От переноса.
[01:20:33.720 --> 01:20:38.720]  Избавьтесь, возможно.
[01:20:38.720 --> 01:20:43.720]  Мы сразу можем писать и сюда, и сюда.
[01:20:43.720 --> 01:20:47.720]  А раз в день удалять просто отсюда что-то и все.
[01:20:47.720 --> 01:20:53.720]  Удаление и перенос, удаление и считывание, и так далее, и так далее.
[01:20:53.720 --> 01:20:55.720]  Перенос и явно есть.
[01:20:55.720 --> 01:21:01.720]  Ну хорошо, перенос и явно есть.
[01:21:01.720 --> 01:21:06.720]  Удалить гораздо проще, чем перенести.
[01:21:06.720 --> 01:21:09.720]  Да, чем удалить и добавить.
[01:21:09.720 --> 01:21:14.720]  Потому что в удалении здесь у тебя одна операция, а здесь несколько операций.
[01:21:14.720 --> 01:21:23.720]  Мало того, не нужно вообще париться о том, что если мы переносим, то у нас там начинаются проблемы с границей дня.
[01:21:23.720 --> 01:21:34.720]  А что делать, если я делаю запрос в 00?
[01:21:34.720 --> 01:21:36.720]  Ну можно.
[01:21:36.720 --> 01:21:43.720]  А можно делать красивое, элегантное решение и писать сразу в два места?
[01:21:43.720 --> 01:21:48.720]  Выбирай, как хочешь.
[01:21:48.720 --> 01:21:51.720]  Как хочешь, можно.
[01:21:51.720 --> 01:21:55.720]  Так, окей, с партиционированием разобрались.
[01:21:55.720 --> 01:22:06.720]  Когда у вас использование данных примерно такое, то есть есть горячая история и большой, длинный, никому не нужен архив.
[01:22:06.720 --> 01:22:09.720]  Вы делаете отдельно горячую базу данных, отдельно холодную.
[01:22:09.720 --> 01:22:12.720]  Они могут быть по-разному устроены вообще.
[01:22:12.720 --> 01:22:21.720]  У вас вот здесь может быть, там я не знаю, под вот этой штукой может быть шардирование, а вот здесь, там я не знаю, шардирование по другому принципу вообще.
[01:22:21.720 --> 01:22:26.720]  Раз какое-то время он нужен.
[01:22:26.720 --> 01:22:29.720]  Ну как бы кто-то на новости-то ходит в старые.
[01:22:29.720 --> 01:22:37.720]  Так.
[01:22:37.720 --> 01:22:44.720]  И у нас остался последний паттерн баз данных.
[01:22:44.720 --> 01:22:50.720]  Что такое нормализация?
[01:22:50.720 --> 01:22:54.720]  Вы знаете? Первый, второй, третий, четвертый.
[01:22:54.720 --> 01:23:06.720]  Восемь их?
[01:23:06.720 --> 01:23:09.720]  Да, нет, ладно, короче.
[01:23:09.720 --> 01:23:17.720]  И так далее. У нас есть пользователи.
[01:23:17.720 --> 01:23:26.720]  И мы их зашардировали в несколько ноу-эсквельных баз данных.
[01:23:26.720 --> 01:23:28.720]  Ноу-эсквельные базы данных.
[01:23:28.720 --> 01:23:32.720]  Вот мы их зашардировали, храните, например, все прекрасно работает.
[01:23:32.720 --> 01:23:38.720]  И приходит к вам менеджер и говорит, я поиск хочу.
[01:23:38.720 --> 01:23:41.720]  Нет.
[01:23:41.720 --> 01:23:47.720]  Давай делай мне поиск с фильтром.
[01:23:47.720 --> 01:23:49.720]  Фильтр хочу.
[01:23:49.720 --> 01:23:59.720]  По полум возрасту, по куче параметров, там я не знаю, десять параметров я хочу.
[01:23:59.720 --> 01:24:04.720]  Нельзя это делать. Плохая идея.
[01:24:04.720 --> 01:24:11.720]  Что делать?
[01:24:11.720 --> 01:24:24.720]  Переносим отсюда?
[01:24:24.720 --> 01:24:27.720]  Эластик Сирч есть, конечно.
[01:24:27.720 --> 01:24:30.720]  Да, но как ты его будешь...
[01:24:30.720 --> 01:24:33.720]  Эластик Сирч, поисковый биржок.
[01:24:33.720 --> 01:24:36.720]  Подожди, над чем ты будешь искать?
[01:24:36.720 --> 01:24:40.720]  У тебя их баз, я не знаю, десять тысяч.
[01:24:40.720 --> 01:24:45.720]  У нас же десять тысяч шардов.
[01:24:45.720 --> 01:24:52.720]  Да, ты очень правильно, хорошо, удобно подходи.
[01:24:52.720 --> 01:25:00.720]  Нет, если вы хотите просто принести это в SQL, то я вам сейчас придумаю историю с графами поверх этого.
[01:25:00.720 --> 01:25:07.720]  SQL вам не поможет.
[01:25:07.720 --> 01:25:16.720]  Каждая половина ищет по имени, вторая половина ищет с фильтрами. Часто пользуются?
[01:25:16.720 --> 01:25:19.720]  Окей, хорошо, тогда я прихожу в следующее.
[01:25:19.720 --> 01:25:30.720]  Менеджер приходит на отвечение и говорит, а я хочу, слушай, сделай мне сервис, по которому я могу находить связи между друзьями.
[01:25:30.720 --> 01:25:36.720]  И ты такой графовая нужна. И переносишь все в графовую?
[01:25:36.720 --> 01:25:55.720]  Ну да. Ну ложится, в SQL все можно хроить, но неудобно.
[01:25:55.720 --> 01:26:06.720]  Ну подожди, здесь у меня были анкетки, понимаешь, то есть подожди, вот здесь вот каждая запись была переменной длины.
[01:26:06.720 --> 01:26:20.720]  И ты вот собираешься с этой SQL положить?
[01:26:20.720 --> 01:26:49.720]  Так, подождите, если вы собираетесь свести здесь поисковый индекс, то что, вы собираетесь хранить данные в двух местах одновременно?
[01:26:49.720 --> 01:27:05.720]  Ну на самом деле думайте правильно. Инструмент, паттерн, я не знаю, подход называется денормализация.
[01:27:05.720 --> 01:27:19.720]  Так, так, так, еще пять минут внимания, я вас отпускаю. Итак, денормализация.
[01:27:19.720 --> 01:27:28.720]  Переименной. Зови это избыточность.
[01:27:28.720 --> 01:27:37.720]  Суть принципиально важна. Внимание, запоминаем. Мы храним в высоконагруженных системах, крупных проектах, сложных проектах.
[01:27:37.720 --> 01:27:45.720]  Мы храним данные не так как их удобно хранить, а так как их удобно отдавать в первую очередь.
[01:27:45.720 --> 01:27:53.720]  Потому что отдать данные сложнее, чем сохранять. Подготовить данные к отправке сложнее.
[01:27:53.720 --> 01:28:00.720]  И в крупных системах ваши имя, фамилия пользователя могут храниться в 20 разных местах.
[01:28:00.720 --> 01:28:13.720]  Отдельно в поисковом индексе, отдельно в индексе для статистики, отдельно в сервисе кто ходил на мою страничку, отдельно в сервисе комментарии и так далее, и так далее, и так далее.
[01:28:13.720 --> 01:28:32.720]  Нет. Да. Джоины в высоконагруженной системе это зло. Джоинов нет в крупных проектах.
[01:28:32.720 --> 01:28:42.720]  Потому что когда ты сталкиваешься с любой историей, или когда ты перекладываешь... Вообще Джоин перекладывает на базу данных подготовку для тебя информации.
[01:28:42.720 --> 01:28:47.720]  Это плохо. Ты не контролируешь как только она работает. Если ты ее сам не написал.
[01:28:47.720 --> 01:29:05.720]  Нормализация? Нормализация делает хранение данных, то есть нормализация для чего служит? Так чтобы тебе данные не дублировались в базе данных.
[01:29:05.720 --> 01:29:19.720]  Хорошо. Вот короче, красота и высоконагруженная система, а красота в высоконагруженной системе в другом.
[01:29:19.720 --> 01:29:46.720]  Как и для чего? С чем? Прости. Да, есть озера и хранение данных, есть еще куча всего.
[01:29:46.720 --> 01:29:59.720]  Вопрос в том, сколько времени ты можешь себе позволить на то, чтобы получить из этого озера данных ответ? Из этого хранилища ответ?
[01:29:59.720 --> 01:30:09.720]  Ты можешь себе позволить тебе час подождать? Бизнес-аналитик может. Запустил запрос, пошел обедать. А пользователь? Нет.
[01:30:09.720 --> 01:30:21.720]  Короче, ребята, именно в силу того, что когда мы работаем в интернете с IT-шкой, с пользователем и так далее, мы должны очень быстро получить ответ.
[01:30:21.720 --> 01:30:31.720]  Мы должны этот ответ максимально заранее подготовить. Мы должны максимально подготовиться к тому, чтобы отдать ему ответ максимально быстро.
[01:30:31.720 --> 01:30:46.720]  У вас может быть ситуация, когда у вас есть фильтр, а есть другая система, вы можете хранить данные отдельно по каждому фильтру. Даже так, в принципе, потенциально нормально.
[01:30:46.720 --> 01:31:00.720]  Как ты будешь это менять? Вот на этот вопрос ты нам ответишь в следующий раз.
[01:31:00.720 --> 01:31:16.720]  Если мы вот так вот взяли данные и распределили их по всей системе, так чтобы подготовили их, так чтобы их было максимально быстро и удобно отдать пользователю по запросу, а теперь приходит чувак, чьи это данные?
[01:31:16.720 --> 01:31:22.720]  И меняет, и выходит замуж. У него фамилия должна поменяться.
[01:31:33.720 --> 01:31:36.720]  Ты даже не знаешь в каком количестве мест.
[01:31:46.720 --> 01:31:54.720]  Все, ребят, на этот вопрос вы мне ответите в следующий раз.
