[00:00.000 --> 00:12.720]  значит в прошлый раз вы с вами остановились на том что стали решать рекурренты линейные вот
[00:12.720 --> 00:20.840]  но впрочем можно вот сегодня мы попробуем их решить еще раз да казалось бы зачем особенно
[00:20.840 --> 00:25.040]  с учетом того что у нас прошлый раз была неплохая симптомика да и забегай вперед сегодня лучшая
[00:25.040 --> 00:30.880]  симптомику мы не получим но вот но оказывается есть фишка да новую симптомику мы не получим
[00:30.880 --> 00:37.200]  а константу в лице количество фуриешек которые мы там будем запускать мы улучшим причем более
[00:37.200 --> 00:44.280]  того возможно вот причем атака у нас пойдет немножко с другой стороны поэтому начнем мы вот
[00:44.280 --> 00:51.040]  с чего вот иногда часто на вашем жизненном пути встречается динамическое программирование бывает
[00:51.400 --> 01:05.600]  и часто иногда вот иногда формулы могут выглядеть замечательно так вот там еще
[01:06.240 --> 01:22.640]  нет вот и часто так то есть и так и часто у нас динамика начинает выглядеть примерно следующим
[01:22.640 --> 01:36.040]  образом дп и т равно сумме допустим мы сейчас я от балды что-нибудь напишу такое допустим
[01:36.040 --> 01:49.960]  р и т плюс сумма по всем там g от нуля до и минус один дп допустим житая с и минус житая
[01:49.960 --> 01:58.440]  ну пока и динамика выглядит как та которая встречается часто да по факту не очень но
[01:58.440 --> 02:04.480]  соответственно и вот сказать такая ситуация хочется эту динамику посчитать то есть если
[02:04.560 --> 02:09.600]  хотите хочется изобрести пятую оптимизацию динамическом программировании ну какие
[02:09.600 --> 02:17.660]  оптимизации в дп мы знаем вообще ну не мы с вами вообще вот то что да есть конечно
[02:17.660 --> 02:22.760]  до флагман конечно конверс халтрик действительно также есть оптимизация кнута есть разделяй
[02:22.760 --> 02:28.760]  властва есть оптимизация лямбда да ну мы с вами по вот так мы с вами пока по моему не знаем
[02:28.760 --> 02:37.080]  ничего из этого нет вышка ну тая разделяй властва вроде как и обсуждали до до не обсуждали вот
[02:37.080 --> 02:44.300]  нет вот про кодекс халтрик понятно как бы для этого нужно в геометрию пойти ну да вот нанесу вот
[02:44.300 --> 02:51.880]  но давайте сразу изобретем пятую оптимизацию вот там крыша еще одной но это не то вот то есть
[02:51.880 --> 02:58.680]  пятую оптимизацию оптимизацию будем звать ее оптимизация фурье вот дай ну не по имени
[02:58.680 --> 03:05.400]  французского математика который вел 18 веке конечно вот итак вот спрашивается как бы это
[03:05.400 --> 03:12.840]  посчитать быстрее чем за квадрат ну для этого как всегда кто-то для кто-то для решения задачи
[03:12.840 --> 03:19.600]  запретает комплексные числа а мы изобретем формальные степенные ряды да мне что-то страшно
[03:19.600 --> 03:26.320]  употребляется в сочетании производящие функции вот а вот формальные степенные ряды все понятно
[03:26.320 --> 03:32.200]  все это картинка все никто ничего не обязан ничего никуда не сходится и вообще кайф значит
[03:32.200 --> 03:38.320]  давайте так и изобретем давайте вот скажем что дп рц по дп рц мы изобретем прям формальный
[03:38.320 --> 03:50.120]  степенный ряд например да ой например вот так и скажем что r от x это у нас будет ну допустим
[03:50.120 --> 04:00.920]  r 0 плюс r 1 на x плюс r 2 x квадрат плюс r 3 x кубе плюс и так далее а ну плюс и так далее дать
[04:00.920 --> 04:10.440]  бесконечный ряд аналогичным образом мы вводим цет икс ну понятно даться 0 плюс ц1 икс плюс
[04:10.440 --> 04:23.320]  ц2 икс квадрат плюс ц3 икс кубе плюс и так далее и конечно его величество дп от икс шать такое ну
[04:23.320 --> 04:32.440]  так и пишем дп 0 плюс дп 1 x плюс дп 2 на x квадрат плюс там дп 3 на x кубе да на всякий случай скажем
[04:32.440 --> 04:37.600]  что вот дп там допустим вот это вот дп второе и дп вот квадрат из кубчика второе это у меня
[04:37.600 --> 04:45.640]  сейчас одно и то же вот значит вот изобретаем такую штуку чем она нам поможет теперь давайте
[04:45.640 --> 04:53.040]  просто запишем это равенство в терминах формальных степенных рядов чем не получится
[04:53.040 --> 05:04.040]  ну на самом деле да да единственное кстати да только единственная оговорщика что чтобы это
[05:04.040 --> 05:16.040]  было верно нам придется сказать что вот эта штука должна быть равна нулю конечно нет а не эта штука
[05:16.040 --> 05:27.600]  а какая какая это хорошо давайте вот это нет смотрите как ну во первых для вот этого равенства
[05:27.600 --> 05:33.160]  она ни на что не повлияет потому что обратить внимание ни одного ц0 не использованы а во вторых
[05:33.160 --> 05:39.880]  смотрите то есть а во вторых давайте вот запишем вот это равенство допустим мы говорим что дп равно
[05:39.880 --> 05:53.200]  r плюс с умножить на дп вот прям так и напишем да то есть вот так опять что-то не работает
[05:53.200 --> 06:06.520]  нет ну не совсем так нет ну ну где нет да вот тут парадокс на самом деле можно можно запутаться
[06:06.520 --> 06:12.280]  кажется что степень не сошлись она самом деле не сошлись но не сошла но кое-что здесь все-таки
[06:12.280 --> 06:27.400]  не сошлось в таком виде нет нет ну вот хотя нет нет хотя не не пока все нормально нет все нет все
[06:27.400 --> 06:33.080]  на самом деле нормально да то есть там да ц ц равно нет ц равно нулю нам не особо принципиально на
[06:33.080 --> 06:40.400]  самом деле пока но то есть так вот это утверждение точно верно для любых ну просто сейчас у нас будут
[06:41.120 --> 06:45.820]  нет на самом деле да совершенно вы правы при яр sucked another получится но нам и не нужно
[06:45.820 --> 06:56.240]  делить надце да потому что на самом деле заметил что дп равно и делить на 1 минус ц то есть
[06:56.240 --> 07:01.720]  зап naszych фактически нам чисто для по-техническим то есть чисто для технических нужд на самом деле
[07:01.720 --> 07:09.900]  может понадобилось чтобы ц было равно нулю просто чисто чтобы можно было нормально поделить вот
[07:09.900 --> 07:19.020]  Но правда есть еще одна причина, зачем нам нужен 0. Дело в том, что в этом произведении как бы у вас
[07:19.020 --> 07:25.860]  по идее, когда вы тут пишете произведение dPiT равно вот этой вот тоже вот rIt плюс вот эта сумма,
[07:25.860 --> 07:31.820]  но в этой сумме еще должно появиться тогда согласно определению произведения dPiT умножить на
[07:31.820 --> 07:40.700]  c0. Поэтому если бы вы тут не написали 0, у нас там были бы проблемы. Вот, но что для нас приятно?
[07:40.700 --> 07:49.140]  Приятность для нас заключается в том, что у нас есть нод, что теперь у нас dPi равно r поделить на
[07:49.140 --> 07:54.740]  1 минус c. Ну и фактически, то есть если у вас задание нод, ну теперь тут два варианта, либо вам
[07:54.740 --> 08:04.380]  нужна, допустим, для 10 в пятый раз вычислить 10 в пятый вот таких значений, и тогда мы уже
[08:04.380 --> 08:11.420]  просто знаем, как делить на р членам на р член. Ну вот, то есть это для нас не проблема. Ну или
[08:11.420 --> 08:19.780]  альтернативная версия могла бы быть этой задачей. А скажите нам, пожалуйста, а чему равно dPi,
[08:19.780 --> 08:33.940]  от там какой-то n, где n равно 10 в девятый или 10 в восемнадцатый? Да, казалось бы, вот, казалось бы,
[08:33.940 --> 08:44.660]  такую задачу мы еще не решали. Да, мы действительно не решали. Но очень хочется. А хочется и решать,
[08:44.660 --> 08:49.660]  вот почему. Потому что давайте вспомним, что-то мы там говорили про линейные рекурренты,
[08:49.940 --> 09:00.700]  а что такое линейные рекурренты? Это такая последовательность, помним, а0, а1, а2, а3, а4 и
[09:00.700 --> 09:08.220]  какой-то там бла-бла-бла, что там каждое а и плюс, допустим, и плюс катое равно, как мы помним,
[09:08.220 --> 09:21.180]  у нас там чему оно равно? Чему оно равно? Там c0 на it, плюс c1 на а и плюс 1, плюс c2 на а и плюс
[09:21.180 --> 09:38.100]  2, плюс и так далее, плюс там c, какой-то там, к-1, а и плюс к-1. Вот что-нибудь такое. А ведь смотрите,
[09:38.100 --> 09:44.860]  что можно было бы сделать. То есть как еще можно было бы подойти? Потому что на самом деле возникает
[09:44.860 --> 09:49.540]  такое следующее ощущение. А это что же на самом деле хочется записать в виде формальных степенных
[09:49.540 --> 09:58.900]  рядов, правда? Ну вот, например, так и ввести, то есть допустим, а от x равно, ну как всегда,
[09:58.900 --> 10:10.740]  а1x плюс а2x квадрат, плюс а3x кубе, плюс и так далее. Вот, и тогда мы неожиданно замечаем,
[10:10.740 --> 10:18.860]  то есть мы неожиданно замечаем, что вот это утверждение можно записать кое в каком виде.
[10:18.860 --> 10:27.260]  В каком? Ну заметим, что можно ввести какой-нибудь правильный многочлен. Давайте я даже такой,
[10:27.260 --> 10:37.500]  такой c штрих, я его назвал, нет, c штрих не надо, это производное. Вот, c с волной. Догадываетесь,
[10:37.500 --> 10:44.620]  почему с волной? Да, потому что очевидно, чтобы он имел отношение к а, его придется
[10:44.620 --> 10:53.820]  поразворачивать. Так, спрашивается, что же я должен здесь сделать? Ну, давайте,
[10:53.820 --> 11:01.140]  давайте-ка я так и сделаю. Я так и скажу, пусть у меня это будет c0 х витой, пардон, вкатой,
[11:01.140 --> 11:15.780]  плюс ц1 х в к-1, плюс и так далее, плюс ц к-1 на х. Да, я намеренно в ц тильды не пишу свободный
[11:15.780 --> 11:26.860]  член. Вот, и тогда кажется, и тогда у меня полное ощущение, что я могу написать что-то вроде а равно
[11:26.860 --> 11:49.540]  а умножить на ц. А вот не совсем, не совсем прям тупо первая к-членов, но вот, потому что да,
[11:49.540 --> 11:55.580]  то есть действительно, заметим, что, то есть действительно, допустим, каждый какой-нибудь
[11:55.580 --> 12:03.420]  член с g с индексом g больше либо равно к, вроде как будет здесь посчитан правильно, согласны? Но
[12:03.420 --> 12:09.620]  есть маленькая проблема, что есть еще члены а0, а1, а2 и так далее, которые тоже будут пересчитаны,
[12:09.620 --> 12:18.060]  и там будет посчитано что-то нетривиальное. Поэтому нам придется кое-что сделать. Вот,
[12:18.060 --> 12:23.620]  но с другой стороны посчитать это достаточно легко, можешь в явном виде запустить fft и посчитать,
[12:23.620 --> 12:32.540]  к чему будет равно а умножить на ц с крышечкой, правда? Что? Мы знаем, на этом, на уровне первых,
[12:32.540 --> 12:40.260]  как коэффициентов мы знаем, потому что они это инициализируют рекурренту. Вот, но получится у
[12:40.260 --> 12:53.180]  нас в итоге какой-то шаманский многочлен p. Вот, то есть вот такая вот красота. И вот что-то знакомое,
[12:53.180 --> 12:59.660]  да? То есть опять получается, действительно, что, то есть действительно можно сказать,
[12:59.660 --> 13:16.660]  что a равно p делить на 1 минус c. То есть красота. Но видим, что в обеих этих задачах, то есть суть
[13:16.660 --> 13:21.500]  сводится к следующему, да. То есть, по крайней мере, здесь мы вообще понимаем, что дано вот
[13:21.500 --> 13:26.540]  такое частное, то есть дан степенной ряд, заданный вот таким отношением, найдите, пожалуйста,
[13:26.540 --> 13:42.940]  у него коэффициент номер 1018. То есть вот такая задача. Что там, что там. Да, да, да, да, что очень,
[13:42.940 --> 13:53.460]  очень приятно. Да, два многочлена конечны. Более того, даже мы себе тогда же и скажем отдельно,
[13:53.460 --> 14:01.380]  что по факту у нас задача. Надо найти, то есть вот у нас есть два многочлена p и q, допустим,
[14:01.380 --> 14:07.260]  конечная. И надо найти какой-нибудь n коэффициент, где n, какой-нибудь достаточно
[14:07.260 --> 14:15.900]  большое. Это вот так называется. Вот это так вот обозначается. И нам вот очень хочется найти
[14:15.900 --> 14:23.620]  конкретный n коэффициент. Вот. Ну, мы с вами в прошлый раз обсуждали, Дашу, можно там, то есть да,
[14:23.620 --> 14:28.100]  можно там пытаться это ввести с помощью теоремы Гамильтона Крэйли и вообще Чутацкой выводить.
[14:28.100 --> 14:35.780]  Ну вот, ну правда, там потом вывести потом, что ответ это надо взять многочлен x в n и там взять
[14:35.780 --> 14:41.980]  от него отделение, взять остаток этого деления на там какой-то вот, вот едва ли не вот такой вот
[14:41.980 --> 14:50.260]  многочлен. Ну ладно, почти такой там, во-первых, плюс один, во-вторых, там, ну не суй. Вот. Но это,
[14:50.260 --> 14:54.700]  к сожалению, маленькая, то есть это там даст нам асимптотику какую-то там каллоген, но,
[14:54.700 --> 15:02.300]  к сожалению, оно потребует от нас умения делить еще многочлены в процессе. Но на самом деле есть
[15:02.300 --> 15:14.420]  более крутой лайфхак. Смотрите какой. Вместо того, чтобы делить, смотрите, мы подомножаем
[15:14.420 --> 15:26.620]  и домножим мы это на что-то такое типа сопряженного. Вот и числитель и знаменатель мы домножим на q-x.
[15:32.300 --> 15:49.020]  Да, придется потратить лишние две ффт. Вот. Но спрашивает, а чем приятен q-x? Да, действительно,
[15:49.020 --> 15:54.060]  возникает маленькое приятное свойство. То есть если внимательно посмотреть на это, то легко понять,
[15:54.060 --> 16:03.220]  что здесь коэффициенты при нечетных степенях нулевые. То есть в принципе я могу заявить,
[16:03.220 --> 16:11.620]  то есть это равно какой-то многочлен допустим, ну здесь такого условия нет, то есть это будет
[16:11.620 --> 16:20.420]  какой-то многочлен r поделить на какой-то многочлен t. Причем t от x квадрат. Вот, понятно, да?
[16:20.420 --> 16:30.820]  Ну тогда идея такая, если вы делите на многочлен все степени которого четные, то на самом деле
[16:30.820 --> 16:36.780]  заметим, что и этот многочлен можно разбить на два. То есть применяем прям вот фурьешный разделяй
[16:36.780 --> 16:47.060]  властой классический. То есть давайте скажем, что это r0 от x квадрат плюс x на r1 от x квадрат.
[16:47.060 --> 17:04.660]  Вот такая красота. Теперь заметим, что оказывается, если я теперь могу разнести эти
[17:04.660 --> 17:10.300]  деления, потому что если я поделю r0 на t, то я получу опять же многочлен, в котором все степени
[17:10.300 --> 17:17.780]  четные. А если я поделю xr1 от x квадрат вот это на это, то я получу многочлен, в котором все степени
[17:17.780 --> 17:25.900]  наоборот нечетные. То есть вывод очень простой. То есть получается, что это равно, я даже тут
[17:25.900 --> 17:37.540]  честно напишу, то есть это равно x в степени n пополам от r0 от x делить на, вот тут я пожалуй даже
[17:37.540 --> 17:53.340]  t в виду. Чем мы и занимаемся на самом деле. Да, именно это мы и делаем. Вот, то есть это,
[17:53.340 --> 18:00.460]  то есть, а именно, то есть если n делится на два, то мы оставляем только r0, а если не делится,
[18:00.460 --> 18:15.500]  то здесь получается t в степени n-1 пополам r1 от t делить на t от t. Причем смотрите, какая еще
[18:15.500 --> 18:22.060]  приятность. Приятность заключается в том, что размеры многочлена вот тут q и тут вот эти r0 и t,
[18:22.060 --> 18:30.180]  они не увеличиваются. Потому что обратите внимание, если тут допустим размер k и тут
[18:30.180 --> 18:37.980]  размер k, тогда здесь размер 2k и тут 2k, а потом мы из этого наращения взяли только половинку.
[18:37.980 --> 18:50.020]  То есть обратите внимание, то есть мы от n к n пополам перешли, получается, за уже не деление,
[18:50.020 --> 18:56.180]  как было раньше. То есть что там нет, у нас когда при быстром возведении в степени у нас что было?
[18:56.180 --> 19:04.980]  У нас было одно умножение и одно взятие по модулю, а взятие по модулю у нас там внутри
[19:04.980 --> 19:11.940]  себя требовало, по-моему, две или три fft, не считая рекурсии. Здесь же никакой рекурсии нет. Здесь
[19:11.940 --> 19:22.460]  вы сделали ровно две fft. Причем в качестве добивки, в качестве добивки можно заметить,
[19:22.460 --> 19:29.260]  что вот эта fft она на самом деле пишется еще достаточно оптимизированно, потому что отдельную fft
[19:29.260 --> 19:45.620]  для q от x и q от –x писать не надо. По факту да. Вам достаточно сделать fft только для p и q и все.
[19:45.620 --> 20:03.300]  А потому что что такое fft? Fft – это значение в точках. Причем точки у нас это такие точки,
[20:03.300 --> 20:08.860]  что для каждой точки wn в степени g, верно, что минус wn в степени g у нас тоже в списке есть.
[20:08.860 --> 20:25.220]  Вот поэтому получается, что отдельные fft для q-x читать не надо. Ну типа да, да, по кругу сдвинуть,
[20:25.220 --> 20:37.820]  по сути, да. А как бы перевернуть круг и повернуть 180 градусов и вот так вот перевернуть,
[20:37.900 --> 20:45.340]  это примерно одно и то же. Ну то есть да, по сути, да, надо там кучу n пополам пар,
[20:45.340 --> 20:56.700]  как они просто поменять местами, это да, но это одно и то же. Так что вот.
[20:56.700 --> 21:11.180]  А почему? Ну потому что заметим, что в оба этих вращениях здесь представляется x2. Когда вы
[21:11.180 --> 21:16.620]  будете делить r0 на t, вот например столбиком, вы будете получать только многочисленные с
[21:16.620 --> 21:21.700]  коэффициентами при счетных степенях. А когда вы вот этот вот часть будете делить на эту,
[21:21.700 --> 21:26.620]  вы получите только на нечетных степенях. Поэтому, скажем, чтобы узнать коэффициент
[21:26.620 --> 21:33.020]  конкретно при n члене, вам достаточно делать только одно из этих делений. То есть вот такой
[21:33.020 --> 21:40.540]  вот неожиданный лайфхак. Вот скажем так, опытные люди утверждают, что по константе
[21:40.540 --> 21:48.260]  это может оказаться неплохо быстрее. Но причины в общем-то очевидны. И рекурсии нет вообще,
[21:48.260 --> 22:00.500]  и в какой-то ффтшку вы сэкономили. Ну то есть вам придется, конечно, сделать там, понятно,
[22:00.500 --> 22:05.340]  что две обратные ффтшки вам придется сделать, тут ничего не поделаешь. Но с другой стороны,
[22:05.340 --> 22:14.300]  и прямых ффтшек вам придется сделать две, а не три. Так что вот такой вот приятный хак. Вот так
[22:14.300 --> 22:26.420]  может быть даже сильно проще будет. Так, есть ли тут вопросы? Вот. Хорошо. Так, ну если тут
[22:26.420 --> 22:33.180]  вопросов нету, то значит тогда переходим к, видимо, заключительной части разговора по
[22:33.180 --> 22:39.340]  ффт, по крайней мере, с большой, там, глобальных разговоров по ффт. Это что это будет у нас?
[22:39.340 --> 22:45.580]  Ну если я ничего не признал, то придется говорить про многомерное преобразование ффт.
[22:45.580 --> 23:02.220]  И так. Значит, многомерное. Значит, о чем разговор? Ну, мало кто знает,
[23:02.220 --> 23:13.380]  что на самом деле многочлены бывают не только от одной переменной. Слышали о таком? Да, слушайте.
[23:13.380 --> 23:30.940]  Чего? Ну мы-то не было. Ну мы-то не было? Когда? А ты не на тот мотан ходишь, да? Ага. Или, о,
[23:30.940 --> 23:38.140]  извините, я случайно на третий курс зашел. Ну мало ли. Ладно. Ну ладно, неважно. Значит,
[23:38.140 --> 23:47.260]  смотрите. Значит, идея такая. У нас будет жел-бел-атекс-ыгр. То есть, ну, типичный
[23:47.260 --> 24:10.660]  многочлен от двух переменных. Ну так и выглядит. Вот такая вот красота благодать.
[24:10.660 --> 24:33.780]  Вот. Ну, то есть, типичный его вид. Допустим, 2ху, плюс там, я не знаю, 5х2у4-7ху3, плюс 8х7-5. Ну вот.
[24:33.780 --> 24:42.380]  Ну или 57. Вот. Неважно. Вот. Ну это еще, конечно, мало коэффициентов, но обычно, конечно,
[24:42.380 --> 24:51.580]  удобно вообразить себе многочлены, а в виде вот такой таблички n на m. Вот такой таблички n на m.
[24:51.580 --> 25:05.020]  Вот. Ну и вытекает такой, что иногда с этими многочленами тоже хочется что-то шаманить.
[25:05.020 --> 25:11.780]  А именно, вот, допустим, два таких многочлена размера n на m очень хочется перемножать между
[25:11.900 --> 25:19.940]  собой. Ну, то есть, для начала хочется складывать и вычитать. Ну вот. Но складывать и вычитать,
[25:19.940 --> 25:40.100]  ну, наверное, каких-то вопросов нету, правда? Это не проблема. Вот. Вот хочется такие многочлены
[25:40.100 --> 25:56.420]  перемножить. Как же это сделать? Ну, FFT. Ну да-да-да-да. Знаете, да. Классическая
[25:56.420 --> 26:04.740]  ситуация в сервисе. Это называется, да, называется, там дается какая-то задача. Вы решаете,
[26:04.740 --> 26:09.900]  вы набираете по ней 36 баллов, а потом смотрите, что ваш сосед набрал 86.
[26:10.860 --> 26:20.620]  А как ты набрал 86? Рекурсия. Нет, я реальную историю рассказываю. Абсолютно реальная история,
[26:20.620 --> 26:26.940]  причем для справочки, допростите меня этот товарищ, фамилию которого я не запомнил,
[26:26.940 --> 26:38.020]  но это реально low name. А я, извините за нескромность, был кандидатом межнара. Вот. Вот. Ну, просто и так.
[26:38.020 --> 26:55.260]  Ну, только единственное, да, можно. Да, то есть именно это, видимо, именно это на вооружение
[26:55.260 --> 27:00.180]  берут действительно аплодеты. Там уже не кандидаты в межнара, а просто уже реальные межнара. Там
[27:00.180 --> 27:06.300]  золотые, которые просто пишут это, у которых лозунг тут простой. Двумерный FFT не нужен.
[27:06.300 --> 27:13.900]  Действительно, казалось бы, все прекрасно сводится к одномерному FFT. Каким образом? Ну,
[27:13.900 --> 27:20.900]  просто давайте введем какой-нибудь А с крышечкой. Вот. Ну, крышечка. Знаете,
[27:20.900 --> 27:26.780]  польский режиссер такой есть, да? Ну, мы уже обсуждали, да. Вот. Какой-нибудь ватлов крышечка,
[27:26.780 --> 27:34.380]  вот это вот, да. Вот. Значит, соответственно. И давайте скажем, что А от какого-нибудь Т так
[27:34.380 --> 27:42.140]  и будет равно, то есть действительно сумма-сумма, А ЖКТ на Т в степени, ну, хотелось бы так,
[27:42.140 --> 27:50.940]  конечно, в наглую сказать, ЖКМ. В принципе, многочлен так задать можно. Но вы уже догад... Нет,
[27:50.940 --> 28:02.620]  М. Почему? А, нет, Н. Ладно, в таком формате, конечно, Н. Да, согласен. Вот, пожалуйста. Вот. Но,
[28:02.620 --> 28:11.220]  как говорится, все это, конечно, кайф, пока вы не захотите А с крышечкой умножать на Б с крышечкой.
[28:11.220 --> 28:26.580]  Почему? Потому что, к сожалению, когда тут степени сложатся, то вы уже, вот, то как бы их сумма
[28:26.580 --> 28:32.700]  жишек может вполне себе оказаться больше либо равно N. Поэтому распарщить вот это вот число,
[28:32.700 --> 28:39.780]  как сказать, что там вот это это остаток, а это это частное отделение, вы уже не сможете. Да.
[28:39.780 --> 28:46.180]  Поэтому есть, конечно, такой читерский вариант, два нот. То есть, просто сделать два и не париться.
[28:46.180 --> 28:52.940]  Нет, в принципе, это помогает. Да, в общем-то, надо признать, что чуть менее, чем везде,
[28:52.940 --> 29:00.060]  где вам потребуется двумерный ФФТ, в общем-то, можно сделать вот это. Вот. Но, тем не менее,
[29:00.060 --> 29:07.380]  тем не менее, можно попробовать сделать и кое-что другое. Как бы, по асимптотике, на самом деле,
[29:07.380 --> 29:15.420]  лучше не станет, но по константе есть шанс. И по точности, кстати, тоже. Вот. Вот. Какой
[29:15.420 --> 29:21.980]  альтернативный вариант есть? Ну, потому что вместо того, чтобы сводить эту штуку к одномерному ФФТ,
[29:21.980 --> 29:32.940]  мы попробуем на самом деле применить ту же самую логику только в двумерном виде. А именно, мы
[29:32.940 --> 29:41.620]  попробуем каждый многочлен от x и y задавать в виде n умножить на m значений в точках вида w
[29:41.620 --> 29:54.060]  n в степени g, w m в степени k. То есть, g, как всегда, от 0 до n минус 1, k равно от 0 до m минус 1.
[29:54.060 --> 30:12.660]  Вот такой вот красота, да? Пока видно, да? Так, что у нас еще? Вот. Ну и что-то еще. В, w m в степени g,
[30:13.180 --> 30:25.780]  k, 8, да. Ну ладно, тут понятно. Вот. Ну теперь вот возникает вопрос. А как бы это сделать? Главное,
[30:25.780 --> 30:31.580]  мало того, как это сделать, так еще и возникнет естественный вопрос, а можно ли будет потом
[30:31.580 --> 30:51.140]  этот многочлен восстановить? Ну по сути, да. Только это надо очень аккуратно расписать.
[30:51.140 --> 30:57.260]  Действительно, идея заключается в следующем, что у нас есть многочлен от x и y.
[30:57.260 --> 31:25.860]  Вот. Мало кто знает, но на самом деле он равен вот чему. Вот. То есть, его можно представить
[31:26.100 --> 31:41.060]  в таком красивом миде, где ожитое это многочлен от одной переменной. Видно, да? Вот. И тут возникает
[31:41.060 --> 31:52.380]  такая идея. Ну вот. Теперь возникает такая идея, что мы можем сделать себе пол работы на пути к
[31:52.380 --> 31:59.700]  этому великому счастью и попробовать. Действительно, вместо того, чтобы, ну, то есть, да, у нас есть
[31:59.700 --> 32:03.460]  коэффициенты каждого этого многочлена. Что это за коэффициент? То есть, если у нас есть табличка
[32:03.460 --> 32:10.340]  вот этого, да, n на m, то тогда получается, что коэффициенты каждого многочлена – это просто
[32:10.340 --> 32:16.940]  ожитое строчка соответствующего многочлена. Да? Так можно в ней же попытаться запустить в
[32:16.940 --> 32:28.660]  каждой строчке честно запустить FFT. Что получится? Получится набор многочленов A от X WM в степени.
[32:28.660 --> 32:52.820]  Так, нет. А, ну да. Так, только что-то не то. Так, ну да. То есть, если мы найдем действительно
[32:52.820 --> 32:57.500]  тут значение в точках, то есть, как бы тогда получится следующее, тогда давайте думать,
[32:57.500 --> 33:03.660]  что это нам даст. Если в каждом ряду. То есть, подставив вместо игрока WM в степени K,
[33:03.660 --> 33:18.740]  то получится вот такая штука. J равно 0 от n-1. Получится ожитое только от WM в степени K на X
[33:18.740 --> 33:25.100]  в степени J. То есть, смотрите, какая приятность. То есть, дело в том, что после того, как мы
[33:25.100 --> 33:42.740]  сделали FFT по строчкам. Давайте я тут так и напишу. FFT по строчкам. Получается, что мы в каждой
[33:42.740 --> 33:52.100]  строчке в K столбце находится вот такое значение. Правда? Видно, да? То есть, получается, что у нас
[33:52.100 --> 33:59.860]  образовалась M многочленов от переменной X. И причем коэффициенты этого многочлена находятся
[33:59.860 --> 34:09.060]  тупо в K столбце в нужном порядке. Удобно, да? Но тогда получается, что для того, чтобы вместо
[34:09.060 --> 34:16.940]  X тоже подставить вот теперь WM в степени X. То есть, надо просто сделать FFT по столбцам.
[34:16.940 --> 34:33.380]  Прям так и пишем. WM в степени J, WM в степени K. Вот. Многие будут писать, чему оно равно. То есть,
[34:33.380 --> 34:40.060]  видите, оказывается, чтобы сделать такое FFT, то есть, чтобы найти значение многочлена A в этих
[34:40.060 --> 34:47.580]  вот N умножить на M точках. Надо просто сделать N FFT по строчкам, а потом M FFT по столбцам. Ну,
[34:47.580 --> 34:51.500]  естественно, если реализовывать это именно в таком виде, то рекомендуется, конечно,
[34:51.500 --> 34:57.900]  перед второй фазой табличку транспонировать. Почему? Ну, потому что, напоминаю, у нас FFT
[34:57.900 --> 35:04.780]  отпадно работает именно когда у вас элементы идут в массиве подряд. Вполне, да? Более того,
[35:04.780 --> 35:08.900]  вот мне подозревает, что это может по константе работать лучше, даже может быть, чем единое FFT.
[35:08.900 --> 35:11.820]  А, кстати, давайте посмотрим, за костью точку это будет работать.
[35:11.820 --> 35:27.340]  Чего? Значит, давайте, да, M log, шо? Ну да, как это говоря, шо это за самолет, як, шо? Так, значит,
[35:27.340 --> 35:42.820]  смотрите, первый раз мы делаем N раз по M log M, а второй раз мы делаем M раз по N log N. Да. Ну,
[35:42.820 --> 35:52.340]  заметим, что это просто буквально равно NM log NM. Все, быстро на где-то придется умно. Ну,
[35:52.340 --> 36:00.060]  с другой стороны, заметим, что, причем более того, то есть, в принципе, кажется, это может даже
[36:00.060 --> 36:04.020]  чуть-чуть выигрывать, потому что, в принципе, когда вы делали один многощин, был размер NM,
[36:04.020 --> 36:17.500]  и единое FFT будет ровно за стоком. Вот. Ну, тут, конечно, не знаю, слабая надежда, что это будет
[36:17.500 --> 36:23.740]  работать быстрее есть, хотя, конечно, она сомнительная. Вот. Ну, тем более, что умножать,
[36:23.740 --> 36:30.860]  умножать на два, и там, и там придется, если что. То есть, как бы, слабая надежда у меня теплится
[36:30.860 --> 36:37.380]  только насчет того, что вот это вот целиком в кэш попадет с большей вероятностью, чем МН. Вот.
[36:37.380 --> 36:43.420]  Впрочем, вот. Поэтому, как бы, может, может, за счет этого будет какая-то там, вот, там,
[36:43.420 --> 37:04.780]  лучшая победа. Ух ты. А вот это мысль. Не, ну да, мысль, да. Причем там какой-то модуль,
[37:04.780 --> 37:10.340]  популярный типа 7 миллионов, на самом деле есть. Тоже такой, периодически, то есть, редко,
[37:10.820 --> 37:15.860]  но встречается. Это тоже фурежный модуль там какой-то. Вот. Да, спасибо, спасибо. Да,
[37:15.860 --> 37:19.700]  действительно. Хотя, на поверх он не такой уж и маленький. Он, по-моему, там не два линии,
[37:19.700 --> 37:24.980]  три на два, а там в какой-то двадцатый или что-то в этом роде. Поэтому. Или семь на два в двадцатый,
[37:24.980 --> 37:34.820]  или что-то в этом роде. Да, ну, в принципе, да, да, действительно. Давайте, да. Ага, скинем.
[37:34.820 --> 37:55.940]  Осталось только еще новую задачу придумать, да. А то, знаете, да. Ну, может. Ну, бывает,
[37:55.940 --> 38:02.180]  бывает. Нет, ну, дать можно все, что угодно. Вопрос просто, да. Главное, чтобы какую-нибудь
[38:02.180 --> 38:06.460]  олимпиаду это взяли. А то, знаете, там. А то, что-нибудь там, привередывая там координаторы на
[38:06.460 --> 38:10.620]  Код Форси, с вами что-нибудь скажешь, или что-нибудь такое задайте. Помните, там был какой-то пост у
[38:10.620 --> 38:16.860]  какого-то автора задачи, говорит, что вот у меня там редактором был Антон Трегуб, и вот лишь не
[38:16.860 --> 38:22.300]  полный перечень причин, по которому он отвергал мои задачи. Дальше список, по-моему, из двадцати
[38:22.300 --> 38:28.220]  вариантов. То есть, там это неинтересно, это легкая задача. Эта задача была в Петрозаводске такого-то
[38:28.460 --> 38:36.220]  в более усложненном виде. Там, ну, это все и так далее. То есть, это вот издевательство вообще. Да. Ну,
[38:36.220 --> 38:46.220]  то есть, ну, что делать? Ну, что делать? Ну, как бы, да. Чего? Только а то. Так вот, может, за счет этого
[38:46.220 --> 38:55.300]  Код Форси, собственно, и держит планку, на самом деле, за счет вот именно таких координаторов. Такая,
[38:55.300 --> 39:03.500]  они не просто не отвечают, они сидят и, собственно, гуглят по всем задачам, которые в базе у них. То есть,
[39:03.500 --> 39:13.900]  они же не отбалдыш вспоминают. А, ну, это я в 17-м году писал. Да, это интересно. А, все-таки сделал? А, классно.
[39:13.900 --> 39:28.540]  Нет, прям вообще все задачи. Ну, понятно. Нет, ну, супер-круто. А там прям вообще все задачи, да? А не прям это по пункту.
[39:28.540 --> 39:41.260]  Да, ну, понятно. Ну, весело-весело. Потому что было бы неплохо, на самом деле, даже с точки зрения учебной
[39:41.260 --> 39:48.100]  брать все задачи, которые были, еще и желательно протегировать по темам. Потому что преимущество было бы,
[39:48.100 --> 39:56.020]  просто, мне как преподу это интересно, на самом деле было бы. Чего? Нет, ну, не обязательно. Нет, там фишка в
[39:56.020 --> 40:03.880]  другом. Там, как бы, можно просто из таких задач можно нормальные учебные делать. Четкая тема. Ладно. Так,
[40:03.960 --> 40:12.680]  ладно, на то он и умник, как бы, да. Так, соответственно, да. Так вот, значит, ну, что тут хочется обратить? Да, у нас тут есть
[40:12.680 --> 40:20.480]  пока такой вот двумерный ФФТ. Но что в этом двумерном ФФТ приятно? Приятно тем, что, на самом деле, оно прекрасно
[40:20.480 --> 40:27.160]  обобщается. То есть, как видите, то есть, на самом деле, можно абсолютно так же сделать и трехмерное ФФТ,
[40:27.160 --> 40:37.120]  и четырехмерное, и пятимерное, и вообще сколько угодно мерное. Вот, ну, как бы, да. Действительно, как часто на нашем
[40:37.120 --> 40:44.520]  жизненном пути нам хочется сделать пятибергное преобразование фурии. Вот, а если вам входно, вот, ну,
[40:44.520 --> 41:04.360]  пятибергное, да. Чего? Ну, как-то, да, вот, получается. Нет, ну, с одной стороны, да, но с другой стороны, в этом
[41:04.440 --> 41:10.920]  месте вы на самом деле здесь тоже, если вы хотите именно умножать, то вы никуда не денетесь. Почему? Потому что дело в том, что
[41:10.920 --> 41:17.760]  перед умножением наручен, вам придется и по n, и по m тоже на два домножить. Поэтому домножение на два в степени вы не избежите.
[41:17.760 --> 41:24.920]  Но, тем не менее, н-мерное преобразование фурии вам очень может захотеться сделать.
[41:24.920 --> 41:41.520]  Ой, ну, д-мерное, господи. Вот, а причины есть. Вот сейчас я сформулирую задачу, в которой прямо руки будут
[41:41.520 --> 41:57.960]  чесаться, сделать д-мерное преобразование фурии. Если бы так топорно. Все еще круче. Нет, причем начало вообще не будет предвещать.
[41:57.960 --> 42:12.360]  Значит, смотрите, казалось бы, мы сейчас будем говорить о подмасочках. Ой, конечно, ой, мы с вами еще ЭДП на подмасочках не обсудили.
[42:12.360 --> 42:23.000]  Ну, значит, сегодня обсудим как раз. Нет, потому что будет как раз сегодня время, когда вот эти долги надо быстренько закрыть.
[42:23.600 --> 42:39.080]  Вот, смотрите. Значит, какая у нас тут идея возникает. То есть у нас есть какой-нибудь великий универсум, и в нем у нас элементы от 1 до, ну ладно, так и быть, d-1.
[42:39.600 --> 42:49.480]  Ну, d обычно не происходит чего-нибудь там, если 20-ти что ли, я не знаю. Может, что-нибудь еще в этом вроде. И у нас есть функции.
[42:49.480 --> 43:01.480]  Значит, мы работаем с функциями на подмножество. То есть у нас будет функция от 2 в степени u на r.
[43:02.480 --> 43:10.480]  Так, ну я думаю вам в законовом выражении 2 в степени u, да? Ну, то есть просто множество всех под множество u.
[43:11.480 --> 43:18.480]  Вот. Так вот. Вот у меня есть такие функции.
[43:25.480 --> 43:30.480]  Значит, что я хочу? Хочу сделать следующее.
[43:31.480 --> 43:36.480]  Значит, я хочу делать свертку.
[43:40.480 --> 43:47.480]  Свертка такая. Я хочу по двум таким функциям f и g посчитать функцию h.
[43:51.480 --> 43:55.480]  Только вот какую. h откаковывает под множество s.
[43:55.480 --> 44:13.480]  Оно должно быть равно сумме f от s-штрих умножить на g от s-два-штриха.
[44:14.480 --> 44:24.480]  Где s-штрих, s-два-штриха. Это тоже нот. Где у нас понятно, что s-штрих, s-два-штриха это подмножество u.
[44:25.480 --> 44:34.480]  И что самое важное теперь? s-штрих-ыть. s-два-штриха равно s.
[44:34.480 --> 44:44.480]  Вот. Чему равно ыть?
[44:46.480 --> 44:49.480]  Не, ну не совсем чему угодно.
[44:50.480 --> 44:57.480]  Стоп, стоп, стоп, не настолько. Нет, разности я не умею.
[44:57.480 --> 44:59.480]  А вот все остальное да.
[45:00.480 --> 45:07.480]  То есть именно в качестве ыть мы рассмотрим объединение, пересечение и симметрическую разность.
[45:09.480 --> 45:19.480]  Ну на уровне масочек, если бы это задавали масочками, то эти операции соответствовали бы в масочках or, end и xor.
[45:20.480 --> 45:28.480]  Вот. Вот такой вот красивый свертка мы хотим делать.
[45:32.480 --> 45:34.480]  Вот как же это сделать?
[45:37.480 --> 45:39.480]  Вот. Ну естественно хочется сделать fft.
[45:40.480 --> 45:42.480]  Ну очевидно же да.
[45:43.480 --> 45:50.480]  Так, ладно, первое что хочется сделать это сказать, что задача end это неинтересная задача.
[45:51.480 --> 45:54.480]  Почему она неинтересная? Да потому что она идентична or.
[45:55.480 --> 45:58.480]  Ну 0 на единичке поменять там во всех масочках и все в общем-то.
[46:00.480 --> 46:06.480]  А вот or и xor друг другу так просто не сведутся, их придется немножко по-разному делать.
[46:07.480 --> 46:11.480]  Но казалось бы, как же можно это делать?
[46:13.480 --> 46:15.480]  Делать можно следующим образом.
[46:20.480 --> 46:22.480]  Ну да. Казалось бы да.
[46:23.480 --> 46:25.480]  Ну какая у нас напрашивается идея?
[46:26.480 --> 46:28.480]  Идея напрашивается следующая.
[46:29.480 --> 46:34.480]  А давайте k заведем многочлен от d переменных.
[46:37.480 --> 46:41.480]  То есть давайте какой-нибудь составим такой многочлен.
[46:42.480 --> 46:47.480]  По f вы составим какую-нибудь, ну я не знаю, функцию.
[46:48.480 --> 46:50.480]  Какую?
[46:51.480 --> 46:53.480]  Ну давай кем-то.
[46:54.480 --> 46:56.480]  Так, что?
[46:59.480 --> 47:02.480]  Не, f с крыши, f с волной.
[47:03.480 --> 47:07.480]  Не, просто f большое я потом захочу использовать, потому что у меня ширина там.
[47:10.480 --> 47:13.480]  То есть допустим у меня тут от d переменных.
[47:14.480 --> 47:17.480]  И оно будет равно у меня чему?
[47:18.480 --> 47:25.480]  Ну она будет равно, то есть сумме по всем, допустим, масочкам.
[47:25.480 --> 47:27.480]  То есть вот этим вот 0,1 в степени d.
[47:28.480 --> 47:49.480]  Вот. Я тут напишу что-то типа f от m на x в степени x1 в степени 0, x2 в степени m2 и так далее xd в степени md.
[47:50.480 --> 47:52.480]  Ну то есть маномчики я забабахаю так.
[47:52.480 --> 48:02.480]  Ну то есть маномчики я забабахаю так, что если у меня там какая-нибудь житая переменная есть, то значит я ее тут в маном вставляю, если нет, то нет.
[48:03.480 --> 48:05.480]  Вот, понятно, да?
[48:06.480 --> 48:10.480]  Ну и абсолютно аналогичным способом я могу получить и многочлен g.
[48:11.480 --> 48:16.480]  Ну пока мне в общем-то не составляет труда вроде как такой многочлен построить.
[48:19.480 --> 48:21.480]  Вот.
[48:22.480 --> 48:24.480]  Так.
[48:25.480 --> 48:29.480]  Ну а теперь возникает вопрос. Как же нам теперь получить h?
[48:30.480 --> 48:33.480]  Есть один наглый способ.
[48:34.480 --> 48:38.480]  Да, способ называется да перемножить многочлены.
[48:39.480 --> 48:41.480]  Вот прям давайте так и введем.
[48:41.480 --> 48:42.480]  Вот.
[48:43.480 --> 48:47.480]  Он будет равен f стильдой умножить на g стильдой.
[48:56.480 --> 48:57.480]  Вот.
[48:59.480 --> 49:01.480]  Чем он нам поможет?
[49:06.480 --> 49:07.480]  А поможет он нам следующим.
[49:07.480 --> 49:15.480]  Что дело в том, что когда вы перемножаете маномы, у вас степень при каждом x становится 0, 1 или 2, правда?
[49:16.480 --> 49:26.480]  Причем 0, 1 или 2 однозначно что в ксоре задает тот факт, чему равен был бы ксор соответствующих битиков, правда?
[49:27.480 --> 49:31.480]  Ну потому что если там степень 0, значит оба битика были 0, 0.
[49:32.480 --> 49:35.480]  Если 1, значит битики были 0, 1. Если 2, то 1 и 1.
[49:35.480 --> 49:40.480]  То есть по этой информации or xor вы уже восстанавливаете однозначно.
[49:41.480 --> 49:44.480]  То есть поэтому возникает такая естественная идея.
[49:45.480 --> 49:53.480]  Вы делаете перемножение, потом прибираетесь по маномчикам.
[49:54.480 --> 50:00.480]  Эти маномчики приводите к какому-то адекватному виду.
[50:00.480 --> 50:07.480]  То есть условно говоря, там 2 заменяете на 1, там все 2 заменяете на единицы, но если мы допустим or делаем, да?
[50:08.480 --> 50:13.480]  Ну вот, ну и собственно потом нот.
[50:14.480 --> 50:18.480]  Ну собственно в общем-то и все.
[50:19.480 --> 50:20.480]  В общем-то задача решена.
[50:21.480 --> 50:24.480]  То есть вот такая идея могла бы быть.
[50:25.480 --> 50:32.480]  Ну теперь, вы видите, какая-то просто азококую осемптотику это работает.
[50:37.480 --> 50:42.480]  Вот, нет, проблема. Четыре. Если делать тупую, как у нас принято, то четыре.
[50:43.480 --> 50:47.480]  Почему четыре? Потому что у нас принято каждое одномерное ффт удваивать.
[50:48.480 --> 50:50.480]  По каждому направлению.
[50:50.480 --> 50:51.480]  По каждому направлению.
[50:52.480 --> 50:57.480]  И тогда как бы было у нас n направлений по 2 элемента, стало n направлений по 4 элемента.
[50:59.480 --> 51:02.480]  Да, то есть, конечно, ффт все еще делается за вот единицы.
[51:05.480 --> 51:08.480]  Но зато самих этих ффт у нас становится 4 в степени n.
[51:12.480 --> 51:15.480]  Вот. И тут, видите, какая-то вопрос. А как бы оптимизировать этот алгоритм?
[51:20.480 --> 51:21.480]  Ну да.
[51:34.480 --> 51:38.480]  Ну нет, ну это не очень понятно, как одновременно много многочленов делать.
[51:43.480 --> 51:45.480]  Ну совсем не увеличивать не получится.
[51:51.480 --> 51:52.480]  Ну ксор...
[51:54.480 --> 51:56.480]  Нет, ну смотря как, тут надо аккуратно.
[51:56.480 --> 51:59.480]  Потому что пока если мы чисто перемножаем многочлены, то так, конечно...
[51:59.480 --> 52:04.480]  Ну просто когда вы ищете честное произведение, то как бы совсем не увеличивать не получится.
[52:04.480 --> 52:07.480]  Потому что у вас даже мономов будет больше, чем 2 в степени n.
[52:10.480 --> 52:12.480]  Но правда тут же и шанс для оптимизации.
[52:12.480 --> 52:16.480]  Потому что мономов у нас на самом деле всего 3 в степени n, на самом деле.
[52:16.480 --> 52:19.480]  Потому что степень каждого х больше двух не будет, правда?
[52:20.480 --> 52:26.480]  А теперь можно заметить следующее, что умеем ли мы делать FFT для многочлены размера именно 3?
[52:29.480 --> 52:30.480]  Ровно 3?
[52:30.480 --> 52:31.480]  Да.
[52:31.480 --> 52:32.480]  Да.
[52:32.480 --> 52:33.480]  Вот это вайбы нот.
[52:35.480 --> 52:37.480]  Ну учитывая, что такое FFT?
[52:37.480 --> 52:41.480]  Это когда мы многочлен задаем в виде его значения в n точках.
[52:41.480 --> 52:48.480]  Если размер многочлены 3, то в общем-то ничто нам не мешает просто взять многочлен, взять эту параболу, а это парабола, да?
[52:48.480 --> 52:50.480]  И просто задать ее просто тремя точками.
[52:50.480 --> 52:52.480]  Причем любыми абсолютно, да?
[52:52.480 --> 52:58.480]  То есть как бы ну константа, то есть там в зависимости от того, какие конкретно 3 точки выберете константа, может пошаманиться там.
[52:58.480 --> 53:01.480]  Но это все равно будет константа.
[53:02.480 --> 53:05.480]  Это даже не обязательно комплексный корки кстати брать.
[53:05.480 --> 53:09.480]  В общем-то достаточно взять просто даже какие-нибудь там числа даже 0.1.2 подойдут.
[53:10.480 --> 53:16.480]  Ну или там, ну или там, что вы там любите, больше там 57, 179.2, я не знаю, вот это все.
[53:16.480 --> 53:21.480]  Вот, ну или 239 там естественно, да.
[53:21.480 --> 53:22.480]  Вот.
[53:22.480 --> 53:23.480]  Ну это так конечно не лучший вариант.
[53:23.480 --> 53:26.480]  Ну минус 1.01 конечно лучше будет, наверное.
[53:27.480 --> 53:28.480]  Вот.
[53:29.480 --> 53:31.480]  Ну так просто чтобы чуть-чуть там.
[53:31.480 --> 53:32.480]  Ну не важно.
[53:33.480 --> 53:41.480]  То есть таким образом получается, то есть заметим, что расширять тогда в этой диспозиции нужно только на массивы, только на размер 3.
[53:41.480 --> 53:42.480]  И это будет кайф.
[53:43.480 --> 53:46.480]  То есть будет 3 в степени N и в общем-то будет хорошо.
[53:49.480 --> 53:54.480]  То есть в принципе да, то есть получается, что эту задачу мы уже за 3 в степени N решать научились.
[53:59.480 --> 54:00.480]  Очень просто.
[54:00.480 --> 54:05.480]  Мы каждый размер каждого одиночного наращения сделали 3.
[54:06.480 --> 54:08.480]  Вот, ну там заявили квадрат и все.
[54:08.480 --> 54:11.480]  И стали каждое FFT делать на размер ровно 3.
[54:11.480 --> 54:16.480]  То есть воспринимать как многочлен размера 3 и заменять его назначение в трех точках, именно ровно трех.
[54:17.480 --> 54:20.480]  Вот, мы воспользовались тем, что мы за вот единицу умеем делать.
[54:20.480 --> 54:24.480]  Да, кстати, вот что технология сведения к одномерному FFT делать не умеет, кстати.
[54:25.480 --> 54:26.480]  Вот.
[54:27.480 --> 54:28.480]  Так что можно сделать так.
[54:31.480 --> 54:32.480]  Вот.
[54:33.480 --> 54:34.480]  А что еще можно сделать?
[54:36.480 --> 54:37.480]  Вот.
[54:38.480 --> 54:46.480]  А еще можно, ну вот, ну конечно же, так как у нас D это 20, то наверно хотелось бы побыстрее.
[54:50.480 --> 54:51.480]  Вот.
[54:52.480 --> 54:57.480]  Но тут на самом деле можно попытаться обнаглеть еще.
[55:01.480 --> 55:02.480]  Каким образом?
[55:04.480 --> 55:05.480]  А вот каким.
[55:05.480 --> 55:16.480]  Потому что как бы нам хотелось бы свести, конечно, свести FFT к многочленам все-таки от размера все-таки 2 в степени, а не 3 в степени.
[55:16.480 --> 55:17.480]  Если сведение к одномерному будет работать.
[55:32.480 --> 55:36.480]  Нет, ну скажем так, ну конечно можно, только для перемножения это не будет уже.
[55:38.480 --> 55:45.480]  Ну вот совсем для перемножения, скажем так, для перемножения это может не сработать,
[55:45.480 --> 55:48.480]  потому что там, хотя в принципе да, можно.
[55:49.480 --> 55:56.480]  А, ну да, только придется делать это не 4, только придется это делать все-таки как там переводить либо в 4 в степени, либо в 3 в степени.
[55:57.480 --> 55:58.480]  Чего?
[55:59.480 --> 56:02.480]  Пока не будет хватит, но пока вы не будете делать произведение.
[56:10.480 --> 56:11.480]  Вот.
[56:15.480 --> 56:16.480]  Вот.
[56:20.480 --> 56:22.480]  Вот, поэтому просто так не получится.
[56:23.480 --> 56:27.480]  Поэтому придется тут, конечно, кое-что пооптимизировать.
[56:29.480 --> 56:30.480]  Но каким образом?
[56:34.480 --> 56:36.480]  Вот, но мысль на самом деле такая.
[56:36.480 --> 56:42.480]  То есть, но на самом деле, то есть, идея будет такая, может быть, то есть немножко с читами.
[56:45.480 --> 56:48.480]  То есть, хочется, конечно, действительно сводить задачу именно к произведению.
[56:49.480 --> 56:55.480]  Но для этой ноты, нет, и в принципе действительно можно было бы это сделать, если мы будем подгонять.
[56:56.480 --> 57:01.480]  То есть, как мы уже сказали, то есть, досели мы, вот, так говорите, стандартная ФФТ, то есть ФФТ у нас выигрывалась,
[57:01.480 --> 57:07.480]  из-за того, что мы только в последний момент вспоминали, а в каких конкретных точках вычисляем многочлены, да?
[57:08.480 --> 57:10.480]  А теперь у нас есть какая-то идея.
[57:11.480 --> 57:17.480]  Давайте-ка их вычислять в каких-нибудь хороших точках.
[57:18.480 --> 57:20.480]  А что такое для нас сейчас хорошие точки?
[57:23.480 --> 57:27.480]  Ну, ФФТ само по себе мы можем для многочленов константового размера вычислить в любом месте,
[57:28.480 --> 57:31.480]  поэтому хорошесть можно выбирать уже по-другому.
[57:33.480 --> 57:37.480]  А в нашем случае можно, например, давайте рассмотрим ОР.
[57:38.480 --> 57:48.480]  И можно найти такие х, что х квадрат равно х.
[57:57.480 --> 58:02.480]  То есть, я хочу вместо вот этих х подставлять какие-то чиселки, искать в них значения.
[58:03.480 --> 58:04.480]  В этом смысл ФФТ.
[58:05.480 --> 58:09.480]  Так вот, я хочу подставлять такие х, чтобы х квадрат был равен х.
[58:10.480 --> 58:11.480]  Зачем я это делаю?
[58:12.480 --> 58:17.480]  Ну, мы помним, да, что после произведения мы там все квадраты обрубим в х, правда?
[58:21.480 --> 58:23.480]  Ну, тогда, значит, что это за х?
[58:24.480 --> 58:29.480]  Ну, очевидно, это эквивалентно тому, чтобы х просто был ноликом или единичкой.
[58:31.480 --> 58:33.480]  Так вот, у меня такая неожиданная идея.
[58:34.480 --> 58:36.480]  А сделаю-ка я...
[58:39.480 --> 58:41.480]  Значит, смотрите, сейчас я аккуратненько сформулирую.
[58:42.480 --> 58:47.480]  То есть, по каждому f-стильдой и g-стильдой я могу получить...
[58:50.480 --> 58:54.480]  То есть, там что-то типа f-стильдой и g-стильдой.
[58:56.480 --> 58:57.480]  То есть, что это такое?
[58:58.480 --> 59:03.480]  Это будут значения многочленов f и g в точках 0 и 1.
[59:04.480 --> 59:05.480]  Вот, могу я такое сделать?
[59:09.480 --> 59:10.480]  Да, так вот, у меня идея такая.
[59:11.480 --> 59:14.480]  Я не могу получить произведение этих многочленов.
[59:16.480 --> 59:26.480]  Но я могу получить по ним значение многочлена h в тех же самых точках 0 и 1 в степени n.
[59:38.480 --> 59:40.480]  То есть, смотрите, фишка такая.
[59:40.480 --> 59:42.480]  Дело в том, что вот этой функции h...
[59:49.480 --> 59:50.480]  Обратите внимание.
[59:52.480 --> 59:54.480]  Тут надо очень аккуратно.
[59:55.480 --> 01:00:00.480]  Этой функции h, по идее, будет соответствовать какой-то многочлен h-стильдой.
[01:00:01.480 --> 01:00:15.480]  Но этой h-стильдой, на самом деле, оказывается, значение его в точках 0 и 1 должно совпадать с произведением этих значений у f-стильдой и g-стильдой.
[01:00:17.480 --> 01:00:18.480]  Логично, правда?
[01:00:20.480 --> 01:00:21.480]  Вроде логично.
[01:00:23.480 --> 01:00:24.480]  Или не логично?
[01:00:25.480 --> 01:00:26.480]  Логично, логично.
[01:00:26.480 --> 01:00:27.480]  Все логично, все логично.
[01:00:30.480 --> 01:00:40.480]  Поэтому получается, тонкость такая, что, формально говоря, то, что мы сейчас найдем h-стильдой, то есть h-стильдой это не произведение многочленов f-стильдой на h-стильдой,
[01:00:41.480 --> 01:00:43.480]  если мы их тут будем делать именно на 2 в степени n.
[01:00:46.480 --> 01:00:47.480]  Но конкретно в точках 0 и 1 подойдет?
[01:00:48.480 --> 01:00:49.480]  Чего?
[01:00:50.480 --> 01:00:51.480]  Или сомнения какие-то?
[01:00:52.480 --> 01:00:54.480]  Мыша, мысль по дефолту может быть сейчас не тривиальная.
[01:00:54.480 --> 01:00:56.480]  Т.е. сейчас так вот.
[01:00:59.480 --> 01:01:01.480]  Но, чему это нас приводит?
[01:01:04.480 --> 01:01:13.480]  Приводит это нас к тому, что работает у нас теперь не за 3 в степени, а за 2 в степени.
[01:01:15.480 --> 01:01:18.480]  Да, кстати, только везде все эти степени на n надо домножать, понимаете, да?
[01:01:24.480 --> 01:01:35.480]  Но там, помните, потому что там же вам придется каждую переменную, у нас там получается, что у нас получается,
[01:01:36.480 --> 01:01:47.480]  то есть нам надо пробежаться по всем d-1 рядам и при каждом ряду сделать fft, при каждом фиксированном.
[01:01:47.480 --> 01:01:54.480]  То есть получается, под этой переменной мы должны сделать 2 в степени d-1 fft.
[01:01:58.480 --> 01:01:59.480]  Да, 2 в степени d-1.
[01:02:00.480 --> 01:02:01.480]  И причем все это мы должны сделать d раз.
[01:02:02.480 --> 01:02:03.480]  Логично, да?
[01:02:04.480 --> 01:02:05.480]  Так вроде логично.
[01:02:06.480 --> 01:02:07.480]  Нет или нет?
[01:02:14.480 --> 01:02:15.480]  Нет.
[01:02:17.480 --> 01:02:20.480]  Ну, смотрите, вот еще раз, давайте на двумерном случае.
[01:02:21.480 --> 01:02:24.480]  Мы делаем n раз fft по m.
[01:02:25.480 --> 01:02:26.480]  И тут m раз.
[01:02:27.480 --> 01:02:30.480]  То есть получается, fft, если тут n, было бы 2n fft.
[01:02:33.480 --> 01:02:36.480]  То есть соответственно, то же самое на трех переменах было бы тоже.
[01:02:37.480 --> 01:02:41.480]  Так что да, поэтому фишка тут получается, что в таком виде это будет работать,
[01:02:42.480 --> 01:02:45.480]  то есть уже на уровне идеи за 2 в степени n на n.
[01:02:45.480 --> 01:02:49.480]  Ну, раньше в предыдущем точке были тоже 3 в степени n на n, на самом деле.
[01:02:50.480 --> 01:02:51.480]  И 4 в степени n на n.
[01:02:52.480 --> 01:02:53.480]  Вот, да.
[01:02:54.480 --> 01:02:56.480]  Ну, 4 в степени n может быть, если бы мы перемножали в тупую,
[01:02:57.480 --> 01:02:59.480]  было бы, наверное, там 4 в степени n было бы.
[01:03:00.480 --> 01:03:01.480]  Вот.
[01:03:02.480 --> 01:03:04.480]  Но тут, причем более того, но это для ORA.
[01:03:05.480 --> 01:03:08.480]  Там было бы не 4 в степени n, там тоже было бы не 4 в степени n,
[01:03:09.480 --> 01:03:11.480]  потому что надо было бы еще проверить, что масочки сходятся.
[01:03:12.480 --> 01:03:13.480]  То есть мы перебираем пары и проверим, что маски сходятся.
[01:03:13.480 --> 01:03:15.480]  В смысле, в смысле, какие пары?
[01:03:16.480 --> 01:03:19.480]  Ну, вот мы перерываем 4 х 2 штриха и проверяем, что из-за n нужно еще...
[01:03:20.480 --> 01:03:21.480]  Не, а зачем?
[01:03:22.480 --> 01:03:24.480]  Если вы в тупую перемножаете, то как бы вы просто...
[01:03:25.480 --> 01:03:26.480]  Нет, а зачем?
[01:03:27.480 --> 01:03:28.480]  Когда вы перемножали именно многочлены, вы об этом не заботитесь.
[01:03:29.480 --> 01:03:31.480]  То есть вы как бы об этом вспоминаете просто, когда мономы обрезаете.
[01:03:32.480 --> 01:03:33.480]  Вот.
[01:03:34.480 --> 01:03:35.480]  А?
[01:03:36.480 --> 01:03:40.480]  В рычаге с норами есть значение по уровню степени D, аж с 3-4.
[01:03:41.480 --> 01:03:42.480]  А также как и ранее?
[01:03:43.480 --> 01:03:44.480]  Что-то такое.
[01:03:45.480 --> 01:03:46.480]  То есть просто фишка такая.
[01:03:47.480 --> 01:03:51.480]  У вас есть как бы менячленные, f в стильдах, j в стильдах и аж в стильдах.
[01:03:52.480 --> 01:03:55.480]  И у нас есть мистическое утверждение.
[01:03:56.480 --> 01:03:59.480]  То есть у нас нет мистического утверждения, что f в стильдах умножить на j в стильдах равно a ж в стильдах.
[01:04:00.480 --> 01:04:06.480]  Но есть утверждение такое, что f в стильдах в точках от 0.1 в степени n,
[01:04:07.480 --> 01:04:11.480]  умножить, вот то есть умножить на g в тех же точках.
[01:04:11.480 --> 01:04:18.080]  тех же точках равно h, ладно, не очень, может быть, пишу
[01:04:18.080 --> 01:04:20.880]  это, но суть такая, то есть конкретно в этих точках
[01:04:20.880 --> 01:04:21.880]  это точно правда.
[01:04:21.880 --> 01:04:29.680]  Вот, то есть получилась вот такая вот неожиданная
[01:04:29.680 --> 01:04:30.680]  тонкость.
[01:04:30.680 --> 01:04:37.560]  То есть, да, действительно, вот в точках 0,1 это будет
[01:04:37.560 --> 01:04:38.560]  прям чистая правда.
[01:04:38.560 --> 01:04:42.760]  Вот, потому что мы специально, видите, мы специально 0,1
[01:04:42.760 --> 01:04:45.640]  взяли, то есть для того, чтобы х квадрат совпадал
[01:04:45.640 --> 01:04:48.800]  с х, то есть, видите, квадраты обрезаются так, как нам
[01:04:48.800 --> 01:04:49.800]  по ОРу надо.
[01:04:49.800 --> 01:04:56.080]  Вот, да, кстати, сразу опишем, а что делать для ксора?
[01:04:56.080 --> 01:04:59.880]  Да, то есть для ксора нам потребуются такие х, чтобы
[01:04:59.880 --> 01:05:03.560]  х квадрат был равен 1, то есть в переводе говоря,
[01:05:03.560 --> 01:05:07.960]  и там х это 1 и минус 1.
[01:05:07.960 --> 01:05:13.280]  Вот, ну потому что в ксоре х квадрат должен превратиться
[01:05:13.280 --> 01:05:14.280]  в х нулевой.
[01:05:14.280 --> 01:05:15.280]  Вот.
[01:05:15.280 --> 01:05:21.360]  Так что вот такая красота, оказывается, нас ждет,
[01:05:21.360 --> 01:05:25.160]  но еще большая красота на самом деле нас ждет, когда
[01:05:25.160 --> 01:05:26.280]  мы захотим это закудить.
[01:05:26.280 --> 01:05:31.680]  Да, потому что когда, действительно, как закудить
[01:05:32.680 --> 01:05:51.480]  Ну, иногда, да, но в нашем случае будет по-другому,
[01:05:51.480 --> 01:05:52.480]  смотрите.
[01:05:52.480 --> 01:05:55.040]  Итак, значит, как это закудить?
[01:05:55.040 --> 01:05:58.000]  Ну, во-первых, как это хранить?
[01:05:58.440 --> 01:06:00.680]  Ну, естественно, мы не будем заводить демерный вектор.
[01:06:00.680 --> 01:06:05.920]  Да, казалось, что нам мешает, но кроме того, что это демерный
[01:06:05.920 --> 01:06:10.520]  вектор надо реализовать, там еще, да, да, причем
[01:06:10.520 --> 01:06:14.960]  как бы количество, можно вообще реализовать демерный
[01:06:14.960 --> 01:06:17.400]  вектор, это вообще с переменным количеством измерений.
[01:06:17.400 --> 01:06:24.320]  Ой-ой, шаблонный тензор звучит, как угарательство,
[01:06:24.320 --> 01:06:25.320]  да.
[01:06:25.880 --> 01:06:30.880]  Да, да, да, да, да, в нумпале есть, шаблон для бэрикевла.
[01:06:30.880 --> 01:06:35.520]  Нет, при желании можно, может, даже, может, даже
[01:06:35.520 --> 01:06:38.880]  мещерину подкинуть идею на ДЗ, да.
[01:06:38.880 --> 01:06:40.440]  Ну, а чего, да?
[01:06:40.440 --> 01:06:41.920]  Что сразу ало мещерино?
[01:06:41.920 --> 01:06:43.600]  Здравствуйте, Илья Семирович.
[01:06:43.600 --> 01:06:47.200]  Нет, я бы сказал просто, слушай, привет, у меня тут
[01:06:47.200 --> 01:06:48.680]  идея, слушай, у тебя тут демерными векторами там
[01:06:48.680 --> 01:06:49.680]  не получится.
[01:06:49.680 --> 01:06:54.400]  Не, но мало ли, может, там с какими-нибудь марксами
[01:06:54.400 --> 01:06:58.200]  что-нибудь еще в этом роде может это они не общел шаблонный вектор шаблонным
[01:06:58.200 --> 01:07:00.960]  параметром в д
[01:07:09.520 --> 01:07:20.760]  ну хорошо хорошо ну ладно ладно можно не но слава богу не нужно потому что
[01:07:20.760 --> 01:07:24.880]  потому что на самом деле заметим следующего вместо того что пошла как вы
[01:07:24.880 --> 01:07:28.800]  будете хранить эти эвки но очевидно что верно вы будете хранить массиве размеры
[01:07:28.800 --> 01:07:34.680]  2 степени правда ну наверное да ну вот то есть вы как-то будете то есть вы их
[01:07:34.680 --> 01:07:39.360]  будете как-то хранить и будет вам хорошо вот теперь выскакивает вопрос а как
[01:07:39.360 --> 01:07:43.480]  сделать двумерные ффт то есть ну допустим вот у вас есть массив даже да
[01:07:43.480 --> 01:07:51.400]  f от 0 там f от 1 х х и вот если я хочу это к этому f применить н-мерное
[01:07:51.400 --> 01:07:59.960]  преобразование фурье то как я это должен делать я должен наверное то есть как я
[01:07:59.960 --> 01:08:04.120]  это должен делать ну наверное якобы помните да должен там зафиксировать все
[01:08:04.120 --> 01:08:09.120]  там зафиксировать то есть то есть делать это должен так то есть я должен
[01:08:09.120 --> 01:08:16.880]  перебрать все значения переменной d от 0 до n минус 1 нет ладно и так давайте я
[01:08:16.880 --> 01:08:22.280]  перебираю житую переменную от 0 до d минус 1 вот так да а что теперь должен
[01:08:22.280 --> 01:08:27.160]  сделать а теперь дальше должен всеми возможными способами зафиксировать все
[01:08:27.160 --> 01:08:33.080]  остальные значения да переменной кроме житой и их но вот и соответственно там
[01:08:33.080 --> 01:08:40.160]  ффт и сделать правда то есть я тут должен перебрать то есть я должен был
[01:08:40.160 --> 01:08:49.240]  тут написать там for m 0 равно от 0 до 1 for там m 1 равно от 0 до 1 там for m 2 равно
[01:08:49.240 --> 01:09:08.560]  от 0 до 1 и так далее g минус 1 равно от 0 1 да но вот и так далее да вот то есть
[01:09:08.560 --> 01:09:16.720]  можно было бы вот так написать да так в общем делаем вот таких 19 for и внутри
[01:09:17.400 --> 01:09:25.320]  должен сделать следующее я должен взять фактически все масочки у которых значит
[01:09:25.320 --> 01:09:32.680]  вот эти битики равны вот этому ладно да и минус один вот эти вот они тут равны да и
[01:09:32.680 --> 01:09:38.760]  сказать что хорошо у нас теперь ставят но таких маски у нас целых две ну где он
[01:09:38.760 --> 01:09:48.080]  житый бит равен нулю житый бит равен единице и для них сделать вот эту ффт да но по сути
[01:09:48.080 --> 01:09:57.280]  вот так перебирать не надо конечно почему да я понимаю что уже хочется конечно да но тем
[01:09:57.280 --> 01:10:03.560]  не менее вместо этого оказывается что достаточно перебрать просто все пары
[01:10:03.560 --> 01:10:12.400]  масочек у кого-то которые отличаются ровно житым битом то есть вместо вот этого вот безобразие
[01:10:12.400 --> 01:10:26.160]  надо просто написать for m равно от 0 до 1 х n минус 1 и тут мы будем перебрать так если житый бит жив
[01:10:26.160 --> 01:10:37.680]  допустим да то тогда нам надо поработать с масочкой m и m минус 1 х 5 g а как нам с ними надо
[01:10:37.680 --> 01:10:47.440]  работать так как же нам сделать fft на 0 и 1 давайте давайте внимательно подумать то есть у нас
[01:10:48.440 --> 01:10:58.720]  имеет вид а плюс б на x да там а плюс б на и джитая даже можно сказать где а равно получается
[01:10:58.720 --> 01:11:14.960]  м цифру там f от м минус один хресь хресь жи да и б равно f от м ну когда мы зафиксировали все
[01:11:14.960 --> 01:11:21.040]  остальные переменные да у нас образовался многочлен размера 2 вот такого вида да от житой
[01:11:21.040 --> 01:11:28.320]  переменной вот у него есть вот свободный член он находится здесь есть степень первая которая
[01:11:28.320 --> 01:11:36.480]  находится здесь я хочу сделать для нее заменить ее на значение этого многочленов двух точках в
[01:11:36.480 --> 01:11:52.320]  чем точке 0 и 1 но что же это за значение в точках 0 и 1 что по сути да то есть это вот у нас а и
[01:11:52.320 --> 01:12:03.720]  а плюс б то есть в результате это магическое ft делается примерно следующим образом то есть
[01:12:03.720 --> 01:12:26.080]  f от м плюс равно f от м минус один хресь хресь жи так что да нет просто оказывается что да то
[01:12:26.080 --> 01:12:31.320]  есть как бы как бы как бы идеи но было очень страшно но реально вот да вот да мы написали
[01:12:31.320 --> 01:12:44.880]  мерное прообразование фуриеда да правда страшно что это все а как же написать обратно как же
[01:12:44.880 --> 01:12:51.440]  а ведь действительно смотрите как же как же восстановить обратно как же по числам а и а плюс
[01:12:51.440 --> 01:13:02.000]  б восстановить числа а и б да то есть для этого придется сделать следующее ну формально во-первых
[01:13:02.000 --> 01:13:07.160]  да то есть ну для этого самое тупое давайте просто сделаем то же самое но прям наоборот
[01:13:07.160 --> 01:13:16.000]  нет хотя нет какая какая нам разница обратная то есть там но обратная фф т ну мы уже убеждаемся
[01:13:16.000 --> 01:13:19.840]  что когда мы делаем обратные фф т нам по барабану в каком порядке перебирать значение правда
[01:13:20.160 --> 01:13:30.700]  да по сути да поэтому на самом деле заметим что вот то есть каком порядке дот то есть в каком
[01:13:30.700 --> 01:13:34.580]  порядке перебирать это нам не принципиально в каком порядке перебирать масочки нам
[01:13:34.580 --> 01:13:40.800]  тоже не сильно принципиально но потому что все равно вы штаба Emily перебирайте по сути пара
[01:13:40.800 --> 01:13:46.160]  так что получается что обратная фф то отличается только тем что вместо плюсика
[01:13:46.160 --> 01:13:59.160]  вы пишите здесь пинусик одним символом буквально всё в каком смысле разберёмся
[01:13:59.160 --> 01:14:06.460]  нет ну
[01:14:16.160 --> 01:14:45.280]  так нету пройдите пройдите правильная мысль но тут действительно да
[01:14:45.280 --> 01:14:51.360]  возможно да у кого-то вызывает ощущение что где-то этот код вы уже видели да да
[01:14:51.360 --> 01:14:55.720]  предплазикает какой-то такой какой-то абсолютно паникующий аббревиатура как
[01:14:55.720 --> 01:15:03.920]  создать п да да действительно да хотя действительно это очень страшно да
[01:15:03.920 --> 01:15:09.360]  просто страшнее только фраза там типа штирлиц идет по коридору то есть просто
[01:15:09.360 --> 01:15:14.080]  что она значит абсолютно непонятно но что-то она должна значить тот штирлиц
[01:15:14.080 --> 01:15:18.920]  идет по коридору или там из-за пастор играет на аркане вот то же самое пастор
[01:15:18.920 --> 01:15:28.800]  играет на аркане паспорта и пастор ты гады у господи да все все все вот ну выбросуем
[01:15:28.800 --> 01:15:36.000]  сюда вот но на самом деле но на самом деле можно подумать еще вот о чем сделаем еще
[01:15:36.000 --> 01:15:42.760]  один шаг вот мы говорим об оре да а теперь давайте подумаем а шум вот хорошо мы вот
[01:15:42.760 --> 01:15:50.920]  это операция она превратила f массив вот который действительно хочется назвать м большое ф
[01:15:50.920 --> 01:16:00.640]  большое но я говорю все я сегодня все да вот господи до самого начала на самом деле вот f
[01:16:00.640 --> 01:16:09.200]  большое значит что же это такое f большое как мы помним да что такое f вот давайте подумаем что
[01:16:09.240 --> 01:16:17.760]  такое f от м большого ладно ладно f большое а м маленькая что это такое то есть идея была
[01:16:17.760 --> 01:16:24.160]  такая мы подставляем нолики единички вот то есть жили был вот этот вот многочлен f и
[01:16:24.160 --> 01:16:29.780]  мы в него подставляем нолики единички правда ну теперь смотрите как ведут себя нолики
[01:16:29.780 --> 01:16:36.240]  единички когда вы подставляете себе вот как ведутся эти новенькие единички маски m с
[01:16:36.240 --> 01:16:43.160]  каждым конкретным мономом. Заметим, что если у вас есть какая-то переменная с нулем, которая в
[01:16:43.160 --> 01:16:53.560]  этом мономе есть со степенью 1, то тогда этот моном зануляется. Но, а если в этой перемене
[01:16:53.560 --> 01:17:01.800]  единичка, то она на этот моном никак не влияет. То есть получается, то есть если у нас тут есть
[01:17:01.800 --> 01:17:08.840]  нолики и единички, то зануляются только те мономы, в которых есть переменные, которые тут
[01:17:08.840 --> 01:17:22.760]  занулины. То есть не занулины, другими словами, будут такие мономы, что если тут х в мономе есть,
[01:17:22.760 --> 01:17:32.520]  то тут у него единичка. То есть в переводе говоря, то есть просто пишем утверждение
[01:17:32.520 --> 01:17:43.600]  мистическое, что оказывается, что f от m это сумма f от m штрих по всем подмазкам маски m.
[01:17:43.600 --> 01:18:00.280]  Поэтому это и называется СОСДП. Не очевидна связь, да? На самом деле уже легко распорчить,
[01:18:00.280 --> 01:18:16.200]  потому что СОС это на самом деле сам оверсапсет. Нет, это просто предлог. Нет, пока тут как раз
[01:18:16.200 --> 01:18:19.880]  наоборот ничего страшного. Да, то есть конечно да, в каком-нибудь спортивном программировании обычно вам
[01:18:19.880 --> 01:18:24.320]  это СОСДП расскажут, как бы никак не связывая это, что это на самом деле это просто инмерное
[01:18:24.320 --> 01:18:33.160]  образование фурье такое. То есть вам просто скажут, что давайте решать вот такую задачу. Заметим,
[01:18:33.160 --> 01:18:39.080]  что оно решается вот такой динамикой, которую если пихать ее не за два в степени n памяти,
[01:18:39.080 --> 01:18:46.880]  а за честную два в степени n, то получится вот этот код. Кстати, кто раньше сталкивался с СОСДП?
[01:18:46.880 --> 01:18:57.920]  Ну вот, понятно. Более того, мы могли даже просто задачу дать, потому что, в принципе,
[01:18:57.920 --> 01:19:02.200]  если вам просто поставить такую задачу, решить ее за два в степени n, то скорее всего вы решение,
[01:19:02.200 --> 01:19:08.240]  может там решение вида, давайте там забабахом какую-нибудь динамику, собственно вида там будет
[01:19:08.240 --> 01:19:13.360]  такое что-то ДП от МЖТ. Там что-нибудь типа перебираем все подмаски, у которых первые же
[01:19:13.360 --> 01:19:19.280]  бит совпадают, например. Вот и выяснится, что в общем, там если правильно пересчитывать,
[01:19:19.280 --> 01:19:37.720]  то получится хорошо. За три в степени D? Да, решение называется, честно переберем все подмаски,
[01:19:37.800 --> 01:19:47.480]  мы сегодня об этом поговорим еще. Да, есть очень тупой перебор. Четыре это совсем тупой,
[01:19:47.480 --> 01:19:53.840]  а есть чуть менее тупой способ, то есть просто есть способ, как у маски M перебирать ее под
[01:19:53.840 --> 01:20:02.440]  маски за вот их количество. В общем, очень тупым перебором. А в прочем, почему бы здесь-то об этом
[01:20:02.440 --> 01:20:06.960]  не поговорить? Давайте раз уж об этом зашла речь, сегодня нам это все равно пригодится.
[01:20:06.960 --> 01:20:14.280]  Вот задача, вот просто абстрактная задача, дана маска перебирать все подмаски. Так вот,
[01:20:14.280 --> 01:20:25.480]  я утверждаю, что я умею это делать. Ну ладно, не умею. Я умею перебирать все непустые подмаски.
[01:20:25.480 --> 01:20:32.240]  Да, да, у меня к сожалению такой код, что сейчас будет, что нолик придется перебирать отдельно.
[01:20:32.240 --> 01:20:51.120]  А все непустые перебираются так. Смотрите. Да, M штрих, это штрих. Он есть, да.
[01:20:51.120 --> 01:21:00.960]  Значит, надо доказывать битву и магию.
[01:21:00.960 --> 01:21:21.040]  Нет, скажем так, битва и магия работает, потому что она в процессор зашита. Если вы живете в каких-то
[01:21:21.040 --> 01:21:33.840]  других процессорах, я не знаю, в какой галактике их изготовили. Нет, всякое, конечно,
[01:21:33.840 --> 01:21:38.920]  бывает. Если верить голливудским фильмам, то да, что все компьютеры имеют один и тот же
[01:21:38.920 --> 01:21:44.480]  графический интерфейс, независимо от того, кто их изготовил в какой галактике. То есть к любому
[01:21:44.480 --> 01:21:55.520]  компьютеру можно там клавиатурку свою подключить и так далее. Нет, до нуля-то оно дойдет. Но
[01:21:55.520 --> 01:22:00.240]  понимаете, просто проблема в том, что после нуля эта штука, скорее всего, будет равна M.
[01:22:00.240 --> 01:22:13.680]  Нет, ну do while тоже, потому что M-то тоже хочется обрабатывать.
[01:22:13.680 --> 01:22:27.120]  Смотрите, do, значит, вы обрабатываете маску, делаете вот эту, а потом пишете while M больше нуля,
[01:22:27.120 --> 01:22:50.360]  да? Ну можно и так. Нет, ну можно и так. Нет, ну, понимаете, да, я просто не очень люблю,
[01:22:50.360 --> 01:22:55.520]  потому что там какие-нибудь, потому что с каким-нибудь continue тогда будут проблемы. Просто чем вот этот
[01:22:55.520 --> 01:23:00.880]  форприятие? Он приятен тем, что если вам захочется сделать continue, вы просто пишете и не паритесь. А в вашем
[01:23:00.880 --> 01:23:05.640]  варианте вам придется помнить, что до последней строчки вам надо дойти и что-то сделать. Тут вот
[01:23:05.640 --> 01:23:19.040]  такая подлянка есть. Да, замечательно. Но, как я уже говорил еще, как говорил еще мой преподаватель,
[01:23:19.040 --> 01:23:27.320]  оператору Go2 нет. Да, помните, да, все плюс-плюси нет, оператору Go2. Да, это называется, кто сказал вам,
[01:23:27.320 --> 01:23:33.040]  да, кто сказал вам обратно, можете пойти его побить в темном переулке. Собственно, если ваш
[01:23:33.040 --> 01:23:45.360]  компилятор его компилирует, это случайность. Ну да, так, то есть, ладно, так, то есть, насколько я
[01:23:45.360 --> 01:23:51.680]  понял из ваших комментариев, в общем-то, а почему это работает, в общем-то, вопросов не вызывает. Нет, все
[01:23:51.680 --> 01:23:58.000]  очевидно. То есть, на экзамене я могу спросить, расскажете. Хорошо, да, в принципе, ладно, оставим в
[01:23:58.000 --> 01:24:04.240]  качестве упражнения. Хорошо, да, убедиться, что действительно эта штука действительно переберет
[01:24:04.240 --> 01:24:13.320]  все подмасски. Причем, естественно, порядка убывания очевидна, но да. Так, но главное, что она все
[01:24:13.320 --> 01:24:18.000]  переберет. Нет, скажите, видите, здесь абсолютно очевидно, что она переберет в порядке убывания,
[01:24:18.000 --> 01:24:22.400]  очередное, что она переберет подмасски, потому что мы Эндем делаем. Останется только доказать,
[01:24:22.400 --> 01:24:28.920]  что она переберет все. Вот, это самое тут нетривиальное, но на самом деле тоже не сильно страшно будет.
[01:24:28.920 --> 01:24:35.440]  Так, ну, на самом деле, что нам тут остается еще добить? Ну, на самом деле, да, то есть, как бы,
[01:24:35.440 --> 01:24:42.320]  если не рассказывать действительно СОС ДП через просто ДП без фурье, то, конечно, не будет очевидно,
[01:24:43.280 --> 01:24:51.000]  а как тут тогда вместо ОРА сделать СОР? Ну, на самом деле, это, оказывается, достаточно просто,
[01:24:51.000 --> 01:25:02.280]  особенно если найти зеленый маркер. Да, таища у нас, к сожалению, нету. Ага, а он перманентный,
[01:25:02.280 --> 01:25:09.000]  по-моему. Не, вот я вот под цвет учу, вот чую под цвет ушел. Ну, да, флип, да, флип чартовый, да, все,
[01:25:09.000 --> 01:25:28.360]  он не сотрется тут. Ну, нет, ну, смотри. О, кайфец, работаем, да. Значит, действительно,
[01:25:28.360 --> 01:25:34.120]  как сделать зелененький СОР? Очень просто. Ну, потому что тут мы заметим, что вот этот
[01:25:34.720 --> 01:25:42.080]  A плюс B к G. Так, ну, если подставить единичку, то получится A плюс B. А если подставить минус
[01:25:42.080 --> 01:25:52.760]  единичку, получится A минус B. Да, ничего не напоминает. Да, вот это вот. Ну, бабочка, да. Ну,
[01:25:52.760 --> 01:26:00.280]  ладно, это все редактор, конечно, а не бабочка. Ну, да, но в принципе, да, то есть, на самом, да,
[01:26:00.280 --> 01:26:04.680]  как это ни странно, но мы действительно честно, на этот раз делаем вообще предельно честно FFT.
[01:26:04.680 --> 01:26:13.960]  Да, обратно, конечно, то есть там фишка будет такая, то есть там, то есть там придется вот
[01:26:13.960 --> 01:26:21.000]  вместо этой штуки там писать что-то типа там, как всегда, у равно f от m минус, значит,
[01:26:21.000 --> 01:26:36.360]  1 х х g, значит, v равно, значит, f от m. И дальше написать, что f от минус 1 х х g теперь равно
[01:26:36.360 --> 01:26:50.240]  у плюсв, значит, f от m равно у минусв. Это если в одну сторону. Вот, теперь у меня есть какой-то
[01:26:50.240 --> 01:26:59.920]  вопрос, а что делать, а что делать, если вы будете делать обратно FFT? Да, на самом деле, да, то есть,
[01:27:00.640 --> 01:27:10.600]  то есть как бы в качестве обратно вам придется тут добавить строчку поделить пополам. Или,
[01:27:10.600 --> 01:27:16.320]  ну, на самом деле, чтобы константу оптимизировать, правильнее, конечно, будет на самом деле потом,
[01:27:16.320 --> 01:27:21.920]  то есть правильнее, конечно, будет на самом деле потом в конце пробежаться фориком и
[01:27:21.920 --> 01:27:31.240]  поделить уже сразу на два в степени. Вот, надо так делить на два, как-то это вот такое. Вот.
[01:27:31.240 --> 01:27:51.680]  Почему? Ну, нет. Кстати, да. Нет, нет, нет, стоп, стоп, стоп, не совсем так.
[01:27:51.680 --> 01:27:58.640]  Если модуль четен, то это еще не следует, что 1 минус 1 это одно и то же. Да, но, к сожалению,
[01:27:58.640 --> 01:28:05.840]  с восстановлением назад будут проблемы, так что пользуйтесь нечетными модулями.
[01:28:05.840 --> 01:28:13.760]  Нет, ну, можно в принципе. Нет, ну, давайте как бы ждем задачу,
[01:28:13.760 --> 01:28:31.720]  да, весь Код Форсус будет там сидеть, страдать, да. Ну да, да, да, сделаем,
[01:28:32.080 --> 01:28:43.600]  миллиард 7, миллиард 9 КТО радость, да, да, да, мы помним. Нет, ну да, нет, ну ладно тут,
[01:28:43.600 --> 01:28:47.640]  не суть, развлекаться можно на самом деле как угодно, потому что на самом деле, да,
[01:28:47.640 --> 01:28:53.120]  то есть если уж говорить о том, куда можно развлекаться дальше, то там как бы на самом
[01:28:53.120 --> 01:29:01.040]  деле и там более как совсем страшные задачи есть. Так, сколько времени? А, кайфец.
[01:29:01.040 --> 01:29:13.960]  Так, ну что? Ладно, есть ли тут еще какие-то вопросы? Нету. Так, ну тогда пришло время
[01:29:13.960 --> 01:29:19.800]  перерыва как раз. Ладно, идем дальше. Так, ну, соответственно, ладно, да, так, значит,
[01:29:19.800 --> 01:29:25.280]  какую-то, так, ладно, какую бы из дырчик позакрывать? Так, ну ладно, давайте тогда,
[01:29:25.280 --> 01:29:29.480]  значит, ну начнем с того, что закроем дырчику, тогда уж ДП на подмасках раз у нас что-то зашла об
[01:29:29.480 --> 01:29:38.000]  этом речь. Вот так, ну действительно так, ну уж, да, что-то можно сказать про ДП на именно подмасках,
[01:29:38.000 --> 01:29:45.160]  ну кроме того, что да, есть, да, ну да, что есть, там есть такое ДП, что в качестве состояния ДП
[01:29:45.160 --> 01:29:49.840]  могут быть, оказывается, под множество какого-то множества. Да, ну понятно, ладно, я думаю,
[01:29:49.840 --> 01:29:55.400]  вы, конечно, в своей жизни там со такими задачами, наверное, сталкивались в своей жизни, да? Нет,
[01:29:55.400 --> 01:30:04.040]  никогда. Нет, ну как-то просто с чем-нибудь хоть в таком-то виде сталкивались, но на самом деле,
[01:30:04.040 --> 01:30:11.680]  конечно, ну в качестве, надо, ну какую-то базовую задачу надо упомянуть и, конечно же, мы, но тут
[01:30:11.680 --> 01:30:17.720]  должны мы поговорить про задачу о поиске какой-то гамильтонного пути. Да, ну почему? Потому что
[01:30:17.720 --> 01:30:24.920]  просто, потому что эта задача действительно имеет важное значение, собственно, в теории. Вот, значит,
[01:30:24.920 --> 01:30:29.800]  о чем у нас вообще разговор? Ой, кстати, еще одна дырка, надо еще про эллеровые циклы поговорить, да? А,
[01:30:29.800 --> 01:30:36.080]  говорили? А, слава богу, отлично. Вот, значит, что такое гамильтонов путь? Ну, обычно, значит,
[01:30:36.080 --> 01:30:42.160]  определение такое, пусть у нас есть какой-нибудь граф. Путь называется гамильтоновым, если он
[01:30:42.160 --> 01:30:49.080]  проходит по всем вершинам, причем ровно по одному разу, то есть там без вот этих вот там каких-то
[01:30:49.160 --> 01:30:55.360]  возвратов в какие-то другие вершины, чтобы пойти в другое место. И вот возникает задача,
[01:30:55.360 --> 01:31:02.200]  которую человечество на текущий момент, мало того, что не умеет решать заполиномиальное время,
[01:31:02.200 --> 01:31:11.600]  так еще и имеет нот, имеет очень сильное highly likely нот на тему того, что заполиномы эту задачу
[01:31:11.600 --> 01:31:19.400]  нельзя решить в принципе. Задача, ну, задача уже хотя бы дан граф, а есть ли в нем гамильтонов путь,
[01:31:19.400 --> 01:31:31.080]  да или нет? Ну, как всегда, то-то и проблема, что в каких-то графах есть, а в каких-то графах нет.
[01:31:31.080 --> 01:31:36.240]  Это не эта ситуация, когда там играют двое, Вася ходит первым и делает тот, а потом Вася ходит
[01:31:36.240 --> 01:31:49.280]  вторым и делает тот. Напишите, кто победит. Да, именно, именно. Но да, да, да, то есть в Команда
[01:31:49.280 --> 01:31:56.440]  Олимпиаде ЛКШ какого-то лохматого года такую задачу реально дали. Было очень смешно. Но там
[01:31:56.440 --> 01:32:03.040]  эта традиция локошадских слоников берут свое начало с задачи слоники. Ладно, это я отдельно
[01:32:03.040 --> 01:32:08.360]  расскажу. Это смешно. Так вот, значит, ну, на самом деле можно решать, конечно, что-нибудь более
[01:32:08.360 --> 01:32:13.200]  продвинутое. Ну, можно решать так, можно найти гамильтонов путь минимальной длины, там, например,
[01:32:13.200 --> 01:32:23.080]  и так далее. Ну, если, допустим, у вас у каждого ребра дана длина, вот, там что-нибудь такое, ну да,
[01:32:23.080 --> 01:32:27.280]  то есть гамильтонов путь минимального веса, ну, там что-нибудь еще вот в этом вроде. Ну, все эти
[01:32:27.360 --> 01:32:33.960]  задачи, в общем-то, решаются примерно одинаково. Решается они с тем, что вы заводите просто там
[01:32:33.960 --> 01:32:41.640]  Dp от mask и V. То есть вам жутко, вы рассматриваете пути, которые прошли ровно вот по вершинам,
[01:32:41.640 --> 01:32:49.000]  которые записаны вот тут, и вершина V, и которые заканчиваются в вершине V. Ну,
[01:32:49.000 --> 01:32:53.800]  в базовой версии, то есть в базовой комплектации, когда просто надо там существует ли гамильтонов путь,
[01:32:53.800 --> 01:32:58.800]  тогда можно просто сказать, что это бул, и просто существует ли путь, который проходит вот по всем
[01:32:58.800 --> 01:33:08.040]  этим вершинам ровно по ним, и заканчивается при этом в вершине V. Ну, тогда понятно, пересчет
[01:33:08.040 --> 01:33:16.320]  можно делать там как динамику вперед, да, то есть типа там for у V, значит, там, допустим,
[01:33:16.320 --> 01:33:27.320]  пишем, если, значит, не там mask and 1 х х у, то есть мы проверяем, если вершина у не лежит, значит,
[01:33:27.320 --> 01:33:32.520]  если выясняется, что ребро в у есть, ну, там, в какой-нибудь там, я вот напишу вот в таком виде.
[01:33:32.520 --> 01:33:40.000]  Ладно, правильнее по-другому написать. Правильнее, конечно, написать, что for в, значит,
[01:33:40.000 --> 01:33:54.600]  ну ладно, если уж так полный код писать, то есть там for mask равно от нуля до 1 х х n минус 1,
[01:33:54.600 --> 01:34:00.200]  да, перебираем маски в порядке возрастания в данном случае, естественно, значит, пишем сразу,
[01:34:00.200 --> 01:34:08.880]  если dp от mask, то есть это вот типичное такое dp, да, то, значит, перебираем такие ребра, значит,
[01:34:08.880 --> 01:34:20.160]  если mask, то значит dp от mask, ну, можно так написать dp от mask или 1 х х у или равно dp от mask.
[01:34:20.160 --> 01:34:30.360]  Вот, красота, красота. Вот, то есть, в принципе, можно тут выставить какого-нибудь восстановления
[01:34:30.360 --> 01:34:34.520]  ответа, ну и так далее и тому подобное, это не очень интересно. То есть, ну, думаете,
[01:34:34.600 --> 01:34:46.920]  то есть такая вот классика, кстати, за какую симпатику она работает? На n квадрат, а поточнее. Да,
[01:34:46.920 --> 01:34:55.440]  то есть o от 2 в степени n на m. Нет, на самом деле, нет, есть целое направление, в принципе,
[01:34:55.440 --> 01:34:59.120]  можно тоже там все это покопать, но там разные проблемы, как действительно, можно подумать,
[01:34:59.120 --> 01:35:10.480]  а нельзя ли тут сделать 2 в степени n пополам какой-нибудь? М, количество ребра? Да. Обычно тут
[01:35:10.480 --> 01:35:16.120]  не заморачиваются пишут n квадрат, но в принципе, но в принципе, заметим, что здесь на самом деле
[01:35:16.120 --> 01:35:21.040]  можно, то есть вот такое решение получается 2 в степени n на m. Да, а, ну, я здесь фактически
[01:35:21.040 --> 01:35:27.480]  куда-то написал, можно прям список ребр делать и будет хорошо вполне себе. Вот, ну, заметим,
[01:35:27.480 --> 01:35:32.200]  что на самом деле можно применить какую-нибудь веселую технологию типа mipton the middle и забабах,
[01:35:32.200 --> 01:35:44.560]  и получить o от 2 в степени n пополам на шота. В роли шота, ну, я не знаю, n квадрат плюс m будет.
[01:35:44.560 --> 01:35:52.840]  Ну, для того, чтобы, ну, чтобы на первой половине и по второй половине, собственно,
[01:35:52.840 --> 01:36:05.800]  забабахать вот эту честную динамику. Ну, так, знаешь, две цели. Во-первых, помянуть,
[01:36:05.800 --> 01:36:13.480]  что как бы там фаза для m тоже будет, а во-вторых, ну, могут быть формальные кратные ребра. Да,
[01:36:13.480 --> 01:36:17.920]  понятно, что почти во всех постановках задачи первое, что надо сделать, это избавиться от кратных
[01:36:17.920 --> 01:36:23.960]  ребер, да, ну, вот упомянем. Хотя в принципе, да, согласен, m можно в общем-то так аккуратненько
[01:36:23.960 --> 01:36:28.960]  и убрать, потому что на самом деле это не... Значит, как конкретно... Что конкретно я тут имею в виду?
[01:36:28.960 --> 01:36:35.120]  Ну, имею в виду следующее. Разделим множество вершин на две части, на две половинки. Для каждой
[01:36:35.120 --> 01:36:40.360]  половинки я вот эту динамику честно напишу за 2 в степень пополам, а потом нам просто эти два
[01:36:40.360 --> 01:37:09.240]  гамильтона в пути надо скомпановать. Это же неправда. Неправда? Неведательно верно, что гамильтон в путь есть в любом панду, да, если... Бяка. Если его нет, мы получим, что его нет, но если он есть, то мы можем не получить, что он есть. Ну, согласен, согласен, да, да.
[01:37:09.240 --> 01:37:39.200]  Так, жалко, обмануть не удалось. Ну, хорошо. Ладно, ладно, хорошо, ладно, я не знаю тогда алгоритм, как делается 2 степень пополам. Вот, все хорошо, тогда не знаю, ладно. Как говорится, ладно, да. Как сказал бы классик в этом месте, не импровизируй больше никогда. Ну, нет, я буду импровизировать, так интереснее. Вот, вот, ладно. Ну, вообще, ну, на самом деле, ну, шутки шутки,
[01:37:39.200 --> 01:38:09.200]  ну, там действительно надо, то есть какие-то алгоритмы там в эту сторону, там перебор за более меньшую степень есть, конечно, да. То есть более того, там есть мечты даже, чтобы два было в степени какого-нибудь нот. Ну, чтобы там был, ну, какой-нибудь там, понятно, что два в степени лог, конечно, не получится, но два в степени... А вот два в степени полилог, это в принципе тоже там может быть вполне себе направление алгоритма. То есть там лог квадрат там какой-нибудь, вот это вот все. То есть это в принципе,
[01:38:09.200 --> 01:38:21.200]  может, еще и ничего. Вот, вот. Ну, в конце концов, это n в степени, вот что больше, n в степени логарифом m или два в степени n?
[01:38:21.200 --> 01:38:34.200]  Ну, давайте вопрос. Сравниваем, два в степени n и n в степени лог n.
[01:38:34.200 --> 01:38:49.200]  Ну да, заметим, что это два в степени лог n в квадрате, да. Ну, что больше, n или лог n в квадрате? Очевидно, n.
[01:38:49.200 --> 01:38:59.200]  Нет, ну, о-7-тотически, как всегда.
[01:38:59.200 --> 01:39:24.200]  Ну, пока утверждается, что можно как бы вот это вот допилить до n. А каким образом?
[01:39:24.200 --> 01:39:52.200]  Так, ну... Да, то есть не сильно сложным способом, но его понять не удалось. Не, просто если не сильно сложный способ, значит, если мы сейчас тут две минуты подумаем, то мы должны придумать.
[01:39:52.200 --> 01:39:54.200]  Чего? Какого состояния?
[01:39:54.200 --> 01:39:57.200]  Последний вопрос.
[01:39:57.200 --> 01:40:06.200]  Так, ну, хожу в DP-маску, и что оно даст? Просто к DP-маске, к DP-маске ж просто так ребро не прицепишь, должен знать конец.
[01:40:06.200 --> 01:40:08.200]  А, они свято верят, что нет?
[01:40:08.200 --> 01:40:22.200]  Нет, можно, конечно, можно считать, что DP от 2 в степени n, то есть DP от маски, наш шоу может заканчиваться...
[01:40:22.200 --> 01:40:30.200]  Так.
[01:40:30.200 --> 01:40:34.200]  Это как?
[01:40:34.200 --> 01:40:43.200]  Не можем. Не можем, мы же по першинам ходим рандомно.
[01:40:43.200 --> 01:40:46.200]  Да.
[01:40:46.200 --> 01:40:48.200]  Да.
[01:40:48.200 --> 01:40:51.200]  Ну.
[01:40:51.200 --> 01:41:04.200]  То-то и проблема, он слишком как-то идет, вот, да, это подлянка, да. То есть как бы нет, то есть какая-то ощущение, что да, с переходами тут, вот, к сожалению.
[01:41:04.200 --> 01:41:07.200]  Да.
[01:41:07.200 --> 01:41:13.200]  Так.
[01:41:13.200 --> 01:41:19.200]  А, так, хорошо, то есть храним, на шоу может заканчиваться путь, прошедший по этим маскам. Так, и?
[01:41:19.200 --> 01:41:20.200]  Да, логично.
[01:41:20.200 --> 01:41:26.200]  И что это нам даст?
[01:41:26.200 --> 01:41:30.200]  Да, дальше просто очень страшный пересчет показывает.
[01:41:30.200 --> 01:41:42.200]  Ну, странно, что он за 2 в степени n, потому что как бы очевидно, как вот за 2 в степени n пересчитать, но это не очень интересно.
[01:41:42.200 --> 01:41:52.200]  Ну-ка, и что?
[01:41:52.200 --> 01:41:56.200]  Пусть, пусть, пусть, даже интересно, да.
[01:41:56.200 --> 01:42:00.200]  Ой, боже мой.
[01:42:00.200 --> 01:42:07.200]  Так.
[01:42:07.200 --> 01:42:13.200]  А, ой.
[01:42:13.200 --> 01:42:21.200]  А, такой чит, да.
[01:42:21.200 --> 01:42:23.200]  А, я понял, да.
[01:42:23.200 --> 01:42:35.200]  Ну, хорошо, да, хорошо, значит такая наглость, да. Заметим, что, да, заметим, что список смежности, список вершин достижимых и заданной за 1 ребро можно хранить в виде масочки, да.
[01:42:35.200 --> 01:42:37.200]  Можно, да.
[01:42:37.200 --> 01:42:56.200]  Тогда идея такая, за 2 в степени n, если не быстрее, ну да, за 2 в степени n на самом деле, а можно даже и за 2 в степени n при желании, можно для каждого под множество вершин хранить множество ребер, которые можно из них провести, типа, куда они придут.
[01:42:56.200 --> 01:42:59.200]  Вот.
[01:42:59.200 --> 01:43:01.200]  Ну да, типа да.
[01:43:01.200 --> 01:43:23.200]  Ну тогда, если у вас для каждого под множество этот образ уже насчитать, то тогда в результате оказывается следующее, что если у вас получается вот так я пишу, маск dp от там 1 хрась-хрась n, то есть храним типа, что, то есть для каждой маски храним, где могут заканчиваться там путь, который прошел ровно по этим вершинам.
[01:43:23.200 --> 01:43:25.200]  Вот.
[01:43:25.200 --> 01:43:26.200]  Ну вот.
[01:43:26.200 --> 01:43:27.200]  Ну вот.
[01:43:27.200 --> 01:43:35.200]  Но тогда, соответственно, оказывается, что значит мы тогда берем эту маску, берем какие ребра мы можем к ней прицепить теоретически, автоматически.
[01:43:35.200 --> 01:43:42.200]  И после этого там за 1 получается там, что там мы получаем.
[01:43:42.200 --> 01:43:51.200]  То есть за какой-то там n, какое-то там вычитание понимаем, какие следующие вершины мы можем добавить.
[01:43:51.200 --> 01:43:53.200]  Так все понятно, о чем мы говорим.
[01:43:53.200 --> 01:43:55.200]  А как понять, какие ребра можно прицепить к маске?
[01:43:55.200 --> 01:43:57.200]  Значит идея такая, утверждение номер 1.
[01:43:57.200 --> 01:44:05.200]  Для каждой вершины мы храним маск out от v.
[01:44:05.200 --> 01:44:09.200]  Что такое маск out от v?
[01:44:09.200 --> 01:44:13.200]  Это маска всех, куда торчат ребра.
[01:44:13.200 --> 01:44:16.200]  Ну я не буду, не хочу, достижим, а обычно это когда путь существует.
[01:44:16.200 --> 01:44:17.200]  С соседей.
[01:44:17.200 --> 01:44:18.200]  Да.
[01:44:18.200 --> 01:44:19.200]  Всех соседей.
[01:44:19.200 --> 01:44:22.200]  Всем соседям, именно происходящим из веребра.
[01:44:22.200 --> 01:44:23.200]  Вот.
[01:44:23.200 --> 01:44:26.200]  Теперь заметим следующее.
[01:44:26.200 --> 01:44:36.200]  Теперь, если у нас есть маск такой, то по каждой маске я могу поставить, так сказать.
[01:44:36.200 --> 01:44:42.200]  То есть маск out 2 от маска.
[01:44:42.200 --> 01:44:48.200]  То есть я хочу рассмотреть множество соседей уже не у одной вершины v, а у под множества.
[01:44:48.200 --> 01:44:53.200]  Если у меня есть вот такая штука, я вот эту штуку за 2 в степени n насчитаю.
[01:44:53.200 --> 01:44:58.200]  Ну в тупую за 2 в степени n, но если чуть более умно, то 2 в степени n.
[01:44:58.200 --> 01:45:03.200]  Ну вот если я там для каждой маски начитаю младший единичный бит, например.
[01:45:03.200 --> 01:45:04.200]  Вот.
[01:45:04.200 --> 01:45:09.200]  После этого тогда у меня, значит, динамика здесь будет работать так.
[01:45:09.200 --> 01:45:16.200]  То есть вот вместо того, чтобы перебирать вот эти ребра, то есть на самом деле форик будет звучать так.
[01:45:16.200 --> 01:45:17.200]  Смотрите.
[01:45:17.200 --> 01:45:18.200]  Вот.
[01:45:18.200 --> 01:45:21.200]  То есть оказывается так.
[01:45:21.200 --> 01:45:25.200]  То есть пишем вот это вот dp mask.
[01:45:25.200 --> 01:45:43.200]  То значит пишем int n mask равно, соответственно, пишем прям вот этот вот маск out 2 от маска.
[01:45:43.200 --> 01:45:45.200]  Ну и дальше можно просто сказать перебираем.
[01:45:45.200 --> 01:45:52.200]  Перебираем просто for v, значит ev.
[01:45:52.200 --> 01:45:54.200]  Значит прям честно пишем.
[01:45:54.200 --> 01:45:57.200]  То есть прям можно for v от 0 до n-1.
[01:45:57.200 --> 01:46:07.200]  Если, значит, если в n-маске она есть, n-маск int 1 хресь-хресь v.
[01:46:07.200 --> 01:46:11.200]  И, но при этом в маске ее допустим нету.
[01:46:11.200 --> 01:46:23.200]  Там то есть не маск int 1 хресь-хресь v.
[01:46:23.200 --> 01:46:31.200]  То значит dp от маск или 1 хресь-хресь v.
[01:46:31.200 --> 01:46:34.200]  Значит или равно.
[01:46:34.200 --> 01:46:38.200]  Ну просто равно true в нашем интервизе.
[01:46:38.200 --> 01:46:46.200]  А, да, вы правы, вы правы, вы правы.
[01:46:46.200 --> 01:46:50.200]  Да.
[01:46:50.200 --> 01:46:52.200]  Нет, ну ладно там.
[01:46:52.200 --> 01:46:55.200]  Нет, или равно 1 хресь-хресь v скорее получается.
[01:46:55.200 --> 01:46:57.200]  Это не маск out.
[01:46:57.200 --> 01:47:00.200]  Да, мы в явном виде.
[01:47:00.200 --> 01:47:05.200]  Да, и конечно, что здесь у нас тогда уже не было вполне себе.
[01:47:05.200 --> 01:47:08.200]  То есть тут тип маск.
[01:47:08.200 --> 01:47:09.200]  Ну это я так пишу.
[01:47:09.200 --> 01:47:13.200]  Понятно, что это int, естественно, но как бы смысл в другом.
[01:47:13.200 --> 01:47:15.200]  Вот.
[01:47:15.200 --> 01:47:20.200]  Да, то есть вот такой пересчет у нас имеет место быть.
[01:47:20.200 --> 01:47:28.200]  Ну вот получается, что при такой жуте, то есть асимптотика получилась от 2 в степени n даже на n.
[01:47:28.200 --> 01:47:31.200]  Да, прикольно, спасибо.
[01:47:31.200 --> 01:47:35.200]  Да, маленький, маленький прикольный штука.
[01:47:35.200 --> 01:47:42.200]  Тут прям даже иногда напрашивается там она.
[01:47:42.200 --> 01:47:44.200]  Ну да, ладно.
[01:47:44.200 --> 01:47:47.200]  Ладно, не уверен, что она нам просто на халяву сейчас еще этот n убивается.
[01:47:47.200 --> 01:47:51.200]  Смотрим вообще все штуки, которые из любой вершины маски достижем.
[01:47:51.200 --> 01:47:55.200]  Это же не значит, что есть критонок путь, который заканчивается.
[01:47:55.200 --> 01:48:01.200]  Нет, в ДП написаны все вершины, на которых может заканчиваться гамильтонов путь по всей маске.
[01:48:01.200 --> 01:48:03.200]  Ну.
[01:48:03.200 --> 01:48:07.200]  То есть мы хотим взять маскал вот не от маски, а маскал вот от ДП от маски.
[01:48:07.200 --> 01:48:10.200]  Да, маскал тут ДП от маски.
[01:48:10.200 --> 01:48:13.200]  Ага, да, вы правы.
[01:48:13.200 --> 01:48:20.200]  Да, вы правы, вы правы.
[01:48:20.200 --> 01:48:23.200]  Так, хорошо.
[01:48:23.200 --> 01:48:24.200]  Ну да.
[01:48:24.200 --> 01:48:28.200]  Ну правда, помимо этого кода теперь у нас к сожалению еще там что-то есть.
[01:48:28.200 --> 01:48:33.200]  То есть там есть инициализация динамики, есть собственно вычисление вот этих вот маскаутов и МаксАут2.
[01:48:33.200 --> 01:48:35.200]  Но это несложно.
[01:48:35.200 --> 01:48:37.200]  Вот, да, хорошо.
[01:48:37.200 --> 01:48:41.200]  Ладно, пожалуй остановимся на этом в обсуждении этой задачи.
[01:48:41.200 --> 01:48:49.200]  Но основное, конечно, что тут надо обсудить, это конечно то, что называется ДП по профилю.
[01:48:49.200 --> 01:48:54.200]  Вот. Ну правда, ДП на профиле это конечно по факту частной случаи ДП на подмасках.
[01:48:54.200 --> 01:49:00.200]  Но определенная классика, определенные там интервьюальные подходы там все-таки есть.
[01:49:00.200 --> 01:49:11.200]  Но на самом деле заметим, что задача, но на самом деле задача в общем-то на ДП по профилю по-хорошему две.
[01:49:11.200 --> 01:49:13.200]  Такие две культовые есть.
[01:49:13.200 --> 01:49:17.200]  Это задача про доминожки, задача про симпатичные узоры.
[01:49:17.200 --> 01:49:19.200]  Вот.
[01:49:19.200 --> 01:49:25.200]  Да, но мы можем с вами быстренько обсудить задачу про доминожки.
[01:49:25.200 --> 01:49:28.200]  Итак, ну давайте обсудим. В чем задача про доминожки?
[01:49:28.200 --> 01:49:35.200]  Ну задача про доминожки у нас заключается в том, что жил был тут.
[01:49:35.200 --> 01:49:39.200]  То есть жил был тубличко.
[01:49:39.200 --> 01:49:41.200]  Там такую досочку ННМ.
[01:49:41.200 --> 01:49:43.200]  Хочется его заполнить доминожками.
[01:49:43.200 --> 01:49:46.200]  Хочется положить доминожки. Каждая доминожка должна две соседние клетки крыть.
[01:49:52.200 --> 01:49:56.200]  Вот. И хочется их покрыть так, чтобы каждая клетка была покрыта.
[01:49:56.200 --> 01:49:58.200]  И доминожки и тачали, и накладывались.
[01:49:58.200 --> 01:50:00.200]  Сколько способов?
[01:50:02.200 --> 01:50:04.200]  Ну по-разному.
[01:50:04.200 --> 01:50:06.200]  Ну тут смотря как писать.
[01:50:06.200 --> 01:50:12.200]  Нет, дальше в зависимости от ННМ возьмите вопрос, какая симпатичка вас удовлетворит.
[01:50:12.200 --> 01:50:13.200]  Всякое бывает.
[01:50:13.200 --> 01:50:19.200]  Потому что самое тупое, что можно сделать, это написать какой-нибудь ДП, там вида...
[01:50:19.200 --> 01:50:21.200]  Ой господи.
[01:50:21.200 --> 01:50:24.200]  Что я этим маркером пишу? У нас же зеленый есть.
[01:50:24.200 --> 01:50:27.200]  ДП житое масковое.
[01:50:30.200 --> 01:50:31.200]  Что это означает?
[01:50:31.200 --> 01:50:34.200]  Означает это следующее. Мы идем слева направо.
[01:50:34.200 --> 01:50:40.200]  Замостили жи столбцов, но при этом из житого столбца в жи плюс первый у нас что-то торчит.
[01:50:40.200 --> 01:50:43.200]  И у нас в масочках ранит, а что собственно таки?
[01:50:45.200 --> 01:50:52.200]  Это как бы однозначный процесс, потому что на каждом шаге мы просто в очередной столбец кладем доминожки,
[01:50:52.200 --> 01:50:56.200]  причем замощаем либо вертикально, либо горизонтально в следующий столбец.
[01:51:01.200 --> 01:51:06.200]  Если мы это насчитаем, то сразу автоматически получается, что ответ это ДП,
[01:51:06.200 --> 01:51:11.200]  а там какое получается МТ нулевое. То есть М столбцов замостили и ничего не торчит.
[01:51:12.200 --> 01:51:15.200]  Ну теперь возникает вопрос, а как...
[01:51:17.200 --> 01:51:19.200]  А как собственно эту ДП пересчитывать?
[01:51:20.200 --> 01:51:21.200]  Перебираем под маски.
[01:51:22.200 --> 01:51:23.200]  Ну вот.
[01:51:23.200 --> 01:51:25.200]  Перебираем под маски, которые нам подходят с предыдущим словом.
[01:51:26.200 --> 01:51:27.200]  Ну да, то есть там...
[01:51:28.200 --> 01:51:30.200]  Ну да, то есть смотрите, можно прямо даже код писать.
[01:51:30.200 --> 01:51:34.200]  То есть когда вы перебираете, то есть for g равно от 1 до n,
[01:51:35.200 --> 01:51:41.200]  for, там for маск равно от 0 до 1 х х n-1.
[01:51:43.200 --> 01:51:46.200]  И дальше там for, там p маск, то есть предыдущим.
[01:51:47.200 --> 01:51:48.200]  Перебираем предыдущую маску.
[01:51:50.200 --> 01:51:55.200]  Дальше пишем какую-то мистическую функцию if там our neighbouring.
[01:52:00.200 --> 01:52:05.200]  От маск, p маск и n.
[01:52:07.200 --> 01:52:11.200]  То там ДП житое масковое, да, там плюс равно бла-бла-бла-бла-бла-бла-бла.
[01:52:12.200 --> 01:52:18.200]  Вот, бла-бла-бла-бла-бла, бла-бла-бла-бла-бла-бла, бла-бла-бла-бла-бла.
[01:52:19.200 --> 01:52:21.200]  Вот.
[01:52:24.200 --> 01:52:26.200]  Ой, ой да, еще и да.
[01:52:27.200 --> 01:52:29.200]  Да, вот называется да, слишком много бла-бла было.
[01:52:30.200 --> 01:52:37.400]  так вот то есть можно писать вот такой код за сколько будет работать такой код
[01:52:37.400 --> 01:52:46.440]  ну да сам нет а если бы мечты мечты тут еще вопрос за какой симптутику работает вот это
[01:52:46.440 --> 01:52:58.160]  ну как сказать ну давайте смотреть для этого надо рассмотреть нот потому что смотрите был но тут
[01:52:58.160 --> 01:53:06.000]  надо внимательно смотреть тут еще то есть был а neighboring да потому что если вы тут
[01:53:06.000 --> 01:53:12.400]  передаете маска по маску n да вот то по-хорошему это как бы какая-то функция которая видимо
[01:53:12.400 --> 01:53:20.720]  проверяется как-то за n поэтому тут два варианта либо вы в тупую тупой вариант 4 в степени n на
[01:53:20.720 --> 01:53:28.880]  м на n да либо есть еще вариант предподсчитать эту функцию заметив что от же она никак не зависит
[01:53:28.880 --> 01:53:39.800]  и тогда это даст вам тут плюсик в принципе это оптимизация так разиков ну в несколько вот хотя
[01:53:39.800 --> 01:53:49.680]  конечно да чему должно быть n 4 степени было адекватно но я равно 10 ну может быть вот где-то
[01:53:49.680 --> 01:53:59.800]  10 да может 11 может 12 может это все вот значит а neighboring я вот но теперь надо следует вот то
[01:53:59.800 --> 01:54:04.720]  есть можно сделать так вот как-то теперь оптимизировать можно взять но вот но давайте
[01:54:04.720 --> 01:54:09.840]  но тут давайте внимательно посмотрим на кое-что потому что в этой функции будет записано скорее
[01:54:09.840 --> 01:54:15.040]  всего следующее но заметим что если что-то торчит следующий столбец то в этой клетке ничего не
[01:54:15.040 --> 01:54:21.040]  так читать с предыдущего столбца поэтому первую строчку которую можно написать это написать если
[01:54:21.040 --> 01:54:30.040]  то есть так и написать честно если п маск и маск то просто сразу выбрасываемся с криком false как
[01:54:30.040 --> 01:54:37.320]  мы собственно это всегда уже там полтора семестра делаем вот но в противном случае теперь надо
[01:54:37.320 --> 01:54:54.000]  вернуть что ну напишу так мы там мэй зилс битом вот все время у меня проблема как подвизки написать
[01:54:54.000 --> 01:55:05.920]  что нули можно это разбить на пары соседних а точно а то что сплит точно ну хорошо да нет тут ладно
[01:55:05.920 --> 01:55:09.800]  в чем даже не в том что я вот некоторые что-то я понял что я много лет писал сплит это и
[01:55:09.800 --> 01:55:17.320]  демонстрировал себя как человек который вообще не знает английского понимаете почему да отлично
[01:55:17.320 --> 01:55:30.160]  кто не понимает на всякий случай неправильный глагол да вот вот вот ну вот так что соответственно да
[01:55:30.160 --> 01:55:43.440]  так значит маска там или п маск вот вот но эта функция как-то за линию пишется кстати
[01:55:43.440 --> 01:55:49.360]  честно говоря нет честно говоря не знаю можно ли именно битовой магии сделать за единицу то есть
[01:55:49.360 --> 01:55:53.640]  нет я понятно что я могу сделать понятно что я могу сделать предподсчет этой функции за два
[01:55:53.640 --> 01:56:00.840]  в степене естественно да то есть да это никаких проблем нету но но вот но вот и можно сделать это
[01:56:00.840 --> 01:56:09.120]  именно битовой магии я честно говоря сказать не готов вот мне такого неизвестно вот вот но просто
[01:56:09.120 --> 01:56:13.640]  значит что это приятно да я конечно по дефолту продолжает работать за два в степенен но при
[01:56:13.640 --> 01:56:22.080]  этом говорит нам о том что можно перебирать только маски не пересекающиеся поэтому на самом деле
[01:56:22.320 --> 01:56:31.320]  можно здесь написать что-то типа но вон того то есть потому что надо перебирать по маске
[01:56:31.320 --> 01:56:39.640]  должно не пересекаться с маском то есть это означает что когда то есть фор там по маске
[01:56:39.640 --> 01:56:51.600]  значит являющиеся под масками такой маски как 1 х х n минус 1 минус маск ну например так вот
[01:56:51.640 --> 01:56:58.520]  как их перебрать но вот мы уже с вами обсудили вот теперь вы секает вопрос за сколько мы это
[01:56:58.520 --> 01:57:06.280]  сколько теперь это будет работать да но теперь мистический факт если вы перебираете пары маска
[01:57:06.280 --> 01:57:11.840]  то есть мы если пересекая перебирайте пары не пересекающихся под масок то оказывается
[01:57:11.840 --> 01:57:17.720]  вы перебирайте ровно 3 в степени n пар масок даже не от 3 в степени на ровно 3 степени n это вот
[01:57:17.720 --> 01:57:25.840]  важный факт почему это так да потому что заметим что если я напишу просто маск и по маск в столбик
[01:57:25.840 --> 01:57:33.160]  то я заметил что на в каждом разряде у меня должно быть либо 0 0 либо 0 1 либо 1 0 1 1 быть
[01:57:33.160 --> 01:57:40.520]  не должно то есть поэтому поэтому здесь все просто то есть получается она в каждой позиции
[01:57:40.520 --> 01:57:45.280]  три варианта поэтому всего 3 степени просто так и чисто задачи по комбинаторике может у вас даже
[01:57:45.280 --> 01:57:53.720]  такая была на дискретке ну или просто это известный факт а во а потому что вот этот
[01:57:53.720 --> 01:58:06.720]  перебор теперь за 3 степени ну потому что это более точное знание вот так да потому что о это
[01:58:06.720 --> 01:58:14.120]  означает что это может быть там 2 на 3 степени 57 на 3 степени там 179 на 3 степени на нет тут
[01:58:14.120 --> 01:58:19.720]  фишка в том что это ровно 3 степени то есть не больше и что самое главное не меньше то есть
[01:58:19.720 --> 01:58:24.120]  может там быстро что мы там оценили как ты знаете знаете как бывает оценили обратную функцию керман
[01:58:24.120 --> 01:58:30.920]  а там точно 7 только корень из обратной функции керману дознать вот была такая ситуация ну ладно
[01:58:30.920 --> 01:58:40.040]  не было так а может и была мы не знали вот вот поэтому так вот здесь то есть поэтому можно
[01:58:40.040 --> 01:58:44.800]  в принципе так кстати отсюда же автоматически следует что если вы перебираете маски их под
[01:58:44.800 --> 01:58:51.240]  маски то тоже получится 3 степени н ровно по этой же причине ну только тут допустимо будет там только
[01:58:51.240 --> 01:58:57.560]  будет до всем 1110 а 0 1 будет выкинута суть та же но вот на это просто хотелось упомянуть что для
[01:58:57.560 --> 01:59:04.920]  подмасски что это вот важный момент так что еще вот но хорошо ладно то есть всем то я хорошо
[01:59:04.920 --> 01:59:22.720]  значит выковырили получается сколько там 3 в степени n на м плюс и ну два степи ну да ну хорошо
[01:59:22.720 --> 01:59:32.320]  ладно хорошо убили до убили м и остался м да правда обычно м скорее всего больше либо ровно
[01:59:32.400 --> 01:59:37.560]  но у вас будет да потому что наверно туда 3 степени вы захотите поменьше но это уже
[01:59:37.560 --> 01:59:46.320]  другое ой кошмар вот я буду это стирать будет весело конечно да вот ну ничего вот но к
[01:59:46.320 --> 01:59:54.800]  сожалению конкретно этот конкретно такой метод уже к сожалению оптимизируется не очень но дальше
[01:59:54.800 --> 01:59:59.800]  впрочем на самом деле тут зависит куда вы хотите оптимизировать потому что ну дальше бывают
[01:59:59.800 --> 02:00:04.640]  экзотические подстановка постановка задачи которые предложил видимо там возможно там андрей
[02:00:04.640 --> 02:00:14.080]  сережа станкевич где-то в лохматом 2002 году что делать если у вас n где-то 5 а м 10 слотой
[02:00:14.080 --> 02:00:23.000]  нет просто не просто это была просто это просто была история да историческая задача просто там
[02:00:23.000 --> 02:00:29.280]  был просто вендуй станкевич контест один была дана задачи симпатичный узор это на вот оглашенная
[02:00:29.280 --> 02:00:43.800]  выше ограничения нет там количество способов нет она так не зацикливается она растет поэтому
[02:00:43.800 --> 02:00:52.680]  фишка в другом поэтому конечно все сводится к матрице но да но это да но это не проблема как
[02:00:52.680 --> 02:00:59.080]  бы но когда особенно когда матрица 6 на 6 это собственно никаких проблем нет вот то есть там
[02:00:59.080 --> 02:01:05.280]  полу то есть то есть вывод то есть то есть можно то есть асимптотика получается 8 степени на лог м
[02:01:05.280 --> 02:01:17.640]  иногда это оптимизация да что есть не факт я ну как сказать жарданов базис наверное есть всегда
[02:01:17.640 --> 02:01:23.880]  другой вопрос не смотря шоу называется жардановым байзесом да пошепом в жарданову нормальную форму
[02:01:23.880 --> 02:01:27.160]  матрицу привести можно всегда по моему другой вопрос еще она будет
[02:01:27.160 --> 02:01:54.680]  нет комплекса у нас же поле по модуле миллиарде семь обычно нет это не рекуррент это именно
[02:01:55.240 --> 02:02:01.440]  рекуррента на столбцы написано потому что вы матрица матрицу размера 2 в степени
[02:02:01.440 --> 02:02:09.480]  возбудить степень а там не матрица 6 на 6 там 64 на 64 да так так ну давайте так давайте
[02:02:09.480 --> 02:02:15.280]  вспомним откуда там вообще матрица берутся все так отлично так у тебя столбец у тебя какого
[02:02:15.280 --> 02:02:27.040]  размера 2 степени ну вот а 2 степень ты перемножаешь за куб 2 степени в кубе это да да то есть
[02:02:27.040 --> 02:02:32.080]  может кому-то да я могу написать что это вот равно 2 степени 3 и на лог м может кому-то так привычнее
[02:02:45.280 --> 02:03:06.120]  метамка методом кого кита масса да мы прошли метод кита масса так погодить погодить сейчас
[02:03:06.120 --> 02:03:11.000]  этот а этот метод насколько работает если мы тут вместо коэффициентов столбцы начинаем
[02:03:11.000 --> 02:03:29.640]  подставлять такой ряд имеет рекуррент рят имеет рекурренту если у тебя только в этом
[02:03:29.640 --> 02:03:44.560]  году столбцы находится тогда
[02:03:59.640 --> 02:04:05.760]  нет параде вредится не запустить берли кэмп это хорошо осталось только вы запустить мы еще пока не
[02:04:05.760 --> 02:04:13.280]  знаем как к сожалению да очень хотелось бы честно говоря узнать но пока пока нет вот да увы вот но
[02:04:13.280 --> 02:04:17.120]  это другой вопрос да потому что я пока не очень понял как взял так чтобы это была именно вот
[02:04:17.120 --> 02:04:25.920]  линейная рекуррента чтобы там создать сдвиг на 1 ничего не попортил ну так ну потому что была
[02:04:25.920 --> 02:04:30.560]  линейная рекуррента надо чтобы вот этот выражался через линию это это это это а потом сдвинули
[02:04:30.560 --> 02:04:35.600]  на 1 то есть я не этот а следующий и тоже будет линейная рекуррента причем такая же а как
[02:04:35.600 --> 02:04:45.480]  честно говоря тут это сделать вот здесь чтобы без столбцов обошлось я ну как я уже говорю мне не видно
[02:04:45.480 --> 02:04:54.120]  я не знаю да как вы это все я не я не знаю вот ладно но на самом деле тем более что в этой задаче это в
[02:04:54.120 --> 02:04:59.400]  общем-то и не нужно потому что есть как бы другие подлое ограничение потому что самое подлое
[02:04:59.400 --> 02:05:08.600]  ограничение в этой задаче это когда n умножить на m не превосходит 400 и это оказывается подло
[02:05:08.600 --> 02:05:18.600]  потому что 3 в степенье начинает вылетать в трубу да чего но вот это вылетает трубу вот это вам
[02:05:18.600 --> 02:05:32.160]  тем более не помогает поэтому вместо этого появляется метод изломанного профиля да да то
[02:05:32.160 --> 02:05:40.000]  есть он неожиданно да он оказывается неожиданно приятен вот послушаю вас называется да
[02:05:40.000 --> 02:06:00.000]  летающая гадость так так давайте разбираться дальше смотрите то есть идея будет такая то есть
[02:06:00.000 --> 02:06:05.400]  мы будем то есть раньше то есть как в чем у нас проблемы да у нас там есть какие-то
[02:06:05.400 --> 02:06:12.160]  состояния есть какой-то какой-то длинный пересчет значит мы сейчас изобретем состояние чтоб пересчет
[02:06:12.160 --> 02:06:18.200]  был за единицу как нам это сделать а мы будем говорить аккуратно ладно мы же будем замощать
[02:06:18.200 --> 02:06:28.720]  не целый столбец на каждом шаге а мы будем замощать по клеточке то есть вот идея будет
[02:06:28.720 --> 02:06:35.160]  такая мы дошли вот до этой клеточки говорим что все выше ее и левее ее мы замостили только
[02:06:35.160 --> 02:06:41.360]  возможно куда-то вправо от границы что-то торчит но вот и теперь наша задача эта клетка
[02:06:41.360 --> 02:06:48.320]  не замущена теперь надо положить доминожку либо вертикальную либо горизонтально то есть
[02:06:48.320 --> 02:06:56.640]  количество то есть dp у нас получается от икс там ну что-то типа от и ж или даже
[02:06:56.640 --> 02:07:06.360]  джи и и маск то есть маск куда торчит все маска можно по-разному задавать кстати
[02:07:06.360 --> 02:07:12.040]  вот разные способы вот вытекает вопрос вот в каком порядке эти клеточки записывать
[02:07:12.040 --> 02:07:21.640]  а вот а вот не факт вот я не знаю мне что-то нравится вариант когда начинаю записывать
[02:07:21.640 --> 02:07:34.280]  вот это 0 1 2 3 и так далее да тогда просто оказывается то есть код тогда выглядит
[02:07:34.280 --> 02:07:43.080]  примерно следующим образом ну то есть тут получается конечно динамика вперед то есть
[02:07:43.080 --> 02:07:52.400]  понятно что изначально мы пишем что d 0 0 0 равно 1 допустим да а дальше а дальше мы пишем так
[02:07:52.400 --> 02:08:07.440]  for g равно от 0 до n минус 1 то есть for и равно от 0 до n минус 1 ну как всегда for маска равно от
[02:08:07.440 --> 02:08:19.560]  0 до 1 хресь хресь n минус 1 значит дальше говорим так ну первое что хочется сделать это конечно там
[02:08:19.560 --> 02:08:35.640]  лонг-лонг там лонг-лонг ссылка d равно dp житое и т масковое почему ну потому что вы до радости
[02:08:35.640 --> 02:08:40.680]  мне там придется писать плюс равно вот эта гадость да но если я буду писать плюс равно эту
[02:08:40.680 --> 02:08:45.960]  гадость то обратите то тогда он как бы формально если без оптимизации то компьютеру придется
[02:08:46.800 --> 02:08:52.200]  вот эту вот ячейку в трехмерном массиве а это жирная операция потому что в этой жирной операции
[02:08:52.200 --> 02:08:59.460]  ему придется взять значит там чё-то вот этот то есть вот это вот же и умножить его на вот размер
[02:08:59.460 --> 02:09:04.680]  этого двумерного массива прибавить не умноженное на размер вот этого одномерного массива плюс
[02:09:04.680 --> 02:09:14.140]  еще маска прибавить и все это прибавить к дпшки ну к указателю то есть оказывается кстати
[02:09:14.140 --> 02:09:18.980]  настолько жирная операция, что с какого-то момента оказывается выгодно не использовать
[02:09:18.980 --> 02:09:23.260]  многомерные массивы, использовать одномерные массивы, а перегонки вот этих там трех или там
[02:09:23.260 --> 02:09:28.580]  сколько у вас индексов в один делать вручную. То есть у меня был даже такой прецедент, когда у
[02:09:28.580 --> 02:09:36.500]  меня была пятимерная динамика. Вот я написал пятимерный массив и он получил tail. Я переписал
[02:09:36.500 --> 02:09:42.380]  индексы честно, то есть индексы сказал массив одномерный, а индексы прям вот функцию написал,
[02:09:42.380 --> 02:09:47.780]  как по пяти индексам получить один и по одному получить пять. Все, залетел там с полуторакратным
[02:09:47.780 --> 02:09:58.580]  запасом. Хотя нет, по-моему и массив. Точно я не мог написать пятимерный вектор.
[02:09:58.580 --> 02:10:14.460]  Нет, тот и прикол. Это был пятимерный массив. Нет, пятимерный вектор я точно не написал. Нет,
[02:10:14.460 --> 02:10:19.580]  ну да, совершенно верно. Так вот выясняется, что если я это делаю вручную, почему-то он это делает
[02:10:19.580 --> 02:10:27.620]  лучше. То есть видимо там как-то, ну просто вот это мой опыт получился такой. В чем это было
[02:10:27.620 --> 02:10:32.500]  убедительно, потому что tail был 15 секунд в задаче. То есть как бы знаете, когда tail заменяется на
[02:10:32.500 --> 02:10:41.460]  ok с результатом 9.2 как-то. Сигара код форсуса, если что. Так вот, но есть вот действительно такое,
[02:10:41.460 --> 02:10:46.140]  может быть, оптимизация, которая поможет вам, если не асимпатически, то хотя бы по сократить
[02:10:46.140 --> 02:10:52.580]  количество кода. Берем вот такую ссылку D. И вот сейчас я продемонстрирую, как ее использовать.
[02:10:52.580 --> 02:11:04.900]  Ну начнем с того, что Dp. А, ну во-первых, вам конечно придется написать int ni равно i плюс 1.
[02:11:04.900 --> 02:11:13.860]  Там, допустим, запятая, nj равно j. Ну придется тут рассматривать. Если оказалось, что i равно n
[02:11:13.860 --> 02:11:22.260]  минус 1, то как бы ni равно 0, запятая, nj равно j плюс 1. Да, ну я здесь уже это напишу, хотя в принципе
[02:11:22.500 --> 02:11:27.860]  перед форум в маске это можно было написать. Ну потому что понятно, ni и nj это как бы следующие i и j.
[02:11:27.860 --> 02:11:38.140]  Так вот, первый переход, который я делаю, это Dp от nj, ni и. Ну в моей интерпретации получается так.
[02:11:38.140 --> 02:11:49.420]  Маск хрязь хрязь один. А, нет, вру. Начать надо с того, что если оказывается, что в этой маске
[02:11:49.420 --> 02:11:57.020]  битик есть, вот то есть клеточка уже занята, она торчит, то тогда надо просто сказать, что Dp
[02:11:57.020 --> 02:12:11.860]  njt ni t маск хрязь хрязь один плюс равно D. Все. Ну я там не буду сейчас вот это по модулю там миллиард
[02:12:11.860 --> 02:12:22.180]  7 писать, просто плюс равно D. Да, мы количество способов считаем, да, конечно. Нет, задача можно ли замастить, да или нет, она слишком тривиальная.
[02:12:22.180 --> 02:12:34.740]  Вот, а если масочка не занята, то надо думать, что класть. Ну горизонтальную доминушку можно положить всегда
[02:12:34.740 --> 02:12:53.780]  и получится Dp от nj, ni и там маск хрязь хрязь один или 1 хрязь хрязь n-1. Вот. Вот. Ну вот в моем способе получается так.
[02:12:53.780 --> 02:13:04.060]  Так, ну теперь проверяем, что если оказалось, что i плюс 1 все еще меньше, чем n и при этом выяснилось,
[02:13:04.060 --> 02:13:25.180]  что маск n-2 тоже пусто, то тогда кладем вертикально доминушку nj ni t значит маск хрязь хрязь один или один плюс равно D.
[02:13:25.180 --> 02:13:53.100]  Да, преимущество вот, то есть у этого кода оказывается преимущество масса, потому что преимущество просто, во-первых, то есть мало того, что этот код теперь работает за асимптотику 2 в степени n на n на m
[02:13:53.100 --> 02:14:07.020]  и это все, да, состояние динамики вот столько, но зато переходы за 1 обчитываются, да, то есть это просто уничтожает просто спокойно там все эти ваши 3 в степени, которые там были, но 2 в степени на n меньше, чем 3 в степени, правильно? Вот.
[02:14:07.020 --> 02:14:26.940]  Так еще и приятность здесь заключается в том, что это буквально все. То есть там раньше помимо вот этого форика в динамике надо какие-то функции писать, битвы, там проверки какие-то, какие-то там маски соседние, не соседние, предподсчеты, а тут прям буквально все.
[02:14:26.940 --> 02:14:40.860]  То есть кроме там мемсета, ДПшки и в общем-то там выковырения ответа больше ничего писать не надо. Вот, это называется ДП по изломанному профилю.
[02:14:40.860 --> 02:14:55.780]  Прощай, ну почему? Ну мы могли бы не делать имперсант, но сделали мы для того, чтобы вот так писать.
[02:14:55.780 --> 02:15:24.700]  Да, что? Действительно, пожалуйста, можно константу, ну я не знаю, может это быстрее будет, я не ставлю, может компилятор там возрадуется действительно от чего-то, но нет, не возрадуется.
[02:15:24.700 --> 02:15:49.620]  Но всякое бывает. Так что это у нас что касается ДП на подмазках. Так, ну хорошо. Так, значит это такую дырочку по ДП закрыли. Так, есть ли тут еще какие-то вопросы?
[02:15:54.700 --> 02:16:06.620]  Хотелось бы, то есть честно скажу, честно говорю, только пока состояние здоровья не позволило мне рассказать его сегодня, а так самому очень хочется.
[02:16:06.620 --> 02:16:34.540]  Вот. Ладно, попробуем ликвидировать. Как-то вот как-то напоминает вот эта вот эта зачистка юзи до золот 1. Ну вот да, то есть как бы да, то есть какая-то вершина зеленая, если вершина помечена делаем ее зеленой.
[02:16:34.540 --> 02:17:04.460]  Ну ладно, ну так и ладно. Ну хорошо, да, ладно, отдаленные, отдаленные, конечно, ассоциации, да. Ну не, ну как сказать, чем более отдаленные задачи, тем более там остаться, тем более потом на контест могут приходить жалобы, что все задачи одинаковые, хотя если формально тыкнуть, то выяснится, значит вообще на разные темы и так далее, но как бы, но видимо у кого-то видимо за эти казалось бы разные задачи отвечает видимо один отдел мозга.
[02:17:04.540 --> 02:17:34.460]  Ну вот. Ух ты! Ну мало ли, ну. Не, ну как это, да, да, да. Нет, ну как-то, знаете, нет, есть же это классика какая-то, какие вино лучше всего? То есть это там, то есть конечно, то есть французы знают, что конечно наши вино самые красивые, там самые лучшие, самые грыстые, самые вкусные.
[02:17:34.460 --> 02:18:04.380]  Но нет, конечно же, все грузины знают, что наоборот грузинские вино, конечно же, самые лучшие, самые восхитительные из наших гор. Ну вот, ну конечно, там рядом приходит веселый молдаваник, говорит, что у нас самые веселые вино, вино в Молдавии, но вот, но только евреи эти тихо улыбаются в сторонке, потому что они-то знают, что все эти вино мы наливаем из одной бочки, вот, да, сложный прикол, не обращайте внимания, да, вот.
[02:18:04.460 --> 02:18:24.380]  Вот, да, не знаю, да, при чем тут это вообще, да, не важно, но да, что нас, на самом деле, да, что нас, на самом деле, да, все задачи по программированию, это на самом деле задачи на хакарасика, да, да, именно поэтому мы его изучаем на втором курсе, потому что это самый великий алгоритм, да.
[02:18:24.860 --> 02:18:25.180]  Да.
[02:18:29.460 --> 02:18:29.860]  Вот.
[02:18:30.860 --> 02:18:48.980]  Ой, но господи, записывай многочлен, как строчку запускаем хакарасика, все, все, хакарасик нужен, только если вы перемножаете более, чем два многочлена, да, а два многочлена перемножаются префиксункой вообще, да, вот, да, вот.
[02:18:48.980 --> 02:18:49.500]  Ладно, так, ладно, поэтому давайте пока закроем, так, давайте закроем дырочку попроще, значит, пришло время узнать, что такое БФС, не, не, я, значит, рекомендую не отключаться, да, так, что как говорится, да, рекомендую не отключаться, потому что кое-что интересное там, скорее всего, вы все-таки узнаете, потому что, да, сейчас вы, да, потому что, возможно, сейчас алгоритм Д-экстрим мы сейчас выведем, конечно, из немножко неожиданного места, да,
[02:19:18.980 --> 02:19:48.980]  вот, значит, потому что, смотрите, просто до чем с нуля, вот, предположим, что у нас, представьте, у нас, то, программирование только появилось, и у нас возникла мечта находить кратчайшие пути в графе, как же это делать, ну, давайте начнем с самой простой постановки, какая у нас самая простая постановка, ну, просто дан невзвешенный какой-нибудь граф
[02:19:48.980 --> 02:20:18.980]  и давайте, ну, так, честно, честно, честно его искать, ну, вот, честно, хочется найти кратчайшее расстояние от вершины С до всех остальных вот именно в ребрах, ну, ладно, ладно, портить доску, так, портить доску или нет, так, знаете, что, давайте, так, давайте я лучше сделаю то, что давно пора сделать и, собственно, две минуты потрачу, все, я быстро, и так, вот, значит,
[02:20:18.980 --> 02:20:48.980]  вот, допустим, у нас теперь есть какой-нибудь там веселый граф, я даже большой нарисую, граф, да, у нас был ДФС, поэтому в этом и верим, да, ну, при желании можете считать, что граф это такой объект с вершинами и ребрами, значит, вершины это просто какое-то конечное множество ребра, это, значит, такая пара вершин, вот, нет, ребро это пара,
[02:20:48.980 --> 02:21:18.980]  ну, это если кратных ребр нет, так что лучше так не говорить, нет, ну, вот, нет, ну, ладно, с точки зрения задачи о кратчайших путях, конечно же, там, это не надо, да, вот, значит, смотрите, значит, поехали, как найти кратчайший путь, ну, просто буквально первая идея, которая может прийти в голову это, конечно,
[02:21:18.980 --> 02:21:46.980]  знаменитый волновой алгоритм, почему ФФТ, а, ну, а, такие ассоциации, ну, да, синуска, синус, нет, все гораздо проще, значит, волновой алгоритм или мы могли бы его назвать слоистым, потому что волна номер 0, все вершины находящиеся на расстоянии 0, то есть это вершина С,
[02:21:46.980 --> 02:22:16.980]  в следующую волну попадут все вершины находящиеся от С на расстоянии 1, то есть в следующую волну попадут все вершины на расстоянии 2, ну, и так далее, вот, будет 3, вот, будет 4, что там еще будет, не на столько, да, ну, ладно, там будет 5, тут что будет, там будет, там будет, там будет, там будет, там будет, там будет,
[02:22:16.980 --> 02:22:41.980]  так, ну, в нашем случае получится 6, 7, 8, рано, пока еще нету, да, ну, да, спасибо, согласен, так, вот, так, так, так, так, так, так,
[02:22:41.980 --> 02:23:10.980]  так, так, так, значит, тогда 7 будет вот так вот, а 8 будет вот так, хорошо, да, в принципе, заметим, что между слоями могут быть ребра не только из слоев следующей, могут быть из слоев внутри себя, могут быть из слоев предыдущие какие-нибудь, и так далее, вот, вот, примерно так это и выглядит, а как это пишется,
[02:23:10.980 --> 02:23:40.980]  вот, чисто терминологический вопрос, потому что дело в том, что этот алгоритм я буду писать не совсем так, как мы пишем классический BFF, хотя, конечно, формально говоря, наверное, можно, ну, и потом, знаете, просто тут, конечно, надо копнуть вообще, как бы, как оно так исторически слышно, вообще, кажется, поиск ширину это способ обхода графа, то есть это способ выписать вершины в паре в каком-то порядке все-таки, да,
[02:23:40.980 --> 02:24:10.980]  ну, правда, как и поиск глубину это способ как бы обойти вершины, то есть записать их в каком-то порядке, вот, а наш полновой алгоритм, значит, я все-таки сейчас код напишу, потому что, значит, мы на этот код будем ориентироваться, значит, он будет писаться так, я просто делал то, что я эти волны буду хранить в явном виде, да, именно, у меня будет vector, vector int, waves,
[02:24:10.980 --> 02:24:36.980]  но, конечно же, это никоим образом не отменяет там vector int, там, допустим, какой-нибудь D, ну, мог бы написать use, но не хочу, значит, смотрите, расстояние, значит, ну, хорошо, да, ну, можно написать dist, но просто, по-моему, это слово где-то в STL-е случайно есть, нет?
[02:24:36.980 --> 02:25:05.980]  Ну, хорошо, нет, ну, мы можем писать using a STD-вектор, да, using a STD-вектор и не парится, да, значит, да, тут мы сразу пишем n и inf, какой-нибудь, да, ну, давайте ins напишем,
[02:25:05.980 --> 02:25:30.980]  так, здесь у нас слоев у нас бывает n, просто n, нет, ладно, для явности напишем n и вот, ну, это как бы что вы хотите положить в каждый вектор, ну, как бы вы должны как-то ему сказать, что вы хотите положить вектор, ну, фигу, да, ну, вот, как пишет фига на C++, вот таким вот образом,
[02:25:30.980 --> 02:25:57.980]  вот, соответственно, да, так вот, dist от s равно 0 пишем мы и, конечно же, там waves от 0 скажем, что это равно s, теперь мы говорим честно for int там wave равно 0 wave меньше n
[02:25:57.980 --> 02:26:02.980]  значит n плюс plus wave
[02:26:02.980 --> 02:26:25.980]  значит, смотрите, что тут надо написать, значит, ну, тут мы честно перебираем for int v, значит, в waves от v wave
[02:26:25.980 --> 02:26:53.980]  значит, и тут мы и говорим, значит, for int nv, ну, видимо, у вас там есть какой-то список смежности, да, graph от v, и что у нас тут получается, вот, да, да, да, если оказалось, что dist от nv больше, чем dist от v плюс 1
[02:26:53.980 --> 02:27:16.980]  или в нашем случае, ну, вот, но на самом деле, да, можно dist от v, но заметить, что dist от v и wave это буквально одно и то же, вот, плюс 1, то, значит, пишем dist от nv равно dist от v плюс 1
[02:27:16.980 --> 02:27:35.980]  и, соответственно, waves от dist от v плюс 1 вот этого, точка pushback, pushback от v, for nv
[02:27:35.980 --> 02:28:02.980]  вот такую штуку мы пихнем, вот мы ее пихнули, да, вот, то есть вот это мы будем называть волновой алгоритм, да, работает, ну, вот, потому что это мы будем называть волновой алгоритм, но, конечно, есть то, что мы будем называть bfs
[02:28:02.980 --> 02:28:19.980]  то есть вопрос, конечно, что из этого bfs, вполне вероятно, но, как известно, конечно, у конкретно этого bfs есть, конечно, более простая реализация, реализация, ну, совсем известной очередью, да, то есть там вектор int
[02:28:19.980 --> 02:28:26.980]  ну, допустим, dist опять же, да, от n и inf, давайте уж упомянем, и есть, конечно, q
[02:28:26.980 --> 02:28:45.980]  вот, ну, изначально мы пишем, да, dist от s равно 0, q.push s, да, и тут мы неожиданно говорим while не q.
[02:28:45.980 --> 02:29:08.980]  пока очередь не пустая, значит, мы говорим int v равно q.front q.pop, вот, то получается, что for int nv graph от v
[02:29:08.980 --> 02:29:37.980]  и оказывается, что если, что у нас тут, ну, понятно, если dist от nv больше, чем dist от v плюс 1, то тогда оказывается, что dist от nv равно dist от v плюс 1, ну, вот, и, соответственно, q.push от nv
[02:29:37.980 --> 02:29:56.980]  вот, это у нас классический, это мы будем называть классический bfs, но мы так будем называть, да, кстати, действительно, есть ваша задача доказать, что этот алгоритм вообще ищет кратчайшее расстояние, то как бы при вот таком волновом алгоритме это становится максимально наглядно,
[02:29:56.980 --> 02:30:11.980]  потому что в терминах этого алгоритма заметим, что оказывается в каждый момент времени, то есть оказывается следующее, что сначала в очереди, потому что сначала в q находится просто нулевой слой,
[02:30:11.980 --> 02:30:30.980]  потом после того, как вы обработаете нулевой слой, там будет находиться, то есть там wave, фактически все waves первое, потом пока вы будете доставать waves первое, вы туда, собственно, в очередь наложите waves второе и так далее.
[02:30:30.980 --> 02:30:38.980]  Ну вот, так же и отсюда будет следует, что такой алгоритм действительно удобно работает, то есть без всяких векторов-векторов.
[02:30:38.980 --> 02:30:53.980]  Вот, так, ну хорошо, говорим мы, первую задачу мы решили, даже за W plus E, но приходит время, наверное, повысить планочку.
[02:30:53.980 --> 02:31:17.980]  Надо ввести VISA. Какие VISA? 1K. 1K, конечно, где K, но K пусть будет пока небольшое, там надо 50.
[02:31:17.980 --> 02:31:27.980]  Да, да, спасибо, да, это важно.
[02:31:27.980 --> 02:31:57.980]  А, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да
[02:31:57.980 --> 02:32:27.980]  да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да,
[02:32:27.980 --> 02:32:57.980]  да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да,
[02:32:57.980 --> 02:32:59.980]  да, да, да, да, да, да, да, да, да, да, да.
[02:33:27.980 --> 02:33:29.980]  Да, да, да, да, да, да, да, да, да, да, да, да, да.
[02:33:57.980 --> 02:33:59.980]  Да, да, да, да, да, да, да, да, да, да, да.
[02:34:27.980 --> 02:34:45.980]  Да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да.
[02:34:45.980 --> 02:34:47.980]  Ладно, вернемся к делу.
[02:34:47.980 --> 02:34:49.980]  Вот, значит, смотрите.
[02:34:49.980 --> 02:34:53.980]  Итак, что же делать, если у нас есть ребра от одного до К?
[02:34:53.980 --> 02:35:03.980]  Да, первая тупая идея, которая может приходить в голову, свести задачу в предыдущий путем распила каждого ребра на К частей.
[02:35:03.980 --> 02:35:05.980]  Ну или сколько там?
[02:35:05.980 --> 02:35:07.980]  Не, ну, пока К мелкая, можно было бы так и сделать.
[02:35:07.980 --> 02:35:09.980]  Вот вам В плюс ЕК и радость.
[02:35:09.980 --> 02:35:14.980]  Но когда К становится прям большим, это не очень.
[02:35:14.980 --> 02:35:19.980]  Потому что когда бы участвовать там В, допустим, 100 тысяч, а Е это там есть 2 миллиона.
[02:35:19.980 --> 02:35:23.980]  Поэтому мы пойдем другим путем.
[02:35:23.980 --> 02:35:26.980]  Мы не знаем, что такое Д-экстра.
[02:35:26.980 --> 02:35:28.980]  Мы выводим все с нуля.
[02:35:28.980 --> 02:35:33.980]  Нет, да, можно написать ЕФФТ.
[02:35:33.980 --> 02:35:35.980]  Вопрос зачем?
[02:35:35.980 --> 02:35:48.980]  Ну, если ты умеешь сразу, теперь надо сравнивать, про многочлены говорить, какие многочлены меньше кого еще.
[02:35:48.980 --> 02:35:52.980]  Ага, да, БФС на многочленах, классно, да.
[02:35:52.980 --> 02:35:54.980]  Значит, смотрите.
[02:35:54.980 --> 02:35:56.980]  На самом деле есть иожидная читерская вещь.
[02:35:56.980 --> 02:36:00.980]  То есть, оказывается, вот этот волновой алгоритм прекрасно пишется.
[02:36:00.980 --> 02:36:02.980]  Его можно писать так.
[02:36:02.980 --> 02:36:07.980]  То есть, просто, ну вот, сейчас, погодите, ой.
[02:36:07.980 --> 02:36:09.980]  Ну ладно, не будем все сказать.
[02:36:09.980 --> 02:36:20.980]  То есть, идея будет заключаться в том, что у нас волн будет теперь N умножить на К плюс 1.
[02:36:20.980 --> 02:36:23.980]  Вот.
[02:36:23.980 --> 02:36:25.980]  Вот.
[02:36:25.980 --> 02:36:27.980]  Да, сейчас, давайте, нет, смотрите.
[02:36:27.980 --> 02:36:31.980]  Нет, погодите, погодите, давайте сейчас только внимательно смотреть.
[02:36:31.980 --> 02:36:32.980]  Да, надо.
[02:36:32.980 --> 02:36:38.980]  Поэтому, смотрите, значит, сейчас мы, знаете, давайте для удобства я даже это все сотру.
[02:36:38.980 --> 02:36:42.980]  Потому что, ну, потому что, то есть, код, конечно, будет очень похож.
[02:36:42.980 --> 02:36:46.980]  Конечно, если я сейчас писал, конечно, на проекторе, я просто там несколько строчек вставлял.
[02:36:46.980 --> 02:36:48.980]  Ну, значит, смотрите, что поменяется.
[02:36:48.980 --> 02:36:51.980]  Перебираем, значит, тут до N умножить на К.
[02:36:51.980 --> 02:36:53.980]  Значит, перебираем.
[02:36:53.980 --> 02:37:00.980]  Значит, four int V двоеточие, вот, да, эту строчку я зря стер.
[02:37:00.980 --> 02:37:03.980]  Waves от wave.
[02:37:03.980 --> 02:37:05.980]  Ага.
[02:37:05.980 --> 02:37:06.980]  Вот.
[02:37:06.980 --> 02:37:08.980]  Значит, а тут теперь делаем так.
[02:37:08.980 --> 02:37:14.980]  Так, ну первое, что надо сделать, если оказалось, что dist, вот сейчас это будет важно, сейчас вы увидите.
[02:37:14.980 --> 02:37:16.980]  Почему сразу проверку пишу?
[02:37:16.980 --> 02:37:18.980]  Если dist от v равно wave,
[02:37:18.980 --> 02:37:24.980]  потому что сейчас будет очень удобно действительно это делать вот так.
[02:37:24.980 --> 02:37:35.980]  Значит, теперь four, значит, значит, такой картежик, допустим, v, n, v, w, graph от v.
[02:37:35.980 --> 02:37:42.980]  Ну, то есть, я перебираю торчащие ребра из вершины v, вот вершину v с весом w.
[02:37:42.980 --> 02:37:55.980]  Значит, смотрите, если оказалось, что dist от n, v оказался больше, чем dist от v плюс w,
[02:37:55.980 --> 02:37:59.980]  dist от v плюс w, то что?
[02:37:59.980 --> 02:38:10.980]  То тогда, естественно, мы объявляем, что, смотрите, я все делаю, dist от n, v равно dist от v плюс w.
[02:38:10.980 --> 02:38:13.980]  И что еще?
[02:38:13.980 --> 02:38:20.980]  А, ну и waves от n, v точка push от v.
[02:38:23.980 --> 02:38:27.980]  Да-да-да, waves от dist от n, v, конечно.
[02:38:27.980 --> 02:38:29.980]  Ой, давайте лучше.
[02:38:29.980 --> 02:38:31.980]  Да-да-да, тут, конечно, да.
[02:38:31.980 --> 02:38:33.980]  Waves от d.
[02:38:33.980 --> 02:38:41.980]  Спокойно, спокойно, дальше веселее будет, да.
[02:38:41.980 --> 02:38:48.980]  Зачем мы храним график? Мы же говорили, зачем мы храним? Откуда и куда?
[02:38:48.980 --> 02:38:54.980]  А там, ну просто обычно это будет тип edge, а в типе edge уже как-то тупо не хранить начальную вершину.
[02:38:54.980 --> 02:38:59.980]  Так что да, так-то, так-то, конечно, нет, но так хоть понять не будет.
[02:39:00.980 --> 02:39:03.980]  Вот, то есть вот есть такой алгоритм.
[02:39:03.980 --> 02:39:09.980]  Ну то есть, смотрите, идейно, конечно, алгоритм был бы красивый, если бы мы эти хранили не векторы, а листы.
[02:39:09.980 --> 02:39:17.980]  И если вершина на самом деле вот в этом месте лежит в какой-то волне, но не в той, то имело бы смысл ее из этой волны перетащить.
[02:39:17.980 --> 02:39:21.980]  То есть удалить из той волны и поставить в эту.
[02:39:21.980 --> 02:39:29.980]  Я мог бы тут написать действительно, что давайте это будет вектор STD листов и для каждой вершины хранить итератор на нее, там вот это все, да.
[02:39:29.980 --> 02:39:35.980]  Но на самом деле в этом нет необходимости, потому что на самом деле можно просто вот так написать.
[02:39:35.980 --> 02:39:46.980]  То есть обратите внимание, что суммарно, кстати, к чему равно суммарное количество волн в таком графе, когда мы каждую вершину можем несколько раз добавить?
[02:39:46.980 --> 02:39:48.980]  Суммарный размер?
[02:39:48.980 --> 02:39:50.980]  Да.
[02:39:50.980 --> 02:39:55.980]  Ну можно сказать НК, конечно, да, можно заметить, что каждую вершину мы добавим не более чем К раз.
[02:39:55.980 --> 02:40:00.980]  Но на самом деле можно делать оценку еще тупее. Е.
[02:40:00.980 --> 02:40:02.980]  Ну даже не тупее, просто другая оценка.
[02:40:02.980 --> 02:40:08.980]  Заметим, что каждый, потому что у нас каждое ребро может повлечь у собой не более одного пушбека.
[02:40:08.980 --> 02:40:11.980]  Поэтому суммарный размер волн Е.
[02:40:11.980 --> 02:40:14.980]  Но с другой стороны он и ВК тоже.
[02:40:14.980 --> 02:40:16.980]  Но лучше оценивать, как я.
[02:40:16.980 --> 02:40:21.980]  Потому что ВК это как бы то, что мы в будущем захотим оптимизировать.
[02:40:21.980 --> 02:40:24.980]  ВК надо оптимизировать.
[02:40:24.980 --> 02:40:28.980]  А что, ВК сейчас плохо работает?
[02:40:28.980 --> 02:40:31.980]  Ну просто да.
[02:40:31.980 --> 02:40:34.980]  Нет, ну надо смотреть, потому что с оптимизацией там как бы помните, да.
[02:40:34.980 --> 02:40:39.980]  Я уже рассказывал, какого уровня олимпиадники там работают.
[02:40:39.980 --> 02:40:46.980]  Ну по крайней мере 10 лет назад, там несколько чемпионов мира там работало.
[02:40:46.980 --> 02:40:50.980]  Причем я имею в виду не только Лопатина, естественно.
[02:40:50.980 --> 02:40:55.980]  Но там более современные, там СПБ 4 чемпионы 2014 года и так далее.
[02:40:55.980 --> 02:40:58.980]  Там серьезные люди, там квалифицированные.
[02:40:58.980 --> 02:41:00.980]  Вот.
[02:41:00.980 --> 02:41:01.980]  Так вот.
[02:41:01.980 --> 02:41:04.980]  Заметим, что получается вот такой алгоритм.
[02:41:04.980 --> 02:41:09.980]  Это желательно, конечно, то есть уже, конечно, может быть менее очевидно, а почему это вообще работает.
[02:41:16.980 --> 02:41:17.980]  Ну вот.
[02:41:17.980 --> 02:41:22.980]  Ну тут на самом деле надо доказать, что мы все-таки приговорим, там есть один точный момент.
[02:41:22.980 --> 02:41:28.980]  Значит, давайте, смотрите, давайте докажем, то есть докажем, что кратчайший путь до В здесь находится.
[02:41:28.980 --> 02:41:33.980]  Для этого мы этот путь рассмотрим.
[02:41:33.980 --> 02:41:34.980]  Вот.
[02:41:34.980 --> 02:41:36.980]  Допустим, вот у нас такой путь.
[02:41:36.980 --> 02:41:40.980]  И тут какие-нибудь веса типа 5, 1, 4, 3, 8, 6.
[02:41:40.980 --> 02:41:43.980]  Ну я от балды написал.
[02:41:43.980 --> 02:41:46.980]  Значит, тогда надо, ну, во-первых, воспользуемся чем?
[02:41:46.980 --> 02:41:55.980]  Так как у нас ребра не отрицательные, то в принципе оказывается, что, действительно, что префикс кратчайшего пути это кратчайший путь.
[02:41:55.980 --> 02:41:58.980]  Ну, впрочем, это всегда так.
[02:41:58.980 --> 02:42:06.980]  И тогда получается, что кратчайший путь досюда 0, досюда 5, досюда 6, 10, 13, 21 и 27.
[02:42:06.980 --> 02:42:08.980]  Но фишка в следующем.
[02:42:08.980 --> 02:42:14.980]  Теперь мы по индукции можем доказать, что каждый из этих вершин вот в свой слой попадет.
[02:42:14.980 --> 02:42:24.980]  Причем попадет она в слой для нас, что самое важное, это прям ключевой факт доказательства, до того, как мы этот слой будем рассматривать.
[02:42:25.980 --> 02:42:35.980]  То есть вот эта вершина попадет в 5 слой не позже того момента, как мы будем рассматривать 0 слой.
[02:42:35.980 --> 02:42:40.980]  Вот эта вершина попадет 6 слой не позже момента, когда мы рассмотрим 5 слой.
[02:42:40.980 --> 02:42:45.980]  Может она попадет и раньше, там может и другой путь в длине 6 есть.
[02:42:45.980 --> 02:42:51.980]  Но, по крайней мере, когда мы рассмотрим 5 слой, рассмотрим эту вершину, эта вершина в 6 слой точно попадет.
[02:42:51.980 --> 02:42:56.020]  Аналогично, когда мы рассматриваем шестой слой, мы эту вершину попытаемся добавить
[02:42:56.020 --> 02:42:59.980]  десятый слой, может все, что может быть, выясним, что она уже была добавлена и так
[02:42:59.980 --> 02:43:00.980]  далее.
[02:43:00.980 --> 02:43:03.220]  То есть вот так выглядят все доказательства.
[02:43:03.220 --> 02:43:04.220]  Понятно, да?
[02:43:04.220 --> 02:43:10.620]  То есть как видите, мы знаем расстояние и находим правильный слой раньше, чем
[02:43:10.620 --> 02:43:11.620]  мы до этого слоя добрались.
[02:43:11.620 --> 02:43:21.180]  Поэтому получается, что этот алгоритм работает, и работает он за, получается, время О от
[02:43:21.340 --> 02:43:24.340]  ВК плюс Е.
[02:43:24.340 --> 02:43:34.580]  Причем самое страшное заключается в том, что есть вот такой ВК.
[02:43:34.580 --> 02:43:41.420]  Более того, можно заметить, что на самом деле, если внимательно посмотреть на это
[02:43:41.420 --> 02:43:48.900]  доказательство, то в принципе этот же алгоритм, ну почти этот же, на самом деле
[02:43:48.980 --> 02:43:54.700]  работает, если я буду, у меня его работает не от одного ДК, а от нуля ДК.
[02:43:57.900 --> 02:43:58.900]  Понимаете, да?
[02:44:01.780 --> 02:44:05.140]  Ну доказательство поменяется только в том, что когда мы будем рассматривать, то
[02:44:05.140 --> 02:44:08.900]  есть здесь будет подразумеваться, что вот этот форик будет работать до конца
[02:44:08.900 --> 02:44:12.300]  массива при условии того, что конец массива может отдаляться.
[02:44:13.420 --> 02:44:16.540]  Но это, конечно, определенная условность, то есть по-хорошему мне тут надо очередь
[02:44:16.540 --> 02:44:17.540]  написать.
[02:44:20.620 --> 02:44:25.700]  Ну смотри, ну просто вопрос, как этот фор развернется?
[02:44:25.940 --> 02:44:30.140]  Я боюсь, что он развернется так, будут вычислены два итератора, и он будет этими
[02:44:30.140 --> 02:44:34.740]  итераторами бежать, вот вычислить бедины на тот момент запуска этого фора.
[02:44:35.500 --> 02:44:39.300]  А если ты будешь делать pushback, то как бы итератор не поменяется.
[02:44:39.300 --> 02:44:50.700]  Ну да, ну да, то есть, конечно, можно написать очередь, можно здесь уже на этот раз прям
[02:44:50.700 --> 02:45:01.220]  честно написать что-то вроде там int и равно нулю, и меньше там int, там wave.size.
[02:45:02.460 --> 02:45:04.260]  Господи, прям какая-то румынская песня.
[02:45:04.420 --> 02:45:07.740]  Ваи сатвейв, ваи сатвейв, точка сайс.
[02:45:08.580 --> 02:45:10.580]  Ваи сатвейв, точка сайс, вот это вот, да.
[02:45:12.180 --> 02:45:17.460]  Вот, это точка сайс, ваи сатвейв, да, кайф.
[02:45:18.700 --> 02:45:22.620]  Господи, сколько народу по программированию поют, оказывается, да, как всегда.
[02:45:23.380 --> 02:45:28.380]  Так, ладно, значит пишем int v равно wave сатвейв.
[02:45:28.380 --> 02:45:43.180]  Так, ваи сатвейв, ваи сатвейв, вот, да, можно вот так написать, и в принципе на этот раз
[02:45:43.180 --> 02:45:45.180]  вот получится хорошо без итераторов.
[02:45:46.100 --> 02:45:49.220]  И тогда, ну здесь доказательства нужно подкрутить только в следующий момент,
[02:45:50.220 --> 02:45:54.980]  что эта вершина попадет в слой до того, как мы прекратим обрабатывать этот слой.
[02:45:55.980 --> 02:46:01.980]  То есть как бы если этой вершины не было до этой вершины в этом слой, значит она будет по pushback она и рассмотрена чуть позже.
[02:46:03.980 --> 02:46:04.980]  Понятно, да.
[02:46:05.980 --> 02:46:06.980]  То есть вот такой кайфец.
[02:46:09.980 --> 02:46:17.980]  Вот, ну вот, то есть получается, что и 0k получается BFS, то есть такой волновой алгоритм можно написать.
[02:46:18.980 --> 02:46:27.980]  Да, в чем это нот, как это выражает нот, к чему это приводит нас в этом месте?
[02:46:28.980 --> 02:46:29.980]  Нет, ну не совсем так.
[02:46:30.980 --> 02:46:35.980]  На самом деле есть вариант, там пишется 0k BFS, но это называется BFS на к очередях.
[02:46:37.980 --> 02:46:39.980]  Не совсем, не совсем.
[02:46:40.980 --> 02:46:46.980]  Но обычно, я не знаю, обычно такой код не пишется, обычно просто заметят следующее, что когда мы дошли до wave равно 57,
[02:46:47.980 --> 02:46:53.980]  то заметим, что для нас актуальными являются только волны 57, 58, 59 и так далее для 57, плюс к, минус 1.
[02:46:54.980 --> 02:46:55.980]  Ладно, плюс к.
[02:46:56.980 --> 02:47:01.980]  Вот, то есть по факту имеет смысл хранить только вот эти вот к очереди и, собственно, их по циклу передавать.
[02:47:02.980 --> 02:47:04.980]  Это называется BFS на к очередях.
[02:47:05.980 --> 02:47:08.980]  Я, правда, не знаю как, но почему-то я нарядусь к этому, что в каких-нибудь у крышах иногда просто так и рассказывают.
[02:47:09.980 --> 02:47:11.980]  Без может быть отсылки вот на это.
[02:47:12.980 --> 02:47:14.980]  А так и рассказывают, да?
[02:47:15.980 --> 02:47:16.980]  Чего?
[02:47:17.980 --> 02:47:22.980]  Ну да, кто бы это мог быть, да.
[02:47:23.980 --> 02:47:24.980]  А, ну кто-то был.
[02:47:25.980 --> 02:47:27.980]  Нет, ну я не знаю, да, просто там в какой-нибудь зимней школе МФ3, да.
[02:47:28.980 --> 02:47:29.980]  Ну просто это.
[02:47:30.980 --> 02:47:31.980]  Чего?
[02:47:32.980 --> 02:47:34.980]  Ну ЗОЖ.
[02:47:35.980 --> 02:47:40.980]  ЗОЖ. Зимняя школа МФ3.
[02:47:41.980 --> 02:47:43.980]  Не, просто есть зимняя олимпиадная школа, да.
[02:47:43.980 --> 02:47:45.980]  Ну просто это такое вот олимпиадная лагерь.
[02:47:46.980 --> 02:47:49.980]  Там есть, правда, есть отделение по информатике, по математике, по физике, по химии еще бывает.
[02:47:50.980 --> 02:47:51.980]  И так далее.
[02:47:52.980 --> 02:47:55.980]  То есть там, в принципе, да, тоже, то есть да, в принципе, вот.
[02:47:56.980 --> 02:47:57.980]  То есть они, в принципе, да, существуют.
[02:47:58.980 --> 02:47:59.980]  Там зимой и летом можно приезжать.
[02:48:00.980 --> 02:48:01.980]  Там летом три смены, там, собственно, вообще.
[02:48:02.980 --> 02:48:04.980]  Чего? В смысле нельзя?
[02:48:05.980 --> 02:48:08.980]  А, ну, понятно, для школьников.
[02:48:09.980 --> 02:48:11.980]  Но с тем же успехом можно сказать, что вам нельзя приезжать в ЛКШ.
[02:48:12.980 --> 02:48:13.980]  Можно, как припыль.
[02:48:14.980 --> 02:48:16.980]  Ну, в олимпиадную школу тоже можно попасть, как припыль, знаете.
[02:48:17.980 --> 02:48:18.980]  Да.
[02:48:19.980 --> 02:48:20.980]  А вы думаете, кто там преподает?
[02:48:21.980 --> 02:48:23.980]  И откуда там почему-то рассказывают вот это в каком-нибудь ЗОЖе, да?
[02:48:24.980 --> 02:48:29.980]  Ну, пора, ну, там, пора, потому что там, ну, я не знаю, то есть, ладно, кто там сейчас преподает, я не знаю.
[02:48:30.980 --> 02:48:31.980]  Я как бы сейчас там не работаю.
[02:48:32.980 --> 02:48:33.980]  Вот.
[02:48:34.980 --> 02:48:37.980]  Но до какого-то момента там, как бы, вот, мои студенты быть и могли.
[02:48:38.980 --> 02:48:39.980]  Вот.
[02:48:39.980 --> 02:48:41.980]  Ну, значит, сейчас уже немножко другое.
[02:48:42.980 --> 02:48:43.980]  Но ничего, значит, идем дальше.
[02:48:44.980 --> 02:48:45.980]  Значит, это был вейс, это был кайф.
[02:48:46.980 --> 02:48:47.980]  Значит, что у нас теперь?
[02:48:48.980 --> 02:48:54.980]  Да, то есть можно писать BFS на к очередях, но, конечно, нас интересует под вид, когда у вас не 0k, а 0.1.
[02:48:55.980 --> 02:49:06.980]  Потому что, на самом деле, если у вас k равно 1, и вам нужно писать 0.1 BFS, то на самом деле это приводит к простой модификации вот этого кода.
[02:49:06.980 --> 02:49:11.980]  На самом деле, да.
[02:49:12.980 --> 02:49:23.980]  Потому что оказывается, что мы должны уметь добавлять вершину в следующий слой, если ребро равно 1, или добавлять в тот же слой, если ребро равно 0.
[02:49:24.980 --> 02:49:30.980]  Но в каждый момент времени у меня в очереди q есть какое-то окончание текущего слоя и начало следующего, правда?
[02:49:31.980 --> 02:49:38.980]  Поэтому оказывается идея, а давайте просто заведем без того очереди DEC, и если 0, то добавлять в начало, а если и так, то добавлять в конец.
[02:49:40.980 --> 02:49:43.980]  Приводит это к следующей экзотической реализации.
[02:49:44.980 --> 02:49:45.980]  Ладно, не экзотической.
[02:49:46.980 --> 02:49:47.980]  Вот.
[02:49:51.980 --> 02:49:52.980]  То есть вот получается так.
[02:49:53.980 --> 02:49:56.980]  Значит, пишется получается так.
[02:49:57.980 --> 02:50:08.980]  DEC от int q, q.push от s, значит dist от s равно 0.
[02:50:14.980 --> 02:50:15.980]  Вот.
[02:50:16.980 --> 02:50:17.980]  Значит, и дальше.
[02:50:17.980 --> 02:50:18.980]  Ну, как всегда, while.
[02:50:19.980 --> 02:50:21.980]  Пока у нас q не empty.
[02:50:24.980 --> 02:50:25.980]  Значит, поехали.
[02:50:26.980 --> 02:50:38.980]  Значит, достаем v, отправляем эту v из очереди по указанному адресу.
[02:50:39.980 --> 02:50:41.980]  И, соответственно, пишем for.
[02:50:42.980 --> 02:50:43.980]  Значит, опять перебираем и убраем.
[02:50:44.980 --> 02:50:45.980]  На этот раз вес нам важен.
[02:50:47.980 --> 02:50:50.980]  Граф от v.
[02:50:53.980 --> 02:51:04.980]  Значит, если оказалось, что dist от nv больше, чем dist от v, плюс w, то что мы делаем?
[02:51:05.980 --> 02:51:10.980]  Ну, а первых пишем, что dist от nv равно dist от v, плюс w.
[02:51:11.980 --> 02:51:30.980]  Значит, и дальше неожиданно говорим, что если оказалось, ну вот, то есть если w равно 1, то q.pushfront от nv.
[02:51:31.980 --> 02:51:40.980]  lz q.pushback, а вот там pushfront.
[02:51:45.980 --> 02:51:46.980]  Вот такая вот красота.
[02:51:47.980 --> 02:51:50.980]  На этот раз важно заметить, что мы добавляем каждую вершину не более чем два раза.
[02:51:51.980 --> 02:51:55.980]  Поэтому, как бы, если мы достанем два раза и два раза обработаем, ничего страшного не произойдет.
[02:51:57.980 --> 02:51:58.980]  Вот.
[02:51:59.980 --> 02:52:01.980]  Так что вот такая вот красивая реализация.
[02:52:02.980 --> 02:52:03.980]  Это называется 01BFS.
[02:52:05.980 --> 02:52:06.980]  Да.
[02:52:08.980 --> 02:52:09.980]  Что?
[02:52:10.980 --> 02:52:11.980]  Ага.
[02:52:12.980 --> 02:52:13.980]  Да-да-да.
[02:52:14.980 --> 02:52:16.980]  Эх, мечта-мечта, минус 1BFS, да.
[02:52:17.980 --> 02:52:22.980]  Нет, ну да, минус, нет, ну, минус 1BFS, это че-то преодонсакарпа, конечно, да.
[02:52:23.980 --> 02:52:24.980]  Да, чего?
[02:52:25.980 --> 02:52:26.980]  Минус бесконечный, бесконечный BFS.
[02:52:26.980 --> 02:52:27.980]  Бесконечный BFS.
[02:52:28.980 --> 02:52:29.980]  Мечта-мечта, да.
[02:52:30.980 --> 02:52:31.980]  Только, увы, так не получится.
[02:52:32.980 --> 02:52:33.980]  Это называется BFS.
[02:52:34.980 --> 02:52:35.980]  Да.
[02:52:36.980 --> 02:52:37.980]  А вот он зачем нужен.
[02:52:38.980 --> 02:52:39.980]  Вот.
[02:52:40.980 --> 02:52:41.980]  Хорошо.
[02:52:42.980 --> 02:52:43.980]  Значит идем дальше.
[02:52:44.980 --> 02:52:45.980]  Идем дальше.
[02:52:46.980 --> 02:52:48.980]  Значит, ну, смотрите, время, ну вот.
[02:52:49.980 --> 02:52:50.980]  Ну, время, конечно, шло.
[02:52:51.980 --> 02:52:54.980]  Но тут возникает естественный вопрос.
[02:52:55.980 --> 02:52:58.980]  Нет, даже ничто делать, если k становится очень сильно большим.
[02:53:00.980 --> 02:53:01.980]  Пока мы зададимся другим вопросом.
[02:53:02.980 --> 02:53:06.980]  А что делать, если ребра бывают небольшими, но дробными?
[02:53:09.980 --> 02:53:11.980]  И вот тут мне придется уже все-таки смотреть.
[02:53:12.980 --> 02:53:15.980]  И теперь, значит, нулик-то мы и тут научились добавлять, если целые.
[02:53:16.980 --> 02:53:19.980]  А теперь идея такая, что ребра у нас от одного до k.
[02:53:21.980 --> 02:53:22.980]  Вот.
[02:53:22.980 --> 02:53:25.980]  Но V на этот раз произвольные числа.
[02:53:26.980 --> 02:53:27.980]  Действительно.
[02:53:28.980 --> 02:53:29.980]  K?
[02:53:30.980 --> 02:53:31.980]  Ну, допустим.
[02:53:32.980 --> 02:53:33.980]  Допустим, k натуральная.
[02:53:34.980 --> 02:53:38.980]  Ну, например, классика, это когда у нас ребра от одного до двух.
[02:53:41.980 --> 02:53:43.980]  Так, вот тут возникает проблема, конечно.
[02:53:48.980 --> 02:53:51.980]  Да, потому что раньше, потому что до сих пор у нас было,
[02:53:52.980 --> 02:53:54.980]  что слой – это расстояние до вершины.
[02:53:55.980 --> 02:53:57.980]  А слой номер корень из двух у нас такого слоя нет.
[02:53:59.980 --> 02:54:01.980]  Но мы не можем завести массив, чтобы там был корень.
[02:54:02.980 --> 02:54:03.980]  Мы можем, конечно, завести мапчик.
[02:54:04.980 --> 02:54:06.980]  Но до этого мы доживем.
[02:54:07.980 --> 02:54:08.980]  Потому что здесь есть два направления мысли.
[02:54:09.980 --> 02:54:10.980]  На самом деле мы с обоими сейчас разберемся.
[02:54:17.980 --> 02:54:18.980]  Ну зачем?
[02:54:19.980 --> 02:54:20.980]  Не надо ничего округлять.
[02:54:20.980 --> 02:54:21.980]  Все гораздо проще.
[02:54:23.980 --> 02:54:24.980]  Нет.
[02:54:25.980 --> 02:54:26.980]  Теперь у нас будет идея такая.
[02:54:27.980 --> 02:54:28.980]  Номер слоя.
[02:54:29.980 --> 02:54:33.980]  Значит, у меня номер слоя будет равно просто расстоянию до вершины.
[02:54:34.980 --> 02:54:40.980]  То есть номер слоя давай, но округленное вниз.
[02:54:46.980 --> 02:54:48.980]  То есть смотрите, слоев у нас все еще ВК.
[02:54:51.980 --> 02:54:53.980]  Обратите внимание, тут у тебя нот.
[02:54:54.980 --> 02:54:55.980]  Все еще ВК.
[02:54:58.980 --> 02:54:59.980]  Вот.
[02:55:00.980 --> 02:55:03.980]  И здесь тогда просто теперь придется написать.
[02:55:04.980 --> 02:55:06.980]  Да, придется как-то это упихать.
[02:55:07.980 --> 02:55:09.980]  Значит, придется написать, я зелененьким не пишу.
[02:55:10.980 --> 02:55:11.980]  Floor.
[02:55:13.980 --> 02:55:16.980]  Там Floor Adistotenv.
[02:55:21.980 --> 02:55:22.980]  Вот.
[02:55:23.980 --> 02:55:25.980]  Да-да-да, чтобы он еще и латих там парсил.
[02:55:26.980 --> 02:55:28.980]  Действительно, вот эту скотчку можно занять на Floor.
[02:55:31.980 --> 02:55:32.980]  Так что вот такая.
[02:55:34.980 --> 02:55:36.980]  То есть смотрите, как-то не странно, то есть как вести дробный.
[02:55:37.980 --> 02:55:38.980]  Я утверждаю, что для этого достаточно.
[02:55:39.980 --> 02:55:40.980]  Ладно, недостаточно.
[02:55:42.980 --> 02:55:43.980]  Так, вот смотрите.
[02:55:44.980 --> 02:55:47.980]  Правда, тут возникает такая проблема, что вот этой проверки уже недостаточно.
[02:55:48.980 --> 02:55:49.980]  Как недостаточно?
[02:55:51.980 --> 02:55:53.980]  Автор, заветьте маленькую прятную вещь.
[02:55:54.980 --> 02:55:59.980]  Теперь вершина может быть добавлена на самом деле в волну несколько раз.
[02:56:06.980 --> 02:56:08.980]  Нет, смотрите, нет, фишка такая.
[02:56:09.980 --> 02:56:15.980]  Теперь у нас может быть ситуация, когда у вас расстояние до вершины стало 3.57.
[02:56:16.980 --> 02:56:17.980]  Вы добавили в третий слой.
[02:56:17.980 --> 02:56:20.980]  А потом у нас оптимизация, и выяснилось, что оно теперь стало меньше, чем 3.49.
[02:56:21.980 --> 02:56:22.980]  3.49.
[02:56:23.980 --> 02:56:24.980]  Кстати, да.
[02:56:25.980 --> 02:56:26.980]  Вот.
[02:56:27.980 --> 02:56:28.980]  И выяснилось, что вершина может оказаться.
[02:56:29.980 --> 02:56:30.980]  Поэтому...
[02:56:31.980 --> 02:56:33.980]  Поэтому придется тут, конечно, написать...
[02:56:37.980 --> 02:56:41.980]  Поэтому придется здесь написать все-таки какой-нибудь, ну я не знаю, user.
[02:56:42.980 --> 02:56:44.980]  Ну самый тупой user, написать уже не парится.
[02:56:47.980 --> 02:57:05.980]  В общем, обратите внимание, такой экзотический юзет получился, потому что как бы юзет это означает, что мы не то, чтобы добавили вершину в очередь, да, а в том, чтобы мы ее стали уже обрабатывать.
[02:57:08.980 --> 02:57:09.980]  Вот.
[02:57:10.980 --> 02:57:11.980]  Такая неожиданная красота получилась.
[02:57:12.980 --> 02:57:24.980]  Ну теперь, как это ни странно, я утверждаю, что теперь, что если у нас веса от одного дака, то этот BFS найдет абсолютно корректное расстояние.
[02:57:25.980 --> 02:57:27.980]  Даже не просто волды, а именно корректное расстояние.
[02:57:30.980 --> 02:57:33.980]  Значит, эмулируем доказательства.
[02:57:34.980 --> 02:57:35.980]  То же самое.
[02:57:36.980 --> 02:57:37.980]  Значит, смотрите внимательно.
[02:57:37.980 --> 02:57:38.980]  Смотрите внимательно.
[02:57:46.980 --> 02:57:48.980]  Так, ладно, для простоты не буду тут два знака писать, да.
[02:57:58.980 --> 02:58:01.980]  Ну давайте это упростим себе жизнь все-таки, а то тут да.
[02:58:02.980 --> 02:58:03.980]  Вот.
[02:58:04.980 --> 02:58:05.980]  Значит, смотрите, доказательства здесь будет такое.
[02:58:06.980 --> 02:58:08.980]  То есть, да, вот мы знаем, тут кратчайшее расстояние так и будут.
[02:58:09.980 --> 02:58:16.980]  Тут они будут 1.5, тут такой 4.2, тут 5.3, тут 8.7, тут 11.3.
[02:58:17.980 --> 02:58:18.980]  Видно, да?
[02:58:18.980 --> 02:58:32.980]  Теперь надо просто, то есть надо доказать то же самое, что вершина окажется с правильным расстоянием, в правильном слое, причем до того, как мы ее будем обрабатывать.
[02:58:33.980 --> 02:58:36.980]  То есть, до того, как мы закончим это слое обрабатывать.
[02:58:39.980 --> 02:58:44.980]  Причем, да, нет, пока не обязательно.
[02:58:45.980 --> 02:58:47.980]  Нет, и потом это все равно не поможет.
[02:58:48.980 --> 02:58:50.980]  В данном случае все гораздо проще.
[02:58:51.980 --> 02:58:57.980]  Дело в том, что здесь мы начинаем пользоваться тем, обратите внимание, что у нас все веса не меньше единицы.
[02:58:58.980 --> 02:59:07.980]  Это означает, что каждая вершина окажется с правильным расстоянием, когда мы будем рассматривать предыдущую вершину в предыдущих слоях.
[02:59:09.980 --> 02:59:13.980]  То есть, сначала мы рассмотрим нулевой слой и найдем, что эта вершина 1.5.
[02:59:13.980 --> 02:59:19.980]  И только после этого мы пойдем в слой 1 и будем обрабатывать эту, помимо всех прочих, и эту вершину тоже.
[02:59:20.980 --> 02:59:25.980]  И в этот момент мы узнаем, что у этой вершины расстояние 4.2 и отправим ее в четверть слой, если она не окажется там раньше.
[02:59:26.980 --> 02:59:29.980]  Возможно, с расстоянием 4.2, а может там 4.3.
[02:59:30.980 --> 02:59:39.980]  Но обратите внимание, здесь доказательствами мы очень-очень жестко пользуемся тем, что веса ребер от одного.
[02:59:40.980 --> 02:59:52.980]  Потому что, смотрите, насколько жестко, чтобы вы понимали, если я тут скажу, что, а давайте скажем, что ребра от нуля до ка, то этот алгоритм резко упадет.
[02:59:57.980 --> 02:59:59.980]  Нет, там просто фишка будет такая.
[03:00:00.980 --> 03:00:04.980]  То есть, смотрите, что произойдет, если я тут попытаюсь рассмотреть от нуля до ка?
[03:00:05.980 --> 03:00:19.980]  Получится у меня так, допустим, 1.5, там 2.6, допустим, и ну я не знаю, ну вот, и какой-нибудь там 0.1.
[03:00:21.980 --> 03:00:26.980]  Значит, то есть, да, тут как бы расстояние должно быть, тут 1.5, тут должно быть 4.1.
[03:00:27.980 --> 03:00:31.980]  Так вот, фишка такая.
[03:00:32.980 --> 03:00:48.980]  Вполне вероятно, что когда мы рассматривали s, вместо вот этого ребра мы рассмотрели сначала вот это ребро, у которого там было расстояние, допустим, ну я не знаю, значит, 1.2.
[03:00:49.980 --> 03:00:53.980]  Тогда мы эту вершину добавили в слой номер один раньше, правда?
[03:00:54.980 --> 03:00:58.980]  Потом стали ее рассматривать, и тут обнаружилось, что тут есть ребро веса 3.
[03:00:59.980 --> 03:01:01.980]  И тогда обнаружилось следующее.
[03:01:02.980 --> 03:01:07.980]  Ну вот, и тогда обнаружилось, что эту вершину мы добавили с расстоянием 4.2.
[03:01:09.980 --> 03:01:10.980]  Видно, да?
[03:01:12.980 --> 03:01:13.980]  Ну вот.
[03:01:14.980 --> 03:01:15.980]  Ну вот, ну действительно, проблема?
[03:01:17.980 --> 03:01:18.980]  Нет.
[03:01:18.980 --> 03:01:22.980]  Потому что, ну вот, само в себе пока это не проблема, почему?
[03:01:23.980 --> 03:01:43.980]  Потому что на самом деле тут…
[03:01:43.980 --> 03:02:05.980]  то есть проблема на самом деле возникнет, то есть у этой вершины, допустим, 4.1 возникнет проблема, но проблема может нас настигнуть немножко в другом месте.
[03:02:05.980 --> 03:02:11.980]  Ну вот так, давайте потом, в каком месте она нас может настигнуть?
[03:02:11.980 --> 03:02:19.980]  Вот этой, да? Так, провели, и что?
[03:02:19.980 --> 03:02:30.980]  Ну давайте, я даже 3.1 напишу. Ну и что?
[03:02:30.980 --> 03:02:38.980]  Ну мы могли обработать эту вершину раньше, но мы обработаем ту, которая по идее должна быть раньше.
[03:02:38.980 --> 03:02:54.980]  Да, вот теперь смотрите какая подлянка, что произойдет. Мы обработаем, ну понятно, то есть эти две вершины мы обработаем, но при этом если мы вот эту вершину обработаем раньше, то окажется, что мы сначала добавим вот эту вершину с расстоянием 4.3, да?
[03:02:54.980 --> 03:03:06.980]  А потом вот эту вершину с расстоянием 4.1, и тогда вот эта вершина окажется с неправильным расстоянием, потому что вот мы через 4.1 ее еще не оптимизировали.
[03:03:06.980 --> 03:03:11.980]  Сите, то есть у нас просто в явном виде есть контрпример.
[03:03:11.980 --> 03:03:19.980]  Что если сначала пробежаться по слою и обновить расстояние слоя в слой, а потом пробежаться по слой и начать добавлять новый?
[03:03:19.980 --> 03:03:23.980]  Ну я боюсь, тогда это начнет валиться, если у вас таких ребер цепочка.
[03:03:24.980 --> 03:03:27.980]  Ну там автор Яны не запаску теста.
[03:03:27.980 --> 03:03:33.980]  Ну конечно, но нет.
[03:03:33.980 --> 03:03:41.980]  Это было очень странно, потому что тогда ты мог поделить все лица на лучего число, из АВ плюс Е, в аэропорту.
[03:03:41.980 --> 03:03:44.980]  Да, кстати об этом.
[03:03:44.980 --> 03:03:47.980]  А в чем проблема?
[03:03:47.980 --> 03:03:52.980]  Нет, смотрите, проблема в том, что это все равно останется с нулем, то есть с нулем это не работает.
[03:03:52.980 --> 03:03:59.980]  А так на самом деле поделить все веса на одну и ту же констант, то это вполне себе хак.
[03:03:59.980 --> 03:04:04.980]  То есть на самом деле у Капилевича есть такая классическая, красивая, учебная задача.
[03:04:04.980 --> 03:04:11.980]  То есть найдите расстояние от вершины до всех остальных, все веса от миллиарда до двух миллиардов.
[03:04:12.980 --> 03:04:22.980]  То есть выясняется, что на самом деле в этой дыше не нужно писать никаких там страшных дэкстров с какими-то там страшными кучами.
[03:04:32.980 --> 03:04:34.980]  Нет, сейчас погодите, дойдем.
[03:04:34.980 --> 03:04:37.980]  Вы пока не знаете, что такое дэкстра.
[03:04:37.980 --> 03:04:40.980]  Я вам так скажу, мы ее выводим на самом деле.
[03:04:40.980 --> 03:04:42.980]  Ладно, его.
[03:04:42.980 --> 03:04:44.980]  Да, дэкстра это он.
[03:04:44.980 --> 03:04:46.980]  Помните, Эдзгер Вейн и дэкстра его зовут.
[03:04:46.980 --> 03:04:50.980]  Да, он к сожалению умер там в 2000 каком-то там году.
[03:04:54.980 --> 03:05:02.980]  Но действительно, оказывается, если у нас ребра от А до 2А, то мы в принципе можем просто номер слоя сказать, что флора дистат В делит на А.
[03:05:05.980 --> 03:05:09.980]  Это называется, то есть это известно как А2Аbfs.
[03:05:11.980 --> 03:05:23.980]  Но на самом деле вы можете заметить, что то, что у нас там имеет место, это на самом деле называется, то есть близко скорее к тому, что называется АКАbfs.
[03:05:24.980 --> 03:05:35.980]  То есть видите, оказывается, что если все веса именно положительные, то вам не важно, насколько большие ребра, важно, как самое большое относится к самому маленькому.
[03:05:36.980 --> 03:05:42.980]  Но вопрос насколько положительно, прям очень положительно или не очень.
[03:05:43.980 --> 03:05:51.980]  Вот, то есть вот оказывается, а так оказывается, если они отличаются не более чем в 5 раз, то в принципе вы прям написали BFS и возрадовались.
[03:05:52.980 --> 03:05:54.980]  И асимптотика ВК плюс Е.
[03:05:55.980 --> 03:05:57.980]  Ну для мелких К это вообще кайф.
[03:05:59.980 --> 03:06:05.980]  Вот, или если К не превосходит там, как мы уже выясняли с вами, Е поделить на В, так вообще тоже хорошо.
[03:06:09.980 --> 03:06:14.980]  Но теперь возникает следующий вопрос, идем дальше.
[03:06:15.980 --> 03:06:24.980]  Пока не вводим нуля, а вместо этого говорим, а что делать, если К прям большое-большое?
[03:06:25.980 --> 03:06:28.980]  То есть К начинает быть вот, вот.
[03:06:33.980 --> 03:06:37.980]  Да, ВНАК все равно уже реально многовато, хочется побыстрее.
[03:06:37.980 --> 03:06:38.980]  Побыстрее.
[03:06:42.980 --> 03:06:47.980]  Нет, ну теперь замечаем следующее, где в этой асимптотике нам требуется ВК?
[03:06:49.980 --> 03:06:55.980]  Да, то есть обратите внимание, асимптотику ВК обеспечивает только вот эта строчка, ну и вот это все.
[03:06:56.980 --> 03:07:00.980]  Все остальное, все остальные нетривиальные действия делаются за Е.
[03:07:01.980 --> 03:07:02.980]  Обратите внимание.
[03:07:03.980 --> 03:07:13.980]  Поэтому, если бы у нас была какая-нибудь там великая структура данных, такая великая, которая умела бы нам,
[03:07:14.980 --> 03:07:20.980]  которая бы хранила вообще какие-то все возможные слои, но не пустые, и умела бы нам говорить, а кто сейчас ближайший не пустой,
[03:07:22.980 --> 03:07:24.980]  то у нас это все было бы быстрее.
[03:07:25.980 --> 03:07:29.980]  Что это за слой, что могла бы быть за структура?
[03:07:33.980 --> 03:07:37.980]  Да, вот опять мы не знаем, что такое дерево на МДБОСа, да.
[03:07:38.980 --> 03:07:42.980]  Кошмар, что многие, сколько уже поколений студентов не знают, что такое дерево на МДБОСа вообще, да.
[03:07:43.980 --> 03:07:48.980]  Ну просто чисто вот, нет, у меня был один из вариантов, что сегодня тоже имеет смысл и эту дырочку залатать,
[03:07:49.980 --> 03:07:52.980]  но с другой стороны, что-то сегодня хорошо пошло, сколько там времени-то вообще.
[03:07:53.980 --> 03:07:55.980]  Хотя, может, мы сегодня и обсудим, кстати.
[03:08:02.980 --> 03:08:07.980]  Да, погодите, то там, слушай, там достроено, там знаешь, сколько там до сутки с того дерева надо дожить,
[03:08:08.980 --> 03:08:10.980]  там придется префикс функция, z функция, там вот это все.
[03:08:11.980 --> 03:08:12.980]  Так это все частный случай.
[03:08:13.980 --> 03:08:14.980]  Да, это частный случай.
[03:08:15.980 --> 03:08:17.980]  Да, но это частный случай аха-карасика, а не дерева лайнера.
[03:08:18.980 --> 03:08:19.980]  Точно.
[03:08:20.980 --> 03:08:21.980]  Аха-карасик.
[03:08:22.980 --> 03:08:23.980]  Алгоритм аха-карасик.
[03:08:24.980 --> 03:08:27.980]  Так, значит, сразу алгоритм аха-карасик.
[03:08:27.980 --> 03:08:28.980]  Аха-карасик.
[03:08:29.980 --> 03:08:32.980]  Ну, во-первых, корасик, а во-вторых, она маркерит.
[03:08:33.980 --> 03:08:35.980]  Поэтому ее фамилия не склоняется.
[03:08:38.980 --> 03:08:41.980]  А вот этого я, кстати, достоверно не скажу.
[03:08:42.980 --> 03:08:43.980]  Может быть.
[03:08:44.980 --> 03:08:46.980]  Все, что я знаю, это то, что пишется ее фамилия вот так.
[03:08:47.980 --> 03:08:48.980]  Корасик вот так.
[03:08:49.980 --> 03:08:50.980]  Да, нет.
[03:08:51.980 --> 03:08:55.980]  Нет, он аха, мы с ним уже сталкивались, кстати.
[03:08:56.980 --> 03:08:59.980]  Когда упоминали там книжку про компиляторы?
[03:09:00.980 --> 03:09:01.980]  Что?
[03:09:02.980 --> 03:09:03.980]  Да, без к.
[03:09:04.980 --> 03:09:05.980]  Да, да, да.
[03:09:06.980 --> 03:09:07.980]  Да, без г, просто вау.
[03:09:08.980 --> 03:09:09.980]  Да, да, да, мы помним.
[03:09:10.980 --> 03:09:12.980]  Да, женские фамилии не склоняются.
[03:09:13.980 --> 03:09:15.980]  Да, у нас с вами, на самом деле, у нас есть три очаровательные девушки.
[03:09:16.980 --> 03:09:18.980]  У нас с вами участвуют в алгоритмах.
[03:09:19.980 --> 03:09:20.980]  Правда, не с одной из них.
[03:09:21.980 --> 03:09:22.980]  С одной из них мы уже даже столкнулись.
[03:09:22.980 --> 03:09:23.980]  Правда, мы ее не особо упоминали.
[03:09:24.980 --> 03:09:26.980]  Мы ей столкнулись, когда упоминали дикартовые деревья.
[03:09:27.980 --> 03:09:28.980]  Дикарта?
[03:09:29.980 --> 03:09:30.980]  Нет, дикарта он РНФ все-таки, нет.
[03:09:31.980 --> 03:09:33.980]  Но дикартовые деревья изобрел, как-то часто бывает, не дикарта.
[03:09:34.980 --> 03:09:36.980]  Ну, FFT тоже не фурьер изобрел, да?
[03:09:37.980 --> 03:09:39.980]  Вот, то есть нет, как бы нет.
[03:09:40.980 --> 03:09:47.980]  Нет, дикартовые деревья, ну, из-за интерпретации, что давайте, то есть как бы X это ключ, Y это приоритет, давайте нарисуем, получится красиво, да?
[03:09:47.980 --> 03:09:55.980]  Ну, вот, то есть эта интерпретация, это тоже там конкретные там фамилии, то есть у меня ассоциируется за фамилиями Орагон Зидель на самом деле.
[03:09:56.980 --> 03:09:58.980]  Там вот что-то такое, то есть фамилии вот такие Орагон и Зидель.
[03:09:59.980 --> 03:10:01.980]  Ну, вот так вот, насколько я помню, Орагон это Сесилия.
[03:10:02.980 --> 03:10:03.980]  Вот.
[03:10:04.980 --> 03:10:05.980]  Вот.
[03:10:06.980 --> 03:10:07.980]  Нет, Зидель это, по-моему, он все-таки, да.
[03:10:08.980 --> 03:10:09.980]  Вот.
[03:10:10.980 --> 03:10:11.980]  Значит, помимо этого у нас еще ожидается алгоритм Ахакарасик.
[03:10:12.980 --> 03:10:13.980]  И еще в качестве анонсов.
[03:10:13.980 --> 03:10:14.980]  И еще в качестве анонсов есть алгоритм Штор Варнера.
[03:10:15.980 --> 03:10:16.980]  Да, Штор это Матильда.
[03:10:17.980 --> 03:10:18.980]  Вот.
[03:10:19.980 --> 03:10:22.980]  Это алгоритм о поиске глобального минимального разреза.
[03:10:23.980 --> 03:10:25.980]  Это мы внутри потоков будем изучать.
[03:10:26.980 --> 03:10:27.980]  Вот.
[03:10:28.980 --> 03:10:31.980]  Да, то есть А4 есть такой тоже очаровательный алгоритм, как сама Матильда, так что хорошо.
[03:10:32.980 --> 03:10:33.980]  Максимальный разрез умеют искать?
[03:10:34.980 --> 03:10:35.980]  Максимальный?
[03:10:36.980 --> 03:10:37.980]  Почему-то не одно и то же?
[03:10:38.980 --> 03:10:39.980]  Да.
[03:10:40.980 --> 03:10:42.980]  Почему-то не одно и то же?
[03:10:43.980 --> 03:10:44.980]  Не, не одно.
[03:10:45.980 --> 03:10:49.980]  Там просто там будем пользоваться тем, что веса не отрицательные, поэтому не получится.
[03:10:50.980 --> 03:10:52.980]  Кстати, хороший вопрос, я не знаю.
[03:10:53.980 --> 03:10:54.980]  Вот.
[03:10:55.980 --> 03:10:56.980]  Так вот.
[03:10:57.980 --> 03:10:58.980]  Ладно.
[03:10:59.980 --> 03:11:00.980]  Это мы тут такое лирическое отступление, да.
[03:11:01.980 --> 03:11:02.980]  Как говорится, аниленод.
[03:11:03.980 --> 03:11:05.980]  Анилегкая роль девушек в алгоритмах, да.
[03:11:06.980 --> 03:11:07.980]  Вот.
[03:11:07.980 --> 03:11:08.980]  Вот.
[03:11:09.980 --> 03:11:10.980]  Итак.
[03:11:11.980 --> 03:11:12.980]  Хотя ладно, что тут, девушкам нечего жаловаться.
[03:11:13.980 --> 03:11:16.980]  В конце концов, у нас, как известно, первая программистка в истории женщина была, помните, да?
[03:11:17.980 --> 03:11:18.980]  Ну вот.
[03:11:19.980 --> 03:11:20.980]  Вот это вот все, да.
[03:11:21.980 --> 03:11:23.980]  То есть даже язык программирования в честь ее назвали, да.
[03:11:24.980 --> 03:11:26.980]  То есть по нему это даже страшный анекдот, как девушка программист читает книжку.
[03:11:27.980 --> 03:11:31.980]  Там ходит бабушка, смотрит на нее, там крестится испуганного, и выходит на следующие остановки.
[03:11:32.980 --> 03:11:33.980]  Нет, а все мирно.
[03:11:34.980 --> 03:11:35.980]  Девушка просто читала книжку.
[03:11:35.980 --> 03:11:36.980]  Да, да.
[03:11:42.980 --> 03:11:44.980]  Нет, ну я не знаю, как звали девушку, но неважно.
[03:11:45.980 --> 03:11:46.980]  Эта история умалчивая, да это и неважно.
[03:11:47.980 --> 03:11:48.980]  Да.
[03:11:49.980 --> 03:11:53.980]  Вполне верно, что девушка даже не вчера там не в готическом была.
[03:11:54.980 --> 03:11:55.980]  Вот.
[03:11:56.980 --> 03:11:57.980]  Да, да, да, мало ли.
[03:11:58.980 --> 03:11:59.980]  Вот.
[03:12:02.980 --> 03:12:03.980]  Вот.
[03:12:05.980 --> 03:12:06.980]  Так вот.
[03:12:07.980 --> 03:12:10.980]  Нет, ну там всякое бывает, знаете, вы там аккуратнее с книжками, знаете.
[03:12:11.980 --> 03:12:13.980]  Вот знаете, есть такая книжка, знаете, которая называется так.
[03:12:14.980 --> 03:12:16.980]  Как же называется эта книга?
[03:12:18.980 --> 03:12:20.980]  Да, как несложно догадаться, книжка про логические парадоксы.
[03:12:21.980 --> 03:12:26.980]  Вот, то есть очень рекомендую на самом деле, вот просто вот прям реклама просто Ричард Смолли, там Смоллиан.
[03:12:27.980 --> 03:12:28.980]  Как же называется эта книга?
[03:12:29.980 --> 03:12:30.980]  Потому что вот, ребят, не пожалейте, реально.
[03:12:31.980 --> 03:12:32.980]  Просто очарование абсолютное на самом деле.
[03:12:33.980 --> 03:12:34.980]  Вот.
[03:12:35.980 --> 03:12:36.980]  Да.
[03:12:54.980 --> 03:12:56.980]  Да, вот прям вот так название звучит.
[03:12:59.980 --> 03:13:01.980]  Ну вот, ну она и на русском языке есть.
[03:13:02.980 --> 03:13:03.980]  Ну да, да, да, да.
[03:13:03.980 --> 03:13:04.980]  Ой, знаем это пойду.
[03:13:09.980 --> 03:13:10.980]  А, спасибо.
[03:13:11.980 --> 03:13:12.980]  Вот.
[03:13:13.980 --> 03:13:14.980]  Да, так, если возвращаться к алгоритмам, да.
[03:13:15.980 --> 03:13:17.980]  Вот, да, просто рекомендую, да.
[03:13:18.980 --> 03:13:20.980]  То есть как это говорят, что дух книги вообще, то есть парадоксы, да.
[03:13:21.980 --> 03:13:30.980]  В общем, там парадоксы возникают настолько, что там говорят, по правтору говорят так, что, как говорится, профессор сейчас два счета докажет вам, что либо у вас не существует, либо его не существует.
[03:13:30.980 --> 03:13:32.980]  Но кого конкретно не существует, ему неизвестно.
[03:13:33.980 --> 03:13:34.980]  Ну вот.
[03:13:35.980 --> 03:13:36.980]  Ну в общем, почитайте, не пожалейте.
[03:13:37.980 --> 03:13:40.980]  На самом деле, просто очарование там просто очень смешно, действительно.
[03:13:41.980 --> 03:13:42.980]  Вот.
[03:13:43.980 --> 03:13:44.980]  Так это просто фишка.
[03:13:45.980 --> 03:13:46.980]  Я как-то ехал в метро, читал эту книгу.
[03:13:47.980 --> 03:13:50.980]  А потом смотрю, что-то там напротив дети какие-то, что-то там смотрят, что-то смотрят на обложку и что-то ржут.
[03:13:51.980 --> 03:13:52.980]  Да.
[03:13:53.980 --> 03:13:54.980]  Вот, да.
[03:13:55.980 --> 03:13:56.980]  Что-то вспомнилось, да.
[03:13:57.980 --> 03:13:58.980]  Вот.
[03:13:59.980 --> 03:14:01.980]  Так, значит, соответственно.
[03:14:02.980 --> 03:14:04.980]  Так, ладно, давайте, чтобы было понятно.
[03:14:09.980 --> 03:14:10.980]  Вот.
[03:14:11.980 --> 03:14:13.980]  А, кстати, на всех своих поднимите руки, кто столкнулся с этой книжкой.
[03:14:15.980 --> 03:14:17.980]  Нет, вот с этой.
[03:14:18.980 --> 03:14:20.980]  Да ладно, как вы сохранились, господи.
[03:14:21.980 --> 03:14:22.980]  Я слышал.
[03:14:23.980 --> 03:14:26.980]  Господи, как это, вот, 12 стульев даже читали, а это не читали, господи, как это, да.
[03:14:26.980 --> 03:14:27.980]  Ой.
[03:14:28.980 --> 03:14:30.980]  Ну ладно, рекомендую столкнуться просто, да, получите удовольствие.
[03:14:31.980 --> 03:14:32.980]  Да.
[03:14:33.980 --> 03:14:34.980]  Вот.
[03:14:35.980 --> 03:14:36.980]  Ладно, значит, смотрите, так вернемся к...
[03:14:37.980 --> 03:14:38.980]  Да.
[03:14:39.980 --> 03:14:40.980]  Вот.
[03:14:41.980 --> 03:14:42.980]  О чем...
[03:14:43.980 --> 03:14:44.980]  Да, мы писали один КБФ с дробными весами.
[03:14:45.980 --> 03:14:47.980]  Теперь неожиданно выяснилось, что карта отправилась в бесконечность.
[03:14:48.980 --> 03:14:54.980]  Мы неожиданно обнаружили, что нам достаточно тем или иным способом там, скажем, хранить только не пусто.
[03:14:54.980 --> 03:14:55.980]  Ну, например.
[03:15:00.980 --> 03:15:02.980]  Вот самый тупой способ.
[03:15:04.980 --> 03:15:05.980]  Просто вести мапочку.
[03:15:10.980 --> 03:15:11.980]  Да, пока пустой.
[03:15:11.980 --> 03:15:12.980]  Ну вот.
[03:15:12.980 --> 03:15:14.980]  Ой, кстати, даже эти строчки сохранились, как здорово.
[03:15:17.980 --> 03:15:18.980]  Так, только теперь.
[03:15:19.980 --> 03:15:22.980]  Так, теперь, значит, вот эти вот строчки мы, конечно, тут сейчас немножко...
[03:15:26.980 --> 03:15:27.980]  Значит, поперек.
[03:15:28.980 --> 03:15:29.980]  Вот.
[03:15:30.980 --> 03:15:31.980]  Вот.
[03:15:32.980 --> 03:15:33.980]  Вот.
[03:15:34.980 --> 03:15:35.980]  Вот.
[03:15:36.980 --> 03:15:37.980]  Вот.
[03:15:38.980 --> 03:15:39.980]  Вот.
[03:15:40.980 --> 03:15:41.980]  Значит, попилим.
[03:15:46.980 --> 03:15:47.980]  Так.
[03:15:48.980 --> 03:15:49.980]  Так, ладно, черт с ним.
[03:15:50.980 --> 03:15:51.980]  Так.
[03:15:52.980 --> 03:15:53.980]  Ну, может, я просто код не буду дописывать, там очевидные вещи.
[03:15:54.980 --> 03:15:55.980]  И получится так.
[03:15:56.980 --> 03:15:57.980]  While не мап...
[03:15:58.980 --> 03:15:59.980]  Значит, этот...
[03:16:00.980 --> 03:16:01.980]  Ладно, не мап.
[03:16:02.980 --> 03:16:03.980]  Waves.empty.
[03:16:03.980 --> 03:16:04.980]  Попилим.
[03:16:08.980 --> 03:16:09.980]  Так.
[03:16:10.980 --> 03:16:11.980]  А вот тут оказывается очень приятная вещь.
[03:16:12.980 --> 03:16:15.980]  Vector int ampersand.
[03:16:19.980 --> 03:16:20.980]  wave
[03:16:24.980 --> 03:16:25.980]  равно
[03:16:27.980 --> 03:16:28.980]  звездочка waves
[03:16:30.980 --> 03:16:31.980]  точка begin.
[03:16:34.980 --> 03:16:35.980]  Да.
[03:16:36.980 --> 03:16:37.980]  Как приятно.
[03:16:38.980 --> 03:16:39.980]  Да, ampersand.
[03:16:40.980 --> 03:16:41.980]  Ну что, второй раз не берете, не искать.
[03:16:42.980 --> 03:16:43.980]  Так в мапе так...
[03:16:44.980 --> 03:16:45.980]  Что такое waves?
[03:16:46.980 --> 03:16:47.980]  Waves это теперь моп.
[03:16:48.980 --> 03:16:49.980]  А, в этом плане.
[03:16:50.980 --> 03:16:51.980]  Да, да, да, да.
[03:16:52.980 --> 03:16:53.980]  Вот вы о чем.
[03:16:54.980 --> 03:16:55.980]  Пожалуйста, пожалуйста.
[03:16:56.980 --> 03:16:57.980]  Что такое waves.blog?
[03:16:57.980 --> 03:17:07.980]  Ну да, то есть вместо того, чтобы прибираться по всем слоям, я буду просто искать их.
[03:17:08.980 --> 03:17:09.980]  Я буду просто находить...
[03:17:10.980 --> 03:17:11.980]  А какой там сейчас минимальный не пустой слой?
[03:17:12.980 --> 03:17:13.980]  Ну и что?
[03:17:14.980 --> 03:17:19.980]  А если его разыменовать, то что будет?
[03:17:20.980 --> 03:17:21.980]  Ой.
[03:17:21.980 --> 03:17:22.980]  Ой.
[03:17:27.980 --> 03:17:28.980]  Господи.
[03:17:29.980 --> 03:17:30.980]  Как говорится, да.
[03:17:31.980 --> 03:17:32.980]  А еще говорят, что я занадобная.
[03:17:33.980 --> 03:17:34.980]  Да?
[03:17:35.980 --> 03:17:36.980]  Вот.
[03:17:37.980 --> 03:17:38.980]  Хотя нет, я в этом месте тоже говорю, это моя школа.
[03:17:39.980 --> 03:17:40.980]  Вот.
[03:17:41.980 --> 03:17:42.980]  Да.
[03:17:43.980 --> 03:17:44.980]  Ну собственно, да ладно, я предупреждал.
[03:17:45.980 --> 03:17:46.980]  Да, правильно, молодцы.
[03:17:47.980 --> 03:17:48.980]  Так.
[03:17:49.980 --> 03:17:50.980]  Чего?
[03:17:51.980 --> 03:17:54.980]  У Вайла не закрытая скобка.
[03:17:55.980 --> 03:17:56.980]  А я еще код не дописал.
[03:17:57.980 --> 03:18:00.980]  Почему-то в комментарии о скобочках написано.
[03:18:01.980 --> 03:18:02.980]  Это не относится к коду.
[03:18:03.980 --> 03:18:05.980]  Это над кодом написано.
[03:18:06.980 --> 03:18:11.980]  Да, давайте еще определить, что там между строчек написано.
[03:18:12.980 --> 03:18:13.980]  Да, еще там.
[03:18:14.980 --> 03:18:15.980]  Ладно, значит хорошо.
[03:18:16.980 --> 03:18:18.980]  Так, ну смотрите, честно перебираем слой.
[03:18:19.980 --> 03:18:22.980]  Ну ладно, на всякий случай, если у вас там все веса целые,
[03:18:23.980 --> 03:18:25.980]  но бывают нули, переберем специально для вас.
[03:18:26.980 --> 03:18:28.980]  Там size t и равно нулю.
[03:18:29.980 --> 03:18:31.980]  И меньше wave.size.
[03:18:35.980 --> 03:18:36.980]  Плюс плюс и.
[03:18:37.980 --> 03:18:41.980]  И получается пишем int v равно wave it.
[03:18:43.980 --> 03:18:44.980]  Ну и дальше.
[03:18:45.980 --> 03:18:47.980]  Ну фор понятно, как всегда.
[03:18:48.980 --> 03:18:57.980]  Вn, v, w, e, graph.begin.
[03:18:58.980 --> 03:19:00.980]  Граф от v точнее.
[03:19:01.980 --> 03:19:02.980]  Ну и дальше, если там.
[03:19:04.980 --> 03:19:08.980]  Так, во-первых, нет.
[03:19:09.980 --> 03:19:10.980]  Да.
[03:19:11.980 --> 03:19:12.980]  Use it.
[03:19:13.980 --> 03:19:14.980]  Так, ладно.
[03:19:14.980 --> 03:19:17.980]  В общем, короче так, дальше тут надо написать какой-нибудь там if,
[03:19:18.980 --> 03:19:19.980]  use it от v.
[03:19:20.980 --> 03:19:23.980]  И дальше абсолютно стандартную блаблаблажку написать.
[03:19:24.980 --> 03:19:25.980]  В общем, я даже заворачиваться не буду.
[03:19:26.980 --> 03:19:27.980]  Потому что дальше там код прям идентичный.
[03:19:28.980 --> 03:19:32.980]  Потому что, что приятно, если волны нет, а ничего страшного, мы ее заведем.
[03:19:34.980 --> 03:19:37.980]  Единственная, конечно, мелкая проблема, за сколько это будет работать.
[03:19:37.980 --> 03:19:47.980]  Ну, на самом, так, единственное только, а сейчас оговорка, знаете какая мелкая оговорка, оговорка, оговорка, знаете какая.
[03:19:48.980 --> 03:19:53.980]  Надо в конце написать waves.erase.
[03:20:03.980 --> 03:20:05.980]  Ну да, erase притератору, да.
[03:20:05.980 --> 03:20:07.980]  Как-то C++ за первый семестер сдал.
[03:20:10.980 --> 03:20:12.980]  То есть я на экзамен не пришел, да, ну ладно.
[03:20:13.980 --> 03:20:14.980]  А у вас еще не было экзаменов.
[03:20:16.980 --> 03:20:18.980]  Господи, я просто люблю на экзамене про это спрашивать.
[03:20:19.980 --> 03:20:20.980]  Ну и про это, ну да.
[03:20:21.980 --> 03:20:23.980]  Ну какие методы у мапа там всякое вот это все.
[03:20:24.980 --> 03:20:26.980]  Не, на экзамене по C++ я имею в виду, конечно.
[03:20:26.980 --> 03:20:28.980]  Ну у нас не спрашивают, нас просят реализовать.
[03:20:29.980 --> 03:20:34.980]  А, ну вот, ну тогда странно, если у вас попросили реализовать, у вас просили реализовать мапы и не реализовывали erase, и т.д., да, у вас?
[03:20:35.980 --> 03:20:38.980]  А, ну, видимо, видимо еще попросят.
[03:20:39.980 --> 03:20:41.980]  Ну вот, значит, будьте готовы, там.
[03:20:42.980 --> 03:20:43.980]  Да, чего?
[03:20:44.980 --> 03:20:47.980]  Ну конечно так, чем писать сет, может сразу мап-то, вот.
[03:20:48.980 --> 03:20:49.980]  А, тем более, да.
[03:20:50.980 --> 03:20:53.980]  Ну не важно, в общем, на самом деле это, ну в любом случае это не важно.
[03:20:53.980 --> 03:21:02.980]  Ну не важно, в общем, на самом деле это, ну в любом случае, кроме шуток, имеется в виду, действительно, что удалять по итератору можно, это очень удобно, потому что искать не надо элемент.
[03:21:03.980 --> 03:21:09.980]  То есть очень удобно, вы нашли элемент, почесали реп, решили его удалить, но если есть на него итератор, так по нему и удаляйте.
[03:21:10.980 --> 03:21:11.980]  Это вам оптимизирует константу.
[03:21:12.980 --> 03:21:13.980]  Так что полезно.
[03:21:14.980 --> 03:21:15.980]  Вот.
[03:21:16.980 --> 03:21:17.980]  Значит, к чему это нас приводит?
[03:21:18.980 --> 03:21:19.980]  Какое-то дает нам 8.
[03:21:20.980 --> 03:21:21.980]  Вот.
[03:21:22.980 --> 03:21:23.980]  Но я боюсь хуже.
[03:21:24.980 --> 03:21:26.980]  Пока это у нас дает нам асимптотику.
[03:21:29.980 --> 03:21:30.980]  Какую-то.
[03:21:32.980 --> 03:21:36.980]  Да, она нам дает асимптотику е лог, я бы сказал даже е.
[03:21:40.980 --> 03:21:46.980]  Так, ну да, если вы заморочитесь в начале и как бы удалите кратные ребра за е плюс в, то да.
[03:21:46.980 --> 03:21:56.980]  Нет, это если вы заморочитесь и уберете кратные ребра, тогда да, лог е и лог в, в это с точностью до константа 2 одно и то же, да, согласен.
[03:21:57.980 --> 03:21:58.980]  Вот.
[03:22:00.980 --> 03:22:01.980]  На этот раз нет.
[03:22:04.980 --> 03:22:05.980]  Нет.
[03:22:06.980 --> 03:22:07.980]  А, так еще и так.
[03:22:08.980 --> 03:22:10.980]  Вы сказали минимальный, да, минимально ограничен.
[03:22:11.980 --> 03:22:14.980]  Да, минимальный от единицы, чтобы веса вылазили.
[03:22:14.980 --> 03:22:15.980]  Влазили, да.
[03:22:16.980 --> 03:22:17.980]  Ну, можно и в лонг-лонг, неважно.
[03:22:18.980 --> 03:22:21.980]  То есть теперь получается, да, мы изобрели алгоритм за такое е лог е.
[03:22:23.980 --> 03:22:24.980]  Вот.
[03:22:25.980 --> 03:22:27.980]  Более того, на самом деле, ну вот.
[03:22:28.980 --> 03:22:29.980]  То есть, в принципе, вот е лог е.
[03:22:30.980 --> 03:22:31.980]  Можно даже подумать, как его оптимизировать.
[03:22:34.980 --> 03:22:35.980]  Нет, но я вам, ну вот.
[03:22:36.980 --> 03:22:37.980]  Но на самом деле так скажу.
[03:22:38.980 --> 03:22:40.980]  Можно делать за е лог е, хотя на самом деле я вам так скажу.
[03:22:41.980 --> 03:22:43.980]  На самом деле это работает даже более, можно еще точнее оценку сказать.
[03:22:44.980 --> 03:22:45.980]  За е лог к.
[03:22:47.980 --> 03:22:48.980]  Максимальный вон тот вес.
[03:22:49.980 --> 03:22:51.980]  Ну, потому что обратите внимание.
[03:22:52.980 --> 03:22:54.980]  На самом деле у вас, когда вы обрабатываете очередную волну,
[03:22:55.980 --> 03:22:57.980]  у вас дальше там лежит не более чем к следующих очередей.
[03:22:58.980 --> 03:23:01.980]  То есть у вас размер мапа каждый раз не более чем к.
[03:23:02.980 --> 03:23:03.980]  Поэтому получается е лог к.
[03:23:04.980 --> 03:23:05.980]  Вот.
[03:23:08.980 --> 03:23:10.980]  Единственное только, ну вот.
[03:23:11.980 --> 03:23:13.980]  Ну теперь вот, единственное, теперь давайте подумаем.
[03:23:14.980 --> 03:23:15.980]  Сейчас уже не будем переписывать код.
[03:23:16.980 --> 03:23:17.980]  Теперь возникает вопрос.
[03:23:18.980 --> 03:23:19.980]  Да, можно ли это допилить?
[03:23:20.980 --> 03:23:21.980]  Так.
[03:23:22.980 --> 03:23:24.980]  Как нам помогает Фибоначчева куча?
[03:23:25.980 --> 03:23:26.980]  О, он сферичный.
[03:23:27.980 --> 03:23:28.980]  Так.
[03:23:29.980 --> 03:23:30.980]  Ооо.
[03:23:31.980 --> 03:23:32.980]  Так, хорошо.
[03:23:33.980 --> 03:23:34.980]  Давайте введем дичную кучу.
[03:23:35.980 --> 03:23:36.980]  Там будет е лог к.
[03:23:37.980 --> 03:23:38.980]  По основанию д.
[03:23:38.980 --> 03:23:40.980]  Так, сейчас, погодите, погодите, погодите.
[03:23:41.980 --> 03:23:42.980]  Так, давайте.
[03:23:43.980 --> 03:23:44.980]  Так, смотрите, давайте думать.
[03:23:45.980 --> 03:23:48.980]  Так, для того, чтобы ввести хоть какую-нибудь кучу любую другую структуру данных,
[03:23:49.980 --> 03:23:50.980]  нам нужно подумать вот о чем.
[03:23:51.980 --> 03:23:52.980]  То есть, ладно.
[03:23:53.980 --> 03:23:54.980]  Сколько у нас в эту кучу инсортов?
[03:23:55.980 --> 03:23:56.980]  Ну, самое главное.
[03:23:57.980 --> 03:24:00.980]  Сколько у нас экстракт минов?
[03:24:05.980 --> 03:24:06.980]  Так.
[03:24:09.980 --> 03:24:11.980]  Так, так, так, так, что у нас еще?
[03:24:12.980 --> 03:24:17.980]  И сколько у нас там всяких этих дикриски, там каких-нибудь дикрискиев?
[03:24:22.980 --> 03:24:23.980]  Ну, как можно сделать дикриски?
[03:24:24.980 --> 03:24:26.980]  Ну, самое тупое, что можно было, ну вот.
[03:24:27.980 --> 03:24:28.980]  Сейчас, но это как бы надо вот.
[03:24:29.980 --> 03:24:33.980]  Хотя нет, дикриски тут нам, хотя в такой реализации нам дикриски даже не сильно поможет.
[03:24:34.980 --> 03:24:37.980]  А как там поможет, а как там поможет дикриски здесь?
[03:24:38.980 --> 03:24:42.980]  Не, погоди, погоди.
[03:24:43.980 --> 03:24:44.980]  У нас сейчас не так работает.
[03:24:45.980 --> 03:24:47.980]  У нас вещь, у нас для каждого слоя в явном виде вершины хранятся.
[03:24:48.980 --> 03:24:53.980]  Поэтому, когда у вершины меняет, то есть, смотрите, тут уже надо просто подход менять тогда.
[03:24:54.980 --> 03:24:58.980]  Потому что когда мы сейчас, когда у нас там слой 179 меняется на слой 57,
[03:24:59.980 --> 03:25:02.980]  мы вершину в явном виде перезапихиваем в слой 57, возможно, создавая этот слой.
[03:25:02.980 --> 03:25:08.980]  Поэтому, на самом деле дикриски нам, поэтому обидно, но дикриски нам в данном случае никак не помогают.
[03:25:09.980 --> 03:25:11.980]  Хотя это как бы, хотя это может быть следующая идея.
[03:25:14.980 --> 03:25:18.980]  Вот, а это на самом деле уже следующая идея.
[03:25:19.980 --> 03:25:21.980]  Потому что следующая оптимизация говорит так.
[03:25:22.980 --> 03:25:24.980]  Нет, точнее так, это уже даже не оптимизация, потому что в принципе и так можно,
[03:25:25.980 --> 03:25:28.980]  пока можно написать е-лог-к, можно вверх-вверх,
[03:25:28.980 --> 03:25:31.980]  если это число целое, можно ввести дерево НМД Боаса,
[03:25:32.980 --> 03:25:37.980]  потому что дерево НМД Боаса, все вот эти операции для целых чисел будет за лог-лог-к делать.
[03:25:38.980 --> 03:25:40.980]  Это я вам так, анонс на будущее.
[03:25:41.980 --> 03:25:45.980]  Ну памяти будет, ну, ой, ну там хэш-мапы, да, вот.
[03:25:46.980 --> 03:25:49.980]  Ну память от ка, в общем-то, ну хотя да, не очень.
[03:25:50.980 --> 03:25:55.980]  Да, нет, нет, если в ка было миллион, то в принципе можно ввести дерево НМД Боаса,
[03:25:55.980 --> 03:25:59.980]  да, нет, нет, если в ка было миллион, то в принципе можно, кстати, самое смешное это.
[03:26:00.980 --> 03:26:05.980]  Не, а в чем проблема? Там, кстати, ну да, но там, правда, вместо этого лог-лог-к начинаешь думать,
[03:26:06.980 --> 03:26:09.980]  а не зайдет ли там хэгуша и корневуха, вот.
[03:26:11.980 --> 03:26:12.980]  Нет, ну а что, да?
[03:26:13.980 --> 03:26:16.980]  Нет, кстати, вполне вероятно, потому что когда у вас там много-много вставок,
[03:26:17.980 --> 03:26:20.980]  допустим, а у вас там много-много вставок и не сильно много удалений, да,
[03:26:20.980 --> 03:26:25.980]  то как бы там, тем более, которые еще идут последовательно, то в общем-то, корневуха вот так начинает работать.
[03:26:26.980 --> 03:26:29.980]  Вот, на самом деле-то, вот.
[03:26:30.980 --> 03:26:34.980]  Нет, хотя где-то корневуха в таком виде, ну ладно, в общем, лог-лог-к поверим пока.
[03:26:35.980 --> 03:26:37.980]  Но можно еще дальше думать, то есть если ка,
[03:26:38.980 --> 03:26:42.980]  ну потому что на самом деле следующая идея такая, что делать, если у нас ребра от одного до ка,
[03:26:43.980 --> 03:26:45.980]  но они бывают еще и дробные?
[03:26:51.980 --> 03:26:56.980]  Но если они бывают дробные, то выясняется на самом деле такой неожиданный чит.
[03:26:57.980 --> 03:27:03.980]  Чит заключается в том, что, а кто сказал, особенно в свете мапа, что номера слоев обязаны быть целыми?
[03:27:07.980 --> 03:27:08.980]  Именно.
[03:27:09.980 --> 03:27:13.980]  То есть на этот раз слой номер корень из двух начинает работать.
[03:27:13.980 --> 03:27:15.980]  То есть слой номер корень из двух.
[03:27:16.980 --> 03:27:18.980]  То есть, смотри, то есть работает абсолютно так же, ну в предположении,
[03:27:19.980 --> 03:27:22.980]  ну с твой оговор, конечно, мы предполагаем, что мы делаем вычисление абсолютно точно.
[03:27:25.980 --> 03:27:29.980]  Вот, то есть вместо, ну вместо long double, поэтому обычно будем там,
[03:27:30.980 --> 03:27:34.980]  будем хранить вот это вот a плюс b корней из двух, или там просто рациональные числа там.
[03:27:35.980 --> 03:27:36.980]  Вот.
[03:27:37.980 --> 03:27:38.980]  Ну вот это вот все, да, rational, да.
[03:27:39.980 --> 03:27:41.980]  То есть все, что мы делаем, мы делаем абсолютно точно.
[03:27:41.980 --> 03:27:42.980]  Это вот все, да, rational, да.
[03:27:43.980 --> 03:27:44.980]  То есть все, что угодно.
[03:27:45.980 --> 03:27:49.980]  И тогда, ну вот, и неожиданно оказывается, что все это начинает работать.
[03:27:50.980 --> 03:27:54.980]  Причем на этот раз заметим, что номер слоя-то у нас все тот же, да.
[03:27:55.980 --> 03:27:57.980]  То есть номер слоя теперь опять совпадает с расстоянием, да.
[03:27:58.980 --> 03:28:04.980]  Поэтому теперь можно по индукции доказывать, что действительно каждая вершина будет обработана в своем слое,
[03:28:05.980 --> 03:28:08.980]  причем не позже, чем мы закончили обрабатывать этот слой.
[03:28:09.980 --> 03:28:10.980]  Понимаете, да?
[03:28:11.980 --> 03:28:12.980]  То есть на этот раз уже да.
[03:28:13.980 --> 03:28:17.980]  Причем более того, обратите внимание, теперь снимается ограничение, что веса от единицы.
[03:28:18.980 --> 03:28:24.980]  Потому что если у меня тут какой-нибудь там 0.1, то на этот раз никаких там, никаких проблем нет.
[03:28:25.980 --> 03:28:31.980]  Потому что, ну, здесь никаких проблем, потому что у нас слой 4.2, слой 4.3, это два разных слоя, да.
[03:28:32.980 --> 03:28:38.980]  А, в-треть, даже если я тут случайно еще нарисую ребро на этот раз веса 0,
[03:28:39.980 --> 03:28:44.980]  то все равно ничего страшного, потому что эту вершину мы обработаем, я утверждаю, в слое 4.3,
[03:28:45.980 --> 03:28:51.980]  потому что мы дойдем до слоя 4.3 и обработаем это ребро и попытаемся запихнем эту вершину в слое 4.3.
[03:28:54.980 --> 03:28:57.980]  Ну-ка давайте, то есть, ну-ка давайте-ка в итоге посмотрим.
[03:28:58.980 --> 03:29:01.980]  Так, ну-ка давайте теперь посмотрим, что же у нас получилось.
[03:29:04.980 --> 03:29:06.980]  Ну, на самом деле, да, можно не тянуть интригу.
[03:29:07.980 --> 03:29:10.980]  Да, то есть, нет, давайте потянем пока интригу, чтобы явно уж видно.
[03:29:15.980 --> 03:29:20.980]  Ну вот, то есть, теперь вместо того, то есть мы не храним слои, то есть у нас подход теперь такой.
[03:29:21.980 --> 03:29:24.980]  Такие так, слои мы могли бы хранить и было бы тоже елок что-нибудь, да.
[03:29:25.980 --> 03:29:30.980]  Но теперь у нас идея такая, а давайте не хранить слои, а просто храним вершины
[03:29:30.980 --> 03:29:35.980]  и для каждой вершины храним номер слоя, ну то есть расстояние, да,
[03:29:36.980 --> 03:29:41.980]  и в каждый момент времени из всех вершин, которые мы еще не обработали, выбираем минимальное расстояние.
[03:29:45.980 --> 03:29:49.980]  Да, только идея, ну не совсем так, в BFS мы перебирали слои в порядке возрастания.
[03:29:50.980 --> 03:29:54.980]  Да, то сейчас мы такого не делаем, но сейчас мы просто выбираем минимальный слой.
[03:29:54.980 --> 03:30:00.980]  Нет, разница в том, что тут мы как бы и прям чисто слои хранили, а теперь мы этого делать не будем.
[03:30:03.980 --> 03:30:11.980]  То есть у нас, то есть базовая версия, которую, кстати, там многие пишут, то что, да, то есть это будет такая,
[03:30:12.980 --> 03:30:18.980]  то есть сет от pair, от, значит, допустим LD и int.
[03:30:18.980 --> 03:30:23.980]  То есть храним в сете пары расстояния до вершины, сама вершина. Понятно, да?
[03:30:24.980 --> 03:30:33.980]  Ну вот, то есть изначально, ну вот, ну и как всегда, вектор LD, d от, соответственно, n и int.
[03:30:34.980 --> 03:30:43.980]  Ну как всегда, d от s равно 0, значит s равно, там, 0.
[03:30:43.980 --> 03:30:48.980]  Вот. Что, думаете, он это не съест?
[03:30:55.980 --> 03:31:01.980]  А, нет, ну, да, но это с большой, конечно, да. Хорошо.
[03:31:01.980 --> 03:31:10.980]  Ну и дальше у нас там что начинается? Там vile-nea-s.empty.
[03:31:13.980 --> 03:31:18.980]  Значит, что у нас тогда получается?
[03:31:18.980 --> 03:31:28.980]  Значит, так, как-то там, tie от, ну, допустим, d, v.
[03:31:31.980 --> 03:31:35.980]  А какие? Да? Окей.
[03:31:36.980 --> 03:31:40.980]  Ну, допустим, d, v.
[03:31:40.980 --> 03:31:47.980]  А какие? Да? Окей.
[03:31:48.980 --> 03:31:54.980]  Так, хорошо, tie от dv равно звездочка s.bg.
[03:32:01.980 --> 03:32:03.980]  Ну, это я хочу просто пару сразу расписать.
[03:32:04.980 --> 03:32:07.980]  Ну, я могу тут пару написать, потом сказать d равно там p.first, вот это все.
[03:32:07.980 --> 03:32:11.980]  Кстати, как бы он, может, он это не скомпилит, потому что выяснил штамп cost.
[03:32:27.980 --> 03:32:29.980]  Ну, хорошо.
[03:32:30.980 --> 03:32:37.980]  Так, хорошо. Так, во-первых, да, давайте, значит, pay raise-ом сразу бегим, да, вот.
[03:32:41.980 --> 03:32:46.980]  Значит, поехали, как всегда, v, n, v, w, 2.
[03:32:47.980 --> 03:32:51.980]  Твой граф от v, как уже многострадально было, да.
[03:32:52.980 --> 03:32:58.980]  И как выясняется, что если d от n, v оказался больше, чем d.
[03:33:01.980 --> 03:33:04.980]  Так, ладно, во-первых, тут dist и тут dist.
[03:33:05.980 --> 03:33:07.980]  И тут dist, да, что ж такое?
[03:33:07.980 --> 03:33:17.980]  Так, dist от n, v больше, чем d, то что?
[03:33:20.980 --> 03:33:22.980]  Точно?
[03:33:23.980 --> 03:33:26.980]  Вот, да, плюс v, да, конечно.
[03:33:27.980 --> 03:33:29.980]  То, значит, тогда поехали.
[03:33:29.980 --> 03:33:36.980]  Так, смотрите, нет, здесь не надо торопиться, то есть как бы, так говорят шахматы, тут надо не перепутать порядок ходов.
[03:33:49.980 --> 03:33:51.980]  Вот.
[03:34:00.980 --> 03:34:02.980]  А что не так?
[03:34:10.980 --> 03:34:13.980]  О, вот такой вот красота.
[03:34:15.980 --> 03:34:17.980]  Вот.
[03:34:19.980 --> 03:34:25.980]  Так что вот такой вот неожиданный алгоритм, ну, по крайней мере, вариации сетом за e log v у нас получился.
[03:34:26.980 --> 03:34:28.980]  Да, это буквально e log v.
[03:34:29.980 --> 03:34:30.980]  Да, обычно.
[03:34:31.980 --> 03:34:36.980]  Но этот алгоритм, обычный называется алгоритм, алгоритм дейкстрей с чем-нибудь.
[03:34:40.980 --> 03:34:41.980]  Да, это да.
[03:34:42.980 --> 03:34:52.980]  Но тут, конечно, подлянка, да, потому что на самом деле, да, тут я встретил еще тут подлянку, потому что почему-то, как выясняется, многие думают, что в алгоритм дейкстрей сет или куча зашита.
[03:34:54.980 --> 03:34:56.980]  Так вот, на самом деле это не так.
[03:34:57.980 --> 03:35:06.980]  Ну, хотя ладно, тут, конечно, можно как думать, потому что, судя по всему, в его, в оригинальной статье дейкстре, в общем-то, одновременно была версия алгоритма без кучи и алгоритма с кучей.
[03:35:07.980 --> 03:35:08.980]  Идейно куча там зашита.
[03:35:09.980 --> 03:35:11.980]  Нет, куча там, нет, идейно куча там не зашита.
[03:35:12.980 --> 03:35:13.980]  Куча там зашита лучше, чем...
[03:35:14.980 --> 03:35:18.980]  Нет, я бы, я бы, я предпочитаю мыслить так.
[03:35:19.980 --> 03:35:21.980]  Идейно там никакая куча не зашита вообще.
[03:35:21.980 --> 03:35:29.980]  Идея на алгоритм дейкстре заключается в том, что мы на каждом шаге можем взять вершину, до которой расстояние сейчас вот такое.
[03:35:30.980 --> 03:35:31.980]  Там минимально возможно.
[03:35:32.980 --> 03:35:33.980]  Минимально возможно, да.
[03:35:35.980 --> 03:35:40.980]  Вот, то есть это, на самом деле, то есть как бы куча, это уже, наоборот, как это, как возможно этот минимум искать.
[03:35:42.980 --> 03:35:43.980]  Вот, потому что, да.
[03:35:44.980 --> 03:35:46.980]  Да, потому что, правильно, потому что есть дейкстра на куче.
[03:35:47.980 --> 03:35:48.980]  Да.
[03:35:49.980 --> 03:35:50.980]  Да.
[03:35:51.980 --> 03:35:52.980]  Но успею wahrscheinlich.
[03:35:53.980 --> 03:35:57.980]  То есть, честно скажу, то есть обычно я считаю алгоритм дейкстре то, что работает за E плюс V квадрат.
[03:36:00.980 --> 03:36:01.980]  И Дейкстрра с длинными весами?
[03:36:02.980 --> 03:36:03.980]  Вот.
[03:36:04.980 --> 03:36:07.980]  Ну я не знаю, мне еще исторически, потому что, честно говоря, у меня прошел нот.
[03:36:08.980 --> 03:36:11.980]  Потому что когда я впервые изучал уритм дейкстре, вот честно его рассказали просто стандартным образом.
[03:36:12.980 --> 03:36:13.980]  То есть, вот сделаем...
[03:36:14.980 --> 03:36:18.980]  То есть, сделаем, то есть, вот так вот будем перебирать все вершины и честно релаксировать.
[03:36:19.980 --> 03:36:20.980]  Алгоритм будет работать за E plus V квадрат.
[03:36:21.980 --> 03:36:26.980]  Доказательства там просто пишем доказательства. Думаю, как и вам в свое время рассказывали.
[03:36:26.980 --> 03:36:35.980]  Но правда заметим, что сегодня нам это доказательство даже можно особо не эмулировать,
[03:36:35.980 --> 03:36:39.980]  потому что из всего вышесказанного доказательства следует автоматически.
[03:36:39.980 --> 03:36:48.980]  У нас просто технология, что мы себе вообразим, что мы идем по слоям, и на самом деле получается так.
[03:36:49.980 --> 03:36:53.980]  Вот, просто аккуратненько докажем, что вот хорошо.
[03:36:53.980 --> 03:36:59.980]  Хотя то доказательство, как мы, видимо, в какой-то момент узнаем, то доказательство тоже сработает,
[03:36:59.980 --> 03:37:03.980]  потому что мы там можем подумать, а куда эту дэкстру можно вообще обобщить.
[03:37:03.980 --> 03:37:06.980]  Впрочем, посмотрим.
[03:37:06.980 --> 03:37:11.980]  Но пока же скажем, что вот да, есть, но тут полезно помнить, особенно в свете этого алгоритма,
[03:37:11.980 --> 03:37:15.980]  что вот есть алгоритм за e плюс f квадрат, который будет минимум искать в тупую.
[03:37:15.980 --> 03:37:22.980]  Как мы уже обсуждали с примом, этот алгоритм может обыграть вот этот алгоритм, если у вас граф полный.
[03:37:22.980 --> 03:37:26.980]  Понимаете, да, потому что v квадрат log v и v квадрат тогда тут будет.
[03:37:26.980 --> 03:37:32.980]  Ну, конечно, в классических речениях, когда у вас там 100 тысяч вершин, 200 тысяч ребер, конечно же, это лучше.
[03:37:32.980 --> 03:37:37.980]  Но здесь уже и начинается, потому что вместо этого сета можно было бы сделать какую-нибудь кучу,
[03:37:37.980 --> 03:37:41.980]  причем кучу, которая умеет делать хорошо дикориски.
[03:37:41.980 --> 03:37:44.980]  Потому что по факту, если вы тут хорошо делаете дикориски,
[03:37:44.980 --> 03:37:51.980]  то тогда на самом деле можно реализовать алгоритм дэкстры за e плюс v лог v.
[03:37:51.980 --> 03:37:56.980]  И получается вообще хорошо.
[03:37:56.980 --> 03:38:00.980]  Вот, понимаете, да?
[03:38:00.980 --> 03:38:04.980]  Да, в общем, получается вот такая e плюс v лог v.
[03:38:04.980 --> 03:38:08.980]  Получается, да, это симптосика как бы убивает и это, и это.
[03:38:08.980 --> 03:38:12.980]  Другой вопрос, что вам придется реализовать кучу фибоначи?
[03:38:12.980 --> 03:38:14.980]  Нет.
[03:38:14.980 --> 03:38:21.980]  Тут называется, ну, если мы верим, что где-то в 17, в каких-то в гну, в 17 стандарте куча фибоначи есть,
[03:38:21.980 --> 03:38:24.980]  ладно, не в стандарте, а просто в компиляторе.
[03:38:24.980 --> 03:38:31.980]  Я говорю, кто-то из предыдущего поколения, у меня там студентов, у меня там куча фибоначи в каком-то гнушном компиляторе находил.
[03:38:31.980 --> 03:38:37.980]  Ну вот.
[03:38:37.980 --> 03:38:38.980]  Нет, а что такое?
[03:38:38.980 --> 03:38:39.980]  Ну почему бы?
[03:38:39.980 --> 03:38:42.980]  Не, ну как-то добрые люди добавили.
[03:38:42.980 --> 03:38:51.980]  Не, ну как бы в конце концов, вы же пользуетесь 128, хотя его в стандарте тоже нету.
[03:38:51.980 --> 03:38:55.980]  Ну вот.
[03:38:55.980 --> 03:38:59.980]  Какие компиляторы?
[03:38:59.980 --> 03:39:02.980]  Ну ждем, да.
[03:39:02.980 --> 03:39:10.980]  Ну это да, тогда появится, да, тогда появятся задачи на 200, да, на 256, естественным образом.
[03:39:10.980 --> 03:39:13.980]  Но это уже совсем, но это другая история.
[03:39:13.980 --> 03:39:15.980]  Вот, так что вот таким образом получается.
[03:39:15.980 --> 03:39:21.980]  То есть как видим, что такое алгоритм Д-экстра, но это просто БФС на бесконечном количестве очередей.
[03:39:21.980 --> 03:39:26.980]  Да, как мы, собственно, да, можно так, так лекцию пафосной назвать, да.
[03:39:26.980 --> 03:39:29.980]  Д-экстра как бы БФС на бесконечном, да.
[03:39:29.980 --> 03:39:32.980]  Вот.
[03:39:32.980 --> 03:39:35.980]  Так что получается, да, то есть вот так вот неожиданно нот неожиданно вывели.
[03:39:35.980 --> 03:39:47.980]  Так, есть ли тут какие-то вопросы?
[03:39:47.980 --> 03:39:53.980]  Ага, ну в принципе на самом деле можно тогда так, но можно видимо в этой точке и второй перерыв устроить.
[03:39:53.980 --> 03:39:58.980]  А, стоп, или уже не надо, да.
[03:39:58.980 --> 03:40:02.980]  А, 40 минут, да.
[03:40:02.980 --> 03:40:10.980]  Боже, ну как показала практика прошлого раза, можем же и не уйти, да.
[03:40:10.980 --> 03:40:12.980]  Ну ладно, значит, смотрите.
[03:40:12.980 --> 03:40:14.980]  Нет, ну на самом деле да, так что тогда.
[03:40:14.980 --> 03:40:19.980]  Нет, слушайте, как все долго рассказывается, потому что я думал, что это вообще все за мгновенный, придется сегодня потоки рассказывать.
[03:40:20.980 --> 03:40:26.980]  За 20 минут какие потоки, нет.
[03:40:26.980 --> 03:40:33.980]  Нет, ну смотрите, к этой штуке, как вы смотрите, тут про Д-экстра кое-что еще надо рассказать.
[03:40:33.980 --> 03:40:39.980]  Вот, а во-вторых, еще как бы придется как минимум хотя бы упомянуть Флойда Форда Белмана еще.
[03:40:39.980 --> 03:40:48.980]  А, ну и конечно его величество Джонсона.
[03:40:48.980 --> 03:40:51.980]  Да, да.
[03:40:51.980 --> 03:40:57.980]  Да, он возникает не в минкосте, если что, да.
[03:40:57.980 --> 03:40:59.980]  Вот так вот, да.
[03:40:59.980 --> 03:41:02.980]  Ну а что вы думали, что мы сейчас неожиданно минкост о чем изучать, да?
[03:41:02.980 --> 03:41:05.980]  Нет, нет, на самом деле да.
[03:41:05.980 --> 03:41:09.980]  Нет, ну просто полезно будет знать, но до этого мы доживем.
[03:41:09.980 --> 03:41:14.980]  Но сначала, ладно, мы не будем сейчас переходить, прежде чем добавлять отрицательные ребра,
[03:41:14.980 --> 03:41:18.980]  про Д-экстру мы еще чуть-чуть поговорим.
[03:41:18.980 --> 03:41:26.980]  Смотрите, сейчас мы попробуем алгоритм Т-экстры обобщить, чтоб понять вообще, а куда он еще применим.
[03:41:26.980 --> 03:41:29.980]  Ну, просто в чем идея?
[03:41:29.980 --> 03:41:35.980]  Ну, потому что дело в том, что на самом деле иногда вес пути, то есть не обязательно,
[03:41:35.980 --> 03:41:41.980]  бывает, что вес пути это тупо сумма весов ребра.
[03:41:41.980 --> 03:41:47.980]  Ну, на самом деле бывает, бывает вес пути это максимум из ребер на пути.
[03:41:47.980 --> 03:41:50.980]  Или минимум из ребер на пути.
[03:41:50.980 --> 03:41:52.980]  Или сумма двух минимумов.
[03:41:52.980 --> 03:41:57.980]  Или сумма двух максимумов.
[03:41:57.980 --> 03:42:01.980]  Да там еще отдельная песня, а что такое путь вообще?
[03:42:01.980 --> 03:42:05.980]  Потому что, что такое путь, как мы вообще ребра делаем?
[03:42:05.980 --> 03:42:10.980]  То есть, нет, или может вообще, или есть же вообще классическая задача, я думаю,
[03:42:10.980 --> 03:42:12.980]  многие из вас видели автобусы.
[03:42:12.980 --> 03:42:17.980]  То есть, знаменитые задачи, которые дают просто второй в контесте на Д-экстру, когда вы ее изучаете.
[03:42:17.980 --> 03:42:19.980]  Нет?
[03:42:19.980 --> 03:42:21.980]  Нет, да ладно.
[03:42:21.980 --> 03:42:23.980]  Ну, смотрите, классика жанра.
[03:42:23.980 --> 03:42:27.980]  Значит, вам нужно доехать из города С в город Т.
[03:42:27.980 --> 03:42:30.980]  Вы знаете, что у вас есть автобусы.
[03:42:30.980 --> 03:42:36.980]  Каждый автобус совершает один рейс из пункта У в пункт В.
[03:42:36.980 --> 03:42:42.980]  Причем вам известно, что он выезжает из города У во время Т.И.Т.
[03:42:42.980 --> 03:42:46.980]  И приезжает в город В во время...
[03:42:46.980 --> 03:42:48.980]  Нет.
[03:42:48.980 --> 03:42:50.980]  Ну, Т-штрих, давайте, И.Т., неважно.
[03:42:50.980 --> 03:42:53.980]  Ну, может, любую другую пупу подставьте, неважно.
[03:42:53.980 --> 03:42:57.980]  Ну, так, короче, времена заданы, когда он выезжает, когда он приезжает.
[03:42:57.980 --> 03:43:01.980]  Вы знаете, что вы можете пересесть из автобуса в автобус, если вы находитесь в одном городе,
[03:43:01.980 --> 03:43:03.980]  и у вас там на пересадку есть, ну, допустим, минута.
[03:43:03.980 --> 03:43:05.980]  Хотя бы.
[03:43:05.980 --> 03:43:07.980]  И теперь задача.
[03:43:07.980 --> 03:43:09.980]  Можете ли вы доехать до города Т?
[03:43:09.980 --> 03:43:13.980]  Если да, насколько рано вы можете туда доехать?
[03:43:13.980 --> 03:43:15.980]  Ну, конечно, я говорю.
[03:43:15.980 --> 03:43:17.980]  Обычно эту задачу...
[03:43:17.980 --> 03:43:20.980]  То есть, обычно, когда вы изучаете алгоритм Д-экстра,
[03:43:20.980 --> 03:43:23.980]  то в учебном контесте задача идет едва ли не второй.
[03:43:23.980 --> 03:43:27.980]  Да, при первой задаче напишите, собственно, Д-экстра.
[03:43:27.980 --> 03:43:29.980]  И, в общем-то, ничего.
[03:43:29.980 --> 03:43:31.980]  Удивительно.
[03:43:31.980 --> 03:43:33.980]  Потому что, по-хорошему говоря,
[03:43:33.980 --> 03:43:37.980]  время у нас движется в одну сторону.
[03:43:37.980 --> 03:43:42.980]  Да, оно у нас линейно движется в одну сторону.
[03:43:42.980 --> 03:43:48.980]  Слава богу, мы на том факультете, который глубокую релитибическую физику не изучает.
[03:43:48.980 --> 03:43:51.980]  Поэтому у нас время течет в одну сторону.
[03:43:51.980 --> 03:43:57.980]  И это дает нам возможность тоже ввести абсолютно те же самые, в принципе, слои.
[03:43:57.980 --> 03:43:59.980]  Логично, да?
[03:43:59.980 --> 03:44:03.980]  То есть, на самом деле, ввести абсолютно те же самые слои.
[03:44:03.980 --> 03:44:06.980]  То есть, только слои у нас теперь будут просто конкретные отсечки времени.
[03:44:06.980 --> 03:44:10.980]  И написать, по сути, абсолютно того же самого Д-экстра.
[03:44:10.980 --> 03:44:13.980]  Да, можно это писать так.
[03:44:13.980 --> 03:44:15.980]  Но на самом деле...
[03:44:15.980 --> 03:44:18.980]  А можно даже себе воображать эти слои.
[03:44:18.980 --> 03:44:22.980]  Но если мы хотим там себе пытаться понимать, когда Д-экстра работает, когда нет,
[03:44:22.980 --> 03:44:25.980]  можно попытаться даже формальные требования себе ввести.
[03:44:25.980 --> 03:44:28.980]  То есть, мы хотим сказать, что такое W-атро.
[03:44:28.980 --> 03:44:31.980]  То есть, допустим, пусть РО это путь какой-то.
[03:44:31.980 --> 03:44:35.980]  И вот W-атро это какой-то вот функционал.
[03:44:35.980 --> 03:44:37.980]  Вот.
[03:44:37.980 --> 03:44:41.980]  И нам на этот функционал должны быть выполнены какие-то условия.
[03:44:41.980 --> 03:44:46.980]  Вот теперь давайте думать, какие условия надо выполнить на этот функционал,
[03:44:46.980 --> 03:44:50.980]  чтобы алгоритм Д-экстра работал?
[03:44:50.980 --> 03:44:57.980]  Наверное, неплохо бы ассоциативность.
[03:44:57.980 --> 03:44:59.980]  Вот.
[03:44:59.980 --> 03:45:01.980]  То есть, то, что...
[03:45:01.980 --> 03:45:03.980]  Ассоциативность?
[03:45:03.980 --> 03:45:06.980]  Нет, даже не обязательно, на самом деле.
[03:45:06.980 --> 03:45:09.980]  Что функционал-приписок меньше, чем функционал.
[03:45:09.980 --> 03:45:11.980]  Да, ну во-первых, да.
[03:45:11.980 --> 03:45:14.980]  Нет, смотрите, какие у нас требования на самом деле могут быть?
[03:45:14.980 --> 03:45:16.980]  Какими требования пользуются?
[03:45:16.980 --> 03:45:19.980]  Ну во-первых, чтобы вот эти слои у нас вообще шли слева направо.
[03:45:19.980 --> 03:45:21.980]  Аккуратно.
[03:45:21.980 --> 03:45:23.980]  Мы должны говорить следующее.
[03:45:23.980 --> 03:45:25.980]  То есть в доказательстве мы жестко пользовались,
[03:45:25.980 --> 03:45:28.980]  на самом деле двумя вещами мы пользовались не явно.
[03:45:28.980 --> 03:45:32.980]  Ну первое очевидное, что когда вы идете по пути,
[03:45:32.980 --> 03:45:34.980]  да, и насчитываете расстояние,
[03:45:34.980 --> 03:45:38.980]  то у вас оказывается, что как бы функционал вот этого пути
[03:45:38.980 --> 03:45:40.980]  должен быть больше функционала вот этого пути.
[03:45:40.980 --> 03:45:42.980]  Ну не меньше.
[03:45:42.980 --> 03:45:46.980]  То есть в переводе говоря я напишу это условие такое первое.
[03:45:46.980 --> 03:45:48.980]  То есть для любой,
[03:45:48.980 --> 03:45:50.980]  то есть я пишу так,
[03:45:50.980 --> 03:45:54.980]  что w от ro плюс ребрышка,
[03:45:54.980 --> 03:45:57.980]  ну если я в пути прицепил ребро,
[03:45:57.980 --> 03:45:59.980]  должно быть больше либо равно,
[03:45:59.980 --> 03:46:01.980]  чем если я его не прицепил.
[03:46:05.980 --> 03:46:07.980]  Ну то есть картинка такая.
[03:46:08.980 --> 03:46:10.980]  Вот.
[03:46:12.980 --> 03:46:14.980]  Вот.
[03:46:14.980 --> 03:46:16.980]  То есть вот это для нас прямо необходимо.
[03:46:17.980 --> 03:46:19.980]  Но достаточно ли?
[03:46:27.980 --> 03:46:29.980]  А вот выясняется, что нет.
[03:46:29.980 --> 03:46:31.980]  Выясняется, что оказывается,
[03:46:31.980 --> 03:46:34.980]  мы не явно пользовались еще одной порлой штукой.
[03:46:34.980 --> 03:46:36.980]  Я нам...
[03:46:36.980 --> 03:46:38.980]  Что?
[03:46:38.980 --> 03:46:40.980]  Не.
[03:46:42.980 --> 03:46:44.980]  Не, ну это понятно.
[03:46:44.980 --> 03:46:46.980]  Это можно сразу сказать,
[03:46:46.980 --> 03:46:50.980]  что w каждому ro составляет элемент из линейного порядочного множества.
[03:46:50.980 --> 03:46:52.980]  Это все понятно.
[03:46:52.980 --> 03:46:55.980]  Не, мы пользовались еще одной порлой штукой.
[03:46:55.980 --> 03:46:57.980]  Может быть сейчас даже не видна,
[03:46:57.980 --> 03:46:59.980]  но это для нас совсем просто фундамент.
[03:46:59.980 --> 03:47:01.980]  Мы пользовались такой порлой штукой,
[03:47:01.980 --> 03:47:03.980]  что если вот это кратчайший путь,
[03:47:03.980 --> 03:47:05.980]  то и все префиксы являются кратчайшим путем.
[03:47:11.980 --> 03:47:13.980]  Нет.
[03:47:13.980 --> 03:47:15.980]  Да нет.
[03:47:15.980 --> 03:47:17.980]  Нет.
[03:47:17.980 --> 03:47:19.980]  Нет.
[03:47:19.980 --> 03:47:21.980]  Нет.
[03:47:21.980 --> 03:47:23.980]  Нет.
[03:47:23.980 --> 03:47:25.980]  Нет.
[03:47:25.980 --> 03:47:27.980]  Да нет.
[03:47:27.980 --> 03:47:29.980]  Нет.
[03:47:29.980 --> 03:47:31.980]  Вот например ситуация.
[03:47:31.980 --> 03:47:33.980]  Если у вас функционал,
[03:47:33.980 --> 03:47:35.980]  это сумма двух максимумов.
[03:47:37.980 --> 03:47:39.980]  Хотя нет,
[03:47:39.980 --> 03:47:41.980]  сумма двух максимумов.
[03:47:41.980 --> 03:47:43.980]  Сейчас нет,
[03:47:43.980 --> 03:47:45.980]  сумма двух максимумов.
[03:47:45.980 --> 03:47:47.980]  Да, если сумма двух максимумов,
[03:47:47.980 --> 03:47:49.980]  то у вас может быть какой-нибудь путь
[03:47:49.980 --> 03:47:51.980]  в 10 в 9-й 1,
[03:47:51.980 --> 03:47:53.980]  а тут будет
[03:47:53.980 --> 03:47:55.980]  допустим 10 в 9-й пополам,
[03:47:55.980 --> 03:47:57.980]  10 в 9-й пополам.
[03:47:59.980 --> 03:48:01.980]  Да.
[03:48:01.980 --> 03:48:03.980]  Тогда у нас кратчайший путь какой?
[03:48:03.980 --> 03:48:05.980]  Вот такой, 10 в 9-й, 10 в 9-й.
[03:48:05.980 --> 03:48:07.980]  Но если вы прицепите сюда
[03:48:07.980 --> 03:48:09.980]  ребро 5,
[03:48:09.980 --> 03:48:11.980]  то выясняется, что вот так ходить было не выгодно.
[03:48:11.980 --> 03:48:13.980]  Потому что этот путь
[03:48:13.980 --> 03:48:15.980]  как бы длиннее,
[03:48:15.980 --> 03:48:17.980]  но если к нему прицепить так,
[03:48:17.980 --> 03:48:19.980]  то вот этот путь начинает обгонять вот этот.
[03:48:19.980 --> 03:48:21.980]  Нет.
[03:48:21.980 --> 03:48:23.980]  Просто тут
[03:48:23.980 --> 03:48:25.980]  два максимума,
[03:48:25.980 --> 03:48:27.980]  хотя
[03:48:27.980 --> 03:48:29.980]  пока ничего не поменял.
[03:48:29.980 --> 03:48:31.980]  Хорошо, давайте подгоним,
[03:48:31.980 --> 03:48:33.980]  чтобы поменялось что-то.
[03:48:39.980 --> 03:48:41.980]  Так.
[03:48:43.980 --> 03:48:45.980]  Сейчас скажем, скажем, скажем.
[03:48:45.980 --> 03:48:47.980]  Скажем, скажем, скажем.
[03:48:55.980 --> 03:48:57.980]  Так, хорошо, тут 11,
[03:48:57.980 --> 03:48:59.980]  а тут минус 10.
[03:49:03.980 --> 03:49:05.980]  Но почему? Здесь два максимума
[03:49:05.980 --> 03:49:07.980]  дадут 10 в 9-й плюс 1,
[03:49:07.980 --> 03:49:09.980]  а тут будут просто 10 в 9-й.
[03:49:09.980 --> 03:49:11.980]  А здесь
[03:49:11.980 --> 03:49:13.980]  кратчайший путь был вот этот.
[03:49:15.980 --> 03:49:17.980]  Нет, смотрите, теперь кратчайший путь
[03:49:17.980 --> 03:49:19.980]  вот этот.
[03:49:19.980 --> 03:49:21.980]  Вот. Но
[03:49:21.980 --> 03:49:23.980]  вот длина вот этого пути 10 в 9-й
[03:49:23.980 --> 03:49:25.980]  плюс 1.
[03:49:27.980 --> 03:49:29.980]  Да. А тут
[03:49:29.980 --> 03:49:31.980]  10 в 9-й.
[03:49:31.980 --> 03:49:33.980]  Да, все докрутили.
[03:49:33.980 --> 03:49:35.980]  То есть не так очевидно.
[03:49:35.980 --> 03:49:37.980]  Хотя
[03:49:37.980 --> 03:49:39.980]  стоп, стоп, стоп.
[03:49:39.980 --> 03:49:41.980]  Хотя с другой стороны это пример не очень интересен,
[03:49:41.980 --> 03:49:43.980]  потому что, а нет,
[03:49:43.980 --> 03:49:45.980]  хотя нет. Да, этому он удовлетворяет,
[03:49:45.980 --> 03:49:47.980]  да.
[03:49:47.980 --> 03:49:49.980]  Так что получается, видите,
[03:49:49.980 --> 03:49:51.980]  это неожиданная подлянка.
[03:49:51.980 --> 03:49:53.980]  Если бы вы писали стандартное доказательство алгоритма
[03:49:53.980 --> 03:49:55.980]  Dx, вы бы это даже в явном виде увидели.
[03:49:55.980 --> 03:49:57.980]  Вот.
[03:49:57.980 --> 03:49:59.980]  Но вот.
[03:49:59.980 --> 03:50:01.980]  Мы это условие
[03:50:01.980 --> 03:50:03.980]  нам придется записать в следующем виде.
[03:50:03.980 --> 03:50:05.980]  То есть
[03:50:05.980 --> 03:50:07.980]  если у нас
[03:50:07.980 --> 03:50:09.980]  оказалось W
[03:50:09.980 --> 03:50:11.980]  допустим, у нас есть два пути
[03:50:11.980 --> 03:50:13.980]  вершины, там S, вершина В.
[03:50:13.980 --> 03:50:15.980]  Один называется Ро,
[03:50:15.980 --> 03:50:17.980]  а другой называется Ро штрих.
[03:50:19.980 --> 03:50:21.980]  Если оказывается, что
[03:50:21.980 --> 03:50:23.980]  и у нас должно быть верно, что если
[03:50:23.980 --> 03:50:25.980]  путь от Ро меньше либо равен,
[03:50:25.980 --> 03:50:27.980]  чем
[03:50:27.980 --> 03:50:29.980]  Ро штрих, то из этого
[03:50:29.980 --> 03:50:31.980]  следует, что если прицепить вот это ребро,
[03:50:35.980 --> 03:50:37.980]  то это соотношение
[03:50:37.980 --> 03:50:39.980]  должно сохраниться.
[03:50:41.980 --> 03:50:43.980]  Ну,
[03:50:43.980 --> 03:50:45.980]  если они равны,
[03:50:45.980 --> 03:50:47.980]  то как бы это будет верно в обе стороны.
[03:50:51.980 --> 03:50:53.980]  Ну скажи так, равенство нас устроит,
[03:50:53.980 --> 03:50:55.980]  в принципе.
[03:50:59.980 --> 03:51:01.980]  Ну да.
[03:51:03.980 --> 03:51:05.980]  Нет, ну на самом деле
[03:51:05.980 --> 03:51:07.980]  я утверждаю, скажем так, смотрите,
[03:51:07.980 --> 03:51:09.980]  проверить можно так, смотрите,
[03:51:09.980 --> 03:51:11.980]  можно просто сейчас попытаться
[03:51:11.980 --> 03:51:13.980]  проимулировать доказательства,
[03:51:13.980 --> 03:51:15.980]  рассмотрим вот этот путь.
[03:51:15.980 --> 03:51:17.980]  Теперь утверждение такое,
[03:51:17.980 --> 03:51:19.980]  что мы как-то
[03:51:19.980 --> 03:51:21.980]  непрерывно перебираем все
[03:51:21.980 --> 03:51:23.980]  эти слои.
[03:51:23.980 --> 03:51:25.980]  Правда, нам тут приходится интуитивно
[03:51:25.980 --> 03:51:27.980]  предполагать, что в этом линейном порядке
[03:51:27.980 --> 03:51:29.980]  множестве есть, то есть эти слои
[03:51:29.980 --> 03:51:31.980]  непрерывным образом можно проверять.
[03:51:31.980 --> 03:51:33.980]  Это не очень очевидно, потому что
[03:51:33.980 --> 03:51:35.980]  у нас не обязательно действительные числа.
[03:51:35.980 --> 03:51:37.980]  Ну я не знаю, может, конечно,
[03:51:37.980 --> 03:51:39.980]  там как бы любое линейное
[03:51:39.980 --> 03:51:41.980]  упорядоченное множество
[03:51:41.980 --> 03:51:43.980]  можно...
[03:51:45.980 --> 03:51:47.980]  Так, спасибо.
[03:51:49.980 --> 03:51:51.980]  Нет.
[03:51:53.980 --> 03:51:55.980]  Ага.
[03:51:59.980 --> 03:52:01.980]  О господи,
[03:52:01.980 --> 03:52:03.980]  так это что-то уже куда-то...
[03:52:03.980 --> 03:52:05.980]  Нет, ладно, нет,
[03:52:05.980 --> 03:52:07.980]  что-то надо аккуратно сказать.
[03:52:07.980 --> 03:52:09.980]  Нет, можно, конечно, заметить,
[03:52:09.980 --> 03:52:11.980]  что мы здесь рассматриваем...
[03:52:11.980 --> 03:52:13.980]  Можно, конечно, сказать, что мы здесь
[03:52:13.980 --> 03:52:15.980]  рассматриваем только не
[03:52:15.980 --> 03:52:17.980]  самозацикливающиеся пути.
[03:52:21.980 --> 03:52:23.980]  Мы здесь обычно, когда пишем алгоритм Dijkstra,
[03:52:23.980 --> 03:52:25.980]  мы неявно рассматриваем
[03:52:25.980 --> 03:52:27.980]  только не самозацикливающиеся пути
[03:52:27.980 --> 03:52:29.980]  или, в худшем случае, пути, которые
[03:52:29.980 --> 03:52:31.980]  зацикливаются только в конце.
[03:52:31.980 --> 03:52:33.980]  Но таких путей у нас
[03:52:33.980 --> 03:52:35.980]  это не конечное количество.
[03:52:35.980 --> 03:52:37.980]  Логично, да?
[03:52:37.980 --> 03:52:39.980]  Поэтому мысленно мы можем это конечное
[03:52:39.980 --> 03:52:41.980]  количество отсортировать и идти по ним.
[03:52:41.980 --> 03:52:43.980]  Поэтому, ладно, тут мы
[03:52:43.980 --> 03:52:45.980]  себя не сильно ограничили.
[03:52:47.980 --> 03:52:49.980]  Так вот, тогда получается, что когда мы идем
[03:52:49.980 --> 03:52:51.980]  по слоям и видим действительно
[03:52:51.980 --> 03:52:53.980]  все эти слои, то
[03:52:53.980 --> 03:52:55.980]  что нам требуется?
[03:52:55.980 --> 03:52:57.980]  То есть нам нужно гарантировать,
[03:52:59.980 --> 03:53:01.980]  что если тут кратчайший путь,
[03:53:01.980 --> 03:53:03.980]  допустим, 4,3, то он может быть
[03:53:03.980 --> 03:53:05.980]  достигнут как вот этот вот предыдущий
[03:53:05.980 --> 03:53:07.980]  кратчайший путь плюс это ребро.
[03:53:09.980 --> 03:53:11.980]  А это, по сути, вот это условие
[03:53:11.980 --> 03:53:13.980]  на самом деле и гарантирует,
[03:53:13.980 --> 03:53:15.980]  что оно нам
[03:53:15.980 --> 03:53:17.980]  и гарантирует, что на самом деле
[03:53:17.980 --> 03:53:19.980]  кратчайшие пути действительно можно
[03:53:19.980 --> 03:53:21.980]  так устроить.
[03:53:21.980 --> 03:53:23.980]  Существует кратчайший путь
[03:53:23.980 --> 03:53:25.980]  такой, что на каждом префексе
[03:53:25.980 --> 03:53:27.980]  этот путь кратчайший.
[03:53:27.980 --> 03:53:29.980]  Но там доказательство будет такое,
[03:53:29.980 --> 03:53:31.980]  рассмотрим конкретный кратчайший путь.
[03:53:31.980 --> 03:53:33.980]  Ну, во-первых, начнем с того,
[03:53:33.980 --> 03:53:35.980]  что зацикливаться невыгодно по первому
[03:53:35.980 --> 03:53:37.980]  условию.
[03:53:37.980 --> 03:53:39.980]  Понимаете, да?
[03:53:39.980 --> 03:53:41.980]  То есть зацикливаться нельзя.
[03:53:41.980 --> 03:53:43.980]  Ну вот, нет смысла. Но тогда, если у нас
[03:53:43.980 --> 03:53:45.980]  путь не зацикленный, то мы начинаем
[03:53:45.980 --> 03:53:47.980]  с того, что вот этот путь подменяем
[03:53:47.980 --> 03:53:49.980]  на, допустим, кратчайший путь
[03:53:49.980 --> 03:53:51.980]  до сюда.
[03:53:51.980 --> 03:53:53.980]  Вот, может быть даже убив зацикл.
[03:53:55.980 --> 03:53:57.980]  Но я не знаю там, я боюсь только...
[03:53:57.980 --> 03:53:59.980]  То есть подменяем на кратчайший.
[03:53:59.980 --> 03:54:01.980]  Ну, надеюсь, есть подозрение,
[03:54:01.980 --> 03:54:03.980]  что... То есть есть надежда, что
[03:54:03.980 --> 03:54:05.980]  не выяснится, что этот путь проходит через эту вершину.
[03:54:09.980 --> 03:54:11.980]  Почему?
[03:54:11.980 --> 03:54:13.980]  А вдруг, мало ли.
[03:54:15.980 --> 03:54:17.980]  Так.
[03:54:23.980 --> 03:54:25.980]  Нет, ну ладно, если мы в какой-то момент
[03:54:25.980 --> 03:54:27.980]  будем идти и натыкаться на вершину s,
[03:54:27.980 --> 03:54:29.980]  то мы просто этот префикс обрубим как-нибудь.
[03:54:29.980 --> 03:54:31.980]  Хотя, конечно, да, надо подумать,
[03:54:31.980 --> 03:54:33.980]  как кто-то зациклы избавится.
[03:54:33.980 --> 03:54:35.980]  Ну да, как бы там...
[03:54:35.980 --> 03:54:37.980]  Действительно проблема.
[03:54:37.980 --> 03:54:39.980]  Как бы у нас не обнаружился подлый цикл
[03:54:39.980 --> 03:54:41.980]  по условно нулевым ребрам.
[03:54:43.980 --> 03:54:45.980]  Какой-нибудь.
[03:54:45.980 --> 03:54:47.980]  Нет, ну можно, конечно, говорить, что давайте
[03:54:47.980 --> 03:54:49.980]  при кратчайших
[03:54:49.980 --> 03:54:51.980]  путях, там при равенстве
[03:54:51.980 --> 03:54:53.980]  минимум рассматривать путь с минимальным количеством
[03:54:53.980 --> 03:54:55.980]  промежуточных ребер.
[03:54:57.980 --> 03:54:59.980]  Можем такое сделать, да?
[03:54:59.980 --> 03:55:01.980]  Вот.
[03:55:01.980 --> 03:55:03.980]  То есть, допустим, рассмотрим
[03:55:03.980 --> 03:55:05.980]  вот такой кратчайший путь
[03:55:05.980 --> 03:55:07.980]  из них.
[03:55:07.980 --> 03:55:09.980]  Хотя нет, тут как бы проблема.
[03:55:09.980 --> 03:55:11.980]  Хотя нет, там вот подлянка.
[03:55:11.980 --> 03:55:13.980]  Теперь подменим.
[03:55:17.980 --> 03:55:19.980]  Ну да, то есть подменим
[03:55:19.980 --> 03:55:21.980]  это на кратчайшее, потом...
[03:55:23.980 --> 03:55:25.980]  Так, знаете, что?
[03:55:25.980 --> 03:55:27.980]  Легче, на самом деле, проверять
[03:55:27.980 --> 03:55:29.980]  по нормальному доказательству.
[03:55:29.980 --> 03:55:31.980]  Поэтому давайте лучше, действительно, вспомнить
[03:55:31.980 --> 03:55:33.980]  нормальное доказательство ДЕКСТР, тем более, что
[03:55:33.980 --> 03:55:35.980]  адекватно будет.
[03:55:35.980 --> 03:55:37.980]  Давайте вспомним, как у нас устроено нормальное
[03:55:37.980 --> 03:55:39.980]  доказательство ДЕКСТР.
[03:55:39.980 --> 03:55:41.980]  Устроено оно так.
[03:55:41.980 --> 03:55:43.980]  То есть, вот, допустим, у нас есть вершина С,
[03:55:43.980 --> 03:55:45.980]  вот у нас, допустим, зона,
[03:55:45.980 --> 03:55:47.980]  до которой мы расстояние
[03:55:47.980 --> 03:55:49.980]  типа насчитали, есть все остальные вершины,
[03:55:49.980 --> 03:55:51.980]  в которых есть какие-то Д.
[03:55:51.980 --> 03:55:53.980]  Мы утверждаем, что если
[03:55:53.980 --> 03:55:55.980]  вот мы найдем какую-нибудь вершину В,
[03:55:55.980 --> 03:55:57.980]  до которой как бы
[03:55:57.980 --> 03:55:59.980]  вот это вот расстояние
[03:55:59.980 --> 03:56:01.980]  плюс ребро, вот это минимальное, которое сейчас
[03:56:01.980 --> 03:56:03.980]  в Д от В, то как бы это расстояние,
[03:56:03.980 --> 03:56:05.980]  то это действительно расстояние.
[03:56:05.980 --> 03:56:07.980]  Так понятно, о чем я говорю?
[03:56:07.980 --> 03:56:09.980]  Так есть кто живой?
[03:56:11.980 --> 03:56:13.980]  А то что-то спят
[03:56:13.980 --> 03:56:15.980]  уже даже те, кто не спит вроде.
[03:56:15.980 --> 03:56:17.980]  Вот.
[03:56:17.980 --> 03:56:19.980]  Вот.
[03:56:19.980 --> 03:56:21.980]  Вот.
[03:56:21.980 --> 03:56:23.980]  Так вот.
[03:56:23.980 --> 03:56:25.980]  И так вот, действительно, допустим, у нас УВ.
[03:56:25.980 --> 03:56:27.980]  И так.
[03:56:27.980 --> 03:56:29.980]  Теперь, значит, пытаемся доказать, что
[03:56:29.980 --> 03:56:31.980]  у нас другого пути нет. Теперь говорят,
[03:56:31.980 --> 03:56:33.980]  допустим, у нас есть какой-то еще путь, который
[03:56:33.980 --> 03:56:35.980]  тут ходит вот так вот, вот так вот, вот так вот.
[03:56:35.980 --> 03:56:37.980]  Вот тогда мы говорим следующее,
[03:56:37.980 --> 03:56:39.980]  что жил-был у нас вот этот вот
[03:56:39.980 --> 03:56:41.980]  У'В'
[03:56:41.980 --> 03:56:43.980]  что это такое. То есть этот путь, первый раз
[03:56:43.980 --> 03:56:45.980]  эту границу должен был пересечь
[03:56:45.980 --> 03:56:47.980]  когда-то, да?
[03:56:47.980 --> 03:56:49.980]  Вот.
[03:56:49.980 --> 03:56:51.980]  Вот это мы назовем РО штрих,
[03:56:51.980 --> 03:56:53.980]  а вот этот путь у нас РО.
[03:56:55.980 --> 03:56:57.980]  Тогда смотрите.
[03:56:57.980 --> 03:56:59.980]  Тогда дальше у нас цепочка звучит так.
[03:56:59.980 --> 03:57:01.980]  W от РО штрих.
[03:57:03.980 --> 03:57:05.980]  Значит, начнем с того, что по первому
[03:57:05.980 --> 03:57:07.980]  вот этому свойству,
[03:57:07.980 --> 03:57:09.980]  тут мы им пользуемся,
[03:57:09.980 --> 03:57:11.980]  это больше либроном, чем W от
[03:57:11.980 --> 03:57:13.980]  вот, в общем, короче,
[03:57:13.980 --> 03:57:15.980]  У'В'
[03:57:15.980 --> 03:57:17.980]  видно, да?
[03:57:19.980 --> 03:57:21.980]  Это
[03:57:21.980 --> 03:57:23.980]  больше либроном,
[03:57:23.980 --> 03:57:25.980]  так, это что-то,
[03:57:25.980 --> 03:57:27.980]  вот.
[03:57:29.980 --> 03:57:31.980]  Это больше либроном, чем W
[03:57:35.980 --> 03:57:37.980]  Сейчас, сейчас, сейчас
[03:57:37.980 --> 03:57:39.980]  нет, погодите.
[03:57:39.980 --> 03:57:41.980]  Вот.
[03:57:41.980 --> 03:57:43.980]  Да, очень хочется это как-то связать с
[03:57:43.980 --> 03:57:45.980]  D от W'
[03:57:45.980 --> 03:57:47.980]  А как связать вот эту штуку с D от W'
[03:57:47.980 --> 03:57:49.980]  Ну, заметим, что
[03:57:49.980 --> 03:57:51.980]  вот.
[03:57:51.980 --> 03:57:53.980]  Так.
[03:57:55.980 --> 03:57:57.980]  Ну, вот.
[03:57:57.980 --> 03:57:59.980]  Сейчас, чего?
[03:57:59.980 --> 03:58:01.980]  Вот.
[03:58:01.980 --> 03:58:03.980]  Ну, заметим, что
[03:58:03.980 --> 03:58:05.980]  скажем так.
[03:58:05.980 --> 03:58:07.980]  То есть этот путь, это такой, что
[03:58:07.980 --> 03:58:09.980]  то есть это какой-то путь
[03:58:09.980 --> 03:58:11.980]  внутри отметки от У'
[03:58:11.980 --> 03:58:13.980]  и В'.
[03:58:13.980 --> 03:58:15.980]  То есть это, на самом деле,
[03:58:15.980 --> 03:58:17.980]  теперь мы, видимо, воспользуемся каким-то вторым
[03:58:17.980 --> 03:58:19.980]  свойством.
[03:58:21.980 --> 03:58:23.980]  И скажем, что вот этот вот штуку,
[03:58:23.980 --> 03:58:25.980]  то есть это тоже W от
[03:58:25.980 --> 03:58:27.980]  У'
[03:58:27.980 --> 03:58:29.980]  В',
[03:58:29.980 --> 03:58:31.980]  только единственное, что мы теперь скажем, это то, что
[03:58:31.980 --> 03:58:33.980]  вот это вот, это минимум.
[03:58:33.980 --> 03:58:35.980]  То есть это вот минимальный путь до У'.
[03:58:35.980 --> 03:58:37.980]  Да?
[03:58:37.980 --> 03:58:39.980]  Вот.
[03:58:39.980 --> 03:58:41.980]  Ну, теперь фишка.
[03:58:41.980 --> 03:58:43.980]  То есть вот теперь
[03:58:43.980 --> 03:58:45.980]  мы понимаем, что
[03:58:47.980 --> 03:58:49.980]  то есть
[03:58:49.980 --> 03:58:51.980]  так.
[03:59:01.980 --> 03:59:03.980]  А, ну да.
[03:59:03.980 --> 03:59:05.980]  То есть это означает, что вот этот вот путь
[03:59:05.980 --> 03:59:07.980]  рассматривался в оптимизацию
[03:59:07.980 --> 03:59:09.980]  В'. Да?
[03:59:09.980 --> 03:59:11.980]  То есть это означает,
[03:59:11.980 --> 03:59:13.980]  что это больше либо равно, чем
[03:59:13.980 --> 03:59:15.980]  то, что сейчас написано в
[03:59:15.980 --> 03:59:17.980]  Дист от В'.
[03:59:17.980 --> 03:59:19.980]  Вот.
[03:59:21.980 --> 03:59:23.980]  Ну, потому что вот конкретно
[03:59:23.980 --> 03:59:25.980]  такой путь там рассматривался.
[03:59:27.980 --> 03:59:29.980]  Ну, мы предполагаем, что мы
[03:59:29.980 --> 03:59:31.980]  как бы до У' нашли реально кратчайший путь.
[03:59:31.980 --> 03:59:33.980]  Да?
[03:59:35.980 --> 03:59:37.980]  Так, где шаманство?
[03:59:37.980 --> 03:59:39.980]  Где шаманство пошло?
[03:59:39.980 --> 03:59:41.980]  Где, непонятно?
[03:59:41.980 --> 03:59:43.980]  Ну, значит, еще раз.
[03:59:43.980 --> 03:59:45.980]  Так, вот это понятно, да?
[03:59:45.980 --> 03:59:47.980]  Но теперь, смотрите, дело в том, что вот это, это какой-то путь до У'.
[03:59:47.980 --> 03:59:49.980]  Да?
[03:59:49.980 --> 03:59:51.980]  Теперь мы вынуждены воспользоваться вторым свойством,
[03:59:51.980 --> 03:59:53.980]  что оказывается, это больше либо равно, чем
[03:59:53.980 --> 03:59:55.980]  то же путь У' В',
[03:59:55.980 --> 03:59:57.980]  только мы до У' дошли кратчайшим путем.
[03:59:57.980 --> 03:59:59.980]  Реально кратчайшим.
[03:59:59.980 --> 04:00:01.980]  Вот.
[04:00:01.980 --> 04:00:03.980]  Но теперь заметим, что кратчайший путь до У'
[04:00:03.980 --> 04:00:05.980]  какой-то мы уже нашли.
[04:00:05.980 --> 04:00:07.980]  И это означает,
[04:00:07.980 --> 04:00:09.980]  что мы
[04:00:09.980 --> 04:00:11.980]  им уже релаксировали В'.
[04:00:13.980 --> 04:00:15.980]  Да, то есть я здесь вот
[04:00:15.980 --> 04:00:17.980]  из кратчайших путей выбираю именно тот, который
[04:00:17.980 --> 04:00:19.980]  вот, который вот
[04:00:19.980 --> 04:00:21.980]  в Дист от У'.
[04:00:21.980 --> 04:00:23.980]  Вот.
[04:00:23.980 --> 04:00:25.980]  Поэтому я здесь могу написать, что это
[04:00:25.980 --> 04:00:27.980]  больше либо равно, чем то, что там
[04:00:27.980 --> 04:00:29.980]  Дист от В' написано сейчас.
[04:00:29.980 --> 04:00:31.980]  Там написано как минимум это,
[04:00:31.980 --> 04:00:33.980]  а может еще что-то меньше.
[04:00:33.980 --> 04:00:35.980]  Далее.
[04:00:35.980 --> 04:00:37.980]  Так, теперь по построению алгоритма
[04:00:37.980 --> 04:00:39.980]  это больше
[04:00:39.980 --> 04:00:41.980]  либо равно,
[04:00:41.980 --> 04:00:43.980]  чем Дист от В'.
[04:00:45.980 --> 04:00:47.980]  Вот.
[04:00:47.980 --> 04:00:49.980]  Это
[04:00:49.980 --> 04:00:51.980]  что такое?
[04:00:51.980 --> 04:00:53.980]  Но Дист от В',
[04:00:53.980 --> 04:00:55.980]  так, это
[04:00:55.980 --> 04:00:57.980]  равно.
[04:00:57.980 --> 04:00:59.980]  Это буквально равно
[04:00:59.980 --> 04:01:01.980]  нашему вот этому пути.
[04:01:01.980 --> 04:01:03.980]  То есть это функционал
[04:01:03.980 --> 04:01:05.980]  вот этого пути
[04:01:05.980 --> 04:01:07.980]  и ребро У'
[04:01:07.980 --> 04:01:09.980]  причем вот это вот
[04:01:09.980 --> 04:01:11.980]  это именно Дист от У'.
[04:01:11.980 --> 04:01:13.980]  Я здесь по Дист от У'
[04:01:13.980 --> 04:01:15.980]  даже сам кратчайший путь подразумеваю.
[04:01:17.980 --> 04:01:19.980]  Точечка.
[04:01:25.980 --> 04:01:27.980]  Ну вот. То есть по идее вот доказательство
[04:01:27.980 --> 04:01:29.980]  окончено. То есть я нашел
[04:01:29.980 --> 04:01:31.980]  произвольный путь до вершины В', доказал,
[04:01:31.980 --> 04:01:33.980]  что он не больше, чем Ваш.
[04:01:33.980 --> 04:01:35.980]  Но обратите внимание,
[04:01:35.980 --> 04:01:37.980]  я здесь воспользовался и первым свойством,
[04:01:37.980 --> 04:01:39.980]  и вторым свойством.
[04:01:39.980 --> 04:01:41.980]  Но при этом,
[04:01:41.980 --> 04:01:43.980]  но что приятно, больше я не воспользовался ничем.
[04:01:55.980 --> 04:01:57.980]  Так.
[04:01:59.980 --> 04:02:01.980]  Ну, вторым
[04:02:01.980 --> 04:02:03.980]  пользом мы воспользовались вот
[04:02:03.980 --> 04:02:05.980]  то есть смотрите, мы
[04:02:05.980 --> 04:02:07.980]  то есть первым
[04:02:07.980 --> 04:02:09.980]  способом воспользовались, чтобы от этого
[04:02:09.980 --> 04:02:11.980]  пути оставить только этот преферс.
[04:02:11.980 --> 04:02:13.980]  Но дело в том,
[04:02:13.980 --> 04:02:15.980]  что мы как бы, да, мы знаем,
[04:02:15.980 --> 04:02:17.980]  что по У'-3,
[04:02:17.980 --> 04:02:19.980]  по У'-4,
[04:02:19.980 --> 04:02:21.980]  по У'-5,
[04:02:21.980 --> 04:02:23.980]  по У'-6,
[04:02:23.980 --> 04:02:25.980]  да, мы знаем, что по У'-3
[04:02:25.980 --> 04:02:27.980]  мы шли как-то внутри, но это не значит,
[04:02:27.980 --> 04:02:29.980]  что мы шли именно по кратчайшему пути.
[04:02:29.980 --> 04:02:31.980]  Ну, до самого У'-3.
[04:02:31.980 --> 04:02:33.980]  То есть может как-то в обход шли.
[04:02:33.980 --> 04:02:35.980]  Поэтому как бы у нас цель подменить теперь
[04:02:35.980 --> 04:02:37.980]  вот этот путь на кратчайший.
[04:02:37.980 --> 04:02:39.980]  И мы воспользуемся вторым свойством, чтобы это сделать.
[04:02:41.980 --> 04:02:43.980]  Дист не совсем нет.
[04:02:43.980 --> 04:02:45.980]  Дист это
[04:02:45.980 --> 04:02:47.980]  тот путь, который
[04:02:47.980 --> 04:02:49.980]  имеется в виду прямо сейчас.
[04:02:49.980 --> 04:02:51.980]  Но и мы по индукции считаем,
[04:02:51.980 --> 04:02:53.980]  что для всех вот этих вершин
[04:02:53.980 --> 04:02:55.980]  это реально кратчайший путь.
[04:02:55.980 --> 04:02:57.980]  Понимаете, да?
[04:02:57.980 --> 04:02:59.980]  Вот.
[04:02:59.980 --> 04:03:01.980]  Ну, в прочем,
[04:03:01.980 --> 04:03:03.980]  ну, вот.
[04:03:03.980 --> 04:03:05.980]  Почему мы эти, ну, вот.
[04:03:05.980 --> 04:03:07.980]  Ну, в прочем, ну, да.
[04:03:07.980 --> 04:03:09.980]  Ну, в прочем, это сейчас
[04:03:09.980 --> 04:03:11.980]  даже и не важно на самом деле.
[04:03:11.980 --> 04:03:13.980]  Потому что
[04:03:13.980 --> 04:03:15.980]  важность здесь не то,
[04:03:15.980 --> 04:03:17.980]  а хотя, да.
[04:03:17.980 --> 04:03:19.980]  Да, мы здесь пользуемся всем, что дист ату кратчайший,
[04:03:19.980 --> 04:03:21.980]  потому что как бы мы этим пользуемся,
[04:03:21.980 --> 04:03:23.980]  чтобы сказать, что вот этот путь больше либо равен,
[04:03:23.980 --> 04:03:25.980]  чем то, что написано в дист ату реально.
[04:03:25.980 --> 04:03:27.980]  Ну, а то штрих в смысле.
[04:03:29.980 --> 04:03:31.980]  Вот, да, поэтому мы здесь все,
[04:03:31.980 --> 04:03:33.980]  мы здесь всем тонко
[04:03:33.980 --> 04:03:35.980]  воспользовались.
[04:03:37.980 --> 04:03:39.980]  Вот, понятно, да?
[04:03:39.980 --> 04:03:41.980]  Вот.
[04:03:43.980 --> 04:03:45.980]  И тогда, то есть, видим, что получается,
[04:03:45.980 --> 04:03:47.980]  то есть, получается действительно
[04:03:47.980 --> 04:03:49.980]  что, получается, вот эти
[04:03:49.980 --> 04:03:51.980]  условия, без этих условий,
[04:03:51.980 --> 04:03:53.980]  scripture, можно доказать, и можно, конечно,
[04:03:53.980 --> 04:03:55.980]  сложно доказать, что если этих условий
[04:03:55.980 --> 04:03:57.980]  за выполненно, то да и экстра, видимо, обвалятся,
[04:03:57.980 --> 04:03:59.980]  то есть, так в общем случае,
[04:03:59.980 --> 04:04:01.980]  сложно доказать, то есть там Rich,...
[04:04:01.980 --> 04:04:03.980]  но в принципе эти условия выглядят
[04:04:03.980 --> 04:04:05.980]  достаточно сильно,
[04:04:05.980 --> 04:04:07.980]  то есть, можно вот тестировать, например,
[04:04:07.980 --> 04:04:09.980]  что, там, скажем, два максимума,
[04:04:09.980 --> 04:04:11.980]  например...
[04:04:11.980 --> 04:04:13.980]  Не работают, почему?
[04:04:13.980 --> 04:04:20.980]  Но они не работают скорее по первому свойству, потому что сумма двух максимумов при добавлении ребра может уменьшиться.
[04:04:20.980 --> 04:04:23.980]  Сумма двух максимумов не валится.
[04:04:23.980 --> 04:04:35.980]  Хорошо. Сумма двух минимумов валится здесь. Сумма двух максимумов здесь не валится, а вот здесь, как выясняется, вполне валится.
[04:04:36.980 --> 04:04:41.980]  Это действительно вполне валится. Какие еще примеры?
[04:04:41.980 --> 04:04:52.980]  Ну, функционал с автобусами, когда у нас функционал пути равен бесконечности, если последователь автобусов некорректно, и весу последнего ребра, если корректно.
[04:04:53.980 --> 04:04:55.980]  Что?
[04:04:55.980 --> 04:05:01.980]  Ну, потому что вас интересует в этой задаче время, когда вы приедете, собственно, на финиш.
[04:05:01.980 --> 04:05:06.980]  И поэтому вес пути – это, собственно, время финиша.
[04:05:06.980 --> 04:05:11.980]  То есть это вас вроде как устраивает.
[04:05:11.980 --> 04:05:21.980]  То есть если вы в город по этому пути приедете раньше, чем по этому пути, то воспользоваться тем же самым автобусом вам это не помешает.
[04:05:21.980 --> 04:05:26.980]  Ну, по крайней мере, если вы при этом пути можете воспользоваться этим автобусом, значит при этом тем более.
[04:05:28.980 --> 04:05:31.980]  Что у нас еще бывает? Бывает одно максимальное ребро?
[04:05:41.980 --> 04:05:45.980]  Давайте проверим. Если у нас максимум на пути.
[04:05:45.980 --> 04:05:50.980]  Ну да, максимум на пути из всех чисел. Что получится?
[04:05:50.980 --> 04:05:55.980]  Первый очевидно кайфец, но второй тоже очевидно кайфец.
[04:05:55.980 --> 04:06:00.980]  Какие еще примеры бывают?
[04:06:00.980 --> 04:06:03.980]  А, ну так.
[04:06:06.980 --> 04:06:10.980]  Нет, ну XOR как бы здесь пофейдится, очевидно.
[04:06:10.980 --> 04:06:13.980]  И первое, в общем-то, XOR не надо.
[04:06:13.980 --> 04:06:22.980]  Но это вот да. Ну тут разные варианты есть, то как бы вот полезно помнить, что Dextra тут, ну Dextra на самом деле тут по-разному может конечно и работать.
[04:06:24.980 --> 04:06:25.980]  Что-что?
[04:06:29.980 --> 04:06:31.980]  Битвы или?
[04:06:38.980 --> 04:06:39.980]  Валится, валится.
[04:06:39.980 --> 04:06:46.980]  Валится. Там как бы да. То есть может тут старший бит меньше, а потом старший бит меньше, а младший бит больше.
[04:06:46.980 --> 04:06:50.980]  Тогда мы тут поорили и там да.
[04:06:50.980 --> 04:06:57.980]  Так что да. Так что вот в принципе глядя на эти условия, можно неожиданно думать какую забодробительную Dextra забабахать.
[04:06:57.980 --> 04:06:58.980]  Что?
[04:06:58.980 --> 04:07:09.980]  Нет, не всегда тебе нужно пустить DFS, чтобы выяснить, что путь есть.
[04:07:09.980 --> 04:07:13.980]  Да, это уже как это говорят, да.
[04:07:13.980 --> 04:07:16.980]  Но это немножко другое.
[04:07:16.980 --> 04:07:19.980]  Так что вот такую вот штуку. Ну то есть по-разному можно делать.
[04:07:19.980 --> 04:07:28.980]  А самое главное для нас, что сейчас заметим, если функционал стандартный, но ребра бывают отрицательные, то это тоже автоматический фейл.
[04:07:28.980 --> 04:07:31.980]  Ну просто по первому условию.
[04:07:31.980 --> 04:07:38.980]  В чем более того, ну там в общем-то достаточно, то есть в общем-то аналогичным вот тому способу на самом деле легко привести контрпример.
[04:07:38.980 --> 04:07:48.980]  Но правда мы заметим, что с отрицательными ребрами, если уж так переходить к отрицательным ребрам, то вообще начинается маленькая подляночка.
[04:07:48.980 --> 04:07:54.980]  Да, подляночка заключается может в том, что кратчайшего пути может тупо не существовать.
[04:07:54.980 --> 04:08:03.980]  Потому что есть такая замечательная объекта, как цикла отрицательного веса.
[04:08:03.980 --> 04:08:11.980]  Да, не обязательно там все ребра отрицательные, главное, чтобы сумма была.
[04:08:11.980 --> 04:08:20.980]  Тогда подляночка такая, до любой из этих вершин пути минимальной стоимости не существует.
[04:08:20.980 --> 04:08:25.980]  Ну тут конечно может так случиться, что вообще пути не существует, тогда для них ответ плюс бесконечность.
[04:08:25.980 --> 04:08:30.980]  Но если из вершины С до этого цикла дойти можно, то тогда кратчайшего пути не существует.
[04:08:30.980 --> 04:08:37.980]  Потому что какой бы вы путь не взяли до, скажем, вот этой вершины, вы можете тут пробежаться по циклу и получить путь еще меньше.
[04:08:37.980 --> 04:08:42.980]  То есть это называется так, существует путь сколь угодно малый.
[04:08:42.980 --> 04:08:45.980]  То есть у вас не существует пути, который равен минус бесконечность.
[04:08:45.980 --> 04:08:54.980]  То есть он существует путь, для любого С меньше нуля, существует путь, у которого вес не больше, чем С.
[04:08:54.980 --> 04:08:56.980]  Чего?
[04:08:56.980 --> 04:08:58.980]  Ну да.
[04:08:58.980 --> 04:09:03.980]  Ну тут я просто меньше нуля, чтобы на автомате не начали говорить, для любого С больше нуля найдется.
[04:09:03.980 --> 04:09:05.980]  Это не интересно.
[04:09:05.980 --> 04:09:08.980]  Интересно, что любого С меньше нуля найдется.
[04:09:08.980 --> 04:09:10.980]  Вот это неожиданная мощь.
[04:09:10.980 --> 04:09:11.980]  Вот.
[04:09:11.980 --> 04:09:18.980]  Поэтому здесь конечно приходится с этим справляться какими-то, то есть как бы эти ситуации приходится обрабатывать.
[04:09:18.980 --> 04:09:26.980]  Да в общем-то, хотя даже если нам гарантирует, что таких ситуаций нету, то все равно приходится думать.
[04:09:26.980 --> 04:09:28.980]  Вот.
[04:09:28.980 --> 04:09:30.980]  Ну, пожалуй, наверное, как бы да.
[04:09:30.980 --> 04:09:37.980]  То есть это разговор не сильно длинный, но все-таки, наверное, не 10-минутный.
[04:09:37.980 --> 04:09:38.980]  Вот.
[04:09:38.980 --> 04:09:40.980]  Поэтому я думаю, мы на этом остановимся.
[04:09:40.980 --> 04:09:41.980]  Вот на этом остановимся.
[04:09:41.980 --> 04:09:43.980]  А в следующий раз тогда будем обсуждать.
[04:09:43.980 --> 04:09:45.980]  То есть обсудим и этот случай.
[04:09:45.980 --> 04:09:51.980]  Там еще кое-что, правда, экстро обсудим.
[04:09:51.980 --> 04:09:52.980]  Ну, посмотрим.
[04:09:52.980 --> 04:09:56.980]  То есть кое-что я в Т хотел бы вам рассказать, я надеюсь.
[04:09:56.980 --> 04:09:57.980]  Не, ну правильно.
[04:09:57.980 --> 04:09:59.980]  Тут как минимум уже прозвучало про Берликампа Мессия.
[04:09:59.980 --> 04:10:01.980]  Надо его обсудить, конечно.
[04:10:01.980 --> 04:10:02.980]  Вот.
[04:10:02.980 --> 04:10:03.980]  Значит, Берликамп Мессия.
[04:10:03.980 --> 04:10:06.980]  А так еще там есть еще там всякие задачи там веселые типа там.
[04:10:06.980 --> 04:10:11.980]  Ну, там логарифмирование, там ряд экспоненцирования, вот это вообще.
[04:10:11.980 --> 04:10:12.980]  Чего?
[04:10:12.980 --> 04:10:14.980]  Ну, тоже верно.
[04:10:14.980 --> 04:10:16.980]  Спасибо, спасибо, спасибо.
