[00:00.000 --> 00:08.760]  У нас все равны. Соответственно, всем плохо. А мы поехали к лекции 14.
[00:08.760 --> 00:14.000]  Собственно, у нас лекция сегодня посвящена одному из приложений Фурье.
[00:14.000 --> 00:18.600]  Ну, преобразование Фурье – это свертки. Мы поговорим какое-то время о свертках,
[00:18.600 --> 00:25.720]  потом придем к одному классному применению, и в конце нас ждет небольшое путешествие в прошлое.
[00:25.720 --> 00:41.080]  Свертки, которые по-английски называются Convolutions, потому что еще есть свертка,
[00:41.080 --> 00:45.240]  которая называется Fold. Вот Fold – это не про это. У нас все-таки Convolution.
[00:45.240 --> 00:52.640]  Для одномерного случая мы с вами предъявили на какой-то лекции, но там было очень размазано,
[00:52.640 --> 01:03.280]  поэтому давайте четко проговорим. Определение. Пусть у нас есть две последовательности, два вектора.
[01:03.280 --> 01:28.200]  Вот тогда мы определим свертку от C и T. Это будет тоже вектор,
[01:28.200 --> 01:37.800]  который будет… Далее мы свертку обозначаем звездочкой, и компонент этой свертки определяется так.
[01:37.800 --> 01:52.720]  A и J, B и J. У вас это и на семинаре было, и все такое. Однако это есть в экзаменационной программе,
[01:52.720 --> 02:02.480]  поэтому я, опять же, лучше расскажу подробнее. Тут вроде все фиксировано, все окей должно быть.
[02:02.480 --> 02:08.800]  Отклинивание очень простое. Давайте научимся считать. А именно что мы будем делать?
[02:08.800 --> 02:15.880]  Понятное дело, что можно наивно за OOTM посчитать, но это как-то глупо. Потом,
[02:15.880 --> 02:18.920]  когда мы перейдем к многомерным сверткам, будет понятно, почему это очень глупо.
[02:18.920 --> 02:43.240]  А рассмотрим многочлен A от X и B от X. Ну что мы умеем делать с многочленами?
[02:43.240 --> 02:47.440]  Мы уже научились их делить. Складывать вы читаете так умели. Давайте перемножим.
[02:47.440 --> 02:53.280]  При перемножении может что-то интересное получится. Так обозначим C от X.
[02:53.280 --> 03:02.320]  А от X на B от X. И теперь нужно всего лишь раскрыть скобочки. Их немного, всего лишь mn-штук.
[03:02.320 --> 03:31.200]  Поехали. Я думаю, паттерн понятен. То, что у вас при X в катой степени берутся все попарные
[03:31.200 --> 03:41.680]  произведения, у которых сумма индекса дает k. Вот здесь вот 0.2, 1.1, 2.0. Все дает в сумме 2.
[03:41.680 --> 03:52.720]  Так, теперь что мы с вами сделаем? Рассмотрим с вами вот такую интересную операцию, как взятие
[03:52.720 --> 04:17.320]  хв-1, коэффициент АС. Что это такое? Ну это а0 bm-1. Так, плюс останется здесь b1 a m-2 b1,
[04:17.320 --> 04:29.080]  плюс a-1 b0. Вроде нигде не напутал. Что это такое? Давайте поймем, что это на самом деле
[04:29.080 --> 04:44.480]  скалярное произведение таких вот векторов. B-reversing. Скалярное произведение этих двух векторов.
[04:44.600 --> 04:53.120]  B-reversing имеется в виду просто разворачивать этот вектор задом наперед и уберете а0 bm-1,
[04:53.120 --> 05:01.320]  а1 bm-2 и так далее. Можно выписать при следующей степени коэффициент. Почему нет? Доска большая,
[05:01.320 --> 05:30.320]  времени много. Ну или же скалярное произведение. Ну и так далее. Можно продолжать и выписать их
[05:30.320 --> 05:41.000]  все коэффициенты вплоть до при n-1. По сути дела, мы нашли все, что нам нужно с точностью того,
[05:41.000 --> 05:47.240]  что b надо развернуть. То есть, если бы b у нас изначально был бы развернутый, то мы бы нашли
[05:47.240 --> 05:53.840]  бы все вот эти вот значения явно, и все было бы прекрасно. Поэтому, чтобы найти свертку, вам
[05:53.840 --> 06:02.720]  нужно b развернуть, дальше перемножить и взять коэффициент от n-1 до n-1 степени, соответственно.
[06:02.720 --> 06:17.200]  Нет, почему? У вас всего лишь m компонент может быть. У вас длина вектора b, b0, b1, bm-1,
[06:17.200 --> 06:24.880]  и в сумме у вас должно m давать. У вас не существует bm. Поэтому у вас не получится ничего сделать здесь.
[06:24.880 --> 06:32.800]  Вот. Собственно, это то, как свертки считать в одномерном случае. То есть, первый шаг – разворачивайте
[06:32.800 --> 06:38.640]  екту, второй – перемножайте многочисленно, третий – берете нужный коэффициент. А зачем это нужно?
[06:38.640 --> 06:43.920]  Вот. Я, в общем-то, давным-давно еще, когда у нас потоки заканчивались, на последней
[06:43.920 --> 06:51.440]  лекции про потоки, анонсировал программу по строкам. И я говорю с вами о том, что мы будем с вами искать
[06:51.440 --> 06:56.640]  вхождение с опечатками. И давайте введем такую метрику.
[06:56.640 --> 07:16.400]  С и Т – это строки. В модуле – равно модуль Т. Возьмем две строки равной длины. Тогда расстояние
[07:16.400 --> 07:32.720]  хемминга между С и Т определяется как вот такая вот штука. То есть, это число позиций, где символы не совпали.
[07:32.720 --> 07:42.320]  Ну, не знаю, вместо abobe написали abibo. Один символ различается, поэтому расстояние хемминга – один.
[07:42.320 --> 07:50.080]  Вот. С существенным ограничением здесь является то, что у нас длины строк равны. Это, конечно, унылая вещь.
[07:50.080 --> 08:00.800]  Вот. Есть более обобщенная метрика. Давай здесь напишем, что это расстояние хемминга. Вот.
[08:00.800 --> 08:07.360]  Есть расстояние левинштейна. Вы, скорее всего, с ним сталкивались, когда вы проходили динамическое
[08:07.360 --> 08:13.440]  программирование. В семинарии была задача на него. Я напомню, что расстояние левинштейна между двумя строками
[08:13.440 --> 08:20.960]  уже произвольных длин. Это то, сколько можно сделать модификаций одной строки, чтобы перевести ее в другую.
[08:20.960 --> 08:26.960]  Где модификация – это замена символа, вставка в произвольное место, удаление из произвольного места.
[08:26.960 --> 08:32.480]  Вот. Здесь же мы таким не оперируем. Мы только считаем число несовпадений. То есть, в некотором плане это число замен букв,
[08:32.560 --> 08:42.560]  можно сказать. Такое очень-очень суженное расстояние левинштейна. Вот. В жизни мы живем, где у нас строки не равны по длине,
[08:42.560 --> 08:49.440]  вообще-то. И в целом как-то хочется оценивать похожесть одного вектора на другой вектор. Зачем-то нужно.
[08:49.440 --> 08:58.720]  Вот. Чуть позже будет пример. Вот. А пока что давайте определим вот что. Обобщенное.
[08:58.720 --> 09:12.720]  Хотя нет, давайте не будем его выводить, в принципе, нам не понадобится. Так. Какую задачу будем решать с вами?
[09:12.720 --> 09:18.000]  Внезапно найти все вхождения паттернов текст с точностью до к ошибок. Вау.
[09:26.000 --> 09:40.000]  Найти все вхождения п в т с точностью до к расхождения.
[09:42.720 --> 09:50.000]  Решение, в общем-то, будет максимально незамысловатым и немножко использовать свертки.
[09:50.000 --> 09:54.000]  Чем свертки хороши? Ну, тем, что они дают нам скалярные произведения.
[09:54.000 --> 10:02.000]  А вот если у нас два бинарных вектора одинаково длинным, возьмем скалярное произведение, то что будет означать его значение?
[10:02.000 --> 10:13.280]  Ну да, то есть то, насколько они похожи на самом деле. В некотором плане мы можем так измерить похожесть.
[10:13.280 --> 10:19.280]  Давайте воспользуемся этим свойством. Таким наивным свойством мы решим эту задачу.
[10:19.280 --> 10:22.560]  Наверное, сразу примерно понадобится.
[10:26.560 --> 10:28.560]  И текст.
[10:32.560 --> 10:34.560]  Вот.
[10:34.560 --> 10:36.560]  И что мы будем делать?
[10:38.560 --> 10:40.560]  Ну, давайте к зафиксируем.
[10:41.040 --> 10:43.040]  Давайте так, как а.
[10:47.040 --> 10:51.040]  Ну, думать зафиксируем. То есть мы будем все две ошибки допустить.
[10:51.040 --> 10:53.040]  Окей.
[10:53.040 --> 10:57.040]  Какой у нас план? Построим вот такой вот интересный вектор.
[10:57.040 --> 10:59.040]  Так, давайте покрупнее.
[11:03.040 --> 11:05.040]  Так, vs sigma.
[11:05.520 --> 11:07.520]  Вот еще it.
[11:07.520 --> 11:11.520]  Это индикатор того, что s it равен sigma.
[11:11.520 --> 11:13.520]  Sigma это букву алфавита.
[11:15.520 --> 11:21.520]  Давайте sigma zh sigma алфавит.
[11:21.520 --> 11:25.520]  Ну да, здесь у нас алфавит из двух букв, а b.
[11:25.520 --> 11:29.520]  Все очень приятно, потому что мне лень выписывать кучу векторов.
[11:29.520 --> 11:31.520]  Поэтому пример такой.
[11:32.000 --> 11:34.000]  Ну, давайте просто напишем эти вектора.
[11:34.000 --> 11:36.000]  И все.
[11:36.000 --> 11:40.000]  Так, v текст по букве a.
[11:42.000 --> 11:46.000]  0, 1, 0, 0, 0, 1.
[11:46.000 --> 11:48.000]  Соответственно, v текст.
[11:50.000 --> 11:52.000]  Так, а по букве b буду писать правее.
[11:56.000 --> 11:58.000]  Букве b выписываем 1, 0.
[11:58.480 --> 12:00.480]  Букве b выписываем 1, 0.
[12:04.480 --> 12:06.480]  И аналогично поступим с паттерном.
[12:22.480 --> 12:24.480]  Окей.
[12:24.480 --> 12:26.480]  Свернем.
[12:28.480 --> 12:30.480]  Давайте сворачивать.
[12:38.480 --> 12:40.480]  Так, ну этот накладываем сюда, получаем 0.
[12:40.480 --> 12:44.480]  Этот накладываем сюда, получаем 1.
[12:44.480 --> 12:46.480]  Этот накладываем сюда, получаем 0.
[12:50.480 --> 12:52.480]  Да, 6-4+, получили нужный нам вектор.
[12:52.480 --> 12:54.480]  Теперь здесь.
[12:58.480 --> 13:02.480]  Текст по букве b.
[13:02.480 --> 13:04.480]  Так.
[13:04.480 --> 13:08.480]  Этот накладываем сюда, получаем 1.
[13:08.480 --> 13:12.480]  Дальше накладываем сюда 2.
[13:12.480 --> 13:14.480]  Сюда 1.
[13:14.480 --> 13:16.480]  Окей.
[13:16.480 --> 13:18.480]  Что это значит?
[13:18.480 --> 13:20.480]  Что эти векторы свертки нам дают?
[13:20.480 --> 13:24.480]  Это значит, что если мы приложим наш паттерн,
[13:24.480 --> 13:26.480]  начиная с первой позиции, ну с нулевой,
[13:26.960 --> 13:28.960]  то есть вот сюда вот.
[13:28.960 --> 13:32.960]  Это значит, что по букве a у нас ноль совпадений.
[13:32.960 --> 13:36.960]  Ну, действительно, у нас здесь все буквы a, тут совпадений нет.
[13:36.960 --> 13:38.960]  А по букве v ровно 1.
[13:38.960 --> 13:40.960]  А, вот оно.
[13:42.960 --> 13:44.960]  Ну и так мы можем просуммировать по всем буквам.
[13:46.960 --> 13:48.960]  Так, наверное, здесь еще будет видно.
[13:48.960 --> 13:50.960]  Поэтому я построю вектор u,
[13:51.440 --> 13:53.440]  который будет просто сумма
[13:53.440 --> 13:55.440]  по всем сигмам.
[13:55.440 --> 13:57.440]  Vp sigma.
[13:57.440 --> 13:59.440]  Vt sigma.
[13:59.440 --> 14:03.440]  В нашем случае u равен 1, 3, 1.
[14:03.440 --> 14:07.440]  И он обозначает суммарное число совпадений.
[14:07.440 --> 14:09.440]  Как раз таки с этой позиции.
[14:09.440 --> 14:13.440]  То есть вот с первой позиции у меня совпадений лишь одно.
[14:13.440 --> 14:17.440]  Тогда как со следующей позиции.
[14:17.920 --> 14:19.920]  Тогда как со следующей позиции.
[14:19.920 --> 14:23.920]  У меня совпадений внезапно 3.
[14:23.920 --> 14:25.920]  Раз, два, три.
[14:27.920 --> 14:29.920]  Ну понятно, как извлечь число расхождения.
[14:29.920 --> 14:33.920]  Это нужно отнятие длины паттерна, значение этого вектора.
[14:33.920 --> 14:37.920]  Ну и в итоге вот ваша позиция, которая вам дает ответ.
[14:37.920 --> 14:39.920]  Надо оценить время работы этой штуки.
[14:39.920 --> 14:45.920]  Ну и давайте мы скажем, что мы уверены, что длина паттерна меньше, чем длина текста.
[14:46.400 --> 14:50.400]  Для сокращения вычислений.
[14:50.400 --> 14:52.400]  Ну выражений точнее.
[14:52.400 --> 14:54.400]  Так, окей.
[14:58.400 --> 15:02.400]  Так, это на вычислении одной вот этой сверточки.
[15:02.400 --> 15:04.400]  T log t будет.
[15:04.400 --> 15:06.400]  Ну пройдем в том, что у нас сверточек sigma.
[15:06.880 --> 15:12.880]  И здесь можно сказать, что можно применить хитрую технику под названием бинаризация алфавита.
[15:12.880 --> 15:14.880]  А именно, что мы можем сделать?
[15:14.880 --> 15:16.880]  Можем каждую букву закодировать двоичными символами.
[15:16.880 --> 15:18.880]  0, 1.
[15:18.880 --> 15:20.880]  А, это нулевая буква, у меня все 0.
[15:20.880 --> 15:22.880]  Б, это первая буква, у меня там 0, 0, 0, 0, 1.
[15:22.880 --> 15:24.880]  Вот.
[15:24.880 --> 15:26.880]  Тогда что произойдет?
[15:26.880 --> 15:28.880]  У нас алфавит станет бинарным 0, 1.
[15:28.880 --> 15:30.880]  То есть здесь будет 0, 0, 0, 0, 0, 1.
[15:30.880 --> 15:32.880]  Вот.
[15:32.880 --> 15:34.880]  Тогда что произойдет?
[15:34.880 --> 15:36.880]  Бинарным 0, 1.
[15:36.880 --> 15:38.880]  То есть здесь будет log sigma.
[15:38.880 --> 15:42.880]  Но еще у нас тогда все длинные строки увеличатся в log sigma раз.
[15:42.880 --> 15:46.880]  То есть здесь будет t log sigma log t log sigma на log sigma.
[15:46.880 --> 15:48.880]  То есть в некотором плане...
[15:48.880 --> 15:50.880]  Ой, фу ты, здесь не будет log sigma, у нас будет вообще бинарный.
[15:50.880 --> 15:52.880]  0, 1.
[15:52.880 --> 15:54.880]  Здесь будет.
[15:54.880 --> 15:56.880]  То есть после бинаризации вот этого штука константа,
[15:56.880 --> 16:00.880]  а вот module t превратится в module t log module sigma.
[16:00.880 --> 16:02.880]  То есть мы просто sigma превратили в ее логарифм.
[16:02.880 --> 16:06.880]  И это уже круто, потому что не классно зависеть линейно от размера алфавита.
[16:06.880 --> 16:10.880]  Все-таки некоторые люди обожают писать с майликами в чате,
[16:10.880 --> 16:12.880]  а с майлики это далеко не буквы.
[16:12.880 --> 16:14.880]  Вот.
[16:14.880 --> 16:16.880]  У них там уже большие какие-то значения кодировок,
[16:16.880 --> 16:20.880]  поэтому в общем-то удобно использовать бинаризацию.
[16:20.880 --> 16:22.880]  Вы скажете, как тогда искать по-хорошему,
[16:22.880 --> 16:24.880]  потому что все-таки там будут удлиненные какие-то штуки,
[16:24.880 --> 16:28.880]  там будут блоки биты не совпадать, биты совпадать.
[16:28.880 --> 16:30.880]  На что я скажу?
[16:30.880 --> 16:34.880]  Постройте блоки, потом сожмите их просто и все.
[16:34.880 --> 16:36.880]  То есть построите этот длинный вектор,
[16:36.880 --> 16:38.880]  потом сожмите его отдельно по блокам.
[16:38.880 --> 16:40.880]  И причем блок сжимает только все единички.
[16:40.880 --> 16:42.880]  Вот.
[16:42.880 --> 16:44.880]  Окей.
[16:46.880 --> 16:48.880]  Самым простым закончили.
[16:48.880 --> 16:54.880]  А давайте применение найдем этой штуке какой-нибудь.
[16:54.880 --> 16:58.880]  Ну, как вы думаете,
[16:58.880 --> 17:04.880]  где мы чаще всего в жизни сталкиваемся с какими-то непрерывными функциями?
[17:06.880 --> 17:08.880]  Ну, исключаем от Ан, конечно же.
[17:10.880 --> 17:14.880]  Окей, за пределами физтеха.
[17:18.880 --> 17:22.880]  Ну, внезапно это музыка.
[17:22.880 --> 17:24.880]  Вот.
[17:24.880 --> 17:26.880]  И в чем суть?
[17:26.880 --> 17:28.880]  Ну, музыка это какой-то сигнал.
[17:28.880 --> 17:30.880]  Внезапно, да.
[17:30.880 --> 17:32.880]  Мы все передаем как эти сигналы.
[17:32.880 --> 17:36.880]  И можно этот сигнал дискретизировать,
[17:36.880 --> 17:38.880]  просто какие-то там точки на графике разметить.
[17:38.880 --> 17:42.880]  И мы внезапно хотим понять, насколько
[17:42.880 --> 17:44.880]  использовали у нас там...
[17:44.880 --> 17:46.880]  Вот.
[17:46.880 --> 17:48.880]  Ну, я не знаю, кто-нибудь у вас делал видео на YouTube там.
[17:48.880 --> 17:50.880]  Вот.
[17:50.880 --> 17:52.880]  Если использовать какую-то музыку там, не свою,
[17:52.880 --> 17:54.880]  то можно получить стаик за использование авторских прав.
[17:54.880 --> 17:56.880]  Вот.
[17:56.880 --> 17:58.880]  Ну окей.
[17:58.880 --> 18:00.880]  Как искать вообще и банить видосы?
[18:00.880 --> 18:02.880]  Вы думаете, там сидит там, не знаю,
[18:02.880 --> 18:04.880]  тысяча человек и мониторит все видео, которые загружают на YouTube?
[18:04.880 --> 18:06.880]  Я думаю, нет.
[18:06.880 --> 18:08.880]  Вот.
[18:08.880 --> 18:10.880]  Хотя бы миллионных надо по-хорошему.
[18:10.880 --> 18:12.880]  Это значит, что и надо платить зарплаты,
[18:12.880 --> 18:14.880]  и это очень грустно.
[18:14.880 --> 18:16.880]  Ну, все-таки.
[18:16.880 --> 18:18.880]  Мы живем в мире, где все честно.
[18:18.880 --> 18:20.880]  Вот.
[18:20.880 --> 18:22.880]  Соответственно, а как понимать вообще,
[18:22.880 --> 18:24.880]  есть ли в музыке... есть ли в видео
[18:24.880 --> 18:26.880]  похожий фрагмент по звучанию чем-то,
[18:26.880 --> 18:28.880]  что нужно забанить?
[18:28.880 --> 18:30.880]  Давайте свернем просто.
[18:30.880 --> 18:32.880]  И все.
[18:32.880 --> 18:34.880]  У нас же дискретизированный сигнал.
[18:34.880 --> 18:36.880]  Давайте свернем.
[18:36.880 --> 18:38.880]  Все. Окей, хорошо.
[18:38.880 --> 18:40.880]  А как в шазаме искать...
[18:40.880 --> 18:42.880]  Ну, в шазаме искать музыку все-таки сложнее.
[18:42.880 --> 18:44.880]  Вот.
[18:44.880 --> 18:46.880]  Хотя в целом все то же самое.
[18:46.880 --> 18:48.880]  Вы просто перебираете банк вариантов
[18:48.880 --> 18:50.880]  и просто их сверточкой прогоняете
[18:50.880 --> 18:52.880]  и смотрите.
[18:52.880 --> 18:54.880]  Подходит, не подходит, плюс-минус.
[18:54.880 --> 18:56.880]  Вот.
[18:56.880 --> 18:58.880]  Вот это применение одномерных свер.
[18:58.880 --> 19:00.880]  Давайте выходить в 2D.
[19:00.880 --> 19:02.880]  Да.
[19:02.880 --> 19:04.880]  Это картинки.
[19:04.880 --> 19:06.880]  А именно...
[19:06.880 --> 19:08.880]  Давайте обсудим такую вещь.
[19:08.880 --> 19:10.880]  Ну, у вас еще машинного обучения не было,
[19:10.880 --> 19:12.880]  скорее всего. Ну, почти у всех.
[19:12.880 --> 19:14.880]  Вот.
[19:14.880 --> 19:16.880]  Там есть такая штука, как задача компьютерного зрения.
[19:16.880 --> 19:18.880]  Это мы хотим картинки распознавать.
[19:18.880 --> 19:20.880]  Если котик на ней,
[19:20.880 --> 19:22.880]  в какую сторону он смотрит.
[19:22.880 --> 19:24.880]  Там очень много всяких задач,
[19:24.880 --> 19:26.880]  типа задач сегментации.
[19:26.880 --> 19:28.880]  Хотим выделить на подорожной картине
[19:28.880 --> 19:30.880]  все автомобили, отдельно знаки светофора,
[19:30.880 --> 19:32.880]  отдельно какие-то другие знаки.
[19:32.880 --> 19:34.880]  Хотим квалифицировать по изображению
[19:34.880 --> 19:36.880]  все объекты нужных нам классов.
[19:36.880 --> 19:38.880]  Это сегментация.
[19:38.880 --> 19:40.880]  Можно также работать с последовательностью
[19:40.880 --> 19:42.880]  картинок. Называется видео,
[19:42.880 --> 19:44.880]  если вы не в курсе.
[19:44.880 --> 19:46.880]  По задаче примерно те же самые там стоят.
[19:46.880 --> 19:48.880]  Что там было?
[19:48.880 --> 19:50.880]  Не знаю, это какое-нибудь веселое видео
[19:50.880 --> 19:52.880]  или токсичное видео, которое надо забанить.
[19:52.880 --> 19:54.880]  Можно такие классификаторы строить.
[19:56.880 --> 19:58.880]  Соответственно, как работать с картинками
[19:58.880 --> 20:00.880]  не очень понятно,
[20:00.880 --> 20:02.880]  потому что это что-то очень-очень странное.
[20:04.880 --> 20:06.880]  Картинка матрицы
[20:06.880 --> 20:08.880]  какого-то размера.
[20:08.880 --> 20:10.880]  Давайте считать пока что и просто матрица.
[20:10.880 --> 20:12.880]  В общем случае, это тензор трехмерный.
[20:12.880 --> 20:14.880]  И что с этим нужно делать?
[20:14.880 --> 20:16.880]  С этим вообще не понятно, что делать.
[20:16.880 --> 20:18.880]  Как это анализировать?
[20:18.880 --> 20:20.880]  Потому что значение какого-то пикселя
[20:20.880 --> 20:22.880]  зависит от соседних все-таки.
[20:22.880 --> 20:24.880]  Это раз.
[20:24.880 --> 20:26.880]  Два.
[20:26.880 --> 20:28.880]  С картинками неудобно работать,
[20:28.880 --> 20:30.880]  потому что непонятно,
[20:30.880 --> 20:32.880]  как перевести в машине,
[20:32.880 --> 20:34.880]  что тут есть кот, а тут собака.
[20:34.880 --> 20:36.880]  И все. Сидишь и не понимаешь.
[20:36.880 --> 20:38.880]  А ответ на это
[20:38.880 --> 20:40.880]  дали сначала до появления
[20:40.880 --> 20:42.880]  нейросетей всяких разных.
[20:42.880 --> 20:44.880]  Были классические всякие алгоритмы компьютерного зрения.
[20:46.880 --> 20:48.880]  Выделяем какие-нибудь контуры
[20:48.880 --> 20:50.880]  картинок, дальше что-нибудь по ним классифицируем.
[20:50.880 --> 20:52.880]  То есть упрощаем задачу.
[20:52.880 --> 20:54.880]  И до появления
[20:54.880 --> 20:56.880]  таких нужных вычислительных мощностей
[20:56.880 --> 20:58.880]  нельзя было применять нейросети,
[20:58.880 --> 21:00.880]  только они появились
[21:00.880 --> 21:02.880]  в таком плюс-минус классном применении
[21:02.880 --> 21:04.880]  с точки зрения масштабности.
[21:04.880 --> 21:06.880]  2012 год был.
[21:06.880 --> 21:08.880]  Есть такое соревнование классное.
[21:08.880 --> 21:10.880]  Что-то ImageNet
[21:10.880 --> 21:12.880]  как называется, или как-то так.
[21:12.880 --> 21:14.880]  Его суть в том, что там просто огромный банк
[21:14.880 --> 21:16.880]  изображений с разной одеждой.
[21:16.880 --> 21:18.880]  Там нужно отличить это куртка,
[21:18.880 --> 21:20.880]  это свитшот, пуловер, что-то такое.
[21:20.880 --> 21:22.880]  И вот первый раз,
[21:22.880 --> 21:24.880]  когда нейросеть показала плюс-минус
[21:24.880 --> 21:26.880]  удобоворимый результат, это был 2012 год.
[21:26.880 --> 21:28.880]  А его основой
[21:28.880 --> 21:30.880]  был сверточный слой,
[21:30.880 --> 21:32.880]  так называемый.
[21:32.880 --> 21:34.880]  Первое слово, которое
[21:34.880 --> 21:36.880]  в своем сочетании будем использовать
[21:36.880 --> 21:38.880]  это convolutional layer.
[21:38.880 --> 21:40.880]  Convolutional сверточный
[21:40.880 --> 21:42.880]  layer-слой.
[21:42.880 --> 21:44.880]  Вот почему слой?
[21:44.880 --> 21:46.880]  Потому что нейросеть
[21:46.880 --> 21:48.880]  на очень попном уровне это лего.
[21:48.880 --> 21:50.880]  Лего, которое
[21:50.880 --> 21:52.880]  вы просто ему выстраиваете граф вычислений,
[21:52.880 --> 21:54.880]  вот у вас вход,
[21:54.880 --> 21:56.880]  тут какой-то f,
[21:56.880 --> 21:58.880]  тут какое-то промежуточное состояние x1,
[21:58.880 --> 22:00.880]  какой-то там f2,
[22:00.880 --> 22:02.880]  какой-то x2.
[22:06.880 --> 22:08.880]  Вот такой выход
[22:08.880 --> 22:10.880]  какой-то.
[22:10.880 --> 22:12.880]  Там либо пометка, что там есть
[22:12.880 --> 22:14.880]  котик или нет, или там что-то более интеллектуальное.
[22:14.880 --> 22:16.880]  Вот.
[22:16.880 --> 22:18.880]  Например, там по изображению
[22:18.880 --> 22:20.880]  сгенерировать текст, что на нем написано.
[22:20.880 --> 22:22.880]  Пожалуйста, это вот входит все вот
[22:22.880 --> 22:24.880]  в эту прекрасную
[22:24.880 --> 22:26.880]  абстрактную идею в нейросете.
[22:26.880 --> 22:28.880]  Вот.
[22:28.880 --> 22:30.880]  Собственно, вот эти вот f1, f2 и так далее,
[22:30.880 --> 22:32.880]  они могут быть самыми разными,
[22:32.880 --> 22:34.880]  и их есть несколько видов.
[22:34.880 --> 22:36.880]  Вот в этой краске свертка.
[22:36.880 --> 22:38.880]  И что такое свертка?
[22:38.880 --> 22:40.880]  Давайте определим.
[22:42.880 --> 22:44.880]  Так, определение.
[22:44.880 --> 22:46.880]  Ну и здесь давайте перейду сразу в 3D.
[22:46.880 --> 22:48.880]  Почему в 3D?
[22:48.880 --> 22:50.880]  Потому что на самом деле картинка,
[22:50.880 --> 22:52.880]  вы ее раскладываете обычно по rgb,
[22:52.880 --> 22:54.880]  к спектру.
[22:54.880 --> 22:56.880]  Ну, красный, синий, зеленый, то, что у вас там в глаза видит.
[22:56.880 --> 22:58.880]  Вот.
[22:58.880 --> 23:00.880]  В каких-то пропорциях смешивая,
[23:00.880 --> 23:02.880]  вы получаете там цвета всевозможные.
[23:02.880 --> 23:04.880]  Вот.
[23:04.880 --> 23:06.880]  Поэтому давайте определим так,
[23:06.880 --> 23:08.880]  что картинка у нас будет вообще
[23:08.880 --> 23:10.880]  трехмерная штука.
[23:10.880 --> 23:12.880]  Мы напишем вот так вот
[23:12.880 --> 23:14.880]  результаты в свертке.
[23:18.880 --> 23:20.880]  Изображение
[23:24.880 --> 23:26.880]  a
[23:26.880 --> 23:28.880]  размеров
[23:28.880 --> 23:30.880]  w на h
[23:30.880 --> 23:32.880]  на c. c это число каналов.
[23:32.880 --> 23:34.880]  Если у вас черно-белая картинка,
[23:34.880 --> 23:36.880]  то канал 1.
[23:36.880 --> 23:38.880]  Просто степень
[23:38.880 --> 23:40.880]  от того черного к белому, сколько вы переходите.
[23:40.880 --> 23:42.880]  Вот.
[23:42.880 --> 23:44.880]  0,5 это полусерый какой-то.
[23:44.880 --> 23:46.880]  Вот. А в нашем случае rgb
[23:46.880 --> 23:48.880]  это будет их 3.
[23:48.880 --> 23:50.880]  Но на самом деле у Нью-Йорксетти много больше каналов есть.
[23:50.880 --> 23:52.880]  Потому что там какие-то каналы будут отвечать
[23:52.880 --> 23:54.880]  за отдельные кусочки картинки, на самом деле.
[23:54.880 --> 23:56.880]  То есть там,
[23:56.880 --> 23:58.880]  если мы хотим распознать транспорт,
[23:58.880 --> 24:00.880]  то один канал
[24:00.880 --> 24:02.880]  будет там, условно, отвечать за то,
[24:02.880 --> 24:04.880]  чтобы вычинять оттуда турбину самолета.
[24:04.880 --> 24:06.880]  Другой канал будет отвечать за то,
[24:06.880 --> 24:08.880]  что мы можем вычинять колеса велосипеда.
[24:08.880 --> 24:10.880]  Вот.
[24:10.880 --> 24:12.880]  И ядра
[24:14.880 --> 24:16.880]  фильтра
[24:18.880 --> 24:20.880]  по-английски kernel
[24:22.880 --> 24:24.880]  ядра b
[24:24.880 --> 24:26.880]  размерами
[24:26.880 --> 24:28.880]  вот таких вот.
[24:28.880 --> 24:30.880]  Так, давайте,
[24:30.880 --> 24:32.880]  чтобы было c. Да, у них
[24:32.880 --> 24:34.880]  число каналов одинаковые, но соотношения
[24:34.880 --> 24:36.880]  различны будут.
[24:36.880 --> 24:38.880]  А именно
[24:38.880 --> 24:40.880]  w1 меньше, чем w,
[24:42.880 --> 24:44.880]  h1 меньше, чем h.
[24:44.880 --> 24:46.880]  Вот.
[24:46.880 --> 24:48.880]  Давайте
[24:48.880 --> 24:50.880]  представлять это картинкой.
[24:54.880 --> 24:56.880]  Так, окей.
[24:56.880 --> 24:58.880]  То есть наше изображение
[24:58.880 --> 25:00.880]  это что-то вот такое.
[25:00.880 --> 25:02.880]  Вот.
[25:02.880 --> 25:04.880]  Аккуратней чуть-чуть.
[25:06.880 --> 25:08.880]  Давайте его на пиксели
[25:08.880 --> 25:10.880]  разобьём с ядрой.
[25:12.880 --> 25:14.880]  Вот.
[25:14.880 --> 25:16.880]  Аккуратней чуть-чуть.
[25:16.880 --> 25:18.880]  Аккуратней чуть-чуть.
[25:18.880 --> 25:20.880]  Аккуратней.
[25:20.880 --> 25:22.880]  Аккуратней.
[25:22.880 --> 25:24.880]  Это такая картинка.
[25:26.880 --> 25:28.880]  Я здесь вглубь не рисую,
[25:28.880 --> 25:30.880]  здесь будет число каналов
[25:30.880 --> 25:32.880]  в третьем измерении.
[25:32.880 --> 25:34.880]  В некотором плане можно отметить, что это ось w, а это ось h.
[25:34.880 --> 25:36.880]  Есть ядро
[25:38.880 --> 25:40.880]  ну, вот маленьким давайте.
[25:42.880 --> 25:44.880]  Три на три.
[25:44.880 --> 25:46.880]  И что получается?
[25:46.880 --> 25:48.880]  Берут и прикладывают это вот ядро
[25:48.880 --> 25:50.880]  во всех возможных местах.
[25:50.880 --> 25:52.880]  То есть прикладывают в левый верхний угол картинку
[25:52.880 --> 25:54.880]  три на три.
[25:54.880 --> 25:56.880]  Дальше, что у вас получается?
[25:56.880 --> 25:58.880]  Это значит, что вы приложили какой-то вот кубик
[25:58.880 --> 26:00.880]  к кубику,
[26:00.880 --> 26:02.880]  берёте скалярные произведения вдоль
[26:02.880 --> 26:04.880]  третьей компоненты
[26:04.880 --> 26:06.880]  и суммируете их все.
[26:06.880 --> 26:08.880]  Это получается значение на выходе
[26:08.880 --> 26:10.880]  в этом пикселе соответствующем.
[26:10.880 --> 26:12.880]  Поэтому давайте запишем здесь так, что
[26:12.880 --> 26:14.880]  а-па-па-пам
[26:14.880 --> 26:16.880]  давайте d
[26:16.880 --> 26:18.880]  и ты житый.
[26:18.880 --> 26:20.880]  Это будет что такое?
[26:22.880 --> 26:24.880]  Это сумма по всем u
[26:26.880 --> 26:28.880]  от 0 до
[26:30.880 --> 26:32.880]  w1-1.
[26:32.880 --> 26:34.880]  Сумма по всем v
[26:34.880 --> 26:36.880]  от 0 до h1-1.
[26:38.880 --> 26:40.880]  Скалярное произведение вот таких вот векторов.
[26:42.880 --> 26:44.880]  a
[26:44.880 --> 26:46.880]  i плюс u
[26:46.880 --> 26:48.880]  плюс v
[26:48.880 --> 26:50.880]  b и
[26:50.880 --> 26:52.880]  buv.
[26:58.880 --> 27:00.880]  Вот такая вот страшная конструкция.
[27:02.880 --> 27:04.880]  Казалось бы, всего лишь приложили
[27:04.880 --> 27:06.880]  прямоугольничек к прямоугольничку, посчитали,
[27:06.880 --> 27:08.880]  снова к прямоугольничку, посчитали
[27:08.880 --> 27:10.880]  и так далее ко всем возможным местам прикладываем.
[27:12.880 --> 27:14.880]  То есть вот у нас первое место приложения,
[27:14.880 --> 27:16.880]  дальше на 1 сдвинулись второе место
[27:16.880 --> 27:18.880]  приложения,
[27:18.880 --> 27:20.880]  теперь на 1 вниз. Третье место приложения,
[27:20.880 --> 27:22.880]  четвертое,
[27:22.880 --> 27:24.880]  еще на 1. Пятое,
[27:24.880 --> 27:26.880]  шестое.
[27:26.880 --> 27:28.880]  Ну давайте
[27:30.880 --> 27:32.880]  вот
[27:32.880 --> 27:34.880]  я сказал сразу, что это именно
[27:34.880 --> 27:36.880]  что вектора. Это как раз произведение векторов.
[27:36.880 --> 27:38.880]  То есть у вас вектора берутся в этом измерении.
[27:38.880 --> 27:40.880]  Здесь, на самом деле, еще есть c.
[27:40.880 --> 27:42.880]  Здесь вот тоже есть такая штука c.
[27:44.880 --> 27:46.880]  То есть да, на самом деле трехмерные штуки
[27:46.880 --> 27:48.880]  и это очень страшно.
[27:48.880 --> 27:50.880]  Давайте распишем до конца.
[27:56.880 --> 27:58.880]  Нет, здесь у нас места не хватит. Давайте я
[27:58.880 --> 28:00.880]  перейду на эту доску.
[28:02.880 --> 28:04.880]  Так.
[28:04.880 --> 28:06.880]  Сумма по u.
[28:06.880 --> 28:08.880]  W1-1.
[28:08.880 --> 28:10.880]  Сумма по v.
[28:10.880 --> 28:12.880]  H1-1.
[28:12.880 --> 28:14.880]  Сумма по g.
[28:14.880 --> 28:16.880]  От 0 до c.
[28:16.880 --> 28:18.880]  A
[28:18.880 --> 28:20.880]  i плюс u.
[28:20.880 --> 28:22.880]  G плюс v.
[28:24.880 --> 28:26.880]  А, g у нас занята.
[28:26.880 --> 28:28.880]  Блин.
[28:28.880 --> 28:30.880]  А, g у нас занята.
[28:30.880 --> 28:32.880]  А, g у нас занята.
[28:32.880 --> 28:34.880]  А, g у нас занята.
[28:34.880 --> 28:36.880]  Букла k у нас еще вроде не занята.
[28:42.880 --> 28:44.880]  B у ты
[28:44.880 --> 28:46.880]  в этой
[28:46.880 --> 28:48.880]  катой.
[28:48.880 --> 28:50.880]  Ну,
[28:50.880 --> 28:52.880]  выглядит громоздко.
[28:52.880 --> 28:54.880]  Давайте допустим,
[28:54.880 --> 28:56.880]  что мы бы это считали наивным
[28:56.880 --> 28:58.880]  путем. То есть явно бы все
[28:58.880 --> 29:00.880]  форы прописали.
[29:00.880 --> 29:02.880]  То есть получилось бы, что для вычисления
[29:02.880 --> 29:04.880]  одного пикселя результирующей картинки
[29:04.880 --> 29:06.880]  нам пришлось бы
[29:06.880 --> 29:08.880]  4, 4, 4.
[29:08.880 --> 29:10.880]  А этих пикселей
[29:10.880 --> 29:12.880]  много. То есть сразу
[29:12.880 --> 29:14.880]  получилось что-то типа
[29:14.880 --> 29:16.880]  w1
[29:16.880 --> 29:18.880]  на w-w1
[29:18.880 --> 29:20.880]  на h1
[29:20.880 --> 29:22.880]  h-h1 на c.
[29:24.880 --> 29:26.880]  Ну, давайте оценим.
[29:26.880 --> 29:28.880]  Скажем, что
[29:28.880 --> 29:30.880]  w1 оширен порядка половины,
[29:30.880 --> 29:32.880]  чтобы
[29:32.880 --> 29:34.880]  огрубить вычисления.
[29:34.880 --> 29:36.880]  Ну, какого у нас качества
[29:36.880 --> 29:38.880]  фотографии современной?
[29:40.880 --> 29:42.880]  Много.
[29:42.880 --> 29:44.880]  Я не очень знаю числа, но окей.
[29:44.880 --> 29:46.880]  Там картинка anti-full hd, да?
[29:46.880 --> 29:48.880]  1080 на 720,
[29:48.880 --> 29:50.880]  наверное. Ну, плюс-минус.
[29:50.880 --> 29:52.880]  То есть
[29:56.880 --> 29:58.880]  Full HD всего лишь просто,
[29:58.880 --> 30:00.880]  чтобы вычислить одну свертку.
[30:00.880 --> 30:02.880]  Это число каналов
[30:02.880 --> 30:04.880]  умножить на
[30:04.880 --> 30:06.880]  1080 квадрат
[30:06.880 --> 30:08.880]  на 720 квадрат.
[30:08.880 --> 30:10.880]  Ну, будто бы не очень
[30:10.880 --> 30:12.880]  много, да? Ну, тут порядка миллиона,
[30:12.880 --> 30:14.880]  тут чуть меньше миллиона.
[30:16.880 --> 30:18.880]  Просто hd.
[30:18.880 --> 30:20.880]  Вообще прикиньте, насколько
[30:20.880 --> 30:22.880]  мир отстал. Ну, или я отстал,
[30:22.880 --> 30:24.880]  я не знаю. Одно из двух.
[30:24.880 --> 30:26.880]  Вот. Ну, выглядит
[30:26.880 --> 30:28.880]  плюс-минус приемлемо, да?
[30:28.880 --> 30:30.880]  Ну, сколько тут? Ну, давайте скажем, что
[30:30.880 --> 30:32.880]  700 тысяч, да?
[30:32.880 --> 30:34.880]  700 тысяч это
[30:34.880 --> 30:36.880]  49 на 10
[30:36.880 --> 30:38.880]  десятый.
[30:38.880 --> 30:40.880]  Ну, ни о чем, да? У вас в контесте
[30:40.880 --> 30:42.880]  примерно такие задачи залетают.
[30:44.880 --> 30:46.880]  Вот.
[30:46.880 --> 30:48.880]  Учитывая то, что у нас там порядка
[30:48.880 --> 30:50.880]  не знаю, там сколько гигагерцов
[30:50.880 --> 30:52.880]  процессоры в современных там телефонах, например,
[30:52.880 --> 30:54.880]  или что-нибудь таком.
[30:54.880 --> 30:56.880]  Ну, давайте даже поделим на 10
[30:56.880 --> 30:58.880]  девятый. Получим, что что-то типа
[30:58.880 --> 31:00.880]  3 на 49. Ну, еще на 10
[31:00.880 --> 31:02.880]  поделим, с запасом, чтобы было.
[31:02.880 --> 31:04.880]  Получим порядка 15 секунд.
[31:04.880 --> 31:06.880]  А проблема
[31:06.880 --> 31:08.880]  в том, что это всего лишь одна свертка.
[31:08.880 --> 31:10.880]  На самом деле сверточный
[31:10.880 --> 31:12.880]  слой, он выдает вам чуть больше
[31:12.880 --> 31:14.880]  информации. А именно он выдает
[31:14.880 --> 31:16.880]  еще f каналов
[31:16.880 --> 31:18.880]  на самом деле. То есть запускается
[31:18.880 --> 31:20.880]  f сверток разных на одном
[31:20.880 --> 31:22.880]  изображении с f разными ядрами.
[31:22.880 --> 31:24.880]  Поэтому сюда еще f надо
[31:24.880 --> 31:26.880]  добавить на самом деле. В этим
[31:26.880 --> 31:28.880]  точку. И это вычтение лишь
[31:28.880 --> 31:30.880]  одного куска свертки.
[31:30.880 --> 31:32.880]  Вот миросетка, которая в 2013
[31:32.880 --> 31:34.880]  году работала, она называется AlexNet.
[31:34.880 --> 31:36.880]  И там у нее глубина
[31:36.880 --> 31:38.880]  порядка 7 вот таких вот сверточных слоев.
[31:38.880 --> 31:40.880]  Но вот как вы думаете,
[31:40.880 --> 31:42.880]  если подать одну картинку,
[31:42.880 --> 31:44.880]  наверное, это не круто, что она будет там
[31:44.880 --> 31:46.880]  с точностью хуже, чем человек, там
[31:46.880 --> 31:48.880]  через несколько минут выдавать тебе
[31:48.880 --> 31:50.880]  эта куртка. И те такие, нет, это пиджак.
[31:50.880 --> 31:52.880]  Все, технология бесполезна.
[31:52.880 --> 31:54.880]  Ну вот, казалось бы,
[31:54.880 --> 31:56.880]  надо что-то другое делать.
[31:56.880 --> 31:58.880]  И теперь вам нужно посмотреть
[31:58.880 --> 32:00.880]  внимательно на выражение вот этих вот трех сум
[32:00.880 --> 32:02.880]  и кое-что заметить.
[32:12.880 --> 32:14.880]  Ой, не тот маркер.
[32:14.880 --> 32:16.880]  Так, ну я накрою мне
[32:16.880 --> 32:18.880]  определение с начала лекции.
[32:22.880 --> 32:24.880]  У нас была такая вот штука интересная.
[32:24.880 --> 32:26.880]  Давайте по u от 0
[32:26.880 --> 32:28.880]  до m-1.
[32:28.880 --> 32:30.880]  a и
[32:30.880 --> 32:32.880]  plus j, b и j.
[32:32.880 --> 32:34.880]  Это одномерная
[32:34.880 --> 32:36.880]  свертка.
[32:38.880 --> 32:40.880]  Ой, и плюс j. Какой и плюс j? И плюс u.
[32:42.880 --> 32:44.880]  И плюс u,
[32:44.880 --> 32:46.880]  j, plus v, v.
[32:46.880 --> 32:48.880]  Ну и k в придачу.
[32:50.880 --> 32:52.880]  То есть это свертка,
[32:52.880 --> 32:54.880]  это свертка, и по этой штуке свертка.
[32:54.880 --> 32:56.880]  Трехмерная свертка перед вами. Вау.
[32:56.880 --> 32:58.880]  Вы думали, это нигде не нужно?
[32:58.880 --> 33:00.880]  Вот, оказывается, это очень даже нужно.
[33:02.880 --> 33:04.880]  Ну и что?
[33:04.880 --> 33:06.880]  k и k плюс 0.
[33:06.880 --> 33:08.880]  Сумма по одному слагаемому.
[33:08.880 --> 33:10.880]  От 0 до 0,
[33:10.880 --> 33:12.880]  нормально же.
[33:12.880 --> 33:14.880]  Вот. Ну давайте выпишем,
[33:14.880 --> 33:16.880]  тогда время работает.
[33:16.880 --> 33:18.880]  Давайте скажем, что это
[33:18.880 --> 33:20.880]  трехмерная свертка.
[33:24.880 --> 33:26.880]  И выпишем
[33:26.880 --> 33:28.880]  симпточку. Тогда это будет
[33:28.880 --> 33:30.880]  от
[33:30.880 --> 33:32.880]  w h
[33:32.880 --> 33:34.880]  лог w h
[33:34.880 --> 33:36.880]  на c.
[33:36.880 --> 33:38.880]  w h,
[33:38.880 --> 33:40.880]  у нас что это такое?
[33:40.880 --> 33:42.880]  18720,
[33:42.880 --> 33:44.880]  порядка 700000.
[33:44.880 --> 33:46.880]  Умножаем на лог 700000,
[33:46.880 --> 33:48.880]  это что-то, укладывающееся в одну секунду,
[33:48.880 --> 33:50.880]  уже круто, да?
[33:50.880 --> 33:52.880]  У нас это укладывалось
[33:52.880 --> 33:54.880]  в разы больше, да.
[33:54.880 --> 33:56.880]  Ну еще цешечка здесь.
[33:56.880 --> 33:58.880]  Понятное дело, что это все распараллеливается,
[33:58.880 --> 34:00.880]  там всякие вычления эффективные
[34:00.880 --> 34:02.880]  на ГПУ и так далее.
[34:02.880 --> 34:04.880]  Это вот на третьем курсе будете писать такое.
[34:04.880 --> 34:06.880]  Ну и не такое, там попроще,
[34:06.880 --> 34:08.880]  там будут матрицы перемножить,
[34:08.880 --> 34:10.880]  на ГПУ распараллелить.
[34:10.880 --> 34:12.880]  И там получается, что здесь сильно падает
[34:12.880 --> 34:14.880]  констант из таких грубых вычислений.
[34:14.880 --> 34:16.880]  Но, как видите, уже мы сократили на порядок.
[34:16.880 --> 34:18.880]  И это круто,
[34:18.880 --> 34:20.880]  очень.
[34:20.880 --> 34:22.880]  И в целом позволяет нам хоть как-то
[34:22.880 --> 34:24.880]  обрабатывать изображение.
[34:24.880 --> 34:26.880]  Чего-то круче вам предложить
[34:26.880 --> 34:28.880]  пока что не могу, потому что, по сути,
[34:28.880 --> 34:30.880]  мы достигли в некотором плане
[34:30.880 --> 34:32.880]  вершины эволюции с точки зрения симптотики.
[34:32.880 --> 34:34.880]  С точки зрения константа, конечно же,
[34:34.880 --> 34:36.880]  но у нас всегда там надо все нормально оптимизировать,
[34:36.880 --> 34:38.880]  чтобы все работало быстро.
[34:38.880 --> 34:40.880]  Но мы не этим занимаемся,
[34:40.880 --> 34:42.880]  потому что про всякие вычтения на ГПУ
[34:42.880 --> 34:44.880]  это вообще отдельная наука,
[34:44.880 --> 34:46.880]  которой надо прям уметь.
[34:54.880 --> 34:56.880]  В некотором плане, потому что у вас все равно
[34:56.880 --> 34:58.880]  вот это останется циклом
[34:58.880 --> 35:00.880]  пока, все равно, так или иначе.
[35:00.880 --> 35:02.880]  Вы могли бы написать
[35:02.880 --> 35:04.880]  только ц сюда.
[35:04.880 --> 35:06.880]  Вы могли бы сюда под логарифм еще ц закинуть.
[35:06.880 --> 35:08.880]  Но зачем? У вас же ц
[35:08.880 --> 35:10.880]  выполнен лишь один раз.
[35:10.880 --> 35:12.880]  То есть у вас, по сути,
[35:12.880 --> 35:14.880]  в некотором плане хоть и трехмерная свертка,
[35:14.880 --> 35:16.880]  и писать-то надо как трехмерную свертку хорошую.
[35:16.880 --> 35:18.880]  Можно писать как двумерная свертка,
[35:18.880 --> 35:20.880]  просто ц раз.
[35:20.880 --> 35:22.880]  Ну и все.
[35:22.880 --> 35:24.880]  То есть двумерная свертка по каждому каналу,
[35:24.880 --> 35:26.880]  потом суммируете. Ну потому что
[35:26.880 --> 35:28.880]  у них есть прикол в нейросетях,
[35:28.880 --> 35:30.880]  потому что там не нули денечки живут.
[35:30.880 --> 35:32.880]  Там живут какие-то вещественные числа,
[35:32.880 --> 35:34.880]  которые отображают интенсивность
[35:34.880 --> 35:36.880]  того, что мы видим
[35:36.880 --> 35:38.880]  в некотором плане.
[35:38.880 --> 35:40.880]  Интерпретация этих компьютерных
[35:40.880 --> 35:42.880]  все это вообще отдельная наука.
[35:42.880 --> 35:44.880]  То есть здесь в этом плане
[35:44.880 --> 35:46.880]  нельзя сказать, что это нули и один,
[35:46.880 --> 35:48.880]  потому что это не бинарный фактор.
[35:48.880 --> 35:50.880]  Это какой-то фактор, который отображает степень того, насколько
[35:50.880 --> 35:52.880]  в данном канале изображение
[35:52.880 --> 35:54.880]  похоже на то, что мы хотим.
[35:54.880 --> 35:56.880]  Грубо говоря так.
[35:56.880 --> 35:58.880]  Но опять же мы опустились
[35:58.880 --> 36:00.880]  до оверноучпопного уровня,
[36:00.880 --> 36:02.880]  потому что можем. Все-таки мы про алгоритмы
[36:02.880 --> 36:04.880]  разговариваем.
[36:06.880 --> 36:08.880]  Оказалось бы, свертки это
[36:08.880 --> 36:10.880]  конечно круто, но иногда нужно
[36:10.880 --> 36:12.880]  уметь и другие преобразования делать.
[36:12.880 --> 36:14.880]  Но самое простое это банально зашумить картинку.
[36:16.880 --> 36:18.880]  Вы хотите там размытый фонт сзади в зуме?
[36:18.880 --> 36:20.880]  Явно никто не будет какие-то
[36:20.880 --> 36:22.880]  свертки строить. Там другие преобразования.
[36:22.880 --> 36:24.880]  Вот. Это второй тип слоев.
[36:24.880 --> 36:26.880]  Это pulling layer, так называемый.
[36:28.880 --> 36:30.880]  Их два вида.
[36:30.880 --> 36:32.880]  Больше на самом деле,
[36:32.880 --> 36:34.880]  но в основном нас будут интересовать два.
[36:36.880 --> 36:38.880]  MaxPulling и
[36:38.880 --> 36:40.880]  averagePulling.
[36:42.880 --> 36:44.880]  Average это среднее.
[36:44.880 --> 36:46.880]  Max это максимум.
[36:48.880 --> 36:50.880]  Соответственно, окей.
[36:50.880 --> 36:52.880]  Давайте вернемся
[36:52.880 --> 36:54.880]  в далекие-далекие времена.
[36:54.880 --> 36:56.880]  Вспомним то, с чего начинался весь наш курс.
[36:56.880 --> 36:58.880]  Прям в самом сентябре.
[36:58.880 --> 37:00.880]  Помните, про что первая лекция была?
[37:00.880 --> 37:02.880]  Еще.
[37:02.880 --> 37:04.880]  Во, префиксная сумма.
[37:04.880 --> 37:06.880]  Это хорошо.
[37:06.880 --> 37:08.880]  Что на второй лекции было?
[37:08.880 --> 37:10.880]  Во, контейнер.
[37:10.880 --> 37:12.880]  Классно.
[37:14.880 --> 37:16.880]  Сейчас я буду выписывать
[37:16.880 --> 37:18.880]  формулы кокстрен
[37:18.880 --> 37:20.880]  average и maxpulling и вы будете говорить, как решать.
[37:20.880 --> 37:22.880]  Эффективно.
[37:22.880 --> 37:24.880]  Начнем с простого.
[37:24.880 --> 37:26.880]  Окей.
[37:26.880 --> 37:28.880]  AveragePulling.
[37:32.880 --> 37:34.880]  Он принимает
[37:34.880 --> 37:36.880]  на вход в себя
[37:36.880 --> 37:38.880]  изображение
[37:38.880 --> 37:40.880]  w на h на c.
[37:40.880 --> 37:42.880]  Это изображение
[37:42.880 --> 37:44.880]  w на h на c.
[37:44.880 --> 37:46.880]  Это изображение
[37:46.880 --> 37:48.880]  w на h на c.
[37:48.880 --> 37:50.880]  Это изображение
[37:50.880 --> 37:52.880]  h на c.
[37:52.880 --> 37:54.880]  Это изображение.
[37:58.880 --> 38:00.880]  И еще он принимает в себя
[38:00.880 --> 38:02.880]  две чиселки.
[38:02.880 --> 38:04.880]  Давайте ab.
[38:06.880 --> 38:08.880]  Это будет a.
[38:08.880 --> 38:10.880]  Тогда результат b
[38:10.880 --> 38:12.880]  будет вот такая вот штука.
[38:12.880 --> 38:14.880]  b и j.
[38:18.880 --> 38:20.880]  Определяется, как
[38:22.880 --> 38:24.880]  это будет.
[38:26.880 --> 38:28.880]  Давайте чуть-чуть.
[38:28.880 --> 38:30.880]  Еще запишу третье измерение.
[38:30.880 --> 38:32.880]  Но опять же в виде питомской нотации
[38:32.880 --> 38:34.880]  оставлю.
[38:46.880 --> 38:48.880]  Кому?
[38:48.880 --> 38:50.880]  Не, там в каждом канале
[38:50.880 --> 38:52.880]  отдельно будет браться.
[39:00.880 --> 39:02.880]  Так.
[39:02.880 --> 39:04.880]  А, ну я молодец.
[39:04.880 --> 39:06.880]  Я круто обозвал
[39:06.880 --> 39:08.880]  букву.
[39:08.880 --> 39:10.880]  Здесь будет a
[39:10.880 --> 39:12.880]  и plus u.
[39:12.880 --> 39:14.880]  J plus V.
[39:16.880 --> 39:18.880]  И по третьему измерению
[39:18.880 --> 39:20.880]  берется по всем каналам.
[39:20.880 --> 39:22.880]  Это формула для усоединенного
[39:22.880 --> 39:24.880]  пулинга.
[39:24.880 --> 39:26.880]  Как считать будем эффективно?
[39:42.880 --> 39:44.880]  Да, это двумерные
[39:44.880 --> 39:46.880]  префиксные суммы.
[39:46.880 --> 39:48.880]  Просто это потом будет поделить на ab.
[39:48.880 --> 39:50.880]  Все.
[39:58.880 --> 40:00.880]  Ну и давайте последний компонент,
[40:00.880 --> 40:02.880]  чтобы мы могли построить
[40:02.880 --> 40:04.880]  игрушечную нейросетку.
[40:04.880 --> 40:06.880]  Это MaxPulling.
[40:06.880 --> 40:08.880]  Пулинг оно
[40:08.880 --> 40:10.880]  что-то, грубо говоря,
[40:10.880 --> 40:12.880]  фильтрует или вытаскивает
[40:12.880 --> 40:14.880]  какие-то фичи.
[40:14.880 --> 40:16.880]  Изображения.
[40:16.880 --> 40:18.880]  AveragePulling он усредняет
[40:18.880 --> 40:20.880]  в плане того, что мы там
[40:20.880 --> 40:22.880]  не сильно теряем информацию
[40:22.880 --> 40:24.880]  со всех каналов,
[40:24.880 --> 40:26.880]  но при этом уменьшаем размер изображения,
[40:26.880 --> 40:28.880]  чтобы наши алгоритмы быстрее работали.
[40:28.880 --> 40:30.880]  Потому что опять же в изображении,
[40:30.880 --> 40:32.880]  когда оно очень высокого качества,
[40:32.880 --> 40:34.880]  очень много лишнего.
[40:34.880 --> 40:36.880]  Вот, например,
[40:36.880 --> 40:38.880]  если я сфоткаю аудиторию
[40:38.880 --> 40:40.880]  и мне нужно будет сказать, правда ли,
[40:40.880 --> 40:42.880]  что это учебный класс, мне не нужно будет
[40:42.880 --> 40:44.880]  процентов 99 информации.
[40:44.880 --> 40:46.880]  Вот, окей.
[40:46.880 --> 40:48.880]  Я думаю,
[40:48.880 --> 40:50.880]  тогда понятно, что такое MaxPulling.
[40:50.880 --> 40:52.880]  Он строится очень идеально просто.
[40:56.880 --> 40:58.880]  Ну, здесь давайте определим
[40:58.880 --> 41:00.880]  его по каждому каналу.
[41:00.880 --> 41:02.880]  Потому что если, к сожалению, уже не помню,
[41:02.880 --> 41:04.880]  как это называется,
[41:04.880 --> 41:06.880]  по каждому каналу или нет.
[41:14.880 --> 41:16.880]  A
[41:16.880 --> 41:18.880]  I plus U
[41:20.880 --> 41:22.880]  J plus V
[41:24.880 --> 41:26.880]  Вот так вот. Это как считать?
[41:28.880 --> 41:30.880]  ДО не предлагать.
[41:30.880 --> 41:32.880]  Сразу.
[41:32.880 --> 41:34.880]  Не считается.
[41:34.880 --> 41:36.880]  Эффективнее надо.
[41:38.880 --> 41:40.880]  Нет.
[41:40.880 --> 41:42.880]  Там строить долго.
[41:44.880 --> 41:46.880]  Строить долго.
[41:46.880 --> 41:48.880]  Я не зря напомнил вам про вторую лекцию.
[41:48.880 --> 41:50.880]  Вспоминайте, что у нас там было.
[41:50.880 --> 41:52.880]  Нет.
[41:52.880 --> 41:54.880]  Вы сами сказали, стэки, очереди были,
[41:54.880 --> 41:56.880]  контейнеры.
[41:56.880 --> 41:58.880]  И теперь вы отошли от этого.
[41:58.880 --> 42:00.880]  Нет.
[42:04.880 --> 42:06.880]  Помните, у нас была очередь с максимумом.
[42:08.880 --> 42:10.880]  У нас был стэк с максимумом
[42:10.880 --> 42:12.880]  и очередь на двух стэках.
[42:12.880 --> 42:14.880]  Там как бы нужно было раз-два
[42:14.880 --> 42:16.880]  хоба и сдать задачу в контест.
[42:16.880 --> 42:18.880]  Примерно.
[42:18.880 --> 42:20.880]  Вот. Это тоже самое, по сути.
[42:20.880 --> 42:22.880]  Только это двумерный вариант,
[42:22.880 --> 42:24.880]  и он делается вообще не сложнее одномерного.
[42:24.880 --> 42:26.880]  Поэтому здесь мы получаем
[42:26.880 --> 42:28.880]  асимпатическую сложность на самом деле
[42:28.880 --> 42:30.880]  от параметров.
[42:30.880 --> 42:32.880]  Аж на С.
[42:32.880 --> 42:34.880]  То есть просто
[42:34.880 --> 42:36.880]  именно сколько нам дали ресурсов,
[42:36.880 --> 42:38.880]  столько мы затратили по времени.
[42:38.880 --> 42:40.880]  Аналогично здесь.
[42:42.880 --> 42:44.880]  Ну все, мои начинающие
[42:44.880 --> 42:46.880]  исследователи в компьютерном зрении,
[42:46.880 --> 42:48.880]  вы построили игрушечную нейронку.
[42:48.880 --> 42:50.880]  Я вас поздравляю.
[42:50.880 --> 42:52.880]  Конечно нет, но почему?
[42:52.880 --> 42:54.880]  Потому что у третьего курса уже было машинное обучение.
[42:54.880 --> 42:56.880]  И они должны знать,
[42:56.880 --> 42:58.880]  что нейросети по-хорошему...
[42:58.880 --> 43:00.880]  Вот тут была цепочка входов.
[43:02.880 --> 43:04.880]  Х0, х1, х2.
[43:06.880 --> 43:08.880]  Аут.
[43:08.880 --> 43:10.880]  И там проблема в том,
[43:10.880 --> 43:12.880]  что вам нужно уметь вычислять...
[43:12.880 --> 43:14.880]  Тут функция ошибки задается какая-то.
[43:14.880 --> 43:16.880]  То есть то, насколько мы не похожи
[43:16.880 --> 43:18.880]  на ожидаемый результат.
[43:18.880 --> 43:20.880]  Называемый L
[43:20.880 --> 43:22.880]  от XN.
[43:22.880 --> 43:24.880]  L loss, потому что.
[43:26.880 --> 43:28.880]  И типичным методом обучения нейросетей
[43:28.880 --> 43:30.880]  это нужно брать градиенты этой штуки
[43:30.880 --> 43:32.880]  по всем вот этим вот слоям.
[43:32.880 --> 43:34.880]  Проблема в том, что
[43:34.880 --> 43:36.880]  ну вот, первое, здесь нужно брать производную сложную функцию.
[43:36.880 --> 43:38.880]  Это очевидно.
[43:38.880 --> 43:40.880]  Но это не главная проблема. Проблема в том, что
[43:40.880 --> 43:42.880]  не очевидно, что свертка дифференцируема
[43:42.880 --> 43:44.880]  на самом деле.
[43:44.880 --> 43:46.880]  Это первое. Хорошо, окей.
[43:46.880 --> 43:48.880]  На самом деле она очевидно дифференцируема,
[43:48.880 --> 43:50.880]  потому что просто какая-то линейная комбинация чего-то.
[43:50.880 --> 43:52.880]  И все линейные преобразования дифференцируемы.
[43:52.880 --> 43:54.880]  Ну, вы просто берете
[43:54.880 --> 43:56.880]  и берете вот по каждому B
[43:56.880 --> 43:58.880]  УВК, частную производную,
[43:58.880 --> 44:00.880]  и считаете градиент. Ну и там как-то изменяете.
[44:00.880 --> 44:02.880]  Вот это называется процесс обучения
[44:02.880 --> 44:04.880]  нейросети.
[44:04.880 --> 44:06.880]  Ну, казалось бы, тогда нам нужно
[44:06.880 --> 44:08.880]  там C, W,
[44:08.880 --> 44:10.880]  аж квадрат, вот там как вот на
[44:10.880 --> 44:12.880]  самого верху написано операции сделать по-хорошему,
[44:12.880 --> 44:14.880]  чтобы их вычислить. Оказывается, что нет.
[44:14.880 --> 44:16.880]  И градиент свертки выражается через свертку.
[44:16.880 --> 44:18.880]  Вот. Это забавный факт.
[44:18.880 --> 44:20.880]  Выводить я его не буду, потому что
[44:20.880 --> 44:22.880]  все-таки у нас курс не про
[44:22.880 --> 44:24.880]  машинное обучение.
[44:24.880 --> 44:26.880]  Но кому хочется, в конспекте есть ссылочки на все статьи
[44:26.880 --> 44:28.880]  с выводами. Можете почитать.
[44:28.880 --> 44:30.880]  Вот.
[44:30.880 --> 44:32.880]  То есть смотрите, что мы с вами сделали
[44:32.880 --> 44:34.880]  по-хорошему.
[44:34.880 --> 44:36.880]  У нас сегодня с вами последняя лекция.
[44:36.880 --> 44:38.880]  Мы с вами узнали качество
[44:38.880 --> 44:40.880]  трехмерной свертки.
[44:40.880 --> 44:42.880]  И начали строить нейросети.
[44:42.880 --> 44:44.880]  Потом мы вернулись к самым, к самым, к самым
[44:44.880 --> 44:46.880]  базовым истокам.
[44:46.880 --> 44:48.880]  И закончили строить нейросети.
[44:48.880 --> 44:50.880]  Вау, курс замкнулся.
[44:50.880 --> 44:52.880]  Я поздравляю вас с этим.
[44:52.880 --> 44:54.880]  Можно, конечно, вспомнить все, с чем мы начинали
[44:54.880 --> 44:56.880]  и чем мы закончили. Однако это
[44:56.880 --> 44:58.880]  оставлю все-таки вам поностальгировать в чате.
[44:58.880 --> 45:00.880]  Перечитать условия первых задач.
[45:00.880 --> 45:02.880]  Как вы долго потели над код-стайлом.
[45:02.880 --> 45:04.880]  Но почему-то у вас-то до сих пор происходит.
[45:04.880 --> 45:06.880]  Вы до сих пор
[45:06.880 --> 45:08.880]  не научились настроить линтеры сами.
[45:08.880 --> 45:10.880]  В целом все. Можно расходиться.
