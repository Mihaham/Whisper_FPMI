[00:00.000 --> 00:08.720]  Так, смотрите, напоминаю, что по первым, так сказать,
[00:08.720 --> 00:12.040]  нескольким задачам дедлайна у нас через неделю и сразу
[00:12.040 --> 00:14.680]  приятная новость, туда будет добавлена еще одна задачка.
[00:14.680 --> 00:17.560]  С тем же дедлайном?
[00:17.560 --> 00:18.560]  Да.
[00:18.560 --> 00:21.400]  Ну, скажем так, я ее в принципе даже могу сформулировать.
[00:21.400 --> 00:25.480]  Смотрите, рекуррента будет немножко экзотического
[00:25.480 --> 00:26.480]  вида.
[00:27.080 --> 00:28.080]  Да, и смотрите какая.
[00:28.080 --> 00:35.680]  Значит, рекуррента будет выглядеть так, t от m равно,
[00:35.680 --> 00:44.880]  я запишу в таком виде, t от m плюс t от n минус m плюс,
[00:44.880 --> 00:48.640]  ну скажем, 1, зачем-то непонятно, ну ладно, плюс логарифом
[00:48.640 --> 00:56.120]  минимума от m и n минус m, где, я так напишу, m равно
[00:56.240 --> 01:02.360]  m от n, значит это тоже целое число там будет подразумеваться
[01:02.360 --> 01:08.640]  и, соответственно, m будет лежать от 1 до n минус 1.
[01:08.640 --> 01:17.400]  Ну, то есть это означает, что, ну то есть смотрите,
[01:17.400 --> 01:20.640]  что m будет зависеть от n, то есть скажем так, для n
[01:20.640 --> 01:26.080]  равно 7, m будет равно 2, там для n равно там 19, m будет
[01:26.160 --> 01:29.520]  равно, ну допустим там 18.
[01:29.520 --> 01:36.400]  А вот не важно как, вот есть такое ограничение, что
[01:36.400 --> 01:39.400]  для каждого n, значит m от n будет лежать на отрезке
[01:39.400 --> 01:42.640]  от 1 до n минус 1, то есть по сути n тут разбивается
[01:42.640 --> 01:43.640]  на два слагаемых.
[01:44.640 --> 01:46.640]  Какая же дичь.
[01:51.640 --> 01:56.760]  Это целое число, целое число на отрезке от 1 до n
[01:56.760 --> 01:57.760]  минус 1.
[01:57.760 --> 01:59.160]  Ну, совсем переписывать не обязательно, просто
[01:59.160 --> 02:01.160]  потому, что как бы у вас в ДЗ это все будет сформулировано.
[02:01.160 --> 02:07.640]  Ой, так, у меня опять очки развалились, ай, началось,
[02:07.640 --> 02:08.640]  что такое, да ладно.
[02:08.640 --> 02:11.640]  Правильно ли я понял, что можно даже не смотреть,
[02:11.640 --> 02:13.640]  только все остальные значения решены?
[02:13.640 --> 02:15.640]  Нет, в смысле, ну почему?
[02:15.640 --> 02:16.640]  Потому что это дичь какая-то.
[02:16.640 --> 02:19.640]  Нет, ну скажем так, это не дичь, потому что с этой
[02:19.640 --> 02:21.640]  рекуррентой, когда мы будем изучать софт хип, мы реально
[02:21.640 --> 02:24.640]  столкнемся, просто она нам будет жизненно необходима.
[02:24.640 --> 02:26.640]  То есть вот поэтому…
[02:26.640 --> 02:27.640]  Какая гадость.
[02:27.640 --> 02:30.640]  Поэтому знаете, что как бы, поэтому хочется подготовиться.
[02:30.640 --> 02:32.640]  Так, а где этот болтик-то?
[02:32.640 --> 02:39.640]  Так, а, то есть классно, я сегодня без очков, отлично.
[02:39.640 --> 02:41.640]  Так, ну что делать?
[02:41.640 --> 02:42.640]  Что делать?
[02:42.640 --> 02:43.640]  Ладно.
[02:43.640 --> 02:45.640]  А, ну или вот, знаете, вот так вот.
[02:45.640 --> 02:47.640]  Буду вот так вот на вас смотреть.
[02:47.640 --> 02:49.640]  Вот так вот, да.
[02:49.640 --> 02:50.640]  Да.
[02:50.640 --> 02:51.640]  Или вот так.
[02:51.640 --> 02:52.640]  Ну ладно.
[02:52.640 --> 02:53.640]  А, вот это?
[02:53.640 --> 02:55.640]  Ой, спасибо огромное, отлично.
[02:55.640 --> 02:57.640]  Значит, я тогда потом разберусь.
[02:57.640 --> 02:58.640]  Так, окей.
[02:58.640 --> 02:59.640]  Ладно.
[02:59.640 --> 03:00.640]  Вот.
[03:00.640 --> 03:02.640]  Ну, в принципе, вот такая рекуррента.
[03:02.640 --> 03:05.640]  На самом деле, то есть честно скажу, значит, на будущее
[03:05.640 --> 03:08.640]  можно по идее ради интереса задуматься, что вместо
[03:08.640 --> 03:12.640]  атома тут может стоять, ну вот, практически что угодно
[03:12.640 --> 03:13.640]  с точки зрения результата.
[03:13.640 --> 03:14.640]  Вот.
[03:14.640 --> 03:18.640]  То есть на самом деле, у движения, что если я тут
[03:18.640 --> 03:22.640]  логарифм заменю, скажем, на корень, или там на что-нибудь
[03:22.640 --> 03:25.640]  еще не сильно линейное, то есть желательно там меньше,
[03:25.640 --> 03:27.640]  чем линейное, то результат скорее всего будет одним
[03:27.640 --> 03:28.640]  и тем же.
[03:28.640 --> 03:32.640]  Ладно, не буду пока говорить какой, но думаю вы и так
[03:32.640 --> 03:33.640]  догадываетесь.
[03:33.640 --> 03:34.640]  Вот.
[03:34.640 --> 03:41.640]  Нет, не М, но как бы задача будет решить ТАТ.
[03:41.640 --> 03:47.640]  То есть утверждение, что у ТАТ на всем точка от конкретного
[03:47.640 --> 03:48.640]  М зависеть не будет.
[03:48.640 --> 03:49.640]  Вот так вот.
[03:49.640 --> 03:50.640]  Ну вот.
[03:50.640 --> 03:51.640]  Ну вот такая рекуррента.
[03:51.640 --> 03:52.640]  Как это, да.
[03:52.640 --> 03:59.640]  То есть ну на самом деле так, два момента, да, типичная
[03:59.640 --> 04:03.640]  ситуация, да, в этом курсе мы будем много решать задачи,
[04:03.640 --> 04:05.640]  а зачем нам это надо вообще.
[04:05.640 --> 04:06.640]  Вот.
[04:06.640 --> 04:07.640]  Да.
[04:07.640 --> 04:10.640]  Ну вот иногда у нас присутствует в курсе такая проблема,
[04:10.640 --> 04:13.640]  но на самом деле я объясню откуда она берется.
[04:13.640 --> 04:17.640]  То есть, ну дело в том, что, ну то есть так, да, то есть
[04:17.640 --> 04:20.640]  софтхип, конечно, объяснять не буду, но будет теперь
[04:20.640 --> 04:25.640]  такая ситуация, что, предположим, что у вас есть там, допустим,
[04:25.640 --> 04:26.640]  некоторое дерево.
[04:26.640 --> 04:27.640]  Двоичное.
[04:27.640 --> 04:31.640]  И не просто двоичное дерево, а как бы каждое вот это разбиение
[04:31.640 --> 04:34.640]  на два, оно символизирует то, что у вас тут вот множество
[04:34.640 --> 04:35.640]  разбивается на два.
[04:35.640 --> 04:37.640]  Вот на M и на N минус M.
[04:37.640 --> 04:40.640]  Изначально там N элементов, ну и там в каждом листе
[04:40.640 --> 04:41.640]  там один элемент.
[04:41.640 --> 04:43.640]  То есть вот они как-то тут по какому-то графику то
[04:43.640 --> 04:45.640]  ли объединяются, то ли наоборот разъединяются.
[04:45.640 --> 04:49.640]  Но фишка в том, что в каждой вершине для этого объединения
[04:49.640 --> 04:53.640]  вы выполняете вот какое-то заданное число действий.
[04:53.640 --> 04:54.640]  Вот такое.
[04:54.640 --> 04:58.640]  И вам жутко интересно, а сколько этих действий суммарно.
[04:59.640 --> 05:02.640]  И вот оказывается, что если при объединении двух множеств
[05:02.640 --> 05:06.640]  вы тратите вот такое время, то есть, внимание, логарифм
[05:06.640 --> 05:11.640]  минимума размеров, то вот оказывается, что суммарно
[05:11.640 --> 05:15.640]  тогда это все объединение работает за, скажем аккуратно,
[05:15.640 --> 05:17.640]  очень приятную симптомику.
[05:21.640 --> 05:22.640]  Что?
[05:24.640 --> 05:25.640]  Ну не совсем.
[05:25.640 --> 05:26.640]  Не совсем.
[05:26.640 --> 05:28.640]  Переливайка была бы.
[05:28.640 --> 05:30.640]  Переливайка была бы.
[05:31.640 --> 05:33.640]  Нет, ну не совсем.
[05:33.640 --> 05:35.640]  Смотрите, классические переливайки на самом деле
[05:35.640 --> 05:39.640]  вот в этом месте написано что-то типа
[05:39.640 --> 05:44.640]  минимум m и n минуты с m на логарифм
[05:44.640 --> 05:47.640]  то ли максимума, то ли n скорее.
[05:47.640 --> 05:48.640]  А здесь просто логарифм.
[05:48.640 --> 05:49.640]  Вот тогда.
[05:49.640 --> 05:50.640]  Тогда бы получался лог квадрат.
[05:50.640 --> 05:53.640]  А здесь обратите внимание, просто логарифм это важно.
[05:54.640 --> 05:57.640]  Ну мало ли, потому что там будет у нас какой-нибудь
[05:57.640 --> 06:00.640]  двусвязанный, там какой-нибудь список односвязанных,
[06:00.640 --> 06:03.640]  причем биномиальных деревьев, которые мы будем как-то
[06:03.640 --> 06:05.640]  объединять и так далее.
[06:05.640 --> 06:06.640]  Вот.
[06:06.640 --> 06:11.640]  Да, еще краткий анонс на тему того, что нас ждет.
[06:11.640 --> 06:13.640]  Но не волнуйтесь, как бы это ни за мгновенно,
[06:13.640 --> 06:15.640]  до этого мы должны дожить.
[06:15.640 --> 06:16.640]  Вот.
[06:16.640 --> 06:18.640]  Но сегодня мы как раз тоже сделаем, конечно, первый шаг
[06:18.640 --> 06:21.640]  к тому, чтобы до этого дожить, но это не только ради этого,
[06:21.640 --> 06:24.640]  потому что сегодня мы, конечно, будем тоже изучать достаточно
[06:24.640 --> 06:25.640]  основополагающую тему.
[06:30.640 --> 06:33.640]  Нет, знаете, парадокс заключается в том, что да, бинпоиск
[06:33.640 --> 06:36.640]  в нашем курсе не изучается.
[06:36.640 --> 06:37.640]  Вот.
[06:37.640 --> 06:41.640]  Но знаете, ну просто как-то вот не очень понятно, что
[06:41.640 --> 06:43.640]  про Двинтова можно про него рассказать.
[06:43.640 --> 06:44.640]  Ну вот.
[06:44.640 --> 06:46.640]  А так, что такое сампусель бинпоиск, или там бинпоиск
[06:46.640 --> 06:49.640]  по ответу, я думаю все из вас все вы и так прекрасно
[06:49.640 --> 06:50.640]  знаете.
[06:50.640 --> 06:53.640]  А как писать его в десять раз быстрее?
[06:53.640 --> 06:54.640]  Ой-ой-ой.
[06:54.640 --> 06:58.640]  А значит, знаете, тот проблема в том, что я как бы очень
[06:58.640 --> 07:00.640]  это там люблю иногда написать, собственно, лавербаунд
[07:00.640 --> 07:01.640]  и не париться.
[07:01.640 --> 07:04.640]  Иногда там такие коды получаются красивые.
[07:04.640 --> 07:08.640]  Так что на самом деле лавербаунд это не то, на самом деле,
[07:08.640 --> 07:10.640]  чем имеет смысл пренебрегать.
[07:12.640 --> 07:13.640]  Чего?
[07:14.640 --> 07:15.640]  Не слышу.
[07:15.640 --> 07:16.640]  Я не слышу ничего.
[07:16.640 --> 07:18.640]  Я как бы не только ничего не вижу, но ничего не слышу.
[07:18.640 --> 07:19.640]  Чего?
[07:19.640 --> 07:20.640]  Лавербаунд?
[07:20.640 --> 07:21.640]  Убрать.
[07:23.640 --> 07:25.640]  Господи, почему вы сегодня так тихо разговариваете?
[07:25.640 --> 07:26.640]  Ну, так.
[07:27.640 --> 07:28.640]  Вот.
[07:28.640 --> 07:31.640]  Точнее, когда вот, стойте, как-то, как-то бывает, когда
[07:31.640 --> 07:33.640]  вы между собой разговариваете, вы начинаете разговаривать
[07:33.640 --> 07:34.640]  громко.
[07:34.640 --> 07:35.640]  Это мешает.
[07:35.640 --> 07:36.640]  А потом, когда вы начнете разговаривать со мной, вы
[07:36.640 --> 07:37.640]  разговариваете тихо.
[07:37.640 --> 07:38.640]  Ну вот.
[07:38.640 --> 07:39.640]  Странно.
[07:39.640 --> 07:40.640]  Вот.
[07:41.640 --> 07:42.640]  Да, странно.
[07:42.640 --> 07:45.640]  А разговаривать между собой и мешать собственно лекцию,
[07:45.640 --> 07:47.640]  и вы не мешаете, там вам не стесняется.
[07:47.640 --> 07:52.000]  Ладно, значит, смотрите, так, если вот по этому, по этой
[07:52.000 --> 07:59.080]  рекурренте вопросов нету или есть, я говорю, она будет
[07:59.080 --> 08:02.880]  добавлена сегодня в ваше домашнее задание, deadline через
[08:02.880 --> 08:03.880]  неделю.
[08:03.880 --> 08:07.040]  Ну, то есть, в общем-то, она, я думаю, так, может быть,
[08:07.040 --> 08:10.120]  там просто чуть-чуть может быть сложнее, чем те рекурренты,
[08:10.120 --> 08:12.720]  которые у вас там есть сейчас, то есть, в принципе, я не
[08:12.720 --> 08:15.040]  думаю, что у вас там сильно большие проблемы с ней возникнут.
[08:15.840 --> 08:20.320]  Ну, значит, надо хорошо порешать все темы.
[08:20.320 --> 08:31.600]  Так я же говорю, не волнуйтесь, там произойдет следующее,
[08:31.600 --> 08:33.880]  что, то есть, если там будут какие-то ошибки, у вас будет
[08:33.880 --> 08:34.880]  возможность доработать.
[08:34.880 --> 08:38.960]  Вот, ну, если, конечно, вы там не отправили пустой
[08:38.960 --> 08:41.160]  лист в надежде потянуть deadline, конечно.
[08:41.640 --> 08:42.640]  Да.
[08:42.640 --> 08:45.640]  То есть, извините, после длайна можно будет еще доработать?
[08:45.640 --> 08:46.640]  Значит, да.
[08:46.640 --> 08:47.640]  Если уже до длайна отправлено.
[08:47.640 --> 08:51.360]  Нет, если там первая осмысленная попытка отправлена до длайна,
[08:51.360 --> 08:53.960]  то доработать, конечно, будет можно, да, естественно.
[08:53.960 --> 08:55.960]  Так вот.
[08:55.960 --> 09:00.840]  Ну, а сегодня мы пойдем, значит, еще одна важная
[09:00.840 --> 09:03.400]  тема, да, на нее тоже будут веселые теоретические
[09:03.400 --> 09:04.400]  задачи.
[09:04.400 --> 09:07.920]  Вот, это, конечно, амортизационный анализ.
[09:08.920 --> 09:09.920]  Вот.
[09:09.920 --> 09:10.920]  Да.
[09:10.920 --> 09:13.920]  То есть, это, собственно, вещь, там, без которой,
[09:13.920 --> 09:16.920]  ну, без которой, там, на самом деле, в значительной степени
[09:16.920 --> 09:17.920]  никуда.
[09:23.920 --> 09:27.920]  Ну да, это мог бы быть пример, да.
[09:27.920 --> 09:28.920]  Вот.
[09:30.920 --> 09:32.920]  Ну, в принципе, действительно так.
[09:32.920 --> 09:34.920]  Глобально о чем речь?
[09:34.920 --> 09:37.920]  Ну, чаще всего, действительно, речь у нас идет beaches
[09:37.920 --> 09:41.920]  о prestigious, departure, о некоторой структуре данных,
[09:41.920 --> 09:44.400]  вот бывает, вот, бывает, вот, некоторая структура данных,
[09:44.400 --> 09:48.400]  в которой, ну, есть там какие-то операции.
[09:48.400 --> 09:52.220]  Ну, там, условно, условно, конечно, там, инсорт.
[09:52.220 --> 09:54.700]  Но чаще всего там, есть, и операции со структурой,
[09:54.700 --> 09:56.320]  это там, операция инсерта по рейсу какие-то.
[09:56.320 --> 10:00.640]  Инсерты sheets, там, كان еще, там, что-нибудь, там,
[10:00.640 --> 10:02.860]  бла-бла-бла, бла-бла.
[10:02.860 --> 10:03.860]  Вот.
[10:03.860 --> 10:12.860]  И обычно структура считается хорошей, если мы гарантируем, что каждая операция работает в идеале за от единицы.
[10:12.860 --> 10:14.860]  Вот прям каждая.
[10:14.860 --> 10:16.860]  Ну это прям совсем жиро?
[10:16.860 --> 10:18.860]  Да, ну нет, наоборот.
[10:18.860 --> 10:20.860]  Да, это прям хорошо.
[10:20.860 --> 10:22.860]  Совсем жиро?
[10:22.860 --> 10:24.860]  Да.
[10:25.860 --> 10:32.860]  Но обычно это не всегда так получается.
[10:32.860 --> 10:43.860]  Потому что иногда случается, что, например, выясняется, что там, скажем, инсерты и рейс работают, например, за от.
[10:43.860 --> 10:46.860]  Плохо ли это?
[10:46.860 --> 10:48.860]  Ну чаще всего плохо.
[10:48.860 --> 10:55.860]  Потому что обычно тогда это означает, что допустим n операций мы тогда делаем за o от n квадрат суммарно.
[10:55.860 --> 11:02.860]  Ну потому что мы так оценим, что каждая операция в худшем случае работает o от n, поэтому верхняя оценка o от n квадрат.
[11:02.860 --> 11:08.860]  Но действительно бывает, что это исключительно верхняя оценка.
[11:08.860 --> 11:13.860]  Ведь бывают такие ситуации, когда кажется, что в худшем случае оно может работать за o от n,
[11:13.860 --> 11:21.860]  но гарантируется, что там, скажем, за 100-500 операций такое будет не более чем один раз.
[11:21.860 --> 11:29.860]  Классическим примером является знаменитая очередь на двух стэках.
[11:29.860 --> 11:33.860]  Ну-ка, поднимите руки, кто сталкивался с такой структурой данных.
[11:33.860 --> 11:35.860]  Я не помню.
[11:35.860 --> 11:37.860]  Ну сейчас напомним.
[11:37.860 --> 11:39.860]  Все, спасибо.
[11:39.860 --> 11:41.860]  Значит, можно заполнять побыстрее.
[11:41.860 --> 11:45.860]  Я думаю, вам вряд ли нужно объяснять, что такое стэк и что такое очередь сами по себе.
[11:45.860 --> 11:47.860]  Ну есть такое подозрение, да?
[11:47.860 --> 11:49.860]  Вот.
[11:49.860 --> 11:51.860]  Так вот.
[11:51.860 --> 11:53.860]  Значит, смотрите, вот есть такая мистическая структура данных.
[11:53.860 --> 11:58.860]  Вот, вы хотите реализовать очередь, а вы умеете только стэк.
[11:58.860 --> 12:03.860]  Вот, у вас там есть какой-то там в кармане черный ящик, который умеет реализовывать стэк.
[12:03.860 --> 12:06.860]  Тогда как его предлагается реализовывать?
[12:06.860 --> 12:08.860]  Тогда предлагает следующее.
[12:08.860 --> 12:10.860]  Заведем два стэка.
[12:10.860 --> 12:12.860]  Вот.
[12:12.860 --> 12:16.860]  Один назовем стэк in, а другой назовем стэк out.
[12:16.860 --> 12:20.860]  И идея будет следующая.
[12:20.860 --> 12:24.860]  То есть, соответственно, когда вам приходит...
[12:24.860 --> 12:28.860]  Ну, что такое вообще очередь, да?
[12:28.860 --> 12:32.860]  Очередь это структура данных, которая поддерживает, по сути, три операции.
[12:32.860 --> 12:36.860]  Пуш, поп и фронт.
[12:39.860 --> 12:41.860]  Что такое операция push?
[12:41.860 --> 12:43.860]  Это добавь элемент в очередь.
[12:43.860 --> 12:45.860]  Операция pop.
[12:45.860 --> 12:47.860]  Достань...
[12:47.860 --> 12:49.860]  То есть, достань первый элемент.
[12:49.860 --> 12:51.860]  То есть, тот элемент, который сейчас находится...
[12:51.860 --> 12:57.860]  Тот из элементов, который сейчас внутри очереди находится, который был туда добавлен раньше всех.
[12:57.860 --> 12:59.860]  А front это...
[12:59.860 --> 13:01.860]  А покажи, что это за элемент?
[13:01.860 --> 13:03.860]  Да, не удаляй, но покажи.
[13:05.860 --> 13:07.860]  Вот.
[13:07.860 --> 13:09.860]  То есть, по сути, что такое в очередь?
[13:09.860 --> 13:14.860]  Ну, у стэка, в общем-то, практически идентичный, на самом деле, интерфейс.
[13:14.860 --> 13:16.860]  Абсолютно.
[13:16.860 --> 13:22.860]  Только разница в том, что достается и показывается не первый добавлен элемент, а последний.
[13:22.860 --> 13:23.860]  Вот.
[13:23.860 --> 13:25.860]  Так вот, так что у нас тут добавлять?
[13:25.860 --> 13:31.860]  То есть, мы говорим, что если мы хотим выполнить push, то мы просто добавляем элемент, соответственно, в stack.im.
[13:31.860 --> 13:33.860]  То есть, push...
[13:35.860 --> 13:37.860]  Вот, добавляем.
[13:37.860 --> 13:39.860]  Вот. Ну, в ауте тоже есть какие-то элементы.
[13:39.860 --> 13:43.860]  И если нам приходит pop или front, мы просто вот добавляем...
[13:43.860 --> 13:45.860]  Удаляем верхний элемент.
[13:49.860 --> 13:51.860]  Чего снизу?
[13:53.860 --> 13:54.860]  Вот так.
[13:54.860 --> 13:56.860]  Ладно, если вам так удобнее, давайте так нарисуем.
[13:58.860 --> 13:59.860]  Вот.
[14:02.860 --> 14:03.860]  Вот.
[14:03.860 --> 14:05.860]  Да, два стаканчика.
[14:05.860 --> 14:06.860]  Вот.
[14:06.860 --> 14:08.860]  Но, вообще, какая проблема?
[14:08.860 --> 14:10.860]  Что делать, если вот этот stack пустой?
[14:12.860 --> 14:13.860]  Да, совершенно верно.
[14:13.860 --> 14:15.860]  То есть, вот классический механизм...
[14:21.860 --> 14:22.860]  Так.
[14:23.860 --> 14:24.860]  Так.
[14:24.860 --> 14:26.860]  Ладно, попробуем таким способом.
[14:26.860 --> 14:27.860]  Так.
[14:27.860 --> 14:28.860]  Ну, допустим.
[14:28.860 --> 14:33.860]  То есть, если вот он пустой, а этот нет, то мы делаем неожиданную вещь.
[14:34.860 --> 14:39.860]  Мы берем все вот эти элементы и по одному перегоняем stack out.
[14:39.860 --> 14:41.860]  Просто вот достаем сверху и перегоняем.
[14:43.860 --> 14:45.860]  Да, в принципе, действительно.
[14:45.860 --> 14:46.860]  Это, да.
[14:46.860 --> 14:51.860]  То есть, можно даже сначала даже не очевидно, почему это вообще имеет какое-то отношение к очереди.
[14:52.860 --> 14:53.860]  Но, на самом деле, да.
[14:53.860 --> 14:58.860]  Если уж говорить о том, как рисовать stack, то есть, как рисовать этот очередь на двух stack,
[14:59.860 --> 15:02.860]  то на самом деле, вот.
[15:03.860 --> 15:04.860]  Вот.
[15:05.860 --> 15:06.860]  То на самом деле можно рисовать так.
[15:06.860 --> 15:07.860]  Что такое очередь?
[15:07.860 --> 15:11.860]  Это когда вы вот добавляете отсюда, достаете вот отсюда, да?
[15:13.860 --> 15:14.860]  Вот.
[15:14.860 --> 15:15.860]  Так вот.
[15:15.860 --> 15:16.860]  Что такое очередь на двух stack?
[15:17.860 --> 15:19.860]  Это на самом деле, да.
[15:19.860 --> 15:21.860]  То есть, вы тут ставите вот такую границу мысленно.
[15:21.860 --> 15:22.860]  Вот.
[15:25.860 --> 15:26.860]  Вот.
[15:27.860 --> 15:28.860]  Ну вот.
[15:28.860 --> 15:31.860]  И говорите, что там вот тут элементы, тут элементы.
[15:31.860 --> 15:35.860]  То есть, просто вот тут у нас некая, то есть, та же очередь, только между ними вот такая перемычка.
[15:36.860 --> 15:38.860]  И как бы добавляете сюда, достаете отсюда.
[15:38.860 --> 15:43.860]  Но если тут все стало пусто, значит, вам нужно сдвинуть вот эту перемычку.
[15:44.860 --> 15:45.860]  Вот желательно вот сюда.
[15:45.860 --> 15:46.860]  Как ее сдвинуть?
[15:46.860 --> 15:47.860]  Да очень просто.
[15:47.860 --> 15:51.860]  Вот эти элементы там по одному, собственно, вот сюда поперекидываем.
[15:53.860 --> 15:54.860]  Вот.
[15:54.860 --> 15:55.860]  Ну, такая вот классическая.
[15:55.860 --> 15:56.860]  Да.
[15:56.860 --> 15:57.860]  Вот.
[15:57.860 --> 15:58.860]  Да.
[15:58.860 --> 16:01.860]  Ну, у меня тут, честно говоря, классическая ассоциация из детства.
[16:01.860 --> 16:02.860]  Но даже интересный соц. вопрос.
[16:02.860 --> 16:05.860]  А кто когда-нибудь смотрел программу «Спокойной ночи, малыши?»?
[16:06.860 --> 16:07.860]  Ух ты!
[16:08.860 --> 16:09.860]  Абсолютная большинство.
[16:12.860 --> 16:13.860]  Ну, я не знаю, да.
[16:13.860 --> 16:16.860]  К сожалению, мы, возможно, там разные немножко выпуски смотрели.
[16:16.860 --> 16:17.860]  Просто в моем детстве был такой.
[16:19.860 --> 16:20.860]  Ну, скажем так.
[16:20.860 --> 16:22.860]  Просто в моем детстве там одним из постоянных персонажей
[16:22.860 --> 16:23.860]  был Амаяк Акапиан.
[16:26.860 --> 16:27.860]  Амаяк Акапиан.
[16:27.860 --> 16:28.860]  Фокусник такой известный.
[16:28.860 --> 16:29.860]  Был когда-то.
[16:29.860 --> 16:30.860]  Известный.
[16:30.860 --> 16:32.860]  Да, сейчас, видимо, уже никто не знает, но не важно.
[16:33.860 --> 16:34.860]  Так вот.
[16:34.860 --> 16:35.860]  Редкий случай.
[16:35.860 --> 16:36.860]  Так вот.
[16:36.860 --> 16:41.860]  Он на самом деле, собственно, в одном выпуске обучал, собственно,
[16:41.860 --> 16:43.860]  вот такому очень простому фокусу.
[16:43.860 --> 16:44.860]  Значит, смотрите.
[16:44.860 --> 16:45.860]  Значит, есть такой…
[16:45.860 --> 16:48.860]  Значит, берем такой цилиндрик с двумя крышечками.
[16:48.860 --> 16:51.860]  Такой цилиндрик, значит обернутый пленочек черным.
[16:51.860 --> 16:52.860]  Вот такой.
[16:52.860 --> 16:53.860]  Вроде оказалось бы его красивый, такойcartoon-цилиндрик.
[16:53.860 --> 16:54.860]  euh- formula.
[16:54.860 --> 16:58.860]  Значит, открываем крышку, значит открываем крышку,
[16:58.860 --> 16:59.860]  кладём туда апельсин.
[16:59.860 --> 17:00.860]  Вот, берём апельсин, кладём.
[17:00.860 --> 17:01.860]  Всё.
[17:01.860 --> 17:02.860]  Закрываем крышечку.
[17:03.860 --> 17:05.860]  Закрываем крышку, колдуем, колдуем там.
[17:05.860 --> 17:08.860]  Там вся aqua слik volk, halaj volkhelite там.
[17:09.860 --> 17:10.860]  Вот.
[17:10.860 --> 17:13.860]  Открываем крышечку и высыпаем оттуда конфеты.
[17:14.860 --> 17:23.020]  вот такой простой фокус но вот но стоит быть вот вот эта картинка в принципе
[17:23.020 --> 17:27.580]  четко собственно рисует собственно в чем секрет фокуса то есть как бы если
[17:27.580 --> 17:30.620]  снять пленочку там оказывается что там просто две склеенные банки в одну из
[17:30.620 --> 17:33.620]  которые заранее написаны конфеты то есть понятно главное тут просто все
[17:33.620 --> 17:38.260]  перевернуть красиво вот но вот собственно вот очередь на двух стеках
[17:38.260 --> 17:44.180]  собственно действительно устроено ровно таким же способом вот соответственно
[17:44.180 --> 17:56.020]  значит к чему мы это все значит а мы это все к следующему вот то есть но то есть
[17:56.020 --> 17:59.780]  в чем интерес почему нам очень интересно такая структура потому что в идеале мы
[17:59.780 --> 18:05.820]  бы хотели чтобы действительно это чтобы все вот эти операции работали за от
[18:05.820 --> 18:15.460]  единицы но мы видим что это не так вот например мы видим что операция да и поп да и фронт то
[18:15.460 --> 18:27.540]  есть push реально работает за от единицы а вот поп и фронт как повезет как повезет потому что в
[18:27.540 --> 18:36.340]  худшем случае от но заметим но с другой стороны тем не менее оказывается что называется говорит
[18:36.340 --> 18:43.860]  что она работает за отн квадрат нельзя да потому что мы заметим что действительно заметим что
[18:43.860 --> 18:50.340]  с каждым элементом на самом деле которые вы работаете будет проделана не более чем четыре
[18:50.340 --> 18:56.780]  операции ну то есть добавить в этот стэк вынуть из этого стэка собственно добавить в этот стэк и
[18:56.780 --> 19:04.660]  удалить стэк на этот раз уже навсегда то есть тогда получается что получается суммарное
[19:04.660 --> 19:12.140]  количество действий не более чем отн то есть утверждение такое что если вы проделали с
[19:12.140 --> 19:22.820]  этим стэком н операции то суммарное время работы этих н операции отн то есть смотрите
[19:22.820 --> 19:27.620]  обнаружилась такая вот тонкая разница да что действительно отдельная операция может работать
[19:27.620 --> 19:35.700]  долго но тем не менее суммарно все работает быстро то есть это то есть можно даже сказать что в среднем
[19:35.700 --> 19:45.320]  эти операции работают за от единиц вот так тоже говорят вот вот на самом деле амортизационный
[19:45.320 --> 19:52.080]  анализ но вот это собственно метод действительно анализа всем точке сейчас расскажу но который
[19:52.080 --> 19:57.640]  позволяет но вот но который действительно позволяет действительно исследовать нер там
[19:57.640 --> 20:02.520]  исследовать струит там структуру данных не методом вот за сколько работает в худшем случае
[20:02.520 --> 20:06.760]  каждый отдельная операция а так сказать суммарно вот да
[20:06.760 --> 20:21.040]  вот нет смотрите вот тут есть одна маленькая терминологическая подлянка спасибо за вопрос
[20:21.040 --> 20:29.440]  то есть дело том что в среднем есть два смысла есть в среднем вот такой то есть когда вот когда
[20:29.440 --> 20:35.600]  средний берется когда вы по сути говорите в среднем по там число операции которые сделаны
[20:35.600 --> 20:41.360]  последовательно с одной структурой а есть средний да он ну там либо по всем данным либо
[20:41.360 --> 20:47.920]  по вероятности то есть там с мыслям от ожидания вот то есть тогда это будем говорить что там то
[20:47.920 --> 20:52.000]  есть скажем какой там квиксорт например который мы там будем изучать возможно даже сегодня
[20:52.000 --> 20:58.520]  соптом там среднем работает за н лога но в том плане что если вы там включаете рандомы в качестве
[20:58.520 --> 21:03.520]  там разделяющего элемента выбираете рандомный то там математическое ожидание времени работы
[21:04.120 --> 21:10.360]  вот да в худшем случае там н квадрат но вот в среднем логен ну и там более точная
[21:10.360 --> 21:15.200]  анализ показывает что там вероятность того что квиксорта вот там очень долго крайне
[21:15.200 --> 21:22.560]  мало вот какая-то как-то так это работает но вот но это все вероятностный анализ то есть там
[21:22.560 --> 21:27.000]  вероятностными анализами мы будем заниматься где-нибудь так это то есть это на втором курсе
[21:27.000 --> 21:32.720]  вот но не потому что там мега сложно просто потому что скажи так там реально придется
[21:32.720 --> 21:37.640]  там оперировать всякими от ожиданиями иногда дисперсиями там и так далее поэтому как бы
[21:37.640 --> 21:42.800]  но поэтому поэтому хочется чтобы просто чтобы это просто изучили на соответствующем предмете
[21:42.800 --> 21:52.400]  вот но вас на втором пути будет поэтому поэтому так вот вот но то есть поэтому мы не про какие
[21:52.400 --> 21:57.720]  вероятности говорить не будем то есть там на первом курсе у нас будет максимум что у нас будет это мы
[21:57.720 --> 22:04.040]  там иногда будем свято верить что там некоторые структуры данных существуют и работают и как-то
[22:04.040 --> 22:09.680]  достаточно хорошо ну то есть честно скажу нас иногда нам придется поверить там существование
[22:09.680 --> 22:15.960]  мега хеш таблицы которая умеет там добавлять себя удалять искать элементы за вот единиц вот
[22:15.960 --> 22:23.480]  придется вот свято верить нет проблема в том что структур данных то вероятность тому от единицы
[22:23.480 --> 22:29.360]  по вероятности будет ну да то есть вот с мыслям от ожидания да то есть нет вы конечно там на втором
[22:29.360 --> 22:33.760]  курсе изучим действительно как откуда это вообще может браться там красивая структура данных с
[22:33.760 --> 22:40.920]  не менее красивым анализом на самом деле вот но тем не менее но у нас среднее будет вот другое
[22:40.920 --> 22:46.880]  значит смотрите давайте вот о том о другом подробнее значит смотрите значит потому что
[22:46.880 --> 22:51.000]  действительно потому что если говорить о то есть если я вот тут наговорил действительно как-то
[22:51.000 --> 22:58.600]  работает в общем вот сейчас на этом примере мы рассмотрим три на самом деле способа действительно
[22:58.600 --> 23:02.880]  амортизационного анализа то есть вполне себе такие официальные техники собственно которые
[23:02.880 --> 23:18.640]  можно даже в статьях встретить вот значит что нас вообще интересует и так значит смотрите
[23:18.640 --> 23:33.440]  ну да значит способ номер раз значит внимание анализ просто в среднем вот давайте так его и назовем
[23:33.440 --> 23:45.760]  что это значит это означает следующее что предположим что у нас есть структура данных
[23:45.760 --> 23:55.600]  и мы выполнили несколько там допустим сколько-то операции с ней желательно с нуля эти операции
[23:55.600 --> 24:05.200]  имели стоимости ц1 но в смысле вот реальные времена там допустим ц1 ц20 34 и так далее цен
[24:05.200 --> 24:23.600]  вот так вот что такое анализ среднем анализ среднем он нам говорит что мы хотим действительно доказать
[24:23.600 --> 24:29.120]  что действительно средняя то есть до каждой из этих операций может быть конкретно там какая-нибудь
[24:29.120 --> 24:35.800]  большая но например мы говорим что самый тупой что ц1 плюс ц2 плюс ц3 плюс и так далее плюс цн
[24:35.800 --> 24:46.160]  поделить на n оно не превосходит чего-нибудь ну как какой-нибудь красивого ну там я не знаю
[24:46.160 --> 24:53.680]  вот там если глобально если так вот глобально от единицы от логен там ну и так далее ну то есть
[24:53.680 --> 24:58.360]  например если операция средняя не превосходит логарифм средне аэритмическое то как бы мы
[24:58.360 --> 25:05.080]  говорим что суммарно эти операции выполняются за n логан да но имеется в виду конечно да то есть
[25:05.080 --> 25:09.760]  в идеале то есть обычно имеется в виду что для любого префекса этих операций выполнено что-то
[25:09.760 --> 25:16.720]  аналогичное вот то есть вот в нашем случае на самом деле то что мы сейчас проговаривали вот
[25:16.720 --> 25:23.600]  на пальцах да это практически вот анализ среднем то есть мы сказали что n вот если мы выполнили
[25:23.600 --> 25:34.360]  n пушей там фронтов и попов то мы суммарно выполнили от n операции почему ну потому что
[25:34.360 --> 25:39.520]  помимо вот от единицы операции которые там затрачены непосредственно на собственно вот
[25:39.520 --> 25:45.080]  там добавление доставания там и стека и там или там залезание в него и доставание фронта да то
[25:45.080 --> 25:52.240]  все остальные операции это перетаскивание элементов из одного стека в другой но суммарно мы из одного
[25:52.240 --> 25:57.520]  стека в другой перетащили не более чем да не более чем пуши то есть не более чем n элементов
[25:57.520 --> 26:03.760]  поэтому получается суммарно мы выполнили не более чем от n действий но в среднем получается
[26:03.760 --> 26:13.000]  на каждое приходится не более чем от единицы вот то есть это вот такой один из таких простых
[26:13.000 --> 26:21.680]  методов вот но конечно он работает далеко не всегда потому что чтобы он так красиво работал
[26:21.680 --> 26:29.720]  конечно это желательно чтобы действительно все операции хотели оценивать одинаково вот то есть
[26:29.720 --> 26:34.520]  на самом деле на самом деле у нас мы часто будем рассматривать структуры данных в которых
[26:34.520 --> 26:41.920]  каждая операция даже в амортизированном смысле будет работать заразной асимптотики но вот
[26:41.920 --> 26:50.240]  например там будет у нас скажем там куча фибоначчи например не это нормально ой блин это
[26:50.240 --> 27:00.240]  софт хип не куча фибоначчи сравнению с ним это простая вещь достаточно вот в чем ее фишка да то
[27:00.240 --> 27:06.320]  есть там тоже все это там вот забирая вперед вот рекламируем скажем что что такое куча фибоначчи
[27:06.320 --> 27:16.080]  это куча то есть структура данных которая позволяет делать операции insert соответственно
[27:16.080 --> 27:31.280]  экстракт мин а ну где тмин конечно фибоначчи нет вот ну ладно пока это любая куча ну ладно
[27:31.280 --> 27:37.280]  почти любая на самом деле нас по начинаю сразу почти сразу будут интересовать сливаемые кучи
[27:37.280 --> 27:43.600]  что значит сливаемые кучи это означает что мы можем там в любой момент взять две кучи и
[27:43.600 --> 27:51.640]  создать из них одну но объединить по сути да ну понятно то есть если мы берем классические две
[27:51.640 --> 27:55.520]  кучи то как бы будут проблемы то как бы потому что вам буквально придется там по одному элементику
[27:55.520 --> 28:08.240]  из одной кучи в другую добавлять вот ну вот то есть на самом деле вот это вот это
[28:08.240 --> 28:15.680]  интерфейс практически любой уважающий себя сливаемой кучи не уважающий себя тоже вот
[28:15.680 --> 28:24.360]  да это вот почему-то называется meldable hips хотя конечно в литературе можно и mergeable hips но
[28:24.400 --> 28:32.600]  вообще как бы это объединение двух куч там обычно обозначается словом meld вот ну и
[28:32.600 --> 28:41.000]  теперь вопрос за ко всем точку это будет работать нет ну зависит от того какую кучу возьмете у нас
[28:41.000 --> 28:49.360]  этих куч будет много нет откуда нет вот не надо говорить куча куч куча куча там ну как бы как бы
[28:49.360 --> 28:55.880]  для вашей наверное декартовой деревья декартовых деревьев это как бы там все-таки да ну вот то есть
[28:55.880 --> 29:03.920]  как бы немножко не то поэтому но да да да ну правда да ну правда для меня это дерево отрезков
[29:03.920 --> 29:13.000]  декартовых деревьев все равно но это уже другой вопрос но вообще да но да но это уже детали до
[29:13.000 --> 29:18.880]  этого мы тоже доживем но вот но как реализовывать этот интерфейс ну что-то зависит то есть если
[29:18.880 --> 29:28.440]  брать тупую кучу то здесь конечно там слияние будет за n log n работать если значит там но там
[29:28.440 --> 29:32.600]  могут быть у нас там будут какие-нибудь там левацкая куча какая-нибудь например у которой
[29:32.600 --> 29:39.160]  все эти операции но кроме диетмина конечно будут работать за логарифом то есть какая-нибудь будет
[29:39.160 --> 29:46.520]  левацкая куча то есть будет там логарифом логарифом тут будет ладно вот единицы тут будет
[29:46.520 --> 30:00.240]  логарифом да причем до внимания это буду это будет честная оценка вот единицы это единица да
[30:00.240 --> 30:06.720]  нет я рисовал единицу видимо не очень не очень вряд ли и нарисовал ну как бы это будет подвешено
[30:06.720 --> 30:11.440]  там какой-то двойничное дерево поэтому как бы да поэтому получить сам минимум за вот единица
[30:11.440 --> 30:24.680]  без проблем так вот а будет куча фибонач левацкая бенемиальная нет это принципиально разные вещи
[30:24.680 --> 30:35.480]  кстати не не бенемиальный все предельно честно да ну и ну и в бенемиале и в левацкой но это
[30:35.480 --> 30:42.720]  принципиально разные кучи там с принципиально разными подходами ну вы увидите так не ладно вы
[30:42.720 --> 30:48.040]  пока вы пока не зависаете это тоже нас там скорее всего там где-нибудь там это тоже нас достаточно
[30:48.040 --> 30:55.880]  хотя хотя да тут надо думать что нас скоро ждет действительно кучи или фурьятина ну ладно
[30:55.880 --> 31:12.960]  но скажем так смотрите ну скажем так мы будем решать задачу быстрого перемножения в первую
[31:12.960 --> 31:20.480]  очередь многочленов то есть мы захотим их перемножать за ну в идеале н логан карацуба не
[31:20.480 --> 31:30.720]  карацуба это не поможет начнем бы конечно с него да так ну там ну как говорится вот зачем вот вы
[31:30.720 --> 31:35.720]  вот порешаете рекуррент и мы собственно по нот и нот и мы потом с вами узнаем собственно
[31:35.720 --> 31:39.720]  просто своими руками убедимся за сколько там карацуба реально работает потому что тоже
[31:39.720 --> 31:46.640]  типичный пример и по которым появляется рекуррента вот вот но на самом деле там основной алгоритм это
[31:46.640 --> 31:52.000]  быстрое преобразование фурье но самое главное там фишка в том что с умножением многочленов там
[31:52.000 --> 31:57.000]  связано много чего еще но в конце концов быстрая длинная рифметика там быстрое умножение быстрое
[31:57.000 --> 32:01.720]  деление там ну там в общем называется масса всего поэтому это у нас такой очень большой блок будет
[32:01.720 --> 32:09.600]  но не слава там философский вопрос кстати за что оно работает ну то есть fft там без
[32:09.600 --> 32:19.480]  условно есть но если уж говорить об этом то знаете то там скорее всего в разные подкрутки есть но
[32:19.480 --> 32:25.600]  нет смотрите тут нет тут я дам датчет мы опять все отвлекаемся но тут я дам такой комментарий что
[32:25.600 --> 32:30.640]  не знаю то же вместо кома но то есть вот мой скомандик по и си пи си гоши чебанов он там
[32:30.640 --> 32:35.320]  свое время это откопал действительно какую-то библия там некую сишную библиотеку которая умеет
[32:35.320 --> 32:43.720]  умножать числа там длины миллион за вот-вот вот-вот столичка вот-вот там 0.0001 там по-моему что-то
[32:43.720 --> 32:50.640]  в этом роде или там 0.0001 не помню но он говорит что он там открывал собственно исходный код то
[32:50.640 --> 32:55.640]  есть на самом деле там действительно какая-то черная магия из дефайнов в которой там можно
[32:55.640 --> 33:01.480]  покопать что в каких-то случаях делается фуриатина в каких-то случаях делается карацуба ну и конечно
[33:01.480 --> 33:06.040]  в каких-то достаток относительно до какого-то момента естественно делается просто столбиком
[33:06.040 --> 33:11.120]  ну потому что действительно оказывается что там действительно если у вас там многочлены длины
[33:11.120 --> 33:15.440]  10 или числа то гораздо легче уже пробежаться и перемножить их столбиком чем там изобретать
[33:15.440 --> 33:22.000]  какой-то фурия то есть просто по константе вот хотя у фурия то может константа не самая плохая на
[33:22.000 --> 33:27.600]  самом деле но все-таки там какие-то комплексные числа повылезают поэтому но вот вот там вот вот
[33:28.080 --> 33:32.560]  в этой библиотеке люди прям вот очень сильно там заморочились там прям дефайны подгоняли
[33:32.560 --> 33:36.760]  чтобы там максимально все ускорялось и так далее и собственно много в том преуспели поэтому вполне
[33:36.760 --> 33:45.000]  вероятно что в питоне тоже на самом деле зашито что-то подобное вот так вот но это но вот но это
[33:45.000 --> 33:50.120]  так это называется что опять анонсы что нас будет но вот что нас ждет не будем на это отвлекаться
[33:50.120 --> 33:55.840]  потому что сейчас вот нам нужен амортизационный анализ так вот в чем смысл вот если леватская куча
[33:55.840 --> 34:03.000]  или биномиальная куча там то есть да они вот работают вот за столько но есть ставка куча
[34:03.000 --> 34:17.640]  фибоначи будет работать за вот столько то есть все операции кроме да кроме доставания минимум
[34:17.640 --> 34:30.880]  будут работать за единицу правда это в внимание амортизированном смысле как это вообще понять то
[34:30.880 --> 34:35.760]  есть да то есть в принципе да никто не гарантирует что там слия каждое слияние будет реально за
[34:35.760 --> 34:45.000]  от единицы работать это не так да но а что такое в данном случае в среднем видите то есть операции
[34:45.080 --> 35:05.320]  да суть именно такая да то есть по большому счету то есть анализ в среднем можно было бы
[35:05.320 --> 35:12.040]  заменить более точно было бы сказать на анализ в сумме то есть и в сумме так и сказать что если у
[35:12.040 --> 35:18.520]  вас там вот были там была пустая куча или правильно говорить набор пустых куч изначально был у вас
[35:18.520 --> 35:26.320]  трог там пустых куч там n штук например и вы в них сделали а инсертов б экстракт минов там допустим
[35:26.320 --> 35:32.280]  ци гет минов или д мэлдов причем гарантируется что у нас суммарно в кучах было не более чем
[35:32.280 --> 35:40.080]  н элементов то тогда суммарно все эти действия будут работать не более чем вот суммарно то
[35:40.080 --> 35:46.240]  есть вот ц1 плюс ц2 плюс и так далее там плюс допустим цн вот если у нас н действия было они
[35:46.240 --> 36:00.880]  будут работать не более чем за от а плюс б на логарифом н плюс ц плюс д в данном случае вот то
[36:00.880 --> 36:06.600]  есть это такой такой анализ такой анализ в сумме так сказать и в общем-то он иллюстрирует вообще в
[36:06.600 --> 36:10.880]  чем глубокий смысл на самом деле то есть когда мы то есть как бы то есть аemos амортизационный
[36:10.880 --> 36:16.000]  анализ когда мы не пытаемся анализировать отдельно каждую операцию и худшие случаи когда мы
[36:16.000 --> 36:22.640]  пытаемся анализировать их какой-то взаимоисвестие в сумме вот то есть принципе дам может быть
[36:22.640 --> 36:27.260]  и какие-нибудь еще случаи предположим что там то есть допустим если надо говорить что у нас
[36:27.260 --> 36:32.960]  есть учетные стоимости допустим что там первая оператором первая операция работает за корень
[36:32.960 --> 36:38.960]  там вторая операция работает за логарифом, третья там работает за, ну ладно, уже за обратную функцию
[36:38.960 --> 36:50.960]  окирмана какую-нибудь. Ну и рядом тут операция, которая работает за квадрат. Очень весело. Вот. Да, то есть тогда, то есть как бы что означает, что учетная стоимость
[36:50.960 --> 36:56.960]  этих операций таких? Ну это означает, что да, если первых было a, вторых b, третьих c, четвертых d, значит суммарная
[36:56.960 --> 37:05.960]  стоимость, то есть по сути это прям определение практически, что если операция была выполнена вот там abcd для любых abcd, ну там адекватных, то
[37:05.960 --> 37:14.960]  ну адекватных в том плане, что там понятно, что не могло быть так, что, скажем, вы там добавили в кучу 5 элементов, а достали 8, да? Вот. Ну там какие-то вот
[37:14.960 --> 37:22.960]  такие вещи, то получается вот так. Вот. И на самом деле это тоже полезно писать, потому что да, вот иногда бывает, что некоторые операции работают
[37:22.960 --> 37:30.960]  за n квадрат, но тем не менее структура данных может быть полезной, например, такая, если вы знаете, что вот этих операций мало.
[37:32.960 --> 37:35.960]  Если их две. Вот, да.
[37:35.960 --> 37:38.960]  Мы уже здесь, как бы, рассуждаем все равных по симптомам.
[37:38.960 --> 37:39.960]  Да.
[37:41.960 --> 37:43.960]  Ну понятно, что о, конечно.
[37:43.960 --> 37:49.960]  Так, а что это значит? То есть у нас здесь получается несколько современных по сути.
[37:49.960 --> 37:56.960]  Да. Ну а означает это буквально то же самое. То есть мы будем говорить, что алгоритм работает, то есть суммарно эти операции работают за от столько.
[37:56.960 --> 38:07.960]  Это означает, что существует, не зависящая ни от каких abcd, великая константа какая-нибудь, какую мы букву не использовали, там f, да?
[38:07.960 --> 38:16.960]  Что количество действий, то есть для любых попавшихся abcd и для любого там, то есть если бы это выполнили какие-нибудь там n операции, допустим,
[38:16.960 --> 38:26.960]  если там a были первых, b были вторых, c третьих, d четвертых, любые abcd, и тогда количество действий не превосходит f умножить на вот это вот все.
[38:26.960 --> 38:31.960]  Ну, это вроде очевидно, потому что мы можем разбить это на четыре оценки отдельно.
[38:31.960 --> 38:36.960]  В каждой подобрать свою константу, возьмем из них максимум, и оно в магическом образе.
[38:36.960 --> 38:38.960]  Сейчас, сейчас, сейчас, сейчас, сейчас.
[38:38.960 --> 38:40.960]  Мы же не можем оценки разбивать, потому что мы не можем доставать.
[38:40.960 --> 38:43.960]  Нет, просто, нет, смотрите, просто, нет.
[38:43.960 --> 38:44.960]  Нет.
[38:48.960 --> 38:51.960]  Нет, это, нет, это не о, понимаете? Нет, тут проблема такая.
[38:51.960 --> 38:55.960]  Нет, это не, тут как бы abcd, это не совсем, это не константы.
[38:57.960 --> 38:59.960]  Это количество операций, которые вы выполнили.
[39:10.960 --> 39:12.960]  Ну, как отдельно, понимаете?
[39:12.960 --> 39:17.960]  Как бы смысл амортизационного анализа в том, что иногда отдельно вы их просто оцените хуже.
[39:17.960 --> 39:19.960]  То есть, конечно, можете.
[39:19.960 --> 39:25.960]  То есть, смотрите, если вы оценили, что там вот эта операция в худшем случае делается за корень и zen,
[39:25.960 --> 39:30.960]  это в худшем случае за алгорифм, это в худшем случае прям в худшем на этот раз за термана,
[39:30.960 --> 39:36.960]  а это в худшем за n квадрат, то вы тоже можете сказать, естественно, что, то есть, тоже будет верно, что суммарно это работает за вот столько.
[39:36.960 --> 39:45.960]  Да, то есть, как бы, как бы, условно говоря, для этого, да, то есть, достаточно оценить, если будет оценено в худшем случае.
[39:45.960 --> 39:48.960]  Но просто фишка в том, что это не всегда необходимо.
[39:48.960 --> 39:54.960]  То есть, может быть так, что, действительно, в худшем случае эта операция может и за куп работать,
[39:54.960 --> 40:00.960]  но, то есть, если суммировать по всем операциям, то окажется адекватно.
[40:01.960 --> 40:02.960]  Вот.
[40:05.960 --> 40:08.960]  А это так, ну, это константа из Ошки.
[40:08.960 --> 40:14.960]  В идеале тут должна быть константа С большая, но я тут вот из эколизии с этой буквкой только ее не поставил.
[40:17.960 --> 40:19.960]  Так что вот такой вот смысл.
[40:19.960 --> 40:21.960]  То есть, хочется вот так.
[40:23.960 --> 40:25.960]  То есть, в данном случае вот оказываю.
[40:25.960 --> 40:26.960]  И иногда это действительно помогает.
[40:26.960 --> 40:31.960]  Потому что, если вы знаете, что там n², то есть, тут этих операций мало, то, в принципе, можно иногда использовать.
[40:32.960 --> 40:34.960]  Да, в общем-то, и сама куча фибоначи.
[40:34.960 --> 40:36.960]  Видите, например, что это означает?
[40:36.960 --> 40:44.960]  В принципе, это означает, например, вот если внимательно посмотреть, то вот окажется, что, ну, например, вот сколько вы будете, есть у вас задача.
[40:44.960 --> 40:50.960]  Допустим, вы решили добавить в кучу n элементов, а потом достать, а потом найти в них 3 минимума, да?
[40:50.960 --> 40:52.960]  Тогда смотрите.
[40:52.960 --> 40:54.960]  То есть, как это можно делать?
[40:54.960 --> 40:59.960]  Говорите, если вы используете вашу классическую там, скажем, вот леватскую кучу, то что получается?
[40:59.960 --> 41:06.960]  То получается n лог n, потому что вы n раз добавили за логарифом, и потом 3 раза экстракт добавили.
[41:07.960 --> 41:18.960]  Но тут вы понимаете, что, наверное, где-то в 7-8 классе, наверное, вы писали подобную задачу, как-то еще не зная даже понятия куча, и по асимптотике у вас получалось лучше, правда?
[41:18.960 --> 41:19.960]  Да.
[41:19.960 --> 41:22.960]  Я еще не знаю параметры в классе.
[41:22.960 --> 41:23.960]  Да?
[41:23.960 --> 41:24.960]  Нет.
[41:24.960 --> 41:25.960]  Ну вот.
[41:25.960 --> 41:26.960]  А, ну вот, хорошо.
[41:26.960 --> 41:28.960]  Ну когда вы, хорошо, когда вы…
[41:28.960 --> 41:29.960]  Чего?
[41:29.960 --> 41:32.960]  Ну, 3 минимума, может, вы не писали, но, я думаю, вы догадываетесь, да?
[41:32.960 --> 41:34.960]  Да, может быть, 2 минимума вы писали.
[41:34.960 --> 41:35.960]  Находишь?
[41:35.960 --> 41:36.960]  Да.
[41:36.960 --> 41:37.960]  Да, ну, по сути, да.
[41:37.960 --> 41:41.960]  То есть, известно, что 3 минимума можно найти за oatn, правда?
[41:41.960 --> 41:44.960]  Ну, практически там, ну, там как угодно.
[41:44.960 --> 41:47.960]  Найти 1 минимум, действительно удалить, найти второй или второй минимум.
[41:47.960 --> 41:48.960]  Найти 1 минимум, действительно удалить, найти второй.
[41:48.960 --> 41:51.960]  Или там 3 итерации пузырька какого-нибудь, там все шо угодно.
[41:51.960 --> 41:52.960]  Вот.
[41:52.960 --> 41:54.960]  То есть, поэтому да.
[41:54.960 --> 41:59.960]  Но с другой стороны, если бы вы доставали не 3 минимума, а n пополам минимумов, то,
[41:59.960 --> 42:03.960]  конечно, вот эта штука была бы лучше, чем если бы вы там по одному эти минимумы
[42:03.960 --> 42:04.960]  доставали.
[42:04.960 --> 42:05.960]  Вот.
[42:05.960 --> 42:07.960]  Ну вот, оказывается, на самом деле.
[42:07.960 --> 42:09.960]  Нет, ну, отсортировать дай-то.
[42:09.960 --> 42:13.960]  Ну, это другой вопрос уже, да.
[42:13.960 --> 42:19.960]  А можно воспользоваться, для 3 минимумов теперь можно воспользоваться кучей фибоначи.
[42:19.960 --> 42:26.960]  Потому что, смотрите, куча фибоначи позволит вам это сделать за oatn.
[42:26.960 --> 42:32.960]  Потому что вы добавляете за oat1 элементы, а достаёте минимум за логарифм.
[42:32.960 --> 42:36.960]  То есть, у вас получится n плюс 3 логарифма.
[42:36.960 --> 42:38.960]  Ну, то есть, n.
[42:38.960 --> 42:41.960]  Да, а это oatn, как мы знаем, да.
[42:41.960 --> 42:42.960]  Вот.
[42:42.960 --> 42:45.960]  То есть, видите, получается такая вот нодка.
[42:45.960 --> 42:49.960]  То есть, правда, это будет амортизировано.
[42:49.960 --> 42:56.960]  То есть, реально, особенно первый поиск минимума у вас будет работать ой, как не за логарифм.
[42:56.960 --> 42:59.960]  Ну ладно, сам поиск минимума, конечно, не проблема.
[42:59.960 --> 43:02.960]  Потому что я вам так открою страшную тайну.
[43:02.960 --> 43:07.960]  Потому что структура, действительно, куча фибоначи, она, действительно, очень хитро будет работать.
[43:07.960 --> 43:11.960]  Потому что операция INSERT, вот по началу особенно, будет устроена очень просто.
[43:11.960 --> 43:13.960]  Все элементы будут находиться в двусвязанном списке.
[43:13.960 --> 43:17.960]  И когда вы будете делать INSERT, просто элемент будет в этот двусвязанный список добавляться.
[43:17.960 --> 43:18.960]  Всё.
[43:18.960 --> 43:20.960]  А, и ещё поддерживаться минимум.
[43:20.960 --> 43:22.960]  Ну, в виде там, где находится минимум.
[43:22.960 --> 43:24.960]  Всё.
[43:24.960 --> 43:32.960]  Пока вы не будете делать ничего, кроме INSERT и GetMin, куча фибоначи буквально ничего больше делать не будет.
[43:32.960 --> 43:39.960]  Зато, как только вы потребуете ExtractMin, она скажет так, погодите, вернусь через 15 минут.
[43:39.960 --> 43:46.960]  И начнётся там тотальный перестрой с каких-то страшных деревьев.
[43:46.960 --> 43:52.960]  То есть там, скорее всего, особенно первый раз, точно там линия каких-то операций будет сделана.
[43:52.960 --> 43:55.960]  Но нас это не волнует.
[43:56.960 --> 44:04.960]  Потому что мы гарантируем, что, на самом деле, суммарно, ABCD операции будут выполнены вот за какое-то время.
[44:04.960 --> 44:08.960]  Просто константа, возможно, будет чуть больше, чем вы ожидали.
[44:08.960 --> 44:13.960]  То есть, когда вы думаете, так, отлично, вы сделали INSERT за две секунды.
[44:13.960 --> 44:16.960]  Видимо, константа две секунды.
[44:16.960 --> 44:17.960]  Так вот, фишка такая.
[44:17.960 --> 44:19.960]  Константа, на самом деле, не две секунды.
[44:19.960 --> 44:23.960]  Константа, на самом деле, 23 секунды.
[44:23.960 --> 44:26.960]  Просто произошло следующее.
[44:26.960 --> 44:31.960]  Просто, на самом деле, две секунды INSERT тратит прямо сейчас.
[44:31.960 --> 44:37.960]  А в будущем он говорит, что на каждую операцию, на самом деле, у вас там будет ещё есть, теоретически, 21 секунда.
[44:37.960 --> 44:47.960]  И когда вы там добавили 100 000 операций, у вас там получается 210 000 секунд, которые он имеет право потом себе как-нибудь использовать.
[44:47.960 --> 44:48.960]  И он это будет делать.
[44:48.960 --> 44:57.960]  То есть, гарантируется, что на 100 000 операций он потратит не более, чем 230 000 секунд.
[44:57.960 --> 44:58.960]  Ну ладно, умножь на логарифм.
[45:03.960 --> 45:04.960]  Вот.
[45:04.960 --> 45:08.960]  Ну, кстати, это ещё одна иллюстрация того, о чём мы тут разговариваем.
[45:08.960 --> 45:13.960]  То есть, мы разговариваем о том, что, действительно, у нас есть какая-то верхняя оценка.
[45:13.960 --> 45:19.960]  Да, но это именно верхняя оценка за счёт того, что некоторые операции могут временно сэкономить прямо сейчас.
[45:19.960 --> 45:23.960]  То есть, они сработают быстрее, чем в этой оценке ожидается.
[45:23.960 --> 45:29.960]  Но это будет за счёт того, что к некоторому критическому моменту будет сэкономлено достаточное количество времени.
[45:29.960 --> 45:32.960]  И это время будет использовано потом.
[45:32.960 --> 45:33.960]  Вот.
[45:33.960 --> 45:34.960]  Это ещё одна иллюстрация.
[45:34.960 --> 45:38.960]  И, кстати, на самом деле, это приводит нас ко второму методу.
[45:39.960 --> 45:42.960]  Вот, за этим английском языке есть такое слово «straightforward».
[45:42.960 --> 45:45.960]  Такой прямолинейный, такой туболомный.
[45:45.960 --> 45:50.960]  То есть, да, в некоторых структур, которые вы просто, когда методом пристального взгляда про них всё понятно,
[45:50.960 --> 45:57.960]  ну, вот, например, как, собственно, у нас для очереди двух стерров, можно анализировать вот прямо так.
[45:57.960 --> 46:01.960]  Но иногда, конечно, это достаточно сложно.
[46:01.960 --> 46:03.960]  То есть вот в кучах нот.
[46:03.960 --> 46:09.960]  Поэтому в кучах, например, или там ещё в некоторых сортировках мы будем использовать немножко другое.
[46:09.960 --> 46:12.960]  Что же мы будем использовать?
[46:12.960 --> 46:13.960]  Чего?
[46:13.960 --> 46:15.960]  Банковский метод.
[46:15.960 --> 46:16.960]  Ну, да.
[46:16.960 --> 46:17.960]  Ну, и его тоже.
[46:17.960 --> 46:20.960]  Ну, я сейчас расскажу на самом деле два метода.
[46:20.960 --> 46:24.960]  Скажем так, первым методом очень удобно думать вот в этих терминах.
[46:24.960 --> 46:29.960]  А вторым методом очень удобно писать формальные доказательства.
[46:29.960 --> 46:30.960]  Вот.
[46:30.960 --> 46:32.960]  Ну, то есть на самом деле суть, да.
[46:42.960 --> 46:44.960]  От балды, если честно.
[46:44.960 --> 46:49.960]  Ну, то есть, как бы, на самом деле, везде, когда мы тут пишем операцию, значит подразумеваем О.
[46:49.960 --> 46:50.960]  Да.
[46:50.960 --> 46:51.960]  Да, мы всегда подразумеваем.
[46:51.960 --> 46:52.960]  Да, давайте напишем.
[46:52.960 --> 46:53.960]  На самом деле...
[46:53.960 --> 46:56.960]  Вот единицы, а там логом стоит, кстати.
[46:56.960 --> 46:57.960]  Да.
[46:57.960 --> 46:58.960]  Одного стола.
[46:58.960 --> 46:59.960]  Да, да, да, да, да.
[46:59.960 --> 47:03.960]  Это просто исключительно моя небольшая неаккуратность.
[47:03.960 --> 47:04.960]  Вот.
[47:04.960 --> 47:06.960]  То есть, как бы, да, я тут...
[47:06.960 --> 47:09.960]  Да, ну, как вы видите, я тут не стремлюсь к тотальному формализму.
[47:09.960 --> 47:10.960]  Вот.
[47:10.960 --> 47:16.960]  То есть, конечно, можно тут построить красивое там абсолютно формальное знание, но как бы мы тут сейчас говорим не о том, как строится...
[47:16.960 --> 47:18.960]  То есть, мы сейчас все-таки говорим об идеях.
[47:18.960 --> 47:22.960]  То есть, у нас курс все-таки об идеях, которые за этим стоят и как это все придумывать.
[47:22.960 --> 47:23.960]  Вот.
[47:23.960 --> 47:24.960]  То есть, конечно...
[47:24.960 --> 47:34.960]  Ну, поэтому там совсем до идеального формализма может доводить и не будем, хотя, конечно, в голове всегда должны держать, что вы должны это уметь делать.
[47:34.960 --> 47:36.960]  То есть, да, иногда это будет...
[47:36.960 --> 47:51.960]  Скажем так, когда вы там говорите, что когда вы выскакиваете в коридор, видите огнетушитель, говорите, решение существует, то есть вы должны быть готовы к тому, что если вас спросят, а что за решение, вы должны как бы продемонстрировать, как снять огнетушитель со стены, как его воспользоваться.
[47:51.960 --> 47:53.960]  Вот.
[47:53.960 --> 48:00.960]  То есть, как бы, да, если он вот, поэтому, то есть, выдана вот, то есть, как бы на экзамене, то есть, всегда такие вопросы могут возникнуть.
[48:00.960 --> 48:02.960]  Вот.
[48:02.960 --> 48:04.960]  Так вот.
[48:04.960 --> 48:06.960]  Итак, значит...
[48:06.960 --> 48:08.960]  Значит, перейдем к второму методу.
[48:08.960 --> 48:14.960]  Значит, это метод бухгалтерского учета.
[48:20.960 --> 48:22.960]  Мы точно туда вышли?
[48:23.960 --> 48:25.960]  А что не так?
[48:30.960 --> 48:32.960]  Чего?
[48:32.960 --> 48:34.960]  Да нет.
[48:34.960 --> 48:40.960]  Не, ну, как бы, реклама 1С тут уже самим фактом того, что мы в офисе 1С находимся.
[48:40.960 --> 48:44.960]  А метод бухгалтерского учета это абсолютно реальная терминология.
[48:44.960 --> 48:49.960]  Ну, там по-разному можно назвать метод бухгалтерского учета, метод моменток там.
[48:50.960 --> 48:54.960]  То есть, на самом деле, интерпретации, анализы монеток разные.
[48:54.960 --> 48:58.960]  А смысл, на самом деле, следующий.
[48:58.960 --> 49:01.960]  Значит, смотрите, в чем будет смысл?
[49:01.960 --> 49:06.960]  То есть, смотрите, вот у нас есть реальные стоимости, да?
[49:06.960 --> 49:13.960]  Ну, типа, вот, времена С1, С2, С3, С4 и так далее, С.
[49:14.960 --> 49:16.960]  Что это?
[49:16.960 --> 49:19.960]  Это, допустим, это реальные стоимости.
[49:19.960 --> 49:25.960]  То есть, опять, у нас есть структура данных, и мы с нуля выполнили N операции, да?
[49:25.960 --> 49:33.960]  А теперь мы говорим, ну, это вот реальные времена.
[49:33.960 --> 49:37.960]  Или реальная стоимость.
[49:37.960 --> 49:42.960]  А теперь, смотрите, а теперь идея такая.
[49:42.960 --> 49:44.960]  Мы будем...
[49:44.960 --> 49:49.960]  Значит, у нас, помимо этих операций, будут еще монетки.
[49:51.960 --> 49:54.960]  И мы эти монетки будем...
[49:54.960 --> 49:57.960]  Смотрите, мы будем эти монетки получать.
[49:57.960 --> 50:01.960]  Вот получено, будем говорить, что у нас там за каждую операцию выполняемую, да?
[50:01.960 --> 50:04.960]  Мы будем получать какое-то количество монеток.
[50:05.960 --> 50:14.960]  Допустим, там плюс, там, тут получено P1, плюс P2, плюс там P3, плюс P4, плюс Pn.
[50:14.960 --> 50:18.960]  Ну, просто получать монетки корешать не интересно.
[50:18.960 --> 50:20.960]  Но теперь фишка такая.
[50:20.960 --> 50:23.960]  А еще мы будем...
[50:23.960 --> 50:27.960]  А еще мы будем тратить эти монетки.
[50:28.960 --> 50:31.960]  Так, вот у нас, да.
[50:35.960 --> 50:36.960]  Вот.
[50:36.960 --> 50:38.960]  Да, то есть у нас такая, ну вот.
[50:38.960 --> 50:42.960]  То есть, ладно, тут тоже будет какое-то количество монеток потрачено.
[50:42.960 --> 50:44.960]  Значит, в чем фишка?
[50:50.960 --> 50:52.960]  Значит, зачем мы это вообще делаем?
[50:52.960 --> 50:58.960]  Значит, идея будет заключаться в том, что мы будем...
[50:58.960 --> 51:02.960]  Ну вот, что мы будем говорить, что когда мы тратим монетки...
[51:02.960 --> 51:04.960]  То есть зачем? Мы не просто так тратим.
[51:04.960 --> 51:07.960]  Мы монетки не просто так тратим.
[51:08.960 --> 51:10.960]  Фактически мы будем их...
[51:10.960 --> 51:15.960]  Мы ими будем оплачивать то, что вот тут какая-то операция длилась долго,
[51:15.960 --> 51:19.960]  но вот некоторые ее отдельные моменты вы, пожалуйста, не считаете.
[51:20.960 --> 51:21.960]  Вот.
[51:21.960 --> 51:27.960]  Как говорится, вот, пожалуйста, ты вот эти вот, скажем, вот эти вот 57 действий ты не считай в общем времени,
[51:27.960 --> 51:29.960]  а я тебе за это дам 57 монеток.
[51:30.960 --> 51:32.960]  Вот такой смысл.
[51:33.960 --> 51:35.960]  Как это работает?
[51:35.960 --> 51:37.960]  Вот давайте, то есть пока это, конечно, абсолютно абстрактно.
[51:37.960 --> 51:40.960]  Сейчас я покажу, как это работает на примере двух стэков.
[51:42.960 --> 51:43.960]  Чего?
[51:43.960 --> 51:44.960]  Уже спладывается понимание.
[51:44.960 --> 51:45.960]  Да, но сейчас я покажу.
[51:45.960 --> 51:48.960]  То есть нет, просто это действительно очень красивый анализ,
[51:48.960 --> 51:51.960]  которым вот действительно очень удобно пользоваться, на самом деле.
[51:51.960 --> 51:52.960]  Смотрите.
[51:52.960 --> 51:54.960]  Как это работает на примере двух стэков?
[51:56.960 --> 51:58.960]  На примере двух стэков
[51:59.960 --> 52:00.960]  Так.
[52:00.960 --> 52:01.960]  Да, да, да.
[52:04.960 --> 52:09.960]  А вот давайте я вот сейчас на примере покажу, потому что, что я уже сказал, это была абстракция.
[52:09.960 --> 52:11.960]  Сейчас я вам покажу.
[52:11.960 --> 52:13.960]  Значит, анализ может быть выглядит так.
[52:13.960 --> 52:14.960]  Смотрите.
[52:14.960 --> 52:15.960]  Смотрите, какая фишка.
[52:16.960 --> 52:18.960]  Значит, мы будем говорить.
[52:18.960 --> 52:26.960]  Каждый раз, вот, значит, каждый раз, когда мы будем добавлять элемент в стэк, вот этот,
[52:26.960 --> 52:28.960]  мы будем получать монетку.
[52:36.960 --> 52:42.960]  Вот даже очень удобно мыслить в терминах, что когда элемент добавляется вот этот в стэк И,
[52:42.960 --> 52:44.960]  мы привязываем к нему монету.
[52:44.960 --> 52:46.960]  Вот мы получаем монетку и привязываем ее к нему.
[52:48.960 --> 52:49.960]  Понятно, да?
[52:51.960 --> 52:52.960]  А теперь фишка такая,
[52:52.960 --> 52:56.960]  что когда мы начинаем перекидывать эти элементы в соседний стэк,
[52:58.960 --> 53:01.960]  мы эти монетки выкидываем.
[53:01.960 --> 53:02.960]  Почему?
[53:02.960 --> 53:04.960]  Потому что, что такое монетка?
[53:04.960 --> 53:07.960]  Это, то есть, монетка для элемента, это оплата.
[53:08.960 --> 53:13.960]  Оплата за перетаскивание этого элемента из стэка Im в стэк Out.
[53:15.960 --> 53:16.960]  То есть, зачем мы это делаем?
[53:16.960 --> 53:18.960]  Мы это делаем вот зачем.
[53:18.960 --> 53:21.960]  То есть, мы говорим, что это действие у нас становится оплачивать.
[53:23.960 --> 53:25.960]  И мы его типа не учитываем.
[53:27.960 --> 53:29.960]  В учетном времени работы.
[53:33.960 --> 53:34.960]  То есть, тогда логика такая.
[53:34.960 --> 53:36.960]  Смотрите, заметим, что у нас тогда,
[53:36.960 --> 53:38.960]  помимо оплаченных действий,
[53:38.960 --> 53:40.960]  то есть, просто в чем логика?
[53:40.960 --> 53:42.960]  То есть, получается, что вот эти методы, это мы оплатили.
[53:43.960 --> 53:46.960]  И у нас получается, но помимо оплаченных действий,
[53:46.960 --> 53:49.960]  у нас есть только честное добавление и честное удаление.
[53:49.960 --> 53:53.960]  И тогда получается, что все операции работают за ОАТ единицы.
[53:57.960 --> 54:01.960]  Да, но правда, конечно, само по себе абстрактно это не должно, конечно, работать.
[54:01.960 --> 54:03.960]  Потому что пока это может звучать как,
[54:03.960 --> 54:05.960]  а давайте просто делать абсолютно рандомную операцию,
[54:05.960 --> 54:08.960]  там какую-нибудь там рандомную шнягу и говорим, что,
[54:08.960 --> 54:12.960]  ну да, скажем, как сделать сортировку за ОАТН?
[54:13.960 --> 54:16.960]  Да, вот смотрите, тут тупой алгоритм сортировки за ОАТН, еще один.
[54:16.960 --> 54:26.960]  Вот, то есть, берем элементы и, допустим, там за ОАТН находим максимум, перетаскиваем его в конец.
[54:27.960 --> 54:31.960]  Но мы это время не учитываем, потому что мы платим Н-монеток.
[54:32.960 --> 54:34.960]  А где мы их взяли, да?
[54:34.960 --> 54:36.960]  Да, ну вот, потом еще один минус один и так далее.
[54:36.960 --> 54:39.960]  Но, действительно, тут фишка в том, что тут мы как бы,
[54:39.960 --> 54:41.960]  то есть, это называется, мы включили печатный станок.
[54:41.960 --> 54:44.960]  Нет, ну да, инфляция тут, конечно, да, не совсем то,
[54:44.960 --> 54:47.960]  но тут скорее то, что это называется, да,
[54:47.960 --> 54:50.960]  что называется, у нас есть большой долг, так как бы нам его обслужить,
[54:50.960 --> 54:52.960]  а давайте напечатаем кучу денег.
[54:53.960 --> 54:56.960]  То есть, да, вот, ничего хорошему особо это не приводит.
[54:56.960 --> 54:58.960]  Ну вот, но, как говорится, ладно, курс экономики,
[54:58.960 --> 55:00.960]  это у вас там, собственно, будет тоже курс и на третьем,
[55:00.960 --> 55:02.960]  потому что что там конкретно происходит.
[55:02.960 --> 55:05.960]  Но в нашем случае нам важно следующее.
[55:05.960 --> 55:08.960]  Потому что, да, в нашем случае нам важно следующее.
[55:08.960 --> 55:10.960]  В нашем случае нам важно следующее.
[55:10.960 --> 55:13.960]  Потому что, да, то есть, очень круто, что мы что-то оплатили,
[55:13.960 --> 55:18.960]  но важно всегда помнить, ну вот, почему мы говорим, что все хорошо.
[55:18.960 --> 55:20.960]  Потому что мы обнаружим следующее.
[55:20.960 --> 55:22.960]  У нас здесь есть, в отличие от этой ситуации, важное свойство.
[55:22.960 --> 55:26.960]  Мы не тратим, значит, утверждение номер раз,
[55:26.960 --> 55:31.960]  мы не тратим монеток больше, чем мы получили.
[55:32.960 --> 55:36.960]  То есть, мы никогда, то есть, важное вот свойство маркетизационного анализа
[55:36.960 --> 55:39.960]  мы никогда не работаем в долг.
[55:42.960 --> 55:46.960]  То есть, нам монетки, то есть, только те монетки, которые нам дали, мы используем.
[55:46.960 --> 55:49.960]  В общем, у нас ни времени ни приема, нет адресательного количества.
[55:49.960 --> 55:51.960]  Да, то есть, да.
[55:51.960 --> 55:54.960]  И второе свойство, которое нам помогает здесь, мы говорим, хорошо, да,
[55:54.960 --> 55:57.960]  все, что не оплачено, работает за вот единицы.
[55:59.960 --> 56:03.960]  Но с другой стороны, обратите внимание, тут, что приятно,
[56:03.960 --> 56:09.960]  с другой стороны мы заметим, что суммарно, мы получаем не более чем n монеток.
[56:10.960 --> 56:12.960]  Понимаете, да, не более, чем n монеток.
[56:13.960 --> 56:18.960]  То есть, это означает, что на каждую операцию не оплачено к действию от единицы,
[56:18.960 --> 56:21.960]  а суммарное число оплачено к действию от n,
[56:21.960 --> 56:23.960]  потому что мы получили не более, чем n монеток.
[56:26.960 --> 56:29.960]  То есть, получается все оплаченные действия суммарны тоже делаются за уа тэн.
[56:29.960 --> 56:36.560]  И тут же можно говорить, что на любое действие он получает не одну монету, а константное количество.
[56:36.560 --> 56:40.260]  Ну, да, это уже вот вопрос того самого курса валют.
[56:40.260 --> 56:45.960]  То есть, видите, тут тонкий момент такой, то есть, что такое монетка?
[56:45.960 --> 56:50.960]  Монетка – это то, что вам позволяет оплатить от единицы действий.
[56:50.960 --> 56:58.960]  То есть, вы заранее фиксируете какой-то курс, типа, какое количество конкретных действий, константных, вы оплачиваете одной монеткой.
[56:59.460 --> 57:00.960]  Вот.
[57:00.960 --> 57:04.960]  Да, формально говоря, да. То есть, конечно, эту конкретную константу там можно подкручивать.
[57:04.960 --> 57:08.960]  В данном случае теперь мы сказали, что у нас вот наша золотая монетка,
[57:08.960 --> 57:12.960]  ее хватает на то, чтобы перетинуть элементы из этого стека в это.
[57:12.960 --> 57:15.960]  Ну, как бы мы знаем, что это вот единица вот так.
[57:15.960 --> 57:17.960]  То есть, мыслить можно по-разному.
[57:17.960 --> 57:23.960]  Можно мыслить, конечно, что давайте говорить, что одна монетка позволяет оплачивать один такт процессора, условно,
[57:23.960 --> 57:27.960]  и тогда там давать не одну монетку, а от единицы монеток.
[57:27.960 --> 57:29.960]  То есть, это может быть было более правильное.
[57:29.960 --> 57:33.960]  Но иногда будем мыслить, что вот у нас монетка, все-таки будем единицу монеткой давать.
[57:33.960 --> 57:35.960]  Хотя подразумеваю в голове именно это, да?
[57:35.960 --> 57:41.960]  То есть, монетками можно обрабатывать только те операции, которые работают в среднем, да, от единицы?
[57:41.960 --> 57:42.960]  Да.
[57:42.960 --> 57:43.960]  Не в среднем, а в античном?
[57:43.960 --> 57:48.960]  Да, да, да, да. Но как мы в будущем увидим, на самом деле, вот у вас там в будущем увидим,
[57:48.960 --> 57:53.960]  это не означает, что вы обязаны получать там, допустим, именно от единицы монетки.
[57:53.960 --> 57:56.960]  То есть, вот, да, в данном случае мы получаем одну монетку.
[57:56.960 --> 58:00.960]  Но на каждом шаге вы имеете право получить логарифом N-монеток.
[58:01.960 --> 58:03.960]  Ну, типа, если у тебя оценка нередко.
[58:03.960 --> 58:05.960]  Да, то есть, здесь важно, да.
[58:05.960 --> 58:07.960]  Но здесь давайте, чтоб понять, как это...
[58:07.960 --> 58:10.960]  Тогда, смотрите, здесь это просто работает в итоге так.
[58:11.960 --> 58:13.960]  Значит, работает это следующим образом.
[58:13.960 --> 58:17.960]  Мы получаем, смотрите, учетную...
[58:18.960 --> 58:22.960]  Значит, тогда здесь вводится такое понятие, как учетная стоимость.
[58:26.960 --> 58:28.960]  Или амортизированная стоимость.
[58:28.960 --> 58:33.960]  Вот, в языке и литературе чаще всего это называется amortized cost, соответственно.
[58:34.960 --> 58:37.960]  Так вот, в данном случае, если вы применяете вот этот вид анализа с монетками,
[58:37.960 --> 58:45.960]  то вы говорите, что учетная стоимость, она будет равна CIT плюс...
[58:45.960 --> 58:50.960]  То есть, как бы, каждую монетку, которую вы получаете, она как бы увеличивает стоимость.
[58:51.960 --> 58:55.960]  А каждую, которую вы тратите, она уменьшает.
[58:56.960 --> 59:07.960]  Вот как-то вот так это работает.
[59:08.960 --> 59:10.960]  О, пошло бы.
[59:10.960 --> 59:12.960]  Cn плюс pn.
[59:12.960 --> 59:14.960]  Вот.
[59:14.960 --> 59:17.960]  То есть, обратите внимание, то есть, нельзя...
[59:17.960 --> 59:24.960]  То есть, если у вас была мечта, что давайте за каждый элемент добавленный в массив перед сортировкой,
[59:24.960 --> 59:26.960]  вы получаете o от n монеток,
[59:26.960 --> 59:30.960]  это лишь означает, что добавление этого элемента в массив, у вас будет стоимость o от n.
[59:30.960 --> 59:33.960]  Поэтому, суммарно, вы от этого n квадратов все равно так просто не делитесь.
[59:33.960 --> 59:35.960]  Потому что теперь у нас n квадрат монеток.
[59:35.960 --> 59:36.960]  Да.
[59:36.960 --> 59:38.960]  То есть, помните, каждая выданная мама...
[59:38.960 --> 59:41.960]  То есть, по большому счету, важный момент.
[59:41.960 --> 59:46.960]  То есть, как бы, монетки, они операции не уничтожают и не создают.
[59:46.960 --> 59:49.960]  Это способ такой, что как бы...
[59:49.960 --> 59:51.960]  То есть, давайте считать, что...
[59:51.960 --> 59:53.960]  То есть, вот в случае двух стэков, например,
[59:53.960 --> 59:57.960]  давайте считать, что мы сейчас выполнили две операции.
[59:57.960 --> 01:00:00.960]  Собственно, добавление и вот ту операцию,
[01:00:00.960 --> 01:00:05.960]  и, типа, ту операцию, которым вы этот элемент перекинули туда.
[01:00:05.960 --> 01:00:06.960]  По большому счету.
[01:00:06.960 --> 01:00:09.960]  То есть, это мы сделаем в будущем, мы будем считать, что мы это как бы сейчас сделали.
[01:00:09.960 --> 01:00:11.960]  А там мы ее считать не будем.
[01:00:11.960 --> 01:00:13.960]  То есть, такое мысленное перераспределение.
[01:00:13.960 --> 01:00:14.960]  Да.
[01:00:14.960 --> 01:00:15.960]  Что такое перераспределение?
[01:00:15.960 --> 01:00:17.960]  А вот это определение.
[01:00:17.960 --> 01:00:21.960]  А почему это не c1 плюс q1 и c2 плюс q2?
[01:00:21.960 --> 01:00:22.960]  Ну, потому что мы как раз...
[01:00:22.960 --> 01:00:26.960]  У нас как раз смысл в том, чтобы вот оплаченные действия не учитывать.
[01:00:29.960 --> 01:00:30.960]  Вот.
[01:00:30.960 --> 01:00:33.960]  У нас, когда мы тратим монетки, мы тратим время.
[01:00:33.960 --> 01:00:36.960]  Когда мы получаем монетки, то мы как бы мысленно записываем...
[01:00:37.960 --> 01:00:38.960]  Нет, когда мы получим...
[01:00:38.960 --> 01:00:39.960]  Ну, как сказать?
[01:00:39.960 --> 01:00:41.960]  Потому что тут же...
[01:00:41.960 --> 01:00:42.960]  Сейчас.
[01:00:42.960 --> 01:00:43.960]  Нет, почему? Наоборот...
[01:00:43.960 --> 01:00:44.960]  Ну, как бы, смотрите.
[01:00:44.960 --> 01:00:47.960]  Почему мы оплаченные действия не считаем?
[01:00:48.960 --> 01:00:51.960]  На самом деле, потому что мы их уже...
[01:00:51.960 --> 01:00:54.960]  Мы их посчитали, когда нам выдавали соответствующую монетку.
[01:00:54.960 --> 01:00:58.960]  То есть, здесь важный смысл, что для любого i должно быть верно,
[01:00:58.960 --> 01:01:06.960]  что сумма по всем g, p житого минус q житого,
[01:01:06.960 --> 01:01:09.960]  она всегда должна быть больше либо равно нуля.
[01:01:09.960 --> 01:01:11.960]  То есть, что это я написал такое, да?
[01:01:11.960 --> 01:01:14.960]  Это я написал, что мы никогда ни в какой момент времени
[01:01:14.960 --> 01:01:17.960]  не потратили больше монеток, чем нам выдали.
[01:01:18.960 --> 01:01:21.960]  Нет, мы могли потратить в какой-то момент больше монеток,
[01:01:21.960 --> 01:01:24.960]  чем нам выдали за эту операцию, но не больше, чем...
[01:01:24.960 --> 01:01:25.960]  Да.
[01:01:25.960 --> 01:01:29.960]  Да, то есть конкретная q житая может быть больше конкретного p житого,
[01:01:29.960 --> 01:01:32.960]  но гарантируем, что на любом префиксе вот так.
[01:01:37.960 --> 01:01:40.960]  Так, вот вектор, погодите, потому что вектор — это следующая структура данных,
[01:01:40.960 --> 01:01:42.960]  которую мы будем с этим всем анализировать.
[01:01:43.960 --> 01:01:44.960]  Да.
[01:01:44.960 --> 01:01:45.960]  Да, будем.
[01:01:45.960 --> 01:01:47.960]  Обязательно мы сейчас это будем проговаривать.
[01:01:47.960 --> 01:01:48.960]  Но пока вот так.
[01:01:48.960 --> 01:01:50.960]  То есть, вот че...
[01:01:52.960 --> 01:01:55.960]  Да, то есть, здесь получается такая штука, как учетная стоимость.
[01:01:55.960 --> 01:01:57.960]  То есть, здесь говорят, что вот учетная стоимость,
[01:01:57.960 --> 01:01:59.960]  скажем, кучи фибоначи, вот такая, да?
[01:02:01.960 --> 01:02:03.960]  Но заметим, что смысл-то ровно тот же.
[01:02:04.960 --> 01:02:07.960]  Потому что, то есть, учетная стоимость — это в том плане,
[01:02:07.960 --> 01:02:08.960]  что...
[01:02:11.960 --> 01:02:14.960]  Действительно, в чем смысл введения такой именно учетной стоимости?
[01:02:14.960 --> 01:02:17.960]  То есть, это означает, что на самом деле...
[01:02:17.960 --> 01:02:18.960]  То есть, это не означает...
[01:02:18.960 --> 01:02:20.960]  То есть, каждая конкретная учетная стоимость,
[01:02:20.960 --> 01:02:24.960]  она может быть как больше реальной стоимости, так и меньше.
[01:02:26.960 --> 01:02:27.960]  Но у нас смысл в том, что...
[01:02:27.960 --> 01:02:29.960]  Опять же, вот давайте я тоже на префиксы буду писать.
[01:02:29.960 --> 01:02:36.960]  Для любого i верно, что сумма учетных стоимости —
[01:02:36.960 --> 01:02:39.960]  это верхняя оценка на сумму реальных стоимости.
[01:02:39.960 --> 01:02:41.960]  Ладно, тут же и...
[01:02:42.960 --> 01:02:44.960]  То есть, вот в чем глубокий смысл.
[01:02:47.960 --> 01:02:48.960]  Вот.
[01:02:49.960 --> 01:02:50.960]  — Можно вопрос? — Да.
[01:02:50.960 --> 01:02:52.960]  — А ранее было, что одна монетка — это, в смысле,
[01:02:52.960 --> 01:02:54.960]  два раза завод изнисла.
[01:02:54.960 --> 01:02:56.960]  Когда мы получили, или когда мы отдали ее?
[01:02:57.960 --> 01:02:59.960]  — Ну, нет.
[01:03:00.960 --> 01:03:01.960]  Нет, получение...
[01:03:01.960 --> 01:03:02.960]  Ну, не совсем так, нет.
[01:03:02.960 --> 01:03:04.960]  Получение монеток — понятно, в реальном времени...
[01:03:06.960 --> 01:03:10.960]  Т.е. в алгоритме-то алгоритм сам по себе
[01:03:10.960 --> 01:03:12.960]  от этого лишних действий не делает.
[01:03:13.960 --> 01:03:16.960]  Смотрите, получение монеток и отдача монеток —
[01:03:16.960 --> 01:03:18.960]  это то, что мы делаем для анализов.
[01:03:18.960 --> 01:03:20.960]  Т.е. реальный алгоритм от этого не меняется.
[01:03:22.960 --> 01:03:25.960]  То есть, получение монеток и отдача монеток —
[01:03:25.960 --> 01:03:27.960]  это всего лишь способ пометить,
[01:03:27.960 --> 01:03:30.960]  что вот это действие мы сделали когда-то вот тогда,
[01:03:30.960 --> 01:04:00.960]  Но учли мы это действие раньше, а сделали мы это для того, чтобы сказать, что у нас нет такого, что тут 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
[01:04:00.960 --> 01:04:07.760]  Нет, если изначально, да, но это по сути означает, что у вас инициализация выполнилась за там учетных от n получается.
[01:04:12.640 --> 01:04:15.120]  Ну вообще изначально у нас ноль монет, если что.
[01:04:24.640 --> 01:04:28.900]  Нет, то есть вы анализируете прям именно n операции, ну можно и так в принципе, да.
[01:04:29.460 --> 01:04:36.340]  То есть это все равно будет, да, просто чуть-чуть другая техника получится, хотя, да, то есть смысл как бы примерно тот же, да.
[01:04:44.900 --> 01:04:48.540]  Ну нет, то как смысл, вот сейчас, ну не обязательно от n там.
[01:04:50.260 --> 01:04:55.700]  Ну это как повезет, ну в принципе, да, то есть смотрите, смысл такой, то есть учетная стоимость, это так, чтобы
[01:04:55.700 --> 01:04:59.220]  сумма учетных стоимости была верхней оценкой на сумму реальных.
[01:04:59.860 --> 01:05:06.340]  То есть смотрите, то есть, например, с точки зрения кучи фибоначи, будет говорить, что учетная стоимость, скажем, инсерта будет от единицы,
[01:05:06.500 --> 01:05:10.700]  там, или какой-нибудь гетмина от единицы, а какой-нибудь экстракт мина логарифом.
[01:05:11.260 --> 01:05:18.340]  То есть вот тут будет написано 1,1, логарифом 1,1 и так далее, но если мы гарантируем, что сумма вот этого больше либо равно, чем сумма этого,
[01:05:18.420 --> 01:05:20.420]  то, соответственно, это вот нас устраивает.
[01:05:25.700 --> 01:05:29.900]  Ну что, значит, одинаковые, ну плотно, но оценки на них, да.
[01:05:32.900 --> 01:05:34.900]  Нет, ну или я не понимаю вопроса.
[01:05:40.100 --> 01:05:45.220]  Ну да, ну как бы, скорее всего, да, ну как бы понятно, что, помните, что учетная стоимость, это тоже верхняя оценка.
[01:05:46.220 --> 01:05:51.620]  То есть мы гарантируем, что каждая операция, там скажем, инсерт будет работать не более, чем за тому от единицы.
[01:05:51.940 --> 01:05:57.180]  То есть не более, выполнить не более, чем там 57 операций. 57, раз она всегда фиксирована константа.
[01:05:57.300 --> 01:06:02.820]  То есть понятно, что в реальности может быть так, что в одном случае она сделает там 28 операций, в другом 34, но
[01:06:03.820 --> 01:06:07.740]  вот, но гарантируется, что всегда не более, чем 57. Вот как-то так это будет работать.
[01:06:09.540 --> 01:06:13.260]  Да, то есть вот в чем действительно тут смысл.
[01:06:22.420 --> 01:06:26.420]  Нет, ну просто,
[01:06:28.820 --> 01:06:32.180]  нет, ну смысл в том, для более удобного анализа.
[01:06:32.700 --> 01:06:37.780]  Потому что, скажем, вот в куче фибоначин, например, каждое конкретное действие может работать и за линию, если не дольше.
[01:06:39.020 --> 01:06:43.100]  Потому что, как уже было сказано, то есть если вы там добавите 100 тысяч элементов,
[01:06:43.100 --> 01:06:51.140]  да, он каждое будет добавлять чисто в список. А потом, когда вы доходите достать из него минимум, он там начнет действительно какие-то страшные структуры строить, и уж не менее,
[01:06:51.140 --> 01:06:53.140]  чем ОАТН действие, он на это потратит.
[01:06:53.660 --> 01:06:57.060]  И это будет записано вот в этих цешках. Но это нам так неудобно анализировать.
[01:06:57.580 --> 01:07:06.060]  Почему нам неудобно? Потому что, если мы будем считать, то есть самый простой способ сказать, что каждый экстракт Мин работает за ОАТН, и тогда в худшем случае это работает за Н квадрат,
[01:07:06.060 --> 01:07:08.340]  это нас не устраивает. Потому что это не так.
[01:07:09.100 --> 01:07:11.420]  Вот. Поэтому зачем нужны учетные стоимости?
[01:07:11.860 --> 01:07:17.380]  Вот оказывается, что если вот написать хорошо учетные стоимости, то мы обнаружим, что сумму учетных стоимости
[01:07:17.860 --> 01:07:20.260]  мажорирует сверху сумму реальных стоимости.
[01:07:21.780 --> 01:07:26.220]  И тогда, получается, мы можем нам просто удобно так, то есть удобно считать,
[01:07:26.860 --> 01:07:36.460]  что в учетном смысле, вот, действительно, у Кучи Фибоначчи, действительно, там вставка работает учетно за единицу, а экстракт Мин учетно за логарифу.
[01:07:37.140 --> 01:07:38.820]  То есть это учетные стоимости, вот эти красивые?
[01:07:38.820 --> 01:07:41.340]  Да. Это учетные стоимости, это важно.
[01:07:41.940 --> 01:07:42.440]  Да.
[01:07:42.740 --> 01:07:45.020]  То есть, боже упасти, это нереально.
[01:07:45.100 --> 01:07:52.980]  Короче, каждый раз, когда ты сделал операцию, там, ну, за пять операций, а не за двести, ты говоришь, что остальные 195 отложил на потом.
[01:07:52.980 --> 01:07:53.940]  Ну да, и они будут...
[01:07:53.940 --> 01:07:54.700]  Еще пригодятся.
[01:07:54.700 --> 01:07:55.540]  Ну, типа того, да.
[01:07:55.540 --> 01:08:00.620]  Но если реальная стоимость равна учетной стоимости, то это значит, что у нас потратились все монеты?
[01:08:00.860 --> 01:08:01.660]  Ну, по сути, да.
[01:08:01.860 --> 01:08:04.460]  А где мы, если вы учли, что мы где-то потратили?
[01:08:06.460 --> 01:08:07.620]  А вы еще говорили просто, что...
[01:08:07.620 --> 01:08:08.820]  А мы негде, потому что...
[01:08:08.820 --> 01:08:10.820]  Неконстантные числа, монеты вы говорили?
[01:08:11.620 --> 01:08:15.100]  Ну, иногда бывает, поэтому я тут пишу, видите, p1, p2, p3, да, видите?
[01:08:15.100 --> 01:08:17.700]  Они могут и от n зависеть, в принципе, вполне.
[01:08:20.580 --> 01:08:23.580]  Ну, то есть так, в принципе, вот это какие-то чиселки абстрактные.
[01:08:24.580 --> 01:08:28.780]  То есть это чиселки и это чиселки, то есть, как бы, там реальные цифры.
[01:08:29.140 --> 01:08:31.660]  Но потратились они нигде, то есть, только не в 8 точках.
[01:08:31.660 --> 01:08:37.740]  Они потратились за счет того, что, как бы, наша задача, то есть, мы говорим, наша задача оценить сумму вот этих цешек, да?
[01:08:38.660 --> 01:08:46.660]  И мы говорим, что оказывается, да, что эта сумма цешек и происходит сумма вот этих, чуть более экзотически устроенных цешек.
[01:08:47.660 --> 01:08:53.660]  Вот. И оказывается, что сумма этих цешек оказывается вот там, вот отсюда берется.
[01:09:02.660 --> 01:09:05.660]  Ну, что... Ну, я не понимаю вопрос, что такое написать 7 точек?
[01:09:08.660 --> 01:09:12.660]  Ну, как бы, утверждение. То есть, это все, как бы, для того, чтобы, то есть, формально звучит так.
[01:09:13.660 --> 01:09:19.660]  Мы утверждаем, что, то есть, отсюда следует, что реальное время работы не превосходит...
[01:09:20.660 --> 01:09:28.660]  То есть, как бы, вот эти все n операции суммарно были выполнены за O от вот этих вот там, от 1 до n.
[01:09:29.660 --> 01:09:31.660]  Вот этих вот C и D. Вот.
[01:09:38.660 --> 01:09:39.660]  Да.
[01:09:44.660 --> 01:09:47.660]  Ну, вот опасно тут употреблять средним.
[01:09:48.660 --> 01:09:50.660]  Нет, ну, смысл-то тот же, да, что...
[01:09:52.660 --> 01:09:54.660]  То есть, по большому счету, да, то есть...
[01:09:55.660 --> 01:10:01.660]  Ну, то есть, по большому счету, да, то есть, смысл будет тот же, если мы докажем, что там вот учет, вот таким вот образом введенные учетные стоимости будут
[01:10:02.580 --> 01:10:07.580]  не превосходить там для инсерта гетмина и там мэлда O от единицы, а для экстракт-мина алгоритма,
[01:10:08.580 --> 01:10:10.580]  вот каким-то образом мы это, да...
[01:10:11.580 --> 01:10:15.580]  Ведутся у нас эти монетки вот таким образом, что это будет происходить именно так, да.
[01:10:16.580 --> 01:10:19.580]  То тогда получается, что мы гарантируем, что тогда...
[01:10:20.580 --> 01:10:25.580]  Значит, там, если у нас было, опять же, A инсертов, B удалений там C гетминов и D мэлдов,
[01:10:26.580 --> 01:10:27.580]  то есть, опять, тот же самый смысл.
[01:10:28.580 --> 01:10:31.580]  То есть, время работы будет не превосходить не более, чем получается вот опять A.
[01:10:32.580 --> 01:10:34.580]  A на единицу, плюс B на алгоритм, плюс C на единицу, плюс D на единицу.
[01:10:35.580 --> 01:10:37.580]  То есть, и эта сумма будет зашита уже здесь.
[01:10:46.580 --> 01:10:47.580]  Нет, зачем?
[01:10:48.580 --> 01:10:54.580]  Нет, если у нас все C равны, это означает, что, по-видимому, мы вообще не получали и не тратили никаких монет.
[01:11:02.580 --> 01:11:04.580]  Ну, нет, а мы вообще не получали.
[01:11:05.580 --> 01:11:10.580]  Потому что, напоминаю, да, важный еще смысл заключает в том, что в этом анализе изначально у нас монет нет.
[01:11:11.580 --> 01:11:13.580]  Все, вот у нас все, ноль, все.
[01:11:16.580 --> 01:11:22.580]  То есть, поэтому, если у вас как бы все C, если каждая C равна, там, каждая учетная стоимость равна реальной,
[01:11:23.580 --> 01:11:26.580]  то это означает, что, ну вот, то, особенно вот с учетом вот этого условия,
[01:11:27.580 --> 01:11:29.580]  это означает, что у вас тут вот везде нулей.
[01:11:30.500 --> 01:11:35.500]  То есть, по сути, никакой амортизации нет, мы вообще ничего не получали, ничего не тратили и работали честно.
[01:11:36.500 --> 01:11:44.500]  Хорошо, а если у нас реально время, допустим, было D от единицы, а в конце мы взяли и потратили Nlog Nmonet.
[01:11:45.500 --> 01:11:52.500]  А, нет, мы получали C-шки равны единице, получали алгоритм, а в конце взяли и все потратили.
[01:11:53.500 --> 01:11:54.500]  Ну и что?
[01:11:55.500 --> 01:11:57.500]  Ну, у тебя симпотика, видимо, Nlog Nmonet.
[01:11:58.420 --> 01:12:04.420]  У меня же, стоп, у меня все полученные монеты потратятся, и при этом сложатся все C-шки, получится вот N.
[01:12:05.420 --> 01:12:06.420]  Да, и что?
[01:12:07.420 --> 01:12:11.420]  Мы, у нас, мы откладывали на каждой тратце алгоритм монетами, и потом взяли и все их потратили.
[01:12:12.420 --> 01:12:14.420]  Должно же, в суммарности, должно получиться Nlog N.
[01:12:15.420 --> 01:12:17.420]  Ну, ну не должна, просто да.
[01:12:18.420 --> 01:12:22.420]  Ну, сформулирован тут как бы такой, тут такая тонкость, что, в принципе,
[01:12:23.340 --> 01:12:27.340]  то есть фишка в том, что, что, да, эти учетные стоимости могут быть даже отрицательными.
[01:12:29.340 --> 01:12:34.340]  Нет, я понимаю, что не могут, но я имею в виду, что вот, допустим, у нас C-шки были единицы,
[01:12:35.340 --> 01:12:36.340]  но при этом мы на каждой получали лабиринт монеток.
[01:12:37.340 --> 01:12:38.340]  И что?
[01:12:39.340 --> 01:12:42.340]  А потом взяли и на последние итерации все, все, все, все монетки вообще потратили.
[01:12:43.340 --> 01:12:48.340]  У нас был Nlog Nmonet, мы потратили, но при этом сумма всех C-шек равна O от N,
[01:12:49.340 --> 01:12:51.340]  а в настоящем мы тратили Nlog Nmonet.
[01:12:52.260 --> 01:12:55.260]  А сейчас мы получили то, что 8.O от N, а не O от Nlog N.
[01:12:56.260 --> 01:12:59.260]  Ну, значит, ну просто у нас, да, тут оказалась просто такая отрицательная C-шка.
[01:13:00.260 --> 01:13:01.260]  Правда, Канира Нот?
[01:13:02.260 --> 01:13:04.260]  В смысле, если мы потратили в один момент Nlog Nmonet...
[01:13:05.260 --> 01:13:08.260]  Да, мы же в один момент последний, в последние операции мы потратили Nlog Nmonet все.
[01:13:09.260 --> 01:13:13.260]  Если мы их потратили, значит, что мы сделали O от Nlog N операции только на последний раз, да.
[01:13:14.260 --> 01:13:15.260]  Ну да.
[01:13:16.260 --> 01:13:19.260]  Это уже минимум 8.O от Nlog N будет.
[01:13:20.180 --> 01:13:21.180]  Да.
[01:13:22.180 --> 01:13:23.180]  Потому что мы только за последнюю операцию стоим.
[01:13:24.180 --> 01:13:29.180]  Да, вот когда мы считаем суммарную, а мы считаем все точки для каждой из операций.
[01:13:30.180 --> 01:13:31.180]  Сейчас, сейчас, чего еще раз?
[01:13:32.180 --> 01:13:33.180]  Сейчас не слышу ничего.
[01:13:34.180 --> 01:13:41.180]  Когда мы считали учетную стоимость, мы считали ее для всех операций, суммарную.
[01:13:42.180 --> 01:13:43.180]  Но...
[01:13:44.180 --> 01:13:49.180]  И мы сказали, что суммарная, учетная стоимость меньше, чем O, больше O равна, чем стоимость каждой из операций.
[01:13:50.180 --> 01:13:53.180]  Ну скажи так, сумма учетных стоимости больше, чем сумма реальных, правильно?
[01:13:54.180 --> 01:13:55.180]  Получается, мы получили...
[01:13:56.180 --> 01:13:57.180]  Как бы...
[01:13:58.180 --> 01:14:01.180]  Как нам из этого вы занесли точку для каждой из операций?
[01:14:02.180 --> 01:14:04.180]  Ну, в смысле...
[01:14:05.180 --> 01:14:06.180]  Ладно.
[01:14:07.180 --> 01:14:14.180]  Нет, в данном случае просто смысл анализа будет в том, что просто показать, что каждая учетная стоимость для каждой операции будет не превосходить чего-то интересного.
[01:14:15.100 --> 01:14:24.100]  При том, что у вас есть фиксированный способ действительно получения дачи монеток, фиксированный алгоритм.
[01:14:25.100 --> 01:14:30.100]  У вас хуже курс покупки действий за монеты и покупки монет с действиями, он одинаковый, да?
[01:14:31.100 --> 01:14:32.100]  Ну, конечно.
[01:14:33.100 --> 01:14:34.100]  А, чего? Где? Давай.
[01:14:35.100 --> 01:14:40.100]  Ну, да.
[01:14:41.100 --> 01:14:43.100]  Ну да, прям эквивалентно, да.
[01:14:44.020 --> 01:14:45.020]  Нет, ну не совсем так.
[01:14:46.020 --> 01:14:47.020]  Хотя да, так на самом деле.
[01:14:48.020 --> 01:14:52.020]  Да, ну это просто, видите, смысл такой, что у нас просто как бы...
[01:14:53.020 --> 01:14:54.020]  В смысле?
[01:14:55.020 --> 01:14:56.020]  Вот сам последний.
[01:14:57.020 --> 01:14:58.020]  Все правильно.
[01:14:59.020 --> 01:15:03.020]  У тебя, если что, вот эта сумма, она больше либо равна, чем реальная.
[01:15:04.020 --> 01:15:07.020]  Ну поэтому да, вот эту вот сумму можно оценить сверху как вот это.
[01:15:08.020 --> 01:15:09.020]  Она равна реальному, значит, что мы тратили монеты.
[01:15:09.940 --> 01:15:12.940]  Если она равна, значит, мы ничего не тратили, ничего не получали.
[01:15:13.940 --> 01:15:14.940]  То есть как бы...
[01:15:15.940 --> 01:15:17.940]  Его мы потратили просто все, которые мы получили.
[01:15:18.940 --> 01:15:19.940]  И что?
[01:15:20.940 --> 01:15:21.940]  Ладно, я потом.
[01:15:22.940 --> 01:15:25.940]  Ты за каждое действие получаешь столько монет, сколько ты...
[01:15:26.940 --> 01:15:29.940]  Ты считаешь, что ты за каждое действие получаешь одну монету?
[01:15:30.940 --> 01:15:34.940]  Нет, смотри, мы видим, что мы в функции можем получать монеты, а не константы.
[01:15:35.940 --> 01:15:36.940]  Нет, просто...
[01:15:37.860 --> 01:15:38.860]  Чего?
[01:15:39.860 --> 01:15:41.860]  Так, ребят, чего я не слышу ничего?
[01:15:42.860 --> 01:15:43.860]  Так, Денис!
[01:15:44.860 --> 01:15:46.860]  Да вот слушай, вообще не слышу.
[01:15:47.860 --> 01:15:48.860]  Так, можно еще раз тут...
[01:15:51.860 --> 01:15:52.860]  Ну да.
[01:15:53.860 --> 01:15:54.860]  Ну...
[01:15:55.860 --> 01:15:56.860]  Ну не совсем так.
[01:15:57.860 --> 01:16:01.860]  Формально в анализе мы можем потратить монетку и больше.
[01:16:02.780 --> 01:16:04.780]  По большому счету это означает, что...
[01:16:05.780 --> 01:16:08.780]  То есть тут парадокс в том, что мы можем выдавать полагарифму монеток,
[01:16:09.780 --> 01:16:11.780]  а потом их потратить и в сумме получится хорошо.
[01:16:12.780 --> 01:16:19.780]  Но просто это будет означать, что эти монетки просто никуда не пошли.
[01:16:20.780 --> 01:16:23.780]  То есть ими ничего не оплачено, они и были потрачены в холостую.
[01:16:26.780 --> 01:16:28.780]  В смысле? Подождите, подождите.
[01:16:29.700 --> 01:16:31.700]  В смысле? Подождите, почему?
[01:16:32.700 --> 01:16:34.700]  Вот почему они были потрачены в холостую?
[01:16:35.700 --> 01:16:36.700]  Мы получали мы по log n монеток.
[01:16:37.700 --> 01:16:38.700]  Да.
[01:16:39.700 --> 01:16:40.700]  И в итоге потратили их все.
[01:16:41.700 --> 01:16:43.700]  Но это значит, что мы суммарно потратили n log n монеток,
[01:16:44.700 --> 01:16:46.700]  а мы потратим одну монету на от единицы операции.
[01:16:47.700 --> 01:16:48.700]  Почему?
[01:16:49.700 --> 01:16:51.700]  Мы можем потратить монеты не на что как раз.
[01:16:52.700 --> 01:16:54.700]  Если мы потратим монеты на от единицы операции,
[01:16:55.700 --> 01:16:57.700]  тогда у нас клиенты меньше в равномерном центре и примерно не работают.
[01:16:59.700 --> 01:17:02.700]  Если мы фактически тратим монету на от единицы операции,
[01:17:03.700 --> 01:17:04.700]  мы потратили все n log n монеты.
[01:17:05.700 --> 01:17:07.700]  У тебя нет операции, на которые ты можешь потратить n log n монет,
[01:17:08.700 --> 01:17:09.700]  если у тебя в суммарную действие от n.
[01:17:10.700 --> 01:17:13.700]  А я ей говорю, что это суммарно не у от n получается.
[01:17:14.700 --> 01:17:17.700]  Нет, вот так, суммарно это получится может и у от n.
[01:17:18.700 --> 01:17:23.700]  То есть другой вопрос, что тогда анализ будет говорить так.
[01:17:24.700 --> 01:17:26.700]  Мы хотим, чтобы при нашем алгоритме,
[01:17:27.620 --> 01:17:29.620]  мы говорим, что учетная стоимость не превосходит,
[01:17:30.620 --> 01:17:31.620]  вот эта штука будет не превосходить.
[01:17:32.620 --> 01:17:33.620]  И тогда нам придется это сверху оценивать,
[01:17:34.620 --> 01:17:35.620]  каждую эту операцию, как логарифом.
[01:17:36.620 --> 01:17:37.620]  Очень простой пример.
[01:17:38.620 --> 01:17:40.620]  Цейта равно единице, но при этом на каждом шаге мы зачем-то
[01:17:41.620 --> 01:17:42.620]  даем логарифам монеты, а в конце тратим n log n.
[01:17:43.620 --> 01:17:44.620]  Понятно, что алгоритм работает все равно за от n,
[01:17:45.620 --> 01:17:46.620]  сколько бы мой монет не потратить.
[01:17:47.620 --> 01:17:49.620]  Потому что сами по себе ничего не символизируют.
[01:17:50.620 --> 01:17:53.620]  Ну если ты их на дело потратишь в конце n log n.
[01:17:54.540 --> 01:17:56.540]  Ну ты не сможешь потратить в n log n монет на дело,
[01:17:57.540 --> 01:17:58.540]  если всего от суммацеитов это n.
[01:18:01.540 --> 01:18:03.540]  Ну так ты просто выбирай по одной монетке.
[01:18:04.540 --> 01:18:05.540]  Если она работает за от n, то верно, что она работает
[01:18:06.540 --> 01:18:07.540]  за от n log n.
[01:18:08.540 --> 01:18:09.540]  Еще раз.
[01:18:10.540 --> 01:18:14.540]  Ну вопрос, чтобы это было в излишестве.
[01:18:15.540 --> 01:18:18.540]  Обычно просто в анализе это будет немножко не так выглядеть.
[01:18:19.540 --> 01:18:21.540]  А кто сказал, что суммацеитов на сцену вообще?
[01:18:22.460 --> 01:18:27.460]  Нет, ну как пример, если мы там делаем тупые какие-нибудь
[01:18:28.460 --> 01:18:31.460]  единицы операции типа там, ну я не знаю, типа ничего
[01:18:32.460 --> 01:18:33.460]  и просто добавляем логарифам.
[01:18:34.460 --> 01:18:35.460]  Ну там, допустим, у нас каждая операция, допустим,
[01:18:36.460 --> 01:18:38.460]  в структуре данных это напечатает на экране Hello World.
[01:18:39.460 --> 01:18:42.460]  То как бы да, можно проводить анализ в духе, что мы там
[01:18:43.460 --> 01:18:44.460]  на первой сколько-то операции каждый раз еще получаем
[01:18:45.460 --> 01:18:50.460]  по логарифам монеток, а потом в конце неожиданно решили
[01:18:51.380 --> 01:18:52.380]  эти монетки слить.
[01:18:53.380 --> 01:18:55.380]  Вот, но неожиданно решили потратить.
[01:18:56.380 --> 01:18:58.380]  Ну и да, и суммарно все равно получится с учетом этого
[01:18:59.380 --> 01:19:01.380]  слива, что это суммарно работает за от n.
[01:19:02.380 --> 01:19:06.380]  Да, правда, но при этом просто в анализе это будет
[01:19:07.380 --> 01:19:08.380]  так не выглядеть, почему?
[01:19:09.380 --> 01:19:10.380]  Потому что да, мы тут, смотрите, да, мы тут действительно
[01:19:11.380 --> 01:19:13.380]  анализируем вот эти учетные стоимости, да, но как бы
[01:19:14.380 --> 01:19:17.380]  помним, что при этом, что просто, но при этом просто
[01:19:18.300 --> 01:19:20.300]  логика именно в том, что мы как бы вот эти вот отрицательные
[01:19:21.300 --> 01:19:22.300]  стоимости никогда не вписываем.
[01:19:23.300 --> 01:19:26.300]  И при этом анализе получится, что n операции будут работать
[01:19:27.300 --> 01:19:31.300]  за o от n, но при этом, при тех же самых как бы p-шках
[01:19:32.300 --> 01:19:34.300]  получается первая n-1 операции при этом сработали
[01:19:35.300 --> 01:19:36.300]  за n лог n.
[01:19:37.300 --> 01:19:38.300]  Потому что учетная стоимость каждой из этих операций
[01:19:39.300 --> 01:19:40.300]  оказалась логарифом.
[01:19:41.300 --> 01:19:42.300]  Ну просто потому что верхняя оценка такая у нас.
[01:19:43.300 --> 01:19:45.300]  Поэтому отсюда там действительно вылезет, что может
[01:19:46.220 --> 01:19:48.220]  получиться, что в доказательстве, что этот алгоритм
[01:19:49.220 --> 01:19:51.220]  при таком вот таком не очень точном анализе работает
[01:19:52.220 --> 01:19:54.220]  не более чем суммарно за n лог n.
[01:19:55.220 --> 01:19:57.220]  Потому что каждая операция работает не более чем за
[01:19:58.220 --> 01:19:59.220]  логариф.
[01:20:00.220 --> 01:20:02.220]  То есть это просто не точное, то есть это на самом
[01:20:03.220 --> 01:20:04.220]  деле это будет просто пример неточного анализа.
[01:20:07.220 --> 01:20:09.220]  Вот, то есть на самом деле можно проанализировать
[01:20:10.220 --> 01:20:12.220]  поточнее и обнаружить, что на самом деле там все
[01:20:13.220 --> 01:20:14.220]  за линию работает.
[01:20:15.140 --> 01:20:17.140]  Вот у нас нельзя какой-то конструкции, какой-то
[01:20:18.140 --> 01:20:20.140]  неточный монет выдать, и мы обязаны задавать
[01:20:21.140 --> 01:20:22.140]  логарифы.
[01:20:23.140 --> 01:20:24.140]  И тогда у нас точно n-1.
[01:20:25.140 --> 01:20:26.140]  Ну это другой уже вопрос.
[01:20:27.140 --> 01:20:29.140]  В какой момент мы тратим квадрат с элементом?
[01:20:30.140 --> 01:20:32.140]  Ну в какой решаем, в такой тратим.
[01:20:33.140 --> 01:20:34.140]  То есть это как бы метода.
[01:20:35.140 --> 01:20:37.140]  Вот мы решили потратить, вот на n мы Hello World, мы
[01:20:38.140 --> 01:20:40.140]  решили потратить все монетки в данном случае.
[01:20:45.140 --> 01:20:47.140]  Это не более чем метод анализа такой.
[01:20:48.140 --> 01:20:49.140]  То есть это абстракция.
[01:20:50.140 --> 01:20:52.140]  Да, конечно мысль про алгоритмы не хочет,
[01:20:53.140 --> 01:20:55.140]  потому что хочется мыслить в алгоритме, что давайте
[01:20:56.140 --> 01:20:58.140]  когда мы делаем что-то, мы получаем фиксированные
[01:20:59.140 --> 01:21:01.140]  какие-то монетки или тратим фиксированные монетки.
[01:21:02.140 --> 01:21:04.140]  Но на самом деле в данном случае мы просто по другому
[01:21:05.140 --> 01:21:06.140]  поступили.
[01:21:07.140 --> 01:21:09.140]  Мы мысли на себе сказали, что давайте вот именно
[01:21:10.140 --> 01:21:12.140]  на n-ую операцию мы действительно все монетки потратили.
[01:21:13.060 --> 01:21:15.060]  И тогда у нас, да, тут все учетные стоимости алгоритм,
[01:21:16.060 --> 01:21:18.060]  а тут учетная стоимость минус n лог n, поэтому сумма
[01:21:19.060 --> 01:21:20.060]  адекватная.
[01:21:21.060 --> 01:21:22.060]  Ну типа.
[01:21:23.060 --> 01:21:25.060]  Это алгоритм, метод, который для размышления
[01:21:26.060 --> 01:21:27.060]  или для доказательств?
[01:21:28.060 --> 01:21:30.060]  Ну для размышления, хотя и для доказательств,
[01:21:31.060 --> 01:21:33.060]  он вполне себе тоже подходит, потому что очень удобно
[01:21:34.060 --> 01:21:36.060]  описывать алгоритмы в духе, что давайте скажем, что
[01:21:37.060 --> 01:21:39.060]  действительно мы каждый раз, когда кладем элемент
[01:21:40.060 --> 01:21:41.060]  на стэк, кладем монетку.
[01:21:41.980 --> 01:21:43.980]  В данном случае, то есть на практике еще раз, как это
[01:21:44.980 --> 01:21:46.980]  выглядит, то есть на практике это будет выглядеть так,
[01:21:47.980 --> 01:21:49.980]  что мы на каждый элемент кладем монетку,
[01:21:50.980 --> 01:21:52.980]  а потом каждый раз, когда этот элемент перетаскиваем,
[01:21:53.980 --> 01:21:55.980]  мы это перетаскивание оплачиваем.
[01:21:56.980 --> 01:21:58.980]  И тогда получается, с одной стороны, не оплаченных
[01:21:59.980 --> 01:22:01.980]  действий у нас у отн суммарно, а оплаченных
[01:22:02.980 --> 01:22:04.980]  тоже у отн, почему? Потому что мы
[01:22:05.980 --> 01:22:07.980]  получили всего n-монеток.
[01:22:08.980 --> 01:22:10.980]  То есть смотрите, оплаченность
[01:22:11.980 --> 01:22:13.980]  где она берется, то есть
[01:22:14.980 --> 01:22:16.980]  здесь, смотрите, получается, здесь следующее,
[01:22:17.980 --> 01:22:19.980]  что такое неоплаченные действия?
[01:22:20.980 --> 01:22:22.980]  Неоплаченные действия на каждом шаге, это CIT
[01:22:23.980 --> 01:22:25.980]  минус QIT, по сути.
[01:22:26.980 --> 01:22:28.980]  То есть, как бы, часть этих действий, которые тут
[01:22:29.980 --> 01:22:31.980]  выполнялись, мы оплатили.
[01:22:36.980 --> 01:22:38.980]  Ну, отсылка с точки зрения
[01:22:39.900 --> 01:22:41.900]  доказательства строгости и понимания, что это такое,
[01:22:42.900 --> 01:22:44.900]  да.
[01:22:45.900 --> 01:22:47.900]  Именно.
[01:22:48.900 --> 01:22:50.900]  То есть, на самом деле так, это техника,
[01:22:51.900 --> 01:22:53.900]  которой удобно это делать, не более того.
[01:22:54.900 --> 01:22:56.900]  Да, то есть это просто техника.
[01:22:57.900 --> 01:22:59.900]  Сейчас я расскажу еще одну,
[01:23:00.900 --> 01:23:02.900]  которая тоже можно удобно что-то доказывать,
[01:23:03.900 --> 01:23:05.900]  именно по той причине.
[01:23:06.900 --> 01:23:08.900]  Давайте попробуем.
[01:23:09.900 --> 01:23:11.900]  Что мы остановились, что мы тут, собственно,
[01:23:12.900 --> 01:23:14.900]  обсуждаем.
[01:23:15.900 --> 01:23:17.900]  Давайте попробуем так.
[01:23:18.900 --> 01:23:20.900]  Еще кратенько пробежаться к тому, что у нас было.
[01:23:21.900 --> 01:23:23.900]  Итак, какая у нас сейчас
[01:23:24.900 --> 01:23:26.900]  основная цель?
[01:23:27.900 --> 01:23:29.900]  Сейчас мы разрабатываем, на примере, очереди на двух стэках.
[01:23:30.900 --> 01:23:32.900]  В первую очередь, действительно, методы,
[01:23:33.900 --> 01:23:35.900]  которые позволят нам говорить
[01:23:36.900 --> 01:23:38.900]  об структуре данных, что несмотря на то,
[01:23:39.900 --> 01:23:41.900]  что отдельные процедуры
[01:23:42.900 --> 01:23:44.900]  работают долго,
[01:23:45.900 --> 01:23:47.900]  там отдельные какие-то операции,
[01:23:48.900 --> 01:23:50.900]  в сумме все работает адекватно.
[01:23:51.900 --> 01:23:53.900]  Вот.
[01:23:54.900 --> 01:23:56.900]  А именно, это означает следующее,
[01:23:57.900 --> 01:23:59.900]  что у нас есть структура данных некоторая,
[01:24:00.900 --> 01:24:02.900]  и мы есть с нуля, есть какое-то нулевое состояние,
[01:24:03.900 --> 01:24:05.900]  обычно характеризующееся тем, что там никаких элементов в ней нет,
[01:24:06.900 --> 01:24:08.900]  в первую очередь.
[01:24:09.900 --> 01:24:11.900]  И реальные времена этих n операций,
[01:24:12.900 --> 01:24:14.900]  то есть, сколько в реальном времени
[01:24:15.900 --> 01:24:17.900]  они выполняются, сколько тактов процессора или там
[01:24:18.900 --> 01:24:20.900]  что-то еще в этом роде, это c1, c2, c3,
[01:24:21.900 --> 01:24:23.900]  и так далее, c.
[01:24:24.900 --> 01:24:26.900]  Ну, какая цель вообще любого анализа структуры временного?
[01:24:27.900 --> 01:24:29.900]  То есть, мы точных c, конечно, не знаем,
[01:24:30.900 --> 01:24:32.900]  потому что они реально могут зависеть от там
[01:24:33.900 --> 01:24:35.900]  действительно конкретного устройства структуры,
[01:24:36.820 --> 01:24:38.820]  называть каких-то конкретных ее состояний,
[01:24:39.820 --> 01:24:41.820]  то есть предыдущих операций, там иногда фазы Луны.
[01:24:42.820 --> 01:24:44.820]  Хотя нет, алгоритмы с фазой Луны мы обсуждать будем
[01:24:45.820 --> 01:24:47.820]  на втором курсе, как мы уже сказали.
[01:24:48.820 --> 01:24:50.820]  Но от разных вещей, поэтому там точное время невозможно.
[01:24:51.820 --> 01:24:53.820]  То есть, одна и та же, один и тот же pushback будет там работать,
[01:24:54.820 --> 01:24:56.820]  сейчас будет работать 22 тактов процессора,
[01:24:57.820 --> 01:24:59.820]  а потом 28.
[01:25:00.820 --> 01:25:02.820]  Но наша цель – попытаться как-то эти c оценить.
[01:25:03.820 --> 01:25:05.820]  Ну, как бы, в классическом случае
[01:25:06.820 --> 01:25:08.820]  мы просто говорим, что каждая операция,
[01:25:09.820 --> 01:25:11.820]  то есть, например, мы говорим, что там скажем,
[01:25:12.980 --> 01:25:14.980]  в куче какая-то операция insert работает не более,
[01:25:15.980 --> 01:25:17.980]  чем O от логарифма, extract min не более, чем O от логарифма,
[01:25:18.980 --> 01:25:20.980]  get min работает не более, чем O от единицы, melt работает
[01:25:21.980 --> 01:25:23.980]  не более, чем O от логарифма.
[01:25:24.980 --> 01:25:26.980]  Это, типа, вот в худшем случае, поэтому мы отсюда можем
[01:25:27.980 --> 01:25:29.980]  вывести, что в худшем случае сумма всех
[01:25:30.980 --> 01:25:32.980]  операций не будет превосходить в данном случае
[01:25:32.980 --> 01:25:35.980]  плюс bn алгорифм, плюс c, плюс dn алгорифм, да?
[01:25:37.980 --> 01:25:41.980]  Но тут мы обнаружим, что если мы незаметно переходим, то есть если мы
[01:25:41.980 --> 01:25:47.980]  рассматриваем только вот последовательность операций, то иногда мы можем заметить,
[01:25:47.980 --> 01:25:53.980]  что нам далеко не всегда актуально, насколько, то есть верно ли, что прям все
[01:25:53.980 --> 01:25:56.980]  операции работают хорошо. Это только один из методов.
[01:26:03.980 --> 01:26:08.980]  Вот. То есть это только один из методов, то есть типа в худшем случае.
[01:26:08.980 --> 01:26:13.980]  Потому что мы обнаружили, то есть цель амортизационного анализа попытаться
[01:26:13.980 --> 01:26:18.980]  отвязаться от того, что каждая, то есть от того, да, сходите, сходите.
[01:26:18.980 --> 01:26:21.980]  Вот. Почему? 45 минут.
[01:26:25.980 --> 01:26:30.980]  Соответственно. Вот. То есть цель амортизационного анализа,
[01:26:30.980 --> 01:26:34.980]  то есть это сказать, что мы отвязываемся от этой вот идеи, что если какая-то
[01:26:34.980 --> 01:26:37.980]  операция может работать долго, значит все плохо.
[01:26:39.980 --> 01:26:42.980]  То есть амортизационный анализ служит показать, что иногда какие-то
[01:26:42.980 --> 01:26:46.980]  операции могут работать долго, но в сумме все равно все будет хорошо.
[01:26:47.980 --> 01:26:53.980]  То есть наша цель, то есть по большому счету, то есть наша цель это
[01:26:53.980 --> 01:26:57.980]  анализировать сумму. То есть наша цель, то есть мы не знаем эти реальные
[01:26:57.980 --> 01:27:01.980]  стоимости, они могут быть разные, но наша цель доказать верхнюю оценку
[01:27:01.980 --> 01:27:05.980]  теперь не на каждую из этих цешек, но на их сумму.
[01:27:05.980 --> 01:27:08.980]  Это вот о том, чем мы вообще глобально занимаемся.
[01:27:08.980 --> 01:27:10.980]  Вот. Понятно, да?
[01:27:10.980 --> 01:27:17.980]  Вот. Ну вот. То есть, ну, пример у нас оказался очередь на двух стэках,
[01:27:17.980 --> 01:27:21.980]  когда мы понимаем, что N операции в очереди, реализованные на двух стэках,
[01:27:21.980 --> 01:27:25.980]  все равно будет O от N, даже несмотря на то, что каждая конкретно из этих цешек
[01:27:25.980 --> 01:27:29.980]  может оказаться там, T от N.
[01:27:30.980 --> 01:27:34.980]  Вот. Все остальное, что мы обсуждаем, это лишь вот методы доказательства того,
[01:27:34.980 --> 01:27:38.980]  что, вот, какие могут быть методы доказательства того, что сумма цешек,
[01:27:38.980 --> 01:27:40.980]  она адекватна.
[01:27:40.980 --> 01:27:44.980]  Ну вот. Ну, первый метод был вот анализ средним, но по сути он нам просто,
[01:27:44.980 --> 01:27:48.980]  то есть это говорит, что давайте просто вот эту, про эту сумму что-то доказывать,
[01:27:48.980 --> 01:27:51.980]  исходя из каких-то общих соображений, просто вот целенаправленно.
[01:27:51.980 --> 01:27:54.980]  То есть в случае очереди на двух стэках мы просто заметим, что по большому счету
[01:27:54.980 --> 01:27:59.980]  по большому счету мы с каждым элементом делаем не более, чем 4 операции со стэками,
[01:27:59.980 --> 01:28:03.980]  то есть добавить первый стэк, вынуть из первого стэка, добавить из второго, вынуть из второго,
[01:28:03.980 --> 01:28:08.980]  и получается, что с каждым элементом суммарно, ну, на больше мы ничего в этих операциях не делаем,
[01:28:08.980 --> 01:28:14.980]  поэтому в сумме получается, что мы делаем не более, чем 4 N действий со стэкам,
[01:28:14.980 --> 01:28:19.980]  то есть получается, у все, O от N работает.
[01:28:19.980 --> 01:28:24.480]  То есть это был вот такой, это вот действительно анализ в среднем,
[01:28:24.480 --> 01:28:29.980]  ну, то есть в среднем, короче, если они, типа, мы хотим доказать, что они там в среднем всего от единицы будут, но...
[01:28:29.980 --> 01:28:33.980]  Вот, но, как мы уже сказали, бывают и другие ситуации.
[01:28:33.980 --> 01:28:39.480]  Теперь, но можно не обязательно прям эту сумму анализировать в среднем.
[01:28:39.480 --> 01:28:42.980]  То есть можно пытаться от этого отходить.
[01:28:42.980 --> 01:28:47.980]  Вот, и с этой целью мы изучаем вот сейчас метод бухгалтерского учета.
[01:28:48.980 --> 01:28:50.980]  Вот.
[01:28:50.980 --> 01:28:54.980]  Ну, вот. Ну, значит, здесь действительно у нас возникло действительно много вопросов,
[01:28:54.980 --> 01:29:01.980]  потому что, да, ну, вот, то есть попробуем еще раз так вдумчиво посмотреть на это с разных точек зрения.
[01:29:01.980 --> 01:29:03.980]  Вот.
[01:29:03.980 --> 01:29:10.980]  Потому что, смотрите, то есть, значит, точка зрения бухгалтерского учета на пальцах.
[01:29:10.980 --> 01:29:14.980]  Ну, вот, на примере очереди на двух стеках будет выглядеть так,
[01:29:14.980 --> 01:29:19.980]  что у нас есть действительно два стека, in и out.
[01:29:19.980 --> 01:29:23.980]  И мы говорим, что когда мы добавляем элемент...
[01:29:23.980 --> 01:29:29.980]  То есть когда мы добавляем элемент в стек in, мы кладем на него монетку.
[01:29:29.980 --> 01:29:33.980]  Вот, получаем монетку.
[01:29:33.980 --> 01:29:35.980]  Вот. И каждый... Ну, вот.
[01:29:35.980 --> 01:29:41.980]  А когда мы перетаскиваем эти элементы из in в out, то эти монетки стираются.
[01:29:41.980 --> 01:29:46.980]  То есть мы как бы одной монеткой оплачиваем одно действие по перегону элементов.
[01:29:49.980 --> 01:29:50.980]  Вот.
[01:29:50.980 --> 01:29:54.980]  И на основании этого мы утверждаем, что суммарно у нас все будет хорошо.
[01:29:54.980 --> 01:29:56.980]  Почему мы это говорим?
[01:29:56.980 --> 01:29:58.980]  Смотрите, то есть сейчас мы вот, то есть на уровне...
[01:29:58.980 --> 01:30:05.980]  То есть на вот своей уровне житейской логики, да, вот мы сейчас забываем про эти вот формальные описания учетной стоимости.
[01:30:05.980 --> 01:30:10.980]  То есть мы сейчас просто говорим, что каждая CIT можно...
[01:30:10.980 --> 01:30:14.980]  Вот мы делим на две части.
[01:30:14.980 --> 01:30:22.980]  Мы говорим, что это CI оплаченное, плюс CI неоплаченное.
[01:30:23.980 --> 01:30:25.980]  Вот, понятно, да?
[01:30:27.980 --> 01:30:29.980]  Говорим мы.
[01:30:29.980 --> 01:30:37.980]  И теперь мы говорим, что действие, которое мы не оплатили, в данном случае получилось сколько?
[01:30:37.980 --> 01:30:41.980]  В нашем случае получается от единиц, потому что что мы не оплачиваем?
[01:30:41.980 --> 01:30:48.980]  Собственно, добавление элементов stack in, а также доставание его элементов из stack out, правда?
[01:30:48.980 --> 01:30:55.980]  На каждой операции получается их от единицы.
[01:30:55.980 --> 01:30:57.980]  Вот давайте даже эту в табличку запишем какую-нибудь.
[01:30:57.980 --> 01:30:59.980]  Так, где бы нам табличку нарисовать?
[01:30:59.980 --> 01:31:01.980]  Вот давайте смотреть.
[01:31:01.980 --> 01:31:03.980]  Вот у нас какие у нас есть операции?
[01:31:03.980 --> 01:31:05.980]  Вот давайте так скажем.
[01:31:05.980 --> 01:31:10.980]  Вот давайте скажем вот реальная стоимость.
[01:31:10.980 --> 01:31:13.980]  Вот давайте я буду писать реальная стоимость.
[01:31:17.980 --> 01:31:18.980]  Вот.
[01:31:18.980 --> 01:31:23.980]  И теперь тут будет оплаченное, а тут будет неоплаченное.
[01:31:23.980 --> 01:31:25.980]  Вот, можно так.
[01:31:25.980 --> 01:31:29.980]  И тогда смотрите, вот у нас есть push в нашей очереди.
[01:31:29.980 --> 01:31:31.980]  Есть операция pop обычной.
[01:31:31.980 --> 01:31:36.980]  И есть операция pop с перекладыванием.
[01:31:36.980 --> 01:31:40.980]  Ну то есть вот тот самый сложный pop, который вот перекидывает, да?
[01:31:40.980 --> 01:31:42.980]  Значит поехали.
[01:31:42.980 --> 01:31:44.980]  Push у нас за сколько работает?
[01:31:44.980 --> 01:31:49.980]  Push, смотрите, реальная стоимость push это 1.
[01:31:49.980 --> 01:31:51.980]  Но я тут ошки не буду писать.
[01:31:51.980 --> 01:31:55.980]  Вот.
[01:31:55.980 --> 01:31:56.980]  Сколько мы оплачиваем?
[01:31:56.980 --> 01:31:57.980]  Мы ничего не платим.
[01:31:57.980 --> 01:32:00.980]  То есть мы да, пишем 0 в данном случае.
[01:32:00.980 --> 01:32:03.980]  То есть мы ничего не оплачиваем.
[01:32:03.980 --> 01:32:05.980]  То есть мы только получаем монетку в данном случае.
[01:32:05.980 --> 01:32:06.980]  Ну вот.
[01:32:06.980 --> 01:32:07.980]  Ну вот.
[01:32:07.980 --> 01:32:10.980]  И не оплаченных соответственно вот то самое одно действие.
[01:32:10.980 --> 01:32:13.980]  Ну то есть вот это плюс это должно быть вот это, да?
[01:32:13.980 --> 01:32:15.980]  Теперь pop обычный.
[01:32:15.980 --> 01:32:18.980]  То есть предположим, что мы сказали, нас попросили достать элементы,
[01:32:18.980 --> 01:32:22.980]  мы полезли в stackout и обнаружили, что их там есть.
[01:32:22.980 --> 01:32:24.980]  Но тогда абсолютно та же ситуация.
[01:32:24.980 --> 01:32:28.980]  Мы ничего не платим.
[01:32:28.980 --> 01:32:32.980]  А сколько работает pop с перекладыванием?
[01:32:32.980 --> 01:32:33.980]  Он работает за...
[01:32:33.980 --> 01:32:36.980]  Ну сначала вы делаете перекладывание за от k,
[01:32:36.980 --> 01:32:42.980]  где k количество элементов в стеке in на момент начала операции, да?
[01:32:42.980 --> 01:32:46.980]  То есть количество push с последнего перекладывания.
[01:32:46.980 --> 01:32:47.980]  Ну да.
[01:32:47.980 --> 01:32:50.980]  Нет, ну не-не-не, почему последнее перекладывание?
[01:32:50.980 --> 01:32:53.980]  Ну после последнего перекладывания сколько push было?
[01:32:53.980 --> 01:32:57.980]  Ну да, можно и так сказать, но это нам сейчас даже не принципиально особо.
[01:32:57.980 --> 01:32:58.980]  В принципе, да.
[01:32:58.980 --> 01:33:01.980]  И еще все-таки добавим плюс один.
[01:33:01.980 --> 01:33:05.980]  Ну потому что k могло быть равно нулю на самом деле, да?
[01:33:05.980 --> 01:33:07.980]  Ну вот на всякий случай там один напишем.
[01:33:07.980 --> 01:33:11.980]  Но этот один просто будет помещать, что у нас есть то самое одно действие,
[01:33:11.980 --> 01:33:13.980]  которым мы элементы из аута достаем.
[01:33:13.980 --> 01:33:15.980]  А что?
[01:33:15.980 --> 01:33:21.980]  Ну понимаете, это вопрос константы.
[01:33:21.980 --> 01:33:22.980]  Понимаете, да.
[01:33:22.980 --> 01:33:27.980]  Ну можем написать тут 2k, если хотите, конечно.
[01:33:27.980 --> 01:33:34.980]  Нет, пока мы никакие монеты вообще не вводим.
[01:33:34.980 --> 01:33:42.980]  Ну, точнее так, не-не-не, тут мы никаких монет не учитываем.
[01:33:42.980 --> 01:33:45.980]  Другой вопрос, какую константу мы тут вводим?
[01:33:45.980 --> 01:33:49.980]  То есть да, нам, наверное, логично сказать, что если у нас за одно действие
[01:33:49.980 --> 01:33:53.980]  мы делаем один пуш или один поп, то, наверное, давайте напишем 2k.
[01:33:53.980 --> 01:33:57.980]  Хотя по большому счету это не принципиально, потому что это верхняя оценка.
[01:33:57.980 --> 01:33:59.980]  То есть это такая.
[01:33:59.980 --> 01:34:03.980]  Ну теперь смотрим, сколько мы оплачиваем.
[01:34:03.980 --> 01:34:06.980]  Вот, ну здесь вот с 2k возникает такой момент.
[01:34:06.980 --> 01:34:11.980]  Заметим, что мы платим k монет.
[01:34:11.980 --> 01:34:14.980]  Но правда заметим, что как бы тут вопрос в курсе валют,
[01:34:14.980 --> 01:34:17.980]  потому что, в принципе, вместо одной монетки мы можем и две монетки положить.
[01:34:17.980 --> 01:34:18.980]  Правда?
[01:34:18.980 --> 01:34:21.980]  Поэтому мы говорим, что давайте вот кладем теперь по две монетки,
[01:34:21.980 --> 01:34:24.980]  если мы объявили, что стоимость прикладывания одного элемента в другое это 2,
[01:34:24.980 --> 01:34:26.980]  это 2, а не 1.
[01:34:26.980 --> 01:34:28.980]  Поэтому пишем здесь 2.
[01:34:28.980 --> 01:34:31.980]  И последнее действие, да, это не особо принципиально,
[01:34:31.980 --> 01:34:34.980]  но просто раз уж возникает вопрос, давайте это вот скрыть.
[01:34:34.980 --> 01:34:40.980]  Смотрите, ну просто психологически, видимо, удобно так, смотрите,
[01:34:40.980 --> 01:34:45.980]  что мы говорим, что вот здесь положить элемент в стек это одно действие,
[01:34:45.980 --> 01:34:47.980]  и достать элементы в стек одно действие.
[01:34:47.980 --> 01:34:51.980]  А тут мы одной монеткой оплачиваем как бы доставание элемента из стека in
[01:34:51.980 --> 01:34:53.980]  и помещение его в стека out.
[01:34:53.980 --> 01:34:55.980]  То есть поэтому логично два писания.
[01:34:55.980 --> 01:34:58.980]  А в том числе действие оплачено и получено?
[01:34:58.980 --> 01:35:03.980]  Да, реальная стоимость, это сколько оплачено, сколько не оплачено.
[01:35:03.980 --> 01:35:07.980]  И теперь как анализировать сумму, да?
[01:35:07.980 --> 01:35:10.980]  Можно анализировать, что...
[01:35:10.980 --> 01:35:13.980]  Смотрите, то есть как теперь анализировать действительно сумму?
[01:35:13.980 --> 01:35:16.980]  Можно анализировать, что у нас есть push,
[01:35:16.980 --> 01:35:23.980]  допустим, если у нас тут есть a push, b pop и c pop с перекладыванием, да?
[01:35:23.980 --> 01:35:27.980]  Тогда по реальной стоимости у нас бы получилась асимптотика,
[01:35:27.980 --> 01:35:34.980]  не превосходящая a, плюс b, плюс c умножить на вот этих вот k.
[01:35:34.980 --> 01:35:37.980]  Я могу так написать, max k.
[01:35:37.980 --> 01:35:39.980]  Обычно в классическом анализе мы говорим, что это k,
[01:35:39.980 --> 01:35:43.980]  не происходит какого-то максимального k.
[01:35:43.980 --> 01:35:46.980]  Ну понятно, от k, конечно, но не суть.
[01:35:46.980 --> 01:35:49.980]  Но это max k у нас не превосходит, конечно же, n.
[01:35:49.980 --> 01:35:52.980]  И более того, легко достигнуть пример, когда это бывает.
[01:35:52.980 --> 01:35:54.980]  Поэтому в таком анализе мы ничего не можем сделать,
[01:35:54.980 --> 01:35:57.980]  как сказать, что это a, плюс b, плюс c.
[01:35:57.980 --> 01:36:00.980]  Вот так.
[01:36:00.980 --> 01:36:03.980]  А так как у нас c не превосходит только n,
[01:36:03.980 --> 01:36:05.980]  то это получается не превосходя n квадрата,
[01:36:05.980 --> 01:36:08.980]  и получается оценка, что это все работает за вот n квадрат.
[01:36:08.980 --> 01:36:11.980]  Да, это верное утверждение.
[01:36:11.980 --> 01:36:13.980]  Но не точно.
[01:36:13.980 --> 01:36:17.980]  Потому что сумма всех кашек у нас не равна сумме.
[01:36:17.980 --> 01:36:19.980]  Да, потому что...
[01:36:19.980 --> 01:36:21.980]  Ну да, то есть на самом деле да.
[01:36:21.980 --> 01:36:23.980]  То есть с точки зрения среднего можно было сказать,
[01:36:23.980 --> 01:36:28.980]  что на самом деле тут правильно было бы написать не c,
[01:36:28.980 --> 01:36:31.980]  а сумма всех кашек на самом деле.
[01:36:31.980 --> 01:36:32.980]  А она меньше или равна?
[01:36:32.980 --> 01:36:33.980]  Да, можно было так написать.
[01:36:33.980 --> 01:36:36.980]  Но мы сейчас анализируем по-другому.
[01:36:36.980 --> 01:36:40.980]  Мы сейчас анализируем... У нас теперь рассуждение такое.
[01:36:40.980 --> 01:36:42.980]  Потому что смотрите,
[01:36:42.980 --> 01:36:44.980]  вместо того, чтобы суммировать реальные стоимости,
[01:36:44.980 --> 01:36:48.980]  мы суммируем, что оплачено и что не оплачено.
[01:36:48.980 --> 01:36:51.980]  Правда?
[01:36:51.980 --> 01:36:53.980]  Поэтому теперь суммируем.
[01:36:53.980 --> 01:36:55.980]  То, что не оплачено,
[01:36:55.980 --> 01:36:57.980]  это откровенно a, плюс b, плюс c, то есть n.
[01:36:57.980 --> 01:36:59.980]  Да?
[01:36:59.980 --> 01:37:02.980]  А теперь оплаченное.
[01:37:02.980 --> 01:37:06.980]  Заметим теперь, что каждая оплаченная не превосходит...
[01:37:06.980 --> 01:37:08.980]  Ну то есть сумма оплаченная,
[01:37:08.980 --> 01:37:10.980]  так как у нас мы никогда не тратили монетки,
[01:37:10.980 --> 01:37:12.980]  которые не получали,
[01:37:12.980 --> 01:37:14.980]  то получается, что здесь у нас получается,
[01:37:14.980 --> 01:37:16.980]  что... Ну то есть здесь даже уже не важно,
[01:37:16.980 --> 01:37:19.980]  конкретно тут 002k, это даже не важно.
[01:37:19.980 --> 01:37:21.980]  Важно то, что сумма всего оплаченного,
[01:37:21.980 --> 01:37:23.980]  то есть вот давайте я так буду писать.
[01:37:23.980 --> 01:37:25.980]  Вот сумма всех циитых, она равна.
[01:37:25.980 --> 01:37:30.980]  Сумма циитых неоплаченных,
[01:37:30.980 --> 01:37:35.980]  плюс сумма всех циитых оплаченных.
[01:37:38.980 --> 01:37:40.980]  Вот.
[01:37:40.980 --> 01:37:42.980]  Рукопрохальство получается,
[01:37:42.980 --> 01:37:44.980]  нам все равно нужно проверять,
[01:37:44.980 --> 01:37:46.980]  что на каждом префексе не отрицается.
[01:37:46.980 --> 01:37:48.980]  Ну да, мы говорим, что оно логическим образом спорится,
[01:37:48.980 --> 01:37:50.980]  и ничего не говорим о том, почему.
[01:37:50.980 --> 01:37:52.980]  Нет, в смысле, не понял,
[01:37:52.980 --> 01:37:54.980]  почему рукопрохальство?
[01:37:54.980 --> 01:37:56.980]  Мы будем все равно проверить,
[01:37:56.980 --> 01:37:58.980]  почему у нас на каждом префексе не отрицается,
[01:37:58.980 --> 01:38:00.980]  чтобы вообще корректно было.
[01:38:00.980 --> 01:38:02.980]  Нет, смотрите, тут другая логика.
[01:38:02.980 --> 01:38:04.980]  Тут нету никаких префиксов.
[01:38:04.980 --> 01:38:06.980]  Так, вот в этом рассуждении, внимание,
[01:38:06.980 --> 01:38:08.980]  никаких префиксов нет.
[01:38:08.980 --> 01:38:10.980]  Есть просто утверждение о том,
[01:38:10.980 --> 01:38:12.980]  что мы никогда не тратим монет больше,
[01:38:12.980 --> 01:38:14.980]  чем получаем.
[01:38:14.980 --> 01:38:16.980]  То есть смотрите, пока это...
[01:38:16.980 --> 01:38:18.980]  Заметим так.
[01:38:20.980 --> 01:38:22.980]  Ну, оно у нас работает по той причине,
[01:38:22.980 --> 01:38:24.980]  что мы как бы для каждого элемента
[01:38:24.980 --> 01:38:26.980]  монетки, которые мы тратим для его переноса,
[01:38:26.980 --> 01:38:28.980]  находятся прямо на нем.
[01:38:28.980 --> 01:38:30.980]  По сути, доказательство этого утверждения,
[01:38:30.980 --> 01:38:32.980]  которое нам нужно для этого доказательства,
[01:38:32.980 --> 01:38:34.980]  уже есть по сути доказательство всей задачи.
[01:38:34.980 --> 01:38:36.980]  То есть мы ничем не упростили жизнь?
[01:38:36.980 --> 01:38:38.980]  Нет, я просто показываю
[01:38:38.980 --> 01:38:40.980]  разные методы мышления.
[01:38:42.980 --> 01:38:44.980]  Нет, понятно, что с точки зрения того,
[01:38:44.980 --> 01:38:46.980]  чтобы доказать, что там в среднем
[01:38:46.980 --> 01:38:48.980]  все работает, в статах
[01:38:48.980 --> 01:38:50.980]  мы делаем бесполезную работу.
[01:38:50.980 --> 01:38:52.980]  Мы не для этого сейчас это...
[01:38:52.980 --> 01:38:54.980]  Мы это делаем для того, чтобы понять,
[01:38:54.980 --> 01:38:56.980]  как еще можно мыслить.
[01:38:56.980 --> 01:38:58.980]  Потому что в большинстве ситуаций
[01:38:58.980 --> 01:39:00.980]  вот так вот вы застрелитесь мыслить.
[01:39:00.980 --> 01:39:02.980]  Потому что нельзя, там будут
[01:39:02.980 --> 01:39:04.980]  сильно более сложные структуры.
[01:39:04.980 --> 01:39:06.980]  Вот тот же вектор, например.
[01:39:06.980 --> 01:39:08.980]  Ну, чуть позже обсудим.
[01:39:10.980 --> 01:39:12.980]  Ну, скажем так, там
[01:39:12.980 --> 01:39:14.980]  вам будет гораздо сложнее
[01:39:14.980 --> 01:39:16.980]  прямым образом
[01:39:16.980 --> 01:39:18.980]  доказывать, что там
[01:39:18.980 --> 01:39:20.980]  суммарное количество действий ОАТМ.
[01:39:22.980 --> 01:39:24.980]  Вот.
[01:39:24.980 --> 01:39:26.980]  То есть там какую-нибудь сумму степеней двоек
[01:39:26.980 --> 01:39:28.980]  вы, конечно, там можете расписать?
[01:39:28.980 --> 01:39:30.980]  Но не будет.
[01:39:30.980 --> 01:39:32.980]  Вот сейчас я поэтому и показываю.
[01:39:32.980 --> 01:39:34.980]  То есть, смотрите, другой метод, просто другой.
[01:39:34.980 --> 01:39:36.980]  То есть вместо того, чтобы доказывать
[01:39:36.980 --> 01:39:38.980]  в среднем, мы говорим, что сумма цих
[01:39:38.980 --> 01:39:40.980]  это неоплаченная и оплаченная.
[01:39:42.980 --> 01:39:44.980]  Значит, теперь мы говорим,
[01:39:44.980 --> 01:39:46.980]  мы пользуемся тем,
[01:39:46.980 --> 01:39:48.980]  то есть это как бы то же самое, что
[01:39:48.980 --> 01:39:50.980]  сумма неоплаченная
[01:39:52.980 --> 01:39:54.980]  плюс сумма
[01:39:54.980 --> 01:39:56.980]  выданных монеток.
[01:40:00.980 --> 01:40:02.980]  Так.
[01:40:04.980 --> 01:40:06.980]  Вот.
[01:40:06.980 --> 01:40:08.980]  И в принципе, на каком-то уровне можно остановить.
[01:40:08.980 --> 01:40:10.980]  То есть в данном случае можно было так и сказать,
[01:40:10.980 --> 01:40:12.980]  что в нашем случае
[01:40:12.980 --> 01:40:14.980]  неоплаченных действий, как мы уже поняли,
[01:40:14.980 --> 01:40:16.980]  Н, ну там ОАТМ,
[01:40:16.980 --> 01:40:18.980]  а выданных
[01:40:18.980 --> 01:40:20.980]  монеток у нас тоже ОАТМ,
[01:40:20.980 --> 01:40:22.980]  потому что мы на каждый
[01:40:22.980 --> 01:40:24.980]  нот, потому что мы там на каждый
[01:40:24.980 --> 01:40:26.980]  пуш кладем
[01:40:26.980 --> 01:40:28.980]  две монетки.
[01:40:28.980 --> 01:40:30.980]  Понятно, да?
[01:40:30.980 --> 01:40:32.980]  То есть в данном случае
[01:40:32.980 --> 01:40:34.980]  можно было доказывать вот таким образом.
[01:40:36.980 --> 01:40:38.980]  Вот.
[01:40:38.980 --> 01:40:40.980]  Теперь переформулировка того же
[01:40:40.980 --> 01:40:42.980]  самого, теперь еще более формальная,
[01:40:42.980 --> 01:40:44.980]  может выглядеть так, что давайте
[01:40:44.980 --> 01:40:46.980]  введем учетную стоимость.
[01:40:48.980 --> 01:40:50.980]  То есть смотрите, вот теперь
[01:40:50.980 --> 01:40:52.980]  это мы отсекли, вот так вот, да,
[01:40:52.980 --> 01:40:54.980]  это мы тут с этой стороны смотрели.
[01:40:54.980 --> 01:40:56.980]  А теперь можно ввести следующее.
[01:40:56.980 --> 01:40:58.980]  Теперь мы говорим, что у нас рядом
[01:40:58.980 --> 01:41:00.980]  с каждой операцией
[01:41:00.980 --> 01:41:02.980]  мы будем вводить
[01:41:02.980 --> 01:41:04.980]  то есть будем вводить, сколько
[01:41:04.980 --> 01:41:06.980]  на каждую операцию вы должны получить
[01:41:06.980 --> 01:41:08.980]  монеток и сколько потратить.
[01:41:08.980 --> 01:41:10.980]  Это мы должны сначала подогнать, чтобы потом доказывать, да?
[01:41:12.980 --> 01:41:14.980]  Ну, скажем так, чем лучше подгоните,
[01:41:14.980 --> 01:41:16.980]  тем лучше результат получите, да.
[01:41:16.980 --> 01:41:18.980]  Но при этом
[01:41:18.980 --> 01:41:20.980]  есть оговорки.
[01:41:20.980 --> 01:41:22.980]  Оговорки заключаются в том, что
[01:41:22.980 --> 01:41:24.980]  у нас все еще действует,
[01:41:24.980 --> 01:41:26.980]  как бы принцип, что мы не тратим
[01:41:26.980 --> 01:41:28.980]  монеток больше, чем получаем,
[01:41:28.980 --> 01:41:30.980]  превращается вот в такое неравенство.
[01:41:32.980 --> 01:41:34.980]  Вот. И это неравенство
[01:41:34.980 --> 01:41:36.980]  приводит нас к тому, что
[01:41:36.980 --> 01:41:38.980]  ну вот, то есть
[01:41:38.980 --> 01:41:40.980]  из этого неравенства следует,
[01:41:40.980 --> 01:41:42.980]  что сумма вот таким вот
[01:41:42.980 --> 01:41:44.980]  образом введенных учетных стоимости
[01:41:44.980 --> 01:41:46.980]  оказывается больше либо равна сумме реальных.
[01:41:46.980 --> 01:41:48.980]  То есть для чего
[01:41:48.980 --> 01:41:50.980]  мы это делаем? То есть делается это
[01:41:50.980 --> 01:41:52.980]  мы не знаем реальных стоимости,
[01:41:52.980 --> 01:41:54.980]  но мы знаем, что мы их сумму реальных
[01:41:54.980 --> 01:41:56.980]  стоимости можно оценивать сверху
[01:41:56.980 --> 01:41:58.980]  учетными стоимостими.
[01:41:58.980 --> 01:42:00.980]  И поэтому
[01:42:00.980 --> 01:42:02.980]  получается, что
[01:42:02.980 --> 01:42:04.980]  если мы как бы сумеем подогнать
[01:42:04.980 --> 01:42:06.980]  правила игры так, чтобы
[01:42:06.980 --> 01:42:08.980]  сумма, чтобы каждая учетная
[01:42:08.980 --> 01:42:10.980]  стоимость была у от единицы, то тем
[01:42:10.980 --> 01:42:12.980]  самым мы докажем, что
[01:42:12.980 --> 01:42:14.980]  суммарно все это работает за у от
[01:42:14.980 --> 01:42:16.980]  n операции.
[01:42:16.980 --> 01:42:18.980]  В данном случае это будет выглядеть так.
[01:42:18.980 --> 01:42:20.980]  То есть теперь сейчас
[01:42:20.980 --> 01:42:22.980]  рисуем примерно ту же таблицу, но
[01:42:22.980 --> 01:42:24.980]  в профиль. Смотрите.
[01:42:24.980 --> 01:42:26.980]  То есть тогда у нас технология
[01:42:26.980 --> 01:42:28.980]  будет звучать так.
[01:42:28.980 --> 01:42:30.980]  Итак, push, pop
[01:42:30.980 --> 01:42:32.980]  и pop
[01:42:32.980 --> 01:42:34.980]  с перекладыванием.
[01:42:36.980 --> 01:42:38.980]  Она будет вот так звучать.
[01:42:40.980 --> 01:42:42.980]  Пум-пум-пум.
[01:42:42.980 --> 01:42:44.980]  И значит поехали.
[01:42:44.980 --> 01:42:46.980]  Итак, пишем. Вот есть у нас
[01:42:46.980 --> 01:42:48.980]  как всегда реальная стоимость.
[01:42:50.980 --> 01:42:52.980]  Есть вот это вот полученные
[01:42:52.980 --> 01:42:54.980]  монетки.
[01:42:54.980 --> 01:42:56.980]  То есть PIT.
[01:42:56.980 --> 01:42:58.980]  Давайте так.
[01:42:58.980 --> 01:43:00.980]  PIT полученные монетки, QIT
[01:43:00.980 --> 01:43:02.980]  и соответственно учетная стоимость.
[01:43:02.980 --> 01:43:04.980]  Давайте я так и буду так описать.
[01:43:04.980 --> 01:43:06.980]  Тут CIT, тут соответственно CIT.
[01:43:06.980 --> 01:43:08.980]  Вот такое.
[01:43:08.980 --> 01:43:10.980]  Значит поехали. Push.
[01:43:10.980 --> 01:43:12.980]  Мы будем объявлять, что
[01:43:12.980 --> 01:43:14.980]  мы будем делать одно действие
[01:43:14.980 --> 01:43:16.980]  в push
[01:43:16.980 --> 01:43:18.980]  и получать, как мы договорились,
[01:43:18.980 --> 01:43:20.980]  2 монетки.
[01:43:20.980 --> 01:43:22.980]  Понимаете, да?
[01:43:22.980 --> 01:43:24.980]  Отратить ноль.
[01:43:28.980 --> 01:43:30.980]  В результате учетная стоимость
[01:43:30.980 --> 01:43:32.980]  оказывается 3.
[01:43:34.980 --> 01:43:36.980]  Да, то есть обратите внимание,
[01:43:36.980 --> 01:43:38.980]  учетная стоимость здесь оказалась больше.
[01:43:38.980 --> 01:43:40.980]  Да.
[01:43:40.980 --> 01:43:42.980]  Но к чему нас это приведет? Теперь pop.
[01:43:42.980 --> 01:43:44.980]  Что у нас происходит с pop?
[01:43:44.980 --> 01:43:46.980]  Чего?
[01:43:46.980 --> 01:43:48.980]  Ну pop обычный конечно.
[01:43:48.980 --> 01:43:50.980]  Да, за единицу.
[01:43:50.980 --> 01:43:52.980]  Но мы говорим, что мы
[01:43:52.980 --> 01:43:54.980]  монеток за это не получаем
[01:43:54.980 --> 01:43:56.980]  и не тратим, поэтому учетная стоимость остается единицей.
[01:43:58.980 --> 01:44:00.980]  И вот начинается
[01:44:00.980 --> 01:44:02.980]  самое интересное.
[01:44:02.980 --> 01:44:04.980]  Если произошел pop с перекладыванием
[01:44:04.980 --> 01:44:06.980]  размера k, то есть мы переложили
[01:44:06.980 --> 01:44:08.980]  k элементов,
[01:44:08.980 --> 01:44:10.980]  то мы объявляем следующее.
[01:44:10.980 --> 01:44:12.980]  Мы объявляем 2k
[01:44:12.980 --> 01:44:14.980]  плюс 1.
[01:44:14.980 --> 01:44:16.980]  То есть это реальная стоимость, да?
[01:44:16.980 --> 01:44:18.980]  При этом
[01:44:18.980 --> 01:44:20.980]  мы ничего не получаем,
[01:44:22.980 --> 01:44:24.980]  но зато тратим
[01:44:24.980 --> 01:44:26.980]  2k монеток на этот раз.
[01:44:26.980 --> 01:44:28.980]  Вот.
[01:44:28.980 --> 01:44:30.980]  Наконец-то мы что-то потратили.
[01:44:32.980 --> 01:44:34.980]  Вот. И тогда
[01:44:34.980 --> 01:44:36.980]  учетная стоимость оказывается
[01:44:36.980 --> 01:44:38.980]  единица.
[01:44:38.980 --> 01:44:40.980]  Вот.
[01:44:40.980 --> 01:44:42.980]  То есть смотрите,
[01:44:42.980 --> 01:44:44.980]  в принципе то же самое.
[01:44:44.980 --> 01:44:46.980]  Этот анализ, конечно, остается
[01:44:46.980 --> 01:44:48.980]  как бы понятно, что для этого
[01:44:48.980 --> 01:44:50.980]  надо только показать, что мы никогда не работаем
[01:44:50.980 --> 01:44:52.980]  в долг.
[01:44:52.980 --> 01:44:54.980]  Потому что если мы предполагаем, что мы тут пишем что угодно,
[01:44:54.980 --> 01:44:56.980]  мы тут всегда пишем тут ноль, а тут что-нибудь большое,
[01:44:56.980 --> 01:44:58.980]  то мы про любую структуру могли бы так сказать,
[01:44:58.980 --> 01:45:00.980]  что учетная стоимость вот единиц.
[01:45:00.980 --> 01:45:02.980]  Но никакого физического смысла
[01:45:02.980 --> 01:45:04.980]  в этом нет. Это будут просто абстрактные,
[01:45:04.980 --> 01:45:06.980]  никак не связанные с реальной структурой данных
[01:45:06.980 --> 01:45:08.980]  ее временем работы цифры.
[01:45:08.980 --> 01:45:10.980]  Там, накрученные показатели какие-то.
[01:45:10.980 --> 01:45:12.980]  Значит нужно доказать, что в любом претексе
[01:45:12.980 --> 01:45:14.980]  да, то есть
[01:45:14.980 --> 01:45:16.980]  ну или что то же самое надо по-любому доказать,
[01:45:16.980 --> 01:45:18.980]  что мы никогда не тратим
[01:45:18.980 --> 01:45:20.980]  больше, чем мы получаем.
[01:45:20.980 --> 01:45:22.980]  А доказать это очень просто.
[01:45:22.980 --> 01:45:24.980]  Ну в нашем случае.
[01:45:24.980 --> 01:45:26.980]  Потому что доказать очень просто. Я говорю, что давайте
[01:45:26.980 --> 01:45:28.980]  мы на каждой
[01:45:28.980 --> 01:45:30.980]  просто эти два или эти две
[01:45:30.980 --> 01:45:32.980]  две монетки будем класть вот скажем
[01:45:32.980 --> 01:45:34.980]  на элемент вот в первом стеке.
[01:45:34.980 --> 01:45:36.980]  А как это формально написать, типа
[01:45:36.980 --> 01:45:38.980]  что мы вводим функцию, связанную с элементом, или что?
[01:45:38.980 --> 01:45:40.980]  Кажется, что можно
[01:45:40.980 --> 01:45:42.980]  Нет, в принципе в смысле
[01:45:42.980 --> 01:45:44.980]  Ну в смысле, как вот это вот, типа
[01:45:44.980 --> 01:45:46.980]  наше интуитивное представление, что вы положили две монетки
[01:45:46.980 --> 01:45:48.980]  на каждый элемент? Скажем так, пап,
[01:45:48.980 --> 01:45:50.980]  оно до самом деле, оно достаточно интуитивно
[01:45:50.980 --> 01:45:52.980]  оно мне кажется достаточно понятно.
[01:45:52.980 --> 01:45:54.980]  То есть не больше, чем количество элементов, которые
[01:45:54.980 --> 01:45:56.980]  ты в целом положил.
[01:45:56.980 --> 01:45:58.980]  У нас же будет еще трески с пластом?
[01:45:58.980 --> 01:46:00.980]  Будет. Но кстати, может быть он
[01:46:00.980 --> 01:46:02.980]  этой формальностью и займется, но
[01:46:02.980 --> 01:46:04.980]  мне кажется, что он скорее запутает.
[01:46:04.980 --> 01:46:06.980]  Потому что в данном случае, то есть вот это
[01:46:06.980 --> 01:46:08.980]  такое рассуждение в данном случае кажется максимально понятно.
[01:46:08.980 --> 01:46:10.980]  Можно разбить
[01:46:10.980 --> 01:46:12.980]  можно разбить
[01:46:12.980 --> 01:46:14.980]  префикс по попам с перекладываниями.
[01:46:14.980 --> 01:46:16.980]  Тогда если на
[01:46:16.980 --> 01:46:18.980]  префексе
[01:46:18.980 --> 01:46:20.980]  до было сумма больше
[01:46:20.980 --> 01:46:22.980]  рано нуля, то
[01:46:22.980 --> 01:46:24.980]  доказать, что на новом префексе
[01:46:24.980 --> 01:46:26.980]  в новом отрезке будет сумма
[01:46:26.980 --> 01:46:28.980]  тоже больше рано нуля. Ну будет.
[01:46:28.980 --> 01:46:30.980]  Ты собираешь на отрезке между попами?
[01:46:30.980 --> 01:46:32.980]  Да, на отрезке между попами с перекладываниями.
[01:46:32.980 --> 01:46:34.980]  Приложу пример, когда твоя рулупина
[01:46:34.980 --> 01:46:36.980]  сначала все пуши,
[01:46:36.980 --> 01:46:38.980]  а потом начинается попа с перекладываниями.
[01:46:38.980 --> 01:46:40.980]  Да, и ты разбиваешь
[01:46:40.980 --> 01:46:42.980]  весь свой отрезок работы
[01:46:42.980 --> 01:46:44.980]  на попы с перекладываниями. Да-да.
[01:46:44.980 --> 01:46:46.980]  И тогда если ты на первом докажешь, что там больше рано нуля,
[01:46:46.980 --> 01:46:48.980]  то на втором тут у нас
[01:46:48.980 --> 01:46:50.980]  на первом префексе. Нет, но по большому счету да.
[01:46:50.980 --> 01:46:52.980]  Но я не знаю, то есть просто
[01:46:52.980 --> 01:46:54.980]  мне кажется, когда вообразить в себе, что мы положили
[01:46:54.980 --> 01:46:56.980]  монетки, это самое уже удобное.
[01:46:56.980 --> 01:46:58.980]  То есть можно там, конечно, формально
[01:46:58.980 --> 01:47:00.980]  что-то там требовать, что пусть у нас в кошельке
[01:47:00.980 --> 01:47:02.980]  написано какое, то есть там докажем, что
[01:47:02.980 --> 01:47:04.980]  то на момент попа с перекладыванием размера k
[01:47:04.980 --> 01:47:06.980]  у нас в кошельке
[01:47:06.980 --> 01:47:08.980]  будет не менее чем 2k монет.
[01:47:08.980 --> 01:47:10.980]  Ладно, для красоты лучше просто докажем,
[01:47:10.980 --> 01:47:12.980]  что их ровно 2k. Там
[01:47:12.980 --> 01:47:14.980]  доказательства. Для этого мы докажем,
[01:47:14.980 --> 01:47:16.980]  что
[01:47:16.980 --> 01:47:18.980]  для этого мы докажем просто, что
[01:47:18.980 --> 01:47:20.980]  там можно формально там писать, что
[01:47:20.980 --> 01:47:22.980]  на самом деле у нас количество
[01:47:22.980 --> 01:47:24.980]  монет, которые у нас в кошельке, равно 2
[01:47:24.980 --> 01:47:26.980]  умножить на текущий размер stack in.
[01:47:26.980 --> 01:47:28.980]  Честно, по индукции
[01:47:28.980 --> 01:47:30.980]  прям доказательств. Так если вы любите
[01:47:30.980 --> 01:47:32.980]  вот такие формальности,
[01:47:32.980 --> 01:47:34.980]  ну, честно скажу,
[01:47:34.980 --> 01:47:36.980]  в данном случае, честно говоря,
[01:47:36.980 --> 01:47:38.980]  они не очень понятны.
[01:47:38.980 --> 01:47:40.980]  Просто не очень понятно зачем.
[01:47:40.980 --> 01:47:42.980]  А вы будете принимать решение
[01:47:42.980 --> 01:47:44.980]  с 2 монетки, наверное?
[01:47:44.980 --> 01:47:46.980]  Да.
[01:47:46.980 --> 01:47:48.980]  Не, зря на самом деле.
[01:47:48.980 --> 01:47:50.980]  Ну, смотрите, понимаете, тут на самом деле
[01:47:50.980 --> 01:47:52.980]  действительно такой баланс это все происходит.
[01:47:52.980 --> 01:47:54.980]  То есть действительно, что это может показаться
[01:47:54.980 --> 01:47:56.980]  кому-то кажется формальным, кому-то кажется
[01:47:56.980 --> 01:47:58.980]  неформальным.
[01:47:58.980 --> 01:48:00.980]  Ну, вот действительно есть такое.
[01:48:00.980 --> 01:48:02.980]  То есть у нас тоже конечно
[01:48:02.980 --> 01:48:04.980]  я, по идее, compromise
[01:48:04.980 --> 01:48:06.980]  формальности, но здесь вопрос такой.
[01:48:06.980 --> 01:48:08.980]  Зачем формальность нужно,
[01:48:10.980 --> 01:48:12.980]  в принципе.
[01:48:12.980 --> 01:48:14.980]  То есть на самом деле
[01:48:14.980 --> 01:48:16.980]  формальность
[01:48:16.980 --> 01:48:18.980]  на самом деле нужна, для того,
[01:48:18.980 --> 01:48:20.980]  чтобы
[01:48:20.980 --> 01:48:22.980]  как минимум один человек понял другого
[01:48:22.980 --> 01:48:24.980]  вот.
[01:48:24.980 --> 01:48:26.980]  Но и для того, чтобы
[01:48:26.980 --> 01:48:28.980]  суждения были абсолютно строги.
[01:48:28.980 --> 01:48:30.980]  Чтобы не рукомахаться, то чего-то не было.
[01:48:30.980 --> 01:48:32.980]  Ну вот.
[01:48:32.980 --> 01:48:34.980]  Нет, ну практически да.
[01:48:34.980 --> 01:48:36.980]  Нет, ну это зачем нужна строгость?
[01:48:36.980 --> 01:48:38.980]  Ну это как, типа, заказывать, что корень из двух,
[01:48:38.980 --> 01:48:40.980]  ну да.
[01:48:40.980 --> 01:48:42.980]  Ну там как угодно, да.
[01:48:42.980 --> 01:48:44.980]  Ну можно, да. Ну в конце концов, что тут?
[01:48:44.980 --> 01:48:46.980]  Древние греки просто когда-то
[01:48:46.980 --> 01:48:48.980]  геометрические доказательства сводили
[01:48:48.980 --> 01:48:50.980]  к рисованию чертежа и говорению слова
[01:48:50.980 --> 01:48:52.980]  смотри. Вот типа
[01:48:52.980 --> 01:48:54.980]  очевидно. Вот.
[01:48:54.980 --> 01:48:56.980]  Правда, там, потому что они же даже убедились,
[01:48:56.980 --> 01:48:58.980]  что оптический обман никто не отменял,
[01:48:58.980 --> 01:49:00.980]  но, соответственно.
[01:49:00.980 --> 01:49:02.980]  Но это зачем нужна строгость? Ну, как бы вы уже
[01:49:02.980 --> 01:49:04.980]  поступили на фисте, думаю, как бы у вас есть уже
[01:49:04.980 --> 01:49:06.980]  адекватное представление о том, что такое
[01:49:06.980 --> 01:49:08.980]  достаточно строгое доказательство.
[01:49:08.980 --> 01:49:10.980]  Ну дальше
[01:49:10.980 --> 01:49:12.980]  начинается фактически действительно понимание
[01:49:12.980 --> 01:49:14.980]  выливания воды из чайника, ну даже скорее,
[01:49:14.980 --> 01:49:16.980]  начинается метода вида решения
[01:49:16.980 --> 01:49:18.980]  существует.
[01:49:18.980 --> 01:49:20.980]  То есть как бы строгость потребуется,
[01:49:20.980 --> 01:49:22.980]  то есть если вы там, то есть обычно
[01:49:22.980 --> 01:49:24.980]  строгость в данном, то есть если мы
[01:49:24.980 --> 01:49:26.980]  вот, то есть
[01:49:26.980 --> 01:49:28.980]  строгость нужна, то есть в данном
[01:49:28.980 --> 01:49:30.980]  случае, почему она нужна?
[01:49:30.980 --> 01:49:32.980]  Потому что, например, да, вот вы мыслите в каких-то вот
[01:49:32.980 --> 01:49:34.980]  категориях, что действительно там понятно, что
[01:49:34.980 --> 01:49:36.980]  можно довести до строгости, ну и так понятно,
[01:49:36.980 --> 01:49:38.980]  но вы рассказываете соседу,
[01:49:38.980 --> 01:49:40.980]  а сосед не понимает.
[01:49:40.980 --> 01:49:42.980]  Да, этим соседом чаще всего бываю я.
[01:49:44.980 --> 01:49:46.980]  Нет, это нормальная ситуация.
[01:49:46.980 --> 01:49:48.980]  Не потому что там, я не знаю, я там
[01:49:48.980 --> 01:49:50.980]  называю это, я там тупой или нетупой,
[01:49:50.980 --> 01:49:52.980]  называется, а потому что я
[01:49:52.980 --> 01:49:54.980]  мыслю по-другому, вообще.
[01:49:54.980 --> 01:49:56.980]  У меня в голове может быть там картинка принципиально
[01:49:56.980 --> 01:49:58.980]  отличается от вашей.
[01:49:58.980 --> 01:50:00.980]  Вот.
[01:50:00.980 --> 01:50:02.980]  Это, ну вот, собственно,
[01:50:02.980 --> 01:50:04.980]  это нормальная ситуация, собственно,
[01:50:04.980 --> 01:50:06.980]  собственно, именно для этого, то есть может
[01:50:06.980 --> 01:50:08.980]  потребоваться формализм.
[01:50:08.980 --> 01:50:10.980]  То есть в данном случае как бы если у нас вот
[01:50:10.980 --> 01:50:12.980]  одинаково, то есть если мы действительно
[01:50:12.980 --> 01:50:14.980]  друг друга поняли, да, в данном случае,
[01:50:14.980 --> 01:50:16.980]  то есть если, например,
[01:50:16.980 --> 01:50:18.980]  вы уверены, что вы там вот это вот,
[01:50:18.980 --> 01:50:20.980]  положим две монетки
[01:50:20.980 --> 01:50:22.980]  на, называется, на элемент, можем
[01:50:22.980 --> 01:50:24.980]  собственно себе адекватно понять,
[01:50:24.980 --> 01:50:26.980]  и я это тоже понимаю, что действительно там
[01:50:26.980 --> 01:50:28.980]  доводится до формализма, но там
[01:50:28.980 --> 01:50:30.980]  действительно образ понятен, то тогда
[01:50:30.980 --> 01:50:32.980]  тогда все в порядке, мы собственно на этом языке
[01:50:32.980 --> 01:50:34.980]  спокойно договариваемся.
[01:50:34.980 --> 01:50:36.980]  Вот. Но, соответственно,
[01:50:36.980 --> 01:50:38.980]  если выясняется, что, скажем, вам
[01:50:38.980 --> 01:50:40.980]  что-то понятно, допустим, нет,
[01:50:40.980 --> 01:50:42.980]  или наоборот, то нам
[01:50:42.980 --> 01:50:44.980]  тогда с вами приходится,
[01:50:44.980 --> 01:50:46.980]  тогда приходится договариваться
[01:50:46.980 --> 01:50:48.980]  в более формальном языке, если как бы цель,
[01:50:48.980 --> 01:50:50.980]  чтобы один человек там убедил
[01:50:50.980 --> 01:50:52.980]  другого, то есть там убедил другого, то есть
[01:50:52.980 --> 01:50:54.980]  предъявил адекватное доказательство.
[01:50:54.980 --> 01:50:56.980]  Вот.
[01:50:56.980 --> 01:50:58.980]  То есть на самом деле, то есть вот так
[01:50:58.980 --> 01:51:00.980]  таков вот на самом деле,
[01:51:00.980 --> 01:51:02.980]  то есть смысл формализации.
[01:51:02.980 --> 01:51:04.980]  То есть, да, давай.
[01:51:04.980 --> 01:51:06.980]  А как вы еще доказали, что за линией все работает?
[01:51:06.980 --> 01:51:08.980]  Потому что каника вскроет кредит архитектуры
[01:51:08.980 --> 01:51:10.980]  до... Ну, мы доказали
[01:51:10.980 --> 01:51:12.980]  так, но в данном случае мы сказали,
[01:51:12.980 --> 01:51:14.980]  что, смотрите, ну, мы уже знаем
[01:51:14.980 --> 01:51:16.980]  что если у нас
[01:51:16.980 --> 01:51:18.980]  сумма кушек
[01:51:18.980 --> 01:51:20.980]  никогда не превосходит суммы пэшек,
[01:51:20.980 --> 01:51:22.980]  то мы знаем, что
[01:51:22.980 --> 01:51:24.980]  сумму учетной стоимости
[01:51:24.980 --> 01:51:26.980]  суммарно мажорирует сверху сумму реальных.
[01:51:26.980 --> 01:51:28.980]  А мы предъявили,
[01:51:28.980 --> 01:51:30.980]  что, во-первых, значит, сумма
[01:51:30.980 --> 01:51:32.980]  учетных стоимости оказалась
[01:51:32.980 --> 01:51:34.980]  от 0 от n, потому что каждая из
[01:51:34.980 --> 01:51:36.980]  учетных стоимости оказалась от 1.
[01:51:36.980 --> 01:51:38.980]  Да, 3 это от 1, да?
[01:51:38.980 --> 01:51:40.980]  Вот.
[01:51:40.980 --> 01:51:42.980]  А с другой стороны, мы доказали, что
[01:51:42.980 --> 01:51:44.980]  то есть как бы
[01:51:44.980 --> 01:51:46.980]  помещение монеток на элементы
[01:51:46.980 --> 01:51:48.980]  мы доказали,
[01:51:48.980 --> 01:51:50.980]  что сумма кушек
[01:51:50.980 --> 01:51:52.980]  всегда меньше либо равна суммы пэшек.
[01:51:52.980 --> 01:51:54.980]  А сумма пэшек, с другой стороны,
[01:51:54.980 --> 01:51:56.980]  у нас откровенно 0 от n.
[01:51:56.980 --> 01:51:58.980]  Почему? Потому что она не превосходит 2 умножить
[01:51:58.980 --> 01:52:00.980]  на n. Потому что мы на каждом
[01:52:00.980 --> 01:52:02.980]  шаге получаем не более чем 2
[01:52:02.980 --> 01:52:04.980]  монетки.
[01:52:04.980 --> 01:52:06.980]  Что-что?
[01:52:08.980 --> 01:52:10.980]  Нет, ну, смотрите,
[01:52:10.980 --> 01:52:12.980]  нет, ну, как сказать?
[01:52:12.980 --> 01:52:14.980]  Что значит не всегда так можно?
[01:52:20.980 --> 01:52:22.980]  Ну, почему? Нет, ну, всякое
[01:52:22.980 --> 01:52:24.980]  бывает.
[01:52:24.980 --> 01:52:26.980]  Нет, ну, иногда, ну, тот по-разному.
[01:52:26.980 --> 01:52:28.980]  Иногда получается, иногда нет. То есть как бы в данном случае
[01:52:28.980 --> 01:52:30.980]  нам повезло, что нам удалось подогнать
[01:52:30.980 --> 01:52:32.980]  удобный, просто
[01:52:32.980 --> 01:52:34.980]  удобный и понятный алгоритм
[01:52:34.980 --> 01:52:36.980]  получения и
[01:52:36.980 --> 01:52:38.980]  получения монеток и оплату ими чего-то.
[01:52:38.980 --> 01:52:40.980]  На самом деле, что смешно,
[01:52:40.980 --> 01:52:42.980]  пуш тоже работает амортизированно,
[01:52:42.980 --> 01:52:44.980]  просто мы об этом и молчали.
[01:52:44.980 --> 01:52:46.980]  Не, почему? Ну, не совсем.
[01:52:46.980 --> 01:52:48.980]  Стек же тоже амортизированно пушит?
[01:52:48.980 --> 01:52:50.980]  Ну, это уже другой вопрос,
[01:52:50.980 --> 01:52:52.980]  как стек работает. На самом деле, нет.
[01:52:52.980 --> 01:52:54.980]  Ну, если стек у вас
[01:52:54.980 --> 01:52:56.980]  на указателях работает,
[01:52:56.980 --> 01:52:58.980]  то там у от единицы честно.
[01:52:58.980 --> 01:53:00.980]  Ладно, с оговоркой, конечно, что там выделение памяти
[01:53:00.980 --> 01:53:02.980]  реально за у от единицы происходит.
[01:53:02.980 --> 01:53:04.980]  Но это...
[01:53:04.980 --> 01:53:06.980]  Что-что?
[01:53:06.980 --> 01:53:08.980]  Ну, реально обычно там во всех адекватных
[01:53:08.980 --> 01:53:10.980]  падениях считается, что выделение,
[01:53:10.980 --> 01:53:12.980]  динамическое выделение памяти работает за у от единицы
[01:53:12.980 --> 01:53:14.980]  все-таки. Вот, поэтому это не проблема.
[01:53:14.980 --> 01:53:16.980]  Вот, да.
[01:53:16.980 --> 01:53:18.980]  А дек может реализоваться
[01:53:18.980 --> 01:53:20.980]  с помощью стеков или очередей?
[01:53:20.980 --> 01:53:22.980]  Дек...
[01:53:24.980 --> 01:53:26.980]  напряжен.
[01:53:26.980 --> 01:53:28.980]  Ну, я не знаю. Это мне, по крайней мере, неизвестно.
[01:53:28.980 --> 01:53:30.980]  А что там за мега алгоритм,
[01:53:30.980 --> 01:53:32.980]  про очередь
[01:53:32.980 --> 01:53:34.980]  не амортизированной пяти
[01:53:34.980 --> 01:53:36.980]  на шести.
[01:53:36.980 --> 01:53:38.980]  Ну, вот это обсудим, дойдем и до этого.
[01:53:38.980 --> 01:53:40.980]  Это у нас...
[01:53:40.980 --> 01:53:42.980]  Это все будет, не волнуйтесь.
[01:53:42.980 --> 01:53:44.980]  Вот.
[01:53:44.980 --> 01:53:46.980]  Значит, это вот были примеры. Значит, теперь...
[01:53:46.980 --> 01:53:48.980]  Значит...
[01:53:48.980 --> 01:53:50.980]  Ладно, теперь, значит, сейчас мы введем такой...
[01:53:50.980 --> 01:53:52.980]  Так, ребят.
[01:53:52.980 --> 01:53:54.980]  Значит, смотрите. Сейчас мы попробуем...
[01:53:54.980 --> 01:53:56.980]  То есть, на самом деле, сейчас мы реализуем
[01:53:56.980 --> 01:53:58.980]  третий метод анализа того же самого.
[01:54:00.980 --> 01:54:02.980]  Вот. Давайте вот попробуем.
[01:54:04.980 --> 01:54:06.980]  Значит, третий метод
[01:54:06.980 --> 01:54:08.980]  будет называться...
[01:54:08.980 --> 01:54:10.980]  Так, сейчас, где у меня...
[01:54:10.980 --> 01:54:12.980]  голубой маркер...
[01:54:12.980 --> 01:54:14.980]  Вот он.
[01:54:14.980 --> 01:54:16.980]  Он так и будет называться.
[01:54:16.980 --> 01:54:18.980]  Метод потенциалов.
[01:54:28.980 --> 01:54:30.980]  Во.
[01:54:30.980 --> 01:54:32.980]  Метод потенциалов.
[01:54:32.980 --> 01:54:34.980]  Метод потенциалов.
[01:54:34.980 --> 01:54:36.980]  Значит, говорит...
[01:54:36.980 --> 01:54:38.980]  Ну, то есть, занимаемся мы тем же самым.
[01:54:38.980 --> 01:54:40.980]  У нас есть операции, у них есть реальные стоимости.
[01:54:40.980 --> 01:54:42.980]  Мы их сумму пытаемся каким-то образом
[01:54:42.980 --> 01:54:44.980]  оценить.
[01:54:46.980 --> 01:54:48.980]  Но теперь мы
[01:54:48.980 --> 01:54:50.980]  мысли начинаем немножко по-другому.
[01:54:50.980 --> 01:54:52.980]  Раньше мы говорили, что мы
[01:54:52.980 --> 01:54:54.980]  при каждой операции
[01:54:54.980 --> 01:54:56.980]  получаем какие-то моменты во время операции
[01:54:56.980 --> 01:54:58.980]  и тратим какие-то монеты, да, в процессе.
[01:54:58.980 --> 01:55:00.980]  А теперь
[01:55:00.980 --> 01:55:02.980]  мы будем говорить не о
[01:55:02.980 --> 01:55:04.980]  операции,
[01:55:04.980 --> 01:55:06.980]  но о состоянии структуры
[01:55:06.980 --> 01:55:08.980]  между операциями.
[01:55:10.980 --> 01:55:12.980]  Её мы будем характеризовать
[01:55:12.980 --> 01:55:14.980]  некими мистическими
[01:55:14.980 --> 01:55:16.980]  числами.
[01:55:20.980 --> 01:55:22.980]  Вот.
[01:55:24.980 --> 01:55:26.980]  То есть, по сути, мы вводим
[01:55:26.980 --> 01:55:28.980]  некоторые мистические
[01:55:28.980 --> 01:55:30.980]  числа.
[01:55:30.980 --> 01:55:32.980]  Фи-ноль, фи-один, и так далее, фи-ен.
[01:55:32.980 --> 01:55:34.980]  С точки зрения формальной математики,
[01:55:34.980 --> 01:55:36.980]  это просто некоторые
[01:55:36.980 --> 01:55:38.980]  числа с некоторыми ограничениями.
[01:55:40.980 --> 01:55:42.980]  Какими ограничениями?
[01:55:42.980 --> 01:55:44.980]  А очень простыми.
[01:55:44.980 --> 01:55:46.980]  Ну, мы будем... Ограничения
[01:55:46.980 --> 01:55:48.980]  очень простые. Все фи...
[01:55:48.980 --> 01:55:50.980]  Все фииты больше либо равны
[01:55:50.980 --> 01:55:52.980]  нуля. И равно
[01:55:52.980 --> 01:55:54.980]  ноль, один, и так далее, н.
[01:55:54.980 --> 01:55:56.980]  И ещё
[01:55:56.980 --> 01:55:58.980]  мы должны точно знать, что фи-ноль
[01:55:58.980 --> 01:56:00.980]  равно нулю.
[01:56:02.980 --> 01:56:04.980]  Вот.
[01:56:06.980 --> 01:56:08.980]  И всё.
[01:56:08.980 --> 01:56:10.980]  То есть, просто такая последовательность.
[01:56:10.980 --> 01:56:12.980]  В реальности, то есть, это будет
[01:56:12.980 --> 01:56:14.980]  чаще всего, это будет какая-то функция
[01:56:14.980 --> 01:56:16.980]  состояния.
[01:56:16.980 --> 01:56:18.980]  Функция состояния структуры.
[01:56:18.980 --> 01:56:20.980]  И говорить...
[01:56:20.980 --> 01:56:22.980]  И в этом случае мы говорим так,
[01:56:22.980 --> 01:56:24.980]  что теперь у нас вводится учётная
[01:56:24.980 --> 01:56:26.980]  стоимость теперь, c1, c2,
[01:56:26.980 --> 01:56:28.980]  c3, и так далее.
[01:56:28.980 --> 01:56:30.980]  И будем
[01:56:30.980 --> 01:56:32.980]  говорить, что c и t, определение
[01:56:32.980 --> 01:56:34.980]  очень простое. Это реальная
[01:56:34.980 --> 01:56:36.980]  стоимость.
[01:56:36.980 --> 01:56:38.980]  Плюс
[01:56:38.980 --> 01:56:40.980]  потенциал
[01:56:40.980 --> 01:56:42.980]  на момент начала операции,
[01:56:42.980 --> 01:56:44.980]  минус
[01:56:44.980 --> 01:56:46.980]  потенциал
[01:56:46.980 --> 01:56:48.980]  на момент конца этой операции.
[01:56:48.980 --> 01:56:50.980]  Вот
[01:56:50.980 --> 01:56:52.980]  такую
[01:56:52.980 --> 01:56:54.980]  учётную стоимость
[01:56:54.980 --> 01:56:56.980]  мы введём.
[01:57:00.980 --> 01:57:02.980]  А
[01:57:02.980 --> 01:57:04.980]  видите, мы тут с нуля начали.
[01:57:04.980 --> 01:57:06.980]  А c мы тут с единицы
[01:57:06.980 --> 01:57:08.980]  нелеговали.
[01:57:08.980 --> 01:57:10.980]  Нет, если вы будете с...
[01:57:10.980 --> 01:57:12.980]  Тут и минус один, тут и...
[01:57:12.980 --> 01:57:14.980]  Так вот.
[01:57:14.980 --> 01:57:16.980]  А разве вы будете
[01:57:16.980 --> 01:57:18.980]  и минус один?
[01:57:18.980 --> 01:57:20.980]  Чего?
[01:57:20.980 --> 01:57:22.980]  Да, вы
[01:57:22.980 --> 01:57:24.980]  можете путаться,
[01:57:24.980 --> 01:57:26.980]  что вы читаем,
[01:57:26.980 --> 01:57:28.980]  а что прибавляем.
[01:57:28.980 --> 01:57:30.980]  А, может
[01:57:30.980 --> 01:57:32.980]  я и путаю, кстати.
[01:57:32.980 --> 01:57:34.980]  Да, смотрите.
[01:57:34.980 --> 01:57:36.980]  А теперь
[01:57:36.980 --> 01:57:38.980]  смотрите, как это не перепутать?
[01:57:38.980 --> 01:57:40.980]  Как проверять?
[01:57:40.980 --> 01:57:42.980]  Проверять очень просто.
[01:57:42.980 --> 01:57:44.980]  Зачем мы вообще эти учётные стоимости
[01:57:44.980 --> 01:57:46.980]  вводим?
[01:57:46.980 --> 01:57:48.980]  Глубокий смысл имеет
[01:57:48.980 --> 01:57:50.980]  в этом только, если сумма
[01:57:50.980 --> 01:57:52.980]  цитых больше либо равна, чем ци.
[01:57:52.980 --> 01:57:54.980]  Чтобы этими суммой
[01:57:54.980 --> 01:57:56.980]  учётных стоимости можно было
[01:57:56.980 --> 01:57:58.980]  мажорировать сверху сумму реальных стоимости.
[01:57:58.980 --> 01:58:00.980]  Давайте проверять.
[01:58:00.980 --> 01:58:02.980]  Вот я ввёл вот такую
[01:58:02.980 --> 01:58:04.980]  штуку.
[01:58:04.980 --> 01:58:06.980]  Тогда сумма цитых
[01:58:06.980 --> 01:58:08.980]  учётных равна
[01:58:08.980 --> 01:58:10.980]  сумма ци плюс
[01:58:10.980 --> 01:58:12.980]  фи н минус один минус фи.
[01:58:12.980 --> 01:58:14.980]  То есть это равно.
[01:58:14.980 --> 01:58:16.980]  Тут сумма вот такая.
[01:58:16.980 --> 01:58:18.980]  Тут пишем сумма в секции цитых
[01:58:18.980 --> 01:58:20.980]  плюс фи н
[01:58:20.980 --> 01:58:22.980]  минус фи один плюс
[01:58:22.980 --> 01:58:24.980]  фи один минус фи два
[01:58:24.980 --> 01:58:26.980]  плюс и так далее.
[01:58:26.980 --> 01:58:28.980]  Фи н минус один
[01:58:28.980 --> 01:58:30.980]  минус фи н.
[01:58:30.980 --> 01:58:32.980]  Здесь высекает всеми любимый
[01:58:32.980 --> 01:58:34.980]  шлёп-шлёп.
[01:58:34.980 --> 01:58:36.980]  Шлёп-шлёп.
[01:58:36.980 --> 01:58:38.980]  Тоже шлёп.
[01:58:38.980 --> 01:58:40.980]  Сейчас, так, что-то не то.
[01:58:42.980 --> 01:58:44.980]  Да, минус один, да, минус плюс.
[01:58:44.980 --> 01:58:46.980]  Тут минус плюс.
[01:58:46.980 --> 01:58:48.980]  То есть получается, что это равно?
[01:58:48.980 --> 01:58:50.980]  Просто сумма всех цитых плюс
[01:58:50.980 --> 01:58:52.980]  фи н минус фи н.
[01:58:52.980 --> 01:58:54.980]  Вот.
[01:58:54.980 --> 01:58:56.980]  Да, но нам хотелось, чтобы
[01:58:56.980 --> 01:58:58.980]  это было больше либо равно,
[01:58:58.980 --> 01:59:00.980]  чем сумма цитых. В данном случае это не так.
[01:59:00.980 --> 01:59:02.980]  Как это поправить?
[01:59:02.980 --> 01:59:04.980]  Очень просто. Давайте всё-таки будем
[01:59:04.980 --> 01:59:06.980]  прибавлять потенциал в конце и вычитать потенциал в начале.
[01:59:08.980 --> 01:59:10.980]  Вот.
[01:59:10.980 --> 01:59:12.980]  Тогда в этом доказательстве получается
[01:59:12.980 --> 01:59:14.980]  минус вот, плюс вот.
[01:59:14.980 --> 01:59:16.980]  Минус вот, плюс вот.
[01:59:16.980 --> 01:59:18.980]  Тут тогда получается минус,
[01:59:18.980 --> 01:59:20.980]  тут получается минус, тут получается плюс.
[01:59:20.980 --> 01:59:22.980]  Тогда здесь получается минус,
[01:59:22.980 --> 01:59:24.980]  здесь получается плюс и вот то,
[01:59:24.980 --> 01:59:26.980]  что надо. Видите, зачем мы вводили,
[01:59:26.980 --> 01:59:28.980]  что фиенная больше либо равно фи 0?
[01:59:30.980 --> 01:59:32.980]  По большому счёту нам для этого анализа
[01:59:32.980 --> 01:59:34.980]  достаточно было требовать, чтобы
[01:59:34.980 --> 01:59:36.980]  фиен был больше либо равно фи 0.
[01:59:36.980 --> 01:59:41.660]  но не случайно вот физики швы помните что физики сам по себе потенциал обычно
[01:59:41.660 --> 01:59:46.140]  значение не имеет имеет значение разность потенциалов да то есть по
[01:59:46.140 --> 01:59:49.500]  большому счету в общем-то как бы это доказать что будет работать и ко всем
[01:59:49.500 --> 01:59:59.620]  потенциалам прибавите там 179 вот соответственно вот ну вот то есть
[01:59:59.620 --> 02:00:04.260]  получается если вам удастся подогнать потенциалы собственно обладающие вот
[02:00:04.260 --> 02:00:10.220]  таким приятным свойством то есть то есть теперь метод потенциалов говорит что
[02:00:10.220 --> 02:00:18.020]  чтобы доказать что скажем сумма чтобы доказать что там все что сумма всех
[02:00:18.020 --> 02:00:23.380]  этих операций равна от н нужно подогнать такие потенциалы чтобы вот
[02:00:23.380 --> 02:00:30.140]  это вот учетная суббота вот эта вот штука была всегда вот единица ну или там
[02:00:30.140 --> 02:00:34.020]  если вы хотите ученые но или подать потенциалы так чтобы у каждого экстракт
[02:00:34.020 --> 02:00:39.260]  мина например здесь получался логарифом а у всех остальных получалось единиц
[02:00:40.260 --> 02:00:45.180]  ну у каждого экстракт мина то есть допустим это операции с кучей фибоначи да
[02:00:45.180 --> 02:00:51.380]  тогда значит вы докажете что учетные стоимости операции такие если вы
[02:00:51.380 --> 02:00:55.100]  доказать подогонять сумеете подогнать такие потенциалы удовлетворяющие вот
[02:00:55.100 --> 02:00:59.940]  этим условиям так чтобы учетная стоимость каждого экстракт мина была не
[02:00:59.940 --> 02:01:05.260]  превосходила от логарифма а учетная стоимость каждого инсерта гетмина или
[02:01:05.260 --> 02:01:18.660]  мэлда была вот единиц да ну типа того да вот то есть для очереди на двух
[02:01:18.660 --> 02:01:28.740]  стэках это может выглядеть например так вот то есть ну ну давайте так нет ну ну
[02:01:28.740 --> 02:01:32.300]  давайте мы сейчас мы сейчас отвлеклись от вонеток мы пытаемся мыслить без
[02:01:32.300 --> 02:01:40.780]  монеток и мы говорим что фи и т это будет равно ну допустим ладно два умножить на
[02:01:40.780 --> 02:01:53.780]  сайз вот этого стека им то есть объявим это потенциалом тогда давайте посмотрим
[02:01:53.780 --> 02:01:59.580]  значит как у нас тогда это будет работать вот давайте проанализируем то есть как
[02:01:59.580 --> 02:02:04.460]  бы вот смотрим это вот как нам вот способ мышления то есть как бы тогда то
[02:02:04.460 --> 02:02:08.300]  есть нам вот удается так подогнать значит к чему нас это приводит приводит нас к
[02:02:08.300 --> 02:02:16.260]  это следующему это нас смотрите внимательно значит приводит к тому что
[02:02:16.260 --> 02:02:23.220]  смотрите значит смотрите то есть мы рисуем опять ту же табличку push pop и
[02:02:23.220 --> 02:02:35.980]  соответственно там поп обычный и поп с перекладыванием к значит рисуем с и т она
[02:02:35.980 --> 02:02:43.980]  равна чему но тут просто честно там переписываем 1 1 2 к плюс 1 как было
[02:02:43.980 --> 02:02:57.340]  раньше вот теперь смотрим внимательно потенциал фи и минус первое ну вот чего
[02:02:57.340 --> 02:03:10.060]  но вот но чему он мог быть равен ответ чему угодно поэтому так и пишем x x x да это не крестик
[02:03:10.060 --> 02:03:19.660]  это x ну какое-то непонятное число да хотя ладно оговорочка хотя ладно вранье тут у нас да
[02:03:19.660 --> 02:03:25.560]  мистический факт заключается в том что если мы делаем поп с перекладыванием к то на момент
[02:03:25.560 --> 02:03:34.940]  этого перекладывания потенциал был в точности 2 к логично да ну мы это точно знаем потому что
[02:03:34.940 --> 02:03:39.660]  как то есть есть у нас поп с перекладыванием к элементов это означает что на момент начала
[02:03:39.660 --> 02:03:46.820]  этой операции у нас в стеке им было к элементов а в стеке аут было 0 элементов поэтому здесь мы
[02:03:46.820 --> 02:03:52.380]  железно пишем 2 к а здесь мы пьем вот а здесь какой-то x непонятное
[02:03:52.380 --> 02:04:13.580]  ой ладно кстати давайте еще 2 x напишем чтобы совсем понятно было потому что подон салмы
[02:04:13.580 --> 02:04:27.620]  видите размер не просто размер стэка размер стэка умножить на 2 нету вот это нас не от
[02:04:27.620 --> 02:04:34.980]  предыдущего а состояние на момент начала операции ведь это как раз и минус первое теперь смотрим
[02:04:34.980 --> 02:04:49.300]  что у нас на момент кончания в пуше твоя получается 2 x плюс 2 поп обычный ничего не меняет 2 x поп
[02:04:49.300 --> 02:04:57.900]  с перекладыванием 0 потому что у нас этот стэк опустевает теперь смотрим что же у нас получается
[02:04:57.900 --> 02:05:04.140]  в учетных стоимости а но опять-таки начнем с того что а то теперь давайте смот да то есть все
[02:05:04.140 --> 02:05:08.540]  потенциал у нас всегда больше либо равен нуля изначально он равен нулю очень приятно правда
[02:05:08.540 --> 02:05:15.060]  это прямо уже отсюда понятно а теперь учетная стоимость ну поехали давайте пользуемся вот
[02:05:15.060 --> 02:05:26.660]  этой формулой да то есть нам что нужно сделать то есть так сейчас так сейчас погодите так а
[02:05:26.660 --> 02:05:35.860]  мы тут да вот тут плюс а нет породить да тут должно быть плюс здесь минус здесь да вот я
[02:05:35.860 --> 02:05:41.900]  вот я и мы здесь просто забыли это поправить вот поэтому ставите тут плюсер тут не все не
[02:05:41.900 --> 02:05:49.540]  перепутать до переча поехали значит то есть у нас должно быть вот это плюс вот это минус
[02:05:50.020 --> 02:06:00.580]  то есть 2x плюс 2 2x плюс 3 минус 2 x 3 но вот тут получается это плюс это минус
[02:06:00.580 --> 02:06:06.780]  это это минус это прям сразу 0 тут одиночи получается 1 здесь получается это плюс вот
[02:06:06.780 --> 02:06:15.300]  это минус это вот и получается у нас опять что учетная стоимость это вот единиц
[02:06:15.300 --> 02:06:19.300]  И это кажется уже можно считать строгим доказательством?
[02:06:19.300 --> 02:06:19.800]  Да.
[02:06:19.800 --> 02:06:22.300]  Ну, и то и то можно считать строгим доказательством.
[02:06:22.300 --> 02:06:28.300]  Просто в одном случае вы обосновываете учетную стоимость тем, что у вас там вы кладете монетки, собственно, на элемент,
[02:06:28.300 --> 02:06:32.300]  а в другом случае вы говорите, что у вас есть вот потенциал.
[02:06:32.300 --> 02:06:37.300]  Да, это как бы более алгеброличное такое доказательство, да.
[02:06:37.300 --> 02:06:39.300]  Да, но более формально как-то выглядит.
[02:06:39.300 --> 02:06:42.300]  Ну, выглядит, да, может быть, но...
[02:06:42.300 --> 02:06:43.300]  Прикольно, что такое.
[02:06:43.300 --> 02:06:46.300]  Да, но, понимаете, вот, да, поэтому...
[02:06:46.300 --> 02:06:51.300]  Но, понимаете, смотрите, есть разница между тем, как придумывать в каких терминах мысли,
[02:06:51.300 --> 02:06:55.300]  и как бы когда это вы уже оформили и вот выдали заклинание.
[02:06:55.300 --> 02:06:59.300]  То есть можно вообще сказать, что потенциал на количество монеток...
[02:06:59.300 --> 02:07:04.300]  Да, то есть, на самом деле, да, по большому счету это одно и то же, на самом деле.
[02:07:04.300 --> 02:07:10.300]  Смотрите, по большому счету, потому что вот эти методы можно легко перетекать друг друга,
[02:07:10.300 --> 02:07:13.300]  просто потому что вот из этого метода можно получить этот,
[02:07:13.300 --> 02:07:17.300]  просто объявив, что потенциал это сколько монеток у вас сейчас есть.
[02:07:17.300 --> 02:07:19.300]  Вот.
[02:07:19.300 --> 02:07:22.300]  Ну или наоборот, если у вас есть метод потенциалов,
[02:07:22.300 --> 02:07:28.300]  то вы про монетки можете просто там говорить, ну, как-нибудь монетки вот обосновать.
[02:07:28.300 --> 02:07:32.300]  Вот, то есть поэтому тут дальше вопрос просто в какой, в каких терминах вам удобно мыслить.
[02:07:32.300 --> 02:07:36.300]  То есть можно удобно мыслить, что у вас у каждого, там скажем,
[02:07:36.300 --> 02:07:40.300]  в каждом момент времени у структуры есть состояние, которое характеризуется каким-то числом,
[02:07:40.300 --> 02:07:42.300]  которое хорошо подогналось.
[02:07:42.300 --> 02:07:47.300]  Вот. А можно мыслить в терминах, что у нас есть какие-то монетки, которые получаются,
[02:07:47.300 --> 02:07:52.300]  которые можно выдавать за что-то и, собственно, потом за это же что-то тратить.
[02:07:52.300 --> 02:07:58.300]  То есть тот вопрос удобства мыши, то есть как бы, да, это идеи на это одно и то же.
[02:07:58.300 --> 02:08:03.300]  Ну, то есть там доказание, то есть как бы понятно, доказываем мы одно и то же.
[02:08:03.300 --> 02:08:06.300]  И, в общем-то, фактически разными словами примерно одно и то же,
[02:08:06.300 --> 02:08:11.300]  но просто вопрос с какой из этих сторон потом удобно прийти к доказательству.
[02:08:11.300 --> 02:08:14.300]  Это уже может зависеть от задачи.
[02:08:14.300 --> 02:08:17.300]  То есть бывает и так, и так.
[02:08:17.300 --> 02:08:21.300]  То есть бывает и так, и так, потому что там в статьях,
[02:08:21.300 --> 02:08:26.300]  потому что в статьях можно встретить там и такие, и рассуждения одного толка и другого.
[02:08:26.300 --> 02:08:31.300]  Так, а методик потенциалов нам же получается нужно еще сказать,
[02:08:31.300 --> 02:08:34.300]  ну, для доказательства линейности всего.
[02:08:34.300 --> 02:08:43.300]  Нам же по-хорошему нужно сказать, что просто у нас размер изменяется в суммаре не больше, чем на 2n.
[02:08:43.300 --> 02:08:45.300]  Нам даже не нужно это говорить.
[02:08:45.300 --> 02:08:49.300]  Почему? Ну, просто если бы у нас было не 2x, а там 2n каждый раз.
[02:08:49.300 --> 02:08:55.300]  Нет, а где мы... Заметьте, мы в доказательстве нигде не пользуемся тем, что этот x это отn.
[02:08:55.300 --> 02:08:57.300]  Обратите внимание.
[02:08:57.300 --> 02:09:01.300]  Просто мы бы могли там добавлять не по 2, а по n, и сказать бы то же самое.
[02:09:01.300 --> 02:09:06.300]  Если ты умеешь добавлять n элементов за одну операцию, то все так работает.
[02:09:10.300 --> 02:09:12.300]  Кажется, что мы сейчас двойку на n заменим,
[02:09:12.300 --> 02:09:14.300]  и у нас доказательство не особо изменится.
[02:09:14.300 --> 02:09:16.300]  Мы опять скажем, что это вот n.
[02:09:16.300 --> 02:09:18.300]  Ну, вообще да.
[02:09:18.300 --> 02:09:21.300]  Ну, нет, в самом-все ничего страшного в этом не будет.
[02:09:21.300 --> 02:09:23.300]  Просто да, поп с перекладами.
[02:09:23.300 --> 02:09:27.300]  Ну, то есть эти операции будут работать за единицы. В чем проблема?
[02:09:30.300 --> 02:09:33.300]  Хотя нет, стоп, стоп, стоп, неправда.
[02:09:33.300 --> 02:09:36.300]  Вранье, неправда, неправда, неправда.
[02:09:39.300 --> 02:09:44.300]  Да, смотрите, если вы кладете по n монеток, то здесь будет nx, а здесь будет nx плюс n.
[02:09:46.300 --> 02:09:48.300]  Ну ладно, тут 2nx будет, и 2nx плюс n.
[02:09:48.300 --> 02:09:52.300]  И, короче говоря, в общем-то, циитая получится n-1.
[02:09:53.300 --> 02:09:58.300]  То есть тогда вы скажете, что push у вас работает за, есть учетная стоимость у отн.
[02:09:59.300 --> 02:10:03.300]  Да, то есть, внимание, тут подлянка, что учетная стоимость операции,
[02:10:03.300 --> 02:10:07.300]  она зависит от того, какой потенциал вы введете.
[02:10:07.300 --> 02:10:11.300]  То есть, если вы введете неудачный потенциал, она может оказаться и у отн.
[02:10:12.300 --> 02:10:15.300]  Но, то есть, когда вы говорите учетная стоимость, то есть вы говорите,
[02:10:15.300 --> 02:10:20.300]  существует там либо потенциал, либо вот эти монетки, что в сущности одно и то же, да?
[02:10:21.300 --> 02:10:26.300]  Ну вот, существует что учетные стоимости, там у push такие, у pop такие, у это все такие.
[02:10:27.300 --> 02:10:29.300]  Но, как бы, смысл тоже тот же самый, да?
[02:10:30.300 --> 02:10:33.300]  То есть, вы доказываете просто, что учетные стоимости такие,
[02:10:33.300 --> 02:10:36.300]  если у вас там типа, говорит, для a, b, c, d, там, ну вот это все, что я повторяю.
[02:10:37.300 --> 02:10:38.300]  Да.
[02:10:38.300 --> 02:10:40.300]  В общем, у нас взялось произведение nx.
[02:10:41.300 --> 02:10:44.300]  А это вот там просто Денис предложил, а давайте предположим,
[02:10:44.300 --> 02:10:46.300]  что мы будем класть не 2 монетки, а n монеток.
[02:10:46.300 --> 02:10:50.300]  Смотрите как, с одной стороны, тут у нас, давайте вот внимательно посмотрим.
[02:10:51.300 --> 02:10:57.300]  Да, тут была, да, тут стоимость, да, 2k плюс 1, тут как бы 2nk, тут как бы ноль.
[02:10:58.300 --> 02:11:04.300]  И тогда здесь получится 1 минус k на 2n минус 2, там что-то получится.
[02:11:06.300 --> 02:11:09.300]  Но, просто, смотрите, просто, как бы,
[02:11:09.300 --> 02:11:11.300]  если все просуммировать будет хорошо,
[02:11:11.300 --> 02:11:14.300]  но просто по факту, просто анализ говорит нам о том,
[02:11:14.300 --> 02:11:16.300]  что давайте оценим теперь учетную стоимость.
[02:11:16.300 --> 02:11:20.300]  Окажется, что учетную стоимость здесь оценивается у нас сверху, в худшем случае, o от n,
[02:11:20.300 --> 02:11:23.300]  а эта отрицательность в худшем случае оценивается как у от единицы,
[02:11:23.300 --> 02:11:25.300]  потому что мы всегда оцениваем чем-то положить, да?
[02:11:25.300 --> 02:11:29.300]  Поэтому получается, что это нам выдает, что пуши и попы могут работать за...
[02:11:30.300 --> 02:11:33.300]  Ну ладно, это ладно, это ладно, это ладно, это ладно.
[02:11:33.300 --> 02:11:37.300]  Поэтому получается, что это нам выдает, что пуши и попы могут работать за...
[02:11:38.300 --> 02:11:42.300]  Ну ладно, этот поп за единицу, но вот пуша, оказывается, за o от n работает.
[02:11:48.300 --> 02:11:53.300]  Нет, мы же достаем элемент не из инового стека, а из аутового.
[02:11:53.300 --> 02:11:56.300]  Поэтому иновый стек не меняется от слова никак.
[02:11:56.300 --> 02:12:02.300]  Так что здесь, здесь как бы 2x2x, и тут было 2nx, и останется 2nx, если что.
[02:12:03.300 --> 02:12:04.300]  Во!
[02:12:05.300 --> 02:12:08.300]  Когда мы делаем обычный пуш, мы добавляем n элементов, да?
[02:12:09.300 --> 02:12:10.300]  Когда?
[02:12:10.300 --> 02:12:11.300]  Или...
[02:12:11.300 --> 02:12:12.300]  Нет!
[02:12:12.300 --> 02:12:14.300]  Не-не-не, это я говорю, это просто...
[02:12:14.300 --> 02:12:17.300]  Нет, это был пример того, что давайте просто потенциалы по-другому введем.
[02:12:18.300 --> 02:12:20.300]  Или монетки будем по-другому класть.
[02:12:20.300 --> 02:12:21.300]  А как мы по-другому?
[02:12:21.300 --> 02:12:26.300]  Ну в том плане, что мы будем класть не по две монетки, а по n монеток.
[02:12:27.300 --> 02:12:28.300]  Ничего этого не изменится?
[02:12:28.300 --> 02:12:32.300]  Нет, от этого изменится то, что наш метод анализа тогда будет гарантировать,
[02:12:32.300 --> 02:12:36.300]  только он скажет следующее, что поп с перекладыванием теперь работает за вот единицы,
[02:12:37.300 --> 02:12:39.300]  но зато каждый пуш работает за вот n.
[02:12:42.300 --> 02:12:43.300]  Это все, что нам гарантирует.
[02:12:44.300 --> 02:12:45.300]  То есть просто, ну вот.
[02:12:45.300 --> 02:12:46.300]  То есть как...
[02:12:46.300 --> 02:12:47.300]  Ну вот.
[02:12:47.300 --> 02:12:48.300]  То есть это просто...
[02:12:48.300 --> 02:12:52.300]  То есть просто можно так сделать, просто вы получите немножко не то, что хотелось.
[02:12:52.300 --> 02:12:53.300]  А!
[02:12:54.300 --> 02:12:56.300]  Не 2nx, а просто nx.
[02:12:57.300 --> 02:12:58.300]  А!
[02:12:58.300 --> 02:12:59.300]  Ну ладно.
[02:12:59.300 --> 02:13:00.300]  Ну...
[02:13:01.300 --> 02:13:02.300]  Ладно, это уже детали.
[02:13:08.300 --> 02:13:09.300]  Да, да, да, вот так.
[02:13:09.300 --> 02:13:10.300]  Ну хорошо, хорошо, давайте.
[02:13:15.300 --> 02:13:16.300]  Ну вот.
[02:13:18.300 --> 02:13:19.300]  Ну учетное время работы, да.
[02:13:20.300 --> 02:13:24.300]  То есть условная вот соговорка, что вот на тему a умножить на это, плюс b умножить на это и так далее.
[02:13:24.300 --> 02:13:25.300]  Вот.
[02:13:25.300 --> 02:13:28.300]  То есть как бы, да, вы доказали, что их можно сейчас оценивать так.
[02:13:28.300 --> 02:13:32.300]  То есть если вы введете более удачные потенциалы, может у вас получится что-то лучше.
[02:13:33.300 --> 02:13:34.300]  Вот.
[02:13:34.300 --> 02:13:39.300]  Но правда, заметим, что как бы у вас сумма учетных стоимости, она все равно это верхняя
[02:13:39.300 --> 02:13:43.300]  оценка суммы реальность, поэтому помните, что там как бы условно из реально квадратичного
[02:13:43.300 --> 02:13:46.300]  алгоритма вы таким образом n log n не выковыряете.
[02:13:47.300 --> 02:13:52.300]  То есть как бы вопрос в том, что вы просто как бы сумму этих цешек как-то вот перераспределяете
[02:13:52.300 --> 02:13:55.300]  между собой, может быть что-то прибавляете, вот просто и там.
[02:13:56.300 --> 02:13:57.300]  Чем лучше получится, тем лучше.
[02:13:57.300 --> 02:13:58.300]  Так, давайте.
[02:13:59.300 --> 02:14:00.300]  Вот между ними с монетками, да?
[02:14:01.300 --> 02:14:08.300]  У нас там было обязательное условие, то что у нас сумма фрешек на любом реекции должна превосходить все лучше.
[02:14:08.300 --> 02:14:09.300]  Да.
[02:14:09.300 --> 02:14:11.300]  А здесь как мы их гарантируем?
[02:14:12.300 --> 02:14:13.300]  Ну.
[02:14:13.300 --> 02:14:14.300]  Не отрицательные?
[02:14:15.300 --> 02:14:16.300]  А тут мы это пропис...
[02:14:16.300 --> 02:14:19.300]  А здесь-то прописано, что потенциалы не отрицательные, а изначально потенциал ноль.
[02:14:20.300 --> 02:14:21.300]  Окей.
[02:14:21.300 --> 02:14:25.300]  У тебя сумма минус сумма, это потенциал тягущий минус ноль.
[02:14:26.300 --> 02:14:27.300]  Ну да.
[02:14:27.300 --> 02:14:31.300]  Нет, то здесь давайте, с точки зрения, если забыть о монетках, то как бы здесь потенциалы не рандомные,
[02:14:31.300 --> 02:14:34.300]  здесь потенциалы вот такие, что фейта больше либо равно лев и нулевое равно нулю.
[02:14:35.300 --> 02:14:40.300]  Это нам дает возможность сказать, что когда у нас тут получится, что вот эта штука реально больше либо равна сумме, чем фейта.
[02:14:46.300 --> 02:14:47.300]  Вот.
[02:14:51.300 --> 02:14:52.300]  Так.
[02:14:53.300 --> 02:14:54.300]  Так.
[02:14:54.300 --> 02:14:55.300]  Ну вот давайте так.
[02:14:55.300 --> 02:14:56.300]  Ладно.
[02:14:56.300 --> 02:15:00.300]  Давайте чтобы это как-то закрепить, давайте попробуем рассмотреть все это на более продвинутом примере.
[02:15:02.300 --> 02:15:03.300]  Да.
[02:15:04.300 --> 02:15:05.300]  Значит мы...
[02:15:08.300 --> 02:15:09.300]  Так.
[02:15:09.300 --> 02:15:11.300]  Значит мы рассмотрим вектор.
[02:15:12.300 --> 02:15:13.300]  Итак, вот давайте подумаем.
[02:15:13.300 --> 02:15:14.300]  Что такое вектор?
[02:15:15.300 --> 02:15:16.300]  Вектор.
[02:15:17.300 --> 02:15:18.300]  Вектор.
[02:15:18.300 --> 02:15:19.300]  Итак, вот давайте подумаем.
[02:15:19.300 --> 02:15:21.300]  Что такое вектор?
[02:15:26.300 --> 02:15:28.300]  Да, да, да, да, да.
[02:15:29.300 --> 02:15:30.300]  Нет.
[02:15:30.300 --> 02:15:31.300]  Нет, это да.
[02:15:31.300 --> 02:15:34.300]  Но в эту сторону мы будем мыслить на втором курсе.
[02:15:36.300 --> 02:15:38.300]  Ну нет, геометрию у нас на втором курсе.
[02:15:40.300 --> 02:15:42.300]  Ну да, просто для того, ну как...
[02:15:42.300 --> 02:15:46.300]  Нет, не то чтобы у вас на этом курсе вообще геометрии не будет, просто она будет на другом предмете.
[02:15:46.300 --> 02:15:47.300]  Так что геометрию, да.
[02:15:48.300 --> 02:15:51.300]  Так что геометрию алгоритмическую мы будем изучать, когда вы уже собственно овладеете линалом.
[02:15:52.300 --> 02:15:53.300]  Так что я думаю это там...
[02:15:54.300 --> 02:15:57.300]  Как говорится, после этого смотреть на геометрию будет гораздо проще.
[02:15:58.300 --> 02:15:59.300]  То есть вы будете с нее так это...
[02:16:00.300 --> 02:16:02.300]  С более высокой колокольни смотреть.
[02:16:03.300 --> 02:16:04.300]  Да.
[02:16:05.300 --> 02:16:06.300]  Ну.
[02:16:07.300 --> 02:16:08.300]  Нет, на самом деле тоже.
[02:16:08.300 --> 02:16:09.300]  Но ладно, опять же.
[02:16:10.300 --> 02:16:12.300]  Ладно, сейчас мы рассматриваем эстрелевский вектор.
[02:16:13.300 --> 02:16:14.300]  Ну просто такой эстрелевский вектор.
[02:16:15.300 --> 02:16:17.300]  Хотя мы его чуть позже сейчас попробуем модифицировать.
[02:16:19.300 --> 02:16:21.300]  Ну, потому что что такое вектор вообще?
[02:16:22.300 --> 02:16:25.300]  Это такой динамический массив.
[02:16:26.300 --> 02:16:28.300]  То есть это массив с переменным размером.
[02:16:29.300 --> 02:16:30.300]  То есть у нас есть какой-то вот массив.
[02:16:31.300 --> 02:16:32.300]  И у нас есть операция.
[02:16:33.300 --> 02:16:34.300]  Какие операции есть?
[02:16:35.300 --> 02:16:40.300]  Ну давайте для простоты мы будем считать, что у нас есть операция pushback.
[02:16:44.300 --> 02:16:45.300]  Соответственно popback.
[02:16:48.300 --> 02:16:49.300]  И...
[02:16:51.300 --> 02:16:52.300]  Оператор квадратной скобки.
[02:16:54.300 --> 02:16:56.300]  Ну он же метод add, он же там ну в общем...
[02:16:57.300 --> 02:17:02.300]  Ладно, конкретные детали это вы уже там с Ильей подробно уже видимо обсудите, если еще не обсудили.
[02:17:03.300 --> 02:17:04.300]  Вот, ну pushback понятно что делает.
[02:17:05.300 --> 02:17:09.300]  Он запихивает элемент в конец вектора, popback достает элементы с конца вектора.
[02:17:09.300 --> 02:17:12.300]  Квадратные скобки просто говорят, так, а кто тут и ты?
[02:17:13.300 --> 02:17:14.300]  Тыкните меня в него, пожалуйста.
[02:17:16.300 --> 02:17:17.300]  Вот.
[02:17:18.300 --> 02:17:24.300]  Но мы замечаем, что если это, это реализовывать в тупую,
[02:17:25.300 --> 02:17:28.300]  то есть хранить реально вот этот вектор, а если делать pushback,
[02:17:29.300 --> 02:17:31.300]  ну тогда как делать? Этот элемент памяти может быть занят, правда?
[02:17:32.300 --> 02:17:38.300]  Тогда нам придется находить кусок памяти на единицу больше, все туда копировать.
[02:17:39.300 --> 02:17:44.300]  И это приведет нас к тому, что как бы pushback будет работать за реальную линию, это нам больно.
[02:17:46.300 --> 02:17:49.300]  Значит как же поступает std-вектор в данном случае?
[02:17:51.300 --> 02:17:54.300]  Он говорит, что как-то, что да, если он говорит следующее.
[02:17:55.300 --> 02:17:58.300]  Да, у меня в каждый момент времени есть буфер, да.
[02:18:00.300 --> 02:18:06.300]  Вот, то есть сколько-то элементов занято, количество элементов, которые занято мы будем называть size.
[02:18:07.300 --> 02:18:13.300]  А есть буфер, размер буфера, который чисто теоретически может это вообще сколько себя вместить.
[02:18:14.300 --> 02:18:16.300]  Этот размер буфера называется capacity.
[02:18:17.300 --> 02:18:21.300]  Вот, но это так получится.
[02:18:22.300 --> 02:18:23.300]  На самом деле да.
[02:18:24.300 --> 02:18:30.300]  Потому что тут мы говорим следующее, что пока у нас pushback и popback не выходит нас за пределы capacity,
[02:18:31.300 --> 02:18:32.300]  мы их честно делаем и не заморачиваемся.
[02:18:33.300 --> 02:18:37.300]  Там, туда-сюда, граница там двигается, реальные вот единицы.
[02:18:38.300 --> 02:18:43.300]  Но как только неожиданно выяснено, что нам требуется сделать pushback, а буфер заполнен, что мы делаем?
[02:18:44.300 --> 02:18:46.300]  Правильно, мы делаем реолокацию.
[02:18:47.300 --> 02:18:53.300]  То есть мы объявляем, мы заводим новый массив размера 2 capacity.
[02:18:56.300 --> 02:19:00.300]  И все вот эти старые capacity туда торжественно копируют.
[02:19:03.300 --> 02:19:06.300]  То есть эта операция мы будем называть реолокацией.
[02:19:11.300 --> 02:19:12.300]  Емкость.
[02:19:13.300 --> 02:19:16.300]  Если брать дословный перевод с английского, то емкость.
[02:19:18.300 --> 02:19:19.300]  Вот.
[02:19:23.300 --> 02:19:24.300]  Емкость, емкость.
[02:19:25.300 --> 02:19:26.300]  Так вот.
[02:19:26.300 --> 02:19:27.300]  Ну а теперь вот возникает вопрос.
[02:19:28.300 --> 02:19:33.300]  Это приводит к классической ситуации вида, что каждый конкретный pushback в худшем случае может работать за линию.
[02:19:34.300 --> 02:19:40.300]  Потому что даже если вы вот эту память выделите за о от единицы, то копировать элементы вы уж точно будете за линию.
[02:19:41.300 --> 02:19:43.300]  Ну там отдельная песня с какой константой.
[02:19:48.300 --> 02:19:49.300]  Но обычно такого нет.
[02:19:50.300 --> 02:19:54.300]  И тогда будет как раз, мы как раз тогда эту линию распределим амортизированно в явном виде.
[02:19:56.300 --> 02:19:57.300]  Ну что значит распредел.
[02:19:58.300 --> 02:20:02.300]  Если мы допустим у нас, у нас осталось, место осталось меньше чем половина.
[02:20:03.300 --> 02:20:06.300]  Мы тогда на каждый push еще два элемента первых условно копируем во второй.
[02:20:07.300 --> 02:20:10.300]  И тогда как-то оно все запомнится, у нас уже весь вектор будет перенесен вниз.
[02:20:12.300 --> 02:20:14.300]  Ну теоретически так возможно, это уже да.
[02:20:14.300 --> 02:20:19.300]  Но это предположение, что каждая конкретная память выделяется или освобождается за о от единицы.
[02:20:20.300 --> 02:20:22.300]  Да, то есть если вы это поверите, то конечно да.
[02:20:23.300 --> 02:20:25.300]  Я вот не уверен, что в это стоит верить.
[02:20:26.300 --> 02:20:32.300]  Хотя в большинстве моделей, скорее всего, можно считать, что это нормально.
[02:20:33.300 --> 02:20:37.300]  Потому что в большинстве моделей у вас и память, в общем-то она у вас заранее выдана.
[02:20:38.300 --> 02:20:42.300]  Просто вплоть до того, что вы едва ли не там, у вас бесконечное число ячеек и вы там используете те по номеру, которые вам надо.
[02:20:42.300 --> 02:20:44.300]  Ладно, на эту тему у нас тоже шоу будет.
[02:20:45.300 --> 02:20:47.300]  Да, нет, на эту тему у нас вообще замечательное шоу будет.
[02:20:48.300 --> 02:20:50.300]  Вот, не важно.
[02:20:51.300 --> 02:20:53.300]  Нет, ну это мы просто задумались.
[02:20:54.300 --> 02:20:56.300]  Ну там, ладно, долго объяснять, так видимо.
[02:20:57.300 --> 02:20:59.300]  Вот, давайте на нотки.
[02:21:00.300 --> 02:21:03.300]  Пока, ладно, пока давай, но пока вот просто говоришь, у нас тут есть вот такой конкретный метод.
[02:21:04.300 --> 02:21:06.300]  Который в худшем случае push работает за линию.
[02:21:07.300 --> 02:21:09.300]  И нам очень хочется что-то понять с ним.
[02:21:09.300 --> 02:21:11.300]  Вот, как же нам понимать?
[02:21:12.300 --> 02:21:14.300]  А идея очень простая.
[02:21:15.300 --> 02:21:17.300]  Значит, на этот раз.
[02:21:18.300 --> 02:21:26.300]  Ну, действительно, то есть мы сейчас хотим показать, что учетная стоимость действительно всех тут pushback'ов, popback'ов этой операции от единиц.
[02:21:27.300 --> 02:21:31.300]  Кажется, что можно посмотреть, сколько у нас суммарно будет кофировали.
[02:21:32.300 --> 02:21:36.300]  Ну, сказать, что их будет не больше, чем два на количество push'ей.
[02:21:36.300 --> 02:21:38.300]  Ну, вот тут по-разному можно.
[02:21:39.300 --> 02:21:43.300]  Ну, тут я не знаю, можно как-то там глобально суммировать на все это, какой-то колоколь не смотреть.
[02:21:44.300 --> 02:21:47.300]  Но мы лучше не будем это делать, потому что я говорю, чуть позже мы захотим это еще улучшить.
[02:21:48.300 --> 02:21:50.300]  Давайте скажем, что дрифт это константа.
[02:21:53.300 --> 02:21:55.300]  Нет, мы...
[02:21:56.300 --> 02:21:58.300]  Не.
[02:21:59.300 --> 02:22:01.300]  Не, мы не будем это говорить.
[02:22:02.300 --> 02:22:03.300]  Обоем вместо этого...
[02:22:04.300 --> 02:22:05.300]  Так, внимание, говорите следующее.
[02:22:06.300 --> 02:22:07.300]  Значит, смотрите, вот у нас произошла реаллокация.
[02:22:08.300 --> 02:22:15.300]  Мы знаем, что после реаллокации у нас, по крайней мере, вторая половина буфера торжественно пуста, правда?
[02:22:16.300 --> 02:22:18.300]  Поэтому теперь идея такая.
[02:22:19.300 --> 02:22:22.300]  Каждый раз, даже вот, ну, можно сделать аккуратно.
[02:22:24.300 --> 02:22:27.300]  Значит, ну, давайте вот, как это можно сделать?
[02:22:28.300 --> 02:22:30.300]  Ну, например, давайте это сделаем методом монеток.
[02:22:32.300 --> 02:22:33.300]  Так, давайте вот.
[02:22:34.300 --> 02:22:36.300]  Так, вот у нас тут были два стека, а сейчас я тут буду рисовать...
[02:22:39.300 --> 02:22:41.300]  Вектор. Значит, мы будем говорить.
[02:22:44.300 --> 02:22:46.300]  Ну, можно к четыре.
[02:22:47.300 --> 02:22:50.300]  В данном случае, в данном случае, наверное, может и две хватит.
[02:22:51.300 --> 02:22:52.300]  Значит, идея такая.
[02:22:53.300 --> 02:22:57.300]  Давайте каждый раз, когда у нас тут появляется какой-то элемент новый в буфере,
[02:22:57.300 --> 02:23:01.300]  мы будем на него класть, рядом с ним класть две монетки.
[02:23:06.300 --> 02:23:07.300]  Ну, поэтому и две.
[02:23:12.300 --> 02:23:17.300]  Ну, тогда, смотрите, тогда у вас, посмотрите, тогда просто, когда у вас дойдет вот до этого, да,
[02:23:18.300 --> 02:23:23.300]  то у вас будет количество монеток не менее, чем два умножить на вот этот размер второй половины,
[02:23:24.300 --> 02:23:25.300]  то есть в точности по количеству элементов.
[02:23:26.300 --> 02:23:31.300]  Так что, поэтому, как бы, на копирование этих элементов, собственно, новый буфер вам как раз хватит.
[02:23:34.300 --> 02:23:35.300]  Ну, это...
[02:23:38.300 --> 02:23:40.300]  Ну да, но это уже, да, детали, это неважно.
[02:23:41.300 --> 02:23:42.300]  Как вам удобно мыслить.
[02:23:43.300 --> 02:23:44.300]  Вот, пожалуйста, тут двоечку.
[02:23:45.300 --> 02:23:50.300]  Вот, в чем это не менее, обратите внимание, потому что некоторые из этих элементов могут быть потом попопаны
[02:23:51.300 --> 02:23:53.300]  и потом вместо них может быть запушен новый элемент.
[02:23:53.300 --> 02:23:55.300]  Но меньше от этого монеток не станет, правда?
[02:23:56.300 --> 02:24:00.300]  Можем даже развлечься из-за, там, и каждой поп подобных элементов, еще и из-за него платить за одно.
[02:24:02.300 --> 02:24:04.300]  Ну вот, но это уже, в этом нет смысла.
[02:24:05.300 --> 02:24:07.300]  Скажешь, что у попа из-за этого от нуля?
[02:24:08.300 --> 02:24:10.300]  Да, то есть как бы анализ теперь выглядит так, смотрите.
[02:24:11.300 --> 02:24:12.300]  То есть давайте...
[02:24:14.300 --> 02:24:17.300]  То есть давайте вот, вот у нас тут табличка есть, давайте сейчас мы ее и попишем.
[02:24:18.300 --> 02:24:19.300]  Значит, смотрите.
[02:24:19.300 --> 02:24:20.300]  Значит, будем говорить, что реальная стоимость...
[02:24:21.300 --> 02:24:22.300]  Пушь!
[02:24:23.300 --> 02:24:24.300]  Так, теперь у нас, смотрите.
[02:24:25.300 --> 02:24:26.300]  Так, ой, давайте я вот...
[02:24:27.300 --> 02:24:28.300]  Так, вот это я, наверное, сотру.
[02:24:30.300 --> 02:24:38.300]  То есть я тут вот копишу, конечно, вот это, что для любого И, сумма там, ПИТ, минус КУИТ, должна быть больше либо равна нуля, там, вот.
[02:24:39.300 --> 02:24:40.300]  Вот.
[02:24:41.300 --> 02:24:42.300]  И теперь вот здесь можно что-то красивое писать.
[02:24:44.300 --> 02:24:46.300]  Так, значит, что у нас тут получается?
[02:24:46.300 --> 02:24:48.300]  Так, значит, что у нас тут получается?
[02:24:49.300 --> 02:24:51.300]  Значит, теперь мы, значит, смотрите.
[02:24:52.300 --> 02:24:53.300]  Теперь у нас есть поп-бэк.
[02:24:55.300 --> 02:24:56.300]  Есть пушь.
[02:24:57.300 --> 02:24:59.300]  Пушь-бэк обычный.
[02:25:01.300 --> 02:25:04.300]  И пушь-бэк с реаллокацией на К.
[02:25:07.300 --> 02:25:09.300]  С реаллокацией.
[02:25:13.300 --> 02:25:14.300]  Вот на размера К.
[02:25:14.300 --> 02:25:15.300]  То ладно, даже не размера К.
[02:25:16.300 --> 02:25:21.300]  Давайте тут вместо размера К введем функцию Капасити.
[02:25:26.300 --> 02:25:30.300]  То есть мы от такого размера хотим полностью переллокировать?
[02:25:31.300 --> 02:25:32.300]  Ну, типа.
[02:25:33.300 --> 02:25:34.300]  Значит, давайте смотреть.
[02:25:35.300 --> 02:25:36.300]  Реальная стоимость.
[02:25:37.300 --> 02:25:40.300]  Реальная стоимость пушь-бэка единица, поп-бэка единица, поп-бэка с реаллокацией на Капасити.
[02:25:40.300 --> 02:25:44.300]  Соответственно, Капасити плюс один.
[02:25:45.300 --> 02:25:48.300]  Ну, плюс один, потому что потом-то мы этот пушь-бэк все равно делаем.
[02:25:49.300 --> 02:25:50.300]  Что еще?
[02:25:51.300 --> 02:25:52.300]  Пушь-бэк с реаллокацией?
[02:25:53.300 --> 02:25:54.300]  Ну да. Пушь-бэк, ладно.
[02:25:55.300 --> 02:25:56.300]  Оговорился, оговорился.
[02:25:57.300 --> 02:25:58.300]  Ну, Капасити плюс один.
[02:25:59.300 --> 02:26:04.300]  Ну, мы за от Капасити реалицируемся, еще от единицы тратим на, собственно, пушь-бэк в конце.
[02:26:04.300 --> 02:26:06.300]  А мы не за два Капасити реалистируемся?
[02:26:07.300 --> 02:26:08.300]  То есть это три Капасити.
[02:26:09.300 --> 02:26:10.300]  Да какая?
[02:26:11.300 --> 02:26:13.300]  Ну, я бы сказал за Капасити.
[02:26:14.300 --> 02:26:16.300]  Ну, как бы память за вот единицу выделяем там и так далее.
[02:26:17.300 --> 02:26:21.300]  И эту единицу мы тоже там сюда впихиваем, поэтому тут не будем уж писать Капасити плюс два уж совсем уж там.
[02:26:22.300 --> 02:26:23.300]  Три Капасити.
[02:26:24.300 --> 02:26:25.300]  Да, пожалуйста.
[02:26:26.300 --> 02:26:27.300]  Как говорится, это вопрос курса валют.
[02:26:28.300 --> 02:26:30.300]  Вы как бы измеряете монеты в сантиметрах или в килограммах, суть одна.
[02:26:31.300 --> 02:26:32.300]  В общем-то, вот.
[02:26:32.300 --> 02:26:33.300]  Ну, вот.
[02:26:34.300 --> 02:26:35.300]  Так вот.
[02:26:36.300 --> 02:26:37.300]  Теперь, значит, что мы...
[02:26:38.300 --> 02:26:44.300]  Значит, теперь говорим, что за каждый пушь-бэк, можно даже не заморачивать сказать, за каждый, мы будем получать две монетки.
[02:26:47.300 --> 02:26:50.300]  За пушь-бэкской локацией мы тоже будем получать две монетки.
[02:26:52.300 --> 02:26:54.300]  За пом-бэк мы ничего не будем получать.
[02:26:57.300 --> 02:26:58.300]  А теперь, раунда.
[02:26:58.300 --> 02:27:00.300]  Равно как и пушь-бэк и поп-бэк, мы ничего оплачивать не будем.
[02:27:01.300 --> 02:27:05.300]  А вот пушь-бэк с локацией мы потратим Капасити монеток.
[02:27:10.300 --> 02:27:11.300]  Вот.
[02:27:13.300 --> 02:27:18.300]  И тогда, если брать реальную стоимость, то есть теперь учетную стоимость, то что нам нужно?
[02:27:19.300 --> 02:27:20.300]  Вот это плюс вот это минус...
[02:27:21.300 --> 02:27:23.300]  То есть вот это плюс вот это минус вот это, да?
[02:27:23.300 --> 02:27:25.300]  То есть здесь получается один минус два, прям даже что-то отрицательное.
[02:27:26.300 --> 02:27:27.300]  Здесь получается...
[02:27:32.300 --> 02:27:35.300]  А, по-моему, я тут перепутал неоплачиваемое и оплачиваемое.
[02:27:36.300 --> 02:27:37.300]  Вот так.
[02:27:38.300 --> 02:27:39.300]  Вот так красиво подгоним, вот.
[02:27:46.300 --> 02:27:47.300]  Вот так.
[02:27:48.300 --> 02:27:49.300]  Вот так.
[02:27:50.300 --> 02:27:51.300]  Вот так.
[02:27:51.300 --> 02:27:52.300]  Вот так.
[02:27:53.300 --> 02:27:54.300]  А, футэ.
[02:27:55.300 --> 02:27:56.300]  Нет, погодите, погодите, погодите.
[02:27:57.300 --> 02:27:58.300]  Почему тут...
[02:27:59.300 --> 02:28:00.300]  А, это мы мыслями неоплачиваемое...
[02:28:01.300 --> 02:28:02.300]  Ой, это же...
[02:28:03.300 --> 02:28:04.300]  Так, нет, неправильно.
[02:28:05.300 --> 02:28:06.300]  Так, ладно, давайте так.
[02:28:07.300 --> 02:28:09.300]  Хотя, нет, погодите, тут неправильно все.
[02:28:10.300 --> 02:28:11.300]  Погодите, это же не та табличка.
[02:28:12.300 --> 02:28:13.300]  Это была табличка...
[02:28:14.300 --> 02:28:15.300]  Все, прошу прощения.
[02:28:16.300 --> 02:28:17.300]  Та табличка, где оплачена, где не оплачена.
[02:28:18.300 --> 02:28:22.300]  То есть, помните, когда мы тут мыслили, что каждое действие мы либо оплачиваем, либо нет.
[02:28:23.300 --> 02:28:25.300]  Вот мы решили, что мы это действие не оплачиваем.
[02:28:26.300 --> 02:28:27.300]  Пушбек обычно не оплачиваем.
[02:28:28.300 --> 02:28:29.300]  То есть, поэтому тут 0,1.
[02:28:30.300 --> 02:28:31.300]  А здесь, как бы, одно оплач...
[02:28:32.300 --> 02:28:36.300]  То есть, тут как бы одно не оплачиваем, финальный пушбек, а вот это капасити оплачиваем.
[02:28:40.300 --> 02:28:41.300]  Ну, я все способы показываю.
[02:28:42.300 --> 02:28:43.300]  Тут уже кому как нравится.
[02:28:44.300 --> 02:28:45.300]  Но и обычный попбек тоже мы не оплачиваем.
[02:28:47.300 --> 02:28:48.300]  Когда мы не оплачиваем, значит...
[02:28:49.300 --> 02:28:50.300]  Вот.
[02:28:51.300 --> 02:28:53.300]  Остается только, правда, действительно, тут опять та же сложность.
[02:28:54.300 --> 02:28:59.300]  Надо теперь убедиться, почему мы то, что мы оплачиваем, у нас всегда деньги есть.
[02:29:00.300 --> 02:29:02.300]  Но в данном случае мышление очень простое.
[02:29:03.300 --> 02:29:07.300]  Рассмотрим ситуацию после предыдущей реаллокации.
[02:29:08.300 --> 02:29:13.300]  Тогда у нас тут было капасити пополам элементов, и тут вот капасити пополам пустоты.
[02:29:13.300 --> 02:29:16.300]  Это означает, что начиная с того момента, там мы можем считать...
[02:29:17.300 --> 02:29:20.300]  Ну, там у нас понятно, сколько монеток непонятно, возможно, 0.
[02:29:21.300 --> 02:29:30.300]  Но это и не важно, потому что с того момента до нашей текущей реаллокации было выполнено как минимум капасити пополам пушей.
[02:29:31.300 --> 02:29:32.300]  Понимаете, да?
[02:29:33.300 --> 02:29:34.300]  И это нам, собственно...
[02:29:35.300 --> 02:29:38.300]  То есть, это означает, что как минимум капасити монеток у нас есть, а то и больше.
[02:29:39.300 --> 02:29:43.300]  Поэтому вот оплатить капасити мы вполне способны.
[02:29:44.300 --> 02:29:45.300]  То есть вот так можно мыслить.
[02:29:46.300 --> 02:29:48.300]  Если мы два раза увеличим, да, Вектор?
[02:29:49.300 --> 02:29:50.300]  Да.
[02:29:51.300 --> 02:29:52.300]  Можно вопросить?
[02:29:53.300 --> 02:29:54.300]  Почему за попбэк получаем?
[02:29:55.300 --> 02:29:56.300]  Нет, это оплачивать, не оплачивать.
[02:29:57.300 --> 02:30:00.300]  Получать монетки и отдавать монетки – это другая табличка.
[02:30:01.300 --> 02:30:02.300]  Сейчас мы ее тоже заполним.
[02:30:05.300 --> 02:30:07.300]  А, то есть оплачивать пусть не оплачивается, но...
[02:30:08.300 --> 02:30:09.300]  Да.
[02:30:10.300 --> 02:30:12.300]  Нет, это не метод потенциалов, это как бы вот...
[02:30:13.300 --> 02:30:15.300]  Это место в серверах оплачивать, не оплачивать.
[02:30:17.300 --> 02:30:22.300]  Если мы используем метод, сколько монеток мы получаем и сколько монеток мы отдаем, то это будет выглядеть так.
[02:30:24.300 --> 02:30:26.300]  То это будет выглядеть немножко по-другому.
[02:30:27.300 --> 02:30:29.300]  Вот, значит, смотрите.
[02:30:30.300 --> 02:30:34.300]  Смотрите, как это все будет отделаться.
[02:30:35.300 --> 02:30:39.300]  А оно же не накопится в капасите монеток, потому что мы...
[02:30:41.300 --> 02:30:43.300]  При пуше мы одну монетку, да?
[02:30:44.300 --> 02:30:45.300]  Две.
[02:30:46.300 --> 02:30:48.300]  Вот ровно для того, чтобы накопилось именно капасити, мы клали две.
[02:30:49.300 --> 02:30:50.300]  А где написали, что у нас две кладется?
[02:30:51.300 --> 02:30:52.300]  Вот здесь нарисовали.
[02:30:53.300 --> 02:30:54.300]  Да.
[02:30:55.300 --> 02:30:56.300]  Мы же могли что сделать?
[02:30:57.300 --> 02:31:02.300]  Мы могли сказать, что у нас суммарно все пуши работают за их количество.
[02:31:02.300 --> 02:31:04.300]  Но плюс время...
[02:31:05.300 --> 02:31:06.300]  Да.
[02:31:07.300 --> 02:31:08.300]  Но это был бы метод анализа номер один.
[02:31:09.300 --> 02:31:10.300]  Да.
[02:31:11.300 --> 02:31:12.300]  Мы сейчас просто по-другому мыслим.
[02:31:13.300 --> 02:31:20.300]  А если мы типа с момента предыдущего реакциации, мы же накопили капаси пополам?
[02:31:21.300 --> 02:31:22.300]  Нет.
[02:31:23.300 --> 02:31:26.300]  Я же говорю, мы за каждый пушбэк, поэтому платим, даем две монетки, а не одну.
[02:31:27.300 --> 02:31:28.300]  Вот сейчас я это пропишу, смотрите.
[02:31:29.300 --> 02:31:34.300]  Значит, за каждый пуш, обычный, да, я говорю, что он делается за от единицы.
[02:31:35.300 --> 02:31:37.300]  Мы за него получаем две монетки, а тратим ноль.
[02:31:38.300 --> 02:31:42.300]  Поэтому учетная стоимость оказывается, соответственно, 3.
[02:31:45.300 --> 02:31:46.300]  Вот.
[02:31:47.300 --> 02:31:48.300]  Теперь внизу пишем.
[02:31:49.300 --> 02:31:50.300]  Поп.
[02:31:51.300 --> 02:31:52.300]  Тут все просто.
[02:31:53.300 --> 02:31:56.300]  Значит, мы будем делать его за от единицы и ничего не тратить.
[02:31:56.300 --> 02:31:58.300]  И получаем учетную стоимость 1.
[02:31:59.300 --> 02:32:01.300]  А теперь внимание.
[02:32:02.300 --> 02:32:08.300]  Значит, пуш с реаллокацией на capacity.
[02:32:13.300 --> 02:32:14.300]  Вот.
[02:32:15.300 --> 02:32:16.300]  Понятно, да?
[02:32:17.300 --> 02:32:18.300]  Как мы здесь будем мыслить?
[02:32:19.300 --> 02:32:20.300]  Здесь мы будем говорить так.
[02:32:21.300 --> 02:32:24.300]  Это у нас будет работать за, как мы уже сказали, от capacity плюс 1.
[02:32:27.300 --> 02:32:28.300]  Можно потратить capacity, да?
[02:32:29.300 --> 02:32:34.300]  И мы говорим, да, мы получим за это две монетки, потому что, ну, пуш-то все равно делается, да?
[02:32:35.300 --> 02:32:37.300]  Но потратим capacity.
[02:32:39.300 --> 02:32:44.300]  В результате учетная стоимость окажется, это плюс, это минус, это 3.
[02:32:45.300 --> 02:32:46.300]  Вот.
[02:32:47.300 --> 02:32:48.300]  Вы называете старый capacity или новый?
[02:32:49.300 --> 02:32:50.300]  Старый.
[02:32:51.300 --> 02:32:54.300]  То есть я подразумеваю, что реаллокация это capacity, превращающийся в два capacity.
[02:32:54.300 --> 02:32:55.300]  Да.
[02:32:59.300 --> 02:33:00.300]  Вот.
[02:33:01.300 --> 02:33:03.300]  Так что, в принципе, можно расписывать так.
[02:33:04.300 --> 02:33:12.300]  То есть это как бы более, то есть по сравнению с вот этим, это, конечно, более точно, потому что здесь мы приписали, сколько вы на каждую операцию будете реально там давать монет.
[02:33:13.300 --> 02:33:18.300]  А я правильно понимаю, что у нас после пуш с переносом баланс становится 0?
[02:33:19.300 --> 02:33:20.300]  Не совсем.
[02:33:20.300 --> 02:33:30.300]  Дело в том, что, как бы, то есть в идеале 0, то есть в идеале, если у вас были только пуш, там, pushback, pushback, pushback, pushback, pushback, pushback, pushback, pushback, pushback, pushback.
[02:33:31.300 --> 02:33:32.300]  Вы видели 2, нет?
[02:33:33.300 --> 02:33:34.300]  Ну да, но да, но да.
[02:33:35.300 --> 02:33:41.300]  Нет, это вот тогда, да, но просто может быть так, что вы там дошли до сюда, потом сделали pushback, а потом сделали pushback обратно.
[02:33:42.300 --> 02:33:44.300]  То есть это означает, что у вас к этому моменту накопится две лишние монеты.
[02:33:45.300 --> 02:33:57.300]  Нет, я скорее о том, что вот мы, если уже сделали пуш с переносом, если мы хотели сделать второй, то нам хорошо бы есть, чтобы на этих старых элементах тоже были монеты.
[02:33:58.300 --> 02:33:59.300]  Нет, нет, нет, нет, мы эти вообще не пользуемся.
[02:34:00.300 --> 02:34:01.300]  Только на новые.
[02:34:02.300 --> 02:34:07.300]  Как бы мы, скажем так, нам хватает только тех монет, которые были добавлены после последней реаллокации.
[02:34:11.300 --> 02:34:12.300]  Ну это странно.
[02:34:12.300 --> 02:34:13.300]  Почему?
[02:34:13.300 --> 02:34:14.300]  На этом базируется доказательство.
[02:34:15.300 --> 02:34:18.300]  Потому что мы говорим, что пусть у нас была предыдущая реаллокация.
[02:34:19.300 --> 02:34:27.300]  Мы знаем четкий вариант, что после реаллокации у нас, непосредственно после реаллокации, по крайней мере, у нас было ровно половина свободных элементов.
[02:34:28.300 --> 02:34:30.300]  То есть половина занята, половина свободных.
[02:34:32.300 --> 02:34:35.300]  Поэтому мы говорим, что у нас на этот момент 0 монеток.
[02:34:36.300 --> 02:34:38.300]  Ну ладно, сейчас мы добавляем этот 1, получается 2 монетки.
[02:34:39.300 --> 02:34:40.300]  Ну и все.
[02:34:40.300 --> 02:34:43.300]  И начиная с этого момента, как бы да, мы накопим монетки.
[02:34:44.300 --> 02:34:52.300]  То есть получается такое, знаете, усреднение, но не по всем сразу операциям, а только мы разделили эти операции на блоки и усреднили внутри блока.
[02:34:53.300 --> 02:34:54.300]  А?
[02:34:55.300 --> 02:34:56.300]  Автомечки справа сверху огоняли?
[02:34:57.300 --> 02:34:59.300]  Где, где, где, где?
[02:35:00.300 --> 02:35:01.300]  Не оплачиваем.
[02:35:02.300 --> 02:35:05.300]  Типа если на столу 1 мы получаем, потому что не хватит.
[02:35:05.300 --> 02:35:09.300]  Не, ну как сказать, Кеда, здесь мы просто расписывали, сколько мы оплачиваем.
[02:35:12.300 --> 02:35:13.300]  А что значит не оплачиваем?
[02:35:14.300 --> 02:35:17.300]  Ну то и значит. Есть операции, которые мы оплачиваем, есть которые не оплачиваем.
[02:35:18.300 --> 02:35:19.300]  Типа уменьшаем за счет накопившихся?
[02:35:20.300 --> 02:35:23.300]  Ну там другой способ, давайте вот не путать, это один способ мышления, так чуть-чуть, но другой.
[02:35:25.300 --> 02:35:30.300]  То есть как бы этот способ мышления говорит, что вы получаете какое-то количество монеток, да?
[02:35:30.300 --> 02:35:35.300]  А потом какие-то действия, часть действий там уже имеющимися монетками оплачиваете.
[02:35:36.300 --> 02:35:42.300]  И тогда вы отдельно оцениваете то, что не оплачено, а то, что оплачено, оцениваете сверху тем количеством денег, которые у вас есть.
[02:35:43.300 --> 02:35:44.300]  То есть которые вам Субагна дают.
[02:35:45.300 --> 02:35:54.300]  То есть в принципе наше оказательство заключается в том, что мы говорим то, что у нас есть половина массива,
[02:35:55.300 --> 02:35:58.300]  в нее заполнили элементами, на каждом получили две монетки,
[02:35:59.300 --> 02:36:02.300]  и в итоге накопится столько монеток, чтобы покрыть всю компасию.
[02:36:03.300 --> 02:36:09.300]  Да, да, причем, да, ну да, ну да, то есть предыдущая локация, у нас нужное количество монеток на нее накопилось, да.
[02:36:10.300 --> 02:36:11.300]  А?
[02:36:16.300 --> 02:36:17.300]  Сейчас ничего не слышу.
[02:36:20.300 --> 02:36:21.300]  Кладем...
[02:36:24.300 --> 02:36:26.300]  Ну кладем две монетки, да.
[02:36:33.300 --> 02:36:38.300]  А потому что в этой табличке мы не пишем, сколько монет мы куда кладем.
[02:36:39.300 --> 02:36:46.300]  В этой табличке мы пишем только, что мы оплачиваем, что мы не оплачиваем.
[02:36:47.300 --> 02:36:53.300]  Откуда мы берем монетки, мы здесь как бы, это мы пишем где-то в другом месте.
[02:36:54.300 --> 02:37:01.300]  То есть здесь мы только умолчаем, то есть это мы себе тут мыслим, что мы это оплачиваем за счет того, что как бы каждый пуш приносит там две монетки.
[02:37:02.300 --> 02:37:03.300]  Да.
[02:37:04.300 --> 02:37:09.300]  То есть здесь это да, как конкретно, да, как конкретно все оплачивает?
[02:37:17.300 --> 02:37:21.300]  Нет, ну в смысле, а что такое? Есть операция, которую мы не оплачиваем.
[02:37:24.300 --> 02:37:25.300]  Чего?
[02:37:26.300 --> 02:37:27.300]  Ну для удобства.
[02:37:32.300 --> 02:37:35.300]  Кого не писать?
[02:37:36.300 --> 02:37:38.300]  С обеих, кого мы не оплачиваем.
[02:37:39.300 --> 02:37:51.300]  Нет, просто смотрите, то, что не оплачиваем, ну потому что если вы не оплачиваете, то это тем самым вы из анализа просто выкинули какие-то действия, которые реально были сделаны.
[02:37:52.300 --> 02:38:01.300]  Потому что помните, да, то есть наша цель, вот у нас есть реальные стоимости, реальную сумму реальных стоимости надо как-то оценить, да?
[02:38:04.300 --> 02:38:05.300]  Ну да.
[02:38:06.300 --> 02:38:13.300]  Ну я бы так сказал, что оплаченное плюс оплаченное равно все действия, потому что каждое действие вы либо оплатили, либо не оплатили.
[02:38:14.300 --> 02:38:15.300]  Да.
[02:38:15.300 --> 02:38:25.300]  Ну да, поэтому не оплаченное мы просто суммируем, а оплаченное мы оцениваем сверху там количеством денег, ну убедивший, что мы всегда оплатили корректно.
[02:38:26.300 --> 02:38:30.300]  И потом заявляем, что количество денег нам выданное оно небольшое, поэтому тоже все хорошо.
[02:38:37.300 --> 02:38:41.300]  Да, но откуда взялись монетки мы здесь не написаны.
[02:38:41.300 --> 02:38:43.300]  Да, мы это озвучили, да.
[02:38:44.300 --> 02:38:52.300]  Ну конечно нет, с этой точки зрения, смотрите, с этой точки зрения вот эта таблица, она более формальна, да, более показательна, но вот.
[02:38:56.300 --> 02:38:57.300]  Да.
[02:38:58.300 --> 02:39:02.300]  Нет, а можно в принципе, нет, смотрите, если я хочу увеличить формализм.
[02:39:02.300 --> 02:39:23.300]  Ну вот, но теперь вот, смотрите, а если, ну вот, но если хочется прям совсем формально, да, если вот этого там вот положения монеток не хватает, то тогда можно ввести действительно метод потенциалов, и в этом методе потенциалов тогда если у нас есть вектор, то сказать, что потенциал равен к чему.
[02:39:23.300 --> 02:39:25.300]  А, ну в такой интерпретации, да.
[02:39:26.300 --> 02:39:28.300]  Capacity minus Cz, да.
[02:39:33.300 --> 02:39:35.300]  Так, а вот давайте проведем эксперимент.
[02:39:38.300 --> 02:39:42.300]  Вот давайте так, вот пусть у нас потенциал как, нет.
[02:39:42.300 --> 02:39:47.300]  Давайте сейчас, давайте просто, чисто чтобы потренироваться, раз ввозить такой потенциал, давайте с ним честно проанализируем.
[02:39:48.300 --> 02:39:51.300]  Да, я понимаю, что кто-то уже понимает, что что-то не так, но давайте.
[02:39:52.300 --> 02:39:53.300]  Значит, смотрите.
[02:39:54.300 --> 02:39:55.300]  Так.
[02:39:55.300 --> 02:39:56.300]  Итак, смотрим на вектор.
[02:39:57.300 --> 02:39:58.300]  Так, сейчас я тут.
[02:39:59.300 --> 02:40:01.300]  Так, ребят, ребят, ребят, потише, потише.
[02:40:02.300 --> 02:40:03.300]  Так.
[02:40:03.300 --> 02:40:04.300]  Значит, смотрите.
[02:40:05.300 --> 02:40:06.300]  Так.
[02:40:06.300 --> 02:40:07.300]  Итак, смотрим на вектор.
[02:40:08.300 --> 02:40:09.300]  Так, сейчас я тут.
[02:40:10.300 --> 02:40:12.300]  Так, ребят, ребят, ребят, потише, потише, потише.
[02:40:13.300 --> 02:40:14.300]  Значит, смотрите.
[02:40:14.300 --> 02:40:15.300]  Сейчас я тут вот это все поубираю.
[02:40:16.300 --> 02:40:18.300]  Вот это все поубираю, поубираю, поубираю.
[02:40:20.300 --> 02:40:21.300]  Да, легче было так.
[02:40:22.300 --> 02:40:23.300]  И, смотрите.
[02:40:24.300 --> 02:40:25.300]  То есть какие у нас операции есть?
[02:40:26.300 --> 02:40:28.300]  Есть, опять же, push обычный.
[02:40:28.300 --> 02:40:34.300]  Есть push с реаллокацией на capacity.
[02:40:35.300 --> 02:40:36.300]  Да, да, да.
[02:40:37.300 --> 02:40:38.300]  Погодите, погодите.
[02:40:39.300 --> 02:40:40.300]  Сейчас мы...
[02:40:41.300 --> 02:40:42.300]  Я говорю, давайте это.
[02:40:43.300 --> 02:40:46.300]  Нет, здорово, что вы уже так и вперед мыслите, но давайте не будем торопиться.
[02:40:47.300 --> 02:40:48.300]  Значит, смотрите внимательно.
[02:40:49.300 --> 02:40:51.300]  Итак, вот если мы рассматриваем вот такой потенциал, мы его можем вести.
[02:40:52.300 --> 02:40:53.300]  Он корректен, он не отрицательен.
[02:40:54.300 --> 02:40:55.300]  Правда?
[02:40:56.300 --> 02:40:57.300]  И изначально он, наверное...
[02:40:58.300 --> 02:40:59.300]  Ну, смотрите.
[02:41:00.300 --> 02:41:01.300]  Тут, ладно, есть маленькая оговорка, но мы ее опустим.
[02:41:02.300 --> 02:41:05.300]  Потому что на самом деле к чему у нас равно capacity, когда СЗ равно нулю?
[02:41:09.300 --> 02:41:12.300]  Ну, на самом деле, вектор всегда интересируется с восьмию элементом.
[02:41:13.300 --> 02:41:18.300]  Ну вот, да, но тогда у нас будет подлянка, что потенциал изначально у нас равен восемь.
[02:41:19.300 --> 02:41:20.300]  Ну, да.
[02:41:21.300 --> 02:41:22.300]  Это нехорошо.
[02:41:23.300 --> 02:41:24.300]  Но мы будем подразумевать следующее.
[02:41:24.300 --> 02:41:29.300]  Мы можем как бы это подогнать так, что давайте пустой вектор не хранить себе никакого capacity, да?
[02:41:30.300 --> 02:41:33.300]  А пока у нас элементов, скажем, не превосходит, ну, я не знаю, нот.
[02:41:34.300 --> 02:41:40.300]  А там будем говорить, что если мы там добавляем первый элемент, то мы там создаем вектор размера два, например, да?
[02:41:41.300 --> 02:41:45.300]  Ну, чтобы хранить вот этот вариант, что у нас после последней релокации все было вот хорошо, да?
[02:41:46.300 --> 02:41:50.300]  Ну, понятно, что на этой мелочи там все будет от единицы потенциал, на от единицы.
[02:41:51.300 --> 02:41:52.300]  Поэтому не проблема.
[02:41:54.300 --> 02:41:55.300]  Итак, смотрим.
[02:41:56.300 --> 02:41:58.300]  Пуш об, пуш обычный.
[02:41:59.300 --> 02:42:01.300]  Так, ну, реальная стоимость единица.
[02:42:02.300 --> 02:42:07.300]  Потенциал равен чему-то там какому-то х.
[02:42:08.300 --> 02:42:16.300]  Но при этом потенциал в конце становится равен, то есть создая увеличивается, capacity тоже самое, поэтому получается х-1.
[02:42:17.300 --> 02:42:20.300]  И учетная стоимость у нас там получается равна чему?
[02:42:21.300 --> 02:42:22.300]  Ноль.
[02:42:23.300 --> 02:42:25.300]  Ну, вот это плюс, вот это минус это.
[02:42:26.300 --> 02:42:29.300]  Почему у нас текущий потенциал равен х-1?
[02:42:30.300 --> 02:42:33.300]  Ну, потому что, потому что перед добавлением потенциал был равен х.
[02:42:34.300 --> 02:42:36.300]  То есть capacity-size было равно х.
[02:42:37.300 --> 02:42:40.300]  Теперь мы добавили элемент. Capacity не поменялось, потому что это обычный пуш.
[02:42:41.300 --> 02:42:42.300]  Size увеличился на 1.
[02:42:43.300 --> 02:42:45.300]  То есть, следовательно, потенциал уменьшился на 1.
[02:42:46.300 --> 02:42:50.300]  Вот, да, оказался вам вообще кайф, да, пуши можно вообще не считать.
[02:42:51.300 --> 02:42:52.300]  Да.
[02:42:53.300 --> 02:43:00.300]  Ну, да, да, да, знаете, в продвинутых статьях очень удобно выяснить, что эти операции мы не считаем, потому что у них учетная стоимость ноль.
[02:43:01.300 --> 02:43:03.300]  Не, реально, в полном серьезе.
[02:43:04.300 --> 02:43:07.300]  Вот, да, там хорошее шоу будет.
[02:43:08.300 --> 02:43:09.300]  Вот, далее.
[02:43:10.300 --> 02:43:12.300]  Теперь пуш с релокацией на capacity.
[02:43:13.300 --> 02:43:14.300]  Так, ну, отлично.
[02:43:15.300 --> 02:43:17.300]  Он работает у нас за, как вы помните, capacity плюс 1.
[02:43:17.300 --> 02:43:20.300]  Так, теперь смотрим.
[02:43:21.300 --> 02:43:25.300]  К чему был равен потенциал на момент перед релокацией?
[02:43:26.300 --> 02:43:27.300]  В точности ноль.
[02:43:28.300 --> 02:43:30.300]  Пуш с сайс был равен capacity, а потенциал был равен нулю.
[02:43:31.300 --> 02:43:33.300]  После этого.
[02:43:34.300 --> 02:43:36.300]  Ага, если бы.
[02:43:37.300 --> 02:43:41.300]  Да, вот конкретно такой потенциал стал равен capacity, ну ладно, минус 1.
[02:43:42.300 --> 02:43:44.300]  Потому что мы тут еще один элемент докинули.
[02:43:45.300 --> 02:43:46.300]  Поэтому так и пишем.
[02:43:47.300 --> 02:43:48.300]  Capacity минус 1.
[02:43:49.300 --> 02:43:50.300]  Теперь внимание.
[02:43:51.300 --> 02:43:52.300]  К чему равна учетная стоимость такой операции?
[02:43:53.300 --> 02:43:54.300]  Вот это, плюс вот это, минус вот это.
[02:43:55.300 --> 02:43:56.300]  2 capacity.
[02:43:57.300 --> 02:43:58.300]  И все.
[02:43:59.300 --> 02:44:00.300]  Так.
[02:44:01.300 --> 02:44:03.300]  Ну, в принципе, поп можно не писать.
[02:44:04.300 --> 02:44:09.300]  Потому что мы понимаем, что такой потенциал дает нам, конечно, не то, что мы хотели.
[02:44:09.300 --> 02:44:13.300]  Да, то есть каждая учетная стоимость у от н, а всего все операции работают за н квадрат.
[02:44:14.300 --> 02:44:15.300]  Нет.
[02:44:16.300 --> 02:44:17.300]  Вот.
[02:44:18.300 --> 02:44:19.300]  Образ так.
[02:44:20.300 --> 02:44:21.300]  Давайте, вот да.
[02:44:22.300 --> 02:44:26.300]  Давайте все в порядке, все протестируем, смотрите.
[02:44:27.300 --> 02:44:28.300]  Все что угодно.
[02:44:29.300 --> 02:44:34.300]  Нам не нравится, что учетная стоимость плохого пуша равна у от capacity.
[02:44:34.300 --> 02:44:39.300]  Нам не нравится, что учетная стоимость плохого пуша равна у от capacity.
[02:44:40.300 --> 02:44:41.300]  Это у от н.
[02:44:42.300 --> 02:44:43.300]  Capacity в лучшем случае у от н.
[02:44:44.300 --> 02:44:45.300]  Это нас не устраивает.
[02:44:49.300 --> 02:44:50.300]  Это уже другой вопрос.
[02:44:52.300 --> 02:44:55.300]  Нет, а мы хотим поделять учетные стоимости так, чтобы это уже схлопнулось.
[02:44:56.300 --> 02:45:00.300]  А как бы, знаете, а если мы хотим работать по принципу, заведем учетные стоимости,
[02:45:00.300 --> 02:45:03.300]  а потом докажем, что эти учетные стоимости можно правильно просуммировать,
[02:45:04.300 --> 02:45:06.300]  так может лучше сразу бы доказали, что можно все просуммировать.
[02:45:07.300 --> 02:45:10.300]  То есть это как бы не та реакция метода, которого мы хотим.
[02:45:11.300 --> 02:45:12.300]  Это называется.
[02:45:13.300 --> 02:45:14.300]  Да.
[02:45:15.300 --> 02:45:16.300]  То есть как бы да.
[02:45:23.300 --> 02:45:24.300]  Вот.
[02:45:25.300 --> 02:45:26.300]  То есть на самом деле надо просто перестроиться.
[02:45:27.300 --> 02:45:28.300]  Ну да.
[02:45:29.300 --> 02:45:30.300]  Нет.
[02:45:30.300 --> 02:45:31.300]  Почему не чисто?
[02:45:32.300 --> 02:45:33.300]  Нет, тут.
[02:45:33.300 --> 02:45:34.300]  Ну вот.
[02:45:35.300 --> 02:45:37.300]  Теперь надо просто ввести другой потенциал.
[02:45:37.300 --> 02:45:38.300]  То есть это как бы да.
[02:45:39.300 --> 02:45:40.300]  То есть это вот.
[02:45:41.300 --> 02:45:42.300]  Ой.
[02:45:43.300 --> 02:45:44.300]  Это вспоминается почему-то история.
[02:45:45.300 --> 02:45:46.300]  Ну ладно.
[02:45:47.300 --> 02:45:49.300]  Просто если неправильно перестроиться или уметь перестроиться,
[02:45:50.300 --> 02:45:54.300]  то знаете, ситуация была такая, что жил там в Ленинградской консерватории.
[02:45:55.300 --> 02:45:56.300]  Был лектор, который там.
[02:45:56.300 --> 02:45:58.760]  был лектор, который там, ну там у них есть такое, что
[02:45:58.760 --> 02:46:01.180]  перед выступлениями произносят какие-то вступительные
[02:46:01.180 --> 02:46:02.180]  слова.
[02:46:02.180 --> 02:46:03.180]  Вот.
[02:46:03.180 --> 02:46:06.220]  И вот была ситуация, ситуация, вот лектор не умел перестроиться.
[02:46:06.220 --> 02:46:09.260]  Есть ситуация, значит, у него там в каком-то утреннем
[02:46:09.260 --> 02:46:11.460]  сеансе, значит, там придут дети из первого класса.
[02:46:11.460 --> 02:46:12.460]  Вот.
[02:46:12.460 --> 02:46:15.020]  Ну понятно, он там подготовил какое-то вступительное
[02:46:15.020 --> 02:46:16.020]  слово.
[02:46:16.020 --> 02:46:18.300]  Но там кто-то что-то напутал, и в результате в это время
[02:46:18.300 --> 02:46:20.460]  вместо первоклассников пришли там что-то академики
[02:46:20.460 --> 02:46:22.900]  из советской академии наук.
[02:46:23.900 --> 02:46:26.120]  В результате человек не смог перестроиться и на
[02:46:26.120 --> 02:46:28.580]  полном серьезе там минут 10 объяснял действительно
[02:46:28.580 --> 02:46:32.140]  академикам-членам-корреспондентам, что скрипочки это такие
[02:46:32.140 --> 02:46:35.500]  дощечки, на которые натянуты струнки и какими-то там жилками
[02:46:35.500 --> 02:46:36.820]  там издаются как-то звуки.
[02:46:36.820 --> 02:46:37.820]  Вот.
[02:46:37.820 --> 02:46:39.900]  То есть вот человек просто не перестроился.
[02:46:39.900 --> 02:46:40.900]  Вот.
[02:46:40.900 --> 02:46:42.700]  Как было комментарий?
[02:46:42.700 --> 02:46:45.020]  Это вызвало нездоровый смех всего звала, но это
[02:46:45.020 --> 02:46:47.580]  совершенно не та реакция, которая нам нужна.
[02:46:47.580 --> 02:46:48.580]  Вот.
[02:46:48.580 --> 02:46:49.580]  Вот.
[02:46:50.260 --> 02:46:52.260]  То есть что это значит?
[02:46:52.260 --> 02:46:58.140]  То есть это не значит, что, конечно, не надо произносить
[02:46:58.140 --> 02:47:00.700]  слово вообще, значит надо просто ввести другой потенциал.
[02:47:00.700 --> 02:47:01.700]  То есть вот.
[02:47:01.700 --> 02:47:02.700]  Вот.
[02:47:02.700 --> 02:47:03.700]  Ну какой?
[02:47:03.700 --> 02:47:04.700]  В данном случае предлагается...
[02:47:04.700 --> 02:47:05.700]  Давайте...
[02:47:05.700 --> 02:47:06.700]  Ой.
[02:47:06.700 --> 02:47:09.700]  Это реальная история?
[02:47:09.700 --> 02:47:15.900]  Знаете, вот философский вопрос.
[02:47:16.220 --> 02:47:19.220]  Знаете, скорее всего, да.
[02:47:19.220 --> 02:47:20.220]  Хотя...
[02:47:20.220 --> 02:47:21.220]  Ну вот, скорее всего, нафиг.
[02:47:21.220 --> 02:47:23.060]  Потому что, на самом деле, откуда я ее взял, ссылка
[02:47:23.060 --> 02:47:24.060]  простая.
[02:47:24.060 --> 02:47:25.060]  Значит, можете погуглить такую вещь.
[02:47:25.060 --> 02:47:26.060]  Значит, смотрите.
[02:47:26.060 --> 02:47:29.860]  Значит, просто очень рекомендую, на самом деле, вот, просто
[02:47:29.860 --> 02:47:30.860]  вот.
[02:47:30.860 --> 02:47:35.620]  Значит, просто на ютубе найдите такое, значит, эрак
[02:47:35.620 --> 02:47:36.620]  клеондронников.
[02:47:36.620 --> 02:47:40.780]  Первый раз на эстраде.
[02:47:40.780 --> 02:47:44.660]  Нет, это к программированию вообще никакого отношения
[02:47:44.660 --> 02:47:45.660]  не имеет.
[02:47:46.420 --> 02:47:47.420]  Вот.
[02:47:47.420 --> 02:47:55.180]  То есть, на самом деле, это просто рассказ, на самом
[02:47:55.180 --> 02:47:57.780]  деле, то есть, некого ленинградского студента.
[02:47:57.780 --> 02:48:00.060]  То есть, ну, речь вообще идет там, вообще...
[02:48:00.060 --> 02:48:03.300]  То есть, простите, о Ленинграде, причем до Второй мировой,
[02:48:03.300 --> 02:48:04.300]  где-то там, 30-е годы.
[02:48:04.300 --> 02:48:07.220]  Вот где-то такие, ну, вот такое вот есть.
[02:48:07.220 --> 02:48:12.060]  Ну вот, и речь идет, и происходит там все это дело в консерватории
[02:48:12.060 --> 02:48:13.060]  или вокруг нее.
[02:48:13.060 --> 02:48:14.060]  То есть, вообще.
[02:48:15.060 --> 02:48:17.180]  Сейчас будем разбираться.
[02:48:17.180 --> 02:48:20.820]  Так, давайте, не перебивайте, так, давайте вот доскажем
[02:48:20.820 --> 02:48:21.820]  что.
[02:48:21.820 --> 02:48:22.820]  Да.
[02:48:22.820 --> 02:48:26.500]  Так что вот, нет, давайте я просто доскажу, после
[02:48:26.500 --> 02:48:27.500]  этого вот перейдем к унициалу.
[02:48:27.500 --> 02:48:33.100]  Так, ребят, так, ребят, я вообще-то что-то говорю на другую
[02:48:33.100 --> 02:48:34.100]  тему, да.
[02:48:34.100 --> 02:48:38.500]  Значит, смотрите, то есть, вот эта просто штука, вот
[02:48:38.500 --> 02:48:39.500]  действительно, то есть, на самом деле, честно скажу,
[02:48:39.500 --> 02:48:41.900]  то есть, если вот, то есть, знаете, просто любите хороший
[02:48:41.900 --> 02:48:43.660]  юмор, вот очень рекомендую на самом деле.
[02:48:44.460 --> 02:48:47.060]  То есть, может быть даже, я и тогда просто очень люблю
[02:48:47.060 --> 02:48:49.460]  слушать, просто как минимум, потому что еще просто наслаждаюсь
[02:48:49.460 --> 02:48:51.460]  просто русским языком, знаете.
[02:48:51.460 --> 02:48:52.460]  Вот.
[02:48:52.460 --> 02:48:54.740]  Так что вот очень рекомендую, вот просто это там, то есть,
[02:48:54.740 --> 02:48:56.860]  это на ютубе, но как бы можно просто слушать, практически
[02:48:56.860 --> 02:48:57.860]  хотя посмотреть тоже хорошо.
[02:48:57.860 --> 02:49:00.860]  Так, все, об этом забыли, значит, возвращаемся к этому,
[02:49:00.860 --> 02:49:01.860]  давай.
[02:49:01.860 --> 02:49:04.860]  Мы теперь на поп тоже реаллокацию, что ли, будем делать, иначе
[02:49:04.860 --> 02:49:06.860]  у нас потенциал отрицательно становится, когда мы попаем
[02:49:06.860 --> 02:49:07.860]  меньше половины.
[02:49:07.860 --> 02:49:08.860]  Так.
[02:49:08.860 --> 02:49:09.860]  Ой, какая подлянка-то, а.
[02:49:09.860 --> 02:49:10.860]  Да.
[02:49:10.860 --> 02:49:12.860]  Мы можем поп просто отдельно доказать, чтобы это делать
[02:49:13.060 --> 02:49:14.060]  максимально.
[02:49:14.060 --> 02:49:15.060]  Ну, давайте, давайте, да.
[02:49:15.060 --> 02:49:16.060]  Ну, хорошо, давайте вот это.
[02:49:16.060 --> 02:49:31.060]  Да, подогнали, если потенциал будет меньше нуля, ну ничего
[02:49:31.060 --> 02:49:32.060]  страшного, да.
[02:49:32.060 --> 02:49:33.060]  Вот.
[02:49:33.060 --> 02:49:34.060]  Ну, давайте разбираться.
[02:49:34.060 --> 02:49:39.060]  Значит, давайте теперь разбираться, пуш обычный.
[02:49:39.060 --> 02:49:42.060]  Ну, здесь можно разобраться так.
[02:49:42.260 --> 02:49:47.460]  Если потенциал был равен x, то потенциал в конце стал
[02:49:47.460 --> 02:49:56.460]  ну, либо x плюс 2, либо тупо x, если это был 0, 0, да.
[02:49:56.460 --> 02:50:00.460]  Но тогда учетная стоимость становится равна либо 3, либо
[02:50:00.460 --> 02:50:01.460]  1.
[02:50:01.460 --> 02:50:04.460]  Оба варианта у нас прекрасно устраивают.
[02:50:04.460 --> 02:50:06.460]  Почему x может быть?
[02:50:06.460 --> 02:50:10.460]  Ну, потому что, может быть, мы это делали, этот пуш,
[02:50:10.860 --> 02:50:12.860]  и он был в первой половине буфера.
[02:50:12.860 --> 02:50:15.860]  Да, вот типа того.
[02:50:15.860 --> 02:50:19.860]  Да, вот такое может быть.
[02:50:19.860 --> 02:50:20.860]  Вот типа.
[02:50:20.860 --> 02:50:25.860]  Значит, смотрите, теперь пуш с реаллокацией.
[02:50:25.860 --> 02:50:29.860]  Ну, здесь теперь потенциал перед этим был равен, чему
[02:50:29.860 --> 02:50:30.860]  он был равен?
[02:50:30.860 --> 02:50:33.860]  Ну, size был равен, то есть, получается, здесь потенциал
[02:50:33.860 --> 02:50:36.860]  был в точности capacity, обратите внимание, почему?
[02:50:36.860 --> 02:50:39.860]  Потому что, ну, размер был capacity, поэтому 2 capacity
[02:50:40.260 --> 02:50:42.260]  равно capacity.
[02:50:42.260 --> 02:50:45.260]  Такой мистический математический факт.
[02:50:45.260 --> 02:50:50.260]  Да, 2 capacity минус capacity равно capacity, да.
[02:50:50.260 --> 02:50:53.260]  Вот, осталось что?
[02:50:53.260 --> 02:50:56.260]  Осталось в итоге 2.
[02:50:56.260 --> 02:50:59.260]  Ладно, вру, да, 2.
[02:50:59.260 --> 02:51:02.260]  Ну, потому что непосредственно после реаллокации у вас
[02:51:02.260 --> 02:51:05.260]  будет 0, потому что size будет в точности половинка
[02:51:05.260 --> 02:51:06.260]  нового capacity.
[02:51:06.260 --> 02:51:09.260]  Но при этом вы как бы один элемент все равно пушите,
[02:51:09.660 --> 02:51:11.660]  вы все-таки 2.
[02:51:11.660 --> 02:51:14.660]  И в результате, получается, что в результате пуш с реаллокации
[02:51:14.660 --> 02:51:17.660]  получается 3.
[02:51:17.660 --> 02:51:20.660]  Это нас устраивает.
[02:51:20.660 --> 02:51:22.660]  Теперь делаем поп.
[02:51:22.660 --> 02:51:27.660]  Ну, поп единица, значит, фи и минус первое, чему равно?
[02:51:27.660 --> 02:51:34.660]  Ну, было х, осталось либо х минус 2, либо х.
[02:51:34.660 --> 02:51:35.660]  Ну да.
[02:51:35.660 --> 02:51:37.660]  Ну, и там либо это 0 было.
[02:51:38.060 --> 02:51:41.060]  Ну, и тогда получается, что учетная стоимость этой операции
[02:51:41.060 --> 02:51:46.060]  либо минус 1, либо 1.
[02:51:46.060 --> 02:51:47.060]  Ну, почему?
[02:51:47.060 --> 02:51:50.060]  Ну, 1 плюс х минус 2, минус х минус 1.
[02:51:50.060 --> 02:51:51.060]  Нормально.
[02:51:51.060 --> 02:51:56.060]  Но, короче, это не превосходит 1, так что это нас устраивает.
[02:51:56.060 --> 02:52:01.060]  Вот, получается, да, вот такой потенциал нам красиво заходит.
[02:52:01.060 --> 02:52:04.060]  Ура.
[02:52:04.060 --> 02:52:07.060]  Почему у нас вся проблема в том, что учитная стоимость может быть минус 1?
[02:52:10.060 --> 02:52:11.060]  Чего еще раз.
[02:52:11.060 --> 02:52:14.060]  Почему у нас вся проблема в том, что учетная стоимость может быть минус 1?
[02:52:15.060 --> 02:52:16.260]  Ну, forever note.
[02:52:16.260 --> 02:52:18.760]  Ну, а вот о чем проблема?
[02:52:19.760 --> 02:52:23.060]  Нет, учетная стоимость это note.
[02:52:24.060 --> 02:52:27.060]  Нет, аire object, а вчетная стоимость это note.
[02:52:27.060 --> 02:52:29.060]  Ч 지난tss芳idlм, чrel'?
[02:52:30.060 --> 02:52:32.060]  Все равно положительнаяiz?
[02:52:32.060 --> 02:52:34.060]  Не, не нужно.
[02:52:34.060 --> 02:52:36.060]  Нет, на самом деле так.
[02:52:36.060 --> 02:52:38.060]  Нас сейчас устраивает,
[02:52:38.060 --> 02:52:40.060]  что эта учетная стоимость
[02:52:40.060 --> 02:52:42.060]  не превосходит единицы.
[02:52:42.060 --> 02:52:44.060]  Если она отрицательная, значит единица она не превосходит.
[02:52:44.060 --> 02:52:46.060]  Вот.
[02:52:46.060 --> 02:52:48.060]  Но оказывается, что...
[02:52:48.060 --> 02:52:50.060]  Смотрите, логика тут такая,
[02:52:50.060 --> 02:52:52.060]  что сначала мы говорим,
[02:52:52.060 --> 02:52:54.060]  что если вводить прямо эти учетные стоимости так,
[02:52:54.060 --> 02:52:56.060]  что они оказываются отрицательными,
[02:52:56.060 --> 02:52:58.060]  то тогда сумма
[02:52:58.060 --> 02:53:00.060]  вот этих учетных стоимости
[02:53:00.060 --> 02:53:02.060]  она оказывается от.
[02:53:02.060 --> 02:53:04.060]  Потому что каждая из этих учетных стоимости
[02:53:04.060 --> 02:53:06.060]  не превосходит единицы.
[02:53:06.060 --> 02:53:08.060]  Но с другой стороны мы знаем,
[02:53:08.060 --> 02:53:10.060]  что мы потенциалы ввели правильно,
[02:53:10.060 --> 02:53:12.060]  поэтому сумма учетных стоимости
[02:53:12.060 --> 02:53:14.060]  она не менее, чем количество
[02:53:14.060 --> 02:53:16.060]  суммы реальных стоимости.
[02:53:16.060 --> 02:53:18.060]  Поэтому нормально.
[02:53:22.060 --> 02:53:24.060]  Да.
[02:53:24.060 --> 02:53:26.060]  Ну да.
[02:53:26.060 --> 02:53:28.060]  Есть глобальная часть,
[02:53:28.060 --> 02:53:30.060]  что этот метод, этим методом что-то докажем.
[02:53:30.060 --> 02:53:32.060]  А есть конкретная метода,
[02:53:32.060 --> 02:53:34.060]  которая говорит, что да, конкретно
[02:53:34.060 --> 02:53:36.060]  учетные стоимости с конкретно этим потенциалом
[02:53:36.060 --> 02:53:38.060]  оказались адекватны.
[02:53:38.060 --> 02:53:40.060]  Да, на всякий случай,
[02:53:40.060 --> 02:53:42.060]  перед вопросом скажу, да,
[02:53:42.060 --> 02:53:44.060]  в науке и встречается, что там учетные стоимости
[02:53:44.060 --> 02:53:46.060]  с какой-нибудь операцией ноль.
[02:53:46.060 --> 02:53:48.060]  Это нормально.
[02:53:52.060 --> 02:53:54.060]  Да нет.
[02:53:54.060 --> 02:53:56.060]  Нет, такого не будет
[02:53:56.060 --> 02:53:58.060]  просто потому, что обычно это означает,
[02:53:58.060 --> 02:54:00.060]  что вы не можете сделать бесконечное
[02:54:00.060 --> 02:54:02.060]  число поп-беков.
[02:54:02.060 --> 02:54:04.060]  Ведь обратите внимание, вы поп-бекать
[02:54:04.060 --> 02:54:06.060]  можете только то, что вы ранее запушбекали.
[02:54:08.060 --> 02:54:10.060]  Поэтому нельзя просто так взять
[02:54:10.060 --> 02:54:12.060]  и сделать поп-бек
[02:54:12.060 --> 02:54:14.060]  из пустоты.
[02:54:16.060 --> 02:54:18.060]  Потому что да, понятно,
[02:54:18.060 --> 02:54:20.060]  что здесь мы конечно подразумеваем,
[02:54:20.060 --> 02:54:22.060]  что когда мы делаем поп, мы делаем поп из не пустого
[02:54:22.060 --> 02:54:24.060]  вектора, а если у нас пустой вектор,
[02:54:24.060 --> 02:54:26.060]  то мы вообще перестаем анализировать, а начинаем
[02:54:26.060 --> 02:54:28.060]  вопить.
[02:54:28.060 --> 02:54:30.060]  А если у нас был вектор из
[02:54:30.060 --> 02:54:32.060]  стаичных элементов, и мы много раз
[02:54:32.060 --> 02:54:34.060]  делали поп-бек, он у нас
[02:54:34.060 --> 02:54:36.060]  произойдет реаллокации в какой-то момент?
[02:54:36.060 --> 02:54:38.060]  То есть он сократится? В текущей версии
[02:54:38.060 --> 02:54:40.060]  нет.
[02:54:42.060 --> 02:54:44.060]  Да, вот тут есть такая маленькая
[02:54:44.060 --> 02:54:46.060]  подлянка, что в плюсовой версии
[02:54:46.060 --> 02:54:48.060]  действительно есть эффект, что
[02:54:48.060 --> 02:54:50.060]  если вы из вектора сделали
[02:54:50.060 --> 02:54:52.060]  миллион пушбеков, а потом миллион
[02:54:52.060 --> 02:54:54.060]  поп-беков,
[02:54:54.060 --> 02:54:56.060]  то размер вектора будет миллион.
[02:54:58.060 --> 02:55:00.060]  Ну и что?
[02:55:00.060 --> 02:55:02.060]  Ну, с точки зрения памяти это неприятно.
[02:55:06.060 --> 02:55:08.060]  Вот утверждается, что нет.
[02:55:08.060 --> 02:55:10.060]  Ну, подробнее вы еще с Мишириным это обсудите,
[02:55:10.060 --> 02:55:12.060]  но вот эксперименты показали, что там
[02:55:12.060 --> 02:55:14.060]  от того, что вы сделали много поп-беков,
[02:55:14.060 --> 02:55:16.060]  капасти не уменьшается.
[02:55:16.060 --> 02:55:18.060]  Да, но вот сейчас мы об этом поговорим,
[02:55:18.060 --> 02:55:20.060]  вот теперь у нас будет задача.
[02:55:20.060 --> 02:55:22.060]  Помните, эстрелевские алгоритмы не идеальны,
[02:55:22.060 --> 02:55:24.060]  потому что
[02:55:24.060 --> 02:55:26.060]  ну, например,
[02:55:26.060 --> 02:55:28.060]  как видим, у меня идеальность в том, что
[02:55:28.060 --> 02:55:30.060]  в эстрелевском сете нельзя найти
[02:55:30.060 --> 02:55:32.060]  катори по возрастанию элементов.
[02:55:36.060 --> 02:55:38.060]  Нет, это другое, что можно...
[02:55:38.060 --> 02:55:40.060]  Мы говорим сейчас об эстреле, да, существует
[02:55:40.060 --> 02:55:42.060]  расширение эстреля, в котором это делается, да,
[02:55:42.060 --> 02:55:44.060]  но как бы помните, что
[02:55:44.060 --> 02:55:46.060]  это не все, что вы можете идеально придумать математически
[02:55:46.060 --> 02:55:48.060]  как бы реализованно в эстреле.
[02:55:48.060 --> 02:55:50.060]  Нет, не сделано это
[02:55:50.060 --> 02:55:52.060]  чисто потому, что
[02:55:52.060 --> 02:55:54.060]  в эстреле тоже есть такой трейдов
[02:55:54.060 --> 02:55:56.060]  между что вообще можно сделать
[02:55:56.060 --> 02:55:58.060]  и сколько накладных расходов это потом будет
[02:55:58.060 --> 02:56:00.060]  жрать.
[02:56:00.060 --> 02:56:02.060]  То есть там отдельная песня, как бы почему там
[02:56:02.060 --> 02:56:04.060]  красночерное дерево, а не нормальная дикартячка
[02:56:04.060 --> 02:56:06.060]  какая-нибудь.
[02:56:06.060 --> 02:56:08.060]  Нет, а причины есть.
[02:56:08.060 --> 02:56:10.060]  Именно.
[02:56:10.060 --> 02:56:12.060]  Ну, если вкратце, да, то там во всех деревьях нужны какие-то
[02:56:12.060 --> 02:56:14.060]  топ-информации типа приоритета
[02:56:14.060 --> 02:56:16.060]  или размера под дерево, а в
[02:56:16.060 --> 02:56:18.060]  красночерном дереве вам нужно только один бит
[02:56:18.060 --> 02:56:20.060]  хранить.
[02:56:20.060 --> 02:56:22.060]  Да, да, да, вот именно.
[02:56:22.060 --> 02:56:24.060]  Да, там много причин.
[02:56:24.060 --> 02:56:26.060]  Нет, ну ладно.
[02:56:26.060 --> 02:56:28.060]  Ладно, до этого мы тоже...
[02:56:28.060 --> 02:56:30.060]  Ладно, это мы тоже будем очень подробно
[02:56:30.060 --> 02:56:32.060]  изучать все это, поэтому...
[02:56:32.060 --> 02:56:34.060]  Чего?
[02:56:34.060 --> 02:56:36.060]  Перерыв!
[02:56:36.060 --> 02:56:38.060]  Прямо сразу
[02:56:38.060 --> 02:56:40.060]  перерыв?
[02:56:40.060 --> 02:56:42.060]  Да, погодите, зачем перерыв?
[02:56:42.060 --> 02:56:44.060]  А вот здесь одна пара
[02:56:44.060 --> 02:56:46.060]  не хочет перерыв.
[02:56:46.060 --> 02:56:48.060]  Нет, ну сейчас, погодите.
[02:56:48.060 --> 02:56:50.060]  Ну сейчас давайте дойдем до этого, да.
[02:56:50.060 --> 02:56:52.060]  Нет, пара-то по этой локе, она уже там
[02:56:52.060 --> 02:56:54.060]  и перерыв уже из-под нее закончился.
[02:56:54.060 --> 02:56:56.060]  Да, там.
[02:56:56.060 --> 02:56:58.060]  Нет, я просто хотел уже сформулировать задачу,
[02:56:58.060 --> 02:57:00.060]  после которой действительно можно действительно выдохнуть.
[02:57:00.060 --> 02:57:02.060]  А задача
[02:57:02.060 --> 02:57:04.060]  будет такая. То есть да, мы говорим
[02:57:04.060 --> 02:57:06.060]  о том, что истейлевский вектор действительно может
[02:57:06.060 --> 02:57:08.060]  жрать сильно более лишнюю память, то есть
[02:57:08.060 --> 02:57:10.060]  вектор на три элемента может жрать
[02:57:10.060 --> 02:57:12.060]  от миллиона, потому что у него там
[02:57:12.060 --> 02:57:14.060]  богатая история его там жизни.
[02:57:14.060 --> 02:57:16.060]  Предыдущий. Вот.
[02:57:16.060 --> 02:57:18.060]  Ну вот.
[02:57:18.060 --> 02:57:20.060]  Поэтому наша задача будет такая.
[02:57:20.060 --> 02:57:22.060]  Хочется изобрести вектор,
[02:57:22.060 --> 02:57:24.060]  да, так и быть, мы верим в амортизированность, так и быть.
[02:57:24.060 --> 02:57:26.060]  Но при этом
[02:57:26.060 --> 02:57:28.060]  нам бы очень-очень-очень хотелось,
[02:57:28.060 --> 02:57:30.060]  чтобы в каждый момент времени
[02:57:30.060 --> 02:57:32.060]  выполнялось, что если его реальный размер равен
[02:57:32.060 --> 02:57:34.060]  СЗ, то количество
[02:57:34.060 --> 02:57:36.060]  памяти, который он жрет, было
[02:57:36.060 --> 02:57:38.060]  400 СЗ.
[02:57:38.060 --> 02:57:40.060]  400 СЗ очевидно.
[02:57:40.060 --> 02:57:42.060]  Не, почему, давайте реанонсировать в обратную
[02:57:42.060 --> 02:57:44.060]  сторону, когда по БК.
[02:57:44.060 --> 02:57:46.060]  Так, вот тут возникает вопрос.
[02:57:46.060 --> 02:57:48.060]  Так, чтоб.
[02:57:48.060 --> 02:57:50.060]  Да, тут просто
[02:57:50.060 --> 02:57:52.060]  возникает вопрос, просто кто-то заказывает перерыв,
[02:57:52.060 --> 02:57:54.060]  просто можно сделать так, можно сейчас добить эту задачу,
[02:57:54.060 --> 02:57:56.060]  собственно сделать перерыв, чтобы потом перейти,
[02:57:56.060 --> 02:57:58.060]  попытаться перейти к очередина.
[02:57:58.060 --> 02:58:00.060]  А нет, мы не перейдем к очередина, потому что нам
[02:58:00.060 --> 02:58:02.060]  нужно вам красивый алгоритм
[02:58:02.060 --> 02:58:04.060]  рассказать.
[02:58:04.060 --> 02:58:06.060]  Из вашего домашнего задания.
[02:58:08.060 --> 02:58:10.060]  Ну ладно.
[02:58:10.060 --> 02:58:12.060]  Так, ладно.
[02:58:12.060 --> 02:58:14.060]  Ладно, это мы тогда сделаем. Ладно, пришло время
[02:58:14.060 --> 02:58:16.060]  пожалуй сделать перерыв, давайте.
[02:58:16.060 --> 02:58:18.060]  Так, и теперь.
[02:58:18.060 --> 02:58:20.060]  Значит теперь
[02:58:20.060 --> 02:58:22.060]  давайте думать дальше.
[02:58:22.060 --> 02:58:24.060]  И так, значит еще раз задача.
[02:58:24.060 --> 02:58:26.060]  То есть нам предыдущая
[02:58:26.060 --> 02:58:28.060]  реализация вектора не понравилась,
[02:58:28.060 --> 02:58:30.060]  потому что действительно она
[02:58:30.060 --> 02:58:32.060]  может жрать слишком много памяти
[02:58:32.060 --> 02:58:34.060]  по сравнению с тем, сколько там реальный элемент.
[02:58:36.060 --> 02:58:38.060]  Очень хочется, чтобы в каждый момент времени
[02:58:38.060 --> 02:58:40.060]  количество, то есть
[02:58:40.060 --> 02:58:42.060]  capacity не превосходило,
[02:58:44.060 --> 02:58:46.060]  то есть capacity должно быть
[02:58:46.060 --> 02:58:48.060]  в каждом момент времени меньше либо равно,
[02:58:48.060 --> 02:58:50.060]  чем какая-то константа C на size.
[02:58:52.060 --> 02:58:54.060]  Вот очень-очень-очень-очень
[02:58:54.060 --> 02:58:56.060]  бы этого нам хотелось.
[02:58:58.060 --> 02:59:00.060]  Вот какие варианты предлагаются.
[02:59:02.060 --> 02:59:04.060]  Ну конечно классический,
[02:59:04.060 --> 02:59:06.060]  такой самый классический вариант
[02:59:06.060 --> 02:59:08.060]  в этом месте,
[02:59:08.060 --> 02:59:10.060]  это конечно сказать, что давайте делать
[02:59:10.060 --> 02:59:12.060]  реалокацию, конечно, не только когда у нас буфер
[02:59:12.060 --> 02:59:14.060]  заполнился, но и когда этот буфер
[02:59:14.060 --> 02:59:16.060]  стал слишком маленьким.
[02:59:18.060 --> 02:59:20.060]  То есть когда элементов буфера стало слишком мало.
[02:59:22.060 --> 02:59:24.060]  А именно, то есть это у нас вот большая
[02:59:24.060 --> 02:59:26.060]  capacity, то есть когда все заполнилось.
[02:59:26.060 --> 02:59:28.060]  Но альтернатива,
[02:59:28.060 --> 02:59:30.060]  то есть альтернативный метод
[02:59:30.060 --> 02:59:32.060]  теперь нам говорит следующее.
[02:59:32.060 --> 02:59:34.060]  Так, а давай теперь скажем,
[02:59:34.060 --> 02:59:36.060]  что если у нас, например,
[02:59:36.060 --> 02:59:38.060]  оказалось, что прям вы
[02:59:38.060 --> 02:59:40.060]  так напобэкали, что у вас там
[02:59:40.060 --> 02:59:42.060]  количество элементов стало
[02:59:42.060 --> 02:59:44.060]  четверть от буфера,
[02:59:46.060 --> 02:59:48.060]  то есть прям вот совсем вот тут,
[02:59:48.060 --> 02:59:50.060]  вот прям вот столько осталось,
[02:59:50.060 --> 02:59:52.060]  прям вот Cz прям стало равно
[02:59:52.060 --> 02:59:54.060]  capacity поделить на 4,
[02:59:54.060 --> 02:59:56.060]  то
[02:59:58.060 --> 03:00:00.060]  мы снова объявляем реалокацию.
[03:00:02.060 --> 03:00:04.060]  Ну только размер capacity 0.2
[03:00:04.060 --> 03:00:06.060]  Да.
[03:00:06.060 --> 03:00:08.060]  Но конечно, чтобы у нас был там буфер,
[03:00:08.060 --> 03:00:10.060]  чтобы не сразу там скакать туда-сюда,
[03:00:10.060 --> 03:00:12.060]  мы конечно объявляем
[03:00:14.060 --> 03:00:16.060]  что действительно
[03:00:16.060 --> 03:00:18.060]  новый capacity у нас здесь станет теперь
[03:00:18.060 --> 03:00:20.060]  capacity пополам.
[03:00:20.060 --> 03:00:22.060]  То есть видите, мы сохраняем
[03:00:22.060 --> 03:00:24.060]  вариант, что после реалокации,
[03:00:24.060 --> 03:00:26.060]  что в расширении, что в сужении,
[03:00:26.060 --> 03:00:28.060]  у нас size равен половине,
[03:00:28.060 --> 03:00:30.060]  ровно половине capacity.
[03:00:30.060 --> 03:00:32.060]  Вот такая вот
[03:00:32.060 --> 03:00:34.060]  интересность.
[03:00:38.060 --> 03:00:40.060]  Конечно.
[03:00:40.060 --> 03:00:42.060]  Ну вот, но на самом деле увидеть
[03:00:42.060 --> 03:00:44.060]  это все можно легче всего,
[03:00:44.060 --> 03:00:46.060]  конечно, через монетки.
[03:00:48.060 --> 03:00:50.060]  Потому что мы будем говорить следующее.
[03:00:50.060 --> 03:00:52.060]  Смотрите, то есть фишка такая,
[03:00:52.060 --> 03:00:54.060]  что когда мы делаем,
[03:00:54.060 --> 03:00:56.060]  допустим, лишний push,
[03:00:56.060 --> 03:00:58.060]  то есть push вот в эту сторону,
[03:00:58.060 --> 03:01:00.060]  то мы будем получать,
[03:01:00.060 --> 03:01:02.060]  давайте допустим две монетки.
[03:01:02.060 --> 03:01:04.060]  А теперь идея такая,
[03:01:04.060 --> 03:01:06.060]  что когда мы теперь
[03:01:06.060 --> 03:01:08.060]  будем делать лишний pop,
[03:01:08.060 --> 03:01:10.060]  то мы будем...
[03:01:10.060 --> 03:01:12.060]  Да, можно тоже получать
[03:01:12.060 --> 03:01:14.060]  две монетки,
[03:01:14.060 --> 03:01:16.060]  но уже можно сказать
[03:01:16.060 --> 03:01:18.060]  красненькие.
[03:01:18.060 --> 03:01:20.060]  Да, не, ну, дайте иногда
[03:01:20.060 --> 03:01:22.060]  для красоты анализа, давайте пусть у нас будет
[03:01:22.060 --> 03:01:24.060]  столько-то красных монет, столько-то зеленых монет,
[03:01:24.060 --> 03:01:26.060]  столько-то синих монет.
[03:01:26.060 --> 03:01:28.060]  И там тратить мы будем,
[03:01:28.060 --> 03:01:30.060]  на это мы будем тратить только синие монеты,
[03:01:30.060 --> 03:01:32.060]  на это только зеленые и так далее и тому подобное.
[03:01:32.060 --> 03:01:34.060]  То есть на самом деле вот там
[03:01:34.060 --> 03:01:36.060]  есть какие-то красивые
[03:01:36.060 --> 03:01:38.060]  рассуждения на эту тему,
[03:01:38.060 --> 03:01:40.060]  в принципе, так тоже очень приятно думать.
[03:01:40.060 --> 03:01:42.060]  Вот.
[03:01:42.060 --> 03:01:44.060]  То есть вот так вот.
[03:01:44.060 --> 03:01:46.060]  И тогда что это нам дает?
[03:01:48.060 --> 03:01:50.700]  Ну так, на уровне оплаты.
[03:01:50.700 --> 03:01:53.540]  Тогда на уровне оплаты получается, что
[03:01:53.540 --> 03:01:57.260]  ну, во-первых, заметим, что если у нас есть запрос,
[03:01:57.260 --> 03:01:59.780]  если у нас есть реаллокация на расширение, то на нее
[03:01:59.780 --> 03:02:01.460]  деньги найдутся, потому что
[03:02:01.460 --> 03:02:03.740]  после предыдущей реаллокации было хотя бы
[03:02:03.740 --> 03:02:06.380]  капасти пополам пушей и капасти монеток на месте,
[03:02:06.380 --> 03:02:10.540]  правда?
[03:02:10.540 --> 03:02:13.300]  Но, теперь та же логика работает, если у нас
[03:02:13.300 --> 03:02:15.140]  пришел запрос на
[03:02:15.180 --> 03:02:18.340]  реаллокацию,
[03:02:18.340 --> 03:02:22.140]  ну вот, пришел запрос на реаллокацию на уменьшение,
[03:02:22.140 --> 03:02:24.900]  потому что для того, чтобы это произошло, должно произойти
[03:02:24.900 --> 03:02:25.900]  как минимум
[03:02:25.900 --> 03:02:28.300]  capacity поделить на 4
[03:02:28.300 --> 03:02:31.100]  попов.
[03:02:31.100 --> 03:02:33.580]  Этого хватает, чтобы заявить, что у нас есть теперь
[03:02:33.580 --> 03:02:36.100]  capacity пополам монеток красненьких точно,
[03:02:36.100 --> 03:02:39.100]  и их точно хватит на то, чтобы вот эти capacity поделить на 4
[03:02:39.100 --> 03:02:41.540]  монеток переалоцировать.
[03:02:41.540 --> 03:02:43.860]  В принципе, нам, в общем-то,
[03:02:43.860 --> 03:02:46.860]  по нашей логике можно было по одной монетке давать.
[03:02:51.060 --> 03:02:54.820]  Вот, удобно, правда?
[03:02:54.820 --> 03:02:57.260]  То есть, видите, на уровне идеи
[03:02:57.260 --> 03:03:00.260]  вот уже хорошо получилось.
[03:03:05.260 --> 03:03:08.260]  Получается примерно следующее.
[03:03:08.660 --> 03:03:11.660]  Вот, и, ну вот,
[03:03:11.660 --> 03:03:14.660]  то есть, ну, как теперь, ну вот, ну теперь действительно
[03:03:14.660 --> 03:03:17.660]  такой анализ, конечно, это чуть усложнит,
[03:03:17.660 --> 03:03:20.660]  потому что теперь это будет у нас есть pushback,
[03:03:20.660 --> 03:03:23.660]  обычный pushback с реаллокацией, есть popback,
[03:03:23.660 --> 03:03:26.660]  а есть popback с реаллокацией на capacity, да?
[03:03:26.660 --> 03:03:29.660]  Вот.
[03:03:29.660 --> 03:03:31.660]  Ну а заметим, что,
[03:03:31.660 --> 03:03:35.660]  ну, с точки зрения оплаченных и оплаченных, да, то есть, здесь у нас
[03:03:36.060 --> 03:03:39.060]  получается capacity пополам
[03:03:40.060 --> 03:03:43.060]  плюс один,
[03:03:43.060 --> 03:03:46.060]  да, вот, если тут писать popback
[03:03:47.060 --> 03:03:50.060]  с тоже, давайте, реаллокацией capacity.
[03:03:53.060 --> 03:03:56.060]  А, действительно, так.
[03:03:56.060 --> 03:03:59.060]  Давайте на 4, пожалуйста.
[03:03:59.060 --> 03:04:02.060]  Так, что мы из этого оплачиваем?
[03:04:02.060 --> 03:04:04.060]  Вот те самые capacity,
[03:04:04.460 --> 03:04:07.460]  вот те самые capacity мы оплачиваем.
[03:04:07.460 --> 03:04:10.460]  А вопрос, там не просто capacity на 4, мы же убираем они?
[03:04:12.460 --> 03:04:15.460]  Нет, причем, ну копируем там, нет, ну как бы мы говорим,
[03:04:15.460 --> 03:04:18.460]  что мы, как бы, там, память выделяется,
[03:04:18.460 --> 03:04:21.460]  выделяется за вот единицы или там исчезает,
[03:04:21.460 --> 03:04:24.460]  а вот копируем мы каждый элемент по единичке, поэтому пишем capacity на 4.
[03:04:25.460 --> 03:04:28.460]  Ну, тут разные модели могут быть.
[03:04:28.460 --> 03:04:31.460]  Ну, вот мы так, то есть, как вот, оплачено, не оплачено, получаем так,
[03:04:31.860 --> 03:04:34.860]  мы успеваем все оплатить, потому что вот мы только что обсудили,
[03:04:34.860 --> 03:04:37.860]  почему мы это все реально успеваем оплатить.
[03:04:37.860 --> 03:04:40.860]  А для этого остается только понять, что на каждой операции
[03:04:40.860 --> 03:04:43.860]  нам дают не более чем две монетки,
[03:04:43.860 --> 03:04:46.860]  поэтому, как следствие, у нас суммарное число монеток OATN.
[03:04:46.860 --> 03:04:49.860]  Ну, вот, как следствие, значит, да, все оплаченные суммарно OATN.
[03:04:52.860 --> 03:04:55.860]  Да.
[03:04:56.860 --> 03:04:59.860]  Значит, мы получаем запушь две монетки и запоп одну монетку.
[03:05:00.260 --> 03:05:03.260]  Ну, и получать, и от этого нам будет даваться
[03:05:03.260 --> 03:05:06.260]  только больше число монеток.
[03:05:06.260 --> 03:05:09.260]  Да, давайте, кстати, теперь...
[03:05:09.260 --> 03:05:12.260]  А, ну да, вот давайте сейчас мы вот эту табличку более аккуратно нарисуем.
[03:05:15.260 --> 03:05:18.260]  Как паративном мессенджере.
[03:05:18.260 --> 03:05:21.260]  Так, как это говоря...
[03:05:21.260 --> 03:05:24.260]  Как это, да, сейчас я его наберу в компаративном мессенджере.
[03:05:24.260 --> 03:05:27.260]  Отправляем сообщение к человеку,
[03:05:27.660 --> 03:05:30.660]  на том конце стола просыпается.
[03:05:30.660 --> 03:05:33.660]  Так.
[03:05:33.660 --> 03:05:36.660]  Так.
[03:05:36.660 --> 03:05:39.660]  Так.
[03:05:39.660 --> 03:05:42.660]  Келокации, капасти.
[03:05:45.660 --> 03:05:48.660]  Да, мы работаем как спи-ту-пи, так и спи-ту-си.
[03:05:48.660 --> 03:05:51.660]  Так. Итак.
[03:05:51.660 --> 03:05:54.660]  Вот опять же, да, написали реальность.
[03:05:55.060 --> 03:05:58.060]  Так, капасти поделить на 4 плюс 1.
[03:05:58.060 --> 03:06:01.060]  И теперь, но теперь все хитрее.
[03:06:01.060 --> 03:06:04.060]  Каждый пуш нам теперь приносит две монетки.
[03:06:05.060 --> 03:06:08.060]  А каждый поп приносит
[03:06:08.060 --> 03:06:11.060]  одну монетку. Ну ладно, давайте.
[03:06:11.060 --> 03:06:14.060]  Приносит теперь одну.
[03:06:14.060 --> 03:06:17.060]  Вот. Теперь тратим.
[03:06:18.060 --> 03:06:21.060]  Значит, пуш обычный не тратит ничего.
[03:06:21.060 --> 03:06:24.060]  Пуш с реалокацией капасти тратит капасти монеток.
[03:06:25.060 --> 03:06:28.060]  Поп обычный тратит 0 монеток,
[03:06:28.060 --> 03:06:31.060]  поп с реалокацией капасити тоже тратит,
[03:06:31.060 --> 03:06:34.060]  ну тратит уже капасити пополам монеток.
[03:06:34.060 --> 03:06:37.060]  Ладно, на 4, хорошо.
[03:06:37.060 --> 03:06:39.060]  Вот.
[03:06:39.060 --> 03:06:42.060]  Значит, теперь CIT.
[03:06:42.060 --> 03:06:45.060]  Но давайте смотреть. По этой логике, да, CIT
[03:06:45.060 --> 03:06:48.060]  пуш весит 3. Пуш с реалокацией тоже весит
[03:06:48.060 --> 03:06:51.060]  все еще 3. С попом уже становится
[03:06:51.060 --> 03:06:54.060]  интереснее, потому что он теперь, ладно, весит не 3, но 2.
[03:06:54.460 --> 03:06:57.460]  Потому что 1 плюс 1 равно 2.
[03:06:57.460 --> 03:07:00.460]  А здесь, да, капасит на 4 плюс 1,
[03:07:00.460 --> 03:07:03.460]  плюс 1 минус капасит на 4, то есть 2.
[03:07:03.460 --> 03:07:06.460]  То есть видите, константы стали пожирнее,
[03:07:06.460 --> 03:07:09.460]  но они остались константами.
[03:07:19.460 --> 03:07:22.460]  А элементарно мы доказали. Мы сказали, что PIT это,
[03:07:22.860 --> 03:07:25.860]  ну PIT это сколько монеток нам платят за операцию.
[03:07:25.860 --> 03:07:28.860]  К PIT-е сколько платим мы, да?
[03:07:28.860 --> 03:07:31.860]  Вот. Ну а просто теперь мы просто внимательно
[03:07:31.860 --> 03:07:34.860]  посмотрим, как у нас устроены монетки. Мы всегда замечаем,
[03:07:34.860 --> 03:07:37.860]  что когда мы их хотим потратить, у нас всегда столько монеток есть,
[03:07:37.860 --> 03:07:40.860]  потому что. То есть доказательство все еще базируется
[03:07:40.860 --> 03:07:43.860]  на инварианте, что у нас сразу после
[03:07:43.860 --> 03:07:46.860]  реалокации занято ровно половина буфера.
[03:07:46.860 --> 03:07:49.860]  И не важно, эта реалокация была
[03:07:50.260 --> 03:07:53.260]  после расширения или после сужения.
[03:07:53.260 --> 03:07:56.260]  То есть после этого набранных монеток нам хватит.
[03:07:56.260 --> 03:07:59.260]  То есть мы не гарантируем, что их у нас ровно столько,
[03:07:59.260 --> 03:08:02.260]  но что как минимум столько есть нам хватит.
[03:08:09.260 --> 03:08:12.260]  Ну потому что, смотрите, нам нужно
[03:08:12.260 --> 03:08:15.260]  перекопировать капасити поделить на 4 элементов в новый буфер.
[03:08:15.260 --> 03:08:18.260]  Поэтому мы и пишем капасити поделить на 4.
[03:08:18.660 --> 03:08:21.660]  А оно пусто, это мы как бы реалацируем.
[03:08:21.660 --> 03:08:24.660]  То есть выделение памяти и удаление, оно у нас
[03:08:24.660 --> 03:08:27.660]  типа за вот единицы мы считаем.
[03:08:41.660 --> 03:08:44.660]  Потому что у нас обычно в C++ нет такой функции
[03:08:44.660 --> 03:08:47.660]  освободи половину этого. То есть, конечно, если бы мы
[03:08:48.060 --> 03:08:51.060]  писали сами менеджер памяти, то то есть мы бы сами
[03:08:51.060 --> 03:08:54.060]  себе заменили, у нас есть огромное количество элементов
[03:08:54.060 --> 03:08:57.060]  и у нас там есть какие-то свободные, не свободные
[03:08:57.060 --> 03:09:00.060]  элементы, то мы бы так и сделали. Правда, там конечно
[03:09:00.060 --> 03:09:03.060]  возникает оговорка, что начинаются эти свободные, не свободные
[03:09:03.060 --> 03:09:06.060]  отрезки из какого-то момента, там едва ли не дикартячка
[03:09:06.060 --> 03:09:09.060]  выплывает, но...
[03:09:18.060 --> 03:09:21.060]  Ну да, да, да.
[03:09:26.060 --> 03:09:29.060]  Ну, смотрите, если мы будем делать реалакацию
[03:09:29.060 --> 03:09:32.060]  на капаси... А, смотри, если у тебя будет
[03:09:32.060 --> 03:09:35.060]  капасти пополам, у тебя тупо не хватит монеток.
[03:09:35.060 --> 03:09:38.060]  То есть доказательств, это пойдет что-то не так,
[03:09:38.060 --> 03:09:41.060]  ты не можешь сказать, что у тебя хватит количества монеток,
[03:09:41.060 --> 03:09:44.060]  но то, чтобы это оплатить.
[03:09:44.060 --> 03:09:47.060]  Так, что, еще какие-то вопросы были?
[03:09:47.460 --> 03:09:50.460]  Так что, вот такая получается красота, если мы мыслим
[03:09:50.460 --> 03:09:53.460]  с точки зрения метода бухгалтерского учета,
[03:09:53.460 --> 03:09:56.460]  а можно мыслить с точки зрения потенциала.
[03:09:56.460 --> 03:09:59.460]  Правда, тут, конечно, такой пример, когда потенциал
[03:09:59.460 --> 03:10:02.460]  вы, собственно, из бухгалтерского учета и выводите, но
[03:10:02.460 --> 03:10:05.460]  давайте подумаем, какой здесь можно, тем не менее, выдать адекватный потенциал?
[03:10:10.460 --> 03:10:13.460]  Вот какой тут можно подогнать потенциал, чтобы это
[03:10:13.460 --> 03:10:16.460]  работало? Вот к вам вопрос.
[03:10:16.860 --> 03:10:19.860]  А, прям модуль?
[03:10:19.860 --> 03:10:22.860]  Нет, давайте попробуем.
[03:10:25.860 --> 03:10:28.860]  Да, то есть, действительно, логично.
[03:10:28.860 --> 03:10:31.860]  Идея та же, что если size равен
[03:10:31.860 --> 03:10:34.860]  капасте пополам, потенциал должен быть равен, наверное, нулью.
[03:10:34.860 --> 03:10:37.860]  А если куда-то там граница отклоняется туда или обратно,
[03:10:37.860 --> 03:10:40.860]  то, наверное, хотелось бы, чтобы эта граница как-то...
[03:10:41.260 --> 03:10:44.260]  Ну, можно, а можно не заморачиваться.
[03:10:44.260 --> 03:10:47.260]  А вот давайте просто вот помеселимся.
[03:10:47.260 --> 03:10:50.260]  Fiat' равно...
[03:10:50.260 --> 03:10:53.260]  То есть, Fiat' равно
[03:10:53.260 --> 03:10:56.260]  модуль, там Cz,
[03:10:56.260 --> 03:10:59.260]  минус капасте пополам.
[03:11:00.260 --> 03:11:03.260]  Всё, просто тупо модуль.
[03:11:03.260 --> 03:11:06.260]  Вот давайте прям вот так попробуем развлечься.
[03:11:06.260 --> 03:11:09.260]  А, может это ещё на два домножить, а?
[03:11:09.660 --> 03:11:12.660]  А, давайте чтобы, да, чтобы
[03:11:12.660 --> 03:11:15.660]  что-то поддерживать консистенцию с тем, что было раньше.
[03:11:15.660 --> 03:11:18.660]  Вот, давайте 2 Cz, минус капасте, пожалуйста.
[03:11:19.660 --> 03:11:22.660]  Ну, как бы да, курс вот, то есть, да,
[03:11:22.660 --> 03:11:25.660]  фактически мы сделали только динаминацию валюты в два раза, но это уже так.
[03:11:25.660 --> 03:11:28.660]  Да, вот давайте внимательно.
[03:11:28.660 --> 03:11:31.660]  Так, сейчас давайте вот внимательно, сейчас я тут...
[03:11:34.660 --> 03:11:37.660]  Модуль 2 Cz, минус капасте.
[03:11:38.060 --> 03:11:41.060]  А если мы ведём 4 Cz, минус капасте?
[03:11:45.060 --> 03:11:48.060]  Ну, можно будет тоже попробовать.
[03:11:48.060 --> 03:11:51.060]  Ну, пока не знаю, я пока не знаю, что с этим будет.
[03:11:51.060 --> 03:11:54.060]  А это же второй потенциал дать, у нас был первый,
[03:11:54.060 --> 03:11:57.060]  ещё мы к нему добавили второй для ковки.
[03:11:57.060 --> 03:12:00.060]  Не, не, не, не, мы полностью заменили потенциал.
[03:12:00.060 --> 03:12:03.060]  Но по факту можно и два раза дать.
[03:12:03.060 --> 03:12:06.060]  Нет, нет, нельзя.
[03:12:06.460 --> 03:12:09.460]  Возьмём сначала один потенциал относить, до которого
[03:12:09.460 --> 03:12:12.460]  пуши работают за O от единицы, а потом возьмём
[03:12:12.460 --> 03:12:15.460]  второй относить, до которого попы работают за O от единицы.
[03:12:15.460 --> 03:12:18.460]  Но счастья не будет.
[03:12:18.460 --> 03:12:21.460]  Потому что всегда можно подогнать потенциал так,
[03:12:21.460 --> 03:12:24.460]  что пуши работали за O от единицы, а попы работали
[03:12:24.460 --> 03:12:27.460]  за O от бесконечности, или наоборот?
[03:12:27.460 --> 03:12:30.460]  Это практически в любой структуре данных это можно сделать.
[03:12:30.460 --> 03:12:33.460]  Так что...
[03:12:33.860 --> 03:12:36.860]  Почему?
[03:12:36.860 --> 03:12:39.860]  А почему мы не можем провести соответственно два потенциала
[03:12:39.860 --> 03:12:42.860]  и считать потенциал как сумма этих потенциалов?
[03:12:42.860 --> 03:12:45.860]  Можем.
[03:12:45.860 --> 03:12:48.860]  Но тогда будьте любезны гарантировать, что
[03:12:48.860 --> 03:12:51.860]  сумма этих потенциалов даст по каждой операции всё в порядке.
[03:12:51.860 --> 03:12:54.860]  Потому что если, например, относительно одного потенциала
[03:12:54.860 --> 03:12:57.860]  будут портиться вот эти две операции, относительно другого вот эти,
[03:12:57.860 --> 03:13:00.860]  то в сумме получится испорчены все четыре.
[03:13:01.260 --> 03:13:04.260]  То есть два потенциала, как бы недостатки друг друга, не...
[03:13:14.260 --> 03:13:17.260]  Нет, там не два потенциала, там сумма двух величин.
[03:13:20.260 --> 03:13:23.260]  То есть вы тогда должны гарантировать, что
[03:13:23.260 --> 03:13:26.260]  если вы суммируете два потенциала, то
[03:13:26.260 --> 03:13:29.260]  будет работать с каждой проблемой,
[03:13:29.660 --> 03:13:32.660]  то есть каждое лишнее действие как бы нивелируется
[03:13:32.660 --> 03:13:35.660]  одним потенциалом и игнорируется другим.
[03:13:35.660 --> 03:13:38.660]  Вот так.
[03:13:38.660 --> 03:13:41.660]  То есть как бы если один потенциал уменьшается, а второй не изменяется,
[03:13:41.660 --> 03:13:44.660]  то это вас устраивает.
[03:13:44.660 --> 03:13:47.660]  Там, собственно, будет так работать.
[03:13:47.660 --> 03:13:50.660]  До этого мы тоже с вами дойдём.
[03:13:50.660 --> 03:13:53.660]  Хотя сначала вы на это домашнее задание порешайте.
[03:13:54.060 --> 03:13:57.060]  Ну, прошлое это немножко не о том.
[03:13:59.060 --> 03:14:02.060]  Прошлое ещё нет, прошлое уже есть, да.
[03:14:02.060 --> 03:14:05.060]  Прошлое ещё есть, а будущее ещё только будет.
[03:14:06.060 --> 03:14:09.060]  Да, знаете, да, как это...
[03:14:09.060 --> 03:14:12.060]  Эх, как говорил капитан очевидность на свидание, да.
[03:14:13.060 --> 03:14:16.060]  Да, ну знаете, номер такой есть.
[03:14:16.060 --> 03:14:19.060]  Да, капитан очевидность на свидание.
[03:14:19.060 --> 03:14:22.060]  Это газета, что журнал?
[03:14:22.460 --> 03:14:25.460]  Нет, КВН.
[03:14:25.460 --> 03:14:28.460]  Причём сборная фистеха, что характерно.
[03:14:28.460 --> 03:14:31.460]  Ну вот, то есть так и проходит, говорит, привет, я же пришёл.
[03:14:31.460 --> 03:14:34.460]  А присаживайся на стул.
[03:14:34.460 --> 03:14:37.460]  Ну вот, ты такой смешной, расскажи.
[03:14:37.460 --> 03:14:40.460]  А я всякие стайны знаю.
[03:14:40.460 --> 03:14:43.460]  Знаешь, когда будет выходить нот, кто будет вести программу «Вечерний урган»?
[03:14:43.460 --> 03:14:46.460]  А знаешь, когда она будет выходить?
[03:14:46.460 --> 03:14:49.460]  Когда? Вечером.
[03:14:49.860 --> 03:14:52.860]  А знаешь, кто отец Аллы Пугачёвый?
[03:14:52.860 --> 03:14:55.860]  Кто? Борис Пугачёв.
[03:14:55.860 --> 03:14:58.860]  И так далее. А потом начинается красота.
[03:14:58.860 --> 03:15:01.860]  Знаешь, я вчера был в кресле, сидел там.
[03:15:01.860 --> 03:15:04.860]  Перечитывал Томик Есенина. Девушка, Сергея!
[03:15:04.860 --> 03:15:07.860]  Ой, я люблю тебя ещё больше.
[03:15:07.860 --> 03:15:10.860]  И ты знаешь, что было, то было.
[03:15:10.860 --> 03:15:13.860]  Что будет, то будет.
[03:15:13.860 --> 03:15:16.860]  Прошлого нам не изменить, а будущего мы не знаем.
[03:15:17.260 --> 03:15:20.260]  Знаешь, вот снег, он превращается в воду.
[03:15:20.260 --> 03:15:23.260]  Так и мы, когда взрослеем, становимся немножечко старше.
[03:15:28.260 --> 03:15:31.260]  Однажды я понял, что если я вечером засну без тебя, то проснусь один.
[03:15:38.260 --> 03:15:41.260]  Я очень хочу, чтобы у нас с тобой были дети.
[03:15:41.260 --> 03:15:44.260]  Более того, я хочу, чтобы именно ты их родила.
[03:15:44.660 --> 03:15:47.660]  Ну вот, очаровательный номер.
[03:15:47.660 --> 03:15:50.660]  Остаётся только в диване.
[03:15:50.660 --> 03:15:53.660]  Концовка номера. Уже играет отпивка.
[03:15:53.660 --> 03:15:56.660]  И, собственно, капитан «Ичевидность» уходит.
[03:15:56.660 --> 03:15:59.660]  Внимание, вопрос. Что написано сзади на его плаще?
[03:15:59.660 --> 03:16:02.660]  Ничего.
[03:16:02.660 --> 03:16:05.660]  Да, правильный ответ. Там просто написано «плащ».
[03:16:05.660 --> 03:16:08.660]  Можете гуглануть, это КВН «Капитан «Ичевидность» на свидании.
[03:16:08.660 --> 03:16:11.660]  Замечательно, на самом деле.
[03:16:12.060 --> 03:16:19.060]  Судя по реакции самой команды, видимо, большого успеха у публики.
[03:16:19.060 --> 03:16:23.060]  Может, поддержки этот номер почему-то не нашёл.
[03:16:23.060 --> 03:16:26.060]  Ну, по понятным причинам.
[03:16:26.060 --> 03:16:29.060]  Если он уже всё родил, может быть, простудия.
[03:16:29.060 --> 03:16:32.060]  Нет, это другой вопрос.
[03:16:32.060 --> 03:16:35.060]  Ладно.
[03:16:35.060 --> 03:16:38.060]  Это на уровне Штирлец.
[03:16:38.460 --> 03:16:41.460]  Да, да, да. Штирлец открыл окно и за окна дуло.
[03:16:41.460 --> 03:16:44.460]  Штирлец нажал тальте в четыре, окно исчезло.
[03:16:44.460 --> 03:16:47.460]  Да, да, да.
[03:16:48.460 --> 03:16:51.460]  Понятно.
[03:16:51.460 --> 03:16:54.460]  Вот.
[03:16:54.460 --> 03:16:57.460]  Но это так.
[03:16:57.460 --> 03:17:00.460]  Как, по-моему, вы начинаете, получилось действительно красиво.
[03:17:00.460 --> 03:17:03.460]  Ладно. Пока тут шутками и прибаутками у меня тут табличка появилась.
[03:17:03.460 --> 03:17:06.460]  Значит, давайте разбираться.
[03:17:06.860 --> 03:17:09.860]  Итак, пуш обычный работает за единицу.
[03:17:09.860 --> 03:17:12.860]  Пуш с реаллокацией работает за Capacity плюс единицу.
[03:17:14.860 --> 03:17:17.860]  Поп работает за единицу обычный, конечно.
[03:17:17.860 --> 03:17:20.860]  Поп с этой работает за Capacity поделить на 4.
[03:17:20.860 --> 03:17:23.860]  На 4 плюс 1.
[03:17:23.860 --> 03:17:26.860]  Так, ну поехали.
[03:17:26.860 --> 03:17:29.860]  Вот с этим потенциалом разбиваемся.
[03:17:29.860 --> 03:17:32.860]  Так, у нас тут двойка, напоминаю.
[03:17:32.860 --> 03:17:35.860]  Да, вы, возможно, это не видите, но она тут есть.
[03:17:36.260 --> 03:17:39.260]  Ну, тут, как всегда, тут она х.
[03:17:39.260 --> 03:17:42.260]  А вот тут, как повезет.
[03:17:42.260 --> 03:17:45.260]  Х плюс 2 х минус 2.
[03:17:45.260 --> 03:17:48.260]  Да, х плюс минус 2.
[03:17:48.260 --> 03:17:55.260]  Ну и как следствие, ну и, в общем-то, учетная стоимость тоже 1 плюс минус 2.
[03:17:55.260 --> 03:17:58.260]  Ну так, плюс-минус.
[03:17:58.260 --> 03:18:03.260]  А потому что, видите, потому что от того, что у вас сайс измерится на 1,
[03:18:03.660 --> 03:18:06.660]  у вас модуль может как увеличится на 2, так и уменьшится.
[03:18:06.660 --> 03:18:09.660]  Ладно, есть еще подлые случаи, когда он не поменяется вообще.
[03:18:09.660 --> 03:18:12.660]  Да, еще бывают случаи х.
[03:18:12.660 --> 03:18:15.660]  И тогда тут будет 1.
[03:18:15.660 --> 03:18:18.660]  Если потенциал был минус 1, если тут было минус 1, осталось 1.
[03:18:18.660 --> 03:18:21.660]  А, ну ладно, такого не бывает.
[03:18:21.660 --> 03:18:24.660]  Такого не бывает, Capacity ничего там не бывает.
[03:18:24.660 --> 03:18:27.660]  А если у нас 0 элементов, Capacity ничего?
[03:18:27.660 --> 03:18:30.660]  Ну там уже отдельная песня.
[03:18:31.060 --> 03:18:34.060]  Ну ладно, такие мелкие случаи, мы там говорим, что все завод единицы работает,
[03:18:34.060 --> 03:18:37.060]  поэтому не заморачиваемся.
[03:18:37.060 --> 03:18:40.060]  То есть говоришь, если элементов меньше 4, то как-нибудь там делаем как угодно.
[03:18:40.060 --> 03:18:43.060]  Ну как угодно, чтобы это завод единицы был.
[03:18:43.060 --> 03:18:46.060]  Ну как в рекурентах.
[03:18:46.060 --> 03:18:49.060]  То есть мы тоже там это забиваем на локальности.
[03:18:49.060 --> 03:18:52.060]  Вот, ладно.
[03:18:52.060 --> 03:18:55.060]  Соответственно, да.
[03:18:55.060 --> 03:18:58.060]  Господи, что он отвернутый состоит вообще?
[03:18:58.060 --> 03:18:59.060]  Ему что, неинтересно что ли его?
[03:19:00.060 --> 03:19:03.060]  Да, легче не стало, да.
[03:19:03.060 --> 03:19:06.060]  Ну ладно.
[03:19:06.060 --> 03:19:09.060]  А то что он там охранник что ли, я не знаю.
[03:19:09.060 --> 03:19:12.060]  Причем который охраняет, видимо, меня от вас, я не знаю.
[03:19:12.060 --> 03:19:15.060]  О, правильно.
[03:19:17.060 --> 03:19:18.060]  Ладно.
[03:19:18.060 --> 03:19:21.060]  Ну ладно, пусть стоит как стоит, ладно.
[03:19:21.060 --> 03:19:24.060]  Так вот, пусть с реаллокацией на Capacity.
[03:19:24.060 --> 03:19:27.060]  Был равен потенциал, ну видимо Capacity.
[03:19:30.060 --> 03:19:33.060]  Можно спросить, почему еще не может быть 0?
[03:19:34.060 --> 03:19:37.060]  Потому что у нас Capacity всегда степень двойки.
[03:19:39.060 --> 03:19:42.060]  А это означает, что как бы эта разница всегда четная.
[03:19:44.060 --> 03:19:47.060]  Поэтому как бы 1 на минус 1 поменяться не может.
[03:19:50.060 --> 03:19:53.060]  Да, там такая ситуация.
[03:19:53.060 --> 03:19:54.060]  Так вот, phi и t.
[03:19:54.060 --> 03:19:57.060]  Так, ну потенциал после того как мы тут это расширились,
[03:19:57.060 --> 03:20:00.060]  получился теперь у нас 2.
[03:20:00.060 --> 03:20:03.060]  Да, здесь все железо бетонно.
[03:20:03.060 --> 03:20:06.060]  И учетная стоимость 3.
[03:20:09.060 --> 03:20:12.060]  Чего?
[03:20:12.060 --> 03:20:15.060]  Нет, Capacity.
[03:20:15.060 --> 03:20:18.060]  Нет, у нас тут двойка, напоминаю.
[03:20:18.060 --> 03:20:21.060]  Зачем нам нужна эта двойка?
[03:20:21.060 --> 03:20:24.060]  Так, посмотрим, что у нас там с попом.
[03:20:24.060 --> 03:20:27.060]  Ну было x, стало x.
[03:20:28.060 --> 03:20:31.060]  Ну да, тоже плюс-минус 2.
[03:20:31.060 --> 03:20:34.060]  Ладно, даже мы напишем минус плюс 2.
[03:20:37.060 --> 03:20:38.060]  Да, поэтому тут тоже один.
[03:20:38.060 --> 03:20:39.060]  Почему мы пишем минус плюс?
[03:20:39.060 --> 03:20:42.060]  Ну для того, чтобы тут было какое-то более соответствие.
[03:20:42.060 --> 03:20:44.060]  И наконец самое интересное,
[03:20:44.060 --> 03:20:47.060]  ради чего все и писалось, как говорится.
[03:20:48.060 --> 03:20:51.060]  Так, чему у нас был равен pop с реаллокацией на Capacity?
[03:20:51.060 --> 03:20:54.060]  Так, он был равен...
[03:20:54.060 --> 03:20:57.060]  Ну size был равен получается чему перед вот этой штукой?
[03:20:57.060 --> 03:21:00.060]  Нет.
[03:21:00.060 --> 03:21:03.060]  Чему был равен size?
[03:21:03.060 --> 03:21:06.060]  Вот.
[03:21:06.060 --> 03:21:09.060]  Да, поэтому потенциал здесь было Capacity на 4 плюс 1 умножаем на 2.
[03:21:09.060 --> 03:21:12.060]  Получается Capacity пополам плюс 2.
[03:21:12.060 --> 03:21:15.060]  Минус Capacity.
[03:21:15.060 --> 03:21:18.060]  То есть Capacity пополам минус 2.
[03:21:18.060 --> 03:21:21.060]  Вот так.
[03:21:21.060 --> 03:21:24.060]  После этого
[03:21:24.060 --> 03:21:27.060]  потенциал стал равен 0.
[03:21:30.060 --> 03:21:32.060]  Но потому что Capacity уменьшилось вдвое,
[03:21:32.060 --> 03:21:34.060]  а размер там был Capacity на 4.
[03:21:34.060 --> 03:21:37.060]  Ну после попы непосредственно.
[03:21:37.060 --> 03:21:39.060]  Так, ну что, смотрим там по потенциалу.
[03:21:39.060 --> 03:21:41.060]  Что-то там получается.
[03:21:41.060 --> 03:21:44.060]  Это плюс, это минус, это шлёк.
[03:21:44.060 --> 03:21:46.060]  Нет, нет, нет.
[03:21:46.060 --> 03:21:49.060]  В минус пошло минус 2.
[03:21:49.060 --> 03:21:52.060]  Нет, в смысле мы же Capacity на 4,
[03:21:52.060 --> 03:21:55.060]  из него вычли Capacity на 2,
[03:21:55.060 --> 03:21:58.060]  и у нас получилось какое-то отрицательное число,
[03:21:58.060 --> 03:22:01.060]  что в целом вот 1.
[03:22:01.060 --> 03:22:04.060]  Capacity на 4 минус Capacity на 2.
[03:22:04.060 --> 03:22:07.060]  Ой, кайф какой. Да, вообще кайф.
[03:22:07.060 --> 03:22:10.060]  То есть смотрите какая красота получилась.
[03:22:10.060 --> 03:22:13.060]  То есть получается 3 минус Capacity на 4.
[03:22:13.060 --> 03:22:16.060]  Вот так.
[03:22:16.060 --> 03:22:18.060]  Нет, нет, нет.
[03:22:18.060 --> 03:22:21.060]  Ну так, Омега какая-то.
[03:22:21.060 --> 03:22:24.060]  Минус Омега ОТН, да, вот так вот.
[03:22:24.060 --> 03:22:27.060]  Нет, ну нормально в принципе.
[03:22:27.060 --> 03:22:30.060]  Ладно, каждая не превосходит единицы.
[03:22:30.060 --> 03:22:33.060]  Ладно, от единицы, от единицы.
[03:22:33.060 --> 03:22:36.060]  Ну значит всё нормально чуть-чуть.
[03:22:36.060 --> 03:22:39.060]  На самом деле у нас это же вылезло,
[03:22:39.060 --> 03:22:42.060]  потому что у нас два сайса в этой сторону.
[03:22:42.060 --> 03:22:45.060]  Мы могли улучшить в том плане, что если в эту сторону,
[03:22:45.060 --> 03:22:48.060]  то тут умножать на 2, а в эту сторону не умножать.
[03:22:48.060 --> 03:22:51.060]  Да, но это уже да.
[03:22:51.060 --> 03:22:54.060]  Это как бы эквивалентно тому,
[03:22:54.060 --> 03:22:57.060]  что мы тут не одну монетку даём, а сразу две.
[03:22:57.060 --> 03:23:00.060]  На самом деле.
[03:23:00.060 --> 03:23:03.060]  Нет, в этом варианте мы давали одну,
[03:23:03.060 --> 03:23:06.060]  и этого нам хватало.
[03:23:06.060 --> 03:23:09.060]  Но с точки зрения потенциала, когда мы делаем попы здесь,
[03:23:09.060 --> 03:23:12.060]  то получается аж на две.
[03:23:12.060 --> 03:23:15.060]  Вот, поэтому тут получился такой перебор.
[03:23:15.060 --> 03:23:18.060]  То есть он символизирует, что у нас куча лишних монеток.
[03:23:18.060 --> 03:23:21.060]  Тут у нас ещё и лишние монетки образовались.
[03:23:21.060 --> 03:23:24.060]  Ну в метре потенциалов мы же здесь получается сколько монеток?
[03:23:24.060 --> 03:23:27.060]  Две монетки, да?
[03:23:27.060 --> 03:23:30.060]  Ну да, нет, в метре потенциалов монеток не было вообще.
[03:23:30.060 --> 03:23:33.060]  Да, но если переводить этот потенциал на язык монеток,
[03:23:33.060 --> 03:23:36.060]  то да, мы на каждом шаге даём две монетки.
[03:23:37.060 --> 03:23:40.060]  По факту да.
[03:23:40.060 --> 03:23:43.060]  Тут будет более мерзкая формула, если мы будем символизировать одну монетку.
[03:23:43.060 --> 03:23:46.060]  Но если вы подгоняете потенциал под монетки,
[03:23:46.060 --> 03:23:49.060]  то проще уже на языке монеток это и описывать.
[03:23:49.060 --> 03:23:52.060]  Чем-то не темно занимаетесь, да?
[03:23:52.060 --> 03:23:55.060]  В данном случае это как бы да.
[03:23:55.060 --> 03:23:58.060]  Получается так.
[03:23:58.060 --> 03:24:01.060]  Это называется да.
[03:24:01.060 --> 03:24:04.060]  Нам нужно забить гвоздь.
[03:24:04.060 --> 03:24:07.060]  Мы можем использовать молоток и можем использовать тополь.
[03:24:07.060 --> 03:24:10.060]  То мы можем там подгонять какую-то логику молотка
[03:24:10.060 --> 03:24:13.060]  и подгонять её к топору.
[03:24:13.060 --> 03:24:16.060]  Но кажется, может вместо этого лучше использовать молоток?
[03:24:16.060 --> 03:24:19.060]  Микроскоп.
[03:24:19.060 --> 03:24:22.060]  Да, ну микроскоп это да.
[03:24:22.060 --> 03:24:25.060]  После этого начинается микрохиругия бензопилой.
[03:24:25.060 --> 03:24:28.060]  О господи.
[03:24:28.060 --> 03:24:31.060]  Если посчитать как монетки,
[03:24:31.060 --> 03:24:34.060]  посмотрите за монетками потенциала,
[03:24:34.060 --> 03:24:37.060]  у нас много элементов, но больше половины,
[03:24:37.060 --> 03:24:40.060]  и мы их удаляем. Получается мы отдаем монетки?
[03:24:40.060 --> 03:24:43.060]  Ну да.
[03:24:43.060 --> 03:24:46.060]  То есть потенциал он как бы жёстче в том плане,
[03:24:46.060 --> 03:24:49.060]  что мы говорим, что лишние монетки мы ещё и отдаём.
[03:24:49.060 --> 03:24:52.060]  Нет, в принципе это очень удобно,
[03:24:52.060 --> 03:24:55.060]  когда нам даёт, вот вам две монетки, они нам не пригодились.
[03:24:55.060 --> 03:24:58.060]  Это очень удобно, знаете, страховая компания,
[03:24:58.060 --> 03:25:01.060]  которая иногда вам возвращает кэшбэк.
[03:25:01.060 --> 03:25:04.060]  Почему не за что?
[03:25:04.060 --> 03:25:07.060]  Ну просто не понадобилось.
[03:25:07.060 --> 03:25:10.060]  Вы хорошо себя вели, и вас не потребовалось страховать,
[03:25:10.060 --> 03:25:13.060]  так что вот ваши деньги, очень удобно.
[03:25:13.060 --> 03:25:16.060]  Ну какая-то часть.
[03:25:16.060 --> 03:25:19.060]  Самое смешное, что на самом деле иногда это реально работает.
[03:25:19.060 --> 03:25:22.060]  Потому что, я не знаю, вы сталкиваетесь,
[03:25:22.060 --> 03:25:25.060]  но вы вряд ли, когда-нибудь будете покупать квартиру,
[03:25:25.060 --> 03:25:28.060]  вы сталкиваетесь с таким понятием,
[03:25:28.060 --> 03:25:31.060]  как налоговый вытечет.
[03:25:31.060 --> 03:25:34.060]  Глуботий смысл очень простой.
[03:25:34.060 --> 03:25:37.060]  То есть это означает, что когда вы там
[03:25:37.060 --> 03:25:40.060]  по крайней мере первый раз покупаете квартиру,
[03:25:40.060 --> 03:25:43.060]  то государство какую-то часть ваших же налогов
[03:25:43.060 --> 03:25:46.060]  вам же и возвращает.
[03:25:46.060 --> 03:25:49.060]  По сути таким образом оно просто поддерживает вас.
[03:25:49.060 --> 03:25:52.060]  Да нет.
[03:25:52.060 --> 03:25:55.060]  Но я не помню за учебу.
[03:25:58.060 --> 03:26:01.060]  Будет считаться, сколько с вашей зарплаты налогов
[03:26:01.060 --> 03:26:04.060]  как-то ушло, но правда там есть ограничения сверху.
[03:26:04.060 --> 03:26:07.060]  Бесконечное число денег вам не вернут.
[03:26:07.060 --> 03:26:10.060]  Только за квартиру и только за первую?
[03:26:10.060 --> 03:26:13.060]  Это то, что я знаю.
[03:26:13.060 --> 03:26:16.060]  Может быть и другие вычисленные,
[03:26:16.060 --> 03:26:19.060]  может бизнес тоже могут как-то поддерживать.
[03:26:20.060 --> 03:26:23.060]  За всякий ложь тоже есть налоговый вытечет.
[03:26:23.060 --> 03:26:26.060]  Возможно, возможно, да.
[03:26:26.060 --> 03:26:29.060]  Это такое уже.
[03:26:29.060 --> 03:26:32.060]  Где?
[03:26:32.060 --> 03:26:35.060]  А, поп с релокацией на capacity.
[03:26:35.060 --> 03:26:38.060]  Тут написано capacity поделить на 4 плюс 1.
[03:26:38.060 --> 03:26:41.060]  Тут написано capacity пополам минус 2,
[03:26:41.060 --> 03:26:44.060]  мы тут вот посчитали.
[03:26:44.060 --> 03:26:47.060]  И тут написано 0.
[03:26:47.060 --> 03:26:50.060]  И минус capacity на 4.
[03:26:50.060 --> 03:26:53.060]  Это супер.
[03:26:53.060 --> 03:26:56.060]  То есть оно может уходить далеко от нуля,
[03:26:56.060 --> 03:26:59.060]  но в нужную нам сторону.
[03:26:59.060 --> 03:27:02.060]  То есть в минус-то оно идет там сколько угодно.
[03:27:02.060 --> 03:27:05.060]  То есть в принципе это означает, что наша фирма может провести корпоратив.
[03:27:05.060 --> 03:27:08.060]  Чего?
[03:27:11.060 --> 03:27:14.060]  Ну это уже по опыту.
[03:27:15.060 --> 03:27:18.060]  Это уже вопрос ближе из цикла,
[03:27:18.060 --> 03:27:21.060]  как решать задачу.
[03:27:21.060 --> 03:27:24.060]  То есть понятно, что есть конкретные методы решать задачу,
[03:27:24.060 --> 03:27:27.060]  но где-то все равно придется что-то нащупать.
[03:27:27.060 --> 03:27:30.060]  Потому что это уже из цикла.
[03:27:30.060 --> 03:27:33.060]  Как угадать потенциал, как понять,
[03:27:33.060 --> 03:27:36.060]  как выводить тавтологию.
[03:27:36.060 --> 03:27:39.060]  Будет у вас там от логики такое развлечение.
[03:27:39.060 --> 03:27:42.060]  Я помню, меня там однорубник как-то писал.
[03:27:42.060 --> 03:27:45.060]  Самый популярный метод решения задачи по линалу.
[03:27:45.060 --> 03:27:48.060]  Заметим что.
[03:27:48.060 --> 03:27:51.060]  У вас не Богданов ведет?
[03:27:51.060 --> 03:27:54.060]  Нет?
[03:27:54.060 --> 03:27:57.060]  Ну я не знаю.
[03:27:57.060 --> 03:28:00.060]  Просто это означает, что я не знаю человека, который вас ведет,
[03:28:00.060 --> 03:28:03.060]  поэтому ничего как бы сказать не могу.
[03:28:03.060 --> 03:28:06.060]  Нет, линал это линейная алгебра.
[03:28:06.060 --> 03:28:09.060]  Ладно, у вас называется алгебридиометрия.
[03:28:09.060 --> 03:28:12.060]  Нет, математическая логика это другой предмет.
[03:28:12.060 --> 03:28:15.060]  Но там замечать придется.
[03:28:15.060 --> 03:28:18.060]  Ладно.
[03:28:18.060 --> 03:28:21.060]  Так, хорошо.
[03:28:21.060 --> 03:28:24.060]  Есть ли по всем вот этим вот веселым потенциалам какие-то вопросы?
[03:28:24.060 --> 03:28:27.060]  Ладно.
[03:28:27.060 --> 03:28:30.060]  Тогда соответственно, Даша.
[03:28:30.060 --> 03:28:33.060]  Ладно, тогда придется нам сейчас...
[03:28:33.060 --> 03:28:36.060]  Ладно, чтобы у вас...
[03:28:36.060 --> 03:28:39.060]  Ладно, чтобы у вас домашнее задание было консистентным,
[03:28:39.060 --> 03:28:42.060]  мы сейчас тогда поговорим немножко...
[03:28:42.060 --> 03:28:45.060]  Вернемся к рекуррентам, а точнее обсудим еще один алгоритм,
[03:28:45.060 --> 03:28:48.060]  который в этих рекуррентах нам не помешает.
[03:28:48.060 --> 03:28:51.060]  А, впрочем, если останется время,
[03:28:51.060 --> 03:28:54.060]  можно тогда и карацуку обсудить, что бы нет.
[03:28:54.060 --> 03:28:57.060]  Вот так.
[03:28:57.060 --> 03:29:00.060]  Нет, ну что, сам-то алгоритм простой,
[03:29:00.060 --> 03:29:03.060]  там фурятино надо будет отдельно обсуждать.
[03:29:04.060 --> 03:29:07.060]  Вот.
[03:29:13.060 --> 03:29:16.060]  Что?
[03:29:16.060 --> 03:29:19.060]  Может и лучше.
[03:29:19.060 --> 03:29:22.060]  О, плосно.
[03:29:22.060 --> 03:29:25.060]  О, спасибо.
[03:29:25.060 --> 03:29:28.060]  Так.
[03:29:28.060 --> 03:29:31.060]  Так.
[03:29:31.060 --> 03:29:34.060]  Ну вот.
[03:29:34.060 --> 03:29:37.060]  Ну вот.
[03:29:37.060 --> 03:29:40.060]  Какую сейчас там задачу хочется порешать?
[03:29:40.060 --> 03:29:43.060]  Ну, на самом деле,
[03:29:43.060 --> 03:29:46.060]  можно даже сказать, что
[03:29:46.060 --> 03:29:49.060]  мы попробуем искать даже не столько медиану,
[03:29:49.060 --> 03:29:52.060]  сколько катую порядковую статистику.
[03:29:55.060 --> 03:29:58.060]  Да.
[03:29:58.060 --> 03:30:01.060]  Вот.
[03:30:01.060 --> 03:30:04.060]  Точнее, вот.
[03:30:04.060 --> 03:30:07.060]  На n элемент.
[03:30:07.060 --> 03:30:10.060]  Там какие-нибудь.
[03:30:10.060 --> 03:30:13.060]  Можем даже для простоты сказать,
[03:30:13.060 --> 03:30:16.060]  что они попарно различны.
[03:30:16.060 --> 03:30:19.060]  Хотя там одинаковость там ничего особо не даст.
[03:30:19.060 --> 03:30:22.060]  А таян вот.
[03:30:22.060 --> 03:30:25.060]  Нет, мы не хотим прям сортировать элементы.
[03:30:25.060 --> 03:30:28.060]  Дано число k от 1 до n.
[03:30:32.060 --> 03:30:35.060]  Ну вот.
[03:30:39.060 --> 03:30:42.060]  И возникает такой, внимание, вопрос.
[03:30:42.060 --> 03:30:45.060]  Если бы эти элементы отсортировали?
[03:30:55.060 --> 03:30:58.060]  Если бы их отсортировали,
[03:30:58.060 --> 03:31:01.060]  кто из них был бы катом?
[03:31:04.060 --> 03:31:07.060]  Непонятно.
[03:31:07.060 --> 03:31:10.060]  Но на самом деле абстрактно,
[03:31:10.060 --> 03:31:13.060]  пока мы ничего не знаем о массиве,
[03:31:13.060 --> 03:31:16.060]  и может быть кто угодно.
[03:31:16.060 --> 03:31:19.060]  И нам надо придумать алгоритм, который это найдет.
[03:31:19.060 --> 03:31:22.060]  Желательно за линию.
[03:31:22.060 --> 03:31:25.060]  И тут идеи вообще возникают.
[03:31:25.060 --> 03:31:28.060]  Но идея возникает такая.
[03:31:28.060 --> 03:31:31.060]  Отсортировать за o от n мы, конечно, не можем.
[03:31:31.060 --> 03:31:34.060]  Точнее, можем только в отдельных экзотических случаях,
[03:31:34.060 --> 03:31:37.060]  но в общем случае это невозможно в принципе.
[03:31:37.060 --> 03:31:40.060]  Будем когда-нибудь доказывать для общего случая,
[03:31:40.060 --> 03:31:43.060]  что сортировка...
[03:31:43.060 --> 03:31:46.060]  Будем, будем.
[03:31:46.060 --> 03:31:49.060]  Ну там будем оговаривать,
[03:31:49.060 --> 03:31:52.060]  да, мне уже страшно, конечно, что-то обещать.
[03:31:52.060 --> 03:31:55.060]  Но думаю, это будет в следующий раз.
[03:31:55.060 --> 03:31:58.060]  Да, да, да, да.
[03:31:58.060 --> 03:32:01.060]  Ну как сказать, я понимаю, что...
[03:32:01.060 --> 03:32:04.060]  Да, тут можно отдельно потом выписывать,
[03:32:04.060 --> 03:32:07.060]  сколько того, что я сказал, не сбылось.
[03:32:07.060 --> 03:32:10.060]  Но тут честно скажу, я думал, что это будет сегодня,
[03:32:10.060 --> 03:32:13.060]  но как-то вот да, что-то вот...
[03:32:13.060 --> 03:32:16.060]  Так, ребят, что за шум пошел?
[03:32:17.060 --> 03:32:20.060]  Значит, смотрите. Итак, как искать kt элемент?
[03:32:20.060 --> 03:32:23.060]  Мы отсортировать не можем, но можем
[03:32:23.060 --> 03:32:26.060]  неожиданно взять следующее. Мы можем взять
[03:32:26.060 --> 03:32:29.060]  какой-нибудь элемент,
[03:32:29.060 --> 03:32:32.060]  допустим, у меня есть какой-нибудь x, который будет равен
[03:32:32.060 --> 03:32:35.060]  какому-то аитому элементу,
[03:32:35.060 --> 03:32:38.060]  и мы можем за линию
[03:32:38.060 --> 03:32:41.060]  переупорядочить эти элементы так, чтобы
[03:32:41.060 --> 03:32:44.060]  сначала шли все элементы меньше x,
[03:32:44.060 --> 03:32:47.060]  потом шли все элементы
[03:32:47.060 --> 03:32:50.060]  больше x.
[03:32:50.060 --> 03:32:53.060]  Это сортировка за линию?
[03:32:53.060 --> 03:32:56.060]  Нет, это не сортировка, это переупорядочение.
[03:32:56.060 --> 03:32:59.060]  Вот эту процедуру мы будем называть
[03:32:59.060 --> 03:33:02.060]  partition.
[03:33:02.060 --> 03:33:05.060]  То есть от массива A
[03:33:05.060 --> 03:33:08.060]  и какого-нибудь элемента x.
[03:33:08.060 --> 03:33:11.060]  Кстати, этот элемент вообще имеет вполне себе
[03:33:11.060 --> 03:33:14.060]  отличное название pivot.
[03:33:14.060 --> 03:33:17.060]  А вот, ну, слово такое.
[03:33:17.060 --> 03:33:20.060]  Конкретное дословное перевод с английского я не знаю,
[03:33:20.060 --> 03:33:23.060]  но вот просто такое...
[03:33:23.060 --> 03:33:26.060]  Ну, наверное, да.
[03:33:26.060 --> 03:33:29.060]  Ну, можете там тоже в Google Translate заглянуть, что это значит.
[03:33:29.060 --> 03:33:32.060]  Такое слово упоминается.
[03:33:32.060 --> 03:33:35.060]  Значит, смотрите, в принципе, да, на самом деле
[03:33:35.060 --> 03:33:38.060]  это уже метод сортировки, на самом деле.
[03:33:38.060 --> 03:33:41.060]  Впереди, то есть метод сортировки.
[03:33:41.060 --> 03:33:44.060]  Выберем какой-нибудь там pivot как-то.
[03:33:44.060 --> 03:33:47.060]  Проведем за O от N вот такую операцию,
[03:33:47.060 --> 03:33:50.060]  потом дальше запустимся рекурсивно от части массива слева
[03:33:50.060 --> 03:33:53.060]  и части массива справа.
[03:33:53.060 --> 03:33:56.060]  То, что я описал, вообще называется quicksort.
[03:33:56.060 --> 03:33:59.060]  Ну, нет, почему?
[03:33:59.060 --> 03:34:02.060]  Нет, дальше...
[03:34:02.060 --> 03:34:05.060]  Нет, это, собственно, quicksort.
[03:34:05.060 --> 03:34:08.060]  Это отличается тем, каким образом вы выбираете pivot.
[03:34:08.060 --> 03:34:11.060]  Вот.
[03:34:11.060 --> 03:34:14.060]  Но тут оказывается, что...
[03:34:14.060 --> 03:34:17.060]  То есть тут возникают, конечно, проблемы.
[03:34:17.060 --> 03:34:20.060]  Ну, потому что, например...
[03:34:20.060 --> 03:34:23.060]  Да, ну вот. Да, но на самом деле тут давайте так сразу рассматривать
[03:34:23.060 --> 03:34:26.060]  тогда два брата quicksort и quickselect.
[03:34:26.060 --> 03:34:29.060]  Потому что, смотрите, какая ситуация.
[03:34:29.060 --> 03:34:32.060]  Потому что если ваша задача найти катую порядковую статистику,
[03:34:32.060 --> 03:34:35.060]  то вы берете pivot и первопорядочный массив так.
[03:34:35.060 --> 03:34:38.060]  А также говорите, что если эта позиция оказалась катой,
[03:34:38.060 --> 03:34:41.060]  то, поздравляю, вы возвращаете X и радуетесь.
[03:34:41.060 --> 03:34:44.060]  Но вам могло не повести.
[03:34:44.060 --> 03:34:47.060]  Но тогда что делать?
[03:34:47.060 --> 03:34:50.060]  Если оказалось, что этот X оказался на позиции больше, чем K,
[03:34:50.060 --> 03:34:53.060]  то вы вызываетесь рекурсивно от вот этого массива
[03:34:53.060 --> 03:34:56.060]  и ищете в нем катый элемент.
[03:34:56.060 --> 03:34:59.060]  Ну вот.
[03:34:59.060 --> 03:35:02.060]  В противном случае, если тут оказалось меньше K,
[03:35:02.060 --> 03:35:05.060]  то есть тут оказалось L,
[03:35:05.060 --> 03:35:08.060]  а этот оказался на позиции L плюс один меньше K,
[03:35:08.060 --> 03:35:11.060]  то вы ищете тогда в этом массиве, но уже не катый элемент,
[03:35:11.060 --> 03:35:14.060]  а K минус L минус первый.
[03:35:14.060 --> 03:35:17.060]  Понимаете, да?
[03:35:17.060 --> 03:35:20.060]  То есть вот так вот как-то вы этим занимаетесь.
[03:35:20.060 --> 03:35:23.060]  Вот.
[03:35:23.060 --> 03:35:26.060]  То есть это так устроен алгоритм quickselect.
[03:35:26.060 --> 03:35:29.060]  Вот.
[03:35:29.060 --> 03:35:32.060]  Ну, в принципе, да, мечта.
[03:35:32.060 --> 03:35:35.060]  Как вот выбирать keynote? То есть мечта.
[03:35:35.060 --> 03:35:38.060]  То есть в идеале, если нам постоянно удается угадывать
[03:35:38.060 --> 03:35:41.060]  элемент, который делит массив пополам,
[03:35:41.060 --> 03:35:44.060]  то оказывается, что quicksort тогда,
[03:35:44.060 --> 03:35:47.060]  очевидно, будет работать за n log n,
[03:35:47.060 --> 03:35:50.060]  а quickselect, очевидно, будет работать за линию, правда?
[03:35:50.060 --> 03:35:53.060]  Ну почему? Потому что первая фаза работает за n,
[03:35:53.060 --> 03:35:56.060]  вторая за n пополам, третья за n поделить на 4,
[03:35:56.060 --> 03:35:59.060]  ну и так далее. Да, сумма о геометрической прогрессии
[03:35:59.060 --> 03:36:02.060]  не более чем 2n.
[03:36:02.060 --> 03:36:05.060]  Вот. Но возникает только проблема
[03:36:05.060 --> 03:36:08.060]  от сита. Можно ли настолько это идеально сделать?
[03:36:08.060 --> 03:36:11.060]  Ну тут два варианта.
[03:36:11.060 --> 03:36:14.060]  Можно попытаться это прямо идеально. Ну вот.
[03:36:14.060 --> 03:36:17.060]  Но тут идея в том, что...
[03:36:17.060 --> 03:36:20.060]  А насколько идеально нам реально надо?
[03:36:20.060 --> 03:36:23.060]  Потому что давайте рассмотрим хотя бы с точки зрения quickselect.
[03:36:26.060 --> 03:36:29.060]  Ну с точки зрения quickselect, допустим, нам фантастически везет,
[03:36:29.060 --> 03:36:32.060]  ну ладно, нам теперь чуть менее фантастически везет,
[03:36:32.060 --> 03:36:35.060]  и массив может уменьшается не в два раза,
[03:36:35.060 --> 03:36:38.060]  но хотя бы в 10 девят...
[03:36:38.060 --> 03:36:41.060]  в 10 девятых раз.
[03:36:41.060 --> 03:36:44.060]  Ну давайте предположим, что нам
[03:36:44.060 --> 03:36:47.060]  достаточно везет того, что на каждом шаре хотя бы
[03:36:47.060 --> 03:36:50.060]  десятая часть массива да отсеклась.
[03:36:50.060 --> 03:36:53.060]  Тогда заметим, что время работы у нас получается.
[03:36:53.060 --> 03:36:56.060]  n
[03:36:56.060 --> 03:36:59.060]  плюс 10 девятых n
[03:36:59.060 --> 03:37:02.060]  плюс, там не превосходит, конечно,
[03:37:02.060 --> 03:37:05.060]  там 10 девятых в квадрате n, да?
[03:37:05.060 --> 03:37:08.060]  Да, да, да.
[03:37:08.060 --> 03:37:11.060]  9 десятых, 9...
[03:37:11.060 --> 03:37:14.060]  Да, да, да.
[03:37:14.060 --> 03:37:17.060]  10 девятых в кубе, n плюс и так далее.
[03:37:20.060 --> 03:37:23.060]  Ну предположим, что нам фантастически везет,
[03:37:23.060 --> 03:37:26.060]  и pivot выбирается в quickselect так, что
[03:37:26.060 --> 03:37:29.060]  на каждом шаге хотя бы десятая часть массива выкидывается.
[03:37:29.060 --> 03:37:32.060]  Ну понятно, что...
[03:37:32.060 --> 03:37:35.060]  Но заметим, что это равно
[03:37:35.060 --> 03:37:38.060]  n на 1 плюс 9 десятых плюс
[03:37:38.060 --> 03:37:41.060]  там 9 десятых в квадрате и так далее.
[03:37:42.060 --> 03:37:45.060]  Но сумма диаметрической прогрессии у нас 1 плюс q
[03:37:45.060 --> 03:37:48.060]  плюс q в квадрате, плюс это чему равно?
[03:37:51.060 --> 03:37:54.060]  Ну да, давайте вот напишем,
[03:37:54.060 --> 03:37:57.060]  что в степень q и минус 1 равно q в степени n
[03:37:57.060 --> 03:38:00.060]  минус 1 поделить на q минус 1.
[03:38:00.060 --> 03:38:03.060]  Но мы не знаем, вы степень... Нет.
[03:38:03.060 --> 03:38:06.060]  Ну а в случае бесконечности,
[03:38:06.060 --> 03:38:09.060]  ну понятно, при n, стремящемся к бесконечности,
[03:38:09.060 --> 03:38:12.060]  обычно это 1 делить на 1 минус q,
[03:38:12.060 --> 03:38:15.060]  но если, конечно, q меньше единиц.
[03:38:15.060 --> 03:38:18.060]  И больше нуля.
[03:38:18.060 --> 03:38:21.060]  Вот.
[03:38:21.060 --> 03:38:24.060]  Нет, главное это константа, да.
[03:38:24.060 --> 03:38:27.060]  Потому что это не превосходит в итоге, да,
[03:38:27.060 --> 03:38:30.060]  потому что тут конечное число...
[03:38:30.060 --> 03:38:33.060]  n на, соответственно, 1 делить на 1 минус 9 десятых.
[03:38:33.060 --> 03:38:36.060]  То есть, короче, 10n.
[03:38:36.060 --> 03:38:39.060]  Ну, короче, да. То есть, более жирная,
[03:38:39.060 --> 03:38:42.060]  с более жирной константой, но это все еще вот это.
[03:38:42.060 --> 03:38:45.060]  То есть, ровно за счет, в принципе,
[03:38:45.060 --> 03:38:48.060]  на вот этой идее уже начинается такое,
[03:38:48.060 --> 03:38:51.060]  слушайте, а давайте будем просто там пайвот
[03:38:51.060 --> 03:38:54.060]  выкидывать рандомно.
[03:38:54.060 --> 03:38:57.060]  То есть, ну если нам пару раз не повезет,
[03:38:57.060 --> 03:39:00.060]  ну ничего страшного. А если нам в основном везет,
[03:39:00.060 --> 03:39:03.060]  то как бы в основном будем уничтожать 9 десятых раз,
[03:39:03.060 --> 03:39:06.060]  да, теоретически нам каждый раз может не везти.
[03:39:06.060 --> 03:39:09.060]  То есть, если каждый раз пайвот выбирает
[03:39:09.060 --> 03:39:12.060]  минимальный элемент, то да,
[03:39:12.060 --> 03:39:15.060]  мы работаем тогда за n квадрат.
[03:39:15.060 --> 03:39:18.060]  Ну ладно, n умножить на k, наверное, да.
[03:39:18.060 --> 03:39:21.060]  Ну ладно, хорошо, ну ладно, там можно подгонять так,
[03:39:21.060 --> 03:39:24.060]  чтобы там прям n квадрат был, если мы прям отсекаем,
[03:39:24.060 --> 03:39:27.060]  все вокруг этого элемента прям отсекаем.
[03:39:27.060 --> 03:39:30.060]  Да, в худшем случае, но это вот типичный случай,
[03:39:30.060 --> 03:39:33.060]  на н квадрат, но в среднем будет адекватно.
[03:39:33.060 --> 03:39:36.060]  Ну в среднем у отн.
[03:39:36.060 --> 03:39:39.060]  Да, в среднем у отн это нам хорошо.
[03:39:39.060 --> 03:39:42.060]  Ну с квиксортом будет та же интерес. То есть, видите,
[03:39:42.060 --> 03:39:45.060]  понятно, что к квиксорту пайвот будет выбираться вот так неудачно,
[03:39:45.060 --> 03:39:48.060]  то будет работать за n квадрат.
[03:39:48.060 --> 03:39:51.060]  Но если он будет попадать вот куда-то так,
[03:39:51.060 --> 03:39:54.060]  чтобы каждый элемент хотя бы 1 десятая, каждый массив,
[03:39:54.060 --> 03:39:57.060]  то тогда уровней у вас будет, собственно,
[03:39:57.060 --> 03:40:00.060]  и на каждом уровне вы суммарно будете работать за отн.
[03:40:00.060 --> 03:40:03.060]  Поэтому суммарно будет n логен.
[03:40:03.060 --> 03:40:06.060]  Ну там дальше начинается там всякое веселье в духе,
[03:40:06.060 --> 03:40:09.060]  что там реально эстрелевский, конечно, квиксорт,
[03:40:09.060 --> 03:40:12.060]  там он отсекается.
[03:40:12.060 --> 03:40:15.060]  Он говорит, что если глубина рекурсии стала слишком плохой,
[03:40:15.060 --> 03:40:18.060]  так давайте по-другому сортировать.
[03:40:18.060 --> 03:40:21.060]  Вот, но это уже ладно, это другая песня,
[03:40:21.060 --> 03:40:24.060]  это мы, видимо, в следующий раз будем обсуждать.
[03:40:24.060 --> 03:40:27.060]  А пока...
[03:40:27.060 --> 03:40:30.060]  Вот, но теперь мы поговорим, да, но это все касается рандома.
[03:40:30.060 --> 03:40:33.060]  Да, то есть, вот, случайная, то есть, квиксорт,
[03:40:33.060 --> 03:40:36.060]  квикселлект с рандомным выбором элементов,
[03:40:36.060 --> 03:40:39.060]  вот, работают именно так.
[03:40:39.060 --> 03:40:42.060]  Но теперь возникает отсюда вопрос, а можно ли выбирать
[03:40:42.060 --> 03:40:45.060]  все-таки пайвоты как-то не рандомно?
[03:40:45.060 --> 03:40:48.060]  И оказывается, что можно.
[03:40:48.060 --> 03:40:51.060]  Вот. И вот, оказывается, да, то есть,
[03:40:51.060 --> 03:40:54.060]  вот, с рандомом обсудили, а есть, оказывается,
[03:40:54.060 --> 03:40:57.060]  не рандомный вариант.
[03:40:57.060 --> 03:41:00.060]  Так, сколько у нас там? Нормально.
[03:41:00.060 --> 03:41:03.060]  Значит, смотрите, сейчас будет немножко магии.
[03:41:03.060 --> 03:41:06.060]  Так, ну ладно, не будет.
[03:41:06.060 --> 03:41:09.060]  Там магия будет...
[03:41:09.060 --> 03:41:12.060]  Господи, магия будет, когда мы эту очередь
[03:41:12.060 --> 03:41:15.060]  на шести стеках пилим будем, а тут...
[03:41:15.060 --> 03:41:18.060]  Ну да.
[03:41:18.060 --> 03:41:21.060]  Красивая структура.
[03:41:29.060 --> 03:41:32.060]  Ну, это прокучит либо наче.
[03:41:38.060 --> 03:41:41.060]  Так, сейчас смотрите. Итак, задача.
[03:41:41.060 --> 03:41:44.060]  Ну, сейчас мы на самом деле будем такой, программа заставы.
[03:41:44.060 --> 03:41:47.060]  Да, задача. Хочется выбрать катую порядковую статистику
[03:41:47.060 --> 03:41:50.060]  для этого.
[03:41:50.060 --> 03:41:53.060]  Значит, как же это сделать?
[03:41:53.060 --> 03:41:56.060]  Делать мы это будем весьма неожиданным способом.
[03:41:56.060 --> 03:41:59.060]  Так, да. Сразу напишем. Сейчас это будет называться
[03:41:59.060 --> 03:42:02.060]  алгоритм...
[03:42:02.060 --> 03:42:05.060]  Вот. Блюма.
[03:42:05.060 --> 03:42:08.060]  Дефис. Или керетов, ладно.
[03:42:08.060 --> 03:42:11.060]  Флойда.
[03:42:11.060 --> 03:42:14.060]  Брата.
[03:42:17.060 --> 03:42:20.060]  Ривеста.
[03:42:21.060 --> 03:42:24.060]  Тарьяна.
[03:42:24.060 --> 03:42:27.060]  Ой, доска заканчит. А, все.
[03:42:27.060 --> 03:42:30.060]  Да, их пятеро.
[03:42:30.060 --> 03:42:33.060]  Да, у нас в этом смысле будут два рекордсмена в курсе.
[03:42:33.060 --> 03:42:36.060]  Алгоритм Блюма, Флойда, Пратта, Ривеста, Тарьяна
[03:42:36.060 --> 03:42:39.060]  и алгоритм Орикава, Оребурга, Коса или Парка.
[03:42:43.060 --> 03:42:46.060]  ЛЦПшки в суфмассе, конечно, будем.
[03:42:46.060 --> 03:42:49.060]  Не, это Керкианин Сантакс.
[03:42:49.060 --> 03:42:52.060]  Это две фамилии.
[03:42:52.060 --> 03:42:55.060]  Вот. Ну, правда ладно, там их много алгоритмов.
[03:42:55.060 --> 03:42:58.060]  Хотя, скорее всего, наш алгоритм будет построить
[03:42:58.060 --> 03:43:01.060]  суфдерева лучше Уханином и ДФС.
[03:43:01.060 --> 03:43:04.060]  Запусти, проблема.
[03:43:04.060 --> 03:43:07.060]  Да, делов-то.
[03:43:07.060 --> 03:43:10.060]  Ну да, что такое?
[03:43:10.060 --> 03:43:13.060]  Лучше ты на суфавтомат построить из него суфдерева,
[03:43:13.060 --> 03:43:16.060]  а дальше в суфмассу.
[03:43:16.060 --> 03:43:19.060]  Да, да, да, Генту Линукс, да. Можете сделать своими руками все.
[03:43:19.060 --> 03:43:22.060]  Извини, я слышал, что чувак как-то на Олимпиаде вот такое
[03:43:22.060 --> 03:43:25.060]  написал, потому что нужно было в суфмассу.
[03:43:25.060 --> 03:43:28.060]  Я тоже слышал, помню, оказывали Михаил Тихомиров, если не ошибаюсь.
[03:43:28.060 --> 03:43:31.060]  Нет, потому что я вот от него такой байку помню просто.
[03:43:31.060 --> 03:43:34.060]  Нет, ну там просто там какой-то персистентный Уханин
[03:43:34.060 --> 03:43:37.060]  надо было делать.
[03:43:37.060 --> 03:43:40.060]  Вот. Так, ладно.
[03:43:40.060 --> 03:43:43.060]  Давайте не будем ругаться страшными словами раньше времени.
[03:43:43.060 --> 03:43:46.060]  Ладно, значит, смотрите.
[03:43:46.060 --> 03:43:49.060]  Так, давайте попроще чуть, значит, смотрите.
[03:43:49.060 --> 03:43:52.060]  Итак, значит, мы сейчас, ну сразу скажу, идея алгоритма та же.
[03:43:52.060 --> 03:43:55.060]  То есть мы найдем какой-то пайвот,
[03:43:55.060 --> 03:43:58.060]  разделим, вызовем процедуру partition
[03:43:58.060 --> 03:44:01.060]  и, собственно, вызовемся от нужной части.
[03:44:01.060 --> 03:44:04.060]  Но каким же образом
[03:44:04.060 --> 03:44:07.060]  выбрать пайвот? Так, каким образом выбрать пайвот?
[03:44:07.060 --> 03:44:10.060]  Теперь, смотрите, внимание.
[03:44:10.060 --> 03:44:13.060]  Сейчас будет немножко магии.
[03:44:13.060 --> 03:44:16.060]  Наши n элементов мы разделим на пятерки.
[03:44:16.060 --> 03:44:19.060]  Абсолютно первым попавшимся образом.
[03:44:19.060 --> 03:44:22.060]  Прямо хоть прям по массиву вот так вот.
[03:44:25.060 --> 03:44:28.060]  Да, у нас n разделить на 5 пятерочек.
[03:44:28.060 --> 03:44:31.060]  Ну понятно, там за у от н можно принять меры,
[03:44:31.060 --> 03:44:34.060]  чтобы n делилось на 5, очевидно, да?
[03:44:34.060 --> 03:44:37.060]  Ну там лишнее количество максимумов там честно найти
[03:44:37.060 --> 03:44:40.060]  и выкинуть в рассмотрение или даже вернуть ответ, если надо.
[03:44:40.060 --> 03:44:43.060]  Так что тут без особого ограничения общности там
[03:44:43.060 --> 03:44:46.060]  можно...
[03:44:46.060 --> 03:44:49.060]  Что?
[03:44:49.060 --> 03:44:52.060]  Ну, смотрите, ну я сказал, если n не делится на 5, то вы там лишнее
[03:44:52.060 --> 03:44:55.060]  нужно там n процент 5 максимумов можете за у от н найти.
[03:44:55.060 --> 03:44:58.060]  Ну, логично, да?
[03:44:58.060 --> 03:45:01.060]  Это неинтересно.
[03:45:01.060 --> 03:45:04.060]  Господи.
[03:45:04.060 --> 03:45:07.060]  Ладно, пока я рисую, у меня прям n трига. Зачем вам это секундомер?
[03:45:07.060 --> 03:45:10.060]  А, слушай, супер.
[03:45:10.060 --> 03:45:13.060]  Да, вот это прям супер идея.
[03:45:13.060 --> 03:45:16.060]  Просто потом не хочется пересматривать...
[03:45:23.060 --> 03:45:26.060]  Да, прям тут возникает вопрос.
[03:45:26.060 --> 03:45:29.060]  Если лекция, то мне хочется пересматривать, зачем ее записывать.
[03:45:31.060 --> 03:45:34.060]  Ну да, да, да, да.
[03:45:34.060 --> 03:45:37.060]  Нет, все понятно, просто забавно звучит.
[03:45:37.060 --> 03:45:40.060]  Вот.
[03:45:40.060 --> 03:45:43.060]  Так вот, смотрите.
[03:45:43.060 --> 03:45:46.060]  Значит, смотрите, ребят, ребят, ребят, ребят.
[03:45:46.060 --> 03:45:49.060]  Нет, ну там, знаете, уровень бесконечности.
[03:45:49.060 --> 03:45:52.060]  Сначала точные тайм-коды, да, потом там, в общем,
[03:45:52.060 --> 03:45:55.060]  с ответками, когда мы вернулись к старой теме, когда мы там
[03:45:55.060 --> 03:45:58.060]  вообще-то обсуждали. Хотя да.
[03:45:58.060 --> 03:46:01.060]  Это, конечно, практически нереально, знаете.
[03:46:01.060 --> 03:46:04.060]  Это когда как бы вопрос за кадром там озвучивается в виде текста.
[03:46:04.060 --> 03:46:07.060]  Вот.
[03:46:07.060 --> 03:46:10.060]  Ну да, иногда и такое бывает, но...
[03:46:10.060 --> 03:46:13.060]  Нет, ну...
[03:46:13.060 --> 03:46:16.060]  Нет, ну это нереально, потому что это потом как бы...
[03:46:16.060 --> 03:46:19.060]  Не выкручивай.
[03:46:19.060 --> 03:46:22.060]  Нет, пройти, тут проблема, чтобы это монтажеры делали,
[03:46:22.060 --> 03:46:25.060]  им должна поступить соответствующая информация.
[03:46:25.060 --> 03:46:28.060]  То есть вы там готовы запомнить там,
[03:46:28.060 --> 03:46:31.060]  какой вопрос Арсений задал на 57-й минуте этой лекции.
[03:46:39.060 --> 03:46:42.060]  Сейчас, тихо, тихо, тихо, не слышу вопросов. Чего?
[03:46:45.060 --> 03:46:48.060]  Нет, случайность.
[03:46:50.060 --> 03:46:53.060]  А вот это вот не случайность.
[03:46:53.060 --> 03:46:56.060]  Мы забьем массив на пятерке,
[03:46:56.060 --> 03:46:59.060]  но, внимание, внутри каждую пятерку мы посортируем.
[03:46:59.060 --> 03:47:02.060]  Ну каким образом, абсолютно не важно.
[03:47:02.060 --> 03:47:05.060]  Это другой вопрос.
[03:47:05.060 --> 03:47:08.060]  Ну, дайте, легче уже отсортировать и не париться.
[03:47:08.060 --> 03:47:11.060]  Значит, смотрите, теперь идея такая.
[03:47:11.060 --> 03:47:14.060]  Значит, мы посортируем эти пятерки,
[03:47:14.060 --> 03:47:17.060]  и в каждой пятерке выберем медиану.
[03:47:17.060 --> 03:47:20.060]  Вот в каждой пятерке выберем медиану,
[03:47:20.060 --> 03:47:23.060]  и рассмотрим вот этот массив
[03:47:23.060 --> 03:47:26.060]  размера n поделить на 5.
[03:47:29.060 --> 03:47:32.060]  Да, массив этих вот медиан-пятерок.
[03:47:35.060 --> 03:47:38.060]  Так вот, теперь идея такая.
[03:47:38.060 --> 03:47:41.060]  Выберем медиану в нем.
[03:47:41.060 --> 03:47:44.060]  Мы это сделаем рекурсивно.
[03:47:47.060 --> 03:47:50.060]  То есть мы вызовем нашу функцию.
[03:47:50.060 --> 03:47:53.060]  То есть мы вызовем в этом месте функцию partition.
[03:47:53.060 --> 03:47:56.060]  То есть вызовем quickselect.
[03:47:56.060 --> 03:47:59.060]  То есть quickselect от этого массива.
[03:47:59.060 --> 03:48:02.060]  Ну, давайте я вот так и напишу.
[03:48:02.060 --> 03:48:05.060]  Ну, давайте я вот так и напишу.
[03:48:05.060 --> 03:48:08.060]  Ну, давайте я вот так и напишу.
[03:48:08.060 --> 03:48:11.060]  Quickselect от этого массива.
[03:48:11.060 --> 03:48:14.060]  Ну, давайте я вот так и напишу.
[03:48:14.060 --> 03:48:17.060]  Quickselect, допустим, от массива A и, соответственно, K.
[03:48:17.060 --> 03:48:20.060]  И так и пишем.
[03:48:20.060 --> 03:48:23.060]  Разбить A
[03:48:23.060 --> 03:48:26.060]  на пятерке.
[03:48:29.060 --> 03:48:32.060]  Сказать, что B
[03:48:32.060 --> 03:48:35.060]  это массив
[03:48:35.060 --> 03:48:38.060]  из N поделить на 5
[03:48:38.060 --> 03:48:41.060]  медиан-пятерок.
[03:48:47.060 --> 03:48:50.060]  Ну, вот.
[03:48:50.060 --> 03:48:53.060]  Теперь внимание.
[03:48:53.060 --> 03:48:56.060]  Значит, X это
[03:48:56.060 --> 03:48:59.060]  вызываем quick,
[03:48:59.060 --> 03:49:02.060]  соответственно, select от B
[03:49:02.060 --> 03:49:05.060]  N поделить на 10.
[03:49:05.060 --> 03:49:08.060]  То есть там мы прям честную медиану находим.
[03:49:11.060 --> 03:49:14.060]  Ну, вот. Ну, а дальше
[03:49:14.060 --> 03:49:17.060]  по сути вызываем
[03:49:17.060 --> 03:49:20.060]  значит, там скажем
[03:49:20.060 --> 03:49:23.060]  pos равно partition
[03:49:23.060 --> 03:49:26.060]  от A и X.
[03:49:26.060 --> 03:49:29.060]  Ну, pos он возвращает, где этот X
[03:49:29.060 --> 03:49:32.060]  в итоге будет лежать.
[03:49:32.060 --> 03:49:35.060]  Ну, и дальше там стандартный вот этот вот.
[03:49:35.060 --> 03:49:38.060]  Понятно, что если pos там больше K,
[03:49:38.060 --> 03:49:41.060]  то там, понятно, return.
[03:49:41.060 --> 03:49:44.060]  Там quickselect.
[03:49:44.060 --> 03:49:47.060]  Соответственно,
[03:49:47.060 --> 03:49:50.060]  от A от 1 двоеточие pos.
[03:49:53.060 --> 03:49:56.060]  Ну, давайте я так напишу.
[03:49:56.060 --> 03:49:59.060]  А quickselect это катый элемент?
[03:49:59.060 --> 03:50:02.060]  А, вот я так напишу.
[03:50:05.060 --> 03:50:08.060]  Извините, у нас сейчас quickselect
[03:50:08.060 --> 03:50:11.060]  ищет медиану.
[03:50:11.060 --> 03:50:14.060]  Нет, quickselect ищет катую порядковую статистику.
[03:50:14.060 --> 03:50:17.060]  А, но при этом мы запускаем его, чтобы он нашел медиану.
[03:50:17.060 --> 03:50:20.060]  Да, видите, поэтому мы тут пишем не K, а N поделить на 10,
[03:50:20.060 --> 03:50:23.060]  потому что размер этого массива N поделить на 5.
[03:50:23.060 --> 03:50:26.060]  Но LZ,
[03:50:26.060 --> 03:50:29.060]  там, понятно, pos плюс 1 равно K там,
[03:50:29.060 --> 03:50:32.060]  если уж совсем прописывать, то return просто X.
[03:50:33.060 --> 03:50:36.060]  LZ, там, понятно, return.
[03:50:36.060 --> 03:50:39.060]  Там quickselect там.
[03:50:39.060 --> 03:50:42.060]  Вот это вот всё, blah-blah-blah.
[03:50:42.060 --> 03:50:45.060]  От, значит, A от pos плюс 1 двоеточие pos.
[03:50:47.060 --> 03:50:50.060]  Да, я тут, конечно, у меня массив немножко в один индексации,
[03:50:50.060 --> 03:50:57.180]  не думаю что для вас это прям проблема и к получится минус пост да вот так
[03:50:57.180 --> 03:51:08.180]  выглядит алгоритм такой псевдо коду такой вот а нам даже не пост нам сам
[03:51:08.180 --> 03:51:14.580]  элемент надо вернуть нам надо еще написать что если у нас размер а меньше
[03:51:14.580 --> 03:51:24.180]  ну да да да да формально каждый нам обязан написать что если там называется
[03:51:24.180 --> 03:51:32.140]  сайза там то есть если n меньше либо равно там я не знаю какой например там
[03:51:32.140 --> 03:51:41.780]  пяти то найти то там найти в тупую да да да но я говорю найти я это звать найти в
[03:51:41.780 --> 03:51:48.260]  тупую давайте абстрагируемся от этих там незначительных деталей partition он
[03:51:48.260 --> 03:51:53.060]  ничего не возвращает он берет массив и переупорядочивает в нем элементы
[03:51:53.060 --> 03:51:58.540]  переупорядочивает в нем элементы таким образом что сначала идут элементы меньше
[03:51:58.540 --> 03:52:04.260]  икса потом x потом больше икса да нет это не нет это не сортировка потому что
[03:52:04.260 --> 03:52:10.180]  элементы меньше икса в этом в этом под массиве можете как угодно вот это
[03:52:10.180 --> 03:52:14.500]  можно сделать за линию ну как угодно можно там отдельная веселая задача как
[03:52:14.500 --> 03:52:20.860]  это сделать без дополнительной памяти но вот но как бы там можем сейчас
[03:52:20.860 --> 03:52:24.100]  отдельно обсудить если останется время но я но это не принципиально
[03:52:24.100 --> 03:52:43.580]  где в начале в смысле ну разбитые пятерки можно просто вектор пятерок
[03:52:43.580 --> 03:52:58.340]  создать и не парится то есть это есть вы ищите медиану но мы но мы идем на более
[03:52:58.340 --> 03:53:02.300]  общую задачу мы ищем катую порядковую статистику где к может быть равно
[03:53:02.300 --> 03:53:09.740]  пополам то есть медиану мы то есть медиану мы тоже ищем но как бы но здесь
[03:53:09.740 --> 03:53:16.580]  удобнее искать катую порядковую статистику значит смотрите казалось бы
[03:53:16.580 --> 03:53:24.900]  да вот теперь давайте думать вот здесь у нас но вот то есть теперь можно сказать
[03:53:24.900 --> 03:53:30.580]  следующее что вот но теперь но заметим что у нас есть два имеет место два
[03:53:30.580 --> 03:53:36.580]  рекурсивных вызова нас пишем рекурренту т от n то есть если мы ищем катую
[03:53:36.580 --> 03:53:42.460]  порядковую статистику в этом массиве да то она не ну так формально не
[03:53:42.460 --> 03:53:47.620]  превосходит ну ладно но вот т от n поделить на 5 потому что мы вызываемся
[03:53:47.620 --> 03:53:57.140]  вот от массива в 5 раз меньше плюс т от чего
[03:53:57.620 --> 03:54:05.460]  т от как по ответ пока как повезет чего ну можно так сказать до n-2 но я
[03:54:05.460 --> 03:54:09.060]  пока даже ничего писать не буду а и плюс от потому что заметил что все что
[03:54:09.060 --> 03:54:12.660]  кроме рекурсивных вызовов мы делаем за линию
[03:54:18.980 --> 03:54:26.860]  ну может от это пожалуйста какая разница но мы сверху оцениваем поэтому вот но
[03:54:26.860 --> 03:54:30.500]  конечно теперь стоит только понять отт от чего если я тут в худшем случае
[03:54:30.500 --> 03:54:37.900]  скажу что это т от n то это нас не интересует даже если я напишу t-1 нас
[03:54:37.900 --> 03:54:45.060]  тоже это не устраивает нет это нет n-1 это не бесконечность это n-2 это n дай бог
[03:54:45.060 --> 03:54:52.460]  чтоб квадрат да ну да да да скорее всего квадрат но заметил что мы не
[03:54:52.460 --> 03:54:58.460]  просто так делали этот вызов на самом деле утверждается что здесь здесь будет
[03:54:58.460 --> 03:55:04.820]  всего не хуже а что же здесь будет а теперь давайте попробуем значит для
[03:55:04.820 --> 03:55:13.140]  того чтобы понять какую тут хорошую оценку мы можем написать вот я жалко к
[03:55:13.140 --> 03:55:19.300]  ну ладно значит давайте давайте мысленно мысленно подчеркиваем мы тут не просто
[03:55:19.300 --> 03:55:24.860]  эти пятерки отсектируем но еще я отсектируем вот эти все медианы
[03:55:28.460 --> 03:55:35.380]  нет по факту мы этого не делаем мы там только медиану медианы еще но смотрите
[03:55:35.380 --> 03:55:42.340]  как интересно вот вот она допустим вот она да заметим что все что слева и
[03:55:42.340 --> 03:55:51.180]  сверху оно меньше либо равно нас а теперь думаем ну без лишних там каких-то
[03:55:51.180 --> 03:55:55.460]  локальных округлений не будем о них там заморачиваться сколько элементов тут
[03:55:55.460 --> 03:55:59.460]  меньше но заметим что пятерок здесь что-то типа n поделить на 10 мы плюс
[03:55:59.460 --> 03:56:07.460]  минус одна да но и в каждой из этих пятерок по три элемента да то есть
[03:56:07.460 --> 03:56:15.860]  получается здесь что-то типа 3 десятых n элементов то есть это означает что
[03:56:15.860 --> 03:56:20.500]  этот найденный x обладает таким свойством что у нас массиве есть как
[03:56:20.500 --> 03:56:27.260]  минимум 3 десят 3 десятых n элементов которая меньше нас но с другой стороны
[03:56:27.260 --> 03:56:31.980]  мы замечаем что у нас есть по аналогичным причинам что-то типа 3
[03:56:31.980 --> 03:56:40.100]  десятых n элементов которая больше нас то есть это означает что ну как бы
[03:56:40.100 --> 03:56:44.420]  какой-то из массивов мы не знаем выкинуть будет левая часть массива или правая но
[03:56:44.420 --> 03:56:53.820]  то что будет останется оно не более чем 7 n поделить на 10 потому что мы выкинули
[03:56:53.820 --> 03:56:59.140]  как если мы из массива длины n выкинули хотя бы 3 3 десятых n то останется не
[03:56:59.140 --> 03:57:09.580]  более чем 70 чего выкинули потому что ну выкинули но то что мы запускаем когда
[03:57:09.580 --> 03:57:13.020]  мы запускаемся от массива это вот рекуссивно здесь это то же самое что мы
[03:57:13.020 --> 03:57:21.180]  другую часть массива тупо выкинули нет вы гарантировали что у нас вот есть вот
[03:57:21.180 --> 03:57:26.140]  одна один массив есть другой массив да мы гарантируем что в каждом из них есть
[03:57:26.140 --> 03:57:32.780]  хотя бы 3 десятых n элементов но если их суммарный размер равен n ну ладно
[03:57:32.780 --> 03:57:37.660]  минус 1 но там это и в каждом хотя бы 3 десятых n элементов то это означает что
[03:57:37.660 --> 03:57:43.820]  в каждом из них в каждом соседе у каждого массива у соседа не более чем 7 десятых
[03:57:43.820 --> 03:57:54.780]  поэтому получается вот такая рекуррент вот ну а теперь это просто теперь утверждение
[03:57:54.780 --> 03:58:02.900]  мистическое теперь мистическое утверждение да т т равно как вы уже догадываетесь от
[03:58:03.060 --> 03:58:12.580]  доказательства пишем нашу индукцию да в чем хотим тн меньше либо равно по индукции
[03:58:12.580 --> 03:58:25.460]  значит cn ну и пишем т от n меньше либо равно cn поделить на 5 плюс ц на 7 десятых n плюс там
[03:58:25.460 --> 03:58:38.060]  а это равно 1 5 плюс 7 десятых это сколько правильно 9 десятых cn плюс а это очевидно
[03:58:38.060 --> 03:58:52.420]  меньше либо равно ц при ну там скажем я не знаю ц равно 10 а даже больше либо равно да ну потому
[03:58:52.420 --> 03:58:57.940]  что мы гарантируем что если у нас есть вот этот вот второй запуск то мы гарантируем что размер
[03:58:57.940 --> 03:59:11.620]  этого массива не более чем 7 десятых n не который второй вот этот вот этот да
[03:59:11.620 --> 03:59:22.180]  ага так что вот такая вот красота
[03:59:22.180 --> 03:59:46.900]  если а меньше чем что но если ц больше либо равно чем 10 а вот ну или что тоже самое если
[03:59:46.900 --> 03:59:52.820]  а не превосходит ц поделить на 10 то как бы неравенство очевидно верно но как бы
[03:59:52.820 --> 04:00:00.900]  такое такие ц подогнать можно вот так вот в чем а теперь собственно в чем у вас там задача в
[04:00:00.900 --> 04:00:06.300]  домашнем задании теперь да ну заметим что ведь я тут мы сейчас тут опускаем там все технические
[04:00:06.300 --> 04:00:12.060]  там опускает по первым пишем то что у нас тут есть неравенство да также опускаем еще то что тут
[04:00:12.060 --> 04:00:18.620]  вообще округление какие-то есть вот где-то там плюс-минус единички но это мы забиваем вот ну
[04:00:18.620 --> 04:00:23.260]  равно как и на то что чисто теоретически мы еще не явно подразумеваем что функция т монотонно
[04:00:23.260 --> 04:00:30.900]  но мы подозреваем что вряд ли наверное если ну там что вряд ли наверное если массив увеличился
[04:00:30.900 --> 04:00:39.540]  то алгоритм резко стал работать быстрее мы тут как-то вот сверху вот так оцениваем да но нас
[04:00:39.540 --> 04:00:44.820]  это интересует вот что то то фактически задача такая вот мы говорим делим на пятерке да а
[04:00:44.820 --> 04:00:56.020]  ведь почему на пятерке ведь мы могли бы делить на семерке или на девятке или на тройке или на
[04:00:56.020 --> 04:01:03.540]  или на или там по 57 а внутри блока же мы тоже должны отсортировать да ну что но это же константа
[04:01:03.540 --> 04:01:15.380]  ты же сортируешь массив длины 5 да ну и что 5 5 5 константа 5 квадрате тоже константа ну типа
[04:01:15.380 --> 04:01:25.940]  да у нас это скорее всего будет работать дольше чем посортировать да нет смотрите по нет по константе
[04:01:25.940 --> 04:01:38.460]  нас это интересовать не будет не волнуйтесь да да да ну да нет это действительно не интересен вот
[04:01:38.460 --> 04:01:44.780]  поэтому но теперь вот будет загадка да то есть у вас будет получаться какая-то рекуррента то есть
[04:01:44.780 --> 04:01:51.980]  вместо 5 тут у вас то есть если 5 у вас превращается в 2 л плюс 1 какой-нибудь да то у вас и тут
[04:01:51.980 --> 04:02:01.220]  получается там что-то n delete на 2 л плюс 1 и тут что-то там получается да там вы опускаем то есть
[04:02:01.220 --> 04:02:07.460]  интересовать будет такое но фактически вопрос будет такой при каких л как бы можно вот там
[04:02:07.460 --> 04:02:12.980]  алгоритм все еще будет работать за отн а при каких л по крайней мере вот такое доказательство
[04:02:12.980 --> 04:02:25.660]  работать не будет вот так да то есть вот собственно об этом и задача да нет она я не утверждаю что
[04:02:25.660 --> 04:02:37.580]  она сложная ну да да да но там и смысл будет что как бы там задача так и написано по сути что
[04:02:37.580 --> 04:02:42.660]  признаю что предположим что это формула прям истинно прям с равенством вот и тогда давайте
[04:02:42.660 --> 04:02:52.140]  прианализируем при каких л по сути это у отн а при каких нет да да да да да да и что-то подоказывать
[04:02:52.140 --> 04:03:10.980]  нет ну да их на них можно забить потому что смотрите потому что у вас в данном случае
[04:03:10.980 --> 04:03:16.460]  там есть просто не более чем 4 лишних элемента да что мы с ним делаем так давайте просто там
[04:03:16.460 --> 04:03:26.540]  4 максимуму найдем и выкинем их это все равно константа это это все равно константа пусть
[04:03:26.540 --> 04:03:44.940]  она и увеличивается но нужно доказать что это не вот ну как бы самый найдетый способ докажите
[04:03:44.940 --> 04:03:52.140]  что это омега от чего-нибудь побольше но как бы если докажете по-другому то как бы ну да да да но
[04:03:52.860 --> 04:03:57.980]  можно рассмотреть нужно проанализировать эту рекурренту по сути и там понять при каких
[04:03:57.980 --> 04:04:06.980]  эль она ровна от но при каких неров rom нет דоказательства не работает вот тут на
[04:04:06.980 --> 04:04:11.760]  каком уровне шамане работает при что потому что вы недостаточно проанализировали рекур informações
[04:04:11.760 --> 04:04:17.460]  или оно не работает потому что там рекурр Nãothat это жаль происходящее gardens another
[04:04:17.460 --> 04:04:19.460]  уровень нас не интересует, а вот первый интересует.
[04:04:19.460 --> 04:04:22.260]  То есть мы выжимаем, мы сейчас, то есть суть этого домашнего
[04:04:22.260 --> 04:04:24.420]  задания выжить максимум из рекуррента.
[04:04:24.420 --> 04:04:27.620]  Ну выжить максимум в том плане, чтобы понять, что
[04:04:27.620 --> 04:04:30.820]  вы можете доказать, что t от n равно o от n log n, но ничего
[04:04:30.820 --> 04:04:33.060]  лучше вы доказать не можете, просто потому что t от n равно
[04:04:33.060 --> 04:04:34.820]  omega от n log n.
[04:04:34.820 --> 04:04:35.820]  Вот.
[04:04:35.820 --> 04:04:37.100]  То есть там нельзя доказать, что это на самом деле n log
[04:04:37.100 --> 04:04:40.380]  n поделить на log log log n.
[04:04:40.380 --> 04:04:41.660]  Ну мало ли, бывает такое.
[04:04:41.660 --> 04:04:49.060]  Лог, ой, ну да, лог, лог, лог, знаете, у нас там будет
[04:04:49.060 --> 04:04:51.660]  какой-нибудь один, у нас там вообще даже миностовый
[04:04:51.660 --> 04:04:54.060]  будет с такой симпточкой работать.
[04:04:54.060 --> 04:04:58.980]  То есть если количество, если e больше чем v log log log
[04:04:58.980 --> 04:05:05.460]  v, то наш алгоритм будет работать за o от e.
[04:05:05.460 --> 04:05:08.700]  Там же какая-то штука с обратной функцией открывается.
[04:05:08.700 --> 04:05:09.700]  Ой.
[04:05:10.380 --> 04:05:12.140]  Вот до этой штуки я не знаю, доживем ли.
[04:05:12.140 --> 04:05:16.180]  Не, не, не, там это разные штуки.
[04:05:16.180 --> 04:05:20.940]  Нет, там вообще шедевры, если так забегать вперед,
[04:05:20.940 --> 04:05:23.580]  потому что у нас будет алгоритм, который, да, если e больше
[04:05:23.580 --> 04:05:27.340]  чем v log log log v, хотя в общем формулировку я могу написать
[04:05:27.340 --> 04:05:31.500]  любое константное количество v, то как бы алгоритм работает
[04:05:31.500 --> 04:05:35.820]  за o от e, а так на самом деле общая симпточка e на логарифм
[04:05:35.820 --> 04:05:36.820]  звездочка.
[04:05:36.820 --> 04:05:39.660]  Да, логарифм звездочка это не обратная функция
[04:05:40.620 --> 04:05:41.980]  да, итерированная логарифм, да.
[04:05:44.340 --> 04:05:47.460]  А это означает, дано число, итерированная логарифм
[04:05:47.460 --> 04:05:48.460]  числа x.
[04:05:48.460 --> 04:05:50.700]  Сколько раз нужно брать числа двоичисленного логарифм,
[04:05:50.700 --> 04:05:52.260]  чтобы он стал там меньше одного?
[04:05:56.420 --> 04:05:58.340]  Ну вот, то есть это да, то есть это не обратная функция
[04:05:58.340 --> 04:06:01.340]  кермана, это чуть более быстро растущая функция, но чуть.
[04:06:02.300 --> 04:06:02.820]  Чуть.
[04:06:04.580 --> 04:06:09.340]  Да, ну где-то там в очень-очень-очень-очень
[04:06:10.020 --> 04:06:13.220]  там в очень-очень параллельной галактике, да, она конечно
[04:06:13.220 --> 04:06:14.220]  там, да.
[04:06:14.220 --> 04:06:19.500]  Да-да-да-да-да-да, но знаете, в наших этих человеческих
[04:06:19.500 --> 04:06:23.740]  ограничениях все равно мелочь одну, мелочь другую, как
[04:06:23.740 --> 04:06:26.420]  все равно эта мелочь пожирается реальной константой вашей
[04:06:26.420 --> 04:06:27.420]  реализации.
[04:06:27.420 --> 04:06:31.180]  Вот, ну и другое, но там со словами будет там вообще
[04:06:31.180 --> 04:06:34.740]  много шоу, там есть такое, но там софтхипом можно написать
[04:06:34.740 --> 04:06:37.540]  алгоритм, который будет работать за e на реально обратную
[04:06:37.540 --> 04:06:38.540]  функцию кермана.
[04:06:39.380 --> 04:06:41.300]  Ну ладно, и то вранье, потому что окажется, что там будет
[04:06:41.300 --> 04:06:43.980]  ена, какую-то мистическую функцию, которая на самом
[04:06:43.980 --> 04:06:46.660]  деле не более чем в 9 раз больше обратной функции
[04:06:46.660 --> 04:06:47.740]  кермана на самом деле.
[04:06:51.420 --> 04:06:51.940]  Да, на самом деле.
[04:06:56.940 --> 04:07:01.380]  Не всегда, но там у него есть гарантии, что там этот
[04:07:01.380 --> 04:07:07.100]  ответ ну не совсем прям неправильный, то есть там
[04:07:07.100 --> 04:07:11.220]  такой трейдов мне, что я могу работать чуть-чуть
[04:07:11.220 --> 04:07:13.860]  быстрее, но мой ответ будет чуть-чуть более неправильный.
[04:07:13.860 --> 04:07:14.860]  Чуть-чуть быстрее, да.
[04:07:14.860 --> 04:07:15.860]  Да.
[04:07:15.860 --> 04:07:16.860]  Чуть быстрее, а дай хер.
[04:07:16.860 --> 04:07:20.260]  Ну да, ну то есть условно, как бы у него есть две крани,
[04:07:20.260 --> 04:07:23.140]  но там, нет, смотрите, софтхип, это шо такое, тоже хип.
[04:07:23.140 --> 04:07:27.780]  И он говорит, все операции я делаю за от единицы, кроме
[04:07:27.780 --> 04:07:28.780]  инсерта.
[04:07:28.780 --> 04:07:32.500]  Инсерт будет работать за алгоритм 1 делить на епсилам.
[04:07:32.500 --> 04:07:38.180]  И при этом я, но при этом епсилам это какая-то константа.
[04:07:38.180 --> 04:07:40.700]  Мелкая там от 0 до 1 и второй.
[04:07:40.700 --> 04:07:47.580]  Вот, но, нет, логарифм 1 делить на епсилам, ну не совсем,
[04:07:47.580 --> 04:07:52.220]  да, но нет, ну не совсем, но константа такая относительная.
[04:07:52.220 --> 04:07:57.100]  Ну потому что в данном случае восьминтотика это, восьминтотика
[04:07:57.100 --> 04:07:59.500]  епсилам участвовать будет, потому что епсилам может
[04:07:59.500 --> 04:08:01.740]  быть, например, 1 делить на n, а может быть там, я не
[04:08:01.740 --> 04:08:02.740]  знаю, одна треть.
[04:08:02.740 --> 04:08:06.100]  Подожди, логарифм 1 делить на епсилам, это константа
[04:08:06.100 --> 04:08:07.100]  с константами.
[04:08:07.100 --> 04:08:11.260]  Да, но просто это параметр алгоритма восьминтотике
[04:08:11.260 --> 04:08:12.380]  тоже он будет учитываться.
[04:08:12.380 --> 04:08:16.100]  То есть я говорю, он учитывает, что инсерт работает за логарифм
[04:08:16.100 --> 04:08:19.140]  1 делить на епсилам, но и епсилам может зависеть
[04:08:19.140 --> 04:08:20.140]  от n просто.
[04:08:20.140 --> 04:08:25.540]  Вот, но просто там фишка такая, просто он внутри
[04:08:25.540 --> 04:08:29.620]  себя софтхип говорит, смотрите, я тут вот всем элементам,
[04:08:30.380 --> 04:08:36.420]  вы мне суёте, присваиваю псевдоним, то есть это типа
[04:08:36.420 --> 04:08:39.540]  я вешаю на него табличку, чему он по моему мнению
[04:08:39.540 --> 04:08:40.540]  равен.
[04:08:40.540 --> 04:08:44.460]  Ну типа я могу там на Ваше повесить табличку Пети
[04:08:44.460 --> 04:08:45.740]  и сказать, это Петя.
[04:08:45.740 --> 04:08:48.740]  Ой, я так серьёзно в классе в сериусе делал.
[04:08:48.740 --> 04:08:49.740]  Вот.
[04:08:49.740 --> 04:08:52.340]  У меня был одногрупник Максим, я его Ваней называл.
[04:08:52.340 --> 04:08:54.460]  Да, вот, да, это удобно, да.
[04:08:54.460 --> 04:08:58.620]  Единственное, я гарантирую, что я тебе буду называть
[04:08:58.620 --> 04:09:01.180]  то, чем я тебе буду называть не меньше, чем ты.
[04:09:01.180 --> 04:09:07.100]  Ну то есть условно говоря, я не могу обозвать 179.57,
[04:09:07.100 --> 04:09:09.460]  но я могу обозвать 57.179.
[04:09:09.460 --> 04:09:10.460]  Вот.
[04:09:10.460 --> 04:09:11.460]  Так вот.
[04:09:11.460 --> 04:09:14.460]  Так вот, я буду обзывать их вот так и когда от меня
[04:09:14.460 --> 04:09:19.580]  попросят достать минимум, я буду возвращать реально
[04:09:19.580 --> 04:09:21.500]  минимум, но вот по этим табличкам.
[04:09:21.500 --> 04:09:28.220]  Да, то есть никаких гарантий я не даю, кроме одной.
[04:09:28.220 --> 04:09:31.500]  Я гарантирую, что если ты в меня добавил n элементов,
[04:09:31.500 --> 04:09:37.140]  вот n инсертов, да, то я гарантирую, что, внимание, в каждый
[04:09:37.140 --> 04:09:40.980]  момент времени, в каждый момент времени, вот тут очень
[04:09:40.980 --> 04:09:46.180]  аккуратно, у меня, внутри меня находится не более
[04:09:46.180 --> 04:09:51.020]  чем эпсилон умножить на n элементов, у которых
[04:09:51.020 --> 04:09:53.980]  на табличке написано что-то отличное от их самих.
[04:09:53.980 --> 04:09:54.980]  Вот.
[04:09:54.980 --> 04:10:01.460]  То есть чем больше n, то есть смотрите, получается, чем
[04:10:01.460 --> 04:10:05.140]  больше эпсилон, тем как бы да, тем быстрее я работаю,
[04:10:05.140 --> 04:10:09.420]  но как бы тем больше табличек я там, тем больше табличек
[04:10:09.420 --> 04:10:10.420]  я пишу левой пяткой.
[04:10:10.420 --> 04:10:15.420]  Но на самом деле, забирая вперед, я скажу, что на самом
[04:10:15.420 --> 04:10:18.300]  деле просто скорость заключается в том, что на самом деле
[04:10:18.300 --> 04:10:21.860]  там все элементы отправляются просто там, у себя, они там
[04:10:21.860 --> 04:10:24.340]  хранятся в какой-то единой палатке, на которой написано
[04:10:24.420 --> 04:10:25.620]  что здесь живет Вася.
[04:10:25.620 --> 04:10:26.620]  Все.
[04:10:26.620 --> 04:10:27.620]  Вот.
[04:10:27.620 --> 04:10:34.420]  Я считаю, что все, кто там живут, это Вася.
[04:10:34.420 --> 04:10:38.260]  И пока Вася будет минимальная табличка, значит будет доставать
[04:10:38.260 --> 04:10:39.260]  оттуда по очереди.
[04:10:39.260 --> 04:10:42.220]  Как только, ой, палатка пустая, ладно, теперь реально
[04:10:42.220 --> 04:10:43.740]  убрали палатку и так далее.
[04:10:43.740 --> 04:10:45.580]  Иногда палатки начинают объединяться.
[04:10:45.580 --> 04:10:50.620]  То есть там замечательное шоу на эту тему будет, но
[04:10:50.620 --> 04:10:51.620]  вот.
[04:10:51.620 --> 04:10:54.020]  Но как бы, помните, да, если, ну вот, то есть понятно,
[04:10:54.020 --> 04:10:57.820]  что условно, если вас там, то есть если у вас там
[04:10:57.820 --> 04:11:00.580]  действительно, там, Эпсилон бывает 1 на треть, ну окей,
[04:11:00.580 --> 04:11:03.380]  значит у вас гарантируется, что там, в каждое время
[04:11:03.380 --> 04:11:05.620]  времени у вас будет до n поделить на три элемента,
[04:11:05.620 --> 04:11:09.380]  которые по неожиданной причине могут быть не то, что надо.
[04:11:09.380 --> 04:11:11.060]  Но есть другая крайность.
[04:11:11.060 --> 04:11:14.140]  Если Эпсилон равно 1 делить на 2n, то гарантируется,
[04:11:14.140 --> 04:11:15.740]  что неадекватно там не будет вообще.
[04:11:15.740 --> 04:11:19.780]  Но тогда при этом и инсерт будет работать за логарифом.
[04:11:19.780 --> 04:11:22.580]  Но тогда это, скажем, по сути, это будет такая экзотическая
[04:11:22.580 --> 04:11:24.460]  реализация биномиальной кучи, на самом деле.
[04:11:24.460 --> 04:11:25.460]  Вот.
[04:11:25.460 --> 04:11:27.780]  То есть в пределе вот так.
[04:11:27.780 --> 04:11:28.780]  То есть это такой трейдов.
[04:11:28.780 --> 04:11:29.780]  Да.
[04:11:29.780 --> 04:11:30.780]  Эпсилон мы сами ставим?
[04:11:30.780 --> 04:11:31.780]  Да.
[04:11:31.780 --> 04:11:33.060]  Эпсилон мы ставим сами.
[04:11:33.060 --> 04:11:35.460]  Это параметр алгоритма.
[04:11:35.460 --> 04:11:37.620]  Так вот, вот фишка, то есть как бы зачем это вообще
[04:11:37.620 --> 04:11:38.620]  надо?
[04:11:38.620 --> 04:11:43.020]  То есть это на самом деле нам надо, это вот, может быть,
[04:11:43.020 --> 04:11:45.980]  алгоритм из цикла, вот, мы хотим медиану, да, но заметим,
[04:11:45.980 --> 04:11:49.060]  что для каких-нибудь наших целей типа партишена нам
[04:11:49.060 --> 04:11:50.380]  точно медиана не нужна.
[04:11:51.300 --> 04:11:54.180]  То есть, в общем-то, если мы возьмём медиану там плюс-минус
[04:11:54.180 --> 04:11:55.540]  что-нибудь, нас это устроит.
[04:11:55.540 --> 04:11:59.500]  В общем-то, туда-сюда там, туда-сюда там плюс-минус
[04:11:59.500 --> 04:12:00.500]  там n поделить на 5.
[04:12:00.500 --> 04:12:04.140]  То есть, например, там просто, вот теперь с помощью такого
[04:12:04.140 --> 04:12:07.100]  вот софтхипа, вот, например, там будет алгоритм такой,
[04:12:07.100 --> 04:12:10.980]  будем подробно ещё обсуждать, но смотрите, давайте, как
[04:12:10.980 --> 04:12:16.780]  найти примерную медиану, вот теперь я хочу найти
[04:12:16.780 --> 04:12:20.180]  элемент, который будет в отсортированном массиве
[04:12:20.180 --> 04:12:23.980]  находиться во второй-третьей элементах, да, ну типа есть
[04:12:23.980 --> 04:12:26.500]  третьи элементы меньше, есть третьи элементы больше.
[04:12:26.500 --> 04:12:27.500]  Как мне это сделать?
[04:12:29.500 --> 04:12:31.180]  Так вот, движение такое.
[04:12:31.180 --> 04:12:34.740]  Берём все эти элементы, создаём софтхип с эпсилон
[04:12:34.740 --> 04:12:44.900]  равно n поделить на 3, значит, с n поделить на 3, значит,
[04:12:45.020 --> 04:12:46.860]  суём туда все эти элементы.
[04:12:46.860 --> 04:12:48.340]  Каждый суётся за вот единицы.
[04:12:48.340 --> 04:12:50.340]  Простите, а разве не приходит на n?
[04:12:50.340 --> 04:12:52.340]  Вы же скажете, что эпсилон меньше 1 и 2.
[04:12:52.340 --> 04:12:55.340]  Эпсилон меньше 1 и 2, да.
[04:12:55.340 --> 04:12:58.340]  И поэтому я говорю сейчас пусть эпсилон равен 1 треть.
[04:12:58.340 --> 04:13:02.340]  1, 1, 1 треть, всё нормально.
[04:13:02.340 --> 04:13:06.340]  Значит, запихнули, и после этого достаём из этого хипа,
[04:13:06.340 --> 04:13:12.340]  значит, n поделить на 3 элементов тоже за линию, да, и выбираем
[04:13:12.340 --> 04:13:14.340]  из этих элементов реальный максимум.
[04:13:14.780 --> 04:13:16.780]  Всё, утверждение – это то, что нам надо.
[04:13:20.780 --> 04:13:23.780]  Почему так?
[04:13:23.780 --> 04:13:27.780]  Да, просто потому что, смотрите, фишка такая, что да,
[04:13:27.780 --> 04:13:30.780]  то, что оно вам выдаст как минимум, конечно, не обязано
[04:13:30.780 --> 04:13:31.780]  быть минимум.
[04:13:31.780 --> 04:13:36.780]  Но в каждый момент времени гарантируется, ну, как бы
[04:13:36.780 --> 04:13:39.780]  тогда вы легко можете сказать, что, смотрите, этот элемент
[04:13:39.780 --> 04:13:41.780]  он по псевдонимам меньше, да.
[04:13:42.220 --> 04:13:44.220]  Напоминаю, у нас псевдоним не может быть меньше нас
[04:13:44.220 --> 04:13:46.220]  самих.
[04:13:46.220 --> 04:13:48.220]  Поэтому отсюда следует, что когда вы достаёте минимум,
[04:13:48.220 --> 04:13:51.220]  вы гарантируете тем самым, что прямо сейчас в куче
[04:13:51.220 --> 04:13:54.220]  находится не более, чем n поделить на 3 элементов,
[04:13:54.220 --> 04:13:57.220]  которые меньше нас.
[04:13:57.220 --> 04:14:02.220]  То есть не совсем там что-то от балды достается.
[04:14:02.220 --> 04:14:06.220]  Поэтому отсюда в принципе и будет следовать, что на
[04:14:06.220 --> 04:14:09.220]  самом деле максимум из того, что вы достали, он не
[04:14:09.660 --> 04:14:12.660]  там порядковая статистика не менее, чем n поделить
[04:14:12.660 --> 04:14:16.660]  на 3, ну, потому что вы достали n поделить на 3 элементов
[04:14:16.660 --> 04:14:18.660]  и как бы выбрали из них максимум, да.
[04:14:18.660 --> 04:14:21.660]  Но с другой стороны, его номер вот в ацеркированном
[04:14:21.660 --> 04:14:24.660]  массиве не более, чем 2n поделить на 3.
[04:14:24.660 --> 04:14:25.660]  Вот.
[04:14:25.660 --> 04:14:30.660]  То есть потому что гарантируется, что там, когда вы его доставали,
[04:14:30.660 --> 04:14:33.660]  в куче было хотя бы n поделить на 3 элементов, которые реально
[04:14:33.660 --> 04:14:34.660]  меньше его.
[04:14:34.660 --> 04:14:35.660]  Да.
[04:14:35.660 --> 04:14:38.660]  А сколько памяти занимает он?
[04:14:39.100 --> 04:14:41.100]  Нет, там...
[04:14:41.100 --> 04:14:44.100]  Допустим, если мы его запустим для стриминга.
[04:14:44.100 --> 04:14:46.100]  О, Господи.
[04:14:46.100 --> 04:14:48.100]  Нет, для стриминга...
[04:14:48.100 --> 04:14:50.100]  Нам придется все элементы сначала положить в видео.
[04:14:50.100 --> 04:14:51.100]  Да.
[04:14:51.100 --> 04:14:53.100]  Нет, смотрите, для стриминга такие алгоритмы вы не запихнете,
[04:14:53.100 --> 04:14:55.100]  потому что он тоже гат амортизированный, естественно.
[04:14:57.100 --> 04:15:00.100]  А амортизированные алгоритмы для стриминга это опасно,
[04:15:00.100 --> 04:15:01.100]  потому что...
[04:15:01.100 --> 04:15:02.100]  Что такое амортизированный алгоритм?
[04:15:02.100 --> 04:15:04.100]  Это означает, что алгоритм в целом работает хорошо,
[04:15:04.100 --> 04:15:07.100]  но в любой момент может зависнуть.
[04:15:07.540 --> 04:15:09.540]  То есть не потому, что он там...
[04:15:09.540 --> 04:15:11.540]  То есть не потому, что там в компьютере что-то глючит,
[04:15:11.540 --> 04:15:13.540]  а потому что вот, оказывается,
[04:15:13.540 --> 04:15:16.540]  компьютер вздумывался проделать реаллокацию.
[04:15:16.540 --> 04:15:18.540]  Ну или там...
[04:15:18.540 --> 04:15:20.540]  Переустановить Windows, я не знаю.
[04:15:20.540 --> 04:15:22.540]  То есть, знаете, когда вы делаете стрим,
[04:15:22.540 --> 04:15:24.540]  наверное, не очень хорошо,
[04:15:24.540 --> 04:15:26.540]  если в любой момент прибоит трансляция,
[04:15:26.540 --> 04:15:28.540]  и может там, я не знаю, сервер захочет
[04:15:28.540 --> 04:15:30.540]  переустановить там Windows какой-нибудь, да?
[04:15:30.540 --> 04:15:33.540]  Ну или там, на какой операционной системе это делается.
[04:15:33.540 --> 04:15:35.540]  То есть поэтому, помните, да,
[04:15:35.980 --> 04:15:37.980]  что структуры с амортизированной стоимостью
[04:15:37.980 --> 04:15:39.980]  у них ограниченная,
[04:15:39.980 --> 04:15:41.980]  очень ограниченная применимость.
[04:15:41.980 --> 04:15:43.980]  То есть они хорошо работают,
[04:15:43.980 --> 04:15:45.980]  если у нас есть задача там,
[04:15:45.980 --> 04:15:47.980]  просто задача сделать что-то,
[04:15:47.980 --> 04:15:49.980]  и нам нужно гарантировать,
[04:15:49.980 --> 04:15:51.980]  что вот все это глобально будет там за две секунды работать.
[04:15:51.980 --> 04:15:53.980]  Да, это нас устраивает.
[04:15:53.980 --> 04:15:55.980]  Но если нам хочется,
[04:15:55.980 --> 04:15:57.980]  если у нас структура данных видов,
[04:15:57.980 --> 04:15:59.980]  мы делаем запрос,
[04:15:59.980 --> 04:16:01.980]  если мы хотим делать запрос,
[04:16:01.980 --> 04:16:03.980]  но какие-то запросы структуре,
[04:16:03.980 --> 04:16:05.980]  если мы хотим, чтобы структура их там делала четко,
[04:16:05.980 --> 04:16:07.980]  то обычно,
[04:16:07.980 --> 04:16:09.980]  особенно если эти запросы откуда-то извне приходят,
[04:16:09.980 --> 04:16:11.980]  то естественно будет хотеться,
[04:16:11.980 --> 04:16:13.980]  чтобы структура не зависала,
[04:16:13.980 --> 04:16:15.980]  а действительно за удобоваримое время вам что-то выдавала.
[04:16:15.980 --> 04:16:17.980]  Вот.
[04:16:17.980 --> 04:16:19.980]  По этому там, то есть условно там,
[04:16:19.980 --> 04:16:21.980]  ну, обычно там это либо передача каких-то сообщений
[04:16:21.980 --> 04:16:23.980]  по каналам обычно,
[04:16:23.980 --> 04:16:25.980]  либо, например, если у вас там какие-то,
[04:16:25.980 --> 04:16:27.980]  ну, то есть я не знаю,
[04:16:27.980 --> 04:16:29.980]  либо какие-то микропроцессоры делаются,
[04:16:29.980 --> 04:16:31.980]  и если к ним какие-то запросы делаются,
[04:16:31.980 --> 04:16:33.980]  то внутри их никакие там сплей деревья
[04:16:33.980 --> 04:16:35.980]  или там кучи фибонаки зашиты быть не должны.
[04:16:35.980 --> 04:16:37.980]  Просто потому, что микропроцессор
[04:16:37.980 --> 04:16:39.980]  не должен зависать по подобного рода математическим причинам.
[04:16:39.980 --> 04:16:41.980]  То есть он как бы всё,
[04:16:41.980 --> 04:16:43.980]  он должен всё.
[04:16:43.980 --> 04:16:45.980]  Мне сказали операцию, я её вот за секунду выполнил,
[04:16:45.980 --> 04:16:47.980]  и всё. Вот.
[04:16:47.980 --> 04:16:49.980]  Ну, там будет хорошо, если там некоторые буду выполнять
[04:16:49.980 --> 04:16:51.980]  за пол секунды, некоторые за 7,
[04:16:51.980 --> 04:16:53.980]  но как бы вот за одну секунду выполню железно.
[04:16:53.980 --> 04:16:55.980]  Вот. Ну, а если у него сильно
[04:16:55.980 --> 04:16:57.980]  большого разброса по времени не будет,
[04:16:57.980 --> 04:16:59.980]  так вообще кайф будет.
[04:16:59.980 --> 04:17:01.980]  То есть чем более стабильно, тем как бы и психологически
[04:17:01.980 --> 04:17:03.980]  удобнее будет с ним работать.
[04:17:05.980 --> 04:17:07.980]  Так что вот такая вот нотка.
[04:17:07.980 --> 04:17:09.980]  Поэтому да, вот амортизация, это конечно
[04:17:09.980 --> 04:17:11.980]  не очень, но не говоря уже, конечно, о персистентности.
[04:17:11.980 --> 04:17:13.980]  Сколько у нас времени?
[04:17:13.980 --> 04:17:15.980]  Десять минут.
[04:17:15.980 --> 04:17:17.980]  Десять минут после пары, да.
[04:17:17.980 --> 04:17:19.980]  Ну, как всегда, да.
[04:17:19.980 --> 04:17:21.980]  Ну, с персистентностью, ну ладно,
[04:17:21.980 --> 04:17:23.980]  про персистентность мы видим,
[04:17:23.980 --> 04:17:25.980]  почему персистентность и амортизированность
[04:17:25.980 --> 04:17:27.980]  действительно работают не очень, мы тогда, видимо,
[04:17:27.980 --> 04:17:29.980]  начнем в следующий раз.
[04:17:29.980 --> 04:17:31.980]  Ну, вот.
[04:17:31.980 --> 04:17:33.980]  Да.
[04:17:33.980 --> 04:17:35.980]  Ну, это если вы знаете, что персистенция,
[04:17:35.980 --> 04:17:37.980]  мы это обсудим, да.
[04:17:37.980 --> 04:17:39.980]  Ну, пока же, да, напоминаю, что через неделю у вас
[04:17:39.980 --> 04:17:41.980]  дедлайн по задачам, напоминаю, что у вас
[04:17:41.980 --> 04:17:43.980]  появится еще одна. Ну, в принципе,
[04:17:43.980 --> 04:17:45.980]  вы можете уже начать ее решать.
[04:17:45.980 --> 04:17:47.980]  Ну, на видео эта задача уже сформулирована, если
[04:17:47.980 --> 04:17:49.980]  что, так что. Ну, вот.
[04:17:49.980 --> 04:17:51.980]  Ну, впочем, я ее оперативно вывешу.
[04:17:51.980 --> 04:17:53.980]  Если амортизированность не детерминированная,
[04:17:53.980 --> 04:17:55.980]  а рандомная, то по идее персистентность
[04:17:55.980 --> 04:17:57.980]  ну, что такое у нас,
[04:17:57.980 --> 04:17:59.980]  а у нас вот сейчас амортизированность она детерминированная.
[04:17:59.980 --> 04:18:01.980]  Ну, в плане от одинаковых действий
[04:18:01.980 --> 04:18:03.980]  разное время работает.
[04:18:03.980 --> 04:18:05.980]  Ну, не, ну, все равно
[04:18:05.980 --> 04:18:07.980]  не пойдет. Вот у Вектора всегда от единицы,
[04:18:07.980 --> 04:18:09.980]  да, у всей операции, но там же какая
[04:18:09.980 --> 04:18:11.980]  конкретно будет зала. Я имею в виду, что, например,
[04:18:11.980 --> 04:18:13.980]  мы, не знаю, выполняем раздом же элемент.
[04:18:13.980 --> 04:18:15.980]  Да. Вы выбираете.
[04:18:15.980 --> 04:18:17.980]  Тогда если мы откатим, то все равно рандом...
[04:18:17.980 --> 04:18:19.980]  Смотрите, рандом в этом смысле тоже
[04:18:19.980 --> 04:18:21.980]  плохо, потому что нет гора, потому что
[04:18:21.980 --> 04:18:23.980]  в любой момент она все равно может зависнуть.
[04:18:23.980 --> 04:18:25.980]  То есть раз в год она зависит.
[04:18:25.980 --> 04:18:27.980]  Я не про персистентность говорил.
[04:18:27.980 --> 04:18:29.980]  Тогда не получится откатывать.
[04:18:29.980 --> 04:18:31.980]  Вот давай сейчас Костя вопрос.
[04:18:31.980 --> 04:18:33.980]  А можно у вас вопрос, с чем у нас
[04:18:33.980 --> 04:18:35.980]  расписание на 10 минут в природе, если мы всегда опаздываем на 10 минут?
[04:18:35.980 --> 04:18:37.980]  То есть мы опа...
[04:18:37.980 --> 04:18:39.980]  Так, на первой паре мы на 10 минут
[04:18:39.980 --> 04:18:41.980]  опаздываем по одной простой причине, опаздываю я.
[04:18:41.980 --> 04:18:43.980]  Как бы это...
[04:18:43.980 --> 04:18:45.980]  Ничего? На первой паре опаздывают
[04:18:45.980 --> 04:18:47.980]  в мещере, да, потом вы.
[04:18:47.980 --> 04:18:49.980]  А, то есть он просто знает за мной этот прикол, да.
[04:18:49.980 --> 04:18:51.980]  Или по независимым
[04:18:51.980 --> 04:18:53.980]  причинам опаздывать, да.
[04:18:55.980 --> 04:18:57.980]  Ну, как вам сказать?
[04:18:57.980 --> 04:18:59.980]  Ну, не знаю.
[04:18:59.980 --> 04:19:01.980]  Нет, ну честно скажем так.
[04:19:01.980 --> 04:19:03.980]  Это скорее косяк преподавателей называется.
[04:19:03.980 --> 04:19:05.980]  Да, все это вот. То есть это
[04:19:05.980 --> 04:19:07.980]  потому что косяк преподавателей, да.
[04:19:07.980 --> 04:19:09.980]  Потому что первая пара должна начинаться в 9,
[04:19:09.980 --> 04:19:11.980]  вторая пара здесь должна начинаться в 10.35.
[04:19:11.980 --> 04:19:13.980]  Да.
[04:19:13.980 --> 04:19:15.980]  Нормально, что я вместо пятерки подставил
[04:19:15.980 --> 04:19:17.980]  типа 2k плюс 1,
[04:19:17.980 --> 04:19:19.980]  и у меня получилось, что оно выполняется
[04:19:19.980 --> 04:19:21.980]  2k больше или равно единицы.
[04:19:21.980 --> 04:19:23.980]  Прям больше или равно?
[04:19:23.980 --> 04:19:25.980]  Нет, это не нормально.
[04:19:25.980 --> 04:19:27.980]  Да, мне тоже так кажется,
[04:19:27.980 --> 04:19:29.980]  но вроде логично все.
[04:19:29.980 --> 04:19:31.980]  У меня случилось просто больше.
[04:19:31.980 --> 04:19:33.980]  Ну...
[04:19:33.980 --> 04:19:35.980]  Типа должно быть просто больше единицы.
[04:19:35.980 --> 04:19:37.980]  Ну...
[04:19:37.980 --> 04:19:39.980]  Ладно.
[04:19:39.980 --> 04:19:41.980]  Так, ладно.
[04:19:41.980 --> 04:19:43.980]  Все, не буду палить ответ. Ладно, тогда на сегодня все.
[04:19:43.980 --> 04:19:45.980]  А то у вас там у кого-то
[04:19:45.980 --> 04:19:47.980]  еще следующая пара есть.
[04:19:47.980 --> 04:19:49.980]  У всех.
[04:19:49.980 --> 04:19:51.980]  А, у всех?
[04:19:51.980 --> 04:19:53.980]  А, а что-то никто не приходит.
[04:19:53.980 --> 04:19:55.980]  Вещерин опаздывает.
[04:19:55.980 --> 04:19:57.980]  А, вещерин опаздывает.
[04:19:57.980 --> 04:19:59.980]  А в чем смысл?
[04:20:01.980 --> 04:20:03.980]  Нет, ну, смысл простой.
[04:20:03.980 --> 04:20:05.980]  У вас один день на темиряйзерской.
[04:20:05.980 --> 04:20:07.980]  Значит, смотрите, так...
[04:20:07.980 --> 04:20:09.980]  О, да, прям буду как экскурсовод такой,
[04:20:09.980 --> 04:20:11.980]  знаете хоть.
[04:20:11.980 --> 04:20:13.980]  Нет, причина...
[04:20:13.980 --> 04:20:15.980]  Ну, смотрите, так на самом деле отчасти исторически сложилось.
[04:20:15.980 --> 04:20:17.980]  И сложилось вот почему.
[04:20:17.980 --> 04:20:19.980]  Обратите внимание, что у вас не совсем...
[04:20:19.980 --> 04:20:21.980]  Что у вас здесь находятся не совсем случайные предметы.
[04:20:21.980 --> 04:20:23.980]  А у вас именно...
[04:20:23.980 --> 04:20:25.980]  То есть обычно тут проходятся именно вот лекции,
[04:20:25.980 --> 04:20:27.980]  семинары по алгоритмам.
[04:20:27.980 --> 04:20:29.980]  Ну, именно по алгоритмам плюс самые там...
[04:20:29.980 --> 04:20:31.980]  И в будущем тоже в основном скорее
[04:20:31.980 --> 04:20:33.980]  по прогерским предметам, хотя математика тоже будет.
[04:20:33.980 --> 04:20:35.980]  Почему это сделано? А сделано это вот почему.
[04:20:35.980 --> 04:20:37.980]  Потому что обычно...
[04:20:37.980 --> 04:20:39.980]  Ну, ладно, в нашем случае
[04:20:39.980 --> 04:20:41.980]  это сложнее, потому что...
[04:20:41.980 --> 04:20:43.980]  Ну, вообще, как бы подавляющее большинство
[04:20:43.980 --> 04:20:45.980]  подавателей по подобного рода прогерским предметам
[04:20:45.980 --> 04:20:47.980]  это действующие разработчики каких-нибудь компаний.
[04:20:47.980 --> 04:20:49.980]  Ну, там Яндекс, Аби,
[04:20:49.980 --> 04:20:51.980]  там ВК, там и так далее.
[04:20:51.980 --> 04:20:53.980]  Вот.
[04:20:53.980 --> 04:20:55.980]  Нет, это лишь означает,
[04:20:55.980 --> 04:20:57.980]  что скорее всего, то есть многие прибавительно
[04:20:57.980 --> 04:20:59.980]  работают по принципу, что у них есть там две пары
[04:20:59.980 --> 04:21:01.980]  в неделю, то есть они их приезжают,
[04:21:01.980 --> 04:21:03.980]  то есть они даже там проводят пары,
[04:21:03.980 --> 04:21:05.980]  а потом после этого едут, собственно, на работу основную.
[04:21:05.980 --> 04:21:07.980]  Вот.
[04:21:07.980 --> 04:21:09.980]  Поэтому, значит...
[04:21:09.980 --> 04:21:11.980]  Поэтому это сделается для того, чтобы им не надо было
[04:21:11.980 --> 04:21:13.980]  ездить в Долгопрудный.
[04:21:13.980 --> 04:21:15.980]  Ну, потому что, смотрите,
[04:21:15.980 --> 04:21:17.980]  то есть как бы отсюда до Яндекса доехать как-то ближе,
[04:21:17.980 --> 04:21:19.980]  чем из Долгопрудного, правда?
[04:21:19.980 --> 04:21:21.980]  Ну, почему?
[04:21:21.980 --> 04:21:23.980]  Нет, смотрите, у вас есть Илья Мещерин,
[04:21:23.980 --> 04:21:25.980]  который работает в ВК.
[04:21:25.980 --> 04:21:27.980]  Знаете, в ВК, наверное, отсюда все-таки ближе доехать,
[04:21:27.980 --> 04:21:29.980]  чем из Долгопрудного.
[04:21:29.980 --> 04:21:31.980]  Ну, или вот у вас есть еще Федор...
[04:21:31.980 --> 04:21:33.980]  Там некий... У вас еще есть Федор Букреев,
[04:21:33.980 --> 04:21:35.980]  где он работает, я не знаю.
[04:21:35.980 --> 04:21:37.980]  Да.
[04:21:37.980 --> 04:21:39.980]  Они откуда?
[04:21:39.980 --> 04:21:41.980]  Я из Индии.
[04:21:41.980 --> 04:21:43.980]  Вы из Долгопрудного едете или из Москвы?
[04:21:43.980 --> 04:21:45.980]  Пора.
[04:21:45.980 --> 04:21:47.980]  Ну, в зависимости, я там в разных местах живу.
[04:21:47.980 --> 04:21:49.980]  Вот.
[04:21:49.980 --> 04:21:51.980]  Но это уже...
[04:21:51.980 --> 04:21:53.980]  Но это уже детали.
[04:21:53.980 --> 04:21:55.980]  Ну, просто понять, суммарное неудобство
[04:21:55.980 --> 04:21:57.980]  оценить.
[04:21:57.980 --> 04:21:59.980]  Нет, у меня в зависимости.
[04:21:59.980 --> 04:22:01.980]  В зависимости от того,
[04:22:01.980 --> 04:22:03.980]  где я в какой-то момент живу, может мне там...
[04:22:03.980 --> 04:22:05.980]  Потому что я бываю в Долгопрудном, бываю живу в Москве.
[04:22:05.980 --> 04:22:07.980]  Так что там рандомно.
[04:22:07.980 --> 04:22:09.980]  Так что-то соответственно.
[04:22:09.980 --> 04:22:11.980]  Попрос по домашнему.
[04:22:11.980 --> 04:22:13.980]  Вот в этой задаче, где, типа, найти,
[04:22:13.980 --> 04:22:15.980]  какие ка подходят.
[04:22:15.980 --> 04:22:17.980]  Нам для обоснования задача будет
[04:22:17.980 --> 04:22:19.980]  просто поставить вместо пятерки
[04:22:19.980 --> 04:22:21.980]  там по ка плюс один
[04:22:21.980 --> 04:22:23.980]  и показать, что это доказательство
[04:22:23.980 --> 04:22:25.980]  не срабатывает? Или...
[04:22:25.980 --> 04:22:27.980]  Нет, этого не достаточно.
[04:22:27.980 --> 04:22:29.980]  Ну, не срабатывается, смотря в какой причине.
[04:22:29.980 --> 04:22:31.980]  В смысле оценить...
[04:22:31.980 --> 04:22:33.980]  То есть, если вы покажете, что там при
[04:22:33.980 --> 04:22:35.980]  каких-то ка действительно эта рекуррента
[04:22:35.980 --> 04:22:37.980]  оказывается просто железно не ОАТН?
[04:22:37.980 --> 04:22:39.980]  То есть, не в смысле...
[04:22:39.980 --> 04:22:41.980]  Да, потому что оно работает только при
[04:22:41.980 --> 04:22:43.980]  ка вот в таких ограничениях.
[04:22:43.980 --> 04:22:45.980]  Ну, да. Ну, другой вопрос, что, как бы, да,
[04:22:45.980 --> 04:22:47.980]  если вас... То есть, напоминаю, да, что у вас...
[04:22:47.980 --> 04:22:49.980]  Если вас не сложилось доказать, то прям по такой
[04:22:49.980 --> 04:22:51.980]  системе могло сложиться, что там ТЦН-Д
[04:22:51.980 --> 04:22:53.980]  сработало, да?
[04:22:53.980 --> 04:22:55.980]  Это тоже всё...
[04:22:55.980 --> 04:22:57.980]  Ну, да.
[04:22:57.980 --> 04:22:59.980]  То есть, минус Д тоже пытаться...
[04:22:59.980 --> 04:23:01.980]  Нет. Ну, там легче бывает
[04:23:01.980 --> 04:23:03.980]  просто доказать, что эта рекуррента, она не
[04:23:03.980 --> 04:23:05.980]  это ОАТН.
[04:23:05.980 --> 04:23:07.980]  В смысле при других ка, да?
[04:23:07.980 --> 04:23:09.980]  Ну, при каких-то.
[04:23:09.980 --> 04:23:11.980]  Ну, потому что может быть так, что вот эта рекуррента
[04:23:11.980 --> 04:23:13.980]  записана при каких-то ка, там решение
[04:23:13.980 --> 04:23:15.980]  просто не окажется, что
[04:23:15.980 --> 04:23:17.980]  не окажется, что ТЦН равно ОАТН. То есть, окажется,
[04:23:17.980 --> 04:23:19.980]  что оно там омеряет чего-нибудь
[04:23:19.980 --> 04:23:21.980]  большего.
[04:23:21.980 --> 04:23:23.980]  То есть, и всё. Тогда это уже железобетонное
[04:23:23.980 --> 04:23:25.980]  доказательство, что вы не... там, что
[04:23:25.980 --> 04:23:27.980]  ОАТН не получится.
[04:23:27.980 --> 04:23:29.980]  То есть, нам нужно показать, что при
[04:23:29.980 --> 04:23:31.980]  каких-то ка это вот такое доказательство
[04:23:31.980 --> 04:23:33.980]  сработает, а при остальных доказать, что
[04:23:33.980 --> 04:23:35.980]  оно просто не будет никогда работать.
[04:23:35.980 --> 04:23:37.980]  Что просто это рекуррент?
[04:23:37.980 --> 04:23:39.980]  Ну, да.
[04:23:39.980 --> 04:23:41.980]  Ну, да, да, да.
[04:23:41.980 --> 04:23:43.980]  Если у нас
[04:23:43.980 --> 04:23:45.980]  есть один такой элемент, то
[04:23:45.980 --> 04:23:47.980]  partition должна возвращать
[04:23:47.980 --> 04:23:49.980]  паку из начала и конца.
[04:23:49.980 --> 04:23:51.980]  Из двух позиций.
[04:23:51.980 --> 04:23:53.980]  Ну, по-разному.
[04:23:53.980 --> 04:23:55.980]  Можно так. А можно просто сказать,
[04:23:55.980 --> 04:23:57.980]  что давайте в качестве элемента
[04:23:57.980 --> 04:23:59.980]  имеем в виду пару видов самого элемента
[04:23:59.980 --> 04:24:01.980]  исходного индекса, какого-нибудь.
[04:24:01.980 --> 04:24:03.980]  Ну, то есть, да.
[04:24:03.980 --> 04:24:05.980]  То есть, это уже такие технические
[04:24:05.980 --> 04:24:07.980]  детали. Ну, в принципе, да, по-разному
[04:24:07.980 --> 04:24:09.980]  можно. Да.
[04:24:09.980 --> 04:24:11.980]  Так. Не, прям мне даже интересно это...
[04:24:11.980 --> 04:24:13.980]  А...
[04:24:13.980 --> 04:24:15.980]  О господи.
[04:24:15.980 --> 04:24:17.980]  Странно.
[04:24:19.980 --> 04:24:21.980]  Так, интересно, так.
[04:24:21.980 --> 04:24:23.980]  Не, просто...
[04:24:23.980 --> 04:24:25.980]  Как всегда, это как всегда. Если Илья не собирается
[04:24:25.980 --> 04:24:27.980]  приходить, можно как бы и продолжить.
[04:24:27.980 --> 04:24:29.980]  Не, мне прямо даже
[04:24:29.980 --> 04:24:31.980]  интересно. Ладно.
[04:24:57.980 --> 04:24:59.980]  Ну, это все нормально.
[04:24:59.980 --> 04:25:01.980]  Да.
[04:25:01.980 --> 04:25:03.980]  Это все нормально.
[04:25:03.980 --> 04:25:05.980]  Дима, у тебя даже поза.
[04:25:05.980 --> 04:25:07.980]  На очень высоком комфорте.
[04:25:07.980 --> 04:25:09.980]  Ну, это все хорошо.
[04:25:11.980 --> 04:25:13.980]  Мне кажется, это что-то...
[04:25:13.980 --> 04:25:15.980]  Кару мы пяти видимо оптимально
[04:25:15.980 --> 04:25:17.980]  на небольших.
[04:25:17.980 --> 04:25:19.980]  Нет, это действительно не кару.
[04:25:19.980 --> 04:25:21.980]  Да, кару мы пяти видимо оптимально
[04:25:21.980 --> 04:25:23.980]  просто на небольших.
[04:25:23.980 --> 04:25:25.980]  Или кару, но...
[04:25:25.980 --> 04:25:27.980]  Кстати, а если используете 9 часов?
[04:25:27.980 --> 04:25:29.980]  Мне кажется, это будет мечта.
[04:25:29.980 --> 04:25:31.980]  Внутри 1 группа.
[04:25:31.980 --> 04:25:33.980]  Ну, слушай, ты если еще партийщешь, это вот это.
[04:25:33.980 --> 04:25:35.980]  Нет, внутри 1 группа.
[04:25:35.980 --> 04:25:37.980]  Да.
[04:25:37.980 --> 04:25:39.980]  Это все нормально.
[04:25:39.980 --> 04:25:41.980]  Которые надо скинуть.
[04:25:41.980 --> 04:25:43.980]  Если еще раз, что делать?
[04:25:43.980 --> 04:25:45.980]  Если он предлагает
[04:25:45.980 --> 04:25:47.980]  вот эти элементы меньше, где-то все больше.
[04:25:47.980 --> 04:25:49.980]  Значит, их хотя бы...
[04:25:49.980 --> 04:25:51.980]  Чего?
[04:25:51.980 --> 04:25:53.980]  Ну, меньше, как стартов.
[04:25:53.980 --> 04:25:55.980]  Ну, ладно.
[04:25:55.980 --> 04:25:57.980]  Ну, прости, как стартов.
