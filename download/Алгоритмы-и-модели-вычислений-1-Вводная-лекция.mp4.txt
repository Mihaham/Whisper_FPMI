[00:00.000 --> 00:10.000]  Добрый день, рад вас приветствовать на курсе алгоритмы модели вычислений.
[00:10.000 --> 00:18.000]  К сожалению, я вынужден начинать его онлайн, но я надеюсь, что уже в следующий раз будет точная лекция.
[00:18.000 --> 00:30.000]  Сегодня я буду использовать доску.
[00:48.000 --> 00:58.000]  Можно к ней подключаться по этой ссылке.
[00:58.000 --> 01:08.000]  Сегодня я сделаю такую вводную лекцию. Я сначала вкратце расскажу о чем вообще курс, как он будет устроен,
[01:08.000 --> 01:18.000]  что мы будем изучать, какие нас вопросы будут интересовать, а потом расскажу некоторые вводные вещи.
[01:18.000 --> 01:28.000]  Дать я представлюсь. Меня зовут Даниил Владимирович Мусатов.
[01:28.000 --> 01:38.000]  Я работаю на кафе 30-летней математики с Андреем Михайловичем Рыгородским уже много лет.
[01:38.000 --> 01:48.000]  Этот курс я читаю в третий год, но до этого я читал похожий курс на фифте под названием сложности вычислений,
[01:48.000 --> 01:58.000]  но продолжаю его читать. Он не совсем такой же, акценты немного другие, но в целом похожий.
[01:58.000 --> 02:18.000]  Если нужны будут координаты для связи, есть email.com, также можно писать в Telegram тем же именем.
[02:18.000 --> 02:30.000]  Еще у нас в Telegram есть каналы и чат, они остались с позапрошлого года.
[02:30.000 --> 02:40.000]  Соответственно, можно их использовать.
[03:00.000 --> 03:10.000]  Вот такой вот, давайте я его сюда в чат пошлю.
[03:10.000 --> 03:20.000]  Вот этот канал и также есть чат.
[03:40.000 --> 04:00.000]  Соответственно, важные новости будут появляться в этом канале.
[04:00.000 --> 04:10.000]  В чате можно задать вопрос. Все из канала дублируется в чат.
[04:10.000 --> 04:30.000]  Еще важные вещи, как устроена отчетность по курсу.
[04:30.000 --> 04:46.000]  Глобально она так устроена. Отчетность, что это дифференцированный зачет.
[04:46.000 --> 04:58.000]  Соответственно, состоит из двух контрольных работ.
[04:58.000 --> 05:08.000]  Три оценки, контрольная 1, контрольная 2 и работа в семестре.
[05:08.000 --> 05:18.000]  Работа в семестре это на усмотрение семинариста.
[05:18.000 --> 05:24.000]  Могут быть какие-то маленькие контрольные на 20 минут на семинаре.
[05:24.000 --> 05:28.000]  Могут быть какие-то домашки. Может быть просто работа на семинарах.
[05:28.000 --> 05:38.000]  Это все на усмотрение семинариста.
[05:38.000 --> 05:44.000]  Оценки за три работы складываются, усредняются. Это будет итоговая оценка.
[05:44.000 --> 05:50.000]  Но там есть некоторые детали. Это не прям совсем так происходит.
[05:50.000 --> 05:58.000]  Точные правила я думаю выложим. Вроде их уже написали.
[05:58.000 --> 06:08.000]  Вот уже и есть этот файл.
[06:08.000 --> 06:18.000]  Важно их составлять в работе в семестре.
[06:18.000 --> 06:28.000]  Какой-то зачет по теории.
[06:28.000 --> 06:38.000]  Детали будут записаны в этом канале.
[06:38.000 --> 06:44.000]  Теперь давайте по сути.
[06:44.000 --> 06:52.000]  Если какие-то вопросы останутся после текста, тогда вы их зададите.
[06:52.000 --> 07:02.000]  Какой план курса? Что мы вообще изучаем?
[07:02.000 --> 07:12.000]  Основной вопрос. Какие алгоритмические задачи решаются эффективно?
[07:12.000 --> 07:22.000]  Если эффективно, то как, а если нет, то почему?
[07:22.000 --> 07:32.000]  Если решаются то как, а если нет, то почему?
[07:32.000 --> 07:42.000]  В этой лекции вы в канал выложите?
[07:42.000 --> 07:52.000]  Да, я еще сделаю папку, где будут все материалы лежать.
[07:52.000 --> 07:58.000]  Появятся какие-то материалы.
[07:58.000 --> 08:06.000]  У нас будет большой файл со всякой программой, задачами и так далее.
[08:06.000 --> 08:16.000]  Если по ходу дела что-то будет появляться, то оно будет выкладываться.
[08:16.000 --> 08:22.000]  Это основной вопрос.
[08:22.000 --> 08:28.000]  Дальше конкретные темы.
[08:28.000 --> 08:38.000]  Основные части курса.
[08:38.000 --> 08:48.000]  Первый это вопрос о равенстве P и NP.
[08:48.000 --> 08:58.000]  Это фундаментальный вопрос.
[08:58.000 --> 09:08.000]  Более того, этот вопрос входит в список из семи задач тысячелетия, за которые дается премия в миллион долларов.
[09:08.000 --> 09:18.000]  Ему в прошлом году исполнилось полвека его фактической постановки.
[09:18.000 --> 09:28.000]  Соответственно, он пока не решен.
[09:28.000 --> 09:38.000]  Если кратко, то класс P это задачи, которые быстро решаются, а NP это задачи, которые, может быть, быстрее не решаются.
[09:38.000 --> 09:48.000]  Но если на них ответ положительный, то тогда это можно быстро доказать и проверить.
[09:48.000 --> 09:58.000]  Вопрос о равенстве.
[09:58.000 --> 10:08.000]  Есть у него такое название «проблема перебора».
[10:08.000 --> 10:18.000]  Универсальным образом сократить полный перебор.
[10:18.000 --> 10:28.000]  Если задача решается полным перебором, то можно ли ее как-то иначе решить.
[10:28.000 --> 10:38.000]  Вторая тема — это другие сложностные классы.
[10:38.000 --> 10:58.000]  Это связанная логарифмическая память, вероятностные вычисления, логические схемы.
[10:58.000 --> 11:08.000]  Глобально этот вопрос, какие задачи решаются эффективно, какие нет, наука отвечает большой классификацией.
[11:08.000 --> 11:18.000]  Наука очень любит что-то классифицировать.
[11:18.000 --> 11:28.000]  В частности, сложность вычисления классифицирует алгоритмические задачи.
[11:28.000 --> 11:34.000]  Она их раскладывает по полочкам, которые называются сложностными классами,
[11:34.000 --> 11:42.000]  которые определяются необходимыми ресурсами, которые нужны для решения той или иной задачи.
[11:42.000 --> 11:44.000]  Это пример таких классов.
[11:44.000 --> 11:50.000]  Есть целый зоопарк, несколько сотен.
[11:50.000 --> 11:56.000]  С несколькими из них мы познакомимся.
[11:56.000 --> 12:14.000]  Вторая часть курса — это хорошая сторона сложных задач.
[12:14.000 --> 12:28.000]  Использование в криптографии и других подобных вещах.
[12:28.000 --> 12:32.000]  Криптография — это основная вещь, где нужны сложные задачи.
[12:32.000 --> 12:38.000]  Есть еще несколько вещей, связанных с вероятностью.
[12:38.000 --> 12:44.000]  Выясним, что задача трудно решаемая.
[12:44.000 --> 12:46.000]  Как это хорошо или плохо?
[12:46.000 --> 12:50.000]  С одной стороны, это плохо, если задача нужна.
[12:50.000 --> 13:04.000]  Если нам нужно найти хороший рецепт чего-нибудь, хороший производственный план,
[13:04.000 --> 13:14.000]  хорошую транспортную сеть и так далее, то если у нас не получается этого найти,
[13:14.000 --> 13:16.000]  то это вообще не очень хорошо.
[13:16.000 --> 13:20.000]  Особенно если на самом деле решение есть, а мы его не можем найти,
[13:20.000 --> 13:22.000]  и из-за этого действуем неэффективно.
[13:22.000 --> 13:26.000]  И тогда плохо, что задача не решается.
[13:26.000 --> 13:32.000]  С другой стороны, если это задача взлома шифра, а шифр как раз наш,
[13:32.000 --> 13:36.000]  то это наоборот как раз хорошо, что она не решается.
[13:36.000 --> 13:40.000]  И на базе сложных задач можно как раз построить криптографические протоколы
[13:40.000 --> 13:44.000]  или какие-то хорошие генераторы и так далее.
[13:44.000 --> 13:48.000]  Ну и дальше еще есть четвертая часть.
[13:48.000 --> 13:52.000]  Это, наоборот, внутри П.
[13:52.000 --> 14:00.000]  Я назову так, избранные полинамиальные алгоритмы.
[14:00.000 --> 14:04.000]  Посмотрим уже в конце семестра, сколько останется.
[14:04.000 --> 14:08.000]  Может быть, что-то на семинары уйдет.
[14:08.000 --> 14:14.000]  Некоторые алгоритмы классические.
[14:14.000 --> 14:18.000]  Мы изучим какие-то алгоритмы на графах или быстрое преобразование в фурье.
[14:18.000 --> 14:22.000]  В общем, про это поговорим.
[14:22.000 --> 14:26.000]  Первые две части побольше, наверное, по пять лекций будут.
[14:26.000 --> 14:32.000]  А третья и четвертая примерно по две лекции.
[14:32.000 --> 14:36.000]  Ну и дальше.
[14:36.000 --> 14:40.000]  Ну и дальше.
[14:40.000 --> 14:44.000]  Ну и дальше.
[14:44.000 --> 14:48.000]  Ну и дальше.
[14:48.000 --> 14:52.000]  По две лекции.
[14:52.000 --> 14:56.000]  Ну и в принципе в конце курса возможны вариации.
[15:02.000 --> 15:06.000]  Так.
[15:06.000 --> 15:10.000]  Можете кинуть вопросы.
[15:10.000 --> 15:14.000]  Официальные лекции будут только в трансляции.
[15:14.000 --> 15:18.000]  Не, вообще лекция планируется в аудитории. Я просто немножко болею.
[15:18.000 --> 15:22.000]  И надеюсь, что в следующий раз будет в аудитории.
[15:22.000 --> 15:26.000]  Но там не по идее записываться будут.
[15:26.000 --> 15:28.000]  Хорошо. Здравствуйте.
[15:28.000 --> 15:30.000]  Да, спасибо.
[15:30.000 --> 15:38.000]  А будет интерзапись или анонимация?
[15:38.000 --> 15:42.000]  Я не знаю, как это будет устроено.
[15:42.000 --> 15:46.000]  Там это немного зависит от доступной техники и так далее.
[15:46.000 --> 15:52.000]  Викторий ФПМИ планирует записывать только матан в этом семестре на нашем протоке.
[15:52.000 --> 15:54.000]  Да?
[15:54.000 --> 15:56.000]  Да.
[15:56.000 --> 16:00.000]  Ну ладно. Изучим вопрос.
[16:00.000 --> 16:04.000]  А, вон литература еще точно.
[16:04.000 --> 16:06.000]  Забыл.
[16:06.000 --> 16:08.000]  Мой вопрос.
[16:08.000 --> 16:14.000]  Лекции прошлого года будут сильно отличаться от существующих, которые вы будете сейчас читать.
[16:14.000 --> 16:18.000]  Просто если не будут описываться, то мы бы их посмотрели тоже, если бы там пропустили.
[16:18.000 --> 16:24.000]  Да, по первым двум частям, наверное, не сильно будут отличаться.
[16:24.000 --> 16:26.000]  А там в конце посмотрим.
[16:26.000 --> 16:28.000]  А их всего?
[16:28.000 --> 16:30.000]  Частей всего?
[16:30.000 --> 16:34.000]  По первой части примерно 10 лекций.
[16:34.000 --> 16:36.000]  Вот они вряд ли будут сильно отличаться.
[16:36.000 --> 16:38.000]  А в конце там может быть какая-то...
[16:38.000 --> 16:44.000]  Про четвертую мы в прошлый раз почти не успели поговорить.
[16:44.000 --> 16:52.000]  Еще 2-3 февраля пропадет.
[16:52.000 --> 16:56.000]  В мае, правда, не будет ничего пропадать.
[16:56.000 --> 17:02.000]  У нас, видимо, 14 будет лекций.
[17:02.000 --> 17:06.000]  Да, литература.
[17:06.000 --> 17:10.000]  Правильный вопрос.
[17:10.000 --> 17:14.000]  Литературы вообще довольно много, разные.
[17:14.000 --> 17:20.000]  Есть действительно черные к моей книжке.
[17:20.000 --> 17:24.000]  Не знаю, может быть, она и будет как-то улучшаться.
[17:24.000 --> 17:28.000]  Но вообще последний год я там почти ничего не делал.
[17:28.000 --> 17:30.000]  Но с другой стороны, у меня накопилось некоторое количество материала,
[17:30.000 --> 17:36.000]  которое я, может быть, включу прямо в текст.
[17:36.000 --> 17:38.000]  Вот.
[17:38.000 --> 17:42.000]  Но, правда, эта книга гораздо больше включает.
[17:42.000 --> 17:46.000]  В принципе, она включает содержание примерно 3 курсов,
[17:46.000 --> 17:54.000]  3 курсов, которые я читаю на 50 и на нашей кафедре.
[17:54.000 --> 17:56.000]  Вот.
[17:56.000 --> 18:02.000]  Так что это заведомо почти для всего хватит.
[18:02.000 --> 18:04.000]  Но есть и другие книги, которые мне очень нравятся.
[18:04.000 --> 18:08.000]  Они в основном на английском языке.
[18:08.000 --> 18:12.000]  Мне очень нравится книжка Сипсера под названием
[18:12.000 --> 18:20.000]  Reduction to the Theory of Computation.
[18:20.000 --> 18:24.000]  Там нужна в основном часть третья.
[18:24.000 --> 18:28.000]  В первой части теория формальных языков.
[18:28.000 --> 18:32.000]  Там различные автоматы, контекст свободной грамматики.
[18:32.000 --> 18:36.000]  Во второй части там классическую теорию числимости, машины тюринга,
[18:36.000 --> 18:40.000]  числимые функции, разрешимые множество, проблемы остановки и так далее.
[18:40.000 --> 18:46.000]  А в третьей части довольно сжато и кратко написаны основы сложительных отчислений.
[18:46.000 --> 18:50.000]  Но там, по-моему, не все есть логнической памяти.
[18:50.000 --> 18:54.000]  Не, наверное, есть, но может быть кратко.
[18:54.000 --> 18:58.000]  Но книжка написана довольно доходчиво.
[18:58.000 --> 19:04.000]  И что мне особенно нравится в каждой теореме,
[19:04.000 --> 19:08.000]  там есть отдельно идеи доказательства и саму доказательство.
[19:08.000 --> 19:16.000]  Там это разделено и действительно позволяет сначала ухватить основную идею,
[19:16.000 --> 19:20.000]  а потом понять, как эта идея формально реализуется.
[19:20.000 --> 19:26.000]  Дальше есть две книги, которые примерно одновременно вышли,
[19:26.000 --> 19:30.000]  примерно одинаково называются.
[19:30.000 --> 19:46.000]  Есть одна книжка Aurora Barak, называется Computational Complexity and Modern Approach.
[19:46.000 --> 19:52.000]  Другая книжка Галдрайха.
[19:52.000 --> 19:56.000]  Она тоже называется Computational Complexity.
[20:00.000 --> 20:12.000]  A Conceptual Perspective.
[20:12.000 --> 20:22.000]  И они такие довольно фундаментальные, всеобъемлющие.
[20:22.000 --> 20:34.000]  Они годятся не как первый учебник, а как руководство для более глубокого изучения.
[20:34.000 --> 20:40.000]  Они довольно похожи по набору тем, но разные по стилю изложения.
[20:40.000 --> 20:48.000]  У Галдрайха все довольно занудно, но с другой стороны кому-то может так понравиться, что все формально.
[20:48.000 --> 20:52.000]  И с другой стороны, оправдывая название Conceptual Perspective,
[20:52.000 --> 21:04.000]  он все выстраивает в некоторую стройную картину, концептуальную перспективу, как это все друг другу связано.
[21:04.000 --> 21:16.000]  Есть в принципе у Галдрайха и более кратенькая книжка.
[21:16.000 --> 21:20.000]  Я тоже напишу.
[21:20.000 --> 21:26.000]  Галдрайха.
[21:26.000 --> 21:38.000]  Более узкая. P&P & NP Completeness.
[21:38.000 --> 21:46.000]  Вот такая вот книжечка.
[21:46.000 --> 21:52.000]  Тут, как вы видите, в качестве иллюстрации сложные задачи.
[21:52.000 --> 21:56.000]  Здесь какие-то пятнашки.
[21:56.000 --> 22:04.000]  Вторая книжка выглядит вот так.
[22:04.000 --> 22:10.000]  Здесь как раз видны вот эти всякие классы.
[22:10.000 --> 22:14.000]  Вот они P&P, там Q&P.
[22:14.000 --> 22:20.000]  В основном мы вот эту часть будем изучать, она и вот эту еще.
[22:20.000 --> 22:24.000]  А вот эту над водой.
[22:24.000 --> 22:28.000]  Мы из этой книжки не будем изучать.
[22:28.000 --> 22:32.000]  Извините, пожалуйста, вы показываете сейчас что-то, кроме айдро?
[22:34.000 --> 22:38.000]  Нет, я показываю в камеру.
[22:38.000 --> 22:40.000]  Понял.
[22:40.000 --> 22:44.000]  Да, я показываю в камеру.
[22:44.000 --> 23:00.000]  На экран я, наверное, не смогу, но вы можете погуглить и найти картинку.
[23:00.000 --> 23:06.000]  Еще одна очень красивая книжка есть.
[23:06.000 --> 23:12.000]  Это авторы Мурри Мертонс.
[23:12.000 --> 23:22.000]  Nature of Computation.
[23:22.000 --> 23:26.000]  Эта книжка очень толстая.
[23:26.000 --> 23:30.000]  На тысячу страниц.
[23:30.000 --> 23:34.000]  Там действительно много всего написано.
[23:34.000 --> 23:36.000]  Дополнительные темы.
[23:36.000 --> 23:40.000]  Что мне нравится, там много иллюстраций.
[23:40.000 --> 23:46.000]  Откуда-то из других смежных дисциплин.
[23:46.000 --> 23:52.000]  Типа из инженерии, из истории и так далее.
[23:52.000 --> 23:56.000]  Из истории техники в основном.
[23:56.000 --> 24:06.000]  Есть отдельные конспекты на русском языке.
[24:06.000 --> 24:16.000]  В общем, вы тоже можете их искать.
[24:16.000 --> 24:26.000]  Там есть книжка Крупского, Мертонс.
[24:26.000 --> 24:32.000]  Ну ладно.
[24:32.000 --> 24:38.000]  На этом, наверное, по литературе достаточно.
[24:38.000 --> 24:42.000]  В общем, тут источников довольно много.
[24:42.000 --> 24:44.000]  Конечно, они по темам...
[24:44.000 --> 24:48.000]  А, но есть еще классическая книга по Демитрию.
[24:48.000 --> 24:50.000]  Уже почти тридцать лет недавно.
[24:50.000 --> 24:52.000]  А, есть еще более классическая книга.
[24:52.000 --> 24:54.000]  Вот ее, наверное, все-таки помину.
[24:54.000 --> 24:58.000]  Она переведена на русский.
[24:58.000 --> 25:02.000]  Значит, Гэри и Джонсон.
[25:02.000 --> 25:08.000]  Вычислительные машины.
[25:08.000 --> 25:14.000]  И трудно решаемая задача.
[25:14.000 --> 25:24.000]  Демитрию давай тоже упомяну.
[25:24.000 --> 25:30.000]  Это вопрос компьютерского комплекса, кажется.
[25:30.000 --> 25:38.000]  Что-то книжка Гэри и Джонсона хороша тем, что там есть большой-большой список НП полных задач.
[25:38.000 --> 25:40.000]  То есть она не очень большая.
[25:40.000 --> 25:42.000]  Там примерно триста страниц.
[25:42.000 --> 25:44.000]  Написано в 1979 году.
[25:44.000 --> 25:50.000]  Она гораздо ближе ко времени начала всей этой науки, чем к нашему времени.
[25:50.000 --> 25:54.000]  С теоретической точки зрения она, в общем-то, устарела.
[25:54.000 --> 25:56.000]  Ну, как устарела, да?
[25:56.000 --> 25:58.000]  Те вещи, которые там написаны, они остаются актуальными.
[25:58.000 --> 26:00.000]  Просто гораздо больше нового появилось с тех пор.
[26:00.000 --> 26:04.000]  А вот список НП полных задач вполне актуален.
[26:04.000 --> 26:08.000]  И можно с ним прям работать.
[26:08.000 --> 26:12.000]  Ну, хорошо.
[26:12.000 --> 26:16.000]  Теперь, наверное, можно двигаться дальше.
[26:16.000 --> 26:24.000]  Сегодня я хочу поговорить про суть проблемы PNP.
[26:24.000 --> 26:28.000]  Формальное определение.
[26:28.000 --> 26:34.000]  Значит, суть проблемы PNP.
[26:34.000 --> 26:42.000]  Да, значит, формальное определение и формальное рассмотрение оставить на следующий раз.
[26:42.000 --> 27:08.000]  Значит, суть проблемы Ryanst PNP.
[27:08.000 --> 27:14.000]  Так, смотрите, если коротко.
[27:14.000 --> 27:26.000]  Во-первых, нужно понимать, что речь идет о задачах распознавания.
[27:26.000 --> 27:34.000]  То есть задачах с бинарным ответом.
[27:34.000 --> 27:40.000]  Да или нет?
[27:40.000 --> 27:58.000]  Можно считать, что ставится задача понять, принадлежит ли входное слово X
[27:58.000 --> 28:04.000]  к некоторому заданному языку.
[28:04.000 --> 28:08.000]  Ну, языку, то есть просто множество.
[28:08.000 --> 28:22.000]  Тут так исторически сложилось, что в начале этой науки изучалось много приложений к лингвистике.
[28:22.000 --> 28:30.000]  И вообще в 50-е годы очень оптимистично смотрели на машинный перевод и машинное общение.
[28:30.000 --> 28:34.000]  И вообще искусственный интеллект.
[28:34.000 --> 28:44.000]  Думали, что умные люди соберутся, посидят пару месяцев и напишут искусственный интеллект полномасштабный.
[28:44.000 --> 28:50.000]  Реально в 50-е годы было такое летнее мероприятие, где бы прям так и стало.
[28:50.000 --> 28:58.000]  И думали, что не, ну ладно, может быть мы искусственный интеллект не создадим, но уж переводчик-то мы сделаем.
[28:58.000 --> 29:18.000]  Но в результате только сейчас, через много десятилетий, до какого-то приемлемого уровня автоматический перевод наконец дошел.
[29:18.000 --> 29:28.000]  Соответственно, вот с того времени ставятся задачи, ну в смысле используется термин язык, термин слова.
[29:28.000 --> 29:32.000]  А в принципе под этим словом можно понимать все что угодно.
[29:32.000 --> 29:38.000]  Это может быть описание, может быть просто число, записанное цифрами.
[29:38.000 --> 29:42.000]  Это может быть какой-то более сложный объект типа матрицы или многочлены.
[29:42.000 --> 29:44.000]  Это может быть граф.
[29:44.000 --> 29:51.000]  Это может быть какая-то, в общем любая структура может быть скодирована словом.
[29:51.000 --> 30:04.000]  И соответственно про эту структуру нам нужно понять, обладает ли она некоторым свойством, что мы выражаем тем, что принадлежит ли она задному языку.
[30:04.000 --> 30:16.000]  Вот, хорошо.
[30:16.000 --> 30:20.000]  Вот, ну соответственно, извините.
[30:20.000 --> 30:23.000]  Значит есть n.
[30:23.000 --> 30:39.000]  Значит это, как говорят, размерность или размер задачи.
[30:39.000 --> 30:42.000]  Ну, как правило, это просто длина входа.
[30:42.000 --> 30:51.000]  Как правило, длина входа просто в символах.
[30:51.000 --> 30:53.000]  Ну или в битах.
[30:53.000 --> 31:03.000]  То есть если у нас какой-то непинарный алфавит, то можно закодировать и в бинарном алфавите.
[31:03.000 --> 31:07.000]  Длина умножится на логарифм размера алфавита.
[31:07.000 --> 31:11.000]  Вообще какие-то такие простые вещи.
[31:11.000 --> 31:14.000]  Вот, соответственно дальше p.
[31:14.000 --> 31:32.000]  Это класс задач распознавания, которые можно решить за время пленом от m.
[31:32.000 --> 31:38.000]  Да, то есть в принципе x может быть какой угодно и размером может быть какой угодно.
[31:38.000 --> 31:43.000]  Но соответственно нужно, чтобы время росло как размер в какой-то степени.
[31:43.000 --> 31:47.000]  Ну и еще может быть какую-то константу.
[31:47.000 --> 31:55.000]  То есть меньше, чем c на n степени d.
[31:55.000 --> 32:03.000]  Для каких-то констант c и d.
[32:03.000 --> 32:16.000]  Ну и соответственно считается, что p это класс задач, решаемых эффективно.
[32:16.000 --> 32:31.000]  Ну и вообще такое утверждение можно оспорить.
[32:31.000 --> 32:34.000]  Причем с двух сторон.
[32:34.000 --> 32:48.000]  С одной стороны мог быть задач fp, которая на самом деле сложная.
[32:48.000 --> 32:52.000]  Потому что здесь любые константы c и d.
[32:52.000 --> 33:02.000]  Если у нас будет d равно ну даже 10, то тогда уже для довольно маленьких n это уже будет очень много.
[33:02.000 --> 33:08.000]  Два в десятые это тысяча.
[33:08.000 --> 33:12.000]  Четыре в десятые это уже миллион.
[33:12.000 --> 33:16.000]  Восемьдесятый это миллиард.
[33:16.000 --> 33:21.000]  А уже там скажем сто в десятый.
[33:21.000 --> 33:29.000]  И это уже такая величина, которая в общем...
[33:29.000 --> 33:33.000]  Ну сто в десятые это сейчас где-то на грани.
[33:33.000 --> 33:38.000]  На грани того, что теоретически можно сделать.
[33:38.000 --> 33:45.000]  Уже там пятьсот в десятые это уже заведомо недостижимо.
[33:45.000 --> 33:51.000]  А если d уже будет само по себе сто, тогда уже десять сотой степени это уже страническая величина.
[33:51.000 --> 34:00.000]  И такое число операций сделать заведомо никогда не получится.
[34:00.000 --> 34:05.000]  И вот эта константа c тут в принципе тоже произвольная.
[34:05.000 --> 34:08.000]  Может быть даже d какой-то маленький квадрат.
[34:08.000 --> 34:13.000]  Ну зато c какие-нибудь там квадрильоны.
[34:13.000 --> 34:20.000]  И все равно получается, что нам нужно огромное число операций.
[34:20.000 --> 34:23.000]  Это с одной стороны возражение.
[34:23.000 --> 34:35.000]  С другой стороны возражение есть такое, что известен симплекс метод решения задач линейного программирования.
[34:35.000 --> 34:38.000]  У вас видимо не было еще.
[34:38.000 --> 34:46.000]  Это максимизация линейной функции при условии линейных неравенств.
[34:46.000 --> 34:52.000]  Соответственно симплекс метод теоретически работает больше.
[34:52.000 --> 35:02.000]  На некоторых входах дать я вот это еще уточню на любом входе.
[35:22.000 --> 35:26.000]  На любом входе можно решить.
[35:26.000 --> 35:37.000]  Симплекс метод на некоторых входах экспедиционно долго, но в среднем как правило он работает очень быстро.
[35:37.000 --> 35:44.000]  Реально для тех же задач есть другие алгоритмы, которые как раз формально лежат в классе p.
[35:44.000 --> 35:50.000]  Точнее в классе p лежит задача, то есть задача линейного программирования лежит в p.
[35:50.000 --> 35:56.000]  Но тем не менее решается она не теми полиномиальными алгоритмами, которые для нее известны,
[35:56.000 --> 36:03.000]  а симплекс методом, который теоретически работает.
[36:03.000 --> 36:15.000]  Соответственно это определение ловит не очень хорошо с другой стороны.
[36:15.000 --> 36:20.000]  Но тем не менее оно достаточно общепринято.
[36:20.000 --> 36:47.000]  Большинство задач лежащих в p решаются эффективно и на практике.
[36:47.000 --> 37:01.000]  А даже если на практике задача не решается пока что, то бывает так, что придумывают новые алгоритмы, которые практически работают лучше.
[37:01.000 --> 37:11.000]  Или может быть так, что они решаются в другом смысле, точно так же как с линейным программированием.
[37:11.000 --> 37:22.000]  Есть полиномиальные методы, которые на практике работают плохо, есть симплекс метод, которые на практике работают хорошо.
[37:22.000 --> 37:28.000]  Есть также еще известная задача проверки простоты.
[37:28.000 --> 37:37.000]  Теоретически решаются с алгоритмом трех индейцев, Нагровала, Каяла и Саксена.
[37:37.000 --> 37:43.000]  И тоже там как раз шестая степень полинома.
[37:43.000 --> 37:49.000]  Кстати, когда я говорю о проверке простоты, то это N это не само число, а его логарифм.
[37:49.000 --> 37:58.000]  Потому что число знаков, которым записывается число, это логарифм от самого числа.
[37:58.000 --> 38:09.000]  Но соответственно для задач проверки простоты теоретически есть алгоритм трех индейцев, которые работают в полиномиальное время.
[38:09.000 --> 38:17.000]  Но на практике обычно используются вариации алгоритма, которые мы тоже будем изучать.
[38:22.000 --> 38:26.000]  Так, хорошо, это все было P, теперь N, P.
[38:26.000 --> 38:29.000]  Да, P от слова полиномиал.
[38:37.000 --> 38:44.000]  А N, P, может быть это нот-полиномиал, но на самом деле это нондетерминистик.
[38:44.000 --> 38:52.000]  Ну и может быть в следующий раз я расскажу, откуда взялся этот нондетерминистик.
[38:52.000 --> 38:55.000]  А пока я расскажу другое определение.
[38:55.000 --> 39:13.000]  Здесь определение такое, если ответ положительный, то для этого факта есть сертификат полиномиальной длины.
[39:13.000 --> 39:25.000]  Корректность которого можно проверить за полиномиальное время.
[39:25.000 --> 39:33.000]  То есть, получается, есть отдельно некоторые вот такой VATXS.
[39:33.000 --> 39:41.000]  Значит, здесь X это вход, а S это сертификат.
[39:41.000 --> 39:52.000]  И соответственно VATXS проверяет корректность S.
[39:52.000 --> 40:01.000]  То есть верно лишь, что S действительно подтверждает, что X обладает задним свойством.
[40:01.000 --> 40:17.000]  В чем можно сказать так, что X лежит в A, тогда и только тогда, когда существует S такое, что VATXS равно 1.
[40:32.000 --> 40:37.000]  Ну и сразу получается переборный алгоритм для NP.
[40:37.000 --> 40:51.000]  Значит, переборный алгоритм для NP это перебрать все возможные S.
[40:51.000 --> 40:57.000]  Ну какой-то вот задний полиномиальный длинный.
[40:57.000 --> 41:08.000]  Значит, известный полиномиальный длинный.
[41:08.000 --> 41:17.000]  Ну и соответственно, суть, значит, задача P равно NP.
[41:17.000 --> 41:42.000]  Это есть ли универсальный способ сократить этот перебор до некоторого полиномиального алгоритма.
[41:42.000 --> 41:45.000]  Ну вот никто не знает.
[41:45.000 --> 41:48.000]  Давайте я покажу пару примеров.
[41:51.000 --> 41:55.000]  Пример. Раскраска графа.
[41:55.000 --> 41:58.000]  Значит, классическая задача.
[41:58.000 --> 42:14.000]  Известна также проблема четырехкрасок, что любую карту на плоскости можно раскрасить в четыре цвета.
[42:14.000 --> 42:20.000]  Также есть задача о хроматическом числе плоскости.
[42:20.000 --> 42:34.000]  В какое минимальное число цветов можно раскрасить плоскость так, чтобы любые две точки настояний один были разного цвета.
[42:34.000 --> 42:42.000]  И эта задача пока не решена, но получена нижняя оценка 5.
[42:42.000 --> 42:47.000]  Опять же, не так давно, примерно пять лет назад.
[42:47.000 --> 42:54.000]  Но мы пока не будем касаться вот таких открытых проблем.
[42:54.000 --> 42:57.000]  Определим так.
[42:57.000 --> 43:08.000]  Пусть дан граф, который состоит из множества вершин, множество ребер.
[43:08.000 --> 43:12.000]  Здесь w это множество вершин, e это множество ребер.
[43:12.000 --> 43:16.000]  То есть пар вершин.
[43:16.000 --> 43:32.000]  Вопрос, существует ли правильная раскраска вершин в к цветов.
[43:32.000 --> 43:35.000]  Формально, что это за раскраска?
[43:35.000 --> 43:38.000]  Это такой простой математический объект.
[43:38.000 --> 43:46.000]  Это функция c из множества вершин в множество одного дока.
[43:46.000 --> 44:01.000]  Такая, что если у нас есть ребро любого u, v, верно, что раскраска u не равна раскраске v.
[44:08.000 --> 44:23.000]  Ну и оказывается, для разных k статус этой задачи разный.
[44:23.000 --> 44:27.000]  Но сначала есть тривиальный случай.
[44:27.000 --> 44:32.000]  Тривиальный случай, когда k равно 1.
[44:32.000 --> 44:36.000]  Можно ли вершины графора покрасить в один цвет?
[44:36.000 --> 44:42.000]  Но это более очевидно, что если нет ни одного ребра, то можно.
[44:42.000 --> 44:50.000]  А если хотя бы одно есть, то нельзя.
[44:50.000 --> 44:59.000]  Если есть хотя бы одно ребро, то нельзя.
[44:59.000 --> 45:10.000]  А если граф пустой, то можно.
[45:10.000 --> 45:15.000]  Дальше есть простой случай.
[45:15.000 --> 45:18.000]  k равно 2.
[45:18.000 --> 45:24.000]  Тут, конечно, можно было бы устроить перебор.
[45:24.000 --> 45:34.000]  Можно устроить перебор, рассмотрев все два в степени n вариантов.
[45:34.000 --> 45:44.000]  Тут я имею в виду, что в графе n вершин.
[45:44.000 --> 45:47.000]  На самом деле этого делать не нужно.
[45:47.000 --> 45:59.000]  Однако этого делать не нужно, и работает жатный алгоритм.
[45:59.000 --> 46:11.000]  Я думаю, что многие понимают, но давайте я нарисую, как он работает.
[46:17.000 --> 46:36.000]  Пусть у нас есть...
[46:36.000 --> 46:41.000]  Пусть у нас есть, например, вот такой граф.
[46:41.000 --> 46:50.000]  Давай его можно раскрасить.
[46:50.000 --> 46:53.000]  Вот этот красим в красный цвет.
[46:53.000 --> 47:02.000]  Например, дальше всех его соседей в синий цвет.
[47:02.000 --> 47:10.000]  Дальше всех соседей соседей в красный цвет.
[47:10.000 --> 47:15.000]  Дальше всех соседей соседей в синий.
[47:15.000 --> 47:19.000]  Ну и так далее. Пока все не закончится.
[47:19.000 --> 47:21.000]  Ну а когда все закончится?
[47:21.000 --> 47:26.000]  Ну, когда мы покрасим компоненту связности.
[47:26.000 --> 47:31.000]  Или может все закончится, когда мы придем в противоречию.
[47:31.000 --> 47:44.000]  Например, если у нас еще есть вот здесь вот две вершины, и они еще друг другу соединены.
[47:44.000 --> 47:53.000]  То дальше по этому правилу мы должны покрасить вот это вот в красный цвет, и вот это тоже в красный цвет.
[47:53.000 --> 48:02.000]  Но после этого получилось, что у нас две соседей вершины соединены ребром.
[48:02.000 --> 48:06.000]  Нет противоречия.
[48:06.000 --> 48:10.000]  Если получилось в противоречию, значит есть нечетный цикл.
[48:10.000 --> 48:12.000]  То есть как работает жадный алгоритм.
[48:12.000 --> 48:26.000]  Значит, красим первую вершину в красный цвет.
[48:26.000 --> 48:32.000]  Всех ее соседей в синий.
[48:32.000 --> 48:42.000]  То дальше всех соседей в красный и так далее.
[48:42.000 --> 48:53.000]  В итоге либо будет покрашена компонента связности,
[48:53.000 --> 49:03.000]  и тогда нужно продолжать красить, когда аналогично красим остальные.
[49:03.000 --> 49:09.000]  Ну, либо в какой-то момент вообще все закончится,
[49:09.000 --> 49:19.000]  либо в какой-то момент появится противоречие.
[49:19.000 --> 49:31.000]  Вот, говорите, появятся две соседние вершины, покрашенные одинаково.
[49:31.000 --> 49:36.000]  Вот, дальше тогда получится.
[49:36.000 --> 49:44.000]  Значит, тогда в графе есть нечетный цикл.
[49:44.000 --> 49:56.000]  Соответственно, тогда он не может быть покрашен на два цвета.
[49:56.000 --> 50:13.000]  В данном случае нечетный цикл из трех вершин, треугольника.
[50:13.000 --> 50:25.000]  Ну, дальше получается, что в любом случае мы каждую вершину красим максимум один раз,
[50:25.000 --> 50:31.000]  и любое ребро анализируем максимум один раз.
[50:31.000 --> 50:49.000]  В ходе алгоритма к каждому ребру происходит не более одного обращения,
[50:49.000 --> 50:57.000]  поэтому алгоритм полиномиальный.
[50:57.000 --> 51:07.000]  Ну вот, получается, что не нужно перебирать, а нужно вот так вот жатно красить, и это быстро сработает.
[51:07.000 --> 51:11.000]  Вот, так же есть сложный случай.
[51:11.000 --> 51:17.000]  Значит, сложный случай.
[51:17.000 --> 51:19.000]  k равно 3.
[51:19.000 --> 51:25.000]  Ну а, соответственно, следующие будут еще более сложными.
[51:25.000 --> 51:38.000]  Так, значит, тогда тут уже жадный алгоритм не будет работать.
[51:38.000 --> 52:03.000]  Почему? Если у новой вершины все соседи одного цвета, то для нее есть два варианта.
[52:03.000 --> 52:07.000]  Вот, и из них не понятно, какое предпочесть.
[52:07.000 --> 52:32.000]  Значит, выбор одного из них может повлиять на возможность завершить раскраску через много шагов.
[52:32.000 --> 52:37.000]  Вот, если бы был просто выбор из двух вариантов, это было бы еще не страшно.
[52:37.000 --> 52:53.000]  Но плохо то, что подобные выборы еще и вложены в друг друга.
[52:53.000 --> 52:58.000]  А что такое жадный алгоритм?
[52:58.000 --> 53:02.000]  Не, ну вообще жадный имеет в виду следующее.
[53:02.000 --> 53:19.000]  Это общий термин, что мы рассматриваем какие-то объекты по очереди, и каждому следующему даем что-то подходящее и более-менее не думаем о будущем.
[53:19.000 --> 53:22.000]  Вот здесь это не будет работать.
[53:22.000 --> 53:26.000]  То есть если мы как бы играем, берем и красим по очереди во что получится.
[53:26.000 --> 53:33.000]  Ну вот, если мы берем и красим по очереди во что получится, то тогда у нас может быть так, что есть два варианта раскраски.
[53:33.000 --> 53:44.000]  И один вариант через много шагов приведет ко другому.
[53:44.000 --> 53:58.000]  А если мы попробуем один, а у нас новый выбор из двух, потом мы там выбрали, у нас новый выбор из двух и так далее.
[53:58.000 --> 54:25.000]  Если у нас возникает для каждой десятой вершины, то в итоге получится два в степени n на 10 вариантов, которые все равно нужно перебирать.
[54:25.000 --> 54:29.000]  То есть такой вот наивно-жадно алгоритм точно не работает.
[54:29.000 --> 54:33.000]  Но на самом деле никакого другого алгоритма тоже неизвестно.
[54:33.000 --> 54:44.000]  Никакого другого алгоритма тоже неизвестно.
[54:44.000 --> 54:53.000]  Ну а если k больше трех, то то же самое. Все еще хуже получится.
[54:53.000 --> 54:57.000]  А если k больше трех является?
[54:57.000 --> 55:02.000]  Нет, в NP это является.
[55:02.000 --> 55:08.000]  То есть перебор там все равно решается.
[55:08.000 --> 55:16.000]  Значит, в NP задача лежит при любом ка.
[55:16.000 --> 55:20.000]  Перебор работает, или можно сказать так.
[55:20.000 --> 55:24.000]  Ну например, если решать перебором, то его можно отнести классом.
[55:24.000 --> 55:26.000]  Ну не совсем так на самом деле.
[55:26.000 --> 55:32.000]  Это именно если такой перебор, что достаточно одного корректного варианта.
[55:32.000 --> 55:37.000]  Мог бы и более сложно, значит, который тоже перебором решается.
[55:37.000 --> 55:52.000]  То есть если раскраска дана, то ее правильность можно проверить.
[55:52.000 --> 55:58.000]  И это как раз то, что у нас вот здесь.
[55:58.000 --> 56:05.000]  S это раскраска. Ой, только я тут неправильно написал.
[56:05.000 --> 56:10.000]  Вот, кстати, возвращаясь к этому определению, не совсем понятно, что такое сертификат.
[56:10.000 --> 56:14.000]  А что угодно. Это просто любая строка, которая как-то интерпретируется.
[56:14.000 --> 56:18.000]  В случае с раскраской сертификат – это сама раскраска.
[56:18.000 --> 56:23.000]  Ну, то есть как таблица функций.
[56:23.000 --> 56:26.000]  Вессон, соответственно, проверяет вот эту.
[56:26.000 --> 56:31.000]  То есть соседние ребра покрашены в разные цвета.
[56:31.000 --> 56:37.000]  Ну и более-менее ясно, что такая проверка – это довольно простая полиномиальная вещь.
[56:37.000 --> 56:45.000]  Вы говорили, для четырех цветов существует раскраска карты.
[56:45.000 --> 56:50.000]  Это именно карта.
[56:50.000 --> 56:54.000]  Карта – это планарный граф.
[56:54.000 --> 57:01.000]  И дальше смотрите, как я здесь нарисовал на плоскости, здесь у меня ребра не пересекаются.
[57:01.000 --> 57:06.000]  Соответственно, любой планарный граф можно раскрасить в четыре цвета.
[57:06.000 --> 57:12.000]  И более того, планарность на самом деле можно проверить за полиномиальное время.
[57:12.000 --> 57:16.000]  Это не так просто, но там есть некоторые алгоритмы.
[57:16.000 --> 57:20.000]  Тем не менее, это не опровергает, потому что мы можем проверить планарность.
[57:20.000 --> 57:25.000]  Если граф планарен, то мы скажем, что граф красится в четыре цвета.
[57:25.000 --> 57:29.000]  Но может быть, граф не планарный, а все равно красится.
[57:29.000 --> 57:37.000]  Поэтому, соответственно, если мы выясним, что граф не планарен, то не знаешь, что он не красится.
[57:40.000 --> 57:43.000]  Так что нет, тут никакого противоречия нет.
[57:43.000 --> 58:01.000]  Еще есть из теории графов классическая картинка.
[58:01.000 --> 58:11.000]  Давайте я ее нарисую.
[58:11.000 --> 58:15.000]  Но я думаю, что вы ее знаете.
[58:15.000 --> 58:19.000]  Она как бы картинка такая.
[58:19.000 --> 58:24.000]  Вот так вот.
[58:24.000 --> 58:35.000]  Дальше вот так вот.
[58:35.000 --> 58:41.000]  Вот так вот.
[58:41.000 --> 58:45.000]  Примерно я так нарисовал.
[58:45.000 --> 59:01.000]  Это кюнисберские мосты.
[59:01.000 --> 59:05.000]  Такая вот картинка.
[59:05.000 --> 59:12.000]  Это приблизительное изображение Средневековой Кюнисберга.
[59:12.000 --> 59:18.000]  Это было четыре части города, две части на двух берегах реки и два острова.
[59:18.000 --> 59:23.000]  И между ними были вот так вот устроены мосты.
[59:24.000 --> 59:33.000]  Задача была такая, что устроить прогулку по городу, пройдя ровно один раз по каждому мосту.
[59:33.000 --> 59:41.000]  Ну и вот Эйлер про эту задачу думал и фактически в результате создал теорию графов.
[59:41.000 --> 59:51.000]  Он сказал, что нельзя так сделать, потому что здесь вот четыре части и с каждой нечетное число мостов.
[59:51.000 --> 59:56.000]  Отсюда три, отсюда три, отсюда три и отсюда пять.
[59:56.000 --> 01:00:02.000]  А когда происходит прогулка, тогда мы заходим, выходим, выходим, выходим.
[01:00:02.000 --> 01:00:09.000]  И каждый раз у нас с парами встречаются эти самые мосты, кроме начала и конца пути.
[01:00:09.000 --> 01:00:15.000]  Из начала пути мы только выходим, в конец пути только приходим.
[01:00:15.000 --> 01:00:22.000]  Ну а здесь у нас не ноль и не два участка, из которых нечетный число мостов, а четыре.
[01:00:22.000 --> 01:00:28.000]  Поэтому тут не может быть такого маршрута.
[01:00:28.000 --> 01:00:34.000]  Это задача Эйлер в пути.
[01:00:36.000 --> 01:00:44.000]  Можно ли пройти по графу?
[01:00:46.000 --> 01:00:56.000]  Посетив ровно один раз каждое ребро.
[01:00:56.000 --> 01:01:01.000]  Вот, ну есть критерии Эйлера.
[01:01:01.000 --> 01:01:09.000]  Есть такой путь.
[01:01:09.000 --> 01:01:19.000]  Есть Эйлеров путь из S в T.
[01:01:19.000 --> 01:01:23.000]  Тогда и только тогда, когда верно две вещи.
[01:01:23.000 --> 01:01:26.000]  Во-первых, граф связан.
[01:01:26.000 --> 01:01:30.000]  То есть какой-то путь есть до любой вершины.
[01:01:30.000 --> 01:01:37.000]  Ну или, по крайней мере, можно разрешать или запрещать еще отдельно изолированная вершина.
[01:01:37.000 --> 01:01:43.000]  Изолированная вершина ни одного ребра не дает, поэтому с одной стороны ее посетить нельзя,
[01:01:43.000 --> 01:01:48.000]  но с другой стороны можно и не требовать.
[01:01:48.000 --> 01:01:58.000]  Такую оговорку сделаем, возможно, за исключением изолированных вершин.
[01:01:58.000 --> 01:02:09.000]  Ну а второе, то есть число ребер, которые входят в вершину,
[01:02:09.000 --> 01:02:19.000]  в степени S и T нечетная, в степени остальных вершин четная.
[01:02:19.000 --> 01:02:27.000]  Но если речь идет не о пути, а о цикле, тогда, соответственно, у всех вершин должна быть четная степень,
[01:02:27.000 --> 01:02:34.000]  потому что цикл приходит туда же, откуда начал, и тогда, соответственно, там тоже будет четная степень.
[01:02:34.000 --> 01:02:39.000]  Один раз вышли, один раз пришли, и, может быть, несколько раз пришли и ушли.
[01:02:47.000 --> 01:03:01.000]  Хорошо, соответственно, обе части критерия могут быть проверены за полномерное время.
[01:03:04.000 --> 01:03:10.000]  Но степень – это вообще довольно простая вещь.
[01:03:10.000 --> 01:03:16.000]  Просто идем по списку ребер и считаем, сколько раз у нас встретилась вершина.
[01:03:16.000 --> 01:03:21.000]  Связанность немножко более сложная, но она примерно похожим образом тоже такой.
[01:03:21.000 --> 01:03:27.000]  Раскраской делается или поиском в глубину, в общем, много есть разных способов.
[01:03:27.000 --> 01:03:33.000]  Так, а еще и задача о гамильтоновом пути.
[01:03:33.000 --> 01:03:39.000]  Или есть вход на задачу Кумиева и Ажора.
[01:03:39.000 --> 01:03:45.000]  Задача о гамильтоновом пути.
[01:03:45.000 --> 01:03:51.000]  Значит, или задача Кумиева и Ажора.
[01:03:52.000 --> 01:04:08.000]  Значит, можно ли пройти по графу, посетив ровно один раз каждую вершину.
[01:04:08.000 --> 01:04:15.000]  Задача Кумиева и Ажора обычно там еще на каждом ребре есть расстояние.
[01:04:15.000 --> 01:04:25.000]  Нужно не просто посетить каждую вершину, а еще и затратить суммарное меньшее расстояние.
[01:04:25.000 --> 01:04:31.000]  Задача Кумиева и Ажора.
[01:04:31.000 --> 01:04:35.000]  Нужно проехать суммарно.
[01:04:35.000 --> 01:04:53.000]  В общем, ребра взвешены, и нужно проехать суммарно как можно меньше расстояния.
[01:04:53.000 --> 01:04:59.000]  Но в принципе, когда я говорю, как можно меньше расстояния, это не совсем вопрос да или нет.
[01:04:59.000 --> 01:05:03.000]  Можно ее превратить в вопрос да или нет, поставив его так.
[01:05:03.000 --> 01:05:07.000]  А можно ли проехать меньше, чем данный порог?
[01:05:07.000 --> 01:05:21.000]  На первый взгляд изменение небольшое.
[01:05:21.000 --> 01:05:37.000]  Однако подобных простых критериев неизвестно.
[01:05:37.000 --> 01:05:47.000]  Ну и как и быстрых алгоритмов проверки гамильтоновости.
[01:05:47.000 --> 01:05:55.000]  Правда, конкретно задача Кумиева и Ажора на практике решается довольно хорошо.
[01:05:55.000 --> 01:06:05.000]  В теории она решается сложно, но есть довольно много таких евристических методов, которые неплохо работают.
[01:06:05.000 --> 01:06:15.000]  Но при этом задача лежит в НП.
[01:06:15.000 --> 01:06:29.000]  Если гамильтонов путь задан, то можно проверить, что он гамильтонов.
[01:06:29.000 --> 01:06:43.000]  В данном случае получается, что х это граф, ну и, возможно, начальная конечная вершина.
[01:06:43.000 --> 01:06:53.000]  То есть перестановка В проверяет гамильтоновость.
[01:06:53.000 --> 01:07:03.000]  Ну и, возможно, начальная конечная вершина.
[01:07:03.000 --> 01:07:13.000]  Х граф, С путь. То есть перестановка В проверяет гамильтоновость.
[01:07:13.000 --> 01:07:33.000]  Ну и оказывается, что подобное небольшое изменение очень часто меняет статус.
[01:07:33.000 --> 01:07:43.000]  Еще один пример приведу. Проверка числа на простоту.
[01:07:43.000 --> 01:07:53.000]  Это задача ИСП. Однако так просто я это уже не смогу объяснить.
[01:07:53.000 --> 01:08:03.000]  Это алгоритм Гравала Каяла-Соксене.
[01:08:03.000 --> 01:08:23.000]  А при этом поиск делителя это уже задача из НП.
[01:08:23.000 --> 01:08:29.000]  Проверка на простоту и то же самое, что проверка на составность, то есть проверка на наличие делителя.
[01:08:29.000 --> 01:08:43.000]  А проверка на наличие малого делителя это уже неизвестно как решать.
[01:08:43.000 --> 01:08:57.000]  Значит быстрого алгоритма неизвестно. Впрочем известен быстрый квантовый алгоритм.
[01:08:57.000 --> 01:09:11.000]  Есть такая модель вычислений квантовые алгоритмы или квантовый компьютер, который как раз умеет раскладывать числа простым множителем.
[01:09:11.000 --> 01:09:17.000]  Его не умеет классический алгоритм.
[01:09:17.000 --> 01:09:27.000]  И на самом деле это ровно то место, где неизвестно МП полноты.
[01:09:27.000 --> 01:09:33.000]  Проверка на наличие малого делителя имеется в виду поиск наименьшего?
[01:09:33.000 --> 01:09:37.000]  Ну смотрите, поиск наименьшего это задача поиска.
[01:09:37.000 --> 01:09:43.000]  Если задача да или нет, то пусть у нас есть число N, есть какой-то порог там T.
[01:09:43.000 --> 01:09:47.000]  И спрашивается, есть ли делитель меньше чем T, но больше чем 1.
[01:09:47.000 --> 01:09:52.000]  И тут поленом будет браться от N, а не от PN.
[01:09:52.000 --> 01:09:54.000]  Нет, а поленом от логорифмов.
[01:09:54.000 --> 01:10:05.000]  Поленом от длины записи, то есть от отбитой длины, то есть от логорифма N.
[01:10:05.000 --> 01:10:14.000]  По пути будет зависеть полиномиально от размера графа в предыдущей задаче по комбинатурному пути?
[01:10:14.000 --> 01:10:17.000]  Сейчас, кто будет зависеть полиномиально?
[01:10:17.000 --> 01:10:19.000]  Количество путей.
[01:10:19.000 --> 01:10:26.000]  В том-то и дело. Если бы их было всего полиномиальное число, их можно было бы перебрать.
[01:10:26.000 --> 01:10:33.000]  Но если там совсем тривиальный оценка, то их будет N-факториал.
[01:10:33.000 --> 01:10:39.000]  Любая перестановка может быть путем.
[01:10:39.000 --> 01:10:47.000]  Если немножко более поумного, то N-факториал даже больше, чем экспонента н в степени N.
[01:10:47.000 --> 01:10:53.000]  Если немножко более умно перебирать, то можно сделать константа в степени N.
[01:10:53.000 --> 01:10:57.000]  Но это экспоненты в любом случае.
[01:10:58.000 --> 01:11:07.000]  Многие задачи...
[01:11:07.000 --> 01:11:11.000]  В любом случае задача из NP.
[01:11:11.000 --> 01:11:14.000]  Я закончу.
[01:11:14.000 --> 01:11:18.000]  Это задача из NP.
[01:11:18.000 --> 01:11:27.000]  Потому что если делитель дан, то можно проверить, что это делитель.
[01:11:31.000 --> 01:11:43.000]  Многие задачи из NP являются самыми сложными.
[01:11:43.000 --> 01:11:46.000]  NP-полными.
[01:11:48.000 --> 01:11:58.000]  Это означает, что все остальные к ним сводятся.
[01:11:58.000 --> 01:12:07.000]  Научившись решать одну NP-полную задачу,
[01:12:07.000 --> 01:12:23.000]  можно решить и все остальные задачи из NP.
[01:12:23.000 --> 01:12:30.000]  Что в точности означает сводимость, мы будем говорить в следующий раз.
[01:12:30.000 --> 01:12:35.000]  Но сама суть очень важна.
[01:12:35.000 --> 01:12:47.000]  Многие из NP-полных задач важны для практики.
[01:12:47.000 --> 01:13:05.000]  Многие ученые пытались, а также не ученые, а любители придумать эффективный алгоритм.
[01:13:05.000 --> 01:13:13.000]  Их решение, однако, ничего не получилось.
[01:13:13.000 --> 01:13:21.000]  За эти 50 лет, которые прошли, и еще несколько лет до этого,
[01:13:21.000 --> 01:13:39.000]  при этом есть такой эффект стеклянного забора.
[01:13:39.000 --> 01:13:59.000]  Во-первых, почти все задачи либо лежат в P, либо NP-полны.
[01:14:00.000 --> 01:14:08.000]  Впрочем, поиск малого делителя – это одно из немногих исключений.
[01:14:08.000 --> 01:14:16.000]  Разложение на множители это называется.
[01:14:16.000 --> 01:14:26.000]  Это одно из немногих исключений.
[01:14:26.000 --> 01:14:33.000]  Непонятно, откуда он возникает.
[01:14:33.000 --> 01:14:47.000]  Небольшое изменение условия может перевести задачу из одного класса в другой.
[01:14:47.000 --> 01:14:51.000]  Это два примера, которые мы видели выше.
[01:14:51.000 --> 01:14:57.000]  Замена двойки на тройку изменила из P на NP-полное.
[01:14:57.000 --> 01:15:15.000]  И замена ребра на общечение всех вершин тоже изменила из P на NP-полное.
[01:15:15.000 --> 01:15:24.000]  Но наличие этого стеклянного забора – это, мне кажется, самый сильный аргумент в пользу того, что P не равно NP.
[01:15:24.000 --> 01:15:48.000]  Если бы было, что P равно NP, то тогда все задачи были бы сразу и в P, и NP-полное.
[01:15:48.000 --> 01:15:51.000]  Все задачи из NP.
[01:15:51.000 --> 01:15:57.000]  Кроме двух исключений, это задача, где всегда ответа, и задача, где всегда ответа нет.
[01:15:57.000 --> 01:16:08.000]  Давайте я эту оговорку сюда все-таки вставлю, кроме пустого множества.
[01:16:08.000 --> 01:16:26.000]  И наоборот, все возможные слова из 0 единицы.
[01:16:26.000 --> 01:16:31.000]  Получается, что мы видим совершенно не такую картину, а что есть отдельно.
[01:16:32.000 --> 01:16:37.000]  Это серьезный доус в пользу того, что на самом деле они не равны.
[01:16:37.000 --> 01:16:40.000]  Но, конечно, это не доказательство.
[01:16:40.000 --> 01:16:45.000]  Это не доказательство, а доказательство – это открытый вопрос.
[01:16:45.000 --> 01:17:05.000]  Оказывается, что за 50 с небольшим лет, которые прошли, за прошедшие полвека задача равны ли P и NP?
[01:17:05.000 --> 01:17:18.000]  NP не была решена.
[01:17:18.000 --> 01:17:32.000]  Однако были найдены препятствия к ее решению.
[01:17:32.000 --> 01:17:52.000]  То есть выяснилось, что целый ряд методов решения заведомо не сработают.
[01:17:52.000 --> 01:18:06.000]  Несмотря на то, что задача не решена, некоторый прогресс был, но прогресс от итоговой точки, можно сказать, мы еще дальше находимся, чем 50 лет назад.
[01:18:06.000 --> 01:18:11.000]  Теперь мы гораздо лучше знаем, как это не нужно доказывать.
[01:18:11.000 --> 01:18:29.000]  Я не смогу подробно рассказать про эти препятствия.
[01:18:29.000 --> 01:18:41.000]  Но идея такая, что доказательство, которое работает, не должно подпасть под некоторые ряд условий.
[01:18:41.000 --> 01:18:50.000]  Соответственно, из-за того, что за задачу дают миллион долларов, многие непрофессионалы начинают ей заниматься.
[01:18:50.000 --> 01:18:56.000]  Им кажется, что они нашли доказательства иногда в ту сторону, иногда в другую сторону.
[01:18:56.000 --> 01:19:01.000]  Есть и экзотический вариант, что это утверждение, которое не зависит от остальных аксиомов.
[01:19:01.000 --> 01:19:04.000]  Иногда и его заявляют.
[01:19:04.000 --> 01:19:17.000]  Но тем не менее, особенно в случае, когда доказано, что они не равны, требуется объяснить, почему доказательство не подпадает ни под один из методов, которые заведомо не сработают.
[01:19:17.000 --> 01:19:23.000]  И как правило, 90% попыток в этом месте отсеиваются.
[01:19:23.000 --> 01:19:36.000]  Оставшиеся 10% иногда занимают научное сообщество на некоторое время, но они довольно быстро находят ошибку.
[01:19:36.000 --> 01:19:52.000]  Пока что регулярно бывает, что очередной любитель или профессионал заявляет, что доказал, что П равно НП или что П не равно НП, вывешивает доказательства,
[01:19:52.000 --> 01:20:00.000]  но потом энтузиасты находят ошибку, и после этого все возвращается на круги свои.
[01:20:01.000 --> 01:20:10.000]  Соответственно, про то, в чем заключаются эти препятствия, я не знаю, может быть, в какой-то момент сделаем еще разговор.
[01:20:10.000 --> 01:20:23.000]  Но ближайшие наши планы – это изучить теорию НП-полноты, доказать в частности, что выше указаны две задачи НП-полные про раскраску и про Демельтонов путь.
[01:20:23.000 --> 01:20:29.000]  Ну и изучить ряд других НП-полных задач. Это на 2-3 лекции следующий наш план.
[01:20:29.000 --> 01:20:34.000]  Я надеюсь, что в следующий раз я смогу приехать, но гарантировать не могу.
[01:20:34.000 --> 01:20:43.000]  В любом случае, спасибо за внимание. Если остались какие-то вопросы, то задавайте. А так, в принципе, время даже закончилось.
[01:20:45.000 --> 01:20:52.000]  А длина проверки правильности сертификата должна быть полиномиальная от длины сертификата или от длины входа?
[01:20:52.000 --> 01:20:57.000]  О, это хороший вопрос. Значит, на самом деле, как я тут написал, это неважно.
[01:20:57.000 --> 01:21:04.000]  Потому что здесь написано, что и сам сертификат по полиномиальной длины, а тогда полином от полином – это полином.
[01:21:04.000 --> 01:21:10.000]  Но в принципе, можно вот эту оговорку не делать, но тогда говорить, что он полиномиален длиной Х обязательно.
[01:21:15.000 --> 01:21:20.000]  То есть проверка совершается полиномиальной длиной от Х, да?
[01:21:20.000 --> 01:21:29.000]  Да, но если сертификат сам полиномиальный длины, то тогда полином от Х и полином от С – это одно и то же. Хотя сами полиномы могут быть разные.
[01:21:30.000 --> 01:21:32.000]  Да, понял, спасибо.
