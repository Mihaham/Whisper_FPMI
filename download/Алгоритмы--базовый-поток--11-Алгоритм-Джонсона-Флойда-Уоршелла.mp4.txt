[00:00.000 --> 00:10.000]  Крошечной пути из одной вершины до всех остальных закончен, перейдем к следующей.
[00:10.000 --> 00:15.000]  Крошечной пути между всеми парами рушен.
[00:15.000 --> 00:19.000]  Продолжаем на этой крошечной пути, но задача у нас теперь немного поменяет.
[00:19.000 --> 00:21.000]  В самом деле, сильно поменяет.
[00:21.000 --> 00:27.000]  В смысле, что у нас получается рисовать не в крошечной пути,
[00:27.000 --> 00:30.000]  а в крошечной пути из конкретной вершины до всех остальных.
[00:30.000 --> 00:32.000]  Она теперь будет интересировать следующую задачу.
[00:32.000 --> 00:38.000]  Вот нам дан граф, и нам нужно посчитать крошечное расстояние между любой паровершин.
[00:38.000 --> 00:40.000]  Между всеми паровершин нам нужно все узнать.
[00:40.000 --> 00:43.000]  Это неважно, либо проще состояние, либо именно пути сами.
[00:43.000 --> 00:49.000]  Что и друго говоря, значит, теперь надо отнастанно додать схема расстояния по всему расстоянию.
[00:49.000 --> 00:56.000]  А матрица расстояния, здесь на единический жильник, будет пройдется крошечное расстояние между крошечными вершинами.
[00:56.000 --> 00:58.000]  Вот, соответственно, пример.
[00:58.000 --> 01:00.000]  Вот где нужна структура графа, то есть здесь.
[01:00.000 --> 01:02.000]  Я хочу быть морейкой крошечной вершины 1 и 3.
[01:02.000 --> 01:04.000]  То есть, крошечная вершина 1 и вершина 3.
[01:04.000 --> 01:06.000]  И идет вот так, 1 и 2.
[01:08.000 --> 01:10.000]  Да, крошечная вершина 1 и 3.
[01:10.000 --> 01:12.000]  Ну, собственно, это ребро 2.
[01:12.000 --> 01:14.000]  Ну, и наоборот, да, если крошечная вершина 1 и вершина 3,
[01:14.000 --> 01:16.000]  идет пути размера 3.
[01:16.000 --> 01:18.000]  Вот такой.
[01:18.000 --> 01:20.000]  Раз, два, и один.
[01:20.000 --> 01:22.000]  Понятно.
[01:22.000 --> 01:24.000]  То есть, вообще говоря, матрица не обязательно симметрична,
[01:24.000 --> 01:26.000]  потому что миограмма будет ориентирована.
[01:26.000 --> 01:28.000]  Да, и понятно дело, что путь из стройки в единицу
[01:28.000 --> 01:30.000]  и из нити стройки, это два раза путь.
[01:30.000 --> 01:32.000]  Ну, потом, давайте, понятно, да?
[01:32.000 --> 01:34.000]  Вот. Ну, тут будем предполагать,
[01:34.000 --> 01:36.000]  тут будем предполагать, чтобы путь
[01:36.000 --> 01:38.000]  ребра касательно веса.
[01:38.000 --> 01:40.000]  То есть, не будем делать отдельного
[01:40.000 --> 01:42.000]  расположения жима
[01:42.000 --> 01:44.000]  для того, что у нас ребра,
[01:44.000 --> 01:46.000]  для этого не обязательно.
[01:46.000 --> 01:48.000]  Ну, давайте, посмотрим.
[01:48.000 --> 01:50.000]  На что в этом случае можно было петь.
[01:50.000 --> 01:52.000]  Ну, смотрите, давайте начнем с самого простого способа.
[01:52.000 --> 01:54.000]  Это, что не любит путь.
[02:02.000 --> 02:04.000]  А, ничего не любит путь.
[02:04.000 --> 02:06.000]  То есть, вдруг, говоря, мы на прошлом планете,
[02:06.000 --> 02:08.000]  мы на прошлом планете и так заправим два алгоритма,
[02:08.000 --> 02:10.000]  алгоритм DX и алгоритм Фордобелла,
[02:10.000 --> 02:12.000]  который умеет строить крошечные пути
[02:12.000 --> 02:14.000]  и за мной вершина до всех кстан.
[02:14.000 --> 02:16.000]  Давайте просто возьмем эти алгоритмы, чтобы мы примерили
[02:16.000 --> 02:18.000]  вот эту задачу, по алгоритму поиска
[02:18.000 --> 02:20.000]  крошечных состояний,
[02:20.000 --> 02:22.000]  и мы будем делать пей для любой пары.
[02:22.000 --> 02:24.000]  Ну, давайте, я один пик, чтобы его
[02:24.000 --> 02:26.000]  пополнять.
[02:28.000 --> 02:30.000]  Сейчас.
[02:30.000 --> 02:32.000]  Здесь такая схватка.
[02:32.000 --> 02:34.000]  То есть, мы рассматриваем два спута.
[02:34.000 --> 02:36.000]  Первый, когда у нас ребра могут быть отрицательные,
[02:36.000 --> 02:38.000]  и в случае, когда у нас ребра
[02:38.000 --> 02:40.000]  отрицательная, а не отрицательная.
[02:40.000 --> 02:42.000]  Ну, соответственно, у нас есть в случае,
[02:42.000 --> 02:44.000]  когда у нас, конечно, нет каких-то порядковых,
[02:44.000 --> 02:46.000]  то есть, разумеется, как
[02:46.000 --> 02:48.000]  у нас есть в случае, когда у нас
[02:48.000 --> 02:50.000]  ребра отрицательные,
[02:50.000 --> 02:52.000]  то есть, конечно, нет каких-то порядковых,
[02:52.000 --> 02:54.000]  то есть, конечно, нет каких-то порядковых,
[02:54.000 --> 02:56.000]  то есть, конечно, нет каких-то порядковых,
[02:56.000 --> 02:58.000]  то есть, конечно, нет каких-то порядковых,
[02:58.000 --> 03:00.000]  то есть, конечно, нет каких-то порядковых,
[03:00.000 --> 03:02.000]  то есть, конечно, нет каких-то порядковых,
[03:02.000 --> 03:04.000]  то есть, конечно, нет каких-то порядковых,
[03:04.000 --> 03:06.000]  то есть, конечно, нет каких-то порядковых,
[03:06.000 --> 03:08.000]  Какой план?
[03:08.000 --> 03:10.000]  Давайте запустим от каждой вершины
[03:10.000 --> 03:12.000]  и, соответственно, просто нам запустим от каждой вершины.
[03:12.000 --> 03:14.000]  Понятно дело, что в этом случае
[03:14.000 --> 03:16.000]  мы найдем следующий путь
[03:16.000 --> 03:18.000]  под любой вершиной до любой другой вершины.
[03:18.000 --> 03:20.000]  Затом, когда у нас ребра будут отрицательные,
[03:20.000 --> 03:22.000]  а нужно листья квадрата отрицать?
[03:24.000 --> 03:26.000]  Наслаждай квадрат, да?
[03:26.000 --> 03:28.000]  Потому что, если у тебя до сих пор был
[03:28.000 --> 03:30.000]  В умножить на Е, а вот, соответственно,
[03:30.000 --> 03:32.000]  если нет порядка отрицательных, соответственно,
[03:32.000 --> 03:34.000]  вы квадрат. А если, например,
[03:34.000 --> 03:36.000]  у тебя будет один, то в долгом случае
[03:36.000 --> 03:38.000]  это чекс.
[03:38.000 --> 03:40.000]  А на дельфине, что оно стоит?
[03:42.000 --> 03:44.000]  Если есть перцатный цикл в поле.
[03:44.000 --> 03:46.000]  Да, найдешь на перцатом циклу.
[03:46.000 --> 03:48.000]  В принципе, если перцатый цикл ребра,
[03:48.000 --> 03:50.000]  то цикло. Здесь, понимаете,
[03:50.000 --> 03:52.000]  на вот перцатом циклу у меня есть перцатый
[03:52.000 --> 03:54.000]  жутко-девачий.
[03:54.000 --> 03:56.000]  Перцатый на ребре, например, не имеет смысла
[03:56.000 --> 03:58.000]  пронолыть. Ну и, по этому случаю,
[03:58.000 --> 04:00.000]  если у меня короткий ребр, понятно, это одна,
[04:00.000 --> 04:02.000]  а цветочный, соответственно, будет четвертый цикл.
[04:02.000 --> 04:04.000]  То есть, может, у меня летает
[04:04.000 --> 04:06.000]  два короткого грамма.
[04:06.000 --> 04:08.000]  Продолжу с абсолютно так же.
[04:08.000 --> 04:10.000]  Третий, четвертый, четвертый.
[04:10.000 --> 04:12.000]  Третий, четвертый, четвертый, четвертый.
[04:12.000 --> 04:14.000]  Ну, а дельфина. Если у меня игрок на трешке,
[04:14.000 --> 04:16.000]  то...
[04:16.000 --> 04:18.000]  В?
[04:18.000 --> 04:20.000]  Б?
[04:22.000 --> 04:24.000]  Вот.
[04:24.000 --> 04:26.000]  Если у меня игрок на трешке,
[04:26.000 --> 04:28.000]  мы используем реализацию
[04:28.000 --> 04:30.000]  на пиратике. Соответственно, реализацию
[04:30.000 --> 04:32.000]  на пиратике это YOLOV.
[04:32.000 --> 04:34.000]  Если я проясню это YOLOV,
[04:34.000 --> 04:36.000]  соответственно, если мы дельфины еще дополнительные
[04:36.000 --> 04:38.000]  частями завершили, то YOLOV2.
[04:38.000 --> 04:40.000]  Ну а в случае, если у нас короткий,
[04:40.000 --> 04:42.000]  сколько?
[04:42.000 --> 04:44.000]  В? Почему?
[04:44.000 --> 04:46.000]  Если
[04:46.000 --> 04:48.000]  не написано, то что?
[04:48.000 --> 04:50.000]  Да, мы реализуем
[04:50.000 --> 04:52.000]  дельфин на массиве.
[04:52.000 --> 04:54.000]  Дельфин на массиве это
[04:54.000 --> 04:56.000]  YOLOV2,
[04:56.000 --> 04:58.000]  ну и еще YOLOV2.
[04:58.000 --> 05:00.000]  Соответственно, если YOLOV2,
[05:00.000 --> 05:02.000]  значит...
[05:02.000 --> 05:04.000]  И вот только с этого мы и начинаем.
[05:04.000 --> 05:06.000]  С этого вот оказания.
[05:06.000 --> 05:08.000]  То есть мы уже умеем решать,
[05:10.000 --> 05:12.000]  здесь мы умеем решать YOLOV2,
[05:12.000 --> 05:14.000]  здесь мы умеем решать YOLOV4,
[05:14.000 --> 05:16.000]  здесь мы умеем YOLOV2, здесь YOLOV2.
[05:16.000 --> 05:18.000]  Ну что ж, давайте посмотрим
[05:18.000 --> 05:20.000]  суть этого и
[05:20.000 --> 05:22.000]  четвертее, если
[05:22.000 --> 05:24.000]  можно улучшить.
[05:24.000 --> 05:26.000]  Давайте
[05:26.000 --> 05:28.000]  начнем собираться.
[05:28.000 --> 05:30.000]  Начнем с алгоритма
[05:30.000 --> 05:32.000]  Лойда Уоршула.
[05:32.000 --> 05:34.000]  Начнем с алгоритма Лойда Уоршула.
[05:34.000 --> 05:36.000]  Значит,
[05:36.000 --> 05:38.000]  идем к следующему подтверждению.
[05:38.000 --> 05:40.000]  Алгоритм Лойда Уоршула
[05:40.000 --> 05:42.000]  это динамический алгоритм.
[05:42.000 --> 05:44.000]  Будем решать динамическое
[05:44.000 --> 05:46.000]  программирование,
[05:46.000 --> 05:48.000]  постепенно решая все более
[05:48.000 --> 05:50.000]  большие подзадачи.
[05:50.000 --> 05:52.000]  Какие у нас будут подзадачи?
[05:52.000 --> 05:54.000]  Пусть D, A,
[05:54.000 --> 05:56.000]  в сыгре это кратчевое
[05:56.000 --> 05:58.000]  предстояние от укса до игрока
[05:58.000 --> 06:00.000]  вдоль пути, в котором в каждом
[06:00.000 --> 06:02.000]  предпочтении можно использовать
[06:02.000 --> 06:04.000]  вершину с номерами шикта.
[06:04.000 --> 06:06.000]  Что такое декабристый?
[06:06.000 --> 06:08.000]  Декабристый — это кратчевое
[06:08.000 --> 06:10.000]  предстояние от укса до игрока,
[06:10.000 --> 06:12.000]  в котором в качестве промежуточного
[06:12.000 --> 06:14.000]  включения я могу сложить только
[06:14.000 --> 06:16.000]  вершину с номерами 0, 1, 2, 3,
[06:16.000 --> 06:18.000]  и так далее, кажется, нет.
[06:18.000 --> 06:20.000]  То есть не весь граф, а вот только
[06:20.000 --> 06:22.000]  первый вершин.
[06:22.000 --> 06:24.000]  Если для Чмура D2 — 4 и 1,
[06:24.000 --> 06:26.000]  а для D2 значи هедичный
[06:26.000 --> 06:40.000]  прочежende хрути,
[06:40.000 --> 06:40.840]  то dictionary
[06:40.840 --> 06:44.360]  может penisaleх tysчilik tracks
[06:44.360 --> 06:46.160]  иדainted для хрути largest number
[06:46.160 --> 06:48.240]  и aging.
[06:48.240 --> 06:51.240]  Поэтому, соответственно, равно бесконечности.
[06:51.240 --> 06:54.240]  Теперь давайте я порешу использовать
[06:54.240 --> 06:58.240]  а не только вершину 0 и 1, но еще и вершину 2.
[06:58.240 --> 07:01.240]  В этом случае у меня появляется эта вершина.
[07:01.240 --> 07:04.240]  Я еще раз упомяну, но я порешу использовать вершину.
[07:04.240 --> 07:07.240]  То есть появляется вершина 0 и 1.
[07:07.240 --> 07:11.240]  Даже я теперь продолжаю добавить еще одну вершину.
[07:11.240 --> 07:15.240]  То есть я продолжаю использовать вершину 0, а вершину 1.
[07:15.240 --> 07:18.240]  То есть теперь пришла вершина 0 и 1.
[07:18.240 --> 07:21.240]  Ну и поняли, что можно устроить более простой путь.
[07:21.240 --> 07:24.240]  Вот такой, в программе.
[07:24.240 --> 07:27.240]  Все понятно, да?
[07:27.240 --> 07:30.240]  Ну и только на все, что мы делали в программе.
[07:30.240 --> 07:34.240]  Делали в программе в том, что у меня есть какие-то подзадачи.
[07:34.240 --> 07:37.240]  И вот на основе этих подзадач я должен научиться решать
[07:37.240 --> 07:39.240]  какие-то большие задачи.
[07:39.240 --> 07:42.240]  В частности, я должен вспомнить шматок CD2,
[07:42.240 --> 07:44.240]  я должен вспомнить шматок CD3,
[07:44.240 --> 07:47.240]  я должен вспомнить шматок CD4, и так далее.
[07:47.240 --> 07:50.240]  Давайте разбираться, как мы будем делать.
[07:50.240 --> 07:53.240]  Ну, мы будем разбираться на яхту.
[07:53.240 --> 07:56.240]  Первый простой вопрос.
[07:56.240 --> 07:59.240]  Собственно, чему равно...
[07:59.240 --> 08:02.240]  Как называется?
[08:02.240 --> 08:05.240]  База динамитов.
[08:05.240 --> 08:08.240]  В общем, все мы узнаем.
[08:08.240 --> 08:11.240]  Когда я так что-то делаю, я не могу условно людей решать.
[08:11.240 --> 08:14.240]  Смором, я как-то матки сделаю.
[08:22.240 --> 08:27.240]  Да, можно сфотографить смартфон, согласен?
[08:34.240 --> 08:37.240]  Почему? Потому что...
[08:37.240 --> 08:40.240]  Если это бронежитечные вершины,
[08:40.240 --> 08:43.240]  то это значит, что любой путь,
[08:43.240 --> 08:46.240]  любой эксирик, путь,
[08:46.240 --> 08:49.240]  который я динамитовал,
[08:49.240 --> 08:52.240]  это просто абсцентрация.
[08:52.240 --> 08:55.240]  Приброй.
[08:55.240 --> 08:58.240]  Приброй.
[08:58.240 --> 09:01.240]  Пульти, которые прячут эту вершину, ничего не входит.
[09:01.240 --> 09:04.240]  Понятно?
[09:04.240 --> 09:07.240]  Начальник матрицы.
[09:07.240 --> 09:10.240]  Идем дальше.
[09:10.240 --> 09:13.240]  А эту переходу
[09:13.240 --> 09:16.240]  в следующем видео.
[09:16.240 --> 09:19.240]  Вот тут у меня идентифицированная матрица.
[09:19.240 --> 09:22.240]  1,5,0,0,0.
[09:22.240 --> 09:25.240]  Я как-то все поспорю в течение
[09:25.240 --> 09:28.240]  1,5,0,0,0.
[09:28.240 --> 09:31.240]  Ну и где?
[09:31.240 --> 09:34.240]  Вопрос, который написан на слайд.
[09:34.240 --> 09:37.240]  Чему работают эти значения?
[09:37.240 --> 09:40.240]  Ежели не известны,
[09:40.240 --> 09:43.240]  то большинство пультики с эксириками,
[09:43.240 --> 09:46.240]  которые проходят по всему дюжинам,
[09:46.240 --> 09:49.240]  не пропустят эту вершину как?
[09:49.240 --> 09:52.240]  Вот допустим, вот мне один это известный,
[09:52.240 --> 09:55.240]  когда они просят вот эту штуку для мне зверя,
[09:55.240 --> 09:58.240]  то есть вот тут на M&G
[09:58.240 --> 10:01.240]  вершины на M&G не встречаются.
[10:01.240 --> 10:04.240]  Почему тогда M&G?
[10:04.240 --> 10:07.240]  Ну нет,
[10:07.240 --> 10:10.240]  там минимум,
[10:10.240 --> 10:13.240]  там минимум,
[10:13.240 --> 10:16.240]  там минимум,
[10:16.240 --> 10:19.240]  там минимум,
[10:19.240 --> 10:22.240]  там минимум,
[10:22.240 --> 10:25.240] 👍
[10:25.240 --> 10:28.240]  its power...
[10:34.240 --> 10:37.240]  Согласны?
[10:37.240 --> 10:50.240]  Потому что вот это пультино
[10:50.240 --> 10:58.240]  то он точно сразу налетает в секрет. В этом случае мы точно знаем, как найти следующее.
[10:58.240 --> 11:06.240]  Ну и второе круче. Обратно. Ну, если я перелезу к нему, то сразу...
[11:06.240 --> 11:14.240]  А. В этом случае А. И в случае В обратно.
[11:14.240 --> 11:20.240]  Что если у меня вершина K гарантированно принадлежит этой пути? То есть мне откуда-то известно,
[11:20.240 --> 11:26.240]  что хранящиеся языксовые, которые проходят по всем вершинам самерами с 1,
[11:26.240 --> 11:34.240]  обязательно проходят через вершину K. Почему тогда раздают предыдущий путь вот такой?
[11:34.240 --> 11:48.240]  Да, смотрите, давайте...
[11:48.240 --> 11:54.240]  Это не верно, что путь...
[11:54.240 --> 12:00.240]  Есть вершина X, есть вершина Y. И есть ответ на путь.
[12:00.240 --> 12:06.240]  Я просто на вершину Y на пути встречаю смыта.
[12:06.240 --> 12:10.240]  Что мне нужно сделать?
[12:10.240 --> 12:14.240]  Вот это? То есть в этом состоянии понимаешь, что это обстоятельство? Согласен?
[12:14.240 --> 12:18.240]  А что я могу делать в этом состоянии?
[12:34.240 --> 12:40.240]  Понятно? То есть вот тут гарантированно не встречается вершина K.
[12:40.240 --> 12:46.240]  Но мне не смысл делать вот этот путь.
[12:46.240 --> 12:50.240]  Плюс...
[12:50.240 --> 12:54.240]  Да, пусть будет так...
[12:54.240 --> 12:58.240]  Ну вот.
[12:58.240 --> 13:06.240]  То есть у меня либо этот путь проходит через вершину K, либо он не проходит через вершину K.
[13:06.240 --> 13:10.240]  То есть в первом случае я получаю вот эту ситуацию, а в втором есть вот эту ситуацию.
[13:10.240 --> 13:14.240]  Да.
[13:14.240 --> 13:20.240]  Так вот, как раз в этом суть. Если он не проходит, то соответственно вот этот путь.
[13:20.240 --> 13:22.240]  Если он проходит через вот этот путь.
[13:22.240 --> 13:26.240]  Но мы действительно не знаем, а проходит он или нет. Что делать?
[13:26.240 --> 13:30.240]  Ну просто взять вершину K. Согласен?
[13:30.240 --> 13:34.240]  То есть чему равен?
[13:34.240 --> 13:36.240]  Мы не видим людей, которые не влечи.
[13:36.240 --> 13:40.240]  Мы рассматриваем не имеющий путь, который не проходит через K.
[13:40.240 --> 13:42.240]  И не имеющий путь, который проходит через K.
[13:42.240 --> 13:44.240]  И среди них рассматриваем минимальный путь.
[13:44.240 --> 13:48.240]  Все.
[14:00.240 --> 14:02.240]  Ну вот.
[14:02.240 --> 14:04.240]  То есть минимальный путь, который не проходит через K.
[14:04.240 --> 14:06.240]  И минимальный путь, который проходит через K.
[14:06.240 --> 14:08.240]  Все.
[14:08.240 --> 14:10.240]  Вот формула пересета.
[14:10.240 --> 14:14.240]  Вот собственно формула пересета в эксплуате на K.
[14:14.240 --> 14:16.240]  Ну по сути все.
[14:16.240 --> 14:18.240]  Осталось просто забраться.
[14:18.240 --> 14:24.240]  Вот он и я.
[14:24.240 --> 14:28.240]  Значит у нас есть примерный массив.
[14:28.240 --> 14:32.240]  Ну по нулевой поэксплуатации мы соответственно
[14:32.240 --> 14:38.240]  в первой поэксплуатации мы сохраним вот этот верхний индекс.
[14:38.240 --> 14:42.240]  По второй поэксплуатации мы сохранимся с начала.
[14:42.240 --> 14:46.240]  То есть изначально у нас нулевая поэксплуатация.
[14:46.240 --> 14:48.240]  Просто складывается, работает все предыдущим.
[14:48.240 --> 14:50.240]  Ну и дальше просто тянутся туда.
[14:50.240 --> 14:54.240]  Пока мы перебираем все возможные массы.
[14:54.240 --> 14:56.240]  Все поляки тростания.
[14:56.240 --> 14:58.240]  Мы даже просто заполняем все элементы.
[14:58.240 --> 15:00.240]  Как в первой массе.
[15:00.240 --> 15:02.240]  Перебираем как в первой массе.
[15:02.240 --> 15:04.240]  И соответственно сделаем.
[15:04.240 --> 15:06.240]  То есть это ассирик, минимум ассирик.
[15:06.240 --> 15:08.240]  И декат амиссатор, и декат аминь.
[15:08.240 --> 15:10.240]  Все.
[15:10.240 --> 15:12.240]  Окей?
[15:12.240 --> 15:14.240]  Отличное замечание.
[15:14.240 --> 15:16.240]  Так.
[15:16.240 --> 15:20.240]  Вот это, например, сложность вот этой реализации.
[15:20.240 --> 15:22.240]  Сложность, это в Америке, не таково.
[15:22.240 --> 15:24.240]  Понятное дело.
[15:24.240 --> 15:26.240]  Вот районный цикл.
[15:26.240 --> 15:28.240]  И на каждый районный цикл мы делаем плотную единицу интеграции.
[15:28.240 --> 15:30.240]  Ну и парик.
[15:30.240 --> 15:32.240]  Важно замечать.
[15:32.240 --> 15:38.240]  Я просто понимаю, что меняется положение цикла вот так.
[15:38.240 --> 15:40.240]  Нельзя.
[15:40.240 --> 15:44.240]  Потому что для каждого цикла мы почищаем всю материю.
[15:44.240 --> 15:46.240]  Мы почищаем всю материю целиком.
[15:46.240 --> 15:48.240]  То есть нельзя.
[15:48.240 --> 15:50.240]  Для каждого цикла мы почищаем всю материю.
[15:50.240 --> 15:52.240]  Значение материи цикла.
[15:52.240 --> 15:54.240]  Ну и декат аминь.
[15:54.240 --> 15:56.240]  То есть у меня просчет материи цикла.
[15:56.240 --> 16:00.240]  Просто у меня все элементы материи цикла уже обучены.
[16:00.240 --> 16:02.240]  Окей?
[16:02.240 --> 16:04.240]  И цикл обменяем, и цикл обменяем.
[16:04.240 --> 16:08.240]  То есть отличное замечание получалось в первый раз.
[16:08.240 --> 16:10.240]  Так.
[16:10.240 --> 16:12.240]  Так, версия 2.0.
[16:12.240 --> 16:16.240]  Ну смотрите, опять говоря, зачем нам хранить все в охордном адресе?
[16:16.240 --> 16:24.240]  Ну смотрите, мне на каждый раз нужна текущая материя, которая есть в шаге.
[16:24.240 --> 16:26.240]  Да.
[16:26.240 --> 16:30.240]  То есть предыдущая материя и текущая, которая есть в шаге.
[16:30.240 --> 16:32.240]  Да, на самом деле хранить 2 материи в шаге.
[16:32.240 --> 16:36.240]  Ну 2 материи в шаге.
[16:36.240 --> 16:38.240]  Ну нет, 2 материи в пусто.
[16:38.240 --> 16:40.240]  Материю с предыдущим шагом.
[16:40.240 --> 16:42.240]  Декат.
[16:42.240 --> 16:44.240]  И материю с предыдущим шагом.
[16:44.240 --> 16:46.240]  Каппус 1.
[16:46.240 --> 16:48.240]  Вот.
[16:48.240 --> 16:50.240]  Собственно.
[16:50.240 --> 16:52.240]  Вот, значит хранить материю.
[16:52.240 --> 16:54.240]  Сидел полуто в ревью.
[16:54.240 --> 16:56.240]  Вот, изначально мы фиксилизируем материю со всего сфермера.
[16:56.240 --> 16:58.240]  Вот, и да.
[16:58.240 --> 17:00.240]  На кафе локал выключил ревью с 1.
[17:00.240 --> 17:02.240]  Свапаем старую материю.
[17:02.240 --> 17:04.240]  То есть теперь у нас новая материя, которая прожила новую, стала старой.
[17:04.240 --> 17:08.240]  С новой материей мы теперь перезаписываем 2.
[17:08.240 --> 17:10.240]  Ну вот.
[17:10.240 --> 17:12.240]  То есть теперь мы храним 2 материи.
[17:12.240 --> 17:14.240]  Теперь храним всего 2 материи.
[17:14.240 --> 17:16.240]  И есть возможность уменьшить, может запарить, уменьшить полугодатную.
[17:16.240 --> 17:18.240]  Нормально?
[17:18.240 --> 17:20.240]  Да.
[17:20.240 --> 17:22.240]  Ну а может на самом деле еще сильнее улучшиться.
[17:22.240 --> 17:24.240]  На самом деле можно даже 2 материи.
[17:24.240 --> 17:26.240]  На экране есть всего лишь 1 материю.
[17:26.240 --> 17:28.240]  Я же не переносил.
[17:28.240 --> 17:30.240]  Вот.
[17:30.240 --> 17:32.240]  Смотрите.
[17:32.240 --> 17:34.240]  Тут в экране, где я делал тигер,
[17:34.240 --> 17:36.240]  вот этот тигит.
[17:36.240 --> 17:38.240]  Это означает, что в данной игре
[17:38.240 --> 17:40.240]  не приносит каких-то дополнительных
[17:40.240 --> 17:42.240]  поделений памяти.
[17:42.240 --> 17:44.240]  В том смысле, что если у вас есть
[17:44.240 --> 17:46.240]  на руках матрица весов,
[17:46.240 --> 17:48.240]  то вы можете просто матрицу весов обновлять.
[17:48.240 --> 17:50.240]  То есть работа угрея inplace.
[17:50.240 --> 17:52.240]  Понятно?
[17:52.240 --> 17:54.240]  То есть это inplace-магерей.
[17:54.240 --> 17:56.240]  Но если на самом деле можно сочинить материю,
[17:56.240 --> 17:58.240]  посчитать, вот это вывлечение
[17:58.240 --> 18:00.240]  все по материи.
[18:00.240 --> 18:02.240]  Понятно?
[18:02.240 --> 18:04.240]  То есть можно не разделять.
[18:04.240 --> 18:06.240]  Старую материю, вторую материю обрать.
[18:06.240 --> 18:08.240]  Диэс и игреки подсчитывают минимум без Диэс и игреки.
[18:08.240 --> 18:10.240]  Диэс да, плюс Диэс и игреки.
[18:10.240 --> 18:12.240]  Вот. Отличный опор.
[18:12.240 --> 18:14.240]  Почему опор?
[18:14.240 --> 18:16.240]  То есть, вроде, как вы сказали знаки,
[18:16.240 --> 18:18.240]  вот так вы увидите.
[18:18.240 --> 18:20.240]  Давайте перепишем.
[18:20.240 --> 18:22.240]  Отсчитываем.
[18:22.240 --> 18:24.240]  Вот, есть материя к ДК плюс один.
[18:24.240 --> 18:26.240]  И ее элементы циклеры.
[18:26.240 --> 18:28.240]  Ну, подсчитываем.
[18:28.240 --> 18:30.240]  Подсчитываем.
[18:30.240 --> 18:32.240]  К ДК циклеры.
[18:36.240 --> 18:38.240]  И...
[18:38.240 --> 18:40.240]  К ДК скат.
[18:42.240 --> 18:44.240]  Плюс ДК.
[18:46.240 --> 18:48.240]  Позже.
[18:48.240 --> 18:50.240]  Вот.
[18:50.240 --> 18:52.240]  То есть у нас получается такая формула.
[18:52.240 --> 18:54.240]  Но если мы подсчитываем матрицу ДК плюс один,
[18:54.240 --> 18:56.240]  на основе матрицы ДК плюс один,
[18:56.240 --> 18:58.240]  то вы понимаете, что мы, вроде как, заглядываем в будущее.
[18:58.240 --> 19:00.240]  Вот. И выстекает интересный вопрос.
[19:00.240 --> 19:02.240]  А не приведет ли это к чему-то плохому?
[19:02.240 --> 19:04.240]  В общем, ответ заключается в том, что нет, не приведет.
[19:04.240 --> 19:06.240]  Давайте рассуждать, почему.
[19:06.240 --> 19:08.240]  Ну, смотрите.
[19:08.240 --> 19:10.240]  Смотрите.
[19:10.240 --> 19:12.240]  В чем может быть проблема?
[19:12.240 --> 19:14.240]  Проблема может быть здесь.
[19:14.240 --> 19:16.240]  То есть, что? Вот представьте.
[19:16.240 --> 19:18.240]  Не ДК.
[19:18.240 --> 19:20.240]  А ДК плюс один.
[19:26.240 --> 19:28.240]  ДК плюс один.
[19:28.240 --> 19:30.240]  Проблема.
[19:38.240 --> 19:40.240]  У меня все нормально расстояние.
[19:40.240 --> 19:42.240]  У меня было 30 к.
[19:42.240 --> 19:44.240]  Почему?
[19:44.240 --> 19:46.240]  Нет, это минимальное расстояние в 30 к.
[19:46.240 --> 19:48.240]  Тем качеством, что я могу использовать вот эту вершину.
[19:48.240 --> 19:50.240]  0 и 1, 2, так и так.
[19:50.240 --> 19:52.240]  То есть это не прямо минимальное расстояние.
[19:52.240 --> 19:54.240]  Потому что на минимальном пути
[19:54.240 --> 19:56.240]  могут содержаться вершины.
[19:56.240 --> 20:10.240]  Что? Вот, смотрите, естественно, что тут на фейсбук подают, а что там, опять-таки, из вершины x, но это вершина k,
[20:10.240 --> 20:15.240]  то, что работает во всех вершинах, оно должно быть между правым и фейсбуком k.
[20:15.240 --> 20:19.240]  Вопрос. А может быть, у тебя есть вершина k? Почему?
[20:20.240 --> 20:21.240]  Что?
[20:25.240 --> 20:26.240]  Завершили.
[20:26.240 --> 20:33.240]  Ну, тут другое прикол в том, что если у нас есть вершина k, то это значит, что работает.
[20:33.240 --> 20:37.240]  Почему у нас такой путь оказался лучше, чем общий путь вот такой?
[20:37.240 --> 20:39.240]  Значит, это отрицатель концепции. Согласны?
[20:39.240 --> 20:43.240]  А когда у нас есть отрицатель концепции, то задачу в принципе некорректно поставлено.
[20:43.240 --> 20:48.240]  Поэтому понятно, что я не сказал, что у нас есть отрицатель концепции, но мы предполагаем, что отрицатель концепции нет, окей?
[20:48.240 --> 20:51.240]  То есть отрицатель не вероятно есть, но отрицатель концепции нет.
[20:51.240 --> 20:54.240]  Так как у нас нет отрицатель концепции, то такого в принципе не может быть.
[20:54.240 --> 20:56.240]  Потому что иначе это было бы отрицатель концепции.
[20:56.240 --> 20:58.240]  Все. Дальше пять минут ухмель.
[20:58.240 --> 21:00.240]  Вот это конкурсик.
[21:00.240 --> 21:01.240]  Держи на камеру.
[21:01.240 --> 21:03.240]  Мой отрицатель концепции.
[21:06.240 --> 21:07.240]  Вот так.
[21:07.240 --> 21:17.240]  То есть на самом деле, вот тут я никогда не загадываю будущее.
[21:17.240 --> 21:25.240]  Вот тут, в качестве первого слога, я всегда использую перечну, которая почитана на предыдущем шаге. Понятно?
[21:25.240 --> 21:31.240]  Ну и то же самое можно создать и, как вы понимаете, в другом вопросе.
[21:37.240 --> 21:39.240]  Понятно?
[21:43.240 --> 21:47.240]  То есть на самом деле, даже если вы состояние новой матрицы,
[21:47.240 --> 21:51.240]  числяя это по состоянию этой матрицы, то ничего плохого не произойдет,
[21:51.240 --> 21:57.240]  потому что состояние новой матрицы в точке xk точно совпадает с состоянием старой матрицы в точке xk. Понятно?
[21:57.240 --> 21:59.240]  Нормально?
[21:59.240 --> 22:01.240]  Все понятно.
[22:01.240 --> 22:03.240]  Полностью корректируем.
[22:03.240 --> 22:08.240]  Так, ну как можно, собственно, вот и проще.
[22:08.240 --> 22:10.240]  Пояснение.
[22:16.240 --> 22:19.240]  Ну и давайте наконец-то обсудим, что делается с отрицательными циклами.
[22:19.240 --> 22:25.240]  Мы тут сделали естественное предположение, что цикла в отрицательном весе нет,
[22:25.240 --> 22:30.240]  поэтому, соответственно, все веса, все расстояния и так далее вычисляют скорейки.
[22:30.240 --> 22:34.240]  Но понятное дело, что на практике это не всегда так.
[22:34.240 --> 22:38.240]  Попадают циклы, в которых есть отрицательные циклы, и вообще говоря, непонятно, что делать.
[22:38.240 --> 22:44.240]  Давайте хотя бы как минимум научимся определять, есть ли у нас в графе цикла отрицательный вес или нет,
[22:44.240 --> 22:50.240]  но, собственно, достижим ли отрицательный цикл из вершины и недостижим, это уже обсудительный семинар.
[22:50.240 --> 22:54.240]  В общем, давайте попробуем понять, как в алгоритме Порда-Белмана.
[22:54.240 --> 22:59.240]  В алгоритме Порда-Белмана же тоже плохо работает, в случае, у нас есть отрицательные циклы.
[22:59.240 --> 23:03.240]  При этом Порда-Белмана позволяет детектировать эти самые отрицательные циклы.
[23:03.240 --> 23:07.240]  Но, собственно, вопрос, а может алгоритм Флойда тоже сам понимать, что он нашел отрицательные цифры?
[23:07.240 --> 23:12.240]  И с таким образом сообщить, что на самом деле то, что он нашел, это некорректно.
[23:14.240 --> 23:17.240]  Ну, вопрос вам на самом деле.
[23:17.240 --> 23:21.240]  Понимаете ли вы, как в алгоритме Флойда, допустим, он обработал алгоритм Флойда,
[23:21.240 --> 23:26.240]  вот как глядя на матрицу понять, а вот в моем графе, что где отрицательные циклы?
[23:29.240 --> 23:34.240]  Что осталось, если dx здесь?
[23:39.240 --> 23:40.240]  Отлично.
[23:40.240 --> 23:46.240]  Да, Флойда, у нас обработал герметит. Давайте посмотрим, находим dx.
[23:46.240 --> 23:49.240]  Что такое dx? По смыслу.
[23:52.240 --> 23:56.240]  Да, по смыслу dx это просто состояние x вершины x вершины x.
[23:56.240 --> 23:59.240]  Молчанию изначально он равен нулю.
[23:59.240 --> 24:03.240]  А что происходит, если у меня x лежит на отрицательном цикле?
[24:03.240 --> 24:09.240]  Да, в этом случае у меня найдется отрицательный путь из x и x,
[24:09.240 --> 24:12.240]  который будет лучше, чем оставаться на месте.
[24:12.240 --> 24:17.240]  Если мне лучше не оставаться на месте, а двигаться по какому-то пути к себе,
[24:17.240 --> 24:20.240]  то это означает, что у меня есть отрицательный цикл.
[24:20.240 --> 24:25.240]  Поэтому, собственно, председания отрицательного цикла сводятся просто потому, что мы и в конце.
[24:25.240 --> 24:31.240]  Если диагонально встретим ассоциативное отрицательное значение,
[24:31.240 --> 24:34.240]  то в индексовом ферме у нас есть отрицательный цикл.
[24:34.240 --> 24:35.240]  Все, понятно?
[24:35.240 --> 24:40.240]  Существует колодак флойд и лошадь тоже умеет определять и анализировать
[24:40.240 --> 24:44.240]  наличие или отсутствие цикла отрицательного веса.
[24:44.240 --> 24:47.240]  Ну и давайте заполним эту таблицу.
[24:47.240 --> 24:50.240]  У нас теперь появится колдак флойда.
[24:55.240 --> 24:56.240]  Флойда.
[24:58.240 --> 25:00.240]  Значит, за сколько он работает?
[25:00.240 --> 25:04.240]  Ну, наверное, работает в зимой и лет.
[25:04.240 --> 25:07.240]  Прижимаем таблицу.
[25:07.240 --> 25:13.240]  То есть мы просто на ассоциативном отрицательном циклу проходим по количеству трассы равномерно.
[25:13.240 --> 25:15.240]  И мы даже исполняем матрису равномерного квадрата.
[25:15.240 --> 25:16.240]  Ну, естественно.
[25:16.240 --> 25:18.240]  Поучили руку.
[25:18.240 --> 25:20.240]  Поучили руку.
[25:20.240 --> 25:22.240]  Руку.
[25:24.240 --> 25:26.240]  Смотри, нужно было улучшить.
[25:26.240 --> 25:28.240]  Ну, как?
[25:28.240 --> 25:30.240]  Флойд ничего не улучшил.
[25:30.240 --> 25:31.240]  А лошадь?
[25:31.240 --> 25:33.240]  Флойд?
[25:33.240 --> 25:35.240]  А симпозицию-то улучшил.
[25:35.240 --> 25:38.240]  Учились девятьдесят подвесно.
[25:38.240 --> 25:40.240]  Да?
[25:40.240 --> 25:44.240]  Получил куба, можно, но в случае нет церкви.
[25:45.240 --> 25:46.240]  Нужно вопрос.
[25:46.240 --> 25:47.240]  Да.
[25:47.240 --> 25:50.240]  А почему не включили отрицательного цикла?
[25:50.240 --> 25:51.240]  Конечно.
[25:51.240 --> 25:53.240]  Стоп.
[25:55.240 --> 25:57.240]  Нет, я тебе говорю, что он работает некорректно,
[25:57.240 --> 26:01.240]  потому что, смотрите, при задаче определения, короче, путей,
[26:01.240 --> 26:05.240]  в случае налития отрицательного цикла с этого места, они корректно ставят.
[26:05.240 --> 26:12.240]  Поэтому, что найдет цикл, что найдет Флойда после своей работы, в принципе, непонятно.
[26:12.240 --> 26:18.240]  Потому что с такого понятия, некорректнейший путь, в случае наличия цикла отрицательного места, нет.
[26:18.240 --> 26:24.240]  Но что можно вычислять, это то, что Флойд находит какие-то пути.
[26:24.240 --> 26:26.240]  Вот какие-то пути он находит.
[26:26.240 --> 26:31.240]  Соответственно, если мы находим в пути, решим, на самом, себя, отрицательного места,
[26:31.240 --> 26:36.240]  то цикл отрицательного места есть и значит, что мы не можем в целом доверять этому циклу.
[26:36.240 --> 26:38.240]  На самом деле, это не всем правда.
[26:38.240 --> 26:41.240]  Потому что, если у нас в графе есть цикл отрицательного места, ну, то есть,
[26:41.240 --> 26:45.240]  представьте это при стволу. У меня есть цикл отрицательного места.
[26:47.240 --> 26:55.240]  Понятное дело, что если у меня есть путь, который проходит через этот цикл,
[26:55.240 --> 26:58.240]  то соответственно, расстояние отрицата эрита у меня на этих корректных.
[26:58.240 --> 27:03.240]  Но представьте, что у меня есть путь. Точнее, что у меня есть диагональный Z.
[27:03.240 --> 27:11.240]  Любой путь между 0 и z никогда не задевается от отрицательных сил.
[27:11.240 --> 27:15.240]  Вот на данный случай я могу гарантировать, что путь между 0 и z не на этом тарелке.
[27:15.240 --> 27:17.240]  Но вот, собственно, она и есть.
[27:17.240 --> 27:23.240]  Слева может быть пара их сил, между которыми можно отрицать отрицательные силы.
[27:23.240 --> 27:26.240]  По-моему, задача должна быть такая.
[27:26.240 --> 27:28.240]  Ну, на себя как-то так.
[27:28.240 --> 27:30.240]  Вот.
[27:30.240 --> 27:32.240]  Еще вопрос.
[27:34.240 --> 27:36.240]  Нормально?
[27:39.240 --> 27:41.240]  Ну да, собственно.
[27:41.240 --> 27:44.240]  Продолжительный путь такой, что, вообще говоря, путь почти везде у нас.
[27:44.240 --> 27:46.240]  Ну, как бы я не укушил азотовку, да?
[27:46.240 --> 27:47.240]  По-моему, где угодно.
[27:47.240 --> 27:50.240]  То есть, единственное место, где мы все это делали,
[27:50.240 --> 27:54.240]  доверяясь классическому интервейсу, это вот здесь.
[27:54.240 --> 27:56.240]  Но скоро мы это исправим.
[27:56.240 --> 28:00.240]  Ну, точнее, не здесь, а вот здесь.
[28:00.240 --> 28:02.240]  Значит, поговорим про...
[28:04.240 --> 28:08.240]  Смотрите, вообще говоря, мы рисовали эту таблицу.
[28:10.240 --> 28:12.240]  Вот эту.
[28:12.240 --> 28:14.240]  Что мы видим?
[28:14.240 --> 28:17.240]  В принципе, что DXR, вообще говоря, не так плохо.
[28:17.240 --> 28:20.240]  Потому что, смотри, всего у меня пара вершин сколько-то.
[28:20.240 --> 28:22.240]  Всего у меня вершин порядка от квадрата.
[28:22.240 --> 28:26.240]  И, соответственно, по сути, что вот эта формула означает?
[28:26.240 --> 28:29.240]  Формула означает, что в среднем, на каждую пару вершин,
[28:29.240 --> 28:31.240]  чтобы найти кратчейший путь между пары вершин,
[28:31.240 --> 28:33.240]  я трачу примерно логаритм времени.
[28:33.240 --> 28:34.240]  Логаритм 30 вершин.
[28:34.240 --> 28:37.240]  Но кажется, что это не так много, учитывая, что у меня путь.
[28:37.240 --> 28:40.240]  Что на пути может быть равна, собственно...
[28:40.240 --> 28:43.240]  Ну, как я говорю, на пути может быть равна r.
[28:43.240 --> 28:46.240]  И, вообще говоря, хотелось бы, наверное...
[28:46.240 --> 28:49.240]  Хотелось бы добиться того, чтобы DXR был настолько же эффективен,
[28:49.240 --> 28:52.240]  и в случае, когда у меня есть вершины отрицательного веса.
[28:52.240 --> 28:55.240]  Что проблема в том, что DXR к таким графам не применит.
[28:55.240 --> 28:56.240]  Да?
[28:56.240 --> 28:57.240]  А очень бы хотелось.
[28:57.240 --> 28:59.240]  Поэтому идея следующая.
[28:59.240 --> 29:00.240]  Ну, смотрите, давайте...
[29:00.240 --> 29:02.240]  Если у нас в графе 10 отрицательные ребра,
[29:02.240 --> 29:05.240]  так, может быть, просто взять и от этих отрицательных ребров разбавиться.
[29:05.240 --> 29:06.240]  Как?
[29:06.240 --> 29:07.240]  Что?
[29:07.240 --> 29:08.240]  Вот, да.
[29:08.240 --> 29:09.240]  Это, соответственно, первая идея.
[29:09.240 --> 29:10.240]  Действительно.
[29:10.240 --> 29:11.240]  Смотрите, у меня есть граф.
[29:11.240 --> 29:12.240]  Я возьму этот отрицательный ребр.
[29:12.240 --> 29:13.240]  Давайте я просто возьму этот граф
[29:13.240 --> 29:15.240]  и преобразую его, соответственно, в граф,
[29:15.240 --> 29:17.240]  в котором этих отрицательных ребров не будет.
[29:17.240 --> 29:19.240]  И, собственно, самая первая идея,
[29:19.240 --> 29:21.240]  это давайте просто, действительно,
[29:21.240 --> 29:24.240]  просто прибавим ко всем ребрам какое-то определенное значение.
[29:24.240 --> 29:25.240]  Да?
[29:25.240 --> 29:28.240]  Ну, такого, которое гарантированно все ребра выведет.
[29:28.240 --> 29:31.240]  Ну, я думаю, что это будет очень интересно.
[29:31.240 --> 29:34.240]  Ну, я думаю, что это будет очень интересно.
[29:35.240 --> 29:38.240]  Ну, такого, которое гарантированно все ребра выведет,
[29:38.240 --> 29:41.240]  все ребра выведет, да, не отрицательно, я думаю, что это будет очень интересно.
[29:41.240 --> 29:43.240]  Но этот путь справа.
[29:43.240 --> 29:44.240]  Почему?
[29:44.240 --> 29:46.240]  Ну, давайте просто будем справляться.
[29:46.240 --> 29:48.240]  Вот у меня есть граф 5, пишем вот это.
[29:48.240 --> 29:49.240]  Вот.
[29:49.240 --> 29:51.240]  Есть, значит, путь, который проходит на ребра 2.1,
[29:51.240 --> 29:53.240]  есть путь, который проходит на ребра 2.3.
[29:53.240 --> 29:56.240]  Давайте, для избава, вот, брать этот отрицательный ребр
[29:56.240 --> 29:58.240]  и ко всем ребрам, таковый унесемся.
[29:58.240 --> 29:59.240]  Что у меня получится?
[29:59.240 --> 30:00.240]  Три, два, ноль и четыре.
[30:00.240 --> 30:01.240]  И хопа.
[30:01.240 --> 30:03.240]  Теперь в этом графе у меня конечно же путь.
[30:03.240 --> 30:05.240]  Хотя на самом деле в условном графе.
[30:05.240 --> 30:07.240]  Понятно.
[30:07.240 --> 30:08.240]  В чем проблема?
[30:08.240 --> 30:11.240]  Проблема в том, что вы добавляете одно и то же значение, как с самым ребром,
[30:11.240 --> 30:16.240]  это преобразование неэнвариантно относительно реберной длины пути.
[30:16.240 --> 30:19.240]  То есть, почему вот этот путь стал длиннее, чем вот этот?
[30:19.240 --> 30:21.240]  А может, тут тупые ребра больше, согласны?
[30:21.240 --> 30:24.240]  Вот на этом пяти тупые ребра больше, поэтому, соответственно,
[30:24.240 --> 30:28.240]  в этом пути я добавил больше, чем у них длинные пути.
[30:28.240 --> 30:40.240]  Для каждой пары машин, чтобы понять, насколько они четыре,
[30:40.240 --> 30:42.240]  я добавлю с одной машинкой другой,
[30:42.240 --> 30:44.240]  мне нужно найти кратчайшие пути.
[30:44.240 --> 30:46.240]  А я хочу решить заходить кратчайших путей
[30:46.240 --> 30:49.240]  с помощью лейпу, который немного привлекает.
[30:49.240 --> 30:54.240]  А может быть, просто предвестить,
[30:54.240 --> 30:56.240]  у меня есть с того ребра два,
[30:56.240 --> 30:59.240]  может, я же на лучшей степени справлюсь.
[30:59.240 --> 31:03.240]  То есть, как-то не свежий, не зря, как-то сфейли.
[31:03.240 --> 31:06.240]  Ну, смотрите, идея в том,
[31:06.240 --> 31:09.240]  что я хочу, чтобы у меня сумма,
[31:09.240 --> 31:12.240]  то есть, отчет, длина каждой части осталась в пункте,
[31:12.240 --> 31:15.240]  ну, это немного утопит.
[31:15.240 --> 31:16.240]  Понимаете, почему?
[31:16.240 --> 31:23.240]  Потому что, если у меня есть вот такой граф,
[31:23.240 --> 31:27.240]  то в таком графе я чисто теперь не смогу сохранить длинные путей.
[31:27.240 --> 31:29.240]  Потому что какие-то пути могут быть отрицательные.
[31:29.240 --> 31:31.240]  Если я избавлю отрицательных ребр,
[31:31.240 --> 31:34.240]  то тогда мнение у нас сохранит длину пути.
[31:34.240 --> 31:36.240]  Понятно?
[31:36.240 --> 31:39.240]  Поэтому давайте поступим по-другому.
[31:39.240 --> 31:41.240]  Давайте сделаем так.
[31:41.240 --> 31:43.240]  Мы будем сохранять длинные путей.
[31:43.240 --> 31:46.240]  Но намажем на самом деле длинные путей.
[31:46.240 --> 31:51.240]  Намажем сохранить их относительные взаимосвязи.
[31:51.240 --> 31:54.240]  То есть, мы хотим, что если путь раньше был самым длинным,
[31:54.240 --> 31:55.240]  то он бы остался самым длинным.
[31:55.240 --> 31:56.240]  Если путь раньше был самым коротким,
[31:56.240 --> 31:58.240]  то мы хотим, чтобы он остался самым коротким и так далее.
[31:58.240 --> 31:59.240]  Понятно?
[31:59.240 --> 32:01.240]  Короче говоря, нам бы было хорошо от того,
[32:01.240 --> 32:03.240]  если бы все пути от СЗД,
[32:03.240 --> 32:06.240]  все пути, проходящие все вопросы от СЗД,
[32:07.240 --> 32:09.240]  если бы все они изменились на одну,
[32:09.240 --> 32:12.240]  то нам было бы много, согласны?
[32:12.240 --> 32:14.240]  Вот.
[32:14.240 --> 32:16.240]  А тут столько физиков.
[32:16.240 --> 32:20.240]  А знаете, почему из физики прибыть кое-что?
[32:20.240 --> 32:22.240]  Потенциал.
[32:22.240 --> 32:23.240]  Вот.
[32:23.240 --> 32:25.240]  То есть, когда дарите то пути,
[32:25.240 --> 32:27.240]  по которому мы двигались,
[32:27.240 --> 32:28.240]  а зависит только, собственно,
[32:28.240 --> 32:30.240]  от того положения, что это такое или не то.
[32:30.240 --> 32:31.240]  Медпотенциал.
[32:31.240 --> 32:33.240]  Где как раз такие физики?
[32:33.240 --> 32:34.240]  Медпотенциал.
[32:34.240 --> 32:36.240]  Так, собственно, обсудим ее.
[32:36.240 --> 32:38.240]  Значит, идея такая.
[32:38.240 --> 32:40.240]  Давайте просто обсудим,
[32:40.240 --> 32:41.240]  что это такое медпотенциал.
[32:41.240 --> 32:42.240]  Функция, что представляет
[32:42.240 --> 32:44.240]  гипшины и киточечники.
[32:44.240 --> 32:46.240]  То есть, просто произвольная функция.
[32:48.240 --> 32:49.240]  Произвольная функция D.
[32:49.240 --> 32:51.240]  То есть, каждой гипшине
[32:51.240 --> 32:53.240]  поставим соответственно гипшину D.
[32:55.240 --> 32:56.240]  И отбить.
[32:57.240 --> 32:58.240]  И отбить.
[32:59.240 --> 33:00.240]  И отбить.
[33:00.240 --> 33:02.240]  Пока давайте не будем там
[33:03.240 --> 33:04.240]  абсолютно произвольной функции.
[33:04.240 --> 33:05.240]  Пока не важно.
[33:05.240 --> 33:07.240]  То есть, пока просто обсудим
[33:07.240 --> 33:08.240]  каким свойствам тогда будет
[33:08.240 --> 33:09.240]  обладан наш грант.
[33:09.240 --> 33:10.240]  И соответственно,
[33:10.240 --> 33:11.240]  соответственно,
[33:11.240 --> 33:12.240]  специальными функциями потенциала,
[33:12.240 --> 33:13.240]  откуда-то взят,
[33:13.240 --> 33:14.240]  произвольные,
[33:14.240 --> 33:16.240]  обретеним новый весовик.
[33:16.240 --> 33:17.240]  Скажем, что
[33:17.240 --> 33:19.240]  новый вес гипра
[33:19.240 --> 33:21.240]  вот здесь, да или нет,
[33:21.240 --> 33:23.240]  это есть вес самого гипра
[33:23.240 --> 33:24.240]  плюс пятый.
[33:24.240 --> 33:26.240]  Плюс рамка потенциала.
[33:28.240 --> 33:29.240]  Окей?
[33:29.240 --> 33:30.240]  Просто вели какую-то функцию потенциала
[33:30.240 --> 33:32.240]  и обновили веса ребра по такой функции.
[33:32.240 --> 33:34.240]  Обновили веса ребра по такой функции.
[33:34.240 --> 33:35.240]  Нормально?
[33:36.240 --> 33:38.240]  Теперь давайте обсудим свойства.
[33:38.240 --> 33:39.240]  Первое свойство.
[33:39.240 --> 33:41.240]  Возьмем произвольный путь
[33:41.240 --> 33:42.240]  из В.
[33:43.240 --> 33:44.240]  Здесь гипшина В.
[33:49.240 --> 33:50.240]  Разморим произвольный путь.
[33:50.240 --> 33:52.240]  Вот вот абсолютно произвольный путь
[33:52.240 --> 33:53.240]  из гипшины В, гипшины В.
[33:53.240 --> 33:55.240]  На какую величину он отменится?
[33:57.240 --> 33:58.240]  Зависит ли величина,
[33:58.240 --> 33:59.240]  как он отменится этот путь?
[34:01.240 --> 34:03.240]  От конкретной ключи.
[34:03.240 --> 34:05.240]  Зависит ли он от конкретной ключи?
[34:05.240 --> 34:06.240]  Нет, почему?
[34:06.240 --> 34:07.240]  Там нужно смотреть.
[34:07.240 --> 34:09.240]  Давайте просто обновим какой-нибудь путь
[34:09.240 --> 34:11.240]  из гипшины В, гипшины В.
[34:11.240 --> 34:13.240]  И собственно просто суммируем.
[34:16.240 --> 34:17.240]  И секрет.
[34:17.240 --> 34:19.240]  Вообще не секрет.
[34:19.240 --> 34:21.240]  40 гипшины В.
[34:23.240 --> 34:24.240]  Давайте так.
[34:26.240 --> 34:27.240]  В.
[34:27.240 --> 34:28.240]  В.
[34:28.240 --> 34:32.240]  То есть этот путь состоит из гипшин В.
[34:33.240 --> 34:34.240]  В.
[34:34.240 --> 34:35.240]  В.
[34:35.240 --> 34:36.240]  В.
[34:36.240 --> 34:37.240]  В.
[34:37.240 --> 34:38.240]  В.
[34:38.240 --> 34:39.240]  В.
[34:39.240 --> 34:40.240]  В.
[34:40.240 --> 34:41.240]  В.
[34:41.240 --> 34:42.240]  В.
[34:42.240 --> 34:43.240]  В.
[34:43.240 --> 34:44.240]  В.
[34:44.240 --> 34:45.240]  В.
[34:45.240 --> 34:46.240]  В.
[34:46.240 --> 34:47.240]  В.
[34:47.240 --> 34:48.240]  В.
[34:48.240 --> 34:49.240]  В.
[34:49.240 --> 34:50.240]  В.
[34:50.240 --> 34:51.240]  В.
[34:51.240 --> 34:52.240]  В.
[34:52.240 --> 34:53.240]  В.
[34:53.240 --> 34:54.240]  В.
[34:54.240 --> 34:55.240]  В.
[34:55.240 --> 34:56.240]  В.
[34:56.240 --> 34:57.240]  В.
[34:57.240 --> 34:58.240]  В.
[34:58.240 --> 34:59.240]  В.
[34:59.240 --> 35:00.240]  В.
[35:00.240 --> 35:01.240]  В.
[35:01.240 --> 35:02.240]  В.
[35:02.240 --> 35:03.240]  В.
[35:03.240 --> 35:04.240]  В.
[35:04.240 --> 35:05.240]  В.
[35:05.240 --> 35:06.240]  В.
[35:06.240 --> 35:07.240]  В.
[35:07.240 --> 35:08.240]  В.
[35:08.240 --> 35:09.240]  В.
[35:09.240 --> 35:10.240]  В.
[35:10.240 --> 35:11.240]  В.
[35:11.240 --> 35:12.240]  В.
[35:12.240 --> 35:13.240]  В.
[35:13.240 --> 35:14.240]  В.
[35:14.240 --> 35:15.240]  В.
[35:15.240 --> 35:16.240]  В.
[35:17.240 --> 35:22.240]  Все промежутки так отращаются.
[35:22.240 --> 35:31.240]  Ну и так далее. И оставите только фиод v1, то есть старая вершина, да, это вершина v, и конечная вершина, это вершина v.
[35:31.240 --> 35:38.240]  То есть новый пеноплучить, новый пеноплучить, между любыми v и v.
[35:45.240 --> 35:47.240]  Новый пеноплучить.
[35:47.240 --> 35:49.240]  Эта старая
[35:53.240 --> 35:57.240]  плюс, а v не успели.
[36:00.240 --> 36:03.240]  И это, наверное, абсолютно для произволнования согласия.
[36:05.240 --> 36:07.240]  То есть, похоже, мы добились того, что мы хотели.
[36:08.240 --> 36:10.240]  Мы не открыли какую-то функцию панциала.
[36:10.240 --> 36:12.240]  Ну, понятно, что у нас длинные пути изменились.
[36:12.240 --> 36:19.240]  Но при этом, допустим, как у паники машины, то в каком пути я не прошел, у меня все эти пути изменились сразу на всю эту вершину.
[36:22.240 --> 36:24.240]  Собственно, чистую вершину пенопла.
[36:25.240 --> 36:27.240]  Изменение этой пути зависит только от значения данечной точки.
[36:28.240 --> 36:31.240]  От самой первой пути, и так далее, это вообще никак не зависит.
[36:31.240 --> 36:34.240]  То есть, не важно, как содержит этот пеноплучитель, как содержит этот пеноплучитель, и так далее.
[36:36.240 --> 36:39.240]  Но соответственно, вопрос, как изменится либо эффект, либо эффект v2?
[36:39.240 --> 36:45.240]  Да, смотрите, вот здесь у меня все пути изменились на вторую эту вершину, то есть прочерчный путь остался прочерчным путем.
[36:45.240 --> 36:47.240]  Очевидно?
[36:47.240 --> 36:49.240]  Очевидно.
[36:50.240 --> 36:53.240]  Ну и последний вопрос, как мы с этим изменились вес любого цикла?
[36:55.240 --> 36:56.240]  Изменились, да.
[36:56.240 --> 37:00.240]  То есть, когда стартовая точка совпадает с конечной точкой, то и вес цикла у меня не меняется.
[37:01.240 --> 37:03.240]  Все, то есть, вот пересвозка потенциала.
[37:04.240 --> 37:05.240]  Первый.
[37:05.240 --> 37:09.240]  Любой путь изменивается, разумеется, по личному фиксируемому, фиануэльному из первого пути.
[37:10.240 --> 37:13.240]  Корочляющий путь, именно там путь, вообще не меняется.
[37:13.240 --> 37:17.240]  То есть, если какой-то путь был корочащим из содом графика, то он и в конечном графике тоже останется таким.
[37:17.240 --> 37:19.240]  И плюс, веса циклов не меняется.
[37:19.240 --> 37:22.240]  То есть, если у меня в графике не было цикла по отрицательному весу, то и новый график не будет.
[37:22.240 --> 37:23.240]  И наоборот.
[37:23.240 --> 37:25.240]  Ну, наоборот, там сложнее.
[37:25.240 --> 37:27.240]  То есть, если у меня был вес цикла по отрицательному весу, то ладно.
[37:27.240 --> 37:29.240]  Они находятся на поcentric innovation.
[37:29.240 --> 37:31.240]  Но были только aha .
[37:31.240 --> 37:33.240]  mandible, пол Burger King.
[37:33.240 --> 37:35.240]  И к proporteenth crazy.
[37:41.240 --> 37:43.240]  Таким образом, то есть, вот...!
[37:44.240 --> 37:45.240]  Вот!
[37:46.240 --> 37:51.240]  Ну если любую тему вы注意 144억 с достопримечательными результатами был карман.
[37:52.240 --> 37:53.240]  То есть, з?
[37:53.240 --> 37:54.240]  Sorry, с 46 SPEAKERS.
[37:54.240 --> 37:56.240]  Да у меняIELY меняЛ bekан thick wood,
[37:56.240 --> 37:58.240]  Понятно, да?
[37:58.240 --> 38:02.240]  Все. То есть я могу всегда дать поиск в высоком грамме,
[38:02.240 --> 38:06.240]  а дать поиск в каком-нибудь другом. Отлично.
[38:06.240 --> 38:09.240]  Но осталось делать за малым.
[38:09.240 --> 38:13.240]  Придумать такую функцию в социалах,
[38:13.240 --> 38:17.240]  которая сделает все наибрёбка не отрицательной.
[38:17.240 --> 38:19.240]  Всего лишь.
[38:19.240 --> 38:23.240]  Я надеюсь, как вы понимаете, это всегда возможно.
[38:23.240 --> 38:25.240]  Когда возможно?
[38:25.240 --> 38:27.240]  Когда невозможно придумать потенциал,
[38:27.240 --> 38:30.240]  который сделает все наибрёбка не отрицательной.
[38:30.240 --> 38:32.240]  Ну, очевидно.
[38:32.240 --> 38:34.240]  Тогда это прямо нельзя.
[38:34.240 --> 38:36.240]  Ну, в смысле?
[38:36.240 --> 38:39.240]  Ну, вот тут был пример.
[38:43.240 --> 38:45.240]  Если у меня граб стоит в рябрах,
[38:45.240 --> 38:49.240]  то тут я спокойно могу делать все наибрёбка не отрицательной.
[38:49.240 --> 38:52.240]  Если рябров нет, то притекаю.
[38:52.240 --> 38:54.240]  А, я перевратил его вес.
[38:54.240 --> 38:56.240]  Ну, нет.
[38:56.240 --> 38:58.240]  Короче, потенциал нельзя придумать,
[38:58.240 --> 39:02.240]  если у меня есть припал отрицательного веса.
[39:02.240 --> 39:05.240]  По третьему свойству. Согласна?
[39:05.240 --> 39:08.240]  Так у меня веса отрицательных циклов сохраняются,
[39:08.240 --> 39:10.240]  то, соответственно, если мы обратно назначаем
[39:10.240 --> 39:12.240]  дебилы циклов отрицательных весов,
[39:12.240 --> 39:14.240]  то у меня невозможно будет потенциал,
[39:14.240 --> 39:16.240]  который сделает все наибрёбка не отрицательной.
[39:16.240 --> 39:18.240]  Иначе, когда эти дебилы не отрицательны,
[39:18.240 --> 39:22.240]  то у меня есть припал отрицательных весов.
[39:22.240 --> 39:24.240]  Нет, вот эти поиски некорректно понятны.
[39:24.240 --> 39:26.240]  То есть мы говорим про корректность перехода.
[39:26.240 --> 39:29.240]  Перехода у граба с не отрицательными рёбрами,
[39:29.240 --> 39:32.240]  а с отрицательными рёбрами граба с не отрицательными рёбрами.
[39:32.240 --> 39:34.240]  А мы располагаем, что ревизируем чей-то.
[39:34.240 --> 39:36.240]  Ну, вообще производуемся.
[39:36.240 --> 39:38.240]  Так, если не ревизируем,
[39:38.240 --> 39:40.240]  то вес цилинг может положительный,
[39:40.240 --> 39:42.240]  а это припрыгается.
[39:42.240 --> 39:44.240]  Понятно.
[39:44.240 --> 39:46.240]  Там у меня есть дебилы циклов.
[39:46.240 --> 39:48.240]  Я не понял, что у меня есть дебилы циклов.
[39:50.240 --> 39:52.240]  Нет, смотри.
[39:52.240 --> 39:54.240]  Там разные потенциалы,
[39:54.240 --> 39:56.240]  естественно, они будут продолжены в цепи.
[39:56.240 --> 39:58.240]  Проблем нет.
[39:58.240 --> 40:00.240]  Да ладно.
[40:00.240 --> 40:02.240]  Если у меня есть циклы,
[40:02.240 --> 40:04.240]  то если у меня есть циклы,
[40:04.240 --> 40:06.240]  то можно перейти.
[40:06.240 --> 40:08.240]  Не понял.
[40:08.240 --> 40:10.240]  Спасибо.
[40:16.240 --> 40:18.240]  Пять.
[40:20.240 --> 40:22.240]  Потом встал вот такой граб.
[40:22.240 --> 40:24.240]  И...
[40:24.240 --> 40:26.240]  Семь.
[40:26.240 --> 40:28.240]  Ну ладно.
[40:28.240 --> 40:30.240]  Если там цикла расчёта.
[40:30.240 --> 40:32.240]  Добавим на шею.
[40:32.240 --> 40:34.240]  А зачем нам добавлять пресс?
[40:34.240 --> 40:36.240]  Если мы хотим оставить рёбра,
[40:36.240 --> 40:38.240]  не отрицательные.
[40:38.240 --> 40:40.240]  Да, как раз вопрос в том,
[40:40.240 --> 40:42.240]  чтобы подобрать потенциалы,
[40:42.240 --> 40:44.240]  кто бы, соответственно,
[40:44.240 --> 40:46.240]  в серёге расчёта не отрицалил.
[40:46.240 --> 40:50.240]  Очевидно, что это не всегда возможно.
[40:50.240 --> 40:52.240]  В следующем случае очевидно,
[40:52.240 --> 40:54.240]  что если в грабе есть цикла отрицательного места,
[40:54.240 --> 40:56.240]  то такой потенциал на грабе невозможно.
[40:58.240 --> 41:00.240]  Но есть наше мнение.
[41:00.240 --> 41:02.240]  Если цикла отрицательного места нет,
[41:02.240 --> 41:04.240]  то это сделать всегда возможно.
[41:04.240 --> 41:06.240]  Вот сейчас мы имеем вид.
[41:08.240 --> 41:10.240]  Теперь мы поняли всё.
[41:10.240 --> 41:12.240]  Пусть в грабе лежат циклы отрицательного места,
[41:12.240 --> 41:14.240]  потому что цикла у нас не есть.
[41:16.240 --> 41:18.240]  Если мы хотим Mafia 오�отку constituent ...
[41:18.240 --> 41:20.240]  ... cab 질문 ...
[41:20.240 --> 41:22.240]  combine.
[41:22.240 --> 41:24.240]  어 дㄷqы
[41:24.240 --> 41:26.240]  ain't Too.
[41:56.240 --> 42:04.240]  Тогда, если мы можем подключить к каналу вот такую штуку,
[42:07.240 --> 42:11.240]  расстояние контекции с водой, ну, вершина лица,
[42:12.240 --> 42:15.240]  то тогда вы представьте, что в таком случае у меня
[42:15.240 --> 42:17.240]  дистанционный крыльк стал у меня этой цепью.
[42:19.240 --> 42:20.240]  Понятно?
[42:21.240 --> 42:23.240]  Почему это так?
[42:24.240 --> 42:25.240]  Ну не понял.
[42:26.240 --> 42:27.240]  У нас алгоритмы.
[42:27.240 --> 42:28.240]  Не-не, понятно.
[42:28.240 --> 42:30.240]  А может быть вода в последний зал.
[42:31.240 --> 42:32.240]  Есть два вида.
[42:33.240 --> 42:35.240]  Известных в нём нет, а дистанционных вообще нет.
[42:36.240 --> 42:37.240]  Что я делаю?
[42:37.240 --> 42:40.240]  Добавляю дистанцию, из неё пробожу всевозможную
[42:40.240 --> 42:41.240]  эту репроферцию.
[42:42.240 --> 42:43.240]  Если можно.
[42:44.240 --> 42:47.240]  Говорю, пусть у меня консал, пусть у меня консал
[42:47.240 --> 42:49.240]  обстоятельный курт курт.
[42:49.240 --> 42:55.240]  ты отыкся на грошей, когда я еду до этой товарной вершины, до вот таких лица
[42:55.240 --> 43:05.240]  тогда, вот ты считаешь, если я возьму вот такие лица
[43:05.240 --> 43:09.240]  ну, давай, давай, давай
[43:09.240 --> 43:13.240]  а если я возьму вот такие лица
[43:13.240 --> 43:17.240]  то они у меня отыкся
[43:17.240 --> 43:19.240]  доказано
[43:19.240 --> 43:21.240]  ну, просто нам скупапка денег распишем
[43:21.240 --> 43:23.240]  w и цигель
[43:23.240 --> 43:25.240]  это w и цигель
[43:25.240 --> 43:27.240]  плюс фиатрикс, минус фиатрикс
[43:27.240 --> 43:29.240]  в свою очередь, скупапка денег, фиатрикс
[43:29.240 --> 43:31.240]  это равно w и цигель
[43:31.240 --> 43:33.240]  плюс
[43:33.240 --> 43:35.240]  что вот сейчас здесь говорили
[43:35.240 --> 43:37.240]  икс, минус
[43:37.240 --> 43:39.240]  о, это твой икс
[43:39.240 --> 43:41.240]  и вот я считаю, что это икс икс
[43:41.240 --> 43:43.240]  обязательно пользуй правильно дня
[43:43.240 --> 43:45.240]  почему?
[43:45.240 --> 43:47.240]  так, смотри сюда
[43:47.240 --> 43:49.240]  что это такое?
[43:53.240 --> 43:55.240]  это крошечный пыль
[43:57.240 --> 43:59.240]  он крошечный
[43:59.240 --> 44:01.240]  это стропа, где 12
[44:05.240 --> 44:07.240]  из этого зазоя
[44:07.240 --> 44:09.240]  вылит
[44:09.240 --> 44:11.240]  икс
[44:13.240 --> 44:15.240]  который проходит
[44:17.240 --> 44:19.240]  в олигу
[44:21.240 --> 44:23.240]  согласны?
[44:25.240 --> 44:27.240]  то есть вот у меня есть
[44:27.240 --> 44:29.240]  вершинка, а я со стой
[44:29.240 --> 44:31.240]  есть вершина икс
[44:31.240 --> 44:33.240]  и вот эта длина пути вот такого
[44:33.240 --> 44:35.240]  я сначала иду до вершины икс
[44:35.240 --> 44:37.240]  со стой икс
[44:37.240 --> 44:39.240]  а потом двигаюсь и прикручиваю
[44:39.240 --> 44:41.240]  согласны?
[44:41.240 --> 44:43.240]  а вот это вот такое
[44:45.240 --> 44:47.240]  а икс прекращаешь в пути
[44:47.240 --> 44:49.240]  из-за стой выпиток
[44:51.240 --> 44:53.240]  что можно сказать про соотношение
[44:53.240 --> 44:55.240]  вот этому пути
[44:57.240 --> 44:59.240]  вот этому пути
[44:59.240 --> 45:01.240]  и кача
[45:01.240 --> 45:03.240]  да
[45:03.240 --> 45:05.240]  в качах пути обязательно меньше
[45:05.240 --> 45:07.240]  браться, чем
[45:07.240 --> 45:09.240]  согласны?
[45:11.240 --> 45:13.240]  почему 0?
[45:13.240 --> 45:15.240]  нет
[45:15.240 --> 45:17.240]  если у меня есть отрицательные ребра
[45:17.240 --> 45:19.240]  то...
[45:19.240 --> 45:21.240]  пример
[45:23.240 --> 45:25.240]  что вот тут у меня они все
[45:25.240 --> 45:27.240]  почему тут 0?
[45:27.240 --> 45:29.240]  почему тут 0?
[45:29.240 --> 45:31.240]  ну совсем
[45:31.240 --> 45:33.240]  почему тут 0?
[45:33.240 --> 45:35.240]  когда
[45:37.240 --> 45:39.240]  когда первый пункт романулю
[45:41.240 --> 45:43.240]  романулю
[45:43.240 --> 45:45.240]  нет?
[45:47.240 --> 45:49.240]  так понятно, почему вот эта штука
[45:49.240 --> 45:51.240]  обязательно
[45:51.240 --> 45:53.240]  не меньше, чем вот это
[45:53.240 --> 45:55.240]  вот это путь
[45:55.240 --> 45:57.240]  который как-то
[45:57.240 --> 45:59.240]  путит вот этой звездой до иклика
[45:59.240 --> 46:01.240]  сначала кратчающий могустем до икса
[46:01.240 --> 46:03.240]  а потом из икса выпит
[46:03.240 --> 46:05.240]  а вот это именно кратчающий путь
[46:05.240 --> 46:07.240]  понятное дело, что кратчающий путь
[46:07.240 --> 46:09.240]  не может быть никак больше, чем вот такой путь
[46:09.240 --> 46:11.240]  понятно?
[46:11.240 --> 46:13.240]  поэтому тут больше и правда
[46:13.240 --> 46:15.240]  доказали
[46:17.240 --> 46:19.240]  то есть в любой парке
[46:19.240 --> 46:21.240]  а вот
[46:21.240 --> 46:23.240]  сходим на циклорецетную вес
[46:23.240 --> 46:25.240]  но проверять, что мы можем наединить
[46:25.240 --> 46:27.240]  стояние
[46:27.240 --> 46:29.240]  да, стояние может быть корректным
[46:29.240 --> 46:31.240]  что в принципе это вот
[46:31.240 --> 46:33.240]  что рожда корректно определена
[46:33.240 --> 46:35.240]  ну и фишка соответственно
[46:35.240 --> 46:37.240]  но нам же сказано, что это стояние
[46:37.240 --> 46:39.240]  если это будет...
[46:39.240 --> 46:41.240]  доказательств нам не нужно сказать
[46:41.240 --> 46:43.240]  доказательств мы просто из головы берем что-то
[46:43.240 --> 46:45.240]  доказательств
[46:45.240 --> 46:47.240]  мы же уже сразу определили
[46:47.240 --> 46:49.240]  что?
[46:49.240 --> 46:51.240]  что мы нашли?
[46:53.240 --> 46:55.240]  не-не-не, смотрите
[46:55.240 --> 46:57.240]  мы используем пока только кратчайшее
[46:57.240 --> 46:59.240]  стояние
[46:59.240 --> 47:01.240]  от S из 2 до остальных вершин
[47:01.240 --> 47:03.240]  а задача найти расстояние между всеми вот этим вершинами
[47:07.240 --> 47:09.240]  да-да-да
[47:09.240 --> 47:11.240]  чтобы найти кратчайшее стояние между всеми вершинами
[47:11.240 --> 47:13.240]  нам придется найти расстояние от этой вершины до всех остальных
[47:13.240 --> 47:15.240]  это правда
[47:17.240 --> 47:19.240]  но это все равно будет эффективно
[47:21.240 --> 47:23.240]  так, теория-то понятна?
[47:23.240 --> 47:25.240]  ничего нет
[47:25.240 --> 47:27.240]  понятно все?
[47:27.240 --> 47:29.240]  окей
[47:29.240 --> 47:31.240]  соответственно, план алгоритмы такой
[47:31.240 --> 47:33.240]  план S
[47:37.240 --> 47:39.240]  нет, неправда
[47:39.240 --> 47:41.240]  берем граф
[47:41.240 --> 47:43.240]  заводим
[47:43.240 --> 47:45.240]  вершину S из 2
[47:45.240 --> 47:47.240]  на самом деле вершину можно не заводить
[47:47.240 --> 47:49.240]  в этом семинар
[47:49.240 --> 47:51.240]  заводим вершину S из 3
[47:51.240 --> 47:53.240]  проводим
[47:53.240 --> 47:55.240]  ребра длины 0
[47:55.240 --> 47:57.240]  во всех остальных вершинах
[47:59.240 --> 48:01.240]  забудкаем алгоритм морда Велмана
[48:03.240 --> 48:05.240]  и находим кратчайшее стояние
[48:05.240 --> 48:07.240]  под S из 3
[48:07.240 --> 48:09.240]  во всех остальных вершинах
[48:09.240 --> 48:11.240]  если мы
[48:11.240 --> 48:13.240]  будем искать
[48:13.240 --> 48:15.240]  кратчайшее стояние
[48:15.240 --> 48:17.240]  до вершины С
[48:17.240 --> 48:19.240]  мы будем искать кратчайшее стояние
[48:19.240 --> 48:21.240]  до вершины С
[48:21.240 --> 48:23.240]  нет, вот как раз этот прикол
[48:23.240 --> 48:25.240]  прикол в том, что мы изнасиленно
[48:25.240 --> 48:27.240]  запускаем цифру Велмана
[48:27.240 --> 48:29.240]  из вершины С
[48:29.240 --> 48:31.240]  и ищем пути вот этой вершины
[48:31.240 --> 48:33.240]  до всех остальных
[48:33.240 --> 48:35.240]  и в этот момент мы можем проверить цифру от всякого места
[48:35.240 --> 48:37.240]  понятно?
[48:37.240 --> 48:39.240]  все, вот так работает
[48:43.240 --> 48:45.240]  вот работает
[48:45.240 --> 48:47.240]  завоем
[48:47.240 --> 48:49.240]  идем дальше
[48:53.240 --> 48:55.240]  дальше, третий пункт
[48:55.240 --> 48:57.240]  ну а в третьем пункте
[48:57.240 --> 48:59.240]  мы говорим, что
[48:59.240 --> 49:01.240]  первых все равно
[49:01.240 --> 49:03.240]  просто эти найденные пути
[49:03.240 --> 49:05.240]  и
[49:05.240 --> 49:07.240]  и
[49:07.240 --> 49:09.240]  х
[49:09.240 --> 49:11.240]  правильно
[49:11.240 --> 49:13.240]  и в х
[49:13.240 --> 49:15.240]  плюс
[49:15.240 --> 49:17.240]  5
[49:17.240 --> 49:19.240]  ну и четвертый пункт
[49:19.240 --> 49:21.240]  гениальная
[49:21.240 --> 49:23.240]  смотрите, у нас есть граф
[49:23.240 --> 49:25.240]  в графе нет цикла по отрицательному весу
[49:25.240 --> 49:27.240]  поэтому мы можем по нему применить
[49:27.240 --> 49:29.240]  алгоритм D Extra
[49:29.240 --> 49:31.240]  нормально?
[49:31.240 --> 49:33.240]  да
[49:33.240 --> 49:35.240]  то есть просто
[49:35.240 --> 49:37.240]  от каждой вершины запустила алгоритм D Extra
[49:37.240 --> 49:39.240]  и найти прочедшие пути
[49:39.240 --> 49:41.240]  спускаем
[49:47.240 --> 49:49.240]  D Extra
[49:53.240 --> 49:55.240]  все
[49:55.240 --> 49:57.240]  соответственно
[49:57.240 --> 49:59.240]  зависит от вида
[49:59.240 --> 50:01.240]  либо на пирамиде
[50:01.240 --> 50:03.240]  либо на север
[50:03.240 --> 50:05.240]  ве
[50:05.240 --> 50:07.240]  ве
[50:07.240 --> 50:09.240]  либо
[50:09.240 --> 50:11.240]  ве
[50:11.240 --> 50:13.240]  плюс ве
[50:13.240 --> 50:15.240]  ну вот это D Extra
[50:15.240 --> 50:17.240]  плюс 4 белла
[50:17.240 --> 50:19.240]  ну и соответственно
[50:19.240 --> 50:21.240]  мы получаем
[50:21.240 --> 50:23.240]  2 квадрата ве
[50:23.240 --> 50:25.240]  ве
[50:25.240 --> 50:27.240]  плюс
[50:27.240 --> 50:29.240]  ве
[50:29.240 --> 50:31.240]  плюс
[50:31.240 --> 50:33.240]  ве
[50:33.240 --> 50:35.240]  плюс
[50:35.240 --> 50:37.240]  ве
[50:37.240 --> 50:39.240]  плюс
[50:39.240 --> 50:41.240]  ве
[50:41.240 --> 50:43.240]  плюс
[50:43.240 --> 50:45.240]  ве
[50:45.240 --> 50:47.240]  плюс
[50:47.240 --> 50:49.240]  да
[50:49.240 --> 50:51.240]  плюс
[50:51.240 --> 50:53.240]  соответственно
[50:53.240 --> 50:55.240]  нам было 2 квадрата ве
[50:59.240 --> 51:01.240]  и тут тоже получаем
[51:01.240 --> 51:03.240]  2 квадрата ве
[51:03.240 --> 51:05.240]  ну
[51:05.240 --> 51:07.240]  ну правда понятно
[51:07.240 --> 51:09.240]  нам бы менять пирамиду D Extra
[51:09.240 --> 51:11.240]  нам так и следует
[51:11.240 --> 51:13.240]  но
[51:13.240 --> 51:15.240]  а тут соответственно
[51:15.240 --> 51:17.240]  получаем 2 квадрата ве
[51:17.240 --> 51:19.240]  и тоже существует все квадраты ве
[51:19.240 --> 51:21.240]  вот
[51:21.240 --> 51:23.240]  какие дела
[51:29.240 --> 51:31.240]  ну соответственно вот пора
[51:31.240 --> 51:33.240]  вот мы рассмотрели
[51:33.240 --> 51:35.240]  алгоритмы Форда Беллона
[51:35.240 --> 51:37.240]  алгоритмы D Extra
[51:37.240 --> 51:39.240]  алгоритмы Флойда, алгоритмы Фротства
[51:39.240 --> 51:41.240]  весь итог
[51:41.240 --> 51:43.240]  по сути показан вот там
[51:43.240 --> 51:45.240]  что мы делаем
[51:45.240 --> 51:47.240]  есть нам данный граф
[51:47.240 --> 51:49.240]  отбирает наберемую
[51:49.240 --> 51:51.240]  то
[51:51.240 --> 51:53.240]  используем алгоритмы Форда Беллона
[51:53.240 --> 51:55.240]  по сути
[51:55.240 --> 51:57.240]  посуду в плоти
[51:57.240 --> 51:59.240]  если мы в трех играх на прицепе
[51:59.240 --> 52:01.240]  то просто запускаем фейер
[52:03.240 --> 52:05.240]  если же граф плотный
[52:05.240 --> 52:07.240]  то соответственно
[52:07.240 --> 52:09.240]  не ва
[52:09.240 --> 52:11.240]  в любом случае вы не используете Флойда
[52:11.240 --> 52:13.240]  как видите
[52:13.240 --> 52:15.240]  а Флойда хорошо работает только для плотных графов
[52:15.240 --> 52:17.240]  и на разрешенном графу
[52:17.240 --> 52:19.240]  его исполнение не стоит
[52:19.240 --> 52:21.240]  ну и там
[52:21.240 --> 52:23.240]  в зависимости от того
[52:23.240 --> 52:25.240]  есть ли у вас специальный игрок
[52:25.240 --> 52:27.240]  или нет
[52:27.240 --> 52:29.240]  то соответственно может быть слой
[52:29.240 --> 52:31.240]  не дружок
[52:39.240 --> 52:41.240]  остались две вопросы
[52:41.240 --> 52:43.240]  окей
[52:43.240 --> 52:45.240]  тогда давайте
[53:05.240 --> 53:07.240]  у меня были какие-то вопросы
[53:07.240 --> 53:09.240]  по прошлому тесту
[53:11.240 --> 53:13.240]  так
[53:25.240 --> 53:27.240]  да
[53:27.240 --> 53:29.240]  был такой вопрос
[53:29.240 --> 53:31.240]  о которой
[53:31.240 --> 53:33.240]  был один намек
[53:33.240 --> 53:35.240]  давайте его разберем
[53:35.240 --> 53:37.240]  вот первый вопрос
[53:37.240 --> 53:39.240]  основной быстрее игра
[53:41.240 --> 53:43.240]  а вот
[53:43.240 --> 53:46.240]  вот
[53:46.240 --> 53:48.240]  веяние под граф
[53:48.240 --> 53:50.240]  некоторое минимальное окно на дереву
[53:50.240 --> 53:52.240]  и вопрос заключался в том
[53:52.240 --> 53:54.240]  что мы рассматриваем
[53:54.240 --> 53:56.240]  рёбра
[53:56.240 --> 53:58.240]  которые пересекают разрез
[53:58.240 --> 54:00.240]  то есть здесь тут
[54:00.240 --> 54:02.240]  длина а, длина б
[54:02.240 --> 54:04.240]  то есть это был вопрос
[54:04.240 --> 54:06.240]  может ли ребро
[54:06.240 --> 54:08.240]  наибольшего веса
[54:08.240 --> 54:10.240]  быть безопасным
[54:10.240 --> 54:12.240]  какой ответ
[54:12.240 --> 54:14.240]  да
[54:14.240 --> 54:16.240]  сейчас всем понятно, что да
[54:18.240 --> 54:20.240]  посмотрите
[54:20.240 --> 54:22.240]  лемма безопасно припишется
[54:22.240 --> 54:24.240]  а лемма
[54:24.240 --> 54:26.240]  что
[54:26.240 --> 54:28.240]  если рассматривать вот такой разрез
[54:28.240 --> 54:30.240]  то ребро минимального веса
[54:30.240 --> 54:32.240]  гарантированно является безопасным
[54:32.240 --> 54:34.240]  но эта лемма утверждает
[54:34.240 --> 54:36.240]  что
[54:36.240 --> 54:38.240]  и только ребра минимального веса
[54:38.240 --> 54:40.240]  безопасным
[54:40.240 --> 54:42.240]  понятно, что тут могут быть какие-то другие безопасные рёбы
[54:42.240 --> 54:44.240]  ну, банальный пример
[54:44.240 --> 54:46.240]  вот у меня есть
[54:46.240 --> 54:48.240]  вот такой граф
[54:48.240 --> 54:50.240]  и тут вот такие рёбы
[54:50.240 --> 54:52.240]  3x1, 2x2
[54:52.240 --> 54:54.240]  возьму вот такой подграф
[54:54.240 --> 54:56.240]  возьму пустой подграф
[54:58.240 --> 55:00.240]  и рассматриваю вот такой разрез
[55:02.240 --> 55:04.240]  его пересекают только
[55:04.240 --> 55:06.240]  понятно, что
[55:06.240 --> 55:08.240]  ребро 2 является безопасным
[55:08.240 --> 55:10.240]  согласен
[55:10.240 --> 55:16.240]  это минимальная мощность. Таким образом, мы получаем, что ребро подсумаемого веса
[55:16.240 --> 55:21.240]  тоже является безопасным. Т.е. ребро подсумаемого веса, если пересекать кромлет, тоже может быть без оттахов.
[55:21.240 --> 55:25.240]  Просто лемма, я не знаю, просто лемма делает повышение прорыва и минимального веса.
[55:25.240 --> 55:32.240]  Но в теории, ребро подсумаемого веса тоже могут быть оттахованы, тоже могут быть без оттахованы.
[55:33.240 --> 55:34.240]  Дальше.
[55:34.240 --> 55:36.240]  А-а-а.
[55:36.240 --> 56:02.240]  Я тогда, вот такая ситуация.
[56:03.240 --> 56:04.240]  Дальше.
[56:24.240 --> 56:25.240]  Что?
[56:25.240 --> 56:28.240]  Вот, хороший вопрос.
[56:28.240 --> 56:29.240]  А-а-а.
[56:29.240 --> 56:35.240]  Вот, короче, по этому надо, на самом деле, однозначно сказать, является ли это точка сошинения или нет, нельзя.
[56:35.240 --> 56:39.240]  Потому что у нас для корни сошинения есть два притерии.
[56:39.240 --> 56:43.240]  Первый притерий для корня, второй притерий для не корни.
[56:43.240 --> 56:46.240]  Вот, если любой притерий является корнем, тогда будет точка сошинения.
[56:46.240 --> 56:51.240]  Если любой является корнем, то тогда ничего сказать нельзя. Понятно?
[56:51.240 --> 56:54.240]  Нормально?
[56:54.240 --> 57:00.240]  Вот, поэтому, по этой информации, не достаточно информации о том, что вы говорите, является ли это точка сошинения или нет.
[57:00.240 --> 57:07.240]  Потому что тут мы должны полностью понять, а вообще говоря, являлось ли это корнем, по поводу дерева, по поводу глубину или нет.
[57:07.240 --> 57:09.240]  Ну вот.
[57:09.240 --> 57:15.240]  Ну и, в принципе, все.
[57:15.240 --> 57:18.240]  В общем, с темой характерической пути.
[57:19.240 --> 57:21.240]  Мы на канале уже закончили.
[57:21.240 --> 57:23.240]  Следующий у нас будет еще один большой пункт.
[57:23.240 --> 57:27.240]  А, просто, следующий раз мы начнем прямо в потоке.
[57:27.240 --> 57:30.240]  Ну, какая самая тема.
[57:30.240 --> 57:33.240]  Ну все, давайте перерыв.
