[00:00.000 --> 00:10.280]  Ну вот, мы с вами говорим немножко про другие вещи, а именно про динамическое
[00:10.280 --> 00:18.200]  программирование. Что мы говорим про динамическое программирование? Ну, в первую очередь мы сейчас,
[00:18.200 --> 00:23.960]  конечно, решаем задачу о наибольшей общей подпоследовательности, но для разминочки мы
[00:23.960 --> 00:31.400]  воспомним немножко другое, а именно задачу о наибольшей возрастающей подпоследовательности. Ну,
[00:31.400 --> 00:39.440]  думаю, сталкивались с такой задачей, да? Ну, действительно, да, это действительно классическая
[00:39.440 --> 00:44.680]  задача, в которой там стандартная динамика решается за квадрат, наверное, даже с постановлением
[00:44.680 --> 00:52.480]  ответа, не правда ли? Вот, разумеется. Вот, но возникает вопрос, можно ли оптимизировать это
[00:52.480 --> 01:01.960]  решение до N лог N? Да, вопрос даже не можно или нельзя, а вопрос, сколько способов вы знаете?
[01:01.960 --> 01:26.000]  Ну вот, да, я тоже, и вот, ой-ой-ой-ой, кошмар, да, НВП со сплей деревом, замечательно, да, а может
[01:26.000 --> 01:35.080]  лучше? Ну, так же, как с декартией. Нет, хотя тут давайте разбираться, потому что, на самом деле,
[01:35.080 --> 01:40.160]  есть подозрение, что, когда говорим, что, ну понятно там, как делать с ДО, могут возникнуть
[01:40.160 --> 01:47.760]  принципиально разные решения, на самом деле. Вот, потому что давайте скажу, что сейчас первым пришло в
[01:47.760 --> 01:55.800]  голову мне. Нет, бинпоиск это другой способ, не будет. Значит, смотрите, итак, что мы делаем?
[01:55.800 --> 02:04.880]  Значит, нам очень-очень, ну, вот, ну, здесь, значит, какие у нас варианты есть? Есть вариант такой,
[02:04.880 --> 02:15.720]  значит, вот у нас есть массивчик какой-нибудь там, а1, а2, там, а3 и так далее. Вот, нам очень хочется
[02:15.720 --> 02:26.520]  насчитать какую-то динамику вида ДПИТ, равно там, значит, там, один плюс максимум там, по всем
[02:26.520 --> 02:38.200]  ж меньше и и ажи ты меньше аи, там ДПЖТ. Так, вроде, ну, думаю, динамика, вроде, никого сильно не
[02:38.200 --> 02:44.640]  удивляет, да, конечно. Вот, ну, давайте, короче, вопрос, как искать? Ну, идея такая, а давайте, ну,
[02:44.640 --> 02:49.720]  в стандартный способ, давайте перебирать и от 1 до n, и для каждого и и до ДПИ так честно искать,
[02:49.720 --> 02:56.360]  но возникает какая идея? А вот какая-то идея, но раз мы, у нас не только ж меньше и и ажи должно
[02:56.360 --> 03:03.440]  быть меньше аи, так давайте перебирать, а перебирать эти числа не в порядке возрастания
[03:03.440 --> 03:13.480]  индекса, а в порядке возрастания самих чисел аи. Да, вот такое вот неожиданное решение. То есть,
[03:13.480 --> 03:19.980]  давайте просто вот в порядке возрастания аи перебирать. Ну, а во всех ДП, которые не вычислены,
[03:19.980 --> 03:25.800]  писать минус бесконечность. То есть, это приведет к тому, что ДПЖТ будет вычисляться, конечно,
[03:25.800 --> 03:29.520]  достаточно рандомно, то есть, там, тут будет появляться один, тут там будет появляться,
[03:29.520 --> 03:34.120]  тут какая-то двойка будет появляться, может, тут тройка, тут еще один, там и так далее, потом тут
[03:34.120 --> 03:43.920]  где-то еще тройка появится, но фишка в том, что, но фишка будет в том, что на самом деле вот этот
[03:43.920 --> 03:48.280]  вот максимум ДП при условии того, что везде, где не написано, написано минус бесконечность,
[03:48.280 --> 03:53.520]  приводит к тому, что вам просто нужно найти максимум на префексе, а это можно сделать уже
[03:53.520 --> 03:59.440]  там деревом отрезков, а в данном случае даже фенвиком, потому что максимум на префексе,
[03:59.440 --> 04:06.640]  элементы у вас только увеличиваются очень удобно, вот, но обычно, вот, ну, обычно, как мне кажется,
[04:06.640 --> 04:10.680]  если говорят, что там написать ВП с деревом отрезков, то подразумевается, вот, примерно,
[04:10.680 --> 04:21.040]  что-то подобное, или может быть, у вас есть другие версии, другие, какие, нет, не подразумевается.
[04:30.440 --> 04:40.800]  Ну, хотя, хотя, возможно, это нас приведет немножко к другому, просто ко второму способу,
[04:40.800 --> 04:45.760]  в прочем, да, не-не-не-не, ну, потому что второй способ обычно говорят, что он никакого отношения
[04:45.760 --> 04:52.760]  к ДО не имеет, то есть, кто-то и прикол, что там, для этого способа нужно писать там дерево отрезков,
[04:52.760 --> 04:58.640]  или фенвикам, вот, то есть, ну, там, фенвик, она вспоминает какие-то эти битвы, операции непонятные,
[04:58.640 --> 05:07.760]  вот, хотя, второй способ, на самом деле, звучит так, то есть, на самом деле, второй способ звучит так,
[05:07.760 --> 05:13.080]  мы идем слева направо, то есть, на этот раз ДПИТ, мы прямо в порядке возрастания ИИ вычисляем,
[05:13.080 --> 05:19.280]  но, на самом деле, вот эту формулу можно переписать по-другому, вместо этого можно написать,
[05:19.280 --> 05:34.560]  что ДПИТ равно, на самом деле, один плюс, там, максимум из таких, ну, допустим, к, вот, что
[05:34.560 --> 05:51.600]  существует, значит, g меньше i, там, а jt меньше, соответственно, аитова, такое, что ДП jt равно k,
[05:51.600 --> 06:05.280]  вот это экзотично немножко написал, да, то есть, ну, хотя, делаю я абсолютно то же самое, то есть,
[06:05.280 --> 06:11.600]  я перебираю все, все жишки, которые меньше i, у которых ажитое меньше, чем аи, и среди них нахожу
[06:11.600 --> 06:18.240]  максимальное ДП, но, в общем, тоже, в общем, ладно, ничего нового я не писал, как это
[06:18.240 --> 06:25.080]  непридоксально звучит, вот, зачем же я так заморучился, то есть, я что-то переписал, так, идея у меня такая,
[06:25.080 --> 06:37.640]  давайте я попытаюсь для каждого потенциального к хранить минимальное ажитое, то есть, минимальное такое
[06:37.640 --> 06:44.520]  ажитое, соответственно, у которого в соответствующей ДП шка равна к, то есть, вот такая неожиданная,
[06:44.520 --> 06:55.400]  в скобках нет идеи, назовем мы ее, господи, как мы ее назовем-то, не будем заморачиваться,
[06:55.400 --> 07:09.600]  то есть, давайте скажем, что bkt, где k у меня равно там от 0 до n, это будет минимальное такое ажитое,
[07:10.480 --> 07:23.560]  в каждый момент времени, что ж меньше и ДП житое равно к, вот, понятно, да, а еще для удобства мы, конечно,
[07:23.560 --> 07:34.880]  заявим, что а0 у нас будет считаться минус бесконечностью и ДП0 у нас будет равно 0,
[07:34.880 --> 07:53.760]  ну, чтобы совсем корректно было, вот, понятно, вот, значит, что можно, по идее, про эту бэшечку сказать,
[07:53.760 --> 08:03.240]  ну, возникает жуткое ощущение, что, ну, особое мистическое утверждение заключается в том,
[08:03.240 --> 08:22.760]  что для любого k меньше n, верно, что b от k меньше, чем b от k плюс 1, внимание, вопрос,
[08:22.760 --> 08:38.280]  где ошибка в этом утверждении, либо равно, или да, да, ну, тогда будет верно, но не точно,
[08:38.280 --> 08:46.600]  вот как бы это максимально точно написать, как вы думаете,
[08:46.600 --> 08:50.880]  нет, как плюс один на месте,
[09:07.080 --> 09:09.880]  но я утверждаю, что это утверждение надо дописать,
[09:16.600 --> 09:32.400]  нет, никаких проблем нет, понятно, что минимум пустого множества, естественно, равен плюс
[09:32.400 --> 09:37.000]  бесконечности, но с другой стороны, ничего страшного, как бы kt может быть меньше плюс
[09:37.000 --> 09:39.840]  бесконечности, это как бы никаких противоречий нет,
[09:46.600 --> 10:03.600]  тут вопрос уточнения немножко в другом, хотя близко, да, совершенно верно,
[10:03.600 --> 10:16.640]  да, совершенно верно, вообще утверждение звучит, конечно, так, ведь вполне вероятно,
[10:16.640 --> 10:21.920]  особенно для маленьких i, если i маленькая, а k большое, то понятно, что эти b просто равны
[10:21.920 --> 10:36.680]  плюс бесконечности, такой дпшки просто еще нет, вот, но вот, в результате это приводит нас к
[10:36.680 --> 10:42.280]  следующему, то есть на самом деле, так как пассив b возрастающий, то каждое новое дпит,
[10:42.280 --> 10:50.120]  то есть для каждого нового дпитого на самом деле там можно найти подходящий индекс просто
[10:50.120 --> 11:03.040]  бинарным поиском, потому что, то есть просто следствием является так, что дпит, то есть равно
[11:03.040 --> 11:16.680]  получается один плюс максимальное такое k, чтобы kt меньше, чем аит, или даже вот,
[11:16.680 --> 11:25.520]  даже если равно, я по-другому напишу, минимум таких k, чтобы от k больше либо равен аитам,
[11:25.520 --> 11:39.640]  то есть вот такая вот красота, ну естественно, да, то есть это если вот b определено именно для
[11:39.640 --> 11:43.640]  i, видите, то есть на самом деле вот я массив b определил для вот фиксированного индекса i,
[11:43.640 --> 11:49.160]  но с другой стороны, как только вы дпит посчитали, то массив b обновить для i плюс один очень просто,
[11:49.160 --> 12:10.880]  правда, вот, согласны, вот, где, вот здесь, но плюс бесконечность будет больше либо равно,
[12:10.880 --> 12:25.920]  в чем проблема, нет, смотрите, мы специально для этого себе прописали, что а нулевое равно
[12:25.920 --> 12:32.480]  минус бесконечности, автоматически объявляется, что там b нулевое, конечно, тоже равно минус
[12:32.480 --> 12:43.000]  бесконечности, вроде автоматически всего этого следует, вот, так что такое k всегда будет существовать,
[12:43.000 --> 12:52.200]  пусть даже нулевое, вот, то есть более того его еще апдейтить достаточно просто, потому что есть
[12:52.200 --> 12:56.600]  еще такое просто мистическое утверждение, которое на самом деле может иногда поразить,
[12:57.560 --> 13:05.800]  поразить, называть там кого-нибудь на какой-нибудь математике, потому что еще есть такое утверждение,
[13:05.800 --> 13:17.600]  я еще такое добавлю, пусть у вас оказалось, что значит 1 меньше либо равно g1 меньше g2 меньше g3 меньше,
[13:17.600 --> 13:28.080]  но я в таком виде сформулирую меньше g1 меньше либо равно n и оказалось, что dp от g1 равно dp от g2 равно
[13:28.080 --> 13:44.000]  и так далее равно dp от g1, тогда утверждаю я а g1 больше либо равно а g2 больше либо равно и так далее
[13:44.000 --> 13:56.280]  больше либо равно а g l, но если вдуматься в утверждение, оно становится очевидным просто
[13:56.280 --> 14:04.400]  через пересчет динамики, но правда в итоге из этого появляется, знаете, теория, которая на
[14:04.400 --> 14:10.360]  самом деле может, то есть если это может быть на дискретке, может случайно на занятии возникнуть,
[14:10.360 --> 14:19.400]  можно олимпиадах по математике кто-то такую даже встречал, значит задача дана последовательности с
[14:19.400 --> 14:29.400]  pq плюс одного числа, докажите, что существует либо возрастающая p plus 1 последовательность,
[14:29.400 --> 14:34.760]  либо последовательность длины p plus 1, либо невозрастающая длины q plus 1,
[14:34.760 --> 14:52.360]  знакомая задача, в таком виде не сталкивался, ну вот, а там используется, ну бывает,
[14:52.360 --> 15:02.720]  ну можно и так сказать, кстати, интересное следствие, да, действительно, да, из этого в принципе
[15:02.720 --> 15:08.800]  следует, что в любой последовательности длины n и c попарно различных чисел, либо возрастающая,
[15:08.800 --> 15:15.520]  либо убывающая последовательность длины q и n найдется, такое приятное как неушное свойство,
[15:15.520 --> 15:23.840]  но я вот формулирую именно для p q plus 1, так надо записать или условия понятно, так есть кто живой
[15:23.840 --> 15:31.520]  вообще, то есть еще раз, то есть когда у нас есть, я хотя бы запишу, красивая сериала зараза, конечно,
[15:31.520 --> 15:43.400]  то есть просто сериала, пусть n равно p q plus 1, все p q не обязательно простые, то есть я так
[15:43.400 --> 15:52.960]  просто красивые буквы подобрал, тогда в последовательности, значит, там соответственно
[15:52.960 --> 16:16.120]  а1 и так далее, а n нод найдется, то есть я как-то сформулировать сериал так, чтобы испариться от
[16:16.120 --> 16:21.160]  слова либо я что-то русским языком не владею, хотя бы шо.
[16:46.120 --> 16:53.120]  ну либо да нет, как бы хочешь, хочешь это либо, но слово либо оно не точно, потому что оно как бы
[16:53.120 --> 16:58.000]  жестко говорит, потому что слово либо формально подразумевает, что найдется либо то, либо то,
[16:58.000 --> 17:06.800]  одновременно не найдется, а это заведомо чушь. найдется, ну давайте или найдется или, ну тоже как-то
[17:06.800 --> 17:33.040]  не кузяло, ну вот, ладно, придется так писать, верно, хотя бы, а да нод, и следующих утверждений,
[17:33.040 --> 17:48.360]  утверждение, значит первое, да, найдется, даже уже не найдется, а существует, стоит
[17:48.360 --> 18:05.160]  возрастающая под последовательность длины больше, но длины п плюс один, существует не возрастающая
[18:05.160 --> 18:19.440]  под последовательность, возрастающая под последовательность длины q плюс 1, вот такое утверждение,
[18:19.440 --> 18:33.640]  но как сказать, все числа могут быть равны, и тогда убывающий, не убывающий, не возрастающий не
[18:33.640 --> 18:42.640]  существует, не, я лично, я не оговаривался, вот, нет, согласен, если бы эти числа были попарно
[18:42.640 --> 18:52.040]  различные, тогда да, конечно, но вот мы сформулируем в чуть более общем виде, вот, да, но на самом деле,
[18:52.040 --> 18:55.760]  знаете, такая вот, знаете, вот есть так, вот в олимпиадах по математике есть такой набор задачи,
[18:55.760 --> 19:03.640]  которые на самом деле там олимпиадик по информатике решить на раз, ну вот, а какой-нибудь олимпия,
[19:03.640 --> 19:10.080]  какой-нибудь не меньше отношение к информатике может несколько зависеть, вот, потому что на самом
[19:10.080 --> 19:16.120]  деле, пока олимпиадик пытается придумать олимпиадик по информатике, заявляет, посчитаем вот эту
[19:16.120 --> 19:24.440]  динамику, вот, ну он просто в этих терминах мыслит, да, и тогда что мы обнаружим, либо у нас, либо у нас
[19:24.440 --> 19:32.720]  обнаружится ДП, ДП п плюс один, либо у нас окажется, что все ДП не превосходят П, но тогда по,
[19:32.720 --> 19:40.000]  тут информатика случайно знает такое словосочетание, принцип тирихле, ну, ну, бывает такое,
[19:40.000 --> 19:46.160]  встречаются такие информатики, да, которые знают это словосочетание, да, вот, так вот, найдется такое
[19:46.160 --> 19:51.840]  значение ДП, непонятно, кстати, какое заранее, но, тем не менее, найдется, которое встречается хотя бы
[19:51.840 --> 19:59.520]  П плюс один раз, логично, да, но вот тогда по этому утверждению, значит, оно нам, там по нему получаем
[19:59.520 --> 20:07.680]  не возрастающую подпоследовательность, все, вот, так что, как говорится, занимайтесь олимпиадами по
[20:07.680 --> 20:26.640]  информатике, выигрывайте юмор, да, не обязательно, ну, да, разные значения гарантируют, как бы,
[20:26.640 --> 20:33.360]  не возрастание, но там, сколько она строго, непонятно, вот, ну, легко привести, кстати, да, если в N равно PQ,
[20:33.360 --> 20:39.560]  то достаточно легко привести пример, когда нет ни того, ни другого, естественно, ну, там, понятно, там,
[20:39.560 --> 20:48.640]  что-нибудь там, вот, так что, да, хотел вспомянуть, потому что, конечно, как-то без этой маленькой
[20:48.640 --> 20:57.480]  жемчужинки, как-то, называется ими-ними, вот, ну, а теперь кто-то возникает, ну, если возвращаться к
[20:57.480 --> 21:03.880]  программированию, то тут возникает вопрос, как это закодить, вот, вот тут мы немножко поговорим,
[21:03.880 --> 21:08.160]  как закодить, потому что, на самом деле, если побежать это кодить прям по улучшению, давайте
[21:08.160 --> 21:12.720]  честно писать бинпоиск, то, конечно, можно написать кодосопоставимый с деревом отрезков,
[21:12.720 --> 21:19.800]  ножом, потому что дерево отрезков снизу пишет, может быть, даже едва ли не столько же строчек,
[21:19.800 --> 21:27.280]  сколько бинпоиск какой-нибудь, хотя, ладно, этот бинпоиск, конечно, мало пишет, но на самом деле
[21:27.280 --> 21:34.080]  конечно у этого конкретно, да, у конкретного этого бинпоиска, конечно, на самом деле реализация
[21:34.080 --> 21:39.880]  оказывается очень проста, вот, то есть настолько проста, что я сейчас даже просто могу на доске
[21:39.880 --> 21:46.960]  и написать, значит, что же у нас тут получается, ну, да, но вот, ну, просто так и пишем, что b присвоит
[21:46.960 --> 21:51.760]  там, соответственно, минус бесконечность, плюс бесконечность, плюс бесконечность и так далее,
[21:51.760 --> 21:59.840]  плюс бесконечность, ну, там, как вы уже договаривались, dp нулевое равно нулю, значит, дальше пишем,
[21:59.840 --> 22:09.760]  for int и равно один и меньше либо равно n плюс плюс и, ну, допустим, у нас там массив а в один
[22:09.760 --> 22:22.000]  адексации живет, вот теперь как найти dp, очень просто, значит, dp и t равно lower bound,
[22:22.000 --> 22:34.720]  вот, ну, допустим, у нас все в векторах, тогда будем b.begin, b.end и, соответственно,
[22:35.080 --> 23:01.960]  minus b.begin, вот dp и t посчитали и, конечно же, b.dp и t равно a.it, вот, и теперь будет какой-то вопрос,
[23:01.960 --> 23:08.240]  как найти, собственно, ответ на задачу, как найти длину под последовательность, ну, еще одной простой
[23:08.240 --> 23:31.800]  строчкой ans или даже int ans равно звездочка max element от dp.begin dp.end, вот, то есть,
[23:32.280 --> 23:36.080]  типичный пример того, как str позволяет вам сократить код просто в несколько раз,
[23:36.080 --> 23:47.800]  так, ну, уже обсуждали, наверное, стрельда, нет, ну, придется пояснить, ладно, нет, ну,
[23:47.800 --> 23:52.680]  на всякий случай, то есть, надо, может быть, напомню для, может быть, кого-то из телезрителей,
[23:52.680 --> 24:00.040]  я не знаю, вот, в том плане, что lower bound, это не только метод в сете, но и алгоритм,
[24:00.040 --> 24:06.680]  то есть, алгоритм, который передается на вход массив в виде двух итераторов, ну,
[24:06.680 --> 24:12.720]  или, кстати, если был массив, я бы написал b.b plus n, например, да, вот, и который в нем бинпоиском
[24:12.720 --> 24:18.720]  пытается найти вот этот элемент a.it, но если быть точнее, минимальный элемент, который не меньше
[24:18.720 --> 24:24.240]  его, но важный момент, возвращает он, естественно, итератор, то есть, он возвращает не сам элемент,
[24:24.240 --> 24:28.760]  а итератор на него, поэтому, чтобы получить его индекс, я просто из него вычитаю b.begin.
[24:28.760 --> 24:33.800]  Вот, а чтобы найти максимальный элемент, то есть, на самом деле, у нас в Estelle алгоритм на
[24:33.800 --> 24:38.400]  это тоже есть, то есть, там, вот специальный вот этот вот форик, там, три строчки писать не надо.
[24:38.400 --> 24:54.280]  Может. Бинпоиск. А, да, да, да, да, ну, да, да, да, ну, знаете, нет, ну, как сказать,
[24:54.280 --> 24:59.160]  понимаете, да, как говорится, да, но все такие идеи мы отправляем в Индию, как говорится,
[24:59.160 --> 25:03.160]  да, чтобы познакомиться с настоящим гуру программирования, который проверяет
[25:03.160 --> 25:12.080]  истинность булевской переменной, там, кодом вида if fl.toostring.length меньше либо равно 4.
[25:12.080 --> 25:32.680]  Меньше либо равно, потому что если флаг какой-то булев.
[25:32.680 --> 25:38.760]  Ну, я не помню там, как у него конкретно флаг был. Ну, в Олимпиадах вряд ли, но какие-то примеры там
[25:38.760 --> 25:46.320]  на всяких мемасах такие ходят. Задача у вас булевая переменная, да. Хочется проверить,
[25:46.320 --> 25:55.880]  истинная ли она. Пишем. Переводим ее в строчку. Вычисляем длину этой строчки. Ажа. Да, там,
[25:55.880 --> 26:05.400]  джавайный, по-моему, код, но он как бы не догадался, что в джаве то существует там if fl,
[26:05.400 --> 26:26.000]  то есть в джаве это так тоже можно. Не знаю. Не, это было дотчат, дотчат gpt. Ну, окей, ну может
[26:26.000 --> 26:43.760]  быть, может быть. Ну, я не знаю, с вот этим вот нас будет захватывать. Ну, удачи.
[26:56.000 --> 27:06.680]  Ого. Да-да-да-да. А потом, видимо, код сломается, потому что правильный перевод на русский будет
[27:06.680 --> 27:17.920]  в истину. Или совсем настоящий хацкер, и там старожилы перейдут на улбанский. Нет, там будет
[27:17.920 --> 27:25.400]  подлянка. Длина правды будет 4. Правда, почему-то эти 4 буквы будут вот такие,
[27:25.400 --> 27:32.080]  но это уже и код меньше либо равно тоже сломается, потому что как будет false.
[27:32.080 --> 27:49.040]  Так, господи, господи, ваше господи, жизни не нюхали, улбанский не учили. Кошмар, да. То есть
[27:49.040 --> 27:58.640]  там слово упячка вам, видимо, ничего не говорит. Там упячка. Ну да-да-да, господи, был я первокурор,
[27:58.640 --> 28:04.840]  у меня на шкафу там плакат висел со всеми этими словами этого безобразия. Может там 4 общаги где-то
[28:04.840 --> 28:17.360]  и висит. Ой, да-да-да, со всеми онотолями там всякими и вот это все. Нет, ну господи,
[28:17.360 --> 28:26.280]  ладно. Ну в конце концов, мало ли. Ладно, значит, это если говорить про наибольшую
[28:26.840 --> 28:32.760]  подпоследовательность, хотелось ее просто упомянуть, потому что есть. Значит, смотрите,
[28:32.760 --> 28:38.600]  к чему еще можно вернуться? Еще, конечно, можно вернуться к наибольшей общей подпоследовательности.
[28:38.600 --> 28:44.680]  Вот, но здесь тоже давайте немножко еще прозминается, ну даже не столько прозминается,
[28:44.680 --> 28:50.680]  что-то там у меня еще просто пару задач есть, хочется рассказать. А задача такая, даны две
[28:50.680 --> 28:59.200]  последовательности. Гарантируется, что каждый элемент, что каждая последовательность состоит
[28:59.200 --> 29:07.560]  из попарно-различных чисел. Вот каждый из последствий состоит из попарно-различных чисел.
[29:07.560 --> 29:15.320]  Внимание, вопрос. Закройте нот. Как бы найти NOP? Естественно, не за квадрат.
[29:15.320 --> 29:36.560]  Так, вычислить. Нет, давайте не путать это NOP, расстояние хэйбинга. Так, ну-ка, давайте-ка.
[30:15.320 --> 30:32.640]  Да, метод 4-х русских не предлагать.
[30:32.640 --> 30:56.240]  Да, вот все решение. Можно даже особо не сжимать. То есть, давайте там
[30:56.240 --> 31:03.280]  переменуем элементы так, чтобы первая последовательность была просто как 1, 2, 3, 4 и так далее. А во второй
[31:03.280 --> 31:08.640]  последовательности тоже поставим, если элемент есть в этой последовательности, то заменим его на
[31:08.640 --> 31:14.120]  индекс, если нет, то уберем, все равно не на что не влияет. И тогда после этого задача вас ведется к
[31:14.120 --> 31:32.040]  найдите NWP. Все, как вы только что. Вот эти вот не сильно сложные коды.
[31:32.040 --> 31:41.000]  Да, мы предполагаем, что в каждой последовательности все элементы попарно-различны, хотя самое
[31:41.000 --> 31:46.880]  веселее, что достаточно, чтобы только в первой. Нет, на самом деле это совершенно верно, совершенно верно.
[31:46.880 --> 31:56.600]  Вот, да теперь высказывайте вопрос. Хорошо, ну мы NWP, ну это да. Ну вот, ну на самом деле просто
[31:56.600 --> 32:00.560]  я сейчас вспоминаю, потому что когда-то много лет назад, на самом деле у этой задачи еще второе
[32:00.560 --> 32:27.920]  решение было с помощью деревоотресков. Ну, по факту то же самое. Ладно, повысим планочку.
[32:27.920 --> 32:36.040]  А что делать, если дубликаты есть, но гарантируется, что каждый элемент встречается в последовательстве не
[32:36.040 --> 32:46.880]  более чем три раза. Нет, в случае K, конечно, но как бы белка, типа вот пусть будет 3, хотя можно.
[33:16.880 --> 33:24.160]  Не меняться, просто давайте мы вектор хранительного числа в втором массиве не только одно число, а все три, например,
[33:24.160 --> 33:29.080]  и будем через них всех пересчитываться. А что нахит хранить все три?
[33:29.080 --> 33:36.280]  Даже если есть равные элементы, то у тебя все равно он найдет ответ, корректно, если даже будет равный элемент.
[33:36.280 --> 33:46.840]  Если ты также пронумеруешь в первом массив 1, 2, 3, 4, N, то из всех равных элементов ты будешь хранить через всех них,
[33:46.840 --> 33:52.680]  которые у тебя совпадают. В втором массиве для индекса будут хранить K, какими он может быть значениями в первом массиве.
[33:52.680 --> 34:12.720]  Нет, там да, да, вылазит, да, но да, то есть да, действительно, оказывается, да, правда, тут, правда, нужна некоторая аккуратность.
[34:12.720 --> 34:20.320]  Потому что, да, идея действительно оказывается такая, что если у вас, допустим, тут какая-нибудь там, там какой-нибудь у вас тут
[34:20.760 --> 34:42.440]  Абабац случился, ну вот, а у вас тут какая-нибудь там, еще что-нибудь, там какая-нибудь Аббацца, ББ, вот, то действительно хочется, конечно, сказать,
[34:42.440 --> 34:49.840]  что давайте на каждое место, каждые Ашечки писать прям честно индексы, в которых она встречается первая в первом массиве.
[34:49.880 --> 35:00.560]  То есть давайте так и писать, там 1, 3, 5, я буду в один индексации писать, Б, пишем там 2, 4, 2, 4, 1, 3, 5, там соответственно, что там еще?
[35:01.920 --> 35:10.720]  С, там 6, 1, 3, 5, 2, 4, 2, 4. И хочется в этой последовательности просто найти наибольшую возрастающую, как в прошлый раз.
[35:10.720 --> 35:23.480]  Да, но теперь еще фишка, что нам бы желательно из каждого вот этого блока, конечно, брать не более одной чиселки.
[35:23.480 --> 35:32.040]  Поэтому, конечно же, на самом деле так писать не надо, а, конечно, все эти индексы надо писать в такой маленький технический нюанс в порядке убывания.
[35:32.040 --> 35:36.640]  Да, прям вот так вот в наглое.
[35:38.640 --> 35:45.840]  Вот, да, есть вот такое красивое решение, работает оно, получается, за nk квадрат лог n.
[35:45.840 --> 35:49.840]  Ладно, вру.
[35:49.840 --> 35:52.840]  Согласен, согласен.
[35:52.840 --> 35:59.640]  Ну, если у вас, ну, к, это вот этот констант, который в нашем случае тройка.
[36:02.640 --> 36:11.640]  Ну, потому что, если мы гарантируем, что в первом массиве каждого индекса не более чем k раз, то мы на месте каждого элемента во втором массиве поставим не более чем k индексов.
[36:11.640 --> 36:14.640]  Получается nk.
[36:14.640 --> 36:16.640]  Вот.
[36:16.640 --> 36:29.640]  Так что вот, в принципе, вот, то есть иногда, да, но то правда заметить, что это означает, наоборот, что различных элементов в строке оказывается очень много.
[36:30.240 --> 36:32.240]  Вот.
[36:32.240 --> 36:35.240]  Это вы хотите работать не в случайных данных?
[36:35.240 --> 36:37.240]  Ну, да.
[36:37.240 --> 36:39.240]  Ну, типа того, да.
[36:39.240 --> 36:42.240]  Но, правда, в случайных данных еще и с большим алфавитом, что характерно.
[36:42.240 --> 36:47.240]  Потому что, да, если у вас там буква строчится tsa и beta, то, в общем-то, это неприменимо.
[36:47.240 --> 36:49.240]  Вот.
[36:49.240 --> 36:54.240]  Да, поэтому русский лучше, да.
[36:54.240 --> 36:56.240]  Да, чуть-чуть буквально.
[36:56.840 --> 36:58.840]  Вот.
[37:00.840 --> 37:02.840]  Титайский бог.
[37:02.840 --> 37:04.840]  Ладно.
[37:04.840 --> 37:05.840]  Хорошо.
[37:05.840 --> 37:08.840]  Ладно, повысим планочку.
[37:08.840 --> 37:15.840]  Вот, повысим планочку, обсудим алгоритм, который на прошлом четверть финале мог бы вам даже очень сильно помочь.
[37:15.840 --> 37:18.840]  Да.
[37:18.840 --> 37:21.840]  Не, ну, на этом уже не интересно, да, но.
[37:21.840 --> 37:23.840]  Ну, мало ли.
[37:23.840 --> 37:25.840]  Нет, ну, как сказать.
[37:25.840 --> 37:27.840]  Потому что кто-то прямо вот.
[37:27.840 --> 37:29.840]  Ну, вот.
[37:29.840 --> 37:31.840]  То есть, да.
[37:31.840 --> 37:33.840]  Значит, потому что...
[37:33.840 --> 37:36.840]  Потому что, на самом деле, чем отличается еще задача nop?
[37:36.840 --> 37:41.840]  Она отличается тем, что в ней еще как-то надо желательно восстановить ответ.
[37:43.840 --> 37:44.840]  Казалось бы, это...
[37:44.840 --> 37:46.840]  Ну, казалось бы, это несложно, да.
[37:46.840 --> 37:51.840]  Ну, потому что технологии восстановления ответа в задаче nop2.
[37:51.840 --> 37:57.840]  То есть, либо вы параллельно с массивом dp храните, собственно, какой-нибудь массив pr,
[37:57.840 --> 38:01.840]  где для каждого элемента храните, откуда вы максимум взяли, да.
[38:01.840 --> 38:07.840]  Либо, пользуясь тем, что вариантов у вас там было небогато, собственно, там идете по самому массиву dp
[38:07.840 --> 38:11.840]  и прямо на каждом шаге перевычисляете, откуда вы этот максимум взяли.
[38:12.840 --> 38:13.840]  Вот.
[38:13.840 --> 38:18.840]  Но оба этих варианта требуют допамяти от n2.
[38:18.840 --> 38:20.840]  Я бы сказал т, а, т квадрат, правда?
[38:22.840 --> 38:23.840]  Вот.
[38:23.840 --> 38:25.840]  А теперь внимание, вопрос.
[38:25.840 --> 38:31.840]  А как бы восстановить эту nop за oatn дополнительной памяти?
[38:31.840 --> 38:33.840]  Ну, даже не восстановить, а просто задача.
[38:33.840 --> 38:39.840]  Найти nop, причем не длину nop, не вот эта вот ваша 42, а саму nop.
[38:40.840 --> 38:41.840]  Ну вот.
[38:41.840 --> 38:43.840]  И при этом потратить oatn памяти.
[38:45.840 --> 38:46.840]  Да.
[38:46.840 --> 38:50.840]  Причем, да, обратите внимание, да, смотрите, как вы в прошлый раз убедились,
[38:50.840 --> 38:54.840]  быстрее, чем zn2, в общем случае, эту задачу по времени решить нельзя в принципе.
[38:54.840 --> 38:55.840]  Ну, да.
[38:55.840 --> 39:02.840]  Там вроде типа можно, если пока без ответа, мы можем хранить последний слой.
[39:02.840 --> 39:03.840]  Да.
[39:03.840 --> 39:05.840]  Да, вот это да, действительно да.
[39:05.840 --> 39:08.840]  А как делать оптимизацию?
[39:08.840 --> 39:10.840]  Походу к конечку как можно?
[39:10.840 --> 39:18.840]  Нет, нет, нет, смотрите.
[39:18.840 --> 39:20.840]  Да, но начнем действительно с такой идеи.
[39:20.840 --> 39:23.840]  Вы помните, что nop считается динамикой какой?
[39:23.840 --> 39:31.840]  Вида dp it jt равно, условно говоря, 1 плюс dp i-1 j-1.
[39:31.840 --> 39:36.840]  Если оказалось, что a it равно b jt.
[39:36.840 --> 39:48.840]  Да, и там максимум из dp it j-1, там запятая dp i-1 j, соответственно, иначе.
[39:51.840 --> 39:53.840]  Вообще вот так было, да?
[39:53.840 --> 40:00.840]  Вот, замечаем, да, динамика подозревает то, что на самом деле хранить можно всего лишь два слоя.
[40:00.840 --> 40:02.840]  Логично, да?
[40:02.840 --> 40:07.840]  То есть как бы понятно, тот, который вы пересчитываете и предыдущий.
[40:07.840 --> 40:11.840]  На самом деле это страшную тайну, можно хранить один.
[40:11.840 --> 40:15.840]  Да.
[40:15.840 --> 40:26.840]  Потому что можно бежать, просто когда вы именно с первым слой превращаете в it, вы можете сказать, что просто там какая-то житая переменная равна максимум из того, что было в ней раньше.
[40:26.840 --> 40:31.840]  А хотя нет, вот это вам пригодится.
[40:31.840 --> 40:37.840]  Ну да, вот это вот классика.
[40:37.840 --> 40:43.840]  Да, проблема.
[40:43.840 --> 40:45.840]  Черт.
[40:45.840 --> 40:54.840]  Да нет, справа налево идти нельзя, потому что dp it jt нельзя пересчитать, потому что нету dp it j-1.
[40:54.840 --> 40:58.840]  А если слева направо идти, то как бы у вас...
[40:58.840 --> 41:06.840]  Да, хотя на самом деле заметим, что когда вы просто пересчитываете dp it jt, вы старое значение сохраните, потому что оно потребуется для следующего.
[41:06.840 --> 41:12.840]  Так оно потребуется только для следующего, то в общем-то от единицы вам память гарантирована.
[41:12.840 --> 41:20.840]  Ну да, согласен с таким выражением лица в принципе, но в принципе можно.
[41:20.840 --> 41:22.840]  Господи, да вот.
[41:22.840 --> 41:30.840]  Да, ну если стандартные такие технологии, в общем-то в задаче-рюкзаке там возникают похожие технологии.
[41:30.840 --> 41:38.840]  Вот, ну кстати, да, давайте еще можно, кстати, воспомнить, давайте быстренько еще и задачу о рюкзаке вспомнить, потому что сейчас она будет немножко родственницей.
[41:38.840 --> 41:42.840]  Ну давайте вспомним, о чем у нас задача о рюкзаке вообще заключается.
[41:42.840 --> 41:48.840]  Ну задача о рюкзаке можно там...
[41:48.840 --> 41:52.840]  Как бы ее сформулировать?
[41:52.840 --> 41:58.840]  Нет, там просто есть разные постановки.
[41:58.840 --> 42:00.840]  Ну ладно, давайте так возьмем постановку.
[42:00.840 --> 42:02.840]  Что сразу вор?
[42:02.840 --> 42:10.840]  Да, да, да, а там лежат анслитка в золото, замечательно.
[42:10.840 --> 42:20.840]  Ну да, да, да, да.
[42:20.840 --> 42:22.840]  Ну вот, хорошо.
[42:22.840 --> 42:24.840]  Ну ладно, давайте так.
[42:24.840 --> 42:30.840]  У нас есть N товаров.
[42:30.840 --> 42:32.840]  Хотя тут нет, просто разные...
[42:32.840 --> 42:36.840]  Ну ладно, у нас есть N товаров и каждый из них сколько-то весит.
[42:37.840 --> 42:45.840]  А еще каждый товар сколько-то стоит.
[42:45.840 --> 42:49.840]  А у нас есть, в соответствии с названием, рюкзак.
[42:49.840 --> 42:52.840]  Это мистический рюкзак, у него есть только одно ограничение.
[42:52.840 --> 42:58.840]  Мы можем утащить все что угодно суммарного веса, не более чем W большое.
[42:58.840 --> 43:01.840]  Причем на объем нам начхать.
[43:01.840 --> 43:03.840]  Как всегда.
[43:03.840 --> 43:09.840]  И вот спрашивается, какой там...
[43:09.840 --> 43:14.840]  Хочется утащить, конечно, набор товаров в этом рюкзаке максимальной ценности.
[43:14.840 --> 43:16.840]  Суммарный.
[43:19.840 --> 43:22.840]  Ну вот, сформулируем задачу так.
[43:25.840 --> 43:27.840]  Но как решается такая задача?
[43:27.840 --> 43:29.840]  Ну такая задача решается в общем тоже.
[43:29.840 --> 43:33.840]  Есть, конечно, решение за два в степени N.
[43:33.840 --> 43:38.840]  Но здесь, конечно, хитрый том, что если W требует большим, то заполеном от N,
[43:38.840 --> 43:46.840]  без учета W, это тоже человечество подозревает, что задача не решается.
[43:46.840 --> 43:50.840]  Вот опять же, человечество опять highly likely в этом месте.
[43:50.840 --> 43:54.840]  Но если W оказывается не сильно большим,
[43:54.840 --> 44:00.840]  то у нас оказывается замечательная динамика D,P,E,T,W маленькая.
[44:00.840 --> 44:06.840]  То есть E,T у нас от нуля до N, W у нас от нуля до W большого.
[44:06.840 --> 44:08.840]  Что это такое?
[44:08.840 --> 44:18.840]  То есть максимальная стоимость под множество первых...
[44:18.840 --> 44:20.840]  Под множество.
[44:26.840 --> 44:39.840]  Но товаров с индексами меньше либо равно E и суммарным весом.
[44:45.840 --> 44:47.840]  Допустим W.
[44:49.840 --> 44:54.840]  Ну там несколько динамик можно написать, то вроде в самой классической является вот такая.
[44:56.840 --> 44:58.840]  И тогда что же я тут должен написать?
[44:58.840 --> 45:05.840]  Ну очевидно, что D,P,E,T,W это равно максимум.
[45:05.840 --> 45:06.840]  То есть у нас два варианта.
[45:06.840 --> 45:08.840]  Либо брать E,T элемент, либо не брать.
[45:08.840 --> 45:13.840]  Если не брать, то получается D,P,E,T,W.
[45:13.840 --> 45:20.840]  А если брать, то D,P и минус первое W минус W,E,T.
[45:20.840 --> 45:26.840]  Ну там не буду сейчас писать эту уговорку на тему того, что если там W и больше, чем W.
[45:31.840 --> 45:35.840]  Но в принципе давайте упомянули, что вот такой рюкзак тоже есть.
[45:35.840 --> 45:40.840]  Да, да, да, спасибо.
[45:40.840 --> 45:43.840]  Да, плюс конечно же АИ, а то без этого что-то.
[45:46.840 --> 45:48.840]  Так, ну спрашивается.
[45:49.840 --> 45:54.840]  Ну, то есть решение работает за O от N на W.
[45:54.840 --> 45:58.840]  Но возникает вопрос, сколько памяти нам надо?
[45:59.840 --> 46:06.840]  Да, если предчислить эту D,P прям вот в таком виде, то конечно да, тут без вариантов.
[46:09.840 --> 46:12.840]  А можно ли насчитать эту динамику быстрее?
[46:13.840 --> 46:18.840]  Да, можно действительно насчитать за W.
[46:18.840 --> 46:21.840]  Причем на этот раз за W, а не за 2W, как в прошлый раз.
[46:21.840 --> 46:25.840]  Хотя в прошлый раз мы это сделали за N плюс 1 памяти.
[46:26.840 --> 46:32.840]  По сути, здесь получается буквально за W, потому что если мы бежим фориком справа налево,
[46:32.840 --> 46:37.840]  то как раз мы пересчитываем очередую D,P через себя и предыдущие, которые еще не пересчитались.
[46:39.840 --> 46:41.840]  Так, ну знакомая техника, да?
[46:41.840 --> 46:44.840]  Я так просто на всякий случай упомяну, чтобы вдруг кто-то не сталкивался.
[46:45.840 --> 46:48.840]  Но там просто есть еще прикольная модификация такая.
[46:48.840 --> 46:54.840]  А какую задачу мы решим, если мы случайно в этом форике будем лежать не справа налево, а слева направо?
[46:55.840 --> 46:58.840]  Наверное, когда мы уже много раз обратили эту тюрьму.
[46:58.840 --> 47:00.840]  Да, совершенно верно.
[47:00.840 --> 47:10.840]  Тогда оказывается, что у нас может быть постановка, когда каждого товара неограниченное количество экземпляров.
[47:11.840 --> 47:14.840]  Тогда оказывается, просто делаете то же самое не справа налево, а слева направо.
[47:17.840 --> 47:19.840]  Но там действительно разные постановки могут быть.
[47:20.840 --> 47:21.840]  Вот.
[47:23.840 --> 47:24.840]  Ну, собственно, да.
[47:24.840 --> 47:27.840]  Больше вроде ничего нет.
[47:27.840 --> 47:28.840]  Все.
[47:28.840 --> 47:29.840]  Так, хорошо.
[47:29.840 --> 47:30.840]  Есть еще какие-то вопросы?
[47:30.840 --> 47:31.840]  Ну, тут нет.
[47:31.840 --> 47:34.840]  Заметим, почему эту задачу в этом месте упомяну.
[47:34.840 --> 47:40.840]  Потому что они в этом плане родственницы, в том плане, что восстанавливать ответы здесь и здесь как бы очень легко,
[47:40.840 --> 47:43.840]  пока вы не потребуете уезжать память.
[47:44.840 --> 47:50.840]  Потому что, скажем, в условном рюкзаке восстановить собственно под множество будет проблематично.
[47:54.840 --> 47:55.840]  Вот.
[47:55.840 --> 48:00.840]  Но, как всегда, как так часто бывает, технология фокуса одна и та же.
[48:02.840 --> 48:03.840]  Технология такая.
[48:03.840 --> 48:09.840]  Вот мы заметим, что сами по себе слои динамики мы можем насчитать за линейное число памяти, правда?
[48:10.840 --> 48:11.840]  Тогда смотрите.
[48:12.840 --> 48:16.840]  Тогда у нас классический алгоритм звучит так.
[48:17.840 --> 48:19.840]  Значит, классический у нас алгоритм будет звучать так.
[48:19.840 --> 48:24.840]  Но я буду его говорить на примере NOP, но в рюкзаке будет просто все аналогично.
[48:26.840 --> 48:27.840]  Вот.
[48:27.840 --> 48:31.840]  Ну, значит, допустим, у нас есть вот последовательность А и вот последовательность Б.
[48:32.840 --> 48:36.840]  И мы тут воображаем типа таблицу ДП, да?
[48:39.840 --> 48:40.840]  Так вот идея такая.
[48:40.840 --> 48:44.840]  Давайте просчитаем эту всю таблицу ДП, храняя только последний слой.
[48:45.840 --> 48:47.840]  Но такая неожиданная фишка.
[48:48.840 --> 48:54.840]  Насчитаем мы при этом ее только до середины последовательности А.
[48:57.840 --> 48:58.840]  То есть идея такая, да?
[48:59.840 --> 49:00.840]  То есть идея такая.
[49:00.840 --> 49:04.840]  То есть давайте вот насчитаем, как положено в NOP.
[49:04.840 --> 49:10.840]  Насчитаем длины NOP для всех префиксов последовательности Б и префиксов последовательности А
[49:10.840 --> 49:12.840]  под линей не происходящих пополам.
[49:16.840 --> 49:17.840]  Ну, только длины.
[49:17.840 --> 49:22.840]  Ну, по сути так, всю табличку насчитываем, но храним только последний слой.
[49:25.840 --> 49:26.840]  Вот.
[49:26.840 --> 49:27.840]  То есть вот эти вот значения.
[49:31.840 --> 49:32.840]  Да.
[49:32.840 --> 49:38.840]  То есть по сути задача найти NOP между половинкой А и всеми префиксами Б.
[49:40.840 --> 49:41.840]  А теперь идея такая.
[49:41.840 --> 49:46.840]  А теперь давайте сделаем то же самое с суффиксами, но в другую сторону.
[49:50.840 --> 49:56.840]  То есть наоборот, я насчитаю NOP между второй половинкой А и всеми суффиксами Б.
[49:57.840 --> 49:59.840]  То есть делаем то же самое, просто форики бегут в другую сторону.
[50:03.840 --> 50:04.840]  То есть вот такое.
[50:04.840 --> 50:06.840]  То есть мы такое делаем по сути разделяй и властвуй.
[50:07.840 --> 50:09.840]  Потому что что это разделяй и властвуй нам дает?
[50:09.840 --> 50:12.840]  Дает нам практически то, что на самом деле...
[50:13.840 --> 50:14.840]  Да, вот так вот.
[50:15.840 --> 50:19.840]  Да, то есть идея просто такая, что как найти теперь NOP между А и Б на уровне длины?
[50:20.840 --> 50:21.840]  Очень просто.
[50:21.840 --> 50:26.840]  Надо найти какие-то два элемента, находящиеся вот так вот по диагонали, сумма которых как можно больше.
[50:30.840 --> 50:31.840]  Вот.
[50:31.840 --> 50:33.840]  И вот, допустим, мы ее нашли.
[50:34.840 --> 50:36.840]  И, более того, она не обязана быть даже в середине.
[50:36.840 --> 50:38.840]  Давайте я где-нибудь еще вот тут...
[50:39.840 --> 50:40.840]  Ну, скажем, вот здесь их найду.
[50:44.840 --> 50:45.840]  Тогда идея такая.
[50:46.840 --> 50:48.840]  А теперь давайте я рассмотрю.
[50:49.840 --> 50:50.840]  Типа вот...
[50:52.840 --> 50:54.840]  Вот. То есть возьму как-то вот так.
[50:55.840 --> 50:56.840]  А теперь у меня идея такая.
[50:56.840 --> 50:57.840]  Идея такая.
[50:57.840 --> 51:00.840]  А теперь я запущусь рекурсивно от первой половинки...
[51:00.840 --> 51:06.840]  Теперь найду просто NOP рекурсивно от первой половинки Ашки и вот этого префикса строки Б.
[51:06.840 --> 51:11.840]  И второй половинки Ашки и вот этого вот суффикса Б.
[51:16.840 --> 51:18.840]  Ну, а где они должны быть?
[51:19.840 --> 51:20.840]  Вот.
[51:20.840 --> 51:21.840]  То есть вот идея такая.
[51:21.840 --> 51:22.840]  То есть я просто запущусь...
[51:22.840 --> 51:23.840]  Ну как рекурсивно?
[51:23.840 --> 51:26.840]  Рекурсивно, естественно, передам только константное число индексов.
[51:27.840 --> 51:33.840]  То есть по факту у меня там будет мистическая функция LARA LBRB,
[51:33.840 --> 51:35.840]  которая будет возвращать условно...
[51:37.840 --> 51:39.840]  Ну, которая будет как-то искать подпоследовательность.
[51:40.840 --> 51:43.840]  Она возвращать она ее не будет, чтобы лишний раз не копировать.
[51:44.840 --> 51:46.840]  Но там просто идея будет то, что по факту...
[51:46.840 --> 51:52.840]  Ну, просто заметим, что F будет реально находить ответ, когда выяснится что-либо у A, либо у B длина 1.
[51:53.840 --> 51:54.840]  Что она в этом месте сделает?
[51:54.840 --> 51:56.840]  Она в этом месте скажет, что...
[51:57.840 --> 51:59.840]  Так, например, в Ашке один элемент остался.
[51:59.840 --> 52:02.840]  Давайте по B пробежимся и посмотрим, есть ли он.
[52:02.840 --> 52:03.840]  Если есть, то мы его записываем.
[52:03.840 --> 52:05.840]  Если нет, то возвращаем пустую последовательность.
[52:05.840 --> 52:09.840]  Но идея будет в том, что давайте записывать его в какой-нибудь там глобальный вектор с ответом.
[52:10.840 --> 52:12.840]  И тогда в конце просто NOP получится.
[52:12.840 --> 52:15.840]  Маленькое количество элементов запустить стандартный за квадрат памяти.
[52:15.840 --> 52:17.840]  Ну нет, у нас, нет, нам хочется чтобы память была линейная.
[52:19.840 --> 52:20.840]  У нас в этом цель.
[52:22.840 --> 52:23.840]  Вот...
[52:23.840 --> 52:24.840]  Ну, понятно, да, что если...
[52:26.840 --> 52:31.840]  Ну нет, понятно, что если там размер A стал непровосредить константы, то можно по-честному.
[52:32.840 --> 52:36.840]  Но с другой стороны в данном случае можно просто доединиться, довести, но то и не получается,
[52:36.840 --> 52:38.840]  когда у нас будет такой же объект.
[52:38.840 --> 52:43.520]  честно, но с другой стороны, в данном случае можно просто доединиться, довести и уже не париться.
[52:43.520 --> 52:54.800]  А теперь мистическое утверждение. Вам может показаться, что этот алгоритм разработает
[52:54.800 --> 53:01.720]  за n на v налог. Да, как минимум, потому что у вас тут логарифм это глубина рекурсии,
[53:01.720 --> 53:08.080]  но глубина рекурсии здесь безусловно логарифм. Но теперь у меня мистическое утверждение. Я
[53:08.080 --> 53:16.960]  утверждаю, что этот алгоритм работает не за nv лог, а вполне себе за nm, то есть мы не потеряли 8 точки.
[53:16.960 --> 53:27.920]  Ну да, что делать, если какой-нибудь злой экзаминатор не поверит в это на экзамен?
[53:27.920 --> 53:37.160]  Тогда можно рассказать следующее. Чего? Ну, формально можно писать реку... Нет, я вам так скажу,
[53:37.160 --> 53:43.480]  можно писать рекурренту. А можно заметить следующее, что смотрите, на первом уровне рекурсии мы все
[53:43.480 --> 53:51.680]  считали за nm, правда? На втором уровне рекурсии мы все посчитали за вот столько, то есть за вот это
[53:51.680 --> 53:58.240]  плюс вот это. Заметим, что я утверждаю, что площадь вот этой штуки равна буквально по nm пополам,
[53:58.240 --> 54:05.440]  потому что она равна n пополам, он может на вот это плюс вот это, а это n, правда? То есть как бы в два
[54:05.440 --> 54:16.960]  раза меньше. На следующем уровне у нас произошло что-то подобное. Вот как-то так. Да, видите,
[54:16.960 --> 54:23.840]  то есть вот тут деление пор... То есть, видите, важно, что по h деление всегда поровно. То есть
[54:23.840 --> 54:30.440]  на третьем уровне рекурсии у нас тут получается n поделить на 4 умножить на m, потому что высоты
[54:30.440 --> 54:38.040]  всех этих прямоугольников n делить на 4 и так далее. То есть получается там nm плюс n пополам m
[54:38.040 --> 54:51.880]  плюс n делить на 4 m плюс и так далее. И это не превосходит 2nm. Вот. То есть это называется алгоритм
[54:51.880 --> 55:01.120]  Хиршберга. Вот фамилия вот такая. В принципе, вот такая достаточно стандартная технология,
[55:01.120 --> 55:07.040]  как вот в некоторых случаях оптимизировать память. Вот. Так что, как видите, что тут можно,
[55:07.040 --> 55:13.760]  что в рюкзаке можно. Вот как бы на прошлом четвертинале неожиданно для многих там
[55:13.760 --> 55:19.120]  что-то в задаче потребовали применить такую технологию. То есть там что-то часть народа была
[55:19.120 --> 55:26.520]  почему-то жутко не в восторге от этого. Ну не знаю, потому что да. Ну как всегда, видимо,
[55:26.520 --> 55:31.840]  чьё-то чувство прекрасного было почему-то очень сильно оскорблено. Ну вот. Но с другой стороны,
[55:31.840 --> 55:35.480]  что делать? У нас Олимпиада не только по математике, но и по информатике тоже. Программировать
[55:35.480 --> 55:42.440]  тоже надо уметь. Да. Так что в конце концов в финале 2000 года могли дать задачу на Флойда
[55:42.440 --> 55:49.480]  вообще. Буквально. Дан Графт на 100 вершин. Найдите кратчайшие пути. Нет, реально там даже думать
[55:49.480 --> 55:56.400]  не надо просто вот. Ну это да. Это, видимо, потом на разборе рассказали, что оказывается есть алгоритм
[55:56.400 --> 56:03.400]  Флойда. Да. Ну если случайно в вашем университете такой не изучали. Но это был далекий 2000-й год.
[56:03.400 --> 56:17.520]  Нет. Ну что делать? Ну вот. Так что вот. Так что вот такое. Так что это у нас называется
[56:17.520 --> 56:27.760]  метод Хиршберга. Так что здесь вот восстанавливать ответ можно вот таким вот нехитрым образом. Так,
[56:27.760 --> 56:46.320]  есть ли тут еще какие-то вопросы? Ваидин. Ух ты. Хотя, ну вот. Хотя,
[56:46.320 --> 56:50.680]  самое смешное, что... Хотя Лада это называется, да, помои, да. Хотя следующие зваки будет
[56:50.680 --> 56:58.920]  помогите товарищу, да. Потому что Лада. Что-то слет у каждого вроде из мелочей. Я вроде рассказал
[56:58.920 --> 57:05.000]  вроде все, что хотел. Вроде больше ничего не забыл. Поэтому, видимо, приходится переходить
[57:05.000 --> 57:15.480]  сразу к кульминации и обсуждать задачу ТОТА ЛОЛЦС. Вот. Но здесь. Ну, на чем? Постановка задачи. Ну,
[57:15.480 --> 57:22.200]  в принципе, она, конечно, написана в условии задачи. Ну, а давайте я еще формулирую так. Итак,
[57:22.200 --> 57:35.040]  в чем она? Значит, что мы сейчас попытаемся с вами сделать? Что мы сейчас с вами попытаемся сделать?
[57:35.040 --> 57:41.360]  А сделать мы с вами попытаемся следующим. Мы попытаемся найти следующее. Значит, задача такая.
[57:41.360 --> 57:52.960]  Дады две строки S и T. И нам говорят, скажите, пожалуйста, то есть нам хочется найти для любых,
[57:52.960 --> 58:00.920]  то есть нам хочется для любых IJ таких, что 1 меньше либо равно I, меньше либо равно J,
[58:00.920 --> 58:09.720]  меньше либо равно модуль T. Хочется найти NOP между строкой S и соответствующей под строкой строки T.
[58:09.720 --> 58:20.000]  Ну, давайте подумаем, кстати, найти именно как к счастливке.
[58:20.000 --> 58:30.400]  По последовательности. Нет, под строки это как бы из другого блока алгоритмов.
[58:30.400 --> 58:37.320]  Вот спрашивайте, с какой симпатикой такой можно найти?
[58:37.320 --> 58:50.600]  Ну, в идеале, конечно, да, NM квадрат. Потому что если мы возьмем просто суффикс,
[58:50.600 --> 58:56.160]  просто переберем все суффиксы строки T и для каждого суффикса просто найдем NOP между S и
[58:56.200 --> 59:07.440]  всеми префиксами этого суффикса. Ну, можно совсем в тупую на самом деле, даже за S и T в кубе даже можно.
[59:07.440 --> 59:13.800]  Просто тупо перебирать все строки и запустить черный ящик. И более того, может, он даже сейчас
[59:13.800 --> 59:20.040]  придется это сделать. Почему? Потому что как решается эта задача? Задача решается простым методом
[59:20.040 --> 59:26.800]  вида. Напишем тупое решение, сгибеем какой-нибудь рандомный тест и посмотрим на получившуюся табличку.
[59:26.800 --> 59:38.280]  Вот, что пиши. Нет, значит, поэтому теперь, поэтому ваша задача на ближайшие 20 минут.
[59:38.280 --> 59:46.560]  Да, достать ноутбук, значит, во-первых, первое достать ноутбук, значит,
[59:46.560 --> 59:50.120]  закройте эту задачу за септотику, значит, там, соответственно, послать в тестер,
[59:50.120 --> 01:00:02.080]  получить ВА на тривиальном тесте. Лучше ТЛ. Нет, ВА не надо. Не, ну, получите ВА. Да, значит,
[01:00:02.080 --> 01:00:08.840]  соответственно, да. А потом после этого я попрошу вас, ну, а потом после этого мы посмотрим на
[01:00:08.840 --> 01:00:16.080]  табличку и, собственно, попробуем найти какие-нибудь закономерности. Так, ну, давайте
[01:00:16.080 --> 01:00:21.080]  внимательно смотреть. Значит, вот у нас мы тут сгирели, так сказать, рандомный тест и у нас
[01:00:21.080 --> 01:00:29.040]  получилось вот это. Справивается. Какие закономерности можно заметить? Ну, конечно,
[01:00:29.040 --> 01:00:34.440]  самое тупое, что можно здесь заметить, это то, что числа в каждой строке не убывают и более того,
[01:00:34.440 --> 01:00:40.080]  каждый следующий либо равно предыдущему, либо на один больше. Но не то, чтобы это неожиданность.
[01:00:40.080 --> 01:00:45.520]  Да, и даже то, что посталп сам снизу вверх происходит тоже самое, в общем-то, тоже нас шокировать
[01:00:45.520 --> 01:00:55.280]  не должно. Да, но вот задача, когда же они действительно, то есть, когда единичка прибавляется,
[01:00:55.280 --> 01:01:02.400]  а когда нет. И вот выясняется, что в каких-нибудь соседних рядах это происходит не то, чтобы прям
[01:01:02.400 --> 01:01:12.880]  совсем в рандомных местах. Да, ну, в некоторых рядах это не происходит. А если это все-таки
[01:01:12.960 --> 01:01:20.880]  произошло, то почему-то оказывается следующее, например, что вот у нас было равно, равно, равно,
[01:01:20.880 --> 01:01:29.080]  и вот тут стало больше. И тут мы неожиданно замечаем, что дальше будет тоже равно. То есть,
[01:01:29.080 --> 01:01:34.440]  даже дальше тоже будет неравенство. И можно даже еще здесь добавить. Ну, потому что подразумевает,
[01:01:34.440 --> 01:01:42.480]  что здесь нолик стоит. Вот такая вот мистическая вещь. Более того, да, замечаем, что практически
[01:01:42.480 --> 01:01:47.720]  это везде происходит. Вот здесь тоже вот равенство, и все, пожалуйста, меньше, меньше, меньше, меньше,
[01:01:47.720 --> 01:02:00.160]  меньше. Вот. А вот если у вас уже в последнем столбце стало прям строго меньше, то тут
[01:02:00.160 --> 01:02:08.280]  прям везде дальше будет строго меньше и вообще не паримся. Вот. Такое у нас верно в строке.
[01:02:08.280 --> 01:02:15.400]  Ну, очевидно в принципе, что в столбцах это тоже автоматически выполняется. То есть,
[01:02:15.400 --> 01:02:19.920]  если так прибежаться по столбцам, то получается вот тоже примерно то же самое.
[01:02:20.280 --> 01:02:23.900]  равно. Равенство, равенство, равенство, равенство, равенство, равенство, равенство, равенство, равенство,
[01:02:23.900 --> 01:02:44.040]  ой неравенство, ой неравенство. Нет, ну тут... Нет, ну как линии? Пока хочется просто посмотреть
[01:02:44.040 --> 01:02:48.980]  хотя бы на строки,úsто и понятно почему. Почему там эти равенства и неравенство,
[01:02:48.980 --> 01:02:55.540]  не расположены рандомно. Почему сначала одно, потом другое? Ну или там только одно.
[01:02:55.540 --> 01:03:07.940]  Спрашивается один вот. Почему же это так? Вот. Ну это называется просто, но это на самом деле
[01:03:07.940 --> 01:03:13.780]  очевидно. Надо просто пропонимать, как говорится, что такое NLP, что мы на самом деле делаем. Ну
[01:03:14.100 --> 01:03:22.660]  что мы делаем, когда ищем NLP? Ну естественно, ищем максимальное расстояние в ориентированном
[01:03:22.660 --> 01:03:31.460]  графе, правда? Ну конечно. То есть действительно все очень просто. То есть мы строим граф следующего
[01:03:31.460 --> 01:03:45.900]  вида. Так какие у нас там, допустим, строчка была, да? Y, X, X. Там Y, Z, там X. Так, что там? А, Y,
[01:03:45.900 --> 01:03:51.860]  X. Ну ладно, сильно много рисовать не буду. Думаю, сути так будет понятно. Тут, допустим,
[01:03:51.860 --> 01:04:11.420]  X, X. Y, Z. Там X, Y, Z, X. Вот. Вот. Чего? Вот. То есть на самом деле, смотрите, давайте построим вот,
[01:04:11.420 --> 01:04:23.260]  ну короче говоря, вот такую сеточку. Вот. Ну и вот такую, соответственно. Так вот, вот так,
[01:04:23.260 --> 01:04:36.380]  вот так, вот так, вот так, вот так, вот так. Вот. То есть вот такая вот сеточка.
[01:04:36.380 --> 01:04:55.580]  Вот. Давай. Ну в общем, короче говоря, не будут ориентировать все ребра, думаю,
[01:04:55.580 --> 01:05:01.780]  суть, вы поняли. Самое главное еще я скажу, что у этих всех ребр вес 0. А еще я сделаю маленькую
[01:05:01.780 --> 01:05:07.260]  читерскую вещь. В клеточках, которые соответствуют одинаковым буквкам, я еще нарисую диагональку и
[01:05:07.260 --> 01:05:18.580]  скажу, что это диагональка веса 1. Да, 1. Совсем 1. Ну вот, это вот будет как-то вот так. Вот это
[01:05:18.580 --> 01:05:29.380]  будет вот так, вот так, вот. И вот так вот, конечно. Ну тут повторяем операцию. Вот. Значит,
[01:05:29.460 --> 01:05:44.540]  х и как, и как. Что там еще? Х, х, х, х. Вот. Так что получается такая вот красота. И замечаем,
[01:05:44.540 --> 01:05:53.540]  что чтобы найти NOP, надо просто найти длиннейшее расстояние от вот этой точки до вот этой. Логично, да?
[01:06:29.380 --> 01:06:40.500]  4, 5, 5, 6. Ничего. Они на 1 меньше, чем то, что выше. Конечно. Не, ну пройдите. Тут, ладно,
[01:06:40.500 --> 01:06:51.220]  доставить бинпоисков никаких не надо. Нет, не, ребят, смотрите, все гораздо проще. На самом деле,
[01:06:51.220 --> 01:06:55.020]  как бы суть у нас алгоритма заранее, скажу, сведется на самом деле к тому,
[01:06:55.020 --> 01:07:03.580]  чтобы просто найти так называемые критические точки. Критической точкой будем называть квадратик
[01:07:03.580 --> 01:07:21.300]  2 на 2 вот такого вида. Да, это продвинутый поток, все дела, понятно. На основном такого не
[01:07:21.300 --> 01:07:38.580]  рассказывают почему-то. Вот. Так. Так, что там еще? А, ну где тут еще такие точки? А, ну вот еще
[01:07:38.580 --> 01:07:48.060]  такая точечка и так. А, и все в принципе. Ну на самом деле, заметим следующее, что если нам кто-то
[01:07:48.060 --> 01:07:54.020]  с небес по факсу пришлет набор критических точек, то табличку мы даже без всяких бинпоисков
[01:07:54.020 --> 01:08:00.540]  спокойно восстановим, правда? Потому что по сути критическая точка это в каждом ряду или в
[01:08:00.540 --> 01:08:05.940]  каждом столбце как угодно вам просто скажут, где прекращается неравенство и начинается равенство.
[01:08:05.940 --> 01:08:18.360]  Вот. Ну или наоборот. Но спорулируем так. Ну утверждение такое, если, например, если тут
[01:08:18.360 --> 01:08:23.980]  ряды равны, то где-то эта критическая точка существует обязательно. Может быть, она существует вот
[01:08:23.980 --> 01:08:31.980]  здесь в виде 1, 1, 1, 0. Вот. Ну здесь и понятно, я там не беру всякие тривиальные случаи, когда там
[01:08:32.380 --> 01:08:42.140]  первый символ во второй строке вообще не лежит, допустим, вот это все. Вот. Если мы в это верим,
[01:08:42.140 --> 01:08:49.740]  то мы понимаем, что если последние элементы не равны, то тут не равен никто уже и никому. То есть
[01:08:49.740 --> 01:08:54.020]  там просто берем копипастим, прибавляем один, радуемся. А если равны, то значит надо просто
[01:08:54.020 --> 01:09:02.900]  знать до какого момента равны. Вот. Но это если мы в это верим. Теперь, собственно, пришло время
[01:09:02.900 --> 01:09:11.060]  понять, собственно, а откуда мы, собственно, это берем. Так. Ну воображаем себе вот это постоянно,
[01:09:11.060 --> 01:09:17.380]  воображаем себе вот этот граф. Так вот, что это за граф, понятно, да? Ну вот просто написали
[01:09:17.380 --> 01:09:23.780]  строчку одну, строчку вторую. Вот это вот строка и строка Т. Честно, нарисовали все вертикальные
[01:09:23.780 --> 01:09:27.740]  горизонтальные ребра, сказали, что они веса ноль, и в клеточках, соответственно,
[01:09:27.740 --> 01:09:36.180]  одинаковым буквам нарисовали ребра веса один, диагональная. То есть теперь, чтобы найти
[01:09:36.180 --> 01:09:40.700]  НОП, надо просто идти длиннейший путь отсюда-сюда, и диагональные ребра, по которым он проходит,
[01:09:40.700 --> 01:09:49.300]  собственно, будут соответствовать НОПшечке. Понята логика, да? Так. Поэтому нет, просто это
[01:09:49.300 --> 01:09:55.620]  я специально уточняю, потому что сейчас я это все сотру и буду рисовать что-то более абстрактное.
[01:09:55.620 --> 01:10:11.420]  Да, я сейчас побольше нарисую. Это наша цель. Нет, наша цель решить задачу за СТ, да. Нет,
[01:10:11.420 --> 01:10:16.260]  я понимаю, что там асимптотика, конечно, с целью запутывания, там, может быть,
[01:10:16.940 --> 01:10:23.660]  какая-нибудь. Ну да, в оригинале, да, как запутать, немножко занисти асимптотику,
[01:10:23.660 --> 01:10:27.780]  чтобы... А то есть написали бы пять тысяч, значит понятно, надо думать за квадрат,
[01:10:27.780 --> 01:10:35.180]  поэтому множество идей сужается. Ну вот, но правда, тем не менее, команда Петрозаводского
[01:10:35.180 --> 01:10:42.020]  университета эту задачу как-то сдала. Ну да, утверждается, что да, вот реально,
[01:10:42.020 --> 01:10:45.340]  сгенерили тест, посмотрели на табличку, реально нашли закономерность и придумали,
[01:10:45.340 --> 01:10:57.220]  откуда она взялась. Ну вот, команда была Петрозаводск-СУ-1, если не ошибаюсь,
[01:10:57.220 --> 01:11:03.100]  то Сунков Федулин, Йофи или что-то в этом роде. Ну может, второй состав, правда, да.
[01:11:03.100 --> 01:11:10.620]  Так что, соответственно, вы должны, правда, констатировать, что, насколько я помню,
[01:11:10.620 --> 01:11:17.740]  Йофи, я помню, через некоторое время потом на читерство поймали, но представители этой команды, вот.
[01:11:17.740 --> 01:11:31.700]  Чего? А Филипфи, ну, наверное, да, хорошо. Как вы видите, я не разбираюсь в Петрозаводском
[01:11:31.700 --> 01:11:42.260]  ACPC, к сожалению, да. Ну да, Петрозаводска-СУ-1, у них медали ACPC даже есть свои годы. Ну, в конце концов,
[01:11:42.260 --> 01:11:46.260]  не совсем случайно, на самом деле, Куля, самые культовые ACPC-шные сборы проводятся именно в
[01:11:46.260 --> 01:11:52.740]  Петрозаводске, да, при наличии там каких-то других городов, которые можно там из различных уголков
[01:11:52.740 --> 01:11:59.700]  России добираться сильно удобнее. Там есть Москва, там, например, там, я не знаю, или там Новосиб,
[01:11:59.700 --> 01:12:06.340]  там ЕКБ, что-то вроде там. Ну вот, а почему-то Петрозаводск. Да, ну, правда, не Мурманск,
[01:12:06.340 --> 01:12:15.060]  правда, ну вот. Как бы не Мурманск, но и не Питер. Вот так скажем, да. Вот, нет, в самом контесте,
[01:12:15.060 --> 01:12:27.540]  да, больше это никто не сдал, да. Ну, ГГГ, да. Нет, ну не в этом смысле. Задача супер. Значит,
[01:12:27.540 --> 01:12:34.460]  смотрите, сейчас я буду это рисовать. Значит, я сейчас не буду рисовать весь граф, я его себе
[01:12:34.460 --> 01:12:44.420]  буду воображать, что тут как бы внутри что-то есть, там какая-то начиночка. Вот.
[01:12:46.020 --> 01:12:47.940]  Вот какая-то вот начиночка.
[01:13:01.940 --> 01:13:03.900]  Ну, то как-то вот так вот, и вот так вот.
[01:13:03.900 --> 01:13:22.660]  Ой, я попал, классно. Вот, давайте смотреть теперь. Значит, идея такая, вот мы поняли, да,
[01:13:22.660 --> 01:13:29.340]  что такое NOP между S и T. Это как длиннейший путь из угла в угол. А теперь внимание, вопрос,
[01:13:29.340 --> 01:13:54.540]  что такое NOP между строкой S и T и TGT? Ну, только не от 0 до NG. Да, но нет. Ну ладно,
[01:13:54.540 --> 01:14:05.860]  формально нет. Ну, вот скорее да. Ну ладно, у нас будет от и-1 даже. Ну, под строка от и-1
[01:14:05.860 --> 01:14:12.660]  включить на каждый символ надо пройти, поэтому. Ну, как сказать, вот тут мы ждем от нулевого до
[01:14:12.660 --> 01:14:20.860]  м-того, да, чтобы пройти под строку длины м, да. Поэтому от и-1 надо пройти G- и-1. Поэтому получается,
[01:14:20.860 --> 01:14:36.660]  что надо от этого 0 и-1 дойти куда-то там до вот этого NG. Что? В смысле полуинтервал? Нет,
[01:14:36.660 --> 01:14:45.180]  почему полуинтервал с нуля? Нет, у нас индексация с единицы, если что, да. Ну,
[01:14:45.660 --> 01:14:51.460]  с нуля было бы от и-1 даже. Ну, давайте у нас индексация с единицы, поэтому от и-1 даже. Так вот,
[01:14:51.460 --> 01:14:58.820]  значит, теперь давайте думать, а что такое вообще вот эта критическая точка? Ну, критическая точка
[01:14:58.820 --> 01:15:08.100]  это когда мы ищем под строку от, значит, тут у нас и, тут у нас и-1, тут у нас, соответственно,
[01:15:08.100 --> 01:15:15.860]  G, тут у нас G плюс 1. Ну, дальше, это критическая точка, просто рассмотрим такой квадратик. Что нам
[01:15:15.860 --> 01:15:25.580]  нужно по сути доказать? Нам нужно доказать, что вот G был квадратик, и в нем, и надо показать,
[01:15:25.580 --> 01:15:31.820]  что в нем не бывает. В нем не бывает, чтобы вот тут было равенство, а тут было неравенство,
[01:15:31.820 --> 01:15:38.740]  правда? Ну, я утверждаю, что если мы вот докажем, что вот такого не бывает,
[01:15:38.740 --> 01:15:47.140]  да, если мы докажем, что такого не бывает, то из этого и будет следовать, что в каждом
[01:15:47.140 --> 01:15:53.620]  ряду вот сначала неравенство, а потом равенство. Или что то же самое вот для нас по столбцам,
[01:15:53.620 --> 01:15:59.460]  на самом деле, по столбцам на самом деле нам сейчас будет удобнее. По столбцам надо доказать,
[01:15:59.460 --> 01:16:14.660]  что не бывает так, что у нас тут вот знак меньше, а тут знак равно. Кто сказал, что мы их добавили?
[01:16:14.660 --> 01:16:21.700]  Когда мы идем вниз, мы их, наоборот, удаляем. Мы один добавили, один прибавили. Заметим,
[01:16:21.700 --> 01:16:27.860]  что обе диспозиции на самом деле примерно одинаковые, то есть на самом деле плохой
[01:16:27.860 --> 01:16:35.620]  случай по вертикали соответствует плохому случаю по горизонтали на самом деле. Ой, нет или не соответствует.
[01:16:35.620 --> 01:16:49.540]  Ну ладно, да-да-да-да, это неважно. То есть здесь х, а здесь может быть х плюс 1. А нет,
[01:16:49.540 --> 01:16:54.700]  погодите, когда мы идем наверх, меньше точно не будет, правда? Но х плюс 1 здесь быть не может,
[01:16:54.700 --> 01:16:59.900]  потому что тогда тут будет х плюс 2, и это слишком далеко. Поэтому тут пишем х, тут пишем х плюс 1,
[01:16:59.900 --> 01:17:05.820]  и получается плохой случай здесь. То есть плохой случай по горизонтали, плохой случай по вертикали,
[01:17:05.820 --> 01:17:13.780]  это одно и то же. Значит, смотрите, давайте представим, что это произошло в точке и и плюс 1,
[01:17:13.780 --> 01:17:24.060]  и ж ж плюс 1. Давайте эти длиннейшие пути попытаемся изобразить. Изображаем. Путь
[01:17:24.060 --> 01:17:39.300]  соответствующий и ж, он на самом деле ведет нас куда-то вот сюда. Да, это у нас для и ж. Вот этот
[01:17:39.300 --> 01:17:51.540]  вот путь нас ведет в следующую точку, это для и ж плюс 1. Видно, да? Так, вот а ты плюс 1 ж нас ведет вот так.
[01:17:51.540 --> 01:18:02.380]  Ну вот, и почему странно, все нормально, что не так. Вот, то есть, ну давайте так,
[01:18:02.380 --> 01:18:06.820]  я лучше, чтобы их не писать для и ж, я напишу так, давайте я напишу, что это вот а, б,
[01:18:06.820 --> 01:18:14.140]  с, д, вот так вот, да, и честно там изображу, кто тут а, кто тут б, кто тут с, кто тут д, то есть это вот
[01:18:14.140 --> 01:18:30.820]  получается а, там б, с, д. Видно, да? Я нарисовал очень сематично, потому что могут ли эти пути
[01:18:30.820 --> 01:18:36.180]  пересекаться, конечно. Более того, они очень часто даже просто имеют какие-то просто общие
[01:18:36.180 --> 01:18:44.300]  наложения, просто общие участки. Да, более того, б и с пересекаться обязаны хотя бы по одной
[01:18:44.300 --> 01:18:56.140]  итогике, это важно. Вот, мы ее даже отметим. Итак, возникает вопрос. Ну вот, нам очень хочется,
[01:18:56.140 --> 01:19:03.860]  чтобы у нас оказывается было получается а меньше b, то есть вот здесь был знак меньше, а вот здесь
[01:19:03.860 --> 01:19:10.980]  был знак равно. Мы пытаемся показать, что этого не бывает. Вот это, кстати, видите, то есть это
[01:19:10.980 --> 01:19:17.940]  соответствует неравенствовам в одном столбце, видите, да? То есть если я все неравенства в одном
[01:19:17.940 --> 01:19:22.420]  столбце возьму, то как бы у меня получатся просто эти тролли, и получается будут идти вот как-то
[01:19:22.420 --> 01:19:29.780]  вот так. Видно, да? То есть вот так вот, потом вот так вот, ну и так далее. И хочется сказать,
[01:19:29.780 --> 01:19:37.420]  что мне не бывает, что мне где-то идет меньше, а потом идет неожиданно равно. Вот давайте,
[01:19:37.420 --> 01:19:43.940]  вот почему же такого не бывает? Вот давайте, ну-ка подумайте, потому что на самом деле вот,
[01:19:43.940 --> 01:19:47.340]  глядя на эту картинку, на самом деле можно придумать почему.
[01:20:59.780 --> 01:21:29.700]  Ну, как сказать, в некотором смысле,
[01:21:29.700 --> 01:21:48.860]  ответ, конечно, перед глазами. Ну, безусловно, безусловно. Нет, у b не меньше, чем...
[01:21:59.700 --> 01:22:19.620]  Так, ну картинка, и что? Ну хорошо, пишем, и что? Ладно, действительно, можно заметить,
[01:22:19.620 --> 01:22:31.060]  что a больше либо равно c. Так, b больше либо равно d. Да, можно в принципе это заметить, да.
[01:22:31.060 --> 01:22:45.060]  Чего?
[01:23:01.060 --> 01:23:30.820]  И что? Так, чего b плюс c? Ну да. Ну да, да, да, да, да, да.
[01:23:30.820 --> 01:23:36.180]  Да, все было. Да, лакчика открывается предельно просто. Потому что заметим,
[01:23:36.180 --> 01:23:43.020]  что когда мы ищем длиннейшие пути, у нас возникает естественное неравенство треугольника. Ну,
[01:23:43.020 --> 01:23:46.300]  как всегда, неравенство треугольника заключается, ну, просто прямое следствие того,
[01:23:46.300 --> 01:23:53.300]  что длиннейший путь больше либо равен, чем любой путь, правда? То есть в данном случае можно
[01:23:53.300 --> 01:24:00.540]  писать, что a это больше либо равно, чем b1 плюс c2. Почему? Потому что a это длиннейший путь
[01:24:00.540 --> 01:24:06.300]  между этой и этой точкой, а b1 плюс c2 это длина какого-то пути между этими же точками, правда?
[01:24:06.300 --> 01:24:17.500]  Вот, также верно, что d больше либо равно, чем c1 плюс b2. Да, но из этого получается да,
[01:24:17.500 --> 01:24:27.980]  a плюс d больше либо равно b плюс c. Да, то есть, видите, важный такой принцип. То есть в таких
[01:24:27.980 --> 01:24:39.740]  вот случаях, вот я его называю, крест не может быть больше полозив. Да, именно. Но мы ищем длиннейшее
[01:24:39.740 --> 01:24:48.860]  путь и не кратчайшее, поэтому да. То есть вот крест не может быть больше полозив. А противоречие
[01:24:48.860 --> 01:24:54.980]  выключается в том, что если у вас a меньше b и c равно d, то тогда b плюс c будет больше, чем a плюс d.
[01:24:54.980 --> 01:25:03.580]  Ну, просто вот это плюс это у вас получается больше, чем это плюс это, а этого не бывает. Вот. То есть мы
[01:25:04.420 --> 01:25:13.660]  по сути можем здесь расставить знаки только таким образом, чтобы полозия не оказалась меньше креста.
[01:25:13.660 --> 01:25:22.380]  Вот. То есть в принципе отсюда, то есть в принципе отсюда следует, что получается вот такие, знак
[01:25:22.380 --> 01:25:28.780]  меньше и тут знак равно идти не могут. То есть из этого мы выводим, что действительно тут есть что-то
[01:25:28.780 --> 01:25:33.220]  равно равно, потом будет равно, потом с какого-то момента знак меньше и пойдет меньше.
[01:25:33.220 --> 01:25:41.620]  Хотя, конечно, отдельная песня. А пойдет ли когда-нибудь знак меньше? А может всегда будет равно?
[01:25:41.620 --> 01:25:54.460]  Нет. Знаете, где будет знак меньше? Вот прямо вот в этой вертикали. Потому что здесь заведомо
[01:25:54.460 --> 01:25:58.260]  будет знак меньше по одной простой причине. Потому что длина здесь кратча длиннейшего пути
[01:25:58.260 --> 01:26:07.540]  равна чему? Нулю. А здесь? Да, минус бесконечности, конечно. Ну, знак того, что этого пути тупо нет.
[01:26:07.540 --> 01:26:15.860]  Вот. Поэтому можно считать, что знак меньше есть всегда. То есть и нам интересно хранить,
[01:26:15.860 --> 01:26:23.660]  где впервые появляется знак меньше. Кстати, он может появиться и прямо здесь. Удобно, правда?
[01:26:23.660 --> 01:26:28.420]  То есть в принципе отсюда, то есть на самом деле это уже доказательство того,
[01:26:28.420 --> 01:26:33.020]  что закономерность, то есть закономерность это не случайность, она действительно всегда
[01:26:33.020 --> 01:26:38.780]  имеет место. Остается только для каждого из этих ребер найти вот этот вот первый момент,
[01:26:38.780 --> 01:26:42.940]  когда возникает знак меньше. И тогда мы просто очень легко табличку восстановим, правда?
[01:26:42.940 --> 01:27:12.220]  Понимаете, да? Понимаете, да. Вот. Так, что там у нас еще? Наоборот. Сначала равно,
[01:27:12.220 --> 01:27:28.660]  потом меньше. Ну, на самом деле мы сейчас смотрим по вертикали. То есть мы сейчас вот эти вот знаки
[01:27:28.660 --> 01:27:36.140]  равно меньше. Это на самом деле там вот этот и вот этот знаки. Да. Тут скорее такое. Ну, тут
[01:27:36.620 --> 01:27:45.340]  ну не совсем так. Там вот просто по строчкам. По строчкам как бы это будет сложнее. Ну,
[01:27:45.340 --> 01:27:53.860]  там по строчкам. Ну, просто что у вас там как-то. То есть по строчкам просто неравенство будут
[01:27:53.860 --> 01:28:02.660]  просто не сверху, а снизу на самом деле. Вот. Ну окей. И так, то есть для такого ребра нам
[01:28:02.660 --> 01:28:09.220]  хочется такую штуку найти. То есть для каждого, то есть для горизонтального ребра внизу хочется
[01:28:09.220 --> 01:28:17.780]  найти такие троллей и найти первый троллей, когда здесь находится знак меньше. Ну, теперь,
[01:28:17.780 --> 01:28:27.300]  значит, как же его искать? Ну, идея оказывается бенпоиском. Да, замечательно. Ну, правильно. Да,
[01:28:27.300 --> 01:28:40.300]  все в этом мире ищется бенпоиском. Да, кроме того, что ищется ахкарасиком. Так. Ну, да. Ну,
[01:28:40.300 --> 01:28:47.500]  да, все. Да, мы помним, да. Как бы динамика являются все алгоритмы и репербаста. Мы помним, да.
[01:28:47.500 --> 01:28:58.220]  Ну, вот. Ну, на самом деле, заметим следующее, что я вот эту вот интересную величину могу рассмотреть
[01:28:58.220 --> 01:29:04.660]  не только для ребра на нижней, на вот, собственно, внизу рамочки, но и на абсолютно произвольном
[01:29:04.660 --> 01:29:12.980]  горизонтальном ребре внутри таблички, правда? То есть по сути я могу здесь ввести такое понятие
[01:29:12.980 --> 01:29:21.180]  аж от ижи. То есть что это за понятие? Я беру ребро, которое ведет меня из клеточки, из точки ижи,
[01:29:21.180 --> 01:29:37.060]  в точку ижи плюс один. Да. Строю. Ладно, даже вот Х игрок я тут нарисую хорошо. Вот. И получается,
[01:29:37.060 --> 01:29:42.740]  вот. И тоже типа мысленно рисуем вот эти вот троллей, троллей, троллей, троллей, троллей. Тут
[01:29:42.740 --> 01:29:48.180]  будет равенство, равенство, равенство. Вот. И в какой-то момент впервые будет знак меньше,
[01:29:48.180 --> 01:29:55.220]  вот нам жутко интересно, когда он впервые появится. То есть если я научусь искать такую
[01:29:55.220 --> 01:30:06.020]  штуку аж от Х игрок для всех их сыгрок. Понятно, да? Как же ее искать? Ну, как у нас водится в
[01:30:06.020 --> 01:30:11.060]  динамике? Ну, так давайте обсчитывать уже все, что можно. У нас же помимо горизонтальных еще
[01:30:11.060 --> 01:30:18.100]  вертикальные ребра есть. А теперь давайте подумаем, как это будет выглядеть для вертикальных ребров.
[01:30:18.100 --> 01:30:29.060]  Вот. Да, про Аш мы все поняли. А теперь давайте посмотрим на вертикальные ребра. Вот. Ну, действительно,
[01:30:29.060 --> 01:30:37.820]  давайте вот введем вот такие троллей. Да? Какие тут вообще знаки будут? Какие тут знаки вообще
[01:30:37.820 --> 01:31:00.340]  будут? Что? Какие симметрики? Что такое симметричные знаки? Да. Ой. А если внимательно на картинку посмотреть?
[01:31:07.820 --> 01:31:29.900]  Вот. Да. Начнем с того, что никаких знаков меньше тут вообще нет. Да. Да. То есть путь
[01:31:29.900 --> 01:31:37.100]  до сюда он не меньше, чем путь до сюда. Ну, потому что можно дойти до сюда и плюс 0. Поэтому тут есть
[01:31:37.100 --> 01:31:43.940]  только знаки равно и знаки больше. Но возникает вопрос. В насколько рандомном порядке эти знаки
[01:31:43.940 --> 01:32:04.820]  могут появляться? Так. Ну, вот что нам надо отсеки? Ну, да. Ну, вот. Да, прям точно.
[01:32:04.820 --> 01:32:18.220]  Ну, да. Нет. Ну, давайте, как всегда, у нас крест не может быть больше полози. Давайте. Какие надо
[01:32:18.220 --> 01:32:23.700]  знаки поставить, чтобы крест оказался больше, чем полози? Да, конечно. Вот, собственно, равно и
[01:32:23.700 --> 01:32:28.500]  больше. Да, именно тогда вот крест оказывается больше. Значит, получается равно и больше в таком
[01:32:28.500 --> 01:32:34.180]  порядке стоять не могут. Значит, вывод. Действительно, сначала идут знаки больше, потом знак равно.
[01:32:34.420 --> 01:32:38.500]  Заметим, что знак равно рано или поздно возникнет просто вот в этой вертикали, потому что будет 0,0.
[01:32:38.500 --> 01:32:51.740]  Вот. Соответственно. Так. Что же у нас тут теперь? Получается. Вот. Ну, получается, соответственно,
[01:32:51.740 --> 01:33:03.300]  вот еще что. Вот. Значит, получается тут больше. И соответственно, в каком месте появляется этот
[01:33:03.300 --> 01:33:12.820]  знак равно, мы теперь можем насчитать, засчитывать тоже как v от x. То есть вот теперь у меня идея такая.
[01:33:12.820 --> 01:33:20.020]  Да. Вместо того, чтобы насчитать просто m значение, я насчитаю 2nm значение. Осталось только выяснить,
[01:33:20.020 --> 01:33:30.380]  как же я их насчитаю. Ну, как всегда. Примерим стандартный метод и будем думать. Вот. Ну,
[01:33:30.380 --> 01:33:38.140]  нередко так у нас задачи решаются, правда? Вот. И так. Ну, давайте. Давайте на это внимательно
[01:33:38.140 --> 01:33:44.100]  смотреть. Значит, я утверждаю. Ну, утверждает следующее. Если я хочу рассмотреть какую-нибудь точку
[01:33:44.100 --> 01:33:54.260]  x игрок. Да. Я утверждаю, что если я знаю ашечку здесь и вэшечку здесь, то я могу насчитать
[01:33:54.260 --> 01:34:04.340]  вэшечку здесь и ашечку здесь. Нет, не обязательно. Нет, аш и вэ между собой могут быть не связаны
[01:34:04.340 --> 01:34:18.180]  слова никак. Вот это вот. Х игроковое. Да. Но это вот место, где там впервые появится знак меньше. А вэшка
[01:34:18.180 --> 01:34:25.980]  это где впервые появится, наоборот, знак равно. Вот. Но давайте предположим, что это клеточка там
[01:34:25.980 --> 01:34:34.740]  какая-нибудь. То есть давайте это x игрок, это x игрок плюс один, это x плюс один игрок, а это x
[01:34:34.740 --> 01:34:49.300]  плюс один игрок плюс один. Вот такая идея. Вот. Приводит это нод. Но давайте попробуем подумать.
[01:34:49.300 --> 01:34:58.620]  Значит, как по аш и вэ попробовать насчитать аш и вэш. Вот. Это можно сделать следующим образом.
[01:34:58.620 --> 01:35:06.820]  Значит, смотрите. Так давайте я тут немножко сотру. Вот так вот. Тут нам, в общем-то.
[01:35:06.820 --> 01:35:21.220]  Вот. И давайте себе этого образим. Значит, будем сравнивать. Ну, как бы, если проводить, собственно,
[01:35:21.220 --> 01:35:32.500]  4 троллей, вот этих вот, да. Вот. Ну, давайте. Что такое аш? Это когда мы сравниваем. Значит,
[01:35:32.500 --> 01:35:41.580]  тут прибираемся по к. К равно у нас 0, 1, там 2 и так далее, м минус 1, да. Вот она, м. Значит,
[01:35:41.580 --> 01:35:50.660]  к у нас вот такое. И давайте посмотрим. Теперь мы пытаемся сравнить расстояние от точки 0 к,
[01:35:50.660 --> 01:36:04.220]  то есть там, то есть от 0 к до x игрока. Это ладно, 0, 1, 2, ну вот. Придется сравнить
[01:36:04.220 --> 01:36:17.540]  с расстоянием от 0 к до x игрок плюс 1. Вот. И тут у нас получается 0, 1, 2, там и так далее,
[01:36:17.540 --> 01:36:25.100]  м. Значит, как будет это расстояние выглядеть? Как мы уже поняли? Сначала будет равно равно равно.
[01:36:25.100 --> 01:36:36.260]  Потом неожиданно возникнет в позиции аш, возникнет знак меньше, и он будет уже навсегда. Видно, да?
[01:36:36.260 --> 01:36:52.300]  Это это я просто определение аша написал, правда? Теперь я напишу определение v. То есть 0 к x игрока
[01:36:52.300 --> 01:37:07.260]  против чего? d от 0 к x плюс 1 игрок. Как мы уже поняли, она будет у нас идти как больше,
[01:37:07.260 --> 01:37:16.580]  больше, больше, больше, больше, больше, больше, потом в какой-то момент станет равно. Вот. Но нам
[01:37:16.580 --> 01:37:21.740]  придется рассмотреть два случая. Какие два случая нам придется рассмотреть? Нам придется
[01:37:21.740 --> 01:37:28.940]  рассмотреть случаи, когда v больше, чем аш, и когда v меньше, чем аш. Видно, да? Вот давайте такой
[01:37:28.940 --> 01:37:40.420]  случай рассмотрим. Предположим, что оказалось, что аш меньше, чем v. Теперь, так, ну давайте
[01:37:40.420 --> 01:37:47.940]  рассмотреть. Давайте попробуем про аш-3 что-нибудь написать. То есть, ну, точнее, так, что мы можем
[01:37:47.940 --> 01:37:59.980]  вообще сказать? Какие тут расстояния вообще могут быть? Ну, вообще, заметим, да, следующее, что, ну,
[01:37:59.980 --> 01:38:04.380]  как бы, какие мы сейчас расстояния вот в каждом столбце рассматриваем. То есть, у нас есть клеточка,
[01:38:04.380 --> 01:38:13.580]  и как получается, и рассматриваем вот такие тралейчики. Правда? Ну, еще вот такой. Вот. И вот,
[01:38:13.580 --> 01:38:22.300]  допустим, мы попали вот в этот столбец. Мы попали в этот столбец, и что происходит? И мы тут
[01:38:22.300 --> 01:38:27.300]  неожиданно видим, что у нас вот здесь происходит равенство, а вот здесь происходит неравенство.
[01:38:27.300 --> 01:38:35.740]  Видно, да? То есть, получается, сюда расстояние равно l, сюда расстояние равно l, здесь оно равно l
[01:38:35.740 --> 01:38:51.020]  плюс 1, а здесь оно равно, а чему оно тут может быть равно? Да, только l плюс 1. Ну, вот. ДП-шка,
[01:38:51.020 --> 01:38:55.380]  как она пересчитывается? Она либо максимум из этих, если символы неравны, а символы равны,
[01:38:55.540 --> 01:39:02.700]  то вот это вот плюс 1. Правда? Но все варианты нам говорят, что тут только l плюс 1. Давайте,
[01:39:02.700 --> 01:39:08.380]  то есть, тут может быть только l плюс 1, а это означает, что тут железобетонное равенство. То есть,
[01:39:08.380 --> 01:39:16.780]  если вот тут равенство, а тут знак такой, то здесь тоже знак равенства, знак вот такой. Вот. То есть,
[01:39:16.780 --> 01:39:26.620]  получается, мы тут получается просто честно знаки и копии пасти. То есть, получается,
[01:39:26.620 --> 01:39:33.220]  пока тут идет равно и больше, то и здесь будет равно больше, равно больше, равно больше, равно больше.
[01:39:33.220 --> 01:39:49.100]  Понятно, да? Ну, понятно, здесь я имею в виду, давайте уж напишу. 0 к x, значит, да, плюс 1,
[01:39:49.100 --> 01:40:04.060]  и как s, d от 0 до k, x плюс 1, и как плюс 1. Это вот одно и второе.
[01:40:19.100 --> 01:40:40.820]  Вот. Вот. Вот. Значит, теперь давайте рассмотрим симметрический случай, когда у меня тут знак
[01:40:40.820 --> 01:40:50.500]  меньше и знак равно. Вот. То есть, когда тут не l, l, l, а когда вот тут, а когда вот тут оказалось,
[01:40:50.500 --> 01:40:55.900]  значит, тут оказался знак меньше, тут оказался знак равно. Но, в общем, ничего принципиально не
[01:40:55.900 --> 01:41:02.020]  поменялось. Значит, вывод тут l, тут l плюс 1, тут l. Но тогда вывод, что здесь опять l плюс 1,
[01:41:02.020 --> 01:41:14.660]  и тогда опять получается, что знакик, честно, копии пастится. Так. Ну, кстати, заметим,
[01:41:14.660 --> 01:41:20.420]  что независимо от того, кто больше h или v, а на краях будут ровно эти ситуации. Видите, да?
[01:41:20.420 --> 01:41:30.900]  Ну, и теперь давайте посмотрим. Так, если тут произошла ситуация, когда у вас тут l,
[01:41:30.980 --> 01:41:38.020]  когда у вас тут знак меньше и тут знак меньше. Так, но здесь, заметим, тогда тоже l плюс 1,
[01:41:38.020 --> 01:41:44.660]  но тогда копии пасты нет, потому что обнаруживаются два знака равенства. И тогда мы видим, равно равно,
[01:41:44.660 --> 01:41:58.780]  равно равно. Видно, да? Вот. Вправивается. Ну вот. Но тогда мы выводим, что раз тут h здесь,
[01:41:58.780 --> 01:42:05.820]  ну давайте я даже так напишу, h здесь, а v здесь, то тогда мы выводим, что, оказывается,
[01:42:05.820 --> 01:42:17.580]  h' и v', это абсолютно те же самые h и v, только по-свапанные. Поэтому можно прям, прям при
[01:42:17.580 --> 01:42:24.180]  впечатлении dp так прям и написать, если h меньше либо, там, меньше либо равно v, то значит просто h'
[01:42:24.180 --> 01:42:39.220]  равно v, v' равно h. Все. Внезапно, да? Теперь мы смотрим второй случай, когда неожиданно h оказался
[01:42:39.220 --> 01:42:47.940]  больше. Тогда это означает, что у нас вот такая, имеет место вот такая ситуация. То есть h оказался
[01:42:47.940 --> 01:42:56.060]  здесь, v оказался здесь. Ну вот эти я стирать не буду, потому что здесь, в общем-то, анализ не
[01:42:56.060 --> 01:43:04.020]  изменился, правда? А вот посередине возник очень интересный случай. То есть, возможно, самый
[01:43:04.020 --> 01:43:14.100]  интересный из всех. То есть, когда у вас, оказывается, тут два равенства l, l, l. Внимание,
[01:43:14.100 --> 01:43:25.980]  вопрос. А что здесь? И от чего это зависит? Ну да, то есть, здесь я могу написать вот так, l плюс
[01:43:25.980 --> 01:43:38.820]  равен ли x плюс первый символ строки s? Там y плюс первому символу строки t. Ну или там с
[01:43:38.820 --> 01:43:46.940]  плюс-минус единичками подгоните там. Ну, по-моему, так. Ну в один индоксации так. Видно, да? То есть,
[01:43:46.940 --> 01:43:54.180]  потому что если они равны, то значит тут будет два неравенства. То есть, тут будут два неравенства,
[01:43:54.180 --> 01:43:59.900]  и тогда hv опять послапаются. Или, значит, этой ситуации не произойдет, символы будут неравны.
[01:43:59.900 --> 01:44:05.540]  Ну вот. И тогда тут опять будет два равенства, два равенства, и hv на этот раз просто скопи пастятся.
[01:44:05.540 --> 01:44:18.900]  Ну вот и все задача. Вот. Все. А что-то даже несложно оказалось.
[01:44:18.900 --> 01:44:40.500]  Про что? Нет, когда h было меньше, чем v, они всегда свапались. Ну там, посмотрите, вот это вот
[01:44:40.500 --> 01:44:46.020]  равно больше всегда превращается в равно больше. Меньше равно превращается в меньше равно. Еще мы
[01:44:46.020 --> 01:44:53.700]  выяснили, что, на самом деле, если тут стоят знаки там, то, допустим, меньше-меньше, больше-больше,
[01:44:53.700 --> 01:45:02.740]  то они железобетонно превращаются в равно-равно. Вот. И тогда это приводит к тому, что, действительно,
[01:45:02.740 --> 01:45:10.260]  там h и v свапаются. А вот если тут равно-равно, то тут может быть два варианта, то есть тут уже
[01:45:10.260 --> 01:45:20.100]  зависит от того, равны ли, то есть есть ли в этом квадратике диагональка. Вот. Так что вот такая
[01:45:20.100 --> 01:45:35.940]  красота. Ну вот. Ну да, то есть на самом деле зря эту задачу в контесте дал. Нет, ну совсем халявный,
[01:45:35.940 --> 01:45:42.620]  ну скажи так, они действительно халявные, учитывая, что там задача вывешена, так вот, форсис.
[01:45:42.620 --> 01:46:07.420]  Ну, это да. Чего? А, даже та? Да, ну да, понятно, да.
[01:46:12.620 --> 01:46:25.100]  Ага. Сейчас. Не, погодите, сейчас. А бенпольск вообще не... Сейчас, а бенпольск не слишком долго
[01:46:25.100 --> 01:46:31.220]  работает. Там, если бы в каждое... Ну, давайте так, нет, погодите, вот как вы бенпольском
[01:46:31.220 --> 01:46:33.820]  собираетесь это искать? В явном виде квадратик вычислить?
[01:46:33.820 --> 01:46:39.060]  Мы знаем предыдущую строку. Теперь нам нужно понять, как выглядит следующая строка,
[01:46:39.060 --> 01:46:48.420]  которая на один выше. Мы просто бенпольском находим вот этот момент, то есть мы делим пополам,
[01:46:48.420 --> 01:46:55.540]  смотрим какое там значение. Если оно точнее, чем предыдущая, тогда запускаемся от правого,
[01:46:55.540 --> 01:47:02.540]  если равно, то от левого. Да, но просто для того, чтобы запустить, то тебе по сути,
[01:47:02.540 --> 01:47:06.540]  все равно тебе придется вычислять логарифом этих вот чисел, а каждая чиселка вычисляется
[01:47:06.540 --> 01:47:16.340]  за nm. То есть получается ты nm log тратишь только на один бинт. Так что не знаю там какой.
[01:47:16.340 --> 01:47:23.420]  Ну, на вот этом сведении, да, уже просто легче вот это написать уже.
[01:47:23.420 --> 01:47:37.420]  Равно-равно в смысле? Если h меньше, чем v, то у вас случая равно-равно никогда не будет. Нет,
[01:47:37.420 --> 01:47:42.340]  а если случай h меньше v, это означает, что тут начался знак меньше, а тут не начался,
[01:47:42.340 --> 01:47:49.700]  а тут еще продолжаются знаки больше, поэтому случая равно-равно нет. Нет,
[01:47:49.700 --> 01:47:52.940]  у вас остаются там всякие мелочи, я вам их оставлю, то есть в качестве там как,
[01:47:52.940 --> 01:47:59.300]  собственно, там базовые значения писать вот эти вот, чтобы там что-то вычислить. Нет,
[01:47:59.300 --> 01:48:02.380]  а на самом деле, знаете, про задачу я думаю так, потому что на самом деле надо было вам дать не
[01:48:02.380 --> 01:48:06.820]  эту задачу, а на самом деле, как легко догадаться, у нее есть задача на паркик.
[01:48:06.820 --> 01:48:25.540]  Нет, не в этом плане. Нет, там задача найдите nop между всеми суффиксами строки t и всеми
[01:48:25.540 --> 01:48:47.780]  префиксами строки s. Делается это, конечно, действительно быстренько. Нет, у нас нет,
[01:48:47.780 --> 01:48:53.020]  задача-напарник, ну просто потому что у нас как бы все это мы забабахали для того,
[01:48:53.060 --> 01:48:58.140]  чтобы найти вот эти ашки. А теперь можно еще задуматься, а какую информацию можем выковырить из
[01:48:58.140 --> 01:49:05.140]  вот этих вот штук. И, собственно, там получаются задача-напарник с идентичными рассуждениями.
[01:49:05.140 --> 01:49:17.820]  Так что, может, я ее даже и добавлю в контест. Нет, вам-то это в профит в любом случае. Но вам
[01:49:17.820 --> 01:49:21.260]  профит может есть. Как бы, если я уже фиксирую правила, тем больше я вам добавлю задачи,
[01:49:21.260 --> 01:49:32.860]  тем больше у вас вариативность. Задача на фенвика? Любая задача там на фенвика, господи.
[01:49:32.860 --> 01:49:50.420]  Да, ну правда, да, да. Конечно, нет, ну там есть, там сертифики. Нет, ну сформулировать так,
[01:49:50.420 --> 01:49:55.660]  там бывают задачи, где как бы какие-нибудь типа там есть там без деревоотресков дикартовых деревьев
[01:49:55.660 --> 01:50:06.100]  вы не обойдетесь в принципе. Чего? Деревоотресков нет? Ну для шестого, да, конечно. Нет,
[01:50:06.100 --> 01:50:11.380]  просто если это дерево, нет, а если там была задача, то деревоотресков дикартовых деревьев просто. Вот,
[01:50:11.380 --> 01:50:16.980]  то есть нет, там просто по деревоотрескам имеется в виду, что обойтись без всяких дикартещек вообще.
[01:50:16.980 --> 01:50:24.420]  То есть чистое это. Ну да, хотя ладно, да, там, хотя бы, ну вот. Ну, то есть, там условно говоря,
[01:50:24.420 --> 01:50:39.900]  там как бы, да, в общем ладно, не суть. В каком втором? Ну, смотрим, если h тут, то значит,
[01:50:39.900 --> 01:50:48.380]  что мы имеем? Равно-равно. Тогда здесь получается l, l, l, а тут что? Ответ, как повезет, есть вот этот
[01:50:48.380 --> 01:51:02.220]  диагональ или нет? Чего? h, v не будут равны пока друг другу. Но они иногда бывают равны друг другу?
[01:51:02.220 --> 01:51:12.900]  Как повезет. Нет, ну они как повезет. Тут два случая есть. Потому что если символы,
[01:51:12.900 --> 01:51:19.220]  потому что если диагональка есть, то тут будет l плюс один и два неравенства. Ну, там будет что-то
[01:51:19.220 --> 01:51:28.340]  типа там пум-пум и пум-пум. И тогда значит вот h3 сюда, v3 сюда. Или диагональки нет. А если диагональки
[01:51:28.340 --> 01:51:33.500]  нет, тогда у нас оказывается тут равно-равно и тогда просто оказывается, что h и v тупо пипастятся.
[01:51:33.500 --> 01:51:42.540]  Вот и все. Правильно, входит такие звезды шоу-бизнеса и им говорят, смотрите, вот есть 20 палочек.
[01:51:42.540 --> 01:51:57.900]  Каждый игрок должен брать от одной до трех палочек. Но тут внимание, кто заберет последнюю
[01:51:57.900 --> 01:52:07.620]  проиграл. Да, и вот так и быть. Как говорится, мэтры очень любезны, поэтому первым ходит гость.
[01:52:07.620 --> 01:52:18.540]  Так вот, вы знаете, в том сезоне в эту игру смог выиграть только Александр Добогаров.
[01:52:18.540 --> 01:52:30.220]  Так, ну ладно, бесполезно спрашивать. А Ермольника не знаете? Замечательно. Кошмар.
[01:52:30.220 --> 01:52:38.060]  Кошмар. Господи, Добогаровы знают Ермольника? Нет, господи, ну как это вообще? Господи.
[01:52:38.060 --> 01:52:46.060]  Понятно. Нет, вы вот... Ну окей. Ну вот, но как выяснилось, судя по тому, как играл Добогаров,
[01:52:46.380 --> 01:52:51.780]  ну есть, иногда было чей, что иногда мэтры, по-моему, явно поддавались откровенно, но в случае
[01:52:51.780 --> 01:52:59.060]  Добогарова явно было видно, что он знал. Вот. Ну да, то есть, я не знаю, то есть, в более
[01:52:59.060 --> 01:53:03.980]  современных версиях Форд Боярда там вообще там, называется в этой игру, там мэтр очень старался
[01:53:03.980 --> 01:53:09.100]  не выиграть. Просто максимально старался, только единственное, что там довели уже по количеству
[01:53:09.100 --> 01:53:15.100]  палочек, уже просто довели там, по-моему, до семи. То есть, уже там до семи, чтобы уже там,
[01:53:15.100 --> 01:53:21.620]  чтобы девушка уже хоть что-то сообразила. Вот, потому что там мэтр очень старался. Да. Так,
[01:53:21.620 --> 01:53:28.340]  но давайте подумаем. Но давайте подумаем. Казалось бы, а как тут вообще надо играть? Казалось бы,
[01:53:28.340 --> 01:53:36.140]  сложная игра с огромным количеством комбинаций. Вот. Но играть просто. Ну, во-первых, давайте
[01:53:36.140 --> 01:53:40.740]  предположим, что двадцатой палочки никакой нет. И сведем задачу к более классической ситуации,
[01:53:40.740 --> 01:53:50.180]  когда прыгает тот, кто не может сделать ход. Ну вот. Ну, как тогда задача решается? Ну,
[01:53:50.180 --> 01:54:00.340]  да. Ну, действительно, конкретно в данном случае действительно все просто. Надо просто забрать
[01:54:00.340 --> 01:54:04.940]  три палочки, а потом каждый ход следующего противника дополнять до четырех. Тогда,
[01:54:04.940 --> 01:54:08.500]  после вашего хода, будет составиться сначала шестнадцать, потом двенадцать, потом восемь,
[01:54:08.500 --> 01:54:16.420]  потом четыре, потом ноль. Кайф. Так, ну, думаю, это понятно, да? Вот. Правда, возникает идея,
[01:54:16.420 --> 01:54:25.140]  что может быть это... Ну, правда, бывают более сложные случаи. Это я сказал один, два, три. А
[01:54:25.140 --> 01:54:35.820]  если, допустим, можно за один ход брать, ну, скажем, там, я не знаю, два, четыре или семь палочек.
[01:54:35.820 --> 01:54:47.540]  Так, вот их нет. Ну, вот давайте немножко разомнемся на эту тему. Да, естественно,
[01:54:47.540 --> 01:54:53.020]  мы... Но тут вот оказывается идея, что давайте решим задачу, оказывается динамикой неожиданно.
[01:54:53.020 --> 01:54:59.980]  Казалось бы, какой динамикой? А простой. Давайте для каждого количества палочек от нуля до н
[01:54:59.980 --> 01:55:08.380]  попытаемся решить задачу. То есть попытаемся понять, кто выигрывает при правильной игре.
[01:55:08.380 --> 01:55:16.820]  Ну, например, так и пишем, что если у нас ноль или одна палочка, то заведомо выигрывает вторую
[01:55:17.180 --> 01:55:26.780]  первую сразу не может сделать ход. Но мы эту ситуацию будем называть проигрышной. Да, у нас такое вот
[01:55:26.780 --> 01:55:32.100]  интересное определение будет, что мы будем считать, что игра... То есть будем называть игру выигрышной,
[01:55:32.100 --> 01:55:36.180]  если она или проигрышной, если она выигрышной, проигрышной для того игрока, кто в этой позиции
[01:55:36.180 --> 01:55:45.500]  делает ход. Вот, соответственно, значит, вот и видим. Значит, тут проигрыш. Если у нас две палочки,
[01:55:45.500 --> 01:55:49.300]  то тут, конечно, автоматически выигрыш, потому что остается только взять две палочки и не париться.
[01:55:49.300 --> 01:55:57.020]  Да и во-первых, во-второй тоже возьми две палочки и не парься. В четверочке ситуация чуть поинтереснее.
[01:55:57.020 --> 01:56:06.700]  В четверочке впервые у вас появляется возможность ошибиться. Да, то есть вам приходится, то есть вы
[01:56:06.700 --> 01:56:12.260]  можете взять четыре палочки выиграть, но можете взять две палочки и выиграть противник. Но тем не менее,
[01:56:12.580 --> 01:56:19.300]  вы выиграть можете. Так, а что будет на пяти палочках? Да, тоже выигрыш, но тоже с
[01:56:19.300 --> 01:56:27.100]  возможностью ошибки. А на шести палочках? Вот, а то тут проблема, действительно. Оказывается,
[01:56:27.100 --> 01:56:37.380]  мы можем взять либо две, либо четыре палочки, но оба раза мы приходим к пробежу. Да, хорошо. Так,
[01:56:37.540 --> 01:56:43.740]  что можно взять на семи палочках? Да, ну вот смотрите, только один из трех ходов ведет к победе.
[01:56:43.740 --> 01:56:51.140]  Ну это да, то есть как-то в шахматы есть выражение, точный ход. Вот здесь прям вот такая неожиданная
[01:56:51.140 --> 01:57:01.700]  ситуация, точный ход. Ну да, нет, ну конечно тут не очевидно, это ж не ним какой-нибудь. Так,
[01:57:01.700 --> 01:57:09.740]  вот, значит восьмерочка, хотя ладно в них, вот восьмерочка. Так, ну здесь, так, ну здесь конечно
[01:57:09.740 --> 01:57:20.660]  проще, здесь аж два из трех ходов ведет к победе. Так, а что у нас для девяточки? Да, три хода и все
[01:57:21.100 --> 01:57:31.860]  две палочки, это значит плохо, четыре палочки, плохо, семь палочек, плохо. Так, а что у нас на десяти
[01:57:31.860 --> 01:57:40.180]  палочках? Да, вот это да, вот это вообще не тревеля, два плохо, семь плохо, четыре хорошо.
[01:57:40.180 --> 01:58:04.980]  Вот, ну давайте, да, сейчас породить. Здесь как-то ничьих не бывает, потому что игра рано или поздно
[01:58:04.980 --> 01:58:14.700]  закончится. Что важно, независимо от действий игроков игра когда-то закончится. Значит тут у нас
[01:58:14.700 --> 01:58:31.980]  да тоже выигрыш, а в двенадцати у нас что? Проигрыш. А в тринадцати? Победа. Так,
[01:58:31.980 --> 01:58:48.820]  победа, главная победа. Так, а четырнадцать? А пятнадцать? Ой, ой, и тут мы неожиданно что-то начинаем
[01:58:48.820 --> 01:58:55.500]  подозревать, что что-то зациклилось. Как странно, что-то с какого-то время что-то вот ВВП какое-то
[01:58:55.500 --> 01:59:25.500]  пошло. Да, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[01:59:25.500 --> 01:59:27.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[01:59:55.500 --> 01:59:57.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:00:25.500 --> 02:00:27.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:00:55.500 --> 02:00:57.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:00:57.500 --> 02:00:59.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:00:59.500 --> 02:01:01.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:01.500 --> 02:01:03.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:03.500 --> 02:01:05.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:05.500 --> 02:01:07.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:07.500 --> 02:01:09.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:09.500 --> 02:01:11.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:11.500 --> 02:01:13.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:13.500 --> 02:01:15.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:15.500 --> 02:01:17.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:17.500 --> 02:01:19.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:19.500 --> 02:01:21.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:21.500 --> 02:01:23.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:23.500 --> 02:01:25.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:25.500 --> 02:01:27.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:27.500 --> 02:01:29.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:29.500 --> 02:01:31.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:31.500 --> 02:01:33.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:33.500 --> 02:01:35.500]  ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП, ВВП,
[02:01:35.500 --> 02:01:37.500]  ВВП, ВВП, ВВП.
[02:02:05.500 --> 02:02:09.500]  Но вы когда-нибудь пробовали грабить БАД без полицейской формы? Вы что, ребята?
[02:02:11.500 --> 02:02:13.500]  Соответственно...
[02:02:13.500 --> 02:02:15.500]  А вот, значит, смотрите.
[02:02:15.500 --> 02:02:21.500]  Но, как и странно, они почему-то соблюдают какой-то кодекс, согласно которому они ходят по очереди.
[02:02:23.500 --> 02:02:25.500]  Все более того, только на соседнюю клеточку.
[02:02:25.500 --> 02:02:28.500]  Но, на самом деле, это в разные постановки задачи бывает.
[02:02:28.500 --> 02:02:31.500]  Бывает постановка задачи, когда оба ходят только на соседние клеточки.
[02:02:31.500 --> 02:02:34.500]  Бывает, когда у полицейского еще возможность пойти по диагонали.
[02:02:35.500 --> 02:02:36.500]  Вот.
[02:02:36.500 --> 02:02:39.500]  Значит, грабитель выигрывает, если ему удастся соскочить с острова.
[02:02:39.500 --> 02:02:43.500]  Соскочить значит просто с клеточки шагнуть в аут.
[02:02:45.500 --> 02:02:46.500]  Вот.
[02:02:46.500 --> 02:02:50.500]  Ну, понятно, полицейский выигрывает, если он окажется с грабителем в одной клеточке, в той или иной.
[02:02:50.500 --> 02:02:52.500]  А они обязаны двигаться каждый раз?
[02:02:52.500 --> 02:02:54.500]  Или они могут где-то походу, где-то походу остановиться?
[02:02:54.500 --> 02:02:57.500]  Обязаны... Ну, в каких-то вариантах обязаны двигаться, допустим.
[02:02:57.500 --> 02:03:01.500]  Ну, полицейский может забираться в какой-то клеточке, а он продолжается...
[02:03:01.500 --> 02:03:03.500]  Он может просто в трени с бренчем.
[02:03:03.500 --> 02:03:04.500]  Ну, он...
[02:03:08.500 --> 02:03:09.500]  Давайте более простая форма.
[02:03:09.500 --> 02:03:12.500]  Да, давайте так. Вертолет еще не изобрели, поэтому да.
[02:03:14.500 --> 02:03:15.500]  Конечно.
[02:03:15.500 --> 02:03:16.500]  Ну, Манхеттен, да.
[02:03:16.500 --> 02:03:20.500]  Ну, Манхеттен изобрели до появления...
[02:03:20.500 --> 02:03:23.500]  Все-таки до появления вертолета, да.
[02:03:25.500 --> 02:03:30.500]  Но потом это неважно, потому что потом изобрели ГТА и выяснилось, что у грабителя тоже есть вертолет при желании.
[02:03:30.500 --> 02:03:32.500]  Может и на Манхеттене, конечно, но...
[02:03:34.500 --> 02:03:35.500]  Так вот.
[02:03:36.500 --> 02:03:37.500]  Ну, что тут сделать?
[02:03:37.500 --> 02:03:40.500]  Ну, конкретно в данной ситуации, конечно, все достаточно просто.
[02:03:40.500 --> 02:03:44.500]  Да, тут полицейский достаточно быстро приходит в единственную дырку и, в общем-то, все.
[02:03:44.500 --> 02:03:46.500]  Ну, там должен быть постоять.
[02:03:46.500 --> 02:03:48.500]  Нужно будет время двигаться где-то.
[02:03:48.500 --> 02:03:49.500]  Ну, на самом деле нет.
[02:03:49.500 --> 02:03:53.500]  Он может спокойно двигаться по направлению к грабителю и не паниковать.
[02:03:53.500 --> 02:03:56.500]  Если, конечно, только ему не повезет с цветом.
[02:03:57.500 --> 02:03:59.500]  Потому что есть, конечно, тут одна...
[02:04:00.500 --> 02:04:03.500]  Потому что есть одна маленькая подляночка.
[02:04:03.500 --> 02:04:11.500]  Потому что если они ходят только в соседние клетки, то на самом деле есть такой интеллектуальный случай взаимного цукцванга.
[02:04:16.500 --> 02:04:17.500]  Ну да.
[02:04:17.500 --> 02:04:18.500]  Ну да.
[02:04:19.500 --> 02:04:24.500]  Означает он, что любой ход ухудшает вам позицию.
[02:04:25.500 --> 02:04:26.500]  То есть вам невыгодно ходить.
[02:04:27.500 --> 02:04:33.500]  То есть если в игре ГО, например, есть функция пас, то в шахматах у вас паса нет.
[02:04:34.500 --> 02:04:35.500]  Вот.
[02:04:36.500 --> 02:04:37.500]  И оказывается следующее.
[02:04:37.500 --> 02:04:39.500]  Вот здесь действительно цуксанг.
[02:04:40.500 --> 02:04:45.500]  Потому что, оказывается, если грабитель куда-то ходит...
[02:04:47.500 --> 02:04:51.500]  Но то, как бы сюда-сюда он пойти не может, полицейский, потому что его мгновенно поймает, правда?
[02:04:52.500 --> 02:04:53.500]  Вот.
[02:04:53.500 --> 02:04:57.500]  Ну и в данном случае тогда, в общем-то, мат практически понятен.
[02:04:57.500 --> 02:05:01.500]  То есть тут какой-нибудь ГП, значит, грабителю остается только убегать.
[02:05:01.500 --> 02:05:03.500]  Полицейский, значит, идет за ним по пятам.
[02:05:05.500 --> 02:05:06.500]  Значит, ГП.
[02:05:07.500 --> 02:05:08.500]  Ну и шо?
[02:05:09.500 --> 02:05:10.500]  Ну знаешь, как это...
[02:05:10.500 --> 02:05:11.500]  Знаешь, как это...
[02:05:13.500 --> 02:05:16.500]  Знаешь, это раздоровок клиента, раздоровок клиента с таксистом.
[02:05:16.500 --> 02:05:17.500]  Знаешь, это таксист.
[02:05:17.500 --> 02:05:18.500]  Да мне не хами.
[02:05:18.500 --> 02:05:20.500]  А то я сейчас достану монтировку.
[02:05:21.500 --> 02:05:22.500]  И посмотри спокойно.
[02:05:22.500 --> 02:05:23.500]  Не смогу выворачиваться от пуль.
[02:05:27.500 --> 02:05:28.500]  Ну что, да.
[02:05:29.500 --> 02:05:31.500]  Ну там, знаете, типичный диалог там.
[02:05:32.500 --> 02:05:33.500]  Вызывайте такси, таксист приедет.
[02:05:34.500 --> 02:05:35.500]  Здравствуйте.
[02:05:35.500 --> 02:05:36.500]  Мне нужно срочно захватить мир.
[02:05:37.500 --> 02:05:38.500]  Таксист.
[02:05:38.500 --> 02:05:39.500]  Это на Ленинском.
[02:05:40.500 --> 02:05:41.500]  Вот это на русском.
[02:05:42.500 --> 02:05:43.500]  Садись.
[02:05:43.500 --> 02:05:44.500]  А ты кто по знаку зодиака?
[02:05:45.500 --> 02:05:46.500]  Неразговорчивый водолей.
[02:05:47.500 --> 02:05:48.500]  Ну вот, ну и так далее.
[02:05:56.500 --> 02:05:57.500]  Так, ну ладно, тем временем.
[02:05:58.500 --> 02:06:01.500]  Тем временем, пока мы критично таксисты, у нас это по-полицейски съел грабителя.
[02:06:10.500 --> 02:06:12.500]  Никто не знал, что актер теперь реально хотел съесть.
[02:06:18.500 --> 02:06:19.500]  Понятно.
[02:06:20.500 --> 02:06:21.500]  Понятно.
[02:06:22.500 --> 02:06:23.500]  Кешмар, за что тогда?
[02:06:24.500 --> 02:06:27.500]  Мало кто знает, но Анатолий Попалов очень хотел скушать Клару Румянова.
[02:06:27.500 --> 02:06:28.500]  Да-да-да, замечательно.
[02:06:31.500 --> 02:06:32.500]  Ладно.
[02:06:32.500 --> 02:06:34.500]  Но я просто привожу пример к такой задаче.
[02:06:34.500 --> 02:06:35.500]  Потому что я тут, конечно, дал такую расстановку.
[02:06:36.500 --> 02:06:38.500]  Но бывает тупая ситуация.
[02:06:38.500 --> 02:06:47.500]  Когда, если бы в этой ситуации первым ходил полицейский, то грабитель, конечно, от него всегда убегал.
[02:06:48.500 --> 02:06:51.500]  Но в том плане, если полицейский придет сюда, то грабитель идет сюда.
[02:06:51.500 --> 02:06:55.500]  Полицейский идет сюда, грабитель сюда.
[02:06:55.500 --> 02:06:59.500]  Полицейский идет сюда, грабитель сюда, ну и так далее.
[02:06:59.500 --> 02:07:04.500]  Полицейский тут просто далеко не отходит и получается интеллектуальная ситуация, что полицейский грабителя поймать не может.
[02:07:04.500 --> 02:07:11.460]  но грабителю главное просто сюда куда не пойти по душе своей вот но и с другой
[02:07:11.460 --> 02:07:15.780]  стороны сильно в аутом все равно не убежит потому что полицейский вы
[02:07:15.780 --> 02:07:24.260]  прикрывает проход получается да мы будем считать но получается ну как вы
[02:07:24.260 --> 02:07:28.660]  сказали грабитель побеждает если он в аут уйдет в аут полицейский побеждает
[02:07:28.660 --> 02:07:31.280]  если они с грабителем оказались в одной клетке не происходит ни того ни
[02:07:31.280 --> 02:07:36.320]  другого но значит никто не выиграл это вообще ничья то есть это вот типичный
[02:07:36.320 --> 02:07:41.480]  пример то есть такой такой ничейной ситуации бывает и более интеллектуальная
[02:07:41.480 --> 02:07:45.280]  конечно ситуация действительно но то есть просто более типичная ситуация
[02:07:45.280 --> 02:07:50.320]  когда тут вот действительно грабитель туточки то есть они тут сидят за очень
[02:07:50.320 --> 02:07:57.560]  очень очень очень очень очень длинным столом вот ну да можно двигаться по циклу
[02:07:57.560 --> 02:08:02.920]  там ну там как знаете там как бы интеллектуально так то есть отрите
[02:08:02.920 --> 02:08:07.640]  тут интерес получается такой смотрите полицейский гарантирует себе не проигрыш
[02:08:07.640 --> 02:08:14.080]  то есть он гарантирует себе проигрыш потому что у него есть он может так туда
[02:08:14.080 --> 02:08:19.220]  сюда ходить то есть это просто может ли он поиграть на выигрыш но если очень
[02:08:19.220 --> 02:08:24.920]  длинный стол то скорее всего как только он там то есть вот то как бы есть риск
[02:08:24.920 --> 02:08:27.680]  что просто чем дальше он придет тем больше грабитель может ему там
[02:08:27.680 --> 02:08:31.560]  симметрично начать отвечать как но там нет там дальше будет нет более
[02:08:31.560 --> 02:08:34.960]  интересно тут вы даете задачу думать а если у полицейского этом есть опции
[02:08:34.960 --> 02:08:39.520]  ходить по диагонали на самом деле там для кстати маленьких вот этих вот
[02:08:39.520 --> 02:08:47.040]  промежутков там ответ не такой тривиальный как может показаться нет ну
[02:08:47.040 --> 02:08:52.360]  нет ну как нет ну конкретно в таком случае да потому что в общем-то да то
[02:08:52.360 --> 02:08:55.480]  есть если там полицейский дошел куда-нибудь до середины или там даже до
[02:08:55.480 --> 02:08:58.480]  двух третьей то грабитель просто повернулся и пошел в другую сторону и
[02:08:58.480 --> 02:09:03.480]  тогда если полицейский там будет дурачок и побежит за ним ну тогда как
[02:09:03.480 --> 02:09:06.840]  каким-то будет называться поздравляю если полицейский одумается побежит к
[02:09:06.840 --> 02:09:13.680]  выходу ну грабитель походит походит подумает и пойдет вот да ну бывает такие
[02:09:14.240 --> 02:09:25.800]  то есть самые разные игры бывают но конечно тут вот чего нету там уже дальше
[02:09:25.800 --> 02:09:30.120]  надо тогда формулировать ладно значит вместо того чтобы это ну то есть самые
[02:09:30.120 --> 02:09:41.760]  разные на самом деле игры есть вот значит смотреть
[02:09:44.680 --> 02:09:52.240]  где давать но давайте вот графа мы перейдем потому что пока я так
[02:09:52.240 --> 02:09:58.840]  сформулировал просто это что-то красивое вот но обычно сводится это кеша к единому
[02:09:58.840 --> 02:10:04.120]  стандартному виду то есть на самом деле все эти игры можно описать единым образом
[02:10:04.120 --> 02:10:08.280]  то есть дан ориентированный граф
[02:10:08.920 --> 02:10:22.500]  то есть дан какой-нибудь ориентированный граф какой-нибудь вот такой вот вот и в
[02:10:22.500 --> 02:10:29.880]  какой-то вершине находится фишка играют два игрока каждый игрок двигает фишку
[02:10:29.880 --> 02:10:34.520]  по ребро так чаще чем из вершины проигрывает тот кто не может делать ход
[02:10:34.520 --> 02:10:38.840]  заметим что конкретный граф конечно порождает на самом деле даже не одну
[02:10:38.840 --> 02:10:45.540]  игру целых модуль вы Модульвый игрок потому что как бы и фишка с пышно как бы
[02:10:45.540 --> 02:10:51.380]  поставить фишку в каждую вершину тоже новая игра более того даже оказывается
[02:10:51.380 --> 02:10:55.800]  что когда игрок двигает фишку он как бы переходит из игры в игру можно еще так
[02:10:55.800 --> 02:10:59.080]  говорить ну то есть получается игра а то что следится с конкретной позицией в
[02:10:59.080 --> 02:11:07.580]  игре. То есть вот на самом деле такие игры мы можем изучать. Так, но тогда приходит время,
[02:11:07.580 --> 02:11:15.180]  конечно, формализовать еще пару понятий. Давайте формализуем. А именно, что такое выигрышная игра?
[02:11:15.180 --> 02:11:28.420]  Да, мысль позитивна. То есть игра выигрышная,
[02:11:28.420 --> 02:11:47.220]  если у первого игрока, то есть того, кто ходит сейчас, есть выигрышная стратегия. То есть у него
[02:11:47.220 --> 02:11:51.100]  есть какой-то план, придерживаясь которого он выиграет, независимо от того, как будет действовать
[02:11:51.100 --> 02:12:20.900]  второй игрок. А что такое выигрышная игра? Это скорее свойство, а не определение.
[02:12:20.900 --> 02:12:31.540]  Мы будем называть игру проигрышной. Вот смотрите, мы так сделаем. Если у второго игрока есть выигрышная
[02:12:31.540 --> 02:12:58.900]  стратегия. У второго игрока есть выигрышная стратегия. Вот красота, красота.
[02:12:58.900 --> 02:13:14.780]  У игрока есть такая стратегия. Так, но еще у нас появились нечейные игры. А теперь вот вопрос
[02:13:14.780 --> 02:13:28.220]  на засыпку. Но это не позитивно. Просто непонятно, а как это? Что такое? Вот как доказать, что нет стратегии?
[02:13:28.220 --> 02:13:54.140]  Может продолжаться, да, но может продолжаться, а может и не продолжаться. Нет, это да, но это мы
[02:13:54.140 --> 02:14:00.980]  же тут с помощью стратегии каких-то говорим, потому что исходы игр, даже выигрышная игра может
[02:14:00.980 --> 02:14:08.540]  закончиться проигрышем первого игрока, если он будет играть по левому. А вот это уже да,
[02:14:08.860 --> 02:14:24.620]  позитивно, в смысле весело, то есть, да, вот это позитивно, да. То есть, как бы да, если выигрышная игра
[02:14:24.620 --> 02:14:28.620]  выигрышна, если первое может выиграть, проигрышная, если второе может выиграть. Выиграть в смысле
[02:14:28.620 --> 02:14:34.860]  независимо действhey первого игрока, а другого игрока, а игра нечейная, если оба независим magazина
[02:14:34.860 --> 02:14:43.240]  друг от друга могут не проиграть, про выигрыш не говорим, но как-будто не проигрыш, если у обоих
[02:14:43.240 --> 02:15:11.880]  игроков есть непроигрышная стратегия, в данном случае гарантируется, хотя на самом деле
[02:15:11.880 --> 02:15:20.320]  заметим следующее, что это не так принципиально, потому что предположим, что вершины одни и те же,
[02:15:20.320 --> 02:15:25.520]  а наборы ребер у каждого из игроков разнятся, тогда давайте просто граф раздвоим,
[02:15:25.520 --> 02:15:38.040]  ну да нет, скопируем вершины, но не ребра, и пусть ребра будут вести из одной копии графа в другую,
[02:15:38.040 --> 02:15:42.240]  то есть мы будем добиваться того, что первый игрок будет ходить так скажем из верхней половины
[02:15:42.240 --> 02:15:51.760]  в нижнюю, а второй из нижней в верхнюю, почему это абсолютно эквивалентно, нет это эквалентно,
[02:15:51.760 --> 02:15:58.880]  тоже ситуация, когда как бы ходы не зависят от того, кто ходит в вершине, просто тут граф просто
[02:15:58.880 --> 02:16:03.880]  строится таким образом, что просто в конкретную вершину на самом деле просто там один из игроков
[02:16:03.880 --> 02:16:15.480]  попасть не может в принципе, ну типичная ситуация с двудольным графом, ну вот то есть в принципе,
[02:16:15.480 --> 02:16:21.560]  то есть да, это на самом деле, то есть с такой точки зрения не так страшно, хотя конечно есть
[02:16:21.560 --> 02:16:25.880]  бывают более продвинутые игры, действительно в которых это становится прям даже уйти принципиально,
[02:16:25.880 --> 02:16:41.120]  но да, нет это да, это да, боюсь такого уровня мы не дойдем, но мы пока просто начнем вот с
[02:16:41.120 --> 02:16:46.600]  простого, вот собственно есть граф, вот хочется для каждой вершины понять она выигрышная,
[02:16:46.600 --> 02:16:54.440]  проигрышная, нечейная или еще есть какие-то варианты, почему пара вершин,
[02:16:54.440 --> 02:17:04.960]  нет смотрите, у нас одна фишка, у нас играют два игрока, полицейский грабитель сводится к этой
[02:17:04.960 --> 02:17:10.120]  задаче просто тем, что мы строим граф на всех возможных конфигурациях в игре, да, то есть там
[02:17:10.120 --> 02:17:14.120]  получается конечно да, н квадрат, м квадрат еще и на два, потому что надо помечать кто конкретно
[02:17:14.120 --> 02:17:22.600]  ходит, но суть одна, то есть на самом деле все игры, ну на самом деле практически там многие
[02:17:22.600 --> 02:17:28.400]  детерминированные по крайней мере игры сводятся вот к этому вот, даже всякие там шахматы, шашки го,
[02:17:28.400 --> 02:17:37.480]  но теперь есть какая-то вопрос, а бывают ли вообще игры, надо конечно говорить соформально,
[02:17:37.480 --> 02:17:42.640]  что мы рассматриваем в первых детерминированные игры, то есть видите ходы тут от случая никак не
[02:17:42.640 --> 02:17:50.080]  зависят, во-вторых они равноправные, потому что из вершины можно, то есть то куда можно пойти
[02:17:50.080 --> 02:17:58.280]  из вершины не зависит от того, какой игрок ходит, вот сейчас, ну да, равноправные или симметричные,
[02:17:58.280 --> 02:18:05.160]  да, ну вот, а так есть там какие-то еще умные слова на эту тему, ладно, слета не помню, неважно,
[02:18:05.160 --> 02:18:10.280]  вот это важно говорить, что бывают игры, в которых у вас там допускается ходить по каким-то
[02:18:10.320 --> 02:18:15.700]  вероятностям или там что-то еще делать, ну там бывают игры в которых надо очки, конечно,
[02:18:15.700 --> 02:18:21.320]  набирать еще, а не просто вот, да, но там еще отдельная песня, конечно, еще бывают игры,
[02:18:21.320 --> 02:18:26.680]  в которых выигрывает тот, кто не может сделать ход, но как вы сами понимаете это в общем-то не сильно
[02:18:26.680 --> 02:18:32.840]  портирует, то есть на самом деле не сильно принципиально, добавление этого там лишнего отростка,
[02:18:32.840 --> 02:18:38.920]  так вот возникает вопрос, так бывают ли вообще игры, кроме этих трех, то есть бывают какие-то
[02:18:38.920 --> 02:18:53.280]  игры которые не являются выигрышными проигрышными линичейными да все победили и это не нища не почему
[02:18:53.280 --> 02:19:03.320]  одновременно потому что надо выиграть не выигрышные не проигрышать и не ничьи это это как я как во как
[02:19:03.920 --> 02:19:08.840]  одновременно быть выигрышной нечейно если первые гробы я точно могу выиграть а вторую
[02:19:08.840 --> 02:19:19.040]  это круто а я заведомо могу не проиграть нету наш сказали проигрывает только и может сделать
[02:19:19.040 --> 02:19:32.360]  ход вы зафиксировали но вот но вот осталось только выяснить почему если кто-то выиграл
[02:19:32.360 --> 02:19:41.960]  значит что второй проиграл данный случай да но почему нету на самом деле ну слета
[02:19:41.960 --> 02:19:47.440]  слета на самом деле не факт из определения напрямую пока я следствие не вижу если игра
[02:19:47.840 --> 02:19:56.920]  так давайте не путать понятия кто-то мог кто-то выиграл и есть выигрышной стратегии
[02:19:56.920 --> 02:20:03.680]  что может он выиграть потому что противник да потому что там прошло противник лох там
[02:20:03.680 --> 02:20:15.360]  я не знаю а на самом деле был бы он не лохом он бы мог и выиграть ну условно оптимально да как то
[02:20:15.360 --> 02:20:18.760]  но что значит вот тут непонятно все кстати что такое
[02:20:18.760 --> 02:20:26.640]  стратегии одного игрока у другого есть стратегии
[02:20:26.640 --> 02:20:39.440]  я тебе говорю описание выигрыши стратегии если есть если у игрока мы тоже первые если
[02:20:39.440 --> 02:20:45.280]  у игрока один есть стратегия для каждой стратегии игрока два когда у него выигрывает
[02:20:45.800 --> 02:20:50.540]  я считаю что тебя нет
[02:20:50.540 --> 02:21:18.540]  как мы пересчитываем конкретное состояние через предыдущие
[02:21:19.540 --> 02:21:22.540]  ну что такое предыдущие состояния если игра в циклический
[02:21:25.540 --> 02:21:27.540]  ну не факт
[02:21:27.540 --> 02:21:31.540]  если вершина находится в цикле, это не значит, что она обязательно ничейная
[02:21:31.540 --> 02:21:32.540]  как минимум
[02:21:32.540 --> 02:21:36.540]  ну как максимум у нас пока фундаментальный вопрос, а бывают ли вообще другие вершины?
[02:21:42.540 --> 02:21:43.540]  почему?
[02:21:48.540 --> 02:21:50.540]  вот почему
[02:21:52.540 --> 02:21:56.540]  извините, для меня это не является автоматическим переходом
[02:21:56.540 --> 02:22:22.540]  ну да, но лично у меня это все, то есть если я знаю стратегию противника, я могу его завалить, а если я не знаю стратегию противника, может он пользуется тем, что я что-то не знаю
[02:22:27.540 --> 02:22:29.540]  это игра как с открытым
[02:22:30.540 --> 02:22:31.540]  и что?
[02:22:32.540 --> 02:22:33.540]  и тем не менее
[02:22:34.540 --> 02:22:41.540]  а тем не менее, надо будет у меня поймать там плейфишу в шахматы, потому что постоянно там выигрыши проходят за счет того, что противник что-то не знал, а я знаю
[02:22:42.540 --> 02:22:45.540]  потому что шахматы игрок не может действовать оптимально
[02:22:46.540 --> 02:22:47.540]  почему это не может?
[02:22:47.540 --> 02:22:49.540]  заключается в способности человека
[02:22:50.540 --> 02:22:52.540]  так ты не обязательно с человеком играешь
[02:22:52.540 --> 02:22:54.540]  нет, но компьютер тоже не может иметь
[02:22:54.540 --> 02:22:58.540]  но компьютер тоже, как выясняется, может на компьютере найдется какая-нибудь любая нейросетка
[02:22:58.540 --> 02:23:00.540]  он же не умеет всех обучить
[02:23:00.540 --> 02:23:02.540]  я могу заприкатить
[02:23:02.540 --> 02:23:03.540]  ну не можешь
[02:23:03.540 --> 02:23:04.540]  почему?
[02:23:04.540 --> 02:23:06.540]  ты посчитай, сколько тебе состояний
[02:23:06.540 --> 02:23:07.540]  слушай, слушай, он не логачит
[02:23:07.540 --> 02:23:10.540]  потому что ты знаешь, что он будет еще как-нибудь про это, посчитай, сколько состояний
[02:23:10.540 --> 02:23:12.540]  мне нравится, потому что есть только позиции
[02:23:12.540 --> 02:23:13.540]  чего?
[02:23:13.540 --> 02:23:19.540]  у нас нет неправильной стратегии, значит буквально по определению у второго игрока существует стратегия
[02:23:19.540 --> 02:23:23.540]  у другого игрока существует стратегия, что при любых наших ходах
[02:23:23.540 --> 02:23:24.540]  мы не сможем не проиграть
[02:23:24.540 --> 02:23:25.540]  почему это?
[02:23:25.540 --> 02:23:28.540]  неправильной стратегии связано wi-fi
[02:23:28.540 --> 02:23:33.540]  что при любой стратегии две-, мы умеем не проиграть
[02:23:33.540 --> 02:23:39.540]  мы берем к этому冷 центрам, получаем что существуют стратегия второго игрока чтобы не сможем проиграть
[02:23:39.540 --> 02:23:42.500]  то есть существует свою IM wurden
[02:23:42.500 --> 02:23:43.760]  то есть существует свою imagery
[02:23:43.760 --> 02:23:48.460]  ну нет, тут есть тонкий обман
[02:23:48.460 --> 02:23:59.460]  У меня есть стратегия, придерживаясь которой, я вообще не знаю, как будет второй игрок играть, не проигрываю.
[02:23:59.460 --> 02:24:02.460]  Независимо ни от чего.
[02:24:02.460 --> 02:24:17.460]  Контрапозиция звучит так, какая бы ни была у меня стратегия заранее фиксированная, второй игрок сможет ее обвалить.
[02:24:17.460 --> 02:24:23.460]  Но казус заключает в том, что второй игрок для этого должен знать эту стратегию.
[02:24:24.460 --> 02:24:28.460]  Нам надо доказать, что хотя бы у одного игрока есть непроигрышная стратегия.
[02:24:28.460 --> 02:24:31.460]  Что такое стратегия? Это оборужение состояния?
[02:24:35.460 --> 02:24:37.460]  Нет, ну подожди.
[02:24:37.460 --> 02:24:42.460]  Согласны вы с тем, что хотя бы у одного игрока есть непроигрышная стратегия?
[02:24:42.460 --> 02:24:44.460]  Нет.
[02:24:44.460 --> 02:24:46.460]  Ну смотри, предположим противное.
[02:24:46.460 --> 02:24:51.460]  Тогда у игрока нет непроигрышной позиции.
[02:24:51.460 --> 02:24:53.460]  У первого.
[02:24:53.460 --> 02:24:57.460]  Тогда у него если не проигрышная, то она проигрышная.
[02:24:57.460 --> 02:24:59.460]  Значит у второго игрока есть выигрышная стратегия.
[02:24:59.460 --> 02:25:02.460]  Чего-чего-чего-чего-чего-чего-ка?
[02:25:05.460 --> 02:25:08.460]  Нет, если она не является проигрышной, это не значит...
[02:25:08.460 --> 02:25:10.460]  То есть если у второго игрока...
[02:25:10.460 --> 02:25:16.460]  Вот не очень понятно, почему из-за того, что у второго игрока нет проигрышной стратегии, следует, что у первого игрока есть непроигрышная стратегия.
[02:25:27.460 --> 02:25:28.460]  Чего вот он?
[02:25:29.460 --> 02:25:33.460]  Ну вот мы только что вот обсуждали, если что-то нет на самом деле.
[02:25:34.460 --> 02:25:37.460]  Поэтому, видите, тут вот какие-то...
[02:25:39.460 --> 02:25:48.460]  Но это значит, у меня есть стратегия такая, что если я буду и придерживаться, то как бы не играл второй игрок вообще, то я заведомо не проиграю.
[02:25:59.460 --> 02:26:01.460]  Нет, ну я не знаю.
[02:26:01.460 --> 02:26:09.460]  Нет, ну как бы нет, мы решим эту проблему, просто мы не будем пытаться доказывать, исходя из формулировочных, экзовистических соображений каких-то там.
[02:26:09.460 --> 02:26:13.460]  И как-то верим, ну очевидно же, что если у меня нет стратегии, значит у него есть.
[02:26:15.460 --> 02:26:16.460]  А вот извините, не очевидно.
[02:26:19.460 --> 02:26:25.460]  Или попытаться как-то это довести, конечно, можно, если очень формально тогда говорить, а что такое вообще стратегия.
[02:26:25.460 --> 02:26:35.460]  В принципе, но там еще и поверить, что там не окажется выгодно, что, скажем, на пятом ходу из этой вершины выгодно ходить сюда, а на восьмом туда.
[02:26:36.460 --> 02:26:49.460]  И тогда у нас какой-то шоу начинается, ну вот и исходя из того, что я могу обвалить каждую твою стратегию, это не значит, что это игра выигрышная.
[02:26:49.460 --> 02:26:51.460]  То есть может это означает, что ты плохо играешь в шахматы.
[02:26:52.460 --> 02:26:54.460]  Ну вот на самом деле.
[02:26:58.460 --> 02:27:02.460]  Поэтому давайте так, но вместо этого, поэтому как бы будем мыслить позитивно.
[02:27:03.460 --> 02:27:10.460]  То есть вместо нот попытаемся действительно выжить максимум из того, что есть, хотя у нас и более того у нас есть какие-то позитивные принципы.
[02:27:11.460 --> 02:27:13.460]  Принцип номер один.
[02:27:15.460 --> 02:27:18.460]  Смотрите, предположим, что возникла ситуация.
[02:27:19.460 --> 02:27:22.460]  Так давайте, как много маркеров у меня.
[02:27:22.460 --> 02:27:27.460]  Возникла ситуация, когда у меня есть какая-то вершина, из которой есть ходы в какие-то другие вершины.
[02:27:28.460 --> 02:27:33.460]  И хотя бы одна из этих вершин оказалась разведанна проигрышной.
[02:27:35.460 --> 02:27:37.460]  Ну то есть мы уже знаем, что она проигрышная.
[02:27:39.460 --> 02:27:43.460]  Ну вот, ну а что в остальных нас в общем-то сейчас даже не интересует.
[02:27:44.460 --> 02:27:47.460]  Кстати, какие-то ребра могут даже в эту вершину самовести.
[02:27:48.460 --> 02:27:52.460]  Тогда из этого следует, что это вершина какая?
[02:27:53.460 --> 02:27:54.460]  Выигрышная.
[02:27:55.460 --> 02:28:03.460]  Потому что если в этой вершине у второго игрока есть выигрышная стратегия, то в этой игре у первого игрока есть выигрышная стратегия, вида «пойди сюда, а дальше выиграй как второй игрок».
[02:28:05.460 --> 02:28:06.460]  Логично, да?
[02:28:06.460 --> 02:28:14.460]  Если мы дополнительно наложим ацикличность.
[02:28:15.460 --> 02:28:17.460]  Я проявлю. Зачем нам ацикличность?
[02:28:18.460 --> 02:28:20.460]  Этот принцип верен и в циклических графах тоже.
[02:28:22.460 --> 02:28:24.460]  Вот. То есть это отдельно.
[02:28:24.460 --> 02:28:26.460]  Ну давайте, я просто вложу понятие.
[02:28:27.460 --> 02:28:29.460]  Это называется принцип выигрышности.
[02:28:32.460 --> 02:28:35.460]  Ну как называется? Будем его так называть.
[02:28:36.460 --> 02:28:42.460]  Вот. Раунд второй.
[02:28:44.460 --> 02:28:46.460]  Раунд второй звучит так.
[02:28:53.460 --> 02:28:56.460]  А теперь предположим немножко другую ситуацию.
[02:28:57.460 --> 02:29:02.460]  Предположим, что выяснилось, что у вершины есть несколько ходов и все эти ходы ведут в выигрышные игры.
[02:29:03.460 --> 02:29:07.460]  Да. Это «п».
[02:29:10.460 --> 02:29:12.460]  Да, это «п», причем полный.
[02:29:13.460 --> 02:29:15.460]  Вот. Как часто в таких случаях говорят.
[02:29:16.460 --> 02:29:18.460]  Ну хотя нет, никого «п» нет, просто выигрывает тот.
[02:29:19.460 --> 02:29:20.460]  То есть это проигрыш на «к».
[02:29:21.460 --> 02:29:22.460]  Вот.
[02:29:23.460 --> 02:29:24.460]  Ну для нас нам не важно.
[02:29:25.460 --> 02:29:27.460]  Просто другой человечек выиграет. Ничего страшного.
[02:29:28.460 --> 02:29:30.460]  Ну мы, конечно, относимся с первым игроком, поэтому нас, конечно, это чуть-чуть расстраивает.
[02:29:30.460 --> 02:29:31.460]  Вот.
[02:29:32.460 --> 02:29:35.460]  Более того, кстати, да, это называется принцип выигрышности.
[02:29:36.460 --> 02:29:39.460]  Кстати, отметим, что этот принцип применим, когда этих переходов ноль.
[02:29:40.460 --> 02:29:41.460]  Кстати.
[02:29:42.460 --> 02:29:47.460]  Потому что если ходов нет, то про них можно сказать все, как угодно.
[02:29:49.460 --> 02:29:53.460]  То есть если ходов нет, то можно сказать, что на каждом ходу вам купят кокодила.
[02:29:53.460 --> 02:29:54.460]  Ну конечно, да, ходов нет.
[02:29:55.460 --> 02:29:59.460]  Поэтому купят кокодила, там действительно придет дед Мороз.
[02:30:00.460 --> 02:30:01.460]  Там действительно.
[02:30:02.460 --> 02:30:03.460]  Это называть вас в этот экзамен.
[02:30:04.460 --> 02:30:05.460]  Ну и так далее, да.
[02:30:07.460 --> 02:30:08.460]  Вот.
[02:30:09.460 --> 02:30:10.460]  Ну ладно, уже о чем вы мечтаете.
[02:30:11.460 --> 02:30:12.460]  Ну вот.
[02:30:13.460 --> 02:30:14.460]  То есть вот такие есть два принципа.
[02:30:15.460 --> 02:30:16.460]  Их можно применять.
[02:30:17.460 --> 02:30:20.460]  Так вот, в принципе есть такой жалобный принцип.
[02:30:20.460 --> 02:30:23.460]  Так вот, в принципе есть такой жадный метод.
[02:30:24.460 --> 02:30:27.460]  Жадный метод называется, а давайте применять эти принципы пока можем.
[02:30:28.460 --> 02:30:29.460]  Просто жадно.
[02:30:30.460 --> 02:30:31.460]  Ну первое, давайте вот на этом графе посмотрим.
[02:30:32.460 --> 02:30:36.460]  То есть, ну во-первых, начнем с того, что у нас тут вот, конечно, все стоки,
[02:30:37.460 --> 02:30:39.460]  ну вершины, из которых нет ребер, автоматически проигрышные.
[02:30:40.460 --> 02:30:46.460]  Ну а автоматически выигрышными становится все, что в них, все из чего в них можно попасть.
[02:30:47.460 --> 02:30:48.460]  Так.
[02:30:48.460 --> 02:30:49.460]  Так.
[02:30:50.460 --> 02:30:51.460]  Что-то там у нас еще появилось.
[02:30:52.460 --> 02:30:53.460]  Так, появился у вас еще что-нибудь?
[02:30:54.460 --> 02:30:55.460]  Да, здесь вот одна вершинка.
[02:30:56.460 --> 02:30:57.460]  Да, вершинка проигрышная.
[02:30:58.460 --> 02:30:59.460]  Да, вот это вот дальше.
[02:31:00.460 --> 02:31:01.460]  Оба ребра будут выигрышать.
[02:31:02.460 --> 02:31:03.460]  Она проигрышная.
[02:31:04.460 --> 02:31:05.460]  Так, что у нас там дальше?
[02:31:06.460 --> 02:31:07.460]  Раз, две, вешки поигрышные.
[02:31:08.460 --> 02:31:09.460]  Так, две, вешки поигрышные.
[02:31:10.460 --> 02:31:11.460]  Вон три.
[02:31:12.460 --> 02:31:13.460]  Как говорится?
[02:31:14.460 --> 02:31:15.460]  Три, три.
[02:31:16.460 --> 02:31:17.460]  Пиши три.
[02:31:18.460 --> 02:31:20.460]  То в ней надо очень точно ходить.
[02:31:21.460 --> 02:31:22.460]  Сейчас.
[02:31:23.460 --> 02:31:26.460]  То есть видите, в ней, хотя нет, не в ней.
[02:31:27.460 --> 02:31:28.460]  Ладно, не так.
[02:31:29.460 --> 02:31:30.460]  Нет, ну не совсем.
[02:31:31.460 --> 02:31:32.460]  Вот смотрите, здесь надо не ошибиться.
[02:31:33.460 --> 02:31:35.460]  Ладно, здесь, ну здесь тупняк, тупняк.
[02:31:36.460 --> 02:31:37.460]  Значит, тупняк, тупняк, тупняк.
[02:31:38.460 --> 02:31:40.460]  И вот здесь надо не ошибиться, потому что можно вот сюда пойти.
[02:31:41.460 --> 02:31:42.460]  Если хотите, случайно шанс 25%.
[02:31:43.460 --> 02:31:45.460]  Да, точно.
[02:31:45.460 --> 02:31:49.460]  А если противник ходит невероятно, то конечно да.
[02:31:51.460 --> 02:31:52.460]  Хорошо.
[02:31:53.460 --> 02:31:54.460]  Так, ну это по-моему еще не все.
[02:31:55.460 --> 02:31:56.460]  Так, что там у нас еще есть?
[02:31:57.460 --> 02:31:59.460]  Нет, кстати, не все.
[02:32:00.460 --> 02:32:01.460]  Вот еще проигрышная вершина, кстати.
[02:32:02.460 --> 02:32:03.460]  Так.
[02:32:04.460 --> 02:32:05.460]  И автоматически.
[02:32:06.460 --> 02:32:07.460]  Ой.
[02:32:08.460 --> 02:32:14.460]  И видите, оказывается, что наличие циклов вообще не требует от вас, чтобы игры, чтобы там появлялись какие-то игры, кроме выигрыша.
[02:32:15.460 --> 02:32:16.460]  Выигрышных и проигрышных.
[02:32:17.460 --> 02:32:22.460]  Ну, в принципе, как же было сказано, если игра ациклическая, самый простой для анализа случаи.
[02:32:23.460 --> 02:32:27.460]  Если игра ациклическая, то игра ациклический, то все игры выигрышные и проигрышные.
[02:32:28.460 --> 02:32:29.460]  Правда?
[02:32:30.460 --> 02:32:32.460]  И более того, простым ДФСМЗВ плюс Е вы еще легко поймете, кто какая.
[02:32:33.460 --> 02:32:34.460]  Да.
[02:32:35.460 --> 02:32:36.460]  Понимаете, да?
[02:32:37.460 --> 02:32:39.460]  Ну, например, даже не обязательно ДФС запускайте и все.
[02:32:40.460 --> 02:32:41.460]  То есть как понять, кто я?
[02:32:41.460 --> 02:32:42.460]  Как понять, кто я?
[02:32:43.460 --> 02:32:45.460]  Так ходим по всем вершинам, возвращаем рекурсивные результаты.
[02:32:46.460 --> 02:32:47.460]  Если все выигрышные, значит я проиграл.
[02:32:48.460 --> 02:32:49.460]  Если хоть кто-то проигрышный, я выигрышный.
[02:32:50.460 --> 02:32:51.460]  Все.
[02:32:52.460 --> 02:32:53.460]  Все психологи.
[02:32:54.460 --> 02:32:55.460]  Дорогие курсы тысячи долларов.
[02:32:56.460 --> 02:32:57.460]  Ну, конечно, да.
[02:32:58.460 --> 02:33:00.460]  Пойти в детей, посмотреть на них, узнать результат.
[02:33:01.460 --> 02:33:02.460]  Все.
[02:33:03.460 --> 02:33:05.460]  Нет, самое смешное, что некоторые психологи ровно это и говорят.
[02:33:06.460 --> 02:33:07.460]  Знаете?
[02:33:07.460 --> 02:33:11.460]  Как-то знаете, потому что некоторые психологи или эзотерики, знаете, так и говорят.
[02:33:12.460 --> 02:33:15.460]  Как мне понять, какая у меня судьба?
[02:33:16.460 --> 02:33:18.460]  Как говорится, возьми своих близких, подставь перед собой.
[02:33:19.460 --> 02:33:20.460]  Все.
[02:33:21.460 --> 02:33:22.460]  Вот это она.
[02:33:23.460 --> 02:33:24.460]  Вот там.
[02:33:28.460 --> 02:33:33.460]  Нет, мы с вами занимаемся не эзотерикой, а программированием.
[02:33:33.460 --> 02:33:34.460]  Программированием, да.
[02:33:37.460 --> 02:33:38.460]  Гаданием по одной точке.
[02:33:39.460 --> 02:33:40.460]  Гаданием по одной точке?
[02:33:41.460 --> 02:33:42.460]  Этим даже статистика не занимается.
[02:33:45.460 --> 02:33:46.460]  О, господи.
[02:33:47.460 --> 02:33:48.460]  О, господи.
[02:33:49.460 --> 02:33:50.460]  Ближайших соседей.
[02:33:51.460 --> 02:33:52.460]  Ладно, идем дальше.
[02:33:54.460 --> 02:33:55.460]  Ну, давайте посмотрим.
[02:33:56.460 --> 02:33:57.460]  Хорошо.
[02:33:58.460 --> 02:34:00.460]  С этим графом, конечно, выяснилось проще.
[02:34:01.460 --> 02:34:02.460]  Давайте подумаем.
[02:34:03.460 --> 02:34:05.460]  Какие хотя бы нечейные игры?
[02:34:06.460 --> 02:34:07.460]  Какой цикл?
[02:34:08.460 --> 02:34:09.460]  Ну ладно.
[02:34:10.460 --> 02:34:11.460]  Ну ладно.
[02:34:12.460 --> 02:34:14.460]  На самом деле есть какая-то суперинтеллектуальная игра.
[02:34:15.460 --> 02:34:17.460]  Она называется луп.
[02:34:20.460 --> 02:34:21.460]  Вот.
[02:34:22.460 --> 02:34:24.460]  То есть это очень интеллект.
[02:34:25.460 --> 02:34:27.460]  Да, это суперинтеллектуальная игра.
[02:34:28.460 --> 02:34:31.460]  Нет, есть, конечно, более продвинутая игра.
[02:34:32.460 --> 02:34:33.460]  Смотрите.
[02:34:36.460 --> 02:34:38.460]  Вот подленькая такая игрушечка есть.
[02:34:42.460 --> 02:34:43.460]  Так, я прошу прощения.
[02:34:45.460 --> 02:34:47.460]  Значит, далее, далее, далее, далее.
[02:34:48.460 --> 02:34:50.460]  Итак, вот есть такая вот еще интеллектуальная игра.
[02:34:51.460 --> 02:34:52.460]  Она называется сейв.
[02:34:55.460 --> 02:34:56.460]  Да.
[02:34:57.460 --> 02:34:58.460]  У нее есть маленькая подлянка.
[02:34:59.460 --> 02:35:00.460]  Она выигрышная.
[02:35:02.460 --> 02:35:03.460]  Вот.
[02:35:04.460 --> 02:35:05.460]  Ну, скажем так.
[02:35:06.460 --> 02:35:08.460]  Ну, как бы, да, есть выигрышная стратегия.
[02:35:09.460 --> 02:35:10.460]  Ну, в общем-то, да.
[02:35:11.460 --> 02:35:12.460]  Ну, то есть это просто такие примеры.
[02:35:13.460 --> 02:35:16.460]  Это какие-то, по крайней мере, на текущем уровне развития это достаточно тупые примеры какие-то.
[02:35:17.460 --> 02:35:19.460]  Чемпионат мира, конечно, по этим играм не приведешь.
[02:35:22.460 --> 02:35:27.460]  А мы не разве уже доказали, что если мы не смогли таким образом жадно найти, в какое состояние мы бы решили, то она точно нечаянная?
[02:35:28.460 --> 02:35:29.460]  Пока еще не доказали.
[02:35:30.460 --> 02:35:31.460]  Пока еще не доказали.
[02:35:32.460 --> 02:35:33.460]  Ну, сейчас докажем.
[02:35:34.460 --> 02:35:35.460]  Вот действительно.
[02:35:36.460 --> 02:35:37.460]  А теперь давайте себе представим.
[02:35:38.460 --> 02:35:48.460]  А теперь давайте себе представим, что для какой-нибудь абстрактного графа мы действительно забабахали вот эту жадность, применяли принципы жадно-жадно-жадно-жадно.
[02:35:49.460 --> 02:35:55.460]  И вот выяснилось, что наступил момент, когда мы ни для какой вершины ни один из принципов применить не можем.
[02:35:56.460 --> 02:35:57.460]  А вершины-таки остались.
[02:36:00.460 --> 02:36:01.460]  Ну вот.
[02:36:02.460 --> 02:36:04.460]  Сейчас внимательно, потому что давайте смотреть, как доказывать.
[02:36:05.460 --> 02:36:08.460]  Потому что теперь мы сейчас просто конструктивно докажем, что...
[02:36:09.460 --> 02:36:11.460]  И так у нас получается есть какие-то выигрышные вершины.
[02:36:14.460 --> 02:36:16.460]  Там есть какие-то вершины проигрышные.
[02:36:20.460 --> 02:36:26.460]  И внезапно есть какие-то вершины, к которым принцип почему-то не применяется, несмотря на все наши усилия.
[02:36:27.460 --> 02:36:31.460]  Мы назовем их вершинами множества х.
[02:36:32.460 --> 02:36:33.460]  Пока.
[02:36:34.460 --> 02:36:36.460]  Теперь мистическая теория.
[02:36:37.460 --> 02:36:40.460]  Все эти вершины ничейные, ровно в этом конструктивном смысле.
[02:36:44.460 --> 02:36:46.460]  Вот теперь вопрос. Как же доказать, что игра ничейная?
[02:36:46.460 --> 02:36:47.460]  Игра ничейная.
[02:36:53.460 --> 02:36:54.460]  Заметим следующие.
[02:36:55.460 --> 02:36:56.460]  Заметим пару свойств.
[02:36:57.460 --> 02:36:59.460]  Заметим, что из х в проигрышные вершины ребер нет.
[02:37:00.460 --> 02:37:02.460]  А выигрышные могут и быть.
[02:37:03.460 --> 02:37:08.460]  Равно, как и ребра в другие вершины множества х, или даже в самого себя любимого.
[02:37:11.460 --> 02:37:12.460]  То есть вот какая-нибудь вот такая.
[02:37:12.460 --> 02:37:13.460]  Нет, такого не бывает.
[02:37:14.460 --> 02:37:16.460]  А вот такое вполне возможно. Бывает даже вот такое.
[02:37:18.460 --> 02:37:19.460]  Но важный момент.
[02:37:20.460 --> 02:37:25.460]  Так как мы к х принцип применить не можем, то верно-неожиданное свойство.
[02:37:26.460 --> 02:37:29.460]  То есть с каждой вершины можно сходить в вершину из х.
[02:37:31.460 --> 02:37:35.460]  Но потому что если все ребра вели выигрышные вершины, то это был бы принцип проигрышности.
[02:37:36.460 --> 02:37:41.460]  То есть как бы нет ни одного ребра в проигрышные вершины, и не все ребра ведут в выигрышные.
[02:37:42.460 --> 02:37:49.460]  Но давайте просто исходя из этого свойства выведем какие-нибудь стратегии.
[02:37:50.460 --> 02:37:51.460]  Вот например давайте докажем.
[02:37:52.460 --> 02:37:57.460]  Здесь оказывается удобно для второго игрока доказать, что здесь есть непроигрышная стратегия.
[02:37:58.460 --> 02:38:00.460]  Он точно не выиграет.
[02:38:01.460 --> 02:38:02.460]  Он точно не выиграет.
[02:38:03.460 --> 02:38:04.460]  Если он выиграл, значит у него есть путь в п.
[02:38:05.460 --> 02:38:06.460]  А путь в п?
[02:38:07.460 --> 02:38:08.460]  Нет, подожди, подожди, подожди.
[02:38:09.460 --> 02:38:10.460]  Нет, это неправда.
[02:38:10.460 --> 02:38:13.460]  Потому что у нас есть множество х, про которые мы ничего не знаем.
[02:38:25.460 --> 02:38:27.460]  Так вот, так, ребят, у вас какая-то психологическая ошибка.
[02:38:28.460 --> 02:38:33.460]  Вы по вашим формулям высказали, что вы доказываете, что игра проигрышная, исходя из того, что она проигрышная.
[02:38:38.460 --> 02:38:39.460]  Можно.
[02:38:41.460 --> 02:38:42.460]  Пусть второй.
[02:38:43.460 --> 02:38:44.460]  Да, и так вот.
[02:38:45.460 --> 02:38:46.460]  Пусть второго нет.
[02:38:47.460 --> 02:38:48.460]  Чего второго?
[02:38:51.460 --> 02:38:52.460]  Первый куда-то сходил.
[02:38:53.460 --> 02:38:54.460]  Он сходил в выигрыш, что ли?
[02:38:55.460 --> 02:38:56.460]  Второй игрок выиграл.
[02:38:57.460 --> 02:38:58.460]  Либо он сходил в х.
[02:38:59.460 --> 02:39:00.460]  И сам точно может сходить в х обратно.
[02:39:01.460 --> 02:39:02.460]  Победа.
[02:39:03.460 --> 02:39:04.460]  У нас есть непроигрышная стратегия.
[02:39:05.460 --> 02:39:06.460]  Но не совсем так.
[02:39:07.460 --> 02:39:14.460]  Ну потому что, смотрите, диспозиция такая, что пусть мы изначально стартуем с позиции х.
[02:39:15.460 --> 02:39:22.460]  Если первый игрок пошел в выигрышную позицию, то тогда все, мы просто не проигрываем, тупо побеждая.
[02:39:23.460 --> 02:39:27.460]  Если противник пошел в х, то выясняется, что у нас тоже есть ход в х.
[02:39:28.460 --> 02:39:29.460]  Что мы и делаем.
[02:39:30.460 --> 02:39:35.460]  То есть наша стратегия просто говорит, что если мы попали в разведанную выигрышную вершину, то мы разведанно выиграем.
[02:39:36.460 --> 02:39:39.460]  А если мы попали в х, то мы тупо ходим в х.
[02:39:42.460 --> 02:39:43.460]  Это стратегия непроигрышная.
[02:39:44.460 --> 02:39:45.460]  Почему?
[02:39:46.460 --> 02:39:51.460]  Потому что пока мы ходим по х, у нас всегда есть ход, мы не проигрываем.
[02:39:53.460 --> 02:39:58.460]  А если у первого игрока сдают нервы, он переводит нас в разведанную выигрышную вершину, то мы выигрываем.
[02:39:59.460 --> 02:40:00.460]  Все. Значит, ура.
[02:40:01.460 --> 02:40:02.460]  Второй игрок не проиграл.
[02:40:03.460 --> 02:40:06.460]  Остается только доказать, что первый игрок в х тоже не проигрывает.
[02:40:07.460 --> 02:40:08.460]  Да, но идея простая.
[02:40:08.460 --> 02:40:10.460]  Да, он делает ход в х и дальше не проигрывает как второй.
[02:40:11.460 --> 02:40:13.460]  Да, поэтому это кратчайший путь получается такой.
[02:40:14.460 --> 02:40:17.460]  Доказательство можно формулировать много, но кажется, вот это получилось самое короткое.
[02:40:21.460 --> 02:40:27.460]  Так что получается вывод, что все х на самом деле не чейны.
[02:40:28.460 --> 02:40:34.460]  И таким образом мы убеждаемся, что действительно никаких игр, кроме вот этих, вот на самом деле конструктивно нет.
[02:40:37.460 --> 02:40:39.460]  Поэтому на самом деле шахматы это не интересная игра.
[02:40:42.460 --> 02:40:45.460]  Потому что на самом деле мы сами доказали, что в шахматах есть оптимальная стратегия.
[02:40:46.460 --> 02:40:54.460]  Мы только теперь, начиная с этого момента, можем вообще вводить такое понятие, как играют оптимально.
[02:40:55.460 --> 02:40:58.460]  Потому что до этого момента, что такое оптимальная, это вообще непонятно.
[02:41:01.460 --> 02:41:02.460]  Чего?
[02:41:03.460 --> 02:41:08.460]  Ну оптимальная, ну говорить так, что если игра выигрышная, то мы как бы действуем согласно выигрышной стратегии.
[02:41:09.460 --> 02:41:11.460]  Ну а если не чейны, то согласно не чейны.
[02:41:12.460 --> 02:41:13.460]  Ну хотя бы как минимум.
[02:41:14.460 --> 02:41:15.460]  То есть как бы из выигрышной позиции мы ходим.
[02:41:16.460 --> 02:41:18.460]  Во-первых, только в проигрышную, но и этого недостаточно.
[02:41:19.460 --> 02:41:23.460]  Потому что мало кто знает, что если у вас стратегия просто из выигрышной позиции, из зеленой позиции ходить в кратчай.
[02:41:24.460 --> 02:41:25.460]  То вы можете не выиграть.
[02:41:27.460 --> 02:41:30.460]  Да, потому что есть такая интеллектуальная ситуация.
[02:41:31.460 --> 02:41:32.460]  Смотрите.
[02:41:36.460 --> 02:41:37.460]  Вот, смотрите.
[02:41:38.460 --> 02:41:40.460]  Вот, но если тут побегать по ретроанализу.
[02:41:41.460 --> 02:41:43.460]  Ладно, ретроанализ мы еще не знаем, сейчас узнаем.
[02:41:44.460 --> 02:41:48.460]  То, ну короче, если по применять принципы, то окажется выигрышность-проигрышность вот такая.
[02:41:48.460 --> 02:41:49.460]  То теперь подлянка.
[02:41:50.460 --> 02:41:54.460]  Если предположим, что у вас стратегия просто А, АБК, ходим в любую проигрышную вершину.
[02:41:55.460 --> 02:41:58.460]  Тогда окажется, что начинать с этой позиции можно тупо не выиграть.
[02:41:59.460 --> 02:42:07.460]  Потому что если вы ходите все время сюда, то значит потом через три хода возвращаетесь, ходите опять сюда и так вечно ходите по кругу.
[02:42:08.460 --> 02:42:09.460]  То есть есть подлянка.
[02:42:10.460 --> 02:42:13.460]  То есть на самом деле, чтобы выиграть, надо ходить не просто в проигрышные позиции.
[02:42:14.460 --> 02:42:15.460]  Вот.
[02:42:15.460 --> 02:42:16.460]  А мы уже все их разведали.
[02:42:16.460 --> 02:42:17.460]  Они все разведаны.
[02:42:19.460 --> 02:42:20.460]  Вот.
[02:42:20.460 --> 02:42:22.460]  А что такое предыдущий этап?
[02:42:24.460 --> 02:42:27.460]  Ну, несмотря на то, как мы брали АБК.
[02:42:28.460 --> 02:42:33.460]  Ну, хотя, да, если мы, конечно, для каждой вершины еще какой-нибудь таймстэнт повесим там типа.
[02:42:34.460 --> 02:42:37.460]  То есть в какой момент мы ее пометили, то, конечно, да, можно помещать.
[02:42:38.460 --> 02:42:39.460]  Можно помещать.
[02:42:39.460 --> 02:42:41.460]  Можно ходить в вершину с меньшим таймстепом.
[02:42:42.460 --> 02:42:44.460]  Правда тогда в эти какие-то вопросы, почему у проигрыша.
[02:42:45.460 --> 02:42:46.460]  Там.
[02:42:47.460 --> 02:42:54.460]  А, ну, да, тогда у проигрывающей будет уменьшать таймстеп вынуждено, потому что проигрышная такая появляется позже всех выигрышных, в которые мы можем пойти.
[02:42:55.460 --> 02:42:57.460]  Да, потому что можно, в принципе, так.
[02:42:58.460 --> 02:43:00.460]  Да, в принципе, да, уже на этом уровне действительно можно.
[02:43:01.460 --> 02:43:03.460]  Но просто это был момент, что есть аккуратность, потому что.
[02:43:03.460 --> 02:43:08.540]  Да, в принципе, уже на этом уровне действительно можно, но это был момент, что есть аккуратность,
[02:43:08.540 --> 02:43:13.860]  потому что, знаете, может кто-то из вас сталкивался с такой игрой, знаете, потому что обычно это
[02:43:13.860 --> 02:43:19.580]  тесто связано вот с чем еще. Обычно для каждой выигрышной проигрышной игры еще хочется вычислить,
[02:43:19.580 --> 02:43:25.860]  а сколько ходов она будет длиться. Ну в каком смысле? Тут длиться она может быть сколько угодно,
[02:43:25.860 --> 02:43:31.940]  потому что вот тут первый игрок может затягивать, оттягивать удовольствие сколько он хочет. Но
[02:43:31.940 --> 02:43:38.020]  классическая ситуация говорит так, что обычно выигрывающий игрок хочет выиграть как можно быстрее,
[02:43:38.020 --> 02:43:46.900]  а проигрывающий наоборот хочет оттянуть неизбежное. Вот, хочется тогда вычислить сколько будем играть.
[02:43:46.900 --> 02:43:55.120]  Но тогда оказывается, что, смотрите, давайте посмотрим, как эти принципы после тогда в
[02:43:55.120 --> 02:44:04.000]  этом случае применяются. Сейчас мы будем применять просто более аккуратно, хотя делать мы по большому счету
[02:44:04.000 --> 02:44:08.720]  будем такое. Мы будем говорить так, что, наверное, сначала мы принцип выигрышности применить не можем
[02:44:08.720 --> 02:44:14.040]  в принципе, потому что у нас нет ни одной проигрышной вершины, правда? Поэтому у нас такая тупая идея.
[02:44:14.040 --> 02:44:18.280]  Давайте, если у нас получилось применить какой-то принцип, мы будем его применять, применять,
[02:44:18.280 --> 02:44:26.120]  применять до тех пор, пока можем. Ну такая типичная диспозиция. Если что-то получается,
[02:44:26.120 --> 02:44:31.360]  давайте просто выжимать, это просто так тупо и делать. Вот тупо, тупо так и делаем. Вот когда
[02:44:31.360 --> 02:44:37.880]  перестанет работать, тогда начнем репучисать. Вот будем применять принцип проигрышности.
[02:44:37.880 --> 02:44:50.200]  Вот и что получится. Возьмем просто фактически все стоки. Назовем это множество P0. Почему P0?
[02:44:50.200 --> 02:44:57.480]  Потому что старту из этих вершин и краб будет длиться ноль ходов. Логично, да? Логично, да.
[02:44:57.480 --> 02:45:05.960]  Значит, P0. Далее. Хорошо. Принцип проигрышности применить больше нельзя. Теперь давайте применять
[02:45:05.960 --> 02:45:16.640]  принцип выигрышности. И у нас появляются свежеразведанные выигрышные вершины. Что мы
[02:45:16.640 --> 02:45:21.200]  про них знаем? Про каждую из них мы знаем, что из них есть хотя бы одно ребро вот в этот вот слой
[02:45:21.200 --> 02:45:27.600]  P0. И могут быть еще какие-то ребра. Могут быть между собой ребра, могут быть там ребра куда-нибудь
[02:45:27.600 --> 02:45:39.120]  назад, ну и так далее. Но эти вершины мы назовем V1. Почему мы их назовем V1? Потому что опсимальные
[02:45:39.120 --> 02:45:43.280]  говни будут длиться ровно один ход. То есть первый год может выиграть прямо за один ход.
[02:45:43.280 --> 02:45:52.880]  Хорошо. Применяли принцип выигрышности, да применялись. Применяем принцип проигрышности.
[02:45:52.880 --> 02:45:57.480]  Действительно оказалось, что появились новые проигрышные вершины. Что это за новые проигрышные
[02:45:57.480 --> 02:46:08.280]  вершины? Это такие вершины, из которых ребра торчат, хотя бы одно из каждой вершины торчит,
[02:46:08.280 --> 02:46:16.000]  но все они ведут выигрышные вершины. То есть заметим, что здесь все жестко. В том плане,
[02:46:16.080 --> 02:46:27.480]  что ребер между собой нет, ребер куда-то в аут нет, ребер в P0 нету. Вот как-то так. Это называется P2.
[02:46:27.480 --> 02:46:38.440]  Так, да применялись. Теперь появляется неожиданно V3. То есть новые выигрышные вершины,
[02:46:38.440 --> 02:46:57.600]  у которых нет ребер в P0, но есть в P2. Вот видите. Давайте я придумал еще. Давайте я зеленым красным
[02:46:57.600 --> 02:47:02.160]  буду рисовать основные ребра, а коричневыми я буду рисовать те, которые еще теоретически могут
[02:47:02.160 --> 02:47:07.920]  быть. То есть тут вот, например, в P1 могут быть ребра между собой, могут быть куда-то назад,
[02:47:07.920 --> 02:47:14.360]  вот сюда могут быть, там куда-нибудь вот сюда могут быть или куда-нибудь совсем далеко. Значит,
[02:47:14.360 --> 02:47:20.560]  из этих обязательно есть такие ребра, но значит есть еще ребра. Вот в V1 ребра вполне могут быть,
[02:47:20.560 --> 02:47:27.880]  равно как и куда-нибудь назад и между собой, конечно, сколько угодно. Вот. Этот слой мы называем V3.
[02:47:27.880 --> 02:47:41.000]  Это называется V3. Что дальше? Ну дальше опять проигрыш и дальше получается P4. Почему именно
[02:47:41.000 --> 02:47:45.360]  4? Да, вот из этих решений я забыл сказать, мы гарантируем, что можно выиграть за 3 хода,
[02:47:45.360 --> 02:47:51.880]  потому что он будет просто как бы нельзя проиграть потом за 0 ходов, но зато можно
[02:47:51.960 --> 02:47:59.720]  проиграть за 2, видно, да? То есть ну там по индукции по сути получается. Вот. Дальше у нас
[02:47:59.720 --> 02:48:07.520]  получается слой P4, который говорит так, что у нас все ребра ведут куда-то в V1 и V3, но хотя бы,
[02:48:07.520 --> 02:48:17.960]  но при этом хотя бы одно ребро в V3 обязательно есть. Вот как-то так. Вот. Вот. То есть могут быть,
[02:48:17.960 --> 02:48:28.680]  ну вот. То есть могут быть, конечно, вот такие вот ребра. Нет, таких не бывает. Нет. Вот. Так. Вот
[02:48:28.680 --> 02:48:36.680]  такие бывают. Вот. Ну, в общем-то и так далее. Смотрите. То есть таких слоев можно таких
[02:48:36.680 --> 02:48:47.080]  несколько построить. Слоем строим, строим. И бабах! У нас что-то исчезло. Что у нас исчезло?
[02:48:47.080 --> 02:48:52.160]  Ну, то есть выяснилось, что принцип в какой-то момент закончился. Ну, тогда это означает,
[02:48:52.160 --> 02:48:57.160]  что у нас тут осталось множество х, которое, как мы уже выяснили, является нечейными вершинами.
[02:48:57.160 --> 02:49:05.400]  В принципе, заметим, что как уже легко теперь по индукции доказать, что тогда номер слоя указывает,
[02:49:05.400 --> 02:49:14.760]  сколько и сколько времени будет длиться оптимальная игра, правда? Вот. Так что вот такая красота.
[02:49:14.760 --> 02:49:24.640]  Вот. Но эта же идея дает нам возможность реализовать это еще и за более быструю симптомику.
[02:49:24.640 --> 02:49:38.920]  За какую? Ну, получается, за В плюс Е. А кто, кстати, знает, каким образом это делать за В плюс Е? Нет,
[02:49:38.920 --> 02:49:44.920]  поднимите руки, кто знает. Я понимаю, что кто-то существует. Так, повыше руки, а то как-то да.
[02:49:44.920 --> 02:49:54.920]  Ну, вот. Ну, значит, смотрите. Хорошо. Так. Ну, вот. Да, давайте вспоминать. То есть, на самом деле,
[02:49:54.920 --> 02:50:00.840]  идея такая. То есть, идея такая практически БФСТ. Базируется она на том, на следующем,
[02:50:00.840 --> 02:50:04.920]  что мы будем все вершины, про которые мы только что узнали, что они выигрышные и проигрышные,
[02:50:04.920 --> 02:50:12.480]  закидывать в очередь. А потом каждую вершину мы будем доставать из очереди и обрабатывать. Что
[02:50:12.480 --> 02:50:16.280]  значит обрабатывать? Ну, говорим, вот если мы достали из очереди, ну, сначала мы начнем с того,
[02:50:16.280 --> 02:50:23.160]  что запихнем в очередь все стоки, объявив их проигрышными вершинами. А дальше, когда мы
[02:50:23.160 --> 02:50:29.480]  достаём проигрышную вершину, мы просто перебираем все ребра, внимание, ведущие в неё, то есть все
[02:50:29.480 --> 02:50:41.360]  входящие ребра. Ну, да, все входящие ребра, короче. Вот. И, соответственно, все вершины,
[02:50:41.360 --> 02:50:45.200]  которые там есть, помечаем, что они выигрышные, если они еще не добавлены, в очередь добавляем.
[02:50:45.200 --> 02:50:53.920]  Логично, да? Здесь все просто. Но если мы достали из очереди, тогда заметим, что когда мы так
[02:50:53.920 --> 02:51:01.360]  обработаем слой П0, у нас в очереди останется ровно В1, правда? Но теперь фишка. Когда мы
[02:51:01.360 --> 02:51:07.000]  обрабатывать, достаем выигрышную вершину, мы тоже перебираем все входящие ребра, но мы их
[02:51:07.000 --> 02:51:13.480]  мысленно удаляем. Ну, в знак того, что если это ребро есть, то по нему все равно игрок ходить
[02:51:13.480 --> 02:51:20.480]  не будет, потому что он проигрывать не хочет. Ну, то есть и по этому ребро плохое. Но если при этом
[02:51:20.480 --> 02:51:27.400]  мы удалили, то есть просто честно, то есть прибираемся по вершине, удаляем ребро. Если выяснилось,
[02:51:27.400 --> 02:51:33.040]  что мы у вершины удалили только что последнее ребро, то есть больше у нее ребра нет, значит мы
[02:51:33.040 --> 02:51:40.120]  ее объявляем проигрышной и такжественно добавляем в очередь. То есть обратите внимание, какая-то
[02:51:40.120 --> 02:51:44.760]  вершина из В4 может быть уже наполовину ограблена, потому что, исследуя вот эту вершину,
[02:51:44.760 --> 02:51:50.360]  мы убили вот это ребро, но это еще не убили, поэтому она еще непонятна. Может вообще так,
[02:51:50.360 --> 02:51:56.120]  случится, что мы прежде чем вершину объявить выигрышной, у нее пару ребров убьем. Вот как раз вот в этой
[02:51:56.120 --> 02:52:04.000]  вот ситуации, если скажем вот такое ребро есть, а такое вполне может быть. Вот, так что получается,
[02:52:04.000 --> 02:52:09.720]  что если мы просто умеем за вот единицы удалять ребра, ну и перебирать входящие, то в общем-то
[02:52:09.720 --> 02:52:18.760]  мы легко это завэплески реализуем, правда. Но правда, да, остается только заметить, что как удалять?
[02:52:18.760 --> 02:52:28.520]  Да, хотя по большому счету, на самом деле, можно не удалять, а можно просто помещать,
[02:52:28.520 --> 02:52:33.000]  сколько у нас плохих ребер из-за вершины токсид. И как только это количество совпало,
[02:52:33.000 --> 02:52:40.440]  в принципе с количеством ребер из-за вершины, значит все, мы ее объявляем проигрышной. То есть
[02:52:40.440 --> 02:52:44.480]  поэтому не нужно писать этих ваших там каких-то там двусвязанных списков, там каких-то там
[02:52:44.480 --> 02:52:49.440]  связывать ребра друг с другом, не, никому это не надо. То есть получается достаточно простая
[02:52:49.440 --> 02:52:54.200]  модификация БФСа. Да, ну извините, конечно, мы пока еще так и не знаем, что такое БФС,
[02:52:54.200 --> 02:53:05.480]  хотя, да, хотя знаете, нет, тут просто как сказать, просто нет, ну как сказать, ладно,
[02:53:05.480 --> 02:53:10.280]  на БФС, как бы я, на самом деле, просто отдельная песня, но я просто сейчас что-то уже, видимо,
[02:53:10.280 --> 02:53:14.080]  в этом семестре не хочу рассказывать, потому что я, честно говоря, в следующий раз вместе с
[02:53:14.080 --> 02:53:18.600]  добиванием теории игр, хотя, честно скажу, там самое интересное только там, самое интересное
[02:53:18.600 --> 02:53:24.560]  только впереди будет на самом деле, по теории игр, но потому что это, ну как сказать, у нас,
[02:53:24.560 --> 02:53:28.880]  мы будем сами решать три задачи. Уровень Easy, уровень Medium, уровень Hard, уровень Easy только что
[02:53:28.880 --> 02:53:35.480]  решили. Дан один граф, миллион вершин, два миллиона ребер, мы его решили. Да, заодно и выяснив,
[02:53:35.480 --> 02:53:39.040]  что шахма-то неинтересная игра, потому что на самом деле у какого-то игрока есть тупо стратегия,
[02:53:39.040 --> 02:53:49.200]  или у обоих игроков есть нечейная. Да-да-да-да-да-да. Ну, то есть так, мы показали следующее,
[02:53:49.200 --> 02:53:53.280]  что любая игра подобного вида, она как бы разрешима в принципе, если у нас есть бесконечная
[02:53:53.280 --> 02:54:03.200]  числа ресурсов. Ну вот, от количества позиций, ну да, ну да, даже нет. Другой вопрос, что в шахма-то
[02:54:03.200 --> 02:54:08.320]  количество позиций очень большое, поэтому, к сожалению, там перебрать их не удалось. Хотя,
[02:54:08.320 --> 02:54:12.120]  конечно, Каспаров предсказывает, то есть Каспаров это называется судный день шахмат,
[02:54:12.120 --> 02:54:19.760]  что наступит время, когда шахматы просто будут решены. Вот, то есть это конечно да, а то сейчас
[02:54:19.760 --> 02:54:24.280]  по этой игре есть профессиональные люди, которые только этим занимаются и этим на всю жизнь себе
[02:54:24.280 --> 02:54:30.080]  зарабатывают. В общем, даже речь идет не только о тренерах, а в первую очередь о том, то топ-10,
[02:54:30.080 --> 02:54:35.840]  топ-20 игроках, собственно, которых там все смотрят и, собственно, да, это собственно очень
[02:54:35.840 --> 02:54:41.320]  успешные богатые люди. Но там, правда, отрижается, начинается достаточно быстро наступает момент,
[02:54:41.320 --> 02:54:47.160]  когда там все, мягко говоря, не так хорошо. Но, с другой стороны, там люди с рейтингом 2600 продолжают
[02:54:47.160 --> 02:54:57.440]  колесить по миру, участвовать в турнирах, правда, при этом. Вот, нанесу. Да, вот, но суть другом. Да,
[02:54:57.440 --> 02:55:02.880]  хочется, но бывает позиций слишком много, хочется как-то это анализировать. Но есть, конечно, такое
[02:55:02.880 --> 02:55:10.240]  понятие, как сумма игр. Что такое сумма игр? Это когда у вас есть одновременно два графа в каждом по фишке
[02:55:10.240 --> 02:55:15.360]  и на каждом ходу вы выбираете, где двигать фишку и двигаете. Проигрывает тот, кто не может сделать
[02:55:15.360 --> 02:55:26.600]  ход нигде. Вот, как бы, уровень medium это научиться складывать две ациклические игры. Но у нас будет
[02:55:26.600 --> 02:55:35.680]  еще уровень hard. Научиться складывать циклические игры. Вот. Так что, соответственно, и это все,
[02:55:35.680 --> 02:55:40.640]  видимо, нас ждет, ну, видимо, по предварительной договоренности в субботу. Так, ну, я надеюсь,
[02:55:40.640 --> 02:55:48.920]  камеру там никто не свистит. Я надеюсь. Вот. Ну или, в случае чего, придется пользоваться лекциями
[02:55:48.920 --> 02:55:54.480]  предыдущих поколений, да. Вот. Так что вот, значит, это мы сделаем. Ну и, соответственно, там еще останется
[02:55:54.480 --> 02:55:59.560]  только еще добить. Я думаю, видимо, надо будет просто ДП по профилю обсудить еще в конце. Ну,
[02:55:59.560 --> 02:56:03.240]  скажи так, потому что вещь такая. То есть, как бы, ДП там по профилю, по изломному профилю не все
[02:56:03.240 --> 02:56:14.480]  знают, поэтому, как бы. Ну, уже, видимо, нет. Не, ну, скажи так, можно и таки на это? Ну, скажи так,
[02:56:14.480 --> 02:56:19.160]  право, это не очень интересно уже. Скажи так, ладно, если у вас тут тот по тот или у ЦСО, оказывается,
[02:56:19.160 --> 02:56:32.040]  вы уже решать умеете. 100 тысяч чего? Ну, ну, там нет, но это хотя бы что-то новое для вас. Ну,
[02:56:32.040 --> 02:56:36.600]  если вы, может, вы в локешах, конечно, уже там все бы там все сплэли, там бы деревья со сплетами
[02:56:36.600 --> 02:57:00.040]  мержами написали, я не знаю. Ну, да. Как говорится, да, да, да. Как говорится, да, и в результате у
[02:57:00.040 --> 02:57:08.560]  групп нашлось пересечение тех, кто сдал хеш таблицу. Так что вот, ладно, ну, вот это будет,
[02:57:08.560 --> 02:57:12.320]  но я не знаю, честно, я сейчас в сумму как-то начинать сейчас не хочется, чтобы была связанность,
[02:57:12.320 --> 02:57:16.280]  поэтому на сегодня все. Да, все, на сегодня все. Всем спасибо.
