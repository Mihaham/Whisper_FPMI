[00:00.000 --> 00:11.000]  Так, ну что ж, что же у нас сегодня будет?
[00:11.000 --> 00:19.000]  Так, ну, как вы говорите, с точки зрения глобального движения на стрончках мы сегодня попробуем снова перейти на новый уровень.
[00:19.000 --> 00:24.000]  Прошлый раз мы перейшли на уровень, когда мы не только по сроку ищем в одном тексте.
[00:24.000 --> 00:28.000]  Сегодня мы попытаемся перейти на уровень, когда мы еще делаем это еще и в онлайне.
[00:28.000 --> 00:34.000]  А не сразу, там, полная маршрутка цивилизовательного действия.
[00:34.000 --> 00:40.000]  Но этим мы займемся, видимо, после перерыва.
[00:40.000 --> 00:51.000]  До перерыва мы попробуем немножко подготовиться и изучить такую чуть более простую структуру данных, но которая имеет, собственно, в основе своей примерно свежей интеллекты.
[00:51.000 --> 00:59.000]  Но для этого нам придется поговорить о таком интересном подвиде строк, как палиндромы.
[00:59.000 --> 01:09.000]  Но для этого давайте введем, давайте так скажем, то, во-первых, надо для строки S ввести понятие S-развернутое.
[01:09.000 --> 01:19.000]  Что такое S-развернутое? Ну, действительно, если S у нас это, допустим, там, S от одного до N, то S-развернутое это, что это такое?
[01:19.000 --> 01:29.000]  Ну, соответственно, Sn, Sn-1, там, и так далее, S-1. Ну, в общем-то, думаю, достаточно понятно. Логично, да?
[01:29.000 --> 01:38.000]  Пока логично. Вот. Ну и, конечно, действительно, будем говорить, что S-полиндром.
[01:38.000 --> 01:52.000]  Если строка равна развернутой части. Вот. Ну, думаю, знакомая. Знакомая, определить.
[01:52.000 --> 02:02.000]  Вот. Итак, развеяно, вот, разминочная задача. Да, совсем пока разминочная. Значит, такая.
[02:02.000 --> 02:14.000]  Значит, дана, соответственно, строка S. Ну, там, в один индексация и в новый индексация абсолютно неважно.
[02:14.000 --> 02:26.000]  Хочется, значит, изобрести какую-то структуру данных, которая по L и N будет возвращать.
[02:26.000 --> 02:44.000]  Является ли полиндромом, собственно, под строка L, P? Да или нет?
[02:44.000 --> 02:57.000]  Вот. Хочется, чтоб такое изобрести. Как же это? Ну, да, да, да. Но, кстати, не совсем.
[02:57.000 --> 03:07.000]  Кстати, редкий случай, когда хэши на самом деле вам тут дадут не самые оптимальные решения.
[03:07.000 --> 03:16.000]  А, хух, хотя эти да. Да, да, да, да. Хотя, да, насчитали для спротивов, насчитали для обратных и возрадовались, да.
[03:16.000 --> 03:23.000]  Что делать, если мы не верим в хэши? Как это часто бывает?
[03:23.000 --> 03:35.000]  Ну, во-первых, так. Тут, как всегда, есть два вопроса. Сколько мы времени будем делать предподсчет и за сколько мы будем делать потом ответы на запрос.
[03:35.000 --> 03:40.000]  Вообще, хотелось бы иметь ответы на запросе, естественно, за вот единицы.
[03:40.000 --> 03:49.000]  Каким образом можно было бы это сделать? Ну, можно было бы, например, для каждой ноты. То есть можно было заметить следующее.
[03:49.000 --> 03:55.000]  То есть самый тупой предподсчет – это за N куб. Почему за N куб?
[03:55.000 --> 04:03.000]  Да просто потому, что давайте переберем все подстроки и тупо для каждой из них честно за линию проверим, не дает ли спрока полиндромов, да или нет.
[04:03.000 --> 04:09.000]  Отлично. Ну, вот этот вопрос. Можно ли этот куб как-то оптимизировать?
[04:13.000 --> 04:18.000]  Ну, вот. Ну, на самом деле, да.
[04:18.000 --> 04:26.000]  Ну, здесь действительно можно, на самом деле, если уж хотите, для квадратов подстрок что-то посчитать, можно это сделать за квадрат каким образом?
[04:26.000 --> 04:40.000]  Ну, потому что, да, можно заметить, что уж если мы тут делаем под строку LR и проверяем, является ли она полиндромом, то можно заметить, что она является полиндромом тогда и только тогда, когда у нее l-й символ равен r тому и подстрока с l плюс 1 до r плюс 1 является полиндромом.
[04:40.000 --> 04:46.000]  Да, можно так мыслить с техник динамического программирования и получить предподсчет за all of N квадрат.
[04:47.000 --> 04:51.000]  Вот. То есть будем идти так вот с концов.
[04:51.000 --> 04:57.000]  Ну, на самом деле, если посмотреть на задачу с другой стороны, то можно сделать еще чуть-чуть лучше.
[04:57.000 --> 05:05.000]  А именно, то есть сделать так, чтобы, то есть у нас проблема пока что есть, у нас не только N квадрат работает, но еще и по памяти оно будет работать.
[05:05.000 --> 05:11.000]  А на самом деле можно сделать так, чтобы по памяти оно работало залито.
[05:11.000 --> 05:19.000]  Каким опытом? Заметим, что вот рассмотрим под строку LR. У этого полиндрома есть так называемый центр.
[05:19.000 --> 05:30.000]  Что я называю центром? Ну, и здесь, конечно, зависит. Если этот полиндром, допустим, там, четный и длинный, то центром я называю вот эту позицию между двумя строчками, между двумя символами.
[05:30.000 --> 05:39.000]  А если полиндром у нас не четный и длинный, а подсада, то центром тогда мы вот этот символ и назовем.
[05:39.000 --> 05:41.000]  Вот.
[05:43.000 --> 05:51.000]  Так вот, заметим, что сколько у нас всего центров полиндрома вообще есть, не просто строки S.
[05:56.000 --> 06:05.000]  2N-1. Совершенно верно, да, 2N-1. N, значит, в самих символах N-1, позиция между соседними символами, да, безусловно.
[06:06.000 --> 06:17.000]  И теперь идея возникает такая. А давайте для каждого центра вступуем и насчитаем самый большой полиндром, у которого центр в этом месте.
[06:17.000 --> 06:26.000]  Ведь действительно заметим, что если там вот какие-то символы на одинаковом расстоянии от центра не совпали, то тогда и это под строка N-1 полиндром, и более длинные тоже.
[06:26.000 --> 06:41.000]  Поэтому возникает такая идея, что можно просто для каждого центра, соответственно, насчитать максимальный, так сказать, развав крыла, то есть насколько далеко можно разойти, чтобы это еще осталось полиндромом.
[06:41.000 --> 06:45.000]  То есть это в ту полю насчитывается все еще за квадрат, но уже так.
[06:45.000 --> 06:53.000]  Значит, давайте теперь я попробую сейчас формально это написать. Ну как попробую, тут, в общем, да, не сильно сложно.
[06:53.000 --> 07:01.000]  Потому что мы будем называть эти, будет у нас такая, давайте фиолетовый пакет.
[07:01.000 --> 07:18.000]  Значит, понятие PAL, значит, будет у нас такое PALOBD, значит, от угновода S мы введем такое понятие, где PALOBD и T будет равно.
[07:18.000 --> 07:23.000]  Эх, недолго придержались, но ладно.
[07:23.000 --> 07:38.000]  Это максимальное такое A, что, ну, допустим, S I-L и плюс A полиндром.
[07:38.000 --> 07:47.000]  Ну, я здесь не прописан, но, думаю, вы понимаете, что здесь имеется в виду, что это по строка, естественно, существует.
[07:47.000 --> 07:52.000]  Ну, как на алтебре, да, то есть, там, когда делите на X, значит, подозревается, что X реально 0.
[07:52.000 --> 08:10.000]  Ну вот, это, соответственно, почему я пишу от, потому что не четная полиндрома.
[08:10.000 --> 08:16.000]  Давайте писать четную полиндру.
[08:16.000 --> 08:25.000]  Да, PAL EVEN, это массив уже на единичку, видишь.
[08:25.000 --> 08:33.000]  И где PAL EVEN под И будет уже равен, ну, тоже абсолютно тому же самому.
[08:33.000 --> 08:49.000]  А вот пока под строку я напишу чуть-чуть другую, а вот пока я тут дописываю, капу.
[08:49.000 --> 09:06.000]  Ну, например, как-нибудь там I-L плюс 1 и справа I plus L.
[09:06.000 --> 09:14.000]  Ну, заметим, что И у нас как бы вот от этой границы сейчас чуть слева. Ну, видите, почему, потому что у нас как бы один индекс.
[09:14.000 --> 09:19.000]  Ну, значит, именно с L плюс 1 и I плюс L.
[09:19.000 --> 09:27.000]  Так вот, значит, чем приятны массивы PAL EVEN, тем, что если мы их откуда-то с небес по факсу нам пришлю, то, как бы, проверять,
[09:27.000 --> 09:33.000]  про под строку, является ли она полиндромом, мы теперь сможем залу от единицы, просто залезая в один из этих массивов.
[09:33.000 --> 09:40.000]  Не очень сложно. Вот. И по памяти то вот. Ну, правда, за сколько его насчитывать?
[09:41.000 --> 09:48.000]  Да, насчитывать его можно за квадрат, можно насчитывать hash-ами и bin поиском. Будет N log N.
[09:48.000 --> 09:54.000]  Ну, а сегодня мы изучим, начнем с того, что изучим алгоритм, как их насчитывать за единицу.
[09:54.000 --> 10:00.000]  Это как раз и будет называться алгоритм Монакия.
[10:00.000 --> 10:09.000]  Вот. Алгоритм Монакия.
[10:09.000 --> 10:15.000]  Значит, этот алгоритм мы будем обсуждать для массива PAL ON.
[10:15.000 --> 10:20.000]  То есть, мы будем искать, ограничимся тем, что будем искать массив PAL ON.
[10:20.000 --> 10:25.000]  По двум причинам. Потому что массив PAL EVEN, во-первых, можно искать абсолютно тем же самым способом,
[10:25.000 --> 10:28.000]  только даже с мирус единички подшаманить.
[10:28.000 --> 10:36.000]  А во-вторых, на самом деле, в общем-то, можно, если вам не сильно страшна лишняя память там дополнительная,
[10:36.000 --> 10:48.000]  то на самом деле любую строчку S, какую-нибудь вот ABBA, ее можно легко превратить в строчку вот такого вот красивого вида.
[10:48.000 --> 11:07.000]  Вот. То есть, заметим, что если вы в ней насчитаете PAL ON, то, в общем-то, и PAL ON, и PAL EVEN для этой строки вы после этого выковырите легко.
[11:07.000 --> 11:16.000]  То есть, заметим, да, что вот эти диетик теперь обозначают вот эту позицию между двумя символами.
[11:16.000 --> 11:21.000]  Очень удобно. Поэтому получается, что все, что нам нужно, это найти массив PAL ON.
[11:21.000 --> 11:27.000]  Научимся делать его. Дальше это все. Решение существует, поэтому при пожаре можно будет спать дальше.
[11:27.000 --> 11:29.000]  Вот. Как всегда.
[11:31.000 --> 11:35.000]  Соответственно. Итак. Как же мы это будем делать?
[11:35.000 --> 11:42.000]  Ну, алгоритм, оказывается, тоже неожиданно простым. Если вы хорошо понимаете, как искать Z-функцию.
[11:43.000 --> 11:47.000]  Ну, то есть, действительно, идея такая. Вот жила была наша строчка.
[11:49.000 --> 11:55.000]  И вот, допустим, мы до какого-то момента дошли и все PAL OD посчитали.
[11:57.000 --> 11:59.000]  Что нас теперь интересует?
[11:59.000 --> 12:08.000]  Значит, мы будем не просто насчитывать PAL OD, а будем хранить такие LR, которые равны...
[12:09.000 --> 12:11.000]  Ну, я как картежик пишу.
[12:11.000 --> 12:20.000]  Значит, j минус PAL OD от j, j плюс PAL OD от j.
[12:22.000 --> 12:28.000]  То есть, j меньше, соответственно, i. И, соответственно, при этом j плюс PAL OD от j.
[12:28.000 --> 12:34.000]  Вот это вот, то есть, R должно быть максимально возможным.
[12:35.000 --> 12:43.000]  Ну, если я насчитаю, если я тут по всем j там что-то уже вычислил, то, наверное, насчитывать такое LR насчитать несложно.
[12:45.000 --> 12:49.000]  Значит, как же теперь насчитать PAL OD от i?
[12:50.000 --> 12:57.000]  Ну, идея очень простая. Если оказалось, что R меньше i, то насчитываем PAL OD в тупую.
[13:05.000 --> 13:07.000]  Просто вот, ну, совсем в тупую.
[13:11.000 --> 13:14.000]  Что делать, если R больше либо равно?
[13:15.000 --> 13:18.000]  Ну, давайте тогда на этот полиндробчик посмотрим.
[13:18.000 --> 13:21.000]  Вот, выглядит он примерно вот таким вот образом.
[13:34.000 --> 13:38.000]  Смотрите, раз это полиндром, то, оказывается, интересный факт.
[13:41.000 --> 13:43.000]  Еще красивая макия, наверное, в чем-то.
[13:58.000 --> 14:00.000]  И, оказывается, следующие. Смотрите.
[14:01.000 --> 14:08.000]  Вот мы, если бы в тупую насчитывали для этого символа, соответственно, полиндробность, то что бы мы делали?
[14:10.000 --> 14:15.000]  То есть, мы бы так честно проверяли, равен ли этот символ этому, этот этому, этот этому, этот этому и так далее, да?
[14:17.000 --> 14:22.000]  Некоторое время мы бы не выходили за пределы вот этой вот подстроки.
[14:25.000 --> 14:27.000]  Может, в ней внутри бы ее истаны.
[14:28.000 --> 14:30.000]  Ну, теперь заметим следующее.
[14:31.000 --> 14:41.000]  Дело в том, что так как вот эта строка у нас вся полиндром, то тогда, оказывается, что вот эта строка, на самом деле, в некотором смысле уже рассматривалась.
[14:42.000 --> 14:48.000]  Ведь дело в том, что если мы рассмотрим симметричную позицию, вот, и относительно жи.
[14:50.000 --> 14:54.000]  Вот, симметричную. Что это будет за позиция, кстати, как ее вычислить?
[14:58.000 --> 15:00.000]  Два и минусы жи, что такое?
[15:02.000 --> 15:03.000]  Да, два жи и минусы.
[15:04.000 --> 15:07.000]  Наоборот. Ну, и, жи, минус, в скобках и минусы.
[15:08.000 --> 15:09.000]  Ну, это сложно рассчитывать, да.
[15:10.000 --> 15:12.000]  Ну, тут по-разному. Можно еще мыслить так.
[15:13.000 --> 15:16.000]  Надо найти такую точку, что бы среднее арифметическое было жи.
[15:17.000 --> 15:21.000]  То есть, пишем минусы, что бы они убились, и пишем два жи, что бы поделить на два было жи.
[15:22.000 --> 15:23.000]  Можно еще так мыслить.
[15:23.000 --> 15:24.000]  Вот.
[15:25.000 --> 15:27.000]  Так вот. Теперь замечаем следующее.
[15:28.000 --> 15:31.000]  Если мы рассмотрим вот эту вот строчку, вот такую вот, ребята, строчку,
[15:32.000 --> 15:37.000]  то заметим, что эта строчка равна вот этой.
[15:42.000 --> 15:43.000]  Да.
[15:44.000 --> 15:45.000]  Какое слово я забыл?
[15:46.000 --> 15:47.000]  Ну, до конца...
[15:50.000 --> 15:51.000]  Развивание. Развивание, конечно.
[15:52.000 --> 15:53.000]  Да. То есть, эта строчка...
[15:54.000 --> 15:57.000]  То есть, эта строчка равна вот этой строчке развернутой.
[15:58.000 --> 16:03.000]  Но с точки зрения, с точки зрения полимдромности нам, в общем-то, это не важно.
[16:04.000 --> 16:11.000]  То есть, тем не менее, то есть, на самом деле, если окажется, допустим, что вот мы тут шли-шли-шли, тут х и у,
[16:12.000 --> 16:15.000]  то есть, здесь тогда тоже мы будем идти-идти-идти, тут будет х, а тут будет у.
[16:18.000 --> 16:19.000]  То есть, ну вот.
[16:20.000 --> 16:21.000]  Отсюда мы делаем вывод.
[16:22.000 --> 16:34.000]  Что, если оказалось, что пол от д от ж строго меньше длины вот этой строки, r минус i, соответственно,
[16:35.000 --> 16:40.000]  то тогда отсюда, только не пол от ж, конечно, а пол от 2 ж минус i,
[16:40.000 --> 16:51.000]  то тогда мы получаем, что пол от д от i равно, соответственно, пол от д от, собственно, 2 ж минус i.
[16:52.000 --> 16:55.000]  То есть, просто так и ранее вся эта функция. За 1 пишем и не паримся.
[17:00.000 --> 17:05.000]  Но по аналогичной причине, если этот пол от доказался больше либо равен r минус i,
[17:06.000 --> 17:08.000]  то есть, тут вот крылышки даже вот дальше летят.
[17:11.000 --> 17:17.000]  То тогда мы можем гарантировать, что здесь эти крылышки уж как минимум досюда дают.
[17:18.000 --> 17:21.000]  Дальше мы ничего гарантировать не можем, потому что, например, этот символ вообще ничего не знает.
[17:22.000 --> 17:25.000]  Обратите внимание, то есть, там непонятно там.
[17:26.000 --> 17:29.000]  То есть, если этот, допустим, символ еще равен какому-то там вот этому, то как бы из этого не следует,
[17:30.000 --> 17:32.000]  что это этот символ вот к этому имеет какое-то отношение.
[17:33.000 --> 17:35.000]  Даже, скорее всего, там, ну там, в общем, не важно.
[17:36.000 --> 17:41.000]  Вот, значит, если больше либо равно r минус i, то, значит,
[17:43.000 --> 17:50.000]  пол от i пишем тогда равен r минус i и далее в тупую пишем.
[17:52.000 --> 17:56.000]  То есть, мы говорим, что не менее чем вот столько, а сколько конкретно получается в тупую.
[18:00.000 --> 18:01.000]  Вот такая классика.
[18:05.000 --> 18:07.000]  Вот. То есть, вот таким вот образом можно идти по логу.
[18:08.000 --> 18:12.000]  То есть, аналогично абсолютно с Z-функцией легко убедиться, что алгоритм работает за линию,
[18:13.000 --> 18:16.000]  просто потому что каждый шаг в тупую нам виртуально увеличивает r.
[18:17.000 --> 18:18.000]  Логично, да?
[18:22.000 --> 18:28.000]  Вот в этом-то и заключается такой, может быть, да, чуть менее неизвестный, как чем там всякие Z-функции, но алгоритм.
[18:28.000 --> 18:29.000]  То есть, вот так можно насчитывать премьеру.
[18:30.000 --> 18:33.000]  Есть ли тут какие-то вопросы?
[18:39.000 --> 18:40.000]  Да, нет, наверное.
[18:41.000 --> 18:42.000]  Ну, пока все понятно.
[18:43.000 --> 18:44.000]  Действительно, тут пока ничего сложного нет.
[18:47.000 --> 18:48.000]  Вот.
[18:49.000 --> 18:50.000]  Дальше.
[18:50.000 --> 18:52.000]  Ну, попробуем повыше к плану.
[18:53.000 --> 18:57.000]  Сейчас, конечно, задача будет выглядеть, может быть, немножко искусственно-кликмической,
[18:58.000 --> 19:02.000]  но тем не менее кандидатская диссертация по ее решению была защищена.
[19:04.000 --> 19:07.000]  Ну и ладно, не только ей, но там.
[19:10.000 --> 19:14.000]  Но задача у нас будет такая единая, это будет не просто вычисление.
[19:14.000 --> 19:22.560]  Ладно, не только ей, но там... Но задача у нас будет такая теперь. То есть мы сейчас будем
[19:22.560 --> 19:29.960]  приближаться, действительно, к шагу уровню. То есть, смотрите, до нас строка S, она не
[19:29.960 --> 19:41.800]  меняется. Ладно, давайте сразу скажем, что она кt, потому что она текст. И теперь мы хотим в онлайне,
[19:41.800 --> 19:57.240]  внимание, в онлайне, отвечать на запросы. Запросы вида. Дана строка P. Является ли она под строкой?
[19:57.240 --> 20:13.440]  Причем, как я уже сказал, я хочу отвечать на эти запросы теперь в онлайне. То есть это означает,
[20:13.440 --> 20:18.640]  что мне дали строчку, я хочу не ответить, то после этого мне дают другие запросы. То есть там сказать,
