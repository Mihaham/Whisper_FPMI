[00:00.000 --> 00:08.400]  Так вот, начнется смотреть, что у нас будет дальше.
[00:08.400 --> 00:11.320]  Ну, раз уж мы тут говорим о деревьях и каких-то там
[00:11.320 --> 00:16.800]  декомпозициях, то очень хочется, конечно, тогда уж
[00:16.800 --> 00:20.000]  нельзя не упомянуть, раз уж мимо идем, такую, ну
[00:20.000 --> 00:22.320]  правда, конечно, известную многим олимпиадникам,
[00:22.320 --> 00:24.320]  то есть, такую штуку, как Хавилай Декомпозицион.
[00:24.320 --> 00:27.280]  Так, ну тут правда логичный соцопрос.
[00:27.280 --> 00:29.840]  Во-первых, поднимите руки, кто знает, что такое Хавилай
[00:29.840 --> 00:30.840]  Декомпозицион?
[00:30.840 --> 00:31.840]  Кто слышал?
[00:31.840 --> 00:35.360]  Ну, понятно, кто слышал такое понятие?
[00:35.360 --> 00:36.360]  Кто слышал?
[00:36.360 --> 00:37.560]  Да, поднимают руки все, потому что я его только что
[00:37.560 --> 00:38.560]  сказал.
[00:38.560 --> 00:39.560]  Да.
[00:39.560 --> 00:42.640]  Да, как это хорошо, да.
[00:42.640 --> 00:45.080]  Кто слышит нот, так, ну вот, примерно, да, третий
[00:45.080 --> 00:48.640]  из вас, примерно, знает даже, что это такое, а кто его
[00:48.640 --> 00:51.320]  хоть раз в жизни писал?
[00:51.320 --> 00:54.640]  Так, чуть-чуть поменьше.
[00:54.640 --> 00:59.200]  А кто его хоть раз в жизни написал успешно?
[00:59.200 --> 01:08.720]  Ну да, ну такое бывает, я тут у себя в девятом, там
[01:08.720 --> 01:11.000]  это, в девятом классе, там, в десятом классе давал,
[01:11.000 --> 01:14.000]  ну вот, да, мне у всех получилось, да.
[01:14.000 --> 01:18.960]  Нет, ну окей, формулировано, вот, в любом случае, да.
[01:18.960 --> 01:22.000]  Ладно, пробовал писать, хорошо, вот так, нет, после
[01:22.000 --> 01:25.200]  не у всех получается, там, а там серьезные люди, там
[01:25.200 --> 01:27.600]  это, да, называется, там это, вроде, по ходу, это в этом
[01:27.600 --> 01:32.880]  году тройно в серс поедут, приятно, вот, что, слово
[01:32.880 --> 01:38.240]  в серс, ну из, ну и, ну из десятого класса, в котором
[01:38.240 --> 01:43.120]  я там преподаю, вот, ну нормально, да, как-то, ну не очень успешно,
[01:43.120 --> 01:47.520]  ну не очень успешно, из девятого класса поедут, видимо, пятеро,
[01:47.520 --> 01:54.000]  ну вот, тоже верно, да, нет, ну, так, ну ладно, не буду
[01:54.000 --> 01:57.520]  это говорить, вот, скажем так, ну, у меня есть на эту
[01:57.520 --> 02:01.680]  тему кое-какие, ну, кое-какие инсайды, но на то они инсайды,
[02:01.680 --> 02:03.920]  что, как бы, не публичная информация.
[02:03.920 --> 02:08.320]  Ладно, значит, смотрите, значит, что такое heavy light decomposition,
[02:08.320 --> 02:10.800]  значит, смотрите, это, то есть, ну, иногда бывает
[02:10.800 --> 02:13.400]  такая ситуация, что, вот, когда у нас есть дерево,
[02:13.400 --> 02:17.640]  на этот раз не обязательно подвешенное, да, то нам
[02:17.640 --> 02:21.840]  очень хочется на нем делать те же операции, что и в каких-нибудь,
[02:21.840 --> 02:22.840]  что и на массивах.
[02:22.840 --> 02:27.240]  Ну вот, давайте себе, вот, для разминочки представим
[02:27.240 --> 02:31.240]  такая ситуация, вот, для разминочки, может быть,
[02:31.240 --> 02:35.440]  даже на уровне воспоминания, да, но дерево, ну, корневое,
[02:35.440 --> 02:37.560]  не корневое, не важно, потому что любое не корневое
[02:37.560 --> 02:42.320]  делается, да, делается корневым буквально вот этим вот методом,
[02:42.320 --> 02:47.840]  вот, соответственно, да, так что-то у нас есть дерево,
[02:47.840 --> 02:52.720]  и теперь, значит, и допустим, на каждой, ну, допустим,
[02:52.720 --> 03:02.720]  на вершине написана чиселка, 6, 2, 4, там, 8, 1, 3, 2, там, 5, 6,
[03:02.720 --> 03:17.720]  1, 2, там, от балды, 8, 7, 6, 5, 11, 2, 57, там, 8, 9, 2, 4, 6, вот,
[03:17.720 --> 03:31.720]  а, нулик еще, вот, 5, 7, так, ну вот, ладно, не важно,
[03:31.720 --> 03:36.720]  в данной задаче вообще не важно, нам очень хочется делать,
[03:36.720 --> 03:42.720]  ну, решать какую-нибудь там, какую-нибудь задачу, обобщить
[03:42.720 --> 03:47.720]  эту риску, ну, что, то есть, как она, то есть, обобщить ее
[03:47.720 --> 03:50.720]  следующим образом, ну, мы, допустим, хотим, вот, давайте,
[03:50.720 --> 03:54.720]  в более простом виде, там, ладно, не add, а, допустим,
[03:54.720 --> 03:58.720]  assign в вершине v число x, то есть, я хочу взять вершину v
[03:58.720 --> 04:06.720]  и сказать, что теперь там число x, а еще, ну, вот, я хочу
[04:06.720 --> 04:12.720]  взять сумму на пути от u до v, вот, взять путь от u до v
[04:12.720 --> 04:15.720]  и, собственно, рассмотреть его путь, просмотреть все чиселки
[04:15.720 --> 04:21.720]  и найти сумму, вот, да, поэтому я и говорю, что это задача
[04:21.720 --> 04:24.720]  на размитке, никакого отношения, никаких, боже упаси, там вас
[04:24.720 --> 04:28.720]  писать, какие бы это ни были эти композиции в этой задаче,
[04:28.720 --> 04:33.720]  вот, почему, потому что конкретно эта задача, как это часто
[04:33.720 --> 04:37.720]  бывает, как это часто бывает, когда надо тут что-то суммами
[04:37.720 --> 04:41.720]  делать, суммами или любыми другими кому-то ассоциативными
[04:41.720 --> 04:45.720]  коммутативными обратимыми операциями, значит, делает это
[04:45.720 --> 04:50.720]  так, перенумируем, значит, запустим dfs и перенумируем эти
[04:50.720 --> 04:57.720]  вершины, перенумируем в порядке входа dfs в них, вот, я зеленым
[04:57.720 --> 05:13.720]  маркером я пишу, ну, вот, жалко, что я свои эти 10 маркеров
[05:13.720 --> 05:20.720]  не принес, а то было бы тут рыжая, вот, но ладно, вот, но
[05:20.720 --> 05:23.720]  давайте так, ладно, тогда мы пойдем другим путем, я перенумирую
[05:23.720 --> 05:45.720]  вершины буквами, даже вот так, a, b, c, d, e, f, g, h, i, g, k, l, n, n, o, p, q, r, s, t, q, v, w, x,
[05:45.720 --> 06:04.720]  ничего. Где?
[06:04.720 --> 06:15.720]  Как это? У нас же есть Excel. Все очень просто, не волнуйтесь.
[06:15.720 --> 06:27.720]  Чиселки. Ой, Господи. Ну, в реальности мы будем их числами
[06:27.720 --> 06:30.720]  все-таки записывать, да, в реальном ходе, но это неважно.
[06:30.720 --> 06:35.720]  Важно другое, значит, ну, во-первых, начнем со следующего.
[06:35.720 --> 06:42.720]  Начнем с того, что если вы хотите найти, значит, что такое путь?
[06:42.720 --> 06:45.720]  Ну, как это всегда бывает в дереве, путь это когда вы берете вершину,
[06:45.720 --> 06:48.720]  поднимаетесь из нее в какого-то предка, а потом из этого предка
[06:48.720 --> 06:53.720]  спускаетесь к другой вершине. Вот, значит, то есть вот происходит
[06:53.720 --> 06:56.720]  это вот примерно вот следующим образом, да, то есть вот, допустим,
[06:56.720 --> 06:59.720]  если вот из этой вершины мы пытаемся дойти вот до этой вершины,
[06:59.720 --> 07:03.720]  то мы вот поднимаемся до их LCA, а потом из этой LCA вот спускаемся
[07:03.720 --> 07:12.720]  в другое место. Вот, да, теперь идея такая. Мы, что, если мы насчитываем
[07:12.720 --> 07:16.720]  сумму, то мы можем насчитать сумму, для каждой вершины можно
[07:16.720 --> 07:21.720]  насчитать и поддерживать сумму, значит, чисел от этой вершины
[07:21.720 --> 07:30.720]  до корня. То есть вот так вот я напишу. Сум от V, то есть это вот, так сказать,
[07:30.720 --> 07:40.720]  сум от, вот так вот скажем, root и V. Ну, для размера, вот я, это я
[07:40.720 --> 07:50.720]  ввел определение. А теперь мистический факт. Я утверждаю, что сумму
[07:50.720 --> 07:55.720]  на пути от, сумм от V можно посчитать теперь через только вот эти суммы.
[07:59.720 --> 08:07.720]  Вот, то есть это равно. Не тривиально. Значит, сумм от U
[08:07.720 --> 08:19.720]  плюс сумм от V минус два сумм от LCA от UV. Ой, ну плюс еще там вот эта
[08:19.720 --> 08:28.720]  гадость. Не, там как бы теперь учтено вот сама LCA теперь учтено
[08:28.720 --> 08:35.720]  ноль раз. Поэтому, поэтому как мы эту чиселку называли? Ну ладно, пусть так и
[08:35.720 --> 08:42.720]  называется. C от LCA. Вот, то есть в принципе, если вы откуда-то из кармана
[08:42.720 --> 08:46.720]  достанете LCA, а пока дерево не меняется, вы его можете достать за U от единицы,
[08:46.720 --> 08:52.720]  то вы соответственно теперь можете вычислять эту вот сумму чисел вот таким
[08:52.720 --> 08:57.720]  простым образом. Прям за вот единицы, обратите внимание. Правда, есть один
[08:57.720 --> 09:02.720]  маленький момент. Если вы хотите поменять число, то у вас поменяется куча вот
[09:02.720 --> 09:09.720]  этих вот суммов. Да, но теперь заметим, зачем мы перенумеровывали вершины. А
[09:09.720 --> 09:15.720]  очень просто. Заметим, что теперь в этой нумерации под деревья, то есть
[09:15.720 --> 09:19.720]  каждое под дерево любой вершины, это какой-то подотрезок с началом в ней
[09:19.720 --> 09:24.720]  и окончанием в чем-то там. В чем-то там и это что-то там можно и предподсчитать
[09:24.720 --> 09:31.720]  заранее. Поэтому по факту это присваивание, то есть если вы там число было 5, а вы
[09:31.720 --> 09:36.720]  решили присвоить ему 12, то это означает, что просто на всем этом под деревья надо
[09:36.720 --> 09:51.720]  прибавить 7. Зачем ленивое? Зачем ленивое? Обычное ДО. Присвоить, прибавить. Нет,
[09:51.720 --> 09:59.720]  ленивое ДО это просто немножко другое. Да, ну да, то есть мы пишем дерево отрезков
[09:59.720 --> 10:08.720]  с прибавлением на отрезки. Да, именно это мы и делаем. Ну, типа того, да. Ну, в
[10:08.720 --> 10:15.720]  личном смысле скорее таки ассоциация. Вот, значит в результате, то есть получается,
[10:15.720 --> 10:21.720]  что если у вас меняется один элемент и вот делаете вот эти вот суммы, то никаких
[10:21.720 --> 10:24.720]  дополнительных композиций не надо, то есть если у вас в кармане лежит дерево
[10:24.720 --> 10:34.720]  отрезков, то в общем-то этого вам достаточно. Ну, точнее так, это можно делать фенвиком
[10:34.720 --> 10:39.720]  с прибавлением на отрезки, учитывая, что прибавление на отрезки сводится к задаче
[10:39.720 --> 10:44.720]  без прибавления на отрезки, да, это мы помним. Да, но это, так вот, я вот к сожалению
[10:44.720 --> 10:48.720]  запамятовал, возможно я это повторяю второй раз, потому что нет, фенвик с прибавлением
[10:48.720 --> 10:57.720]  на отрезки, как бы это у нас точно было. Вы на это экзамен сдавали. В смысле?
[10:57.720 --> 11:16.720]  Только один из вас сдавал экзамен? Нет, что-то это как? Это как-то...
[11:16.720 --> 11:24.720]  Мы эту тему не проходили, что ли?
[11:24.720 --> 11:30.720]  Так вот, ну хорошо, то есть пока у нас тут такая красота как сумма, это хорошо, но
[11:30.720 --> 11:40.720]  к сожалению, как это часто бывает с суммой, если мы тут забабахаем хотя бы минимум,
[11:40.720 --> 11:46.720]  то вот это вот, конечно, работать перестанет.
[11:46.720 --> 11:55.720]  По крайней мере, вот такой вот простоты не будет, потому что у нас нету обратимости.
[11:55.720 --> 12:01.720]  Ну вот, есть и, ну вот, ну и тем более, что иногда может очень захотеться делать
[12:01.720 --> 12:06.720]  присваивание, то есть даже делать еще тоже такое усиленное присваивание,
[12:06.720 --> 12:11.720]  присваивание на пути.
[12:11.720 --> 12:29.720]  Так что вот такой вот нот, то есть вот такой вот мистический зуботребительный безобрази,
[12:29.720 --> 12:34.720]  вот, значит, вот как же его делать?
[12:34.720 --> 12:43.720]  Вот, но в этом нот, в этом нам поможет знаменитая heavy light decomposition,
[12:43.720 --> 12:47.720]  то есть мы сейчас слово будем разбивать это дерево на пути, то есть мы сейчас разобьем
[12:47.720 --> 12:51.720]  эти дерево на пути, кстати, могли бы в принципе longest pass decomposition делать,
[12:51.720 --> 12:56.720]  если нас устраивает корень асимптотика корень из N, налог N.
[12:56.720 --> 13:04.720]  Вот, то есть будем разбивать на пути, на каждом из этих путей мы будем строить,
[13:04.720 --> 13:08.720]  ну, например, там дерево отрезков или каким вот образом мы умеем решать вот такую задачу,
[13:08.720 --> 13:12.720]  можете хоть дикартьячку построить, вот.
[13:12.720 --> 13:16.720]  И дикартьячку, сплей, там что-нибудь еще в этом роде, вот тут.
[13:16.720 --> 13:20.720]  Катя вообще любит строить сплей и говорить, что лог квадрат превратился в лог.
[13:20.720 --> 13:22.720]  Ну, это я опять забегаю вперед.
[13:22.720 --> 13:26.720]  Вот, значит, мы это, собственно, будем разбивать на пути и, собственно,
[13:26.720 --> 13:31.720]  на каждом пути, собственно, хранить там дерево отрезков и что-то вот с этим делать.
[13:31.720 --> 13:35.720]  Вопрос только, как разбивать на пути.
[13:35.720 --> 13:46.720]  Значит, определение.
[13:46.720 --> 13:50.720]  Значит, ребро.
[13:50.720 --> 13:52.720]  Значит, напишем так.
[13:52.720 --> 14:09.720]  Ребро, допустим, parent от V запятая V, называется тяжелым.
[14:09.720 --> 14:12.720]  Вот, тяжелое.
[14:12.720 --> 14:32.720]  Если CZ от V, ну, допустим, больше либо равно, чем CZ от parent от V пополам.
[14:32.720 --> 14:41.720]  О!
[14:41.720 --> 14:43.720]  Вообще не округленное.
[14:43.720 --> 14:51.720]  Или, что то же самое, округленное вверх.
[14:51.720 --> 14:52.720]  Ну, вот.
[14:52.720 --> 14:53.720]  А какая разница?
[14:53.720 --> 14:54.720]  Ну, на самом деле так.
[14:54.720 --> 14:58.720]  Чтобы достичь там нужной асимпточки, можно делать по-разному.
[14:58.720 --> 14:59.720]  Можно делать так.
[14:59.720 --> 15:00.720]  Ну, вот.
[15:00.720 --> 15:01.720]  Ну, вот.
[15:01.720 --> 15:02.720]  Ну, вот.
[15:02.720 --> 15:03.720]  Ну, вот.
[15:03.720 --> 15:04.720]  Ну, вот.
[15:04.720 --> 15:05.720]  Ну, вот.
[15:05.720 --> 15:06.720]  Ну, вот.
[15:06.720 --> 15:07.720]  Ну, вот.
[15:07.720 --> 15:10.720]  Что бы достичь там нужной асимпточки, можно делать по-разному.
[15:10.720 --> 15:11.720]  Можно делать так.
[15:11.720 --> 15:12.720]  Можно округлить любую сторону.
[15:12.720 --> 15:16.720]  Можно вместо этого сказать там, что там объявим тяжелым ребром.
[15:16.720 --> 15:19.720]  Там ребро, которое ведет в самое тяжелое под дерево.
[15:19.720 --> 15:20.720]  Да, там.
[15:20.720 --> 15:21.720]  Да.
[15:21.720 --> 15:22.720]  Ой.
[15:22.720 --> 15:23.720]  Выпадаю.
[15:23.720 --> 15:24.720]  Нет, смотрите.
[15:24.720 --> 15:25.720]  Сейчас.
[15:25.720 --> 15:26.720]  Ну.
[15:26.720 --> 15:28.720]  Ну, тут разные варианты есть.
[15:28.720 --> 15:29.720]  Ну, вот.
[15:29.720 --> 15:30.720]  Давайте.
[15:30.720 --> 15:31.720]  Тут мышцы.
[15:31.720 --> 15:32.720]  Мышцы.
[15:32.720 --> 15:33.720]  Иначе.
[15:33.720 --> 15:39.720]  Значит, мистическое утверждение.
[15:39.720 --> 15:44.720]  Из каждой вершины.
[15:44.720 --> 15:45.720]  Ну, вот.
[15:45.720 --> 15:50.720]  Из каждой вершины торчит не более чем одно тяжелое
[15:50.720 --> 15:51.720]  ребро.
[15:51.720 --> 15:52.720]  Вау.
[15:52.720 --> 15:53.720]  Вау.
[15:53.720 --> 15:54.720]  Вау.
[15:54.720 --> 15:55.720]  Вау.
[15:55.720 --> 15:56.720]  Вау.
[15:56.720 --> 15:57.720]  Вау.
[15:57.720 --> 15:58.720]  Вау.
[15:58.720 --> 15:59.720]  Тяжелое ребро.
[15:59.720 --> 16:00.720]  Вау.
[16:00.720 --> 16:01.720]  Вот такое красивое утверждение.
[16:01.720 --> 16:02.720]  Ну, представь, что две.
[16:02.720 --> 16:03.720]  Так.
[16:03.720 --> 16:04.720]  И размер, как бы, под дерево немножко превысился.
[16:04.720 --> 16:05.720]  Ну, да.
[16:05.720 --> 16:06.720]  Но, тем не менее, утверждение не вернуло.
[16:06.720 --> 16:07.720]  Вот.
[16:07.720 --> 16:08.720]  Вот.
[16:08.720 --> 16:09.720]  Вот.
[16:09.720 --> 16:10.720]  Вот.
[16:10.720 --> 16:11.720]  Вот.
[16:11.720 --> 16:12.720]  Вот.
[16:12.720 --> 16:13.720]  Вот.
[16:13.720 --> 16:14.720]  Вот.
[16:14.720 --> 16:15.720]  Вот.
[16:15.720 --> 16:16.720]  Вот.
[16:16.720 --> 16:17.720]  Вот.
[16:17.720 --> 16:18.720]  Вот.
[16:18.720 --> 16:19.720]  Вот.
[16:19.720 --> 16:20.720]  Вот.
[16:20.720 --> 16:21.720]  Вот.
[16:21.720 --> 16:24.860]  Ну, вот утверждение.
[16:24.860 --> 16:25.860]  Да.
[16:25.860 --> 16:33.260]  Утверждается такое, что из вершины может торчать
[16:33.260 --> 16:37.840]  более чем одно тяжелое ребро.
[16:37.840 --> 16:39.180]  Да.
[16:39.180 --> 16:40.420]  Да.
[16:40.420 --> 16:47.940]  да ну это не хитрый прием просто когда из вершины торчит ребро помните что у нее
[16:47.940 --> 16:56.460]  есть все-таки одно ребро вверх у него все-таки торчит то есть так можно сказать то есть скажем
[16:56.460 --> 17:05.020]  так у каждой вершины в детей ведет действительно не более чем одного тяжелого ребра вот если
[17:05.020 --> 17:11.460]  именно вот в детей то как бы да но идея вот и тут уже доказательство действительно очень
[17:11.460 --> 17:19.780]  простое то есть жила была вершина и у нее есть размер там сз отв допустим у нее нашлось два тяжелых
[17:19.780 --> 17:34.620]  ребенка вот тогда получается что тут у нас хотя бы сз отв пополам размер под дереве и тут хотя бы
[17:34.940 --> 17:42.500]  сз отв пополам но тогда получается что уже в этих под деревьях количество вершин хотя бы
[17:42.500 --> 17:50.820]  сз отв это невозможно почему потому что мы в этих вершинах учли не все вершины под дерево
[17:50.820 --> 17:59.900]  вы почему не все но потому что саму-то вершину вы тоже должны были учесть отсюда и следует что
[17:59.900 --> 18:11.620]  из каждой вершины вниз то есть потом в детей ведет не более чем одно тяжелое ребро вот такое
[18:11.620 --> 18:21.500]  простое утверждение так утверждение понятно все да нет да пока да пока тут вроде ничего сложного
[18:21.500 --> 18:26.900]  не но давайте разбираться так вот давайте попробуем кстати тяжелые ребра нарисовать
[18:26.900 --> 18:37.580]  так так вот это ребро вот это не тогда менее показательно будет так тут 789
[18:37.580 --> 18:47.820]  ну да нет я просто считал нету был бы с удовольствием я вообще люблю тяжелые красным цветом
[18:47.820 --> 19:00.380]  не но нам сейчас вот эти буковки нам уже больше не нужны на самом так ну здесь все понятно здесь
[19:00.380 --> 19:05.980]  все да вот здесь вообще удобно как бы да тупой способ да как это чтобы решить задачу давайте
[19:05.980 --> 19:11.780]  рассмотрим простой способ когда граф например бабук и вот но мы понимаем вот кстати таки теперь
[19:11.780 --> 19:18.180]  мы видим что эта задача действительно сложнее чем задача то же самое на массиве почему покину
[19:18.180 --> 19:24.540]  потому что заведомо потому что на массиве это частный случай на дерево да то есть помните да то
[19:24.540 --> 19:41.380]  есть массив это частный случай дерево такой да так ну здесь вот ну вот да я бамбук так
[19:41.380 --> 19:47.980]  кошмар так а ну здесь получается вот так вот значит вот так вот такой путь а ну еще
[19:47.980 --> 19:56.940]  вот тут вот ну да где нет развилок так а тут нормально так вот так вот и а и вот тут тупичок
[19:56.940 --> 20:06.980]  во и конечно в этой декомпозиции бывают пути длины 1 но то есть обратите внимание что если оставить
[20:06.980 --> 20:12.740]  от дерева только тяжелые ребра то не сложно убедиться что граф распадется на пути идущие
[20:12.740 --> 20:24.020]  сверху вниз вот вот вот такая декомпозиция и называется хэйви лайт декомпозицию так это
[20:24.020 --> 20:46.700]  и записывается хэйви лайт декомпозицию вот вот а типичный случай когда английский термин
[20:46.700 --> 20:56.020]  дословно на русский переводится так себе вот тяжелолегкое тяжелолегкое разбиение что ли вот
[20:56.020 --> 21:03.860]  значит смотрите что теперь нам предлагается делать если мы теперь очень хотим ну зелен вот если мы
[21:03.860 --> 21:12.140]  теперь очень очень хотим с вами найти какой-нибудь вот что-нибудь на отрезке то и мы теперь должны
[21:12.140 --> 21:19.180]  этот путь вот любой если нам нужно рассмотреть какой-то путь мы значит наем сериал каждое
[21:19.180 --> 21:27.540]  ребро либо тяжелое либо легко и мы эти вот и если мы тут вот пишем вот эти легкие ребра вот как-то
[21:27.540 --> 21:34.940]  так это будет наверное да легкие ребра могут и подряд идти кстати а все остальное это части зеленых
[21:34.940 --> 21:47.140]  путей вот вы видите это вот да вот зеленая вот выглядит так вот путь начинается здесь идет там
[21:47.140 --> 21:53.940]  куда-то вниз может быть здесь вот единственный случай когда обратите внимание у нас то есть у
[21:53.940 --> 21:59.740]  нас нет не совсем не обязательно с корнем да но я вот имею ввиду следующее что смотрите то есть
[21:59.740 --> 22:06.420]  вот все что если вы все что не легкие ребра это подотрески тяжелые подотрески вот этих тяжелых
[22:06.420 --> 22:14.300]  путей причем эти подотрески нам это просто чуть позже будет важно они обладают таким маленьким
[22:14.300 --> 22:20.100]  приятным свойством что только максимум один из них вот этот корневой может быть не префиксом
[22:20.100 --> 22:28.700]  префиксом тяжелого пути то есть обратите внимание вот здесь тяжелый путь обязательно
[22:28.700 --> 22:36.100]  начинается именно здесь потому что он куда-то вверх уйти не может потому что это дерево да нет
[22:36.100 --> 22:45.780]  это это нам чуть позже будет важно ну придется ну что делать значит смотрите и теперь если мы на
[22:45.780 --> 22:53.500]  каждом из этих деревьев делаем дерево отрезков то тогда время ответа на любой запрос это о от
[22:53.500 --> 23:00.900]  логарифма n потому что мы за логарифмом работаем с деревом отрезков умножить на количество
[23:00.900 --> 23:17.780]  лёгких ребер которые мы тут встретим вот приятная идея так нет так оно и есть потому что у нас все
[23:17.780 --> 23:24.140]  вершины каждая вершина так или иначе к чему-то прикреплена поэтому да то есть как бы то есть
[23:24.140 --> 23:38.060]  пути мы разбиваем на подотрески тяжелых путей может но так нет тогда тогда да вот тут тяжелый
[23:38.060 --> 23:45.380]  путь может быть вот так вот выглядеть кстати да да такой тут и такое бывает
[23:45.380 --> 24:06.060]  типа того да или нет на прессе длины 1 если быть точнее до каждом из зеленых путей да на каждом
[24:06.060 --> 24:12.340]  из зеленых путей мы строим дерево отрезков нет там дальше могут быть разные технологии там разные
[24:12.340 --> 24:17.180]  советы то есть там можно перенумеровать вершины таким образом чтобы можно было построить одно
[24:17.180 --> 24:22.060]  дерево отрезков на всех ну пошли можно перенумерать так чтобы каждый путь это был подотрезок то есть
[24:22.060 --> 24:29.620]  типа там 0 1 2 3 вот это вот ну вот да да правда дальше начинается там это обсуждение но код
[24:29.620 --> 24:35.140]  форси в котором говорят что нет на самом деле нужно на каждом из этих деревьев значит строить
[24:35.140 --> 24:39.540]  свое дерево отрезков и более того все запросы желательно делать по возможности снизу потому
[24:39.540 --> 24:49.140]  что тогда ассептотика будет быстрее якобы да я не понял почему я вообще не понял почему но там
[24:49.140 --> 24:53.780]  вот древние обсуждения но вот тем более того там в каве более более того там в комментариях по
[24:53.780 --> 24:57.900]  сту вроде там-то люди типа там капеллевичей курнявского даже не приводили пример просто
[24:57.900 --> 25:03.260]  пример на котором это реально работает за вот слог квадрат который у нас тут возникает вот
[25:03.260 --> 25:08.420]  а тут возникает по камере если вот по камере железобетонно тут возникает именно лог квадрат
[25:08.420 --> 25:16.740]  потому что я утверждаю что если вы идете от вершины куда-то вверх то на пути от нее до корня вы встретите
[25:16.740 --> 25:30.140]  не более чем логарифом легких легких тяжелых сколько угодно потому что да потому что если
[25:30.140 --> 25:39.380]  есть у вас граф это бамбу ча то как бы у вас все ребра тяжелые вот помните бамбу чить такой
[25:39.380 --> 25:45.700]  дерево у которого все ребра бобов нот все ребра тяжелые а кстати это может быть определение
[25:45.700 --> 25:53.580]  бамбука такой граф у которого все ребра тяжелые а легко доказать потому что если если хоть у
[25:53.580 --> 26:02.580]  какой-то вершины есть более одного ребенка значит хотя бы одно из этих ребер легкое все вот
[26:02.580 --> 26:09.540]  да так же такой вот прикол да как это называется как называется граф в котором нет легких бамбу
[26:09.540 --> 26:23.100]  так красота вот значит и так значит смотрите но теперь скажет вас почему их не более чем логариф
[26:23.620 --> 26:31.260]  да ну да идея да простая что чьи-то когда вы идете снизу вверх от вершины до корня то когда
[26:31.260 --> 26:38.500]  вы проходите по тяжелому ребро размер под дерево увеличивается нет увеличивать а когда он проходит
[26:38.500 --> 26:44.580]  по легким ребрам он увеличивается хотя бы в два раза нет нам это очень важно потому что если
[26:44.580 --> 26:49.300]  вон там увеличился в два раза потом на тяжелом ребре уменьшился обратно то как бы ничего бы не
[26:49.300 --> 27:02.300]  доказали поэтому или так пожалуйста на вашу да да да да как бы слева направо
[27:02.300 --> 27:10.420]  справа налево суть одна вот значит смотрите ну вот то есть действительно то
[27:10.420 --> 27:13.020]  есть легких ребер у нас тогда получается удваиваться мы можем не
[27:13.020 --> 27:16.500]  более чем там логарифм раз поэтому получается логан но фактически то есть
[27:16.500 --> 27:22.220]  пусть разбивается тут на 2 логарифма отсюда на aparece а симпonsciousка о нормально
[27:22.220 --> 27:32.940]  и тогда у нас получается асимп信 Woo от логари лог квадратagi если вот как
[27:32.940 --> 27:37.140]  всегда вот получается вот то есть все то есть путial то для fearless
[27:37.140 --> 27:41.100]  мы с деревом можем делать практически все то же самое что мы могли делать залог
[27:41.100 --> 27:48.300]  с деревом отрезков или декартовым деревом или с плей деревом или любым другим деревом
[27:48.300 --> 28:10.100]  называется ну потому что у нас тут все красиво, правда, не более чем логарифм
[28:10.100 --> 28:25.860]  ну плюс, ну да, логарифм плюс 1. Нет, почти как-то наоборот, уже как, потому что
[28:25.860 --> 28:31.860]  на каждом тяжелом пути мы забабахали просто тупо дерево отрезков, поэтому
[28:31.860 --> 28:34.900]  каждый раз когда приходит какой-нибудь путь и мы хотим делать вот такой ассайн,
[28:34.900 --> 28:39.500]  мы рассматриваем этот путь, смотрим где у него легкие ребра, где
[28:39.500 --> 28:44.660]  тяжелые, ну там как-то разбиваем, но даже не как-то, а просто в любой декомпозиции
[28:44.660 --> 28:48.060]  мы там, например, по вершине можем легко понять, собственно, где она находится,
[28:48.060 --> 28:53.460]  правда, то есть, вообще, где она находится и на каком тяжелом пути она находится и
[28:53.460 --> 29:00.100]  насколько высоко он идет, вот, и тогда, значит, на этом подотреске мы выполняем
[29:00.100 --> 29:03.740]  присваивание на подотреске в дереве отрезков.
[29:04.660 --> 29:11.180]  А если у нас путь идет выше, чем для ЛЦА? Ну тогда, значит, мы в этом месте, идя от этой
[29:11.180 --> 29:15.180]  вершины до сюда, останавливаемся и присваиваем только на этом подотреске.
[29:15.180 --> 29:19.500]  Как мы ЛЦА узнаем? ЛЦА, вот тут интересный момент,
[29:19.500 --> 29:26.180]  во-первых, самое тупое, что можно сделать это, собственно, отдельно посчитать ЛЦА, но этого
[29:26.180 --> 29:34.540]  не нужно делать, а нужно делать следующее, потому что, как вы помните, мы, вот что мы точно умеем
[29:34.540 --> 29:42.500]  делать легко за О от Н, это насчитать таймы на и тайм-ауты, и это позволяет нам за О от единицы
[29:42.500 --> 29:49.060]  понимать про каждую вершину, ну там что-то в духе, там про каждые две вершины является ли одна из
[29:49.060 --> 29:54.780]  них предком другой, помните? Да, вот это вот, это у нас точно было, это делается за О от единицы,
[29:54.780 --> 30:03.380]  вообще вот, без какой бы то ни было магии, почти, вот, а теперь идея такая, если вы это насчитали,
[30:03.380 --> 30:08.900]  то, ну, идея такая, то есть присвоить надо вот на этой части пути и на этой части пути, видите, да?
[30:08.900 --> 30:15.700]  Значит, идея теперь возникает следующая, теперь не насчитываем никаких ЛЦА, вы просто идёте,
[30:15.700 --> 30:20.060]  говорите, так вот, берём вот эту вершину, так, где у неё путь начинается вот в этой вершине? Так,
[30:20.380 --> 30:26.540]  эта вершина является предком этой вершины? Не является, ну отлично, eldest песваевым, идем
[30:26.540 --> 30:32.680]  к родителю, так, теперь, у неё путь начинается вот здесь, так, этой вершины является предком этой
[30:32.680 --> 30:39.620]  вершины? Ой, не является, присваиваем, идем дальше, так, берём эту вершину, берём, так, где у
[30:39.620 --> 30:44.600]  неё путь начинается, так, эта вершины является предком этой вершины? Ой, является, тогда,
[30:44.600 --> 30:52.020]  town. Да? Подождем. Потому что давайте теперь проделаем то же самое,
[30:52.180 --> 30:58.000]  только вот с этой вершины. Значит идём теперь, значит нуこれ делаем,
[30:58.060 --> 31:01.960]  присваиваем тут, присваиваем тут, присваиваем… Прости, господи, вот тут.
[31:03.720 --> 31:07.240]  Ну а теперь интересно, присваиваем тут и тут мы натыкаемся вот
[31:07.240 --> 31:13.020]  на вот эту вершину. У которой тоже вот сначала пути является предком,
[31:13.020 --> 31:14.040]  уже вот этой вершины.
[31:14.600 --> 31:21.600]  Но тогда теперь уже, как легко убедиться уже из картинки, то есть те вершины две, которые вы наткнулись, они лежат на одном и том же пути.
[31:21.600 --> 31:24.600]  Который просто в том же пути, который идет выше.
[31:24.600 --> 31:30.600]  Поэтому, ну вот тогда вам остается только на этом подотреске найти, сделать присваивание и все.
[31:30.600 --> 31:34.600]  Кстати, в качестве бесплатного приложения вы еще ИЛЦА нашли.
[31:34.600 --> 31:42.600]  Специально писать отдельный код, тратить время и писать код отдельно ради ИЛЦА вам здесь не нужно.
[31:42.600 --> 31:44.600]  Вот это очень удобно.
[31:44.600 --> 31:48.600]  То есть это вот такой технический момент по реализации.
[31:50.600 --> 31:52.600]  Ну вот так.
[31:52.600 --> 31:54.600]  Так, 15 минут у нас, да?
[31:57.600 --> 32:00.600]  Ну как сказать, а вы знаете, что я сейчас хочу рассказать?
[32:02.600 --> 32:04.600]  Вот, представляете.
[32:05.600 --> 32:08.600]  Так, ну ладно, по вот этой штуке пока вопроса есть.
[32:13.600 --> 32:15.600]  Окей, ну вот.
[32:21.600 --> 32:23.600]  Так, ну вот.
[32:23.600 --> 32:26.600]  Ну по реализации тут сейчас будет боль, значит, смотрите.
[32:26.600 --> 32:30.600]  Потому что, как бы, единственное, нам не нравится квадрат.
[32:30.600 --> 32:38.600]  Но теперь за оставшиеся 15 минут я попробую предложить, как это делать за логарифом.
[32:38.600 --> 32:41.600]  Не потеряв задачу, которую мы хотим решать вообще?
[32:41.600 --> 32:43.600]  Вообще.
[32:43.600 --> 32:49.600]  Ну я продолжаю утверждать, что как бы все, что вы могли тут делать с деревом отрезков или дикартовым деревом.
[32:49.600 --> 32:51.600]  Там или овлкой.
[32:51.600 --> 32:55.600]  Ну мы помним, да, овлкой как дикартячка, только без вероятностей.
[32:55.600 --> 32:58.600]  В смысле умеет то же самое абсолютно.
[32:58.600 --> 33:00.600]  Но помните, да, там сплит.
[33:00.600 --> 33:02.600]  На экзамене никого не спрашивали там.
[33:04.600 --> 33:06.600]  Ну да, нет.
[33:08.600 --> 33:10.600]  Господи да.
[33:13.600 --> 33:15.600]  А как такое могло произойти?
[33:15.600 --> 33:17.600]  Чего-чего?
[33:17.600 --> 33:19.600]  Ну не знаю.
[33:19.600 --> 33:22.600]  Вероятность, магия, Господь Бог на защитил, понимаешь?
[33:22.600 --> 33:24.600]  Я не знаю.
[33:24.600 --> 33:26.600]  Ну может.
[33:26.600 --> 33:29.600]  Да, он так расстроился, что больше не пришел.
[33:29.600 --> 33:34.600]  Ну хотя нет, сплитверш ВВЛ на самом деле не такая сложная вещь.
[33:34.600 --> 33:37.600]  Ну, как сказать, почему она считает, почему я могу считать не сложной вещью?
[33:37.600 --> 33:42.600]  Потому что я на каком-то там этмошном видеокурсе реально, по-моему, видел там, собственно, ее объяснение.
[33:45.600 --> 33:48.600]  Вообще-то там как-то не очень сложно оказывалось даже.
[33:48.600 --> 33:52.600]  То есть в чем они там, по-моему, даже никаких отсылок в Б дереву не делали в отличие от нас.
[33:52.600 --> 33:55.600]  Вот, ну не важно, значит, смотрите.
[33:55.600 --> 34:01.600]  Так, ну вот для этого вот тут Тихон спрашивал, что у нас тут проходили магистральные темы и тут забыли какую-то мелочь.
[34:03.600 --> 34:05.600]  Значит, часто это какие-то мелочи.
[34:05.600 --> 34:09.600]  Вот сейчас одну из этих мелочей мы сейчас должны будем осветить чуть более подробно.
[34:09.600 --> 34:12.600]  Значит, смотрите, какая ситуация.
[34:12.600 --> 34:26.600]  Вот сейчас вот этот логарифм мы сейчас победим за счет следующей, за счет того, что вот мы сейчас будем жестко пользоваться тем, что здесь все запросы практически, кроме может быть одного, это префиксы.
[34:27.600 --> 34:29.600]  Последовательно идущие, понимаете, да?
[34:30.600 --> 34:40.600]  А теперь давайте внимательно посмотрим, как будет выполняться присваивание или поиск что-нибудь на отрезке, если этот отрезок префикс.
[34:41.600 --> 34:43.600]  Как это может быть?
[34:43.600 --> 34:46.600]  Как это будет скорее всего выполняться?
[34:46.600 --> 34:48.600]  Ну да.
[34:52.600 --> 34:55.600]  Ну или, а сейчас начнем для разминочки с деревоотресков.
[34:56.600 --> 34:59.600]  Вот для разминочки, кстати, тоже будет полезно.
[34:59.600 --> 35:01.600]  Я рассмотрю такую задачу.
[35:01.600 --> 35:03.600]  Дан массив.
[35:06.600 --> 35:09.600]  Массив состоит из ноликов и единичек.
[35:14.600 --> 35:16.600]  Я хочу делать два запроса.
[35:17.600 --> 35:21.600]  Заменить какой-нибудь элемент, номер поз.
[35:21.600 --> 35:23.600]  Ну там, нолик на единичку, единичка на нолик.
[35:24.600 --> 35:27.600]  И найти катую единичку.
[35:30.600 --> 35:33.600]  Ну, легче катую единичку.
[35:38.600 --> 35:40.600]  Господи, фенвики?
[35:44.600 --> 35:47.600]  Это ну, ну как сказать, как известно, если объединить.
[35:47.600 --> 35:49.600]  Если объединить, как это?
[35:56.600 --> 35:59.600]  Ну помните, мы же по-моему рисовали эту картинку.
[35:59.600 --> 36:04.600]  Если объединить это обычного фенвика и встречного фенвика, то получится просто деревоотреска в чистом виде.
[36:06.600 --> 36:09.600]  Вот мы, собственно, не будем от этого оригинала ходить.
[36:09.600 --> 36:11.600]  И давайте, как мы будем решать эту задачу?
[36:11.600 --> 36:13.600]  Мы построим залогарифум, а не залог квадрат.
[36:13.600 --> 36:15.600]  То есть мы не хотим бинпольск.
[36:15.600 --> 36:16.600]  И нам он не нужен.
[36:16.600 --> 36:18.600]  Ну, изменять элемент понятно.
[36:18.600 --> 36:20.600]  Один элемент залогарифом легко меняется.
[36:20.600 --> 36:23.600]  А, ну деревоотресков мы строим на сумму.
[36:23.600 --> 36:26.600]  То есть там в каждом подотреске мы храним сколько там единичек.
[36:26.600 --> 36:28.600]  Тогда дальше идея такая.
[36:28.600 --> 36:31.600]  Мы делаем, значит, залогарифом ищем катый элемент следующим образом.
[36:31.600 --> 36:38.600]  Мы идем в левое под дерево корня и спрашиваем, а катая единичка случайно не у вас?
[36:38.600 --> 36:39.600]  Как он это узнает?
[36:39.600 --> 36:40.600]  Да очень просто.
[36:40.600 --> 36:42.600]  Так, у меня сумма больше либо равно k или нет?
[36:42.600 --> 36:46.600]  А у меня равно k, значит, эту единичку надо искать где-то здесь.
[36:46.600 --> 36:51.600]  И тогда если это так, то мы просто за о от единицы спускаемся сюда и ищем там катый элемент.
[36:51.600 --> 36:58.600]  Но если мы катый элемент оказывается здесь, то есть вот тут оказалось всего пять единичек,
[36:58.600 --> 37:00.600]  а мы ищем какую-нибудь там опять двенадцатую,
[37:00.600 --> 37:04.600]  то значит нам надо просто найти седьмую единичку вот в этом под дереве, правда?
[37:04.600 --> 37:09.600]  То есть за о от единицы мы поняли, куда надо спускаться влево или вправо.
[37:09.600 --> 37:13.600]  Аналогичным образом мы спускаемся уже здесь, потом здесь, ну и так далее.
[37:13.600 --> 37:17.600]  То есть это вот аккуратный спуск по дереву отрезков.
[37:17.600 --> 37:18.600]  Далее.
[37:18.600 --> 37:23.600]  Более того, заметим, что практически все операции будут по сути делать ровно то же самое.
[37:23.600 --> 37:28.600]  То есть если я захочу тут присваивать, например, на подотресках, да?
[37:28.600 --> 37:31.600]  То есть присваивать на префикс я захочу, да?
[37:31.600 --> 37:33.600]  То как это будет выглядеть?
[37:33.600 --> 37:34.600]  А очень просто.
[37:34.600 --> 37:37.600]  Я могу делать это ровно тем же методом.
[37:37.600 --> 37:40.600]  То есть просто я говорю, либо надо ли мне,
[37:40.600 --> 37:43.600]  если мне надо полностью покрыть вот эту левую половину,
[37:43.600 --> 37:45.600]  значит я ее за о от единицы присваиваю,
[37:45.600 --> 37:47.600]  ну помните технологию отложенных операций, да?
[37:47.600 --> 37:50.600]  И иду покрывать префикс справа.
[37:50.600 --> 37:54.600]  Ну вот, если мне не нужно все, значит я всю левую половину покрывать,
[37:54.600 --> 37:56.600]  значит я иду просто рекурсивно влево.
[37:56.600 --> 37:59.600]  Ну не рекурсивно, а даже вайликом по сути иду.
[38:01.600 --> 38:03.600]  Нет, пока, ну да.
[38:03.600 --> 38:06.600]  Пока логарифом.
[38:06.600 --> 38:09.600]  Но заметим, что ровно тем же самым образом
[38:09.600 --> 38:13.600]  каты-элемент в каком-нибудь явном дикартовом дереве тоже ищутся, помните?
[38:13.600 --> 38:17.600]  И более того, присваивание или там что-нибудь еще
[38:17.600 --> 38:20.600]  на дикартовом дереве тоже делается ровно так же, правда?
[38:20.600 --> 38:23.600]  То есть если вы хотите, то есть у вас присвоить на префиксе,
[38:23.600 --> 38:25.600]  то у вас дикартовом дереве тоже самое, думайте.
[38:25.600 --> 38:27.600]  Вот на этой вершине надо присваивать?
[38:27.600 --> 38:31.600]  Если не надо, значит вы просто идете в левое под дерево и живете там.
[38:31.600 --> 38:34.600]  А если надо, то вы идете в это левое под дерево,
[38:34.600 --> 38:37.600]  присваиваете прямо на всем дереве зоот единицы,
[38:37.600 --> 38:41.600]  и дальше присваиваете на каком-то префиксе правого под деревом.
[38:43.600 --> 38:46.600]  И это делается вот абсолютно тем же самым спуском.
[38:46.600 --> 38:49.600]  Понимаете, да? Пока все просто.
[38:51.600 --> 38:52.600]  Нет, я просто к чему.
[38:52.600 --> 38:55.600]  То есть это все делается за логарифом вот таким красивым спуском.
[38:57.600 --> 39:01.600]  Так вот, сейчас, чтобы достичь вместо логарифа квадрат логарифа,
[39:01.600 --> 39:04.600]  мы просто на этих путях построим такое специально,
[39:04.600 --> 39:07.600]  очень специального вида двоичное дерево.
[39:08.600 --> 39:10.600]  То есть это тоже будет такое дерево по неявному ключу,
[39:10.600 --> 39:13.600]  но это будет не дикартовое дерево, это будет не сплей дерево,
[39:13.600 --> 39:15.600]  это будет принципиально новое дерево.
[39:17.600 --> 39:20.600]  Но оно будет обладать двумя свойствами.
[39:20.600 --> 39:24.600]  Во-первых, высота у него будет логарифом N.
[39:24.600 --> 39:27.600]  Да, сразу обращу внимание, что интересно,
[39:27.600 --> 39:31.600]  у него высота будет именно логарифом N, но не логарифом длины пути.
[39:34.600 --> 39:35.600]  Обратите внимание, да?
[39:35.600 --> 39:38.600]  Именно логарифом N, чуть пожирнее.
[39:38.600 --> 39:41.600]  Но при этом мы будем гарантировать, что если к таким деревьям
[39:41.600 --> 39:45.600]  обращаться именно как к префиксам, то есть оно будет построено так,
[39:45.600 --> 39:49.600]  что суммарно на вот таком наборе префиксов,
[39:49.600 --> 39:54.600]  последовательно идущих сверху вниз, будет работать за логарифом.
[39:55.600 --> 40:00.600]  Нет, оно будет не за O от единицы, там более хитрая амортизация будет.
[40:00.600 --> 40:04.600]  Там не будет O от единицы, то есть каждый конкретный запрос за логарифом,
[40:04.600 --> 40:06.600]  но суммарно они будут за логарифом.
[40:08.600 --> 40:09.600]  Значит, смотрите магию.
[40:09.600 --> 40:11.600]  Ну, не очень сложная, но это, конечно, магия.
[40:11.600 --> 40:12.600]  Значит, смотрите.
[40:14.600 --> 40:22.600]  Рассмотрим вот такой вот красивый тяжелый путь.
[40:25.600 --> 40:28.600]  Вот я его даже вот так, я его слегка даже наклоню.
[40:30.600 --> 40:31.600]  Вот он.
[40:33.600 --> 40:37.600]  На, ну вот, на, ну там вот сверху еще что-то может быть есть,
[40:37.600 --> 40:42.600]  и на каждой из этих вершин тут на легких ребрах висят какие-то под деревья.
[40:43.600 --> 40:44.600]  Вот так вот.
[40:47.600 --> 40:52.600]  Значит, смотрите, то есть я введу теперь у каждой вершины такое понятие как ранг.
[40:55.600 --> 41:04.600]  Вот если эти вершины обозначить как, вот зеленые вершины обозначить как V1, V2, V3, V4, V5 и так далее.
[41:07.600 --> 41:08.600]  Ладно, пусть будет V7.
[41:09.600 --> 41:20.600]  То я скажу, что ранг ВИТОВА это будет СЗ от ВИТОВА минус СЗ от ВИПЛЮСПЕКОВ.
[41:25.600 --> 41:30.600]  То есть в переводе говоря я хочу сказать, сколько всего на вершине лежит,
[41:31.600 --> 41:35.600]  сколько всего висит на вершине, если отпилить от нее вот этого тяжелого ребенка.
[41:39.600 --> 41:44.600]  Да, то есть СЗ вот, то есть ну просто СЗ от нее, это на самом деле оно содержит вот это вот все.
[41:49.600 --> 41:52.600]  Ну не левое под дерево, там несколько до самом деле под деревом.
[41:52.600 --> 41:53.600]  Да, она же не бинарная дерево.
[41:54.600 --> 42:01.600]  Да, не бинарная. Вот, а это ребро вот, ну вот. То есть просто отпилить вот, то есть если мы от нее отпилим вот его тяжелого ребенка,
[42:02.600 --> 42:07.600]  что останется? Саму ее мы считаем, напоминаю, то есть очень важно, что СЗ как минимум один и не более чем N.
[42:09.600 --> 42:10.600]  Вот, приятно, да?
[42:11.600 --> 42:17.600]  Да, ну заметим, что СЗ от, то есть ранг, ну тут мы не заморачиваемся, вот от последней вершины тут все просто.
[42:17.600 --> 42:23.600]  РК от вот В, вот этой вот последней, оно просто будет равно СЗ от В7, потому что у нее тяжелых детей нет.
[42:26.600 --> 42:27.600]  Видите, да?
[42:28.600 --> 42:31.600]  Вот, ну почему бедный? Ну вот, ну жалко как-то.
[42:32.600 --> 42:38.600]  Ну хотя, хотя чего, хотя чего, может наоборот у нее на самом деле, наоборот, очень много легких детей, она счастлива и вот все хорошо.
[42:39.600 --> 42:40.600]  Вот, соответственно.
[42:41.600 --> 42:42.600]  Да.
[42:43.600 --> 42:45.600]  Ну как сказать, как это, ну как это действительно нет?
[42:45.600 --> 42:49.600]  Ну да, как-то дети это в принципе прекрасно, а вот особенно когда они не тяжелые.
[42:50.600 --> 42:51.600]  Логично, правда?
[42:52.600 --> 42:56.600]  И вообще мы живем в хорошем мире, когда у вас количество тяжелых детей не более чем один.
[42:57.600 --> 42:58.600]  Вот.
[42:59.600 --> 43:00.600]  Ладно, так вот.
[43:01.600 --> 43:02.600]  Так что к чему я это все?
[43:03.600 --> 43:10.600]  Так что прямо сейчас я построю на этой, на этом массиве вершин двоич, неявное такое двоичное дерево.
[43:11.600 --> 43:18.600]  Но корень я у него буду вычислять весьма экзотическим образом.
[43:20.600 --> 43:24.600]  Значит, смотрите, вот у них есть ранги, да?
[43:25.600 --> 43:29.600]  И этот ранг, и сумма этих рангов не превосходит n.
[43:30.600 --> 43:38.600]  Вот давайте пусть я напишу, что s это вот там ранг от v и t, в общем сумма по i равно от одного, ну в нашем случае 7, да?
[43:39.600 --> 43:57.600]  Так вот, я утверждаю, что я могу выбрать вершину какую-то таким образом, чтобы у нее слева от нее, строго слева от нее суммарно ранг был не более чем s пополам, и справа от нее суммарный ранг был не более чем s пополам.
[43:59.600 --> 44:01.600]  Вот я утверждаю, что такая вершина найдется.
[44:02.600 --> 44:03.600]  Может быть даже две.
[44:05.600 --> 44:06.600]  У нас состоит одна.
[44:06.600 --> 44:07.600]  Ну да.
[44:08.600 --> 44:11.600]  Но там оба раза строго меньше не получится.
[44:14.600 --> 44:18.600]  Но убедиться в этом очень, значит, найти ее очень просто.
[44:19.600 --> 44:23.600]  Потому что, смотрите, давайте идти, идти и насчитывать сумму рангов.
[44:24.600 --> 44:29.600]  И давайте вот остановимся в том месте, где у нас впервые сумма стала больше либо равна, чем половина.
[44:29.600 --> 44:30.600]  Почти, да.
[44:32.600 --> 44:34.600]  Да, тогда заметим, что слева сумма меньше была.
[44:35.600 --> 44:36.600]  Рангов.
[44:38.600 --> 44:41.600]  Размер поддерева без учета тяжелого поддерева.
[44:42.600 --> 44:43.600]  Вот.
[44:43.600 --> 44:47.600]  То есть вот чтобы тут в этих синих висело не более чем s пополам, и тут висело не более чем s пополам, да?
[44:48.600 --> 44:49.600]  Вот.
[44:50.600 --> 44:52.600]  Размер поддерева без учета тяжелого поддерева.
[44:54.600 --> 44:55.600]  Вот.
[44:55.600 --> 44:58.600]  То есть вот чтобы тут в этих синих висело не более чем s пополам, и тут висело не более чем s пополам, да?
[44:59.600 --> 45:04.600]  То есть тогда тут висит меньше чем s пополам, потому что это первая вершина, чтобы тут сумма больше либо равна.
[45:05.600 --> 45:09.600]  Но так как тут больше либо равно с другой стороны, то тогда здесь меньше либо равное с пополам.
[45:10.600 --> 45:11.600]  Ура.
[45:11.600 --> 45:12.600]  За линию нашли.
[45:14.600 --> 45:15.600]  А теперь идея такая.
[45:15.600 --> 45:16.600]  Ну отлично.
[45:16.600 --> 45:18.600]  Давайте объявим теперь это корнем.
[45:19.600 --> 45:22.600]  А вот на этих подотресках построим все рекурсивно.
[45:23.600 --> 45:26.600]  Так я не понимаю, почему у вас ХЛД возникла центроидная декомпозиция.
[45:27.600 --> 45:29.600]  Нет, это не центроидная декомпозиция, это что-то похожее.
[45:30.600 --> 45:31.600]  Ура.
[45:32.600 --> 45:35.600]  Да, причем нет, это взвешенная центроидная декомпозиция.
[45:36.600 --> 45:37.600]  Это вообще вот еще круче.
[45:38.600 --> 45:40.600]  Ну ладно, погодите, давайте без центроидной пока декомпозиции.
[45:41.600 --> 45:42.600]  Вот.
[45:42.600 --> 45:46.600]  Тем более что я пока не знаю, придет таких интересных фактов, кроме того, что она есть и она веселая.
[45:47.600 --> 45:48.600]  Вот.
[45:48.600 --> 45:54.600]  Значит смотрите, на этих подотресках соответственно, понятно, левое и правое под дерево вы построите уже, ну, аналогичным образом, понятно, да?
[45:56.600 --> 46:03.600]  Ну заметим, что так как у нас ранг не превосходит n, то тогда глубина такого дерева будет заведома не более чем логарифом n.
[46:06.600 --> 46:11.600]  Ну понятно, что если брать по количеству вот этих вот самих зеленых вершин, естественно, ни о какой сбалансированности речи быть не идет.
[46:12.600 --> 46:24.600]  То есть более того, там вполне может выясниться, что на самом деле это вот построенное дерево, оно на самом деле будет тоже вполне себе бамбуком, если вот будет выясняться, что тут на этой вершине много висит, на этой в два раза меньше, на этой в четыре и так далее.
[46:27.600 --> 46:32.600]  Да, но гарантируется, но глубина дерева точно не более чем логарифом n.
[46:33.600 --> 46:34.600]  Понимаете, да?
[46:34.600 --> 46:48.600]  То есть глубина логарифа, то есть получается, каждый из этих запросов, то есть на этом дереве тоже можно, как в дереве отрезков и дикартовом дереве, делать всякие эти присваивания на отрезке, искать сумму на отрезке, это будет за логарифом.
[46:49.600 --> 46:50.600]  Вот, понятно, да?
[46:52.600 --> 46:55.600]  Ну то есть там глубина не больше чем логарифом, просто у нас количества не больше.
[46:56.600 --> 47:06.600]  Да, но правда единственное, поэтому я обращал внимание, что там логарифом именно n, то есть всего дерева, а не логарифом количества вершин на самом пути.
[47:07.600 --> 47:11.600]  То есть понятно, что у нас тут сумма рангов интересует.
[47:12.600 --> 47:14.600]  А вот теперь начинается самое интересное.
[47:15.600 --> 47:25.600]  Теперь я утверждаю, что если вы будете работать с этими деревьями, и еще в качестве добивки этот путь вы будете ориентировать так, что он идет сверху вниз,
[47:26.600 --> 47:33.600]  хотя ладно, снизу вверх тоже самое, то тогда я утверждаю, что у вас тогда эти все запросы суммарно будут работать за логарифом.
[47:33.600 --> 47:43.600]  Ну на самом деле понятно, что каждый запрос работает за логарифом, вот этот запрос мы из рассмотрения выкинем.
[47:44.600 --> 47:47.600]  Он за логарифом работает, потому что на самом дереве все понятно.
[47:48.600 --> 47:51.600]  То есть нас по сути сейчас интересует следующее.
[47:51.600 --> 48:03.600]  Вот, смотрите, сейчас будет следующее.
[48:04.600 --> 48:10.600]  То есть предположим, что у нас есть путь, вот рассмотрим какой-то путь вот сверху вниз.
[48:11.600 --> 48:17.600]  И на нем мы рассмотрим, и он разбился на вот такую последовательность префиксов тяжелых путей.
[48:17.600 --> 48:22.600]  Вот так вот. Пум-пум, там пум-пум, пум-пум. Видите, да?
[48:25.600 --> 48:30.600]  А теперь идея такая. Вот мы находимся, допустим, вот давайте себе скажем вот что.
[48:31.600 --> 48:33.600]  То есть мы сейчас находимся вот в этой вершине.
[48:34.600 --> 48:42.600]  Значит, мы сейчас будем говорить, что у нас в некотором смысле на этой вершине висит вот огромное количество вершин.
[48:43.600 --> 48:44.600]  То есть все вот это под дерево, да?
[48:45.600 --> 48:47.600]  Ну это не в некотором смысле, это же действительно.
[48:48.600 --> 48:49.600]  Да, ну так и есть.
[48:50.600 --> 48:55.600]  Ну ладно, не важно. Вот, тут вот какие-то под деревья, тут вот все это висит.
[48:56.600 --> 48:58.600]  Все тут везде висит. Ну вот, и теперь смотрите.
[48:59.600 --> 49:03.600]  А теперь идея такая. Значит, давайте мысленно проводить следующую операцию.
[49:04.600 --> 49:09.600]  Начнем сверху. Вот будем представим себе, что мы с этими путями работаем сверху вниз.
[49:10.600 --> 49:12.600]  Ну понятно, пристановке мест лагаем, сумма не меняется, да?
[49:13.600 --> 49:14.600]  То есть реализационно ничего не поменяется.
[49:15.600 --> 49:16.600]  Ну вот. Значит, теперь идея такая.
[49:17.600 --> 49:18.600]  Как мы будем работать?
[49:19.600 --> 49:20.600]  Значит, как мы будем работать с этим деревом?
[49:21.600 --> 49:23.600]  Мы найдем этот вот, так сказать, центроид.
[49:25.600 --> 49:26.600]  Вот он, центроид, да?
[49:29.600 --> 49:37.600]  И тогда идея такая. Если этот центроид оказался не на пути, то значит с этим вот, с правым под деревом и этой вершиной ничего делать не надо, надо приходить в левое под дерево, да?
[49:37.600 --> 49:38.600]  Вот зелененькие.
[49:39.600 --> 49:41.600]  И мы с этим вот зеленым путем сейчас работаем.
[49:42.600 --> 49:43.600]  Тогда смотрите.
[49:44.600 --> 49:50.600]  Вот если вот первый центроид у него оказался не на этом вот длинном пути, на котором мы пытаемся найти ответ.
[49:51.600 --> 49:53.600]  Вот у нас есть длинный путь, есть ответвление, да?
[49:54.600 --> 49:56.600]  То тогда, то тогда теперь идея такая.
[49:57.600 --> 50:01.600]  А давайте-ка вот все вот это вот, все эти вершины, вот эту вершину ее под дерево просто вот отпилим.
[50:01.600 --> 50:03.600]  Ну мысленно отпилим, мысленно.
[50:04.600 --> 50:09.600]  Заметим, что количество, то есть как бы было у нас под дерево, теперь у нас под дерево минус вот это под дерево.
[50:10.600 --> 50:12.600]  Но я утверждаю, что все эти вершины умерли.
[50:13.600 --> 50:16.600]  Так вот я утверждаю, что мы отпилили хотя бы половину.
[50:19.600 --> 50:23.600]  Потому что у нас все, все вершины на самом деле, они участвовали вот в этих под деревом.
[50:23.600 --> 50:25.600]  Ну мы отпилили хотя бы половину.
[50:27.600 --> 50:31.600]  Потому что у нас все, все вершины на самом деле, они участвовали вот в этих рангах.
[50:32.600 --> 50:34.600]  И мы сейчас отпилили целое правое под дерево и один корень.
[50:35.600 --> 50:37.600]  То есть как минимум половину отпилили, вот мы это так определяли, помните?
[50:44.600 --> 50:46.600]  Нету, один большой путь, от которого что-то ответвляется.
[50:46.600 --> 50:49.600]  Потому что одно дело путь, на котором вы что-то ищете, вот он путь, да?
[50:50.600 --> 50:54.600]  А другое дело, что от этого пути вот тяжелый путь реально может ответвиться в какой-то момент.
[50:55.600 --> 50:57.600]  Ответвиться-то можно, но он не пойдет дальше вниз.
[50:58.600 --> 51:00.600]  Пойдет. Вниз пойдет, просто не туда вниз.
[51:01.600 --> 51:04.600]  Да, но просто, но мы пока все равно эти все вершины рассматривали.
[51:05.600 --> 51:09.600]  Но как бы если тут центроид этого пути оказался не на интересном пути,
[51:10.600 --> 51:13.600]  то мы значит это под дерево отпилили и количество рассматриваемого путьа,
[51:13.600 --> 51:18.600]  то мы значит это под дерево отпилили и количество рассматриваемых вершин уменьшилось не более чем в два раза.
[51:19.600 --> 51:21.600]  Не менее чем в два раза.
[51:22.600 --> 51:24.600]  Вот все рассматриваемых вершин.
[51:25.600 --> 51:27.600]  Мы говорим, что у нас есть множество рассматриваемых вершин.
[51:28.600 --> 51:32.600]  По сути я говорю так, меня сейчас интересует только, то есть смотрите,
[51:33.600 --> 51:38.600]  когда я тут вот спускаюсь по вот этому дереву, да, у меня в каждый момент времени я работаю вот с каким-то подотреском этих вершин.
[51:38.600 --> 51:45.600]  И на этом подотреске висят какие-то вершины.
[51:46.600 --> 51:49.600]  Вот я говорю, что они мне интересны. Мне интересно, как это количество уменьшается.
[51:50.600 --> 51:59.600]  Тогда вот когда мы выкинули этот подотресок и корень, то значит мы тут вот выкинули какое-то число вершин и суммарное число их уменьшилось хотя бы в два раза.
[51:59.600 --> 52:11.600]  Но теперь заметим, что если центроид оказался с этой стороны, да, то здесь тоже оказался, то тогда мы отпиливаем вот все, что вот это висит.
[52:12.600 --> 52:23.600]  Ну мы тоже за О от единицы как бы тут выполнили операцию, буквально за О от единицы, да, и убили вот целое тут вот все, что тут висело, вот это тоже убили.
[52:24.600 --> 52:34.600]  То есть каждый, то есть получается каждый шаг вот этот вот спуск в этом дереве, он получается убивает нам хотя бы половину вершин.
[52:35.600 --> 52:44.600]  Причем смотрите, как интересно происходит. В какой-то момент кончится в итоге тем, что рано или поздно центроидом окажется вот эта сама вот эта вершина, да.
[52:45.600 --> 52:52.600]  Тогда мы соответственно понятно убьем и вот это и вот это, и на ней останется висеть только вот то, что висит вот на этом пути.
[52:54.600 --> 52:58.600]  Логично, да? Вот.
[52:59.600 --> 53:02.600]  И тогда, но теперь мы переходим к следующему пути.
[53:03.600 --> 53:07.600]  Но когда перейдя к следующему пути, мы получаем еще одну вершину убили.
[53:08.600 --> 53:11.600]  И рассматриваем теперь только то, что висит конкретно на этой вершине.
[53:11.600 --> 53:16.600]  Видите, заметьте, вот это-то оно же как бы все же жило, оно же как было интересными вершинами, так и остается.
[53:17.600 --> 53:26.600]  Но теперь, когда мы будем делать эти спуски на дереве здесь, то тоже каждый спуск будет нам убивать хотя бы половину из тех вершин, которые вышли.
[53:29.600 --> 53:39.600]  То есть смотрите, то есть у нас есть, то есть получается каждый спуск по дереву, там, к ребенку, он нам убивает количество интересных вершин хотя бы в два раза.
[53:40.600 --> 53:49.600]  И тогда из этого следует, что спусков по дереву, то есть шагов вот этого спуска по дереву у нас не более чем суммарно логарифм n.
[53:55.600 --> 54:07.600]  Так что на самом деле, то есть, скажем, по крайней мере в тех операциях, которые вы, если вы там просто делаете какие-то операции с деревом отрезков, то и на дереве вы можете их делать за логарифмическое время.
[54:08.600 --> 54:17.600]  Вот. Ну там на самом деле могут быть, конечно, задачи там всякие, там на Heavy Light, в котором приходит, в котором так не работает.
[54:18.600 --> 54:23.600]  Там иногда бывает, что в Heavy Light приходится на самом деле эти элементы хранить в сети и с ними что-то делать, там разные варианты есть.
[54:24.600 --> 54:34.600]  Это уже задача. Но тем не менее, по крайней мере, но по крайней мере на сегодня, по крайней мере, мы убедились, что оказывается дерево отрезков может прекрасно обобщиться на дерево.
[54:37.600 --> 54:40.600]  Ну вот на дерево вот таким вот красивым способом.
[54:41.600 --> 54:45.600]  Так. Ну вот. Ну собственно вот. А у вас, конечно, следующая пара начинается.
[54:47.600 --> 54:53.600]  Так что вот. Ну а тогда на сегодня все. В следующий раз тогда будем говорить снова о целочисленных структурах данных.
