[00:00.000 --> 00:10.080]  Вот, значит, смотрите, мы поговорили с вами про дерево
[00:10.080 --> 00:15.520]  отрезков, про онлайн против оффлайта в прошлый раз.
[00:15.520 --> 00:17.680]  Сегодня мы рассмотрим еще одну структуру данных,
[00:17.680 --> 00:20.680]  которая называется дерево фенвика.
[00:20.680 --> 00:21.680]  Дерево фенвика.
[00:21.680 --> 00:22.680]  Вот.
[00:22.680 --> 00:26.880]  И в контесте, который, ну, вот сейчас третий идет
[00:27.880 --> 00:32.200]  на кодфорсис, там две задачи есть на дерево фенвика.
[00:32.200 --> 00:33.200]  Точно.
[00:33.200 --> 00:34.200]  Вот.
[00:34.200 --> 00:35.480]  И прелесть его в том, что он очень легко обобщается
[00:35.480 --> 00:37.120]  на большей размерности.
[00:37.120 --> 00:39.120]  Как, например, есть у нас дерево отрезков на массиве
[00:39.120 --> 00:41.520]  работает, там всякие суммы на отрезках, изменений
[00:41.520 --> 00:42.520]  в точке делает.
[00:42.520 --> 00:43.520]  Вот.
[00:43.520 --> 00:47.120]  А если рассмотреть ту же задачу, ну, примерно такую
[00:47.120 --> 00:50.840]  же, да, там сумма на отрезке и апдейты точки, но, скажем,
[00:50.840 --> 00:53.560]  когда вы живете не в массиве, а в табличке, и тогда, соответственно,
[00:53.560 --> 00:57.680]  у вас с там под прямоугольника какого-то изменения в точке
[00:57.680 --> 01:01.600]  или даже не в табличке, а в трехмерном кубике таком,
[01:01.600 --> 01:02.600]  то же самое.
[01:02.600 --> 01:04.280]  Апдейты точки и сумма на под кубе.
[01:04.280 --> 01:08.600]  Тогда дерево отрезков там работает, ну, с большим
[01:08.600 --> 01:11.800]  трудом, это сложнее обобщать, ну, просто потому что больше
[01:11.800 --> 01:12.800]  кода будет.
[01:12.800 --> 01:16.280]  Вот на дерево фенвика обобщается очень-очень просто.
[01:16.280 --> 01:19.600]  Одно удовольствие – писать фенвика в больших размерностях.
[01:19.600 --> 01:22.320]  Вот мы сегодня поймем, как это все делать.
[01:22.320 --> 01:24.520]  Значит, ну, сначала давайте вспомним нашу модельную
[01:24.520 --> 01:25.520]  задачу.
[01:25.520 --> 01:30.960]  Самая простая задача, которая решается с помощью, в частности,
[01:30.960 --> 01:31.960]  дерево фенвика.
[01:31.960 --> 01:36.600]  Значит, есть массив, а0, и так далее, а n-1, и два типа
[01:36.600 --> 01:37.600]  запросов.
[01:37.600 --> 01:44.440]  Первый – это апдейт в позиции поз значением вал, нужно
[01:44.440 --> 01:48.120]  увеличить число на позиции поз на вал, сделать плюс
[01:48.120 --> 01:51.320]  равно в точке, и второй – это гетсум на отрезке.
[01:52.320 --> 01:56.520]  Гетсум, соответственно, по индексам LR, нужно найти,
[01:56.520 --> 02:01.880]  то есть там вывести AL плюс L плюс 1, плюс так далее,
[02:01.880 --> 02:02.880]  плюс AR.
[02:02.880 --> 02:06.360]  Вот такая классическая задача у нас была, мы ее умеем решать
[02:06.360 --> 02:09.480]  с помощью дерево отрезков, а сегодня мы просто познакомимся
[02:09.480 --> 02:11.760]  с еще одним способом, как ее решать, и этот способ
[02:11.760 --> 02:14.920]  нам тоже будет чем-то полезен, вот, в частности, он позволит
[02:14.920 --> 02:16.080]  нам выйти в большей размерности.
[02:16.080 --> 02:25.000]  Так, ну смотрите, давайте, я повторю наш массив, какой-то
[02:25.000 --> 02:28.200]  вот такой он будет, давайте введем следующие две очень
[02:28.200 --> 02:29.720]  странные функции.
[02:29.720 --> 02:36.280]  Давайте скажем, что f от i – это i and i plus 1, это вот
[02:36.280 --> 02:48.720]  логическая i, логическая побитывая i, и нам еще нужна
[02:48.720 --> 02:56.920]  будет функция g, и это i или i plus 1, или это логическая
[02:57.920 --> 02:58.920]  побитывая.
[02:58.920 --> 03:09.960]  Вот эти андерсант и палочка – это то, как они реализуются
[03:09.960 --> 03:10.960]  в C++.
[03:10.960 --> 03:16.800]  Первая уже была, кстати.
[03:16.800 --> 03:19.680]  Было что-то похожее, когда на семинарах было про
[03:19.680 --> 03:20.680]  спортстейбл.
[03:20.680 --> 03:23.200]  А, ну и здесь, кстати, у нас такое было, когда мы пытались
[03:23.200 --> 03:25.640]  определять, является ли число степенью двойки.
[03:25.640 --> 03:26.960]  Да, вот это точно было.
[03:26.960 --> 03:30.160]  Ну еще что-то похожее было в доме задачи про спортстейбл,
[03:30.160 --> 03:33.400]  там когда неидомотетные операции были, ну в общем,
[03:33.400 --> 03:35.440]  кто смотрел тоже что-то знакомое, возможно сейчас
[03:35.440 --> 03:36.440]  тоже увидит.
[03:36.440 --> 03:39.400]  Вот, но тут не нужна никакая, никакие предварительные
[03:39.400 --> 03:40.400]  сведения.
[03:40.400 --> 03:41.400]  Я все расскажу.
[03:41.400 --> 03:44.600]  Итак, мы все-таки определили такие две функции, и тогда
[03:44.600 --> 03:51.080]  давайте скажем, что s и t для каждого i – это сумма
[03:51.080 --> 04:04.600]  на отрезке с fi до i чисел ajt от fi до i.
[04:04.600 --> 04:07.560]  То есть, смотрите, понятное дело, что когда мы берем i
[04:07.560 --> 04:12.400]  в конъюнкции, то есть побитывая i, тяжело, да, есть i переменная,
[04:12.400 --> 04:14.600]  есть i как операция, короче, когда мы берем конъюнкцию
[04:14.600 --> 04:17.760]  побитывая двух чисел i и i плюс один, то понятное
[04:17.760 --> 04:19.480]  дело, что результат будет не больше, чем i.
[04:19.480 --> 04:22.520]  Да, понятно, что fi не больше, чем i, потому что там i берется
[04:22.520 --> 04:25.080]  в конъюнкции с чем-то, конъюнкция может только уменьшать каждый
[04:25.080 --> 04:26.080]  бит.
[04:26.080 --> 04:28.320]  Ну, значит, это какой-то отрезок, обязательно не вырожденный,
[04:28.320 --> 04:30.760]  когда у нас левая граница – это fi, а правая граница
[04:30.760 --> 04:31.760]  – это i.
[04:31.760 --> 04:32.760]  Это обязательно какой-то отрезок, ну вот, собственно,
[04:32.760 --> 04:34.760]  с него мы посчитаем какую-то сумму.
[04:34.760 --> 04:37.680]  То есть, если у меня был какой-то массив наш исходный,
[04:37.680 --> 04:41.960]  то для каждой позиции i я считаю fi – это какое-то
[04:41.960 --> 04:44.480]  число, находящееся левее, ну или совпадающееся с самим
[04:44.480 --> 04:45.480]  i.
[04:45.480 --> 04:46.480]  И вот на этом отрезке я нахожу сумму.
[04:47.480 --> 04:50.480]  Вот с этого отрезка я считаю сумму.
[04:50.480 --> 04:53.480]  Это, соответственно, для всех i от 0 до n-1.
[04:53.480 --> 04:56.480]  Для всех i от 0 до n-1.
[04:56.480 --> 04:59.480]  Вот, то есть мы посчитаем такие суммы на отрезках.
[04:59.480 --> 05:02.480]  И если в дереве отрезков было что-то похожее, там
[05:02.480 --> 05:05.480]  тоже были суммы с под отрезков каких-то, но только там были
[05:05.480 --> 05:07.480]  они по степням двойки как-то устроены.
[05:07.480 --> 05:09.480]  Здесь вот с помощью этой функции определяются все
[05:09.480 --> 05:12.480]  отрезки, то есть в качестве правого конца выступает
[05:12.480 --> 05:14.480]  любая точка нашего массива, в качестве левого конца
[05:14.480 --> 05:17.480]  выступает f от этой правой границы.
[05:17.480 --> 05:19.480]  Вот у нас будет n таких сумм.
[05:19.480 --> 05:21.480]  N сумма, n точек.
[05:21.480 --> 05:24.480]  Для каждой точки своя сумма.
[05:24.480 --> 05:27.480]  Ну и тогда можно написать сразу следующее.
[05:27.480 --> 05:29.480]  То есть предположим, что у меня этот массив s как-то
[05:29.480 --> 05:30.480]  насчитан.
[05:30.480 --> 05:34.480]  Тогда можно сразу решить задачу суммы на префиксе.
[05:34.480 --> 05:37.480]  Значит, как можно написать getSum?
[05:37.480 --> 05:42.480]  Ну давайте я напишу getPrefixSum.
[05:42.480 --> 05:44.480]  GetPrefixSum.
[05:44.480 --> 05:46.480]  То есть нам нужна на отрезке, скажем, нам нужна сумма
[05:46.480 --> 05:50.480]  на отрезке от 0 до pos.
[05:50.480 --> 05:51.480]  Решение будет очень простое.
[05:51.480 --> 05:54.480]  Ну смотрите, у меня есть сумма на любом отрезке
[05:54.480 --> 05:58.480]  с, точнее для любого правого конца, у меня есть сумма
[05:58.480 --> 06:01.480]  на каком-то отрезке, где правая граница именно такая.
[06:01.480 --> 06:03.480]  Тогда давайте посмотрим на этот pos.
[06:03.480 --> 06:05.480]  Давайте возьмем от него f от pos.
[06:05.480 --> 06:08.480]  И соответственно мы знаем сумму на вот этом отрезке.
[06:08.480 --> 06:11.480]  От f pos до pos.
[06:11.480 --> 06:12.480]  Вот здесь мы знаем сумму.
[06:12.480 --> 06:16.480]  Соответственно тогда дальше pos уменьшим до этой точки.
[06:16.480 --> 06:18.480]  То есть скажем, что pos равно f от pos-1.
[06:18.480 --> 06:21.480]  Встанем в эту первую нерассмотренную ячейку.
[06:21.480 --> 06:23.480]  И то же самое, возьмем от нее f.
[06:23.480 --> 06:24.480]  Посчитаем здесь сумму.
[06:24.480 --> 06:27.480]  Мы благо знаем, чему равна сумма на каждом таком отрезке.
[06:27.480 --> 06:29.480]  Она лежит в массиве s.
[06:29.480 --> 06:31.480]  Оттуда сумму знаем, добавляем ее к ответу.
[06:31.480 --> 06:35.480]  Потом опять изменяем pos на вот эту точку,
[06:35.480 --> 06:38.480]  которая лежит самая правая нерассмотренная.
[06:38.480 --> 06:41.480]  Ну и так прыгаем, прыгаем, пока весь массив не пропрыгнет.
[06:41.480 --> 06:43.480]  В итоге код будет такой.
[06:43.480 --> 06:45.480]  Значит сначала мы говорим, что ans равно 0.
[06:45.480 --> 06:48.480]  Потом, ну скажем, заводим какую-то переменную i,
[06:48.480 --> 06:51.480]  которая изначально равна 0.
[06:51.480 --> 06:53.480]  Всегда не отрицательная.
[06:53.480 --> 06:55.480]  И функция перехода здесь такая.
[06:55.480 --> 06:58.480]  i равно f от i-1.
[06:58.480 --> 07:01.480]  Потому что f от i-2 это левая граница, которая включена.
[07:01.480 --> 07:05.480]  И мне нужно еще на 1 сдвинуться, чтобы получить первую невключенную точку.
[07:05.480 --> 07:08.480]  И в итоге нужно просто к ответу прибавить ks и t.
[07:08.480 --> 07:10.480]  ans плюс равно s и t, return ans.
[07:14.480 --> 07:17.480]  Вот такой несложный код позволяет нам найти сумму на претексе
[07:17.480 --> 07:21.480]  от нулевого индекса, от нулевой позиции до посты.
[07:21.480 --> 07:22.480]  От нулевой до пост.
[07:22.480 --> 07:23.480]  Ну мы просто так прыгаем.
[07:23.480 --> 07:25.480]  Мы знаем сумму на каких-то кусочках.
[07:25.480 --> 07:27.480]  Давайте вот их все просто сложим
[07:27.480 --> 07:29.480]  по тем стрелочкам, которые у меня получаются.
[07:29.480 --> 07:31.480]  От этого f я их складываю, складываю.
[07:31.480 --> 07:34.480]  В результате получается как раз сумма на отрезке 0 до pos.
[07:35.480 --> 07:40.480]  Оказывается, что это будет работать эффективно,
[07:40.480 --> 07:42.480]  потому что функция f такая крутая,
[07:42.480 --> 07:47.480]  что эта цикла будет работать максимум от логарифма ходов.
[07:47.480 --> 07:49.480]  То есть не больше, чем 20 логарифм от i,
[07:49.480 --> 07:54.480]  ну или точнее от n будет итерация в этом вот форике.
[07:56.480 --> 07:58.480]  Давайте тогда сначала с этим разберемся.
[07:58.480 --> 08:00.480]  Сначала мы поймем, как делать вот этот getSum.
[08:00.480 --> 08:02.480]  То есть как узнавать сумму на префиксе.
[08:03.480 --> 08:06.480]  Ну, сразу скажу, что если мы знаем, как находить сумму на префиксе,
[08:06.480 --> 08:11.480]  то сумма на любом отрезке сводится к 2-ым запросам на префиксах.
[08:11.480 --> 08:13.480]  Потому что, если нам нужна сумма на том-то отрезке,
[08:13.480 --> 08:15.480]  мы можем взять сумму на таком префиксе,
[08:15.480 --> 08:17.480]  вычесть сумму на таком префиксе,
[08:17.480 --> 08:19.480]  и как раз получиться сумму на нужном отрезке.
[08:19.480 --> 08:21.480]  Поэтому если мы решаем заслуживание про суммы,
[08:21.480 --> 08:25.480]  то можно считать, что запросы поступать только на префиксах.
[08:25.480 --> 08:28.480]  Потому что отрезок от префиксов почти ничем не отличается.
[08:28.480 --> 08:30.480]  Нужно просто вычесть там два числа.
[08:30.480 --> 08:47.480]  Теперь, если мы докажем, что вот эта вот штука работает за логарифом, то есть что максимальная длина этого цикла, сколько раз он повторяется, это от логарифа, тогда мы можем отвечать на запрос нахождения суммы отрезка за логарифом, за от логарифа.
[08:47.480 --> 08:55.480]  Потом нужно будет еще научиться делать апдейт, но это давайте пока что чуть позже сделаем, пока что разберемся с GetSum.
[08:55.480 --> 08:59.480]  Давайте я восстановлю эту строчку.
[08:59.480 --> 09:05.480]  И вот pos до большего равна нуля и равно f at – 1.
[09:05.480 --> 09:17.480]  Вот это как раз перебирает все незадействованные i, вычисляя f at, находит сумму на отрезке, начинающуюся в fe, знакомящуюся в i, на нем берет сумму, добавляет к ответу.
[09:17.480 --> 09:19.480]  И все такие отрезки мы проходим.
[09:19.480 --> 09:24.480]  Значит, работает за отлогарифом. Почему?
[09:25.480 --> 09:31.480]  Для этого надо понять, что делает функция f с битовой записью числа i.
[09:31.480 --> 09:42.480]  Вот давайте мы представим, как написано i, то есть чему равно i, чему равно, соответственно, i плюс 1, который участвует там в конъюнце, и чему, соответственно, будет равно f at.
[09:42.480 --> 09:46.480]  Вот давайте напишем. Пусть есть какое-то число i.
[09:46.480 --> 09:48.480]  Оно устроено так.
[09:48.480 --> 09:52.480]  Ну, точнее, мне нужно понять, в чем отличие между i и i плюс 1.
[09:52.480 --> 10:04.480]  Отличие вот в следующем, что в i, чтобы из i получить i плюс 1, мне нужно посмотреть на максимальный блок единиц в конце, в числе i, ну и, соответственно, перед этим блоком будет 0.
[10:04.480 --> 10:14.480]  И тогда, когда я прибавляю единицу, у меня все вот эти вот младшие единицы зановятся, и единица перейдет в старший разряд, и вместо одного из нулей будет единиц.
[10:14.480 --> 10:20.480]  Вот так в любом случае, ну, точнее, для каждого i работает у меня прибавление единицы.
[10:20.480 --> 10:28.480]  Мы вычленяем последний блок, последний наибольший блок из единиц, то есть просто смотрим, сколько в двоечной записи единиц в конце, их, возможно, будет 0,
[10:28.480 --> 10:34.480]  тогда просто вот этот вот как бы отрезок пустой, этого ничего нету, и просто младший 0 меняется на младшую единицу.
[10:34.480 --> 10:40.480]  Но если их там несколько, то просто после прибавления у меня эта единица будет проталкиваться, проталкиваться вот так вот по разрядам.
[10:40.480 --> 10:48.480]  В итоге она осядет вот здесь вот, в итоге младшая единица заменится нулями, а самый правый 0 заменится на единицу.
[10:48.480 --> 10:56.480]  Ну и тогда f от t, это нам нужно просто взять конъюнцию побитую этих двух строк, соответственно, здесь все неизменное,
[10:56.480 --> 11:02.480]  этот блок какой был здесь, такой останется здесь, такой перенесется сюда, потому что конъюнция двух одинаковых блоков, это он сам.
[11:02.480 --> 11:10.480]  Ну а здесь все зановится, потому что 0 ант-1 это 0, 1 ант-0 это 0, здесь 0, здесь 0, здесь 0, здесь 0.
[11:10.480 --> 11:22.480]  В итоге вот как можно выразить, что делает f от i. f от i зановляет, зановляет, как бы это сказать?
[11:22.480 --> 11:30.480]  Зановляет блок младших единиц, младших единиц.
[11:30.480 --> 11:36.480]  То есть если у меня на конце было несколько единичек, то чем отличается i и f от i?
[11:36.480 --> 11:42.480]  Отличается только тем, что вот этот как раз блок из единиц целиком превратился в 0, больше ничего не поменялось.
[11:42.480 --> 11:50.480]  То есть f от i просто берет, рассматривает все младшие единицы справа налево, пока не дойдет до 0, и все эти единицы превращается в 0.
[11:50.480 --> 11:55.480]  Как раз преобразование f от i ровно так и работает, превращает младшие единицы в 0.
[11:55.480 --> 12:00.480]  Тогда что такое f от i минус 1?
[12:00.480 --> 12:05.480]  Ну здесь тогда нужно из вот этого числа, которое написано выше, из f от i вычесть единицы.
[12:05.480 --> 12:12.480]  Понятно, что эти нули превратятся в единицы, эти нули превратятся в единицы, ну а здесь еще что-то произойдет.
[12:13.480 --> 12:20.480]  Давайте напишу, здесь что-то странное происходит, потому что, например, если здесь было еще несколько нулей, то они тоже все превращаются в единицы,
[12:20.480 --> 12:25.480]  а соответственно младшие единицы превратятся в 0. Это будет вычетание единицы.
[12:25.480 --> 12:30.480]  Но мы не особо будем заботиться над тем, что происходит вот здесь, то есть тут какое-то преобразование.
[12:30.480 --> 12:38.480]  Самое главное, что когда мы переходим от i к f от i минус 1, мы самый младший нулик заединичили.
[12:38.480 --> 12:45.480]  То есть раньше он был нулем, теперь он стал единицей, а все более младшие единицы остались на месте.
[12:45.480 --> 12:52.480]  Поэтому, когда мы делаем переход от i к f от i минус 1, у меня происходит следующее.
[12:52.480 --> 13:00.480]  Младший 0, младший 0, зануляется,
[13:00.480 --> 13:07.480]  наоборот, становится единицей, становится единицей,
[13:07.480 --> 13:11.480]  становится единицей,
[13:11.480 --> 13:23.480]  и еще что-то возможно происходит слева, что-то еще может происходить
[13:23.480 --> 13:30.480]  в более старших разрядах.
[13:30.480 --> 13:36.480]  Но это несущественно. Для нас самое главное, что просто младший 0 превратился в единицу.
[13:36.480 --> 13:42.480]  И это в частности означает, что число раз, когда мы входим в цикл,
[13:42.480 --> 13:46.480]  то есть сколько раз мы можем к i применить преобразование вот этого,
[13:46.480 --> 13:51.480]  и получить f от i минус 1. Но явно не больше, чем исходно в нем было нулей.
[13:51.480 --> 13:55.480]  Ну, точнее, не сколько исходно в нем было нулей, а сколько вообще может быть нулей в числе.
[13:55.480 --> 13:58.480]  Потому что мы взяли 0, превратили его в единицу.
[13:58.480 --> 14:03.480]  Дальше, если еще раз применяем преобразование, мы берем вот эту вот 0, превращаем его в единицу.
[14:03.480 --> 14:06.480]  И так далее. То есть все более младшие единицы у нас сохраняются,
[14:06.480 --> 14:08.480]  мы просто должны взять какой-то 0 и заединичить его.
[14:08.480 --> 14:12.480]  Но тогда понятно, что количество шагов, в которых мы можем это сделать,
[14:12.480 --> 14:16.480]  это количество шагов не превышает общего возможного числа бит.
[14:16.480 --> 14:32.480]  Значит, число шагов не превышает общего числа бит в i.
[14:32.480 --> 14:36.480]  То есть не больше, чем двойственного грифа.
[14:36.480 --> 14:41.480]  Ну, тут у меня написано log m, неважно там log i, в кочем-то случае может быть log m,
[14:41.480 --> 14:43.480]  поэтому сверху сделаю цинку просто log m.
[14:43.480 --> 14:46.480]  Все, значит, количество итераций фора не больше логарифа.
[14:46.480 --> 14:48.480]  Что мы и хотели?
[14:48.480 --> 14:54.480]  Получается, что запрос суммы на префиксе у меня реализован уже за логарифом.
[14:58.480 --> 15:02.480]  Так, едем дальше. Дальше нам нужно научиться обрабатывать апдейт.
[15:02.480 --> 15:05.480]  Дальше нужно научиться обрабатывать апдейт.
[15:06.480 --> 15:10.480]  Update pos val.
[15:10.480 --> 15:14.480]  Давайте я нарисую, напишу код, который обрабатывает апдейт,
[15:14.480 --> 15:18.480]  и мы с вами докажем, что он все делает корректно и за нужную симпатику.
[15:18.480 --> 15:20.480]  Код очень простой.
[15:24.480 --> 15:34.480]  Для всех i от pos до n, i равно g от i, s и t плюс равно val.
[15:34.480 --> 15:36.480]  Конец.
[15:37.480 --> 15:39.480]  Тоже очень простой код.
[15:41.480 --> 15:44.480]  Ладно, тут слишком много отличий, я не буду говорить, что это...
[15:44.480 --> 15:48.480]  То есть это во многом похоже на то, что у нас было раньше, в предыдущем кусочке,
[15:48.480 --> 15:50.480]  когда мы по f от i прыгали.
[15:50.480 --> 15:53.480]  Только здесь, во-первых, другой переход, i равно g от i.
[15:53.480 --> 15:56.480]  Здесь другие начальные и конечные условия,
[15:56.480 --> 16:00.480]  но, соответственно, мы не сумму, не к ans, не к ans прибавляем s и t,
[16:00.480 --> 16:03.480]  а, наоборот, s и t увеличиваем на какую-то константуал.
[16:04.480 --> 16:06.480]  Значит, почему это то, что нам нужно?
[16:06.480 --> 16:08.480]  Смотрите.
[16:08.480 --> 16:12.480]  Вообще давайте напишем условия, какие s и t нужно поменять.
[16:12.480 --> 16:21.480]  Представляем себе, что a pos t увеличивается на val.
[16:21.480 --> 16:24.480]  Ну, собственно, происходит то, что в запросе.
[16:24.480 --> 16:27.480]  Тогда вопрос, какие s и t должны поменяться?
[16:28.480 --> 16:30.480]  Какие s и t меняются?
[16:33.480 --> 16:37.480]  Ну, явно те и только те, в отрезке которых есть pos.
[16:38.480 --> 16:42.480]  Значит, мне нужно увеличить s и t на val, если и только если
[16:42.480 --> 16:46.480]  выполняется такое условие, s и не больше, чем pos и не больше, чем i.
[16:47.480 --> 16:54.480]  Потому что для каждого i число s и – это сумма на отрезке с fi до i.
[16:55.480 --> 16:57.480]  Соответственно, эта сумма может поменяться,
[16:57.480 --> 17:01.480]  только если в нём, внутрь, в него попало число a pos t.
[17:01.480 --> 17:03.480]  У gt здесь он находится.
[17:03.480 --> 17:07.480]  Но это в точности условие, что fi t меньше равно pos меньше равно i.
[17:08.480 --> 17:11.480]  То есть мне нужно, чтобы обновить мой массив s,
[17:11.480 --> 17:13.480]  вот этот массив сумм на странных наших отрезках,
[17:13.480 --> 17:17.480]  мне нужно просто пройтись по всем i с вот этим условием
[17:17.480 --> 17:20.480]  и в них увеличить s и t на val.
[17:20.480 --> 17:22.480]  В них во всех s и t увеличить на val.
[17:22.480 --> 17:24.480]  Это вот, что мне нужно сделать.
[17:24.480 --> 17:27.480]  И я утверждаю, что этот код делает ровно то, что мне нужно.
[17:28.480 --> 17:30.480]  Делает ровно то, что мне нужно.
[17:30.480 --> 17:32.480]  Ну, давайте поймём, почему это верно.
[17:32.480 --> 17:36.480]  Давайте поймём, как устроены вот эти i с условием, которые тут написаны.
[17:37.480 --> 17:39.480]  Давайте я напишу где-нибудь i.
[17:41.480 --> 17:44.480]  Выделю в нём блок единиц в конце максимальный.
[17:45.480 --> 17:47.480]  Напишем f at.
[17:48.480 --> 17:51.480]  Сейчас, пардон, хочу немножко по-другому нарисовать.
[17:56.480 --> 17:58.480]  Я нарисую сначала f at.
[17:58.480 --> 18:01.480]  Здесь будет место для pos, здесь будет i.
[18:01.480 --> 18:04.480]  И это что? Это какой-то блок старший вид,
[18:04.480 --> 18:06.480]  на который мне фиолетово.
[18:06.480 --> 18:08.480]  Потом будет 0, потом будет куча единиц.
[18:09.480 --> 18:13.480]  f at, напоминаю, у нас за нуляет последний блок единиц.
[18:14.480 --> 18:18.480]  То есть, старшие разряды остаются неизменными,
[18:18.480 --> 18:20.480]  нолик остается неизменным,
[18:20.480 --> 18:22.480]  а вот эти все младшие единицы превращаются в нули.
[18:23.480 --> 18:25.480]  Тогда вопрос.
[18:25.480 --> 18:32.480]  Когда может быть такое, что pos меньше равно i и pos больше равно, чем f at?
[18:32.480 --> 18:34.480]  То есть pos находится между этими значениями числа.
[18:35.480 --> 18:37.480]  Всё очень просто.
[18:37.480 --> 18:41.480]  У pos должны быть вот эти биты такие же, как у i и у f at.
[18:41.480 --> 18:43.480]  То есть, тоже написано вот здесь.
[18:43.480 --> 18:45.480]  Оно такое же, как здесь и вот здесь.
[18:45.480 --> 18:47.480]  Ну и вот здесь тоже написан нолик.
[18:47.480 --> 18:52.480]  То есть, этот ноль должен быть...
[18:54.480 --> 18:55.480]  Ну, понятно, да?
[18:55.480 --> 18:58.480]  То есть, если у меня число pos заключено между f at и...
[18:58.480 --> 19:01.480]  И у них вот такой есть общий префикс у всех,
[19:01.480 --> 19:03.480]  то и этот общий префикс есть в частности в числе pos.
[19:03.480 --> 19:06.480]  А вот здесь, соответственно, ну, здесь как бы что угодно.
[19:06.480 --> 19:08.480]  То есть, тут что угодно.
[19:09.480 --> 19:13.480]  В итоге какое у меня условие получилось на i?
[19:13.480 --> 19:15.480]  Как выглядит i?
[19:15.480 --> 19:17.480]  И выглядит так.
[19:17.480 --> 19:22.480]  Мне нужно оставить какой-то префикс в pos, который заканчивается нулём,
[19:22.480 --> 19:25.480]  а правее этого префикса записать единицы.
[19:25.480 --> 19:28.480]  То есть, я беру произвольный начальный отрезок pos.
[19:28.480 --> 19:30.480]  Вот представьте, что у меня есть число pos,
[19:30.480 --> 19:33.480]  который заканчивается нулём, и там справа ещё что угодно.
[19:33.480 --> 19:36.480]  Так вот, давайте я просто то, что было правее,
[19:36.480 --> 19:39.480]  я буду просто игнорировать и заменю единицами.
[19:39.480 --> 19:41.480]  И вот это будет одно из корректных значений i.
[19:41.480 --> 19:44.480]  И, соответственно, мы поняли из вот этой вот картинки,
[19:44.480 --> 19:46.480]  что любой i таким образом получается,
[19:46.480 --> 19:48.480]  что нужно просто взять какой-то префикс из pos,
[19:48.480 --> 19:50.480]  потому что, смотрите, вот эти вот...
[19:50.480 --> 19:51.480]  Давайте нарисую.
[19:51.480 --> 19:53.480]  Вот эти вот красные кусочки совпадают.
[19:53.480 --> 19:55.480]  Вот эти красные кусочки совпадают.
[19:55.480 --> 19:58.480]  Значит, i таково, что это какой-то префикс pos оканчивается нулём,
[19:58.480 --> 20:01.480]  а потом всё, что написано правее этого нуля, мы заединичили.
[20:01.480 --> 20:04.480]  То есть, не важно, что там было изначально, мы просто их сделали единицами.
[20:04.480 --> 20:07.480]  Вот это какое, как бы какие i у меня подходят.
[20:07.480 --> 20:09.480]  Такие и ровно такие.
[20:09.480 --> 20:12.480]  Мы как бы их описали целиком.
[20:12.480 --> 20:14.480]  Вот, ну, хорошо.
[20:14.480 --> 20:16.480]  Хорошо.
[20:16.480 --> 20:19.480]  Сейчас мы берём все нули просто.
[20:19.480 --> 20:21.480]  Так, так, так.
[20:21.480 --> 20:23.480]  Важно ли, что здесь ноль?
[20:23.480 --> 20:25.480]  Сейчас, секунду.
[20:34.480 --> 20:36.480]  Можно вопрос, да?
[20:36.480 --> 20:37.480]  Так.
[20:37.480 --> 20:38.480]  Пардон?
[20:38.480 --> 20:40.480]  Можно вопрос, да.
[20:40.480 --> 20:42.480]  Да, ну, смотрите, хорошо.
[20:42.480 --> 20:44.480]  Значит, единственное, когда это, видимо, может не работать,
[20:44.480 --> 20:47.480]  когда у меня вот здесь вот нет ни одной единицы,
[20:47.480 --> 20:54.480]  и тогда, соответственно, мне нечего вот здесь вот заменять.
[20:54.480 --> 20:56.480]  Так, извините, момент.
[20:56.480 --> 20:58.480]  Не так сказал.
[20:58.480 --> 21:00.480]  Значит, наоборот, да?
[21:00.480 --> 21:03.480]  Мне ещё, у меня вот есть такой случай, когда i равно pos.
[21:03.480 --> 21:05.480]  Ну, понятно, что i равно pos всегда нам подходит,
[21:05.480 --> 21:07.480]  даже если, скажем, pos нечётное.
[21:07.480 --> 21:09.480]  То есть, когда вот, не знаю, pos вот такое.
[21:09.480 --> 21:11.480]  Сейчас я его где-нибудь нарисую.
[21:11.480 --> 21:14.480]  То есть, когда pos вот такой заканчивается единицей,
[21:14.480 --> 21:16.480]  то мне такое i тоже подходит.
[21:16.480 --> 21:18.480]  Ну, потому что если я возьму pos равно i,
[21:18.480 --> 21:21.480]  то понятно, что i удовлетворяет этому условию,
[21:21.480 --> 21:24.480]  что f at и меньше равно pos меньше и меньше равно i.
[21:24.480 --> 21:26.480]  Так вот, такое точно мне подходит.
[21:26.480 --> 21:30.480]  А дальше, смотрите, какие я перебираю значения i.
[21:30.480 --> 21:32.480]  Я навешиваю многократное число g.
[21:32.480 --> 21:34.480]  Точнее, функцию g.
[21:34.480 --> 21:36.480]  Я навешу многократное g.
[21:36.480 --> 21:38.480]  И теперь мне нужно понять, как действует g.
[21:38.480 --> 21:40.480]  То есть, мы поняли, какие i нужно перебрать.
[21:40.480 --> 21:42.480]  Вот эти вот, да?
[21:42.480 --> 21:44.480]  Оставить какой-то префикс и заединить всё, что правее.
[21:44.480 --> 21:46.480]  Теперь давайте тогда поймём, как действует функция g.
[21:48.480 --> 21:50.480]  Переключаемся дальше.
[21:50.480 --> 21:52.480]  И задаем себе вопрос, как действует g.
[21:52.480 --> 21:54.480]  Сейчас вопрос.
[21:54.480 --> 21:56.480]  Секунду.
[21:56.480 --> 21:58.480]  Как действует g?
[22:02.480 --> 22:04.480]  Условия задачи, это, видимо, вот это, да?
[22:04.480 --> 22:06.480]  Я правильно вас понимаю?
[22:09.480 --> 22:11.480]  Или условия задачи, которые мы решаем исходно?
[22:11.480 --> 22:13.480]  Исходно мы решаем вот такую задачу.
[22:13.480 --> 22:15.480]  Update с точки, сумма на отрезке.
[22:17.480 --> 22:19.480]  Да, всё.
[22:21.480 --> 22:23.480]  Вот такая. Update с точки.
[22:23.480 --> 22:25.480]  То есть, pos равно в точке.
[22:25.480 --> 22:27.480]  И сумма на отрезке.
[22:27.480 --> 22:29.480]  Для произвольных индексов найти сумму на отрезке.
[22:30.480 --> 22:32.480]  Ещё вопрос насчёт того, как мы и выбираем.
[22:32.480 --> 22:36.480]  Ну хорошо, значит, мы теперь хотим понять, как действует функция g.
[22:36.480 --> 22:38.480]  Не слышно?
[22:38.480 --> 22:40.480]  Нет, я вас не слышу.
[22:40.480 --> 22:42.480]  Хотя у меня звук включён.
[22:44.480 --> 22:46.480]  А скажите сейчас что-нибудь.
[22:46.480 --> 22:48.480]  Раз-раз-раз.
[22:48.480 --> 22:50.480]  Это хорошее.
[22:50.480 --> 22:52.480]  Кто-нибудь?
[22:52.480 --> 22:54.480]  Приём.
[22:54.480 --> 22:56.480]  Так, я ничего не слышал.
[22:56.480 --> 22:58.480]  А, а теперь?
[22:58.480 --> 23:00.480]  А теперь слышу.
[23:00.480 --> 23:02.480]  Я короче давно уже пытался задать вопрос.
[23:02.480 --> 23:04.480]  Извините.
[23:04.480 --> 23:06.480]  Сейчас мы и берём просто любой ноль.
[23:06.480 --> 23:08.480]  И всё, что правее него, заединичиваем.
[23:08.480 --> 23:12.480]  И для любого ноля заединичиваем всё, что справа.
[23:12.480 --> 23:14.480]  Всё, окей, спасибо.
[23:14.480 --> 23:16.480]  Да, извините, пожалуйста.
[23:16.480 --> 23:18.480]  Я не в тот поток поставил звук.
[23:18.480 --> 23:20.480]  Да, теперь я вас слышу.
[23:24.480 --> 23:26.480]  Так, ну что же, разбираемся со функцией g.
[23:26.480 --> 23:28.480]  Значит g, напоминаю, g от i.
[23:28.480 --> 23:30.480]  Это i or i plus 1.
[23:34.480 --> 23:36.480]  Хорошо.
[23:36.480 --> 23:38.480]  То же самое сделаем.
[23:38.480 --> 23:40.480]  Давайте мы выделим в i последний блок из единиц.
[23:40.480 --> 23:42.480]  То есть нолик и куча единичек.
[23:42.480 --> 23:44.480]  Нарисуем i plus 1.
[23:44.480 --> 23:46.480]  Раз нам нужно посчитать or, то мне нужно i plus 1.
[23:46.480 --> 23:48.480]  Это тот же самый префикс.
[23:48.480 --> 23:50.480]  Потом один и потом куча нулей.
[23:50.480 --> 23:52.480]  И наконец считаем g от i.
[23:52.480 --> 23:54.480]  Префикс не изменится,
[23:54.480 --> 23:58.480]  потому что or двух одинаковых блоков.
[23:58.480 --> 24:00.480]  Это тот же самый блок.
[24:00.480 --> 24:02.480]  То есть это всё одно и то же.
[24:02.480 --> 24:04.480]  Ну а здесь вместо нулей будут все единицы.
[24:04.480 --> 24:06.480]  Здесь вместо нулей будут все единицы.
[24:06.480 --> 24:12.480]  Ну потому что как раз or единицы нуляет единицы.
[24:12.480 --> 24:14.480]  В итоге g от i действует так.
[24:14.480 --> 24:16.480]  g от i заединичивает,
[24:16.480 --> 24:20.480]  то есть превращает в единицу.
[24:20.480 --> 24:22.480]  Младший 0.
[24:22.480 --> 24:24.480]  Младший 0.
[24:24.480 --> 24:26.480]  Берёт самый младший нулик,
[24:26.480 --> 24:28.480]  то есть самый правый нуль в личной записи
[24:28.480 --> 24:30.480]  и превращает его в единицу.
[24:30.480 --> 24:32.480]  Вот это вот преобразование такое,
[24:32.480 --> 24:34.480]  что мы поменяли всего один бит,
[24:34.480 --> 24:36.480]  младший 0 поменяли на единицу.
[24:36.480 --> 24:38.480]  Ну и ровно это на самом деле мы и хотели
[24:38.480 --> 24:40.480]  от всех тех i, которые мы перебираем.
[24:40.480 --> 24:48.480]  Смотрите, как у нас работало перебор всех i.
[24:48.480 --> 24:50.480]  Мы рассматриваем все...
[24:50.480 --> 24:52.480]  Давайте примерно рисуем, наверное.
[24:52.480 --> 24:54.480]  Давайте разберём какой-нибудь пост конкретное.
[24:54.480 --> 24:58.480]  0, 1, 1, 1, 0.
[24:58.480 --> 25:00.480]  1, 1, 0.
[25:00.480 --> 25:02.480]  1, 1, 1, 0.
[25:02.480 --> 25:06.480]  Напоминаем, как работают все i,
[25:06.480 --> 25:08.480]  которые мне нужно перебрать.
[25:08.480 --> 25:10.480]  Это значит, я обрезаю на каком-то нуле,
[25:10.480 --> 25:12.480]  и всё, что правее заединичиваю.
[25:12.480 --> 25:16.480]  Это ровно те i, которые мне нужно перебрать.
[25:16.480 --> 25:18.480]  Ну, во-первых, у меня есть вот такой и равный пост,
[25:18.480 --> 25:20.480]  когда я просто обрываюсь на нуле.
[25:20.480 --> 25:22.480]  Но это просто мы всегда и так отдельно обрываем.
[25:22.480 --> 25:24.480]  И равно пост.
[25:24.480 --> 25:26.480]  Это мы переберём.
[25:26.480 --> 25:28.480]  Дальше я хочу обрубиться вот так.
[25:28.480 --> 25:30.480]  Ну да.
[25:30.480 --> 25:32.480]  Дальше я хочу обрубиться как бы вот здесь,
[25:32.480 --> 25:34.480]  то есть фиксировать, оставить такой префикс
[25:34.480 --> 25:36.480]  неизменным, а всё, что правее него,
[25:36.480 --> 25:38.480]  заединичить.
[25:38.480 --> 25:40.480]  Но смотрите, эти единицы у меня и так единицами стоят.
[25:40.480 --> 25:42.480]  Поэтому единственное, что меняется
[25:42.480 --> 25:44.480]  при переходе от вот этого числа вот к этому,
[25:44.480 --> 25:46.480]  это что вот этот младший 0
[25:46.480 --> 25:48.480]  заединичивается.
[25:48.480 --> 25:50.480]  То есть вместо этого нуля должна встать единица.
[25:50.480 --> 25:52.480]  А это как раз преобразование geote,
[25:52.480 --> 25:54.480]  geot-посточное.
[25:54.480 --> 25:56.480]  Если мы начали в пост, то это geot-пост.
[25:56.480 --> 25:58.480]  Я просто взял младший 0, заединичивал
[25:58.480 --> 26:00.480]  и получил новое путь,
[26:00.480 --> 26:02.480]  как бы новое интересующее у меня число.
[26:02.480 --> 26:04.480]  Дальше мне нужно будет обрубиться вот здесь
[26:04.480 --> 26:06.480]  и всё, что правее, заединичить.
[26:06.480 --> 26:08.480]  Но там и так уже одни единицы, кроме вот этого одного нуля,
[26:08.480 --> 26:10.480]  который самый младший.
[26:10.480 --> 26:12.480]  Это теперь будет младший 0,
[26:12.480 --> 26:14.480]  мы его заединичиваем,
[26:14.480 --> 26:16.480]  получили опять блок из единиц сплошной
[26:16.480 --> 26:18.480]  и получили опять новое значение.
[26:18.480 --> 26:20.480]  В итоге мы сделали
[26:20.480 --> 26:22.480]  ровно то, что хотели.
[26:22.480 --> 26:24.480]  Мы перебрали все такие начальные куски,
[26:24.480 --> 26:26.480]  пооставляли их, и всё, что находилось правее, мы заединичили.
[26:26.480 --> 26:28.480]  Там поставили одни единицы.
[26:28.480 --> 26:30.480]  И это просто будет число pos,
[26:30.480 --> 26:32.480]  geot-pos,
[26:32.480 --> 26:34.480]  geot-pos,
[26:34.480 --> 26:36.480]  ну и так далее.
[26:36.480 --> 26:38.480]  Мы просто берём младший 0 и его превращаем в единицу.
[26:38.480 --> 26:40.480]  И так до тех чисел,
[26:40.480 --> 26:42.480]  пока они вообще меньше чем n,
[26:42.480 --> 26:44.480]  они попадают в наш массив.
[26:44.480 --> 26:46.480]  Кажется, что всё.
[26:46.480 --> 26:48.480]  Мы вывели критерии того,
[26:48.480 --> 26:50.480]  какие нам нужны и,
[26:50.480 --> 26:52.480]  и показали, что функция g делает ровно это,
[26:52.480 --> 26:54.480]  что она перебирает все такие, которые нам подходят,
[26:54.480 --> 26:56.480]  и больше никакие.
[26:56.480 --> 26:58.480]  Заканчиваем степень блоки минус один.
[26:58.480 --> 27:00.480]  Нет, у Фенрика ещё такая прелесть,
[27:00.480 --> 27:02.480]  что здесь вообще не обязательно думать про...
[27:04.480 --> 27:06.480]  А, сейчас.
[27:06.480 --> 27:08.480]  Степень блоки минус один.
[27:12.480 --> 27:14.480]  Ну...
[27:14.480 --> 27:16.480]  Ну, кажется, не обязательно.
[27:18.480 --> 27:20.480]  Ну, например, смотрите,
[27:20.480 --> 27:22.480]  вот если у вас плен какой-нибудь вот такой,
[27:22.480 --> 27:24.480]  я сейчас какой-нибудь нарисую, да,
[27:24.480 --> 27:26.480]  а pos какой-нибудь вот такое.
[27:30.480 --> 27:32.480]  Сейчас, степень блоки минус один, да.
[27:36.480 --> 27:38.480]  Нет, нет, нет, секунду.
[27:38.480 --> 27:40.480]  Короче, не обязательно, не обязательно.
[27:40.480 --> 27:42.480]  Вот такой пример.
[27:42.480 --> 27:44.480]  n такое, pos такое.
[27:44.480 --> 27:46.480]  Вот.
[27:46.480 --> 27:48.480]  Значит, тогда вы закончите вот в этом числе,
[27:48.480 --> 27:50.480]  потому что, когда вы
[27:50.480 --> 27:52.480]  попытаетесь заединить этот
[27:52.480 --> 27:54.480]  младший нобик, то у вас получше число больше,
[27:54.480 --> 27:56.480]  чем n, и, соответственно, оно вылезает за границу массива,
[27:56.480 --> 27:58.480]  и...
[27:58.480 --> 28:00.480]  Это плохо, да, мы туда не идём.
[28:00.480 --> 28:02.480]  То есть, не обязательно в
[28:02.480 --> 28:04.480]  степень блоки минус один, то есть,
[28:04.480 --> 28:06.480]  не обязательно у вас там будут соединиться.
[28:06.480 --> 28:08.480]  Там, возможно, какие-то нули сохранятся.
[28:08.480 --> 28:10.480]  Но дело ограничено себя, что нельзя
[28:10.480 --> 28:12.480]  вылезать за длину массива.
[28:12.480 --> 28:14.480]  Потому что там нет числа, мы там
[28:14.480 --> 28:16.480]  сумму не определяем.
[28:16.480 --> 28:18.480]  Но это такое замечание, оно нам
[28:18.480 --> 28:20.480]  неважно.
[28:20.480 --> 28:22.480]  Так.
[28:22.480 --> 28:24.480]  Ну что, мы написали апдейт,
[28:24.480 --> 28:26.480]  и мы попутно поняли,
[28:26.480 --> 28:28.480]  что он работает за логарифм, за от логарифма,
[28:28.480 --> 28:30.480]  потому что сколько итерации работает наш
[28:30.480 --> 28:32.480]  форм, ну столько, сколько было нулей
[28:32.480 --> 28:34.480]  в исходном числе, потому что каждая
[28:34.480 --> 28:36.480]  итерация – это замена одного нуля
[28:36.480 --> 28:38.480]  в единицу, и значит, ну поскольку у меня
[28:38.480 --> 28:40.480]  всего в дуэчной записи логан бит,
[28:40.480 --> 28:42.480]  то, соответственно, каждый нуль может
[28:42.480 --> 28:44.480]  проявиться в единицу, и так всего максимум блок раз.
[28:44.480 --> 28:46.480]  Поэтому, суммарно, апдейт работает за от
[28:46.480 --> 28:48.480]  логарифма. Он перебирает все нужные
[28:48.480 --> 28:50.480]  и, работает за от логарифма,
[28:50.480 --> 28:52.480]  и всё хорошо. Мы целиком решили
[28:52.480 --> 28:54.480]  нашу задачу за логарифм на запас.
[28:54.480 --> 28:56.480]  Итог.
[28:56.480 --> 28:58.480]  Get some
[28:58.480 --> 29:00.480]  и апдейт
[29:02.480 --> 29:04.480]  работают за от логарифма.
[29:06.480 --> 29:08.480]  За от логарифма.
[29:08.480 --> 29:10.480]  И быстро пишутся.
[29:10.480 --> 29:12.480]  Что тоже немаловажно.
[29:12.480 --> 29:14.480]  Быстро пишутся.
[29:16.480 --> 29:18.480]  Можно ещё раз резюмировать, пожалуйста,
[29:18.480 --> 29:20.480]  почему эти замечательные функции
[29:20.480 --> 29:22.480]  решают нашу задачу?
[29:28.480 --> 29:30.480]  Так, почему они решают нашу задачу? Ну, потому что
[29:32.480 --> 29:34.480]  как бы это объяснить?
[29:34.480 --> 29:36.480]  Во-первых, потому что с ними всё сошлось.
[29:36.480 --> 29:38.480]  С ними так получилось, что
[29:38.480 --> 29:40.480]  они как бы друг
[29:40.480 --> 29:42.480]  через друга выражаются.
[29:42.480 --> 29:44.480]  Если суммы, которые мы определили,
[29:44.480 --> 29:46.480]  они на отрезке от f от и до и,
[29:46.480 --> 29:48.480]  то апдейт нужно делать по желуд
[29:48.480 --> 29:50.480]  и прыгать.
[29:50.480 --> 29:52.480]  С ними всё сходится, и с ними
[29:52.480 --> 29:54.480]  сложность будет логарифмическая.
[29:54.480 --> 29:56.480]  Видимо, вам
[29:56.480 --> 29:58.480]  хочется понять, почему мы их взяли,
[29:58.480 --> 30:00.480]  какой в них смысл.
[30:00.480 --> 30:02.480]  Ну, смысл как раз в
[30:02.480 --> 30:04.480]  двоичной записи. Давайте повторим.
[30:04.480 --> 30:06.480]  Что делает желуд и?
[30:06.480 --> 30:08.480]  Желуд и оно
[30:08.480 --> 30:10.480]  значит
[30:10.480 --> 30:12.480]  превращает
[30:12.480 --> 30:14.480]  младше ноль
[30:14.480 --> 30:16.480]  в единицу,
[30:16.480 --> 30:18.480]  а f от и
[30:18.480 --> 30:20.480]  за нуляет.
[30:22.480 --> 30:24.480]  Ну, вот как раз и хорошо понятно, что делает
[30:24.480 --> 30:26.480]  jet и f от и, но
[30:26.480 --> 30:28.480]  очень плохо понятно, что делает
[30:28.480 --> 30:30.480]  get prefix и update.
[30:30.480 --> 30:32.480]  А, хорошо. Ну, смотрите.
[30:32.480 --> 30:34.480]  f от и это какая-то функция меньше
[30:34.480 --> 30:36.480]  равная, чем i.
[30:36.480 --> 30:38.480]  Тогда что мы сделали на самом деле?
[30:38.480 --> 30:40.480]  Мы просто для каждой позиции
[30:40.480 --> 30:42.480]  знаем вот этого числа f от и,
[30:42.480 --> 30:44.480]  то есть для каждой i знаем f от и.
[30:44.480 --> 30:46.480]  А ещё мы знаем, мы храним же массив s.
[30:46.480 --> 30:48.480]  То есть мы на самом деле знаем сумму
[30:48.480 --> 30:50.480]  на другом отрезке.
[30:50.480 --> 30:52.480]  Для каждого i мы знаем сумму на отрезке
[30:52.480 --> 30:54.480]  с f от и до и.
[30:54.480 --> 30:56.480]  Вспоминаем дерево отрезков.
[30:56.480 --> 30:58.480]  Забыли про это. У нас было дерево отрезков,
[30:58.480 --> 31:00.480]  то есть мы знаем сумму с каких-то подотресков.
[31:00.480 --> 31:02.480]  Здесь то же самое, здесь суммы с каких-то подотресков
[31:02.480 --> 31:04.480]  они уже
[31:04.480 --> 31:06.480]  совсем не такие, как дерево отрезков,
[31:06.480 --> 31:08.480]  они управляют вот этой функцией f.
[31:08.480 --> 31:10.480]  То есть для каждой правой границы
[31:10.480 --> 31:12.480]  мы вычисляем левую границу f от и
[31:12.480 --> 31:14.480]  и на этом отрезке находим сумму.
[31:14.480 --> 31:16.480]  Соответственно, тогда get sum работает
[31:16.480 --> 31:18.480]  очень просто. Если мы знаем сумму на каких-то там
[31:18.480 --> 31:20.480]  отрезочках, то давайте посмотрим
[31:20.480 --> 31:22.480]  на отрезок, который заканчивается в i.
[31:22.480 --> 31:24.480]  Он начинается в f от и заканчивается в i.
[31:24.480 --> 31:26.480]  Мы знаем здесь сумму.
[31:26.480 --> 31:28.480]  Тогда давайте встанем вот в эту точку.
[31:28.480 --> 31:30.480]  Эта новая точка будет
[31:30.480 --> 31:32.480]  давайте я назову j. Она равна f от и
[31:32.480 --> 31:34.480]  минус 1.
[31:34.480 --> 31:36.480]  Тогда опять, если мы от точки j
[31:36.480 --> 31:38.480]  уже возьмем функцию f,
[31:38.480 --> 31:40.480]  то это будет опять какой-то отрезок, на котором мы знаем
[31:40.480 --> 31:42.480]  сумму. Левая граница будет
[31:42.480 --> 31:44.480]  f от j, правая граница будет j.
[31:44.480 --> 31:46.480]  Мы знаем на нем сумму. Давайте добавим
[31:46.480 --> 31:48.480]  ее к ответу. То есть мы знаем сумму
[31:48.480 --> 31:50.480]  здесь, взаим сумму здесь.
[31:50.480 --> 31:52.480]  Это там какие-то кусочки нашего ответа.
[31:52.480 --> 31:54.480]  Добавим их к ответу. Соответственно, будем
[31:54.480 --> 31:56.480]  отпрыгать, пока не пройдем
[31:56.480 --> 31:58.480]  весь префикс.
[31:58.480 --> 32:00.480]  Ну и все это сложим
[32:00.480 --> 32:02.480]  в ответ. Получится как раз
[32:02.480 --> 32:04.480]  таки сумма на префиксе.
[32:04.480 --> 32:06.480]  А ровно это мы хотим.
[32:06.480 --> 32:08.480]  Может быть лучше остановиться, когда мы достигнем левой
[32:08.480 --> 32:10.480]  границы и после этого посчитать
[32:10.480 --> 32:12.480]  f от этой границы.
[32:12.480 --> 32:14.480]  Точнее
[32:14.480 --> 32:16.480]  s.
[32:16.480 --> 32:18.480]  Ну мы можем
[32:18.480 --> 32:20.480]  залететь ее.
[32:20.480 --> 32:22.480]  Да-да-да. Значит, здесь мы
[32:22.480 --> 32:24.480]  смотрите, мы рассматриваем
[32:24.480 --> 32:26.480]  сумму на префиксе,
[32:26.480 --> 32:28.480]  потому что, да, если мы будем
[32:28.480 --> 32:30.480]  пытаться находить сумму на отрезке,
[32:30.480 --> 32:32.480]  то мы, к сожалению, с помощью этих стрелок можем
[32:32.480 --> 32:34.480]  перепрыгнуть за наш
[32:34.480 --> 32:36.480]  за левую границу. Вот если у меня были
[32:36.480 --> 32:38.480]  LER, мы, соответственно, в LER взяли какую-то
[32:38.480 --> 32:40.480]  такую сумму на отрезке, потом такую сумму на
[32:40.480 --> 32:42.480]  отрезке, потом взяли и попробовали такую,
[32:42.480 --> 32:44.480]  и здесь слишком много. То есть мы берем то, что
[32:44.480 --> 32:46.480]  не нужно. Значит, мне нужно вот эти вот точки
[32:46.480 --> 32:48.480]  отдельно добавить. Но их там может быть, к сожалению, слишком
[32:48.480 --> 32:50.480]  много, поэтому мы лучше
[32:50.480 --> 32:52.480]  вычтем сумму на префиксе
[32:52.480 --> 32:54.480]  до r, вот такую вот сумму,
[32:54.480 --> 32:56.480]  вычтем сумму на префиксе
[32:56.480 --> 32:58.480]  долю минус один, и получится
[32:58.480 --> 33:00.480]  рискомая сумма. А так прыгать мы уже умеем. То есть мы
[33:00.480 --> 33:02.480]  когда допрыгаем до нуля,
[33:02.480 --> 33:04.480]  мы явно за начало массива не перепрыгнем.
[33:04.480 --> 33:06.480]  Такой проблем уже не будет.
[33:08.480 --> 33:10.480]  Мне просто показалось, что мы
[33:10.480 --> 33:12.480]  дважды вычисляем одно и то же.
[33:14.480 --> 33:16.480]  Да вроде нет, мы вычисляем
[33:16.480 --> 33:18.480]  по одному разу сумму на двух разных префиксах,
[33:18.480 --> 33:20.480]  а потом их вычитаем.
[33:20.480 --> 33:22.480]  Функция G
[33:22.480 --> 33:24.480]  Функция G, что еще раз?
[33:24.480 --> 33:26.480]  Функция G
[33:26.480 --> 33:28.480]  Зачем тут?
[33:28.480 --> 33:30.480]  Функция G для апдейта. Значит F мы используем
[33:30.480 --> 33:32.480]  в GetSum.
[33:32.480 --> 33:34.480]  Функцию G мы используем
[33:34.480 --> 33:36.480]  в Update.
[33:36.480 --> 33:38.480]  Потому что, смотрите, повторяемся,
[33:38.480 --> 33:40.480]  если у меня... Как работает
[33:40.480 --> 33:42.480]  Update? Update предполагает, что у вас пришло
[33:42.480 --> 33:44.480]  какое-то изменение в точке. Вот есть какая-то
[33:44.480 --> 33:46.480]  позиция pos, и в ней число изменилось
[33:46.480 --> 33:48.480]  на вал. То есть там было какое-то число x,
[33:48.480 --> 33:50.480]  стало x плюс вал.
[33:50.480 --> 33:52.480]  Хорошо. Но мы тогда
[33:52.480 --> 33:54.480]  хотим обновить некоторые значения в массиве
[33:54.480 --> 33:56.480]  s. То есть у меня есть массив s,
[33:56.480 --> 33:58.480]  где хранится сумма на каких-то подотресочках.
[33:58.480 --> 34:00.480]  И теперь мне нужно, соответственно, какие-то
[34:00.480 --> 34:02.480]  из них пересчитать. Какие из них
[34:02.480 --> 34:04.480]  изменились? Ну вот ровно те, которые
[34:04.480 --> 34:06.480]  вот такие, что i лежит где-то справа,
[34:06.480 --> 34:08.480]  а f лежит где-то слева.
[34:08.480 --> 34:10.480]  Вот такие отрезки.
[34:10.480 --> 34:12.480]  Раньше мы
[34:12.480 --> 34:14.480]  описали все такие i,
[34:14.480 --> 34:16.480]  которые лежат правее, чем pos,
[34:16.480 --> 34:18.480]  и для которых эта стрелочка как бы перепрыгивает
[34:18.480 --> 34:20.480]  через pos. И с помощью
[34:20.480 --> 34:22.480]  функции g мы их все перебрали. То есть
[34:22.480 --> 34:24.480]  мы доказали, что если перебрать
[34:24.480 --> 34:26.480]  в качестве i значения pos,
[34:26.480 --> 34:28.480]  g вот pos,
[34:28.480 --> 34:30.480]  g вот g вот pos и так далее, то есть
[34:30.480 --> 34:32.480]  все много раз навешивают g, пока мы не
[34:32.480 --> 34:34.480]  перевалимся, как бы не перейдем за границу
[34:34.480 --> 34:36.480]  массива справа. Во всех таких
[34:36.480 --> 34:38.480]  отрезках и только в них присутствует
[34:38.480 --> 34:40.480]  точка pos. И, соответственно, в них
[34:40.480 --> 34:42.480]  во всех нужно s и t увеличить на вал.
[34:42.480 --> 34:44.480]  Потому что туда входит число
[34:44.480 --> 34:46.480]  pos, оно увеличивается, его
[34:46.480 --> 34:48.480]  нужно учесть. Но раз оно изменилось, то и
[34:48.480 --> 34:50.480]  сумма на отрезки тоже изменилась.
[34:54.480 --> 34:57.480]  Массив из нориков и единиц — это массив чего?
[34:57.480 --> 34:59.480]  Это битовое представление.
[34:59.480 --> 35:01.480]  То, что я тут рисовал, всегда было битовое
[35:01.480 --> 35:03.480]  представление. Это битовое представление
[35:03.480 --> 35:05.480]  числа. Какого-то числа конкретного?
[35:05.480 --> 35:07.480]  Вот здесь, например. И я
[35:07.480 --> 35:09.480]  рисую вот такой прямоугольничек
[35:09.480 --> 35:11.480]  и 0.1.1. Это значит, что
[35:11.480 --> 35:13.480]  там какие-то есть старшие биты,
[35:13.480 --> 35:15.480]  потом есть бит 0, потом 1.
[35:15.480 --> 35:17.480]  Я имею в виду то, что мы же изначально
[35:17.480 --> 35:19.480]  имели массив, а как мы пришли к битовому
[35:19.480 --> 35:21.480]  представлению? Битовому представлению чего?
[35:23.480 --> 35:25.480]  У каждого натурального числа есть его
[35:25.480 --> 35:27.480]  битовое представление. В смысле, двоечная запись.
[35:27.480 --> 35:29.480]  И чтобы понимать,
[35:29.480 --> 35:31.480]  как работает функция f,
[35:31.480 --> 35:33.480]  как работает функция g. Ну вот, например,
[35:33.480 --> 35:35.480]  вот здесь я поставил перед собой вопрос, как
[35:35.480 --> 35:37.480]  работает функция g, как действует функция g.
[35:37.480 --> 35:39.480]  Значит, для этого я
[35:39.480 --> 35:41.480]  рассматриваю аргумент, беру какое-то произвольное i.
[35:41.480 --> 35:43.480]  Представляю i в двоечной записи. Вот тогда
[35:43.480 --> 35:45.480]  могу его как-то так нарисовать.
[35:45.480 --> 35:47.480]  Ну и понимаю, что g
[35:47.480 --> 35:49.480]  берет вот это вот. То есть чем отличается
[35:49.480 --> 35:51.480]  i от g o t? В чем отличие?
[35:51.480 --> 35:53.480]  В том, что мы взяли вот этот младший ноль
[35:53.480 --> 35:55.480]  и его превратили в единицу.
[35:55.480 --> 35:57.480]  Это такое описание того, как действует функция g.
[35:57.480 --> 35:59.480]  Это не преобразование
[35:59.480 --> 36:01.480]  чисел в массиве, это просто
[36:03.480 --> 36:05.480]  ну просто действие функции
[36:05.480 --> 36:07.480]  на каждом конкретном индексе. Если было
[36:07.480 --> 36:09.480]  и то, останется g o t, который отличается
[36:09.480 --> 36:11.480]  изменением одного бита.
[36:13.480 --> 36:15.480]  И получается, что
[36:15.480 --> 36:17.480]  массивы сытых — это массив каких-то
[36:17.480 --> 36:19.480]  частичных сумм.
[36:21.480 --> 36:23.480]  На подресках, да. Да.
[36:23.480 --> 36:25.480]  И они могут пересекаться.
[36:25.480 --> 36:27.480]  Да, могут пересекаться спокойно.
[36:27.480 --> 36:29.480]  Никаких требований на них нет.
[36:31.480 --> 36:33.480]  Если вопрос в чате
[36:33.480 --> 36:35.480]  про то, как мы изначально заполняем
[36:35.480 --> 36:37.480]  массив s, изначально
[36:37.480 --> 36:39.480]  его заполнить можно, например, следующим образом.
[36:39.480 --> 36:41.480]  Ну, я называю это построение.
[36:43.480 --> 36:45.480]  Построение
[36:45.480 --> 36:47.480]  s. Ну, смотрите, давайте изначально
[36:47.480 --> 36:49.480]  скажем, что массив из нулей состоит.
[36:49.480 --> 36:51.480]  Да, что наш a, что наш s
[36:51.480 --> 36:53.480]  целиком из нулей состоит.
[36:53.480 --> 36:55.480]  И потом просто сделаем
[36:55.480 --> 36:57.480]  n-n апдейтов.
[36:57.480 --> 36:59.480]  Для всех i от 0 до n
[37:01.480 --> 37:03.480]  мы сделаем апдейт
[37:03.480 --> 37:05.480]  и a i t.
[37:07.480 --> 37:09.480]  Тогда, соответственно,
[37:09.480 --> 37:11.480]  в каждой ячейке у меня
[37:11.480 --> 37:13.480]  из нуля мы получим
[37:13.480 --> 37:15.480]  нужно на мне число a i t, то есть то,
[37:15.480 --> 37:17.480]  которое есть там
[37:17.480 --> 37:19.480]  во входном массиве.
[37:19.480 --> 37:21.480]  И заодно мы обновим все нужные
[37:21.480 --> 37:23.480]  значения в массиве s.
[37:23.480 --> 37:25.480]  Заодно мы обновим все нужные
[37:25.480 --> 37:27.480]  суммы в массиве s.
[37:27.480 --> 37:29.480]  Ну, например, так. Это работает за n log n,
[37:29.480 --> 37:31.480]  потому что у меня n апдейтов всего, и каждый апдейт
[37:31.480 --> 37:33.480]  будет за логарифом.
[37:33.480 --> 37:35.480]  Быстрее нельзя?
[37:35.480 --> 37:37.480]  Можно, но
[37:37.480 --> 37:39.480]  не обязательно, потому что у нас все равно
[37:39.480 --> 37:41.480]  будет куча запросов. Каждый запрос у нас все равно
[37:41.480 --> 37:43.480]  будет за логарифом.
[37:43.480 --> 37:45.480]  И, то есть,
[37:45.480 --> 37:47.480]  если мы все равно на запрос встречаем за логарифом
[37:47.480 --> 37:49.480]  и запросов там обычно больше, чем n,
[37:49.480 --> 37:51.480]  поэтому это не очень принципиально.
[37:51.480 --> 37:53.480]  Но, в принципе, можно. Можно построить массив
[37:53.480 --> 37:55.480]  префиксных сумм на a.
[37:55.480 --> 37:57.480]  Массив префиксных сумм.
[37:57.480 --> 37:59.480]  И тогда s i t это
[37:59.480 --> 38:01.480]  префиксная сумма i t
[38:01.480 --> 38:03.480]  минус префиксная сумма
[38:03.480 --> 38:05.480]  f i t − 1.
[38:05.480 --> 38:07.480]  Потому что если я знаю, скажем, сумму от
[38:07.480 --> 38:07.980]  нулевого элемента до i t
[38:07.980 --> 38:09.980]  я знаю сумму от нулевого элемента
[38:09.980 --> 38:11.980]  до ф i − 1,
[38:11.980 --> 38:13.980]  то сумма
[38:13.980 --> 38:15.980]  с f i t до i t элемента — это как раз такая
[38:15.980 --> 38:17.480]  разность.
[38:17.480 --> 38:19.480]  Ну, массив префиксных сумм мы уже знаем, что такое.
[38:19.480 --> 38:21.480]  Это сумма нескольких первых элементов от нулевого
[38:21.480 --> 38:23.480]  до какого-то, соответственно, здесь
[38:23.480 --> 38:25.480]  от нулевого до i t, здесь
[38:25.480 --> 38:27.480]  от нулевого до вот этого f i t − 1,
[38:27.480 --> 38:33.480]  как раз лежат ровно те числа, которые нужно положить в сумму. Ну вот так взяли и за open получается.
[38:39.480 --> 38:42.480]  Чем больше еще раз почему это работает?
[38:44.480 --> 38:50.480]  Ну смотрите, переход от А к массиву перегрузки на сумму работает так, что мы говорим, что при f it
[38:51.480 --> 38:55.480]  эта сумма чисел от 0 до it, а 0 после так далее плюс a it.
[38:57.480 --> 39:02.480]  Это считается за o at n. Суммарно массив перегрузки на сумму можно считать за o at n. Мы на первой лекции это делали.
[39:03.480 --> 39:07.480]  Массив перегрузки на сумму считаем, и теперь мы за o at 1 можно найти сумму на любом отрезке.
[39:08.480 --> 39:12.480]  Ну в исходном массиве, без изменений. Если нет изменений, то за o at 1 любая сумма мне доступна.
[39:13.480 --> 39:16.480]  Потому что пусть есть какой-то отрезок с l power.
[39:18.480 --> 39:25.480]  И я знаю, ну то есть с перегрузкой на сумму мы как-то рассуждали, что есть вот такая сумма от 0 индекса до r.
[39:25.480 --> 39:28.480]  Есть вот такая сумма от 0 до l-1.
[39:29.480 --> 39:32.480]  Тогда их разность, это как раз сумма на отрезке l.
[39:33.480 --> 39:38.480]  Теперь вместо r возьмите i, и вместо l возьмите f at. Да, просто f at.
[39:39.480 --> 39:46.480]  В итоге, значит, сумма на отрезке, которая нам нужен, это в точности pref it minus pref f i-1.
[39:47.480 --> 39:53.480]  Здесь надо не забыть, что s it это что такое? Это сумма по всем g от f i до i ожитого.
[39:55.480 --> 39:59.480]  Просто какая сумма на отрезке? Сумма на отрезке мы умеем рассчитать за 1 с помощью pref sum.
[40:08.480 --> 40:17.480]  Так, ну что, когда едем дальше, значит нам нужно точно, собственно, то, что я обещал, это обобщение на большей размерности.
[40:18.480 --> 40:24.480]  Обобщение на большие размерности.
[40:25.480 --> 40:33.480]  Ну, например, если у нас есть какая-нибудь прямоугольная табличка, давайте квадратно, я буду рисовать.
[40:34.480 --> 40:39.480]  Есть табличка n на n. Соответственно, в каждой клетке стоит какое-то число.
[40:40.480 --> 40:47.480]  Так, еще вопросик. Постояние минимум за n log n, когда… Нет, я вот только что объяснил алгоритм за n.
[40:47.480 --> 40:54.480]  Мы почитали pref с суммой, потом разностями на отрезках, знаем всех сетей.
[40:55.480 --> 40:59.480]  Это заот n было. Только n log n – это обычный апдейт.
[41:05.480 --> 41:07.480]  Да, это дерево Фенвика было.
[41:07.480 --> 41:14.480]  Ну, почему оно так называется, я тут не могу ничего сказать, но Фенвик – это, видимо, автор или один из разработчиков, по крайней мере.
[41:15.480 --> 41:24.480]  Вот, где здесь дерево? Дерево тут, конечно, довольно тяжело уловить, но, в общем, там можно также с большей натяжкой, но можно представить это все в виде дерева.
[41:25.480 --> 41:32.480]  И также, как у нас было в ДО, сказать, что сумма в вершине – это сумма в поддереве, но это там не очень красивая конструкция получается.
[41:32.480 --> 41:42.480]  Мне проще так рассказывать, просто давайте вот это называть деревом Фенвика и боксом, да, то есть почему именно так называется – это, я считаю, не принципиально для решения задач, для понимания, что происходит.
[41:43.480 --> 41:51.480]  Аналогия с деревом здесь, я считаю, не помогает. Ну так вот, значит… Нет, видимо, нет. Вот, отлично.
[41:51.480 --> 41:59.480]  Значит, есть у меня табличка. На вершине ИТ строки ежитого славца стоит число АИТ-ежитое. И опять есть два типа запросов.
[42:00.480 --> 42:05.480]  Есть update в точке, то есть по позиции ИИЖ и числу ВАЛ нужно сделать АИТ-ежитое плюс равно ВАЛ.
[42:06.480 --> 42:12.480]  И второе – это getSum, но getSum уже не на отрезке, а на подправке.
[42:12.480 --> 42:31.480]  То есть если мне дали какие-нибудь четыре числа L1, R1, L2, R2, давайте я вот так вот веду координаты, да, то есть здесь возрастание И, здесь возрастание G, тогда мне могут дать какой-то вот такой прямоугольник, дать его координаты левого верхнего угла L1, R1 и правого нижнего, L2, R2.
[42:31.480 --> 42:41.480]  Соответственно, теперь сумма уже не на отрезке, а на подпрямоугольнике, который задается своими двумя координатами двух концов – левый, нижний, правый, верхний.
[42:42.480 --> 42:50.480]  Ну, сразу давайте заметим, что сумма на подпрямоугольнике произвольном, она сводится к сумме на таком префиксном прямоугольнике.
[42:50.480 --> 43:04.480]  Потому что, смотрите, вот давайте я нарисую прямоугольник, на котором мы ищем сумму, вот что-нибудь такое. Давайте тогда мы возьмем сумму вот на таком прямоугольнике с левым верхним углом вот здесь, ну, то есть возьмем вот такой прямоугольник.
[43:04.480 --> 43:14.480]  Тут, понятное дело, много лишнего, в частности, можно вот этот прямоугольник вычесть и вот этот прямоугольник вычесть.
[43:15.480 --> 43:19.480]  Но тогда левый верхний угол мы вычтем дважды, давайте его обратно прибавим.
[43:19.480 --> 43:33.480]  И тогда как раз, смотрите, значит, это мы учли один раз, давайте поставлю сюда плюсик, мы учли один раз от вот этого вот красного прямоугольника самого внешнего.
[43:34.480 --> 43:41.480]  И все эти числа будут в сумме. Дальше, это мы вычли один раз, потому что один раз мы учили, по сути, мы учили только этот, ну этот прямоугольник, который мы учили.
[43:41.480 --> 43:47.760]  раз от этого вот красного шitungенского бетонда с самого внешнего и �оторATTë в сумме, дальше
[43:47.760 --> 43:54.480]  этого уже 추ли 1 раз потому что 1 раз прибавили что ли это мы прибавили 1 раз от самого внешнего
[43:54.480 --> 43:59.660]  прямогольника и вычистит 1 раз, estudу вот это синие кавинника соответственно все cyclist
[43:59.660 --> 44:05.960]  используются 0 д resistance то самое вот здесь 1 раз прибавили 1 раз вышли ну в левом верхнем
[44:05.960 --> 44:10.940]  будет два раза прибавили, два раза вычли. Поэтому в итоге, когда мы так сложим все,
[44:10.940 --> 44:14.880]  ну то есть с правильными коэффициентами плюс-минус, мы сложим все вот эти вот 4
[44:14.880 --> 44:18.960]  рефиксные суммы, у нас будет ответ на нужно мне прямоугольник. То есть все вот это
[44:18.960 --> 44:23.000]  как бы сократится, все слагаемые там попарно сократятся и останется только
[44:23.000 --> 44:27.320]  нужная мне сумма на нужном прямоугольнике. Вот, в итоге поняли, что вот это вот
[44:27.320 --> 44:38.240]  сводится к, я напишу get pref сам, или это просто соответственно найти сумму на
[44:38.240 --> 44:46.360]  прямоугольнике с левым верхним концом 0,0, а правым нижним lr. Все прямоугольники
[44:46.360 --> 44:50.880]  можно решать такие рефиксные, что у них левый верхний угол f0,0. Похоже на то, что мы делали раньше,
[44:50.880 --> 44:56.240]  когда говорили префикс в массиве, это какой-то начальный отрезок, то есть отрезок
[44:56.240 --> 45:00.800]  с левой границы 0, правой границы где угодно. Здесь тоже самое, правая граница где угодно,
[45:00.800 --> 45:08.520]  а левая граница в 0,0. Ну вот, соответственно свели запрос к префиксным суммам. Ну хорошо,
[45:08.520 --> 45:13.680]  тогда давайте обобщим, собственно, наше предыдущее решение на двумерный случай.
[45:13.680 --> 45:29.520]  Пусть s и t же t, это такая сумма. Сумма по u от f от i до i, сумма по v от f от g до g,
[45:29.520 --> 45:40.320]  а у t в t. То есть я просто отдельно независимо перебираю все u от f от i до i, и v отдельно
[45:40.320 --> 45:46.480]  перебираю независимо от f от g до g. И все числа, которые попали и по первой границе,
[45:46.480 --> 45:52.320]  и по второй в нужные отрезки, я складываю. И у меня получается вот такой вот s, s, s и g.
[45:52.320 --> 46:02.280]  То есть можно, давайте опять нарисуем наш табличку. Если у меня есть произвольная строка i и
[46:02.280 --> 46:09.280]  произвольный столб s и g, здесь есть какая-то ячейка, то сумма s и g, это вот такое. Мы можем
[46:09.280 --> 46:17.760]  посчитать f gt, мы можем посчитать f it, провести вот такие вот две полосочки отсекающие. И
[46:17.760 --> 46:24.320]  соответственно, то, что лежит в пересечении наших двух полосок, это как раз s и t gt. Это в точности
[46:24.320 --> 46:29.360]  тех числах, у которых первая координата лежит в отрезке по i, то есть по первой координате,
[46:29.360 --> 46:35.120]  вторая координата тоже лежит в отрезке от f житого до g. Вот, мы так это определяем.
[46:35.120 --> 46:38.640]  Да, вопрос.
[46:38.640 --> 46:44.480]  Лев, после подсчета s мы удаляем. Ну, если хотите, удаляем, да.
[46:44.480 --> 46:55.080]  Ну, больше нам он не понадобится. Ну, вообще, еще раз повторюсь, достаточно за n log n все
[46:55.080 --> 46:59.400]  всегда строить, то есть ничего страшного не будет, если вы за n log n построите вместо того,
[46:59.400 --> 47:04.120]  чтобы строить за o at n, потому что у нас все равно на каждый вопрос будет ответ за логарифом. И
[47:04.120 --> 47:08.680]  из-за того, что вы вначале делаете n log n предпочет какой-то, ничего страшного не будет.
[47:08.680 --> 47:20.600]  Ну, так вот, значит, тогда как отвечать на get prev sum? Get prev sum для индексов там LR. Ну,
[47:20.600 --> 47:27.160]  очень просто. Давайте, значит, вот есть у меня там какая точка LR. Давайте я отдельно,
[47:27.160 --> 47:35.080]  независимо, по одной координате применю вот этот, ну, много раз f, применить f-1, применить f-1,
[47:35.080 --> 47:40.960]  применить f-1. И то же самое по второй. То есть разобью вот такие вот стрелочки по каждой из
[47:40.960 --> 47:45.560]  координат, по каждой из осей. Ну, и дальше, соответственно, мне нужны будут суммы во всех
[47:45.640 --> 47:52.160]  таких вот прямоугольниках. Я получаю такую сеточку, и мне нужны будут сумма во всех
[47:52.160 --> 47:55.760]  прямоугольниках. И все это нужно будет сложить. Соответственно, тогда код будет следующим.
[47:55.760 --> 48:05.280]  Ans равно 0. Для всех i от L и не отрицательно i равно f от i-1. То есть такая же строчка,
[48:05.280 --> 48:15.960]  как у нас была раньше. Потом для всех j от R, j больше на 0, j равно f от j-1. То же самое только
[48:15.960 --> 48:28.440]  для другой переменной. Мы к ответу прибавляем s и t jt. В итоге отличие минимальное. У нас просто
[48:28.440 --> 48:33.640]  появилось два вложенных цикла вместо одного. Цикл по одной координате, цикл по другой координате,
[48:33.640 --> 48:37.920]  и причем они вот так вот, именно независимые, что отдельно первая координата пробегает все
[48:37.920 --> 48:44.720]  возможные вот эти вот, все вот эти вот отрезочки по i, и отдельно вторая, все отрезочки по j. В итоге
[48:44.720 --> 48:50.200]  мы как раз складываем сумму из всех таких прямоугольников, на которые разбилась, ну,
[48:50.200 --> 48:53.840]  то есть вот эта вот сетка разбивается на такие прямоугольники, и из каждого из них мы там считаем
[48:53.840 --> 48:58.200]  сумму, и все это складываем в ответ. В каждом прямоугольнике своя сумма, мы все их сложили,
[48:58.200 --> 49:07.120]  и прибавили к ответу. Получается работает за лог квадрат, потому что по каждой координате у нас
[49:07.120 --> 49:12.360]  логарифм отрезков, в итоге в пресечении у меня получается лог квадрат прямоугольников. Ну вот,
[49:12.360 --> 49:18.960]  а апдейт точно также работает, значит, мне нужно понять в каких, то есть если у меня происходит
[49:18.960 --> 49:27.080]  изменение в какой-то точке там x, y, допустим, то мне нужно понять, каковы такие i, что точка x,
[49:27.080 --> 49:33.360]  y лежит в полоске по i, и каковы такие g, что x, y лежит в полоске по g, то есть, да, по
[49:33.360 --> 49:37.320]  стройкоординате. Это те же самые условия, причем они независимые, отдельные условия на i,
[49:37.320 --> 49:44.600]  отдельные условия на g, и мы все такие должны перебрать. Почему нужно прямоугольник вытворить
[49:44.600 --> 49:52.800]  срок по границам сетки? Я имею в виду, нужный нам ответ, что будет проходить по границам, то,
[49:52.800 --> 50:01.720]  что он не будет меньше или больше, чем нужны границы. То есть как мы получаем ответ? Вот так.
[50:01.720 --> 50:11.800]  Вот алгоритм. Ответ – это сумма на прямоугольнике, у которого левая верхняя точка – это 0,0. Вот,
[50:11.800 --> 50:15.480]  собственно, это важно, что у него левая верхняя точка – это 0,0, а правая нижняя – это какая-то
[50:15.480 --> 50:22.320]  точка LR. Нет, но мы свели эту задачу из условия того, что мы можем проводить любой многоугольник,
[50:22.320 --> 50:26.000]  мы же не говорили, что мы можем проводить многоугольник только по границе, а здесь мы
[50:26.000 --> 50:32.320]  можем посчитать только для многоугольника, который мы можем провести по границе. Границы – это что такое?
[50:32.320 --> 50:42.080]  То, что штриховано. То, что штриховано. Значит, смотрите, нет, мы можем, если у меня LR – произвольная
[50:42.080 --> 50:48.960]  точка, то я могу с помощью вот этого кода найти сумму на этом прямоугольнике. Вот почему. Давайте
[50:48.960 --> 50:56.280]  вспоминаем, как работают у меня вот эти стрелочки и как проводятся пунктирные эти рёбра. Значит, вот
[50:56.280 --> 51:04.720]  есть у меня число L – это нижняя координата по И, по Х. Я считаю f от L – это какое-то число такое,
[51:04.720 --> 51:13.120]  которое меньше обравно, чем оно, и я провожу такую пунктирную линию выше, чем f от L. Дальше
[51:13.120 --> 51:21.560]  вот здесь будет число f от L – 1. Я беру опять от него f и провожу какую-то линию. То есть у меня,
[51:21.560 --> 51:28.480]  по сути, ровно вот это происходит. У меня И так. Я перегираю И, которое изначально равно L,
[51:28.480 --> 51:34.480]  не отрицательно, и я к И применяю при образовании f от L – 1. Тогда понятно, что я вот так отсекаю
[51:34.480 --> 51:41.200]  линии и вверху ровно добью до 0. То есть последняя стрелка будет вот такая, поскольку я всегда не
[51:41.200 --> 51:47.240]  отрицательный, f от L тоже всегда будет не отрицательным. Соответственно, все эти отрезки – это как раз
[51:47.240 --> 51:53.880]  разбиение какое-то. Вот такое разбиение. Потом то же самое происходит с g. Вот такое разбиение какое-то
[51:53.880 --> 52:02.800]  другое. В каждом прямоугольнике я знаю сумму, поэтому никаких проблем тут нет. Тут нам пришла
[52:02.800 --> 52:13.080]  историческая справка, я так понимаю. Да, это двумерный фенрик. Сейчас апдейк я напишу,
[52:13.080 --> 52:20.360]  давайте апдейк напишем. Я просто не успеваю начать отвечать. Фенрик, нет, фенрик отдельно будет,
[52:20.360 --> 52:29.120]  это именно двумерный фенрик. Значит, апдейк как работает? апдейк с точки x, на число вал. Работает
[52:29.120 --> 52:41.000]  так. Давайте я сначала напишу то, что я хочу делать. Представляем, что axy увеличилось на вал.
[52:41.000 --> 52:52.400]  Тогда вопрос, какие с и g поменялись? Какие с и g изменяются? Ну, ровно следующее. Что, во-первых,
[52:52.400 --> 53:01.280]  x должно лежать в отрезке от fe до i, а y должно лежать в отрезке от fg до j. Ну, просто потому,
[53:01.280 --> 53:07.400]  что с и tg это как раз отрезок, ну, точнее сумма в прямоугольнике, где первая координата от fe
[53:07.400 --> 53:15.400]  до i, а вторая координата от fg до j. Ну, поэтому вот ровно такие условия. Если только, если выполняются
[53:15.400 --> 53:21.240]  такие условия, то мне нужно с и tg увеличить на вал. Значит, соответственно, мне нужно отдельно
[53:21.240 --> 53:26.120]  перебрать i независимо, отдельно независимо перебрать g из этого условия, и в каждой такой
[53:26.120 --> 53:32.920]  ячейке увеличить сумму на вал. Пишем так же, как у нас было в одномерном случае. Чтобы перебрать
[53:32.920 --> 53:42.440]  все i, удовлетворяющие вот этому условию, я пишу for i от x до n. i равно g от i. Это будет все i,
[53:42.440 --> 53:47.000]  подходящие под первое условие. Дальше внутри я перебираю все g, подходящие под второе условие.
[53:47.000 --> 54:02.720]  Это вот такой цикл. g равно g от g. А n это что? Ну, размер нашей квадратной таблички. Мы считаем,
[54:02.720 --> 54:08.880]  что она n. А квадратная? Ну, если она прямоугольная, то здесь будет просто другая сторона.
[54:08.880 --> 54:18.280]  Почему объединяем в систему, а не в совокупность? Ну, потому что вспоминаем, что такое s и tg. Это
[54:18.280 --> 54:32.280]  сумма по u, сумма по v, а у v, где u от f от i до i. И здесь вот f от g до g. Тогда вопрос, какие такие
[54:32.280 --> 54:43.160]  i и g могут быть, что вот здесь вот одно из слагаемых, это axy. Ну, ровно вот такие. Какие такие
[54:43.160 --> 54:49.480]  i и g, что в этой сумме есть слагаемая axy? Ну, это в точности означает, что вот в этом промежутке,
[54:49.480 --> 54:58.320]  то есть от f от i до i есть x. И еще в отрезке от f от g до g есть y. Вот получается система.
[54:58.320 --> 55:04.200]  Все, получили тоже залог квадрата обновления. Залог квадрата.
[55:10.720 --> 55:16.680]  Ну и, соответственно, если вдруг нужно еще больше размеров, там трехмерная, четырехмерная. Вот в
[55:16.680 --> 55:22.000]  контесте как раз кстати есть задача на трехмерного фенлика. Там вот просто три вложных цикла пишете,
[55:22.000 --> 55:27.800]  и все отлично работает. Не нужно никакой трехмерно деревоотресков. Здесь так же все очень-очень
[55:27.800 --> 55:31.520]  эффективно по памяти, потому что, по сути, мы не заводим дополнительную память. У нас, как бы,
[55:31.520 --> 55:37.280]  все на том месте, где исходный был массив, можно на нем все хранить. То есть не нужна до памяти
[55:37.280 --> 55:46.280]  эффективно с точки зрения константа, потому что здесь очень много битовых операций. Вот этот
[55:46.280 --> 55:51.560]  всякий g и f от i. Они все очень простые, потому что они битовые. И соответственно,
[55:52.360 --> 56:07.120]  ну в общем, сплошное удовольствие. Так, ладно. Это был фенлик обычный и двумерный. Я не знаю,
[56:07.120 --> 56:18.000]  название для fg, не знаю. Ну, кстати, когда мы будем для двумерного фенлика строить исходно
[56:18.000 --> 56:24.280]  и осытые житы, здесь уже, наверное, существенное, что мы должны выбирать оптимальный вариант.
[56:24.280 --> 56:34.320]  Что такое оптимальный вариант? Ну, за сколько мы будем строить массив двумерные сытые житы?
[56:34.320 --> 56:44.320]  Ну, можно также с помощью n квадрата апдейтов за n квадрат лог квадрат. Это же плохо. Ну, может
[56:44.320 --> 56:56.280]  быть, да, здесь я больше с вами соглашусь, потому что может быть такое, что... Ну, хотя... Ну,
[56:56.280 --> 57:00.880]  да, да, да. Наверное, грубо говоря, если у вас табличка там, не знаю, тысяча на тысячу и всего
[57:00.880 --> 57:04.240]  потом десять пятый запросов, то, наверное, n квадрата лог квадрата лучше не умножать,
[57:04.240 --> 57:08.600]  а просто q лог квадрата умножать. Да, то есть число запросов значит лог квадрата. Да,
[57:08.600 --> 57:13.080]  наверное. Ну, тогда вот можно эти префиксные суммы ввести. То же самое. То есть префиксная сумма
[57:13.080 --> 57:19.080]  на табличке — это сумма в прямоугольнике, где левый верхний угол — это 0,0, а правый нижний — это
[57:19.080 --> 57:24.480]  вот произвольная точка ижи. Там пересчитывается очень похожим образом, и соответственно,
[57:24.480 --> 57:28.360]  зная все префиксные суммы, мы сумму на любом под прямоугольнике тоже можем заводить не
[57:28.360 --> 57:33.640]  судно. Тогда построение будет за квадрат. Ну, а скорее я про то, что в задачах на ногомерном
[57:33.640 --> 57:40.920]  фенрике обычно у вас исходный массив заполнен нулями. И кажется, задача в контесте ровно так,
[57:40.920 --> 57:44.960]  что у вас изначально все ашки в нули, соответственно, все ски можно считать нулями,
[57:44.960 --> 57:55.720]  и потом уже поступает запрос тип апдейтов. Ну да, это важно, это хороший вопрос, но почему-то это
[57:55.720 --> 58:01.280]  никогда не нужно. То есть что обычно хватает либо просто написать за лог квадрат кучу апдейтов,
[58:01.280 --> 58:09.080]  либо вообще изначально все нули, поэтому делать нечего. Ну вот, хорошо, давайте тогда пойдем дальше,
[58:09.200 --> 58:21.720]  и наверное мы обсудим другие операции, другие функции, ну скорее другие операции, кроме суммы.
[58:21.720 --> 58:31.880]  Что вот, например, пусть нам не нужно, нам нужно искать не всему на отрезке, а что-нибудь другое.
[58:31.880 --> 58:36.880]  Ну, например, произведение. Например, нам нужно искать не get сам, а get product,
[58:36.880 --> 58:45.800]  и соответственно отрезка lr. Это просто найти произведение чисел al, al plus 1 и так далее.
[58:45.800 --> 58:52.920]  Скажите, пожалуйста, можно ли эту задачу решать похожим образом на то, что мы делали до этого?
[58:52.920 --> 59:06.280]  Раньше у нас была сумма, которая решалась суммой слишком большого количества, потом вычитанием
[59:06.280 --> 59:12.280]  ненужных. Сейчас у нас произведение, где мы умножаем слишком много, а потом делим на ненужные.
[59:12.280 --> 59:23.280]  Все правильно, мы просто считаем префикс. Есть же логарифм еще, просто тогда все линейно.
[59:23.280 --> 59:32.640]  Но с нулем тоже проблема, если у вас есть, если одно из чисел 0, то логарифм от него...
[59:32.640 --> 59:41.680]  Давайте скажем, что у нас нет нулей. В общем, вопрос здесь скорее на просуждать,
[59:41.680 --> 59:48.280]  чем на написать. Давайте я все-таки скажу что-нибудь, что можно посчитать префиксы и все произведения.
[59:48.280 --> 59:55.000]  Точно так же мы будем считать произведение на префиксе, а не на отрезке. И тогда, соответственно,
[59:55.000 --> 59:59.240]  если я знаю произведение на отрезке от 0 до r и произведение на отрезке от 0 до l minus 1,
[59:59.240 --> 01:00:04.080]  тогда нужно одно поделить на другое и вернуть ответ. Здесь, конечно, куча проблем, что, во-первых,
[01:00:04.080 --> 01:00:10.200]  с нулями, что если тут есть 0, то нельзя делить на 0. Во-вторых, что числа могут быть слишком большие
[01:00:10.200 --> 01:00:19.640]  и не помещаться ни в лунг-лунг, ни куда. В-третьих, что... Хочется верить, что влезет.
[01:00:19.640 --> 01:00:26.400]  Да, ну и, собственно, с делением. Если мы переходим к каким-то логарифмам или к доблам,
[01:00:26.400 --> 01:00:30.800]  то, возможно, мы посчитаем ответ не точно. Какая-то погрешность, густошка большая.
[01:00:30.800 --> 01:00:40.400]  Короче, тут все не очень хорошо. Лунг-лунг хватает для того, чтобы просто перейти в логарифм.
[01:00:40.400 --> 01:00:46.080]  Ну, зависит от задачи, конечно. Скажем так, можно сделать так, чтобы не хватало.
[01:00:46.080 --> 01:00:56.320]  Можно сделать так, чтобы не хватало. Вот. Ну, хорошо. Ну, то есть с произведением там худа,
[01:00:56.400 --> 01:01:03.520]  можно разобраться. А что делать с максимумом? GetMaximum на отрезке. Если мне нужно найти на
[01:01:03.520 --> 01:01:14.360]  отрезке lr, найти максимум. l, и так далее, ar. То здесь сюжет все хуже, потому что даже зная
[01:01:14.360 --> 01:01:20.520]  максимум на таком префексе и на таком префексе, я максимум на этом отрезке никак не выясню.
[01:01:20.520 --> 01:01:25.440]  Скажем, если здесь есть какое-нибудь суперогромное число, там 10, 9, то оно будет участвовать в обоих
[01:01:25.440 --> 01:01:31.080]  префиксах, и это нам не даст никакой информации о том, какой именно здесь максимум. Поэтому,
[01:01:31.080 --> 01:01:34.840]  ну, по крайней мере такая же идея не работает, что нельзя знать максимум на двух префиксах и
[01:01:34.840 --> 01:01:40.400]  оттуда как-то извлечь ответ. Вот. Ну, на помощь приходит так называемое обратное дерево фенвика.
[01:01:40.400 --> 01:01:56.240]  Обратное дерево фенвика. Оно определяется следующим образом. Напомню, это старое у нас было
[01:01:56.240 --> 01:02:07.600]  s.i.t. Это сумма по j от fi до i ожитого. Сорри, сумма, да. Давайте сразу на максимум построим.
[01:02:07.600 --> 01:02:19.640]  Максимум по всем j от fa3 до i ожитого. Значит, это обычное прямое как бы дерево,
[01:02:19.640 --> 01:02:30.120]  прямое дерево фенвика. И вводим обратное s.i.t. Это максимум на отрезке, сейчас внимательно,
[01:02:30.120 --> 01:02:44.440]  очень странное условие, от i плюс 1 до j от i ожитого. Вот i плюс 1 до j от i. Смотрите,
[01:02:44.440 --> 01:02:50.240]  вот это прямое обычное дерево фенвика, оно для каждой правой границы считает какой-то
[01:02:50.240 --> 01:02:55.040]  максимум направо, на каком-то вот таком отрезке. Правая граница фиксирована, левая какая там fa3.
[01:02:55.040 --> 01:03:00.840]  Обратное дерево, оно действует наоборот. Оно стартует в позиции i плюс 1. Важно здесь именно i
[01:03:00.840 --> 01:03:06.480]  плюс 1. Не i, а i плюс 1. И идет в противоположную сторону, куда-то направо, в сторону увеличения.
[01:03:06.480 --> 01:03:11.080]  Потому что j от i всегда больше равно, чем i плюс 1, потому что оно его содержит в качестве
[01:03:11.760 --> 01:03:20.080]  дизюнкта. И или i плюс 1. И соответственно мы будем считать максимум вот на этом отрезке.
[01:03:20.080 --> 01:03:24.680]  То есть как бы идет в обратную сторону. Если мы раньше прыгали налево, в сторону
[01:03:24.680 --> 01:03:29.960]  уменьшения координат, то теперь будем прыгать в сторону увеличения. И тогда решение будет
[01:03:29.960 --> 01:03:48.200]  следующим. Если у меня есть наш массив, и мне нужно найти максимум на каком-то таком отрезке.
[01:03:48.200 --> 01:03:56.080]  Давайте тогда сначала встанем в правую границу и будем прыгать влево, пока это осмысленно. То
[01:03:56.080 --> 01:04:00.960]  есть взяли f от r, видим, что это нас оставляет внутри нашего отрезка. Перепрыгиваем,
[01:04:00.960 --> 01:04:05.040]  знаем здесь максимум. То есть на этом отрезке нам максимум извести. Дальше поднимемся налево,
[01:04:05.040 --> 01:04:09.200]  опять прыгаем куда-нибудь сюда, знаем здесь максимум. Тут все хорошо, мы находимся внутри
[01:04:09.200 --> 01:04:17.160]  отрезка. Но допустим в следующей точке f от правой границы уже куда-то выскакивает. Тогда понятно,
[01:04:17.160 --> 01:04:21.040]  что нам нет смысла, нам нельзя брать максимум на этом отрезке, потому что здесь есть какие-то
[01:04:21.040 --> 01:04:26.040]  недопустимые нам числа. Все, тогда мы останавливаем наши прыжки влево и больше этого не делаем. И
[01:04:26.040 --> 01:04:33.800]  начинаем движение навстречу. Встаем в левую границу, давайте я буду считать, что у меня задно все на пол
[01:04:33.800 --> 01:04:40.320]  интервале, задно все на пол интервале, и левая граница у меня не включена, вот так, не включена.
[01:04:40.320 --> 01:04:48.440]  Тогда, значит, я хочу прыгать как бы навстречу из левой границы. Ну как раз у меня, если я возьму
[01:04:48.440 --> 01:04:53.960]  слт штрих, это как раз максимум на каком-то таком вот отрезке, который начинается в l плюс 1,
[01:04:53.960 --> 01:04:59.200]  заканчивается там g от l, это какой-то такой максимум. То есть я возьму так, так прыгну. В общем так
[01:04:59.200 --> 01:05:04.200]  несколько раз попрыгаю, знаете, все максимумы. И в идеале хотелось бы, чтобы я закончил как
[01:05:04.200 --> 01:05:09.840]  раз в той точке, из которой не получился тот большой прыжок. В идеале я дойду до сюда,
[01:05:09.840 --> 01:05:14.600]  и у меня как раз все числа ровно по одному разу задействуются. Все числа ровно по одному разу.
[01:05:14.600 --> 01:05:21.840]  Вот. Если это так, то получится, что все хорошо. И здесь тоже понятно, что это работать будет за
[01:05:21.840 --> 01:05:26.040]  логарифм на запрос, потому что я сначала в правой границе прыгаю максимум логарифм раз,
[01:05:26.040 --> 01:05:30.040]  потом левой навстречу максимум логарифм раз. Они как раз склеились, и получилось у нас,
[01:05:30.040 --> 01:05:35.360]  что весь наш исходный отрезок разбивается на несколько, в каждом из которых я знаю максимум.
[01:05:35.360 --> 01:05:47.280]  Давайте покажем, что так это и будет работать. Покажем, покажем, что если из текущей правой
[01:05:47.280 --> 01:06:00.480]  границы, правой границы, так сейчас давайте допишу, потом вопрос почитаю, нельзя прыгнуть влево,
[01:06:06.240 --> 01:06:23.400]  то встречное движение слева направо. Сейчас, а если мы, скажем, самым первым прыжком из R мы
[01:06:23.400 --> 01:06:34.360]  перепрыгиваем L. Тогда мы ни одного прыжка из R не делаем. То есть мы прыгаем только столько раз,
[01:06:34.360 --> 01:06:42.240]  пока мы не вываляемся из отрезка. Окей, ладно, хорошо. Еще раз, как мы прыгаем. Смотрите,
[01:06:42.240 --> 01:06:48.560]  мы встали в правую точку, в R, и прыгаем влево по вот этим вот стрелочкам F, то есть применяем F,
[01:06:48.560 --> 01:06:54.960]  пока мы не вываливаемся из отрезка LR. Просто прыгнули, посмотрели, мы еще в отрезке LR,
[01:06:54.960 --> 01:07:01.720]  целиком в отрезке LR, если целиком, то обновляем наш максимум и продолжаем прыгать. Так прыгаем,
[01:07:01.720 --> 01:07:09.080]  прыгаем, то есть как обычно, вот это будет F от R, следующая точка это будет F от R-1, потом применяем
[01:07:09.080 --> 01:07:14.760]  опять F, смотрим, если эта точка лежит в отрезке, то берем максимум и продолжаем прыгать. Прыгаем,
[01:07:14.760 --> 01:07:19.320]  прыгаем справа налево. Потом допрыгались для такого, что мы не можем переблюднуть влево,
[01:07:19.320 --> 01:07:24.040]  оставаясь в отрезке, то есть мы куда-то туда перепрыгиваем, что вообще я вываливаюсь из отрезка LR.
[01:07:24.040 --> 01:07:30.280]  Тогда я начинаю встречное движение, встаю в точку L и беру вот эти вот максимумы, как бы встречные,
[01:07:30.280 --> 01:07:35.000]  буду двигаться слева направо по таким отрезкам, то есть из L я перехожу как бы в G от L,
[01:07:35.000 --> 01:07:39.280]  потом в G от G от L и так далее, и соответственно у меня вот встречные вот такие вот отрезочки,
[01:07:39.280 --> 01:07:43.280]  и я утверждаю, что они в конце обязательно схлопнутся. То есть когда, если я не смог
[01:07:43.280 --> 01:07:48.960]  прыгнуть влево, то потом встречное движение как раз закончится в той точке, из которой я не смог
[01:07:48.960 --> 01:07:56.320]  сделать прыжок налево. Так, и вот это мы сейчас докажем. Сейчас покажем, что если из текущей
[01:07:56.320 --> 01:08:00.920]  правой границы L, то есть когда я вот так вот L раздвигаю и она стала вот сюда, если нельзя
[01:08:00.920 --> 01:08:12.880]  прыгнуть влево, то встречное движение слева направо закончится L. Ну, давайте напишем условия того,
[01:08:12.880 --> 01:08:18.560]  что мы не можем из текущей правой границы сделать прыжок. Ну, во-первых, должно быть L больше
[01:08:18.560 --> 01:08:24.480]  чем L, потому что иначе напоминаю, что мы сейчас как бы на пол интервале ждем, что левая граница
[01:08:24.480 --> 01:08:36.280]  не включена, а правая включена. Смотрите, здесь не явно, я имею в виду, что когда я вот так вот
[01:08:36.280 --> 01:08:41.920]  прыгаю, я двигаю правую границу запроса, потому что если L вот здесь, то я могу посчитать максимум
[01:08:41.920 --> 01:08:48.080]  на вот этом отрезке, на красном отрезке, и правую границу сдвинуть сюда. Опять, здесь знаю максимум,
[01:08:48.080 --> 01:08:53.160]  обновляю ответ и правую границу сдвигу сюда. То есть L вот динамически, оно изменяющееся.
[01:08:53.160 --> 01:09:01.840]  Так вот, значит, когда вообще вот получилось так, что я не могу прыгнуть влево. Во-первых,
[01:09:01.840 --> 01:09:05.600]  L больше чем L, потому что должны быть хоть какие-то здесь числа, иначе мы уже все
[01:09:05.600 --> 01:09:16.760]  просмотрели и делать ничего не надо. Во-вторых, f от R меньше либо равно L. То есть вот этот прыжок отсюда-сюда,
[01:09:16.760 --> 01:09:24.240]  он ведет либо в L, либо левее, потому что L как бы не включено у нас. Если f от R меньше
[01:09:24.240 --> 01:09:29.160]  либо равно, чем L, то как раз получается мы вывалились из нашего отрезка, из вот этого отрезка мы вывалились.
[01:09:29.160 --> 01:09:43.120]  Ну и тогда я утверждаю, что в этом случае обязательно g от L меньше либо равно R. То есть,
[01:09:43.120 --> 01:09:47.960]  если мне как бы еще есть что делать, если R больше чем L, то есть пока остались какие-то
[01:09:47.960 --> 01:09:52.680]  непокрытые точки, я обязательно смогу вот здесь выделить какой-то отрезок на нем,
[01:09:53.040 --> 01:09:58.080]  и соответственно перейти дальше. И так у меня будет работать, пока у меня R больше чем L. То есть,
[01:09:58.080 --> 01:10:02.640]  пока есть хотя бы один непокрытый элемент. Это как раз то самое условие нашей корректности. То есть,
[01:10:02.640 --> 01:10:08.320]  мы сначала прыгали направо, и потом пока есть живые точки, мы прыгаем, так извините,
[01:10:08.320 --> 01:10:12.920]  неправильно сказал, мы сначала прыгаем справа налево, уменьшаем R, уменьшаем R, уменьшаем R,
[01:10:12.920 --> 01:10:17.920]  потом в момент, когда не можем этого сделать, делаем следующее. Пока есть непокрытые точки,
[01:10:18.000 --> 01:10:23.160]  вот эти вот непокрытые точки, мы сдвигаем левую границу. Сдвигаем, сдвигаем, сдвигаем вот по этому
[01:10:23.160 --> 01:10:29.440]  правилу, что L переходит в g от L. И утверждается, что пока есть непокрытые, обязательно будет ход,
[01:10:29.440 --> 01:10:34.600]  то есть будет такой ход, который не перекрывает наш отрезок, то есть не вылезает за нашу правую
[01:10:34.600 --> 01:10:42.680]  границу. Вот, ну давайте докажем. Значит, опять мы пишем битовое представление, то есть записываем
[01:10:42.680 --> 01:10:52.720]  L и R в личной системе. Давайте напишем L и R в личной системе, то есть сначала будет где-нибудь L.
[01:10:52.720 --> 01:10:59.520]  То есть мы таким образом, получается, можем пропрыгать несколько раз, как бы, вот в основном
[01:10:59.520 --> 01:11:05.560]  мы прыгали влево, потом вправо, потом опять влево. Нет, нет, нет. Сначала много прыжков влево,
[01:11:05.560 --> 01:11:15.720]  потом много прыжков вправо, и всё, они сошлись. Итак, значит, мы пишем опять двоичную запись.
[01:11:15.720 --> 01:11:20.360]  Сначала напишем L, давайте какую-нибудь такую, потом R. У них есть какой-то общий префикс,
[01:11:20.360 --> 01:11:26.280]  общий префикс в личной записи. Ну, соответственно, раз R больше, чем L, то у меня здесь где-то стоит
[01:11:26.280 --> 01:11:31.480]  единица, здесь ноль, ну а справа уже что угодно. Потому что если одно число больше, чем другое,
[01:11:31.480 --> 01:11:35.320]  то в двоичной записи у них сколько первых битов совпадают. Я имею в виду, что я их
[01:11:35.320 --> 01:11:39.400]  дополняю до одного числа разрядов. Всегда я считаю, что у меня там все числа пишутся
[01:11:39.400 --> 01:11:45.960]  с одинаковым числом бит. Если меньше, то дополняется нуля. Вот, значит, у них какие-то префиксы
[01:11:45.960 --> 01:11:51.560]  совпадают. Потом, поскольку R больше, чем L, здесь стоит единица в первом бите, где они
[01:11:51.560 --> 01:11:57.280]  отличаются, а здесь стоит ноль. Ну а справа уже неважно, что у меня уже выполняется, что R больше, чем L.
[01:11:57.280 --> 01:12:06.600]  Окей, значит, тогда что такое f'R? Вспоминаем, вспоминаем. Это, кажется, зануление последнего
[01:12:06.600 --> 01:12:12.640]  блока из единиц. То есть мы смотрим на младшие биты, смотрим, кто из них единицы до первого нуля,
[01:12:12.640 --> 01:12:18.280]  и все вот эти вот младшие единицы зануляем. Но тогда, смотрите, если вот здесь вот есть справа,
[01:12:18.280 --> 01:12:24.280]  есть где-то какой-то ноль, то эта единица сохранится. Потому что если здесь был ноль,
[01:12:24.280 --> 01:12:29.080]  соответственно, там какие-то единицы, то только они могли занулиться, а эта единица останется,
[01:12:29.080 --> 01:12:36.080]  как бы, неизменной. Она всегда сохранится. И тогда вот этого уже не может быть. Потому что f'R не
[01:12:36.080 --> 01:12:40.760]  может быть меньше, чем L, потому что здесь уже будет единица, которая обеспечивает то, что f'R
[01:12:40.760 --> 01:12:46.960]  больше, чем L. Значит, единственная возможность выполнения вот этого неравенства, вот этого
[01:12:46.960 --> 01:12:54.280]  неравенства, это следующее. Когда все единицы, все позиции правее, чем вот эта единица, тоже
[01:12:54.280 --> 01:13:00.440]  единицы, что здесь все единицы, тогда f'R это, соответственно, зануление всех вот этих вот единичек.
[01:13:00.440 --> 01:13:08.000]  И даже вот эта вот единица, где происходит различие между L и R. Ну и слева здесь еще что-то. То есть
[01:13:08.000 --> 01:13:11.600]  здесь там, возможно, еще какие-то были единицы, они тоже занулились здесь. Ну, соответственно,
[01:13:11.600 --> 01:13:18.640]  здесь тоже самое. Тут как бы что-то происходит. Но главное, что из вот этого условия, что f'R меньше
[01:13:18.640 --> 01:13:25.800]  равно, чем L, следует, что R заканчивается вот таким длинным блоком из единиц. Так, и теперь нам
[01:13:25.800 --> 01:13:34.960]  хочется понять, что gOtL меньше равномерно, чем R. Давайте вспомним, что такое gOtL. gOtL это взять
[01:13:34.960 --> 01:13:43.040]  младший нолик и его сделать единицей. Взять младший нолик и его сделать единицей. Ну, тогда вот
[01:13:43.040 --> 01:13:47.920]  это, собственно, почти очевидно, потому что как здесь тогда gOtL? Если, скажем, здесь есть какой-то
[01:13:47.920 --> 01:13:53.360]  нолик, тогда мы просто его меняем на единицу, и получается число, как бы здесь такое же, здесь будет
[01:13:53.360 --> 01:13:59.160]  один, ну и там тоже куча единиц. Понятно, что gOtL будет меньше равно, чем R, потому что эти общие
[01:13:59.160 --> 01:14:03.760]  препиксы у них сохранились. Здесь остался ноль, здесь остался единица, поэтому gOtL даже будет
[01:14:03.760 --> 01:14:10.000]  меньше, чем R. Ну, а если мы представим, что у меня правее этого нуля стоят все единицы, и,
[01:14:10.000 --> 01:14:15.120]  соответственно, я меняю вот этот вот нолик у меня будет младшим, тогда я поменяю его на единицу,
[01:14:15.120 --> 01:14:21.680]  и будет, ну, одно и то же число, что у меня будет gOtL равно будет просто R, потому что у них есть
[01:14:21.680 --> 01:14:28.680]  общий префикс, потом просто куча единиц. Ну и всё. В итоге мы получили действительно, что за счет
[01:14:28.680 --> 01:14:32.640]  того, что, повторюсь, вот здесь стоит куча единичек, неважно, что мы будем менять вот здесь
[01:14:32.640 --> 01:14:38.320]  в любой ноле, какой мы там не поменяем, всё равно получится число не больше, чем R, поэтому выполнять
[01:14:38.320 --> 01:14:46.240]  это такое не нравится. Вот. Ну и отсюда следует наш алгоритм. Давайте я его сейчас напишу,
[01:14:46.240 --> 01:14:57.040]  только если у меня получится перенести как-то. Сейчас, одну секунду. Так.
[01:15:02.640 --> 01:15:15.480]  Всё, это мы доказали. Теперь как выглядит код. Значит, нам нужно находить, напомню,
[01:15:15.480 --> 01:15:22.440]  максимум на отрезке. Давайте изначально скажем, что, давайте напишем функцию getMax,
[01:15:22.440 --> 01:15:29.160]  на отрезке LR, да. Значит, как это работает? Сначала мы говорим, что ans это какая-нибудь там
[01:15:29.160 --> 01:15:33.080]  минус бесконечность, то есть нейтральный элемент относительно вот этого максимума,
[01:15:33.080 --> 01:15:37.320]  то есть такое число, которое явно заменится, как только мы возьмём первый максимум. Значит,
[01:15:37.320 --> 01:15:45.280]  следующее пишем, да, что, во-первых, видимо, я хочу сделать, нет, давайте буду считать,
[01:15:45.280 --> 01:15:51.640]  что мы находим как бы на полуинтервале, на полуинтервале, ответ на полуинтервале. Тогда,
[01:15:51.640 --> 01:15:58.400]  while, R больше чем L, то есть пока, в принципе, есть хоть одно неиспользованное число,
[01:15:58.400 --> 01:16:08.200]  и можно прыгнуть влево, то есть F от R больше чем L, пока из правой границы можно прыгнуть налево.
[01:16:08.200 --> 01:16:20.160]  Значит ans равно максимум из ans и S от R и, соответственно, R равно F от R минус 1.
[01:16:20.160 --> 01:16:27.560]  Это вот наше обычное преобразование R, что мы прыгаем по F, уменьшаем на 1, и на этих отрезках
[01:16:27.560 --> 01:16:34.280]  взяли максимум. Это были прыжки справа налево. Теперь прыжки слева направо. Пока, опять-таки,
[01:16:34.280 --> 01:16:39.520]  R больше чем L, то есть пока есть хотя бы одно неиспользованное число в отрезке, ну и здесь даже
[01:16:39.520 --> 01:16:44.160]  никакое второе условие дополнительное не нужно, потому что у меня уже вот это вот выполняется,
[01:16:44.160 --> 01:16:47.920]  то есть поскольку я вышел из первого цикла, то у меня обязательно рушилось вот это вот неравенство,
[01:16:47.920 --> 01:16:52.000]  значит оно выполняется, и здесь никого дополнительное условие не нужно. Я просто говорю,
[01:16:52.000 --> 01:17:04.000]  что ans равно максимум из ans и S от R, L равно G от R. Все. Вот так, фигурная скопочка.
[01:17:04.000 --> 01:17:22.000]  Вот, ну вроде все. И мы, собственно, доказали, что вот этот вайл, он как раз-таки будет работать
[01:17:22.000 --> 01:17:27.880]  ровно столько, то есть ровно столько итераций до тех пор, пока у меня весь отрезок не исчерпается,
[01:17:27.880 --> 01:17:31.640]  пока я его целиком не накрою маленькими вот этими отрезочками, которые все покрывают,
[01:17:31.640 --> 01:17:39.800]  которые целиком покрывают все элементы моего отрезка LR по одному разу. Ну вот, понятно,
[01:17:39.800 --> 01:17:46.600]  что это работает тоже в завод логарифма, потому что здесь у меня наше преобразование R переходит
[01:17:46.600 --> 01:17:51.320]  в FTR минус один, это мы уже доказываем, что работает максимум лог раз, здесь другое
[01:17:51.320 --> 01:17:55.480]  преобразование встречное L переходит в G от L, это тоже максимум лог раз, ну и, соответственно,
[01:17:55.480 --> 01:18:01.640]  а симпатику будет лог N. Как это помогает нам не учитывать какие-нибудь большие элементы правее
[01:18:01.640 --> 01:18:12.800]  LR? Правее LR. Ну вот, смотрите, это условие мы же вывели, это означает, что когда я прыгаю
[01:18:12.800 --> 01:18:21.120]  из L куда-то, я не вылезаю за гринд с нашего отрезка LR. Значит, все, что находится правее,
[01:18:21.120 --> 01:18:30.960]  просто никак не поучаствуй, потому что G от L гранищена R и все. Мы для этого доказывали,
[01:18:30.960 --> 01:18:37.320]  что мы сначала слева направо не перепрыгаем, а потом справа налево, пока есть неутеченные
[01:18:37.320 --> 01:18:41.280]  элементы, мои прыжки не будут вылезать за правую границу, они всегда будут внутри,
[01:18:41.280 --> 01:18:47.920]  пока целиком не покроют весь отрезок. То есть, получается, нам нужно две разные S для того,
[01:18:47.920 --> 01:18:53.360]  чтобы мы могли работать с двумя разными видами перемещения в массивы. Да, именно так, S и С.
[01:18:53.360 --> 01:19:04.360]  Так, зачем первое условие в первом цикле? Не нужно, да, вы хотите сказать, потому что оно
[01:19:04.360 --> 01:19:12.480]  автоматически из первых и из второго следует, что если ftr больше, чем L, ну тогда, например,
[01:19:12.480 --> 01:19:20.160]  здесь нужно написать, хотя бы пока R больше либо равно нуля. Хотя бы это нужно написать,
[01:19:20.160 --> 01:19:30.080]  потому что если у вас R становится нулем, тогда f от нуля это ноль, и вы зациклитесь,
[01:19:30.080 --> 01:19:34.160]  скорее всего. То есть, без этого условия плохо, да, мы не хотим брать f от отреза от
[01:19:34.720 --> 01:19:38.840]  Ну, можно писать так, можно писать R больше, тут не важно. Давайте напишем R больше нуля.
[01:19:38.840 --> 01:19:50.240]  Так, ну, время у нас почти вышло, давайте я оставлю в качестве упражнения update. То есть,
[01:19:50.240 --> 01:20:03.920]  мы сделали get max за логарифм. Ой. Так, я подумал, там мне прислали какое-то сообщение. Значит,
[01:20:03.920 --> 01:20:18.680]  давайте, конечно, упражнение update на s штрих. Значит, мы умеем делать update на s, потому что,
[01:20:18.680 --> 01:20:25.920]  собственно, ну, также как обычно, да, мы там делали update с точки увеличения числа какого-то на вал,
[01:20:25.920 --> 01:20:32.840]  и тогда, как бы, s я обновляю точно так же. Я знаю множество отрезков, в которых лежало изменяемое
[01:20:32.840 --> 01:20:38.040]  число. Соответственно, там нужно пересчитать s. Похоже будет тоже с с штрихом, там нужно будет
[01:20:38.040 --> 01:20:45.720]  тоже применять функцию f, чтобы прыгать по нужным мне отрезочкам. И там все тоже делится с логарифм.
[01:20:45.720 --> 01:20:53.480]  Нет, l, к сожалению, как минимум, оно может минус 1, потому что мы на полу интервалах все делаем.
[01:20:53.480 --> 01:21:08.840]  Разница такая, значит, s вот и это максимум. Вот такой. Максимум на отрезке влево. То есть,
[01:21:08.840 --> 01:21:14.320]  в каждой правой, в каждом, до каждой правой границы есть какой-то прыжок влево. А s штрих,
[01:21:14.320 --> 01:21:33.000]  это прыжок вправо из и плюс 1. У вас в чем разница? Мы используем оба. Нам нужны прыжки из права
[01:21:33.000 --> 01:21:37.120]  налево и слева направо. То есть, мы сначала несколько прыжков. Чтобы сделать get max на отрезке,
[01:21:37.120 --> 01:21:41.000]  мы сначала делаем несколько прыжков справа налево, потом несколько встречных слева направо.
[01:21:41.000 --> 01:21:50.840]  Нам нужно и то, и то. Так, хорошо. Но здесь есть такое одно неприятное обстоятельство,
[01:21:50.840 --> 01:21:58.280]  что чтобы уметь делать апдейт, замечание, апдейт у меня несколько будет обрезанных,
[01:21:58.280 --> 01:22:07.080]  апдейт не полный. Почему? Потому что апдейт может быть только такой, который увеличивает числа.
[01:22:07.080 --> 01:22:12.120]  То есть, как у меня было раньше, у меня был аппост плюс равно балл, теперь у меня, соответственно,
[01:22:12.120 --> 01:22:18.400]  может поменяться как-то число. Но такие апдейты могут работать только, если я как бы число
[01:22:18.400 --> 01:22:22.840]  могу только увеличиваться. То есть, либо остается на месте, либо увеличивается. То есть, как бы,
[01:22:22.840 --> 01:22:29.000]  ну, max равно с чем-то. Могу только увеличить. Только увеличение. Потому что иначе, если, скажем,
[01:22:29.000 --> 01:22:34.400]  у меня запросы были бы, то есть апдейты были бы просто изменения в точке, не увеличение,
[01:22:34.680 --> 01:22:37.720]  а произволеннее изменение. То есть, возможного уменьшения. Тогда, к сожалению, все может
[01:22:37.720 --> 01:22:42.920]  сломаться. Потому что, если у меня есть какой-то максимум на на отрезке, то есть вот, ну, я знал
[01:22:42.920 --> 01:22:49.120]  какой-то максимум на отрезке от f от i до i. То есть, я знал s и t. Потом пришел здесь какой-то
[01:22:49.120 --> 01:22:55.800]  пост, изменившийся. И да, там не знаю, он был семеркой, стал тройкой. Но тогда я, в общем случае,
[01:22:55.800 --> 01:23:01.160]  не знаю, какой стал новый максимум. Потому что, если он раньше был максимум, и был какой-то
[01:23:01.160 --> 01:23:07.320]  второй максимум пятерка и это семерку упало до тройки, то у меня как бы максимум он изменился,
[01:23:07.320 --> 01:23:12.560]  и при этом изменился непредсказуемым образом. Мне нужно взять как бы исключить это число pos из
[01:23:12.560 --> 01:23:18.360]  отрезка и взять как бы второй максимум, то есть без него. Но мы не хотим хранить второй максимум,
[01:23:18.360 --> 01:23:22.880]  потому что там где второй максимум, там и третий, там и четвертый и так далее, и вообще все числа
[01:23:22.880 --> 01:23:31.080]  на отрезке. Поэтому тут не получится сделать иначе, кроме как поставить ограничение на запросы,
[01:23:31.080 --> 01:23:38.080]  что числа только растут. Числа не могут убывать, иначе к сожалению наш фенлик, он не может находить,
[01:23:38.080 --> 01:23:43.840]  ну он не знает как меняется максимум на отрезке, когда изменяется только одно число. Если вы знали
[01:23:43.840 --> 01:23:49.160]  максимум в предыдущем момент времени, потом изменилось одно число, максимум тогда непонятно,
[01:23:49.160 --> 01:23:53.520]  как поменяется. Возможно в какое другое число вообще сместиться, и его непонятно как искать.
[01:23:53.520 --> 01:23:58.960]  Вот поэтому мы считаем, что числа только увеличиваются. Тогда как раз все корректно,
[01:23:58.960 --> 01:24:04.560]  тогда неважно, то есть нам не нужно никакой второго максимум, просто у нас был старый
[01:24:04.560 --> 01:24:08.760]  максимум, если увеличилось какое-то число, там не значит семерки до десятки, тогда мы просто старый
[01:24:08.760 --> 01:24:13.240]  максимум пытаемся обновить десяткой, и тогда он либо такой как был раньше, либо стал десяткой.
[01:24:13.240 --> 01:24:20.920]  Вот в случае, когда все числа увеличиваются, то максимум можем легко обновлять. Так, вроде все.
[01:24:20.920 --> 01:24:30.400]  Я понимаю, что мы на вал в этот раз не увеличиваем на, а именно делаем такое значение.
[01:24:30.400 --> 01:24:35.440]  Да, да, ну или типа можно сказать увеличиваем на, но тогда увеличиваем на не отрицательное число,
[01:24:35.440 --> 01:24:40.120]  можно так. Либо вот как я написал, максимум равно, то есть либо увеличиваем до вал,
[01:24:40.120 --> 01:24:49.160]  либо оставляем на месте. Это как год, но мне так удобно представлять, что не прибавление чего-то
[01:24:49.160 --> 01:24:54.960]  не отрицательного, а увеличение, ну то есть максимум равно, то есть либо оставим, либо сделали больше до
[01:24:54.960 --> 01:25:07.440]  какого-то значения. Так. У нас, то есть мы, еще раз, мы не можем уменьшать, собственно,
[01:25:07.440 --> 01:25:19.760]  элементы массива, да? Да, только увеличение. Вот, значит, резюме. Фенвик чуть менее мощный,
[01:25:19.760 --> 01:25:26.960]  чем деревоотресков, потому что, если мы вспомним обычные деревоотресков и вспомним наши запросы в стиле
[01:25:26.960 --> 01:25:32.320]  там плюс равно в точке и максимум на отрезке, то деревоотреска решает эту задачу на раз-два,
[01:25:32.320 --> 01:25:37.680]  не задумываясь там, мы просто храним в каждой вершине максимум по дереве, а по дереве с точки
[01:25:37.680 --> 01:25:44.440]  пересчитывается тривиально. То есть, по сути, никакого выигрыша мы не получили, кроме, ну,
[01:25:44.440 --> 01:25:51.400]  значит, быстродействия, потому что здесь больше битов операции, здесь нет никакой рекурсии спусков
[01:25:51.400 --> 01:25:58.720]  по деревоотресков, то есть это быстрее, но и проще пишется, потому что здесь меньше всяких вот там,
[01:25:58.720 --> 01:26:05.280]  ну, спуск деревеотресков, там нужно считать координаты детей, как разбивается отрезок и так далее,
[01:26:05.280 --> 01:26:10.600]  то есть просто меньше кода. Да, он более тяжелый с точки зрения понимания, с точки зрения как бы
[01:26:10.600 --> 01:26:17.800]  вспоминаний, там вот эти функции f, g, их много-много, они много раз используются, тяжело это запомнить или
[01:26:17.800 --> 01:26:23.320]  понять, но кода меньше, кода меньше, эффективнее, быстрее, все такое, но, к сожалению, сильно менее,
[01:26:23.320 --> 01:26:32.240]  как бы это сказать, короче, горизонт решаемых задач сильно меньше, чем в деревеотресках. Вот такая
[01:26:32.240 --> 01:26:46.880]  моя мораль. Ой, Финнеке, Финнеке мы не успели, да? Ну, получается, туда, в следующий раз. Сейчас, с умножением можно делать так же, как с Макшеном. Да, можно также встречно Финнеке написать, да.
[01:26:46.880 --> 01:26:52.120]  Есть какие-то операции, которые можно делать на деревеотресках, но нельзя делать в срочных объектах?
[01:26:52.120 --> 01:27:01.440]  Ну, то есть, обдаить, понятно, накладывает некоторое учение, но вот, если мне не хватит, именно...
[01:27:10.440 --> 01:27:17.640]  Сейчас, ну, например, на время раз ГЦД непонятно, как работать, наибольший высшеделитель на отрезке, например, наибольший
[01:27:18.160 --> 01:27:26.640]  высшеделитель в деревеотресках считается просто, а вот Финнеке тоже непонятно. То есть, Финнек работает только с такими операциями, которые после изменения одного числа
[01:27:26.640 --> 01:27:33.000]  предсказуемо себя ведут. То есть, если мы знаем, скажем, результат до, и знаем, как бы, одно число, то мы знаем результат после.
[01:27:33.000 --> 01:27:42.440]  Вот, например, с наибольшим общеделителем так не получится, потому что там нужно как бы знать разложение всех чисел и понимать, то есть, если, например, у меня число раньше делилось на B4 перестало,
[01:27:43.240 --> 01:28:02.240]  то надо понять, делится ли хотя бы какое-нибудь другое число на отрезке на P. Это непонятно, как делать, то есть, в общем, ну, тут все-таки, я бы сказал, что все-таки Финнек умеет сильно меньше, там, типа, минимум, максимум, сумму произведения, что-нибудь такое, совсем простое базово.
[01:28:04.240 --> 01:28:10.240]  При провалении на отрезке там, на самом деле, есть техника, но мы ее уже не будем рассматривать, возможно, я в семинаре включен.
[01:28:11.040 --> 01:28:15.040]  layer]. Если у нас обратной дерево Финнек и glaSpace, то в нем нулевое число меня lifity не Нулевое.
[01:28:17.040 --> 01:28:23.040]  А у нас нет проблем с нулевыми числами, а, сейчас, нулевое число меня ace не Нулевое.
[01:28:24.040 --> 01:28:34.040]  А можно просто считать количество нулей на отрезке, можно считать количество нулей на отрезке, тогда, а, считать количество нулей и произведения всех нуoths хранить.
[01:28:34.040 --> 01:28:40.360]  количество нырей и произведение всех ненулевых, тогда изменение нуля на ниноль, это просто уменьшить
[01:28:40.360 --> 01:28:45.720]  количество нырей и умножить произведение на что-то, и там любые такие изменения, они тоже пересчитываются.
[01:28:45.720 --> 01:28:50.280]  Так ладно, я вас сильно задержал, извиняюсь, давайте заканчивать.
