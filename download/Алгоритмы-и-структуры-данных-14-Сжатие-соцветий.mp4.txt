[00:00.000 --> 00:11.600]  Так, ну что, мне выпала честь прочесть вам последнюю
[00:11.600 --> 00:15.600]  лекцию в этом семестре.
[00:15.600 --> 00:16.600]  Ничего не обещаю.
[00:16.600 --> 00:17.600]  Вот.
[00:17.600 --> 00:20.360]  Если где-то обману, то не намерено.
[00:20.360 --> 00:24.800]  Значит, давайте попробуем построить алгоритм поиска
[00:24.800 --> 00:27.000]  максимального прочитания в произвольном графе.
[00:27.000 --> 00:30.000]  Мы умеем в двудольном, с помощью куна.
[00:30.000 --> 00:33.000]  Вот давайте в произвольном попробуем учиться.
[00:33.000 --> 00:43.000]  Значит, называется алгоритм Эдманса сжатие соцветий.
[00:43.000 --> 00:57.120]  Значит, поиск максимального прочитания в произвольном
[00:57.120 --> 00:58.120]  графе.
[00:58.120 --> 01:11.080]  Коротенько напомню, у нас есть какой-то неориентированный
[01:11.080 --> 01:12.480]  невзвешенный граф.
[01:12.480 --> 01:15.280]  Давайте считать, что там нет петель, нет кратных
[01:15.280 --> 01:16.280]  ребер.
[01:16.280 --> 01:17.280]  Вот.
[01:17.280 --> 01:21.480]  Про сочетание напомню, да, это набор ребер в нашем
[01:21.480 --> 01:25.480]  графе, таких, что они попарно не имеют общих концов.
[01:25.480 --> 01:28.880]  То есть, например, вот эти три ребра это про сочетание,
[01:28.880 --> 01:31.240]  но, например, вот такое вот к ним добавить нельзя,
[01:31.240 --> 01:33.120]  потому что тогда вот эти два ребра бы пересекались
[01:33.120 --> 01:34.120]  по вершинке.
[01:34.120 --> 01:35.720]  Вот мне нельзя, чтобы они пересекались.
[01:35.720 --> 01:36.720]  Вот.
[01:36.720 --> 01:40.840]  Значит, это про сочетание.
[01:40.840 --> 01:42.720]  Соответственно, задача такая, что в данном графе
[01:42.720 --> 01:44.880]  нужно найти максимальное по размеру про сочетание.
[01:44.880 --> 01:49.600]  И у нас уже есть удобный инструмент, у нас есть теорема
[01:49.600 --> 01:53.440]  Бержа, которая говорит нам, что про сочетание максимальное
[01:53.440 --> 01:56.240]  если и только если нет увеличивающих путей относительно данного
[01:56.240 --> 01:57.240]  про сочетания.
[01:57.240 --> 02:00.600]  Мы эту теоремку доказывали, когда говорили про алгоритм
[02:00.600 --> 02:03.800]  Куна, для двудольных графов, но на самом деле эта теорема
[02:03.800 --> 02:05.760]  верна и для произвольных графов, и доказывал я ее
[02:05.760 --> 02:08.760]  в полной общности, не опираясь на двудольные графы.
[02:09.160 --> 02:12.600]  Давайте напомню быстренько, что такое увеличивающий
[02:12.600 --> 02:13.600]  путь.
[02:13.600 --> 02:18.440]  Да, увеличивающий путь – это буквальный путь в нашем
[02:18.440 --> 02:22.040]  графе, который начинается и заканчивается на ненасыщенную
[02:22.040 --> 02:23.040]  вершинку.
[02:23.040 --> 02:27.400]  То есть, ненасыщенные – те, которые не являются
[02:27.400 --> 02:30.000]  концом ни одного ребра про сочетание, полностью
[02:30.000 --> 02:32.680]  свободные, никак в про сочетании не участвуют.
[02:32.680 --> 02:33.680]  Вот.
[02:33.680 --> 02:37.040]  И дальше по дороге все типы ребра должны чередоваться.
[02:37.040 --> 02:39.440]  Ребра не из порсочи, потом из порсочи, не из порсочи,
[02:39.440 --> 02:40.440]  из порсочи и так далее.
[02:40.440 --> 02:42.520]  Значит, я рёбра не из про сочетания буду рисовать
[02:42.520 --> 02:46.040]  пунктиром, скорее всего, рёбра из порсочи – сплошными.
[02:46.040 --> 02:50.160]  Что-то такое должно быть, тогда вот это увеличивающий
[02:50.160 --> 02:51.160]  путь.
[02:51.160 --> 02:54.680]  У меня-то было как-то три свойства, что должно быть
[02:54.680 --> 02:58.360]  хотя бы одно ребро, что концы свободные, и что типы
[02:58.360 --> 02:59.360]  ребра чередуются.
[02:59.360 --> 03:00.360]  Вот как раз увеличивающий путь.
[03:00.360 --> 03:01.640]  Ну и, соответственно, теорема бержа.
[03:01.640 --> 03:12.440]  Что, значит, m максимально, если только если относительно
[03:12.440 --> 03:17.360]  m нет увеличивающих путей.
[03:17.360 --> 03:24.960]  Вот это мы доказали когда-то там месяц назад.
[03:24.960 --> 03:25.960]  Вот.
[03:25.960 --> 03:31.560]  Ну, хотелось бы сделать что-то такое же, хотелось бы как-то,
[03:31.560 --> 03:34.720]  ну то есть мы будем, собственно, наш алгоритм, он по-прежнему
[03:34.720 --> 03:36.600]  будет просто пытаться находить увеличивающие
[03:36.600 --> 03:41.960]  пути, так же как и в Куне у нас было, но как бы тут
[03:41.960 --> 03:44.640]  возникают некие проблемы, потому что, ну вот как искать
[03:44.640 --> 03:45.640]  увеличивающие пути?
[03:45.640 --> 03:48.120]  Вот, например, у нас есть какое-то текущее уже набранное
[03:48.120 --> 03:52.400]  про сочетание, не максимальное, а просто какое-то вот набранное,
[03:52.400 --> 03:55.680]  мы хотим его увеличить, хотим найти какой-то путь увеличивающий.
[03:55.680 --> 03:58.240]  Ну вот там, не знаю, давайте переберём как-нибудь эту
[03:58.240 --> 03:59.240]  стартовую вершинку.
[03:59.920 --> 04:03.120]  И, ну вот, что делать, там можно запустить, конечно,
[04:03.120 --> 04:05.400]  полный перебор всех путей, но это будет экспонента,
[04:05.400 --> 04:07.320]  понятно, куда идти в каждую вершинку, если всё перебирать,
[04:07.320 --> 04:08.320]  это долго.
[04:08.320 --> 04:09.320]  Вот.
[04:09.320 --> 04:13.920]  Ну а как по-другому действовать, не очень понятно, потому
[04:13.920 --> 04:17.920]  что, ну если пускать какой-то DFS, который как бы пытается
[04:17.920 --> 04:21.000]  идти по предписанному типу ребер, то есть мне нужно
[04:21.000 --> 04:25.880]  вот отсюда выйти как бы по неиспользованному ребру,
[04:25.880 --> 04:27.680]  потом пойти по использованному, потом по неиспользованному
[04:27.680 --> 04:28.680]  и так далее.
[04:29.120 --> 04:33.320]  Если запустить какой-то DFS и, ну, не приходить в вершины,
[04:33.320 --> 04:36.000]  в которых мы уже были, то это не очень хорошо, потому
[04:36.000 --> 04:39.840]  что если, скажем, вот из стартовой вершинки есть
[04:39.840 --> 04:44.960]  пути разных длин до какой-то вершины х, ну там, не знаю,
[04:44.960 --> 04:47.200]  давайте вот так вот как-нибудь нарисую, значит, сначала
[04:47.200 --> 04:51.440]  здесь было пунктирное ребро, потом сплошное, потом пунктирное,
[04:51.440 --> 04:55.960]  потом сплошное, потом пунктирное, вот есть такой путь и есть
[04:55.960 --> 04:56.960]  вот такой путь.
[04:56.960 --> 05:04.240]  Вот, например, вот что-то такое внезапно получилось.
[05:04.240 --> 05:07.800]  Тогда, в зависимости от того, как мы сюда в этот
[05:07.800 --> 05:10.840]  х пришли, да, сначала вот по верхней веточке или по
[05:10.840 --> 05:15.000]  нижней веточке, в общем, возможно, только один из
[05:15.000 --> 05:17.800]  этих двух случаев правильный, ну там, не знаю, скажем,
[05:17.800 --> 05:21.200]  правильный путь это вот такая штука, например,
[05:21.200 --> 05:25.120]  да, то есть вот это вот увеличивающий путь, но если я внезапно
[05:25.120 --> 05:28.360]  взял и сначала пошел по вот этому вот пути, пометил
[05:28.360 --> 05:32.200]  все вот эти вершинки от посещенными, да, и вот как
[05:32.200 --> 05:35.320]  бы, ну ладно, в эту я не посмотрю, но неважно, эту я уже пометил
[05:35.320 --> 05:37.720]  посещенной, все, как бы из нее больше ничего смотреть
[05:37.720 --> 05:38.720]  нельзя.
[05:38.720 --> 05:40.960]  А дальше я нахожу ее во второй раз, но поскольку
[05:40.960 --> 05:43.320]  она уже помещена посещенной, я как бы в нее не наступаю,
[05:43.320 --> 05:46.840]  ну потому что defest так работает, он не ходит повторно в вершинке,
[05:46.840 --> 05:47.840]  где уже был.
[05:47.840 --> 05:50.120]  Ну и тогда он не найдет, он вот этот путь не найдет.
[05:50.120 --> 06:00.000]  Ну вот, как бы, понятно, что просто defest нельзя, потому
[06:00.000 --> 06:02.320]  что нужно наложить требования чередования типов ребер.
[06:02.320 --> 06:04.800]  Я вот говорил про defest, который как-то умно пытается именно
[06:04.800 --> 06:08.840]  чередовать типы ребер, что, скажем, ну не знаю, в defest
[06:08.840 --> 06:15.240]  я передаю текущую вершину v, да, и какое-нибудь типа состояние,
[06:15.240 --> 06:18.560]  какой тип ребра нужно сейчас взять, пунктирный или сплошной.
[06:19.000 --> 06:24.680]  Да, да, да, да, да, да, да, а по нижней пытается, но
[06:24.680 --> 06:26.680]  сюда не приходит, потому что тут уже был.
[06:26.680 --> 06:29.320]  Вот, поэтому как-то, ну вот, defest вроде схода не получается.
[06:29.320 --> 06:30.320]  Вот.
[06:30.320 --> 06:33.640]  Ну и на самом деле тут как раз проблема именно в том,
[06:33.640 --> 06:37.160]  что вот возникают такие нечетные циклы, проблема,
[06:37.160 --> 06:39.160]  на самом деле единственная проблема ровно в том, что
[06:39.160 --> 06:42.840]  до какой-то вершины может быть два пути разной четности,
[06:42.840 --> 06:45.600]  это как раз значит, что есть циклы нечетной длины.
[06:45.640 --> 06:46.640]  Вот.
[06:46.640 --> 06:49.800]  Это, во-первых, нарушает, ну как бы, таких циклов
[06:49.800 --> 06:52.800]  нет в вдовдольных графах, поэтому на самом деле алгоритм
[06:52.800 --> 06:54.880]  куна спокойно работает, потому что кун по факту
[06:54.880 --> 06:55.880]  просто defest.
[06:55.880 --> 06:58.880]  Он более-менее ровно это и делает, пытается defest
[06:58.880 --> 06:59.880]  какую-то пустить.
[06:59.880 --> 07:00.880]  Вот.
[07:00.880 --> 07:02.240]  И там таких проблем не возникает, потому что в вдовдольных
[07:02.240 --> 07:04.240]  нету нечетных циклов, а вот тут бывают.
[07:04.240 --> 07:05.240]  Вот.
[07:05.240 --> 07:08.120]  Ну и в целом, как бы, у нас сегодня много будет именно
[07:08.120 --> 07:10.640]  про нечетные циклы, мы будем их стягивать.
[07:10.640 --> 07:13.080]  Мы вот найдем такой цикл и сожмем его в одну большую
[07:13.080 --> 07:14.960]  вершинку, и дальше будем чего-то с этим делать.
[07:15.320 --> 07:16.320]  Вот.
[07:16.320 --> 07:18.320]  Ну идея такая.
[07:18.320 --> 07:33.320]  Значит, давайте, я веду определение, оно такое довольно искусственное,
[07:33.320 --> 07:37.480]  но с точки зрения рифметики нам будет приятное.
[07:37.480 --> 07:42.480]  Значит, определение дефектом парасочетания называется
[07:42.480 --> 07:44.240]  количество непокрытых вершин.
[07:44.240 --> 07:57.360]  Значит, дефект парасочетания m – это количество ненасыщенных
[07:57.360 --> 08:02.360]  вершин.
[08:03.240 --> 08:06.240]  Вот.
[08:06.240 --> 08:16.280]  Ну тогда понятно, что наша исходная задача максимизации
[08:16.280 --> 08:20.800]  мощности m – она, по сути, эквивалентна задаче минимизации
[08:20.800 --> 08:24.240]  дефекта нашего просочетания, ну потому что они там тривиально
[08:24.240 --> 08:25.240]  связаны.
[08:25.240 --> 08:27.160]  Если мы знаем размер в плане количества ребер парасочет,
[08:27.160 --> 08:30.280]  то мы тривиально знаем число непокрытых вершин.
[08:30.280 --> 08:31.280]  Вот.
[08:31.280 --> 08:34.120]  Ну это, как бы, эти две задачи эквивалентны, но в этих
[08:34.120 --> 08:37.080]  терминах чуть проще формулировать некую утверждение.
[08:37.080 --> 08:40.440]  Вот, поэтому буду говорить про дефект иногда, а минимальность
[08:40.440 --> 08:43.440]  дефекта нам нужна.
[08:43.440 --> 08:46.440]  Вот.
[08:46.440 --> 08:55.440]  Значит, давайте лемма, наверное.
[09:01.440 --> 09:14.440]  Лемма, тата и бержа, значит, такая.
[09:14.440 --> 09:22.680]  Минимальный дефект больше либравен, чем максимум
[09:22.680 --> 09:25.760]  по всем возможным под множеством r в множестве вершин.
[09:25.760 --> 09:32.320]  Так, как бы это обозначить-то?
[09:32.320 --> 09:39.840]  Давайте я это назову, наверное, c1 от g – r, минус мощность
[09:39.840 --> 09:40.840]  r.
[09:40.840 --> 09:41.840]  Вот.
[09:41.840 --> 09:49.160]  Где c1 – это количество компонент нечетного размера в графе
[09:49.160 --> 09:51.960]  g после удаления всех вершин r.
[09:52.160 --> 09:58.160]  Значит, количество компонент связности, поторопился,
[09:58.160 --> 10:11.160]  ну ладно, связанности нечетного размера в графе g без r.
[10:11.160 --> 10:18.080]  Так, значит, перед тем, как сюда переходить, давайте
[10:18.080 --> 10:20.080]  я задам такой вопрос.
[10:20.200 --> 10:24.200]  Давайте я поставлю перед собой задачу попроще.
[10:24.200 --> 10:28.840]  Не поиск парсоча минимального дефекта, а давайте я хочу
[10:28.840 --> 10:32.240]  узнать, существует ли парсочный львового дефекта, то есть
[10:32.240 --> 10:35.240]  можно ли покрыть вообще все вершинки.
[10:35.240 --> 10:37.520]  Можете ли вы мне назвать какое-нибудь тривиальное
[10:37.520 --> 10:41.000]  достаточное условие того, что такого парсоча нет,
[10:41.000 --> 10:43.000]  что не существует совершенного просочетания, какой-нибудь
[10:43.000 --> 10:44.000]  тривиальный этот пояс.
[10:44.000 --> 10:47.200]  Ну да, что если просто в графе нечетное число вершин,
[10:47.200 --> 10:49.000]  то, понятно, делать все покрыть невозможно, потому
[10:49.120 --> 10:52.120]  что каждое ребро насыщает две вершинки.
[10:52.120 --> 10:56.280]  Ну и это, собственно, дает вот эту вот лему, что если
[10:56.280 --> 11:00.040]  я что-нибудь удалю и посчитаю количество таких самых
[11:00.040 --> 11:03.320]  нечетных компонент, то у меня миндефект должен
[11:03.320 --> 11:06.320]  быть больше или равно вот этому.
[11:06.320 --> 11:07.320]  Да.
[11:07.320 --> 11:14.320]  Нет, ну вот так вот, да, конечно.
[11:14.320 --> 11:17.160]  Доказательство очень простое, давайте выберем произвольное
[11:17.160 --> 11:21.440]  р, произвольное множество вершин, удалим его из графа,
[11:21.440 --> 11:24.280]  весь граф распадается на несколько компонент связности.
[11:24.280 --> 11:27.120]  Вот у меня был какой-то р, давайте я его облачком
[11:27.120 --> 11:28.120]  нарисую.
[11:28.120 --> 11:31.360]  Значит, я его удаляю вместе со всеми ребрами инцидентными
[11:31.360 --> 11:34.880]  этим вершинам, а остаются какие-то компоненты связности.
[11:34.880 --> 11:36.680]  Ну давайте я их разобью на четное и нечетное.
[11:36.680 --> 11:42.080]  Вот это пусть будет нечетное, вот это пусть будет четное.
[11:42.080 --> 11:44.840]  По количеству вершин, четность по количеству вершин рассматриваю.
[11:44.840 --> 11:49.080]  Ну вот давайте предположим, что я вот это вот все удалил.
[11:49.080 --> 11:57.040]  Как оптимальным образом может выглядеть просочетание?
[11:57.040 --> 12:01.800]  Да, ну понятно, что если в каждом из кружочков нечетное
[12:01.800 --> 12:05.360]  число вершин, то хотя бы одна вершина, если вдруг
[12:05.360 --> 12:08.600]  существует там совершенное просочетание, то каждая
[12:08.600 --> 12:10.680]  из этих вершин должна хотя бы одним концом торчать
[12:10.680 --> 12:13.960]  вот из этого кружочка, потому что их нечетное количество.
[12:13.960 --> 12:16.280]  Причем торчать она не может ни в другой кружочке,
[12:16.280 --> 12:18.960]  ни в квадрате, потому что иначе у меня бы склеились
[12:18.960 --> 12:19.960]  компоненты связности.
[12:19.960 --> 12:22.680]  То есть на самом деле все ребра, они либо внутри
[12:22.680 --> 12:25.240]  этих компонентов, либо между R и чем-нибудь, то есть только
[12:25.240 --> 12:28.360]  такие вот ребра бывают между компонентами.
[12:28.360 --> 12:31.400]  Ну и значит, чтобы покрыть каждую вершинку вот отсюда,
[12:31.400 --> 12:33.440]  мне нужно по крайней мере одной вершинкой из R пожертвовать.
[12:33.440 --> 12:37.200]  То есть мне нужно, чтобы вот эти все чуваки, они
[12:37.200 --> 12:40.240]  если кем-то и насыщены, то в паре с какой-то вершиной
[12:40.240 --> 12:41.240]  из R.
[12:41.240 --> 12:43.200]  Ну отсюда вот это и получается.
[12:43.280 --> 12:48.560]  Что если скажем, не знаю, вот здесь вот четыре кружочка,
[12:48.560 --> 12:52.280]  а здесь R имеет размер всего лишь 3, тогда понятно, что
[12:52.280 --> 12:54.560]  по крайней мере хотя бы одна из них будет ни с кем
[12:54.560 --> 12:55.560]  не состыкована.
[12:55.560 --> 12:57.880]  Ну как бы нельзя четыре вершины насыщить с помощью
[12:57.880 --> 13:00.120]  трех, насытить с помощью трех, поэтому хотя бы одна
[13:00.120 --> 13:02.320]  будет не насыщена, ну и вот собственно отсюда
[13:02.320 --> 13:05.320]  возникает эта форма.
[13:05.320 --> 13:08.600]  Чем больше компонент по сравнению с размером R,
[13:08.600 --> 13:12.080]  тем больше дефект, то есть тем больше вершин никак
[13:12.160 --> 13:13.160]  потенциально насыть нельзя.
[13:15.160 --> 13:16.160]  Так, понятно?
[13:19.160 --> 13:20.160]  Ну хорошо.
[13:20.160 --> 13:23.160]  Значит вот такая простая лемма.
[13:23.160 --> 13:26.160]  На самом деле вот это вот здесь может писать равенство.
[13:26.160 --> 13:28.960]  На самом деле минимальный дефект в точности равен
[13:28.960 --> 13:31.960]  вот этому максимуму по всем возможным подможествам.
[13:31.960 --> 13:32.960]  Вот.
[13:32.960 --> 13:37.960]  Но мы как бы это вот где-то явно докажем в конце лекции,
[13:37.960 --> 13:38.960]  ну или не явно.
[13:38.960 --> 13:41.440]  Короче вот, короче это на самом деле равенство
[13:41.800 --> 13:44.800]  и это будет ясно после рассмотрения всего алгоритма.
[13:45.800 --> 13:48.800]  Но нам будет нужна сейчас только вот эта вот неравенство.
[13:48.800 --> 13:49.800]  Так, что дальше?
[13:51.800 --> 13:52.800]  Что дальше?
[13:58.800 --> 13:59.800]  Хорошо.
[14:00.800 --> 14:03.800]  Дальше мне видимо нужно чередующееся дерево.
[14:11.800 --> 14:12.800]  Или череду...
[14:12.800 --> 14:13.800]  Неважно, пофиг.
[14:14.800 --> 14:15.800]  Нечедающие дерево.
[14:18.800 --> 14:19.800]  На сете вот что.
[14:19.800 --> 14:20.800]  Смотрите.
[14:21.800 --> 14:24.800]  Давайте возьмем какую-нибудь ненасыщенную вершину.
[14:24.800 --> 14:26.800]  Та, которая не участвует нигде.
[14:26.800 --> 14:27.800]  Ненасыщенная.
[14:29.800 --> 14:33.800]  Ну, поскольку она ненасыщенная, то все ребра ей инцидентные,
[14:33.800 --> 14:35.800]  они не в парсочи, они пунктирные.
[14:35.800 --> 14:36.800]  Они не в парсочи.
[14:37.160 --> 14:39.160]  А давайте я еще сразу ее синий покрашу.
[14:39.160 --> 14:41.160]  Я сейчас буду все вершины красить в два цвета.
[14:41.160 --> 14:42.160]  Это будет синий.
[14:43.160 --> 14:47.160]  Значит все ребра из нее исходящие, они автоматически пунктирные.
[14:48.160 --> 14:51.160]  Ну, значит я могу их несколько вот таких вот нарисовать.
[14:52.160 --> 14:53.160]  Дальше.
[14:53.160 --> 14:56.160]  Вот рассмотрим вот эти следующие вершинки на следующем слое.
[14:58.160 --> 15:01.160]  Если какая-то из них внезапно ненасыщенная,
[15:01.160 --> 15:03.160]  то мы уже нашли увеличительную вершину.
[15:03.520 --> 15:05.520]  Если какая-то из них внезапно ненасыщенная,
[15:05.520 --> 15:07.520]  то мы уже нашли увеличивающий путь.
[15:07.520 --> 15:09.520]  Ревиальный увеличивающий путь из одного ребра.
[15:09.520 --> 15:11.520]  Все хорошо, можно его просто добавить к ответу.
[15:11.520 --> 15:14.520]  Поэтому обычно они будут скорее насыщенные.
[15:17.520 --> 15:22.520]  Раз они насыщенные, то каждый из них инцидентно какому-то ребру про сочетание.
[15:25.520 --> 15:27.520]  Ну и давайте их вот здесь вот так вот нарисуем.
[15:27.880 --> 15:28.880]  Дальше.
[15:28.880 --> 15:30.880]  Я эти вершины покрашу красными,
[15:30.880 --> 15:33.880]  вот эти вот, которые являются началами ребер из порсоча.
[15:33.880 --> 15:35.880]  А их концы опять синими.
[15:36.880 --> 15:39.880]  То есть у меня будет просто в дереве чередоваться цвета.
[15:39.880 --> 15:41.880]  Красный-синий, красный-синий.
[15:43.880 --> 15:45.880]  Ну дальше опять вот эти синие вершинки.
[15:45.880 --> 15:48.880]  У них уже нарисовано одно инцидентное ребро порсоча.
[15:48.880 --> 15:51.880]  И дальше могут из них торчать еще какие-то ненасыщенные.
[15:51.880 --> 15:54.880]  Ну вот там здесь, скажем, два, тут одно.
[15:55.240 --> 15:57.240]  Тут ничего не торчит.
[15:57.240 --> 15:59.240]  Тут три, тут одно, тут ничего.
[15:59.240 --> 16:01.240]  Опять какие-то вершины появились.
[16:01.240 --> 16:03.240]  Если внезапно нам повезло
[16:03.240 --> 16:05.240]  и это опять какая-то из них ненасыщенная,
[16:05.240 --> 16:07.240]  то мы опять нашли увеличивающий путь
[16:07.240 --> 16:09.240]  и победили, в общем-то.
[16:09.240 --> 16:11.240]  Можно увеличить порсочетание.
[16:11.240 --> 16:13.240]  Иначе все они насыщенные,
[16:13.240 --> 16:15.240]  мы их красим в красный,
[16:15.240 --> 16:17.240]  и они дают нам новые ребра в нашем дереве.
[16:18.240 --> 16:20.240]  Концы которых мы опять красим в синий.
[16:20.600 --> 16:22.600]  Ну, вот это чередующее дерево.
[16:26.600 --> 16:28.600]  Ну, строить его можно как-нибудь
[16:28.600 --> 16:30.600]  очень наивным способом.
[16:30.600 --> 16:32.600]  Например, мы фиксировали корень,
[16:32.600 --> 16:34.600]  мы фиксировали произвольную ненасыщенную вершину.
[16:34.600 --> 16:36.600]  А дальше просто, давайте,
[16:36.600 --> 16:38.600]  какую-то часть дерева я построил,
[16:38.600 --> 16:40.600]  давайте возьмем последнюю,
[16:40.600 --> 16:42.600]  необработанную синию вершинку.
[16:42.600 --> 16:44.600]  Рассмотрим все ее исходящие ребра.
[16:44.600 --> 16:46.600]  Начнем с этой вершины.
[16:46.960 --> 16:48.960]  Если есть пунктирная, вненасыщенная,
[16:48.960 --> 16:50.960]  то путь до корня это увеличивающий.
[16:50.960 --> 16:52.960]  Если мы рассматриваем новую, свободную,
[16:52.960 --> 16:54.960]  но она насыщенная,
[16:54.960 --> 16:56.960]  то сразу строим сплошную ребро вниз.
[16:56.960 --> 16:58.960]  Это простые случаи.
[16:58.960 --> 17:00.960]  Но могут быть ребра еще куда-то
[17:00.960 --> 17:02.960]  внутрь этого дерева.
[17:02.960 --> 17:04.960]  Может быть ребра куда-нибудь вот сюда,
[17:04.960 --> 17:06.960]  или сюда, ну короче, еще куда-то.
[17:06.960 --> 17:08.960]  Значит, это синий вершинка.
[17:08.960 --> 17:10.960]  Но если мы рассматриваем
[17:10.960 --> 17:12.960]  новую, свободную вершину,
[17:12.960 --> 17:14.960]  то мы сразу будем строить
[17:15.320 --> 17:17.320]  эти случаи посложнее.
[17:17.320 --> 17:19.320]  Вот.
[17:19.320 --> 17:21.320]  Ну давайте пока что
[17:21.320 --> 17:23.320]  на этом остановимся.
[17:25.320 --> 17:27.320]  Давайте я это дерево назову Т,
[17:27.320 --> 17:29.320]  и давайте скажем,
[17:29.320 --> 17:31.320]  что B от T
[17:31.320 --> 17:33.320]  это множество синих вершин
[17:33.320 --> 17:35.320]  в этом дереве.
[17:42.320 --> 17:44.320]  Ну R от T это множество красных.
[17:45.320 --> 17:47.320]  Вот.
[17:57.320 --> 17:59.320]  То есть по сути цвет определяется
[17:59.320 --> 18:01.320]  просто четностью глубины.
[18:01.320 --> 18:03.320]  Четная 0, 2, 4 это синие,
[18:03.320 --> 18:05.320]  1, 3, 5 и так далее это красные.
[18:07.320 --> 18:09.320]  Вот. Хорошо.
[18:11.320 --> 18:13.320]  Значит, ну давайте считать,
[18:13.680 --> 18:15.680]  что это дерево полностью рассмотрели,
[18:15.680 --> 18:17.680]  и таких больше
[18:17.680 --> 18:19.680]  никуда расточков вниз нету,
[18:19.680 --> 18:21.680]  из синих. То есть смотрите,
[18:21.680 --> 18:23.680]  красные я раскрывать не буду.
[18:23.680 --> 18:25.680]  То есть если я пришел в красную,
[18:25.680 --> 18:27.680]  то я однозначно ее продлеваю вниз по сплошному ребру,
[18:27.680 --> 18:29.680]  и никаких выцелений здесь у меня не происходит.
[18:29.680 --> 18:31.680]  То есть я по сути DFS из красной
[18:31.680 --> 18:33.680]  не запускаю, только из синих скорее, на обход.
[18:33.680 --> 18:35.680]  Вот.
[18:35.680 --> 18:37.680]  Ну а для всех синих, из которых
[18:37.680 --> 18:39.680]  были ребра куда-то во внешности этого дерева,
[18:39.680 --> 18:41.680]  давайте я все эти добавлю в мое дерево.
[18:42.040 --> 18:44.040]  Теперь ребер во вне этого дерева,
[18:44.040 --> 18:46.040]  из синих совершенно нету.
[18:46.040 --> 18:48.040]  Вот.
[18:48.040 --> 18:50.040]  Ну, значит, наблюдение...
[18:52.040 --> 18:54.040]  А, сейчас, момент.
[18:56.040 --> 18:58.040]  Наблюдение первое.
[18:58.040 --> 19:00.040]  Что если
[19:04.040 --> 19:06.040]  ребро...
[19:06.040 --> 19:08.040]  Смотрите, у меня остались
[19:08.040 --> 19:10.040]  ребра теперь только внутри, то есть
[19:10.400 --> 19:12.400]  из красного куда-то во внешность,
[19:12.400 --> 19:14.400]  либо из синего во внутренность дерева.
[19:14.400 --> 19:16.400]  Вот замечание такое, что если
[19:16.400 --> 19:18.400]  из каждой синих
[19:18.400 --> 19:20.400]  ребра ведут только в красные,
[19:20.400 --> 19:22.400]  то
[19:22.400 --> 19:24.400]  не существует
[19:26.400 --> 19:28.400]  пути, содержащие вот эту вот
[19:28.400 --> 19:30.400]  вершинку.
[19:34.400 --> 19:36.400]  Не обязательно, могут быть.
[19:36.400 --> 19:38.400]  Могут быть во внешность дерева.
[19:38.760 --> 19:40.760]  И во внутрь тоже могут быть, да.
[19:40.760 --> 19:42.760]  Главное, что из синих нет наружу.
[19:48.760 --> 19:50.760]  Сейчас, сейчас, сейчас скажу.
[19:58.760 --> 20:00.760]  Значит, смотрите, вот, по-другому скажу.
[20:00.760 --> 20:02.760]  Давайте я запущу вот этот обход,
[20:02.760 --> 20:04.760]  который строит мое дерево, из всех
[20:04.760 --> 20:06.760]  ненасыщенных. Вот пусть я для каждой
[20:07.120 --> 20:09.120]  дерева ни разу не нашел увеличивающего
[20:09.120 --> 20:11.120]  пути, но вот эти все деревья
[20:11.120 --> 20:13.120]  как-то вот так вот построились.
[20:13.120 --> 20:15.120]  Одно такое дерево,
[20:15.120 --> 20:17.120]  очередующее другое,
[20:17.120 --> 20:19.120]  третье.
[20:19.120 --> 20:21.120]  Все вершины теперь покрашены
[20:21.120 --> 20:23.120]  в красные и синие.
[20:25.120 --> 20:27.120]  И для каждой синих
[20:27.120 --> 20:29.120]  ребра
[20:29.120 --> 20:31.120]  ведут только в красные.
[20:31.120 --> 20:33.120]  Вот так.
[20:33.480 --> 20:35.480]  Вот.
[20:35.480 --> 20:37.480]  Ну, тогда понятно, что, значит,
[20:37.480 --> 20:39.480]  тогда я утверждаю,
[20:39.480 --> 20:41.480]  что дефект минимальный,
[20:41.480 --> 20:43.480]  он больше равен число вот этих вот деревьев.
[20:43.480 --> 20:45.480]  А значит,
[20:45.480 --> 20:47.480]  парсоль уже нельзя увеличить.
[20:49.480 --> 20:51.480]  Вот.
[20:51.480 --> 20:53.480]  Значит, почему? Ну, давайте просто вот это леммия
[20:53.480 --> 20:55.480]  в качестве R возьмем вот то самое R,
[20:55.480 --> 20:57.480]  как множество всех красных вершин
[20:57.480 --> 20:59.480]  всех деревьев.
[20:59.480 --> 21:01.480]  Пусть R это все красные
[21:01.840 --> 21:03.840]  деревьев.
[21:07.840 --> 21:09.840]  То есть тогда, когда я его удаляю,
[21:09.840 --> 21:11.840]  поскольку у меня синие
[21:11.840 --> 21:13.840]  инцидентно только красным,
[21:13.840 --> 21:15.840]  ну, точнее, смежно только с красными,
[21:17.840 --> 21:19.840]  то у меня каждая синяя вершинка
[21:19.840 --> 21:21.840]  станет отдельной изолированной компонентой связности.
[21:21.840 --> 21:23.840]  Такой вот, ну,
[21:23.840 --> 21:25.840]  буквально изолированной вершины из одной точки
[21:25.840 --> 21:27.840]  состоящей. Да, потому что,
[21:27.840 --> 21:29.840]  ну, я предполагаю,
[21:30.200 --> 21:32.200]  что синие между собой не соединены,
[21:32.200 --> 21:34.200]  соединен только с красными.
[21:34.200 --> 21:36.200]  Ну, значит, если я просто все красные удалю,
[21:36.200 --> 21:38.200]  то каждая синие будет сама по себе.
[21:38.200 --> 21:40.200]  Да.
[21:40.200 --> 21:42.200]  Нет, не игнорируем.
[21:42.200 --> 21:44.200]  Почему? Смотрите еще раз.
[21:44.200 --> 21:46.200]  Давайте гипотезу.
[21:46.200 --> 21:48.200]  Вот я рассматриваю ситуацию,
[21:48.200 --> 21:50.200]  когда мы не нашли увеличивающих путей.
[21:50.200 --> 21:52.200]  Значит, не нашли
[21:52.200 --> 21:54.200]  увеличивающих путей.
[21:54.200 --> 21:56.200]  Вот.
[21:56.200 --> 21:58.200]  А,
[21:58.560 --> 22:00.560]  значит,
[22:00.560 --> 22:02.560]  ребра из синих
[22:02.560 --> 22:04.560]  ведут только в красные.
[22:08.560 --> 22:10.560]  Вот такая гипотеза у меня сейчас.
[22:12.560 --> 22:14.560]  Да, то есть они могут быть,
[22:14.560 --> 22:16.560]  во-первых, смотрите, во-первых, могут быть
[22:16.560 --> 22:18.560]  ребра между красными, да, например, вот.
[22:18.560 --> 22:20.560]  Между деревьями, между,
[22:20.560 --> 22:22.560]  между разными деревьями могут быть ребра между красными вершинками.
[22:22.560 --> 22:24.560]  Могут быть
[22:24.920 --> 22:26.920]  даже, наверное,
[22:26.920 --> 22:28.920]  ребра между синим и красным
[22:28.920 --> 22:30.920]  из разных деревьев.
[22:30.920 --> 22:32.920]  Ну и, конечно, внутри дерева
[22:32.920 --> 22:34.920]  тоже могут быть какие-то ребра.
[22:34.920 --> 22:36.920]  Но главное, что если один конец синий,
[22:36.920 --> 22:38.920]  то второй обязательно черный.
[22:38.920 --> 22:40.920]  Красный, красный, красный.
[22:40.920 --> 22:42.920]  Если один синий, то другой обязательно красный.
[22:42.920 --> 22:44.920]  Так вот, ну тогда понятно, что если я
[22:44.920 --> 22:46.920]  удалю все красные,
[22:46.920 --> 22:48.920]  то у меня все синие останутся отдельными
[22:48.920 --> 22:50.920]  изолированными вершинками,
[22:50.920 --> 22:52.920]  и их будет ровно на три больше.
[22:53.280 --> 22:55.280]  Из деревьев настолько их и больше.
[22:55.280 --> 22:57.280]  Потому что в каждом дереве
[22:57.280 --> 22:59.280]  легко заметить, что вот в каждом дереве
[22:59.280 --> 23:01.280]  синих ровно на одну больше, чем красных.
[23:07.280 --> 23:09.280]  Потому что мы начали с синия,
[23:09.280 --> 23:11.280]  а дальше они парами добавляются, красный, синие,
[23:11.280 --> 23:13.280]  красный, синие сразу.
[23:13.280 --> 23:15.280]  Ну все, значит, если я их просто все удалю,
[23:15.280 --> 23:17.280]  вот, вот, если я их во всем графе
[23:17.280 --> 23:19.280]  все эти красные удалю,
[23:19.280 --> 23:21.280]  тогда у меня понятно, что минимальный дефект
[23:23.280 --> 23:25.280]  окажется большим равен,
[23:25.280 --> 23:27.280]  чем количество деревьев,
[23:27.280 --> 23:29.280]  то есть чем количество ненасыщенных вершин.
[23:37.280 --> 23:39.280]  Значит, больше увеличивать некуда.
[23:39.280 --> 23:41.280]  Потому что мы
[23:41.280 --> 23:43.280]  добились такой ситуации,
[23:43.280 --> 23:45.280]  что ненасыщенных минимально возможное количество.
[23:45.280 --> 23:47.280]  То есть в любом просочетании
[23:47.280 --> 23:49.280]  дефект хотя бы такой, как вот в этом,
[23:49.280 --> 23:51.280]  на счету оптимальный.
[23:51.640 --> 23:53.640]  Значит, следовательно, текущая м
[23:55.640 --> 23:57.640]  обладает минимальным дефектом.
[24:16.640 --> 24:18.640]  Так, что-то понятно?
[24:18.640 --> 24:20.640]  Значит, давайте еще раз повторю
[24:21.000 --> 24:23.000]  Смотрите, я строю вот
[24:23.000 --> 24:25.000]  моё чередующееся дерево
[24:25.000 --> 24:27.000]  со стартом в любой ненасыщенный.
[24:27.000 --> 24:29.000]  Вот давайте возьму произвол ненасыщенного,
[24:29.000 --> 24:31.000]  тут как-нибудь его построю.
[24:31.000 --> 24:33.000]  Я не специфицирую, как именно конкретно я его строю,
[24:33.000 --> 24:35.000]  там DFS или BFS, мне не важно.
[24:35.000 --> 24:37.000]  А вот если вот такая конструкция выполняется,
[24:37.000 --> 24:39.000]  то это чередующийся дерево.
[24:39.000 --> 24:41.000]  Вот.
[24:41.000 --> 24:43.000]  Пункт первый.
[24:43.000 --> 24:45.000]  Если внезапно во время построения этого дерева
[24:45.000 --> 24:47.000]  я нашел путь в ненасыщенную,
[24:47.000 --> 24:49.000]  то есть если вот так вот делал, делал, делал,
[24:49.360 --> 24:51.360]  и из синих нашел ребро в свободную вершинку,
[24:51.360 --> 24:53.360]  то можно сделать
[24:53.360 --> 24:55.360]  чередование вдоль пути
[24:55.360 --> 24:57.360]  и запуститься заново.
[24:57.360 --> 24:59.360]  То есть я перестроил парсоч и
[24:59.360 --> 25:01.360]  сбрасываю алгоритм, начинаю заново.
[25:01.360 --> 25:03.360]  То есть моя задача это найти увеличивающий путь.
[25:03.360 --> 25:05.360]  Вот если его нашел, то я прочередовал вдоль него и иду дальше.
[25:05.360 --> 25:07.360]  Запускаю заново наш алгоритм.
[25:07.360 --> 25:09.360]  Это первое.
[25:09.360 --> 25:11.360]  Теперь пусть таких не нашлось.
[25:11.360 --> 25:13.360]  Таких увеличивающих путей не нашлось.
[25:13.360 --> 25:15.360]  Значит, второе странное
[25:15.360 --> 25:17.360]  предположение.
[25:17.720 --> 25:19.720]  Эти деревья настолько неудачные,
[25:19.720 --> 25:21.720]  что из синих
[25:21.720 --> 25:23.720]  бывают ребра только в красные.
[25:23.720 --> 25:25.720]  Вот как у меня там написано,
[25:25.720 --> 25:27.720]  что из синих нет ребра в синюю,
[25:27.720 --> 25:29.720]  есть только в красные.
[25:29.720 --> 25:31.720]  Она сама по себе в дереве только в красном, инцидентно.
[25:31.720 --> 25:33.720]  Но еще вот какие-то другие деревья,
[25:33.720 --> 25:35.720]  другие ребра, которые есть в графе,
[25:35.720 --> 25:37.720]  они тоже либо в красные,
[25:37.720 --> 25:39.720]  то же самые компоненты, либо в другое дерево.
[25:39.720 --> 25:41.720]  Ну не важно.
[25:41.720 --> 25:43.720]  Тогда вот по тому утверждению можно завершать алгоритм,
[25:43.720 --> 25:45.720]  потому что лучше некуда.
[25:46.080 --> 25:48.080]  Порсочи больше быть не может.
[25:48.080 --> 25:50.080]  Но я стал встретить
[25:50.080 --> 25:52.080]  содержательный случай.
[25:52.080 --> 25:54.080]  Это когда бывают ребра между синими.
[25:54.080 --> 25:56.080]  Давайте аккуратненько
[25:56.080 --> 25:58.080]  еще раз это законспектирую.
[25:58.080 --> 26:00.080]  Первое.
[26:00.080 --> 26:02.080]  Нашелся увеличивающий путь.
[26:04.080 --> 26:06.080]  Тогда выполнить чередование.
[26:12.080 --> 26:14.080]  И запуститься заново.
[26:16.080 --> 26:18.080]  Второе.
[26:18.080 --> 26:20.080]  Ребра из синих ведут только в красные.
[26:20.080 --> 26:22.080]  Тогда просто ретёрн.
[26:34.080 --> 26:36.080]  Всегда просто ретёрн.
[26:36.440 --> 26:38.440]  Ну и третье.
[26:38.440 --> 26:40.440]  Есть ребра между синими.
[26:40.440 --> 26:42.440]  Есть, по крайней мере, одно ребро.
[26:42.440 --> 26:44.440]  Есть хотя бы одно ребро
[26:46.440 --> 26:48.440]  между синими.
[26:55.440 --> 26:57.440]  Вот.
[26:57.440 --> 26:59.440]  И вот.
[26:59.440 --> 27:01.440]  Вот.
[27:01.440 --> 27:03.440]  И вот.
[27:03.440 --> 27:05.440]  И вот.
[27:05.800 --> 27:07.800]  В этом случае
[27:07.800 --> 27:09.800]  мы как раз
[27:09.800 --> 27:11.800]  будем сжимать нечётный цикл.
[27:13.800 --> 27:15.800]  Давайте попробуем понять,
[27:15.800 --> 27:17.800]  что такое ребро между синими.
[27:17.800 --> 27:19.800]  Если внезапно
[27:19.800 --> 27:21.800]  есть ребро между синими
[27:21.800 --> 27:23.800]  разных компонент-связанности,
[27:23.800 --> 27:25.800]  разных деревьев,
[27:25.800 --> 27:27.800]  тогда на самом деле
[27:27.800 --> 27:29.800]  есть увеличивающий путь.
[27:29.800 --> 27:31.800]  Потому что синие вершинка
[27:31.800 --> 27:33.800]  в каком-то дереве.
[27:34.160 --> 27:36.160]  Причём он заканчивается ребром из порсочи.
[27:36.160 --> 27:38.160]  Предыдущая красная,
[27:38.160 --> 27:40.160]  это синие.
[27:40.160 --> 27:42.160]  Потом я иду по ребру не из порсочи,
[27:42.160 --> 27:44.160]  потому что, очевидно, предыдущий был из порсочи.
[27:44.160 --> 27:46.160]  И теперь если подняться вверх,
[27:46.160 --> 27:48.160]  то там будет опять чередование типа фребер
[27:48.160 --> 27:50.160]  из порсочи, не из порсочи и так далее.
[27:50.160 --> 27:52.160]  Поэтому если внезапно оказалось ребро
[27:52.160 --> 27:54.160]  между синими разных деревьев,
[27:54.160 --> 27:56.160]  тогда всё это склеивается
[27:56.160 --> 27:58.160]  в один увеличивающий путь.
[27:58.160 --> 28:00.160]  И мы находимся в первом случае.
[28:00.160 --> 28:02.160]  И всё хорошо.
[28:02.520 --> 28:04.520]  Когда мы будем кодить,
[28:04.520 --> 28:06.520]  на самом деле,
[28:06.520 --> 28:08.520]  происходит следующее.
[28:08.520 --> 28:10.520]  Я вот это дерево
[28:10.520 --> 28:12.520]  строю,
[28:12.520 --> 28:14.520]  как это по-русски?
[28:14.520 --> 28:16.520]  Ну максимально, да.
[28:16.520 --> 28:18.520]  Я его строю до тех пор,
[28:18.520 --> 28:20.520]  пока не исчерпаются все возможные ребра.
[28:20.520 --> 28:22.520]  Если исчерпали,
[28:22.520 --> 28:24.520]  значит таких уже не будет.
[28:24.520 --> 28:26.520]  Можно считать,
[28:26.520 --> 28:28.520]  можно считать,
[28:28.520 --> 28:30.520]  можно считать,
[28:30.880 --> 28:32.880]  что
[28:32.880 --> 28:34.880]  это ребро внутри
[28:34.880 --> 28:36.880]  какого-то дерева.
[28:36.880 --> 28:38.880]  Внутри дерева Т.
[28:42.880 --> 28:44.880]  Вот.
[28:44.880 --> 28:46.880]  Ну и тогда легко понять,
[28:46.880 --> 28:48.880]  что это ребро стягивает в нашем дереве
[28:48.880 --> 28:50.880]  цикл нечётной длины.
[28:50.880 --> 28:52.880]  Значит,
[28:52.880 --> 28:54.880]  это ребро
[28:54.880 --> 28:56.880]  стягивает
[28:56.880 --> 28:58.880]  цикл,
[28:59.240 --> 29:01.240]  а нечётной длины.
[29:21.240 --> 29:23.240]  О, здрасте.
[29:29.880 --> 29:31.880]  Давайте его сожмём.
[29:31.880 --> 29:33.880]  Почему нечётной длины?
[29:33.880 --> 29:35.880]  Давайте тут что-нибудь нарисую.
[29:42.880 --> 29:44.880]  Почему нечётной длины?
[29:44.880 --> 29:46.880]  Потому что синие всегда
[29:46.880 --> 29:48.880]  на чётной глубине.
[29:48.880 --> 29:50.880]  Как устроен путь в дереве?
[29:50.880 --> 29:52.880]  Это всегда, вот у меня есть две синие вершинки,
[29:52.880 --> 29:54.880]  возможно они сами на разной глубине,
[29:54.880 --> 29:56.880]  но обе на чётной.
[29:56.880 --> 29:58.880]  Что такое путь между ними?
[29:58.880 --> 30:00.880]  Это сначала надо подняться в общего предка
[30:00.880 --> 30:02.880]  и потом прыгнуть с помощью вот этого ребра
[30:02.880 --> 30:04.880]  между синими.
[30:04.880 --> 30:06.880]  Поскольку вот здесь
[30:06.880 --> 30:08.880]  происходит ветвление,
[30:08.880 --> 30:10.880]  то это тоже синие,
[30:10.880 --> 30:12.880]  потому что у красных всегда один сын.
[30:12.880 --> 30:14.880]  Это точно синие,
[30:14.880 --> 30:16.880]  и получается, что у меня здесь чётная длина,
[30:16.880 --> 30:18.880]  потому что это путь между синими.
[30:18.880 --> 30:20.880]  Здесь чётная длина, и ещё плюс одно ребро.
[30:20.880 --> 30:22.880]  Поэтому цикл обязательно нечётный.
[30:22.880 --> 30:24.880]  Вершинка его,
[30:24.880 --> 30:26.880]  можно назвать базой
[30:28.880 --> 30:30.880]  база вот этого цикла,
[30:30.880 --> 30:32.880]  самая верхняя вершина.
[30:32.880 --> 30:34.880]  Будет синие,
[30:34.880 --> 30:36.880]  а весь цикл называется
[30:36.880 --> 30:38.880]  в оригинальной статье соцветием.
[30:44.880 --> 30:46.880]  Как это соцветие устроено?
[30:46.880 --> 30:48.880]  Давайте на этом примере нарисую.
[30:48.880 --> 30:50.880]  Если здесь есть вот такое ребро,
[30:50.880 --> 30:52.880]  то вот это соцветие,
[30:52.880 --> 30:54.880]  значит у него база Синяя.
[30:54.880 --> 30:56.880]  Из Синий базы исходит два
[30:56.880 --> 30:58.880]  ненасыщенных ребра.
[30:58.880 --> 31:00.880]  А дальше чередования по циклу
[31:00.880 --> 31:02.880]  насыщенную-ненасыщенную-насыщенная.
[31:02.880 --> 31:04.880]  То есть у меня есть единственная вершинка,
[31:04.880 --> 31:06.880]  единственная синие, самая верхняя вершина,
[31:06.880 --> 31:08.880]  из которой торчит два ненасыщенных,
[31:08.880 --> 31:10.880]  а потом по циклу чередования.
[31:10.880 --> 31:12.880]  И он ничётной длины.
[31:12.880 --> 31:14.520]  Единственное нарушение чередования
[31:14.520 --> 31:15.880]  происходит только в базе,
[31:15.880 --> 31:17.880]  только в самой верхней вершинке цикла.
[31:17.880 --> 31:30.880]  Вот. Ну и давайте сделаем следующее. Давайте возьмём и просто вот это всё сожмём, буквально сожмём это в одну большую мегавершинку, то есть вот это всё склеим, все исходящие ребра тоже склеим.
[31:30.880 --> 31:46.880]  Давайте какую-нибудь картинку нарисуем. У меня было что-то такое, и там куда-то туда торчало ребро, куда-то сюда торчало ребро, что после склейки вот этого всего в одну большую вершинку, у меня вот просто ребро сюда и сюда.
[31:46.880 --> 31:58.880]  Ну если там кратные, кратные надо удалить, потому что в поиске парсочек кратные нам не нужны. Они на ответ не влияют.
[31:58.880 --> 32:13.880]  Вот. И утверждается, что так реально можно сделать, то есть можно сжать вот это вот соцветие в одну большую мегавершинку, и от этого ответ не поменяется.
[32:13.880 --> 32:25.880]  То есть если в этом новом графе с сжатой вершинкой будет, ну точнее не так, в исходном графе существует увеличивающий путь, если только если в новом существует увеличивающий путь.
[32:25.880 --> 32:32.880]  Идейно, почему это верно. Смотрите, у меня по факту теперь вот эта вот вершинка просто превратилась в большой нечётный цикл.
[32:32.880 --> 32:46.880]  А что такое увеличивающий путь в новом графе, где вот эта вот сжата? Ну если он вообще через неё не проходит, то и бог с ней, можно просто разжать, и оттого тот увеличивающий путь не изменится.
[32:46.880 --> 33:10.880]  А если как-то внезапно увеличивающий путь проходит через эту вершинку, если он проходит через эту вершинку, то на самом деле, видимо, нужно чуть более аккуратный анализ.
[33:10.880 --> 33:25.880]  Ладно, давайте это запишем уже.
[33:25.880 --> 33:48.880]  Утверждение. Пусть G штрих получается из G сжатием одного соцветия.
[33:48.880 --> 34:13.880]  Значит тогда в G штрих существует увеличивающий путь, если только если в G существует увеличивающий путь.
[34:13.880 --> 34:35.880]  Вот, интуиция такая. На самом деле, если в G штрихе, вот в этом новом графе со сжатой мегавершинкой, если здесь есть увеличивающий путь, проходящий через сжатую вершинку, то на самом деле этот путь обязательно проходит через базу, он обязательно входит в базу, это мы сейчас докажем.
[34:35.880 --> 34:53.880]  Этот путь обязательно на самом деле содержит ребра, входящие в базу, ну а дальше понятно, как тогда это разжать, то есть моя какая цель. Моя цель была сохранить этот увеличивающий путь, разжав вот здесь вот, то есть мне нужно сказать, как мне нужно пройти внутри этого цикла, чтобы сохранилось чередование ребр.
[34:53.880 --> 35:20.880]  Но если я вышел в базу, если одно из ребр привело меня в базу, то понятно, мне нужно пройти либо вот так вот, либо вот так вот. У меня как раз чередование, ну там, скажем, при проходе по часовой стрелке, у меня будет чередование, начиная, у меня в любом случае будет ребро сначала не насыщенное, потом чередование, но выйти я могу, как бы последнее ребро может быть как насыщенным, так и не насыщенным, как хочу, так и будет.
[35:20.880 --> 35:25.880]  То есть либо я вот так вот пройду, либо вот так вот пройду, в зависимости от того, что мне нужно от этого ребра.
[35:26.880 --> 35:29.880]  А если мне нужно, чтобы оно было...
[35:29.880 --> 35:35.880]  Это фигню, да, сказал?
[35:35.880 --> 35:54.880]  Да, да, да. Ну, короче, надо показать, что если увеличивающий путь вж-штрих, как выглядит увеличивающий путь вж-штрих? Он обязательно входит с помощью насыщенного ребра в базу, и дальше, понятно, можно, пройдя в эту сторону или в эту, выйти, в данном случае надо вот так вот идти, чтобы дальше было не насыщенное.
[35:54.880 --> 36:05.880]  Ну, идея такая. И в обратную сторону тоже верно, если здесь какой-то был путь, то после сжатия он будет в ж-штрихе, он тоже останется.
[36:05.880 --> 36:10.880]  Так, давайте, наверное, пять минут перерыв, и потом это докажем.
[36:10.880 --> 36:18.880]  Так, что давайте дальше? Да? Да, да, да, да, все нормально, я продумал, все хорошо.
[36:18.880 --> 36:22.880]  Ну, тут повозится, но вроде получается.
[36:22.880 --> 36:27.880]  Давайте слева-направо сначала. Тут в обе стороны нет реальной доказательства, но ничего, разберемся.
[36:27.880 --> 36:36.880]  Слева-направо. Пусть в ж-штрихе после сжатия, после того, как я сжал соцветие, пусть внезапно есть увеличивающий путь.
[36:36.880 --> 36:42.880]  Ну, надо еще тоже сказать, что я не только в вершинке жимаю, но и по рассочетанию тоже жимаю.
[36:43.880 --> 36:49.880]  Депенс. Да, именно так, именно так.
[36:49.880 --> 36:57.880]  Если она была корнем, если база была корнем нашего дерева, то надо еще просто проговорить, как порсочи сжимаются.
[36:57.880 --> 36:59.880]  Не только граф, но и как порсочи сжимаются.
[36:59.880 --> 37:06.880]  Ну, понятно, что все ребра вот здесь, бывшие, они пропадают, потому что они становятся ребрами внутри вершинки,
[37:06.880 --> 37:10.880]  ну и там остальные ребра, какие были ребра в порсочи, такие остаются.
[37:10.880 --> 37:15.880]  Поэтому, соответственно, вот эта вот насыщенная, если только, если она была корнем.
[37:15.880 --> 37:19.880]  Ну понятно, если она была корнем, то тут никаких ребер...
[37:22.880 --> 37:24.880]  Она не насыщенная, только если есть корень.
[37:26.880 --> 37:32.880]  Вот эта вот новая мега-вершинка не насыщенная, только если есть корень.
[37:34.880 --> 37:39.880]  Потому что если она была корнем, то там никаких ребер не было и не появилось.
[37:39.880 --> 37:45.240]  а если она была некорнима какой-то промежуточной вершинкой в нашем дереве, то в неё сверху идёт и
[37:45.240 --> 37:50.440]  ребро из красной. У меня из красной сверху идёт вниз синяя, значит вот это вот ребро сверху,
[37:50.440 --> 37:56.800]  оно остаётся, поэтому эта вершина будет насыщенной. Так, это хорошо, это важно.
[37:56.800 --> 38:06.480]  Ну окей, пусть в же штрихе появился увеличивающий путь. Ещё раз, если он нашу сжатую вершинку
[38:06.480 --> 38:10.760]  просто обходит стороной, где-то здесь находится, то ну и бог с ним. Понятно, что он будет в же,
[38:10.760 --> 38:16.560]  поскольку эти вершинки в этом пути не участвуют, поэтому он остаётся. Теперь пусть он как-то проходит
[38:16.560 --> 38:22.880]  через нас сжатую вершинку. Надо понять, как он через неё проходит. Значит, она либо концевая,
[38:22.880 --> 38:39.800]  либо какая-то промежуточная. Два случая. Давайте как-то назову, пусть будет W. Пусть W сжатая вершина.
[38:39.800 --> 38:59.000]  Значит, случай первый. Увеличивающий путь в же штрихе. Ну, одним из концов имеет W.
[38:59.000 --> 39:12.920]  Ещё раз, два случая. Либо она концевая, либо где-то посередине этого пути находится. Того
[39:12.920 --> 39:18.320]  увеличивающего пути, который в же штрихе нашёлся, она либо в конце, либо где-то посередине. Первый
[39:18.320 --> 39:26.240]  случай пусть она концевая. То есть у меня есть W и дальше чередование. Вот что-то такое. Это
[39:26.240 --> 39:33.240]  увеличивающий путь в же штрихе. Если она концевая, значит, она не насыщенная в новом графе. Значит,
[39:33.240 --> 39:37.200]  она, как вы правильно заметили, обязательно корень исходного дерева. Раз она в новом графе не
[39:37.200 --> 39:41.640]  насыщенная, она должна быть корнем в исходном графе. Теперь как разжать. Давайте вспомним,
[39:41.640 --> 39:48.000]  что такое тогда корень. Корень — это такая не насыщенная синяя вершинка. И дальше, раз мы сжали,
[39:48.000 --> 40:11.480]  значит, здесь было что-то такое. Ну, как-то так. Смотрите, она является концом увеличивающего
[40:11.480 --> 40:20.240]  пути. По определению, концы увеличивающего пути не насыщены. Хорошо. Значит, она не насыщена.
[40:20.240 --> 40:28.240]  Значит, W — это сжатие вот этого вот соцветия. Ну, давайте просто поймём вот это пунктирное
[40:28.240 --> 40:32.200]  ребро. Ну, где торчит? Ну, где-то торчит. Ну, там вот здесь, например. Ну, тогда понятно,
[40:32.200 --> 40:36.960]  как надо обойти этот соцвет. Вот так надо рожать. Потому что мне что нужно? Мне нужно всего лишь в
[40:36.960 --> 40:42.360]  этом цикле указать, в каком направлении пройти отсюда до сюда так, чтобы происходило
[40:42.360 --> 40:45.360]  чередование. Ну, тут понятно. Тут надо либо вот так вот, либо вот так вот идти. Понятно,
[40:45.360 --> 40:53.000]  что всегда можно. Как раз за счёт нечётности у меня в одном из двух направлений будет победа. Нет?
[40:53.000 --> 41:06.160]  Нет? Ну, ещё раз смотрите. Вот W — это вот это вот сжатое вот это вот всё. Дальше давайте рассмотрим
[41:06.160 --> 41:11.120]  вот это вот ребро. Это на самом деле ребро между вот этой точкой и какой-то из вершин этого
[41:11.120 --> 41:23.680]  соцветия. Какой-то конкретной вершины вот этого соцветия с базой S. Да, да, да. Если бы она была
[41:23.680 --> 41:27.720]  здесь, то можно бы выбрать так. То есть мне нужно добиться чередования. Вот, пожалуйста,
[41:27.720 --> 41:33.320]  вот чередование последнее насыщенное, здесь не насыщенное. Будь она вот здесь вот, я бы пошёл,
[41:33.320 --> 41:37.920]  наоборот, по другую сторону. Опять чередование. Ну и так далее. Как раз за счёт нечётности у меня
[41:37.920 --> 41:42.240]  ровно один из двух путей будет хороший. Ровно один из двух путей будет заканчиваться насыщенным
[41:42.240 --> 41:47.160]  ребром, а значит после него можно рисовать не насыщенным. Так, ну бомба. Всё, значит,
[41:47.160 --> 41:55.080]  мы разжали в этом случае. Второй случай. Пусть она какая-то промежуточная. Да, W — промежуточная
[41:55.080 --> 42:06.040]  вершина. Ой, ну давайте рисовать. Вот есть W, она промежуточная, в каком-то увеличивающем пути.
[42:06.040 --> 42:11.360]  Это значит, что ей инцидентно два ребра, одно из которых ребро парсоче, а другое — не ребро
[42:11.360 --> 42:17.360]  парсоче. Ну и там ещё что-то. Здесь что-то происходит, мне это не важно. Но главное,
[42:17.360 --> 42:23.320]  что одно из них ребро парсоче, а другое — не ребро парсоче. Мне нужно отражать, мне нужно
[42:23.320 --> 42:28.360]  указать, как вот здесь пройти внутренность этого цикла, чтобы всё это вместе превратилось в
[42:28.360 --> 42:36.640]  увеличивающий путь в исходном графе. Ну тут вроде всё приятно. Смотрите, раз есть насыщенное
[42:36.640 --> 42:46.520]  ребро, я знаю, что это за ребро. Это вот это ребро. У меня было это ребро, входящее насыщенное ребро
[42:46.520 --> 42:52.120]  в моё соцветие, никаких других входящих ребров появиться не могло, потому что ребра парсоче не
[42:52.120 --> 42:58.080]  пересекаются. Вот это ребро — это обязательно вот этот стебелёк, торчащий в нашу базу, в базу
[42:58.080 --> 43:03.800]  нашего соцветия. Ну а дальше мне нужно выйти каким-то образом по ненасыщенному. И дальше,
[43:03.800 --> 43:07.520]  как я уже говорил, в одну из двух сторон опять то же самое. Можно пройти либо поучиться,
[43:07.520 --> 43:15.720]  либо против, так чтобы закончиться насыщенным ребром и выйти по ненасыщенному. Давайте я картинку
[43:15.720 --> 43:30.200]  на 90 градусов переверну. Вот так вот нарисую. Вот. Ну и всё, вот это получается база. И дальше
[43:30.200 --> 43:39.640]  в одну из двух сторон можно рожать. Понятно? Ну всё, значит, этот случай разобран, в одну сторону доказали.
[43:39.640 --> 43:51.800]  Теперь обратно. Теперь обратно. Значит, в обратную сторону. Если в исходном графе g
[43:51.800 --> 44:00.040]  существовал увеличивающий путь, то после сжатия соцветия он не пропадёт, он по-прежнему будет.
[44:00.040 --> 44:13.120]  Так, ну хорошо. Давайте я как-нибудь это всё поназываю. Давайте я как-то назову. Давайте я скажу,
[44:13.120 --> 44:19.280]  что вот в этом исходном графе я рассматривал просчитание m, после сжатия оно стало m-штрихом.
[44:19.280 --> 44:31.960]  Давайте я нарисую наши соцветия. Как у меня выглядят соцветия? Ну как-то вот так. Вот. И
[44:31.960 --> 44:37.040]  здесь соцветия, собственно. Вот здесь вот какая-то такая штука, которая образовывала соцветия.
[44:37.040 --> 44:51.680]  Вот это вот соцветие. Вот. Всё вместе это иллюстрация просчитания m. Первое,
[44:51.680 --> 45:00.800]  что я сделаю, это возьму и внезапно прочередую типы ребер вот на этом вот пути от корня до базы.
[45:00.800 --> 45:10.200]  У меня всё поменяется, и вот это станет ненасыщенной. Это станет насыщенной, тут поменяются типы ребер.
[45:10.200 --> 45:19.320]  Вот. Больше ничего не меня, то есть я поменял только вот этот вот стебелёк. Я изменяю и
[45:19.320 --> 45:26.600]  очередую всё на стеблю. Я на стеблю что-то меняю, а здесь у меня всё остаётся. Тогда вот это станет
[45:26.600 --> 45:30.840]  свободной, потому что единственное инцидентное ребро из парсочи пропало, а это станет насыщенной.
[45:30.840 --> 45:42.200]  Пусть это будет n. Парсчитания n. Так. Хорошо. Значит, давайте то же самое в же штрихе сделаю.
[45:42.200 --> 46:03.360]  То же самое сделаю в же штрихе. Это всё было в графе g. Это симметрично для же штриха.
[46:03.360 --> 46:10.520]  Ж штрих отличается от g только тем, что в соцветия сжата в одну вершинку, но там вот эти вот типы
[46:10.520 --> 46:15.400]  ребер на стебле они не отличаются. Они такие же. Там такое же чередование. Сначала они насыщенные,
[46:15.400 --> 46:26.000]  потом насыщенные. Вот. И вот это вот всё. Это одна большая вершинка w. Так, это у меня парсчитания
[46:26.000 --> 46:44.640]  m. Ну и n штрих я аналогично построю, про чередовах на стебле. Значит, тогда у чудо опять w станет
[46:44.640 --> 46:53.200]  ненасыщенной. Что здесь база была ненасыщенная, что здесь теперь w стала ненасыщенная. Потому что
[46:53.200 --> 46:57.520]  опять, ей был инцидент на одно ребро, я его инвертировал, оно стало ненасыщенным. Значит,
[46:57.520 --> 47:09.080]  вершинка тоже свободна теперь. Вот. И что? Я хочу теперь доказать по факту, что если здесь был
[47:09.080 --> 47:17.640]  увеличивающий путь, то он будет и вот здесь вот. Вообще говоря, зачем я это сделал? Вообще говорят,
[47:17.640 --> 47:22.360]  сделать непонятно как. Потому что что такое увеличивающий путь в этом исходном графе? То есть,
[47:22.360 --> 47:28.320]  моя цель какая? Моя цель была взять какой-то увеличивающий путь в этом старом графе и построить,
[47:28.320 --> 47:32.680]  как он выглядит после сжатия этой вершинки. Но это непонятно как сделать априори, потому что
[47:32.680 --> 47:37.160]  увеличивающий путь может внутрь этого соцветия заходить как угодно. У меня же не только вот эти
[47:37.160 --> 47:41.060]  ребра есть, но и всякие другие. Увеличивающий путь мог войти сюда как-нибудь пройти, потом опять
[47:41.060 --> 47:47.000]  выйти, походить, погулять, зайти обратно, выйти и так далее. Когда его сжимаю, части пути тоже
[47:47.000 --> 47:53.040]  сжимаются и, возможно, там будут какие-то противоречия. Поэтому надо повозиться. Ну возимся.
[47:53.040 --> 48:01.440]  Еще раз, я хочу доказать, что эта штука, что есть увеличивающий путь, если есть увеличивающий путь
[48:01.440 --> 48:09.800]  здесь, то есть здесь. Но давайте сначала скажу следующее, что если есть путь здесь, то есть здесь.
[48:09.800 --> 48:18.520]  Значит, утверждение, если в исходном графе g был увеличивающий путь относительно m,
[48:18.520 --> 48:23.720]  то в том же графе g, но с прочесанием n, тоже есть увеличивающий путь. Это почему?
[48:39.800 --> 48:50.600]  Это совсем простой факт.
[49:06.600 --> 49:07.100]  Нет?
[49:09.800 --> 49:16.440]  А Бог его знает? Ну я не знаю, но как раз я утверждаю, что если тут был, то и здесь останется.
[49:16.440 --> 49:27.240]  Нет, в этом ты прикол, что увеличивающие пути сами по себе никак на цвета вот эти не завязаны.
[49:27.240 --> 49:32.880]  То есть в каком-то смысле я DFS просто запустил, что-то там покрасил еще внутри DFS,
[49:32.880 --> 49:42.000]  а мне нужно все пути рассмотреть. Ну непонятно. У меня вполне возможно какие-то увеличивающие
[49:42.000 --> 49:45.920]  пути я просто пропустил. Что-нибудь сильно петляющее между деревьями, я такие пути не уловлю.
[49:45.920 --> 49:51.360]  То есть мой алгоритм пытается найти только увеличивающие пути по типу начали в одном дереве,
[49:51.360 --> 49:54.720]  спустились вниз, перепрыгнули в другое, поднялись наверх. Возможно, есть другие,
[49:54.720 --> 50:02.240]  как ты между деревьями перепрыгиваешь. Вот, но если есть тут, то есть тут.
[50:02.240 --> 50:16.560]  Так, ладно, давайте по-другому сформулирую. Какое у нас есть эквивалентное условие на наличие пути
[50:16.560 --> 50:28.240]  от увеличивающего? Да, просочный максимален. У них мощность одинаковая, потому что я сделал
[50:28.240 --> 50:32.800]  чередование вдоль четного пути. Поэтому это максимально, если только если это максимально,
[50:32.800 --> 50:36.520]  у них просто мощность одинаковая. Значит, увеличивающие пути тоже. Если тут есть, то и тут есть.
[50:36.520 --> 50:50.840]  Почему? Так как мощность m и n максимальная, значит, они либо оба одновременно максимальны,
[50:50.840 --> 50:55.160]  либо одновременно не максимальны. Но поскольку относительно m был увеличивающий путь,
[50:55.160 --> 51:00.360]  значит m не максимально, тогда и n не максимально. m не максимально,
[51:00.360 --> 51:07.960]  следовательно, n не максимально, следовательно, есть увеличивающий путь относительно n.
[51:07.960 --> 51:28.760]  Сойдет? Вот. Ну, то же самое тут. Значит, вот это импликация. Если вот здесь,
[51:28.880 --> 51:35.360]  в новом графе g' относительно n' был увеличивающий путь, то и относительно m' он тоже будет,
[51:35.360 --> 51:39.080]  ну, по той же самой причине, потому что они отличаются чередованием вдоль четного пути,
[51:39.080 --> 51:45.120]  и значит, эта просочи одинакого размера, они либо оба одновременно максимальны, либо оба
[51:45.120 --> 51:51.000]  одновременно не максимальны. Значит, если есть путь тут, то есть путь тут. Ну, осталось доказать
[51:51.000 --> 52:03.640]  одну импликацию между n и n'. Так, ну, это вроде можно сделать. Мне осталось доказать следующее,
[52:03.640 --> 52:10.880]  что если в графе g есть увеличивающий путь относительно n, то в g' есть увеличивающий
[52:10.880 --> 52:23.480]  путь относительно n'. Относительно этого прочитания. Вот. Ну, давайте как-то вот,
[52:23.480 --> 52:29.800]  я его тут нарисую. Пусть есть какой-то увеличивающий путь относительно n. Если он сюда
[52:29.800 --> 52:34.600]  не заходит, если он вообще не задействует это соцветие, то и отлично. Оно полностью наследуется
[52:34.600 --> 52:40.280]  в n' в новом графе, оно таким же остается. Пусть оно как-то здесь заходит. Ну, давай что-нибудь
[52:40.280 --> 52:43.800]  стрёмно нарисую. Как-то заходит сюда, что-то использует, выходит. Потом опять зашло,
[52:43.800 --> 52:49.280]  поиспользовало, вышло. Ну, и там рано или поздно началось и закончилось в ненасыщенной вершинке.
[52:49.280 --> 53:00.040]  Вот. Ну, давайте возьмём, скажем, последний момент времени, когда мы были ещё в соцветии. А дальше
[53:00.040 --> 53:06.880]  просто давайте по циклу замкнём сюда или сюда. Так, чтобы сохранилось чередование. То есть я вот
[53:07.360 --> 53:12.480]  всю стрёмную часть пути отрезаю и оставляю только более короткий путь из ненасыщенной сначала до
[53:12.480 --> 53:19.040]  соцветия, ну и потом внутри соцветия так, чтобы оно шло вот до сюда вот. Тогда, соответственно,
[53:19.040 --> 53:25.000]  я любой мой увеличивающий путь обрезал до пути, которая начинается вот здесь вот. Ну опять,
[53:25.000 --> 53:30.720]  за счёт того, что у меня цикл нечётный, я могу пройти либо вот так вот, либо вот так вот,
[53:30.720 --> 53:36.720]  сохраняя чередование ребер. Значит, можно считать, что мой путь увеличивающий на самом деле не такой плохой,
[53:36.720 --> 53:43.480]  а вот такой вот просто. Как раз я пользуюсь активно тем, что вот это вот ненасыщенное,
[53:43.480 --> 53:48.600]  значит, можно вот это всё лишнее обрезать и просто пройти вот сюда вот. Ну и всё, понятно. А этот путь
[53:48.600 --> 53:53.320]  уже очевидным образом вот здесь вот наследуется. Просто вот это всё сжалось вершинку, соответственно,
[53:53.320 --> 54:02.040]  здесь вместо пути просто точка, вот эта вот w, ну а это всё наследуется как кусок пути. То есть я, да?
[54:02.040 --> 54:13.480]  Ну ещё раз, смотрите, вот пусть был какой-то стрёмный путь. Такой вот какой-то, да? Который
[54:13.480 --> 54:19.880]  начинается и заканчивается в ненасыщенный. Давайте пойдём с конца и найдём последнюю вершинку,
[54:19.880 --> 54:26.080]  ну точнее как бы последнюю вершинку из соцветия. Значит, это какая-то вершина, все вот эти в соцветии
[54:26.080 --> 54:32.520]  не лежат. Это какое-то ребро, насыщенное или ненасыщенное, мне до лампочки. В зависимости
[54:32.520 --> 54:38.240]  того, насыщенное оно или нет, я могу пойти либо вот так вот по циклу, либо вот так вот, чтобы
[54:38.240 --> 54:42.640]  здесь было чередование. Насыщенное, ненасыщенное, насыщенное, насыщенное и так далее. Значит, я начинаю,
[54:42.640 --> 54:49.360]  заканчиваюсь в ненасыщенной и у меня сохраняется чередование. Поэтому я любой мой более сложный путь
[54:49.360 --> 55:04.560]  урезал до пути, проходящего внутри соцветия полностью. Неважно, да, неважно. Ну что такое вообще
[55:04.560 --> 55:08.720]  увеличивающий путь? Это просто путь между ненасыщенными, чередующийся, чередующийся путь
[55:08.720 --> 55:15.040]  между ненасыщенными. Вот был такой большой, длинный, но я тебя покороче построю, вот он есть. А дальше
[55:15.040 --> 55:36.760]  его уже легко нарисовать в же штрихе. Кажется, все, корректность доказали. Вот, так еще раз, смотрите,
[55:36.760 --> 55:42.320]  я для этого специально, вот у меня был длинный путь, я иду с конца и выбираю первую вершинку в
[55:42.320 --> 55:48.240]  соцветии. Значит, все вот эти не в соцветии и они никак не конфликтуют с этим вот путем. Не с этим,
[55:48.240 --> 55:53.640]  не вот с этим. Да, вот здесь вот что-то было внутри соцветия, но я все это отбросил. Я оставил только
[55:53.640 --> 56:10.640]  вот этот хвост, а он у меня полностью снаружи лежит. Так, вопросы можете? Ну еще раз, потому что мы же
[56:10.640 --> 56:25.240]  обстроили, что DFS не работает. Да, DFS, если предписать ходить по очередному типу ребер. Еще раз?
[56:25.240 --> 56:37.680]  Ну, ну, ну. Еще раз, ну DFS вам на чередование обустроить обязательно. Как в чередовании в DFS
[56:37.680 --> 56:57.800]  обеспечиваете? Да. Ну еще раз, я примерчик же рисовал, что если вы, вот скажем, вот это и вот
[56:57.800 --> 57:26.000]  этого, надо отсюда до сюда найти, дойти на самом деле. Давайте продублирую. Так, фигню, фигню. Еще раз,
[57:26.000 --> 57:33.080]  вот что вы тут делаете? Вам надо найти вот этот путь, это единственный увеличивающий. Пусть вам
[57:33.080 --> 57:40.000]  не повезло и вы пошли вот так вот. Вы помечаете ее использованной или нет? Если помечаете,
[57:40.000 --> 57:47.960]  то GG, потому что надо было вот так вот пойти, по-другому никак. А если вы не помечаете и ходите
[57:47.960 --> 57:51.920]  из нее и вот так вот, и вот так вот, это экспонента, конечно, потому что если у вас вот столько много
[57:51.920 --> 57:58.640]  треугольничков будет, и вы в каждом, то есть тут проблема в том, что вы в вершину могли
[57:58.640 --> 58:03.760]  прийти и четным путем, и нечетным. Если вот такую цепочку сделать, то вы как бы, ну тут будет два
[58:03.760 --> 58:12.920]  в степени пополам. Вот еще раз, да, вот это как раз то, что я сказал. Если вы храните два бульских
[58:12.920 --> 58:17.240]  флага, можно прийти так и так, то вы из каждой вершинки можете в худшем случае дважды запуститься
[58:17.240 --> 58:23.880]  DFS. И вот на таком примере это будет экспонента, потому что вы вот сюда придете дважды, потом сюда
[58:23.880 --> 58:28.080]  четыре, сюда восемь раз, ну и так далее. Ну там, может как-то можно соптимизировать,
[58:28.080 --> 58:45.160]  но короче, это в общем случае не сработает. Короче, я обещаю, что не работает. Ну подумайте,
[58:45.160 --> 58:53.240]  ну что-то там должно довольно быстро все сломаться. Так, значит еще раз, вот к секущему моменту,
[58:53.240 --> 58:58.440]  что мы доказали? Я там стер наш три этапа, ну три варианта, ну ладно. Значит еще раз,
[58:58.440 --> 59:04.120]  моя задача была найти увеличивающий путь. То есть мой алгоритм такой же, как всегда. Пока можно,
[59:04.120 --> 59:08.720]  находи увеличивающий путь, чередуй, запускай заново. Пока есть увеличивающий путь, чередуй,
[59:08.720 --> 59:17.360]  запускай заново. Итого, либо я нашел увеличивающий путь, либо ребра из синих ведут только в красный,
[59:17.360 --> 59:24.120]  тогда return, потому что нельзя увеличивать по лемме. Либо нашлось ребро между синими,
[59:24.120 --> 59:30.280]  но тогда можно бесплатно сжать соцветия и решать задачу в меньшем графе. Поскольку я сжимаю,
[59:30.280 --> 59:34.400]  у меня уменьшается число вершин, у меня упрощается граф, можно в новом графе искать
[59:34.400 --> 59:40.880]  увеличивающий путь. И дальше, по доказанному утверждению, если наличие увеличивающей пути в
[59:40.880 --> 59:46.480]  исходном равносильно наличию увеличивающей пути в получившем ж-штрихе. Значит, я сжал соцветия,
[59:46.480 --> 59:51.920]  попытался найти здесь увеличивающий путь, если нашел, отлично, сделал чередование с помощью вот
[59:51.920 --> 59:58.120]  этих всех трюков, то есть что я должен уметь разжимать соцветия. Ну и соответственно увеличил
[59:58.120 --> 01:00:02.280]  в исходном графе. Если в новом не нашлось, то и в старом не было. Значит, можно опять же завершиться.
[01:00:02.280 --> 01:00:05.040]  Ну всё, более-менее такой алгоритм.
[01:00:05.040 --> 01:00:12.320]  Вот, про время давай что-нибудь скажу немножко.
[01:00:12.320 --> 01:00:28.960]  Значит, в наивной реализации это будет работать за
[01:00:28.960 --> 01:00:51.840]  n2m, где n как обычно число вершин, m число ребер. Ну почему? Потому что, как работает у меня алгоритм
[01:00:51.840 --> 01:00:59.840]  примерно, что я примерно n итераций, не больше n раз, пытаясь найти увеличивающий путь.
[01:00:59.840 --> 01:01:10.360]  Ну понятно, что в увеличивающих пути у меня столько каков размер просочетания, значит,
[01:01:10.360 --> 01:01:17.360]  это не больше n пополам даже, но не важно. Значит, n раз я ищу увеличивающий путь. Внутри процедуры
[01:01:17.360 --> 01:01:23.920]  поиска увеличивающего пути у меня в худшем случае мне нужно будет много раз сжать соцветия.
[01:01:23.920 --> 01:01:30.040]  Вот я один раз построил эти деревья, нашёл ребро между синими, сжал. Ещё раз всё это заново
[01:01:30.040 --> 01:01:34.560]  запускаю, опять нашёл ребро между синими, сжал. И так далее понятно, что сжатие будет опять
[01:01:34.560 --> 01:01:38.160]  максимум n раз, потому что у меня уменьшается число вершин, значит, максимум n сжатий.
[01:01:38.160 --> 01:01:45.160]  Значит, внутри вот этого вот, внутри попытки найти увеличивающий путь у меня будет не больше,
[01:01:45.160 --> 01:01:52.760]  чем n сжатий. Ну понятно, каждая из которых, каждая итерация, каждая попытка сжатия,
[01:01:52.760 --> 01:01:59.760]  это по сути просто DFS, построение деревьев моих. И потом, когда я нахожу ребро между синими,
[01:01:59.760 --> 01:02:07.440]  я сжимаю ещё какой-то линейный проход. То есть, каждая из которых, каждая из которых,
[01:02:07.440 --> 01:02:15.800]  это по сути просто DFS. Ну давайте я буду сейчас за от m, как обычно,
[01:02:15.800 --> 01:02:22.880]  предполагаю, что m больше, чем n у меня. Потому что иначе можно разбить графные
[01:02:22.880 --> 01:02:27.200]  компоненты связанности, в каждой решать отдельно, а в пустых графах ничего не делать.
[01:02:27.200 --> 01:02:33.240]  Ну вот асимптотика как раз. То есть, я n раз нахожу путь, чтобы найти путь,
[01:02:33.240 --> 01:02:37.560]  мне нужно сделать n сжатий, каждая из которых занимает линейное время.
[01:02:43.560 --> 01:02:48.680]  Да, конечно, конечно. Вот если я после нескольких сжатий нашёл какой-то путь,
[01:02:48.680 --> 01:02:52.760]  то мне нужно рекурсивно всё это развернуть, всё это разжать. То есть у меня, по факту, кстати,
[01:02:52.760 --> 01:02:58.920]  у меня после многочисленных сжатий внутри одной вершинки могут быть и вершинки, и мега вершинки,
[01:02:58.920 --> 01:03:03.960]  каждая из которых, само ещё рекурсивно является сжатий, соцветиям. То есть вот это всё соцветия,
[01:03:03.960 --> 01:03:09.480]  каждая из которых, возможно, тоже внутренней соцветиям. Вот вам надо всё это рекурсивно разжать.
[01:03:09.480 --> 01:03:14.680]  Ну у меня есть процедура однократного разжатия, вот по утверждению. Он может, соответственно,
[01:03:14.680 --> 01:03:24.880]  многократно разжать до исходного графа. Вот. Будем крадем. Ну вот утверждается,
[01:03:24.880 --> 01:03:31.240]  что если повозиться, то можно сделать просто за НМ. Так же, как в Куне.
[01:03:31.240 --> 01:03:53.680]  Давайте поумнее реализация будет за НМ. Вот. Поумнее реализация следующая. Смотрите,
[01:03:53.680 --> 01:04:00.400]  давайте ещё раз в наивной подчеркну. Здесь я делаю следующее. Если я внезапно нашёл соцветия,
[01:04:00.400 --> 01:04:06.840]  то я его сжимаю и заново всё, я забываю про цвета, я забываю про те деревья, которые я строил. Всё,
[01:04:06.840 --> 01:04:11.360]  у меня новый граф же штрих, я в нём работаю с нуля. Это вот наивная реализация. То есть я сжал,
[01:04:11.360 --> 01:04:15.160]  и всё, забыл про то, что это вообще какое-то соцветие, я решаю задачу на новом графе.
[01:04:15.160 --> 01:04:21.360]  Можно сделать поумнее, и можно не забывать, что это на самом деле, как оно было получено,
[01:04:21.360 --> 01:04:31.640]  и просто сказать, окей, значит, вот это вот, это на самом деле теперь одна большая мегавершина,
[01:04:31.640 --> 01:04:38.920]  которая сжимается в одну большую синюю вершинку, и дальше можно продолжать, как бы вот,
[01:04:38.920 --> 01:04:45.440]  in place, искать здесь, ну короче, строить деревья дальше. То есть теперь я просто считаю, окей,
[01:04:45.440 --> 01:04:50.600]  вот это дерево у меня подсократилось, поджалось, я считаю это всё одной большой синей вершинкой,
[01:04:50.600 --> 01:04:55.640]  и продолжаю строить деревья. Ну а там я нахожу какие-то ребра, крашу что-то в красный, нахожу
[01:04:55.640 --> 01:04:59.520]  увеличивающие пути и так далее. Вот, ну вот если это аккуратно реализовать, аккуратно
[01:04:59.520 --> 01:05:09.080]  реализовать такое сжатие как бы внутри процедуры построения дерева, то будет что-то такое. Ну вот,
[01:05:09.080 --> 01:05:28.480]  ну то есть как бы давайте что-нибудь напишем. После одного сжатия можно продолжить процедуру
[01:05:28.480 --> 01:05:47.120]  построения дерева. Идём дальше. Ну то есть что такое идём дальше? Что вообще, как работает наш
[01:05:47.120 --> 01:05:52.000]  алгоритм построения дерева? Он видит синюю вершинку, рассматривает все исходящие из неё
[01:05:52.000 --> 01:05:57.280]  ребра. Если внезапно нашлось ребро в ненасыщенную, то пообеда мы нашли увеличивающий путь. Ну,
[01:05:57.280 --> 01:06:03.720]  значит мы можем разжать эту штуку по дороге. Если он нашёл ребро в какую-то насыщенную,
[01:06:03.720 --> 01:06:09.800]  то значит мы её красим в красный, и у меня появляется новое ребро, у меня дерево расширяется.
[01:06:09.800 --> 01:06:19.560]  Ну и вот так вот делаю, пока весь граф не обойду. Всё, значит поэтому у меня по-прежнему также будет
[01:06:19.560 --> 01:06:24.520]  максимум n раз. То есть я по-прежнему у меня внешний цикл такой же, что я n раз ищу увеличивающий
[01:06:24.520 --> 01:06:30.000]  путь. Но внутри я не запускаю рекурсивно каждый раз новый DFS построения дерева после каждого
[01:06:30.000 --> 01:06:35.960]  сжатия, а по сути это всё один большой сплошной DFS, внутри которого происходит сжатие соцветий.
[01:06:35.960 --> 01:06:48.360]  То есть код такой. Не больше n раз найти увеличивающий путь. Внутри просто DFS,
[01:06:48.360 --> 01:07:05.520]  ну как бы параллельно, да, вместе со сжатиями. Ну и как раз это будет nm. Если это всё аккуратненько
[01:07:05.520 --> 01:07:11.400]  хорошо рисовать, надо ещё подумать над тем, как именно мы делаем сжатие, потому что, ну как будто
[01:07:11.400 --> 01:07:15.160]  бы у меня вершинки объединяются в одну компоненту, да, и мне нужно как-то вот там
[01:07:15.160 --> 01:07:20.160]  ребра ещё объединить. Ну короче надо повозиться, но вот можно это реализовать так, чтобы работал
[01:07:20.160 --> 01:07:41.160]  nm. Вот. Ну чё вроде всё. Ох, вопрос. Ну кажется память на самом деле не растёт. Окей, давайте
[01:07:41.160 --> 01:07:46.320]  попробуем что-нибудь сказать. Значит на самом деле можно реализовать алгоритм примерно следующим
[01:07:46.320 --> 01:07:58.200]  образом. Значит можно сделать, то есть смотрите, я не буду пользоваться там nm никаким. Я просто скажу
[01:07:58.200 --> 01:08:04.480]  примерно так. Вот когда я сжимаю вершинки, я их все, то есть я теперь скажу, что они все соответствуют
[01:08:04.480 --> 01:08:11.080]  вот этой вот базе. То есть у меня есть база, база моего соцветия. И я у них, у всех как бы перенаправлю
[01:08:11.080 --> 01:08:15.600]  указатель вот сюда. То есть на самом деле, что все они, по сути я всё это сжал вот в эту точку. Вот так
[01:08:15.760 --> 01:08:25.280]  я сюда всё это сжал. Теперь они все указывают вот на эту вот базу. И дальше, если я в какой-то
[01:08:25.280 --> 01:08:31.240]  момент времени хочу как бы посмотреть на список ребер, исходящих из вот этой вот мега вершинки,
[01:08:31.240 --> 01:08:37.320]  то я на самом деле просто могу просмотреть вообще все вершинки, входящие вот сюда вот,
[01:08:37.320 --> 01:08:43.960]  и независимо рассмотреть все списки смежности. То есть я не делаю склейку вот этих вот, ну то есть
[01:08:43.960 --> 01:08:50.320]  еще раз, у меня у каждой вершины есть исходящие ребра, но я не делаю их склейку там ни через мерч,
[01:08:50.320 --> 01:08:55.040]  ни через какой-нибудь СНМ. Я просто поддерживаю, что у меня здесь есть много вершин, и чтобы
[01:08:55.040 --> 01:08:59.360]  рассмотреть все исходящие ребра, я в тупую прохожу сначала соседи этой, потом этой, потом этой,
[01:08:59.360 --> 01:09:06.560]  потом этой. То есть у меня ребра не дублируются на самом деле. Не, СНМ был бы. Как работает СНМ?
[01:09:06.560 --> 01:09:12.360]  СНМ скорее, что я создаю новую мега, буквально новую какую-то структуру, которая хранит все вот
[01:09:12.360 --> 01:09:17.080]  это вот вместе со всеми исходящими ребрами. То есть как раз вот СНМ, это как если бы я создал
[01:09:17.080 --> 01:09:24.080]  нечто новое, туда все свалил, скопировал, и у меня бы как раз память начала бы расти. А тут я так
[01:09:24.080 --> 01:09:30.120]  не делаю. Я говорю, что наоборот, как бы у меня все сжалось в одну точку, и при ее рассмотрении,
[01:09:30.120 --> 01:09:36.160]  при рассмотрении ребер инцидентных ей, я рассматриваю все вот эти вот и просто пробегаюсь
[01:09:36.160 --> 01:09:41.200]  по их спискам смежности, по тем, которые в самом начале у меня в исходном графе есть. То есть я не
[01:09:41.200 --> 01:09:46.560]  завожу новых списков, я буквально их не мерзжу, я их не склеиваю в один. Их было 5, вот они 5 будут.
[01:09:46.560 --> 01:09:58.080]  Да, да, да, да.
[01:09:58.080 --> 01:10:02.960]  Да.
[01:10:02.960 --> 01:10:09.680]  Так же. Ну типа...
[01:10:09.680 --> 01:10:19.200]  То есть у вас теперь как бы вот, у вас каждая вершина исходного графа теперь соответствует
[01:10:19.200 --> 01:10:24.840]  какому-то соцветию в новом графе. Ну то есть о соцвете номируется номером базы, вершинкой
[01:10:24.840 --> 01:10:31.160]  базы. То есть теперь каждая вершина графа исходного соответствует некой базе. У вас есть по факту
[01:10:31.280 --> 01:10:41.360]  отображение из вершины исходного графа в базы нового графа. Ну не, мы не проверяем наличие
[01:10:41.360 --> 01:10:48.120]  ребра, мы по факту рассматриваем список соседей. Построение дерева по сути ДФС, я рассматриваю
[01:10:48.120 --> 01:10:53.280]  просто все исходящие ребра. Чтобы просмотреть все исходящие ребра, я рассматриваю все исходящие
[01:10:53.280 --> 01:11:00.440]  ребра для каждой из вершин, составляющих эту базу, которые наверное можно получить просто
[01:11:00.440 --> 01:11:06.920]  просто пройдя вообще по всем вершинам графа и проверить те из них, которые вот на эту базу
[01:11:06.920 --> 01:11:28.680]  ссылаются. Ну это надо подумать. Типа вектор тех, которые вот в ней лежат. Ну возможно можно так.
[01:11:28.680 --> 01:11:32.680]  Я просто видел реализацию, где вообще никаких новых структур не заводится, вот буквально
[01:11:32.680 --> 01:11:44.680]  просто все. Ну да, там что-то вылезет явно. Ну как-то так. Я тут в детали примерно такая идея,
[01:11:44.680 --> 01:11:50.040]  что никаких новых структур не используется, что как бы каждая вершинка ссылается просто на новую
[01:11:50.040 --> 01:11:56.560]  базу. А дальше уже надо думать. Так, ну наверное это все. Вопросы какие-нибудь может быть?
[01:11:56.560 --> 01:12:01.560]  Тогда спасибо за внимание. Всем удачи на зачетенном экзамене. Всем пока.
