[00:00.000 --> 00:12.760]  Всем доброго вечера! Сегодня у нас будет следующая лекция, посвященная таким интересным вещам, как
[00:12.760 --> 00:21.960]  UML. Мы немного затронем, что же такое методология разработки ПО и посмотрим, из каких частей
[00:21.960 --> 00:29.920]  состоит разработка ПО, как люди на самом деле разрабатывают ПО. Смотрите,
[00:29.920 --> 00:37.440]  сегодня такая лекция технически будет сложная, но важная, потому что в первых
[00:37.440 --> 00:43.400]  итерациях проекта вас попросят нарисовать разные UML диаграммы. А для того, чтобы нарисовать UML
[00:43.400 --> 00:51.160]  диаграммы, надо понять, что же такое UML. Давайте вспомним, что мы с вами в прошлый раз узнали.
[00:51.160 --> 01:09.120]  Напоминание, что у нас было в предыдущей серии. Да, Solid, Kiss, Dry, Diagny. Да, мы с вами еще поговорили
[01:09.120 --> 01:14.920]  про первые паттерны и антипаттерны, и на самом деле мы начали с вами разбирать UML. Что же мы с
[01:14.920 --> 01:24.680]  вами разобрали? Класса. Мы с вами поговорили про диаграмму классов. Не только все классами
[01:24.680 --> 01:33.440]  обеспечивается. Мы с вами вспомнили шутку Solid, шутку Dry, Kiss, Diagny, первые паттерны и антипаттерны,
[01:33.440 --> 01:39.480]  и поговорили про диаграммы классов. На самом деле, UML состоит не только из диаграммы классов. Это,
[01:39.480 --> 01:46.280]  на самом деле, я бы так сказал, первая декомпозиция, которую можно сделать с UML. Давайте познакомимся с
[01:46.280 --> 01:56.160]  что же такое UML. Давайте отмотаемся. Небольшое прошлое, а приблизительно лет на 30 назад.
[01:56.160 --> 02:10.600]  Да? Давайте историческая аналогия. Значит, 90-е годы. Что происходит в мире IT? Появляется
[02:10.600 --> 02:23.880]  интернет в публичном масштабе. Раз. Что это за закон? Я, может, забыл. Закон Мура, может быть?
[02:23.880 --> 02:34.880]  Про ускорение. Да, это закон, который говорит, что за каждые 18-24 месяца количество транзисторов
[02:34.880 --> 02:40.160]  всеми увеличивается в два раза в вычислительной схеме. Но тогда этот закон был выполнен еще и
[02:40.160 --> 02:48.520]  для центральных процессоров. Ну да, в общем, много что сопоставляется, но с вычислительными
[02:48.520 --> 02:53.640]  мощностями сейчас это работа только для видеокарм, чтобы было понимание. Так, еще.
[02:53.640 --> 03:05.080]  Это было такое, я бы сказал, второе дыхание мира сети. Скорее бы сейчас, где-то сейчас происходит,
[03:05.080 --> 03:14.160]  я бы так сказал, если не третье. Вот, давайте еще. Мы же все-таки с вами тут пришли говорить
[03:14.160 --> 03:21.920]  за разработку. Давайте поймем, какие языки появились в 90-х годах. Python это хорошо, но это не
[03:21.920 --> 03:35.040]  наш кейс. Появились замечательные два языка. Первый язык это Java. А потом, что еще было? Какой еще
[03:35.040 --> 03:48.640]  язык был? C Sharp. И в чем их особенность этих языков? По сравнению с C++ тем же самым. Они чисто
[03:48.640 --> 03:58.760]  объектно-ориентированные. Да, то есть, если мы с вами поговорим про тот же Java, то мы с вами
[03:58.760 --> 04:04.520]  понимаем, что в ней все объекты, мы, кажется, с вами в прошлый раз про это говорили, отнаследуются от
[04:04.520 --> 04:12.720]  замечательного класса под названием Object. Вот, и так забегаю наперед. Значит, в этой неделе у
[04:12.720 --> 04:18.800]  некоторой группы уже начнутся разборы паттернов. Значит, один из паттернов взят по факту из Java.
[04:18.800 --> 04:25.360]  Ну, реализации там можно найти в Java. В C++ там другая реализация будет, но в целом это тоже
[04:25.360 --> 04:31.120]  порождающий паттерн. То есть, у нас есть чистое ООП. Теперь давайте поймем, что происходит с
[04:31.120 --> 04:42.880]  технологией, если она внедряется в каждый утюг. Ну, вот смотрите, у нас появились чисто
[04:42.880 --> 04:48.160]  объектно-ориентированные языки. Мы с вами понимаем, что в ООПшных языках у нас есть методы,
[04:48.160 --> 04:55.920]  у нас с вами есть поля, у нас с вами есть наследования и все такое. И у нас появляется диаграмма класса,
[04:55.920 --> 05:04.040]  которую мы с вами в прошлый раз видели. Какой из этого можно сделать гипотетический вывод,
[05:04.040 --> 05:17.680]  особенно если мы с вами привередливаем математики? А? Превратить код в набор диаграмм. И из набора
[05:17.680 --> 05:26.480]  диаграмм генерировать код. Вот. И этот цель как раз преследует язык QML. Значит QML расшифровывается
[05:26.480 --> 05:36.240]  как Unified Modeling Language. Унифицированный язык моделирования. И здесь все подчиняется такой
[05:36.240 --> 05:45.480]  инструкции, что если у нас с вами есть способ каким-то образом построить диаграммки, провалидировать
[05:45.720 --> 05:50.280]  их, проверифицировать их, разницу между валидацией и верификацией мы будем с вами говорить чуть
[05:50.280 --> 05:59.960]  позже, то давайте не будем писать код, а будем строить диаграммки. Отличный план. Как вы думаете,
[05:59.960 --> 06:07.360]  он был реализован в реаленсе? Да, кстати, про блок схемы мы сегодня поговорим.
[06:15.480 --> 06:24.480]  На самом деле ответ нет. Эта идея не очень хорошо прижилась. Почему? Потому что язык очень-очень
[06:24.480 --> 06:33.560]  сложный. Крайне сложный. Чтобы владеть совершенствием надо пройти семестровый курс и дай боже,
[06:33.560 --> 06:40.160]  если он пройдет хорошо. Раньше был такой курс, на него сейчас тоже можно будет походить в
[06:40.160 --> 06:50.320]  седьмом семестре по выбору и узнать, что же такое UML в полных прекрасах. Но нотация в нем
[06:50.320 --> 06:57.360]  крайне сложная. Помните, мы даже когда смотрели с вами в диаграмму классов, то мы с вами начали
[06:57.360 --> 07:05.880]  сильно путаться. Было такое связи какие? Там четыре типа связи есть между классами. И что, если мы
[07:05.880 --> 07:09.920]  с вами путаемся между этими четырьмя типами классов, то с другими диаграммами будет намного
[07:09.920 --> 07:15.080]  сложнее. Но на самом деле эти диаграммы в первом приближении можно использовать для того, чтобы
[07:15.080 --> 07:21.280]  объяснить другому человеку, что мы имеем в виду. И всякие архитектурные сложности, в принципе,
[07:21.280 --> 07:27.400]  можно тоже отобразить на этих диаграммах. И вот чтобы мы с вами начали понимать друг друга,
[07:27.400 --> 07:31.760]  будем считать, что мы с вами сегодня будем строить павилонскую башню в программировании,
[07:31.760 --> 07:42.920]  в некоторой абстракции. Мы с вами поговорим про UML. Так, вопросы по этому слайду? Нет. Значит,
[07:42.920 --> 07:49.680]  как рисовать диаграммки эти? Значит, есть разные способы. Кто-то, кстати, сказал, что Visual Studio Code
[07:49.680 --> 07:54.320]  есть некоторые плагины, которые это поддерживают. Это да. Но главное проверять, что в этих моделях
[07:54.320 --> 08:01.200]  есть валидация. Сразу скажу, что в заданиях по паттерну нельзя будет взять, написать сначала
[08:01.200 --> 08:06.960]  код, а потом нарисовать, сгенерировать диаграммки из этого. Вот. Нужно сделать аккуратно. То есть,
[08:06.960 --> 08:12.840]  продумать архитектуру, а потом уже перекладывать на диаграммки. Значит, есть два тула. Это бесплатные
[08:12.840 --> 08:20.720]  тулы. Первый тул — это модель. А второй тул называется Papyrus. Есть еще очень крутые тулы типа Magic
[08:20.720 --> 08:26.440]  Draw, но они, собственно, стоят некоторых денег и оплатить, к сожалению, мы сейчас их не можем.
[08:26.440 --> 08:32.360]  Значит, смотрите, чтобы вы понимали, как этот тул выглядит. Значит, это вот такая вот по факту
[08:32.360 --> 08:39.360]  IDN, среда интегрированной разработки, но только на уровне диаграммок. То есть, вместо того,
[08:39.360 --> 08:44.720]  чтобы писать код в правом окне, у нас рисуются диаграммки. Причем связи между этими диаграммками
[08:44.720 --> 08:50.680]  валидируются, и ничего лишнего нельзя тут нарисовать. На самом деле проблема, знаете, в чем оказалась?
[08:50.680 --> 08:55.720]  Более того, в UML. Как только люди начали реализовывать эти диаграммы и писать инструменты,
[08:55.720 --> 09:02.680]  для всей этой проверки они зачастую очень быстро крашатся. Просто из-за того, что мы начинаем
[09:02.680 --> 09:07.040]  рисовать набор диаграмм, у нас одна диаграмма не состыковала со второй, вторая с третьей,
[09:07.040 --> 09:13.040]  и мы не можем просто выйти из ошибочного состояния. Такое реально бывает на практике. Но в первом
[09:13.040 --> 09:17.360]  приближении можно задавать эти все штуки. Более того, эти штуки умеют генерировать код.
[09:17.360 --> 09:25.200]  Второй тул это Papyrus. В принципе, та же самая история. Это наследник от Eclipse. Я не знаю,
[09:25.200 --> 09:31.520]  слышали про такую IDE как Eclipse? В общем, для нее дофиги еще плагинов написано,
[09:31.520 --> 09:37.320]  и каждый плагин это отдельный тул. Здесь видно диаграмма класса какого-то проекта.
[09:37.320 --> 09:42.200]  Собственно, можно скачать эти тулы и посмотреть, научиться им пользоваться.
[09:42.200 --> 09:52.400]  Есть про тулы и вопросы. Еще я же сказал, что есть Visual Studio Code с плагином для DRAW-YO,
[09:52.400 --> 09:58.400]  который умеет валидировать модели. Сам DRAW-YO лучше не использовать, потому что он нифига
[09:58.400 --> 10:06.160]  не валидирует результат. Но это так, если мы с вами говорим про прототипирование. Точнее,
[10:06.160 --> 10:09.440]  если мы говорим про реальные кейсы про прототипирование, в принципе,
[10:09.440 --> 10:13.960]  можно использовать визуальные редакторы. Главное, чтобы схемы быстренько кидались.
[10:13.960 --> 10:20.960]  Картинка. Вам надо пояснить картинку. Представьте себе, что вы едете в лифте. К сожалению,
[10:20.960 --> 10:29.720]  у нас лифтов не очень много. Давайте представим кейс. Вы поехали к другу, к старшекурснику.
[10:29.720 --> 10:37.480]  Где сейчас ФМИ-старшекурсники живут? Не, в Тринажке. В Тринажке сколько этажей?
[10:37.480 --> 10:50.640]  Ну, 12 этажей. И у вас есть гениальная идея. Мы же тут фиксиков двигаем. Представьте себе,
[10:50.640 --> 10:59.520]  что вы едете к другу старшекурснику на 12 этаж. Предлагаете ему идею. Давай запилим это. У
[10:59.520 --> 11:06.880]  вас опыта не очень большой. А у вашего коллеги опыта достаточно большой. Ну и говорит, ну что,
[11:06.880 --> 11:12.320]  давай. И у вас есть время, пока вы едете на лифт с первого до 12 этажа, это приблизительно
[11:12.320 --> 11:19.680]  полминуты, объяснить, что же происходит. Вы можете показать картинку. Вот, смотри. Это будет
[11:19.680 --> 11:25.760]  выглядеть так. Нам для техники нужна эта. Какие-то основные особенности разложительной диаграммы.
[11:25.760 --> 11:31.000]  Да, вместо того, чтобы объяснять, мы на таком языке будем писать. Не понять,
[11:31.000 --> 11:38.720]  что будет. А вот так вот диаграмма есть и все сразу видно. Вот. Как бы друг к другу мы с вами
[11:38.720 --> 11:43.680]  можем понять. Да и можно, кстати, и по диаграмме тоже скажу наперед, можно будет понять,
[11:43.680 --> 11:53.400]  хорошо ли у вас устроена архитектура. Наверное, если вы нарисуете диаграмму класса и поймете,
[11:53.400 --> 11:58.200]  что у вас в диаграмме классов от одного класса идет огромное количество связей к другому классу,
[11:58.200 --> 12:05.240]  наверное у вас нарушен принцип high cohesion low coupling, который мы с вами говорили. Вот.
[12:05.240 --> 12:10.760]  Либо если у нас с вами появится треугольник какой-нибудь, типа у нас есть класс A,
[12:10.760 --> 12:22.360]  который использует некоторые класс B, а класс B использует класс C, а потом оказывается,
[12:22.400 --> 12:30.000]  что класс A использует класс C. Вопрос. Такая диаграмма что у нас с вами нарушает? Да,
[12:30.000 --> 12:37.240]  такая диаграмма у нас нарушает закон Диметра. Вот. То есть на диаграмме можно следить.
[12:37.240 --> 12:42.920]  Знаете, что касается диаграмм UML? Диаграмма UML делится на два больших типа. Значит,
[12:42.920 --> 12:49.440]  первый тип это структурные диаграммы, которые показывают связь между объектами. Вторые типы
[12:49.920 --> 12:56.200]  это поведенческие диаграммы. Это диаграммы, которые показывают поведение между сущностями,
[12:56.200 --> 13:02.240]  которые у нас с вами есть в системе. Значит, и структурных диаграмм нас сегодня будет
[13:02.240 --> 13:09.040]  интересовать. Диаграмма классов и диаграмма компонентов и диаграмма пакетов. В правой части
[13:09.040 --> 13:15.240]  мы с вами будем рассматривать сегодня тоже некоторый набор диаграмм. Мы рассмотрим с
[13:15.240 --> 13:23.600]  вами диаграмму activity, use case и диаграмму state machine, по факту диаграмма состояний. Плюс
[13:23.600 --> 13:29.240]  еще выделяет отдельный набор под диаграмм. Это диаграммы, связанные с взаимодействием двух
[13:29.240 --> 13:34.200]  объектов с течением времени. К таким относится, допустим, диаграмма последовательности,
[13:34.200 --> 13:40.840]  которую мы с вами тоже сегодня рассмотрим. В общем, вот такая вот большая картинка. В конце
[13:40.920 --> 13:45.840]  презентации есть ссылка на эту картинку и есть ссылки на все описания всех видов диаграмм.
[13:45.840 --> 13:51.240]  Так что картинку это можно не запоминать. В общем, вот эти типы диаграмм мы сегодня с
[13:51.240 --> 13:56.480]  вами посмотрим. Значит, что касается диаграмм классов. Мы с вами ее уже посмотрели в прошлый
[13:56.480 --> 14:01.400]  раз, поэтому сегодня я решил вместо этого сделать некоторое упражнение. Я покажу,
[14:01.400 --> 14:10.600]  как можно из текста описания выделить класса. То есть, как понять, что может быть класс. Вот.
[14:10.600 --> 14:24.680]  Значит, так. Есть ли вопросы по введению в UML? Или пока вообще ничего не понятно? Да,
[14:24.680 --> 14:31.360]  мы сейчас как раз по ним пойдем. Ну, опять же, не так подробно, чтобы вот прямо стать
[14:31.360 --> 14:38.720]  экспертами по UML и сдать экзамен сразу по UML. Но в первом приближении. Значит, смотрите,
[14:38.840 --> 14:44.760]  давайте начнем с первой диаграммы. Это диаграмма вариантов использования. Вот давайте попробуем
[14:44.760 --> 14:51.840]  понять, что, по вашему мнению, такой вариант использования. Еще это расшифровывается как
[14:51.840 --> 15:16.200]  use case. Не понял. Так, ладно. А что она так? По-другому это еще называется use case.
[15:22.240 --> 15:34.160]  Как вы понимаете, я бы сказал, это с точки зрения бизнеса. Описание процесса. Что же у вас
[15:34.160 --> 15:45.240]  происходит? Представьте себе case. Вариант использования. Обучение в университете. Давайте
[15:45.240 --> 15:56.840]  поймем, как, из чего он состоит. Ну, это понятно. Смотрите, на самом деле, тут очень важно понять,
[15:56.840 --> 16:04.760]  кто будет играть роль. Смотрите, у нас с вами есть вот этот вот челдобончик. А что, настолько она
[16:04.760 --> 16:20.840]  богает? Смотрите, у нас есть челдобончик. Это этот студент. Не поверите, есть еще другой
[16:20.840 --> 16:34.400]  челдобончик. С другой стороны. Нет, я, конечно, давайте это, некрасиво. Так,
[16:34.400 --> 16:44.360]  давайте челдобончик с этой же стороны будет. Препод. И есть такое понимание, что у нас есть
[16:44.360 --> 16:55.480]  система. В нашем случае это университет. Вот давайте подумаем, как эти люди могут
[16:55.480 --> 17:19.080]  взаимодействовать. Ну, давайте, посещение занятий, да. Я теперь понял, почему доска.
[17:19.080 --> 17:40.160]  Степендию. Сдача зачетов. Да. Что еще? ЗП. Вот. Значит, есть еще стипендия. Смотрите,
[17:40.160 --> 17:57.920]  что, что объединяет стипендию зарплату? Так, смотрите, смотрите песню, бухгалтер, милый мой бухгалтер.
[17:57.920 --> 18:18.680]  Есть еще получение? Что там называется? Нет, какой задавальник? Бухгалтер же у нас тут.
[18:18.680 --> 18:35.320]  Отправка денег, вот. Выплата, да. Спасибо. Смотрите, и оказывается, что получение стипендии и
[18:35.320 --> 18:44.800]  получение зарплаты, они у нас общие относительно того, какие выплаты у нас производятся. Так ведь?
[18:44.800 --> 18:54.640]  Ну, что это через всю одну и ту же бухгалтерию проходит. Да, поэтому, когда сценарий получения
[18:54.640 --> 19:02.240]  стипендии, это на самом деле включает в себя вариант использования. То, что я рисую крокляшками,
[19:02.240 --> 19:09.240]  это вариант использования. Если у нас здесь есть зарплата, то мы тоже на самом деле ее включаем
[19:09.240 --> 19:18.120]  в получение выплат. Да, и дальше мы объединяем это все дело. То есть, смотрите, из чего состоит
[19:18.120 --> 19:23.240]  вариант использования, сценарий использования. Это некоторые сценарии взаимодействия по оцени,
[19:23.240 --> 19:29.440]  некоторыми акторами. Значит, акторы, вот эти вот люди, которые у нас нарисованы, они называются
[19:29.440 --> 19:36.920]  акторами. Вот, а круги, это вариант использования. Вот пример диаграммы вариантов использования,
[19:36.920 --> 19:46.040]  на самом деле, мы с вами ее тоже тут нарисовали. На самом деле, они вот так вот изображены,
[19:46.040 --> 19:56.360]  наверное. Вот так вот, я бы даже сказал. Ну, здесь такая же картинка. Значит, смотрите,
[19:56.360 --> 20:05.280]  единственное, что мы с вами видим, что здесь, не поверите, тоже есть наследование. Видите,
[20:05.280 --> 20:26.800]  на экране есть кругляшочки с видом extents. Есть include, а есть extents. Значит, чем отличается?
[20:26.800 --> 20:34.680]  Это все дело. Include означает, что при выполнении одного варианта использования нам нужно обязательно
[20:35.280 --> 20:45.920]  выполнить другой вариант использования. Да, ну, нотация не точная, поэтому можно либо extents,
[20:45.920 --> 20:52.040]  либо extents использовать. Вот, include, а extents, это значит, смотрите, мы выполняем какой-то
[20:52.040 --> 21:00.360]  вариант использования, да, и потом, допустим, при выполнении некоторого условия мы переходим
[21:00.360 --> 21:09.200]  в другой вариант использования. Пример. Вы когда-нибудь видели ошибки на экране? Вот представьте
[21:09.200 --> 21:15.560]  себе, у вас идет какой-то сценарий, выполняется, а потом внезапно что-то происходит не так. Мы с
[21:15.560 --> 21:20.400]  вами сворачиваем в некоторый альтернативный сценарий, в котором нам выдается ошибка. И вот как раз
[21:20.400 --> 21:26.800]  выдача ошибки, это является альтернативным вариантом использования к варианту использования,
[21:26.800 --> 21:41.440]  который у нас есть. Ага. Ну, пример. Вот опять же пример с получения выплат. Вы такие,
[21:41.440 --> 21:47.200]  стучитесь с системой, тук-тук-тук, дайте мне денег. Видите, такие приходите, маскируетесь под
[21:47.200 --> 21:53.600]  препода и захотите зарплату препода получить, а потом так и идете. Так, стипидиальный отдел
[21:53.600 --> 21:58.760]  смотрит, там на самом деле два отдела, зарплатный отдел и стипидиальный отдел. Зарплатный отдел
[21:58.760 --> 22:04.840]  смотрит и говорит, вы мне зарплату не заплатили. Таки смотрит, вас нету. Говорит, а вы кто? Вы студент?
[22:04.840 --> 22:12.120]  Так, идите отсюда, вам другого аудитория. Вот, то есть у нас был основной сценарий, то есть если бы
[22:12.120 --> 22:17.000]  пришел преподаватель, у нас бы этот сценарий прошел успешно, а если у нас нет, то нам надо
[22:17.000 --> 22:27.720]  свернуться в другой вариант использования. Да, это extents. Вот, то есть смотрите, вот на примере у нас
[22:27.720 --> 22:37.320]  есть заказ еды и он расширяет вариант использования заказ вина. Почему? Ну, мы заказываем еду, да,
[22:37.320 --> 22:44.560]  допустим, а потом заказываем в вино. Что нам надо сделать для того, чтобы заказать в вино? Паспорт
[22:44.560 --> 22:51.960]  показать, да. То есть у нас добавляется два действия. Покажите паспорт, точнее, да, да, одно действие,
[22:51.960 --> 23:00.440]  покажите паспорт после этого. И тогда мы переходим уже в вариант использования заказать в вино. Вот,
[23:00.440 --> 23:07.360]  значит, вот такая вот интересная вещь. Причем на каждом из этих вещей можно написать стрелочков,
[23:07.360 --> 23:15.280]  что же происходит. Так, ну и смотрите, мы сразу понимаем, на этой диаграмме мы сразу понимаем,
[23:15.280 --> 23:21.560]  кто будет клиентом нашей системы, кто этой системой будет пользоваться. В нашем системе
[23:21.560 --> 23:29.480]  по университет пользуются ей студенты, преподаватели и бухгалтеры. Ну, может быть, еще кто-то,
[23:29.960 --> 23:38.040]  следующий кафедр, деканату, вот это вот всего. Вот, а что касается системы, связанной с рестораном,
[23:38.040 --> 23:45.720]  то мы с вами видим, что здесь у нас шеф отвечает за то, что он готовит пищу и по факту подтверждает
[23:45.720 --> 23:57.800]  заказы на пищу. Клиенты заказывают еду, есть еще официанты, есть еще кто? Кассир. То есть сразу
[23:57.800 --> 24:12.280]  видны все действия, которые у нас есть. Да. Ну да, нам все равно, то есть студент приходит получать
[24:12.280 --> 24:23.240]  стипендию. Да, да, да, конечно же. Ну то есть все равно это проходит через бухгалтерию, получается,
[24:23.240 --> 24:29.480]  что стипендию включает в себя выплату каких-то средств. Просто по какому физлицевому счету это
[24:29.480 --> 24:37.560]  проводить, ну, отдельный вопрос. То есть как бы смотрите, ну, отличие там стипенди не облагается
[24:37.560 --> 24:48.400]  налогом, зарплата облагается налогом. Так, смотрите, так, по этой диаграмме вопросы. Вот именно по этой
[24:48.400 --> 24:57.360]  диаграмме. То есть вы приходите, общаетесь с заказчиками и начинаете выяснять, что же вам
[24:57.360 --> 25:04.320]  надо делать. И вот такими большими мазками вы выделяете те сценарии, которые вам нужны. Значит,
[25:04.320 --> 25:10.280]  смотрите, когда мы пишем сценарий, в каждом юскейсе нам необходимо прописать следующее. Название этого
[25:10.280 --> 25:16.160]  варианта использования, оно написано в кругляшочках. Действующие лица. Как понять действующие лица из
[25:16.160 --> 25:24.640]  этой картинки. Да, человек, кто-то соединен с человечками. Дальше у нас идет основной сценарий. Здесь
[25:24.640 --> 25:30.280]  эта штука, которая не прописывается прямо в сценарии. Это прописывается обычно в отдельном документе,
[25:30.280 --> 25:37.600]  в котором по шагам расписывается, что делает каждый из акторов, что делает система. Пример.
[25:37.600 --> 25:50.520]  Пример. Посещение занятий. С чего начинается этот. Этот сценарий. Давайте продумаем. Шаг
[25:50.520 --> 26:00.760]  первый. Преподаватель приходит на занятие. Не, образно говоря. Отлично. Давайте представим,
[26:00.760 --> 26:11.200]  что аудитория уже открыта. Второй шаг. Студент приходит на занятие. Это основной сценарий.
[26:11.200 --> 26:19.880]  Если на шаге два студент не находит свободных студий в аудитории, он приступает к альтернативному
[26:19.880 --> 26:29.520]  шагу поиск стульев в других аудиториях. Шаг три. Студент начинает слушать преподавателя.
[26:29.520 --> 26:37.800]  При этом преподаватель начинает вести какой-то материал. То есть у нас тут два актора принимают
[26:37.800 --> 26:48.920]  в участие. Шаг четыре. Преподаватель спрашивает, есть ли вопросы. Это студент. Мы можем перейти
[26:48.920 --> 26:55.440]  либо в альтернативный сценарий ответ на вопрос, если студент задает вопрос, либо перейти дальше.
[26:55.440 --> 27:06.480]  Можно написать, повторяем шаги три и четыре до тех пор, пока пара не закончилась. Либо пара не
[27:06.480 --> 27:12.280]  закончилась, либо материал не закончился. Прямо по шагам прописываем все действия. Не поверите,
[27:12.280 --> 27:20.400]  это сильно упрощает разработку. Я так расскажу из примеров. Система пишет, по факту главный
[27:20.400 --> 27:28.560]  разработчик, я и мой друг, мы ее вместе пишем. Оказалось так, что я вовлечен в процесс преподавания,
[27:28.560 --> 27:33.840]  а мой друг в него влечен в процесс преподавания. Вы не поверите, когда мы расписали для некоторых
[27:33.840 --> 27:39.560]  сценариев, когда мы только начали писать сайт, что надо делать по шагам, по сценарию. Вы не
[27:39.560 --> 27:48.960]  поверите, разработка этой фичи ускорилась раз в пять. Просто в лед. Поэтому такие сценарии полезно
[27:48.960 --> 27:59.400]  прописывать. Это что касается use case. Возможно, что я после лекции как раз вам пришлю пример того,
[27:59.400 --> 28:05.240]  как это выглядит. Прямо сделаю скрин из этого документа, чтобы вы поняли, как пишут варианты
[28:05.240 --> 28:12.960]  использования. Более того, при помощи вариантов использования вы не поверите, можно начать писать
[28:12.960 --> 28:21.680]  тесты, которые будут проверять этот вариант использования. Так, понятно ли, что такой вариант
[28:21.680 --> 28:29.040]  использования и зачем он нужен? Важная фишка. Так, давайте дальше. Поговорим немножко про
[28:29.040 --> 28:35.360]  выделение классов. Значит, смотрите, представьте себе, вам присылают техническое задание. Это
[28:35.360 --> 28:39.760]  такой документ, в котором описано, как система должна выглядеть, из каких составных частей она
[28:39.760 --> 28:46.800]  должна состоять и так далее. И как понять, а где же классы в этой системе? То есть что за
[28:46.800 --> 28:53.000]  сущности будут стоять между собой классы? Значит, бывают несколько способов, а один из них это так
[28:53.000 --> 29:00.040]  называемые CRC карточки. Это значит вот такого рода карточки, в которой мы пишем верхней части
[29:00.040 --> 29:10.000]  названия нашего класса. Дальше мы прописываем, какие ответственности у этого класса, то есть по факту
[29:10.000 --> 29:15.640]  контракт, который он должен исполнять, а справа это с какими другими объектами он должен
[29:15.640 --> 29:24.160]  коммуницировать. Примеры. У нас есть с вами продажа sales. Значит, какие у него ответственности? У
[29:24.160 --> 29:31.200]  него, значит, должна быть промоакция, обеспечить промоакции, делать проводки, обеспечивать некоторые
[29:31.200 --> 29:37.560]  поведения и так далее. А есть коллаборанта, то есть продажи кого вовлекают? Это партнеры, которые
[29:37.560 --> 29:43.280]  нам продают товар, либо определенные клиенты, которые этот товар покупают. То же самое с
[29:43.280 --> 29:50.840]  транзакцией. У транзакции какие обязанности? Это обеспечить перевод денег, трансфер, и аудит. То
[29:50.840 --> 29:56.520]  есть что такое аудит? Это, в общем, проверка того, что у нас транзакции проходят нормально,
[29:56.520 --> 30:05.000]  нет никаких макинаций и так далее. Да, то есть это финансовая вещь. То есть любой отчет к вам
[30:05.000 --> 30:11.280]  приходит, вас начинают проверять, у вас есть вся история транзакций. Замечательно. Вот. И коллаборанты
[30:11.280 --> 30:19.320]  у нас кто транзакции вставляет? Это считыватель с карты, когда мы оплачиваем это все, и клиенты. Вот.
[30:19.320 --> 30:24.920]  И таким образом мы с вами явно можем выделить, то есть если у нас для какого-то объекта мы точно
[30:24.920 --> 30:29.200]  можем описать некоторые ответственности, и некоторый набор коллаборантов, скорее всего,
[30:29.200 --> 30:37.960]  это будет класс. При этом давайте подумаем, что означает контракт? Вот в левом столбце,
[30:37.960 --> 30:50.680]  в responsabilites, в контракте, для чего мы можем это использовать? А? Ну в левой картинке, то есть
[30:50.680 --> 31:01.280]  это вот здесь. Раз, два, три, четыре. Для чего можно использовать в первом приближении вот те
[31:01.280 --> 31:17.920]  ответственности, которые мы с вами вынесли? А? Ну это раз. Да, можно их разделить. Но давайте
[31:17.920 --> 31:25.080]  в первом приближении. Мы с вами пытаемся выделить классы. У класса что должны быть? Методы и поля. Где
[31:25.080 --> 31:34.280]  здесь в первом приближении будут методы, а где поля? Да, responsibility, это скорее всего будут методы,
[31:34.280 --> 31:42.520]  а коллаборатор, это скорее всего поля, с которыми мы можем взаимодействовать. Плюс? Более того,
[31:42.520 --> 31:50.760]  мы с вами можем понять из этого, что в принципе справа коллабораторы в каком количестве они будут
[31:51.240 --> 31:59.640]  в каком отношении. То есть мы понимаем скорее всего, что транзакция это одна карта, один клиент. Если мы
[31:59.640 --> 32:06.280]  говорим про продажу, там может быть один клиент, один партнер и так далее. То есть мы с вами можем
[32:06.280 --> 32:13.000]  понять в каком отношении, в какой сущности это можно хранить. Это первый способ, который можно выделять
[32:13.000 --> 32:23.320]  класс. Понятно ли, что такое CRC-карточка? Вот тоже можно попробовать. И есть второй пример. Ой, так это уже
[32:23.320 --> 32:30.880]  пример. Метод Abotton. Он тоже применим. Значит, в чем сущность? Мы берем текст, берем карандашик,
[32:30.880 --> 32:36.040]  ну либо выделитель, и начинаем выделять это все. Значит, первое, что мы делаем, выделяем
[32:36.040 --> 32:43.360]  существительные. Потом все существительные в тексте объединяем в группы синонимов. Кто такие
[32:43.360 --> 32:52.200]  синонимы? Ну, по факту, да. Если вы знаете Matlock, то ой, квалентность. Слова похожи по смыслу. Значит,
[32:52.200 --> 32:57.320]  третье, мы исключаем числительные. Я вот, честно, русский язык не помню. Мне кажется, числительные это
[32:57.320 --> 33:05.000]  отдельная часть речи. Да, так что это, можно вычеркнуть, исключаем числительные. Значит, дальше исключаем
[33:05.000 --> 33:13.160]  эфемерные слова, типа система, данные, информация, служба. Ну, в зависимости от контекста. То есть,
[33:13.160 --> 33:19.760]  понимаете, такие слова, которые встречаются везде в информационной технологии. Такие слова еще
[33:19.760 --> 33:28.400]  называют стоп-словами. Возможно, кто знает этот термин в машинном обучении, слышал про него.
[33:28.400 --> 33:37.080]  Вот. Ну да, видите. И последнее, исключаем слова, которые вот совсем к предметной области не подходят.
[33:37.080 --> 33:44.240]  После этого мы можем все эти существительные проверить на метод CRC и оставить только те
[33:44.240 --> 33:53.000]  необходимые, которые являются названиями класса. Давайте пример. Я взял тоже как раз из одного текста
[33:53.000 --> 33:58.120]  описание как раз по курсу, который будет в дальнейшем. Вот представьте себе у нас текст.
[33:58.120 --> 34:02.920]  Служба выполняет заказы по доставке заказов клиентов. Доставка заказов шляется по маршруту,
[34:02.920 --> 34:09.120]  составляющим из несколько путей и так далее. Давайте попробуем выделить здесь те существительные.
[34:09.120 --> 34:28.600]  Давайте я даже их буду выписывать. Так, поехали. Служба. Заказ. Доставка. Ну, давайте не повторять.
[34:28.600 --> 34:54.480]  Клиент. Клиент, маршрут. Ага. Тип, да? Тип, транспорт. Ну да, мы уже с вами понимаем,
[34:54.480 --> 35:20.440]  что скорее всего эта спецификация будет. Местонахождение. Ну, вот давайте пример.
[35:20.440 --> 35:48.840]  Номер. Номер. Ну, давайте сразу поймем. Первое, что из этого хочется выкинуть.
[35:50.440 --> 36:03.200]  Смотрите, начинаем с и чего. Объединим синонима. Если у нас тут синонимы, ну в принципе нету.
[36:03.200 --> 36:08.200]  Единственное, можно сказать, что транспорт бьется на некоторые подтипы. То есть у нас появляются
[36:08.200 --> 36:15.400]  уже некоторые подтипы. Значит, смотрите, второе, что здесь есть, что я не перечислил, это, я не знаю,
[36:15.400 --> 36:23.560]  есть такие отглагольные существительные или нет. Да, вот смотрите. Отслеживание,
[36:23.560 --> 36:33.560]  передача, получение, это на самом деле глаголы. Передача. Передача, получение,
[36:33.560 --> 36:47.440]  отслеживание, это по факту глаголы. Ну да, ну поэтому скорее всего это будут какие-то методы классов.
[36:47.440 --> 36:56.040]  Да, то есть это как раз то, что мы можем с вами назвать responsibilities. Убираем их.
[36:56.040 --> 37:14.360]  Доставка. Да, доставка и заказ на самом деле в данном случае это, я бы сказал, больше синонима. То есть
[37:14.360 --> 37:25.920]  если, смотрите, если бы это был бы какой-нибудь магазин другой, там магазин имеется в виду товара
[37:25.920 --> 37:33.520]  спортивных, то мы можем оформить заказ, но в качестве заказа может быть написано, что это либо
[37:33.520 --> 37:42.760]  отправка домой, да доставка, либо это у нас мы ножками приходим и оформляем заказ. Поэтому в данном
[37:42.760 --> 38:01.640]  случае это синонимы и лучше писать, что это заказ. Да, контекст учитываем. Что? Здесь тонкий
[38:01.640 --> 38:07.240]  момент, как бы у нас должна быть хотя бы одна сущность, в которой что-то будет храниться.
[38:07.240 --> 38:21.440]  Да, да, да. То есть, смотрите, дальше что мы можем сделать? Давайте эфемерные слова выкинем отсюда.
[38:21.440 --> 38:35.640]  Какие слова являются эфемерными? Служба, тип, история, потому что скорее всего история это какой-то
[38:35.640 --> 38:48.680]  список. Номер, нет, это смотрите, это уже другая вещь. Ну и вот у нас уже остался какой-то из списков.
[38:48.680 --> 39:04.480]  Это заказ, клиент, маршрут, плечо, транспорт, местонахождение, номер. Что мы исключили? А потому
[39:04.480 --> 39:17.080]  что это глаголы. А глаголы это методы. А теперь смотрите, применяю метод CRC. Да, на ходу. Давайте
[39:17.080 --> 39:29.360]  подумаем, у каких из этих сущностей есть какие-то ответственности. Клиент оформляет заказы. Да,
[39:30.120 --> 39:45.840]  значит это класс. Ну да, можно сказать так, транспорт прокладывает маршрут, местонахождение. Давайте
[39:45.840 --> 39:52.240]  подумаем, местонахождение является ли чем, что-то он хранит, какие-то обязанности он использует,
[39:52.240 --> 39:58.640]  или наоборот его используют. Его используют, то есть у него никакого ответственности нет,
[39:58.640 --> 40:07.200]  поэтому скорее всего это не будет классом. Да, это явно будет поле класса, в котором он относится.
[40:07.200 --> 40:22.800]  Да, номер тоже поле. Маршрут. Ну маршрут скорее всего хранит стартовое местонахождение,
[40:22.800 --> 40:31.440]  конечное местонахождение, текущее местонахождение, и хранит набор, и набор хранит всех плеч. Да, а плечо,
[40:31.440 --> 40:39.200]  у плечо хранит стартовое местонахождение этого пути переправы и конечные пути переправы.
[40:39.200 --> 40:52.040]  И как, по какому типу транспорта там можно доставлять? Ну смотрите, если бы мы с вами говорили
[40:52.040 --> 41:01.800]  про чистый C++, скорее всего плечо было бы структурой, а не классом. Да, но пока что класса от структуры мы с вами не отделяем.
[41:22.040 --> 41:30.720]  Ну окей, да. Да, но опять же тут есть споры, и это еще можно уточнять. То есть это просто первый набросок того,
[41:30.720 --> 41:43.440]  что с заказом делать. Ну она хранит как с ними себе номер заказа и клиент, который, да, и что в нем содержится.
[41:43.440 --> 41:50.320]  На самом деле это первая часть описания, там в описании в три раза больше. И там как раз будет про
[41:50.320 --> 41:54.720]  заказ, что он хранит там, что и так далее есть. Да, я просто это опустил. То есть заказ,
[41:54.720 --> 41:59.720]  если читать дальше по контексту, то это будет классом. То есть таким образом у нас появляется
[41:59.720 --> 42:03.600]  сколько классов? Пять классов всего. Заказ, клиент, маршрут, плечо и транспорт.
[42:11.120 --> 42:17.000]  Ну да, но по факту эта структура будет хранить точку X, точку Y, возможно еще высоту и более ничего.
[42:17.120 --> 42:23.120]  То есть скорее всего будут его использовать, нежели чем он будет использовать кого-то.
[42:23.120 --> 42:31.040]  Ну да, ну если он тупо-тупо совсем...
[42:41.240 --> 42:46.480]  Ну да, тут тонкий момент. Да, то есть мы можем ошибиться в первом приближении на плюс-минус два
[42:46.480 --> 42:56.200]  класса, давайте скажем так. Окей? Так, понятно ли, что такое, вот как можно выделять классы в первом приближении?
[42:56.200 --> 43:06.040]  Да, вот смотрите, вот как раз замечательная задачка для контрольной, допустим. Мне кажется.
[43:06.040 --> 43:18.800]  Так, перерыв делаем? Да, давайте тогда отдохнем. Вот. Это вот то, что у меня осталось, но у нас что-то другое осталось.
[43:18.800 --> 43:28.920]  Ну не суть важная. Давайте перерыв тогда. Вот пример варианта использования, который можно использовать.
[43:28.920 --> 43:30.920]  Извините за тавтологию.
[43:30.920 --> 43:40.920]  Пример получить список заданий на проверку. Из чего он состоит? Он состоит из действующих лид, из основного сценария.
[43:40.920 --> 43:47.920]  Основной сценарий. Преподаватель нажимает на кнопку проверка заданий. Система отправляет запрос баз в данных.
[43:47.920 --> 43:56.920]  Получить все объекты типа посылка, статус которых он ревью. Поскольку субмиссион находится в студент, то необходимо реализовать запрос.
[43:56.920 --> 44:03.920]  Нужно получить субмиссион среди студентов, то есть это уже наметка, что надо реализовать в виде задачи.
[44:03.920 --> 44:12.920]  Преподаватель должен иметь доступ к проверке заданий студента. В третьем случае, третьем шаге нам система должна вернуть список субмиссионов.
[44:12.920 --> 44:22.920]  Вот такой пример варианта использования. Достаточно простой. Иногда бывает очень много шагов, которые надо разбить на составные подчестия.
[44:22.920 --> 44:27.920]  Так, а мы с вами продолжаем. Следующий тип диаграмм. Это диаграмма последовательности.
[44:27.920 --> 44:35.920]  В общем, из чего она состоит? Она состоит опять же из акторов в системе. Но только это уже более внутренняя система.
[44:35.920 --> 44:46.920]  Дальше здесь на самом деле диаграмма не совсем точная. Здесь уже рисуются на самом деле не классы. То есть это не классы.
[44:47.920 --> 44:51.920]  Это на самом деле экземпляры этого класса. Сразу что было понимание.
[44:51.920 --> 44:57.920]  И дальше мы с вами говорим следующее, что у нас есть с вами некоторые вызовы методов.
[44:57.920 --> 45:04.920]  И вот по вертикали у нас с вами находится линия жизни. То есть представим себе, что это у нас шкала по времени.
[45:04.920 --> 45:14.920]  А дальше мы с вами делаем некоторые шаги. Первым шагом мы делаем ставку карт в ATM. ATM это если что банкомат.
[45:14.920 --> 45:20.920]  То есть у банкомата должен быть метод вставить карту. Как он обычно реализован?
[45:24.920 --> 45:32.920]  Не, ну в реальных сценариях. То есть у нас есть отверстие, в которое мы вставляем карту. То есть мы должны прочитать карту и понять, что же происходит.
[45:32.920 --> 45:41.920]  После этого мы делаем verify карт. То есть мы обращаемся к инструменту под названием bank server и вызываем метод у него verify карт.
[45:41.920 --> 45:49.920]  Дальше у нас наступает здесь альтернатива. Видите alt? То есть возникает один из двух случаев.
[45:49.920 --> 45:57.920]  Либо у нас все с карты окей, тогда мы запрашиваем PIN код ввести у клиента. То есть вызываем у клиента метод ввести PIN код.
[45:57.920 --> 46:07.920]  А если карта невалидная, то мы говорим, что карта невалидная, выплевываем карту, возвращаем.
[46:07.920 --> 46:17.920]  На самом деле смотрите, я сразу скажу, что картинка неверная, потому что по факту, если точно рисовать диаграмму, здесь нужно нарисовать штрихи.
[46:17.920 --> 46:27.920]  Штрихи – это возвращение результата функции. А дальше этот клиент должен вызвать функцию у отм ввести PIN.
[46:27.920 --> 46:39.920]  Да, а здесь у нас должна карта извлечься. То есть скорее всего здесь происходит следующее. Если точно говорить, то у отм вызывается метод exit карт у себя же.
[46:39.920 --> 46:49.920]  И возвращается результат, что карта невалидная. А дальше мы уже двигаемся к следующим шагам, мы вводим с вами пароль.
[46:57.920 --> 47:07.920]  Ну да. Да, да, да.
[47:07.920 --> 47:13.920]  Карта валидная, засасываем ее. Запрашиваем PIN, засасываем, не возвращаем.
[47:13.920 --> 47:27.920]  Да. А вот смотрите, здесь сразу видно следующая интересная вещь, что если у нас с вами есть стрелочка обратная у функции, то это так называемые синхронные функции.
[47:27.920 --> 47:33.920]  То есть мы вызываем функцию и получаем у нее результат прямо сразу же. То есть в этой функции мы делаем ретёр.
[47:33.920 --> 47:39.920]  Бывает такое, что функции не сразу возвращают результат, а в течение какого-то другого момента времени.
[47:39.920 --> 47:45.920]  Такие функции называются ассихронными. И нам не понятно, когда действительно вернется результат.
[47:45.920 --> 47:56.920]  И не поверите, в web такое достаточно часто. Вот. И для того, чтобы получить результат ассихронной функции, зачастую это все зашивать в другую функцию, которая называется callback.
[47:56.920 --> 48:06.920]  То есть я тебе отправляю запрос, но после того, как ты выполнишь этот запрос, выполни функцию, которую я тебе прислал.
[48:06.920 --> 48:16.920]  Вот. И с этим связано, во-первых, один анти-паттерн, а с другой стороны, при помощи этой штуки реализовывается один паттерн.
[48:16.920 --> 48:24.920]  Вот. Если интересно, давайте я напишу сразу эти два паттерна, чтобы они у нас сохранились в качестве доп-материала.
[48:24.920 --> 48:44.920]  Значит, паттерн называется, первый, это цепочка ответственности, chain of responsibility, а анти-паттерны, которые с этими связаны, их два, если не правильно реализовать.
[48:44.920 --> 48:54.920]  Первый называется callback hell, а? Типа того. А второй называется Hadouken code style.
[48:54.920 --> 49:09.920]  Если говорить про код, то зачастую готовьтесь к тому, что первые итерации review вам будут писать вот такое.
[49:09.920 --> 49:15.920]  И вы должны понимать, что это такое. Хотите увидеть, что это такое?
[49:15.920 --> 49:40.920]  Это высокий уровень вложенности.
[49:40.920 --> 49:51.920]  И вы не поверите, такой же аналог Hadouken code style был найден в исходной базе Яндекса. Да, это было забавно.
[49:51.920 --> 49:57.920]  Вот. Высокий уровень вложенности. Стараемся сокращать. Это высокий уровень вложенности. Вот.
[49:57.920 --> 50:05.920]  Ну, это такие отступления, но сразу, чтобы понимали, к чему это может произойти. Вот другой пример.
[50:05.920 --> 50:09.920]  Он менее детальный. В общем, здесь просто все подписано.
[50:09.920 --> 50:14.920]  Типа, откуда нам все приходит. Там в квадратных скобочках написан gate.
[50:14.920 --> 50:22.920]  Дальше мы вызываем сообщение, а дальше мы показываем, в какой момент времени наш процесс живет по факту, активная деятельность.
[50:22.920 --> 50:25.920]  То есть мы вызывали функцию, дальше что-то происходит, мы возвращаем это все.
[50:25.920 --> 50:31.920]  Более того, если мы можем с вами создавать экземпляры какого-то класса, вызывая его конструктор,
[50:31.920 --> 50:36.920]  и тогда показывается метод create, что мы действительно создаем объект этого класса.
[50:36.920 --> 50:43.920]  Вот. И есть еще, вот тут, кстати, как раз картинка с thick callback, если вы можете ее увидеть.
[50:43.920 --> 50:49.920]  Да, то есть если на презентации посмотреть, вот тут есть функция типа ajax, потом вызывается функция,
[50:49.920 --> 50:52.920]  а после нее вызывается функция под названием callback у другого объекта.
[50:52.920 --> 50:58.920]  То есть мы можем результат функции возвращать не на наш объект, а в какой-то другой объект.
[50:59.920 --> 51:00.920]  Вот.
[51:00.920 --> 51:05.920]  И еще бывает optional, то есть что у нас в каком-то варианте может случиться.
[51:05.920 --> 51:14.920]  Вот. И на самом деле при помощи этой диаграммы можно видеть, каким образом по времени взаимодействуют одни объекты с другими объектами.
[51:14.920 --> 51:18.920]  Какие вызовы являются синхронными, а какие вызовы являются асинхронными.
[51:20.920 --> 51:25.920]  Это позволяет навести порядок именно в отображении линий жизни.
[51:25.920 --> 51:26.920]  Так.
[51:26.920 --> 51:34.920]  Плюс еще тут можно типа показать, какие действия нас требуют дополнительного ввода информации.
[51:34.920 --> 51:37.920]  Вот тут есть вкладочки с названием ref.
[51:37.920 --> 51:42.920]  Так. Понятна ли цель, для чего нужна диаграмма последовательств.
[51:44.920 --> 51:50.920]  Еще раз. Диаграмма последовательств нужна для того, чтобы провалидировать взаимодействие между объектами
[51:50.920 --> 51:54.920]  и понять, кто кого-то выдает и в какой момент времени.
[51:56.920 --> 52:00.920]  И это, допустим, реализация одного из вариантов использования.
[52:01.920 --> 52:02.920]  По времени.
[52:06.920 --> 52:07.920]  Вторая диаграмма.
[52:07.920 --> 52:09.920]  Так, двигаемся дальше.
[52:10.920 --> 52:13.920]  Вторая штука – это диаграмма состояния.
[52:13.920 --> 52:16.920]  Значит, к чему это относится?
[52:17.920 --> 52:22.920]  Представьте себе, что у нас есть какой-нибудь замечательный класс,
[52:22.920 --> 52:27.920]  который на самом деле может работать в нескольких режимах.
[52:28.920 --> 52:30.920]  Представьте себе кулер с водой.
[52:32.920 --> 52:35.920]  В каких режимах он у нас с вами может работать?
[52:38.920 --> 52:39.920]  Внутренних.
[52:40.920 --> 52:43.920]  Он либо не работает, либо…
[52:47.920 --> 52:55.920]  Он либо может нагревать холодную воду, либо ослужать теплую воду до холодной.
[52:56.920 --> 52:58.920]  То есть у него есть несколько режимов работы.
[52:58.920 --> 53:02.920]  При этом эти режимы работы он переключает внутри себя.
[53:04.920 --> 53:07.920]  То есть он сам управляет своим состоянием.
[53:08.920 --> 53:14.920]  И вот класс, который умеет управлять своим состоянием, обычно называется активным классом или активным объектом.
[53:14.920 --> 53:18.920]  И диаграмма состояния обычно рисуется для активных объектов.
[53:20.920 --> 53:22.920]  В чем особенности активного объекта?
[53:22.920 --> 53:25.920]  Этот объект может управлять другими объектами.
[53:26.920 --> 53:27.920]  Второй пример.
[53:27.920 --> 53:30.920]  У него обычно есть свой поток управления.
[53:31.920 --> 53:33.920]  И три объекта этот автономен.
[53:34.920 --> 53:43.920]  Давайте попробуем привести пример активного объекта, с которым вы сталкиваетесь каждый день.
[53:45.920 --> 53:46.920]  А?
[53:47.920 --> 53:48.920]  Кто?
[53:49.920 --> 53:50.920]  Кулер.
[53:50.920 --> 53:51.920]  Кулер, да.
[53:52.920 --> 53:54.920]  Вот точно каждый день.
[53:55.920 --> 53:56.920]  А?
[53:56.920 --> 53:57.920]  Кто?
[53:58.920 --> 53:59.920]  Да, правильно, светофор.
[53:59.920 --> 54:03.920]  Я хотел сказать, если вы попали сюда, скорее всего вы с ним взаимодействовали.
[54:04.920 --> 54:05.920]  Сегодня, да?
[54:05.920 --> 54:07.920]  То есть этот объект автономен.
[54:07.920 --> 54:09.920]  Можно ли на него какие-то… Да.
[54:10.920 --> 54:19.920]  Это следующее, что мы в принципе можем заставить эту штуку работать в независимом потоке относительно нашего программы.
[54:19.920 --> 54:21.920]  То есть вот наша программа исполняется, да?
[54:21.920 --> 54:29.920]  А мы можем сказать, давай-ка параллельно создадим сущность, которая обычно называется поток, которая будет принять знак светофора.
[54:32.920 --> 54:37.920]  То есть у нас получается, мы живем своей жизнью, а светофор живет своей отдельной жизнью.
[54:40.920 --> 54:41.920]  Да.
[54:44.920 --> 54:47.920]  Ну, в смысле, это происходит независимо от нас.
[54:47.920 --> 54:50.920]  Это значит, что у него есть свой поток, в котором он исполняет свои инструкции.
[54:54.920 --> 54:57.920]  То есть есть поток трапика, да?
[54:57.920 --> 54:59.920]  Который в машины едет, едет, едет.
[54:59.920 --> 55:05.920]  А есть отдельный поток, который берет, и вне зависимости от того, едет машина или нет, переключает ему цвета светофора.
[55:05.920 --> 55:10.920]  Берет и переключает желтого на красный, с красного на желтый, с желтого на зеленый.
[55:10.920 --> 55:13.920]  Причем, по-моему, фистеховские светофоры более умные.
[55:13.920 --> 55:17.920]  Они еще в зависимости от времени суток переключают это все по-разному.
[55:19.920 --> 55:20.920]  Да-да-да.
[55:22.920 --> 55:28.920]  Там у светофоров бывает такая опция, что с времени суток время на красный, на желтый, на зеленый разное.
[55:28.920 --> 55:30.920]  Не, на желтый на зеленый разное.
[55:30.920 --> 55:32.920]  Вот пример, как это рисуется.
[55:32.920 --> 55:42.920]  То есть у нас у активного объекта есть наборы состояний, есть триггеры, которые переключают эти состояния с одного момента на второй.
[55:42.920 --> 55:44.920]  Триггер, допустим, term of.
[55:44.920 --> 55:46.920]  Вот у нас есть банкомат.
[55:46.920 --> 55:49.920]  Мы включаем триггер, нажми на кнопочку отключить.
[55:49.920 --> 55:53.920]  И эффект, у нас действительно это цвета светофора.
[55:53.920 --> 55:55.920]  И переходят в режим out of service.
[55:55.920 --> 56:00.920]  Но более того, у этого режима могут быть другие подрежимы.
[56:00.920 --> 56:08.920]  Допустим, а вот если мы с вами захотим обработать режим поступления покупателей.
[56:08.920 --> 56:14.920]  И то, чтобы вы понимали, это настояние, связанное в том, что автомат не работает.
[56:14.920 --> 56:16.920]  То есть он не работает.
[56:17.920 --> 56:19.920]  Он находится в режиме ожиданий.
[56:19.920 --> 56:25.920]  И дальше, когда мы вставляем в него карту, то у нас появляется следующее состояние.
[56:25.920 --> 56:31.920]  Мы прочитываем карту, и дальше у нас идет состояние внутри обслуживания пользователя.
[56:31.920 --> 56:34.920]  То есть состояние внутри состояния.
[56:37.920 --> 56:38.920]  Вот.
[56:38.920 --> 56:39.920]  Знаете, как это можно представить?
[56:39.920 --> 56:41.920]  Все в машину тюринга проходили?
[56:44.920 --> 56:47.920]  А, ну на матлоге будет скорее всего еще.
[56:49.920 --> 56:51.920]  Ну, наверное, скоро будет.
[56:51.920 --> 56:52.920]  Вот.
[56:52.920 --> 56:54.920]  В общем, когда вы вернетесь к машине тюринга,
[56:54.920 --> 56:56.920]  теограмма состояния – это та же самая машина тюринга,
[56:56.920 --> 57:00.920]  ну, немножко другая, но только с ограниченным количеством состояний.
[57:00.920 --> 57:04.920]  То есть все переходы ясны, видны, куда они ведутся.
[57:04.920 --> 57:06.920]  Я не знаю, может кто-то из вас более умный,
[57:06.920 --> 57:08.920]  слушал такое понятие, как конечный автомат?
[57:10.920 --> 57:11.920]  Вот.
[57:11.920 --> 57:13.920]  Вот это по факту есть конечный автомат.
[57:13.920 --> 57:15.920]  Переключение состоянии.
[57:15.920 --> 57:18.920]  Значит, более того, опять же, дополню,
[57:18.920 --> 57:26.920]  что эта штука может быть реализована при помощи паттерна под названием состояние.
[57:26.920 --> 57:28.920]  То есть, если я скажу «состояние»,
[57:28.920 --> 57:33.920]  то эта штука может быть реализована при помощи паттерна под названием состояние.
[57:33.920 --> 57:37.920]  То есть, есть отдельный паттерн, который умеет реализовывать такие системы.
[57:41.920 --> 57:42.920]  Так.
[57:42.920 --> 57:47.920]  Понятно ли, что мы тут с вами говорим про диаграмму состояний?
[57:48.920 --> 57:53.920]  То есть, она позволяет отследить внутреннее состояние сложного объекта,
[57:53.920 --> 57:56.920]  который сам по себе может быть автономен.
[57:56.920 --> 57:58.920]  А автомат – это автономная история?
[57:58.920 --> 57:59.920]  Да.
[57:59.920 --> 58:00.920]  Вот.
[58:00.920 --> 58:03.920]  Мы можем посмотреть, в каком состоянии она может быть автономной.
[58:03.920 --> 58:04.920]  Вопрос.
[58:04.920 --> 58:07.920]  И с примера про систему доставки.
[58:10.920 --> 58:14.920]  Что у нас в том случае может быть активным классом?
[58:21.920 --> 58:24.920]  На самом деле, у кого есть состояние?
[58:25.920 --> 58:26.920]  У заказа.
[58:27.920 --> 58:29.920]  То есть, когда вы отправляете систему заказа,
[58:29.920 --> 58:34.920]  у вас заказ начинает, на самом деле, ну, по факту, почти автономно ехать куда-то,
[58:34.920 --> 58:36.920]  менять свои состояния.
[58:37.920 --> 58:38.920]  Вот.
[58:38.920 --> 58:41.920]  Либо кто-то меняет сверху от него состояние.
[58:42.920 --> 58:43.920]  Вот.
[58:43.920 --> 58:45.920]  Так, с этим понятно?
[58:47.920 --> 58:48.920]  Вот.
[58:48.920 --> 58:49.920]  Такое тоже может полезно.
[58:49.920 --> 58:50.920]  Так.
[58:50.920 --> 58:53.920]  А теперь вспоминаем уроки информантики в школе.
[58:54.920 --> 58:56.920]  Диаграмма деятельности.
[58:58.920 --> 59:00.920]  С этим вы точно знакомы.
[59:02.920 --> 59:04.920]  Давайте посмотрим, например.
[59:06.920 --> 59:08.920]  Узнаете?
[59:10.920 --> 59:12.920]  Это блок схемы.
[59:12.920 --> 59:14.920]  Которая обычно...
[59:17.920 --> 59:19.920]  Ну, либо в рабочих тетрадках.
[59:19.920 --> 59:20.920]  Вот сейчас смотрите.
[59:20.920 --> 59:24.920]  Это диаграмма, которая показывает, как организован рабочий процесс.
[59:24.920 --> 59:25.920]  В общем.
[59:25.920 --> 59:27.920]  То есть, здесь нет именно линии жизни,
[59:27.920 --> 59:30.920]  но показано, какое действие, за каким происходит,
[59:30.920 --> 59:34.920]  и при каком условии мы переходим из одного действия к другою.
[59:34.920 --> 59:38.920]  То есть, это не активный объект, который меняет какие-то внутренние состояния.
[59:39.920 --> 59:40.920]  Да, это именно причине за объект.
[59:40.920 --> 59:44.920]  Причем некоторые... Смотрите, видите вот тут этот?
[59:44.920 --> 59:46.920]  Жирная полоска есть.
[59:49.920 --> 59:51.920]  Это так называемые барьеры.
[59:52.920 --> 59:57.920]  То есть, это штуки, которые должны быть выполнены одновременно
[59:57.920 --> 01:00:00.920]  для того, чтобы перейти в следующее действие.
[01:00:03.920 --> 01:00:04.920]  Вот.
[01:00:04.920 --> 01:00:05.920]  Либо параллель...
[01:00:05.920 --> 01:00:06.920]  Либо...
[01:00:06.920 --> 01:00:08.920]  Нет, я вру.
[01:00:08.920 --> 01:00:10.920]  На самом деле, это параллельное исполнение.
[01:00:10.920 --> 01:00:12.920]  Да, это параллельное исполнение.
[01:00:12.920 --> 01:00:15.920]  То есть, смотрите, как только мы переходим в эту ситуацию,
[01:00:15.920 --> 01:00:19.920]  то параллельно можем презентовать свои идеи и записать свои идеи.
[01:00:19.920 --> 01:00:24.920]  Но после того, как у нас с вами эта штука одновременно исполнится,
[01:00:24.920 --> 01:00:27.920]  то мы вставляем вот эту штуку под названием барьер.
[01:00:27.920 --> 01:00:33.920]  То есть, сверху мы распределяем наши потоки на разные подзадачи,
[01:00:33.920 --> 01:00:35.920]  а снизу мы их объединяем.
[01:00:35.920 --> 01:00:37.920]  И дальше мы не можем двигаться до тех пор,
[01:00:37.920 --> 01:00:41.920]  пока мы не выполним два действия, которые были сверху.
[01:00:42.920 --> 01:00:43.920]  Ага.
[01:00:44.920 --> 01:00:48.920]  То есть, смотрите, здесь явно видно, что некоторые вещи можно распараллелить.
[01:00:48.920 --> 01:00:50.920]  И это явно удобно.
[01:00:53.920 --> 01:00:54.920]  Вот.
[01:00:54.920 --> 01:00:56.920]  А чем больше параллельность, тем лучше.
[01:00:58.920 --> 01:00:59.920]  Вот.
[01:00:59.920 --> 01:01:03.920]  В общем, это процесс того, как выводятся идеи.
[01:01:04.920 --> 01:01:06.920]  Это, можете это...
[01:01:07.920 --> 01:01:09.920]  Знаете, что такое brainstorm?
[01:01:10.920 --> 01:01:13.920]  Ну вот, по факту, диаграмма деятельности во время brainstorm.
[01:01:16.920 --> 01:01:17.920]  Можете посмотреть.
[01:01:19.920 --> 01:01:23.920]  Так. Иногда в диаграмме деятельности еще выделяют линии жизни.
[01:01:24.920 --> 01:01:27.920]  То есть, какие действующие лица в ней есть.
[01:01:27.920 --> 01:01:30.920]  Это обычно используется из вариантов использования.
[01:01:31.920 --> 01:01:33.920]  То есть, кто что делает в каждом этапе.
[01:01:35.920 --> 01:01:36.920]  Так.
[01:01:37.920 --> 01:01:38.920]  Понятно ли, что это такое?
[01:01:38.920 --> 01:01:39.920]  И зачем оно нужно?
[01:01:42.920 --> 01:01:45.920]  Ну да, у нас есть сложная процедура.
[01:01:45.920 --> 01:01:48.920]  Допустим, у нас есть вариант использования.
[01:01:48.920 --> 01:01:53.920]  Нам надо показать, каким образом, по каким шагам мы переходим из одного сценария в другой.
[01:01:54.920 --> 01:01:56.920]  Да, если то, то мы переходим туда.
[01:01:56.920 --> 01:01:58.920]  Если не работает, то переходим сюда.
[01:02:01.920 --> 01:02:02.920]  Так.
[01:02:02.920 --> 01:02:03.920]  Ну вот, второй пример.
[01:02:03.920 --> 01:02:04.920]  Это с линиями жизни.
[01:02:04.920 --> 01:02:08.920]  То есть, мы можем сказать, кто за что ответственен в данном варианте использования.
[01:02:09.920 --> 01:02:14.920]  И не поверите, вот как раз вариант использования проще всего переложить на диаграмму деятельности.
[01:02:15.920 --> 01:02:16.920]  После этого.
[01:02:19.920 --> 01:02:20.920]  Вот.
[01:02:20.920 --> 01:02:21.920]  Так, движемся дальше.
[01:02:23.920 --> 01:02:24.920]  Следующая вещь.
[01:02:24.920 --> 01:02:28.920]  Значит, возможно, вы с ними еще не сталкивались.
[01:02:28.920 --> 01:02:32.920]  Кто знает, что такое пакет в языке программирования?
[01:02:33.920 --> 01:02:34.920]  В языке программирования.
[01:02:36.920 --> 01:02:37.920]  Ну, приблизительно, да.
[01:02:37.920 --> 01:02:38.920]  Так.
[01:02:39.920 --> 01:02:40.920]  Товарищи.
[01:02:41.920 --> 01:02:42.920]  Да.
[01:02:42.920 --> 01:02:44.920]  Ну, либо что такое модуль?
[01:02:47.920 --> 01:02:51.920]  Охотновная подсосновенная часть проекта, которая состоит из общих сущностей.
[01:02:52.920 --> 01:02:53.920]  А?
[01:02:56.920 --> 01:02:57.920]  Ну да.
[01:02:57.920 --> 01:02:58.920]  Вот.
[01:02:58.920 --> 01:03:01.920]  И на самом деле в джаве есть как раз такое понятие, как пакет.
[01:03:01.920 --> 01:03:06.920]  То есть, как раз папочка, в которой внутри можно засовывать некоторые по набору файлы.
[01:03:07.920 --> 01:03:08.920]  Вот.
[01:03:08.920 --> 01:03:11.920]  И такая вещь позволяет структурировать наши классы в определенные наборы.
[01:03:14.920 --> 01:03:19.920]  По факту, пакет это набор классов, который объединен по некоторой логической сущности.
[01:03:20.920 --> 01:03:22.920]  То есть, допустим, у нас есть классы, и у него есть наследники.
[01:03:22.920 --> 01:03:24.920]  Почему бы их не вынести в отдельный пакет?
[01:03:25.920 --> 01:03:26.920]  Логично, логично.
[01:03:27.920 --> 01:03:28.920]  Вот пример.
[01:03:28.920 --> 01:03:30.920]  Вот, допустим, смотрите.
[01:03:30.920 --> 01:03:34.920]  Здесь, кстати, мы сразу видим, что у нас есть с вами проблема в архитектуре.
[01:03:34.920 --> 01:03:35.920]  Почему?
[01:03:35.920 --> 01:03:37.920]  Потому что у нас есть с вами пакет.
[01:03:37.920 --> 01:03:38.920]  Банк.
[01:03:38.920 --> 01:03:42.920]  Дальше у нас есть пакет под названием бизнес, и есть пакет под названием управление данных.
[01:03:43.920 --> 01:03:44.920]  И смотрите, в чем проблема.
[01:03:45.920 --> 01:03:50.920]  У нас с вами между бизнесом и управлением данных есть стрелочки в обе стороны.
[01:03:53.920 --> 01:03:55.920]  Да, у нас появляется циклическая зависимость.
[01:03:55.920 --> 01:03:56.920]  Это не есть хорошо.
[01:03:58.920 --> 01:04:03.920]  То есть, надо стараться как можно чаще избавляться от таких циклических зависимостей.
[01:04:04.920 --> 01:04:12.920]  То есть, у нас получается, что классы из шипинга используют класс из шипинга в датаменеджмент, и наоборот.
[01:04:13.920 --> 01:04:16.920]  Ну, я думаю, что в этом ане разбираться потом будет сложно.
[01:04:16.920 --> 01:04:20.920]  Особенно, когда мы пойдем во внутренний пакет и будем смотреть, что в нем происходит.
[01:04:21.920 --> 01:04:28.920]  То есть, по факту, на самом деле, не поверите, диаграммы пакетов строят любое текстовое, любая IDE.
[01:04:30.920 --> 01:04:31.920]  Каким образом?
[01:04:31.920 --> 01:04:32.920]  Догадаетесь?
[01:04:35.920 --> 01:04:38.920]  Ну да, по инклудам, на самом деле, можно разобраться раз.
[01:04:38.920 --> 01:04:40.920]  А во-вторых, просто папки у вас есть.
[01:04:41.920 --> 01:04:46.920]  Скорее всего, в большей части случаев одна папка это отдельный пакет.
[01:04:50.920 --> 01:04:52.920]  Я же надеюсь, вы не пишете код в одном файле.
[01:04:55.920 --> 01:04:56.920]  Ладно, будем отучать.
[01:05:02.920 --> 01:05:04.920]  Вот такой вот пример есть.
[01:05:05.920 --> 01:05:10.920]  Следующая вещь очень важна с точки зрения архитектуры.
[01:05:11.920 --> 01:05:13.920]  Это так называемые диаграммы компонентов.
[01:05:14.920 --> 01:05:16.920]  А в чем она состоит?
[01:05:16.920 --> 01:05:20.920]  Мы можем представить себе, у нас с вами большая-большая система.
[01:05:20.920 --> 01:05:22.920]  Мы что, мы там фиксиков писали, да?
[01:05:24.920 --> 01:05:31.920]  Давайте подумаем, из каких больших составных частей могут состоять фиксики, образно говоря.
[01:05:40.920 --> 01:05:42.920]  Да, у нас есть клиент.
[01:05:42.920 --> 01:05:43.920]  Клиент на чем, скорее всего?
[01:05:43.920 --> 01:05:45.920]  Это какое-то мобильное приложение будет.
[01:05:46.920 --> 01:05:54.920]  Да, то есть у нас появляется фронтендная составляющая в виде мобильного приложения и фронтенда.
[01:05:54.920 --> 01:05:56.920]  Есть бэкэнд составляющая.
[01:05:56.920 --> 01:06:02.920]  В бэкэнд составляющие у нас могут быть всякие компоненты, связанные с оплатой тарифов.
[01:06:02.920 --> 01:06:04.920]  Мы же хотим, чтобы нам деньги приносили.
[01:06:06.920 --> 01:06:07.920]  А? Реклама.
[01:06:08.920 --> 01:06:09.920]  Показывать.
[01:06:09.920 --> 01:06:11.920]  Показ? Я не знаю.
[01:06:12.920 --> 01:06:15.920]  Система, связанная с продажей мерча.
[01:06:17.920 --> 01:06:19.920]  Система, связанная с показом мультиков.
[01:06:21.920 --> 01:06:24.920]  Да, система с хранением данных и так далее.
[01:06:24.920 --> 01:06:27.920]  И это все, на самом деле, уже такие большие компоненты.
[01:06:27.920 --> 01:06:31.920]  И нам надо понять, как связывать эти компоненты между собой.
[01:06:31.920 --> 01:06:39.920]  И вот как раз архитектура начинается в том месте, когда мы смотрим, как выглядят наши компоненты и как они между собой связаны.
[01:06:39.920 --> 01:06:42.920]  Значит, опять же, это диаграмма с сайта.
[01:06:42.920 --> 01:06:46.920]  И здесь сразу мы с вами видим интересную вещь.
[01:06:46.920 --> 01:06:53.920]  Что веб-магазине, мы можем это использовать для первых самых частей, у нас есть три компонента.
[01:06:53.920 --> 01:06:58.920]  Значит, веб-магазин, хранилище данных и система, связанная с аккаунтами.
[01:06:58.920 --> 01:07:02.920]  И в каждой из этой системы есть подсоставная система.
[01:07:02.920 --> 01:07:06.920]  То есть, есть корзина, есть система авторизации.
[01:07:06.920 --> 01:07:09.920]  Здесь у нас с вами есть система клиентов.
[01:07:09.920 --> 01:07:12.920]  Здесь у нас хранятся заказы и так далее.
[01:07:12.920 --> 01:07:15.920]  И видите, вот здесь вот есть вот такие вот перемычки.
[01:07:15.920 --> 01:07:22.920]  Значит, эта перемычка означает, что нам нужен интерфейс для того, чтобы общаться с другим компонентом.
[01:07:22.920 --> 01:07:26.920]  Помните, мы с вами говорили про паттерн-адаптер в прошлый раз.
[01:07:26.920 --> 01:07:32.920]  Да, и вот как раз на каждой перемычке между компонентами нам нужно написать адаптеры.
[01:07:32.920 --> 01:07:35.920]  Вот, и между ними можно установить зависимость.
[01:07:35.920 --> 01:07:42.920]  То есть, нам нужен протокол, который позволяет общаться между частями на разных компьютерах.
[01:07:42.920 --> 01:07:46.920]  Ну, либо на одном компьютере, но как-то разделенным между собой.
[01:07:46.920 --> 01:07:54.920]  Значит, с точки зрения, давайте сразу подчеркну несколько вещей, каким образом можно общаться.
[01:07:54.920 --> 01:07:58.920]  Мы все эти вещи будем говорить про эти вещи будем говорить на семинарах.
[01:07:58.920 --> 01:08:04.920]  Первая вещь, которая есть внутри, зачастую реализована в качестве вызова библиотечных файлов.
[01:08:04.920 --> 01:08:09.920]  Я не знаю, делали обзор по файловой системе Linux на семинарах?
[01:08:12.920 --> 01:08:14.920]  Да, ну, кому-то делать, кому-то нет.
[01:08:14.920 --> 01:08:20.920]  И, наверное, увидели файлики с разрешением либо .dll, либо .so.
[01:08:20.920 --> 01:08:22.920]  Это одно и то же.
[01:08:22.920 --> 01:08:24.920]  Ну, либо .dll, если мы говорим Mac.
[01:08:24.920 --> 01:08:31.920]  На самом деле, это так называемые библиотечные файлы, и на семинаре по семейку вы с вами поймем, как их собирать.
[01:08:31.920 --> 01:08:38.920]  И их особенность, главное, в том, что они подключаются на стадии исполнения программы, стадии runtime.
[01:08:38.920 --> 01:08:48.920]  И по факту мы можем учренить зависимость, разделить зависимость между составными частями при помощи вызова этих библиотек, функций из библиотек.
[01:08:48.920 --> 01:08:54.920]  Другой способ, если у нас есть несколько разных отдельных сервисов, то мы с вами можем сделать следующее.
[01:08:54.920 --> 01:09:00.920]  Мы с вами можем открыть интернет connection на определенном порту.
[01:09:02.920 --> 01:09:07.920]  Например, HTTP протокол работает на порту под номером 80.
[01:09:10.920 --> 01:09:12.920]  Да, то есть есть нумерованные порты.
[01:09:12.920 --> 01:09:16.920]  И получается вот такая вот интересная сущность.
[01:09:16.920 --> 01:09:21.920]  И мы с вами можем описывать протокол взаимодействия между отдельными составными частями.
[01:09:21.920 --> 01:09:28.920]  Вот, когда мы будем говорить про сетевое взаимодействие, вы с этим детально не столкнетесь.
[01:09:28.920 --> 01:09:33.920]  Так, вопросы?
[01:09:33.920 --> 01:09:39.920]  Вот, то есть, смотрите, первая часть, давайте поймем, из каких составных частей это все стоит.
[01:09:39.920 --> 01:09:45.920]  Потому что мне кажется, что у нас потихонечку уже будет все работать чуть-чуть сложнее.
[01:09:45.920 --> 01:09:49.920]  Значит, мы не успели, часть связана с методологиями, ну и хорошо, в следующий раз ее рассмотрим.
[01:09:49.920 --> 01:09:57.920]  Значит, смотрите, первое, что нам необходимо сделать всегда, что мы будем делать, что мы будем делать всегда,
[01:09:57.920 --> 01:10:02.920]  первое, что нам необходимо сделать всегда, давайте я напишу некоторые составные частя,
[01:10:02.920 --> 01:10:07.920]  первое, это определить use-кейса.
[01:10:07.920 --> 01:10:14.920]  Второе, это попытаться в первой итерации сделать диаграмму классов.
[01:10:14.920 --> 01:10:22.920]  После этого, третье, нам необходимо это все попытаться разбить на компоненты.
[01:10:22.920 --> 01:10:29.920]  Четвертое, мы пытаемся с вами use-кейсы перевести в activity-диаграмм,
[01:10:29.920 --> 01:10:34.920]  для того, чтобы понять, какие последности действий.
[01:10:34.920 --> 01:10:43.920]  Пятым шагом, правильно будет объединить классы в некоторые пакеты.
[01:10:43.920 --> 01:10:46.920]  Порядок действий может быть другим.
[01:10:46.920 --> 01:10:59.920]  А шестое, это наложить это все в таймлайн, то есть сделать sequence-диаграмм.
[01:10:59.920 --> 01:11:08.920]  Вот, после этого, после того, как мы это все сделаем, мы можем переформатировать это все в дальнейшем.
[01:11:08.920 --> 01:11:18.920]  То есть, брать после этой штуки и углублять то, что у нас происходит на шаге два и повторять по новой.
[01:11:18.920 --> 01:11:24.920]  И на самом деле, мы с вами понимаем, что если у нас с вами что-то пошло на шестом шаге не так,
[01:11:24.920 --> 01:11:27.920]  то нам, скорее всего, придется это переделывать.
[01:11:27.920 --> 01:11:31.920]  И в зависимости от сложности проекта, нам надо будет понять,
[01:11:31.920 --> 01:11:35.920]  до куда нам надо спускаться и сколько раз этот цикл повторять.
[01:11:35.920 --> 01:11:40.920]  Более того, вот это вот может постоянно меняться.
[01:11:40.920 --> 01:11:44.920]  И зачастую будет меняться в реале.
[01:11:44.920 --> 01:11:50.920]  А вот как эти уже части связаны с разными методологиями разработки,
[01:11:50.920 --> 01:11:55.920]  и что происходит на каждой из стадий, и из каких стадий состоит разработка по,
[01:11:55.920 --> 01:11:58.920]  мы, наверное, с вами уже будем говорить в следующий раз.
[01:11:58.920 --> 01:12:03.920]  Вот, мы поймем с вами, что же за такие умные слова Agile,
[01:12:03.920 --> 01:12:10.920]  что скрывается за словами Scrum, водопад, что такое внедрение, что такое тестирование и так далее.
[01:12:10.920 --> 01:12:16.920]  А после этого мы уже пройдем с вами по интересной технической вещи, связанной с тестированием.
[01:12:16.920 --> 01:12:19.920]  То есть, посмотрим несколько пар, связанных с тестированием.
[01:12:19.920 --> 01:12:23.920]  К этому моменту вы, наверное, уже по теминарской части будете готовы воспринимать материал,
[01:12:23.920 --> 01:12:26.920]  связанный по тестированию.
[01:12:26.920 --> 01:12:29.920]  Вот на этом, я думаю, мы сегодня с вами закончим.
[01:12:29.920 --> 01:12:33.920]  Давайте задавайте вопросы.
[01:12:33.920 --> 01:12:37.920]  Вот.
[01:12:37.920 --> 01:12:41.920]  А если нет вопросов, то тогда я могу сказать всем спасибо, что пришли,
[01:12:41.920 --> 01:12:44.920]  послушали, подписывались.
[01:12:44.920 --> 01:12:49.920]  А если нет вопросов, то тогда я могу сказать всем спасибо, что пришли, послушали.
