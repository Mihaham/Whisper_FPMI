[00:00.000 --> 00:10.400]  Мы с вами прошли, научились спрашивать нужные вопросы,
[00:10.400 --> 00:13.880]  потом у нас была трехзвенняя структура, и на этом все.
[00:13.880 --> 00:15.240]  Мы кешированию не приступали.
[00:15.240 --> 00:20.040]  Самая большая боль кеширования.
[00:20.040 --> 00:21.040]  Понеслась.
[00:21.040 --> 00:24.760]  Итак, мы сейчас с вами идем по инструментам, которые
[00:24.760 --> 00:27.720]  мы можем применить, ничего особо не переделывая.
[00:27.720 --> 00:31.280]  У нас есть проект, он как-то работает.
[00:31.280 --> 00:34.480]  Нам нужно, чтобы он рос, выдержал большую нагрузку.
[00:34.480 --> 00:35.480]  Ну окей.
[00:35.480 --> 00:36.880]  Разбили на три звена.
[00:36.880 --> 00:37.880]  Хорошо.
[00:37.880 --> 00:38.880]  Кеширование.
[00:38.880 --> 00:46.880]  Очень простая пирамидка.
[00:46.880 --> 01:02.400]  Здесь у нас наверх идет скорость отклика.
[01:02.400 --> 01:11.680]  А вот сюда цена байта.
[01:11.680 --> 01:21.120]  Компьютер неоднороден, в нем дофига раз личного
[01:21.120 --> 01:24.120]  рода слоев, фига раз личного рода устройств.
[01:24.120 --> 01:27.760]  И компьютер, по большому счету, огромная машинка
[01:27.760 --> 01:30.280]  для перемалывания данных.
[01:30.280 --> 01:32.720]  Эти данные хранятся в компьютер.
[01:32.720 --> 01:39.200]  Они хранятся в разных, не знаю, на разных средах.
[01:39.200 --> 01:42.520]  Вот здесь у нас что?
[01:42.520 --> 01:43.520]  Да.
[01:43.520 --> 01:51.400]  Очень дешево, очень много можно хранить, но очень
[01:51.400 --> 01:52.400]  медленно.
[01:52.400 --> 01:53.400]  Дальше.
[01:53.400 --> 01:54.400]  Дальше.
[01:54.400 --> 02:22.200]  Я бы сюда добавил еще сеть.
[02:23.200 --> 02:31.440]  То есть для какого-то компьютера, который занимается вычислением,
[02:31.440 --> 02:34.000]  данные могут лежать не на нем, они могут лежать
[02:34.000 --> 02:40.520]  в сети, где-то в другом компьютере, а это еще медленнее.
[02:40.520 --> 02:41.520]  Вот примерно так.
[02:41.520 --> 02:43.880]  Регистровая память очень дорогая.
[02:43.880 --> 02:47.320]  Там их всего, там очень ограниченное количество.
[02:48.320 --> 02:56.600]  Даже в нашем Эльбрусе, относительно нашем Эльбрусе, ребята пошли
[02:56.600 --> 03:01.800]  по интересному пути, они регистров сделали очень
[03:01.800 --> 03:02.800]  много.
[03:02.800 --> 03:05.320]  То есть как бы регистровой памяти в Эльбрусе очень
[03:05.320 --> 03:06.320]  много.
[03:06.320 --> 03:09.640]  Но все равно недостаточно, не сравниться даже с каким-то
[03:09.640 --> 03:10.640]  одним уровнем кэшей.
[03:10.640 --> 03:12.200]  Так, что это для нас значит?
[03:17.320 --> 03:25.200]  При первой возможности, при первой возможности идем
[03:25.200 --> 03:26.200]  наверх.
[03:26.200 --> 03:32.480]  Лежит у нас какой-то огромный кусок здесь, нам нужно
[03:32.480 --> 03:36.520]  с ним какие-то вычисления провести, провели, положили
[03:36.520 --> 03:39.520]  в память.
[03:39.520 --> 03:40.520]  Рассчитываем дальше.
[03:40.520 --> 03:43.200]  Вот над этим мы как правило не властны, если мы работаем
[03:43.200 --> 03:48.760]  не на Assembler, а на более-менее высоком языке программирования.
[03:48.760 --> 03:50.240]  Это как правило удел процесса.
[03:50.240 --> 03:55.480]  Но вот эти две вещи, даже вот эти три я бы сказал,
[03:55.480 --> 03:56.480]  ну это одно и то же, да?
[03:56.480 --> 04:02.680]  То есть как бы система хранения на диске, да?
[04:02.680 --> 04:07.080]  Вот эти три вещи, это наша эта, наша все, здесь мы можем
[04:07.080 --> 04:08.080]  управлять.
[04:08.080 --> 04:11.840]  Получили что-нибудь с сети, что нам важно, сохранили
[04:11.840 --> 04:12.840]  кэш.
[04:12.840 --> 04:18.320]  Подняли что-нибудь с диска, прочитали с базы данных,
[04:18.320 --> 04:21.320]  провели вычисления, но закрывайте уже.
[04:21.320 --> 04:24.800]  Провели вычисления, положили в кэш.
[04:24.800 --> 04:25.800]  Очень простой принцип.
[04:25.800 --> 04:31.080]  Теперь давайте подумаем, а что, что мы туда можем
[04:31.080 --> 04:32.080]  положить кэш?
[04:32.080 --> 04:35.400]  Ну вообще в принципе, какие элементы.
[04:35.400 --> 04:52.560]  Окей, сырые данные, данные с предварительной обработкой
[04:52.560 --> 04:59.440]  агрегации и так далее, не знаю, обработаны.
[04:59.440 --> 05:00.440]  Давайте плюс и минус.
[05:00.440 --> 05:01.440]  Сырый.
[05:02.440 --> 05:06.440]  Это плюс, да, согласен.
[05:06.440 --> 05:13.320]  Так, ага, можно больше операции, ты один раз положил, а потом
[05:13.320 --> 05:16.400]  из них чего-то, чего угодно вычисляешь, причем несколько
[05:16.400 --> 05:17.400]  раз.
[05:17.400 --> 05:29.160]  Вот смотрите, вот на основе чего вы будете принимать
[05:29.160 --> 05:31.360]  решение, например обработать данные или сырые?
[05:31.360 --> 06:01.280]  Ну, попробовать, да, попробовать посмотреть, как вы собираете
[06:01.280 --> 06:04.360]  их потом использовать, то есть, например, вполне
[06:04.360 --> 06:07.120]  возможная конструкция, когда у вас, не знаю, страничка
[06:07.120 --> 06:13.600]  какой-нибудь сайта или сервиса, она состоит из различных
[06:13.600 --> 06:15.360]  вариантов отображения одного и того же.
[06:15.360 --> 06:22.120]  То есть у вас данные одни, а вариантов отображения
[06:22.120 --> 06:23.120]  их, например, десять.
[06:23.120 --> 06:28.960]  Может быть такое, ну может быть, я не знаю, какой-нибудь
[06:28.960 --> 06:32.800]  финансовый сервис, аналитическо-финансовый сервис.
[06:32.800 --> 06:38.640]  В таком случае один раз взяли, один раз данные положили,
[06:38.640 --> 06:41.640]  а затем их пересчитываете в разные виды.
[06:41.640 --> 06:44.680]  Или, например, это отображение очень сильно зависит от
[06:44.680 --> 06:48.400]  того, какие фильтры ввел пользователь, а фильтров,
[06:48.400 --> 06:50.880]  например, двадцать, и они могут комбинироваться,
[06:50.880 --> 06:54.240]  и раз, и получается, что у вас там не знаю, двадцать,
[06:54.240 --> 06:59.520]  или двадцатой степени вариант, ну или сколько-то
[06:59.520 --> 07:02.320]  там, да, то есть ну дофига, да, то есть как бы кашировать
[07:02.320 --> 07:05.320]  обработанные данные, ну явно, явно плохо, закашировали
[07:05.320 --> 07:07.600]  сырые и дальше под каждого пользователя начинаете
[07:07.600 --> 07:10.600]  их фильтровать.
[07:10.600 --> 07:14.400]  Обработанные данные лучше, занимают меньше места,
[07:14.400 --> 07:18.320]  в этом плане лучше, да, занимают меньше места, уже произведен
[07:18.320 --> 07:23.040]  расчет предварительный, да, не знаю, прям конечный,
[07:23.120 --> 07:26.840]  и вы сохранили результат, но доступ к сырым данным
[07:26.840 --> 07:30.920]  у вас уже не, ну вы можете, конечно, хранить то и другое,
[07:30.920 --> 07:36.920]  но, как правило, кроме скорости отклика у вас есть еще вот
[07:36.920 --> 07:42.200]  этот вопрос цена, и вот этого у вас просто тупо меньше,
[07:42.200 --> 07:47.960]  чем жесткого диска, и как правило раз так, не знаю,
[07:48.800 --> 07:54.800]  в 40-50, и за вот эту историю у вас бьются и процессоры,
[07:54.800 --> 07:58.120]  и процессы, и базы данных, и вообще все, да, вы не сможете
[07:58.120 --> 08:03.120]  положить все кэш, вам придется выбирать.
[08:04.120 --> 08:08.120]  Ребят, я не знаю, какой будет проект, но я описываю
[08:08.120 --> 08:11.120]  варианты, да, то есть выбирать между этим и этим нужно
[08:11.120 --> 08:13.120]  действительно на основе того, как эти данные будут
[08:13.120 --> 08:16.120]  использоваться. Дальше, что еще? Обработанные данные.
[08:16.120 --> 08:19.120]  Посчитали, сложили, там, я не знаю, здесь огромное
[08:19.120 --> 08:23.120]  полотно, здесь отфильтровали, вычинили нужные столбцы,
[08:23.120 --> 08:28.120]  просуммировали, положили.
[08:28.120 --> 08:33.120]  Дальше. Согласен. Представление.
[08:33.120 --> 08:38.120]  Там, с простым языком, готовый HTML-блог, ну, например,
[08:38.120 --> 08:41.120]  вы будете вводить погоду как-нибудь красиво, бачок,
[08:41.120 --> 08:46.120]  кусочек Москва, пасмурно и так далее, да, и вы будете
[08:46.120 --> 08:50.120]  вводить филтрование, вы будете вводить филтрование,
[08:50.120 --> 08:53.120]  вы будете вводить филтрование, вы будете вводить филтрование,
[08:53.120 --> 08:56.120]  вы будете вводить филтрование, вы будете вводить филтрование,
[08:56.120 --> 09:02.120]  вы будете вводить филтрование, вы будете вводить филтрование,
[09:02.120 --> 09:05.120]  вы будете вводить филтрование, вы будете вводить филтрование,
[09:05.120 --> 09:11.120]  вы будете вводить филтрование, вы будете руководить, вы
[09:11.120 --> 09:17.120]  будете вводить филтрование, вы будете PuS Ducking access, вы
[09:17.120 --> 09:18.120]  будете вводитьharma, вы будете вводитьzamп Omni Linux
[09:18.120 --> 09:21.120]  voluntary data, вы будете вводить Metal Users, order 리�트黃profit,
[09:21.120 --> 09:27.060]  при каждой построении рисовать это штемель в лодке можно, но это не самый
[09:27.060 --> 09:32.720]  выгодный вариант. В данном конкретном случае это не самый выгодный вариант.
[09:51.120 --> 09:59.920]  Нет, ты картинки туда не вставляешь, вот сюда. Да, то есть картинки, ты вставляешь на них ссылки.
[09:59.920 --> 10:04.240]  Ну да, данных здесь побольше хранится, чем вот здесь. Если ты хранишь два числа,
[10:04.240 --> 10:11.040]  я не знаю, состояние облаков и температуру, а здесь у тебя уже маленький штемель кусочек,
[10:11.040 --> 10:18.000]  но это всё равно небольшие различия. Здесь тебя, не знаю, 10 байт, а здесь 100.
[10:18.000 --> 10:22.280]  А это может быть не очень много, да, не очень большая разница и не очень важно,
[10:22.280 --> 10:27.960]  но времени может экономить много. Например, если ты действительно на каждой странице хочешь его.
[10:27.960 --> 10:34.480]  Ладно, дальше, четвертый вариант. Что еще? Куда дальше? Чем можно еще хранить?
[10:34.480 --> 10:55.440]  Да, целая страница. Если вас когда-нибудь спросят, я вам этого не говорил, но это очень удобный,
[10:55.440 --> 11:07.720]  не простой способ. Ну, представли, ну, HTML-блог, представление данных. То есть это обработанные,
[11:07.720 --> 11:12.320]  то есть смотри, сырые данные, полностью просто вытащенные из базы или поднятые из диска. Здесь
[11:12.320 --> 11:18.160]  мы над ними немножко поработали, что-то посчитали, как-то их пересчитали, сохранили в удобном для нас
[11:18.160 --> 11:25.560]  виде. Здесь мы их начинаем оформлять. Они же тебе все равно не выводятся, ты же не можешь отдать
[11:25.560 --> 11:35.320]  краузеру кусок данных. Ты их должен оформить в язык, который он понимает. HTML или JSON или еще
[11:35.320 --> 11:43.720]  что-то, да. Но в любом случае ты должен произвести какие-то манипуляции, оформления. Потому что здесь
[11:43.720 --> 11:51.640]  у тебя блог этой странички, а здесь у тебя целая страничка. Чем отличаются? Давайте прикинем. Ну,
[11:51.640 --> 12:04.200]  как минимум. Ну, грубо говоря, вот у тебя, хотя любая страничка состоит из десятков,
[12:05.200 --> 12:18.720]  разных. Когда я говорю любая страничка, это практически любая страничка. Те же самые
[12:18.720 --> 12:23.440]  принципы каширования в мобильных приложениях, те же самые принципы каширования в банкомате,
[12:23.440 --> 12:31.640]  в мобильных приложениях по большому счету. Все одно и то же. Логика одна и та же. Кто? Банкомат?
[12:31.640 --> 12:38.320]  Понятия не имею. Надо подумать. Вот давай подумаем. Вот страничка банкомата. Кнопка
[12:38.920 --> 12:52.080]  баксы, рубли, снять, оплатить и так далее. Вот здесь баланс. Здесь инфамилия.
[12:54.960 --> 12:56.720]  Выгодно нам кашировать целую страницу?
[12:56.720 --> 13:13.760]  В смысле, в нечастке? У меняется каждый... У тебя люди приходят в разные банкоматы. У тебя вот этот
[13:13.760 --> 13:20.920]  блок, у тебя вот этот блок и вот этот блок меняется каждый раз. Ну, подожди, тогда зачем нам
[13:20.920 --> 13:28.960]  кашировать всю страницу? Понимаешь? Да, вот для такого подхода самый лучший вариант каширования
[13:28.960 --> 13:37.240]  представления с мельбоком. Кнопка оплата, кнопка снять баксы, снять рубли, она всегда одинаково выглядит.
[13:37.240 --> 13:51.360]  Я утрирую. Давай поставим, что это главная страница Яндекс. И здесь у нас есть имя пользователя,
[13:51.360 --> 14:01.400]  есть он залогенен. Там, я не знаю, погода, новости последние, блок рекламы, что-нибудь еще. Логотип.
[14:01.400 --> 14:15.400]  Вот вы бы как кашировали блок Яндекс? Логотип на это всегда. Имя не Яндекс, а ваше имя, если вы залогенен.
[14:15.400 --> 14:25.440]  И также кусочек про сколько у вас писем или сколько там еще чего. Итак, придумываем каширование для
[14:25.440 --> 14:32.960]  главной страницы Яндекс. Куча различных информационных блоков, новости, погода, курс валют, я не знаю,
[14:32.960 --> 14:41.640]  что еще там у него есть. Последние какие-нибудь там, не знаю, закачанные картинки, видосики и так далее.
[14:41.640 --> 14:50.640]  Ну, в общем, короче, много разных блоков. Имя, мое, если я залогенен. Ну и логотипчик оформления.
[14:50.640 --> 15:08.640]  Вот давайте так еще раз. Стоп, стоп, стоп, стоп, стоп, стоп. Мы пока не можем договориться. Что происходит?
[15:08.640 --> 15:27.640]  Вот смотрите, вот есть кэш. Я начинаю вычисление. Пришел запрос в первый раз. Я начинаю вычисление.
[15:27.640 --> 15:41.640]  Мне сначала нужно проверить, есть ли информация, которую мне нужно вычислить в кэше. Я делаю запрос. Есть информация?
[15:41.640 --> 15:56.640]  Мне говорят, допустим, информации нет. То есть если информация есть, то как бы все, конец. Я нашел то, что мне нужно.
[15:56.640 --> 16:15.640]  Вычисление одного блока. Если информации нет, я начинаю ее вычислять. Вычисление. Вычислил. Потом положил кэш.
[16:15.640 --> 16:27.640]  И потом уже конец. То есть кэш не бесплатно делать. Если вы выйдете для какого-то элемента кэш, вы всегда будете проверять, он есть или нет.
[16:27.640 --> 16:44.640]  Этот поход у вас тоже занимает время. Вопрос на это? Да. Мы сейчас говорим про серверный кэш?
[16:44.640 --> 17:04.640]  Это не бесплатно. Нет золотого инструмента, золотой пули нет. У вас каждый раз есть плюсы и минусы. Можете внедрить кэш? Можете.
[17:04.640 --> 17:19.640]  Но имейте в виду, что время выполнения каждого запроса чуть-чуть увеличится. То есть у вас, например, вычисление занимало 100 миллисекунд, а поход к кэш занимает 10 миллисекунд.
[17:19.640 --> 17:32.640]  Теперь у вас каждый запрос, который вычисляет данные, которого нет в кэше, будет занимать 100 миллисекунд. Но каждый запрос, который в кэше есть, будет занимать всего 10.
[17:32.640 --> 17:52.640]  Это называется так называемый параметр hit-miss.
[17:52.640 --> 18:04.640]  То есть сколько раз вы попадаете, вот идет поток запросов. Сколько раз вы попадаете в кэш, сколько раз вы не попадаете в кэш. Итак, внимание, вопрос. Вот для вот этих параметров.
[18:04.640 --> 18:23.640]  Учисление 100 миллисекунд, а кэш, ухождение в кэш занимает 10 миллисекунд. При попадании 70 процентов имеет смысл, нет? Вот входные параметры.
[18:23.640 --> 18:33.640]  70 процентов попаданий, то есть 70 процентов кэш находит. В кэше находится то, что нам нужно. Есть миллисекундное ожидание, 100 миллисекундное вычисление.
[18:33.640 --> 18:45.640]  Правильно ли я сделал, что внедрил кэш? В среднем.
[19:03.640 --> 19:27.640]  Ты совершенно прав, еще вот здесь плюс здесь.
[19:27.640 --> 19:42.640]  Нет, не любой. Сейчас посчитаем. Вот, хождение в кэш 10 миллисекунд. Давайте даже так, не будем его считать, просто для простоты.
[19:42.640 --> 20:06.640]  Итак, все очень просто. Даже без статистики, на пальчик. В 70 процентах случаях у нас запрос...
[20:06.640 --> 20:16.640]  43, окей.
[20:16.640 --> 20:32.640]  Среднее время выполнения запроса у нас, средняя температура по больнице 43 миллисекунды.
[20:32.640 --> 20:53.640]  Считаем один, не будем париться. 140, окей. Это лучше, чем 100. Давайте смотреть дальше. 90.
[20:53.640 --> 21:15.640]  Давайте посмотрим, насколько. Сколько? Хорошо. 30 процент на пропадание кэш.
[21:23.640 --> 21:43.640]  Ну, правильно 120, конечно, но я просто для простоты. Я считаю, что вот так, 5,5.
[21:43.640 --> 22:00.640]  Блин, за ноды. 10 ноль, все, это бесплатно. Нет, все равно где-то будет. Здесь у нас 80, да?
[22:00.640 --> 22:23.640]  Ну, короче, вот в этом нашем конкретном примере, да, то есть где-то есть эта цифра. И она не ноль, она больше ноля. 20 процентов, 10 процентов, где-то мы сломаемся. Сколько, 10? 10 процентов мы ломаемся.
[22:23.640 --> 22:32.640]  Это вот в этих параметрах. Они могут быть другие. То есть вам стоит, когда вы это состартуете, когда вы думаете, как вы будете делать, стоит посчитать.
[22:32.640 --> 22:52.640]  Так, возвращаемся к Яндексу. Какие у нас здесь элементы меняются, какие нет? Вот к Яндексу. 100 тысяч запросов в минуту.
[22:52.640 --> 23:15.640]  Что бы вы здесь кешировали? Почему все, что не пользовательское?
[23:15.640 --> 23:25.640]  Ну да. Даже новости можно кешировать. Потому что они вряд ли обновляются каждую минуту.
[23:25.640 --> 23:51.640]  Да. И так вот все правильно. Кешируем все, что не персонализировано. А почему персонализированное не хотите кешировать?
[23:51.640 --> 24:15.640]  От чего зависит? Давайте подумаем.
[24:15.640 --> 24:33.640]  Давай так. Кэш фамилии можно записать дофига. Можно записать миллион, сто миллион. Фамилия-то что она?
[24:33.640 --> 24:37.640]  Ну, подожди, смотри. Ну да, все правильно. Давай думать просто какое уравнение.
[24:37.640 --> 24:49.640]  Итак, первое. Имя пользователя, возможно, вычисляется не быстро. Потому что там не только имя, там еще количество, например, последних сообщений в нем, в почте, еще чего-то, еще чего-то.
[24:49.640 --> 25:13.640]  Вот такой блок, довольно стрёмный. Вычислять его долго. Но, если он у нас в кэше есть. Короче, здесь у нас, я к чему веду? Здесь у нас как бы с вами, ладно, у нас с вами двухуровневая hit-miss, вот это вот соотношение hit-miss двухуровневая.
[25:13.640 --> 25:31.640]  Первое. На первом уровне оно касается самого пользователя и третьего самого пользователя. А на втором уровне это тоже нужно на более высоком. Это тоже нужно учитывать. А какой вообще процент пользователей за логинин?
[25:31.640 --> 25:37.640]  Сколько пользователей за логинин?
[25:37.640 --> 25:56.640]  Окей, то есть если пользователь не за логинин, то мы показываем там заглушку, а если за логинин, то идем по длинному пути.
[25:56.640 --> 26:15.640]  Ну, можно. Смотрите, я к чему. Если неизбежно придется ходить в кэш, то есть нам для того, чтобы вывести им фамилию, нам неизбежно придется ходить в кэш.
[26:15.640 --> 26:25.640]  То есть если мы обнаружили на первом этапе, а там что пользователь за логинин, что какая-то кука с логином, с авторизацией у него есть, нам все равно идти в кэш.
[26:45.640 --> 27:03.640]  Ну, давайте думать. Я сам запутался. Так, стоит ли Яндекс кэшировать? Яндексу срочно нужно знать. Стоит ли ему кэшировать пользователя? На что мы будем с вами опираться?
[27:03.640 --> 27:22.640]  Ну, давай, допустим, за логининов у нас 80%. 80% у нас за логинины.
[27:22.640 --> 27:50.640]  Как часто? Вот. Вот, я понял, смотрите. У нас вот этот вот параметр hit miss radio, его нужно считать не для всех пользователей сразу, а для одного.
[27:50.640 --> 28:10.640]  Думаете? Да, для всех пользователей бессмысленно, он очень низкий, он никогда не сыграет, но проблема в том, что у нас пользователь приходит и начинает по сайту ходить.
[28:10.640 --> 28:26.640]  И вот со время жизни его сессии. То есть у нас, грубо говоря, пользователь приходит в первый раз. В первый раз у нас этого параметра, про него ничего мы не знаем, и у нас там пусто.
[28:26.640 --> 28:40.640]  Но потом он по сайту ходит, он что-то ищет. Он же не просто набрал главную Яндекс посмотреть, какая она красивая, он что-то пришел, поискал, посмотрел, побродил 1-2-3 странички, посмотрел и потом уже свалил.
[28:40.640 --> 29:07.640]  Вернется... Сейчас поговорим, сейчас поговорим о том, где хранить. То есть, по большому счету, у нас в данном конкретном случае, у нас сообщение hit miss radio выражается в то, сколько сессий он посмотрит.
[29:07.640 --> 29:12.640]  Сколько страниц в среднем он смотрит за 1 проход, за 1 сессию.
[29:16.640 --> 29:25.640]  И вот в этом выражении, вот здесь, в вычислениях, у нас будет уже, мы будем считать экономия по страницам.
[29:25.640 --> 29:39.640]  Давайте вот точно так же. У нас 100 миллисекунд занимают расчеты, 10 миллисекунд занимает хранение. Проход в кэш. И пользователь смотрит 5 страниц.
[29:39.640 --> 30:00.640]  Это означает, что у нас первый поход 110, правильно? И еще 4 по 10. И все это делим на 5. Получилось? 30.
[30:10.640 --> 30:33.640]  Сейчас поговорим. Мы уже два вопроса, которые ты бросил, с которыми нам можешь поговорить. Это вымывание данных из кэша и... Так, окей. Это если 5 страниц. А если 2? Все еще хорошо.
[30:33.640 --> 30:47.640]  Это не страница кэша, это страница, сколько он смотрит за 1, за 1 сессию пользователей. Потому что первый у тебя поход большой.
[30:48.640 --> 30:58.640]  У тебя всего 5 страниц. Первый из них будет первый, тебе нужно данные посчитать, поэтому он будет расчет плюс сходить в кэш, а все остальные будут только сходить в кэш.
[30:59.640 --> 31:16.640]  1, 2, 3, 4, 5. Не страницы. Мы их кладем в кэш, пока только им по миллионам. Сколько страниц он в среднем посмотрит? Сколько раз нам эта информация потребуется?
[31:16.640 --> 31:29.640]  Хорошо, с двойкой тоже просто. А от какой-нибудь параметром типа 1 и 2, средней температуры по больнице начинается уже история. Уже надо будет думать.
[31:29.640 --> 31:48.640]  А там скорее всего где-то что-то такое. То есть там вряд ли какое-нибудь большое целочистое. Так, что кэшировать, разобрались. Надо, не надо кэшировать, более-менее разобрались. Теперь где кэшировать?
[31:48.640 --> 31:56.640]  Давай.
[31:56.640 --> 32:19.640]  Это действительно хороший вопрос. Мы довольно сильно натянули сову на глобус. Не факт, что так будет. То есть по-хорошему, именно сколько в течение сессии, и сколько длится сессия.
[32:19.640 --> 32:32.640]  Еще и это нужно учить. Если сессия у него в среднем 30 минут, то за это время информация протухает. То есть у тебя всегда для этих расчетов по большому счету добавляется еще один параметр.
[32:32.640 --> 32:54.640]  А именно, как часто меняются эти данные? Имя не меняется. Мы же там храним, например, еще количество писем, которые не открыты.
[32:54.640 --> 33:14.640]  Сейчас поговорим. Не гони. Что решили? Где? Какие у нас варианты? На сервер или у клиента? Если мы у клиента храним, в чем плюс и минус?
[33:14.640 --> 33:37.640]  У клиента есть просто одна колоссальная задница, если мы храним эту информацию у клиента. Он может удалить. Это не самая большая, потому что в этом случае он просто сходит к нам и еще раз сидит.
[33:37.640 --> 33:47.640]  Вы ему не понравились?
[33:47.640 --> 33:52.640]  Для безопасности может плохо, да?
[33:52.640 --> 33:58.640]  Но это все равно не самая большая жопа. Самая большая жопа в чем?
[33:58.640 --> 34:06.640]  Тоже не самая большая жопа.
[34:06.640 --> 34:16.640]  Ну, пофиг. Мы же ему в компьютере нагадили. Пусть лежит.
[34:16.640 --> 34:28.640]  Да, у вас нет инструмента для того, чтобы эту информацию управлять.
[34:28.640 --> 34:38.640]  А если он... Нет, ну подожди. Этот инструмент заключается в том, что ты ему говоришь, насколько сохранить. Сохрани.
[34:38.640 --> 34:46.640]  Ты ему сказал, сохрани, например, на месяц. У тебя нет возможности, если у тебя что-то случилось, взять и изменить эту ситуацию.
[34:46.640 --> 34:52.640]  Сейчас месяц не прошел. Второй день идет.
[34:52.640 --> 35:04.640]  Это исключительно пассивный метод кэширования, скажем так. То есть положил, и оно лежит. И все, оно будет лежать сколько-то.
[35:04.640 --> 35:10.640]  Как?
[35:10.640 --> 35:18.640]  Кэш? Нет, это браузерная история. Ты браузеру сказал, сохрани вот эту картинку навечно.
[35:18.640 --> 35:28.640]  Можно ли Джаваскриптом сказать вот этой картинке, измени время хранения? Я не уверен, что это может.
[35:28.640 --> 35:50.640]  Да, можно. Но если у тебя какие-то... Ну да, просто заменить. Это если мы речь идет про картинку, а если речь идет про какие-то сложные данные, кусочки данных.
[35:50.640 --> 36:00.640]  Точно так же работает. Кукифайл это маленький кусочек, который у тебя...
[36:00.640 --> 36:08.640]  Так, давай вопрос еще.
[36:08.640 --> 36:20.640]  Да, но ты ему сказал, ты ему в начале пути говоришь, сколько ты будешь жить этому файлику, этой куки.
[36:20.640 --> 36:30.640]  Ты этой куки говоришь, эта кука действительно на месяц. Все, забудь, в течение месяца ты не властвуй над ней.
[36:30.640 --> 36:42.640]  Она сохранилась в браузере. Не у тебя, не в Джаваскрипт-коде, ты не имеешь доступа. Браузер месяц не прошел, отправляю куку.
[36:42.640 --> 36:54.640]  Ты уже хочешь ему проорать, ну сходи, спроси у меня, валидная ли это кука. Браузер это просто делает до тебя, до всех запросов.
[36:54.640 --> 37:04.640]  Сейчас уже сложно себе представить, но раньше были такие конструкции, чтобы браузер мог поднять тебе, показать тебе страницу, не ходя в интернет вообще.
[37:04.640 --> 37:12.640]  Ну сейчас можно, но как правило так никто не делает, все страницы махровые, толстые, Джаваскрипты, все прочее.
[37:12.640 --> 37:26.640]  Короче, это можно сделать. Браузер все сохранил у тебя, у себя. Если ты надавал правильную заголовку, он все сохранил, он тебе даже не пошел.
[37:26.640 --> 37:36.640]  У тебя сайт уже закрылся неделю. А браузер тебе все показывает, то и показывает.
[37:36.640 --> 37:48.640]  Это круто, если тебе не нужно ничего менять. Действительно, у вас есть два варианта. Вы можете отдать максимум пользователю, а можете сохранить у себя на сервере.
[37:48.640 --> 37:58.640]  Обычная логика это отдать пользователю все возможные картинки. Все, что реально не меняется годами.
[37:59.640 --> 38:11.640]  Картинки, видосики, логотипчики, CSS, и так далее. А потом менять феш в названии или менять какую-нибудь буковку в названии, если что пойдет не так.
[38:11.640 --> 38:17.640]  Память пользователя? Совсем не жалко.
[38:18.640 --> 38:27.640]  Он же тоже не дурачок. Он уже научился периодически кэш-чистить и все такое. Именно против таких разработчиков, как мы.
[38:27.640 --> 38:40.640]  Данные, как правило, у пользователя не хранятся. Как правило, нет. Некоторые проекты используются в истории, но как правило все кэширование данных используется на серваке.
[38:40.640 --> 38:58.640]  Так, теперь проблема ограниченности кэша. Да, то есть кэша у нас скорость отлика растет, но цена тоже растет. Рам дорогая.
[38:58.640 --> 39:07.640]  И мы не можем сделать бесконечный кэш и положить в него все. Есть так называемые стратегии вытеснения.
[39:07.640 --> 39:14.640]  Какие вы знаете стратегии вытеснения? Вы должны были проходить, по-моему.
[39:15.640 --> 39:19.640]  Ну, в общем, как бы две самые...
[39:19.640 --> 39:31.640]  Пифо, пифо. Да. LRU.
[39:31.640 --> 39:49.640]  Когда устанавливаете кэш, подумайте в том числе об этом. Что это означает? Это означает, что будет происходить, если место в кэше кончилось.
[39:49.640 --> 39:54.640]  Вот место в кэше кончается.
[39:54.640 --> 40:02.640]  Last, recently used. Наименее часто используемый. Самое редкое использование.
[40:02.640 --> 40:18.640]  Первый вошел, последний вошел, первый вышел, первый вошел, первый вышел.
[40:18.640 --> 40:26.640]  Ну, вот это для кэша это, конечно, бессмысленно. Вот эта история для кэша бессмысленна. Это stack.
[40:26.640 --> 40:31.640]  Вот в этой стратегии у тебя тупо уничтожается самый старый.
[40:31.640 --> 40:40.640]  Ну, то есть вот как бы ты кладешь в кэш потихонечку? Уничтожается?
[40:40.640 --> 40:49.640]  Да, ты прав. Нет, подожди. Нет, все правильно.
[40:49.640 --> 41:01.640]  Да, все правильно. Самый старый. Это, грубо говоря, конвейер. Вот сюда кладешь, отсюда он сваливает.
[41:01.640 --> 41:11.640]  Вот это самое часто встречается. Чаще всего встречается в кэшовых программах, потому что она простая и тупая.
[41:11.640 --> 41:22.640]  Вот это самое правильное по ловке вещей. Но вот подобная стратегия, то есть предполагать, что кэшу в самой программе кэш,
[41:22.640 --> 41:28.640]  это тоже программа, которая у вас на серваке работает, ей нужно вычислять постоянно и следить за статистикой.
[41:28.640 --> 41:33.640]  Не все кэши это делают. Не все кэши это умеют делать.
[41:33.640 --> 41:45.640]  Ну, в общем, вы должны иметь в виду о том, что всегда кэш – это не тот инструмент, который можно положить данные и надеяться, что они там есть.
[41:45.640 --> 41:58.640]  Их там может не быть по десятку причин. Перезагрузка. Кэш только стартовал. Процесс кэша прибили.
[41:58.640 --> 42:13.640]  Я не знаю. Бешеный сисадмин. Хаосманки сработал. Знаете инструмент хаосманки? Бешеный обезьян.
[42:13.640 --> 42:22.640]  Вы спроектировали проект, вы его запустили на нескольких серверах, еще что-то он работает на нескольких процессах, потом запускается хаосманки.
[42:22.640 --> 42:32.640]  Хаосманки – это бешеная обезьянка, которая в случайном порядке прибивает процессы, работающие на ваших серверах.
[42:32.640 --> 42:41.640]  Вы не знаете, какой она убьет. У нее нет ограничений. Просто что-то случайно проверка на отказу устойчивости системы.
[42:41.640 --> 42:49.640]  То есть что произойдет, если у тебя что-то закрэшится? Она может прибить, я не знаю, операционку.
[42:49.640 --> 43:00.640]  Ну а чего? Если у вас масштабируемая система, работающая на нескольких серверах, ваш проект должен продолжить работать.
[43:00.640 --> 43:08.640]  Вы не знаете раньше, что умрет диск, операционка, память посыпется, какой-нибудь процесс где-нибудь сдохнет и так далее.
[43:08.640 --> 43:14.640]  Вот хаосманки имитируют работу вот такой случайных проблем.
[43:14.640 --> 43:24.640]  Короче, но самая часто встречающаяся причина, почему данных нет, потому что кэш решил их вычистить по какой-то своей внутренней логике.
[43:25.640 --> 43:33.640]  Там могут быть какие-то сложные процессы. То есть LRU сложно вычислять, потому что нужно за каждым элементом кэша следить.
[43:33.640 --> 43:43.640]  Ну бывает какие-то комбинации, еще что-то, там может что-то думать. Короче, полная жесть. Мы над этим, как правило, не властны.
[43:43.640 --> 43:55.640]  То есть даже если вы говорите, сохрани этот элемент в кэше на час, вы не можете быть уверены, что через час он там все еще будет.
[43:55.640 --> 44:01.640]  Что он там через минуту будет, вы не можете быть уверены. Это вот первое правило работы с кэшом.
[44:01.640 --> 44:19.640]  Он ее использует как рекомендательную, вот так скажем. То есть больше он хранить не будет. То есть 61 минуту он не прохранит.
[44:19.640 --> 44:31.640]  Вот это можно сказать гарантированно. Но 59, 59 тебе тоже не гарантировано. Очень важный момент, ребят, про кэш.
[44:31.640 --> 44:43.640]  Я идем дальше. С кэшом говно и боли очень много. Это сложно. Как вообще в принципе происходит работа с кэшом?
[44:44.640 --> 45:03.640]  Ключ значения. То есть, как правило, кэш хранит ваши данные по ключу. У вас есть ключ, некое уникальное значение.
[45:03.640 --> 45:21.640]  А кэш обещает, что он вам по этому ключу достанет данные. Что такое ключ? Ну это может быть, например, mindpage. Какая-то строка.
[45:21.640 --> 45:30.640]  Mindpage это как бы главная страница. Как угодно вы можете назвать. Можете написать главная страница.
[45:30.640 --> 45:46.640]  Самое важное, чтобы все части вашей программы, все элементы вашей программы или все, кто ходит в этот кэш, знали о том, что по ключу mindpage кэш вернет в ним кусок главной страницы.
[45:47.640 --> 45:58.640]  То есть, по большому счету, для того, чтобы нормально кэш заработал, вам нужно придумать, достигнуть некой договоренности о том, как вы именуете элементы ключей.
[45:58.640 --> 46:13.640]  Ну как вы именуете ключи. И как храните данные. Вот вы договариваетесь один раз. Mindpage. И все, все между программистами сидите, в 20 ром программируете один тот же код. Договорились. Mindpage.
[46:13.640 --> 46:18.640]  Так. Подкидываю вам проблему.
[46:24.640 --> 46:34.640]  Наверняка как. То есть, когда вы производите операцию положить в кэш, вы указываете ключ, вы указываете данные и вы указываете время.
[46:34.640 --> 46:49.640]  Насколько. Сколько эти данные валидны. Вот этот вот минимальный, минимальный набор. Ключ и время. Ключ, время, данные. Ключ, время, данные.
[46:49.640 --> 47:01.640]  Первая проблема. Ну представьте себе, что ваш компьютер перегрузился. В кэше ноль.
[47:01.640 --> 47:08.640]  Перегрузился. В кэше ноль.
[47:08.640 --> 47:15.640]  Кэш пустой. Что будете делать?
[47:15.640 --> 47:25.640]  Да, окей. Ну тогда, конечно, диски можно хранить, но тогда у нас все замедляется.
[47:25.640 --> 47:35.640]  Лениво сбрасывать. Иногда дампить. Хорошо, окей. Но там вообще это может быть дохрена.
[47:35.640 --> 47:40.640]  Кэше. Несколько гигабайт.
[47:43.640 --> 47:46.640]  Хорошо.
[47:57.640 --> 48:01.640]  Еще раз. Перед загрузкой положить.
[48:02.640 --> 48:08.640]  Не, может быть случайная история. Эскаватор. Самая любимая тема наша.
[48:08.640 --> 48:11.640]  Перерывает кабель.
[48:11.640 --> 48:27.640]  Мы не знаем. Ну давай так. Допустим мы его, допустим мы его пытаемся сбросить на диск. Хорошо.
[48:27.640 --> 48:35.640]  Но если он большой и сбрасывает, то мы можем лениво. А читать лениво мы не можем. 8 гигабайт поднять диск, например.
[48:35.640 --> 48:40.640]  8 гигабайт абсолютно нормальный. Размер кэша.
[48:43.640 --> 48:49.640]  8 гигабайт. Сколько собираешься его читать? Ты будешь несколько минут читать.
[48:52.640 --> 48:55.640]  Ну ладно.
[48:55.640 --> 49:04.640]  Окей. Итако. Проблема, которую мы сейчас решаем называется холодный старт.
[49:04.640 --> 49:13.640]  Это нужно холодный кэш не прогретый. Это сленг. Прогретый кэш это как раз кэш, который заполненный.
[49:13.640 --> 49:17.640]  Отвечает все самые часто встречающиеся вопросы в нем есть.
[49:18.640 --> 49:25.640]  Холодный старт. Кэша нет. Первый ваш вариант сбрасывать все на диск.
[49:29.640 --> 49:35.640]  Сбрасывать все на диск. Минус этого варианта в том, что очень длинная будет загрузка.
[49:35.640 --> 49:39.640]  Прям очень длинная будет загрузка. Вы будете качать весь кэш.
[49:39.640 --> 49:44.640]  А там есть данные, которые прям очень нужны. Данные, которые нафиг не нужны.
[49:44.640 --> 49:49.640]  Данные, которые уже протухли 10 раз и так далее. Пока не закачаете, не узнаете.
[49:49.640 --> 49:54.640]  Так-так. Плюс закачивать. Еще варианты. Как будете решать?
[50:01.640 --> 50:05.640]  Да, но это же у тебя вал запросов. У тебя кэш пустой.
[50:05.640 --> 50:10.640]  То есть у тебя каждый запрос первые несколько минут будет вычисляться.
[50:10.640 --> 50:14.640]  И дальше начнется жопа, которая называется гонки.
[50:14.640 --> 50:19.640]  Ты будешь каждый запрос вычислять. У тебя будет вычисляться все меньше и меньше и меньше.
[50:19.640 --> 50:23.640]  В смысле медленнее и медленнее, потому что у тебя процессор будет перезагружен.
[50:23.640 --> 50:27.640]  У тебя соответственно еще больше. И вот такой вал пойдет.
[50:35.640 --> 50:45.640]  Ну, подожди. У тебя кэш, как правило, единый для всех бэкэндов.
[50:49.640 --> 50:54.640]  Нет, это как раз хорошо, потому что иначе у тебя и не может быть.
[50:58.640 --> 51:02.640]  Ну, он не должен на одном серваке быть. Окей.
[51:02.640 --> 51:07.640]  Ну, давайте. Это очень сложно.
[51:07.640 --> 51:12.640]  Хорошо, второй вариант. Это просто надо распределить его.
[51:19.640 --> 51:24.640]  Но. Вы, как архитекторы, всегда должны искать самый простой способ решения проблемы.
[51:24.640 --> 51:30.640]  Вот когда ты хочешь себе сделать распределенный кэш, ты себе раз фига и фонд оплаты труда увеличиваешь.
[51:31.640 --> 51:35.640]  Есть инструменты, но ими тоже нужно уметь пользоваться.
[51:35.640 --> 51:39.640]  Создаешь новую точку отказа, за ней нужно следить и так далее.
[51:39.640 --> 51:49.640]  Задачу решаем самым простым способом. В большинстве случаев, в 90% случаев ваш сайт, в 99% случаев ваш проект влезет на один сервак.
[51:49.640 --> 51:56.640]  В 99,5% случаев тебе никогда не потребуется распределенный кэш.
[51:56.640 --> 51:59.640]  Просто потому, что тебе достаточно будет одного.
[52:07.640 --> 52:12.640]  Я, если честно, почти по-моему не знаю кэшей, которые так умеют делать.
[52:12.640 --> 52:17.640]  На самом деле таких инструментов нет. Почему-то их нет. Я думаю, что какая-то есть логика.
[52:17.640 --> 52:21.640]  Хорошо, сбрасывать не все. Это вариант.
[52:22.640 --> 52:25.640]  Если есть такой инструмент.
[52:25.640 --> 52:27.640]  А более простой способ есть?
[52:27.640 --> 52:31.640]  Чтобы не нагружать диск, еще что-нибудь. Какой-то более простой способ.
[52:33.640 --> 52:39.640]  И закачивать, потом не стартовать, кучу времени, пока у тебя несколько гигабайт скачать.
[52:44.640 --> 52:46.640]  Ну это радикально.
[52:47.640 --> 52:51.640]  Извините, ребята, у нас кривые архитекторы, поэтому вы подождете.
[52:51.640 --> 52:53.640]  Нет, так не пойдет.
[52:59.640 --> 53:05.640]  А давай придумаем вариант, который нам позволит и работать при холодном старте, но при этом никому не отказывать.
[53:06.640 --> 53:08.640]  Думайте.
[53:16.640 --> 53:19.640]  Может быть, отказать некоторым запросам.
[53:29.640 --> 53:32.640]  А в какой момент ты перейдешь к другой схеме обратно?
[53:46.640 --> 53:48.640]  А если будет, то мы его...
[53:52.640 --> 53:55.640]  Как ты это программировать будешь? Как ты это будешь поддерживать?
[53:55.640 --> 53:59.640]  У тебя кто-то должен будет считать этот запрос, куда относится каждый раз.
[53:59.640 --> 54:01.640]  Это все очень сложно, проще.
[54:03.640 --> 54:05.640]  Я пока воспользуюсь волшебным инструментом.
[54:07.640 --> 54:08.640]  Да.
[54:09.640 --> 54:10.640]  Огонь.
[54:10.640 --> 54:11.640]  Так, ну...
[54:11.640 --> 54:13.640]  Давайте, давайте, давайте, давайте.
[54:13.640 --> 54:15.640]  Очень простое решение.
[54:17.640 --> 54:20.640]  Ты же его предложила, по-моему?
[54:20.640 --> 54:22.640]  Да, ты, ты, ты.
[54:22.640 --> 54:24.640]  Вспоминаю, что ты предлагала.
[54:27.640 --> 54:28.640]  Нет.
[54:28.640 --> 54:30.640]  Это неправильно.
[54:33.640 --> 54:35.640]  Ну...
[54:36.640 --> 54:38.640]  Итак, в чем у нас проблема?
[54:38.640 --> 54:43.640]  У нас проблема в том, что у нас идет вал запросов.
[54:43.640 --> 54:45.640]  Идет вал запросов.
[54:46.640 --> 54:48.640]  Во время старта.
[54:49.640 --> 54:52.640]  И мы боимся под этим валом запросов валить.
[54:53.640 --> 54:56.640]  Но, ну, например, допустим, у нас обычный новостной сайт.
[54:57.640 --> 54:59.640]  Чем характерен новостной сайт?
[54:59.640 --> 55:01.640]  Вообще любой проект чем характерен?
[55:05.640 --> 55:07.640]  Правила Парета.
[55:13.640 --> 55:15.640]  Ну, а теперь свяжите это все.
[55:20.640 --> 55:21.640]  Так.
[55:21.640 --> 55:23.640]  И что с этим можно сделать?
[55:25.640 --> 55:27.640]  Да блин, ребят, у вас...
[55:28.640 --> 55:31.640]  На главной странице любой новостной сайт...
[55:31.640 --> 55:33.640]  Не знаю, 80...
[55:33.640 --> 55:35.640]  Ну, не 80, хорошо.
[55:35.640 --> 55:37.640]  30% запросов это главная страница.
[55:37.640 --> 55:38.640]  Одна.
[55:39.640 --> 55:41.640]  Закешировать одну главную страницу.
[55:41.640 --> 55:43.640]  И вы сократили себе...
[55:43.640 --> 55:45.640]  Улегчили жизнь на 30% уже.
[55:52.640 --> 55:53.640]  Да.
[55:54.640 --> 55:56.640]  Масильный прогрев.
[55:56.640 --> 55:58.640]  Перед тем, как стартануть...
[56:01.640 --> 56:03.640]  Выполнить и положить кэш...
[56:03.640 --> 56:04.640]  Кэш...
[56:04.640 --> 56:07.640]  Те самые часто встречающиеся страницы.
[56:14.640 --> 56:16.640]  Потому что здесь ты не знаешь, что ты закачиваешь.
[56:16.640 --> 56:18.640]  Ты закачиваешь просто большой блок.
[56:19.640 --> 56:20.640]  Его закачивать долго.
[56:20.640 --> 56:22.640]  А здесь ты выполняешь 100 запросов.
[56:24.640 --> 56:26.640]  Это просто на порядок быстрее будет.
[56:26.640 --> 56:28.640]  Скорее всего, это будет быстрее и проще.
[56:28.640 --> 56:30.640]  Потому что вот здесь тебе нужно...
[56:30.640 --> 56:31.640]  Для того, чтобы...
[56:31.640 --> 56:34.640]  Если ты хочешь закачивать, например, не все...
[56:34.640 --> 56:36.640]  Тебе нужна какая-то очень сложная...
[56:38.640 --> 56:40.640]  Сама вот эта вот программа кэширования,
[56:40.640 --> 56:42.640]  которая будет за собой следить,
[56:42.640 --> 56:44.640]  LRU считать и так далее.
[56:44.640 --> 56:46.640]  А здесь все очень просто.
[56:46.640 --> 56:47.640]  Очень тупо.
[56:47.640 --> 56:49.640]  Тупое решение. Самое хорошее.
[56:49.640 --> 56:51.640]  То есть просто надо просто стартуйте.
[56:52.640 --> 56:54.640]  Запускайте.
[56:54.640 --> 56:56.640]  Вызывайте 100 страниц сайта.
[56:56.640 --> 56:57.640]  И все.
[56:57.640 --> 56:59.640]  Даже специально ничего не надо писать.
[56:59.640 --> 57:01.640]  И вы гетом.
[57:02.640 --> 57:04.640]  Делайте запрос к сайту.
[57:04.640 --> 57:06.640]  На 10 страничек.
[57:06.640 --> 57:08.640]  Положили их в кэш.
[57:08.640 --> 57:10.640]  Ну, в смысле, пока вы их делаете,
[57:10.640 --> 57:12.640]  сайт их сам положит в кэш.
[57:12.640 --> 57:14.640]  То есть он же вычисления производит и так далее.
[57:14.640 --> 57:16.640]  И только после этого отпускаете пользователей.
[57:16.640 --> 57:19.640]  И у вас значительная часть нагрузки прогрета.
[57:19.640 --> 57:21.640]  Она работает.
[57:24.640 --> 57:25.640]  Так.
[57:25.640 --> 57:26.640]  Идем дальше.
[57:26.640 --> 57:28.640]  Это еще не все.
[57:29.640 --> 57:31.640]  Ну, почему?
[57:31.640 --> 57:33.640]  Ты же можешь...
[57:35.640 --> 57:37.640]  Ну, вообще, ты, скорее всего, знаешь,
[57:37.640 --> 57:39.640]  как работает твой проект.
[57:39.640 --> 57:41.640]  Ты знаешь, что есть главная страница и так далее.
[57:41.640 --> 57:43.640]  Да, может, не повести.
[57:43.640 --> 57:45.640]  Но...
[57:45.640 --> 57:47.640]  Ну, как бы, с чего бы это?
[57:47.640 --> 57:49.640]  Если все конкретно читают какую-то конкретную новость,
[57:49.640 --> 57:51.640]  например, на какую-то конкретную страничку.
[57:51.640 --> 57:53.640]  Да нет, скорее всего, знаешь.
[57:53.640 --> 57:55.640]  Оставь...
[57:55.640 --> 57:57.640]  Оставь...
[57:59.640 --> 58:01.640]  Первыми запросами от пользователей...
[58:01.640 --> 58:03.640]  Почему мы прогрели?
[58:03.640 --> 58:05.640]  Потому что пользователи...
[58:05.640 --> 58:07.640]  А что делать все остальные?
[58:07.640 --> 58:09.640]  Пользователи ломанутся сразу все.
[58:11.640 --> 58:13.640]  Ты не можешь взять первых 100 пользователей,
[58:13.640 --> 58:15.640]  обслужить их,
[58:15.640 --> 58:17.640]  остальных заставить подождать.
[58:17.640 --> 58:19.640]  Вот.
[58:19.640 --> 58:21.640]  Да.
[58:21.640 --> 58:23.640]  То, к чему мы приходим сейчас.
[58:23.640 --> 58:25.640]  Любимая тема
[58:25.640 --> 58:27.640]  всех High-Load-разработчиков.
[58:27.640 --> 58:29.640]  Race Condition.
[58:29.640 --> 58:31.640]  Итак, у нас есть
[58:31.640 --> 58:33.640]  клавиатуры.
[58:33.640 --> 58:35.640]  Ну, я не знаю,
[58:35.640 --> 58:37.640]  как это делать.
[58:37.640 --> 58:39.640]  Ну, я не знаю,
[58:39.640 --> 58:41.640]  как это делать.
[58:41.640 --> 58:43.640]  Ну, я не знаю,
[58:43.640 --> 58:45.640]  как это делать.
[58:45.640 --> 58:47.640]  Итак, у нас есть кэш.
[58:47.640 --> 58:49.640]  В нем есть...
[58:49.640 --> 58:51.640]  В нем лежит
[58:51.640 --> 58:53.640]  главная страница.
[58:53.640 --> 58:55.640]  Так, слушай меня. В нем лежит
[58:55.640 --> 58:57.640]  главная страница. Итак, главная страница
[58:57.640 --> 58:59.640]  протухла.
[58:59.640 --> 59:01.640]  То же самое означает все.
[59:01.640 --> 59:03.640]  Она больше не работает. Она больше
[59:03.640 --> 59:05.640]  не валидна.
[59:05.640 --> 59:07.640]  В кэше
[59:07.640 --> 59:09.640]  данные старые, устарели.
[59:09.640 --> 59:11.640]  И вот идет
[59:11.640 --> 59:13.640]  запрос первый. Встречает о том, что
[59:13.640 --> 59:15.640]  главная страница протухла.
[59:15.640 --> 59:17.640]  Начинает ее вычислять.
[59:17.640 --> 59:19.640]  На вычисление у нее, например, уходит
[59:19.640 --> 59:21.640]  100 миллисекунд.
[59:21.640 --> 59:23.640]  Не очень много.
[59:23.640 --> 59:25.640]  Но это главная страница.
[59:25.640 --> 59:27.640]  И за 100 миллисекунд еще
[59:27.640 --> 59:29.640]  пять процессов придут и обнаружат, что
[59:29.640 --> 59:31.640]  главная страница протухла.
[59:31.640 --> 59:33.640]  И начинают ее вычислять.
[59:35.640 --> 59:37.640]  Что делать?
[59:37.640 --> 59:39.640]  То есть мы тупо
[59:39.640 --> 59:41.640]  греем воздух.
[59:41.640 --> 59:43.640]  Хорошо, если их всего пять.
[59:43.640 --> 59:45.640]  А если их, например, пятьдесят,
[59:45.640 --> 59:47.640]  то тогда вот этот процесс,
[59:47.640 --> 59:49.640]  когда придет, столкнется
[59:49.640 --> 59:51.640]  не знаю, пятидесятый процесс,
[59:51.640 --> 59:53.640]  столкнется уже
[59:53.640 --> 59:55.640]  с конкретным возросшей нагрузкой
[59:55.640 --> 59:57.640]  на сервах. И его вычисления займут
[59:57.640 --> 59:59.640]  уже не сто миллисекунд, а
[59:59.640 --> 01:00:01.640]  тысячу или хотя бы двести.
[01:00:03.640 --> 01:00:05.640]  За эти двести миллисекунд
[01:00:05.640 --> 01:00:07.640]  произойдет что? Еще прибежит сто.
[01:00:07.640 --> 01:00:09.640]  И вот этот вот сто пятидесятый
[01:00:09.640 --> 01:00:11.640]  столкнется, что серверу нашему
[01:00:11.640 --> 01:00:13.640]  конкретно плохо.
[01:00:13.640 --> 01:00:15.640]  Поняли, да, проблему?
[01:00:15.640 --> 01:00:17.640]  И здесь у него вычисления займут
[01:00:17.640 --> 01:00:19.640]  уже тысячу миллисекунд. И все.
[01:00:19.640 --> 01:00:21.640]  Наш сайт лег.
[01:00:25.640 --> 01:00:27.640]  Гонки.
[01:00:27.640 --> 01:00:29.640]  То есть вот кто быстрее?
[01:00:29.640 --> 01:00:31.640]  То есть как бы этот, этот, этот, они все
[01:00:31.640 --> 01:00:33.640]  одновременно начинают вычислять одно и то же.
[01:00:33.640 --> 01:00:35.640]  Поэтому гонки.
[01:00:39.640 --> 01:00:41.640]  Не, подожди.
[01:00:41.640 --> 01:00:43.640]  Когда он закончил,
[01:00:43.640 --> 01:00:45.640]  они уже перестали.
[01:00:47.640 --> 01:00:49.640]  А, ты имеешь в виду, что где-то здесь это
[01:00:49.640 --> 01:00:51.640]  закончится? Ну да, согласен.
[01:00:51.640 --> 01:00:53.640]  Вот этого у нас не будет.
[01:00:53.640 --> 01:00:55.640]  Но у нас сайт может
[01:00:55.640 --> 01:00:57.640]  лечь за одну,
[01:00:57.640 --> 01:00:59.640]  за как бы за одну институт маленькую,
[01:00:59.640 --> 01:01:01.640]  за один промежуток.
[01:01:05.640 --> 01:01:07.640]  А как мы будем делать?
[01:01:07.640 --> 01:01:09.640]  Как нам быть?
[01:01:25.640 --> 01:01:27.640]  Так. Хорошо.
[01:01:27.640 --> 01:01:29.640]  То есть первое предложение,
[01:01:29.640 --> 01:01:31.640]  что вот этот вот чувак не просто начинает
[01:01:31.640 --> 01:01:33.640]  считать, но и ставит где-то
[01:01:33.640 --> 01:01:35.640]  флажок о том, что он считает.
[01:01:37.640 --> 01:01:39.640]  Где?
[01:01:43.640 --> 01:01:45.640]  Где ему ставить этот флажок?
[01:01:51.640 --> 01:01:53.640]  Как мы узнаем, что страница протухла?
[01:01:53.640 --> 01:01:55.640]  Нам кэш ничего не возвращает.
[01:01:59.640 --> 01:02:01.640]  Мы сделали запрос по ключу
[01:02:01.640 --> 01:02:03.640]  MainPage в кэш, кэш нам сказал.
[01:02:03.640 --> 01:02:05.640]  Ничего нет.
[01:02:07.640 --> 01:02:09.640]  Это фонд оплаты труда
[01:02:09.640 --> 01:02:11.640]  даже не на 10,
[01:02:11.640 --> 01:02:13.640]  это на 30%
[01:02:13.640 --> 01:02:15.640]  увеличил
[01:02:15.640 --> 01:02:17.640]  одним словом.
[01:02:17.640 --> 01:02:19.640]  Одним словом mutex, да.
[01:02:23.640 --> 01:02:25.640]  И потом.
[01:02:25.640 --> 01:02:27.640]  Есть еще проблема.
[01:02:27.640 --> 01:02:29.640]  У тебя это все может происходить
[01:02:29.640 --> 01:02:31.640]  на разных серверах,
[01:02:31.640 --> 01:02:33.640]  на разных бэкендах.
[01:02:33.640 --> 01:02:35.640]  У тебя несколько бэкендов,
[01:02:35.640 --> 01:02:37.640]  у тебя несколько бэкендов
[01:02:37.640 --> 01:02:39.640]  пользуются одним кэшом.
[01:02:41.640 --> 01:02:43.640]  Мы ей сказали
[01:02:43.640 --> 01:02:45.640]  закэшируйся на час.
[01:02:45.640 --> 01:02:47.640]  Час прошел,
[01:02:47.640 --> 01:02:49.640]  она протухла.
[01:02:51.640 --> 01:02:53.640]  Ну, давайте, где мы флаг
[01:02:53.640 --> 01:02:55.640]  будем хранить?
[01:02:55.640 --> 01:02:57.640]  Где распределенно мне?
[01:02:57.640 --> 01:02:59.640]  Какое распределенно?
[01:02:59.640 --> 01:03:01.640]  А?
[01:03:05.640 --> 01:03:07.640]  Нет.
[01:03:07.640 --> 01:03:09.640]  Проще.
[01:03:09.640 --> 01:03:11.640]  Давайте проще.
[01:03:15.640 --> 01:03:17.640]  Окей.
[01:03:17.640 --> 01:03:19.640]  В кэше согласен.
[01:03:19.640 --> 01:03:21.640]  А где в кэше?
[01:03:21.640 --> 01:03:23.640]  Отдельный ключ
[01:03:23.640 --> 01:03:25.640]  сделаем.
[01:03:25.640 --> 01:03:27.640]  И такой делаем ключ
[01:03:29.640 --> 01:03:31.640]  который называется
[01:03:31.640 --> 01:03:33.640]  MainPage.
[01:03:33.640 --> 01:03:35.640]  Run.
[01:03:37.640 --> 01:03:39.640]  И в нем будет единичка или нолик.
[01:03:39.640 --> 01:03:41.640]  И единичка что будет означать?
[01:03:41.640 --> 01:03:43.640]  Единичка или нолик?
[01:03:43.640 --> 01:03:45.640]  Единичка будет означать
[01:03:45.640 --> 01:03:47.640]  что в данный момент
[01:03:47.640 --> 01:03:49.640]  процесс считается.
[01:03:49.640 --> 01:03:51.640]  А нолик что?
[01:03:51.640 --> 01:03:53.640]  Даш, что никто не считает.
[01:03:53.640 --> 01:03:55.640]  Окей, мы написали единичку.
[01:03:55.640 --> 01:03:57.640]  Вот этот процесс
[01:03:57.640 --> 01:03:59.640]  написал тогда единичку.
[01:03:59.640 --> 01:04:01.640]  Проработал половину времени
[01:04:01.640 --> 01:04:03.640]  и сдох.
[01:04:05.640 --> 01:04:07.640]  Бывает.
[01:04:07.640 --> 01:04:09.640]  Не, на нескольких машинах
[01:04:09.640 --> 01:04:11.640]  как правило.
[01:04:23.640 --> 01:04:25.640]  То есть мы говорим о том, что вот эта единичка
[01:04:25.640 --> 01:04:27.640]  валидна
[01:04:27.640 --> 01:04:29.640]  100 миллисекунд
[01:04:29.640 --> 01:04:31.640]  или 200 миллисекунд с текущего момента.
[01:04:43.640 --> 01:04:45.640]  Умер процесс.
[01:04:45.640 --> 01:04:47.640]  Процесс вычисляющий, который
[01:04:47.640 --> 01:04:49.640]  единичку поставил, он помер.
[01:04:53.640 --> 01:04:55.640]  Вы хотите установить
[01:04:55.640 --> 01:04:57.640]  этот ключ на 200 миллисекунд.
[01:04:57.640 --> 01:04:59.640]  Ну нормально.
[01:04:59.640 --> 01:05:01.640]  Установили, окей, хорошо.
[01:05:03.640 --> 01:05:05.640]  Мы можем
[01:05:05.640 --> 01:05:07.640]  отметить, что процесс внезапно помер.
[01:05:07.640 --> 01:05:09.640]  И тогда кто-то,
[01:05:09.640 --> 01:05:11.640]  через 200 миллисекунд
[01:05:11.640 --> 01:05:13.640]  он вновь
[01:05:13.640 --> 01:05:15.640]  получает здесь пустоту.
[01:05:15.640 --> 01:05:17.640]  И вновь ее
[01:05:17.640 --> 01:05:19.640]  занимает. Хорошо, что с остальными?
[01:05:19.640 --> 01:05:21.640]  Остальным что делать?
[01:05:21.640 --> 01:05:23.640]  Вы не можете их подвесить.
[01:05:23.640 --> 01:05:25.640]  Это невозможно.
[01:05:27.640 --> 01:05:29.640]  Мы как?
[01:05:33.640 --> 01:05:35.640]  Подожди, а как?
[01:05:35.640 --> 01:05:37.640]  Ты сказал
[01:05:37.640 --> 01:05:39.640]  закешировать главную сравнительницу на 1 час.
[01:05:39.640 --> 01:05:41.640]  Все, через
[01:05:41.640 --> 01:05:43.640]  час кэш тебе говорит.
[01:05:43.640 --> 01:05:45.640]  Нет.
[01:05:45.640 --> 01:05:47.640]  Мне ничего не плачет.
[01:05:49.640 --> 01:05:51.640]  А как мы тогда будем собираемся
[01:05:51.640 --> 01:05:53.640]  узнавать о том, что
[01:05:53.640 --> 01:05:55.640]  она все-таки реально протухнет?
[01:05:57.640 --> 01:05:59.640]  Это что-то из цивилизации.
[01:05:59.640 --> 01:06:01.640]  Это не...
[01:06:01.640 --> 01:06:03.640]  Нет.
[01:06:11.640 --> 01:06:13.640]  А как
[01:06:13.640 --> 01:06:15.640]  ты будешь проверять?
[01:06:15.640 --> 01:06:17.640]  Подожди, кэш
[01:06:17.640 --> 01:06:19.640]  очень простая штука.
[01:06:19.640 --> 01:06:21.640]  Ключ значения, время.
[01:06:27.640 --> 01:06:29.640]  А как
[01:06:29.640 --> 01:06:31.640]  ты посмотрел
[01:06:31.640 --> 01:06:33.640]  по ключу?
[01:06:33.640 --> 01:06:35.640]  Это время
[01:06:35.640 --> 01:06:37.640]  устанавливается только
[01:06:37.640 --> 01:06:39.640]  в момент
[01:06:39.640 --> 01:06:41.640]  выполнения
[01:06:41.640 --> 01:06:43.640]  процедуры
[01:06:43.640 --> 01:06:45.640]  загрузки в кэш.
[01:06:45.640 --> 01:06:47.640]  После этого она тебе недоступна, ты его не можешь вытащить.
[01:06:47.640 --> 01:06:49.640]  Кэш тебе его не
[01:06:49.640 --> 01:06:51.640]  отдает, он где-то внутри хранит.
[01:06:51.640 --> 01:06:53.640]  Хорошо, я понимаю все, что ты говоришь.
[01:06:53.640 --> 01:06:55.640]  Ты можешь внутри данных
[01:06:55.640 --> 01:06:57.640]  хранить.
[01:06:57.640 --> 01:06:59.640]  То есть данные могут быть
[01:06:59.640 --> 01:07:01.640]  сложными.
[01:07:01.640 --> 01:07:03.640]  Данные могут быть
[01:07:03.640 --> 01:07:05.640]  сложными.
[01:07:05.640 --> 01:07:07.640]  Данные, которые вы храните по ключу,
[01:07:07.640 --> 01:07:09.640]  это может быть массив,
[01:07:09.640 --> 01:07:11.640]  в котором первое это данные,
[01:07:13.640 --> 01:07:15.640]  а второе, например,
[01:07:15.640 --> 01:07:17.640]  время.
[01:07:17.640 --> 01:07:19.640]  Можно?
[01:07:19.640 --> 01:07:21.640]  Только мы это
[01:07:21.640 --> 01:07:23.640]  только что придумали.
[01:07:23.640 --> 01:07:25.640]  Итак,
[01:07:25.640 --> 01:07:27.640]  мы с вами
[01:07:27.640 --> 01:07:29.640]  устанавливаем вот это время,
[01:07:29.640 --> 01:07:31.640]  системное время кэша,
[01:07:31.640 --> 01:07:33.640]  надолго, не на час,
[01:07:33.640 --> 01:07:35.640]  не знаю,
[01:07:35.640 --> 01:07:37.640]  на 100 часов.
[01:07:37.640 --> 01:07:39.640]  Туда мы сохраняем данные,
[01:07:39.640 --> 01:07:41.640]  а вот здесь мы пишем,
[01:07:41.640 --> 01:07:43.640]  ну я не знаю, что мы пишем.
[01:07:43.640 --> 01:07:45.640]  Время, когда мы обновили.
[01:07:45.640 --> 01:07:47.640]  Время, когда мы обновили, да.
[01:07:47.640 --> 01:07:49.640]  Окей, хорошо, мы пишем время
[01:07:49.640 --> 01:07:51.640]  обновления.
[01:07:55.640 --> 01:07:57.640]  Теперь вот здесь
[01:07:57.640 --> 01:07:59.640]  первый запрос пришел.
[01:08:01.640 --> 01:08:03.640]  Сделал запрос по ключу,
[01:08:03.640 --> 01:08:05.640]  поднял вот это данные и вот это вот время
[01:08:05.640 --> 01:08:07.640]  обновления. Проверяет время обновления.
[01:08:07.640 --> 01:08:09.640]  Прошел час,
[01:08:09.640 --> 01:08:11.640]  то есть как бы валидно еще вот
[01:08:11.640 --> 01:08:13.640]  эти данные или нет.
[01:08:13.640 --> 01:08:15.640]  Причислил, получилось 60, не знаю,
[01:08:15.640 --> 01:08:17.640]  61 минуты.
[01:08:17.640 --> 01:08:19.640]  Невалидно. Все, ставлю вот этот
[01:08:19.640 --> 01:08:21.640]  вот положок на 200
[01:08:21.640 --> 01:08:23.640]  миллисекунд, начинаю вычислять.
[01:08:23.640 --> 01:08:25.640]  Второй запрос пришел.
[01:08:27.640 --> 01:08:29.640]  Берет данные по ключу
[01:08:29.640 --> 01:08:31.640]  отсюда, смотрит,
[01:08:31.640 --> 01:08:33.640]  так, данные
[01:08:33.640 --> 01:08:35.640]  невалидны, их нужно начать вычислять.
[01:08:35.640 --> 01:08:37.640]  Проверяет, могу ли я начать
[01:08:37.640 --> 01:08:39.640]  вычислять? Нет, нифига не
[01:08:39.640 --> 01:08:41.640]  могу, кто-то уже занимается этим.
[01:08:41.640 --> 01:08:43.640]  И тогда я что делаю? Я отдаю
[01:08:43.640 --> 01:08:45.640]  вот эти старые, устаревшие,
[01:08:45.640 --> 01:08:47.640]  протухшие данные пользователю.
[01:08:49.640 --> 01:08:51.640]  Ну и что? Это зависит от данных.
[01:08:51.640 --> 01:08:53.640]  В большинстве случаев можно.
[01:08:53.640 --> 01:08:55.640]  Потому что здесь
[01:08:55.640 --> 01:08:57.640]  речь реально о
[01:08:57.640 --> 01:08:59.640]  100-200 миллисекунд, которые тебе
[01:08:59.640 --> 01:09:01.640]  помогут избежать гонок.
[01:09:03.640 --> 01:09:05.640]  Да?
[01:09:05.640 --> 01:09:07.640]  Соответственно все запросы, которые
[01:09:07.640 --> 01:09:09.640]  приходят, попадают на вот этот период
[01:09:09.640 --> 01:09:11.640]  пересчета, они вот так работают.
[01:09:13.640 --> 01:09:15.640]  А второй кусочек,
[01:09:15.640 --> 01:09:17.640]  первый процесс, досчитал
[01:09:17.640 --> 01:09:19.640]  и обновляет
[01:09:19.640 --> 01:09:21.640]  и данные, и время обновлений.
[01:09:23.640 --> 01:09:25.640]  Что вам еще дает то, что вы сюда кладете
[01:09:25.640 --> 01:09:27.640]  время обновлений?
[01:09:27.640 --> 01:09:29.640]  Не вот сюда вы кладете, не в системное
[01:09:29.640 --> 01:09:31.640]  время кэша, вы говорите
[01:09:31.640 --> 01:09:33.640]  о том, что это живет только день,
[01:09:33.640 --> 01:09:35.640]  только не знает час, а вот здесь,
[01:09:35.640 --> 01:09:37.640]  что вы каждый раз вычисляете, что вам это
[01:09:37.640 --> 01:09:39.640]  помогает?
[01:09:39.640 --> 01:09:41.640]  Его легко менять.
[01:09:41.640 --> 01:09:43.640]  Вы можете
[01:09:43.640 --> 01:09:45.640]  осуществлять ту самую деградацию функциональности.
[01:09:45.640 --> 01:09:47.640]  Вот БАД за это время
[01:09:47.640 --> 01:09:49.640]  Россия еще на кого-нибудь напала.
[01:09:49.640 --> 01:09:51.640]  Все, опять понеслась
[01:09:51.640 --> 01:09:53.640]  новости, еще что-нибудь, еще что-нибудь.
[01:09:53.640 --> 01:09:55.640]  Просто увеличивать это время.
[01:09:55.640 --> 01:09:57.640]  У вас здесь уже теперь не час
[01:09:57.640 --> 01:09:59.640]  проверка, а, например, три.
[01:09:59.640 --> 01:10:01.640]  Ну, это смотря на сколько
[01:10:01.640 --> 01:10:03.640]  если у тебя
[01:10:03.640 --> 01:10:05.640]  продуктовые ребята сильнее,
[01:10:05.640 --> 01:10:07.640]  они заставят тебя время уменьшить.
[01:10:07.640 --> 01:10:09.640]  А если архитекторы, то они время
[01:10:09.640 --> 01:10:11.640]  увеличат, потому что нагрузка растет.
[01:10:11.640 --> 01:10:13.640]  Все прибежали,
[01:10:13.640 --> 01:10:15.640]  смотри.
[01:10:19.640 --> 01:10:21.640]  А ты же каждый раз, когда
[01:10:21.640 --> 01:10:23.640]  ты кладешь вот эту вот пару
[01:10:23.640 --> 01:10:25.640]  вот эту вот пару,
[01:10:25.640 --> 01:10:27.640]  вот эту вот пару,
[01:10:27.640 --> 01:10:29.640]  кладешь вот эту вот пару,
[01:10:29.640 --> 01:10:31.640]  ты эти 100 часов прибавляешь.
[01:10:31.640 --> 01:10:33.640]  Ну, в смысле, ты вот эту пару кладешь
[01:10:33.640 --> 01:10:35.640]  на 100 часов вперед.
[01:10:35.640 --> 01:10:37.640]  На 100 часов вперед.
[01:10:39.640 --> 01:10:41.640]  Из головы.
[01:10:45.640 --> 01:10:47.640]  Почему не сделать вечный?
[01:10:47.640 --> 01:10:49.640]  Можно сделать вечный?
[01:10:49.640 --> 01:10:51.640]  Можно сделать вечный, да?
[01:10:51.640 --> 01:10:53.640]  Сколько угодно.
[01:10:53.640 --> 01:10:55.640]  Ну, не важно, просто главное, чтобы больше, чем
[01:10:55.640 --> 01:10:57.640]  время. Так, ребят,
[01:10:57.640 --> 01:10:59.640]  с кашом еще не все.
[01:10:59.640 --> 01:11:01.640]  Сколько времени нужно?
[01:11:05.640 --> 01:11:07.640]  Хорошо.
[01:11:09.640 --> 01:11:11.640]  Ну, я вам
[01:11:11.640 --> 01:11:13.640]  одну задачку надам.
[01:11:13.640 --> 01:11:15.640]  Знаете,
[01:11:15.640 --> 01:11:17.640]  что еще можно сделать?
[01:11:17.640 --> 01:11:19.640]  Можно вот эту вот штуку тоже сюда
[01:11:19.640 --> 01:11:21.640]  внутрь положить.
[01:11:21.640 --> 01:11:23.640]  Как иногда делают.
[01:11:23.640 --> 01:11:25.640]  Можно?
[01:11:29.640 --> 01:11:31.640]  Можно, не обязательно.
[01:11:31.640 --> 01:11:33.640]  Так.
[01:11:37.640 --> 01:11:39.640]  Так умирает вот эта история.
[01:11:43.640 --> 01:11:45.640]  Флага?
[01:11:45.640 --> 01:11:47.640]  Да, окей, а флаг может быть
[01:11:47.640 --> 01:11:49.640]  просто... Согласен.
[01:11:49.640 --> 01:11:51.640]  Можно так, да.
[01:11:51.640 --> 01:11:53.640]  Можно флаг точно так же через время сделать.
[01:11:55.640 --> 01:11:57.640]  Да.
[01:11:57.640 --> 01:11:59.640]  И 200 секунд сомнем на часах.
[01:11:59.640 --> 01:12:01.640]  Так.
[01:12:01.640 --> 01:12:03.640]  Окей, а теперь
[01:12:03.640 --> 01:12:05.640]  вот мы у нас все это сделали,
[01:12:05.640 --> 01:12:07.640]  все это работает.
[01:12:07.640 --> 01:12:09.640]  А теперь приходит редактор, скотина, и публикует
[01:12:09.640 --> 01:12:11.640]  новость.
[01:12:11.640 --> 01:12:13.640]  И мы должны
[01:12:13.640 --> 01:12:15.640]  главную страницу сбросить.
[01:12:15.640 --> 01:12:17.640]  Она не просто
[01:12:17.640 --> 01:12:19.640]  устарела. Там данные
[01:12:19.640 --> 01:12:21.640]  невалидные.
[01:12:21.640 --> 01:12:23.640]  Нам нужно провести так называемую
[01:12:23.640 --> 01:12:25.640]  инвалидацию кэша.
[01:12:25.640 --> 01:12:27.640]  Что нам делать?
[01:12:27.640 --> 01:12:29.640]  Итак, приходит редактор и публикует
[01:12:29.640 --> 01:12:31.640]  новость.
[01:12:49.640 --> 01:12:51.640]  Ну,
[01:12:51.640 --> 01:12:53.640]  да, смотря
[01:12:53.640 --> 01:12:55.640]  что мы храним внутри
[01:12:55.640 --> 01:12:57.640]  этого ключа, конечно, но допустим
[01:12:57.640 --> 01:12:59.640]  мы там умные ребята и храним только
[01:12:59.640 --> 01:13:01.640]  реальные данные.
[01:13:01.640 --> 01:13:03.640]  Без HTML, без всего.
[01:13:03.640 --> 01:13:05.640]  Итак,
[01:13:05.640 --> 01:13:07.640]  то есть первый вариант
[01:13:07.640 --> 01:13:09.640]  это взять
[01:13:09.640 --> 01:13:11.640]  и перезаписать значение
[01:13:11.640 --> 01:13:13.640]  при записи.
[01:13:13.640 --> 01:13:15.640]  Так?
[01:13:15.640 --> 01:13:17.640]  Итак, к нам пришла новая новость.
[01:13:17.640 --> 01:13:19.640]  Новость.
[01:13:19.640 --> 01:13:21.640]  Мы берем
[01:13:21.640 --> 01:13:23.640]  и тем же самым процессом,
[01:13:23.640 --> 01:13:25.640]  который эту новость сохраняем,
[01:13:25.640 --> 01:13:27.640]  перезаписываем кэш.
[01:13:31.640 --> 01:13:33.640]  Перезаписываем.
[01:13:37.640 --> 01:13:39.640]  Так еще есть вариант?
[01:13:39.640 --> 01:13:41.640]  Нет, но
[01:13:45.640 --> 01:13:47.640]  чем плохо тут вариант?
[01:13:47.640 --> 01:13:49.640]  Давайте придумаем.
[01:13:49.640 --> 01:13:51.640]  Давайте поймем.
[01:13:55.640 --> 01:13:57.640]  Ну,
[01:13:57.640 --> 01:13:59.640]  ну,
[01:13:59.640 --> 01:14:01.640]  ну,
[01:14:01.640 --> 01:14:03.640]  ну,
[01:14:03.640 --> 01:14:05.640]  ну,
[01:14:05.640 --> 01:14:07.640]  ну,
[01:14:07.640 --> 01:14:09.640]  ну,
[01:14:09.640 --> 01:14:11.640]  ну,
[01:14:11.640 --> 01:14:13.640]  ну,
[01:14:13.640 --> 01:14:15.640]  во-первых,
[01:14:15.640 --> 01:14:17.640]  если часто публикуется. Но это ладно.
[01:14:17.640 --> 01:14:19.640]  Вряд ли она часто публикуется, скорее всего.
[01:14:19.640 --> 01:14:21.640]  Здесь есть одна проблемка.
[01:14:21.640 --> 01:14:23.640]  Она заключается в том, что мы потенциально
[01:14:23.640 --> 01:14:25.640]  не знаем,
[01:14:25.640 --> 01:14:27.640]  у нас с вами
[01:14:27.640 --> 01:14:29.640]  простой такой пример, очень, очень
[01:14:29.640 --> 01:14:31.640]  такой выхлопченный, примитивный.
[01:14:31.640 --> 01:14:33.640]  Главная страница, кэш главных страниц.
[01:14:33.640 --> 01:14:35.640]  Но не всегда мы знаем, где конкретно
[01:14:35.640 --> 01:14:39.840]  которые мы сейчас перезаписываем, будут использоваться.
[01:14:39.840 --> 01:14:41.840]  Они могут использоваться не только в MindPager,
[01:14:41.840 --> 01:14:43.840]  они могут использоваться в десятках других мест.
[01:14:43.840 --> 01:14:46.840]  Вот если мы говорим конкретно про новости,
[01:14:46.840 --> 01:14:48.840]  то будет обновляться главная страница,
[01:14:48.840 --> 01:14:52.840]  страница раздела, страница последней публикации,
[01:14:52.840 --> 01:14:54.840]  страница автора этого,
[01:14:54.840 --> 01:14:58.840]  страница тематики и так далее.
[01:14:58.840 --> 01:15:01.840]  То есть количество кэшей,
[01:15:01.840 --> 01:15:02.840]  которые нужно будет пересчитать,
[01:15:02.840 --> 01:15:04.840]  оно может быть очень велико.
[01:15:04.840 --> 01:15:06.840]  Некоторые из этих кэшей могут вообще никогда не использоваться
[01:15:06.840 --> 01:15:08.840]  или очень редко использоваться.
[01:15:10.840 --> 01:15:12.840]  Например, мы обновляем новость,
[01:15:12.840 --> 01:15:14.840]  не то чтобы мы обновляем MindPage,
[01:15:14.840 --> 01:15:18.840]  мы обновляем новости в Мухосранске.
[01:15:18.840 --> 01:15:22.840]  Там 5 человек с интернетом.
[01:15:22.840 --> 01:15:24.840]  Они заходят в интернет очень ред.
[01:15:24.840 --> 01:15:26.840]  А ты все равно новость перезаписал.
[01:15:26.840 --> 01:15:28.840]  И кэш перезаписал.
[01:15:28.840 --> 01:15:30.840]  Мухосранск News.
[01:15:30.840 --> 01:15:32.840]  Такой ключ у нас.
[01:15:32.840 --> 01:15:34.840]  Вот тебе минусы этого варианта.
[01:15:34.840 --> 01:15:36.840]  То есть ты не всегда знаешь,
[01:15:36.840 --> 01:15:38.840]  что конкретно тебе нужно перезаписать,
[01:15:38.840 --> 01:15:40.840]  потому что это может быть большая сложная система.
[01:15:40.840 --> 01:15:42.840]  А второе, ты можешь зря перезаписать.
[01:15:54.840 --> 01:15:56.840]  Можем.
[01:15:58.840 --> 01:16:00.840]  Да, это принципиально другой вариант.
[01:16:00.840 --> 01:16:06.840]  То есть в этом случае ты перезаписываешь кэш при сохранении новости.
[01:16:06.840 --> 01:16:08.840]  При сохранении?
[01:16:10.840 --> 01:16:12.840]  А вот здесь вариант.
[01:16:12.840 --> 01:16:14.840]  Ты насильно его, как бы говоря, портишь.
[01:16:16.840 --> 01:16:20.840]  Насильно протухаешь кэш.
[01:16:20.840 --> 01:16:22.840]  Это не по-русски, но смысл такой.
[01:16:24.840 --> 01:16:28.840]  То есть ты говоришь, что вот этот ключ более невален.
[01:16:28.840 --> 01:16:32.840]  Если кто-то, кто сдачно столкнется с ним, пересчитывай.
[01:16:32.840 --> 01:16:34.840]  Например, ты что можешь сделать?
[01:16:34.840 --> 01:16:38.840]  Просто берешь и вот это данные обнуляешь.
[01:16:38.840 --> 01:16:40.840]  Вот это вот у нас время.
[01:16:40.840 --> 01:16:42.840]  Стираешь его.
[01:16:42.840 --> 01:16:44.840]  Ставишь его в прошлое.
[01:16:44.840 --> 01:16:46.840]  Еще что-нибудь.
[01:16:46.840 --> 01:16:50.840]  И тогда, при первом запросе от пользователя,
[01:16:50.840 --> 01:16:52.840]  у нас начнется вся наша петрушка.
[01:16:52.840 --> 01:16:54.840]  Дайте пересчитать.
[01:16:54.840 --> 01:16:56.840]  Здесь еще третий вариант.
[01:17:06.840 --> 01:17:08.840]  Да.
[01:17:08.840 --> 01:17:10.840]  Сейчас это обсудим.
[01:17:10.840 --> 01:17:14.840]  Это время нужно менять во всех местах, где закэшированы эти данные.
[01:17:18.840 --> 01:17:20.840]  Нет, здесь у нас несколько проблем.
[01:17:20.840 --> 01:17:24.840]  Основная проблема, почему этот вариант не выбирают,
[01:17:24.840 --> 01:17:28.840]  то то, что ты не знаешь заранее, этот кэш нужен кому-то или нет.
[01:17:28.840 --> 01:17:32.840]  Он может просто никакому быть не нужен.
[01:17:32.840 --> 01:17:34.840]  Редко используется.
[01:17:34.840 --> 01:17:36.840]  Это первая проблема здесь.
[01:17:36.840 --> 01:17:38.840]  А вторая проблема, которая здесь есть,
[01:17:38.840 --> 01:17:42.840]  это то, что вычисления могут занимать много времени.
[01:17:42.840 --> 01:17:44.840]  И не всегда.
[01:17:44.840 --> 01:17:48.840]  То есть редактор, например, подождет.
[01:17:48.840 --> 01:17:50.840]  А если это не редактор, а, например,
[01:17:50.840 --> 01:17:52.840]  я не знаю,
[01:17:52.840 --> 01:17:54.840]  какая-нибудь банковская система.
[01:17:54.840 --> 01:17:56.840]  И нужно очень быстро принять платеж.
[01:17:56.840 --> 01:18:00.840]  И она не может ждать, пока пересчитается кэш.
[01:18:00.840 --> 01:18:02.840]  Вот как быть в такой ситуации?
[01:18:10.840 --> 01:18:12.840]  То есть пойти по вот этому варианту.
[01:18:12.840 --> 01:18:16.840]  Но не очень хорошо, потому что все-таки это долго вычисляется.
[01:18:16.840 --> 01:18:20.840]  И мы ни в коем случае не можем показать пользователю устаревшие данные.
[01:18:24.840 --> 01:18:26.840]  Да.
[01:18:26.840 --> 01:18:28.840]  Но мы не можем это сделать при публикации.
[01:18:28.840 --> 01:18:30.840]  Когда нам это делать?
[01:18:32.840 --> 01:18:34.840]  Чего?
[01:18:38.840 --> 01:18:40.840]  Устаревшие данные?
[01:18:40.840 --> 01:18:42.840]  Не в любой системе.
[01:18:42.840 --> 01:18:44.840]  В новостях – да.
[01:18:44.840 --> 01:18:46.840]  Они не поймут.
[01:18:46.840 --> 01:18:48.840]  Я сделал запрос, а у меня по-прежнему бабки на счету.
[01:18:48.840 --> 01:18:50.840]  Или наоборот, мне перечислили, а денег нет.
[01:18:50.840 --> 01:18:52.840]  Ну что за фигня?
[01:18:52.840 --> 01:18:54.840]  Итого, бывают ситуации, да?
[01:18:54.840 --> 01:18:56.840]  То есть новости – окей, хорошо.
[01:18:56.840 --> 01:18:58.840]  А допустим, это деньги, приходит денег.
[01:19:04.840 --> 01:19:06.840]  Может быть хороший вариант.
[01:19:06.840 --> 01:19:08.840]  Просто нельзя кэшировать.
[01:19:08.840 --> 01:19:10.840]  Может быть.
[01:19:10.840 --> 01:19:12.840]  А если все-таки кэшируем, то как?
[01:19:12.840 --> 01:19:14.840]  Пикс между вот этими двумя вариантами придумайте.
[01:19:30.840 --> 01:19:32.840]  Еще варианты.
[01:19:32.840 --> 01:19:34.840]  Итак, вот здесь мы
[01:19:34.840 --> 01:19:36.840]  насильно его
[01:19:36.840 --> 01:19:38.840]  удаляем, конечно.
[01:19:38.840 --> 01:19:40.840]  Говорим, что он протух.
[01:19:40.840 --> 01:19:42.840]  И мы его удаляем прямо сейчас.
[01:19:42.840 --> 01:19:44.840]  При записи.
[01:19:44.840 --> 01:19:46.840]  Если пересчитать при записи – нельзя.
[01:19:46.840 --> 01:19:48.840]  Потому что долго.
[01:19:48.840 --> 01:19:50.840]  Но и старая версия
[01:19:50.840 --> 01:19:52.840]  кэширования удалять тоже нельзя.
[01:19:52.840 --> 01:19:54.840]  Как нам быть?
[01:19:56.840 --> 01:19:58.840]  Сначала что сделать?
[01:20:04.840 --> 01:20:06.840]  Ты не можешь пересчитывать
[01:20:06.840 --> 01:20:08.840]  именно в момент записи.
[01:20:08.840 --> 01:20:10.840]  Потому что момент записи
[01:20:10.840 --> 01:20:12.840]  тоже нужно быстро, это нужно моментально ответить,
[01:20:12.840 --> 01:20:14.840]  что все, деньги ушли.
[01:20:20.840 --> 01:20:22.840]  Давайте, давайте, давайте, давайте.
[01:20:32.840 --> 01:20:34.840]  Обмануть.
[01:20:34.840 --> 01:20:36.840]  Короче, вы говорите
[01:20:36.840 --> 01:20:38.840]  клиенту, о том, что
[01:20:38.840 --> 01:20:40.840]  окей, мы все пересчитали, деньги отправлены.
[01:20:42.840 --> 01:20:44.840]  Это говорится клиенту.
[01:20:44.840 --> 01:20:46.840]  Все окей.
[01:20:46.840 --> 01:20:48.840]  И ставится задача на пересчет.
[01:20:48.840 --> 01:20:50.840]  Потом мы протухаем кэш
[01:20:50.840 --> 01:20:52.840]  на всякий случай, вдруг он такой быстрый, что
[01:20:52.840 --> 01:20:54.840]  он, я не знаю,
[01:20:54.840 --> 01:20:56.840]  из двух окон смотрит.
[01:20:56.840 --> 01:20:58.840]  Мы протухаем, насильно протухаем кэш.
[01:20:58.840 --> 01:21:00.840]  И тут же ставим задачу.
[01:21:00.840 --> 01:21:02.840]  Пересчитай.
[01:21:06.840 --> 01:21:10.840]  Поэтому мы насильно протухаем кэш.
[01:21:16.840 --> 01:21:18.840]  Нет, подожди.
[01:21:36.840 --> 01:21:38.840]  Смотри, там есть разное.
[01:21:38.840 --> 01:21:40.840]  Если ты говоришь про
[01:21:40.840 --> 01:21:42.840]  какую-нибудь платежную систему,
[01:21:42.840 --> 01:21:44.840]  там есть несколько уровней
[01:21:44.840 --> 01:21:46.840]  различного рода.
[01:21:46.840 --> 01:21:48.840]  Понятное дело, что есть некий уровень,
[01:21:48.840 --> 01:21:50.840]  на котором все фиксируется как есть.
[01:21:50.840 --> 01:21:52.840]  Ты считал, у тебя деньги считались,
[01:21:52.840 --> 01:21:54.840]  она тут же сюда записывается.
[01:21:54.840 --> 01:21:56.840]  И она тебе
[01:21:56.840 --> 01:21:58.840]  не пикнет до тех пор, пока она
[01:21:58.840 --> 01:22:00.840]  не считает.
[01:22:00.840 --> 01:22:02.840]  Но у тебя же не только это,
[01:22:02.840 --> 01:22:04.840]  там еще есть какие-нибудь отчетики,
[01:22:04.840 --> 01:22:06.840]  еще что-то,
[01:22:06.840 --> 01:22:08.840]  у тебя может быть какой-нибудь личный кабинет,
[01:22:08.840 --> 01:22:10.840]  какие-то цифры, отображения и так далее.
[01:22:10.840 --> 01:22:12.840]  То есть есть контур,
[01:22:12.840 --> 01:22:14.840]  в котором все абсолютно как есть,
[01:22:14.840 --> 01:22:16.840]  а есть контур, куда-нибудь сменения докатываются,
[01:22:16.840 --> 01:22:18.840]  где уже не так важно.
[01:22:18.840 --> 01:22:20.840]  То есть, там не знаю, какое
[01:22:20.840 --> 01:22:22.840]  банковское приложение, например.
[01:22:22.840 --> 01:22:24.840]  Короче, да, так делают.
[01:22:24.840 --> 01:22:26.840]  Иногда так делают.
[01:22:26.840 --> 01:22:28.840]  То есть клиенту мы отдаем информацию о том,
[01:22:28.840 --> 01:22:30.840]  что мы все сделали, чувак.
[01:22:30.840 --> 01:22:32.840]  Мы стираем этот кэш,
[01:22:32.840 --> 01:22:34.840]  говорим о том, что он неволидный.
[01:22:34.840 --> 01:22:36.840]  И ставим задачу на пересчет.
[01:22:36.840 --> 01:22:38.840]  И в фоновом режиме она считается.
[01:23:02.840 --> 01:23:16.840]  Так, все.
[01:23:16.840 --> 01:23:18.840]  Последняя проблема с кэшом.
[01:23:20.840 --> 01:23:22.840]  С этим волшебным и очень
[01:23:22.840 --> 01:23:24.840]  легким инструментом.
[01:23:24.840 --> 01:23:26.840]  Последняя проблема. Она звучит так.
[01:23:26.840 --> 01:23:28.840]  Итак, мы сбрасываем.
[01:23:28.840 --> 01:23:30.840]  Пришла новость.
[01:23:32.840 --> 01:23:34.840]  И нам нужно сбросить.
[01:23:34.840 --> 01:23:36.840]  Кэш, главная страница.
[01:23:38.840 --> 01:23:40.840]  Кэш, страница раздела.
[01:23:46.840 --> 01:23:48.840]  Кэш,
[01:23:48.840 --> 01:23:50.840]  последняя новость.
[01:23:52.840 --> 01:23:54.840]  Кэш, новости,
[01:23:54.840 --> 01:23:56.840]  где это произошло?
[01:23:56.840 --> 01:23:58.840]  В Москве.
[01:23:58.840 --> 01:24:00.840]  В Москве.
[01:24:04.840 --> 01:24:06.840]  И еще сколько-то.
[01:24:06.840 --> 01:24:08.840]  Мы не знаем заранее сколько.
[01:24:08.840 --> 01:24:10.840]  Не то, что мы не знаем заранее сколько.
[01:24:10.840 --> 01:24:12.840]  Но у нас сайт растет.
[01:24:14.840 --> 01:24:16.840]  И данные построены.
[01:24:16.840 --> 01:24:18.840]  Придумывают новые странички.
[01:24:18.840 --> 01:24:20.840]  Продакты работают.
[01:24:20.840 --> 01:24:22.840]  Что-то новое. Какие-то новые блоки.
[01:24:22.840 --> 01:24:24.840]  Экспортируем новости на другие сайты.
[01:24:24.840 --> 01:24:26.840]  И так далее.
[01:24:26.840 --> 01:24:28.840]  Это механизм, который у нас при записи
[01:24:28.840 --> 01:24:30.840]  мы его сделали.
[01:24:30.840 --> 01:24:32.840]  Сохраняется новость на редакторский интерфейс.
[01:24:34.840 --> 01:24:36.840]  У нас вариант.
[01:24:36.840 --> 01:24:38.840]  Либо мы постоянно редакторский интерфейс апдейтим
[01:24:38.840 --> 01:24:40.840]  и при любой добавленной
[01:24:40.840 --> 01:24:42.840]  новой странички вносим информацию
[01:24:42.840 --> 01:24:44.840]  об этом вот сюда.
[01:24:44.840 --> 01:24:46.840]  У нас редакторский интерфейс
[01:24:46.840 --> 01:24:48.840]  через какое-то время это какая-то совершенно
[01:24:48.840 --> 01:24:50.840]  махровая, невероятная штука, которая знает вообще
[01:24:50.840 --> 01:24:52.840]  все про наш сайт.
[01:24:52.840 --> 01:24:54.840]  Либо мы придумаем какой-то другой способ.
[01:24:54.840 --> 01:24:56.840]  Понимаете проблемы, да?
[01:24:58.840 --> 01:25:00.840]  Так называемая когерентность кэшей.
[01:25:00.840 --> 01:25:02.840]  То есть у нас некоторые кэши
[01:25:02.840 --> 01:25:04.840]  связаны с друг с другом.
[01:25:06.840 --> 01:25:08.840]  Что вот нужно сбросить
[01:25:08.840 --> 01:25:10.840]  главную страницу. Почему?
[01:25:10.840 --> 01:25:12.840]  Потому что там, блин, вот первая строчка
[01:25:12.840 --> 01:25:14.840]  это последняя новость.
[01:25:14.840 --> 01:25:16.840]  Страницу раздела. Почему?
[01:25:16.840 --> 01:25:18.840]  Потому что первая строчка, последняя новость.
[01:25:18.840 --> 01:25:20.840]  Какая новость?
[01:25:24.840 --> 01:25:26.840]  Так сайт у нас спроектирован.
[01:25:26.840 --> 01:25:28.840]  Красивый очень.
[01:25:28.840 --> 01:25:30.840]  Новости в Москве, понимаешь?
[01:25:30.840 --> 01:25:32.840]  Новости на карте.
[01:25:32.840 --> 01:25:34.840]  Что угодно может быть.
[01:25:34.840 --> 01:25:36.840]  Новости от определенного
[01:25:36.840 --> 01:25:38.840]  автора.
[01:25:38.840 --> 01:25:40.840]  Архив новостей, где они
[01:25:40.840 --> 01:25:42.840]  уже не в хронологическом порядке,
[01:25:42.840 --> 01:25:44.840]  а, например, там, я не знаю,
[01:25:44.840 --> 01:25:46.840]  в алфавитном.
[01:25:46.840 --> 01:25:48.840]  Что нам делать? Существует какое-то
[01:25:48.840 --> 01:25:50.840]  энное количество кэшей,
[01:25:50.840 --> 01:25:52.840]  и нам про них все знать, ну, очень
[01:25:52.840 --> 01:25:54.840]  затратно.
[01:25:54.840 --> 01:25:56.840]  То есть это нам нужно
[01:25:56.840 --> 01:25:58.840]  строить некое дерево,
[01:25:58.840 --> 01:26:00.840]  вот эти связи о том, что
[01:26:00.840 --> 01:26:02.840]  если ты сбрасываешь,
[01:26:02.840 --> 01:26:04.840]  если происходит событие,
[01:26:04.840 --> 01:26:06.840]  новая новость, нужно сбросить один
[01:26:06.840 --> 01:26:08.840]  кэш, например.
[01:26:08.840 --> 01:26:10.840]  Второй и третий.
[01:26:10.840 --> 01:26:12.840]  А потом еще кругами.
[01:26:12.840 --> 01:26:14.840]  Если ты сбрасываешь
[01:26:14.840 --> 01:26:16.840]  вот этот кэш,
[01:26:16.840 --> 01:26:18.840]  нужно сбросить еще
[01:26:18.840 --> 01:26:20.840]  четвертый, пятый и шестой.
[01:26:20.840 --> 01:26:22.840]  А если сбрасываешь шестой,
[01:26:22.840 --> 01:26:24.840]  то нужно еще и девятый захватить.
[01:26:24.840 --> 01:26:26.840]  И понеслась.
[01:26:26.840 --> 01:26:28.840]  Может такое быть? Может.
[01:26:28.840 --> 01:26:30.840]  Что делать?
[01:26:30.840 --> 01:26:32.840]  Жопа.
[01:26:32.840 --> 01:26:34.840]  И наш красивый кэш разваливается.
[01:26:34.840 --> 01:26:36.840]  У нас все было так хорошо.
[01:26:42.840 --> 01:26:44.840]  Ну.
[01:26:54.840 --> 01:26:56.840]  А как?
[01:26:56.840 --> 01:26:58.840]  Лады.
[01:26:58.840 --> 01:27:00.840]  В следующий раз вы мне рассказываете,
[01:27:00.840 --> 01:27:02.840]  как кэши могут подписываться на свое
[01:27:02.840 --> 01:27:04.840]  обновление.
[01:27:04.840 --> 01:27:06.840]  Ой, нет, вот без вот этого всего.
[01:27:06.840 --> 01:27:08.840]  Какой брокер сообщить?
[01:27:08.840 --> 01:27:10.840]  У нас кэш и PHP.
[01:27:10.840 --> 01:27:12.840]  Все.
[01:27:14.840 --> 01:27:16.840]  Без мютектов
[01:27:16.840 --> 01:27:18.840]  и локов. Нет.
[01:27:18.840 --> 01:27:20.840]  Это запрещенные слова.
[01:27:20.840 --> 01:27:22.840]  Все проще.
[01:27:22.840 --> 01:27:24.840]  Надо придумать, ребят, это алгоритм.
[01:27:24.840 --> 01:27:26.840]  Нужно придумать именно инженерное решение.
[01:27:26.840 --> 01:27:28.840]  Без каких-то сложных...
[01:27:28.840 --> 01:27:30.840]  Давайте так.
[01:27:30.840 --> 01:27:32.840]  Ограничение. У вас есть только кэш.
[01:27:32.840 --> 01:27:34.840]  Все, больше нет ничего.
[01:27:34.840 --> 01:27:36.840]  Ну PHP. Да.
[01:27:36.840 --> 01:27:38.840]  Я имею в виду, что
[01:27:38.840 --> 01:27:40.840]  решение этой проблемы
[01:27:40.840 --> 01:27:42.840]  допустимо с помощью кэша.
[01:27:42.840 --> 01:27:44.840]  Можно решить с помощью кэша.
[01:27:44.840 --> 01:27:46.840]  Это будет самое красивое и элегантное решение.
[01:27:46.840 --> 01:27:48.840]  Думайте как.
[01:27:50.840 --> 01:27:52.840]  Все.
[01:27:52.840 --> 01:27:54.840]  Расходимся.
