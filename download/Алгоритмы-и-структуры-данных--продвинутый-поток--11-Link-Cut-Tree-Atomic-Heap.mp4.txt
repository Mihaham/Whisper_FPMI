[00:00.000 --> 00:12.360]  ну собственно кстати к вопросу о всяких сплей деревьях называется думаю пришло
[00:12.360 --> 00:19.040]  вот дот думаю вот мы добылись до линката да собственно пришло но то есть пришло время
[00:19.040 --> 00:25.880]  заниматься действительно чем-то интересным но не то что мы все время занимаемся чем-то не
[00:25.880 --> 00:31.480]  интересно но тем не менее ладно как говорится да структура считает да по камере если есть
[00:31.480 --> 00:36.680]  верить программе экзамена структура линкат считается одной из самых сложных но с другой
[00:36.680 --> 00:40.000]  стороны мы уже выяснили что на самом деле сложных структур данных на самом деле не существует
[00:40.000 --> 00:51.560]  пока нет но я не знаю хотя нет но нет на самом деле еще атомик хип существует но об этом позже
[00:51.560 --> 00:58.320]  ну вот ну посмотрим ладно давайте не подумал пока как бы давайте доберемся до линката
[00:58.320 --> 01:05.360]  что мы вообще вообще по идее хотим вот больше раз мы обсуждали хевилей что для нас хевилей то есть
[01:05.360 --> 01:14.120]  хевилей это да но фиксированное дерево там какое-то мистическое вот это вот мясо мясо мясо мясо там
[01:14.520 --> 01:18.680]  красивое quantities
[01:18.680 --> 01:21.120]  дерево дерево дерево дерево дерево
[01:25.240 --> 01:30.940]  вот и мы ос reading this note hope to do that
[01:30.940 --> 01:35.080]  но именно там мы скажем на ребрах мы хотим offset какие-то мистические чиселки и хотим
[01:35.080 --> 01:40.880]  делать для них на них все что мы обычно делаем здесь картями или всякими овелиями то есть а
[01:40.880 --> 01:46.880]  то есть прибавить на пути, присвоить на пути, найти сумму на пути, найти минимум на пути
[01:46.880 --> 01:49.880]  и прочее вот это вот развлечение.
[01:49.880 --> 01:54.880]  Как вы в прошлый раз убедились, если дерево фиксированное, то оказывается, хавилайт это позволяет делать.
[01:54.880 --> 01:59.880]  Причем даже не залог квадрата, еще и просто залог, как мы неожиданно выяснили.
[01:59.880 --> 02:06.880]  Придется немножко пострадать, но логарифм будет достижен.
[02:06.880 --> 02:12.880]  Но мы сегодня бросим себе более масштабную задачу.
[02:12.880 --> 02:15.880]  Мы хотим, чтобы дерево менялось.
[02:15.880 --> 02:20.880]  То есть представьте себе, помимо оглашенных мной операций,
[02:23.880 --> 02:31.880]  помимо оглашенных операций, мы будем делать мистическую...
[02:31.880 --> 02:36.880]  Мы объявим, что дерево у нас все-таки будет всегда подвешено.
[02:36.880 --> 02:41.880]  Но оно будет не одно, их будет несколько.
[02:46.880 --> 02:51.880]  Никакой сбалансированности, естественно, не гарантируется, деревья абсолютно произвольны.
[02:52.880 --> 02:56.880]  Вот.
[02:56.880 --> 02:59.880]  И в этих деревьях неожиданно.
[02:59.880 --> 03:03.880]  Нам очень захочется делать мистическую...
[03:03.880 --> 03:07.880]  Эх, так зеленого маркера нет, поэтому...
[03:15.880 --> 03:17.880]  Не жалко, что зеленого нет.
[03:17.880 --> 03:20.880]  Ну ладно, фиолетовая будет.
[03:20.880 --> 03:23.880]  Нет, то, что там есть, оно не пишет.
[03:23.880 --> 03:25.880]  Ух ты, спасибо.
[03:25.880 --> 03:27.880]  Вот это спасибо.
[03:27.880 --> 03:29.880]  Что, преподаете, что ли?
[03:29.880 --> 03:30.880]  Нет.
[03:30.880 --> 03:31.880]  Нет?
[03:31.880 --> 03:33.880]  Ой, ух ты, зачем вам маркеры?
[03:39.880 --> 03:42.880]  Так, ух ты, значит, смотрите.
[03:42.880 --> 03:46.880]  Итак, у нас будет теперь операция линк.
[03:47.880 --> 03:51.880]  Значит, что будет делать операция линк?
[03:51.880 --> 03:57.880]  Значит, она возьмет корень какого-то дерева В
[04:01.880 --> 04:05.880]  и подвесит его к дереву У.
[04:07.880 --> 04:10.880]  Даже не к дереве У, а к вершине У.
[04:10.880 --> 04:13.880]  Потому что самое страшное, У не обязана.
[04:13.880 --> 04:17.880]  То есть, единственное, что требуется, что У обязана быть
[04:17.880 --> 04:20.880]  вершиной другого дерева.
[04:20.880 --> 04:24.880]  То есть, не того дерева, корнем которого является В.
[04:24.880 --> 04:27.880]  Что? Да, цикл делать нельзя.
[04:27.880 --> 04:32.880]  То есть, вот эти супердинамики конвективить
[04:32.880 --> 04:35.880]  в глобальных этих мы не занимаемся.
[04:35.880 --> 04:37.880]  Вот.
[04:37.880 --> 04:40.880]  Но подвешиваем из ребра весовый.
[04:40.880 --> 04:42.880]  Соответственно.
[04:42.880 --> 04:44.880]  То есть, вот такая красота.
[04:46.880 --> 04:48.880]  Это было дерево.
[04:48.880 --> 04:50.880]  Ну вот.
[04:50.880 --> 04:53.880]  Но у нас есть обратная операция.
[04:53.880 --> 04:57.880]  Обратная операция называется КАТ.
[04:59.880 --> 05:04.880]  То есть, это означает, что гарантируется, что есть ребро от УВ.
[05:04.880 --> 05:06.880]  И надо его удалить.
[05:06.880 --> 05:10.880]  Причем, более того, здесь будет подразумеваться,
[05:10.880 --> 05:14.880]  что вершина В будет являться ребенком вершины У.
[05:16.880 --> 05:18.880]  Есть.
[05:18.880 --> 05:20.880]  Значит, внимание.
[05:20.880 --> 05:22.880]  У нас не просто система деревьев.
[05:22.880 --> 05:24.880]  У нас система подвешенных деревьев.
[05:24.880 --> 05:26.880]  Да, это важно.
[05:26.880 --> 05:28.880]  В чем корень?
[05:28.880 --> 05:30.880]  В чем, что важно, корень задаем не мы.
[05:30.880 --> 05:32.880]  Корень аннот.
[05:32.880 --> 05:34.880]  Вот.
[05:34.880 --> 05:37.880]  То есть, при КАТе подразумевается, что У является родителем.
[05:37.880 --> 05:39.880]  То есть, давайте я так напишу.
[05:39.880 --> 05:42.880]  То есть, У это родитель.
[05:42.880 --> 05:45.880]  Значит, В ребенок.
[05:45.880 --> 05:48.880]  Точнее, это было перед КАТом.
[05:48.880 --> 05:52.880]  После КАТа называется вершиной У.
[05:52.880 --> 05:54.880]  Больше нет ребенка по имени В.
[05:54.880 --> 06:00.880]  В отправляется в свободное плавание и обливляется корнем своего дерева.
[06:00.880 --> 06:02.880]  Вот.
[06:02.880 --> 06:04.880]  Собственно, логично.
[06:06.880 --> 06:08.880]  Вот.
[06:08.880 --> 06:10.880]  Да, вот.
[06:10.880 --> 06:12.880]  Да, именно ребенок.
[06:12.880 --> 06:14.880]  Да, не путать с потомком.
[06:14.880 --> 06:17.880]  Да, допоминаем, что у нас ребенок и потомок это разные вещи.
[06:17.880 --> 06:20.880]  То есть, скажем, правнук это потомок, но не ребенок.
[06:22.880 --> 06:24.880]  Вот так.
[06:24.880 --> 06:26.880]  Вот.
[06:26.880 --> 06:30.880]  Ну, конечно, как реализовать структуру данных, поддерживающую вот эти две операции?
[06:32.880 --> 06:34.880]  Ну, совершенно метод.
[06:34.880 --> 06:36.880]  Метод, как всегда, работает.
[06:36.880 --> 06:38.880]  Вот.
[06:38.880 --> 06:42.880]  То есть, более того, я не сильно даже усложню жизнь.
[06:42.880 --> 06:46.880]  И скажу, что на самом деле я ж могу и корни захотеть менять.
[06:46.880 --> 06:49.880]  У меня будет специальная операция.
[06:49.880 --> 06:52.880]  Она почему-то в литературе называется Эверт.
[06:53.880 --> 06:55.880]  От У.
[06:55.880 --> 07:01.880]  То есть, мистическая операция, которая говорит, возьми вершину У и скажи, что она в своем дереве теперь новый корень.
[07:03.880 --> 07:05.880]  Зачем-то?
[07:06.880 --> 07:09.880]  Так. Ну, пока мы никуда не делись.
[07:11.880 --> 07:16.880]  Пока мы не вспомним, что, к сожалению, всякие операции...
[07:16.880 --> 07:21.880]  То есть, у нас там возникают всякие наши классические, технические операции.
[07:22.880 --> 07:25.880]  Типа Summa Tuvae там.
[07:25.880 --> 07:28.880]  То есть, я не знаю, там Assign Tuvae.
[07:31.880 --> 07:33.880]  Ну, практически...
[07:34.880 --> 07:36.880]  Ну, как сказать?
[07:36.880 --> 07:38.880]  Ну, с ассоциативностью.
[07:38.880 --> 07:40.880]  Так. Ну, давайте подумаем.
[07:42.880 --> 07:45.880]  Нет, ну, в принципе, думается, что да, наверное, ассоциативность.
[07:45.880 --> 07:47.880]  Ну, там так.
[07:47.880 --> 07:51.880]  Нужны какие-нибудь ассоциативности, если вы делаете массовые операции, там другие требования будут.
[07:51.880 --> 07:55.880]  Ну, например, если я там хочу прибавить что-нибудь на отрезке, да...
[07:57.880 --> 07:59.880]  На пути, да.
[07:59.880 --> 08:01.880]  Да, тут тоже надо было написать.
[08:01.880 --> 08:06.880]  То там, понятно, должна быть, видимо, какая-то коммутативность еще.
[08:06.880 --> 08:09.880]  Вот там коммутативность, вот это все.
[08:09.880 --> 08:13.880]  Ну, то есть, по большому счету, мы не будем здесь заморачиваться об суперформализм.
[08:13.880 --> 08:15.880]  Мы просто скажем, что...
[08:15.880 --> 08:17.880]  Ну, типа того, да.
[08:18.880 --> 08:24.880]  Вот, то есть, вот это вот все, там всякие суммы, присваивания, минимум, это максимум, бла-бла-бла.
[08:25.880 --> 08:26.880]  Вот.
[08:26.880 --> 08:29.880]  И вот тут-то мы немножко начинаем страдать.
[08:29.880 --> 08:32.880]  Да, потому что уже метод не работает.
[08:34.880 --> 08:36.880]  Что же делать?
[08:37.880 --> 08:44.880]  Нельзя же честно выполнять линк и кат, и после каждого раза строить на дереве ХЛД, правда?
[08:45.880 --> 08:49.880]  Почему нет, если операция линк и кат, типа пять?
[08:49.880 --> 08:50.880]  Ну, да.
[08:50.880 --> 08:52.880]  Ну, да, если только они не редкие.
[08:52.880 --> 08:54.880]  Если они редкие, то действительно делать ничего не надо.
[08:55.880 --> 08:56.880]  Вот.
[08:59.880 --> 09:00.880]  Чего?
[09:05.880 --> 09:07.880]  Ну, в принципе, да, геново, да.
[09:07.880 --> 09:10.880]  Кажется, что можно придумать, пытаться какую-то оффлайда,
[09:10.880 --> 09:13.880]  потому что есть динамик-инвективити со стандартной технологией,
[09:13.880 --> 09:14.880]  да.
[09:14.880 --> 09:17.880]  Да, ну, мы, ну, видимо, что-то в эту сторону можно думать.
[09:18.880 --> 09:21.880]  Да, ну, правда, да, это мы будем обсуждать, когда мы будем обсуждать СНМ.
[09:22.880 --> 09:24.880]  Пока же мы за нот.
[09:24.880 --> 09:28.880]  Но, как бы то, что я сейчас скажу, конечно, никакого отношения не к СНМ,
[09:28.880 --> 09:30.880]  и там иметь не будет.
[09:31.880 --> 09:33.880]  И к оффлайдам тоже.
[09:33.880 --> 09:38.880]  Хотя, конечно, забирая вперед, у нас, конечно, структура данных получится до жути амортизированная.
[09:39.880 --> 09:40.880]  Вот.
[09:41.880 --> 09:44.880]  Поэтому, к сожалению, да, персистентные линкаты, к сожалению, не до структуры данных,
[09:44.880 --> 09:46.880]  которые нам удастся хорошо поддерживать.
[09:47.880 --> 09:48.880]  Вот.
[09:48.880 --> 09:49.880]  Ну, ничего.
[09:50.880 --> 09:54.880]  Но тем не менее, значит, как же мы это красиво будем хранить?
[09:55.880 --> 09:58.880]  Значит, ну, то есть, понятно, что нам надо придумать какую-то структуру данных,
[09:58.880 --> 10:01.880]  которая будет очень красиво как-то хранить эти деревья.
[10:02.880 --> 10:03.880]  Вот.
[10:03.880 --> 10:04.880]  Ну, вот.
[10:04.880 --> 10:05.880]  Умеем ли мы?
[10:05.880 --> 10:06.880]  Ну, вот.
[10:06.880 --> 10:08.880]  Ну, мы умеем обычно хранить деревья.
[10:09.880 --> 10:12.880]  Но обычно все наши способы хранения как-то красивых деревьев сводились к тому,
[10:12.880 --> 10:16.880]  что мы эти деревья как-то делили на пути.
[10:18.880 --> 10:19.880]  Вот.
[10:19.880 --> 10:20.880]  Отдельно.
[10:20.880 --> 10:21.880]  Ну, вот.
[10:21.880 --> 10:22.880]  Ну, там.
[10:22.880 --> 10:26.880]  То есть, как-то мы еще и для удобства себе говорили, что мы множество вершин делим на пути.
[10:27.880 --> 10:30.880]  Каждый путь идет строго сверху вниз от предка к потомку.
[10:31.880 --> 10:32.880]  Вот.
[10:33.880 --> 10:34.880]  Вот.
[10:34.880 --> 10:35.880]  Ну, например, как...
[10:35.880 --> 10:37.880]  Ну, типичный пример у нас был Хэви-Лайт.
[10:37.880 --> 10:39.880]  То есть, мы на каждом из этих...
[10:39.880 --> 10:41.880]  То есть, мы там делили дерево на пути какие-то.
[10:42.880 --> 10:48.880]  И на каждом пути хранили какое-то дерево отрезков или там какой-нибудь ВВ или что-нибудь еще в этом роде.
[10:49.880 --> 10:52.880]  Или там еще какое-нибудь дерево, чтоб там вместо лог квадрата было гори.
[10:54.880 --> 10:55.880]  Вот.
[10:55.880 --> 10:59.880]  Значит, сегодня мы будем делать примерно то же самое.
[10:59.880 --> 11:01.880]  То есть, на самом деле, каждое дерево...
[11:02.880 --> 11:12.880]  То есть, каждое дерево у нас будет в каждый момент времени храниться в виде вот таких вот путей.
[11:16.880 --> 11:17.880]  Вот.
[11:17.880 --> 11:18.880]  Давайте.
[11:20.880 --> 11:21.880]  Таких вот путей.
[11:22.880 --> 11:23.880]  Вот.
[11:23.880 --> 11:24.880]  То есть, будут пути.
[11:24.880 --> 11:25.880]  Будут...
[11:25.880 --> 11:26.880]  Так, давайте вот так сделаем.
[11:27.880 --> 11:28.880]  Так.
[11:28.880 --> 11:29.880]  Так, так, так, так.
[11:34.880 --> 11:35.880]  Вот.
[11:35.880 --> 11:37.880]  Значит, так, так, так.
[11:37.880 --> 11:39.880]  Не, давайте два мартиры сделаем.
[11:39.880 --> 11:40.880]  Так.
[11:40.880 --> 11:41.880]  Вот.
[11:41.880 --> 11:44.880]  Ну и соответственно, там каждый путь у нас будет какой-то.
[11:44.880 --> 11:46.880]  То есть, там пути бывают абсолютно разные.
[11:47.880 --> 11:49.880]  То есть, тут у нас еще какая-нибудь вот такая.
[11:49.880 --> 11:50.880]  Такое вот будет.
[11:51.880 --> 11:55.880]  Ну, теоретически я сразу скажу, может быть, вот еще-нибудь вот такого рода вполне.
[11:56.880 --> 11:57.880]  Вот.
[12:01.880 --> 12:02.880]  Но и т.д.
[12:02.880 --> 12:03.880]  И т.д.
[12:03.880 --> 12:04.880]  И т.п.
[12:04.880 --> 12:05.880]  Вот.
[12:05.880 --> 12:06.880]  Но ветвистость тут может быть какая угодно.
[12:06.880 --> 12:07.880]  Давайте вот так.
[12:07.880 --> 12:08.880]  Вот так.
[12:08.880 --> 12:09.880]  И вот так сделаем.
[12:13.880 --> 12:14.880]  Вот.
[12:15.880 --> 12:16.880]  Вот.
[12:16.880 --> 12:18.880]  То есть, у нас каждая нота.
[12:18.880 --> 12:19.880]  То есть, смотрите.
[12:19.880 --> 12:23.880]  То есть, у нас опять же, так сказать, нот.
[12:23.880 --> 12:24.880]  Ну вот.
[12:24.880 --> 12:25.880]  Вот.
[12:25.880 --> 12:26.880]  То есть, у нас ребра будут.
[12:27.880 --> 12:28.880]  Ну, давайте так.
[12:28.880 --> 12:30.880]  Сейчас это будет, конечно, неформально.
[12:30.880 --> 12:33.880]  Но они будут рыжие и синие.
[12:35.880 --> 12:36.880]  Вот.
[12:36.880 --> 12:37.880]  Ну.
[12:37.880 --> 12:38.880]  Ну, скажем так.
[12:38.880 --> 12:41.880]  У нас есть возможность пользоваться цветными маркерами.
[12:41.880 --> 12:44.880]  Поэтому у нас будут рыжие и синие.
[12:44.880 --> 12:47.880]  В оригинальной статье слайтера Торьяна.
[12:47.880 --> 12:49.880]  Соответственно, они назывались.
[12:49.880 --> 12:51.880]  Они бы назывались такие.
[12:51.880 --> 12:52.880]  Что-то типа.
[12:52.880 --> 12:54.880]  Сплошные и прирывистые.
[12:54.880 --> 12:55.880]  Или что-то в этом роде.
[12:55.880 --> 12:58.880]  Рыжие, сплошные и синие.
[12:58.880 --> 12:59.880]  Да.
[12:59.880 --> 13:05.880]  Там гарантируется, что у каждой вершины.
[13:05.880 --> 13:08.880]  Существует не более, чем одно рыжее ребро, ведущее
[13:08.880 --> 13:11.880]  из нее в ребенка.
[13:11.880 --> 13:12.880]  Вот.
[13:12.880 --> 13:13.880]  Ну, у нас вот.
[13:13.880 --> 13:14.880]  Да.
[13:14.880 --> 13:16.880]  Просто волей оказавшегося у меня в руке маркера.
[13:16.880 --> 13:17.880]  Они будут рыжие.
[13:17.880 --> 13:19.880]  Какой принцип покраски?
[13:19.880 --> 13:20.880]  Вот.
[13:20.880 --> 13:22.880]  Какой принцип покраски?
[13:22.880 --> 13:24.880]  Ну, как я уже сказал, принцип простой.
[13:24.880 --> 13:27.880]  У каждой вершины не более одного рыжего ребра в ребенка.
[13:30.880 --> 13:34.880]  Если говорить об инварианте, то это все.
[13:34.880 --> 13:37.880]  Ровно один, если это не не обязательно.
[13:37.880 --> 13:38.880]  Не обязательно.
[13:38.880 --> 13:39.880]  Вот.
[13:39.880 --> 13:40.880]  Вот.
[13:40.880 --> 13:41.880]  Вовсе не обязательно.
[13:41.880 --> 13:42.880]  Да.
[13:42.880 --> 13:44.880]  То есть, в точке зрения инварианта это все.
[13:44.880 --> 13:45.880]  То есть, да.
[13:45.880 --> 13:48.880]  В инварианте мы там требовали, что там рыжие ребра, это
[13:48.880 --> 13:50.880]  какие-то там тяжелые ребра.
[13:50.880 --> 13:52.880]  Ну, там красные были, правда, неважно.
[13:52.880 --> 13:54.880]  А синие, это какие-то там легкие ребра.
[13:54.880 --> 13:58.880]  То есть, там какие-то инварианты на СЗЭшке там выполнялись.
[13:58.880 --> 14:04.880]  Ну, то сейчас мы этого делать не будем.
[14:04.880 --> 14:08.880]  То есть, мы себе неожиданно заявим.
[14:08.880 --> 14:11.880]  Мы себе неожиданно заявим, что у нас каждое дерево
[14:11.880 --> 14:16.880]  мы будем хранить в виде вот такого разбиения на пути.
[14:16.880 --> 14:19.880]  Но как выглядит в каждый конкретный момент времени эти пути,
[14:19.880 --> 14:23.880]  мы, говорите, мы никак не ограничиваем.
[14:23.880 --> 14:25.880]  Ну, собственно, кстати, в какой структуре данных
[14:25.880 --> 14:28.880]  мы уже с чем-то подобным сталкивались?
[14:28.880 --> 14:29.880]  Да.
[14:29.880 --> 14:30.880]  Совершенно верно.
[14:30.880 --> 14:32.880]  То есть, помните, у нас в сплее тоже было, что гарантируется,
[14:32.880 --> 14:36.880]  что это двоичное дерево поиска, но какое конкретно,
[14:36.880 --> 14:38.880]  а может быть любое.
[14:38.880 --> 14:40.880]  То есть, магия заключается не в том, что в каждое время
[14:40.880 --> 14:42.880]  может быть любое дерево, но в совокупности оно
[14:42.880 --> 14:45.880]  магическим образом работает адекватно.
[14:45.880 --> 14:50.880]  Да, в роли магии, как всегда, метод потенциалов.
[14:50.880 --> 14:52.880]  Ну, причем, как вы уже догадываетесь, мы сегодня
[14:52.880 --> 14:57.880]  от него, в общем-то, никуда не деемся.
[14:57.880 --> 14:58.880]  Вот.
[14:58.880 --> 14:59.880]  Но храни нот.
[14:59.880 --> 15:02.880]  Но хранить как мы будем хранить?
[15:02.880 --> 15:04.880]  Ну, хранить саму структуру будем так.
[15:04.880 --> 15:06.880]  То есть, как вы уже догадываетесь,
[15:06.880 --> 15:10.880]  на каждом пути мы будем хранить что-то умное.
[15:10.880 --> 15:16.880]  В роли чего-то умного какое-то двоичное дерево поиска.
[15:16.880 --> 15:18.880]  Потому что, как вы уже интуитивно догадываетесь,
[15:18.880 --> 15:20.880]  наверное, это не просто должно быть дерево поиска,
[15:20.880 --> 15:22.880]  желательно дерево поиска, которое поддерживает всякие
[15:22.880 --> 15:25.880]  сплиты, мержи и прочую радость.
[15:25.880 --> 15:28.880]  Логично, да?
[15:28.880 --> 15:30.880]  Вот.
[15:30.880 --> 15:35.880]  Значит, смотрите, изначально мы на самом деле будем считать,
[15:35.880 --> 15:39.880]  что это достаточно произвольное дерево.
[15:39.880 --> 15:40.880]  Вот.
[15:40.880 --> 15:42.880]  Потому что, забирая вперед, скажем, что, в принципе,
[15:42.880 --> 15:45.880]  основной анализ самой структуры позволяет тут, в принципе,
[15:45.880 --> 15:46.880]  хранить абсолютно любое.
[15:46.880 --> 15:49.880]  Что АВЛ, что декортичку, что сплит, что там.
[15:49.880 --> 15:51.880]  Все что угодно.
[15:51.880 --> 15:53.880]  И в результате мы получим, что, на самом деле,
[15:53.880 --> 15:57.880]  асимптотика всей этой радости – лог квадрат.
[15:57.880 --> 16:02.880]  На операцию.
[16:02.880 --> 16:05.880]  То есть, если совсем тупую реализовать.
[16:05.880 --> 16:06.880]  Вот.
[16:06.880 --> 16:08.880]  Ну, эта структура данных тоже на уровне анонса.
[16:08.880 --> 16:09.880]  Оказывается, мистика.
[16:09.880 --> 16:10.880]  Да.
[16:10.880 --> 16:13.880]  То есть, в общем случае, если вы впихнетесь туда произвольное
[16:13.880 --> 16:15.880]  дерево, то у вас получится лог квадрат.
[16:15.880 --> 16:18.880]  Но если вы вместо этого произвольного дерева просто
[16:18.880 --> 16:21.880]  подставите сплей, вот просто подставите,
[16:21.880 --> 16:24.880]  то магическим образом выяснится, что лог квадрат превратился
[16:24.880 --> 16:27.880]  в лог.
[16:27.880 --> 16:33.880]  В общем, это действительно достаточно волшебная вещь.
[16:33.880 --> 16:37.880]  Но пока вы не используете правильные потенциалы в сплее.
[16:37.880 --> 16:40.880]  Вот у нас с вами правильные потенциалы, поэтому, собственно,
[16:40.880 --> 16:41.880]  у нас все будет.
[16:41.880 --> 16:44.880]  Но пока, конечно, до этого надо дожить.
[16:44.880 --> 16:46.880]  Начнем все-таки с лог квадрата.
[16:46.880 --> 16:47.880]  Без этого никуда.
[16:47.880 --> 16:50.880]  Но для этого, для того чтобы…
[16:50.880 --> 16:53.880]  Ну, для лог квадрата нам, конечно, придется более
[16:53.880 --> 16:56.880]  глубоко посмотреть, а что тут вообще происходит,
[16:56.880 --> 17:01.880]  как конкретно мы эти всякие линки-каты будем…
[17:01.880 --> 17:04.880]  с этими линками-катами будем работать.
[17:07.880 --> 17:11.880]  Вот спрашивается, как же мы будем действительно с ними работать?
[17:15.880 --> 17:18.880]  Ну, вот эти вот… какие-то операции на путях
[17:18.880 --> 17:21.880]  и из деревьев отрезков, типа, да.
[17:21.880 --> 17:24.880]  Но у нас, конечно, мечта у нас будет об операции линка,
[17:24.880 --> 17:28.880]  об операции кат и об операции переподвешивания.
[17:28.880 --> 17:32.880]  То есть, от нового корня.
[17:33.880 --> 17:35.880]  Вы про пути рыжей говорите?
[17:37.880 --> 17:38.880]  Нет.
[17:38.880 --> 17:39.880]  Ну, не совсем.
[17:39.880 --> 17:41.880]  Здесь я говорил про другие пути.
[17:41.880 --> 17:46.880]  Нет, обратите внимание, здесь УВ – это вообще абсолютно
[17:46.880 --> 17:48.880]  две произвольные вершины в одном дереве.
[17:48.880 --> 17:51.880]  Мы структуру храним на рыжих путях?
[17:51.880 --> 17:53.880]  Структуру храним на рыжих путях.
[17:53.880 --> 17:56.880]  Если быть точнее, значит, происходит так.
[17:56.880 --> 17:57.880]  Значит, каждому…
[17:57.880 --> 18:00.880]  Значит, мы храним вообще структуру данных линкат,
[18:00.880 --> 18:05.880]  или там линкат 3, как оно называется, в виде набора рыжих путей.
[18:05.880 --> 18:09.880]  То есть, каждая вершина лежит ровно в одном рыжем пути.
[18:09.880 --> 18:14.880]  И у каждого пути есть еще синее ребро.
[18:14.880 --> 18:17.880]  То есть, это ребро родителя этого пути.
[18:18.880 --> 18:22.880]  В общем, информация о нем хранится в корне,
[18:24.880 --> 18:26.880]  вот, так сказать, дерева,
[18:26.880 --> 18:28.880]  которая соответствует пути.
[18:28.880 --> 18:31.880]  То есть, смотрите, каждому пути соответствует дерево.
[18:31.880 --> 18:33.880]  Другие, которые вот это, а которые сбалансированы.
[18:33.880 --> 18:35.880]  Вот сейчас у нас опять немножко путаницы будет.
[18:36.880 --> 18:38.880]  То есть, есть как бы поэнот.
[18:39.880 --> 18:42.880]  То есть, ну давайте, давайте его «авеликой» называть.
[18:42.880 --> 18:43.880]  Вот.
[18:43.880 --> 18:46.880]  То есть, как бы мы, то есть, у нас будет так.
[18:46.880 --> 18:49.880]  Мы будем считать, что у нас каждый рыжий путь – это условная «авелька»,
[18:49.880 --> 18:52.880]  и в корне «авельки» хранится информация о синем ребре,
[18:52.880 --> 18:55.880]  торчащем из начала этого пути.
[18:58.880 --> 19:00.880]  То есть, типа, там, куда оно ведет, там,
[19:00.880 --> 19:04.880]  ну да, куда оно ведет, сколько оно там весит и так далее.
[19:07.880 --> 19:08.880]  Вот.
[19:09.880 --> 19:13.880]  И так вправивается, что же нас теперь ждет.
[19:14.880 --> 19:18.880]  Значит, как же, как же мы будем реализовывать все эти линки и каты?
[19:18.880 --> 19:22.880]  Ну, как вы уже догадываетесь, так как у нас структура рандомная,
[19:22.880 --> 19:25.880]  только за конкретную структуру путей мы цепляться не будем.
[19:25.880 --> 19:28.880]  Она у нас будет постоянно меняться.
[19:29.880 --> 19:37.880]  Краеугольным камнем, конечно, является такая мистическая функция expose.
[19:37.880 --> 19:40.880]  Значит, вот тут я прям полное определение напишу.
[19:47.880 --> 19:51.880]  Значит, экспо, значит, операция expose от «у».
[19:55.880 --> 20:01.880]  Значит, ну, на языке рыжие наше, это вот, это orange blood, вот, слушайте.
[20:01.880 --> 20:03.880]  Слушайте, хорошее.
[20:03.880 --> 20:04.880]  Ну, прям как раз.
[20:04.880 --> 20:08.880]  Так вот, на языке нашей вот этой вот рыжей-синей декомпозиции,
[20:08.880 --> 20:12.880]  точнее, раскраски, то есть экспо у «у» можно определить так.
[20:15.880 --> 20:17.880]  То есть, нужно выполнить
[20:21.880 --> 20:23.880]  минимальные
[20:24.880 --> 20:25.880]  число
[20:26.880 --> 20:28.880]  перекрашиваний.
[20:40.880 --> 20:41.880]  Ребят,
[20:42.880 --> 20:43.880]  вот,
[20:44.880 --> 20:45.880]  вот,
[20:46.880 --> 20:47.880]  вот,
[20:48.880 --> 20:49.880]  вот,
[20:50.880 --> 20:51.880]  вот,
[20:51.880 --> 21:09.400]  так чтобы появился ржей путь
[21:09.400 --> 21:21.880]  от у до корке
[21:21.880 --> 21:39.000]  надо в чем чтобы не было то есть никаких изногласий еще важное подчекнул причем
[21:39.000 --> 22:01.000]  конец пути то есть нам нужно не просто сделать так чтобы там у соединился с ржем путем с корнем
[22:01.000 --> 22:08.080]  да но нужно чтобы еще и там на самой у ничего не висела никакие то есть у самой у больше
[22:08.080 --> 22:20.160]  никаких рыжих детей быть не должно да еще минимально вот но то отдельная песня действительно
[22:20.160 --> 22:28.600]  как но то как это сделать но на самом деле просто такое определение на самом деле уже вроде как
[22:28.600 --> 22:36.880]  дает интуитивное представление о том а шоу мы собственно будем делать но просто давайте
[22:36.880 --> 22:43.560]  просто давайте вообразим как вообще каким напрашивающимся способом вообще этот эксполс
[22:43.560 --> 22:55.880]  можно выполнить типа того да вот давайте да только давайте вот это я покажу значит смотрите
[22:55.880 --> 23:00.720]  значит давайте поподробнее значит подробнее да хотя вот идея такая то есть но начнем вот в
[23:00.720 --> 23:09.120]  чего начнем с того что у нас где-то вершина у находится на каком-то ржем пути изначально так
[23:09.120 --> 23:17.640]  но начнем мы с того но начнем из того что если у не конец своего пути да все пути мы естественно
[23:17.640 --> 23:23.640]  сверху вниз храним да то естественно вот это вот ребро мы объявляем синим вот я когда его буду
[23:23.640 --> 23:32.440]  обводить синим это означает что его перекрасил в синий цвет вот вот то есть теперь то есть это
[23:32.440 --> 23:38.880]  мы делаем то есть в овл кем это делаем с помощью стандартного сплита что же мы делаем дальше
[23:38.880 --> 23:47.840]  вот но тут мы неожиданно натыкаемся на начало то есть на начало этого пути и мы видим что оно
[23:47.840 --> 23:54.680]  куда-то приходит то есть это видится какой-то синий ребро который ведет нас в какой-то другой
[23:54.680 --> 24:05.440]  путь вот вот он вот он вот он вот какой-то еще путь ну а что мы делаем в этом случае ну во-первых
[24:05.440 --> 24:11.600]  конечно но вот если у этой вершины действительно есть то есть какой-то рыжий ребро вниз то мы его
[24:11.600 --> 24:20.960]  то мы делаем сплит вот так вот оно вот и после этого тогда вот эти два русской пути мы
[24:20.960 --> 24:42.400]  смёрзиваем вот таким вот нехитрым образом вот что такое минимальный способ нет а что а что мы
[24:42.400 --> 24:48.840]  могли нет ну как сказать зависим мы в общем-то пока форсировано делаем в общем-то ну скажем так
[24:48.840 --> 24:54.760]  пока у нас нет каких-нибудь этих отложенных операций как бы и вот а вот а вот а в конкретном
[24:54.760 --> 24:59.120]  этом контексте отложенных нет то ничего не делаем то есть делаем как более того забирать
[24:59.120 --> 25:06.560]  вперед ничего нового тут мы не изобретем и будет работать буквально так вот дальше тут таки путь
[25:06.560 --> 25:11.680]  опять у нас значит че еще да еще может в принципе так сложиться что путь вполне может оказаться
[25:11.680 --> 25:20.600]  пути в принципе здесь же и заканчивается в этом смысле это называется нам повезло вот ну и мы так
[25:20.600 --> 25:33.520]  делаем делаем делаем делаем до тех пор пока не дойдем до корня вот ну и здесь уже понятно без
[25:33.520 --> 25:49.560]  вариантов тут красим тут красим то есть вот так будет работать эксполс на самом деле он будет
[25:49.560 --> 25:57.960]  состоять из последовательности splice значит смотрите да то есть еще важно конечно отметить
[25:57.960 --> 26:03.520]  что каждая вот такая операция у нас будет называться splice
[26:03.520 --> 26:15.800]  ну по сути да ну вот я сказал так да вот то есть вот это вот конкретная операция когда когда мы
[26:15.800 --> 26:20.920]  идем вверх и вот мы тут синий ребро красим в рыжий возможно перекрашиваю еще какой-то рыжий в
[26:21.280 --> 26:33.080]  это мы будем называть splice ну фактически заметим что у нас что происходит у нас как получается
[26:33.080 --> 26:41.240]  эксполс работает за один сплит плюс последовательность splice мы заметим кого конкретно и с кем нужно
[26:41.240 --> 26:50.160]  splice мы обычно там выясняем за от единиц но в том плане что мы понятно что у нас есть путь мы
[26:50.160 --> 26:55.360]  знаем кто у него синий ребро вот единственное что там конечно по каждой вершине мы должны
[26:55.360 --> 27:01.280]  будем внутри дерева как-то понимать где оно находится и кого сплит но обычно это понимается
[27:01.280 --> 27:08.560]  легко ну скажем правда как то есть конечно мы на это потратим не вот единицы там конечно логарифа
[27:08.560 --> 27:12.400]  но с другой стороны мы и сплит но то есть конкретный сплит на первой велики мы явно тоже
[27:12.400 --> 27:17.200]  за логарифом делать будем правда поэтому физически мы ничего не теряем
[27:17.200 --> 27:25.960]  но количество действий на логарифу все-таки потому что каждый каждый вот этих свой каждый
[27:25.960 --> 27:35.560]  splice все-таки и сплит мерш какой-то да то есть больше то есть условно говорят так конечно мы
[27:35.560 --> 27:44.880]  бы это делали за количество splice если бы эти пути были там этими как их списками досвязанными
[27:44.880 --> 27:52.040]  да были бы они двусвязанными списками нас был бы кайф так что в принципе если вы хотите сделать
[27:52.040 --> 27:58.640]  линкат по двусвязанных списках то пожалуйста осталось только выяснить зачем вам нужна такая
[27:58.640 --> 28:05.480]  структура данных хотя вот интересно если придумать какой-нибудь очень крутой она там
[28:05.480 --> 28:10.600]  крутое применение то можно прям задачу на олимпиаду дать решение давайте напишем линкат но чтобы
[28:10.600 --> 28:16.040]  была адекватная септотика сделаем его на списках работать оно будет правда тоже за логарифом
[28:16.040 --> 28:23.040]  обычный линкат тоже работает с логарифом так что зачем нам это надо непонятно чего
[28:23.720 --> 28:36.400]  а сделаем супер онлайн давайте отлично отличить да да да да почему бы нет ладно теперь будет
[28:36.400 --> 28:44.460]  correlate но вот так ну теперь давайте посмотрим хорошо дать значит смотрите значит это значит это
[28:44.460 --> 28:51.620]  у нас есть мистический эксполс то есть вот такое делать эксполс он будет то есть это будет так
[28:51.620 --> 28:54.940]  внутренняя операция конечно потому что она влияет только на внутреннюю
[28:54.940 --> 28:58.260]  переказ то есть понятно пользователи в общем-то абсолютно нахать кого мы
[28:58.260 --> 29:03.220]  считаем рыжим и кого синим вот то есть ему нот он как бы у нас человек простой
[29:03.220 --> 29:08.940]  стомтипом он взвести мне вы видите мне 300 грамм сосисок и все в общем-то вот но
[29:08.940 --> 29:13.780]  вот но внутри конечно это будет операция важная то что практически с
[29:13.780 --> 29:20.300]  любой когда угодно что мы будем делать мы всегда будем хотеть делать эксполс ну
[29:20.340 --> 29:26.460]  например для нот но для разминочки вот для разминочки мы реализуем да
[29:26.460 --> 29:37.540]  какой бы операцию нам для разминочки реализовать ну конечно же да есть такая
[29:37.540 --> 29:43.900]  операция лца не кстати уже неплохая структура данных да то есть уже прикольная
[29:43.900 --> 29:48.380]  могла быть такая абстрактная конечно немножко но задачка то есть там то есть
[29:48.380 --> 29:52.420]  да но вот это дерево делайте липки делайте каты делайте переподвешивание что самое
[29:52.420 --> 30:05.300]  страшное и еще и сделайте лца да совершенно верно да спасибо дайте еще
[30:05.300 --> 30:13.540]  киевске нет окей да но действительно да оказывается что совершенно неожиданно
[30:13.540 --> 30:20.220]  лца тувэ в общем-то с помощью эксползу делается очень несложно то есть делается она примерно
[30:20.220 --> 30:26.800]  следующим образом то есть она то есть она делается давайте тут а нет рижем рижем все
[30:26.800 --> 30:40.300]  правильно было то есть мы пытаемся делать так мы делаем эксполс от у потом делаем эксполс от
[30:40.300 --> 30:44.260]  в и что дальше
[30:56.260 --> 31:05.900]  ну по сути да но то есть дальше вот то есть дальше говорим что-то там вот так скажем
[31:05.900 --> 31:15.180]  риту а ритор ну что-то получается что п с нет да что ж я все время не тем цветом пишу
[31:15.180 --> 31:31.740]  вот аня нет ритор вот это так напишу перронт от пс от вот так скажи вот так вот так условно
[31:31.740 --> 31:41.700]  я реализую все три строчки так ну действительно давайте вот попробуем нарисовать откуда я взял
[31:41.700 --> 31:50.260]  откуда тут даже уже не я а кто-то из вас взял эти три строчки но чем логично откуда потому что
[31:50.260 --> 32:02.580]  жила была жила было у жила было в жил был их лца и где-то тут кой да мы объявили эксполс от
[32:02.580 --> 32:12.660]  у эксползату сказал что вот путь теперь выглядит вот так потом мы сказали эксполз от в то есть
[32:12.660 --> 32:19.060]  путь теперь выглядит вот так и для этого мы тут вот это вот синенькая ребрышка отпилили таки
[32:19.060 --> 32:25.100]  наоборот пока сидит синие ребрышка тут отпилили часть пути но и тогда берем путь от у берем
[32:25.100 --> 32:34.060]  родителя берем родителей этого пути и вот он и лца то есть вот такой вот очень простой элегантный
[32:34.060 --> 32:41.940]  метод но тем не менее в этом месте я произношу любым и два слова найдите ошибку
[32:41.940 --> 33:02.900]  ну да хоть когда у предыдует так ну давайте смотреть потому что в принципе есть подозрение
[33:02.900 --> 33:10.420]  что у нас есть проблемы когда кто-то тут чей-то предок но сейчас давайте разберемся вот если у
[33:10.820 --> 33:15.620]  не предки друг друга то как видим действительно все успешно работает и даже лца может быть корнем
[33:15.620 --> 33:21.540]  ничего страшного не будет вот но давайте предположим что он но давайте предположим что
[33:21.540 --> 33:30.340]  совершенно случайно кто-то у нас казался чьим-то корнем вот но например у оказался корнем в предком
[33:30.500 --> 33:44.900]  что тогда произойдет тогда кажется что сначала путь тут будет выполнен вот такой эксполс а потом
[33:44.900 --> 33:52.660]  будет вот такой так то есть теперь но то есть теперь обнаруживается что родительский путь
[33:52.660 --> 33:58.860]  у то есть это на самом деле путь корень и у него значит этого родителя тупо не существует
[33:58.860 --> 34:18.580]  так тогда вытикает правда маленькая приятная задача даны вершины у его скажите пожалуйста
[34:18.940 --> 34:28.860]  machen對ving cooler но нет но давайте после случаев рассмотрим чтобы убедиться когда это
[34:28.860 --> 34:37.840]  бывает когда нет то есть в данном случае действительно оказывается но это на
[34:37.840 --> 34:43.660]  пути и у действительно при этом а если а давайте посмотрим а что будет если на оборот в родитель
[34:43.660 --> 34:54.460]  вот если оказалось наоборот что нас вот у нас вот у нас вы что тогда тогда оказывается тогда
[34:54.460 --> 35:02.140]  оказывается да эксползату на лицо значит эксползат в но то же самое только вот делаем тут один вот
[35:02.840 --> 35:08.840]  и тогда оказывается что parent от p-satu это в это точности правильный ответ
[35:08.840 --> 35:36.480]  ну да на самом деле да как легко убедиться в этих случаях все гораздо проще есть то есть на
[35:36.480 --> 35:41.440]  самом деле оказывается единственный случай когда этот ответ неправильный это когда на самом
[35:41.440 --> 35:48.440]  деле этого паранта тупо не существует то есть я так напишу допишу по питоновской ритурен
[35:48.440 --> 36:04.880]  parent и этот parent существует по-русски так напишу ну вот но в противном случае что мы вернем в
[36:04.880 --> 36:15.600]  противном случае мы скажем что ответ это тупо вот но знаете это там типа типа а равно 5 там 5
[36:15.600 --> 36:23.480]  и в том бы и делится на три л за 7 да вот это вот так вот питом же есть да будет
[36:23.480 --> 36:30.680]  нет ну как сказать не но я тут просто написал я просто написал тут трендарный оператор но
[36:30.680 --> 36:37.600]  питоновский вот то есть как бы я просто вот это не хотел стирать поэтому написал это немножко
[36:37.600 --> 36:43.560]  вот вас там ждет то есть там будет такой формат то есть там в питоне можно писать вот так вот там
[36:43.560 --> 36:54.920]  5 иф там б процент 3 равно равно нулю л за 7 вот питом есть такая конструкция да потому что тот
[36:54.920 --> 37:06.000]  же самый трендарный оператор просто он пишется вот так а это а это кому как привычно то есть как
[37:06.000 --> 37:11.360]  бы понять как бы просто у каждого языка просто там своя логика возможно там просто там под
[37:11.360 --> 37:17.860]  своему там по-своему надо повернуть голову чтобы там бы адекватно писать на языке вот
[37:24.920 --> 37:32.800]  ну да но получилось так да то есть вот такая вот приятная то есть л сашечка оказывается
[37:32.800 --> 37:38.480]  реализованность такими приятными свойствами да то есть обратили но вот то есть кстати более
[37:38.480 --> 37:44.560]  того к вопросу о то есть на самом деле если у нас задача выяснить является ли какая-то вершина
[37:44.560 --> 37:50.120]  предком другой то есть например является ли вершина у предком в это общем из этих картинок
[37:50.120 --> 37:57.360]  сразу решение делаем эксползат в этом тупо проявляем проверяем они на этом ли пути случайно
[37:57.360 --> 38:05.800]  оказался ну там конечно везде правда смотрите есть один тонкий момент то есть везде для этого нам
[38:05.800 --> 38:15.520]  придется каким-то образом выяснять для вершины какому пути она принадлежит то есть у нас как бы
[38:16.040 --> 38:20.800]  как вы догадываетесь у нас вряд ли будет такая структура данных которая просто там будет какой-то
[38:20.800 --> 38:25.720]  массив который там для каждой вершины будет прописывать в каком бы там в пути номер каком
[38:25.720 --> 38:31.320]  он лежит правда у нас мы такую перекаску не можем себе позволить то есть конечно то есть
[38:31.320 --> 38:37.040]  условно эвейки обычно придется видимо от вершины у просто идти по родителям доходить до корня там
[38:37.040 --> 38:43.880]  в условном сплее как вы уже догадываетесь видимо придется просто сплее вызывать поэтому то есть
[38:43.880 --> 38:48.160]  получается чтоб поэтому проверка является ли кто-то предком кого-то у нас будет к сожалению не
[38:48.160 --> 38:56.240]  за единицу а за логарифм и это не считая эксполза вот то есть поэтому тут везде такие логарифмики
[38:56.240 --> 39:07.960]  будут выплывать так так ну что еще можно сделать так ну в принципе еще есть такая простенькая на
[39:07.960 --> 39:17.880]  самом деле с точки с этой точки зрения простенькая операция и верт как же сделать и верт
[39:25.880 --> 39:33.880]  ну как-то да ну да то есть оказывается да при помощи такой технологии действительно там как
[39:33.880 --> 39:39.320]  сделать у кордин да очень просто делаем то есть у нас какой-нибудь и верт давайте вот
[39:39.320 --> 39:54.920]  то есть эвертоту будет писаться так значит мы делаем как всегда эксползату и а дальше мы
[39:54.920 --> 40:09.120]  условно делаем реверс пас а то то есть обратите внимание мы этот реверс делаем только может
[40:09.120 --> 40:18.440]  быть внутри пути то есть то есть условно говоря все вот и все вот эти синие товарищи ну хотя
[40:18.440 --> 40:22.840]  нет кстати обратите внимание в общем-то синие то есть синие товарищи указывают не на путь
[40:22.840 --> 40:29.640]  синие товарищи указывают на вершину то есть как бы мы висим на вершине то есть как бы у
[40:29.640 --> 40:35.480]  этой вершины этот рыжий путь может там меняться может там сплите тела сплится мерзится но над как
[40:35.480 --> 40:40.760]  бы если на него что-то тут о синих ребрах висит оно никак не меняется поэтому в принципе мы вот
[40:40.760 --> 40:49.840]  этот вот путь можем спокойно реверсить и не заморачиваться поменяется то что мы путь храним
[40:49.840 --> 40:54.720]  сверху вниз то есть когда мы находим какой-то путь у которого нет родителя то значит его начало
[40:54.720 --> 40:59.760]  это корень поэтому когда мы сделали реверс мы сказали что теперь у это корень то есть у был
[40:59.760 --> 41:06.280]  конец вот кстати может быть отчасти зачем мы вообще от учета отпиливали да то есть вот одна из
[41:06.280 --> 41:11.000]  причин зачем отпиливали то есть мы сказали что то есть вот то есть мы эксползату сказали что у
[41:11.000 --> 41:16.680]  меня теперь есть путь от начала корень а у конец а давайте сделаем теперь реверсу этого пути
[41:16.680 --> 41:25.360]  теперь у это начало то есть корень все то есть вот оказывается да то есть то есть оказывается
[41:25.360 --> 41:34.880]  вот так вот таким вот простым способом можно это сделать вот я та вот
[41:34.880 --> 41:49.280]  ну как видите залог квадрат твой залог умножить на сколько сплайсов вы сделаете
[41:49.280 --> 41:59.800]  то есть да нет правильно сказать если честно то залог на количество сплайсов плюс 1 ну вот
[42:00.800 --> 42:19.600]  это если честно да так да нет а что значит подвешиваем вот давайте внимательно задумываемся
[42:19.600 --> 42:27.040]  вот давайте подумаем смотрите давайте в нем да внимательно нет в чем проблема нет а что
[42:27.040 --> 42:32.680]  поменяется но первое давайте внимательно скажу еще раз подчеркиваем где мы вообще в каком
[42:32.680 --> 42:39.840]  месте вообще этой всей структуры мы храним синие ребра да то есть у каждого пути в хоре там в
[42:39.840 --> 42:46.200]  хоре этого пути хранится информация что на самом деле этот путь подвешен за синие ребро какой-то
[42:46.200 --> 43:01.480]  вот вершине и у него есть еще какой-то вес все вот то есть принципе заметь что в принципе сам
[43:01.480 --> 43:05.040]  по себе вот этот путь вообще не знает что на нем что на нем там вообще что-то висит
[43:05.040 --> 43:19.000]  напоминаю нас на каждом ребре чиселка хранится мы с этими чиселками еще страдаем вот ну можно
[43:19.000 --> 43:25.440]  на вершинах естественно хранить они на рёбрах но как бы суть одна хотя с ребрами как бы реализация
[43:25.440 --> 43:31.080]  еще вообще вопрос как этот путь вообще нормально хранить кстати еще будет впрочем прям тут
[43:32.080 --> 43:36.320]  что-то реализацию надо внимательно смотреть потому что чтобы как бы внимательно доказывать почему
[43:36.320 --> 43:42.560]  у нас там со сплеем получится все хорошо потому что да чтобы поддержать интриги то есть честно
[43:42.560 --> 43:48.680]  говоря да ты знаешь сегодня мы убедимся это простой алгоритм но кода но вот но как бы года года
[43:48.680 --> 43:56.760]  скажем 4 до сат лично мне не было понятно откуда там вообще берется логерев его нет потому что
[43:57.120 --> 44:01.400]  вообще мистическая история вот парадокс том что классическая реализация ну как бы
[44:01.400 --> 44:06.960]  после свинка там так как бы все знают что если блинкате написать с плей то вместо лог квадрата
[44:06.960 --> 44:15.720]  будет логерев до этого года все знают ну если ну в сообществе ну как бы просто ну знаете просто
[44:15.720 --> 44:21.640]  общие сведения ну как бы вот есть тирем пифагора там допустим да и есть вот это да ну вот там не все
[44:21.640 --> 44:27.120]  я знаю доказательство те римпи фагора но как вы transportation знают все но также и здесь вот но
[44:27.120 --> 44:30.340]  как бы если доказательство те римпи фагора как бы скорее всего в том сообщении в котором и сами
[44:30.340 --> 44:38.680]  крутимся все-таки скорее всего вам расскажут хотя нет ну давайте так вот поднимите руки кто
[44:38.680 --> 44:43.200]  готов был бы выйти к доске теоретически да и в течении там подумав две минуты рассказать
[44:43.200 --> 44:58.200]  доказательства теперь пифа гора и вот не рискнешь хряща ладно ну вот ну может быть
[44:58.200 --> 45:01.840]  нету дальше будет зависеть от того какие доказательства хотите дай их там конечно да
[45:01.840 --> 45:08.680]  нету я я говорю любое доказательство на самом деле ну то есть вот это вот классическое доказательство
[45:09.280 --> 45:14.520]  давайте там нарисуем квадратик и там посмотрим его площади да вот это все вот нет но я не хочу
[45:14.520 --> 45:19.880]  сейчас в это углубляться просто как бы ради интереса так просто ради интереса был вот ну
[45:19.880 --> 45:26.760]  вот но к сожалению тут история уже не такая потому что так прикольная история была заключалась
[45:26.760 --> 45:33.120]  следующим потому что в принципе доказательства то есть так на уровне если вы хотите доказать что
[45:33.120 --> 45:37.560]  вот это вот там правильная реализация работает залог квадрат то это доказательства найдете в
[45:37.560 --> 45:44.520]  куче мест начинает просто свитки конспект вот торпора потолка в конспекте там блок квадрат
[45:44.520 --> 45:51.520]  все чуть-чуть четенько расписано там все хорошо замечательная вот там можно это найти или там
[45:51.520 --> 45:55.560]  на английском языке будете гуглить можно там какие-нибудь вики там что-то еще и мой тишины
[45:55.560 --> 46:00.520]  конспекты найти кстати то есть знаете как и странно там можно найти конспекта assignment
[46:00.520 --> 46:05.720]  продвинутого логовитмического курса вм идти вот и кстати там вообще хороший такие конспекты
[46:05.720 --> 46:12.200]  вообще очень интересные вот но почему-то там залог квадратом расписывает все
[46:12.200 --> 46:16.220]  вообще это как только доходит до сплея логарифа там подсчета начинает говорить
[46:16.220 --> 46:21.360]  ой ну там нет ну там как бы все там что-то потанциал и красиво схлопнутся и
[46:21.360 --> 46:27.140]  будет хорошо вот самое страшное что потом вы находите вы не отчаивайтесь
[46:27.140 --> 46:33.220]  находите видео лекцию станки еще просплей дерево тупра линкат но он говорит вам
[46:33.220 --> 46:47.740]  буквально то же самое с точностью долгарифа окей но ну хорошо но я нет я
[46:47.740 --> 46:50.500]  рассказываю просто момент несколько лет не дает давности вот все что нашел было
[46:50.500 --> 46:54.260]  так а самое страшное естественно как конечно тут в этом случае надо но чего
[46:54.260 --> 46:59.580]  а что говорит оригинальная статья так вот оригинальная статья значит про
[46:59.580 --> 47:05.580]  динамики там слейтор и тарьяна про динамические деревья она говорит следующее а давайте
[47:05.580 --> 47:09.580]  подставим какой-то мистическое деревья с абсолютно какой-то не подберу другого
[47:09.580 --> 47:15.240]  слова там какими-то укуренными вариантами вот не подберу другого слова то есть там
[47:15.240 --> 47:19.300]  какая-то черная магия так вот там с какой-то черной магией так вот на самом деле можно
[47:19.300 --> 47:25.540]  показать что вот это вот черная магия то есть это черная магия действительно работает и тут
[47:25.540 --> 47:32.860]  вместо лог квадрата будет логариф вот чем я уже я уже начал думать что может это такое просто
[47:32.860 --> 47:36.460]  совпадение какой-то мистическое заблуждение какой-то еще как бы кажется что работает
[47:36.460 --> 47:47.460]  залогарифом на самом деле доказательства ни у кого нет ну я не знаю но я не знаю то замедлили
[47:47.460 --> 47:51.420]  нет лакшер открывался как раз просто надо было оказывается надо было просто открыть статью
[47:52.300 --> 47:58.740]  секрет просто нет секрет оказался простой дело в том что с плей дерева было изобретено
[47:58.740 --> 48:04.500]  абсолютно теми же авторами да но теми же авторами через датам если верить статьям через два года
[48:04.500 --> 48:11.700]  после лентгата нет то есть они не видимо там были изысканий там появилось плей дерева появилось
[48:11.700 --> 48:18.100]  мистическое статья о том что то есть плей дерева который там у нас там есть куча разных этих
[48:18.340 --> 48:22.300]  деревьев там пойте мы с вами обсуждали там под разные нужды там разные потенциалы там
[48:22.300 --> 48:27.900]  блабла блабла и вот выясняет что сплей дерева убеет все главное просто верить в амортизацию вот то
[48:27.900 --> 48:35.300]  есть амортизация аллилуйя да вот это вот но то что и ну вот и оказывается одним из применений
[48:35.300 --> 48:40.340]  оказывается что давайте вместо там этого безобразия давайте подставим сюда с плей и тоже будет работать
[48:40.340 --> 48:47.300]  вот то есть такая вот на это пока мне лично моя история изыска изыскания этого вопроса была
[48:47.300 --> 48:55.860]  вот это соответственно что нас ждет но как выяснилось действительно не сложно чем более того то есть
[48:55.860 --> 48:59.620]  то есть более того собственно мы с вами уже даже подготовились собственно сделать там правильный
[48:59.620 --> 49:07.260]  потенциал сплея но до этого надо еще дожить и так потому что ладно хорошо мы научили мы поняли как
[49:07.860 --> 49:16.900]  так что мы еще поняли но в принципе я думаю вы уже ну в принципе я думаю вы догадывает то есть
[49:16.900 --> 49:23.780]  вы догадываетесь как теоретически можно делать вот эти все операции но на самом деле тут у вас
[49:23.780 --> 49:30.540]  есть даже выбор но потому что самая тупая идея на что вы можете сделать это конечно сделать
[49:30.540 --> 49:37.980]  эвертат у быстренько то есть делаем эвертат у делаем экспозат в на этом то есть ну там добиваемся
[49:37.980 --> 49:44.340]  того что у и вы у вас лежат на одном пути являются его концами да ну так давайте на этом пути после
[49:44.340 --> 49:50.500]  этого там объявим там либо возьмем сумму либо там сделая опять там повесим в корень отложенную
[49:50.500 --> 49:56.140]  операцию вот эту да присваивание или там вот прибавление и после этого там может по и вертим
[49:56.460 --> 50:03.900]  обратно после этой极ив masey можно сделать так можно на самом деле сделать так может
[50:03.900 --> 50:08.140]  благодарь не спит на самом деле делать и так далее но то есть как вы потом как потом �итрый
[50:08.140 --> 50:12.120]  подобные вещи tracing уже делать аккуратно имея в виду относительно своем в каком потенциале мы
[50:12.120 --> 50:18.060]  живем но заранее скажем что ничего страшного там не будет ну в конце концов там линки катым и
[50:18.060 --> 50:22.720]  будем делать но там самый тупой для кум comedy самый тупой идейно можно просто сделать кибетам
[50:22.720 --> 50:30.720]  пару вертов и не парится в принципе кстати может даже не самая плохая вещь но собственно
[50:30.720 --> 50:37.480]  краеугольниками как делать линк как делать как вот как вы думаете что проще
[50:37.480 --> 50:49.520]  но на самом деле но скажем так там есть пара оговорок оказывается что как в кате пожалуй
[50:49.520 --> 51:02.240]  сделать проще вот значит как пожалуй сделать него но потому что в кате ну хотя нет флага и
[51:02.240 --> 51:08.320]  так и так то есть придется вот то есть нельзя просто так там поспитить какой-то путь то есть
[51:08.320 --> 51:15.400]  у нас вот ну вот будет у нас вот такая вот красота то есть просто так отспитить никого нельзя вот
[51:15.400 --> 51:22.520]  но мы но вот но обычно кат конечно делается простым естественным образом как вы уже радуешь мы
[51:22.520 --> 51:37.400]  делаем эксполз отве чего а ну хотя хотя хороший вопрос хотя да ладно здесь а ну да поэтому кат и
[51:37.400 --> 51:42.920]  легче можно видео его на самом деле можно как угодно делать но вообще да самый логичный вариант
[51:42.920 --> 51:47.640]  действительно который тут уже подсказывает действительно давайте просто сделаем эксплу тупо
[51:47.640 --> 51:55.920]  эксползот у и неожиданно обнаружим что после этого действительно у нас вершина в соедини нас у
[51:55.920 --> 52:01.840]  теперь синим заведомо синим ребром и остается просто в этом вместо этого синие ребра написать
[52:01.840 --> 52:19.640]  что а больше тут нет ничего вот так parent от там песо тв равно то есть там присвоить так сказать ну
[52:19.640 --> 52:30.760]  все чуваке вату но нет и я честно предлагал видимо более сложным почему-то мне хотел
[52:30.760 --> 52:38.080]  сделать эксползот вы сделать сприт в дереве но пожалуй и этот вариант лучше впрочем как всегда
[52:38.080 --> 52:43.080]  кодовая фраза эти там и там поймем потенциал и тогда относительно этого потенциала что-то
[52:43.080 --> 52:51.760]  и пойду потому что скажем вот с линком например у нас вот потому что в линке есть маленькая
[52:51.760 --> 52:59.880]  подляночка потому что в линке например авторы просто очень жестко требует что реализация
[52:59.880 --> 53:07.160]  должна быть именно значит поехали эксполз но во первых эксползот у вот прям обязательно
[53:07.160 --> 53:17.600]  вот линк вот мы хотим в подвесить ку то есть к абсолютно я но вот вот у меня есть вершина у
[53:17.600 --> 53:28.040]  она живет в каком-то дереве и жила была вершина в который является корнем другого дерева что-что
[53:28.040 --> 53:38.760]  кого верт нет но это другой вопрос но обычно скажет так в линке подразумевается что вы
[53:38.760 --> 53:44.280]  такой да в принципе не там не очень сильное предположение можно от него обойтись но вот
[53:44.280 --> 53:51.200]  дефолтная реализация все-таки говорит что линк все-таки подвешивает корень вот хотя
[53:51.200 --> 54:03.000]  так вот это делаем эксполз от и после но вот а дальше что важно делаем ну в оригинальной
[54:03.000 --> 54:10.840]  статей используется конечно в этом месте такое слово как агрегат но на нашем языке это
[54:10.840 --> 54:21.920]  просто написано просто мэрш я так напишу условно мэрш пэссот у пэссот в
[54:21.920 --> 54:31.000]  вот ну конечно он будет подразумевать что между этими двумя путями есть еще
[54:31.000 --> 54:36.880]  какое-то ребро и его надо учесть вот но это уже детали
[54:36.880 --> 54:57.200]  вот такая красота эксполз есть мэрш есть радость есть вот то есть вот идея на вот такая реализация
[54:57.200 --> 55:07.960]  что нет туда вот подлянки на том что авторы требуют что вот реализация дадут быть вот
[55:07.960 --> 55:18.120]  такая почему-то ну какая ну бы самая тупая реализация которая могла бы быть давайте сделаем
[55:18.120 --> 55:24.560]  эксползат в но первое нет ладно хотя даже не эксползат в самой тупой что можно было сделать
[55:24.560 --> 55:31.120]  но раз вы корень а давайте синим ребром подвесим и руку и вообще не будем париться вот вообще сам
[55:31.120 --> 55:38.280]  эту поршу могли сделать это вот это но но вот но по каким-то видимо потенциальным причинам
[55:38.280 --> 55:58.080]  по каким-то теоретически потенциальным причинам вообще но нет как-то ну как сказать потому что
[55:58.080 --> 56:02.560]  этот мёрзший ашкин то есть как бы не надо что этот мёрзший это просто честно взял там два
[56:03.560 --> 56:10.400]  то есть там просто момент такой что если уж мы храним на ребрах какую-то информацию да то
[56:10.400 --> 56:16.880]  нам придется то есть у нас это не просто деревья у нас какие-то мистические деревья то есть там
[56:16.880 --> 56:23.480]  какие-то мистические деревья которые каким-то образом видимо эту информацию еще и хранят то
[56:23.480 --> 56:27.160]  есть и это кстати отдельная песня как это делать то есть может быть вообще было бы нам легче если
[56:27.160 --> 56:32.720]  информация вершина хранилась вот отдельно как реверс делать то есть один из вариантов вообще
[56:32.720 --> 56:39.960]  знаете какой это вариант на самом деле если у вас там скажем там я не знаю там ка есть у вас там в
[56:39.960 --> 56:46.960]  пути ка вершин то предлагается хранить там какой-нибудь сплей дерево то есть там пытаться хранить какой-нибудь
[56:46.960 --> 56:53.080]  сплэйде там сплэйдерва на 2 ка минус одну вершину даже для того чтобы на промежутчинах
[56:53.080 --> 56:59.040]  вершина хранить себе собственно сами по себе чиселки нет понятно да что есть конечно очень
[56:59.040 --> 57:06.840]  большой соблазн действительно для каждой вершины хранить чиселку который ведет ее в родитель но есть
[57:06.840 --> 57:22.760]  один маленький нюанс нюанс называется реверс но как как еду как и нет но там как бы нет но там
[57:22.840 --> 57:27.440]  какие варианты есть да то есть как бы либо вы это все храните в одном дереве либо как бы вы
[57:27.440 --> 57:32.720]  вершинке храните в одном дереве и а сам массив ребер в другом например да то есть если там для
[57:32.720 --> 57:38.200]  вершины знаете что она там на приписи там я не знаю 57 в своем пути то значит тогда ребро ведущие
[57:38.200 --> 57:46.400]  в родители это просто там 56 и ребро да вот то есть ну теоретически можно так то есть можно так
[57:46.400 --> 57:59.280]  можно эдак да ну то есть на самом деле до идеи на конечно можно сказать так что давайте просто то
[57:59.280 --> 58:04.440]  есть на самом деле как бы не кончится то есть можно просто каждый ребро мысленно всегда сплитить
[58:04.440 --> 58:10.840]  надо сплитить на два ребра и тот одну вершинку в этой вершинке хранить чиселку идейна в общем-то
[58:10.840 --> 58:15.760]  тогда ничего тогда в общем тоже очевидно что идеи на все сводится тогда к случаю когда у нас
[58:15.760 --> 58:24.240]  чиселки на вершинах находятся вот но тут как бы да тонкие маме анот но поэтому вот но мешка
[58:24.240 --> 58:27.800]  что будет предназемевать в этом месте конечно когда мы тут сливаем два пути мы подозреваем
[58:27.800 --> 58:33.840]  что эти два пути соединили бром то есть это да ребро тут в пс от в написано вот это синее ребро
[58:33.840 --> 58:50.760]  и мы это но вот и мы как бы должны должны это в мёрчить ну да совершенно верно да да то есть на
[58:50.760 --> 58:55.360]  самом деле дай решать до фпс от вы сейчас ничего не было написано но на самом деле вот как бы
[58:55.360 --> 59:00.240]  вопрос где использует вот этот вес а вот он вот надо создать новое ребро весовый ты через него
[59:00.240 --> 59:11.040]  еще и померз то есть по-хорошему да тут надо через запятую еще в 8 написать вот это для нас
[59:11.040 --> 59:26.200]  будет важно дожутия принципиально важно так так так так вот теперь но то кажется вроде нам
[59:26.200 --> 59:31.160]  удалось вроде достаточно точно понять как это пенот собственно как это реализовывать
[59:31.160 --> 59:39.360]  пока ими на уровне идеи и в принципе легко заметить что по такой реализации на самом
[59:39.360 --> 59:45.880]  деле все работает за не более чем логарифом плюс эксполс правда а многие операции работают
[59:45.880 --> 59:51.800]  даже за единицу плюс эксполс по сути правда но потому что всякие потому что как бы помним
[59:51.800 --> 59:57.680]  реальное время реверсов и всяких там присваивания на пыл на всем динам всем там на все в эльки то
[59:57.680 --> 01:00:03.400]  вот единицы потому что да вот эти отложенные отложенные там всякие эти присваивания развороты
[01:00:03.400 --> 01:00:12.560]  и так далее никто не отменял вот то есть по сути теперь вопрос за сколько у нас работают эксполс
[01:00:12.560 --> 01:00:22.040]  вот эксполс у нас работают на самом деле за нот эксполс она за сколько работает
[01:00:22.040 --> 01:00:33.640]  но пока мы этого не знаем мы знаем точно только одно эксполсы работают за логарифом умноженный
[01:00:33.640 --> 01:00:36.200]  на число сплайсов
[01:00:36.200 --> 01:00:56.160]  так сейчас я не понял еще
[01:00:56.160 --> 01:01:15.680]  почему знаем нет у нас да да нет ну как сказать нет если мы говорим об обверте для сумма то нам
[01:01:15.680 --> 01:01:22.200]  как бы не ничто в конце не мешает сделать эверт от того корня который там был изначально то есть
[01:01:23.040 --> 01:01:32.320]  тут подразумевается что корень по идее подразумевается внимание еще раз что как бы корень
[01:01:32.320 --> 01:01:38.480]  задает по идее пользователь то есть как бы если мы в сумме решили при подвесить дерево за какие-то
[01:01:38.480 --> 01:01:45.600]  там свою вершину из под своих нужд то но то как бы нам надо не забыть потом вернуть все на место
[01:01:45.600 --> 01:01:55.400]  вот или использовать какие-то еще варианты вот потому что нет смотрите потому что на самом
[01:01:55.400 --> 01:01:59.560]  деле если у нас есть сумма тувы и у его не являются предками друг друга то на самом деле
[01:01:59.560 --> 01:02:04.720]  совсем уж при подвешивать никому не надо потому что обратить внимание мы могли бы сделать на
[01:02:04.720 --> 01:02:09.840]  берем эксползат у там сделать эксползат вейс и добавить к ответу вот эту сумму потом сделать
[01:02:09.840 --> 01:02:15.400]  еще раз эксползату и добавить к ответу вот эту сумму то есть никаких то есть никаких
[01:02:15.400 --> 01:02:23.300]  переподвешиваний зато 3 эксползав прочим с но прочим совсем но прочим сывер в иверте тоже
[01:02:23.300 --> 01:02:30.040]  вам эксполз потребуется поэтому тут вы как бы в этом месте никаких экономии эксползов нет ну да
[01:02:30.040 --> 01:02:35.680]  так что так и так да что там три что там три вот то есть тут по разному можно делать сумму там
[01:02:35.680 --> 01:02:49.440]  присваивание тоже можно вот но типа но вот ну типа того да а мы но нет толковые если мы разрешаем
[01:02:49.440 --> 01:02:55.920]  себе делать внутренние верты то все эти операции делаются тупым образом делаем и верт от у делаем
[01:02:55.920 --> 01:03:01.160]  эксползат в то есть получаем вот этот корневой путь на котором делаем все что нам надо и после
[01:03:01.160 --> 01:03:08.360]  этого вызываем и верт от того корня который там был раньше вот то есть как бы такой тупой
[01:03:08.360 --> 01:03:13.200]  вариант который у нас был раньше но можно пытаться от него его избегать если не очень
[01:03:13.200 --> 01:03:19.360]  хочется но в любом случае конечно там что эффективнее что нет то есть в данном случае хотя
[01:03:19.360 --> 01:03:25.200]  бы разобраться такое симпатику но как я уже говорил работает у нас все за логарифом умножить
[01:03:25.200 --> 01:03:30.960]  на сплайсы но то есть по факту то есть но на самом деле то есть все равно то есть по факту так у нас
[01:03:30.960 --> 01:03:37.440]  есть какие-то сплайсы каждый из которых это какие-то операции с деревьями но ключом на то есть
[01:03:37.440 --> 01:03:44.160]  ключом анализа у нас будет будет то что то есть мы сейчас будем считать сколько у нас сплайсов
[01:03:44.160 --> 01:03:49.040]  вот сейчас смотрите внимательно сейчас у нас будет немножко нет реально то есть наша цель сейчас
[01:03:49.040 --> 01:03:58.440]  посчитать учетное количество сплайсов они учетное время работы ну то есть как бы это не ничего
[01:03:58.440 --> 01:04:05.320]  страшного это мне то есть если мы докажем случайно что скажем учетное число сплайсов на операцию там
[01:04:05.320 --> 01:04:12.520]  скажем ну я не знаю корень корень из n да то из этого то есть это будет эквивалентно тому что мы
[01:04:12.520 --> 01:04:18.160]  докажем что если у нас были какие-то деревья которые там изначально были n вершин каждая там
[01:04:18.160 --> 01:04:23.920]  состоялась там n деревья в каждой состоялась одной вершины и мы с ними сделали кооперации то
[01:04:23.920 --> 01:04:31.120]  значит суммарное число там всех то есть там суммарно все эти там ку вот этих вот запросов были
[01:04:31.120 --> 01:04:40.120]  выполнены за ку корней из n точнее так точнее так ладно вы не так то есть как бы если у нас было
[01:04:40.120 --> 01:04:45.600]  ку запросов в каждом из этих запросов было константное количество обратите внимание эксползов
[01:04:45.600 --> 01:04:54.680]  но вот поэтому получается что о от ку корней из n сплайсов было выполнено ну а дальше все зависит
[01:04:54.680 --> 01:05:00.920]  от того как вы конкретно сплайс делали но теперь самое тупое что если делаем рандомные овл и ну или
[01:05:00.920 --> 01:05:06.560]  там я не знаю может кто-то из вас там я знаю дикотячку любит я не знаю вот то будет там ку корней из n на
[01:05:06.560 --> 01:05:14.800]  лог n но если мы докажем что сплайсов не корень из n а корень кубический из n будет ку корней кубических
[01:05:14.800 --> 01:05:26.240]  из n а если мы случайно докажем что сплайсов от единицы то будет вообще ку на вот этот логариф но
[01:05:26.240 --> 01:05:31.600]  ничего из этого нам к сожалению доказать не удастся ну где-то к сожалению но где-то к счастью да
[01:05:31.600 --> 01:05:38.480]  что корень из n тут был бы конечно неожиданностью но мы так вот но мы нацелимся на то чтобы доказать
[01:05:38.480 --> 01:05:50.720]  что учетное число сплайсов у нас логариф на операцию на операцию эксполз да то есть если у нас
[01:05:50.720 --> 01:05:55.120]  будет выполнено там ку вот на этот раз не ку вот этих операций если у нас будет ку всего именно
[01:05:55.120 --> 01:06:02.960]  эксползов то я утверждаю что сплайсов будет о от ку логан где н количество вершин участвующих в
[01:06:02.960 --> 01:06:20.600]  этом вот все то есть вот такая вот идея вот спрашивается как же мы это будем делать какой
[01:06:20.600 --> 01:06:29.760]  же мы потенциал введем так ну смотрите значит я временно значит смотрите тут внимательно сейчас
[01:06:29.760 --> 01:06:52.680]  я временно убираю вот это все хотя как бы да ну да но это избегаешь перед немножко нет сейчас
[01:06:52.680 --> 01:07:00.560]  пока все будет гораздо проще значит смотрите дальше ты так оценим что сплайсов я временно убираю
[01:07:00.560 --> 01:07:05.640]  вот эти операции хотя конечно забирай вперед скажем скажем что анализ эксполза сам по себе
[01:07:05.640 --> 01:07:10.000]  анализ вот этих вот операции не даст потому что может быть эти операции работают там помимо
[01:07:10.000 --> 01:07:16.920]  эксполза какие-то простые операции на которые там задирает потенциал на небес правда значит на
[01:07:16.920 --> 01:07:23.400]  я тут это уберу ну еще заодно вот жалко вот это стучки поставили а доску не поставили
[01:07:23.400 --> 01:07:35.440]  хотя конечно давно пора было сюда как вторую доску притащить так такая красота была ну ладно
[01:07:35.440 --> 01:07:46.960]  на самом деле на счет рить дело в том что тут важно подчеркнуть значит у нас с вами есть
[01:07:46.960 --> 01:08:07.160]  ребра значит у нас ребра бывают рыжие и и синие вот а еще а еще они бывают тяжелые
[01:08:12.160 --> 01:08:13.640]  и легкие
[01:08:17.240 --> 01:08:25.600]  так так давайте кто назови партии синие от фиолетового адекватно отличается так на камере
[01:08:25.600 --> 01:08:37.160]  нормально от них вот значит синие от фиолетового но вот то есть смотрите что такое тяжелое легкое
[01:08:37.160 --> 01:08:43.480]  ребро ну смысл ровно тот же как минимум виртуально то есть в явном виде нам конечно сложно будет
[01:08:44.220 --> 01:08:54.960]  виртуально как сзат вы можем правда поэтому мы в принципе можем то есть мы можем как бы
[01:08:54.960 --> 01:08:59.280]  иметь в виду что у каждой вершины есть какой-то потомки какие-то поддирала и им можно сказать что
[01:08:59.280 --> 01:09:07.360]  пусть сзат вы это как бы количество ее потомка считая себя любимую естественно ну тогда
[01:09:07.360 --> 01:09:12.960]  естественно вводит автоматически водится понятия тяжелых легких ребер абсолютно так же как мы
[01:09:12.960 --> 01:09:20.880]  делали это в прошлый раз, то есть напомню, что у нас ребро УВ, где у родителей является тяжелым,
[01:09:20.880 --> 01:09:30.080]  если тут у меня оказалось, что СЗОВ больше либо равно, чем 1 вторая СЗОТУ. Ну, как всегда,
[01:09:30.080 --> 01:09:36.000]  тяжелого, как всегда, у каждой вершины не более одного тяжелого ребенка. Вот, мечта, мечта.
[01:09:36.000 --> 01:09:50.960]  Значит, вершины у нас тяжелые. В прошлый раз мы уже обсуждали с вами, что в хавиллайте есть
[01:09:50.960 --> 01:09:55.800]  большой соблазн у каждой вершины объявить ровно одного тяжелого ребенка, просто отправить самое
[01:09:55.800 --> 01:10:00.360]  тяжелое под дерево. Это в принципе даже может эффективнее работать, потому что путей будет
[01:10:00.360 --> 01:10:07.120]  меньше. Но здесь мы этого делать не будем. Здесь мы прямо жестко определяем, что у нас есть тяжелое
[01:10:07.120 --> 01:10:17.120]  ребро, есть легкое ребро. Итак, ну давайте смотреть, как вы думаете. Итак, чему же будет равен наш
[01:10:17.120 --> 01:10:29.680]  потенциал? Наш будет, давайте, красивый зелененький потенциал. Значит, наш потенциал будет количество,
[01:10:29.680 --> 01:10:46.600]  ну да, логично. Ну, как вы уже догадались по маркерам, которые я взял в руки, количество
[01:10:46.600 --> 01:11:16.440]  рыжих, легких. Вот такой потенциал у нас будет. Вот, понятно, да? Почему
[01:11:16.440 --> 01:11:23.240]  я беру, вот как вы знаете, сразу расскажу мне монику, потому что я потенциал так не помню.
[01:11:23.240 --> 01:11:32.560]  Но на что я ориентируюсь? Я ориентируюсь на следующее. Я сразу всегда держу в голове,
[01:11:32.560 --> 01:11:37.080]  вот просто как запомнить, почему именно рыжих, легких, а не там, я не знаю, тяжелых синих, там,
[01:11:37.080 --> 01:11:45.040]  я не знаю, или там тяжелых рыжих, или там тяжелых легких, там вот это вот все. Да, да, да, вот это
[01:11:45.040 --> 01:11:52.760]  все, да. Так вот, я запоминаю очень просто. Я вспоминаю, как работает иверт. Потому что как у
[01:11:52.760 --> 01:12:01.240]  нас работает иверт? Он работает за один эксполс и один реверс. То есть, мне очень хочется, чтобы
[01:12:01.240 --> 01:12:11.400]  реверс, то есть вот реверс, поменял потенциал не очень сильно, сам по себе реверс. А ведь,
[01:12:11.960 --> 01:12:20.040]  заметим, реверс это серьезная операция. Она берет огромное количество рёбер и удаляет их,
[01:12:20.040 --> 01:12:26.600]  а вместо них по сути добавляет другие рёбра. Ну другие в том плане, что они по сути поменяли
[01:12:26.600 --> 01:12:33.840]  направление, но с другой стороны, заметим, что дерево, то есть у этих рёбер понятие тяжелость,
[01:12:33.840 --> 01:12:41.120]  легкость и так далее сильно поменялось, правда? Вот, поэтому очень хотелось бы,
[01:12:41.120 --> 01:12:47.040]  чтобы, то есть очень хотелось бы в потенциале, то есть если бы я в потенциале как-то использовал
[01:12:47.040 --> 01:12:52.400]  какие-нибудь рыжие тяжелые рёбра, то у меня могли бы быть проблемы. Потому что, как у меня
[01:12:52.400 --> 01:12:58.800]  поменялось количество тяжелых рёбер, я не знаю. Вот, но очень удобно мы сейчас, заметим,
[01:12:58.800 --> 01:13:05.200]  что на любом пути от вершины до корня у нас всегда не более чем логарифма лёгких рёбер.
[01:13:05.200 --> 01:13:11.040]  Ну пойте, в прошлый раз мы сталкивались уже с такой идеей, что если вы идете от вершины до корня,
[01:13:11.040 --> 01:13:19.480]  то у вас изначально СЗ1, в конце СЗН, при проходе по легкому ребру сайс возрастает в два раза,
[01:13:19.480 --> 01:13:26.400]  хотя бы. Поэтому мне как-то сразу почему-то становится комфортно на душе, потому что я вижу,
[01:13:26.400 --> 01:13:33.120]  что количество рыжих, скажем, лёгких рёбер. То есть мы понимаем, что когда вы убили этот путь,
[01:13:33.120 --> 01:13:37.600]  у вас там было не более чем логарифма лёгких рёбер, когда восстановили, у вас их стало тоже не
[01:13:37.600 --> 01:13:44.640]  более чем логарифм. То есть в худшем случае у вас изначально лёгких было ноль, стало логарифм.
[01:13:44.640 --> 01:13:51.880]  То есть потенциал увеличился не более чем логарифм. Ну ладно, не самый универсальный способ именно это
[01:13:51.880 --> 01:13:56.600]  запомнить, потому что в принципе, как легко заметить, количество тяжёлых рыжих рёбер,
[01:13:56.600 --> 01:14:09.240]  конкретно ребёрс поменял тоже не сильно. Но тем не менее. Там действительно картинка будет
[01:14:09.240 --> 01:14:16.840]  именно такая, что с ребёрсом разобрались за логарифм. Но давайте в первую очередь рассмотрим сам
[01:14:16.840 --> 01:14:31.440]  эксполз. То есть у нас цель, в общем-то, как-то сами сплайсы рассмотреть. Но хотя,
[01:14:31.440 --> 01:14:35.320]  с другой стороны, чтобы их рассмотреть, надо ещё посмотреть, кто увеличивает потенциал. Но,
[01:14:35.320 --> 01:14:39.120]  в принципе, самая жёсткая, кто увеличивает потенциал помимо самого эксполза, это ребёрс.
[01:14:39.120 --> 01:14:45.280]  Потому что, как вы уже поняли, сам по себе ребёрк, кроме эксполза, может увеличить потенциал
[01:14:45.280 --> 01:14:53.960]  на логарифм. Но, слава богу, что это именно логарифм. Кто у нас ещё может повлиять на этот потенциал?
[01:14:53.960 --> 01:15:08.640]  Ну, по сути, да. В каком месте потенциал меняется помимо собственных эксползов или уже рассмотренных
[01:15:09.600 --> 01:15:23.040]  линкокат. Но давайте думать, как у нас работает линк. Обратите внимание, он помимо эксползов
[01:15:23.040 --> 01:15:41.720]  мёржит два дерева. Важный момент, добавленное ребро тут же становится рыжим. Теперь мы заметим
[01:15:41.720 --> 01:15:47.600]  следующее, что от самого по себе мёржа на самом деле все остальные ребра не меняются от слова
[01:15:47.600 --> 01:15:55.360]  никак. И в плане лёгкость-тяжелость меняется только у ребер самого этого пути,
[01:15:55.360 --> 01:16:03.120]  которого мы мёржим. Она может поменяться сильно. Когда вы мёржите вот этот путь с вот этим путём,
[01:16:03.120 --> 01:16:15.360]  да? Нет, погодите, вот этого ребра у нас не было вообще, напоминаю. Оно только появляется.
[01:16:33.120 --> 01:16:44.720]  Да, конечно, от всех ребер, связанных непосредственно с этим путём, их на самом
[01:16:44.720 --> 01:16:53.480]  деле тяжелая лёгкость могла поменяться. Но чем приятен наш потенциал? Тем, что если ребро синее,
[01:16:53.480 --> 01:16:58.840]  то нас это не волнует. Нас волнует только, если оно рыжее. Но заметим, что для всех остальных
[01:16:58.840 --> 01:17:08.720]  рыжих ребер у нас тоже ничего не поменялось. А что произошло непосредственно в мёрже? Ну там
[01:17:08.720 --> 01:17:14.520]  как угодно. На самом деле, конечно, вот эти ребра вполне могли перестать быть лёгкими и стать тяжёлыми.
[01:17:14.520 --> 01:17:21.040]  Но на самом деле заметим, что вот у этих ребер вообще ничего не поменялось от самого мёржа,
[01:17:21.040 --> 01:17:28.000]  да? А вот у этих ребер на самом деле они могли быть лёгкими, были лёгкими и стали тяжёлыми.
[01:17:28.000 --> 01:17:34.760]  Нет, из тяжёлых лёгкие от того, что к ним что-то подвесили, они не могут. Да,
[01:17:34.760 --> 01:17:39.480]  поэтому получается, что с линком нам даже повезло. Оказывается, сам по себе мёрж,
[01:17:39.480 --> 01:17:45.880]  само все слияние этих деревьев на самом деле потенциал даже уменьшает. Ладно, может увеличить
[01:17:45.880 --> 01:17:54.080]  на один случайно, если вот это вот ребро оказалось лёгким. То есть поэтому нам фантастически повезло.
[01:17:54.080 --> 01:17:58.720]  То есть линк увеличивает потенциал не более чем на один, если прям вот очень-очень не повезёт.
[01:17:58.720 --> 01:18:15.160]  А вот кат, вот с катом в этом смысле подлянка, конечно. Хотя, ну с катом в чём подлянка? Казалось
[01:18:15.160 --> 01:18:21.840]  бы, да? Что делает кат? Кат на самом деле у нас, помните, мы реализовали кат с вами каким образом?
[01:18:21.840 --> 01:18:28.320]  Мы его реализовали так. Жил-был У, то есть мы тут сделали expose от У, то есть добились того,
[01:18:28.320 --> 01:18:40.480]  что у нас тут вершина В, то есть тут отдельно висит, и потом мы удалили вот это ребро. То есть вот это
[01:18:40.480 --> 01:18:47.440]  ребро, в чём удалили, казалось бы, когда оно синее. Казалось бы, удалили ребро, ещё и синее.
[01:18:47.760 --> 01:18:57.400]  Ничего не поменялось, идём дальше. Но нет. И тут подлянка в том, что вот тут как раз вот эти вот
[01:18:57.400 --> 01:19:02.240]  рыжие тяжёлые ребра могли стать лёгкими. И тут потенциал, то есть оказывается парадок,
[01:19:02.240 --> 01:19:09.360]  что кат как раз мог увеличить потенциал, а не линк. Да, но слава богу, он тоже это сделал не
[01:19:09.360 --> 01:19:17.160]  более чем за логарифом. То есть тут не более чем логарифом новых лёгких ребер неожиданно появилось.
[01:19:17.160 --> 01:19:42.200]  Обычно удаление уменьшает потенциал. Ну да, а у нас вот так. Поэтому лично у меня это вызывает
[01:19:42.200 --> 01:19:53.080]  ощущение парадоксальности. Хотя, в принципе, ну да. Ну почему? Ну я не знаю. Ну что такое искусственность
[01:19:53.080 --> 01:19:57.160]  этот вопрос, к сожалению, мне сложно залезть в голову там Дэниелу Слейктуру и Роберту Эндре
[01:19:57.160 --> 01:20:02.800]  Тарьяну. Кстати, авторам этого счастья. И там как бы что у них было в голове, когда они,
[01:20:02.800 --> 01:20:16.720]  собственно, хотят доказать, что у них вот ровно такое. И что? А у нас в потенциале было количество
[01:20:16.720 --> 01:20:37.800]  кучи или что? В каких у нас такой потенциал был? Фибоначчи у них количество кучи по себе не было,
[01:20:37.800 --> 01:20:44.680]  там было количество деревьев. То есть там куча, это связанный список деревьев. Вот и количество этих
[01:20:44.680 --> 01:20:51.720]  деревьев, да, было. Но это да, это есть такое, конечно. Ну ладно, нет, ну окей, нет. Если вас так не
[01:20:51.720 --> 01:20:55.280]  вызывает парадоксальность, просто хотелось подчеркнуть, что да, касталинк у нас потенциал
[01:20:55.280 --> 01:21:00.400]  практически уменьшает, точнее увеличивать не более чем на один, а вот кат может его увеличивать
[01:21:00.400 --> 01:21:08.860]  до логарифма. То есть это означает маленькую приятную вещь, что все кроме эксползов на самом
[01:21:08.860 --> 01:21:20.940]  деле увеличивает потенциал суммарно не более чем на кул и логарифм. Вот. То есть и так. То есть
[01:21:20.940 --> 01:21:28.220]  напоминаю, что у нас было ку запросов, которые порождают условно о от ку эксползов. Ну там что-то
[01:21:28.220 --> 01:21:35.940]  типа не более чем что-то типа 3 ку и так далее. А теперь давайте, ну вот, это у нас потенциал,
[01:21:35.940 --> 01:21:41.660]  но напоминаю, что этот потенциал, напоминаю, он не на время работы, это на количество сплайсов.
[01:21:41.660 --> 01:21:49.060]  Помните, да? Теперь, то есть мы оцениваем количество сплайсов. Вот. То есть мы отдельная
[01:21:49.060 --> 01:21:55.620]  песня потом будем думать, собственно, как оценивать то, как конкретно сплайс делается. Ну, значит,
[01:21:55.620 --> 01:22:07.260]  смотрите. В чем магия? Но давайте, но для этого давайте смотреть. А какие сплайсы мы вообще делаем?
[01:22:07.260 --> 01:22:19.580]  Вот какие сплайсы мы вообще теоретически можем делать? Вот. Так, давайте все-таки введем эту
[01:22:19.580 --> 01:22:27.460]  буковку. То есть давайте скажем так, у нас всего, допустим, ладно сейчас подниму, ку операций и,
[01:22:27.460 --> 01:22:37.820]  соответственно, ку штрих не превосходит там о от ку непосредственно эксползов.
[01:22:37.820 --> 01:22:58.580]  Понятно, да? Ну, про потенциал, ну вот. Так. Ну, в принципе, смотрите. Просто на самом деле можно
[01:22:58.580 --> 01:23:02.540]  заметить следующее. Я вот почему тут нарисовал заранее вот такую картинку. Потому что заметим,
[01:23:02.540 --> 01:23:10.780]  что сплайсов у нас бывают два. Вот не помню, как они там называются, но здесь они называются
[01:23:10.780 --> 01:23:20.940]  простой и сложный. Вот есть такой простой сплайс, когда выяснилось, что оказывается, чтобы покрасить
[01:23:20.940 --> 01:23:29.340]  это ребро в рыжий, мы просто его красим, картинируем пути и все. То есть такой сплайс мы назовем,
[01:23:29.340 --> 01:23:45.700]  давайте назовем его простой, а вот этот назовем сложный. Нет, простой, то есть сплайс называется
[01:23:45.700 --> 01:23:50.100]  простым, да, если для перекраски синего ребра в рыжий цвет не пришлось перекрашивать кого-то
[01:23:50.100 --> 01:23:59.860]  рыжего в синий. То есть сплайс должен перекрасить синий ребро в рыжий. Бывают ситуации, когда для
[01:23:59.860 --> 01:24:03.980]  этого нужно какое-то рыжее в синий перекрасить, бывает, что не надо. Вот когда не надо, это просто,
[01:24:03.980 --> 01:24:16.180]  а когда надо, это сложно. Ну да. Ну, естественно, я тут, конечно, не все нарисовал. Конечно же,
[01:24:16.180 --> 01:24:20.580]  у каждой такой тут вершины, тут позвать, что тут везде, конечно, там всякие синие,
[01:24:20.580 --> 01:24:27.700]  но и тут везде, в общем, там всяких синих этих, там до шиша на самом деле. Вот тут они, вот тут,
[01:24:27.700 --> 01:24:35.980]  вот тут могут висеть. То есть никто ж не сказал, что путь прямо обязательно до тупика идет. Вот.
[01:24:35.980 --> 01:24:45.100]  Ну и так далее, и так далее. Как говорится, и так дальше, и так дальше, и так дальше. Как сказал
[01:24:45.100 --> 01:24:52.660]  представитель какой-нибудь польской команды. Вот. И так. На самом деле начнем с такого
[01:24:52.660 --> 01:24:59.740]  разминочного утверждения. Так вот, смотрите. Маленького разминочного утверждения.
[01:24:59.740 --> 01:25:12.660]  И так, значит, видите, у нас там куштри всяких, ну вот, то есть у нас вот этих вот,
[01:25:12.660 --> 01:25:21.340]  значит, получается там куштри всяких эксползов. Я утверждаю на самом деле следующее. То есть
[01:25:21.340 --> 01:25:45.220]  есть такое маленькое утверждение. Вот простых сплайсов. Всего не более.
[01:25:45.220 --> 01:26:02.940]  Вот. Не более чем сколько. Я утверждаю, что не более чем куштри. Может я наврал.
[01:26:02.940 --> 01:26:09.940]  Но почему-то у меня жуткое ощущение, что их даже не от куштри, а просто куштри.
[01:26:09.940 --> 01:26:23.220]  Причем причина на самом деле достаточно банальна. Дело в том, что простой сплайс,
[01:26:23.220 --> 01:26:30.060]  он чем отличается от сложного? Он отличается тем, что он увеличивает,
[01:26:30.060 --> 01:26:37.620]  что он уменьшает число синих ребер. Обратите внимание, смотрите, как у нас, что у нас
[01:26:37.620 --> 01:26:43.380]  происходит вне эксползов. То есть вне эксползов режиссивность ребер на самом деле меняется не
[01:26:43.380 --> 01:26:52.260]  очень. Вообще, то есть, заметим, что мы, что, как бы, вот я же вроде как не наврал. Давайте вот
[01:26:52.260 --> 01:27:01.220]  внимательно проверим. Если скажу, что мы ребра, мы не занимаемся перекраской ребер вне эксползов.
[01:27:01.220 --> 01:27:06.980]  Правда? То есть у нас только эксполз, понимаете, перекраска. То есть единственное, что у нас может
[01:27:06.980 --> 01:27:12.300]  произойти, это в линк-кате, то есть в линке-кате могут появиться новые ребра и удалиться новые
[01:27:12.300 --> 01:27:22.100]  ребра. Правда? Вот. Но на самом деле, но, заметим, следующее, что когда линк добавляет новое ребро,
[01:27:22.100 --> 01:27:35.860]  оно обязательно рыжее. Правда? Вот. Ну, в кате, конечно, может быть хитрее. Ну, хотя ладно,
[01:27:35.860 --> 01:27:45.940]  наврал. В кате, конечно, мы можем сделать это ребро синим, но мы его все равно тут же удаляем.
[01:27:45.940 --> 01:27:53.660]  Поэтому, как бы, получается, извне новые синие ребра не особо часто появляются. Даже не просто
[01:27:53.660 --> 01:28:01.220]  часто, они никогда не появляются. А где же у нас они вообще могут появляться? Просто где у нас
[01:28:01.220 --> 01:28:04.980]  количество синих ребер может увеличиваться? Ведь должно же так происходить, что они должны
[01:28:04.980 --> 01:28:10.860]  увеличиваться, правда? Изначально их нет вообще. То есть, обратите внимание, у нас синих ребер, в
[01:28:10.860 --> 01:28:16.980]  принципе, нет вообще изначально, потому что у нас изначально просто Н голых вершин, которые мы как-то
[01:28:16.980 --> 01:28:22.900]  там потом линкаем друг с другом. Спрашивается, а за счет чего у нас вообще может увеличиваться,
[01:28:22.900 --> 01:28:34.580]  тогда получается количество синих ребер. Да, но где? Да, вот обратите внимание, видите, вот это
[01:28:34.740 --> 01:28:41.540]  в самом начале. Да, совершенно верно. То есть, обратите внимание, да, в самом начале у нас оказывается
[01:28:41.540 --> 01:28:48.900]  просто магическая операция. Ровно за счет этой операции у нас количество синих ребер вообще
[01:28:48.900 --> 01:28:56.340]  может увеличиваться хоть когда-либо. Потому что извне у нас количество синих ребер не
[01:28:56.340 --> 01:29:04.060]  увеличивается глобально. То есть, он делает эксполс и убивает синие ребро. Линк создает новое
[01:29:04.060 --> 01:29:10.820]  ребро в момент мержа, но это ребро рыжая. Поэтому получается только в эксползе, на самом деле,
[01:29:10.820 --> 01:29:17.340]  за счет эксполза количество синих ребер увеличивается, но увеличивается только в этом месте. Но это
[01:29:17.340 --> 01:29:22.940]  происходит не более чем один раз на каждый эксполс. После этого синие ребра только уменьшаются. То есть,
[01:29:22.940 --> 01:29:31.820]  сложный сплайс оставляет количество синих ребер тем же, а простой сплайс их уменьшает. То есть,
[01:29:31.820 --> 01:29:37.780]  тут можно ввести просто чуть другой потенциал и с помощью его доказать утверждение именно вот
[01:29:37.780 --> 01:29:42.180]  в этом месте. То есть, глобально у вас простых сплайсов получается не более чем сколько эксполсов.
[01:29:42.180 --> 01:29:47.180]  То есть, обратите внимание, видите, у меня разница есть Q операции, я имею в виду линк от вот этих
[01:29:47.180 --> 01:29:56.980]  вот запросов. Но вот Q штрих эксполсов. Вот давайте не путать обозначения. То есть,
[01:29:56.980 --> 01:30:03.700]  простых сплайсов получается не более чем Q штрих. Причем, видите, даже не от Q штриха,
[01:30:03.700 --> 01:30:25.940]  а просто Q штрих. Вот такая вот классическая идея. Какой рис? Нет, ну там, да нет. Нет,
[01:30:25.940 --> 01:30:30.180]  просто какую последнюю мысль имеется в виду там? Как бы я по идее просто сказал, что заметим,
[01:30:30.180 --> 01:30:37.540]  что у нас как бы помимо эксполза количество синих ребер не увеличивается никак. Внутри эксполза
[01:30:37.540 --> 01:30:43.020]  оно может увеличиться на один вот в этом месте, а остальное состоит либо из сложных сплайсов,
[01:30:43.020 --> 01:30:48.820]  которые оставляют количество синих ребер тем же, либо берет простой сплайс, который уменьшает
[01:30:48.820 --> 01:30:56.900]  их количество. Но заметим, что изначально у нас синих ребер ноль. Следовательно, рассмотрим
[01:30:56.900 --> 01:31:04.300]  такой другой потенциал, количество синих ребер. Нет, такие, видите, то есть, как вот интересно,
[01:31:04.300 --> 01:31:07.580]  то есть утверждение такое, что вот глобально мы сейчас не заморачиваемся, сколько там всего
[01:31:07.580 --> 01:31:12.660]  сплайсов, но говорим, что докажем, что простых сплайсов не более чем Q штрих. Доказательства.
[01:31:12.660 --> 01:31:19.460]  Нам рассмотрим потенциал, там другой потенциал, не этот, а другой, там синий, равный количеству
[01:31:19.460 --> 01:31:24.900]  синих ребер. Этот потенциал изначально ноль, и он увеличивается не более чем Q штрих раз.
[01:31:24.900 --> 01:31:33.580]  Каждый простой сплайс его уменьшает, а увеличивается он не больше чем Q штрих раз. Он
[01:31:33.580 --> 01:31:38.300]  не может уменьшиться больше, то есть, по сути, монетку кладем короче. То есть, давайте так,
[01:31:38.300 --> 01:31:44.820]  то есть, как всегда, на каждое синие ребро кладем синюю монетку, как всегда. Вот,
[01:31:44.820 --> 01:31:53.140]  интересно, в какой стране у нас синие монетки? Рыжие монетки чаще встречаются, конечно,
[01:31:53.140 --> 01:32:04.180]  хотя нет, у меня синем. Но мало, нет, у меня ассоциация жетунчик в метро, на самом деле.
[01:32:04.180 --> 01:32:18.100]  Ух ты! Не, ну да, на самом деле, да, сам бог велел нам, конечно, класть цифровые рубли
[01:32:18.100 --> 01:32:27.420]  на виртуальные ребра, конечно. Это да, вот они зачем изобретенные. Хорошо, да, ну вот,
[01:32:27.420 --> 01:32:36.220]  ну короче, хорошо, ладно, жила было синие ребро, ладно, синие ребро, это хорошо, да, ура. Вот,
[01:32:36.220 --> 01:32:43.740]  поэтому получается Q штрих очень удобно. Ну, пока это ввело нот, то есть, ну как бы заметим,
[01:32:43.740 --> 01:32:47.700]  что этот потенциал мы ввели как бы внутри доказательства, и он в общем-то выполнил свою
[01:32:47.700 --> 01:32:53.340]  функцию и исчезает. Поэтому, ну вот, то есть, просто мы показали, что простых сплайсов не более
[01:32:53.340 --> 01:33:04.100]  Q штрих. Ура. Так, ну нам же, наверное, интересно, что такое, что же делается сложными сплайсами,
[01:33:04.100 --> 01:33:18.140]  как они влияют на наш основной потенциал. Ну давайте так, итак, ну давайте значит еще
[01:33:18.140 --> 01:33:28.660]  раз запишем. Значит, давайте попишем увеличений, ну для этого там анализ теперь проводим так,
[01:33:28.660 --> 01:33:39.500]  увеличение, значит, пишем увеличение phi. Ну, во-первых, вне эксполза, что у нас будет вне эксполза?
[01:33:39.500 --> 01:33:49.620]  Так, ну мы выяснили, что в кате плюс лог, ну вот, в реверте плюс лог может быть,
[01:33:49.620 --> 01:34:01.940]  да, то есть, в реверте плюс лог, в кате плюс лог, в линке плюс один может быть, во всех остальных местах,
[01:34:01.940 --> 01:34:11.140]  но вот, но правда, но правда, в остальных местах, к сожалению, мы этот иверт начинаем вызывать
[01:34:11.140 --> 01:34:16.740]  несколько раз. В некоторых реализациях, помните, во всякие суммы и так далее, мы там называем,
[01:34:16.740 --> 01:34:26.580]  мы там делаем иверт много-много раз, поэтому, да, поэтому, да, поэтому мы, ну вот, поэтому можно
[01:34:26.580 --> 01:34:32.980]  сказать, ладно, но где-то, наверное, можно написать, что не превосходит что-то типа 3q log n, вот так,
[01:34:32.980 --> 01:34:44.620]  вот именно q обратите внимание, да, вот, то есть, наверное, трешечку можно. Хорошо, ну теперь,
[01:34:44.620 --> 01:34:51.460]  что происходит, что меняет потенциал внутри эксполса, чем приятен эксполс, эксполс приятен тем,
[01:34:51.460 --> 01:35:04.420]  что он никак не меняет тяжелолегкость ревер, он меняет их только синий рыжий, вот, вот, но теперь
[01:35:04.420 --> 01:35:21.940]  давайте смотреть, значит, как у нас потенциал. Ну, не совсем так, нет, это нам сейчас надо
[01:35:21.940 --> 01:35:27.900]  аккуратно анализировать, смотрите, сплайл тоже, смотрите, дело в том, что, ну, так,
[01:35:27.900 --> 01:35:54.100]  ну, в принципе, да, да ладно, что-то подозрительное. Нет, ну, да, нет, у меня просто было,
[01:35:54.980 --> 01:35:59.780]  но по идее кажется, что, что в принципе уже победа на самом деле, потому что сложно, что
[01:35:59.780 --> 01:36:07.420]  делает сложный сплайс, но, хотя, то есть, ну, правда, заметил тут, но, хотя нет, все-таки придется
[01:36:07.420 --> 01:36:11.060]  расписывать, потому что это сложный сплайс, по идее, может потенциал не поменять от слова вообще,
[01:36:11.060 --> 01:36:16.300]  так что-то надо внимательно, ну, давайте, ну, давайте, давайте не будем тогда забирать,
[01:36:16.300 --> 01:36:24.220]  просто аккуратно распишем, значит, вне эксполза не более чем 3 коллоген, что у нас еще есть,
[01:36:24.220 --> 01:36:33.540]  есть еще начало, там, начало эксполза, вот это вот, я вот это имею в виду,
[01:36:33.540 --> 01:36:53.140]  вот, но это суммарно не более чем q, ладно, да, ну, вот, даже q-штрих.
[01:36:53.140 --> 01:37:11.740]  Все, да, да, да, вы правы, вы правы, вы правы, вы правы, на этот раз да. Так, хорошо, начало
[01:37:11.740 --> 01:37:19.100]  эксполз такое, так, что у нас еще, так, какие у нас еще, а вот простые сплайсы,
[01:37:19.100 --> 01:37:33.980]  ну, давайте, смотрите, простые сплайсы, так, то есть каждый простой сплайс, по идее, может
[01:37:33.980 --> 01:37:41.740]  увеличить и, ну, вот, он может увеличить потенциал и на 1 вполне себе, но их, но это у нас суммарно не
[01:37:41.740 --> 01:38:01.180]  более чем q, мы только что доказали, спасибо, спасибо, спасибо, ну, да, ну, ладно, давайте так q-штрих,
[01:38:01.180 --> 01:38:22.220]  которые хорошо не превосходит, ну, да, ну, хорошо, давайте 10 напишем, хотя 10 я отбалды написал,
[01:38:22.220 --> 01:38:28.660]  наверное, если подумать, давайте, давайте так немножко повторим, это вот всегда пробежаться,
[01:38:28.660 --> 01:38:33.460]  пробежаться никогда не помешает лишний раз, давайте подумаем, там сколько,
[01:38:33.460 --> 01:38:42.740]  сколько раз мы можем вызвать эксползу в операциях, так, в линке мы вызываем, сколько эксползов,
[01:38:42.740 --> 01:38:58.460]  один, ну, в кате мы вызываем тоже один, так, нет, в иверте само по себе один, вот, дальше,
[01:38:58.460 --> 01:39:03.500]  но во всяких эдах мы начинаем делать просто несколько ивертов, получается,
[01:39:03.500 --> 01:39:14.500]  да, три, да, то есть там три, в лцшке мы вызываем три, да, ну, да, даже вообще два, ну, да, слушайте,
[01:39:14.500 --> 01:39:22.660]  откуда, ну, поздравляю, да, тройбан на месте, все нормально, все, да, о, наш тройбан, число фистеха,
[01:39:22.660 --> 01:39:38.180]  нет, нет, смотри, когда мы делаем сумм, у нас один из вариантов, это значит сделать иверт,
[01:39:38.180 --> 01:39:44.540]  то есть там, то есть надо так сделать иверт для того, чтобы там вершина устала корнем,
[01:39:44.540 --> 01:39:50.380]  потом сделать эксполз от В, сделать на этом пути хорошо, а потом сделать иверт от того корня,
[01:39:50.380 --> 01:39:57.660]  который был раньше, ну, да, но там, да, там во всех вариантов, по-моему, выплывала тройка,
[01:39:57.660 --> 01:40:09.780]  ну, окей, вроде так, можем добиться, что тройбан, да, ну, чтобы вернуть сюда, да, совершенно верно,
[01:40:09.780 --> 01:40:16.500]  так, ну, окей, это у нас все потенциально, это все увеличения потенциала, так, потенциала вне
[01:40:16.500 --> 01:40:32.140]  сложных сплайсов, нет, нет, ну, учитывая стоимость логарифм не совсем, во-первых,
[01:40:32.140 --> 01:40:38.620]  пока мы еще претендуем пока только налог квадрат, во-вторых, напоминаю, мы оцениваем количество
[01:40:38.620 --> 01:40:45.060]  сложных сплайсов, да, пока проблема в том, что мы оцениваем количество сложных сплайсов,
[01:40:45.060 --> 01:40:49.260]  а не время работы, да, подчеркиваю еще, да, это немного, ну, вот, то есть это может немножко
[01:40:49.260 --> 01:40:53.820]  рвать шаблон, поэтому я это вот несколько раз подчеркиваю, да, что как бы метод потенциала
[01:40:53.820 --> 01:40:58.340]  применим не только к времени работы, в принципе, да, но, взрослые, мы только что метод потенциала
[01:40:58.340 --> 01:41:09.100]  сюда применили же и ничего не пострадали, вот, и так пришло время разобраться со сложными сплайсами,
[01:41:09.100 --> 01:41:18.700]  так, но, на самом деле, смотрите, анализировать сложные сплайсы мы будем следующим образом,
[01:41:18.700 --> 01:41:36.300]  значит, каждый сложный сплайс, он перекрашивает одно рыжее ребро в синее и одно синее ребро в
[01:41:36.300 --> 01:41:49.260]  рыже, правда, вот, но тут возникает, но тут возникает действительно, но какие-то случаи
[01:41:49.260 --> 01:41:58.340]  возникают, я нарисую вот такую табличку, смотрите, вот у меня есть, да, то есть там как бы, да, то есть
[01:41:58.340 --> 01:42:04.460]  как бы четыре случая, что это за четыре случая, это четыре случая типа, какое, какое ребро тяжелые
[01:42:04.460 --> 01:42:09.020]  легкими мы перекрасили-то спокойно сейчас все будет, да-да-да, какое тяжелое ребро мы перекрасили
[01:42:09.020 --> 01:42:14.140]  здесь, т.к. тяжелое или легкое ребро мы перекрасили в рыжий цвет и тяжелое лег кровью,
[01:42:14.140 --> 01:42:22.580]  прикрасили в синий цвет, тогда в принципе какие у нас случаи бывают, значит, бывают случаи когда
[01:42:22.580 --> 01:42:31.560]  у нас тут ну 4 случая, да, значит там сразу пишем там тяжелое-тяжелое-тяжелое легкое, легкое- тяжелое и
[01:42:31.560 --> 01:42:42.160]  фиолетовый фиолетовый фиолетовый легкая легкая так вот это да как говорится самая приятная
[01:42:42.160 --> 01:42:50.360]  часть анализа случай когда мы перед когда у нас мы заменили когда мы там заменили тяжелое
[01:42:50.360 --> 01:42:56.120]  решение на тяжелый решение вот такого вообще не бывает потому что из вершины двух тяжелых
[01:42:56.120 --> 01:43:13.520]  детей не бывает вот убили вот вот убили как всегда как раму восьмого да вот так теперь смотрите а
[01:43:13.520 --> 01:43:25.040]  теперь предположим что мы покрасили в рыжий цвет тяжелое тяжелое ребро да вот это отказал бы
[01:43:25.200 --> 01:43:30.800]  хотя погодить вот нет вот этот случай на самом деле приятно анализировать зелененький
[01:43:30.800 --> 01:43:40.880]  конечно потому что как меняется потенциал в этом случае тяжелый легкий да строго минус один
[01:43:40.880 --> 01:43:56.480]  вот тот наоборот смотрите да смотрите тут плюс один тут 0 но смотрите какая штука ведь
[01:43:56.480 --> 01:44:01.960]  заметим что я утверждаю что вот этих вот случаев всего суммарно не более чем лога
[01:44:01.960 --> 01:44:17.120]  нет ну хорошо давайте так не более чем ку штрих лога но раз уж мы тут везде так
[01:44:17.120 --> 01:44:23.200]  суммарно рисуем давайте тут ку штрих логан рисовать да и те так и те было также что на в одном на
[01:44:23.200 --> 01:44:29.840]  одном экспозида мы перекрашиваем в рыжий цвет не более чем логарифом легких ребер
[01:44:29.840 --> 01:44:35.740]  потому что как всегда у нас на одном пути не более чем логарифом легких ребер в принципе как
[01:44:35.740 --> 01:44:46.400]  всегда то есть таким образом получается что значит тогда тогда получается что значит
[01:44:46.400 --> 01:44:56.240]  сложных значит так кстати так на всякий случай так давайте вот вот так вот нет это
[01:44:56.240 --> 01:45:00.080]  просто чтобы а то кажется что работа сложных сплайсов нас не более чем треку такого у нас
[01:45:00.080 --> 01:45:09.680]  такого счастья у нас нету это неправда вот так вот значит смотрите ну да то есть вообще
[01:45:09.680 --> 01:45:14.560]  выглядит как победа почему потому что ну дело вот что то есть у нас есть вот то есть у нас
[01:45:14.560 --> 01:45:21.840]  сложных сплайсов бывает вот таких не более чем ку штрих логан и есть какие-то оставшиеся вот эти
[01:45:21.840 --> 01:45:27.200]  тяжелые вот эти вот сплайсы которые уменьшают потенциал но мы ради этого и собственно и
[01:45:27.200 --> 01:45:33.360]  расписывали что суммарно потенциал на самом деле увеличивается не более чем на получается
[01:45:33.360 --> 01:45:48.920]  ну что-то типа 6 кулоген плюс еще треку видно да то есть отсюда следует что вот эта вот штука
[01:45:48.920 --> 01:45:57.520]  не превосходит но то есть получается что значит вот эта штука будет происходить не более чем
[01:45:57.520 --> 01:46:03.800]  получается что-то типа там может быть 7 кулоген раз ну или там 6 кулоген плюс
[01:46:03.800 --> 01:46:10.880]  треку но понятный ку оценивается сверху как 6 там не хотя нет треку как кулоген наверно не оценится
[01:46:10.880 --> 01:46:25.440]  нет ну 4 не нет ну 4 4 нет потому что у нас есть простые на треку у нас даже это ладно это
[01:46:25.800 --> 01:46:34.240]  у нас есть тут треку треку логан и тут еще треку логан так что это вот 6 плюс еще треку самое тупое
[01:46:34.240 --> 01:46:41.160]  кашлук штриху сказать что это не более чем треку логан поэтому 9 нет понятно что при хоть да да
[01:46:41.160 --> 01:46:45.960]  понятно что нам нужно просто чтобы он был хотя бы 8 для того чтобы как бы тройка оценила сверху
[01:46:45.960 --> 01:46:53.000]  логарифмом это да поэтому скорее всего так и будет но но в общем так но на самом деле эти
[01:46:53.000 --> 01:47:00.320]  разборки принципиального значения не имеют потому что у нас как бы есть уже мистическая да по
[01:47:00.320 --> 01:47:07.960]  хорошему как бы да в оригинале это бы называлось теорема 1 и теорема 2 но наши практически теорема
[01:47:07.960 --> 01:47:28.800]  2 можно сказать сложных splice splice не но вот то есть сложных splice так чего значит сложных
[01:47:28.800 --> 01:47:37.440]  splice не более чем о отку логан вот так вот там уже 7 8 9 бла бла бла
[01:47:37.440 --> 01:48:04.880]  я тоже мы ровно эту теорему в общем-то и доказали вот так вот а вот мы нет мы анализии нет ну как
[01:48:04.960 --> 01:48:15.760]  нет мы анализировали количество splice потому что но вот значит доказательства прозвучала так то
[01:48:15.760 --> 01:48:20.880]  есть доказывалось так давайте подумаем то есть то есть мы доказали что у нас есть потенциал
[01:48:20.880 --> 01:48:27.640]  который изначально был 0 и каждый но вот из сложных splice у нас всего значит что у нас делают
[01:48:27.640 --> 01:48:34.000]  сложные splice сложные splice они у нас либо вот такого вида их отку логан в принципе либо у нас
[01:48:34.000 --> 01:48:40.320]  вот конкретно вот этот splice который уменьшает потенциал а теперь рассмотрим насколько суммарно
[01:48:40.320 --> 01:48:44.640]  увеличился потенциал мы проанализировали там по моему просто все нашу возможную реализацию и
[01:48:44.640 --> 01:48:55.360]  убедились что там отку логан раз ну может по факту да ну вот эти ладно простые splice тоже есть поэтому
[01:48:55.360 --> 01:49:00.360]  тут надо аккуратненько но тут везде надо аккуратненько потому что тут как бы вот везде
[01:49:00.360 --> 01:49:05.040]  небезопасно то есть как всегда эти если и хочется продать что-то не лог квадрата лог мы должны
[01:49:05.040 --> 01:49:10.280]  вернуть то есть тут нам нужно просто максимальная аккуратность то есть когда-то я был вообще
[01:49:10.280 --> 01:49:16.000]  настолько испуганный что я тут на самом деле писал прям полную реализацию почти в чем начинаю
[01:49:16.000 --> 01:49:21.600]  просто кстати вообще в этом смысле очень интересно даже написать там почитать авторов потому
[01:49:21.600 --> 01:49:27.640]  что авторы на самом деле начали описание спа этой структуры данных не так вот в оригинальной
[01:49:27.640 --> 01:49:32.600]  статье на читатес там начиналось все интересно то есть там говорилось так а давай вот то есть
[01:49:32.600 --> 01:49:36.560]  там так предлагал а давайте предположим что у нас каждый момент времени все деревья бамбуки
[01:49:36.560 --> 01:49:45.880]  да так они говорят да пишем но я не помню что они там предлагали помните кстати на тот момент
[01:49:45.880 --> 01:49:52.000]  помните как-то еще не изобрели кстати поэтому приходилось страдать там с этим интересно какое
[01:49:52.000 --> 01:49:59.000]  дерево они на сплит мёкш тогда подсовывали а ну какой-то ладно наверное у них было какой-то
[01:49:59.000 --> 01:50:04.600]  умный дерево вот хотя хороший вопрос дикарта чая не изобрели и с плей не изобрели что там
[01:50:04.600 --> 01:50:14.720]  могло быть то вообще сплит мёртшего в эля но они там может и придумали но я же говорю статья
[01:50:14.720 --> 01:50:20.240]  сплея от нирже пришла через два года то есть там по-моему что-то типа вот там да я не помню
[01:50:20.240 --> 01:50:25.920]  там кто-то я пошлёт сказал что там линкат это 84 а сплей 86 но я могу ошибаться может может 82
[01:50:25.920 --> 01:50:33.280]  84 там или там что-то в этом роде вот но вот но не стоит то есть они там дощадочным с этого
[01:50:33.280 --> 01:50:38.760]  потом вот будем это модифицировать да это так оригинально поэтому с этого исчезнение всегда
[01:50:38.760 --> 01:50:42.680]  на самом деле как бы статьи тарьяна это обычно статьи которые в качестве литературы советовать
[01:50:42.680 --> 01:50:48.760]  можно то есть там красиво все написано там минус только один по-английски но как бы
[01:50:48.760 --> 01:50:55.800]  обычно для программистов это минусом быть не должно и так но что же у нас получилось но по
[01:50:55.800 --> 01:51:00.440]  факту смотрите то есть мы интересно да мы тут теперь доказали мистические теоремы о том что
[01:51:00.440 --> 01:51:08.000]  простых сплайсов там всего не более чем линия а сложных сплайсов у нас не более чем кулоген но
[01:51:08.000 --> 01:51:15.160]  отсюда следует маленькая но вот но в принципе отсюда раз у нас но заметим что так как у нас
[01:51:15.160 --> 01:51:24.240]  эксполса состоят только и фактически из простых сложных сплайсов и вот этого вот то в принципе мы
[01:51:24.240 --> 01:51:30.640]  уже можем сделать вывод что если бы то подсунем любое там где любой дикартач любой овл который
[01:51:30.640 --> 01:51:36.560]  умеет за логарифом делать сплит и мерч то тогда мы уже можем заключить что все операции делаются
[01:51:36.560 --> 01:51:46.080]  за лог квадрат с рейтинг так сказать ну в среднем плане амортизации естественно то есть на этот
[01:51:46.080 --> 01:51:50.400]  раз мы применяем даже самый тупой вот первый метод да то есть мы говорим что у нас там учетная
[01:51:50.400 --> 01:51:55.600]  стоимость лог квадрат в том плане что заку операции вы как бы всех там кооперации вы выполните
[01:51:55.600 --> 01:52:08.360]  видимо заку лог квадрат понятно да а он появляется из-за того что вы как одно смотрите ну потому
[01:52:08.360 --> 01:52:14.920]  что в данном случае потому что дело в том что каждый сплайс вы делаете за логарифом потому что
[01:52:14.920 --> 01:52:20.280]  каждый сплайс это сплит там то есть это сплит и мержи каких-то деревьев более того вы еще
[01:52:20.280 --> 01:52:25.160]  делаете кучу этих лишних логарифов еще когда-то но их уже их правда немного потому что
[01:52:25.160 --> 01:52:33.240]  сплитов и мержей вне экспоза вы делаете там ну там не более чем вот единицы на запрос вот
[01:52:33.240 --> 01:52:40.240]  поэтому они дают логарифм но суммарно у нас пока лог квадрат но тем не менее ресурс для оптимизации
[01:52:40.240 --> 01:52:46.200]  откровенно есть потому что в том плане что как бы утверждение такое что то есть я утверждаю
[01:52:46.200 --> 01:52:55.840]  что можно сказать что мы на каждый запрос тратим время от логарифма плюс экспоз потому что вне
[01:52:55.840 --> 01:53:03.040]  экспоза мы работаем мы делаем какие-то операции которые работают за логарифом правда или нет
[01:53:03.040 --> 01:53:10.560]  нету правда давайте давайте еще раз переберем да что делает линк линк вне экспоза это просто
[01:53:10.560 --> 01:53:22.160]  мерч на урте ревер кат вне экспоза это вообще ничего не это не сплит обратить внимание мы
[01:53:22.160 --> 01:53:28.520]  праве давайте еще раз помним до правильным ка то есть правильным экспозом мы добились того
[01:53:28.520 --> 01:53:34.320]  что удаляемое ребро стало сидим поэтому даже сплита нету ну то есть он то есть мы его запихнули
[01:53:34.320 --> 01:53:44.560]  экспоз очень просто но мы как бы шутка где находится синее ребро оно находится в каком-то
[01:53:44.560 --> 01:53:49.360]  рыжем дереве в каком-то рыжем дереве где-то в корне этого дерева хранится информация что на
[01:53:49.360 --> 01:53:54.400]  самом деле оно соединено синим ребром с чем-то вышим и все мы просто идем в это рыжее дерево
[01:53:54.400 --> 01:54:05.280]  которое получилось и просто пишем шо а теперь где-то родителя вот да вот такой вот неожиданный
[01:54:05.280 --> 01:54:12.200]  местицизм да но кстати обратите внимание это тоже требует логарифа потому что вам придется это
[01:54:12.200 --> 01:54:18.640]  то есть по вершине найти в какой найти корень дерева в котором она лежит это важно но как бы
[01:54:18.640 --> 01:54:23.120]  обычно в любом адекватном дереве делается за логариф другой вопрос насколько адекватным
[01:54:23.120 --> 01:54:29.000]  способом скажем сплэй дереве как бы то есть сплэй дереве у нас нет операции вершина в скажи
[01:54:29.000 --> 01:54:36.080]  кто у тебя корень есть операция вершина в а пойди-ка стань корнем вот в какой-то в эльке там все
[01:54:36.080 --> 01:54:41.480]  адекватно часто пойди по родителям возрадуйся или там если вы там захотите сюда писать красно-черное
[01:54:41.480 --> 01:54:47.400]  дерево не знаю зачем вам это понадобится конечно но вот но мало ли то то же самое то есть там но
[01:54:47.400 --> 01:54:55.280]  там фиксирую бина фиксируем логарифом хорошо так но вот но теперь вот мистико то есть как видим
[01:54:55.280 --> 01:54:59.360]  что на самом деле от самого дерева ничего не зависит если мы с деревом все адекватные операции
[01:54:59.360 --> 01:55:05.640]  делаем за логарифом в толиемном смысле то мы получаем лог квадрат ноленка если там придется
[01:55:05.640 --> 01:55:10.360]  это найти так хорошо линк как а реверс ну реверс сам по себе это вообще за вот единицы делается да
[01:55:10.360 --> 01:55:18.640]  да внезапно да потому что это отложенные операции которые там проталкиваются и на симпатику не влияют
[01:55:18.640 --> 01:55:25.360]  что там еще есть но все остальное понятно все остальное это комбинация линков катов там и вертов
[01:55:25.360 --> 01:55:31.880]  и там каких-то простых операций так что не уже ничего интересного не вот но сами но вот но вот
[01:55:31.880 --> 01:55:36.120]  это в ней то есть в ней эксползов то есть как видим мы там тратим не более чем там одно действие
[01:55:36.120 --> 01:55:43.040]  там один какой-то сплетмерш что-нибудь вот но тем не менее теперь есть а теперь мистика почему-то
[01:55:43.040 --> 01:55:48.880]  оказывается что если вы сунете сюда дикарть очку или овл то будет лог квадрат а если сунете сплей
[01:55:48.880 --> 01:56:01.640]  то почему-то будет логариф остался только выяснить почему но это видимо нам придется
[01:56:02.640 --> 01:56:13.200]  и так внимание вопроса стал столько посмотреть на это все и понять откуда но скажу спрашивается
[01:56:13.200 --> 01:56:24.480]  откуда же сплей деревья вместо лог квадрата берется логариф но на самом деле просто из
[01:56:24.480 --> 01:56:30.400]  предыдущих из лекции по сплею из предыдущего занятия плавно на самом деле вытекает откуда
[01:56:30.400 --> 01:56:39.880]  потому что мы с вами специально заморочились и доказали про сплей дерева какой-то мести там
[01:56:39.880 --> 01:56:45.600]  какой-то мистический факт на тему того за сколько там все операции работают точнее за сколько
[01:56:45.600 --> 01:56:57.120]  работает у него сплей ну-ка давайте напомните ко мне за сколько работает сплей у сплей дерева
[01:56:57.120 --> 01:57:11.360]  но от логарифмов чего
[01:57:11.360 --> 01:57:25.600]  но вот да но на самом деле так давайте вспомним что сплей деревья у нас но вот да то есть у нас
[01:57:25.600 --> 01:57:31.120]  тут в качестве рыжие лошадки действительно давайте скажем что есть у нас то есть действительно
[01:57:31.120 --> 01:57:42.360]  сплей от вершины в у нас работал за асимптотику не более чем значит там что-то типа единица плюс
[01:57:42.360 --> 01:57:54.520]  три логарифма двоичных чего но не совсем цз ну можно сказать так можно сказать и так но мы
[01:57:54.520 --> 01:58:01.360]  доказали более серьезный факт мы сказали следующее мы сказали что у каждой вершины есть какой-то
[01:58:01.360 --> 01:58:13.320]  вес желательно не меньше единицы дай да вот так что то есть поэтому поэтому давайте напишем так
[01:58:13.320 --> 01:58:25.440]  логарифм можно в скобочках написать так логарифм сз взвешенный от в после минус логарифм двоичный
[01:58:25.440 --> 01:58:37.600]  сзв от в до пассуя но вот то есть по сути обнаружилось так что то есть мы говорили так что есть такая вещь
[01:58:38.600 --> 01:58:45.720]  что такое сзв это сумма весов всех вершин в поддереве но мы помним что изначально у вершины
[01:58:45.720 --> 01:58:51.000]  в было какое-то поддерево а потом в конце вершины в стало корнем это дерево поэтому
[01:58:51.000 --> 01:58:59.200]  сзв после по сути сумма весов просто всего дерева вот да мы с вами доказали что сплей работает
[01:58:59.200 --> 01:59:06.960]  вот за столько из этого сделали вывод что там все операции работают как-то адекватно вот правда
[01:59:06.960 --> 01:59:11.120]  у нас конечно была маленькая поднот правда она сейчас будет такая маленькая может быть это
[01:59:11.120 --> 01:59:16.520]  психолог больше психологическая правда подляночка дело в том что сейчас у нас веса будут изменяться
[01:59:16.520 --> 01:59:25.600]  вот но так как они будут изменяться поэтому придется более точные какой-то анализ делать
[01:59:25.600 --> 01:59:30.840]  мы так вот это это у нас операция учетная но давайте вспомним а за счет какого потенциала
[01:59:30.840 --> 01:59:40.920]  какой у нас сплей потенциал да то есть действительно помните что у нас потенциал
[01:59:40.920 --> 01:59:51.080]  сплея вот давайте фиг сплей это сумма просто по всем в просто в структуре данных значит пишем
[01:59:51.080 --> 02:00:11.240]  логарифом двоичный сзв да у нас был вот такой потенциал вот ну вот то есть вот такой ну теперь
[02:00:11.240 --> 02:00:16.920]  пришло время узнать но теперь вот остается только вопрос какие то теперь нам просто все что
[02:00:17.520 --> 02:00:28.080]  это правильно повесить веса на вершину как же мы это сделаем но а вот этот вопрос мы уже ответили
[02:00:28.080 --> 02:00:42.240]  неделю назад сзв от в будет равно 1 плюс да я не спрашиваю вас что я напишу дальше я спрошу
[02:00:42.240 --> 02:00:53.440]  какой маркер я дальше возьму нет кайф синий конечно я возьму синий маркер а синий маркер
[02:00:53.440 --> 02:01:11.840]  я возьму потому что я переберу до всех моих синих детей и для каждого синего ребенка
[02:01:12.240 --> 02:01:23.840]  я добавлю к ответу сзв помните у нас уже был такой потенциал хэйвилайти даже не потенциал а вес
[02:01:23.840 --> 02:01:31.280]  правда мы там не было потенциалов потому что да как бы хэйвилайта как бы хэйвилайта отличается
[02:01:31.280 --> 02:01:37.560]  от линката тем же чем дерево отрезков отличается от сплея да чем оно отличается тем что там все
[02:01:38.560 --> 02:01:44.960]  честные их но но при этом хэйвилайты дерево отрезков это фиксированная железобетонная структура данных
[02:01:44.960 --> 02:01:52.840]  то есть как бы сплей он как бы такой хитрый вот такой вот он как бы подстраивается аккуратно то
[02:01:52.840 --> 02:01:58.680]  есть как бы он он может так изменять структуру да то есть изменять то есть подстраивать себя
[02:01:58.680 --> 02:02:03.800]  под обстоятельствами получается в итоге хорошо то есть как бы дерево отрезков в этом смысле берет
[02:02:03.800 --> 02:02:08.520]  железобетонную структуру оно как бы не гибкое то есть как только вы там скажете что ой а вставь
[02:02:08.520 --> 02:02:16.960]  пожалуйста середину элемент тут его полномочия все вот а но вот но вот а здесь зато нет но это
[02:02:16.960 --> 02:02:27.400]  вот за счет вот этого вот так что вот такой сзв я утверждаю что относительно этого потенциала
[02:02:27.400 --> 02:02:48.120]  у нас все должно быть хорошо сзв здесь да сзв да это именно честные это честное размер под
[02:02:48.120 --> 02:02:56.720]  дерево да то считая и себя и синие детей рыжих детей все считать то есть ну как всегда то есть
[02:02:56.720 --> 02:03:01.280]  то есть как бы когда мы рассматриваем рыжий путь мы как бы вывешиваем в гирлянду и на каждой
[02:03:01.280 --> 02:03:11.640]  вершине смотрим что у нас тут еще висит ну как всегда себя любимую считаем вот так что вот такой
[02:03:11.640 --> 02:03:20.800]  вот сзв и теперь давайте ну вот то есть вот так вот работает у нас действительно условный
[02:03:20.800 --> 02:03:50.160]  сплей сейчас еще раз не понял вот мы его но вот мы ее определили нет это не сумма
[02:03:50.160 --> 02:04:00.440]  весов по дире да в нашем пределе предыдущем это сумма весов сумма да вот по всем в потомках
[02:04:00.440 --> 02:04:19.960]  правильно пока я где подвох у нас какая-то сумма теперь она вот чему-то ну рада ну заметим
[02:04:19.960 --> 02:04:24.400]  что мы как бы вес каждой вершины в каждый момент времени можем определять вот таким образом
[02:04:25.400 --> 02:04:39.280]  через нет я нет нет подожди я тут перебираю не потомков я перебираю ребенков все
[02:04:39.280 --> 02:04:47.840]  хорошо ну у нас с левой написано сумма весов по потомкам а справа какое-то число
[02:04:47.840 --> 02:04:57.680]  а вот и ладно хорошо хорошо давай уберем две буквы да все да да все да понял о чем я
[02:04:57.680 --> 02:05:03.920]  читаю хорошо хорошо да спасибо на самом деле дать степень глюк на лицо хорошо давай даблы да
[02:05:03.920 --> 02:05:13.680]  все это был вес вот хорошо ввели вес и теперь у нас все но и теперь давайте думать как мы
[02:05:13.680 --> 02:05:23.760]  действительно влияем на потенциал ну для этого нам нужно сделать вот что то что мы хотим мы по
[02:05:23.760 --> 02:05:28.680]  сути как всегда но раз уж мы начали в такой парадигме мы наверное хотим этим и закончить
[02:05:28.680 --> 02:05:35.240]  мы хотим доказать что все эксползы но акцент но на самом деле мы хотим что все операции суммарно
[02:05:35.240 --> 02:05:49.400]  работают за откулогом правда понимаете да вот но для этого водится у нас вот такой потенциал там
[02:05:49.400 --> 02:05:56.880]  но вот то есть водят то есть там соответственно водится какой-то потенциал но вот ну так что
[02:05:56.880 --> 02:06:02.080]  давайте рассмотрим за сколько же у нас относительно этого потенциала работает эксполз
[02:06:02.080 --> 02:06:10.600]  подпрашивается дадут но за сколько он работает относительно этого потенциала
[02:06:10.600 --> 02:06:22.120]  нет это нелегкие это синие да напоминаю ребра у нас будет рыжими и синими а бывают
[02:06:22.120 --> 02:06:31.360]  тяжелыми легкими и это не всегда коррелирует вот так же именно синие да как бы отличайте
[02:06:31.360 --> 02:06:36.400]  синие ребра от легких ребер да ну да жалко немножко получилось что мы неделю назад
[02:06:36.400 --> 02:06:43.240]  конечно легкие ребра обозначали синими но что делать вот сегодня у нас легкие
[02:06:43.240 --> 02:06:52.320]  ребра фиолетовая да вот ну можно и так сказать да так вот хорошо и так но давайте смотреть
[02:06:52.320 --> 02:06:59.080]  значит смотрите относительно этого начать теперь давайте рассмотрим тот же самый эксполз вот
[02:06:59.080 --> 02:07:06.520]  просто тут же самую схему так ну и давайте думать как у нас вообще меняется потенциал при
[02:07:06.520 --> 02:07:12.160]  последовая при эксползе но заметим что вот этот вот конкретный сплит он в общем-то потенциал
[02:07:12.160 --> 02:07:20.840]  даже уменьшает правда вообще кстати давай вот но вот а вот все а вот тут уже поинтереснее
[02:07:20.840 --> 02:07:27.800]  конечно тут потенциал может увеличиваться впрочем давайте посмотрим но хотя тут самое страшное
[02:07:28.200 --> 02:07:33.800]  что тут даже но вот что тут иногда что хотя но хотя самое страшное что здесь действительно вот
[02:07:33.800 --> 02:07:40.520]  в этой операции давайте посмотрим что заметим что тут веса могли увеличиться да заметим маленькую
[02:07:40.520 --> 02:07:48.160]  смотрите заметим маленькую приятную вещь когда вы сделали здесь плит у этой вершины увеличился вес
[02:07:48.160 --> 02:07:58.240]  но при этом маленькая приятная вещь я утверждаю что если мы рассмотрим корень вот этого оставшегося
[02:07:58.240 --> 02:08:09.120]  дерева я утверждаю что сзв у него не поменялось вот давайте поймем эту важную идею что такое
[02:08:09.120 --> 02:08:17.240]  сзв это мы говорим так то есть практически каждый то есть каждое дерево олицетворяет вот такую вот
[02:08:17.240 --> 02:08:24.680]  цепочку правда то есть как бы как бы как рыжий путь вот это вот такая цепочка на каждый из на
[02:08:24.680 --> 02:08:34.100]  каждой вершине которого висит какое-то дерево да где-то больше где-то меньше да вот но хранимое
[02:08:34.100 --> 02:08:41.180]  это не так мы его храним в виде какого-то двоичного дерева польско вот давайте вот так
[02:08:41.180 --> 02:08:49.760]  нарисую, чтобы не было идеального дерева. Но как бы суть та же, допустим, если я назову
[02:08:49.760 --> 02:08:56.600]  эти деревья там Альфа3, там Альфа4, Альфа5, A6, Альфа7, то тут у нас тоже получится,
[02:08:57.320 --> 02:09:03.680]  получается Альфа1, тут получится Альфа,2, здесь получится Альфа3 и обратите внимание,
[02:09:03.680 --> 02:09:10.000]  просто плохо нарисовал. Тут получается Альфа4, Альфа5, тут получается Альфа6,
[02:09:10.000 --> 02:09:17.440]  то получается альфа-7 да понятно вот то есть в реальной то есть сплей дерева устроена как-то так
[02:09:17.440 --> 02:09:23.440]  но на каждой вершине висит какие-то гирки и что такое сзв и сзв это получается что такое
[02:09:23.440 --> 02:09:30.080]  гирка висящая на под дереве на сплей под дереве то есть в переводе говоря то есть на этой вершине
[02:09:30.080 --> 02:09:37.800]  по сути вот сумма всех этих гирек но если я возьму корень этого сплей дерева то на нем
[02:09:37.800 --> 02:09:44.760]  бесит получается все то есть сзв от корня сплей дерева совпадает с чем
[02:09:44.760 --> 02:09:54.520]  да хочется сказать что сзв от этой вершины но это неправда да будет парадоксально но сзв от
[02:09:54.520 --> 02:10:06.800]  этой вершины да это покажется не тривиально пока вы не вспомните что как бы когда вы рассматриваете
[02:10:06.800 --> 02:10:11.000]  путь что вы понимаете что как бы путь то висит на начальной вершине то есть вот на этой первой то
[02:10:11.000 --> 02:10:15.400]  есть в реальном этом вагне видите как все устроено то есть как бы вот у вас есть
[02:10:15.400 --> 02:10:20.200]  вот этот вот ну допустим вот этот вот путь и вот на этой вершине он как бы целиком висит
[02:10:20.200 --> 02:10:30.600]  вот не самая тривиальная идея но как бы если въехать то в принципе все нормально вот
[02:10:30.600 --> 02:10:44.920]  ну вот ну в смысле нет в смысле в реальности cz одно а czv другое ну просто да просто cz что
[02:10:44.920 --> 02:11:13.000]  cz здесь что czv тут идентичен ну вот это вот да ну дети у них синие
[02:11:13.000 --> 02:11:17.960]  правда заметим что это я так нарисовал в принципе у него вполне там левый ребенок с плейдерами у
[02:11:17.960 --> 02:11:24.240]  него вполне мог бы и быть и czv не обязана быть только чисто этой идеей вот почему бы нет вот
[02:11:24.240 --> 02:11:30.800]  но фишечка тут заключается в другом то есть на самом деле то есть да то есть но вот
[02:11:30.800 --> 02:11:38.600]  то есть в принципе да тут она тут на самом деле конечно да может появиться действительно
[02:11:38.960 --> 02:11:46.480]  подлянночка даkr ну вот подлянночка будет заключаться в том что конечно там действительно
[02:11:46.480 --> 02:11:54.880]  но вот конкретный вес но то есть оказывается что действительно то есть конкретный вес то есть
[02:11:54.880 --> 02:12:00.560]  конкретный вес как этой вершины получается поменялся вот у вершины у вот когда вот
[02:12:00.560 --> 02:12:07.200]  тут от плите для конкретный вес поменялся а именно даже увеличился понимаете да но как это
[02:12:07.200 --> 02:12:15.160]  повлияло на созыжки оказалось бы созыва тоже поменялась как у вершины у так и у всех остальных
[02:12:15.160 --> 02:12:25.160]  вершин правда то есть тогда не у всех остальных а у всех получается получается там предков
[02:12:25.160 --> 02:12:32.640]  сплейдере но правда весь кайта просто сколько может быть предков у вершин там то есть в
[02:12:32.640 --> 02:12:36.240]  результате этого сплета сколько может быть предков у вершины у
[02:12:36.240 --> 02:13:02.720]  нет подали по предков сплейдере нет заметим что да потому что заметим следующее что вот с
[02:13:02.720 --> 02:13:07.480]  точки зрения вот этого рыжего пути ничего не поменялось то есть заметим да что от того
[02:13:07.480 --> 02:13:11.000]  что мы тут как-то поменяли вот это я вот вот скажем у этого дерева ничего не поменялось
[02:13:11.000 --> 02:13:26.840]  потому что нем гифки как висели так и висят да да да вот это подлянка да что это в нормальном
[02:13:27.280 --> 02:13:41.960]  да да а сзв это всплэйдере да да осторожно да сзв всплэйдере сзв в линка в нормальном
[02:13:41.960 --> 02:13:51.680]  дереве вот но теперь давайте вот поймем еще раз да но заметим что как я уже сказал если мы
[02:13:51.680 --> 02:13:58.240]  перекрасили какое-то ребро то я то есть как бы на ну на дабл ее оно влияет только у самой
[02:13:58.240 --> 02:14:08.160]  вершины очевидно да а уса а сзв она влияет может повлиять только на веса вот этих вот да ну типа
[02:14:08.160 --> 02:14:15.000]  предков сплэйдере очевидно да но это да правда для этого желательно еще и добиться чтобы вот
[02:14:15.000 --> 02:14:22.000]  эта вершина была как бы ребенком в этом плане в каком-то смысле да или чем-то еще вот но самое
[02:14:22.000 --> 02:14:26.160]  важное что ладно в любом случае как бы тут это не было переустроено заметим что вот скажем на
[02:14:26.160 --> 02:14:30.960]  вот этот путь или вот этот путь то есть у этих вершин веса не поменяются от слова никак и сзв
[02:14:30.960 --> 02:14:37.120]  не поменяются от слова никак потому что как бы как бы то что внутри гирек мы там как-то там
[02:14:37.120 --> 02:14:41.880]  кого-то стали считать синим и рыжим как бы нас не волнует потому что как бы нас в данном случае
[02:14:41.880 --> 02:14:47.120]  на гирку влияет только то что как бы главное шоу вы меня на синим ребре висите а кто вы там у
[02:14:47.120 --> 02:14:55.440]  себя внутри это ваше дело но правда теперь заметим теперь возникает вопрос сколько убивает предков
[02:14:55.440 --> 02:15:07.880]  сплэйдере так вот мистический ответ не сколько да смотрите давайте вспомним а как делается сплит
[02:15:07.880 --> 02:15:20.720]  сплэйдере да вот конкретно здесь напрашивается классическая штука мы вызываем сплэйд у то есть
[02:15:20.720 --> 02:15:26.000]  у объявляется корнем вот этого дерева и после этого сплит будет заключаться в том что мы просто
[02:15:26.000 --> 02:15:35.840]  отпиливаем правое поддельно неплохо тогда то есть там жила было дерево потом мы объявили что у
[02:15:35.840 --> 02:15:42.640]  нас тут у корень и значит мы просто отпилили правое поддельно то есть заметим что это привело
[02:15:42.640 --> 02:15:52.760]  нас к тому что на самом деле у вершины у изменился в от нее и создает вы от нее а не ассоции этого
[02:15:52.760 --> 02:16:01.800]  не изменился от слова никак равда кстати у всех вот этих решений не поменялся никак а потому
[02:16:01.800 --> 02:16:07.640]  что как мы уже сколи у корня сплэйдер его сзв это как бы сумма всех вершин просто которые на
[02:16:07.640 --> 02:16:19.960]  этом пути вообще висят нет нет сзв а туни вот тот и фишка сзв а ту не поменялась а конкретно
[02:16:19.960 --> 02:16:24.600]  от этой операции ну понятно что от самого сплея конечно нет а само сплей естественно все
[02:16:24.600 --> 02:16:31.200]  сзшка поменялись это да но правда мы знаем что они там поменялись как-то адекватно то есть они
[02:16:31.200 --> 02:16:38.880]  то есть там но то есть они поменяют они поменялись так что учетная стоимость оказалась вот такая да вот
[02:16:38.880 --> 02:16:48.880]  то есть я не понял от они вот поменять ну нет ну потому что нет фишков но вот но от самого
[02:16:48.880 --> 02:16:55.760]  себе отрезания отражаешь и потенциал не поменялся от слова никак просто и фито ты прикол это магическая
[02:16:55.760 --> 02:17:04.840]  идея но да вес вершины поменялся вот от самого себе отпиливание вес поменялся а сзв а сзв вес
[02:17:04.840 --> 02:17:20.000]  никак не поменялся ну сзв это говорит так берем вершину в берем что на ней висит под дереве да
[02:17:20.000 --> 02:17:27.080]  под дереве сплея и в этом под дереве сплея мы берем все веса вершин вот которые там немцы
[02:17:27.080 --> 02:17:37.480]  и суммируем эти веса вот то есть такая вот идея ну да с одной стороны два но за другой
[02:17:37.480 --> 02:17:44.640]  стороны давайте подумаем чему равен сейчас сзв от у да то есть это сумма всех гирек синих которые
[02:17:44.640 --> 02:17:53.400]  висят на всех рыжих вершинок да понятно да когда мы объявили вот это ребро неожиданно синим ладно это
[02:17:53.400 --> 02:18:00.000]  это ладно не надо так рисовать конечно да ладно когда мы тут что-то отпилили то есть по сути это
[02:18:00.000 --> 02:18:06.400]  означает что мы вот эту вот часть пути да то есть это как будто желоба вот это вот вершина допустим
[02:18:07.400 --> 02:18:15.280]  и мы неожиданно вот это ребро объявили синим но тогда получается что то есть мы как бы удалили
[02:18:15.280 --> 02:18:23.680]  это под дерево но добавили одну вот эту гирку а на этой гирке как раз висят просто абсолютно те же
[02:18:23.680 --> 02:18:28.880]  вершины со своими под деревьями то есть вот абсолютно те же вершины вот это вот то есть вот
[02:18:28.880 --> 02:18:42.520]  это вот суммарный размер ну типа того ну нет ну как перекинули скажем так да вес немножко
[02:18:42.520 --> 02:19:01.640]  перераспределился кто-то и приколся создание czw не поменялась никак
[02:19:12.840 --> 02:19:18.640]  да вот от самого этого пиливания вот пытаемся додогащего создавать у от этого самого по себе
[02:19:18.640 --> 02:19:26.080]  этого отпиливания не поменялось никак потому что что-то пошла раньше мы как бы для создавая
[02:19:26.080 --> 02:19:32.400]  туп суммировали все вот эти вот вершинки до сумми рвли сумму гирек от них да теперь мы суммируем
[02:19:32.400 --> 02:19:38.000]  вот эту гирку то есть вот сумму вот этих гирек и собственно гирку от самой вершины у но что
[02:19:38.000 --> 02:19:47.200]  такое гирь как У теперь? Это ну те под деревья, которые были раньше, плюс вот это дерево. А что
[02:19:47.200 --> 02:19:58.760]  такое ССЗ от этого дерева? Прям буквально в точность. То есть такая вот, да, да, тут вот
[02:19:58.760 --> 02:20:03.680]  действительно магия, да, вот действительно тут конечно вот магия, да, но очень красивая магия.
[02:20:03.680 --> 02:20:16.480]  Чем она нас это приводит? А приводит нас, ну вот, то есть это вообще, то есть на самом
[02:20:16.480 --> 02:20:22.160]  деле для нас это конечно очень приятно, что сам по себе, то есть и так сам по себе этот отпил он
[02:20:22.160 --> 02:20:33.960]  выполнил за единицу реального времени и не поменял потенциал. Приятно, да? Теперь и более того,
[02:20:33.960 --> 02:20:47.360]  он ушечку сделал корнем, что приятно, да? Давайте скажем, что это У не просто У, а У0. Ну и как вы
[02:20:47.360 --> 02:20:55.480]  уже дорадуетесь? Давайте, значит, ребра, по которым я буду делать сплайс, это у меня будет В1 У1,
[02:20:55.480 --> 02:21:05.760]  тут будет У2 В2, тут будет там У3 В3, ну короче и так далее. Ну будет у меня там допустим К
[02:21:05.760 --> 02:21:16.000]  ребр. Так ладно, на всякий случай, вот это вот все можно уже стирать? А то да, то есть нет,
[02:21:16.000 --> 02:21:19.440]  может это было приятное свойство, что когда мы работаем с экспозом, у меня тут прям вот четко
[02:21:19.440 --> 02:21:25.920]  дописано его определение. Вот, я думаю уже, да, то есть думаю, как бы уже, как бы шел третий час
[02:21:25.920 --> 02:21:35.600]  работы с ним, так что, наверное, уже интуитивно поняли, что это такое вообще. Так, да, как всегда.
[02:21:35.600 --> 02:22:01.280]  Ну потенциал, ну вообще, ну как бы тут имеется в виду, что мы суммируем по всем вершинам, то есть
[02:22:01.280 --> 02:22:06.520]  вершины, они как бы не в одном сплэй дереве находятся, а в нескольких. И конечно же, да, ну как и ранее,
[02:22:06.520 --> 02:22:11.040]  на самом деле, потому что когда мы исследовали само сплэй дерево, мы подсумевали, что у нас на
[02:22:11.040 --> 02:22:14.720]  самом деле есть N вершин, которые распределены по нескольким деревьям, которые мы иногда сплитим
[02:22:14.720 --> 02:22:27.840]  и мерчим. И вот, и потенциал был общим, то есть была вот общая сумма. Ну вот, ну давайте так,
[02:22:27.840 --> 02:22:34.760]  смотрите. Нет, ну вот, ну просто смотрите, значит, еще раз, давайте тогда тут побольше картинку
[02:22:34.760 --> 02:22:43.280]  нарисуем. Жил-был путь. Рассмотрим вот один конкретный путь, в котором была какая-то вершина
[02:22:43.360 --> 02:22:57.600]  у. Мы решили вот это ребро объявить синим. Давайте еще допилим. Теперь давайте посмотрим. А теперь
[02:22:57.600 --> 02:23:03.240]  давайте думать, чему равен, значит, смотрите, вот давайте вот эти вершины, допустим, мы назовем,
[02:23:03.240 --> 02:23:08.240]  что эти вершины равны, там я не знаю, чему они там равны, ну давайте чем-нибудь технически,
[02:23:08.240 --> 02:23:15.280]  давай какой-нибудь, возьмем радикальный черный цвет, v1, v2, v3, и так далее, v, там какой-нибудь l,
[02:23:15.280 --> 02:23:24.140]  уж не знаю. Да, то есть и так, значит, в реальности, в реальном дереве путь у нас, то есть реальное
[02:23:24.140 --> 02:23:29.640]  дерево устроено так, то есть сейчас есть этот путь, который, возможно, на чем-то даже висит, да? А еще
[02:23:29.640 --> 02:23:38.280]  тут на нем висят какие-то деревья, там альфа-1, альфа-2, альфа-3, ну там и так далее, и так далее,
[02:23:38.280 --> 02:23:49.280]  в конце там альфа-l. И на, кстати, тоже что-то вполне себе висело. И так, смотрите, и так,
[02:23:49.280 --> 02:23:55.840]  значит, было у нас какой-то, но этому пути соответствовало какое-то, то есть это вот как бы,
[02:23:56.080 --> 02:24:06.520]  так сказать, реальное дерево. Какое-то вот реальное дерево, да, то есть вот, ну как всегда,
[02:24:06.520 --> 02:24:14.640]  вот. Хотя, да, что тут реальная, конечно, вопрос. То есть реально это типа интерфейс мы предлагаем,
[02:24:14.640 --> 02:24:23.560]  да? Вот, а тут, ну вот, ну и было тут дерево, которое, но этот путь мы как бы храним в виде
[02:24:23.560 --> 02:24:28.640]  какого-то вот там сплея, да? То есть там вершина, сколько у нас тут, да, тоже там,
[02:24:28.640 --> 02:24:34.060]  девять вершин, там какая-нибудь вершина У была где-нибудь там, ну где-нибудь была, не важно. Мы
[02:24:34.060 --> 02:24:43.520]  сделали сплей от У. И в сплея от У у нас обнаружил, что у нас теперь есть вершина У, и у нее вот эти
[02:24:43.520 --> 02:24:48.800]  вот там, тут, допустим, вот эти три вершинки, а тут, допустим, вот эти вот пять вершинок, как-нибудь.
[02:24:48.800 --> 02:25:05.400]  ну вот так не важно теперь вершина у находится вот здесь вот красота красота вот и теперь но
[02:25:05.400 --> 02:25:13.960]  теперь рассмотрим потенциал в этот момент времени да ну потенциал у нас напоминаю равен сумма
[02:25:14.200 --> 02:25:19.280]  лок СЗВшек по всем вершинам в том числе от этих но заметим что перестраение вот в
[02:25:19.280 --> 02:25:25.840]  этом дереве нас изeday других деревьев не влияет очевидно потому что для всех остальных деревьев
[02:25:25.840 --> 02:25:30.100]  это как бы ли там либо его это не касается либо это там перестраение деревьев какой то
[02:25:30.100 --> 02:25:36.420]  синей гирки да. Но перестраение синей гирки у нас естественно там на вес никак не влияет
[02:25:36.420 --> 02:25:42.000]  потому что оттого что вы там перестраивайте вершины количество вершин меняется это ponятно
[02:25:42.000 --> 02:25:47.760]  теперь давайте второе но вот а вот теперь то есть конкретно то есть поэтому рассматриваем как
[02:25:47.760 --> 02:25:55.520]  меняется как меняются веса как как меняется веса и сзв шки у этой штуки что такое сзв шка
[02:25:55.520 --> 02:26:05.880]  сзв шка это то есть данном случае это то есть сзв но то есть сзв шка это как бы сумма гирек
[02:26:06.520 --> 02:26:13.720]  у этой вершины сзв совпадает с ее гиркой у этой вершины сзв шка это сумма вот этих трех гирек
[02:26:13.720 --> 02:26:21.800]  правда а у этой ушки это что такое это сумма сзв шок просто всех девяти гирек понимаете да
[02:26:21.800 --> 02:26:26.600]  вот
[02:26:26.600 --> 02:26:37.600]  но то сумма соответственно сзв шка но что такое сумма сзв шка это по сути так как в каждой
[02:26:37.600 --> 02:26:44.040]  синей гирке сумма вес синей гирки это сколько вершин в ней находится да то есть получается
[02:26:44.040 --> 02:26:51.320]  сейчас сзв от у это ровно количество вершин которые в принципе находятся на этом пути или
[02:26:51.320 --> 02:26:58.800]  висят на нем в гирках понятно да то есть поэтому я и говорю что в этом в этот момент времени там
[02:26:58.800 --> 02:27:06.720]  сзв от у равно просто сз от получается v1 потому что обратите внимание в реальном
[02:27:06.720 --> 02:27:13.440]  дереве как бы все это это просто под дерево вершины v1 правда а теперь давайте подумаем
[02:27:13.440 --> 02:27:20.600]  что поменяется от того что я тут неожиданно решу отсплитить вот это дерево то есть в
[02:27:20.600 --> 02:27:27.400]  результате вот этой операции то есть объявили вот это ребро синим то есть я по сути объявлю
[02:27:27.400 --> 02:27:35.360]  следующее что этого ребра больше нет а вот это вот все на самом деле просто висит то есть это
[02:27:35.360 --> 02:27:41.480]  тоже такой висит то есть такой еще одна гихка можно сказать ну точнее вот гиха то есть просто
[02:27:41.480 --> 02:27:52.920]  мы в гирку вершины у довесили вот это вот все но тогда что путь но да но пилили ты ну да когда
[02:27:52.920 --> 02:27:57.680]  мы вот здесь синие ребро сделали да но теперь смотрите а что поменялось собственно вершина у
[02:27:57.680 --> 02:28:04.760]  осталось корнем своего дерева да то есть путь и путь и как и нот то есть поменялось то что
[02:28:04.760 --> 02:28:13.640]  конкретно вес вершины у увеличился на увеличился на размер вот сумму вот этих трех гирек ровно
[02:28:13.640 --> 02:28:22.680]  правда вот но я отражаю что сзв не изменился потому что сзв да суммируется уже не 9 гирек а только
[02:28:22.680 --> 02:28:30.760]  так и получается суммируется только вот эти 6 гирек но плюс еще вот эти вот то есть да то есть
[02:28:30.960 --> 02:28:37.040]  ну да то есть добавилась но вот но так но суть осталась той же то есть суть осталась тоже то мы
[02:28:37.860 --> 02:28:45.140]  как бы сзв это как бы то есть это по прежнему путь
[02:28:45.140 --> 02:28:48.280]  отуба от 1 до у на этот раз он чуть поменьше стал но очевидно что тогда раз у корень своего пути то
[02:28:48.280 --> 02:28:55.220]  получается сзв а То это по прежнему 6 git в legislature опять то есть ничего не поменялось то есть
[02:28:55.220 --> 02:29:00.580]  то есть как бы получается веса немножко перераспределились, но СЗВ не поменялись,
[02:29:00.580 --> 02:29:05.940]  то есть получается и потенциал не поменялся, то есть вот немножко магии, то есть оказывается можно
[02:29:05.940 --> 02:29:10.060]  поменять. Вот так вроде разобрались.
[02:29:10.060 --> 02:29:26.900]  Нет, мы удаляли именно то ребро, которое вело от У вниз, потому что оно поменяет,
[02:29:26.900 --> 02:29:34.060]  что это не просто сплит, мы начали эксполс, мы начали эксполс и сказали, что я хочу,
[02:29:34.060 --> 02:29:40.380]  чтобы у меня ниже У ничего не было. Чтобы это выполнить, я вызвал сплей от В, сплей от У,
[02:29:40.380 --> 02:29:46.140]  я могу всегда вызвать сплей от У, а потом после этого я просто объявил, что правого под дерево
[02:29:46.140 --> 02:29:55.820]  у него сплея нет. То есть для этого я объявил, что это типа новое сплей дерева, у него есть синий,
[02:29:55.820 --> 02:30:02.140]  в корне хранится синий ребро, которое там висит на том же У, то есть как бы смотрите,
[02:30:02.140 --> 02:30:07.620]  то есть это как бы идеально нужно смотреть. То есть это все какое-то вот рыжее дерево,
[02:30:07.620 --> 02:30:18.300]  у которого значит есть там синие ссылка в У. То есть в общем-то само это дерево тоже является
[02:30:18.300 --> 02:30:22.620]  каким-то сплей дерева, у которого синие ссылка ведет туда же, куда-то вот из В1 вот это синие
[02:30:23.100 --> 02:30:35.900]  Вот такая вот красота. Идем дальше. Что у нас теперь происходит? А теперь давайте посмотрим,
[02:30:35.900 --> 02:30:45.900]  что у нас происходит теперь. Когда мы делаем вот эти вот сложные сплайсы.
[02:30:45.900 --> 02:30:53.420]  Заметим маленькие приятные факты. На самом деле сложный сплайс от простого тут принципиально
[02:30:53.420 --> 02:30:59.940]  отличаться ничем не будет. Потому что как мы с вами только что выяснили, заниматься они будут
[02:30:59.940 --> 02:31:04.780]  одним и тем же. То есть как будет устроен сложный сплайс? Мы вызовем сплей от У1 в своем дереве,
[02:31:04.780 --> 02:31:13.900]  потом отпилем вот это дерево, припилем вот это. Но заметим маленькую приятную вещь. Как мы уже
[02:31:13.900 --> 02:31:21.180]  поняли, после того как вы вызвали сплей от У1, именно сплей, сам по себе припил-отпил, но потенциал
[02:31:21.180 --> 02:31:31.500]  не влияет от слова никак. Логично, да? Мы это только что выяснили. А если мы делаем простой сплайс,
[02:31:31.500 --> 02:31:37.900]  ну тоже никаких проблем, просто мы лишних отпилов не делаем, правда? То есть как бы естественно
[02:31:37.900 --> 02:31:45.780]  мы, чтобы как бы подмёрзнуть, мы естественно сплей от У2 обязательно вызовем. Понимаете, да?
[02:31:45.780 --> 02:32:07.660]  Чего? Да, но это сплей. Я имею ввиду, что я пока
[02:32:07.660 --> 02:32:19.540]  доказываю только одно, что вне сплеев потенциал не меняется. То есть сам по себе потенциал
[02:32:19.540 --> 02:32:25.100]  меняется только внутри вот этих сплеев. Мы вызываем сплей от этой вершины, вот внутри них
[02:32:25.100 --> 02:32:33.980]  потенциал естественно меняется. Да, и он тоже меняется. Но вне сплеев вот сами по себе вот эти
[02:32:33.980 --> 02:32:42.060]  операции, вот сами по себе припил-отпили, потенциал не меняют. Это всё, что я хочу сказать.
[02:32:48.060 --> 02:32:54.900]  Просто вы имеете ввиду общий потенциал, да? Ну естественно. Ну а какой ещё? Ну как это да, вот этот
[02:32:54.900 --> 02:33:00.860]  потенциал на самом деле от самого по себе факта от пила-припила не меняется. Он меняется от факта
[02:33:00.860 --> 02:33:09.740]  сплея. То есть ещё раз, как устроен expose? Мы делаем сплей от У, отпиливаем от него правое поддерево.
[02:33:09.740 --> 02:33:19.020]  Ну отпиливаем вот в этом смысле. То есть сплей поменял потенциал, отпил – нет. Теперь мы делаем
[02:33:19.020 --> 02:33:26.540]  сложный сплей. То есть делаем сплей от У1, потенциал поменялся. Мы отпилили правое поддерево от У1,
[02:33:26.540 --> 02:33:32.140]  потенциал не поменялся. Мы припилили другое правое поддерево, потенциал не поменялся.
[02:33:32.140 --> 02:33:41.500]  То есть потенциал, ну вот. Ну вот. Потом у2, потом для у2 где-то то же самое, то же самое. Вот. Да. То
[02:33:41.500 --> 02:33:48.100]  есть да. Или что то же самое, что я хотел сказать только одно. Учётная стоимость сплайса без учёта
[02:33:48.100 --> 02:33:56.740]  сплея единица. То есть для чего я это делаю? Потому что я не знаю, я не знаю, как меняется потенциал
[02:33:56.740 --> 02:34:04.340]  сплея. Ну сейчас не знаю. Я знаю, что относительно этого потенциала, я знаю, что учётная стоимость
[02:34:04.340 --> 02:34:12.100]  вот каждого сплея, она вот такая. Что это, что такое учётная стоимость? Помните, это что такое?
[02:34:12.100 --> 02:34:20.980]  Это не важно. То есть учётная стоимость это реальная стоимость плюс потенциал после минус
[02:34:20.980 --> 02:34:27.340]  потенциал до, правда? Но для того, что если я хочу теперь посчитать учётную стоимость экспоза
[02:34:27.340 --> 02:34:32.820]  относительно этого потенциала, то я должен тогда, получается, разбить её на составляющую,
[02:34:32.820 --> 02:34:37.580]  каждый считать именно учётную стоимость. Сплей я знаю только учётную стоимость, значит я должен
[02:34:37.580 --> 02:34:45.700]  посчитать учётную стоимость самих вот этих отпилов-припилов, правда? Так, ну это вот понятно,
[02:34:45.700 --> 02:34:55.020]  вот основа амортизационного анализа, основа логики. Вот, нет, они не влияют на что, то есть да,
[02:34:55.020 --> 02:35:00.180]  нет, они не влияют на то, что они не влияют на потенциал, а сами по себе отпилы-припилы,
[02:35:00.180 --> 02:35:12.340]  реальное время работы их от единицы даже, понимаете, да? Но тогда из этого, да, у каждого
[02:35:12.340 --> 02:35:20.580]  конкретного, каждый конкретный сплайс делается за единицу, за единицу без учёта сплея. Но,
[02:35:20.580 --> 02:35:24.540]  погодите, тут надо очень аккуратно, тут надо не запутаться, потому что мы же кулоген доказали,
[02:35:24.540 --> 02:35:29.780]  вы же там не доказывали, что относительно какого-то потенциала там учётное количество сплайсов лог,
[02:35:29.780 --> 02:35:36.380]  да, и ну его можно ввести, да, мы доказали, что их вообще не больше, чем кулог, да, в принципе,
[02:35:36.380 --> 02:35:52.060]  из этого можно сделать вывод, ну да, да, да, хорошо, давайте, да, скажем так, ну давайте так,
[02:35:52.060 --> 02:35:56.380]  нет, ну тут тут будет просто не совсем так, там будет одна подлость, поэтому тут аккуратненько,
[02:35:56.540 --> 02:36:05.860]  хотя нет, в уме на самом деле, да, это мой нот, то есть в уме, конечно, да, можно себе это держать,
[02:36:05.860 --> 02:36:09.940]  что, ну нет, просто учётные стоимости надо везде, потому что раз у нас есть потенциал,
[02:36:09.940 --> 02:36:18.460]  надо всегда проследить, что он не меняется просто так, ну вот, хотя давайте вот на всякий случай
[02:36:18.460 --> 02:36:30.300]  надо ещё прикинуть, хорошо, раз уж мы, ну в некотором смысле, да, хотя-то, хотя давайте ещё,
[02:36:30.300 --> 02:36:35.700]  кстати, о припилах и отпилах давайте ещё подумаем, а как влияют на этот потенциал линки, так,
[02:36:35.700 --> 02:36:41.260]  линки, каты и другие операции, ладно, слава богу, эверт, кстати, что приятно, на этот потенциал
[02:36:41.260 --> 02:36:49.420]  влияет только посредством эксполза, потому что сам по себе реверс, заметьте, сам по себе реверс
[02:36:49.420 --> 02:37:05.820]  пути на весах вершин не отражается от слова никак, вот, ну вот, а теперь давайте вот с линком
[02:37:05.820 --> 02:37:12.900]  катом проблемы, потому что линк на этот раз, хотя с другой стороны, вот, посмотрите, тут ещё
[02:37:12.900 --> 02:37:20.340]  одна неожиданная вещь, почему линк делается именно конкатинацией, обратите, вот, неожиданный был
[02:37:20.340 --> 02:37:28.660]  вопрос, потому что я утверждаю, что линк на потенциал, ну линк на самом деле на потенциал влияет каким
[02:37:28.660 --> 02:37:36.220]  образом, он, ну, рыжая ребро, конечно, да, но вес, ну, как всегда, как делается слияние двух деревьев,
[02:37:36.220 --> 02:37:42.300]  как всегда, мы у левого дерева находим правую, самую правую вершину, вызываем из неё сплей,
[02:37:42.300 --> 02:37:48.940]  объявляю корнем, и потом после этого подвешиваем, да, то есть получается, мы делаем опять сплей,
[02:37:48.940 --> 02:37:56.060]  но это делается там за логарифом учётного времени получается, и после этого привешиваем вершину,
[02:37:56.060 --> 02:38:03.900]  тем самым увеличивая, значит, СЗ только у корня, ну и соответственно, а потенциал увеличивая не
[02:38:03.900 --> 02:38:16.820]  более, чем на логарифом этого СЗ, то есть получается, да, но вот тут как бы вот аккуратно, да, ну, то есть
[02:38:16.820 --> 02:38:21.940]  вот получается, да, то есть относительно этого потенциала, да, то есть получается, что, да, то есть
[02:38:21.940 --> 02:38:31.060]  относительно такого потенциала мы сработали за expose плюс логариф, cut, ну, то же самое,
[02:38:31.060 --> 02:38:37.260]  только ещё лучше, потому что этот потенциал, cut, уменьшает всё-таки, потому что когда мы
[02:38:37.260 --> 02:38:45.900]  что-то, когда мы там отпилили синюю, там, отпилили синюю вершину одного бедняги, ну, вот, то как бы
[02:38:45.900 --> 02:38:54.180]  просто у него вес уменьшился, значит, как бы вес уменьшился, потенциал увеличился, вот, так,
[02:38:54.180 --> 02:38:58.700]  но это относительно этого потенциала, но тут вот опасно, видите, всё-таки мы начинаем действительно
[02:38:58.700 --> 02:39:06.940]  мыслить терминов, то учётная стоимость относительно сплейного потенциала, вот, ну, давайте, ну, это
[02:39:06.940 --> 02:39:10.620]  значит, ну, давайте, да, то все остальные вершины, всё остальное у нас не поменялось, потому что мы
[02:39:10.620 --> 02:39:15.060]  помним, и верт у нас ничего не поменял, то есть там, потому что, вот там, потому что помимо expose,
[02:39:15.060 --> 02:39:20.220]  там есть только reverse, а reverse вообще делает из единицы и не меняет, не трогает потенциал никак,
[02:39:20.220 --> 02:39:29.220]  вот, остаётся только теперь финалочка, то есть давайте посмотрим, значит, собственно, собственно,
[02:39:29.220 --> 02:39:36.420]  сам по себе expose, как же работает, я утверждаю, что учётное время expose относительно этого
[02:39:36.420 --> 02:39:46.460]  потенциала равно чему? Внимание, то есть, итак, вот, то есть время учётное относительно вот этого expose,
[02:39:46.460 --> 02:39:54.500]  относительно вот этого потенциала phi-splay, так сказать, этого сплейного потенциала, да,
[02:39:54.500 --> 02:40:08.340]  но не превосходит чего? Значит, предельно честно пишу, обратите внимание, вот, значит, один,
[02:40:08.340 --> 02:40:20.100]  значит, ну, во-первых, делаем сплей от, значит, сначала мы делаем сплей от удоль, да, значит,
[02:40:20.100 --> 02:40:31.460]  это один плюс получается три логарифма двоичных, так сказать, вот тут сейчас неожиданно будет,
[02:40:31.460 --> 02:40:51.620]  на самом деле, cz от v1, вот, минус три логарифма двоичных, ну, чего тут, так сказать, cz синего,
[02:40:51.620 --> 02:41:02.540]  то есть, на самом деле, вот так скажем, v от u0 можно дано, ну да, v от u0, по сути, ну, когда мы делали
[02:41:02.540 --> 02:41:08.780]  сплей, у него был какой-то вот синий вес, вот этот, но не синий вес, а просто вот вес, да, тут, в принципе,
[02:41:08.780 --> 02:41:14.700]  я вообще могу, то есть, видимо, совсем уже для красоты можно, на самом деле, тут этот вес аккуратненько
[02:41:14.700 --> 02:41:27.260]  и в синий перевести, хотя, да, вот у тебя есть прилагательное синий, какое член предложения, синий, ну, вот, ну,
[02:41:27.260 --> 02:41:41.860]  почем не ваш, а, ну, нет, именно, вот именно, нет, cz от v1, то есть, все вот это под дерево, да, то есть, как бы, когда u0 станет
[02:41:41.860 --> 02:41:53.380]  корнем, на нем будет висеть ровно вот это все под дерево, вот, так, смотрите, значит, дальше что мы делаем? Дальше мы делаем,
[02:41:53.380 --> 02:42:01.780]  собственно, вот этот отпил, этот отпил, учетная стоимость этого отпила относительно нашего потенциала, это 1, как мы выяснили, да?
[02:42:01.780 --> 02:42:28.300]  Потому что я оценил cz, потому что я это czv от u0 оценил сверху, оценил снизу, как v от u0, да, хотя, в принципе, хотя, да,
[02:42:28.300 --> 02:42:39.420]  наверное, правильнее было бы тут можно и cz написать, ну, скажи так, сейчас на это забирай вперед, ничего не повлияет, но, как бы, можно и так, ну, просто тут czv до, ну, можно сказать,
[02:42:39.420 --> 02:42:55.500]  ладно, до не важно, понятно, что, как было изначально, тут, так вот, это у нас, это, что это такое? Это вот, это вот от сплитили, вот, так вот, теперь дальше,
[02:42:55.500 --> 02:43:15.820]  мы переходим к splice на v1, u1, за сколько работает этот, что это такое? Значит, теперь, когда мы работаем от v1, значит, мы делаем splay от u1, да? Да, давайте, я вот тут тоже напишу, что вот это вот, это splay от u0,
[02:43:15.820 --> 02:43:42.060]  теперь у нас прозикается splay от u1, ну, как его оценить? Его можно оценить как 1 плюс 3 на логарифм двоичный, на этот раз cz от v2, там, пишем черненьким, cz от v2, минус, конечно же, 3 логарифма двоичных,
[02:43:42.940 --> 02:44:02.940]  да, то есть, опять же, тут, тут пишем czv от u1, вот, нет, не то же самое, я вот так сказал, скажем так, это не то же самое, что вот это, но я сказал, вот это включает вот это в себя,
[02:44:02.940 --> 02:44:07.660]  да, мы же можем там писать, если что-то не поедет в 1, просто поедет в 1, да?
[02:44:33.660 --> 02:44:46.060]  там, splay от u1, то есть, это от сплителя, а вот эта вот единичка, это splice, понятно, да?
[02:44:46.060 --> 02:44:56.460]  Вот, теперь, что мы делаем? Идем сюда, делаем вот этот splice, ну, то же самое, то есть, пишем-то, то есть, он может быть простым, может быть сложным,
[02:44:56.940 --> 02:45:09.980]  ну, я тут даже, ну, вот, давайте уж, ладно, пишем-то, пишем, то есть, тут уже получится cz от v3, да, то есть, пока я предельно все честно пишу, я, собственно, тут ничего не делаю особо,
[02:45:09.980 --> 02:45:32.860]  вот, три логарифа двоичной, тут получается czv, czv от u2 и плюс один, опять, плюс bam-bam-bam, ну, bam-bam-bam, короче, да, то есть, и так делаю по всем splice'ам,
[02:45:33.740 --> 02:45:53.740]  ну, да, ну, вот, вот, так вот, допустим, по, ну, вот, то есть, по этой логике, допустим, мы делали, сделали k splice'ов, то есть, k splice'ов, и тогда у нас, по этой логике, оказывается, что root пусть у нас будет равно vk плюс первое, да?
[02:45:53.740 --> 02:45:54.620]  Вот, ну, теперь получается, значит, заметен, теперь следующее, давайте я теперь вот это сотру, потому что это нам, в общем-то, больше уже, да, этому вот реальнее, значит, это я убираю, вот так вот, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем, убираем
[02:46:23.740 --> 02:46:53.220]  Вот, ну, теперь смотрим, значит, это все меньше либо равно чего, значит, теперь заметим следующее, то есть, я замечаю, что логарифм двоичный СЗ от каждого выитого, он не превосходит, даже не логарифм двоичный, я даже короче запишу,
[02:46:53.220 --> 02:47:14.700]  ключевое в другое, СЗ от выитого, оно на самом деле не превосходит, а если быть точнее, даже строго меньше, чем нас, ну вот, да, по большому счету, чем, да, я даже вот так напишу, меньше В от, значит, У и плюс первого,
[02:47:14.700 --> 02:47:44.180]  ну просто потому, что это составляющая его часть, даже В, ну, естественно, то есть, давайте, чтобы, ну, я тут пропишу, что это не превосходит СЗ В от У и плюс один, очевидно, что до, что после, да, но тогда из этого следует, что у нас такое, ну вот, что у нас имеет место, называется, такой красивый шлеп-шлеп,
[02:47:44.180 --> 02:48:13.660]  вот так, то есть, сейчас, ну вот, сейчас, нет, погодите, сейчас, сейчас, погодите, от У и плюс первого или, а, нет, неправильно, вот так, вот так, и тогда, смотрите, то есть, в принципе, тогда эта штука дает нам очень красивый шлеп-шлеп,
[02:48:13.660 --> 02:48:43.660]  то есть, такой, с точки зрения меньше либо равно, заметим, что вот этот вот плюс СЗ убился минус вот этим, вот, тут получается тоже шлеп-шлеп, но, правда, тут надо аккуратно, видите, убились логарифмы, но не эти единички, значит, смотрите, там, пум-пум-пум, но тут надо аккуратно, мы же учетную стоимость делаем, да, то есть, нам надо тут очень аккуратно разбираться, то есть, там это уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-уходит, уходит-уходит-у
[02:48:43.660 --> 02:49:13.420]  уходит, это получается не превосходит, значит, если рассматривать логарифмы, то выжил только три логарифма двоичных, значит, ну, давайте, напишем его аккуратно, СЗ от, так сказать, ВК плюс один, значит, минус три логарифма двоичных, что там получилось, СЗВ от 0,
[02:49:13.420 --> 02:49:43.420]  даже, а то 0, тут уже полезно написать до, а то мало ли там что, потому что, ну, вот, но, к сожалению, то есть, в принципе, конечно, это была бы уже победа, то есть, в принципе, потому что, заметим, что, ну, вот, то, потому что вот это вот не, то есть, это минус, а это не, а этот СЗ от ВК плюс один равен тупо Н, ну ладно, не равен, он равен размеру всего дерева, но нам не происходит Н, да,
[02:49:43.420 --> 02:50:05.420]  но, к сожалению, я тут вынужден вот эти единички написать, то есть, это равно два на количество сплайсов в дереве, в, значит, экспози, вот, понятно, да?
[02:50:06.420 --> 02:50:19.420]  У 0, а это, это до, да, это русское слово до, ну или лота такая еще есть, да, вот.
[02:50:19.420 --> 02:50:48.420]  Очень интересно, слушайте, а как по-английски будет нота до? Вот СИЛИЦА, видимо СИДА, ой, ну да, да, да, да, да, так вот, ну и теперь добиваем, так как это не происходит Н, а это идет в минус, то получается, это не превосходит три логарифма двоичных Н плюс два на количество сплайсов.
[02:50:50.420 --> 02:51:08.420]  В экспози, то есть, вот такая учетная стоимость, то есть, смотрите, то есть, учетная споемость конкретного экспози получается вот такая, вот.
[02:51:08.420 --> 02:51:25.420]  Да, но нет, тут вопрос, как ее просто аккуратно, просто аккуратно это, потому что, опять же, тут как бы, чтобы аккуратно сказать учет, то есть, то есть, надо как бы либо модифицировать потенциал так, чтобы он убил и сплайсы.
[02:51:25.420 --> 02:51:45.420]  Ну да, ну это нет, ну можно там зайти, так как вы сейчас это, скажем так, можно теоретически накрутить вот это вот, то есть, сказать, что давайте общий потенциал, это потенциал сплея, плюс вот тот потенциал зеленый, который у нас был, вот это количество там этих лестих рыжих.
[02:51:45.420 --> 02:52:01.420]  Вот, я сделаю по-другому. Я скажу так, учетная стоимость относительно самого экспози, учетная стоимость самого экспози, она вот такая, да, то есть, логарифм плюс экспози.
[02:52:01.420 --> 02:52:28.420]  Значит, далее я скажу, фии, я так скажу, любой, там любой операции, операции вне, вот, за вычетом эксполза, эксполза, ну да, ну.
[02:52:28.420 --> 02:52:44.420]  Ну давайте так, да, заметим, что сплайсы мы делаем только в эксползе, это да, но теперь давайте подумаем, хотя знаете, вот, то есть, мне хочется сказать, что она тоже какая-то адекватная, но вы знаете, правильнее сказать, давайте уж давайте по-честному тогда писать.
[02:52:44.420 --> 02:52:58.420]  Начнем с, вот, снова с нами его зеленые величества. Давайте вот, линк, давайте так скажем, линк, нот без эксполза.
[02:52:58.420 --> 02:53:27.420]  А, да, да, да, да, да, да. Давайте так, т относительно, да, списплея, но вот это. Так, вот давайте так, линк, что нам, так, какую подлянку нам сделал линк? Да, линк сказал, что мы взяли коринг, коринг с плей дерева к огневому пути, если говорить формально, да.
[02:53:27.420 --> 02:53:50.420]  И к этому корню, ну, точнее так. То есть, ну, хотя, да, не совсем так. На самом деле произошло следующее. То есть, дело в том, что этот линк, он состоит из дополнительного сплея, уж как мы сделали мерч, мы взяли вот начало этого пути, вот эту ноль, да, объявили сплей.
[02:53:50.420 --> 02:54:14.420]  Ну, да, ну, вот то же самое, да. То есть, не более чем, значит, вот это вот, ну, то же самое, там, ну, вот, точнее от логарифма N на, собственно, вот это вот, это будет, собственно, сплей от 0.
[02:54:14.420 --> 02:54:28.420]  И плюс, собственно, само подвешивание к этому у 0 какого-то дерева, которое изменит только СЗВ от у 0 самого, изменит его не более чем на N, а его логарифм не более чем на лог M, да.
[02:54:28.420 --> 02:54:36.420]  Поэтому получается плюс, пишем аккуратно еще, лог 2N.
[02:54:36.420 --> 02:54:48.420]  Нет, нет, я тут просто очень аккуратно предупрежу, что у нас тут как бы этот без эксползоит линк состоит из сплея от у 0. То есть, этот сплей не связан с эксползом, это дополнительный сплей, да.
[02:54:48.420 --> 02:55:02.420]  Ну, вот, то есть, тут подвешивание к у 0, ну, вот, и это равно O от логарифма.
[02:55:02.420 --> 02:55:12.420]  Вот так. То есть, учетная стоимость тут тоже от логарифма, то есть, какой-то не происходит какой-то константы на логарифм, да.
[02:55:12.420 --> 02:55:17.420]  Вот. Так, ну, давайте еще скажем.
[02:55:17.420 --> 02:55:28.420]  Так, что у нас тут еще? Т, там, фи, сплей, от, теперь давайте, так, у нас был красная, веселая штука.
[02:55:28.420 --> 02:55:37.420]  Так, красная штука, кат, без эксползо.
[02:55:37.420 --> 02:55:52.420]  Да, совершенно верно. То есть, ну, хотя, нет, ну, да, то есть, здесь, хотя, тут, хотя, заметим, что это, хотя, нет, тут все еще тупее.
[02:55:52.420 --> 02:56:05.420]  Дело в том, что, ну, как бы, нет, что мы сделали? Мы сделали, там, когда мы отпилили вершину V от вершины U, что мы делали? Мы делали эксползоту, который уже объявил, что ребро у V синее.
[02:56:06.420 --> 02:56:16.420]  То есть, поэтому это, на самом деле, не превосходит просто U от единицы на, ладно, даже, даже не рыжая U от единицы, а синяя U от единицы.
[02:56:16.420 --> 02:56:32.420]  Почему синяя? Потому что, помимо этого эксползо, все, что мы делаем, собственно, от, ну, вот, отпил синего V.
[02:56:32.420 --> 02:56:36.420]  Вот так. Вот, собственно, и все.
[02:56:43.420 --> 02:56:46.420]  А, хотя, нет, слушайте, а ведь вы правы.
[02:56:56.420 --> 02:56:58.420]  А нет, кстати, а уже не обязаны, кстати.
[02:56:58.420 --> 02:57:04.420]  Нет, смотрите, сейчас мы не обязаны. Нет, ну, нет, спойлер так, нет, ну, во-первых, давайте так.
[02:57:04.420 --> 02:57:12.420]  Отдельная, нет, скажи, отдельная песня верно ли, что в результате эксползо от U окажется корнем? Спойлер, нет.
[02:57:12.420 --> 02:57:21.420]  Вообще не обязан. Но в данном случае нам начхать, нам начхать вот это, чтобы, потому что вот этот отпил, он делается за U от единицы.
[02:57:21.420 --> 02:57:25.420]  Ну, реально, вовремя U от единицы он делается, в любом случае.
[02:57:25.420 --> 02:57:29.420]  Но потенциал он только уменьшает.
[02:57:29.420 --> 02:57:39.420]  Потому что, по сути, он просто, как бы, ну, вот, то есть, по сути, он уменьшает, то есть, он, конечно, уменьшает, то есть, конечно, изменилось на этот раз много СЗВшек.
[02:57:39.420 --> 02:57:44.420]  Ну, то есть, мы можем добиться того, чтобы уменьшилась только одна СЗВшка, конечно, вызвав сплей.
[02:57:44.420 --> 02:57:46.420]  Но на самом деле в этом нет необходимости.
[02:57:46.420 --> 02:57:53.420]  Потому что уменьшится куча СЗВшек, то есть, изменится куча СЗВшек, но они все именно уменьшатся, они увеличатся.
[02:57:53.420 --> 02:57:56.420]  Поэтому, как бы, уменьшение потенциала нас устраивает.
[02:57:56.420 --> 02:58:01.420]  Поэтому получается, то есть, получается, в общем, не более чем, то есть, один отпил.
[02:58:01.420 --> 02:58:05.420]  Это был кат.
[02:58:05.420 --> 02:58:11.420]  Но, на самом деле, учетная стоимость всего остального, то есть, там всяких вот этих вот опенод,
[02:58:11.420 --> 02:58:18.420]  ну, вот, то есть, давайте, вот, скажем, там, то есть, учетная стоимость этого фиссплея от Эверта.
[02:58:18.420 --> 02:58:25.420]  Эверт без эксполс.
[02:58:25.420 --> 02:58:40.420]  Но это просто тоже, то есть, не превосходит абсолютно технической от единицы на, там, типа, реверс на всем деле.
[02:58:40.420 --> 02:58:42.420]  Потому, вот, почему от единицы?
[02:58:42.420 --> 02:58:45.420]  Потому что он отложенный.
[02:58:45.420 --> 02:58:49.420]  Вот такая красота у нас неожиданно получается.
[02:58:49.420 --> 02:58:59.420]  Ну, всякие, ну, вот, в общем-то, я могу, ну, в этот Эверт, в общем, ну, все остальные операции, в общем-то, они комбинации линков, катов и эвертов.
[02:58:59.420 --> 02:59:05.420]  И чего? И что-то еще. Вроде, что-то еще тоже отложенные операции в корень дерева.
[02:59:06.420 --> 02:59:13.420]  То есть, вывод такой, что учетные стоимости, значит, всех операций вот такие.
[02:59:13.420 --> 02:59:19.420]  То есть, все работает с залогарифом плюс эксполс. Эксполс работает с залогарифом плюс сплайсом.
[02:59:19.420 --> 02:59:22.420]  Это учетно, да?
[02:59:22.420 --> 02:59:27.420]  Но тогда, но, как мы помним, что такое, по сути, учетные стоимости, да?
[02:59:27.420 --> 02:59:31.420]  То есть, мы говорим, что верт, верт, верт, верт.
[02:59:31.420 --> 02:59:34.420]  Что такое, по сути, учетные стоимости, да?
[02:59:34.420 --> 02:59:41.420]  То есть, мы говорим, что верны учетные стоимости, подразумевая следующее, что если мы просуммируем все эти операции, то,
[02:59:41.420 --> 02:59:51.420]  то реальное время работы всех, суммарное реальное время работы всех операций не превосходит суммарно, суммарно учетного времени, правда?
[02:59:51.420 --> 02:59:55.420]  Ну, мы и вот потенциал удовлетворяем всем условиям, поэтому, да?
[02:59:55.420 --> 02:59:58.420]  То есть, вывод.
[02:59:58.420 --> 03:00:08.420]  Ну, тогда получается, что у нас, тогда отсюда следует, что суммарное, давайте тут уже тоже, значит, да, со сплайем тут все понятно.
[03:00:08.420 --> 03:00:17.420]  Но тогда отсюда получается, что, значит, то есть вывод такой, то есть, суммарное нот, то есть, суммарное время,
[03:00:17.420 --> 03:00:38.420]  суммарное реальное время работы, но и время работы там Q операций, ну вот, с Q штрих эксползами,
[03:00:38.420 --> 03:00:48.420]  получается, не превосходит суммарного учетного времени.
[03:00:48.420 --> 03:01:15.420]  Работы, там тех же самых Q операций, с Q штрих эксползами, что теперь, а эта сумма у нас не превосходит чего?
[03:01:15.420 --> 03:01:29.420]  Ну, во-первых, сумма всех эксползов, сумма всех эксползов, ну вот, сумма всех эксползов, это получается не более чем три,
[03:01:29.420 --> 03:01:57.420]  то есть, это значит не более чем три на Q штрих логарифом 2n, плюс два на количество сплайсов за все эксползы.
[03:01:57.420 --> 03:02:08.420]  Вот, и плюс еще все, что было за вычетом эксползов, а все, что за вычетом эксползов, очевидно, имело место O от Q логан.
[03:02:08.420 --> 03:02:17.420]  Но, как мы помним, количество сплайсов у нас тоже было Q логан, помним, да?
[03:02:17.420 --> 03:02:27.420]  Вот, Q штрих это, ну как мы помним, Q штрих это O от Q, то есть, получается это равно O от Q логан.
[03:02:27.420 --> 03:02:37.420]  Ну, в принципе, это по сути означает, что в среднем все будет выполнено за логариф.
[03:02:37.420 --> 03:02:47.420]  Да, может в первый раз выглядеть черно-магически, да?
[03:02:47.420 --> 03:02:53.420]  Ну, тогда у нас больше как-то реже-синей магии.
[03:02:53.420 --> 03:03:03.420]  Нет, черный это так, это в конце, даже черный, знаете, мы уже чистую техническую работу сделали, то есть, основная красота в режесте.
[03:03:03.420 --> 03:03:09.420]  Вот, так что вот такая красота.
[03:03:09.420 --> 03:03:13.420]  Так что вот такая красота, вот такой вот логариф.
[03:03:13.420 --> 03:03:16.420]  Так, вот такой вот логариф.
[03:03:16.420 --> 03:03:19.420]  Есть ли тут какие-то вопросы?
[03:03:25.420 --> 03:03:29.420]  Нет, то реализовываю, ничего страшного в реализации нет.
[03:03:33.420 --> 03:03:41.420]  Нет, ну как, ну там, к сожалению, проблема, что у вас будет...
[03:03:41.420 --> 03:03:47.420]  Нет, ну как, вам придется реализовать сплей дерева, в котором у каждой вершины есть ссылка на родителя.
[03:03:53.420 --> 03:04:01.420]  Ну, например, ну по-разному, а там не важно, на себя, на это, по-моему, там даже удобство это сильного не даст, потому что вам все равно идти до корни.
[03:04:02.420 --> 03:04:11.420]  Единственная проблема, что у вас в каждой вершине еще должна быть потенциальная, то ли отсылка, то ли действительно информация об этом вот самом синем ребре.
[03:04:17.420 --> 03:04:21.420]  Да, но она хранится именно как бы в корне сплей дерева.
[03:04:21.420 --> 03:04:27.420]  То есть мы сплей дерева храним как структуру из стой дерева и информация ребре?
[03:04:27.420 --> 03:04:29.420]  Нет, ну не совсем так.
[03:04:29.420 --> 03:04:33.420]  Ну вот, ну нет, ну можно, конечно, сказать и так.
[03:04:33.420 --> 03:04:36.420]  А, ну в принципе, да, можно сказать и так, на самом деле, да.
[03:04:36.420 --> 03:04:38.420]  Иначе ее просто...
[03:04:38.420 --> 03:04:41.420]  Ну, возможно, да.
[03:04:41.420 --> 03:04:43.420]  Так что... Давай.
[03:04:43.420 --> 03:04:47.420]  Почему мы вложили количество сплайсов, у нас больше на два?
[03:04:47.420 --> 03:04:49.420]  На два?
[03:04:49.420 --> 03:04:53.420]  А потому что у нас вот в этой сумме была вот тут единичка из сплея.
[03:04:53.420 --> 03:04:57.420]  И вот тут единичка на сами вот эти.
[03:04:57.420 --> 03:05:04.420]  Это вот, ну, сама вот эта перекраска, то есть мы как бы сделали сплей, потом надо отпилить вот это под дерево и припилить вот это.
[03:05:04.420 --> 03:05:06.420]  Мы это нарисовали единичку.
[03:05:06.420 --> 03:05:08.420]  Ну, потенциал там не поменялся.
[03:05:08.420 --> 03:05:10.420]  Поэтому я так для понятности рисую два.
[03:05:14.420 --> 03:05:17.420]  Количество сплайсов это нет.
[03:05:18.420 --> 03:05:21.420]  А, ну...
[03:05:21.420 --> 03:05:24.420]  А вот, ну, в этом смысле, да.
[03:05:24.420 --> 03:05:28.420]  Да, у нас тут коребер получилось, с которым мы работаем.
[03:05:28.420 --> 03:05:30.420]  Поэтому, да, ка.
[03:05:38.420 --> 03:05:40.420]  Так что очень красивая вещь.
[03:05:47.420 --> 03:05:49.420]  А что такое?
[03:05:51.420 --> 03:05:53.420]  Нет, ну, как всегда, да.
[03:05:53.420 --> 03:05:55.420]  Это, конечно, проблема, и мне Генту Линукса, да.
[03:05:55.420 --> 03:05:59.420]  Все можно делать своими руками, но, да, надо сделать.
[03:05:59.420 --> 03:06:03.420]  Ну, математически красиво зато.
[03:06:03.420 --> 03:06:05.420]  Вот.
[03:06:05.420 --> 03:06:07.420]  Не, ну, кто-то когда-то даже писал, можно погулять.
[03:06:07.420 --> 03:06:13.420]  Там, в принципе, какая-то, я думаю, если там погулять, то реализация Павла Кулявского там может быть нагуглена.
[03:06:13.420 --> 03:06:16.420]  То есть, может быть, по-моему, там даже не сильно большое число строчек получил.
[03:06:16.420 --> 03:06:18.420]  Вопрос, конечно...
[03:06:18.420 --> 03:06:20.420]  Нет, ну, это возможно.
[03:06:20.420 --> 03:06:22.420]  Это важно.
[03:06:22.420 --> 03:06:24.420]  Сплей, во-первых.
[03:06:24.420 --> 03:06:26.420]  Не такой короткий, на самом деле.
[03:06:26.420 --> 03:06:28.420]  Да.
[03:06:28.420 --> 03:06:33.420]  После сплея тебе нужно вот эти опера, чтобы поддерживать структуру самого дерева дополнительно.
[03:06:33.420 --> 03:06:35.420]  Да.
[03:06:35.420 --> 03:06:37.420]  Ну, да, ну, да.
[03:06:37.420 --> 03:06:40.420]  Ну, тут такое, да, куча технической работы, конечно, да.
[03:06:40.420 --> 03:06:44.420]  То есть, конечно, надо, то есть, конечно, если это очень аккуратно писать, то проблем нет.
[03:06:45.420 --> 03:06:46.420]  Так, ладно.
[03:06:46.420 --> 03:06:48.420]  Есть ли еще вопросы?
[03:06:52.420 --> 03:06:53.420]  Так, ну ладно.
[03:06:53.420 --> 03:06:55.420]  Если нет вопросов, ладно.
[03:06:55.420 --> 03:06:58.420]  Тогда, видимо, пришло время второго перерыва.
[03:06:58.420 --> 03:07:01.420]  Ну, видимо, оставшееся время поговорим о чем-нибудь еще прекрасном.
[03:07:01.420 --> 03:07:03.420]  А фишка, на самом деле, такая.
[03:07:03.420 --> 03:07:10.420]  Ну, вот сегодня мы попробуем немножко обсудить такую замечательную штуку, как атомик ХИП.
[03:07:11.420 --> 03:07:15.420]  Ну, нет, нет, самую ядерную часть мы сейчас обсуждать не будем.
[03:07:15.420 --> 03:07:17.420]  Ничего не предвещало, видимо.
[03:07:19.420 --> 03:07:21.420]  Не, претен.
[03:07:21.420 --> 03:07:27.420]  Вот претен метод четырехрусских, он как бы, скажем так, он как бы выходит за рамки.
[03:07:27.420 --> 03:07:31.420]  То есть, каждую конкретную задачу, конечно, за час и даже там за быстро можно обсудить.
[03:07:31.420 --> 03:07:35.420]  Но просто задача несколько и хочется обсудить их все.
[03:07:35.420 --> 03:07:41.420]  Потому что мы как минимум применим метод четырехрусских к буревому переножению матриц раз,
[03:07:41.420 --> 03:07:48.420]  к, ну, естественно, к задаче про РМКУ, там, за О от единицы, там два,
[03:07:48.420 --> 03:07:52.420]  и, конечно, к его величеству левеланцестер квейрес.
[03:07:52.420 --> 03:07:58.420]  Но там тоже надо рассказывать, потому что там возникнут эти все там куча композиций, их тоже надо отдельно обсуждать.
[03:07:58.420 --> 03:08:04.420]  Мы тоже применим метод четырехрусских и получим там супер божикосмический левеланцестер квейрес
[03:08:04.420 --> 03:08:08.420]  О от Н предподсчета и О от единицы за ответ.
[03:08:08.420 --> 03:08:15.420]  Да. Нет, на самом деле нет. Если вы знаете, если вы уже знаете как это делается Н лог Н предподсчета единицы,
[03:08:15.420 --> 03:08:21.420]  то, в общем-то, там, скорее всего, и знаете основы метод четырехрусских, детали вы, в принципе, можете уже додумать.
[03:08:21.420 --> 03:08:25.420]  То есть там не супер что-то божикосмическое будет.
[03:08:25.420 --> 03:08:30.420]  Ну, то есть, там надо как-то очень, ну, там забирать, просто скажу, там просто идея такая.
[03:08:30.420 --> 03:08:35.420]  И заметим, что можно там двоичные подъемы искать только от листов, там я скажу, да.
[03:08:35.420 --> 03:08:41.420]  А во-вторых, заметим, что если листов там, скажем, меньше, чем Н поделить на лог Н, то мы, в принципе, уже победили.
[03:08:41.420 --> 03:08:47.420]  Да, двоичные подъемы, в принципе, только для листов можно считать без предков, если у вас есть там соседние декабризы.
[03:08:47.420 --> 03:08:50.420]  Ну, в общем, основная идея вкратце вам рассказала.
[03:08:50.420 --> 03:08:58.420]  В общем-то, детали, в принципе, можете уже, ну, то есть мы там в следующий раз их явно обсудим, но, в принципе, основную идею вы можете додумать уже сейчас.
[03:08:58.420 --> 03:08:59.420]  Вот.
[03:09:01.420 --> 03:09:08.420]  Ну, вот, но это просто обет от четырех русских, это весь такая, просто хочется ее прям вот отдельно ее обсуждать, потом посмаковать там, действительно, эту красоту.
[03:09:09.420 --> 03:09:19.420]  Ну, и, в принципе, вообще, знаете, вот, как мой научный руководитель вообще, в принципе, считает, что, ну, что на самом деле хорошее занятие, это на самом деле такое занятие, которое посвящено одной идее.
[03:09:19.420 --> 03:09:23.420]  То есть новая идея должна быть одна, просто она там вот, рассматриваем ее там с разных сторон.
[03:09:24.420 --> 03:09:29.420]  Вот. Ну, у нас, конечно, там у нас с вами четыре с половиной часа, поэтому такое, конечно, там невозможно.
[03:09:30.420 --> 03:09:37.420]  Но, как бы, если у нас есть какая-то новая там свежая идея, то хочется ее, конечно, посмаковать как-то достаточно хорошо.
[03:09:38.420 --> 03:09:39.420]  Вот.
[03:09:41.420 --> 03:09:43.420]  А пока Atomic Hip.
[03:09:44.420 --> 03:09:47.420]  Ну, просто когда хочется Atomic Hip, все-таки немножко к хипам.
[03:09:48.420 --> 03:09:49.420]  Смотрите.
[03:09:49.420 --> 03:09:50.420]  О чем вообще речь?
[03:09:50.420 --> 03:09:51.420]  О чем вообще речь?
[03:09:52.420 --> 03:09:53.420]  Что же такое Atomic Hip?
[03:09:54.420 --> 03:09:55.420]  Да.
[03:09:55.420 --> 03:09:59.420]  Как говорится, куча у нас немало уже сложена.
[03:10:00.420 --> 03:10:02.420]  Но теперь, ребят, смотрите еще одну.
[03:10:04.420 --> 03:10:06.420]  Ой, интересно, Магомаев мог так спеть, а?
[03:10:07.420 --> 03:10:12.420]  Я, знаете, вот Магомаев пел, а любви немало песен сложено, я спою тебе спою еще одну.
[03:10:12.420 --> 03:10:13.420]  Итак, Atomic Hip.
[03:10:15.420 --> 03:10:16.420]  Вот.
[03:10:16.420 --> 03:10:17.420]  Ну, вряд ли он об этом пел, конечно.
[03:10:17.420 --> 03:10:18.420]  Да.
[03:10:19.420 --> 03:10:20.420]  Значит, о чем речь?
[03:10:21.420 --> 03:10:22.420]  А речь вот о чем.
[03:10:23.420 --> 03:10:30.420]  Дело в том, что в игру вступает снова уже позабытый нами жанр работа с целыми числами.
[03:10:32.420 --> 03:10:38.420]  Работа с целыми числами, с целыми W-битными числами.
[03:10:40.420 --> 03:10:41.420]  Вот.
[03:10:41.420 --> 03:10:43.420]  Потому что, в принципе, на самом деле, это такой отдельный жанр в науке.
[03:10:44.420 --> 03:10:51.420]  Отдельный жанр в науке говорит нам, то есть давайте предполагать, что мы там работаем именно с W-битными числами,
[03:10:51.420 --> 03:10:53.420]  давайте на этом какие-то алгоритмы делать.
[03:10:54.420 --> 03:10:55.420]  Вот.
[03:10:55.420 --> 03:11:00.420]  То есть, помните, мы уже отдельно пытались рассматривать задачу, что если мы сортируем не абстрактные камешки какие-то,
[03:11:00.420 --> 03:11:07.420]  которые нельзя отсортировать быстрее, чем Z-logan, а именно W-битные чиселки, то уже...
[03:11:08.420 --> 03:11:10.420]  Что такое W-битные чиселки?
[03:11:11.420 --> 03:11:13.420]  Ну, состоящие не более, чем из W-бит.
[03:11:14.420 --> 03:11:16.420]  Где W-битные – это битность вашего процессора.
[03:11:17.420 --> 03:11:20.420]  Давайте коротенько напомню раз один вопрос.
[03:11:21.420 --> 03:11:23.420]  То есть, смотрите, дело в том, что в каком мире живем.
[03:11:24.420 --> 03:11:26.420]  Мы, по идее, живем в мире рам-модели.
[03:11:27.420 --> 03:11:28.420]  Что это означает?
[03:11:29.420 --> 03:11:36.420]  Ну, я сейчас не буду рисовать ту же картинку, но суть такая, что мы живем в мире, где у нас память состоит из W-битных чисел,
[03:11:36.420 --> 03:11:38.420]  где W – это какая-то константа.
[03:11:38.420 --> 03:11:43.420]  В современном мире она 64, но теоретически в науке она может и расти.
[03:11:44.420 --> 03:11:45.420]  Ну, мы и надеемся на это.
[03:11:46.420 --> 03:11:48.420]  Значит, в чем смысл W-битности?
[03:11:48.420 --> 03:11:52.420]  Мы знаем, что все операции с W-битными числами мы делаем за О от единиц.
[03:11:53.420 --> 03:11:57.420]  Но там могут быть, на самом деле, честно скажу, какие-то детали конкретные,
[03:11:57.420 --> 03:12:06.420]  потому что, скажем, если вы там погуглите Atomic Hip, то вы сразу наткнетесь на очень страшное словосочетание Transdichotomial Model.
[03:12:08.420 --> 03:12:10.420]  Да, вот прям страшное слово.
[03:12:11.420 --> 03:12:17.420]  Я не могу сказать, что я до конца понимаю, что это значит, но в нулевом приближении они говорят так,
[03:12:17.420 --> 03:12:22.420]  что, видимо, они иногда отдельно прописывают, что, типа, умножение мы тоже умеем делать за единиц.
[03:12:24.420 --> 03:12:26.420]  Да, это бывает не всегда так.
[03:12:27.420 --> 03:12:28.420]  Вот.
[03:12:31.420 --> 03:12:36.420]  Ну вот, в этом смысле моделя, там можно, действительно, бесконечно долго копать.
[03:12:36.420 --> 03:12:38.420]  То есть, честно, я пока, по крайней мере, не копал.
[03:12:39.420 --> 03:12:47.420]  Но суть такая, что мы знаем, что сортировки над такими числами можно делать быстрее, чем за N log N.
[03:12:47.420 --> 03:12:48.420]  Но, как минимум, у нас были...
[03:12:48.420 --> 03:12:52.420]  Ну, помните, у нас была эта смешная, там, Киркпатрик Сордза N log W.
[03:12:53.420 --> 03:12:55.420]  Ну, который N log log C, по сути.
[03:12:57.420 --> 03:12:59.420]  То есть, есть такое.
[03:13:01.420 --> 03:13:06.420]  То есть, там следующее применение, я не знаю, которое у нас в последнее время как-то вылетает из программы,
[03:13:06.420 --> 03:13:10.420]  но, видимо, в какой-то момент мы с вами, наверное, будет время обсудить.
[03:13:10.420 --> 03:13:12.420]  Вот это, конечно, дерево онемдебоса.
[03:13:13.420 --> 03:13:17.420]  То есть, дерево онемдебоса – это когда вы хотите реализовать такой сет.
[03:13:18.420 --> 03:13:20.420]  Ну, то есть, обычный сет, но на W битных числах.
[03:13:21.420 --> 03:13:27.420]  Оказывается, что вы можете реализовать так, чтобы у вас действительно это все работало за все операции за log W.
[03:13:28.420 --> 03:13:35.420]  В чем-то отдельный технический интерес будет реализовать не только, типа, insert, insert, delete, erase, search,
[03:13:36.420 --> 03:13:43.420]  но и, конечно же, lower bound, upper bound или там всякие, даже обычно в классических интерпретациях, successor, predecessor.
[03:13:44.420 --> 03:13:46.420]  То есть, для каждого элемента найти там следующий, предыдущий.
[03:13:46.420 --> 03:13:48.420]  Но это эквилентно lower bound.
[03:13:50.420 --> 03:13:51.420]  Нет.
[03:13:51.420 --> 03:13:58.420]  А, ну, хотя, в предположении, что у нас бесконечное число памяти, на самом деле совсем бесконечное,
[03:13:58.420 --> 03:14:01.420]  то есть, на самом деле там даже это не используется.
[03:14:02.420 --> 03:14:10.420]  Да, вот мистика в том, что там оригинальное дерево онемдебоса, оно просто требует, типа, в идеале от W памяти.
[03:14:11.420 --> 03:14:12.420]  Да, так, в наглую.
[03:14:13.420 --> 03:14:17.420]  Но вот, но зато все операции делает, не за от W, от 2 в степени W, конечно.
[03:14:19.420 --> 03:14:26.420]  Да, то есть, конечно, чтобы это реально припилить это к реальной жизни, вам, конечно, придется использовать хэш-таблицу.
[03:14:26.420 --> 03:14:29.420]  Но, с другой стороны, там во многих интерпретациях вам придется делать хэш-таблицу.
[03:14:29.420 --> 03:14:36.420]  То есть, там, если копать там, потому что есть какие-нибудь более продвинутые версии того же самого, типа там Fusion 3 там называется или что-нибудь еще.
[03:14:38.420 --> 03:14:42.420]  Но там, к сожалению, тоже в качестве черного ящика используется мистическая хэш-таблица.
[03:14:43.420 --> 03:14:44.420]  То есть, совсем мистическая.
[03:14:44.420 --> 03:14:51.420]  То есть, в плане, есть черный ящик, типа, вы кладете элементы, достаете оттуда элементы, находите элементы и все за единицу.
[03:14:51.420 --> 03:14:52.420]  Будь здоров.
[03:14:53.420 --> 03:14:54.420]  Вот.
[03:14:54.420 --> 03:14:55.420]  Будь здоров еще раз.
[03:14:56.420 --> 03:14:58.420]  Нет лавербаундов там слова.
[03:14:58.420 --> 03:14:59.420]  Нет хэш-таблицы.
[03:14:59.420 --> 03:15:00.420]  Какой лавербаунд?
[03:15:00.420 --> 03:15:02.420]  Нет, там его нет.
[03:15:03.420 --> 03:15:08.420]  Причем, это, кстати, на самом деле, это может быть в блоке вариаций хэлгоритмов отдельная песня.
[03:15:08.420 --> 03:15:09.420]  А как это вообще сделать?
[03:15:10.420 --> 03:15:12.420]  Вот для этого бы еще дожить до этого.
[03:15:12.420 --> 03:15:17.420]  Ну, в принципе, обычно у нас в курсе иногда бывает, собственно, как сделать статическое.
[03:15:17.420 --> 03:15:19.420]  То есть, видите, хотя бы уже задача.
[03:15:19.420 --> 03:15:20.420]  Дано n чисел.
[03:15:21.420 --> 03:15:23.420]  Ну, там, допустим, дано n чисел.
[03:15:23.420 --> 03:15:28.420]  Задача построить какую-нибудь за oatn, за какой-нибудь вероятности oatn хэш-таблицу.
[03:15:28.420 --> 03:15:29.420]  В смысле, в отожидание.
[03:15:29.420 --> 03:15:34.420]  Так, чтобы потом за oat единицы для любого числа проверять, есть он хэш-таблица или нет.
[03:15:35.420 --> 03:15:37.420]  Но n чисел даны заранее.
[03:15:37.420 --> 03:15:38.420]  Ну, естественно, не ацертированы никак.
[03:15:40.420 --> 03:15:43.420]  Вот. Оказывается, да, там существует веселый алгоритм.
[03:15:44.420 --> 03:15:45.420]  На самом деле такой.
[03:15:45.420 --> 03:15:47.420]  Но, как вы понимаете, он вероятностный.
[03:15:47.420 --> 03:15:50.420]  Поэтому, как бы, если он и будет, то в блоке вероятностных алгоритмов.
[03:15:51.420 --> 03:15:52.420]  Вот.
[03:15:52.420 --> 03:15:53.420]  Так вот.
[03:15:53.420 --> 03:15:55.420]  А что ж такое atomic hip?
[03:15:55.420 --> 03:15:57.420]  Ну, мы сейчас не про дерева на md-boss.
[03:15:57.420 --> 03:15:58.420]  Мы поговорим про atomic hip.
[03:15:59.420 --> 03:16:01.420]  Значит, суть у нас такая.
[03:16:01.420 --> 03:16:03.420]  Мы хотим очень.
[03:16:03.420 --> 03:16:04.420]  Значит, у нас есть w-bit.
[03:16:04.420 --> 03:16:08.420]  Я хочу создать hip на w-bit-ных числах.
[03:16:11.420 --> 03:16:14.420]  Вот как-то вот очень-очень-очень хочется.
[03:16:15.420 --> 03:16:18.420]  То есть сказать, что вот atomic hip.
[03:16:22.420 --> 03:16:23.420]  Вот.
[03:16:23.420 --> 03:16:26.420]  Значит, мне очень-очень-очень-очень хочется.
[03:16:27.420 --> 03:16:30.420]  Значит, пишем, что это все на w-bit-ных числах.
[03:16:33.420 --> 03:16:35.420]  И в этом месте мы говорим, что...
[03:16:35.420 --> 03:16:36.420]  Что мы говорим?
[03:16:36.420 --> 03:16:38.420]  А говорим и следующее, что...
[03:16:38.420 --> 03:16:41.420]  То есть, естественно, за какое симптомическое я хочу это реализовать?
[03:16:41.420 --> 03:16:46.420]  Ну, естественно, если бы я сказал, что у вас insert за логарифом и extract-min за логарифом,
[03:16:47.420 --> 03:16:49.420]  то, наверное, это было бы не очень интересно, правда?
[03:16:49.420 --> 03:16:51.420]  Потому что обычный hip это прекрасно делает.
[03:16:52.420 --> 03:16:58.420]  Если бы я вам сказал, что я хочу делать insert за o от единицы
[03:16:58.420 --> 03:17:00.420]  и, допустим, extract-min,
[03:17:02.420 --> 03:17:05.420]  я хочу делать за o от логарифа n.
[03:17:07.420 --> 03:17:08.420]  Интересно ли нам такое?
[03:17:08.420 --> 03:17:10.420]  Особенно, если я скажу, что амортизация разрешена.
[03:17:11.420 --> 03:17:13.420]  Это же самое, что мы можем.
[03:17:13.420 --> 03:17:14.420]  Это же амортизация.
[03:17:14.420 --> 03:17:16.420]  Но не совсем.
[03:17:16.420 --> 03:17:20.420]  Хотя нет, это практически то же самое, что куча фибоначьего, так скажем.
[03:17:21.420 --> 03:17:23.420]  Необычная куча, необычная.
[03:17:25.420 --> 03:17:27.420]  Любая куча амортизации.
[03:17:28.420 --> 03:17:33.420]  Нет, любая куча амортизации это как бы insert за логарифом и extract-min за единиц.
[03:17:33.420 --> 03:17:36.420]  Да, то есть, extract-min за логарифом это, в принципе, апгрейд.
[03:17:37.420 --> 03:17:40.420]  То есть, для этого надо либо кучу фибоначьей изобрести, либо там как-то аккуратно делать.
[03:17:41.420 --> 03:17:46.420]  Нет, в принципе, да, можно там пытаться даже половину этой оптимизации делать,
[03:17:46.420 --> 03:17:49.420]  потому что там суть могла быть знаете в чем?
[03:17:49.420 --> 03:17:51.420]  Суть могла быть в том, что давайте...
[03:17:51.420 --> 03:17:56.420]  Ну там какая-нибудь суть в духе, что давайте в insert-е просто делаем push-back,
[03:17:56.420 --> 03:18:01.420]  а потом, когда придет время extract-min, давайте за o от n быстренько из этого массива сделаем кучу.
[03:18:02.420 --> 03:18:03.420]  Вот, да, именно.
[03:18:03.420 --> 03:18:05.420]  Вот именно с этим жестом, да, совершенно верно.
[03:18:06.420 --> 03:18:07.420]  Вот.
[03:18:08.420 --> 03:18:10.420]  Ну то есть вот такие какие-то не будем сейчас это копать.
[03:18:11.420 --> 03:18:13.420]  Вот, но суть такая.
[03:18:13.420 --> 03:18:16.420]  Наверное, мы хотим как-то воспользоваться тем, что это w-битные числа,
[03:18:16.420 --> 03:18:19.420]  а не какие-то опять абстрактные камушки в вакууме.
[03:18:20.420 --> 03:18:21.420]  И мы этим можем воспользоваться.
[03:18:22.420 --> 03:18:27.420]  И мы этим воспользуемся так, что наша ставка будет log n поделить на log log n.
[03:18:32.420 --> 03:18:33.420]  А нигде?
[03:18:34.420 --> 03:18:37.420]  Да, мы просто знаем, мы знаем, что оно есть.
[03:18:40.420 --> 03:18:42.420]  Вот, мы знаем, что оно есть.
[03:18:43.420 --> 03:18:48.420]  Но как бы, но мистика в том, что вот, да, w мы еще будем пользоваться в каком месте?
[03:18:48.420 --> 03:18:53.420]  Мы еще знаем, что n скорее всего меньше, чем 2 в степени w, естественно.
[03:18:55.420 --> 03:18:58.420]  Даже скорее всего в некотором смысле сильно меньше.
[03:18:59.420 --> 03:19:03.420]  Ну так, чтобы с запасом, чтобы там не это, не 2 в степени w минус 1, чтобы элементы вообще,
[03:19:03.420 --> 03:19:06.420]  чтобы там с этими элементами вообще что-то можно было делать дополнительно.
[03:19:11.420 --> 03:19:12.420]  А, да, ну вот.
[03:19:12.420 --> 03:19:13.420]  Нет, скажем так.
[03:19:13.420 --> 03:19:17.420]  Не, ну n должно хотя бы, чтобы у нас эта n, во-первых, как бы в битность влезала, да,
[03:19:17.420 --> 03:19:19.420]  и у нас вообще на n элементов память была.
[03:19:19.420 --> 03:19:23.420]  Памяти у нас, очевидно, тоже там вряд ли больше, чем 2 в степени w,
[03:19:23.420 --> 03:19:26.420]  потому что ячейки вы как-то номировать как-то надо, да.
[03:19:27.420 --> 03:19:30.420]  Правда, там дерево на МДБОСа будет, конечно, жрать чуть больше.
[03:19:30.420 --> 03:19:33.420]  Там, скорее всего, 2 в степени w на константу какую-то еще.
[03:19:34.420 --> 03:19:35.420]  Ну вот.
[03:19:35.420 --> 03:19:37.420]  Но поэтому тут надо аккуратно.
[03:19:38.420 --> 03:19:39.420]  Так вот.
[03:19:39.420 --> 03:19:41.420]  То есть в этом смысле ограничение вот такое есть.
[03:19:41.420 --> 03:19:46.420]  Но как бы при достаточно большой там w-битности на самом деле можно рисовать так.
[03:19:46.420 --> 03:19:48.420]  Но как мы уже говорили, есть же сортировка, которая вот,
[03:19:48.420 --> 03:19:52.420]  сортировка w-битных чисел, которая работает за n лог лог n.
[03:19:53.420 --> 03:19:56.420]  Тоже, казалось бы, от w не зависит, но вот с такими ограничениями.
[03:19:56.420 --> 03:19:57.420]  Так вот.
[03:19:59.420 --> 03:20:02.420]  Как же мы это будем...
[03:20:02.420 --> 03:20:03.420]  Ну вот.
[03:20:04.420 --> 03:20:05.420]  Ну вот.
[03:20:05.420 --> 03:20:06.420]  Значит, что же это такое?
[03:20:06.420 --> 03:20:07.420]  Значит, что же это такое?
[03:20:09.420 --> 03:20:12.420]  Значит, ну на самом деле, значит, технология тут будет мистическая.
[03:20:13.420 --> 03:20:14.420]  Технология будет звучать так.
[03:20:15.420 --> 03:20:16.420]  Да.
[03:20:16.420 --> 03:20:17.420]  Ну в принципе, ну вот.
[03:20:17.420 --> 03:20:18.420]  То есть технология будет звучать так.
[03:20:18.420 --> 03:20:19.420]  Вот мы хотим такую кучу.
[03:20:19.420 --> 03:20:20.420]  Да.
[03:20:20.420 --> 03:20:22.420]  Куча, сразу скажу, какие у нее применения.
[03:20:22.420 --> 03:20:24.420]  Ну первое применение, которое там вы сразу откроете в Википедии,
[03:20:24.420 --> 03:20:28.420]  это что алгоритм dx на w-битных числах будет теперь работать,
[03:20:28.420 --> 03:20:29.420]  как бы за сколько?
[03:20:29.420 --> 03:20:33.420]  За e плюс v лог v делить на лог лог v.
[03:20:36.420 --> 03:20:37.420]  Вот.
[03:20:38.420 --> 03:20:39.420]  Вот.
[03:20:39.420 --> 03:20:43.420]  Но более продвинутые свойства с помощью такой кучи окажется,
[03:20:44.420 --> 03:20:48.420]  что можно искать, что миностов на w-битных числах можно искать
[03:20:48.420 --> 03:20:49.420]  за асимптотику.
[03:20:53.420 --> 03:20:55.420]  Правильно, e плюс v.
[03:20:56.420 --> 03:20:57.420]  Да.
[03:20:58.420 --> 03:21:00.420]  Нет, там придет, нет, там отдельная песня.
[03:21:00.420 --> 03:21:01.420]  Как?
[03:21:01.420 --> 03:21:02.420]  Этому будем очень отдельно обсуждать.
[03:21:08.420 --> 03:21:10.420]  Нет, там более хитрый алгоритм.
[03:21:10.420 --> 03:21:12.420]  Это будет модификация алгоритма Фрэд Монтальяна.
[03:21:12.420 --> 03:21:14.420]  Потому что есть алгоритм Фрэд Монтальяна.
[03:21:14.420 --> 03:21:16.420]  Он работает за крутую асимптотику.
[03:21:16.420 --> 03:21:20.420]  Он работает за e лог звездочка v.
[03:21:21.420 --> 03:21:23.420]  Там такая мистическая асимптотика.
[03:21:23.420 --> 03:21:27.420]  Там много мистических, что алгоритм будет ищет миностов за e лог звездочка v.
[03:21:27.420 --> 03:21:31.420]  Но если e больше, чем v лог лог лог v,
[03:21:31.420 --> 03:21:33.420]  то тогда он работает за u от e.
[03:21:35.420 --> 03:21:40.420]  Ну, в миностове e это как минимум v-1, поэтому не принципиально.
[03:21:41.420 --> 03:21:45.420]  Да, но вместо v лог лог лог v я могу сказать любое константное число логов,
[03:21:45.420 --> 03:21:47.420]  на самом деле, там забавно.
[03:21:47.420 --> 03:21:52.420]  Да, то есть если e больше, чем v лог лог лог лог лог лог лог лог лог v,
[03:21:52.420 --> 03:21:55.420]  вот я 10 раз сказал, то как бы будет за u от e.
[03:21:58.420 --> 03:22:01.420]  В миностовах e всегда как минимум v-1.
[03:22:01.420 --> 03:22:03.420]  Поэтому вот e.
[03:22:03.420 --> 03:22:05.420]  А v лог лог лог лог лог v,
[03:22:05.420 --> 03:22:09.420]  ну, формально говоря, когда-то есть разница между v,
[03:22:09.420 --> 03:22:11.420]  v лог лог лог лог лог лог v,
[03:22:11.420 --> 03:22:13.420]  и e там для достаточно больших e.
[03:22:14.420 --> 03:22:17.420]  Да, даже не в этих ограничениях, конечно, но тем не менее.
[03:22:17.420 --> 03:22:20.420]  Да, на практике можно считать, что это u от e.
[03:22:23.420 --> 03:22:27.420]  Да, но там фишка в том, что там просто в одном месте используется куча фибоначи.
[03:22:29.420 --> 03:22:33.420]  Но оказывается, что если вместо кучи фибоначи использовать вот это,
[03:22:35.420 --> 03:22:40.420]  то там количество итераций из логарифма звездочка v превращается в 2.
[03:22:44.420 --> 03:22:45.420]  Нет, просто в 2.
[03:22:46.420 --> 03:22:47.420]  Просто в 2.
[03:22:47.420 --> 03:22:49.420]  То есть там просто есть несколько фаз,
[03:22:49.420 --> 03:22:51.420]  каждый из которых работает за u от e.
[03:22:52.420 --> 03:22:56.420]  Вот, просто там так будет фаз, там лог звездочка,
[03:22:56.420 --> 03:22:57.420]  а тут фаз будет 2.
[03:22:57.420 --> 03:22:58.420]  Ну, там вот.
[03:22:58.420 --> 03:23:00.420]  Ладно, это я вам так поанонсировал,
[03:23:00.420 --> 03:23:02.420]  что, видимо, в следующем семестре будет.
[03:23:02.420 --> 03:23:04.420]  Да, нет, я миностовый тоже хочу в следующем семестре.
[03:23:05.420 --> 03:23:09.420]  Но вот, потому что там, да, весело там.
[03:23:10.420 --> 03:23:11.420]  А так если, если повезет,
[03:23:11.420 --> 03:23:13.420]  может, мы с вами все-таки,
[03:23:14.420 --> 03:23:16.420]  попробуем найти e на обратную функцию кирмана.
[03:23:19.420 --> 03:23:20.420]  Ну, давайте пока поймем.
[03:23:21.420 --> 03:23:24.420]  Значит, для этого нам нужен atomic heap, хоть что-нибудь из него.
[03:23:25.420 --> 03:23:26.420]  Что?
[03:23:27.420 --> 03:23:28.420]  Да.
[03:23:29.420 --> 03:23:30.420]  Вот.
[03:23:30.420 --> 03:23:31.420]  Да, вот это будет действительно расстрел.
[03:23:31.420 --> 03:23:32.420]  Да, но...
[03:23:33.420 --> 03:23:35.420]  Ну, уже расстрел, потому что если soft heap я уже о своей жизни рассказывал,
[03:23:35.420 --> 03:23:37.420]  то то я еще пока не знаю вообще.
[03:23:37.420 --> 03:23:40.420]  Я пытался один раз почитать, и пока не получилось.
[03:23:41.420 --> 03:23:43.420]  Но это ладно, это мы доживем.
[03:23:44.420 --> 03:23:47.420]  Давайте пока, давайте поймем какую-нибудь более простую вещь.
[03:23:48.420 --> 03:23:49.420]  А именно, потому что atomic heap,
[03:23:49.420 --> 03:23:51.420]  ну, полностью мы его с вами не разберем.
[03:23:52.420 --> 03:23:53.420]  А мы сведем его к неожиданности.
[03:23:54.420 --> 03:23:56.420]  Ну, то на самом деле цепочка такая.
[03:23:57.420 --> 03:23:59.420]  То есть там на самом деле три кучи, я все время забываю, как они называются.
[03:24:00.420 --> 03:24:02.420]  Вот это вот, потому что есть как бы atomic,
[03:24:03.420 --> 03:24:05.420]  то есть на самом деле у нас имеется в виду там три кучи.
[03:24:05.420 --> 03:24:06.420]  Одна называется atomic heap,
[03:24:07.420 --> 03:24:08.420]  другая af heap,
[03:24:09.420 --> 03:24:10.420]  третья q heap.
[03:24:13.420 --> 03:24:15.420]  Нет, примерно, на самом деле одна свой,
[03:24:16.420 --> 03:24:17.420]  ну, то есть по сути одна свойца другой,
[03:24:18.420 --> 03:24:19.420]  другой сходится с третьей.
[03:24:20.420 --> 03:24:21.420]  Давайте я их буду называть так, но с оговоркой,
[03:24:22.420 --> 03:24:23.420]  что я могу заберечь.
[03:24:24.420 --> 03:24:25.420]  Потому что давайте,
[03:24:26.420 --> 03:24:27.420]  потому что кто-то скажет,
[03:24:28.420 --> 03:24:29.420]  а может наоборот,
[03:24:30.420 --> 03:24:31.420]  может вот это называется af heap,
[03:24:32.420 --> 03:24:33.420]  а его можно свести к atomic heap, я не знаю.
[03:24:33.420 --> 03:24:35.420]  Но дело в том, что я хочу свести эту задачу
[03:24:36.420 --> 03:24:37.420]  к хипу,
[03:24:39.420 --> 03:24:40.420]  который будет делать
[03:24:41.420 --> 03:24:43.420]  insert за o от единицы
[03:24:44.420 --> 03:24:45.420]  и extract
[03:24:47.420 --> 03:24:48.420]  min
[03:24:49.420 --> 03:24:50.420]  за o от единицы.
[03:24:55.420 --> 03:24:57.420]  Но при этом в маленьком предположении,
[03:24:58.420 --> 03:25:00.420]  маленьком чудесном предположении.
[03:25:00.420 --> 03:25:01.420]  При этом, что я хочу гарантирую,
[03:25:02.420 --> 03:25:03.420]  но при этом гарантируется,
[03:25:04.420 --> 03:25:05.420]  что в каждый момент времени
[03:25:06.420 --> 03:25:07.420]  cz от heap
[03:25:08.420 --> 03:25:09.420]  в каждый момент времени
[03:25:10.420 --> 03:25:11.420]  не превосходит лог квадрат n.
[03:25:14.420 --> 03:25:15.420]  Да, то есть он мелкий.
[03:25:16.420 --> 03:25:17.420]  То есть, да, как это связано,
[03:25:18.420 --> 03:25:20.420]  но обратите внимание, n у нас ограничена битностью, да,
[03:25:21.420 --> 03:25:23.420]  алгорифм n тем более.
[03:25:25.420 --> 03:25:26.420]  То есть мы как бы рассчитываем на то,
[03:25:27.420 --> 03:25:28.420]  что у нас
[03:25:28.420 --> 03:25:30.420]  то есть n не превосходит получается,
[03:25:31.420 --> 03:25:32.420]  ну вот,
[03:25:33.420 --> 03:25:34.420]  ну да, n у нас не происходит
[03:25:35.420 --> 03:25:36.420]  в два степени double,
[03:25:37.420 --> 03:25:38.420]  то есть получается у нас мы как бы лог квадрата
[03:25:39.420 --> 03:25:40.420]  это что-то типа вот битность числа,
[03:25:41.420 --> 03:25:42.420]  битность чисел в квадрате, да.
[03:25:43.420 --> 03:25:44.420]  То есть мы рассчитываем, что
[03:25:45.420 --> 03:25:46.420]  чисел в принципе не очень, не много,
[03:25:47.420 --> 03:25:48.420]  и рассчитываем, что мы с ними будем работать
[03:25:49.420 --> 03:25:50.420]  за o от единицы.
[03:25:52.420 --> 03:25:53.420]  Так вот, но и это еще не все.
[03:25:55.420 --> 03:25:56.420]  Мы сведем тут
[03:25:56.420 --> 03:25:57.420]  значит,
[03:25:58.420 --> 03:25:59.420]  там просто идея еще такая,
[03:26:00.420 --> 03:26:01.420]  просто мы эту кучу сведем
[03:26:02.420 --> 03:26:04.420]  к вот это точно называется, я думаю, qhip.
[03:26:07.420 --> 03:26:09.420]  Как бы не наврать, конечно, но ладно.
[03:26:10.420 --> 03:26:11.420]  Так вот, она будет делать
[03:26:12.420 --> 03:26:13.420]  insert
[03:26:14.420 --> 03:26:15.420]  за o от единицы
[03:26:17.420 --> 03:26:18.420]  и экстракт min
[03:26:20.420 --> 03:26:21.420]  да, как хочется написать отрицательную асимптотику,
[03:26:22.420 --> 03:26:23.420]  но нет, вот единицы.
[03:26:23.420 --> 03:26:24.420]  Весело.
[03:26:25.420 --> 03:26:26.420]  Ща больше.
[03:26:28.420 --> 03:26:29.420]  Так.
[03:26:30.420 --> 03:26:31.420]  Нет, это еще не все.
[03:26:37.420 --> 03:26:39.420]  По-моему, все-таки вот так.
[03:26:44.420 --> 03:26:46.420]  Ой, ну ладно, ладно, не так хорошо.
[03:26:47.420 --> 03:26:48.420]  Вот так все-таки.
[03:26:50.420 --> 03:26:51.420]  Ну ладно, ладно, не так хорошо.
[03:26:51.420 --> 03:26:52.420]  Вот так все-таки.
[03:26:53.420 --> 03:26:55.420]  Ну ладно, суть одна там не принципиальна.
[03:27:00.420 --> 03:27:01.420]  Смотрите, что это такое,
[03:27:02.420 --> 03:27:03.420]  то есть это мы берем w
[03:27:04.420 --> 03:27:05.420]  и еще из него какой-то, видите, корень извлекаем,
[03:27:06.420 --> 03:27:07.420]  по сути.
[03:27:09.420 --> 03:27:10.420]  То есть я так в скобочках припишу,
[03:27:11.420 --> 03:27:12.420]  что это корень четвертой степени из w.
[03:27:17.420 --> 03:27:18.420]  Мы сводим это к этому,
[03:27:19.420 --> 03:27:20.420]  а это к этому.
[03:27:21.420 --> 03:27:22.420]  Вот реализация этого использовать,
[03:27:23.420 --> 03:27:24.420]  это как черный ящик.
[03:27:25.420 --> 03:27:26.420]  А реализация этого использовать,
[03:27:27.420 --> 03:27:28.420]  это как черный ящик.
[03:27:29.420 --> 03:27:30.420]  Так вот, вот это магия будет.
[03:27:31.420 --> 03:27:32.420]  Значит, это какая-то там магия,
[03:27:33.420 --> 03:27:34.420]  потому что там оказывается,
[03:27:35.420 --> 03:27:36.420]  то есть можно рассмотреть,
[03:27:37.420 --> 03:27:38.420]  что в некотором смысле,
[03:27:39.420 --> 03:27:40.420]  рассматривать какие-то не все биты,
[03:27:41.420 --> 03:27:42.420]  а только правильные.
[03:27:43.420 --> 03:27:44.420]  И окажется, что там как-то состояние
[03:27:45.420 --> 03:27:46.420]  на этих правильных битах,
[03:27:47.420 --> 03:27:48.420]  собственно, ограниченное количество,
[03:27:49.420 --> 03:27:50.420]  и на них можно построить что-то типа автомата.
[03:27:51.420 --> 03:27:52.420]  Чего?
[03:27:53.420 --> 03:27:54.420]  Амортизировано.
[03:27:55.420 --> 03:27:56.420]  Амортизировано.
[03:27:57.420 --> 03:27:58.420]  Амортизировано.
[03:27:59.420 --> 03:28:00.420]  Да, то есть поэтому я не уверен.
[03:28:01.420 --> 03:28:02.420]  То есть, может быть, в какой-то момент
[03:28:03.420 --> 03:28:04.420]  хотелось бы, конечно, это тоже добить,
[03:28:05.420 --> 03:28:06.420]  хотя в прошлый раз, когда мы пытались,
[03:28:07.420 --> 03:28:08.420]  нам не удалось.
[03:28:09.420 --> 03:28:10.420]  Но там действительно черная магия,
[03:28:11.420 --> 03:28:12.420]  потому что для этого придется там действительно
[03:28:13.420 --> 03:28:14.420]  все там Fusion 3 обсуждать,
[03:28:15.420 --> 03:28:16.420]  там все эти X-Fast и Y-Fast,
[03:28:17.420 --> 03:28:18.420]  там, в общем, долго к этому можно идти,
[03:28:19.420 --> 03:28:20.420]  долго обсуждать и взрывать себе мозг.
[03:28:21.420 --> 03:28:22.420]  Это конкретно Q.
[03:28:23.420 --> 03:28:24.420]  Ну нет, ну да.
[03:28:25.420 --> 03:28:26.420]  Да, но это конкретно Q.
[03:28:27.420 --> 03:28:29.420]  Но технология, с помощью которых
[03:28:30.420 --> 03:28:31.420]  действительно это сводится,
[03:28:32.420 --> 03:28:33.420]  она к этому адским автоматам отношений не имеет,
[03:28:34.420 --> 03:28:37.420]  и ее как раз обсудить хочется.
[03:28:38.420 --> 03:28:40.420]  Но на самом деле технология сведения
[03:28:41.420 --> 03:28:43.420]  тут везде одна и та же.
[03:28:45.420 --> 03:28:48.420]  Она будет называться B-дерево.
[03:28:51.420 --> 03:28:54.420]  Ну, что-то типа B-дерево, если быть точнее.
[03:28:56.420 --> 03:28:57.420]  Значит, фишка такая.
[03:28:59.420 --> 03:29:03.420]  Я хочу, чтобы у меня эти элементы были в B...
[03:29:04.420 --> 03:29:06.420]  Ладно, давайте себе вообразим даже не B-дерево,
[03:29:07.420 --> 03:29:08.420]  а B-ичную кучу.
[03:29:11.420 --> 03:29:13.420]  То есть, хочется, чтобы...
[03:29:14.420 --> 03:29:15.420]  Вот.
[03:29:16.420 --> 03:29:19.420]  То есть, у меня есть B-ичное дерево.
[03:29:19.420 --> 03:29:20.420]  Вот.
[03:29:25.420 --> 03:29:26.420]  То есть, такое вот B-ичное.
[03:29:27.420 --> 03:29:28.420]  То есть, везде, у каждой вершины B-детей.
[03:29:29.420 --> 03:29:30.420]  И какая-то высота.
[03:29:33.420 --> 03:29:34.420]  Ну, типа.
[03:29:35.420 --> 03:29:36.420]  Вот.
[03:29:37.420 --> 03:29:38.420]  То есть, будем хранить.
[03:29:39.420 --> 03:29:40.420]  Но, правда, естественно, идеальная B,
[03:29:41.420 --> 03:29:42.420]  то есть, идеальная B-ичная куча,
[03:29:43.420 --> 03:29:44.420]  конечно, накладывает...
[03:29:45.420 --> 03:29:46.420]  То есть, там не все N-ы подходят, правда?
[03:29:46.420 --> 03:29:47.420]  Вот.
[03:29:48.420 --> 03:29:49.420]  Ну, во-первых, скажем, чего равно B?
[03:29:52.420 --> 03:29:53.420]  Ну, и здесь все очевидно.
[03:29:54.420 --> 03:29:57.420]  Значит, давайте, в первом сведении я скажу, что B это...
[03:30:00.420 --> 03:30:01.420]  двоичный логариф МН.
[03:30:05.420 --> 03:30:06.420]  Значит, двоичный логариф МН.
[03:30:08.420 --> 03:30:11.420]  То есть, давайте, я тут буду себе, допустим,
[03:30:12.420 --> 03:30:14.420]  вот эту вот, действительно, штучку как-то хранить.
[03:30:14.420 --> 03:30:15.420]  Как-то хранить.
[03:30:16.420 --> 03:30:17.420]  Допустим.
[03:30:19.420 --> 03:30:20.420]  Нет.
[03:30:21.420 --> 03:30:23.420]  В будущем нет, но изначально хочется, что да.
[03:30:25.420 --> 03:30:28.420]  Потому что нам хочется, как всегда, мы же мечтатели с вами,
[03:30:29.420 --> 03:30:32.420]  поэтому нам хочется мечтать, что у нас есть набор вот таких деревьев.
[03:30:34.420 --> 03:30:35.420]  В чем набор деревьев какой?
[03:30:36.420 --> 03:30:37.420]  Ну, во-первых, давайте подумаем, какая может быть высота?
[03:30:38.420 --> 03:30:40.420]  Какая высота, кстати, у такого дерева?
[03:30:44.420 --> 03:30:47.420]  Ну, на самом деле, очевидно, высота у такого дерева логарифом Н
[03:30:48.420 --> 03:30:50.420]  по основанию логарифом Н.
[03:30:51.420 --> 03:30:54.420]  Это тот самый логН делит на лог логН.
[03:30:57.420 --> 03:30:58.420]  Что-что?
[03:31:00.420 --> 03:31:01.420]  Верхний. Пока верхний.
[03:31:02.420 --> 03:31:04.420]  Хотя, забегая вперед, нижний будет тоже самый.
[03:31:06.420 --> 03:31:07.420]  Вот.
[03:31:08.420 --> 03:31:11.420]  Потому что, скажем так, основная идея будет у нас такая.
[03:31:12.420 --> 03:31:13.420]  Почему именно столько?
[03:31:14.420 --> 03:31:16.420]  Идея у нас будет в том, вот как это свести...
[03:31:17.420 --> 03:31:18.420]  Зачем нам нужна теперь вот такая куча?
[03:31:19.420 --> 03:31:20.420]  А очень просто.
[03:31:21.420 --> 03:31:25.420]  Потому что дело в том, что нам же в идеале захочется делать какой-то вот экстракт-мин.
[03:31:26.420 --> 03:31:27.420]  Обычно...
[03:31:28.420 --> 03:31:29.420]  Ну, как делается экстракт-мин?
[03:31:30.420 --> 03:31:31.420]  Ну, обычно...
[03:31:32.420 --> 03:31:33.420]  Обычно экстракт-мин делается...
[03:31:34.420 --> 03:31:36.420]  То есть, то экстракт-мин обычно делается, что мы свапаем с каким-то там ребенком.
[03:31:37.420 --> 03:31:39.420]  И после этого делаем какой-то севдаун.
[03:31:40.420 --> 03:31:42.420]  На севдаун делается за высоту умножить на.
[03:31:42.420 --> 03:31:43.420]  Умножить на.
[03:31:44.420 --> 03:31:48.420]  Умножить на количество детей, чтобы из них выбрать минимум. Правда?
[03:31:49.420 --> 03:31:50.420]  Так вот.
[03:31:51.420 --> 03:31:52.420]  Очень-очень хочется...
[03:31:53.420 --> 03:31:55.420]  Этот минимум на самом деле...
[03:31:56.420 --> 03:32:00.420]  Вот для того, чтобы искать минимум быстрее, давайте вот в этих все элементы хранить...
[03:32:01.420 --> 03:32:03.420]  То есть, вот эти вот корневые элементы хранить...
[03:32:04.420 --> 03:32:06.420]  Вот в этом вот маленьком хипе.
[03:32:07.420 --> 03:32:09.420]  Давайте назовем его AF-хип.
[03:32:10.420 --> 03:32:11.420]  Для себя.
[03:32:13.420 --> 03:32:14.420]  А это вот Q-хип.
[03:32:15.420 --> 03:32:16.420]  То есть, вот это вот...
[03:32:17.420 --> 03:32:21.420]  То есть, вот на вот этом вот мы храним AF-хип.
[03:32:22.420 --> 03:32:23.420]  Вот.
[03:32:24.420 --> 03:32:25.420]  Ну, типа да.
[03:32:26.420 --> 03:32:27.420]  Вот.
[03:32:31.420 --> 03:32:32.420]  Так что...
[03:32:33.420 --> 03:32:34.420]  Да, но на самом деле да.
[03:32:35.420 --> 03:32:40.420]  В идее, конечно, возможно, нам потребуется, чтобы у нас еще всякие декрески еще за единицу делались.
[03:32:42.420 --> 03:32:44.420]  Ну, кстати, ладно, давайте допишем, что нам сложно, что ли.
[03:32:47.420 --> 03:32:48.420]  Да.
[03:32:48.420 --> 03:32:49.420]  Что?
[03:32:49.420 --> 03:32:50.420]  На всех.
[03:32:51.420 --> 03:32:52.420]  В каждой...
[03:32:53.420 --> 03:32:54.420]  Тут, тут, вот тут AF-хип.
[03:32:55.420 --> 03:32:57.420]  Тут AF, тут AF, везде.
[03:33:01.420 --> 03:33:02.420]  Но я говорю так.
[03:33:03.420 --> 03:33:07.420]  По сути, у каждой вершины, у которой есть дети, я храню этих детей в хипе.
[03:33:08.420 --> 03:33:09.420]  В AF-хипе.
[03:33:09.420 --> 03:33:10.420]  То есть, я сразу всех детей храню?
[03:33:11.420 --> 03:33:13.420]  Ну, детей, да, не потомков, а именно детей, да.
[03:33:15.420 --> 03:33:17.420]  А, то есть, у каждой вершинки есть свой AF-хип?
[03:33:17.420 --> 03:33:18.420]  Да.
[03:33:18.420 --> 03:33:19.420]  В котором хранятся дети.
[03:33:20.420 --> 03:33:21.420]  Типа в идеале B.
[03:33:22.420 --> 03:33:23.420]  Но это в идеале.
[03:33:23.420 --> 03:33:29.420]  Да, декрески, забыл сказать, конечно же, ну, чтобы у нас была адекватная D экстра за E плюс В лог В, нам требуется декрески адекватной за единицу, правда?
[03:33:31.420 --> 03:33:33.420]  Поэтому ставочки тут, конечно, такие.
[03:33:34.420 --> 03:33:36.420]  То есть, всякие тут декрески, конечно, везде потребуется.
[03:33:36.420 --> 03:33:37.420]  Везде потребуется.
[03:33:39.420 --> 03:33:40.420]  За от единицы.
[03:33:41.420 --> 03:33:42.420]  Ну, и тут понятно.
[03:33:43.420 --> 03:33:47.420]  Ну, там обычно будет речь уже о том, чтобы просто выпиливать рандомные элементы за единицу.
[03:33:48.420 --> 03:33:49.420]  Поэтому, соответственно.
[03:33:50.420 --> 03:33:51.420]  Ладно.
[03:33:52.420 --> 03:33:53.420]  Итак, давайте думать.
[03:33:54.420 --> 03:33:55.420]  Как же это сделать?
[03:33:57.420 --> 03:33:59.420]  Ну, конечно, жестко.
[03:33:59.420 --> 03:34:07.420]  Ну, а первых, как вы уже сказали, таких деревьев у нас, то есть, как бы придется, то есть, саму себе кучу придется хранить в нескольких деревьев, правда?
[03:34:15.420 --> 03:34:16.420]  Ну, типа того, да.
[03:34:17.420 --> 03:34:18.420]  Но, правда, тут есть оговорчика.
[03:34:19.420 --> 03:34:24.420]  Оговорчика будет заключаться в том, что, конечно же, мы будем хранить несколько таких деревьев.
[03:34:25.420 --> 03:34:29.420]  Но так как у нас вот, да, то есть, как бы, но идея такая.
[03:34:30.420 --> 03:34:47.420]  То есть, для каждой высоты h мы будем хранить не более, ну, допустим, не более, чем b-1 дерево.
[03:34:52.420 --> 03:34:53.420]  Вот.
[03:34:54.420 --> 03:34:55.420]  Ну, во-первых, смотрите.
[03:34:56.420 --> 03:34:57.420]  Значит, магия такая.
[03:34:58.420 --> 03:34:59.420]  То есть, в идеале хотелось бы, чтобы это была куча, да.
[03:35:00.420 --> 03:35:01.420]  Но, правда, будьте внимательны.
[03:35:02.420 --> 03:35:03.420]  Сейчас у нас парадигма будет меняться каждую минуту.
[03:35:04.420 --> 03:35:06.420]  Потому что мы как бы мечтаем, мы думаем.
[03:35:07.420 --> 03:35:08.420]  Потому что, смотрите.
[03:35:09.420 --> 03:35:17.420]  Ну, как бы в идеале просто у нас мелькает такая идея, что раз у нас тут b детей, то хочется сказать, что если у нас есть, то есть, раз у нас есть деревья разных высот, да.
[03:35:18.420 --> 03:35:28.420]  Ну, мы знаем, помните, в какой-нибудь там биномяльной куче у нас были идеи, что если у нас есть два дерева одинаковой высоты, то мы из них можем делать просто одно дерево более высокого порядка, правда.
[03:35:29.420 --> 03:35:32.420]  Но тут мы хотим, чтобы, как бы, высоты были более-менее одинаковые, да.
[03:35:33.420 --> 03:35:34.420]  Ну, вот.
[03:35:35.420 --> 03:35:44.420]  Поэтому, наверное, хочется идейно иметь себе в виду, что у нас, как бы, если есть b деревьев одинаковой высоты, вот я тут высоты h имеется в виду.
[03:35:45.420 --> 03:35:58.420]  То есть я очень хочу, чтобы у меня этих, чтобы если у меня стало в какой-то момент b деревьев высоты h, то я быстренько из них сварганил новое дерево высоты h плюс один.
[03:36:01.420 --> 03:36:02.420]  А вот.
[03:36:03.420 --> 03:36:04.420]  Но как же я это сделаю?
[03:36:08.420 --> 03:36:09.420]  Вот как?
[03:36:10.420 --> 03:36:12.420]  Действительно, как же я это сделаю?
[03:36:13.420 --> 03:36:15.420]  Сделаю я это неожиданным образом.
[03:36:17.420 --> 03:36:22.420]  На самом деле, знаете, я скажу, что это b дерево, это ну не прям куча.
[03:36:24.420 --> 03:36:26.420]  Это b-ичное дерево отрезков.
[03:36:30.420 --> 03:36:32.420]  Да, такая смена парадигмы, да.
[03:36:32.420 --> 03:36:33.420]  Ну, по сути, да.
[03:36:33.420 --> 03:36:40.420]  То есть у нас типа на нижнем ряду хранятся все элементы, а тут вот мы тут постепенно храним минимумы, минимумы и так далее.
[03:36:41.420 --> 03:36:42.420]  Вот.
[03:36:42.420 --> 03:36:44.420]  То есть мы пока имеем в виду, честно скажу, может быть, да.
[03:36:45.420 --> 03:36:55.420]  Как-то, может быть, вы даже записывайтесь, потому что тут сначала давайте, как говорится, да, поймем окончать на победную идею, а потом уже будем записывать на самом деле, да.
[03:36:55.420 --> 03:36:56.420]  Вот.
[03:36:56.420 --> 03:36:57.420]  Но суть одна.
[03:36:58.420 --> 03:37:00.420]  Теперь, но тогда в таком случае возникнет вопрос.
[03:37:01.420 --> 03:37:02.420]  Хорошо, как этот минимум выпиливать?
[03:37:03.420 --> 03:37:09.420]  Потому что хорошо, понятно, что, наверное, в каждом элементе вот в этом минимуме мы, наверное, можем хранить ссылку на то, а что это за минимум вообще, да?
[03:37:12.420 --> 03:37:20.420]  Но идея, на самом деле, может быть, ну вот, в принципе, мы можем хранить ссылку на это, а что это за минимум вообще, да?
[03:37:21.420 --> 03:37:29.420]  Но идея, на самом деле, может быть, ну вот, в принципе, да, если у нас есть такая парадигма, то есть у нас есть вектор, векторов куч такой, да.
[03:37:30.420 --> 03:37:36.420]  Ну аши у нас, слава богу, ну пока не сильно много, пока кажется, что и столько, хотя их явно может оказаться чуть побольше.
[03:37:38.420 --> 03:37:39.420]  Но асимптотика такая.
[03:37:40.420 --> 03:37:42.420]  Потому что давайте себе вообразим.
[03:37:43.420 --> 03:37:46.420]  Хорошо там, то есть как мы хотим вообще удалять?
[03:37:48.420 --> 03:37:49.420]  Удалять мы, наверное, хотим так.
[03:37:50.420 --> 03:37:57.420]  То есть удаляем так, то есть мы находим, где тут на нижнем уровне находится этот минимум и что с ним делать?
[03:37:58.420 --> 03:37:59.420]  Присвоить ему бесконечность?
[03:38:00.420 --> 03:38:12.420]  Ну, как сказать, да. Можно, конечно, присвоить бесконечность, но тогда, как бы понятно, мы должны будем как-то периодически это прореживать.
[03:38:13.420 --> 03:38:19.420]  То есть мы должны будем периодически, то есть мы там периодически должны будем как-то от этого избавляться.
[03:38:20.420 --> 03:38:21.420]  Значит, тут предлагается неожиданная вещь.
[03:38:22.420 --> 03:38:26.420]  А давайте-ка мы просто, если тут какого-то ребенка надо отпилить, давайте его отпилим.
[03:38:27.420 --> 03:38:29.420]  И всех детей, на всех уровнях.
[03:38:30.420 --> 03:38:32.420]  Ага, ну нет, ну со всех детей, ну всех не получится.
[03:38:33.420 --> 03:38:34.420]  Ну всех, наверное, многовато.
[03:38:35.420 --> 03:38:36.420]  Поэтому...
[03:38:37.420 --> 03:38:39.420]  Да, это да-да, но это в идеале, если тут по б детей.
[03:38:40.420 --> 03:38:49.420]  Да, то есть если выпиливать, тогда у нас получится б на лог-лог-н там каких-то деревьев, которые надо аккуратненько как-то куда-то там вставить, как-то с ними разобраться.
[03:38:50.420 --> 03:38:52.420]  Нельзя ли поддерживать статически эту структуру?
[03:38:53.420 --> 03:38:55.420]  Нет, ну там статически совсем не получится.
[03:38:56.420 --> 03:38:59.420]  Но для того, чтобы у нас была там со всеми инсектами амортизации, предлагается делать так.
[03:39:00.420 --> 03:39:05.420]  Мы себе разрешаем, чтобы количество детей было от б пополам до б.
[03:39:07.420 --> 03:39:09.420]  Ведь что-то подобное у нас было, помните?
[03:39:10.420 --> 03:39:15.420]  Мы разрешаем, то есть, пойте, в круче фибоначи мы себе сказали, что ладно, если от нас пилили одного ребенка, то нормально.
[03:39:16.420 --> 03:39:18.420]  А вот если отпилили второго, значит что-то не так.
[03:39:18.420 --> 03:39:20.420]  Значит пришло время отпилить нас.
[03:39:21.420 --> 03:39:23.420]  Ну и здесь примерно то же самое.
[03:39:24.420 --> 03:39:27.420]  Ну собственно или там в софте P у нас тоже что-то подобное возникало.
[03:39:28.420 --> 03:39:33.420]  Хотя бы выяснили, что вроде нет в этом необходимости, но там обычно в сифте считается, что давайте отпилим б пополам.
[03:39:34.420 --> 03:39:36.420]  Что типа пока от нас отпилили немного детей, нормально.
[03:39:37.420 --> 03:39:39.420]  Если отпилили половину, значит давайте расформируем нас как родители.
[03:39:40.420 --> 03:39:41.420]  Вот.
[03:39:42.420 --> 03:39:44.420]  Так что вот такая идея.
[03:39:44.420 --> 03:39:46.420]  Идея получается такая тоже рекурсия.
[03:39:47.420 --> 03:39:49.420]  То есть отпиливаем ребенка и проверяем.
[03:39:50.420 --> 03:39:54.420]  Если здесь осталось более чем b пополам детей, значит в этом месте все в порядке.
[03:39:55.420 --> 03:40:05.420]  Если детей оказалось менее чем b пополам, то тогда мы эту вершину расформировываем.
[03:40:06.420 --> 03:40:11.420]  То есть все эти вершины добавляем в наш вектор векторов как деревья высоты ноль.
[03:40:11.420 --> 03:40:16.420]  А отсюда значит выпиливаем элемент, если тут и смотрим сколько тут осталось и так далее.
[03:40:17.420 --> 03:40:19.420]  То есть вот такая идея.
[03:40:20.420 --> 03:40:25.420]  То есть идея такая. Мы поддерживаем вариант, что у каждой вершины детей от b пополам до b.
[03:40:26.420 --> 03:40:28.420]  Когда мы решили отпилить ребенка, мы проверяем.
[03:40:29.420 --> 03:40:31.420]  Если у родителей больше чем b пополам детей, мы ничего не делаем.
[03:40:32.420 --> 03:40:38.420]  Но как только их осталось b пополам или меньше, мы расформировываем тогда родительскую вершину.
[03:40:38.420 --> 03:40:42.420]  То есть отпиливаем уже аж вот это под дерево.
[03:40:43.420 --> 03:40:45.420]  Объявляем, что этого родителя больше нет.
[03:40:46.420 --> 03:40:50.420]  А все его оставшиеся не более чем b пополам детей это полноценные деревья высоты ноль.
[03:40:51.420 --> 03:40:53.420]  И мы их добавляем в наш вектор векторов.
[03:40:54.420 --> 03:40:59.420]  А мы храним для каждой высоты.
[03:41:00.420 --> 03:41:04.420]  То есть аж равно, допустим, ноль, один, два, три, четыре, пять.
[03:41:05.420 --> 03:41:11.420]  И идея тут такая. Мы в каждом дереве храним набор каких-то куч.
[03:41:12.420 --> 03:41:14.420]  Вот набор, набор, набор, набор, набор.
[03:41:18.420 --> 03:41:20.420]  Ну и фишка будет в том, что надо...
[03:41:23.420 --> 03:41:25.420]  Ну там просто добавление.
[03:41:25.420 --> 03:41:27.420]  Ну тогда пришло время...
[03:41:32.420 --> 03:41:34.420]  Нет, они не будут за себя ссылаться.
[03:41:35.420 --> 03:41:37.420]  Нет, это не пересекающиеся деревья.
[03:41:38.420 --> 03:41:40.420]  То есть важно, что как бы объединение...
[03:41:41.420 --> 03:41:43.420]  То есть каждый элемент лежит...
[03:41:47.420 --> 03:41:49.420]  Там подразумевается так.
[03:41:50.420 --> 03:41:54.420]  Каждый элемент этого дерева это отдельное дерево высоты аж.
[03:41:56.420 --> 03:41:58.420]  Ну типа да.
[03:41:59.420 --> 03:42:01.420]  Ну и во всех наших, да.
[03:42:02.420 --> 03:42:04.420]  То есть там фишка будет такая.
[03:42:05.420 --> 03:42:08.420]  То есть мы просто все эти бэп-полам детей попушбэкаем вот сюда.
[03:42:09.420 --> 03:42:10.420]  Ну вот.
[03:42:11.420 --> 03:42:13.420]  Мы выпиливаем эту вершину.
[03:42:14.420 --> 03:42:18.420]  И теперь смотрим. У этой вершины у дедушки тоже могло остаться не более чем бэп-полам детей.
[03:42:19.420 --> 03:42:21.420]  Но если осталось более, то все в порядке.
[03:42:22.420 --> 03:42:24.420]  Если осталось не более, то мы тогда ее расформироваем.
[03:42:25.420 --> 03:42:27.420]  И вот здесь отправляем список вот этот.
[03:42:28.420 --> 03:42:30.420]  Очень удобно, оказывается.
[03:42:31.420 --> 03:42:33.420]  Удобно, оказывается.
[03:42:34.420 --> 03:42:36.420]  Но правда тут оговорка.
[03:42:37.420 --> 03:42:41.420]  Мы поддерживаем вариант, что тут в каждом списке деревьев не слишком много.
[03:42:42.420 --> 03:42:48.420]  Ну потому что если это не прореживать, то тогда скорее всего будет ситуация, что все будет лежать вот здесь.
[03:42:49.420 --> 03:42:51.420]  И тогда у вас по сути дерево превратится в список.
[03:42:52.420 --> 03:42:53.420]  Это нам не надо.
[03:42:53.420 --> 03:42:54.420]  Вот поэтому.
[03:42:55.420 --> 03:42:58.420]  Но это на самом деле все делается как в инсекте.
[03:42:59.420 --> 03:43:03.420]  Потому что все делается, ну как бы все вставки такие сюда, они поддерживаются очень просто.
[03:43:04.420 --> 03:43:07.420]  То есть вы когда вставляете дерево, говорите, если у вас тут образовалось списки б деревьев,
[03:43:08.420 --> 03:43:13.420]  то вы тратите от б времени на то, чтобы соответственно превратить их в одно.
[03:43:14.420 --> 03:43:15.420]  Логично, да?
[03:43:16.420 --> 03:43:17.420]  Вот.
[03:43:18.420 --> 03:43:20.420]  Но причем рекурсивно, естественно.
[03:43:20.420 --> 03:43:25.420]  Потому что могло так случиться, у вас тут б превратили в одно, push back то ли сюда, и у вас тут уже переполнение.
[03:43:26.420 --> 03:43:27.420]  Вот.
[03:43:28.420 --> 03:43:29.420]  Вот.
[03:43:30.420 --> 03:43:32.420]  По сути так, просто фишка.
[03:43:33.420 --> 03:43:34.420]  То есть так делается инсект.
[03:43:35.420 --> 03:43:36.420]  Ну потому что инсект как делается.
[03:43:37.420 --> 03:43:39.420]  Мы создаем дерево высоты 0 из себя любимой, пихаем его сюда.
[03:43:40.420 --> 03:43:43.420]  Но вот с вот этим вот каскаем объединений.
[03:43:44.420 --> 03:43:45.420]  То есть вот такая классическая идея.
[03:43:46.420 --> 03:43:48.420]  Хотя в общем-то, как показывает Пашка, вообще-то достаточно сложная такая.
[03:43:48.420 --> 03:43:49.420]  Хотя сложно тут будет.
[03:43:50.420 --> 03:43:55.420]  Идея-то может и несложная, но остается только понять, почему это работает за адекватную симпатику.
[03:43:58.420 --> 03:44:00.420]  Ну хотя в принципе...
[03:44:01.420 --> 03:44:02.420]  Это вот самое интересное.
[03:44:03.420 --> 03:44:05.420]  А, ну и самое главное, что как искать минимум-то вообще?
[03:44:06.420 --> 03:44:07.420]  Экстракт минимум, как делать?
[03:44:08.420 --> 03:44:09.420]  Очень просто.
[03:44:10.420 --> 03:44:11.420]  Это все.
[03:44:12.420 --> 03:44:14.420]  Нам гарантируется, что высота любого дерева...
[03:44:15.420 --> 03:44:16.420]  Но нам...
[03:44:17.420 --> 03:44:19.420]  Ну хотя с другой стороны, давайте подумаем.
[03:44:20.420 --> 03:44:22.420]  А какая может быть у нас высота дерева?
[03:44:23.420 --> 03:44:24.420]  Вообще?
[03:44:25.420 --> 03:44:26.420]  Ну заметьте...
[03:44:27.420 --> 03:44:28.420]  Ну вот.
[03:44:30.420 --> 03:44:31.420]  Ну да.
[03:44:32.420 --> 03:44:33.420]  Заметим на самом деле следующее.
[03:44:34.420 --> 03:44:35.420]  Что по сути у дерева высоты аж.
[03:44:36.420 --> 03:44:37.420]  То есть, во-первых, заметим, что...
[03:44:38.420 --> 03:44:42.420]  Ну я утверждаю, что как бы у каждого дерева есть такое свойство СБ дерева.
[03:44:42.420 --> 03:44:45.420]  Такое, что все листы находятся на одной и той же глубине, правда?
[03:44:48.420 --> 03:44:49.420]  Вот.
[03:44:50.420 --> 03:44:53.420]  И причем у каждой вершины, которая не лист, детей хотя бы пополам, правда?
[03:44:54.420 --> 03:44:59.420]  Поэтому какая-то оценка типа log n на log log n остается верной.
[03:45:02.420 --> 03:45:03.420]  Вот. Потому что...
[03:45:04.420 --> 03:45:11.420]  То есть тогда у нас действительно высота, то есть действительно логарифм n все еще, но по основанию не log 2n, а log 2n пополам.
[03:45:13.420 --> 03:45:17.420]  Но это как бы все равно log n вот.
[03:45:18.420 --> 03:45:19.420]  Но как бы отличие только в том...
[03:45:20.420 --> 03:45:22.420]  Ну по сути тут там двоечка просто где-то вот здесь вылезет, по сути, да?
[03:45:27.420 --> 03:45:28.420]  Ну не важно.
[03:45:29.420 --> 03:45:30.420]  А ну или там даже минус один, но хотя да.
[03:45:31.420 --> 03:45:32.420]  Давайте так.
[03:45:33.420 --> 03:45:34.420]  Вот это точно верно.
[03:45:35.420 --> 03:45:37.420]  Там уже конкретную алгебру прописывать не будем.
[03:45:38.420 --> 03:45:40.420]  То есть получается, да, есть там какое-то ограничение на высоту.
[03:45:40.420 --> 03:45:45.420]  Но самое главное, что просто эта высота, будем считать, что она не превосходит log 2n.
[03:45:49.420 --> 03:45:51.420]  Поделить на log n.
[03:45:52.420 --> 03:45:53.420]  Зачем я это себе говорю?
[03:45:55.420 --> 03:45:56.420]  Потому что я хочу следующий.
[03:45:57.420 --> 03:45:59.420]  Как я буду искать? Я хочу еще экстракт мин быстро искать себе, да?
[03:46:02.420 --> 03:46:03.420]  Как я это буду делать?
[03:46:04.420 --> 03:46:05.420]  А я это делаю простым образом.
[03:46:06.420 --> 03:46:07.420]  Я возьму все корни.
[03:46:07.420 --> 03:46:08.420]  Все корни.
[03:46:09.420 --> 03:46:12.420]  То есть я как бы возьму все корни всех деревьев, которые у меня тут есть.
[03:46:14.420 --> 03:46:18.420]  И такжественно отправлю их в еще один af-hip.
[03:46:19.420 --> 03:46:20.420]  Который у меня на этот раз будет реально.
[03:46:21.420 --> 03:46:23.420]  То есть видите, здесь у меня размеры должны были быть не более чем логарифом.
[03:46:24.420 --> 03:46:25.420]  А вот тут мне лог квадрат и пригодится.
[03:46:26.420 --> 03:46:28.420]  Ну не лог квадрат, он конечно там получится поменьше.
[03:46:29.420 --> 03:46:30.420]  Там по факту лог квадрат n даже меньше.
[03:46:31.420 --> 03:46:32.420]  Это поделить на log log n по факту.
[03:46:33.420 --> 03:46:34.420]  А как мы можем все этого af-hip засунуть?
[03:46:35.420 --> 03:46:42.420]  Ну в смысле, для каждого дерева, у каждого дерева, который тут лежит, будет вот этот минимальный элемент, который мы будем отправлять сюда.
[03:46:43.420 --> 03:46:45.420]  Короче, от него минимальный?
[03:46:46.420 --> 03:46:47.420]  Да.
[03:46:48.420 --> 03:46:49.420]  То есть от каждого дерева минимум.
[03:46:50.420 --> 03:46:51.420]  То есть это такой вот супер там.
[03:46:52.420 --> 03:46:54.420]  То есть как бы у нас как бы мы побили как бы элементы на кучу чемпионатов.
[03:46:55.420 --> 03:46:57.420]  Там какие-то чемпионаты высоты 0, высоты 1, высоты 2 и так далее.
[03:46:58.420 --> 03:47:01.420]  И у нас получилось таких не более чем лог квадрат чемпионатов.
[03:47:01.420 --> 03:47:05.420]  И чемпионов этих чемпионатов мы отправили себе в суперфинал.
[03:47:06.420 --> 03:47:07.420]  Вот.
[03:47:08.420 --> 03:47:09.420]  Как удалять?
[03:47:10.420 --> 03:47:11.420]  Как удалять?
[03:47:12.420 --> 03:47:13.420]  Ну удалять значит еще раз.
[03:47:14.420 --> 03:47:15.420]  Как удалять?
[03:47:16.420 --> 03:47:20.420]  А почему мы это экстрактно сделали за лог?
[03:47:21.420 --> 03:47:23.420]  Мы таким образом экстрактно находим, да?
[03:47:24.420 --> 03:47:25.420]  Да.
[03:47:26.420 --> 03:47:28.420]  А каким образом это сделано за лог?
[03:47:29.420 --> 03:47:30.420]  А потому что...
[03:47:31.420 --> 03:47:32.420]  А смотрите, фишка такая.
[03:47:33.420 --> 03:47:35.420]  Потому что как мы будем устраивать конкретное удаление элемента?
[03:47:36.420 --> 03:47:38.420]  Причем даже не важно, кстати, минимум или произвольного.
[03:47:39.420 --> 03:47:41.420]  Значит до какого-то момента...
[03:47:42.420 --> 03:47:45.420]  То есть мы будем идти от листа до корня.
[03:47:49.420 --> 03:47:52.420]  Но обычно, когда нам нужно просто найти минимум,
[03:47:53.420 --> 03:47:55.420]  обычно мы для каждого элемента будем хранить, где этот минимум находится.
[03:47:56.420 --> 03:47:57.420]  А так, когда вы говорите удалить минимум,
[03:47:58.420 --> 03:48:00.420]  но обычно, помните, у нас есть классика, что когда вы в куче фибоначей,
[03:48:01.420 --> 03:48:03.420]  когда вы хотите удалить какой-то элемент,
[03:48:04.420 --> 03:48:07.420]  обычно у вас есть какой-то итератор на тему того, где он находится.
[03:48:08.420 --> 03:48:10.420]  Здесь будет подразумеваться примерно то же самое.
[03:48:11.420 --> 03:48:13.420]  То есть подразумевается, когда лежит...
[03:48:14.420 --> 03:48:17.420]  Вам не скажут абстрактно, у тебя там был элемент,
[03:48:18.420 --> 03:48:20.420]  равный 57, удали его.
[03:48:21.420 --> 03:48:23.420]  Нет, такого у нас не будет.
[03:48:24.420 --> 03:48:25.420]  У нас есть...
[03:48:26.420 --> 03:48:27.420]  Ладно, максимум что...
[03:48:28.420 --> 03:48:30.420]  Ну там, конечно, разные технологии есть, как это обойти, но, соответственно...
[03:48:31.420 --> 03:48:32.420]  У нас есть итератор на минимум.
[03:48:33.420 --> 03:48:34.420]  Ну допустим, вот вам тыкнули, вот этот лист надо удалить.
[03:48:35.420 --> 03:48:37.420]  Как мы это делали?
[03:48:38.420 --> 03:48:39.420]  Удалять каскадно.
[03:48:40.420 --> 03:48:42.420]  То есть в какой-то момент удаление...
[03:48:43.420 --> 03:48:45.420]  Каскадно-каскадно, в какой-то момент удаление закончилось.
[03:48:46.420 --> 03:48:47.420]  Вот.
[03:48:48.420 --> 03:48:49.420]  Но тогда из этого элемента просто надо...
[03:48:50.420 --> 03:48:52.420]  Так как тут все дети хранились в атоме к хипе,
[03:48:53.420 --> 03:48:56.420]  значит мы просто сделали удаление из этого АФ-хипа.
[03:48:57.420 --> 03:49:00.420]  Но там мы предназбываем, что удаление уже как-нибудь за единицу сделается.
[03:49:01.420 --> 03:49:02.420]  А где АФ-хипа?
[03:49:03.420 --> 03:49:06.420]  В каждой вершине дети хранятся в АФ-хипе.
[03:49:07.420 --> 03:49:09.420]  То есть из этого АФ-хипа элемент удалили.
[03:49:10.420 --> 03:49:12.420]  Но здесь, очевидно, дилит тоже делается за единицу,
[03:49:13.420 --> 03:49:14.420]  потому что дилит можно свести к экстракт-мину,
[03:49:15.420 --> 03:49:17.420]  где крестки до минус бесконечности, экстракт-мину.
[03:49:18.420 --> 03:49:20.420]  Поэтому дилит тоже за единицу неважно.
[03:49:21.420 --> 03:49:24.420]  Значит вы его удалили и за одно минимум пересчитали.
[03:49:25.420 --> 03:49:29.420]  Потом вам придется пройти до конца, и эти минимумы правдейтить, конечно.
[03:49:30.420 --> 03:49:32.420]  Поэтому, то есть у вас получилось,
[03:49:33.420 --> 03:49:36.420]  то есть вы потратили время, и получается от высоты дерева,
[03:49:37.420 --> 03:49:38.420]  то есть лог-н делить на лог-лог-н,
[03:49:39.420 --> 03:49:43.420]  плюс время, которое вы потратили на формирование вот этих деревьев.
[03:49:46.420 --> 03:49:47.420]  Нет, мы его не будем оптимизировать.
[03:49:48.420 --> 03:49:49.420]  Мы просто докажем, что это работает круто.
[03:49:52.420 --> 03:49:55.420]  Я думаю, вы уже даже примерно догадываетесь, каким образом.
[03:49:55.420 --> 03:49:57.420]  То есть на самом деле просто фишка такая,
[03:49:58.420 --> 03:50:01.420]  потому что очень хочется сказать, что на самом деле инсорт,
[03:50:02.420 --> 03:50:04.420]  то есть на самом деле инсорта на самом деле,
[03:50:05.420 --> 03:50:07.420]  у нас на самом деле работает от единицы за счет чего?
[03:50:08.420 --> 03:50:10.420]  Это просто куча нулевой кубины.
[03:50:11.420 --> 03:50:12.420]  Ну вот.
[03:50:13.420 --> 03:50:16.420]  Потому что смотрите, чаще всего инсорт будет,
[03:50:17.420 --> 03:50:19.420]  просто мы тут попушбекали, и все, на этом закончили, да?
[03:50:20.420 --> 03:50:22.420]  Единственное то, что мы здесь делаем,
[03:50:22.420 --> 03:50:23.420]  мы попушбекали, и все, на этом закончили, да?
[03:50:24.420 --> 03:50:26.420]  Единственное то, когда тут стало слишком много деревьев,
[03:50:27.420 --> 03:50:28.420]  давайте их объединять.
[03:50:29.420 --> 03:50:32.420]  На это надо потратить, ну, наверное, о от б времени, правда?
[03:50:33.420 --> 03:50:36.420]  Ну, о от б конкретно здесь, плюс еще тут, тут, тут, тут, да?
[03:50:37.420 --> 03:50:39.420]  Ну так идея такая, давайте добавим,
[03:50:40.420 --> 03:50:45.420]  то есть давайте каждому инсорту добавим две красные монетки.
[03:50:46.420 --> 03:50:47.420]  То есть каждый раз, когда мы добавляем элемент,
[03:50:48.420 --> 03:50:50.420]  мы кладем в него две красные монетки.
[03:50:53.420 --> 03:50:55.420]  Ну вот, что?
[03:50:56.420 --> 03:51:00.420]  А, да, да, да, пардон, пардон, пардон, да, вот здесь надо рисовать, конечно.
[03:51:01.420 --> 03:51:02.420]  Давайте две красные монетки.
[03:51:03.420 --> 03:51:04.420]  Для чего я это делаю?
[03:51:05.420 --> 03:51:06.420]  Я хочу поддерживать инвариант.
[03:51:07.420 --> 03:51:09.420]  То есть я хочу поддерживать инвариант,
[03:51:10.420 --> 03:51:14.420]  что у меня на каждом дереве, то есть на каждом корне каждого дерева здесь,
[03:51:15.420 --> 03:51:16.420]  лежат по две монетки.
[03:51:19.420 --> 03:51:20.420]  Вот, понимаете, да?
[03:51:21.420 --> 03:51:22.420]  На каждом корне по две монетки.
[03:51:23.420 --> 03:51:24.420]  Да, на каждом корне по две монетки.
[03:51:25.420 --> 03:51:27.420]  Тогда, когда мне приходит время объединять деревья,
[03:51:28.420 --> 03:51:30.420]  я должен превратить 2b монеток в две монетки.
[03:51:31.420 --> 03:51:33.420]  Я очень хочу надеяться, что 2b минус 2 монеток,
[03:51:34.420 --> 03:51:39.420]  2b минус 2 монетки мне хватит на то, чтобы создать b дерево.
[03:51:40.420 --> 03:51:42.420]  То есть сделать вот эту вот о от б операцию.
[03:51:42.420 --> 03:51:45.420]  Ну, можно сказать, что у нас не 2, там 2b минус 2.
[03:51:46.420 --> 03:51:48.420]  Ладно, сказать, что у нас лишнее 2b минус 2, но еще две монетки накидать.
[03:51:49.420 --> 03:51:51.420]  Ну, там, хотя нет, две монетки лучше уже не накидывать.
[03:51:52.420 --> 03:51:54.420]  Ну, короче, пусть будет 2b минус 2 больше либо равно b и будет радость.
[03:51:55.420 --> 03:51:56.420]  Правда?
[03:51:57.420 --> 03:51:58.420]  Что не так?
[03:51:59.420 --> 03:52:01.420]  Что смущает, что 2b минус 2 больше либо равно b?
[03:52:02.420 --> 03:52:03.420]  Давай.
[03:52:04.420 --> 03:52:05.420]  Давай, не умирай, пока тут дадут.
[03:52:06.420 --> 03:52:07.420]  Вот.
[03:52:07.420 --> 03:52:08.420]  Ну, да, просто мы b достаточно большое возьмем и все, да.
[03:52:09.420 --> 03:52:12.420]  Ну, скажем, b равно, там, я не знаю, 3.
[03:52:14.420 --> 03:52:15.420]  Вот, там пойдет.
[03:52:16.420 --> 03:52:17.420]  Ладно, не важно.
[03:52:18.420 --> 03:52:19.420]  Вот.
[03:52:20.420 --> 03:52:21.420]  Ну, вот.
[03:52:22.420 --> 03:52:25.420]  Но тогда получится, что конкретно инстинкт действительно работает за 1.
[03:52:26.420 --> 03:52:29.420]  Потому что все вот эти вот каскадные мержи мы тупо оплатили.
[03:52:30.420 --> 03:52:31.420]  Удобно, да?
[03:52:32.420 --> 03:52:33.420]  Да.
[03:52:33.420 --> 03:52:34.420]  А теперь фишка.
[03:52:35.420 --> 03:52:36.420]  Откуда мы еще монетки возьмем?
[03:52:37.420 --> 03:52:40.420]  На вот, потому что у нас же еще есть вот эти вот каскадные безобразия, да?
[03:52:42.420 --> 03:52:44.420]  Так вот, фишечка теперь такая.
[03:52:45.420 --> 03:52:46.420]  b пополам b, да?
[03:52:47.420 --> 03:52:50.420]  Ну, в принципе, да, тут, наверное, вы уже могли давно пробить, на самом деле, уже.
[03:52:51.420 --> 03:52:54.420]  Потому что мы же, ну, вот, давайте, когда мы выпиливаем...
[03:52:55.420 --> 03:52:57.420]  Смотрите, когда мы отпиливаем ребеночка,
[03:52:57.420 --> 03:52:59.420]  мы кладем на вершинку...
[03:53:02.420 --> 03:53:03.420]  4...
[03:53:05.420 --> 03:53:08.420]  Да, 4, то есть вот на этого родителя кладем 4 зеленые монетки.
[03:53:12.420 --> 03:53:13.420]  Да.
[03:53:14.420 --> 03:53:16.420]  Это не считая тех вот красных, которые тут лежат.
[03:53:17.420 --> 03:53:18.420]  Да?
[03:53:19.420 --> 03:53:20.420]  Да.
[03:53:21.420 --> 03:53:23.420]  Это не считая тех вот красных, которые тут лежат.
[03:53:24.420 --> 03:53:25.420]  Да.
[03:53:26.420 --> 03:53:27.420]  Да, они лежат только...
[03:53:28.420 --> 03:53:30.420]  Нет, она лежат именно на родителе, но только на корне лежат какие-то две,
[03:53:31.420 --> 03:53:32.420]  но на нем могут еще свои зеленые лежать.
[03:53:33.420 --> 03:53:34.420]  Именно когда мы отрезаем...
[03:53:35.420 --> 03:53:37.420]  Да, когда мы от вершины отрезали какого-то ребеночка,
[03:53:38.420 --> 03:53:40.420]  мы положили мне 4 зеленые монетки.
[03:53:42.420 --> 03:53:43.420]  Зачем мы это делаем?
[03:53:44.420 --> 03:53:45.420]  Да, потому что...
[03:53:46.420 --> 03:53:48.420]  Да, то есть теперь идея такая.
[03:53:49.420 --> 03:53:52.420]  То есть, когда у нас осталось b пополам детей,
[03:53:52.420 --> 03:53:53.420]  то получается...
[03:53:54.420 --> 03:53:57.420]  А может я даже и переборщил, может даже двух зеленых достаточно.
[03:53:58.420 --> 03:53:59.420]  Да, давайте две.
[03:54:00.420 --> 03:54:03.420]  Потому что, смотрите, у нас тогда останется b пополам деревьев
[03:54:04.420 --> 03:54:06.420]  и b зеленых монеток.
[03:54:08.420 --> 03:54:10.420]  И тогда получается мы можем теперь...
[03:54:11.420 --> 03:54:13.420]  Ну, может быть там, ладно, 4 монетки может и стоить,
[03:54:14.420 --> 03:54:15.420]  чтобы там оплатить совсем мелкую технику.
[03:54:16.420 --> 03:54:19.420]  Но суть в том, что просто так как у нас будет b пополам деревьев
[03:54:19.420 --> 03:54:21.420]  и b пополам деревьев и b зеленых монеток,
[03:54:22.420 --> 03:54:25.420]  то тогда получается, что мы теперь каждое дерево можем добавить
[03:54:26.420 --> 03:54:27.420]  с своими двумя монетками.
[03:54:28.420 --> 03:54:31.420]  А мы помним, что от единицы у нас было чисто на то,
[03:54:32.420 --> 03:54:33.420]  что мы дали эти две монетки.
[03:54:34.420 --> 03:54:37.420]  Ну, ладно, плюс сам пушбек, но на самом деле там пушбеки,
[03:54:38.420 --> 03:54:39.420]  кроме самого первого, легко оплачиваются, очевидно.
[03:54:39.420 --> 03:54:42.420]  У нас перед постом мы удалили b пополам.
[03:54:43.420 --> 03:54:44.420]  Детей?
[03:54:45.420 --> 03:54:46.420]  Да, отлично.
[03:54:47.420 --> 03:54:48.420]  Так что мы в этом месте делаем?
[03:54:48.420 --> 03:54:49.420]  Мы удаляем эту вершину.
[03:54:51.420 --> 03:54:53.420]  То есть мы там получается удаляем эту вершину.
[03:54:54.420 --> 03:54:59.420]  А вот на эти b пополам детей у нас образовалась b монетка.
[03:55:00.420 --> 03:55:02.420]  Вот эти вот сколько-то монеток.
[03:55:03.420 --> 03:55:07.420]  И теперь, да, теперь на каждое дерево мы распределили
[03:55:07.420 --> 03:55:10.420]  по две монетки на каждое из этих деревьев,
[03:55:11.420 --> 03:55:13.420]  и с этими монетками их пушбекаем сюда.
[03:55:14.420 --> 03:55:18.420]  И тогда получается, что мы их после этого пушбекаем за бесплатно.
[03:55:23.420 --> 03:55:26.420]  Ну, да, я просто подчекивал, откуда они взялись.
[03:55:26.420 --> 03:55:27.420]  Ну, сформулируем так.
[03:55:28.420 --> 03:55:29.420]  Ну, там нот.
[03:55:30.420 --> 03:55:33.420]  Ну, как бы, когда ты его удалишь, ты там положишь еще две зеленые монетки.
[03:55:37.420 --> 03:55:38.420]  Ну, смотри.
[03:55:38.420 --> 03:55:41.420]  Но на самом деле сам по себе проход по этому дереву мы не оплачиваем.
[03:55:41.420 --> 03:55:43.420]  У нас лог n делить на лог лог n, да?
[03:55:44.420 --> 03:55:48.420]  Поэтому, в принципе, сами вот эти вот от единицы там операции
[03:55:49.420 --> 03:55:50.420]  и т.д.
[03:55:50.420 --> 03:55:52.420]  Они не считаются.
[03:55:55.420 --> 03:55:56.420]  Да.
[03:55:58.420 --> 03:56:00.420]  Но можно и так сказать, да.
[03:56:01.420 --> 03:56:03.420]  Ну, да, тут каскадо.
[03:56:03.420 --> 03:56:05.420]  Потому что в этой вершине тоже хранятся зеленые монетки.
[03:56:05.420 --> 03:56:08.420]  Если мы отпилили, решили отпилить к нее ребеночка,
[03:56:08.420 --> 03:56:11.420]  то мы делаем не только это, но еще и тут две монетки кладем.
[03:56:14.420 --> 03:56:15.420]  И вот это все.
[03:56:15.420 --> 03:56:16.420]  Так, это всё.
[03:56:16.420 --> 03:56:22.480]  только это но еще и тут две монетки кладем тратя на это все равно от единицы
[03:56:22.480 --> 03:56:38.420]  времени просто конечно ну типа того туда ну например смотрите мы же как бы
[03:56:38.420 --> 03:56:44.220]  проход сам по себе мы работаем за логен поделить налог логен поэтому в
[03:56:44.220 --> 03:56:47.860]  принципе на каждую вершину там от щедрот своих положить лишние 2 2
[03:56:47.860 --> 03:56:51.060]  монетки никаких проблем нет
[03:57:01.180 --> 03:57:06.980]  но например но если быть четная дата но можно там раздая ну скажи так эту
[03:57:06.980 --> 03:57:10.620]  мелочь можно уже допилить как угодно можно сказать что бэк счетной сказать
[03:57:10.620 --> 03:57:14.060]  чтобы полом нас устраивает можно сказать что давайте вместо двух
[03:57:14.940 --> 03:57:19.380]  музыки чтобы не лишь две две зеленые монетки вот на это и две какие
[03:57:19.380 --> 03:57:23.380]  я моментки на все на всякий пожарный но там просто чтоб гарантия что у нас там
[03:57:23.380 --> 03:57:28.440]  лишнее лишь киев от единицы действия мы можем
[03:57:28.440 --> 03:57:32.420]  оплатить здесь оплатить там вот за это там передать наверх в общем как угодно
[03:57:32.420 --> 03:57:40.060]  это но это уже откровенной де té это уже откровенный детала реализации вот но
[03:57:40.060 --> 03:57:44.040]  так то есть то есть мы таким образом то есть конкретно то есть мы добили
[03:57:44.040 --> 03:57:49.160]  того что то есть потому что то есть мы показали следующие то есть мы показали что если у нас
[03:57:49.160 --> 03:57:54.720]  есть дерево и две монетки которым дерево две монетки то мы pushback-нуть их вот в это дерево
[03:57:54.720 --> 03:58:02.560]  можем за ноль за учетное время ноль ну просто в инсерте эти два монетки мы просто даем красными
[03:58:02.560 --> 03:58:09.040]  монетками создаться сам факт инсерта остальные зеленые монетки берутся ну уже понятно откуда
[03:58:09.040 --> 03:58:18.440]  вот то есть уже из там самих структуры стальные ну вот вот но единственное там конечно оговорка
[03:58:18.440 --> 03:58:23.360]  чтобы во всех этих объединениях конечно есть еще такой важный момент что мы эти б-элементов
[03:58:23.360 --> 03:58:29.880]  еще должны выпилить из аф хипа и добавить в них один но это все вписывается в отб потому что мы
[03:58:29.880 --> 03:58:34.720]  из этого хипа мы умеем доставать доставать элементы за единицу и совать элементы завод единицы
[03:58:34.720 --> 03:58:47.280]  понятна логика да нет в этот аф хип мы кладем просто корни все то есть там элементы
[03:58:47.280 --> 03:58:53.440]  грехи в корнях всех вот этих деревьев и там ну деревьев мало поэтому тут аф хип адекватный
[03:58:53.440 --> 03:58:59.640]  потому что тут высота у нас не более чем лог в каждом не более чем лог деревья поэтому получается
[03:58:59.640 --> 03:59:05.240]  лог квадрат даже потому что у нас есть аф хип который говорит что если хип маленький то мы
[03:59:05.240 --> 03:59:10.640]  все за единицу делаем то есть эти фишка именно в том что мы говорим что если элементов мало
[03:59:10.640 --> 03:59:16.560]  например там логн или лог квадрат то мы все умеем делать за единицу мы говорим так тогда мы можем
[03:59:16.560 --> 03:59:21.720]  для за н тоже быстрее работать потому что делим на уровне делим на максимальный уровень так чтобы
[03:59:21.720 --> 03:59:29.600]  на каждом уровне все за единицу делать то есть по сути идея в этом то есть таким образом вот
[03:59:29.600 --> 03:59:35.520]  дапло но то есть таким вот на самом деле не самым хитрым образом на самом деле то есть как бы не
[03:59:35.520 --> 03:59:40.480]  самый хитрый амортизации уже в общем-то нам знакомый получается что вот это сведение выполнено
[03:59:40.480 --> 04:00:01.320]  ну да нет там нет сейчас где ну нет здесь мы не делаем декриски мы сделаем мы здесь
[04:00:01.320 --> 04:00:19.760]  делаем дилет отсюда вот этот вот да но если он поменялся надо проследить что если он
[04:00:19.760 --> 04:00:24.600]  случайно поменялся но не расформировался то значит да но это все равно от единицы поэтому
[04:00:25.080 --> 04:00:31.000]  да но это все равно от единицы поэтому не интересно вот так что вот таким образом мы
[04:00:31.000 --> 04:00:46.080]  внезапно победили вот это сведение декриски а элементарно как-то хочешь уменьшить вот этот
[04:00:46.080 --> 04:01:03.080]  ключ так но вот нет ну как бы ответ так а вот давайте действительно подумать хороший вопрос
[04:01:03.080 --> 04:01:13.400]  нет нет на самом деле фишки но вот
[04:01:13.400 --> 04:01:42.640]  нет ну так вот хороший вопрос вот давайте думать вот давайте внимательно думать
[04:01:42.640 --> 04:01:48.520]  умеем ли мы декриски за вот единицы адекватно делать а может но вот да
[04:01:48.520 --> 04:02:01.240]  там просто фишка такая если вырезал элементы тебе придется пробежаться до корня и поменять
[04:02:01.240 --> 04:02:15.840]  минимум это на самом деле действительно то есть действительно тут оказывается подляночек
[04:02:15.840 --> 04:02:22.480]  да не умеем поэтому с точки зрения поэтому с этой точки зрения возникает вопрос они
[04:02:22.480 --> 04:02:37.760]  поторопились и мы выводить дерево отрезков да вот да да я обнаглел да вот да то есть
[04:02:37.960 --> 04:02:56.480]  да нет хотелось бы конечно декриски за вот единицы это да нет это нелогично потому что у
[04:02:56.480 --> 04:03:01.200]  тебя тут как бы формально все минимумы по всей высоте изменим могут изменять если на каждом
[04:03:01.200 --> 04:03:05.440]  шаре делаешь декриски реально минимального элемента в дереве то тебе придется по всему
[04:03:05.600 --> 04:03:26.080]  проходить в таком формате нет ну вот нет поэтому нет с этой точки зрения на самом деле вот
[04:03:26.080 --> 04:03:30.520]  действительно может возникнуть действительно маленький красивый вопрос действительно не
[04:03:31.360 --> 04:03:37.120]  а теперь давайте попробую хорошо с деревом отрезков мы поняли а теперь давайте а теперь
[04:03:37.120 --> 04:03:47.800]  нет а теперь нет а теперь давайте а теперь давайте кучу вернем кучу элементов этих вот
[04:03:47.800 --> 04:03:57.720]  хорошо потому что смотрите в итоге идея нот но давайте посмотрим куда нотку куда нас вывезет
[04:03:57.720 --> 04:04:01.720]  потому что давайте предположим что это куча реальная просто то есть как бы храним реально
[04:04:01.720 --> 04:04:06.440]  боечную кучу просто гарантия что у каждой вершины детей может быть не ровно б от
[04:04:06.440 --> 04:04:12.200]  б пополам до б и соответственно гарантируем что естественно каждый элемент меньше чем дети
[04:04:12.200 --> 04:04:33.840]  то есть вот такая вот идея ничего мы продолжаем смысле что так так все нот да да да но до этого
[04:04:33.840 --> 04:04:41.680]  да сейчас не понял вопроса всех детей храним в чем но детей храни до детей естественно храним
[04:04:41.680 --> 04:04:49.280]  в куче да твоя в куче да ну поехали так как тогда все это но insert работает абсолютно так же тут
[04:04:49.280 --> 04:04:59.620]  никаких проблем нет вот теперь это просто как делается но как делается экстракт мин но на
[04:04:59.620 --> 04:05:06.200]  самом деле заметим что экстракт мин делает но экстракт мин тогда по такому раскладу делается
[04:05:06.200 --> 04:05:15.880]  так то есть получается что нам нужно расформировать ну как бы тупой вариант был бы нам нужно взять
[04:05:15.880 --> 04:05:19.560]  расформировать корень объявить что у нас есть просто теперь появилась там от бы полам да
[04:05:19.560 --> 04:05:27.560]  б деревьев надо их попу же быть но это долго это логарифом она логарифом деревьев пушбек от нас
[04:05:27.560 --> 04:05:37.360]  все-таки не устраивает но с другой стороны идея такая а челка рифм да а давайте это
[04:05:37.360 --> 04:05:50.560]  умное слово сив да он смотрите как на самом деле все делается мы идем в какой-нибудь лист да
[04:05:50.860 --> 04:06:02.800]  понимаете да и swap инот то что мы делаем то есть идея такая то есть давайте то есть
[04:06:02.800 --> 04:06:08.600]  это то сделаем так то есть в этом листе напишем допустим плюс бесконечность в этом элементе
[04:06:08.600 --> 04:06:13.960]  напишем вот наш элемент и после этого сделаем честный севдал пока предельно честный правда
[04:06:13.960 --> 04:06:19.460]  прямо часто часто его опустили и опустили прямо вот за высотой опустили потому что на
[04:06:19.460 --> 04:06:25.380]  каждом уровне работаем за понятно сколько да понимаете логику да а
[04:06:25.380 --> 04:06:28.780]  после этого теперь говорим так вот у нас тут образовал слишком плюс
[04:06:28.780 --> 04:06:33.900]  бесконечность а вот ее давайте выпилим
[04:06:36.820 --> 04:06:43.900]  понятно да нет смотрите как мы делаем вообще экстракт мин в абсолютно
[04:06:43.900 --> 04:06:50.740]  обычной двоичной куча мы делаем так помните мы делали так мы минимум свапали
[04:06:50.740 --> 04:06:54.580]  с последним элементом да делали тут всегда он а вот этот последний элемент
[04:06:54.580 --> 04:07:00.180]  удаляли да ну там поп-бэк просто делали да так вот здесь мы делаем
[04:07:00.180 --> 04:07:05.340]  абсолютно то же самое то есть посвапаем ее единственное что она вот и проделаем
[04:07:05.340 --> 04:07:10.020]  себе просто вот честные севдауны но если окажется что этот элемент все равно
[04:07:10.020 --> 04:07:15.060]  меньше своих детей то как бы ну и хорошо если не окажется то мы его свапаем с
[04:07:15.060 --> 04:07:21.540]  минимумом да но вот там свапаем с минимум и где но там и где он там
[04:07:21.540 --> 04:07:24.700]  оказался идем там под деревой делаем то же самое то есть абсолютно классический
[04:07:24.700 --> 04:07:29.540]  севдау только единственное что с каждой вершиной то есть на каждой высоте мы
[04:07:29.540 --> 04:07:35.100]  тут за единицу работаем потому что мы минимум из детей находим в эфх и пе
[04:07:35.100 --> 04:07:45.980]  чего а мы обратите внимание мы в этом месте никого не удалили то есть мы
[04:07:45.980 --> 04:07:50.420]  сказали что этот элемент теперь плюс бесконечность и мы его посвапали но
[04:07:50.420 --> 04:07:55.620]  структуру дерева мы пока никак не поменяли то есть я посвапал и делаю
[04:07:55.620 --> 04:08:00.740]  севдауны севда он свапает некоторые элементы но не меняет структуру вот но
[04:08:00.740 --> 04:08:05.100]  потом в конце у нас просто останется что ну мы уже потратили логан поделить
[04:08:05.100 --> 04:08:09.420]  налог логан времени да а теперь вот этот вот плюс бесконечность вот давайте
[04:08:09.420 --> 04:08:19.420]  теперь ее выпилим и вот теперь то все начинает работать значит что это значит
[04:08:19.420 --> 04:08:26.460]  что это дало это дало что теперь декриски мы делаем также как делали в
[04:08:26.460 --> 04:08:31.780]  куче фибоначи а именно то есть вот у нас жила было вершина которую мы неожиданно
[04:08:31.780 --> 04:08:36.820]  захотели уменьшить она находится то есть на ней какой-то борода висит какая-то
[04:08:36.820 --> 04:08:45.420]  да ну и она на чем-то там висит да так вот идея такая а давайте-ка выпилим все
[04:08:45.420 --> 04:08:50.820]  это под дерево помните как мы в куче фибоначи делали декриски мы просто
[04:08:50.820 --> 04:08:55.100]  были так вершина не корень а давайте сделаем ее корнем и делаем вот тут
[04:08:55.900 --> 04:09:01.660]  но вот перед тем как ее добавлять дерево естественно мы скажем что это так как это
[04:09:01.660 --> 04:09:05.380]  декриски то мы теперь в этой вершине можем ее уменьшать как нам заблагорассудится
[04:09:05.380 --> 04:09:12.500]  предварительно сделаем и добавляем дерево да положив на нее две монетки которые мы за сам
[04:09:12.500 --> 04:09:18.020]  фарки киски нам дали там какие-нибудь специальные красивые рыжие монетки
[04:09:18.020 --> 04:09:27.660]  что не но нет те зеленые монетки которые на ней лежали они остаются лежать на будущее
[04:09:27.660 --> 04:09:44.500]  ну типа того но вот так но при на но а но опять это та технический деталь
[04:09:45.500 --> 04:09:51.700]  давайте ну экономисты пока не пришли так что давайте хочет это добиться не
[04:09:51.700 --> 04:09:58.380]  хочется в следующий раз возвращаться нет вот там хорошо там просто но фишка будет такая
[04:09:58.380 --> 04:10:05.220]  ну нет вот там ладно там уже оказывалось что но там в будущем когда у нас будет
[04:10:05.220 --> 04:10:10.420]  каскадин когда можно сказать что новопришедшие две монетки на самом деле то есть как бы мы
[04:10:10.420 --> 04:10:14.260]  говорим так хотим там отпилить а там и так уже много монеток но отлично значит
[04:10:14.260 --> 04:10:19.780]  эти монетки оставляем а наши новые две монетки положим потом то есть по сути нам тогда то есть
[04:10:19.780 --> 04:10:24.260]  можно это довести так что реально новые монетки нам придется класть не на каждую высоту а только
[04:10:24.260 --> 04:10:29.740]  зологарифа то есть а только один раз когда мы отпилили от кого-то ребенков и нам сказали
[04:10:29.740 --> 04:10:44.820]  что нет у нас еще нормально мы сами выпиливаться не будем что вот так что поздравляем да мы
[04:10:44.820 --> 04:10:49.340]  превратили кучу в деревоотресков потом деревоотресков превратили в кучу и победили
[04:10:49.340 --> 04:10:59.140]  да но про нет это просто как бы наш способ как мы к этому пришли ладно остается только
[04:10:59.140 --> 04:11:09.540]  финальный вопрос как вы думаете как вот это сводится к этому но на самом деле да
[04:11:09.540 --> 04:11:20.500]  нет смотрите идея на самом деле очень проста вот здесь смотрите здесь b равно лог 2 n так вот
[04:11:20.500 --> 04:11:26.620]  идея такая как свести вот эту штуку с размером лог квадрат n вот это размера лог 1 делить на 4
[04:11:26.620 --> 04:11:40.100]  практически тоже самое только здесь сказать что b равно лог степени нет это важно 1 5 для
[04:11:40.100 --> 04:11:52.620]  чего я делаю потому что высота такого дерева будет ну то есть будет но будет что-то типа вот
[04:11:52.620 --> 04:12:05.540]  логарифом вот этого да то что-то типа 2 лог лог n но вот ну поделить что-то такое в общем там понот
[04:12:05.540 --> 04:12:16.820]  да то есть на самом деле да то есть высота такого дерева здесь будет вот тупо константа
[04:12:16.820 --> 04:12:24.820]  почему я здесь делаю пятую а не четвертую ну чисто для того чтобы у меня получилось что
[04:12:24.820 --> 04:12:29.740]  у меня тут как бы высота бывает высоты деревьев там бывает не более чем констант там 11 или там
[04:12:29.740 --> 04:12:36.220]  в два раза больше там неважно но вот но как бы я хочу чтобы но как бы тогда вот в этом хипе
[04:12:36.220 --> 04:12:41.940]  у меня должно лежать получается сколько у нас получается должно лежать там вот элементов
[04:12:41.940 --> 04:12:50.020]  b умножить насколько высота поэтому как бы мне не надо лог степени 1 5 мне нужно чтобы умещалась
[04:12:50.020 --> 04:12:57.700]  лог 1 5 умножить на константу поэтому я тут вместо поэтому я тут себе как бы потребовал чтобы нет
[04:12:57.700 --> 04:13:06.180]  тут нет хотя нет тут наоборот когда надо нет тут тогда надо наоборот сводить немножко то есть
[04:13:06.180 --> 04:13:12.020]  тогда это надо сводить чтобы тогда чтобы тут была четвертая тут придется бы конечно а нет стоп не а
[04:13:12.020 --> 04:13:17.820]  не нормально нормально да да да так чтобы один чтобы как бы 11 на вот этот лагерь на вот это
[04:13:17.820 --> 04:13:31.420]  умещалось вот в это и оно умещается еще раз потому ну давай посчитаем а какая у нас глубина всего
[04:13:32.380 --> 04:13:39.660]  значит глубина у нас получается логарифом по основанию логарифом в степени 1 пятое
[04:13:39.660 --> 04:13:50.500]  логарифом в квадрате это что такое это логарифом двоичный логарифом в квадрате
[04:13:50.500 --> 04:14:02.760]  n поделить на логарифом двоичный логарифом двоичный в степени 1 пятое понимаете да это на
[04:14:02.760 --> 04:14:17.480]  самом деле равно 2 лог лог n поделить на 1 пятое лог лог н шлеп шлеп 10 тупо алгебра
[04:14:17.480 --> 04:14:34.220]  нет нет логарифом лог квадрата логарифом x квадрата так это 2 лог x нет так что нет
[04:14:34.220 --> 04:14:41.720]  степень сюда выносится правильно вот получается тут константа то есть тут как бы то есть конечно
[04:14:41.720 --> 04:14:47.800]  да желательно да начинается какого-то n заметим что действительно 11 вот этих неправосудно там
[04:14:47.800 --> 04:14:53.800]  это не более чем вот столько да поэтому там начинается что видимо реально это начинает
[04:14:53.800 --> 04:14:59.960]  работать до прием больше чем 2 в степени 20 степени 12 там какие-таки числа иногда употребляются
[04:14:59.960 --> 04:15:12.200]  ну а при меньших n все константа да ну в данном случае да но там просто где-то употребляйте
[04:15:12.200 --> 04:15:20.760]  штамп же отдельная песня как же работает собственно сам кусип вот скажем так видимо
[04:15:20.760 --> 04:15:26.720]  будет время желаний силы может быть мы один там четыре с половиной часа на это потратим и то
[04:15:26.720 --> 04:15:34.520]  не уверен что уложимся вот ну вот то есть я поэтому честно скажу поэтому я не уверен то есть
[04:15:34.520 --> 04:15:39.320]  как бы шоку хип пойдет у нас программа но вот эта технология как бы она достаточно стандартно
[04:15:39.320 --> 04:15:45.800]  поэтому вот это хочется вот так что ладно так что в следующий раз видим будет чем-нибудь
[04:15:45.800 --> 04:15:51.320]  полегче да поэтому например метод четырех русских а на этом все
