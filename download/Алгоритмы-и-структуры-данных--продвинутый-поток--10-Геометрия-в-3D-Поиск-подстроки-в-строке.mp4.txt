[00:00.000 --> 00:12.080]  Пришло нам время вывести из плоскости и попробовать посмотреть на мир в трёхмерии.
[00:12.080 --> 00:20.920]  Ну давайте сначала, да, можно просто для начала разомнуться. А что у нас в трёхмерии вообще есть?
[00:20.920 --> 00:35.160]  Ну самое тупую, что есть, это, конечно, точка. Она же вектор. Ну как всегда. Так, спрашивается,
[00:35.160 --> 00:42.120]  ну ещё на этих векторах есть. Ну что с этими векторами можно делать? Ну у векторов есть,
[00:42.120 --> 00:48.240]  конечно же, его величество скалярное произведение, которое по мистическим причинам
[00:48.240 --> 00:59.000]  меряется абсолютно таким же образом. Ну как таким же образом, да. То есть, на самом деле,
[00:59.000 --> 01:03.080]  определение можно такое ввести в абсолютно любом пространстве, ну а потом уже сидеть и
[01:03.080 --> 01:06.480]  доказывать, что это там какое-нибудь там произведение модулей на кассивус,
[01:06.480 --> 01:13.560]  угла между гиметом, бла-бла-бла-бла-бла-бла. Что-то нас мало стало. Кто-то исчез? Не до жизни.
[01:13.560 --> 01:29.000]  Ну, впрочем, да. Вы уже сдали экзамен по линалу, ещё раз нему апеллируем. И тогда вы знаете,
[01:29.000 --> 01:35.160]  что с векторным произведением, ура, наконец-то мы можем употреблять это слово сочетание в честно,
[01:35.160 --> 01:45.160]  здесь уже немножко не то. А что такое векторное произведение? Да, начнём с того, что это вектор.
[01:45.160 --> 01:57.600]  Какой-то мистический вектор В, который как устроен? Ну, мы знаем, что модуль В равен чему. Ну, как
[01:57.600 --> 02:05.840]  всегда, модуль В1 на модуль В2 на что? На синус. На синус, угла между ними. Так, на всякий случай,
[02:05.840 --> 02:15.120]  модуль синуса напишем. При этом, понятно, В перпендикулярно В1 на В2. Да, В перпендикулярно В1 и В2.
[02:15.120 --> 02:22.240]  И последствия, что В1, В2, В образуют положительную диаметрию 3. Да, что это значит? Означает это
[02:22.240 --> 02:29.680]  следующих. Если у нас действительно, скажем, как бы мы видим, что действительно у нас поворот от В1
[02:29.680 --> 02:35.280]  и В2 идет как бы против часовой стрелки, ну, мы всегда можем правильно там либо с этой стороны
[02:35.280 --> 02:40.440]  посмотреть, либо вот с этой вот посмотреть и увидеть, что вот там. То есть, если когда мы видим,
[02:40.440 --> 02:46.680]  что В2 как бы надо повернуть влево, то соответственно тогда, то есть в эту сторону,
[02:46.680 --> 02:54.440]  собственно, этот вот вектор В и пойдет. Как бы физики в этом месте упребят словосочетание правила
[02:54.440 --> 03:04.960]  Гуравчика. Вот, математики. Как там? Левая тройка векторов, да? Или правая? Правая. Ну да, скорее правая.
[03:04.960 --> 03:14.320]  Вот, ну приятно, конечно, что тем не менее, конечно, всякие свойства линейности, естественно,
[03:14.400 --> 03:19.040]  у них сохраняется. Ну и, конечно, маленькое приятное свойство мы говорим перпендикуляр.
[03:19.040 --> 03:24.960]  Обычно, конечно, перпендикуляр к двум векторам, по крайней мере, направление его с точностью длины
[03:24.960 --> 03:28.720]  определяется однозначно, ну, по крайней мере, может там, ну не длина, она может
[03:28.720 --> 03:32.080]  быть типа отрицательной.� competently в доль какой-то прямой он будет смотреть,
[03:32.080 --> 03:37.440]  определяется однозначно, но только в том случае, если эти вектора неколинеальны. А что делать,
[03:37.440 --> 03:42.780]  если эти вектора колинеальны? В этом случае угол между ними либо 0, либо 180, и тогда просто
[03:42.780 --> 03:51.100]  векторное произведение становится нулевым вектором. Так, ну вот, в принципе, уже разомнулись.
[03:51.100 --> 04:06.060]  Что у нас есть еще? Ну, по идее есть еще. Ну, помимо точки, смешанная. Ну, вообще говоря, есть,
[04:06.060 --> 04:15.460]  но да. То есть, как бы теперь нам, опять, Зелосовский вопрос, в какой момент нам понадобится именно смешанная,
[04:15.460 --> 04:21.340]  как смешанная? Потому что, да, в принципе, действительно можно говорить, что если у нас есть тройка векторов,
[04:21.340 --> 04:27.380]  то, действительно, у нее есть такое понятие, как смешанное произведение. Оно как-нибудь обозначается?
[04:27.380 --> 04:35.260]  Через скрубоскопочки? Нет, понятно, что можно написать вот это вот все. Можно просто скрубоскопочки
[04:35.260 --> 04:42.300]  и три вектора внутри, без квадрата. Так тоже пишут. Окей, спасибо. Либо В. Еще буквку В можно написать,
[04:42.300 --> 04:50.140]  как объем. Ну да, мы помним, что да, это имеет смысл то, что это объем параллелепипеда, натянутого на эти три вектора,
[04:50.140 --> 04:56.700]  ну, с оговорочкой, что, как всегда, ориентировано. Да, что ориентировано, что если тройка правоориентирована,
[04:56.700 --> 05:04.500]  то он будет положительный, если левоориентирован, то отрицательный. Да, есть такое, да. То есть, часто
[05:04.500 --> 05:10.100]  мы этим будем пользоваться на тему того, там, например, что если у нас есть плоскость, в какую сторону
[05:10.100 --> 05:18.900]  действительно вектор от нее торчит. Да. Впрочем, прежде чем ввести плоскость, неплохо было бы ввести прямую.
[05:18.900 --> 05:29.980]  А как ввести прямую? А что есть? Ну и какие варианты? Каноническое уравнение. Каноническое уравнение прямой
[05:29.980 --> 05:35.980]  в пространстве, но это которое через три дроби, рамы, которые у нас есть.
[05:35.980 --> 05:48.980]  Х минус Х ноль делится всё. А вот это, да. Это да, это ужасно. Есть векторы на уравнении, есть, например,
[05:48.980 --> 05:55.980]  метрическое уравнение, есть там еще куча разных уравней. Ага. Как говорится, зачем они нужны?
[05:56.980 --> 06:02.980]  Зачем нужны? Потому что ровно в этом месте, казалось бы, у нас возникает, что давайте скажем, что прямая,
[06:02.980 --> 06:09.980]  это вот такая вот уже знакомая нам в плоскости штука. Ну да, это одно и то же. Ну да. Ну переписать можно
[06:09.980 --> 06:17.980]  всё, что угодно, а суть одна. Да. Нет, так-то можно задавать как угодно. Да, можно задать так. А, причем там
[06:17.980 --> 06:23.980]  еще какие-то оголовки, что иногда тут бывает ноль, да? Да, бывает ноль, и тогда мы считаем, что это тоже
[06:23.980 --> 06:33.980]  ноль. Ну что, так-то, конечно, можно задавать, потому что так-то можно прямую задавать вообще хоть там,
[06:33.980 --> 06:39.980]  дана плоскость, простите, дана точка. И прямая говорит, что надо прямая должна проходить через эту точку
[06:39.980 --> 06:44.980]  и быть припетикулярна этой плоскости. Да, не говоря вообще о том, что прямую можно задавать как пересечение
[06:44.980 --> 06:51.980]  двух плоскостей. В общем, ладно. Это, ну вот, как говорится, думается этого мяса у вас в домашнем задании
[06:51.980 --> 06:59.980]  было на вал, я думаю. Вот, ну поэтому давайте лучше тогда более веселый вопрос. А как, собственно, задать плоскость?
[06:59.980 --> 07:11.980]  Как задать плоскость? Ну, на самом деле так. Ну, в первую очередь, да, как ее задать? Можно, да, да,
[07:11.980 --> 07:17.980]  или ну вот. То есть, ну по идее можно ее задать, ну, для нас, наверное, самый классический способ это, конечно,
[07:17.980 --> 07:25.980]  задать ее как точку и двумя направляющими векторами, например. Ну, по идее по трем точкам можно сделать.
[07:25.980 --> 07:31.980]  Да, естественно, только требуется, чтобы три вектора, два вектора были, конечно, неколлиниарны. Вот.
[07:31.980 --> 07:41.980]  Ну и тогда как можно задать плоскость? Тогда плоскость можно задать действительно как P0 плюс T V1 плюс U V2, да,
[07:41.980 --> 07:59.980]  T U, значит, вот такое вот. А можно как множество таких точек P, что, значит, там, что V1, V2, допустим, P0,
[07:59.980 --> 08:13.980]  значит, P-P0 равно нулю. Вот. Ну, фактически, вот аналоги задания. Понимаете, мы так прямую, прямые такие вот так задавали, помните, да?
[08:13.980 --> 08:21.980]  Нет, кстати, это очень удобно, потому что теперь, если у вас есть, кстати, теперь пересечь прямую плоскость, обратите внимание,
[08:21.980 --> 08:29.980]  теперь вам становится достаточно легко. Ну, если прямую задать вот в таком рите, а плоскость вот в таком, то, собственно,
[08:29.980 --> 08:35.980]  вот P плюс VT вот сюда подставляем, решаем линейные выравнения. Ну, собственно, ритм уже загимались.
[08:35.980 --> 08:44.980]  Так, единственное смешанное произведение линейно по своим членам. Ну да, естественно. Так что да, ура, тут можно, то есть,
[08:44.980 --> 08:56.980]  то есть, вот получается, действительно, красота. Хорошо. Ну вот. Так, тогда вопрос посложнее. Да, ну или аналогичным образом можно пересечь прямую и сферу.
[08:56.980 --> 09:12.980]  А так абсолютно так же, потому что если C и радиус R вот у нас на атмосфере есть, то что такое сфера?
[09:12.980 --> 09:24.980]  Да, то есть множество точек P таких, что скалярное произведение P минус C для себя любимого равно R квадрате.
[09:24.980 --> 09:32.980]  Все, подставляем это, квадраты и уравнения. Причем там, по-моему, буковки будут едва ли не те же, чтобы были на плоскости, обретите внимание.
[09:32.980 --> 09:43.980]  Вот. Очень, ну вот. То есть, вот, оказывается, у нас хорошая технология получилась. Да, с пересечением сверх, конечно, так не получится.
[09:44.980 --> 09:57.980]  Так. Ну вот. Ну вот. Ну теперь вот высекает вопрос. А напомните ко мне, как пересекает две, допустим, не сильно, не душе параллельные плоскости?
[09:57.980 --> 10:18.980]  Так. Ну действительно, если плоскости не параллельные, то они пересекаются по прямой.
[10:18.980 --> 10:26.980]  Чтобы задать прямую, нужно задать один точка и один направление. Спрашивается, как задать направление?
[10:26.980 --> 10:45.980]  Да, действительно, да. Значит, да, В1, то есть, да, если В1, В2, то вы без труда можете найти плоскости нормаль.
[10:45.980 --> 10:54.980]  Так, значит, нормаль, это у нас будет просто векторное произведение буквально. Да. Можно найти так одну нормаль, можно найти вторую нормаль.
[10:54.980 --> 11:06.980]  И обнаружить, что наша прямая должна быть пербендикулярна обеим нормалям, поэтому вот направляющий вектор В и пересечение, это будет векторное произведение N1, N2. Замечательно.
[11:06.980 --> 11:20.980]  У меня есть какая-то вопрос. А точку как выковырять?
[11:20.980 --> 11:32.980]  Интересно, есть какой-нибудь такой способ?
[11:32.980 --> 11:42.980]  Да. То есть, на самом деле, да, можно взять, да, вот мы знаем, допустим, вот это направление пересечения В.
[11:42.980 --> 11:50.980]  И, допустим, знаем, что вот в этой плоскости один из этих векторов В1 и В2, наверное, это этому вектору В не параллельно, правда?
[11:50.980 --> 11:58.980]  Может, если, скорее всего, оба, но может не повесить, да? Вот, допустим, оказалось, что В1 не параллельно В.
[11:58.980 --> 12:10.980]  Так, что же тогда можно сделать? Вот тогда заметим, что если эта плоскость выдаётся не только векторами В1, В2, но и точкой П1 какой-нибудь,
[12:10.980 --> 12:20.980]  то, соответственно, чтобы найти какую-нибудь точку, пересекающую вторую плоскость, вам остаётся только сказать, что у вас есть прямая П1 плюс В1 на Т,
[12:20.980 --> 12:32.980]  и эта точка должна лежать во второй плоскости, если есть плоскость А1 и А2. Но остаётся там решить уравнение, собственно, соответствующее Т подставить.
[12:32.980 --> 12:44.980]  Ну вот, общая технология, думаю, понятна, да? Да, то есть действительно, да, на уровне базового пересечения плоскостей, то есть там плоскостей,
[12:44.980 --> 12:58.980]  да, ещё тут по плоскости пересекать плечи. Это получается достаточно несложно. Пока мы не начинаем думать о том, что будет ещё.
[13:14.980 --> 13:24.980]  Ну, нас на самом деле сейчас в 3D будет интересовать один маленький приятный вопрос. Дало ли он точку построить в оболочку?
[13:24.980 --> 13:38.980]  Так, ну давайте подумаем, чем она может быть в 3D? Если не все точки нам на одной плоскости, то это будет в каком-то грани?
[13:38.980 --> 13:48.980]  Да, ну опять можно сразу разобрать простой для нас случай. Что делать, если окажется, что все точки лежат по одной плоскости?
[13:48.980 --> 13:58.980]  Ну, заметим, что да, тогда получается задача ведётся поиску по оболочке на плоскости. То есть вам останется только, скажем, как-нибудь эту плоскость повернуть,
[13:58.980 --> 14:08.980]  чтобы вот или ввести на ней координаты какие-нибудь, чтобы вот тут был X, Y и Z, собственно, торчал в нас. Вот как-то так это обозначается, да?
[14:08.980 --> 14:18.980]  Вот. Ну, это в принципе достаточно легко сделать. В общем-то, заметим, что вот эти ликтора даже не обязаны быть параллельными.
[14:18.980 --> 14:24.980]  В общем-то, какой базис вы не возьмёте, а выклооболочка от этого не поменяет, ну, как последовательность точек, от этого не поменяется, правда?
[14:24.980 --> 14:30.980]  Так что, в общем-то, так что можно прям взять X, Y, просто вот, как угодно.
[14:30.980 --> 14:38.980]  Просто там первые попавшиеся три, ну, не лежащие на одной прямой, конечно же, то будет кайф.
[14:38.980 --> 14:44.980]  Да, то есть это вот, то есть это в общем-то даже не сильно сложно будет.
[14:44.980 --> 14:56.980]  Ну, возникает естественный вопрос. А что же делать, если у нас нашлись четыре точки, не лежащие в одной плоскости?
[14:56.980 --> 14:58.980]  Ну, давайте.
[14:58.980 --> 15:12.980]  Не, ну, понятно, вот таким образом. Хотя тоже, на самом деле, как у нас в случае пересечения полуплоскостей, на самом деле, от количества точек зависит, насколько сильно мы будем страдать.
[15:12.980 --> 15:24.980]  Ну, во-первых, действительно, можно себе вообразить, что у нас получится, что на самом деле можно убедиться, что получится какой-то выпуклый многогранник.
[15:24.980 --> 15:30.980]  Ну, почему он получится? Ну, на самом деле, да, в 2D это было, конечно, более понятно, да?
[15:30.980 --> 15:38.980]  Но в 3D, действительно, можно тоже вместо понятия касательной прямы ввести понятия касательной плоскости, правда?
[15:38.980 --> 15:47.980]  То есть там вот со всех сторон так, это вводить плоскости и вводить, ну, и проводить там эти плоскости так, чтобы они касались этого множества.
[15:47.980 --> 15:59.980]  Ну, к чему это нас приведет? Ну, приведет это нас соответственно к чему, что, то есть если мы тут вот берем точки-точки-точки, да, вот мы тут живем, так, мы тут живем где-то в 3D.
[15:59.980 --> 16:09.980]  Вот, допустим, мы тут живем где-то в трехмерном мире и пытаемся провести какую-нибудь плоскость.
[16:09.980 --> 16:12.980]  Вот, она на нас нападает.
[16:12.980 --> 16:19.980]  Тогда логично, что если эта плоскость подъезжает, подъезжает, подъезжает, то в какой-то момент она врезается в точку, правда?
[16:19.980 --> 16:30.980]  Вот, то есть она действительно так врезается в точку, но и касаться она множество может быть по точке, может быть по двум точкам, а может даже по тому-то.
[16:30.980 --> 16:40.980]  Ну, на самом деле, да, в том случае, когда она начинает касаться по трем, то получается, соответственно, треугольник.
[16:40.980 --> 16:46.980]  Ну, это получается такая вот край будущего многокрайника.
[16:46.980 --> 16:55.980]  Ну, по крайней мере, заметим, что если такая плоскость действительно нашлась, то действительно, ну, то амплитудная плоскость.
[16:55.980 --> 17:01.980]  Ну, вот, единственное, конечно, оголовка, что там может оказаться несколько точек, тогда вот тут выпукло оболочки.
[17:01.980 --> 17:15.980]  Ну, по крайней мере, заметим, что если такая плоскость действительно нашлась, то действительно, ну, то оказывается, что действительно весь этот треугольник заведомо границей выпукло оболочки будет.
[17:15.980 --> 17:19.980]  Ну, собственно, по тем же причинам, которые у нас были в плоскости, правда?
[17:20.980 --> 17:27.980]  Ну, вот. Ну, единственное, конечно, оголовка, что там может оказаться несколько точек, тогда вот тут выпукло оболочку, их действительно придется искать.
[17:27.980 --> 17:33.980]  Ну, вот. Ну, давайте пока, пока для простоты будем считать, что четырех точек лежащей в одной плоскости у нас нет.
[17:35.980 --> 17:36.980]  Вот.
[17:36.980 --> 17:38.980]  Итак.
[17:39.980 --> 17:42.980]  И тогда выясекает вопрос. Как же построить выпукло оболочку?
[17:42.980 --> 17:54.980]  Ну, заметим, выпукло оболочку можно попытаться построить как вот действительно набор плоскостей, которые пересекают, ну, которые касаются множества по трем точкам.
[17:59.980 --> 18:06.980]  И ведь все такие тройки можно найти за о от m в четвертый.
[18:09.980 --> 18:11.980]  Каким образом?
[18:13.980 --> 18:16.980]  Так, может там в телефоне у вас написано? Нет?
[18:17.980 --> 18:18.980]  Это что вы вычитаете?
[18:19.980 --> 18:21.980]  Можно просто все тройки прибрать.
[18:22.980 --> 18:31.980]  Да. То есть, как бы самое тупое, что можно сделать, это взять все тройки точек, через каждую тройку точек провести плоскость и посмотреть.
[18:31.980 --> 18:37.980]  А это случайно не касательно множества точек. Или что-то то же самое. Не верно ли?
[18:37.980 --> 18:38.980]  Все по одну сторону.
[18:38.980 --> 18:42.980]  Да, что все точки находятся в одном полупространстве на этот раз.
[18:43.980 --> 18:51.980]  А как понять? Вот лежит ли точка, лежат ли две точки в одном полупространстве относительно плоскости задней тремя точками? Как же это понять?
[18:55.980 --> 18:57.980]  Ну, как раз…
[18:58.980 --> 19:00.980]  Да, совершенно верно. У нас тут уже…
[19:00.980 --> 19:01.980]  Смешанное произведение.
[19:01.980 --> 19:06.980]  Да. Специально для этого мы изобрели это смешанное произведение.
[19:07.980 --> 19:13.980]  Потому что… Детей-то, давайте подумать, что же такое смешанное произведение на стройке векторов?
[19:13.980 --> 19:25.980]  То есть, по большому счету, это мы берем… То есть, это мы берем у этих двух векторов нормаль и у этой нормали берем скалярное произведение с вот этим третьим вектором, правда?
[19:25.980 --> 19:29.980]  В чем нормаль? Берем строго ориентированную правым образом.
[19:29.980 --> 19:39.980]  И тогда получится, что если у нас войдет в одну полуплоскость с этим вектором, то тогда скалярное произведение будет положительным. В противном случае оно будет отрицательным.
[19:39.980 --> 19:48.980]  Да, ну, помним, да, потому что те же свойства, типа острый угол больше нуля, этот угол меньше нуля, то есть это все с косимусами.
[19:48.980 --> 19:51.980]  Ладно, давайте это допишу. Никуда не длится.
[19:51.980 --> 20:00.980]  Да, это все никуда не делается. То есть, это все продолжает, как ни странно, работать.
[20:00.980 --> 20:06.980]  Ну, хотя никак не странно, потому что, в общем, доказательство, которое мы проворачивали для двумерия, по-моему, в трехмерии прекрасно будет работать.
[20:06.980 --> 20:12.980]  Логично, да? Вот. Так что-то вроде как и кайф.
[20:13.980 --> 20:21.980]  Вот. Поэтому, да, с помощью смешанного произведения определять, действительно, там, в какой полуплоскости находится, без труда.
[20:21.980 --> 20:29.980]  И действительно получается O от N в четвертой. То есть, прям вот перебираем тройки и, собственно, радуемся жить.
[20:29.980 --> 20:36.980]  На самом деле, этот алгоритм можно даже оптимизировать.
[20:37.980 --> 20:40.980]  Потому что мы тратим... Почему это в четвертой?
[20:40.980 --> 20:50.980]  Потому что мы за O от N тестируем тройки на предмет того, являются ли они гранями нашей руклооболочки, да?
[20:50.980 --> 20:55.980]  А вместо этого, ведь, мы могли бы сделать кое-что другое.
[20:55.980 --> 21:00.980]  А именно, давайте вместо этого перебирать пару вершин и вот говорить.
[21:00.980 --> 21:07.980]  И вот говорить. А скажите, пожалуйста, а вот эта пара вершин, является ли она ребров руклооболочки?
[21:07.980 --> 21:10.980]  Да или нет?
[21:10.980 --> 21:12.980]  Нет.
[21:12.980 --> 21:14.980]  Как это понять?
[21:14.980 --> 21:17.980]  То есть, нужно понять, что есть теплопространство через эту...
[21:17.980 --> 21:19.980]  Да, совершенно верно.
[21:19.980 --> 21:21.980]  Плоскость такая, что она отделяется точкой.
[21:21.980 --> 21:27.980]  Да. То есть, действительно, давайте... То есть, мысленно можно себе это вообразить так.
[21:27.980 --> 21:35.980]  Например, давайте вот посмотрим на это ребро, так сказать, сверху вниз, как будто оно нам будет глаз протыкать.
[21:35.980 --> 21:38.980]  Такие-то уже магнитные поля.
[21:38.980 --> 21:41.980]  Причем тут магнитные поля.
[21:41.980 --> 21:43.980]  Там, типа, рисуют там крестик.
[21:43.980 --> 21:46.980]  А, ну да, да, да. Да, да, да. Целка, да.
[21:46.980 --> 21:50.980]  Но слава богу, это ребро конечное, поэтому мы можем глаз чуть подальше отвести.
[21:50.980 --> 21:52.980]  И что же мы на этой плоскости увидим?
[21:52.980 --> 21:57.980]  То есть, если мы так увидим и спроецируем эти точки на эту плоскость, то получится вот наш крестик.
[21:57.980 --> 22:01.980]  И есть какие-то определенного рода точки.
[22:07.980 --> 22:19.980]  Тогда можно заметить следующее, что если эти точки нас окружают прямо вот, набегают на нас так, что нельзя привести какую-то прямую так, чтобы все точки оказались с одной стороны,
[22:19.980 --> 22:25.980]  то утверждается, что это ребро границей выпуклой оболочки не является.
[22:25.980 --> 22:37.980]  То есть, я утверждаю, что в этом случае любая точка этого ребра, ну, кроме, может быть, вот этих вот, со самих вершин, является чем?
[22:37.980 --> 22:40.980]  Ну, правильно, внутрь, строго внутренним.
[22:40.980 --> 22:45.980]  Спрашивается, откуда же я возьму такую информацию?
[22:50.980 --> 22:52.980]  Откуда я возьму?
[22:52.980 --> 22:55.980]  А возьму я ее вот откуда?
[22:55.980 --> 22:57.980]  Вот такой вопрос.
[22:57.980 --> 22:59.980]  А, нет, все нормально.
[22:59.980 --> 23:00.980]  Ну вот.
[23:00.980 --> 23:05.980]  А как мы сейчас будем проверять, что можно привести через эту точку?
[23:05.980 --> 23:07.980]  А вот мы сейчас об этом...
[23:07.980 --> 23:09.980]  Мы сейчас что-то сказали, мы спроецировали на плоскость.
[23:09.980 --> 23:14.980]  Да, мы спроецировали на плоскость, теперь проверяем, можно ли через вот эту точку, а это теперь точка...
[23:14.980 --> 23:16.980]  А, провести прямую, которая разделяет...
[23:16.980 --> 23:18.980]  Нет, которая наоборот.
[23:18.980 --> 23:24.980]  Такую, что в данном случае нельзя, но нам вот идеальный случай вот такой.
[23:26.980 --> 23:32.980]  То есть, можно ли провести какую-то красивую прямую такую, чтобы все точки лежат с одной стороны?
[23:33.980 --> 23:41.980]  Ну, заметим, что если можно, то это будет означать, что я могу как бы перпендикулярно этой плоскости и просто прямую...
[23:41.980 --> 23:47.980]  То есть, перпендикулярно этой плоскости, плоскость через эту прямую провести радостно, да, и это получится касательно.
[23:47.980 --> 23:50.980]  Следовательно, это ребро будет на месте.
[23:50.980 --> 23:56.980]  В чем более того, если точки будут строго там находиться, да, то тогда получится, что эту плоскость по кругу этого ребра,
[23:56.980 --> 24:02.980]  можно себе воображать, можно вот так вот изобразить на маркерах, вот так вот повращать.
[24:05.980 --> 24:09.980]  То есть, получится, что это действительно ребро и получается хорошо.
[24:09.980 --> 24:10.980]  Да.
[24:10.980 --> 24:19.980]  А если на этом ребре еще и других точек нет, а у нас такого нет, потому что у нас раз четыре точки, не какие-то точки в плоскости не лежат,
[24:19.980 --> 24:24.980]  то никакие точки автоматически напрямую не лежат, тогда получится, что это еще и вершина,
[24:24.980 --> 24:27.980]  потому что эту плоскость можно еще вот так вот.
[24:30.980 --> 24:33.980]  Вот, да, тут нам воображения еще хватает.
[24:33.980 --> 24:34.980]  Вот.
[24:34.980 --> 24:38.980]  Но, с другой стороны, а что делать, если такой прямой не существует?
[24:38.980 --> 24:42.980]  То есть, типа, какая бы ни была прямая, обязательно найдется...
[24:44.980 --> 24:47.980]  Обязательно найдется какая-нибудь точка.
[24:47.980 --> 24:49.980]  Не такая.
[24:49.980 --> 24:50.980]  Чего?
[24:50.980 --> 24:56.980]  Мы проводим эти вот сведущие плоскости через прямую, на которой лежат вязанные точки.
[24:56.980 --> 24:57.980]  Да.
[24:57.980 --> 25:04.980]  Да, то есть, ну как бы вот, то есть, вот это вот, так сказать, касательное множество, это вот касательное множество точек прямая.
[25:04.980 --> 25:08.980]  Но это в проекте, на самом деле, у нас имеется в виду вот такая касательная плоскость.
[25:08.980 --> 25:09.980]  Ну понятно.
[25:09.980 --> 25:10.980]  Вот.
[25:10.980 --> 25:15.980]  Но если такой нельзя провести, то, ну вот, тогда можно заметить следующее.
[25:15.980 --> 25:24.980]  Ну, на плоскости можно сказать, что, ну вот, тогда можно найти треугольник, который внутри себя эту точку содержит.
[25:26.980 --> 25:29.980]  Ну, если у нас еще и точки не на одной прямой не лежат, то как бы да.
[25:29.980 --> 25:31.980]  Даже будет строго.
[25:33.980 --> 25:34.980]  Вот.
[25:34.980 --> 25:37.980]  Так, требуется доказать, чтобы треугольник найдется.
[25:38.980 --> 25:39.980]  Нет?
[25:39.980 --> 25:40.980]  Так видите.
[25:40.980 --> 25:41.980]  Смотрите.
[25:41.980 --> 25:42.980]  Вот.
[25:42.980 --> 25:43.980]  Ну вот.
[25:43.980 --> 25:45.980]  Ну, тогда что нам этот треугольник даст?
[25:47.980 --> 25:51.980]  Ну, как, ну вот, действительно, что он нам даст?
[25:52.980 --> 26:09.980]  Ну, как минимум, он нам даст, то есть, через эти три точки можно провести плоскость, которая, ну, такой вот, получится такой вот треугольник, который, вот, либо будет пересекать это ребро, либо его продолжение будет пересекать.
[26:09.980 --> 26:10.980]  Вот, понимаете, да?
[26:12.980 --> 26:15.980]  Ну, с другой стороны, нам тут даже не сильно принципиально продолжение оно будет пересекать или нет.
[26:15.980 --> 26:17.980]  Давайте сразу сложный случай рассмотрим.
[26:18.980 --> 26:20.980]  Вот так что будет рисоваться.
[26:21.980 --> 26:32.980]  Потому что тогда теперь заметим, что если он пересекает еще и строго, вот здесь, да, то тогда можно заметить, что мы можем построить вот такого рода тетраедыр.
[26:32.980 --> 26:35.980]  И это ребро будет просто целиком внутри этого тетраедыра лежать.
[26:37.980 --> 26:42.980]  Ну, да, если бы это треугольник пересекал ребро, мы бы два тетраедыра построили, все было бы строго внутри.
[26:44.980 --> 26:45.980]  Вот.
[26:45.980 --> 26:46.980]  Да, действительно.
[26:48.980 --> 26:52.980]  То есть, таким образом, получается, что мы можем пересекать этот ребро.
[26:52.980 --> 26:59.980]  То есть, таким образом, мы, на самом деле, то есть, таким образом, мы вот для каждой пары рыб как минимум в принципе можем пытаться думать.
[26:59.980 --> 27:00.980]  Является ли оно?
[27:00.980 --> 27:01.980]  Ну, как это сделать?
[27:01.980 --> 27:12.980]  Самый тупой способ, это, конечно, давайте просто, ну, с точки зрения математики самый тупой способ, это давайте построим пропендикулярную плоскость, все, все точки на крыльях.
[27:12.980 --> 27:17.980]  Там перейдем в координаты x, y внутри этой плоскости и начнем там вот эти вот углы искать.
[27:18.980 --> 27:28.980]  Ну, так, а цитируем по полярному углу, там убедимся, что там найдутся там, найдутся где-то там две, два последовательных векторов, между которыми угол 180, больше 180 градусов.
[27:28.980 --> 27:29.980]  Или убедимся, что такого нет.
[27:29.980 --> 27:31.980]  Вот, ну да, как математиков, нас это угол вытворяет.
[27:31.980 --> 27:33.980]  Ну, кодик, наверное, захочется это очень сильно не, правда?
[27:33.980 --> 27:35.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:35.980 --> 27:37.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:37.980 --> 27:39.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:39.980 --> 27:41.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:41.980 --> 27:43.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:43.980 --> 27:45.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:45.980 --> 27:47.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:47.980 --> 27:49.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:49.980 --> 27:51.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:51.980 --> 27:53.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:53.980 --> 27:55.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:55.980 --> 27:57.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:57.980 --> 27:59.980]  А теперь вот отсюда возникает естественный вопрос, да.
[27:59.980 --> 28:01.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:01.980 --> 28:03.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:03.980 --> 28:05.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:05.980 --> 28:07.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:07.980 --> 28:09.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:09.980 --> 28:11.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:11.980 --> 28:13.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:13.980 --> 28:15.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:15.980 --> 28:17.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:17.980 --> 28:19.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:19.980 --> 28:21.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:21.980 --> 28:23.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:23.980 --> 28:25.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:25.980 --> 28:27.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:27.980 --> 28:29.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:29.980 --> 28:31.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:31.980 --> 28:33.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:33.980 --> 28:35.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:35.980 --> 28:37.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:37.980 --> 28:39.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:39.980 --> 28:41.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:41.980 --> 28:43.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:43.980 --> 28:45.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:45.980 --> 28:47.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:47.980 --> 28:49.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:49.980 --> 28:51.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:51.980 --> 28:53.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:53.980 --> 28:55.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:55.980 --> 28:57.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:57.980 --> 28:59.980]  А теперь вот отсюда возникает естественный вопрос, да.
[28:59.980 --> 29:01.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:01.980 --> 29:03.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:03.980 --> 29:05.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:05.980 --> 29:07.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:07.980 --> 29:09.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:09.980 --> 29:11.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:11.980 --> 29:13.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:13.980 --> 29:15.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:15.980 --> 29:17.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:17.980 --> 29:19.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:19.980 --> 29:21.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:21.980 --> 29:23.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:23.980 --> 29:25.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:25.980 --> 29:27.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:27.980 --> 29:29.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:29.980 --> 29:31.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:31.980 --> 29:33.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:33.980 --> 29:35.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:35.980 --> 29:37.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:37.980 --> 29:39.980]  А теперь вот отсюда возникает естественный вопрос, да.
[29:39.980 --> 29:41.980]  Справа возьмем самый большой угол.
[29:41.980 --> 29:43.980]  Справа возьмем самый большой угол.
[29:43.980 --> 29:45.980]  И слева возьмем самый большой угол.
[29:45.980 --> 29:47.980]  И слева возьмем самый большой угол.
[29:47.980 --> 29:49.980]  Ну вот. Ну и теперь два варианта.
[29:49.980 --> 29:51.980]  Ну вот. Ну и теперь два варианта.
[29:51.980 --> 29:53.980]  Ну вот. Ну и теперь два варианта.
[29:53.980 --> 29:55.980]  Ну вот. Ну и теперь два варианта.
[29:55.980 --> 29:57.980]  Ну и теперь два варианта.
[29:57.980 --> 29:59.980]  Ну вот. Ну и теперь два варианта.
[29:59.980 --> 30:01.980]  Ну вот. Ну и теперь два варианта.
[30:01.980 --> 30:03.980]  Ну вот. Ну и теперь два варианта.
[30:03.980 --> 30:05.980]  Ну вот. Ну и теперь два варианта.
[30:05.980 --> 30:07.980]  Ну вот. Ну и теперь два варианта.
[30:07.980 --> 30:09.980]  Ну и теперь возникает такой важный вопрос.
[30:09.980 --> 30:11.980]  Ну и теперь возникает такой важный вопрос.
[30:11.980 --> 30:13.980]  Как мы сравнивали по полярному углу?
[30:13.980 --> 30:15.980]  Ведь мы же не вычисляли в явном виде этот синдром, правда?
[30:15.980 --> 30:17.980]  То есть, эти там не вычисляли,
[30:17.980 --> 30:19.980]  а там 2 же не вызывали,
[30:19.980 --> 30:21.980]  или там прочарк космисы.
[30:21.980 --> 30:23.980]  или там прочарк космисы.
[30:23.980 --> 30:25.980]  Тут мы пользуемся тем,
[30:25.980 --> 30:27.980]  что любые две точки,
[30:27.980 --> 30:29.980]  у векторов, лежащих заведомо в одной полуплоскости,
[30:29.980 --> 30:31.980]  можно между собой сравнить
[30:31.980 --> 30:33.980]  по тупо-верторному произведению.
[30:33.980 --> 30:35.980]  То есть, если вот это на это,
[30:35.980 --> 30:37.980]  соответственно, у нас больше нуля,
[30:37.980 --> 30:39.980]  значит, этот вектор будет типа правее.
[30:39.980 --> 30:41.980]  Ну повернуть правее, конечно.
[30:41.980 --> 30:43.980]  Понял дело такое?
[30:43.980 --> 30:45.980]  Понял.
[30:45.980 --> 30:47.980]  Логично. Ну и с этой стороны тоже.
[30:47.980 --> 30:49.980]  А вот теперь возникает вопрос.
[30:49.980 --> 30:51.980]  После проекции, конечно,
[30:51.980 --> 30:53.980]  на плоскость мы могли бы проделать здесь тоже самое.
[30:53.980 --> 30:55.980]  Но теперь возникает вопрос.
[30:55.980 --> 30:57.980]  А нельзя ли
[30:57.980 --> 30:59.980]  сделать это же, на самом деле,
[30:59.980 --> 31:01.980]  без каких-либо проекций?
[31:01.980 --> 31:03.980]  без каких-либо проекций?
[31:03.980 --> 31:05.980]  По большому счёту, давайте
[31:05.980 --> 31:07.980]  себе вообразим без проекции,
[31:07.980 --> 31:09.980]  как это выглядит.
[31:09.980 --> 31:11.980]  Вот как вот эти вот вектора
[31:11.980 --> 31:13.980]  на самом деле выглядят.
[31:13.980 --> 31:15.980]  То есть, если вот отменить проекцию...
[31:15.980 --> 31:17.980]  Построили плоскость,
[31:17.980 --> 31:19.980]  проходящую чуть-чуть до ребра.
[31:19.980 --> 31:21.980]  Ну да.
[31:21.980 --> 31:23.980]  Эту плоскость, давайте мы можем назвать,
[31:23.980 --> 31:25.980]  даже нарисовать как вот такой треугольчик.
[31:25.980 --> 31:27.980]  Флюгерочек.
[31:27.980 --> 31:29.980]  Ну мы нарисовали один.
[31:29.980 --> 31:31.980]  Есть вот, соответственно, второй.
[31:31.980 --> 31:33.980]  Есть там какой-нибудь вот третий.
[31:33.980 --> 31:35.980]  Есть там какой-нибудь вот четвёртый ещё.
[31:35.980 --> 31:37.980]  И вот возникает вопрос.
[31:37.980 --> 31:39.980]  И вот, на самом деле,
[31:39.980 --> 31:41.980]  можно тогда говорить следующее.
[31:41.980 --> 31:43.980]  Давайте приведём действительно
[31:43.980 --> 31:45.980]  плоскость вот через первый
[31:45.980 --> 31:47.980]  попавшийся флюгерочек, да?
[31:47.980 --> 31:49.980]  Вот опять вот тоже самое сделаем, да?
[31:49.980 --> 31:51.980]  Ой, давайте я ещё марки возьму.
[31:53.980 --> 31:55.980]  Вот ещё один
[31:55.980 --> 31:57.980]  вот такой красивый
[31:57.980 --> 31:59.980]  флюгерочек.
[31:59.980 --> 32:01.980]  Пу-пу-пу-пу.
[32:01.980 --> 32:03.980]  Видите, да?
[32:05.980 --> 32:07.980]  Ну вот, и теперь возникает идея.
[32:07.980 --> 32:09.980]  То есть, получается, видите,
[32:09.980 --> 32:11.980]  букет векторов у нас превратился
[32:11.980 --> 32:13.980]  в такую книжечку.
[32:13.980 --> 32:15.980]  И в этой книжечке,
[32:15.980 --> 32:17.980]  соответственно, надо выбрать самый правый
[32:17.980 --> 32:19.980]  листочек, там самый левый
[32:19.980 --> 32:21.980]  листочек и проверить, там они развернулись
[32:21.980 --> 32:23.980]  не на слишком ли большой угол.
[32:23.980 --> 32:25.980]  И теперь давайте думать.
[32:25.980 --> 32:27.980]  Итак, вот у нас в одной
[32:27.980 --> 32:29.980]  полуплоскости лежат,
[32:29.980 --> 32:31.980]  допустим, два
[32:31.980 --> 32:33.980]  вот таких
[32:33.980 --> 32:35.980]  красивых листочка.
[32:35.980 --> 32:37.980]  Как понять, кто, так сказать...
[32:37.980 --> 32:39.980]  Да, вот мы считаем, что мы смотрим
[32:39.980 --> 32:41.980]  с той стороны, что вот этот вектор направлен
[32:41.980 --> 32:43.980]  так, это нам принципиально, да?
[32:43.980 --> 32:45.980]  То есть, мы как бы вот
[32:45.980 --> 32:47.980]  стоим такие параллельно
[32:47.980 --> 32:49.980]  вот этому вектору, смотрим
[32:49.980 --> 32:51.980]  головой туда.
[32:51.980 --> 32:53.980]  Тогда у нас какая-то книжечка
[32:53.980 --> 32:55.980]  правее, какая-то левее.
[32:55.980 --> 32:57.980]  Вправивается. А как понять?
[32:57.980 --> 32:59.980]  Вот как компьютеру объяснить, кто
[32:59.980 --> 33:01.980]  правее, кто левее?
[33:03.980 --> 33:05.980]  Да!
[33:05.980 --> 33:07.980]  Нас снова приветствует его величество
[33:07.980 --> 33:09.980]  смешанное произведение.
[33:11.980 --> 33:13.980]  Ну, каким образом оно это делает?
[33:13.980 --> 33:15.980]  Ну, в общем-то, элементарно.
[33:15.980 --> 33:17.980]  То есть, мы берем вот этот векторочек,
[33:17.980 --> 33:19.980]  вот этот и действительно замечаем,
[33:19.980 --> 33:21.980]  что как бы вот этот левее
[33:21.980 --> 33:23.980]  оказывается тогда и только тогда, когда
[33:23.980 --> 33:25.980]  когда смешанное произведение
[33:25.980 --> 33:27.980]  этого, этого и этого оказывается
[33:27.980 --> 33:29.980]  больше нуля, правда?
[33:31.980 --> 33:33.980]  Ну, как в этом можно убедиться?
[33:33.980 --> 33:35.980]  Ну, потому что, действительно, заметим, что
[33:35.980 --> 33:37.980]  смешанное произведение у
[33:37.980 --> 33:39.980]  вот этих вот векторов
[33:39.980 --> 33:41.980]  и, на самом деле,
[33:41.980 --> 33:43.980]  вот этих вот векторов, вот этого, этого,
[33:43.980 --> 33:45.980]  этого, на самом деле суть одно и то же.
[33:47.980 --> 33:49.980]  Красно?
[33:53.980 --> 33:55.980]  Красно?
[33:59.980 --> 34:01.980]  Вот, смотрите, я утверждаю следующее,
[34:01.980 --> 34:03.980]  что, допустим, если я приведу через эту точку
[34:03.980 --> 34:05.980]  вот перпендикулярную плоскость, вот так
[34:05.980 --> 34:07.980]  здесь, да, эти точки
[34:07.980 --> 34:09.980]  на эту плоскость спроецирую, вот
[34:09.980 --> 34:11.980]  рассмотрю вот эти вектора, да,
[34:11.980 --> 34:13.980]  то я утверждаю, что
[34:13.980 --> 34:15.980]  смешанное произведение вот этих
[34:15.980 --> 34:17.980]  векторов от этого не поменяется, слова никак.
[34:23.980 --> 34:25.980]  Все, не верите?
[34:29.980 --> 34:31.980]  Векторов сейчас каких?
[34:31.980 --> 34:33.980]  Ну, смотрите, вот у нас тут точка
[34:33.980 --> 34:35.980]  P1, P2, да?
[34:35.980 --> 34:37.980]  Пестируем на ребро.
[34:37.980 --> 34:39.980]  И вот у нас тут точка Q1 и Q2, да?
[34:41.980 --> 34:43.980]  И вот я, допустим, спроецирую,
[34:43.980 --> 34:45.980]  вот у меня плоскость проходит через точку P1
[34:45.980 --> 34:47.980]  и проекции,
[34:47.980 --> 34:49.980]  вертикальные проекции на эту
[34:49.980 --> 34:51.980]  перпендикулярную плоскость, Q1
[34:51.980 --> 34:53.980]  и Q2.
[34:53.980 --> 34:55.980]  Вот я утверждаю,
[34:55.980 --> 34:57.980]  что у векторов P1, P2,
[34:57.980 --> 34:59.980]  Q1, Q1
[34:59.980 --> 35:01.980]  и P1, Q2,
[35:01.980 --> 35:03.980]  а, ну давайте я это напишу уже.
[35:03.980 --> 35:05.980]  Я утверждаю, что
[35:05.980 --> 35:07.980]  P1, P2
[35:07.980 --> 35:09.980]  на векторное
[35:09.980 --> 35:11.980]  произведение P1,
[35:11.980 --> 35:13.980]  Q1
[35:13.980 --> 35:15.980]  и P1, Q2
[35:15.980 --> 35:17.980]  это
[35:17.980 --> 35:19.980]  абсолютно то же самое,
[35:19.980 --> 35:21.980]  что
[35:21.980 --> 35:23.980]  P1, P2
[35:23.980 --> 35:25.980]  и, соответственно,
[35:25.980 --> 35:27.980]  P1, Q1
[35:27.980 --> 35:29.980]  и P1, Q2.
[35:29.980 --> 35:31.980]  Вот что я утверждаю.
[35:31.980 --> 35:33.980]  Ну, это тоже самое.
[35:33.980 --> 35:35.980]  Где нет?
[35:35.980 --> 35:37.980]  Тут два штриха.
[35:37.980 --> 35:39.980]  Я заменил вектор на проекцию.
[35:39.980 --> 35:41.980]  Ну, это тоже самое.
[35:41.980 --> 35:43.980]  Да, действительно. Почему?
[35:43.980 --> 35:45.980]  Ну, раз вопрос вызывает,
[35:45.980 --> 35:47.980]  давайте уж убедимся.
[35:47.980 --> 35:49.980]  Потому что, заметим следующее,
[35:49.980 --> 35:51.980]  да?
[35:51.980 --> 35:53.980]  Что у векторов P1, P2,
[35:53.980 --> 35:55.980]  Q1, Q1, Q2,
[35:55.980 --> 35:57.980]  давайте уж убедимся.
[35:57.980 --> 35:59.980]  Потому что, заметим следующее,
[35:59.980 --> 36:01.980]  да?
[36:01.980 --> 36:03.980]  Что я могу сказать, что
[36:03.980 --> 36:05.980]  вектор P1, Q1 штрих я могу
[36:05.980 --> 36:07.980]  однозначно разложить в сумму двух векторов.
[36:07.980 --> 36:09.980]  P1,
[36:09.980 --> 36:11.980]  Q1 штрих
[36:11.980 --> 36:13.980]  плюс
[36:13.980 --> 36:15.980]  P1,
[36:15.980 --> 36:17.980]  ну, плюс
[36:17.980 --> 36:19.980]  давайте так.
[36:21.980 --> 36:23.980]  Q1
[36:23.980 --> 36:25.980]  перпендикулярно.
[36:25.980 --> 36:27.980]  Параллельно.
[36:27.980 --> 36:29.980]  Где мы говорим, что
[36:29.980 --> 36:31.980]  U1 параллелен
[36:31.980 --> 36:33.980]  вектору P1,
[36:33.980 --> 36:35.980]  P2.
[36:39.980 --> 36:41.980]  А P1,
[36:41.980 --> 36:43.980]  U1 штрих, как мы уже сказали,
[36:43.980 --> 36:45.980]  естественно, хочет быть перпендикулярно.
[36:45.980 --> 36:47.980]  Ну,
[36:47.980 --> 36:49.980]  то есть, я любой,
[36:49.980 --> 36:51.980]  то есть, если у меня,
[36:51.980 --> 36:53.980]  ну, давайте, я могу это
[36:53.980 --> 36:55.980]  абстрактно даже сказать, что
[36:55.980 --> 36:57.980]  допустим, у меня есть
[36:57.980 --> 36:59.980]  вектор A какой-то, да?
[36:59.980 --> 37:01.980]  И какой-то произвольный
[37:01.980 --> 37:03.980]  вектор V.
[37:03.980 --> 37:05.980]  Тогда я могу сказать, что V равно
[37:05.980 --> 37:07.980]  однозначно раскладывается
[37:07.980 --> 37:09.980]  в сумму V параллельно
[37:09.980 --> 37:11.980]  плюс V перпендикулярно.
[37:11.980 --> 37:13.980]  Где V перпендикулярно
[37:13.980 --> 37:15.980]  перпендикулярно A,
[37:15.980 --> 37:17.980]  а V параллельно
[37:17.980 --> 37:19.980]  параллельно.
[37:19.980 --> 37:21.980]  В чем я это делаю? Ровно, ровно
[37:21.980 --> 37:23.980]  единственным способом, согласны?
[37:23.980 --> 37:25.980]  Вот. Так вот, здесь
[37:25.980 --> 37:27.980]  ровно это и произошло, да?
[37:27.980 --> 37:29.980]  То есть, мы это вот так
[37:29.980 --> 37:31.980]  разложили. Ну, и заметим,
[37:31.980 --> 37:33.980]  что P1Q2, соответственно, тоже
[37:33.980 --> 37:35.980]  раскладывается абсолютно аналогично
[37:35.980 --> 37:37.980]  плюс U2.
[37:37.980 --> 37:39.980]  Вот.
[37:39.980 --> 37:41.980]  Вот, проверим.
[37:41.980 --> 37:43.980]  Вот.
[37:43.980 --> 37:45.980]  Ну, теперь замечаем следующее.
[37:45.980 --> 37:47.980]  Что теперь?
[37:47.980 --> 37:49.980]  Ну, вот.
[37:49.980 --> 37:51.980]  Заретим, что теперь, что
[37:51.980 --> 37:53.980]  если я вот сейчас вот начну вот это писать.
[37:53.980 --> 37:55.980]  Вот, поехали.
[37:55.980 --> 37:57.980]  P1Q2.
[37:57.980 --> 37:59.980]  И тут начнется
[37:59.980 --> 38:01.980]  векторное произведение P1Q1
[38:01.980 --> 38:03.980]  и P1Q2.
[38:03.980 --> 38:05.980]  Да?
[38:05.980 --> 38:07.980]  То, как бы, я могу
[38:07.980 --> 38:09.980]  это написать как P1P2
[38:09.980 --> 38:11.980]  и, значит, тут я P1Q1
[38:11.980 --> 38:13.980]  честно могу подставить.
[38:13.980 --> 38:15.980]  P1Q1'
[38:15.980 --> 38:17.980]  плюс U1
[38:17.980 --> 38:19.980]  параллельно, да?
[38:19.980 --> 38:21.980]  И, соответственно,
[38:21.980 --> 38:23.980]  P1Q2'
[38:23.980 --> 38:25.980]  плюс U2
[38:25.980 --> 38:27.980]  параллельно.
[38:27.980 --> 38:29.980]  Вот.
[38:29.980 --> 38:31.980]  Ну, теперь, если я
[38:31.980 --> 38:33.980]  это разложу, то у меня получится, значит,
[38:33.980 --> 38:35.980]  смешанное произведение
[38:35.980 --> 38:37.980]  P1P2, значит,
[38:37.980 --> 38:39.980]  на P1Q1'
[38:39.980 --> 38:41.980]  плюс, ну, не плюс, а просто
[38:41.980 --> 38:43.980]  запятая, P1Q2'
[38:43.980 --> 38:45.980]  плюс
[38:47.980 --> 38:49.980]  еще четыре скобочки.
[38:49.980 --> 38:51.980]  Ладно, три.
[38:57.980 --> 38:59.980]  Вот.
[38:59.980 --> 39:01.980]  Везде тут будет написан наш любимый
[39:01.980 --> 39:03.980]  вектор P1P2.
[39:05.980 --> 39:07.980]  Вот.
[39:07.980 --> 39:09.980]  Тут будет написано,
[39:09.980 --> 39:11.980]  честно говоря, мне даже в лому немножко писать
[39:11.980 --> 39:13.980]  что, потому что самое главное,
[39:13.980 --> 39:15.980]  что при него нужно знать,
[39:15.980 --> 39:17.980]  это то, что в каждой из этих скобочек
[39:17.980 --> 39:19.980]  будет хотя бы один вектор
[39:19.980 --> 39:21.980]  параллельный вот этому, правда?
[39:21.980 --> 39:23.980]  А это уже автоматически
[39:23.980 --> 39:25.980]  значит, что, как бы,
[39:25.980 --> 39:27.980]  это будет перпендикулярно, значит,
[39:27.980 --> 39:29.980]  скорее всего, на произведении будет 0.
[39:29.980 --> 39:31.980]  То есть, поэтому тут просто
[39:31.980 --> 39:33.980]  то есть отсюда следует, что
[39:33.980 --> 39:35.980]  если вы в смешанном произведении
[39:35.980 --> 39:37.980]  действительно
[39:37.980 --> 39:39.980]  ну вот, скажем, из одного вектора
[39:39.980 --> 39:41.980]  вы читаете другой, даже умноженный
[39:41.980 --> 39:43.980]  на константу, то смешанное произведение от этого никак
[39:43.980 --> 39:45.980]  не меняется. В общем-то, если вы его
[39:45.980 --> 39:47.980]  написали на языке матриц, то это
[39:47.980 --> 39:49.980]  было бы эквивалентно просто вы читали одно из третьих
[39:49.980 --> 39:51.980]  и другого, в общем-то.
[39:51.980 --> 39:53.980]  Вот. Да. Еще одно
[39:53.980 --> 39:55.980]  произведение, которое вы явно должны были сдавать
[39:55.980 --> 39:57.980]  миллионально. Нет?
[39:57.980 --> 39:59.980]  Вот.
[39:59.980 --> 40:01.980]  Вот. То есть
[40:01.980 --> 40:03.980]  очень приятно. Поэтому вот действительно приятно,
[40:03.980 --> 40:05.980]  что мы можем так, можем проецировать,
[40:05.980 --> 40:07.980]  а можем не проецировать. Потому что с точки зрения
[40:07.980 --> 40:09.980]  программирования, это нам что говорит?
[40:09.980 --> 40:11.980]  Это нам говорит о том, что можно было ничего
[40:11.980 --> 40:13.980]  не проецировать, а можно было просто
[40:13.980 --> 40:15.980]  действительно смешанное произведение
[40:15.980 --> 40:17.980]  честно найти не боится.
[40:17.980 --> 40:19.980]  И с помощью этого, то есть получается
[40:19.980 --> 40:21.980]  у нас, как бы,
[40:21.980 --> 40:23.980]  когда мы крутимся не вокруг
[40:23.980 --> 40:25.980]  прямой в пространстве, то вот, соответственно,
[40:25.980 --> 40:27.980]  сравнение кто там левее, кто правее
[40:27.980 --> 40:29.980]  делается тоже вот,
[40:29.980 --> 40:31.980]  то есть снова нам
[40:31.980 --> 40:33.980]  помогает векторное произведение. Правда?
[40:33.980 --> 40:35.980]  Ну, точнее оно уже не векторное, а смешанное.
[40:35.980 --> 40:37.980]  Тем не менее.
[40:37.980 --> 40:39.980]  Приятно, правда?
[40:39.980 --> 40:41.980]  Вот.
[40:41.980 --> 40:43.980]  Так вот. Таким образом получается,
[40:43.980 --> 40:45.980]  что вы можете
[40:45.980 --> 40:47.980]  на самом деле теперь,
[40:47.980 --> 40:49.980]  то есть если
[40:49.980 --> 40:51.980]  действительно, если писать brute force
[40:51.980 --> 40:53.980]  грани,
[40:53.980 --> 40:55.980]  да, BS это brute force,
[40:55.980 --> 40:57.980]  а жрани по английски faces, соответственно.
[40:57.980 --> 40:59.980]  Это, ну вот.
[40:59.980 --> 41:01.980]  А если вы делаете brute force
[41:01.980 --> 41:03.980]  на ребра,
[41:03.980 --> 41:05.980]  то это уже
[41:05.980 --> 41:07.980]  позволяет вам строить
[41:07.980 --> 41:09.980]  выклополочку за приятную
[41:09.980 --> 41:11.980]  кубическую ассимтуэтику.
[41:15.980 --> 41:17.980]  Понимаете, да?
[41:17.980 --> 41:19.980]  Вот.
[41:19.980 --> 41:21.980]  Что же тогда?
[41:21.980 --> 41:23.980]  Ну, вот.
[41:23.980 --> 41:25.980]  Ну, возникает естественный вопрос.
[41:25.980 --> 41:27.980]  Можно ли
[41:27.980 --> 41:29.980]  попробовать побыстрее?
[41:31.980 --> 41:33.980]  Ну, на самом деле
[41:33.980 --> 41:35.980]  из этого алгоритма
[41:35.980 --> 41:37.980]  за O at n в кубе
[41:37.980 --> 41:39.980]  сильно напрашивается,
[41:39.980 --> 41:41.980]  то есть на самом деле
[41:41.980 --> 41:43.980]  из O at n в кубе
[41:43.980 --> 41:45.980]  напрашивается алгоритм, ну, по сути
[41:45.980 --> 41:47.980]  за O at n аж.
[41:51.980 --> 41:53.980]  Как построить выклополочку
[41:53.980 --> 41:55.980]  за O at n умножить
[41:55.980 --> 41:57.980]  на сколько там грани в этой
[41:57.980 --> 41:59.980]  выклополочке будет?
[42:09.980 --> 42:11.980]  А ведь на самом деле идея
[42:11.980 --> 42:13.980]  достаточно проста.
[42:13.980 --> 42:15.980]  Ведь мы же в этом алгоритме
[42:15.980 --> 42:17.980]  за, допустим, куб
[42:17.980 --> 42:19.980]  или даже может быть
[42:19.980 --> 42:21.980]  вот нот
[42:21.980 --> 42:23.980]  или вот нот
[42:23.980 --> 42:25.980]  там проверяли
[42:25.980 --> 42:27.980]  или даже вот за четвертую проверяли
[42:27.980 --> 42:29.980]  в тупую вообще все возможные грани,
[42:29.980 --> 42:31.980]  правда?
[42:31.980 --> 42:33.980]  А ведь на самом деле идея такая.
[42:33.980 --> 42:35.980]  Вот, допустим, мы нашли одну
[42:35.980 --> 42:37.980]  какую-нибудь край.
[42:37.980 --> 42:39.980]  Ну, на самом деле, если у вас была задача
[42:39.980 --> 42:41.980]  найти хоть одну край, на самом деле вы бы ее
[42:41.980 --> 42:43.980]  нашли бы быстрее, чем золотую, правда?
[42:47.980 --> 42:49.980]  Нет, аж это будет у нас
[42:49.980 --> 42:51.980]  количество грани.
[42:51.980 --> 42:53.980]  Ну, а симпатически количество грани
[42:53.980 --> 42:55.980]  и количество ребра тоже, потому что у нас
[42:55.980 --> 42:57.980]  все грани тревогуете, да?
[42:57.980 --> 42:59.980]  Поэтому непринципиально.
[42:59.980 --> 43:01.980]  Вот.
[43:01.980 --> 43:03.980]  Ну, теперь давайте понять вопрос. Да, как найти
[43:03.980 --> 43:05.980]  хотя бы, ну, давайте так,
[43:05.980 --> 43:07.980]  ладно, как найти хотя бы
[43:07.980 --> 43:09.980]  одну край? Ну, для этого заметим, что если
[43:09.980 --> 43:11.980]  мы найдем хотя бы одно ребро,
[43:11.980 --> 43:13.980]  то, в общем-то, грани мы
[43:13.980 --> 43:15.980]  уже построим за линию после этого, правда?
[43:15.980 --> 43:17.980]  Ну, вот, описанную выше алгоритмом, правда?
[43:17.980 --> 43:19.980]  Красная?
[43:21.980 --> 43:23.980]  Итак, ну, как же найти?
[43:23.980 --> 43:25.980]  Да, очень просто.
[43:25.980 --> 43:27.980]  Ну, во-первых, вершиной выпуклой оболочки
[43:27.980 --> 43:29.980]  наверное будет самая низкая по Z точка,
[43:29.980 --> 43:31.980]  правда? Ну, как всегда, если
[43:31.980 --> 43:33.980]  в несколько, то там самая левая, там
[43:33.980 --> 43:35.980]  бла-бла-бла, вот это все.
[43:35.980 --> 43:37.980]  Ну, а теперь возникает вопрос.
[43:37.980 --> 43:39.980]  Как найти ей напарник?
[43:41.980 --> 43:43.980]  Как найти какую-нибудь вторую точку,
[43:43.980 --> 43:45.980]  которая с ней образует ребро?
[43:45.980 --> 43:47.980]  А как понимать?
[43:47.980 --> 43:49.980]  Прям за квадрат, что ли, скажем?
[43:49.980 --> 43:51.980]  Да.
[43:51.980 --> 43:53.980]  Ну, как сказать, смотря кое-что в точку,
[43:53.980 --> 43:55.980]  если вы скажете, что H это там в лучшем случае
[43:55.980 --> 43:57.980]  не менее чем M, поэтому все равно N квадрат,
[43:57.980 --> 43:59.980]  то можно и так.
[43:59.980 --> 44:01.980]  Можно ли брать что-то типа
[44:01.980 --> 44:03.980]  с минимальным
[44:03.980 --> 44:05.980]  блок
[44:05.980 --> 44:07.980]  плоскости,
[44:07.980 --> 44:09.980]  типа с
[44:09.980 --> 44:11.980]  прибытия куриатной оси?
[44:11.980 --> 44:13.980]  Да, совершенно верно, совершенно верно.
[44:13.980 --> 44:15.980]  Ведь, действительно, мы же можем просто
[44:15.980 --> 44:17.980]  провести, так сказать, горизонтальную
[44:17.980 --> 44:19.980]  плоскость, вот эту, да?
[44:19.980 --> 44:21.980]  И все вот эти точки там пытаться
[44:21.980 --> 44:23.980]  действительно понимать.
[44:23.980 --> 44:25.980]  Вот, там что-то такое, вот
[44:25.980 --> 44:27.980]  что-то типа полярного угла между
[44:27.980 --> 44:29.980]  этой плоскостью и этим вектором.
[44:29.980 --> 44:31.980]  Хочется, чтобы найти этот угол как можно ниже, правда?
[44:31.980 --> 44:33.980]  Угол этот вычислить,
[44:33.980 --> 44:35.980]  ну, придется реально вычислить,
[44:35.980 --> 44:37.980]  но, правда, можно вычислять не его, а, скажем,
[44:37.980 --> 44:39.980]  его синус.
[44:39.980 --> 44:41.980]  Что такое синус?
[44:41.980 --> 44:43.980]  Вот эта вот высота, а это, по сути, разность
[44:43.980 --> 44:45.980]  Z-ок, да?
[44:45.980 --> 44:47.980]  Поделить на длину ветра.
[44:47.980 --> 44:49.980]  Ну и, соответственно, теперь ищем угол,
[44:49.980 --> 44:51.980]  у которого этот синус поменьше.
[44:51.980 --> 44:53.980]  Да, при очень большом
[44:53.980 --> 44:55.980]  желании можно даже в целых числах
[44:55.980 --> 44:57.980]  это сделать, потому что можно минимизировать не синус,
[44:57.980 --> 44:59.980]  а синус в квадрате.
[44:59.980 --> 45:01.980]  То есть, в общем-то,
[45:01.980 --> 45:03.980]  не сильно страшно,
[45:03.980 --> 45:05.980]  не правда.
[45:09.980 --> 45:11.980]  Пока у нас красота.
[45:11.980 --> 45:13.980]  Вот, хорошо.
[45:13.980 --> 45:15.980]  Одно ребро нашли.
[45:15.980 --> 45:17.980]  И теперь мы знаем, что если у нас есть
[45:17.980 --> 45:19.980]  ребро, то, в общем-то,
[45:19.980 --> 45:21.980]  вот этим вот теперь мы можем вести такое понятие
[45:21.980 --> 45:23.980]  книжный анализ такой.
[45:23.980 --> 45:25.980]  То есть, мы можем построить вокруг
[45:25.980 --> 45:27.980]  ребра эту книжечку
[45:27.980 --> 45:29.980]  и найти
[45:29.980 --> 45:31.980]  собственно, эти два
[45:31.980 --> 45:33.980]  и найти, так сказать, у этой книжечки обложку.
[45:33.980 --> 45:35.980]  Вот это будет вот примерно так.
[45:35.980 --> 45:37.980]  Пум-пум. И, соответственно,
[45:37.980 --> 45:39.980]  тут внутри еще какие-то странички.
[45:45.980 --> 45:47.980]  Вот, примерно так это будет.
[45:47.980 --> 45:49.980]  И мы, ну вот,
[45:49.980 --> 45:51.980]  если мы точно знаем, что это ребро,
[45:51.980 --> 45:53.980]  то, в общем-то, две вот эти вот крайние
[45:53.980 --> 45:55.980]  листа мы уже найти умеем.
[45:55.980 --> 45:57.980]  Мы только что это научились делать, правда?
[45:57.980 --> 45:59.980]  Ну вот.
[45:59.980 --> 46:01.980]  И, соответственно, найти теперь можно самые
[46:01.980 --> 46:03.980]  правые и самые левые.
[46:03.980 --> 46:05.980]  Но теперь самые приятные, смотрите.
[46:05.980 --> 46:07.980]  Когда мы нашли эти грани, то есть мы нашли не просто
[46:07.980 --> 46:09.980]  две грани выпуклой оболочки,
[46:09.980 --> 46:11.980]  но мы еще нашли четыре
[46:11.980 --> 46:13.980]  новых ребра.
[46:15.980 --> 46:17.980]  А теперь давайте просто применим
[46:17.980 --> 46:19.980]  метод заворачивания подарков.
[46:21.980 --> 46:23.980]  То есть давайте просто возьмем, скажем, вот
[46:23.980 --> 46:25.980]  каждый из этих ребр.
[46:25.980 --> 46:27.980]  Да, причем, смотрите, ну вот,
[46:27.980 --> 46:29.980]  если мы грань еще будем вот обходить
[46:29.980 --> 46:31.980]  так, что сама грань остается как бы
[46:31.980 --> 46:33.980]  слева, то как бы
[46:33.980 --> 46:35.980]  у каждого ребра получается есть грань,
[46:35.980 --> 46:37.980]  когда мы идем в одну сторону,
[46:37.980 --> 46:39.980]  и есть грань, когда мы идем в другую сторону.
[46:39.980 --> 46:41.980]  Понимаете, да? То есть получается
[46:41.980 --> 46:43.980]  для вот этого ребра мы, соответственно,
[46:43.980 --> 46:45.980]  грань, так сказать, слева
[46:45.980 --> 46:47.980]  с этой стороны уже построили.
[46:47.980 --> 46:49.980]  А теперь можно попытаться для него тоже привести
[46:49.980 --> 46:51.980]  книжный анализ и найти вторую грань.
[46:51.980 --> 46:53.980]  Правда?
[46:53.980 --> 46:55.980]  Понимаете, да?
[46:55.980 --> 46:57.980]  То есть прям тоже там относительно
[46:57.980 --> 46:59.980]  его найти какую-нибудь там что-нибудь еще,
[46:59.980 --> 47:01.980]  соответственно,
[47:01.980 --> 47:03.980]  потом, и это даст нам еще два
[47:03.980 --> 47:05.980]  ребра, ну и так далее. Единственное, конечно, нам
[47:05.980 --> 47:07.980]  придется для ребр хранить, а не было ли у нас
[47:07.980 --> 47:09.980]  их уже раньше.
[47:09.980 --> 47:11.980]  То есть как только у нас, если у нас там
[47:11.980 --> 47:13.980]  искали, искали там, допустим,
[47:13.980 --> 47:15.980]  вот тут еще нашли, потом у этого
[47:15.980 --> 47:17.980]  ребра нашли, ну вот,
[47:17.980 --> 47:19.980]  то есть мы тут нашли вот этих двух напарников,
[47:19.980 --> 47:21.980]  а это у нас, оказывается, было, то тогда
[47:21.980 --> 47:23.980]  выясняется, что для этого ребра мы уже
[47:23.980 --> 47:25.980]  обе грани нашли. На самом деле надо
[47:25.980 --> 47:27.980]  только вот от этого ребра куда-то идти.
[47:27.980 --> 47:29.980]  Удобно, правда?
[47:31.980 --> 47:33.980]  Вот. То есть тогда
[47:33.980 --> 47:35.980]  ну вот. Ну и очевидно, что
[47:35.980 --> 47:37.980]  таким образом, на самом деле, мы так аккуратненько
[47:37.980 --> 47:39.980]  всю выпуклую оболочку, в общем-то,
[47:39.980 --> 47:41.980]  и обойдем.
[47:43.980 --> 47:45.980]  Потому что, соответственно,
[47:45.980 --> 47:47.980]  потому что за каждый ОАТН шагом
[47:47.980 --> 47:49.980]  обработки каждого ребра, если
[47:49.980 --> 47:51.980]  оно еще не было обработано раньше,
[47:51.980 --> 47:53.980]  мы получаем новую грани. Получается
[47:53.980 --> 47:55.980]  красивый заворачивание
[47:55.980 --> 47:57.980]  подарка за
[47:57.980 --> 47:59.980]  ОАТН.
[47:59.980 --> 48:01.980]  В общем-то, обратите внимание,
[48:01.980 --> 48:03.980]  тоже не самым убойным
[48:03.980 --> 48:05.980]  образом пишущейся
[48:05.980 --> 48:07.980]  неправда ли.
[48:07.980 --> 48:09.980]  Понятно, да?
[48:17.980 --> 48:19.980]  А так и делаем.
[48:21.980 --> 48:23.980]  Ну то есть, смотри,
[48:23.980 --> 48:25.980]  для каждого ребра у нас как бы есть
[48:25.980 --> 48:27.980]  его, так сказать, в одну сторону грани,
[48:27.980 --> 48:29.980]  в другую сторону.
[48:29.980 --> 48:31.980]  Обе эти грани, мы, честно, за ОАТН
[48:31.980 --> 48:33.980]  можем найти вот этим с нижним анализом.
[48:33.980 --> 48:35.980]  Ну а теперь, когда мы находим новую
[48:35.980 --> 48:37.980]  грань, мы для вот этих ребер проверяем,
[48:37.980 --> 48:39.980]  не встречали ли мы их раньше.
[48:39.980 --> 48:41.980]  В обе стороны причем.
[48:41.980 --> 48:43.980]  А, в общем, не важно.
[48:43.980 --> 48:45.980]  В обе не могли, потому что
[48:45.980 --> 48:47.980]  если мы встретили его в ту же сторону,
[48:47.980 --> 48:49.980]  значит мы эту грани уже вычислили.
[48:49.980 --> 48:51.980]  Это можно делать, ну, скажем так,
[48:51.980 --> 48:53.980]  ну, тут на самом деле
[48:53.980 --> 48:55.980]  можно задумываться вот о чем.
[48:55.980 --> 48:57.980]  О чему может быть равно H?
[49:03.980 --> 49:05.980]  Потому что от этого может зависеть
[49:05.980 --> 49:07.980]  на самом деле, вот как нам эти ребра
[49:07.980 --> 49:09.980]  хранить. Потому что H может быть вообще
[49:09.980 --> 49:11.980]  мелочью, правда?
[49:11.980 --> 49:13.980]  Ну, да.
[49:13.980 --> 49:15.980]  Ну, не знаю, получается,
[49:15.980 --> 49:17.980]  надо вот еще добавить
[49:17.980 --> 49:19.980]  всем точку на то, как хранить ребра.
[49:19.980 --> 49:21.980]  То есть если хранить ребра там в матрице,
[49:21.980 --> 49:23.980]  в какой-нибудь матрице смежности,
[49:23.980 --> 49:25.980]  то, конечно, будет лишнее квадрат.
[49:25.980 --> 49:27.980]  Но с другой стороны, заметим, что
[49:27.980 --> 49:29.980]  можно вместо N тут написать
[49:29.980 --> 49:31.980]  что-нибудь типа H,
[49:31.980 --> 49:33.980]  какой-нибудь плог H,
[49:33.980 --> 49:35.980]  просто потому, что все ребра
[49:35.980 --> 49:37.980]  можно и в сете хранить, правда?
[49:37.980 --> 49:39.980]  И заметим, что это
[49:39.980 --> 49:41.980]  и заметим, что эта асимптотика
[49:41.980 --> 49:43.980]  в общем-то уже не испортит.
[49:45.980 --> 49:47.980]  Да, то есть это, конечно, может
[49:47.980 --> 49:49.980]  сильно, ну, потому что чисто теоретически,
[49:49.980 --> 49:51.980]  если лог H окажется больше
[49:51.980 --> 49:53.980]  чем N,
[49:55.980 --> 49:57.980]  то, конечно, H лог H будет больше
[49:57.980 --> 49:59.980]  чем N. То есть может ли быть так,
[49:59.980 --> 50:01.980]  что лог H больше чем N?
[50:05.980 --> 50:07.980]  То есть как лог H может быть
[50:07.980 --> 50:09.980]  больше чем N? Если H не превосходит
[50:09.980 --> 50:11.980]  чего? Ну, как минимум N квадрата
[50:11.980 --> 50:13.980]  оно точно не превосходит, правда?
[50:13.980 --> 50:15.980]  Ну, раз он не превосходит N квадрата,
[50:15.980 --> 50:17.980]  то лог H не превосходит двух
[50:17.980 --> 50:19.980]  логових логов. Так что H лог H
[50:19.980 --> 50:21.980]  это несерьезная асимптотика
[50:21.980 --> 50:23.980]  по сравнению с N H.
[50:27.980 --> 50:29.980]  Сейчас. H не превосходит N квадрата?
[50:29.980 --> 50:31.980]  Н квадратный, да? Конечно.
[50:31.980 --> 50:33.980]  Ну, если H у нас количество,
[50:33.980 --> 50:35.980]  скажем, ребр,
[50:35.980 --> 50:37.980]  то, ребр, у нас не более H квадрата.
[50:37.980 --> 50:39.980]  Это нельзя лучше оценить?
[50:39.980 --> 50:41.980]  Ну, на самом деле, скажем так,
[50:41.980 --> 50:43.980]  с точки зрения анализа
[50:43.980 --> 50:45.980]  асимптотики нам не нужно.
[50:45.980 --> 50:47.980]  Но на самом деле, да, это следующий вопрос,
[50:47.980 --> 50:49.980]  которого хочется обсудить. Конечно же,
[50:49.980 --> 50:51.980]  H можно оценить лучше.
[50:53.980 --> 50:55.980]  Причем соображение очень тупое.
[50:55.980 --> 50:57.980]  Вы же, если вы воображите
[50:57.980 --> 50:59.980]  себе этот выпуклый многогранник,
[50:59.980 --> 51:01.980]  то, наверное, вы
[51:01.980 --> 51:03.980]  без труда поймете, что
[51:03.980 --> 51:05.980]  этот многогранник является,
[51:05.980 --> 51:07.980]  помимо всего прочего, планардным графом. Правда?
[51:09.980 --> 51:11.980]  Почему он является планардным графом?
[51:11.980 --> 51:13.980]  Ну, например, потому что, если вот...
[51:13.980 --> 51:15.980]  Ну, я не умею рисовать
[51:15.980 --> 51:17.980]  экзотические многогранники.
[51:17.980 --> 51:19.980]  Может, кстати, какой-то местный сейчас телевизор включим?
[51:19.980 --> 51:21.980]  Там, в тому шаг.
[51:21.980 --> 51:23.980]  Да, он был домашним планардным графом.
[51:23.980 --> 51:25.980]  Чего, нарисовать многогранники?
[51:27.980 --> 51:29.980]  Приказать, что многогранник планардный граф.
[51:29.980 --> 51:31.980]  А какое там самое простое решение?
[51:31.980 --> 51:33.980]  На сферу?
[51:33.980 --> 51:35.980]  Да, да, да.
[51:35.980 --> 51:37.980]  Возьмем точку внутри.
[51:37.980 --> 51:39.980]  Возьмем в ней сферу любого радиуса.
[51:39.980 --> 51:41.980]  Спроекцируем все точки на эту сферу.
[51:41.980 --> 51:43.980]  Ну, а потом там что-нибудь подвигает.
[51:45.980 --> 51:47.980]  Либо возьмем любую точку на сфере.
[51:47.980 --> 51:49.980]  Стигографическую проекцию.
[51:49.980 --> 51:51.980]  Да, да, да. Можно стигографическую,
[51:51.980 --> 51:53.980]  можно это. Нет, я еще люблю воображать,
[51:53.980 --> 51:55.980]  что давайте вот так вот сферу еще вот так вот разведем,
[51:55.980 --> 51:57.980]  так что все у нас в полную сферу убьют,
[51:57.980 --> 51:59.980]  а потом уже спроекцируем.
[51:59.980 --> 52:01.980]  Согласен, переэкзотика, да.
[52:01.980 --> 52:03.980]  Можно тупее, но...
[52:05.980 --> 52:07.980]  Как иногда случается,
[52:07.980 --> 52:09.980]  как говорится, лучше иметь больше методов,
[52:09.980 --> 52:11.980]  потому что не знаешь, когда каждый метод выискает.
[52:17.980 --> 52:19.980]  Так, такая вот красота.
[52:19.980 --> 52:21.980]  Получается у нас.
[52:23.980 --> 52:25.980]  Вот. Но тогда чему?
[52:25.980 --> 52:27.980]  Это раз это планардный граф.
[52:27.980 --> 52:29.980]  И причем мы помним, что
[52:29.980 --> 52:31.980]  у каждой вершины, причем
[52:31.980 --> 52:33.980]  у нас не бывает вершин
[52:33.980 --> 52:35.980]  в степени 2
[52:35.980 --> 52:37.980]  или 1.
[52:37.980 --> 52:39.980]  Ну, и там любая грань
[52:39.980 --> 52:41.980]  там имеет хотя бы 3 ребра.
[52:41.980 --> 52:43.980]  То отсюда, как мы уже и сами не однократно
[52:43.980 --> 52:45.980]  доказывали, и у вас в домашнем задании
[52:45.980 --> 52:47.980]  по дискрану было, да,
[52:47.980 --> 52:49.980]  что h это
[52:49.980 --> 52:51.980]  в любом случае от n.
[52:51.980 --> 52:53.980]  Мы помним, до сегодня уже там
[52:53.980 --> 52:55.980]  что-то думали на тему там 3n
[52:55.980 --> 52:57.980]  что-то в этом роде.
[52:57.980 --> 52:59.980]  Было дело, да?
[52:59.980 --> 53:01.980]  Поэтому, в принципе,
[53:01.980 --> 53:03.980]  получается, что как и в методе
[53:03.980 --> 53:05.980]  в алгоритме Джанниса,
[53:05.980 --> 53:07.980]  то есть в худшем случае это
[53:07.980 --> 53:09.980]  n квадрат.
[53:09.980 --> 53:11.980]  Хотя, на самом деле,
[53:11.980 --> 53:13.980]  есть, конечно, нод.
[53:13.980 --> 53:15.980]  Хотя, конечно, как всегда, если
[53:15.980 --> 53:17.980]  вывку оболочка мелкая, то, в общем-то,
[53:17.980 --> 53:19.980]  она наша.
[53:19.980 --> 53:21.980]  Вот.
[53:21.980 --> 53:23.980]  Вот такая вот красота получается.
[53:23.980 --> 53:25.980]  Получается из
[53:25.980 --> 53:27.980]  просто платформы геймера, да?
[53:27.980 --> 53:29.980]  Ну, да.
[53:29.980 --> 53:31.980]  Ну, как всегда, там просто
[53:31.980 --> 53:33.980]  доказательства типа, что
[53:33.980 --> 53:35.980]  то есть планарный граф у
[53:35.980 --> 53:37.980]  к степени каждой вершины больше, или правда, трех
[53:37.980 --> 53:39.980]  там граней на двух ребрах
[53:39.980 --> 53:41.980]  не бывает, хотя это уже даже не важно, по-моему.
[53:41.980 --> 53:43.980]  То есть и граф
[53:43.980 --> 53:45.980]  связан. Из этого следует, что там
[53:45.980 --> 53:47.980]  вычитаем, вычитаем, радуемся.
[53:47.980 --> 53:49.980]  Вот.
[53:49.980 --> 53:51.980]  Но, конечно, хочется побыстрее.
[53:51.980 --> 53:53.980]  Ну, честно скажу, к сожалению,
[53:53.980 --> 53:55.980]  все алгоритмы идеальные
[53:55.980 --> 53:57.980]  на эту тему обсудить не удастся.
[53:57.980 --> 53:59.980]  Вот.
[53:59.980 --> 54:01.980]  Да, в идеале хотелось бы когда-нибудь.
[54:01.980 --> 54:03.980]  Но пока скажу так.
[54:03.980 --> 54:05.980]  Значит, идеальная...
[54:05.980 --> 54:07.980]  Ну, конечно же, идеальный алгоритм
[54:07.980 --> 54:09.980]  тут будет явно за mlog n.
[54:09.980 --> 54:11.980]  И один из них мы сегодня
[54:11.980 --> 54:13.980]  как-то с ним так
[54:13.980 --> 54:15.980]  попытаемся обсудить.
[54:15.980 --> 54:17.980]  Вот. Но еще
[54:17.980 --> 54:19.980]  должен сказать, конечно, что
[54:19.980 --> 54:21.980]  здесь, видимо, аналоги
[54:21.980 --> 54:23.980]  того безобразия за mlog h
[54:23.980 --> 54:25.980]  тоже есть.
[54:25.980 --> 54:27.980]  Ну, я не знаю.
[54:27.980 --> 54:29.980]  То есть я не знаю, как они
[54:29.980 --> 54:31.980]  делят точки на h, а потом
[54:31.980 --> 54:33.980]  их все оборачивают каким-то
[54:33.980 --> 54:35.980]  нехзапаксным образом, но каким-то образом они это делают.
[54:35.980 --> 54:37.980]  Вот.
[54:37.980 --> 54:39.980]  Да, там уже этими
[54:39.980 --> 54:41.980]  указателями не побегаешь, конечно.
[54:41.980 --> 54:43.980]  Вот.
[54:43.980 --> 54:45.980]  Но прежде
[54:45.980 --> 54:47.980]  чем обсудить хоть что-нибудь за
[54:47.980 --> 54:49.980]  mlog n,
[54:49.980 --> 54:51.980]  мы на самом деле обсудим
[54:51.980 --> 54:53.980]  то есть ну, для того, чтобы
[54:53.980 --> 54:55.980]  понимать, действительно,
[54:55.980 --> 54:57.980]  как у нас работает...
[54:57.980 --> 54:59.980]  как у нас может работать алгоритм за mlog n,
[54:59.980 --> 55:01.980]  мы попробуем обсудить
[55:01.980 --> 55:03.980]  еще один алгоритм, который
[55:03.980 --> 55:05.980]  формально работает за n квадрат.
[55:07.980 --> 55:09.980]  Так. Еще вопросы какие-то?
[55:11.980 --> 55:13.980]  Сейчас.
[55:13.980 --> 55:15.980]  Ну, так мы может обсудим тогда, если
[55:15.980 --> 55:17.980]  мы не гонорируем.
[55:17.980 --> 55:19.980]  Окей. Хорошо.
[55:19.980 --> 55:21.980]  Вот. Значит, как еще можно искать за n квадрат?
[55:21.980 --> 55:23.980]  Ну, потому что
[55:23.980 --> 55:25.980]  этот n квадрат подозревает, что у нас точки все заранее есть,
[55:25.980 --> 55:27.980]  а ведь на самом деле
[55:27.980 --> 55:29.980]  в 2D на t выпукла оболочку можно было
[55:29.980 --> 55:31.980]  строить инкрементальную методу.
[55:31.980 --> 55:33.980]  Что это значит?
[55:33.980 --> 55:35.980]  Что значит это словосочетание, да?
[55:35.980 --> 55:37.980]  А словосочетание это означает, что
[55:37.980 --> 55:39.980]  допустим, мы точки добавляем по одной
[55:39.980 --> 55:41.980]  и поддерживаем выпуклую оболочку в каждый момент
[55:41.980 --> 55:43.980]  времени, да?
[55:43.980 --> 55:45.980]  Понимаете, у нас в какой-то момент даже
[55:45.980 --> 55:47.980]  из этого получалось, что вот они выпуклые
[55:47.980 --> 55:49.980]  оболочку, и надо теперь добавить
[55:49.980 --> 55:51.980]  какую-то точку, и надо какие-то
[55:51.980 --> 55:53.980]  касательные провести, да?
[55:53.980 --> 55:55.980]  Получалось, что если мы эти точки
[55:55.980 --> 55:57.980]  еще и в красивом дикартовом дереве
[55:57.980 --> 55:59.980]  храним, то получалось, что там едва ли не за
[55:59.980 --> 56:01.980]  рифом эту точку можно туда добавлять.
[56:01.980 --> 56:03.980]  Но это когда мы там
[56:03.980 --> 56:05.980]  переизвратиться решили.
[56:05.980 --> 56:07.980]  Вот.
[56:07.980 --> 56:09.980]  Так вот. На самом деле
[56:09.980 --> 56:11.980]  мы попробуем сделать, вот давайте
[56:11.980 --> 56:13.980]  сейчас давайте временно
[56:13.980 --> 56:15.980]  остановимся на
[56:15.980 --> 56:17.980]  N квадрате.
[56:19.980 --> 56:21.980]  И попробуем
[56:21.980 --> 56:23.980]  с вами сделать вот что.
[56:25.980 --> 56:27.980]  Значит, мы с вами попробуем.
[56:27.980 --> 56:29.980]  Мы с вами
[56:29.980 --> 56:31.980]  попробуем.
[56:33.980 --> 56:35.980]  На самом деле применить.
[56:35.980 --> 56:37.980]  Ну тоже имприментально.
[56:37.980 --> 56:39.980]  Ну там солению мы как-нибудь поймем, лежит ли точка
[56:39.980 --> 56:41.980]  внутреннего угольника, правда? Мы можем
[56:41.980 --> 56:43.980]  озалоговить им при желании, вы помните.
[56:43.980 --> 56:45.980]  А теперь предположим, что к нам
[56:45.980 --> 56:47.980]  добавилась новая точка, и мы очень хотим
[56:47.980 --> 56:49.980]  понять
[56:49.980 --> 56:51.980]  собственно,
[56:51.980 --> 56:53.980]  что же это за точка, куда она пришла.
[56:55.980 --> 56:57.980]  Что же нам сделать? Сделать мы
[56:57.980 --> 56:59.980]  будем следующие. Смотрите.
[56:59.980 --> 57:01.980]  Давайте
[57:01.980 --> 57:03.980]  приведем какую-нибудь прямую.
[57:03.980 --> 57:05.980]  Ну вот.
[57:05.980 --> 57:07.980]  Это у нас будет
[57:07.980 --> 57:09.980]  экран.
[57:13.980 --> 57:15.980]  Значит, почему
[57:15.980 --> 57:17.980]  экран?
[57:17.980 --> 57:19.980]  И точку,
[57:19.980 --> 57:21.980]  наверное, давайте повыше нарисуем.
[57:23.980 --> 57:25.980]  Значит, идея будет следующая.
[57:25.980 --> 57:27.980]  Я попробую
[57:27.980 --> 57:29.980]  все вот эти точки, то есть
[57:29.980 --> 57:31.980]  провести лучи
[57:31.980 --> 57:33.980]  провести лучи.
[57:35.980 --> 57:37.980]  Так.
[57:39.980 --> 57:41.980]  Пока мы в 2D живем.
[57:41.980 --> 57:43.980]  Это пока 2D.
[57:47.980 --> 57:49.980]  Опять маркеры
[57:49.980 --> 57:51.980]  не рисуют.
[57:53.980 --> 57:55.980]  Вот.
[57:55.980 --> 57:57.980]  И приведем вот честно все вот эти
[57:57.980 --> 57:59.980]  лучи. Да. То есть экран мы, естественно,
[57:59.980 --> 58:01.980]  поставим таким образом, чтобы
[58:01.980 --> 58:03.980]  именно лучи пересекали это,
[58:03.980 --> 58:05.980]  а не их там дополнение в ту сторону.
[58:05.980 --> 58:07.980]  Ну, как-нибудь эту прямую,
[58:07.980 --> 58:09.980]  давайте уж поверим, провести можно.
[58:15.980 --> 58:17.980]  Да, можно. Ну, на самом деле, самое тупое там
[58:17.980 --> 58:19.980]  берем первую попавшуюся точку,
[58:19.980 --> 58:21.980]  там берем какую-нибудь перпендикулярную
[58:21.980 --> 58:23.980]  прямую и отдаляем ее на
[58:23.980 --> 58:25.980]  достаточное расстояние.
[58:25.980 --> 58:27.980]  Ну, например, так.
[58:27.980 --> 58:29.980]  Вот.
[58:29.980 --> 58:31.980]  Теперь что можно заметить?
[58:31.980 --> 58:33.980]  Тогда, естественно, проекция,
[58:33.980 --> 58:35.980]  то есть проекция этого
[58:35.980 --> 58:37.980]  многоугольника, получится, естественно,
[58:37.980 --> 58:39.980]  отрезок. Правда?
[58:39.980 --> 58:41.980]  И более того,
[58:41.980 --> 58:43.980]  почему-то возникает
[58:43.980 --> 58:45.980]  жуткое подозрение, что
[58:45.980 --> 58:47.980]  если вы проведете касательные
[58:47.980 --> 58:49.980]  многоугольнику две, то они
[58:49.980 --> 58:51.980]  укрутся в конце этого
[58:51.980 --> 58:53.980]  многоугольника.
[58:57.980 --> 58:59.980]  И ведь теперь идея
[58:59.980 --> 59:01.980]  так, оказывается, очень простая теперь.
[59:01.980 --> 59:03.980]  То есть вы теперь можете
[59:03.980 --> 59:05.980]  из этих точек, просто взять
[59:05.980 --> 59:07.980]  этих точек, найти, так сказать, самую верхнюю
[59:07.980 --> 59:09.980]  и самую нижнюю.
[59:09.980 --> 59:11.980]  Кстати, один из способов, на самом деле,
[59:11.980 --> 59:13.980]  это подумать там, не привести
[59:13.980 --> 59:15.980]  ли вам какую-то вертикальную прямую
[59:15.980 --> 59:17.980]  или какую-то горизонтальную прямую,
[59:17.980 --> 59:19.980]  вы хоть одну из них вы проведете.
[59:21.980 --> 59:23.980]  Ну, там, например, что можно сделать?
[59:23.980 --> 59:25.980]  Ну, там, в самом деле,
[59:25.980 --> 59:27.980]  например, что можно сделать?
[59:27.980 --> 59:29.980]  Ну, там самое тупое, например, что
[59:29.980 --> 59:31.980]  если эта точка оказалась правее всех,
[59:31.980 --> 59:33.980]  многоугольник, то вы там
[59:33.980 --> 59:35.980]  проводите слева вот эту прямую.
[59:35.980 --> 59:37.980]  Если она оказалась левее всех, то правее,
[59:37.980 --> 59:39.980]  если ниже всех, то сверху, если выше всех,
[59:39.980 --> 59:41.980]  то снизу. Если она оказалась где-то
[59:41.980 --> 59:43.980]  здесь, ну,
[59:43.980 --> 59:45.980]  возможно, страдаем.
[59:45.980 --> 59:47.980]  Да, в скопрах, на самом деле,
[59:47.980 --> 59:49.980]  нет.
[59:51.980 --> 59:53.980]  А, хотя нет.
[59:53.980 --> 59:55.980]  Черт, да.
[59:55.980 --> 59:57.980]  Да, в данном случае пострадать вам все-таки
[59:57.980 --> 59:59.980]  придется, потому что ни один из стандартных
[59:59.980 --> 01:00:01.980]  экранов у вас обзор будет.
[01:00:01.980 --> 01:00:03.980]  Можно два экрана провести,
[01:00:03.980 --> 01:00:05.980]  параллельных, слева и справа.
[01:00:07.980 --> 01:00:09.980]  Это, правда, достаточно
[01:00:09.980 --> 01:00:11.980]  неприятно. Ну да, честно скажем,
[01:00:11.980 --> 01:00:13.980]  да, легче уж было, извините, взять первую
[01:00:13.980 --> 01:00:15.980]  попавшуюся точку и перпендикулярный экран
[01:00:15.980 --> 01:00:17.980]  провести и отдать.
[01:00:17.980 --> 01:00:19.980]  А, черт, это бы не помогло.
[01:00:19.980 --> 01:00:21.980]  Да.
[01:00:23.980 --> 01:00:25.980]  Ну да.
[01:00:25.980 --> 01:00:27.980]  Да, можно, да.
[01:00:27.980 --> 01:00:29.980]  Брать ближайшую
[01:00:29.980 --> 01:00:31.980]  по, ну, типа, ближайшую сторону.
[01:00:31.980 --> 01:00:33.980]  Ближайшую, как ты мог.
[01:00:33.980 --> 01:00:35.980]  Не.
[01:00:35.980 --> 01:00:37.980]  Ну да, брать ближайшую сторону
[01:00:37.980 --> 01:00:39.980]  и экран сделаем параллельным.
[01:00:39.980 --> 01:00:41.980]  Это обобщается.
[01:00:41.980 --> 01:00:43.980]  Ну да, можно вообще, да.
[01:00:43.980 --> 01:00:45.980]  А, ну да, можно ближайшую, да.
[01:00:45.980 --> 01:00:47.980]  Можно опустить перпендикуляр,
[01:00:47.980 --> 01:00:49.980]  взять ближайшую и сэкранировать туда.
[01:00:49.980 --> 01:00:51.980]  Да, можно и так.
[01:00:51.980 --> 01:00:53.980]  А ближайшую, а, все равно,
[01:00:53.980 --> 01:00:55.980]  заливаем еще.
[01:00:55.980 --> 01:00:57.980]  Да, можно и так.
[01:00:57.980 --> 01:00:59.980]  То есть, экран так или иначе находится.
[01:00:59.980 --> 01:01:01.980]  То есть, вот есть
[01:01:01.980 --> 01:01:03.980]  такой красивый метод.
[01:01:03.980 --> 01:01:05.980]  Да, просто чем метод приятен,
[01:01:05.980 --> 01:01:07.980]  да, сейчас мы его попробуем обобщить в 3D.
[01:01:07.980 --> 01:01:09.980]  Но в 3D просто, да,
[01:01:09.980 --> 01:01:11.980]  в худшем случае работает за квадрат.
[01:01:11.980 --> 01:01:13.980]  Вот.
[01:01:19.980 --> 01:01:21.980]  Все, все, все, все.
[01:01:23.980 --> 01:01:25.980]  А получили мы следующее.
[01:01:25.980 --> 01:01:27.980]  Мы получили, мы взяли экран,
[01:01:27.980 --> 01:01:29.980]  взяли проекцию. И с проекции взяли
[01:01:29.980 --> 01:01:31.980]  самую нижнюю и самую верхнюю точку.
[01:01:31.980 --> 01:01:33.980]  Посмотрели, откуда
[01:01:33.980 --> 01:01:35.980]  эти точки взялись.
[01:01:35.980 --> 01:01:37.980]  Так вот, утверждение. Все, что
[01:01:37.980 --> 01:01:39.980]  вот как бы с этой стороны, от этих точек
[01:01:39.980 --> 01:01:41.980]  надо удалить. А вместо этого
[01:01:41.980 --> 01:01:43.980]  установить вот эту точку сюда.
[01:01:45.980 --> 01:01:47.980]  А, то есть мы добавляем
[01:01:47.980 --> 01:01:49.980]  новую точку и вот
[01:01:49.980 --> 01:01:51.980]  ищем экран.
[01:01:51.980 --> 01:01:53.980]  Вот.
[01:01:53.980 --> 01:01:55.980]  А теперь, а теперь
[01:01:55.980 --> 01:01:57.980]  чем приятен этот метод? А теперь вообразим в себе,
[01:01:57.980 --> 01:01:59.980]  что мы все это
[01:01:59.980 --> 01:02:01.980]  делаем в 3D.
[01:02:01.980 --> 01:02:03.980]  И вот для этого,
[01:02:03.980 --> 01:02:05.980]  пожалуй, с телевизора
[01:02:05.980 --> 01:02:07.980]  все-таки включу.
[01:02:09.980 --> 01:02:11.980]  Так.
[01:02:11.980 --> 01:02:13.980]  Сейчас я вам покажу
[01:02:13.980 --> 01:02:15.980]  как говорится, иллюстрацию
[01:02:15.980 --> 01:02:17.980]  из одной англоязыкой книжечки.
[01:02:19.980 --> 01:02:21.980]  Так. Которую, в принципе, можно
[01:02:21.980 --> 01:02:23.980]  вполне считать на нашем учебнике.
[01:02:23.980 --> 01:02:25.980]  Ну, может
[01:02:25.980 --> 01:02:27.980]  не совсем всеотъемлющим, но там прям
[01:02:27.980 --> 01:02:29.980]  много всего очень красивого есть.
[01:02:29.980 --> 01:02:31.980]  Так.
[01:02:31.980 --> 01:02:33.980]  Сейчас.
[01:02:33.980 --> 01:02:35.980]  Сейчас.
[01:02:35.980 --> 01:02:37.980]  Вот сюда мы пойдем.
[01:02:37.980 --> 01:02:39.980]  Ну.
[01:02:39.980 --> 01:02:41.980]  Не-не-не, другая.
[01:02:41.980 --> 01:02:43.980]  Англоязыка, что ли.
[01:02:43.980 --> 01:02:45.980]  Сейчас.
[01:02:45.980 --> 01:02:47.980]  Сейчас.
[01:02:47.980 --> 01:02:49.980]  Так.
[01:02:49.980 --> 01:02:51.980]  Где она у нас?
[01:02:51.980 --> 01:02:53.980]  Вот.
[01:02:53.980 --> 01:02:55.980]  Так.
[01:02:55.980 --> 01:02:57.980]  Вот так.
[01:02:57.980 --> 01:02:59.980]  Вот так.
[01:02:59.980 --> 01:03:01.980]  Вот так.
[01:03:01.980 --> 01:03:03.980]  Вот так.
[01:03:03.980 --> 01:03:05.980]  Так.
[01:03:05.980 --> 01:03:07.980]  Да.
[01:03:07.980 --> 01:03:09.980]  Так. Интересно.
[01:03:09.980 --> 01:03:11.980]  Вот.
[01:03:11.980 --> 01:03:13.980]  Так.
[01:03:13.980 --> 01:03:15.980]  Ожидаем.
[01:03:15.980 --> 01:03:17.980]  А.
[01:03:17.980 --> 01:03:19.980]  Вот.
[01:03:19.980 --> 01:03:21.980]  Вот.
[01:03:21.980 --> 01:03:23.980]  Вот.
[01:03:23.980 --> 01:03:25.980]  Да.
[01:03:25.980 --> 01:03:27.980]  Да.
[01:03:27.980 --> 01:03:29.980]  Да.
[01:03:29.980 --> 01:03:31.980]  Да.
[01:03:31.980 --> 01:03:33.980]  Да.
[01:03:33.980 --> 01:03:35.980]  Вот.
[01:03:37.980 --> 01:03:39.980]  Да.
[01:03:41.980 --> 01:03:43.980]  Да.
[01:03:43.980 --> 01:03:45.980]  Да.
[01:03:45.980 --> 01:03:47.980]  Да.
[01:03:47.980 --> 01:03:49.980]  Вот.
[01:03:49.980 --> 01:03:51.980]  Вот.
[01:03:51.980 --> 01:03:53.980]  Да.
[01:03:53.980 --> 01:03:55.980]  Да. Вимба.
[01:03:55.980 --> 01:03:57.980]  И чей?
[01:03:57.980 --> 01:03:59.980]  Ну.
[01:03:59.980 --> 01:04:01.980]  Ну.
[01:04:01.980 --> 01:04:03.980]  Так.
[01:04:03.980 --> 01:04:05.980]  Так.
[01:04:05.980 --> 01:04:07.980]  Так.
[01:04:09.980 --> 01:04:11.980]  Кстати, да.
[01:04:11.980 --> 01:04:13.980]  Первое, что вы можете сделать, это переписать авторов.
[01:04:13.980 --> 01:04:15.980]  Ну.
[01:04:15.980 --> 01:04:17.980]  Ну, впрочем, я думаю, я вам, конечно,
[01:04:17.980 --> 01:04:19.980]  это могу спокойно в группу кинуть.
[01:04:19.980 --> 01:04:21.980]  Но вот.
[01:04:21.980 --> 01:04:23.980]  Но не менее, быстро.
[01:04:23.980 --> 01:04:25.980]  Искать будет тяжело.
[01:04:25.980 --> 01:04:27.980]  Да.
[01:04:27.980 --> 01:04:29.980]  Да.
[01:04:29.980 --> 01:04:31.980]  Ну да, если я вообще скину, вы сможете
[01:04:31.980 --> 01:04:33.980]  прям даже вместе со мной.
[01:04:33.980 --> 01:04:35.980]  Так.
[01:04:35.980 --> 01:04:37.980]  Так.
[01:04:37.980 --> 01:04:39.980]  Да.
[01:04:39.980 --> 01:04:41.980]  Да.
[01:04:41.980 --> 01:04:43.980]  Так.
[01:04:43.980 --> 01:04:45.980]  Вот.
[01:04:45.980 --> 01:04:47.980]  Так. Это же мы, да?
[01:04:47.980 --> 01:04:49.980]  Да.
[01:04:49.980 --> 01:04:51.980]  А то я вам уже полно написал что-то.
[01:04:51.980 --> 01:04:53.980]  Так.
[01:04:53.980 --> 01:04:55.980]  Так.
[01:04:55.980 --> 01:04:57.980]  Так.
[01:04:57.980 --> 01:04:59.980]  Продолжаем.
[01:04:59.980 --> 01:05:01.980]  Продолжаем.
[01:05:01.980 --> 01:05:03.980]  Вот.
[01:05:33.980 --> 01:05:40.540]  много чего еще есть. Причем чем приятна книжка, что да, вот видите, тут много
[01:05:40.540 --> 01:05:46.340]  действительно красивых разделов, вот динейное программирование есть, может мы даже исследуем, там еще какие-то
[01:05:46.340 --> 01:05:52.940]  вот вещи, там вот по идее да, всякие там, да, то есть всякие методы на тему того как определить
[01:05:52.940 --> 01:05:58.340]  точка там, ну и так далее. Ну, что есть? А, ну конечно, вот на самом деле, ну конечно есть и диаграмма
[01:05:58.340 --> 01:06:05.060]  Воронова вот, пожалуйста, или там, вот, преангуляция Долане, пожалуйста, вот, ну, собственно, в общем-то, мы
[01:06:05.060 --> 01:06:13.580]  практически по ней шли, вот, да, кое-какая, и, конечно, кое-какая информация в оболочках есть, и вот картинка
[01:06:13.580 --> 01:06:16.580]  отсюда я вам хочу показать.
[01:06:16.580 --> 01:06:26.580]  Здесь 35-я стрельба.
[01:06:26.580 --> 01:06:44.580]  А, ну вот. А, ну вот, в принципе, вот такая картинка на тему этой, типа, этой вашей
[01:06:44.580 --> 01:06:53.580]  стереографической проекции. Ну, они себе это вот так вот, вот прям вот честный вывод вот этих формул есть.
[01:06:53.580 --> 01:07:02.580]  Ну, я хочу, я вот на самом деле сейчас ее включил отчасти вот ради вот этой вот великолепной проекции.
[01:07:02.580 --> 01:07:27.580]  Это называется делаем абсолютно то же самое, только вот в 3D. То есть добавляем точки по одной, пытаемся быстро там как-то определить, не лежит ли точка внутри этого вашего многогранника, соответственно.
[01:07:27.580 --> 01:07:50.580]  Вот, ну, понимаете, да? Да, кстати, отдельная песня, да. Как определить, желательно, за линию лежит ли точка внутри многогранника?
[01:07:50.580 --> 01:08:09.580]  Да, то же самое мы берем, фиксируем одну, стойчик.
[01:08:09.580 --> 01:08:18.580]  Ну, можем для каждой грани поверить с той же стороны, что...
[01:08:18.580 --> 01:08:24.580]  Ну, на самом деле, да. Да, я тут сидел, думал, как тут лучше прочислить.
[01:08:24.580 --> 01:08:36.580]  Мы можем хранить все грани правильной ориентации как бы. Ну, конечно. И просто проверить, что для каждой грани...
[01:08:36.580 --> 01:08:45.580]  Да, ну, и здесь оговоримся, что да, многогранник мы, скорее всего, будем хранить не просто там, то есть, скорее всего, еще ребра будем хранить в правильном порядке.
[01:08:45.580 --> 01:08:51.580]  То есть, тут встретится опять нам этот вот double connected edge, вот это вот все.
[01:08:51.580 --> 01:08:56.580]  А, кстати, давайте поперематываем.
[01:08:56.580 --> 01:09:03.580]  Сейчас, я, по-моему, пример даже хлыкну носом, как она конкретно называется.
[01:09:03.580 --> 01:09:05.580]  Да.
[01:09:05.580 --> 01:09:35.580]  Бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла-бла
[01:09:35.580 --> 01:09:40.580]  А, вот.
[01:09:40.580 --> 01:09:45.580]  Видите, достаточно крупно.
[01:09:45.580 --> 01:09:52.580]  Даблик коннектито джинс, как называется.
[01:09:52.580 --> 01:09:58.580]  То есть когда все его прохранятся в правильном порядке, и у каждого ребра еще есть ссылка на напарника.
[01:09:59.580 --> 01:10:04.580]  Так, ну и давайте вот.
[01:10:04.580 --> 01:10:09.580]  Вот. Ну и на самом деле, вот та картинка теперь превращается в такое.
[01:10:09.580 --> 01:10:16.580]  Вот. Ну действительно, да. В первую очередь давайте вернем нашу глобальную картинку с экрана.
[01:10:16.580 --> 01:10:21.580]  Как нам теперь понять вообще, лежит ли точка внутри многогранника или воврем?
[01:10:21.580 --> 01:10:27.580]  Ну один из способов, это действительно, попытаться попроводить все возможные грани, да.
[01:10:27.580 --> 01:10:31.580]  И для каждой грани попытаться понять.
[01:10:31.580 --> 01:10:38.580]  Верно ли, что точка находится с точки зрения этой грани с нужной стороны?
[01:10:38.580 --> 01:10:41.580]  Это можно сделать за у от единицы, правда?
[01:10:41.580 --> 01:10:47.580]  Уже надо посчитать, вот для этой грани можно посчитать смешанное произведение вот этого вектора, вот этого вектора и вот этого вектора,
[01:10:47.580 --> 01:10:52.580]  так же вот этого, вот этого и там первой попавшейся другой точки.
[01:10:52.580 --> 01:10:59.580]  Вот прям вот за лигию можно честно проверить. Заметим, что многогранник – это пересечение полупространств, правда?
[01:10:59.580 --> 01:11:06.580]  Ну то есть вот помните, многогранник – это пересечение полупространств.
[01:11:06.580 --> 01:11:10.580]  Вот давайте собственно и проверим лежит ли точка пересечения полупространств.
[01:11:10.580 --> 01:11:16.580]  Другой метод, вот первый пришедший мне в голову, хоть и более громоздкий, он был бы основан на то, что давайте посчитаем
[01:11:16.580 --> 01:11:26.580]  площадь этого многогранника, а потом посчитаем площадь, суммарную положительную площадь все в тетрайдам,
[01:11:26.580 --> 01:11:31.580]  в тетрайдам вида вот тройка точек и вот эта точка, и получится совпадет лислума.
[01:11:31.580 --> 01:11:35.580]  Остается только правда кстати маленький интересный вопрос.
[01:11:35.580 --> 01:11:43.580]  Как, простите, посчитать площадь многогранника, объем многогранника?
[01:11:43.580 --> 01:11:47.580]  Вот кстати как. Давайте подумаем, как это сделать, кстати?
[01:11:47.580 --> 01:11:55.580]  Выберем какую-то точку внутри. Да, внутри просунируем объемы тетрайдов.
[01:11:55.580 --> 01:11:59.580]  А, ну да, действительно. В случае выплона многогранника вообще без проблем.
[01:11:59.580 --> 01:12:06.580]  Действительно давайте тупо возьмем точку внутри, ну там центр масс, например, или тупо одной завершины, чтобы не думать.
[01:12:06.580 --> 01:12:12.580]  И посчитаем действительно объем всех тетрайдов. А как посчитать объем тетрайдов?
[01:12:13.580 --> 01:12:18.580]  Смешным произведением. Ну да, и еще там забыл наш опы 9.
[01:12:18.580 --> 01:12:24.580]  На 3, что ли? То есть на 3 примерно 6. Помнишь, что на константу?
[01:12:24.580 --> 01:12:33.580]  Камера, переводить константу не буду. Вот. Это уже информация для ГУА.
[01:12:33.580 --> 01:12:39.580]  Такая же форум, как и на концу вчера.
[01:12:39.580 --> 01:12:43.580]  Вот. Вот об этом-то я и хочется подумать.
[01:12:43.580 --> 01:12:49.580]  А вы действительно, как вы думаете, не удастся ли на самом деле наоборот взять какую-нибудь точку вне
[01:12:49.580 --> 01:13:01.580]  и действительно как-нибудь просуммировать все эти тетрайдеры, но при этом с учетом какой-нибудь ориентации?
[01:13:01.580 --> 01:13:04.580]  Интересный такой вопрос.
[01:13:04.580 --> 01:13:09.580]  У нас тут жуткое ощущение, что по идее должно.
[01:13:09.580 --> 01:13:13.580]  То есть вот действительно из этой картинки как-то очевидно, что если все правильно ориентировать,
[01:13:13.580 --> 01:13:18.580]  то эти все треугольники пойдут с одним знаком, а эти треугольники пойдут с другим.
[01:13:18.580 --> 01:13:21.580]  Кстати, это очень умно.
[01:13:21.580 --> 01:13:26.580]  Кстати, на самом деле это очень удобный способ на самом деле.
[01:13:26.580 --> 01:13:34.580]  Если бы это оказалось вовне, то на самом деле заметим, что никакая особость эта проекция нам даже не нужна.
[01:13:34.580 --> 01:13:45.580]  Потому что мы теперь можем сказать, что давайте просто выпилим все грани, относительно которых у нас объем получается не в ту сторону.
[01:13:45.580 --> 01:13:54.580]  Ну то есть давайте хранить грани так и обходы грани так, чтобы все объемы оказывались положительными.
[01:13:54.580 --> 01:13:56.580]  Можем так сделать.
[01:13:56.580 --> 01:14:00.580]  Получается, можем так сделать.
[01:14:00.580 --> 01:14:11.580]  И тогда у нас получится, что давайте просто все грани, то есть если у нас около ребра обе грани нас не устраивают по объему относительно этой точки,
[01:14:11.580 --> 01:14:15.580]  значит мы ее так жестно выпиливаем.
[01:14:15.580 --> 01:14:22.580]  А если совершенно случайно, если оказалось, что, ну и понятно, что если обе грани подошли, значит ребро выпиливается.
[01:14:22.580 --> 01:14:25.580]  Если обе грани подошли, значит оно живет.
[01:14:25.580 --> 01:14:33.580]  А если вот ровно, а если одна половинка ребра выпилась, другая нет, значит вторая половинка ребра так жестно образует треугольник, который мы добавляем.
[01:14:33.580 --> 01:14:38.580]  И на самом деле обратите внимание, никакого реального экрана строить не надо.
[01:14:38.580 --> 01:14:41.580]  Да, можно было бы знаете на тему еще подумать.
[01:14:41.580 --> 01:14:49.580]  Можно было бы подумать, что а давайте-ка спроецируем это все на экран, и на самом деле вот эти все касательные будут образовывать здесь выпуклую оболочку,
[01:14:49.580 --> 01:14:56.580]  которую там можно найти, а на самом деле можно найти за линию.
[01:14:56.580 --> 01:15:03.580]  Вот смотрите, если вы спроецируете все вот эти точки сюда, то вот эту выпуклую оболочку вы можете найти за линию.
[01:15:03.580 --> 01:15:08.580]  Догадываетесь почему?
[01:15:08.580 --> 01:15:12.580]  Вот точнее так, где избавиться от сортировки?
[01:15:20.580 --> 01:15:24.580]  Ну, может уже нам понадобится какая-то ориентация ребра?
[01:15:24.580 --> 01:15:28.580]  Да даже не важно, что ориентация, просто ребра храним, да.
[01:15:28.580 --> 01:15:34.580]  Ведь заметим, что каждое вот это ребро на самом деле является проекцией какого-то ребра выпуклого на горганьку, правда?
[01:15:34.580 --> 01:15:39.580]  То есть если все ребра нарисовать, тут получится какой-то жутко непланарный граф.
[01:15:39.580 --> 01:15:46.580]  Но самое приятное в этом жутко непланарном графе, что количество ребер в нем линейно.
[01:15:46.580 --> 01:15:53.580]  Поэтому идея такая, а давайте-ка эту оболочку будем искать заворачиванием подарка, просто от каждой вершины будем искать следующую,
[01:15:53.580 --> 01:15:58.580]  самым тупым обезом, но перебирать только реально существующие ребра, а не все.
[01:15:58.580 --> 01:16:01.580]  И получается это можно за линию оболичить.
[01:16:01.580 --> 01:16:07.580]  Да, вот перед лекцией я думал, что я буду рассказывать это, но как показала практика, в этом же нет необходимости.
[01:16:07.580 --> 01:16:10.580]  С точки зрения, конечно, быстрее не будет оболочки.
[01:16:10.580 --> 01:16:17.580]  Потому что на самом деле мы и без этого могли прекрасно понять, ну вот, прекрасно мы могли с вами понять,
[01:16:17.580 --> 01:16:23.580]  собственно, какие грани тут есть, а какие граней нет, мы уже с вами научились это делать, остается только выкинуть.
[01:16:23.580 --> 01:16:27.580]  Единственное, только наша мечта, конечно, вот в идеале знаете как было,
[01:16:27.580 --> 01:16:33.580]  и в идеале, конечно, еще неплохо было бы достаточно быстро попытаться найти действительно, что там реально надо удалять.
[01:16:33.580 --> 01:16:37.580]  Ну в идеале хотелось бы, почему нам бы это хотелось?
[01:16:37.580 --> 01:16:44.580]  Ну потому что заметим, что, во-первых, мы же, потому что потом удалить мы все это можем за от того, сколько этого всего там,
[01:16:44.580 --> 01:16:47.580]  потому что это все связано, правда?
[01:16:47.580 --> 01:16:50.580]  Поэтому, конечно, вот, и это единственная проблема.
[01:16:50.580 --> 01:16:56.580]  А почему бы, вот, я не знаю, как это делать, но хотелось бы уметь это делать быстро.
[01:16:56.580 --> 01:17:01.580]  Причина, вот, какая.
[01:17:01.580 --> 01:17:10.580]  Потому что, смотрите, обратите внимание, в этом инкрементальном алгоритме предупреждено использовать случайную перестановку, видите, да?
[01:17:10.580 --> 01:17:13.580]  Так вот.
[01:17:13.580 --> 01:17:18.580]  Так вот, значит, у них, значит, пока мы, естественно, это разбирать не будем.
[01:17:18.580 --> 01:17:25.580]  Вот, дописываю, дописываю.
[01:17:25.580 --> 01:17:32.580]  Так вот, и есть вот такая мистическая церемония, что от ожидания, действительно, получается,
[01:17:32.580 --> 01:17:40.580]  эти вот грани, которые вы вообще создадите, в принципе, тут в природе, их, оказывается, он, шесть тем, минус двадцать.
[01:17:40.580 --> 01:17:46.580]  Итоги факт.
[01:17:46.580 --> 01:17:55.580]  Поэтому, конечно, голубая мечта о том, чтобы находить точку, хотя бы ближайшую точку к нашей, как можно, или ближайшую в грани, как можно быстрее,
[01:17:55.580 --> 01:17:59.580]  чуть помирить, было бы классно было.
[01:17:59.580 --> 01:18:02.580]  Или нет?
[01:18:02.580 --> 01:18:05.580]  Подходилось бы.
[01:18:05.580 --> 01:18:08.580]  Подходилось бы.
[01:18:08.580 --> 01:18:11.580]  Вот.
[01:18:11.580 --> 01:18:16.580]  Ну, а тем не менее, вот такой вот приятный факт есть, и на самом деле, да.
[01:18:16.580 --> 01:18:21.580]  То есть, на самом деле, грани он создаст немного, поэтому, если вы хоть на сколько-то быстрее там.
[01:18:21.580 --> 01:18:25.580]  То есть, в принципе, да.
[01:18:25.580 --> 01:18:35.580]  Вот видите, к сожалению, алгоритм нам подпишет, видите, что если точка P лежит вне С,
[01:18:35.580 --> 01:18:39.580]  а, ну да, то значит удалить всех этих товарищей.
[01:18:39.580 --> 01:18:44.580]  Каким образом удалить, непонятно.
[01:18:44.580 --> 01:18:52.580]  Нет, хотя, ну, в смысле, если мы хотим быстрее, чем С, так-то понятно. Прибедись по грани, скажи, адекватны ли они, если нет, то...
[01:18:52.580 --> 01:18:54.580]  Да, это неправда.
[01:18:54.580 --> 01:18:58.580]  Ну, вот такая вот красота.
[01:18:58.580 --> 01:19:00.580]  Вот.
[01:19:00.580 --> 01:19:14.580]  Ну, соответственно, это все, к сожалению, все работает все еще за N квадрат, хотя, конечно, если там переспоновка случайная, то, возможно, вам там будет как-то вести.
[01:19:14.580 --> 01:19:24.580]  Ну, а теперь возникает вопрос, а можно ли все-таки побыстрее это сделать, скажем, за N логами?
[01:19:24.580 --> 01:19:27.580]  А вот тут я вам покажу.
[01:19:27.580 --> 01:19:31.580]  Вот это не то, что я вам покажу, что я вам покажу.
[01:19:31.580 --> 01:19:34.580]  О, вот это не то.
[01:19:34.580 --> 01:19:38.580]  Вот не то.
[01:19:38.580 --> 01:19:42.580]  Вот это я вам покажу.
[01:19:42.580 --> 01:19:45.580]  А, вот это я вам покажу. О!
[01:19:45.580 --> 01:19:52.580]  А теперь я вам покажу, собственно, рекламирую просто на этот раз уже статью.
[01:19:52.580 --> 01:19:56.580]  Да, я вам ее тоже сейчас могу кинуть.
[01:19:56.580 --> 01:20:01.580]  Кстати, новенькая статья, кстати, относительно.
[01:20:01.580 --> 01:20:04.580]  Кстати, да.
[01:20:04.580 --> 01:20:06.580]  Мы сейчас будем это изучать, да?
[01:20:06.580 --> 01:20:10.580]  Ну, скажем так, как минимум вскользь пройдемся.
[01:20:10.580 --> 01:20:17.580]  Честно говоря, последние годы у меня была традиция, что мы, конечно, долго и то вскользь обсуждаем, но на экзамен я его даже не пытаюсь выносить.
[01:20:17.580 --> 01:20:20.580]  Тем не менее, мягкая куча.
[01:20:20.580 --> 01:20:25.580]  Да, но мягкая куча...
[01:20:25.580 --> 01:20:29.580]  Да, ну нет, подождите, мягкая куча, это понятно, алкоголь.
[01:20:29.580 --> 01:20:33.580]  Полосапстрин, полосапстриком сапсикенс, это жесть.
[01:20:33.580 --> 01:20:37.580]  Ой, да? Да нет, в общем-то.
[01:20:37.580 --> 01:20:43.580]  Да нет, ой, Господи, что там, полосапстрин, кстати, это все это простое алкоголь.
[01:20:43.580 --> 01:20:46.580]  По сказанию, не с мягкой кучей, с вот этим вот, мне кажется.
[01:20:47.580 --> 01:20:51.580]  Ну, потому что чем это приятно, что в диаметре нужно это все как-то себе красиво воображать.
[01:20:51.580 --> 01:20:53.580]  Все как-то очень глубоко воображать.
[01:20:53.580 --> 01:20:58.580]  Честно скажу, вот моего воображения пока вот на этот алкоголитм полностью не хватает.
[01:20:58.580 --> 01:21:01.580]  Хотя идея-то вроде понятна, да?
[01:21:01.580 --> 01:21:04.580]  То есть, что он тут предлагает?
[01:21:04.580 --> 01:21:08.580]  Ну, будет строить 3D, значит, мут-полоколочку методом, тупо разделяем власты.
[01:21:09.580 --> 01:21:13.580]  Так, есть подходящий критик, интересно.
[01:21:13.580 --> 01:21:16.580]  Ну, то есть, вот, в 2D это выглядело бы так, видите, да?
[01:21:16.580 --> 01:21:22.580]  То есть, мы бы распилили также множество, какой-нибудь вертикальной прямой на два раза.
[01:21:22.580 --> 01:21:28.580]  Давайте предполагать, без сильного ограничения в обществе, что у нас все точки там имеют разные, допустим, иксы.
[01:21:28.580 --> 01:21:35.580]  Ну, кстати, этого, если нам плевать на переполнение ики, поэтому, кстати, не сильно сложно добиться, правда?
[01:21:36.580 --> 01:21:43.580]  Ну, там, понятно, сделаем подходящее финное преобразование какое-нибудь, с каким-то очень перекошенным базисом.
[01:21:45.580 --> 01:21:47.580]  И что у нас получится?
[01:21:47.580 --> 01:21:56.580]  Ну, вот, и получится это разделяем властой, который нам позволит, скажем, строить, допустим, мы будем строить нижнюю часть рубка-лоболочки и верхнюю часть рубка-лоболочки.
[01:21:56.580 --> 01:22:04.580]  И, соответственно, все, что нам останется, это, соответственно, найти вот такие вот красивые чашечки.
[01:22:05.580 --> 01:22:09.580]  То есть, мы в каждой половине нашли нижнюю часть и склеили их?
[01:22:09.580 --> 01:22:14.580]  Ну, практически, да, в левой половине нашли нижнюю часть, в верхней половине нашли нижнюю часть и теперь их склеили.
[01:22:16.580 --> 01:22:18.580]  Ну, каким образом их склеили?
[01:22:18.580 --> 01:22:26.580]  Ну, обратите внимание, остается найти какую-то, как видите, общую касачьему.
[01:22:28.580 --> 01:22:29.580]  Понятно, да?
[01:22:30.580 --> 01:22:34.580]  Вот. Общую, ну, какую-то общую касательную.
[01:22:34.580 --> 01:22:47.580]  И причем тут очень важно, оказывается, что в этой общей касательной, значит, вот у вас есть вот вершины у и в, есть вот вершины у минус у плюс и есть вершины в минус в плюс, у которых, собственно, тут векторное произведение как-то хорошо устроено.
[01:22:47.580 --> 01:22:56.580]  То есть, как автор тут пишет, у плюс у и в, значит, идут, например, в порядке против часовой стрелки, равно как и в минус в в плюс.
[01:22:56.580 --> 01:22:57.580]  Видите, да?
[01:22:57.580 --> 01:23:01.580]  Ну, и там всякие вот эти вот все, там в и в плюс, там вот это все.
[01:23:02.580 --> 01:23:03.580]  Понимаете, да?
[01:23:05.580 --> 01:23:06.580]  Вот.
[01:23:06.580 --> 01:23:09.580]  Так что вот получается такая вот примерно красота.
[01:23:11.580 --> 01:23:14.580]  Вот. Ну, дальше автор, значит, дальше предлагать следующее.
[01:23:14.580 --> 01:23:16.580]  Значит, как это все обобщить в 3D?
[01:23:18.580 --> 01:23:23.580]  Ну, тут возникает вопрос, как превратить вообще картинку 3D в что-то подобное?
[01:23:23.580 --> 01:23:26.580]  Очевидно, надо ее как-то куда-то спроекцировать, правда?
[01:23:28.580 --> 01:23:31.580]  Так вот, предлагается проекцировать примерно следующим образом.
[01:23:31.580 --> 01:23:33.580]  Так, сейчас я вам просто форму.
[01:23:37.580 --> 01:23:38.580]  Вот форму.
[01:23:44.580 --> 01:23:45.580]  Видите, да?
[01:23:53.580 --> 01:23:54.580]  То есть.
[01:23:55.580 --> 01:23:56.580]  Ну вот.
[01:23:56.580 --> 01:23:58.580]  Ну, получается примерно так.
[01:23:58.580 --> 01:24:00.580]  То есть, допустим, что...
[01:24:00.580 --> 01:24:01.580]  Так.
[01:24:01.580 --> 01:24:03.580]  Ну, тогда, да.
[01:24:03.580 --> 01:24:06.580]  Не очень так удобно, конечно, в качестве 3D не получается.
[01:24:06.580 --> 01:24:08.580]  А, хоть и нет, нормально.
[01:24:08.580 --> 01:24:09.580]  Вот.
[01:24:09.580 --> 01:24:11.580]  Давайте себе вам резим себе так.
[01:24:12.580 --> 01:24:14.580]  Вот это вот типа плоскость, да?
[01:24:16.580 --> 01:24:17.580]  Вот.
[01:24:17.580 --> 01:24:19.580]  То есть, допустим, вот.
[01:24:19.580 --> 01:24:20.580]  Так, сейчас.
[01:24:20.580 --> 01:24:22.580]  Где у нас X?
[01:24:26.580 --> 01:24:27.580]  Ну да.
[01:24:28.580 --> 01:24:31.580]  Ну, давайте скажем, чтобы у нас действительно правильно это было.
[01:24:31.580 --> 01:24:33.580]  То есть, вообразим себе, что да.
[01:24:33.580 --> 01:24:36.580]  То есть, X у нас, собственно, сюда идет.
[01:24:36.580 --> 01:24:37.580]  Y идет сюда.
[01:24:37.580 --> 01:24:39.580]  Z идет вдоль.
[01:24:39.580 --> 01:24:41.580]  Логично, да?
[01:24:41.580 --> 01:24:42.580]  Так вот.
[01:24:42.580 --> 01:24:43.580]  Вот.
[01:24:43.580 --> 01:24:44.580]  Ну, 네.
[01:24:44.580 --> 01:24:46.580]  Ну, тогда вот возникает вопрос.
[01:24:46.580 --> 01:24:49.580]  Действительно, куда это вот точка проекцируется?
[01:24:51.580 --> 01:24:52.580]  Да, ну да.
[01:24:52.580 --> 01:24:55.580]  Заметим, что при terrible 0 у нас все проекцируется на плоскости Z.
[01:24:55.580 --> 01:24:57.580]  Да, поэтому не очень удобно.
[01:24:57.580 --> 01:24:58.580]  Давайте скажем, что по IV-сам.
[01:24:58.580 --> 01:24:59.580]  Ну да.
[01:24:59.580 --> 01:25:02.580]  Заметим, что при C объема 0 у нас все проекцируется на плоскости Z.
[01:25:02.580 --> 01:25:03.580]  Да, поэтому не очень удобно.
[01:25:03.580 --> 01:25:06.580]  Давайте скажем, что от X intersection.
[01:25:06.580 --> 01:25:07.580]  Да.
[01:25:07.580 --> 01:25:08.580]  Ну да.
[01:25:08.580 --> 01:25:09.580]  А то, да, да.
[01:25:09.580 --> 01:25:10.580]  Так.
[01:25:10.580 --> 01:25:11.580]  А то, да.
[01:25:11.580 --> 01:25:12.580]  А то, да.
[01:25:12.580 --> 01:25:17.580]  Давайте скажем, что вот у нас x, вот у нас z, вот у нас туда игрек идет, да?
[01:25:17.580 --> 01:25:23.580]  О, у мамы даже правильно правая трубочка получилась, да?
[01:25:23.580 --> 01:25:25.580]  Или нет?
[01:25:25.580 --> 01:25:27.580]  Сейчас x направо, z наверх?
[01:25:27.580 --> 01:25:33.580]  Вот x. Нет, от нас вот x налево, z пудой, игрек пудой.
[01:25:33.580 --> 01:25:35.580]  Да, вроде правильно.
[01:25:35.580 --> 01:25:37.580]  Ну, вроде да.
[01:25:37.580 --> 01:25:41.580]  Ну, вот. Ну, то есть x игрек, z игрек, x игрек. Соответственно.
[01:25:42.580 --> 01:25:44.580]  Да, вроде адекватно, да?
[01:25:44.580 --> 01:25:47.580]  Да, x игрек, z.
[01:25:47.580 --> 01:25:50.580]  Вот. Да, все, конечностей мне хватает.
[01:25:50.580 --> 01:25:52.580]  Вот.
[01:25:52.580 --> 01:25:59.580]  Теперь давайте подумаем. Значит, если вот x игрек, z, куда у меня получается проекция?
[01:25:59.580 --> 01:26:05.580]  Ну, если t равно 0 вот у этой формулы, то проекция идет тупо в меня, правда?
[01:26:05.580 --> 01:26:07.580]  Ну, вот.
[01:26:07.580 --> 01:26:12.580]  Если же t равно, например, 1, то проекция вот так вот идет 45 градусов.
[01:26:12.580 --> 01:26:17.580]  То есть практически мы через точку проводим какую-то прямую, которая эту плоскость пересекает, правда?
[01:26:17.580 --> 01:26:25.580]  В чем более того, когда t движется от минус бесконечности до такой степени, от минус бесконечности до плюс бесконечности,
[01:26:25.580 --> 01:26:27.580]  как мы себе это можем вообразить?
[01:26:27.580 --> 01:26:35.580]  Мы себе это можем вообразить, что, то есть, на самом деле, вот эта вот проекция, она вот была прям совсем вертикальная когда-то там, да?
[01:26:35.580 --> 01:26:39.580]  И вот она вот так вот идет, идет, идет и вот опускается.
[01:26:39.580 --> 01:26:45.580]  И тогда у нас что происходит? У нас тут есть множество точек, у которых мы выплаболочку ищем, да?
[01:26:45.580 --> 01:26:48.580]  Жалко, я тут не могу подвесить несколько точек.
[01:26:48.580 --> 01:26:50.580]  Значит, мы их делим пополам.
[01:26:50.580 --> 01:26:57.580]  Значит, строим тут кубик 20-тиранный и тут 35-тиранный.
[01:26:57.580 --> 01:27:02.580]  Теперь, значит, эти два кубика нам надо вот такой вот пленочкой обернуть.
[01:27:05.580 --> 01:27:08.580]  Значит, как мы будем оборачивать пленочку?
[01:27:08.580 --> 01:27:13.580]  Ну, на самом деле, по большому счету, нам нужно привести...
[01:27:18.580 --> 01:27:22.580]  То есть, по большому счету, вот такой набор касательно.
[01:27:22.580 --> 01:27:24.580]  То есть, на самом деле так.
[01:27:24.580 --> 01:27:26.580]  То есть, заметим следующее.
[01:27:26.580 --> 01:27:33.580]  Что для каждого t, если мы это спринцируем, у нас получится какой-то выпуклый многоугольник, правда?
[01:27:33.580 --> 01:27:35.580]  Ну, для каждого t, правда?
[01:27:35.580 --> 01:27:39.580]  Получится выпуклый многоугольник и этот выпуклый многоугольник …
[01:27:39.580 --> 01:27:45.580]  Ну, вот, у них там даже будет выпуклых многоугольников, соответственно, будут даже две какие-то чашечки.
[01:27:45.580 --> 01:27:51.580]  И тогда что получится?
[01:27:51.580 --> 01:27:53.580]  И тогда получается, что к ним надо привести касательное.
[01:27:53.580 --> 01:27:56.580]  И, собственно, то проекции, чего это является касательное,
[01:27:56.580 --> 01:28:01.580]  будет, собственно под этим вот ребром выпуклой оболочки в объединении, правда?
[01:28:01.580 --> 01:28:11.580]  Так вот, дальше, собственно, методология в этом и заключается, что мы будем, значит, это T аккуратненько двигать и поддерживать, где у нас сейчас это ребро находится.
[01:28:12.580 --> 01:28:38.580]  Вот. То есть, ну, как это будет происходить, да? Вот давайте себе вообразим. То есть, действительно, пока, ну вот, то есть, пока у нас действительно T, соответственно, там, как-то вот идет совсем вот высоко, да, то это нижняя проекция, это будет вот что-то вот сзади вот этих вот кубиков, соответственно, там, задняя часть как-то будет спроецирована, правда?
[01:28:38.580 --> 01:28:48.580]  Ну, практически, то есть, это будет практически проекция там куда-то вверх, они там совсем, ну, там, то есть, они там будут по чуть-чуть, по чуть-чуть.
[01:28:48.580 --> 01:28:58.580]  Вот. Но дальше будет, собственно, когда мы эту прямую будем, то есть, когда мы эти прямые будем поворачивать, поворачивать, поворачивать, поворачивать, что будет происходить?
[01:28:58.580 --> 01:29:08.580]  То есть, некоторые грани будут, то есть, мы будем начинать какие-то грани видеть, а какие-то грани из нашего поля зрения начнут исчезать. Ну, если мы вот с этой стороны на них смотрим, правда?
[01:29:08.580 --> 01:29:16.580]  То есть, с точки зрения этих грани. То есть, это будет проходить там в тот момент, когда, скажем, вот эта прямая будет параллельно какой-нибудь там вот грани из вот этих.
[01:29:16.580 --> 01:29:23.580]  Помним, да, что вот эти вот штуки на самом деле соответствуют каким-то реальным ребрам и на этих ребрах какие-то грани, правда?
[01:29:23.580 --> 01:29:33.580]  Вот. И дальше в итоге все сводится практически к фактически анализу событий, по большому счету.
[01:29:33.580 --> 01:29:43.580]  Какие тут события могут вообще произойти? Ну, могут произойти события, что вот это соседние, ну, тут вот действительно перебираются всякие случаи.
[01:29:43.580 --> 01:29:51.580]  То есть, например, могут произойти события, что какие-то вот там наборы из этих троих точек, они перестанут, перестали быть адекватными.
[01:29:51.580 --> 01:29:59.580]  Ну, то есть, крутятся не в ту сторону. И в каждом из этих случаев, соответственно, нам придется, соответственно, точечку УЮВ там куда-то по-соседски убить.
[01:29:59.580 --> 01:30:05.580]  В чем мистическим образом оказывается, что далеко двигать на самом деле не надо.
[01:30:05.580 --> 01:30:13.580]  Дальше вот совсем начинается магия. Ну, то есть, понятно, какие тут события будут.
[01:30:13.580 --> 01:30:21.580]  Но вот действительно оказывается, что вот там, соответственно, эти выпуклости там уже задумываешь, что в какой-то момент эти точки начнут там появляться и исчезать, правда?
[01:30:21.580 --> 01:30:32.580]  Вот, поэтому тут. Ну, а какие тут могут появиться, да? Ну, появиться могут, что вот это ребро, соответственно, какой-то грани может там вот третья точка, называется этого ребра, куда-то когда-нибудь появится, да?
[01:30:32.580 --> 01:30:38.580]  Или вот это появится. А заметим, что, в общем-то, вот это вот все нам хранит, пока, в общем-то, не сильно принципиально.
[01:30:38.580 --> 01:30:47.580]  Ну, хотя бы, с другой стороны, ну, вот. Ну, потому что, по-любому, я в каждой точке буду там что-то хранить.
[01:30:47.580 --> 01:30:57.580]  В результате, ну, в результате, вот, собственно, да, я сейчас... То есть, получается, перебор случаев, он тут имеет место, но, собственно, как видите, не сильно большой.
[01:30:57.580 --> 01:31:17.580]  Вот видите, да? Ну, и в результате это сводится вот такого объема холи. Вот. Да, вот это практически все.
[01:31:17.580 --> 01:31:29.580]  Знаете, вот, действительно, френдокстально, никаких сетов. То есть, по-моему, единственное нетривиальное тут, что может быть, это разве что сортировка.
[01:31:29.580 --> 01:31:44.580]  Но, да и, да и то, и, честно говоря, я ее вижу. Вот. Вот. Да, то есть, обратите внимание.
[01:31:44.580 --> 01:31:49.580]  Ну, видимо, подразумевается, что они, возможно, изначально сортировали в правильном порядке фриксу.
[01:31:49.580 --> 01:32:00.580]  Поэтому, поэтому тут, поэтому он честно, видите, он тут вообще даже молодец, он сразу создает, он дает не только список соответственное число, но еще и сразу списки, в которые можно там куда-то копить пластик.
[01:32:00.580 --> 01:32:19.580]  Вот такая вот неожиданность. А, хотя нет, ой, он даже еще и сортировку написал. Вот. Так что тут вот такая вот красота.
[01:32:19.580 --> 01:32:28.580]  Так что вот это вот, если очень соответственно, вот, так что соответственно, если вкратце, какая тут может быть идея.
[01:32:28.580 --> 01:32:37.580]  Он, как бы, честно говорит, что это не первый алгоритм за NLGN. То есть, это он, как бы, то есть, на самом деле, как построить это за NLGN, было известно еще там, хоть как-то там, в 1975 году.
[01:32:37.580 --> 01:32:47.580]  Но, на самом деле, то есть, в этой статье, как бы, мы говорим, что ее смысл не в том, что мы там изобрели какую-то новую асимпторику, а в том, что мы научились это вот за адекватное количество строчек делать.
[01:32:47.580 --> 01:32:56.580]  Там все там соседние алгоритмы за NLGN или NLGH они по реализации крайне будут. Вот. А тут вот, оказывается, хорошо.
[01:32:56.580 --> 01:33:06.580]  Так что вот таким вот образом, оказывается, примерно вот таким образом можно это за NLGN строить.
[01:33:07.580 --> 01:33:10.580]  Так, хорошо. Есть петь тут.
[01:33:12.580 --> 01:33:17.580]  Статью почитать. Что-то как-то пока не особо, что-то как-то.
[01:33:17.580 --> 01:33:20.580]  Статью, да, статью очень рекомендую почитать.
[01:33:20.580 --> 01:33:23.580]  Что-то, как-то, честно, не очень воспринимается новым.
[01:33:23.580 --> 01:33:25.580]  Ну да, так.
[01:33:25.580 --> 01:33:30.580]  Не, ну понятно с вызовом. То есть, у нас есть, типа, два комочка, мы хотим обернуть клевочки.
[01:33:30.580 --> 01:33:33.580]  Вот, да. Ну, честно скажу, да.
[01:33:33.580 --> 01:33:38.580]  Ну, если совсем честно, то дальше я, в общем-то, лучше понимаю, собственно, не больше.
[01:33:38.580 --> 01:33:40.580]  Как-то да.
[01:33:40.580 --> 01:33:43.580]  Вобрать даже не буду.
[01:33:43.580 --> 01:33:46.580]  Да, ну статью, конечно, сейчас я вам...
[01:33:46.580 --> 01:33:49.580]  Да, ну ладно, пока, наверное, видимо, можно устроить перерыв.
[01:33:49.580 --> 01:33:50.580]  Да.
[01:33:50.580 --> 01:33:52.580]  Вот, и после этого перейти к чему-нибудь попроще.
[01:33:52.580 --> 01:33:57.580]  Ну, сегодня мы, да, попробуем, по крайней мере, двинуться в эту сторону.
[01:33:57.580 --> 01:34:03.580]  Вот, да, двинуться в эту сторону попробуем сейчас, и будем заниматься стручками.
[01:34:03.580 --> 01:34:07.580]  Вот, ну возникает вопрос, да, что такое вообще строка?
[01:34:07.580 --> 01:34:15.580]  Ну, в первую очередь, иметь смысл ввести понятие алфавит.
[01:34:15.580 --> 01:34:18.580]  Что такое алфавит?
[01:34:18.580 --> 01:34:21.580]  Это множество.
[01:34:21.580 --> 01:34:28.580]  Обычно конечное множество чего-нибудь, что мы очень хотим считать буквами.
[01:34:28.580 --> 01:34:35.580]  Ну, самый типичный алфавит, это, конечно, латинский алфавит.
[01:34:35.580 --> 01:34:37.580]  Вот.
[01:34:37.580 --> 01:34:41.580]  Ну, соответственно, там А, В и так далее, З, это, конечно.
[01:34:41.580 --> 01:34:47.580]  То есть, может быть, такой, может быть, там, как вы пишете, АЗ, АЗ, вот еще можно его так.
[01:34:47.580 --> 01:34:49.580]  То есть, когда ИТ, ИТ есть.
[01:34:49.580 --> 01:34:53.580]  Ну, бывают еще алфавиты, которые, наоборот, из цифр состоят.
[01:34:53.580 --> 01:34:56.580]  Вот нам интересны числовые строки.
[01:34:56.580 --> 01:35:00.580]  Или бинарные строки, когда у нас вообще, в принципе, две цифры.
[01:35:00.580 --> 01:35:10.580]  Ну, бывает еще, конечно, в некоторых областях науки используются вот такие алфавиты.
[01:35:10.580 --> 01:35:16.580]  Ну, в этой области науки там начинаются руга со такими аббревиатурами, как БНК.
[01:35:17.580 --> 01:35:19.580]  Вот.
[01:35:19.580 --> 01:35:20.580]  Так вот.
[01:35:20.580 --> 01:35:22.580]  Что такое строка?
[01:35:22.580 --> 01:35:30.580]  Ну, строка – это, ну, по сути, конечная последовательность символов из алфавита.
[01:35:30.580 --> 01:35:34.580]  То есть, как бы, ну, то есть, можно прям даже определение выписать, да,
[01:35:34.580 --> 01:35:50.580]  что строка С длины Н над алфавитом, вот, если уж это так совсем формально писать над алфавитом,
[01:35:50.580 --> 01:36:00.580]  альфа, есть последовательность, вот мы ее пишем, С1, С2, С3 и так далее.
[01:36:00.580 --> 01:36:09.580]  И так далее СН, где все СИТ лежат в алфавитом 1, 2, 3.
[01:36:13.580 --> 01:36:16.580]  Да, и тут сразу начинается люка.
[01:36:16.580 --> 01:36:22.580]  Потому что здесь я написал определение строки в один индексации.
[01:36:23.580 --> 01:36:27.580]  Альтернативная версия будет...
[01:36:32.580 --> 01:36:34.580]  Ну, бывает еще в ноль индексаций.
[01:36:34.580 --> 01:36:44.580]  Ну, Си плюс Пи все в ноль индексаций, но с точки зрения математики нам иногда, иногда будет удобно мыслить в этих индексациях.
[01:36:48.580 --> 01:36:50.580]  Вот.
[01:36:52.580 --> 01:36:56.580]  Значит, но это мы действительно будем уточнять.
[01:36:58.580 --> 01:37:04.580]  Значит, если у нас есть один индексация, то, значит, можно тоже вводить, продолжать вводить определение.
[01:37:05.580 --> 01:37:11.580]  Значит, пусть у нас С равно, допустим, С1, С2, СН.
[01:37:11.580 --> 01:37:32.580]  Тогда, допустим, ИТ-м префиксам строки С называется строка...
[01:37:33.580 --> 01:37:43.580]  Значит, называть мы ее С1ИТ, которая будет равна С1, С2, СН.
[01:37:45.580 --> 01:37:47.580]  Понятно, да?
[01:37:47.580 --> 01:37:49.580]  Можно вот так сделать.
[01:37:51.580 --> 01:37:53.580]  Ну, соответственно, понятно.
[01:37:53.580 --> 01:37:56.580]  И можно сказать, что это равно 0, 1, 2 и так далее.
[01:37:56.580 --> 01:38:00.580]  Да, обратите внимание, пустая строка это нормально.
[01:38:00.580 --> 01:38:02.580]  То есть бывает строка длинной 0.
[01:38:05.580 --> 01:38:06.580]  Вот.
[01:38:06.580 --> 01:38:10.580]  Ну и, конечно, неплохо было бы еще ввести понятие ИТ-суффикс.
[01:38:19.580 --> 01:38:27.580]  Вот тут надо аккуратно, потому что в зависимости от контекста бывает, что там ИТ-м префиксам, то есть ИТ-м суффиксам вот мы будем называть...
[01:38:28.580 --> 01:38:32.580]  Собственно, просто суффикс, который начинается с ИТ-го символа.
[01:38:46.580 --> 01:38:48.580]  Ну тут тоже.
[01:38:50.580 --> 01:38:52.580]  Нет, здесь уже проще, да?
[01:38:53.580 --> 01:38:56.580]  Н и, может быть, даже Н плюс 1.
[01:38:57.580 --> 01:38:58.580]  Вот.
[01:38:58.580 --> 01:39:00.580]  И еще получается...
[01:39:02.580 --> 01:39:03.580]  Как говорится...
[01:39:03.580 --> 01:39:04.580]  Ну вот.
[01:39:04.580 --> 01:39:06.580]  Под строкой...
[01:39:10.580 --> 01:39:12.580]  Значит, С от L.
[01:39:12.580 --> 01:39:14.580]  Значит, мы назовем...
[01:39:14.580 --> 01:39:16.580]  Вот будем называть так.
[01:39:16.580 --> 01:39:20.580]  С, L, С, L плюс 1, пум-пум-пум, С, N.
[01:39:23.580 --> 01:39:24.580]  Вот.
[01:39:28.580 --> 01:39:30.580]  Ну и здесь понятно, что...
[01:39:30.580 --> 01:39:34.580]  Значит, 1 меньше либо равно L, меньше либо равно L, меньше либо равно L.
[01:39:36.580 --> 01:39:37.580]  Да, то есть мы вот ведем...
[01:39:37.580 --> 01:39:41.580]  То есть для подстройки вот такое удобное обозначение.
[01:39:41.580 --> 01:39:46.580]  Да, иногда я буду писать через точку, иногда буду писать через запятую, но это одно и то же.
[01:39:46.580 --> 01:39:47.580]  Одна и то же.
[01:39:49.580 --> 01:39:54.580]  Значит, заранее предупрежу, что иногда будет очень удобно...
[01:39:55.580 --> 01:39:57.580]  Очень удобно писать...
[01:40:00.580 --> 01:40:01.580]  Еще полуинтервал.
[01:40:03.580 --> 01:40:09.580]  Это будет у нас равно С, L, С, L плюс 1 и так далее, С, L минус 1.
[01:40:09.580 --> 01:40:19.580]  Ну, понятно, теоретически, конечно, еще можно вообще тут развлекаться вот так или даже вот так, если очень хочется.
[01:40:19.580 --> 01:40:27.580]  Но полуинтервал, он, конечно, еще удобен тем, что если L равно R, то тогда это получается, что подстрока пустая.
[01:40:31.580 --> 01:40:33.580]  Вот. Но это пока всего лишь обозначение.
[01:40:33.580 --> 01:40:34.580]  Так.
[01:40:35.580 --> 01:40:37.580]  Так, вроде все, что нам потребуется.
[01:40:37.580 --> 01:40:38.580]  Все, что нам потребуется.
[01:40:38.580 --> 01:40:39.580]  Так, тут какие-то вопросы есть?
[01:40:43.580 --> 01:40:44.580]  Нет? Все.
[01:40:46.580 --> 01:40:48.580]  А то как будто я уже черный майор сказал.
[01:40:52.580 --> 01:40:58.580]  Я еще познакомился с языком, о котором я буду разговаривать, но в общем-то язык для вас всегда новым быть не должен.
[01:40:59.580 --> 01:41:02.580]  Разве что вот эти обозначения, они тоже отлично естественные.
[01:41:03.580 --> 01:41:04.580]  Вот.
[01:41:05.580 --> 01:41:18.580]  Значит, соответственно, ну, в основном весь наш курс строчек будет крутиться о задаче поиска подстрок, там, поиска подстрок текста.
[01:41:21.580 --> 01:41:22.580]  Вот.
[01:41:23.580 --> 01:41:25.580]  Ну и по большому счету у нас будет три уровня.
[01:41:26.580 --> 01:41:30.580]  Уровень первый, значит, такой, так сказать, уровень easy.
[01:41:33.580 --> 01:41:35.580]  Значит, данный...
[01:41:36.580 --> 01:41:37.580]  Чего?
[01:41:39.580 --> 01:41:40.580]  Уровень easy.
[01:41:41.580 --> 01:41:42.580]  Дан...
[01:41:43.580 --> 01:41:46.580]  Дан так называемый шаблон П.
[01:41:48.580 --> 01:41:49.580]  И текст.
[01:41:53.580 --> 01:41:54.580]  И текст Т.
[01:41:58.580 --> 01:42:01.580]  Нам жутко интересно.
[01:42:03.580 --> 01:42:16.580]  Так вот, вопрос. Существует ли действительно такой И, что П равно Т, под строка Т, от И до И плюс модуль П не включить?
[01:42:19.580 --> 01:42:20.580]  Вот.
[01:42:21.580 --> 01:42:28.580]  Вот таким заклинанием я могу сформулировать такую классическую задачу поиска подстроки строки.
[01:42:29.580 --> 01:42:36.580]  Или даже на самом деле чаще задача формулируется даже не существует ли, в смысле, да или нет.
[01:42:37.580 --> 01:42:42.580]  А часто она сформулируется в виде, что найдите все такие...
[01:42:50.580 --> 01:42:52.580]  О! Кто ругается?
[01:42:53.580 --> 01:42:55.580]  Так, кто ругается? Каких решений?
[01:42:58.580 --> 01:42:59.580]  Хотя вот тут хороший вопрос, да.
[01:43:00.580 --> 01:43:02.580]  В идеале, конечно, хочется без хэшей как-нибудь обойтись.
[01:43:05.580 --> 01:43:06.580]  В идеале.
[01:43:08.580 --> 01:43:09.580]  Ну, может, да.
[01:43:11.580 --> 01:43:12.580]  Но, видимо, не получится.
[01:43:13.580 --> 01:43:14.580]  Ну ладно, в общем, давайте как всегда.
[01:43:15.580 --> 01:43:16.580]  Давайте предположим.
[01:43:17.580 --> 01:43:21.580]  Знаете, так, как конкретно писать эти хэши, это надо будет еще там отдельно думать.
[01:43:22.580 --> 01:43:27.580]  Ну там разные на самом деле спецэффекты возникают, но, честно говоря, возможно, лучше тогда.
[01:43:28.580 --> 01:43:33.580]  Будет у нас блок занятий, или можно там какое-то занятие по хэшам, в принципе.
[01:43:34.580 --> 01:43:38.580]  Или даже блок занятий, потому что там вообще нетривиальная структура есть на самом деле.
[01:43:39.580 --> 01:43:41.580]  Вот. И у нас возникнет такая нота.
[01:43:42.580 --> 01:43:46.580]  И тогда можно будет там в том числе обсуждать, как строить и как делать решения строчек.
[01:43:47.580 --> 01:43:49.580]  Пока же можем сказать так.
[01:43:50.580 --> 01:43:54.580]  Предположим, что у нас есть мистический черный ящик,
[01:43:56.580 --> 01:44:05.580]  который для двух заданных строчек умеет условно называть единицы и говорить родной или нет.
[01:44:07.580 --> 01:44:08.580]  Ну, точнее так.
[01:44:09.580 --> 01:44:12.580]  Ну вот, если быть точнее, то черный ящик с хэшами,
[01:44:15.580 --> 01:44:17.580]  он на самом деле устроен так.
[01:44:17.580 --> 01:44:20.580]  Значит, ему скармливают, соответственно, какую-то строчку.
[01:44:21.580 --> 01:44:25.580]  То есть инициализируют от какой-то строчки С.
[01:44:26.580 --> 01:44:28.580]  Значит, он ее слушал.
[01:44:29.580 --> 01:44:31.580]  Что-то там пошаманил, пошаманил, пошаманил.
[01:44:33.580 --> 01:44:34.580]  Вот.
[01:44:36.580 --> 01:44:37.580]  Допустим.
[01:44:39.580 --> 01:44:40.580]  Ну вот, допустим.
[01:44:40.580 --> 01:44:41.580]  Ну вот, допустим.
[01:44:41.580 --> 01:44:45.580]  А также, ну вот, ладно, он также может, он, ладно, даже и не таился.
[01:44:47.580 --> 01:44:53.580]  То есть он умеет там скушать какую-нибудь строчку С1, потом скушать там С2, С3 и так далее, бла-бла-бла.
[01:44:54.580 --> 01:44:58.580]  И потом нам за от единицы неожиданно сообщать.
[01:45:00.580 --> 01:45:02.580]  Не равны ли случайно?
[01:45:11.580 --> 01:45:20.580]  Под строки элита и эрита у ИТ строки и под строка лжитая с лжитого пржитая в эсжитая.
[01:45:26.580 --> 01:45:29.580]  Вот, в принципе, можем считать, что у нас есть вот такой мистический черный ящик.
[01:45:31.580 --> 01:45:37.580]  Причем, вот эту вставку он как-то мистическим образом делает за от модуль С.
[01:45:38.580 --> 01:45:40.580]  Ну то, что вы туда передадите, короче.
[01:45:41.580 --> 01:45:43.580]  А вот этот запрос делает за от единиц.
[01:45:45.580 --> 01:45:46.580]  Никакой амортизации, все в честном.
[01:45:47.580 --> 01:45:49.580]  Единственное, что мы верим, что он не ошибается.
[01:45:51.580 --> 01:45:56.580]  Да, потому что реально, когда мы говорим о хэшах, мы вынуждены запрещать, что он и тогда скотина такая может и ошибиться.
[01:45:59.580 --> 01:46:02.580]  Вот. То есть, на самом деле, первый алгоритм, в общем-то, на этом основан.
[01:46:02.580 --> 01:46:08.580]  Потому что, да, я, конечно, могу пока не говорить, но, как бы, вы, люди опытные, догадываетесь, что хэши обычно как устроены?
[01:46:09.580 --> 01:46:14.580]  То есть, обычно они устроены так, что по каждому, по любой под строке можно вычислить мистическое число.
[01:46:16.580 --> 01:46:21.580]  Про это число мы знаем, что оно, скорее всего, от нуля до какого-нибудь там 10 в девятые плюс шесть.
[01:46:22.580 --> 01:46:24.580]  Или 10 в девятые плюс восемь.
[01:46:25.580 --> 01:46:29.580]  Или еще у нас там было, сто семьнадцать на два двадцать третий плюс.
[01:46:30.580 --> 01:46:32.580]  В общем, еще вот такое бывает, помните, да?
[01:46:33.580 --> 01:46:37.580]  Ну, это классическая, вот эта пульешная, да, обсуждает свое время.
[01:46:38.580 --> 01:46:40.580]  Вот. Это там всякое вот это безобразие.
[01:46:41.580 --> 01:46:42.580]  То есть, какое-то мистическое число.
[01:46:43.580 --> 01:46:50.580]  И про это число мы знаем следующее, что если под строки равны, то это число заведомо будет одинаковым.
[01:46:51.580 --> 01:46:54.580]  То есть, одинаковым строкам одинаковое мистическое число.
[01:46:55.580 --> 01:47:03.580]  Но при этом, если строки не совпадут, то, к сожалению, мистические числа тоже могут совпасть.
[01:47:04.580 --> 01:47:08.580]  Ну, то есть, мы уже гарантируем, что если они не совпали, то строчки точно неравны.
[01:47:09.580 --> 01:47:13.580]  Вот. Но если они совпали, то как повезет.
[01:47:14.580 --> 01:47:18.580]  Ну, обычно, то есть, как, забегая вперед, можно, обычно считают,
[01:47:19.580 --> 01:47:25.580]  делают такое мистическое предположение, что, ну, там, вычитается оно каким-то магическим образом, но при этом случайно.
[01:47:26.580 --> 01:47:32.580]  То есть, каждому, каждой различной под строке как будто это число генерируется случайно и независимо в каком-то красивом диапазоне.
[01:47:33.580 --> 01:47:41.580]  И тогда получается, что с вероятностью один, условно один делить на мод, получается разные строки могут быть признаны случайно равными.
[01:47:44.580 --> 01:47:48.580]  Да. Ну ладно, чуть-чуть будем говорить, хотя, конечно, тоже надо реальный анализ включать.
[01:47:49.580 --> 01:47:50.580]  Ну, ничего страшного.
[01:47:51.580 --> 01:47:57.580]  Тогда, собственно, на самом деле, первый алгоритм, который тут предлагается, даже, то есть, он пока, ну, понятно,
[01:47:58.580 --> 01:48:04.580]  есть, конечно, самый тупой алгоритм, который работает за, там, о от, вот, можно даже аккуратно ассердочку написать,
[01:48:05.580 --> 01:48:10.580]  от модуль p умножить на модуль t минус модуль p плюс i.
[01:48:13.580 --> 01:48:14.580]  Почему я тут разность пишу?
[01:48:15.580 --> 01:48:22.580]  Потому что, обратите внимание, на самом деле, этот алгоритм будет работать быстро не только, когда p маленькое, но и когда p очень близко к t, правда?
[01:48:23.580 --> 01:48:29.580]  Если t всего там на два символа длиннее p, то у вас, собственно, три варианта, куда эта строка может встать, и после этого, и так как,
[01:48:30.580 --> 01:48:33.580]  это вы фактически изолению сравниваете без каких-то там лишних заморочек.
[01:48:34.580 --> 01:48:41.580]  Вот. Поэтому тут имеет смысл написать вот такую ассинтотику, чтоб, там, оно, чтоб показывать, что вот эта штука тоже бывает мелкой.
[01:48:42.580 --> 01:48:51.580]  Но, но, но, но, но, конечно же, чаще бывает, что p где-нибудь в два раза меньше t, и тогда квадрат на лицо.
[01:48:52.580 --> 01:48:54.580]  Если, конечно, в тупую.
[01:48:57.580 --> 01:49:10.580]  Но если у нас есть этот мистический черный ящик, ну, если у нас, смотрите, тут два варианта, либо у нас есть идеальный черный ящик, либо у нас есть черный ящик с модом, да?
[01:49:11.580 --> 01:49:20.580]  Ну, потому что идеальным черным ящиком, на самом деле, то есть, можно было, то есть, так вот, идеальный, собственно, черный ящик,
[01:49:21.580 --> 01:49:27.580]  на самом деле, прекрасно дал бы нам алгоритм за o от модуль p плюс модуль t.
[01:49:28.580 --> 01:49:36.580]  Ну, потому что бы, а, я бы даже сказал, да, по большому счету, за o от модуль t.
[01:49:37.580 --> 01:49:46.580]  Ну ладно, по модулю того, что, ну ладно, придется модуль p наверх, да, потому что вам эту строчку придется каким-то образом считать, да, да, да, да, да, да, все, да, модуль p плюс модуль t.
[01:49:47.580 --> 01:49:52.580]  Ну, то есть, и модуль p, то есть, тот скажет, что, ну, p же всегда меньше t, потому что какая разница?
[01:49:53.580 --> 01:49:56.580]  Ну, формально, обратите внимание, не всегда.
[01:49:57.580 --> 01:50:05.580]  Чисто теоретически вам задачу могут подсунуть, является ли во, там, ну, является ли война и мир, там, под строкой слова обалдеть.
[01:50:06.580 --> 01:50:13.580]  Вот. Ну, а вы за o от единицы говорите, что нет. Почему? Потому что война и мир, тупо, длиннее.
[01:50:14.580 --> 01:50:15.580]  Логично, да?
[01:50:17.580 --> 01:50:22.580]  Вот. Поэтому, но, ну, ради этого, вот, можно, приходится, тут, p плюс t какой-то описать.
[01:50:23.580 --> 01:50:25.580]  Вот. Ну, что же, ну, вот, но это идеально.
[01:50:26.580 --> 01:50:31.580]  А что делать, если у нас есть, действительно, односторонняя ошибка?
[01:50:31.580 --> 01:50:39.580]  То есть, иногда некоторые разные подстроки принимаются, с вероятностью, один делить на мод за что-то одинаково.
[01:50:43.580 --> 01:50:44.580]  Ну, вот.
[01:50:46.580 --> 01:50:51.580]  То есть, если у нас, действительно, есть не идеальный, действительно, черный ящик с модулем mod,
[01:50:53.580 --> 01:50:59.580]  то тогда возникает такой алгоритм, который называется алгоритм Рабина-карта.
[01:51:01.580 --> 01:51:03.580]  Алгоритм Рабина-карта.
[01:51:04.580 --> 01:51:05.580]  Что это?
[01:51:07.580 --> 01:51:08.580]  Предлагает он делать следующее.
[01:51:09.580 --> 01:51:17.580]  Ну, фактически, for i равно от 1 до модуль t минус модуль p плюс 1.
[01:51:20.580 --> 01:51:27.580]  Ну, в общем, короче, да, начать, конечно, стоит с того, что давайте в черный ящик загрузим p и s, p и t,
[01:51:27.580 --> 01:51:28.580]  ну, чтобы сравнивать, да?
[01:51:33.580 --> 01:51:34.580]  Значит, он говорит...
[01:51:36.580 --> 01:51:53.580]  Значит, если черный ящик говорит, что они не равны, они это p и, соответственно, t от i да и плюс p, да?
[01:51:53.580 --> 01:51:56.580]  То, ну, просто можно сразу continue.
[01:51:58.580 --> 01:52:00.580]  В противном случае, в чем будем делать?
[01:52:02.580 --> 01:52:10.580]  В противном случае, если окажется, что p равно t от i да и плюс модуль p,
[01:52:10.580 --> 01:52:22.580]  да, сравниваем на этот раз в тупую, я прямо подчеркиваю, то, ну, я не знаю, тут дальше в зависимости от постановки задачи.
[01:52:22.580 --> 01:52:27.580]  Ну, как в самой простой постановке, в этом месте можно сказать риторинг трупа.
[01:52:28.580 --> 01:52:29.580]  Ну, в общем, да.
[01:52:29.580 --> 01:52:31.580]  Ну, и возникает вопрос, за какое симптоме это работает?
[01:52:31.580 --> 01:52:35.340]  Ну, я не знаю. Тут дальше в зависимости от постановки задачи.
[01:52:35.340 --> 01:52:40.060]  В самой простой постановке в этом месте можно сказать риторинг труп.
[01:52:49.020 --> 01:52:55.180]  Ну и возникает вопрос, ну возникает отношение, за какой симптом это работает?
[01:52:55.180 --> 01:53:08.140]  Ну в худшем случае, понятно, это работает за вон то же самое, если нам прям очень-очень-очень-очень не повезет.
[01:53:08.140 --> 01:53:12.060]  Ну, если нам нужно искать все правильные ответы, то все равно задолго.
[01:53:12.060 --> 01:53:12.780]  Да.
[01:53:12.780 --> 01:53:15.020]  Это количество правильных ответов на П.
[01:53:15.020 --> 01:53:23.900]  Ну да, но если вот да, действительно, если тут написано вместо риторинг труп, например, допустим, записать в ответ число И.
[01:53:24.620 --> 01:53:26.620]  Вот да, у нас будут проблемы.
[01:53:26.620 --> 01:53:28.620]  Если риторинг труп, то...
[01:53:28.620 --> 01:53:41.660]  Да, то есть, но задавите, что если у нас, если риторинг труп, ну, заметим следующее, что, смотрите, заметим следующее, что каждый правильный подход у нас будет обработан за ОТ,
[01:53:41.660 --> 01:53:50.860]  поэтому восьмой точке уж точно будет размер ответа умножить на модуль П, потому что мы их прям в честную проверяем, да?
[01:53:51.820 --> 01:53:57.820]  А теперь давайте думать, за сколько будет проверяться каждый нечестный ответ.
[01:53:57.820 --> 01:54:00.780]  Худше, то есть, каждый неправильный.
[01:54:00.780 --> 01:54:06.220]  Ну, на самом деле, тут заметим, что каждый, значит, ну, давайте проверим.
[01:54:06.220 --> 01:54:10.220]  Мод ожидания количества, их меньше минус С плюс один, допустим.
[01:54:10.220 --> 01:54:20.220]  И дальше мод ожидания, ну, понятно, что мод ожидания будет фактически, да, мод ожидания, если не совпадает, то давайте за сколько времени в среднем узнаем, что это неправда.
[01:54:20.580 --> 01:54:30.580]  Ну, заметим, что с вероятностью мод минус один делить, там, с вероятностью один делить, минус один делить на мод.
[01:54:30.580 --> 01:54:39.580]  Мы тупо узнаем, что, мы тупо сразу нам уже на уровне черного ящика скажем, что все плохо, да?
[01:54:39.580 --> 01:54:47.580]  Ну и плюс, конечно, еще придется сделать модуль П, поделить тоже на.
[01:54:50.580 --> 01:54:54.580]  Вот.
[01:54:54.580 --> 01:55:04.580]  Ну, по большому счету, да, можно сказать, что это, да, это асимптотика в среднем, еще на этот раз впервые в жизни у нас произошло в среднем с мыслям от ожидания.
[01:55:04.580 --> 01:55:08.580]  Так, ну ладно, не впервые в жизни, мы тебе как-то эти реви ссылались когда.
[01:55:08.940 --> 01:55:10.940]  Вот.
[01:55:10.940 --> 01:55:29.940]  То есть получается О от модуль Т плюс, значит получается размер ответа на модуль П, плюс, что у нас там еще получается, ну на самом деле отсюда можно вынести модуль П на модуль Т минус модуль П плюс один, делить на мод.
[01:55:30.300 --> 01:55:43.300]  Ну, то есть по большому счету, да, то есть заметим, что вот это слагаемое, если мод достаточно большой, а чаще всего мод уж как-то побольше обычно, чем длина строки, правда?
[01:55:43.300 --> 01:55:49.300]  Ну, чаще мод бывает где-то около миллиарда, а модуль там П и Т порядка миллиона.
[01:55:49.300 --> 01:55:57.300]  Тогда вообще получается, что в среднем, то есть у нас в среднем вообще единственное, что будет долго работать, это проверка ответа.
[01:55:57.660 --> 01:56:05.660]  А если у вас ответ есть ли вхождение да или нет, то тогда это вообще все красиво, за линию работает и собственно без лишних заморочек.
[01:56:08.660 --> 01:56:10.660]  Понятно?
[01:56:10.660 --> 01:56:13.660]  Так что вот это вот алгоритм радино-картов.
[01:56:13.660 --> 01:56:18.660]  То есть в принципе с точки зрения практики может быть вполне себе использован.
[01:56:19.020 --> 01:56:30.020]  Особенно, знаете еще, особенно если еще и заметить, что на самом деле вероятность того, что он, то есть мало того, что с вероятностью один делить на мод, он отсечен.
[01:56:30.020 --> 01:56:40.020]  Так еще и прикол будет в том, что скорее всего мы достаточно быстро, если строки реально не совпадают, то скорее всего мы достаточно быстро убедимся, что они реально не совпадают.
[01:56:42.020 --> 01:56:45.020]  Ну, если там еще и символы какие-то более-менее рандомные.
[01:56:45.380 --> 01:56:48.380]  Это вообще неправда, там конечно зависит, какие хэши брать.
[01:56:48.380 --> 01:56:58.380]  Ну да, так хэши, как у нас там устроенные, то там есть подозрение, что там можно специальным образом сгенерить строчки и где-нибудь в конце подменить, чтобы совпали.
[01:56:58.380 --> 01:57:07.380]  Но это так, то есть как вы говорите, что если реальная жизнь, скорее всего нам такие контртесты подкидывать, если будет только и нередко.
[01:57:07.380 --> 01:57:10.380]  Поэтому в общем-то обойдемся без этого.
[01:57:10.740 --> 01:57:17.740]  То есть это если вот верить в черные ящики, то можно попробовать это сделать так.
[01:57:17.740 --> 01:57:20.740]  Ну это конечно если эти черные ящики делают.
[01:57:21.100 --> 01:57:36.100]  Итак, то это есть черный нор.
[01:57:36.100 --> 01:57:38.100]  Ну с другой стороны, вот возникает вопрос.
[01:57:38.100 --> 01:57:43.100]  А можно ли эту задачу решить без черных ящиков и каких-то там вероятностей?
[01:57:46.100 --> 01:57:49.100]  Ну да, здесь тоже можно по-разному.
[01:57:49.460 --> 01:57:56.460]  Ну на самом деле нам будет полезно изучить эти два классических способа, действительно как это делать.
[01:57:56.460 --> 01:58:02.460]  Правда в одном из них мы тоже попробуем начать с черного ящика.
[01:58:04.460 --> 01:58:07.460]  Но чуть позже у нас приведет собственно к...
[01:58:09.460 --> 01:58:11.460]  Потом мы этим и встанемся.
[01:58:12.460 --> 01:58:14.460]  Да, вот попробуем.
[01:58:14.820 --> 01:58:16.820]  Да, кстати, на всякий случай.
[01:58:16.820 --> 01:58:18.820]  Кто когда-нибудь писал алгоритмах Акарасика?
[01:58:22.820 --> 01:58:24.820]  Алгоритмах Акарасика.
[01:58:31.820 --> 01:58:33.820]  Ну да, как вы чуть позже допомните.
[01:58:33.820 --> 01:58:37.820]  Правильно говорить алгоритмах Акарасика, потому что Акарасик это макро.
[01:58:39.820 --> 01:58:42.820]  Ахо по барабану все равно не склоняется.
[01:58:44.820 --> 01:58:46.820]  Простите меня товарищ Альфред, но...
[01:58:50.820 --> 01:58:52.820]  Прикол.
[01:58:52.820 --> 01:58:54.820]  Значит, итак.
[01:58:55.820 --> 01:58:58.820]  Но, значит, теперь вытекает следующая идея.
[01:59:01.820 --> 01:59:02.820]  Смотрите.
[01:59:02.820 --> 01:59:06.820]  Как теперь более правильно использовать черный ящик?
[01:59:09.820 --> 01:59:12.820]  Как более правильно использовать черный ящик?
[01:59:14.820 --> 01:59:16.820]  Ну, точнее так.
[01:59:16.820 --> 01:59:18.820]  Но, по большому счету, да.
[01:59:18.820 --> 01:59:20.820]  Если мы свято верим в черный ящик,
[01:59:20.820 --> 01:59:22.820]  сейчас мы будем некоторое время,
[01:59:22.820 --> 01:59:25.820]  прям, свято верить, что черный ящик не ошибается.
[01:59:28.820 --> 01:59:29.820]  Вот.
[01:59:29.820 --> 01:59:31.820]  Ну а сейчас я сделаю более ситрое
[01:59:31.820 --> 01:59:33.820]  использование черного ящика.
[01:59:37.820 --> 01:59:40.820]  Но от которого я потом избавлюсь.
[01:59:41.180 --> 01:59:44.180]  Да, метод будет называться метод двухуказательный.
[01:59:46.180 --> 01:59:48.180]  Идея такая.
[01:59:48.180 --> 01:59:50.180]  Значит, я начну с того,
[01:59:50.180 --> 01:59:53.180]  что я, вот, сначала попробую понять,
[01:59:53.180 --> 01:59:57.180]  где, то есть, не верно ли, не верно ли,
[01:59:57.180 --> 02:00:00.180]  случайно, что строка P равна пресесу строки T?
[02:00:02.180 --> 02:00:04.180]  Что я буду делать?
[02:00:04.180 --> 02:00:06.180]  Я буду идти, идти, идти, идти,
[02:00:06.180 --> 02:00:09.180]  вот, дойду, наконец, до первого этапа.
[02:00:09.540 --> 02:00:11.540]  Вот, дойду, наконец, до первого места,
[02:00:11.540 --> 02:00:14.540]  где два символа не совпадут.
[02:00:16.540 --> 02:00:17.540]  Вот.
[02:00:17.540 --> 02:00:20.540]  Это у меня будет, соответственно, вот такой указатель.
[02:00:21.540 --> 02:00:23.540]  Понятно, да?
[02:00:23.540 --> 02:00:25.540]  Ну, если он дошел до конца,
[02:00:25.540 --> 02:00:27.540]  то, значит, я указатель остановлю там, где принес.
[02:00:29.540 --> 02:00:30.540]  Вот.
[02:00:30.540 --> 02:00:31.540]  Что я сделаю дальше?
[02:00:31.540 --> 02:00:33.540]  Дальше я сдвину вот этот указатель.
[02:00:33.540 --> 02:00:35.540]  А вот этот указатель, ну, в методе двухуказательных,
[02:00:35.540 --> 02:00:38.540]  я ж не хочу этот указатель на лево сдвинуть, правда?
[02:00:39.540 --> 02:00:41.540]  И тут я счетирую.
[02:00:41.540 --> 02:00:44.540]  Я воспользуюсь черным ящиком и спрошу.
[02:00:45.540 --> 02:00:47.540]  Слушай, скажи, пожалуйста,
[02:00:47.540 --> 02:00:50.540]  а вот это вот не префикс строки P случайно?
[02:00:51.540 --> 02:00:53.540]  Просто да или нет?
[02:00:57.540 --> 02:00:58.540]  Вот.
[02:00:58.540 --> 02:01:01.540]  Значит, ну, заметим, что если это не префикс строки P,
[02:01:01.540 --> 02:01:03.540]  то, в общем-то, начинается этого момента
[02:01:03.540 --> 02:01:06.540]  искать подстроку, совпадающую с P,
[02:01:06.540 --> 02:01:08.540]  уже бесполезно, правда?
[02:01:08.900 --> 02:01:10.900]  Понимаете, да?
[02:01:10.900 --> 02:01:12.900]  Тогда я буду ее вот сдвигать, сдвигать, сдвигать, сдвигать.
[02:01:12.900 --> 02:01:14.900]  И вот наконец, ну, вот буду так двигать,
[02:01:14.900 --> 02:01:16.900]  это буду проверять как префикс,
[02:01:16.900 --> 02:01:18.900]  вот это и так далее.
[02:01:18.900 --> 02:01:19.900]  Теперь.
[02:01:19.900 --> 02:01:21.900]  И вот наконец я совершенно случайно обнаружил,
[02:01:21.900 --> 02:01:23.900]  что вот, например, вот эта подстрока
[02:01:23.900 --> 02:01:26.900]  является таким префиксом строки P.
[02:01:27.900 --> 02:01:29.900]  Видите, да?
[02:01:29.900 --> 02:01:31.900]  Вот, понимаете?
[02:01:33.900 --> 02:01:35.900]  И начинается с этого момента.
[02:01:35.900 --> 02:01:37.900]  И теперь думаю, так, раз префикс совпадает,
[02:01:38.260 --> 02:01:40.260]  то если я хочу проверить,
[02:01:40.260 --> 02:01:42.260]  если тут вхождение,
[02:01:42.260 --> 02:01:44.260]  то я начинаю проверку просто уже
[02:01:44.260 --> 02:01:46.260]  с синим указателем, но вот с этого места.
[02:01:46.260 --> 02:01:48.260]  И честно, двигаюсь, двигаюсь,
[02:01:48.260 --> 02:01:50.260]  двигаюсь, двигаюсь.
[02:01:50.260 --> 02:01:52.260]  Ну, до тех пор, пока у меня тут
[02:01:52.260 --> 02:01:54.260]  тут не произошел символ Z,
[02:01:54.260 --> 02:01:56.260]  а вот где-нибудь вот тут оказался символ A.
[02:01:56.260 --> 02:01:58.260]  Ну, или могло быть так случиться,
[02:01:58.260 --> 02:02:00.260]  что я вот прям всю подстроку нашел,
[02:02:00.260 --> 02:02:02.260]  прям дошел и раз.
[02:02:03.260 --> 02:02:05.260]  Вот, понимаете, да?
[02:02:05.260 --> 02:02:07.260]  Вот такая тесна.
[02:02:07.620 --> 02:02:09.620]  Теперь все совпало даже вот так.
[02:02:09.620 --> 02:02:11.620]  Ну, так вот, моменты не совпадают.
[02:02:13.620 --> 02:02:15.620]  Дальше я тоже буду теперь проверять.
[02:02:15.620 --> 02:02:17.620]  Вот этот префикс есть.
[02:02:17.620 --> 02:02:19.620]  И дальше я буду двигать, двигать, двигать,
[02:02:19.620 --> 02:02:21.620]  до тех пор, пока не наткнусь снова на префикс,
[02:02:21.620 --> 02:02:23.620]  который у нас совпадает.
[02:02:25.620 --> 02:02:27.620]  Вот это буду проверять, вот это,
[02:02:27.620 --> 02:02:29.620]  но это все вот плохо, плохо, плохо.
[02:02:29.620 --> 02:02:31.620]  Красные, зеленые местами немножко перепутал,
[02:02:31.620 --> 02:02:33.620]  но неважно.
[02:02:33.620 --> 02:02:35.620]  Вот, то есть получается вот с таким
[02:02:35.980 --> 02:02:37.980]  читом, то есть если мы
[02:02:37.980 --> 02:02:39.980]  такой вот,
[02:02:39.980 --> 02:02:41.980]  то есть если мы вот умеем
[02:02:41.980 --> 02:02:43.980]  проверять вернули, что вот эта строка
[02:02:43.980 --> 02:02:45.980]  совпадает с префиксом каким-то образом,
[02:02:45.980 --> 02:02:47.980]  то у нас получается все работает
[02:02:47.980 --> 02:02:49.980]  за лиги.
[02:02:49.980 --> 02:02:51.980]  Потому что у нас, ну, потому что
[02:02:51.980 --> 02:02:53.980]  просто типичный метод двух указателей,
[02:02:53.980 --> 02:02:55.980]  и у указателя двигаются только вправо в каждый момент времени.
[02:02:57.980 --> 02:02:59.980]  Вот, прямо так.
[02:03:00.340 --> 02:03:02.340]  Вот.
[02:03:02.340 --> 02:03:04.340]  То есть вот у нас получается,
[02:03:04.340 --> 02:03:06.340]  алгоритм работает за O от N,
[02:03:06.340 --> 02:03:08.340]  но, правда, в предположении,
[02:03:08.340 --> 02:03:10.340]  что мы верим в черную магию.
[02:03:14.340 --> 02:03:16.340]  А теперь, ну вот,
[02:03:16.340 --> 02:03:18.340]  ну наша, конечно же, цель
[02:03:18.340 --> 02:03:20.340]  попробовать избавиться
[02:03:20.340 --> 02:03:22.340]  от черной магии.
[02:03:24.340 --> 02:03:26.340]  Как же нам избавиться от черной магии?
[02:03:26.700 --> 02:03:28.700]  Как же нам избавиться
[02:03:28.700 --> 02:03:30.700]  от черной магии?
[02:03:30.700 --> 02:03:32.700]  Ну, во-первых, начнем со следующего.
[02:03:32.700 --> 02:03:34.700]  Изначально мы бы говорили, что мы хотим
[02:03:34.700 --> 02:03:36.700]  в этот черный ящик запихнуть строки
[02:03:36.700 --> 02:03:38.700]  P и T, да?
[02:03:40.700 --> 02:03:42.700]  Но, значит, оптимизация номер раз.
[02:03:42.700 --> 02:03:44.700]  Черный ящик достаточно
[02:03:44.700 --> 02:03:46.700]  запихивать, это вот важный
[02:03:46.700 --> 02:03:48.700]  просто именно момент для понимания,
[02:03:48.700 --> 02:03:50.700]  только строку P.
[02:03:52.700 --> 02:03:54.700]  И ничего окромя.
[02:03:56.700 --> 02:03:58.700]  Вот.
[02:03:58.700 --> 02:04:00.700]  Понятная идея, да?
[02:04:02.700 --> 02:04:04.700]  Почему?
[02:04:04.700 --> 02:04:06.700]  Да, потому что, по большому счету,
[02:04:06.700 --> 02:04:08.700]  когда мы,
[02:04:08.700 --> 02:04:10.700]  когда мы в следующий раз
[02:04:10.700 --> 02:04:12.700]  будем тут вот этим черным ящиком
[02:04:12.700 --> 02:04:14.700]  проверять вот какую-то строчку,
[02:04:14.700 --> 02:04:16.700]  она является суффиксом
[02:04:16.700 --> 02:04:18.700]  какой-то строки, которая уже
[02:04:18.700 --> 02:04:20.700]  точно является префиксом
[02:04:20.700 --> 02:04:22.700]  строки P, правда?
[02:04:22.700 --> 02:04:24.700]  То есть,
[02:04:25.060 --> 02:04:27.060]  по большому счету,
[02:04:27.060 --> 02:04:29.060]  у нас все запросы
[02:04:29.060 --> 02:04:31.060]  имеют вид.
[02:04:31.060 --> 02:04:33.060]  Верно ли, что под строка P
[02:04:33.060 --> 02:04:35.060]  от A до R
[02:04:35.060 --> 02:04:37.060]  равна?
[02:04:39.060 --> 02:04:41.060]  Ну, вот
[02:04:41.060 --> 02:04:43.060]  чему-то такое.
[02:04:46.060 --> 02:04:48.060]  Дальнее.
[02:04:48.060 --> 02:04:50.060]  Понимаете, да?
[02:04:55.060 --> 02:04:57.060]  Вот.
[02:04:57.060 --> 02:04:59.060]  То есть, по большому счету, так.
[02:04:59.060 --> 02:05:01.060]  То есть, мы просто вот двигаемся, двигаемся,
[02:05:01.060 --> 02:05:03.060]  так перемираем.
[02:05:03.060 --> 02:05:05.060]  Но более того, кстати, может так
[02:05:05.060 --> 02:05:07.060]  случиться, что когда мы дойдем до следующей
[02:05:07.060 --> 02:05:09.060]  первой строки, которая совпадает,
[02:05:09.060 --> 02:05:11.060]  может так случиться, что мы в этом месте, кстати,
[02:05:11.060 --> 02:05:13.060]  и дальше пойдем. Почему?
[02:05:13.060 --> 02:05:15.060]  Может так случиться, что это-то совпадает,
[02:05:15.060 --> 02:05:17.060]  а следующий символ нет, правда?
[02:05:17.060 --> 02:05:19.060]  Понимаете, да?
[02:05:19.060 --> 02:05:21.060]  И получается, что тут
[02:05:21.060 --> 02:05:23.060]  придется еще префикс найти,
[02:05:23.420 --> 02:05:25.420]  дойдем до нуля, дойдем, выясним, что этот символ даже
[02:05:25.420 --> 02:05:27.420]  с первым символом не совпадает,
[02:05:27.420 --> 02:05:29.420]  поэтому просто и красный, и синий отправляются дальше.
[02:05:29.420 --> 02:05:31.420]  Понимаете, да?
[02:05:33.420 --> 02:05:35.420]  Чему нас это приводит?
[02:05:35.420 --> 02:05:37.420]  По большому счету,
[02:05:37.420 --> 02:05:39.420]  теперь попробуем подменить черный ящик
[02:05:39.420 --> 02:05:41.420]  на другой черный ящик.
[02:05:44.420 --> 02:05:46.420]  Как мы это сделаем?
[02:05:46.420 --> 02:05:48.420]  Будем пользоваться тем, что уже вычислили раньше.
[02:05:48.420 --> 02:05:50.420]  Да. Ну,
[02:05:50.420 --> 02:05:52.420]  мы еще пока ничего не вычисляли,
[02:05:52.780 --> 02:05:54.780]  но раньше черный ящик говорил,
[02:05:54.780 --> 02:05:56.780]  верно ли, что вот эта подстрока
[02:05:56.780 --> 02:05:58.780]  равна вот этой. Но теперь заметим,
[02:05:58.780 --> 02:06:00.780]  что по большому счету у нас задача в следующем.
[02:06:02.780 --> 02:06:04.780]  Дан префикс, то есть на самом деле теперь
[02:06:04.780 --> 02:06:06.780]  черный ящик будет устроен по-другому.
[02:06:06.780 --> 02:06:08.780]  Он будет говорить нам,
[02:06:08.780 --> 02:06:10.780]  так,
[02:06:12.780 --> 02:06:14.780]  дан префикс длины и.
[02:06:16.780 --> 02:06:18.780]  Да?
[02:06:18.780 --> 02:06:20.780]  Я хочу получить
[02:06:21.140 --> 02:06:23.140]  в убывающем порядке
[02:06:23.140 --> 02:06:25.140]  такую последовательность,
[02:06:27.140 --> 02:06:29.140]  допустим, и1,
[02:06:29.140 --> 02:06:31.140]  там вот, и1,
[02:06:31.140 --> 02:06:33.140]  и2,
[02:06:33.140 --> 02:06:35.140]  там, и3, и так далее,
[02:06:35.140 --> 02:06:37.140]  иL-то равно нулю.
[02:06:37.140 --> 02:06:39.140]  Так, что
[02:06:39.140 --> 02:06:41.140]  и строго больше и1,
[02:06:41.140 --> 02:06:43.140]  строго больше и2, строго больше и так далее,
[02:06:43.140 --> 02:06:45.140]  строго больше иL.
[02:06:45.140 --> 02:06:47.140]  И такие, что,
[02:06:47.140 --> 02:06:49.140]  я хочу вот, ну, все такие и, что
[02:06:49.500 --> 02:06:51.500]  п от,
[02:06:51.500 --> 02:06:53.500]  вот, я так пишу,
[02:06:53.500 --> 02:06:55.500]  и-и1,
[02:06:55.500 --> 02:06:57.500]  и,
[02:06:57.500 --> 02:06:59.500]  смотрите, я такой полуинтервал в другую сторону, да?
[02:06:59.500 --> 02:07:01.500]  Верно ли,
[02:07:01.500 --> 02:07:03.500]  что эта подстрока совпадает с префиксом?
[02:07:05.500 --> 02:07:07.500]  Только тут не и1,
[02:07:07.500 --> 02:07:09.500]  а, конечно, и,
[02:07:09.500 --> 02:07:11.500]  какое-нибудь жидкое.
[02:07:19.500 --> 02:07:21.500]  Ну,
[02:07:21.500 --> 02:07:23.500]  смотрите,
[02:07:23.500 --> 02:07:25.500]  значит, у нас чёрный ящик
[02:07:25.500 --> 02:07:27.500]  не требует от нас совпадающих,
[02:07:27.500 --> 02:07:29.500]  проверять, совпадают ли какие-то две подстроки,
[02:07:29.500 --> 02:07:31.500]  а, по большому счёту, мы говорим так,
[02:07:31.500 --> 02:07:33.500]  у нас есть префикс,
[02:07:33.500 --> 02:07:35.500]  строки P, вот он.
[02:07:35.500 --> 02:07:37.500]  Я хочу, по большому счёту,
[02:07:37.500 --> 02:07:39.500]  найти все его суффиксы,
[02:07:39.500 --> 02:07:41.500]  которые это есть,
[02:07:41.500 --> 02:07:43.500]  и, ну,
[02:07:43.500 --> 02:07:45.500]  я хочу,
[02:07:45.500 --> 02:07:47.500]  я хочу, я хочу, я хочу,
[02:07:47.860 --> 02:07:49.860]  я хочу найти все его суффиксы,
[02:07:49.860 --> 02:07:51.860]  которые тоже являются префиксами.
[02:07:51.860 --> 02:07:53.860]  То есть, я хочу найти
[02:07:53.860 --> 02:07:55.860]  все вот такие строчки,
[02:07:55.860 --> 02:07:57.860]  прям последовательностью
[02:07:57.860 --> 02:07:59.860]  бывающих длин, которые совпадают
[02:07:59.860 --> 02:08:01.860]  с префиксами.
[02:08:01.860 --> 02:08:03.860]  Вот, очень хочу.
[02:08:03.860 --> 02:08:05.860]  То есть, если, ну,
[02:08:05.860 --> 02:08:07.860]  так, у вас питон был?
[02:08:07.860 --> 02:08:09.860]  А, значит, можно на языке питон.
[02:08:09.860 --> 02:08:11.860]  То есть, если у вас есть денератор,
[02:08:11.860 --> 02:08:13.860]  который денирирует вам
[02:08:13.860 --> 02:08:15.860]  вот эту последовательность,
[02:08:15.860 --> 02:08:17.860]  то обратите внимание,
[02:08:17.860 --> 02:08:19.860]  с помощью этого денератора
[02:08:19.860 --> 02:08:21.860]  вы тоже реализуете алгоритм
[02:08:21.860 --> 02:08:23.860]  за ОАП, правда?
[02:08:23.860 --> 02:08:25.860]  Вот, согласны?
[02:08:25.860 --> 02:08:27.860]  Вот.
[02:08:27.860 --> 02:08:29.860]  Ну, теперь, значит,
[02:08:29.860 --> 02:08:31.860]  как же его сгенерировать?
[02:08:31.860 --> 02:08:33.860]  Ну, на самом деле, этот денератор можно не делать
[02:08:33.860 --> 02:08:35.860]  денератором, а можно
[02:08:35.860 --> 02:08:37.860]  переформулировать.
[02:08:37.860 --> 02:08:39.860]  Ведь, заметим, на самом деле,
[02:08:39.860 --> 02:08:41.860]  следующее, что в этой последовательности
[02:08:41.860 --> 02:08:43.860]  каждое следующее,
[02:08:43.860 --> 02:08:45.860]  каждое следующее число
[02:08:45.860 --> 02:08:47.860]  фактически однозначно зависит
[02:08:47.860 --> 02:08:49.860]  от предыдущего, правда?
[02:08:49.860 --> 02:08:51.860]  Почему так? Ну, просто потому,
[02:08:51.860 --> 02:08:53.860]  что, давайте посмотрим.
[02:08:53.860 --> 02:08:55.860]  Жил был у вас префикс длины и,
[02:08:55.860 --> 02:08:57.860]  и вот был вот этот вот и1
[02:08:57.860 --> 02:08:59.860]  максимальный.
[02:08:59.860 --> 02:09:01.860]  А вот теперь возник следующий
[02:09:01.860 --> 02:09:03.860]  и2.
[02:09:03.860 --> 02:09:05.860]  Ну, а
[02:09:05.860 --> 02:09:07.860]  вот он возник, и2.
[02:09:07.860 --> 02:09:09.860]  Ну, теперь, заметим, что этот и2, он, на самом деле,
[02:09:09.860 --> 02:09:11.860]  так как вот эта подстрока совпадает с этой,
[02:09:11.860 --> 02:09:13.860]  ну, в принципе, и здесь вполне себе это и2,
[02:09:13.860 --> 02:09:15.860]  вполне себе с ним совпадает.
[02:09:15.860 --> 02:09:17.860]  И, фактически, этот и2 — это максимальный
[02:09:17.860 --> 02:09:19.860]  суффикс вот этой строки
[02:09:19.860 --> 02:09:21.860]  совпадающей с префиксом, но не совпадает,
[02:09:21.860 --> 02:09:23.860]  но чтобы и2 не совпадало с ней самой.
[02:09:23.860 --> 02:09:25.860]  Правда?
[02:09:25.860 --> 02:09:27.860]  Так, лучше же, ну, надо,
[02:09:27.860 --> 02:09:29.860]  мы хотим свести к префиксу поменьше.
[02:09:29.860 --> 02:09:31.860]  Ну, можно так, потом можно
[02:09:31.860 --> 02:09:33.860]  эту картинку сюда сдвинуть.
[02:09:33.860 --> 02:09:35.860]  И, по большому счету,
[02:09:35.860 --> 02:09:37.860]  мы теперь, это нас
[02:09:37.860 --> 02:09:39.860]  приводит к такому понятию,
[02:09:39.860 --> 02:09:41.860]  как
[02:09:41.860 --> 02:09:43.860]  ну, вот, префикс
[02:09:43.860 --> 02:09:45.860]  функция. То есть, теперь мы
[02:09:45.860 --> 02:09:47.860]  вводим такой массив,
[02:09:47.860 --> 02:09:49.860]  как π от 1 до n,
[02:09:49.860 --> 02:09:51.860]  это, ну, вот, ну, n в смысле
[02:09:51.860 --> 02:09:53.860]  модуль p, конечно, это будет
[02:09:53.860 --> 02:09:55.860]  называться у нас префикс
[02:09:55.860 --> 02:09:57.860]  функция.
[02:10:05.860 --> 02:10:07.860]  Префикс функция.
[02:10:07.860 --> 02:10:09.860]  Как это будет называться?
[02:10:09.860 --> 02:10:11.860]  Определение очень простое, то есть
[02:10:11.860 --> 02:10:13.860]  π и t —
[02:10:13.860 --> 02:10:15.860]  это будет максимальное
[02:10:17.860 --> 02:10:19.860]  такое
[02:10:19.860 --> 02:10:21.860]  i1, ну, просто
[02:10:21.860 --> 02:10:23.860]  мог бы написать g, но вот для
[02:10:23.860 --> 02:10:25.860]  консистентности с этим напишу.
[02:10:25.860 --> 02:10:27.860]  То есть, максимальное i1,
[02:10:27.860 --> 02:10:29.860]  что i1 меньше i,
[02:10:29.860 --> 02:10:31.860]  и, соответственно,
[02:10:33.860 --> 02:10:35.860]  префикс длины i1
[02:10:35.860 --> 02:10:37.860]  совпадает
[02:10:37.860 --> 02:10:39.860]  с подстракой длины i1
[02:10:39.860 --> 02:10:41.860]  кончающейся
[02:10:41.860 --> 02:10:43.860]  в этом судьбе.
[02:10:47.860 --> 02:10:49.860]  Вот. То есть, по большому счету,
[02:10:49.860 --> 02:10:51.860]  теперь,
[02:10:51.860 --> 02:10:53.860]  то есть, давайте себе представим,
[02:10:53.860 --> 02:10:55.860]  что
[02:10:55.860 --> 02:10:57.860]  какой-то мистический товарищ
[02:10:57.860 --> 02:10:59.860]  присылает нам по заданным, то есть,
[02:10:59.860 --> 02:11:01.860]  черный ящик присылает нам вот эту функцию
[02:11:01.860 --> 02:11:03.860]  с небес по факсу.
[02:11:03.860 --> 02:11:05.860]  Как он у нас часто это делает?
[02:11:09.860 --> 02:11:11.860]  Вот.
[02:11:11.860 --> 02:11:13.860]  Тогда заметим,
[02:11:13.860 --> 02:11:15.860]  что, по большому счету,
[02:11:15.860 --> 02:11:17.860]  то есть, с точки зрения этой функции,
[02:11:17.860 --> 02:11:19.860]  у нас получится, что i1
[02:11:23.860 --> 02:11:25.860]  То есть, по большому счету,
[02:11:25.860 --> 02:11:27.860]  это теперь у нас равно
[02:11:27.860 --> 02:11:29.860]  π от i1,
[02:11:29.860 --> 02:11:31.860]  это равно
[02:11:31.860 --> 02:11:33.860]  π от i1.
[02:11:33.860 --> 02:11:35.860]  Кстати, обратите внимание,
[02:11:35.860 --> 02:11:37.860]  нам тут очень...
[02:11:39.860 --> 02:11:41.860]  Ах, да.
[02:11:41.860 --> 02:11:43.860]  π от i,
[02:11:43.860 --> 02:11:45.860]  это равно
[02:11:45.860 --> 02:11:47.860]  π от π от π от i.
[02:11:47.860 --> 02:11:49.860]  Обратите внимание, кстати,
[02:11:49.860 --> 02:11:51.860]  почему я сразу оговариваюсь,
[02:11:51.860 --> 02:11:53.860]  что мы будем вводить две разные индексации.
[02:11:53.860 --> 02:11:55.860]  Потому что в анализе строчек
[02:11:55.860 --> 02:11:57.860]  оказывается всегда, что в некоторых случаях
[02:11:57.860 --> 02:11:59.860]  удобно работать в одной, в один индексации,
[02:11:59.860 --> 02:12:01.860]  а в некоторых случаях в ноль индексации
[02:12:01.860 --> 02:12:03.860]  удобно работать.
[02:12:03.860 --> 02:12:05.860]  Ну, скажем, какой-нибудь там вот
[02:12:05.860 --> 02:12:07.860]  скажем, какой-нибудь субмасс или, по-моему, даже
[02:12:07.860 --> 02:12:09.860]  z функция удобно будет работать в ноль индексации.
[02:12:09.860 --> 02:12:11.860]  А вот префикс функции, она идеальная
[02:12:11.860 --> 02:12:13.860]  действительно ложиться именно в один индексации.
[02:12:13.860 --> 02:12:15.860]  Ну, вот в ноль индексации, наверное,
[02:12:15.860 --> 02:12:17.860]  если вы это когда-нибудь писали,
[02:12:17.860 --> 02:12:19.860]  вы натыкались там на всякие эти вирусы и денечки, правда?
[02:12:19.860 --> 02:12:21.860]  Было дело, да?
[02:12:21.860 --> 02:12:23.860]  Ну, вот.
[02:12:23.860 --> 02:12:25.860]  То есть, получается, скачем, то есть
[02:12:25.860 --> 02:12:27.860]  π, п, п, п, вот скачем, скачем, скачем.
[02:12:27.860 --> 02:12:29.860]  Вот.
[02:12:29.860 --> 02:12:31.860]  Ну, вот.
[02:12:31.860 --> 02:12:33.860]  Ну, и в результате,
[02:12:33.860 --> 02:12:35.860]  то есть, если нам эту префикс функцию
[02:12:35.860 --> 02:12:37.860]  откуда-то присылают с небес
[02:12:37.860 --> 02:12:39.860]  по факсу, то
[02:12:39.860 --> 02:12:41.860]  после этого,
[02:12:41.860 --> 02:12:43.860]  то есть, действительно, вы тоже все
[02:12:43.860 --> 02:12:45.860]  работаете за линию. На этот раз
[02:12:45.860 --> 02:12:47.860]  код будет выглядеть примерно следующим образом.
[02:12:47.860 --> 02:12:49.860]  Да.
[02:12:49.860 --> 02:12:51.860]  То есть, да, я специально там
[02:12:51.860 --> 02:12:53.860]  немножко не так обещаю.
[02:12:53.860 --> 02:12:55.860]  Ну, я, конечно, там не питаю иллюзию
[02:12:55.860 --> 02:12:57.860]  на тему того, что мы никогда не сталкивались
[02:12:57.860 --> 02:12:59.860]  с префикс функции.
[02:12:59.860 --> 02:13:01.860]  Я даже не спрашиваю вообще,
[02:13:01.860 --> 02:13:03.860]  сталкивались вы с ней или нет.
[02:13:03.860 --> 02:13:05.860]  Понятно, что сталкивались.
[02:13:05.860 --> 02:13:07.860]  Ну, вот, вы там
[02:13:07.860 --> 02:13:09.860]  с какой-то вероятностью могли не столкнуться
[02:13:09.860 --> 02:13:11.860]  с ахакараси, но
[02:13:11.860 --> 02:13:13.860]  именно как-то вот не с этим.
[02:13:13.860 --> 02:13:15.860]  Вот.
[02:13:15.860 --> 02:13:17.860]  И получается дальше следующее.
[02:13:17.860 --> 02:13:19.860]  То есть, ну, теперь
[02:13:19.860 --> 02:13:21.860]  заметим, что предположим, что мы
[02:13:21.860 --> 02:13:23.860]  откуда-то есть префиксунцы, в чем
[02:13:23.860 --> 02:13:25.860]  только на строку P, да?
[02:13:25.860 --> 02:13:27.860]  Тогда поезд под строки
[02:13:27.860 --> 02:13:29.860]  выглядит следующим.
[02:13:29.860 --> 02:13:31.860]  Значит, будет
[02:13:31.860 --> 02:13:33.860]  тогда выглядеть
[02:13:33.860 --> 02:13:35.860]  примерно следующим образом.
[02:13:39.860 --> 02:13:41.860]  Вот.
[02:13:41.860 --> 02:13:43.860]  Значит, смотрите, пишем
[02:13:43.860 --> 02:13:45.860]  а, ну, здесь я буду.
[02:13:45.860 --> 02:13:47.860]  Значит, я завинту вот этот вот
[02:13:47.860 --> 02:13:49.860]  вот этот красный указатель.
[02:13:49.860 --> 02:13:51.860]  Он, на самом деле,
[02:13:51.860 --> 02:13:53.860]  вот красный указатель у меня будет
[02:13:53.860 --> 02:13:55.860]  вот эта вот переменная у меня
[02:13:55.860 --> 02:13:57.860]  будет равна, ну, допустим,
[02:13:57.860 --> 02:13:59.860]  a, да? То есть, вот я буду хранить
[02:13:59.860 --> 02:14:01.860]  не где этот красный указатель
[02:14:01.860 --> 02:14:03.860]  начинается, а длину.
[02:14:03.860 --> 02:14:05.860]  И код получается так.
[02:14:05.860 --> 02:14:07.860]  Изначально a равно w.
[02:14:07.860 --> 02:14:09.860]  И дальше
[02:14:09.860 --> 02:14:11.860]  мы говорим
[02:14:11.860 --> 02:14:13.860]  for i
[02:14:13.860 --> 02:14:15.860]  равно от одного. То есть, с
[02:14:15.860 --> 02:14:17.860]  синим указателем мы прибираемся
[02:14:17.860 --> 02:14:19.860]  по всем символам t.
[02:14:19.860 --> 02:14:21.860]  Вот. И дальше говорим,
[02:14:21.860 --> 02:14:23.860]  что у нас прямо сейчас
[02:14:23.860 --> 02:14:25.860]  перед началом
[02:14:25.860 --> 02:14:27.860]  работы с этим символом l
[02:14:27.860 --> 02:14:29.860]  на самом деле будет равно вот этой величине.
[02:14:29.860 --> 02:14:31.860]  То есть, вот самый
[02:14:31.860 --> 02:14:33.860]  самый длинный подстрок
[02:14:33.860 --> 02:14:35.860]  я заканчиваю в этой позиции, являющий
[02:14:35.860 --> 02:14:37.860]  префиксом строки P. Понятно, да?
[02:14:37.860 --> 02:14:39.860]  Вот.
[02:14:39.860 --> 02:14:41.860]  Ну, теперь возникает вопрос. Мы уже
[02:14:41.860 --> 02:14:43.860]  понимаем. Мы уже
[02:14:43.860 --> 02:14:45.860]  то есть, это самое длинное,
[02:14:45.860 --> 02:14:47.860]  поэтому, как бы, очевидно, что
[02:14:47.860 --> 02:14:49.860]  теперь возникает вопрос.
[02:14:49.860 --> 02:14:51.860]  Можно ли эту, ну, действительно, то есть
[02:14:51.860 --> 02:14:53.860]  продлить, то есть, сдвинуть синий указатель,
[02:14:53.860 --> 02:14:55.860]  да или нет?
[02:14:55.860 --> 02:14:57.860]  Ну, синий указатель, ну, тут у нас
[02:14:57.860 --> 02:14:59.860]  всегда два варианта. Мы либо синий указатель
[02:14:59.860 --> 02:15:01.860]  сдвигаем на единичку, либо
[02:15:01.860 --> 02:15:03.860]  красный указатель сдвигаем,
[02:15:03.860 --> 02:15:05.860]  заменяем l на пятый, правда?
[02:15:05.860 --> 02:15:07.860]  Ну, вот.
[02:15:07.860 --> 02:15:09.860]  Ну, в данном случае, чтобы
[02:15:09.860 --> 02:15:11.860]  значит, пытаемся максимально
[02:15:11.860 --> 02:15:13.860]  там, двигаемся, пока это
[02:15:13.860 --> 02:15:15.860]  необходимо красный, и это звучит так.
[02:15:15.860 --> 02:15:17.860]  Значит, пока
[02:15:17.860 --> 02:15:19.860]  значит, l равно
[02:15:19.860 --> 02:15:21.860]  модуль P.
[02:15:23.860 --> 02:15:25.860]  Значит, или
[02:15:27.860 --> 02:15:29.860]  оказалось, что P
[02:15:29.860 --> 02:15:31.860]  от l плюс 1
[02:15:33.860 --> 02:15:35.860]  не равно, соответственно,
[02:15:35.860 --> 02:15:37.860]  t и тому.
[02:15:39.860 --> 02:15:41.860]  То есть, пока нельзя продлить,
[02:15:41.860 --> 02:15:43.860]  то есть, пока вот прям синий указатель
[02:15:43.860 --> 02:15:45.860]  нельзя сдвинуть,
[02:15:47.860 --> 02:15:49.860]  то мы, соответственно, пишем, что
[02:15:49.860 --> 02:15:51.860]  l равно
[02:15:51.860 --> 02:15:53.860]  P от l.
[02:16:01.860 --> 02:16:03.860]  Вот такой вот валик.
[02:16:03.860 --> 02:16:05.860]  То есть, пока нельзя сдвинуть, мы никуда
[02:16:05.860 --> 02:16:07.860]  двигать не будем.
[02:16:11.860 --> 02:16:13.860]  Ну, тогда после этого,
[02:16:13.860 --> 02:16:15.860]  ну, вот.
[02:16:15.860 --> 02:16:17.860]  Ну, вот.
[02:16:17.860 --> 02:16:19.860]  Ну, в самом конце, раз вал
[02:16:19.860 --> 02:16:21.860]  остановился,
[02:16:21.860 --> 02:16:23.860]  то значит, пришло время этот синий указатель
[02:16:23.860 --> 02:16:25.860]  сдвинуть. А раз мы синий указатель
[02:16:25.860 --> 02:16:27.860]  сдвигаем, то l автоматически
[02:16:27.860 --> 02:16:29.860]  вылечим.
[02:16:29.860 --> 02:16:31.860]  Плюс l пишем мы.
[02:16:31.860 --> 02:16:33.860]  Значит, идем дальше.
[02:16:33.860 --> 02:16:35.860]  То есть, плюс-плюс l.
[02:16:35.860 --> 02:16:37.860]  Ну, и, соответственно, ради чего мы все это
[02:16:37.860 --> 02:16:39.860]  делаем? То есть, если
[02:16:39.860 --> 02:16:41.860]  мы обнаружили неожиданно, что
[02:16:41.860 --> 02:16:43.860]  l равно модуль
[02:16:43.860 --> 02:16:45.860]  P, то
[02:16:45.860 --> 02:16:47.860]  значит, ну, давайте.
[02:16:49.860 --> 02:16:51.860]  То, соответственно, что-то мы тут делаем
[02:16:51.860 --> 02:16:53.860]  на тему того, что
[02:16:53.860 --> 02:16:55.860]  значит, t от
[02:16:55.860 --> 02:16:57.860]  соответственно,
[02:16:57.860 --> 02:16:59.860]  i минус модуль P
[02:16:59.860 --> 02:17:01.860]  равно
[02:17:01.860 --> 02:17:03.860]  модуль P.
[02:17:11.860 --> 02:17:13.860]  Походим на вопрос.
[02:17:13.860 --> 02:17:15.860]  А если...
[02:17:17.860 --> 02:17:19.860]  Так, давай-давай-давай.
[02:17:19.860 --> 02:17:21.860]  Ну, в общем, если у нас этот символ,
[02:17:21.860 --> 02:17:23.860]  вообще даже ни с чем нельзя.
[02:17:23.860 --> 02:17:25.860]  Да, совершенно верно.
[02:17:25.860 --> 02:17:27.860]  Да, не успел.
[02:17:27.860 --> 02:17:29.860]  Если спросить, найдите ошибку.
[02:17:29.860 --> 02:17:31.860]  Ну, это действительно правильный момент.
[02:17:31.860 --> 02:17:33.860]  Ведь может так случиться, что
[02:17:33.860 --> 02:17:35.860]  этого не произойдет
[02:17:35.860 --> 02:17:37.860]  никогда. Ведь может же так
[02:17:37.860 --> 02:17:39.860]  произойти, что мы переберем все
[02:17:39.860 --> 02:17:41.860]  вот эти вот префиксы,
[02:17:41.860 --> 02:17:43.860]  они же суфиксы, прям до нулевого
[02:17:43.860 --> 02:17:45.860]  включительно, и даже нулевой продвигки
[02:17:45.860 --> 02:17:47.860]  удастся. Может же
[02:17:47.860 --> 02:17:49.860]  такое быть?
[02:17:49.860 --> 02:17:51.860]  Может.
[02:17:51.860 --> 02:17:53.860]  И если такое будет происходить,
[02:17:53.860 --> 02:17:55.860]  то мы тут, получается, у нас тут
[02:17:55.860 --> 02:17:57.860]  появится функция P от нуля
[02:17:57.860 --> 02:17:59.860]  и просто крик and define behavior,
[02:17:59.860 --> 02:18:01.860]  потому что P от нуля мы не определили.
[02:18:01.860 --> 02:18:03.860]  Что же делать?
[02:18:03.860 --> 02:18:05.860]  Поэтому придется здесь
[02:18:05.860 --> 02:18:07.860]  чуть-чуть поаккуратнее писать.
[02:18:09.860 --> 02:18:11.860]  Первое, что придется проверить, это L
[02:18:11.860 --> 02:18:13.860]  больше нуля.
[02:18:13.860 --> 02:18:15.860]  И уже в скобочках
[02:18:15.860 --> 02:18:17.860]  проверять.
[02:18:17.860 --> 02:18:19.860]  L равно равно модуль P
[02:18:19.860 --> 02:18:21.860]  или...
[02:18:25.860 --> 02:18:27.860]  И плюс плюс L, конечно же,
[02:18:27.860 --> 02:18:29.860]  мы в итоге делать будем только
[02:18:29.860 --> 02:18:31.860]  если...
[02:18:31.860 --> 02:18:33.860]  Значит, тут
[02:18:33.860 --> 02:18:35.860]  знаете, можно напрямую написать
[02:18:35.860 --> 02:18:37.860]  P от L плюс один
[02:18:37.860 --> 02:18:39.860]  равно равно
[02:18:39.860 --> 02:18:41.860]  T и T,
[02:18:41.860 --> 02:18:43.860]  то плюс плюс L.
[02:18:43.860 --> 02:18:45.860]  В противном. Но заметим, что
[02:18:45.860 --> 02:18:47.860]  это не так может быть только в случае,
[02:18:47.860 --> 02:18:49.860]  если L равно нулю и продлить дальше нельзя,
[02:18:49.860 --> 02:18:51.860]  поэтому в этом случае ничего делать не надо.
[02:18:51.860 --> 02:18:53.860]  Вот тут действительно можно так
[02:18:53.860 --> 02:18:55.860]  написать.
[02:18:57.860 --> 02:18:59.860]  Вот.
[02:18:59.860 --> 02:19:01.860]  Вот, на самом деле, правильный код
[02:19:01.860 --> 02:19:03.860]  вот так вот.
[02:19:03.860 --> 02:19:05.860]  Понятно, да?
[02:19:05.860 --> 02:19:07.860]  Понятно?
[02:19:07.860 --> 02:19:09.860]  Вот. И чем приятен
[02:19:09.860 --> 02:19:11.860]  этот код? Тем, что он железобетонно
[02:19:11.860 --> 02:19:13.860]  работает за...
[02:19:13.860 --> 02:19:15.860]  Вот сам по себе
[02:19:15.860 --> 02:19:17.860]  этот код работает за O
[02:19:17.860 --> 02:19:19.860]  от модуль T. В общем, даже не
[02:19:19.860 --> 02:19:21.860]  P плюс T, а модуль T, обратите внимание.
[02:19:21.860 --> 02:19:23.860]  Потому что два указателя эти
[02:19:23.860 --> 02:19:25.860]  двигаются именно за O от P.
[02:19:27.860 --> 02:19:29.860]  То есть...
[02:19:29.860 --> 02:19:31.860]  То есть, смотрите, можно даже более
[02:19:31.860 --> 02:19:33.860]  точные утверждения искать. Если мы один
[02:19:33.860 --> 02:19:35.860]  раз откуда-то нам с небес
[02:19:35.860 --> 02:19:37.860]  по факту пришлю префикс функцию
[02:19:37.860 --> 02:19:39.860]  для строки P, то искать ее
[02:19:39.860 --> 02:19:41.860]  под строку мы можем теперь в любом тексте
[02:19:41.860 --> 02:19:43.860]  и каждый текст перебирать
[02:19:43.860 --> 02:19:45.860]  за O от его длины. То есть не придется там
[02:19:45.860 --> 02:19:47.860]  вот...
[02:19:47.860 --> 02:19:49.860]  То есть, более того, префикс
[02:19:49.860 --> 02:19:51.860]  функцию придется один раз искать.
[02:19:51.860 --> 02:19:53.860]  То есть, если вот забегая
[02:19:53.860 --> 02:19:55.860]  вперед мы ее научимся за O от P искать,
[02:19:55.860 --> 02:19:57.860]  то несколько текстов мы обработаем
[02:19:57.860 --> 02:19:59.860]  за O от P плюс суммарную длину
[02:19:59.860 --> 02:20:01.860]  этих текстов, а не
[02:20:01.860 --> 02:20:03.860]  суммарную длину этих текстов плюс P умножить
[02:20:03.860 --> 02:20:05.860]  на количество этих текстов.
[02:20:05.860 --> 02:20:07.860]  Так, это понятно, о чем я говорю, да?
[02:20:07.860 --> 02:20:09.860]  Вот.
[02:20:09.860 --> 02:20:11.860]  И более того, как бы и в качестве
[02:20:11.860 --> 02:20:13.860]  дополнительной памяти, если нам префикс
[02:20:13.860 --> 02:20:15.860]  функции там требует дополнительную память
[02:20:15.860 --> 02:20:17.860]  как хранение этого массива, то обратите внимание,
[02:20:17.860 --> 02:20:19.860]  то дополнительная память требуется всего лишь
[02:20:19.860 --> 02:20:21.860]  от P.
[02:20:21.860 --> 02:20:23.860]  Неплохо, правда?
[02:20:23.860 --> 02:20:25.860]  Вот.
[02:20:27.860 --> 02:20:29.860]  Остается только
[02:20:29.860 --> 02:20:31.860]  мистический вопрос.
[02:20:31.860 --> 02:20:33.860]  Как же
[02:20:33.860 --> 02:20:35.860]  ее найти?
[02:20:35.860 --> 02:20:37.860]  Ну, собственно, мы уже все и написали
[02:20:37.860 --> 02:20:39.860]  более-менее.
[02:20:39.860 --> 02:20:41.860]  Вот. Ну, как сказать,
[02:20:41.860 --> 02:20:43.860]  ну не совсем так.
[02:20:43.860 --> 02:20:45.860]  Да, это я еще
[02:20:45.860 --> 02:20:47.860]  вот так не искал.
[02:20:47.860 --> 02:20:49.860]  Но на самом деле обнаруживается, что
[02:20:49.860 --> 02:20:51.860]  саму по себе префикс функцию
[02:20:51.860 --> 02:20:53.860]  оказывается
[02:20:53.860 --> 02:20:55.860]  можно найти примерно
[02:20:55.860 --> 02:20:57.860]  тем же способом.
[02:20:57.860 --> 02:20:59.860]  Потому что мы по факту искали как бы префикс
[02:20:59.860 --> 02:21:01.860]  функцию для такого объедения
[02:21:01.860 --> 02:21:03.860]  примерно.
[02:21:03.860 --> 02:21:05.860]  Ну да.
[02:21:05.860 --> 02:21:07.860]  Ну нет, искали-то искали, но
[02:21:07.860 --> 02:21:09.860]  мы ж пользовались префикс функции
[02:21:09.860 --> 02:21:11.860]  как черным ящиком.
[02:21:11.860 --> 02:21:13.860]  Да, но в смысле те же самые.
[02:21:13.860 --> 02:21:15.860]  Ну вот. Но оказывается, что идея
[02:21:15.860 --> 02:21:17.860]  та же самая, действительно.
[02:21:17.860 --> 02:21:19.860]  Что теперь как же искать вот эту вот
[02:21:19.860 --> 02:21:21.860]  саму префикс функцию?
[02:21:21.860 --> 02:21:23.860]  Оказывается, что она ищется так.
[02:21:23.860 --> 02:21:25.860]  Вот у нас есть, допустим, строка P.
[02:21:27.860 --> 02:21:29.860]  Мы будем искать эту префикс функцию честно
[02:21:29.860 --> 02:21:31.860]  слева-направо. И вот, допустим, дошли до
[02:21:31.860 --> 02:21:33.860]  этого символа все префикс функции
[02:21:33.860 --> 02:21:35.860]  до этого момента мы знаем.
[02:21:35.860 --> 02:21:37.860]  Вот.
[02:21:37.860 --> 02:21:39.860]  Вот.
[02:21:39.860 --> 02:21:41.860]  Да.
[02:21:41.860 --> 02:21:43.860]  Ну вот.
[02:21:43.860 --> 02:21:45.860]  Ну теперь давайте посмотрим.
[02:21:45.860 --> 02:21:47.860]  Пусть вот это вот
[02:21:47.860 --> 02:21:49.860]  и есть...
[02:21:49.860 --> 02:21:51.860]  Давайте, ладно, покороче напишу.
[02:21:51.860 --> 02:21:53.860]  Вот это вот
[02:21:53.860 --> 02:21:55.860]  и есть P от P.
[02:21:55.860 --> 02:21:57.860]  Допустим, да?
[02:21:57.860 --> 02:21:59.860]  То есть мы знаем, что
[02:21:59.860 --> 02:22:01.860]  эта строка совпадает
[02:22:01.860 --> 02:22:03.860]  с префиксом строки P, при этом
[02:22:03.860 --> 02:22:05.860]  собственно, это не строка длины
[02:22:05.860 --> 02:22:07.860]  к ней, правда?
[02:22:07.860 --> 02:22:09.860]  Тогда если отпилить от этой строки
[02:22:09.860 --> 02:22:11.860]  один символ,
[02:22:11.860 --> 02:22:13.860]  то замечаем, что
[02:22:13.860 --> 02:22:15.860]  вот эта вот штука
[02:22:19.860 --> 02:22:21.860]  это подстрока совпадающая
[02:22:21.860 --> 02:22:23.860]  с префиксом,
[02:22:23.860 --> 02:22:25.860]  ну, по значению, но не
[02:22:25.860 --> 02:22:27.860]  по позиции, и заканчивающаяся
[02:22:27.860 --> 02:22:29.860]  позиции именно с этой.
[02:22:29.860 --> 02:22:31.860]  Что это означает?
[02:22:31.860 --> 02:22:33.860]  Это означает, что по большому счёту
[02:22:33.860 --> 02:22:35.860]  она лежит среди вот этой вот
[02:22:35.860 --> 02:22:37.860]  весёлой последовательности, да?
[02:22:37.860 --> 02:22:39.860]  Значит там
[02:22:39.860 --> 02:22:41.860]  P от I-1,
[02:22:41.860 --> 02:22:43.860]  P от P
[02:22:43.860 --> 02:22:45.860]  от P-1,
[02:22:45.860 --> 02:22:47.860]  П
[02:22:47.860 --> 02:22:49.860]  от P
[02:22:49.860 --> 02:22:51.860]  от P-1,
[02:22:51.860 --> 02:22:53.860]  и так далее.
[02:22:53.860 --> 02:22:55.860]  Среди этой последовательности
[02:22:55.860 --> 02:22:57.860]  она лежит.
[02:23:01.860 --> 02:23:03.860]  То есть получается, например, если бы мы искали
[02:23:03.860 --> 02:23:05.860]  опять с помощью хэшей
[02:23:05.860 --> 02:23:07.860]  каких-нибудь этих вот,
[02:23:07.860 --> 02:23:09.860]  то мы бы сказали, что раз у нас
[02:23:09.860 --> 02:23:11.860]  P от I-1 вот здесь, то заметим, что
[02:23:11.860 --> 02:23:13.860]  вот этот указатель двигать
[02:23:13.860 --> 02:23:15.860]  влево смысла нет, потому что
[02:23:15.860 --> 02:23:17.860]  вот здесь это подстрока больше
[02:23:17.860 --> 02:23:19.860]  чем вот это не будет, правда?
[02:23:19.860 --> 02:23:21.860]  И после этого тогда остаётся
[02:23:21.860 --> 02:23:23.860]  просто двигаем, двигаем, двигаем, пока не совпадают.
[02:23:23.860 --> 02:23:25.860]  Вот можно было так двумя указателями сделать.
[02:23:25.860 --> 02:23:27.860]  Но в реальности нам
[02:23:27.860 --> 02:23:29.860]  это не нужно делать, потому что
[02:23:29.860 --> 02:23:31.860]  нам достаточно просто у этой строки
[02:23:31.860 --> 02:23:33.860]  все суффиксы, совпадающие
[02:23:33.860 --> 02:23:35.860]  с префиксами, перебрать
[02:23:35.860 --> 02:23:37.860]  и каждому проверить, не совпадает ли там
[02:23:37.860 --> 02:23:39.860]  следующий символ Freedom, правда?
[02:23:39.860 --> 02:23:41.860]  Вот понятно, о чём я говорю, да?
[02:23:43.860 --> 02:23:45.860]  Честно говоря,
[02:23:45.860 --> 02:23:47.860]  по вам кажется, что вы
[02:23:47.860 --> 02:23:49.860]  уже не очень понимаете,
[02:23:49.860 --> 02:23:51.860]  что происходит.
[02:23:51.860 --> 02:23:53.860]  Ну да, в общем ладно, хорошо, что я
[02:23:53.860 --> 02:23:55.860]  это рассказываю сейчас.
[02:23:55.860 --> 02:23:57.860]  Потому что дальше начнётся более сложная
[02:23:57.860 --> 02:23:59.860]  вещь, не там хотелось бы, чтобы
[02:23:59.860 --> 02:24:01.860]  чуть-чуть менее сонная очень сильно.
[02:24:03.860 --> 02:24:05.860]  Да, я понимаю, что на втором пути
[02:24:05.860 --> 02:24:07.860]  это сложно.
[02:24:09.860 --> 02:24:11.860]  В результате
[02:24:11.860 --> 02:24:13.860]  ну тут два варианта на самом деле.
[02:24:13.860 --> 02:24:15.860]  Потому что префикс функцию
[02:24:15.860 --> 02:24:17.860]  теперь искать можно примерно так.
[02:24:19.860 --> 02:24:21.860]  Например, один вариант там
[02:24:21.860 --> 02:24:23.860]  1 всегда равно 0, тут без вариантов.
[02:24:23.860 --> 02:24:25.860]  И дальше пишем
[02:24:25.860 --> 02:24:27.860]  и равно 2 модуль
[02:24:27.860 --> 02:24:29.860]  p.
[02:24:29.860 --> 02:24:31.860]  И дальше технология говорит нам
[02:24:31.860 --> 02:24:33.860]  следующее.
[02:24:33.860 --> 02:24:35.860]  Она говорит там, допустим,
[02:24:35.860 --> 02:24:37.860]  int j равно
[02:24:37.860 --> 02:24:39.860]  p от
[02:24:39.860 --> 02:24:41.860]  i.
[02:24:41.860 --> 02:24:43.860]  Дальше while
[02:24:43.860 --> 02:24:45.860]  j больше 0
[02:24:45.860 --> 02:24:47.860]  and
[02:24:47.860 --> 02:24:49.860]  p jt
[02:24:49.860 --> 02:24:51.860]  p j
[02:24:51.860 --> 02:24:53.860]  плюс первое, пардон, не равно
[02:24:53.860 --> 02:24:55.860]  и т.е. нельзя вот это продлить.
[02:24:55.860 --> 02:24:57.860]  То, соответственно, j равно
[02:24:57.860 --> 02:24:59.860]  p от j.
[02:25:01.860 --> 02:25:03.860]  Ну и дальше пишем, что
[02:25:03.860 --> 02:25:05.860]  если
[02:25:05.860 --> 02:25:07.860]  оказалось, что
[02:25:07.860 --> 02:25:09.860]  p от j плюс 1
[02:25:09.860 --> 02:25:11.860]  равно p и
[02:25:11.860 --> 02:25:13.860]  то, соответственно, пишем
[02:25:13.860 --> 02:25:15.860]  p от i равно j
[02:25:15.860 --> 02:25:17.860]  плюс 1. В противном
[02:25:17.860 --> 02:25:19.860]  случае
[02:25:19.860 --> 02:25:21.860]  p от i равно 0.
[02:25:23.860 --> 02:25:25.860]  Все.
[02:25:27.860 --> 02:25:29.860]  И ровно по тем же
[02:25:29.860 --> 02:25:31.860]  двум
[02:25:31.860 --> 02:25:33.860]  нот двоеуказательным причинам
[02:25:33.860 --> 02:25:35.860]  эта конкретно
[02:25:35.860 --> 02:25:37.860]  функция работает за o
[02:25:37.860 --> 02:25:39.860]  от модуль
[02:25:39.860 --> 02:25:41.860]  p.
[02:25:43.860 --> 02:25:45.860]  Понимаете, да?
[02:25:49.860 --> 02:25:51.860]  Оно.
[02:25:53.860 --> 02:25:55.860]  Отлично.
[02:25:55.860 --> 02:25:57.860]  Время еще есть.
[02:26:05.860 --> 02:26:07.860]  Вот.
[02:26:07.860 --> 02:26:09.860]  Но на самом деле здесь, в этом коде
[02:26:09.860 --> 02:26:11.860]  еще обсудить.
[02:26:11.860 --> 02:26:13.860]  На самом деле этот код,
[02:26:13.860 --> 02:26:15.860]  ну, как бы,
[02:26:15.860 --> 02:26:17.860]  на самом деле, действительно, любой
[02:26:17.860 --> 02:26:19.860]  проходящий настоящий код ревью, конечно,
[02:26:19.860 --> 02:26:21.860]  сразу заметит, что
[02:26:21.860 --> 02:26:23.860]  тут имеет место
[02:26:23.860 --> 02:26:25.860]  определенного рода копипаста, правда?
[02:26:27.860 --> 02:26:29.860]  Понимаете, да?
[02:26:31.860 --> 02:26:33.860]  Да.
[02:26:33.860 --> 02:26:35.860]  Вот. Просто он совсем копипаста.
[02:26:37.860 --> 02:26:39.860]  То есть, по большому счету,
[02:26:39.860 --> 02:26:41.860]  тут на самом деле
[02:26:41.860 --> 02:26:43.860]  можно написать функцию
[02:26:43.860 --> 02:26:45.860]  go.
[02:26:47.860 --> 02:26:49.860]  Значит, от int, допустим,
[02:26:49.860 --> 02:26:51.860]  ж, ладно, int
[02:26:51.860 --> 02:26:53.860]  l, конечно, да? То есть, допустим, что
[02:26:53.860 --> 02:26:55.860]  у нас и
[02:26:55.860 --> 02:26:57.860]  char какой-нибудь
[02:26:57.860 --> 02:26:59.860]  sh. А шо, вопрос какой?
[02:27:01.860 --> 02:27:03.860]  Значит, смотрите. Да, тут сейчас
[02:27:03.860 --> 02:27:05.860]  внимательно надо смотреть.
[02:27:05.860 --> 02:27:07.860]  То есть, она говорит там следующее,
[02:27:07.860 --> 02:27:09.860]  что вот мы идем по строте,
[02:27:09.860 --> 02:27:11.860]  не важно какой, и мы
[02:27:11.860 --> 02:27:13.860]  говорили, что максимальный
[02:27:13.860 --> 02:27:15.860]  суффикс этой строти, совпадающий
[02:27:15.860 --> 02:27:17.860]  с p, да?
[02:27:17.860 --> 02:27:19.860]  Имеет длину l, допустим, да?
[02:27:19.860 --> 02:27:21.860]  И мы хотим
[02:27:21.860 --> 02:27:23.860]  приписать к этой строке l
[02:27:23.860 --> 02:27:25.860]  новый символ
[02:27:25.860 --> 02:27:27.860]  char. Вот даже
[02:27:27.860 --> 02:27:29.860]  char. И мне
[02:27:29.860 --> 02:27:31.860]  жутко интересно, чему
[02:27:31.860 --> 02:27:33.860]  будет вот самый длинный
[02:27:33.860 --> 02:27:35.860]  суффикс o этой строки равный, совпадающий
[02:27:35.860 --> 02:27:37.860]  с префиксом строки p. Понятно, да?
[02:27:39.860 --> 02:27:41.860]  Я буду делать функцию b. Если я напишу
[02:27:41.860 --> 02:27:43.860]  эту функцию go, да?
[02:27:43.860 --> 02:27:45.860]  То, в общем-то,
[02:27:45.860 --> 02:27:47.860]  я могу
[02:27:47.860 --> 02:27:49.860]  по большому счету здесь
[02:27:49.860 --> 02:27:51.860]  написать
[02:27:51.860 --> 02:27:53.860]  практически сразу l
[02:27:53.860 --> 02:27:55.860]  равно
[02:27:55.860 --> 02:27:57.860]  go
[02:27:57.860 --> 02:27:59.860]  от... Даже вот так.
[02:28:01.860 --> 02:28:03.860]  Даже зелененьким напишу.
[02:28:03.860 --> 02:28:05.860]  То есть, могу написать
[02:28:05.860 --> 02:28:07.860]  go
[02:28:07.860 --> 02:28:09.860]  от l и t.
[02:28:09.860 --> 02:28:11.860]  Все.
[02:28:11.860 --> 02:28:13.860]  Видите, просто одна строчка.
[02:28:13.860 --> 02:28:15.860]  И уже тут какой-то ивчик добивать себе.
[02:28:17.860 --> 02:28:19.860]  Понятно, да?
[02:28:19.860 --> 02:28:21.860]  Да и здесь, в общем-то,
[02:28:21.860 --> 02:28:23.860]  обратите внимание,
[02:28:23.860 --> 02:28:25.860]  то есть,
[02:28:25.860 --> 02:28:27.860]  на самом деле, я могу
[02:28:27.860 --> 02:28:29.860]  вот вместо этого всего написать...
[02:28:29.860 --> 02:28:31.860]  То есть, я просто
[02:28:31.860 --> 02:28:33.860]  вот это все упираю и говорю,
[02:28:33.860 --> 02:28:35.860]  что
[02:28:35.860 --> 02:28:37.860]  p от i
[02:28:37.860 --> 02:28:39.860]  равно, на самом деле,
[02:28:39.860 --> 02:28:41.860]  go
[02:28:41.860 --> 02:28:43.860]  от p
[02:28:43.860 --> 02:28:45.860]  от i-1
[02:28:45.860 --> 02:28:47.860]  и
[02:28:47.860 --> 02:28:49.860]  t.
[02:28:55.860 --> 02:28:57.860]  Вот.
[02:28:57.860 --> 02:28:59.860]  И где внутри
[02:28:59.860 --> 02:29:01.860]  этой функции go, я пишу
[02:29:01.860 --> 02:29:03.860]  там while
[02:29:03.860 --> 02:29:05.860]  условия... Ну, например, могу написать while
[02:29:05.860 --> 02:29:07.860]  l больше 0,
[02:29:07.860 --> 02:29:09.860]  and
[02:29:09.860 --> 02:29:11.860]  допустим, модуль p
[02:29:11.860 --> 02:29:13.860]  равно равно a, или
[02:29:13.860 --> 02:29:15.860]  что-то еще. В роли что-то еще.
[02:29:15.860 --> 02:29:17.860]  p l плюс 1
[02:29:17.860 --> 02:29:19.860]  равно равно ch.
[02:29:21.860 --> 02:29:23.860]  Значит, l равно
[02:29:23.860 --> 02:29:25.860]  p от
[02:29:25.860 --> 02:29:27.860]  a.
[02:29:27.860 --> 02:29:29.860]  Вот здесь мы передаем не ch,
[02:29:29.860 --> 02:29:31.860]  а p и t, потому что...
[02:29:31.860 --> 02:29:33.860]  Внизу.
[02:29:33.860 --> 02:29:35.860]  Ничего передаем? Ну, функцию go мы
[02:29:35.860 --> 02:29:37.860]  передаем p и t.
[02:29:41.860 --> 02:29:43.860]  Нет, минус 1 мы... Нет, вместо ch,
[02:29:43.860 --> 02:29:45.860]  вместо ch, p и t.
[02:29:45.860 --> 02:29:47.860]  Не p и t, а p и t.
[02:29:47.860 --> 02:29:49.860]  А, да-да-да, правильно- правильно.
[02:29:49.860 --> 02:29:51.860]  p и t.
[02:29:57.860 --> 02:29:59.860]  Да, p и t. Спасибо.
[02:29:59.860 --> 02:30:01.860]  Вот.
[02:30:01.860 --> 02:30:03.860]  Ну вот, ну и тут пишем, что
[02:30:03.860 --> 02:30:05.860]  там...
[02:30:05.860 --> 02:30:07.860]  То есть, допустим...
[02:30:07.860 --> 02:30:09.860]  Ну вот.
[02:30:09.860 --> 02:30:11.860]  Ну и, соответственно, да, если
[02:30:11.860 --> 02:30:13.860]  значит, p l плюс
[02:30:13.860 --> 02:30:15.860]  1 равно равно
[02:30:15.860 --> 02:30:17.860]  ch, то приторм
[02:30:17.860 --> 02:30:19.860]  l
[02:30:19.860 --> 02:30:21.860]  плюс 1,
[02:30:21.860 --> 02:30:23.860]  в противном случае
[02:30:25.860 --> 02:30:27.860]  вернуть
[02:30:27.860 --> 02:30:29.860]  1.
[02:30:29.860 --> 02:30:31.860]  Вот.
[02:30:33.860 --> 02:30:35.860]  По большому шутеру
[02:30:35.860 --> 02:30:37.860]  вот у нас имеет место функция go.
[02:30:37.860 --> 02:30:39.860]  То есть, видите, я
[02:30:39.860 --> 02:30:41.860]  по большому... Я просто... Вот, можно посчитать,
[02:30:41.860 --> 02:30:43.860]  казалось бы, что я просто избавился
[02:30:43.860 --> 02:30:45.860]  от этой пасты, правда?
[02:30:47.860 --> 02:30:49.860]  Но на самом деле,
[02:30:49.860 --> 02:30:51.860]  то есть, хочется обратить внимание еще на один
[02:30:51.860 --> 02:30:53.860]  приятный факт. Потому что
[02:30:53.860 --> 02:30:55.860]  ведь заметим, что функция go действительно
[02:30:55.860 --> 02:30:57.860]  зависит только от a и символа,
[02:30:57.860 --> 02:30:59.860]  правда?
[02:30:59.860 --> 02:31:01.860]  То есть, на самом деле,
[02:31:01.860 --> 02:31:03.860]  видите, то есть, мне достаточно...
[02:31:03.860 --> 02:31:05.860]  Если я иду по строке t,
[02:31:05.860 --> 02:31:07.860]  или там почему-нибудь еще, мне достаточно
[02:31:07.860 --> 02:31:09.860]  знать... Мне не нужно знать весь префикс,
[02:31:09.860 --> 02:31:11.860]  мне нужно знать только суффикс этого
[02:31:11.860 --> 02:31:13.860]  префикса, который совпадает с префиксом
[02:31:13.860 --> 02:31:15.860]  максимальный, да?
[02:31:15.860 --> 02:31:17.860]  Для наших целей поиска
[02:31:17.860 --> 02:31:19.860]  по строку, это все, что мне нужно знать.
[02:31:21.860 --> 02:31:23.860]  Потому что, оказывается, если я знаю
[02:31:23.860 --> 02:31:25.860]  вот этот предыдущий префикс и новый
[02:31:25.860 --> 02:31:27.860]  один символ, то я могу следующий найти.
[02:31:27.860 --> 02:31:29.860]  То есть, обратите внимание, если я хочу просто
[02:31:29.860 --> 02:31:31.860]  найти все подстроки
[02:31:31.860 --> 02:31:33.860]  значит, p в тексте t, мне сам
[02:31:33.860 --> 02:31:35.860]  текст, на самом деле, в некотором смысле,
[02:31:35.860 --> 02:31:37.860]  хранить даже не надо.
[02:31:37.860 --> 02:31:39.860]  По большому счету, мне
[02:31:39.860 --> 02:31:41.860]  я могу просто взять эту строку
[02:31:41.860 --> 02:31:43.860]  p, обработать ее,
[02:31:43.860 --> 02:31:45.860]  а потом мне этот текст могут передавать
[02:31:45.860 --> 02:31:47.860]  просто по одному символу кидать.
[02:31:47.860 --> 02:31:49.860]  Он мне кидает символ, и я говорю
[02:31:49.860 --> 02:31:51.860]  м-м-м... Куда? Второй
[02:31:51.860 --> 02:31:53.860]  м-м-м... Третий
[02:31:53.860 --> 02:31:55.860]  м-м-м... Четвертый
[02:31:55.860 --> 02:31:57.860]  п-п-п-п-п-п-п
[02:31:57.860 --> 02:31:59.860]  м-м-м...
[02:31:59.860 --> 02:32:01.860]  Пятый
[02:32:01.860 --> 02:32:03.860]  м-м-м... Потом...
[02:32:03.860 --> 02:32:05.860]  О! Схождение собралось!
[02:32:07.860 --> 02:32:09.860]  И еще так подумали.
[02:32:09.860 --> 02:32:11.860]  То есть, можно прям в канал
[02:32:11.860 --> 02:32:13.860]  докидывать символ, а я говорю
[02:32:13.860 --> 02:32:15.860]  образовалось у меня новое схождение или нет?
[02:32:17.860 --> 02:32:19.860]  Но есть маленькая подляночка.
[02:32:19.860 --> 02:32:21.860]  Если мы говорим о таких каналах,
[02:32:21.860 --> 02:32:23.860]  и когда нам приходит запрос, типа, припиши
[02:32:23.860 --> 02:32:25.860]  к темпу новый символ, и скажи, не добавилось ли
[02:32:25.860 --> 02:32:27.860]  новых схождений, да,
[02:32:27.860 --> 02:32:29.860]  то у этого алгоритма будет серьезный
[02:32:29.860 --> 02:32:31.860]  изъян.
[02:32:31.860 --> 02:32:33.860]  Потому что новый символ
[02:32:33.860 --> 02:32:35.860]  будет обрабатываться, конечно, за вот
[02:32:35.860 --> 02:32:37.860]  единицы, но с
[02:32:37.860 --> 02:32:39.860]  очень неприятным в этом случае словом
[02:32:39.860 --> 02:32:41.860]  учетно.
[02:32:41.860 --> 02:32:43.860]  Да, суммарно-то это все за
[02:32:43.860 --> 02:32:45.860]  p плюс t будет работать, но
[02:32:45.860 --> 02:32:47.860]  на каждом конкретном символе мы
[02:32:47.860 --> 02:32:49.860]  можем зависть.
[02:32:51.860 --> 02:32:53.860]  Но с этой точки зрения, на самом деле,
[02:32:53.860 --> 02:32:55.860]  можно глянуть это по-другому.
[02:32:55.860 --> 02:32:57.860]  Ведь заметим, что если алфавит у нас не
[02:32:57.860 --> 02:32:59.860]  сильно большой,
[02:32:59.860 --> 02:33:01.860]  то
[02:33:01.860 --> 02:33:03.860]  в идеале
[02:33:03.860 --> 02:33:05.860]  можно составить
[02:33:05.860 --> 02:33:07.860]  на самом деле.
[02:33:07.860 --> 02:33:09.860]  То есть, попытаться действительно
[02:33:09.860 --> 02:33:11.860]  это go вместо процедуры
[02:33:11.860 --> 02:33:13.860]  создать мистический
[02:33:13.860 --> 02:33:15.860]  массив,
[02:33:15.860 --> 02:33:17.860]  значит, допустим,
[02:33:17.860 --> 02:33:19.860]  от нуля до модуль p,
[02:33:19.860 --> 02:33:21.860]  и тут, допустим,
[02:33:21.860 --> 02:33:23.860]  от а до z, ну или
[02:33:23.860 --> 02:33:25.860]  какой у вас там алфавит, чаще всего от
[02:33:25.860 --> 02:33:27.860]  а до z, правда?
[02:33:27.860 --> 02:33:29.860]  То есть, ведь заметим, что мы же
[02:33:29.860 --> 02:33:31.860]  теоретически можем попробовать
[02:33:31.860 --> 02:33:33.860]  заранее.
[02:33:33.860 --> 02:33:35.860]  То есть, теоретически можем, если у нас есть
[02:33:35.860 --> 02:33:37.860]  префикс функция, да,
[02:33:37.860 --> 02:33:39.860]  то мы можем, могли бы попытаться действительно
[02:33:39.860 --> 02:33:41.860]  функцию go на самом деле
[02:33:41.860 --> 02:33:43.860]  действительно свести
[02:33:43.860 --> 02:33:45.860]  просто, то есть, вычислить заранее вот этот
[02:33:45.860 --> 02:33:47.860]  массив, то есть, предпочитать все возможные
[02:33:47.860 --> 02:33:49.860]  запросы, а потом на каждый этот запрос отвечать
[02:33:49.860 --> 02:33:51.860]  просто за 1, правда?
[02:33:51.860 --> 02:33:53.860]  Понимаете, да?
[02:33:53.860 --> 02:33:55.860]  Вот очень удобно.
[02:33:55.860 --> 02:33:57.860]  Вот.
[02:33:57.860 --> 02:33:59.860]  Ну и на самом деле
[02:33:59.860 --> 02:34:01.860]  тут уже, то есть, на самом деле
[02:34:01.860 --> 02:34:03.860]  вот очень хочется посчитать эту функцию,
[02:34:03.860 --> 02:34:05.860]  я ее люблю называть
[02:34:05.860 --> 02:34:07.860]  автомат префикс функции.
[02:34:13.860 --> 02:34:15.860]  Вот.
[02:34:17.860 --> 02:34:19.860]  Ну почему автомат?
[02:34:19.860 --> 02:34:21.860]  Потому что, так, ну вы же уже проходили
[02:34:21.860 --> 02:34:23.860]  автомат, правда?
[02:34:23.860 --> 02:34:25.860]  Ну тогда легко убедиться, что да,
[02:34:25.860 --> 02:34:27.860]  это просто автомат.
[02:34:27.860 --> 02:34:29.860]  Полный, детерминированный, конечный
[02:34:29.860 --> 02:34:31.860]  автомат, если уж на всем полную там
[02:34:31.860 --> 02:34:33.860]  технологию уводить.
[02:34:33.860 --> 02:34:35.860]  Да что приятно, совсем полно, правда?
[02:34:37.860 --> 02:34:39.860]  Вот.
[02:34:39.860 --> 02:34:41.860]  Значит, теперь
[02:34:41.860 --> 02:34:43.860]  остается только один вопрос.
[02:34:43.860 --> 02:34:45.860]  Как же нам этот автомат
[02:34:45.860 --> 02:34:47.860]  вычислять?
[02:34:49.860 --> 02:34:51.860]  Ну, оказывается, на самом деле
[02:34:51.860 --> 02:34:53.860]  просто вот этот вот код
[02:34:53.860 --> 02:34:55.860]  я сейчас могу переписать, пока просто
[02:34:55.860 --> 02:34:57.860]  рекульсивно, я ж могу вот этот файл делать
[02:34:57.860 --> 02:34:59.860]  рекульсивно, по большому счету.
[02:34:59.860 --> 02:35:01.860]  Потому что на самом деле
[02:35:01.860 --> 02:35:03.860]  вот этот файл я могу написать так.
[02:35:03.860 --> 02:35:05.860]  Смотрите.
[02:35:05.860 --> 02:35:07.860]  Значит, я напишу так.
[02:35:09.860 --> 02:35:11.860]  Если...
[02:35:13.860 --> 02:35:15.860]  Ладно, давайте.
[02:35:15.860 --> 02:35:17.860]  Давайте черненьким попишем.
[02:35:17.860 --> 02:35:19.860]  Хорошо.
[02:35:19.860 --> 02:35:21.860]  Значит, внимание.
[02:35:21.860 --> 02:35:23.860]  Значит, если, говорю я,
[02:35:23.860 --> 02:35:25.860]  оказалось, что
[02:35:27.860 --> 02:35:29.860]  у меня есть
[02:35:29.860 --> 02:35:31.860]  автомат,
[02:35:31.860 --> 02:35:33.860]  у меня есть автомат,
[02:35:33.860 --> 02:35:35.860]  значит,
[02:35:35.860 --> 02:35:37.860]  л равно нулю.
[02:35:37.860 --> 02:35:39.860]  Что я делаю?
[02:35:41.860 --> 02:35:43.860]  Ну, по большому счету
[02:35:43.860 --> 02:35:45.860]  возвращаю
[02:35:45.860 --> 02:35:47.860]  просто ч равно
[02:35:47.860 --> 02:35:49.860]  по первому.
[02:35:49.860 --> 02:35:51.860]  Ни больше и ни меньше, правда?
[02:35:53.860 --> 02:35:55.860]  Ну, я могу, конечно, написать там еще
[02:35:55.860 --> 02:35:57.860]  этот вопросик 1, 2, 0,
[02:35:57.860 --> 02:35:59.860]  но этот индуизм мы разводить не будем.
[02:35:59.860 --> 02:36:01.860]  Да.
[02:36:01.860 --> 02:36:03.860]  Нет, инди не киндусы люди
[02:36:03.860 --> 02:36:05.860]  как писать.
[02:36:05.860 --> 02:36:07.860]  Потому что они там иногда проверяют какую-то
[02:36:07.860 --> 02:36:09.860]  бульевую функцию там методом.
[02:36:09.860 --> 02:36:11.860]  Если это f,
[02:36:11.860 --> 02:36:13.860]  f.toostring.length
[02:36:13.860 --> 02:36:15.860]  меньше 5,
[02:36:17.860 --> 02:36:19.860]  какая-то такая координация.
[02:36:19.860 --> 02:36:21.860]  Но это, конечно, надо верить, что...
[02:36:21.860 --> 02:36:23.860]  А, ну да.
[02:36:23.860 --> 02:36:25.860]  Я не знаю, там на уровне шутки
[02:36:25.860 --> 02:36:27.860]  или кто-то реально так разлёгся.
[02:36:27.860 --> 02:36:29.860]  Но...
[02:36:29.860 --> 02:36:31.860]  Но в противном случае
[02:36:31.860 --> 02:36:33.860]  мы говорим,
[02:36:33.860 --> 02:36:35.860]  что если оказалось,
[02:36:35.860 --> 02:36:37.860]  что l меньше,
[02:36:37.860 --> 02:36:39.860]  чем модуль p,
[02:36:39.860 --> 02:36:41.860]  и оказалось, что p
[02:36:41.860 --> 02:36:43.860]  l плюс первое
[02:36:43.860 --> 02:36:45.860]  равно этому
[02:36:45.860 --> 02:36:47.860]  ч,
[02:36:47.860 --> 02:36:49.860]  то мы просто возвращаем
[02:36:49.860 --> 02:36:51.860]  l плюс 1.
[02:36:51.860 --> 02:36:53.860]  В противном случае,
[02:36:53.860 --> 02:36:55.860]  что мы делаем?
[02:36:55.860 --> 02:36:57.860]  Мы вызываемся
[02:36:57.860 --> 02:36:59.860]  рекурсивно.
[02:37:03.860 --> 02:37:05.860]  Мы вызываемся от
[02:37:05.860 --> 02:37:07.860]  p от a
[02:37:09.860 --> 02:37:11.860]  и еще.
[02:37:13.860 --> 02:37:15.860]  То есть, по большому счету,
[02:37:15.860 --> 02:37:17.860]  ну, можно так сказать,
[02:37:17.860 --> 02:37:19.860]  опять, если нам
[02:37:19.860 --> 02:37:21.860]  эту префикс-функцию прислали с небес по факсу,
[02:37:21.860 --> 02:37:23.860]  то go
[02:37:23.860 --> 02:37:25.860]  мы теперь можем насчитать просто элементарно.
[02:37:27.860 --> 02:37:29.860]  Более того, ну, код пока выглядит
[02:37:29.860 --> 02:37:31.860]  рекурсивно, но на самом деле
[02:37:31.860 --> 02:37:33.860]  заметим, что если я...
[02:37:33.860 --> 02:37:35.860]  что я могу просто бронетанком пройтись
[02:37:35.860 --> 02:37:37.860]  на самом деле
[02:37:37.860 --> 02:37:39.860]  от 0 до p по всем символам,
[02:37:39.860 --> 02:37:41.860]  прям честно каждый новый символ за 1
[02:37:41.860 --> 02:37:43.860]  запомнить, правда?
[02:37:43.860 --> 02:37:45.860]  Вот.
[02:37:47.860 --> 02:37:49.860]  Но фишка на самом деле
[02:37:49.860 --> 02:37:51.860]  тут еще
[02:37:51.860 --> 02:37:53.860]  крутая.
[02:37:53.860 --> 02:37:55.860]  Потому что
[02:37:55.860 --> 02:37:57.860]  на самом деле никакой рекурсии вообще не надо.
[02:37:57.860 --> 02:37:59.860]  Потому что на самом деле
[02:37:59.860 --> 02:38:01.860]  есть еще мистическое утверждение.
[02:38:05.860 --> 02:38:07.860]  Дело в том, что, как легко догадаться,
[02:38:07.860 --> 02:38:09.860]  pi t,
[02:38:09.860 --> 02:38:11.860]  то есть pi plus 1,
[02:38:11.860 --> 02:38:13.860]  давай так, каждая следующая pi,
[02:38:13.860 --> 02:38:15.860]  ладно, лучше так,
[02:38:15.860 --> 02:38:17.860]  pi t, когда i больше 1,
[02:38:17.860 --> 02:38:19.860]  оно равно
[02:38:19.860 --> 02:38:21.860]  оно равно
[02:38:21.860 --> 02:38:23.860]  оно равно go.
[02:38:23.860 --> 02:38:25.860]  Go от
[02:38:25.860 --> 02:38:27.860]  pi, pi minus 1
[02:38:27.860 --> 02:38:29.860]  и
[02:38:29.860 --> 02:38:31.860]  pi t.
[02:38:33.860 --> 02:38:35.860]  А, ой!
[02:38:35.860 --> 02:38:37.860]  Откуда же я взял это, да?
[02:38:37.860 --> 02:38:39.860]  А я тут недалеко
[02:38:39.860 --> 02:38:41.860]  вообще никуда не ходил.
[02:38:45.860 --> 02:38:47.860]  Ну вот, то есть в результате
[02:38:47.860 --> 02:38:49.860]  это вам позволяет, на самом деле
[02:38:49.860 --> 02:38:51.860]  вот этот вот go
[02:38:51.860 --> 02:38:53.860]  насчитывать одновременно
[02:38:53.860 --> 02:38:55.860]  с префикс-функцией просто.
[02:38:55.860 --> 02:38:57.860]  Понимаете, да?
[02:38:59.860 --> 02:39:01.860]  То есть по нот
[02:39:01.860 --> 02:39:03.860]  то есть по большому счету,
[02:39:03.860 --> 02:39:05.860]  то есть в результате, вот так, давайте я
[02:39:05.860 --> 02:39:07.860]  где-нибудь
[02:39:07.860 --> 02:39:09.860]  так, ну думаю,
[02:39:09.860 --> 02:39:11.860]  вот это вот на месте.
[02:39:13.860 --> 02:39:15.860]  То есть это мы все определили,
[02:39:15.860 --> 02:39:17.860]  что мы радость определили,
[02:39:17.860 --> 02:39:19.860]  и получается,
[02:39:19.860 --> 02:39:21.860]  что, оказывается,
[02:39:21.860 --> 02:39:23.860]  оказывается,
[02:39:23.860 --> 02:39:25.860]  что на самом деле
[02:39:25.860 --> 02:39:27.860]  подсчет этого go
[02:39:27.860 --> 02:39:29.860]  и этой радости,
[02:39:29.860 --> 02:39:31.860]  то есть на самом деле можно привести
[02:39:31.860 --> 02:39:33.860]  так, интересно, какой тут
[02:39:33.860 --> 02:39:35.860]  Google IT-махи, о котором
[02:39:35.860 --> 02:39:37.860]  это пишется, значит, делается, получается так.
[02:39:37.860 --> 02:39:39.860]  То есть вот предположим,
[02:39:39.860 --> 02:39:41.860]  что мы хотим насчитать и go,
[02:39:41.860 --> 02:39:43.860]  и префикс-функции, да?
[02:39:43.860 --> 02:39:45.860]  Значит, мы теперь начинаем,
[02:39:45.860 --> 02:39:47.860]  что for ч равно
[02:39:47.860 --> 02:39:49.860]  a до z,
[02:39:49.860 --> 02:39:51.860]  пишем go
[02:39:51.860 --> 02:39:53.860]  от нуля, там,
[02:39:53.860 --> 02:39:55.860]  условно, чита,
[02:39:55.860 --> 02:39:57.860]  да, я тут не буду
[02:39:57.860 --> 02:39:59.860]  вот это a вычитать, все равно все такое пишем, да?
[02:39:59.860 --> 02:40:01.860]  Ну вот я, нет, видите, у меня
[02:40:01.860 --> 02:40:03.860]  массив в паскальском смысле так изобретен,
[02:40:03.860 --> 02:40:05.860]  хоть кто-нибудь на языке паскаль?
[02:40:05.860 --> 02:40:07.860]  Нет, так 7-8 назад.
[02:40:07.860 --> 02:40:09.860]  7-8?
[02:40:09.860 --> 02:40:11.860]  Так, что я делал
[02:40:11.860 --> 02:40:13.860]  7-8 назад?
[02:40:13.860 --> 02:40:15.860]  Так, 22-24.
[02:40:15.860 --> 02:40:17.860]  А, я же к финалу
[02:40:17.860 --> 02:40:19.860]  готовился, 8 я был.
[02:40:19.860 --> 02:40:21.860]  Да, я ездил в
[02:40:21.860 --> 02:40:23.860]  14-му ряду, что называется,
[02:40:23.860 --> 02:40:25.860]  на Чемпионат мира, на Международный город,
[02:40:25.860 --> 02:40:27.860]  великий город,
[02:40:27.860 --> 02:40:29.860]  Екатеринбурж.
[02:40:29.860 --> 02:40:31.860]  Да.
[02:40:31.860 --> 02:40:33.860]  Ну вот.
[02:40:33.860 --> 02:40:35.860]  Значит, так вот, значит,
[02:40:35.860 --> 02:40:37.860]  go от ч будет равно,
[02:40:37.860 --> 02:40:39.860]  ну, как мы уже сказали, да,
[02:40:39.860 --> 02:40:41.860]  п1
[02:40:41.860 --> 02:40:43.860]  равно ч.
[02:40:43.860 --> 02:40:45.860]  Ну, 0 или 1, понимаете, да?
[02:40:49.860 --> 02:40:51.860]  Ну вот.
[02:40:51.860 --> 02:40:53.860]  Дальше.
[02:40:53.860 --> 02:40:55.860]  Ну, дальше пишем for и
[02:40:55.860 --> 02:40:57.860]  равно от 1
[02:40:57.860 --> 02:40:59.860]  до, соответственно, модуль p.
[02:40:59.860 --> 02:41:01.860]  Теперь говорим. Ну, начнем с того,
[02:41:01.860 --> 02:41:03.860]  что p от i, как мы уже сказали,
[02:41:03.860 --> 02:41:05.860]  равно go от
[02:41:05.860 --> 02:41:07.860]  p и минус 1.
[02:41:07.860 --> 02:41:09.860]  Ну, соответственно,
[02:41:09.860 --> 02:41:11.860]  p.
[02:41:11.860 --> 02:41:13.860]  p мы знаем.
[02:41:15.860 --> 02:41:17.860]  Понятно, да?
[02:41:17.860 --> 02:41:19.860]  Вот.
[02:41:19.860 --> 02:41:21.860]  Ну, а вот
[02:41:21.860 --> 02:41:23.860]  теперь мы начинаем
[02:41:23.860 --> 02:41:25.860]  for ч равно
[02:41:25.860 --> 02:41:27.860]  а, z.
[02:41:27.860 --> 02:41:29.860]  Ну и говорим,
[02:41:29.860 --> 02:41:31.860]  что если оказалось, что
[02:41:31.860 --> 02:41:33.860]  p это
[02:41:33.860 --> 02:41:35.860]  нет, ладно, погодите, погодите,
[02:41:35.860 --> 02:41:37.860]  для начала. Если оказалось,
[02:41:37.860 --> 02:41:39.860]  что i все еще меньше модуль
[02:41:39.860 --> 02:41:41.860]  p,
[02:41:43.860 --> 02:41:45.860]  значит, если оказалось,
[02:41:45.860 --> 02:41:47.860]  что i плюс 1 меньше
[02:41:47.860 --> 02:41:49.860]  либо равно модуль
[02:41:49.860 --> 02:41:51.860]  p
[02:41:51.860 --> 02:41:53.860]  and,
[02:41:53.860 --> 02:41:55.860]  значит, соответственно, end-end
[02:41:55.860 --> 02:41:57.860]  p
[02:41:57.860 --> 02:41:59.860]  i плюс 1 равно
[02:41:59.860 --> 02:42:01.860]  равно ч
[02:42:01.860 --> 02:42:03.860]  p. Чего?
[02:42:03.860 --> 02:42:05.860]  Да.
[02:42:05.860 --> 02:42:07.860]  Ну, то, соответственно,
[02:42:07.860 --> 02:42:09.860]  go
[02:42:09.860 --> 02:42:11.860]  от и ч
[02:42:11.860 --> 02:42:13.860]  равно и плюс 1.
[02:42:13.860 --> 02:42:15.860]  В противном случае
[02:42:15.860 --> 02:42:17.860]  мы уже точно знаем, что придется
[02:42:17.860 --> 02:42:19.860]  скакать в пишку, правда?
[02:42:19.860 --> 02:42:21.860]  Поэтому и говорим,
[02:42:21.860 --> 02:42:23.860]  что если оказалось,
[02:42:25.860 --> 02:42:27.860]  а, а ничего
[02:42:27.860 --> 02:42:29.860]  не оказалось.
[02:42:29.860 --> 02:42:31.860]  На самом деле мы даже заморачиваться
[02:42:31.860 --> 02:42:33.860]  и будем. В противном случае
[02:42:33.860 --> 02:42:35.860]  go и ч просто равно
[02:42:35.860 --> 02:42:37.860]  go
[02:42:37.860 --> 02:42:39.860]  от p
[02:42:39.860 --> 02:42:41.860]  от и.
[02:42:47.860 --> 02:42:49.860]  Да, это ж и заведомо больше нуля,
[02:42:49.860 --> 02:42:51.860]  поэтому тут даже лишнее не вставить не надо.
[02:42:51.860 --> 02:42:53.860]  То есть либо
[02:42:53.860 --> 02:42:55.860]  следующий символ совпадает, и мы
[02:42:55.860 --> 02:42:57.860]  прибавляем 1, либо идем дальше.
[02:42:57.860 --> 02:42:59.860]  Можно было это, если хотите совсем
[02:42:59.860 --> 02:43:01.860]  короче написать, можно вообще тогда
[02:43:01.860 --> 02:43:03.860]  им операторы написать.
[02:43:03.860 --> 02:43:05.860]  Но я думаю, это не нужно, потому что
[02:43:05.860 --> 02:43:07.860]  не очень удобно читать.
[02:43:07.860 --> 02:43:09.860]  То есть на самом деле, да,
[02:43:09.860 --> 02:43:11.860]  это конечно работает не за o от
[02:43:11.860 --> 02:43:13.860]  e, это работает за o от модуль p
[02:43:13.860 --> 02:43:15.860]  на размер алфавита, конечно.
[02:43:15.860 --> 02:43:17.860]  Если у вас,
[02:43:17.860 --> 02:43:19.860]  то есть, заметим, то есть вот тут важно
[02:43:19.860 --> 02:43:21.860]  понимать, что если алфавит маленький,
[02:43:21.860 --> 02:43:23.860]  то да, вы можете написать вот эту функцию go
[02:43:23.860 --> 02:43:25.860]  и после этого, на самом деле,
[02:43:25.860 --> 02:43:27.860]  обработку текста сделать так, что
[02:43:27.860 --> 02:43:29.860]  новый символ обрабатывает за o от единицы
[02:43:29.860 --> 02:43:31.860]  в честную, потому что у вас есть автомат.
[02:43:31.860 --> 02:43:33.860]  То есть, знаете, там
[02:43:33.860 --> 02:43:35.860]  бывают, на самом деле, даже в спортивном программиру,
[02:43:35.860 --> 02:43:37.860]  у них встречаются задачи, в которых это бывает
[02:43:37.860 --> 02:43:39.860]  полезно. То есть так, классическая
[02:43:39.860 --> 02:43:41.860]  задача, например, это
[02:43:41.860 --> 02:43:43.860]  например, представьте, вам
[02:43:43.860 --> 02:43:45.860]  дано такое,
[02:43:45.860 --> 02:43:47.860]  то есть вам дана строка p и
[02:43:47.860 --> 02:43:49.860]  подвешенное дерево.
[02:43:49.860 --> 02:43:51.860]  Ну подвешенное дерево,
[02:43:51.860 --> 02:43:53.860]  на каждом ребре написана буква.
[02:43:53.860 --> 02:43:55.860]  Нет, не
[02:43:55.860 --> 02:43:57.860]  путайте сбором, пожалуйста, там одинаковые буквы,
[02:43:57.860 --> 02:43:59.860]  торчащие детей, могут вполне быть.
[02:43:59.860 --> 02:44:01.860]  Почему нет? И у вас
[02:44:01.860 --> 02:44:03.860]  веселая задача. Найдите, пожалуйста,
[02:44:03.860 --> 02:44:05.860]  все обхождения строки
[02:44:05.860 --> 02:44:07.860]  p в эту дереву. Обхождения, в смысле,
[02:44:07.860 --> 02:44:09.860]  возьмите путь,
[02:44:09.860 --> 02:44:11.860]  имейте в виду только чтобы
[02:44:11.860 --> 02:44:13.860]  вертикально. Да, только вертикально.
[02:44:13.860 --> 02:44:15.860]  Вот эти вот, это там уже отдельная песня,
[02:44:15.860 --> 02:44:17.860]  на самом деле, какими разделями
[02:44:17.860 --> 02:44:19.860]  и центровыми надо делать,
[02:44:19.860 --> 02:44:21.860]  или чем-то еще. Но если вы,
[02:44:21.860 --> 02:44:23.860]  но заметим, что
[02:44:23.860 --> 02:44:25.860]  это делать префикс функции, действительно,
[02:44:25.860 --> 02:44:27.860]  но заметим, что именно здесь
[02:44:27.860 --> 02:44:29.860]  помогает автомат.
[02:44:29.860 --> 02:44:31.860]  Да, но помните,
[02:44:31.860 --> 02:44:33.860]  что если автомат
[02:44:33.860 --> 02:44:35.860]  не построите, то как с персистентностью.
[02:44:35.860 --> 02:44:37.860]  То есть, может, так и вам
[02:44:37.860 --> 02:44:39.860]  могут подсунуть тест, на котором
[02:44:39.860 --> 02:44:41.860]  называется там, переход будет работать,
[02:44:41.860 --> 02:44:43.860]  каждый переход будет работать долго.
[02:44:43.860 --> 02:44:45.860]  Как-то была у нас классика, да?
[02:44:45.860 --> 02:44:47.860]  Я буду заставить того старого фрича
[02:44:47.860 --> 02:44:49.860]  открыть нас еще раз,
[02:44:49.860 --> 02:44:51.860]  еще раз, еще раз.
[02:44:51.860 --> 02:44:53.860]  Вот.
[02:44:53.860 --> 02:44:55.860]  Ну вот.
[02:44:55.860 --> 02:44:57.860]  А конкретно автомат, действительно,
[02:44:57.860 --> 02:44:59.860]  это очень красиво сделает.
[02:44:59.860 --> 02:45:01.860]  Впрочем, обратите внимание, работает это
[02:45:01.860 --> 02:45:03.860]  только за О от модуль П на
[02:45:03.860 --> 02:45:05.860]  Альфа.
[02:45:05.860 --> 02:45:07.860]  То есть,
[02:45:07.860 --> 02:45:09.860]  совсем для нот.
[02:45:09.860 --> 02:45:11.860]  Потому что, действительно,
[02:45:11.860 --> 02:45:13.860]  это так себе будет работать,
[02:45:13.860 --> 02:45:15.860]  так себе будет работать, если Альфа,
[02:45:15.860 --> 02:45:17.860]  если размер алфавита,
[02:45:17.860 --> 02:45:19.860]  будет сопоставим с размером строки,
[02:45:19.860 --> 02:45:21.860]  тогда придется
[02:45:21.860 --> 02:45:23.860]  исходную версию притикс функции использовать,
[02:45:23.860 --> 02:45:25.860]  потому что исходная версия притикс функции
[02:45:25.860 --> 02:45:27.860]  размер алфавита не пользовала никак.
[02:45:27.860 --> 02:45:29.860]  Она пользовала по факту
[02:45:29.860 --> 02:45:31.860]  только одно, что мы умеем
[02:45:31.860 --> 02:45:33.860]  взять два символа и сказать, они равны
[02:45:33.860 --> 02:45:35.860]  или нет.
