[00:00.000 --> 00:07.000]  Так, ну что, давайте начинать.
[00:07.000 --> 00:15.000]  Значит, у нас остаются две лекции последние, и их мы посвятим лямдоисчислению.
[00:15.000 --> 00:26.000]  Значит, лямдоисчисление – это, ну, можно сказать, что это некоторый альтернативный подход к понятию учислимости.
[00:26.000 --> 00:37.000]  Значит, лямдоисчисление.
[00:37.000 --> 00:47.000]  Значит, можно сказать, что подход с машинами тюринга в конечном счёте основан на понятии множества.
[00:47.000 --> 00:55.000]  Ну, что такое машина тюринга? Ну, это какой-то картеж из каких-то множеств и функций.
[00:55.000 --> 01:01.000]  Ну, а что такое картеж? Ну, картеж – это в конечном счёте такое множество.
[01:01.000 --> 01:09.000]  Потому что мы определяли картеж через там пару из головы и хвоста, а пары тоже такое множество.
[01:09.000 --> 01:15.000]  Функции – это тоже множество пар, то есть тоже какое-то множество.
[01:15.000 --> 01:20.000]  В общем, в конечном счёте понятие машина тюринга основан на понятии множества.
[01:20.000 --> 01:30.000]  Ну и, в принципе, такой стандартный подход в математике, на что все числа, функции, любые такие объекты
[01:30.000 --> 01:38.000]  в конечном счёте идут от понятия множества. И теория множества – это фундамент всей математики.
[01:38.000 --> 01:45.000]  А вот лямдоисчисление – концепция другая. Значит, лямдоисчисление – ключевой объект – это функция.
[01:45.000 --> 01:51.000]  Вот, то есть как бы функции – это такие преобразования одних функций в другие функции,
[01:51.000 --> 01:58.000]  и логические значения – это такие функции, и натуральные числа – это такие функции специальные, и так далее.
[01:58.000 --> 02:03.000]  В общем, все объекты идут от понятия функции.
[02:03.000 --> 02:11.000]  То есть можно сказать, что девиз. Девиз состоит в том, что всё есть функция.
[02:15.000 --> 02:25.000]  Но есть такая парадигма функционального программирования, которая тоже основана на том же самом девизе.
[02:25.000 --> 02:31.000]  И некоторые задачи в функциональных языках решаются проще, чем в других.
[02:31.000 --> 02:39.000]  Есть специальные языки программирования типа Хаскела, которые основаны в конечном итоге на лямдоисчислении, на концепции.
[02:39.000 --> 02:49.000]  Ну и, соответственно, если вы захотите их изучать, их использовать, то для этого будет полезно понимать основы теории.
[02:49.000 --> 02:54.000]  Соответственно, вот это две причины, по которым мы изучаем эту тему.
[02:54.000 --> 03:04.000]  Ну, можно сказать, что это историческая причина, потому что, в принципе, и лямдоисчисление, и рекурсивные функции, и машина тюринга,
[03:04.000 --> 03:09.000]  и ещё несколько концепций появились примерно в одно и то же время, в середине 30-х годов прошлого века.
[03:09.000 --> 03:26.000]  И все эти концепции по-разному описывали, определяют, что такое вычислимость, ну и, конечно, все эти концепции и планеты между собой.
[03:26.000 --> 03:38.000]  И судьба их сложилась по-разному. Некоторые утвердили своё место в теории, некоторые остались скорее в истории науки.
[03:38.000 --> 03:50.000]  Ну вот, у лямдоисчисления оказались ещё и другие приложения. Вот, и это вторая причина, по которой мы его изучаем.
[03:50.000 --> 04:00.000]  Так, хорошо. Значит, теперь что мы будем за эти две лекции изучать?
[04:00.000 --> 04:04.000]  Значит, вообще на лямдоисчислении можно смотреть как на формальную теорию.
[04:04.000 --> 04:13.000]  Тут будет некоторый язык с некоторым синтаксисом и некоторая семантика, то есть, что эти записи будут означать.
[04:13.000 --> 04:21.000]  И, соответственно, семантика будет как раз для разных конкретных числовых систем.
[04:21.000 --> 04:29.000]  Будут номералы, которые означают натуральные числа, будут комбинаторы, это называется.
[04:29.000 --> 04:35.000]  Будут комбинаторы для логических значений, для образования пары.
[04:35.000 --> 04:47.000]  И будут комбинаторы уже для настоящих функций, которые будут производиться вот с этими номералами или логическими значениями и так далее.
[04:47.000 --> 04:52.000]  Вот, но начнём из синтаксиса.
[04:52.000 --> 05:02.000]  Почему оно лямдоисчисление? Потому что есть тут символ лямдо, который очень много используется.
[05:02.000 --> 05:06.000]  Значит, синтаксис лямдоисчисления.
[05:06.000 --> 05:16.000]  Значит, синтаксис начинается с языка.
[05:16.000 --> 05:22.000]  Ну, или можно сказать, что синтаксис – это есть язык, но язык начинается с алфавита.
[05:22.000 --> 05:28.000]  И алфавит тут, на самом деле, довольно просто устроен.
[05:28.000 --> 05:33.000]  Алфавит стоит из переменных.
[05:37.000 --> 05:43.000]  Переменная. Ну, обычно будут маленькие латинские буквы.
[05:43.000 --> 05:47.000]  В общем, всякие.
[05:47.000 --> 05:49.000]  Переменная.
[05:49.000 --> 05:59.000]  Значит, дальше квантор. Лямдо квантор, или квантор лямдо абстракции.
[06:03.000 --> 06:08.000]  Ну, и он как бы будет стоять из двух частей, из двух символов.
[06:08.000 --> 06:12.000]  Значит, будет лямдо и будет точка.
[06:13.000 --> 06:19.000]  Вот. Ну, и скобки ещё.
[06:19.000 --> 06:27.000]  Значит, скобки. Всё. Больше никаких символов в алфаите нет.
[06:27.000 --> 06:31.000]  В общем, алфаит довольно простой.
[06:34.000 --> 06:39.000]  Так, дальше начинается правило построения.
[06:40.000 --> 06:46.000]  Значит, правило построения выражений, которые называются лямдо-термами.
[06:51.000 --> 06:57.000]  Так, ну, наверное, давайте прежде, чем я формально буду говорить, как они строятся,
[06:57.000 --> 07:02.000]  я постараюсь объяснить, что означает этот квантор лямдо.
[07:02.000 --> 07:14.000]  Да, как бы смысл вот этой лямдо, смысл лямдо явно сказать,
[07:17.000 --> 07:25.000]  от чего зависят последующие выражения.
[07:25.000 --> 07:35.000]  То есть, например, лямдо х точка х плюс у.
[07:35.000 --> 07:39.000]  Аль, давайте я лучше буду...
[07:39.000 --> 07:42.000]  Это не совсем так, как... Вот так вот.
[07:42.000 --> 07:44.000]  Лямдо х точка ху.
[07:44.000 --> 07:49.000]  Вот этот ху можно считать как конконтинация, можно считать как умножение.
[07:49.000 --> 07:59.000]  Это означает выражение ху как функция от х.
[08:01.000 --> 08:04.000]  Лямдо у точка ху.
[08:04.000 --> 08:08.000]  Это то же самое, только как функция от у.
[08:08.000 --> 08:13.000]  А, например, если написать лямдо ху точка ху,
[08:13.000 --> 08:17.000]  то это будет как функция от двух переменных.
[08:23.000 --> 08:26.000]  Ну, а если вообще без лямдо ху,
[08:26.000 --> 08:31.000]  то это значит, просто выражение вообще не воспринимается как...
[08:31.000 --> 08:36.000]  Ну, оно не может вообще не восприниматься как функция,
[08:36.000 --> 08:40.000]  ну, и вообще можно сказать, что это просто такая константа, что ли, параметр.
[08:48.000 --> 08:50.000]  Вот.
[09:00.000 --> 09:02.000]  Вот, хорошо.
[09:02.000 --> 09:06.000]  Теперь, наверное, давайте я с основной страницы начну.
[09:08.000 --> 09:12.000]  Теперь как, собственно, строятся лямдо термы.
[09:16.000 --> 09:20.000]  Построение лямдо термов.
[09:20.000 --> 09:25.000]  Значит, вот корректные выражения называются лямдо термами.
[09:25.000 --> 09:28.000]  Ну, и, как всегда, есть базовый случай.
[09:28.000 --> 09:32.000]  Значит, база просто однопременная.
[09:32.000 --> 09:38.000]  То есть, если х-переменная, тогда х это лямдо терм.
[09:44.000 --> 09:48.000]  Ну, и, как всегда, есть базовый случай.
[09:48.000 --> 09:54.000]  Если х-переменная, тогда х это лямдо терм.
[10:00.000 --> 10:03.000]  Вот. Значит, дальше есть...
[10:03.000 --> 10:07.000]  Ну, давайте пронумеру, это первое.
[10:07.000 --> 10:13.000]  Значит, второе можно назвать конкассинацией,
[10:13.000 --> 10:17.000]  и это такой синтоксический взгляд.
[10:19.000 --> 10:23.000]  А можно назвать еще по-другому.
[10:23.000 --> 10:27.000]  Аппликации.
[10:27.000 --> 10:31.000]  Аппликации не в смысле переводная картинка, а в смысле application,
[10:31.000 --> 10:37.000]  то есть приложение или прикладывание одного к другому.
[10:37.000 --> 10:41.000]  И это как-то такой семантический смысл.
[10:41.000 --> 10:44.000]  Значит, тут, следующий.
[10:44.000 --> 10:47.000]  Если уже есть два терма,
[10:47.000 --> 10:51.000]  если m и n это лямдо термы,
[10:51.000 --> 10:57.000]  то тогда, если мы их напишем друг за другом, m и n,
[10:57.000 --> 11:01.000]  то это даже будет лямдо термы.
[11:01.000 --> 11:05.000]  Вот. Ну, а почему это аппликация?
[11:05.000 --> 11:09.000]  Ну, потому что смысл тут такой,
[11:09.000 --> 11:23.000]  как бы, функцию m применили к аргументу m.
[11:26.000 --> 11:29.000]  То есть когда мы записываем два терма друг за другом,
[11:29.000 --> 11:33.000]  то это означает, что мы первые из них сменяем как функцию
[11:33.000 --> 11:36.000]  и применяем ко второму.
[11:36.000 --> 11:40.000]  Соответственно, получается, что когда вообще было x и y,
[11:40.000 --> 11:43.000]  то есть вот это вот x и y, это как бы и есть аппликация,
[11:43.000 --> 11:46.000]  то есть мы x применяем к y.
[11:46.000 --> 11:50.000]  Если просто написано x и y, то это вот такое выражение.
[11:50.000 --> 11:54.000]  А вот это вот, как бы, лямдо x.xy,
[11:54.000 --> 11:59.000]  означает, что это как-то такой оператор, который получает x произвольно
[11:59.000 --> 12:02.000]  и применяет к конкретному y.
[12:02.000 --> 12:05.000]  А лямдо y.xy это наоборот.
[12:05.000 --> 12:08.000]  Это фактически обычная функция x,
[12:08.000 --> 12:12.000]  что мы фиксируем функцию x, применяем к произвольному y.
[12:12.000 --> 12:16.000]  А вот третья, лямдо x.xy, означает, что мы сразу получаем
[12:16.000 --> 12:19.000]  и функцию, и аргумент для нее, и это что-то типа такое
[12:19.000 --> 12:23.000]  универсальная машина. Она получает функцию, получает аргументы
[12:23.000 --> 12:28.000]  и вычисляет значения. Ну, вычисляет, не вычисляет,
[12:28.000 --> 12:34.000]  но, в общем, вот это вот x и y мы понимаем как результат,
[12:34.000 --> 12:37.000]  процедура, которая получает и функцию, и аргумент,
[12:37.000 --> 12:42.000]  и возвращает значение функции на этом аргументе.
[12:42.000 --> 12:46.000]  Так, это, значит, второе.
[12:46.000 --> 12:49.000]  И третье.
[12:49.000 --> 12:53.000]  Третье называется лямдоабстракция.
[12:57.000 --> 13:01.000]  Значит, лямдоабстракция возникает в следующем образом.
[13:01.000 --> 13:09.000]  Значит, если у меня есть m, лямдо терм, а x это переменная,
[13:09.000 --> 13:15.000]  то тогда в скобках вот так вот, лямдо x.m,
[13:15.000 --> 13:20.000]  в скобках, значит, это тоже лямдо терм.
[13:21.000 --> 13:25.000]  Вот.
[13:25.000 --> 13:31.000]  И смысл тут такой, что раньше m было просто выражением,
[13:31.000 --> 13:37.000]  а теперь оно будет не просто выражением, а именно функцией от x.
[13:37.000 --> 13:44.000]  Да, то есть тут... Да.
[13:50.000 --> 13:53.000]  Нет, ну как, это индуктивное определение.
[13:53.000 --> 13:59.000]  То есть вот это вот лямдо термо означает построен по этим же правилам.
[14:06.000 --> 14:11.000]  Не, ну это может быть сложное выражение, это не обязательно какое-то название.
[14:11.000 --> 14:14.000]  Ну, можно считать, что это формула,
[14:14.000 --> 14:18.000]  можно считать, что это формула, но она может быть сложной формулой.
[14:18.000 --> 14:22.000]  Значит, m понимается...
[14:32.000 --> 14:35.000]  Ну да, да, да, это вот...
[14:35.000 --> 14:39.000]  Ну а то, что здесь было, пока было просто x, y, это вот выражение x, y.
[14:39.000 --> 14:43.000]  А теперь мы понимаем не просто x, y, а как именно функции от x или от y.
[14:43.000 --> 14:46.000]  Или от того и другого.
[14:48.000 --> 14:53.000]  Вот. Значит, вот это вот три правила.
[14:53.000 --> 14:58.000]  Ну и как всегда бывает в индуктивных определениях,
[14:58.000 --> 15:04.000]  лямдо термами называются всё, что можно построить вот по этим правилам.
[15:04.000 --> 15:08.000]  Начиная с базы, применяя второе и третье правила,
[15:08.000 --> 15:12.000]  всё, что можно построить, это будет как раз лямдо термам.
[15:12.000 --> 15:14.000]  Да.
[15:17.000 --> 15:20.000]  Сейчас поговорим об этом.
[15:20.000 --> 15:24.000]  Даже то, что я вот здесь писал, это вообще всё не соответствует
[15:24.000 --> 15:28.000]  вот этим правилам в плане скобок.
[15:28.000 --> 15:34.000]  То есть там в каждом выражении минимум две пары скобок должно быть,
[15:34.000 --> 15:38.000]  а лямдо x, y тут вообще нету.
[15:38.000 --> 15:46.000]  Значит, вот по этому поводу есть соглашение о сокращениях.
[15:51.000 --> 15:59.000]  Значит, соглашение о пропуске скобок можно сказать.
[16:03.000 --> 16:07.000]  Соглашение о пропуске скобок.
[16:08.000 --> 16:14.000]  Так, первое.
[16:14.000 --> 16:21.000]  Значит, первое, что если у меня после точки что-то такое идёт,
[16:21.000 --> 16:26.000]  то тут вообще можно двумя способами скобки расставить.
[16:26.000 --> 16:30.000]  Это равняется...
[16:30.000 --> 16:33.000]  Так, давайте я все скобки расставлю.
[16:33.000 --> 16:37.000]  Нужно вот так вот ставить скобки, если их вообще не стоит.
[16:37.000 --> 16:43.000]  И это не равняется вот такой штуке.
[16:43.000 --> 16:49.000]  То есть если на самом деле нужно вот так вот, то тогда нужно явно скобки поставить.
[16:49.000 --> 16:55.000]  А по умолчанию, если скобок не стоит, то тогда вот так вот.
[16:55.000 --> 16:59.000]  Так, второе.
[16:59.000 --> 17:05.000]  Второе, если мы длинную контактинацию напишем.
[17:05.000 --> 17:11.000]  То есть что-нибудь типа MNPQ.
[17:11.000 --> 17:15.000]  В общем, по умолчанию мы это как бы читаем слева направо.
[17:15.000 --> 17:19.000]  И когда можно, то и применяем.
[17:19.000 --> 17:25.000]  А во всех остальных порядках нужно скобки ставить.
[17:25.000 --> 17:29.000]  Ну и третье.
[17:29.000 --> 17:33.000]  Третье, когда у нас много переменных.
[17:33.000 --> 17:37.000]  То есть, если мы делаем скобки,
[17:37.000 --> 17:41.000]  то у нас много переменных.
[17:41.000 --> 17:45.000]  Ну и третье, когда мы делаем скобки,
[17:45.000 --> 17:51.000]  Третье, когда у нас много переменных.
[17:51.000 --> 17:59.000]  Ну а тут нужно писать, например, лямбда x, y, z, точка M.
[17:59.000 --> 18:03.000]  Так, значит это будет...
[18:03.000 --> 18:07.000]  Сейчас, нет.
[18:07.000 --> 18:15.000]  Лямбда x, точка лямбда y, точка лямбда z, точка M.
[18:15.000 --> 18:27.000]  Вот. И это тоже стандартное отождествление.
[18:27.000 --> 18:33.000]  Значит, что функция от N...
[18:33.000 --> 18:37.000]  Так, нет, лучше не такой.
[18:37.000 --> 18:43.000]  Функция от N переменных, значит, это тоже,
[18:43.000 --> 18:55.000]  что функция, сопоставляющая первой переменной
[18:55.000 --> 19:05.000]  функцию от остальных N-1 переменных.
[19:13.000 --> 19:17.000]  Но это, в общем, тоже стандартное...
[19:17.000 --> 19:21.000]  Ну, одно из стандартов понимания того, что такое функция Нинских переменных.
[19:21.000 --> 19:25.000]  Можно считать, что мы, как бы, сначала делаем дикартовое произведение,
[19:25.000 --> 19:29.000]  и потом в каждой ячейке определяем значение функции.
[19:29.000 --> 19:33.000]  А можно сказать, что, например, о двух переменах,
[19:33.000 --> 19:41.000]  что мы каждому значению ординаты, наоборот, каждому значению авсцисы
[19:41.000 --> 19:45.000]  сопоставляем функцию от значения ординаты.
[19:45.000 --> 19:49.000]  И когда мы все эти функции сложим, то получится функция о двух переменах.
[19:49.000 --> 19:53.000]  Несложно, а скорее склеим.
[19:53.000 --> 20:15.000]  Ну, теперь можно там какие-нибудь несложные примеры,
[20:15.000 --> 20:25.000]  примеры каких-то таких лямбда-термов, но с некоторым значением.
[20:25.000 --> 20:43.000]  Так, примеры записей некоторых функций.
[20:43.000 --> 20:47.000]  Так, ну, например, лямбда х.а.
[20:47.000 --> 20:53.000]  Ну, это функция константа.
[20:53.000 --> 20:55.000]  Константа.
[20:55.000 --> 21:01.000]  Там лямбда х.х.
[21:01.000 --> 21:11.000]  Ну, это что называется, тождественная функция.
[21:11.000 --> 21:17.000]  Лямбда х.х.
[21:17.000 --> 21:27.000]  Но это можно сказать, что это удвоение.
[21:27.000 --> 21:33.000]  Но можно, пометуя о том, что когда мы два терма друг за другом записывали,
[21:33.000 --> 21:37.000]  то это как бы первый применяется к второму,
[21:37.000 --> 21:39.000]  а можно сказать, что это такая диагонализация.
[21:39.000 --> 21:43.000]  То есть это как раз мы функцию х применяем саму к себе.
[21:43.000 --> 21:49.000]  Можно сказать, что это удвоение, а можно сказать, что это применение функции,
[21:49.000 --> 22:09.000]  та самая аппликация, применение функции к самой себе.
[22:09.000 --> 22:15.000]  Ну, можно писать, например, лямбда х.у.x.
[22:15.000 --> 22:17.000]  Ну, можно это назвать транспозицией.
[22:17.000 --> 22:31.000]  Ну а что, берем и меняем местами х и у.
[22:31.000 --> 22:37.000]  Ну, наверное, пока хватит.
[22:37.000 --> 22:41.000]  Ну, опять же, транспозиция получается в синтаксическом смысле.
[22:41.000 --> 22:43.000]  Это соответственно удвоение вот здесь.
[22:43.000 --> 22:49.000]  Ну а в симпатическом получается, что мы как бы применяем наоборот.
[22:49.000 --> 22:55.000]  То есть меняем аргументы функцию местами.
[22:55.000 --> 23:05.000]  То есть перемена местами аргумента и функции.
[23:15.000 --> 23:17.000]  Так, хорошо.
[23:17.000 --> 23:21.000]  Значит, пока, наверное, хватит.
[23:21.000 --> 23:25.000]  Значит, перейдем дальше по синтаксису.
[23:25.000 --> 23:29.000]  Что еще можно делать?
[23:29.000 --> 23:41.000]  А, сейчас, надо еще сказать, что тут все переменные делятся, как обычно,
[23:41.000 --> 23:47.000]  на свободные и связанные ноль, точнее, вхождение их.
[23:47.000 --> 24:05.000]  Значит, все переменные терма, точнее, вхождение переменных.
[24:05.000 --> 24:15.000]  Делятся на связанные и свободные.
[24:15.000 --> 24:28.000]  Ну, соответственно, если...
[24:28.000 --> 24:31.000]  Вообще, у каждого лямбе квантера есть область действия.
[24:31.000 --> 24:35.000]  И если у каждого лямбе квантера с SamePath и SamePath,
[24:35.000 --> 24:37.000]  то у каждого лямбе квантера есть guardingя,
[24:37.000 --> 24:40.000]  то у каждого лямбе квантера есть гибель,
[24:40.000 --> 24:43.000]  то есть гибель, в котором он находится.
[24:43.000 --> 24:50.320]  есть область действия, и если переменная попадает в эту область,
[24:50.320 --> 24:56.760]  то тогда она будет связана, а если не попадает, то свободна.
[25:03.440 --> 25:10.000]  То есть, например, если написать что-нибудь такое, лямбда xy.yx,
[25:10.000 --> 25:24.000]  а потом, например, xx, то тогда получается, что вот это вот вхождение в лямбду
[25:24.000 --> 25:35.000]  и попадающая подобность действия, это связанное, а те, которые тут просто остались, это свободное.
[25:35.000 --> 25:49.000]  Видно, что в этом моем примере есть такой эффект, который вообще не очень любят, хотя он и не запрещен.
[25:49.000 --> 25:55.000]  Эффект такой, что связанные свободные вхождения одной и той же переменной обозначены.
[25:55.000 --> 26:01.000]  Это может запутать, но это не противоречит правилам.
[26:01.000 --> 26:06.000]  Тут есть, например, назначенность разбора, даже с этими соглашениями осколковых есть
[26:06.000 --> 26:11.000]  эта назначенность разбора, можно это, в принципе, доказывать.
[26:11.000 --> 26:26.000]  Но, конечно, в такой записи повышается вероятность ошибки, что-нибудь куда-нибудь не туда переписать.
[26:26.000 --> 26:36.000]  Но, кстати, не только не только вероятность ошибки, а еще и некоторые действия невозможные.
[26:36.000 --> 26:43.000]  Поэтому есть понятие альфа-конверсия.
[26:43.000 --> 27:00.000]  Альфа-конверсия – это переименование связанной переменной.
[27:00.000 --> 27:29.000]  Например, лямбда xy.yx мы превращаем по альфа-конверсии, скажем, лямбда ty.ytt.
[27:29.000 --> 27:34.000]  Это корректные действия.
[27:34.000 --> 27:57.000]  А те невозможные, в общем случае, лямбда x.m может быть преобразована в лямбда y.m, в который y вместо x.
[27:57.000 --> 28:09.000]  Но при этом, как и в случае с исчислением первого порядка, здесь возможны некорректности, которые нужно запретить.
[28:09.000 --> 28:15.000]  То есть тут должна быть корректная замена.
[28:15.000 --> 28:19.000]  Ну а какие могут быть проблемы?
[28:19.000 --> 28:24.000]  Как и раньше, могут быть две проблемы.
[28:24.000 --> 28:37.000]  Либо у меня какая-то старая переменная подпала под новый квантор, либо новая переменная подпала под старый квантор.
[28:37.000 --> 28:44.000]  Давайте я покажу примеры.
[28:44.000 --> 28:56.000]  Примеры некорректной замены.
[28:56.000 --> 29:02.000]  Красным цветом, как не должно быть.
[29:02.000 --> 29:12.000]  Например, лямбда x.xy превратили в лямбда y.y.
[29:12.000 --> 29:16.000]  Давайте я перечеркну эту стрелку.
[29:16.000 --> 29:19.000]  Что здесь произошло?
[29:19.000 --> 29:31.000]  Здесь вот этот параметр y внезапно стал внутренней переменной, по которой стоит лямбда квантор.
[29:31.000 --> 29:34.000]  То есть тут и смысл изменился.
[29:34.000 --> 29:45.000]  Если раньше у меня было применение переменной x к параметру y, то теперь у меня получается, что переменная y сама к себе применяется.
[29:45.000 --> 29:48.000]  Это совершенно другой смысл.
[29:48.000 --> 30:07.000]  Тут что получилось? Получилось, что старая переменная подпала под новый квантор.
[30:07.000 --> 30:34.000]  Тут свободная переменная в m попала под замененный квантор.
[30:34.000 --> 30:36.000]  Но может быть наоборот.
[30:36.000 --> 30:44.000]  Может быть наоборот замененная переменная подпала под старый квантор.
[30:44.000 --> 30:49.000]  Давайте я тоже покажу пример.
[30:49.000 --> 31:05.000]  Например, лямбда x, а тут будет x и, например, лямбда y.xy.
[31:05.000 --> 31:11.000]  И тут я тоже x заменю на y.
[31:11.000 --> 31:23.000]  Получится лямбда y.y и тут лямбда y.y.
[31:23.000 --> 31:30.000]  Получилось, что раньше вот этот x был связан вот этим квантором.
[31:30.000 --> 31:38.000]  Помните, когда у меня скобок нет, тогда все, на что влияет x, до конца выражения идет.
[31:38.000 --> 31:48.000]  А здесь у меня получилось два раза лямбда по одной и той же переменной, и само в себе это еще не очень страшно.
[31:48.000 --> 31:53.000]  И даже то, что это вложено, не очень страшно.
[31:53.000 --> 32:01.000]  А страшно то, что вот в этом месте переменная подпала уже под действие другого квантора.
[32:01.000 --> 32:16.000]  Если раньше вот это было под действием вот этого квантора, то теперь она получилась под действием вот этого квантора.
[32:16.000 --> 32:41.000]  То есть теперь получается, что после замены переменная связана другим квантором.
[32:41.000 --> 32:49.000]  Вот два примера некорректной замены.
[32:49.000 --> 33:00.000]  Соответственно, не должно быть ни того, ни другого.
[33:00.000 --> 33:07.000]  Нет, сама по себе запись, как и справа, может тоже некрасивая, но она допустима.
[33:07.000 --> 33:12.000]  И она даже не осмысленна.
[33:12.000 --> 33:20.000]  Вот этот y это локальный пример внутри этой скобки, а вот этот y подчиняется вот этому квантору.
[33:20.000 --> 33:30.000]  То есть получается, что мы вот этот y применяем не просто кому-то параметру, а к результату диагонализации.
[33:30.000 --> 33:35.000]  Вот эта скобка фактически константа, а именно функция диагонализации.
[33:35.000 --> 33:40.000]  Или удвоение, как я писал.
[33:40.000 --> 33:48.000]  Так что сама в себе эта запись приемлемая, но проблема в том, что она не соответствует этой записи.
[33:48.000 --> 33:59.000]  Здесь у меня вместо удвоения просто другая функция применения y и x.
[33:59.000 --> 34:11.000]  И более того, никакому угодно x, а ровно к тому, который задан вот здесь.
[34:11.000 --> 34:26.000]  Хорошо, альфа-конверсия, альфа-конверсия, это вот такая замена.
[34:26.000 --> 34:31.000]  Так, ну вроде мы разобрались с этой штукой альфа-конверсия.
[34:31.000 --> 34:37.000]  Тут, конечно, может быть какой-то формальный индуктивное определение, но его давайте пропустим.
[34:37.000 --> 34:41.000]  На самом деле даже две лекции, это не очень много на лямбеисчлене.
[34:41.000 --> 34:47.000]  Сейчас давайте перерыв, а после перерыва будет самое важное, что есть лямбеисчлене, это редукция.
[34:47.000 --> 34:55.000]  Ну что ж, давайте продолжим.
[34:55.000 --> 35:07.000]  Второе преобразование, самое важное, это бета-редукция.
[35:07.000 --> 35:22.000]  Бета-редукция, это и есть суть аппликации, что если мы функцию с параметром x применяем к какому-то объекту,
[35:22.000 --> 35:27.000]  то это означает, что мы этот объект представляем вместо x в исходное выражение.
[35:27.000 --> 35:49.000]  То есть тут выглядит она так, лямб до x, m, n, это преобразуется в смысле бета к m от n вместо x.
[35:49.000 --> 35:57.000]  Что здесь написано? У нас есть какое-то выражение m, которое не просто так, а понимается как функция от x.
[35:57.000 --> 36:03.000]  И мы это выражение как функцию от x применяем к аргументу m.
[36:03.000 --> 36:10.000]  Но это означает, что мы в это выражение подставляем вместо все вхождения x значение m.
[36:10.000 --> 36:15.000]  Как всегда, должна быть корректная замена.
[36:15.000 --> 36:26.000]  А, кстати, я еще и здесь не сказал про эту корректную замену, что мы заменяем только те вхождения x,
[36:26.000 --> 36:33.000]  которые зависит именно от этого квантора, а то там в глубине могут быть какие-то еще кванторы по x.
[36:33.000 --> 36:37.000]  Это примерно как то, про что мы вот здесь говорили.
[36:37.000 --> 36:40.000]  Если мы теперь вот здесь еще раз будем...
[36:40.000 --> 36:48.000]  Да, это некорректный результат этой альфа-конверсии, но в принципе мы можем к этому выражению принять альфа-конверсию,
[36:48.000 --> 36:57.000]  и тогда только вот эти y будут заменяться, а вот эти вот нет.
[36:57.000 --> 37:05.000]  Или наоборот, я это тоже не сказал, но сейчас, наверное, после бета-редукции запишу,
[37:05.000 --> 37:13.000]  что и альфа-конверсию, и бета-редукцию можно применять не только всему терму в целом, но и какому-то его фрагменту.
[37:13.000 --> 37:21.000]  К любому фрагменту, который строится в ходе индуктивного построения, можно применить альфа-конверсию и бета-редукцию по тем же правилам.
[37:21.000 --> 37:29.000]  То есть, например, к этому выражению можно вот здесь вот заменить вот эти вот y.
[37:29.000 --> 37:33.000]  Можно вот эти вот y заменить.
[37:33.000 --> 37:39.000]  Так.
[37:39.000 --> 37:43.000]  Хорошо.
[37:43.000 --> 37:53.000]  Значит, ну тут опять же должна быть корректная замена.
[37:53.000 --> 37:57.000]  Значит, корректная замена.
[37:57.000 --> 38:07.000]  Ну, тут смотрите, что может быть, какие могут быть некорректности.
[38:07.000 --> 38:23.000]  Значит, может какой-нибудь квантор из N, не квантор, в смысле, а наоборот, свободный применный из N может попасть под действие какого-то квантора, который был в M.
[38:23.000 --> 38:27.000]  Вот. А другого, в принципе, вроде ничего не может быть.
[38:27.000 --> 38:33.000]  Так. Давайте я здесь напишу.
[38:33.000 --> 38:39.000]  Значит, пример некорректной редукции.
[38:39.000 --> 38:51.000]  Пример некорректной редукции.
[38:51.000 --> 38:59.000]  Ой, это не то.
[38:59.000 --> 39:05.000]  Так, пример некорректной редукции. Ну, например, может быть так.
[39:05.000 --> 39:17.000]  Значит, лямбда х точка х, а тут лямбда у точка ух.
[39:17.000 --> 39:21.000]  Значит, все это меняется к у.
[39:21.000 --> 39:31.000]  Значит, это не должно редуцироваться к там у, лямбда у точка уу.
[39:31.000 --> 39:45.000]  Да, потому что получилось, что раньше вот этот х не зависел от вот этого квантора, зависел от того, который вообще исчез, и теперь его вообще не должно быть.
[39:45.000 --> 39:53.000]  А оно у нас попал в зависимость вот этого.
[39:53.000 --> 40:05.000]  То есть, как получается, что вот это попало вот сюда, а было вот сюда.
[40:05.000 --> 40:09.000]  Так, ну и давайте слоистное описание.
[40:09.000 --> 40:29.000]  То есть, свободная переменная, свободная переменная из M попала под квантор из M.
[40:29.000 --> 40:33.000]  Ну, на самом деле, других никаких проблем не может быть.
[40:33.000 --> 40:37.000]  Потому что обратной ситуации быть не может.
[40:37.000 --> 40:43.000]  Значит, никакая свободная переменная из M не может подпасть под действие квантора из N.
[40:43.000 --> 40:47.000]  Ну, потому что все области действия кванторов из N, они в этом Н и остаются.
[40:47.000 --> 40:55.000]  И там никакие ранее бывшие переменные попасть туда не могут.
[40:55.000 --> 41:23.000]  Так, ну и соответственно и альфа-конверсия, и альфа-конверсия, и бета-редукция могут быть применены.
[41:23.000 --> 41:51.000]  Не только ко всему выражению, но и к какому-то фрагменту.
[41:51.000 --> 42:03.000]  Вот, в частности, правильное действие вот с таким вот будет, смотрите какое.
[42:03.000 --> 42:13.000]  Значит, правильное действие, что если вот нам нужно упростить это выражение,
[42:13.000 --> 42:25.000]  то нужно сначала применить альфа-конверсию и вот этот вот Y переименовать.
[42:25.000 --> 42:37.000]  Значит, лямбда X.X, а тут будет лямбда T.TXY.
[42:37.000 --> 42:47.000]  И вот после этого уже можно применить бета-редукцию, и получится Y лямбда T.TY.
[42:47.000 --> 42:58.000]  И теперь уже никакого конфликта нет, как был вот этот X зависелен только от внешнего квантора, который исчез при бета-редукции,
[42:58.000 --> 43:06.000]  так вот этот вот Y и остался свободной переменной.
[43:06.000 --> 43:30.000]  Вот так.
[43:30.000 --> 43:40.000]  Значит, что же дальше?
[43:40.000 --> 43:50.000]  Дальше можно определить понятие нормальной формы, точнее термо-нормальной форме.
[43:50.000 --> 43:53.000]  Да, логики вообще любят нормальные формы.
[43:53.000 --> 44:00.000]  У нас уже были конъюнтивно-дезюнтивные нормальные формы, придворённые нормальная форма.
[44:00.000 --> 44:06.000]  Ещё бывает нормальная форма хомского, но это вы, наверное, не знаете пока.
[44:06.000 --> 44:10.000]  Это в терреформальных языках контекста свободных.
[44:10.000 --> 44:19.000]  Ну и в лямбда-учлене тоже есть нормальная форма, но она без эпитета, просто нормальная форма.
[44:19.000 --> 44:48.000]  Так, значит, терм находится в нормальной форме, если к нему нельзя применить бета-редукцию.
[44:48.000 --> 45:07.000]  Даже после нескольких альф-конверсий.
[45:07.000 --> 45:31.000]  В общем, даже после нескольких альф-конверсий.
[45:31.000 --> 45:59.000]  В частности, смотрите, в этом примере к первому терму нельзя было применить бета-редукцию.
[45:59.000 --> 46:04.000]  Но он ещё не в нормальной форме, потому что к нему можно применить альф-конверсию.
[46:04.000 --> 46:08.000]  Причём он здесь вот как бы в подформуле.
[46:08.000 --> 46:12.000]  А после применения альф-конверсии можно применить бета-редукцию.
[46:12.000 --> 46:18.000]  Но к тому, что получилось в конце, уже нельзя применить бета-редукцию даже после каких-то замен.
[46:18.000 --> 46:26.000]  И поэтому вот это тоже в конце, это уже нормальная форма.
[46:26.000 --> 46:45.000]  Так, хорошо, значит, теперь возникает понятие равенства лямбдо-термов.
[46:45.000 --> 46:50.000]  Равенство лямбдо-термов.
[46:50.000 --> 46:56.000]  Но это, так говоря, научно.
[46:56.000 --> 47:00.000]  И это симметричное транзитивное замыкание.
[47:00.000 --> 47:05.000]  Ну, как бы альф-конверсии и бета-редукция.
[47:05.000 --> 47:26.000]  То есть это симметричное транзитивное замыкание альф-конверсии и бета-редукции.
[47:26.000 --> 47:31.000]  Значит, при этом альф-конверсия вообще-то и так симметрична.
[47:31.000 --> 47:33.000]  Это там можно формально доказать.
[47:33.000 --> 47:37.000]  Но вообще более-менее понятно, что если мы смогли в одну сторону переименовать корректно,
[47:37.000 --> 47:43.000]  то в другую сторону тоже сможем, что там никаких новых проблем не возникнет
[47:43.000 --> 47:47.000]  при обратном переименовании.
[47:47.000 --> 48:01.000]  То есть вот это вот альф-конверсии и так симметрична.
[48:01.000 --> 48:06.000]  Ну или иными словами, если раскрывать определение.
[48:06.000 --> 48:12.000]  То есть симметричная означает, что бета-редукция, конечно, не симметрична,
[48:12.000 --> 48:17.000]  но это означает, что мы как бы можем ее и в ту, и в другую сторону применять.
[48:17.000 --> 48:23.000]  Ну а транзитивно означает, что мы можем выстраивать цепочки.
[48:23.000 --> 48:40.000]  То есть можно сказать, что m равно m,
[48:40.000 --> 48:55.000]  если существует цепочка, значит, m0 равно m, там m1, m2 и так далее.
[48:55.000 --> 48:59.000]  Какое-то mkT равно n.
[48:59.000 --> 49:09.000]  Такая, что для любого их, значит, mIT альф-конверсии преобразуется в mIT плюс первое,
[49:09.000 --> 49:20.000]  значит, преобразуется бета-редукция в mIT плюс первое или, наоборот,
[49:20.000 --> 49:30.000]  и плюс первое преобразуется в mIT.
[49:30.000 --> 49:36.000]  Соответственно, симметричность означает, что мы бета-редукцию и в ту, и в другую сторону применяем,
[49:36.000 --> 49:39.000]  а альф у нас и так и в ту, и в другую сторону.
[49:39.000 --> 49:45.000]  А транзитивно означает, что мы вот такую цепочку устраиваем.
[49:45.000 --> 49:53.000]  Вот. Значит, это понятие равенства лямбдо-термов.
[49:58.000 --> 50:04.000]  Так, понятно ли определение?
[50:05.000 --> 50:11.000]  Так, а тут еще нужно такой пример привести.
[50:11.000 --> 50:15.000]  Ну, точнее, как бы такой вопрос.
[50:15.000 --> 50:24.000]  Да, вопрос. Всегда ли у лямбдо-терма есть равный му-терм в нормальной форме?
[50:24.000 --> 50:48.000]  Всегда ли у лямбдо-терма есть равный му-терм в нормальной форме?
[50:48.000 --> 50:56.000]  Оказывается, что нет. Нет, не всегда.
[50:56.000 --> 51:02.000]  Потому что, смотрите, рассмотрим омего.
[51:02.000 --> 51:12.000]  Омего большое, стандартное обозначение именно для этого.
[51:12.000 --> 51:19.000]  Вот, это как бы такой удвоитель, примененный сам к себе.
[51:19.000 --> 51:27.000]  Но вот этот удвоитель, примененный сам к себе, он самого себя удвоит, и получится снова удвоитель, примененный сам к себе.
[51:27.000 --> 51:36.000]  То есть вот этот омего бета-редуцируется только сам к себе.
[51:36.000 --> 51:44.000]  Омего бета-редуцируется к омеге, и поэтому к нему всегда можно применить бета-редукцию.
[51:44.000 --> 51:51.000]  Потому что он от этого не имеется. Он как эта самая экспонента при дифференцировании.
[51:51.000 --> 52:17.000]  Ну хорошо, а когда есть?
[52:17.000 --> 52:32.000]  Да, будет ли она единственной, если есть?
[52:32.000 --> 52:49.000]  Значит, а будет ли нормальная форма единственной, если есть?
[52:49.000 --> 53:08.000]  Ну ответ да, но с точностью до переименования переменных.
[53:08.000 --> 53:17.000]  Ну то есть до альфа-конверсии. Ну действительно, если там какие-то лямда остались, то тогда можно альфа-конверсию применять.
[53:17.000 --> 53:28.000]  И это все будет... и бета-редукцию нельзя будет применить, потому что по определению даже после альфа-конверсии бета-редукции нельзя применить.
[53:28.000 --> 53:36.000]  Но ничего другого на самом деле не может быть. Но это сложная теорема, я ее целиком не буду доказывать.
[53:36.000 --> 53:42.000]  Сейчас докажу с опорой на некоторых утверждений без доказательства.
[53:42.000 --> 53:54.000]  Вот, да, при этом может быть так, что в одном порядке бета-редукция приводит к нормальной форме, а в другом порядке будет бесконечная цепочка.
[53:54.000 --> 54:17.000]  При этом может быть так, что бета-редукция в одном порядке
[54:17.000 --> 54:40.000]  приводит к нормальной форме, а в другом будет бесконечная цепочка.
[54:40.000 --> 54:47.000]  Ну, например, может быть какой-нибудь тривиальный пример.
[54:47.000 --> 54:56.000]  Тривиальный пример. Вот такой вот лямда х.а, примененный комега.
[54:56.000 --> 55:04.000]  Значит, с одной стороны, можно с него сразу ва перейти. То есть константу вообще, если не важно, чем применять, будет эта константа.
[55:04.000 --> 55:10.000]  Значит, с одной стороны, это просто ва и а. Это, конечно, нормальная форма.
[55:10.000 --> 55:23.000]  Но с другой стороны, можно его сам к себе свести. Значит, это если мы будем бета-редуцировать внутри омега.
[55:23.000 --> 55:34.000]  Вот. Вот этот эффект показывает пользу от того, что называется lazy evaluation.
[55:34.000 --> 55:40.000]  Значит, это вообще такая концепция в программировании, а точнее даже в компиляции.
[55:40.000 --> 55:47.000]  Лazy evaluation означает, что мы значение переменной вычисляем только тогда, когда оно реально нужно.
[55:47.000 --> 55:52.000]  Вот. И это с одной стороны, это ускоряет процесс, а с другой стороны, это маскирует ошибки.
[55:52.000 --> 56:01.000]  Может быть, что как раз там в вычислении скрыта ошибка, а вы ее не заметите из-за того, что это вычисление не запускается.
[56:01.000 --> 56:08.000]  А потом в ответственный момент запустится и будет ошибка.
[56:08.000 --> 56:13.000]  Соответственно получается, что такое зацикливание можно считать ошибкой.
[56:13.000 --> 56:21.000]  И, соответственно, когда мы просто выручаем а, то значит, мы не вычисляем, к чему именно мы применяем, а просто берем константу.
[56:21.000 --> 56:28.000]  А если мы начнем вычислять, то там-то мы и зациклимся, и, соответственно, ничего не закончится.
[56:28.000 --> 56:34.000]  Вот. Но тирем говорит так, что если мы все-таки не зациклились, то будет то же самое.
[56:35.000 --> 56:42.000]  Что, в принципе, никто нам не мешает, скажем, десять раз делать вот здесь, а потом все-таки привести вот это вот в это редукция.
[56:42.000 --> 56:52.000]  Вот. Ну ладно, так вот.
[56:52.000 --> 56:57.000]  Сейчас, формулирую теорему. Сначала обозначение.
[56:57.000 --> 57:03.000]  Так, давайте вот так вот обозначу. Как бы такая двойная стрелочка.
[57:03.000 --> 57:09.000]  Значит, m двойная стрелка n.
[57:09.000 --> 57:16.000]  Но это если есть цепочка альфа-конверсии бета-редукции, которая приводит из m в n.
[57:16.000 --> 57:39.000]  Если можно прийти из m в n цепочкой альфа-конверсии и бета-редукции.
[57:39.000 --> 57:44.000]  Вот.
[57:44.000 --> 57:59.000]  Так, значит, тогда теорема Чорчеросера это такая теорема о замыкании ромба.
[57:59.000 --> 58:15.000]  Так, значит, теорема Чорчеросера без доказательства.
[58:15.000 --> 58:25.000]  Так, значит, теорема Чорчеросера заключается в следующем.
[58:25.000 --> 58:39.000]  Пусть из m можно прийти в n и из m можно прийти в p.
[58:39.000 --> 58:59.000]  Значит, тогда существует q такое, что из n можно прийти в q и из p можно прийти в q.
[58:59.000 --> 59:03.000]  Вот. То есть это действительно такое замыкание ромба.
[59:03.000 --> 59:08.000]  Значит, вот есть m.
[59:08.000 --> 59:12.000]  Значит, из него можно прийти в n.
[59:12.000 --> 59:16.000]  Также из него можно прийти в p.
[59:16.000 --> 59:18.000]  И это уже дано.
[59:18.000 --> 59:23.000]  Тогда утверждается, что это как бы разошедшееся дерево.
[59:23.000 --> 59:28.000]  Но, грубо говоря, интуиция здесь такая, что мы какие-то одни преобразования делаем вот по этой линии,
[59:28.000 --> 59:31.000]  а какие-то другие делаем вот по этой линии.
[59:31.000 --> 59:35.000]  И те, которые мы делаем по другой линии, все равно можно еще провести вот в этой линии.
[59:35.000 --> 59:39.000]  И наоборот.
[59:39.000 --> 59:44.000]  Вот. И тогда, когда мы проведем эти преобразования,
[59:44.000 --> 59:51.000]  то это что-то типа вне зависимости от порядка.
[59:51.000 --> 59:56.000]  А при образовании, проведенной вот здесь, мы приведем вот тут, то мы приведем к одному и тому же.
[59:56.000 --> 01:00:03.000]  Это, конечно, такая интуиция, реально там более сложное рассуждение, но идея именно такая.
[01:00:03.000 --> 01:00:10.000]  Вот. Тогда отсюда следствие, что на самом деле можно попроще.
[01:00:10.000 --> 01:00:36.000]  Значит, следствие такое, смотрите, что m равно n, тогда и только тогда, когда существует q, такое, что из m можно прийти q и из n можно прийти q.
[01:00:41.000 --> 01:00:45.000]  Вот. Как это следствие доказывается.
[01:00:45.000 --> 01:00:52.000]  Ну, смотрите, у нас же там была длинная цепочка, там были стрелки в одну и другую сторону.
[01:00:52.000 --> 01:01:00.000]  Но можно все подряд параллельный стрелок как бы склеить, и тогда будет получаться...
[01:01:00.000 --> 01:01:07.000]  Так, давайте я для ускорения буду стрелки как бы одиночно рисовать.
[01:01:13.000 --> 01:01:20.000]  Вот m, вот m. Что такая цепочка получается по определению.
[01:01:20.000 --> 01:01:24.000]  Вот это черное, это по определению.
[01:01:24.000 --> 01:01:29.000]  Ну а дальше мы можем начать это как бы...
[01:01:37.000 --> 01:01:46.000]  Сначала вот здесь ромб применить, потом вот тут вот применить ромб, и так далее.
[01:01:46.000 --> 01:01:56.000]  И в итоге вот эта вот часть по теореме Чорчеруссера.
[01:01:56.000 --> 01:02:06.000]  Ну и в итоге вот получится, и это как раз наша q получится, что и из m получится цепочка, и из n получится цепочка.
[01:02:17.000 --> 01:02:21.000]  Вот.
[01:02:21.000 --> 01:02:31.000]  Вот, это уже некоторый результат, что вот такое более простое определение равенства.
[01:02:31.000 --> 01:02:35.000]  Что еще раз?
[01:02:37.000 --> 01:02:41.000]  А, нет, так в обратном случае это частный случай.
[01:02:41.000 --> 01:02:47.000]  Да, то есть справа налево, это просто то, что здесь написано, это подходит под определение.
[01:02:47.000 --> 01:02:53.000]  Просто общий случай, когда много вот таких вот зигзагов, а частный случай, когда одна галочка.
[01:03:00.000 --> 01:03:07.000]  Не, ну правильно, вот это вот такой случай, когда у нас сначала все стрелочки в одну сторону, потом все стрелочки в другую сторону.
[01:03:07.000 --> 01:03:11.000]  А в общем определение у нас стрелочка как угодно стоит.
[01:03:13.000 --> 01:03:17.000]  Сейчас, что-то я не понимаю, о чем вопрос.
[01:03:21.000 --> 01:03:25.000]  Сейчас, смотри, давайте вернемся тогда.
[01:03:27.000 --> 01:03:31.000]  Так, вот здесь равенство, да.
[01:03:31.000 --> 01:03:37.000]  Вот, видите, что тут есть длинная цепочка, где в каждой паре либо альфа-конверсия,
[01:03:37.000 --> 01:03:44.000]  которая может быть и в ту, и в другую сторону, либо это редукция в одну сторону, либо это редукция в другую сторону.
[01:03:44.000 --> 01:03:50.000]  Дальше мы их можем склеить подряд дующие стрелки в одну сторону,
[01:03:50.000 --> 01:03:58.000]  и как бы заменить вот эти вот однократные редукции на как бы такие цепочки редукций,
[01:03:58.000 --> 01:04:02.000]  но все равно они все будут то в одну, то в другую сторону.
[01:04:02.000 --> 01:04:10.000]  А, соответственно, вот это вот следствие говорит о том, что можно считать, что сначала они все в одну сторону из m в q,
[01:04:10.000 --> 01:04:14.000]  а потом все в другую сторону из q в m.
[01:04:16.000 --> 01:04:22.000]  Так, ну вот, значит, теперь теорема о единственности нормальной формы.
[01:04:23.000 --> 01:04:32.000]  Так, значит, теорема о единственности нормальной формы.
[01:04:35.000 --> 01:04:37.000]  Значит, теорема будет такой.
[01:04:40.000 --> 01:04:49.000]  Значит, пусть из m можно прийти в p, из m можно прийти в q,
[01:04:49.000 --> 01:05:01.000]  и, соответственно, и p, и q в нормальной форме.
[01:05:06.000 --> 01:05:09.000]  Ну, тогда из p, и q можно прийти альфа-конверсиями.
[01:05:09.000 --> 01:05:27.000]  Тогда можно прийти из p в q альфа-конверсиями.
[01:05:27.000 --> 01:05:43.000]  Вот. Ну, тоже это из теоремы Чорча-Россера довольно легко следует.
[01:05:43.000 --> 01:05:57.000]  Да, значит, вот есть m, значит, вот оно пришло в p, вот оно пришло в q.
[01:05:57.000 --> 01:06:11.000]  Ну, теперь, смотрите, с одной стороны получается, что им нужно прийти, значит, еще в какое-то одно и то же r.
[01:06:14.000 --> 01:06:19.000]  Вот. А, давайте я продолжу.
[01:06:19.000 --> 01:06:41.000]  Значит, поскольку p нормальная форма, то в цепочке из p в r только альфа-конверсия.
[01:06:41.000 --> 01:06:49.000]  В цепочке из q в r аналогично.
[01:06:58.000 --> 01:07:06.000]  Вот. Но тогда, поскольку альфа-конверсия обратимая, то можно сразу прийти из p сначала в r, потом в q.
[01:07:06.000 --> 01:07:26.000]  Значит, так как альфа-конверсия обратима, то получаем, что из p можно сначала прийти в r, а потом прийти в q.
[01:07:26.000 --> 01:07:30.000]  Ну, вот это и есть то, что нам нужно.
[01:07:30.000 --> 01:07:58.000]  Ну, более-менее на этом заканчивается синтактическая часть.
[01:07:58.000 --> 01:08:06.000]  Если у меня есть какие-нибудь вопросы, то у меня 5 минут еще есть, я бы чуть-чуть поговорил про номералы.
[01:08:06.000 --> 01:08:14.000]  Нужно ли что-нибудь пояснить? Да, очень хорошо.
[01:08:14.000 --> 01:08:25.000]  Так. Ну, а значит, про номералы в основном мы будем в следующий раз говорить, но сейчас я, может быть, все-таки успею о чем-нибудь сказать.
[01:08:25.000 --> 01:08:35.000]  Так. Значит, вообще и бывают разные номералы. Я буду говорить про номералы Чорча.
[01:08:35.000 --> 01:08:43.000]  Так. Нумералы Чорча. Чтяк они выглядят.
[01:08:43.000 --> 01:08:49.000]  Так. Значит, сами номералы я буду писать как циферки с подчеркиванием.
[01:08:49.000 --> 01:08:57.000]  Значит, номерал 0. Нумерал 0 это будет лямбда fx.x.
[01:08:57.000 --> 01:09:05.000]  Так. Значит, номерал 1. Это лямбда fx.fx.
[01:09:05.000 --> 01:09:13.000]  Нумерал 2. Это лямбда fx.fx.
[01:09:13.000 --> 01:09:23.000]  Нумерал 3. Это лямбда fx.fx.
[01:09:23.000 --> 01:09:33.000]  Вот. Ну и вообще, значит, номерал n. Это лямбда fx.fx.
[01:09:33.000 --> 01:09:43.000]  Вот fx. Значит, где всего вот это вот f будет n раз.
[01:09:43.000 --> 01:09:52.000]  Вот. То есть можно сказать, что номерал n переводит функцию f в ее n-ную итерацию.
[01:09:52.000 --> 01:10:02.000]  Нумерал n переводит f в... Ну fn я напишу.
[01:10:02.000 --> 01:10:06.000]  Но не степень, а итерацию.
[01:10:08.000 --> 01:10:12.000]  N-ную итерацию.
[01:10:12.000 --> 01:10:18.000]  Вот. Да, поэтому, значит, число это такое преподавание одной функции к другой функции.
[01:10:18.000 --> 01:10:28.000]  Вот. Почему здесь лямбда fx? Ну потому что, смотрите, когда мы f подставим, то останется лямбда x.
[01:10:28.000 --> 01:10:36.000]  Ну и лямбда x будет как раз функцией от x.
[01:10:36.000 --> 01:10:43.000]  Так. А теперь, смотрите, если мы вот такие преобразования договорились считать номералами,
[01:10:43.000 --> 01:10:50.000]  то дальше возможны уже разные действия над номералами.
[01:10:50.000 --> 01:10:56.000]  Так. Тут еще есть такое слово комбинатор, которое я там один раз вскользь сказал.
[01:10:56.000 --> 01:11:01.000]  Значит, на самом деле комбинатор это просто замкнутый лямбда терм.
[01:11:01.000 --> 01:11:08.000]  Значит, комбинатор это замкнутый лямбда терм.
[01:11:08.000 --> 01:11:14.000]  Вот. Ну и говорят, что, скажем, g большое...
[01:11:14.000 --> 01:11:24.000]  g большое это комбинатор функции g малая,
[01:11:24.000 --> 01:11:31.000]  которая берет ка-аргументов, возвращая значения.
[01:11:31.000 --> 01:11:38.000]  Значит, комбинатор не функция, а там для функции или вычисляющая функция.
[01:11:38.000 --> 01:11:46.000]  Комбинатор для функции g.
[01:11:46.000 --> 01:11:51.000]  Значит, если, верно, следующее.
[01:11:51.000 --> 01:12:00.000]  Если для любых n1 и так далее, nk, g.
[01:12:00.000 --> 01:12:05.000]  А потом подряд идут номералы n1, n2 и так далее, nk.
[01:12:05.000 --> 01:12:10.000]  Я здесь скобок не ставлю, но это значит, что они стоят по умолчанию.
[01:12:10.000 --> 01:12:13.000]  То есть, вычисляется слева направо.
[01:12:13.000 --> 01:12:18.000]  Если вот это вот равно, и вот здесь это равно в смысле равенства лямбда термов,
[01:12:18.000 --> 01:12:28.000]  и тут будет g от n1 и так далее, nk, и как бы это все подчеркнутое.
[01:12:28.000 --> 01:12:37.000]  То есть, если вот это комбинатор g на номералах действует точно так же, как функция g на числах.
[01:12:37.000 --> 01:12:44.000]  Значит, вот это вот равенство в смысле нашего определения.
[01:12:44.000 --> 01:12:55.000]  В смысле равенства лямбда термов.
[01:12:55.000 --> 01:12:59.000]  Так, давайте я один пример успею показать за минутку.
[01:12:59.000 --> 01:13:01.000]  Пример это инкрементация.
[01:13:01.000 --> 01:13:05.000]  Значит, инкрементация, то есть, прибавление единицы.
[01:13:05.000 --> 01:13:09.000]  Значит, инкрементация, это будет вот такая вещь.
[01:13:09.000 --> 01:13:17.000]  Лямбда fx точка, ой, нет, подождите.
[01:13:17.000 --> 01:13:26.000]  Лямбда nfx точка f от nfx.
[01:13:26.000 --> 01:13:30.000]  Ну, тогда действительно, если мы применим,
[01:13:30.000 --> 01:13:38.000]  значит, напишем инкрементация n, эта вся штука, примененная к n,
[01:13:38.000 --> 01:13:44.000]  это означает, что мы просто вот эту лямбду убираем по n, а сюда подставляем номерал.
[01:13:44.000 --> 01:13:51.000]  В смысле эта редукция, это будет лямбда fx точка f от nfx.
[01:13:51.000 --> 01:13:54.000]  А теперь по определению, что это означает.
[01:13:54.000 --> 01:14:02.000]  Это означает лямбда fx точка f.
[01:14:02.000 --> 01:14:06.000]  Так, значит, а здесь будет...
[01:14:06.000 --> 01:14:10.000]  Так, давайте я уже с бета, как бы, с переименованными напишу.
[01:14:10.000 --> 01:14:15.000]  Значит, лямбда gy точка g, вот g, и так далее.
[01:14:15.000 --> 01:14:22.000]  Вот gy, тут всех всего m.
[01:14:22.000 --> 01:14:28.000]  Так, и тут еще fx.
[01:14:28.000 --> 01:14:33.000]  Так, вот так вот, fx.
[01:14:33.000 --> 01:14:37.000]  Ну, тогда, смотри, тут вот лямбда gy, а тут fx.
[01:14:37.000 --> 01:14:41.000]  То есть снова эти же y на fx обратно заменяются.
[01:14:41.000 --> 01:14:46.000]  Получается, что тут лямбда fx, вот это вот f остается,
[01:14:46.000 --> 01:14:58.000]  а потом будет f от f от, и так далее, fx.
[01:14:58.000 --> 01:15:01.000]  Вот, и как бы вот этих вот будет m.
[01:15:01.000 --> 01:15:05.000]  Ну а вместе с этим будет еще plus 1.
[01:15:05.000 --> 01:15:12.000]  То есть всего получается как раз номерал n плюс 1.
[01:15:12.000 --> 01:15:17.000]  Вот, хорошо, значит, вот это самый простой пример.
[01:15:17.000 --> 01:15:24.000]  План на следующий раз научиться все остальные функции делать.
[01:15:24.000 --> 01:15:28.000]  Ну, на самом деле все остальные архиметические функции,
[01:15:28.000 --> 01:15:34.000]  почти так же легко сделать сложение и умножение, ну и возведение в степень.
[01:15:34.000 --> 01:15:40.000]  А вот для отрицания, особенно деления, нужны некреухищрения.
[01:15:40.000 --> 01:15:45.000]  На следующий раз мы быстренько поймем, как делать сложение и умножение,
[01:15:45.000 --> 01:15:50.000]  а потом, надеюсь, что успеем вычитание и деление,
[01:15:50.000 --> 01:15:55.000]  и на этом наш курс закончится.
[01:15:55.000 --> 01:15:59.000]  Вот, все, на сегодня все, спасибо.
