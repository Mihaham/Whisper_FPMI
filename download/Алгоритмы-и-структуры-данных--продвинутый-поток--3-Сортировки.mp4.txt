[00:00.000 --> 00:11.240]  Вот именно таким образом концепция блокирующих потоков и частости алгоритм Диница помогает нам
[00:11.240 --> 00:16.600]  писать алгоритм хопков такарпоза, екорния и зве, а теремодулика позволяет вам даже находить
[00:16.600 --> 00:22.880]  почти правильный ответ. Вот таким образом могла бы закончиться лекция, если бы мы с вами были на
[00:22.880 --> 00:27.720]  втором курсе. В общем-то в среду примерно то же самое было. Кстати, честно, очень удивлен,
[00:27.720 --> 00:35.840]  со среды тут ничего не поменялось. Но мы с вами пока не на втором курсе, или более точное утверждение
[00:35.840 --> 00:40.200]  пока не дошли до потоков. У нас в общем-то был прецедент, когда мы до потоков дошли в конце
[00:40.200 --> 00:45.480]  первого курса, но этим мы пока заниматься не будем. Впрочем, на самом деле, терему можно оставить
[00:45.480 --> 00:52.000]  как интересную задачу, которую вы на самом деле можете сами придумать. В общем-то не сильно
[00:52.000 --> 00:57.560]  сложно, но тем более, что основное решение тут так на уровне картинок уже спалено на самом деле.
[00:57.560 --> 01:05.480]  В общем, ничего сильно сложного там нет. Ну а мы сегодня будем говорить о, ну тут тоже спалено,
[01:05.480 --> 01:16.040]  о чем. Вот в общем-то. Пока еще стираюсь, скажем так, да, как вы помните у вас сегодня дедлайн по
[01:16.040 --> 01:23.920]  такому первому небольшому заданию. Да, так что сразу готовьтесь, будет второе. Ну объем примерно
[01:23.920 --> 01:32.840]  такой же. Да, объем примерно такой же, но сроки примерно такие же. Нет, это тоже будет задание по
[01:32.840 --> 01:41.240]  математике. Нет, это будет очень важно, потому что там будет пара-тройка, там в том числе будет
[01:41.240 --> 01:47.120]  еще пара-тройка задач по амортизационному анализу. Он нам потребуется, потому что вот мы сейчас
[01:47.120 --> 01:52.840]  обсудим сортировки, а потом будем обсуждать всякие кучи. А в этих кучах, особенно вот,
[01:52.840 --> 02:02.040]  начиная просто даже с косой кучи, а амортизационный анализ нам, ой, как понадобится. Поэтому
[02:02.040 --> 02:08.320]  мне уже и так начинает быть соблазна. А может вам дедлай их на неделю дать? Ну там, если всего три
[02:08.320 --> 02:17.360]  задачи там, например, может быть. Впрочем, посмотрим. Не будем загадывать. И так, значит,
[02:17.360 --> 02:24.640]  сортировочки. Ну, частично мы уже начали говорить о сортировочках. Да, так, ну да, честно скажем,
[02:24.640 --> 02:31.000]  да, как вы уже поняли, презентация всегда с тех времен, когда у нас порядок был чуть-чуть
[02:31.000 --> 02:38.960]  не такой. Ну вот, но не думаю, что вас это сильно смутит. Вот, но отсюда же и берется,
[02:38.960 --> 02:43.320]  вот там, собственно, определение симптотик. В общем, не будем тут останавливаться. В общем,
[02:43.320 --> 02:51.560]  мы тут уже ходили. Вот, но, собственно, пришло время узнать, а что же такое сортировка? Действительно,
[02:51.560 --> 02:56.240]  постановка задачи. Ну, тут, на самом деле, постановки задачи нужно быть очень внимательными,
[02:56.240 --> 03:02.360]  в зависимости от этого мы будем там решать задачу за самые разные симптотики, в чем выяснится,
[03:02.360 --> 03:07.880]  что они могут появляться принципиально разными. То есть, такая самая абстрактная, одновременно
[03:07.880 --> 03:15.600]  самая жесткая такая. То есть, дано N камней. Вот у нас, мы их вот так называем. Вот, и у нас
[03:15.600 --> 03:21.400]  есть чашечные весы. Более того, мы не можем там взвесить камни в том плане, что не можем сказать,
[03:21.400 --> 03:28.720]  что этот камень весит 5 храма, а этот 7. Все, что мы можем, то есть, все, что мы можем, это положить
[03:28.720 --> 03:37.320]  камни, допустим, на чашечные весы, и они нам скажут, что вот этот камень тяжелее. Еще более того,
[03:37.320 --> 03:42.680]  это все, что они нам скажут. То есть, мы там не будем понимать, что это тяжелее прям вот сильно,
[03:42.680 --> 03:47.680]  потому что там эти прям весы перекосились, а тут качались-качались, и вроде вот чуть-чуть вот-вот-вот
[03:47.680 --> 03:53.600]  вот это вот. Нет, такого у нас нет. То есть, с точки зрения программирования, удобно даже мыслить,
[03:53.600 --> 04:00.280]  что это не весы, это черный ящик. То есть, знаете, там это, знаете, выделилось такие две полочки.
[04:00.280 --> 04:07.080]  Ну вот, вы там кладете камешки, там черный ящик, там это помирал лампочками, там вот это, и сказал,
[04:07.080 --> 04:15.440]  там тяжелее вот этот, и там стрелочка такая мигает. Вот, примерно так. Ну и возвращаю там камешки.
[04:15.440 --> 04:24.920]  Вот, с помощью таких весов, так сказать, надо камешки упоря-до-чить. Ну, то есть,
[04:24.920 --> 04:29.440]  формально говоря, предложить вот перестановку такую, что вот каждый следующий камень весит
[04:29.440 --> 04:38.320]  там меньше, наоборот, больше предыдущего. И вот у нас возникает задача. Даже задача не столько,
[04:38.320 --> 04:44.880]  как это сделать, но хочется понять, а за какое минимальное количество действий это можно сделать.
[04:44.880 --> 04:53.200]  Причем тут сразу оговорка. А в каком смысле минимальное количество действий? Потому что
[04:53.200 --> 05:02.840]  иногда можно отсортировать камни за ОАТН. Ну, в каком плане? В том, что давайте пробежимся по массиву.
[05:02.840 --> 05:09.280]  Если выяснится, что он уже отсортирован, значит, мы его за ОАТН и сортировали. В этом случае,
[05:09.280 --> 05:16.000]  получается, мы потратим там ОАТН действий. Или даже Н-1 сравнений. Потому что в качестве действий
[05:16.000 --> 05:23.120]  мы здесь даже будем думать, а какое количество сравнений мы вообще можем сделать. Вот,
[05:23.120 --> 05:30.240]  внимание, нот. Ну вот, спрашивается. Ну, конечно же, там такие базовые случаи, когда нас не
[05:30.240 --> 05:36.160]  интересует. То есть, конечно же, нас интересует, чтобы у нас был какой-то алгоритм. То есть,
[05:36.160 --> 05:44.040]  он там при каждых нот любые н ко мне отсортируют, но нам хочется, чтобы в лучшем случае он сделал
[05:44.040 --> 05:49.080]  сколько-то действий, в среднем случае столько, а в худшем столько. И нам хочется, чтобы худшее
[05:49.080 --> 05:55.360]  время было как можно меньше. То есть, как мы уже обсуждали, то есть ТОН это у нас максимум по
[05:55.360 --> 06:06.720]  всем входам размера Н. Так что такая нот, постановка задачи. Ну вот, внимание, вопрос. Как же ее
[06:06.720 --> 06:22.800]  решать? Как ее решать? Ну, почему его? Нет, ну, на самом деле возникает, как бы, ну, один из вариантов,
[06:22.800 --> 06:29.480]  по крайней мере, абстрактно это решить. То есть, можно выражать алгоритм в виде там программы на
[06:29.480 --> 06:35.080]  языке C++ или там у кого-то, может быть, когда-то было блок схемы порисовать. Вот кто-нибудь рисовал
[06:35.080 --> 06:42.520]  когда-нибудь в школе блок схемы? Ого, вот, неплохо. Вот. Ну да, можно еще что-нибудь. Но, в принципе,
[06:42.520 --> 06:48.840]  бывает еще, на самом деле, дерево решений в данном случае нам пойдет. То есть, что это такое? Он говорит,
[06:48.840 --> 06:57.640]  так вот у нас, допустим, есть три камешка. Допустим, есть три камешка. И тогда сортировать мы их
[06:57.640 --> 07:04.440]  будем так. То есть, мы возьмем камень номер ноль. То есть, помните, ноль, один, два. Это как бы номера
[07:04.440 --> 07:11.120]  камешков, которые на них там написаны несмываемым маркером и, собственно, не стираются. Вот. И так
[07:11.120 --> 07:17.440]  берем нулевой камешек и сравниваем с первым камешком. И тогда у нас два варианта. Либо нулевой
[07:17.440 --> 07:25.720]  камешек окажется легче, либо первый. Ну, если нулевой, то мы идем по стрелочке влево. Если
[07:25.720 --> 07:32.640]  первый, то идем по стрелочке вправо. Дальше мы видим, что мы сравниваем первый и второй. Например,
[07:32.640 --> 07:38.080]  вот слева сравниваем первый и второй. Если вы видите, что первый меньше второго, то мы готовы вернуть
[07:38.080 --> 07:47.000]  ответ. То есть, ноль, один, два. Ну, если оказалось, что нет, первый оказывается тяжелее не только нулевого,
[07:47.000 --> 07:50.920]  но и второго, то мы в этом случае сравниваем нулевой и второй. И в зависимости от результата
[07:50.920 --> 07:58.720]  выдаем ответ. Аналогичным образом устроено дерево и справа. Ну, то есть, видите, да, у меня, конечно,
[07:58.720 --> 08:07.040]  дерево решение есть такой недостаток, что, конечно, для каждого n придется рисовать свое дерево. Но,
[08:07.040 --> 08:13.000]  с другой стороны, заметим, что в некотором смысле дерево решение будет иметь отношение практически
[08:13.000 --> 08:20.320]  к любому алгоритму. Ну, потому что, по большому счету, любой алгоритм, даже если вы там на C++
[08:20.320 --> 08:25.160]  напишете, он все равно будет вынужден их как-то сравнивать. То есть, вызывать вот какие-то вот
[08:25.160 --> 08:33.880]  подобного рода ифы. То есть, конечно же, сложная нота. Но, правда, в отличие от дерева решения,
[08:33.880 --> 08:38.120]  мы здесь действительно сравниваем только сравнение. То есть, что нас теперь интересует? То есть,
[08:38.120 --> 08:46.160]  нас интересует как бы для n камешков построить дерево так, чтобы его высота была как можно меньше.
[08:46.160 --> 08:56.360]  Понимаете, да? И, по большому счету, на самом деле, любой алгоритм, который вы напишете на C++,
[08:56.360 --> 09:04.600]  он может выдать вам соответствует такое же вот дерево решений. Потому что, по большому счету,
[09:04.600 --> 09:10.000]  потому что, например, вы там можете просто на всех тестах по большому счету смотреть,
[09:10.000 --> 09:15.920]  собственно, какие камни он вам предложит подестировать и, собственно, записывать что-то там.
[09:15.920 --> 09:19.920]  Получается, ваш алгоритм что-то делал. Но, правда, единственная только разница в том, что здесь мы
[09:19.920 --> 09:28.800]  смотрим только на сравнение, а при программе на C++ мы там еще что-то дополнительное в сравнении
[09:28.800 --> 09:34.120]  с сравнениями делаем. То есть, может так случиться, что вы делаете O от N в сравнении, скажем,
[09:34.120 --> 09:39.800]  но зато действие делаете N квадрат, потому что вы там любите копировать массив туда-обратно. Ну,
[09:39.800 --> 09:44.920]  как-то, конечно же, что нужно сделать, чтобы сортировать два камня? Надо взять пассив,
[09:44.920 --> 09:49.520]  значит, это скопировать его динамическую память, значит, удалить здесь, чтобы запустить рекурсию
[09:49.520 --> 09:54.080]  на O от N, там найти эти два камня, сортировать, потом, собственно, скопировать их обратно. Ну,
[09:54.080 --> 10:03.760]  может, у вас алгоритм устроен так, я не знаю. Ну, конечно, это сомнительно, конечно, что это будет
[10:03.760 --> 10:11.560]  оптимально, тем не менее. И так, значит, еще раз, что у нас такое? Да, то есть, действительно,
[10:11.560 --> 10:16.760]  в терминах дерева решений, как вы уже сказали, у нас вопрос, какова минимальная высота там по
[10:16.800 --> 10:21.800]  ребрам, ну или там по вершинам, ну, ну там плюс-минус один, не важно, какая минимальная
[10:21.800 --> 10:32.200]  реберная высота у нас будет, и мы ее обозначим за вот H оптимальное. Вот. Ну, конечно же, H
[10:32.200 --> 10:38.960]  оптимальное у нас меньше либо равно T от N, соответственно, как мы уже сказали, но остается только,
[10:38.960 --> 10:44.920]  но, как всегда, у нас будет в алгоритмах, нас устраивает, то есть нас, в принципе, устраивает
[10:44.920 --> 10:52.080]  асимпатически точный ответ. Вот. То есть, очень хочется, то есть, в идеале очень хочется доказать,
[10:52.080 --> 10:59.560]  что там, как всегда, H опт от N равен, скажем, О от чего-нибудь, а также Омега от чего-нибудь,
[10:59.560 --> 11:07.760]  то есть в переводе коврят это от чего-нибудь. Ну, хочется найти для H опт и для T. Но для этого нам
[11:07.760 --> 11:19.200]  нужны какие-то верхние оценки и нужны какие-то нижние. Ну, давайте посмотрим. Вот. Ну, давайте
[11:19.200 --> 11:24.560]  начнем с верхних. Ну, какие у нас там, просто если мы начнем придумывать какие-то сортировки,
[11:24.560 --> 11:30.600]  то там возникнут какие-то разные варианты. Ну, сейчас мы пробежимся по некоторым алгоритмам,
[11:30.600 --> 11:45.680]  потому что, собственно, их воспомнить и точно знать, что они есть, надо. Чего? Где? Возможно. Ну,
[11:45.680 --> 11:51.720]  вот. Так вот. Ну, значит, как же? Ну, вот. Ну, как у нас устроен selection sort? Ну, если очень вкратце,
[11:51.720 --> 11:57.240]  то мы просто в каждый момент времени из там не отсортированных элементов выбираем минимальный
[11:57.400 --> 12:03.600]  и дописываем его ответ. Вот. Ну, конкретно здесь, на самом деле, приведена реализация,
[12:03.600 --> 12:12.520]  которая позволяет вам не пользоваться дополнительной по мячу. Вот. Ну, то есть вот,
[12:12.520 --> 12:21.720]  на самом деле, примерно так. Вот. Примерно так у нас картинка может выглядеть. Вот. То есть,
[12:21.800 --> 12:30.840]  видите, да? Кошмар. Тут чисел кешей даже я едва вижу, конечно, но, тем не менее. Вот. Но суть,
[12:30.840 --> 12:35.640]  думаю, вы понимаете. То есть, да. То есть, в каждом момент времени у нас есть отсортированная часть,
[12:35.640 --> 12:40.200]  уже первые несколько минимумов и все остальное. На каждом шаре мы во всем остальном находим вот
[12:40.200 --> 12:46.480]  минимум, в данном случае, 45 и записываем сюда, сдвигаем границу. Все. Вот. Это, значит, такую
[12:46.480 --> 12:55.560]  сортировку мы будем называть сортировкой выбора. Вот. Понимаете, да? Вот. Сортировка выбора. Да. Ну,
[12:55.560 --> 13:01.680]  то есть, ничего сложного тут нет, но просто вот нужно знать, что вот такая сортировка есть. Вот.
[13:01.680 --> 13:11.800]  Вот. Так что, если вопросов нет, то, как сказал бы классик, слюшайте другую сортировку. Вот.
[13:11.800 --> 13:20.960]  Другая сортировка, это сортировка вставками. То есть, здесь уже немножко другое. То есть,
[13:20.960 --> 13:26.520]  если раньше мы, то есть, в принципе, вот примерно то же самое, но если здесь мы на каждом шаге
[13:26.520 --> 13:34.600]  искали минимум и дописывали его в конец, то здесь мы идем другим путем. Мы на каждом шаге пытаемся
[13:34.600 --> 13:40.920]  вот взять вот этот очередной элемент и вставить его сюда. Как мы это делаем? Ну, просто идем справа
[13:40.920 --> 13:52.600]  налево, там как-то жат, жат, жат. Просто ищем, в какую позицию вставить. Вот. То есть, делать мы это
[13:52.600 --> 14:01.640]  будем, вот, то есть, если писать на языке прям С, прям вот совсем С, можно даже сказать олдскульный
[14:01.640 --> 14:13.480]  Си совсем, то выглядеть это будет примерно следующим образом. Вот. Так что вот такая радость.
[14:13.480 --> 14:25.440]  Ну, тут, так, тут понятно, что происходит. Ну, думаю, никаких проблем нет. Но, смотрите, казалось бы,
[14:25.440 --> 14:35.040]  вот у нас есть две сортировки. Обе, очевидно, работают за квадрат. Вот. Но тем не менее у каждой есть,
[14:35.040 --> 14:41.440]  там могут быть свои какие-то преимущества. Вот давайте проанализируем. Вот у инсершн сорта,
[14:41.440 --> 14:49.520]  например, оказывается, что в лучшем случае, на самом деле, она работает за от. То есть, если нам
[14:49.520 --> 14:55.120]  очень повезет, например, если массив у поря до чем уже, то она сработает, то она за линию быстро
[14:55.120 --> 15:04.160]  это поймет. Вот. Правда, есть, конечно, небольшой минус. Небольшой минус будет заключается в том,
[15:04.160 --> 15:11.600]  что если массив отсектирован по убыванию, то она, наоборот, будет это понимать очень долго. В
[15:11.600 --> 15:17.960]  принципе, вообще можно сказать, что инсершн сорт будет работать, ну, в таком виде, в котором
[15:17.960 --> 15:28.800]  мы написали, за количество, просто в точности от количества инверсии в массиве. Плюс н. Ну,
[15:28.800 --> 15:33.000]  потому что свапов, потому что там свапов и движений будет ровно столько, сколько массивы инверсии.
[15:33.000 --> 15:45.480]  Так, надо ли говорить, что такое инверсия? Да, нет, наверное. Ну, вот. Так, ну, все понимают,
[15:45.480 --> 15:51.680]  что это не та инверсия, да? Нет, то есть мы тут не про диаметрическое преобразование там,
[15:51.680 --> 15:57.960]  про как-нибудь там, это Z превращается в один, делить на Z, вот это все, боже упаси. Вот. Нет,
[15:57.960 --> 16:01.840]  то в данном случае, я говорю, давайте на всякий случай поясним, может быть, для кого-то из телезрителей,
[16:01.840 --> 16:07.840]  что в данном случае мы называем инверсией пару элементов в массиве, не обязательно рядом стоящих,
[16:07.840 --> 16:18.600]  но таких, что элемент, который слева больше, чем элемент, который справа. То есть это называется
[16:18.600 --> 16:23.400]  инверсия и в принципе легко показать, что вот insertion sort работает за o от n плюс количество
[16:23.400 --> 16:29.400]  инверсий в таком массиве. Например, вот сортировка вставками в таком виде работает именно так. Ну,
[16:29.400 --> 16:37.880]  конечно, у нее есть и другие варианты. Что же это за варианты? Ну, вот тут смотрите,
[16:37.880 --> 16:43.840]  как интересно. Вот есть вариант, действительно, что мы можем, что на самом деле, если мы не хотим
[16:43.840 --> 16:49.320]  прям за o от n искать, куда вставлять очередной элемент, мы это можем сделать за логарифом,
[16:49.320 --> 17:00.280]  используя бинарный поиск. Ну, как бы понятно, n квадрат это нам, конечно, не справит глобально,
[17:00.280 --> 17:04.840]  но у нас есть какие части? Есть части сравнения, то есть там сравнения, то есть
[17:04.840 --> 17:10.160]  поиск, куда вставить, и есть собственно вставка. И в принципе часть сравнения можно реализовать
[17:10.160 --> 17:15.240]  уже за n лог n. То есть в принципе обратите внимание, то есть у нас есть вообще алгоритм,
[17:15.520 --> 17:24.160]  который умеет выполнять сравнение не более чем o от n лог n раз. Ну, при этом, правда,
[17:24.160 --> 17:31.680]  при сваивании он все еще делает квадрат. Ну, правда, тут действительно разные вещи,
[17:31.680 --> 17:39.280]  потому что если у нас задача скопировать там какой-то кусок памяти, то компьютеры часто используют
[17:39.280 --> 17:43.840]  какие-то там низкоуровневые средства. На самом деле, это можно сделать достаточно быстро,
[17:43.840 --> 17:48.800]  поэтому константа здесь, то есть, конечно, n квадратов никуда не денетесь, но константа может
[17:48.800 --> 17:58.040]  оказаться прям, называется очень и очень маленькой. Ну да, ну при желании, конечно, если вы хотите
[17:58.040 --> 18:03.680]  вставлять массив так, то вы, конечно, можете там дикартовый дерево какой-нибудь реализовать. Вот,
[18:03.680 --> 18:09.480]  но до этого мы пока не дожили. Тем более дикартовый дерево нас интересует, потому что дикартовый
[18:09.840 --> 18:19.320]  вероятностная структура данных. Да, ну вероятностный. Ну, вот ожидание времени работ любой операции
[18:19.320 --> 18:28.600]  логарифом, вот так. Поэтому хотите надежности, пишите avl, ну или красно-черный. Вот, вам понравится.
[18:28.600 --> 18:37.280]  Вот, а ну вы напишите, в общем-то. Нет, ну там ничего такого страшного нету, но вот тем не менее,
[18:37.480 --> 18:45.200]  если это сортировки ставками, вот такая оптимизация есть. Вот, но вот, кстати, если так
[18:45.200 --> 18:51.520]  посравнивать, прежде чем идти, давайте посмотрим на selection sort с этой же точки зрения. Давайте
[18:51.520 --> 18:56.680]  посмотрим. Вот у нас insertion sort действительно есть лучший, в случае есть худший. Вот у сортировки
[18:56.680 --> 19:02.960]  выбором, на самом деле, конечно, все сильно хуже, потому что заметим, что мы и в худшем, и в лучшем
[19:02.960 --> 19:13.160]  случае работаем за n², то есть логаритм всегда работает за θ от n² без вариантов. Вот, то есть
[19:13.160 --> 19:18.000]  видим, что в сравнении там будет n², копируем, вот в этом смысле, конечно, insertion sort сильно
[19:18.000 --> 19:27.080]  лучше. Ну, какие еще варианты есть? Ну, конечно, знаменитый bubble sort. Да, возможно, для многих это
[19:27.080 --> 19:32.480]  была первая сортировка, которую вы вообще реализовали. А потом сейчас проверим. Ну-ка,
[19:32.480 --> 19:42.560]  вот кто, у кого первая сортируемая сортировка в жизни была именно эта? Так, хорошо. А у кого
[19:42.560 --> 19:56.040]  это был insertion sort? Так, а у кого был selection sort? Так, то есть, а у кого был quick sort? Ну, мало ли.
[19:56.040 --> 20:03.680]  А у кого merge sort? А кто вообще хотя бы раз в жизни хоть какую-то сортировку кроме std sort описал? А
[20:03.680 --> 20:13.820]  какую вы писали? По-моему, тут не все руки подняли. Чего? А прям с него и начали, да? Да,
[20:13.820 --> 20:19.800]  здравствуйте, дети. Это оператор if, это оператор for, а теперь пишем team sort. Дам так, что ли?
[20:19.800 --> 20:33.680]  Ну, значит, действительно, у нас есть такой вот bubble sort. Значит, что он делает? Вот,
[20:33.680 --> 20:38.720]  ну, в принципе, можно сказать, что это там, то есть где-то у нас действительно частный случай
[20:38.720 --> 20:46.680]  сортировки выбором, а где-то и нет. Вот, тоже в некотором смысле, то есть на самом деле тоже мы
[20:46.680 --> 20:52.280]  в некотором смысле будем искать массив, то есть искать элемент, правда, искать на этот раз будем
[20:52.280 --> 21:01.200]  не минимум, а максимум, хотя можно, в принципе, и минимум. Вот, но фишка здесь такая более хитрая.
[21:01.200 --> 21:06.840]  То есть мы будем здесь идти слева направо, просто пробираться по массиву слева направо и говорить,
[21:06.840 --> 21:15.440]  так, если я вижу там, что элемент больше предыдущего, значит, я их свапаю. Значит, меняю местами. Ну,
[21:15.440 --> 21:20.600]  то есть смысл оказывается тот же, потому что за каждую операцию, за каждый такой проход мы
[21:20.600 --> 21:27.720]  гарантируем, что там очередной максимум, собственно, встал на свое место, это точно. Но это,
[21:27.720 --> 21:34.400]  конечно, лучшая selection сорта чем? Тем, что продвинулись к своим правильным отметкам не только
[21:34.400 --> 21:44.360]  максимум на каждой итерации, но еще может быть какие-то элементы. Вот, но тут вот можно сказать,
[21:44.360 --> 21:49.720]  примерно так это будет выглядеть. То есть видите, да, то есть в исходном массиве окажется,
[21:49.720 --> 21:56.000]  что у нас вот элемент, сначала у нас тут элемент 20 там доплывет, аж до сюда, то есть проплывет
[21:56.000 --> 22:04.160]  31719, но 25 он уже не превзойдет, поэтому дальше пойдет 25, но он сразу наткнется на 35, но 35,
[22:04.160 --> 22:10.880]  при этом свапает там 9 и так далее. Вот, ну то есть видно, да, сразу, что на каждый, то есть мы не
[22:10.880 --> 22:16.520]  только нашли, что 35 максимум, но еще там какие-то элементы протолкнулись, поэтому в рандомном
[22:16.520 --> 22:21.760]  случае это может действительно помочь. То есть худший случай, конечно, никуда не делся, то есть
[22:21.760 --> 22:27.080]  если массив отсортирован изначально по убыванию, то, ну, конечно, вы от честного квадрата никуда не
[22:27.080 --> 22:37.280]  денетесь. Нет, нет, нет, нет, нет, нет, вот обратите внимание, если раньше мы свапали только прям
[22:37.280 --> 22:42.960]  точно, то есть как бы мы идем справа налево и так инверсия, свап, инверсия, свап, инверсия, нет,
[22:42.960 --> 22:49.320]  все остановились, вот, то здесь это не так, то есть только, ну, то есть здесь это явно не так,
[22:49.320 --> 22:56.960]  потому что вот обратите внимание, здесь вот 20, 25, там 25, 35 мы сравнивали и ничего, поэтому здесь
[22:56.960 --> 23:02.200]  могут быть лишние, там какие-то лишние операции, гарантировать, что здесь будет сделано n лог n
[23:02.200 --> 23:14.520]  сравнений, увы, нельзя, но количество свапов, которые выполняем, да, все еще количество инверсии,
[23:14.520 --> 23:28.360]  это да, это правда, вот, это правда, это правда, вот, итак, но что же у нас получается, вот, пока,
[23:28.760 --> 23:33.480]  если так подвести итоги, то есть мы в общем-то, ну, то есть мы рассмотрели три алгоритма и все эти
[23:33.480 --> 23:43.080]  сортировки работают за квадрат, то есть получается t от n это o от n квадрат, да, но обратите внимание,
[23:43.080 --> 23:50.720]  является, но точно ли это, непонятно, ну, то есть как, скажем, классик, но это пока не точно, вот,
[23:50.720 --> 23:57.960]  вот, ну, более того, но какие, но что у нас, ну, вот, ну, что у нас еще может быть, то еще мы попутно
[23:57.960 --> 24:03.680]  выяснили, что дерево решения, в принципе, может быть вполне себе высоты n лог n, в чем даже и selection
[24:03.680 --> 24:22.160]  сорта, а может in section, как же никто еще эту очепятку не находил, как интересно, ну, хорошо, да,
[24:22.160 --> 24:45.200]  действительно in section, давайте это сразу себе зафиксируем, in section, ну, вот, ну, вот, ну, насколько
[24:45.200 --> 24:50.120]  эта штука точна, но тут действительно возникает вопрос, а можно ли придумать сортировку быстрее,
[24:50.120 --> 25:06.320]  чем за n квадрат, давай, нет, почему, нет, смотрите, у нас, нет, высота не logarithm, а n лог n,
[25:06.320 --> 25:13.520]  почему, потому что, потому что мы гарантируем, что, там, в любой, в любом случае мы сделаем не
[25:13.520 --> 25:24.800]  более, чем n лог n сравнений, то есть, поэтому пока именно n лог n, вот, так, ну, в принципе, классический
[25:24.800 --> 25:34.800]  вариант, конечно, сортировки за n лог n, это наш, это, конечно, его величество мерш-сорт, вот, ну,
[25:34.800 --> 25:40.000]  в общем, алгоритм действительно достаточно простой, он базируется на том, что, если у вас есть два
[25:40.000 --> 25:45.760]  отсортированных массива, то вы можете получить из них один отсортированный массив за линейное
[25:45.760 --> 25:52.560]  время с помощью, ну, простого прохода двумя указателями, так, думается, там, думается, нет, смысла
[25:52.560 --> 26:01.120]  прям принципиально это описывать, вот, в таком виде, но, впрочем, тут есть разные варианты, на самом
[26:01.120 --> 26:08.760]  деле, можно написать вообще, там, мерш-сорт без рекурсии, вот, ну, в принципе, да, разбить на два
[26:08.800 --> 26:14.240]  степенька, ну, например, можно так разбить на два степенька под массивов, но два степенька меньше,
[26:14.240 --> 26:18.920]  но как можно ближе к нему, и чтобы каждый массив был где-то по одному, два элемента, каждый
[26:18.920 --> 26:25.160]  сортируем там, как угодно, ну, как сортировать массив из двух элементов, ну, тут, да, не особы
[26:25.160 --> 26:32.720]  варианты есть, да, вот, ну, а дальше там уже развлекаю, там можно уже развлекаться как угодно. Вот,
[26:32.720 --> 26:36.980]  чтобы было совсем удобно, можно там добить массив до степени, там, по размеру, до степени
[26:36.980 --> 26:41.960]  двойки и потом уже действительно сортировать, чем это будет удобно, что вы на каждом шаге будете
[26:41.960 --> 26:47.520]  знать, что вы сортируете массивы. Сначала длины 1, потом длины 2, потом длины 4, потом длины 8 и так
[26:47.520 --> 26:57.880]  далее. Вот по идее так конечно можно, но чаще конечно, то есть удобнее конечно запускать рекурсию.
[26:57.880 --> 27:04.720]  Удобно конечно запускать рекурсию, действительно получается достаточно красиво, то есть делить
[27:04.720 --> 27:17.620]  можно на не совсем там ровные массивы, за этим особо не следить. Вот здесь краткое
[27:17.620 --> 27:24.480]  описание В-шторта, но окей, не думаю, что это прям принципиально. Вот, ну давайте смотреть.
[27:24.480 --> 27:33.760]  Вот, ну давайте так, то здесь аккуратно скажем, что само по себе слияние двух массив работает
[27:34.080 --> 27:42.080]  длин N и M, работает за тетто N плюс M, думаю, это факса мне не вызывает. Вот, ну количество сравнений как
[27:42.080 --> 27:47.040]  повезет, ну в лучшем случае там меньше, чем минимум из двух массивов, но не обойдемся,
[27:47.040 --> 27:54.120]  ну в худшем случае там получается N минус M плюс 1, но здесь несложно убедиться. Вот,
[27:54.120 --> 28:02.280]  но отсюда возникает вопрос, за сколько работает сам мерч-сорт? Так, ну здесь мы, ладно, мы уже
[28:02.280 --> 28:08.680]  там, ну здесь мы уже с этой шутки говорили, что мы уже там легко показать, что мерч-сорт работает
[28:08.680 --> 28:15.000]  за ОАТН, но чуть сложнее действительно убедиться, что на самом деле нет, конечно. Вот, но на самом
[28:15.000 --> 28:20.120]  деле я видел, что классическое доказательство по индукции говорит, что у нас это ОАТН логен,
[28:20.120 --> 28:24.880]  собственно потому что эту рекурренту мы умеем так решать и аккуратно доказать, но это мы уже
[28:24.880 --> 28:36.680]  обсуждали. Так, но отсюда, но что можно отсюда вывести? Какое следствие можно сделать? Можно
[28:36.680 --> 28:46.880]  сделать вывод, что теперь ТАТН оценивается сверху как N логен, а теперь вот уже возникает вопрос,
[28:46.880 --> 28:54.320]  а нельзя ли оценить как-то снизу? Да, ну можно гарантировать, что ТАТН равно ОМЕГАТН, почему?
[28:54.320 --> 29:10.200]  Да, даже нужно сравнить хоть с кем-нибудь хотя бы один раз. А зачем? А вдруг у нас будет
[29:10.200 --> 29:16.680]  такой мистический алгоритм, который в принципе по сравнивая все остальные элементы, на самом деле
[29:16.680 --> 29:27.720]  сразу скажет, куда вот этому элементу вставляться надо, но на самом деле да, то есть здесь нужна какая-то
[29:27.720 --> 29:32.640]  вот определенная аккуратность всегда нужна, потому что само по себе, что мы должны же мы
[29:32.640 --> 29:39.720]  просмотреть элементы, это сам по себе не аргумент, то есть как бы аргументом это становится действительно,
[29:39.720 --> 29:47.520]  когда вы просто когда мы говорим, что допустим у нас есть алгоритм, допустим у нас есть алгоритм,
[29:47.520 --> 29:53.840]  который там в каком-то случае не взял какой-нибудь вот этот наш красненький элемент и его ни с кем не
[29:53.840 --> 30:00.480]  сравнивал, тогда утверждается, что этому алгоритму можно подсунуть два разных теста, на которые он
[30:00.480 --> 30:11.280]  выдаст один и тот же ответ. То есть получается так, пусть у нас возник какой-то тест, на котором алгоритм
[30:11.280 --> 30:19.400]  не взял себе, не взял красный элемент ни разу, но убедительно сказал, куда его вставлять. Тогда
[30:19.400 --> 30:25.320]  утверждается такое, а давайте попробуем скормить этому алгоритму тот же тест, но там этот красненький
[30:25.320 --> 30:30.960]  элемент будет весить сильно больше или сильно меньше. Тогда этот алгоритм выдаст ровно то же
[30:30.960 --> 30:38.640]  самое, потому что он детерминированный, но вот, но получает, но ответ, но ответ он явно выдаст уже,
[30:38.640 --> 30:44.560]  выдаст ответ тот же самый, но тест изменился. То есть следовательно, где-то все-таки алгоритм
[30:44.560 --> 30:56.760]  про ВА шелся. Может, но мы изучаем детерминированный алгоритм. Да, вот в этом смысле жесткость моделя нам
[30:56.760 --> 31:00.960]  помогает, мы изучаем детерминированный алгоритм. Да, потому что отдельная будет песня, когда,
[31:00.960 --> 31:10.240]  оказывается, алгоритм какой-нибудь не детерминированный действительно. Вот, но это уже отдельная песня. Да, то есть
[31:10.240 --> 31:15.680]  таким образом можем видеть, что каждый элемент должен сравниться хоть с кем-то, и в принципе из
[31:15.680 --> 31:26.240]  этого следует, что там скажем, что t от n это, даже можно сказать h, вот это оптимальная, не менее чем n
[31:26.240 --> 31:36.440]  пополам. Да, пока даже не n-1, а n пополам. То есть как бы, чтобы довести его хотя бы до n-1,
[31:36.440 --> 31:41.000]  нам придется с вами, конечно, поговорить, там придется еще как-то что-то поговорить о
[31:41.000 --> 31:47.440]  тему того, что если нарисовать там, да, мы не знаем таких понятий, но если нарисовать крав в сравнении,
[31:47.440 --> 31:54.320]  то как бы компонента связанности должна быть одна. Да, пока это все заклинание, конечно, да,
[31:54.320 --> 32:02.320]  мы не знаем, что это такое, все это такое, да, якобы. Но тем не менее. Но, впрочем, это достаточно жесткие
[32:02.320 --> 32:06.940]  оценки, потому что, на самом деле, то, что мы доказали не столько, что аж hello там, что высота
[32:06.940 --> 32:14.520]  дерева должна быть, как минимум там, n-1, а на самом деле можно заметить, что, я, что даже,
[32:14.520 --> 32:19.120]  то есть как бы когда мы говорим высота дерева, мы говорим максимальная высота, то есть максимальная
[32:19.120 --> 32:24.220]  глубина листа, а на самом деле с того, что доказали, следует, что даже минимальная глубина листа должна
[32:24.220 --> 32:34.420]  быть хотя бы этом и минус один вот это да но чем нот но тем не менее да хорошо оценка за линию
[32:34.420 --> 32:44.380]  есть но у нас пока есть зазор оценка сверху n log n оценка снизу n как бы этот зазор схлопнуть
[32:44.380 --> 32:54.900]  ну на самом деле да вот схлопнуть его можно вот таким простым естественным образом
[32:54.900 --> 33:04.380]  вот да тут написан какой-то текст но на самом деле просто давайте сразу поймем сразу просто
[33:04.380 --> 33:09.780]  увидим что там на самом деле написано она писана там следующие у нас есть двоичное
[33:09.780 --> 33:15.900]  дерево что такое двоичное дерево то есть это подвешенное дерево так причем такое что у
[33:15.900 --> 33:24.980]  каждой вершины каждая вершина либо лист либо у нее ровно два ребенка спрашивает а сколько у
[33:24.980 --> 33:34.060]  такого дерева вот выделять простой плюс должно быть листьев но так их должно быть не меньше чем
[33:34.660 --> 33:42.940]  почему потому что у нас n различных по большому счету ответов на задачу правда но помните помните
[33:42.940 --> 33:50.500]  у нас что такое ответ у нас помните да ответ это у нас там это последовательность то есть это
[33:50.500 --> 33:56.900]  вот перестановка камешка то есть получается листов должно быть не менее чем n но правда
[33:56.900 --> 34:00.300]  видимо в дереве решений вряд ли будет больше потому что вряд ли вы найдете два листа с
[34:00.300 --> 34:09.060]  одинаковой перестановкой вот так теперь внимание вопрос какова может быть высота дерева
[34:09.060 --> 34:20.940]  минимальная высота дерева если листьев н фортрел да но у нас дерево строго бинарное
[34:20.940 --> 34:27.820]  да так-то конечно высота бывает один это да как видите такая вот классическая борода такая вот
[34:28.220 --> 34:37.620]  вот но действительно но если у нас есть если у нас действительно у каждой вершины два ребенка то
[34:37.620 --> 34:49.140]  высота конечно не менее чем логарифом n факториала или корень из н факториала а чей не логариф
[34:49.220 --> 34:58.420]  логарифа вот почему да может и может корень логарифа мало ли или логарифом корня
[34:58.420 --> 35:16.220]  так на это но на этом уровне не больше чем два степени вершины чо у нас может на каждом
[35:16.220 --> 35:29.060]  уровне быть малое количество вершины что так ну и так и
[35:29.060 --> 35:43.460]  да да ну в принципе да действительно да можно и так спасибо да то есть действительно можно то
[35:43.460 --> 35:48.900]  есть можно сказать так что действительно заметим что если у нас будет дерево высоты аж то тогда
[35:48.900 --> 35:54.740]  утверждается что в дереве будет не более чем два в степени аж плюс один минус один там вот такая
[35:54.740 --> 36:02.940]  цифра будет дад аж плюс один минус один просто не более вершины прям точная оценка вот но
[36:02.940 --> 36:08.260]  соответственно вот ну соответственно если вы хотите чтобы высота дерева была аж то тогда получается
[36:08.260 --> 36:14.460]  там должно быть хотя бы n листов то получается n должно быть меньше либо равно этой штуке но отсюда
[36:14.460 --> 36:21.060]  собственно следует что аж это там порядка не там что аж это не менее чем логарифом n но даже
[36:21.060 --> 36:35.580]  в нашем случае n а n факториал да да да да да да да да да вот она так возвращаемся на место вот
[36:35.580 --> 36:40.820]  здесь по разному доказывать можно потому что у меня придiye было доказательство что давайте думать
[36:40.820 --> 36:45.860]  вот сколько у меня сейчас под деревья листов если я сейчас n факториал листов тогда давайте
[36:45.860 --> 36:50.020]  я сейчас пойду в какой-нибудь под дерево с наибольшим количеством листов тогда у меня их будет
[36:50.020 --> 36:56.540]  там не менее чем n факториал пополам потом я там тут тоже спущусь куда-нибудь выберу где тут
[36:56.540 --> 37:02.420]  побольше листов и будет менять факториал на 4 и так далее вот отсюда логариф тоже можно вычислить
[37:02.420 --> 37:09.260]  но это уже там на ваше усмотрение можно и так таким образом получается что высота любого дерева
[37:09.260 --> 37:19.340]  решений и может быть меньше чем двоичный логарифом от n факториала но с другой стороны легко
[37:19.340 --> 37:27.140]  показать что логарифом двоичный n факториала это омега от n логан но собственно сейчас вы на
[37:27.140 --> 37:33.740]  доске видите такой максимально простой метод как это сделать но ну скажи так конечно с оговорочкой
[37:33.740 --> 37:39.620]  конечно там с оговорочкой что там дает пополам может быть нечетным поэтому там надо чуть-чуть
[37:39.620 --> 37:44.100]  подробно писать но общую суть я думаю вы видите вот понятна
[37:44.100 --> 38:06.540]  вот так что такая вот у нас и вот имеется красота так ну что есть ли тут какие-то вопросы
[38:06.540 --> 38:18.020]  вот тогда что есть только что в сухом остатке имеем мы имеем ну скажем так в принципе
[38:18.020 --> 38:22.940]  решенную задачу по поводу того что такое а шопт то есть мы доказали что оптимальное время
[38:22.940 --> 38:29.820]  работы сортировки по камере в таком виде в котором она у нас тут есть это n логан мы доказали что
[38:29.820 --> 38:40.740]  меньше не бывает а ровно n логан вот есть мэш сорт да это конечно не единственный алгоритм но
[38:40.740 --> 38:46.920]  это но это у нас конечно не единственный алгоритм но собственно по камере он асимпатически
[38:46.920 --> 38:59.160]  оптимальный вот что есть ли тут какие-то вопросы вот ну на самом деле ладно прежде
[38:59.160 --> 39:05.760]  чем вот пока мы там не ушли куда-то дальше вот дабы уж примерно увидели куда ну конечно
[39:05.760 --> 39:09.720]  хочется на всякий случай то есть остановиться на еще одной задачи связанной с мэш сортом
[39:09.720 --> 39:15.320]  просто сейчас мы ее быстренько тоже поговорим потому что не хочется чтобы она там уходила
[39:15.320 --> 39:24.600]  от нас папа но это как раз по поводу количества инверсий вот ну при ферда соцсетия вот бывает
[39:24.600 --> 39:30.480]  такая задача дан массив найдите количество инверсий или что тоже то есть более точная
[39:30.480 --> 39:37.280]  формулировка там мы говорим что вот у нас есть массив допустим там элементы индексируется ну
[39:37.280 --> 39:48.120]  допустим с единицей там на самом деле можно с нуля это неважно 5 4 2 8 6 11 3 2 5 и мы говорим что там скажем
[39:48.120 --> 39:55.840]  инверсии называются вот два элемента такие что более левой больше более права внимание вопрос
[39:55.840 --> 40:09.800]  а сколько таких инверсий массиве нет это оценка сверху нам точное число просит да тут уже другая
[40:09.800 --> 40:16.160]  постановка дан массив то есть понятно в худшем да в худшем случае сэзон по два это да в лучшем
[40:16.160 --> 40:26.280]  случае 0 да но нам дан конкретный массив и нам конкретно просят так скажите это 57 вот или там
[40:26.280 --> 40:39.640]  ну или 179 ну или сколько там их реально что рнд процент 4 чего да да да да да и с некоторой
[40:39.640 --> 40:46.920]  вероятностью нам повезет да да как бы вероятность конечно потому что нам повезет крайне мало но
[40:46.920 --> 40:58.340]  зато алгоритм завод единицы работает да да да да да да да да ну поэтому для этого нужно
[40:58.340 --> 41:09.260]  звать какого-то фенвика там из америки вызывать да ну да ну конечно да можно а лучше а лучше
[41:09.260 --> 41:19.180]  insertion sort а лучше вставками напишем ну по сути да потому что нет на самом деле тут действительно
[41:19.180 --> 41:24.020]  иногда вот это вот иногда это действительно очень помогает на самом деле при решении задачи
[41:24.020 --> 41:31.300]  на сортировку после действительно серьезно да что действительно удобно что то есть в принципе
[41:31.300 --> 41:35.460]  верно то есть на самом деле в принципе верно что либо массив отсортирован либо найдутся ну
[41:35.460 --> 41:41.460]  например два в чем даже просто два стоящих рядом элемента которые образуют инверсии и по идее их
[41:41.460 --> 41:49.340]  можно находить и соответственно свапать вот понимаете да вот нет принципе некоторые задачи
[41:49.340 --> 41:56.580]  на самом деле это даже помогает там соответственно помогает решать то есть когда там но то есть
[41:56.580 --> 42:05.760]  обычно это но это это там будет какой-нибудь такой метод но так я сейчас слёту задачи не вспомни
[42:05.760 --> 42:10.740]  жалко что там но действительно часто вот мета метод герой некоторые задачи как как опсимально
[42:10.740 --> 42:15.500]  расположить элементы чтоб там какой какой-то функционал был хороший да как устроен метод
[42:15.500 --> 42:20.060]  метод говорит что так отлично говорим что предположим что допустим у нас там рядом
[42:20.060 --> 42:24.500]  стоит петь и васе для которых там верно вот это тогда их можно посвапать их уже не станет
[42:24.500 --> 42:31.500]  вот доказательно хуже не станет вот но и тогда кажется что действительно если вы так свапые там
[42:31.500 --> 42:35.860]  окажется что мы там свапаем свапаем выясняется что просто результате оптимальный ответ это
[42:35.860 --> 42:42.980]  просто надо их отсортировать по соответствующему там параметрам но то есть ну пусть бы да мы
[42:42.980 --> 42:46.940]  умеем для двух элементов сравнивать типа кто больше кто меньше давайте по этому параметру их
[42:46.940 --> 42:55.340]  сравнивать вот ну в общем-то а что далеко ходить вот есть же вот это классическая задача такая
[42:55.340 --> 43:03.020]  значит да так и называется хирус квест значит да давайте вот расскажу эту задачу потому что
[43:03.020 --> 43:09.140]  очень популярная тут вот на как говорится даже на финалах чемпионата мира подсовывается оказывается
[43:09.140 --> 43:17.620]  поэтому вот поэтому как бы такой баян знать надо вот давайте смотреть вот задача такая значит
[43:17.620 --> 43:22.780]  будьте здоровы значит ситуация значит нам нужно дочь мы играем в какую-то компьютерную игру где
[43:22.780 --> 43:35.460]  нам нужно победить м монстр вот но что значит вот но что значит победить вот ну в принципе то и
[43:35.460 --> 43:46.740]  значит есть один маленький нюанс у нас есть хп то есть очки жизни вот изначально у нас этих
[43:46.740 --> 43:55.380]  хп целых аж вот у нас есть изначально аж хп но проблема то что когда вы деретесь с монстром
[43:55.380 --> 44:06.260]  вы хп теряете обычно да потому что не только вы его бьете но и он вас вот и принципе известно
[44:06.260 --> 44:17.220]  что каждый товарищ допустим у вас тратит а и т хп но то есть если вы деретесь с сытым монстром вы
[44:17.220 --> 44:23.420]  как бы в процессе там он вас бьет на а это то есть это означает что если у вас изначально аж был
[44:23.420 --> 44:31.220]  ладно не а д ладно давайте д от слова дамаг так если я правильно понимаю значение этого слова
[44:31.220 --> 44:38.020]  ну я просто не особо гаммер поэтому как бы могу что-то вот но насколько я знаю это называется
[44:38.020 --> 44:45.780]  дамаг от слова damage вот соответственно по камере я себе так это понимаю вот и так то есть он вам
[44:45.780 --> 44:52.380]  наносит какой-то дамаг если этот дамаг не меньше чем аж то это означает что в процессе битвы вы
[44:52.380 --> 45:02.780]  торжественно погибаете но что такое погибаете когда если дрите больше либо равно аж то как бы
[45:02.780 --> 45:09.300]  вы погибаете ну что такое погибайте ну и когда у вас там это там экран появляется каком-то
[45:09.300 --> 45:17.220]  цветом там написано потрачено вот это вот все вот соответственно нет ладно и другая игра не
[45:17.220 --> 45:26.860]  важно вот но но может так случая но вот но если аж у вас больше то вы побеждаете и не просто
[45:26.860 --> 45:35.940]  побеждаете а получаете награду в виде аи того единиц хп то есть это означает что в случае
[45:35.940 --> 45:44.860]  победы у вас хп как бы превращается в аж минус д и плюс аи условно и теперь вот вам вам дано
[45:44.860 --> 45:59.260]  n таких монстров вот вам дано n таких монстров и возникает естественный внимание вопрос может
[45:59.260 --> 46:04.660]  ли этих м монстров победить то есть потому что все что потому что вы в принципе вам нужно
[46:04.660 --> 46:11.100]  конечно сразиться со всеми но у вас есть такая свобода вы имеете право выбирать в каком порядке
[46:11.100 --> 46:24.300]  вы с ними драться будете вот спрашивается как же но как же понять можно ли это сделать если да
[46:24.300 --> 46:35.220]  только вот такая задача поднимите руки кто сталкивался с подобного рода задачей неплохо
[46:35.220 --> 46:43.660]  в чем он заключается
[46:43.660 --> 46:55.780]  ну да ну да ну давайте ну да то есть ну можно называть да видим по разуму можно
[46:55.780 --> 47:00.620]  звать но то есть действительно давайте то есть обычно метод звучит так то есть предположим
[47:00.620 --> 47:04.700]  что ответ что есть вот какой-то ответ вот у меня есть там какие-то какой-то порядок монстров
[47:04.700 --> 47:11.540]  которые дает нам победу да тогда вот хочется находить какие-то говорить что допустим вот
[47:11.540 --> 47:19.700]  эти каких-либо двух соседей можно поменять местами и хуже не станет ну хуже не станет что как бы
[47:19.700 --> 47:26.540]  если это была победа то если мы их поменяем местами то победа останется победой но первое
[47:26.540 --> 47:34.220]  что тут возникает смотрите заметим что есть монстры которые в итоге нас прокачивают ну
[47:34.300 --> 47:40.260]  то есть у которых вот это вот то есть монстры типа хорошие монстры когда аи ты минус дитая больше
[47:40.260 --> 47:49.060]  нуля а есть монстры которые нас убивают у которых это меньше нуля но есть там равенство но это пока
[47:49.060 --> 47:55.420]  локально да так вот выскакать первое утверждение что предположим что у меня здесь идет такой
[47:55.420 --> 48:04.540]  убивающий монстр а потом дальше идет наоборот оживляющий монстр тогда я утверждаю что этих
[48:04.540 --> 48:10.060]  монстров можно поменять местами то есть взять сначала оживляющего потом убивающего и хуже не
[48:10.060 --> 48:15.780]  станет то есть как бы то есть как бы победный алгоритм останется победным алгоритм как я это
[48:15.780 --> 48:24.020]  буду делать нет как я это буду доказывать ну можно расписать но на самом деле все что нам
[48:24.020 --> 48:29.660]  надо расписать это то что вот этот гарантировать что если мы их поменяем местами то я смогу
[48:29.660 --> 48:38.900]  убить сначала этого монстра потом это сетам не погибнув процесс да да совершенно верно да то
[48:38.900 --> 48:43.100]  есть с одной стороны зависит этого монстра мы спокойно убьем потому что как бы если тут у
[48:43.100 --> 48:48.340]  меня на этот момент хп как бы у меня больше нуля то как бы здесь у меня хп было еще больше поэтому
[48:48.340 --> 48:54.020]  мы его убьем без проблем но другой стороны да но с другой стороны вопрос а убьем ли мы этого
[48:54.020 --> 49:00.660]  монстра да тоже убьем потому что тогда мы его при будем начинать убивать при хп большим получается
[49:00.660 --> 49:10.060]  чем вот эта позиция так есть понятно чем я говорю вот точно понятно хорошо а то как бы не говорите
[49:10.060 --> 49:17.500]  потом что это господи там это понимает происходящие только 5 человек то есть там вот это там что-то
[49:17.500 --> 49:24.020]  сразу это очень это какой-то очень высокий уровень господи я всего лишь 57 место в серосе и настолько
[49:24.020 --> 49:31.980]  умные и там вот вот чтобы этого не было да или лучше сразу как идут или нот или наоборот
[49:31.980 --> 49:36.100]  пусть если что-то непонятно лучше сразу прям взять преподаватель и трясти его вот так вот не вот
[49:36.100 --> 49:40.940]  так вот так вот за шкирку пока не расколется да там про не расскажет вам просто вообще все что он
[49:40.940 --> 49:45.580]  знает ну собственно вообще он за этим сюда и пришел в общем-то на самом деле ну все он конечно вам
[49:45.580 --> 49:49.860]  не расскажет к сожалению ну просто но поверьте он это сделать только чисто в силу того что у
[49:49.860 --> 49:56.420]  нас ограниченное количество времени вот если у нас было бесконечное время я бы конечно рассказал
[49:56.420 --> 50:11.700]  все вот так вот значит соответственно но вот значит соответственно и так хорошо но тогда значит
[50:11.700 --> 50:16.100]  вы говорим то есть получается тогда следующее что мы в опсимальном решении можем свапать то есть
[50:16.100 --> 50:20.860]  у нас идет убивающий монстр а потом возраздающий монстр то мы имеем право их посвапать их уже не
[50:21.180 --> 50:28.260]  сделав несколько таких свапов мы тогда приходим к тому что у нас есть решение что сначала идут
[50:28.260 --> 50:35.700]  вот но там возраздающие монстры потом ну потом может быть идут несколько вот этих вот нейтральных
[50:35.700 --> 50:45.100]  монстров и потом идут убивающие монстр вот то есть мы доказали я просто сейчас проговариваю
[50:45.100 --> 50:49.660]  до формальную сторону вопроса то есть формально мы сейчас доказали следующее мы доказали что
[50:49.820 --> 50:56.780]  если существует как бы способ победить то существует способ победить вот такого
[50:56.780 --> 51:11.100]  вида понимаете да и тогда к чему это нас приводит это те но это те у которых как бы бонус
[51:11.100 --> 51:31.460]  бонус которые вам дают меньше до мака вот таких я назвал как бы убивающий вот так так как еще раз
[51:31.460 --> 51:43.980]  так вот себе а тут вот возникает мысль да почему-то хочется действительно здесь по
[51:43.980 --> 51:50.700]  возрастанию дома то есть вот теперь вот этих строить по разрастанию до мака так ну давайте
[51:50.700 --> 51:57.220]  думать вот предположим что у нас в оптимальном ответе здесь встретилось два товарища но у
[51:57.220 --> 52:05.540]  которых сначала идет человек там с одним домом там допустим дитая потом идет представить там
[52:05.540 --> 52:14.980]  товарищ с меньшим домом вот тут мы начинали с там аж три возникает вопрос верно ли что если пусть
[52:14.980 --> 52:20.620]  у нас оказалось что дитая больше дыжит вот возникает вопрос можно ли верно ли что их
[52:20.620 --> 52:29.980]  можно посвапать и хуже не станет но давайте проверять потому что у нас тут дитая дыжитая
[52:29.980 --> 52:40.820]  ажитое что мы знаем мы знаем что аж 3-д это больше нуля то есть вот я так обещал знаем да ну вот
[52:40.820 --> 52:50.740]  и также мы еще знаем что а штрих минус д и плюс а и минус дж тоже больше нуля но по чем это да
[52:50.740 --> 53:01.540]  по чем это ревиально так да но еще мы даем самое главное что мы знаем на самом деле дает даже не
[53:01.540 --> 53:08.780]  интересно то что мы знаем аи-тое больше дитая и там соответственно д ажи-тое больше дж так но
[53:08.780 --> 53:17.180]  давайте смотреть хотим ну хотим мы на самом деле нам нужно показать что а штрих что наоборот если
[53:17.180 --> 53:22.300]  мы их поставим вот так то есть тут будет дж-тое тут будет дитая да то есть мы наоборот хотим что
[53:22.300 --> 53:31.460]  чтобы а и минус дж-тое больше нуля и еще мы хотим чтобы а штрих минус дж плюс ажи минус д и оказалось
[53:31.460 --> 53:40.140]  больше нуля но так ли это так ну действительно заметим что так как даже имеет то есть так как
[53:40.140 --> 53:46.060]  у нас аж 3 минус д и больше нуля то заменив д и на что-то меньше получим что-то больше ну а здесь
[53:46.060 --> 53:51.260]  действительно еще проще аж 3 минус д и больше нуля когда мы прибавляем мы тут что-то положительное
[53:51.260 --> 53:57.580]  так что действительно тогда отсюда следует что надо то есть если есть кто-то есть у нас
[53:57.580 --> 54:03.740]  идет больше там боя там меньше дамаг за большим дамагом то их можно посвапать но тогда если
[54:03.740 --> 54:09.540]  выполнить все свапы то получается что мы должны значит получайте всех товарищей отсортировать
[54:09.540 --> 54:16.780]  по возрастанию дамака ну ладно по неубыванию но вот ну легко там по нот то есть отсюда то есть
[54:16.780 --> 54:24.020]  получается мы доказали что если су оптимальный ответ существует то существует ответ в котором
[54:24.020 --> 54:30.500]  сначала идут все оживляющие монстры все в порядке возрастания дамака вот потом все нейтральные
[54:30.500 --> 54:40.100]  а потом в каком-то порядке все убывающие остается только понять как сортировать убывающих что-то
[54:40.100 --> 54:52.260]  так не а нейтрально их тоже их по убыванию дамака сортировать или как или по или по
[54:52.260 --> 55:06.900]  возрастанию или да ой все ли так нету нейтрально все равно конечно да дай не тогда с нейтральными
[55:06.900 --> 55:10.980]  у нас все по барабану да вопрос как бы вот у нас есть вот эти убивающие монстры
[55:10.980 --> 55:30.220]  да да ладно сейчас так парадить хорошо что мы хотим доказать давайте формулиров то есть
[55:30.220 --> 55:36.860]  вы утверждаете что надо доказать что мы должны сортировать по убыванию дамака да ну давайте
[55:36.860 --> 55:45.180]  попробуем так еще раз так вот давайте сделаем то же самое внимание внимание и так хорошо вот
[55:45.180 --> 55:54.140]  у нас есть два товарища и выяснилось что допустим у этого у нас тут д это да и значит этого дж аж и
[55:54.140 --> 56:02.780]  мы знаем что д и больше чем а и дж больше чем аж и чем еще знаем и неожиданно мы еще знаем что
[56:02.780 --> 56:11.180]  д и оказалось меньше чем меньше меньше да чем дж значит мы хотим из этого сделать вывод что
[56:11.180 --> 56:20.300]  их можно посвапать то есть мы хотим из этого вывести каким-то мистическим образом что оно
[56:20.300 --> 56:27.780]  еще мы знаем что до аж минус д и больше нуля и что самое главное мы знаем что аж минус д и плюс
[56:27.780 --> 56:38.820]  а и минус дж больше нуля и очень хочется из этого вывести что ну даже там аж минус дж больше нуля но
[56:38.820 --> 56:45.420]  это ладно даже неважно важно что аж минус дж плюс ажи минус а и больше нуля но по большому
[56:45.420 --> 56:52.700]  счету нам надо вот это вывести ну потому что понятно да нет это более сильные утверждения
[56:53.300 --> 57:02.700]  хотя а нет неправда нет это не одно и то же да потому что тут зависит от да сейчас не мне
[57:02.700 --> 57:08.900]  все это я зря стер извините извините извините извините аж минус дж больше нуля так ну хорошо
[57:08.900 --> 57:16.740]  ладно аж минус дж это на самом деле похоже на правду почему но по большому счету смотрите
[57:16.740 --> 57:22.220]  видите что мы тут здесь как-то куда-то опускаемся да стартуем с более низкой позиции чем аж вот
[57:22.220 --> 57:33.660]  это да поэтому первая да а второе но там второе скажи так по крайней мере не очевидно
[57:33.660 --> 57:43.820]  сейчас ну погодите давайте вот тут давайте тут внимательно подумаем может на самом деле очевидно
[57:43.820 --> 57:51.580]  вот ну тут на самом деле как повезет дальше в принципе вот это неравенство оно отличается
[57:51.580 --> 57:57.300]  конечно вот от этого только буквально тем что тут аито а тут ожито но действительно вполне может
[57:57.300 --> 58:03.180]  оказаться что аито и сильно больше чем ожито и может быть значит оно даст на самом деле и
[58:03.180 --> 58:10.980]  там как-то выручает хотя нет может но да может так оказаться что аито значительно больше ожито
[58:10.980 --> 58:22.020]  даже при том что дж больше чем да и так но с другой стороны давайте нам тут предлагают
[58:22.020 --> 58:30.580]  другое хорошо предлагается что допустим выяснилось допустим выяснилось тоже самое но неожиданно
[58:30.580 --> 58:37.900]  теперь нам предлагается делать это по убыванию аито то есть неожиданно выяснилось что аито
[58:37.900 --> 58:46.220]  так по убывания и ты да давайте да то есть предположим выяснилось что аито меньше чем ожито
[58:46.220 --> 58:52.980]  и тогда получается так и тогда в этом случае хочется свапать так ну давай смотреть что из
[58:52.980 --> 59:00.940]  этого тогда следует так но аж минус дж больше нуля дам уже выяснили что это правда так теперь
[59:00.940 --> 59:10.380]  нам хочется аж минус дж плюс ожи минус аи больше нуля так но здесь это действительно хорошо потому
[59:10.380 --> 59:18.020]  что это не нравится отличается этим токаритом но вот подставляя вместо аи ожи получается хорошо то
[59:18.020 --> 59:22.740]  есть отсюда следует что получается как это не странно то есть надо оказывается сортировать по
[59:22.740 --> 59:30.540]  убыванию ажички можно было кстати убедиться в этим другу и убедиться в этом и немножко другим
[59:30.540 --> 59:36.180]  способом на самом деле надо было бы можно было вот давайте если вот нарисовать вот эту вот красивую
[59:36.180 --> 59:46.980]  картинку да то можно смотрите вот мы тут стартовали с какого-то уровня аж и вот тут старта а тут
[59:46.980 --> 59:52.380]  финишировали на каком-то уровне там аж один да ответить такая ведь на самом деле мы теперь
[59:52.380 --> 59:56.900]  можем развернуть эту картинку и предполагать что наоборот а это дамаг а д это как бы
[59:56.900 --> 01:00:04.740]  радость то есть профит и тогда то есть получится то же самое у нас тут требование что действительно
[01:00:04.740 --> 01:00:11.140]  там то есть карбашки не должны нас падать больше нуля и получается что действительно симметричная
[01:00:11.140 --> 01:00:18.180]  то есть картинка получается такая симметричная вот то есть вот еще такое можно увидеть да просто
[01:00:18.180 --> 01:00:23.700]  вот такая вот есть красивая задача она иллюстрирует такой достаточно классический подход ну и здесь
[01:00:23.700 --> 01:00:27.860]  конечно можно еще проговорить да что у таких задач конкретно есть преимущество что да если вы
[01:00:27.860 --> 01:00:33.540]  там подумали что-то про сортировку то можно такую сортировку писать том там особенно в последние
[01:00:33.540 --> 01:00:39.220]  минуты контеста там действительно подгонять компараторы типа написал компаратор там послал
[01:00:39.220 --> 01:00:45.620]  так вася и хорошо давайте тут это вместо дешечку поставить ой ва 15 неплохо а давайте так давайте
[01:00:45.620 --> 01:00:53.100]  подсунь вот это ой что рантай мэрор 37 а это вообще не компаратор господи ну знаете там бывает
[01:00:53.100 --> 01:00:57.180]  проблема что если выяснили что компаратор он как бы там дает какой-то зацикл типа вася меньше петти
[01:00:57.180 --> 01:01:04.100]  петти меньше там коле коле меньше вася и проблема вот то что то там теоретически может быть рантай
[01:01:04.100 --> 01:01:10.700]  вот как же теоретически да но вот ну в общем случае конечно я бы то есть ну то есть я бы
[01:01:10.700 --> 01:01:16.100]  рекомендовал конечно стараться прежде чем такое писать доказывать но потому что так угадать
[01:01:16.100 --> 01:01:23.700]  иногда бывает очень сложно а доказательства том числе и способ придумать правильное ответство
[01:01:23.700 --> 01:01:30.340]  ответственно пуши так что помню на какой-то на какой-то опенка писали несколько лет назад вот
[01:01:30.340 --> 01:01:36.460]  было забавно да что там тоже надо было сортировать но иногда бы до следу казалось
[01:01:36.460 --> 01:01:40.820]  какой-то не тривиальный компаратор там кто-то пихал не запихал то есть я там сидел думал и
[01:01:40.820 --> 01:01:46.780]  висеть мне доказалось кто-то кто-то кто-то и студент восхищенно спрашивал тогда почему ты
[01:01:46.780 --> 01:01:53.620]  пишешь вот это ну просто нет вот у меня просто доказательства не сходилось а тут сошлось ну
[01:01:53.620 --> 01:01:59.300]  такая вот классическая но это не эта задача там конечно посильнее задача была вот я ее уже не
[01:01:59.300 --> 01:02:10.980]  помню но и неважно нет ну да но нам нужно что вот в этом если мы сюда стартуем не сдает его
[01:02:10.980 --> 01:02:19.020]  с дежитого то как бы то то на этом монстре мы не поднимем то есть мы пытаемся доказать что
[01:02:19.020 --> 01:02:24.660]  если их поменять местами то как бы мы не погибли ну то есть мы здесь то есть надо по-хорошему
[01:02:24.660 --> 01:02:28.780]  доказывать что мы и в других местах не поднимем но это и так очевидно потому что как бы
[01:02:28.820 --> 01:02:34.060]  те кто был дальше у них и не меняя то был до этого ничего не меняется а те кто после
[01:02:34.060 --> 01:02:37.580]  тоже ничего не меняется что того что мы их по сваппаем стартовая позиция для Ash Birds
[01:02:37.580 --> 01:02:51.700]  уже не меняется формально вы должны были это сказать потому что по сути мы доказали
[01:02:51.700 --> 01:02:56.860]  следов defense и то где мы доказали следующие мы доказали что если существует оптимальные
[01:02:56.860 --> 01:03:03.140]  оптимальное какое хорошее решение то существует хорошее решение в котором значит сначала идут
[01:03:03.140 --> 01:03:10.380]  возраздающие монстры отсортировали отсортированные по дамаку потом идут монстры значит у которых
[01:03:10.380 --> 01:03:17.500]  дамак равен в этом премии и потом идут убивающие монстры и отсортированные по убыванию премии то
[01:03:17.500 --> 01:03:23.180]  есть отсюда следует решение задачи то есть сортируем монстров там вот за инлоген вот по
[01:03:23.180 --> 01:03:28.820]  вышеуказанному компаратору а потом что самое обязательно делаем надо пробежаться по массиву и
[01:03:28.820 --> 01:03:33.260]  убедиться что мы не умерли то есть если мы убедились что не умерли значит мы выводим
[01:03:33.260 --> 01:03:42.900]  ответ если нет значит мы с чистой совестью выводим там ноу солюшн ну потому для того вот именно
[01:03:42.900 --> 01:03:47.700]  поэтому что у нас логика такая чтобы доказали что если существует хоть какое-то решение то
[01:03:47.700 --> 01:04:03.780]  существует решение вот вот такого вида но если это что не значит ну да но
[01:04:03.780 --> 01:04:11.780]  а как нет смысла как что бы доказали ну как бы мы доказали что если работе есть
[01:04:11.780 --> 01:04:18.740]  нет я не знаю если сложно понять чем бага потому что тут как бы то есть просто как
[01:04:18.740 --> 01:04:26.180]  казалось одного от логики есть такое что допустим мы доказали что если а то б да тогда если выяснилось
[01:04:26.180 --> 01:04:42.980]  что небе то это автоматически влетелся с собой не а да нет чего и что но если она если бы уже
[01:04:42.980 --> 01:04:52.460]  не вернулся значит но да нет просто но да нет в какой нет в какой нет пародии не нет нет тут
[01:04:52.460 --> 01:04:57.700]  тут сейчас хочется разобраться с этой логически заковыкли потому что без нее там сложно будет нет
[01:04:57.700 --> 01:05:03.860]  просто при при чем тот самый то нет если бы ну да то есть не данном случае как бы мы вывели что
[01:05:03.860 --> 01:05:08.860]  если существует какое-то решение то вот это тоже решение так что поэтому если отсюда что если это
[01:05:08.860 --> 01:05:18.460]  не решение значит то было тоже не решение да тут вот да так что такая логичность так но да так
[01:05:18.460 --> 01:05:35.300]  что да что у вас там от логи было кстати ну ничего себе ничего не было 16 ну как это господи вы
[01:05:35.300 --> 01:05:43.700]  же познакомились это из штриха до штрихов шейфера даже у нас стоит да вот они да вот они операции
[01:05:43.700 --> 01:05:49.220]  мы мечты да ой но ничего вот будет когда вы будете сексиом все выводить вот это шикарно бы это
[01:05:49.220 --> 01:06:01.620]  сам билет о это вам понравится я надеюсь вот но хорошо ладно так ну ладно как-то не дам мало
[01:06:01.620 --> 01:06:08.980]  кто помнит но начали мы вообще задача поиски количество инверсий в массиве нет но это нет
[01:06:08.980 --> 01:06:13.100]  просто это надо обсудить но потом как бы мы стали обсуждать про свапы я вспомнил про эту задачу но
[01:06:13.200 --> 01:06:19.260]  это очень хорошо что мы ее о trick да это вот подход действительно важный так что надо будет вам
[01:06:19.260 --> 01:06:26.620]  что-нибудь такое дать вот но ладно давайте возвращаемся то есть возвращаемся из
[01:06:26.620 --> 01:06:31.480]  ответвления да это что-то из цикла давайте вот давайте пр übrig flattering дальше давайте на
[01:06:31.480 --> 01:06:35.540]  этом здании посмотрим вот это окно давайте так смотрим в окно ой там вотunder ажи ой
[01:06:35.540 --> 01:06:40.900]  смотрите separate этого окна там замечательный садик давайте посетим этот садик так вот
[01:06:40.900 --> 01:07:00.980]  Возвращаемся из садика, смотрим в окно, точнее на окно, да, как-то так немножко получилось, но здорово стоит как-то интереснее, чем это тупо, это вот идти вот таким вот образом по там вот фиксированной вот дорожке вот этой вот нарисованной, вот, соответственно.
[01:07:10.900 --> 01:07:40.900]  Ну вот, значит, смотрите, как найти все это количество таких инвекций? Вот, ну, найти их можно, но на самом деле, можно, конечно, там всегда привезти какого-нибудь друга, которого зовут Фервик, или деревоотресков еще какой-нибудь, или АВЛ, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну, просто деревоотресков, ну
[01:07:40.900 --> 01:07:52.120]  просто деревоотреска там еще сжатия координат какой-то придется писать там, ну, в общем,
[01:07:52.120 --> 01:08:00.160]  но вот, но мы все это не знаем, что это такое, поэтому как бы просто в данном случае есть более простой мета,
[01:08:00.160 --> 01:08:04.000]  На самом деле мы отсортируем этот массив с сортировкой
[01:08:04.000 --> 01:08:05.000]  слияния.
[01:08:05.000 --> 01:08:06.000]  Вот.
[01:08:06.000 --> 01:08:11.920]  Но просто в чем у него будет заключаться фишка.
[01:08:11.920 --> 01:08:14.960]  Дело в том, что разобьем массив на две части.
[01:08:14.960 --> 01:08:17.600]  Ну, допустим, вот на такие.
[01:08:17.600 --> 01:08:20.280]  Тогда у нас, смотрите, есть три типа инверсий.
[01:08:20.280 --> 01:08:23.080]  Есть инверсии, которые находятся целиком с этой
[01:08:23.080 --> 01:08:24.080]  стороны.
[01:08:24.080 --> 01:08:26.040]  Ну, то есть вот 5.2, например.
[01:08:26.040 --> 01:08:28.440]  Есть инверсии, которые находятся целиком справа.
[01:08:28.440 --> 01:08:30.320]  Ну, тогда, скажем, 11.3.
[01:08:30.320 --> 01:08:33.560]  А есть инверсии, в которых один элемент находится
[01:08:33.560 --> 01:08:38.680]  здесь, а второй здесь.
[01:08:38.680 --> 01:08:41.680]  Так что вот такая вот красота получается.
[01:08:41.680 --> 01:08:42.680]  Вот.
[01:08:42.680 --> 01:08:43.680]  Что же получается?
[01:08:43.680 --> 01:08:44.680]  Получается примерно следующее.
[01:08:44.680 --> 01:08:53.080]  То есть, ну, то идея такая, что давайте первый и второй
[01:08:53.080 --> 01:08:54.800]  тип мы найдем рекурсивно.
[01:08:54.800 --> 01:09:01.720]  А для третьего типа все очень просто.
[01:09:01.720 --> 01:09:04.280]  На самом деле, просто для каждого элемента слева
[01:09:04.280 --> 01:09:07.920]  нужно понять, скажем, сколько существует, сколько в правом
[01:09:07.920 --> 01:09:09.440]  массиве элементов меньше его.
[01:09:09.440 --> 01:09:11.520]  Как же это сделать?
[01:09:11.520 --> 01:09:12.520]  Да очень просто.
[01:09:12.520 --> 01:09:13.520]  Вот.
[01:09:13.520 --> 01:09:16.200]  Они у нас в рекурсии уже отсортированы.
[01:09:16.200 --> 01:09:19.320]  Отсортированы здесь, отсортированы здесь.
[01:09:19.320 --> 01:09:20.800]  И тогда, оказываю, нот.
[01:09:20.800 --> 01:09:23.080]  И тогда вот идея оказывается очень простой.
[01:09:23.640 --> 01:09:25.920]  Мы начинаем сливать эти два массива.
[01:09:25.920 --> 01:09:28.480]  И вот видим, например, так, тут двоечки.
[01:09:28.480 --> 01:09:30.480]  Ну, давайте скажем, что сначала у нас будет более
[01:09:30.480 --> 01:09:31.480]  левая двоечка.
[01:09:31.480 --> 01:09:34.480]  И идем на четверочку.
[01:09:34.480 --> 01:09:35.480]  Так.
[01:09:35.480 --> 01:09:38.160]  Но что мы теперь видим?
[01:09:38.160 --> 01:09:41.320]  То есть видим у нас четверочка больше двоечки, поэтому
[01:09:41.320 --> 01:09:44.920]  записываем двоечку, записываем троечку и остановились на
[01:09:44.920 --> 01:09:45.920]  пятерочку.
[01:09:45.920 --> 01:09:48.560]  Но тогда из того, что указатель сейчас указывает на пятерочку,
[01:09:48.560 --> 01:09:50.960]  вот мы только сейчас двигаем четверочку, мы понимаем,
[01:09:51.000 --> 01:09:54.020]  что у нас в правом массиве было ровно два элемента
[01:09:54.020 --> 01:09:55.680]  меньше четверочки.
[01:09:55.680 --> 01:09:58.120]  Поэтому к ответу мы в этом месте два и прибавляем.
[01:09:58.120 --> 01:10:00.520]  Понимаете, да?
[01:10:00.520 --> 01:10:01.520]  Вот.
[01:10:01.520 --> 01:10:04.880]  Поэтому прибавляем, делаем там плюс два к ответу, а
[01:10:04.880 --> 01:10:08.240]  тут мы сделали плюс ноль к ответу и, значит, сдвигаем,
[01:10:08.240 --> 01:10:09.480]  так, пять-пять.
[01:10:09.480 --> 01:10:12.920]  Но в пятерке, смотрите, тоже мы видим, пять меньше
[01:10:12.920 --> 01:10:16.880]  либо равно пяти, поэтому здесь тоже плюс два к ответу,
[01:10:16.880 --> 01:10:18.160]  два этих элемента меньше.
[01:10:18.160 --> 01:10:19.160]  Так, ну здесь сдвигаем.
[01:10:19.160 --> 01:10:25.640]  так здесь этот указатель сдвигается там пишем 5 пишем 6 там смотрим 11 8 меньше 11 поэтому здесь
[01:10:25.640 --> 01:10:32.920]  к ответу плюс 4 вот и получается что инверсии третьего типа у нас 8 штук то есть получается
[01:10:32.920 --> 01:10:39.160]  видите то есть мы просто взяли мерш-сорт и там асимпатически бесплатно на него навесили маленькое
[01:10:39.160 --> 01:10:44.960]  дополнительное действие и нашли количество инверсий за n log m но то есть вот тоже это еще
[01:10:44.960 --> 01:10:58.800]  один такой вот классический достаточно нет который тоже хотелось бы конечно знать так
[01:10:58.800 --> 01:11:13.480]  ну что если тут какие-то вопросы что где в двойке плюс на четвертой плюс два нет это эти плюс двойки
[01:11:13.480 --> 01:11:19.240]  они не под двойкой а над пятеркой почему над пятеркой потому что в тот момент когда мы двигали
[01:11:19.240 --> 01:11:24.440]  указатель второй указатель указывал на вот эту пятерку это означает что слева от него были два
[01:11:24.440 --> 01:11:30.520]  элемента которые меньше вот то есть нет это вот это плюс два это над пятеркой к вот этим элементам
[01:11:30.520 --> 01:11:46.240]  это имеет отношение так ну хорошо если тут так ну что есть ли еще вопросы так ну что ж тогда так
[01:11:46.240 --> 01:12:04.320]  дозикает вопрос так что у нас дальше так дальше у нас куча так нет пока нет а ну ладно нет ладно куда
[01:12:04.320 --> 01:12:09.520]  куча это да да ну куча это тоже метод но просто скажем так просто как думаете имеет смысл сделать
[01:12:09.520 --> 01:12:18.760]  нет вот нету я проидываю что до формально до конца первой пары осталось ну там 7 минут но
[01:12:18.760 --> 01:12:23.160]  в принципе мы тут вольны можем сделать можем сделать перерыв там чуть раньше а можем сделать
[01:12:23.160 --> 01:12:34.680]  перерыв чуть позже так разные варианты хорошо кто-то тоже взял перерыв чуть раньше так кто-то
[01:12:34.680 --> 01:12:43.880]  тоже взял перерыв чуть позже да но я не знаю нет визуально ручить больше да чуть но больше ладно
[01:12:43.880 --> 01:12:56.200]  куча так куча хорошо ну ничего страшного господи все равно отдохнем так значит смотрите так казалось
[01:12:56.200 --> 01:13:02.080]  бы причем тут сортировка но действительно у нас иногда высекает такое желание что то есть у нас
[01:13:02.080 --> 01:13:07.320]  вот возникало желание например в инсекшен сорте в селекшен сорте доставать минимум да
[01:13:07.320 --> 01:13:15.760]  очень но точно как хотелось минимум или максимум и возникала конечно мысль а нельзя ли как-то
[01:13:15.760 --> 01:13:22.680]  организовать данные организовать данные да таким образом чтобы доставать этот максимум было
[01:13:22.680 --> 01:13:33.120]  чуть чуть побыстрее очень сильно они как это у нас водится за линию вот как же это у нас это сделать
[01:13:33.120 --> 01:13:42.960]  сделать очень просто ну как просто вот и методы разные но базовый метод так такой это величество
[01:13:42.960 --> 01:13:51.080]  двоичная куча так а ну-ка давайте сразу тест поднимите руки кто хотя бы раз в жизни реализовывал
[01:13:51.080 --> 01:14:00.200]  это как своими руками нет не смысл там использовал приоритет и у вас мысли вот писал своими руками
[01:14:00.200 --> 01:14:09.160]  да а понятно примерно примерно половина господи си плюс плюс возвращает число вот я не знаю вот
[01:14:09.160 --> 01:14:16.160]  я в ваши годы знаете я на паскале писал а там и стояли нету там кусор надо писать самостоятельно
[01:14:16.160 --> 01:14:25.520]  там вот это надо было писать самостоятельно вот ой кошмар так что мне приходилось это все сидеть и
[01:14:25.520 --> 01:14:35.960]  писать то есть я не знаю да потом дома паниковали где я нет ну да ладно расскажу эту байку потому что
[01:14:35.960 --> 01:14:42.880]  тоже потому что как я люблю эту байку ситуация была такая то есть приспев на дам да я участвовал
[01:14:42.880 --> 01:14:49.680]  в такие стародавние времена когда паскаль был разрешен а некоторые туристы звать там
[01:14:49.680 --> 01:14:54.960]  звать умели это там выигрывать три международа подряд на паскале на самом деле это буквально
[01:14:54.960 --> 01:15:03.080]  вот но вот нет то есть это но это как бы реально кинать короткий тогда выигрывал да вот значит
[01:15:03.080 --> 01:15:10.720]  соответственно вот и вот и вот и поэтому часто преимущество на олимпиаде давали задачи в которых
[01:15:11.200 --> 01:15:16.800]  там и стоять все плюс плюс и преимущество не дает вот то есть ну то сейчас сейчас уже постепенно на
[01:15:16.800 --> 01:15:23.920]  это забили но вот но все времена вот было так но раз жизни на московских сборах значит далее
[01:15:23.920 --> 01:15:29.760]  там что-то какой-то лекцию на ст и потом собственно какой-то контест на нее вот но у меня была
[01:15:29.760 --> 01:15:35.480]  проблема да я не как бы не владею все плюс плюсом поэтому я там выбрал какую-то одну задачу ну там
[01:15:35.640 --> 01:15:41.960]  и радствую весь контест порешал но вот она не решила она не дарит там не дарешалась поэтому
[01:15:41.960 --> 01:15:46.440]  после контеста я еще там чтобы некоторое время сидел там что-то дебаггл дебаггл что-то смотрели
[01:15:46.440 --> 01:15:52.040]  какие-то тесты очень до дебаггл приезжаю домой дома все в панике потому что дело в том что
[01:15:52.040 --> 01:15:57.760]  просто текущие результаты каждых контестов они как бы были опубликованы и дома за ними следили
[01:15:57.760 --> 01:16:03.840]  поэтому что видят дома начинается контест начинаем минуты с 10 там все начинают активно
[01:16:03.840 --> 01:16:10.520]  задавать задача а меня нету и так до конца контеста и нету вечера в нужное время ребенок
[01:16:10.520 --> 01:16:16.720]  не явился что случилось но вот да ответ называется далее стоит дали контест на
[01:16:16.720 --> 01:16:25.560]  истрель да вот да сейчас да сейчас такая ситуация невозможно в принципе но часто да ну сейчас
[01:16:25.560 --> 01:16:32.280]  вообще все еще хуже на международной 5 по информатике уже запретили даже джаву да то все там теперь
[01:16:32.280 --> 01:16:40.880]  единственно разрешенный язык c++ все ладно так и быть можно си все то есть но там они это просто
[01:16:40.880 --> 01:16:46.560]  шерем то по каким-то там подно там они по техническим уже причинам сделали они по популярности языка но
[01:16:46.560 --> 01:16:50.480]  вот соответственно так что все так что как бы хотите побеждать в школьных олимпиадах знаете
[01:16:50.480 --> 01:16:59.920]  c++ вот хотите побеждать в судейских олимпиадах ну ладно так и быть можете учить джаву вот ну ладно
[01:16:59.920 --> 01:17:04.320]  формально как я уже говорил можно учить и плюс плюс джаву и питон гарантируется что на двух
[01:17:04.320 --> 01:17:13.040]  третях из этих языков любую задачу сдать можно да мы помним вот да ладно все байку рассказал
[01:17:13.040 --> 01:17:17.440]  ладно беремся но так вот но просто это приводило к тому что вот подобные в роды вещи приходилось
[01:17:17.440 --> 01:17:24.280]  писать сами но в общем-то это не сильно сложно делается и так что вообще такое двоичная куча так
[01:17:24.280 --> 01:17:28.880]  что пока вот кто не воспомнил собственно тут уже наверное воспомнил пока тут рассказывал там
[01:17:28.880 --> 01:17:34.360]  какой-то байку что что такое двоичная куча это когда мы располагаем наши n элементов в каком-то
[01:17:34.360 --> 01:17:40.480]  вот такого рода виде но например вот если мы говорим о куче на максимум вот в данном случае
[01:17:40.480 --> 01:17:45.800]  изображать куча на максимум да то есть мы рисуем двоичное дерево максимально упиханное по глубине
[01:17:45.800 --> 01:17:52.000]  выражаясь олимпиадным языком то есть максимально право ты идеально то есть сделали вот во-первых
[01:17:52.000 --> 01:17:56.880]  минимальное число количество уровней это раз во-вторых мы хотим чтобы на предыдущем уровне все
[01:17:56.880 --> 01:18:02.400]  было заполнено а листы тут заполняли слева направо то есть заполняли короче так-так-так-пам и так
[01:18:02.400 --> 01:18:08.400]  далее но при этом мы не просто хотим заполнять так алименты мы еще очень хотим чтобы каждый
[01:18:08.400 --> 01:18:17.360]  элемент был больше своих детей ну и соответственно меньше родителей то есть вот такая структура данных
[01:18:17.360 --> 01:18:24.800]  вот очень что-то уметь организовывать элементы так то есть понятно это не совсем сортировка то
[01:18:24.820 --> 01:18:28.280]  есть как бы неверно что элементы из stronger вот так число вып 건�소리 будет
[01:18:28.280 --> 01:18:33.760]  сортиров н потому что там должен ли быть этого или этот элемент больше этого да должен ли
[01:18:33.760 --> 01:18:39.240]  быть этот элемент больше этого да должен ли этот элемент быть больше этого яlaughs
[01:18:39.240 --> 01:18:45.740]  то есть они тут но вот вот девятка пожалуйста вполне себе меньше десятки и что это не волнует и
[01:18:45.740 --> 01:18:56.820]  и нас тоже вот значит чем нам нравится такая куча но тем что очень удобно хранить ну как
[01:18:56.820 --> 01:19:02.660]  ее хранить ну конечно опытные люди конечно скажут ну все нормально на указателях что почему бы
[01:19:02.660 --> 01:19:07.660]  в общем-то и нет и в общем-то многие кучи мы будем действительно хранить на указателях ну или там
[01:19:07.660 --> 01:19:12.500]  на каких-нибудь их заменителях там естественно вот это все но на самом деле конкретно в данном
[01:19:12.500 --> 01:19:19.820]  случае в этом нет необходимости как жалко что на этой доске нельзя маркером писать нет уже
[01:19:19.820 --> 01:19:30.060]  просто нет ну как сказать да но проблема да проблема в том что стереть нельзя да писать
[01:19:30.060 --> 01:19:36.420]  можно стереть нельзя да вот но в данном случае фишка в том что куча что такое вот что в данном
[01:19:36.420 --> 01:19:42.700]  случае элементы можно запихнуть массив так что на них очень удобно смотреть а именно давайте
[01:19:42.700 --> 01:19:47.420]  их просто пихать так что это будет первый то есть давайте у нас если мы сделаем вот это все в
[01:19:47.420 --> 01:19:57.420]  один индексации да то у нас тогда это будет 1 2 3 4 5 и 6 7 8 9 10 так ладно раз тут нельзя давайте
[01:19:57.420 --> 01:20:02.740]  сейчас это так ладно проверим может дайте как ведь ты нарисуешь что-то на доске потом выяснится
[01:20:02.740 --> 01:20:13.420]  что ты-то уже давно сделал нет не сделал хорошо вот значит будем рисовать на доске там 11 9 там
[01:20:13.420 --> 01:20:19.500]  соответственно 10 5 6 8 а тоже в какой-то момент презентации заканчивается потому что это обнаружилось
[01:20:19.500 --> 01:20:27.540]  что без презентации рассказывать будет медленнее и как следствие понятие вот вот вот допустим куча
[01:20:27.540 --> 01:20:34.020]  у нас может выглядеть примерно вот таким вот образом но вот оказывается давайте попробуем
[01:20:34.020 --> 01:20:39.700]  нарисовать индексы вот утверждается надо просто положить эти элементы в массив с индексами вот
[01:20:39.700 --> 01:20:45.900]  такими как это называется в этом в этом месте удобно быть пасколистом и как бы но ты как
[01:20:45.900 --> 01:20:52.260]  раз радоваться что очень удобно что элемента надо с единиц сохранить а не с нуля вот но на
[01:20:52.260 --> 01:20:56.620]  самом деле ладно языке си конечно у вас тоже есть там простые технологии как сделать массив в
[01:20:56.620 --> 01:21:09.100]  котором индексация будет с 57 до 179 делали когда-нибудь нет знаете как нет то идея очень
[01:21:09.100 --> 01:21:16.300]  простая если вы вот смотрите вот паскали если там можно завести там допустим массив там пишется
[01:21:16.300 --> 01:21:26.300]  так там а рэй там 57 пум пум 179 там там ов там лонгинт но лонгинт это аналог и на все плюс плюс
[01:21:26.300 --> 01:21:31.780]  допустим да то есть это означает что вы к этому массиву обращаетесь при чейка минус 57 по 179
[01:21:31.780 --> 01:21:40.420]  обратите по 56 будет вам рантай да значит смотрите как сделать то же самое всях сейчас это делается
[01:21:40.420 --> 01:21:50.060]  предельно просто смотрите значит все всях делается так значит пишем значит инт значит
[01:21:50.060 --> 01:22:02.820]  уйти от там 179 минус 57 плюс 1 вот это мы завели массив вот такого размера да а теперь пишете
[01:22:03.300 --> 01:22:15.660]  звездочка а равно что уже догадались что я сейчас напишу ниже я почекаю а минус 57 все но зато
[01:22:15.660 --> 01:22:22.620]  теперь вы да вы теперь в паре валидно можете писать а там я не знаю 103 и обращаться будет ровно
[01:22:22.620 --> 01:22:23.180]  да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да
[01:22:52.620 --> 01:23:16.440] oyuад есть обратишься не по если тmac будет не о 57 нетger но он там в знак вы дотам складывается адекват pastry и проблема не ну как сказать нашу так что поэтому все плюс плюсе бывает пишут а минус 2 ela и все нормально а ещё пишут минус 2 а это тоже работа такт лад은 до это я конечно да это я коншу это полю сgmentки м机 호ар microbiota Youth having a financial
[01:23:16.440 --> 01:23:23.160]  это в полю шутки мещерина который должен должен вам то все рассказывать но это я так проанонсировал
[01:23:23.160 --> 01:23:32.440]  так пройдите не расслышать ребят потише пожалуйста там был вопрос я не слышать
[01:23:32.440 --> 01:23:47.240]  да ну как это с плюс плюс как бы как бы вы сами пишите полностью свой ядерный реактор и только
[01:23:47.240 --> 01:23:53.600]  вы отвечаете за то что он не рванет вот но в принципе да вот как бы такие возможности есть
[01:23:53.600 --> 01:23:59.600]  но ладно все это это конечно да не немножко дай так как бы будет у вас все гиси плюс плюс как бы
[01:23:59.600 --> 01:24:04.480]  в какой-то момент будете обсуждать указатели или вы уже начали их обсуждать но вот начнете их
[01:24:04.480 --> 01:24:08.280]  обсуждать собственно там понятно мещерин вам все это подробно расскажет естественно
[01:24:08.280 --> 01:24:20.560]  ну вот это вы тоже подробно все вернемся к делу ладно значит вы говорили о массиве из один
[01:24:20.560 --> 01:24:28.560]  индексации значит смотрите но значит что какой у нас почему мы хотим хранить именно так а потому
[01:24:28.560 --> 01:24:34.800]  что очень удобно оказывается что это элемент у этого элемента оказывается дети в точности 2 и и
[01:24:34.800 --> 01:24:46.680]  2 и плюс один очень удобно а родитель и пополам 2 круглёный вниз естественно то есть это очень
[01:24:46.680 --> 01:24:51.480]  то никаких указателей не надо для каждого элемента вы тупо знаете где у него там родители ребенок
[01:24:51.480 --> 01:24:59.640]  там вот это вот все бла бла бла вот так ну и заодно мы еще знаем где у нас максимум есть у нас
[01:24:59.640 --> 01:25:09.800]  куча на максимум максимум в корне это мы точно знаем так но возникает вопрос зачем нам ну как
[01:25:09.800 --> 01:25:14.600]  всегда когда у нас возникает структура данных то сказать два вопроса как ее построить и зачем
[01:25:14.600 --> 01:25:20.760]  оно вообще нам понадобилось то есть зачем нам нужна эта сферическая куча вакууме
[01:25:20.760 --> 01:25:35.160]  значит сферическая куча вакууме у нас получается такая ну вот значит сферическая куча вакууме
[01:25:35.160 --> 01:25:43.160]  получается такая ну пока но вот так ну здесь ладно тут это я уже сказал она пойдем дальше
[01:25:43.160 --> 01:25:52.160]  так но в принципе оказывается куча оказывается там обладать таким свойством что если меняется
[01:25:52.160 --> 01:25:58.600]  один из элементов то конечно свойство нарушается но его очень легко поправить потому что есть у
[01:25:58.600 --> 01:26:04.800]  нас исправился там какой-то один элемент где-то в середине то если он увеличился то можно вызвать
[01:26:04.800 --> 01:26:11.200]  функцию севта в которой будет его подымать и а если он уменьшился то наоборот всегда как это
[01:26:11.200 --> 01:26:23.200]  будет выглядеть вот но например но например вот функция всегда вот она да то есть оказывается
[01:26:23.200 --> 01:26:30.680]  что действительно допустим у нас какой-то элемент вот где-то середине кучи взял и уменьшился но
[01:26:30.880 --> 01:26:36.520]  это вопрос насколько потому что если он впервые здесь 9 уменьшился на 8 с половиной то ничего делать
[01:26:36.520 --> 01:26:41.840]  не надо правда потому что этот элемент все еще остался но так или иначе остался меньше родителя
[01:26:41.840 --> 01:26:50.300]  но он все еще остался больше детей поэтому еще делать не надо но что делать но что делать если он
[01:26:50.300 --> 01:26:57.120]  оказался меньше своих детей но тогда идея простая то есть давайте вот тут что-нибудь там скажем что
[01:26:57.120 --> 01:27:05.440]  допустим у нас тут оказался вместо девятки появилась допустим появился петачок и у меня
[01:27:05.440 --> 01:27:12.240]  есть дети четверочка и восьмерчик и вот оказалось что я меньше какого-то ребенка чем не делать
[01:27:12.240 --> 01:27:17.680]  но надо выбрать максимального ребеночка да допустим если нет шестерчика то все равно выберу
[01:27:17.680 --> 01:27:23.040]  восьмерчику и по сваппаю тогда смотрите что то есть видите тогда этот элемент все еще остается
[01:27:23.040 --> 01:27:27.600]  единственным у которого могут быть проблемы ну что восьмерчика очевидно все еще меньше родителя
[01:27:27.600 --> 01:27:34.560]  но правда у петачка теперь есть дети которые тоже могут казаться больше например это могут
[01:27:34.560 --> 01:27:39.840]  дети вполне себе быть там 7 и 4 кстати до упорядоченность не обязательно но делаем
[01:27:39.840 --> 01:27:46.320]  тоже самое тут у нас петачка отправляем вниз семерчику повышаем но и здесь наконец и в
[01:27:46.320 --> 01:27:51.440]  какой-то момент обнаружу что что либо детей нет либо все дети меньше там может быть что остался
[01:27:51.440 --> 01:27:58.200]  только один ребенок он меньше и в этом случае тогда мы говорим что ура все в порядке то что у нас
[01:27:58.200 --> 01:28:02.360]  потому что это был единственный элемент каждый момент времени с которой могли быть проблемы и
[01:28:02.360 --> 01:28:11.200]  проблем больше нет вот то есть вот такая вот операция сифт да он работает она за какое время
[01:28:11.200 --> 01:28:21.720]  ну за высоту дерева за высоту кучи высота кучи логарифом так чтобы это хорошо отлично то есть
[01:28:21.720 --> 01:28:29.600]  оказывается и построив кучу любой элемент можно за логарифом уменьшить но давайте сразу скажем
[01:28:29.600 --> 01:28:37.560]  что а можно и увеличить то есть наоборот но тогда просто если мы там например жила была девяточка
[01:28:37.560 --> 01:28:45.280]  вместо нее стало 13 а был у нее родитель 10 то ну здесь делаем тоже самое но вверх да то есть
[01:28:45.280 --> 01:28:51.480]  как бы теперь тут пишем 10 тут 13 смотрим тут родителя там тут родитель 12 ну значит тут
[01:28:51.480 --> 01:29:00.320]  13 тут 12 то есть свапаем ну и так далее понятно так понятно или на подробнее расписывать вот это
[01:29:00.320 --> 01:29:06.800]  операция сифта я просто тут опасаюсь немножко что как бы операция сифта тут немножко позже
[01:29:06.800 --> 01:29:16.640]  идет но пока мы видим что по коду на самом деле тут ничего сложного нет вот да ну здесь вот
[01:29:16.640 --> 01:29:26.440]  аккуратненько да то есть там но то есть код можно писать вот таким вот внезапно рекурсивным
[01:29:26.440 --> 01:29:33.600]  образом да можно реку до данного случая сказал даже нужно не рекурсии но просто знаете иногда
[01:29:33.600 --> 01:29:40.760]  рекурсивная логика помогает потому что логика здесь такая смотрим на детей находим максимально
[01:29:40.760 --> 01:29:45.600]  максимум из элементов и того left и right но здесь написано плюс один плюс два потому что здесь
[01:29:45.600 --> 01:29:53.840]  все-таки в ноль индексации куча вот но выясняется что если оказывается этот наибольший элемент не
[01:29:53.840 --> 01:30:01.440]  мы только что надо сделать надо посвапаться с этим ребенком и делать и собственно пропить
[01:30:01.600 --> 01:30:09.360]  вниз уже его ну то есть можно в принципе так тоже мысли понимаете да вот то есть конечно же это
[01:30:09.360 --> 01:30:15.400]  не оптимально вот но здесь еще кажется вот так а вот кто стал с такой книжкой и с книжкой как
[01:30:15.400 --> 01:30:19.320]  книжка елена владимирна андреевы программируй мне так просто программируй мне так сложно
[01:30:19.320 --> 01:30:28.240]  да часто но нет ну собственно нет величая кишка просто по-моему в ней просто подсмотрят эти вот
[01:30:28.240 --> 01:30:37.800]  такая иллюстрация почему вот так писать не надо смотрите ситуация представьте себе представьте
[01:30:37.800 --> 01:30:46.360]  себе значит вы живете в городе в котором все соединены домашние телефоны вот и но вот и вы
[01:30:46.360 --> 01:30:51.400]  значит и у вас есть какая-то цепочка то есть скажем вот у вас есть телефон друга и вы знаете
[01:30:51.400 --> 01:30:56.040]  что друга есть телефон следующего друга и так далее но до какого-то момента то есть у какого-то
[01:30:56.040 --> 01:31:01.920]  очередного товарища следующего телефона нет вот ну вы знали как-то откуда-то знали что там
[01:31:01.920 --> 01:31:07.200]  с небес по факсу вам прислали информацию что вот такая ситуация имеет место быть и вам захотелось
[01:31:07.200 --> 01:31:18.440]  узнать а какова длина этой цепочки значит как это сделать значит метод цикла вайл вы берете
[01:31:18.440 --> 01:31:30.000]  бумажку берете карандаш звоните своему другу слушай а вот я следующие есть есть так хорошо
[01:31:30.000 --> 01:31:37.640]  значит мы там значит пишем единичку а может подсказать номер этого следующего могу но могу
[01:31:37.640 --> 01:31:45.640]  значит вы записывайте номер на бумажке значит спасибо но спасибо давай пока кладите трубочку
[01:31:45.640 --> 01:31:54.760]  значит набирайте этот номер вот но вот алио привет слушай а ты там последний списки он нет
[01:31:54.760 --> 01:32:02.080]  она так вы быстренько во первую стирайте единичку пишете двоечку есть рейте старый номер ага
[01:32:02.080 --> 01:32:08.760]  слушайте а этого санат следующий будет слушать у тебя но да да да и следующего ну пожалуйста и
[01:32:08.760 --> 01:32:13.240]  так далее ну так прогуливаетесь по списку и вы знаете с помощью одной бумажки собственно
[01:32:13.240 --> 01:32:17.440]  спокойненько выясняете длину списка а если вы записывали не стирали старые
[01:32:17.440 --> 01:32:20.920]  номера вы еще и там список номеров получили но это уже мелче но так при
[01:32:20.920 --> 01:32:26.800]  списке за от единицы бумажки в принципе и ноты собственно вы все сделаете теперь
[01:32:26.800 --> 01:32:36.960]  рекурсивный вариант да а леа лася я слушать а у тебя следующие списки есть есть
[01:32:36.960 --> 01:32:44.360]  а сколько у тебя там а сейчас значит он берет мобильник и начинает звонить то
[01:32:44.360 --> 01:32:48.200]  есть да вы да вы конечно действие конкретно вы конечно действие совершили
[01:32:48.200 --> 01:32:52.880]  меньше но на телефонной станции мог случиться врал если я больше не на
[01:32:52.880 --> 01:32:57.040]  списка больше чего-нибудь соответственно то есть да то есть
[01:32:57.040 --> 01:33:00.120]  обрететесь как бы получается из-за того что вам тут захотелось тот поиграть в
[01:33:00.120 --> 01:33:04.240]  рекурсию на самом деле называть вас там по там пол вы там отвлекли полгорода от
[01:33:04.240 --> 01:33:08.240]  важных дел что вы видите полгорода не просто отвлекли именно висит то есть
[01:33:08.240 --> 01:33:12.120]  одно дело ватник на секундочку да а другое дело тут вот полгорода чем самое
[01:33:12.120 --> 01:33:15.920]  страшное что у каждого заметьте что если так вы еще делали за от единицы
[01:33:15.920 --> 01:33:21.300]  бумажки то-то у каждого теперь бумажка есть и каждый будет что-то записывать об
[01:33:21.300 --> 01:33:26.520]  том возвращаться как бы и вам что-то сообщать вот потому что а действительно
[01:33:26.520 --> 01:33:28.920]  вообще просто замечательная иллюстрация мне вот очень понравилось
[01:33:28.920 --> 01:33:32.120]  в чем действительно она хорошо или строить что помните когда вызываете рекурсию на
[01:33:32.120 --> 01:33:36.560]  это тоже тратится память потому что вот этот стэк функции которые у вас
[01:33:36.560 --> 01:33:42.800]  работают он тоже где-то хранится вот поэтому при прочих равных конечно при
[01:33:42.800 --> 01:33:47.300]  выборе рекурсии или не рекурсии лучше конечно выбирать не рекурсии то есть в
[01:33:47.300 --> 01:33:51.920]  данном случае лучше конечно вот это написать вайл вот но это вот просто
[01:33:51.920 --> 01:33:58.640]  действительно очень красивая такая штучка так что вот так что не знаю вот
[01:33:58.640 --> 01:34:05.000]  так что такая вот замечательная штука вот но но так или иначе севда он вот
[01:34:05.000 --> 01:34:12.280]  устроен именно таким образом на хит соответственно а а картинки все-таки
[01:34:12.280 --> 01:34:21.480]  были а я и а кошмар ну а не ну картинки красивые ладно мы уже все обсудили но
[01:34:21.480 --> 01:34:25.840]  тут оказывается просто есть маленькая приятная вещь зачем она значит что
[01:34:25.840 --> 01:34:32.480]  севда он оказывается нам неожиданно помогает следующим образом говорится вот
[01:34:32.480 --> 01:34:35.560]  у нас эту кучу надо как-то построить вот даны n элементов хочется из них
[01:34:35.560 --> 01:34:42.940]  хотя бы кучу построить как это сделать а оказывается неожиданным образом давайте
[01:34:42.940 --> 01:34:47.240]  просто запишем все элементы в массив тупо с первого по-энной и для всех
[01:34:47.240 --> 01:34:54.760]  элементов сцен пополам минус один значит по один тупо вызовем севда он
[01:34:56.000 --> 01:35:01.440]  это утверждение что во первых будет ну там ну ладно простое утверждение в
[01:35:01.440 --> 01:35:09.040]  результате получится корректная двоичная куча вот это понятно почему ну в принципе
[01:35:09.040 --> 01:35:13.640]  логично да потому что я утверждаю что после севда он а ты на самом деле у вас как бы
[01:35:13.640 --> 01:35:18.160]  получится по камере под дерево с корнем в этой вершине будет корректной двоичной
[01:35:18.160 --> 01:35:23.520]  кучи ну понятно почему да потому что непосредственно перед этим запуском у
[01:35:23.520 --> 01:35:29.000]  вас было значит и та вершина на которой висели две корректные кучи значит получается это куча
[01:35:29.000 --> 01:35:32.520]  с у которой единственный неправильный ответ коррект значит вызываем севда он равнуемся
[01:35:32.520 --> 01:35:42.920]  понимаете да вот вот но значит есть такое теперь вместили но но оказывается еще более там уже
[01:35:42.920 --> 01:35:50.320]  менее очевидное утверждение оказывается это работает за линию то есть вам могло показаться
[01:35:50.320 --> 01:35:55.920]  что там кучу можно построить только за н лога но нет оказывается построить кучу можно за линию
[01:35:55.920 --> 01:36:08.640]  но давайте разбираться а почему так нет это нам принципиально потому что у нас вообще если
[01:36:08.640 --> 01:36:13.240]  мы просто рандомные элементы положили у нас куча вообще некорректная то есть как бы нам нужно
[01:36:13.240 --> 01:36:18.520]  именно в этом порядке классе в дауне для того чтобы гарантировать что после сева севда он из этого
[01:36:18.520 --> 01:36:28.920]  элемента по дереве с коргем в этом элементе у нас теперь корректная куча имеет место быть вот так
[01:36:28.920 --> 01:36:39.680]  что это важно но давайте думать так спрашивается почему же у нас это работает за линию давайте
[01:36:39.680 --> 01:36:48.680]  думать так на часа треть у нас е что у нас имеет место быть так у нас есть какая-то куча там
[01:36:48.680 --> 01:37:01.200]  пэм пэм пэм пэм не буду даже круглежки рисовать так то давайте я тут еще порисую чуть-чуть да вот
[01:37:01.200 --> 01:37:12.840]  как это да вот ну и тут сколько-то элемент но давайте вот так но давайте так давайте
[01:37:12.840 --> 01:37:19.080]  сейчас для простоты можем давайте предположим что у нас тут на самом деле там вот на нижнем
[01:37:19.080 --> 01:37:25.960]  уровне заполнено все вот но поехали значит смотрите тут у нас один элемент тут два тут
[01:37:25.960 --> 01:37:32.680]  четыре и так далее и так далее и на нижнем уровне их оказывается два в степени аж ну пусть
[01:37:32.680 --> 01:37:40.920]  меня аж будет от нуля до там чего-нибудь так но и теперь давайте думать ну и паря нот но понятно
[01:37:40.920 --> 01:37:46.400]  что n равно в данном случае получается это вот в идеальном случае такое идеальном случае высоты
[01:37:46.400 --> 01:37:54.000]  аж n равно два в степени аж плюс один минус один понимаете да но можно в принципе да но еще можно
[01:37:54.000 --> 01:37:59.920]  сказать что это разно тета от 2 степени аж в общем-то не принципиально так вот теперь давайте думать
[01:37:59.920 --> 01:38:08.800]  значит мы запускаем севдауны за сколько сколько они работают но заметим здесь мы делаем вот два
[01:38:08.800 --> 01:38:17.040]  степень аж мы делаем но даже 0 действий мы даже не запускаемся до условно но на следующем
[01:38:17.040 --> 01:38:22.560]  уровне тут мы делаем одно действие тут мы делаем два действия три действия и так далее и здесь
[01:38:22.880 --> 01:38:30.840]  аж действие да то есть получается время работы можно оценить как два в степени аж минус один на
[01:38:30.840 --> 01:38:39.280]  один плюс два в степени аж минус два на два плюс там два степени аж минус 3 умножить на три плюс
[01:38:39.280 --> 01:38:45.580]  и так далее плюс один там два в степени ноль умножить на аж или что то же самое просто сумма
[01:38:45.580 --> 01:39:01.660]  по всем и от единицы до аж два в степени аж минус и умножить на и да правильно но то есть это
[01:39:01.660 --> 01:39:05.340]  мы же как раз то есть получается при дам ты идем получается мы вот в этом вот порядке идем
[01:39:05.340 --> 01:39:17.580]  ну все ну посмотрите вот с элементов нижнего уровня запуск оценит смысла да и так теперь
[01:39:17.580 --> 01:39:27.580]  остается только оценить а чему равна вот эта сумма так но это важная математика как бы ее тоже
[01:39:27.580 --> 01:39:34.660]  полезно уметь хорошо схлопывать ну правильно я конечно начнем с того что давайте вынесем два
[01:39:34.660 --> 01:39:48.500]  степени аж один аж и поделить на два степени вот спрашивает и чему равно и поделить на два
[01:39:48.500 --> 01:40:04.820]  степени может бесконечности какой-нибудь или ашу да интегрирование так что у вас сейчас на
[01:40:05.020 --> 01:40:20.020]  так что у всех по-разному да ну понятно но нет но на самом деле смотрите нет сложить и оценить
[01:40:20.020 --> 01:40:23.980]  пока им это доказать что этот ряд сходится какой-то константе можно гораздо более
[01:40:23.980 --> 01:40:31.100]  простым образом давайте просто смотрите мы не я просто выпишу элементы и смотрите каким образом
[01:40:31.100 --> 01:40:39.820]  значит одна вторая встречается один раз да значит дальше у нас 2 2 1 четвертая давайте
[01:40:39.820 --> 01:40:49.300]  поэтому я напишу 1 четвертая ладно не так 1 четвертая и 1 четвертая тут получается 1 восьмая 1
[01:40:49.300 --> 01:41:00.180]  восьмая 1 восьмая тут получается 1 16 1 16 1 16 1 16 ну и так далее то тогда смотрите да у нас
[01:41:00.300 --> 01:41:07.140]  какой но смотрите в этом этот столбец у нас очевидно меньше либо равен единице да вот
[01:41:07.140 --> 01:41:15.100]  этот столбец меньше либо равен 1 второй вот этот меньше либо равен 1 четвертый этот меньше
[01:41:15.100 --> 01:41:21.980]  либо равен 1 восьмой и так далее но вот это вот сумма верхних оценок даже если она бесконечная
[01:41:21.980 --> 01:41:31.100]  она не бесконечная, но она не превосходит 2. То есть вывод, что эта сумма не больше 2.
[01:41:31.100 --> 01:41:51.340]  Чего взяли? Так что вот такая радость. Вот эту сумму есть просто более простой
[01:41:51.340 --> 01:42:03.020]  способ убедиться, что это констант. Так что вот оказывается, что построить кучу можно за линию.
[01:42:03.020 --> 01:42:13.980]  Что еще с ней можно делать? Можно брать элемент и его изменять, то есть увеличивать или увеличить.
[01:42:13.980 --> 01:42:22.020]  Это мы умеем делать за логарифом, но, наверное, самое интересное, что мы умеем делать, это добавлять
[01:42:22.020 --> 01:42:31.900]  элемент. За какое время мы можем добавить элемент в такую кучу? Просто за логарифом,
[01:42:31.900 --> 01:42:47.540]  как сказал бы генерал Иволгин. Кто знает генерала Иволгина? Который Михалыч? Нет,
[01:42:47.540 --> 01:42:55.380]  который особенности национальной охоты. Ну, который это за справедливость или за красоту,
[01:42:56.380 --> 01:43:20.100]  за логарифом. Как добавить элемент в кучу? Надо просто в соответствующее место его поставить
[01:43:20.100 --> 01:43:28.540]  и после этого вызвать сифтап, вот вам и логариф. Так, ну что еще можно из кучи сделать? Так,
[01:43:28.540 --> 01:43:34.540]  ну ладно, давайте тут уже, наверное, написано. Так что, если что, куча строится вот так. Не
[01:43:34.540 --> 01:43:39.300]  перепутать. Можно делать то же самое с сифтапами, но там, очевидно, логарифа от Н не получится.
[01:43:39.300 --> 01:43:54.420]  Да, ой, вот то же самое доказательство, но ладно. Да, как это называется, тоже привет от моего
[01:43:54.420 --> 01:44:01.140]  великого предшественника, если что. Так что, если там будете работать в Яндекс.Такси,
[01:44:01.140 --> 01:44:05.380]  где-нибудь вы строите встречу с такого человека, как Степан Мацкевич. Так вот, он был моим
[01:44:05.380 --> 01:44:10.900]  предшественником на посту лектора по алгоритму в продвинутом потоке. Так что,
[01:44:10.900 --> 01:44:22.860]  будете работать, встретитесь обязательно. Вот, нет, Яндекс.Такси не путайте, немножко другое.
[01:44:22.860 --> 01:44:30.740]  Ну, я не знаю, может, у меня, конечно, устаревшие сведения. Когда мы вместе с ним работали,
[01:44:30.740 --> 01:44:36.500]  на самом деле, когда-то он работал в компании Абби. Потом из Абби он перешел в Яндекс.Такси,
[01:44:36.500 --> 01:44:45.740]  но больше я пока ничего не знаю. Но, вроде, до момента прошлого года он там был. Так что,
[01:44:45.740 --> 01:44:55.380]  собственно, если пересечетесь, увидите, передавайте привет. Ну, а что нет, пойдете там
[01:44:55.380 --> 01:44:59.020]  стажироваться куда-нибудь. Я вас знаю, сейчас пойдете куда-нибудь летом стажироваться,
[01:44:59.380 --> 01:45:14.660]  чтобы отдыхать нормально. Ну, а почему бы нет. Так вот, ну, да. Ладно, так, ну, тут мы уже сказали,
[01:45:14.660 --> 01:45:23.620]  как добавить. Да, тут все просто. Но, оказывается, что из кучи можно извлечь максимум. Как это
[01:45:23.620 --> 01:45:29.500]  сделать. Да, очень просто. Значит, надо посвапать этот максимум с последним листом. Последним,
[01:45:29.500 --> 01:45:35.500]  в смысле, максимальным и удалить этот лист. Тогда все, что вам останется, это сделать
[01:45:35.500 --> 01:45:42.940]  севдауну кофе. То есть, в принципе, заодно можно этот максимум и достать. Ну, в общем-то,
[01:45:42.940 --> 01:45:52.900]  классическая операция. Так, ну, тут вроде не сильно сложно. То есть, вот таким вот нехитрым
[01:45:52.900 --> 01:46:05.220]  образом это делается. Значит, еще раз, смотрите, вот давайте по коду. Так, ну, во-первых, проверяем,
[01:46:05.220 --> 01:46:13.540]  что он есть. Ну, ладно, конечно, мещере вам по рукам надается такую проверку, но мы сейчас в теорию
[01:46:13.540 --> 01:46:20.980]  исключений там лазить не будем. Вот. Значит, как достать максимум. Так, ну, во-первых, понятно,
[01:46:20.980 --> 01:46:29.860]  где он находится. В корне, да. Мы его сохраняем. Значит, после этого, значит, идея такая. Значит,
[01:46:29.860 --> 01:46:37.300]  мы копируем туда последний элемент из этого массива. Пусть он называется last. Кстати,
[01:46:37.300 --> 01:46:43.660]  но это не случайно, потому что мало кто знает, но в векторе есть метод back. Знаете, да? То есть,
[01:46:43.660 --> 01:46:52.660]  более того, там в векторе иногда можно писать даже v.back хресь-хресь равно 5. Вот. Ну, это просто
[01:46:52.660 --> 01:46:58.380]  такая техническая мелочь. Может, не все сталкиваются. Потому что иногда, когда видишь там, когда там
[01:46:58.380 --> 01:47:07.100]  начинают вот это все писать там v.size-1, там вот это вот равно 5. Знаете, просто хочется крикнуть.
[01:47:07.100 --> 01:47:13.580]  Не, ну, если размер доль, то и это, это, конечно, там отправит вас.
[01:47:13.580 --> 01:47:31.300]  Можно и так, да. А, звездочка, да.
[01:47:32.300 --> 01:47:33.300]  Да.
[01:47:33.300 --> 01:47:34.300]  Да.
[01:47:34.300 --> 01:47:35.300]  Да.
[01:47:35.300 --> 01:47:36.300]  Да.
[01:47:36.300 --> 01:47:37.300]  Да.
[01:47:37.300 --> 01:47:38.300]  Да.
[01:47:38.300 --> 01:47:39.300]  Да.
[01:47:39.300 --> 01:47:40.300]  Да.
[01:47:40.300 --> 01:47:41.300]  Да.
[01:47:41.300 --> 01:47:42.300]  Да.
[01:47:42.300 --> 01:47:43.300]  Да.
[01:47:43.300 --> 01:47:44.300]  Да.
[01:47:44.300 --> 01:47:45.300]  Да.
[01:47:45.300 --> 01:47:46.300]  Да.
[01:47:46.300 --> 01:47:47.300]  Да.
[01:47:47.300 --> 01:47:48.300]  Да.
[01:47:48.300 --> 01:48:00.300]  Можно. Ой, ой, ой, да. Ой, ой, ой, ой...
[01:48:00.300 --> 01:48:06.300]  Минусы можно еще убрать, значит, 4 минуса.
[01:48:06.300 --> 01:48:07.300] E.
[01:48:07.300 --> 01:48:08.300]  E.
[01:48:08.300 --> 01:48:22.100]  Не, ну это так, конечно, да, странное различие, но в любом случае да, но лучше как бы для этого изобрели
[01:48:22.100 --> 01:48:28.420]  back, лучше пользуйтесь back. Вот, ладно, ну значит, а ты что мы делаем? То есть копируем последний
[01:48:28.420 --> 01:48:34.340]  элемент в корень, удаляем этот последний элемент, что он нам просто не нужен, да, то есть в данном
[01:48:34.340 --> 01:48:42.100]  случае вот этой четверку типа мы, то есть копируем вот сюда четверку, да, и удаляем. Вот, и все что нам
[01:48:42.100 --> 01:48:46.980]  остается, что если куча после этого не оказалась пустой, а она могла оказаться пустой, потому что вдруг она была
[01:48:46.980 --> 01:48:51.020]  перед этим из одного элемента, то мы вызываем сивдаун из корки.
[01:48:51.020 --> 01:49:01.420]  У нас могло только оказаться, что элементы хранятся разрежены, то есть какое-то место оказалось пустым,
[01:49:01.420 --> 01:49:06.220]  когда мы делали сивдаун. Нет. Если максимальный элемент, допустим, третий элемент больше,
[01:49:06.220 --> 01:49:13.220]  а второй, и мы его делаем сивдаун. Нет, так, во-первых, смотрите, во-первых, разреженного
[01:49:13.220 --> 01:49:17.100]  сива нет в том плане, что все элементы хранятся подряд, и мы удаляем только самый последний
[01:49:17.100 --> 01:49:28.700]  элемент. Это раз. Ну и что? Нет, просто смотрите, после того, как вы удалили этот элемент с копировки сюда,
[01:49:28.700 --> 01:49:34.340]  то у вас единственное, то есть у вас свойства кучи все сохраняются, кроме корня, поэтому как бы один
[01:49:34.340 --> 01:49:39.100]  сивдаун из корня решает проблему. Он мог пойти влево, мог пойти вправо, но суть, но как бы логично,
[01:49:39.100 --> 01:49:44.180]  вот в данном случае он пойдет 11-9, он же пойдет в сторону максимального элемента, и здесь, тогда,
[01:49:44.180 --> 01:49:49.100]  сюда мы повесим 11, который будет больше всего там этого элемента, следовательно,
[01:49:49.100 --> 01:49:57.380]  всего под дерево, ну и все в порядке. Так что никаких проблем. Нет. Так что получается вот
[01:49:57.380 --> 01:50:03.580]  такая из двоичной кучи, можно вот такую штуку сделать. В принципе, на самом деле, подобного
[01:50:03.580 --> 01:50:08.500]  рода технологии позволяет, на самом деле, удалять из кучи элементов, за логарифом элемент,
[01:50:08.500 --> 01:50:17.860]  не обязательно из корня, но из произвольного места. Ну там одна из технологий называется просто так,
[01:50:17.860 --> 01:50:24.140]  нет, конечно, это предположение, что вы для каждого элемента, вы в каждый момент времени знаете,
[01:50:24.140 --> 01:50:29.820]  где он в куче лежит. И это проблема, что в СТЛе вы такого не реализуете. Вот преимущество Паскаля,
[01:50:29.820 --> 01:50:35.140]  кстати. Потому что если вы будете использовать priority queue в СТЛе, то там это будет просто
[01:50:35.140 --> 01:50:41.140]  черный ящик, который умеет делать, соответственно, что он умеет делать. Пуш,
[01:50:41.140 --> 01:50:48.300]  как там это называется? Пуш. То есть пуш какой-то элемент, а также выполнять операцию топ, там фронт
[01:50:48.300 --> 01:50:54.740]  и поп. Фронт будет показывать вам максимальный элемент, поп будет его удалять. Все. То есть как бы
[01:50:54.740 --> 01:51:01.380]  проблема черного ящика. То есть если вы положили туда 57, то где она там находится, что он там
[01:51:01.380 --> 01:51:06.540]  делает, вам не ведомо. Более того, если вы начнете спрашивать, говорить, он вам в конце концов
[01:51:06.540 --> 01:51:12.900]  мисапелляционно, бабушка заявит. А кто вам сказал, что у нас тут именно вот это? Может,
[01:51:12.900 --> 01:51:18.980]  мы там азель дерева хреним на самом деле? И вообще это на самом деле сет это такой на самом деле.
[01:51:18.980 --> 01:51:24.660]  Просто мы вам не весь функционат показываем. Что вы думаете, что если там написана очередь,
[01:51:24.660 --> 01:51:35.500]  то как бы там нету дека что ли? Вот это вот все. То есть минус черного ящика швы. Под капотом
[01:51:35.500 --> 01:51:43.100]  бывает непонятно, что. С другой стороны, чаще всего бывает понятно, что. То есть вам примерно
[01:51:43.100 --> 01:51:51.380]  рассказывают, как из этого вы делаете вывод, как-то удобно использовать, а как нет. Но чаще
[01:51:51.380 --> 01:51:55.020]  всего вот, но действительно как черный ящик, как абстрактных этих данных, действительно у нас
[01:51:55.020 --> 01:52:01.220]  операции вот такие. Но чаще их называют, конечно, по-другому, но вообще как бы вот, да. Очередь
[01:52:01.220 --> 01:52:06.020]  с приоритетом, это вот такое. То есть добавить очередь, элемент с каким-то приоритетом. Значит
[01:52:06.020 --> 01:52:09.700]  get next, это вот соответственно вернуть элемент с максимальным приоритетом или соответственно,
[01:52:09.700 --> 01:52:16.260]  вот. Но иногда бывает вот элемент типа топ, но он не всегда обязателен. Вот. Ну в общем ладно,
[01:52:16.260 --> 01:52:22.700]  названия, значения особого не имеют. Суть, я думаю, вы и так поняли. Вот. Ну я просто к
[01:52:22.700 --> 01:52:27.740]  чему это. То есть, но так теоретически, но да, но смотрите, но чаще на самом деле, вот на самом
[01:52:27.740 --> 01:52:32.780]  деле, если вот рассматривать язык Кормана на самом деле и так далее, то там на самом деле будет
[01:52:32.780 --> 01:52:40.420]  подразумеваться, что вы к добавленному элементу на самом деле там доступ какой-то имеете. Ну воображать
[01:52:40.420 --> 01:52:46.980]  себе это можно, видимо, в плане, что, знаете как, то есть черный ящик вам предоставляет итератор
[01:52:46.980 --> 01:52:54.500]  на элемент. Ну что-то типа итератора. Вот. Ну может не итератор, может там как-то по-другому его
[01:52:54.500 --> 01:52:59.060]  назвать, потому что, ну вот. И тогда просто идея такая, что в каждый момент времени этот итератор
[01:52:59.060 --> 01:53:03.540]  указывает на элементы, по этому итератору можно сделать какие-то операции. Удалить этот элемент.
[01:53:03.540 --> 01:53:07.580]  И тогда вы его удаляете вне зависимости от того, является ли он максимум или не является.
[01:53:07.580 --> 01:53:19.820]  Чего? Изменить. Более того, забегая вперед, у нас в будущем на самом деле будет, вот есть
[01:53:19.820 --> 01:53:25.540]  классическая куча, в которых есть операции, там значит, вставить туда, то есть вставить
[01:53:25.540 --> 01:53:30.500]  элемент и удалить минимум. Ну или просмотреть, да? Ну или там не минимум, а максимум бывает, да? Вот.
[01:53:30.500 --> 01:53:36.060]  Ну вот. Но нам будет, во-первых, у нас там продвинутые кучи будут, во-первых, они будут сливаемые,
[01:53:36.060 --> 01:53:43.940]  то есть будет задача, даны две кучи, слий, пожалуйста, их в одну. Желательно быстро. Вот. И самое важное,
[01:53:43.940 --> 01:53:51.620]  у нас будет операция дикриски. Ну это в куче на минимум, на минимум, будет операция, тыкни,
[01:53:51.620 --> 01:53:58.380]  вот возьми вот этот элемент по итератору и, пожалуйста, уменьши его. Потому что оказывается,
[01:53:58.380 --> 01:54:03.420]  что просто можно или вот зачем нужна куча фибоначи, да? Она нам оказывается нужна для того,
[01:54:03.420 --> 01:54:15.740]  что она умеет это уменьшение делать не за логарифом, а за единицу. Вот. Ну вот. За единицу.
[01:54:15.740 --> 01:54:27.300]  Вот это за единицу. Вот. Так что вот соответственно. Так. Ну как бы да. Занятие у нас сегодня по
[01:54:27.300 --> 01:54:33.620]  сортировкам, да? Но на самом деле при чем тут сортировки? Но на самом деле да. Есть такая красивая
[01:54:33.620 --> 01:54:42.140]  вещь, называется hip sort. И устроен он предельно вот. Ну и hip sort устроен предельно простым
[01:54:42.140 --> 01:54:45.900]  образом. Так. У вас есть черный ящик, который умеет за логарифом добавлять в себя элемент и
[01:54:45.900 --> 01:54:52.540]  удалять. Или даже вот проще, да. Ну вот тогда идея такая. Давайте в черному ящику скорбим все
[01:54:52.540 --> 01:54:58.460]  элементы, а потом просто все их достанем. И вот вам отсортировать, пожалуйста. Можно это сделать
[01:54:58.460 --> 01:55:04.940]  оптимальнее по константе, потому что построить саму себе кучу вы можете за линию. То есть у черного
[01:55:04.940 --> 01:55:15.460]  ящика есть такой лоток, в который типа запихивает сюда все элементы и он их кушает за линию. Вот.
[01:55:15.460 --> 01:55:22.780]  Ну общее время. Но доставать все равно придется за логарифом и получается он логан. То есть думает
[01:55:22.780 --> 01:55:26.740]  ладно, может наверное и доставание как-то можно оптимизировать. Но нет, доставание нельзя
[01:55:26.740 --> 01:55:32.300]  оптимизировать, что мы доказали, что быстрее чем за логан мы сортировку не напишем. По крайней
[01:55:32.300 --> 01:55:40.060]  мере, как мы это будем называть в модели сравнений. В модели сравнений. Ну потому что сами видите.
[01:55:40.060 --> 01:55:49.900]  Вот. Так что вот. Но тем не менее получается еще один N-логанчик. Причем более того кучу вообще
[01:55:49.900 --> 01:55:54.580]  можно еще и действительно удобно хранить в начале массива и доставать из нее максимум. И получается,
[01:55:54.580 --> 01:55:59.860]  что преимущество по сравнению с мечсортом у него есть важное, а именно что вы хипсорт можете
[01:55:59.860 --> 01:56:08.860]  реализовать так, чтобы он сортировал элементы за от единицы дополнительной памяти. Это важно. То
[01:56:08.900 --> 01:56:16.300]  есть у мечсорта есть такой недостаток, чтобы смержить два массива, нужно эти массивы куда-то скопировать.
[01:56:16.300 --> 01:56:26.060]  Я вам даже больше скажу, мы его сегодня будем обсуждать. Ну или максимум в следующий раз.
[01:56:26.060 --> 01:56:35.540]  Да, но как вы сами убедитесь, скажем так, мозг придется повзрывать. То есть это не самый,
[01:56:36.180 --> 01:56:39.820]  то есть это будет так. То есть нельзя сказать, у нас уже была очередь из шести стэков,
[01:56:39.820 --> 01:56:42.660]  поэтому нельзя сказать, что мы тут пока рассматриваем только тривиальные алгоритмы.
[01:56:42.660 --> 01:56:47.540]  Ну я не знаю, может для вас очередь из шести стэков тривиальный алгоритм, конечно, но что-то мне
[01:56:47.540 --> 01:57:02.580]  подсказывает, что все-таки нет. Вот. Так. Ну ладно, давайте прежде чем, прежде чем мы куда-нибудь еще
[01:57:02.580 --> 01:57:09.020]  пойдем, значит мы рассмотрим еще одну сортировочку, которая работает за, казалось бы, работает за
[01:57:09.020 --> 01:57:15.260]  вот единицы дополнительной памяти, но на самом деле нет. Да, потому что на самом деле, конечно,
[01:57:15.260 --> 01:57:19.500]  нельзя обойти вниманием кусор. Но правда, тут мы его быстро можем упомянуть, потому что кусор
[01:57:19.500 --> 01:57:28.820]  мы в прошлый раз уже обсуждали. Вот. Вот. Ну суть, то есть понятно. На самом деле так, у него есть
[01:57:28.820 --> 01:57:33.900]  мета такая версия, то есть мета версия такая, что мы просто, то есть мы должны просто разделить
[01:57:33.900 --> 01:57:40.100]  массив на две части так, чтобы слева были элементы меньше, чем вправой. То есть разделили массивы,
[01:57:40.100 --> 01:57:47.300]  и потом после этого рекурсивно по сортируем, что слева и что справа. Вот. То есть как это сделать?
[01:57:47.300 --> 01:57:56.140]  Ну классический метод, конечно, ну вот примерно код, который я в прошлый раз писал, помните, да? Вот.
[01:57:56.140 --> 01:58:01.500]  Да, каждый раз вот на Паскале приходилось писать вот что-то подобное. А если надо два массива
[01:58:01.500 --> 01:58:06.420]  сортировать, то приходилось, ну два массива разных типов, то приходилось два раза писать.
[01:58:06.420 --> 01:58:16.820]  Вот шаблонов в Паскале тоже нету. Вот. Но ничего страшного. Вот. Ну и так далее и тому подобное.
[01:58:16.820 --> 01:58:28.060]  Вот. Так что такая вот нот. То есть в данном случае такая красота. В чем действительно, что интересно,
[01:58:28.060 --> 01:58:32.100]  видите, обратите внимание, то есть партия, то есть на самом деле функция partition реализована так,
[01:58:32.100 --> 01:58:38.780]  что она работает за от единицы дополнительной памяти, видите, да? Вот. Но при этом фишка,
[01:58:38.780 --> 01:58:44.220]  но вот. Но при этом, конечно, важный момент, есть ноты. При этом кажется, что после этого и quicksort
[01:58:44.220 --> 01:58:50.660]  работает за от единицы дополнительной памяти, но это не так. Потому что, да, в данном случае
[01:58:50.660 --> 01:58:55.340]  дополнительной памятью является stack recursion, поэтому дополнительной памяти получается логарифом.
[01:58:55.340 --> 01:59:02.820]  Вот. То есть в этом смысле, то есть с точки зрения допамяти, конечно, пока у нас сортировка кучей
[01:59:02.820 --> 01:59:11.940]  чемпионская. А если вспомнить, что она еще и не рекурсивная. А, ну поэтому она и чемпионская. Да,
[01:59:11.940 --> 01:59:18.060]  но в Qsort на самом деле тут разные вещи можно обсуждать. Можно еще обсудить на самом деле,
[01:59:18.060 --> 01:59:23.260]  что, потому что как мы это делаем? Мы выбираем какой-то элемент, который называется pivot. Это
[01:59:23.260 --> 01:59:33.220]  прям официальное название в науке. Или pivot. Или pivot. No, I would say pivot. Possibly it's incorrect.
[01:59:33.220 --> 01:59:54.620]  Dear Google Translate. I'm not sure. Oh, let's try. Okay. Так, ребят, так, тишина. Так, тишина,
[01:59:54.620 --> 02:00:16.820]  тишина. Сейчас попробуем. Так, вот он. Серьезно? Ну ладно. Ладно. Pivot. Yeah, pivot. Okay. Let it be pivot, sorry.
[02:00:16.820 --> 02:00:31.300]  I was incorrect. I was wrong. Okay. Pivot. Okay. Так вот. Ну, значит, теперь вот возникает вопрос. Да,
[02:00:31.300 --> 02:00:37.620]  что это pivot? Значит, как его выбирать? Потому что я тут его выбрал вот таким вот нехитрым способом.
[02:00:37.620 --> 02:00:43.620]  Да, ну как сказать, если массив отсортирован, то это очень плохо. А если массив там как-то рандомно
[02:00:43.620 --> 02:00:49.980]  пошаффлен, то в принципе нормально будет. Но, конечно, чаще его выбирают на практике по-другому.
[02:00:49.980 --> 02:00:57.140]  То есть классическая вариация в паскале была, пишите там a t plus r, там n пополам, короче, в данном
[02:00:57.140 --> 02:01:05.580]  случае. Да, но контр-тест всегда есть. Ну скажи так, под любой конкретный алгоритм выбора
[02:01:05.580 --> 02:01:14.060]  pivot'a, можно подогнать контр-пример, в котором этот pivot будет максимальным. Вот. Так что в этом
[02:01:14.060 --> 02:01:22.380]  смысле такое. Ну вот. И теперь смотрим. Вот. Ну в принципе, это, конечно, мечта. Ну, как можно... То есть
[02:01:22.380 --> 02:01:29.060]  если partition всегда работает пополам, то это работает за n log n и, в общем-то, нам нормально. Так. Ну,
[02:01:29.060 --> 02:01:38.300]  так. Ну, это будет вам слайд для любителей мотоанализа, фо, для тягвера, с мото ожиданиями. Вот. Но в
[02:01:38.300 --> 02:01:42.700]  принципе, проговорить тут хочется следующее, что pivot можно выбирать как. Ну, на самом деле,
[02:01:42.700 --> 02:01:48.300]  технологии разные. Бывают последние, первые, середины. Ну, конечно, хорошо работает случайно. Хотя,
[02:01:48.300 --> 02:01:55.540]  как бы, на код почте, скорее всего, у вас и это завалит. Ну вот. Да. Ну, это там, на следующих
[02:01:55.540 --> 02:02:01.660]  слайдах просто. Да. Вот. Нет. Вот это между другое. Можно, как бы, давайте возьмем вот эти три
[02:02:01.660 --> 02:02:07.500]  элемента и выберем из них медианных. Вот. Или можно медианно. В общем, разное что-то можно делать.
[02:02:07.500 --> 02:02:16.780]  Ну, думаю, завалить можно. Потому что если он будет какой-нибудь предпоследний элемент,
[02:02:16.780 --> 02:02:24.020]  то почему бы нет? Нет, у рандом сложен, но просто проблема в том, что рандом он псевдорандом. Это
[02:02:24.020 --> 02:02:33.060]  тоже. Ну, надо смотреть, потому что, да. Нет, тут надо к амтеху обращаться, потому что было
[02:02:33.060 --> 02:02:39.060]  ощущение, что они просто едва ли не такое смогли как-то свалить. Нет, там была задача, которая без
[02:02:39.060 --> 02:02:45.780]  рандома не делается никак, а любой рандом как бы и валится на челленджах. Ну или почти любой. Да,
[02:02:45.780 --> 02:02:50.900]  это была шикарная задача просто вот. Так что какой-то амтехраунд, там один из последних,
[02:02:50.900 --> 02:03:01.460]  гляньте, несколько лет назад это было, но я прям получил удовольствие. Вот кого нет. Ну, в те времена
[02:03:01.460 --> 02:03:07.780]  они были не пайныли, поэтому можете искать по амтеху. Да, шикарная там какая-то, но там какая-то
[02:03:07.780 --> 02:03:15.260]  шикарная задача, которая вот действительно не решается. Вот. Так что тут такое. Ну дальше у нас
[02:03:15.260 --> 02:03:20.580]  катая порядковая статистика, но здесь в общем-то просто описывается этот алгоритм. Ой, я даже
[02:03:20.580 --> 02:03:31.380]  правильно вспомнил все фамилии. Окей. Вот. Так, ну в общем. Да. Нет, ну по-хорошему мы должны были
[02:03:31.380 --> 02:03:35.580]  это обсудить в этом месте, но я, соответственно, мы вынуждены были обсудить в тот прошлый раз,
[02:03:35.580 --> 02:03:41.580]  потому чтобы как бы с Домашкой не затягивать. Вот, поэтому сейчас мы этого делать не будем. Так,
[02:03:41.580 --> 02:03:48.060]  ну что ж, немножко затянулась первая пара. Так, ну да, мы могли закончить на 8 минут раньше,
[02:03:48.060 --> 02:03:55.820]  в итоге закончим на 45 минут позже. Так, ну ладно, ничего страшного. Зато, зато как-то хорошо
[02:03:55.820 --> 02:04:01.860]  презентажечка закончилась. Нет, ну не волнуйтесь, у меня еще есть как бы, да. Как бы, да. Тимсорт от нас
[02:04:01.860 --> 02:04:07.940]  никуда не денется. Называется там какой-нибудь сли-слияние за 1 до памяти тоже, но это мы все
[02:04:07.940 --> 02:04:13.060]  будем делать после перерыва. Ну давайте так сразу поанонсируем. Давайте ладно, в том числе можно
[02:04:13.060 --> 02:04:18.020]  для наших телезрителей тоже, да, что... Хотя, не знаю, когда видео для телезрителей, это может
[02:04:18.020 --> 02:04:21.860]  быть уже не актуально, конечно, скорее всего, но там будет все зависеть от того, когда вы эту лекцию
[02:04:21.860 --> 02:04:27.860]  смотрите. Но, в принципе, да, то есть как бы, да, зазывать на ICPC будем всех, даже не в зависимости
[02:04:27.860 --> 02:04:35.700]  от того, там, участвуйте вы активно сейчас в тренировках, допустим, или нет. Вот, соответственно,
[02:04:35.700 --> 02:04:46.460]  вот это действительно вопрос. Но зазывать будем активно всех, но как вы же активно говорили,
[02:04:46.460 --> 02:04:52.140]  да, что как бы, чем больше вас придет на ICPC, тем больше нас поедет на четверть финал, на полуфинал.
[02:04:52.140 --> 02:05:00.540]  Но на финал, к сожалению, нет, но все-таки. Ну как бы, нет, там квота немножко по-другому устроена
[02:05:00.540 --> 02:05:07.460]  просто. Там просто на квале работает так. То есть там ситуация такая, что, ну мы сейчас выкидываем,
[02:05:07.460 --> 02:05:13.140]  ну понятно, что никуда не проходят команды, которые не решили ни одной задачи, но как бы, да, вот,
[02:05:13.140 --> 02:05:20.260]  но как бы, мы надеемся, таких не будет. Нет, дальше там, нет, там просто обычного правила, устроенное
[02:05:20.260 --> 02:05:25.140]  примерно так, то есть там есть как бы три квоты, такая красная, там обычно красная, синие, зеленая.
[02:05:25.140 --> 02:05:31.100]  Что такое красная квота? Красная квота. Чемпион, там победитель квала от каждого ВУЗа заведомо
[02:05:31.100 --> 02:05:40.020]  проходит. Вот. Далее. Берем синие. Значит, берем, значит, от каждого ВУЗа берем команды, занявшие
[02:05:40.020 --> 02:05:44.980]  от второго по четвертое место, ну там, ну или если там меньше команд от ВУЗа пришло, ну сколько есть.
[02:05:44.980 --> 02:05:50.540]  Их упорядочиваем в отдельную таблицу, и топ сколько-то из них, по-моему, там 30 или что-то в этом
[02:05:50.540 --> 02:05:58.540]  роде, там точные цифры, надо смотреть в другом месте, тоже там проходят дальше. Значит, после этого тупо
[02:05:58.540 --> 02:06:05.460]  всех остальных, мы, значит, все остальные после этого сортируются, да, то есть берем всех остальных,
[02:06:05.460 --> 02:06:11.060]  кто еще по предыдущим квотам не прошел, значит, сортируем их и, значит, отсекаем по количеству мест
[02:06:11.060 --> 02:06:18.580]  на четверть финале. Ну, скажем так, понятно, что, ну вот, ну то есть так, просто от физтеха понятно,
[02:06:18.580 --> 02:06:22.460]  что там, скорее всего, там топ-4 команд, наверное, займут какие-то достаточно высокие места,
[02:06:22.460 --> 02:06:28.300]  скорее всего, да, поэтому как бы в этом, по этому случае, глобально, это вы либо попадаете в топ-4,
[02:06:28.300 --> 02:06:34.180]  либо, соответственно, просто садитесь и, то есть либо там проходите по вот этой квоте, там по отсечке,
[02:06:34.180 --> 02:06:40.740]  вот, то есть, пример, там так это работает просто. Ну, в среднем, ну, сложно сказать в среднем,
[02:06:40.740 --> 02:06:48.340]  но скажем так, последний раз было 15. Вот, слушайте, это менее может быть,
[02:06:48.340 --> 02:06:51.940]  актуальным вопросом. Я могу сказать, что было в прошлом году, прошло 15 команд,
[02:06:51.940 --> 02:07:01.860]  и надо было из 13 задач решить 12. Нет, ну, нет, ребят, ну, нет, это нормально, потому что квал,
[02:07:01.860 --> 02:07:08.740]  это более простой контест, но там буквально, там, извините, там, ну, там просто, ну, чтобы вы
[02:07:08.740 --> 02:07:15.700]  понимали, там буквально будут, там а плюс бэшные задачи, там буквально могут быть. Чего?
[02:07:15.700 --> 02:07:27.540]  Нет, так, ну, где их найти? Так, ну, может быть, мы их, может, не выкладывали, но,
[02:07:27.540 --> 02:07:31.940]  смотрю, так, если у вас там есть желание, там, ну, больше того, скажешь так, обычно это настолько
[02:07:31.940 --> 02:07:35.580]  простые контесты, что мы их давать не будем, но если есть у вас большое желание, то, как бы,
[02:07:35.580 --> 02:07:42.100]  я могу просто пошарить, можете написать, если хотите, или там, так что, если, ну, если там,
[02:07:42.740 --> 02:07:50.460]  как бы, очень захочется. Ну, тот момент такой, для этого надо еще команды и там сформировать,
[02:07:50.460 --> 02:07:59.980]  вот, вот, ну, соответственно, ладно, это уже другой вопрос. Хорошо, вот это, ну, вот это уже такое,
[02:07:59.980 --> 02:08:06.100]  но, на самом деле, то есть, это, как бы, не, ну, как бы, квал, это в этом смысле, это не самая
[02:08:06.100 --> 02:08:10.740]  интересная тренировочная контест, я вас уверяю, потому что, ну, как бы, понятно, скорее всего,
[02:08:11.100 --> 02:08:15.940]  там, то есть, как бы, вопрос будет, за сколько вы закроете там первые 8-9 задач, на самом деле,
[02:08:15.940 --> 02:08:22.020]  вопрос будет, то есть, что вы закроете там за полтора часа, за час или все-таки там 40 минут
[02:08:22.020 --> 02:08:28.140]  уложите, да, буквально, то есть, нет, интересные задачи там будут, да, но просто их будет сильно
[02:08:28.140 --> 02:08:34.040]  меньше, вот, соответственно. То есть, понятно, что потом вы придете начать в, где уже, как бы,
[02:08:34.040 --> 02:08:38.940]  как бы, уже, все-таки, хоть на сколько-то отобранные люди, да, но, то есть, ну, как бы,
[02:08:38.940 --> 02:08:44.220]  это специально делается для того, чтобы там многие там какие-то вузы, которые там с не
[02:08:44.220 --> 02:08:52.340]  такими сильными участками могли уже там кому-то говорить о том, что ура, мы попали в четвертьфинал,
[02:08:52.340 --> 02:08:57.940]  то есть мы вот это кого-то победили даже. Нет, это на самом деле серьезная вещь, потому что на самом
[02:08:57.940 --> 02:09:02.380]  деле действительно помогает. Ровно с этой целью там был проведен ребрейтинг, что как бы официально
[02:09:02.380 --> 02:09:08.220]  нет понятия, там Питерский полуфинал, есть понятие, там это финал региона Северной Евразии.
[02:09:08.220 --> 02:09:14.900]  То есть это реально финал, за него можно реально медальки получить, соответственно, да. В прошлом
[02:09:14.900 --> 02:09:20.660]  году там пять команд фистеха медальки получила, между прочим. Нет, это реально правда, чисто там
[02:09:20.660 --> 02:09:30.140]  двенадцать. В топ-12 прям пять команд попали сами в шоке, на самом деле, но в принципе нормально.
[02:09:30.140 --> 02:09:37.300]  Так что, соответственно, но это просто как бы сильно по офисе не звучит. Понятно,
[02:09:37.380 --> 02:09:41.380]  что с точки зрения прохода на финал, конечно, ничего не поменялось. Проходит только одна
[02:09:41.380 --> 02:09:49.180]  команда фистеха и как бы и увы. В данном случае появился ты не чемпион, тебе не повезло. Ну или ты
[02:09:49.180 --> 02:09:59.020]  выше школы экономики, да. Да, но с другой стороны, да, если ты не ффтайл, то тебе тоже не повезло.
[02:09:59.020 --> 02:10:06.300]  Ну как не повезло, в данном случае сложно говорить о везении, на самом деле, конечно.
[02:10:06.300 --> 02:10:14.100]  Соответственно, вот. Так что тут такие моменты, но просто такие репы. Поэтому нет понятия,
[02:10:14.100 --> 02:10:17.940]  то нет. Да, кстати, более того, вы скорее всего не услышите понятия московский фейтерфинал,
[02:10:17.940 --> 02:10:30.660]  вы услышите понятия Moscow Regional Contest. Regional Contest, yeah. Да, вот. Так что, соответственно,
[02:10:31.260 --> 02:10:36.740]  ну а квалификация, кстати, тоже как-то паустно называется, я не помню как. Хотя,
[02:10:36.740 --> 02:10:47.420]  оно, то есть, хотя по факту как бы даст. Так, ну вот. Значит, соответственно. Так, ладно.
[02:10:47.420 --> 02:10:59.580]  Так. И так идем дальше. Как вы это, слющайте другую сортировку. Да, вы думали,
[02:10:59.580 --> 02:11:05.860]  что мы обсудили все сортировки. Сейчас будет одно из самых весь вот. Вот она,
[02:11:05.860 --> 02:11:14.420]  вот она, сортировка до нашей мечты. Вот она, да. Это знаменитая сортировка Тима Петокса.
[02:11:14.420 --> 02:11:20.540]  Чем знаете, она действительно, то есть, она как-то, интересно чем на самом деле, да. Она
[02:11:20.540 --> 02:11:25.100]  интересна тем, что, то есть, математически она практически ничего нового не придумала. Хотя,
[02:11:25.100 --> 02:11:29.220]  в итоге, одна из сложнейших математических задач, по крайней мере, первого семестра у вас,
[02:11:29.220 --> 02:11:34.540]  она индуцирует. Значит, сразу скажу, у вас будет задача доказать, что она работает за НЛоген.
[02:11:34.540 --> 02:11:42.180]  Да, причем это, причем задача на самом деле достаточно актуальная. Почему? Ну,
[02:11:42.220 --> 02:11:47.380]  актуальная в каком плане? Потому что дело в том, что Тим Сорт, вот этот товарищ Тим Петерс,
[02:11:47.380 --> 02:11:52.740]  ну, по его, так сказать, статье, ну, хотя это официальной статьей это не является, вот,
[02:11:52.740 --> 02:12:00.380]  насколько я понимаю, то есть, все-таки явно видишь, что он кодер. То есть, он придумал пару каких-то
[02:12:00.380 --> 02:12:05.940]  лайфхаков. Ну, на тему чего, языка чего он придумал. То есть, логика такая, что реальные данные,
[02:12:05.940 --> 02:12:10.900]  то есть, когда вы там в реальной жизни сортируете, они очень часто будут почти сортированы. Ну,
[02:12:10.900 --> 02:12:15.380]  потому что вы их там набрали как-то из блоков там от сортированных или что-нибудь еще в этом роде. И
[02:12:15.380 --> 02:12:21.140]  очень хочется придумать сортировку, которая как бы в худшем случае как бы работает все еще за НЛоген,
[02:12:21.140 --> 02:12:26.820]  но в идеале, но на таких данных работает все-таки быстрее. То есть, если они почти отсортированы,
[02:12:26.820 --> 02:12:31.060]  то она как-то этим пользуется. Ну, допустим, вот представим себе, что у нас, например,
[02:12:31.060 --> 02:12:38.580]  массив состоит из пяти отсортированных блоков. Некоторые из блоков еще и по убыванию отсортированы.
[02:12:38.580 --> 02:12:47.740]  То есть, ранее обсужденные сортировки, в общем-то, от этого быстрее сильно работать не будут. Вот,
[02:12:47.740 --> 02:12:54.540]  соответственно. Хочется изобрести сортировку, которая бы этим пользовалась как-то. То есть,
[02:12:54.540 --> 02:13:02.860]  мотивация была такая, и он из этого, собственно, что-то сделал. Но это что-то, то есть, он сделал
[02:13:02.860 --> 02:13:07.860]  какие-то лайфхаки, которые мы сейчас будем обсуждать, но доказательства особо не предоставил.
[02:13:08.820 --> 02:13:13.740]  Для него доказательством было то, что мы заметим, что там, если там раны, там все были по единице,
[02:13:13.740 --> 02:13:18.740]  то это сделается вот так-так-так-так, и конкретно в этом случае будет за НЛоген. В общем,
[02:13:18.740 --> 02:13:23.580]  очевидно, что это худший случай, но и так далее. И прочие безобразия, за которые, как бы понятно,
[02:13:23.580 --> 02:13:29.700]  что там, по крайней мере, называется лично я буду ругаться очень долго, если там такое решение будет
[02:13:29.700 --> 02:13:37.740]  предложено. Вот, собственно, ну и, соответственно, там проверяющая теска тоже. Вот, поэтому там
[02:13:37.740 --> 02:13:46.980]  математического формализма особо нет, и нам захочется его добавить. Но, тем не менее,
[02:13:46.980 --> 02:13:53.140]  давайте смотреть. То есть, практический смысл, конечно, очевиден. То есть, практический смысл,
[02:13:53.140 --> 02:13:58.500]  на самом деле, как в кусорте. Вот, кстати, я забыл важный момент указать, что зачем нужен, казалось бы,
[02:13:58.500 --> 02:14:04.460]  кусорта. Зачем нужен кусорт, если там он работает в худшем случае за квадрат, его можно обвалить,
[02:14:04.460 --> 02:14:12.900]  а всякие merge-сорты с хипами работают жили за бетон. Идея очень проста. Просто тестирование
[02:14:12.900 --> 02:14:20.740]  показывает, что его константа значительно лучше, чем у merge-хипа. Вот, ну, можете сами протестировать,
[02:14:20.740 --> 02:14:27.340]  но там речь идет, там просто едва линия. Ну, там просто едва линия в полтора раза. Вот,
[02:14:27.340 --> 02:14:33.180]  то есть, на каких-то рандомных тестах будет так. Поэтому, действительно, поэтому это называется
[02:14:33.180 --> 02:14:38.460]  quick-sort. Ну, вот. Ну, собственно, как я уже говорил в прошлый раз, давайте еще раз упомянем. Да,
[02:14:38.460 --> 02:14:42.900]  то есть, как бы в STALE есть функция intro-sort. То есть, это еще один вариант такой. То есть,
[02:14:42.900 --> 02:14:48.180]  запускаем quick-sort, но как бы будем решать проблему, что все плохо. Очень просто. Если окажется,
[02:14:48.180 --> 02:14:54.460]  там если, то есть, там, если при этом окажется, что там глубина рекурсии там окажется слишком
[02:14:54.460 --> 02:14:58.540]  большой, то на какой-то глубине мы просто говорим, что дальше в рекурсию не идем, а вместо этого
[02:14:58.540 --> 02:15:04.380]  досактировываем хипом. Ну, или, там, если, там, длина массивчика меньше 16, то сактируем,
[02:15:04.380 --> 02:15:10.300]  там, чем-нибудь. Ну, потому что оказывается, что по константе, там, 16 элементов можно вставками
[02:15:10.300 --> 02:15:18.620]  сактируется быстрее, чем любой хип. Вот. Это вот важный тактический момент. Итак, ну, вот,
[02:15:18.620 --> 02:15:25.540]  значит, это был quick-sort. Значит, упоминал, теперь давайте упомянем, значит, начнем понимать,
[02:15:25.540 --> 02:15:35.180]  что же предлагает в итоге Tim Peters. Ну, основная идея такая. Значит, основная идея будет заключаться
[02:15:35.180 --> 02:15:42.860]  в том, что мы будем разбивать массив на то, что мы будем называть раны. Вот. Это, ну, раны,
[02:15:42.860 --> 02:15:49.580]  это будет такой под массив, отсортированный по убыванию и возрастанию. Вот. Значит,
[02:15:49.580 --> 02:15:54.980]  то есть, идея, ну, вот, то есть, сначала мы, там, прибежишь и разобьем, и потом эти раны будем
[02:15:54.980 --> 02:16:04.020]  в каком-то, там, каким-то экзотическим образом сливать. Но как моя нот? Это, как бы, основная
[02:16:04.020 --> 02:16:11.060]  идея. Но первая идея нот. Но, в принципе, идея, конечно, с разными моментами. Первый из этих
[02:16:11.060 --> 02:16:22.220]  моментов даже уже спален. А именно, мы введем число минран. Спрашивайте, что такое минран? Это
[02:16:22.220 --> 02:16:28.700]  некоторая, значит, мистическая константа, которую, там, Tim Peters вот взял, значит, как-то абстрактно.
[02:16:28.700 --> 02:16:33.740]  Вот. Ну, вот, да. То есть, видимо, из его экспериментов, видимо, вот возникло ощущение,
[02:16:33.740 --> 02:16:39.660]  что вот имеет смысл взять вот так. То есть, это число от 32 там до 65 где-то.
[02:16:39.660 --> 02:16:56.420]  То есть, выбираем, ну, вот он так предлагает. Вот. Ну, как сказать, это называется, да, я проводил
[02:16:56.420 --> 02:17:05.380]  практически эксперименты, у меня вот что-то вот так вот как-то получилось. Не, ну, как сказать,
[02:17:05.740 --> 02:17:12.220]  ну, как бы, ну, в этом коде сделано так. Берем n, берем 5 старших битов, по сути. Или там, ну,
[02:17:12.220 --> 02:17:17.940]  5, ладно, 6. И прибавляем единицу, если среди оставшихся бит есть хотя бы один ненулевой,
[02:17:17.940 --> 02:17:28.740]  по чему, то я не знаю почему. Да, ну, вот. Как бы, почему-то ему показалось, что так хорошо. Вот. Как
[02:17:28.900 --> 02:17:35.380]  называется, да. Как называется, да. И написал Тим вот это, и увидел он, что это, ну, вот вроде как-то
[02:17:35.380 --> 02:17:43.860]  работает. Вот. Значит, какая-то вот такая константа. Нет, просто зачем она нужна? Что же это такое?
[02:17:43.860 --> 02:17:55.060]  Ну, идея будет у нас заключаться в том, что мы теперь будем строить раны. Вот. То есть, есть
[02:17:55.220 --> 02:17:59.740]  максимально отсортированный нод. То есть, ну, идея в том, что мы просто идем слева направо и жадно
[02:17:59.740 --> 02:18:07.820]  набираем отсортированные массивы. То есть, идем-идем слева направо, до тех пор, пока он отсортирован
[02:18:07.820 --> 02:18:11.900]  там по возрастанию или по убыванию. То есть, как только он перестал быть отсортирован, значит,
[02:18:11.900 --> 02:18:17.140]  в этом месте мы ран останавливаем и набираем следующий. Прям тупо жадно за линию. Ну, тупо,
[02:18:17.140 --> 02:18:24.660]  но с оговоркой. Если ран не дошел до длины минран, то мы его добавляем прям жадно с помощью вставок.
[02:18:24.660 --> 02:18:36.780]  Ну, смотрите, первая идея. Да. Ну, то есть, без минрана это просто. То есть, задача,
[02:18:36.780 --> 02:18:42.100]  то есть, да, массив, надо его жадно разбить на отсортированные под массивы. То есть, идем слева
[02:18:42.100 --> 02:18:46.140]  направо, пока префикс отсортирован. Как только перестал, значит, останавливались, начиная с
[02:18:46.140 --> 02:18:54.900]  этого момента набираем еще ран. Вот. Вот. Ну, вот это работает за линию. Вот. Ну, как бы следующие
[02:18:54.900 --> 02:19:02.980]  части по-любому будут работать за n лог n, да. Поэтому в будущее хочется оптимизировать за счет
[02:19:02.980 --> 02:19:06.780]  того, что это n можно как-то увеличить. Видимо, предлагается сделать следующее. Давайте сделаем так,
[02:19:06.780 --> 02:19:10.700]  чтобы у нас ранов было не слишком много. Или раны были не слишком маленькие. Вот скажем,
[02:19:10.700 --> 02:19:18.100]  что раны должны быть не меньше, чем вот. Вот это константа. Вот. То есть, как мы это делаем? Ну,
[02:19:18.100 --> 02:19:22.260]  просто набираем отсортированный массив. Так, останавливаемся. Стоп. Так, если он слишком мало,
[02:19:22.260 --> 02:19:26.740]  ну, значит, мы жадно добираем до минрана. Просто каждый элемент делаем просто с вставки.
[02:19:26.740 --> 02:19:51.940]  Ну, например, так, да. Ну, это уже детали там. Можно сначала сделать с вставками, потом развернуть,
[02:19:51.940 --> 02:20:00.980]  если хочется. Так что это неважно. Нет, ну, а как набираете? Вы же по первым двум элементам
[02:20:00.980 --> 02:20:10.300]  определяете, он возрастающий или убывающий? Да. Ну, не особо. Это уже мелкая техническая деталь.
[02:20:10.300 --> 02:20:19.100]  Очень просто. Ну, как всегда, вот у тебя идет элемент 2, 5, 8, 1, 16. Следующий элемент так. 13.
[02:20:19.100 --> 02:20:27.100]  Так, таки. 13 меньше 16. Так, свапаем. 13 меньше 11. Нет, останавливаемся. Ну, да. Ну,
[02:20:27.100 --> 02:20:34.380]  как сортировки с ставками буквально? Нет, даже не нужен бинпоиск. Скажем так, видите,
[02:20:34.380 --> 02:20:39.940]  когда речь идет о такой константе, окажем, может оказаться, что бинпоиск даже менее
[02:20:39.940 --> 02:20:47.980]  выгоден, чем просто в тупой проход. Вот. Да, просто туп в этом месте обрезаем. Да.
[02:20:47.980 --> 02:21:05.460]  Нет, если меньше минрана, то да, делаем эти... Нет, если больше минрана, то все,
[02:21:05.460 --> 02:21:13.300]  ран в этом месте заканчивается. Нет, минран, да. Ну, просто если вы набирали жадный,
[02:21:13.780 --> 02:21:18.620]  и у вас эта жадность вот докуда-то дошла, его длина оказалась больше, чем минран,
[02:21:18.620 --> 02:21:26.980]  значит ран в этом месте останавливается. Набираем следующий. Нет, я это имел в виду. Мы идем,
[02:21:26.980 --> 02:21:31.180]  идем, идем. До тех пор пока отсортировано. А потом, когда мы остановились, смотрим,
[02:21:31.180 --> 02:21:41.460]  так, если получилось больше минрана, окей. Если меньше, то докидываем. А ну, скажешь так, ладно,
[02:21:41.940 --> 02:21:51.540]  но скажешь так, один мелкий ран в конце, это не страшно. Вот. Ну, в конце, ну, совсем в конце
[02:21:51.540 --> 02:21:56.740]  концов лишнее ОТМ-действие, типа, отсортируем то, что было до этого, и потом сольем с этим.
[02:21:56.740 --> 02:22:06.980]  Ну, минран, да, ну, как угодно, да. Но обычно, то есть в этом месте просто не заморачивается,
[02:22:06.980 --> 02:22:13.620]  просто у вас там будет, скажешь так, один совсем мелкий ран может быть, это не страшно. Вот.
[02:22:13.620 --> 02:22:24.860]  Итак, идем дальше. А вот тут, да, начинается, да, как-то, видите, вот, да, есть разница от
[02:22:24.860 --> 02:22:30.260]  общего описания. Ну, как я уже говорил, да, почему-то такие разные стили, да, обычно это так,
[02:22:30.260 --> 02:22:34.700]  то есть просто какая-то часть презентации осталась вот действительно, вот, собственно, от великого
[02:22:34.700 --> 02:22:39.620]  предшественника. Вот. Но обычно, если вы видите вот этот стиль, это значит, видимо, писал уже я.
[02:22:39.620 --> 02:22:47.540]  Потому что тут надо прям формально описывать, потому что, честно скажем, да, Тим Петерс тут
[02:22:47.540 --> 02:22:55.460]  тоже, как же, видимо, не сильно формально трудился в этом плане. Значит, сливать раны, но, собственно,
[02:22:55.460 --> 02:23:00.700]  это будет практически, скажем так, это будет, как бы у нас будет три части алгоритма, и это,
[02:23:00.700 --> 02:23:04.540]  собственно, будет вот вторая часть, единственная часть, в которой будет работать не за линию.
[02:23:04.540 --> 02:23:11.180]  И она будет работать так. Значит, мы эти раны будем хранить как-то в стеке. Ну, не в смысле сразу
[02:23:11.180 --> 02:23:17.020]  пихнем в стек, а, значит, вот как. То есть у нас есть раны. Вот, допустим, их N штук. Допустим, да.
[02:23:17.020 --> 02:23:24.300]  Значит, смотрите, мы их будем, ну, основная идея такая, мы эти раны будем добавлять в стек,
[02:23:24.300 --> 02:23:28.140]  ну, не в смысле, конечно, прям все под массивы прям копировать в стек, естественно, да, понятно,
[02:23:28.140 --> 02:23:38.220]  что там информацию под массиве будем пихать в стек. Но при этом поддерживать, поддерживать там вот,
[02:23:38.220 --> 02:23:47.940]  вот тут я даже скажу так, такого рода инвариант. Такого рода. Почему такого, почему я говорю,
[02:23:47.940 --> 02:23:52.500]  такого рода, а не прям вот ровно такой? А вот потому что, ну, потому что, скажем так,
[02:23:52.500 --> 02:23:57.220]  такой предлагает симпетр, что доказательства он не предлагает. Поэтому, как бы, тут возникает
[02:23:57.220 --> 02:24:00.420]  вопрос либо доказать именно такого вида, либо все-таки чуть-чуть подматифицировать,
[02:24:00.420 --> 02:24:05.700]  чтобы доказательство сходилось. Потому что там, честно скажу, я не допроверял, к сожалению,
[02:24:05.700 --> 02:24:10.380]  значит, информацию совсем, но там ходили случаи, что в какой-то интерпретации того,
[02:24:10.380 --> 02:24:16.100]  что написал симпетр, просто взяли, просто предложили контртест. Так что там вот аккурат.
[02:24:16.100 --> 02:24:26.980]  Вот какой-то интерпретации. Нет, ну как лажу. Нет, скажем так, у него была идея,
[02:24:26.980 --> 02:24:32.180]  но как бы он ее формально не довел, поэтому как бы. Вот, то есть на самом деле, да, то есть,
[02:24:32.180 --> 02:24:37.580]  ну смотрите, просто, ну какая, сейчас я вам скажу наметку идеи, которая тут предлагается. Вот давайте
[02:24:37.580 --> 02:24:44.660]  значит инвариант поддерживается такой, вот у вас хранятся в стеке несколько раундов. Вот давайте
[02:24:44.660 --> 02:25:00.540]  так это все уберем. Безобразие. Ой, все-таки да, испаряется потихоньку мещерин. А онлайн?
[02:25:00.540 --> 02:25:08.180]  А, в смысле, ну? А, ну да, да, да, нет. А, ну да, логич. Нет, то это логич,
[02:25:08.180 --> 02:25:16.420]  то да, он там, собственно, тоже там на свадьбу поехал, это да. Не, на свадьбу, ну да. Таня Бабичевой.
[02:25:16.420 --> 02:25:21.860]  Ну, если кто был там, кто был в олимпиадных школах, там знаете, такое. Ну, по крайней мере,
[02:25:21.860 --> 02:25:28.020]  до недавнего времени она была там. Нет, Татьяна Бабичева. Так, ну, значит, кто это,
[02:25:28.020 --> 02:25:33.100]  значит, кто это такая? Так, ну, кстати, кто был в олимпиадных школах МФТИ? В любом отделении.
[02:25:33.100 --> 02:25:41.980]  Чего-то мало, нас становится мало. А, ну, как нас, господи, я уже там не работаю, господи.
[02:25:41.980 --> 02:25:48.500]  Ладно, не важно. Нет, не путается ЛКШ. Нет, просто нет. Ну, просто нет. Она просто Таня Бабичева
[02:25:48.500 --> 02:25:52.700]  долгое время там была методистом отделения математики. Правда, последнее время, но в какой-то
[02:25:52.700 --> 02:25:56.940]  момент она уже давно там на самом деле живет во Франции, поэтому часто она там делала работу в
[02:25:56.940 --> 02:26:00.300]  основном удаленно. Собственно, на месте все там картинировал я и мещерин, но сейчас он,
[02:26:00.380 --> 02:26:12.400]  собственно, полновластный методист, отделение математики. Так что, да. Это называется. О
[02:26:12.400 --> 02:26:16.380]  связи чисто математике-программирования. Это называется, да. Как кон removal shearing. Да,
[02:26:16.380 --> 02:26:18.780]  или ось게ин. Там олимпиянник по математике, значит, методист. Значит, по математике преподает
[02:26:18.780 --> 02:26:26.260]  C++. heels Almost. Филипп Рухович, олимпиадник по алгоритмам. Препродадут алгоритм… методист
[02:26:26.260 --> 02:26:30.940]  деление математики кандидат физмат наук внимание вопрос точно ли мы ничего не
[02:26:30.940 --> 02:26:36.900]  перепутали нету я когда вот ну ладно почем впрочем возможно в какой-то момент
[02:26:36.900 --> 02:26:42.340]  илья защитится и собственная шутка перестанет работать но соответственно так
[02:26:42.340 --> 02:26:53.260]  но она но она и так уже слишком сложная да ну ладно так неважно нет ну да просто
[02:26:53.820 --> 02:26:58.100]  я кандидата я кандидат физмат наук мне при этом у меня работа по чистой математике как бы
[02:26:58.100 --> 02:27:06.100]  соответственно так что нет нет у нас нет на самом деле нет в этом месте шутка и заканчивается
[02:27:06.100 --> 02:27:11.980]  потому что как бы и там результат математически но получен он с помощью компьютера да потому
[02:27:11.980 --> 02:27:15.380]  что да причем то есть для этого мне пришлось там реализовывать кучу вычислительной геометрии
[02:27:15.380 --> 02:27:24.180]  на самом деле не нравится просто не занимаетесь этим не занимаетесь конкретно внешкими бильярдами
[02:27:24.180 --> 02:27:29.540]  проблем вот нет если кому интересно понятно вы там легко можете нагуглить а ну как минимум
[02:27:29.540 --> 02:27:35.420]  можно нагуглить мою кандидатскую диссертацию в общем-то там ну скажем так можно нагуглить
[02:27:35.420 --> 02:27:38.940]  какие-то мои статьи но на самом деле если вы прочитаете кандидатскую то вы собственно там
[02:27:38.940 --> 02:27:44.740]  вы прочитаете практически все что там можно найти в том статьях и даже больше на самом
[02:27:44.740 --> 02:27:51.940]  деле вот но это уже такой но это просто если кому интересно вот так что нет это был вопрос
[02:27:51.940 --> 02:28:00.260]  такая тайна бабичева вот такая связь но вот ладно неважно вот
[02:28:09.420 --> 02:28:16.740]  значит и так так на чем мы там остановились так мы остановились вот на чем значит мы остановились
[02:28:16.740 --> 02:28:24.660]  на том что у нас таких стиксы грз и происходит дальше следующее то есть дальше у нас происходит
[02:28:24.660 --> 02:28:32.900]  то что то есть у нас есть стэк и так у нас есть стэк ранов вот
[02:28:39.900 --> 02:28:45.700]  вот то есть ну тут какие-то вот раны они имеют какие-то длины вот рассмотрим какие-нибудь
[02:28:45.700 --> 02:28:51.100]  подряд идущие вот тут тогда аккуратно потому что там тетим петер предлагал вариант что мы
[02:28:51.100 --> 02:28:57.100]  храним только инвариант только для трех верхних стэков и на самом деле это потом проблемы потому
[02:28:57.100 --> 02:29:01.900]  что непонятно будет почему там в будущем это будет соблюдаться там всякие проблемы начнется с
[02:29:01.900 --> 02:29:08.100]  этим ну и мы-то показалось видимо типа очевидным но знаете как бывает знаете как бывает в этом
[02:29:08.100 --> 02:29:13.500]  пишет какой-нибудь контролью работы пити очевидно а потом возвращается вам оценка 2 и подпись но неверно
[02:29:13.500 --> 02:29:27.020]  ну вот ну да а тут вы пишите но неверно вот вот так вот здесь у нас идут три подряд идущих рана
[02:29:27.020 --> 02:29:35.100]  иксы грз так да но важный момент да вот видите как полезно все формально просчитывать да в данном
[02:29:35.100 --> 02:29:44.020]  случае наоборот я читал что быть вы верно следующее во первых должно быть верно пишем что игрок
[02:29:44.020 --> 02:29:54.620]  больше z но в смысле ну хорошо да но это тот как раз интуитивно понятно что имеется в виду
[02:29:54.620 --> 02:30:02.220]  что имеется длины и во вторых еще должно быть верно что модуль x должен быть больше чем сумма
[02:30:02.620 --> 02:30:11.460]  этих вот стоящих на нем сверху длина да почему я но вот вот но я эти условия пишу для того чтобы
[02:30:11.460 --> 02:30:16.180]  потому что вот эти условия потому что для вот двух верхних ранов должно быть выполнено что этот
[02:30:16.180 --> 02:30:23.140]  меньше это и конечно же еще формально конечно надо добавить что для двух нижних тоже этот знак больше
[02:30:23.140 --> 02:30:29.020]  выполнится то есть по сути но первые условия говорит о том что она говорит что как бы раны идут в порядке
[02:30:29.020 --> 02:30:38.220]  строгого убывания ну как мы сейчас посмотрим значит это смотрите идем вот так значит сортированно
[02:30:38.220 --> 02:30:44.060]  но для любых трех подряд идущих верно что тут еще более интересно все работает еще работает то
[02:30:44.060 --> 02:30:52.620]  что каждый следующий больше чем сумма предыдущих ну как почему в два
[02:30:52.620 --> 02:31:02.540]  но на самом деле да то есть как бы да то есть можно на самом деле перейти к третьей
[02:31:02.540 --> 02:31:09.100]  фазе то есть идея будет в том что мы будем добавлять раны в стэк и каким вот и если этот
[02:31:09.100 --> 02:31:15.460]  инвариант нарушается то каким-то образом будем значит сливать раны да имейте в виду конечно что в
[02:31:15.460 --> 02:31:20.900]  каждый момент времени набор этих ранов представляет собой там префикс от сортированного массива и
[02:31:20.900 --> 02:31:27.620]  в любой момент мы можем взять какие-нибудь два рана и их смерчить и тогда в стэк добавить
[02:31:27.620 --> 02:31:38.900]  вместо вот скажем вот этих двух ранов один единый на игре плюс но да но просто вы по ранам будете
[02:31:39.900 --> 02:31:43.460]  идти слева направо поэтому по факту это будет префикс
[02:31:43.460 --> 02:31:59.900]  но для этого как бы для того чтобы они стали единым массивом придется их слить и тогда и тогда вы
[02:31:59.900 --> 02:32:06.300]  можете убрать эти раны из стэка вместо этого добавить единый ран на x плюс и как да но как
[02:32:06.300 --> 02:32:12.700]  конкретно это делать это действительно большой вопрос вот но тут идея такая то есть у нас как
[02:32:12.700 --> 02:32:17.500]  бы алгоритма три фазы первая фаза формирование ранов самих по себе вот этим жадником которые
[02:32:17.500 --> 02:32:26.820]  мы обсуждали с минраном да вот это первое второе второе вы добавляете эти раны в стэк попутно
[02:32:26.820 --> 02:32:32.060]  каким-то образом дебил там попутно делая какие-то слияния между ранами добиваясь того чтобы у них
[02:32:32.060 --> 02:32:39.660]  были выполнены вот эти варианты и третья фаза будет очень простой вы пробегаетесь сверху вниз и
[02:32:39.660 --> 02:32:51.660]  в каждое время берете там два верхних рана сливаете их пихайте это и все вот да ну да сначала
[02:32:51.660 --> 02:33:00.700]  формируем стэк потом его как бы досливаем вот так что вот у нас так что алгоритм устроим так
[02:33:01.300 --> 02:33:02.820]  о
[02:33:02.820 --> 02:33:07.780]  чего как
[02:33:07.780 --> 02:33:19.340]  ой боже боже вы это не не не не не не пугайте тима петерса ну может и похоже я не знаю но я не знаю там
[02:33:19.340 --> 02:33:26.620]  мысли в том таких терминах но он такого не предлагал нет господи с раз переливайка может
[02:33:26.620 --> 02:33:34.660]  еще это декортичку еще написать но значит это вот основную канву это была основная канва
[02:33:34.660 --> 02:33:42.380]  а есть еще не симпатические оптимизации ну первая из них вот тот самый минран вот он да
[02:33:42.380 --> 02:33:54.940]  значит до нашего царя 32 до 65 65 даже не включить нет ну конечно но потому что минран это константа
[02:33:54.940 --> 02:34:01.420]  да да жирная но константа да обратите внимание да то есть это не логарифумы чего нельзя
[02:34:01.420 --> 02:34:10.140]  ну наверно можно но как я сказал тут тим петер сказал это называется да потому что она пошла по
[02:34:10.140 --> 02:34:15.060]  хорошему точно ответ на этот вопрос вы пишите и начинаете там на каких-то тестах тестировать это
[02:34:15.060 --> 02:34:19.820]  называется и может быть у вас выяснится что-то другое тем более тут все проблема том на чем вы
[02:34:19.820 --> 02:34:24.100]  будете тестировать потому что у него он наверно на свои там на данных со своей работы тестировал
[02:34:24.140 --> 02:34:28.620]  или еще откуда-то вы будете тестировать на своей потому что например может выясниться что если
[02:34:28.620 --> 02:34:32.660]  тестировать на там данных всего работает там оптимально иметь константы такие если вы
[02:34:32.660 --> 02:34:37.300]  потестируете на каких-то олимпиадных задачах то получится другое но там правда половине
[02:34:37.300 --> 02:34:43.900]  случаев правда данные будут буквально рандомные поэтому да поэтому было но поэтому может быть
[02:34:43.900 --> 02:34:47.900]  там чем сорт вообще не поможет выяснилось что интросорт на самом деле быстрее всего работает
[02:34:48.620 --> 02:34:55.340]  но тем не менее поэтому нет вот тут всегда все зависит от того на каких данных работаете на
[02:34:55.340 --> 02:35:00.220]  самом деле как бы на реальной практике это всегда это часто приводит к тому что стл начинают
[02:35:00.220 --> 02:35:06.620]  переписывать но потому что у стл всегда недостаток такой что бы какой-нибудь вектор он умеет там
[02:35:06.620 --> 02:35:12.540]  какие-то вот эти эти вещи а вот эти эти он не умеет а бывает что там конкретно ваши задачи вот я уже
[02:35:13.020 --> 02:35:18.260]  раз говорить про вот еще моего преподать в моего получается тоже великого предшественника в
[02:35:18.260 --> 02:35:23.220]  данном случае еще и моего преподавателя это вот предмета вот он рассказывал следующее что там что
[02:35:23.220 --> 02:35:28.660]  именно на работе но там так дорога но вот он работал тоже просто там в чем то связано с
[02:35:28.660 --> 02:35:33.340]  автомобилями в яндексе но я не помню ты конкретно индекса такси возможно тоже самые яндекс
[02:35:33.340 --> 02:35:39.100]  там к себе хотя нет тогда на этот overwhelmed не было вот хотя видимо может разрабатывалось а
[02:35:39.100 --> 02:35:43.500]  А, или он навига... А, он, наверное, это яндекс на виду, там, видимо, какой-то отражение к навигации имел.
[02:35:43.500 --> 02:35:44.300]  Ну ладно, не важно.
[02:35:44.300 --> 02:35:45.100]  Вот.
[02:35:45.100 --> 02:35:49.500]  Но рассказывал он примерно следующее, что там им потребовалось просто перерелизовать свой вектор.
[02:35:49.500 --> 02:35:55.100]  Ну, суть оказалась в том, что там какие... Что им нужны были от вектора какие-то там, может быть, чуть-чуть другие примочки,
[02:35:55.100 --> 02:35:59.100]  но при этом, как примочки, которые есть в Истреле, были там менее принципиальны.
[02:36:00.100 --> 02:36:02.500]  Поэтому в результате они там просто взяли и рецидовали свой.
[02:36:02.500 --> 02:36:04.500]  То есть вот... То есть это может быть оправданно.
[02:36:05.900 --> 02:36:07.500]  То есть, в принципе, это нормально на самом деле.
[02:36:07.900 --> 02:36:14.500]  Подгонять, взять какую-то свою реализацию или свои настройки под конкретные ваши нужды.
[02:36:15.500 --> 02:36:21.900]  Понятно. Есть, конечно, понятный универсальный алгоритм, который гарантирует вам асимпатическую оптимальность всегда,
[02:36:21.900 --> 02:36:25.900]  но одно дело асимпатическая оптимальность и другое дело конкретика.
[02:36:25.900 --> 02:36:30.700]  То есть вам же не надо, чтобы алгоритм работал за недолго, а вам, чтобы он работал не 5 секун, а 3, условно.
[02:36:30.700 --> 02:36:34.700]  И как бы часто оказывается, что там не асимпатические оптимизации важны.
[02:36:34.700 --> 02:37:04.700]  в общем там на практике вообще в принципе это там все по-разному иногда бывает что там чуть позже мы это тоже на самом деле с этим столкнемся суть бывает такая что иногда бывает такая что вы там делаете клипа от операции но при этом у вас еще какие-то запросы базе данных то куда-то там базе данных а это там запрос куда там едва ли не через интернет куда-то надо лазить и вам оказывается принципиально вы делаете вот реально и операции там запросов базе данных или вы делаете 5 операций
[02:37:04.700 --> 02:37:15.700]  запросы базе данных то есть оказывается что то есть это там то есть оказывается то есть это просто преимущество такое что вы там можете на самом деле у себя локально делать там это туатен с tensionу на самом деле
[02:37:15.860 --> 02:37:31.700]  можно быть можно выглiendo даже едва ли не многое сделать но при этом сделать 5 запросов базе данных это будет работать быстрее то есть на реальной практике то есть еще такое то есть вот такие вот штуки которые на олимпиаде как бы встретится крайне редко
[02:37:31.700 --> 02:37:38.500]  редко. Вот. Вот. Ну, впрочем, мы с этим сталкиваемся. Значит, смотрите. Теперь, значит, против сорня.
[02:37:38.500 --> 02:37:47.220]  Итак, значит, у нас есть такое. Так, ну, что еще можно делать при ране? Ну, здесь предлагается
[02:37:47.220 --> 02:37:51.500]  такое интересное, интересная неосимпатическая оптимизация на тему, смотрите, для того,
[02:37:51.500 --> 02:37:56.540]  чтобы слить раны обычно, то есть, там, смёржить какие-то сфоксированные массивы, обычно они оба
[02:37:56.540 --> 02:38:02.700]  копируются, правда? А теперь фишка. Если они лежат рядом, то есть, вот как бы у вас есть,
[02:38:02.700 --> 02:38:07.580]  допустим, вам нужно слить, как это часто бывает, в том числе и в мершсорте, данные два массива,
[02:38:07.580 --> 02:38:13.620]  и они лежат рядом. Хочется вот этот упорядоченный и этот упорядоченный. Хочется сделать из них
[02:38:13.620 --> 02:38:21.380]  единый упорядоченный, да? Ну, в идеале. Нет, ну, нет, смотрите, совсем за единицу не получится.
[02:38:21.380 --> 02:38:25.940]  Ну, с лёдом, по крайней мере. Да, у нас будет алгоритм, но, честно скажу, нам придётся повзрывать
[02:38:25.940 --> 02:38:31.300]  мозг, чтобы это сделать. То есть, там есть вообще хорошие неосимпатические оптимизации и даже,
[02:38:31.300 --> 02:38:40.740]  о чудо, корневуха. Да, вы когда-нибудь писали алгоритмы ЗООАТ с помощью корневухи? Вот сейчас,
[02:38:40.740 --> 02:38:47.420]  вот мы сегодня с таким столкнёмся, ну или в следующий раз, не знаю. Вот, так что тут мясо будет,
[02:38:47.420 --> 02:38:54.460]  то ещё. Вот, так вот, но здесь предлагается, по крайней мере, для надежды, есть более такая простая
[02:38:54.460 --> 02:39:00.260]  оптимизация, которую можно, вот идея такая. Дело в том, что копировать можно не оба массива,
[02:39:00.260 --> 02:39:06.060]  а только один из них, например, левый. То есть, идея заключает в том, что вы тупо копируете этот
[02:39:06.060 --> 02:39:11.380]  элемент, а потом, собственно, понятно, сливаете два указателя и ставите тут указатель и начинаете
[02:39:11.380 --> 02:39:22.020]  прям перезаписывать прям поверх этого. Залезет, но нам это будет неважно, потому что дело вот в чём,
[02:39:22.020 --> 02:39:26.900]  что в каждом интернете будет проходить следующее. То есть, у вас два варианта есть. Либо очередной
[02:39:26.900 --> 02:39:34.220]  элемент будет отсюда, и тогда вы просто берёте этот элемент, копируете сюда, и тогда, соответственно,
[02:39:34.220 --> 02:39:40.340]  сдвигаете этот указатель и сдвигаете этот указатель. Но тогда заметим, что если в будущем
[02:39:40.340 --> 02:39:46.700]  когда-то этот указатель зайдёт сюда, нам уже по барабану. Ну и, соответственно, второй вариант,
[02:39:46.700 --> 02:39:52.220]  это, на самом деле, если мы тут вот решили там действительно пум-пум написать, и тогда вот этот
[02:39:52.220 --> 02:39:58.580]  указатель сдвинуть, а этот дойти. Оказывается, на самом деле, всё в порядке. Почему всё в порядке?
[02:39:58.580 --> 02:40:05.500]  Потому что дело в том, что легко заметить, что всё на самом деле всё в порядке, если зелёный
[02:40:05.500 --> 02:40:13.140]  указатель никогда не догонит вот этот красный. А он его не догонит, потому что он не удалён ровно
[02:40:13.140 --> 02:40:18.740]  вот это расстояние, а они как бы либо синхронно двигаются, либо он к нему приближается за счёт этого
[02:40:18.740 --> 02:40:26.180]  элемента. Поэтому оказывается, что можно на самом деле сделать, то есть копировать лишние элементы
[02:40:26.180 --> 02:40:31.820]  можно только вот из левого массива. Или можно из правого делать, на самом деле это не принципиально,
[02:40:31.820 --> 02:40:40.340]  то есть получается можно сделать за от меньшего массива. Ну типа того. Вот такая вот интересная
[02:40:40.340 --> 02:40:51.460]  неосимпатическая оптимизация, впрочем, она нам тоже пригодится, кстати. Ну мы всегда сливаем
[02:40:51.460 --> 02:40:59.580]  соседние раны, да. Ну естественно, когда мы говорим, что. Потому что если у нас два массива лежат в
[02:40:59.580 --> 02:41:03.860]  рандомном месте, и нам нужно сохранить ответ в ещё более рандомное место, то как бы понятно,
[02:41:03.860 --> 02:41:09.940]  что эта оптимизация бессмысленна. Ну правда, если там уже третье место тоже совсем рандомное,
[02:41:09.940 --> 02:41:17.180]  то и копировать никого никуда не надо. Вот. Так что такой технический момент есть. А, ну вот,
[02:41:17.180 --> 02:41:27.060]  что ещё? А, ну что ещё есть? Да, есть мистическая, конечно, оптимизация, голубь. Вот. Так что,
[02:41:27.060 --> 02:41:30.980]  соответственно, да. То есть, малый, может, кто-то в музыкальной школе с таким словом сталкивался.
[02:41:30.980 --> 02:41:39.140]  Вы поднимите руки, кто в музыкальной школе учился, кстати. Интересно. А, ну, я тоже, кстати, да. Вот так,
[02:41:39.140 --> 02:41:42.700]  хорошо. Кто в музыкальной школе сталкивался со своим вот таким магическим словом голубь?
[02:41:42.700 --> 02:41:54.020]  Окей. Ну, малый. Ну, там пьесы обычно какие-то так называются. Вот. Не важно. Что такое голубь
[02:41:54.020 --> 02:42:01.340]  в данном случае? Потому что может обнаружиться случайно, что мы тут что-то думали, что вы
[02:42:01.340 --> 02:42:08.020]  очень много раз подряд двигаете один и тот же указатель. Просто в чём идея? Идея заключается в том,
[02:42:08.100 --> 02:42:14.380]  что копировать элементы по одному, это бывает медленнее, чем если вы копируете, значит,
[02:42:14.380 --> 02:42:20.100]  несколько элементов подряд, прям как-то скопом, с помощью каких-нибудь там мем цп айф. Ну, вот,
[02:42:20.100 --> 02:42:25.260]  вот этих вот, или других там низкоуровневых операций. Поэтому может оказаться существенным,
[02:42:25.260 --> 02:42:31.620]  что, ну, теперь, то есть, оказывается, если вы понимаете, что, например, там надо дальше туда
[02:42:31.620 --> 02:42:37.180]  скопировать просто следующие там 256 элементов, то есть, то есть идея, что, наверное, давайте поймём,
[02:42:37.180 --> 02:42:42.860]  что 256 и копировать будем единым скопом с помощью там этого там мем цп или там мем мува или вот это
[02:42:42.860 --> 02:42:48.380]  вот всё. Ну, вот, поэтому Тим Петерс говорит, вот Тим Петерс, оказывается, что если вы уже
[02:42:48.380 --> 02:42:52.740]  семь раз подряд двигаете один и тот же указатель, а давайте-ка, вот, помните, у нас уже была такая
[02:42:52.740 --> 02:43:00.340]  идея, помните, когда мы вот в инсершн сорте, да, что оказывалось, оказывалось, что как бы давайте
[02:43:00.340 --> 02:43:06.060]  бинпольском найдём, сколько там надо копировать и как бы всё это возьмём и скопируем. Ну, то есть,
[02:43:06.060 --> 02:43:09.740]  понятно, что есть тут трейдов, то есть, каждый раз, то есть, как бы, если вас много раз будете
[02:43:09.740 --> 02:43:20.580]  копировать по одному элементу, то этот бинпольск вам скорее жизнь испортит. Да, и потом скопируем
[02:43:20.580 --> 02:43:25.100]  единым образом. То есть, понятно, что трейдов, то есть, как бы, слишком быстро такое решение принимать
[02:43:25.100 --> 02:43:30.860]  нельзя. Да, понятно, то есть, как бы, там легче уже три элемента скопировать, чем бинпольск и запускать,
[02:43:31.620 --> 02:43:37.820]  но вот теперь, видимо, с 7, видимо, бинпольск и скопирование начинает обыгрывать тупые проверки.
[02:43:37.820 --> 02:43:49.260]  Нет, это, конечно, не асимпатическая оптимизация, боже упаси, хотя, я вам даже больше скажу,
[02:43:49.260 --> 02:44:05.620]  формально, ещё надо говорить нот. А, ну ладно. Да, но вообще-то, но на самом деле, как бы, нет,
[02:44:05.620 --> 02:44:10.180]  формально, кстати, это может вообще даже испортить симпатику, потому что, если вы делаете бинпольск по
[02:44:10.180 --> 02:44:18.100]  всему массиву, то на самом деле у вас получится N лог N. То есть, там, да, N поделить на 7 лог N,
[02:44:18.100 --> 02:44:23.660]  но, тем не менее, это всё равно N лог N, это всё равно не линия. Поэтому, конечно, нот, поэтому, конечно же,
[02:44:23.660 --> 02:44:38.220]  здесь имеется в виду его величество адаптивный бинпоиск. Что это такое? Ну вот, в данном случае,
[02:44:38.220 --> 02:44:51.020]  в данном случае имеется в виду следующее. В данном случае имеется в виду, в чём в этом месте начать?
[02:44:51.020 --> 02:45:02.180]  Ну, смотрите, расскажу так идею. Смотрите, идея будет такая, то есть, называется бинпоиск с подсказкой.
[02:45:02.180 --> 02:45:08.460]  Просто, смотрите, рассмотрим вот самую-самую классическую задачу на бинпоиск. Данный
[02:45:08.460 --> 02:45:16.580]  сортированный массив, скажите, пожалуйста, где в нём находится элемент равный х? Ну, понятно,
[02:45:16.580 --> 02:45:23.940]  где он находится? Ну, естественно, там вы делаете, запускаете бинпоиск и ищете. А теперь фишка. А теперь
[02:45:23.940 --> 02:45:31.340]  подсказка, а теперь вы решите функции там, дать вам подсказку. Подсказка даёт вам число поз и говорит,
[02:45:31.340 --> 02:45:42.340]  он где-то там. Нет, ну, но тут надо, но тут идея в том, что можно теперь тогда сделать не за логари,
[02:45:42.340 --> 02:45:51.420]  бинпоиск, не за логарифом от поза, а за логарифом от расстояния от поза до правильного ответа. Ну,
[02:45:51.420 --> 02:45:58.220]  во-первых, давайте посмотрим, не в позовой ли позиции находится этот х. Допустим, ну, если оказалось,
[02:45:58.220 --> 02:46:04.380]  что в позовой позиции, вот вы за 1 вам и нашли. Да, ну, как бы подсказка сработала. То есть вам
[02:46:04.380 --> 02:46:12.460]  правильно подсказали. Вот. Так вот. А теперь если нет, то предположим, что х оказался больше,
[02:46:12.460 --> 02:46:17.780]  то есть тут элемент какой-то меньше х, его надо искать здесь. Тогда, казалось бы, надо искать,
[02:46:17.780 --> 02:46:25.180]  можно сделать бинпоиск на всём этом суффиксе, но мы будем ситрее. Значит, идея такая, мы проверим,
[02:46:25.180 --> 02:46:32.940]  будем проверять поз плюс первый элемент, поз плюс второй элемент, поз плюс четвертый элемент,
[02:46:32.940 --> 02:46:40.300]  поз плюс восьмой элемент. Нет, потому что по степеням двойки. И будем так идти до тех пор,
[02:46:40.300 --> 02:46:47.140]  пока очередной элемент поз плюс два в степеника плюс один не окажется больше х, а какой-то
[02:46:47.140 --> 02:46:56.380]  элемент поз плюс два в степеника окажется меньше х. И теперь вот останется на вот этом подмассиве
[02:46:56.380 --> 02:47:03.300]  этот х уже реальным бинпоиском найти. Тогда обратите внимание, то есть ка тут оказывается
[02:47:03.300 --> 02:47:13.340]  такое, что получается расстояние дист, то есть получается такое, анс минус поз лежит на отрезке
[02:47:13.340 --> 02:47:21.660]  от, значит, два в степеника, два в степеника плюс один. Вот, ну что-то такое. То есть получается,
[02:47:21.660 --> 02:47:29.660]  то есть получается, что ка это тета от логарифма двоичного, там соответственно анс минус поз.
[02:47:29.660 --> 02:47:38.620]  Ладно, плюс один ещё. Напишем, чтобы тут с ноликами проблем не было. Вот, но обратите внимание,
[02:47:39.020 --> 02:47:46.380]  мы за этот логарифм в общем-то и работаем, потому что мы за о от ка нашли само ка, а потом ещё за о от
[02:47:46.380 --> 02:47:58.140]  ка здесь бинпоиском нашли сам х. Вот, это называется адаптивный бинпоиск. Вот, вот это называется
[02:47:58.140 --> 02:48:04.180]  адаптивный бинпоиск, он же бинпоиск под сказкой. Так что вот такая красота. То есть получается,
[02:48:04.180 --> 02:48:10.500]  что в худшем случае это будет тот же самый логар, если подсказка вообще левая оказалась. Вот,
[02:48:10.500 --> 02:48:20.260]  но если она оказалась, но чем более она не левая, тем быстрее вы нашли. Ну, откуда-то вот,
[02:48:20.260 --> 02:48:30.060]  с Немес по факсу прислали. В тем сорте, видимо, подсказка будет в самом начале. Да, подсказка будет
[02:48:30.060 --> 02:48:36.620]  в самом начале, потому что у вас идея, то есть идея, вот вы хотите понять, сколько элементов,
[02:48:36.620 --> 02:48:43.260]  вот сколько элементов на префексе этого массива будет там меньше вот этого. Допустим, их будет вот
[02:48:43.260 --> 02:48:48.820]  допустим тоже анс элементов. Вы вообще хотите это сделать с логарифмом, но не логарифм N глобально,
[02:48:48.820 --> 02:49:09.580]  а логарифм именно анс. А потом имеется в виду, ну скажем так, ну на самом деле да,
[02:49:09.580 --> 02:49:13.940]  то есть сначала пойти по возрастанию, потом по убыванию, это да, но правда это уже идентично
[02:49:13.940 --> 02:49:26.740]  обычному бинпоиску. Я боюсь, такие задачи, скорее всего, можно доказать,
[02:49:26.740 --> 02:49:34.420]  быстрее, чем залог N вы, наверное, не найдете. Бинпоиск сам залог K, за K, а K само,
[02:49:34.420 --> 02:50:02.860]  но скажи так, можно и так и так. Удобнее, конечно,
[02:50:02.860 --> 02:50:11.420]  пробежаться второй раз по степенями по убыванию, хотя это на ваше усмотрение.
[02:50:11.420 --> 02:50:28.060]  Если вы напишете функцию go от степени двойки, которая как бы либо прибавит степень двойки,
[02:50:28.060 --> 02:50:32.300]  либо не прибавит в зависимости от вот этого сравнения, то конечно вам будет удобно сначала
[02:50:32.300 --> 02:50:44.300]  идти, идем пока, до тех пор, пока пошли, а потом пробегаемся фориком обратно. Нет, ну можно,
[02:50:44.300 --> 02:50:49.220]  нет, по этим можно сделать так, а можно, как бы вы можете просто дойти фориком сюда, потом прийти
[02:50:49.220 --> 02:50:55.900]  сюда, а вот на этом под массиве вызвать эстаделл овербаунд. То есть в конце концов надо сфорить,
[02:50:55.900 --> 02:51:02.140]  что вы стояли, бинпоиск за вас уже реализовали. Нет, ну как он работает так же, как обычный бинпоиск,
[02:51:02.140 --> 02:51:08.940]  в общем-то, если вы как бы сформулируем так, если бы вам дали не вектор, а два итератора или не
[02:51:08.940 --> 02:51:12.900]  массив, а два указателя, то скорее всего бинпоиск вы написали бы ровно так, как там написано.
[02:51:12.900 --> 02:51:24.260]  Нет, просто не очень понятно, как его можно оптимизировать, если честно, потому что там,
[02:51:24.260 --> 02:51:31.340]  по-моему, там просто на шаблонах написано просто ровно то же самое. А что там можно оптимизировать?
[02:51:31.340 --> 02:51:39.540]  Там, возможно, более правильно прибавлять итератора, разве что не более того. Так что
[02:51:39.540 --> 02:51:48.100]  там что такое хорошо? Так что что такое хорошо в данном случае еще вопрос? Вот, значит соответственно,
[02:51:48.100 --> 02:51:53.780]  так вот позволяется, что вот этот анс можно идти за лог анса, и это иногда помогает. То есть это
[02:51:54.100 --> 02:52:00.740]  идея называется адаптивный бинпоиск. Вот так что тоже иногда полезно знать, пригождается.
[02:52:00.740 --> 02:52:07.740]  Вот, значит, что у нас еще? Ну, соответственно, Галоп предлагает, что просто начинается какой-то
[02:52:07.740 --> 02:52:12.500]  момент, а давайте просто бинпоиском этот анс найдем, каким-нибудь адаптивным и, соответственно,
[02:52:12.500 --> 02:52:18.100]  количество сравнений мы будем уменьшать. Да, часто бывает, что действительно, кстати,
[02:52:18.100 --> 02:52:21.900]  да, вот важный момент еще действительно иногда бывает уменьшить количество сравнений, потому что
[02:52:22.060 --> 02:52:28.800]  обычно задача не асимпатически оптимизировать. Что вам нужно оптимизировать? Вам нужно посмотреть,
[02:52:28.800 --> 02:52:33.820]  так думайте, у вас алгоритм за n log n? Вы не можете улучшить асимптотику. Но можете попытаться
[02:52:33.820 --> 02:52:39.180]  оптимизировать, то есть сделать по константе меньше. Что нужно, чтобы сделать по константе
[02:52:39.180 --> 02:52:45.340]  меньше? Надо посмотреть, что вы конкретно делаете n log n раз и эту конкретную и сделать за меньшую
[02:52:45.340 --> 02:52:51.340]  константу. Это стандартная идея не асимпатических оптимизаций. Первая такая идея, выясняется. Что
[02:52:51.340 --> 02:52:56.540]  что если у вас там операции с остатком и вы n лог n раз берете процентик,
[02:52:56.540 --> 02:52:58.580]  то вам нужно просто попытаться от этого избавиться.
[02:53:00.100 --> 02:53:02.380]  Ну, классическая идея, да, то есть классическая оптимизация,
[02:53:02.380 --> 02:53:04.980]  думаю, многие из вас сталкивались с таким, что если у вас, например,
[02:53:04.980 --> 02:53:08.540]  надо по какому-нибудь простому модулю только складывать и вычитать,
[02:53:08.540 --> 02:53:10.300]  то можно вообще обойтись без процентиков.
[02:53:11.260 --> 02:53:14.140]  То есть можно писать там функции, которые там прибавляют и вычитают,
[02:53:14.140 --> 02:53:17.260]  он с помощью одного прибавления и вычитания и, возможно, ИФА.
[02:53:18.260 --> 02:53:21.300]  Вот, и это, оказывается, работает значительно быстрее,
[02:53:21.300 --> 02:53:27.820]  потому что, как известно, чисто аппоратно, значит, умножение и деление в компьютере
[02:53:27.820 --> 02:53:30.060]  работает дольше, чем сложение и вычитание ИФА.
[02:53:30.060 --> 02:53:34.180]  И получается вот такая красивая несимпатическая оптимизация.
[02:53:34.180 --> 02:53:37.940]  Ну, я думаю, это стандартная, я думаю, многие из вас применяли такую оптимизацию.
[02:53:37.940 --> 02:53:43.340]  Ну, поднимите руки, кто применял. Ну, практически все, да.
[02:53:43.340 --> 02:53:45.980]  Так что, кто не применял, берите на вооружение.
[02:53:46.380 --> 02:53:49.660]  То есть это помогает, причем даже промочит сильно.
[02:53:52.140 --> 02:53:54.900]  Ну вот, в принципе, слабая идея тоже.
[02:53:54.900 --> 02:53:58.740]  То есть надо посмотреть, что вы делаете конкретно N log N раз и попытаться оптимизировать.
[02:53:58.740 --> 02:54:03.980]  Вот в Фурьяке мы с таким столкнемся, что когда мы делаем N log N раз в какие-то три умножения,
[02:54:03.980 --> 02:54:05.980]  то, оказывается, можно делать не три умножения, а два,
[02:54:05.980 --> 02:54:11.020]  и тем самым едва ли не в полтора раза оптимизировать, собственно, алгоритм.
[02:54:11.980 --> 02:54:12.340]  Вот.
[02:54:13.700 --> 02:54:18.620]  Но в данном случае считать, что, скорее всего, сравнения будут весить не меньше, чем копирование элемента.
[02:54:20.460 --> 02:54:24.700]  Ну, есть такое, то есть, конечно, да, то есть заметим, что мы, конечно, изучаем алгоритмы.
[02:54:24.700 --> 02:54:25.820]  Да, можно там маркирочек?
[02:54:27.300 --> 02:54:29.020]  Да. Ага, все, спасибо, Ахрана.
[02:54:29.020 --> 02:54:37.020]  Вот, значит, когда мы берем, то есть в данном случае заметим, что мы сейчас изучаем алгоритмы,
[02:54:37.020 --> 02:54:42.620]  которые работают в принципе в модели тех самых камешков.
[02:54:44.020 --> 02:54:49.220]  Ну, потому что, как вот, потому что, ну, собственно, вы стояли, в общем-то, сортировка тоже предполагает,
[02:54:49.220 --> 02:54:52.860]  что дали какие-то элементы какого-то шаблонного типа, да,
[02:54:53.700 --> 02:54:58.260]  и вторым параметром вы подаёте так называемый компаратор.
[02:54:58.980 --> 02:55:02.180]  Что такое компаратор? Это тот самый черный ящик.
[02:55:03.180 --> 02:55:08.700]  То есть это тот самый черный ящик, который, собственно, берет два элемента и говорит,
[02:55:08.700 --> 02:55:10.780]  верно ли, что первый меньше второго, да или нет.
[02:55:10.780 --> 02:55:13.100]  По большому счету, то есть самое.
[02:55:13.100 --> 02:55:17.940]  Ну, там вы его можете не задавать, просто по умолчанию он тогда создает свой стандартный
[02:55:17.940 --> 02:55:20.060]  компаратор, который будет вызывать оператор меньше.
[02:55:20.060 --> 02:55:23.780]  Вот. Ну, там подробности сейчас расписывать не буду, тоже вы,
[02:55:23.780 --> 02:55:28.740]  то есть вы с этим обязательно столкнетесь, в чем, скорее всего, вполне вероятно,
[02:55:28.740 --> 02:55:34.860]  что какую-нибудь сортировку может вы там даже на C++ напишете, а может, впрочем, и нет, я не знаю.
[02:55:34.860 --> 02:55:39.860]  Вот. Итак, пойдемте дальше.
[02:55:39.860 --> 02:55:48.340]  Вот. А, да, слайды закончены. Да, но рассказ только начинается, да.
[02:55:48.340 --> 02:56:00.020]  Давайте. Вот. Так вот теперь пришло время. Нет, знаете, мы будем мыслить по-другому.
[02:56:00.020 --> 02:56:04.860]  Давайте еще раз. У нас было три фазы, да? Нет, я просто, знаете, в этом плаге я люблю так,
[02:56:04.860 --> 02:56:09.940]  что я люблю, как бы, отстегнуть самое простое, то есть, может быть, даже на уровне кодинга,
[02:56:09.940 --> 02:56:15.220]  да, потому что, то есть, просто для того, чтобы потом об этом не думать, то есть я,
[02:56:15.220 --> 02:56:19.820]  как бы мысленно скидываю из себя всякие мелочи для того, чтобы потом сосредоточиться на
[02:56:19.820 --> 02:56:25.300]  главное, то есть, в принципе, я даже иногда там какие-нибудь задачи. Точнее всего там как-нибудь
[02:56:25.300 --> 02:56:30.740]  сложные задачи, хотя бы на сколько-то сложные, я должен написать там несколько мелочей и,
[02:56:30.740 --> 02:56:35.140]  как бы, самоинтеллектуальное. То есть часто бывает, что я вот понимаю, что мне это надо
[02:56:35.140 --> 02:56:38.820]  интеллектуальное додумать, но прежде чем додумать, то есть я знаю, как оно должно выглядеть,
[02:56:38.820 --> 02:56:42.780]  что это должна быть какая-то функция или какая-то структура вот с таким интерфейсом, и прежде чем
[02:56:42.780 --> 02:56:46.840]  чем приступать к реализации я пишу весь остальной код который это и использует.
[02:56:46.840 --> 02:56:53.880]  То есть тоже применяю те самые черные ящики, внутри черного ящика. Когда я буду писать черные
[02:56:53.880 --> 02:56:58.120]  ящики, я буду думать только о том как это реализовать, а в ней черного ящика будут думать только о том
[02:56:58.120 --> 02:57:04.380]  как его использовать и возможно какой интерфейс мне нужен. То есть я стараюсь чтобы эти задачи
[02:57:04.380 --> 02:57:09.640]  максимально не пересекались. Здесь мы поступим так, что у нас есть три фазы. Первая построение
[02:57:09.640 --> 02:57:16.040]  ранов, второе запихивание в стэк проверяем вариант, и третья фаза финальное слияние,
[02:57:16.040 --> 02:57:22.240]  то есть когда мы просто на каждый шаг берем два верхних и сливаем, потом берем два верхних и слияем
[02:57:22.240 --> 02:57:28.120]  и так далее и так далее и так далее. То есть на финальной фазе, когда мы уже просто этот стэк
[02:57:28.120 --> 02:57:34.880]  полностью сворачиваем, мы уже об инверианте не заботимся, мы просто идем сверху вниз. Так вот,
[02:57:34.880 --> 02:57:41.040]  то первая фаза очевидна, она работает за линию. А теперь давайте подумаем, за сколько работает
[02:57:41.040 --> 02:57:54.760]  третья фаза. Ну для этого можно задуматься вот о чем. Скажите пожалуйста, а сколько времени вообще
[02:57:54.760 --> 02:58:03.320]  это? А какого высота стэка вообще может быть? Ну да, логарифом. Самым простым образом можно
[02:58:03.320 --> 02:58:09.600]  убедиться в этом. Почему? Потому что на самом деле из вот этих вот условий на самом деле следует,
[02:58:09.600 --> 02:58:18.600]  что модуль Z меньше чем модуль X пополам. Ну достаточно очевидно мне кажется. Тогда это
[02:58:18.600 --> 02:58:24.920]  означает, что высота стэка не более чем два лога. Это уже оценка. На самом деле это два лога,
[02:58:24.920 --> 02:58:38.680]  это еще не точная оценка. Нет, ну смотрите, дело в том, что если у нас сказать, что эти раны идут
[02:58:38.680 --> 02:58:44.760]  там первый, второй, третий и так далее, пятый, то на самом деле оценка снизу на длины этих ранов
[02:58:44.760 --> 02:58:52.720]  получается что-то типа числа Фибоначи. Потому что F и плюс второе больше либо равно F и плюс
[02:58:52.720 --> 02:59:04.360]  F и плюс один. Ну и при этом значит F первое больше либо равно единице. Ну в принципе на самом
[02:59:04.360 --> 02:59:12.000]  деле из этого можно вывести, что там на самом деле F и Т просто будет больше либо равно чем
[02:59:12.000 --> 02:59:22.000]  константа Фи в степени и умножить может быть на какую-то там неадекватную константу С. Вот.
[02:59:22.000 --> 02:59:29.880]  Где Фи, что такое Фи? Правильно, Фи это решение квадратного уравнения, там Фи квадрат равно Фи плюс один.
[02:59:29.880 --> 02:59:41.680]  Вот. Откуда я это взял? Нет, если вы не знаете, это вообще не АЧФ, действительно, совершенно верно.
[02:59:41.680 --> 02:59:48.920]  Ну вот, пока, ну скажем так, может быть в будущем мы с этим, а ну да, в куче Фибоначи нам придется
[02:59:48.920 --> 03:00:06.320]  с этим столкнуться. Ну типа того, да. Нет, что, а у вас уже было на УКТЧ? Будет. Ну я надеюсь, ну я думаю,
[03:00:06.320 --> 03:00:15.000]  в худшем случае это будет у вас в четвертом семестре в диффурах. Нет, вот там вот действительно,
[03:00:15.600 --> 03:00:21.320]  ну я, ну там так, а ну мы это уже в прошлый раз, по-моему, обсуждали, там говорилось,
[03:00:21.320 --> 03:00:27.360]  что, допустим, у вас дана рекуррента вот эта вот Фи плюс два равно Фи, там плюс Фи плюс один.
[03:00:27.360 --> 03:00:33.240]  Впрочем, это хочется вывести формулу, чему равно ФН. А дальше вы говорите, ну что, очевидно же,
[03:00:33.240 --> 03:00:40.440]  ФН равно там какая-то константа на значит один плюс корень из пяти пополам в степени Н плюс
[03:00:40.440 --> 03:00:46.560]  какая-то константа на один минус корень из пяти пополам в степени Н. Ну там конкретно С1, С2 подгоняете
[03:00:46.560 --> 03:00:53.200]  с первых двух членов, а это оказывается по индукции. Да, что это такое, ну это просто, да, спрашивается,
[03:00:53.200 --> 03:00:59.120]  откуда, ну то есть так, доказать это действительно очень легко по индукции, откуда я это взял. Ну
[03:00:59.120 --> 03:01:04.240]  потому что, ну на самом деле, технология в данном случае говорит, а давайте, ну технология просто
[03:01:04.240 --> 03:01:10.560]  говорит, давайте найдем какой-нибудь такой мистическая лямда, такая, что лямда в степени И
[03:01:10.560 --> 03:01:17.960]  удовлетворяет вот этой рекурренте. Вот давайте попробуем такие лямды найти. Ну тогда это просто
[03:01:17.960 --> 03:01:25.080]  лямды должны удовлетворять вот этому уравнению, вот прям в точности, да, и вот это вот это тупо корень
[03:01:25.080 --> 03:01:30.600]  этого уравнения. Вот, но тогда, оказывается, но тогда из этого следует на самом деле такое, что,
[03:01:31.000 --> 03:01:34.360]  во-первых, как бы, там это в степени, удовлетворяет рекурренте, это в
[03:01:34.360 --> 03:01:41.460]  степени, удовлетворяет рекурренте, да, а осталось, осталось только сделать аккуратный вывод,
[03:01:41.460 --> 03:01:45.920]  что на самом деле, на самом деле любая, то есть это означает, что, во-первых, любая рекуррента
[03:01:45.920 --> 03:01:52.200]  такого вида удовлетворяет рекурренте, то есть любая формула, а во-вторых, легко, но отсюда,
[03:01:52.200 --> 03:01:56.040]  на самом деле, легко вывести, что, на самом деле, всё что угодно, что удовлетворяет рекурренте,
[03:01:56.040 --> 03:02:04.840]  имеет вот такой вид. Вот. Ну там просто можно,
[03:02:04.840 --> 03:02:10.280]  действительно, это будет уже там уже достаточно легко показать. Но там просто потому, что там все
[03:02:10.280 --> 03:02:15.320]  следующие члены, каждый следующий зависит от предыдущих, а как бы у вас как бы получается так.
[03:02:15.320 --> 03:02:20.000]  Есть какая-то рекуррента, удовлетворяющая вот этим условиям и начальным условиям. Есть вот эта
[03:02:20.000 --> 03:02:24.480]  формула, которая удовлетворяет этой рекурренте и начальным условиям. Следовательно, они совпадают.
[03:02:24.480 --> 03:02:30.640]  Ну, в принципе, я думаю, после не позже, чем первый семестр линейной алгебры, на самом деле,
[03:02:30.640 --> 03:02:36.880]  как бы это будет для вас стандартная логика. Потому что для вас не будет пугающим словосочетанием,
[03:02:36.880 --> 03:02:45.080]  что все возможные решения этой рекурренты образуют линейное пространство с рангом 2.
[03:02:45.080 --> 03:03:03.160]  Да, именно. Господи, да, базис. Вот. Так что да, но это не волнуйтесь, это как бы я проодонсировал
[03:03:03.160 --> 03:03:07.880]  вам курс линала. Но я не знаю, может конкретно у вас сейчас будет больше геометрии, чем линала,
[03:03:07.880 --> 03:03:12.640]  но ладно, не позже, чем первый год, вы это все равно так или иначе изучите. Это просто как-то это
[03:03:12.640 --> 03:03:21.640]  база. Так вот, но это уже, впрочем, мы опять немножко как бы решили погулять и посмотреть в красивое
[03:03:21.640 --> 03:03:27.200]  окошечко. Да, хотя как бы, ладно, это красивое окошечко нам еще встретится, как бы число фибоначи,
[03:03:27.200 --> 03:03:32.960]  как говорится, всегда-то броит где-то рядом, то есть у нас как бы куча фибоначи, а не куча тарьяна,
[03:03:32.960 --> 03:03:40.080]  и это не просто так. Хотя как бы ее могли назвать там кучей тарьяна, на самом деле, но вот.
[03:03:40.080 --> 03:03:48.160]  Ну вот, но как бы соответственно. Вот, итак, но в принципе, смотрите, что мы можем,
[03:03:48.160 --> 03:03:52.880]  какой мы вывод можем сделать. Раз высота логорифом, то в принципе отсюда автоматически следует,
[03:03:52.880 --> 03:04:03.480]  что это все сливается за N-луган. Да, с другой стороны, какой-нибудь Тим Петер, у Тим Петер
[03:04:03.480 --> 03:04:08.400]  сообщает, он считает, что это все слияние делается за линию. Почему? Ну очевидно же,
[03:04:08.400 --> 03:04:12.000]  что если тут, допустим, какие-нибудь там один, один, два, четыре, восемь, шестнадцать,
[03:04:12.000 --> 03:04:17.840]  тридцать два, то очевидно, что это как бы там все степени двойки схлопываются и получается линия.
[03:04:17.840 --> 03:04:27.360]  Ну нет, он как бы и человек, он может и неплохой, но математик он не очень. Нет, или в этом месте
[03:04:27.360 --> 03:04:32.040]  он не заморочился. Давайте так скажем формально, потому что теоретики может выяснить, что на самом
[03:04:32.040 --> 03:04:37.120]  деле он может включить формализм, но в этом месте он не посчитал. А вот давайте думать.
[03:04:37.120 --> 03:04:49.960]  Вот теперь давайте, вот уважаемые знатоки, внимание, вопрос. Верно ли, что тут работает за линию? Нет?
[03:05:07.120 --> 03:05:12.800]  Мы все добавили в стэк? Нет, я имею в виду, что мы все добавили в стэк, как бы все инвариант
[03:05:12.800 --> 03:05:18.600]  сохранился. То есть инвариант уже есть, и мы теперь вот сливаем сверху вниз. Вот возникает вопрос,
[03:05:18.600 --> 03:05:31.800]  не верно ли, случайно, что это работает за линию? Ну в принципе да. Ну да, то есть обратить
[03:05:31.800 --> 03:05:36.720]  внимание, что если брать вот это сверху, давайте вот снизу верх их нумеровать, давайте это будет
[03:05:36.880 --> 03:05:45.440]  х1, х2, х3, х4, х5 и так далее, то давайте посмотрим, сколько раз, как бы если мы будем суммировать
[03:05:45.440 --> 03:05:53.760]  все слияния, сколько раз каждый из этих элементов будет сливаться? Получится да, х1 будет сливаться
[03:05:53.760 --> 03:06:01.080]  один раз, х2 будет сливаться получается два раза, там тут три, четыре, ну и так далее. Получается,
[03:06:01.080 --> 03:06:08.440]  мы должны просуммировать, что мы должны просуммировать, то есть хит умножить на и,
[03:06:08.440 --> 03:06:17.680]  и равно там один до какой-то высоты h. Понимаете, да? С другой стороны мы можем заметить, то есть
[03:06:17.680 --> 03:06:21.280]  ну здесь мы не можем так оценить, что каждое следующее в два раза меньше предыдущего,
[03:06:21.280 --> 03:06:29.760]  но на самом деле получится так, сумма по всем и равно от 1 до h и процент 2 равно 1,
[03:06:29.760 --> 03:06:37.480]  х и умножить на и, ну давайте разделим эту сумму на суммы с нечетным индексом и суммы с
[03:06:37.480 --> 03:06:48.600]  нечетным индексом. Вот и процент 2 равно равно нулю, нет пока, ну по-разному, да, тут разная,
[03:06:48.600 --> 03:06:52.920]  но просто вот, нет, кто-то, просто как бы разные идеи, просто первая идея, которую я услышал из
[03:06:52.920 --> 03:06:57.680]  зала, это вот сказали, то есть давайте, что как бы действительно та же самая идея, что тут 1,
[03:06:57.680 --> 03:07:02.080]  2, 3 и так далее, вот я разворачиваю эту идею. Честно скажу, первое, что мне пришло в голову,
[03:07:02.080 --> 03:07:08.640]  это доказать по индукции, как мы это делали там, собственно, две недели назад, вот, а вот можно,
[03:07:08.640 --> 03:07:14.560]  ну вот, то есть тут вот, смотрите, что это такое, ну давайте так, я рассмотрю вот эту вот половину,
[03:07:14.560 --> 03:07:20.880]  потому что половина рассматривается аналогично, то есть это на самом деле равно, сумме по всем от и
[03:07:20.880 --> 03:07:31.320]  равно 1, там ж давайте, равно 1 до h пополам, х2 жt умножить на 2 ж, по большому счету, да, или что
[03:07:31.320 --> 03:07:41.880]  то же самое, давайте двойку вынесем сразу, ж равно 1 h пополам, х2 ж умножить на ж, но теперь замечаем,
[03:07:41.880 --> 03:07:58.440]  что х, что мы знаем, что х2 ж плюс первое, оно меньше либо равно х2 ж пополам, да, да, спасибо,
[03:07:58.440 --> 03:08:08.280]  значит х2 ж пополам, то есть это в принципе означает, что это меньше либо равно, чем 2 на сумму по всем
[03:08:08.280 --> 03:08:22.560]  ж от 1 до h пополам, что-то типа там, значит х2 умножить на что, то есть значит х2 умножить на 1
[03:08:22.640 --> 03:08:34.680]  делить на 2 в степени ж минус 1, вот так вот, и сверху умножить еще и на ж, да, ну вот, ну типа мы знаем,
[03:08:34.680 --> 03:08:40.360]  то есть х2 мы в принципе сразу выносим сюда, да, то есть давайте я так сразу напишу, ну можно это,
[03:08:40.360 --> 03:08:48.960]  я так напишу сразу, это равно 4 х2 на сумму там по ж от 1 до h пополам, ж поделить на 2 в степени ж,
[03:08:48.960 --> 03:08:59.960]  это равно там тета от х2, все, почему, потому что вот эта сумма, она не превосходит, мы уже выяснили,
[03:08:59.960 --> 03:09:07.440]  что она не превосходит 2, то есть она просто не будет, то есть получается эта сумма тета от х2,
[03:09:07.440 --> 03:09:13.400]  то есть это в общем-то тоже будет тета от х1, как легко убедиться, да, и тогда суммарно получается,
[03:09:13.400 --> 03:09:22.960]  что это финальное слияние выполнилось даже не за n лог n, а за линию, вот, то есть можно доказать и
[03:09:22.960 --> 03:09:27.320]  таким образом, можно доказать по индукции используя это, можно доказать что-нибудь по индукции,
[03:09:27.320 --> 03:09:34.560]  ну да, можно доказать по индукции что-нибудь про Фибоначчи, но это уже технические детали.
[03:09:43.400 --> 03:10:02.600]  Чего-чего-чего, еще раз, нет, ну да, время как бы у нас остается линией, мы никуда не денемся,
[03:10:02.600 --> 03:10:10.480]  по памяти-то да, но сейчас это не принципиально, мы сейчас время оцениваем, вот, так что получается,
[03:10:10.480 --> 03:10:16.840]  смотрите, что первая и третья фазы они получаются асимптотически не особо интересны, то есть,
[03:10:16.840 --> 03:10:21.240]  конечно, да, хотя, конечно, это важный на самом деле факт того, что высота стека у нас никогда не
[03:10:21.240 --> 03:10:27.160]  будет больше логарифма, ну ладно, вопрос только по какому основанию логарифма, там скорее всего
[03:10:27.160 --> 03:10:34.760]  логарифм будет не по основанию 2, а по основанию вот этому вот, ну не совсем, это не называется число
[03:10:34.760 --> 03:10:42.920]  Фибоначчи, это называется золотое сечение на самом деле, ну нет, ну как сказать, нет, сложно называть
[03:10:42.920 --> 03:10:50.080]  номером числа Фибоначчи заведомо иррациональное число, так что нет, скажем так, это, ну скажем так,
[03:10:50.080 --> 03:10:55.640]  вот фи, константа фи, вот это, это официальное название золотое сечение, то есть оно там еще где-то
[03:10:55.640 --> 03:11:00.840]  там соответственно появляется, то есть полезно помнить, что там эта штука еще равна примерно,
[03:11:01.440 --> 03:11:08.960]  значит, там 1.618, бла-бла-бла, вот, то есть, но она там встречается, то есть, возможно, если кто-то,
[03:11:08.960 --> 03:11:15.800]  то есть, в принципе, есть тернарный поиск на самом деле с золотым сечением, вот это все, но так что
[03:11:15.800 --> 03:11:27.840]  соответственно. Ну, наверное, да, нет, такого я слету не скажу, но как бы, нет, ну знаете, здесь я вам
[03:11:27.840 --> 03:11:32.200]  просто, если вы там откроете википедию золотое сечение, вы там просто целый список увидите,
[03:11:32.200 --> 03:11:39.280]  скорее всего, значит, что в математике значит это мистическое число, нет, оно воспето даже,
[03:11:39.280 --> 03:11:44.280]  собственно, даже в книге Дэна Брауна код де Винчи, хотя, казалось бы, там речь идет, казалось бы,
[03:11:44.280 --> 03:11:49.040]  даже едва ли не про Мону Лизу, на самом деле, про Мону Лизу там другое искусство, и выяснялось,
[03:11:49.040 --> 03:11:53.720]  что там фи может возникать просто везде, просто со ссылкой два линии к витруэнскому человеку,
[03:11:54.600 --> 03:12:02.840]  ну ладно, тут я уже совсем искусство копать не буду, собственно, как сказал бы классическая
[03:12:02.840 --> 03:12:09.160]  монашка из этого мира, тоже это не мой конек, соответственно, да, а вы с ней не сталкивались,
[03:12:09.160 --> 03:12:19.120]  да, нет, знаете, просто, нет, у меня просто были уроки МХК, ну, да, о господи, ну, как вам сказать,
[03:12:19.120 --> 03:12:30.160]  ну, да, перерыв, наверное, где-то должен быть, так, вот я не, но, на самом деле, не хотелось бы сейчас
[03:12:30.160 --> 03:12:35.600]  перерыв делать, нет, там вообще, ну, там, на самом деле, надо прокапываться, потому что, знаете,
[03:12:35.600 --> 03:12:39.880]  в какой-то момент один из вариантов ВАЗИК, это может уже идти, идти, идти, в какой-то момент я вас
[03:12:39.880 --> 03:12:47.560]  просто отпущу 15 минут пораньше, на самом деле, значит, нет, почему, но потому что, как бы,
[03:12:47.600 --> 03:12:56.280]  мы с вами темсорти еще недообсудили, вот, а в темсорти, а в темсорти начинается самое интересное,
[03:12:56.280 --> 03:13:03.440]  потому что в темсорти начинается, потому что есть вот эта финальная вторая фаза, и вот теперь надо
[03:13:03.440 --> 03:13:07.040]  очень внимательно, вот давайте возвращаем теперь слайд, тут действительно написано,
[03:13:07.040 --> 03:13:12.640]  что-то интеллектуальное во что надо вчитаться, ну, вот с этого места, тут-то мы все поняли,
[03:13:12.640 --> 03:13:25.440]  а вот тут надо прям думать, вот, тут прям вот начинается действительно что-то такое красивое,
[03:13:25.440 --> 03:13:35.600]  умное, вот, и теперь вот хочется, ну, вот, и это прям самое такое, то есть, конечно, в принципе,
[03:13:35.960 --> 03:13:41.360]  кажется, что раз высота стека логорифум, на самом деле, то, казалось бы, там каждый, то есть,
[03:13:41.360 --> 03:13:49.800]  каждый ранд будет, казалось бы, сливаться, но это, конечно же, не так, нет, ну, смотрите,
[03:13:49.800 --> 03:13:53.800]  ну, казалось бы, поддержка инварианта, да, как выглядит поддержка инварианта, мы добавляем
[03:13:53.800 --> 03:13:59.680]  новый ранд стек и проверяем, верно ли, что для верхней тройки, значит, инвариант выполнен,
[03:13:59.680 --> 03:14:05.320]  если, ну, если выполнен, то окей, если не выполнен, то здесь важный момент такой,
[03:14:05.320 --> 03:14:09.960]  берем, значит, тогда вот у нас есть тройка x и z, для нее инвариант не выполнен, берем y,
[03:14:09.960 --> 03:14:18.120]  смотрим, а кто меньше, x или z, ну, варианты разные бывают, да, ну, как бы, ну, изначально,
[03:14:18.120 --> 03:14:25.720]  да, но тогда что делать, если, значит, тогда, если x меньше, ну, то есть, самое простое,
[03:14:25.720 --> 03:14:33.000]  если z меньше, тогда сливаем y и z, и тогда, значит, они слились, у нас появляется тут y плюс z,
[03:14:33.000 --> 03:14:39.400]  но вот интересный вопрос, выполнил это теперь инвариант для, например, вот этой тройки, да,
[03:14:39.400 --> 03:14:47.320]  но мы делаем это вайликом, это было бы самое простое, но маленькая подлянка, а что делать,
[03:14:47.320 --> 03:14:54.520]  если x оказался меньше, тогда наш великий, наш тимпетр предлагает сливать не y и z, а y с x,
[03:14:54.520 --> 03:15:01.840]  тогда, но тогда, смотрите, подлянка заключается в том, он вообще, он в этом месте, видимо,
[03:15:01.840 --> 03:15:05.600]  предлагал не заморачиваться и просто говорить, давайте эту проверяем верхнюю тройку и не паримся,
[03:15:05.600 --> 03:15:10.880]  но как бы у меня, лично у меня нет гарантии, что такого не бывает, что скажем, вот для этого не
[03:15:10.880 --> 03:15:19.560]  бывает такого, что вот для этой тройки все в порядке, а для этой тройки нет, ну да, в общем-то легко
[03:15:19.560 --> 03:15:25.440]  придумать, да, поэтому как бы в данном случае, вот как видно, лично моя интерпретация такая,
[03:15:25.440 --> 03:15:32.640]  то есть давайте я сначала проверю вот эту тройку рекурсивно, а потом вот эту, ну то есть мысленно
[03:15:32.640 --> 03:15:40.520]  я скажу так, то есть я как бы выкину x, y, z хором из стека, после этого как бы рекурсивно добавлю туда
[03:15:40.520 --> 03:15:46.040]  x плюс y, там что-то тут поблаблашется, а потом в эту блаблаблашку я еще добавлю рекурсивно z.
[03:15:46.040 --> 03:16:00.800]  Нет, ну как сказать, ну по-разному можно делать, там нет, ну как сказать, нет, конечно же рекурсивно
[03:16:00.800 --> 03:16:05.280]  удалим, потом еще раз удалим и так далее, но просто фишка в том, что вот с x и z мы сделали так,
[03:16:05.280 --> 03:16:14.040]  мы как бы в этом процессе одно слияние сделали, поэтому как бы рекурсия бесконечной не будет,
[03:16:14.040 --> 03:16:19.360]  то есть как бы этим двум рекурсивным вызовом на самом деле перед этим соответствует просто одно слияние.
[03:16:19.360 --> 03:16:39.960]  Если у нас получается x будет больше, чем z,
[03:16:39.960 --> 03:16:49.160]  то мы сливаем, то мы достаем y и z, и как бы рекурсивно добавляем слитые y плюс z, а иначе мы
[03:16:49.160 --> 03:17:01.360]  достаем x, y, z, добавляем x, y, но рекурсивно или можно как-то валиками мысли, то есть воображая
[03:17:01.360 --> 03:17:12.320]  себе, что мы как-то умеем быстро как бы удалять. И теперь, собственно, у вас в домашнем задании будет
[03:17:12.320 --> 03:17:20.160]  задача доказать, что это работает за n log n, значит это или почти это, но я имею в виду, что конкретные
[03:17:20.160 --> 03:17:25.360]  условия может быть где-то вот тут, можно пошамай, то есть скажем, если вы, то есть вы должны будете в
[03:17:25.360 --> 03:17:29.960]  домашнем задании явно прописать условия, но как бы если вы тут напишете больше либо равно, то очевидно я не обиджусь.
[03:17:29.960 --> 03:17:40.520]  Ну, в смысле я, в смысле ассистент тоже не обидится. Нет презентации, пожалуйста выложу, это не проблема,
[03:17:40.520 --> 03:17:47.480]  тем более, что по-моему есть вероятность, что я это уже сделал, потому что я вам там какую-то большую презентацию
[03:17:47.480 --> 03:17:54.920]  другого года выложил, так что возможно там это все уже есть. Так что вот такая вот красота,
[03:17:54.920 --> 03:18:01.840]  вот, но значит наметки как-то как-то конечно делать, то есть к сожалению высота логарифом вам ничего не
[03:18:01.840 --> 03:18:07.120]  даст, потому что каждый конкретный ран может сливаться сколько угодно раз и при этом высоте не терять.
[03:18:07.120 --> 03:18:13.040]  Ну потому что вдруг там какой-то найдется ран, который будет кучу раз сливаться со всеми раными,
[03:18:13.040 --> 03:18:18.320]  которые тут выше будут набираться, вот поэтому этот вам придется мыслить действительно в
[03:18:18.320 --> 03:18:27.720]  терминах амортизационного анализа. Вот, ну то есть там разные конкретики, то есть скорее всего тут
[03:18:27.720 --> 03:18:32.200]  как раз вот очень удобно будет мыслить в терминах, а давайте-ка положим на каждый ран монетки.
[03:18:32.200 --> 03:19:01.720]  Ну вот это вообще интересно, то есть может быть, ну скажем так, нет, подляночка,
[03:19:01.720 --> 03:19:14.880]  смотри, если ты забудешь об этом условии, да, нет, ну как сказать, нет, один из тупых вариантов будет,
[03:19:14.880 --> 03:19:19.920]  нет, ну такой может быть, нет, но есть, конечно, вариант, да, сливать тупо игр plus z, потому что
[03:19:19.920 --> 03:19:27.240]  тогда как бы если x был меньше, то давайте сливать, то тогда все равно следующим шагом вы,
[03:19:27.240 --> 03:19:34.040]  видимо, сольете y, y, z с x, получается хоррор, но на самом деле да, с точки зрения доказательства так
[03:19:34.040 --> 03:19:39.240]  проще, конечно, но как бы у нас фишка в том, что мы имеем то, что нам заповедовал великий темпетокс,
[03:19:39.240 --> 03:19:45.000]  как бы да, потому что в принципе да, то есть в принципе на самом деле да, так можно и более,
[03:19:45.000 --> 03:19:49.840]  но ты и может быть это один из способов как-то тогда это на халяву там убедиться, что все в
[03:19:49.840 --> 03:19:55.600]  порядке, вот, но опять же, но как бы фишка в том, что в любом случае вам в том или в той или иной
[03:19:55.600 --> 03:19:59.360]  интерпретации, хотя философский вопрос, в какой интерпретации вам это будет проще делать,
[03:19:59.360 --> 03:20:05.560]  вам придется как-то формально убедиться, но вот один из классических способов это класть какие-то
[03:20:05.560 --> 03:20:10.840]  монетки, причем там на каждый ранг класть монеток там по количеству монеток, по количеству элементов
[03:20:10.840 --> 03:20:17.560]  ранее умноженные, ну, например, на высоту, ну просто фишка в том, что как бы получается, если x,
[03:20:17.560 --> 03:20:23.200]  например, вы сливаете там y с z, потому что z больше y, то как бы у вас получается высвобождается
[03:20:23.200 --> 03:20:29.920]  монеток, то есть у вас высвобождается там типа там o от z монеток и получается, что как бы у вас
[03:20:29.920 --> 03:20:38.360]  есть чем этот мерч оплачивать, но обратите внимание, да, то есть тут интересно, что монетки вам придется
[03:20:38.360 --> 03:20:43.520]  класть так, чтобы суммарное число монеток все-таки у вас было n лог n, но потому что сами понимаете,
[03:20:43.520 --> 03:20:48.760]  если у вас получится доказать, что это все работает за o от n, значит у вас что-то пошло не так,
[03:20:48.760 --> 03:20:55.400]  потому что мы с вами доказали, что как бы у нас все кроме этого работает за линию, нет, может вы,
[03:20:55.400 --> 03:21:00.880]  конечно, доказываете, что мы пробрались где-то в других местах, но как-то сомнительно, там слишком
[03:21:00.880 --> 03:21:05.680]  простые вещи, потому что вот это вот действительно самое сложное, но соответственно, просто
[03:21:05.680 --> 03:21:18.960]  готовьтесь, именно такое вот у вас в домашнем задании и будет. Нет, ну как вам сказать,
[03:21:18.960 --> 03:21:30.520]  нет, я сказал, что скорее, наверное, все-таки, ну ладно, нет, смотрите, как сказать, в принципе,
[03:21:30.960 --> 03:21:36.400]  ничего не стоит сделать две, но просто фишка будет в том, насколько нам эта амортизация в следующий
[03:21:36.400 --> 03:21:41.000]  раз глобально понадобится, хотя я подозревал, до кучи фибоначий мы в следующий раз, наверное,
[03:21:41.000 --> 03:21:47.880]  не доживем, но да, тут как показывает практика, то скорее всего мы до этого мержа рискуем сегодня
[03:21:47.880 --> 03:21:55.000]  еще не дожить, так что ладно, две, хорошо, две, ладно, нет смысла, ну то есть в любом случае,
[03:21:55.000 --> 03:21:59.880]  конечно, если вы, конечно, с этими задачами по раду, по занимаетесь уже раньше, то как бы
[03:22:00.880 --> 03:22:07.160]  в данном случае какой смысл вообще в этом дедлайне? Почему я не говорю, что дедлайн,
[03:22:07.160 --> 03:22:10.920]  скажем, когда-нибудь через месяц, через два, через три? Ну, просто, честно скажу,
[03:22:10.920 --> 03:22:14.680]  периодически практикуют какие-нибудь практически задачи дедлайн, ну короче,
[03:22:14.680 --> 03:22:23.560]  когда будет Зачет, всё. В данном случае дедлайн ставится раньше, потому что я хочу,
[03:22:23.560 --> 03:22:29.000]  чтоб перед тем, как мы будем что-то изучать, вы уже с этим поработали. То есть сейчас вот Venet,
[03:22:29.000 --> 03:22:33.480]  я вот максимально быстро ставил дедлайн по рекурентам то есть по этим точкам для того,
[03:22:33.480 --> 03:22:38.120]  чтобы как бы это это вошло вам уже в подкорку уже на этот то есть и мы как бы уже дальше
[03:22:38.120 --> 03:22:44.960]  мыслили именно в этих терминах вот это вот что я хотел вот собственно вот с амортизованным
[03:22:44.960 --> 03:22:49.360]  анализом тоже самое потому что у нас значительная часть алгоритмов будет этого требовать поэтому как
[03:22:49.360 --> 03:22:55.000]  бы нужно чтобы с этим поработали но практически в общем-то смысл смысл домашних заданий в общем-то
[03:22:55.000 --> 03:23:05.080]  по большому счету именно вот так ну ладно ну что господа ну что перерыв или уйдем порой
[03:23:05.080 --> 03:23:13.520]  нот или освободимся пораньше так ладно хорошо так ладно кто-то сомневается значит поехали так
[03:23:13.520 --> 03:23:21.800]  кто за то чтобы устроить перерыв так то за то чтобы звать сейчас тупо продолжить уйти пораньше
[03:23:21.800 --> 03:23:33.280]  ну да перед перерыв было чуть больше да ладно значит перерыв так передача мы сейчас делали
[03:23:33.280 --> 03:23:37.480]  сейчас мы пожалуй до сложно алгоритмы сейчас нужно обсуждать не будем что времени осталось вот там
[03:23:37.480 --> 03:23:44.280]  полчаса вот так что давайте стабильнее но вот поэтому конечно про просто там простые вещи
[03:23:44.280 --> 03:23:51.440]  да обсудим видим в следующий раз будем обсуждать уже сложные значит соответственно и так вот но
[03:23:51.440 --> 03:23:56.480]  во первых такие значит но мы обсуждали что сортировки бывают действительно бывает быстро и
[03:23:56.480 --> 03:24:02.680]  медленная они там бывают там с лишней памятью лишней памятью но есть еще одна один еще интервей
[03:24:02.680 --> 03:24:09.320]  периодически важный параметру сортировок это называется стабильность но этот параметр
[03:24:09.320 --> 03:24:15.280]  возникает когда условно вам не все равно когда вам не совсем все равно в каком порядке
[03:24:15.280 --> 03:24:20.480]  идут равный элемент но обычно если вы слетируете просто инты то да если они равны то в общем-то
[03:24:20.480 --> 03:24:26.200]  как их переставлять в общем там действительно принципиально ничего не поменяется вот но
[03:24:26.200 --> 03:24:30.800]  например если мы хотим сортировать числа по старшему разряду то нам бывает принципиально на
[03:24:30.800 --> 03:24:39.920]  самом деле в каком порядке потом сами числа идут вот иногда но поэтому значит у нас вводится
[03:24:39.920 --> 03:24:45.960]  определение что сортировка называется стабильной если при то есть если равные элементы идут ровно
[03:24:45.960 --> 03:24:55.120]  в том порядке в котором они были так ребят что там заржать претерпите полчаса пожалуйста а то
[03:24:55.200 --> 03:25:06.240]  просто не overly в тропы忙а Commonwealth интересно что там происходит вотeting вот
[03:25:06.240 --> 03:25:11.880]  но еще конечно начнет то есть табельно есть еще понятие локальный сINGSparents специальное
[03:25:11.880 --> 03:25:17.520]  определение называть сортировку локальные если она не требует дополнительной памяти ну уточним
[03:25:17.520 --> 03:25:22.900]  требует под единицы дополнительной памяти совсем без там дополнительной памяти не получится то что
[03:25:22.900 --> 03:25:28.100]  как бы понятно, что дополнительная память является даже там какой-нибудь это переменная ифорики,
[03:25:28.100 --> 03:25:33.300]  это как бы уже 4 байта дополнительной памяти, но мы говорим, что конечно, чтобы эта память была
[03:25:33.300 --> 03:25:39.700]  константной. Вот, ну в нашем случае, по крайней мере, вот оказался хипсорт локальный, мэкшсорт,
[03:25:39.700 --> 03:25:46.700]  по крайней мере, без дополнительных взрывов мозга, локальный не является. Вот, ну хотя да, в следующий
[03:25:46.700 --> 03:25:55.340]  раз мы изучим конкретный взрыв мозга, как сделать локальный, но да. Вот, но значит тут возникают
[03:25:55.340 --> 03:26:02.220]  действительно достаточно интересные моменты, значит возникают они так, то есть предположим,
[03:26:02.220 --> 03:26:10.300]  что иногда мы знаем точно, что мы сортируем, потому что фишка говорили, что мы, да мы, казалось бы,
[03:26:10.300 --> 03:26:16.500]  доказали, что у нас там быстрее, чем сзен локальный сортировать нельзя, но тем не менее, вот,
[03:26:16.500 --> 03:26:21.620]  например, у нас появляется задача, в которой отсортировать n элементов можно за линейное время,
[03:26:21.620 --> 03:26:31.900]  но если мы точно знаем, что у нас есть n целых неотрицательных чисел, меньше к, тогда оказывается
[03:26:31.900 --> 03:26:37.900]  само по себе их отсортировать, в общем-то, не сильно сложно, в чем, боже упаси, на самом деле в
[03:26:37.900 --> 03:26:44.100]  этом месте даже писать там какую-то страшную merge sort, потому что вместо этого вы можете просто
[03:26:44.100 --> 03:26:52.180]  для каждого числа от 0 до k-1 тупо посчитать за линию, сколько раз оно встретилось, а потом все
[03:26:52.180 --> 03:26:58.380]  элементы тупо выписали, все. То есть, если точка, ну, формально говоря, не за o от n, а за o от n
[03:26:58.380 --> 03:27:03.900]  плюс k, здесь вот появляется такой параметр, да, то есть если o от n, то подразумеваете, а почему
[03:27:03.900 --> 03:27:08.900]  мы всегда числа не сортируем вообще за линию, потому что если числа до миллиарда, то это будет
[03:27:08.900 --> 03:27:20.260]  работать не за o от n, а за o от n плюс миллиард, соответственно. Но, тем не менее, полезно помнить,
[03:27:20.260 --> 03:27:24.780]  что несколько маленькие, то есть, если вы сортируете там числа до 10, то, конечно же,
[03:27:24.780 --> 03:27:30.660]  лучше их сортировать вот таким вот способом. Вот он и просто пишется, и быстрее работает,
[03:27:30.660 --> 03:27:44.260]  и вообще. Ну вот, реализовать это можно примерно вот таким вот образом. Да, конечно же, ни в коем
[03:27:44.260 --> 03:27:51.660]  случае не забывайте удалять созданные массивы в конце. Видите, да, есть new, есть delete, но остальной
[03:27:51.660 --> 03:28:04.740]  код я не думаю, что для вас дает сильно большие проблемы. Или дает? Нет, ну ладно, я думаю,
[03:28:04.740 --> 03:28:10.300]  это как бы и да. Вот, но единственная, конечно, оговорка, что да, не надо было, конечно,
[03:28:10.300 --> 03:28:17.980]  форик писать вот так, потому что на самом деле вот эти две строчки не надо так писать. Я бы
[03:28:17.980 --> 03:28:23.420]  просто посоветовал уж конкретно эти две, вместо этих конкретных двух строчек на самом деле писать
[03:28:23.420 --> 03:28:35.860]  одну конкретную. Нет, как бы, если у вас задача обнулить сишный массив, да, то заклинание пишется
[03:28:35.860 --> 03:28:44.260]  так. Memset, значит, вот с, ноль, и в данном случае, ну, как вы гадаете, можно написать sizeof с,
[03:28:44.260 --> 03:28:49.700]  если хотите прям весь массив. А если там у вас какой-нибудь мульти-тест и вам нужно обнулить не
[03:28:49.700 --> 03:28:59.020]  весь массив, а только там от k условно, то можно было вместо этого sizeof написать sizeof от int умножить
[03:28:59.020 --> 03:29:12.340]  на к. Да, потому что это какая-то аппаратная функция. Ну, если field, то это шаблонная функция,
[03:29:12.340 --> 03:29:19.140]  которая, скорее всего, будет буквально пробегаться вот этим форумом. А это какая-то
[03:29:19.140 --> 03:29:24.740]  олдскульная сишная, которая говорит, вот вам массив, в смысле, вот начало массива, вот сколько
[03:29:24.740 --> 03:29:31.180]  байт. Вот каждый из следующих байт, скажем, вот столько байт, начиная с этого, должны быть равны вот
[03:29:31.180 --> 03:29:45.340]  этому вот. Нет, топ-рек, я бы в C++, нет, просто я так скажу, в C++ я боюсь, нету таких низкоуровневых
[03:29:45.340 --> 03:29:53.540]  функций тут в этом тело. То есть, так-то, с точки зрения шаблонов в СТЛ, да, есть field, это да. Вот,
[03:29:53.540 --> 03:30:01.460]  но как бы если хочешь, но как бы да, но в данном случае это вот конкретно. Вот,
[03:30:01.460 --> 03:30:09.500]  поэтому memset это вещь полезная. Вот, так что вот, как бы, по-хорошему, конечно,
[03:30:09.500 --> 03:30:15.300]  за нуля стоит вот таким, то есть, лучше не таким фориком, а вот к честным memset.
[03:30:15.300 --> 03:30:26.900]  Вот, идем дальше. Но, на самом деле, теперь, конечно, такая сортировка простая работает только в
[03:30:26.900 --> 03:30:32.580]  случае, если нам буквально надо отсортировать числа от нуля до k-1. А теперь представим себе,
[03:30:32.580 --> 03:30:36.260]  что нужно отсортировать, вот как мы говорили, массив по старшему разряду, например, или по
[03:30:36.260 --> 03:30:42.060]  младшему, или просто у вас есть какой-то там point, допустим, да, ну там point или любая другая структура
[03:30:42.060 --> 03:30:48.700]  данных, в которой есть какое-то поле от нуля до k-1, по которому хочется отсортировать. Вот,
[03:30:48.700 --> 03:30:54.060]  но оказывается полезно, значит, то есть, тогда просто так вот так фориком не напишете, то есть,
[03:30:54.060 --> 03:30:58.580]  там как бы недостаточно знать, сколько у нас элементов, то есть, сколько у нас элементов каждого
[03:30:58.580 --> 03:31:04.540]  типа нужно знать сами элементы. Но, на самом деле, конечно, первая идея, которая приходит, давайте
[03:31:04.540 --> 03:31:12.300]  вместо этих массивов сделаем вектор-векторов. Вот, но это не самое красивое, что можно сделать,
[03:31:12.300 --> 03:31:18.540]  потому что вектор это все-таки такая вещь, которую иногда по возможности стоит избирать,
[03:31:18.540 --> 03:31:23.860]  потому что все-таки вектор, как бы, считывая там все эти реаллокации, это все-таки по константе
[03:31:23.860 --> 03:31:28.980]  получается все-таки жирно. То есть, амортизировано нормально, но по константе немножко жирновато,
[03:31:28.980 --> 03:31:34.940]  поэтому желательно этого избегать. Но, на самом деле, есть, конечно, технологии, как это сделать,
[03:31:34.940 --> 03:31:44.580]  даже стабильную сортировку таких элементов, просто в статическом виде. Ну, статическом в том
[03:31:44.580 --> 03:31:50.780]  плане, что у вас все массивы статические. Вот, ну, там можно и в вектор, но в вектор вы
[03:31:50.780 --> 03:31:56.340]  просто с самого начала делаете массив, один вектор размера k, другой вектор размера n и все,
[03:31:56.420 --> 03:32:03.700]  в общем-то. И получается примерно следующее. То есть, давайте для каждой, ну, во-первых,
[03:32:03.700 --> 03:32:08.820]  да, все-таки мы не обойдемся от того, что давайте для каждого элемента посчитаем,
[03:32:08.820 --> 03:32:17.140]  сколько раз он встречается. Но этот массив легко превратить в, например, массив того,
[03:32:17.140 --> 03:32:22.500]  где будут начинаться, то есть, когда мы массив отсортируем, где будут начинаться элементы,
[03:32:22.500 --> 03:32:29.060]  равные вот этому. Ну, это легко просто фориком пробежать, правда? Ну, вот. Ну,
[03:32:29.060 --> 03:32:34.860]  а после этого будем идти по массиву A слева направо и, соответственно, записывать в соответствующие
[03:32:34.860 --> 03:32:43.140]  вот CIT, в CIT записывать очередной элемент и CIT увеличивать. Так, это понятно, что я говорю?
[03:32:43.140 --> 03:32:52.220]  Да, это два прохода, да. Чего? В один. Ну, в один такой не очень понятно,
[03:32:52.220 --> 03:32:59.820]  как когда у тебя произвольное количество групп не очень понятно, как в один. Вот. Да,
[03:32:59.820 --> 03:33:09.060]  тут вот код может выглядеть вот таким вот образом. Вот. То есть, как бы, смотрите,
[03:33:09.060 --> 03:33:14.340]  если мы храним именно начало групп, то придется тут вот такой какой-то код написать. Тут что-то
[03:33:14.340 --> 03:33:22.020]  похожее на swap, но вот этот плюсик не дает возможности сказать, что это swap. Да, это не swap.
[03:33:22.020 --> 03:33:29.460]  Вот. Ну и дальше получается, то есть, если кто-то писал когда-то суфф массив, то как бы вот это
[03:33:29.460 --> 03:33:34.420]  заклинание вам должно показаться знакомым. Ну как, кто хотя бы раз в жизни писал суффиксный массив?
[03:33:34.420 --> 03:33:43.220]  Так, ну тоже многие. Окей. Ну, в принципе, да. Возможно, это, кстати, первый раз в жизни,
[03:33:43.220 --> 03:33:48.340]  когда вообще с такими сортировками в принципе столкнулись. Вот. Ну, мы с ними вот сталкиваемся
[03:33:48.340 --> 03:33:54.900]  специально заранее в соответствующем месте. Вот. Ну, еще мы здесь сталкиваемся с тем, что если вы
[03:33:54.900 --> 03:34:00.160]  хотите скопировать массив, то, кстати, тоже есть еще одна низкоуровневая функция, которая сделает
[03:34:00.160 --> 03:34:09.800]  это быстро. Вот. Обратите внимание. Мем цпай. Ну, как бы, думаю, в немоника как бы понятно, да. Вот.
[03:34:09.800 --> 03:34:14.080]  То есть, конечно, тут немножко не реально забавно, действительно, какие тут параметры вы вставляете.
[03:34:14.080 --> 03:34:19.640]  То есть, очень важно, что сначала вы передаете указатель, куда копировать, а потом уже пишете,
[03:34:19.640 --> 03:34:27.240]  откуда копировать и сколько копировать. То есть, сначала там dist. То есть, это указатель там,
[03:34:27.240 --> 03:34:44.080]  если вы откроете прям там какой-нибудь cpp-референс. Ну, вот. Ну, значит, ошибка.
[03:34:44.080 --> 03:34:58.800]  Да, вот и прикол, да. Так что. То есть, типа, вем цпай надо куда копирдат. То есть, здесь как бы
[03:34:58.800 --> 03:35:11.720]  получается, действительно, аж о шрибочка. Ну, по сути, да. Да, я должен. Ну, а кто сказал, что как-то,
[03:35:12.160 --> 03:35:16.760]  а кто сказал, что она правильная? Нет, я сейчас, возможно, просто немножко перестал пользоваться
[03:35:16.760 --> 03:35:20.360]  презентациями, поэтому сейчас не помню. А так у меня в половине случаев любимый забавный. Все
[03:35:20.360 --> 03:35:27.720]  понятно? Найдите ошибку. Вот. Так что, может, она там где-то еще тут ошибка притаилась. То есть,
[03:35:27.720 --> 03:35:31.320]  я потом просто в какой-то момент обнаружил, что как бы показывая презентации, это как бы просто
[03:35:31.320 --> 03:35:36.720]  темп задирается просто до небес и это идет в ущерб принимабельности. Поэтому я так презентации
[03:35:36.720 --> 03:35:40.080]  сейчас вот. Сейчас я их использую, потому что я знаю, что ладно, эта тема еще будет там, собственно,
[03:35:40.080 --> 03:35:44.600]  достаточно понятно, известная, поэтому это можно промолтать быстро. А там, скажем, по каким-нибудь,
[03:35:44.600 --> 03:35:49.920]  то есть, скажем, по потокам, скажем, я уже презентации особо не показываю. Ну, и почти не
[03:35:49.920 --> 03:35:55.400]  показываю. Хотя, то есть, они у меня есть, я их когда-то там писал, но как бы, возможно, лучше
[03:35:55.400 --> 03:36:02.480]  без презентации просто будет медленнее и спокойнее. Поэтому тут вот еще такой момент есть. Вот. Ну,
[03:36:02.480 --> 03:36:11.360]  тогда. Так вот. Что еще есть? Ну, да. То есть, ну, в принципе, есть такая. Ну, вот, ну, в принципе,
[03:36:11.360 --> 03:36:17.080]  да, тут указывается у нас, как эта сортировка выглядит. Вот. Но идея, на самом деле, очень простая,
[03:36:17.080 --> 03:36:20.280]  видите? То есть, как бы, вот, допустим, мы хотим отсортировать вот эти элементы. То есть,
[03:36:20.280 --> 03:36:25.480]  сначала мы считаем, сколько каждого элемента от 0 до 5 встречается. Вот мы видим, да, что у нас
[03:36:25.480 --> 03:36:29.680]  там вот два или две троечки, а там одна единичка и так далее. Потом мы прибегаемся в форикам и
[03:36:29.680 --> 03:36:33.920]  выясняем, что там, где они будут начаться. То есть, там группа троечек будет начинаться,
[03:36:33.920 --> 03:36:42.000]  например, с единички. Видите, да? Ну, правда, почему-то равно, как и. Ну, вот. Ну, да,
[03:36:42.000 --> 03:36:45.800]  группа двоечек тоже. Потому что группа двоечек начинается там, где заканчивается группа единичка.
[03:36:45.800 --> 03:36:52.000]  Группа единичек заканчивается в 0 плюс 1. Поэтому тут один один, тут три, тут четыре. Ну, а дальше
[03:36:52.000 --> 03:37:02.080]  мы там уже прибегаемся и записываем, что в б-шке будет. Чего? Ну, пробежали, ну, пробежались как бы
[03:37:02.080 --> 03:37:07.920]  фориком. Это фактически префиксные суммы такие сдвинутые. Ну, потому что где начинаются троечки?
[03:37:07.920 --> 03:37:13.320]  Троечки начинаются ровно там, где заканчивается все предыдущее, правда? Поэтому мы в третий
[03:37:13.320 --> 03:37:25.880]  элемент C2 пишем 0 плюс 1 плюс 0. Понятно, да? Или непонятно? Все понятно. Вот. Так что получается так.
[03:37:25.880 --> 03:37:32.560]  Так что вот такая красота получается. Ну, в принципе, более популярная, конечно, в том же
[03:37:32.560 --> 03:37:39.000]  суфмассе, конечно, вы скорее найдете вот такую реализацию. Она отличается тем, что мы ищем не
[03:37:39.000 --> 03:37:47.840]  начало групп, а концы групп. Ну, потому что давайте найдем, где группы заканчиваются, и потом будем
[03:37:47.840 --> 03:37:58.640]  идти тупо с конца. Так что, как видите, тут все то же самое. Даже вот мим цепая бага та же. Вот.
[03:37:58.640 --> 03:38:05.400]  Соответственно, а так в общем-то суть абсолютно вот. То есть единственное, тут ТМПшки не надо,
[03:38:05.400 --> 03:38:12.160]  просто как бы вы пробегаетесь и насчитываете префиксные суммы по большому счету. Так что вот,
[03:38:12.160 --> 03:38:21.640]  в общем-то и все. Вот. То есть это более популярная такая реализация карманной сортировки. Тут
[03:38:21.640 --> 03:38:29.440]  скорее удобнее писать скорее. Ну, смотри, давай сравним. То есть как бы суть одна, суть одна,
[03:38:29.520 --> 03:38:39.160]  но тут просто какая-то гадость с ТМПшками, с лишними переприсваиваниями. Вот. А здесь ТМПшек нет.
[03:38:39.160 --> 03:38:44.680]  То есть это может так, ну, я не знаю, кому как. То есть первая, возможно, интуитивно более
[03:38:44.680 --> 03:38:50.840]  понятна на уровне идеи. Но здесь оказывается, что здесь просто чуть проще писать. Поэтому обычно
[03:38:50.840 --> 03:38:57.800]  пишут так. Хотя, на самом деле, по большому счету примерно то же самое. Ну, идейная, в общем, разница.
[03:38:57.800 --> 03:39:04.760]  Там, собственно, никакой нет. Слева направо или справа налево. То есть, наверное, если бы вы
[03:39:04.760 --> 03:39:10.400]  были из каких-нибудь арабских стран, может для вас это было бы интуитивно понятнее. Ну,
[03:39:10.400 --> 03:39:21.120]  это так я не знаю. Ну, я не знаю. В порядке это. Вот. Вот. Это в любом случае у нас сортировка под
[03:39:21.120 --> 03:39:28.040]  счетом или там карманная какая-нибудь. Мы это будем называть карманной сортировкой. Вот. Ну,
[03:39:28.040 --> 03:39:32.960]  у нас есть еще по-разрядной сортировка. Ну, просто идея такая, что если мы хотим отсортировать
[03:39:32.960 --> 03:39:38.440]  какие-нибудь числа, но чисел уже больше, чем 10, 20, 40, там, 10 в пятый или хотя бы N,
[03:39:38.440 --> 03:39:48.000]  то мы их так уже не отсортируем. Вот. Но, с другой стороны, если мы сортируем целые числа или,
[03:39:48.000 --> 03:39:56.240]  кстати, строки, то их можно разложить на разряды. Ну, понятно. Строки можно сортировать. Ну,
[03:39:56.240 --> 03:40:00.120]  строки так и сортируются. Помните, у нас же есть там лексиграфический порядок. Там по первой
[03:40:00.120 --> 03:40:05.640]  букве прорыва первых, по второй и так далее. Ну, по большому счету, на самом деле, если предполагать,
[03:40:05.640 --> 03:40:11.720]  что вам дали числа у всех, там числа, допустим, до 10 в 9, то можно предполагать, что у всех чисел
[03:40:11.720 --> 03:40:20.400]  по 10 разрядов. Правда? Можно такое предполагать? Ну, вот. То есть у вас получается по 10 разрядов,
[03:40:20.400 --> 03:40:25.120]  и, в принципе, их можно интерпретировать как строчки длины 10, которые вы хотите
[03:40:25.120 --> 03:40:36.080]  лексикографически отсортировать. Вот. И, в принципе, какие тут технологии есть? Ну,
[03:40:36.120 --> 03:40:48.560]  технологии бывают разные. Потому что, на самом деле, тут технологии делятся на ЛСД и МСД. Ну,
[03:40:48.560 --> 03:40:56.000]  в чем разница? То есть разница в том, с какой цифрой мы стартуем? С менее значимых или с более
[03:40:56.000 --> 03:41:05.360]  значимых? Вот. То есть, в общем-то, вот и вся разница. Ну, классический вариант, на самом деле,
[03:41:05.360 --> 03:41:12.200]  с которым вы сталкиваетесь в том же суфмассиве, это, собственно, это вариант least significant
[03:41:12.200 --> 03:41:20.160]  digit. Что это значит? То есть, идея вот такая такая. Давайте отсортируем числа сначала по младшему
[03:41:20.160 --> 03:41:26.440]  разряду, потом по второму по младшести, потом по следующему и так далее. Но фишка в том,
[03:41:26.440 --> 03:41:30.840]  что мы каждую сортировку делаем, ну, во-первых, мы делаем за линию, а, во-вторых, мы делаем
[03:41:30.840 --> 03:41:41.960]  устойчиво. Вот. Или стабильно. Да. Но, на самом деле, ладно. Если это называется, бывает и так,
[03:41:41.960 --> 03:41:47.400]  и так, на самом деле. То есть, можно стабильно, можно устойчиво. На английском звучит stable. В общем-то,
[03:41:47.400 --> 03:41:53.360]  слова примерно одинаковые. То есть, как бы просто слово стабильно, это большая калькас английского,
[03:41:53.360 --> 03:42:02.000]  на самом деле, чем устойчивая. Вот. То есть, вот такая классика. То есть, вот такая классика.
[03:42:02.000 --> 03:42:11.600]  То есть, это такая надежная железобетонная сортировка, которая будет работать в точности
[03:42:11.600 --> 03:42:19.760]  за какой симпточкой. Она будет работать за, получается, количество разрядов на вот n
[03:42:19.760 --> 03:42:32.520]  плюс k. Вот. Ну, и потребует еще от n плюс k до памяти. Вот. То есть, вот такая вот красота.
[03:42:32.520 --> 03:42:45.480]  В принципе, да. И более того, это нас может даже заставить задуматься. Потому что, смотрите,
[03:42:45.560 --> 03:42:51.520]  у нас, смотрите, какие у нас есть вообще параметры в такой сортировке. То есть, у нас есть обычно
[03:42:51.520 --> 03:42:59.120]  параметр n и параметр c. То есть, мы сортируем целые неотрицательные числа, не превосходящие c.
[03:42:59.120 --> 03:43:08.640]  Вот. Что у нас тогда появляется? У нас появляется какое-то, мы говорим, что c – это число в
[03:43:08.640 --> 03:43:14.640]  базычной системе счисления. Ну, то есть, системе счисления с основанием base. И точная симпточка
[03:43:14.640 --> 03:43:24.120]  оказывается от, значит, n плюс base на логарифм, причем тут важно, по основанию base c. Видите,
[03:43:24.120 --> 03:43:30.560]  так как тут переменная, то мне важно, по какому основанию. Да? Ну, обычно base – это какая-то
[03:43:30.560 --> 03:43:35.760]  константа, там типа два или десять. Да, поэтому тогда получается просто n лог c. То есть,
[03:43:35.760 --> 03:43:40.280]  формально говоря, радик-сорт работает за n лог c. Быстрее ли это, чем n лог n? Ну,
[03:43:40.280 --> 03:43:46.880]  тестируйте. То есть, понятно, что на практике просто ради, там, в СТД-сорт обычно, там, как бы это не
[03:43:46.880 --> 03:43:54.320]  пихают, но теоретически, может, и поможет. Но, на самом деле, у вас может возникнуть интеллектуальный
[03:43:54.320 --> 03:44:00.440]  вопрос. А какое base можно вообще подсудить? Ну, потому что, в принципе, заметим, что base,
[03:44:00.440 --> 03:44:05.280]  особенно если base какой-нибудь степень двойки подсудить, да, то вычленить подходящий разряд
[03:44:05.280 --> 03:44:09.960]  достаточно легко. Потому что, на самом деле, тут в этой сортировке не учтено, что вы там,
[03:44:09.960 --> 03:44:16.240]  когда сортируете по пятому разряду, то из этого числа пятый разряд неплохо бы выковырить. Но,
[03:44:16.240 --> 03:44:20.200]  если у вас base – это степень двойки, то с помощью битвах операций вы это делаете более-менее на
[03:44:20.200 --> 03:44:29.200]  халяву, правда? Ну, там, допустим, если у вас base равно, допустим, ну, я не знаю, 8, да, и вы хотите,
[03:44:29.320 --> 03:44:35.480]  ну вот, и вы хотите там выковырить пятый разряд. Ну, если мы идем справа-налево, начиная с единицы,
[03:44:35.480 --> 03:44:44.720]  да, то пятый разряд, тогда выковырить очень просто. То есть, это будет, значит, там x х 12,
[03:44:44.720 --> 03:44:52.280]  получается. Почему 12? Потому что 3, ну, 8 – это 2 в 3, да, поэтому 3 умножить на 4, да. То есть,
[03:44:52.280 --> 03:45:01.840]  получается 12 and 7. Все. Вот вы и выковырили нужный разряд за пару битвах операций. Вот,
[03:45:01.840 --> 03:45:08.680]  да, вот такая магия. То есть, в общем случае, это будет выглядеть там x х base,
[03:45:08.680 --> 03:45:21.240]  значит, умножить на, значит, номер этого разряда. Ну да.
[03:45:21.240 --> 03:45:37.000]  Ну, лучше написать, конечно, вот это, после этого сказать, что base равно там 1 х x log base. Конечно.
[03:45:37.000 --> 03:45:42.440]  Да, лучше так тогда. Да, тогда мы пишем здесь log base. Ладно, если нумеровать разряды с нуля,
[03:45:43.040 --> 03:45:53.280]  даже не надо писать. Так, и end получается, ну, что-то типа base – 1. Да. То есть, в общем случае,
[03:45:53.280 --> 03:46:01.440]  это вот так пишется. Нет, ладно, вру. Вот так. Да, лишние скобочки надо добавлять. Ну,
[03:46:01.440 --> 03:46:05.480]  у вас, может, конечно, выяснилось, что там приоритет операции будет в вашу пользу, но я вот.
[03:46:05.480 --> 03:46:16.240]  Чего? А вы не подсовываете туда отрицательное число. Вот это будет положительно и адекватно. Вот.
[03:46:16.240 --> 03:46:22.160]  Но просто нет. Ну, смотрите, в общем случае, когда у вас эти n и c действительно идут на
[03:46:22.160 --> 03:46:26.600]  бесконечность, ну, там мы, видимо, в следующий раз в этом подробнее поговорим, но часто суть в том,
[03:46:26.600 --> 03:46:34.200]  что обычно c у нас охраничена аппаратно. Потому что, как бы числа и, то есть, числа, с которыми вы
[03:46:34.200 --> 03:46:38.880]  можете работать за вот единицы, они заданы аппаратно. То есть, если у вас там какой-нибудь
[03:46:38.880 --> 03:46:47.600]  там 64-битный компилятор, то значит за вот единицы вы работаете с числами на 64 бита. Вот. Но,
[03:46:47.600 --> 03:46:53.000]  как бы, в общем случае, математика может думать, а как бы компьютеры будут развиваться, и битность,
[03:46:53.000 --> 03:46:59.120]  на самом деле, может тоже увеличиваться. И тогда симптотика, соответственно, может тоже как-то
[03:46:59.120 --> 03:47:05.120]  улучшаться. Просто в зависимости от этого, от n и c, можно думать, а какой base вообще подогнать?
[03:47:05.120 --> 03:47:19.120]  Чего? Ешка? Ну, это все равно и получится. Ну, по факту, если в base подставить e, получится n на
[03:47:19.120 --> 03:47:27.880]  линум c, и чего? Да, но в принципе, заметим, что можно немножко оптимизировать, на самом деле,
[03:47:27.880 --> 03:47:33.120]  эту штуку, сказав, что если base примерно n, ну, там подходящей степень двойки, то тогда это будет
[03:47:33.120 --> 03:47:51.400]  работать за n log base c. То есть log n там где-то c или что-то же самое n log c поделить на log n. То есть,
[03:47:51.400 --> 03:47:56.560]  на самом деле, обычную по разряду сортировку классическую можно оптимизировать в log n раз.
[03:47:57.560 --> 03:48:05.040]  Просто выбрав правильную базу. Ну, честно, я не пробовал, но в принципе, должно быть вот,
[03:48:05.040 --> 03:48:13.240]  ну как бы сортировайте миллион чисел, должно быть вот в 20 раз быстрее. Вот, так что в принципе да.
[03:48:13.240 --> 03:48:23.560]  Ну да, так что в принципе да, так что в принципе числа до 10 в 9, в принципе реально сортировать
[03:48:23.560 --> 03:48:33.960]  более-менее за линию, да. Ну да, нет, ну совсем сублинейное не получится, конечно. Вот, не,
[03:48:33.960 --> 03:48:38.120]  но там на самом деле чемпионаты на самом деле веселые, потому что в принципе, если вы сортируете
[03:48:38.120 --> 03:48:42.360]  какие-то инты, помещающиеся в регистр, то там и возникает этот вот чемпионат, про который я
[03:48:42.360 --> 03:48:47.560]  говорил, что именно такие сортировки, именно в таком виде и написано 2015 год, у нас новая статья,
[03:48:47.560 --> 03:48:54.760]  мы умеем сортировать n таких чисел от n log log n. Это оптимизация предыдущего алгоритма,
[03:48:54.760 --> 03:49:03.160]  который работал за n log log n, log log log n. Нет, там не log звездочка была, там просто log log n,
[03:49:03.160 --> 03:49:08.320]  это вот собственно реально там статья 2015 года есть. То есть там это вот серьезный чемпионат,
[03:49:08.320 --> 03:49:13.080]  но вот именно здесь вот мы можем сделать важную оговорку, то есть это сортировка именно интов,
[03:49:13.080 --> 03:49:18.960]  влезающих в регистр. То есть как бы понятно, что там камешей, это сортировка, там абстрактные
[03:49:18.960 --> 03:49:24.640]  камешки с компараторами, естественно, за такое время не отсортируют. Вот, то есть она пользуется
[03:49:24.640 --> 03:49:35.040]  именно тем, что это инты и она с ними работает. Вот, поэтому n log log n, не путайте. Вот. Какие еще
[03:49:35.040 --> 03:49:42.040]  варианты есть? Есть варианты, но теоретически есть вариант наоборот. А давайте пойдем слева на
[03:49:42.040 --> 03:49:47.440]  правый, давайте сначала отсортируем товарищей по старшему биту, а потом поделим все на отрезке
[03:49:47.440 --> 03:49:54.360]  по одинаковым, будем уже внутри себя сортировать. Такой подход называется мост с огнейшкин диджет.
[03:49:54.360 --> 03:50:01.840]  Вот, ну в принципе тут, тут на самом деле дальше по-разному можно делать. Потому что если делать
[03:50:01.840 --> 03:50:06.600]  это совсем в тупую, запускаясь рекурсивно, то по всем точкам, конечно, можно буквально чуть-чуть
[03:50:06.600 --> 03:50:15.640]  озрести очень сильно. Хотя, нет, на самом деле можно, но давайте подумаем. Там будет написана какая-то
[03:50:15.640 --> 03:50:20.680]  симптомика, давайте попробуем как бы это сами угадать. Вот представьте себе, что мы будем
[03:50:20.680 --> 03:50:25.640]  сортировать неожиданным образом. Мы вот дан подотрезок, мы его сортируем по нашему разряду,
[03:50:25.640 --> 03:50:32.200]  потом берем подотрезки, значит вот так вот, такие подотрезки с одинаковыми этими разрядами и
[03:50:32.200 --> 03:50:35.840]  запускаем сортировку рекурсивно, но уже по следующему разряду.
[03:50:35.840 --> 03:50:53.520]  Ну практически да, это N log N. Но это если будет так фантастически вести. Но на самом деле, хотя на
[03:50:53.520 --> 03:50:59.320]  самом деле, если как бы разрядов два, тут будут битные числа, то я утверждаю, что это в любом
[03:50:59.320 --> 03:51:06.360]  случае будет N log N. Почему? Потому что на каждом уровне суммарно вы все равно будете работать за
[03:51:06.360 --> 03:51:14.000]  OATN. Ну да, логарифм уровней за каждым суммарно за OATN, потому что двойка – это констант. Но
[03:51:14.000 --> 03:51:20.040]  проблема в том, что если у вас вылезет бейс, то с бейсом у вас будут проблемы. Почему? Потому что
[03:51:20.040 --> 03:51:28.360]  на каждом уровне будет сколько-то рекурсивных запусков, и из каждого из них бейс вылезет.
[03:51:28.360 --> 03:51:43.600]  Ну это если бейс от константа. Бейс же это не константа, мы с Шаманем. Но теперь давайте думаем.
[03:51:43.600 --> 03:51:53.520]  Нет, ну там просто, ну смотрите, давайте думать. То есть у нас в каждом массиве будет длина этого
[03:51:53.520 --> 03:52:03.400]  массива плюс бейс, правда? Ну теперь давайте, ну вот, то есть сумма, давайте так, то есть сумма по всем
[03:52:03.400 --> 03:52:14.800]  левелам от одного до сколько там log bz получается. Нет, не log bz. Что получается? Да, log bz получается.
[03:52:14.800 --> 03:52:26.160]  Ну вот, и в каждом левеле получается, значит, i равно 1, там col i t, я это напишу. Ладно, col level t.
[03:52:26.160 --> 03:52:43.320]  Получается, значит, n i t, значит, n, вот так напишу, level i t плюс бейс. Ну потому что, смотрите,
[03:52:43.320 --> 03:52:52.520]  на первом уровне у нас всего один отрезок длины n, это равно n 1 1. Да, там вот тут он подразбивается на
[03:52:52.520 --> 03:53:03.000]  подотрезке, там, соответственно, n 2 1, n 2 2 и n 2 3. Тут он тоже подразбивается, я вот это вот имею
[03:53:03.000 --> 03:53:13.400]  в виду, да, n 3 1. Сейчас вот, да, да, да, сейчас все это будет и так далее. Вот,
[03:53:13.400 --> 03:53:19.040]  ну теперь давайте думать, чего равна сумма. Мы можем отдельно суммировать бейс, ну как бы
[03:53:19.040 --> 03:53:29.440]  бейс, теперь вопрос, сколько раз встретится бейс? Нет, бейс встретится, нет, бейс встретится в
[03:53:29.440 --> 03:53:38.480]  точности по количеству отрезков, но там, смотрите, там есть, конечно, разные подлянки, потому что очень
[03:53:38.480 --> 03:53:46.120]  хочется сказать, что суммарное число отрезков здесь n, но это, к сожалению, не так. Там есть одна
[03:53:46.120 --> 03:53:52.120]  подлянка, что дело в том, что отрезок может целиком перейти в следующий уровень, потому что может
[03:53:52.120 --> 03:54:00.280]  так случиться, что очередной разряд там тоже совпал. Ну вот, тогда у нас получается, что, ну,
[03:54:00.280 --> 03:54:06.840]  смотрите, сплитов вот этих различных подотрезков, различных вот именно как диапазонов, их будет
[03:54:06.840 --> 03:54:15.800]  действительно n. Ну ладно, о от n, потому что, как бы, каждый вот этот сплит это разделение отрезка на
[03:54:15.800 --> 03:54:22.320]  два. Разделение таких может быть, может быть, не более чем n-1. Ну, например, потому что каждый
[03:54:22.320 --> 03:54:26.840]  сплит, он задается позицией разделения, такая позиция может быть только один раз. То есть, если мы
[03:54:26.840 --> 03:54:35.120]  тут разделили отрезок, то больше у нас не будет отрезков, которые будут сплитоваться здесь. Ну,
[03:54:35.120 --> 03:54:42.360]  типа того, видимо, да. Нет, ну, может, там можно как-то точнее, но, как бы, в итоге это не
[03:54:42.360 --> 03:54:47.840]  происходит. Значит, по бэйзу, то есть бэйз может встречаться в худшем случае, получается что-то
[03:54:47.840 --> 03:55:02.320]  типа n на те самые логбэйз с. Вот. Ну, а суммарная длина отрезков у нас получается n логбэйз с. Ну,
[03:55:02.320 --> 03:55:06.880]  потому что на каждом уровне суммарная длина отрезков так или иначе n. То есть, получается,
[03:55:06.880 --> 03:55:11.600]  видите, вот эта вот проблема с бэйзом и прокидыванием вот этой штуки, она на самом деле основная.
[03:55:11.600 --> 03:55:22.920]  Ну, ее можно решать так. Вот. Ну, чисто теоретически, на самом деле, можно ее решать так. Нет,
[03:55:22.920 --> 03:55:27.760]  можно сейчас. Ну, на самом деле, можно решить так. Конечно, на самом деле, от этого лишнего бэйза
[03:55:27.760 --> 03:55:34.440]  можно избавиться вот от таких вот этих проталкиваний. Если вы прежде чем запускать сортировку подсчетом,
[03:55:34.440 --> 03:55:44.040]  ну хотя, насколько это поможет. Ну да, то есть, как бы, если вы будете запускать сортировку,
[03:55:44.040 --> 03:55:49.880]  прежде чем сортировку подсчетом запускать, давайте выясним, они равны ли тут все разряды.
[03:55:49.880 --> 03:56:03.880]  Тогда от бэйза мы избавимся. Ну, правда. А чем это нам поможет?
[03:56:04.320 --> 03:56:10.040]  Если мы будем брать вот таким образом, мы знаем, сколько у нас получается отрезков. Мы можем на каждом лево оценить,
[03:56:10.040 --> 03:56:16.240]  как получается, ну, во-первых, n, n, потому что мы по всем полемся за количество элементов. Нет, ну,
[03:56:16.240 --> 03:56:25.080]  там же нужно. Плюс бэйз в степени i. Так, нет, ну, просто чем-то нам поможет.
[03:56:25.280 --> 03:56:31.640]  Точнее будет синтоника. Мы же не знаем количество отрезков на каждом уровне.
[03:56:31.640 --> 03:56:44.600]  Не знаем. Ну, и что это? Ага, так, то есть, вы хотите сказать, что да, то есть, ага, то есть, ну, нет, ну, понимаете,
[03:56:44.600 --> 03:56:50.000]  просто тут тогда зависит от вопроса, просто, ну, поедете, просто начинается какого-то, просто, как бы,
[03:56:50.920 --> 03:56:59.400]  количество отрезков будет расти, как там, ну, да, какой-то, как сколько там. Ну, b в степени i, да, там может где-то выплыть лог b и z.
[03:56:59.400 --> 03:57:03.600]  Так, ну, там начиная с какого-то момента, это все равно будет n, и там уже это, по-моему.
[03:57:03.600 --> 03:57:08.520]  Просто b и z, мне кажется, бэйз в степени i можно реально всегда достичь.
[03:57:08.520 --> 03:57:13.000]  Типа, если просто каждый раз делить, как, ну, в каждом отрезке, как можно больше его делить.
[03:57:13.000 --> 03:57:24.000]  Так, ну, я не знаю, просто да, ну, я не знаю, ладно, сейчас давайте, времени мало, я боюсь сейчас нас, нас скоро просто выгонять начну.
[03:57:24.000 --> 03:57:29.000]  Поэтому, ладно, можно там все это додумать, но можно так, а можно на самом деле действительно от лишних b и z избавиться,
[03:57:29.000 --> 03:57:36.000]  сказав, что давайте просто прежде чем запускать по разрядную сортировку, давайте проверим, а нужна ли она на этом, на этом уровне.
[03:57:36.000 --> 03:57:42.000]  Так, и сами по себе эти проверки на самом деле вот сюда прекрасно уложатся.
[03:57:42.000 --> 03:57:52.000]  Вот, и бэйз тогда, но тогда бэйз у нас будет не лог, вот не столько раз у нас будет, а сколько получается.
[03:57:52.000 --> 03:58:05.000]  Ну вот, просто нет, на лог бэйз, нет, он будет, тогда на самом деле бэйз, там на самом деле убьется как ни странно вот эта штука.
[03:58:05.000 --> 03:58:12.000]  Потому что как бы только над, то есть как бы говорим, если у нас, то есть бэйз сводится, когда будет сплит, сплитов у нас м.
[03:58:12.000 --> 03:58:17.000]  Так что это называется, можно допилить вот так.
[03:58:17.000 --> 03:58:26.000]  Ну, на самом деле как бы чаще всего, конечно, ну, если бэйз константа вообще есть, конечно, другие способы, например, есть такой замечательный способ, как бор.
[03:58:26.000 --> 03:58:34.000]  Ну, думаю, сталкивается такой структуры данных, да, то есть там, где стандартная сортировка строками, это называется, добавим строки в бор и запустим DFS.
[03:58:34.000 --> 03:58:38.000]  Да, ой, мы не знаем, что такое DFS.
[03:58:38.000 --> 03:58:39.000]  Нет.
[03:58:39.000 --> 03:58:41.000]  Да, и что такое бор, мы не знаем.
[03:58:41.000 --> 03:58:42.000]  Да, ну ладно.
[03:58:42.000 --> 03:58:49.000]  Нет, я вам даже больше, это самое страшное, что, кстати, мы реально рискуем в этом семестре так и не узнать, что такое DFS.
[03:58:49.000 --> 03:58:51.000]  Вот.
[03:58:51.000 --> 03:58:57.000]  Нет, а что такое бор, это как бы его второкурс, сейчас еще не знаю.
[03:58:57.000 --> 03:59:02.000]  Но это так.
[03:59:02.000 --> 03:59:04.000]  А, ну ладно, ну хорошо.
[03:59:04.000 --> 03:59:08.000]  Ну мало, и может вы его BFS написали.
[03:59:08.000 --> 03:59:12.000]  Нет, компоненты связанности ищутся BFS.
[03:59:12.000 --> 03:59:14.000]  Ну ладно, не важно.
[03:59:14.000 --> 03:59:15.000]  Не важно.
[03:59:15.000 --> 03:59:17.000]  Ну это ладно, понятно, что это, конечно, шутки, да.
[03:59:17.000 --> 03:59:24.000]  Видите, тут как бы асимптутика, видимо, совсем мощная, так же соответственно.
[03:59:24.000 --> 03:59:25.000]  Вот.
[03:59:25.000 --> 03:59:34.000]  Ну еще, конечно, отметим, что чисто теоретически на самом деле можно еще делать там, если у нас побитика, можно вообще бинарный quicksort делать, кстати.
[03:59:34.000 --> 03:59:48.000]  Ну так, то есть если вам очень хочется локальности там наплевать на стабильность, то можно забабахивать бинарный quicksort вот с таким пайвотом.
[03:59:49.000 --> 03:59:55.000]  Ну это как бы тоже самое, как бы разбивать на те, у кого нолик, и те, у кого и денечка.
[03:59:55.000 --> 04:00:00.000]  Ну то есть уже обсужденная в прошлый раз задача в украинском плане, короче, выплывает.
[04:00:00.000 --> 04:00:03.000]  Вот.
[04:00:03.000 --> 04:00:14.000]  Так же соответственно, можно так сделать, там получится вот даже вот так вот такая картинка.
[04:00:14.000 --> 04:00:16.000]  Ну да.
[04:00:16.000 --> 04:00:17.000]  Да.
[04:00:17.000 --> 04:00:20.000]  Там писаться это будет примерно вот таким вот образом.
[04:00:20.000 --> 04:00:24.000]  Может быть, там даже есть ошибка в коде, кстати.
[04:00:24.000 --> 04:00:29.000]  Ну конечно, приятно, потому что третий раз уже его видим.
[04:00:29.000 --> 04:00:39.000]  Знаете как-то, как всегда, закон учебы, если вы в какой-то момент пострадали и что-то подписали, то после этого это становится легко приятно.
[04:00:39.000 --> 04:00:40.000]  Ну вот.
[04:00:40.000 --> 04:00:41.000]  То есть по-разному.
[04:00:41.000 --> 04:00:44.000]  То есть это классика такая.
[04:00:44.000 --> 04:00:50.000]  Вот как-то раз, ну я просто занимаюсь волейболом, я вот как-то раз пришел на интенсив по нападающему удару.
[04:00:50.000 --> 04:01:01.000]  Значит он, нет, интересно, не сам интенсив, а интересно, проходил он при этом в подвале какой-то школы, и зал так выглядит немножко побито.
[04:01:01.000 --> 04:01:03.000]  Ну не скажу обшарпанно, но скажу побито.
[04:01:03.000 --> 04:01:07.000]  Немножко типичный паркет там какой-то, стены немножко побиты и так далее.
[04:01:07.000 --> 04:01:10.000]  Знаете, вот высекает просто такая картинка.
[04:01:10.000 --> 04:01:20.000]  Обычно, знаете, представьте, человек только что выиграл чемпионат мира и спрашивает, скажите, пожалуйста, насколько это легко было, как вы к этому пришли?
[04:01:20.000 --> 04:01:25.000]  И там человек начинает воображать, знаете, и у него так в голове сразу вот этот вот зал.
[04:01:25.000 --> 04:01:31.000]  Значит темнота, может какая-то резерва, просто мрач, и он просто сидит и просто колотит мяч в стенку.
[04:01:31.000 --> 04:01:33.000]  Значит именно в таком зале.
[04:01:33.000 --> 04:01:36.000]  Да, вот именно в таких залах победы куются.
[04:01:36.000 --> 04:01:39.000]  Ну вот, ну и обычно с дикартьячкой происходит примерно так же.
[04:01:39.000 --> 04:01:44.000]  Ну не в смысле, что вы дикартьячкой там пишете именно в таких залах, естественно, да.
[04:01:44.000 --> 04:01:46.000]  До начала бывает именно так.
[04:01:46.000 --> 04:01:48.000]  Нет, у меня так было, знаете, еще с чем.
[04:01:48.000 --> 04:01:53.000]  На самом деле у меня было, знаете, в конце этого семестра у вас скорее всего будет анализ функций.
[04:01:53.000 --> 04:02:00.000]  В чем более того, даже не анализ функций, а анализ кривых видов, там х равно х от и и как равно и как от.
[04:02:00.000 --> 04:02:05.000]  И вам придется анализировать, куда они там, где растут, где они там, куда загибаются и так далее.
[04:02:05.000 --> 04:02:10.000]  Вот я помню, что первый раз я помню, я помню, когда с кем выходил дело, это был просто взрыв мозга.
[04:02:10.000 --> 04:02:13.000]  Второй раз уже неожиданно оказалось нормально.
[04:02:13.000 --> 04:02:16.000]  Вот, так что в этом плане просто да.
[04:02:16.000 --> 04:02:20.000]  То есть что-то, если что-то страшное, надо просто на это идти и попробовать там один раз сделать.
[04:02:20.000 --> 04:02:23.000]  То есть потом будет все легче и легче.
[04:02:23.000 --> 04:02:30.000]  То есть как бы не, не бойтесь того самого первого гвоздя, который надо вбить в голову.
[04:02:30.000 --> 04:02:34.000]  Давайте, ну сразу скажу, наверное, последний анекдот на сегодня.
[04:02:34.000 --> 04:02:36.000]  Да, хорошо сказал, да.
[04:02:36.000 --> 04:02:38.000]  Как будто да.
[04:02:38.000 --> 04:02:39.000]  Чем мы тут занимаемся?
[04:02:39.000 --> 04:02:42.000]  Да, анекдот отравим в телевизор, смотрим там вот это все.
[04:02:42.000 --> 04:02:44.000]  Вот.
[04:02:44.000 --> 04:02:46.000]  Да, да, да, КВН поминаем.
[04:02:46.000 --> 04:02:47.000]  Вот.
[04:02:47.000 --> 04:02:48.000]  Ну вот такой анекдот.
[04:02:48.000 --> 04:02:50.000]  Просто такой, классический такой анекдот.
[04:02:50.000 --> 04:02:59.000]  Значит, как известно, значит, легенды гласят, что каждому студенту в начале учебы приходит черт и говорит,
[04:03:00.000 --> 04:03:03.000]  поздравляю, ты попал в ад.
[04:03:03.000 --> 04:03:06.000]  И у тебя есть выбор.
[04:03:06.000 --> 04:03:08.000]  Как говорится, в какой ад ты попадешь?
[04:03:08.000 --> 04:03:12.000]  В обычный ад или в студенческий?
[04:03:12.000 --> 04:03:13.000]  А можно попробовать?
[04:03:13.000 --> 04:03:15.000]  Ну давай, давай попробуем обычный ад.
[04:03:15.000 --> 04:03:24.000]  Окей, значит, черт уходит, значит, черт ушел и стал, значит, каждый день приходит черт и забивает студенту в голову гвоздь.
[04:03:24.000 --> 04:03:26.000]  Вот вперед забивает.
[04:03:26.000 --> 04:03:28.000]  Ну, соответственно, хорошо.
[04:03:28.000 --> 04:03:32.000]  Значит, есть там первую неделю прожил, вторую неделю прожил, третью неделю.
[04:03:32.000 --> 04:03:37.000]  Но при этом смотрят, что есть вот люди, которым почему-то явно гвозди в голову не забивали, они такие веселые, хорошие.
[04:03:37.000 --> 04:03:39.000]  Вот слушай, я тоже хочу быть веселым.
[04:03:39.000 --> 04:03:41.000]  Да все просто, они выбрали студенческий ад.
[04:03:41.000 --> 04:03:43.000]  А давай я тоже попробую.
[04:03:43.000 --> 04:03:44.000]  Ну давай.
[04:03:44.000 --> 04:03:45.000]  Говорит черт.
[04:03:45.000 --> 04:03:46.000]  И уходит.
[04:03:46.000 --> 04:03:47.000]  Месяц проходит.
[04:03:47.000 --> 04:03:48.000]  Два месяца проходит.
[04:03:48.000 --> 04:03:49.000]  Действительно счастье.
[04:03:49.000 --> 04:03:50.000]  Хорошо.
[04:03:50.000 --> 04:03:51.000]  Действительно голова не болит.
[04:03:51.000 --> 04:03:53.000]  Ну вот, наконец, зима приближается.
[04:03:53.000 --> 04:03:59.000]  Зима где-то, значит, где-то там под Новый год приходит, значит, стук дверь, значит, отказывается.
[04:03:59.000 --> 04:04:01.000]  Открывает, на пороге стоит черт.
[04:04:01.000 --> 04:04:02.000]  С коробкой гвоздей.
[04:04:02.000 --> 04:04:03.000]  Ну что студент?
[04:04:03.000 --> 04:04:05.000]  Сессия.
[04:04:05.000 --> 04:04:07.000]  Вот.
[04:04:07.000 --> 04:04:09.000]  Так что на самом деле, да.
[04:04:09.000 --> 04:04:14.000]  Вы можете считать, что это анекдот вас не касается.
[04:04:14.000 --> 04:04:15.000]  Да.
[04:04:15.000 --> 04:04:18.000]  Часто скажем, чаще всего происходит действительно именно так.
[04:04:18.000 --> 04:04:20.000]  То есть, конечно, вы можете выбирать действительно баланс.
[04:04:20.000 --> 04:04:22.000]  Но как бы активно призываю.
[04:04:22.000 --> 04:04:25.000]  Крайне желательно, конечно, забивать гвозди как можно раньше.
[04:04:25.000 --> 04:04:29.000]  Потому что, собственно, тогда вы, ну как бы сказать, и сессия будет легче.
[04:04:29.000 --> 04:04:32.000]  Ну и гвоздей вы забьете немножко больше.
[04:04:32.000 --> 04:04:39.000]  А в общем-то, как бы как это ни грустно, но в общем-то, вы сюда пришли именно за тем, чтобы забивать побольше гвоздей.
[04:04:39.000 --> 04:04:40.000]  Вот.
[04:04:40.000 --> 04:04:43.000]  Так что, ну вот.
[04:04:43.000 --> 04:04:50.000]  Ну в некотором, ну в иносказательном каком-то виде вот последние 3 часа 45 минут мы примерно этим занимались.
[04:04:50.000 --> 04:04:54.000]  Да, конечно, мы старались максимально обвеселять себе жизнь, но факт остается факт.
[04:04:54.000 --> 04:04:58.000]  Так что в следующий раз мы будем забивать еще более серьезные гвозди.
[04:04:58.000 --> 04:04:59.000]  Ну вот.
[04:04:59.000 --> 04:05:00.000]  Ну пока.
[04:05:00.000 --> 04:05:01.000]  Ну вот на сегодня все.
