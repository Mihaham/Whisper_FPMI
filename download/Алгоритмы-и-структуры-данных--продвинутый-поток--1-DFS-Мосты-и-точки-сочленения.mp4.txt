[00:00.000 --> 00:10.680]  поэтому в итоге да поэтому начнем мы с такого замечательного сладостного
[00:10.680 --> 00:17.920]  чарующего выпадительного алгоритма как dfs да наконец-то мы узнаем что это такое
[00:17.920 --> 00:28.480]  вот ну мало ли да отбор говорит о том что вы сталкивались с этой аббревиатурой да вот
[00:28.480 --> 00:32.720]  нет и очень-то ладно на самом деле если отставить шутки то в общем-то конечно мы с ним уже работали
[00:32.720 --> 00:37.680]  потому что мы с вами уже обсуждали деревья как ведь какая нот там деревья там поминали какую-то
[00:37.680 --> 00:43.800]  динамичку там и так далее и тому подобное вот ну то есть да там вот возможно бы там упустили какие-то
[00:43.800 --> 00:48.320]  еще пару там каких-то простых моментов но как бы ладно уж то есть наверно сейчас нет смысла читать
[00:48.320 --> 00:55.120]  вам это это в лекцию типа дети динамическое программирование это там вот это все вот но
[00:55.120 --> 01:01.040]  кое-что вот но какие-то вот базовые вещи нам дфс и поговорить придется вот ну потому что мосты
[01:01.040 --> 01:10.360]  точней сочинения но давайте так кто умеет находить в графе мосты так хорошо кто умеет так кто умеет
[01:10.360 --> 01:20.840]  находить в графе мосты за линию до важного точения так вот правильно правильно правильно так уже
[01:20.840 --> 01:31.480]  двойне так двое уже не так двое уже не умеют да или просто линии руки подымать ну мало ли
[01:31.480 --> 01:40.560]  а может это тень кофе изучалась просто да правильно господи что там посещать да да да как
[01:40.560 --> 01:49.160]  говорится на метод сирийских межнаров изучаем все сами да окей вот хорошо пойдем дальше более
[01:49.160 --> 01:58.480]  продвинуты повысим планочку кто знает что такое точки сочинения кто умеет их искать за линию
[01:58.480 --> 02:12.000]  уже уже больше да да да да да да да господи да вот хорошо но тут есть куда повысить планку
[02:12.000 --> 02:26.040]  а кто умеет искать компоненты реберной двухсвязности а кто умеет искать их за линию ну да глупо было бы
[02:26.040 --> 02:36.920]  предположить конечно вот а кто умеет искать компоненты вершинной двухсвязности вот а за линию так
[02:36.920 --> 02:41.840]  ну ладно сирийские занятия будет интересным да я делал даже не в том что сегодня ожидается
[02:41.840 --> 02:49.520]  дерево доминаторов так кстати даже интересно а кто умеет писать дерево доминаторов вот круто
[02:49.520 --> 03:00.320]  сейчас нет но как сказать нету я сформулирую так смотрите тут диспозиция такая конечно там
[03:00.320 --> 03:04.920]  для каких-нибудь олимпиадных целей там будет алгоритм за н логен у нас он тоже возникнет но
[03:04.920 --> 03:08.160]  возможно какой-то момент то есть идеальный алгоритм который предлагался в оригинале
[03:08.160 --> 03:15.960]  тарьяном он работает за е на обратную функцию кирмана вот да ту самую шоу в снм но это но без
[03:15.960 --> 03:29.200]  отсылки на снм да нет там но там возникает сжатие путей и возникает пара интересных теории нет я вам
[03:29.200 --> 03:33.920]  так скажу я конечно сейчас рискну на каркать но на самом деле раз мы идем в таком хорошем темпе то
[03:33.920 --> 03:38.080]  как бы есть надежда что мы попробуем изучить действительно откуда высоты шоу это за обратная
[03:38.080 --> 03:43.920]  функция кирмана и откуда высотами она берется вот за одной здесь нет на самом деле как показывает
[03:43.920 --> 03:51.920]  практика это не так тоже не так страшно как кажется то есть ну не софт хип реально но вот нет
[03:51.920 --> 03:56.000]  но я не знаю ну просто я не знаю вы мне кто-то на экзамене софт хипов вообще по-моему уверенно
[03:56.000 --> 04:09.960]  расписал насколько я помню так что и вот так что соответствует так что да но вот так но вот но
[04:09.960 --> 04:15.600]  для но вот но правда до этого мы дойдем до все это то есть это все у нас алгоритмы на дфс но для
[04:15.600 --> 04:21.200]  этого дфс придется по изучать начну давайте вспомним что же вообще такой дфс принципе да
[04:21.200 --> 04:26.200]  насчитывайте то есть ведем какие-то базовые понятия то есть дфс у нас это такой обход графа
[04:26.200 --> 04:32.680]  то есть обход графа который работает по принципу вижу куда мы куда мы еще не ходили а ну-ка быстро
[04:32.680 --> 04:39.520]  пошли вот ну давайте тут давайте воспомним какой-нибудь код то есть какой-нибудь
[04:39.520 --> 04:51.120]  классический но вот обычно вот как он выглядит жил был дфс так что приходим в вершину в и что
[04:51.120 --> 04:59.120]  мы соответственно делаем делаем мы следующие значит ну обычно но вот то есть обычно там
[04:59.120 --> 05:04.680]  появляется какой-нибудь массив юзет в котором мы просто помещаем что мы в эту вершину уже
[05:04.680 --> 05:17.440]  ходили но мы сейчас поступим немножко по-другому мы скажем что там калор от в равно е дфс грэй
[05:17.440 --> 05:31.280]  да немножко магии да значит сразу давайте скажем что у нас возникнет о о кайф у нас в этом
[05:31.280 --> 05:38.800]  семестре две доски классно вот да но обычно просто действительно то есть если вы вводите там
[05:38.800 --> 05:43.440]  какие-то экзотические понятия то лучше конечно вводите ена да что-то как бы как вы уже наверно
[05:43.440 --> 05:51.760]  без сомнения знаете дфс часто принято красить вершины цвета да то есть у нас как-то работает то
[05:51.760 --> 05:59.080]  есть это вот работает там е там дфс калор и здесь перечисляем какие-нибудь константы какие у нас
[05:59.080 --> 06:08.120]  будут константы константы у нас будут значит е дфс вайт ну я дфс это пишется чтобы они
[06:08.120 --> 06:13.720]  отличались от других констант каких-нибудь си вот ну чтобы было понятно что это отсюда да так
[06:13.720 --> 06:21.240]  да на всякий случай уже не надо объяснять штуку я нам да но вот ну естественно да вот ну как кто
[06:21.240 --> 06:31.760]  из вас продвинутом потоке по плюсам понятно так ну мало так ну ладно ну в любом случае ладно
[06:31.760 --> 06:41.160]  на знание ена мы это влиять не должно конечно так так значит то есть вот вводим такую красивую
[06:41.160 --> 06:49.360]  штуку вот то есть да обычно конечно помещается что это 0 1 2 но конечно как вы знаете выбор я
[06:49.480 --> 06:57.640]  написать 57 179 2007 будет в общем-то тоже самое вот ну не важно но делаем мы это зачем то есть
[06:57.640 --> 07:04.120]  мы идея в том что обычно белым мы помечаем вершину в которую дфс еще не вошел серым вот
[07:04.120 --> 07:10.760]  мы помечаем вершину в которую дфс вошел но еще не вышел и в самом конце у нас появляется вот
[07:10.760 --> 07:23.840]  это вот там соответственно калор от в равно е дфс блэк вот
[07:23.840 --> 07:37.040]  а действительно так нет ученым мешает что-то кому она до компилятору мешает да вот значит
[07:37.040 --> 07:49.160]  смотреть for имт у значит граф а то вы ну то есть там если мы пишем просто дфс то обычно тут
[07:49.520 --> 08:01.040]  обычно получается что и там пишем калор от в равно равно е дфс вайт да действительно
[08:01.040 --> 08:13.280]  наверное нет а калора туда да значит е дфс вайт то соответственно пишем там дфс от то есть
[08:13.280 --> 08:19.000]  самый простой дфс будет выглядеть вот так вот можно еще добавить скобочки их можно
[08:19.000 --> 08:24.320]  обычно сразу добавлять потому что ну на самом деле крайне редко дфс используется
[08:24.320 --> 08:32.120]  прямо вот чисто в таком виде ну чисто в таком виде он не используется никак обычно да потому
[08:32.120 --> 08:37.120]  что ну как сказать но даже да обычно такой кодки пишут когда нужно проверить там лежит ли вершина
[08:37.120 --> 08:42.840]  в компоненте связанности но во первых для этого тогда нам серый черный цвета не нужны откровенно
[08:42.840 --> 08:50.360]  а во вторых кстати об этом сегодня об этом будем говорить как говорится а что такое вообще
[08:50.360 --> 09:00.240]  компонента связанности кстати аптечка так вот да вот ваша отношение эквивалентности только по
[09:00.240 --> 09:08.360]  нот по понятию эквивалентность или понять да или понятие достижимость да то есть мы будем
[09:08.360 --> 09:13.440]  говорить то есть можно там просто написать определение но я не буду даже его писать я
[09:13.440 --> 09:19.720]  думаю оно и так очевидно да мы будем говорить что там из вершины у достижима вершина в вот так
[09:19.720 --> 09:27.640]  вот да но из вершины у ну ладно но то есть там опасно тут крыша так рисовать потому что у нас
[09:27.640 --> 09:31.800]  тут в дереве доминаторов это стрелочка будет означать немножко другое но тем не менее вот
[09:31.800 --> 09:40.800]  значит из у может дойти по вершине до вершины в если существует путь и тут мы неожиданно понимаем
[09:40.800 --> 09:47.640]  чем у нас не ориентированные графы отличаются от ориентированных отличаются они тем что в
[09:47.640 --> 09:53.600]  не ориентированных графах значит понятие достижимости это отношение эквивалентности
[09:53.600 --> 10:08.880]  вот вот а в не ориентированных графах неожиданно нет да вот редкий случай на самом деле да что
[10:08.880 --> 10:14.000]  действительно только то есть на самом деле два теси фиксирность на месте в ориентированных
[10:14.000 --> 10:18.480]  графах транзитивность тоже на месте да если дойти от можно дойти от удавы может идти от
[10:19.480 --> 10:28.160]  удавы тоже дойти можно но симметричности там нет вот и с одной поэтому да и но поэтому
[10:28.160 --> 10:32.560]  значит сразу действительно то есть важный то есть такой момент точно вот то есть желательно
[10:32.560 --> 10:38.120]  но вот что крыша лужа не желательно ляпать что там если мы говорим об ориентированных графах то
[10:38.120 --> 10:43.280]  конечно ляпать что там две вершины лежат там в одной компоненте связанности это как минимум
[10:43.300 --> 10:49.340]  так чтобы быть осторожным вот то есть да понятно когда-то в контексте конечно в
[10:49.340 --> 10:56.840]  какой-нибудь задачи хочется это обсуждать но лучше сразу оговаривать вот так что
[10:56.840 --> 11:02.580]  pawnet mantel в ориентированном графе кстати отметим даже в ориентированном графе то есть обычно
[11:02.580 --> 11:11.400]  есть понятия слабая связанность и сильная связанность значит что такое то есть говорят что там то
[11:11.400 --> 11:17.780]  то есть слабая связность это говорим, что давайте во всех рёбрах просто отменим ориентацию.
[11:19.600 --> 11:25.240]  Ну тогда получит обычный ориентированный граф и получит компоненты связности и там и это называется слабая связность.
[11:25.340 --> 11:29.180]  То есть две вершины слабо связаны, если от одной вершины можно дойти до другой.
[11:29.180 --> 11:34.420]  Но плевав на направление и есть понятие сильная связность.
[11:35.220 --> 11:36.280]  Сильная связность.
[11:36.280 --> 11:38.680]  что такое, то есть мы говорим, что две вершины сильно связаны,
[11:38.680 --> 11:43.640]  если из одной вершины можно дойти до другой и из другой вершины можно дойти до одной.
[11:44.640 --> 11:46.600]  То есть можно не только дойти, но и вернуться обратно.
[11:49.120 --> 11:52.720]  Ну, соответственно, дойти компоненты слабой связности тривиально,
[11:53.160 --> 11:58.760]  найти компоненты сильной связности за линию умеет, кстати, кто.
[11:58.760 --> 12:08.120]  Так, спасибо. Так, ух ты, да, не так много, да. Ух ты, как я не пушусь.
[12:08.120 --> 12:20.120]  Так, для сравнения, кто умеет писать FFT? А, прям все в Петрозаводск уехали, да, или что?
[12:20.120 --> 12:27.280]  Окей, ну ладно, так, понятно. Нет, просто как-то, да, попрошу, попрошу мы семестра,
[12:27.280 --> 12:32.200]  там просто мне кажется, что на подобные вопросы тут прям вся толпа будет руки подымать, вот.
[12:32.200 --> 12:40.440]  Так, хорошо, кто умеет перемножать многочлены быстрее, чем за квадрат?
[12:40.440 --> 12:54.560]  Хорошо, кто умеет перемножать многочлены за N log N? Ага, нет, знаете, что самое страшное? Нет,
[12:54.640 --> 12:59.160]  на самом деле, формальный ответ я боюсь, что практически никто на самом деле не умеет,
[12:59.160 --> 13:03.280]  но я просто для тех, кто знает, сразу скажу. Дело в том, что мы там подразумеваем,
[13:03.280 --> 13:07.080]  что там есть комплект какие-то комплексные числа, с которыми мы умеем работать как будто
[13:07.080 --> 13:12.400]  за от единицы, наплевав на точность. Но на самом деле, если там все-таки байтики ограничены,
[13:12.400 --> 13:17.360]  если это реально анализировать, то там в общем случае придется признавать, что асимптотика
[13:17.360 --> 13:22.920]  это что-то типа N log N, или что-то в этом роде. То есть на самом деле алгоритм реально за N log N есть,
[13:22.920 --> 13:30.120]  но это какой-то тоже алгоритм типа 2015 года, насколько я помню. Но так тоже, на самом деле,
[13:30.120 --> 13:37.560]  мелкая формальная оговорка. То есть мы на эту оговорочку так наплюем, но тем не менее.
[13:37.560 --> 13:44.880]  На этом мы говорили про связности, отношение к валентности, отношение к валентности у нас,
[13:44.880 --> 13:50.960]  конечно, сегодня будут играть важную роль. Потому что действительно замечаем, что найти компоненты
[13:50.960 --> 13:59.760]  сильной связности, конечно, окажется значительно сложнее. Но, конечно же, давайте подумаем,
[13:59.760 --> 14:05.040]  что еще можно вообще делать DFS. Какое у нас обычно первое? Давайте вспомним какое у нас первое
[14:05.040 --> 14:10.640]  применение. Так давайте более простой вопрос. Кто умеет искать цикл в графе? То есть дан граф,
[14:10.640 --> 14:24.120]  найдите в нем цикл или скажите, что его нет. За линию. Но тут смотрите, действительно,
[14:24.120 --> 14:30.040]  что у нас тут есть. То есть это первая обычная задача, в которой вот эти вот цвета возникают.
[14:30.040 --> 14:35.080]  То есть у нас там возникает понято, потому что как мы это делаем, например, в ориентированном
[14:35.080 --> 14:40.440]  графе. То есть на самом деле, то есть где-то вот здесь на самом деле можно там написать,
[14:40.440 --> 14:48.160]  давайте другим маркером напишу каким-нибудь. То есть что-нибудь там. То есть Элза там,
[14:48.160 --> 15:03.840]  допустим, если там color atu оказался серым, то, соответственно, я напишу наш лицикл.
[15:03.840 --> 15:14.360]  В принципе, можно вот уже идентифицировать, что цикл обнаружен. Конкретно его идентификация
[15:14.360 --> 15:18.040]  может выглядеть так. Потому что вообще заметим, что, ну просто можно заметить,
[15:18.040 --> 15:25.440]  что в каждый момент времени DFS все серые вершины образуют какой-то нот, ну практически стэк.
[15:25.440 --> 15:31.360]  То есть обычно в этом месте можно добавлять вершины в стэк, а в этом месте из стэка
[15:31.440 --> 15:37.040]  доставать. Ну и, например, и тогда кажется, что в каждый момент времени серые вершины
[15:37.040 --> 15:47.680]  образуют путь из так называемого корня. Вот. Почему я говорю так называемого? Потому что обычно
[15:47.680 --> 15:52.440]  вот в неориентированном графе понятно, что в каждой компоненте связности вы обойдете всю
[15:52.440 --> 16:00.200]  компоненту связности. А в ориентированном графе, ну как минимум у нас нет понятия компонента
[16:00.200 --> 16:06.320]  связности. А вторых, даже компоненту слабой связности вы обойдете, ну если повезет.
[16:06.320 --> 16:14.240]  Чего? Вот. Ну сильную точно обойдем, да. То есть понятно, мы обойдем компоненту сильной связности,
[16:14.240 --> 16:19.720]  мы обойдем все, вообще все компоненты, которые из нее достижимы, но там, условно говоря, будет там,
[16:19.720 --> 16:25.840]  что типа мы обошли вот там что-нибудь вот такое, а вот тут откуда-нибудь еще тут из аута еще тут
[16:25.840 --> 16:31.360]  какие-то ребра сюда торчат. И эту вершину мы уже, может, и не обошли вполне. А может обошли,
[16:31.360 --> 16:39.560]  там как повезет. Вот. Это у нас дело известно. Так. Вот. Но тем не менее у нас действительно,
[16:39.560 --> 16:46.680]  вот. Но тем не менее гарантируется, что DFS цикл найти можно, если просто пробежаться по
[16:46.680 --> 16:53.400]  всем вершинам и с каждой белой на текущий момент вершины запускать этот DFS. Тогда очевидно цикл будет
[16:53.400 --> 17:00.440]  найти. Так. А если цикла у нас нет, тогда у нас есть место. Ну тоже надо вспомнить топологическая
[17:00.440 --> 17:11.600]  сортировка. Так. Что такое топологическая сортировка? Ну да. То есть оказывается,
[17:11.600 --> 17:16.520]  что если цикла нет, то вершины можно расположить слева направо в таком порядке, чтобы все ребра
[17:16.520 --> 17:26.520]  прошли слева направо. Так. Ну-ка. Кто умеет такую топологическую сортировку искать? Так. А за линию?
[17:26.520 --> 17:35.880]  Ага. Хорошо. Так. Ну на всякий случай напомню. Да. Идея на самом деле предельно простая. То есть.
[17:35.880 --> 17:43.920]  То есть на самом деле вот. То есть идею можно закодировать одной фразой. Просто вот сюда в
[17:43.920 --> 17:52.600]  конце нужно написать. То есть надо просто завести массив топ-сорт. И когда вы выходите из вершины,
[17:52.600 --> 18:00.800]  надо в начало этого массива запихать вершину В. Ну можно сказать, что 8-массив это дек на
[18:00.800 --> 18:10.840]  самом деле эстрелевский. Ну. Нет. Да. Классическая реализация конечно push-back и reverse, но
[18:10.840 --> 18:21.640]  идейно это push-front. Вот. Идейно это. Ну вот. Да. Идейно у нас, конечно, push-front. Хотя отдельно
[18:21.640 --> 18:26.200]  могла быть интересный вопрос. Это конечно. Там попробовать. А попробовать теперь доказать,
[18:26.200 --> 18:35.520]  что такой топ-сорт действительно сработает. Нет. Что он вообще. Нет. Понятно, что DFS работает
[18:35.520 --> 18:44.040]  за V plus E. Это, конечно, сомнения не вызывает. Нет. Push-front. Нет. Ну мы верим, что push-front работает
[18:44.040 --> 18:48.840]  за от единицы. Потому что. Ну скажем так. В принципе можно сказать, что это дек. Как я уже сказал. Потом
[18:48.840 --> 18:55.000]  можем пробежать с форком. Можно сделать push-back и там reverse. Это неважно. Важно другое. Потому что
[18:55.000 --> 19:00.920]  математически самый интересный вопрос. А почему полученный порядок вершины имеет отношение к
[19:00.920 --> 19:29.560]  топологической сортировке вообще. Что такое после. Что такое после. Что такое в этом контексте.
[19:29.560 --> 19:48.640]  Я не понимаю, что это такое. Нет. Ну где-то в реве. Ну вот. Нет. Ну пока смотрите. Нет. На самом
[19:48.640 --> 19:52.440]  деле здесь пока никаких обратных ревер нет. Хотя, конечно, вы правильно догадываетесь,
[19:52.440 --> 19:59.040]  чем мы займемся дальше. Вот. Но на самом деле доказать, конечно, все гораздо проще. Потому
[19:59.040 --> 20:05.760]  что. Смотрите. То есть рассмотрим ребро. То есть будем говорить так. Рассмотрим ребро. Нет. Не так
[20:05.760 --> 20:19.520]  мы его рассмотрим. Рассмотрим ребро УВ. Давайте его возьмем и рассмотрим. Значит нам нужно доказать,
[20:19.520 --> 20:25.120]  что вершина У будет идти в этом топ сорте раньше. То есть в переводе говоря вершина УВ мы по
[20:26.000 --> 20:36.640]  до вершины У. Логично, да? Значит, смотрите, как мы это будем делать. Делать мы это будем следующим
[20:36.640 --> 20:48.200]  образом. Значит, жила была вершина В. Ну вот. То есть в какой-то момент ДФС пришел в вершину У
[20:48.200 --> 20:56.800]  и рассмотрел, ну помимо прочего, там поперебрал, поперебрал и нашел вершину В. А теперь давайте
[20:56.800 --> 21:07.080]  подумаем. Какого цвета вершина В была в этот момент? Ну тогда смотрите, что произойдет если вершина В была
[21:07.080 --> 21:20.760]  белой. Ну да. Тогда мы просто замечаем, что тогда ДФС просто пойдет в вершину В. Значит что-то там
[21:20.760 --> 21:28.720]  поработает и выйдет из вершины В, добавив ее в топ сорта. И это происходит до того, как у нас
[21:28.720 --> 21:36.280]  вершина У закончилась. Поэтому если вершина В была белой, то с этим ребром все в порядке.
[21:36.280 --> 21:45.760]  Что дальше? Если вершина В была, ну давайте простой случай, черной. Ну поздравляю. Если она черная,
[21:45.760 --> 21:55.640]  значит она уже добавлена, все, уже радость. А если вершина В серая? Ну не противоречие, а просто это
[21:55.640 --> 22:04.320]  означает, что у нас налицо цикл. То есть на самом деле, видите, никаких понятий там обратных
[22:04.640 --> 22:12.160]  вводить не нужно. То есть на самом деле доказательства, собственно, работает и так. Вот. Так что нет. Тут,
[22:12.160 --> 22:20.760]  в общем-то, все достаточно просто. Вот. Значит так. Что у нас еще? Сейчас все-таки достану тетрадочку,
[22:20.760 --> 22:24.640]  потому что сейчас я должен сформулировать еще пару. То есть на самом деле тоже очень простых утверждений,
[22:24.640 --> 22:30.560]  но знать их надо. Ну просто скажем так, просто культурная часть такая. Да, то есть, конечно,
[22:30.560 --> 22:36.360]  то есть понятно там для всех летали обянников, обычно эти утверждения будут самоочевидными. Вот.
[22:36.360 --> 22:43.560]  Но тем не менее. Вот. Так. Но с другой стороны, тем не менее, просто диспозиция такая. А кстати,
[22:43.560 --> 22:50.240]  представьте себе, что вы в 75-м году. Значит, что такое 75-й год? Значит, пока я тут листаю тетрадку.
[22:50.800 --> 23:01.680]  75-й год. Это когда у нас... 75-й год – это год выхода статьи, вот такой статьи Depth for Search and its Appliances.
[23:01.680 --> 23:09.280]  Автор статьи, просто хедлайнер сегодняшнего занятия, Роберт Эндрит Ариян. Ну, скажем так,
[23:09.280 --> 23:13.040]  по-моему, едва ли не все, практически все алгоритмы, которые мы сегодня будем изучать,
[23:13.040 --> 23:18.760]  пока мы до какого-то момента, на самом деле это алгоритмы Тарьяна. Ну или как минимум соавтор,
[23:19.240 --> 23:24.840]  то есть, ладно, там, допустим, дерево доминаторов, допустим, у него там соавторстве с кем-то,
[23:24.840 --> 23:31.240]  но тем не менее. Вот. Но с другой стороны, там, ну вот. Просто вот это интервот. То есть,
[23:31.240 --> 23:36.240]  это, возможно, едва ли не первая статья, в которой действительно там этот ДФС активно изучает.
[23:36.240 --> 23:41.400]  То есть, не то чтобы там понятие о том, что граф можно вот так вот обходить рекурсивным образом,
[23:41.400 --> 23:49.280]  или как минимум дерево. То есть, в принципе, там понятия были и раньше. Вот. Ну я. Чего? Ну вот.
[23:49.280 --> 23:54.720]  Ну, как сказать, придуман, не гарантирую. Но судя по статьям, выглядит да. Я бы даже больше
[23:54.720 --> 24:01.160]  скажу. На самом деле, то есть, более того, на самом деле, к моменту 75-го года уже были хорошо
[24:01.160 --> 24:06.200]  известные и все там, и все там, не только БФС, но и даже там все, все там Дэйкстры, Флойды,
[24:06.200 --> 24:10.880]  Форды, Белманы, а также все алгоритмы основных, основные алгоритмы основных деревьев.
[24:10.880 --> 24:18.520]  Потому что это все, это все, ну скажем так, алгоритм Дэйкстрен датируется 59-м годом, кстати. Вот.
[24:18.520 --> 24:25.640]  То есть, там алгоритмы примокраскала тоже какие-то 50, алгоритм Барувки вообще 26-й. Вот. Да, это да. То
[24:25.640 --> 24:31.200]  есть, отдельно компов не было, алгоритм уже был, да. Вот. Это вообще, это вообще отдельная песня там.
[24:31.200 --> 24:39.200]  Вот. Так что, но вот. Поэтому, но вот. Но вот. А в этой статье, но вот. Нет, просто статья интересна тем,
[24:39.200 --> 24:43.320]  что действительно, то есть, представьте, просто представьте, что если первая статья ДФС, то как бы
[24:43.320 --> 24:47.320]  это не то. То есть, это вы допустим, олимпиадники, вы где-то там класса седьмого, там максимум восьмого,
[24:47.320 --> 24:52.640]  там этим ДФС просто пользуетесь просто автоматически, просто кушаете на завтрак там и так далее. Вот.
[24:52.640 --> 24:57.680]  Поэтому, то есть, для вас это все просто, для вашей среды это просто абсолютно естественно и очевидно.
[24:57.680 --> 25:03.360]  Вот. А допустим, на момент 75-го года вы пишете статью и там все, представьте, что все это окажется
[25:03.360 --> 25:09.840]  не очевидно от слова вообще. Там типа, там. То есть, еще придется какую-то тратить энергию,
[25:09.840 --> 25:18.680]  чтобы понять, скажем, что вот это вот цикл ищет, например. Ну вот. И так далее. Так что тут вот такой
[25:18.680 --> 25:23.240]  вот интересный момент. И это при том, что, да, в этой статье доказываются какие-то свойства, то есть,
[25:23.240 --> 25:28.680]  едва ли не рассматривается, как искать цикл, но, конечно, основной ядро, то есть, там, основной
[25:28.680 --> 25:32.880]  интерес, конечно, этой статьи, это то, что в ней описано, как искать компоненты вершины двусвязности
[25:32.880 --> 25:40.720]  и внезапно, как искать компоненты сильной связности. Да. Собственно, мало кто знает, но просто окажется,
[25:40.720 --> 25:46.440]  они ищутся одними тем же алгоритмом. Вот. Ну, как говорится, да, мосты, да, мосты,
[25:46.440 --> 25:55.600]  то и мосты, естественно, прилагаются. Так. Так, где у меня эта штука-то вообще? Так. Метод
[25:55.600 --> 26:13.800]  малых пространств. Сейчас. Так, где у меня тут? Давай. Инвериант следующий, что вершины,
[26:13.800 --> 26:19.320]  значит, там написано как в таком порядке, что все ребра идут слева-направо. То есть, там, ну,
[26:19.320 --> 26:27.640]  типа от меньшего индекса к большему индекса. Раньше, да. Да, это просто определение понятия
[26:27.640 --> 26:33.440]  топологическая сортировка. То есть, порядок вершин называется топологическая сортировка, если...
[26:33.440 --> 26:42.400]  Нет, если вершина В была белая в тот момент, когда мы это ребро рассматриваем,
[26:42.400 --> 26:49.120]  то тогда ДФС тут же запустится, значит, от вершины В, что-то там поделает, неважно,
[26:49.120 --> 26:55.560]  что, и выйдет из вершины В, записав его в массив топ-сорт. И это, и согласно устройству ДФС,
[26:55.560 --> 27:05.000]  это произойдет раньше, чем мы будем выходить из вершины В. Вот и все, собственно. Так что тут
[27:05.000 --> 27:26.360]  достаточно... Так, вот дерево доминаторов пошло. Классно. Так, вот они у нас мистические леммочки.
[27:26.360 --> 27:29.800]  Значит, давайте немножко попишем леммочки.
[27:29.800 --> 27:37.160]  Значит, смотрите. То есть, просто давайте немножко. Тут разные утверждения,
[27:37.160 --> 27:40.040]  причем тут давайте будем внимательны, потому что, кстати, как показала практика,
[27:40.040 --> 27:43.320]  там, скажем, у нас мы можем столкнуться с технологическими разногласиями даже.
[27:43.320 --> 27:49.400]  Потому что, например, там в билет, у вас будет там билет, скажем, лемма о белых путях. Ну вот,
[27:49.400 --> 27:52.720]  и как, к сожалению, бывали председатели, что мне просто приходит и рассказывает абсолютно не то.
[27:52.720 --> 27:59.040]  Потому что выясняется, что там почему-то Вики конспектор говорит, можно было подумать,
[27:59.080 --> 28:04.080]  что лемма о белых путях это что-то другое. Вот. Ну там действительно есть там что-то подлянка,
[28:04.080 --> 28:10.000]  что там не две вещи называются леммами, поэтому так. Так, ну так, смотрите, леммочки. Значит,
[28:10.000 --> 28:15.960]  давайте попробуем просто пока прописать. Да, то есть, немножко простые. Вот. Значит, в принципе,
[28:15.960 --> 28:20.040]  я, то есть, доставлю я вообще. Вот вы тут, конечно, сейчас вот обсуждали, куда может вести ребро и
[28:20.040 --> 28:27.000]  так далее. Но на самом деле можно даже, в принципе, сформулировать такое утверждение. Не существует
[28:27.000 --> 28:39.080]  момента времени. Ну, тут имеется в виду, что мы запустили ДФС. Ну, в каждый момент времени ДФС
[28:39.080 --> 28:43.040]  находится в какой-то вершине, и какие-то вершины покрашены там в серые, какие-то в черные, какие-то
[28:43.040 --> 29:01.760]  в белые. Так вот, не существует момента времени, в который есть ребро из черной вершины в белую.
[29:01.760 --> 29:22.560]  Ну, скажем так, да. Нет, тут договоримся. В такой реализации, да. То есть, конечно, в реориентированном
[29:22.560 --> 29:28.080]  графе тут придется еще писать оговорку, по какому ребру мы сюда пришли. Да, именно ребру,
[29:28.080 --> 29:32.560]  чтобы, если мы хотим еще и кратные ребра покрывать. Да, если нет кратных ребра, конечно, достаточно
[29:32.560 --> 29:38.560]  просто там вершину плыли писать, но эти детали мы сейчас опустим для простоты. Сейчас речь не
[29:38.560 --> 29:44.920]  об этом. Значит, давайте поймем вот это лемма. Хотя тут сразу даже интересно, а что, там ребры
[29:44.920 --> 29:52.800]  из черной в серые бывают? Ну, действительно, лемма доказывается, конечно, очень просто,
[29:52.800 --> 29:59.920]  потому что, как бы, только вот рассмотрим момент времени, когда мы вершину вообще только что
[29:59.920 --> 30:05.680]  покрасили в черный цвет. Спрашивается только, значит, тогда перед этим мы пробежались по всем
[30:05.680 --> 30:11.520]  ребрам, торчащим из нее, но если мы там видели белую вершину, мы, она, эта вершина ровно в
[30:11.520 --> 30:17.200]  этот момент времени белый быть переставала, правда. Ну, собственно, в общем-то, доказательства на этом
[30:17.200 --> 30:22.960]  заканчивается. Но возникает вопрос. И более того, кажется, что если мы в нее пошли, по выходу из нее
[30:22.960 --> 30:32.080]  она становилась не просто серой, а еще и черной. Вправивается. А может ли быть так, что, а может
[30:32.080 --> 30:41.760]  ли вообще в какой-то момент времени существовать вообще ребро из черной вершины в серую? Да, каким образом?
[30:41.760 --> 30:55.560]  Чего? А, прям из двух вершин? Нет, из двух не хочу. Нет, на самом деле давайте просто можно и
[30:55.560 --> 30:58.960]  более общий пример спокойненько привести, на самом деле. То есть просто рассмотрим вот просто
[30:58.960 --> 31:06.200]  обычный цикл. Смотрите, тогда запускаем ДФС из этой вершины, и тогда у нас серыми становятся вот
[31:06.200 --> 31:14.520]  тут все вершины. Серая, серая, серая, серая. И упа, тупичок. Вот. Более того, в этот момент мы
[31:14.520 --> 31:20.120]  красим тогда, значит, мы начинаем их, видите, красим вот эту вершину в черный цвет. Ну, вот вам и ребро.
[31:20.120 --> 31:35.440]  Ну, я, нет, я поэтому тут текстом и написал. Да, это уже, нет, смотрите, в этой лемме подразумевается,
[31:35.440 --> 31:42.040]  что мы просто запустили ДФС и ничего дополнительно не делаем. То есть, ну, здесь, допустим, нашли цикл,
[31:42.040 --> 31:46.960]  обычно не подразумевает, что обычно мы там прям резко выбросились с криком ай-ай-ай. Точнее,
[31:46.960 --> 31:54.000]  наоборот классно. Вот. Да, ну, понятно, что зависит от задачи, там в разных задачах надо разные вещи
[31:54.000 --> 32:02.280]  делать, но вот. Вот, но здесь просто мне хотелось показать, что вот да, что ребра из черных вершин
[32:02.280 --> 32:08.160]  в серую могут быть, конечно, от слова вполне. Более того, а могут быть даже одновременно из вершины
[32:08.160 --> 32:13.160]  торчать ребра как в серую вершину, так и в черную, в общем, никаких проблем нет, правда. Ну, там,
[32:13.160 --> 32:19.640]  пожалуй, там, я не знаю, например, вот как, ну, например, самый тупой пример вот такой, там,
[32:19.640 --> 32:25.480]  может, могут быть и другие примеры, это, в общем, не очень интересно. Значит, такая вот лемма. Значит,
[32:25.480 --> 32:34.360]  что у нас тут еще? Так, а вот тут, так, вот давайте попробуем еще писать. Значит, какие у нас еще вещи?
[32:34.360 --> 32:41.800]  Так, а вот второй леммой как раз идет то, что у нас будет проходить под названием лемма о белых путях.
[32:41.800 --> 32:52.480]  Так, сейчас такая немножко сложная, сейчас будет это сложно сочиненная лемма. Вот.
[32:52.480 --> 33:10.640]  Вот, значит, смотрите, говорится, ничего себе. Да, значит, тексты будут. Значит,
[33:10.640 --> 33:20.160]  значит, ладно, напишу так, рассмотрим моменты времени. Значит, ладно, рассмотрим моменты времени.
[33:20.160 --> 33:34.560]  Когда вершина, там какая-нибудь вершина В, абсолютно произвольная, была покрашена
[33:40.560 --> 33:47.880]  в серый и черный цвета.
[33:50.160 --> 34:00.560]  Так, да, пусть это первый и второй момент времени. Так, ну, здесь я напишу короче,
[34:00.560 --> 34:13.040]  ну, давайте просто обозначение ввожу. Пусть это там, допустим, ТВ, там С и ТВ, нет, ТВС,
[34:13.040 --> 34:29.360]  нет, ТВР и ТВБ, нет. Слушайте, а действительно, да, как называют эти времена олимпегики,
[34:29.360 --> 34:38.880]  олимпегики их называют триентраут, да, да, вы абсолютно правы, да. Так, еще что-то изобретать
[34:38.880 --> 34:43.200]  велосипед, да. Формально я должен был, видимо, чуть позже сказать, что, что такое триентраут,
[34:43.200 --> 34:48.240]  но думаю, вы так или иначе, так или иначе мы с этим сталкивались, а в прошлом семестре.
[34:48.240 --> 34:57.120]  Теперь не сталкивались? Ну, когда, нет, когда мы запускали ДФС по дереву, мы говорили, что у нас
[34:57.120 --> 35:04.560]  есть время входа и время выхода. Давайте я тут формально, обычно в этом месте возникает такой
[35:04.560 --> 35:11.320]  код. Значит, смотрите, вот сюда вставляется стрелочка, то есть вот мы будем называть time in,
[35:11.320 --> 35:28.200]  значит, от В равно, так обычно тут пишут current time++, вот, ну вот, ну а сюда, соответственно,
[35:28.200 --> 35:47.360]  вписывается time out равно current time++, вот такая красота здесь, вот, то есть это на самом деле
[35:47.360 --> 35:52.720]  просто определение, но вводящееся в том числе естественно, ну хотя нет, Тарьян, кстати,
[35:52.720 --> 35:58.360]  знаете, я так вам сразу скажу, Тарьян, кстати, не вводит определение time in и time out, мы будем
[35:58.360 --> 36:04.480]  пользоваться, потому что мне кажется так органичнее, но Тарьян в дереве доминаторов будет говорить
[36:04.480 --> 36:09.640]  вообще наглую вещь, он говорит, а давайте запустим ДФС и переименуем вершины вот по time in,
[36:09.640 --> 36:15.280]  и начинает потом леммы даже в этом виде сформулировать, так что будете читать статью,
[36:15.280 --> 36:20.640]  имейте в виду сразу, потому что там без этой оговорки, естественно, там какие-то
[36:20.640 --> 36:27.240]  основополагающие леммы будут тупо неверные, вот, соответственно, да, но в принципе вот часто
[36:27.240 --> 36:32.800]  в ДФС, то есть там, я думаю, ну вот, хотя интересно, хотя ладно, если вы не писали там, допустим,
[36:32.800 --> 36:37.440]  если вы никогда не искали мосты и точки сочленения, по крайней мере кто-то из вас, то, возможно,
[36:37.440 --> 36:42.640]  вы в произвольных графах time in и time out не пользовались, хотя с другой стороны, а как же вы
[36:42.640 --> 36:52.200]  еще определяете, является ли вершина предком другой, заприкалька, нет, заприкалька из-за
[36:52.200 --> 36:58.160]  квадрата, да, подняться из одной вершины на нужную высоту с алгоритмом там двоичным подъемом,
[36:58.160 --> 37:07.520]  да, тем более, что мы эти золотые единицы уже умеем делать, да, хотя правда маленькая оговорка,
[37:07.520 --> 37:13.160]  так, я сейчас слета не помню, но, по-моему, в этом алгоритме, в алгоритме Ancestor Queries, мы там
[37:13.160 --> 37:17.080]  нигде не пользовались тем, что мы умеем искать, это проверять золотые единицы, является ли вершина
[37:17.080 --> 37:26.440]  предком другой, ой, а может даже и не пользовались, кстати, да, чего, ну, не важно, ладно, в общем,
[37:26.440 --> 37:30.440]  короче говоря, на самом деле, вот есть понятие время входа, время выхода, да, то есть мы говорим,
[37:30.440 --> 37:36.440]  что у нас есть, если у нас там n вершин, то у нас есть два n момента времени, то есть в которое мы
[37:36.440 --> 37:41.360]  входим вершину и выходим, собственно, пишется это вот буквально так, ну, я там, инициализация
[37:41.360 --> 37:47.520]  простая, да, что там, изначально current time равен, например, нулю, хотя если он будет равен 57,
[37:47.520 --> 37:58.520]  тоже большой беды не случится, вот, далее, значит это, значит, time in, time out это полное название,
[37:58.520 --> 38:05.400]  чаще, конечно, пишут time in, time out для краткости, мы будем использовать оба обозначения, вот, так вот,
[38:05.400 --> 38:13.320]  так вот, пусть у нас есть time in от v и time out от v, да, даже, вот, так даже еще круче, тогда,
[38:13.320 --> 38:20.200]  значит, какие у нас тут утверждения начинают быть верны, значит, что мы будем считать леммой о
[38:20.200 --> 38:38.840]  белых путях, значит, будем их считать так, значит, во-первых, значит, так, ладно, напишу,
[38:38.840 --> 38:55.320]  как есть тут, значит, вершины графа g без v, то есть все остальные, бывшие черными, так, бывшие
[38:55.320 --> 39:25.200]  черными и серыми в момент времени t и на t будут таковыми и в t out от v,
[39:25.200 --> 39:41.720]  это такой первый утверждение, ну, как доказать, но имеется в виду, что черные вершины останутся
[39:41.720 --> 39:47.400]  черными и, собственно, это самая-таки реальная часть, серая вершина останется пока серой,
[39:47.400 --> 39:57.760]  ну, в принципе, это логично, потому что кто такие серые вершины в тот момент времени t и на t, да,
[39:57.760 --> 40:04.680]  то есть это просто в точности stack до вершины v, то есть из этих вершин у нас идут рекурсивные
[40:04.680 --> 40:12.440]  запуски и мы эти вершины не перекрасим, пока мы не выйдем из вершины v, так что, да, это дот,
[40:12.440 --> 40:25.880]  то есть утверждение там может быть достаточно простое, вот, но, значит, а вот дальше начинается
[40:25.880 --> 40:49.360]  уже интересное, так, вершины, значит, g без v бывшие белыми, бывшие белыми в момент времени t и от v
[40:49.360 --> 41:13.000]  будут, будут в момент времени t и от v, так, да, но, первым заметим, что серыми они быть не могут,
[41:13.000 --> 41:19.840]  потому что когда мы будем выходить из вершины v, там, то серыми в момент времени t будут ровно
[41:19.840 --> 41:26.800]  те, кто были серыми в тейне, правда, вот, но это не все, да, это я сейчас напишу, но сразу готовить,
[41:26.800 --> 41:49.520]  это не все, то есть будут они либо белыми, либо черными, причем они будут черными тогда и только тогда, когда
[41:57.800 --> 42:09.080]  ну да, то есть, ну вот, причем они будут, ну, вершины, когда я тут пишу вершины, это, конечно, да,
[42:09.080 --> 42:12.520]  формулировка не очень хорошая на самом деле, потому что может вести тоже в заблуждение,
[42:12.520 --> 42:19.400]  правильнее было бы написать, конечно, так, то есть произвольная вершина u, она, ну,
[42:19.400 --> 42:23.760]  которая была белая, она будет либо белой, либо черной, причем будет она черной тогда и только
[42:23.760 --> 42:28.720]  тогда, в чем тонкая разница, что может возникнуть ощущение, что тут все прям вершины будут либо
[42:28.720 --> 42:36.880]  белыми, либо черными, это, конечно, не так, вот, то есть, как бы неверно, что там все белые вершины в
[42:36.880 --> 42:43.360]  момент времени t и на твои вершины, они там в t, а вот от v прям неожиданно перекрасится, но каждая конкретная
[42:43.360 --> 43:00.760]  вершина, она перекрасится в ч, тогда и только тогда есть путь из v только по белым вершинам,
[43:00.760 --> 43:14.040]  поэтому это называется лемма о белых путях, вот, то есть важный момент, что не просто есть путь,
[43:14.040 --> 43:28.000]  а есть именно белый путь. Объясняем мы это так, значит, кто в момент времени t и на твои серые вершины,
[43:28.000 --> 43:32.980]  те, кто находится в этот момент в рекурсивном стеке, ну у нас серый вершин в каждое времяrop
[43:32.980 --> 43:39.680] eka в рекурсивном стеке находится, вот говорим себе. То есть, когда мы t и на твоей, это момент времени,
[43:39.680 --> 43:42.040]  когда мы добавляем вершину в это рекурсивный стек, то есть вот у нас есть верно. А теперь
[43:42.040 --> 43:51.020]  заметим следующее, что такое момент времени t!!] это значит, что мы зашли вершину v побегали,
[43:51.020 --> 43:56.240]  побегали, побегали, побегали, все, что-то еще подобавляли в стек, мы все подостали и теперь еще и
[43:56.240 --> 43:59.760]  и достает вершину В. То есть это означает, что в этот
[43:59.760 --> 44:03.020]  повитрение серыми будут ровно те же, кто у нее там
[44:03.020 --> 44:08.220]  раньше лежал. Вот. То есть просто вот такое логичное
[44:08.220 --> 44:16.060]  устройство. Вот. Так что вот такие вот у нас еще леммы
[44:16.060 --> 44:23.440]  возникают. Так. Ну что, есть ли тут еще какие-то вопросы?
[44:23.440 --> 44:27.360]  Так. Ну тут пока, да, тут пока вроде нет, ну и действительно
[44:27.360 --> 44:30.720]  откуда тут еще их пока. Действительно, некуда,
[44:30.720 --> 44:34.400]  не откуда им взяться. Так. Ну что у нас еще есть? Но
[44:34.400 --> 44:37.880]  действительно тут уже кто-то упоминал. Конечно, на самом
[44:37.880 --> 44:40.320]  деле можно еще заметить, что так как у нас ДФС это
[44:40.320 --> 44:44.960]  обходит не дерево, то на самом деле ребра начинают
[44:44.960 --> 44:50.280]  конечно, то конечно у нас возникают еще какие-то
[44:50.280 --> 44:53.960]  свойства, связанные с тем, как ребра, по которым
[44:53.960 --> 44:58.080]  ДФС, так сказать, не пошел вообще устроена в этом графе.
[44:58.080 --> 45:02.080]  И что из этого можно сделать? Ну, значит, для этого просто
[45:02.080 --> 45:05.640]  давайте введем классификацию ребер относительно ДФС.
[45:05.640 --> 45:11.040]  Значит, ДФС, ну когда, значит, классификация, значит, сразу
[45:11.040 --> 45:13.960]  предупрежу, она может отличаться от той, которая там вам когда-то
[45:13.960 --> 45:16.880]  может быть водилась. Потому что понятно, что вы когда-нибудь
[45:16.880 --> 45:19.680]  там сталкивались с понятиями там обратной ребротом, например,
[45:20.160 --> 45:23.520]  обратное ребро точно. Перекрестное не гарантирует, а вот обратное,
[45:23.520 --> 45:29.360]  наверное, сталкивались. Но мы введем определение так.
[45:29.360 --> 45:33.720]  Значит, мы будем говорить, что в первую очередь, если мы запустим ДФС,
[45:33.720 --> 45:39.040]  в чем ДФС запустим по принципу, там пробежимся по всем вершинам,
[45:39.240 --> 45:50.360]  что если там color от V равно-равно там EDFS white, то, соответственно,
[45:50.360 --> 45:54.280]  там DFS от V. То есть я имею в виду, что мы железно запустили
[45:54.280 --> 45:59.680]  ДФС так, чтобы по всем вершинам пробежались. Так вот, значит,
[45:59.680 --> 46:05.280]  тогда первое, что появляется в графе, это то, что я буду
[46:05.360 --> 46:11.040]  называть ребра дерева ДФС или ребра леса ДФС. То есть это, собственно,
[46:11.040 --> 46:15.520]  ребра, вот эти вот ребра, по которым ДФС, собственно, пошел.
[46:15.520 --> 46:25.840]  Вот. Ну, то есть очевидно, что эти ребра образуют лес. Вот.
[46:25.840 --> 46:37.240]  Так, вот так, вот так, тут еще, рядом еще бамбу-ча. Так, вот какая-нибудь.
[46:37.240 --> 46:51.880]  Еще такие бамбу-ча. Вот. Вот. Значит, это у нас будет называться ребра дерева ДФС.
[46:51.880 --> 47:09.920]  Но помимо них у нас будут еще другие ребра. Какие у нас еще ребра бывают? Бывают ребра,
[47:09.920 --> 47:18.640]  которые соединяют какую-то вершину с ее потомком. Но при этом это ребро в дерево ДФС не вошло.
[47:18.640 --> 47:24.400]  Это может быть выглядит так, может быть выглядит так, может даже вот так, там кратные ребра бывают.
[47:24.400 --> 47:37.720]  Ну и из корня, конечно, тут все что угодно может идти. Что? Предки корня. О, Господи. Ну, знаете,
[47:37.720 --> 47:43.320]  так. Ну нет, тут как мыслить, что такое предок. Знаете, это прикол, да, там команда КВМ поет
[47:43.320 --> 47:47.780]  там песню действительно про родителей. Там добра песня про родителей. Давайте,
[47:47.780 --> 47:53.680]  давайте может быть споем про наших предков. Давайте homo erectus. Ну вот, там спасибо,
[47:53.680 --> 48:00.240]  что ты был, что ты там взял камень к палке и прикрепил. Давайте предков всех животных,
[48:00.240 --> 48:06.720]  а там, ну вот и там до большого взрыва дошли. Ладно, это я, к сожалению, сейчас не воспроизведу.
[48:06.720 --> 48:13.880]  Рекомендую отдельно, потому что уже закончилось тем, что они начали петь Оду просто ничего,
[48:13.880 --> 48:21.880]  по принципу. А что было до большого взрыва? Ничего, спасибо, что ты был там. Ну и так далее.
[48:21.880 --> 48:35.200]  Вот, ладно, так вот, эти ребра мы будем называть прямые. Значит, что еще бывает? Бывает еще ребра,
[48:35.200 --> 48:39.480]  которые наоборот. Да, если мы говорим об ориентированном графе, то бывают ребра,
[48:39.480 --> 48:47.400]  которые соединяют предка наоборот, потомка с предком. Ну вот, да, эти ребра, то есть вот как-то так,
[48:47.400 --> 48:53.360]  ну на абсолютно произвольную высоту это может происходить. Вот так. Значит, такие ребра у нас
[48:53.360 --> 48:58.560]  будут называться обратными, да, я для них еще и цвета ввожу. Ну, впрочем, я надеюсь, что, ну,
[48:58.560 --> 49:01.440]  собственно, я думаю, там все соответствующие алгоритмы, я надеюсь, мы сегодня обсудим,
[49:01.440 --> 49:06.840]  поэтому как бы это будет такое локальное обозначение. Вот, значит, это у нас ребра,
[49:06.840 --> 49:14.800]  значит, обратные ребра. И есть, конечно, все остальные, которые соединяют непредка с непотомком,
[49:14.800 --> 49:23.360]  непредка непотомка с непотомком непредка. Дальше смотрите. Да, то есть это вот какие-то вот такие
[49:23.360 --> 49:33.440]  вот веселые ребра. Зелененькие, красивые, зелененькие, радостные. Ну, что сразу мерзкие,
[49:33.440 --> 49:40.240]  нормальные ребра. Вот, ну, смотрите, да, тут, смотрите, значит, еще важный момент на уровне
[49:40.240 --> 49:44.680]  нашей с вами договоренности. Да, ну, во-первых, да, эти ребра называются перекрестными, я их так и
[49:44.680 --> 49:55.240]  напишу. Перекрестные. Значит, смотрите, прикол. Значит, они называются перекрестные ребра. Значит,
[49:55.240 --> 50:02.160]  да, я их тут, вы можете заметить, что я их почему-то все эти ребра рисую справа налево. Так вот,
[50:02.160 --> 50:09.880]  это не случайно, потому что нам очень удобно будет мыслить, то есть рисовать, знаете как,
[50:09.880 --> 50:15.600]  то есть рисовать, что как будто, то есть воображать, что когда ДФС шел, он как бы шел слева направо.
[50:15.600 --> 50:21.280]  То есть он как бы ДФС, во-первых, начался с этой вершины, сначала пошел сюда, потом, потом сюда,
[50:21.280 --> 50:28.120]  сюда, сюда, значит, там вернулся сюда, потом сюда, дальше там сюда, сюда, сюда, ну и так далее. Вот.
[50:28.120 --> 50:36.840]  Вот. Тогда в таком предположении, в таком предположении действительно оказывается,
[50:36.840 --> 50:42.920]  что все перекрестные ребра будут нарисованы справа налево. Ну, неграмотно, не совсем грамотно
[50:42.920 --> 50:47.840]  так говорить, это, конечно, уже известные нам шутки, знаете, помните, это там мальчик,
[50:47.840 --> 50:53.640]  который не знал сторон света, каждый, там каждый лет смотрел, как птицы улетают направо, вот это
[50:53.640 --> 51:02.520]  все. Вот. Ну, как бы нам не очень хочется говорить. Вот. Поэтому мы эту зеленую лему сформулируем
[51:02.520 --> 51:13.600]  немножко по-другому. То есть лемма, значит, пусть, ой, нет, зря я, вот в этом месте я пишу зря, конечно.
[51:13.600 --> 51:25.440]  Так, ой, интересно, мне эта лемма там под номером проходит или? А, на самом деле, проходит. А, проходит.
[51:25.440 --> 51:31.440]  А, то, что я хотел написать, она называется, а, ну ладно. А, хотя нет, она никак не называется,
[51:31.440 --> 51:35.840]  поэтому могу писать. Ладно. Значит, смотрите, в общем, короче, давайте еще просто леммочка.
[51:35.840 --> 51:42.440]  Но давайте, важное для нас замечание, если ребро УВ перекрестное,
[51:42.440 --> 52:08.600]  вот, то неожиданно выясняется, что таймин от У, он больше, чем таймин от В. То есть в экшену У
[52:08.600 --> 52:19.560]  мы зашли позже, чем зашли в экшену В. Ну, в общем-то, это логично, да? Ну, почему так? Ну, просто потому,
[52:19.560 --> 52:25.840]  что предположим, что мы в экшену У зашли раньше. То есть мы зашли в экшену У, а в экшену В еще ДФС не заходил,
[52:25.840 --> 52:36.960]  то есть она белая. Ну, тогда как бы, в принципе, да. Хотя в данном случае можно было и попроще.
[52:36.960 --> 52:42.840]  Ну, в данном случае можно просто заметить, что тогда заметим, что вершина В уж точно будет обойдена до
[52:42.840 --> 52:52.360]  того, как мы бы. Ну, вот, точнее так. Отсюда следует такое, что очевидно, что вершина В будет по любому
[52:52.360 --> 53:01.160]  потомкам вершины У в дереве ДФС. И как следствие, это ребро окажется либо прямым, либо ребром дерева
[53:01.160 --> 53:13.960]  ДФС, либо прямым. Вот так. Ну, на самом деле, смотрите. Ну, во-первых, тут еще неожиданно, раз мы
[53:13.960 --> 53:21.240]  тут ввели понятие тайм-ин и тайм-аут, то в принципе, кстати, еще там для, чисто для формулировки,
[53:21.240 --> 53:29.800]  оказывается, удобно еще можно ввести понятие тайм-сегмент. Да, просто отрезок времени,
[53:29.800 --> 53:38.600]  просто отрезок на числовой прямой такой просто. Вот. Потому что, ну вот. Ну, потому что возникнет
[53:38.600 --> 53:48.560]  такой чисто практический вопрос. Так, ой, мне тут все так, что мне похоже, а мне тут все понадобится.
[53:48.560 --> 53:59.640]  Еще я пошел. Так, так. Значит, смотрите. Потому что, на самом деле, возникнет такая идея, что нам
[53:59.640 --> 54:07.000]  вообще-то по ребру хотелось бы уметь определять. А вообще какое оно? Оно там дерево ДФС, оно прямое,
[54:07.000 --> 54:10.880]  оно там вообще обратное, перекрестное. Как мне вообще это сделать?
[54:18.560 --> 54:28.400]  Нет, ну не просто рандомный граф, а мы запускаем там ДФС. Вот. Ну, в принципе, да. Ну, вот. Да,
[54:28.400 --> 54:33.960]  ну надо смотреть. Ну, на самом деле, можно заметить следующее, что, ну, во-первых, для этого нам нужда,
[54:33.960 --> 54:39.400]  ну, ребро дерево ДФС идентифицируется просто, да. Ну, на самом деле, так. То есть, просто можно
[54:39.400 --> 54:43.760]  вообще в принципе заметить, что у нас потомок, то есть у нас обратные ребра, которые тут ведут из
[54:43.760 --> 54:50.520]  потомков предка, да. Прямые ноты, которые идут из предков потомка, а перекрестные все остальные.
[54:50.520 --> 54:57.080]  В общем-то, если бы у нас было просто дерево, мы бы умели, мы это легко определяем. Я даже не
[54:57.080 --> 55:02.840]  буду выписывать лему, да. Потому что мы помним, что если мы запускаем, например, на дереве ДФС и
[55:02.840 --> 55:09.600]  проверяем, кто у нас там тайм-ин и пишем тайм-ин, тайм-аут, то мы помним, что там вершина У является
[55:09.600 --> 55:16.720]  предком вершины В, если тайм-сегмент от В является под отрезком тайм-сегмента АТУ, правда. То есть,
[55:16.720 --> 55:24.240]  как бы, то есть мой отрезок содержится в отрезке моих предков, в моем отрезке содержится отрезки
[55:24.240 --> 55:30.800]  все моих потомков, а со всеми остальными я тупо не пересекаюсь. То есть, как бы, это вот вложенные
[55:30.800 --> 55:36.880]  отрезки. Да, я, пожалуй, не буду даже писать лему. Я думаю, да, будет, на самом деле, можно на самом деле
[55:36.880 --> 55:41.280]  здесь попроще. То есть, единственное у нас с этой точки зрения проблема будет это отличить прямые
[55:41.280 --> 55:50.320]  ребра от ребер дерева ДФС. Но как это работает? Ну, работает это вот, давайте вот, можно код немножко
[55:50.320 --> 56:01.400]  расширить. Ну, смотрите, нет, просто как будем записывать? Потому что нет, мы это будем делать
[56:01.400 --> 56:09.680]  просто в порядке ДФСа. Вот. Потому что, ну, на самом деле, какой-нибудь так ДФС можно записать
[56:09.680 --> 56:17.240]  действительно там следующим образом. Даже, ой, давайте, можно, конечно, можно писать ИФ, но вы
[56:17.240 --> 56:29.480]  изучили еще один продвинутый оператор С++. Ну, это какой? Ну, вот. Ну, вот. То есть, да, давайте,
[56:29.480 --> 56:46.320]  вот так. То есть, как он пишется? Он пишется так. Значит, switch, соответственно, color от U. Ну,
[56:46.320 --> 57:04.320]  тут я блок, пожалуй, напишу. Вот. Так. Значит, пишем, соответственно. Значит, пишем. Значит,
[57:04.320 --> 57:22.280]  case E DFS white. Вот. Ну, тут обычно мы пишем, что, значит, там VU это, соответственно, ребро дерева ДФС.
[57:22.280 --> 57:32.480]  Так, что мы тут дальше делаем? Ну, там обычно в этом месте, собственно, ДФС от U запускаем.
[57:32.480 --> 57:44.000]  Так. Ну, и не забываем о том, что надо еще обязательно бряк писать. Помним, да, что switch,
[57:44.000 --> 57:54.360]  как бы он вещь такой, кейс это просто метка. Вот. Так, что у нас еще? Так, кейс, если у нас,
[57:54.360 --> 58:02.480]  нет, неправильно пишу. Как говорится, как правильно писать? Правильно писать, конечно,
[58:02.480 --> 58:22.440]  рыженьким. Case E DFS gray. Вот. То, значит, в этом случае VU обратная. Вот. Ну, там можно что-то
[58:22.600 --> 58:37.760]  с этим делать и тоже бряк. Вот. Так, что у нас еще есть? Так. Нет, в черном случае ребро дерева ДФС мы уже
[58:37.760 --> 58:48.800]  обошли. То есть надо теперь отличить прямое ребро от перекрестного ребра. Вот. Ну, тут на самом деле как
[58:48.800 --> 59:00.880]  повезет. Поэтому я, так как у нас пока сомнения, я напишу красненьким. Так. Давайте. Case E DFS black.
[59:00.880 --> 59:07.280]  А, ну да, можно было, да, логично, наверное, черным было написать. Case DFS black. Ну, теперь как отличить?
[59:07.280 --> 59:14.920]  Как теперь, как мне теперь отличить прямое ребро от перекрестного ребра? Ну да. Ну, давайте вот
[59:14.920 --> 59:27.440]  просто наши лем, зеленые лем мы и воспользуемся. Если оказалось, что... Нет, стоп. Так. А, ну да,
[59:27.440 --> 59:35.080]  собственно, если, ну вот. То есть, да, если оказалось, что у нас, да, тут у нас немножко... Ой, давайте лему
[59:35.080 --> 59:51.760]  переформулируем тут. Вот. Нет, просто либо тут переписать, либо DFS, ну как бы, да. Вот. Значит,
[59:51.760 --> 01:00:01.760]  таймин от В должен быть больше. То есть, если оказалось, что таймин от У меньше, чем таймин от В,
[01:00:01.760 --> 01:00:24.560]  то что? То значит, ребро ВУ перекрестное. Ну вот. В противном случае. То есть, иначе ВУ прямое.
[01:00:24.560 --> 01:00:42.880]  Так. Ну вот. Уже не надо. Нет, ну как бы, да. Нет, все гораздо проще. Ну, потому что, скажем,
[01:00:42.880 --> 01:00:50.960]  прямое ребро это наш потомок. То есть, мы как бы в него сходили, потом вышли. Поэтому, ну вот. То
[01:00:50.960 --> 01:00:56.240]  есть, это означает, что таймин от У будет просто по-любому больше, больше, чем мы. Все. Так что,
[01:00:56.240 --> 01:01:02.160]  на самом деле, проверять таймал даже не надо. С этой точки зрения, конечно, может быть, мы... То есть,
[01:01:02.160 --> 01:01:07.880]  мы на самом деле здесь вот эти прямые ребра не очень корректно рисуем, кстати. То есть,
[01:01:07.880 --> 01:01:14.200]  на самом деле, конечно, можно, ну просто, чтобы... Нет, ну не... Да, потому что, конечно, корректнее
[01:01:14.200 --> 01:01:22.960]  было бы их, конечно, вот как-то вот так-то рисовать. Ну, скажем так. Дело в том, что для того,
[01:01:22.960 --> 01:01:27.160]  чтобы это ребро стало прямым, мы должны были сначала вот по этому пути пройти, вернуться,
[01:01:27.160 --> 01:01:35.560]  а потом уже вспомнить, что это ребро есть. Я вот это имею в виду. Раз уж у нас тут такая технология,
[01:01:35.560 --> 01:01:44.000]  поэтому вот так. Вот так вот надо. О, ребро есть неоткуда классно. Так. Ну вот, вот это вот. Ну и
[01:01:44.000 --> 01:02:02.400]  так далее. А вот здесь хорошо нарисовано. Так. И вот так еще можно. Арабский ДФС. Нет, ну да, там
[01:02:02.400 --> 01:02:06.560]  была лекция, что всю математику, на самом деле, в какой-то момент арабы в математике были,
[01:02:06.560 --> 01:02:22.000]  там гораздо продвинутее европейцев, но потом что-то пошло не так. Ну да. Какой из... Вот.
[01:02:22.000 --> 01:02:28.440]  Значит, ваупрямо. Значит, соответственно, вот мы уже научились определить перекрестные ребра,
[01:02:28.440 --> 01:02:34.720]  прямые ребра. Значит, и какие-то вот так. Значит, и конечно так, что у нас так... Что-то я еще забыл.
[01:02:34.720 --> 01:02:39.600]  Вот. Да, то есть, в принципе, вот у нас есть действительно какие-то такие ребра, мы действительно
[01:02:39.600 --> 01:02:45.240]  можем изучать их какие-то свойства. Мы, собственно, нам, собственно, придется как-то этим пользоваться.
[01:02:45.240 --> 01:02:54.360]  Но, с другой стороны, важный момент, потому что... Важный момент, что все это, верно,
[01:02:55.080 --> 01:03:03.320]  это все такая красота в абсолютно ориентированных графах. Значит, давайте подумаем, а что... Чем
[01:03:03.320 --> 01:03:11.320]  будет отличаться неориентированный граф? Ну, в некотором смысле, да. То есть, ну, во-первых,
[01:03:11.320 --> 01:03:16.320]  давайте... Да, в неориентированном графе вообще удобно считать, что граф связан. Потому что,
[01:03:16.320 --> 01:03:21.400]  если он не связан, то мы обычно там просто в каждой компоненте связанности будем жить независимо. То
[01:03:21.400 --> 01:03:25.800]  есть, ДФС у нас, очевидно, в неориентированном графе обойдет всю компоненту связанности. То есть,
[01:03:25.800 --> 01:03:30.000]  не будет каких-то еще там доп-ребр, которые откуда-то ведут. Видите, у нас тут вот перекрестные ребра
[01:03:30.000 --> 01:03:36.800]  вот эти вот идут из соседних деревьев. Да, вот эти. Вот тут очень, да, вот это вот важные моменты, да. То
[01:03:36.800 --> 01:03:44.000]  есть, тут произвольно абсолютно могут идти. Вот. Тут этого не будет. То есть, в неориентированном графе у
[01:03:44.560 --> 01:03:52.720]  нас все деревья независимые, не связаны никак с друг с другом. И у нас, внимание, нет перекрестных ребер.
[01:03:52.720 --> 01:04:02.880]  То есть, можно еще ввести такую леммочку, еще одну зеленую лему. Лему 4 даже можно написать ее. В
[01:04:02.880 --> 01:04:14.600]  неориентированном графе нет разминки. Перекрестных ребер. Ну да, как это.
[01:04:14.600 --> 01:04:36.800]  Вот. Так. Ой. Вот. Так что вот такая. Да, а почему это так-то вообще? Ну, потому что,
[01:04:36.800 --> 01:04:48.680]  по определению, перекрестные ребра, это те, которых нет в неориентированном графе. Да, замечательно.
[01:04:48.680 --> 01:05:02.560]  Нет, если оно было таким, тогда да, по определению. Ну да. Рассмотрим ребро. Рассмотрим момент времени,
[01:05:02.560 --> 01:05:07.760]  когда мы впервые вошли в какую-то из его вершин. Вот. Утверждение. Вторая вершина
[01:05:07.760 --> 01:05:17.040]  будет, по-любому, станет потомком. Ну да. Либо прям ребенком, либо потомком. Вот. Да. То есть,
[01:05:17.040 --> 01:05:22.600]  просто такое утверждение. Поэтому перекрестных ребер нет. То есть, все ребра, кроме ребра дерева,
[01:05:22.600 --> 01:05:28.160]  соединяют нас либо потомком с предком, либо с предком с потомком. Причем, более того,
[01:05:28.160 --> 01:05:34.120]  в неориентированном случае, это еще и одно и то же. То есть, прямые обратные ребра, они так идут,
[01:05:34.120 --> 01:05:43.680]  в общем-то, вот так вот вместе. Вот. То есть, можно их как-то вот так вот нарисовать. Вот. То есть,
[01:05:43.680 --> 01:05:49.280]  это типа одно и то же. Но мы, соответственно, мы не будем, соответственно, рисовать прям
[01:05:49.280 --> 01:05:59.840]  двуцветные ребра. И просто будем по умолчанию считать такие ребра обратными. Вот. То есть,
[01:05:59.840 --> 01:06:05.800]  поэтому это обычно имеется в виду, когда говорят о том, что в неориентированном графе есть только
[01:06:05.800 --> 01:06:14.560]  ребра дерева DFS и обратные ребра. Вот. И это нам, собственно, иногда в некоторых задачах и начинает
[01:06:14.560 --> 01:06:20.560]  очень сильно помогать. Ну, как минимум, там базовые задачи, которые, на самом деле, как выясняется,
[01:06:20.560 --> 01:06:24.160]  почему-то в школе там не сильно умеют решать. Это какие, вы знаете, вот встречали вы когда-нибудь
[01:06:24.160 --> 01:06:30.480]  такие задачи с каким-то таким веселым сюжетом в духе там дан связанный граф, в котором там
[01:06:30.480 --> 01:06:37.960]  количество ребер не более чем количество вершин плюс пять. Найдите что-нибудь там, я не знаю. Нет,
[01:06:37.960 --> 01:06:44.440]  просто я помню, я даже сам пару задач таких давал на самом деле когда-то. Ну да, нет. Вот
[01:06:45.000 --> 01:06:53.040]  у меня такая была. Нет, у меня в свое время была, ой, не надо это, надо ли это. Ладно. Не надо было
[01:06:53.040 --> 01:06:58.960]  это, может. Нет, я просто эту задачу когда какие-то контесты иногда даю. Нет, ну просто нет. Ну,
[01:06:58.960 --> 01:07:03.720]  на учебное. Но не важно. Нет. Задача теперь такая. Дайте, вот была веселая, но выясняется,
[01:07:03.720 --> 01:07:09.800]  что там не все умеют справляться. То есть, задача такая. Дан граф, количество е в нем не более чем
[01:07:09.800 --> 01:07:24.000]  в плюс один. Скажите, пожалуйста, а сколько в нем циклов? Вот. Вот такой момент. То есть,
[01:07:24.000 --> 01:07:29.400]  на самом деле, просто если... То есть, на самом деле, как задачу решать? Ну, во-первых, проверяем,
[01:07:29.400 --> 01:07:38.640]  что если е равно в минус один, то циклов нет. Ну, простых циклов имеется в виду. Да, спасибо за
[01:07:38.640 --> 01:07:50.040]  уточнение. Да, естественно, имеются в виду простые циклы. Да. Если е равно в просто тогда цикл железобетонно
[01:07:50.040 --> 01:07:57.200]  один. Мы его даже можем вывести там при желании, но он один. И вот начинается действительно интересный
[01:07:57.200 --> 01:08:02.480]  вопрос. Причем, кстати, его достаточно просто вывести, потому что возьмем вот это обратное
[01:08:02.480 --> 01:08:08.560]  ребро и, в общем-то, вот оно цикл нам и гарантирует. А дальше начинается момент. А как найти,
[01:08:08.560 --> 01:08:16.400]  например, второй нот? А что делать, если у нас е равно в плюс один? Или что-то уже самое?
[01:08:16.400 --> 01:08:26.600]  Обратных ребер в графе два. Ну да, то есть, тут, конечно, начинаются какие-то случаи, которые надо
[01:08:26.600 --> 01:08:34.680]  как-то хорошо рассматривать. Потому что у нас есть два обратных ребра, у них есть пути. Вопрос,
[01:08:34.680 --> 01:08:41.400]  связаны ли эти, пересекаются ли эти пути как-то по вершинам? И тут надо проверять, потому что самый
[01:08:41.400 --> 01:08:47.240]  простой случай для нас — это если эти пути не пересекаются. То есть, например, вот как-то вот так,
[01:08:47.240 --> 01:08:59.480]  например, эти обратные ребра устроены. Или там вот как-то вот. То есть, может быть, как-то вот так
[01:08:59.480 --> 01:09:04.400]  там дерево устроено. Может быть, как-то вот так. Или там это ребро потомок вот этого и так далее.
[01:09:04.400 --> 01:09:09.400]  Если они не пересекаются или там как-то вот хорошо соприкасаются, то циклов у нас там, оказывается,
[01:09:09.400 --> 01:09:17.440]  два. Вот. Ну, в принципе, кстати, да, если они именно соприкасаются по одной вершине, то,
[01:09:17.440 --> 01:09:30.440]  в принципе, да, то вот вам, пожалуйста. То вполне себе оказывается, что циклов два. Но если у них
[01:09:30.440 --> 01:09:37.480]  есть общее пересечение, то есть, если эти циклы пересекаются по какому-то пути, то тут, конечно,
[01:09:37.560 --> 01:09:42.440]  момент. Ну, то есть, на самом деле так. Задачи я не буду сейчас разбирать все случаи. Ну, вот. Ну,
[01:09:42.440 --> 01:09:49.560]  там какие-то возникают. Но суть заключается в том, что у нас, то есть, граф будет устроен так. То есть,
[01:09:49.560 --> 01:09:57.360]  у нас есть будут какие-то две вершины, соединенные тремя путями в итоге. И от них там какие-то деревья
[01:09:57.360 --> 01:10:02.560]  расходятся. И теперь остается только вопрос. Сейчас.
[01:10:07.480 --> 01:10:15.640]  Нет, может задача не так формулировалась. Сейчас надо спорить просто. Ну, хотя да. Ну, ладно,
[01:10:15.640 --> 01:10:22.760]  задача по-другому формулировалась. Не важно. Вот. А, ну, вот. А, ну, вот. А, там был вопрос. С
[01:10:22.760 --> 01:10:28.480]  какими способами можно удалить. Там можно такую задачу дать. С какими способами можно удалить
[01:10:28.480 --> 01:10:38.200]  два ребра, чтобы граф остался связанным, например. Вот. Ну, например, так. Да. Ну,
[01:10:38.200 --> 01:10:43.000]  например, да. Понятно. Вот для этих двух циклов просто найдите длину цикла. В чем длину цикла
[01:10:43.000 --> 01:10:49.240]  найти очень просто. То есть, просто запустим ДФС, посчитаем глубины в ДФС. Правда? И тогда тут
[01:10:49.240 --> 01:10:53.720]  как бы количество ребер тут найти легко, как разность высот плюс один. Вот. Тогда тут будет
[01:10:53.720 --> 01:11:06.080]  произведение. Дан связный граф. В нем там, допустим, е равно в плюс один. Хочется удалить
[01:11:06.080 --> 01:11:09.920]  там два ребра так, чтобы граф остался связанным. Спрашивается, с какими способами можно это сделать.
[01:11:09.920 --> 01:11:19.760]  Нет. Ну, как сказать. Наверное, не очень хочется, наверное, тут вспоминать. Я тут
[01:11:19.760 --> 01:11:25.040]  спросил, как искать мосты. Да, это, по-моему, подняли руки не все. Так что тут такое. То есть,
[01:11:25.040 --> 01:11:31.440]  это надо еще вспоминать. Там, конечно, алгоритм простой, конечно, но тем не менее. То есть,
[01:11:31.440 --> 01:11:34.680]  проект надо вспоминать мосты, надо вспоминать еще там желательно какие-то свойства знать,
[01:11:34.680 --> 01:11:42.440]  половину из которых вы докажете в домашнем задании. Вот. Это так. Вот. Ну, вот. Но если они
[01:11:42.440 --> 01:11:47.320]  пересекаются туда, тут, конечно, понятно, что надо как бы удалить какие-то два ребра из вот этих
[01:11:47.480 --> 01:11:54.480]  трех путей, но при этом не из одного. Нет. Ну, ответ, конечно, понятно. Ну, там самый простой
[01:11:54.480 --> 01:11:59.880]  способ найти ответ, это два простых способа. Либо есть найти длинные этих трех путей и сказать,
[01:11:59.880 --> 01:12:05.560]  что ответ это типа это на это, плюс это на это, плюс это на это, например. Или там можно было
[01:12:05.560 --> 01:12:10.840]  сказать, что тут ответ ССН по два, минус СС, все вот это по два, минус СС, вот это по два,
[01:12:10.840 --> 01:12:17.040]  минус СС, это по два, минус СС. Можно так, например. Ну, то есть, в общем, десятью способами какой
[01:12:17.040 --> 01:12:23.040]  вам удобнее. То есть, самая фишка в задаче будет только вот эти пути найдите. То есть, там вам
[01:12:23.040 --> 01:12:31.720]  придется рассмотреть случаи, потому что там как-нибудь... Ну, например. А, ну, то есть,
[01:12:31.720 --> 01:12:37.840]  самое тупое, это можно сделать, когда вот тут еще две... То есть, вот как-то вот так. И это рыжее
[01:12:37.840 --> 01:12:43.960]  ребро, допустим, идет вот куда-нибудь вот сюда. Тогда вот это пересечение, вот оно вот здесь. Видите,
[01:12:43.960 --> 01:12:50.160]  да? То есть, например, да. То есть, ну, там, ну, честно скажу, то есть, на самом деле в подобных
[01:12:50.160 --> 01:12:55.920]  задачах, там один из самых удобных лайфхаков, это взять все вершины, с которыми соприкасаются,
[01:12:55.920 --> 01:13:02.440]  значит, вот эти обратные ребра. Объявить типа у нас. Назовем вершину хорошей, если вот у нее есть
[01:13:02.440 --> 01:13:10.520]  обратное ребро. Вот тут или там вот еще. Точнее так. Вот тут и вот тут. Да, у нас тут их два такие,
[01:13:10.520 --> 01:13:15.680]  две такие ребра. Ну вот. И потом сказать, что давайте еще объявим хорошей, допустим, еще вершину,
[01:13:15.680 --> 01:13:29.520]  являющейся LCA каких-то двух хороших вершин. Вот. Ну, вот. Ну, то есть, так. То есть, там по большому
[01:13:29.600 --> 01:13:35.080]  счету, то есть, вот эти вершины оказываются на самом деле достаточно. То есть, важными оказываются
[01:13:35.080 --> 01:13:43.600]  именно эти вершины, по большому счету. Потому что, по сути, оказывается, что это просто, то есть,
[01:13:43.600 --> 01:13:50.600]  эти вершины соединены между собой какими-то путями, на которых там висят какие-то деревья. И обычно там,
[01:13:50.600 --> 01:13:54.800]  с точки зрения, часто с точки зрения задачи, оказывается, что эти деревья там уже не принципиально.
[01:13:54.800 --> 01:14:00.880]  Ну, там разные задачи были, потому что там, не знаю, то есть, фишка была, когда я там просто даже
[01:14:00.880 --> 01:14:06.200]  на квалификации какого-то года дал просто задачу вот на это. А потом приехали на полуфинал,
[01:14:06.200 --> 01:14:12.560]  и там Гена Короткий мечтал задачу на это. Вот. Ну, не такую же, естественно. Но как бы вот оказалось,
[01:14:12.560 --> 01:14:18.200]  что вот, как говорится, сюжет, как говорится, то есть, в принципе, сюжет вот иногда нет-нет и
[01:14:18.200 --> 01:14:25.880]  это появится. Вот. То есть, там все что угодно. Потому что там вообще, если ребер не много там,
[01:14:25.880 --> 01:14:29.920]  например, будет там их лишних пять, то там бывают там запросы в духе, даны две вершины,
[01:14:29.920 --> 01:14:38.400]  а сколько между ними простых путей существует, например. Ну да, да, да, да, да, да, да, да, да,
[01:14:38.400 --> 01:14:43.160]  и качаешь, и можно, да, да, да, тут, да, все, да, то есть, все что угодно, то есть, развлекаться можно
[01:14:43.160 --> 01:14:47.320]  бесконечно долго, да. То есть, конечно, можно там покопать в историю, потому что, конечно, если там,
[01:14:47.320 --> 01:14:51.560]  видимо, сейчас прийти на членов дать такую, то там, возможно, задача будет отвергнуть с формировкой.
[01:14:51.560 --> 01:15:00.160]  Этого было уже миллион раз. Там такое, так что вот. Так. Вот. Да. Есть вот такие вот эффекты,
[01:15:00.160 --> 01:15:10.960]  тоже поговорили немножко. Значит, ладно, надо тогда переходить. О, они перейтили нам к перерыву. Да,
[01:15:10.960 --> 01:15:17.560]  пришло время перерыва, пожалуй, да. Ладно, значит, мы рассмотрели, соответственно, какие-то достаточно
[01:15:17.560 --> 01:15:23.200]  базовые вещи. Теперь мы расслабляем нот. Значит, теперь перейдем к каким-то уже, значит,
[01:15:23.880 --> 01:15:30.520]  более продвинутым алгоритмам. Значит, ну, на самом деле, как я сказал, сейчас мы с помощью
[01:15:30.520 --> 01:15:38.560]  DFS изобретем просто, ну, не мы, а вслед за Торианом, соответственно, изобретем метод, который будет
[01:15:38.560 --> 01:15:45.440]  одним просто одним махом искать практически все. Вот. Ну, у нас получится, конечно, что это будет,
[01:15:45.440 --> 01:15:51.320]  но вот опять их будет три, поэтому получится будет уровень easy, уровень medium и уровень hard.
[01:15:51.320 --> 01:16:13.880]  Как же мы это будем делать? Чего? Чего? Поиск элеробцикла? Нет, это да. Это тоже DFS,
[01:16:13.880 --> 01:16:20.160]  но немножко другой. Хотя да, надо будет его тоже упомянуть в какой-то момент. Но сейчас давайте
[01:16:20.160 --> 01:16:26.760]  пойдем по основной магистрали. Ну, во-первых, ведем определение. Сейчас мы некоторое время будем
[01:16:26.760 --> 01:16:34.760]  говорить о неориентированном графе. Значит, определение такое. То есть мы говорим, что у нас,
[01:16:34.760 --> 01:16:42.280]  значит, граф пока неориентированный. Так вот, значит, определение. Ну, с одной стороны, у нас
[01:16:42.280 --> 01:16:47.920]  есть такое понятие, значит, как мост. Что такое мост? Значит, ну, пишем прям по определению. Да,
[01:16:47.960 --> 01:16:51.360]  мост – это ребро, удаление которого
[01:16:51.360 --> 01:17:07.400]  приводит к увеличению количества компонентов связности. Ну, и да. Ладно, сказанул, ну, что делать?
[01:17:17.920 --> 01:17:44.760]  О, поместилось. Вот. Вот. Значит, есть у нас действительно такие вот простые вещи. Вот.
[01:17:48.760 --> 01:17:57.280]  Значит, что у нас еще есть? Вот. Ну, в принципе, вот было бы интересно, конечно, научиться в
[01:17:57.280 --> 01:18:04.760]  неориентированном графе как-то такие мосты искать. Вот. Но рядом с ним у нас, конечно,
[01:18:04.760 --> 01:18:15.560]  будет находить еще одно понятие. Значит, тоже. Так, ой. О, тут еще. Ой, еще маркеры есть.
[01:18:15.560 --> 01:18:36.920]  Нет, этим писать нельзя. Ой, а чьи перчатки? Что? Господи, кошмар. Включает кто-то рандомно.
[01:18:36.920 --> 01:18:54.960]  А чьи перчатки? Отрезок сочленения. Ничего себе. Отрезок сочленения. Это я еще не спрашиваю шутку.
[01:18:54.960 --> 01:19:00.280]  Отрезок сочленения вообще. Да? Ничего себе.
[01:19:24.960 --> 01:19:39.360]  Так, ладно. Значит, я тут кое-что забыл. Нет, ну да, я тут ДФС. Нет, я тут забыл, что тут это еще надо.
[01:19:39.360 --> 01:19:50.120]  Так, сейчас. Нет, это просто я тут неожиданно вспомнил, что у нас тут был просто недописанный ДФС.
[01:19:50.120 --> 01:19:56.120]  Вот тут важно. А то если вершина никогда не делается к черным, то на самом деле вся эта технология летит в трубу.
[01:19:56.120 --> 01:20:09.520]  Вот. Поэтому как бы, называется к черной, должны, ну вы поняли. Так вот. Значит, ладно. Теперь я беру нормальный какой-нибудь маркер.
[01:20:09.520 --> 01:20:24.920]  Я надеюсь, что он нормальный. И, значит, определение. Значит, вершины УЮВ. Реберна двусвязаны.
[01:20:24.920 --> 01:20:51.720]  Если, как хочется написать, из одной в другую можно пустить поток величины два. Но существует.
[01:20:51.720 --> 01:21:19.520]  Два. Реберна не пересекающихся пути соединяющих УЮВ.
[01:21:19.520 --> 01:21:35.520]  Тут, конечно, не тривиальные тут слова есть. А именно, что такое реберна не пересекающиеся?
[01:21:35.520 --> 01:21:47.520]  Это означает, что существует два пути, у которых нет общих ребер. Вот. То есть можно их пытаться, можно себе, вот.
[01:21:47.520 --> 01:22:04.520]  Вот. Вот. Можно и в принципе себе вот так как-то воображать. Но не нужно. Потому что лучше, конечно, их воображать как-то вот таким вот образом.
[01:22:04.520 --> 01:22:20.520]  Ну, хотя бы таким. Не, дело не в извилисисти. Дело, на самом деле, в том, что общие вершины у этих путей могут быть от слова вполне. Логично, да?
[01:22:20.520 --> 01:22:34.520]  Вот. Соответственно, да. То есть общие вершины должны, то есть общие вершины могут быть, но не общие ребра.
[01:22:34.520 --> 01:22:56.520]  Так вот. Ну и соответственно важное утверждение, оно же теорема. Очень пафосно звучит. Реберная двусвязность отношения эквивалентности.
[01:22:56.520 --> 01:23:12.520]  Да, прям звучит как предвыборный лозунг. Вот. Реберная двусвязность отношения эквалентности, там фабрика рабочая, вот это все.
[01:23:12.520 --> 01:23:31.520]  Вот. А, ну да, вся власть учительного собрания, естественно, да. Вот. А я вот в школе учился, у нас этот плакат даже висел.
[01:23:31.520 --> 01:23:49.520]  Нет, ну не этот. Да. Да. Хотя, нет, ну да. Нет, у нас там, да. Слушайте, а может повисеть, да. Ой. А или мерч такой, шарфик заказать вот с этим вот.
[01:23:49.520 --> 01:24:06.520]  Ой, такой олимпиадный шарфик, да. Реберная двусвязность отношения эквалентности. Да, да, да. Нормально, да. Ага. Так вот, хорошо. Да, да, да, да. Красно-черный. Да.
[01:24:06.520 --> 01:24:16.520]  Да. Когда красно, да. Это называется, да. Называется дикарда. Дикардач не нужен, красно-черные деревья наши все. И так далее.
[01:24:16.520 --> 01:24:32.520]  Ну. Ой, АВЛ слишком много поворотов, а вот красночерные. Да, да, да, да. Ой, да. Ой, да, да, да. Это уже там вообще дебата надо устраивать.
[01:24:32.520 --> 01:24:42.520]  Ладно. Значит, пока у нас действительно вопрос, а почему этот лозунг вообще это не просто лозунг, а имеет отношение к делу.
[01:24:42.520 --> 01:24:47.520]  Но давайте думать. Нет, ну в принципе, заметим, да, что нам нужно, чтобы доказать, что это отношение эквалентности.
[01:24:47.520 --> 01:24:54.520]  Ну, как всегда, рефлексивность, симметричность, транзитивность, да. Ну, рефлексивность на лицо, симметричность тоже, да.
[01:24:55.520 --> 01:25:02.520]  Да, потому что, да. Ну, рефлексивность, ладно, такая не тривиальная, но как бы, да. Как бы, да. Мы с этого ржем в третьем классе, но да.
[01:25:02.520 --> 01:25:12.520]  Любая вершина сама с собой соединена значит двумя путями, состоящими из одной вершин. Да. Общих ребер у этих путей нет.
[01:25:12.520 --> 01:25:18.520]  Да. То есть, как это, путь не пересекается сам с собой.
[01:25:19.520 --> 01:25:31.520]  Чего? А вот так. Ну, нормально, что вот, да, два. Ну, как бы, да. Ну, существует два пути, да, они совпадают, да.
[01:25:31.520 --> 01:25:38.520]  Ну, вот. Ну, как бы, да. Ну, что? Да, все. Это называется команда. Это называется команда КВН Прозрачный гонщик.
[01:25:38.520 --> 01:25:44.520]  Да, знаете, команда, в которой там на сцене никого нет, это все шутки говорит автоматический голос.
[01:25:44.520 --> 01:25:51.520]  И так это, уважаемые жюри, если вы не набираете достаточное число команд в сезон, это не проблема.
[01:25:51.520 --> 01:25:58.520]  Я с легкостью могу разделиться на две-три смешных команды. Ну, вот. Ну, и все, в общем-то. Вот. И отбивочка звучит.
[01:25:58.520 --> 01:26:04.520]  Вот. Ну, здесь примерно то же самое. Ой, гуглоните там отдельно, не пожалеете, на самом деле, да.
[01:26:05.520 --> 01:26:12.520]  Вот. Вот. Да. Как это называется? Кто-то скажет, что вы...
[01:26:12.520 --> 01:26:19.520]  Так, если я сейчас начну это воспроизводить. Поэтому лучше перейдем, лучше перейдем к транзитивности.
[01:26:19.520 --> 01:26:26.520]  Потому что транзитивность, это да. Если вы, потому что транзитивность, вот как показывал, вот давным-давно, когда начали, когда мы на семинарах,
[01:26:26.520 --> 01:26:32.520]  собственно, еще там у нас были какие-то, когда теоретически задачи еще принимались устно, хотя у вас тоже такие.
[01:26:32.520 --> 01:26:38.520]  Там выяснялось, что будем... на самом деле, если попросить вас доказать, то вы Seka и очень большие проблемы,
[01:26:42.520 --> 01:26:51.520]  потому что, казалось бы, среди простых каких-то элементов, которые там обычно по информатике и оли b.
[01:26:51.520 --> 01:27:01.520]  would just procack it tömo Ber pardonım to present time, to this understand the moment, to this acat Hey, I still cope Chませ, это оказывается, что доказательство там то вот.
[01:27:01.520 --> 01:27:06.120]  не будет, смотрите. То есть доказательство будет такое, значит, в чем у нас? И так вот у нас,
[01:27:06.120 --> 01:27:13.120]  что нам нужно доказать? Жили-были вершины УВ и ВВ, да, то есть как бы У и В рёберно-двусвязные,
[01:27:13.120 --> 01:27:21.560]  В и В рёберно-двусвязные, да. Так вот, смотрите, значит, технология доказательства такая. Рассмотрим
[01:27:21.560 --> 01:27:31.880]  вот эти вот два пути, значит, У и В. И мы знаем, что они рёберно не пересекаются. Вершина могут,
[01:27:31.880 --> 01:27:39.800]  но я сейчас не буду это рисовать. Значит, идея такая. Так, ну если, значит, берем вершину В. Ну тут
[01:27:39.800 --> 01:27:44.600]  достаточно, сейчас вот то, что я расскажу, это, на самом деле, достаточно общий случай. Значит,
[01:27:44.600 --> 01:27:53.320]  у нее есть два пути, которые соединяют ее с вершиной В. Значит, пойдем по одному из этих путей. Будем
[01:27:53.320 --> 01:28:01.000]  прям идем от В до В. Идем, идем, идем, идем. Он там может, может идти как угодно, но рано или
[01:28:01.000 --> 01:28:08.400]  поздно он впервые окажется на вершине, которая лежит на этих двух путях. Ну потому что в худшем
[01:28:08.400 --> 01:28:14.240]  случае, может быть, это будет сама вершина В. Ну тут крайний случай, если он просто придет
[01:28:14.240 --> 01:28:19.000]  в саму вершину В. Это вот, вот в этом случае, например. Или, может быть, наоборот, кстати, сама
[01:28:19.000 --> 01:28:24.400]  вершина В может оказаться сама такой вершиной вполне. Вот, но на самом деле случай здесь все
[01:28:24.400 --> 01:28:34.720]  равно общий. Вот, теперь пойдем по второму пути и тоже найдем вот какую-то клеммочку. Я это называю
[01:28:34.720 --> 01:28:43.520]  метод клеммочек. Вот, тоже дойдем от В до В на первой вершине. Ну теперь я утверждаю,
[01:28:43.520 --> 01:28:49.960]  что нам достаточно. Вот, то есть, могут быть, но на самом деле на доказательства это не влияет
[01:28:49.960 --> 01:28:54.560]  практически никак. Потому что, то есть, я могу, то есть, на самом деле, я могу рассмотреть два
[01:28:54.560 --> 01:29:02.520]  случая. Ну, в принципе, смотрите, если они пришли на разные пути, то, в принципе, вот, в общем-то,
[01:29:02.560 --> 01:29:08.200]  вот вам два реберно-непересекающихся пути, потому что все части этих путей там состоят из попарно
[01:29:08.200 --> 01:29:26.840]  различных ребер. А какая разница? А какая разница? Я, скажем так, из любого непростого пути я могу
[01:29:26.840 --> 01:29:34.240]  взять просто простой подпуть. То есть, кто не пересекался, тот пересекаться и не будет. Так
[01:29:34.240 --> 01:29:38.240]  что, в данном случае, это не проблема. Ну, хотя, нет, везде, конечно, по умолчанию считается,
[01:29:38.240 --> 01:29:46.880]  что путь простой, но вот. Да, то есть, в принципе, да, тут можно нарисовать соседнюю картинку. Да,
[01:29:46.880 --> 01:29:53.040]  и сказать, что клеммочки там могут действительно подцепиться, на самом деле, в абсолютно любом
[01:29:53.040 --> 01:30:01.400]  порядке, кстати, да, и с другой стороны. Но суть-то одна. То есть, суть одна и заключается в том,
[01:30:01.400 --> 01:30:09.480]  что у нас есть цикл с участием, реберно-простой цикл с участием вершины У, и мы к нему подсоединились. То
[01:30:09.480 --> 01:30:14.160]  есть, надо просто через, теперь, вот пути искать, просто через разные стороны этого цикла. То есть,
[01:30:14.160 --> 01:30:25.920]  вот так и вот так. Могут. Да, совершенно верно. Именно поэтому мы очень аккуратно
[01:30:25.920 --> 01:30:35.720]  определяем клеммочки. Мы идем от вершины У до вершины В до первой вершины, которая лежит на
[01:30:35.720 --> 01:30:45.360]  этих путях оттуда В. Да, вот в этой нечеткости и начинается причина, по которой, собственно,
[01:30:45.360 --> 01:30:51.080]  многие решения валились. То есть, да, пересечений может быть много, они там могут действительно,
[01:30:51.080 --> 01:30:55.520]  то есть, пересекаться. То есть, эти пути с этими могут там пересекаться, конечно, хоть вот так.
[01:30:55.520 --> 01:31:01.720]  То есть, там этот путь может там вообще, может по этому циклу вообще попереплесать. Особенно,
[01:31:01.720 --> 01:31:10.480]  если мы еще и... Особенно, если мы разрешим еще быть непростым, то вот. Ну, соответственно. Да,
[01:31:10.480 --> 01:31:14.280]  ну видите, тут очень не принципиально, с какой стороны от вершины В на самом деле эти две
[01:31:14.280 --> 01:31:19.920]  клеммочки подсоединились. Более того, в нашем случае вообще, давайте я могу еще для пояснения
[01:31:19.920 --> 01:31:25.800]  так нарисовать, что могут быть вообще там какие-то экзотические случаи в духе, что там подключение
[01:31:25.800 --> 01:31:32.120]  произошло, а там, допустим, вообще к одной и той... К одной и той же вершине, кстати, вполне могло
[01:31:32.120 --> 01:31:42.200]  быть. Но это нас тоже, в общем-то, не шибко волнует, потому что вот так получается. Более того,
[01:31:42.200 --> 01:31:47.440]  эта вершина могла быть самой вершиной В, а могла быть самой вершиной У, как я уже сказал, вершина В.
[01:31:47.440 --> 01:31:53.040]  То есть, там, ну, то есть, в принципе, да, то есть, да, это могла быть вершина В или вершина В могла
[01:31:53.040 --> 01:31:58.480]  уже тут оказаться, в принципе. Но вот, но на самом деле, кажется, как бы предлагаемое много доказательства,
[01:31:58.480 --> 01:32:06.160]  кажется, автоматически учло все. Вот, то есть, просто с двух сторон цикла, значит, соответственно,
[01:32:06.160 --> 01:32:11.800]  ходить. Ну, то есть, конечно, да, там можно, скажем так, можно попредираться, конечно, на тему того,
[01:32:11.800 --> 01:32:17.920]  что что такое сторона цикла и как вот это вот с разных сторон ходить, особенно учитывая, что эти
[01:32:17.920 --> 01:32:22.160]  пути, в принципе, могут там по одним и тем же вершинам ходить по один и тот раз, причем еще и в
[01:32:22.160 --> 01:32:28.200]  рандомном порядке. То есть, у них могут быть, например, там, там пять общих вершин, причем один
[01:32:28.200 --> 01:32:35.880]  путь проходит их порядке 1, 2, 3, 4, 5, а другой проходит их порядке 3, 5, 1, 4, 2. Вот, так что там,
[01:32:35.880 --> 01:32:41.760]  вот, но это уже, как вещам, уже цепляться не будет. Так, ну, вот таким образом мы убедились,
[01:32:41.760 --> 01:32:51.480]  что реберно-досвязанность это отношение и квалентность. Вот, вот, теперь, но теперь возникает
[01:32:51.480 --> 01:32:59.240]  такой интересный вопрос. Значит, как же устроены в графе компоненты реберно-досвязанности?
[01:32:59.240 --> 01:33:11.440]  Круто. Да, сколько будет 1 плюс 3? 3 плюс 1, потому что сложение коммутативно.
[01:33:11.440 --> 01:33:21.560]  Вот, а почему оно коммутативно? Потому что, ну, например, 1 плюс 3 равно 3 плюс 1, да. Вот, ну,
[01:33:21.560 --> 01:33:25.680]  смотрите, ну, на самом деле, тут нам, конечно, интересно, как-то, ну, нам хочется, конечно,
[01:33:25.680 --> 01:33:29.080]  найти мосты и реберно-досвязанность вообще. А теперь думаю, как мосты вообще связаны
[01:33:29.080 --> 01:33:44.640]  с реберной досвязанностью? Да, нет, ну, на самом деле, да, возникает, конечно, интересный момент.
[01:33:44.640 --> 01:33:59.600]  То есть, можно сразу сформулировать такую леву. Ребро УВ, значит, не является мостом тогда и только
[01:33:59.600 --> 01:34:28.320]  тогда. Когда, значит, У и В реберно-досвязаны. Вот. Значит, ребро УВ не мост,
[01:34:28.320 --> 01:34:39.720]  реберно-досвязаны. Действительно, почему так? Ну, справа-налево, да. Потому что справа-налево
[01:34:39.720 --> 01:34:44.040]  это то же самое, что и хорошо. Если это мост, то, вершина, ну, мост не может соединять реберно-досвязанные
[01:34:44.040 --> 01:34:55.400]  вершины. Так. Сейчас, спокойно, погодите. Нет, спокойно. Да, давайте так. Да, что такое? Да,
[01:34:55.760 --> 01:35:01.440]  справа-налево. Пусть вершины реберно-досвязаны. Тогда, если мы удалим ребро между ними, то порушатся
[01:35:01.440 --> 01:35:06.840]  не более чем один из этих двух реберно-досвязанных путей, значит, они остались связаны. Противоречие
[01:35:06.840 --> 01:35:15.800]  с тем, что это мост. Следовательно, это был не мост. Вот. Следовательно, это был не мост. Ну,
[01:35:15.800 --> 01:35:21.320]  правда, да. Там, конечно, формально, правда, можно придраться так, что как бы ребро-мост,
[01:35:21.320 --> 01:35:27.480]  это как бы хочется, конечно, сказать, что ребро-ув-мост тогда и только тогда, когда его удаление,
[01:35:27.480 --> 01:35:34.760]  когда после его удаления вершины уев лежат в разных компонентах связанности. Формально говоря,
[01:35:34.760 --> 01:35:43.720]  кстати, это не, формально это не эквивалентно вот этому утверждению. Ну, вот этому определению,
[01:35:43.720 --> 01:35:49.720]  в смысле. У нас в определении писалось что-то другое. То есть, у нас, я написал увеличение
[01:35:49.720 --> 01:35:54.800]  числа компонентности. Мог написать еще так. Найдутся, то есть, другими словами, найдутся две
[01:35:54.800 --> 01:36:00.400]  вершины по удалению, так такие, что по удалению этого ребра они перестанут там быть соединены путем.
[01:36:00.400 --> 01:36:07.240]  Вот. Нет, это так, просто немножко о формализме, потому что, да, то есть, конечно, довести до
[01:36:07.240 --> 01:36:11.360]  этого формализма никаких проблем, потому что там это будет, потому что можно сводить их к тому,
[01:36:11.360 --> 01:36:15.520]  связаны ли уев, потому что как бы любые пути между любыми двумя вершинами, они делятся на те,
[01:36:15.520 --> 01:36:21.720]  которые проходят через УВ, и те, которые не проходят. Вот. Потому что, в принципе, то есть,
[01:36:21.720 --> 01:36:28.000]  если удаление в УВ, если путь между ними не проходил через УВ, то ну и хорошо. А если путь
[01:36:28.000 --> 01:36:33.680]  проходил через УВ, то если выяснится, что по удалению этого ребра между УВ все еще есть путь,
[01:36:33.680 --> 01:36:40.560]  то значит, и между всеми вершинами тоже путь есть. Так что, в общем, да. Тут, в общем, не сильно
[01:36:40.560 --> 01:36:47.200]  интересно. Хорошо. Таким образом, да, если ребра двухсвязаны, то ребро действительно не мост. Так,
[01:36:47.200 --> 01:36:53.400]  ну а если оно... А теперь давайте наоборот. Да, если ребро УВ не мост, то значит, это выясняется,
[01:36:53.400 --> 01:37:00.600]  что значит, это означает, что по удалению ребра УВ, как минимум, между вершинами УВ все еще можно
[01:37:00.600 --> 01:37:06.160]  дойти. Ну иначе, пока число компенсовязанности увеличилось, правда? Но раз между ними может дойти,
[01:37:06.160 --> 01:37:11.800]  значит, до удаления этого ребра тут два ребра не пересекающихся пути было, значит, да. Да, в общем,
[01:37:11.800 --> 01:37:23.120]  ЛЕМА действительно очевидно. Прям вот ну совсем. Классно. Так. Ну а теперь вот выясняется... Ну вот,
[01:37:23.120 --> 01:37:32.280]  ну тут, конечно, да. То есть разной аккуратности надо довести. Вот. Вот. Но на самом деле, да,
[01:37:32.280 --> 01:37:36.200]  истинная аккуратность, это, конечно, если смотреть, как искать компоненты, там точки сочленения,
[01:37:36.200 --> 01:37:41.760]  значит, по Ториану. То есть этот алгоритм будет вот так, как мы сейчас напишем, но там так
[01:37:41.760 --> 01:37:51.280]  скупулезно все доказывалось. Вот. Значит, смотрите, про мосты такое. Так. А, ну еще, конечно, ладно,
[01:37:51.280 --> 01:38:01.520]  простая ЛЕМА, тут совсем простая ЛЕМА. Мост — это, конечно, ребро дерева DFS. Да, если мы запустим... Ну,
[01:38:01.520 --> 01:38:23.720]  если мы тут запустим в графе DFS, то это ребро дерева DFS. Так. Ну как это доказать?
[01:38:23.720 --> 01:38:35.400]  А, ну можно. А, ну в принципе, да, можно и так сказать. Да. Да, действительно, оказывается,
[01:38:35.400 --> 01:38:39.000]  да, такое есть вариант красивого доказательства. Видео, что, как мы уже с вами выяснили,
[01:38:39.000 --> 01:38:44.720]  где там в неориентированном графе есть только ребро дерева DFS и обратные ребра. Предположим,
[01:38:44.720 --> 01:38:50.000]  что мостом осталось, оказалось обратное ребро. Но заметим, что удаление обратных ребер, обратных
[01:38:50.080 --> 01:38:54.720]  ребров, обратного ребра, никакой связанности не повлияет. Потому что, в общем-то,
[01:38:54.720 --> 01:38:59.760]  скелет связанности, в общем, ребро дерева DFS обеспечивает. Все, доказательства окончены.
[01:38:59.760 --> 01:39:10.200]  Вот. Ну вот. Так что в принципе, ну вот. Так что можно так доказывать. Да. То есть это даже
[01:39:10.200 --> 01:39:14.960]  проще всего. Да, тут даже парадоксально, что можно даже все обратные ребра удалить,
[01:39:14.960 --> 01:39:28.360]  а граф останется связан. Ну вот. Как-то, да. Да, наименьше по числу ребер, действительно,
[01:39:28.360 --> 01:39:34.000]  да. Не единственное, конечно. Ну, потому что, да, добавление каждого обратного ребра даст вам
[01:39:34.000 --> 01:39:41.280]  возможность удалить что-то из, да, из скелет, из ребра дерева DFS, да. Не, ну это скелет, да,
[01:39:41.280 --> 01:39:49.160]  по сути, на самом деле, да. Вот. Вот. Значит, смотрите. Так. Ну, теперь вот вытекает такой
[01:39:49.160 --> 01:39:57.280]  вопрос. Да. Значит, хорошо. Да, действительно. Значит, ребровое не мост. Да, хоть. Ну вот. Но
[01:39:57.280 --> 01:40:02.320]  теперь вот вытекает действительно вопрос. Ну, допустим, у нас есть какой-нибудь там мистический
[01:40:02.320 --> 01:40:08.840]  черный ящик, который говорит нам, какие две вершины ребер, ну то связанные, какие нет. Вот.
[01:40:08.840 --> 01:40:15.960]  Тогда, вот, тогда, конечно, как говорится, мосты мы тогда действительно уже нашли. А теперь на
[01:40:15.960 --> 01:40:26.920]  оборот. А теперь давайте на оборот. Вот. Нет, зачем за квадрат? Просто. Нет, ну если нет,
[01:40:26.920 --> 01:40:31.920]  черный, если черный ящик прям честный DFS заново запускает, ну, конечно, да, квадрат. Но правда,
[01:40:31.920 --> 01:40:38.600]  оно сейчас интересно другое. Давайте подумаем вот о чем. А если нам, допустим, нам известны все
[01:40:38.600 --> 01:40:48.400]  мосты. Вот мы знаем, кто мост, кто нет. Можем ли мы определить компоненты реберной связности? Так вот.
[01:40:48.400 --> 01:40:53.560]  Очень хочется сказать, что да, действительно, давайте просто тупо удалим все мосты и тогда
[01:40:53.560 --> 01:41:00.760]  оставшиеся компоненты связности. Ну, точнее так, рассмотрим чисто дерево DFS, во-первых. Рассмотрим
[01:41:00.760 --> 01:41:08.920]  чисто дерево DFS и удалим все мосты. Утверждается, что оставшиеся компоненты связности будут,
[01:41:08.920 --> 01:41:19.480]  оставшиеся компоненты связности окажутся компонентами реберной связности. Да, был бы,
[01:41:19.920 --> 01:41:43.960]  но на самом деле спрашивается, почему. Нет, да. Мы уже показали это. Да, но это еще не так. Из этого
[01:41:43.960 --> 01:41:50.080]  следует следующее, что там каждая оставшаяся под дерево, вот это под дерево, так сказать. А давайте я
[01:41:50.080 --> 01:41:55.440]  картинку нарисую, потому что это нам по-любому пригодится. Так, давайте. Так, ладно, вот это,
[01:41:55.440 --> 01:42:08.920]  я надеюсь, можно убрать уже, да? Я думаю. Так. Нет, не совсем. А вот не совсем. Нет, смотрите,
[01:42:08.920 --> 01:42:16.400]  получится на самом деле так. То есть, если вот тут нарисовать вот большое, большое, красивое черное
[01:42:16.400 --> 01:42:27.240]  дерево. Да, это черный чемодан. Да, рисую я пока целенаправленное чисто дерево DFS, то есть,
[01:42:27.240 --> 01:42:35.200]  как бы тут понятно, я имею в виду, что тут еще какие-то ребра еще есть. Так, и допустим, выяснилось,
[01:42:35.200 --> 01:42:43.920]  что у нас мостами является типа что-нибудь вот это, вот это, вот это, там вот это, вот это, вот. Вот.
[01:42:43.920 --> 01:42:54.720]  Ну, допустим, ладно. Хорошо, вот это и вот это. Вот. Тогда у нас, действительно, если удалить
[01:42:54.720 --> 01:43:01.280]  чисто мосты, то граф распадется вот на такие компоненты. Точнее, дерево распадется, прошу прощения.
[01:43:01.280 --> 01:43:23.080]  Ай-яй-яй. Это очень. Нет. Это если границу рисовать. Так, так, так, так, так, так, что еще? Что это такое?
[01:43:23.080 --> 01:43:34.600]  Вот. Вот. Не, ну, как сказать, господи. Хотя это называется, да, что тут, как говорится, пугаться тут
[01:43:34.600 --> 01:43:48.360]  нечему. У нас была центроидная декомпозиция, так что нормально. Да, да, да, да, да, да. Да,
[01:43:48.760 --> 01:44:04.680]  у нас был софт хип после этого. Вот. У нас еще есть потоки и строки, кстати, я так напомню. Вот. А,
[01:44:04.680 --> 01:44:15.240]  я еще молчу про вероятность. Ну, конечно, построил суффисное дерево, запустил ДФС,
[01:44:15.240 --> 01:44:22.520]  все. А вот, нет, нет, нет, всяких вот этих вот Киркянинов-Сандерсов, что-то не обещаю.
[01:44:22.520 --> 01:44:34.480]  Ну, вот. Хотя, ну, посмотрим по темпам, может и быть. Вот. Нет, нет. Отвечу на
[01:44:34.480 --> 01:44:38.520]  самом деле на вопрос. Нет, он может, нет, ну, как сказать-то, Луканин как бы не славится супер
[01:44:38.520 --> 01:44:43.160]  быстрой константой на самом деле. Хотя, нет, можно, конечно, и суффисный автомат, суффисный автомат,
[01:44:43.160 --> 01:44:47.440]  и щедов ДФС, но на самом деле там просто чемпионат в этом мере в науке идет на тему того,
[01:44:47.440 --> 01:44:56.720]  насколько мало сравнений между символами вы можете сделать. Вот. Что-то такое. Ну, там, конечно,
[01:44:56.720 --> 01:45:02.160]  ну, вот, как говоримся, конечно, там в предположении, что там все символы, ну, хотя бы числа от одного до
[01:45:02.160 --> 01:45:08.040]  Н или там от одного до константы. Почему это принципиально? Потому что, ну, на самом деле заметим,
[01:45:08.040 --> 01:45:12.160]  что есть совсем произвольные элементы, которые сравните только по компаратору. Суфмасс быстрее,
[01:45:12.160 --> 01:45:19.520]  чем Злоген вы не построите, в принципе. Потому что как отсортировать по паре Н по паре различных
[01:45:19.520 --> 01:45:29.360]  камешков? Построим суфмассив, все. Вот. А мы... Да. Да. Поэтому в этом месте обязательно надо
[01:45:29.360 --> 01:45:34.800]  оговариваться, что, предположим, что это символы, это все-таки числа от одного до хотя бы Н. И тогда
[01:45:34.800 --> 01:45:38.400]  уже действительно какие-то линейные алгоритмы появляются. Ну, и там появляется там, что типа я
[01:45:38.400 --> 01:45:46.240]  могу за 5 Н, я могу за 4 Н, там я могу за 3 Н минус два с половиной или что-то. Нет, ну, это я отбалдывал,
[01:45:46.240 --> 01:45:54.640]  конечно. Там, ну, чемпионат вот какой-то в этом направлении. Да, два Н плюс пятьдесят семь. Да,
[01:45:55.200 --> 01:46:02.640]  точно. Вот. Ну, то есть там какие-то такие чемпионаты, там разные алгоритмы и вот это вот все. Вот.
[01:46:02.640 --> 01:46:16.200]  Так. Так, так, смотрите, что-то еще надо. Так, так, так, так, так, так, так, так, так, так. Вот.
[01:46:16.200 --> 01:46:19.920]  Поэтому так. То есть там, то есть на самом деле вопрос действительно не такой тривиальный,
[01:46:19.920 --> 01:46:23.240]  действительно там алгоритмы есть, они там борются между собой, там, естественно, в том числе по
[01:46:23.240 --> 01:46:28.560]  скорости. Так что, да. Вот. Ладно, это было лирическое отступление. Да, до строк мы еще доживем.
[01:46:28.560 --> 01:46:37.880]  Да, традиционно мы до строк доживаем на втором семестре. В третьем, да, на втором курсе. Ну,
[01:46:37.880 --> 01:46:43.160]  как бы да, просто как бы обычно так. То есть обычно так. Как бы часто считается, что там
[01:46:43.160 --> 01:46:47.040]  действительно обычно до строки верятся алгоритмы точно то, что хочется изучать на втором курсе.
[01:46:47.040 --> 01:46:50.840]  Потому что, во-первых, на втором курсе вы начинаете изучать основы Термера, во-вторых,
[01:46:50.840 --> 01:46:56.760]  а во-вторых, вы как бы изучаете на втором курсе, что такое автомат, если не вы работаете. Ну,
[01:46:56.760 --> 01:47:00.480]  просто суффиксный автомат будет, я думаю, сильно проще обсуждать, если вы там перед этим там
[01:47:00.480 --> 01:47:13.000]  хорошо изучили, что это такое. Вот. Так вот. Так далее. Ладно. Мы вернемся к делу. Да. То есть,
[01:47:13.000 --> 01:47:16.560]  в принципе, у нас был прецедент, когда потоки, в принципе, вполне себе во втором семестре оказались.
[01:47:16.560 --> 01:47:29.120]  Вот. Вот. Значит, смотрите. Значит, хорошо. Ну, вот. Ну, на самом деле, значит, смотрите. Действительно,
[01:47:29.120 --> 01:47:34.000]  что можно сказать? У нас получились вот такие компоненты, но про них мы, конечно, гарантированно
[01:47:34.000 --> 01:47:40.880]  можем сказать по транзитивности, что каждая из этих под деревьев. Да, кстати, да, интересный факт.
[01:47:40.880 --> 01:47:46.240]  Да, это можно назвать под деревом, потому что заметим, что вот эти вот компоненты, они там
[01:47:46.240 --> 01:47:52.560]  с ребрами дерева ДФС образуют корневое дерево. Обратите внимание. То есть, оно подвешено даже на
[01:47:52.560 --> 01:48:06.680]  какую-то вершину. Давайте я вот обращу на это внимание. Вот. Вот. И смотрите. То есть, ну вот,
[01:48:06.680 --> 01:48:11.920]  какая ситуация. Ну, вот. Но формально у нас, то есть, конечно, верно, что пока доказано,
[01:48:12.000 --> 01:48:20.480]  что каждое такое под дерево лежит целиком в одной компоненте реберной двусвязности. И еще нам
[01:48:20.480 --> 01:48:26.400]  гарантируется, что если две, два этих под дерева соединены ребром, то они не из одной компонент.
[01:48:26.400 --> 01:48:32.200]  Формально говоря, из этого не следует, что, скажем, вот это дерево и вот это дерево на самом деле не
[01:48:32.200 --> 01:48:41.120]  лежат в одной компоненте реберной двусвязности. Вот. Ну, правда, эти с этим не связаны, потому что,
[01:48:41.120 --> 01:49:08.560]  ну вот. Ну, вот. Ну, вот. Ну, хорошо. Допустим, снизу. Но это если ребро. Ну, не ребро,
[01:49:08.560 --> 01:49:14.800]  скорее, путь. Так. Но, действительно, заметим, что если какие-то два под дерева будут соединены
[01:49:14.800 --> 01:49:21.840]  там, соединены хотя бы двумя путями, то скажем, вот, какой-нибудь вот там, ну, ну, скажем так,
[01:49:21.840 --> 01:49:26.360]  то есть, между корнями этих двух путей, давайте вот корни рассмотреть, да, есть какой-то путь,
[01:49:26.360 --> 01:49:33.920]  собственно, под дерево. Вот. И, в принципе, да. То есть, действительно, тогда оказывается,
[01:49:33.920 --> 01:49:38.960]  что если этот мост, вот, допустим, там первый удалить, то оказывается, что второй путь какой-то
[01:49:38.960 --> 01:49:46.320]  есть. Ну, да. Ну, тогда, в принципе, из этого уже автоматически следует, что это не мост. Да. Это
[01:49:46.320 --> 01:49:51.320]  у нас, собственно, противоречие. Так что, следовательно, получилось так. Но, и это дает нам,
[01:49:51.320 --> 01:49:57.240]  на самом деле, возможность, конечно, кое-что искать. То есть, на самом деле, конечно, в чем у нас
[01:49:57.240 --> 01:50:05.400]  мечта? Почему я обращаю внимание именно на корень? Вот. Потому что наша цель, ну, правда, отсюда
[01:50:05.400 --> 01:50:12.560]  можно сделать, на самом деле, вывод, что вот вопрос. Вот нам интересно, когда вершина является корнем?
[01:50:12.560 --> 01:50:24.360]  Вот там задача. Хочется найти вершины, которые являются корнем своей компоненты. Да. Ну, хотя,
[01:50:24.440 --> 01:50:29.680]  по сути, получается, либо ребро в родителе является мостом, либо это стартовая вершина еще.
[01:50:29.680 --> 01:50:38.680]  Да, действительно, у нас так получается. Просто, смотрите, если бы осталось только так, если у
[01:50:38.680 --> 01:50:44.560]  нас есть какой-то черный ящик, который сообщает нам, что вершина корень, то, на самом деле, у нас есть
[01:50:44.560 --> 01:50:51.680]  уникальная возможность, на самом деле, автоматически находить и мосты, и точные сочленения. Я вот сейчас
[01:50:52.200 --> 01:50:56.480]  абстрактно сейчас сделаю, потому что вот сейчас, собственно, технология Тарьяной проявится. Потому
[01:50:56.480 --> 01:51:00.280]  что мы этой технологии найдем сейчас и мосты, потом мы найдем точные сочленения, а потом даже
[01:51:00.280 --> 01:51:09.200]  компоненты сильной связности. Да. Вот. Да, то есть, возможно, это не тот алгоритм, к которому вы
[01:51:09.200 --> 01:51:15.120]  привыкли. Нет, потому что нет. Дело в том, что в компоненте, нет, смотрите, просто в компоненте
[01:51:15.120 --> 01:51:21.320]  сильной связности просто есть два алгоритма поиска. Один более популярный в олипиадах
[01:51:21.320 --> 01:51:27.240]  использует два ДФСа, а мы будем использовать один. Вот. То есть, первый называется алгоритм Косараю.
[01:51:27.240 --> 01:51:33.920]  Обычно в олипиадах дают два, потому что два очень тупых ДФСа. Нет, мы это тоже обсудим, но
[01:51:33.920 --> 01:51:40.640]  называется там не совсем вместе с этим. Так, ну вот, значит, смотрите. Так, то есть,
[01:51:40.640 --> 01:51:51.520]  вот давайте ДФС, значит, запускаем. Так, значит, ДФС. Значит, смотрите. Значит, идея будет такая.
[01:51:51.520 --> 01:52:06.600]  Значит, смотрите. То есть, предполог, как я сказал, пусть у нас есть черный ящик,
[01:52:06.600 --> 01:52:15.160]  который умеет для вершины говорить, является ли она, значит, корнем своей компоненты
[01:52:15.760 --> 01:52:23.120]  в связности. Понятно, да? Тогда, на самом деле, то есть, если у нас такой черный ящик есть,
[01:52:23.120 --> 01:52:27.600]  то код может выглядеть следующим образом. Да, я тут все и стирать не буду, потому что вот эти
[01:52:27.600 --> 01:52:37.240]  вещи мы, да, серые, черные цвета нам, естественно, понадобятся. А еще нам понадобится стэк. Так,
[01:52:37.240 --> 01:52:44.440]  какой бы нам цвет еще забабахать? А, ну красненький, Господи, ладно, красненький
[01:52:44.440 --> 01:52:54.240]  мы уже обозначаем остыка. Значит, пишем стэк, называть мы его будем, да, СТ. Вот, ну да, была
[01:52:54.240 --> 01:53:02.000]  мода, вообще несколько, да, несколько, да, несколько команд МГУ назывались МСУ СТ. Почему СТ? Потому
[01:53:02.000 --> 01:53:14.240]  что Саратов Тим. Вот. Нет, МИТ чайки, наверное, немножко не то. Ну вот, значит, смотрите,
[01:53:14.240 --> 01:53:23.480]  значит, во-первых, в этот стэк мы пушим, соответственно, нашу вершину. Вот, а теперь
[01:53:23.480 --> 01:53:33.280]  внимание, то есть общая технология, она вот прям совсем общая будет. И получится следующее. Значит,
[01:53:33.280 --> 01:53:39.680]  и потому что в конце, когда у нас вершина, значит, приходит, значит, идея будет такая. Значит,
[01:53:39.680 --> 01:53:53.640]  пишем. Если оказалось, что В корень своей компоненты, компоненты, компоненты, там,
[01:53:53.640 --> 01:54:02.560]  рыбарные двухсвязности, то делаем мы следующее. Тогда я утверждаю, ну, в стэке понятно, значит,
[01:54:02.560 --> 01:54:08.880]  будут сколько-то вершин, потом вершина В, потом еще какие-то вершины. Так вот, мистическим образом
[01:54:08.880 --> 01:54:14.600]  я утверждаю, что в этот момент времени все, что идет от, начиная от вершины В до конца,
[01:54:14.600 --> 01:54:23.000]  в точности является компонентой рыбарной двухсвязности. Вот. Ну, то есть, работать будет вот
[01:54:23.000 --> 01:54:29.720]  примерно так. То есть, смотрите, то есть, условно, да, то есть, мы запустим ДФС, вот все это будем
[01:54:29.720 --> 01:54:33.480]  прямо аккуратненько добавлять в стэк. Добавляем, добавляем, добавляем, добавляем, добавляем. И вот
[01:54:33.480 --> 01:54:40.320]  выходим из этой вершины и, ажидно, выяснили, что она корень. Ну, тогда, значит, мы, да, как
[01:54:40.320 --> 01:54:45.760]  будет работать алгоритм, да, тут надо сформулировать алгоритм, чтобы доказывать, что он работает. Да,
[01:54:45.760 --> 01:54:51.960]  это важно. Нет, ну, чаще бывает, что просто заметим пару свойств, из которых алгоритм будет следовать
[01:54:51.960 --> 01:55:00.760]  очевидно. Тут немножко по-другому. Тут важно, что алгоритм будет такой. Значит, пишем, что какой-нибудь
[01:55:00.760 --> 01:55:10.800]  там вектор int, там int. Допустим, comp и, значит, и делаем сейчас применим такой алгоритм как
[01:55:10.800 --> 01:55:23.720]  do while. Значит, там comp.pushback от st.top. Что, не знаете такого оператора?
[01:55:23.720 --> 01:55:37.320]  Нет, do while. Нет, оператора go to вообще не существует. Ну вот.
[01:56:08.200 --> 01:56:20.960]  Вот. То есть вот такой вот валик нас ждет. То есть, короче говоря, достаем из стека все до вершины
[01:56:20.960 --> 01:56:29.760]  w включительно. Вот я использую do while, потому что вершину w я тоже хочу достать. Вот. Тогда я
[01:56:29.760 --> 01:56:36.080]  утверждаю, что то, что я достал, это компоненты. То есть, как видите, то есть нам для этого надо
[01:56:36.080 --> 01:56:42.400]  просто четко определять, кто корень. То есть, какие вершины являются корнями своих компонентов,
[01:56:42.400 --> 01:56:45.880]  какие не являются. Если я это знаю, то вот этот вот стек прекрасно работает.
[01:56:45.880 --> 01:57:09.280]  Заметим, что компоненты. Заметим, что когда мы входим в какую-то вершину, то есть в какую-то,
[01:57:09.280 --> 01:57:18.800]  но там доказать, что у каждой компоненты есть, так сказать, компоненты потомки. Вот. И остается только
[01:57:18.800 --> 01:57:24.560]  заметить, что действительно там, ну просто аккуратненько по индукции, утверждение,
[01:57:24.560 --> 01:57:33.640]  что в поддереве каждого корня, что в поддереве каждого корня на самом деле на выходе из этого
[01:57:33.640 --> 01:57:39.200]  корня, там все компоненты ее поддерева такжественно будут уложены правильно и ликвидированы из стека.
[01:57:39.200 --> 01:57:45.360]  Почему это будет так? Ну ладно, очевидно, что когда мы будем из этой вершины выходить,
[01:57:45.360 --> 01:57:51.840]  мы из стека все достанем. То есть, это по-любому очевидно. И тогда получается доказательство такое,
[01:57:51.840 --> 01:57:57.120]  что вот жила была компонента, и на ней тут, допустим, там на мостах что-то висит. По
[01:57:57.120 --> 01:58:00.840]  предположению индукции заметим, что если мы тут по мосту из нее вышли, то мы это поддерево
[01:58:00.840 --> 01:58:06.480]  по-любому зачистили. То есть тут зачистили, тут зачистили, тут зачистили. Но при этом заметим,
[01:58:06.480 --> 01:58:11.320]  что вот сами вот эти вот, так как эти вершины не были идентифицированы как корень, то соответственно
[01:58:11.320 --> 01:58:16.680]  они все тут в стеке оставались и никто их не удалял. Но как бы если мы вышли, мы тут же потом
[01:58:16.680 --> 01:58:22.720]  вернулись, все зачистили. Вот поэтому и окажется, что в стеке вот на момент выхода из корня окажется
[01:58:22.720 --> 01:58:36.880]  ровно то, что надо. Вот такая красота получается. Остается только идентифицировать кто тут мост,
[01:58:36.880 --> 01:58:47.800]  вообще. Потому что дальше технология будет звучать так. То есть получается for int u gre от v.
[01:58:47.800 --> 01:59:00.800]  Значит дальше будем говорить, что ну здесь пока все просто. Если оказалось значит color
[01:59:00.800 --> 01:59:18.400]  r2 равно равно e dfs white, то что мы делаем? Запускаем dfs atu. То есть можно в принципе так сказать.
[01:59:18.400 --> 01:59:34.660]  И дальше после этого выясняется там, если значит v u, то есть если ну короче там u корень
[01:59:34.660 --> 01:59:55.380]  свои компоненты. Вот опять то же самое. Если это корень свои компоненты, то значит v u мост.
[01:59:55.380 --> 02:00:16.820]  Вот. Идеально в принципе все. Ну кроме того в каком смысле все. То есть если у нас есть черный
[02:00:16.820 --> 02:00:21.780]  ящик, который по вершине там после dfs из нее умеет понимать это корень вообще или не корень,
[02:00:21.780 --> 02:00:34.860]  то мы победили. Вправивается. А как теперь нам определить? А теперь как же собственно
[02:00:34.860 --> 02:00:52.300]  этот небеса и факс изобрести вместе с черным ящиком, как всегда? Ну как? Ну смотря что такое
[02:00:52.300 --> 02:00:59.620]  далеко. Потому что мысль, да, значит действительно. Классическая технология говорит так. То есть нам
[02:00:59.620 --> 02:01:05.300]  надо определить, ну обычно определяют наоборот конечно, что является ли это мостом. Ну да, мы уже
[02:01:05.300 --> 02:01:10.820]  бьемся тогда и только тогда. Тогда давайте думать. А что означает, что вот допустим вот это ребро не
[02:01:10.820 --> 02:01:18.660]  является мостом? Нет, давайте лучше отдельно нарисуем. А что означает, что вот это вот допустим
[02:01:18.660 --> 02:01:24.300]  какое-нибудь ребро дерева dfs не является мостом? Означает это маленькую вещь, что вот как бы на
[02:01:24.300 --> 02:01:31.300]  этом вершине висит большое такое поддерево dfs, да, и из него каким-то образом, то есть и у нас
[02:01:31.300 --> 02:01:39.100]  существует какой-то путь, который ходит тут по этому поддереву, поддереву, поддереву, но как-то в
[02:01:39.100 --> 02:01:46.860]  итоге все равно приходит в эту вершину. Ну да, ну смотрите, если вот пусть это не мост, тогда
[02:01:46.860 --> 02:01:53.740]  существует еще какой-то путь, который соединяет вот эту вершину, вот эту вершину. Рассмотрим этот
[02:01:53.740 --> 02:02:05.660]  путь. Значит, он некоторое время идет по поддереву, а потом когда-то впервые его покидает. Но заметим,
[02:02:05.660 --> 02:02:12.780]  что выйти из поддерева, как можно выйти из поддерева? Можно выйти из поддерева, ну у нас все, ну вот,
[02:02:12.780 --> 02:02:18.340]  ну у нас в принципе заметим, что у нас ребра все, либо ребра дерева dfs, либо обратная. Но по ребру
[02:02:18.340 --> 02:02:24.500]  дерева dfs мы выйти не можем, потому что вот оно, мы как раз его пытаемся обойти. Значит, выйти из
[02:02:24.500 --> 02:02:32.060]  него можем лишь по обратному ребру. Но заметим, что так как это вершина, тут все вершины являются
[02:02:32.060 --> 02:02:39.180]  потомками вот этих двух. Вот, то есть это вот, то есть тут на самом деле имеет место какое-то
[02:02:39.180 --> 02:02:47.620]  дерево аккуратное. Вот как-то так. Ну ходить тут, да, внутри тут все может происходить все что угодно.
[02:02:47.620 --> 02:02:54.260]  Ну вот, то соответственно, да, это у нас какое-то обратное ребро, которое идет в какого-то предка,
[02:02:54.260 --> 02:02:59.860]  причем видимо этот предок, причем это предок не вот эти вот предки, потому что они все в этом
[02:02:59.860 --> 02:03:06.980]  поддереве лежат. То есть, следовательно, они идут либо в эту вершину, либо уже в какого-то ее,
[02:03:06.980 --> 02:03:22.540]  но вот ее тоже какого-то предка. Вот, пока это не доказается, пока это заметим, что, то есть мы
[02:03:22.540 --> 02:03:29.900]  замечаем, что если ребро, можно сказать, если только, если ребро дерева dfs не является мостом,
[02:03:29.900 --> 02:03:37.700]  то мы из поддерева вот этой вершины, то есть из поддерева этой вершины, откуда-то, из какой-то
[02:03:37.700 --> 02:03:45.260]  вершины по обратному ребру, можно попасть в предка этой вершины. Причем в строго в предка. То есть вот,
[02:03:45.260 --> 02:03:56.420]  ну сюда, может сюда, сюда, но короче в предка этой вершины, которая сама не является. Да. Вот. Остается
[02:03:56.420 --> 02:04:03.740]  только определить, а существует ли такое ребро. Но на самом деле такое, ну вот, существование такого
[02:04:03.740 --> 02:04:09.300]  ребра на самом деле вполне себе легко проверяется, если мы сейчас с вами введем просто еще одну
[02:04:09.300 --> 02:04:13.860]  стандартную, действительно, как бы сказать, своего рода динамику на дереве. В данном случае динамику
[02:04:13.860 --> 02:04:22.740]  на дереве dfs. Мы ее будем называть, значит, внимание, ввожу новое определение. Значит, определение.
[02:04:22.740 --> 02:04:41.380]  Значит, uptime от вершины какой-нибудь v. Что это такое? Это минимальный такой, значит,
[02:04:41.380 --> 02:05:02.700]  таймин от w. Такой, что, значит, такой, что у w это обратное ребро, именно обратное.
[02:05:11.380 --> 02:05:20.660]  Значит, у w обратное ребро. Да, тут важно, но имеется в виду, что именно в этом порядке. То есть w предок.
[02:05:20.660 --> 02:05:38.380]  Вот. Обратное ребро, значит, а вершина у потомок v. Вот. То есть обратите внимание,
[02:05:38.660 --> 02:05:44.460]  по такому определению uptime бывает и плюс бесконечностью, потому что из-под дерева вершины v может в принципе не вести
[02:05:44.460 --> 02:05:50.260]  никаких обратных ребр никуда. Но может быть плюс бесконечность, она может быть даже, может там,
[02:05:50.260 --> 02:05:59.660]  она рассматривает в принципе обратные ребры. Вот такие тоже, кстати, вполне. Вот. Ну вот,
[02:05:59.660 --> 02:06:07.940]  возникает два вопроса. Как бы, как это, как uptime найти и чем это нам поможет. Но чем это нам поможет,
[02:06:07.940 --> 02:06:13.860]  думаю, достаточно очевидно. Поможет на это так, потому что возникает маленькое утверждение.
[02:06:13.860 --> 02:06:23.820]  Утверждение говорит такое, что если у нас есть там, где идем мы тут по DFS и вот у нас
[02:06:23.820 --> 02:06:29.340]  образовалось ребро v-u. Ну давайте у нас сегодня как-то устарелась традиция, что u это ребёнок v.
[02:06:29.340 --> 02:06:48.900]  Тогда утверждается, что v-u мост тогда и только тогда, когда uptime от u, ну по сути можно сказать,
[02:06:48.900 --> 02:07:05.340]  строго меньше, чем time in от u. Вот. Ну потому что, если v-u не мост, то как бы, то есть вот это
[02:07:05.340 --> 02:07:12.340]  вот замечание, то на самом деле доказательство здесь изображено. То есть смотрите, а именно. То есть
[02:07:12.420 --> 02:07:17.740]  пусть вот это вот v-u, да, и пусть это не мост, тогда из u существует какой-то путь.
[02:07:17.740 --> 02:07:40.980]  Ага, да. Да, согласен, согласен. Не-не-не, в вершину. Почему?
[02:07:40.980 --> 02:07:53.180]  Нет, почему? Вот это вот такого ребра нас вполне устраивает. Да нет, у не живе. Да, у нас у не живе.
[02:07:53.180 --> 02:08:08.020]  Да, это не совсем тривиально, соответственно. Что? Uptime от u больше ли было time in от u. Да, и тут и тут
[02:08:08.140 --> 02:08:19.780]  у. Да, на этот раз не ошибка. Вот. Нет, ну как сказать, нет, можно написать строго больше time in
[02:08:19.780 --> 02:08:27.340]  от v, на самом деле то же самое будет. Да, но я так пишу, time in от u. Ну вот. То есть да, если v-u не мост,
[02:08:27.340 --> 02:08:33.100]  то значит есть путь на этом пути. Первое ребро, которое выходит из-под дерева u, это как раз обратное
[02:08:33.100 --> 02:08:38.820]  ребро ведущего в какого-то v или предка, и оно нам дает uptime меньше, чем time in от u, потому что у
[02:08:38.820 --> 02:08:49.820]  всех предков у time in меньше. Вот. Ну и наоборот, если такой путь, то есть если ребро не мост,
[02:08:49.820 --> 02:08:55.820]  то такое ребро найдется. Ну и наоборот, если такое ребро из-под дерева в предка найдется,
[02:08:55.820 --> 02:09:11.140]  то тогда это уже очевидно не мост. Все. Осталось только научиться этот uptime пересчитывать. Но здесь
[02:09:11.140 --> 02:09:16.020]  уже действительно динамик, потому что я заметил, что uptime легко пересчитывается через uptime детей
[02:09:16.020 --> 02:09:32.260]  и обратные ребра, торчащие из меня. Вот. Спрашивается, да, какие ребра торчат из меня. Вот. Кошмар. Вот.
[02:09:32.260 --> 02:10:01.740]  Ну да. А это неважно. Ну потому что заметим, что можно сформировать утверждение, что... А давайте
[02:10:02.340 --> 02:10:13.660]  давайте так. Первое вот так. И второе. Просто чисто лежит там. А ладно, не так. Ну ладно. Ладно.
[02:10:13.660 --> 02:10:33.540]  Второе. В корень своей компоненты. Там своей. Компорт 2. Компорт 2. Компорт 2. Ну да. Когда?
[02:10:33.540 --> 02:10:48.260]  Как гран-маман, только комптор 2. Тогда и только тогда. Когда? Получается, как жаль, что тут нельзя скопипастить.
[02:10:48.260 --> 02:11:17.860]  У больше либо равно, чем time in. Нет, почему? Нет, если вообще нет обратных ребер, то uptime
[02:11:17.860 --> 02:11:27.700]  будет вообще плюс бесконечности. Ну да. Минимум пустого множества плюс бесконечность. Да. Да. То есть я пишу. Я сейчас, конечно, буду писать не совсем такую версию,
[02:11:27.700 --> 02:11:37.140]  которую обычно... Ну в Олимпиадах вообще иногда uptime инициализируется просто таймами себя. Да. Значит, смотрите. То есть код в итоге получается такой.
[02:11:37.140 --> 02:11:44.780]  То есть тут немножко... Ладно, давайте я это и затру, потому что тут, конечно, придется кое-что пересчитывать. Вот.
[02:11:44.780 --> 02:11:55.620]  Значит, дальше, потому что... Да, заметим, что здесь нам придется не только сделать push и, конечно, сделать инициализацию. Да.
[02:11:55.620 --> 02:12:17.700]  Uptime от V равно плюс бесконечность. Вот. Значит, поехали. Значит, поехали куда? Значит, дальше. For int u2.gr от V. Так. Ну, проверяем.
[02:12:17.700 --> 02:12:40.100]  Значит, ну во-первых, если оказалось, что... Значит, вершина белая. Color от U. Ай, господи. Sinti сказала порвать. Вот. То есть если вершина белая, то тогда...
[02:12:40.100 --> 02:13:01.980]  Значит, тогда мы запускаем DFS от U. Значит, сразу... Ну вот. И тут, соответственно, пишем. Если... Значит, ну это мы для моста пишем, да, что если оказалось,
[02:13:01.980 --> 02:13:25.020]  что uptime от U там больше либо равен time от U, то, значит, пишем, соответственно, U. Значит, VU мост. Вот. Да, доставать. То есть пока просто мост. То есть доставать из стека мы ничего не будем, потому что мы это делаем вон там, мы это уже сделали. Вот.
[02:13:25.020 --> 02:13:49.820]  Вот. Это вот у нас точка запятой. Да, можно вот так даже напишу. Вот. Но еще нам, конечно, придется этот uptime все равно поапгрейдить. Значит, пишем, что uptime от V. Min равно uptime от U.
[02:13:49.820 --> 02:14:14.620]  Вот. Ну раз мы... Да. Вот. Это если вот. Но придется рассмотреть еще второй случай. Так. Ну если вершина оказалась серой, на этот раз нам придется об этом вспомнить. Color от U. Ой, неправильно.
[02:14:19.820 --> 02:14:44.620]  Вот. То. То что?
[02:14:44.620 --> 02:14:57.420]  Вот. То пишем, что uptime от V тоже min равно, но на этот раз не перепутайте именно time in.
[02:15:14.620 --> 02:15:39.420]  Так. Да, спасибо. Да. Смотрите, действительно важная оговорочка. Что в такой реализации скорее всего. Да, скорее всего мы... То есть скорее всего мы попытаемся... То есть вот сюда попадет ребро дерева DFS, по которому мы вообще в вершину V попали.
[02:15:39.420 --> 02:15:51.220]  Вот. Ну значит, смотрите. Значит, делай так. Пока я пред... Давайте так. Предположим все-таки, все-таки что... Нет, хотя...
[02:15:51.220 --> 02:16:16.020]  Значит, давайте так. Ладно. Напишу все-таки. Как-то напишу, что приближено к идеальной реализации.
[02:16:16.020 --> 02:16:43.820]  Ладно. Ладно. Да, буду передавать ID-шник ребра. И до поры. Вот. Ну вот. Ну ID типа поры, потому что. Ну просто ID это типа передаем какое-то ребро, а тут ID поры это значит ID-шник.
[02:16:43.820 --> 02:16:58.820]  Вот. Да. Значит, for. Смотрите. Значит, а вот тут я... А тут я немножко в полупитоновском. Хотя даже в питоне, по-моему, так нельзя.
[02:16:58.820 --> 02:17:17.820]  Вот в полупитоновском стиле так вам напишу. Значит, буду перебирать ребра и как бы автоматически их вот воспринимать как картежик V, U и еще ID-шник.
[02:17:17.820 --> 02:17:45.820]  Да, давайте. Какие молодцы. Ну что? Вектор, edge и все проблемы. Чего? Нет, если... Нет. А, хорошо. Вектор. А, что тогда? Вектор векторов edge, sorry.
[02:17:45.820 --> 02:18:12.820]  Нет. Ну чтоб V был вектором ребер. А если это, извините, стракт на три поля? Нет, стракт на три поля можно. Да, стракт на три поля я делаю. А вот вектор нельзя, потому что... Нет, вектор нет. Ну вот.
[02:18:12.820 --> 02:18:27.820]  Короче, оптимально, видимо, делать array или свою собственную структуру из трех полей. Так, ладно, короче. Так, давайте так. Пишу как было, потому что, да, тут цель просто чтобы удобные обозначения были.
[02:18:27.820 --> 02:18:38.820]  Потому что я не хочу тут тратить строчки на этот... Потому что я могу тут описать, потратить две строчки, написать, что U равно E точка там, finish ID равно там это и так далее.
[02:18:38.820 --> 02:18:52.820]  Да, поэтому здесь важный момент. Действительно, ради чего мы все это делаем. То есть end-end ID не равно ID per. Вот это важно.
[02:18:52.820 --> 02:19:04.820]  Ну, по-хорошему, в принципе, может имел бы смысл тут часто сразу писать, просто в начале, что если ID равно ID per, то все выбрасываемся в нераде. Ну вот здесь мы так ставили.
[02:19:04.820 --> 02:19:13.820]  Это означает, что у нас теперь тут в ГР хранятся ребра, в каждом из которых хранится начало ребра, конец ребра, ID.
[02:19:13.820 --> 02:19:19.820]  Что мы это делаем? Потому что в списке смежности каждый ребро хранится обычно в двух экземплярах.
[02:19:19.820 --> 02:19:25.820]  Потому что оно будет храниться как ребро из VVU и как ребро из UVV обычно. Вот.
[02:19:25.820 --> 02:19:36.820]  Но еще для того, чтобы мы избавляться от кратных ребр, мы еще будем говорить, что у нас хранится ID, и поэтому чтобы сравнивали это то же самое ребро или нет.
[02:19:36.820 --> 02:19:44.820]  Какую проблему это решает? Это решает проблему, что если у ребра есть кратное ребро, то тогда мы ни одну из этих ребер не воспринимем как мост.
[02:19:57.820 --> 02:20:02.820]  Ну вот. Ой-ой-ой. Мне страшно.
[02:20:03.820 --> 02:20:11.820]  Нет, просто да. Ну да. Нет, можно просто удалять, но на самом деле да, есть вот такая.
[02:20:11.820 --> 02:20:17.820]  То есть в принципе, на самом деле честно скажу, это был такой, можно сказать, уровень, ну где-то, может быть, это был уровень изи.
[02:20:17.820 --> 02:20:24.820]  Хотя мы, конечно, сделали сложнее, чем это могло быть, потому что идея, как было сказано, да, можно было просто удалить мосты и найти все компоненты.
[02:20:25.820 --> 02:20:28.820]  Может быть, где-то поэтому это и изи.
[02:20:30.820 --> 02:20:34.820]  Потому что мы теперь, так, есть ли тут вопросы?
[02:20:35.820 --> 02:20:38.820]  Да нет, наверное, нету?
[02:20:38.820 --> 02:20:41.820]  Ладно, тогда переходим на следующий уровень.
[02:20:42.820 --> 02:20:44.820]  Какой уровень, медиум?
[02:20:45.820 --> 02:20:50.820]  Так, смотрите, сейчас я, пожалуй, знаете, как мы сделаем.
[02:20:51.820 --> 02:20:57.820]  Значит, сейчас это определение, да, сейчас надо вот это, как это надо сделать.
[02:20:57.820 --> 02:21:01.820]  Определение надо стереть, а вот картинки не обязательно.
[02:21:11.820 --> 02:21:16.820]  Так, значит, внимание, определение.
[02:21:17.820 --> 02:21:20.820]  Ой, блин, зачем я определение стер?
[02:21:27.820 --> 02:21:30.820]  Да просто понятие, просто поехали теперь.
[02:21:30.820 --> 02:21:38.820]  Точка сочленения, да вот тут и проблема, что да, точка сочленения, это вершина.
[02:21:42.820 --> 02:21:45.820]  Точка сочленения, это вершина.
[02:21:47.820 --> 02:22:04.820]  Удаление которой вместе с инцидентными ей ребрями.
[02:22:07.820 --> 02:22:10.820]  Так, надеюсь, вас уже не пугает это умное слово.
[02:22:11.820 --> 02:22:15.820]  Не знаю, не знаю.
[02:22:15.820 --> 02:22:17.820]  Не знаю, не знаю.
[02:22:26.820 --> 02:22:33.820]  Приводит к увеличению
[02:22:38.820 --> 02:22:41.820]  числа компонент связанности.
[02:22:45.820 --> 02:23:02.820]  Так, вот теперь у нас такая неожиданная задачка.
[02:23:02.820 --> 02:23:07.820]  То есть надо найти точку сочленения.
[02:23:15.820 --> 02:23:17.820]  Сейчас, чего, чего?
[02:23:26.820 --> 02:23:28.820]  Сейчас кого убрать?
[02:23:30.820 --> 02:23:33.820]  Где сейчас? Нет, погодите.
[02:23:35.820 --> 02:23:40.820]  Нет, погодите, ой, нет, это все не про мосты, нет, давайте так.
[02:23:40.820 --> 02:23:43.820]  Аптайм мы оставим, потому что определение аптайма никуда не денется.
[02:23:43.820 --> 02:23:45.820]  И мы его, забирая вперед, будем насчитывать.
[02:23:46.820 --> 02:23:48.820]  Ну а теперь маленькая фишка.
[02:23:49.820 --> 02:23:51.820]  Значит маленькая фишка, ну вот.
[02:23:51.820 --> 02:23:55.820]  А теперь нам нужно написать какое-то определение.
[02:23:58.820 --> 02:24:03.820]  Так, и сказать, что вершинная двусвязанность это...
[02:24:03.820 --> 02:24:13.820]  Вот, так, ну а теперь проблема.
[02:24:13.820 --> 02:24:15.820]  Что хочется сказать?
[02:24:15.820 --> 02:24:17.820]  Конечно хочется сказать, что вершинная двусвязанность,
[02:24:17.820 --> 02:24:23.820]  в принципе это будет правда, да, что там какие-то там две вершины будут наверно вершинно двусвязаны,
[02:24:23.820 --> 02:24:28.820]  если их можно соединить на этот раз там путями, которые вершины не пересекаются.
[02:24:28.820 --> 02:24:31.820]  Вершины пересекаются только по вершинам.
[02:24:31.820 --> 02:24:33.820]  Ну если быть точнее, да.
[02:24:34.820 --> 02:24:36.820]  Да, но проблема даже не в этом.
[02:24:36.820 --> 02:24:40.820]  Проблема, что даже если мы добавим вот эти оговорки,
[02:24:40.820 --> 02:24:43.820]  то у нас возникнет на этот раз проблема с транзитивностью.
[02:24:43.820 --> 02:24:45.820]  В общем, на этот раз реально проблема.
[02:24:47.820 --> 02:24:49.820]  Вот, в такой ситуации.
[02:24:49.820 --> 02:24:53.820]  У и в вершины двусвязаны, в и в вершины двусвязанности, а у и в вот нет.
[02:24:56.820 --> 02:24:57.820]  Вот, да.
[02:24:58.820 --> 02:25:01.820]  Ну вот это, да вот, это печаль.
[02:25:02.820 --> 02:25:06.820]  Ну, как всегда, как сказать, да, можно, конечно, сразу депрессивировать,
[02:25:06.820 --> 02:25:08.820]  что это прямо уже фиаско и грустить,
[02:25:09.820 --> 02:25:11.820]  а можно, как всегда, дать возможность.
[02:25:11.820 --> 02:25:14.820]  Ну, вот, то есть, наоборот, сделать шов круто,
[02:25:14.820 --> 02:25:17.820]  то знаете как-то, да, как это, да,
[02:25:17.820 --> 02:25:20.820]  как это бизнес сэнами, да, знаете, как это, знаете, такая ситуация,
[02:25:20.820 --> 02:25:25.820]  это бизнес сэн из Америки, да, очень про там просит вас,
[02:25:25.820 --> 02:25:29.820]  значит, услать, услать подальше одного парня, чтоб прижать к рукам его бизнес.
[02:25:30.820 --> 02:25:33.820]  Вот, ну парень там раздолбайный, ну просто там богатенькие наследки.
[02:25:34.820 --> 02:25:35.820]  Вот, значит, шо вы делаете?
[02:25:35.820 --> 02:25:39.820]  Значит, у этого парня, оказывается, есть, значит, такой какой-то предок-пират,
[02:25:39.820 --> 02:25:41.820]  у которого там, видимо, где-то могли быть сокровища.
[02:25:42.820 --> 02:25:45.820]  Значит, вы изготовляете карту и подсовываете ему ее.
[02:25:46.820 --> 02:25:47.820]  Значит, ну там, подсовываете.
[02:25:48.820 --> 02:25:51.820]  А еще потом, значит, выясняете, что там есть еще один такой же пример.
[02:25:51.820 --> 02:25:53.820]  Да, родственник там, видимо, пятиюродный брат.
[02:25:53.820 --> 02:25:54.820]  Вы ему даете такую же.
[02:25:55.820 --> 02:25:56.820]  Вот.
[02:25:56.820 --> 02:25:59.820]  В расчете на то, что они там встретятся на лобном месте и друг друга перестреляют.
[02:26:00.820 --> 02:26:01.820]  Вот.
[02:26:02.820 --> 02:26:03.820]  Вот.
[02:26:03.820 --> 02:26:04.820]  Ну, как бы да.
[02:26:04.820 --> 02:26:07.820]  По идее, но тут по-разному, они могут просто прийти друг друга перестрелять,
[02:26:08.820 --> 02:26:12.820]  а могут чуть-чуть пострелять, пообщаться, выяснить, что они родственники и стать друзьями навек.
[02:26:13.820 --> 02:26:17.820]  В общем, настолько большими друзьями, что даже любовь к одной и той же девушке их не разлучит.
[02:26:18.820 --> 02:26:19.820]  Да.
[02:26:20.820 --> 02:26:21.820]  Как говорится, да.
[02:26:21.820 --> 02:26:22.820]  Я не спрашиваю вас, как назывался роман.
[02:26:23.820 --> 02:26:24.820]  Назовите автора.
[02:26:25.820 --> 02:26:26.820]  Это называется.
[02:26:27.820 --> 02:26:28.820]  Что, не сталкивались с таким романом?
[02:26:29.820 --> 02:26:30.820]  Нет?
[02:26:31.820 --> 02:26:33.820]  И с фильмом 92-го года тоже?
[02:26:35.820 --> 02:26:36.820]  Нет.
[02:26:37.820 --> 02:26:38.820]  Сердца трех ничего не говорит?
[02:26:39.820 --> 02:26:40.820]  Нет.
[02:26:41.820 --> 02:26:42.820]  Слушайте, посмотрите, очень красивый.
[02:26:43.820 --> 02:26:45.820]  И посмотрите и почитайте там, собственно, Джека Лондона такой роман.
[02:26:46.820 --> 02:26:47.820]  Заметь там.
[02:26:48.820 --> 02:26:49.820]  Так что, да, замечательный роман.
[02:26:49.820 --> 02:26:50.820]  Да.
[02:26:51.820 --> 02:26:52.820]  Вот.
[02:26:53.820 --> 02:26:54.820]  Там, соответственно.
[02:26:55.820 --> 02:26:56.820]  Вот.
[02:26:57.820 --> 02:26:58.820]  Очень красивый.
[02:26:59.820 --> 02:27:00.820]  Значит так.
[02:27:01.820 --> 02:27:04.820]  Поэтому, значит, просто действительно можно действительно там, действительно просто погибнуть это,
[02:27:05.820 --> 02:27:10.820]  а можно на самом деле действительно там, наоборот, просто там понять, что до этого, собственно, не жил вовсе.
[02:27:11.820 --> 02:27:16.820]  Что же дает нам действительно это вдохновение и просто ощущение, что действительно вот только сейчас мы начинаем жить.
[02:27:16.820 --> 02:27:17.820]  А дает нам следующее определение.
[02:27:18.820 --> 02:27:19.820]  Вершинная двусвязность.
[02:27:20.820 --> 02:27:21.820]  Точнее так.
[02:27:22.820 --> 02:27:23.820]  Рёбра.
[02:27:30.820 --> 02:27:32.820]  Значит, значит, я тут так напишу.
[02:27:33.820 --> 02:27:34.820]  Рёбра.
[02:27:35.820 --> 02:27:37.820]  Значит, А, Б и С, Д.
[02:27:39.820 --> 02:27:40.820]  Ну, типа новая жизнь так до конца.
[02:27:41.820 --> 02:27:42.820]  Вот.
[02:27:43.820 --> 02:27:44.820]  Вершинная двусвязность.
[02:27:44.820 --> 02:27:46.820]  Вершинно двусвязные.
[02:27:54.820 --> 02:27:55.820]  Ну, двусвязанные.
[02:27:57.820 --> 02:27:58.820]  Если
[02:28:04.820 --> 02:28:05.820]  существует
[02:28:11.820 --> 02:28:12.820]  два,
[02:28:12.820 --> 02:28:15.820]  на этот раз абсолютно вершинно не пересекающихся пути.
[02:28:17.820 --> 02:28:20.820]  Вершинно не пересекающихся пути.
[02:28:26.820 --> 02:28:27.820]  Весь вся
[02:28:28.820 --> 02:28:29.820]  пути.
[02:28:32.820 --> 02:28:33.820]  Что?
[02:28:34.820 --> 02:28:35.820]  Смотрите.
[02:28:37.820 --> 02:28:38.820]  Соединяющие.
[02:28:42.820 --> 02:28:47.820]  Значит, тут надо аккуратно А с С и Б с Д.
[02:28:48.820 --> 02:28:49.820]  Или
[02:28:50.820 --> 02:28:51.820]  А с Д
[02:28:52.820 --> 02:28:54.820]  и Б с С.
[02:28:56.820 --> 02:28:57.820]  Вот я так напишу.
[02:29:04.820 --> 02:29:05.820]  Нет, тут и прикол.
[02:29:06.820 --> 02:29:07.820]  Ради чего я всё это писал?
[02:29:08.820 --> 02:29:11.820]  Почему я тут не написал такое тупое, что эти двари брали?
[02:29:12.820 --> 02:29:14.820]  Они лежат на вершинно простом цикле.
[02:29:15.820 --> 02:29:17.820]  Вот я мог так написать, да?
[02:29:18.820 --> 02:29:19.820]  Но есть тонкая разница.
[02:29:20.820 --> 02:29:21.820]  Как раз именно из-за рефлексивности.
[02:29:22.820 --> 02:29:29.820]  Потому что как бы мост, да, тогда получится, что мост не вершинно не двусвязан с самим собой.
[02:29:30.820 --> 02:29:33.820]  Ну, потому что мост не лежит ни на каком цикле.
[02:29:35.820 --> 02:29:36.820]  Вот.
[02:29:37.820 --> 02:29:38.820]  Но.
[02:29:39.820 --> 02:29:40.820]  Да.
[02:29:42.820 --> 02:29:43.820]  А то да.
[02:29:44.820 --> 02:29:46.820]  Да, надо было бы, чтобы цикл был действительно рёберно простой.
[02:29:47.820 --> 02:29:48.820]  Не вершинно простой.
[02:29:49.820 --> 02:29:53.820]  Но на самом деле, да, в данном случае оказывается, что если мы это ребро воспринимаем как А, Б и С, Д,
[02:29:54.820 --> 02:29:59.820]  и как бы получается есть путь, который соединяет одну вершину с самой собой и другую вершину с самой собой.
[02:30:00.820 --> 02:30:01.820]  Да.
[02:30:02.820 --> 02:30:03.820]  Они не вершины, они рёберно не пересекаются.
[02:30:04.820 --> 02:30:09.820]  То есть я мог написать определение, что ребра, вершины двусвязаны, если они либо совпадают,
[02:30:09.820 --> 02:30:14.820]  либо через них можно привести простой, вершина простой цикл.
[02:30:21.820 --> 02:30:24.820]  Ну, вершина простой, значит по каждой вершине проходимся не более чем один раз.
[02:30:25.820 --> 02:30:26.820]  Да.
[02:30:27.820 --> 02:30:28.820]  То есть только вот с этой оговоркой, чтобы была рефлексивность.
[02:30:29.820 --> 02:30:30.820]  Вот.
[02:30:31.820 --> 02:30:32.820]  А теперь теория.
[02:30:33.820 --> 02:30:38.820]  Да, то есть действительно фишка оказывается в том, что вершина двусвязанность – это отношение эквивалентности
[02:30:39.820 --> 02:30:41.820]  на ребрах, не на вершинах.
[02:30:42.820 --> 02:30:48.820]  На вершинах даже более сильные условия, чем вершины, они не по ребрам не пересекаются, не по вершинам не пересекаются.
[02:30:49.820 --> 02:30:51.820]  Да, совершенно верно.
[02:30:52.820 --> 02:30:56.820]  Но как выясняется, это не является отношением эквалентности на вершинах.
[02:30:57.820 --> 02:30:58.820]  А на ребрах?
[02:30:59.820 --> 02:31:00.820]  Ну, давайте разбираться.
[02:31:01.820 --> 02:31:04.820]  Хотя картинка, в общем-то, сейчас практически не поменять.
[02:31:05.820 --> 02:31:07.820]  Сейчас я её сотру, чтобы нарисовать такую же только на ребрах.
[02:31:08.820 --> 02:31:11.820]  То есть тот даже ещё и случаев меньше, кстати.
[02:31:14.820 --> 02:31:17.820]  Ну ладно, в общем-то, хотя это страшно.
[02:31:18.820 --> 02:31:20.820]  В прошлый раз был один случай, как тут будет меньше.
[02:31:21.820 --> 02:31:22.820]  Вот.
[02:31:23.820 --> 02:31:24.820]  Значит, смотрите.
[02:31:25.820 --> 02:31:27.820]  Ну ладно, симметричность, в общем-то, так или иначе, у нас сомнения не вызывает.
[02:31:28.820 --> 02:31:30.820]  А вот транзитивность.
[02:31:31.820 --> 02:31:32.820]  Ну ничего страшного.
[02:31:32.820 --> 02:31:33.820]  Ещё страшного.
[02:31:34.820 --> 02:31:38.820]  Значит, рассматриваем ребра AB, CD и EF.
[02:31:39.820 --> 02:31:43.820]  Так, значит, у нас есть цикл через AB и, допустим, CD.
[02:31:45.820 --> 02:31:47.820]  Допустим, вот такой.
[02:31:50.820 --> 02:31:52.820]  Ну, если тут DC, то доказательство не поменяется.
[02:31:53.820 --> 02:31:56.820]  И так жило было EF.
[02:31:57.820 --> 02:31:59.820]  Вот это вот ребро EF.
[02:32:00.820 --> 02:32:02.820]  Так, ну доказательство абсолютно такое же.
[02:32:03.820 --> 02:32:09.820]  То есть берём вот этот вот, от вершины E есть какой-то путь, то ли до C, то ли до D.
[02:32:10.820 --> 02:32:17.820]  Идём по этому пути от вершины E до первой вершины, которая попадает на этот цикл.
[02:32:19.820 --> 02:32:23.820]  Теперь берём путь, который идёт от вершины F, то ли до C, то ли до D.
[02:32:24.820 --> 02:32:26.820]  Таки, наоборот, то ли до D, то ли до C.
[02:32:27.820 --> 02:32:31.820]  Вот, и тоже идём до первой вершины, которая лежит на этом цикле.
[02:32:32.820 --> 02:32:33.820]  Ну, собственно, всё.
[02:32:35.820 --> 02:32:38.820]  То есть мы двумя клеммочками подцепились к вот этому циклу.
[02:32:41.820 --> 02:32:48.820]  Это не будет одна вершина, потому что эти два пути вершинно не пересекаются.
[02:32:50.820 --> 02:32:53.820]  Да, в данном случае этого не будет.
[02:32:54.820 --> 02:32:55.820]  Да.
[02:32:58.820 --> 02:33:00.820]  Вот. Нет, на самом деле, я, значит, набираю вперёд.
[02:33:01.820 --> 02:33:04.820]  Значит, у вас, соответственно, в домашнем задании появятся две шикарные задачи,
[02:33:05.820 --> 02:33:11.820]  в которых нужно будет доказывать, в каждой из которых нужно будет доказать эквивалентность семи утверждений.
[02:33:14.820 --> 02:33:16.820]  Нет, причём там шикарно на самом деле, да.
[02:33:18.820 --> 02:33:20.820]  Нет, нет, достаточно простые.
[02:33:20.820 --> 02:33:23.820]  Но там будет, например, такие какие-то, такого рода.
[02:33:24.820 --> 02:33:29.820]  Пусть, например, там G-связанный граф с не менее чем тремя вершинами.
[02:33:30.820 --> 02:33:34.820]  Тогда утверждение первое – в графе нет мостов.
[02:33:35.820 --> 02:33:36.820]  Вот.
[02:33:37.820 --> 02:33:50.820]  Ну вот и далее там, скажем, и будет там что-нибудь типа, для любых вершин УВ и В различных, будет там, там не что-то,
[02:33:51.820 --> 02:33:53.820]  сейчас вот именно через вершины или через…
[02:33:53.820 --> 02:34:03.820]  А, ну да, видимо для любых там УВ и ребра Е, будет там, допустим, существовать путь, ну там, существовать путь там, от УВ, не содержащий ребро Е.
[02:34:03.820 --> 02:34:10.400]  содержащий ребро е или там будет там для любых ув и ребра е будет содержание
[02:34:10.400 --> 02:34:16.560]  нот там будет существовать путь это дот или там для любых ув и ребра и вершины
[02:34:16.560 --> 02:34:23.000]  w будет существовать просто дот путь там будет существовать ребер на простой путь
[02:34:23.000 --> 02:34:29.220]  который соединяет у и в и проходит через даблы ну и так далее тому подобное
[02:34:29.220 --> 02:34:35.300]  вот значит да сразу скажу что в этих утверждениях на самом деле пользоваться
[02:34:35.300 --> 02:34:43.700]  из лекции можно будет только определениями но попробуйте но она вам
[02:34:43.700 --> 02:34:48.620]  не поможет скажем так это там чисто математические утверждения которые там
[02:34:48.620 --> 02:34:53.700]  доказываются без всяких дфс то есть это как бы да то есть то есть это там
[02:34:53.700 --> 02:34:56.220]  чистая математика но там вот действительно красиво потому что
[02:34:56.760 --> 02:35:02.100]  что вот скажем и вот а вот теперь бывает вопрос есть ли в графе точка сочинения
[02:35:02.100 --> 02:35:07.300]  допустим да и там вот так кажется что точка сочинения оказывается точка
[02:35:07.300 --> 02:35:13.140]  сочинения в графе нету тогда и только тогда когда например там для любых там
[02:35:13.140 --> 02:35:18.140]  для любых вершин ув вв существует путь простой путь вообще вершина который
[02:35:18.140 --> 02:35:30.900]  проходит который идет из ув и проходит через w вот или там еще тогда и только
[02:35:30.900 --> 02:35:37.260]  тогда когда для любых ув w существует путь из ув и не содержит w
[02:35:37.260 --> 02:35:42.460]  оказывается если для любых то это оказывается эквивалентное утверждение
[02:35:43.100 --> 02:35:46.900]  вот такого типа да то есть это будет действительно весьма неожиданно то есть
[02:35:46.900 --> 02:35:55.100]  оказывается что там нет там такое было нет на самом деле да то есть хит сезона
[02:35:55.100 --> 02:35:59.780]  дайте потому что нет просто это действительно можно хорошо прокопать потому что полное
[02:35:59.780 --> 02:36:02.900]  ощущение что действительно если это хорошо прокопать то можно там действительно и два
[02:36:02.900 --> 02:36:06.820]  линии потом прийти на полуфинал и решить задачу которую там скажем не решили елки палки на
[02:36:06.820 --> 02:36:12.260]  прошлом полуфинале да хотя у них было казалось бы 40 минут спокойного обсуждения но они
[02:36:12.260 --> 02:36:25.780]  не решить но такое бывает да нет если бы нет там нет там нет там была какая-то более там продвинутая
[02:36:25.780 --> 02:36:31.020]  задача на дерево но как бы если вы понимаете но но если там вот понимаете вот эту теорию то как
[02:36:31.020 --> 02:36:37.580]  бы в эту задачу обычно решаете то есть там потому что атака пошла да там какой-то как
[02:36:37.660 --> 02:36:43.460]  компоненты что там через что там ну хотя да там первую очередь там видимо фишка что там
[02:36:43.460 --> 02:36:47.580]  внутри этого компонента через любые два ребра можно реально вот именно цикл провести и там
[02:36:47.580 --> 02:36:53.540]  этим надо пользоваться вот задачи сейчас не помню да и не должен сейчас наверное там по
[02:36:53.540 --> 02:36:58.260]  телевизору собственно рассказывать там собственно разбор с решением задачи которые была на прошлом
[02:36:58.260 --> 02:37:07.220]  полуфинале пошло прошлого года вот ну ладно календарно за прошлого но вы понимаете вот так
[02:37:07.300 --> 02:37:12.060]  вот так ну хорошо ладно мы поняли что вершина двухсвязанность отношении
[02:37:12.060 --> 02:37:18.260]  эквалентности теперь высказать вопрос как вы думаете как связана точка
[02:37:18.260 --> 02:37:42.900]  сочленения и вершина двухсвязанность сейчас сейчас нет почему нет ну вполне себе ну давайте
[02:37:42.900 --> 02:37:52.660]  утверждение какой-то точек вершина в является точкой сочленения тогда и только тогда когда
[02:37:52.660 --> 02:38:08.500]  инцидентные и ребра инцидентные и ребра принадлежат
[02:38:08.500 --> 02:38:15.780]  как минимум
[02:38:15.780 --> 02:38:26.900]  двум различным компонентом вершины двухсвязанности
[02:38:26.900 --> 02:38:39.020]  вот
[02:38:47.020 --> 02:38:55.300]  так но слева направо действительно ну давайте попробуем да тут уже доказательства придется
[02:38:55.300 --> 02:39:02.500]  конечно поговорить подробнее да жила была вершина есть которые там торчали хотя бы два
[02:39:02.500 --> 02:39:10.620]  ребра разных компонент тогда есть подозрение что по удалении этой вершины вот эти две вершинки
[02:39:10.620 --> 02:39:17.580]  очевидно связаны между собой путями путем то есть они связанными быть не буду они будут почему
[02:39:17.580 --> 02:39:23.340]  потому что если они якобы были связаны то тогда эти ребра принадлежали одной компоненте вершины
[02:39:23.340 --> 02:39:37.020]  двухсвязанности противоречие вот значит стоп так что я просто в другую сторону доказал
[02:39:37.020 --> 02:39:45.020]  я сказал предположим что у нас есть хотя бы 2 2 тогда действительно найдут найдутся две вершины
[02:39:45.020 --> 02:39:52.880]  которые перестали быть связаны до свидания тогда утверждение тогда это точка сочления и потому
[02:39:52.880 --> 02:39:59.180]  что вот так вот а вот в обратную сторону брата если это точка сочления то значит мы ее удаляем и
[02:39:59.180 --> 02:40:06.780]  найдутся две вершины которые с ней ноторы которые были с ней связаны но после этого отвалились
[02:40:06.780 --> 02:40:15.380]  утверждение вот эти 들ил вот эти ребра очевидно были значит не из одной компоненты почему чтобы
[02:40:15.380 --> 02:40:23.200]  или бы они ноут ну были бы они из одной компоненты то чтобы но то очевидно тогда эти пути могли
[02:40:23.200 --> 02:40:29.080]  выглядеть только что это пути здесь второй путь вот такой но тогда тогда оказалось что эти вершины
[02:40:29.080 --> 02:40:35.620]  этот тогда эти вершины бы тогда не отвалились друг на друга может этот цикл там вот это пути
[02:40:35.620 --> 02:40:46.620]  полностью отвалился от остального графа это могло быть но вот но вот но в любом
[02:40:46.620 --> 02:40:51.460]  случае они отвалятся вместе они в разные компоненты связанности вот вот
[02:40:51.460 --> 02:40:59.300]  собственно и все вот так что теперь но вот так же но вот но теперь действительно
[02:40:59.300 --> 02:41:04.100]  будет такая то есть будет такая интересная такая нетривиальная задача
[02:41:04.100 --> 02:41:11.820]  спрашивается здесь уже придется прям вот действительно может быть там сильно
[02:41:11.820 --> 02:41:18.340]  более скрупулезно все продумывать потому что смотрите но прошли первый
[02:41:18.340 --> 02:41:21.180]  сказать вопрос как найти общие компоненты революционной связанности
[02:41:21.180 --> 02:41:23.580]  точнее сочинение ну допустим если мы найдем компонент вершин
[02:41:23.660 --> 02:41:29.260]  связанности то точнее сочинение мы как-нибудь найдем да а теперь давай но
[02:41:29.260 --> 02:41:37.400]  теперь придется думать а как же вообще наши компоненты выглядят вот в этом
[02:41:37.400 --> 02:41:47.420]  деле и обеду вот как они тут выглядит то есть к сожалению мостами тут уже не
[02:41:47.420 --> 02:41:54.900]  обойдешься то есть конечно верно что да то есть заметил что действительно мост
[02:41:54.900 --> 02:41:58.620]  это конечно уникальная штука да потому что я могу на экзамене спросить как в
[02:41:58.620 --> 02:42:05.420]  науке называется ребро но три бро которое содержится в компоненте вершины
[02:42:05.420 --> 02:42:20.460]  двух связанности размера 1 да оно называется мост да как легко убедиться да да но не то
[02:42:20.460 --> 02:42:28.220]  чтобы это определение конечно да но вот да но вот то соответственно да в принципе из этого
[02:42:28.220 --> 02:42:33.820]  следа но тот на самом деле можно задуматься вот о чем смотрите давайте внимательно подумал
[02:42:33.820 --> 02:42:38.300]  хорошо мост это такой интеллектуальный ребро которая действительно живет в себе любимым а как
[02:42:38.300 --> 02:42:44.140]  вообще определить вот хотя бы по скелету давайте думать дерево dfs вот допустим есть
[02:42:44.140 --> 02:42:51.460]  ребро и у меня есть вот ребро ведущий куда-то в ребенка эти два ребра они вообще хотя бы из
[02:42:51.460 --> 02:42:56.340]  одной компоненты вершины до связанности как нам это определить
[02:42:56.340 --> 02:43:09.620]  так не факт если но если она не является то конечно да другой вопрос откуда мы знаем
[02:43:09.620 --> 02:43:18.060]  но на самом деле все определить это гораздо проще потому что на самом деле как бы проверить вот
[02:43:18.060 --> 02:43:21.660]  эти два два ребра лежат ли они в одной компоненте оказывается нам помогает просто
[02:43:22.540 --> 02:43:29.100]  вершины потому что оказывается что можно за ну просто опять же можно заметить что если у
[02:43:29.100 --> 02:43:36.100]  этой вершины оптаем значит меньше либора то есть там меньше вот вот этой вершины даже да то тогда
[02:43:36.100 --> 02:43:45.820]  так что происходит уже прям прям статью тарян уже читать но вот то тогда оказывается что из
[02:43:45.820 --> 02:43:52.220]  этого под дерево есть обратное ребро в какого-то предка то есть сюда или выше и тогда получается
[02:43:52.220 --> 02:43:57.980]  что это обратное ребро образует цикл с участием этих двух ребр правда но с другой стороны если
[02:43:57.980 --> 02:44:06.460]  такого ребра нет то мы вынуждены заключить что до эти ребра не из одной компоненты вот то есть
[02:44:06.460 --> 02:44:12.820]  получается там тогда и только тогда да то есть как бы да есть то есть ну просто да то есть если
[02:44:12.940 --> 02:44:19.020]  из одной компоненты то есть цикл но ты по Wohn если они не из вот тут так если оптаем меньше
[02:44:19.020 --> 02:44:24.120]  то значит они из одной компоненты с другой стороны если они из одной компоненты значит из этого
[02:44:24.120 --> 02:44:30.300]  значит отсюда есть путь сюда без вот этих ребер да то есть да без вот этого вот то есть
[02:44:30.300 --> 02:44:40.620]  это там то есть без вот этой вершины то есть это задает на этом пути есть какой-то первое HC
[02:44:40.620 --> 02:44:45.220]  да то есть то технология единая поэтому ты поэтому я так скупулезно прописывал
[02:44:45.220 --> 02:44:51.060]  технологию потому что вот делается прям буквально то же самое поэтому
[02:44:51.060 --> 02:44:54.300]  смотрите теперь вытекает правда другой вопрос
[02:44:54.300 --> 02:45:00.380]  смотрите а верно ли что ну хорошо допустим мы набрали какие-то вот такие
[02:45:00.380 --> 02:45:07.300]  под деревья то есть тогда получается таких вот ребер дерево dfs которые будут
[02:45:08.260 --> 02:45:14.460]  готовых там вот любые ребра здесь соседний но то есть ребра то есть какие-то вот любые
[02:45:14.460 --> 02:45:20.180]  ребра внутри тут обязательно одинаковые да правда тут может быть куча оговорок на
[02:45:20.180 --> 02:45:26.300]  самом деле это все конечно совсем некорректно потому что тут конечно все там потому что на
[02:45:26.300 --> 02:45:32.700]  самом деле да тут вообще надо все стирать потому что но вот больше деревья тут будет
[02:45:32.700 --> 02:45:38.140]  выглядеть совсем по-другому потому что если мы будем рисовать их на деревьях то в общем-то
[02:45:38.140 --> 02:45:43.180]  деревья то есть теперь различные деревья они не пересекаются по ребрам но могут пересекаться и
[02:45:43.180 --> 02:45:55.940]  по вершинам вот там какой-то там что-то еще там тут вообще красота красота красота красота
[02:45:56.220 --> 02:46:03.060]  вот и в принципе может оказаться что если мы тут сравниваем только действительно только
[02:46:03.060 --> 02:46:08.100]  ребро своими соседями одинаковые не компоненты не дает можем быстро сделать то на самом деле
[02:46:08.100 --> 02:46:12.940]  эти одинаковые то у нас появится какие-то связанные множество которые могут выглядеть
[02:46:12.940 --> 02:46:23.460]  вот так вот как-то вот так вот вот как-то вот так вот что еще может быть
[02:46:25.940 --> 02:46:45.140]  то есть вот так вот вот красота да так ну так и быть вот это мост и вот это мост а это нет
[02:46:45.140 --> 02:46:53.500]  так ну и тут как мы там не будем сильно париться вот как-то так
[02:46:53.500 --> 02:47:05.580]  то есть как бы то есть получается связанная то есть как бы связанное множество из разных
[02:47:05.580 --> 02:47:12.220]  ребер могут оказаться то есть вот прицеплены вот таким образом правда я тут конечно не сам
[02:47:12.220 --> 02:47:18.780]  как будто не самый общий случай нарисовал но вытирает правый вопрос а могут ли оказаться два
[02:47:18.780 --> 02:47:23.740]  два таких связанных множество которые между собой как бы напрямую не связаны но тем не менее
[02:47:23.740 --> 02:47:27.980]  оказаться из одной компонент и вершина до связки может быть такое как вы думаете
[02:47:27.980 --> 02:47:34.940]  хочется сказать что нет да очень хочется
[02:47:34.940 --> 02:47:56.860]  но да то к сожалению да если было очевидно вот тут видимо поэтому дал тарьяна там начинается
[02:47:56.860 --> 02:48:01.940]  там просто едва ли не куча лем там 4 3 4 4 там 4 3 1 там 4 3 2 и так далее
[02:48:01.940 --> 02:48:12.980]  нет это уже другой нет это если мужа компоненты эти нашли туда но это есть двух уже нашли а мы
[02:48:12.980 --> 02:48:19.020]  их пока тут еще только ищем то есть мало того что их это мы еще только на скелете дерево
[02:48:19.020 --> 02:48:28.100]  дфс нашли а тут именно там же еще остальные ребра есть вот да но хотя другой стороны действительно
[02:48:28.100 --> 02:48:33.500]  можно заметить вот что да то есть у каждой комбинации но вот тут на самом деле что нужно
[02:48:33.500 --> 02:48:39.780]  вообще доказывать но много чего нужно доказывать на самом деле ладно много чего нужно доказывать
[02:48:39.780 --> 02:48:45.020]  а на самом деле у нас там время перерыва пришло поэтому вася причем тут действительно настолько
[02:48:45.020 --> 02:48:50.180]  мутно то что действительно как может вообще выглядеть какой-нибудь типичный граф с точки зрения там
[02:48:50.180 --> 02:48:54.860]  вершины двух связки но на самом деле там можно его себе иногда воображать просто как вот такого
[02:48:54.860 --> 02:49:07.980]  снеговичка ну такого экзотического снеговичка конечно да да вот ну например вот можно на
[02:49:07.980 --> 02:49:13.980]  цикликах каждый компонент и вершины двух связности она тут конечно и может быть поэкзотичнее она не
[02:49:13.980 --> 02:49:18.300]  обязана быть циклом более того вовсе не обязательно что компонентом допустим вершины
[02:49:18.300 --> 02:49:22.300]  двух связных граф обязательно является там обладает каким-то хамильтоновым циклом там
[02:49:22.300 --> 02:49:35.140]  с лишними ребрами ну тупой пример конечно вот какой-нибудь вот такой вот и вот еще вот хотя
[02:49:35.140 --> 02:49:42.460]  нет вот это ребро как раз все портит да придется еще вот тут дописать вот вот да вот тут и давайте
[02:49:42.500 --> 02:49:47.900]  вот тут для надежности но то есть какая-то такая вот гадость и вот такие вот то есть и вот
[02:49:47.900 --> 02:49:55.280]  и вот такие вот круглешки в общем-то друг за друга в вершинке цепляются идейно так но как бы раз
[02:49:55.280 --> 02:49:59.700]  эта интуида но т.е. интуитивно вот то есть интуитивно можно себе воображать так принципе из
[02:49:59.700 --> 02:50:05.660]  эту интуиции в общем-то алгоритм уже можно вывести но если но как бы это у нас не компоненты ребрин
[02:50:05.660 --> 02:50:11.220]  двух связ serio тут само уже так не просто очевидно то есть мосты так не поудаляешь поэтому придется
[02:50:11.220 --> 02:50:16.980]  думать поэтому видимо что-то подумал так видимо придется тут немножко больше
[02:50:16.980 --> 02:50:31.360]  формальности вести для этого доказать стоп того шах вот ой так с чем но доказать нет
[02:50:31.360 --> 02:50:37.660]  ой мы много чего доказываем потому что давая но вот потому что там на самом деле есть еще
[02:50:37.960 --> 02:50:41.700]  вообще нет ревяльная такой нетривей на утверждение которым нам придется подумать
[02:50:41.700 --> 02:50:50.740]  значит смотрите тут какая и че смотрите тут какая интересный потому что дело в том,
[02:50:50.740 --> 02:50:55.880]  что нам подлянки еще будет заключаться в том, что как бы если раньше мы масты искали только на
[02:50:55.880 --> 02:51:01.380]  дереве да, то теперь нам нужно сформировать и вершины в принципе тоже все лежат на дереве да,
[02:51:01.380 --> 02:51:06.720]  то у нас теперь есть еще и ребра, которые у нас есть какие-то обратные рёбра, которые сюда не
[02:51:06.720 --> 02:51:12.120]  вошли то есть нам еще только то есть на самом деле общий план действий который
[02:51:12.120 --> 02:51:16.480]  мы тут собираемся такой вот мы хотим вот мы тут сейчас я чуть более формально
[02:51:16.480 --> 02:51:21.040]  определю вот что такое вот эти под деревья то есть я хочу то есть я хочу
[02:51:21.040 --> 02:51:25.360]  сказать следующее давайте прям сразу скажу и напишу да что мне есть такие вот
[02:51:25.360 --> 02:51:30.540]  так сказать деревья вершины под деревья вершины ду связанности прям я так и
[02:51:30.540 --> 02:51:43.740]  напишу определение нет значит назовем скажем что вот виду я сейчас тут
[02:51:43.740 --> 02:51:51.940]  спонтанное слабосочетание сейчас введу значит под дерево вершины ду связанности
[02:51:52.380 --> 02:51:55.780]  ду связанности
[02:51:57.700 --> 02:52:03.780]  значит смотрите да под дерево вершины ду связанности это максимальное по
[02:52:03.780 --> 02:52:06.340]  включению
[02:52:12.260 --> 02:52:20.140]  связанное множество множество
[02:52:22.020 --> 02:52:29.100]  ребер дерево дфс
[02:52:36.180 --> 02:52:41.060]  лежащих в одной компоненте вершины до связанности
[02:52:41.060 --> 02:52:58.700]  а вот в прямом но вот будем говорить что если мы прям вот рассмотрим только
[02:52:58.700 --> 02:53:07.380]  эти ребра вместе с их вершины то они будут образовываться что ой я забыл
[02:53:07.580 --> 02:53:19.340]  максимально ну максимальное по включению пустое как бы да да как в науке называется
[02:53:19.340 --> 02:53:26.500]  минимальное по включению множество пустое лежащих в одной компоненте вершины ду связанности
[02:53:26.580 --> 02:53:36.620]  вот
[02:53:36.620 --> 02:54:02.700]  но максимальная по включению
[02:54:02.700 --> 02:54:14.580]  нет почему любые два ну смотрите нет почему не единственно потому что если какие-то два множества
[02:54:14.580 --> 02:54:18.980]  таких ребер пересекаются по ребру то вообще-то их можно объединить в единое связанное ребро из
[02:54:18.980 --> 02:54:29.860]  одной компоненты это единосвязное множество вот ну то есть по сути я хочу взять дерево
[02:54:29.940 --> 02:54:35.340]  ребра дерево dfs да но для каждого ребра я вот могу смотреть какие-то соседние ребра и
[02:54:35.340 --> 02:54:40.060]  сказать вот я знаю про не про них что какие-то из них одной компоненты связанности со мной
[02:54:40.060 --> 02:54:46.260]  какие-то нет ну ладно тут еще ладно есть тут еще крыш мелкая говорочка что конечно иногда
[02:54:46.260 --> 02:54:51.620]  бывает что у вершины там внутри там как бы несколько детей какие-то из них там из одной
[02:54:51.620 --> 02:54:57.980]  компоненты какие-то из другой ну какие-то из третьей вообще вот но допустим это мы собственно
[02:54:58.300 --> 02:55:06.680]  вот так вот я хочу просто рассмотреть то есть пока я хочу такие деревья найти но во-первых
[02:55:06.680 --> 02:55:12.540]  да не плохо было бы убедиться что разные деревья содержит но вот что разные деревья
[02:55:12.540 --> 02:55:18.020]  содержит ребра из разных компонентов и деревья состоят из ребер разных компонент вершины
[02:55:18.020 --> 02:55:24.420]  до связанности поехали ладно как вы видите не уверен что там пойдет по тарьяно если вам не
[02:55:24.420 --> 02:55:27.860]  нравится схема, которую сейчас предложу я, вы можете почитать оригинальную статью Тарьяна.
[02:55:27.860 --> 02:55:42.180]  Ну, как я уже сказал, depth first search and this is plans. Чего? А, там под ром называют? Ну, ладно. Ну, да. Ну, вот. Ну, хорошо. Ладно. То есть она там называется, там еще куча лемочек,
[02:55:42.180 --> 02:56:04.180]  доказывается вообще мелких. Вот. Ну, вот. Значит, поехали. Лемма 1. В разных под деревьях вершинной двухсвязности, ой, ой, ура, мы спотанно ввели новую аббревиатуру. ПВД.
[02:56:04.180 --> 02:56:29.180]  Нет, главное, кстати, у меня с лету нет ассоциации даже. По-моему, по-моему, мы ни с чем не наложились. А чего в линуксе? Все привексов. Да, но, во-первых, по-русски там скорее всего будет другая.
[02:56:29.180 --> 02:56:39.180]  А, во-вторых, на английском языке это будет не то же самое, как и у нас, потому что наши верток список через В, а там walking через W. Вот.
[02:56:39.180 --> 02:57:04.180]  Ну, допустим, ладно. Хорошо, что мы не физики, да. А или среди вас есть физики. Ну, мало ли вроде. Ну, да.
[02:57:04.180 --> 02:57:18.180]  Да, воздушная, воздушная, висантная. Вот. Ладно. Так, все. Значит, в разных, значит, этих вот ПВД содержатся ребра.
[02:57:18.180 --> 02:57:30.180]  Ребра. Так, ну, во-первых, да. Так, ну, мы, когда называем под дерево, ладно, я не буду, ладно, можно прописать нулевую лему на тему того, что это подвешенное дерево.
[02:57:30.180 --> 02:57:44.180]  Правда? Вот. Подвешенное хотя бы за одну вешину. Вот. Содержатся ребра из разных компонент вершинной двухсвязности.
[02:57:44.180 --> 02:57:55.180]  Из разных КВД. Нет, КВД уже вызывает ассоциации. Нет, нет, нет, КВД просто главную букву М сначала не добавлять.
[02:57:55.180 --> 02:58:09.180]  А так вот. Вот. Так вот. Разных ПВД содержатся ребра разных КВД. Почему? Вот. Ну, здесь вроде как. Вот.
[02:58:09.180 --> 02:58:21.180]  Ну, здесь нот. А, действительно, почему? А вдруг у нас там есть какие-то вот разные деревья и называется нот, которые соединяются почему-то через дерево DFS.
[02:58:21.180 --> 02:58:38.180]  Почему-то каким-то путем без них. Так, ну да. Ну, попытаемся. Ну, давайте смотреть. Хотя доказательства на самом деле такое.
[02:58:38.180 --> 02:58:48.180]  Формально можно сказать так. То есть, как эти деревья относятся друг к другу? Там либо одно из них предок другого, либо они как-то вот в параллельных каких-то живут
[02:58:48.180 --> 02:59:05.180]  там под деревьях через какое-то лца связано. Правда? Ну, на самом деле, но заметим следующее, что если я рассмотрю путь между этими деревьями по дереву, то как бы хотя бы у одного из этих деревьев этот путь будет проходить через, так сказать, родительское ребро, по которому мы вообще входим. Правда?
[02:59:05.180 --> 02:59:19.180]  Так понятно, о чем я говорю? То есть, там есть одно дерево, другое, и там есть у каждого дерева, кроме корневого, есть ребро дерева DFS, на котором это все вообще висит.
[02:59:19.180 --> 02:59:31.180]  Что? Что-то не то? Я пока нет. Сейчас мы говорим под деревом, я имею в виду под дерева вот этого.
[02:59:31.180 --> 02:59:43.180]  Обратно, ну вот. То есть, вот так вот образовалось, что у нас тут есть два под дерева, и почему-то оказывается, что они из разных компонентов, там, двухсвязанности.
[02:59:44.180 --> 02:59:58.180]  Вот. Но теперь, заметим, рассмотрим путь, который их соединяет. Я утверждаю, что у одного из этих под деревьев этот путь как бы идет, как бы через родителя корня этой вершины, этого дерева.
[02:59:58.180 --> 03:00:07.180]  Хотя бы одного точно, может и у двух, если через лца, то прям вот так вот будет. Вот. Ну а если предок потомок, то вот там снизу вверх вот так.
[03:00:07.180 --> 03:00:12.180]  Точно знаем, что вот эта вершинка, это точка свиньи.
[03:00:12.180 --> 03:00:14.180]  Которая черная, которая предок.
[03:00:14.180 --> 03:00:25.180]  Ну, кстати, да. Но само по себе это нот. Но само по себе это нот. Но само нот с одной стороны должна быть.
[03:00:25.180 --> 03:00:31.180]  Но с другой стороны, сейчас мы также докажем, что она и не является.
[03:00:31.180 --> 03:00:37.180]  Ну хотя ладно, хотя ладно по барабану. Может и не так, хотя, а может и является.
[03:00:37.180 --> 03:00:43.180]  Нет, ладно, нет, на самом деле, может она является, нет, понимаете, тут как бы она может являться точкой сочленения.
[03:00:43.180 --> 03:00:52.180]  Там по другим причинам просто, тут как бы вопрос, может там как бы отвалится, там по разным причинам может быть точка сочленения.
[03:00:52.180 --> 03:00:56.180]  То есть может там все развалится или просто отвалится какая-нибудь маленькая веточка.
[03:00:56.180 --> 03:01:01.180]  То есть там какие-нибудь, ну потому что это какая-нибудь достаточно типичная ситуация.
[03:01:01.180 --> 03:01:05.180]  Давайте сразу уговоримся, что может быть, когда у нас дерево устроено как-то так.
[03:01:05.180 --> 03:01:09.180]  То есть у нас есть какая-то мистическая компонента.
[03:01:09.180 --> 03:01:19.180]  Так, где, где режима? Вот он. Ух ты, за стаканчиком спрятался, молодец.
[03:01:19.180 --> 03:01:24.180]  Вот, значит, смотрите, потому что компонент типичный может быть так.
[03:01:24.180 --> 03:01:35.180]  В общем, жила была, то есть вот такая вот красивая компонента, а на ней висит что-нибудь вот такое.
[03:01:35.180 --> 03:01:41.180]  То есть обратите внимание, да, то есть как бы даже такая парадоксальная картинка.
[03:01:41.180 --> 03:01:48.180]  То есть как бы у нас, то есть вот это вот с этим ребром в одной компоненте вершину друг в связности, а вот с этим уже нет.
[03:01:48.180 --> 03:01:56.180]  То есть, потому что, видите, если удалить эту вершину, то как бы вот эта штука не развалится, но треугольник от нее уйдет.
[03:01:56.180 --> 03:02:04.180]  Вот, так что там, то есть как бы это, поэтому там говорите о том, что это точка сочленения.
[03:02:04.180 --> 03:02:12.180]  Ну, то есть, да, то есть она, конечно, видимо точка сочленения, действительно, да, потому что, видимо, потому что это ребро с этими ребрами в разных компонентах лежит.
[03:02:12.180 --> 03:02:26.180]  Одно из деревьев, вершина будет как у изначального дерева. У изначального дерева вершина не обязательно на точке сочленения.
[03:02:26.180 --> 03:02:34.180]  Нет, у одного тогда, но мы рассмотрим то дерево, из которого путь идет через родительское ребро. Да, мы ее рассматриваем.
[03:02:34.180 --> 03:02:46.180]  Вот, то есть, скажем так, есть, конечно, метод, давайте докажем, что это не точка сочленения, но я боюсь, что у нас не получится.
[03:02:46.180 --> 03:02:50.180]  Там просто левая поддельная. Чего?
[03:02:50.180 --> 03:02:56.180]  Ну, там самая высокая вершина, например.
[03:02:57.180 --> 03:03:02.180]  Нет, в смысле, не важно, нескольких в дереве ДФС не будет, чтобы это было.
[03:03:02.180 --> 03:03:12.180]  Если вы возьмете в дереве любое просто связное подножие ребр, тогда у нее будет один ярко выраженный корень.
[03:03:12.180 --> 03:03:18.180]  Потому что не может быть так, чтобы вы были связаны подножие, у него выяснилось, что у него есть две самые высокие вершины.
[03:03:18.180 --> 03:03:22.180]  Нет, я имею в виду, не обязательно брать самую высокую вершину.
[03:03:22.180 --> 03:03:28.180]  Ну, нет, в качестве корня мы будем брать самую высокую. Ну, если вы спрашиваете, что такое корень, это вот самая высокая вершина.
[03:03:28.180 --> 03:03:30.180]  Да, зачем мы это просто требуем?
[03:03:30.180 --> 03:03:31.180]  Вот.
[03:03:31.180 --> 03:03:34.180]  Например, когда мы делали смастер, это имелось бы?
[03:03:34.180 --> 03:03:45.180]  Нет, просто удобно, потому что в данном случае просто удобно, именно корень и конкретное ребро, которое должно быть из другой компоненты, казалось бы.
[03:03:45.180 --> 03:03:50.180]  Но, теперь смотрите. Нет, просто я сейчас объясню, почему я именно так хочу.
[03:03:50.180 --> 03:03:58.180]  Потому что рассмотрим, допустим, вот это ребро и вот это ребро.
[03:03:58.180 --> 03:04:04.180]  Ну вот, как бы есть жуткое подозрение, что эти ребра, то есть мы утверждаем, что эти ребра вершины были связаны.
[03:04:04.180 --> 03:04:08.180]  Равно как и все остальные.
[03:04:08.180 --> 03:04:10.180]  Тогда что это означает?
[03:04:10.180 --> 03:04:24.180]  Это означает, что от этой вершины до какой-то из вот этих можно дойти, минуя вот эту вершину.
[03:04:24.180 --> 03:04:31.180]  Ну, потому что их соединяют какие-то два вершины и пересекающие пути.
[03:04:31.180 --> 03:04:34.180]  Значит, на одном из этих путей этой вершины нет.
[03:04:34.180 --> 03:04:37.180]  То есть эта вершина соединяется то ли с этой, то ли с этой.
[03:04:37.180 --> 03:04:38.180]  Но это даже не важно.
[03:04:38.180 --> 03:04:42.180]  Потому что как этот путь вообще может выглядеть?
[03:04:42.180 --> 03:04:44.180]  Путь может выглядеть так.
[03:04:44.180 --> 03:04:47.180]  Рассмотрим уже глобальное под дерево этой вершины.
[03:04:47.180 --> 03:04:51.180]  Не под дерево, а вот вершина двух связанности, а вот именно прям под дерево.
[03:04:51.180 --> 03:04:55.180]  То есть этот путь должен из этой вершины как-то выйти.
[03:04:55.180 --> 03:05:02.180]  То есть он тут, как мы уже раньше говорили, этот путь шел-шел-шел-шел-шел как-то тут по дереву шел-шел-шел и бах-бах вышел.
[03:05:02.180 --> 03:05:07.180]  Но, напоминаю, выйти мы можем только через обратное ребро,
[03:05:07.180 --> 03:05:12.180]  которое ведет еще раз не в эту вершину, значит выше.
[03:05:12.180 --> 03:05:15.180]  Вот, но тогда поздравляю.
[03:05:15.180 --> 03:05:24.180]  Тогда это ребро с, действительно, по крайней мере вот этим ребром вполне себе в одной компоненте вершин двух связанности противоречий.
[03:05:24.180 --> 03:05:26.180]  Да, кстати, подляночка.
[03:05:26.180 --> 03:05:31.180]  Эта картинка тоже немножко обманывает, потому что, как бы, у вас может возникнуть ощущение,
[03:05:31.180 --> 03:05:38.180]  что все дети этой вершины, дети в глобальном дереве ДФС, лежат в этой вот КВДшечке.
[03:05:38.180 --> 03:05:42.180]  В этой ПВДшечке. На самом деле нет.
[03:05:42.180 --> 03:05:47.180]  То есть вполне вероятно, на одной вершине может таких деревьев висеть вполне себе.
[03:05:47.180 --> 03:05:50.180]  Они тут гроздями могут быть.
[03:05:50.180 --> 03:05:54.180]  Ну, просто действительно, то есть вот такая типичная ситуация на самом деле.
[03:05:54.180 --> 03:05:57.180]  Давайте еще раз обсудим это.
[03:05:57.180 --> 03:06:02.180]  То есть какая-нибудь такая тупая типичная ситуация, но очень содержательная.
[03:06:02.180 --> 03:06:08.180]  Это вот такое, вот такое, вот такое.
[03:06:08.180 --> 03:06:12.180]  Вот. То есть вот такое вот.
[03:06:12.180 --> 03:06:19.180]  И в качестве веселья еще вот такое.
[03:06:19.180 --> 03:06:22.180]  То есть такая типичная ситуация.
[03:06:22.180 --> 03:06:26.180]  Более того, в принципе, может быть, на самом деле еще фишка. Смотрите.
[03:06:31.180 --> 03:06:34.180]  Вот еще такая ситуация бывает.
[03:06:34.180 --> 03:06:38.180]  Вот эти птичка, это вполне себе компоненты вершины.
[03:06:42.180 --> 03:06:44.180]  Вот. Так что тут разно.
[03:06:44.180 --> 03:06:48.180]  То есть, как вы помните, то есть тут может что-то еще.
[03:06:48.180 --> 03:06:52.180]  Ответвление. Какое-то еще ответвление куда-то там в другую сторону вполне себе.
[03:06:58.180 --> 03:07:00.180]  Ну, в принципе, да.
[03:07:03.180 --> 03:07:05.180]  Нет, в принципе, да.
[03:07:09.180 --> 03:07:12.180]  Сейчас, как я, который должен быть точкой сочинения. Стоп, стоп, стоп.
[03:07:12.180 --> 03:07:17.180]  Мы здесь вообще не пользовались тем, что это точка сочинения или не точка сочинения.
[03:07:17.180 --> 03:07:21.180]  Вот тут надо быть аккуратно, потому что она может быть там точкой сочинения.
[03:07:21.180 --> 03:07:24.180]  Просто по причине того, что тут еще что-то левое лежит.
[03:07:24.180 --> 03:07:27.180]  Ее статус не поменяется, поэтому лучше этим не пользоваться.
[03:07:27.180 --> 03:07:29.180]  Поэтому давайте поаккуратнее.
[03:07:29.180 --> 03:07:31.180]  Вот с этим. Какой вопрос?
[03:07:43.180 --> 03:07:44.180]  Да.
[03:07:47.180 --> 03:07:51.180]  Нет, понятно, что если есть цикл, то все ребра на нем лежат вот так.
[03:08:11.180 --> 03:08:14.180]  Да, но мы рассматриваем чисто ребра дерева DFS
[03:08:14.180 --> 03:08:18.180]  и хотим сказать, чтобы они связаны были именно по ребру дерева DFS.
[03:08:18.180 --> 03:08:21.180]  То есть, да, тут, конечно, мало ли как они связаны.
[03:08:21.180 --> 03:08:25.180]  Другой вопрос, что выясняется, что у нас тут о перекрестных ребер у нас особо нет.
[03:08:25.180 --> 03:08:29.180]  То есть, оказывается, мы опять воспользуемся тем, что связь у нас только здесь.
[03:08:29.180 --> 03:08:32.180]  То есть, еще раз напоминаю, больше упаси.
[03:08:32.180 --> 03:08:35.180]  Мы здесь забыли, что это точка сочинения, не точка сочинения.
[03:08:35.180 --> 03:08:38.180]  Неважно. Мы здесь сказали другое.
[03:08:38.180 --> 03:08:40.180]  Что мы сказали? Что раз.
[03:08:40.180 --> 03:08:46.180]  То есть, мы рассмотрели одно из корневых ребер этой компоненты.
[03:08:49.180 --> 03:08:55.180]  Мы выбрали такую компоненту, такую, что путь из нее в другую ведет через ребро из корня.
[03:08:57.180 --> 03:08:58.180]  Теперь мы говорим.
[03:08:59.180 --> 03:09:01.180]  Так, жила была вот это ребро.
[03:09:02.180 --> 03:09:06.180]  Ну вот, это ребро связано с каким-то другим ребром.
[03:09:06.180 --> 03:09:09.180]  Из вот этого соседнего дерева.
[03:09:09.180 --> 03:09:12.180]  Двумя вершины, не пересекающимися путями.
[03:09:12.180 --> 03:09:17.180]  Следовательно, из этой вершины можно без вот этой точки.
[03:09:17.180 --> 03:09:19.180]  То есть, без вот этой точки.
[03:09:19.180 --> 03:09:21.180]  Значит, попасть сюда.
[03:09:21.180 --> 03:09:27.180]  Но выясняется, что чтобы попасть из этой точки, нужно выйти из-под дерева этой точки.
[03:09:28.180 --> 03:09:31.180]  Выйти из нее мы можем только через обратное ребро.
[03:09:31.180 --> 03:09:37.180]  Но обратное ребро, не проходящее через эту вершину, гарантирует нам, что вот это ребро...
[03:09:41.180 --> 03:09:42.180]  Видимо, это ребро.
[03:09:42.180 --> 03:09:47.180]  Правильно даже сказать, не вот этой вершины под дерево, а даже вот этой вершины под дерево.
[03:09:47.180 --> 03:09:51.180]  Оно нам гарантирует, что вот это ребро и это ребро лежат в этой компоненте вершины.
[03:09:51.180 --> 03:09:54.180]  Связывайте противоречие с выбором этого места.
[03:09:55.180 --> 03:09:59.180]  То есть, доказать, что это...
[03:09:59.180 --> 03:10:05.180]  Скажем так, из того, что этот путь существует, то есть отсюда не следует, что эта вершина не является точкой сочленения.
[03:10:05.180 --> 03:10:11.180]  Просто она может по другой, просто из-за там левого отростка, является точкой сочленения.
[03:10:21.180 --> 03:10:22.180]  Сейчас.
[03:10:25.180 --> 03:10:28.180]  Нет, то смотрите, в принципе, да.
[03:10:28.180 --> 03:10:29.180]  Сейчас.
[03:10:29.180 --> 03:10:31.180]  На самом деле не все.
[03:10:31.180 --> 03:10:34.180]  На самом деле, хорошо, давайте сформулируем такую лему.
[03:10:35.180 --> 03:10:37.180]  Ладно, даже не красненькую, давайте.
[03:10:37.180 --> 03:10:39.180]  Смотрите, там у себя рыженькую лему.
[03:10:41.180 --> 03:10:45.180]  У вас в этих планшетах, там можно цвет, наверное, поменять автоматически.
[03:10:48.180 --> 03:10:50.180]  Я сказал, рыжим.
[03:10:51.180 --> 03:10:52.180]  Господи.
[03:10:55.180 --> 03:10:56.180]  Так.
[03:10:56.180 --> 03:11:02.180]  Значит, пусть оказалось, что там, допустим, какой-нибудь там УВ, обратное ребро.
[03:11:02.180 --> 03:11:03.180]  Именно в эту сторону.
[03:11:05.180 --> 03:11:08.180]  Обратное ребро.
[03:11:11.180 --> 03:11:13.180]  Та-дам!
[03:11:14.180 --> 03:11:16.180]  Та-дам! Та-дам!
[03:11:16.180 --> 03:11:18.180]  Та-дам! Пум!
[03:11:18.180 --> 03:11:19.180]  Вот.
[03:11:20.180 --> 03:11:22.180]  Значит, тогда...
[03:11:22.180 --> 03:11:24.180]  Значит, и снова у нас, да.
[03:11:24.180 --> 03:11:26.180]  Тогда путь.
[03:11:27.180 --> 03:11:30.180]  По дереву ДФС.
[03:11:33.180 --> 03:11:37.180]  Из У, из ВВУ.
[03:11:39.180 --> 03:11:40.180]  Лежит.
[03:11:42.180 --> 03:11:44.180]  В одной.
[03:11:45.180 --> 03:11:46.180]  КВД.
[03:11:46.180 --> 03:11:48.180]  Ну, давайте такую.
[03:11:48.180 --> 03:11:50.180]  Ладно, такую лему тоже рассмотрим.
[03:11:52.180 --> 03:11:54.180]  Ну, так, чисто для...
[03:11:54.180 --> 03:11:56.180]  Ой, ПВД, ПВД, ой.
[03:11:56.180 --> 03:11:58.180]  Господи, наводил тут аббревиатуру.
[03:11:58.180 --> 03:11:59.180]  Господи.
[03:12:00.180 --> 03:12:04.180]  Ой, давайте математики наводят тут, а потом разбирайся.
[03:12:04.180 --> 03:12:06.180]  Так, ПВД, КВД.
[03:12:06.180 --> 03:12:08.180]  А, это вы еще экономику не изучали, впрочем, да.
[03:12:09.180 --> 03:12:12.180]  Там вообще наводят буковки, и вы будете им жонглировать.
[03:12:13.180 --> 03:12:14.180]  Вот.
[03:12:15.180 --> 03:12:16.180]  Давай.
[03:12:23.180 --> 03:12:27.180]  Да, в одной компоненте с, допустим, вот этим ребром.
[03:12:31.180 --> 03:12:33.180]  Доказательства такое.
[03:12:33.180 --> 03:12:40.180]  Потому что вот это ребро с этим, по нашему предположению, лежат в одной компоненте вершины двух связностей.
[03:12:40.180 --> 03:12:42.180]  Но они разделены там деревом.
[03:12:42.180 --> 03:12:50.180]  Мы между ними провели эти два пути, и выяснилось, что из этой вершины можно до этого ребра добраться, минуя вот эту вершину.
[03:12:50.180 --> 03:12:51.180]  Вот.
[03:12:51.180 --> 03:12:52.180]  Как устроен этот путь?
[03:12:52.180 --> 03:12:56.180]  Этот путь ходит по под деревом этой вершины и в какой-то момент из него первый раз выпрыгивает.
[03:12:57.180 --> 03:12:59.180]  Выпрыгивает он только по рыжему ребру.
[03:12:59.180 --> 03:13:03.180]  Рыжее ребро идет выше этой вершины, но и выше этой вершины, раз мы ее минуем.
[03:13:03.180 --> 03:13:14.180]  Но тогда получается, есть вот это ребро и это ребро, и есть ребро, которое соединяет под дерево этой вершины с предком этих всех вершин.
[03:13:14.180 --> 03:13:21.180]  Тогда получается, что это рыжее ребро вместе с деревом DFS образует цикл, который проходит, в том числе, через эти два ребра.
[03:13:21.180 --> 03:13:24.180]  В одной компоненте вершины двух связностей, да.
[03:13:26.180 --> 03:13:27.180]  Это было вот.
[03:13:27.180 --> 03:13:29.180]  Так, вот Лемма вторая.
[03:13:29.180 --> 03:13:31.180]  Она тут, конечно, попроще.
[03:13:31.180 --> 03:13:35.180]  Тут она вообще очевидна в такой формулевке, но полезная.
[03:13:35.180 --> 03:13:42.180]  На самом деле она просто нам говорит, что если мы хотим нарисовать какие-то другие ребра,
[03:13:42.180 --> 03:13:50.180]  то есть другие ребра, то мы вынуждены заключить, что они все лежат внутри.
[03:13:50.180 --> 03:13:55.180]  То есть мы удивились, что убедились, что эти деревья в некотором смысле не объединяются.
[03:13:55.180 --> 03:14:02.180]  И более того, оказывается, что внутри каждого такого дерева лежат все обратные ребра.
[03:14:02.180 --> 03:14:07.180]  То есть по сути мы доказали, сложно это формализовать,
[03:14:07.180 --> 03:14:11.180]  но то, что мы нашли, это скелет.
[03:14:11.180 --> 03:14:15.180]  Вот это скелет, то есть это скелет и компонент вершины двух связностей.
[03:14:18.180 --> 03:14:19.180]  Вот.
[03:14:19.180 --> 03:14:24.180]  Но для того, чтобы найти, нам придется заметить еще одно очень важное, что.
[03:14:28.180 --> 03:14:29.180]  Вот.
[03:14:35.180 --> 03:14:36.180]  Чего?
[03:14:36.180 --> 03:14:38.180]  Не, все еще круче.
[03:14:43.180 --> 03:14:53.180]  Значит, у корня ПВД ровно один ребенок.
[03:14:58.180 --> 03:15:01.180]  Ну, имеется в виду в ПВД, конечно.
[03:15:01.180 --> 03:15:04.180]  В реальном дереве, конечно, их может быть сколько угодно.
[03:15:07.180 --> 03:15:09.180]  Да, это важный момент.
[03:15:09.180 --> 03:15:13.180]  То есть дерево висит не просто на одной вершине, но на одном ребре.
[03:15:17.180 --> 03:15:20.180]  Нет, в общем-то, ничего неожиданного в этом нет.
[03:15:22.180 --> 03:15:24.180]  Потому что, ну, то есть доказали, ну, вот.
[03:15:24.180 --> 03:15:25.180]  Ну, то есть на самом деле, да.
[03:15:25.180 --> 03:15:28.180]  То есть это может быть сейчас слет и неожиданный слом.
[03:15:28.180 --> 03:15:33.180]  Ну, в общем-то, действительно, если у нас обнаружилась такая неожиданная ПВДшечка, допустим, да.
[03:15:34.180 --> 03:15:36.180]  То есть какая-нибудь вот такая вот ПВДшечка.
[03:15:36.180 --> 03:15:38.180]  И тут у корня образовалась неожиданно там.
[03:15:40.180 --> 03:15:41.180]  Все.
[03:15:41.180 --> 03:15:42.180]  Ладно.
[03:15:42.180 --> 03:15:45.180]  Так, какой у нас цвет максимально похож на черный?
[03:15:47.180 --> 03:15:48.180]  Ну, это тогда.
[03:15:49.180 --> 03:15:51.180]  А, ой, тогда-тогда-тогда-тогда.
[03:15:53.180 --> 03:15:54.180]  Да, во.
[03:15:57.180 --> 03:15:58.180]  Все отлично, все спасибо.
[03:15:58.180 --> 03:16:01.180]  Ой, да что ж такое, все спасибо огромное.
[03:16:02.180 --> 03:16:03.180]  Вот, господи.
[03:16:03.180 --> 03:16:05.180]  Что бы мы без Таисии делали.
[03:16:06.180 --> 03:16:07.180]  Во.
[03:16:07.180 --> 03:16:08.180]  Вот.
[03:16:08.180 --> 03:16:09.180]  Вот.
[03:16:09.180 --> 03:16:10.180]  Вот он.
[03:16:10.180 --> 03:16:11.180]  Вот она.
[03:16:11.180 --> 03:16:12.180]  Да.
[03:16:12.180 --> 03:16:13.180]  Вот.
[03:16:14.180 --> 03:16:17.180]  Значит, да, если у нас тут есть хотя бы два ребра или больше, да.
[03:16:17.180 --> 03:16:19.180]  То тут теперь возникает вопрос.
[03:16:19.180 --> 03:16:23.180]  А как, простите, связаны эти вершины без этой?
[03:16:23.180 --> 03:16:29.180]  Ведь если эти вершины двусвязаны, значит эта вершина связана с этой каким-то путем.
[03:16:29.180 --> 03:16:31.180]  И без этой вершины.
[03:16:32.180 --> 03:16:34.180]  Как выглядит этот путь?
[03:16:34.180 --> 03:16:35.180]  Так.
[03:16:35.180 --> 03:16:37.180]  Ну, как-то, наверное, выглядит.
[03:16:37.180 --> 03:16:39.180]  Только перекрестных ребер у нас нет.
[03:16:39.180 --> 03:16:41.180]  Поэтому давайте стандартное доказательство.
[03:16:41.180 --> 03:16:42.180]  Да.
[03:16:42.180 --> 03:16:44.180]  То есть вот стандартное доказательство.
[03:16:44.180 --> 03:16:46.180]  Берем обычную пластиковую бутылку.
[03:16:47.180 --> 03:16:51.180]  Вот, в которой висит поддир в этой вершине.
[03:16:51.180 --> 03:16:54.180]  И пытаемся, значит, пойти сюда.
[03:16:54.180 --> 03:16:57.180]  Идем, идем, идем, идем, идем, идем, идем.
[03:17:00.180 --> 03:17:02.180]  И обратное ребро.
[03:17:03.180 --> 03:17:04.180]  Ура.
[03:17:05.180 --> 03:17:06.180]  Почему ура?
[03:17:06.180 --> 03:17:07.180]  Потому что это обратное ребро.
[03:17:07.180 --> 03:17:10.180]  Раз оно идет не только выше этой вершины, но и этой.
[03:17:10.180 --> 03:17:12.180]  Это означает, что тут есть какой-то родитель.
[03:17:12.180 --> 03:17:13.180]  И даже несколько.
[03:17:13.180 --> 03:17:16.180]  И все эти ребра тоже в одной компоненте вершины двусвязанности.
[03:17:16.180 --> 03:17:17.180]  Противоречие.
[03:17:17.180 --> 03:17:19.180]  С тем, что это корень.
[03:17:19.180 --> 03:17:20.180]  Ура.
[03:17:20.180 --> 03:17:21.180]  Вот.
[03:17:23.180 --> 03:17:24.180]  Что?
[03:17:29.180 --> 03:17:30.180]  Не, лему два.
[03:17:30.180 --> 03:17:33.180]  Ну, лему два мы просто доказали, что...
[03:17:36.180 --> 03:17:37.180]  Ну, по сути, да.
[03:17:37.180 --> 03:17:38.180]  Ну, да.
[03:17:38.180 --> 03:17:40.180]  Все это исследует из того, что...
[03:17:40.180 --> 03:17:41.180]  По сути, да.
[03:17:41.180 --> 03:17:45.180]  Обратное ребро образует деревом ДФС цикл.
[03:17:45.180 --> 03:17:49.180]  А так как это цикл, то тогда получается, что это одна компонент вершины двусвязанности.
[03:17:49.180 --> 03:17:54.180]  Ну и очевидно, что, по крайней мере, этот путь точно в одной ПВДшечке лежит.
[03:17:55.180 --> 03:17:56.180]  Вот.
[03:17:57.180 --> 03:17:58.180]  То есть важный момент.
[03:17:58.180 --> 03:18:03.180]  Вы видите, кто-то, внимание, могли обратить внимание, что у меня тут как-то в подделье...
[03:18:03.180 --> 03:18:04.180]  Почему-то я тут...
[03:18:04.180 --> 03:18:07.180]  У поддельев действительно у каждого корня только один ребенок.
[03:18:07.180 --> 03:18:09.180]  Но я это рисовал не случайно.
[03:18:09.180 --> 03:18:11.180]  То есть, собственно, вот по этой причине.
[03:18:12.180 --> 03:18:17.180]  То есть, кстати, самое смешное, что по модулю этого факта, конечно, дерево...
[03:18:17.180 --> 03:18:20.180]  То есть деревья на самом деле могут быть устроены абсолютно произвольно.
[03:18:21.180 --> 03:18:23.180]  Ну, например, потому что...
[03:18:23.180 --> 03:18:24.180]  Ну, например, там самый тупой пример.
[03:18:24.180 --> 03:18:28.180]  Я могу нарисовать абсолютно любое подвешенное за одно ребро дерево.
[03:18:28.180 --> 03:18:32.180]  И из каждой вершины в корень дерево отправить обратное ребро, например.
[03:18:34.180 --> 03:18:35.180]  Вот.
[03:18:35.180 --> 03:18:37.180]  То есть это на тему того, какие там...
[03:18:37.180 --> 03:18:42.180]  То есть там внутри, конечно, после этого одного ребра там витления могут быть от слова какие угодно.
[03:18:43.180 --> 03:18:44.180]  Вот.
[03:18:44.180 --> 03:18:45.180]  Поэтому теперь...
[03:18:45.180 --> 03:18:47.180]  Но смотрите, знаете, что это нам дает?
[03:18:47.180 --> 03:18:52.180]  Это нам дает возможность, важную возможность на самом деле, добавить...
[03:18:54.180 --> 03:18:59.180]  То есть это нам дает возможность теперь действительно пытаться...
[03:18:59.180 --> 03:19:02.180]  То есть теперь говорить, что компоненты у нас висит на ребре.
[03:19:03.180 --> 03:19:05.180]  И смотрите, как теперь это...
[03:19:05.180 --> 03:19:10.180]  И это нам дает возможность теперь найти компоненты вершины двусвязности.
[03:19:11.180 --> 03:19:14.180]  Вот этой вот уже имеющейся у нас технологией.
[03:19:14.180 --> 03:19:18.180]  Потому что в этой технологии теперь нужно определить, что ребро дерева DFS.
[03:19:19.180 --> 03:19:23.180]  То есть теперь у нас есть понятие корневое ребро компоненты.
[03:19:23.180 --> 03:19:24.180]  Да.
[03:19:24.180 --> 03:19:27.180]  Теперь заметим, что корневое ребро компоненты.
[03:19:29.180 --> 03:19:31.180]  Ну да, можно еще употреблять ПВДшечки.
[03:19:31.180 --> 03:19:35.180]  Но видим, что у нас ПВДшечка и компоненты, как мы уже убедились, это одно и то же.
[03:19:35.180 --> 03:19:36.180]  Вот.
[03:19:36.180 --> 03:19:37.180]  Вот так.
[03:19:38.180 --> 03:19:39.180]  Вот так.
[03:19:39.180 --> 03:19:40.180]  И вот так.
[03:19:41.180 --> 03:19:42.180]  Вот.
[03:19:42.180 --> 03:19:43.180]  А, и вот так, конечно.
[03:19:44.180 --> 03:19:46.180]  И теперь надо просто про каждое ребро...
[03:19:46.180 --> 03:19:48.180]  Теперь у меня идея такая.
[03:19:48.180 --> 03:19:51.180]  То есть я хочу теперь просто про каждое ребро теперь научиться понимать.
[03:19:51.180 --> 03:19:53.180]  Это ребро является...
[03:19:53.180 --> 03:19:58.180]  Каждое ребро является ли оно корневым в своей компоненте вершины двусвязности?
[03:20:00.180 --> 03:20:01.180]  Да или нет?
[03:20:04.180 --> 03:20:10.180]  Потому что если я это определю, то тогда сделаем вот как.
[03:20:11.180 --> 03:20:14.180]  Потому что теперь код будет выглядеть немножко по-другому.
[03:20:15.180 --> 03:20:17.180]  Да, ну там скопипастя там у себя.
[03:20:18.180 --> 03:20:19.180]  Потому что смотрите.
[03:20:19.180 --> 03:20:20.180]  Я вам сразу скажу.
[03:20:20.180 --> 03:20:22.180]  Сейчас будет немножко магии.
[03:20:23.180 --> 03:20:25.180]  Смотрите, веселая технология.
[03:20:32.180 --> 03:20:33.180]  Смотрите.
[03:20:33.180 --> 03:20:35.180]  Во-первых, потому что я убрал эту строчку.
[03:20:35.180 --> 03:20:36.180]  Почему я ее убрал?
[03:20:39.180 --> 03:20:40.180]  Ой.
[03:20:41.180 --> 03:20:43.180]  Потому что тут все надо убрать.
[03:20:43.180 --> 03:20:45.180]  Ладно, будем писать вместе.
[03:20:45.180 --> 03:20:46.180]  Будем писать вместе.
[03:20:46.180 --> 03:20:47.180]  Да, ну вот.
[03:20:47.180 --> 03:20:48.180]  То есть это оставим.
[03:20:48.180 --> 03:20:50.180]  ColorDFSBlack оставим.
[03:20:50.180 --> 03:20:51.180]  Вот это тоже уберем.
[03:20:51.180 --> 03:20:52.180]  Почему это уберем?
[03:20:52.180 --> 03:20:56.180]  Потому что, как вы уже догадались, в стеке мы больше вершины не храним.
[03:20:57.180 --> 03:21:00.180]  Мы в стеке теперь храним ребра.
[03:21:02.180 --> 03:21:03.180]  Вот.
[03:21:05.180 --> 03:21:06.180]  Да.
[03:21:07.180 --> 03:21:08.180]  Значит, поехали.
[03:21:10.180 --> 03:21:11.180]  Значит, поехали.
[03:21:11.180 --> 03:21:12.180]  Значит, фор.
[03:21:13.180 --> 03:21:14.180]  Значит, тут я напишу так.
[03:21:14.180 --> 03:21:15.180]  Edge.
[03:21:16.180 --> 03:21:23.180]  Значит, E равно там, соответственно, VUID в граф от V.
[03:21:27.180 --> 03:21:28.180]  Ну, было граф.
[03:21:28.180 --> 03:21:29.180]  Ну да, да, да, да.
[03:21:29.180 --> 03:21:30.180]  Ой, ну и что такое?
[03:21:30.180 --> 03:21:32.180]  Ну что, в крепком решке 5 же вы можете ехать там.
[03:21:32.180 --> 03:21:33.180]  Там погоня идет.
[03:21:33.180 --> 03:21:37.180]  То есть по Москве, то по Будапешту, то по неизвестной местности и так далее.
[03:21:38.180 --> 03:21:40.180]  И все это прямо на соседних улицах.
[03:21:40.180 --> 03:21:42.180]  Да, ну как-то нормально.
[03:21:44.180 --> 03:21:45.180]  Вот.
[03:21:49.180 --> 03:21:51.180]  Да, конечно, это из цикла.
[03:21:51.180 --> 03:21:54.180]  А кто сказал, что крепкий решет 5 – это крутой фильм, конечно.
[03:21:56.180 --> 03:22:00.180]  Ну, знаете, как в некоторых сериалах про авиакатастрофу.
[03:22:00.180 --> 03:22:01.180]  Знаете, как бывает, да?
[03:22:01.180 --> 03:22:04.180]  Я вам такой рассказал, что там просто действительно авиакатастрофа.
[03:22:04.180 --> 03:22:06.180]  И там второй пилот говорит, ладно.
[03:22:07.180 --> 03:22:11.180]  Ладно, единственный успокаивает, что наш сериал американский,
[03:22:11.180 --> 03:22:13.180]  поэтому конец должен быть хороший.
[03:22:14.180 --> 03:22:17.180]  Ну, первый пилот так спокойно развлечивается и на чистом русском и говорит,
[03:22:17.180 --> 03:22:21.180]  а кто вам сказал, что это американский сериал?
[03:22:26.180 --> 03:22:27.180]  Ну вот.
[03:22:30.180 --> 03:22:31.180]  Наспотя, что такое плохо.
[03:22:31.180 --> 03:22:33.180]  Нет, обычно типичный американский сериал.
[03:22:33.180 --> 03:22:35.180]  Нет, нет, у тебя типичный, да.
[03:22:35.180 --> 03:22:37.180]  Есть в концертах какой-нибудь крепкий решет 2.
[03:22:37.180 --> 03:22:41.180]  Там самолет упал, там все погибли, там взорвались, там, значит, куча народу погибла.
[03:22:41.180 --> 03:22:44.180]  Но в итоге все хорошо, потому что главный герой спас жену.
[03:22:47.180 --> 03:22:48.180]  Но там это как…
[03:22:48.180 --> 03:22:50.180]  Не, ну да, там типичная ситуация.
[03:22:50.180 --> 03:22:51.180]  Да, как это…
[03:22:51.180 --> 03:22:53.180]  Ну, ой, так, ладно.
[03:22:53.180 --> 03:22:54.180]  Длинные ассоциации.
[03:22:56.180 --> 03:22:57.180]  Господи, как мы столько…
[03:22:57.180 --> 03:22:59.180]  Господи, откуда у нас 54 билета?
[03:22:59.180 --> 03:23:02.180]  Вот вообще, такими темпами откуда у нас 54 вопроса вообще в билетах на экзамене было?
[03:23:04.180 --> 03:23:08.180]  Я ж вас это, как говорится, там по кино-то не гонял.
[03:23:08.180 --> 03:23:09.180]  Вроде так.
[03:23:13.180 --> 03:23:14.180]  Да.
[03:23:14.180 --> 03:23:15.180]  Не.
[03:23:17.180 --> 03:23:18.180]  Значит, ладно.
[03:23:18.180 --> 03:23:19.180]  Тихо, тихо.
[03:23:19.180 --> 03:23:20.180]  Так, тихо.
[03:23:20.180 --> 03:23:21.180]  Ну, погодите.
[03:23:21.180 --> 03:23:22.180]  Нет, погодите.
[03:23:22.180 --> 03:23:24.180]  Мне самому интересно, сколько у нас будет вопросов еще.
[03:23:26.180 --> 03:23:27.180]  Тихо, тихо.
[03:23:27.180 --> 03:23:28.180]  Значит, граф.
[03:23:28.180 --> 03:23:29.180]  Значит, бежим.
[03:23:29.180 --> 03:23:30.180]  Ну, во-первых, начинаем.
[03:23:30.180 --> 03:23:31.180]  Так, давайте…
[03:23:31.180 --> 03:23:35.180]  Значит, здесь я тут ввел скобочку, потому что мне прям очень хочется сказать, что
[03:23:35.180 --> 03:23:40.180]  если id равно id per, то мы выбрасываемся с криком continue.
[03:23:42.180 --> 03:23:43.180]  Все.
[03:23:43.180 --> 03:23:44.180]  Не хочу об этом думать.
[03:23:45.180 --> 03:23:46.180]  Вот.
[03:23:47.180 --> 03:23:48.180]  Значит, дальше идем.
[03:23:52.180 --> 03:23:53.180]  Значит, если…
[03:23:54.180 --> 03:23:55.180]  Значит, теперь.
[03:23:55.180 --> 03:24:01.180]  Если оказалось, что color от u равно равно…
[03:24:01.180 --> 03:24:03.180]  Значит, e dfs white.
[03:24:04.180 --> 03:24:05.180]  Вот.
[03:24:05.180 --> 03:24:07.180]  Ну, как бы цвет белый, поэтому пишем черный.
[03:24:07.180 --> 03:24:08.180]  Логично.
[03:24:08.180 --> 03:24:09.180]  Вот.
[03:24:09.180 --> 03:24:10.180]  Так.
[03:24:10.180 --> 03:24:12.180]  Как говорится, какие шутки?
[03:24:12.180 --> 03:24:15.180]  Вы уже еще час назад прокрутились в голове.
[03:24:15.180 --> 03:24:16.180]  Да.
[03:24:16.180 --> 03:24:17.180]  Вот.
[03:24:17.180 --> 03:24:18.180]  Значит, смотрите.
[03:24:18.180 --> 03:24:19.180]  Так.
[03:24:19.180 --> 03:24:20.180]  Ну, поехали.
[03:24:20.180 --> 03:24:22.180]  Значит, пишем, во-первых…
[03:24:22.180 --> 03:24:23.180]  Давайте так.
[03:24:23.180 --> 03:24:28.180]  Dfs от, во-первых, u и, конечно же, там…
[03:24:28.180 --> 03:24:30.180]  Значит, этого id-шника.
[03:24:32.180 --> 03:24:33.180]  Так.
[03:24:34.180 --> 03:24:38.180]  Так, не забываем пересчитать uptime.
[03:24:41.180 --> 03:24:48.180]  uptime от v там, как всегда, min равно uptime от u.
[03:24:50.180 --> 03:24:51.180]  Так.
[03:24:51.180 --> 03:24:52.180]  Что еще пишем?
[03:24:52.180 --> 03:24:53.180]  И теперь…
[03:24:53.180 --> 03:24:54.180]  Так.
[03:24:54.180 --> 03:24:57.180]  Ну и теперь приходит время ввести что-то красненькое.
[03:24:57.180 --> 03:25:08.180]  Если оказалось, что v у корневое ребро своей компоненты,
[03:25:08.180 --> 03:25:13.180]  там вот, короче, свои pvd, будем до краткости писать,
[03:25:13.180 --> 03:25:15.180]  да, то…
[03:25:15.180 --> 03:25:19.180]  И тут я понимаю, что я кое-что забыл.
[03:25:19.180 --> 03:25:20.180]  Как говорится?
[03:25:20.180 --> 03:25:21.180]  Что я забыл?
[03:25:21.180 --> 03:25:22.180]  Что я забыл?
[03:25:22.180 --> 03:25:23.180]  Да.
[03:25:23.180 --> 03:25:24.180]  А забыл я…
[03:25:24.180 --> 03:25:29.180]  Ой, да, самое важное, что я тут забыл.
[03:25:29.180 --> 03:25:35.180]  Вот сюда, в самом начале, вставить наше ребро e в stack.
[03:25:35.180 --> 03:25:36.180]  Да.
[03:25:36.180 --> 03:25:38.180]  В самом начале, именно перед…
[03:25:38.180 --> 03:25:39.180]  Это важно.
[03:25:39.180 --> 03:25:41.180]  Это надо сделать именно перед dfs.
[03:25:41.180 --> 03:25:43.180]  Обращаю на это внимание.
[03:25:43.180 --> 03:25:44.180]  Да.
[03:25:44.180 --> 03:25:46.180]  В общем, вряд ли не сохраняться.
[03:25:46.180 --> 03:25:47.180]  Да.
[03:25:47.180 --> 03:25:48.180]  Ну вот.
[03:25:48.180 --> 03:25:49.180]  Да.
[03:25:49.180 --> 03:25:50.180]  Осталось только выяснить, какие варианты.
[03:25:50.180 --> 03:25:51.180]  Да.
[03:25:51.180 --> 03:25:52.180]  Мы еще пока не вводили.
[03:25:52.180 --> 03:25:53.180]  Да.
[03:25:53.180 --> 03:25:54.180]  Знаете, когда…
[03:25:54.180 --> 03:25:55.180]  Как это называется?
[03:25:55.180 --> 03:25:56.180]  Да.
[03:25:56.180 --> 03:25:59.180]  Как говорится, мы сдали десятую задачу.
[03:25:59.180 --> 03:26:00.180]  Надеюсь, команды не…
[03:26:00.180 --> 03:26:02.180]  Там противники не успели объявить тайм-аут.
[03:26:02.180 --> 03:26:05.180]  Все были, что какие тайм-ауты на контестах.
[03:26:05.180 --> 03:26:06.180]  Вот.
[03:26:06.180 --> 03:26:07.180]  Ладно.
[03:26:07.180 --> 03:26:08.180]  Сложный прикол.
[03:26:08.180 --> 03:26:09.180]  Так.
[03:26:09.180 --> 03:26:10.180]  Значит, смотрите.
[03:26:10.180 --> 03:26:15.180]  Значит, если, короче, ладно, даже не v у, а вот именно
[03:26:15.180 --> 03:26:21.180]  где оказалось корневое ребро pvd, каким-то мистическим
[03:26:21.180 --> 03:26:25.180]  образом, то что мы делаем, то значит тогда…
[03:26:25.180 --> 03:26:28.180]  Да, да, да, да.
[03:26:28.180 --> 03:26:30.180]  Ну да.
[03:26:30.180 --> 03:26:34.180]  То есть, пишем вектор, как всегда.
[03:26:34.180 --> 03:26:37.180]  Вектор, на этот раз edge.
[03:26:37.180 --> 03:26:39.180]  Comp.
[03:26:40.180 --> 03:26:46.180]  То есть, как всегда, do, значит, как всегда, значит,
[03:26:46.180 --> 03:26:48.180]  comp.push.
[03:26:48.180 --> 03:26:52.180]  Comp.push от st.top.
[03:26:52.180 --> 03:26:57.180]  Там st.pop.
[03:26:57.180 --> 03:26:59.180]  While.
[03:26:59.180 --> 03:27:02.180]  While, show.
[03:27:02.180 --> 03:27:04.180]  While, show.
[03:27:04.180 --> 03:27:06.180]  Ну, while, понятно, e.
[03:27:06.180 --> 03:27:07.180]  Ну вот.
[03:27:07.180 --> 03:27:09.180]  While.comp.
[03:27:09.180 --> 03:27:17.180]  While.comp.back.id не равно id.
[03:27:23.180 --> 03:27:24.180]  Вот.
[03:27:24.180 --> 03:27:27.180]  Так, ладно, это мы тоже уберем.
[03:27:27.180 --> 03:27:28.180]  Вот.
[03:27:28.180 --> 03:27:31.180]  То есть, просто технология хочет вот такая же.
[03:27:31.180 --> 03:27:35.180]  То есть, если мы идентифицировали корневое ребро, то значит
[03:27:35.180 --> 03:27:38.180]  хочется сказать, что все, что висело на нем, сейчас
[03:27:38.180 --> 03:27:40.180]  вот в стеке после него и висит.
[03:27:40.180 --> 03:27:41.180]  Вот.
[03:27:41.180 --> 03:27:44.180]  Но, правда, для этого нужно много чего сделать еще.
[03:27:44.180 --> 03:27:49.180]  А именно, очень-очень-очень аккуратно обработать…
[03:27:49.180 --> 03:27:50.180]  Да.
[03:27:50.180 --> 03:27:53.180]  Значит, во-первых, да, потому что надо написать, если
[03:27:53.180 --> 03:27:55.180]  ребро обратно именно в этом направлении.
[03:27:55.180 --> 03:27:57.180]  Там еще надо желательно следить, чтобы ребро не было
[03:27:57.180 --> 03:27:59.180]  добавлено в стек в два раза.
[03:27:59.180 --> 03:28:03.180]  Ну, ребром дерево DFS, конечно, мы это надежно делаем вот
[03:28:03.180 --> 03:28:04.180]  в этом месте.
[03:28:04.180 --> 03:28:05.180]  Да, именно.
[03:28:05.180 --> 03:28:09.180]  Поэтому, значит, если оказалось, как мы проверяем, что ребро
[03:28:09.180 --> 03:28:13.180]  обратное, мы проверяем, мы пишем.
[03:28:13.180 --> 03:28:21.180]  У нас, опять же, есть… То есть, если color от u равно
[03:28:22.180 --> 03:28:27.180]  e dfs grey, как вы пишете, господи, вот…
[03:28:27.180 --> 03:28:29.180]  Господи, все про серый мы пишем.
[03:28:29.180 --> 03:28:31.180]  Рыжий про белый, черный…
[03:28:31.180 --> 03:28:32.180]  Скажется вот.
[03:28:32.180 --> 03:28:33.180]  Вот, внимание, вопрос.
[03:28:33.180 --> 03:28:36.180]  Да, кстати, да, как вы думаете, почему вообще введены все
[03:28:36.180 --> 03:28:39.180]  цвета именно белый, серый, черный, а не вот там красный,
[03:28:39.180 --> 03:28:41.180]  желтый, зеленый?
[03:28:41.180 --> 03:28:50.180]  Так это не верно движению, как минимум, потому что
[03:28:50.180 --> 03:28:52.180]  я это не слышал, чтобы он умер.
[03:28:52.180 --> 03:28:54.180]  Во-первых, напоминает.
[03:28:54.180 --> 03:28:56.180]  Нет, я думаю, все гораздо проще.
[03:28:56.180 --> 03:28:58.180]  Нет, я еще не пришел в голову.
[03:28:58.180 --> 03:29:01.180]  Причина, я думаю, та же, почему там в оригинале, в линкате
[03:29:01.180 --> 03:29:04.180]  там ребра сплошные и пунктирные, а не красные и зеленые.
[03:29:04.180 --> 03:29:08.180]  Да, потому что, да, потому что статьи все-таки в основном
[03:29:08.180 --> 03:29:10.180]  черно-белые печатаются, поэтому…
[03:29:10.180 --> 03:29:13.180]  Особенно в те времена не то, чтобы там, называется,
[03:29:13.180 --> 03:29:16.180]  разбежишься на цветных этих, поэтому там…
[03:29:16.180 --> 03:29:18.180]  В те времена красно-черные.
[03:29:18.180 --> 03:29:22.180]  Ну ладно, нет, красно-черные…
[03:29:22.180 --> 03:29:26.180]  Нет, ну не важно, красно-черные, это как бы там к авторам
[03:29:26.180 --> 03:29:29.180]  вопрос, почему там оно именно красно-черное, но…
[03:29:29.180 --> 03:29:36.180]  Зачем это все вообще, да?
[03:29:36.180 --> 03:29:39.180]  Ну не знаю, с другой стороны, зачем это все, наверное,
[03:29:39.180 --> 03:29:42.180]  я думаю, там это на фистехе, на многих предметах возникает
[03:29:42.180 --> 03:29:44.180]  такой вопрос.
[03:29:44.180 --> 03:29:47.180]  Кроме чего?
[03:29:47.180 --> 03:29:50.180]  А, на мотлоге все логично.
[03:29:50.180 --> 03:29:54.180]  Да, мотлог понятен, он нужен для того, чтобы на
[03:29:54.180 --> 03:29:58.180]  насталих предметах была хоть логическая связанность.
[03:29:58.180 --> 03:30:02.180]  Ну да, не, ну пойдите, там на батарее не возникает,
[03:30:02.180 --> 03:30:06.180]  господи, зачем нам эти интегралы вообще нужны?
[03:30:06.180 --> 03:30:11.180]  А чтобы обращать производную, зачем нужно производную?
[03:30:11.180 --> 03:30:15.180]  Ну а наш вот так, чтобы касательно искать…
[03:30:15.180 --> 03:30:19.180]  Ну да, нет, ну там везде, на самом деле.
[03:30:19.180 --> 03:30:21.180]  Нет, хотя нет, в этом смысле да, потому что кто-то так
[03:30:21.180 --> 03:30:24.180]  расстраивается, что там, допустим… Нет, на самом деле, если
[03:30:24.180 --> 03:30:26.180]  серьезно, на самом деле есть, и тогда бывает грустно,
[03:30:26.180 --> 03:30:28.180]  что вот вы там, допустим, физику не учите, на самом деле
[03:30:28.180 --> 03:30:31.180]  в физике там действительно многое возникает, зачем это
[03:30:31.180 --> 03:30:37.180]  все, где вообще-то надо, хотя вот да, нет, не вот это.
[03:30:37.180 --> 03:30:40.180]  Нет, к сожалению, в физике нет, максимум, да, где-то
[03:30:40.180 --> 03:30:42.180]  рядом в биологии может быть анализ ДНК, и там
[03:30:42.180 --> 03:30:45.180]  каких-то тут угорит мы на строчках, но и то там.
[03:30:45.180 --> 03:30:48.180]  Ну это все, конечно, да, но ладно, математика – вещь такая.
[03:30:48.180 --> 03:30:51.180]  Вот так вот, значит, есть у нас, значит, есть у нас
[03:30:51.180 --> 03:30:56.180]  наше ребро, соответственно, ведет в серую вершину, значит,
[03:30:56.180 --> 03:31:02.180]  это оно именно в этом направлении рыжая, и поэтому именно,
[03:31:02.180 --> 03:31:06.180]  значит, поэтому, значит, нет, надо сделать две вещи.
[03:31:06.180 --> 03:31:11.180]  Во-первых, про апдейтить аптайм, не забываем, аптайм
[03:31:11.180 --> 03:31:20.180]  в общем, про апдейтить именно таймином, таймин от У,
[03:31:20.180 --> 03:31:25.180]  но и совершенно верно, st.push этого ребра.
[03:31:29.180 --> 03:31:32.180]  Да, нет, надо красненьким это все-таки написать.
[03:31:36.180 --> 03:31:39.180]  Вот, обработали.
[03:31:39.180 --> 03:31:44.180]  Да, а если это ребро прямое, и мы его рассматриваем
[03:31:44.180 --> 03:31:46.180]  как прямое, то ничего делать не надо.
[03:31:46.180 --> 03:31:53.180]  Так, ну и в общем-то все, остается только в конце объявить
[03:31:53.180 --> 03:31:58.180]  тайм-аут, хотя самое смешное, что тайм-аут можно не объявлять.
[03:31:58.180 --> 03:32:02.180]  Да, таймином нам на самом деле достаточно, но объявить
[03:32:02.180 --> 03:32:04.180]  вершину черной нам, конечно, надо.
[03:32:05.180 --> 03:32:12.180]  Color от V равно EDFS black, наконец-то в соответствии с цветом.
[03:32:12.180 --> 03:32:14.180]  Так, да, все.
[03:32:16.180 --> 03:32:18.180]  Так, ну что ж, поздравляю.
[03:32:18.180 --> 03:32:20.180]  Мы нашли компоненты.
[03:32:20.180 --> 03:32:24.180]  А, вот я тут забыл еще важную там еще строчку.
[03:32:24.180 --> 03:32:35.180]  Там вот, да, save, save-comp sqvd.
[03:32:41.180 --> 03:32:44.180]  Ну, типа сохранить vector-comp как компоненты вершин
[03:32:44.180 --> 03:32:45.180]  двухсвязи.
[03:32:45.180 --> 03:32:48.180]  Вот, то есть в принципе получается действительно так,
[03:32:48.180 --> 03:32:50.180]  и доказательства, в общем-то, примерно такое же.
[03:32:50.180 --> 03:32:53.180]  Именно вот для этого мы доказывали, что если мы вышли
[03:32:53.180 --> 03:32:55.180]  из компоненты, то мы в нее там, в поддеревье, уже не
[03:32:55.180 --> 03:32:56.180]  вернемся.
[03:32:56.180 --> 03:33:00.180]  Вот, и в поддеревье, и там в будущих каких-то деревьях.
[03:33:00.180 --> 03:33:02.180]  Поэтому как бы мы тут действительно можно аккуратно
[03:33:02.180 --> 03:33:05.180]  все добавляем, но как бы если мы вошли, то есть выйти
[03:33:05.180 --> 03:33:07.180]  из компоненты там, в поддеревье, можем только через корневое
[03:33:07.180 --> 03:33:08.180]  ребро.
[03:33:08.180 --> 03:33:11.180]  Соответственно потому что, ну вот, потому что одновременно
[03:33:11.180 --> 03:33:14.180]  мы замечаем, что корневое ребро это первое ребро
[03:33:14.180 --> 03:33:17.180]  компоненты вершины двухсвязи, которое вообще попало в
[03:33:17.180 --> 03:33:18.180]  ДФС.
[03:33:18.180 --> 03:33:19.180]  Видите, да?
[03:33:19.180 --> 03:33:21.180]  Которое ДФС вообще увидел.
[03:33:21.180 --> 03:33:24.180]  Поэтому, действительно, ну вот, поэтому там вот
[03:33:24.180 --> 03:33:26.180]  действительно про каждый компонент все это по индукции
[03:33:26.180 --> 03:33:28.180]  говорит, что есть компоненты, есть то, что на ней висит,
[03:33:28.180 --> 03:33:31.180]  и просто по индукции аккуратненько доказывается, что все,
[03:33:31.180 --> 03:33:34.180]  что на ней висело, оно бы, оно, собственно, из стека
[03:33:34.180 --> 03:33:36.180]  удалилось, поэтому, ну вот.
[03:33:36.180 --> 03:33:38.180]  А вот эти вот серебра, в том числе обратные, которые
[03:33:38.180 --> 03:33:40.180]  тут лежат, они тут тоже останутся.
[03:33:40.180 --> 03:33:43.180]  Вот.
[03:33:43.180 --> 03:33:46.180]  Остается только, значит, смотрите, остается только
[03:33:46.180 --> 03:33:53.180]  вопрос, как найти точные сочленения?
[03:33:53.180 --> 03:33:57.180]  Ну да, есть, конечно, метод имени удаления мостов.
[03:33:57.180 --> 03:34:00.180]  Ну, то есть, видно потом в тупую пробежаться и посмотреть,
[03:34:00.180 --> 03:34:04.180]  какая вершина принадлежит больше, чем одной компоненте.
[03:34:04.180 --> 03:34:09.180]  Но этого, конечно, не нужно делать.
[03:34:09.180 --> 03:34:12.180]  Потому что, на самом деле, тут утверждение очень простое.
[03:34:12.180 --> 03:34:14.180]  Ну, тут, конечно, правда, с подлянкой.
[03:34:14.180 --> 03:34:18.180]  Обычно, если вам где-нибудь там в какой-нибудь ЛКШ
[03:34:18.180 --> 03:34:21.180]  или там где-нибудь еще.
[03:34:21.180 --> 03:34:22.180]  Вот.
[03:34:22.180 --> 03:34:27.180]  Или там в любом другом Тинько Яндексе что-нибудь рассказывали.
[03:34:27.180 --> 03:34:28.180]  Вот.
[03:34:28.180 --> 03:34:29.180]  Ну хорошо, да.
[03:34:29.180 --> 03:34:31.180]  Ну и Сириус тоже, да.
[03:34:31.180 --> 03:34:32.180]  Нет, ну мало ли.
[03:34:32.180 --> 03:34:33.180]  Вот.
[03:34:33.180 --> 03:34:35.180]  Нет, ну это могли рассказывать, господи, хотя некоторые алгоритмы,
[03:34:35.180 --> 03:34:39.180]  возможно, вы слушали по нескольку раз.
[03:34:39.180 --> 03:34:41.180]  Не успели?
[03:34:41.180 --> 03:34:43.180]  Не успели, что ли, Яндекс?
[03:34:43.180 --> 03:34:45.180]  Мы выписались, да.
[03:34:45.180 --> 03:34:48.180]  А как появился?
[03:34:48.180 --> 03:34:49.180]  О, Яндекс.
[03:34:49.180 --> 03:34:51.180]  Я поэтому называю Тинько Яндекс.
[03:34:51.180 --> 03:34:53.180]  Потому что до этого он был Тинькофом, да.
[03:34:53.180 --> 03:34:54.180]  Вот.
[03:34:54.180 --> 03:34:56.180]  Понятно, что Яндекс вам уже ничего не рассказали.
[03:34:56.180 --> 03:34:59.180]  Но как бы, как бы я скажу, команда была та же.
[03:34:59.180 --> 03:35:00.180]  Вот.
[03:35:00.180 --> 03:35:03.180]  Надо ее Тинько Яндексом называть, чтобы там было понятно.
[03:35:03.180 --> 03:35:04.180]  Вот.
[03:35:04.180 --> 03:35:05.180]  Ну вот.
[03:35:05.180 --> 03:35:07.180]  Но там, скорее всего, просто говорили.
[03:35:07.180 --> 03:35:09.180]  Как искать точку осуществления?
[03:35:09.180 --> 03:35:11.180]  Не знаю, правда, как это доказывали.
[03:35:11.180 --> 03:35:12.180]  Хотя нет.
[03:35:12.180 --> 03:35:15.180]  Самое смешное, что там алгоритм можно без всего этого доказать.
[03:35:15.180 --> 03:35:18.180]  Но из нашего уже и так очевидно, что, в общем-то...
[03:35:18.180 --> 03:35:21.180]  Ну, то есть удержание такое, что, наверное, там...
[03:35:21.180 --> 03:35:22.180]  Ну, во-первых, так.
[03:35:22.180 --> 03:35:23.180]  Тут, конечно, есть разница все-таки.
[03:35:23.180 --> 03:35:25.180]  Есть вершина корень дерева или не корень.
[03:35:25.180 --> 03:35:27.180]  Корень глобального дерева.
[03:35:27.180 --> 03:35:30.180]  То есть если вершина корень, то тут все просто.
[03:35:30.180 --> 03:35:35.180]  На точку осуществления тогда и только тогда, когда действительно у нее нот...
[03:35:35.180 --> 03:35:40.180]  Когда у нее хотя бы два нотка.
[03:35:40.180 --> 03:35:41.180]  Ну, скажем так.
[03:35:41.180 --> 03:35:45.180]  Когда из нее торчит хотя бы два корневых ребра.
[03:35:45.180 --> 03:35:51.180]  То есть, по сути, она два раза пошла вот в этот ДФС.
[03:35:51.180 --> 03:35:52.180]  Хотя...
[03:35:52.180 --> 03:35:53.180]  Ладно, вру.
[03:35:53.180 --> 03:35:54.180]  Нет, ну ладно.
[03:35:54.180 --> 03:35:55.180]  Там...
[03:35:55.180 --> 03:35:56.180]  Ну, точнее так.
[03:35:56.180 --> 03:36:00.180]  Просто любое ребро, по которому оно пошло из корня, это по-любому корневое ребро.
[03:36:00.180 --> 03:36:01.180]  Правда?
[03:36:01.180 --> 03:36:02.180]  Да.
[03:36:02.180 --> 03:36:04.180]  То есть там просто фишка будет в том, что если это не точка осуществления,
[03:36:04.180 --> 03:36:06.180]  то мы из вершины пойдем по одному ребру.
[03:36:06.180 --> 03:36:11.180]  И в общем-то тут уже все обойдем, потому что без этой вершины тут уже отсюда можно дойти по белым путям.
[03:36:11.180 --> 03:36:12.180]  Вот.
[03:36:12.180 --> 03:36:14.180]  То есть, поэтому, если это так, то да.
[03:36:14.180 --> 03:36:16.180]  Если это нет, то значит мы одну компоненту обойдем.
[03:36:16.180 --> 03:36:17.180]  Придется вторую идти.
[03:36:17.180 --> 03:36:22.180]  Поэтому просто у корня, если там хотя бы два раза же не удовлетворяется, значит точного соединения нет.
[03:36:22.180 --> 03:36:23.180]  Нет.
[03:36:23.180 --> 03:36:29.180]  В любом ином случае тогда у любой другой вершины есть такая компонента...
[03:36:29.180 --> 03:36:33.180]  Значит, есть ребро, которое ведет в родителей компонента, связанная с ним.
[03:36:33.180 --> 03:36:34.180]  Да.
[03:36:34.180 --> 03:36:36.180]  И может быть какие-то другие.
[03:36:36.180 --> 03:36:41.180]  Но, очевидно, другие могут быть только, если из нее торчит какое-то корневое ребро вниз.
[03:36:41.180 --> 03:36:42.180]  Ну вот.
[03:36:42.180 --> 03:36:43.180]  Да.
[03:36:43.180 --> 03:36:45.180]  Как мы определяем, что ребро корневое?
[03:36:45.180 --> 03:36:47.180]  Ой, точно.
[03:36:47.180 --> 03:36:49.180]  Господи, самое важное забыли, да.
[03:36:49.180 --> 03:36:52.180]  А как мы, собственно, вот это-то определяем?
[03:36:52.180 --> 03:36:56.180]  Как определить, является ли ребро корневым?
[03:36:56.180 --> 03:37:00.180]  Видимо, надо посмотреть, если есть В и У, У типа ниже.
[03:37:00.180 --> 03:37:03.180]  Тогда у нас пытается проверить, что off-time от У.
[03:37:03.180 --> 03:37:05.180]  Да.
[03:37:07.180 --> 03:37:10.180]  Да, наоборот, В и У.
[03:37:10.180 --> 03:37:14.180]  Да, как понять, чем отличается корневое ребро от не корневого?
[03:37:14.180 --> 03:37:16.180]  Получается меньше...
[03:37:16.180 --> 03:37:18.180]  Либрайн В?
[03:37:18.180 --> 03:37:19.180]  Угу.
[03:37:19.180 --> 03:37:21.180]  Нет, больше правильная.
[03:37:21.180 --> 03:37:23.180]  Ну да.
[03:37:23.180 --> 03:37:25.180]  Потому что может быть ближе.
[03:37:25.180 --> 03:37:27.180]  Так, ну да.
[03:37:27.180 --> 03:37:29.180]  Нет, ну давайте так.
[03:37:29.180 --> 03:37:31.180]  Я просто напишу это утверждение.
[03:37:31.180 --> 03:37:35.180]  Просто мистическая, даже может быть, уже теорема.
[03:37:35.180 --> 03:37:37.180]  Там пусть У.
[03:37:37.180 --> 03:37:39.180]  Я тут даже напишу зачем-то.
[03:37:39.180 --> 03:37:43.180]  Пусть У именно ребёнок В.
[03:37:43.180 --> 03:37:47.180]  В дереве DFS.
[03:37:47.180 --> 03:37:55.180]  Тогда это ребро В и У.
[03:37:55.180 --> 03:37:59.180]  Тогда ребро В и У.
[03:37:59.180 --> 03:38:05.180]  Значит, корневое...
[03:38:05.180 --> 03:38:11.180]  Корневое В, соответственно, в КВД.
[03:38:11.180 --> 03:38:13.180]  Ну вот, так сказать.
[03:38:13.180 --> 03:38:15.180]  Теперь можно об этом говорить.
[03:38:15.180 --> 03:38:17.180]  Тогда и только тогда.
[03:38:20.180 --> 03:38:22.180]  Когда?
[03:38:30.180 --> 03:38:32.180]  Да, таймы на этот раз от В.
[03:38:32.180 --> 03:38:35.180]  Потому что на этот раз обратите внимание...
[03:38:35.180 --> 03:38:40.180]  То есть на этот раз обратите внимание, какой там обратное ребро ведущее.
[03:38:40.180 --> 03:38:43.180]  То есть ведущее как раз вот куда-нибудь вот сюда.
[03:38:43.180 --> 03:38:45.180]  Сюда нас вполне устроит.
[03:38:45.180 --> 03:38:47.180]  Вот.
[03:38:47.180 --> 03:38:49.180]  Да, да, да.
[03:38:49.180 --> 03:38:51.180]  То есть доказательство очень простое.
[03:38:51.180 --> 03:38:53.180]  Что если оно корневое...
[03:38:53.180 --> 03:38:55.180]  То есть суть такая.
[03:38:55.180 --> 03:38:57.180]  Что на самом деле утверждение такое,
[03:38:57.180 --> 03:38:59.180]  что пусть у нас есть ребро...
[03:38:59.180 --> 03:39:01.180]  Ну, во-первых, так.
[03:39:01.180 --> 03:39:03.180]  Если оно в дереве DFS...
[03:39:03.180 --> 03:39:07.180]  То есть если В корень, то как бы всё очевидно.
[03:39:07.180 --> 03:39:09.180]  Ну, оно просто любое.
[03:39:09.180 --> 03:39:12.180]  Потому что любое ребро DFS корня,
[03:39:12.180 --> 03:39:14.180]  оно по-любому корневое.
[03:39:14.180 --> 03:39:16.180]  В своей КВД.
[03:39:16.180 --> 03:39:18.180]  Это мы уже выяснили.
[03:39:18.180 --> 03:39:20.180]  А теперь пусть ребро ВУ не корневое.
[03:39:20.180 --> 03:39:22.180]  Тогда утверждение такое.
[03:39:22.180 --> 03:39:24.180]  Как мы уже увиделись.
[03:39:24.180 --> 03:39:26.180]  Ребро ВУ лежит в одной...
[03:39:26.180 --> 03:39:28.180]  Оно корневое тогда и только тогда,
[03:39:28.180 --> 03:39:30.180]  когда оно не лежит в одной компоненте
[03:39:30.180 --> 03:39:32.180]  с родительским ребром В.
[03:39:32.180 --> 03:39:34.180]  Правда?
[03:39:34.180 --> 03:39:36.180]  Но эти два ребра лежат в одной компоненте
[03:39:36.180 --> 03:39:38.180]  в вершине до связности.
[03:39:38.180 --> 03:39:40.180]  Тогда и только тогда,
[03:39:40.180 --> 03:39:42.180]  когда обратное ребро из-под дерева У
[03:39:42.180 --> 03:39:44.180]  куда-то выше В.
[03:39:44.180 --> 03:39:46.180]  То есть когда аптайм от У меньше
[03:39:46.180 --> 03:39:48.180]  строго на этот раз,
[03:39:48.180 --> 03:39:50.180]  чем таймы над В.
[03:39:50.180 --> 03:39:52.180]  Видите, да?
[03:39:52.180 --> 03:39:54.180]  То есть обратите внимание,
[03:39:54.180 --> 03:39:56.180]  это более слабое условие,
[03:39:56.180 --> 03:39:58.180]  чем то, что это ребромост.
[03:39:58.180 --> 03:40:00.180]  То есть мост требует,
[03:40:00.180 --> 03:40:02.180]  что обратные ребра выше вершины У
[03:40:02.180 --> 03:40:04.180]  не высовываются.
[03:40:04.180 --> 03:40:06.180]  А то, что это корневое ребро,
[03:40:06.180 --> 03:40:08.180]  для этого достаточно,
[03:40:08.180 --> 03:40:10.180]  потому что у тебя просто на равенство.
[03:40:10.180 --> 03:40:12.180]  На равенство?
[03:40:12.180 --> 03:40:14.180]  Да, они должны быть в одной компоненте.
[03:40:14.180 --> 03:40:16.180]  Ребро тогда...
[03:40:20.180 --> 03:40:22.180]  Нет, чего? Где? Почему на равенство?
[03:40:22.180 --> 03:40:24.180]  Аптайм от У... Нет, почему?
[03:40:24.180 --> 03:40:26.180]  Если ребромост, то аптайм будет строго
[03:40:26.180 --> 03:40:28.180]  больше. Да.
[03:40:28.180 --> 03:40:30.180]  Так что на равенство.
[03:40:30.180 --> 03:40:32.180]  Поэтому так. Но я говорю, у меня
[03:40:32.180 --> 03:40:34.180]  еще тут фишка, что у меня...
[03:40:34.180 --> 03:40:36.180]  Я тут стер, но хотя я тут должен написать,
[03:40:36.180 --> 03:40:38.180]  что...
[03:40:38.180 --> 03:40:40.180]  Тут я еще должен написать, что
[03:40:40.180 --> 03:40:42.180]  аптайм от В равно плюс бесконечность,
[03:40:42.180 --> 03:40:44.180]  напоминаю.
[03:40:46.180 --> 03:40:48.180]  Вот. Поэтому точные сочления,
[03:40:48.180 --> 03:40:50.180]  я тут не буду сейчас вставлять в код,
[03:40:50.180 --> 03:40:52.180]  на самом деле можно найти и внутри этого кода тоже.
[03:40:52.180 --> 03:40:54.180]  Нет, в принципе,
[03:40:54.180 --> 03:40:56.180]  это действительно, на самом деле, да.
[03:40:56.180 --> 03:40:58.180]  То есть там действительно возникает интересная задача.
[03:40:58.180 --> 03:41:00.180]  Вот.
[03:41:00.180 --> 03:41:02.180]  Ну, потому что, да, вот кто-то уже упоминал,
[03:41:02.180 --> 03:41:04.180]  потому что там часто иногда бывает, что
[03:41:04.180 --> 03:41:06.180]  можно на самом деле...
[03:41:06.180 --> 03:41:08.180]  То есть если рассматривать так компоненты,
[03:41:08.180 --> 03:41:10.180]  то действительно
[03:41:10.180 --> 03:41:12.180]  будет получаться действительно такое
[03:41:12.180 --> 03:41:14.180]  пухленькие снеговички такие, связанные
[03:41:14.180 --> 03:41:16.180]  между собой.
[03:41:16.180 --> 03:41:18.180]  Ну, вот такой вот. Ну ладно.
[03:41:18.180 --> 03:41:20.180]  Вот. Ну вот такой.
[03:41:22.180 --> 03:41:24.180]  Вот.
[03:41:24.180 --> 03:41:26.180]  Да.
[03:41:26.180 --> 03:41:28.180]  Ночебурашка тоже.
[03:41:28.180 --> 03:41:30.180]  Ну а что?
[03:41:30.180 --> 03:41:32.180]  Вот.
[03:41:32.180 --> 03:41:34.180]  Нет, ну шо покляк.
[03:41:40.180 --> 03:41:42.180]  Не, ну ладно.
[03:41:42.180 --> 03:41:44.180]  Это уже какой-то странный чебурашка, конечно, да.
[03:41:44.180 --> 03:41:46.180]  Вот.
[03:41:46.180 --> 03:41:48.180]  Не, ладно. И так уже тут шейка какая-то
[03:41:48.180 --> 03:41:50.180]  странная, да.
[03:41:50.180 --> 03:41:52.180]  Такой жирафик, да.
[03:41:52.180 --> 03:41:54.180]  Да-да-да.
[03:41:54.180 --> 03:41:56.180]  Вот.
[03:41:56.180 --> 03:41:58.180]  Да-да-да.
[03:41:58.180 --> 03:42:00.180]  Вот.
[03:42:00.180 --> 03:42:02.180]  Нет, жираф
[03:42:02.180 --> 03:42:04.180]  тут реально какие-то ноги рисовать надо, да.
[03:42:04.180 --> 03:42:06.180]  Бамбуковые. Вот.
[03:42:06.180 --> 03:42:08.180]  Бамбуковые ноги, да.
[03:42:08.180 --> 03:42:10.180]  Ладно. Ну вот. То есть в принципе это
[03:42:10.180 --> 03:42:12.180]  действительно так выглядит.
[03:42:12.180 --> 03:42:14.180]  Ну ладно, скорее вот так, наверное.
[03:42:14.180 --> 03:42:16.180]  Вот.
[03:42:16.180 --> 03:42:18.180]  Но просто фишка в том, что действительно
[03:42:18.180 --> 03:42:20.180]  на самом деле иногда, то есть можно иногда прям
[03:42:20.180 --> 03:42:22.180]  в явном виде на самом деле построить
[03:42:22.180 --> 03:42:24.180]  какие ноты. То есть построить
[03:42:24.180 --> 03:42:26.180]  какой-то такой двудольный граф, в котором
[03:42:26.180 --> 03:42:28.180]  в одной доле находятся вершины,
[03:42:28.180 --> 03:42:30.180]  а в другой как бы компоненты вершины
[03:42:30.180 --> 03:42:32.180]  двусвязности.
[03:42:32.180 --> 03:42:34.180]  Чего?
[03:42:34.180 --> 03:42:36.180]  Значит вот такой объект. Рассмотрим
[03:42:36.180 --> 03:42:38.180]  двудольный граф, в котором
[03:42:38.180 --> 03:42:40.180]  лежат в одной доле
[03:42:40.180 --> 03:42:42.180]  вершины исходного графа, а в другой
[03:42:42.180 --> 03:42:44.180]  компоненты вершины двусвязности.
[03:42:44.180 --> 03:42:46.180]  Тогда кажется, что
[03:42:46.180 --> 03:42:48.180]  во-первых, через этот граф дерева будет.
[03:42:48.180 --> 03:42:50.180]  Да, соединяем вершину
[03:42:50.180 --> 03:42:52.180]  с там, проводим ребро
[03:42:52.180 --> 03:42:54.180]  между вершиной исходного графа и компонентой,
[03:42:54.180 --> 03:42:56.180]  если эта вершина к ней имеет отношение.
[03:42:56.180 --> 03:42:58.180]  Ну то есть инцидент на какому-то ребру
[03:42:58.180 --> 03:43:00.180]  из этой компоненты вершины двусвязности.
[03:43:00.180 --> 03:43:02.180]  Тогда легко убедиться, во-первых,
[03:43:02.180 --> 03:43:04.180]  что это дерево.
[03:43:04.180 --> 03:43:06.180]  Вот.
[03:43:06.180 --> 03:43:08.180]  Ну в качестве упражнений оставим.
[03:43:08.180 --> 03:43:10.180]  Ну кстати, там Тарьян вообще сидел, доказывал, что там
[03:43:10.180 --> 03:43:12.180]  какие-то это, что любые компоненты
[03:43:12.180 --> 03:43:14.180]  вершины двусвязности две, допустим,
[03:43:14.180 --> 03:43:16.180]  имеют не более чем одну общую вершину.
[03:43:18.180 --> 03:43:20.180]  Ну да, ну скажи,
[03:43:20.180 --> 03:43:22.180]  само общее упражнение очевидно,
[03:43:22.180 --> 03:43:24.180]  но как бы там, видимо, потребовалось его
[03:43:24.180 --> 03:43:26.180]  явно сформулировать.
[03:43:26.180 --> 03:43:28.180]  Вот.
[03:43:28.180 --> 03:43:30.180]  Ну это нормально.
[03:43:30.180 --> 03:43:32.180]  Ну там, не помню, не важно.
[03:43:32.180 --> 03:43:34.180]  Вот, значит, ну вот.
[03:43:34.180 --> 03:43:36.180]  Во-первых, вот этот граф вдоль будет, во-первых, деревом.
[03:43:38.180 --> 03:43:40.180]  Ну а во-вторых, там в нем, в этом дереве
[03:43:40.180 --> 03:43:42.180]  можно, ну вот.
[03:43:42.180 --> 03:43:44.180]  Ну во-вторых, да, там вершина является точкой сочленения,
[03:43:44.180 --> 03:43:46.180]  допустим, тогда и только тогда, когда она,
[03:43:46.180 --> 03:43:48.180]  когда там, в вдвудольном графе
[03:43:48.180 --> 03:43:50.180]  она не висяча.
[03:43:52.180 --> 03:43:54.180]  Внезапно, да?
[03:43:54.180 --> 03:43:56.180]  Вот.
[03:43:58.180 --> 03:44:00.180]  Ну и оказывается, да.
[03:44:00.180 --> 03:44:02.180]  Ну и там, ну я не знаю, там, отдельная
[03:44:02.180 --> 03:44:04.180]  песня вообще, там, слета не скажу,
[03:44:04.180 --> 03:44:06.180]  но, например, там, но иногда вот это
[03:44:06.180 --> 03:44:08.180]  дерево как-то полезно воображать, потому что там вот
[03:44:08.180 --> 03:44:10.180]  во всех задачах, где возникают компоненты
[03:44:10.180 --> 03:44:12.180]  вершины двусвязности, иногда полезно воображать. Правда, я не помню,
[03:44:12.180 --> 03:44:14.180]  струту с дочью, в которой его надо реально кудить.
[03:44:14.180 --> 03:44:16.180]  Вот.
[03:44:16.180 --> 03:44:18.180]  Хотя там может...
[03:44:18.180 --> 03:44:20.180]  Мэр.
[03:44:20.180 --> 03:44:22.180]  Пример-министр.
[03:44:22.180 --> 03:44:24.180]  Пример-министр, да.
[03:44:24.180 --> 03:44:26.180]  Так, ну...
[03:44:26.180 --> 03:44:28.180]  Два вершины не пресекающихся пути
[03:44:28.180 --> 03:44:30.180]  между двумя вершинами.
[03:44:30.180 --> 03:44:32.180]  Так.
[03:44:32.180 --> 03:44:34.180]  Так, два не пресекающихся пути,
[03:44:34.180 --> 03:44:36.180]  буквально именно найти?
[03:44:36.180 --> 03:44:38.180]  Нет, ну...
[03:44:38.180 --> 03:44:40.180]  Нет, ну...
[03:44:40.180 --> 03:44:42.180]  Скажем так, да, да, ну...
[03:44:42.180 --> 03:44:44.180]  Ну, кстати, интересная задача, да,
[03:44:44.180 --> 03:44:52.060]  напиши поток и возрадуйся нет самое самое смешное что как бы тут надо еще придумать на этом
[03:44:52.060 --> 03:44:58.980]  основе решение которое по своей сути не окажется более сложной реализации потоков вот так ладно кто
[03:44:58.980 --> 03:45:06.620]  знает что такое поток вообще ну да ну без этого там это я знаю да потока это тот это продвинутый
[03:45:06.620 --> 03:45:13.220]  вот это основной вот это или там да поток а да вот это вот это когда в каждой точке вектор там
[03:45:13.220 --> 03:45:22.300]  вот это или там поток а но этот вот это insta instream out stream там вот это нет чего страшное не
[03:45:22.300 --> 03:45:27.260]  почему современное вот как бы сегодня после но сегодня на семинаре второкусники вообще узнают
[03:45:27.260 --> 03:45:32.180]  что поток это на самом деле а это вот это вот да когда компьютер одновременно несколько действий
[03:45:32.180 --> 03:45:40.420]  делают вот да то есть на самом деле так с этим вот я вытаскиваю как я все нет то есть нет только
[03:45:40.420 --> 03:45:44.500]  чисто программирование до слов поток можно перейти как threat можно перейти как stream можно
[03:45:44.500 --> 03:45:49.540]  перейти как flow да то есть в этом курсе мы будем изучать flow в прошлом году вы изучали что такое
[03:45:49.540 --> 03:45:55.220]  стрим в четвертом семестре а нет что в прошлом году в прошлом а вы давайте так вы уже на си плюс
[03:45:55.220 --> 03:46:04.780]  плюсе изучали стримы ну вот ну ладно возможно возможно сейчас покопать ну может там в один
[03:46:04.780 --> 03:46:11.700]  стандарт так что-то новое не знаю ну скорее что-то вели но вот и но вот так конечно и в четвертом
[03:46:11.700 --> 03:46:16.060]  семестре вас ждут соответственно стрелит там четвертом семестре в пятом тоже там будете
[03:46:16.060 --> 03:46:24.580]  работать уже с френдами вот так ладно так значит теперь да допустим давайте подумаем над задачей
[03:46:24.580 --> 03:46:30.500]  да так да не все знают ну кто значит такой поток хотя кто знает ладно может даже не может даже
[03:46:30.500 --> 03:46:39.060]  прямо спросить а кто когда-нибудь решал просто задачу улитки хотя самое смешное что задача
[03:46:39.060 --> 03:46:42.940]  буквально хотя нет самое страшное что задача буквально такая же не там просто данграв даны
[03:46:42.940 --> 03:46:51.620]  две вершины найдите между ними два реберна не пересекающихся пути нет там в тупой версии даже
[03:46:51.700 --> 03:47:00.620]  хотя но не дадут область по паре лайфхаков да так а мы сейчас а мы сейчас хотим именно вершины
[03:47:00.620 --> 03:47:10.020]  нет давайте так нет ладно есть тупая версия существует ли два хотя бы два пути да или нет
[03:47:10.020 --> 03:47:16.060]  да то есть тогда надо проверить лежат ли лежит вершины в одной компоненте как проверить
[03:47:16.060 --> 03:47:23.900]  но да то есть но вообще кстати это уже не тривиально потому что даже если мы построим
[03:47:23.900 --> 03:47:32.300]  наши двудольный граф там двудольный граф квд то как бы надо проверить верно ли что этим двумя у
[03:47:32.300 --> 03:47:39.140]  этих двух вершин там эти две вершины связаны там с одной компонентой вот кстати действительно
[03:47:39.140 --> 03:47:43.060]  интеллектуальная задача как это сделать как это сделать если одна из этих вершин не точка
[03:47:43.060 --> 03:47:51.060]  сучленения то конечно это сделать очень легко а если обе эти векшины точки сучленения то как бы
[03:47:51.060 --> 03:48:08.980]  так да вот так чтобы туда туда и туда
[03:48:13.060 --> 03:48:34.780]  а вопрос сколько это сколько таких векшин вывести а а вот и да так а да да если у нас а
[03:48:34.780 --> 03:48:44.260]  один один запрос нет да да да да ну согласен тогда в этом ну хотя по-разному
[03:48:44.260 --> 03:48:49.180]  смотреть давайте скажем о чем мы говорили да что есть у нас в исходной задачи хотя бы
[03:48:49.180 --> 03:48:53.980]  только один запрос то конечно там надо просто там проверить действительно лежат ли они в одной
[03:48:53.980 --> 03:48:58.020]  то есть для каждой вершины то есть проверить эти списки компонент рыбы вершины до связи
[03:48:58.020 --> 03:49:06.580]  которым они принадлежат проверить пересекаются ли они просто вот да да да да вот если да если
[03:49:06.580 --> 03:49:13.140]  много пар то то как бы да у нас да если если много пар то у нас проблема хотя конечно слет
[03:49:13.140 --> 03:49:18.700]  у меня возникает просто сразу ассоциация с корневухой стандартной но потому что утверждение нет
[03:49:18.700 --> 03:49:25.220]  смотрите утверждение такое допустим я но там тупое решение такое каждое каждый список компонент
[03:49:25.220 --> 03:49:32.020]  я записываю запишу хэшмап тогда идея такая у меня есть две вершины у каждой из них есть
[03:49:32.020 --> 03:49:37.860]  хэшмап вопрос пересекаются ли хэшмапы да теперь если у одного из этих хэшмапов размер меньше
[03:49:37.860 --> 03:49:43.260]  чем корень из н или там корень из е я пока там слету не знаю но пусть будет там корень это там
[03:49:43.260 --> 03:49:49.180]  да корень из е давайте пусть будет то а так это тогда я за корень из е в принципе пересечение
[03:49:49.180 --> 03:49:55.980]  проверил правда а теперь предположим что этих двух вершин значит списки больше чем корень из
[03:49:55.980 --> 03:50:05.540]  е вот тогда у меня неожиданная тупая идея тупая идея называется а заметим что таких вершин в
[03:50:05.540 --> 03:50:16.700]  принципе немного потому что если каждый из этих вершин но потому что но если каждый но скажем так
[03:50:16.700 --> 03:50:24.860]  смотрите ну давайте так смотрите количество каждой связи вершины и компоненты рюберной
[03:50:24.860 --> 03:50:30.660]  связи соответствует ребро в дудольном графе оно дерево следовательно этих связей не более
[03:50:30.660 --> 03:50:41.780]  чем даже не более чем ровно 2n минус 1 логично да значит 2н минус 1 вот значит да то есть
[03:50:42.740 --> 03:50:49.260]  то есть это но вот то есть этих связей значит что это означает это означает что значит ука значит то
[03:50:49.260 --> 03:50:52.540]  есть если мы просумируем каждый вершины количество связей то получится их суммарно
[03:50:52.540 --> 03:50:57.660]  сколько там 2н минус 1 следовательно если мы хотим разобрать вершины которые связаны с
[03:50:57.660 --> 03:51:02.180]  более чем корень из н компонентами значит их тоже не более чем там 2н минус 1 поделить на корень из
[03:51:02.180 --> 03:51:10.100]  это тоже от корня вот это дает нам возможность делать тупую вещь а давайте все такие пары вершин
[03:51:10.100 --> 03:51:17.140]  заранее переберем и предпочитаем для них ответ то есть предподсчет получится за что-то там где корни из
[03:51:17.140 --> 03:51:34.540]  вы ну да нет а посмотри какая нота нет ну да нет но есть у нас задача но там разрешет
[03:51:34.540 --> 03:51:41.340]  дай читам можно вычислить список да вы писать или там что-нибудь еще нет ну в принципе дайте я
[03:51:41.340 --> 03:51:46.420]  честно скажу да не смотря какая задача да то есть конечно есть у нас задача данные две вершины
[03:51:46.420 --> 03:52:16.420]  один запрос то вообще задачи не о чем да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да
[03:52:16.420 --> 03:52:24.660]  да да да да да да да да да да да да да да
[03:52:24.660 --> 03:52:30.100]  да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да да при возведении
[03:52:30.100 --> 03:52:36.840]  как это можно сделать ну например мы умеем там вообще-то за там какие-то за тупые предподсчеты
[03:52:36.840 --> 03:52:41.880]  там просто быстро расстояние между любыми двумя вершинами искать помните но типа глубина одной
[03:52:41.880 --> 03:52:48.520]  глубина второй минус там две глубины лцашки но в данном случае все еще тупее потому что на
[03:52:48.520 --> 03:52:53.320]  самом деле у вас там как бы две вершины нас а на самом деле друг от друга находится на расстоянии
[03:52:53.320 --> 03:53:00.780]  два только только в двух случаях первый случай у них общий родитель второй случай у родителя
[03:53:00.780 --> 03:53:11.140]  одной из них родитель это она все оба случая проверяются значит в одном графе берем родители
[03:53:11.140 --> 03:53:19.020]  там все вершины и вершины исходного графа вот а в другом акции про два минусом я наврал компонента
[03:53:19.020 --> 03:53:24.920]  а нет хотя нет компонент с не более чем и минус один да вот а в другой доле мы рисуем
[03:53:24.920 --> 03:53:34.140]  каждая вершина соответствует компоненте вершины до связности да ребер да чего каждой компоненте
[03:53:34.140 --> 03:53:42.100]  вот да и тогда вершина соединяется с компонентой если там в исходном графе она в ней там не имеет
[03:53:42.100 --> 03:53:49.300]  отношения то есть инцидент на ребру из этой компоненты вот так вот то есть если так проверить на
[03:53:49.300 --> 03:53:54.500]  расстоянии два это легко но в принципе да могла бы быть задача да классическая задача конечно
[03:53:54.500 --> 03:54:00.460]  такая веселая так что-то с ним гоняет никто ну ладно вот то есть данные две вершины в графе скажите
[03:54:00.460 --> 03:54:07.660]  то есть да то есть как бы мы хотим рассмотреть какие-то все пути от удове теперь возникает
[03:54:07.660 --> 03:54:12.740]  вопрос нам хочется найти все вершины через которые любой путь от удове точно пройдет
[03:54:12.740 --> 03:54:20.980]  ну хотя бы сколько их но утверждение такое да мистическое утверждение да заключается в том
[03:54:20.980 --> 03:54:27.980]  что да что надо посмотреть в этом вдольном графе компонент надо просто найти расстояние от удове
[03:54:27.980 --> 03:54:33.500]  поделить его пополам и более того все а если надо сами вершины найти то надо просто на этом
[03:54:34.260 --> 03:54:42.100] hil exit там все вершины вывести вот потому что что этот путь там что этот путь будет означать
[03:54:42.100 --> 03:54:49.020]  пока вот если вот это вот типа компоненты то есть ну суть будет такая что компоненты то есть
[03:54:49.020 --> 03:54:52.900]  на самом деле значит получается они будут просто зацеплены друг за друга вот таким вот образом
[03:54:52.900 --> 03:55:01.240]  понимаете да вот и ну вот и тогда получается но и тогда может быть не совсем очевидно
[03:55:01.240 --> 03:55:05.200]  очевидно, но там можно подумать, аккуратно доказать, что действительно, во-первых,
[03:55:05.200 --> 03:55:10.960]  что действительно путь обязан пройти через вот эту точку, значит, потом по этой компоненте
[03:55:10.960 --> 03:55:15.400]  прийти вот эту точку, потом через вот этой компонент прийти эту точку и так далее.
[03:55:15.400 --> 03:55:23.880]  Внутри отсюда-сюда можно дойти без любой вершины, тут внутри без проблем. Вот, но без этих мы уже
[03:55:23.880 --> 03:55:29.320]  не обойдемся. На самом деле можно себе воображать это и так. Смотрите, как естественно рассмотреть путь,
[03:55:29.320 --> 03:55:34.080]  то есть на самом деле можно рассмотреть как минимум путь в дереве DFS. Вот жила была тут вершина U,
[03:55:34.080 --> 03:55:43.760]  тут вершина V, допустим, и мы, допустим, отсюда-сюда просто по дереву DFS идем. То есть когда-то мы идем по
[03:55:43.760 --> 03:55:48.560]  компоненте, но когда-то эта компонента меняется. Но меняется она навсегда, и у нас получается
[03:55:48.560 --> 03:55:53.880]  действительно такая цепочка. Вот, но на самом деле теперь остается только утверждение, что любой
[03:55:53.880 --> 03:56:01.840]  простой путь, во-первых, за пределы этой почте никуда не выйдет. Вот, ну, точнее там просто фишка будет
[03:56:01.840 --> 03:56:15.840]  в том, что действительно есть. Нет, по дереву тогда, но нам просто интересно, как выглядят другие пути.
[03:56:15.840 --> 03:56:27.200]  Ну может быть, да. Нет, ну там есть, там по-разному можно делать, можно прям
[03:56:27.200 --> 03:56:32.680]  честно через LCA так рассматривать, как они тут выглядят. То есть там какие-то вот эти
[03:56:32.680 --> 03:56:42.640]  вот развлечения начинаются. Ну ладно, там очень можно. А потому что в пути там будет путь такой
[03:56:42.640 --> 03:56:48.520]  вершина компонента, вершина компонента, вершина компонента, вершина, но там пополам может минус 1. Вот.
[03:56:48.520 --> 03:56:55.360]  Да, то есть такое можно решать очень там. Да, то есть если воображать, хотя бы воображать себе такое
[03:56:55.360 --> 03:57:02.720]  дерево, то можно много чего делать. Вот, так что да, тут разные задачи есть, конечно. Так, ну ладно,
[03:57:02.720 --> 03:57:08.680]  к сожалению, до уровня Hard мы сегодня не добрались. Хотя, не знаю, мне уже ощущение, что может быть это и был
[03:57:08.680 --> 03:57:14.200]  Hard, но нет, на самом деле почему будет Hard? Значит просто анонс, значит перейти двум
[03:57:14.200 --> 03:57:25.520]  мостик на следующий раз. Значит следующий раз, да, вот это все, спасибо огромное, сразу. Нет, нет, а этот тоже ваш? А, именно этот и ваш есть, да, да, да. Вот. Нет, смотрите, значит анонс на следующий раз,
[03:57:25.520 --> 03:57:30.880]  потому что следующий раз будем изучать компоненты сильной связности. Значит, мы попробуем применить ту же
[03:57:30.880 --> 03:57:38.120]  технологию, тоже искать, запускать DFS, искать корневые вершины, но фишка будет в том, но у нас будет
[03:57:38.120 --> 03:58:06.520]  проблема. Здесь мы сильно пользуемся тем, что у нас помимо дерева DFS есть только обратные рёбра, а там есть и другие. Да, ну прямые можно выкинуть, но с точки зрения сильной связности прямые рёбра можно выкинуть, а вот с обратными, а вот перекрёстные нет. И вот, и там много будет, там разные подляночки, ну и на этом мы соответственно, ну вот, и соответственно будем изучать. Но кажется, нас уже начинают выгонять, поэтому, вот, поэтому будем искать.
[03:58:08.120 --> 03:58:14.120]  ПРОДОЛЖЕНИЕ СЛЕДУЮЩЕГО ПОЛИЦЕЙСКОГО ВИДЕО
