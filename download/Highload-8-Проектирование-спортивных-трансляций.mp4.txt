[00:00.000 --> 00:11.520]  мы с вами остановились на мы мучились с вами с миграцией с диспетчерами и прочее прочее прочее
[00:11.520 --> 00:20.960]  байдой да у нас осталось несколько паттернов и потом собственно самое главное
[00:30.200 --> 00:31.720]  так давайте вспомним базы данных
[00:36.560 --> 00:40.240]  что мы умеем делать с базами данных как мы масштабируем
[00:40.240 --> 00:47.520]  это понятно спасибо как как именно
[00:47.520 --> 00:58.840]  паттерны окей основной шардирование дальше какие еще
[00:58.840 --> 01:08.960]  шардирование вы его делите на весь объем данных делите на кусочек шардирование у
[01:08.960 --> 01:16.400]  нас есть как бы под историях называемая центральный диспетчер экспорт с разделения
[01:16.400 --> 01:25.400]  наш арт это раз второй это некая функция от чего там от кого-то и дишника из этих
[01:25.400 --> 01:27.160]  от этих данных дальше что еще есть
[01:27.160 --> 01:36.000]  партиционирование да вспоминайте в чем разница
[01:36.000 --> 01:54.240]  нет здесь у нас есть еще тоже такой паттерн виртуальные шарды экспорт с разделения
[01:54.240 --> 02:04.160]  виртуальные шарды виртуальные шарды короче с протеша вернее все просто у вас есть блог
[02:04.160 --> 02:09.440]  данных он не влезает на одну машину по какой-то причине либо не успевает машина обрабатывать
[02:09.440 --> 02:16.480]  и так далее вы его режете на какие-то кусочки первый принцип разрезки некая функция например
[02:16.480 --> 02:22.280]  от айдишник этих данных вторая от некого центрального диспетчера эта функция возвращает
[02:22.280 --> 02:30.320]  вам что возвращает вам шахт где вы храните тот или иной кусочек данных второй центральный
[02:30.320 --> 02:34.200]  диспетчер ты у него быстренько спрашиваешь этот айдишник где хранится она тебе говорит куда
[02:34.200 --> 02:40.440]  хранится виртуальные шарды это мы вот сюда вставляем некий виртуальный слой то есть мы
[02:40.440 --> 02:47.320]  делим все наши данные изначально на очень большое количество кусочек то есть например у нас всего
[02:47.320 --> 02:53.080]  два сервера нам и все равно делим на 10 тысяч виртуальный шар а потом говорим что вот этот идет
[02:53.080 --> 02:58.760]  сюда вот этот набор виртуальных шартов идет на один а вот этот набор виртуальный шартов идет
[02:58.760 --> 03:03.160]  на другой это мы сделали для того чтобы нам потом вот легче было переносить и тусовать
[03:03.160 --> 03:11.920]  партизонирование что смысл да это мы делили на горячие холодные короче немножко другой
[03:11.920 --> 03:17.840]  принцип разделения данных то есть грубо говоря здесь вы режете вертикально здесь вы режете
[03:17.840 --> 03:26.680]  горизонтально ну то есть например вы берете новости и там горячие новости на одну машинку
[03:26.680 --> 03:36.280]  весь архив на другую машинку похоже немножко немножко разная немножко разная логика что
[03:36.280 --> 03:41.440]  ли да то есть как бы вот этого подхода по какому принципу вы разбиваете данные еще
[03:41.440 --> 04:00.280]  что начало репликация конечно репликация история простая вы пишете нам мастер отчитайте
[04:00.280 --> 04:11.000]  так называемый слоев пишите господина читайте с рабов так не толерантно да мастер слей
[04:11.000 --> 04:17.160]  репликация бывает мастер мастер репликация еще какие-то виды не суть важно важно то что у
[04:17.160 --> 04:23.640]  вас есть некий процесс база данных внутри организует этот процесс в том что она копируется
[04:23.640 --> 04:32.520]  с одной с некой главной машинке на второй зачем нам это нужно потому что у нас обычно
[04:32.520 --> 04:43.680]  чтение больше чем цепь так еще баздан что еще мы придумали давайте давайте давайте давайте
[04:43.680 --> 04:53.400]  проспорить меня получше сождаем тоже наспомнил функциональное разделение да ну это очень
[04:53.400 --> 05:05.000]  простая штука панельное разделение йогойка заключается в следующем вас разная данная почему
[05:05.000 --> 05:14.200]  бы не хранить разные данные в разных может быть даже в разных базах какие-то в ноутску или какие-то
[05:14.200 --> 05:22.120]  зашаргировать какие-то реплицировать и так далее зависит от их назначения еще
[05:30.800 --> 05:32.160]  и нормализация все верно
[05:44.200 --> 05:57.960]  все верно и просто не не нормализуешь данные классики бы вам сказали о том что ребята
[05:57.960 --> 06:03.080]  давайте нормализовывать и все будет хорошо хранить их правильно и так далее где нормализация ты
[06:03.080 --> 06:15.440]  их специально хранишь неправильно ты их не делаешь какие какие изменивает
[06:15.440 --> 06:36.040]  если ты их не нормализовал то это означает что тебе когда ты данные меняешь ты придется
[06:36.040 --> 06:43.480]  совершить больше работы зато тебе придется меньше работы совершать когда ты данные извлекаешь
[06:43.480 --> 06:52.200]  здесь же то есть называйте как угодно динормализация или не нормализация да то есть
[06:52.200 --> 07:03.520]  как бы без нормы или даже введение избыточности есть такой еще термин пример и избыточности то
[07:03.520 --> 07:10.680]  есть вы некоторые данные храните просто в нескольких и цепляем матрики база данных вы база
[07:10.760 --> 07:20.360]  данных исквельны вообще по чуть-чуть изучали проблога что-нибудь знаете обычно вы скольные
[07:20.360 --> 07:29.360]  таблички у вас данные фиксированного размера правильно но есть иногда такие такие блоки
[07:29.360 --> 07:37.160]  которые размер не фиксируем строка какая-нибудь не знаю заголовка вот она может быть от нуля до
[07:37.160 --> 07:47.840]  256 байк или тело статью вообще-то не знаю нуля до 64 килобайка вот так решил наш редактор
[07:47.840 --> 07:58.560]  может быть еще кое-что имя автора от нуля до 32 байка поехали да то есть как бы с числами все
[07:58.560 --> 08:07.520]  просто не знаю 2 8 10 тогда как вот такую строку хранит база в большинстве случаев
[08:07.520 --> 08:21.240]  что вы делаете да обычно она поступает очень тупо она просто берет считает максимум
[08:21.240 --> 08:30.240]  максимум и вот этот максимум выделяет под каждую строчку вы вот так вот все хранить
[08:30.240 --> 08:36.560]  либо какие-то значения еще что-то еще что-то с плавающей строкой либо выносит какие-то
[08:36.560 --> 08:45.880]  особенно длинные значения куда-то поддельное храняющие в любом случае это строка может
[08:45.880 --> 08:53.640]  быть длинной как баз данных работает диск два слова вы что-нибудь слышали про это знаете
[08:53.640 --> 09:02.240]  нет не было база данных общается с диском так называемым за туплыми просто некий блок
[09:02.240 --> 09:14.880]  по 8 килобайт например да позгас работает по 8 килобайт это означает что в 8 килобайт то
[09:14.880 --> 09:20.640]  есть когда и нужно считать одно запись она не считает одно запись она читает 8 килобайт всегда
[09:20.640 --> 09:26.800]  то есть когда читать эти минимум а дальше например если вы делаете какую-нибудь сложную выворку
[09:26.800 --> 09:34.160]  большую да там не знаю и не все у вас допустим в индексов с какими-нибудь фильтрасты и так далее
[09:34.160 --> 09:44.400]  она будет читать по 8 килобайт и даже если из каждых 8 килобайтного блока нужен один толпец
[09:44.400 --> 09:52.400]  для того чтобы фильтр сделать она будет читать все 8 килобайт там одна запись поднимется одна
[09:52.400 --> 09:59.360]  запись и в этой одной записи один столбик но все равно будет читать по 8 килобайт как с этим
[09:59.360 --> 10:06.360]  бороться да то есть это вызывает довольно негативные последствия в работе с базы
[10:06.360 --> 10:10.920]  данных тогда начнется работа базы данных если даже если вы программист все равно должны
[10:10.920 --> 10:18.520]  будете вместе читать так называемый план выполнения запроса база данных можно спросить вот я
[10:18.520 --> 10:25.880]  сконструировал запрос как собираешься выполнять и нам распишет как он собирается выполнить и нам
[10:25.880 --> 10:31.120]  могут быть такие опасные строчки что я типа собираюсь просканировать всю таблицу дорогой
[10:31.120 --> 10:36.280]  друг для того чтобы ответить на твой запрос это означает ну как бы это сам плохой вариант самый
[10:36.280 --> 10:46.360]  медленный вариант выполнения короче я к чему беду я беду провести пример введения избыточности
[10:46.360 --> 10:55.360]  ну например вам нужно делать какую-то систему фильтрации то есть у вас есть какое-то количество
[10:55.360 --> 11:02.480]  фильтров и куча различной информации что вы можете сделать ну вы можете повесить
[11:02.600 --> 11:08.400]  индекс конечно на каждый из кавказов которые будете искать по которым будете
[11:08.400 --> 11:15.080]  фильтров а можете поступить в трее можете взять и эту информацию по которую
[11:15.080 --> 11:21.440]  которая нужна для фильтров вынести в отдельную таблицу
[11:24.040 --> 11:31.760]  выносите подельную таблицу дублируйте и здесь потому что нужна информация полная по объекту
[11:31.760 --> 11:40.080]  и здесь и в таком случае здесь у вас неизвестная длина от не знаю записи килобайт а здесь у вас
[11:40.080 --> 11:45.200]  точно сфиксировано здесь только числовые значения которые нужны только для фильтров и здесь
[11:45.200 --> 11:53.160]  например-то мне не знаю 60 байт 60 байт влезает один тупл дофига и баз данных такой табличка
[11:53.160 --> 11:54.840]  быстрее чем с такой
[12:23.880 --> 12:32.160]  дожди ты не управляешь тем что читает она будет читать все 8 килобайт она будет читать все 8
[12:32.160 --> 12:39.600]  килобайта брать нужно кусочек вы читать блокс для работы так так устроена не только баз
[12:39.600 --> 12:45.440]  данных так операционка устроена и и работы с диском устроена и не будьте вычитывать кусочек
[12:45.440 --> 12:52.880]  они здесь читает блок сразу памяти все распакуют отдадут тебе кусочек с памяти поэтому вы как
[12:52.880 --> 12:58.400]  архитектор как программист разработчик высоконагружу системы вы должны читать и знать
[12:58.400 --> 13:03.800]  как работает внутри и операционка ваша если вы вот так вот сделаете да нам это все просто
[13:03.800 --> 13:11.240]  закширует у нее же есть какие-то буферы у баз данных вы когда ее настраивать и вы их говорить два
[13:11.240 --> 13:16.640]  мегабайта на такой это буфер два мегабайта такой два мегабайта такой просто взяли посчитали
[13:16.640 --> 13:26.120]  например у всего объема новостей если взять только цифрки какой бы объем данных получится
[13:26.120 --> 13:33.120]  быть небольшой потому что цифр их мало если вы к ней часто к этой таблице будете обращаться база
[13:33.120 --> 13:38.560]  данных это естественно понимает это естественно киширует вот это пример введения избыточности
[13:38.560 --> 13:43.960]  это такая не совершенно не рациональная логика вы берете и одни и те же данные храните два
[13:44.080 --> 13:52.000]  казалось бы у вас есть из коэль таблицы все с них хорошо ну нифига вот так будет работать быстрее
[14:02.680 --> 14:08.080]  ну не конечно она не выделяет под максим она скорее всего вынесет это вообще поддельное
[14:08.080 --> 14:14.720]  в отдельный этот так сделать указатель выложили поддельный кусочек с блобами и так
[14:14.720 --> 14:24.000]  далее все зависит от конкретно баз данных я не знаю как принцип такой дальше то есть варчара
[14:24.000 --> 14:32.440]  это плохо то что не позволяет работать с этой штукой нормально так окей хорошо с этим закончили
[14:32.440 --> 14:41.520]  вот баз данных 1 2 3 4 5 6 7 8 что у нас осталось у нас осталось совсем чуть-чуть
[14:41.520 --> 14:56.920]  нет почему у тебя для если ты знаешь что у тебя есть какой-то класс запрос нужно быстро
[14:56.920 --> 15:02.760]  вычислять ну типа вот вот идеальный пример фильтрации ты берешь все что касается фильтров
[15:02.760 --> 15:11.280]  например делаешь до некой длины если у тебя эти данные вот как раз большим количеством варчара
[15:11.280 --> 15:27.080]  да а потом ты уже для тех кого-то отфильтровал пойдешь вот в эту таблицу и по
[15:27.080 --> 15:34.200]  идишнику вытащишь полную строчку так будет быстрее чем фильтровать вытаскивает сразу
[15:43.520 --> 15:50.720]  понял принцип ты намеренно портишь структуру своей базы данных для того чтобы вытаскивать
[15:50.720 --> 15:58.640]  данные оттуда быстрее по идишнику выбор очень быстро всегда да по идишнику всегда выбор очень
[15:58.640 --> 16:09.080]  быстро здесь очень просто но все равно она тебя будет читать если у тебя айдишники если у тебя
[16:09.080 --> 16:17.120]  большая большой пайл из базы данных и ты вычисляешь ты берешь четыре значения по идишнику даже а
[16:17.280 --> 16:28.200]  эти вытаскивать будет не по одному а именно по 8 по 8 она будет находить тот тупол где лежит
[16:28.200 --> 16:36.600]  нужно тебе айдишник читать по 8 килобайт и поднимать но это все равно будет быстрее так
[16:36.600 --> 16:47.400]  блок нет blob это это что типа но это варча blob это просто
[16:47.400 --> 17:00.720]  кусок данных неограниченной длины что-то типа такого картинки можно хранить в базе данных при
[17:00.720 --> 17:10.200]  желании так то есть мы здесь с вами из широкой таблицы так называемая широкая таблица делаем
[17:10.200 --> 17:21.280]  узкую что у нас еще осталось как работает яндекс ребята из яндекса расскажите как поисковая
[17:21.320 --> 17:31.440]  я задаю вопрос запрос путин как будет выполняться мой запрос
[17:31.440 --> 17:38.520]  распарсили дальше
[17:38.520 --> 17:42.880]  чего построить
[17:46.880 --> 17:52.400]  с поисковым движком нет не так ну может быть и так детали но там неба
[17:57.680 --> 18:02.440]  вопрос под охом путину вообще сказать не будет путин 100 процентов закашировались
[18:02.440 --> 18:15.240]  путин и достанет из каша а ну например там я не знаю пт и главный корпус как
[18:15.240 --> 18:29.120]  будет хорошо сентябре возможно сейчас сейчас вряд ли да как будет выполняться запрос как
[18:29.160 --> 18:34.840]  вообще как вы думаете как вы предполагаете как устроен поисковый индекс январь
[18:40.520 --> 18:43.400]  какие есть предположения как выполняется этот запрос
[18:43.400 --> 18:56.440]  нет ну может быть я сейчас не про немножко не про это и видно что весь индекс на одну машину
[18:56.480 --> 19:02.160]  не влезает он влезает не знаю на 10 тысяч машин допустим
[19:09.720 --> 19:10.220]  ну да
[19:16.480 --> 19:22.480]  да примерно так но чуть посложнее то есть у вас есть и он огромного размера
[19:27.400 --> 19:33.120]  индекс некая обратная структура которая говорит о том что слова
[19:33.120 --> 19:40.680]  мть ии встречается в таких-то страницах на просторе интернета пола главный встречается
[19:40.680 --> 19:45.440]  в таких страницах на просторе интернет слово корм встречать на вас как тогда перс today
[19:47.780 --> 19:52.540]  overnight такой странички невозможно яндекции индексируют то есть scriptures
[19:52.540 --> 19:58.140]  содержимая страница, пытается понять в его семантику смысл, пытается понять, какие слова,
[19:58.140 --> 20:05.060]  что означают, к чему они привязаны и так далее, и строит обратный индекс. Слово страниц.
[20:05.060 --> 20:16.140]  Собственно говоря, в базе данных то же самое. Вы индексы что ли не проходили даже? Ну да,
[20:16.140 --> 20:31.140]  вы индексы проходили в базе данных. Точно такая же логика. То есть у вас есть ID-шник. И индекс
[20:31.140 --> 20:43.700]  позволяет быстро по этому ID-шнику, по некоторому дереву найти в листочке этого дерева конкретный
[20:43.700 --> 20:51.900]  адрес, физический адрес, где в файле базы данных лежит вот этот самый ID-шник. Индекс позволяет
[20:51.900 --> 21:01.420]  не перебирать все подряд, а найти очень быстро, чаще всего по бинарному дереву найти, где находится
[21:01.420 --> 21:08.300]  этот самый ID-шник физически и достать оттуда строку. Вот то же самое здесь. Только здесь слово,
[21:08.300 --> 21:17.460]  а в качестве значения все потенциальные места, где находится это слово. Соответственно, для того,
[21:17.460 --> 21:22.860]  чтобы сделать вот этот МФТИ главный корпус, нужно найти, где находится МФТИ, где лежит главный,
[21:22.860 --> 21:29.740]  где лежит корпус и попытаться это пересечь, а потом отранжировать. Но проблема в том,
[21:29.740 --> 21:39.260]  что индекс колоссальных размеров. Он просто гигантский. Его ни на один диск не записать.
[21:39.260 --> 21:48.780]  И к нему огромное количество запросов. Как с этим бороться? Скорее всего, я не знаю детально,
[21:48.780 --> 22:00.100]  но скорее всего сделано так. Он побит на какие-то кусочки. Отшаргировано. Каждый из этих кусочков
[22:00.100 --> 22:07.700]  вы не можете положить просто на один шар, потому что МФТИ главный корпус, а также любой другой
[22:07.700 --> 22:15.740]  запрос нужно искать в каждом из этих кусочков. То есть он как-то порезан. То есть это слово нужно
[22:15.740 --> 22:25.340]  искать везде. То есть нужно выполнить параллельное выполнение. Когда вы берете один запрос,
[22:25.340 --> 22:34.300]  выполняете его сразу на этих машинах. Потом склеиваете результат. Это одна машинка не справится
[22:34.300 --> 22:41.700]  со всем потоком запросов. Скорее всего, каждый кусочек индекса в Яндексе лежит на нескольких
[22:41.700 --> 22:50.500]  серверах. Абсолютно одинаково. И это какая-нибудь структура. Здесь я рисую 3, здесь может быть сколько
[22:50.500 --> 23:00.460]  угодно машинок и так далее. И она случайна. Вот это один кусочек индекса. Это другой кусочек
[23:00.460 --> 23:17.500]  индекса. Она ищет МФТИ во всех какой-то одной из этих машинок. Здесь, например. Ищет это слово.
[23:17.500 --> 23:24.460]  Вот как-то так. Потом это все соберется, склеится и вернет в пользу. Отранжируется и вернет в пользу.
[23:25.460 --> 23:31.540]  Вот какая-то такая конструкция. Паттерн называется параллельное выполнение.
[23:43.540 --> 23:50.100]  Думаю, что может не хватить ее мощности. Вот здесь мы решали проблему о том, что у нас слишком много
[23:50.100 --> 23:56.180]  данных. А вот здесь мы решаем проблему о том, что у нас одна машинка может не справиться.
[23:56.180 --> 24:04.060]  Примерно так же, например, хранит свои данные YouTube. Он не может одно видео хранить в одном
[24:04.660 --> 24:14.100]  видео. Скорее всего, видео хранится на каком-то кластере. Называются бинарные кластеры очень часто.
[24:14.100 --> 24:23.060]  Бинарные кластеры. Но здесь, в этом кластере несколько машин. И это видео хранится на всех.
[24:23.060 --> 24:29.940]  Это отказустойчивость тоже самая. Что произойдет, если вот эта машинка умрет?
[24:29.940 --> 24:33.820]  Две другие продолжат свою работу. То есть это видео не пропадет?
[24:59.940 --> 25:05.540]  Но они не страницы передают. Они наверняка передают какие-то следки страниц или какие-то индексы страниц.
[25:29.940 --> 25:38.860]  Да, я думаю, что таких машин не одна. То есть скорее всего, запрос в Яндексе выполняется очень
[25:38.860 --> 25:46.260]  сложно. Вот ты забираешь слово ты и главный корпус и понеслась. Сначала там, не знаю, первый слой,
[25:46.260 --> 25:51.100]  который занимается сборкой. Вернее, даже скорее так. Сначала, например, там первый слой, который
[25:51.100 --> 25:57.100]  занимается сборкой страницы. Он идет отдельно в индекс, отдельно он идет в рекламный кабинет,
[25:57.100 --> 26:04.860]  отдельно он идет в новостной кабинет. Ищет по этому новости. Другой ищет по этому рекламу.
[26:04.860 --> 26:10.780]  Третий ищет там, я не знаю, по этому погоду. Этот пошел в индекс считать. Здесь какой-то очередной
[26:10.780 --> 26:18.140]  слой машин. Взяла работу эту машину, пошла в нужный индекс и так далее. И вот как-то это все
[26:18.140 --> 26:24.140]  собирается и отдает использовать. И анекс мега сложная. Это мега сложная история.
[26:27.100 --> 26:42.900]  Я не знаю, но можно посчитать. Но много, я думаю, что много. Это внутренняя сеть. Я тоже не знаю. Я думаю,
[26:42.900 --> 26:51.820]  что мегабайты. Но это нормально. Это внутренняя сеть, она не внешняя. Ты за этот трафик не
[26:51.820 --> 27:01.020]  платишь. Это как бы машины в соседних, грубо говоря, этих стойках стоят. Десяти гигабитные,
[27:01.020 --> 27:07.580]  наверняка какие-нибудь между ними линки. Короче, это очень симпатичный паттерн.
[27:07.580 --> 27:13.420]  Тогда вам нужно решить какую-то сложную задачу. Но надо иметь в виду, что на это способное
[27:13.420 --> 27:21.740]  ограниченное количество программистов. Если вы такую штуку выбираете, лучше этого не делать.
[27:21.740 --> 27:28.620]  Потому что для этого вам придется набирать команду типа яндексовскую, платить ребятам
[27:28.620 --> 27:37.060]  совершенно бешеные деньги. И они вам да напишут. За пять лет разработки они вам напишут такую штуку.
[27:37.060 --> 27:43.700]  Поэтому в большинстве случаев стараются использовать что-нибудь такое наколеночное.
[27:43.700 --> 27:55.660]  Дальше еще один паттерн, который мы сейчас быстренько посмотрим, называется специализированные
[27:55.660 --> 28:02.980]  сервера. В большинстве случаев у вас мы с вами рассматривали какую-то стандартную задачу.
[28:02.980 --> 28:11.780]  Например, новостной сайт или что-нибудь подобное. То есть какие-то такие проекты,
[28:11.860 --> 28:21.140]  которые ничего сложного из себя не представляют. Но у вас есть целый класс проектов,
[28:21.140 --> 28:31.980]  которые стандартным способом не решишь. Стандартной трезвенной структурой не решишь.
[28:31.980 --> 28:46.940]  Например, игра, дота или варкрафт или чем угодно. Короче, есть паттерн,
[28:46.940 --> 28:52.980]  который называется специализированные сервера. Или, например, раздача видео,
[28:52.980 --> 29:00.780]  потокового видео. Для этого нужна некая специальная логика работы вот этого сервера.
[29:00.780 --> 29:06.140]  У нас, помните, один из паттернов назывался трехзвенной структурой. Мы с него начинали.
[29:06.140 --> 29:26.260]  Трехзвенная структура. Общая логика, frontend, backend и bazdan. Ну или система хранили. Вот для
[29:26.260 --> 29:32.220]  всего этого есть некие стандартные сервера. И это некая стандартная, самая простая логика.
[29:32.220 --> 29:37.620]  Но она все-таки довольно медленная. У нас есть некий оверхед на передачу данных от
[29:37.620 --> 29:41.460]  одного блока к другому. Вот как раз это то, что тебе волной попало внутри яндекса.
[29:41.460 --> 29:49.260]  Для некоторых проектов это не подходит. Мы придумали такую штуку, что, ребята,
[29:49.260 --> 29:53.500]  давайте для тех проектов, для которых это не подходит, мы напишем, что это специализированные.
[29:53.500 --> 30:09.860]  Специализированный сервер. Сюда идут все игры. То есть вот в этом случае,
[30:09.860 --> 30:16.020]  вы когда используете стандартное решение, да, то есть как выглядит ваша программа внутри
[30:16.020 --> 30:23.580]  backend. Опять же, я вам рисовал в самом начале нашей истории. Есть некий стандартный сервис,
[30:23.580 --> 30:39.220]  веб-сервер. Который вызывает вашу программу и передает ей данные. Но ваша программа может
[30:39.220 --> 30:48.020]  быть на чем угодно. Я не знаю, на руль, на PHP, на чем угодно, на джаве. Но все заботу про
[30:48.020 --> 30:52.860]  установление серверного соединения, там я не знаю, какие-то там, не знаю,
[30:52.860 --> 30:56.860]  алоцирование какой-то памяти, там еще чего-нибудь, да, то есть вот работа сейца,
[30:56.860 --> 31:03.700]  работа, такая техническая работа, она на нем, на веб-сервере лежит. Специализированный сервер
[31:03.700 --> 31:11.740]  прекрасное решение, но только все на вас. Да, он будет работать быстрее. Именно за счет того,
[31:11.740 --> 31:20.220]  что он будет очень узко заточен под конкретную вашу задачу. Игры, не знаю, какой-нибудь чат,
[31:20.220 --> 31:34.300]  процессор, видеотрансляция, видеосайты и все прочее прочее. Именно когда трансляция идет,
[31:34.300 --> 31:42.700]  не когда ты в файл в YouTube ты по большей части файл скачиваешь, в большом счете. Просто скачиваешь
[31:42.700 --> 31:48.500]  конкретный файл, его плеер проигрывает. А есть истории, где ты не просто должен скачать файл,
[31:48.500 --> 31:56.100]  где ты вот принимаешь, например, из одного источника и транслируешь в 10 других. При этом
[31:56.100 --> 32:02.540]  еще проверяешь, что здесь что-нибудь какой-то перекодировкой занимаешься. Ну, например, с камеры.
[32:02.540 --> 32:07.780]  Вот есть же ребята, например, вот вы меня сейчас снимаете, ты на файл на диск запишешь,
[32:07.780 --> 32:12.860]  что-то такое. А есть, например, мы на конференциях делаем, снимаешь и в прямом эфире транслируешь.
[32:12.860 --> 32:17.900]  Ну, относительно в прямом эфире, здесь все-таки некоторая задержка происходит на этом процессе,
[32:17.900 --> 32:22.700]  не знаю несколько секунд, может быть секунд два, пять, но все равно в реальном
[32:22.700 --> 32:31.660]  времени происходит. Это принципиально другой процесс. Для этого нужно специально писать вот
[32:31.660 --> 32:37.260]  эту саптину. Таких саптинок не очень много, например, связанных с видео их штук пять в
[32:37.260 --> 32:47.060]  всем мире. Которые умеют это делать хорошо. В чем одна из них написана в России. Что еще?
[32:47.060 --> 32:53.780]  Что еще может нам всем потребоваться?
[33:00.460 --> 33:01.500]  Игры, видео.
[33:01.500 --> 33:09.980]  Не проходит первая схема, да, где она настолько,
[33:09.980 --> 33:15.580]  где из-за ее универсальности она становится прям совсем неподходящей и неудобно.
[33:15.580 --> 33:30.740]  Чаты, да. То есть, короче, вещи, где нам нужно поддерживать постоянное соединение. Вот эта вот
[33:30.780 --> 33:36.220]  штука у нас работает на запрос-ответ. На запрос-ответ она работает идеально.
[33:36.220 --> 33:45.380]  А иногда нам нужны постоянные соединения из клима. И вот здесь вот эта штука рассыпает. Здесь
[33:45.380 --> 33:50.100]  везде тайм-ауты, здесь все разрывается и так далее. Здесь постоянные соединения, возможно, только в виде
[33:50.100 --> 34:00.260]  имитации. В чатах есть такой сервер, называется Комет-сервер. Класс серверов,
[34:00.260 --> 34:06.740]  подход, да. Установление постоянного соединения. Вот это как раз все сюда.
[34:13.220 --> 34:20.140]  Комет-сервера, чат и так далее. Вот. На этом, собственно говоря, все.
[34:20.140 --> 34:27.380]  Давайте вспоминать еще раз. Значит, базы данных мы проговорили.
[34:27.380 --> 34:35.420]  С чем мы начинали? С трехзвеннего архитектура.
[34:35.420 --> 34:49.900]  Еще что назвал? Какие паттерны? Каширование.
[34:49.900 --> 35:04.660]  Чего? Так, это ты мне перескакиваешь. Это сервисно-ориентированная архитектура,
[35:04.660 --> 35:16.860]  когда мы хотим. Или микросервис. И к ним как средство обмена информации между ними братишь
[35:16.860 --> 35:29.620]  сообщений. Так, еще. Толстый клиент. По сути означает, что мы переносим в браузер,
[35:29.620 --> 35:38.300]  но на сторону клиента мы переносим часть вычислений. Вы знаете, толстый клиент идеально
[35:38.300 --> 35:43.700]  коннектится, например, с Комет-сервером. Вот чат, как писать. Да, блин, переложить максимум
[35:43.700 --> 35:50.100]  на стороны толстого клиента, а на серверной стороне поставить как раз Комет-сервер,
[35:50.100 --> 35:54.740]  который будет с ним держать постоянные соединения с этим толстым клиентом и передавать ему какие-то
[35:54.740 --> 36:02.300]  команды. Вот типа у вас чат получится. А вот так будет сложно. Ну, потому что нужно будет каждую
[36:02.300 --> 36:07.060]  секунду запрашивать, не пришло ли новое сообщение, не пришло ли новое что-нибудь. Так, что еще?
[36:07.060 --> 36:33.900]  Давай, какое? Настабирование. Горизонтальное. Запускаем несколько бэкендер, запускаем несколько
[36:33.900 --> 36:51.780]  фронтендер. Вертикально. Память докупаем и процессор помощен. Что еще? Аналогично.
[36:51.780 --> 37:01.860]  Функциональное разделение там, функциональное разделение здесь. Точно так же бэкендер можно
[37:01.860 --> 37:15.340]  поделить. Разделение. Форум на одну страничку, новость на другую. Остатки на счетах на третью. Еще.
[37:15.340 --> 37:38.100]  И все. Отлично. Отложенное вычисление тоже целый блок. Мы используем то факт, что нам не
[37:38.100 --> 37:53.900]  всегда нужно все сразу. Это раз, а во-вторых, иногда для того, чтобы обработать запрос пользователей,
[37:53.900 --> 38:00.020]  нужно очень много поработать. Видео перекодировать, фотографию обрезать, обработать, повернуть и так
[38:00.020 --> 38:10.780]  далее. Поэтому мы разделяем работу. Часть делаем сразу, часть ставим задачей. И сюда же у нас,
[38:10.780 --> 38:23.860]  куда мы ставим задачи, мы ставим задачи в очереди. Что еще здесь? Отложенное вычисление. У нас там были
[38:23.860 --> 38:45.620]  еще различные варианты. У нас был еще здесь конвейер. Когда мы строим цепочку, данные передаются
[38:45.620 --> 38:50.940]  из одного к другую, третью и так далее. Или, например, через очереди. Помните, куда мы обрабатывали?
[38:50.940 --> 39:05.580]  Я не знаю, статистику обрабатывали. То есть, некая конвейерная обработка данных. Еще у нас была
[39:05.580 --> 39:23.820]  ассинхронная обработка, но это в очереди. Согласен, да, это не совсем правильно. Стрелочки не верны.
[39:23.820 --> 39:29.260]  Ассинхронная обработка, а здесь же очереди. Еще у нас с вами была деградация функциональности,
[39:29.420 --> 39:38.900]  как некий подход. Когда мы намеренно снижаем функциональность нашей системы, зависит из-за
[39:38.900 --> 39:51.820]  роста, например, нагрузки. И вот эти два. Специализированный сервер и параллельное вычисление.
[40:00.260 --> 40:07.060]  Параллельные вычисления и специализированные сервера.
[40:18.220 --> 40:25.260]  Все? Пока. Ладно, сейчас еще осталось делать за мало. Осталось научиться этим пользоваться.
[40:29.260 --> 40:38.460]  Это, конечно же, не все. Они периодически возникают новые. Их периодически кто-то придумывает,
[40:38.460 --> 40:52.020]  и так далее. Я не знаю, давно появилась сага, еще что-то, еще что-то. Но принцип я вам по-большому
[40:52.020 --> 40:59.220]  счету все обрисовал. То есть вы сталкиваетесь, то есть у каждого из этих паттернов, если вы
[40:59.220 --> 41:05.220]  вспомните, есть логика. Их можно даже не запоминать. Он возникает в ответ на какую-то
[41:05.220 --> 41:19.020]  особенность нашего с вами программного кода. То есть то, что нам задача ставил менеджер продукта.
[41:19.020 --> 41:32.780]  Заказчик. Итак, алгоритм проектирования. Собственно говоря, о чем мы здесь собрались. Как понять,
[41:32.780 --> 41:47.500]  какой из, что и когда использовать. Итак, к вам приходит заказчик и говорит, хочу Facebook. Ну ладно,
[41:47.500 --> 41:57.900]  для начала хочу, я не знаю, Tinder. Ну нет, Tinder слишком просто. Сейчас придумаю,
[41:57.900 --> 42:07.020]  что хочу. Ну, допустим, я хочу, знаете чего, я хочу под Сочи 2014 или под какую, я не знаю,
[42:07.020 --> 42:16.220]  FIFA 2018 сделать спортивные трансляции. Вот у меня есть комментатор. Вот я хочу,
[42:16.220 --> 42:25.260]  чтобы его куча народу слушала. Давайте придумаем алгоритм. Или смотрела, или читала. Читала.
[42:25.260 --> 42:33.500]  Алгоритм проектирования. Что вы сделаете первым? Вот я ваш заказчик. Давайте, первый шаг ваш.
[42:33.500 --> 42:43.300]  Понеслась. Да, вы начинаете ему задавать вопрос. Помните нашу матрицу? У нас такая была
[42:43.300 --> 42:49.820]  матрица. Мы спрашиваем про функциональные, про функции будущего проекта. Потом про различные
[42:49.820 --> 42:55.100]  цифры этого проекта. При этом про все это мы спрашиваем, как в прошлом, ну в смысле,
[42:55.100 --> 43:01.500]  как в реальности, как сейчас будет, потом как будет в будущем. Не только про цифры мы спрашиваем,
[43:01.500 --> 43:05.740]  как будет в будущем, но и про функциональность спрашиваем, как выйдет в будущем. А про все цифры мы
[43:05.740 --> 43:12.460]  с вами спрашиваем опять же в трех разрезах. Средняя и максимум. Вот мы с вами вот это все,
[43:12.460 --> 43:18.700]  вот этот корпус информации собираем. То есть первый шаг. Сбор информации.
[43:18.700 --> 43:47.340]  Первый шаг алгоритм. Допустим, вы все собрали. Шаг второй. У вас есть полное описание всех функций,
[43:47.340 --> 43:53.140]  всей бизнес логики. Сбор информации, сбор бизнес логики и так далее. Всего,
[43:53.140 --> 43:55.620]  чего вы хотите знать про этот проект, вы все узнаете.
[43:55.620 --> 44:16.180]  Ну оно простое, но дорогое. Ну понятно, как именно. Вот с чего вы подступитесь? Вот как,
[44:16.340 --> 44:31.740]  вот архитектуру спроектировать нужно. Как ты будешь выбирать инструмент? Ну не совсем. Хорошо.
[44:31.740 --> 44:40.180]  На основе чего? Какие ресурсы? Для того, чтобы оценить ресурсы, тебе нужно сначала понять,
[44:40.180 --> 44:50.660]  какие ресурсы потребуются. Короче, второй шаг. Мы с вами пытаемся понять. Нам описали бизнес
[44:50.660 --> 45:02.860]  логику. Нам теперь нужно понять, какие потребуются ресурсы. Какие данные есть в системе? Как они
[45:02.860 --> 45:10.340]  с друг с другом взаимодействуют? Как эти данные обрабатываются? Нам нужно с вами нащупать хоть
[45:10.340 --> 45:18.340]  что-нибудь, на основе чего мы с вами архитектуру-то и построим. То есть второй шаг. Анализ того,
[45:18.340 --> 45:27.540]  что потребуется. Строим тему движения данных внутри проекта. Это не совсем бизнес логика.
[45:27.540 --> 45:34.500]  Бизнес логика тебе информацию предоставляет в виде того, что вот эта страничка должна себя вести
[45:34.500 --> 45:40.820]  вот так. Например, пользователь туда вбивает, нажимает на кнопочку купить акции, должно
[45:40.820 --> 45:49.180]  происходить покупка акции. Тебе нужно из бизнес логики вытащить некую модельку. Как эта штука
[45:49.180 --> 45:56.660]  будет у тебя работать? Пока без серверов, без всего и так далее. То есть у тебя есть акция,
[45:56.660 --> 46:04.220]  есть пользователь, они взаимодействуют так-то. То-то, то-то, то-то. То есть некая модель. Мы эту
[46:04.220 --> 46:14.980]  модель строим для нескольких целей. Модель данных внутри системы. Я даже сказал так. Модель движения
[46:14.980 --> 46:28.300]  данных внутри вашей системы. Нам нужно. Из этого мы с вами сделаем несколько выводов. Первый
[46:28.300 --> 46:40.460]  вывод, который мы сделаем, мы оценим ресурсы, которые нам нужны. Второе самое важное, мы с вами
[46:40.460 --> 46:54.780]  поймем, где у нас критический путь так называемый. То есть, за что мы упрёмся? То есть, вокруг чего
[46:54.780 --> 47:02.380]  нам плясать, понимаете? То есть, что нам потребуется, да? То есть, это очень связанная вещь. Оценка ресурсов
[47:02.380 --> 47:09.660]  тоже нам придет вот туда, в критическом пути. Ну, например, мы с вами проектируем. Вот давайте
[47:09.660 --> 47:18.780]  попробуем на лету. Мы с вами проектируем YouTube. Вот нам рассказали, что могут делать пользователи
[47:18.780 --> 47:24.140]  на YouTube. Вот мы прикинули какое там, я не знаю, среднее количество роликов. Еще что-то, еще что-то,
[47:24.140 --> 47:30.940]  еще что-то. У нас с вами появляется представление о том, что нам нужно, во-первых, дохрена места
[47:30.940 --> 47:41.700]  для того, чтобы это все хранить. Это раз. Во-вторых, дохрена там, я не знаю, каналов для того, чтобы это все
[47:41.700 --> 47:50.420]  отдавать. И вот у вас уже начинают вырисовываться некие критические точки, вот так называемые.
[47:50.420 --> 47:56.540]  Критический путь, критические точки. То есть, где, во что вы будете упираться? То есть, во-первых,
[47:57.180 --> 48:03.120]  в диск. То есть, явно нужно придумывать что-то, как это все хранить. Во-вторых, вы выпьетесь в bot.
[48:03.120 --> 48:11.300]  То есть, явно нужно придумывать, как это все раздавать. Еще вы упретеся в перекодирование,
[48:11.300 --> 48:17.580]  потому что данные готовятся долго. То есть, как-то опять же придумывать, как это все перекодировать.
[48:17.580 --> 48:25.660]  Возможно, для каждого из этих проблем у вас будет отдельное решение. Например, другое. Facebook.
[48:25.660 --> 48:38.060]  Лент, лента новостей. Нет, не согласен. Лента новостей.
[48:38.060 --> 48:46.580]  Ну вот вы начинаете строить модельку. Вот у вас есть пользователь, у него есть пост,
[48:46.580 --> 48:59.620]  у него есть друг, друзья. Друзей есть там, я не знаю, свои посты. И вам нужно построить вот эту
[48:59.620 --> 49:09.220]  френд-ленту. В случае с фейсбуком вы упрятите то, что вот дохрена дамы. У каждого пользователя там,
[49:09.220 --> 49:17.940]  я не знаю, 100 по 100 и, например, я не знаю, 100 друзей. Вот у вас уже 10 тысяч объектов,
[49:17.940 --> 49:23.140]  которые вам нужно будет отсортировать под каждого пользователя. В случае с фейсбуком вы упрятите
[49:23.140 --> 49:29.660]  то, что у каждого пользователя все индивидуально. Для того, чтобы он посмотрел свою ленту, вам
[49:29.660 --> 49:35.140]  нужно будет архи огромное количество действий сделать и попытаться это как-то построить. И
[49:35.780 --> 49:46.540]  вообще непонятно как это построить. Фейсбучную ленту. Знаете почему? Да потому что у вас вот
[49:46.540 --> 49:53.460]  это все еще с этими, с постами, оно еще, блин, на одну машину не влезает. Так бы вы могли какую-нибудь
[49:53.460 --> 49:58.220]  SQL табличку сделать и пытаться по ней как-то ее оптимизировать и пытаться по ней делать выборки
[49:58.220 --> 50:07.660]  друзья посты. Не, нифига не получится. А какой-нибудь пользователь, у которого друзей не 100,
[50:07.660 --> 50:14.420]  например, не знаю, а 5 тысяч или он подписан, не знаю, на 10 тысяч друзей, на 10 тысяч человек,
[50:14.420 --> 50:19.020]  вообще кладется всю эту систему. Это что нужно? Для того, чтобы построить, нужно у каждого из этих
[50:19.020 --> 50:26.380]  10 тысяч вытащить их последние посты. Причем, по всей видимости, не за последние несколько недель.
[50:26.500 --> 50:37.460]  Потом это все как-то пересортировать, а все эти посты лежат на разных серверах. Ну то есть это как-бы как это делать вообще?
[50:37.460 --> 50:49.340]  Ну да, вывод мы пойдем скорее всего по пути какой-то избыточности, то есть мы как-то будем эти данные,
[50:49.340 --> 50:55.420]  не знаю, дублировать в 10 мест и так далее, чтобы хоть как-то эту ленту выдавать.
[50:55.420 --> 51:05.020]  То есть, короче, вот вторая задача. Вам нужно ответить на вопрос по поводу критического пути.
[51:05.020 --> 51:18.900]  Что у вас, что не решается в лоб, что закончится быстрее? Во что вы упрятесь?
[51:18.900 --> 51:28.460]  То есть, некая как раз вот эта вот проблема, которую нам, архитектурой, и надо будет решить.
[51:28.460 --> 51:46.900]  Дальше. Ну а дальше, собственно говоря, продолжение этой проблемы.
[51:46.900 --> 52:05.340]  Вот здесь, конечно, магия произойдет. Ну то есть мы с вами, перебирая некие особенности данных,
[52:05.340 --> 52:12.340]  которые у нас получились, я бы еще знаете, что добавил перед решением? Я бы еще добавил,
[52:12.460 --> 52:20.460]  что очень часто особенности решения находятся не только из критического пути. Вот так бы я бы сделал.
[52:20.460 --> 52:37.460]  Я бы еще добавил сюда допустимую деградацию. Допустимая деградация системы. То есть от чего мы можем отказаться?
[52:37.460 --> 52:49.780]  Например, в нашем фейсбоке. Они у нас обязаны, да, можем ли мы что-то потерять? Или можем ли мы не в хронологическом порядке их выстраивать?
[52:49.780 --> 52:57.500]  Если вы заметите, в социальных сетях никогда хронология не выставлена в хронологическом порядке.
[52:57.500 --> 53:04.100]  Она выставлена в примерно хронологическом порядке. Но у вас может быть сначала двухчасовой пост,
[53:04.100 --> 53:10.940]  потом пост, который был две минуты назад, вот, а потом пост трехдневной данности, а потом трехчасовой пост.
[53:10.940 --> 53:26.020]  Не-не-не, даже ВК, она не всегда строится именно вот так. Да, можно сейчас открыть любую ленту и посмотреть.
[53:26.860 --> 53:36.020]  Прямо увидите, наверняка. То есть короче, иногда выход лежит здесь. И вот уже четвертым пунктом решение.
[53:36.020 --> 53:48.820]  Ну что, давайте попробуем. То есть в решении мы с вами как раз на основе всего того, что собрали.
[53:48.820 --> 53:55.820]  На основе бизнес-логики, на основе критического пути, на основе каких-то особенностей вот этих вот самых данных.
[53:56.620 --> 54:01.620]  Да, оцениваем ресурсы, что закончится быстрее, то некие особенности.
[54:01.620 --> 54:28.420]  Например, какая ведь королевская чета в Великобритании выходит замуж. Женец. И оттуда идет трансляция.
[54:29.220 --> 54:38.220]  Вот в чем особенность? Все будут смотреть, да. Данных колоссальное количество.
[54:38.220 --> 54:48.220]  Еще какая особенность? Не только, не про это. Один сочек единственный.
[54:48.220 --> 54:51.220]  Может быть мы с этим что-то сыграть сможем?
[54:52.020 --> 55:03.020]  У нас не сайт трансляции. Понимаете, эта штука будет, даже если у нее трафик будет в 20 раз больше, чем на Ютубе,
[55:03.020 --> 55:08.020]  я не знаю, в 100 раз больше на Ютубе, она будет более простой. Почему? Потому что источник один.
[55:08.020 --> 55:13.020]  Нам не нужно думать ни о чем. Источник один и источник нами полностью контролируем.
[55:13.020 --> 55:20.020]  То есть они все идут с одной точки. Нам отдают готовую картинку, а мы ее распространяем.
[55:20.820 --> 55:29.820]  Это гораздо проще сделать, чем, например, Ютуб, где источников множество и где они могут обновляться кем угодно и в какое угодно время.
[55:29.820 --> 55:40.820]  То есть как бы за что-то, вот все, что выше, это пояс того, за что мы с вами зацепимся для того, чтобы спроектировать наше решение.
[55:40.820 --> 55:44.820]  Можно чуть ли не перебором. То есть на что нужно смотреть?
[55:45.620 --> 55:54.620]  Критический путь, что закончится быстрее, некую потенциальную деградацию, о чем мы можем отказаться, некие особенности данных.
[55:54.620 --> 56:05.620]  Ну и ресурсы. Прямо смотрим прицельно, что у нас, где у нас есть какая-то фишечка, которую мы сами можем использовать.
[56:05.620 --> 56:07.620]  И потом пытаемся спроектировать.
[56:07.620 --> 56:09.620]  Давайте попробуем.
[56:10.420 --> 56:12.420]  Например, первый сайт.
[56:12.420 --> 56:14.420]  Первый, что мы с вами будем проектировать.
[56:14.420 --> 56:16.420]  Спортивная трансляция.
[56:16.420 --> 56:18.420]  Погнали.
[56:18.420 --> 56:20.420]  Спрашивайте.
[56:20.420 --> 56:23.420]  Проектируйте мне спортивную трансляцию, парни, пожалуйста.
[56:28.420 --> 56:30.420]  Нет, пока не нужны комментарии.
[56:30.420 --> 56:32.420]  Значит, логика такая.
[56:32.420 --> 56:34.420]  Есть три редактора.
[56:34.420 --> 56:37.420]  Один отвечает за фотки, два отвечают за текст.
[56:38.220 --> 56:43.220]  Они смотрят футбольный матч в реальном времени.
[56:43.220 --> 56:45.220]  Что-то происходит.
[56:45.220 --> 56:47.220]  Они пишут маленький текстик, небольшой.
[56:47.220 --> 56:49.220]  Не знаю.
[56:49.220 --> 56:51.220]  В среднем там байт-стон.
[56:51.220 --> 56:53.220]  Публикуют его.
[56:53.220 --> 56:55.220]  Все остальные это читают и смотрят.
[56:55.220 --> 56:57.220]  Ну, читают.
[56:57.220 --> 56:59.220]  Трансляция текстов.
[56:59.220 --> 57:01.220]  Текстов и иногда картинки.
[57:01.220 --> 57:03.220]  Ну давай так, давай первую часть сначала решим.
[57:03.220 --> 57:05.220]  Трансляция только тексты.
[57:08.220 --> 57:10.220]  Как только пользователь...
[57:10.220 --> 57:12.220]  Как только...
[57:12.220 --> 57:14.220]  Первый хороший вопрос.
[57:14.220 --> 57:16.220]  Давайте так.
[57:16.220 --> 57:18.220]  Задержки до 10 секунд.
[57:18.220 --> 57:20.220]  Нормально.
[57:20.220 --> 57:22.220]  Ты все равно комментируешь.
[57:22.220 --> 57:24.220]  Это комментатор пишет.
[57:24.220 --> 57:26.220]  Через какое-то время.
[57:26.220 --> 57:28.220]  Нормально.
[57:28.220 --> 57:30.220]  До 10 секунд.
[57:32.220 --> 57:34.220]  Нет, мы хотим это у себя.
[57:34.220 --> 57:36.220]  Рекламу, пользователи и так далее.
[57:36.220 --> 57:38.220]  Нет, это сайт наш.
[57:38.220 --> 57:40.220]  Но вопрос хороший.
[57:40.220 --> 57:42.220]  Да.
[57:42.220 --> 57:44.220]  Product Manager тебя возненавидит.
[57:44.220 --> 57:46.220]  Ну, допустим, ладно.
[57:46.220 --> 57:48.220]  Так.
[57:48.220 --> 57:50.220]  Что еще?
[57:50.220 --> 57:52.220]  Что еще вы меня спросите?
[57:54.220 --> 57:56.220]  Пользователи, которые смотрят трансляцию.
[57:56.220 --> 57:58.220]  Ну, допустим, миллион.
[58:00.220 --> 58:02.220]  Они не должны обновлять страничку?
[58:02.220 --> 58:04.220]  Нет, они не должны обновлять страничку.
[58:04.220 --> 58:06.220]  Они открывают браузер.
[58:06.220 --> 58:08.220]  И страничка сама обновляется.
[58:10.220 --> 58:12.220]  Миллион человек.
[58:14.220 --> 58:16.220]  Не, по всему миру разбросано.
[58:20.220 --> 58:22.220]  Давай, пока без картинок.
[58:22.220 --> 58:24.220]  Первая часть без картинок.
[58:24.220 --> 58:26.220]  Первая часть без картинок.
[58:34.220 --> 58:36.220]  Да.
[58:36.220 --> 58:38.220]  То есть, если я зашел только что,
[58:38.220 --> 58:40.220]  я должен иметь возможность прочитать
[58:40.220 --> 58:42.220]  с самого начала.
[58:46.220 --> 58:48.220]  Да.
[58:48.220 --> 58:50.220]  Я не понимаю тебя.
[58:50.220 --> 58:52.220]  Какие Пуши?
[58:52.220 --> 58:54.220]  Я Product Manager.
[59:02.220 --> 59:04.220]  Ты вебе Пуши не отправишь?
[59:06.220 --> 59:08.220]  Это как бы...
[59:10.220 --> 59:12.220]  Браузеры умеют Пуши?
[59:12.220 --> 59:14.220]  Да.
[59:14.220 --> 59:16.220]  И что происходит?
[59:16.220 --> 59:18.220]  Как реагирует браузерная?
[59:28.220 --> 59:30.220]  Не, ребята.
[59:30.220 --> 59:32.220]  Это немножко не то.
[59:32.220 --> 59:34.220]  Этот Пуш...
[59:34.220 --> 59:36.220]  Ну, ладно.
[59:36.220 --> 59:38.220]  Я понял, про что вы имеете в виду.
[59:38.220 --> 59:40.220]  Нет, таких штук не надо делать.
[59:40.220 --> 59:42.220]  Я смотрю сайт.
[59:42.220 --> 59:44.220]  У меня открыто браузерное окно.
[59:44.220 --> 59:46.220]  У меня там все периодически обновляется.
[59:46.220 --> 59:48.220]  И у нас таких миллион.
[59:54.220 --> 59:56.220]  Параллельно давай одно.
[01:00:00.220 --> 01:00:02.220]  Да нет, одно.
[01:00:02.220 --> 01:00:04.220]  Итак, у нас есть трансляция.
[01:00:04.220 --> 01:00:06.220]  У нас есть миллион читателей.
[01:00:08.220 --> 01:00:10.220]  У нас есть время обновления
[01:00:10.220 --> 01:00:12.220]  максимум 10 секунд.
[01:00:12.220 --> 01:00:14.220]  И у нас есть два редактора, которые пишут.
[01:00:18.220 --> 01:00:20.220]  Пока только читать.
[01:00:24.220 --> 01:00:26.220]  Ну, все. Спросили, в принципе, все.
[01:00:26.220 --> 01:00:28.220]  Нам достаточно.
[01:00:28.220 --> 01:00:30.220]  В среднем одно сообщение.
[01:00:30.220 --> 01:00:32.220]  100 байт, например.
[01:00:32.220 --> 01:00:34.220]  Ну, один обзор.
[01:00:34.220 --> 01:00:36.220]  Как часто сообщения?
[01:00:36.220 --> 01:00:38.220]  Ну, несколько.
[01:00:38.220 --> 01:00:40.220]  Давай два раза в минуту.
[01:00:42.220 --> 01:00:44.220]  Да.
[01:00:46.220 --> 01:00:48.220]  Чего?
[01:00:52.220 --> 01:00:54.220]  Да, потом будет больше.
[01:00:54.220 --> 01:00:56.220]  Но вы про это не думайте пока, реально.
[01:00:56.220 --> 01:00:58.220]  Давайте мы вот пробуем
[01:00:58.220 --> 01:01:00.220]  первое, первое, первое
[01:01:00.220 --> 01:01:02.220]  про экспорт делать.
[01:01:02.220 --> 01:01:04.220]  Так.
[01:01:10.220 --> 01:01:12.220]  Так. Давай
[01:01:12.220 --> 01:01:14.220]  попробуем
[01:01:14.220 --> 01:01:16.220]  пройтись по второму
[01:01:16.220 --> 01:01:18.220]  пункту чуть более подробно.
[01:01:18.220 --> 01:01:20.220]  Оценка ресурсов. Чего нам нужно прикинуть?
[01:01:22.220 --> 01:01:24.220]  Какие у нас ресурсы?
[01:01:24.220 --> 01:01:26.220]  Давайте так. Что вообще прикидывать
[01:01:26.220 --> 01:01:28.220]  то надо?
[01:01:28.220 --> 01:01:30.220]  У нас по большому счету
[01:01:30.220 --> 01:01:32.220]  нам нужно прикинуть диск.
[01:01:34.220 --> 01:01:36.220]  Как это все место занимает.
[01:01:36.220 --> 01:01:38.220]  Нам нужно прикинуть канал.
[01:01:40.220 --> 01:01:42.220]  Нам нужно прикинуть
[01:01:42.220 --> 01:01:44.220]  процессор.
[01:01:46.220 --> 01:01:48.220]  Ну, память еще можно.
[01:01:48.220 --> 01:01:50.220]  Если есть какие-то особенности.
[01:01:52.220 --> 01:01:54.220]  Какие у нас еще ресурсы?
[01:01:54.220 --> 01:01:56.220]  Ну, все.
[01:02:00.220 --> 01:02:02.220]  Этим будут пользоваться постоянно.
[01:02:08.220 --> 01:02:10.220]  Предыдущий, да, нужно хранить,
[01:02:10.220 --> 01:02:12.220]  но вечно хранить.
[01:02:14.220 --> 01:02:16.220]  Но она закончилась, она больше не меняется.
[01:02:26.220 --> 01:02:28.220]  Это к вам вопрос. Я ничего не знаю.
[01:02:28.220 --> 01:02:30.220]  Технически это делается
[01:02:30.220 --> 01:02:32.220]  как раз с толстым клиентом.
[01:02:36.220 --> 01:02:38.220]  Сейчас спроектируем.
[01:02:42.220 --> 01:02:44.220]  Так. С диском у нас
[01:02:44.220 --> 01:02:46.220]  здесь есть какие-то проблемы?
[01:02:46.220 --> 01:02:48.220]  Сколько у нас матча?
[01:02:48.220 --> 01:02:50.220]  90 минут, да?
[01:02:50.220 --> 01:02:52.220]  90 минут.
[01:02:52.220 --> 01:02:54.220]  Это у нас с вами
[01:02:54.220 --> 01:02:56.220]  180 комментов. Давайте 200
[01:02:56.220 --> 01:02:58.220]  с круглого счета.
[01:03:00.220 --> 01:03:02.220]  По 100 килобайт.
[01:03:02.220 --> 01:03:04.220]  То есть по 100 байт.
[01:03:04.220 --> 01:03:06.220]  20 килобайт.
[01:03:06.220 --> 01:03:08.220]  Театрансляция максимум.
[01:03:10.220 --> 01:03:12.220]  На диск вылезает.
[01:03:12.220 --> 01:03:14.220]  Канал.
[01:03:20.220 --> 01:03:22.220]  1 миллион человек.
[01:03:26.220 --> 01:03:28.220]  1 миллион человек,
[01:03:28.220 --> 01:03:30.220]  и у нас еще есть 10 секунд.
[01:03:32.220 --> 01:03:34.220]  Как?
[01:03:34.220 --> 01:03:36.220]  Соответственно раз в 10 секунд,
[01:03:36.220 --> 01:03:38.220]  то есть грубо говоря,
[01:03:38.220 --> 01:03:40.220]  этот миллион человек делает к нам
[01:03:42.220 --> 01:03:44.220]  6 миллионов запросов в минуту.
[01:03:46.220 --> 01:03:48.220]  Да, или
[01:03:48.220 --> 01:03:50.220]  100...
[01:03:50.220 --> 01:03:52.220]  Короче, 1 миллион деленное на 6.
[01:03:52.220 --> 01:03:54.220]  Правильно?
[01:03:54.220 --> 01:03:56.220]  Правильно. 1 миллион деленное на 6
[01:03:56.220 --> 01:03:58.220]  это у нас сколько запросов в секунду?
[01:03:58.220 --> 01:04:00.220]  Ну, 1200, да?
[01:04:04.220 --> 01:04:06.220]  200 к запросов в секунду.
[01:04:12.220 --> 01:04:14.220]  Потому что 10...
[01:04:14.220 --> 01:04:16.220]  Раз в 10 секунд
[01:04:16.220 --> 01:04:18.220]  это у нас 6 запросов в минуту.
[01:04:18.220 --> 01:04:20.220]  Правильно?
[01:04:20.220 --> 01:04:22.220]  А подожди, раз в 10 секунд.
[01:04:22.220 --> 01:04:24.220]  Да, ты прав, 100.
[01:04:24.220 --> 01:04:26.220]  Конечно.
[01:04:26.220 --> 01:04:28.220]  100 запросов в секунду.
[01:04:28.220 --> 01:04:30.220]  Это много, мало?
[01:04:30.220 --> 01:04:32.220]  Так, не мало.
[01:04:32.220 --> 01:04:34.220]  Какой нам потребуется
[01:04:34.220 --> 01:04:36.220]  для этого канал?
[01:04:42.220 --> 01:04:44.220]  Если мы будем
[01:04:44.220 --> 01:04:46.220]  отдавать ему всю страничку,
[01:04:46.220 --> 01:04:48.220]  то
[01:04:48.220 --> 01:04:50.220]  в конце
[01:04:50.220 --> 01:04:52.220]  мача
[01:04:52.220 --> 01:04:54.220]  каждые 100 секунд...
[01:04:54.220 --> 01:04:56.220]  Каждый из этих запросов будет скачивать у нас
[01:04:56.220 --> 01:04:58.220]  все 20 килобайт.
[01:05:04.220 --> 01:05:06.220]  Это сейчас...
[01:05:06.220 --> 01:05:08.220]  Ну, подожди, это уникальное.
[01:05:08.220 --> 01:05:10.220]  Это уникальное.
[01:05:10.220 --> 01:05:12.220]  Они сидят постоянно.
[01:05:12.220 --> 01:05:14.220]  Мы должны разработать систему,
[01:05:14.220 --> 01:05:16.220]  в которой они сидят постоянно.
[01:05:16.220 --> 01:05:18.220]  Это не 2 мегабайта. Почему это 2 мегабайта?
[01:05:18.220 --> 01:05:20.220]  2 гигабайта?
[01:05:22.220 --> 01:05:24.220]  2 гигабайта в секунду.
[01:05:26.220 --> 01:05:28.220]  Пока мы...
[01:05:28.220 --> 01:05:30.220]  Если в лобешник решать, то да.
[01:05:30.220 --> 01:05:32.220]  Значит, мы будем
[01:05:32.220 --> 01:05:34.220]  начать думать над этим.
[01:05:34.220 --> 01:05:36.220]  2 гигабайта в секунду — это у нас
[01:05:36.220 --> 01:05:38.220]  18 гигабит.
[01:05:38.220 --> 01:05:40.220]  Это не мало.
[01:05:42.220 --> 01:05:44.220]  То есть мы
[01:05:44.220 --> 01:05:46.220]  потенциально в этом
[01:05:46.220 --> 01:05:48.220]  не будем упереться с вами.
[01:05:48.220 --> 01:05:50.220]  Потенциально.
[01:05:50.220 --> 01:05:52.220]  Процессор можем упереться?
[01:05:52.220 --> 01:05:54.220]  Ну...
[01:05:54.220 --> 01:05:56.220]  А?
[01:05:56.220 --> 01:05:58.220]  Нет, вряд ли.
[01:05:58.220 --> 01:06:00.220]  Согласен с тобой, да?
[01:06:00.220 --> 01:06:02.220]  Память тоже. Ну, что у нас там 20 килобайт?
[01:06:02.220 --> 01:06:04.220]  То есть как бы здесь
[01:06:04.220 --> 01:06:06.220]  потенциально у нас проблема только с каналом.
[01:06:06.220 --> 01:06:08.220]  Что еще?
[01:06:08.220 --> 01:06:10.220]  Допустим, мы деградацию. 10 секунд.
[01:06:10.220 --> 01:06:12.220]  Ну, все нам известно.
[01:06:12.220 --> 01:06:14.220]  Какие-нибудь особенности данных
[01:06:14.220 --> 01:06:16.220]  здесь есть?
[01:06:20.220 --> 01:06:22.220]  Маленькие. Относительно редко обновляются.
[01:06:22.220 --> 01:06:24.220]  Так, еще.
[01:06:26.220 --> 01:06:28.220]  Все обновления?
[01:06:30.220 --> 01:06:32.220]  Ну да.
[01:06:32.220 --> 01:06:34.220]  Редко обновляются.
[01:06:36.220 --> 01:06:38.220]  Я бы еще сказал, что они обновляются
[01:06:38.220 --> 01:06:40.220]  из одного источника.
[01:06:44.220 --> 01:06:46.220]  Короче, они все одинаковые.
[01:06:46.220 --> 01:06:48.220]  Так.
[01:06:48.220 --> 01:06:50.220]  Они одинаковые.
[01:06:50.220 --> 01:06:52.220]  Ты имеешь в виду, что они одинаковые для всех, да?
[01:06:52.220 --> 01:06:54.220]  Или что?
[01:06:56.220 --> 01:06:58.220]  Они одинаковые для всех.
[01:07:00.220 --> 01:07:02.220]  И здесь у нас
[01:07:02.220 --> 01:07:04.220]  что еще было самое первое?
[01:07:04.220 --> 01:07:06.220]  Маленькие.
[01:07:10.220 --> 01:07:12.220]  Согласен.
[01:07:12.220 --> 01:07:14.220]  А теперь попробуйте
[01:07:14.220 --> 01:07:16.220]  совершать эту самую магию.
[01:07:16.220 --> 01:07:18.220]  И исходя из всего вот этого
[01:07:18.220 --> 01:07:20.220]  предположить, как бы мы могли
[01:07:20.220 --> 01:07:22.220]  самым простым способом это все решить.
[01:07:24.220 --> 01:07:26.220]  На что мы будем опираться?
[01:07:26.220 --> 01:07:28.220]  Вот что с вашей точки зрения
[01:07:28.220 --> 01:07:30.220]  здесь самое-самое-самое ключевое?
[01:07:34.220 --> 01:07:36.220]  Так. Редко обновляются.
[01:07:36.220 --> 01:07:38.220]  Это позволяет нам их кашировать.
[01:07:38.220 --> 01:07:40.220]  Ну, допустим, так.
[01:07:42.220 --> 01:07:44.220]  Еще.
[01:07:46.220 --> 01:07:48.220]  Один источник и позволяет нам очень сильно
[01:07:48.220 --> 01:07:50.220]  упростить
[01:07:50.220 --> 01:07:52.220]  тему обновления этого блока, да?
[01:07:54.220 --> 01:07:56.220]  То есть у нас ни Рейска Эйдишнов
[01:07:56.220 --> 01:07:58.220]  там нет, ничего нет, мы просто тупо
[01:07:58.220 --> 01:08:00.220]  похороняем и все.
[01:08:00.220 --> 01:08:02.220]  Что еще?
[01:08:04.220 --> 01:08:06.220]  Думаете, Леша?
[01:08:06.220 --> 01:08:08.220]  А?
[01:08:08.220 --> 01:08:10.220]  Одинаковые данные. Как бы ты это использовал?
[01:08:10.220 --> 01:08:12.220]  Слушайте, одинаковые данные.
[01:08:22.220 --> 01:08:24.220]  Ну да, где-то там, да.
[01:08:30.220 --> 01:08:32.220]  Все совершенно верно, ребят.
[01:08:32.220 --> 01:08:34.220]  То есть как бы здесь ключевая...
[01:08:36.220 --> 01:08:38.220]  Смотрите.
[01:08:38.220 --> 01:08:40.220]  Вот это все себе разрисовали.
[01:08:40.220 --> 01:08:42.220]  Вот все это расписали.
[01:08:44.220 --> 01:08:46.220]  Из того, что это один источник,
[01:08:46.220 --> 01:08:48.220]  означает, что вы не паритесь по поводу обновления.
[01:08:48.220 --> 01:08:50.220]  Нету Рейска Эйдишнов ничего.
[01:08:50.220 --> 01:08:52.220]  То, что у вас одинаковое
[01:08:52.220 --> 01:08:54.220]  все для всех,
[01:08:54.220 --> 01:08:56.220]  означает, что можно использовать прям вообще
[01:08:56.220 --> 01:08:58.220]  самую примитивную схему хранения.
[01:09:00.220 --> 01:09:02.220]  Что бы вы использовали?
[01:09:02.220 --> 01:09:04.220]  Файл. Тупо файл.
[01:09:04.220 --> 01:09:06.220]  Бастданных нафиг не нужна.
[01:09:08.220 --> 01:09:10.220]  Тупо файлик, который
[01:09:10.220 --> 01:09:12.220]  не знаю, текстовый, HTML и так далее.
[01:09:14.220 --> 01:09:16.220]  Файл.
[01:09:16.220 --> 01:09:18.220]  Он для всех одинаковый.
[01:09:18.220 --> 01:09:20.220]  Он для всех одинаковый,
[01:09:20.220 --> 01:09:22.220]  все очень просто. И один источник
[01:09:22.220 --> 01:09:24.220]  позволяет нам с этим файлом очень легко и просто работать.
[01:09:24.220 --> 01:09:26.220]  А то, что мало данных,
[01:09:26.220 --> 01:09:28.220]  означает, что он будет очень маленький, этот файл.
[01:09:32.220 --> 01:09:34.220]  Так, хорошо.
[01:09:34.220 --> 01:09:36.220]  С файлом, допустим, вы решили.
[01:09:36.220 --> 01:09:38.220]  Так, быть с вот этой вот фигней.
[01:09:38.220 --> 01:09:40.220]  С 18 гигабитами.
[01:10:06.220 --> 01:10:08.220]  То есть толстый клиент.
[01:10:08.220 --> 01:10:10.220]  Я понял.
[01:10:10.220 --> 01:10:12.220]  Окей, хорошо. То есть
[01:10:12.220 --> 01:10:14.220]  первое предложение.
[01:10:14.220 --> 01:10:16.220]  Каждая запись,
[01:10:16.220 --> 01:10:18.220]  отдельный файл.
[01:10:18.220 --> 01:10:20.220]  А как они, как браузер
[01:10:20.220 --> 01:10:22.220]  на стороне толстого...
[01:10:22.220 --> 01:10:24.220]  Ну, как бы первое предложение
[01:10:24.220 --> 01:10:26.220]  толстый клиент.
[01:10:30.220 --> 01:10:32.220]  Не, подожди.
[01:10:32.220 --> 01:10:34.220]  Браузер
[01:10:34.220 --> 01:10:36.220]  по умолчанию
[01:10:36.220 --> 01:10:38.220]  ты ничего отправить не можешь.
[01:10:38.220 --> 01:10:40.220]  Он тебе запрос делает.
[01:10:40.220 --> 01:10:42.220]  Вот он тебе какой запрос должен сделать?
[01:10:44.220 --> 01:10:46.220]  Вот я захожу на эту страничку дальше.
[01:10:50.220 --> 01:10:52.220]  Хорошо. Он регулярно,
[01:10:52.220 --> 01:10:54.220]  раз в 10 секунд, вот у нас есть
[01:10:54.220 --> 01:10:56.220]  вот это ограничение, делает тебе запрос.
[01:10:56.220 --> 01:10:58.220]  Как выглядит этот запрос?
[01:10:58.220 --> 01:11:00.220]  Это конкретная страница?
[01:11:00.220 --> 01:11:02.220]  И что?
[01:11:06.220 --> 01:11:08.220]  Чего он до какого момента?
[01:11:12.220 --> 01:11:14.220]  Ну, это вы уходите
[01:11:14.220 --> 01:11:16.220]  от нашей простейшей схемы
[01:11:16.220 --> 01:11:18.220]  с файлом. Что значит до какого момента?
[01:11:18.220 --> 01:11:20.220]  Получается у каждого индивидуальная история
[01:11:20.220 --> 01:11:22.220]  в таком случае.
[01:11:30.220 --> 01:11:32.220]  У каждого индивидуальная история
[01:11:32.220 --> 01:11:34.220]  в таком случае.
[01:11:46.220 --> 01:11:48.220]  Окей. То есть алгоритм у нас такой.
[01:11:48.220 --> 01:11:50.220]  Так, у нас здесь
[01:11:50.220 --> 01:11:52.220]  ристосный клиент, который заходит
[01:11:52.220 --> 01:11:54.220]  на страничку в первый раз.
[01:11:54.220 --> 01:11:56.220]  Получает там какой-то джаваскрипт.
[01:11:56.220 --> 01:11:58.220]  В этом джаваскрипте
[01:12:00.220 --> 01:12:02.220]  записано, сколько у нас
[01:12:02.220 --> 01:12:04.220]  уже выпущено сообщений.
[01:12:04.220 --> 01:12:06.220]  Вот, например,
[01:12:06.220 --> 01:12:08.220]  n штучек.
[01:12:10.220 --> 01:12:12.220]  Да, и эти сообщения, допустим,
[01:12:12.220 --> 01:12:14.220]  да, там тоже есть n штучек
[01:12:14.220 --> 01:12:16.220]  плюс содержимое этих самых
[01:12:16.220 --> 01:12:18.220]  n сообщений.
[01:12:18.220 --> 01:12:20.220]  Потом этот джаваскрипт
[01:12:20.220 --> 01:12:22.220]  раз в 10 секунд делает запрос
[01:12:22.220 --> 01:12:24.220]  на что? На n плюс один
[01:12:26.220 --> 01:12:28.220]  ну, на содержимость
[01:12:28.220 --> 01:12:30.220]  n плюс один точка
[01:12:32.220 --> 01:12:34.220]  Ну, типа того. То есть он пытается скачать
[01:12:34.220 --> 01:12:36.220]  следующие сообщения.
[01:12:38.220 --> 01:12:40.220]  Окей, хорошо. Допустим.
[01:12:40.220 --> 01:12:42.220]  Почему?
[01:12:42.220 --> 01:12:44.220]  Ну, как
[01:12:46.220 --> 01:12:48.220]  ты будешь там
[01:12:48.220 --> 01:12:50.220]  наркотик
[01:12:56.220 --> 01:12:58.220]  Ну, а
[01:12:58.220 --> 01:13:00.220]  как
[01:13:10.220 --> 01:13:12.220]  А как
[01:13:12.220 --> 01:13:14.220]  выглядит тогда запрос?
[01:13:20.220 --> 01:13:22.220]  Они появляются редко, но есть
[01:13:22.220 --> 01:13:24.220]  проблемы. Они появляются нерегулярно.
[01:13:24.220 --> 01:13:26.220]  У тебя может
[01:13:26.220 --> 01:13:28.220]  в течение двух минут ничего не быть,
[01:13:28.220 --> 01:13:30.220]  а потом какой-нибудь гол, и у тебя
[01:13:30.220 --> 01:13:32.220]  а нефигач со скоростью-то, я не знаю.
[01:13:32.220 --> 01:13:34.220]  Пять сообщений за 10 секунд.
[01:13:42.220 --> 01:13:44.220]  Что у вас серверы ссылают? У вас серверы
[01:13:44.220 --> 01:13:46.220]  туповат. Он только на запрос
[01:13:46.220 --> 01:13:48.220]  отвечает. На какой?
[01:13:48.220 --> 01:13:50.220]  А?
[01:13:54.220 --> 01:13:56.220]  Ну, здрасьте. Вот ты нам
[01:13:56.220 --> 01:13:58.220]  вопрос написок взял и усложнил жизнь.
[01:13:58.220 --> 01:14:00.220]  Сразу.
[01:14:18.220 --> 01:14:20.220]  Ну, окей.
[01:14:30.220 --> 01:14:32.220]  Я понял.
[01:14:32.220 --> 01:14:34.220]  Пачка html.
[01:14:34.220 --> 01:14:36.220]  Запрашивайте следующие сообщения.
[01:14:40.220 --> 01:14:42.220]  А
[01:14:42.220 --> 01:14:44.220]  тогда как быть, когда у нас
[01:14:44.220 --> 01:14:46.220]  девятое сообщение,
[01:14:46.220 --> 01:14:48.220]  или, например, десятое сообщение,
[01:14:48.220 --> 01:14:50.220]  к нам пришла эта пачка, мне 10 сообщений.
[01:14:56.220 --> 01:14:58.220]  Ну, а мы же не знаем, может там уже есть 11-12
[01:14:58.220 --> 01:15:00.220]  за это время.
[01:15:04.220 --> 01:15:06.220]  А если гол произошел именно
[01:15:06.220 --> 01:15:08.220]  десятым сообщением,
[01:15:08.220 --> 01:15:10.220]  и следующая пачка уже готова
[01:15:10.220 --> 01:15:12.220]  эмоциональных сообщений,
[01:15:12.220 --> 01:15:14.220]  вы как-то себе жизнь усложняете.
[01:15:14.220 --> 01:15:16.220]  Давайте проще.
[01:15:16.220 --> 01:15:18.220]  То есть направление мысли правильно,
[01:15:18.220 --> 01:15:20.220]  то есть запрашивать не все.
[01:15:20.220 --> 01:15:22.220]  Давайте какое-то более простое.
[01:15:44.220 --> 01:15:46.220]  Поняли предложение?
[01:15:46.220 --> 01:15:48.220]  То есть, как бы,
[01:15:48.220 --> 01:15:50.220]  под вариант такой.
[01:15:50.220 --> 01:15:52.220]  Точно такой же JavaScript,
[01:15:52.220 --> 01:15:54.220]  который
[01:15:54.220 --> 01:15:56.220]  возвращает содержимое всего того,
[01:15:56.220 --> 01:15:58.220]  что было до этого, ну, в смысле, получает
[01:15:58.220 --> 01:16:00.220]  вместе с этим JavaScriptом содержимое.
[01:16:00.220 --> 01:16:02.220]  И последнюю n.
[01:16:02.220 --> 01:16:04.220]  И у нас есть,
[01:16:04.220 --> 01:16:06.220]  грубо говоря,
[01:16:06.220 --> 01:16:08.220]  вот у нас 200 файлов.
[01:16:08.220 --> 01:16:10.220]  К концу игры у нас будет
[01:16:10.220 --> 01:16:12.220]  200 файлов, правильно?
[01:16:12.220 --> 01:16:14.220]  То есть,
[01:16:14.220 --> 01:16:16.220]  один HTML
[01:16:16.220 --> 01:16:18.220]  у нас, допустим, хранит
[01:16:18.220 --> 01:16:20.220]  все данные, все
[01:16:20.220 --> 01:16:22.220]  сообщения,
[01:16:22.220 --> 01:16:24.220]  начиная с первого.
[01:16:24.220 --> 01:16:26.220]  Два HTML
[01:16:26.220 --> 01:16:28.220]  хранит все сообщения, начиная со второго.
[01:16:28.220 --> 01:16:30.220]  Три HTML хранит все сообщения,
[01:16:30.220 --> 01:16:32.220]  начиная с третьего и так далее.
[01:16:32.220 --> 01:16:34.220]  В чем минус?
[01:16:34.220 --> 01:16:36.220]  Когда нам нужно будет записать
[01:16:36.220 --> 01:16:38.220]  сообщение номер 200,
[01:16:38.220 --> 01:16:40.220]  мы должны будем сделать 200 записей.
[01:16:40.220 --> 01:16:42.220]  Правильно?
[01:16:42.220 --> 01:16:44.220]  Каждый из них добавить.
[01:16:44.220 --> 01:16:46.220]  Так, хорошо.
[01:16:46.220 --> 01:16:48.220]  А еще попроще.
[01:16:56.220 --> 01:16:58.220]  Вот у нас сразу
[01:16:58.220 --> 01:17:00.220]  это означает, что нам нужно
[01:17:00.220 --> 01:17:02.220]  сто тысяч раз в секунду
[01:17:02.220 --> 01:17:04.220]  этот скриптик выполнить.
[01:17:04.220 --> 01:17:06.220]  Это не проблема,
[01:17:06.220 --> 01:17:08.220]  но мы не хотим. Мы хотим максимально
[01:17:08.220 --> 01:17:10.220]  тупую систему, простую.
[01:17:14.220 --> 01:17:16.220]  Хорошо. Где у тебя будет
[01:17:16.220 --> 01:17:18.220]  эта информация храниться, исходная
[01:17:18.220 --> 01:17:20.220]  для этого скрипта?
[01:17:20.220 --> 01:17:22.220]  Исходная.
[01:17:22.220 --> 01:17:24.220]  Скрипт на вход
[01:17:24.220 --> 01:17:26.220]  получает X, правильно?
[01:17:26.220 --> 01:17:28.220]  Откуда он берет сообщение, начиная
[01:17:28.220 --> 01:17:30.220]  с номера X?
[01:17:32.220 --> 01:17:34.220]  Открывает файлы,
[01:17:34.220 --> 01:17:36.220]  скобилирует
[01:17:36.220 --> 01:17:38.220]  и отдает.
[01:17:42.220 --> 01:17:44.220]  То есть, мы вместо того, чтобы
[01:17:44.220 --> 01:17:46.220]  один раз записать в 200 файлов,
[01:17:46.220 --> 01:17:48.220]  собираемся сто тысяч
[01:17:48.220 --> 01:17:50.220]  раз в секунду
[01:17:50.220 --> 01:17:52.220]  читать из 200 файлов?
[01:17:54.220 --> 01:17:56.220]  Можно?
[01:17:58.220 --> 01:18:00.220]  Хорошо.
[01:18:06.220 --> 01:18:08.220]  Да, есть такой вариант,
[01:18:08.220 --> 01:18:10.220]  но тем не менее, ты собираешься
[01:18:10.220 --> 01:18:12.220]  даже если там будет page cache и все прочее,
[01:18:12.220 --> 01:18:14.220]  ты собираешься совершить
[01:18:14.220 --> 01:18:16.220]  кучу, не знаю,
[01:18:16.220 --> 01:18:18.220]  системных вызовов.
[01:18:20.220 --> 01:18:22.220]  Это не очень хорошо.
[01:18:22.220 --> 01:18:24.220]  Этот путь
[01:18:24.220 --> 01:18:26.220]  я даже согласен с тем,
[01:18:26.220 --> 01:18:28.220]  мне не нравится вариант 200
[01:18:28.220 --> 01:18:30.220]  файлов обновлять, но даже
[01:18:30.220 --> 01:18:32.220]  это лучше, чем то, что ты предлагаешь.
[01:18:32.220 --> 01:18:34.220]  Потому что хорошо, к диску
[01:18:34.220 --> 01:18:36.220]  мы ходить не будем.
[01:18:36.220 --> 01:18:38.220]  Но
[01:18:38.220 --> 01:18:40.220]  к диску мы ходить не будем.
[01:18:40.220 --> 01:18:42.220]  Но ты все равно будешь вызывать
[01:18:42.220 --> 01:18:44.220]  операционную систему с запросом
[01:18:44.220 --> 01:18:46.220]  открой этот файл и отдай мне
[01:18:46.220 --> 01:18:48.220]  его содержимое.
[01:19:00.220 --> 01:19:02.220]  Там ты один файл читаешь. Нет, там ты и делаешь,
[01:19:02.220 --> 01:19:04.220]  каждый запрос читает один файл.
[01:19:04.220 --> 01:19:06.220]  А здесь ты будешь читать
[01:19:06.220 --> 01:19:08.220]  энное количество файлов.
[01:19:16.220 --> 01:19:18.220]  Ну хорошо, но больше
[01:19:18.220 --> 01:19:20.220]  чем один.
[01:19:26.220 --> 01:19:28.220]  Он предлагает делать скриптик,
[01:19:28.220 --> 01:19:30.220]  в котором
[01:19:30.220 --> 01:19:32.220]  содержимое этих файлов собирать
[01:19:32.220 --> 01:19:34.220]  на лету.
[01:19:48.220 --> 01:19:50.220]  Да, ребят, я понимаю, но вы
[01:19:50.220 --> 01:19:52.220]  нарушаете нашу, вы не используете
[01:19:52.220 --> 01:19:54.220]  по большому счету,
[01:19:54.220 --> 01:19:56.220]  вам нужен будет процессор.
[01:19:56.220 --> 01:19:58.220]  Давай даже
[01:19:58.220 --> 01:20:00.220]  просто тупо посчитаем.
[01:20:00.220 --> 01:20:02.220]  Проверить, есть ли такой файл.
[01:20:02.220 --> 01:20:04.220]  Раз.
[01:20:04.220 --> 01:20:06.220]  Собрать его.
[01:20:06.220 --> 01:20:08.220]  Два, если его нет.
[01:20:08.220 --> 01:20:10.220]  Отдать его. Три. То есть у тебя
[01:20:10.220 --> 01:20:12.220]  два системных вызова
[01:20:12.220 --> 01:20:14.220]  на одну историю вместо одного.
[01:20:14.220 --> 01:20:16.220]  Ну посчитайте.
[01:20:16.220 --> 01:20:18.220]  Вот сколько у вас будет.
[01:20:18.220 --> 01:20:20.220]  Вот у вас за каждый 10 секунд.
[01:20:20.220 --> 01:20:22.220]  За каждый 10 секунд у вас
[01:20:22.220 --> 01:20:24.220]  произойдет 1 миллион запросов.
[01:20:24.220 --> 01:20:26.220]  У вас будет 1 миллион запросов.
[01:20:26.220 --> 01:20:28.220]  Каждом из них
[01:20:28.220 --> 01:20:30.220]  два системных вызова. У вас будет 2 миллиона
[01:20:30.220 --> 01:20:32.220]  системных вызова.
[01:20:32.220 --> 01:20:34.220]  В случае, если вы сделаете вот так
[01:20:34.220 --> 01:20:36.220]  и у вас раз в 10 секунд что-то обновляется,
[01:20:36.220 --> 01:20:38.220]  у вас будет 1 миллион
[01:20:38.220 --> 01:20:40.220]  плюс 200 системных вызовов.
[01:20:40.220 --> 01:20:42.220]  Ну как лучше? Как легче сделать?
[01:20:46.220 --> 01:20:48.220]  Ну конечно в втором варианте лучше.
[01:20:48.220 --> 01:20:50.220]  Не плохо.
[01:20:54.220 --> 01:20:56.220]  А
[01:21:00.220 --> 01:21:02.220]  Н-ная строка у тебя
[01:21:02.220 --> 01:21:04.220]  фиксированной длины.
[01:21:06.220 --> 01:21:08.220]  Как ты вычисляешь адрес?
[01:21:12.220 --> 01:21:14.220]  Считать файл с 15-ой строки
[01:21:14.220 --> 01:21:16.220]  это невозможно.
[01:21:16.220 --> 01:21:18.220]  Можно не читать файл с
[01:21:18.220 --> 01:21:20.220]  офсета такого-то.
[01:21:20.220 --> 01:21:22.220]  И этот офсет жестко задан в байтах.
[01:21:22.220 --> 01:21:24.220]  Мне нужно фиксированно
[01:21:24.220 --> 01:21:26.220]  делить и все прочее.
[01:21:28.220 --> 01:21:30.220]  Нет?
[01:21:30.220 --> 01:21:32.220]  Это в среднем?
[01:21:44.220 --> 01:21:46.220]  Я не помню, но
[01:21:46.220 --> 01:21:48.220]  те же самые раз 10 секунд.
[01:21:52.220 --> 01:21:54.220]  9 раз вычитать файл с 15-ой строки.
[01:21:54.220 --> 01:21:56.220]  А 9 раз
[01:21:56.220 --> 01:21:58.220]  прочитать это все.
[01:22:00.220 --> 01:22:02.220]  Все какое-то извращение. Придумайте проще вариант.
[01:22:14.220 --> 01:22:16.220]  Помнить о
[01:22:16.220 --> 01:22:18.220]  офсете
[01:22:18.220 --> 01:22:20.220]  отверстия в этом огромном массиве
[01:22:20.220 --> 01:22:22.220]  Вот.
[01:22:32.220 --> 01:22:34.220]  Ты предлагаешь просто
[01:22:34.220 --> 01:22:36.220]  положить в какую-то структуру памяти.
[01:22:36.220 --> 01:22:38.220]  И написать собственный сервер
[01:22:38.220 --> 01:22:40.220]  для этого.
[01:22:44.220 --> 01:22:46.220]  Можно,
[01:22:46.220 --> 01:22:48.220]  но это уже сложнее.
[01:22:50.220 --> 01:22:52.220]  Антенны.
[01:22:52.220 --> 01:22:54.220]  Тебе нужно писать собственный сервер.
[01:22:54.220 --> 01:22:56.220]  Нафиг нужно?
[01:22:56.220 --> 01:22:58.220]  А?
[01:22:58.220 --> 01:23:00.220]  Кто будет память хотеть?
[01:23:08.220 --> 01:23:10.220]  Вообще да.
[01:23:10.220 --> 01:23:12.220]  Inginx умеет читать
[01:23:12.220 --> 01:23:14.220]  и ходить в кэш напрямую.
[01:23:16.220 --> 01:23:18.220]  Но если ты захочешь,
[01:23:18.220 --> 01:23:20.220]  чтобы у тебя Inginx читал из памяти,
[01:23:20.220 --> 01:23:22.220]  ты начнешь писать модуль для Inginx.
[01:23:24.220 --> 01:23:26.220]  Это уже сокращает в 2-3 раза
[01:23:26.220 --> 01:23:28.220]  количество программистов, которых ты можешь
[01:23:28.220 --> 01:23:30.220]  привлечь к проекту.
[01:23:30.220 --> 01:23:32.220]  Вот в этой нашей схеме,
[01:23:32.220 --> 01:23:34.220]  даже вот в этой схеме,
[01:23:34.220 --> 01:23:36.220]  у нас на сервере нет
[01:23:36.220 --> 01:23:38.220]  программного обеспечения вообще.
[01:23:38.220 --> 01:23:40.220]  У нас есть стандартный фронтенд,
[01:23:40.220 --> 01:23:42.220]  стандартный Inginx, который файлы сдает в диск.
[01:23:42.220 --> 01:23:44.220]  Все.
[01:23:44.220 --> 01:23:46.220]  Мы ничего не программируем. Мы программируем
[01:23:46.220 --> 01:23:48.220]  это.
[01:23:50.220 --> 01:23:52.220]  Да, и то, что мы в конце пишем
[01:23:52.220 --> 01:23:54.220]  200 раз.
[01:24:04.220 --> 01:24:06.220]  Я согласен.
[01:24:06.220 --> 01:24:08.220]  Пока это самый простой способ,
[01:24:08.220 --> 01:24:10.220]  который вы придумали.
[01:24:16.220 --> 01:24:18.220]  Вот что происходит с клиентами,
[01:24:18.220 --> 01:24:20.220]  которые
[01:24:20.220 --> 01:24:22.220]  приходят в первый раз
[01:24:22.220 --> 01:24:24.220]  на 89 минут.
[01:24:32.220 --> 01:24:34.220]  Уже лучше.
[01:24:34.220 --> 01:24:36.220]  Еще упростили систему.
[01:24:36.220 --> 01:24:38.220]  То есть мы поддерживаем сами
[01:24:38.220 --> 01:24:40.220]  точно такой же
[01:24:40.220 --> 01:24:42.220]  JavaScript.
[01:24:42.220 --> 01:24:44.220]  У нас есть файл, который
[01:24:44.220 --> 01:24:46.220]  у нас есть.
[01:24:46.220 --> 01:24:48.220]  AllHTML
[01:24:48.220 --> 01:24:50.220]  и nf, конечно, последний.
[01:24:50.220 --> 01:24:52.220]  Так.
[01:24:52.220 --> 01:24:54.220]  А вот теперь, допустим,
[01:24:54.220 --> 01:24:56.220]  меня...
[01:24:58.220 --> 01:25:00.220]  Как мне понять,
[01:25:00.220 --> 01:25:02.220]  собственно говоря?
[01:25:02.220 --> 01:25:04.220]  Вот я JavaScript.
[01:25:04.220 --> 01:25:06.220]  У меня пропало соединение.
[01:25:06.220 --> 01:25:08.220]  А потом через 10 минут восстановилось.
[01:25:08.220 --> 01:25:10.220]  Мне куда идти?
[01:25:10.220 --> 01:25:12.220]  А?
[01:25:12.220 --> 01:25:14.220]  А какая логика у меня?
[01:25:14.220 --> 01:25:16.220]  Почему я должен запросить все?
[01:25:18.220 --> 01:25:20.220]  А, допустим, у меня
[01:25:20.220 --> 01:25:22.220]  тайм-аут на минуту произошел.
[01:25:22.220 --> 01:25:24.220]  А?
[01:25:28.220 --> 01:25:30.220]  Не, у меня на минуту
[01:25:30.220 --> 01:25:32.220]  пропало интернет. Это не то, чтобы тайм-аут.
[01:25:32.220 --> 01:25:34.220]  Я же каждый раз запрос делаю.
[01:25:42.220 --> 01:25:44.220]  Лишний запрос.
[01:25:52.220 --> 01:25:54.220]  Понятно.
[01:25:54.220 --> 01:25:56.220]  Вместо него отдать пола
[01:25:56.220 --> 01:25:58.220]  что-нибудь.
[01:25:58.220 --> 01:26:00.220]  Потом я должен буду там JavaScript-ом разобраться.
[01:26:00.220 --> 01:26:02.220]  Ну, можно символическую ссылку.
[01:26:04.220 --> 01:26:06.220]  Хотя не очень это...
[01:26:06.220 --> 01:26:08.220]  Работать будет,
[01:26:08.220 --> 01:26:10.220]  но не очень красиво.
[01:26:12.220 --> 01:26:14.220]  Вы зацепились
[01:26:14.220 --> 01:26:16.220]  для идеи
[01:26:16.220 --> 01:26:18.220]  вот эту вот.
[01:26:18.220 --> 01:26:20.220]  Потому что JavaScript у вас запрашивает
[01:26:20.220 --> 01:26:22.220]  nhtml.
[01:26:22.220 --> 01:26:24.220]  А можно как-то без этого?
[01:26:42.220 --> 01:26:44.220]  А что
[01:26:44.220 --> 01:26:46.220]  в update.html лежит?
[01:26:48.220 --> 01:26:50.220]  А там последние
[01:26:50.220 --> 01:26:52.220]  n-постов или там последние
[01:26:54.220 --> 01:26:56.220]  все посты за последнюю минуту?
[01:26:58.220 --> 01:27:00.220]  А как лучше?
[01:27:06.220 --> 01:27:08.220]  За минуту лучше, потому что у вас
[01:27:08.220 --> 01:27:10.220]  на JavaScript-е вы про минуту
[01:27:10.220 --> 01:27:12.220]  знаете, что у вас прошла минута
[01:27:12.220 --> 01:27:14.220]  на стороне толстого клиента.
[01:27:16.220 --> 01:27:18.220]  А сколько за это время
[01:27:18.220 --> 01:27:20.220]  постов было сделано, вы не знаете.
[01:27:20.220 --> 01:27:22.220]  То есть, грубо говоря,
[01:27:22.220 --> 01:27:24.220]  если мы с вами договариваемся, что у нас
[01:27:24.220 --> 01:27:26.220]  есть два файла.
[01:27:26.220 --> 01:27:28.220]  Первый файл
[01:27:28.220 --> 01:27:30.220]  это все посты, а второй
[01:27:30.220 --> 01:27:32.220]  это, я не знаю,
[01:27:32.220 --> 01:27:34.220]  update.
[01:27:36.220 --> 01:27:38.220]  И мы точно знаем, что в update
[01:27:38.220 --> 01:27:40.220]  лежит последняя минута.
[01:27:40.220 --> 01:27:42.220]  Все посты
[01:27:42.220 --> 01:27:44.220]  за последние 60 секунд.
[01:27:44.220 --> 01:27:46.220]  То тогда наш JavaScript
[01:27:46.220 --> 01:27:48.220]  в зависимости
[01:27:48.220 --> 01:27:50.220]  того, например, он отвалился.
[01:27:52.220 --> 01:27:54.220]  Он может вычислить, куда его находить.
[01:27:54.220 --> 01:27:56.220]  Потому что он знает, насколько он отвалился.
[01:27:56.220 --> 01:27:58.220]  Он знает, сколько времени он не получал
[01:27:58.220 --> 01:28:00.220]  информации.
[01:28:00.220 --> 01:28:02.220]  У него есть последняя, то есть у каждого
[01:28:02.220 --> 01:28:04.220]  JavaScript-а есть некая переменная.
[01:28:04.220 --> 01:28:06.220]  Последнее обновление
[01:28:08.220 --> 01:28:10.220]  он последнее обновление знает.
[01:28:10.220 --> 01:28:12.220]  И он знает текущее время.
[01:28:12.220 --> 01:28:14.220]  Он всегда может вычислить, куда ему
[01:28:14.220 --> 01:28:16.220]  ходить, сюда или сюда.
[01:28:16.220 --> 01:28:18.220]  То есть, мы избавились от лишнего запроса
[01:28:18.220 --> 01:28:20.220]  к серверу на выяснение
[01:28:20.220 --> 01:28:22.220]  деталей.
[01:28:22.220 --> 01:28:24.220]  Если ты заходишь в первый раз, ты всегда идешь
[01:28:24.220 --> 01:28:26.220]  вот сюда.
[01:28:26.220 --> 01:28:28.220]  А дальше
[01:28:28.220 --> 01:28:30.220]  ты каждый раз проверяешь, сколько времени
[01:28:30.220 --> 01:28:32.220]  произошло с момента последнего обновления.
[01:28:32.220 --> 01:28:34.220]  Если больше минуты, идешь сюда.
[01:28:34.220 --> 01:28:36.220]  Если меньше минуты, идешь сюда.
[01:28:38.220 --> 01:28:40.220]  И обновлять мы будем каждый раз.
[01:28:40.220 --> 01:28:42.220]  При каждом обновлении два файла.
[01:28:50.220 --> 01:28:52.220]  А он не стирается, он только обновляется.
[01:29:02.220 --> 01:29:04.220]  Update
[01:29:04.220 --> 01:29:06.220]  хранит обновление
[01:29:06.220 --> 01:29:08.220]  за последние 60
[01:29:08.220 --> 01:29:10.220]  календарных секунд.
[01:29:12.220 --> 01:29:14.220]  Нет.
[01:29:14.220 --> 01:29:16.220]  У тебя сразу пишется все в all
[01:29:16.220 --> 01:29:18.220]  и сразу модифицируется update.
[01:29:18.220 --> 01:29:20.220]  В update
[01:29:20.220 --> 01:29:22.220]  у тебя каждый раз все старые сообщения,
[01:29:22.220 --> 01:29:24.220]  которые не нужны в нем уже, они
[01:29:24.220 --> 01:29:26.220]  стираются.
[01:29:32.220 --> 01:29:34.220]  Мы можем поделить какое-то соотношение
[01:29:34.220 --> 01:29:36.220]  с того, что у нас
[01:29:36.220 --> 01:29:38.220]  вот эти трениры, когда
[01:29:38.220 --> 01:29:40.220]  поделится.
[01:29:40.220 --> 01:29:42.220]  Проблема в чем?
[01:29:42.220 --> 01:29:44.220]  У JavaScript
[01:29:44.220 --> 01:29:46.220]  59 секунд
[01:29:46.220 --> 01:29:48.220]  с момента последнего запроса.
[01:29:48.220 --> 01:29:50.220]  Он идет в updates
[01:29:50.220 --> 01:29:52.220]  и идет дольше секунды.
[01:29:52.220 --> 01:29:54.220]  Как обойти
[01:29:54.220 --> 01:29:56.220]  эту историю?
[01:30:02.220 --> 01:30:04.220]  Ну,
[01:30:04.220 --> 01:30:06.220]  думайте.
[01:30:14.220 --> 01:30:16.220]  Понятно.
[01:30:16.220 --> 01:30:18.220]  Первый вариант.
[01:30:18.220 --> 01:30:20.220]  Update содержит реально
[01:30:20.220 --> 01:30:22.220]  120 секунд, но клиент
[01:30:22.220 --> 01:30:24.220]  считает, что он содержит
[01:30:24.220 --> 01:30:26.220]  только 60.
[01:30:26.220 --> 01:30:28.220]  Этого у нас появляются минуты
[01:30:28.220 --> 01:30:30.220]  на вот эти вот расхождения.
[01:30:30.220 --> 01:30:32.220]  А еще варианты.
[01:30:34.220 --> 01:30:36.220]  Time out на клиенте.
[01:30:36.220 --> 01:30:38.220]  Значит, все равно может быть.
[01:30:38.220 --> 01:30:40.220]  А если я параллельно Adobe Photoshop
[01:30:40.220 --> 01:30:42.220]  запускаю, понимаешь?
[01:30:42.220 --> 01:30:44.220]  Ну-ка, ну подожди.
[01:30:46.220 --> 01:30:48.220]  Этот вариант хороший,
[01:30:48.220 --> 01:30:50.220]  но не 100% надежный.
[01:30:50.220 --> 01:30:52.220]  Потому что все равно могут быть
[01:30:52.220 --> 01:30:54.220]  задержки даже больше чем на минуты.
[01:30:54.220 --> 01:30:56.220]  Еще вариант.
[01:30:56.220 --> 01:30:58.220]  Ответ
[01:30:58.220 --> 01:31:00.220]  Time out
[01:31:00.220 --> 01:31:02.220]  на клиенте.
[01:31:04.220 --> 01:31:06.220]  Давайте еще украдем
[01:31:06.220 --> 01:31:08.220]  количество постов, которые
[01:31:08.220 --> 01:31:10.220]  выглядели.
[01:31:10.220 --> 01:31:12.220]  Давайте просто действительно
[01:31:12.220 --> 01:31:14.220]  внутри
[01:31:14.220 --> 01:31:16.220]  updates.html и all.html
[01:31:16.220 --> 01:31:18.220]  будем хранить некую, то есть как бы
[01:31:18.220 --> 01:31:20.220]  пост, это не просто
[01:31:20.220 --> 01:31:22.220]  текстовая строка.
[01:31:22.220 --> 01:31:24.220]  Например, у поста есть какой-нибудь, не знаю,
[01:31:24.220 --> 01:31:26.220]  номер.
[01:31:26.220 --> 01:31:28.220]  Фиксумы давайте считать,
[01:31:28.220 --> 01:31:30.220]  тупо говоря.
[01:31:30.220 --> 01:31:32.220]  И вот JavaScript знает, что у него
[01:31:32.220 --> 01:31:34.220]  последнее обновление было, там я не знаю,
[01:31:34.220 --> 01:31:36.220]  на 109 минуте.
[01:31:36.220 --> 01:31:38.220]  И при этом он
[01:31:38.220 --> 01:31:40.220]  вывел, там я не знаю,
[01:31:40.220 --> 01:31:42.220]  74 поста.
[01:31:42.220 --> 01:31:44.220]  Последний номер поста, который у него есть,
[01:31:44.220 --> 01:31:46.220]  74, он запрашивает updates.
[01:31:46.220 --> 01:31:48.220]  И все вроде бы хорошо.
[01:31:48.220 --> 01:31:50.220]  Но в апдейте, например, первый пост
[01:31:50.220 --> 01:31:52.220]  начинается с 76.
[01:31:52.220 --> 01:31:54.220]  Нам же очень
[01:31:54.220 --> 01:31:56.220]  просто понять, что что-то не так.
[01:31:56.220 --> 01:31:58.220]  Что-то не так, все тупо.
[01:31:58.220 --> 01:32:00.220]  Идем к all.html, пересобираем
[01:32:00.220 --> 01:32:02.220]  все заново. И начинается все
[01:32:02.220 --> 01:32:04.220]  сначала. То есть мы просто вводим некой
[01:32:04.220 --> 01:32:06.220]  простейший способ проверить
[01:32:06.220 --> 01:32:08.220]  целостность того, что к нам пришло.
[01:32:08.220 --> 01:32:10.220]  Например, через номер поста.
[01:32:12.220 --> 01:32:14.220]  Или через время
[01:32:14.220 --> 01:32:16.220]  последнего поста. Или что-нибудь еще.
[01:32:16.220 --> 01:32:18.220]  Ну короче, какую-то неважную, какую-то
[01:32:18.220 --> 01:32:20.220]  простую штуку, которую вы JavaScript'ом
[01:32:20.220 --> 01:32:22.220]  можете проверить. И JavaScript
[01:32:22.220 --> 01:32:24.220]  в таком случае у вас хранит две цифры.
[01:32:24.220 --> 01:32:26.220]  Первый хранит время, второй
[01:32:26.220 --> 01:32:28.220]  хранит как раз значение этой самой
[01:32:28.220 --> 01:32:30.220]  чек-суммы.
[01:32:30.220 --> 01:32:32.220]  Какого-то параметра,
[01:32:32.220 --> 01:32:34.220]  через который мы все проверяем.
[01:32:42.220 --> 01:32:44.220]  Почему?
[01:32:44.220 --> 01:32:46.220]  Два запроса у нас получается только
[01:32:46.220 --> 01:32:48.220]  в случае, если мы получили что-то
[01:32:48.220 --> 01:32:50.220]  неволидное. Мы получили,
[01:32:50.220 --> 01:32:52.220]  посчитали неволидно, идем сюда.
[01:32:54.220 --> 01:32:56.220]  Не всегда это происходит.
[01:32:56.220 --> 01:32:58.220]  Это как раз да, это самый редкий кисть.
[01:32:58.220 --> 01:33:00.220]  То есть заходим в первый раз, сразу
[01:33:00.220 --> 01:33:02.220]  идем сюда.
[01:33:02.220 --> 01:33:04.220]  Дальше пытаемся читать апдейтс.
[01:33:04.220 --> 01:33:06.220]  Если что-то ведет не так,
[01:33:06.220 --> 01:33:08.220]  идем сюда. Так, хорошо, а в апдейтсы
[01:33:08.220 --> 01:33:10.220]  у нас...
[01:33:10.220 --> 01:33:12.220]  Мы в канал-то будем влезать?
[01:33:12.220 --> 01:33:14.220]  Какого размера у нас апдейтс?
[01:33:16.220 --> 01:33:18.220]  Ну, допустим, сколько?
[01:33:22.220 --> 01:33:24.220]  Ну, давай.
[01:33:24.220 --> 01:33:26.220]  20 сообщений за две минуты.
[01:33:26.220 --> 01:33:28.220]  Это у нас не 20 килобайтов,
[01:33:28.220 --> 01:33:30.220]  это у нас 2 килобайта.
[01:33:30.220 --> 01:33:32.220]  То есть это означает, что у нас
[01:33:32.220 --> 01:33:34.220]  не 18 гигабит нам нужно,
[01:33:34.220 --> 01:33:36.220]  а 1,8.
[01:33:36.220 --> 01:33:38.220]  Потому что я неправильно считаю, да.
[01:33:38.220 --> 01:33:40.220]  16.
[01:33:40.220 --> 01:33:42.220]  1,6.
[01:33:42.220 --> 01:33:44.220]  Ну, 1,6 гигабита
[01:33:44.220 --> 01:33:46.220]  тоже плохо, конечно.
[01:33:46.220 --> 01:33:48.220]  Многовато.
[01:33:48.220 --> 01:33:50.220]  Что делать?
[01:33:50.220 --> 01:33:52.220]  Нормально.
[01:33:52.220 --> 01:33:54.220]  Ну, 1,6 гигабит
[01:33:54.220 --> 01:33:56.220]  это гарантированно, что тебе нужно
[01:33:56.220 --> 01:33:58.220]  1,6 гигабита.
[01:33:58.220 --> 01:34:00.220]  Ну, 1,6 гигабита
[01:34:00.220 --> 01:34:02.220]  это гарантированно, что тебе нужно
[01:34:02.220 --> 01:34:04.220]  1,6 гигабита.
[01:34:04.220 --> 01:34:06.220]  Это гарантированно, что тебе нужно
[01:34:06.220 --> 01:34:08.220]  10 гигабитный интерфейс.
[01:34:10.220 --> 01:34:12.220]  А 2 гигабита есть?
[01:34:16.220 --> 01:34:18.220]  Ну, допустим.
[01:34:18.220 --> 01:34:20.220]  Ну, хорошо. Но все равно не круто.
[01:34:20.220 --> 01:34:22.220]  Мы очень жестко его используем.
[01:34:22.220 --> 01:34:24.220]  А если вдруг что не так?
[01:34:26.220 --> 01:34:28.220]  На нас ссылку опубликовали
[01:34:28.220 --> 01:34:30.220]  где-нибудь.
[01:34:30.220 --> 01:34:32.220]  Раз у нас все идут
[01:34:32.220 --> 01:34:34.220]  и идет махом
[01:34:34.220 --> 01:34:36.220]  поток новых пользователей.
[01:34:36.220 --> 01:34:38.220]  Не знаю.
[01:34:38.220 --> 01:34:40.220]  На 89-й минуте
[01:34:40.220 --> 01:34:42.220]  происходит какое-то чудо.
[01:34:42.220 --> 01:34:44.220]  Россия выходит в финал чемпионата мира.
[01:34:44.220 --> 01:34:46.220]  Все про это узнали, все побежали смотреть.
[01:34:46.220 --> 01:34:48.220]  У нас бат сфига за минуту.
[01:34:48.220 --> 01:34:50.220]  Пришло еще там, не знаю, еще
[01:34:50.220 --> 01:34:52.220]  полмиллиона человек.
[01:34:52.220 --> 01:34:54.220]  И все они качают в первый раз
[01:34:54.220 --> 01:34:56.220]  олах это имейт. И все. У нас все легло.
[01:34:56.220 --> 01:34:58.220]  Уперлась в канал.
[01:34:58.220 --> 01:35:00.220]  Что делать?
[01:35:02.220 --> 01:35:04.220]  У нас пока да.
[01:35:06.220 --> 01:35:08.220]  А как вы сделаете 2?
[01:35:16.220 --> 01:35:18.220]  Так, то есть вы просто
[01:35:18.220 --> 01:35:20.220]  тупо ставите 2 сервера.
[01:35:20.220 --> 01:35:22.220]  На оба из них кладете оба файла, так?
[01:35:24.220 --> 01:35:26.220]  И тогда пишет админка.
[01:35:28.220 --> 01:35:30.220]  Ну, хорошо.
[01:35:30.220 --> 01:35:32.220]  Лады.
[01:35:40.220 --> 01:35:42.220]  Так, что еще здесь может сломаться?
[01:36:00.220 --> 01:36:02.220]  Хороший вопрос. Что будем делать?
[01:36:04.220 --> 01:36:06.220]  Итак, мы оставляем пока вот этот вариант.
[01:36:14.220 --> 01:36:16.220]  Это пятая стадия.
[01:36:16.220 --> 01:36:18.220]  То, что я сейчас делаю.
[01:36:18.220 --> 01:36:20.220]  Это называется попытаемся ломаем.
[01:36:22.220 --> 01:36:24.220]  Попытаемся сломать.
[01:36:24.220 --> 01:36:26.220]  Что будем делать,
[01:36:26.220 --> 01:36:28.220]  если не?
[01:36:28.220 --> 01:36:30.220]  У нас 2 сервера.
[01:36:32.220 --> 01:36:34.220]  На обоих из них
[01:36:34.220 --> 01:36:36.220]  лежат оба файла.
[01:36:38.220 --> 01:36:40.220]  Как писать?
[01:36:42.220 --> 01:36:44.220]  У нас есть некая админка.
[01:36:44.220 --> 01:36:46.220]  У нас есть редакторская интерфейс.
[01:36:46.220 --> 01:36:48.220]  Который записывает
[01:36:48.220 --> 01:36:50.220]  оба файла.
[01:36:54.220 --> 01:36:56.220]  Нет, погоди. Есть проблема?
[01:36:56.220 --> 01:36:58.220]  Атомарные записи.
[01:36:58.220 --> 01:37:00.220]  Представляете, что такое?
[01:37:00.220 --> 01:37:02.220]  Грубо говоря, файловая система
[01:37:02.220 --> 01:37:04.220]  не совсем атомарна.
[01:37:04.220 --> 01:37:06.220]  Если вы пишете что-то в файл,
[01:37:06.220 --> 01:37:08.220]  файловая система не гарантирует вам,
[01:37:08.220 --> 01:37:10.220]  что вы в этот же момент
[01:37:10.220 --> 01:37:12.220]  можете что-то читать.
[01:37:12.220 --> 01:37:14.220]  У файловой системы есть
[01:37:14.220 --> 01:37:16.220]  атомарные записи.
[01:37:16.220 --> 01:37:18.220]  Атомарные функции.
[01:37:18.220 --> 01:37:20.220]  А есть не атомарные.
[01:37:20.220 --> 01:37:22.220]  Вот если вы просто делаете
[01:37:22.220 --> 01:37:24.220]  file upon,
[01:37:24.220 --> 01:37:26.220]  и вы туда добавляете,
[01:37:26.220 --> 01:37:28.220]  это не хига не атомарная история.
[01:37:32.220 --> 01:37:34.220]  Окей, согласен.
[01:37:34.220 --> 01:37:36.220]  А move – атомарная.
[01:37:38.220 --> 01:37:40.220]  Операция переименовывания файлов
[01:37:40.220 --> 01:37:42.220]  она атомарная.
[01:37:44.220 --> 01:37:46.220]  Понимаете, у вас файлик,
[01:37:46.220 --> 01:37:48.220]  вы добавляете в него вот этот кусочек.
[01:37:48.220 --> 01:37:50.220]  Если вы тут делаете upon,
[01:37:50.220 --> 01:37:52.220]  то кто-то читает, может считать
[01:37:52.220 --> 01:37:54.220]  вот такой кусок от файлов.
[01:37:58.220 --> 01:38:00.220]  У нас не чек-сумма,
[01:38:00.220 --> 01:38:02.220]  у нас ID-шник.
[01:38:02.220 --> 01:38:04.220]  Это у нас такая чек-сумма,
[01:38:04.220 --> 01:38:06.220]  просто для проверки.
[01:38:06.220 --> 01:38:08.220]  Некий ID-шник, который мы проверяем,
[01:38:08.220 --> 01:38:10.220]  что все идет по следователю.
[01:38:12.220 --> 01:38:14.220]  Мы это обходим как?
[01:38:14.220 --> 01:38:16.220]  Мы пишем не в эти файлы,
[01:38:16.220 --> 01:38:18.220]  мы сначала пишем
[01:38:18.220 --> 01:38:20.220]  в файл, например,
[01:38:20.220 --> 01:38:22.220]  аа1 уа1,
[01:38:22.220 --> 01:38:24.220]  а потом вызываем
[01:38:24.220 --> 01:38:26.220]  процедуру move.
[01:38:26.220 --> 01:38:28.220]  аа1 в а.
[01:38:30.220 --> 01:38:32.220]  А move – атомарная?
[01:38:34.220 --> 01:38:36.220]  Move меняет, да,
[01:38:36.220 --> 01:38:38.220]  move – атомарная,
[01:38:38.220 --> 01:38:40.220]  если она при этом не копирует
[01:38:40.220 --> 01:38:42.220]  данные из разных томов.
[01:38:44.220 --> 01:38:46.220]  То есть, если у вас лежат эти файлики рядышком,
[01:38:46.220 --> 01:38:48.220]  в рамках одной, не знаю,
[01:38:48.220 --> 01:38:50.220]  что это говорит.
[01:38:50.220 --> 01:38:52.220]  Move – атомарная, да,
[01:38:52.220 --> 01:38:54.220]  она переводит переименование
[01:38:54.220 --> 01:38:56.220]  в таблице адресации.
[01:38:56.220 --> 01:38:58.220]  Ну, типа того, да.
[01:38:58.220 --> 01:39:00.220]  Не суть важна, нам важно,
[01:39:00.220 --> 01:39:02.220]  что она атомарна.
[01:39:06.220 --> 01:39:08.220]  Выглядит как план?
[01:39:18.220 --> 01:39:20.220]  Что делать, если вот эта вот френь сломалась?
[01:39:24.220 --> 01:39:26.220]  Не, подожди.
[01:39:26.220 --> 01:39:28.220]  Ааа...
[01:39:28.220 --> 01:39:30.220]  Ааа...
[01:39:30.220 --> 01:39:32.220]  Ааа...
[01:39:32.220 --> 01:39:34.220]  Ааа...
[01:39:34.220 --> 01:39:36.220]  Ааа...
[01:39:36.220 --> 01:39:38.220]  Ааа...
[01:39:38.220 --> 01:39:40.220]  Ааа...
[01:39:40.220 --> 01:39:42.220]  Ааа...
[01:39:42.220 --> 01:39:44.220]  Ааа...
[01:39:44.220 --> 01:39:46.220]  Ааа...
[01:39:46.220 --> 01:39:48.220]  Подожди.
[01:39:48.220 --> 01:39:50.220]  Ааа...
[01:39:50.220 --> 01:39:52.220]  Клиенты у нас теперь подсоединятся к этой,
[01:39:52.220 --> 01:39:54.220]  начнут с ней работать,
[01:39:54.220 --> 01:39:56.220]  мы это в толстой клиент запрограммируем.
[01:39:56.220 --> 01:39:58.220]  А редакцию к моему интерфейсу что делать?
[01:40:02.220 --> 01:40:04.220]  Ну, смотри.
[01:40:04.220 --> 01:40:06.220]  Хорошо.
[01:40:06.220 --> 01:40:08.220]  Через какое-то время вот эта штука восстановилась.
[01:40:10.220 --> 01:40:12.220]  Что тогда происходит?
[01:40:12.220 --> 01:40:14.220]  Тогда у нас
[01:40:14.220 --> 01:40:16.220]  новые клиентики,
[01:40:16.220 --> 01:40:18.220]  которые...
[01:40:18.220 --> 01:40:20.220]  То есть тогда редакторский интерфейс
[01:40:20.220 --> 01:40:22.220]  ее обновит только при очередной записи.
[01:40:22.220 --> 01:40:24.220]  Так?
[01:40:24.220 --> 01:40:26.220]  А до этого они у нас...
[01:40:26.220 --> 01:40:28.220]  Ааа...
[01:40:28.220 --> 01:40:30.220]  Вот когда у вас возникает такой вопрос,
[01:40:30.220 --> 01:40:32.220]  вы параллелькуете к продукту и спрашиваете,
[01:40:32.220 --> 01:40:34.220]  а что делать?
[01:40:34.220 --> 01:40:36.220]  У нас там два сервера.
[01:40:36.220 --> 01:40:38.220]  Вероятность того, что он выйдет из строя
[01:40:38.220 --> 01:40:40.220]  именно в момент трансляции,
[01:40:40.220 --> 01:40:42.220]  примерно такая.
[01:40:42.220 --> 01:40:44.220]  Надо ли нам про это что-то думать?
[01:40:44.220 --> 01:40:46.220]  Если он скажет надо,
[01:40:46.220 --> 01:40:48.220]  то тогда вы начинаете думать о том,
[01:40:48.220 --> 01:40:50.220]  как один сервер, что означает восстановиться
[01:40:50.220 --> 01:40:52.220]  и так далее.
[01:40:52.220 --> 01:40:54.220]  Какой самый простой способ
[01:40:54.220 --> 01:40:56.220]  их синхронизировать?
[01:40:56.220 --> 01:40:58.220]  ...
[01:40:58.220 --> 01:41:00.220]  ...
[01:41:00.220 --> 01:41:02.220]  ...
[01:41:02.220 --> 01:41:04.220]  ...
[01:41:04.220 --> 01:41:06.220]  ...
[01:41:06.220 --> 01:41:08.220]  ...
[01:41:08.220 --> 01:41:10.220]  Вот мы как...
[01:41:10.220 --> 01:41:12.220]  В какой момент и как мы будем это реплицировать?
[01:41:14.220 --> 01:41:16.220]  Не, ну подожди, руками.
[01:41:16.220 --> 01:41:18.220]  Вот руками нельзя ничего делать.
[01:41:18.220 --> 01:41:20.220]  Вот ты перезагружаешь его.
[01:41:20.220 --> 01:41:22.220]  Вот он перезагрузился, поднялся.
[01:41:22.220 --> 01:41:24.220]  ...
[01:41:24.220 --> 01:41:26.220]  ...
[01:41:26.220 --> 01:41:28.220]  ...
[01:41:28.220 --> 01:41:30.220]  ...
[01:41:30.220 --> 01:41:32.220]  ...
[01:41:32.220 --> 01:41:34.220]  ...
[01:41:34.220 --> 01:41:36.220]  ...
[01:41:36.220 --> 01:41:38.220]  ...
[01:41:38.220 --> 01:41:40.220]  ...
[01:41:40.220 --> 01:41:42.220]  ...
[01:41:42.220 --> 01:41:44.220]  ...
[01:41:44.220 --> 01:41:46.220]  ...
[01:41:46.220 --> 01:41:48.220]  ...
[01:41:48.220 --> 01:41:50.220]  ...
[01:41:50.220 --> 01:41:52.220]  ...
[01:41:52.220 --> 01:42:09.340]  можно но не надо да блин ставьте сюда процесс загрузки машины синхронизировать все с другой
[01:42:09.340 --> 01:42:24.540]  и все уговорил да короче при загрузке машины просто-напросто возьмите и садите в не знаю
[01:42:24.540 --> 01:42:27.300]  сингом каким-нибудь за папочку
[01:42:27.300 --> 01:42:38.420]  команда юниксовая которая синхронизирует две папочки ну или там две машинки
[01:42:38.420 --> 01:42:51.780]  ну блин а вас вы юникс не изучали ни в каком виде
[01:42:51.780 --> 01:43:07.140]  в любого по большому счету в любой операционной системе есть некие некие инструкции которые ты
[01:43:07.140 --> 01:43:12.460]  можешь задать как разработчик программист как сис админ которые должны будет выполняться в
[01:43:12.460 --> 01:43:26.060]  процессе загрузки ну в этом как она называется виндус там даже там просто бот файл ботничек
[01:43:26.060 --> 01:43:38.380]  короче любым способом это что напоминает помните у нас с вами была история с кишом со стартом
[01:43:38.380 --> 01:43:46.500]  с холодным кишом когда у нас машина с кишом перезагружалась она загружалась и в кэше было
[01:43:46.500 --> 01:43:56.860]  ничего очень простое решение точно также вставить процесс загрузки обновления этого киша самыми
[01:43:56.860 --> 01:44:05.620]  простыми самыми часто встречающимся объектами вот тоже самое так точно такой подход все ребят
[01:44:05.620 --> 01:44:11.180]  в принципе мы с вами спроектировали очень простую систему редакторский интерфейс пишет на две
[01:44:11.180 --> 01:44:17.780]  машины в два файла в одном всегда все в другом только последние там не знаю 120 секунд плюс
[01:44:17.780 --> 01:44:24.100]  javascript которого есть две перед внутренние переменные одна время второе это айдишник
[01:44:24.100 --> 01:44:31.180]  последнего сообщения при первом запросе мы запрашиваем пол хт мл при всех последующих мы
[01:44:31.180 --> 01:44:38.000]  смотрим сколько времени прошло и прошло меньше минуты запрашиваем updates смотрим
[01:44:38.000 --> 01:44:42.340]  что у нас вернулась в апдейте проверяем его целостность проверяем что все номера идут
[01:44:42.340 --> 01:44:48.860]  последовательно после чего идем в если не последовательно идем запрашиваем пол если
[01:44:48.860 --> 01:44:55.460]  последовательно то выводим содержима updates как хранить данные вот здесь в каком виде
[01:44:55.460 --> 01:45:04.460]  лучше джейсончик чем хт мл можно хт мл но лучше джейсончик почему джейсончик потому что
[01:45:04.460 --> 01:45:10.140]  ты оперирует то что здесь javascript соответственно ему проще всего оперировать собственные массивы все
[01:45:10.140 --> 01:45:16.100]  вот вся архитектура а теперь добавить сюда картинки
[01:45:16.100 --> 01:45:27.940]  куда так
[01:45:34.900 --> 01:45:45.700]  да сначала ты поспрашиваешь про то что потом купишь cdn да посчитаешь сколько тебе нужно
[01:45:45.860 --> 01:45:49.420]  картинок и так далее а как их сюда то
[01:46:05.140 --> 01:46:12.540]  короче либо cdn либо простой хранитель который будет балансировать между картинками как выбрать
[01:46:15.700 --> 01:46:30.860]  с разных концов свет короче по счету по почитать умножить средний размер картинки на количество
[01:46:30.860 --> 01:46:43.380]  запросов на то как и часто не появляется и так далее cdn эта история просто кто-то за вас
[01:46:43.380 --> 01:46:51.620]  сделает поставить frontend и его настроить просто в нескольких различных точках земного шара и вы
[01:46:51.620 --> 01:46:58.020]  себе нам общаетесь как с некой единой сущностью вы и говорите выложи к себе вот эту картинку она
[01:46:58.020 --> 01:47:04.100]  ее выкладывает возвращает себе адрес и этот адрес в чем плюс cdn в том что он по большому счету
[01:47:04.100 --> 01:47:11.020]  подстраивается под пользователях да то есть например пользователи с бразилии cdn состоит
[01:47:11.020 --> 01:47:15.060]  из многих серверов которые по всему миру разбросаны пользователь из бразилии не пойдет в
[01:47:15.060 --> 01:47:21.700]  россию пойдет сервер бразилии стоит за этой картинкой так далее cdn тебе вернет некую
[01:47:21.700 --> 01:47:27.580]  универсальную некий универсальный урок который ты вставишь куда внутрь вот этих вот самых
[01:47:27.580 --> 01:47:31.860]  сообщений все точно так же
[01:47:31.860 --> 01:47:46.380]  load balancer это громко сказано у нас в этом случае просто нам нужно мы посчитаем например что с
[01:47:46.380 --> 01:47:53.500]  нашим трафиком с такой с нашими каналами с такой нагрузкой справится например 5 отдающих серверов
[01:47:53.500 --> 01:48:00.020]  картины но еще мы ставим просто на просто 5 серверов картинок на них простой frontend на них
[01:48:00.020 --> 01:48:12.780]  engine x который тупо отдает эти картинки и все да а их ты можешь да а их и round robin на уровне dns
[01:48:12.780 --> 01:48:21.340]  балансируешь но смысл это и есть как бы ну в нашей терминологии франк смеешь в виду что здесь нет
[01:48:21.340 --> 01:48:32.460]  и не стоит какой-нибудь циски которые занимается балансировкой не нужно можно но не надо
[01:48:35.900 --> 01:48:41.100]  так все в следующий раз будем проектировать сами все-таки frontend и facebook
