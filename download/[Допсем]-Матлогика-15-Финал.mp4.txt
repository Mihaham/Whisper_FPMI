[00:00.000 --> 00:09.120]  Теперь, то, что ты делал в логике с высказами, можно
[00:09.120 --> 00:16.240]  делать точно так же с типами и выводом типов.
[00:16.240 --> 00:18.560]  И, например, оказывается, есть такая штука, как соответствие
[00:18.560 --> 00:21.640]  Карриф Хорварда, который утверждает, что любая формула
[00:21.640 --> 00:25.360]  первого порядка мы можем перейти в какой-то тип,
[00:25.360 --> 00:28.660]  и дальше просто оперируясь типами, мы можем доказывать
[00:28.660 --> 00:31.060]  выражение в...
[00:31.060 --> 00:39.060]  Это типа как мы кодируем, чтобы потом...
[00:39.060 --> 00:41.540]  Типа того, ну, на самом деле, ну, просто пример, что
[00:41.540 --> 00:46.380]  у меня там есть какое-нибудь выражение, что ну, сейчас
[00:46.380 --> 00:48.540]  скажу, вот, например, я могу вести типу натуральное
[00:48.540 --> 00:49.540]  число.
[00:49.540 --> 00:53.460]  Натуральное число, но я буду писать как-то в программе
[00:53.460 --> 00:57.460]  есть, например, язык Hustle есть, там, в Olysem, у нас есть
[00:57.460 --> 01:05.820]  натуральное число. Его можно определить следующим образом, что у нас это либо
[01:05.820 --> 01:12.820]  ноль, либо это следующее за натуральное число. У нас есть два варианта
[01:12.820 --> 01:19.020]  получения того типа. У нас есть ноль, а есть следующее за некоторое натуральное число.
[01:19.020 --> 01:24.900]  Дальше мы можем делать что? Мы можем, например, доказать, мы можем сказать такое
[01:24.900 --> 01:31.620]  больше-меньше-либо равно. Там, например, что? Снова, меньше-либо равно это какое-то
[01:31.620 --> 01:37.020]  утверждение в логике первого порядка. Мы же, если это утверждение, то мы переводим
[01:37.020 --> 01:53.740]  в какой-то тип. Ну, вот, например, data less than. Это тип меньше-либо равно. Это даже не
[01:53.740 --> 02:03.500]  чисто. Как он работает? Что? Сейчас. LTE, он берет в себя как? Он принимает некоторое
[02:03.500 --> 02:09.740]  натуральное число, дальше принимает второе натуральное число. Ну, и пишется так, что
[02:09.740 --> 02:16.660]  типа это мы получаем некоторый тип. Ну, и там дальше пишется, например, where. И мы говорим,
[02:16.660 --> 02:22.500]  что каким способом вообще можно получить такой тип? Давай я скажу less than or equal.
[02:22.500 --> 02:38.460]  Можно сказать, что LTE 0. Это у нас что? Если мы возьмем 0, то есть 0 это какой-то тип. Вот так вот.
[02:38.460 --> 02:45.660]  Если мы возьмем тип, какое-то дальше мы возьмем произвольное натуральное число, то мы получим
[02:45.660 --> 02:59.740]  LTE 0 n. Ну, то есть, если я возьму 0, какое-то произвольное, я получу действительно, что это тип
[02:59.740 --> 03:08.740]  0 меньше-либо равно. Я могу сделать там, есть такая штука как LTSA. Если мы возьмем здесь что? У нас
[03:08.740 --> 03:18.180]  может быть либо 0, либо следующий за каким-то. Ну вот, следующий за n. Дальше я должен буду взять что?
[03:18.180 --> 03:30.060]  Мне нужно взять что-то за чем-то предыдущим. То, если это, сейчас скажу,
[03:30.060 --> 03:45.140]  меньше-либо равно. Если 0 это всегда, если здесь следующий за n, мне нужно получить следующий за k
[03:45.140 --> 03:52.780]  и спуститься к тому. Я возьму следующий за k. Дальше, ну вообще там, например, можно сказать,
[03:52.780 --> 04:05.100]  что если есть тип LTE от nk, записать так, что это типа компилятор языка может вывести, то тогда я получу
[04:05.100 --> 04:16.540]  LTE за вот sn sk. Но это уже как раз по сути введение такого типа. Дальше более сложное, но тут можно делать
[04:16.540 --> 04:25.180]  более продвинутый паттерн матчинг. Например, по сути, switch по инаму, это вот немножко
[04:25.180 --> 04:37.020]  сфункциональное программирование. Да, ну по сути, буквально, например, есть язык скала. Он с одной
[04:37.020 --> 04:45.180]  стороны, да, он с одной стороны совмещает в себя объектно-ориентированное программирование из
[04:45.660 --> 04:51.340]  джава. С другой стороны, у него есть функциональные программирования. Например, я не помню в каком году
[04:51.340 --> 04:58.860]  там была научная работа, которая доказала, что система типов языка джава, система типов языка
[04:58.860 --> 05:07.500]  скала противоречила. И поэтому создатели языка скала пошли и создали сначала систему типов. Я не помню, там
[05:07.500 --> 05:13.460]  как-то есть название хорошее для этого всего. И на основе этой системы типов они пошли строить самый
[05:13.460 --> 05:22.260]  язык. И в результате, например, для скала в спецификации, там прям есть такая табличка. Она
[05:22.260 --> 05:27.860]  похожа на какие-то вот эти вот правила вывода, как в там с модом с поносами и прочей вот этой
[05:27.860 --> 05:33.900]  истории. Только теперь это для типов. Вот есть правила вывода, и на основе этих правил вывода типов
[05:33.900 --> 05:36.700]  работает язык скала, работает его там компилятор.
[06:04.260 --> 06:11.020]  Японский бог как меня засрала. Это сложности.
[06:11.020 --> 06:14.700]  Пару секунд.
[06:14.700 --> 06:17.540]  ТП.
[06:17.780 --> 06:30.620]  122 это.
[06:30.620 --> 06:46.420]  Вадя Тупаев помогал меня. Что-нибудь интереснее где это у меня было.
[06:46.420 --> 06:49.300]  Вот это вроде.
[07:01.380 --> 07:02.340]  Все.
[07:02.340 --> 07:10.500]  Ладно, поехали.
[07:10.500 --> 07:29.580]  Сейчас перекомпилирую.
[07:40.500 --> 07:55.540]  Ну, в общем, последняя тема, лямбда исчисления. Это альтернативный подход к тому, как можно
[07:55.540 --> 08:01.700]  вести вычисления. В прошлый раз мы говорили про машину Сьюринга и как можно использовать машину
[08:01.700 --> 08:10.460]  Сьюринга подходить к вычислениям. Теперь же у нас будет другая абсолютная история, которая больше
[08:10.460 --> 08:19.620]  основана на синтаксисе. Начнем вводить вообще лямбда исчисления. Давайте я скажу первое, что у меня есть
[08:19.620 --> 08:35.940]  некоторое множество лямбда большое. Это множество лямбда термо. Мы его будем вводить следующим образом.
[08:35.940 --> 08:47.220]  Во-первых, давайте как в прошлые разы зафиксируем множество вар. Это было счетное множество каких-то
[08:47.220 --> 08:53.900]  переменных, которые мы можем использовать в нашем языке. Дополнительно в наш язык нам понадобится
[08:53.900 --> 09:03.700]  алфавит, состоящий из символа лямбда, который будет специальным, давайте скажем так, лямбда квантором.
[09:03.700 --> 09:18.100]  Дальше нам понадобятся скобки и можно там сказать, что нам понадобится точка, но точка это такой,
[09:18.100 --> 09:28.620]  синтактический сахар. В целом на этом все, что нам нужно закончилось. Как мы будем вводить вообще множество
[09:28.620 --> 09:36.740]  лямбда термов, то есть каких-то слов в нашем языке. Первым делом мы строим базу нашего индексивного
[09:36.740 --> 09:48.900]  определения. Базой будет множество переменных. Мы считаем, что вот оно счетное. Если х принадлежит
[09:48.900 --> 10:05.580]  переменным, то х принадлежит множеству лямбда термов. Второе. Эта штука называется аппликацией, но если мы
[10:05.580 --> 10:13.980]  попробуем перевести на русский язык, это применение. То есть, если у меня есть некоторый терм, дайте его назову,
[10:13.980 --> 10:34.180]  не буду лямбда использовать. У меня есть мю1, есть мю2, это некоторые два лямбда термов, то мю1, мю2 в скобках принадлежит множеству
[10:34.180 --> 10:45.220]  лямбда термов. Это буквально будет означать, что у нас есть некоторый терм, некоторые другой терм, мы их вместе написали.
[10:45.220 --> 10:54.540]  Интерпретацию этой истории будет применение. Ну, например, если мы вспомним баш, то, как ни странно, у нас, например,
[10:54.540 --> 11:08.620]  эхо что-то там, это будет означать, что у нас есть некоторый терм эхо, некоторый терм такой, и мы применяем терм эхо к этому терму и получаем
[11:08.620 --> 11:33.220]  некоторые значения. Да, все хорошо. Дальше терм называется лямбда абстракция. У меня есть некоторый мю, принадлежит лямбда большое, тогда лямбда х, мю,
[11:33.220 --> 11:58.820]  ну я поставлю точку, принадлежит лямбда. Ну давайте я скобочки еще поставлю. Так мы ввели понятие того, что есть лямбда терм, с каким вообще множеством мы работаем.
[11:58.820 --> 12:10.820]  Также нам потребуется определить некоторые два вспомогательные множества. Первое, например, мы можем определить множество свободных переменных.
[12:10.820 --> 12:39.820]  От некоторого терма мю, это множество свободных переменных. По аналогии с исчислением предикатов,
[12:39.820 --> 12:49.820]  свободной переменной мы назовем ту, по которой не стоит лямбда квантор. Как мы его определяем? Определяем аналогично исчислению предикатов индиктивно.
[12:49.820 --> 13:14.820]  Ф и В, а то free variables. Первое, это что если х принадлежит вар, то есть на самом деле мы делаем в некотором смысле switch по построению.
[13:14.820 --> 13:24.820]  У нас есть некоторые способы построения и мы теперь просто разбираем каждый способ построения и по нему идем. У нас есть первый способ построения, что это х принадлежит множеству вар.
[13:24.820 --> 13:42.820]  Тогда мы говорим, что означает free variables от х. Free variables от х будет самим х, потому что по нему не стоит квантор.
[13:42.820 --> 14:06.820]  Второе, у нас есть мю1, мю2 принадлежат множеству лямбда термов, тогда free variables от, дайте я буду квадратную скобку писать, чтобы не было колизий скобок.
[14:06.820 --> 14:25.820]  Free variables от аппликации мю1, мю2, это есть free variables от мю1 объединить free variables от мю2.
[14:25.820 --> 14:33.820]  И последний способ построения лямбда термов, это лямбда аппликация, лямбда абстракция.
[14:33.820 --> 15:01.820]  Поэтому если мю принадлежит лямбда, то лямбда точка х мю, точнее множество свободных переменных от него будет равняться free variables от
[15:01.820 --> 15:11.820]  мю без переменной, по которой произошла абстракция.
[15:11.820 --> 15:15.820]  Все супер.
[15:15.820 --> 15:41.820]  Аналогично множеству свободных переменных можно задать множество связных переменных, правильно это называется bound variables на английском языке, поэтому bv от мю множество связных переменных.
[15:45.820 --> 16:05.820]  Его можно аналогично провести индуктивное определение, можно определить также функцию var от мю, которая будет принимать некоторые лямбда терм и по нему сообщать, какие переменные в нем используются.
[16:05.820 --> 16:12.820]  И понятно, что var от мю это дизюнктное объединение bv и fv.
[16:12.820 --> 16:33.820]  У нас есть теперь какие-то операции со словами, есть просто слова, дальше мы будем вводить на этих словах некоторые операции, которые в целом и будут пытаться как-то объяснять, что такое вычисление.
[16:33.820 --> 16:39.820]  Основных операций мы рассмотрим две, их можно делать побольше, но мы будем рассматривать его на две.
[16:39.820 --> 16:49.820]  Первая операция называется альфа конверсии, я буду называть это альфа эквалентностью.
[16:49.820 --> 17:17.820]  Идея альфа эквалентности такая, что у меня есть некоторый терм лямбда, и он в себе содержит некоторую переменную, давайте я назову v, он в ней участвует в качестве, сейчас скажу,
[17:17.820 --> 17:36.820]  тогда я могу альфа эквалентностью перевести его в терм лямбда, но где вместо v я подставлю новую переменную, то есть вместо v я подставлю переменную w.
[17:36.820 --> 18:02.820]  Например, давайте рассмотрим терм, первый случай это a-b-c, я могу, что скажу, здесь важные условия, что v должна принадлежать множеству
[18:02.820 --> 18:27.820]  ограниченных переменных. То есть, например, если мы попытаемся здесь перевести альфу в какой-нибудь там d, то эти два терма не равны.
[18:27.820 --> 18:51.820]  Дальше следующим ограничением на перевод у нас будет, что w не должен создавать корризии, давайте я возьму не как отдельные условия, что w не должен создавать корризии,
[18:51.820 --> 19:12.820]  а я возьму более сильные условия, что я скажу, что w просто не принадлежит множеству, ладно, не буду я делать такое требование, просто w,
[19:12.820 --> 19:36.820]  как у нас можно получить корризии, например, лямбда xy, xyy, да даже не так, лямбда xy, лямбда x, дальше в скобках,
[19:36.820 --> 20:00.820]  лямбда ww, и здесь будет xww, вот я могу попробовать сделать что, давайте я переведу v в x, то есть лямбда x,
[20:00.820 --> 20:21.820]  лямбда xw, xxw, что получается, у нас здесь было ранее две различные переменные, здесь они слились в одну, поэтому такое тоже нельзя.
[20:21.820 --> 20:43.820]  Корректным бы здесь был перевод, если бы я переводил v в, например, переменную a, то есть лямбда x. лямбда aw, xaw.
[20:43.820 --> 21:00.820]  Вторая вещь, это бета-редукция, данная трансформация лямбда термов работает следующим образом.
[21:00.820 --> 21:15.820]  Нет, переименовать их не разрешается.
[21:15.820 --> 21:34.820]  Дальше, бета-редукция, что мы производим, у нас есть некоторый терм вида лямбда x. mu от x,
[21:34.820 --> 21:57.820]  что у нас есть лямбда x, mu используется где-то x, и дальше приписан некоторый терм mu, тогда мы можем провести бета-редукцию, каким образом ее можно
[21:57.820 --> 22:15.820]  осуществить. Мы просто подставим вместо xa в, в это какой-то произвольный терм. Опять же, у нас аналогичная история с тем, что данная замена не должна создавать коллизий.
[22:15.820 --> 22:35.820]  Не может случиться такого, что у нас был терм лямбда x, дайте я скажу, xy и лямбда, я скажу,
[22:35.820 --> 22:57.820]  лямбда xy. xy, а здесь будет лямбда y. y. Например, бета-редукция вида, когда мы вместо y поставим такое, лямбда y. y. y.
[22:57.820 --> 23:26.820]  она нехорошая. На самом деле ее можно дальше работать, но давайте я лучше скажу,
[23:26.820 --> 23:49.820]  я не так сделаю, я сделаю вот так, мне же никто не помешает, я сделаю y, сделаю w. Вот так вот я делаю, лямбда y. Вот, какова красота.
[23:49.820 --> 23:59.820]  Вот, например, такую штуку точно нельзя производить. Почему? Что здесь у нас свободная w, а тут внезапно она стала связана.
[23:59.820 --> 24:19.820]  И вообще вот эти все размышления наталкивают на то, что, например, все трансформации должны так или иначе сохранять равенство множестве связанных и свободных переменных.
[24:19.820 --> 24:34.820]  В целом, это одно из необходимых условий для равенства лямбда термов, но для того, чтобы начать говорить про равенство лямбда термов, нужно еще поговорить о нескольких моментах.
[24:34.820 --> 24:51.820]  Первый момент это то, а как нам здесь провести вообще бета-редукцию. Кажется, что здесь все хорошо, по идее мы можем это как-то сделать, но непонятно, что это и как.
[24:51.820 --> 25:10.820]  Для этого мы разрешим более продвинутое преобразование, которое будет, давайте назовем его двумя стрелочками, тоже еще одна трансформация лямбда термов.
[25:10.820 --> 25:37.820]  Я буду называть ее как раз учислением. В чем смысл вот этой вот штуки? В том, что теперь мы можем комбинировать альфа эквалентности бета-редукцию.
[25:37.820 --> 25:53.820]  То есть у меня есть некоторый терм ню, и он бета-редуцируется к терму ню.
[25:53.820 --> 26:09.820]  Тогда терм ню, его можно преобразовать такой более сложной двойной стрелочкой к терму ню.
[26:09.820 --> 26:24.820]  Дальше у меня есть терм ню, который можно альфа эквалентно перевести в ню. Тогда я могу ню уже более сложным образом перевести в ню.
[26:24.820 --> 26:47.820]  И дальше, если у меня есть ню, если у меня ню переводится в ню,
[26:47.820 --> 27:06.820]  а ню переводится в пи, то ню можно будет вести к пи.
[27:06.820 --> 27:19.820]  То есть в некотором смысле, что здесь? Мы сделали замыкание одновременно и вот этого порядка, и вот этого порядка.
[27:19.820 --> 27:29.820]  Понятно, что если у меня есть преобразование, то это порядок. Здесь просто классический частичный порядок, здесь предпорядок, который оказывается эквалентностью.
[27:29.820 --> 27:35.820]  Потому что если мы в одну сторону переименовали, мы в обратную сторону также можем вернуть те перемены.
[27:35.820 --> 27:43.820]  Здесь мы объединили переименование и бета-редукцию.
[27:43.820 --> 27:50.820]  Включается, что теперь мы можем сделать? Мы можем вот эту штуку перевести сюда. Почему?
[27:50.820 --> 28:09.820]  Потому что здесь я переименую перемену w, x будет не w, а просто w, x, y, λ, y, w.
[28:09.820 --> 28:37.820]  Я это вот сюда перевел альфа эквалентностью. Дальше я провожу бета-редукцию до лямда v, дальше лямда y, точка w от y на сюда.
[28:37.820 --> 28:47.820]  И на самом деле я могу провести еще одну редукцию здесь и получить вообще лямда w, w.
[28:47.820 --> 29:07.820]  Вроде не ошибся.
[29:07.820 --> 29:32.820]  Вроде не ошибся.
[29:32.820 --> 29:42.820]  Давайте я гляну, что там мне написано.
[30:02.820 --> 30:16.820]  Вроде не ошибся.
[30:16.820 --> 30:44.820]  Теперь мы начинаем из вот этого отношения порождать отношение равенства на лямдо t.
[30:44.820 --> 30:54.820]  В следующем образе мы говорим, что отношение равенства на лямдо t.
[30:54.820 --> 31:14.820]  То есть если терм mu, я могу свести к nu, то mu равняется nu.
[31:14.820 --> 31:30.820]  Если я наоборот ню свел к mu, то mu равняется nu.
[31:30.820 --> 31:44.820]  И наконец, если у меня есть такая разница, мы бы могли на это забить, если бы мы знали сразу, что это отношение симметрично.
[31:44.820 --> 31:48.820]  А вот же в случае у нас отношение обязательно симметричное.
[31:48.820 --> 32:00.820]  И получается, что эти два условия кардинально разные.
[32:00.820 --> 32:10.820]  Бета-редукции, смотри, у меня есть терм.
[32:10.820 --> 32:16.820]  Смотри, она не симметрична. Я вот сюда проведу редукцию бета, поэтому я смогу сюда сделать.
[32:16.820 --> 32:20.820]  Но в обратную сторону я тянея навешиваю лямдо квантор.
[32:20.820 --> 32:26.820]  Поэтому за счет именно бета у нас все равно эта штука не симметрична.
[32:26.820 --> 32:36.820]  Да, она рефлексивна, она транзитивна, но она не симметрична и не антисимметрична. Это предпорядок.
[32:36.820 --> 32:46.820]  Это у нас типичный предпорядок. Бета-редукция, в ней рефлексивности нет, то есть там прямо явно.
[32:46.820 --> 32:54.820]  В альфа эквалентности у нас есть симметричность, у нас есть транзитивность, и на самом деле там тоже есть рефлексивность.
[32:54.820 --> 33:02.820]  Но поменяем перемены на саму себя. Это равняется отношению эквалентности.
[33:02.820 --> 33:08.820]  Здесь мы просто разрешили более интересным образом проводить редукцию.
[33:08.820 --> 33:12.820]  И тем самым здесь получили рефлексивность и транзитивность.
[33:12.820 --> 33:15.820]  Здесь мы навешиваем еще симметричность.
[33:15.820 --> 33:28.820]  Вот следующим образом, и дальше мы говорим, что если mu равняется mu, mu равняется некоторому pi, то тогда mu будет равняться pi.
[33:28.820 --> 33:36.820]  У нас здесь вытечет рефлексивность из нашего числения.
[33:36.820 --> 33:44.820]  Дальше вот эта симметричность, эта транзитивность.
[33:44.820 --> 33:48.820]  Идейно это нам позволило сделать что?
[33:48.820 --> 34:02.820]  Что если есть некоторые термы, которые там есть терм mu, терм nu, но сводилось оно как-то так, и терм pi,
[34:02.820 --> 34:12.820]  то теперь мы можем благодаря этому отношению говорить, что вот эти штуки равны.
[34:12.820 --> 34:29.820]  Если у нас есть отношение равенства, на самом деле не совсем настоящего равенства,
[34:29.820 --> 34:33.820]  настоящее равенство мы будем означать следующим образом.
[34:34.820 --> 34:42.820]  Вот там из первосеместного от логики отношение равенства в смысле синтоксического сходства.
[34:50.820 --> 34:52.820]  Это и есть настоящее равенство.
[34:52.820 --> 34:55.820]  Это некоторое отношение к валентности.
[34:55.820 --> 35:04.820]  И на самом деле отношения равенства и отношений к валентности не совсем верны, они не совпадают.
[35:04.820 --> 35:16.820]  Поэтому мы хотим посмотреть что-то вида класса квалентности, и чтобы на них было прям равенство, которое равенство.
[35:16.820 --> 35:21.820]  Что будет означать эта история с классами квалентности?
[35:21.820 --> 35:26.820]  Такая история связана с понятием нормальной формы лямбдо-терма.
[35:26.820 --> 35:31.820]  Нормальная форма лямбдо-терма.
[35:31.820 --> 35:43.820]  Это такая форма, в которой нельзя провести бета-редукцию, даже перед этим как-то переименовав.
[35:43.820 --> 36:08.820]  Дальше не существует, дайте скажем так, терм μ в нормальной форме, если не существует такого терма ню,
[36:08.820 --> 36:27.820]  что μ-бета сводится к ню, но с важным условием, что здесь мы можем заиспользовать дополнительно альфа-квалентность.
[36:27.820 --> 36:44.820]  Не прямо чисто одно операция бета сводимости, а можно еще как-то переименовать, помочь нам.
[36:44.820 --> 37:12.820]  И вот оказывается, что подобным образом нормальная форма гарантирует нам следующее, что нормальная форма лямбдо-терма единственна с точностью до альфа-кваленции.
[37:12.820 --> 37:17.820]  То есть у нас есть некоторое множество лямбдо-термов.
[37:17.820 --> 37:27.820]  Если мы попробуем его профакторизовать по отношению альфы-квалентности,
[37:27.820 --> 37:45.820]  то на данном множестве у нас переходы по бета-редукциям, они таковы, что если мы можем закончить это вычисление, то только единственным образом.
[37:45.820 --> 37:50.820]  Вообще зачем это так важно и почему на это стоит уделить внимание?
[37:50.820 --> 38:01.820]  Давайте попробуем привести интерпретацию лямбдо-исчисления в рамках того, что есть само по себе вычисление.
[38:01.820 --> 38:12.820]  У нас в машинных тюрингах вычисления было переход по функции дельта, дельта это некоторое преобразование было, и соответственно набор этих преобразований было вычислением.
[38:12.820 --> 38:24.820]  Теперь же мы говорим, что пусть у нас есть некоторые абстракции жизни, произвольные абсолютно, мы его попытаемся как-то закодировать при помощи лямбдо-терма.
[38:24.820 --> 38:42.820]  В машинных тюрингах мы пытались это как-то закодировать при помощи машины тюринга, конфигурации, точнее, машины тюринга, и дальше мы можем проводить некоторые операции, вычисления.
[38:42.820 --> 38:55.820]  Эти вычисления, по сути, будут вот эти вот стрелочки. Мы будем преобразовать лямдо-1, лямдо-2, лямдо-3 и так далее.
[38:55.820 --> 39:13.820]  И оказывается, что в какой-то момент, если это вычисление действительно останавливается, то оно останавливается в некотором лямдо-н таком, что дальше мы не можем этот терм упростить, видоизменить.
[39:13.820 --> 39:23.820]  Переменование, на самом деле, ничего умного не делает. И дальше мы можем лишь просто переименовать переменные, которые не влияют на сам смысл.
[39:23.820 --> 39:41.820]  И нормальная форма, это, по сути, означает, что конец вычислений. Отсюда можно интуитивно заключить, что вопрос существования нормальной формы неразрешим.
[39:41.820 --> 39:59.820]  Просто потому что в машинах тюринга вопрос того, остановится ли наше вычисление, то есть машина тюринга останавливается или нет, он, как мы знаем, язык HALT не разрешим.
[39:59.820 --> 40:09.820]  Точно так же и здесь. Множество термов с начальной формы неразрешимо, но это не вычислимо.
[40:09.820 --> 40:25.820]  Немножко про равенство. Например, понятно, что если два терма равны, то если у одного существует нормальная форма, то и у второго она тоже будет.
[40:25.820 --> 40:36.820]  Поэтому одним из необходимых условий равенства термов в том, что если у одного существует нормальная форма, то и у второго тоже должна существовать.
[40:36.820 --> 40:44.820]  Или если у первого не существует, то и у второго не должна существовать. У вас будет номер на контрольной, на котором нужно проверять равенство лямбда термов.
[40:44.820 --> 41:00.820]  И первое, что можно сделать, это просмотреть и проверить, есть ли у термов нормальная форма. Если вдруг окажется, что одного есть и другого нет, то победа, вы доказали их неравенстве.
[41:14.820 --> 41:39.820]  Давайте проговорим про еще один интересный момент связанный с этой всей историей. Называется эта штука теоремой ронды.
[42:09.820 --> 42:21.820]  Теорема черчерослера.
[42:21.820 --> 42:47.820]  Теорема черчерослера звучит следующим образом. У нас есть два терма. Есть термню и есть термню, про которую мы знаем, что они равны.
[42:47.820 --> 43:13.820]  Тогда должен существовать некоторый терм п, такой, что мю как раз таким образом сведется к этому п, и ню также сведется к п.
[43:17.820 --> 43:37.820]  Пробуя эту редукцию, так как мы понимаем, что это в некотором смысле операция, которая действительно сильно изменяет структуру термов, хочется понять, а вообще у этого отображения есть ли такая штука, как неподвижная точка.
[43:37.820 --> 44:01.820]  Оказывается, что неподвижная точка есть. Раз мы назовем терм омега большое, следующую историю, а лямбда х, х, х, лямбда х, х, х. То есть применим функцию двоения саму к себе.
[44:01.820 --> 44:13.820]  Окажется, что если мы применим бета-редукцию, то мы получим сам же себя.
[44:13.820 --> 44:34.820]  И, например, терм омега большое будет классическим примером того терма, который не имеет нормальной формы.
[44:34.820 --> 44:54.820]  Хорошо, у нас вообще неизвестно и нельзя определить, есть ли у терма нормальная форма всегда, но есть ли какие-то хорошие случаи алгоритма получения нормальной формы.
[44:54.820 --> 45:12.820]  Ответ на этот вопрос положительный. У нас есть нормальная стратегия редукции.
[45:12.820 --> 45:30.820]  В чем она заключается? Что мы должны на каждом шаге мы должны редуцировать самый левый редекс.
[45:42.820 --> 45:58.820]  Редекс это конструкция, которую мы как раз можем средуцировать.
[45:58.820 --> 46:12.820]  Например, в задании про поиск нормальной формы можно использовать нормальную стратегию редукции для проверки того, а есть ли вообще нормальная форма.
[46:12.820 --> 46:26.820]  Вообще данная стратегия редукции настолько хорошая, что есть доказанный факт про нее, что если у терма существует нормальная форма, то ее можно получить, использовать данную стратегию редукции.
[46:26.820 --> 46:40.820]  Если нет, то не получится. Чем это хорошо? Что мы точно можем теперь используя эту стратегию редукции доказывать, что у терма нет нормальной формы.
[46:40.820 --> 46:57.820]  Например, мы проведем нормальную стратегию редукции. В какой-то момент у нас был терм лямбда 1, мы как-то пришли лямбда штрих, терм потом мы как-то двигались, двигались, двигались и снова пришли к лямбда штрих.
[46:57.820 --> 47:13.820]  У нас появился цикл используя нормальную стратегию редукции, что будет означать, что мы не сможем получить нормальную форму используя данную стратегию, а значит терма не может быть нормальной формой.
[47:13.820 --> 47:23.820]  Иначе, если бы она была, то мы однозначно бы получили. А здесь все, у нас цикл.
[47:23.820 --> 47:32.820]  Еще я вам контрольную открою, что у нас там еще.
[47:32.820 --> 47:41.820]  Да, забыл про это рассказать. Соглашение о скобках.
[48:02.820 --> 48:25.820]  Главально у нас соглашение о скобках таких. Первое это называется лево-ассоциативностью аппликации.
[48:25.820 --> 48:39.820]  То есть если у нас есть некоторые конструкции вида ню-ню-пи, то мы это интерпретируем следующим образом.
[48:39.820 --> 48:53.820]  Это будет означать следующее, что скобки расставлены следующим образом.
[48:53.820 --> 49:08.820]  Вторая история называется право-ассоциативностью лямбда абстракции. То есть если здесь мы вставили скобки слева направо, право-ассоциативность начнем вставить справа налево.
[49:08.820 --> 49:17.820]  Классическим примером лево-ассоциативных операций являются в различных языках программирования операции вида арифметических.
[49:17.820 --> 49:23.820]  Классическим примером право-ассоциативной операции является операция присвоения.
[49:23.820 --> 49:32.820]  Например, в C++, в Java и других языках C семейства можно написать выражение a равняется b равняется c.
[49:32.820 --> 49:44.820]  Оно вот выполнено следующим образом. Сначала мы присвоим b значение c, вернем то значение, которое присвоили, потом повторно применим к a.
[49:44.820 --> 50:01.820]  Аналогично здесь у нас есть лямбда xy точка mu. Это будет означать, что у нас есть лямбда x точка, лямбда y точка mu.
[50:01.820 --> 50:05.820]  Сначала проводим по этому, потом по другому.
[50:15.820 --> 50:33.820]  И последнее, что я, наверное, по качеству теории расскажу, остальное вроде все как раз и сказал, это будет то, как я дальше постараюсь все записывать.
[50:33.820 --> 50:51.820]  Например, запись лямбда xy что-то там, она хорошая, формальная, все с ней хорошо, но если мы начнем думать о нас как о людях, она достаточно неинтуитивна, не особо хорошо читаемая, поэтому хочется ее как-то преобразовать.
[50:51.820 --> 51:06.820]  А преобразовать мы будем ее следующим образом.
[51:06.820 --> 51:28.820]  Если у меня есть функции вида лямбда x1, xn и дальше какие-то аргументы, я буду стараться записывать так, что лямбда мне писать лом полноценно, я буду писать прочек, что-то типа от лямбда ставим только стрелочку.
[51:28.820 --> 51:38.820]  Я буду записывать x1, x2, x3, xn через пробел и ставить стрелочку.
[51:38.820 --> 51:56.820]  Аналогично я могу, например, сделать на самом деле x1 стрелочка, x2 стрелочка, x3 и так далее, мы можем смотреть на это как на функцию многих переменных или на множество функций и функций функций.
[51:56.820 --> 52:06.820]  Дальше, если у меня есть термы мю ню, я буду их просто записывать как мю пробел ню.
[52:08.820 --> 52:14.820]  В некотором смысле мы как раз просто перешли записи очень схожие с баш.
[52:26.820 --> 52:30.820]  А теперь поехали к заданию.
[52:30.820 --> 52:34.820]  Давайте сатур нормальным образом.
[53:26.820 --> 53:30.820]  3 стрелочка.
[53:56.820 --> 54:00.820]  1 задание.
[54:26.820 --> 54:30.820]  И первое задание звучит следующим образом.
[54:30.820 --> 54:38.820]  У меня есть различные термы, нужно определить корректный переход или некорректный.
[54:38.820 --> 55:04.820]  Первый лямбда x, xy, y, y, 3y, x, xx, u, uz, v, uz, zu.
[55:04.820 --> 55:24.820]  Дальше, uz, u, uz, zu.
[55:24.820 --> 55:36.820]  Tx, xy, u, uz, zt.
[55:36.820 --> 55:42.820]  Дальше v, z, z.
[55:42.820 --> 55:56.820]  Лямбда x, y, u, uz, z, u, uz, zt.
[55:56.820 --> 56:08.820]  И три варианта ответов.
[56:08.820 --> 56:14.820]  Переход корректен и получается одним применением бета редукции для одной переменной.
[56:14.820 --> 56:20.820]  Переход корректен, но иным способом и переход некорректен.
[56:20.820 --> 56:24.820]  Начнем с первого момента.
[56:24.820 --> 56:28.820]  Давайте сразу делать следующее.
[56:28.820 --> 56:36.820]  Если у нас есть такая история, то давайте выделять, какие термы у нас свободны, какие термы связаны.
[56:36.820 --> 56:42.820]  Здесь у нас свободный y, x связаны.
[56:42.820 --> 56:50.820]  Поэтому при попытке бета редукции мы поставим вместо сюда x и y и все отработает корректно.
[56:50.820 --> 56:58.820]  Здесь все хорошо, однократная бета редукция.
[56:58.820 --> 57:08.820]  Второй способ. У меня есть x и дальше y, аналогично y и z.
[57:08.820 --> 57:16.820]  Я должен подать в x аргумент какой-то один.
[57:16.820 --> 57:20.820]  Этим единственным аргументом будет y.
[57:20.820 --> 57:24.820]  z это второй аргумент.
[57:24.820 --> 57:30.820]  Поэтому подставлять сюда я могу только y. Я не подставлю u, z, uz.
[57:30.820 --> 57:34.820]  Я сюда поставлю y, y. Так что это некорректный переход.
[57:34.820 --> 57:42.820]  Х, з, у и дальше я подставлю y.
[57:42.820 --> 57:46.820]  Я y должен буду подставить вместо x.
[57:46.820 --> 57:50.820]  То есть я получу что?
[57:50.820 --> 57:58.820]  Что у меня будет y, z, а дальше внезапным образом y, который ранее был свободной переменной,
[57:58.820 --> 58:02.820]  по нему станет стоять квантор.
[58:02.820 --> 58:06.820]  Поэтому это тоже некорректный переход.
[58:06.820 --> 58:12.820]  А, z и t.
[58:12.820 --> 58:16.820]  У меня есть x и y, z здесь свободное.
[58:16.820 --> 58:22.820]  И я должен поставить вместо x z, вместо y t.
[58:22.820 --> 58:26.820]  Ну и я получаю z, t, z. Все ок.
[58:26.820 --> 58:32.820]  Но есть одно но. Я здесь провел не одну бета-редукцию, а две бета-редукции.
[58:32.820 --> 58:40.820]  Поэтому здесь ответ больше, чем одной бета-редукции. Получен корректный переход.
[58:40.820 --> 58:48.820]  Здесь более сложная история. У меня есть функция двоей линии, есть функция identity и функция reverse.
[58:48.820 --> 58:51.820]  Мне нужно провести бета-редукцию.
[58:51.820 --> 58:54.820]  Итак, что вот происходит?
[58:54.820 --> 58:58.820]  Reverse от, давайте назову это double.
[58:58.820 --> 59:00.820]  Мы потом вернемся к этим значениям.
[59:00.820 --> 59:06.820]  Это функция identity, это функция reverse.
[59:06.820 --> 59:16.820]  Ref double identity переходит в перемену аргументов.
[59:16.820 --> 59:20.820]  Аргументы у нее это и это, поэтому они меняются местами.
[59:20.820 --> 59:24.820]  Функция identity применяется к функции удвоения.
[59:24.820 --> 59:28.820]  Ну понятно, что функция identity к любому аргументу, это есть сам аргумент.
[59:28.820 --> 59:33.820]  Поэтому мы придем к функции double.
[59:33.820 --> 59:38.820]  Ну действительно, это вот она и есть, функция double.
[59:38.820 --> 59:46.820]  Но у нас здесь больше, чем одна бета-редукция.
[59:46.820 --> 59:53.820]  В целом, задание здесь достаточно простое. Важно быть вот, например, с этим моментом.
[59:53.820 --> 59:59.820]  И здесь не забывать про соглашение скобок, что если один аргумент, то это ровно один аргумент.
[59:59.820 --> 01:00:04.820]  Вместе мы можем подавать только когда они идут в скобках.
[01:00:04.820 --> 01:00:07.820]  Что?
[01:00:07.820 --> 01:00:09.820]  Да, определенно.
[01:00:09.820 --> 01:00:13.820]  Вообще, я очень советую эту контрольную.
[01:00:13.820 --> 01:00:18.820]  Все, кроме первого номера про арифметичность, это easy-балы.
[01:00:18.820 --> 01:00:23.820]  И в дорежке советую решать первым делом лям-досчастление. Самая простая тема, которая есть. И приятная.
[01:00:33.820 --> 01:00:36.820]  Ну мне не нравится это задание.
[01:00:36.820 --> 01:00:47.820]  Следующее задание, оно как раз про понятие вычислений.
[01:00:47.820 --> 01:01:05.820]  Если мы вспомним определение равенства, то это своего рода симметрично-транзитивное замыкание отношения вычислений.
[01:01:05.820 --> 01:01:22.820]  Поэтому одним из пунктов было, что если P вычислили даку, то P равняется Q. Здесь все.
[01:01:22.820 --> 01:01:29.820]  Вторым пунктом у нас спрашивают, а что если наоборот?
[01:01:29.820 --> 01:01:36.820]  P равняется Q, следует ли из этого, что мы сможем P вычислить даку?
[01:01:36.820 --> 01:01:43.820]  Ну, конечно же нет. Это опять же тот же пример, когда мы...
[01:01:43.820 --> 01:01:50.820]  Q проверили одну бета-редукцию в P, и назад мы навесить клантер не можем.
[01:01:50.820 --> 01:01:55.820]  А тут какое равенство отношение имела то, которое приводило к значению эквалентности?
[01:01:55.820 --> 01:02:00.820]  Отношение эквалентности. То есть везде дальше значок равенства это значок эквалентности.
[01:02:00.820 --> 01:02:09.820]  Когда мы говорим про синтоксическое равенство, мы будем использовать специальный значок, как в обычных словах.
[01:02:09.820 --> 01:02:13.820]  Поэтому нет, неверно.
[01:02:13.820 --> 01:02:24.820]  Пункт третий. Ух! P равняется Q. Q в нормальной форме.
[01:02:24.820 --> 01:02:29.820]  И тогда утверждается, что P с Вадимом Q.
[01:02:34.820 --> 01:02:37.820]  Ну, давайте думать.
[01:02:37.820 --> 01:02:40.820]  Вообще правда ли это?
[01:02:43.820 --> 01:03:00.820]  Первый случай, который можно рассмотреть, что у нас P как-то-как-то там велось, и перевелось сюда Q.
[01:03:00.820 --> 01:03:08.820]  Но так как Q в нормальной форме, то понятно, что это может быть единственным образом только альфа-конверсия.
[01:03:09.820 --> 01:03:16.820]  Но если это альфа-эквалентность, мы можем аналогично вернуть обратно, и как бы здесь сёк.
[01:03:16.820 --> 01:03:26.820]  Есть другой случай, что если у нас есть вот такая вот история.
[01:03:26.820 --> 01:03:29.820]  Там из некоторого эра.
[01:03:30.820 --> 01:03:37.820]  Но в таком случае у нас есть теорема ОРОМБИ.
[01:03:37.820 --> 01:03:47.820]  Которая утверждает, что найдётся некоторый терм T, которому одновременно сведутся они.
[01:03:47.820 --> 01:03:55.820]  Ну, по сути, здесь просто явно чуть более продвинутое использование теоремы Чорча Росера.
[01:04:00.820 --> 01:04:04.820]  Что же это? А, вот это.
[01:04:04.820 --> 01:04:07.820]  Сейчас один момент.
[01:04:13.820 --> 01:04:16.820]  Вот, теперь сёк.
[01:04:16.820 --> 01:04:27.820]  Тогда получается, что мы сверись к вот этому случаю.
[01:04:33.820 --> 01:04:40.820]  А здесь, как мы знаем, что в силу того, что Q в нормальной форме, вот эти вот штуки, они альфа-эквалентны.
[01:04:41.820 --> 01:04:46.820]  Поэтому, ну окей, мы как-то приведём к T и вернёмся к Q.
[01:04:46.820 --> 01:04:49.820]  Так что здесь сёк.
[01:04:54.820 --> 01:04:59.820]  Ну, аналогично, если вдруг там окажется, что вот какая-нибудь такая лесенка.
[01:04:59.820 --> 01:05:02.820]  Ну окей, мы просто каждый раз её применяем, применяем, применяем.
[01:05:02.820 --> 01:05:09.820]  Получим там что-то типа схождения, и окажется здесь что-то альфа-эквалентное Q.
[01:05:11.820 --> 01:05:14.820]  Всё.
[01:05:15.820 --> 01:05:34.820]  И, наконец, четвёртое утверждение про если P вычисляется до Q, и Q равняется R, то P к R.
[01:05:34.820 --> 01:05:39.820]  Ну, конечно же, это неверно.
[01:05:39.820 --> 01:05:57.820]  Возьмём какую-нибудь здесь, не исходяющую бета-редукцию с P, а здесь другую, не исходяющую бета-редукцию.
[01:05:58.820 --> 01:06:07.820]  Ну и понятно, что, например, вот эту сторону у нас не обязана быть бета-редукцией.
[01:06:07.820 --> 01:06:10.820]  Или альфа-эквалентностью.
[01:06:17.820 --> 01:06:21.820]  Ну и по классике пункт D про все утверждения верны не работает.
[01:06:21.820 --> 01:06:31.820]  Теперь более интересная тема про логические высказывания.
[01:06:31.820 --> 01:06:40.820]  У меня есть следующие попытки ввести, что я скажу, ввести логические высказывания.
[01:06:40.820 --> 01:06:43.820]  Закодируйте их при помощи лямботермов.
[01:06:43.820 --> 01:06:48.820]  В этом году я их так вводил, поэтому.
[01:06:48.820 --> 01:06:52.820]  Истину мы вводим следующим образом.
[01:06:52.820 --> 01:06:59.820]  Это лямбда X, Y, X.
[01:06:59.820 --> 01:07:02.820]  Это правильно, всё ввиду.
[01:07:02.820 --> 01:07:05.820]  Это первый компонент, это второй компонент, да?
[01:07:05.820 --> 01:07:07.820]  Супер!
[01:07:08.820 --> 01:07:12.820]  Ложь мы вводим так.
[01:07:12.820 --> 01:07:16.820]  Из пары аргументов выбираем второй аргумент.
[01:07:24.820 --> 01:07:34.820]  Используя вот эти вот два завтутных терма, мы можем строить более сложные конструкции.
[01:07:34.820 --> 01:07:38.820]  Например, можно строить различные логические высказывания.
[01:07:42.820 --> 01:07:43.820]  Начнём.
[01:07:43.820 --> 01:07:52.820]  Попробуем посмотреть следующие логические высказывания.
[01:07:52.820 --> 01:07:54.820]  У нас есть терм.
[01:08:12.820 --> 01:08:17.820]  Подобную вещь мы можем совершить следующим образом.
[01:08:17.820 --> 01:08:23.820]  Первым делом давайте посмотрим, какие вообще значения могут принимать PQ.
[01:08:23.820 --> 01:08:28.820]  PQ в них приходит в качестве аргументов либо истинно, либо ложь.
[01:08:28.820 --> 01:08:31.820]  И сюда, и сюда.
[01:08:31.820 --> 01:08:38.820]  Поэтому, если мы видим тройку, то вот этот вот первый аргумент будет выбирать,
[01:08:38.820 --> 01:08:43.820]  какое из оставшихся двух будет значением данной тройки.
[01:08:44.820 --> 01:08:47.820]  В первом случае у меня PQ, в втором случае Q.
[01:08:47.820 --> 01:08:51.820]  Удобно рассмотреть именно первую скобку, потому что она нам скажет,
[01:08:51.820 --> 01:08:57.820]  чему здесь равняется, и в результате мы можем понять, как дальше все редуцируется.
[01:08:57.820 --> 01:09:03.820]  То есть в некотором роде думаем в смысле нормальной стратегии редукции.
[01:09:03.820 --> 01:09:06.820]  Рассматриваем два варианта.
[01:09:06.820 --> 01:09:09.820]  Опять створим паттерн-махинг.
[01:09:10.820 --> 01:09:15.820]  У нас есть ложь. Пусть P равняется ложь.
[01:09:15.820 --> 01:09:18.820]  Тогда P это проектор второй компоненты.
[01:09:18.820 --> 01:09:23.820]  У меня есть два аргумента, он вернет вторую компоненту, то есть P.
[01:09:23.820 --> 01:09:28.820]  Это будет ложь, ложь, QPQ.
[01:09:28.820 --> 01:09:33.820]  Первое, что стоит сказать, что вот тут Q вообще ничего не решает.
[01:09:33.820 --> 01:09:37.820]  Так как оба аргумента у него P, то какой бы он ни выбирал, это будет P.
[01:09:37.820 --> 01:09:41.820]  Поэтому здесь будет классическое P.
[01:09:41.820 --> 01:09:43.820]  Все, это я могу отредуцировать.
[01:09:43.820 --> 01:09:48.820]  А если это у меня P, а P ложь, то это будет ложь, это ложь, ложь, ложь.
[01:09:48.820 --> 01:09:53.820]  Что равняется ложь? Все.
[01:09:53.820 --> 01:09:58.820]  Второй паттерн-махинг P равняется истине.
[01:09:58.820 --> 01:10:00.820]  То есть у меня будет здесь истина.
[01:10:00.820 --> 01:10:04.820]  Когда она выберет первый аргумент, это будет Q.
[01:10:04.820 --> 01:10:08.820]  И это все средуцируется к от ложь истины.
[01:10:08.820 --> 01:10:13.820]  А теперь давайте посмотрим, что вообще это за история такая.
[01:10:13.820 --> 01:10:17.820]  Если Q истина, она выберет первый аргумент, то есть ложь.
[01:10:17.820 --> 01:10:21.820]  Если Q ложь, она выберет второй аргумент, то есть истину.
[01:10:21.820 --> 01:10:26.820]  Это инверсия.
[01:10:26.820 --> 01:10:33.820]  Тогда, какой имеем мы функцию?
[01:10:33.820 --> 01:10:37.820]  0, 0, 0, 1, 1, 0, 1, 1.
[01:10:37.820 --> 01:10:39.820]  Если P ложь, то все и ложь.
[01:10:39.820 --> 01:10:41.820]  Ну, значит здесь 0, 0.
[01:10:41.820 --> 01:10:49.820]  А во втором случае это инверсия второго аргумента.
[01:10:49.820 --> 01:10:58.820]  Данный вектор функции указывает нам на то, что это инверсия импликации.
[01:10:58.820 --> 01:11:06.820]  Ну, естественно, здесь никакого ксора и рядом нет.
[01:11:06.820 --> 01:11:09.820]  В целом я буду везде говорить какая-то функция,
[01:11:09.820 --> 01:11:14.820]  потому что в прошлых годах задание было такое, что вам дается куча этих штук,
[01:11:14.820 --> 01:11:17.820]  вам нужно сказать, какой функции это соответствует.
[01:11:17.820 --> 01:11:21.820]  Поэтому, например, было важно помнить, что у нас есть штрих шефера.
[01:11:21.820 --> 01:11:27.820]  Это NAND, то есть отрицание дизъюнкции.
[01:11:27.820 --> 01:11:31.820]  0, 1, 1, 0, 1, 1.
[01:11:31.820 --> 01:11:37.820]  Штрих шефера, отрицание конъюнкции это 1, 1, 1, 1.
[01:11:37.820 --> 01:11:44.820]  Стрелка пирса это нор, поэтому это 1, 0, 0, 0.
[01:11:44.820 --> 01:11:48.820]  Ну, и там отрицание импликации, импликация, обратная импликация,
[01:11:48.820 --> 01:11:51.820]  отрицание обратной импликации, там ничего интересного.
[01:11:51.820 --> 01:11:54.820]  Что еще раз?
[01:11:54.820 --> 01:11:57.820]  Да, получается.
[01:11:57.820 --> 01:12:02.820]  Ну, кто знает, может на реальной контрольной вам изменить формат задания.
[01:12:02.820 --> 01:12:07.820]  Следующая история. У нас снова ПК данные.
[01:12:07.820 --> 01:12:17.820]  Дальше ПКФТ и дальше П.
[01:12:17.820 --> 01:12:22.820]  Это мы уже помним, это у нас классическая инверсия.
[01:12:22.820 --> 01:12:29.820]  И получается что? У нас все приводится к тому, что ПНК и П.
[01:12:29.820 --> 01:12:34.820]  Если П это true, то он вернет НК.
[01:12:34.820 --> 01:12:39.820]  НК, если П это false, то он вернет false.
[01:12:44.820 --> 01:12:50.820]  Ой, ну тут короче, это вот эта штука, это она, а здесь наоборот я просто перекутал.
[01:12:50.820 --> 01:12:52.820]  Здесь когда П...
[01:12:52.820 --> 01:12:53.820]  Сейчас.
[01:12:53.820 --> 01:12:54.820]  Когда П false.
[01:12:54.820 --> 01:12:57.820]  А, то же самое? Ну ладно.
[01:13:04.820 --> 01:13:07.820]  Вон она.
[01:13:25.820 --> 01:13:28.820]  Поднимаю, чтобы тряпку снять.
[01:13:34.820 --> 01:13:49.820]  Так, я ловлю историю.
[01:13:49.820 --> 01:14:04.820]  Лямбда ПК, ПКПК и К.
[01:14:10.820 --> 01:14:14.820]  Затем, что если бы они не стояли, мы бы смотрели так и так же.
[01:14:14.820 --> 01:14:17.820]  Итак.
[01:14:17.820 --> 01:14:21.820]  Ну опять же, смотрим на первый аргумент, там нормальной стратегии редукции.
[01:14:21.820 --> 01:14:27.820]  Первая эта штука, это П, проверяем, делаем паттерн мачем по П.
[01:14:27.820 --> 01:14:31.820]  П ложь. Если П ложь, он возвращает второй аргумент.
[01:14:31.820 --> 01:14:33.820]  Это Q.
[01:14:33.820 --> 01:14:39.820]  Дальше я редуцировать не буду, но понятно просто позапишу там в таблете совестиности Q.
[01:14:39.820 --> 01:14:43.820]  П истинно. Тогда он вернет первый аргумент.
[01:14:43.820 --> 01:14:48.820]  То есть будет эта история. Это будет Q.
[01:14:48.820 --> 01:14:51.820]  True и Q.
[01:14:51.820 --> 01:14:54.820]  Что это такая история?
[01:14:54.820 --> 01:14:57.820]  Если Q это true, то оно вернет Q.
[01:14:57.820 --> 01:15:01.820]  Если Q это false, то оно вернет Q.
[01:15:01.820 --> 01:15:03.820]  То есть на самом деле это тоже Q.
[01:15:03.820 --> 01:15:11.820]  Таким образом, это вообще функция проектор второй компоненты.
[01:15:11.820 --> 01:15:13.820]  Что не ксор?
[01:15:13.820 --> 01:15:16.820]  Грустно, что таксоров у нас нет.
[01:15:20.820 --> 01:15:23.820]  Лямбда ПК.
[01:15:26.820 --> 01:15:28.820]  ППК.
[01:15:32.820 --> 01:15:34.820]  Фолс.
[01:15:34.820 --> 01:15:36.820]  ПКП.
[01:15:41.820 --> 01:15:45.820]  Снова делаем паттерн мачем по П.
[01:15:45.820 --> 01:15:51.820]  Если П это false, то мы видим, что это Q от false.
[01:15:51.820 --> 01:15:54.820]  Здесь false поэтому будет брать.
[01:15:54.820 --> 01:15:57.820]  Второй компонент это тоже false.
[01:15:57.820 --> 01:16:03.820]  Q от false false, независимо с того, чем является Q, это равняется false.
[01:16:03.820 --> 01:16:09.820]  Уже на этом этапе можно сказать, что это не ксор, но давайте все равно продолжим, что дальше.
[01:16:11.820 --> 01:16:13.820]  П равняется true.
[01:16:13.820 --> 01:16:16.820]  Тогда здесь он вернет первую компоненту.
[01:16:16.820 --> 01:16:20.820]  Это будет true вот здесь.
[01:16:20.820 --> 01:16:23.820]  От первой компоненты здесь Q.
[01:16:23.820 --> 01:16:27.820]  True берет первую компоненту, это false.
[01:16:27.820 --> 01:16:31.820]  Это вообще функция тождественной лыжи.
[01:16:36.820 --> 01:16:40.820]  Последняя история, которая у нас осталась.
[01:16:41.820 --> 01:16:44.820]  Самое страшное.
[01:16:44.820 --> 01:16:47.820]  Это лямбда ПК.
[01:16:53.820 --> 01:16:55.820]  ПКП.
[01:16:58.820 --> 01:17:00.820]  Это false.
[01:17:00.820 --> 01:17:02.820]  Это true.
[01:17:03.820 --> 01:17:10.820]  Когда мы видим такое, мы понимаем, что это инверсия второго аргумента.
[01:17:10.820 --> 01:17:14.820]  Но пойдем по привычной схеме.
[01:17:14.820 --> 01:17:18.820]  Паттерн мачем по первому аргументу это П.
[01:17:18.820 --> 01:17:23.820]  П это true, тогда здесь мы получаем true.
[01:17:25.820 --> 01:17:28.820]  Дальше здесь П.
[01:17:29.820 --> 01:17:33.820]  Первая компонента Q это инверсия Q.
[01:17:35.820 --> 01:17:39.820]  И в результате это даст нам инверсию Q.
[01:17:39.820 --> 01:17:40.820]  Хорошо.
[01:17:40.820 --> 01:17:44.820]  П равняется тождественной лыжи.
[01:17:44.820 --> 01:17:48.820]  Тогда отсюда мы получим Q.
[01:17:50.820 --> 01:17:52.820]  Отсюда мы берем что?
[01:17:52.820 --> 01:17:56.820]  Q true это...
[01:17:56.820 --> 01:17:58.820]  Один момент.
[01:17:58.820 --> 01:18:00.820]  Q true...
[01:18:00.820 --> 01:18:02.820]  Сейчас, П это false.
[01:18:02.820 --> 01:18:04.820]  Второй аргумент false.
[01:18:04.820 --> 01:18:08.820]  Здесь второй аргумент true, поэтому берем true.
[01:18:08.820 --> 01:18:10.820]  А здесь берем Q.
[01:18:10.820 --> 01:18:15.820]  Ну, Q true Q это как истанно Q.
[01:18:15.820 --> 01:18:18.820]  Потому что если истинно, мы вернем истину.
[01:18:18.820 --> 01:18:20.820]  Если ложь, вернем ложь.
[01:18:20.820 --> 01:18:23.820]  А вот это уже сорок.
[01:18:26.820 --> 01:18:35.820]  Если П true мы берем неку, а здесь ку.
[01:18:35.820 --> 01:18:40.820]  Ну, это у нас ксо.
[01:18:40.820 --> 01:18:41.820]  Все.
[01:18:41.820 --> 01:18:46.820]  Задание это вообще потрясающий способ набрать баллы.
[01:18:46.820 --> 01:18:49.820]  Очень советую его.
[01:18:49.820 --> 01:18:53.820]  То есть, например, в 49-м, которое было про эту историю,
[01:18:53.820 --> 01:18:56.820]  оно такое может быть не особо приятным.
[01:18:56.820 --> 01:18:59.820]  Там какие-то сложные моменты, если особо не особо разобрались.
[01:18:59.820 --> 01:19:02.820]  Особенно, если не особо разобрались.
[01:19:02.820 --> 01:19:08.820]  Вот эта история просто берем pattern matching по true-false и получаем ответ.
[01:19:14.820 --> 01:19:18.820]  Теперь давайте разберемся с задачами по десяткам.
[01:19:19.820 --> 01:19:22.820]  В прошлом году я это не рассказывал, поэтому расскажу о этом.
[01:19:34.820 --> 01:19:39.820]  В 51-м задании на проверку равенства я буду в основном все свои размышления
[01:19:39.820 --> 01:19:48.820]  и так или иначе базировать на нормальной стратегии редукций.
[01:19:48.820 --> 01:19:54.820]  Этот факт не рассказывается в курсе и не доказывается в курсе.
[01:19:54.820 --> 01:20:01.820]  Поэтому если вдруг семена риск или проверяющие начнут прикапываться,
[01:20:01.820 --> 01:20:05.820]  а что это, как это, ну просто залазим в интернет,
[01:20:05.820 --> 01:20:08.820]  копируем доказательства этой теории.
[01:20:08.820 --> 01:20:12.820]  Мы вначале вставляем лемма, доказательства из интернета
[01:20:12.820 --> 01:20:15.820]  и дальше просто пользуемся всем этим фактом. Все.
[01:20:17.820 --> 01:20:19.820]  Стандартная история.
[01:20:28.820 --> 01:20:30.820]  Начнем. Первый терм.
[01:20:30.820 --> 01:20:33.820]  Что, во-первых, я буду советовать в этой задаче делать?
[01:20:33.820 --> 01:20:38.820]  Как ни странно, я буду советовать первым делом вводить переменные.
[01:20:38.820 --> 01:20:41.820]  То есть вводить дополнительные функции.
[01:20:41.820 --> 01:20:58.820]  Итак, у меня есть лямбда АВ, АААВ, дальше лямбда, лямбда ААА,
[01:20:58.820 --> 01:21:04.820]  лямбда ААА.
[01:21:04.820 --> 01:21:09.820]  И от меня хотят в следующий терм,
[01:21:09.820 --> 01:21:33.820]  лямбда АВА, лямбда ВВ, лямбда АВББАА и лямбда АА.
[01:21:33.820 --> 01:21:38.820]  Доказательство равенства в разы проще, чем доказательство неравенства.
[01:21:38.820 --> 01:21:45.820]  Как раз доказательство неравенства будет основываться в нормальной стратегии редукции.
[01:21:45.820 --> 01:21:52.820]  Доказательство равенства просто в приведении преобразований.
[01:21:52.820 --> 01:21:58.820]  Итак, начинаем с первого. Я буду вводить какие-то базовые функции.
[01:21:58.820 --> 01:22:05.820]  Первым делом функция Identity.
[01:22:05.820 --> 01:22:13.820]  Она будет означать следующее, что если я возьму какую-то В, я получу В.
[01:22:13.820 --> 01:22:19.820]  Дальше функция DB или Double.
[01:22:19.820 --> 01:22:24.820]  Я не буду писать длинные слова, потому что я задолбаюсь это все писать по 100 раз.
[01:22:24.820 --> 01:22:33.820]  DB это лямбда ВВВ.
[01:22:33.820 --> 01:22:35.820]  Двое или аргументы.
[01:22:35.820 --> 01:22:41.820]  Функция REF. Знакомые функции из БОША, функции обращения.
[01:22:41.820 --> 01:22:51.820]  Если у меня есть аргументы В и ВВ, я верну их в обратном порядке.
[01:22:51.820 --> 01:22:56.820]  Вот эти стремные истории я никак называть не буду.
[01:22:56.820 --> 01:23:05.820]  Начнем с первого. У меня здесь в качестве первого аргумента функция DB и функция Identity.
[01:23:05.820 --> 01:23:09.820]  Начинаю подставлять сюда вместо А и вместо В.
[01:23:09.820 --> 01:23:16.820]  Итак, вместо А я подставляю функцию Double.
[01:23:16.820 --> 01:23:20.820]  Как я говорил ранее, я буду писать пробел, просто для читайности.
[01:23:20.820 --> 01:23:31.820]  Double, Double. Дальше Double Identity.
[01:23:31.820 --> 01:23:40.820]  Теперь время вспомнить, что у нас есть Омега, который равняется Double, Double.
[01:23:40.820 --> 01:23:48.820]  И он является неподвижной точкой бета-редукции.
[01:23:48.820 --> 01:24:00.820]  Поэтому в начале мы имеем Омега терм, а значит этот терм не будет иметь нормальной формы.
[01:24:00.820 --> 01:24:09.820]  Просто потому что согласно нормальной стратегии редукции, нам бы приходилось проводить всегда редукцию здесь,
[01:24:09.820 --> 01:24:13.820]  но если мы получили цикл, значит нормальной формы нет.
[01:24:13.820 --> 01:24:16.820]  Но мы можем на самом деле это подупростить.
[01:24:16.820 --> 01:24:21.820]  Например, Double от Etda мы можем провести редукцию и посмотреть, что будет там.
[01:24:21.820 --> 01:24:27.820]  Давайте я проведу вот там вот редукцию.
[01:24:27.820 --> 01:24:31.820]  Омега, а здесь будет Id.
[01:24:31.820 --> 01:24:36.820]  Identity это Identity, как в принципе Identity от любого.
[01:24:36.820 --> 01:24:38.820]  Это просто оно само.
[01:24:38.820 --> 01:24:44.820]  Поэтому я приду к формату, что у меня будет Омега большой и дальше Id.
[01:24:44.820 --> 01:24:46.820]  Всё.
[01:24:48.820 --> 01:24:52.820]  Вторая история. У меня реверс.
[01:24:52.820 --> 01:24:55.820]  Давайте я запишу.
[01:24:55.820 --> 01:25:05.820]  Реверс от Identity, какой-то странной хрени и Double.
[01:25:05.820 --> 01:25:11.820]  Реверс принимает два аргумента, соответственно он поглотит Identity, вот этот знак вопроса.
[01:25:11.820 --> 01:25:14.820]  И поменяет их местами.
[01:25:14.820 --> 01:25:20.820]  Но меняет знак вопроса Identity и Double.
[01:25:20.820 --> 01:25:28.820]  Итак, получается вот эта вот история у меня в качестве A нужно подать Id, в качестве B подать db.
[01:25:28.820 --> 01:25:37.820]  Ну провожу это, получаю Double, Double, Identity.
[01:25:37.820 --> 01:25:40.820]  Ну они равны. Всё.
[01:25:40.820 --> 01:25:46.820]  То есть эти термы, да, действительно равны, мы доказали и показали это.
[01:25:46.820 --> 01:25:52.820]  Второй же случай, как мне сложно догадаться, будет ответ Нет.
[01:25:52.820 --> 01:25:56.820]  Давайте показывать почему же нет.
[01:25:56.820 --> 01:25:58.820]  Ух!
[01:25:58.820 --> 01:26:06.820]  lambda ab.aab
[01:26:06.820 --> 01:26:14.820]  Теперь я буду прямо сразу писать без вот этих вот длинных выражений, буду сразу на функциях писать введённых.
[01:26:14.820 --> 01:26:18.820]  Double и Identity.
[01:26:18.820 --> 01:26:21.820]  Давайте попытаемся её сразу преобразовать.
[01:26:21.820 --> 01:26:27.820]  Ну поехали. Поставляем вместо A функцию Double, вместо B функцию Identity.
[01:26:27.820 --> 01:26:39.820]  Получаем Double, Omega Term и функцию Identity.
[01:26:39.820 --> 01:26:53.820]  Можем ещё преобразовать, получим Omega Term, Omega Term, функцию Identity.
[01:26:53.820 --> 01:26:55.820]  Закончили.
[01:27:09.820 --> 01:27:18.820]  Так, сейчас, давайте ещё раз проверю, что я всё верно, корректно подставлял там Double, Double, Double, It.
[01:27:18.820 --> 01:27:25.820]  Всё, здесь можно провести, здесь всё корректно, здесь рев два аргумента, всё, да, всё действительно корректно.
[01:27:25.820 --> 01:27:27.820]  Хорошо.
[01:27:27.820 --> 01:27:43.820]  Ну, второй аргумент, это функция Double от функции lambda ab.aab
[01:27:43.820 --> 01:27:48.820]  И функция снова Double, это в аргументах к кому?
[01:27:48.820 --> 01:27:55.820]  В аргумент к ней.
[01:27:55.820 --> 01:27:57.820]  Ну поехали.
[01:27:57.820 --> 01:28:04.820]  Первое, что хочется, хочется подставить сюда как-то провести, но давайте всё-таки будем следовать нормальной стратегии редукции,
[01:28:04.820 --> 01:28:08.820]  вдруг вообще тут нормальная форма будет.
[01:28:08.820 --> 01:28:15.820]  Поехали. У нас есть вот это основа, означая знака вопроса.
[01:28:15.820 --> 01:28:21.820]  Вжух и всё.
[01:28:21.820 --> 01:28:25.820]  Проведим с редукцией в самом левом редоксе.
[01:28:25.820 --> 01:28:30.820]  Делаем дальше. Самый левый редокс теперь вот эта история.
[01:28:30.820 --> 01:28:33.820]  Причём, что это за история?
[01:28:33.820 --> 01:28:48.820]  Это история, когда у нас lambda ab, aab, здесь db, а здесь вот такая вот фигулина.
[01:28:48.820 --> 01:28:51.820]  Ну и что, мы теперь видим, что такое a, что такое b?
[01:28:51.820 --> 01:28:56.820]  Проводим b3.
[01:28:56.820 --> 01:29:02.820]  db, db я сразу заменю на ωt.
[01:29:02.820 --> 01:29:11.820]  А оставшееся b, это будет история от b.
[01:29:11.820 --> 01:29:17.820]  Ой, это не ab, это double.
[01:29:17.820 --> 01:29:26.820]  Так, теперь получается я могу, в самом левом редоксе это ω, мы помним on and variant, поэтому всё.
[01:29:26.820 --> 01:29:31.820]  Нормальной формы как и там, так и тут нет, но не получится таким простым способом доказательной равенства.
[01:29:31.820 --> 01:29:37.820]  Ну ладно, попробую провести редукцию здесь, вдруг я там как-то буду прощу.
[01:29:37.820 --> 01:29:43.820]  Ну провожу. У меня ab, значит я представляю db.
[01:29:43.820 --> 01:29:55.820]  Омега, дальше аа, если мы поставим вместо аа double, то мы получим снова term omega.
[01:29:55.820 --> 01:29:57.820]  Но есть одно но.
[01:29:57.820 --> 01:30:04.820]  Сейчас, я скажу.
[01:30:04.820 --> 01:30:08.820]  Не помнится, что у меня другая здесь получилась?
[01:30:08.820 --> 01:30:14.820]  Давай-давай-давай-давай, сейчас.
[01:30:14.820 --> 01:30:30.820]  Мне кажется, а, вот, я смотрю, сейчас, не пропустил я ещё раз чего-то.
[01:30:30.820 --> 01:30:32.820]  Сейчас, не момент.
[01:30:32.820 --> 01:30:36.820]  А, нет, всё ок.
[01:30:36.820 --> 01:30:57.820]  И здесь у меня останется аргумент b.
[01:30:57.820 --> 01:31:01.820]  Ну, точку писали, ок, точка.
[01:31:01.820 --> 01:31:03.820]  Ну и всё.
[01:31:03.820 --> 01:31:06.820]  Теперь давайте смотреть, к чему мы пришли.
[01:31:06.820 --> 01:31:10.820]  С одной стороны, у меня есть вот такая вот история.
[01:31:10.820 --> 01:31:20.820]  С другой стороны, у меня есть вот такая история.
[01:31:20.820 --> 01:31:33.820]  Если бы они были равны, то, согласно теориями Чорча Рослера, у меня должен был существовать какой-то другой лямбдо-терм, к которому они оба сводились.
[01:31:33.820 --> 01:31:42.820]  Но, в данном случае, посмотрим к чему это может свистись.
[01:31:42.820 --> 01:31:47.820]  Если мы проведём редукцию по омеге, мы ничего не получим.
[01:31:47.820 --> 01:31:51.820]  Здесь у нас инвариантность.
[01:31:51.820 --> 01:31:57.820]  Здесь у нас другой редокс, это снова омега, это снова инвариант.
[01:31:57.820 --> 01:32:00.820]  А остальное ничего мы средуцировать не можем.
[01:32:00.820 --> 01:32:06.820]  То есть, эта штука, она инвариантно дальше относительно бета-редукции.
[01:32:06.820 --> 01:32:09.820]  Мы дальше никуда ни за неё не выходим.
[01:32:09.820 --> 01:32:11.820]  Это же история.
[01:32:11.820 --> 01:32:16.820]  Мы можем провести, действительно, редукцию по омеге, но снова придём к самому омегу.
[01:32:16.820 --> 01:32:18.820]  Аналогично здесь.
[01:32:18.820 --> 01:32:21.820]  И мы не сможем отредуцировать, ничего больше не можем отредуцировать.
[01:32:21.820 --> 01:32:28.820]  Получается, эта штука тоже инвариантна относительно бета-редукции.
[01:32:28.820 --> 01:32:44.820]  Таким образом, если бы они вдруг могли бы равняться, то существовал бы терм, который выглядел одновременно и таким, и таким образом, а это уже чисто синтоксически не может совпадать.
[01:32:44.820 --> 01:32:46.820]  Они альфа неквалентны.
[01:32:46.820 --> 01:32:52.820]  Поэтому из чаема Чорча Росарра заключаем, что не равны.
[01:32:58.820 --> 01:33:03.820]  Даже получилось доказать, по сути, не опираясь на нормальную стратегию редукции.
[01:33:03.820 --> 01:33:05.820]  Хотя мы ей и пользовались.
[01:33:15.820 --> 01:33:17.820]  Ну, в целом, да.
[01:33:17.820 --> 01:33:21.820]  Про это задание, вкратце, есть вопрос, как это делать.
[01:33:21.820 --> 01:33:27.820]  Применяем нормальную стратегию редукции к первому терму, ко второму терму.
[01:33:27.820 --> 01:33:34.820]  Доводим до какого-то инварианта, вот типа этого, этого, того, что там делали.
[01:33:34.820 --> 01:33:42.820]  И либо эти инварианты совпадут, либо эти инварианты, ну, вы не совпали, ни победа не получилось.
[01:33:45.820 --> 01:33:51.820]  И если они не совпали, не получились, просто ссылаемся на теорему Чорча Росарра.
[01:33:51.820 --> 01:33:54.820]  Вот примерно с тем комментариям, которые я звучал ранее.
[01:33:54.820 --> 01:34:12.820]  Ну, 52-ое, второе задание я не совсем буду комментировать.
[01:34:12.820 --> 01:34:14.820]  Ну, то есть, вкратце скажу.
[01:34:14.820 --> 01:34:21.820]  У нас уже есть понятие там, функции multiply, функции, это что там?
[01:34:22.820 --> 01:34:32.820]  Да, у нас эти функции есть, дальше их записали, ну, и просто приводить к нормальной форме, все.
[01:34:32.820 --> 01:34:35.820]  Особого интереса в 52-м нет.
[01:34:35.820 --> 01:34:40.820]  А в 53-е задание, оно интересное. Интересное на чем?
[01:34:40.820 --> 01:34:50.820]  Что сейчас я расскажу про то, что я называю kernel функции.
[01:34:57.820 --> 01:35:09.820]  Для этого сначала вспомним о попытке формализовать, ну, точнее закодировать в гамме до исчислений обычный метуральный число.
[01:35:10.820 --> 01:35:26.820]  Как мы помним из формальной арифметики, натуральное число мы получали в сигнатуре с нулем и с аксессором.
[01:35:26.820 --> 01:35:36.820]  Давайте попытаемся сказать теперь то же самое, но на уровне λ-термов.
[01:35:57.820 --> 01:36:01.820]  Что бы ты?
[01:36:05.820 --> 01:36:08.820]  Ни момента.
[01:36:26.820 --> 01:36:30.820]  Ну, поехали.
[01:36:30.820 --> 01:36:36.820]  Начинается все с того, что у нас снова есть в некотором смысле ноль.
[01:36:36.820 --> 01:36:42.820]  Тот ноль был как у нас нулем, так и останется.
[01:36:42.820 --> 01:36:44.820]  Ну, поехали.
[01:36:44.820 --> 01:36:50.820]  Начинается все с того, что у нас снова есть в некотором смысле ноль.
[01:36:50.820 --> 01:36:56.820]  Тот ноль был как у нас нулем, так и останется.
[01:36:56.820 --> 01:37:00.820]  Сейчас, не нужно ответить.
[01:37:12.820 --> 01:37:20.820]  Так, да, у нас снова есть номерал черчилл.
[01:37:20.820 --> 01:37:28.820]  Ой, снова говорим про вот истинное значение, там было вот false.
[01:37:28.820 --> 01:37:38.820]  Идея следующая, что давайте у меня есть некоторое число n, и оно выглядит следующим образом.
[01:37:38.820 --> 01:37:46.820]  В альфметике мы сказали, что это s, s от нуля, n раз.
[01:37:46.820 --> 01:37:56.820]  Давайте теперь просто скажем, что такое нуль, скажем, что такое s, и точно так же запишем в λ-термах.
[01:37:56.820 --> 01:38:20.820]  Пусть у меня есть некоторые s, есть некоторые o, и я говорю, что это номерал черчилл, который соответствует числу n.
[01:38:20.820 --> 01:38:26.820]  Записывается вот следующее подчеркивание.
[01:38:26.820 --> 01:38:48.820]  В случае нуля, это s от будет o. Действительно, это совпадает и одновременно с номералом черчи 0, и одновременно со значением лжи.
[01:38:48.820 --> 01:39:10.820]  Скорее всего, на лекциях у вас вместо s и o использовались f, но понятно, что лямбда конверсии можно привести там более обычному виду, что это альфа конверсия.
[01:39:10.820 --> 01:39:30.820]  В целом, да. Надеюсь, понятно, что вот это вот странное, вообще не пойми что, пришло к нам из простой обычной альфметики.
[01:39:30.820 --> 01:39:50.820]  Особенность номералов черча, что если мы номерал черча, и мы к нему подадим некоторую функцию f и аргумент x, то на выходе мы получим n-ту степень этой функции от x.
[01:39:50.820 --> 01:40:02.820]  Например, используя это, можно получать функции унажения, получать функции сложения, и так далее.
[01:40:02.820 --> 01:40:20.820]  Дальше нас будет интересовать предикат пары. Пару я буду означать, что вот у меня есть терм, возначающий пару, вот я буду значать такими скобочками, и он будет равнять следующему.
[01:40:20.820 --> 01:40:45.820]  Если у меня есть некоторый аргумент first, есть аргумент second, есть p доступ к паре, то я получаю, что я беру ключ, проектор, и два аргумента f и second.
[01:40:45.820 --> 01:41:00.820]  Тогда мне нужны будут функции проекторы. Проектор первой компоненты, это лямбда first, second, которая возвращает first.
[01:41:00.820 --> 01:41:09.820]  Проектор второй компоненты, это мы берем first и second и возвращаем second.
[01:41:09.820 --> 01:41:35.820]  Сейчас, да, спасибо, это я мощно, я беру некоторую пару.
[01:41:35.820 --> 01:41:55.820]  Так, я получил пару, и мне в эту пару нужно будет что-то подать, тогда я возьму в пару и подам в пару, мне нужно будет сейчас сказать, пару D.
[01:41:55.820 --> 01:42:10.820]  Один момент, лямбда пара, пара, и в пару мне нужно будет что-то подать, только мне кажется, я сейчас сделал не так.
[01:42:10.820 --> 01:42:29.820]  Сейчас, прошу прощения, мне кажется, тут нужно другая. Тут идея на мне, если я подаю сюда, это пара, первый аргумент отдается сюда, поэтому мне кажется, я сейчас перепутал порядок.
[01:42:29.820 --> 01:42:34.820]  Один момент, я проверю.
[01:42:59.820 --> 01:43:03.820]  Пара.
[01:43:29.820 --> 01:43:48.820]  Нет, все верно.
[01:43:48.820 --> 01:43:56.820]  Окей, да.
[01:43:56.820 --> 01:44:12.820]  И в пару мне нужно подать проектор. Соответственно, проекторами у нас реально выступает, как мы помним, true и false, true был проектор первый, а false был проектор второй.
[01:44:12.820 --> 01:44:17.820]  Да, все, что-то я натупил. Хорошо.
[01:44:17.820 --> 01:44:38.820]  Так, дальше.
[01:44:38.820 --> 01:44:57.820]  Просто расскажу, в чем была у меня загвоздка, я подумал, что здесь, надейно что, мы получаем пару каким образом, что? Пару мы, это создание пары, то есть у нас есть некоторые два аргумента, которые мы подаем в описании пары, тем самым мы редуцируем первые два аргумента FST.
[01:44:57.820 --> 01:45:09.820]  После этого у нас готовая пара, она прибудет в формате, что есть некоторый проектор, а она ожидает этот проектор, у нас есть два аргумента, там value 1 и value 2.
[01:45:09.820 --> 01:45:21.820]  А теперь нам, чтобы получить какой-то из них, нам просто нужно подавать проектор. Ну и в первом случае я буду подавать проектор true, а во втором проектор второй компонент, который false.
[01:45:21.820 --> 01:45:29.820]  То есть, да, я здесь просто подумал, что мы подаем конструктор, мы подаем не конструктор, а уже сконструированный объект.
[01:45:29.820 --> 01:45:53.820]  Хорошо. Итак, теперь начнем думать про задание. У нас есть некоторые функции, у нас есть некоторые функции, у нас дается рекуррентная формула, и наша задача построить комбинатор, позволяющий вычислять эту функцию.
[01:45:53.820 --> 01:46:12.820]  То есть, для того, чтобы это все доброработало, нам понадобится поговорить про такую штуку.
[01:46:23.820 --> 01:46:38.820]  Комбинатор E.T.E.
[01:46:38.820 --> 01:46:59.820]  Итак, E.T.E. If, then, else. Что он будет себя принимать? Он должен принимать себя следующей вещью. Он принимает себя некоторая condition.
[01:46:59.820 --> 01:47:17.820]  Дальше он принимает то, что выполняется при true, и то, что выполняется if, then, else.
[01:47:17.820 --> 01:47:31.820]  Ну, понятно, я сейчас буду писать таким образом. Вам, когда нужно записывать явно в термы, просто приведем некоторое там преобразование записи и получим соответствующий явно в терм.
[01:47:31.820 --> 01:47:42.820]  И он должен возвращать следующее, что если conditional true, то будет false, а в противном случае else. Но ведь condition у нас это какой-то boolean.
[01:47:42.820 --> 01:47:52.820]  Сюда мы будем подавать либо true, либо false.
[01:47:52.820 --> 01:48:01.820]  Тогда, если будет true, то мы знаем, он будет возвращать первый аргумент. Если false, то будет второй.
[01:48:01.820 --> 01:48:18.820]  Поэтому, на самом деле, мы можем это просто записать как condition if true, if else. И уже здесь, в зависимости от true, он выберет нужное нам значение.
[01:48:18.820 --> 01:48:29.820]  Это и есть, по сути, у нас комбинатор if, then, else. А теперь самая главная идея вот это вот вычисление. Как мы будем работать?
[01:48:29.820 --> 01:48:44.820]  Мы будем работать при помощи пары. То есть у нас будет пара глобальная, когда у нас некоторая вот итерация есть, у нас здесь будет пара, которая будет состоять из двух компонентов.
[01:48:44.820 --> 01:48:51.820]  В первой компоненте мы будем говорить про итератор. На каком конкретном мы сейчас шаге.
[01:48:51.820 --> 01:49:04.820]  И здесь у нас будет аккумулятор. То есть некоторое место, где мы будем аккумулировать значения функции. Сагрегированные по нужным.
[01:49:04.820 --> 01:49:12.820]  В данном случае нам требуется на самом деле хранить два значения функции. Минус первое и минус второе.
[01:49:12.820 --> 01:49:37.820]  Поэтому просто пары нам недостаточно. Нам понадобится пара из итератора дальше минус первое значение и минус второе значение.
[01:49:37.820 --> 01:49:42.820]  Вот такая вот более сложная штука. На самом деле это что у нас картеша с трехорогым инструментом.
[01:49:42.820 --> 01:49:51.820]  Теперь давайте думать, как эта штука будет работать. Работать она будет на основе следующего принципа.
[01:49:51.820 --> 01:50:01.820]  Мы заводим kernel function. То есть у нас есть некоторое ядро преобразования.
[01:50:01.820 --> 01:50:19.820]  А дальше мы используем смысл нумералов Чорча как n-ную итерацию функции. Мы просто запустим вот этот процесс итерирования.
[01:50:19.820 --> 01:50:25.820]  Сейчас откроем заготовку.
[01:50:49.820 --> 01:51:11.820]  Поехали. Как будет работать наш kernel?
[01:51:11.820 --> 01:51:17.820]  Kernel будет работать следующим образом. Он принимает в себя некоторую пару и вычисляет значение следующей пары.
[01:51:17.820 --> 01:51:34.820]  То есть у нас есть некоторая пара и по паре начинает производить вычисления.
[01:51:34.820 --> 01:51:46.820]  Какие вычисления у нас есть? У нас есть в условии некоторой рекусе, которая говорит, что в нулях она придает определенное значение,
[01:51:46.820 --> 01:52:06.820]  на остальных n она задана. То есть у нас если 0, то a, если 1, то b, если все остальное, то 3fn-1 плюс 2fn-2.
[01:52:06.820 --> 01:52:16.820]  Пользуемся буквально if-then-else.
[01:52:16.820 --> 01:52:41.820]  Если условия. Условия давайте я пока скажу яку, потом мы подумаем как яку задать.
[01:52:41.820 --> 01:53:01.820]  Некоторый кабинатор равенства λ-термов и говорит, что если equals от нуля и аргумента, аргумент какой у нас?
[01:53:01.820 --> 01:53:15.820]  Это итерация. То есть пара, итерация нас первая. Это будет projection 1 от пары.
[01:53:15.820 --> 01:53:31.820]  Если так, то я должен сказать, что вернуть в этом случае. В этом случае я возвращаю a.
[01:53:31.820 --> 01:53:45.820]  Иначе же теперь проверяем на равенство единицы.
[01:53:45.820 --> 01:54:05.820]  If-then-else condition equals единичке текущей итерации. Если это так, то я возвращаю b.
[01:54:05.820 --> 01:54:15.820]  Теперь мне нужно иначе. Что я дальше делаю?
[01:54:15.820 --> 01:54:23.820]  Понятно, что kernel у нас должна работать таким образом.
[01:54:23.820 --> 01:54:37.820]  Давайте я скажу что-то типа ее типа. У нас есть там пара из итератора и еще пара двух аргументов.
[01:54:37.820 --> 01:54:49.820]  И она должна возвращать нам пару из итератора плюс 1 и пары из каких-то там новых аргументов.
[01:54:49.820 --> 01:55:07.820]  Вот у меня того, что такое kernel. Поэтому здесь на самом деле я буду возвращать не a, а пару из следующей итерации за нулем.
[01:55:07.820 --> 01:55:17.820]  За нулем это 1. Предыдущие значения давайте я поставлю здесь a.
[01:55:17.820 --> 01:55:39.820]  Это будет пара из следующей итерации 1 и пары из предыдущего и предпредыдущего значения.
[01:55:39.820 --> 01:55:53.820]  Понятно, предыдущие значения в первой это будет a, а предпредыдущие, перед нулем я могу записать все что угодно, потому что дальше единичка затрет.
[01:55:53.820 --> 01:56:05.820]  Поэтому пофиг, я возьму ноль. Просто потому что мне так нравится, на самом деле здесь может произвольная фигня быть.
[01:56:05.820 --> 01:56:21.820]  Здесь также будет не b, а будет пара из следующего, это 2.
[01:56:21.820 --> 01:56:43.820]  Дальше пара из предыдущего значения. Для двойки предыдущие значения это будет то, что в единице, а в единице у нас b, а в нуле у нас a.
[01:56:51.820 --> 01:57:03.820]  И теперь мы начинаем рассматривать случай самый интересный, когда у нас уже есть сама функция, и она должна вычислять вот эту стрёмную фигню.
[01:57:03.820 --> 01:57:25.820]  Мы должны будем возвращать итерацию от первой, мы должны будем повысить итератор, тогда у меня есть функция плюс, номерал черча 1, а где у нас лежит итератор?
[01:57:25.820 --> 01:57:45.820]  В первом аргументе пары, снова скобочка, проектор 1 пары, всё, это вот итератор плюс 1. Теперь я задаю значение.
[01:57:45.820 --> 01:57:58.820]  Для следующего числа, для следующей итерации его значение будет вот такое.
[01:57:58.820 --> 01:58:24.820]  Это что у нас? Сначала плюс, первое аргумент у плюса, умножение 3 на f, это умножение на тройку на предыдущие значения.
[01:58:24.820 --> 01:58:42.820]  Предыдущие значения у нас лежит в где? Нам нужно будет взять проектор второй компоненты, получим снова пару, и предыдущие нам нужно будет к этому применять ещё раз проектор первой компоненты.
[01:58:42.820 --> 01:58:59.820]  Это проектор первой компоненты, от проектора второй компоненты пары. Это буквально f-1 умножить на 3, продолжаем, плюс.
[01:58:59.820 --> 01:59:12.820]  Плюс второй аргумент, это умножение, уже теперь двойки, но на минус второе значение. Это проектор второй компоненты, от проектора второй компоненты.
[01:59:12.820 --> 01:59:31.820]  Ух, проектор второй компоненты, от проектора второй компоненты, от поданной пары. Жух-жух-жух, третья скобка, жух-жух-жух, третья скобка.
[01:59:31.820 --> 01:59:54.820]  Дальше это мы всё, подали это её. Сейчас, это вот раз аргумент, это два аргумента. Всё, получили плюсик? Закрываем скобку. Давайте добавим цветов, потому что иначе мы здесь зашьёмся вообще в этих скобках.
[02:00:01.820 --> 02:00:19.820]  Это плюс, это красненький, вор. Жить можно. Красно видно или лучше другим цветом?
[02:00:19.820 --> 02:00:37.820]  О-ка-и-ё, вот этот самый длинный. Так, это я знаю значение предыдущее. А какое же значение будет пред предыдущим? Это то, которое на данный момент предыдущее.
[02:00:37.820 --> 02:00:56.820]  То есть я подаю сюда вторым аргументом, проектор первой компоненты, от проектора второй компоненты пары. Ну и на этом я благополучно завершаю.
[02:00:56.820 --> 02:01:20.820]  Вот её ещё. Текс, вот так. Всё, жёлтенькое, готово. Итак, у меня есть ИТЕ, для него подали, получили что-то. Дальше ИТЕ, для него подали, подали.
[02:01:20.820 --> 02:01:34.820]  ИТЕ твой налево. Это кондишен, это body, это else body.
[02:01:34.820 --> 02:02:03.820]  Значит, сейчас. Ё. Один момент. А, нет, вот. Ух, блин. Вот это втор... это короче пара вот для этих аргументов, а вот полностью это вот оно.
[02:02:04.820 --> 02:02:18.820]  Знаете, прям жирное в ряду, потому что иначе я сам задолбаюсь в этих скобках, что происходит. Вот. Всё. Это else body. Вот такую вот стрёмную фигню мы вернули.
[02:02:18.820 --> 02:02:36.820]  Ну и осталось поставить завершающую скобку. Вот так вот. Всё. Не стой. Да. Получилась вот такая вот функция гидра преобразования, которая берёт пару, проверяет, что если 0 она возвращает, у нас что?
[02:02:36.820 --> 02:02:57.820]  Возвращает A, если это единица, то мы вернём предыдущие B дальше A, если это какой-то N, в первом случае мы его увеличим на 1, а дальше дадим пару из предыдущего значения, которые вычислим по этой формуле, используя вот эти вот элементы.
[02:02:57.820 --> 02:03:26.820]  А в качестве предыдущего, текущие предыдущие дадим. Всё. Это по сути kernel function, это мы записали один шаг преобразования, причём используя вот эти вот итоешки, мы смогли сделать вот pattern matching по всем случаем индукции.
[02:03:27.820 --> 02:03:49.820]  Теперь нам осталось самое последнее, самое простое запустить эту террацию. Если мы хотим вычислить F от M, то вопрос насколько шагов нам нужно будет там запускать эту историю, сейчас скажу.
[02:03:49.820 --> 02:04:10.820]  Да, всё верно, нам нужно будет запускать всю историю на N шагов. Как это делать? А делать это следующим образом.
[02:04:10.820 --> 02:04:37.820]  То есть, итоговая функция, которую нас хотели. F. Сначала у нас были там A и B, чисто которые это берут. Хорошо, возьмём число A и B. Я их выдаю сначала именно для того, чтобы, например, мы могли, передав A и B задав, всё, мы получаем функцию, которая работает абсолютно нормально от N.
[02:04:37.820 --> 02:04:52.820]  Не так, что мы передаём N, а потом задаём какие-то там параметры функции. А сначала идёт параметризация функций, а потом уже её аргумент. N, A, B и N, и дальше она возвращает следующую историю.
[02:04:52.820 --> 02:05:21.820]  Мне нужно будет N раз запустить функцию kernel от стартовых условий.
[02:05:22.820 --> 02:05:47.820]  Итак, какое же происходит стартовое условие? Стартовое условие на следующее, что нам нужно подать пару.
[02:05:47.820 --> 02:06:12.820]  А нам подать вообще какую стартовую пару? Мы начинаем с, ну давайте тут напишу, пара, начальное значение. Первая террация, какая у нас, нулевая, правильно, здесь подам 0.
[02:06:12.820 --> 02:06:37.820]  Дальше же я должен подать вот эти вот значения. Ну, нули они там всё равно сияются, поэтому на самом деле пофиг. Окей, я передам тогда пару из нуля и нуля и закрою скобку.
[02:06:42.820 --> 02:07:07.820]  Хорошо, на выходе значит я получу действительно пару из какого-то итератора значения, вот соответствующий там F от N, F от минус N, это я подам 0, она вычислиться даст и я запущу, сейчас скажу.
[02:07:07.820 --> 02:07:31.820]  Один момент, сейчас проверим просто на что именно мы запустим, на сколько итераций. Если я подам на 0, то я верну пару из нуля и нуля и нуля, если я подам 1, я один раз запущу функцию от этого, она мне вернёт всё как надо.
[02:07:31.820 --> 02:07:59.820]  Вот, я запущу на N плюс 1, то есть на самом деле как-то будет выглядеть ABN плюс N1, вот, так вот верно. То есть для чего я это делаю? Именно для того, чтобы в обычном смысле у нас здесь лежит минус 1 и минус 2 значение,
[02:07:59.820 --> 02:08:23.820]  я запущу на 1 итерацию раньше и получу, что у меня здесь будет FNT, а здесь FN-1, всё, у меня есть FN. Теперь я получу такую сложную конструкцию, мне тут нужно конструкцию из неё вытащить FN, поэтому вот теперь я ещё раз применяю проекторы.
[02:08:23.820 --> 02:08:43.820]  Я сначала возьму вторую компоненту, а потом к этому я применю проектор первой компоненты и тем самым вытащу FN. То есть я теперь сделаю проектор первой компоненты, вот проектора второй компоненты, вот это вот полученное значение.
[02:08:43.820 --> 02:09:02.820]  Компонент плюс N1.
[02:09:02.820 --> 02:09:21.820]  Кернелл от вот этой всей истории, которая такая вот. Это первая скобка и вторая скобка, и вот этот уже действительно будет F.
[02:09:21.820 --> 02:09:43.820]  Ещё вот так вот. Вот такая вот страхолюдина. На самом деле задание не сложное, просто нужно понять, что вот эту историю и дальше в конце распасить ответ.
[02:09:43.820 --> 02:09:56.820]  Глобально саму итерацию нам позволяют проводить на пиралу Чорча и наша задача лишь обозначить функцию ядра.
[02:09:56.820 --> 02:10:09.820]  Ну это же вроде всё.
[02:10:09.820 --> 02:10:22.820]  Тогда ещё ничего интересного ещё не было. Это было было было было было было было было было было.
[02:10:22.820 --> 02:10:29.820]  Да, тогда на этом всё. Всем спасибо. Всем удачи на контрольной и на экзамене.
