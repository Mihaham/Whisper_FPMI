[00:00.000 --> 00:11.680]  Следующий пункт будет вот о чём.
[00:11.680 --> 00:22.440]  Нет, про множество наследований мы потом будем говорить.
[00:23.440 --> 00:26.440]  А она у нас вообще забанена или не вообще?
[00:26.440 --> 00:32.440]  Нет, но нам пригодится более того однажды, даже не однажды.
[00:32.440 --> 00:44.440]  Так, следующий пункт.
[00:44.440 --> 00:58.440]  Это видимость и доступность методов родителя.
[00:58.440 --> 01:08.440]  Ну вот смотрите, у меня есть класс Base, и в нём есть какой-нибудь метод f,
[01:08.440 --> 01:28.440]  в котором будет один, и есть ещё, не знаю, поле x, есть derived наследник Base,
[01:28.440 --> 01:44.440]  в котором есть поле y.
[01:44.440 --> 01:49.440]  Ну давайте пока я безобидно вот так сделаю, назову по-разному, тут ничего интересного.
[01:49.440 --> 01:52.440]  Всё понятно, это работает.
[01:52.440 --> 01:58.440]  Что вы там обсуждаете, вы как-то очень громко.
[01:58.440 --> 02:01.440]  Нет, ну тут всё понятно, тут нечего показывать.
[02:01.440 --> 02:06.440]  Давайте я, чтобы было интереснее, это поле тоже назову x.
[02:06.440 --> 02:08.440]  Как он называется 4,2?
[02:08.440 --> 02:21.440]  Видимость и доступность методов родителей.
[02:21.440 --> 02:35.440]  Ну, я бы сказал, видимость и доступность методов принаследования.
[02:35.440 --> 02:47.440]  Вот, смотрите, я создал класс Base, и в нём поле x, а потом унаследовал от него derived, и в нём тоже сделал поле x.
[02:47.440 --> 02:53.440]  Что же теперь будет?
[02:53.440 --> 02:59.440]  Корректно ли так вообще делать?
[02:59.440 --> 03:02.440]  Правильно, ну ты послушал, мы пока на перемене разговаривали про это.
[03:02.440 --> 03:08.440]  Ну да, всё правильно, всё нормально, это нормально, это совершенно нормально,
[03:08.440 --> 03:13.440]  типичная ситуация для плюсов, есть более локальный скоп и менее локальный скоп.
[03:13.440 --> 03:25.440]  Вот если я сейчас выведу x из d, то выведется 1, потому что тот x, который в derived, он более предпочтительен.
[03:25.440 --> 03:32.440]  В x конечно же есть и x из base, там их два теперь x в derived.
[03:32.440 --> 03:49.440]  Но, значит, поскольку x, ну поскольку я из derived доберу x, то по умолчанию берётся этот.
[03:49.440 --> 03:52.440]  А могу ли я взять x из base?
[03:52.440 --> 03:57.440]  Вот, у меня есть derived, а я хочу x взять в нём из base.
[03:57.440 --> 04:02.440]  В нём есть оба x, первый x не делся, он в нём по-прежнему есть.
[04:02.440 --> 04:07.440]  Просто по умолчанию у меня derived выводится.
[04:07.440 --> 04:10.440]  А как мне x из base достать?
[04:10.440 --> 04:13.440]  В каком месте нужно base 2.0 написать?
[04:13.440 --> 04:17.440]  Правильно, вот вы уже начинаете понимать, вот так надо написать.
[04:17.440 --> 04:23.440]  2.0 и 2.0 более высокий приоритет, чем у точки, именно по этой причине, кстати.
[04:23.440 --> 04:26.440]  Всё, теперь я взял x из base.
[04:26.440 --> 04:29.440]  То есть оба x есть.
[04:29.440 --> 04:34.440]  Ну ладно, тогда более интересный вопрос.
[04:34.440 --> 04:38.440]  А вот я взял и функцию назвал так же.
[04:38.440 --> 04:40.440]  И вызвал.
[04:40.440 --> 04:44.440]  Ну, ничего интересного, выведется 2 просто, да? Нет.
[04:44.440 --> 04:47.440]  Что?
[04:47.440 --> 04:52.440]  А, потому что я пытаюсь, да, конечно.
[04:52.440 --> 04:54.440]  Вот, и вызвал.
[04:54.440 --> 04:56.440]  Ну, выведется 2.
[04:56.440 --> 04:59.440]  Вот, я могу написать base 2.0.
[04:59.440 --> 05:02.440]  Выведется 1.
[05:02.440 --> 05:10.440]  А что если у меня ситуация такая?
[05:10.440 --> 05:12.440]  Ну, сначала простой вопрос.
[05:12.440 --> 05:17.440]  Вот, допустим, вот эта функция приватная.
[05:17.440 --> 05:22.440]  И я не написал base 2.0. Что будет?
[05:22.440 --> 05:24.440]  Молодцы, все уже правильно понимают, куда это работает.
[05:24.440 --> 05:28.440]  Приватность не влияет на выбор версий перегрузки, конечно же, никогда.
[05:28.440 --> 05:33.440]  Приватность просто означает, что вам запрещено.
[05:33.440 --> 05:39.440]  То есть никакой подмены одной функции другой из-за приватности не случится.
[05:39.440 --> 05:41.440]  Просто вам будет запрещено.
[05:41.440 --> 05:54.440]  Хорошо, тогда вот такой вопрос.
[05:54.440 --> 05:58.440]  А что теперь будет?
[05:58.440 --> 06:04.440]  Ну, вообще, было бы логично, чтобы вызвалось из базы.
[06:04.440 --> 06:08.440]  Значит, у меня в базе есть функция double, а в derived такая же функция от int.
[06:08.440 --> 06:10.440]  А я вызываюсь из derived от double.
[06:10.440 --> 06:16.440]  Выбирается с точно совпадающей сигнатурой, потому что первый приоритет при разрешении перегрузки.
[06:16.440 --> 06:21.440]  У нас не происходит перегрузки.
[06:21.440 --> 06:23.440]  Там, наверное, conversion все-таки.
[06:23.440 --> 06:26.440]  Так, ну давайте голосуем. Демократический процесс.
[06:26.440 --> 06:31.440]  Кто считает, что вызовется версия из базы?
[06:31.440 --> 06:36.440]  Кто считает, что вызовется версия из derived?
[06:36.440 --> 06:39.440]  А кто руку не опустил после первого?
[06:39.440 --> 06:42.440]  А кто не знает? А кто думает, что CE?
[06:42.440 --> 06:47.440]  Или UB?
[06:47.440 --> 06:51.440]  Нет, ну явный каст будет.
[06:51.440 --> 06:54.440]  Да.
[06:54.440 --> 06:57.440]  Ну опять большинство ошибается.
[06:57.440 --> 06:59.440]  Иначе бы я не задавал эти вопросы.
[06:59.440 --> 07:02.440]  Вы вообще можете, кстати, уже заметить, что всякий раз, когда я устраиваю голосование,
[07:02.440 --> 07:06.440]  это значит, что ответ, скорее всего, будет не тот, который все считает.
[07:06.440 --> 07:07.440]  Да.
[07:07.440 --> 07:10.440]  Интуиция здесь тоже подводит.
[07:10.440 --> 07:13.440]  На самом деле вызовется от int.
[07:13.440 --> 07:16.440]  И работает вот это... как?
[07:16.440 --> 07:18.440]  Да, это не перегрузка функций.
[07:18.440 --> 07:20.440]  Дело в том, что вот эти функции...
[07:20.440 --> 07:25.440]  Короче, функции f от derived, f от double, f от int, они неравноправны здесь.
[07:25.440 --> 07:28.440]  Они...
[07:28.440 --> 07:33.440]  Ну, помните, когда мы с вами открывали, впервые изучали перегрузку,
[07:33.440 --> 07:37.440]  там была страница overloading resolution, вот эти огромные длинные правила?
[07:37.440 --> 07:41.440]  Я вам уже один раз напоминал, что там есть несколько стадий.
[07:41.440 --> 07:44.440]  Первая стадия — это отбор кандидатов.
[07:44.440 --> 07:47.440]  Вторая стадия — это выбор кандидата из подходящих.
[07:47.440 --> 07:49.440]  И третья стадия — это проверка доступа.
[07:49.440 --> 07:51.440]  Вот.
[07:51.440 --> 07:57.440]  Так вот, если бы эти функции конкурировали на стадии выбор лучшего кандидата,
[07:57.440 --> 07:58.440]  конечно, выиграла бы от double.
[07:58.440 --> 08:02.440]  Но проблема в том, что функция f от double не попадает в кандидаты.
[08:02.440 --> 08:03.440]  Она не рассматривается.
[08:03.440 --> 08:05.440]  Дело в том, что если в области...
[08:05.440 --> 08:09.440]  Ну, если в более локальной области видимости, то есть в derived есть уже f,
[08:09.440 --> 08:14.440]  то версия от double не рассматривается в базе.
[08:14.440 --> 08:19.440]  Набор кандидатов останавливается, как только мы увидели какие-то f в derived.
[08:19.440 --> 08:22.440]  Короче, f от double в перегрузке не участвует.
[08:22.440 --> 08:25.440]  Поэтому выберется, значит...
[08:25.440 --> 08:28.440]  Ну, мне warning сказали, что...
[08:28.440 --> 08:30.440]  Видите?
[08:30.440 --> 08:31.440]  Вот.
[08:31.440 --> 08:35.440]  Но веселее то, что даже если у меня вот такая ситуация,
[08:35.440 --> 08:38.440]  сказалось бы однозначно какую функцию вызывать,
[08:38.440 --> 08:41.440]  все равно она не вызовется, будет CE.
[08:44.440 --> 08:48.440]  То есть это вот то, о чем название этого файла — methods-hiding.
[08:48.440 --> 08:52.440]  Если у меня какая-то функция объявлена в derived с той же сигнатурой,
[08:52.440 --> 08:54.440]  что была в base,
[08:54.440 --> 08:57.440]  то она перекрывает видимость,
[08:57.440 --> 09:01.440]  и теперь мне f из base невидимо.
[09:01.440 --> 09:03.440]  С тем же названием, не с той же сигнатурой.
[09:03.440 --> 09:05.440]  С тем же названием, конечно, да.
[09:07.440 --> 09:09.440]  Вот.
[09:09.440 --> 09:12.440]  Вот здесь ситуация в том, что мне f видна,
[09:12.440 --> 09:15.440]  но доступна, но не видна.
[09:15.440 --> 09:18.440]  Это название — видимость и доступность.
[09:18.440 --> 09:23.440]  Помните, я говорил, что бывают видимые, но недоступные вещи?
[09:24.440 --> 09:27.440]  Часто бывает, смотришь на что-нибудь, так хочется, а нельзя.
[09:27.440 --> 09:28.440]  Вот.
[09:28.440 --> 09:31.440]  А бывает доступные, но как бы ты бы и мог,
[09:31.440 --> 09:34.440]  но не дотянуться, не видно.
[09:34.440 --> 09:38.440]  Вот здесь ситуация, когда просто не дотянуться.
[09:38.440 --> 09:42.440]  Можно было бы, но не дотянуться — недоступно.
[09:42.440 --> 09:44.440]  Вот.
[09:44.440 --> 09:49.440]  Это значит, ну, затмение.
[09:49.440 --> 09:52.440]  То есть f перекрывает видимость того.
[09:52.440 --> 09:55.440]  Ну, я мог бы сделать аналогично,
[09:55.440 --> 09:59.440]  ну, а недоступно — это когда вот так.
[09:59.440 --> 10:02.440]  То есть я мог бы сделать private вот эту,
[10:02.440 --> 10:04.440]  ну, это пример, который я уже показывал.
[10:04.440 --> 10:07.440]  Я мог бы сделать эту private от double,
[10:07.440 --> 10:09.440]  а ту public от double.
[10:09.440 --> 10:10.440]  Но она и так public.
[10:10.440 --> 10:11.440]  И мне бы это не помогло.
[10:11.440 --> 10:15.440]  Это все равно было бы ce.
[10:15.440 --> 10:17.440]  Потому что эта штука видна, но недоступна,
[10:17.440 --> 10:19.440]  а та доступна, но не видна.
[10:19.440 --> 10:24.440]  Не видна — это значит, не участвует в конкурсе на перегрузку.
[10:24.440 --> 10:26.440]  Прости, а у нас уже все было плохо
[10:26.440 --> 10:28.440]  только потому, что у них были одинаковые названия,
[10:28.440 --> 10:29.440]  даже не одинаковая сигнатура?
[10:29.440 --> 10:31.440]  Что значит, все плохо? У нас все нормально.
[10:31.440 --> 10:32.440]  Сейчас.
[10:32.440 --> 10:36.440]  Почему, когда у тебя вот f в базе от double была,
[10:36.440 --> 10:40.440]  а в диракти была просто f от пустоты, то было ce?
[10:40.440 --> 10:42.440]  Потому что я вызвался от double.
[10:42.440 --> 10:45.440]  Да, но вот в базе же есть от double.
[10:45.440 --> 10:46.440]  Нет, она не видна.
[10:46.440 --> 10:48.440]  Ее нет, она не рассматривается.
[10:48.440 --> 10:51.440]  Я же про это и толдычил тут пять минут.
[10:51.440 --> 10:52.440]  То есть мы в принципе не можем...
[10:52.440 --> 10:54.440]  Не рассматривается версия из базе,
[10:54.440 --> 10:56.440]  если есть такие имена в derived.
[10:56.440 --> 10:58.440]  Скрываются они за ними.
[10:58.440 --> 11:01.440]  У тебя в более локальной умности видимости уже есть такое имя.
[11:01.440 --> 11:02.440]  Это имя не видно тебе.
[11:02.440 --> 11:04.440]  Только от имени я же говорю. Только от имени.
[11:04.440 --> 11:05.440]  От имени.
[11:05.440 --> 11:08.440]  f уже есть в derived, поэтому f из базе не рассматривается.
[11:08.440 --> 11:09.440]  Да.
[11:09.440 --> 11:12.440]  Обравниваешься, чтобы так же работать с переменами.
[11:12.440 --> 11:15.440]  То есть сейчас у нас есть x в внутреннем и внешнем.
[11:15.440 --> 11:16.440]  Так и работает.
[11:16.440 --> 11:17.440]  Так и работает.
[11:17.440 --> 11:18.440]  Я только что до этого показывал.
[11:18.440 --> 11:22.440]  Если я d.x пишу, то это получается я беру x из derived.
[11:22.440 --> 11:25.440]  Я могу x другим типом здесь сделать.
[11:25.440 --> 11:27.440]  Даже если могу private?
[11:27.440 --> 11:28.440]  Конечно.
[11:30.440 --> 11:33.440]  Даже если x private, все равно обращение к x,
[11:33.440 --> 11:37.440]  сначала происходит определение того, к чему я пытаюсь обратиться,
[11:37.440 --> 11:39.440]  а потом можно ли мне к этому обратиться.
[11:39.440 --> 11:42.440]  Private проявляется в последнюю очередь и к полям, и к методам.
[11:43.440 --> 11:44.440]  Хорошо.
[11:48.440 --> 11:51.440]  Но, конечно же, я могу здесь написать вот так же.
[11:51.440 --> 11:54.440]  Я могу написать d.base2.2.f.
[11:54.440 --> 11:55.440]  Это вот то, о чем вы спрашивали.
[11:55.440 --> 11:57.440]  А что за grain внутри сына?
[11:57.440 --> 11:58.440]  А вот что.
[11:58.440 --> 12:02.440]  Когда у вас внутри объекта...
[12:02.440 --> 12:06.440]  Ну, воспринимайте это так, как будто у вас внутри d есть такая вот
[12:06.440 --> 12:09.440]  внутренняя область видимости, в которой что-то напехано еще.
[12:09.440 --> 12:12.440]  И вы можете к ней явно в нее проникнуть,
[12:12.440 --> 12:14.440]  если вы хотите d.base сказать.
[12:16.440 --> 12:19.440]  Но если бы здесь было private написано на следовании,
[12:19.440 --> 12:21.440]  то, конечно, это было бы CEP.
[12:21.440 --> 12:25.440]  Со словами, вам запрещено обращаться к...
[12:28.440 --> 12:30.440]  Ну, base это приватный родитель.
[12:31.440 --> 12:32.440]  Понятно?
[12:33.440 --> 12:34.440]  Вот.
[12:35.440 --> 12:38.440]  Однако есть следующая возможность.
[12:38.440 --> 12:41.440]  Вот у вас, допустим...
[12:42.440 --> 12:44.440]  Ну, вот вы определяете наследника,
[12:44.440 --> 12:49.440]  и вы хотите, чтобы методы родителя у вас все-таки были доступны,
[12:49.440 --> 12:52.440]  несмотря на то, что вы их затмили другими именами.
[12:52.440 --> 12:54.440]  То есть вы хотите, чтобы все-таки...
[12:56.440 --> 12:58.440]  Чтобы, короче, f от double наравне к перегрузке участвовал,
[12:58.440 --> 13:01.440]  несмотря на то, что вы доопределили f.
[13:02.440 --> 13:03.440]  А ты им скажем.
[13:09.440 --> 13:10.440]  Нет.
[13:12.440 --> 13:13.440]  D.
[13:13.440 --> 13:15.440]  А дальше имя.
[13:17.440 --> 13:22.440]  Внутри D есть, как бы, внутренняя такая областидимость под названием base.
[13:22.440 --> 13:24.440]  И из нее я беру f.
[13:24.440 --> 13:26.440]  Двойное двоеточие приоритетнее, чем...
[13:27.440 --> 13:28.440]  точка.
[13:29.440 --> 13:32.440]  А точка приоритетнее, чем круглые скобочки.
[13:35.440 --> 13:36.440]  D есть не переменная.
[13:36.440 --> 13:38.440]  Внутри D есть, как бы, такой...
[13:38.440 --> 13:40.440]  Ну, считайте, что такое контейнер.
[13:40.440 --> 13:43.440]  И в нем есть, как бы, внутренняя еще переменная,
[13:43.440 --> 13:45.440]  и еще другие методы.
[13:49.440 --> 13:51.440]  Это D двойное двоеточие приоритетнее.
[13:51.440 --> 13:53.440]  Это вот так вот считается.
[13:54.440 --> 13:58.440]  Здесь я указываю qualified ID, то, что называется.
[13:58.440 --> 14:01.440]  Я говорю f с префиксом откуда.
[14:02.440 --> 14:07.440]  Я говорю, у объекта D вызвать не обычную f, а вот f отсюда.
[14:09.440 --> 14:11.440]  Так вот, я могу...
[14:17.440 --> 14:20.440]  захотеть, чтобы в derived, тем не менее, была видна f от double,
[14:20.440 --> 14:23.440]  и чтобы она участвовала в перегрузке наравне с...
[14:25.440 --> 14:26.440]  этой.
[14:26.440 --> 14:28.440]  Тогда я могу написать using.
[14:28.440 --> 14:30.440]  Using base...
[14:41.440 --> 14:43.440]  Вот если я так напишу,
[14:43.440 --> 14:45.440]  то теперь уже будет нормально работать перегрузка.
[14:45.440 --> 14:48.440]  Когда я написал здесь, в области видимости derived,
[14:48.440 --> 14:50.440]  using base f,
[14:50.440 --> 14:55.440]  я привнес все версии f сюда,
[14:55.440 --> 14:59.440]  и теперь они наравне участвуют в перегрузке вместе с версиями из derived.
[14:59.440 --> 15:01.440]  И вот теперь вызовется f от double.
[15:13.440 --> 15:15.440]  Когда ты объявляешь функцию, ты не можешь ей...
[15:16.440 --> 15:18.440]  Ты объявляешь функцию в пространстве derived.
[15:18.440 --> 15:21.440]  Ты не можешь, объявляя функцию в каком-то пространстве,
[15:21.440 --> 15:23.440]  присвоить ей как бы другой префикс.
[15:24.440 --> 15:26.440]  Если ты объявляешь f в derived, то она будет из derived.
[15:26.440 --> 15:30.440]  Ты не можешь при объявлении задать квалифицированное имя.
[15:34.440 --> 15:38.440]  Вот, так можно привнести только сразу все f.
[15:38.440 --> 15:40.440]  То есть я не могу отдельно привнести, допустим, f от double.
[15:40.440 --> 15:43.440]  Если я привнесу f, то все версии.
[15:43.440 --> 15:45.440]  Я могу также и x привнести.
[15:49.440 --> 15:53.440]  Вот, смотрите, я написал using base x еще.
[15:53.440 --> 15:55.440]  И теперь у меня будет...
[15:57.440 --> 16:00.440]  Ну, на самом деле, это CE уже на этапе, когда я написал using,
[16:00.440 --> 16:03.440]  потому что переменную привнести сюда так нельзя.
[16:03.440 --> 16:06.440]  Это будет, значит, конфликтующее имя переменной.
[16:08.440 --> 16:09.440]  Вот.
[16:10.440 --> 16:12.440]  Теперь интересный вопрос.
[16:12.440 --> 16:15.440]  Вот если эта base была private...
[16:16.440 --> 16:18.440]  Ну, если эта base была private,
[16:18.440 --> 16:21.440]  то я ее using сделать не смогу из derived, очевидно.
[16:21.440 --> 16:23.440]  А если она была protected?
[16:34.440 --> 16:35.440]  Ну, вот нет.
[16:35.440 --> 16:39.440]  Если я пишу using, то я в паблик ее привношу сюда.
[16:39.440 --> 16:44.440]  Когда я в публичной области derived написал using base f,
[16:44.440 --> 16:48.440]  несмотря на то, что base f protected, но мне-то она доступна,
[16:48.440 --> 16:50.440]  я ее сделал доступно извне теперь тем самым.
[16:50.440 --> 16:55.440]  То есть это нормально будет работать, несмотря на то, что там она была protected.
[16:55.440 --> 17:00.440]  То есть я как бы вытащил ее наружу и разрешил внешним ей пользоваться.
[17:05.440 --> 17:06.440]  Вот.
[17:09.440 --> 17:10.440]  Ну, вот вот.
[17:20.440 --> 17:22.440]  То же самое с конструкторами.
[17:22.440 --> 17:26.440]  Вот у меня есть, допустим, конструктор base от чего-то.
[17:28.440 --> 17:32.440]  А от derived нет, а у derived нет такого конструктора.
[17:32.440 --> 17:35.440]  Я могу захотеть, чтобы derived можно было конструировать
[17:35.440 --> 17:37.440]  от того же от чего base конструировался,
[17:37.440 --> 17:43.760]  в derived нет дополнительных полей и я не хочу derived переопределять кучу конструкторов от того
[17:43.760 --> 17:52.240]  же самого от чего base был тогда я могу написать using base 2.2.base вот эта конструкция очень важно и
[17:52.240 --> 17:59.080]  очень часто применимая только начиная c++11 появилась то есть я пишу using base base и тем
[17:59.080 --> 18:03.360]  самым я разрешаю создавать derived от всех тех наборов аргументов от которых base было можно
[18:03.360 --> 18:12.360]  создать правда таким образом не наследуются конструкторы копирования и конструкторы перемещения
[18:12.360 --> 18:21.160]  ну короче конструктор копирования так не унаследуется вот если я скажу base b а потом скажу derived
[18:21.160 --> 18:30.480]  d равно b то это не будет компилироваться потому что конструктор копирования такой конструкции
[18:30.480 --> 18:40.120]  не наследуется вот нельзя вызвать нечего сконструировать derived вот но если я просто
[18:40.120 --> 18:48.120]  скажу base b от чего-нибудь там ну derived d у меня теперь derived d кстати у меня должно быть можно
[18:48.120 --> 18:56.880]  сконструировать сейчас наверное потому что у derived а нет нельзя потому что теперь у derived
[18:56.880 --> 19:00.920]  есть какой-то конструктор и он только от от этого разрешает себя ну вот короче теперь derived
[19:00.920 --> 19:15.480]  можно создавать нельзя потому что он protected что а прекрасно значит для конструкторов такая
[19:15.480 --> 19:21.080]  штука не работает конструктор обязательно надо чтобы был паблик чтобы так работала ну хорошо
[19:21.080 --> 19:30.760]  так ну вот теперь работает все короче я теперь могу derived создавать от int унаследовал
[19:30.760 --> 19:40.040]  конструктор из base запомните эту конструкцию она часто нужна и она нам еще один раз спасет
[19:40.040 --> 19:48.520]  жизнь буквально это будет очень весело и задорно но в конце второго семестра ну да
[19:48.520 --> 19:59.200]  наследование конструкторов из родителя вот потому что так решил комитет по стандартизации
[19:59.200 --> 20:06.160]  ну я не знаю как еще ответить ну вот почему-то видимо они забыли закастылить ну типа обычные
[20:06.160 --> 20:09.480]  функции если привносит что они работают а конструктор если протекто привносить не
[20:09.480 --> 20:27.600]  работает почему-то так давайте сейчас как раз я начну отвечать на этот вопрос и тем самым
[20:27.600 --> 20:41.320]  перейдем к пункту 3 следующий пункт это нас значит конструктор и деструктор и принаследовании
[20:41.320 --> 21:06.640]  пункт 4 3 называется конструктор и деструктор и в случае наследования
[21:11.320 --> 21:24.880]  прежде чем говорить о конструкторах и деструкторах надо поговорить о том а как
[21:24.880 --> 21:31.600]  вообще объект памяти устроен когда у нас наследование но вот на самом деле когда у нас
[21:31.600 --> 21:39.040]  наследование я уже неоднократно эту метафору использовал но можно сказать сейчас прям прямым
[21:39.040 --> 21:45.680]  текстом что в дирайвде создается прям часть называемая бейс то есть буквально когда у вас
[21:45.680 --> 21:52.160]  есть класс наследника класс родитель то в классе наследники есть прям кусок называемый бейс и
[21:52.160 --> 22:00.280]  он создается сперва прежде чем начать создавать настройку дирайвд когда у вас что-то наследник
[22:00.280 --> 22:09.120]  чего-то то это означает что вот оно надстройка над ним дирайвд такая надстройка над бейс в которой
[22:09.120 --> 22:13.840]  возможно есть какие-то дополнительные поля но перво-наперво обязательно создается бейс когда
[22:13.840 --> 22:20.040]  вы создаете дирайвд то есть вот опять допустим у меня есть структура бейс и в ней есть какие-то
[22:20.040 --> 22:30.640]  поля не знаю стд вектор int в
[22:41.920 --> 22:43.400]  и вот у меня есть наследник
[22:50.040 --> 23:10.600]  ну и тут есть еще какие-нибудь поля не знаю стд стринг и дабл вот я определяю конструктор
[23:10.600 --> 23:21.480]  наследника но давайте начало когда мне нет никаких конструкторов вот что происходит когда
[23:21.480 --> 23:25.960]  я создаю бэйз а нет никаких явно объявленных конструк perceber merchant и нет никаких явно
[23:25.960 --> 23:36.000]  объявленных конструк dawn сначала создается бейс потом дирайвд то есть сначала инициализируется
[23:36.000 --> 23:41.600]  вот это поле, потом создается вектор, после этого часть base считается созданной, после этого
[23:41.600 --> 23:50.280]  настраивается над ним derived, создается значит строка, потом double. Я могу это проиллюстрировать
[23:50.280 --> 23:59.080]  вот таким образом явно, сказав вот здесь вот что-нибудь такое. То есть когда я создаю derived,
[23:59.080 --> 24:05.720]  у меня обязательно перед этим вызывается дефолтный конструктор base. Часть derived не начнет
[24:05.720 --> 24:10.500]  создаваться пока не закончится создание base. Если у меня в base есть дефолтный конструктор,
[24:10.500 --> 24:17.620]  то он и вызовется, ну при этом если у меня в base есть другие конструкторы, то они не вызовутся.
[24:17.620 --> 24:20.960]  У меня вызвается именно дефолтный конструктор, потому что дефолтный конструктор derived вызываю.
[24:21.580 --> 24:25.860]  Он по умолчанию дефолтный конструктор base вызывает. В каком порядке это работает. Сначала
[24:25.860 --> 24:29.980]  инициализируется поля base. потом конструктор base отрабатывает и только потом начинает
[24:29.980 --> 24:36.020]  унициализироваться поля derived. А потом, если есть, вызывается тело конструктора derived.
[24:36.020 --> 24:53.980]  Вот сейчас выяснится 1.2. Ну, как вы можете догадаться, с деструктурами то же самое в обратном
[24:53.980 --> 25:05.380]  порядке. Когда уничтожается объект derived, то сначала вызывается деструктур derived,
[25:05.380 --> 25:14.580]  потом уничтожаются поля derived, потом вызывается деструктур base, и потом уничтожается поля base.
[25:14.580 --> 25:22.460]  Вот сейчас выведется 1.2.-2.-1. Обязательно, всякий раз, когда создается derived,
[25:22.460 --> 25:28.220]  сначала создается base, потом надстраивается derived. Когда уничтожается derived, сначала разрушается
[25:28.220 --> 25:35.420]  та часть верхняя, которая derived, а потом то, что ядро его, это base. При этом всегда сначала
[25:35.420 --> 25:46.020]  тело деструктора отрабатывает, а потом разрушаются поля. Так, есть ли вопросы здесь?
[25:46.020 --> 25:55.060]  Если у base запретит дефолтный конструктор, то мы не сможем derived создать? Конечно. Если я
[25:55.060 --> 26:02.060]  здесь напишу base равно delete, то разумеется derived по умолчанию тоже создать не получится,
[26:02.060 --> 26:07.300]  потому что непонятно как base создать, base явно запрещено создавать по умолчанию.
[26:07.300 --> 26:19.940]  Вот. Сейчас, а вот это string, такая же строка, которая лежит в библиотеке string? std string, да, а что?
[26:19.940 --> 26:27.820]  А как ты ее создал без библиотеки string? Она в ее string просто подключена. То есть даже если
[26:27.820 --> 26:35.340]  ты отключишь vector, то ты все равно так можешь написать? Нет, она, да. Но в ее string просто
[26:35.340 --> 26:39.780]  заинклужен string, поэтому, когда я заинклюзил его string, string не нужно инклюзить, можно не
[26:39.780 --> 26:52.740]  инклюзить. Так, окей. Хорошо, но теперь, если я хочу конструкторы не по умолчанию. Допустим,
[26:52.740 --> 26:59.140]  у меня здесь есть конструктор не по умолчанию, но вот конструктор по умолчанию нет. Есть какой-нибудь
[26:59.140 --> 27:06.580]  конструктор не по умолчанию от int, который инициализирует вот этот x. Теперь я опять не могу
[27:06.580 --> 27:12.020]  создать derived по умолчанию. Понимаете почему? Потому что не объяснено как создавать base,
[27:12.020 --> 27:17.860]  поскольку у base есть не дефолтный конструктор явный, то компилятор уже не генерирует для него
[27:17.860 --> 27:24.820]  дефолтный конструктор, а поскольку я в derived не сказал чем проинциализировать base, то он не
[27:24.820 --> 27:38.740]  знает чем унициализировать, дефолтный конструктор не работает, будет ce. Вот, и вот здесь в конструкторе
[27:38.740 --> 27:48.580]  derived, если я не, вот когда я вхожу, когда я пишу конструктор derived, смотрите, мне что написал
[27:48.580 --> 27:54.660]  компилятор. Конструктор для derived должен явно инициализировать base, у которого нет
[27:54.660 --> 28:00.540]  дефолтного конструктора. Вот если я не указал в конструкторе derived чем инициализировать base,
[28:00.540 --> 28:05.100]  он пытается base инициализировать по умолчанию, дефолтным конструктором, соответственно. Но
[28:05.100 --> 28:09.300]  поскольку так не работает, мне нужно в derived указать сначала чем инициализировать base,
[28:09.300 --> 28:15.500]  прежде чем derived начинать. И вот для этого опять используются списки инициализации. Как они
[28:15.500 --> 28:27.140]  используются? А вот так я пишу base от чего? Поскольку мне дефолтный конструктор base вызывать
[28:27.140 --> 28:37.420]  не получается, нужно написать от чего я создаю base, прежде чем начать издавать derived. Ну,
[28:37.420 --> 28:43.460]  такие делегирующие конструкторы у нас были с вами, когда мы вызов одного конструктора из
[28:43.460 --> 28:59.020]  другого обсуждали, но тут вызов конструктора родителя из конструктора потомка. Я могу
[28:59.020 --> 29:04.420]  дальше, после того как написал чем инициализировать base, перечислить еще чем инициализировать свои поля.
[29:04.420 --> 29:19.500]  Допустим, d инициализировать надо каким-нибудь другим числом. Я могу в конструктор сюда принять,
[29:19.500 --> 29:26.420]  например, double d и сказать, что я d инициализирую вот этим, а base нулем. Или я могу вот так сказать,
[29:26.420 --> 29:32.460]  типичная ситуация, я принимаю x, base инициализирую этим x, а свое поле вот тем,
[29:32.460 --> 29:41.100]  чем мне дали. Вот все теперь корректно работает. То есть мне, когда дают параметры моего конструктора,
[29:41.100 --> 29:47.740]  я сначала обязан, причем это обязательно, сначала нужно сконструировать base, либо оно будет по умолчанию
[29:47.740 --> 29:54.860]  сконструировано, а иначе c и передать ему аргументы туда, и оно будет там работать. Ну, соответственно,
[29:54.860 --> 29:59.500]  до того как сконструироваться, оно сконструирует свои поля и так далее, а потом через запятую
[29:59.500 --> 30:12.620]  перечислить, чем я свои поля инициализирую. А, ну да, потому что мне нужно здесь от чего-то
[30:12.620 --> 30:19.740]  вызваться. СТР само может сконструироваться по умолчанию, мне не надо писать, чем его
[30:19.740 --> 30:25.820]  приницилизировать. Да мне и d и x не обязательно было писать, я просто хотел их чем-то принцилизировать,
[30:25.820 --> 30:35.620]  а v и СТР спокойно по умолчанию нормально создадутся, пустыми просто. У v и у СТР вызовутся
[30:35.620 --> 30:40.420]  конструкторы по умолчанию, поскольку я не написал какие вызвать, вызовутся по умолчанию.
[30:40.420 --> 30:55.500]  Компилятор в любом случае сначала инициализирует СТР, потом d,
[30:55.500 --> 31:00.500]  но СТР инициализирует пустой строкой, поскольку я не написал чем, а d инициализирует тем,
[31:00.500 --> 31:07.900]  чем я написал. Значит еще раз, как работает этот пример? По шагам. Я вызываю конструктор d от
[31:07.900 --> 31:15.780]  двух чисел, попадаю сюда, компилятор видит, ага, начинаем создавать дирайв, значит первым делом надо
[31:15.780 --> 31:21.580]  создать бейс. От чего создать бейс? Вот от чего здесь написано. Идем, создаем бейс, пока ничего с
[31:21.580 --> 31:28.260]  дирайвом не делаем. Хорошо. Начинаем создавать бейс от x. Так, прежде чем создать бейс, нужно
[31:28.260 --> 31:33.340]  сначала инициализировать поля. Сначала надо инициализировать x. Чем инициализировать x? Тут
[31:33.340 --> 31:38.460]  написано чем. Вот этим. Инициализируем. Дальше надо инициализировать вектор. Чем инициализировать
[31:38.460 --> 31:43.260]  вектор? Не написано чем. Значит создаем вектор по умолчанию. Что значит создаем вектор по умолчанию?
[31:43.260 --> 31:47.460]  Вызываем вектору конструктор по умолчанию. Вектору сначала надо инициализировать поля.
[31:47.460 --> 31:52.780]  Чем их инициализировать? Ну там написано СЗ, КЭП, там вот этот указатель. Все сделали, окей.
[31:52.780 --> 31:56.940]  Конструктор вектора отработал. Закончился конструктор вектора. Отлично. Инициализируем
[31:56.940 --> 32:01.900]  поля бейс. Заходим наконец в тело конструктора бейс. Выполняем тело конструктора бейс. Все,
[32:01.900 --> 32:07.140]  создали бейс. Отлично. Возвращаемся сюда. Бейс создали. Пора инициализировать поля дирайв.
[32:07.140 --> 32:12.860]  Сначала СТР. Чем инициализировать? Не сказано. Значит по умолчанию. Значит называем конструктор
[32:12.860 --> 32:16.580]  стринг по умолчанию. Значит инициализируем сначала поля ему. Там по умолчанию этого стринга.
[32:16.580 --> 32:22.260]  Окей. Тело конструктора стринг потом. Отлично. Стринг создали. Теперь Д. Чем инициализировать Д?
[32:22.260 --> 32:26.180]  Написано чем. Вот этим. Отлично. Создали Д. Все, поля инициализировали. Вызываем
[32:26.180 --> 32:32.100]  наконец тело конструктора. Выводим два. Все, тело отработало. Дирайвт создан. Классно. Вот так
[32:32.100 --> 32:40.180]  это работает. Когда деструктор отрабатывает? Все в обратном порядке абсолютно. Вызывается область
[32:40.180 --> 32:45.980]  видимости. Дирайвт заканчивается. Вызывается деструктор дирайвт. Первым делом тело деструктора.
[32:45.980 --> 32:53.020]  Выводим минус два. Отлично. Тело деструктора отработало. Пора разрушать поля. Сначала убираем
[32:53.020 --> 32:59.740]  Д. Снимаем Д со стека. Тут нечего вызывать. Потом СТР. Значит надо вызвать деструктор СТР сначала.
[32:59.740 --> 33:05.820]  Вызываем. Отрабатывает тело деструктора СТР. Снимаем со стека поля СТР. Отлично. Разрушили
[33:05.820 --> 33:11.100]  часть дирайвт. Теперь пора разрушать бейс. Сначала отрабатывает тело деструктора бейс. Выводим минус
[33:11.100 --> 33:16.940]  один. Теперь пора разрушать поля бейс. Уничтожаем вектор. Точно так же деструктор. Потом поля. Потом
[33:16.940 --> 33:23.460]  снимаем со стека Х. Все, деструктор отработал. Закончили разрушать дирайвт. Строго в таком порядке.
[33:23.460 --> 33:38.900]  Это надо понимать как работает. Если мы напишем using конструктора бейс. То есть допустим я напишу
[33:38.900 --> 33:47.780]  здесь using base 2.2.base. Тогда я дирайвт научусь создавать от единицы просто. Как это будет работать?
[33:47.780 --> 33:55.380]  Просто дирайвт в этом случае будет по умолчанию инициализироваться. Часть дирайвт. То есть я
[33:55.380 --> 34:03.820]  задаю дирайвт D от единицы. Тут написано using base от бейс. То есть OK. Часть дирайвт сама
[34:03.820 --> 34:09.060]  инициализируется. Тело будет пустым. Вся часть которая инициализирует бейс остается как раньше.
[34:09.060 --> 34:15.740]  А часть которая инициализирует дирайвт. Давайте на всякий случай проверю. Ну да. А часть которая инициализирует
[34:15.740 --> 34:29.540]  дирайвт просто у нее пустое тело, но поля инициализируется по умолчанию. Ну что там написано то и будет в этом
[34:29.540 --> 34:55.380]  конструкторе. Тогда это конфликтующее определение. Вот такие дела. Значит вот здесь можно инициализировать
[34:55.380 --> 35:00.780]  только свои собственные поля. Я не могу здесь написать X в скобочках что. То есть вот так я не могу
[35:00.780 --> 35:08.340]  написать например. Вот вместо base X написать вот так не могу. CE. Нет у меня поля X. Я могу только
[35:08.340 --> 35:12.900]  делегировать родителю инициализировать его поля. А сам инициализировать свои. А так не могу. Это будет
[35:12.900 --> 35:18.860]  CE. Вот и последняя штука о которой я расскажу в этом пункте. Это так называемая empty base optimization.
[35:18.860 --> 35:39.460]  empty base optimization. Это вот что. В скобочках EBO. Иногда в коде STL вы можете встретить такую
[35:39.460 --> 35:49.060]  аббревиатуру EBO что-то там. Вот это означает empty base optimization. На самом деле мы с вами. Я сейчас про
[35:49.060 --> 35:58.180]  нее расскажу. Вот. А пользоваться мы ей начнем в задачах по интересе во втором семестре. Как работает
[35:58.180 --> 36:05.380]  empty base optimization. Ну что такое empty base optimization. Эта штука которая говорит следующее. Если у вас в
[36:05.380 --> 36:23.220]  родителе нет полей. То не надо ему место занимать. Ну смотрите если у вас есть пустая структура. Ну вот
[36:23.220 --> 36:35.300]  допустим. У меня есть такая структура. struct empty. Весьма между прочим полезная. Очень часто
[36:35.300 --> 36:56.700]  нужная. Я попрошу. И вот есть значит. Наследник empty. Чему равен size of от empty. Чему. Единица.
[36:56.700 --> 37:06.460]  Почему 8. Потому что любой объект хоть один байт занимать должен. Если бы у вас объект не
[37:06.460 --> 37:10.620]  занимал нисколько байт. То это бы означало что его адрес совпадает с адресом следующего за ним
[37:10.620 --> 37:19.860]  объекта лежащего на стэке. Но так нельзя. Тогда empty это. Ну объект класса empty сколько занимает.
[37:19.860 --> 37:24.540]  Когда я спрашиваю size of empty. Я спрашиваю сколько будет занимать объект класса empty. Также как
[37:24.540 --> 37:33.380]  size of empty я спрашиваю. Вот сейчас будет один. Ну значит тут много чего еще не работает. Вот это
[37:33.380 --> 37:40.700]  мы закомментируем. Вот сейчас будет один. Понимаете почему один. Да кто понимает. Все понимают
[37:40.700 --> 37:50.540]  почему один. Не ноль. Не может быть размер объекта равен нулю. Потому что так решил комитет по
[37:50.540 --> 38:01.460]  стандартизации. Да 4 было бы. Если был бы чар то был бы все равно один. Если был бы дабл то 8. Если мы
[38:01.460 --> 38:08.780]  зададим вектор empty то мы просто займем память. Если мы зададим вектор empty то у нас будет да вектор
[38:08.780 --> 38:14.540]  объектов каждый из которых размеры один. Ну шучу просто займем память. Мы ничего там не будем хранить.
[38:14.540 --> 38:33.860]  Ну да. Но тем не менее размер объектов. Это мы уже обсуждали в предыдущей главе. Я говорил что никакой
[38:33.860 --> 38:44.060]  объект не может занимать ноль байт. Потому что тогда нельзя было бы. Потому что тогда было бы
[38:44.060 --> 38:54.900]  нельзя различить два соседних объекта по их адресам. Вот поэтому хоть один байт занимать должен.
[38:54.900 --> 39:03.380]  Но вот я сейчас спрошу а чему равен размер empty derived. И как вы думаете чему он будет равен.
[39:03.380 --> 39:13.940]  А вот и нет один тоже. Но вы скажете в нем же есть часть от empty которая один байт занимает.
[39:13.940 --> 39:19.540]  А есть еще он сам который один байт занимает. Ну вот в этом то и заключается empty base optimization.
[39:19.540 --> 39:26.460]  Если у вас есть наследник родитель который в котором нет полей то разрешается этому родителю
[39:26.460 --> 39:36.540]  никакую часть не занимать в памяти вашей. Ну вот эта вот штука которая родитель от вас составляет.
[39:36.540 --> 39:53.340]  Она будет действительно пустой если вы наследник. Нет empty существует. Ну что значит empty не существует.
[39:53.340 --> 40:02.100]  Область видимости в рантайме оно просто байт не занимает. Но оно существует как сущность в
[40:02.100 --> 40:10.260]  компайл тайме к ней можно обращаться и так далее. Наличие методов никак не влияет на
[40:10.260 --> 40:21.540]  размер. Не влияет пожалуйста я могу. Поля методы они же не занимают памяти. Поля это переменные.
[40:21.540 --> 40:34.940]  Методы это функции. Чего? Фактически. Есть ли в памяти где-то лежащий объект типа empty когда мы
[40:34.940 --> 40:51.460]  создали empty diray. Видимо нет если размер не меняется. Ну нет получается нет. Ну как
[40:51.460 --> 40:56.260]  компилятор формально выполняет все что должен выполнить. Он просто вызывает его конструктор.
[40:56.260 --> 41:01.140]  Если у него будет конструктор он сделает код конструктора. Но поскольку полей нет он забьет
[41:01.140 --> 41:11.140]  и empty diray класть начнет на то же место на котором по идее адрес вот этого empty был. Ну адреса кого
[41:11.140 --> 41:15.740]  начинается подать. Это же один объект. Просто часть одного объекта. У меня же нет отдельно прям
[41:15.740 --> 41:20.820]  полноценного объекта empty. Просто это часть объекта empty diray в которой внутри. Вот смотрите
[41:20.820 --> 41:28.820]  я в empty diray объявил char. А в empty объявил f. Это ни на что не повлияет. То есть в empty diray теперь
[41:28.820 --> 41:35.500]  один действительно настоящий char. А в empty функция f. Но функции не влияют на размер объекта. Только если
[41:35.500 --> 41:43.380]  они не виртуальные. Но об этом потом. Вот все еще один. Вот если здесь будет char то это уже поменяет
[41:43.380 --> 41:52.180]  дело. Теперь будет два в empty diray. Кажется. Нет все равно один. Ха. Значит это работает в обратную
[41:52.180 --> 41:56.980]  сторону. А я думал не работает. Да но empty diray значит тоже можно не не не достраивать.
[41:56.980 --> 42:06.980]  Так понятно как работает empty base optimization. Зачем вообще может потребоваться наследоваться от
[42:06.980 --> 42:15.900]  пустого. Пустого чего. Только метод. А защищать смысл. Например. Да ну да чтобы методу наследовать.
[42:15.900 --> 42:28.380]  Ну. Я бы вам привел примеры. Ну давайте я вам просто скажу что большая часть примеров
[42:28.380 --> 42:34.500]  наследования в этом курсе будет наследованием от пустого класса. Трудно убедить вас каким-то
[42:34.500 --> 42:38.300]  конкретным примером. Но к концу года вы поймете что как правило от пустых наследоваться нам и
[42:38.300 --> 42:43.700]  предстоит. В основном потому что нам методы нужны будут и не поля. Зачем там. А что там методы то они
[42:43.700 --> 42:52.380]  вообще будут делать пустого. Что. Нет виртуальные это уже не пустой будет. Он уже будет занимать.
[42:52.380 --> 43:09.980]  Если вы сделаете цепочку больших наследник empty diray empty diray diray и так далее у них у всех
[43:09.980 --> 43:22.220]  суммарно будет размер один я думаю. Все сожмутся кроме одного. Ну да empty diray тогда
[43:22.220 --> 43:30.220]  будет нулем. Ну они и сожмется. Да я вот показал тоже все равно один занимает. То есть не важно
[43:30.220 --> 43:36.140]  какой из цепочки у нас. Ну да да он их видимо сжимает все. Я думал он только родители но и этого
[43:36.140 --> 43:47.820]  тоже сжимает. А как у нас может быть пустой класс наследника. Что. В чем проблема. А в чем я не
[43:47.820 --> 43:53.740]  понял вообще в чем проблема. То есть по сути мы сглаживаем все поля и делаем все равно один.
[43:53.740 --> 44:06.060]  Чего. Ну ладно. Не важно. А зачем. Подожди что тебя смущает. Если у нас класс наследуется какого-то
[44:06.060 --> 44:10.940]  то как минимум у нас следуют все поля своего родителя. Ну понятно в нем есть часть родителя
[44:10.940 --> 44:22.700]  которую ничего не добавляет. Ну я имею ввиду надстройка пустая. Ну мы говорим про empty
[44:22.700 --> 44:29.940]  base optimization. Вот у меня сейчас empty не пустой а empty diray пустой. И суммарно они занимают один байт.
[44:29.940 --> 44:37.180]  Хотя если бы я каждого из них создал по отдельности они бы занимали по одному байту каждый. Но поскольку
[44:37.180 --> 44:43.580]  empty diray пустая надстройка на демпте то она ничего не добавляет к нему и суммарно не занимать один
[44:43.580 --> 44:55.820]  байт все еще. В этом. История. А если у нас в немте будет сейчас поле какое-то интовое. Ну будем выделять
[44:55.820 --> 45:02.780]  внешнюю память. Если в empty будет интовое поле. В смысле лишнюю память. Конечно int я должен
[45:02.780 --> 45:08.260]  положить на адрес кратный четырем. Поэтому три байта будет пропущено. После чара. Потому что это
[45:08.260 --> 45:15.460]  должно лежать перед этим. Соответственно если я в empty diray положу int. У меня размер всего вместе станет уже восемь.
[45:15.460 --> 45:26.100]  А зачем нам. У нас пустой класс. Если в нем какие-то методы они же все де-факто статические. Что?
[45:26.100 --> 45:38.380]  У нас нет никаких полей. Нет они не статические. Примером такого класса является например локатор.
[45:38.380 --> 45:46.500]  Вот у него вообще не статические методы. Нифига. Ты берешь объект локатора и ему говоришь выдели память.
[45:46.500 --> 46:00.260]  Они же ничего не меняют внутри самого объекта. Они не относятся никому объекту. Относятся. Ну по
[46:00.260 --> 46:08.260]  смыслу относятся. У тебя данных никаких не хранится. У тебя stateless объект. Но это не значит что нужно его
[46:08.260 --> 46:15.020]  функции делать внешними функциями. Ты все еще считаешь что этот объект что-то умеет. И ты у него просишь это сделать.
[46:15.020 --> 46:24.700]  Давай просто мы дойдем до ситуации когда мы с этим столкнемся и ты увидишь что оно так действительно
[46:24.700 --> 46:32.060]  работает. Просто сейчас мне трудно это на абстрактных абстрактно объяснить. Ты увидишь это на конкретных
[46:32.060 --> 46:39.660]  примерах через несколько лекций. Что у нас в таких ситуациях будет очень много. Все вот теперь я
[46:39.660 --> 46:45.540]  перехожу на доску и наверное буду на ней оставаться до конца сегодняшнего вечера.
[47:09.660 --> 47:36.420]  Сайзов объекта. Паля выравниваются.
[47:36.420 --> 47:46.260]  Объект кладется так чтобы int лежал на адресе кратным 4. Дабл лежал на адресе кратном 8. Чтобы все поля размера 4
[47:46.260 --> 47:53.380]  лежали на адресе кратном 4 и так далее. По фундаментальным типам выравнивания происходит а не по большим типам.
[47:53.380 --> 48:01.220]  Вектор должен класситься на адрес кратный 8. Потому что в нем поля это указатель и указатель и указатель и два сайса.
[48:01.220 --> 48:11.620]  Указатель должен начинаться с адреса кратного 8. Когда был викинин, то у нас это заняло только 12 байтов.
[48:11.620 --> 48:21.260]  Нет 16. Потому что дополнится до 4 чтобы следующий объект такого типа лежал на правильном адресе.
[48:21.860 --> 48:35.020]  Мы это разбирали уже. Так вот сейчас будут интересные веселые картиночки. Мы начинаем замечательное приключение в мир приведений типов принаследования.
[48:35.020 --> 48:46.060]  Сейчас будем графы рисовать. Сейчас пока еще не так весело будет, но вот через полчасика совсем весело.
[48:46.060 --> 48:55.340]  Значит Type Conversion в случае наследования.
[48:55.340 --> 49:05.580]  Вот смотрите.
[49:05.580 --> 49:16.380]  Может кстати я и рано на доску перешел. Ну ладно. В следующем пункте точно надо будет рисовать, там иначе никак.
[49:16.380 --> 49:24.140]  Вот смотрите у меня есть Base и Derive. Но я не буду писать снова что там структура. Вот у меня есть Base и Derive.
[49:24.140 --> 49:32.380]  В чем вообще смысл наследования? Я могу использовать Derive там где ожидается Base.
[49:32.380 --> 49:41.980]  Ну то есть Derive частный случай Base. Derive это тоже Base. Если меня ожидает Base, то я могу Derive отдать.
[49:41.980 --> 49:50.140]  Допустим у меня есть функция которая принимает Base по ссылке.
[49:50.140 --> 50:01.740]  Вот. Ну не буду имя ему давать никакого. Вот. Могу ли я в эту функцию отдать Derive?
[50:01.740 --> 50:09.580]  Конечно могу. В этом смысл наследования. Но совершенно верно. Только если наследование публичное.
[50:10.460 --> 50:23.660]  Значит тут первое что я могу сделать. Если у меня есть Derive D. Я могу функцию которая ожидает Base отдать D по ссылке.
[50:23.660 --> 50:35.180]  И функция будет работать с ним как будто это Base. Ведь все что есть у Derive есть и у Base. Все что есть у Base есть и у Derive.
[50:35.180 --> 50:46.940]  Значит если мне отдали Derive, то мне он полностью подходит. Ну соответственно если я здесь из этой функции буду вызывать какие-то его методы, то будут вызываться те их версии которые от Base, а не от Derive.
[50:46.940 --> 50:56.940]  Понятно. Потому что я его как Base принял и компилятор статически его, значит все методы и поля будут из Base брать. Вот.
[50:56.940 --> 51:07.500]  За сколько он проведет конверсию? Что значит за сколько? Он может сказать что использует только поля Base. Ну. Ничего не понял. Что он должен сказать?
[51:07.500 --> 51:17.020]  Мы ему передали Derive. Да. Вот. Он сделает полную копию или он... Нет он ссылку уже принял. Да.
[51:17.020 --> 51:29.180]  Получается он не будет делать полную копию. Никакую копию он не будет делать. Он ссылку принял. Он смотрит на Base. Это же ссылка. Мы смотрим на этот объект как будто это Base.
[51:29.180 --> 51:46.060]  И все что мы от него вызываем берется из Base его части. Никакой копии не делается. Если у вас константная ссылка на Base, то то же самое, но при этом мы сможем вызывать только константные методы из части Base.
[51:46.300 --> 51:54.700]  Ну то есть полная аналогия с тем как вы передаете константный и не константный. На самом деле это важная, это очень правильная аналогия.
[51:54.700 --> 52:09.100]  У вас бывает допустим Int и вы передаете его по ссылке как константом персант. Вот. И то же самое вы можете Derive передать по ссылке как Base.
[52:10.060 --> 52:22.540]  Свободно. Не явно. И это будет означать, что из этой функции вы можете, вот это бы означало, что вы можете только те операции над Int делать, которые константные относительно, которые помечены конст.
[52:22.540 --> 52:37.100]  А если вы приняли по ссылке на Base объект Derive, то это означает, что вы можете только те его методы вызывать поля, которые у него от Base взяты. Ну которые из части Base его.
[52:37.500 --> 52:46.700]  А если вы еще и конст дописали, то это значит, что вы только те из них можете вызвать, которые из Base да еще и конст помечены. Все логично, все понятно.
[52:47.980 --> 53:05.660]  Вот. То же самое с указателем. Если я принимаю Base по указателю, а сюда даю адрес Derive, то тоже работает все прекрасно. Я могу указать под указатель на Base под ссылку Derive.
[53:07.100 --> 53:15.260]  И по этому указателю я смогу вызывать, опять же, все поля и методы этого объекта, которые из Base взяты. Из Derive не смогу, а из Base смогу.
[53:17.260 --> 53:31.740]  Вот. То же самое, если я конст Base звездочку приму. Опять же, я смогу по этому указателю вызывать все те методы и поля, которые взяты из Base и при этом еще и конст помечены.
[53:32.380 --> 53:43.660]  Вот. Хорошо. А что если я по значению принимаю, как работает этот газ? Это вообще будет работать?
[53:43.660 --> 53:48.780]  Ну, нам тогда нужен какой-то конструктор от Derive просто.
[53:48.780 --> 53:49.980]  Ну, он автоматический.
[53:50.220 --> 54:00.060]  Вот. Другими словами, могу ли я написать, ну, то есть предыдущие три случая, по сути, говорили, что я могу написать Base&B равно Derived.
[54:00.060 --> 54:10.860]  Ну, Base&B равно D. Вот это неявный каст от наследника к родителю, который разрешен. То есть по ссылке на родителей я могу подсунуть наследника. Это окей.
[54:11.740 --> 54:18.940]  Если наследование публичное, только я напоминаю, если приватное или защищенное, то это не работает. Это первый момент.
[54:18.940 --> 54:28.940]  Да. Вот если у вас наследование приватное или защищенное, а вы находитесь не в методе соответствующем какого-то класса, то это будет CE.
[54:28.940 --> 54:36.940]  Потому что приватное наследование в том числе означает, что вы из внешних функций не можете делать каст к родителю от себя.
[54:37.020 --> 54:45.020]  Допустим, функция Main не может использовать тот факт, что вы, в частном случае, Base. Поэтому при приватном наследовании вот такая конструкция будет CE.
[54:47.020 --> 54:54.020]  Только если вы при этом сами находитесь не в методе Base, в котором создали зачем-то лишний объект Derived, и в нем вот так сделали.
[54:54.020 --> 55:00.020]  Если вы это все напишете в методе самого Base, при приватном наследовании Derived от Base, то это, конечно, сработает.
[55:00.100 --> 55:04.100]  Потому что из методов Base можно пользоваться тем фактом, что это наследование.
[55:04.100 --> 55:10.100]  А из внешних функций, которые не друзья, нельзя так писать. Из друзей можно быть.
[55:10.100 --> 55:12.100]  При защищенном наследовании тоже сработает.
[55:12.100 --> 55:20.100]  При защищенном наследовании это сработает только если вы в методе либо самого Base, либо Derived, либо наследника Derived, либо друга.
[55:20.100 --> 55:26.100]  Защищенное наследование значит, что вам можно этим пользоваться из всего того, что я перечислил, но не из внешних функций.
[55:26.180 --> 55:38.180]  Сейчас если я напишу дальше B равно какому-то другому Base, то у меня Derived поменяется только часть, которая Base.
[55:38.180 --> 55:40.180]  Ну вот в D у меня...
[55:40.180 --> 55:42.180]  Да, это отличный вопрос.
[55:42.180 --> 55:44.180]  О, кстати, прекрасный вопрос.
[55:44.180 --> 55:52.180]  Если вы замените здесь Base на что-то другое, то есть если у вас в Base есть оператор присваивания,
[55:52.260 --> 56:04.260]  от какого-то другого Base, а при этом вы работаете со ссылкой на Derived, ну да, у вас часть Base поменяется.
[56:06.260 --> 56:10.260]  Вот та надстройка Derived останется, а Base поменяется.
[56:10.260 --> 56:18.260]  И соответственно, если эта надстройка Derived как-то странным образом использует то, что было Base, понятно, может произойти страшное.
[56:18.340 --> 56:22.340]  Ну то есть если она использует какие-нибудь указатели на то, что там было,
[56:24.340 --> 56:28.340]  то после оператора присваивания произойдет какая-то неприятная...
[56:28.340 --> 56:30.340]  Ну да, вроде как да.
[56:30.340 --> 56:32.340]  Ну в такой случае это какая-то изотина.
[56:32.340 --> 56:34.340]  Ну это странные экискейты, понятно, но...
[56:36.340 --> 56:38.340]  Кстати, проверьте, что это так работает, что я насаневался.
[56:38.340 --> 56:42.340]  Ну по идее нужно так работать, чтобы вы присваиваете и меняется часть Base.
[56:42.340 --> 56:46.340]  Вот, ну, с указателем то же самое, то же самое с Const.
[56:46.420 --> 56:50.420]  Вот, понятно, ну, Константность независимо значит работает.
[56:50.420 --> 56:52.420]  Все правила с Константностью сохраняются.
[56:52.420 --> 56:56.420]  Ну вот, что если я здесь имперсант не поставил, я писал Base B вновь.
[56:56.420 --> 56:58.420]  Что тогда будет?
[57:00.420 --> 57:06.420]  Тогда будет так называемая срезка при копировании, по-английски называется slicing.
[57:06.420 --> 57:10.420]  Вот то, что здесь написано, называется slicing.
[57:10.420 --> 57:12.420]  Эффект срезки.
[57:12.500 --> 57:18.500]  А произойдет копирование части Derive, которая является Base.
[57:18.500 --> 57:22.500]  Причем неважно у вас там был конструктор явно и нет.
[57:22.500 --> 57:26.500]  То есть вызовется конструктор копирования Base от Base.
[57:26.500 --> 57:30.500]  Вот от той Base, которая была в Derive.
[57:30.500 --> 57:34.500]  Вот там были какие-то поля, вот они и будут копироваться.
[57:34.500 --> 57:36.500]  Ну если у вас для Base определен отдельно,
[57:36.500 --> 57:40.500]  вы сами определили конструктор копирования для Base, то он вызовется.
[57:40.580 --> 57:46.580]  То есть из Derive будет забрана часть Base изкопирована в этот новый Base.
[57:46.580 --> 57:48.580]  А часть Derive останется как бы нетронутой.
[57:48.580 --> 57:52.580]  Просто у вас создастся копия куска, ну то есть грубо говоря,
[57:52.580 --> 57:54.580]  на картинке это вот так.
[57:54.580 --> 57:56.580]  То есть у вас есть Base и есть настройка Derive.
[57:56.580 --> 57:58.580]  И вы вот так вот взяли и скопировали Base.
[57:58.580 --> 58:00.580]  Типа срезали, а вот эту часть не тронули.
[58:00.580 --> 58:02.580]  Но это если мы ничего дополнительнее не делаем.
[58:02.580 --> 58:06.580]  Если мы Base сделали конструктор от Derive, то он...
[58:06.580 --> 58:08.580]  Да, если вы Base сделали явно конструктор от Derive,
[58:08.660 --> 58:10.660]  что странно.
[58:10.660 --> 58:14.660]  Там вам нельзя конструктор выше, он более низкий.
[58:14.660 --> 58:16.660]  Нет, вы можете его...
[58:16.660 --> 58:18.660]  Сейчас я только думаю, получится ли у вас это вообще написать.
[58:18.660 --> 58:20.660]  Потому что вам для этого придется...
[58:22.660 --> 58:26.660]  Вам придется Forward Declaration Derive сделать.
[58:26.660 --> 58:28.660]  Ну, почему нет?
[58:28.660 --> 58:32.660]  То есть вам придется написать класс Derive, потом класс Base и определение этого класса.
[58:32.660 --> 58:36.660]  А потом... А как вы будете поля Derive использовать?
[58:36.740 --> 58:38.740]  То есть вам, чтобы написать определение Derive,
[58:38.740 --> 58:42.740]  нужно... Ну, чтобы вам использовать в конструкторе поля Derive...
[58:42.740 --> 58:44.740]  А, ну хотя...
[58:44.740 --> 58:50.740]  Вы можете сделать Forward Declaration метода, потом сделать определение Derive со всеми ветами,
[58:50.740 --> 58:52.740]  а потом уже Definition самого метода.
[58:52.740 --> 58:54.740]  Кажется, тогда получится.
[58:54.740 --> 58:56.740]  Ну, типа.
[58:56.740 --> 58:58.740]  Ну да, тогда, кажется, будет работать.
[58:58.740 --> 59:00.740]  То есть вы можете...
[59:00.740 --> 59:04.740]  Ну, не понятно зачем, Дан, то есть если вы определите свой конструктор Base от Derive, то да, он вызывается.
[59:04.820 --> 59:06.820]  Это странный, конечно, сценарий.
[59:06.820 --> 59:08.820]  Вот.
[59:08.820 --> 59:12.820]  И опять же, если наследование приватное или защищенное, то это тоже не будет работать.
[59:12.820 --> 59:18.820]  Ну, только если вы не в члене или в друге, или где там полагается быть, чтобы это работало.
[59:22.820 --> 59:24.820]  Ладно.
[59:24.820 --> 59:28.820]  А теперь, вот что.
[59:28.820 --> 59:30.820]  А как по обратную сторону?
[59:30.900 --> 59:34.900]  Вот, если у меня есть Base,
[59:34.900 --> 59:38.900]  а я хочу из него сделать Derive.
[59:38.900 --> 59:42.900]  Ну вот, у меня есть ссылка на Base,
[59:42.900 --> 59:48.900]  а я хочу опять сказать, что это Derive, на самом деле.
[59:48.900 --> 59:50.900]  Ну вот.
[59:50.900 --> 59:52.900]  Вот, ваша любимая.
[59:52.900 --> 59:56.900]  Как и с Const, я хочу, по какой-то причине, зная, что это на самом деле Derive,
[59:56.900 --> 59:58.900]  считать его Derive, да мы не боимся.
[59:58.980 --> 01:00:00.980]  Как я могу ли это сделать?
[01:00:00.980 --> 01:00:04.980]  Ну, если он изначально был Derive, то почему бы и нет?
[01:00:04.980 --> 01:00:08.980]  Да, но как это написать? Вот так это, конечно же, не скомпилируется.
[01:00:08.980 --> 01:00:10.980]  Вот.
[01:00:10.980 --> 01:00:12.980]  А какой каст?
[01:00:12.980 --> 01:00:16.980]  Не, не скомпилируется.
[01:00:16.980 --> 01:00:18.980]  Сас, ссылка.
[01:00:18.980 --> 01:00:22.980]  Значит, какой каст мне надо использовать?
[01:00:23.060 --> 01:00:27.060]  Если я хочу под Base,
[01:00:27.060 --> 01:00:29.060]  иметь ссылку на Base,
[01:00:29.060 --> 01:00:31.060]  считать ее ссылкой на Derive.
[01:00:33.060 --> 01:00:35.060]  Да все проще, StaticCast работает просто.
[01:00:39.060 --> 01:00:41.060]  Значит, на самом деле сработает обычный StaticCast.
[01:00:41.060 --> 01:00:43.060]  Никакой его DynamiteCast,
[01:00:43.060 --> 01:00:45.060]  и ReiterBedCast пока не нужно.
[01:00:45.060 --> 01:00:49.060]  То есть, я пишу Derive and Impressant равно StaticCast
[01:00:49.060 --> 01:00:51.060]  к Derive and Impressant
[01:00:51.140 --> 01:00:53.140]  Вот. Заметьте, кстати, к ссылке.
[01:00:53.140 --> 01:00:55.140]  То есть, я пишу Derive and Impressant.
[01:00:57.140 --> 01:01:01.140]  D D равно StaticCast к Derive and Impressant.
[01:01:05.140 --> 01:01:07.140]  Вот.
[01:01:07.140 --> 01:01:09.140]  B и нормально работает.
[01:01:13.140 --> 01:01:15.140]  Вот.
[01:01:15.140 --> 01:01:17.140]  Правда вопрос.
[01:01:17.140 --> 01:01:19.140]  А что, если на самом деле там был не Derive,
[01:01:19.220 --> 01:01:21.220]  а Base настоящий?
[01:01:23.220 --> 01:01:25.220]  Ну, тогда убы.
[01:01:27.220 --> 01:01:29.220]  Ну, то есть, после этого
[01:01:29.220 --> 01:01:31.220]  я могу обращаться к D D,
[01:01:31.220 --> 01:01:33.220]  как будто это настоящий Derive.
[01:01:33.220 --> 01:01:35.220]  Вот. Вызывать у него какие-нибудь методы специфичные для Derive.
[01:01:35.220 --> 01:01:37.220]  Поля вызывать.
[01:01:37.220 --> 01:01:39.220]  Ну, как будто это настоящий Derive.
[01:01:39.220 --> 01:01:41.220]  Но, дело в том, что
[01:01:41.220 --> 01:01:43.220]  компилятор будет просто
[01:01:43.220 --> 01:01:45.220]  соответствующие сдвиги делать.
[01:01:45.220 --> 01:01:47.220]  У меня было в Derive, например, поле
[01:01:47.300 --> 01:01:49.300]  Допустим, в Base был Int,
[01:01:49.300 --> 01:01:51.300]  а в Derive был еще поверх него
[01:01:51.300 --> 01:01:53.300]  какой-нибудь другой Int, я не знаю.
[01:01:53.300 --> 01:01:55.300]  И я, по сути,
[01:01:55.300 --> 01:01:57.300]  ну, то есть, по сути,
[01:01:57.300 --> 01:01:59.300]  когда я написал так,
[01:01:59.300 --> 01:02:01.300]  я просто считаю, что вот у меня ссылка
[01:02:01.300 --> 01:02:03.300]  на эту часть Derive.
[01:02:03.300 --> 01:02:05.300]  А когда у меня был Base,
[01:02:05.300 --> 01:02:07.300]  я как бы считаю, что на самом деле ссылка
[01:02:07.300 --> 01:02:09.300]  теперь, вот этот кусок памяти,
[01:02:09.300 --> 01:02:11.300]  вот он раздулся. То есть, я смотрю на него
[01:02:11.300 --> 01:02:13.300]  как будто это Derive, и вот эта часть памяти
[01:02:13.300 --> 01:02:15.300]  тоже считаю своей теперь,
[01:02:15.380 --> 01:02:17.380]  и там реально был Derive.
[01:02:17.380 --> 01:02:19.380]  Мне повезло, я действительно буду
[01:02:19.380 --> 01:02:21.380]  к нему обращаться,
[01:02:21.380 --> 01:02:23.380]  к его полям методом. А если нет, то
[01:02:23.380 --> 01:02:25.380]  обращение к ним будет убыло.
[01:02:25.380 --> 01:02:27.380]  Ну, как при касте
[01:02:27.380 --> 01:02:29.380]  от константа
[01:02:29.380 --> 01:02:31.380]  к неконстанте.
[01:02:31.380 --> 01:02:33.380]  Вот эта схема,
[01:02:33.380 --> 01:02:35.380]  которая нарисовалась константностью,
[01:02:35.380 --> 01:02:37.380]  она очень
[01:02:37.380 --> 01:02:39.380]  похожа аналогия. То есть,
[01:02:39.380 --> 01:02:41.380]  у вас есть
[01:02:41.380 --> 01:02:43.380]  вы можете
[01:02:43.380 --> 01:02:45.380]  свободно кастовать
[01:02:45.380 --> 01:02:47.380]  в эту сторону.
[01:02:47.380 --> 01:02:49.380]  То есть, вы можете обычный int,
[01:02:49.380 --> 01:02:51.380]  как и конст-инт,
[01:02:53.380 --> 01:02:55.380]  отдать по константной ссылке
[01:02:55.380 --> 01:02:57.380]  свободно куда-то, без кастов
[01:02:57.380 --> 01:02:59.380]  явных.
[01:02:59.380 --> 01:03:01.380]  Только я наоборот
[01:03:01.380 --> 01:03:03.380]  сделал, надо здесь написать.
[01:03:03.380 --> 01:03:05.380]  Надо не так сделать.
[01:03:05.380 --> 01:03:07.380]  Короче, вы можете
[01:03:07.380 --> 01:03:09.380]  по константной ссылке, обычный
[01:03:09.380 --> 01:03:11.380]  int
[01:03:11.380 --> 01:03:13.380]  вы можете отдать
[01:03:13.380 --> 01:03:15.380]  как по такой ссылке,
[01:03:15.380 --> 01:03:17.380]  так и по такой ссылке,
[01:03:17.380 --> 01:03:19.380]  константный только
[01:03:19.380 --> 01:03:21.380]  по константной ссылке.
[01:03:21.380 --> 01:03:23.380]  А если вы хотите константный int
[01:03:23.380 --> 01:03:25.380]  отдать по неконстантной ссылке,
[01:03:25.380 --> 01:03:27.380]  то вам нужен const-cast.
[01:03:27.380 --> 01:03:29.380]  Вот такая схема у нас была с вами.
[01:03:29.380 --> 01:03:31.380]  Вот тут вот const-cast.
[01:03:31.380 --> 01:03:33.380]  То есть, это такая вот
[01:03:33.380 --> 01:03:35.380]  опасная операция.
[01:03:35.380 --> 01:03:37.380]  Вы можете это сделать, но если вы
[01:03:37.380 --> 01:03:39.380]  не отгадали и вам не повезло, будет убыло.
[01:03:39.380 --> 01:03:41.380]  И абсолютно аналогичная схема
[01:03:41.380 --> 01:03:43.380]  с наследованием.
[01:03:43.380 --> 01:03:45.380]  Вы можете
[01:03:45.380 --> 01:03:47.380]  как base
[01:03:47.380 --> 01:03:49.380]  вы можете
[01:03:49.380 --> 01:03:51.380]  derived
[01:03:55.380 --> 01:03:57.380]  вы можете derived
[01:03:59.380 --> 01:04:01.380]  отдать как по ссылке на derived,
[01:04:01.380 --> 01:04:03.380]  так и по ссылке на base.
[01:04:03.380 --> 01:04:05.380]  А вот base, чтобы отдать по ссылке
[01:04:05.380 --> 01:04:07.380]  на derived, вам нужно
[01:04:07.380 --> 01:04:09.380]  статик-cast, и вот он опасный.
[01:04:09.380 --> 01:04:11.380]  Если вам не повезло, будет убыло.
[01:04:13.380 --> 01:04:15.380]  Вот это будет убыло.
[01:04:19.380 --> 01:04:21.380]  Вот, но cast этот
[01:04:21.380 --> 01:04:23.380]  статический.
[01:04:23.380 --> 01:04:25.380]  А почему он статический? Что значит слово
[01:04:25.380 --> 01:04:27.380]  static?
[01:04:27.380 --> 01:04:29.380]  Что в compile-time понятно?
[01:04:29.380 --> 01:04:31.380]  Что в compile-time понятно? Он успешный или нет?
[01:04:31.380 --> 01:04:33.380]  То есть, статик-cast не генерирует
[01:04:33.380 --> 01:04:35.380]  никаких процессорных инструкций, как мы уже
[01:04:35.380 --> 01:04:37.380]  говорили, за исключением одного случая,
[01:04:37.380 --> 01:04:39.380]  который скоро будет.
[01:04:39.380 --> 01:04:41.380]  Но он не генерирует
[01:04:41.380 --> 01:04:43.380]  процессорных инструкций в том смысле, что
[01:04:43.380 --> 01:04:45.380]  компилятор просто говорит, окей,
[01:04:45.380 --> 01:04:47.380]  теперь я считаю, этот тип derived.
[01:04:47.380 --> 01:04:49.380]  И отношусь к нему так, генерирую инструкции
[01:04:49.380 --> 01:04:51.380]  и ассамбленные в соответствии с тем, как будто
[01:04:51.380 --> 01:04:53.380]  поля у него и все derived присутствуют.
[01:04:53.380 --> 01:04:55.380]  То есть, никакой runtime-проверки
[01:04:55.380 --> 01:04:57.380]  корректно это cast или нет, не
[01:04:57.380 --> 01:04:59.380]  происходит.
[01:04:59.380 --> 01:05:01.380]  Тем не менее, кое-какие
[01:05:01.380 --> 01:05:03.380]  проверки все-таки происходят
[01:05:03.380 --> 01:05:05.380]  в статик-cast. Например, какие
[01:05:05.380 --> 01:05:07.380]  преднаследования?
[01:05:07.380 --> 01:05:09.380]  Например, приватность.
[01:05:09.380 --> 01:05:11.380]  Вот если у вас наследование
[01:05:11.380 --> 01:05:13.380]  приватное, то статик-cast вам все равно выдаст
[01:05:13.380 --> 01:05:15.380]  цель. Он скажет, вам запрещено
[01:05:15.380 --> 01:05:17.380]  кастовать base-derived, потому что
[01:05:17.380 --> 01:05:19.380]  это же приватное наследование.
[01:05:19.380 --> 01:05:21.380]  То есть, статик-cast
[01:05:21.380 --> 01:05:23.380]  не проверяет, действительно ли
[01:05:23.380 --> 01:05:25.380]  является base-derived, но он и не может
[01:05:25.380 --> 01:05:27.380]  это проверить никак в compile-time.
[01:05:27.380 --> 01:05:29.380]  Но вот проверить, что наследование
[01:05:29.380 --> 01:05:31.380]  приватное и что вообще, то есть, что они
[01:05:31.380 --> 01:05:33.380]  действительно являются один наследником другого.
[01:05:33.380 --> 01:05:35.380]  Например, если у вас есть какая-то иерархия в бок,
[01:05:35.380 --> 01:05:37.380]  то есть там сложный граф наследования
[01:05:37.380 --> 01:05:39.380]  и вы куда-то вот отсюда-сюда пытаетесь.
[01:05:39.380 --> 01:05:41.380]  Статик-cast вам не скажет.
[01:05:41.380 --> 01:05:43.380]  То есть, если у вас прямая только цепочка
[01:05:43.380 --> 01:05:45.380]  от родителей к наследникам
[01:05:45.380 --> 01:05:47.380]  и это все паблик по всей
[01:05:47.380 --> 01:05:49.380]  цепочке, то статик-cast вам
[01:05:49.380 --> 01:05:51.380]  скастует. А если там где-то по дороге
[01:05:51.380 --> 01:05:53.380]  было private или protected, а вы не в друге
[01:05:53.380 --> 01:05:55.380]  и не в члене и, короче, не там,
[01:05:55.380 --> 01:05:57.380]  где полагается, то это
[01:05:57.380 --> 01:05:59.380]  будет CE со словами нарушения прав
[01:05:59.380 --> 01:06:01.380]  доступа, не скастует вам.
[01:06:01.380 --> 01:06:03.380]  Так.
[01:06:03.380 --> 01:06:05.380]  Окей, да?
[01:06:05.380 --> 01:06:07.380]  Но есть еще reinterpret-cast.
[01:06:07.380 --> 01:06:09.380]  Но reinterpret-cast, конечно же,
[01:06:09.380 --> 01:06:11.380]  работает как обычно, он не смотрит
[01:06:11.380 --> 01:06:13.380]  не проверять ничего.
[01:06:13.380 --> 01:06:15.380]  Просто скастует вам в любом случае
[01:06:15.380 --> 01:06:17.380]  что угодно, чему угодно.
[01:06:17.380 --> 01:06:19.380]  Ну, то есть, даже если у вас
[01:06:19.380 --> 01:06:21.380]  наследование приватное,
[01:06:21.380 --> 01:06:23.380]  то вы можете reinterpret-cast-ом скастовать
[01:06:25.380 --> 01:06:27.380]  значит, ссылки
[01:06:27.380 --> 01:06:29.380]  да вообще на что угодно, не важно
[01:06:29.380 --> 01:06:31.380]  приватное наследование, хоть вообще
[01:06:31.380 --> 01:06:33.380]  нет наследования, reinterpret-cast-ом
[01:06:33.380 --> 01:06:35.380]  можете скастовать. Но если на не отгадаете
[01:06:35.380 --> 01:06:37.380]  там на самом деле был нет, то это же, конечно же,
[01:06:37.380 --> 01:06:39.380]  убер.
[01:06:39.380 --> 01:06:41.380]  Кстати, заметьте, что статик-cast здесь
[01:06:41.380 --> 01:06:43.380]  к ссылке. Обычно мы статик-cast писали не
[01:06:43.380 --> 01:06:45.380]  к ссылке, а к полноценному объекту
[01:06:45.380 --> 01:06:47.380]  типу. А здесь я пишу статик-cast
[01:06:47.380 --> 01:06:49.380]  к ссылке, как же так?
[01:06:49.380 --> 01:06:51.380]  Но вот для наследования статик-cast к ссылкам
[01:06:51.380 --> 01:06:53.380]  работает, к указателям тоже.
[01:06:53.380 --> 01:06:55.380]  Вот. reinterpret-cast всегда
[01:06:55.380 --> 01:06:57.380]  к ссылке в указатель. reinterpret-cast новых объектов
[01:06:57.380 --> 01:06:59.380]  создавать не умеет, как мы уже говорили.
[01:06:59.380 --> 01:07:01.380]  Но, если у меня определен конструктор
[01:07:01.380 --> 01:07:03.380]  derived от base был друг,
[01:07:03.380 --> 01:07:05.380]  то статик-cast и без ссылки
[01:07:05.380 --> 01:07:07.380]  сработает. Вот так без ссылки... В обычной
[01:07:07.380 --> 01:07:09.380]  ситуации статик-cast без ссылки не сработает,
[01:07:09.380 --> 01:07:11.380]  потому что нужно начать создание, пожалуйста,
[01:07:11.380 --> 01:07:13.380]  новый derived из base. А как его создать? Обе их знают.
[01:07:13.380 --> 01:07:15.380]  Но если у derived определен
[01:07:15.380 --> 01:07:17.380]  конструктор от base,
[01:07:17.380 --> 01:07:19.380]  то статик-cast поймет, как создать derived от base
[01:07:19.380 --> 01:07:21.380]  новый и создаст. И это будет тогда
[01:07:21.380 --> 01:07:23.380]  правильно работать.
[01:07:23.380 --> 01:07:25.380]  Сейчас, а у нас есть какой-нибудь способ нормально
[01:07:25.380 --> 01:07:27.380]  в runtime проверять
[01:07:27.380 --> 01:07:29.380]  является или вот конкретная
[01:07:29.380 --> 01:07:31.380]  эта ссылка?
[01:07:31.380 --> 01:07:33.380]  Пока нет, но скоро будет.
[01:07:35.380 --> 01:07:37.380]  Пока нет.
[01:07:39.380 --> 01:07:41.380]  Способ называется виртуальность.
[01:07:45.380 --> 01:07:47.380]  Так.
[01:07:47.380 --> 01:07:49.380]  Ну, слушайте, давайте, наверное...
[01:07:53.380 --> 01:07:55.380]  Ну,
[01:07:55.380 --> 01:07:57.380]  по приведению указать приведение
[01:07:57.380 --> 01:07:59.380]  из ссылок я сказал, значит,
[01:07:59.380 --> 01:08:01.380]  особенности приведения вверх и вниз,
[01:08:01.380 --> 01:08:03.380]  значит, аналогия с конст, не конст,
[01:08:03.380 --> 01:08:05.380]  значит, интерпрет-cast и статик-cast,
[01:08:05.380 --> 01:08:07.380]  приватность членов наследования
[01:08:07.380 --> 01:08:09.380]  и вот еще что.
[01:08:09.380 --> 01:08:11.380]  В этом пункте
[01:08:11.380 --> 01:08:13.380]  давайте я скажу вот щепку вещь.
[01:08:13.380 --> 01:08:15.380]  Вот вы знаете,
[01:08:15.380 --> 01:08:17.380]  есть такая аббревиатура
[01:08:17.380 --> 01:08:19.380]  solit,
[01:08:19.380 --> 01:08:21.380]  то есть
[01:08:21.380 --> 01:08:23.380]  solit.
[01:08:23.380 --> 01:08:25.380]  Кто слышал?
[01:08:25.380 --> 01:08:27.380]  Значит, а кто помнит,
[01:08:27.380 --> 01:08:29.380]  хорошо пробоваться.
[01:08:29.380 --> 01:08:31.380]  Так, s это single responsibility.
[01:08:31.380 --> 01:08:33.380]  Да.
[01:08:35.380 --> 01:08:37.380]  Single responsibility,
[01:08:37.380 --> 01:08:39.380]  open plus principle.
[01:08:39.380 --> 01:08:41.380]  Да.
[01:08:41.380 --> 01:08:43.380]  L это
[01:08:43.380 --> 01:08:45.380]  leskov principle.
[01:08:51.380 --> 01:08:53.380]  Блин, я сам забыл,
[01:08:53.380 --> 01:08:55.380]  что последние две буквы значим.
[01:08:55.380 --> 01:08:57.380]  Там что-то из одного.
[01:08:57.380 --> 01:08:59.380]  Dependency injection,
[01:08:59.380 --> 01:09:01.380]  по-моему.
[01:09:01.380 --> 01:09:03.380]  А, это я забыл, что.
[01:09:03.380 --> 01:09:05.380]  Interface segregation, точно.
[01:09:05.380 --> 01:09:07.380]  Не важно, заберите, что это такое,
[01:09:07.380 --> 01:09:09.380]  вам потом расскажут.
[01:09:09.380 --> 01:09:11.380]  Я сейчас про это поговорю.
[01:09:11.380 --> 01:09:13.380]  А что такое принцип подстановки лесков?
[01:09:13.380 --> 01:09:15.380]  Значит,
[01:09:15.380 --> 01:09:17.380]  вот есть такой принцип,
[01:09:17.380 --> 01:09:19.380]  ну, вот, типа, это
[01:09:19.380 --> 01:09:21.380]  хорошая аббревиатура,
[01:09:21.380 --> 01:09:23.380]  обозначающая пять хороших
[01:09:25.380 --> 01:09:27.380]  вещей, которые
[01:09:27.380 --> 01:09:29.380]  следует соблюдать при объектно-оритированном
[01:09:29.380 --> 01:09:31.380]  проектировании. И вот одна из них,
[01:09:31.380 --> 01:09:33.380]  это лесков substitution principle.
[01:09:33.380 --> 01:09:35.380]  Что говорит этот принцип?
[01:09:39.380 --> 01:09:41.380]  Во всех контекстах,
[01:09:41.380 --> 01:09:43.380]  где можно использовать
[01:09:43.380 --> 01:09:45.380]  собственно базовую классу.
[01:09:45.380 --> 01:09:47.380]  Ну да, то есть, по сути,
[01:09:47.380 --> 01:09:49.380]  он говорит примерно следующее, что
[01:09:49.380 --> 01:09:51.380]  должна быть подстановка работать
[01:09:51.380 --> 01:09:53.380]  корректно, что всегда, когда вы
[01:09:53.380 --> 01:09:55.380]  используете,
[01:09:55.380 --> 01:09:57.380]  если где-то ожидается базовый класс,
[01:09:57.380 --> 01:09:59.380]  то всегда туда можно отдать производные от него,
[01:09:59.380 --> 01:10:01.380]  и ничего не сломается, его никогда не порушится.
[01:10:01.380 --> 01:10:03.380]  Вот. И в связи с этим,
[01:10:03.380 --> 01:10:05.380]  тут я хочу сказать,
[01:10:05.380 --> 01:10:07.380]  рассказать об одной истории,
[01:10:07.380 --> 01:10:09.380]  которая называется, проблема,
[01:10:09.380 --> 01:10:11.380]  по-английски она называется circle ellipse problem.
[01:10:13.380 --> 01:10:15.380]  Проблема круга и эллипса.
[01:10:15.380 --> 01:10:17.380]  А по-русски, можно сказать,
[01:10:17.380 --> 01:10:19.380]  проблема квадрата и прямоугольника.
[01:10:19.380 --> 01:10:21.380]  Вот.
[01:10:21.380 --> 01:10:23.380]  Возможно, вас когда-нибудь...
[01:10:23.380 --> 01:10:25.380]  Есть несколько вопросов.
[01:10:39.380 --> 01:10:41.380]  Ну, слушайте, многие вещи
[01:10:41.380 --> 01:10:43.380]  переводятся не так, как хотелось бы.
[01:10:43.380 --> 01:10:45.380]  Так вот, вопрос.
[01:10:45.380 --> 01:10:47.380]  Вот вы реализуете иерархию
[01:10:47.380 --> 01:10:49.380]  геометрических фигур.
[01:10:49.380 --> 01:10:51.380]  Правильно ли сделать квадрат
[01:10:51.380 --> 01:10:53.380]  наследником прямоугольника?
[01:11:03.380 --> 01:11:05.380]  Да, проблема в том, что
[01:11:05.380 --> 01:11:07.380]  первая проблема уже намечается
[01:11:07.380 --> 01:11:09.380]  в том, что для хранения прямоугольника
[01:11:09.380 --> 01:11:11.380]  нужно два числа, а для квадрата
[01:11:11.380 --> 01:11:13.380]  у вас прямоугольника
[01:11:13.380 --> 01:11:15.380]  нужно помнить больше параметров,
[01:11:15.380 --> 01:11:17.380]  чем у квадрата.
[01:11:17.380 --> 01:11:19.380]  Если вы квадрат делаете наследником
[01:11:19.380 --> 01:11:21.380]  прямоугольника, то получается, что у вас
[01:11:21.380 --> 01:11:23.380]  квадрат хранит все то, что прямоугольник,
[01:11:23.380 --> 01:11:25.380]  то есть длины двух сторон, допустим,
[01:11:25.380 --> 01:11:27.380]  и возможно еще что-то дополнительное.
[01:11:27.380 --> 01:11:29.380]  Хотя на самом деле, квадрата нужно хранить
[01:11:29.380 --> 01:11:31.380]  меньше, чем прямоугольник.
[01:11:31.380 --> 01:11:33.380]  Но хуже даже не это.
[01:11:33.380 --> 01:11:35.380]  Хуже то, что у прямоугольника
[01:11:35.380 --> 01:11:37.380]  в принципе могут быть методы, которые
[01:11:37.380 --> 01:11:39.380]  его модифицируют так, что
[01:11:39.380 --> 01:11:41.380]  к примеру прямоугольника вполне может быть метод
[01:11:41.380 --> 01:11:43.380]  скейл по горизонтали.
[01:11:43.380 --> 01:11:45.380]  И если вы унаследуете квадрат
[01:11:45.380 --> 01:11:47.380]  от прямоугольника в такой ситуации,
[01:11:47.380 --> 01:11:49.380]  то квадрат перестанет
[01:11:49.380 --> 01:11:51.380]  быть
[01:11:51.380 --> 01:11:53.380]  квадратом,
[01:11:53.380 --> 01:11:55.380]  если вдруг
[01:11:55.380 --> 01:11:57.380]  кто-то от него такой метод вызовет.
[01:11:57.380 --> 01:11:59.380]  То есть если вы случайно
[01:11:59.380 --> 01:12:01.380]  вызовете, если вы начнете вызывать
[01:12:01.380 --> 01:12:03.380]  методы родителя, которые
[01:12:03.380 --> 01:12:05.380]  не подходят, так сказать,
[01:12:05.380 --> 01:12:07.380]  под концепцию вашего наследника,
[01:12:07.380 --> 01:12:09.380]  то у вас наследник потеряет
[01:12:09.380 --> 01:12:11.380]  смысл свой, у вас квадрат перестанет быть квадратом.
[01:12:13.380 --> 01:12:15.380]  Поэтому в этом заключается
[01:12:15.380 --> 01:12:17.380]  circle ellipse problem, но там та же самая проблема,
[01:12:17.380 --> 01:12:19.380]  только с кругом и эллипсом.
[01:12:19.380 --> 01:12:21.380]  Казалось бы, круг разумно
[01:12:21.380 --> 01:12:23.380]  сделать наследником эллипса.
[01:12:23.380 --> 01:12:25.380]  Но вот не совсем, не всегда.
[01:12:25.380 --> 01:12:27.380]  Если у вас у эллипса есть методы
[01:12:27.380 --> 01:12:29.380]  растяжения по горизонтали,
[01:12:29.380 --> 01:12:31.380]  и к тому же эллипс еще хранит 2 числа, круг 1,
[01:12:31.380 --> 01:12:33.380]  это не очень хорошее
[01:12:33.380 --> 01:12:35.380]  проектирование.
[01:12:37.380 --> 01:12:39.380]  Ну вот мораль.
[01:12:39.380 --> 01:12:41.380]  Мораль в том, что не всегда
[01:12:41.380 --> 01:12:43.380]  то, что мы воспринимаем
[01:12:43.380 --> 01:12:45.380]  как А является частным
[01:12:45.380 --> 01:12:47.380]  случаем В в объектно-линейцированном
[01:12:47.380 --> 01:12:49.380]  программировании стоит выражать наследованием.
[01:12:49.380 --> 01:12:51.380]  То есть казалось бы
[01:12:51.380 --> 01:12:53.380]  квадрат частного случая прямоголика, да.
[01:12:53.380 --> 01:12:55.380]  Но всегда ли
[01:12:55.380 --> 01:12:57.380]  подходит для наследования
[01:12:57.380 --> 01:12:59.380]  это? Нет. Вот наследование
[01:12:59.380 --> 01:13:01.380]  иногда приводит к неожиданным
[01:13:01.380 --> 01:13:03.380]  побочным эффектам,
[01:13:03.380 --> 01:13:05.380]  которые казалось бы вроде
[01:13:05.380 --> 01:13:07.380]  с точки зрения здравого смысла,
[01:13:07.380 --> 01:13:09.380]  вроде как одно частный случай
[01:13:09.380 --> 01:13:11.380]  другого, но ввиду того,
[01:13:11.380 --> 01:13:13.380]  как устроено все в программировании,
[01:13:13.380 --> 01:13:15.380]  не всегда наследование
[01:13:15.380 --> 01:13:17.380]  можно отразить эту мысль.
[01:13:17.380 --> 01:13:19.380]  У вас будет задача
[01:13:19.380 --> 01:13:21.380]  следующая геометрия.
[01:13:21.380 --> 01:13:23.380]  Как я уже предупреждал там
[01:13:23.380 --> 01:13:25.380]  в чате. Там нужно будет
[01:13:25.380 --> 01:13:27.380]  реализовать иерархию геометрических фигур
[01:13:27.380 --> 01:13:29.380]  и там вам все-таки нужно будет сделать
[01:13:29.380 --> 01:13:31.380]  квадрат наследником прямогольника.
[01:13:31.380 --> 01:13:33.380]  Вот.
[01:13:33.380 --> 01:13:35.380]  Ну, имейте в виду,
[01:13:35.380 --> 01:13:37.380]  что это плохо и так делать не надо,
[01:13:37.380 --> 01:13:39.380]  но мы вас все равно наставим.
[01:13:39.380 --> 01:13:41.380]  Почему тогда лучше не сделать
[01:13:41.380 --> 01:13:43.380]  прямогольник наследником квадрата?
[01:13:43.380 --> 01:13:45.380]  Просто квадрат сделает два числа и сыграет.
[01:13:45.380 --> 01:13:47.380]  Ну, потому что
[01:13:47.380 --> 01:13:49.380]  прямогольник это не частый случай квадрата.
[01:13:49.380 --> 01:13:51.380]  Это уж совсем как-то ломает логику.
[01:13:51.380 --> 01:13:53.380]  Но нам что так, что так придется
[01:13:53.380 --> 01:13:55.380]  хранить два числа, если мы
[01:13:55.380 --> 01:13:57.380]  квадрат сделаем наследником.
[01:13:57.380 --> 01:13:59.380]  Ну, у меня нет правильного ответа на вопрос
[01:13:59.380 --> 01:14:01.380]  как надо. Иногда можно,
[01:14:01.380 --> 01:14:03.380]  да, косяк, но прямогольник делать в частном случае
[01:14:03.380 --> 01:14:05.380]  квадрата уж точно не стоит.
[01:14:05.380 --> 01:14:07.380]  Потому что у вас... Мы, наоборот,
[01:14:07.380 --> 01:14:09.380]  его расширим. Мы наследуем все, что было
[01:14:09.380 --> 01:14:11.380]  в квадрате и расширим
[01:14:11.380 --> 01:14:13.380]  методами, которые используем только
[01:14:13.380 --> 01:14:15.380]  прямогольника.
[01:14:15.380 --> 01:14:17.380]  Ну, тогда если ты будешь по ссылке
[01:14:17.380 --> 01:14:19.380]  на квадрат получать иногда
[01:14:19.380 --> 01:14:21.380]  прямогольника, так вообще куда годится?
[01:14:21.380 --> 01:14:23.380]  Ты же смотришь,
[01:14:23.380 --> 01:14:25.380]  ты должен отдавать
[01:14:25.380 --> 01:14:27.380]  наследника везде, где
[01:14:27.380 --> 01:14:29.380]  ожидаешь родителя.
[01:14:29.380 --> 01:14:31.380]  Поэтому вот.
[01:14:31.380 --> 01:14:33.380]  Ну, а так мы тоже можем получить
[01:14:33.380 --> 01:14:35.380]  прямогольники и методы. Ну, если у вас
[01:14:35.380 --> 01:14:37.380]  неаккуратно прямогольники и методы плохие,
[01:14:37.380 --> 01:14:39.380]  ну, то да. Ну, короче, проблема.
[01:14:39.380 --> 01:14:41.380]  Это дилемма. Тут непонятно как правильно,
[01:14:41.380 --> 01:14:43.380]  но вот просто имейте в виду,
[01:14:43.380 --> 01:14:45.380]  что наследование не всегда
[01:14:45.380 --> 01:14:47.380]  отражает буквально, что одно часть звучит в другом.
[01:14:47.380 --> 01:14:49.380]  Чего ты так просить хотел?
[01:14:49.380 --> 01:14:51.380]  А мы можем сделать так,
[01:14:51.380 --> 01:14:53.380]  что у нас у нас стрелька будет, наверно, меньше метров
[01:14:53.380 --> 01:14:55.380]  чем у главного, то есть
[01:14:55.380 --> 01:14:57.380]  хранящаяся квадричность?
[01:14:57.380 --> 01:14:59.380]  Вы можете
[01:14:59.380 --> 01:15:01.380]  в приватной части наследника
[01:15:01.380 --> 01:15:03.380]  написать юзинги публичных методов
[01:15:03.380 --> 01:15:05.380]  родителя.
[01:15:05.380 --> 01:15:07.380]  Тогда они привнесутся в областидимость
[01:15:07.380 --> 01:15:09.380]  и станут приватными для внешних
[01:15:09.380 --> 01:15:11.380]  пользователей.
[01:15:11.380 --> 01:15:13.380]  Ну, в принципе,
[01:15:13.380 --> 01:15:15.380]  можете.
[01:15:15.380 --> 01:15:17.380]  Давайте сделаем
[01:15:17.380 --> 01:15:19.380]  еще один перерыв.
[01:15:23.380 --> 01:15:25.380]  Следующее,
[01:15:25.380 --> 01:15:27.380]  о чем надо поговорить,
[01:15:27.380 --> 01:15:29.380]  это замечательная тема,
[01:15:29.380 --> 01:15:31.380]  которую вообще-то, может быть,
[01:15:31.380 --> 01:15:33.380]  надо было бы и
[01:15:33.380 --> 01:15:35.380]  на следующий раз отложить,
[01:15:35.380 --> 01:15:37.380]  но уж ладно, раз у нас три пары, давайте.
[01:15:37.380 --> 01:15:39.380]  Значит,
[01:15:39.380 --> 01:15:41.380]  прекрасная
[01:15:41.380 --> 01:15:43.380]  и божественная
[01:15:43.380 --> 01:15:45.380]  особенность языка C++
[01:15:45.380 --> 01:15:47.380]  это возможность
[01:15:47.380 --> 01:15:49.380]  множественного наследования.
[01:15:49.380 --> 01:15:51.380]  Multiple inheritance.
[01:15:51.380 --> 01:15:53.380]  Это ситуация,
[01:15:53.380 --> 01:15:55.380]  когда вы можете унаследоваться
[01:15:55.380 --> 01:15:57.380]  от нескольких предков сразу.
[01:15:57.380 --> 01:15:59.380]  Вот.
[01:15:59.380 --> 01:16:01.380]  И вот сейчас
[01:16:01.380 --> 01:16:03.380]  будет много веселых картиночек.
[01:16:03.380 --> 01:16:05.380]  Очень веселых.
[01:16:05.380 --> 01:16:07.380]  Я могу написать
[01:16:07.380 --> 01:16:09.380]  в
[01:16:09.380 --> 01:16:11.380]  объявлении класса,
[01:16:11.380 --> 01:16:13.380]  что он наследник сразу двух.
[01:16:13.380 --> 01:16:15.380]  Там напишу
[01:16:15.380 --> 01:16:17.380]  класс сын, и вот он
[01:16:17.380 --> 01:16:19.380]  паблик мазер,
[01:16:19.380 --> 01:16:21.380]  паблик фазер, допустим.
[01:16:23.380 --> 01:16:25.380]  Но я сейчас буду рисовать
[01:16:25.380 --> 01:16:27.380]  стрелочки.
[01:16:27.380 --> 01:16:29.380]  Там.
[01:16:29.380 --> 01:16:31.380]  Ну и тут определение. Вот я просто
[01:16:31.380 --> 01:16:33.380]  объявил наследование от двух классов
[01:16:33.380 --> 01:16:35.380]  сразу. Я мог бы, конечно,
[01:16:35.380 --> 01:16:37.380]  от кого-то из них приватно унаследоваться, от кого-то публично.
[01:16:39.380 --> 01:16:41.380]  Вот.
[01:16:41.380 --> 01:16:43.380]  Ну, много от кого-то защищенно.
[01:16:45.380 --> 01:16:47.380]  Промножечное наследование
[01:16:47.380 --> 01:16:49.380]  сразу возникает
[01:16:49.380 --> 01:16:51.380]  много интересных
[01:16:51.380 --> 01:16:53.380]  историй.
[01:16:53.380 --> 01:16:55.380]  Вот, например,
[01:16:55.380 --> 01:16:57.380]  что делать, если у меня
[01:16:57.380 --> 01:16:59.380]  и в мазер есть поле х, и в фазер есть
[01:16:59.380 --> 01:17:01.380]  поле х?
[01:17:01.380 --> 01:17:03.380]  То когда я унаследовался
[01:17:03.380 --> 01:17:05.380]  от сына и пишу с.х,
[01:17:05.380 --> 01:17:07.380]  ой, унаследовался от них обоих, и пишу
[01:17:07.380 --> 01:17:09.380]  с.х, это
[01:17:09.380 --> 01:17:11.380]  неоднозначность.
[01:17:11.380 --> 01:17:13.380]  Потому что непонятно, какой х
[01:17:13.380 --> 01:17:15.380]  брать. Их там два, и оба одинаково
[01:17:15.380 --> 01:17:17.380]  хороши, ну или одинаково
[01:17:17.380 --> 01:17:19.380]  плохи. Если бы я в сыне
[01:17:19.380 --> 01:17:21.380]  свой х объявил, то это было бы
[01:17:21.380 --> 01:17:23.380]  предпочтительнее. Ну, из мазер пришел
[01:17:23.380 --> 01:17:25.380]  х, из фазер пришел х, непонятно,
[01:17:25.380 --> 01:17:27.380]  какой брать. То же самое,
[01:17:27.380 --> 01:17:29.380]  если у меня функции
[01:17:29.380 --> 01:17:31.380]  разные, там есть функции
[01:17:31.380 --> 01:17:33.380]  от разных типов
[01:17:33.380 --> 01:17:35.380]  с одинаковым названием, они
[01:17:35.380 --> 01:17:37.380]  равноправно участвуют в перегрузке,
[01:17:37.380 --> 01:17:39.380]  что от мазер, что от фазер. Если у меня
[01:17:39.380 --> 01:17:41.380]  есть f от int, f от double,
[01:17:41.380 --> 01:17:43.380]  вот на этот раз уже не будет
[01:17:43.380 --> 01:17:45.380]  сокрытия, а будет
[01:17:45.380 --> 01:17:47.380]  одинаково хорошо, и
[01:17:47.380 --> 01:17:49.380]  среди них будет полноценная перегрузка. Но если
[01:17:49.380 --> 01:17:51.380]  из мазер, из фазер пришли функции с одинаковыми
[01:17:51.380 --> 01:17:53.380]  сигнатурами, одинаковыми именами, то будет опять
[01:17:53.380 --> 01:17:55.380]  неоднозначность. Потому что непонятно,
[01:17:55.380 --> 01:17:57.380]  какую вызвать. И вот чтобы
[01:17:57.380 --> 01:17:59.380]  стало понятно, какую вызвать,
[01:17:59.380 --> 01:18:01.380]  иногда приходится использовать квалифицированные
[01:18:01.380 --> 01:18:03.380]  имена опять. То есть я могу писать
[01:18:03.380 --> 01:18:05.380]  с.мазер2.2.х
[01:18:05.380 --> 01:18:07.380]  и говорить, что я
[01:18:07.380 --> 01:18:09.380]  беру
[01:18:09.380 --> 01:18:11.380]  х из нее.
[01:18:11.380 --> 01:18:13.380]  Вот.
[01:18:13.380 --> 01:18:15.380]  Как устроено,
[01:18:15.380 --> 01:18:17.380]  соответственно, в памяти это,
[01:18:17.380 --> 01:18:19.380]  когда я объявляю множество наследований.
[01:18:19.380 --> 01:18:21.380]  По порядку создаются эти предки.
[01:18:21.380 --> 01:18:23.380]  То есть сначала создаются часть мазер,
[01:18:23.380 --> 01:18:25.380]  потом часть фазер,
[01:18:25.380 --> 01:18:27.380]  потом
[01:18:27.380 --> 01:18:29.380]  сын. То есть вот надстройка
[01:18:29.380 --> 01:18:31.380]  такая над ними.
[01:18:31.380 --> 01:18:33.380]  То есть в сыне есть кусок мазер, кусок
[01:18:33.380 --> 01:18:35.380]  фазер.
[01:18:37.380 --> 01:18:39.380]  Вот.
[01:18:41.380 --> 01:18:43.380]  Ну, с конструкторами, деструктурами все
[01:18:43.380 --> 01:18:45.380]  также работает. То есть, когда мы создаем сына,
[01:18:45.380 --> 01:18:47.380]  сначала нужно объяснить, как создать маму, потом
[01:18:47.380 --> 01:18:49.380]  объяснить, как создать папу, потом проинициализировать
[01:18:49.380 --> 01:18:51.380]  поля сына.
[01:18:51.380 --> 01:18:53.380]  Как работает
[01:18:53.380 --> 01:18:55.380]  приведение типов?
[01:19:01.380 --> 01:19:03.380]  Если у меня есть
[01:19:03.380 --> 01:19:05.380]  сын,
[01:19:05.380 --> 01:19:07.380]  в нем есть,
[01:19:07.380 --> 01:19:09.380]  ну он наследник двух родителей,
[01:19:09.380 --> 01:19:11.380]  то
[01:19:11.380 --> 01:19:13.380]  допустим, я хочу
[01:19:13.380 --> 01:19:15.380]  сделать каст к маме.
[01:19:15.380 --> 01:19:17.380]  Ну, вот я пишу
[01:19:17.380 --> 01:19:19.380]  сын s,
[01:19:19.380 --> 01:19:21.380]  потом говорю мазером персант
[01:19:23.380 --> 01:19:25.380]  m равно s.
[01:19:25.380 --> 01:19:27.380]  Все нормально работает.
[01:19:27.380 --> 01:19:29.380]  Вот. Ну, соответственно,
[01:19:29.380 --> 01:19:31.380]  у m я смогу вызывать поля и методы, которые
[01:19:31.380 --> 01:19:33.380]  от мамы пришли. Да?
[01:19:33.380 --> 01:19:35.380]  Ну, опять же, считаем, что
[01:19:35.380 --> 01:19:37.380]  наследование публичное, все хорошо. Если
[01:19:37.380 --> 01:19:39.380]  публичное, то дополнительные эффекты возникают.
[01:19:39.380 --> 01:19:41.380]  А что происходит,
[01:19:41.380 --> 01:19:43.380]  если я говорю father
[01:19:43.380 --> 01:19:45.380]  ampersand f равно s?
[01:19:47.380 --> 01:19:49.380]  Тут происходит интересная
[01:19:49.380 --> 01:19:51.380]  вещь, потому что
[01:19:53.380 --> 01:19:55.380]  ввиду того, как это в памяти размещается,
[01:19:55.380 --> 01:19:57.380]  father-то начинается
[01:19:57.380 --> 01:19:59.380]  не по тому же адресу, по которому начинается
[01:19:59.380 --> 01:20:01.380]  сын.
[01:20:03.380 --> 01:20:05.380]  И получается, что
[01:20:05.380 --> 01:20:07.380]  вот эта ссылка,
[01:20:07.380 --> 01:20:09.380]  которая на самом деле указатель,
[01:20:09.380 --> 01:20:11.380]  она указывает не на ту часть.
[01:20:11.380 --> 01:20:13.380]  То есть адрес
[01:20:13.380 --> 01:20:15.380]  f не такой, как адрес s.
[01:20:17.380 --> 01:20:19.380]  Я
[01:20:19.380 --> 01:20:21.380]  инициализировал ссылку на отца с сыном
[01:20:21.380 --> 01:20:23.380]  и получил объект с другим адресом,
[01:20:23.380 --> 01:20:25.380]  нежели был у сына. Ну, потому что
[01:20:25.380 --> 01:20:27.380]  папа-то вот тут начинается,
[01:20:27.380 --> 01:20:29.380]  тут еще перед ним мама была. Если там
[01:20:29.380 --> 01:20:31.380]  empty-base-optimization, то ладно.
[01:20:31.380 --> 01:20:33.380]  Но если мама не пустая, то father будет
[01:20:33.380 --> 01:20:35.380]  с другим адресом.
[01:20:35.380 --> 01:20:37.380]  И забавнее, особенно всего,
[01:20:37.380 --> 01:20:39.380]  это когда я пишу вот так. То есть если я напишу
[01:20:39.380 --> 01:20:41.380]  father звездочка f
[01:20:41.380 --> 01:20:43.380]  равно ampersand s,
[01:20:43.380 --> 01:20:45.380]  то получится, что я
[01:20:47.380 --> 01:20:49.380]  ну, сделал сдвиг указателя
[01:20:49.380 --> 01:20:51.380]  неявный. То есть
[01:20:51.380 --> 01:20:53.380]  адрес s был каким-то,
[01:20:53.380 --> 01:20:55.380]  а когда я father звездочку
[01:20:55.380 --> 01:20:57.380]  пронициализировал им, значение указателя
[01:20:57.380 --> 01:20:59.380]  поменялось. То есть численное значение
[01:20:59.380 --> 01:21:01.380]  вот этого указателя не такое, как этого.
[01:21:03.380 --> 01:21:05.380]  Вот.
[01:21:05.380 --> 01:21:07.380]  Ну ладно. А если
[01:21:07.380 --> 01:21:09.380]  я хочу static-cast
[01:21:09.380 --> 01:21:11.380]  делать, если я хочу, например, от
[01:21:11.380 --> 01:21:13.380]  ну, в обратную сторону.
[01:21:13.380 --> 01:21:15.380]  Да, ну понятно,
[01:21:15.380 --> 01:21:17.380]  что я могу срезку также делать. От
[01:21:17.380 --> 01:21:19.380]  сына к мазер, от сына к фазер. Я могу копию
[01:21:19.380 --> 01:21:21.380]  делать. Ну, то есть
[01:21:21.380 --> 01:21:23.380]  срезка по-прежнему работает. Я могу
[01:21:23.380 --> 01:21:25.380]  передать, принять мазер
[01:21:25.380 --> 01:21:27.380]  по значению и отдать сына. Создастся
[01:21:27.380 --> 01:21:29.380]  копия части мазера. Я могу принять
[01:21:29.380 --> 01:21:31.380]  фазер по значению и отдать сына.
[01:21:31.380 --> 01:21:33.380]  Создастся копия части фазера.
[01:21:33.380 --> 01:21:35.380]  А если я в обратную
[01:21:35.380 --> 01:21:37.380]  сторону хочу касты делать? То есть
[01:21:37.380 --> 01:21:39.380]  получается, вот если я хочу мазер
[01:21:39.380 --> 01:21:41.380]  скастовать, ну, ссылку на
[01:21:41.380 --> 01:21:43.380]  мазер мне дали, я хочу скастовать ее к ссылке
[01:21:43.380 --> 01:21:45.380]  на сына. Ну, все также работает.
[01:21:45.380 --> 01:21:47.380]  Если мазер публичный наследник, то просто
[01:21:47.380 --> 01:21:49.380]  static-cast будет считать, что тут еще
[01:21:49.380 --> 01:21:51.380]  правее фазер лежит, а потом
[01:21:51.380 --> 01:21:53.380]  значит сын. А вот если
[01:21:53.380 --> 01:21:55.380]  мне дали ссылку на фазер
[01:21:55.380 --> 01:21:57.380]  и я сделаю static-cast
[01:21:57.380 --> 01:21:59.380]  к сыну, то значит этот static-cast
[01:21:59.380 --> 01:22:01.380]  приведет к тому, что указатель сдвинет
[01:22:01.380 --> 01:22:03.380]  обратно.
[01:22:03.380 --> 01:22:05.380]  Да, ну, то есть
[01:22:05.380 --> 01:22:07.380]  мне дали ссылку, ну, или указатель на
[01:22:07.380 --> 01:22:09.380]  отца и сказали static-cast к сыну.
[01:22:09.380 --> 01:22:11.380]  Если наследование публичное,
[01:22:11.380 --> 01:22:13.380]  то static-cast, поскольку он же
[01:22:13.380 --> 01:22:15.380]  знает, как в памяти расположена вся эта хрень,
[01:22:15.380 --> 01:22:17.380]  он понимает, что если мне дали фазер,
[01:22:17.380 --> 01:22:19.380]  а просят из него сделать сына, значит
[01:22:19.380 --> 01:22:21.380]  надо указатель сдвинуть обратно вот на столько
[01:22:21.380 --> 01:22:23.380]  каков размер мазер. Таким образом,
[01:22:23.380 --> 01:22:25.380]  после static-cast одного указателя
[01:22:25.380 --> 01:22:27.380]  к другому, у вас изменяется чистое значение
[01:22:27.380 --> 01:22:29.380]  указателя на вот размер мазер влево
[01:22:29.380 --> 01:22:31.380]  или вправо, смотря в какую сторону вы
[01:22:31.380 --> 01:22:33.380]  кастуете.
[01:22:33.380 --> 01:22:35.380]  Вот.
[01:22:35.380 --> 01:22:37.380]  И это такой интересный эффект.
[01:22:37.380 --> 01:22:39.380]  То есть, когда вы static-cast делаете,
[01:22:39.380 --> 01:22:41.380]  иногда у вас все-таки,
[01:22:41.380 --> 01:22:43.380]  это вот то, что я говорил, иногда у вас static-cast
[01:22:43.380 --> 01:22:45.380]  приводит к изменению численного значения указателя.
[01:22:45.380 --> 01:22:47.380]  Например, при множественном наследовании.
[01:22:51.380 --> 01:22:53.380]  Да.
[01:22:53.380 --> 01:22:55.380]  Ну, потому что
[01:22:55.380 --> 01:22:57.380]  он же знает, конечно, он знает, что такое sun
[01:22:57.380 --> 01:22:59.380]  и знает, как он устроен.
[01:22:59.380 --> 01:23:01.380]  Мы сделали static-cast
[01:23:01.380 --> 01:23:03.380]  к sun-у
[01:23:03.380 --> 01:23:05.380]  от просто фазер. По-настоящему
[01:23:05.380 --> 01:23:07.380]  указателем на фазер не
[01:23:07.380 --> 01:23:09.380]  стоит sun, а стоит
[01:23:09.380 --> 01:23:11.380]  фазер. Он просто сдвинет указатель
[01:23:11.380 --> 01:23:13.380]  на фазер. Он сдвинет, да-да, конечно,
[01:23:13.380 --> 01:23:15.380]  но он будет считать, что и тут что-то есть
[01:23:15.380 --> 01:23:17.380]  не фазера, относящийся к сыну, и влево от
[01:23:17.380 --> 01:23:19.380]  него что-то есть. Вот.
[01:23:21.380 --> 01:23:23.380]  А, как бы работал reinterpret-cast, кстати,
[01:23:23.380 --> 01:23:25.380]  в этой ситуации?
[01:23:25.380 --> 01:23:27.380]  Reinterpret-cast'у пофиг,
[01:23:27.380 --> 01:23:29.380]  он ничего бы никуда не сдвигал. То есть, если я
[01:23:29.380 --> 01:23:31.380]  сделаю reinterpret-cast фазер к сыну,
[01:23:31.380 --> 01:23:33.380]  то я буду считать, что с этого места mother начинается
[01:23:33.380 --> 01:23:35.380]  отныне.
[01:23:35.380 --> 01:23:37.380]  Понимаете, да? То есть,
[01:23:37.380 --> 01:23:39.380]  static-cast, он, во-первых, проверяет приватность
[01:23:39.380 --> 01:23:41.380]  и можете ли вы кастовать в принципе.
[01:23:41.380 --> 01:23:43.380]  Если можете, то сдвигает сюда.
[01:23:43.380 --> 01:23:45.380]  А reinterpret-cast ему пофиг на приватность, он просто
[01:23:45.380 --> 01:23:47.380]  считает, что с этого места начинается
[01:23:47.380 --> 01:23:49.380]  теперь, ну, поскольку первая там mother, то
[01:23:49.380 --> 01:23:51.380]  сначала, то отсюда будет начинаться mother,
[01:23:51.380 --> 01:23:53.380]  по моему мнению.
[01:23:53.380 --> 01:23:55.380]  Вот. Так вы можете интересное UB
[01:23:55.380 --> 01:23:57.380]  получить.
[01:23:57.380 --> 01:23:59.380]  Это ты в KFC, что ли, успел сбегать быстро,
[01:23:59.380 --> 01:24:01.380]  или куда?
[01:24:01.380 --> 01:24:03.380]  То есть, ты до Тимки добежал просто.
[01:24:03.380 --> 01:24:05.380]  А вот зачем ты спрашивал, сколько времени перерыва?
[01:24:05.380 --> 01:24:07.380]  Я успел даже десять минут.
[01:24:07.380 --> 01:24:09.380]  Нормально, нормально, да, неплохо.
[01:24:09.380 --> 01:24:11.380]  Только, жалко, да есть
[01:24:11.380 --> 01:24:13.380]  не успел.
[01:24:13.380 --> 01:24:15.380]  Мы же можем
[01:24:15.380 --> 01:24:17.380]  в случае reinterpret-cast
[01:24:17.380 --> 01:24:19.380]  сами на size of mother подвигать?
[01:24:19.380 --> 01:24:21.380]  Пожалуйста.
[01:24:21.380 --> 01:24:23.380]  Может...
[01:24:23.380 --> 01:24:25.380]  Вы можете вообще типы не использовать,
[01:24:25.380 --> 01:24:27.380]  вы можете только char звездочками оперировать,
[01:24:27.380 --> 01:24:29.380]  если вам так удобно. Я в принципе
[01:24:29.380 --> 01:24:31.380]  так может быть сразу легче,
[01:24:31.380 --> 01:24:33.380]  что стесняться.
[01:24:33.380 --> 01:24:35.380]  Ну void звездочки неудобно,
[01:24:35.380 --> 01:24:37.380]  с ними арифметика не работает.
[01:24:37.380 --> 01:24:39.380]  Char звездочки лучше всего.
[01:24:39.380 --> 01:24:41.380]  Они ровно подряд
[01:24:41.380 --> 01:24:43.380]  там нет никаких услуг. Не, ну как?
[01:24:43.380 --> 01:24:45.380]  Тут могут быть какие-то пэддинги
[01:24:45.380 --> 01:24:47.380]  из-за полей, но они подряд конечно подряд.
[01:24:47.380 --> 01:24:49.380]  Ну да.
[01:24:55.380 --> 01:24:57.380]  Кстати, хороший вопрос.
[01:24:57.380 --> 01:24:59.380]  Кстати, это
[01:24:59.380 --> 01:25:01.380]  хороший вопрос.
[01:25:01.380 --> 01:25:03.380]  Да, это кстати хороший вопрос. Смотрите, вот
[01:25:03.380 --> 01:25:05.380]  допустим у вас mother состоит из одного чара,
[01:25:05.380 --> 01:25:07.380]  а father состоит из int.
[01:25:07.380 --> 01:25:09.380]  Тогда mother подряд за mother
[01:25:09.380 --> 01:25:11.380]  пришлось бы, ну они бы
[01:25:11.380 --> 01:25:13.380]  просто чар за чаром лежали.
[01:25:13.380 --> 01:25:15.380]  А father начинается с int, поэтому между mother
[01:25:15.380 --> 01:25:17.380]  и father будет дополнительный еще пэддинг.
[01:25:17.380 --> 01:25:19.380]  То есть это не обязательно size of mother.
[01:25:19.380 --> 01:25:21.380]  Это size of mother плюс еще
[01:25:21.380 --> 01:25:23.380]  возможно какой-то дополнительный пэддинг,
[01:25:23.380 --> 01:25:25.380]  чтобы father нормально лег.
[01:25:25.380 --> 01:25:27.380]  Да, так что
[01:25:27.380 --> 01:25:29.380]  видите, тут все не так.
[01:25:29.380 --> 01:25:31.380]  Потому что int нужно
[01:25:31.380 --> 01:25:33.380]  класть по адресам кратным
[01:25:33.380 --> 01:25:35.380]  4, я же говорил уже.
[01:25:39.380 --> 01:25:41.380]  Вот.
[01:25:41.380 --> 01:25:43.380]  К чему?
[01:25:43.380 --> 01:25:45.380]  Статик кастом
[01:25:45.380 --> 01:25:47.380]  нормально, неявно конечно
[01:25:47.380 --> 01:25:49.380]  не кастуется.
[01:25:49.380 --> 01:25:51.380]  Потому что я в предыдущем
[01:25:51.380 --> 01:25:53.380]  пункте рассказывал, что каст вниз по иерархии
[01:25:53.380 --> 01:25:55.380]  через статик каст разрешен, вот он.
[01:25:55.380 --> 01:25:57.380]  Вверх
[01:25:57.380 --> 01:25:59.380]  неявный каст вообще разрешен.
[01:25:59.380 --> 01:26:01.380]  Не надо никакой статик каст писать.
[01:26:01.380 --> 01:26:03.380]  Сын это частный случай отца.
[01:26:03.380 --> 01:26:05.380]  От сына к отцу каст неявный.
[01:26:05.380 --> 01:26:07.380]  И к указателе,
[01:26:07.380 --> 01:26:09.380]  и к ссылке, и
[01:26:09.380 --> 01:26:11.380]  и по значению можно.
[01:26:13.380 --> 01:26:15.380]  Вот, но
[01:26:15.380 --> 01:26:17.380]  самое интересное конечно возникает
[01:26:17.380 --> 01:26:19.380]  вот когда. Это то, что
[01:26:19.380 --> 01:26:21.380]  из вас тут уже кто-то говорил.
[01:26:21.380 --> 01:26:23.380]  Самая веселая ситуация
[01:26:23.380 --> 01:26:25.380]  это моя любимая ситуация.
[01:26:25.380 --> 01:26:27.380]  По-английски называется
[01:26:27.380 --> 01:26:29.380]  Diamond Problem. А по-русски
[01:26:29.380 --> 01:26:31.380]  как это переводится?
[01:26:31.380 --> 01:26:33.380]  Ромби. Правильно.
[01:26:33.380 --> 01:26:35.380]  Как перевести Diamond? Конечно же
[01:26:35.380 --> 01:26:37.380]  ROM.
[01:26:37.380 --> 01:26:39.380]  Значит
[01:26:41.380 --> 01:26:43.380]  Вообще-то
[01:26:43.380 --> 01:26:45.380]  алмазная.
[01:26:45.380 --> 01:26:47.380]  А?
[01:26:47.380 --> 01:26:49.380]  Возможно.
[01:26:49.380 --> 01:26:51.380]  Ну можно
[01:26:51.380 --> 01:26:53.380]  бубновая проблема сказать еще.
[01:26:53.380 --> 01:26:55.380]  Проблема
[01:26:55.380 --> 01:26:57.380]  бубей.
[01:26:57.380 --> 01:26:59.380]  Это как
[01:26:59.380 --> 01:27:01.380]  знаете есть проблема борсука.
[01:27:01.380 --> 01:27:03.380]  Правда называется борсука, но
[01:27:03.380 --> 01:27:05.380]  можно называть проблем борсука.
[01:27:05.380 --> 01:27:07.380]  Так вот.
[01:27:07.380 --> 01:27:09.380]  Проблема вот
[01:27:09.380 --> 01:27:11.380]  как бы ее не называть. Ну по-русски называется
[01:27:11.380 --> 01:27:13.380]  проблема ромбовидного наследования.
[01:27:13.380 --> 01:27:15.380]  Ромбовидное
[01:27:15.380 --> 01:27:17.380]  наследование. Ну вы уже догадываетесь
[01:27:17.380 --> 01:27:19.380]  наверное в чем проблема.
[01:27:19.380 --> 01:27:21.380]  Ну у нас фаттер
[01:27:21.380 --> 01:27:23.380]  манер от одного. Да теперь
[01:27:23.380 --> 01:27:25.380]  сейчас у нас будет немножко
[01:27:25.380 --> 01:27:27.380]  значит да сейчас у нас будет
[01:27:27.380 --> 01:27:29.380]  вот эти самые смешные картинки которые я очень люблю.
[01:27:29.380 --> 01:27:31.380]  Представь что у вас есть сын
[01:27:31.380 --> 01:27:33.380]  который родителем
[01:27:33.380 --> 01:27:35.380]  является мама.
[01:27:35.380 --> 01:27:37.380]  А еще его родителем является папа.
[01:27:37.380 --> 01:27:39.380]  А у мамы и папы есть
[01:27:39.380 --> 01:27:41.380]  общий родитель.
[01:27:45.380 --> 01:27:47.380]  Я могу говорить родитель
[01:27:47.380 --> 01:27:49.380]  один, родитель два если кого-то это
[01:27:49.380 --> 01:27:51.380]  смущает. Значит
[01:27:51.380 --> 01:27:53.380]  так вот есть общий родитель у них
[01:27:53.380 --> 01:27:55.380]  всех. Игру
[01:27:55.380 --> 01:27:57.380]  престолов я не смотрел.
[01:27:57.380 --> 01:27:59.380]  И что
[01:27:59.380 --> 01:28:01.380]  вы думаете произойдет?
[01:28:03.380 --> 01:28:05.380]  Значит
[01:28:05.380 --> 01:28:07.380]  ну как
[01:28:07.380 --> 01:28:09.380]  видите здесь возникла ромбовидное наследование.
[01:28:09.380 --> 01:28:11.380]  Теперь вы знаете
[01:28:11.380 --> 01:28:13.380]  как это называется правильно.
[01:28:13.380 --> 01:28:15.380]  Значит
[01:28:15.380 --> 01:28:17.380]  вот допустим у меня у Грэнни
[01:28:17.380 --> 01:28:19.380]  есть поле х.
[01:28:19.380 --> 01:28:21.380]  У
[01:28:21.380 --> 01:28:23.380]  матор есть поле ну давайте
[01:28:23.380 --> 01:28:25.380]  я их буду называть по
[01:28:25.380 --> 01:28:27.380]  буквам. Значит у Грэнни есть поле г
[01:28:27.380 --> 01:28:29.380]  у мамы есть поле м.
[01:28:29.380 --> 01:28:31.380]  У папы есть поле ф.
[01:28:31.380 --> 01:28:33.380]  И у
[01:28:33.380 --> 01:28:35.380]  давайте я буду называть не фазер а дедди
[01:28:35.380 --> 01:28:37.380]  по некоторым причинам.
[01:28:39.380 --> 01:28:41.380]  Я буду говорить мам, дед ну типа ласково.
[01:28:43.380 --> 01:28:45.380]  Ну просто ф мне еще понадобится для обозначения
[01:28:45.380 --> 01:28:47.380]  функции. Я не хочу чтобы поле называлось
[01:28:47.380 --> 01:28:49.380]  ф. Значит у папы есть поле д
[01:28:49.380 --> 01:28:51.380]  и у сына есть поле с.
[01:28:51.380 --> 01:28:53.380]  И вот я создаю сына и пишу
[01:28:53.380 --> 01:28:55.380]  с.ж.
[01:28:55.380 --> 01:28:57.380]  Что происходит?
[01:28:57.380 --> 01:28:59.380]  Ну казалось бы
[01:28:59.380 --> 01:29:01.380]  надо взять же из бабушки.
[01:29:01.380 --> 01:29:03.380]  Но вопрос
[01:29:03.380 --> 01:29:05.380]  из какой бабушки?
[01:29:05.380 --> 01:29:07.380]  Их на самом деле
[01:29:07.380 --> 01:29:09.380]  две.
[01:29:11.380 --> 01:29:13.380]  Вот эта картинка
[01:29:13.380 --> 01:29:15.380]  она неправильна.
[01:29:15.380 --> 01:29:17.380]  То есть наследование называется
[01:29:17.380 --> 01:29:19.380]  ромбовидным. Но на самом то
[01:29:19.380 --> 01:29:21.380]  деле
[01:29:21.380 --> 01:29:23.380]  когда вы пишете
[01:29:23.380 --> 01:29:25.380]  если у вас матор это паблик Грэнни
[01:29:25.380 --> 01:29:27.380]  фазер это паблик Грэнни
[01:29:27.380 --> 01:29:29.380]  а сын это паблик матор паблик фазер
[01:29:29.380 --> 01:29:31.380]  вы помните как
[01:29:31.380 --> 01:29:33.380]  создается сын?
[01:29:33.380 --> 01:29:35.380]  Я напоминаю
[01:29:35.380 --> 01:29:37.380]  сначала когда мы создаем сына нужно
[01:29:37.380 --> 01:29:39.380]  создать маму. Чтобы создать маму нужно создать бабушку.
[01:29:39.380 --> 01:29:41.380]  Создали бабушку надстроили на ней
[01:29:41.380 --> 01:29:43.380]  маму. Отлично создали маму. Теперь
[01:29:43.380 --> 01:29:45.380]  создаем папу. Но чтобы создать
[01:29:45.380 --> 01:29:47.380]  папу нужно ему свою собственную бабушку создать.
[01:29:47.380 --> 01:29:49.380]  И он надстраивает
[01:29:51.380 --> 01:29:53.380]  А как?
[01:29:53.380 --> 01:29:55.380]  Какие конструкторы могут быть у них?
[01:29:55.380 --> 01:29:57.380]  Вот когда папа
[01:29:57.380 --> 01:29:59.380]  создается
[01:29:59.380 --> 01:30:01.380]  они вот так кладутся в память.
[01:30:01.380 --> 01:30:03.380]  То есть на самом деле при таком наследовании
[01:30:03.380 --> 01:30:05.380]  у вас вот здесь внутри мамы
[01:30:05.380 --> 01:30:07.380]  есть кусок являющийся бабушкой
[01:30:07.380 --> 01:30:09.380]  и внутри папы
[01:30:09.380 --> 01:30:11.380]  есть кусок являющийся бабушкой.
[01:30:11.380 --> 01:30:13.380]  И только над это все надстраивается сын.
[01:30:15.380 --> 01:30:17.380]  И то есть на самом деле у вас в этом
[01:30:17.380 --> 01:30:19.380]  вот сайзов такого объекта
[01:30:19.380 --> 01:30:21.380]  будет 20.
[01:30:21.380 --> 01:30:23.380]  У вас будет 5 интов, а не 4 в нем
[01:30:23.380 --> 01:30:25.380]  лежать, потому что этот будет продублирован.
[01:30:25.380 --> 01:30:27.380]  У вас два раза бабушка.
[01:30:27.380 --> 01:30:29.380]  Одна бабушка от мамы пришла, другая от папы.
[01:30:29.380 --> 01:30:31.380]  И вот это будет неоднозначность.
[01:30:33.380 --> 01:30:35.380]  Как устранить неоднозначность?
[01:30:35.380 --> 01:30:37.380]  Ну, вы уже знаете как.
[01:30:37.380 --> 01:30:39.380]  Можно писать s.mam
[01:30:39.380 --> 01:30:41.380]  g. Это вы получите
[01:30:41.380 --> 01:30:43.380]  g из бабушки. Из маминой бабушки.
[01:30:43.380 --> 01:30:45.380]  Можно писать father
[01:30:45.380 --> 01:30:47.380]  d. Вы получите
[01:30:47.380 --> 01:30:49.380]  g из папы. Папиной бабушки.
[01:30:49.380 --> 01:30:51.380]  Если напишите s.grenny
[01:30:51.380 --> 01:30:53.380]  это вас не впасет, потому что
[01:30:53.380 --> 01:30:55.380]  бабушек по-прежнему две.
[01:30:55.380 --> 01:30:57.380]  Раньше у нас была проблема с тем, что
[01:30:57.380 --> 01:30:59.380]  мы не можем назвать из сына бабушку,
[01:30:59.380 --> 01:31:01.380]  потому что непонятно,
[01:31:01.380 --> 01:31:03.380]  потому что доступа нет, а теперь мы из сына
[01:31:03.380 --> 01:31:05.380]  не можем назвать бабушку, потому что
[01:31:05.380 --> 01:31:07.380]  их две и непонятно какую.
[01:31:07.380 --> 01:31:09.380]  То есть обращение к бабушке
[01:31:09.380 --> 01:31:11.380]  неоднозначно.
[01:31:11.380 --> 01:31:13.380]  Если бы в маме тоже лежала примерно g
[01:31:13.380 --> 01:31:15.380]  то нужно было бы еще 2.2.grenny
[01:31:15.380 --> 01:31:17.380]  Да, если бы в маме лежала
[01:31:17.380 --> 01:31:19.380]  еще g, то написав
[01:31:19.380 --> 01:31:21.380]  s.mam2.g мы бы получили g из мамы,
[01:31:21.380 --> 01:31:23.380]  а чтобы получить g из маминой
[01:31:23.380 --> 01:31:25.380]  бабушки нам бы пришлось писать
[01:31:25.380 --> 01:31:27.380]  mam2.2.grenny2.2.g
[01:31:29.380 --> 01:31:31.380]  Вот.
[01:31:31.380 --> 01:31:33.380]  Ну ладно с ними с переменными.
[01:31:33.380 --> 01:31:35.380]  Хуже вот что. Представьте,
[01:31:35.380 --> 01:31:37.380]  что у вас вот здесь еще объявлен метод f.
[01:31:37.380 --> 01:31:39.380]  Просто метод f.
[01:31:39.380 --> 01:31:41.380]  Ничего особенного.
[01:31:41.380 --> 01:31:43.380]  Как вы думаете
[01:31:43.380 --> 01:31:45.380]  s.f
[01:31:47.380 --> 01:31:49.380]  нормально сработает?
[01:31:49.380 --> 01:31:51.380]  Нет, конечно.
[01:31:51.380 --> 01:31:53.380]  Это тоже неоднозначно.
[01:31:53.380 --> 01:31:55.380]  Из какой бабушки вызвать f?
[01:31:55.380 --> 01:31:57.380]  Из первой или из второй?
[01:31:57.380 --> 01:31:59.380]  Вопрос на
[01:31:59.380 --> 01:32:01.380]  понимание.
[01:32:01.380 --> 01:32:03.380]  А почему это неоднозначно?
[01:32:03.380 --> 01:32:05.380]  Там же одинаковый метод f.
[01:32:05.380 --> 01:32:07.380]  Это же один и тот же класс.
[01:32:09.380 --> 01:32:11.380]  Правильно.
[01:32:11.380 --> 01:32:13.380]  Потому что метод
[01:32:13.380 --> 01:32:15.380]  самого метода один и тот же.
[01:32:15.380 --> 01:32:17.380]  И этот метод он в свою очередь может
[01:32:17.380 --> 01:32:19.380]  взаимодействовать с полями бабушки.
[01:32:19.380 --> 01:32:21.380]  А тут уже важно с какой бабушки.
[01:32:21.380 --> 01:32:23.380]  Если этот метод как-то модифицирует
[01:32:23.380 --> 01:32:25.380]  поля, вот это поле g,
[01:32:25.380 --> 01:32:27.380]  то важно из какой бабушки его вызвать.
[01:32:27.380 --> 01:32:29.380]  Вы не можете вызвать метод f
[01:32:29.380 --> 01:32:31.380]  не понимая из какой бабушки он взят.
[01:32:31.380 --> 01:32:33.380]  Поэтому когда вы вызываете
[01:32:33.380 --> 01:32:35.380]  метод вот так вот при таком наследовании
[01:32:35.380 --> 01:32:37.380]  вам опять-таки нужно указывать
[01:32:37.380 --> 01:32:39.380]  через кого вы вызываете? Через маму или через папу?
[01:32:39.380 --> 01:32:41.380]  Вот это и называется
[01:32:41.380 --> 01:32:43.380]  проблемой ромбовидного наследования.
[01:32:43.380 --> 01:32:45.380]  У вас у наследован один и тот же класс
[01:32:45.380 --> 01:32:47.380]  два раза через разных промежуточных родителей.
[01:32:49.380 --> 01:32:51.380]  Люди очень часто
[01:32:51.380 --> 01:32:53.380]  на экзамене
[01:32:53.380 --> 01:32:55.380]  в ответ на вопрос
[01:32:55.380 --> 01:32:57.380]  что такое diamond problem говорят
[01:32:57.380 --> 01:32:59.380]  ну это когда у меня в маме есть x и в папе есть x
[01:32:59.380 --> 01:33:01.380]  и вот неоднозначность между ними.
[01:33:01.380 --> 01:33:03.380]  Нет, это не diamond problem.
[01:33:03.380 --> 01:33:05.380]  Это обычная неоднозначность.
[01:33:05.380 --> 01:33:07.380]  А diamond problem это когда у вас один x казалось бы
[01:33:07.380 --> 01:33:09.380]  и один f и он в бабушке.
[01:33:09.380 --> 01:33:11.380]  Но из-за того, что у вас
[01:33:11.380 --> 01:33:13.380]  два раза она у наследована через промежуточных разных родителей
[01:33:13.380 --> 01:33:15.380]  у вас получается
[01:33:17.380 --> 01:33:19.380]  значит разное
[01:33:21.380 --> 01:33:23.380]  у вас получается что он дублируется.
[01:33:25.380 --> 01:33:27.380]  Представьте кстати теперь
[01:33:27.380 --> 01:33:29.380]  что вот это наследование приватное.
[01:33:33.380 --> 01:33:35.380]  Да, вот представьте что я написал следующее
[01:33:35.380 --> 01:33:37.380]  вот эти все наследования публичные
[01:33:37.380 --> 01:33:39.380]  и вот это публичное, а от папы к бабушке приватное.
[01:33:39.380 --> 01:33:41.380]  Что теперь будет?
[01:33:41.380 --> 01:33:43.380]  Правильно, ничего не поменяется.
[01:33:43.380 --> 01:33:45.380]  По-прежнему будет неоднозначность.
[01:33:45.380 --> 01:33:47.380]  Потому что приватность никак не влияет
[01:33:47.380 --> 01:33:49.380]  на выбор версии, она влияет только на доступ
[01:33:49.380 --> 01:33:51.380]  к нужной версии. Если вы напишите
[01:33:51.380 --> 01:33:53.380]  s.mam2.f
[01:33:53.380 --> 01:33:55.380]  вы получите то что нужно
[01:33:55.380 --> 01:33:57.380]  если вы напишите sd2.f
[01:33:57.380 --> 01:33:59.380]  вы получите ce
[01:33:59.380 --> 01:34:01.380]  из-за ошибки доступа.
[01:34:03.380 --> 01:34:05.380]  Да.
[01:34:05.380 --> 01:34:07.380]  Видимость этого метода
[01:34:07.380 --> 01:34:09.380]  по-прежнему есть. От того что оно
[01:34:09.380 --> 01:34:11.380]  приватное, у вас не пропадает его
[01:34:11.380 --> 01:34:13.380]  видимость, он вам виден, но не доступен.
[01:34:13.380 --> 01:34:15.380]  Если у вас одна из версий
[01:34:15.380 --> 01:34:17.380]  приватная, а другая публичная, это никак
[01:34:17.380 --> 01:34:19.380]  не устраняет неоднозначность.
[01:34:19.380 --> 01:34:21.380]  У вас все еще будет неоднозначность,
[01:34:21.380 --> 01:34:23.380]  просто если вы уточните неправильно, то будет
[01:34:23.380 --> 01:34:25.380]  ce по причине уже ошибки доступа.
[01:34:27.380 --> 01:34:29.380]  Вот.
[01:34:33.380 --> 01:34:35.380]  Ну, будет все еще неоднозначность.
[01:34:35.380 --> 01:34:37.380]  Ну, просто она вся будет
[01:34:37.380 --> 01:34:39.380]  еще с ошибкой доступа и в целом
[01:34:39.380 --> 01:34:41.380]  не очень страшно. Ну, это вопрос в том, как
[01:34:41.380 --> 01:34:43.380]  реализован компилятор, что он
[01:34:43.380 --> 01:34:45.380]  какое сообщение об ошибке он выдаст, но по идее он
[01:34:45.380 --> 01:34:47.380]  должен выдать сообщение о неоднозначности, а не
[01:34:47.380 --> 01:34:49.380]  ошибка доступа, потому что
[01:34:49.380 --> 01:34:51.380]  выбор версий до
[01:34:51.380 --> 01:34:53.380]  проверки доступа происходит.
[01:34:53.380 --> 01:34:55.380]  Я в плане, что если у нас вот эти
[01:34:55.380 --> 01:34:57.380]  два приватных наследования, то в целом
[01:34:57.380 --> 01:34:59.380]  нам уже не так страшно остановится,
[01:34:59.380 --> 01:35:01.380]  потому что
[01:35:01.380 --> 01:35:03.380]  ну, в смысле, что
[01:35:03.380 --> 01:35:05.380]  неоднозначность появляется только
[01:35:07.380 --> 01:35:09.380]  с точки зрения логики,
[01:35:09.380 --> 01:35:11.380]  оно появляется только с теми методами, которые
[01:35:11.380 --> 01:35:13.380]  мы и так не должны быть. Ну, да.
[01:35:13.380 --> 01:35:15.380]  То есть, что оно
[01:35:15.380 --> 01:35:17.380]  не совсем страшно, если
[01:35:17.380 --> 01:35:19.380]  предок у нас следует
[01:35:19.380 --> 01:35:21.380]  два раза. Ну,
[01:35:21.380 --> 01:35:23.380]  нет, такое бывает.
[01:35:23.380 --> 01:35:25.380]  Просто надо понимать, как это работает.
[01:35:25.380 --> 01:35:27.380]  Вот.
[01:35:27.380 --> 01:35:29.380]  Ладно, хорошо, смотрите, теперь такая ситуация.
[01:35:29.380 --> 01:35:31.380]  Вот представьте, что я написал.
[01:35:31.380 --> 01:35:33.380]  Не хочу писать
[01:35:33.380 --> 01:35:35.380]  это на доске.
[01:35:35.380 --> 01:35:37.380]  Представщик написал, что у меня есть
[01:35:37.380 --> 01:35:39.380]  класс Грэнни,
[01:35:39.380 --> 01:35:41.380]  есть класс Мам,
[01:35:41.380 --> 01:35:43.380]  наследник Грэнни,
[01:35:43.380 --> 01:35:45.380]  а есть класс Сын, наследник Мамы и еще
[01:35:45.380 --> 01:35:47.380]  наследник Грэнни.
[01:35:47.380 --> 01:35:49.380]  То есть, я два раза унаследовал бабушку,
[01:35:49.380 --> 01:35:51.380]  один раз напрямую, а другой раз через маму.
[01:35:51.380 --> 01:35:53.380]  Картинка будет выглядеть так.
[01:35:53.380 --> 01:35:55.380]  Вот я унаследовал маму,
[01:35:55.380 --> 01:35:57.380]  которая унаследовала бабушку,
[01:35:57.380 --> 01:35:59.380]  а еще я унаследовал
[01:35:59.380 --> 01:36:01.380]  бабушку напрямую.
[01:36:01.380 --> 01:36:03.380]  Что в таком случае
[01:36:03.380 --> 01:36:05.380]  будет происходить?
[01:36:05.380 --> 01:36:07.380]  У нас будет две бабушки,
[01:36:07.380 --> 01:36:09.380]  одна из которых
[01:36:09.380 --> 01:36:11.380]  через маму,
[01:36:11.380 --> 01:36:13.380]  а другая напрямую.
[01:36:13.380 --> 01:36:15.380]  Вот.
[01:36:15.380 --> 01:36:17.380]  Как вы думаете,
[01:36:17.380 --> 01:36:19.380]  почему комитет по стандартизации
[01:36:19.380 --> 01:36:21.380]  не запретил
[01:36:21.380 --> 01:36:23.380]  к чертовой матери
[01:36:23.380 --> 01:36:25.380]  вообще так писать?
[01:36:25.380 --> 01:36:27.380]  Честно говоря, я не знаю.
[01:36:27.380 --> 01:36:29.380]  Но так можно писать,
[01:36:29.380 --> 01:36:31.380]  но при этом одна из бабушек
[01:36:31.380 --> 01:36:33.380]  будет вам полностью недоступна,
[01:36:33.380 --> 01:36:35.380]  кроме как через интерпреткаст СУБ.
[01:36:35.380 --> 01:36:37.380]  Смотрите, какая ситуация.
[01:36:37.380 --> 01:36:39.380]  Если у вас в бабушке сейчас есть какой-то поле
[01:36:39.380 --> 01:36:41.380]  или какой-то метод,
[01:36:41.380 --> 01:36:43.380]  то как его у сына вызвать?
[01:36:43.380 --> 01:36:45.380]  Вы можете, написав
[01:36:45.380 --> 01:36:47.380]  s.mam2.2chf,
[01:36:47.380 --> 01:36:49.380]  вызвать версию через маму пришедшую,
[01:36:49.380 --> 01:36:51.380]  но версию напрямую унаследованную
[01:36:51.380 --> 01:36:53.380]  вы никак не можете вызвать.
[01:36:53.380 --> 01:36:55.380]  s.mam2.2chf.
[01:36:55.380 --> 01:36:57.380]  Grand это не однозначность.
[01:36:57.380 --> 01:36:59.380]  И у вас нет способа
[01:36:59.380 --> 01:37:01.380]  просто обратиться к полям этой бабушки
[01:37:01.380 --> 01:37:03.380]  напрямую, не через маму.
[01:37:03.380 --> 01:37:05.380]  Вот сказать, что вы обращаетесь к полю через маму
[01:37:05.380 --> 01:37:07.380]  вы можете, а вот так вы просто
[01:37:07.380 --> 01:37:09.380]  не можете никак сказать, что вы не обращаетесь.
[01:37:13.380 --> 01:37:15.380]  Ну давайте посмотрим,
[01:37:15.380 --> 01:37:17.380]  как это устроено.
[01:37:17.380 --> 01:37:19.380]  Вот у меня сначала лежит бабушка,
[01:37:19.380 --> 01:37:21.380]  потом над ней надстроена мама,
[01:37:21.380 --> 01:37:23.380]  потом еще раз лежит бабушка,
[01:37:23.380 --> 01:37:25.380]  а потом над всем этим надстроен сын.
[01:37:27.380 --> 01:37:29.380]  Ну соответственно, зависит от размеров
[01:37:29.380 --> 01:37:31.380]  всех этих штуковин,
[01:37:31.380 --> 01:37:33.380]  вы понимаете,
[01:37:33.380 --> 01:37:35.380]  как это в памяти расположено,
[01:37:35.380 --> 01:37:37.380]  и вы таким образом можете скастить...
[01:37:39.380 --> 01:37:41.380]  А, правильно,
[01:37:41.380 --> 01:37:43.380]  это хороший вопрос.
[01:37:43.380 --> 01:37:45.380]  Про статик каст при ромбовинном наследовании я ничего не говорил.
[01:37:45.380 --> 01:37:47.380]  Ну, статик каст к маме
[01:37:47.380 --> 01:37:49.380]  сработает корректно.
[01:37:49.380 --> 01:37:51.380]  Просто он скастует вот к этой штуке.
[01:37:51.380 --> 01:37:53.380]  А как работают касты при
[01:37:53.380 --> 01:37:55.380]  множестве наследований?
[01:37:55.380 --> 01:37:57.380]  То есть, если я возьму сына
[01:37:57.380 --> 01:37:59.380]  и попробую написать вот в этой ситуации
[01:37:59.380 --> 01:38:01.380]  грейни амперсант
[01:38:01.380 --> 01:38:03.380]  g равно s,
[01:38:03.380 --> 01:38:05.380]  то что произойдет?
[01:38:05.380 --> 01:38:07.380]  А тоже будет
[01:38:07.380 --> 01:38:09.380]  ce,
[01:38:09.380 --> 01:38:11.380]  и ce будет
[01:38:11.380 --> 01:38:13.380]  по причине
[01:38:13.380 --> 01:38:15.380]  ambiguous cast,
[01:38:15.380 --> 01:38:17.380]  неоднозначное приведение типов.
[01:38:17.380 --> 01:38:19.380]  То есть, получается,
[01:38:19.380 --> 01:38:21.380]  из бабушек, которые напрямую,
[01:38:21.380 --> 01:38:23.380]  мы можем брать только переменные?
[01:38:23.380 --> 01:38:25.380]  Ничего мы не можем из нее брать.
[01:38:25.380 --> 01:38:27.380]  Почему переменные не можем?
[01:38:27.380 --> 01:38:29.380]  Ну, напиши, как ты их возьмешь.
[01:38:29.380 --> 01:38:31.380]  Ну, допустим,
[01:38:31.380 --> 01:38:33.380]  в грейне жалово g, а...
[01:38:33.380 --> 01:38:35.380]  s точка g.
[01:38:35.380 --> 01:38:37.380]  Ну, если мы будем брать
[01:38:37.380 --> 01:38:39.380]  только переменные,
[01:38:39.380 --> 01:38:41.380]  то мы будем брать
[01:38:41.380 --> 01:38:43.380]  неоднозначное приведение типов.
[01:38:43.380 --> 01:38:45.380]  То есть, если мы будем брать
[01:38:45.380 --> 01:38:47.380]  с точка g.
[01:38:47.380 --> 01:38:49.380]  Какое g? Через маму или напрямую?
[01:38:49.380 --> 01:38:51.380]  Ну да, плохо.
[01:38:51.380 --> 01:38:53.380]  Тогда какой в этом смысл?
[01:38:53.380 --> 01:38:55.380]  Никакого. Я не знаю, зачем
[01:38:55.380 --> 01:38:57.380]  это так можно делать, но
[01:38:57.380 --> 01:38:59.380]  так можно писать, но я вам просто объясняю,
[01:38:59.380 --> 01:39:01.380]  что будет, если так написать.
[01:39:01.380 --> 01:39:03.380]  Эта ситуация
[01:39:03.380 --> 01:39:05.380]  называется inaccessible base class.
[01:39:05.380 --> 01:39:07.380]  Когда вы унаследовали
[01:39:07.380 --> 01:39:09.380]  предка,
[01:39:09.380 --> 01:39:11.380]  к полям и методам которого
[01:39:11.380 --> 01:39:13.380]  никак не можете достучаться.
[01:39:13.380 --> 01:39:15.380]  Кроме как через reinterpret cast.
[01:39:17.380 --> 01:39:19.380]  Это, короче, вот такая вот
[01:39:19.380 --> 01:39:21.380]  проблема.
[01:39:21.380 --> 01:39:23.380]  Так вот, если вы делаете
[01:39:23.380 --> 01:39:25.380]  static cast от сына к бабушке,
[01:39:25.380 --> 01:39:27.380]  что здесь, хоть неявный
[01:39:27.380 --> 01:39:29.380]  cast, хоть static cast,
[01:39:29.380 --> 01:39:31.380]  даже если вы вот так делаете,
[01:39:31.380 --> 01:39:33.380]  хоть поинтеру, вы
[01:39:33.380 --> 01:39:35.380]  получаете одну и ту же ошибку
[01:39:35.380 --> 01:39:37.380]  ambiguous cast.
[01:39:37.380 --> 01:39:39.380]  Ну, как это называется, ambiguous
[01:39:39.380 --> 01:39:41.380]  господи.
[01:39:41.380 --> 01:39:43.380]  Неоднозначный предок.
[01:39:43.380 --> 01:39:45.380]  Ну нет, не ancestor он
[01:39:45.380 --> 01:39:47.380]  пишет, какое-то другое слово.
[01:39:47.380 --> 01:39:49.380]  Ambiguous parent, ambiguous base.
[01:39:49.380 --> 01:39:51.380]  Вот, ambiguous base он говорит.
[01:39:51.380 --> 01:39:53.380]  Неоднозначная база.
[01:39:55.380 --> 01:39:57.380]  Неоднозначная база.
[01:39:57.380 --> 01:39:59.380]  Ambiguous base, да.
[01:39:59.380 --> 01:40:01.380]  Вот.
[01:40:01.380 --> 01:40:03.380]  Ну, проверьте.
[01:40:03.380 --> 01:40:05.380]  И здесь вы тоже не сможете скастывать
[01:40:05.380 --> 01:40:07.380]  сына к бабушке напрямую.
[01:40:07.380 --> 01:40:09.380]  Но вы можете
[01:40:09.380 --> 01:40:11.380]  скастовать сначала к маме, потом к бабушке.
[01:40:11.380 --> 01:40:13.380]  То есть вы сначала
[01:40:13.380 --> 01:40:15.380]  заводите ссылку на маму
[01:40:15.380 --> 01:40:17.380]  и говорите, мам
[01:40:17.380 --> 01:40:19.380]  амперсант M равно S.
[01:40:19.380 --> 01:40:21.380]  А потом гренни амперсант G равно M.
[01:40:21.380 --> 01:40:23.380]  Вот так получается.
[01:40:23.380 --> 01:40:25.380]  Это нормально работает.
[01:40:33.380 --> 01:40:35.380]  Причем, если вы даже напишите static
[01:40:35.380 --> 01:40:37.380]  cast к мам
[01:40:37.380 --> 01:40:39.380]  2.2.grenni
[01:40:39.380 --> 01:40:41.380]  амперсант, это все равно
[01:40:41.380 --> 01:40:43.380]  будет неоднозначность.
[01:40:43.380 --> 01:40:45.380]  Потому что название типа мам 2.2.grenni
[01:40:45.380 --> 01:40:47.380]  это все же самое,
[01:40:47.380 --> 01:40:49.380]  что и название типа просто
[01:40:49.380 --> 01:40:51.380]  гренни. И кастовать к нему это все равно,
[01:40:51.380 --> 01:40:53.380]  что кастовать просто гренни, а это неоднозначность.
[01:40:53.380 --> 01:40:55.380]  Да.
[01:40:55.380 --> 01:40:57.380]  Указатель на мам
[01:40:57.380 --> 01:40:59.380]  через S.
[01:40:59.380 --> 01:41:01.380]  Чего? Какой указатель на маму?
[01:41:01.380 --> 01:41:03.380]  А нет, указатель
[01:41:03.380 --> 01:41:05.380]  на гренни через S.
[01:41:05.380 --> 01:41:07.380]  Где? Здесь?
[01:41:07.380 --> 01:41:09.380]  Здесь.
[01:41:09.380 --> 01:41:11.380]  Это ссылка на гренни.
[01:41:11.380 --> 01:41:13.380]  Для вот этой картинки
[01:41:13.380 --> 01:41:15.380]  мы написали красный код.
[01:41:15.380 --> 01:41:17.380]  Я бы получил ссылку
[01:41:17.380 --> 01:41:19.380]  на ту гренни, которая через маму.
[01:41:19.380 --> 01:41:21.380]  Это если мы написали S.2.2.grenni
[01:41:21.380 --> 01:41:23.380]  Чего? Я вот так
[01:41:23.380 --> 01:41:25.380]  написал и получил ссылку на ту гренни,
[01:41:25.380 --> 01:41:27.380]  которая через маму.
[01:41:27.380 --> 01:41:29.380]  Можно ли было получить ссылку на гренни,
[01:41:29.380 --> 01:41:31.380]  присвоив S.2.2.grenni?
[01:41:31.380 --> 01:41:33.380]  Что?
[01:41:33.380 --> 01:41:35.380]  Я не понимаю, что ты хочешь написать.
[01:41:35.380 --> 01:41:37.380]  Выйди напиши, я не понимаю.
[01:41:41.380 --> 01:41:43.380]  Вот здесь написав вместо M
[01:41:43.380 --> 01:41:45.380]  S.2.2.grenni или нет?
[01:41:45.380 --> 01:41:47.380]  S это объект,
[01:41:47.380 --> 01:41:49.380]  у него нельзя брать 2.2.grenni,
[01:41:49.380 --> 01:41:51.380]  можно только у типов брать 2.2.grenni.
[01:41:53.380 --> 01:41:55.380]  Что такое
[01:41:55.380 --> 01:41:57.380]  S.2.2.grenni берется
[01:41:57.380 --> 01:41:59.380]  либо у namespace, либо у названия класса,
[01:41:59.380 --> 01:42:01.380]  а S это объект, как у него 2.2.8grenni.
[01:42:03.380 --> 01:42:05.380]  Что?
[01:42:05.380 --> 01:42:07.380]  У нас есть допустим S,
[01:42:07.380 --> 01:42:09.380]  который от мамы D,
[01:42:09.380 --> 01:42:11.380]  и мамы D это не от гренни.
[01:42:11.380 --> 01:42:13.380]  Если мы захотим сделать grenni равно S,
[01:42:13.380 --> 01:42:15.380]  то это тоже объект.
[01:42:15.380 --> 01:42:17.380]  У нас есть S, который от мамы D,
[01:42:17.380 --> 01:42:19.380]  и мамы D это не от гренни.
[01:42:19.380 --> 01:42:21.380]  Я хочу сделать
[01:42:21.380 --> 01:42:23.380]  grenni равно S.
[01:42:23.380 --> 01:42:25.380]  Мы есть элементы типа grenni.
[01:42:25.380 --> 01:42:27.380]  Grenni G равно S?
[01:42:27.380 --> 01:42:29.380]  Да.
[01:42:29.380 --> 01:42:31.380]  Ну да, конечно, непонятно,
[01:42:31.380 --> 01:42:33.380]  из какой гренни
[01:42:33.380 --> 01:42:35.380]  создавать эту гренни?
[01:42:35.380 --> 01:42:37.380]  Их же две там.
[01:42:37.380 --> 01:42:39.380]  Ну, сделать S.mam
[01:42:39.380 --> 01:42:41.380]  то можно.
[01:42:41.380 --> 01:42:43.380]  Что такое mam это не поле,
[01:42:43.380 --> 01:42:45.380]  нельзя через точку к нему обращаться.
[01:42:47.380 --> 01:42:49.380]  Подожди, mam это
[01:42:49.380 --> 01:42:51.380]  ну как, ты не можешь
[01:42:51.380 --> 01:42:53.380]  написать не S.2.2.mam,
[01:42:53.380 --> 01:42:55.380]  не S.mam, потому что
[01:42:55.380 --> 01:42:57.380]  это не законченная
[01:42:57.380 --> 01:42:59.380]  ну, это вообще бессмысленная фраза,
[01:42:59.380 --> 01:43:01.380]  что S это не область видимости, чтобы
[01:43:01.380 --> 01:43:03.380]  не и 2.2. делать.
[01:43:03.380 --> 01:43:05.380]  А точка mam, это как будто
[01:43:05.380 --> 01:43:07.380]  mam это поле какое-то, но mam это никого не поле,
[01:43:07.380 --> 01:43:09.380]  это название внутреннего типа.
[01:43:13.380 --> 01:43:15.380]  Нет,
[01:43:15.380 --> 01:43:17.380]  ты можешь здесь написать static cast
[01:43:17.380 --> 01:43:19.380]  к мамам персант, ну то есть
[01:43:19.380 --> 01:43:21.380]  ты можешь написать grenni G
[01:43:21.380 --> 01:43:23.380]  равно, а тут написать static cast
[01:43:23.380 --> 01:43:25.380]  к мамам персант от S.
[01:43:25.380 --> 01:43:27.380]  И так ты вот этот шаг
[01:43:27.380 --> 01:43:29.380]  запрячешь в одно действие.
[01:43:29.380 --> 01:43:31.380]  Так это сработает.
[01:43:31.380 --> 01:43:33.380]  Потому что это приведет к тому,
[01:43:33.380 --> 01:43:35.380]  что он ссылку на mam сделает,
[01:43:35.380 --> 01:43:37.380]  ну и тем самым поймет, что однозначно
[01:43:37.380 --> 01:43:39.380]  grenni уже.
[01:43:39.380 --> 01:43:41.380]  А дальше он сделает неярные...
[01:43:41.380 --> 01:43:43.380]  Ну, дальше он сконструирует
[01:43:43.380 --> 01:43:45.380]  grenni из той части mam, которая
[01:43:45.380 --> 01:43:47.380]  grenni.
[01:43:47.380 --> 01:43:49.380]  Когда мы так делаем наши...
[01:43:49.380 --> 01:43:51.380]  Как делаем?
[01:43:51.380 --> 01:43:53.380]  Вот так.
[01:43:53.380 --> 01:43:55.380]  Вот так.
[01:43:57.380 --> 01:43:59.380]  Вот так делаем.
[01:43:59.380 --> 01:44:01.380]  Да, вот так.
[01:44:01.380 --> 01:44:03.380]  Руки оторвать надо вам, если вы так делаете.
[01:44:05.380 --> 01:44:07.380]  У нас же F, которая у grenni,
[01:44:07.380 --> 01:44:09.380]  она в более локальной области лежит,
[01:44:09.380 --> 01:44:11.380]  разве нет? Чего, чего?
[01:44:11.380 --> 01:44:13.380]  F, которая у grenni, она лежит в более локальной области.
[01:44:13.380 --> 01:44:15.380]  У какой grenni?
[01:44:15.380 --> 01:44:17.380]  У нашей, которая
[01:44:17.380 --> 01:44:19.380]  ближе к нам.
[01:44:19.380 --> 01:44:21.380]  Ну, которая через mam, она явно дальше...
[01:44:21.380 --> 01:44:23.380]  Нет, нет.
[01:44:23.380 --> 01:44:25.380]  У нас две grenni, они обе одинаково
[01:44:25.380 --> 01:44:27.380]  хороши. Ну, как вам сказать?
[01:44:27.380 --> 01:44:29.380]  Потому что так
[01:44:29.380 --> 01:44:31.380]  решил комитет по стандартизации. Ничего не могу
[01:44:31.380 --> 01:44:33.380]  вам сказать.
[01:44:33.380 --> 01:44:35.380]  Слово grenni приводит к неоднозначности.
[01:44:35.380 --> 01:44:37.380]  Если бы S точка grenni
[01:44:37.380 --> 01:44:39.380]  было однозначным, то это означало бы, что у вас
[01:44:39.380 --> 01:44:41.380]  и касс не работает. Ну, короче,
[01:44:41.380 --> 01:44:43.380]  нет, это неоднозначность.
[01:44:43.380 --> 01:44:45.380]  Наши поля более приоритетны, чем поля
[01:44:45.380 --> 01:44:47.380]  наших родителей. Да, но
[01:44:47.380 --> 01:44:49.380]  между родителями там уже нет разницы.
[01:44:51.380 --> 01:44:53.380]  Вот.
[01:44:55.380 --> 01:44:57.380]  Так.
[01:44:57.380 --> 01:44:59.380]  Ну, да,
[01:44:59.380 --> 01:45:01.380]  это неоднозначность.
[01:45:03.380 --> 01:45:05.380]  И при приведении типов
[01:45:05.380 --> 01:45:07.380]  неоднозначность.
[01:45:07.380 --> 01:45:09.380]  Да.
[01:45:09.380 --> 01:45:11.380]  И если
[01:45:11.380 --> 01:45:13.380]  вы вниз кастите
[01:45:13.380 --> 01:45:15.380]  от grenni к сыну,
[01:45:15.380 --> 01:45:17.380]  это тоже неоднозначность.
[01:45:17.380 --> 01:45:19.380]  Потому что непонятно, это вы кастите, как будто
[01:45:19.380 --> 01:45:21.380]  вы были второй
[01:45:21.380 --> 01:45:23.380]  или первой его бабушкой.
[01:45:25.380 --> 01:45:27.380]  Но, конечно же, reinterpret cast
[01:45:27.380 --> 01:45:29.380]  ему на всё наплевать. Вот
[01:45:29.380 --> 01:45:31.380]  если мы reinterpret castом будем
[01:45:31.380 --> 01:45:33.380]  кастить grenni к маме, он ничего не сдвигает
[01:45:33.380 --> 01:45:35.380]  просто. То есть, grenni к сыну кастовать
[01:45:35.380 --> 01:45:37.380]  не проблема. Просто будем считать, что вот отсюда
[01:45:37.380 --> 01:45:39.380]  начинается сын. Или будем
[01:45:39.380 --> 01:45:41.380]  считать, что вот отсюда начинается сын, просто залезем.
[01:45:41.380 --> 01:45:43.380]  Тут будет мама, потом папа, потом сын.
[01:45:43.380 --> 01:45:45.380]  Ну, короче, не проблема.
[01:45:45.380 --> 01:45:47.380]  Вот.
[01:45:49.380 --> 01:45:51.380]  Наследоваться несколько раз напрямую
[01:45:51.380 --> 01:45:53.380]  от одного и того же класса нельзя. То есть, прям написать
[01:45:53.380 --> 01:45:55.380]  public mother, ещё раз public mother, нельзя.
[01:45:55.380 --> 01:45:57.380]  Но вот такими вот
[01:45:57.380 --> 01:45:59.380]  хитрыми, хитросплетениями
[01:45:59.380 --> 01:46:01.380]  можно, значит, создать
[01:46:01.380 --> 01:46:03.380]  сложный граф наследования.
[01:46:03.380 --> 01:46:05.380]  И ещё
[01:46:05.380 --> 01:46:07.380]  static cast не умеет кастовать
[01:46:07.380 --> 01:46:09.380]  ну вот
[01:46:09.380 --> 01:46:11.380]  side cast так называемый. То есть
[01:46:11.380 --> 01:46:13.380]  нельзя сделать каст от мамы
[01:46:13.380 --> 01:46:15.380]  к папе static castом.
[01:46:15.380 --> 01:46:17.380]  Он не
[01:46:17.380 --> 01:46:19.380]  поймёт. Ну вот, можно кастовать static castом
[01:46:19.380 --> 01:46:21.380]  только вниз и вверх по иерархии.
[01:46:21.380 --> 01:46:23.380]  И то, если это однозначно, если там
[01:46:23.380 --> 01:46:25.380]  всё публично. А от мамы к
[01:46:25.380 --> 01:46:27.380]  папе нельзя сделать static cast.
[01:46:27.380 --> 01:46:29.380]  Ну да, это поэтому
[01:46:29.380 --> 01:46:31.380]  и нельзя, потому что, ну, это теоретически
[01:46:31.380 --> 01:46:33.380]  непонятно как, через что. То есть
[01:46:33.380 --> 01:46:35.380]  может быть, у них есть разные
[01:46:35.380 --> 01:46:37.380]  общие пред, разные общие потомки
[01:46:37.380 --> 01:46:39.380]  и через кого.
[01:46:39.380 --> 01:46:41.380]  А если у нас есть стрелочка из мам в дед, то у нас
[01:46:41.380 --> 01:46:43.380]  снова всё вот это плохо и мы можем пользоваться только
[01:46:43.380 --> 01:46:45.380]  reinterpret, кастами. Стрелочка из мам в дед
[01:46:45.380 --> 01:46:47.380]  это как?
[01:46:47.380 --> 01:46:49.380]  В смысле, ещё вот так кто-то из кого-то
[01:46:49.380 --> 01:46:51.380]  унаследовал?
[01:46:51.380 --> 01:46:53.380]  Господи
[01:46:57.380 --> 01:46:59.380]  Авраам родил Исаака, Исаак родил
[01:46:59.380 --> 01:47:01.380]  Акова.
[01:47:01.380 --> 01:47:03.380]  Ну,
[01:47:03.380 --> 01:47:05.380]  что за вопрос был?
[01:47:05.380 --> 01:47:07.380]  Мы можем пользоваться
[01:47:07.380 --> 01:47:09.380]  только reinterpret, кастами.
[01:47:09.380 --> 01:47:11.380]  Это очень плохо.
[01:47:11.380 --> 01:47:13.380]  Я не знаю, чё.
[01:47:13.380 --> 01:47:15.380]  Ну, короче, я всё сказал, вы всё поняли.
[01:47:15.380 --> 01:47:17.380]  В общем, если, да.
[01:47:17.380 --> 01:47:19.380]  Соответственно, ну да,
[01:47:19.380 --> 01:47:21.380]  если наследование приватное, то я уже объяснял, это никак
[01:47:21.380 --> 01:47:23.380]  не влияет, не однозначно сохраняется,
[01:47:23.380 --> 01:47:25.380]  просто у вас ещё иногда доступ пропадает.
[01:47:29.380 --> 01:47:31.380]  Что?
[01:47:31.380 --> 01:47:33.380]  Из мам в дед нельзя кастовать static cast.
[01:47:33.380 --> 01:47:35.380]  Да, что?
[01:47:35.380 --> 01:47:37.380]  Нельзя просто, потому что это несовместимые типы
[01:47:37.380 --> 01:47:39.380]  с точки зрения static cast. Ни один не является
[01:47:39.380 --> 01:47:41.380]  предком другого.
[01:47:41.380 --> 01:47:43.380]  Так.
[01:47:45.380 --> 01:47:47.380]  Чё, есть ещё вопросы?
[01:47:47.380 --> 01:47:49.380]  Если мы определим конструктор,
[01:47:49.380 --> 01:47:51.380]  допустим, в деде от мамы,
[01:47:51.380 --> 01:47:53.380]  то он, то сможем, да.
[01:47:53.380 --> 01:47:55.380]  То static cast сработает. Да, сработает.
[01:47:55.380 --> 01:47:57.380]  Только к объекту,
[01:47:57.380 --> 01:47:59.380]  а не к ссылке и не к указателю.
[01:48:01.380 --> 01:48:03.380]  Но если мы в деде определим
[01:48:03.380 --> 01:48:05.380]  оператор каста к мамам персант,
[01:48:05.380 --> 01:48:07.380]  то будет и static cast к ссылке работать.
[01:48:07.380 --> 01:48:09.380]  Не забывайте,
[01:48:09.380 --> 01:48:11.380]  что мы всегда можем определить в своих классах
[01:48:11.380 --> 01:48:13.380]  явные касты к
[01:48:13.380 --> 01:48:15.380]  любым указателям и ссылкам
[01:48:15.380 --> 01:48:17.380]  и другим объектам. То есть,
[01:48:17.380 --> 01:48:19.380]  мне ничто не мешает в
[01:48:19.380 --> 01:48:21.380]  да, мне ничто не мешает в деде
[01:48:21.380 --> 01:48:23.380]  папе определить оператор
[01:48:23.380 --> 01:48:25.380]  к мамам персант, который
[01:48:25.380 --> 01:48:27.380]  будет разрешать static cast
[01:48:27.380 --> 01:48:29.380]  и кастовать дед к ссылке на мам.
[01:48:31.380 --> 01:48:33.380]  Сейчас. Как? Что?
[01:48:33.380 --> 01:48:35.380]  Как мы такое?
[01:48:35.380 --> 01:48:37.380]  Как мы такое?
[01:48:37.380 --> 01:48:39.380]  Там же нужно будет
[01:48:39.380 --> 01:48:41.380]  возвращать эту ссылку.
[01:48:41.380 --> 01:48:43.380]  Ну, что-нибудь вернем,
[01:48:43.380 --> 01:48:45.380]  господи, проблемы что ли. Найдем, что вернуть.
[01:48:47.380 --> 01:48:49.380]  Создадим статический дед и вернем
[01:48:49.380 --> 01:48:51.380]  ссылку на него. Проблем-то.
[01:48:51.380 --> 01:48:53.380]  Значит, статический дед?
[01:48:53.380 --> 01:48:55.380]  Статический дед, статическую папу
[01:48:55.380 --> 01:48:57.380]  создадим и вернем ссылку на него.
[01:48:57.380 --> 01:48:59.380]  Он задастся в статический память?
[01:48:59.380 --> 01:49:01.380]  Конечно, он же статический.
[01:49:01.380 --> 01:49:03.380]  У нас никак не получится
[01:49:03.380 --> 01:49:05.380]  циклическое наследование?
[01:49:05.380 --> 01:49:07.380]  Циклическое наследование нельзя делать.
[01:49:07.380 --> 01:49:09.380]  Если компилятор обнаруживает циклическое наследование,
[01:49:09.380 --> 01:49:11.380]  это СЕ.
[01:49:11.380 --> 01:49:13.380]  Ну, это понятно просто не может
[01:49:13.380 --> 01:49:15.380]  ему никак не сконструировать.
[01:49:15.380 --> 01:49:17.380]  Он замкнется в цикл, да.
[01:49:17.380 --> 01:49:19.380]  А, то есть статически так можно
[01:49:19.380 --> 01:49:21.380]  сделать, чтобы он
[01:49:21.380 --> 01:49:23.380]  его нашел?
[01:49:23.380 --> 01:49:25.380]  Ну да, вы forward declaration делаете,
[01:49:25.380 --> 01:49:27.380]  class son, потом class mother public son, а потом
[01:49:27.380 --> 01:49:29.380]  вроде можете, но
[01:49:29.380 --> 01:49:31.380]  это не во...
[01:49:31.380 --> 01:49:33.380]  в общем, СЕ, короче.
[01:49:33.380 --> 01:49:35.380]  Это просто объявление?
[01:49:35.380 --> 01:49:37.380]  Да, это объявление до определения.
[01:49:37.380 --> 01:49:39.380]  Как объявить структуру? Просто написать...
[01:49:39.380 --> 01:49:41.380]  Struct test. запятой.
[01:49:41.380 --> 01:49:43.380]  Так, ну и последний пункт в этой теме,
[01:49:43.380 --> 01:49:45.380]  который вообще-то мы
[01:49:45.380 --> 01:49:47.380]  на предыдущей паре должны были.
[01:49:47.380 --> 01:49:49.380]  Ну ладно, господи.
[01:49:49.380 --> 01:49:51.380]  Так, значит, последний пункт, это самая замечательная вещь,
[01:49:51.380 --> 01:49:53.380]  которая называется
[01:49:53.380 --> 01:49:55.380]  virtual inheritance.
[01:49:55.380 --> 01:49:57.380]  Знаете, есть такая песня virtual
[01:49:57.380 --> 01:49:59.380]  insanity.
[01:49:59.380 --> 01:50:01.380]  Вот у нас сейчас будет virtual inheritance.
[01:50:03.380 --> 01:50:05.380]  Есть что-то общее?
[01:50:05.380 --> 01:50:07.380]  Да.
[01:50:09.380 --> 01:50:11.380]  Значит, виртуальное наследование.
[01:50:11.380 --> 01:50:13.380]  Я специально не стер
[01:50:13.380 --> 01:50:15.380]  вот эту картинку.
[01:50:15.380 --> 01:50:17.380]  Потому что виртуальное наследование,
[01:50:17.380 --> 01:50:19.380]  только, пожалуйста, не путайте его с виртуальными
[01:50:19.380 --> 01:50:21.380]  функциями, они имеют мало общего.
[01:50:21.380 --> 01:50:23.380]  Если кто-то из вас знает о том, что такое виртуальная функция,
[01:50:23.380 --> 01:50:25.380]  вы молодец, но
[01:50:25.380 --> 01:50:27.380]  это сейчас знаний вам не пригодится.
[01:50:27.380 --> 01:50:29.380]  Потому что виртуальное наследование
[01:50:29.380 --> 01:50:31.380]  это совсем про другое.
[01:50:31.380 --> 01:50:33.380]  Не путайте их, пожалуйста.
[01:50:33.380 --> 01:50:35.380]  Виртуальные функции – это совершенно другой механизм.
[01:50:35.380 --> 01:50:37.380]  А у них есть кое-что общее,
[01:50:37.380 --> 01:50:39.380]  но мало общего.
[01:50:39.380 --> 01:50:41.380]  Виртуальное наследование – это следующая штука.
[01:50:41.380 --> 01:50:43.380]  Это когда вы
[01:50:43.380 --> 01:50:45.380]  объявляете
[01:50:47.380 --> 01:50:49.380]  какого-то наследника
[01:50:49.380 --> 01:50:51.380]  общим для всей иерархии.
[01:50:51.380 --> 01:50:53.380]  И если он у вас повторяется, то он не дублируется.
[01:50:53.380 --> 01:50:55.380]  Ну вот,
[01:50:55.380 --> 01:50:57.380]  например, вот как раз в этой ситуации
[01:50:57.380 --> 01:50:59.380]  я могу сделать Гренни виртуальным наследником
[01:50:59.380 --> 01:51:01.380]  мамы и папы,
[01:51:01.380 --> 01:51:03.380]  и тогда эта Гренни будет общая на всех.
[01:51:03.380 --> 01:51:05.380]  Вот я буду
[01:51:05.380 --> 01:51:07.380]  виртуальное наследование пунктиром рисовать.
[01:51:07.380 --> 01:51:09.380]  Вот если я
[01:51:09.380 --> 01:51:11.380]  сделаю виртуальную
[01:51:11.380 --> 01:51:13.380]  Гренни,
[01:51:15.380 --> 01:51:17.380]  как это пишется?
[01:51:17.380 --> 01:51:19.380]  Я говорю
[01:51:19.380 --> 01:51:21.380]  StructMum
[01:51:23.380 --> 01:51:25.380]  и пишу
[01:51:25.380 --> 01:51:27.380]  public virtual
[01:51:27.380 --> 01:51:29.380]  public
[01:51:29.380 --> 01:51:31.380]  virtual
[01:51:31.380 --> 01:51:33.380]  Гренни.
[01:51:35.380 --> 01:51:37.380]  Ну и то же самое
[01:51:37.380 --> 01:51:39.380]  с папой.
[01:51:39.380 --> 01:51:41.380]  А сыну я просто пишу
[01:51:41.380 --> 01:51:43.380]  public mum, public dead.
[01:51:43.380 --> 01:51:45.380]  Я эту бабушку
[01:51:45.380 --> 01:51:47.380]  сделал виртуальной.
[01:51:47.380 --> 01:51:49.380]  К чему это привело?
[01:51:49.380 --> 01:51:51.380]  Это привело к тому, что эта бабушка теперь общая.
[01:51:51.380 --> 01:51:53.380]  И теперь уже
[01:51:53.380 --> 01:51:55.380]  это
[01:51:55.380 --> 01:51:57.380]  не дублируется
[01:51:57.380 --> 01:51:59.380]  поля в сыне.
[01:51:59.380 --> 01:52:01.380]  Теперь если я напишу
[01:52:01.380 --> 01:52:03.380]  s.g
[01:52:03.380 --> 01:52:05.380]  или s.f из бабушки,
[01:52:05.380 --> 01:52:07.380]  это работает.
[01:52:07.380 --> 01:52:09.380]  Да, я сделал виртуальной
[01:52:09.380 --> 01:52:11.380]  бабушку и здесь, и тут.
[01:52:11.380 --> 01:52:13.380]  И теперь это уже
[01:52:13.380 --> 01:52:15.380]  неоднозначность, то есть s.g
[01:52:15.380 --> 01:52:17.380]  однозначный вызов, и s.f
[01:52:17.380 --> 01:52:19.380]  однозначный вызов.
[01:52:19.380 --> 01:52:21.380]  И статик каст от сына к бабушке
[01:52:21.380 --> 01:52:23.380]  теперь однозначно работает.
[01:52:23.380 --> 01:52:25.380]  Остается
[01:52:25.380 --> 01:52:27.380]  только один вопрос. Как
[01:52:27.380 --> 01:52:29.380]  это возможно? Что же происходит
[01:52:29.380 --> 01:52:31.380]  на самом деле в этот момент?
[01:52:31.380 --> 01:52:33.380]  Как компилятор реализовывает это?
[01:52:33.380 --> 01:52:35.380]  Сначала все кардивальное, видимо,
[01:52:35.380 --> 01:52:37.380]  а потом остальное.
[01:52:37.380 --> 01:52:39.380]  Значит,
[01:52:39.380 --> 01:52:41.380]  когда у нас есть виртуальное наследование,
[01:52:41.380 --> 01:52:43.380]  компилятор объединяет все экземпляры
[01:52:43.380 --> 01:52:45.380]  вот этого virtual класса
[01:52:45.380 --> 01:52:47.380]  в один и кладет его
[01:52:47.380 --> 01:52:49.380]  где-то отдельно. На самом деле,
[01:52:49.380 --> 01:52:51.380]  если наследование виртуальное,
[01:52:51.380 --> 01:52:53.380]  то в памяти выглядит это следующим образом.
[01:52:53.380 --> 01:52:55.380]  Сначала лежит
[01:52:55.380 --> 01:52:57.380]  мама, потом лежит
[01:52:57.380 --> 01:52:59.380]  папа, потом
[01:52:59.380 --> 01:53:01.380]  над ними надстроен сын, а справа
[01:53:01.380 --> 01:53:03.380]  от них отдельно лежит бабушка.
[01:53:07.380 --> 01:53:09.380]  А в маме бабушка уже не лежит.
[01:53:09.380 --> 01:53:11.380]  А в маме бабушка уже не лежит.
[01:53:11.380 --> 01:53:13.380]  Вот эта бабушка, она в самом
[01:53:13.380 --> 01:53:15.380]  конце общая для них.
[01:53:15.380 --> 01:53:17.380]  Если мы создали
[01:53:17.380 --> 01:53:19.380]  объект мам,
[01:53:19.380 --> 01:53:21.380]  то там сначала
[01:53:21.380 --> 01:53:23.380]  бабушка тоже в конце будет лежать.
[01:53:25.380 --> 01:53:27.380]  Да, ну я не знаю. Возможно, компилятор
[01:53:27.380 --> 01:53:29.380]  это соптимизирует и не будет.
[01:53:29.380 --> 01:53:31.380]  Но я вам рассказываю, как лежит
[01:53:31.380 --> 01:53:33.380]  вот в такой ситуации.
[01:53:35.380 --> 01:53:37.380]  Значит, не будет класть ее в конец, если можно
[01:53:37.380 --> 01:53:39.380]  не класть. Зачем, если она все равно одна?
[01:53:41.380 --> 01:53:43.380]  Зачем переусложнять, если можно не усложнять?
[01:53:43.380 --> 01:53:45.380]  Ну вот если бабушка действительно
[01:53:45.380 --> 01:53:47.380]  одна на двоих, то ее
[01:53:47.380 --> 01:53:49.380]  компилятор, ну по крайней мере GSC
[01:53:49.380 --> 01:53:51.380]  я тестировал, кладет в конец.
[01:53:53.380 --> 01:53:55.380]  И как же тогда конструктор работает?
[01:53:55.380 --> 01:53:57.380]  Тут есть проблема
[01:53:57.380 --> 01:53:59.380]  и посерьезней.
[01:53:59.380 --> 01:54:01.380]  Как
[01:54:01.380 --> 01:54:03.380]  вообще
[01:54:03.380 --> 01:54:05.380]  мама узнает, где
[01:54:05.380 --> 01:54:07.380]  ее бабушка?
[01:54:13.380 --> 01:54:15.380]  Вот представьте, что вы реализовываете
[01:54:15.380 --> 01:54:17.380]  какой-то метод мамы. Этот метод обращается
[01:54:17.380 --> 01:54:19.380]  к полям бабушки, которые ее предок.
[01:54:19.380 --> 01:54:21.380]  А как мама
[01:54:21.380 --> 01:54:23.380]  понимает, где эти поля памяти
[01:54:23.380 --> 01:54:25.380]  относительно нее самой?
[01:54:27.380 --> 01:54:29.380]  Что?
[01:54:33.380 --> 01:54:35.380]  Если мы в маме, мы вообще не знаем, что от нас
[01:54:35.380 --> 01:54:37.380]  кто-то унаследовался. У нас от мамы
[01:54:37.380 --> 01:54:39.380]  может быть очень много других наследников, может
[01:54:39.380 --> 01:54:41.380]  быть первый папа, другой
[01:54:41.380 --> 01:54:43.380]  еще кто-то у мамы был. И они
[01:54:43.380 --> 01:54:45.380]  все, значит, породили
[01:54:45.380 --> 01:54:47.380]  разных сыновей. И вот эта бабушка,
[01:54:47.380 --> 01:54:49.380]  она для них для всех, ну
[01:54:49.380 --> 01:54:51.380]  у них там разные иерархии. И в одном случае
[01:54:51.380 --> 01:54:53.380]  бабушка от мамы вот на таком расстоянии,
[01:54:53.380 --> 01:54:55.380]  и в другом случае бабушка от мамы на другом расстоянии.
[01:54:55.380 --> 01:54:57.380]  Как мама в своем методе
[01:54:57.380 --> 01:54:59.380]  понимает сейчас бабушка моя
[01:54:59.380 --> 01:55:01.380]  на каком от меня расстоянии, чтобы
[01:55:01.380 --> 01:55:03.380]  туда поля модифицировать?
[01:55:05.380 --> 01:55:07.380]  Это значит, что маме нужно хранить
[01:55:07.380 --> 01:55:09.380]  на самом деле дополнительный указатель
[01:55:09.380 --> 01:55:11.380]  на то, где лежит ее
[01:55:11.380 --> 01:55:13.380]  бабушка сейчас, если бабушка виртуальная.
[01:55:15.380 --> 01:55:17.380]  Откуда мама знает
[01:55:17.380 --> 01:55:19.380]  как далеко бабушка лежит от нее?
[01:55:21.380 --> 01:55:23.380]  Бабушка
[01:55:23.380 --> 01:55:25.380]  общая для мамы и для папы.
[01:55:25.380 --> 01:55:27.380]  Вот представьте, что у меня есть вот это,
[01:55:27.380 --> 01:55:29.380]  а еще кроме этого есть
[01:55:29.380 --> 01:55:31.380]  Д2, а еще
[01:55:31.380 --> 01:55:33.380]  я не знаю, медведь
[01:55:33.380 --> 01:55:35.380]  и они все тоже
[01:55:35.380 --> 01:55:37.380]  виртуально.
[01:55:37.380 --> 01:55:39.380]  Ну я не знаю.
[01:55:51.380 --> 01:55:53.380]  Ну представьте, что еще есть дочка,
[01:55:53.380 --> 01:55:55.380]  у которой еще есть
[01:55:55.380 --> 01:55:57.380]  другие родители,
[01:55:57.380 --> 01:55:59.380]  и вот она тоже унаследована
[01:55:59.380 --> 01:56:01.380]  от этой мамы,
[01:56:01.380 --> 01:56:03.380]  а все они унаследованы
[01:56:03.380 --> 01:56:05.380]  от вот этой бабушки виртуальной.
[01:56:07.380 --> 01:56:09.380]  Ну давайте, не знаю,
[01:56:09.380 --> 01:56:11.380]  здесь будет не папа, а какой-нибудь, не знаю,
[01:56:11.380 --> 01:56:13.380]  волк. Ну вот, смотрите.
[01:56:17.380 --> 01:56:19.380]  Ну смотрите,
[01:56:19.380 --> 01:56:21.380]  вот представьте, что у меня есть
[01:56:21.380 --> 01:56:23.380]  вот такая иерархия
[01:56:23.380 --> 01:56:25.380]  и одновременно с ней существует такая иерархия,
[01:56:25.380 --> 01:56:27.380]  ведь ничто же не мешает.
[01:56:27.380 --> 01:56:29.380]  Тогда вот в этой ситуации
[01:56:29.380 --> 01:56:31.380]  мама будет лежать за ней папа, потом
[01:56:31.380 --> 01:56:33.380]  сын, а тут будет сначала
[01:56:33.380 --> 01:56:35.380]  мама, потом значит волк,
[01:56:35.380 --> 01:56:37.380]  потом медведь,
[01:56:37.380 --> 01:56:39.380]  потом дочь,
[01:56:39.380 --> 01:56:41.380]  а бабушка уже потом
[01:56:41.380 --> 01:56:43.380]  после этого всего добра.
[01:56:43.380 --> 01:56:45.380]  И в методах мамы я вообще
[01:56:45.380 --> 01:56:47.380]  говоря не могу знать
[01:56:47.380 --> 01:56:49.380]  насколько далеко от меня бабушка лежит,
[01:56:49.380 --> 01:56:51.380]  моя виртуальная.
[01:56:51.380 --> 01:56:53.380]  Поэтому маме необходимо в себе хранить
[01:56:53.380 --> 01:56:55.380]  дополнительно поинтер
[01:56:55.380 --> 01:56:57.380]  на то, где лежит ее бабушка сейчас.
[01:56:57.380 --> 01:56:59.380]  Если у меня есть
[01:56:59.380 --> 01:57:01.380]  виртуальный родитель, то мне необходимо
[01:57:01.380 --> 01:57:03.380]  помнить, где он от меня,
[01:57:03.380 --> 01:57:05.380]  насколько далеко сдвинут в данной конкретной ситуации.
[01:57:05.380 --> 01:57:07.380]  Потому что могут быть разные
[01:57:07.380 --> 01:57:09.380]  иерархии, в которых я участвую вместе с этой
[01:57:09.380 --> 01:57:11.380]  бабушкой, и в каждой из этих иерархий
[01:57:11.380 --> 01:57:13.380]  бабушка будет у меня на разном расстоянии.
[01:57:13.380 --> 01:57:15.380]  Поэтому виртуальное наследование
[01:57:15.380 --> 01:57:17.380]  приводит к тому, что у мамы
[01:57:17.380 --> 01:57:19.380]  и у папы хранятся дополнительно
[01:57:19.380 --> 01:57:21.380]  по 8 байт-поинтеры,
[01:57:21.380 --> 01:57:23.380]  указывающие на
[01:57:23.380 --> 01:57:25.380]  бабушку, где бабушка.
[01:57:25.380 --> 01:57:27.380]  А?
[01:57:33.380 --> 01:57:35.380]  Да, то есть теперь мама выглядит так.
[01:57:35.380 --> 01:57:37.380]  В ней лежит
[01:57:37.380 --> 01:57:39.380]  поинтер,
[01:57:39.380 --> 01:57:41.380]  то есть в маме лежит поинтер,
[01:57:41.380 --> 01:57:43.380]  потом лежат обычные
[01:57:43.380 --> 01:57:45.380]  поля мамы, потом
[01:57:45.380 --> 01:57:47.380]  опять лежит поинтер,
[01:57:47.380 --> 01:57:49.380]  потом лежат обычные поля
[01:57:49.380 --> 01:57:51.380]  папы, потом лежит
[01:57:51.380 --> 01:57:53.380]  сын.
[01:57:55.380 --> 01:57:57.380]  А потом лежит бабушка,
[01:57:57.380 --> 01:57:59.380]  и вот на эту бабушку указывает поинтер.
[01:58:17.380 --> 01:58:19.380]  Какую цепочку?
[01:58:25.380 --> 01:58:27.380]  Какую цепочку?
[01:58:27.380 --> 01:58:29.380]  Справа.
[01:58:33.380 --> 01:58:35.380]  Значит, одна
[01:58:35.380 --> 01:58:37.380]  бабушка общая. Вот для
[01:58:37.380 --> 01:58:39.380]  всякого виртуального предка вам нужно хранить указатель
[01:58:39.380 --> 01:58:41.380]  на это виртуального предка, где он относительно
[01:58:41.380 --> 01:58:43.380]  вас, а обычно он в самом конце лежит.
[01:58:43.380 --> 01:58:45.380]  И вот этот виртуальный предок
[01:58:45.380 --> 01:58:47.380]  будет общий для всех тех, у кого
[01:58:47.380 --> 01:58:49.380]  он помещен как виртуальный. Что ты хотел
[01:58:49.380 --> 01:58:51.380]  сказать?
[01:58:51.380 --> 01:58:53.380]  Почему мы для S не храним указатель
[01:58:53.380 --> 01:58:55.380]  на G? Почему мы для S не храним
[01:58:55.380 --> 01:58:57.380]  указатель на G?
[01:58:57.380 --> 01:58:59.380]  Потому что S начинается
[01:58:59.380 --> 01:59:01.380]  с мамы, а у мамы и так есть
[01:59:01.380 --> 01:59:03.380]  указатель.
[01:59:03.380 --> 01:59:05.380]  Про S и так понятно,
[01:59:05.380 --> 01:59:07.380]  что для S не надо хранить дополнительный
[01:59:07.380 --> 01:59:09.380]  указатель, потому что
[01:59:09.380 --> 01:59:11.380]  у сына, где лежит бабушка, и так
[01:59:11.380 --> 01:59:13.380]  можно понять, зная, что у сына есть сначала мама,
[01:59:13.380 --> 01:59:15.380]  папа, а они-то знают, где их бабушка.
[01:59:19.380 --> 01:59:21.380]  А ты что хотел спросить?
[01:59:23.380 --> 01:59:25.380]  Генерируем
[01:59:25.380 --> 01:59:27.380]  и она у нас лежит в конце.
[01:59:27.380 --> 01:59:29.380]  Ну это не документировано стандартом,
[01:59:29.380 --> 01:59:31.380]  где она лежит. Компиляторы так реализуют,
[01:59:31.380 --> 01:59:33.380]  насколько я знаю, я проверял.
[01:59:33.380 --> 01:59:35.380]  У нас сейчас сын, мама
[01:59:35.380 --> 01:59:37.380]  и мы создали бабушку. Она лежит
[01:59:37.380 --> 01:59:39.380]  после сына в памяти. То есть
[01:59:39.380 --> 01:59:41.380]  когда мы придем к отцу и от него построим бахов.
[01:59:41.380 --> 01:59:43.380]  И от него что-то построим.
[01:59:43.380 --> 01:59:45.380]  Когда у нас бабушки
[01:59:45.380 --> 01:59:47.380]  на память должны как-то сдвинуться.
[01:59:47.380 --> 01:59:49.380]  То есть мы еще тратим время на то, чтобы сдвинуть
[01:59:49.380 --> 01:59:51.380]  бабушку.
[01:59:51.380 --> 01:59:53.380]  Так, подождите, давайте по порядку.
[01:59:53.380 --> 01:59:55.380]  Я не понял проблему.
[01:59:55.380 --> 01:59:57.380]  Какая проблема?
[01:59:57.380 --> 01:59:59.380]  Мы ничего не знаем.
[01:59:59.380 --> 02:00:01.380]  Райков.
[02:00:01.380 --> 02:00:03.380]  Райков.
[02:00:03.380 --> 02:00:05.380]  Райков.
[02:00:05.380 --> 02:00:07.380]  Райков.
[02:00:07.380 --> 02:00:09.380]  Райков.
[02:00:09.380 --> 02:00:11.380]  Райков.
[02:00:11.380 --> 02:00:13.380]  Райков.
[02:00:13.380 --> 02:00:15.380]  Райков.
[02:00:15.380 --> 02:00:17.380]  Райков.
[02:00:17.380 --> 02:00:19.380]  Райков.
[02:00:19.380 --> 02:00:21.380]  Мы ничего не знаем о Райкове отца.
[02:00:21.380 --> 02:00:23.380]  Мы запустили через маму.
[02:00:23.380 --> 02:00:25.380]  Мы создали бабушку.
[02:00:25.380 --> 02:00:27.380]  Положили бабушку после сына.
[02:00:27.380 --> 02:00:29.380]  Да.
[02:00:29.380 --> 02:00:31.380]  Мама, отец, сын, бабушка.
[02:00:31.380 --> 02:00:33.380]  А потом мы еще от отца запустились
[02:00:33.380 --> 02:00:35.380]  и там он все как обычно создавал.
[02:00:35.380 --> 02:00:37.380]  А, то есть ты хочешь сказать, что здесь
[02:00:37.380 --> 02:00:39.380]  могло быть что-то еще,
[02:00:39.380 --> 02:00:41.380]  что-то раздутое, да?
[02:00:41.380 --> 02:00:43.380]  Мы раздули и подвинули бабушку.
[02:00:43.380 --> 02:00:45.380]  И мы двигаем бабушку.
[02:00:45.380 --> 02:00:47.380]  То есть мы играли время на взрыве на 3 бабушки.
[02:00:47.380 --> 02:00:49.380]  Нет, смотри.
[02:00:49.380 --> 02:00:51.380]  Когда ты создаешь сына,
[02:00:51.380 --> 02:00:53.380]  ты ж заранее знаешь,
[02:00:53.380 --> 02:00:55.380]  какой размер будет у всех его предков.
[02:00:57.380 --> 02:00:59.380]  Если ты создаешь сына,
[02:00:59.380 --> 02:01:01.380]  то прежде, чем создавать сына,
[02:01:01.380 --> 02:01:03.380]  ты рассчитываешь, сколько суммарно
[02:01:03.380 --> 02:01:05.380]  места потребуется, чтобы всех положить.
[02:01:05.380 --> 02:01:07.380]  И поэтому ты бабушку сразу кладешь, куда надо.
[02:01:09.380 --> 02:01:11.380]  Чего, чего, чего?
[02:01:13.380 --> 02:01:15.380]  Потому что в разных
[02:01:15.380 --> 02:01:17.380]  иерархиях бабушка может лежать
[02:01:17.380 --> 02:01:19.380]  на разных расстояниях.
[02:01:19.380 --> 02:01:21.380]  Когда ты создаешь конкретную иерархию,
[02:01:21.380 --> 02:01:23.380]  ты этот поинтер инициализируешь,
[02:01:23.380 --> 02:01:25.380]  понимая, что ты сейчас сына создаешь,
[02:01:25.380 --> 02:01:27.380]  а не какого-то еще зверушку, у которой
[02:01:27.380 --> 02:01:29.380]  бабушка будет дальше лежать.
[02:01:31.380 --> 02:01:33.380]  В методах мамы, вот когда методы мамы
[02:01:33.380 --> 02:01:35.380]  реализуются, в них ты обращаешься
[02:01:35.380 --> 02:01:37.380]  к полям бабушки.
[02:01:37.380 --> 02:01:39.380]  А эти поля где относительно тебя?
[02:01:39.380 --> 02:01:41.380]  Это зависит от того, твоя мама
[02:01:41.380 --> 02:01:43.380]  сейчас является родителем кого.
[02:01:43.380 --> 02:01:45.380]  Если ты в методе мамы,
[02:01:45.380 --> 02:01:47.380]  которая там дочка,
[02:01:47.380 --> 02:01:49.380]  сыночек, волченок,
[02:01:49.380 --> 02:01:51.380]  то у тебя эти поля
[02:01:51.380 --> 02:01:53.380]  они на таком расстоянии от тебя.
[02:01:53.380 --> 02:01:55.380]  А если ты вот в этой маме, которая является
[02:01:55.380 --> 02:01:57.380]  частью сына, то эти поля на другом расстоянии
[02:01:57.380 --> 02:01:59.380]  от тебя. И в маме ты не можешь
[02:01:59.380 --> 02:02:01.380]  заранее знать, эти поля будут на каком
[02:02:01.380 --> 02:02:03.380]  расстоянии от тебя. Это зависит от того, кто от тебя еще унаследовался.
[02:02:07.380 --> 02:02:09.380]  А раньше у тебя бабушка была
[02:02:09.380 --> 02:02:11.380]  всегда внутри мамы, и ты знал, что это она
[02:02:11.380 --> 02:02:13.380]  единственная.
[02:02:13.380 --> 02:02:15.380]  Твоя.
[02:02:15.380 --> 02:02:17.380]  Почему мама не может посмотреть
[02:02:17.380 --> 02:02:19.380]  на дочь
[02:02:19.380 --> 02:02:21.380]  и просто сказать...
[02:02:21.380 --> 02:02:23.380]  Подожди, что значит посмотреть на дочь?
[02:02:23.380 --> 02:02:25.380]  Мама ничего не знает о дочери.
[02:02:25.380 --> 02:02:27.380]  Дочь и наследник мамы, а мама
[02:02:27.380 --> 02:02:29.380]  сама по себе о дочери ничего не знает.
[02:02:31.380 --> 02:02:33.380]  Ты реализуешь класс мамы, от него может
[02:02:33.380 --> 02:02:35.380]  унаследоваться кто угодно. Может там не дочь?
[02:02:35.380 --> 02:02:37.380]  Я специально писал дочь, потому что
[02:02:37.380 --> 02:02:39.380]  ты меня спросил, почему мама на сына не может посмотреть.
[02:02:39.380 --> 02:02:41.380]  Потому что может у нее не сын, а дочь на самом деле.
[02:02:41.380 --> 02:02:43.380]  Потому что там еще какой-нибудь зверь.
[02:02:43.380 --> 02:02:45.380]  И как мама может заранее знать, кто от нее унаследуется.
[02:02:45.380 --> 02:02:47.380]  Чтобы обратиться к маме, мы должны
[02:02:47.380 --> 02:02:49.380]  обратиться к дочери.
[02:02:49.380 --> 02:02:51.380]  Где? Когда?
[02:02:51.380 --> 02:02:53.380]  У нас дочь, мама.
[02:02:53.380 --> 02:02:55.380]  Если у нас есть переменная Dota,
[02:02:55.380 --> 02:02:57.380]  у нас есть объект класса Dota.
[02:02:59.380 --> 02:03:01.380]  Чтобы обратиться к маме, мы должны обратиться
[02:03:01.380 --> 02:03:03.380]  к самому нашему объекту.
[02:03:05.380 --> 02:03:07.380]  Ну D.m, да.
[02:03:07.380 --> 02:03:09.380]  Это какой-то поле мамы.
[02:03:09.380 --> 02:03:11.380]  И отсюда уже мама будет знать, где лежит бабушка.
[02:03:11.380 --> 02:03:13.380]  Да не будет мама знать, где лежит бабушка.
[02:03:13.380 --> 02:03:15.380]  Вот ты реализовываешь класс мам.
[02:03:15.380 --> 02:03:17.380]  И в нем есть
[02:03:17.380 --> 02:03:19.380]  поле X, и оно
[02:03:19.380 --> 02:03:21.380]  наследник бабушки. И вот из бабушки
[02:03:21.380 --> 02:03:23.380]  ты унаследовал поле X.
[02:03:23.380 --> 02:03:25.380]  И вот ты говоришь, вывести
[02:03:25.380 --> 02:03:27.380]  X. Где
[02:03:27.380 --> 02:03:29.380]  этот X? Во что должен я транслировать
[02:03:29.380 --> 02:03:31.380]  этот код в Assembler? Какой?
[02:03:31.380 --> 02:03:33.380]  X откуда взять мне? Вот этот X
[02:03:33.380 --> 02:03:35.380]  откуда взять? Я сейчас реализую метод мамы.
[02:03:35.380 --> 02:03:37.380]  Я ничего не знаю, кто от меня еще унаследуется.
[02:03:37.380 --> 02:03:39.380]  Вот код метода F,
[02:03:39.380 --> 02:03:41.380]  что я себя должен представлять?
[02:03:41.380 --> 02:03:43.380]  Вот в инструкциях машинных, что он
[02:03:43.380 --> 02:03:45.380]  себя должен представлять? Откуда я знаю этот
[02:03:45.380 --> 02:03:47.380]  X, где относительно меня находится?
[02:03:47.380 --> 02:03:49.380]  Вот
[02:03:49.380 --> 02:03:51.380]  он из бабушки, но где бабушка
[02:03:51.380 --> 02:03:53.380]  я же не понимаю, потому что это зависит от того,
[02:03:53.380 --> 02:03:55.380]  часть какой иерархии я сейчас.
[02:03:55.380 --> 02:03:57.380]  Поэтому мне приходится
[02:03:57.380 --> 02:03:59.380]  вот это транслировать в то, что я
[02:03:59.380 --> 02:04:01.380]  иду на pointer, вот этот,
[02:04:01.380 --> 02:04:03.380]  прыгаю туда, и оттуда беру X.
[02:04:05.380 --> 02:04:07.380]  Так, ну есть еще одна проблема,
[02:04:07.380 --> 02:04:09.380]  да тут много проблем в принципе.
[02:04:09.380 --> 02:04:11.380]  А как кстати
[02:04:11.380 --> 02:04:13.380]  каст теперь работает?
[02:04:15.380 --> 02:04:17.380]  Ну хорошо, вот если я делаю
[02:04:17.380 --> 02:04:19.380]  каст сына, сына к отцу,
[02:04:19.380 --> 02:04:21.380]  как это работает?
[02:04:21.380 --> 02:04:23.380]  Ну нормально работает,
[02:04:23.380 --> 02:04:25.380]  потому что от сына я знаю, где отец
[02:04:25.380 --> 02:04:27.380]  относительно сына. И если я
[02:04:27.380 --> 02:04:29.380]  делаю каст сына к маме, я тоже знаю,
[02:04:29.380 --> 02:04:31.380]  где мама относительно сына.
[02:04:31.380 --> 02:04:33.380]  А если делаю каст сына к бабушке, это как
[02:04:33.380 --> 02:04:35.380]  работает? Ну тоже нормально, я знаю
[02:04:35.380 --> 02:04:37.380]  относительно сына, где бабушка, а вниз
[02:04:37.380 --> 02:04:39.380]  как это работать будет?
[02:04:39.380 --> 02:04:41.380]  Вот как
[02:04:41.380 --> 02:04:43.380]  будет ли работать и как, например,
[02:04:43.380 --> 02:04:45.380]  каст от мамы к сыну?
[02:04:45.380 --> 02:04:47.380]  Ну в принципе мы знаем, что
[02:04:47.380 --> 02:04:49.380]  у нас есть сын в итоге, соответственно
[02:04:49.380 --> 02:04:51.380]  понятно, как
[02:04:51.380 --> 02:04:53.380]  если мы знаем, мы кастуемся к сыну, мы знаем,
[02:04:53.380 --> 02:04:55.380]  что между мамой и сыном есть
[02:04:55.380 --> 02:04:57.380]  еще отец. А вдруг
[02:04:57.380 --> 02:04:59.380]  от сына кто-то еще унаследовался?
[02:04:59.380 --> 02:05:01.380]  И тут дополнительно
[02:05:01.380 --> 02:05:03.380]  достроено что-то еще, и бабушка
[02:05:03.380 --> 02:05:05.380]  на самом деле...
[02:05:05.380 --> 02:05:07.380]  А вот у нас указатель есть, мы знаем,
[02:05:07.380 --> 02:05:09.380]  где именно.
[02:05:09.380 --> 02:05:11.380]  Сейчас, нет, ну от мамы к сыну кажется
[02:05:11.380 --> 02:05:13.380]  однозначно, потому что даже если там
[02:05:13.380 --> 02:05:15.380]  что-то еще достроено, то оно все после сына
[02:05:15.380 --> 02:05:17.380]  будет лежать. Да, да, да.
[02:05:17.380 --> 02:05:19.380]  От папы к сыну аналогично.
[02:05:19.380 --> 02:05:21.380]  А от бабушки к сыну как это будет работать?
[02:05:21.380 --> 02:05:23.380]  И будет ли?
[02:05:25.380 --> 02:05:27.380]  А почему не будет?
[02:05:27.380 --> 02:05:29.380]  От бабушки к сыну в идее у нас может быть
[02:05:29.380 --> 02:05:31.380]  просто по-разному унаследованы и
[02:05:31.380 --> 02:05:33.380]  может не существовать.
[02:05:33.380 --> 02:05:35.380]  У нас же виртуально.
[02:05:35.380 --> 02:05:37.380]  У нас бабушка не знает,
[02:05:37.380 --> 02:05:39.380]  где лежит начало сына.
[02:05:39.380 --> 02:05:41.380]  Да, вот как быть?
[02:05:41.380 --> 02:05:43.380]  Стоп, у бабушки
[02:05:43.380 --> 02:05:45.380]  что-то перед бабушкой может лежать
[02:05:45.380 --> 02:05:47.380]  что-то еще. Поэтому фиг знает,
[02:05:47.380 --> 02:05:49.380]  где конкретно эта бабушка лежит.
[02:05:49.380 --> 02:05:51.380]  То есть у нас сын может...
[02:05:53.380 --> 02:05:55.380]  Стоп, почему... Вот как
[02:05:55.380 --> 02:05:57.380]  работает каст от бабушки к сыну?
[02:05:57.380 --> 02:05:59.380]  Еще и от дедушки.
[02:05:59.380 --> 02:06:01.380]  Еще и от дедушки.
[02:06:09.380 --> 02:06:11.380]  Нужен динамик каст?
[02:06:11.380 --> 02:06:13.380]  Нет, никакой динамик каст не надо.
[02:06:15.380 --> 02:06:17.380]  Динамик каст вообще не об этом
[02:06:17.380 --> 02:06:19.380]  не приплетать его сюда.
[02:06:21.380 --> 02:06:23.380]  Вот давайте посмотрим, как это
[02:06:23.380 --> 02:06:25.380]  работает. Я просто
[02:06:25.380 --> 02:06:27.380]  уже сам не уверен.
[02:06:27.380 --> 02:06:29.380]  Хочу это затестировать.
[02:06:33.380 --> 02:06:35.380]  Чего?
[02:06:35.380 --> 02:06:37.380]  Ничего у нас не вызывается.
[02:06:37.380 --> 02:06:39.380]  У нас ссылки кастуются.
[02:06:39.380 --> 02:06:41.380]  Какой конструктор?
[02:06:45.380 --> 02:06:47.380]  Ну, оно просто...
[02:06:47.380 --> 02:06:49.380]  А этого мало?
[02:06:49.380 --> 02:06:51.380]  Это, по-моему,
[02:06:51.380 --> 02:06:53.380]  очень много уже.
[02:06:53.380 --> 02:06:55.380]  Это превращает это иерархию вот в это.
[02:07:01.380 --> 02:07:03.380]  Что?
[02:07:03.380 --> 02:07:05.380]  Ссылка кастуется. Вы просто маму считаете
[02:07:05.380 --> 02:07:07.380]  сыном. Все.
[02:07:07.380 --> 02:07:09.380]  Так же.
[02:07:09.380 --> 02:07:11.380]  Нет, от папы к сыну вы сдвигаете ссылку.
[02:07:11.380 --> 02:07:13.380]  На начало сына.
[02:07:15.380 --> 02:07:17.380]  Стоп, то есть мы до этого знали, что это у нас сын,
[02:07:17.380 --> 02:07:19.380]  то ссылка указывается на папу,
[02:07:19.380 --> 02:07:21.380]  который лежит в сыне.
[02:07:21.380 --> 02:07:23.380]  Да.
[02:07:23.380 --> 02:07:25.380]  Сейчас.
[02:07:25.380 --> 02:07:27.380]  Вот вы кастуете от папы к сыну.
[02:07:27.380 --> 02:07:29.380]  Да, давайте подумаем,
[02:07:29.380 --> 02:07:31.380]  как это происходит.
[02:07:31.380 --> 02:07:33.380]  Знает ли он, куда сдвинуть
[02:07:33.380 --> 02:07:35.380]  ссылку?
[02:07:35.380 --> 02:07:37.380]  Да, потому что у нас
[02:07:37.380 --> 02:07:39.380]  внутри всего этого
[02:07:39.380 --> 02:07:41.380]  блока ничего лишнего
[02:07:41.380 --> 02:07:43.380]  не лежит. Там лежит только
[02:07:43.380 --> 02:07:45.380]  сын, его предки, которые не виртуальные,
[02:07:45.380 --> 02:07:47.380]  а которые... Да, если
[02:07:47.380 --> 02:07:49.380]  ну, мы знаем, что у
[02:07:49.380 --> 02:07:51.380]  сына родители это только мама и папа,
[02:07:51.380 --> 02:07:53.380]  у них есть виртуальная бабушка, которая не важно, где.
[02:07:53.380 --> 02:07:55.380]  Да, указатель у нас есть на нее.
[02:07:55.380 --> 02:07:57.380]  А мама и папа, после них
[02:07:57.380 --> 02:07:59.380]  гарантированно лежит сын. Да.
[02:07:59.380 --> 02:08:01.380]  Поэтому от папы к сыну скастывать мы можем
[02:08:01.380 --> 02:08:03.380]  просто сдвинув влево на размер мамы.
[02:08:03.380 --> 02:08:05.380]  Да. С учетом виртуального
[02:08:05.380 --> 02:08:07.380]  поинтера.
[02:08:07.380 --> 02:08:09.380]  Влево. Потому что от папы
[02:08:09.380 --> 02:08:11.380]  правее сына начинается. Сын начинается
[02:08:11.380 --> 02:08:13.380]  с мамы.
[02:08:15.380 --> 02:08:17.380]  Так. Хорошо.
[02:08:17.380 --> 02:08:19.380]  Вот давайте сейчас посмотрим.
[02:08:21.380 --> 02:08:23.380]  Вот у меня есть структура
[02:08:23.380 --> 02:08:25.380]  Грэнни,
[02:08:25.380 --> 02:08:27.380]  и в ней я заведу, значит, Ж.
[02:08:27.380 --> 02:08:29.380]  После этого я заведу структуру...
[02:08:29.380 --> 02:08:31.380]  А выключите свет там
[02:08:31.380 --> 02:08:33.380]  снова. Структуру мам,
[02:08:33.380 --> 02:08:35.380]  ну, матор,
[02:08:35.380 --> 02:08:37.380]  и напишу, что это
[02:08:37.380 --> 02:08:39.380]  virtual
[02:08:39.380 --> 02:08:41.380]  public
[02:08:41.380 --> 02:08:43.380]  Грэнни. Блин.
[02:08:43.380 --> 02:08:45.380]  Public Грэнни.
[02:08:45.380 --> 02:08:47.380]  И тут заведу поле М.
[02:08:47.380 --> 02:08:49.380]  Вот.
[02:08:49.380 --> 02:08:51.380]  А еще заведу структуру
[02:08:51.380 --> 02:08:53.380]  father
[02:08:53.380 --> 02:08:55.380]  и напишу,
[02:08:55.380 --> 02:08:57.380]  что это тоже virtual,
[02:08:57.380 --> 02:08:59.380]  public,
[02:08:59.380 --> 02:09:01.380]  Грэнни, и тут заведу
[02:09:01.380 --> 02:09:03.380]  поле F.
[02:09:03.380 --> 02:09:05.380]  И наконец заведу сына,
[02:09:05.380 --> 02:09:07.380]  который
[02:09:07.380 --> 02:09:09.380]  будет просто...
[02:09:09.380 --> 02:09:11.380]  Да.
[02:09:13.380 --> 02:09:15.380]  Да.
[02:09:15.380 --> 02:09:17.380]  Вот. И тут будет поле S.
[02:09:17.380 --> 02:09:19.380]  Вот теперь у меня вопрос. Какой будет размер
[02:09:19.380 --> 02:09:21.380]  всего этого добра?
[02:09:23.380 --> 02:09:25.380]  Бобра.
[02:09:25.380 --> 02:09:27.380]  Вот. Для начала, какой будет
[02:09:27.380 --> 02:09:29.380]  размер? И давайте попробуем понять,
[02:09:29.380 --> 02:09:31.380]  из чего это все
[02:09:31.380 --> 02:09:33.380]  состоит. Size of S.
[02:09:33.380 --> 02:09:35.380]  А что такое
[02:09:35.380 --> 02:09:37.380]  S?
[02:09:37.380 --> 02:09:39.380]  А, я не создал... Ну,
[02:09:39.380 --> 02:09:41.380]  size of... Хорошо, давайте я сделаю сына
[02:09:41.380 --> 02:09:43.380]  sunS
[02:09:43.380 --> 02:09:45.380]  и сделаю size of S.
[02:09:45.380 --> 02:09:47.380]  Вот.
[02:09:47.380 --> 02:09:49.380]  Значит,
[02:09:49.380 --> 02:09:51.380]  g++
[02:09:51.380 --> 02:09:53.380]  virtual inheritance.
[02:09:53.380 --> 02:09:55.380]  40.
[02:09:55.380 --> 02:09:57.380]  И давайте силенгом для надежности
[02:09:57.380 --> 02:09:59.380]  скомпилируем.
[02:09:59.380 --> 02:10:01.380]  40 тоже.
[02:10:01.380 --> 02:10:03.380]  Значит, давайте поймем, из чего
[02:10:03.380 --> 02:10:05.380]  состоит все это добро.
[02:10:05.380 --> 02:10:07.380]  Сколько занимает бабушка?
[02:10:07.380 --> 02:10:09.380]  Бабушка лежит в конце, да?
[02:10:09.380 --> 02:10:11.380]  У нас мама занимает
[02:10:11.380 --> 02:10:13.380]  pointer и poly int.
[02:10:13.380 --> 02:10:15.380]  То есть мама занимает... И нужно
[02:10:15.380 --> 02:10:17.380]  padding до папы. 16.
[02:10:17.380 --> 02:10:19.380]  Еще
[02:10:19.380 --> 02:10:21.380]  16 занимает
[02:10:21.380 --> 02:10:23.380]  сын.
[02:10:23.380 --> 02:10:25.380]  Еще 16
[02:10:25.380 --> 02:10:27.380]  занимает папа.
[02:10:27.380 --> 02:10:29.380]  Это уже 32.
[02:10:31.380 --> 02:10:33.380]  Вот. А после папы
[02:10:33.380 --> 02:10:35.380]  лежит сразу сын. Там никакого
[02:10:35.380 --> 02:10:37.380]  pointer не лежит.
[02:10:41.380 --> 02:10:43.380]  Ну, ни с чего. После папы лежит
[02:10:43.380 --> 02:10:45.380]  сын. После папы нужно класть сразу int.
[02:10:45.380 --> 02:10:47.380]  Поэтому padding не нужен. Поэтому после
[02:10:47.380 --> 02:10:49.380]  папы мы можем сразу класть
[02:10:49.380 --> 02:10:51.380]  int, который S.
[02:10:51.380 --> 02:10:53.380]  А следующим за ним сразу
[02:10:53.380 --> 02:10:55.380]  класть int g из бабушки.
[02:10:55.380 --> 02:10:57.380]  Видимо, pointer лежит после
[02:10:57.380 --> 02:10:59.380]  всех poly...
[02:10:59.380 --> 02:11:01.380]  Да почему? Нет, подождите. Вот, смотри.
[02:11:01.380 --> 02:11:03.380]  Если у нас лежит сначала pointer,
[02:11:03.380 --> 02:11:05.380]  потом poly int,
[02:11:05.380 --> 02:11:07.380]  тогда у нас получится 16 на mother.
[02:11:07.380 --> 02:11:09.380]  Ну.
[02:11:09.380 --> 02:11:11.380]  А дальше у нас получится
[02:11:11.380 --> 02:11:13.380]  12
[02:11:13.380 --> 02:11:15.380]  в father и
[02:11:15.380 --> 02:11:17.380]  padding дальше не нужен, потому что еще int
[02:11:17.380 --> 02:11:19.380]  кладется нормально.
[02:11:19.380 --> 02:11:21.380]  А, вы имеете в виду, что
[02:11:21.380 --> 02:11:23.380]  padding... Все, я понял. Вы имеете в виду, зачем
[02:11:23.380 --> 02:11:25.380]  padding папе? Да. А padding папе
[02:11:25.380 --> 02:11:27.380]  мне кажется для того...
[02:11:27.380 --> 02:11:29.380]  Ну, мне кажется, он не умеет сжимать. Ну, давайте
[02:11:29.380 --> 02:11:31.380]  проверим. Мне кажется, он не умеет сжимать просто...
[02:11:35.380 --> 02:11:37.380]  Короче, сейчас мы просто проверим.
[02:11:37.380 --> 02:11:39.380]  Я просто сейчас выведу все
[02:11:39.380 --> 02:11:41.380]  адреса, и мы увидим, как это лежит.
[02:11:41.380 --> 02:11:43.380]  Вот, я сейчас спрошу, где лежит M,
[02:11:43.380 --> 02:11:45.380]  где лежит F.
[02:11:47.380 --> 02:11:49.380]  И где лежит
[02:11:49.380 --> 02:11:51.380]  S.
[02:11:51.380 --> 02:11:53.380]  И где лежит G.
[02:11:55.380 --> 02:11:57.380]  Нет, сначала давай скомпилируем нормально.
[02:11:59.380 --> 02:12:01.380]  Вот.
[02:12:01.380 --> 02:12:03.380]  Компилируем.
[02:12:03.380 --> 02:12:05.380]  Смотрим.
[02:12:05.380 --> 02:12:07.380]  68, 70, 80,
[02:12:07.380 --> 02:12:09.380]  84, 88.
[02:12:09.380 --> 02:12:11.380]  Сначала адрес
[02:12:11.380 --> 02:12:13.380]  S.
[02:12:13.380 --> 02:12:15.380]  68.
[02:12:17.380 --> 02:12:19.380]  То есть объект начинается с адреса 68.
[02:12:19.380 --> 02:12:21.380]  Да?
[02:12:21.380 --> 02:12:23.380]  Поле M лежит
[02:12:23.380 --> 02:12:25.380]  по адресу 70. То есть
[02:12:25.380 --> 02:12:27.380]  через 8 байт, поскольку у нас 16-ричное.
[02:12:27.380 --> 02:12:29.380]  То есть первые 8 байт
[02:12:29.380 --> 02:12:31.380]  от начала объекта до M чем-то заняты.
[02:12:31.380 --> 02:12:33.380]  Чем? Ну, поинтером как раз и заняты.
[02:12:33.380 --> 02:12:35.380]  Дальше F.
[02:12:35.380 --> 02:12:37.380]  А F где лежит? 80.
[02:12:37.380 --> 02:12:39.380]  F лежит через 32 вообще.
[02:12:41.380 --> 02:12:43.380]  То есть у нас M,
[02:12:43.380 --> 02:12:45.380]  после него
[02:12:45.380 --> 02:12:47.380]  4 байта padding,
[02:12:47.380 --> 02:12:49.380]  потом поинтер
[02:12:49.380 --> 02:12:51.380]  через 16.
[02:12:51.380 --> 02:12:53.380]  И потом только F. То есть у нас пропущено 8
[02:12:53.380 --> 02:12:55.380]  и еще 8.
[02:12:55.380 --> 02:12:57.380]  То есть все сходится.
[02:12:57.380 --> 02:12:59.380]  У нас лежит сначала...
[02:13:03.380 --> 02:13:05.380]  Это соответствует рисунку, которую я нарисовал.
[02:13:05.380 --> 02:13:07.380]  У нас сначала лежит
[02:13:07.380 --> 02:13:09.380]  поинтер
[02:13:09.380 --> 02:13:11.380]  8 байт,
[02:13:11.380 --> 02:13:13.380]  поинтер,
[02:13:13.380 --> 02:13:15.380]  потом лежит M,
[02:13:15.380 --> 02:13:17.380]  потом 4 байта padding,
[02:13:17.380 --> 02:13:19.380]  потом лежит поинтер
[02:13:19.380 --> 02:13:21.380]  чем-то заняты 8 байт,
[02:13:21.380 --> 02:13:23.380]  потом лежит F.
[02:13:23.380 --> 02:13:25.380]  Что дальше?
[02:13:25.380 --> 02:13:27.380]  Дальше 84
[02:13:27.380 --> 02:13:29.380]  у нас там лежит S.
[02:13:31.380 --> 02:13:33.380]  Да? S и G.
[02:13:35.380 --> 02:13:37.380]  То есть M лежит по адресу 70
[02:13:37.380 --> 02:13:39.380]  плюс 8,
[02:13:39.380 --> 02:13:41.380]  плюс 8. Тут лежит F.
[02:13:41.380 --> 02:13:43.380]  Сразу после F притык лежит
[02:13:45.380 --> 02:13:47.380]  S
[02:13:47.380 --> 02:13:49.380]  и 88 лежит G.
[02:13:49.380 --> 02:13:51.380]  Все сходится.
[02:13:51.380 --> 02:13:53.380]  Здесь действительно нет padding.
[02:13:53.380 --> 02:13:55.380]  А почему тогда размер
[02:13:55.380 --> 02:13:57.380]  40?
[02:13:57.380 --> 02:13:59.380]  А потому что здесь еще padding 4,
[02:13:59.380 --> 02:14:01.380]  чтобы положить следующего
[02:14:01.380 --> 02:14:03.380]  сына после этого.
[02:14:03.380 --> 02:14:05.380]  Вот так устроен
[02:14:05.380 --> 02:14:07.380]  объект при виртуальном наследовании.
[02:14:09.380 --> 02:14:11.380]  Потому что следом
[02:14:11.380 --> 02:14:13.380]  за матор нужно положить поинтер.
[02:14:13.380 --> 02:14:15.380]  Отцовский.
[02:14:15.380 --> 02:14:17.380]  А ему нужно кратность 8 байта.
[02:14:23.380 --> 02:14:25.380]  Потому что после
[02:14:25.380 --> 02:14:27.380]  всего этого объекта нужен padding,
[02:14:27.380 --> 02:14:29.380]  чтобы следующий объект снова положить с адреса кратно 8,
[02:14:29.380 --> 02:14:31.380]  чтобы подряд массивы класть можно было.
[02:14:35.380 --> 02:14:37.380]  Вот начало мамы.
[02:14:39.380 --> 02:14:41.380]  Вот начало папы.
[02:14:43.380 --> 02:14:45.380]  Где папа? Вот же.
[02:14:47.380 --> 02:14:49.380]  А где моя мама?
[02:14:49.380 --> 02:14:51.380]  Так вот же она.
[02:14:53.380 --> 02:14:55.380]  Потому что папа
[02:14:55.380 --> 02:14:57.380]  начинается с поинтера.
[02:14:57.380 --> 02:14:59.380]  Для этого нужно кратность 8 байта.
[02:15:03.380 --> 02:15:05.380]  Понятно, как устроен объект при виртуальном
[02:15:05.380 --> 02:15:07.380]  наследовании?
[02:15:07.380 --> 02:15:09.380]  А как касты все-таки работают?
[02:15:09.380 --> 02:15:11.380]  Ну окей.
[02:15:11.380 --> 02:15:13.380]  От сына к папе,
[02:15:13.380 --> 02:15:15.380]  от папы к сыну.
[02:15:21.380 --> 02:15:23.380]  Потому что там без него можно обойтись.
[02:15:23.380 --> 02:15:25.380]  Ну действительно.
[02:15:25.380 --> 02:15:27.380]  Там же и лежит инт сразу.
[02:15:27.380 --> 02:15:29.380]  Вот смотрите.
[02:15:29.380 --> 02:15:31.380]  Ну вот если я кастую
[02:15:31.380 --> 02:15:33.380]  статик каст, отец гре..
[02:15:33.380 --> 02:15:35.380]  Ну вообще понятно.
[02:15:35.380 --> 02:15:37.380]  Вверх не интересно.
[02:15:37.380 --> 02:15:39.380]  От сына что к маме, что к папе, понятно как каст работает.
[02:15:39.380 --> 02:15:41.380]  Вот как работает каст от
[02:15:41.380 --> 02:15:43.380]  ну давайте я заведу
[02:15:43.380 --> 02:15:45.380]  гренне
[02:15:45.380 --> 02:15:47.380]  же.
[02:15:47.380 --> 02:15:49.380]  И как я значит от
[02:15:49.380 --> 02:15:51.380]  гренне например скастую
[02:15:51.380 --> 02:15:53.380]  к сыну.
[02:15:53.380 --> 02:15:55.380]  Да хоть к маме.
[02:15:55.380 --> 02:15:57.380]  От гренне к маме.
[02:15:57.380 --> 02:15:59.380]  Я могу как-нибудь скастовать?
[02:16:03.380 --> 02:16:05.380]  А от сына я написал,
[02:16:05.380 --> 02:16:07.380]  а не от бабушки.
[02:16:07.380 --> 02:16:09.380]  Вот могу ли я бабушку скастовать
[02:16:09.380 --> 02:16:11.380]  к маме?
[02:16:11.380 --> 02:16:13.380]  Нет.
[02:16:13.380 --> 02:16:15.380]  И это логично.
[02:16:15.380 --> 02:16:17.380]  Потому что, а как?
[02:16:17.380 --> 02:16:19.380]  Если это не виртуальное наследование,
[02:16:19.380 --> 02:16:21.380]  то как вообще статик каст может
[02:16:21.380 --> 02:16:23.380]  догадываться где лежит мама относительно
[02:16:23.380 --> 02:16:25.380]  этой бабушки? Да никак не может.
[02:16:25.380 --> 02:16:27.380]  Правильно? То есть при виртуальном
[02:16:27.380 --> 02:16:29.380]  наследовании статик кастом
[02:16:29.380 --> 02:16:31.380]  вниз кастовать я не могу.
[02:16:33.380 --> 02:16:35.380]  Ну так же и к сыну я не смогу скастовать.
[02:16:35.380 --> 02:16:37.380]  Потому что
[02:16:37.380 --> 02:16:39.380]  бабушке, относительно бабушки
[02:16:39.380 --> 02:16:41.380]  совершенно непонятно куда
[02:16:41.380 --> 02:16:43.380]  сдвиг делать.
[02:16:45.380 --> 02:16:47.380]  Значит cannot cast
[02:16:47.380 --> 02:16:49.380]  granny to son via virtual base
[02:16:49.380 --> 02:16:51.380]  гренне. Не получается
[02:16:51.380 --> 02:16:53.380]  из-за того что виртуальное наследование не получается
[02:16:53.380 --> 02:16:55.380]  ничего скастовать.
[02:16:55.380 --> 02:16:57.380]  Если бы наследование было не виртуально,
[02:16:57.380 --> 02:16:59.380]  то мы могли бы так скастать?
[02:16:59.380 --> 02:17:01.380]  А если бы не виртуально, то конечно смогли бы.
[02:17:01.380 --> 02:17:03.380]  И это бы не сделало
[02:17:03.380 --> 02:17:05.380]  никакого... Ну просто мы бы считали, что
[02:17:05.380 --> 02:17:07.380]  да, сын лежит.
[02:17:11.380 --> 02:17:13.380]  Отца к сыну?
[02:17:13.380 --> 02:17:15.380]  Да, должны.
[02:17:15.380 --> 02:17:17.380]  Сейчас.
[02:17:17.380 --> 02:17:19.380]  А может и нет. Давайте поймем.
[02:17:21.380 --> 02:17:23.380]  Ну давайте поймем. Вот если у меня есть father f,
[02:17:23.380 --> 02:17:25.380]  давайте подумаем, можем
[02:17:25.380 --> 02:17:27.380]  или нет.
[02:17:33.380 --> 02:17:35.380]  Ну,
[02:17:39.380 --> 02:17:41.380]  кажется это теоретически реализуемо,
[02:17:41.380 --> 02:17:43.380]  а работает ли? Ну да, работает.
[02:17:43.380 --> 02:17:45.380]  Собственно, да. Папу к сыну можем.
[02:17:45.380 --> 02:17:47.380]  И маму к сыну можем,
[02:17:47.380 --> 02:17:49.380]  ну а бабушку не можем, потому что бабушку ни к чему
[02:17:49.380 --> 02:17:51.380]  не может, потому что непонятно где ее потомки
[02:17:51.380 --> 02:17:53.380]  относительно ее сына.
[02:17:53.380 --> 02:17:55.380]  Ну, получается так, да.
[02:17:57.380 --> 02:17:59.380]  Почему это UB?
[02:17:59.380 --> 02:18:01.380]  Сейчас это UB, потому что у нас
[02:18:01.380 --> 02:18:03.380]  под father настоящий сын, да.
[02:18:03.380 --> 02:18:05.380]  Не father, а сын.
[02:18:05.380 --> 02:18:07.380]  Ну и адреса полученного,
[02:18:07.380 --> 02:18:09.380]  вот если я возьму адрес этого,
[02:18:09.380 --> 02:18:11.380]  как я уже говорил, адрес этого и адрес исходного f
[02:18:11.380 --> 02:18:13.380]  будут разными, потому что сдвиг произошел.
[02:18:13.380 --> 02:18:15.380]  По сути, статик к
[02:18:15.380 --> 02:18:17.380]  сыну от папы сдвинул влево его
[02:18:17.380 --> 02:18:19.380]  на размер мамы. Да.
[02:18:19.380 --> 02:18:21.380]  Я понимаю, что указатель, который
[02:18:21.380 --> 02:18:23.380]  лежит у мамы, он получает
[02:18:23.380 --> 02:18:25.380]  значение вот в момент
[02:18:25.380 --> 02:18:27.380]  определения конкретного сына.
[02:18:27.380 --> 02:18:29.380]  Ну, то есть... Не сын,
[02:18:29.380 --> 02:18:31.380]  конкретного потомка.
[02:18:31.380 --> 02:18:33.380]  То есть в зависимости от
[02:18:33.380 --> 02:18:35.380]  того, кого именно мы сейчас создаем,
[02:18:35.380 --> 02:18:37.380]  указатель разными числами инициализируется.
[02:18:37.380 --> 02:18:39.380]  Потому что я нарисовал
[02:18:39.380 --> 02:18:41.380]  пример, у тебя может быть мама, от нее
[02:18:41.380 --> 02:18:43.380]  еще там пять зверушек, и вот тогда
[02:18:43.380 --> 02:18:45.380]  бабушка будет дальше лежать, поэтому вот
[02:18:45.380 --> 02:18:47.380]  этот указатель нужно...
[02:18:47.380 --> 02:18:49.380]  Вот.
[02:18:49.380 --> 02:18:51.380]  А, кстати,
[02:18:51.380 --> 02:18:53.380]  а вот что
[02:18:53.380 --> 02:18:55.380]  вы думаете сейчас мне выведется,
[02:18:55.380 --> 02:18:57.380]  если я вот это спрошу?
[02:18:57.380 --> 02:18:59.380]  Estadese Out
[02:19:01.380 --> 02:19:03.380]  Сын начинает с указателя, да?
[02:19:09.380 --> 02:19:11.380]  А давайте
[02:19:11.380 --> 02:19:13.380]  просто спросим, что это за указатель?
[02:19:13.380 --> 02:19:15.380]  Ну,
[02:19:15.380 --> 02:19:17.380]  сын, он же с указателя
[02:19:17.380 --> 02:19:19.380]  начинается? А давайте
[02:19:19.380 --> 02:19:21.380]  и узнаем, что там за указатель-то такой.
[02:19:21.380 --> 02:19:23.380]  Указатель на что?
[02:19:29.380 --> 02:19:31.380]  Почему это не скомпилируется?
[02:19:37.380 --> 02:19:39.380]  А, ну мне надо
[02:19:39.380 --> 02:19:41.380]  сейчас. Мне надо не так
[02:19:41.380 --> 02:19:43.380]  сделать, мне нужно сделать...
[02:19:43.380 --> 02:19:45.380]  Сейчас, подождите, что мне надо сделать?
[02:19:59.380 --> 02:20:01.380]  Вот так скомпилируется.
[02:20:01.380 --> 02:20:03.380]  Ну, потому что
[02:20:03.380 --> 02:20:05.380]  к указателю
[02:20:05.380 --> 02:20:07.380]  это к R-value, я только указатель
[02:20:07.380 --> 02:20:09.380]  не могу кастовать к указателям,
[02:20:09.380 --> 02:20:11.380]  а тут я сказал
[02:20:11.380 --> 02:20:13.380]  Re-Interpreter-Cast
[02:20:13.380 --> 02:20:15.380]  считай, что
[02:20:15.380 --> 02:20:17.380]  тип S это ссылка
[02:20:17.380 --> 02:20:19.380]  на указатель, ну то есть
[02:20:19.380 --> 02:20:21.380]  теперь воспринимай S, как будто это
[02:20:21.380 --> 02:20:23.380]  был указатель на int, вот его мне и выведи,
[02:20:23.380 --> 02:20:25.380]  давайте попробуем.
[02:20:31.380 --> 02:20:33.380]  Это что-то очень странное.
[02:20:33.380 --> 02:20:35.380]  Да, это что-то очень странное.
[02:20:35.380 --> 02:20:37.380]  Куда же ведет этот указатель?
[02:20:39.380 --> 02:20:41.380]  Мы что-то очень странное написали
[02:20:41.380 --> 02:20:43.380]  в принципе.
[02:20:43.380 --> 02:20:45.380]  А как мы объект
[02:20:45.380 --> 02:20:47.380]  кастим указатель?
[02:20:47.380 --> 02:20:49.380]  Re-Interpreter-Cast.
[02:20:49.380 --> 02:20:51.380]  А что это вообще происходит?
[02:20:51.380 --> 02:20:53.380]  Давайте мы на всякий случай убьем
[02:20:53.380 --> 02:20:55.380]  кусок, который у S
[02:20:55.380 --> 02:20:57.380]  не работает.
[02:20:57.380 --> 02:20:59.380]  Каст.
[02:21:01.380 --> 02:21:03.380]  Сейчас, ну я сказал ему,
[02:21:03.380 --> 02:21:05.380]  считай, что S это на самом деле был указатель на int
[02:21:05.380 --> 02:21:07.380]  и вот ссылку на этот указатель мне скастуй
[02:21:07.380 --> 02:21:09.380]  к нему. Ну хорошо, ну давайте
[02:21:09.380 --> 02:21:11.380]  я не знаю.
[02:21:13.380 --> 02:21:15.380]  Ну давайте, я не знаю, сначала
[02:21:15.380 --> 02:21:17.380]  считать его, ну я не знаю, как это.
[02:21:21.380 --> 02:21:23.380]  Да, я беру биты S
[02:21:23.380 --> 02:21:25.380]  и говорю, считай, что это биты,
[02:21:25.380 --> 02:21:27.380]  которые означающие указатель на int.
[02:21:27.380 --> 02:21:29.380]  И вот его мне и выведи. То есть я первые 8
[02:21:29.380 --> 02:21:31.380]  байт S таким
[02:21:31.380 --> 02:21:33.380]  образом вывел. Ну это какое-то странное
[02:21:33.380 --> 02:21:35.380]  число, оно не похоже на указатель,
[02:21:35.380 --> 02:21:37.380]  не похоже на адрес чего-то из этого.
[02:21:39.380 --> 02:21:41.380]  А?
[02:21:41.380 --> 02:21:43.380]  Нет, указатель на int
[02:21:43.380 --> 02:21:45.380]  я же вывел, а не сам int.
[02:21:49.380 --> 02:21:51.380]  Да потому что я, ну блин,
[02:21:51.380 --> 02:21:53.380]  ну подумайте, ну потому что я
[02:21:53.380 --> 02:21:55.380]  взял S и сказал, считай, что S
[02:21:55.380 --> 02:21:57.380]  это указатель на int. Его и выведи
[02:21:57.380 --> 02:21:59.380]  мне.
[02:22:03.380 --> 02:22:05.380]  Указатель на ссылку вообще не бывает.
[02:22:05.380 --> 02:22:07.380]  Я сказал, считай, что S это указатель на int. Окей.
[02:22:07.380 --> 02:22:09.380]  Если б я хотел считать, что
[02:22:09.380 --> 02:22:11.380]  int это double, S это double, я бы что сделал?
[02:22:11.380 --> 02:22:13.380]  Я бы вот так написал, правильно?
[02:22:17.380 --> 02:22:19.380]  Не создает новых объектов.
[02:22:19.380 --> 02:22:21.380]  Мы кастим к ссылке. Я говорю
[02:22:21.380 --> 02:22:23.380]  сейчас, считай, что S это double и выведем мне значение
[02:22:23.380 --> 02:22:25.380]  этого double. Вот сейчас выведется
[02:22:25.380 --> 02:22:27.380]  мне некий double.
[02:22:27.380 --> 02:22:29.380]  Первые 8 байт S
[02:22:29.380 --> 02:22:31.380]  прочитанные как double. Теперь я сказал,
[02:22:31.380 --> 02:22:33.380]  прочитай первые 8 байт S как
[02:22:33.380 --> 02:22:35.380]  указатель на int.
[02:22:35.380 --> 02:22:37.380]  И выведи мне их. Вот я их вывел.
[02:22:39.380 --> 02:22:41.380]  Это загадка, почему же там такие странные,
[02:22:41.380 --> 02:22:43.380]  почему там такой странный указатель?
[02:22:43.380 --> 02:22:45.380]  А давайте тогда вот что сделаем.
[02:22:45.380 --> 02:22:47.380]  А давайте разберем другой пример.
[02:22:47.380 --> 02:22:49.380]  Допустим,
[02:22:49.380 --> 02:22:51.380]  у меня
[02:22:51.380 --> 02:22:53.380]  два виртуальных родителя.
[02:22:53.380 --> 02:22:55.380]  Вот смотрите, у меня пусть бабушка
[02:22:55.380 --> 02:22:57.380]  теперь будет не виртуальной,
[02:22:59.380 --> 02:23:01.380]  зато мама и папа
[02:23:01.380 --> 02:23:03.380]  виртуальные.
[02:23:03.380 --> 02:23:05.380]  Что тогда будет?
[02:23:09.380 --> 02:23:11.380]  Ну, вопрос, сколько
[02:23:11.380 --> 02:23:13.380]  это в памяти будет занимать и что будет где
[02:23:13.380 --> 02:23:15.380]  лежать?
[02:23:17.380 --> 02:23:19.380]  Так, давайте
[02:23:19.380 --> 02:23:21.380]  поймем, как это будет лежать.
[02:23:21.380 --> 02:23:23.380]  Ну, давайте сначала пофантазируем, а потом
[02:23:23.380 --> 02:23:25.380]  попробуем
[02:23:25.380 --> 02:23:27.380]  скомпилировать. Во-первых, это C и E,
[02:23:27.380 --> 02:23:29.380]  потому что неоднозначность обращения к G.
[02:23:29.380 --> 02:23:31.380]  Потому что теперь опять две бабушки.
[02:23:31.380 --> 02:23:33.380]  Но сейчас
[02:23:33.380 --> 02:23:35.380]  я это исправлю. А давайте
[02:23:35.380 --> 02:23:37.380]  пофантазируем, как это в памяти должно лежать
[02:23:37.380 --> 02:23:39.380]  теперь.
[02:23:41.380 --> 02:23:43.380]  Сначала
[02:23:43.380 --> 02:23:45.380]  Ну, у нас есть
[02:23:45.380 --> 02:23:47.380]  сын.
[02:23:47.380 --> 02:23:49.380]  Сын, он начинается с бабушки.
[02:23:49.380 --> 02:23:51.380]  Ну, он начинается с мамы, а мама виртуальная.
[02:23:51.380 --> 02:23:53.380]  Значит
[02:23:53.380 --> 02:23:55.380]  сын начинается с указателя на
[02:23:55.380 --> 02:23:57.380]  маму,
[02:23:57.380 --> 02:23:59.380]  после чего лежит указатель на папу,
[02:23:59.380 --> 02:24:01.380]  после чего лежит
[02:24:01.380 --> 02:24:03.380]  S
[02:24:03.380 --> 02:24:05.380]  и вот сын.
[02:24:05.380 --> 02:24:07.380]  После этого лежит бабушка,
[02:24:07.380 --> 02:24:09.380]  а потом мама,
[02:24:09.380 --> 02:24:11.380]  а после этого лежит другая бабушка,
[02:24:11.380 --> 02:24:13.380]  а потом папа. Вот так
[02:24:13.380 --> 02:24:25.380]  быть устроено какой размер у этого всего должен быть значит 8 плюс 8 16 плюс плюс да то есть вот
[02:24:25.380 --> 02:24:33.980]  это 24 да вот это 24 должно быть а тут должен быть паддинг тут не должно быть паддинга да потому
[02:24:33.980 --> 02:24:44.220]  что дальше сплошные инты то есть на самом деле 8 и 8 16 20 ну 16 и 5 интов 30 ну на самом деле еще
[02:24:44.220 --> 02:24:57.740]  4 чтобы следующий положить да ну что страшное я не понял 16 и 5 интов то есть 36 и еще 4 паддинг
[02:24:57.740 --> 02:25:04.340]  чтобы следующего сына положить должно быть 40 давайте проверим правда ли это я только сначала
[02:25:04.340 --> 02:25:23.740]  закомментирую вот это давайте посмотрим нет 32 как же так вышло казалось бы должно быть 40 байт
[02:25:23.740 --> 02:25:28.580]  ну уж как минимум 36 даже если этот паддинг не считать а оказалось 42 как же так получилось
[02:25:28.580 --> 02:25:36.900]  32 почему на 8 байт меньше чем мы насчитали потому что на самом деле два указателя подряд хранить
[02:25:36.900 --> 02:25:44.220]  не эффективно он этого не делает этот указатель указывает не напрямую на бабушку на предках а он
[02:25:44.220 --> 02:25:48.420]  указывает на некоторое место в памяти где лежит список других указателей
[02:25:48.420 --> 02:26:04.300]  на самом деле этот указатель он не на значит не сюда этот указатель он кое-куда вовне а вот
[02:26:04.300 --> 02:26:09.180]  там уже лежит настоящий указатель и сделано это как раз для того чтобы есть у вас много виртуальных
[02:26:09.180 --> 02:26:15.940]  предков этот указатель вы бы не хранили весь этот огромный массив указателей у себя вы хранили
[02:26:15.940 --> 02:26:23.380]  бы указатель на так называемую сейчас я скажу вот это страшное слово виртуальную таблицу в которой
[02:26:23.380 --> 02:26:29.780]  хранятся все нужные вам указатели куда ходить если что поэтому и адрес у нее такой странный он
[02:26:29.780 --> 02:26:34.660]  это вообще указатель на статическую память на самом деле она в статической памяти хранится
[02:26:34.660 --> 02:26:40.820]  потому что это некоторая информация относительно работы всей программы только правда не очень
[02:26:40.820 --> 02:26:50.180]  понятно как там хранить указатели на конкретные объекты ведь если она статическая вот да там
[02:26:50.180 --> 02:26:54.820]  хранятся сдвиги на самом деле они указатели то есть на самом деле вам надо знать не указатель
[02:26:54.820 --> 02:26:59.700]  же а сдвиг ну вот по сути они там скорее всего хранятся скорее всего я уже тут не берусь
[02:26:59.700 --> 02:27:05.220]  говорить как это точно устроено то есть на самом деле с двумя виртуальными предками объект выглядит
[02:27:05.220 --> 02:27:20.460]  не так в нем сначала указатель потом значит сын потом с вот это 8 байт потом с потом g от мамы
[02:27:20.460 --> 02:27:39.180]  потом м потом g от папы потом f 8 16 24 28 и 4 байта пэдинг чтобы уместился следующий сын нормально
[02:27:39.180 --> 02:27:51.620]  вот ну можно затестировать ну в принципе можно можно проверить что так оно и есть скорее всего
[02:27:51.620 --> 02:27:59.100]  то есть я могу сейчас только убрать вот эту неоднозначность с g там s точка мам 2.2. же допустим я
[02:27:59.100 --> 02:28:11.420]  попрошу ну и в принципе можно мазер да вот и на самом деле я могу знаете что попробовать еще
[02:28:11.420 --> 02:28:27.980]  сделать я могу попробовать вот что сделать сейчас я попробую вот так сделать у меня
[02:28:28.940 --> 02:28:35.180]  у меня сын начинается с поинтера да давайте я попробую вот так сделать нет секвел я не
[02:28:35.180 --> 02:28:43.540]  схватил ну и просто я это ну она просто константная по идее должна быть то есть
[02:28:43.540 --> 02:28:52.660]  если бы я ну а нет минуточку не так я должен сделать не это я должен вот эту штуку интерпретировать
[02:28:52.660 --> 02:29:00.900]  как указатель а потом разыминовать и вот ему то присвоить уже единицу вот давайте так попробуем
[02:29:00.900 --> 02:29:07.940]  вот я доказал вам что мы на самом деле в статическую память ведем этот указатель ведет
[02:29:07.940 --> 02:29:14.980]  ну не хорошо не в статическую то есть он ведет куда-то где на самом деле мы не можем менять по
[02:29:14.980 --> 02:29:21.900]  этому адресу ну то есть там может быть на самом я вам не доказал что это прямо обязательно
[02:29:21.900 --> 02:29:27.140]  статическая память может это просто вообще не указатель был но скорее всего это просто указатель
[02:29:27.140 --> 02:29:39.740]  который ведет в какую-то область память кормить нельзя вот там хранится дани указатель но да вот
[02:29:39.740 --> 02:29:46.340]  но можно проверить что тут вывелось ну давайте уж не будем вот ну и давайте последний пример
[02:29:46.620 --> 02:29:53.980]  про последний пример который я вам покажу сегодня блин виртуальные функции мы уж не начнем сегодня
[02:29:53.980 --> 02:30:03.020]  жалко ну ладно значит последний пример это когда у вас один и тот же класс унаследован и виртуально и
[02:30:03.020 --> 02:30:26.900]  не виртуально точку да там сначала выводится 32 а дальше адреса без пробела вот представьте
[02:30:26.900 --> 02:30:32.980]  теперь что я сделал следующее я сделал опять ту же самую старую иерархию как была с мамой папой
[02:30:32.980 --> 02:30:40.060]  и бабушкой но на этот раз я виртуал написал только в одном месте я сделал вот эту бабушку вот вот
[02:30:40.060 --> 02:30:55.460]  здесь я написал виртуал а тут я не написал виртуал ой я вас обманул это еще не последний пример будет
[02:30:55.460 --> 02:31:03.100]  потом последний но я говорил что под задержу вас ничего страшного зато вы сегодня спали долго вот
[02:31:03.100 --> 02:31:10.780]  так если я сделал что тогда будет как это будет выглядеть ну то есть я один раз виртуал написала
[02:31:10.780 --> 02:31:21.700]  второй нет что будет тогда будет две бабушки одна виртуальная другая нет начинаем сначала указатель
[02:31:21.700 --> 02:31:41.220]  после чего мама после чего папа но папа начинается с бабушки вот это папа после чего сын после чего
[02:31:41.220 --> 02:32:00.820]  мамина бабушка то есть выглядит теперь это будет так чего чего чего нет что мамин указатель
[02:32:00.820 --> 02:32:09.460]  указывает ну куда полагается это вот указывает в итоге сюда да то есть теперь мы опять имеем
[02:32:09.460 --> 02:32:15.020]  неоднозначность то есть если вы делаете виртуал какой-то класс то его надо везде делать все
[02:32:15.020 --> 02:32:21.020]  виртуал экземпляры схлопываются в один он кладется в конец а не виртуал они дублируются то есть
[02:32:21.020 --> 02:32:25.660]  если у вас один раз виртуал много раз виртуал бабушка еще сколько-то раз не виртуал то все
[02:32:25.660 --> 02:32:32.860]  не виртуал будут копиями друг друга и одна будет виртуал общая которая виртуал борется с
[02:32:32.860 --> 02:32:47.500]  неоднозначностью вот это не очень ну в смысле так можно писать но это довольно плохо потому что
[02:32:47.500 --> 02:32:53.980]  у вас ну вы можете конечно так сделать но это будет означать что у вас значит часть что у
[02:32:53.980 --> 02:32:57.900]  вас проблема не побеждена виртуально у нас следует ну короче это просто чтобы понимали как это
[02:32:58.260 --> 02:33:07.140]  вот напоследок я хочу вот что сделать вот теперь уж точно напоследок конечно не
[02:33:07.140 --> 02:33:16.420]  однозначность будет конечно их же две вот напоследок я хочу вам показать вот что тут я уже
[02:33:16.420 --> 02:33:26.700]  просто не в состоянии значит рисовать на доске уже я просто покажу вам картинки нарисованные за
[02:33:26.700 --> 02:33:34.340]  меня вот в этом замечательном документе который он активно рекламировал есть замечательная глава
[02:33:34.340 --> 02:33:44.340]  про наследование
[02:33:50.340 --> 02:33:52.980]  тут есть похожие картиночки
[02:33:56.900 --> 02:34:02.820]  где описано как работают множественно на следовании и виртуальные наследование вот
[02:34:02.820 --> 02:34:09.700]  это значит картиночка при не виртуальном наследовании вот эта картиночка при виртуальном
[02:34:09.700 --> 02:34:19.280]  наследовании да вот здесь нарисована собственно ну тут есть значит понятно что разобран
[02:34:19.280 --> 02:34:26.020]  случай когда можно то что я сказал можно сделать и виртуального и невіртуального предка тогда
[02:34:26.020 --> 02:34:37.020]  Да, все виртуальные вхождения B в класс Lattice, какое классиво название, решетки классов соответствуют одному подобъекту, а остальные, значит, дублируются.
[02:34:38.020 --> 02:34:49.020]  Но больше всего мне нравится вот это. Тут есть прекрасный пример, как работает поиск имен в случае, когда у вас есть и виртуальные, и не виртуальные предки.
[02:34:49.020 --> 02:35:02.020]  То есть представьте, что вы унаследовали бабушку виртуально, а другую не виртуально, и начали делать всякие вот эти вот вызовы.
[02:35:02.020 --> 02:35:24.020]  Вот смотрите, когда у нас присутствует виртуальный класс, скрытое объявление может быть достигнуто через путь, через решетку подобъектов, которое не проходит через скрывающее объявление.
[02:35:24.020 --> 02:35:37.020]  Что-то написано. Это не неоднозначность. А то же самое с невиртуальными это неоднозначность. Ну да, это соответственно то, ради чего виртуальность придумана.
[02:35:38.020 --> 02:35:47.020]  Вот у меня есть структура V, в ней есть метод F и X, структура W, в ней есть G и Y, и вот я делаю виртуального предка V и не виртуального W.
[02:35:47.020 --> 02:35:53.020]  Вот. И структура C делает виртуального предка V и не виртуального W. И вот так это выглядит.
[02:35:54.020 --> 02:36:06.020]  И соответственно, если я теперь из D вызываю какие-то имена, которые были в V, то я вот по этому пути прохожу и неоднозначности не возникает.
[02:36:06.020 --> 02:36:15.020]  То есть если я попадаю, если я по вот этой вот решетке, по вот этой вот, как она называется, lattice, прихожу в виртуального предка, только в виртуального, по этим названиям.
[02:36:16.020 --> 02:36:20.020]  То есть все эти названия, они из одного и того же виртуального предка ведут меня в одно и то же место, то это не неоднозначность.
[02:36:21.020 --> 02:36:36.020]  Но если у меня возникает неоднозначность, вот у меня еще в структуре B объявлена F, которая скрывает вот это F.
[02:36:37.020 --> 02:36:48.020]  И G, у меня в структуре B, смотрите, у меня в структуре B объявлена F и G и X и Y. То есть оно скрывает все, что есть в этих двух классах.
[02:36:49.020 --> 02:37:06.020]  Вот, и если я из D обращаюсь к X, то я получаю X вот отсюда. Если я из D обращаюсь к F, то я опять получаю F вот отсюда, из B.
[02:37:06.020 --> 02:37:22.020]  А если я обращаюсь к Y, то у меня неоднозначность взять его отсюда, либо отсюда, либо отсюда.
[02:37:25.020 --> 02:37:34.020]  Короче, то, что в B объявлено, оно скрывает виртуальные штуки за собой, но не скрывает вот эти.
[02:37:34.020 --> 02:37:40.020]  Вот если я в B наобъявлял то, что конфликтует с виртуальным объявлением, вот у меня в B было F и X.
[02:37:41.020 --> 02:37:52.020]  И в B я объявил F и X. И вот если я из D пишу F и X, то B прячет за собой виртуальность, вот этот путь через C в В не рассматривается и выбирается вот эта версия.
[02:37:53.020 --> 02:38:02.020]  А если у меня не виртуальная G и Y, то возникает неоднозначность, потому что конкурирует версия из B и версия из W, которая пришла из C.
[02:38:03.020 --> 02:38:13.020]  Вот такая замечательная картинка, очень мне нравится, так сказать, для дополнения прекрасной картины того, как работают виртуальные наследования и поиск имен.
[02:38:16.020 --> 02:38:18.020]  Вы поняли этот пример?
[02:38:21.020 --> 02:38:22.020]  Я подумаю.
[02:38:23.020 --> 02:38:24.020]  А давайте…
[02:38:25.020 --> 02:38:26.020]  А давайте нет.
[02:38:27.020 --> 02:38:29.020]  А можно вас снова перевести?
[02:38:30.020 --> 02:38:32.020]  Все, короче, я закончил.
