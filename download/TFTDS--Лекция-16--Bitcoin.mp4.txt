[00:00.000 --> 00:12.000]  Ну что, поехали? В прошлый раз, позапрошлый раз мы начали византийскую модель.
[00:12.000 --> 00:16.000]  Мы сказали, что мы не хотим доверять конкретным узлам, что они могут отступать от протокола,
[00:16.000 --> 00:20.000]  поэтому мы должны каким-то образом, какими-то инструментами, криптографиями,
[00:20.000 --> 00:25.000]  какими-то особенными кворами от них защищаться. В прошлый раз мы построили
[00:25.000 --> 00:29.000]  некоторый алгоритм, который уже решает довольно эффективно
[00:29.000 --> 00:32.000]  некоторую, мы надеемся, полезную задачу – упорядочивание транзакций.
[00:32.000 --> 00:36.000]  Мы с вами строили ordering service, который получает транзакции от пользователей
[00:36.000 --> 00:40.000]  и строит на них какой-то глобальный порядок. Видимо, для того, чтобы реплицировать
[00:40.000 --> 00:45.000]  по помощи этого порядка некоторое состояние. Но я вот загадочно умолчал в прошлый раз,
[00:45.000 --> 00:49.000]  какое состояние мы будем реплицировать, потому что это важно, но в прошлый раз
[00:49.000 --> 00:53.000]  мы смогли без этого обойтись. Вот сегодня мы без этого обойтись не сможем уже,
[00:53.000 --> 00:57.000]  и я наконец скажу, что же мы собираемся реплицировать. Ну ладно, в прошлый раз
[00:57.000 --> 01:01.000]  я сказал, кажется, что мы собираемся реплицировать компьютер,
[01:01.000 --> 01:05.000]  что было довольно странно. В конечном итоге это так, но начнем
[01:05.000 --> 01:09.000]  с другого. Сегодня мы хотим реплицировать деньги,
[01:09.000 --> 01:13.000]  мы хотим реплицировать электронные монеты.
[01:13.000 --> 01:17.000]  Это довольно странно звучит, что у нас будут монеты, деньги электронные, цифровые,
[01:17.000 --> 01:21.000]  потому что сложно себе представить, чтобы набор байтиков, какой-то синтетически
[01:21.000 --> 01:25.000]  сгенерированный на вашем диске, имел какую-то стоимость. Но, с другой стороны, он будет иметь
[01:25.000 --> 01:29.000]  небольшую абсолютную стоимость, чем какая-нибудь бумажная купюра, которая у вас в бумажнике, может быть,
[01:29.000 --> 01:33.000]  до сих пор лежит. Все это вопрос соглашения.
[01:33.000 --> 01:37.000]  Просто мы считаем, что какая-то купюра или какой-то набор байт
[01:37.000 --> 01:41.000]  обозначает некоторую стоимость. Вот пока соблюдены некоторые правила,
[01:41.000 --> 01:47.000]  пока сама инфраструктура обслуживания этих купюр, этих кусочков,
[01:47.000 --> 01:51.000]  этих блобиков с данными будет надежной, пока мы их будем доверять,
[01:51.000 --> 01:55.000]  мы можем действительно использовать эти цифровые монеты
[01:55.000 --> 01:59.000]  или эти бумажные купюры как эквивалент стоимости.
[01:59.000 --> 02:03.000]  Сегодня мы поговорим о том, как это можно сделать.
[02:03.000 --> 02:11.000]  И нужно понять, как мы собираемся эти монеты представлять для начала.
[02:11.000 --> 02:15.000]  Давайте скажем, что можно себе мыслить вот эти все монеты
[02:15.000 --> 02:19.000]  как совокупность счетов. Вот есть разные участники, у них есть счет,
[02:19.000 --> 02:23.000]  там лежит какая-то сумма. Такое моментальное состояние.
[02:23.000 --> 02:27.000]  Мы вместо этого сегодня будем говорить не про моментальное состояние,
[02:27.000 --> 02:31.000]  мы будем говорить про движение этих самых монет. Мы будем наши деньги описывать в движении,
[02:31.000 --> 02:35.000]  а именно с помощью транзакций, которые перемещают деньги.
[02:35.000 --> 02:39.000]  У нас будет два типа транзакций. На всякий случай мы сейчас говорим про какие-то абстрактные
[02:39.000 --> 02:43.000]  электронные деньги, какие-то абстрактные цифровые монеты, не про биткоин.
[02:43.000 --> 02:47.000]  Когда это начнется, это будет оговорено явно.
[02:47.000 --> 02:51.000]  А пока мы просто фантазируем, как бы мы могли электронные деньги себе представить.
[02:51.000 --> 02:55.000]  Мы представляем их в виде набора транзакций.
[02:55.000 --> 02:59.000]  Первый тип транзакций, который у нас будет,
[02:59.000 --> 03:05.000]  это транзакция, которая перемещает деньги от одного участника к другому.
[03:05.000 --> 03:11.000]  У нас есть Алиса, у нас есть транзакция, которую она выпускает,
[03:11.000 --> 03:15.000]  и в этой транзакции она переводит деньги Бобу.
[03:15.000 --> 03:19.000]  Какое-то количество монет.
[03:19.000 --> 03:23.000]  Это спент-транзакция.
[03:27.000 --> 03:33.000]  И понятно, что эти монеты должны откуда-то браться, поэтому нам нужен второй тип транзакции,
[03:33.000 --> 03:37.000]  когда монеты берутся из воздуха, просто печатаются, чеканятся.
[03:41.000 --> 03:47.000]  Вот транзакция, которая чеканет монеты.
[03:47.000 --> 03:55.000]  Понятно, что эти транзакции выпускают участники Алиса.
[03:55.000 --> 03:59.000]  А вот эти транзакции выпускают кто?
[03:59.000 --> 04:03.000]  Центральный банк, давайте скажем так.
[04:03.000 --> 04:07.000]  Будет странно, если Алиса сможет печатать себе деньги.
[04:07.000 --> 04:09.000]  Еще будет странно, если Боб может выпустить такую транзакцию,
[04:09.000 --> 04:11.000]  которая берет в Алис эти цемонеты и посылает ему.
[04:11.000 --> 04:15.000]  Поэтому, разумеется, нам нужна криптография, и мы каждую транзакцию
[04:15.000 --> 04:17.000]  составляем в свою подпись.
[04:17.000 --> 04:25.000]  Алиса подписывает свою транзакцию, что действительно это она переводит деньги Бобу.
[04:25.000 --> 04:29.000]  Если Боб получил деньги, то, видимо, он их собирается потратить.
[04:29.000 --> 04:32.000]  Для того чтобы потратить, он должен выпустить свою транзакцию,
[04:32.000 --> 04:35.000]  которая каким-то образом склеится вот с этой.
[04:35.000 --> 04:37.000]  Это будет выглядеть так у нас.
[04:37.000 --> 04:47.000]  Пусть у нас есть транзакция первая, которая переводит Бобу цемонет.
[04:47.000 --> 04:52.000]  Она подписана Алисой.
[04:52.000 --> 04:56.000]  И есть транзакция, которую выпускает сам Боб,
[04:56.000 --> 05:01.000]  потому что он хочет свои монеты, которые он получил от Алиса, потратить.
[05:05.000 --> 05:10.000]  Купить себе новую Феррари.
[05:10.000 --> 05:14.000]  Для этого он должен сослаться на транзакцию Алисы,
[05:14.000 --> 05:21.000]  и вот они должны каким-то образом склеиться.
[05:21.000 --> 05:23.000]  Тут есть разные вопросы.
[05:23.000 --> 05:25.000]  Давайте по поводу рексики договоримся.
[05:25.000 --> 05:29.000]  Вот у нас есть такой блок в этой картинке.
[05:29.000 --> 05:33.000]  Мы будем называть его выходом.
[05:33.000 --> 05:38.000]  Вот выход адресует получателя этих самых монет.
[05:38.000 --> 05:43.000]  У нас есть вход.
[05:43.000 --> 05:50.000]  Вход адресует некоторую транзакцию, из которой мы собираемся забрать деньги.
[05:50.000 --> 05:52.000]  Мы сразу ограничим себя.
[05:52.000 --> 05:58.000]  Мы скажем, что если мы транзакцией цепляемся к выходу другой транзакции,
[05:58.000 --> 06:03.000]  то мы тратим все ее монеты.
[06:03.000 --> 06:07.000]  Именно поэтому я рисую монетки на выходе.
[06:07.000 --> 06:11.000]  Как нам адресовать эту транзакцию, которой мы цепляемся?
[06:11.000 --> 06:18.000]  Что мне нужно написать в input?
[06:18.000 --> 06:19.000]  Я напишу следующее.
[06:19.000 --> 06:26.000]  Я вот здесь напишу хэш транзакции, к выходу которой я цепляюсь.
[06:26.000 --> 06:31.000]  Я утверждаю, что нам этого будет достаточно, чтобы однозначно адресовать
[06:31.000 --> 06:35.000]  ту транзакцию, деньги которой мы собираемся потратить.
[06:35.000 --> 06:37.000]  Это пока не очевидно.
[06:37.000 --> 06:40.000]  Почему так можно делать, мы узнаем гораздо позже.
[06:40.000 --> 06:42.000]  Но мы будем делать так.
[06:42.000 --> 06:44.000]  Мы выпускаем такую транзакцию.
[06:44.000 --> 06:49.000]  Разумеется, третья сторона, которая наблюдает за всем этим процессом,
[06:49.000 --> 06:51.000]  банк, который обслуживает все эти транзакции,
[06:51.000 --> 06:54.000]  он должен иметь возможность проверить, что действительно Боб имеет право
[06:54.000 --> 06:56.000]  потратить этот выход.
[06:56.000 --> 06:58.000]  Что вот эту транзакцию выпустил именно Боб.
[06:58.000 --> 07:01.000]  Для этого у нас есть цифровые подписи.
[07:01.000 --> 07:03.000]  Скажем, банк, который эти транзакции обслуживает,
[07:03.000 --> 07:09.000]  он в этом месте выполняет верификацию.
[07:09.000 --> 07:15.000]  У него есть штрихованная транзакция, подписанная Бобом.
[07:15.000 --> 07:17.000]  Эта транзакция переводит сэмонет Бобу.
[07:17.000 --> 07:22.000]  Поэтому, если мы знаем открытый ключ Боба, то мы банк.
[07:22.000 --> 07:26.000]  То мы можем проверить, что действительно эти транзакции могут склеиться.
[07:26.000 --> 07:29.000]  Ну, процедура верификации.
[07:29.000 --> 07:33.000]  Я уже сказал, что если мы цепляемся к другой транзакции,
[07:33.000 --> 07:38.000]  мы тратим весь ее выход.
[07:38.000 --> 07:42.000]  С этим связано очень понятное ограничение.
[07:42.000 --> 07:44.000]  Что если мы, скажем, получили две монеты,
[07:44.000 --> 07:47.000]  и хотим потратить одну из этих монет только,
[07:47.000 --> 07:50.000]  то, кажется, нам это делать неудобно в такой схеме.
[07:50.000 --> 07:54.000]  Поэтому мы скажем, что у транзакций может быть много выходов.
[07:54.000 --> 07:59.000]  И если мы хотим взять одну монету из наших двух
[07:59.000 --> 08:01.000]  и потратить вторую оставить себе,
[08:01.000 --> 08:06.000]  то для этого у нас есть вот такая конструкция.
[08:06.000 --> 08:10.000]  Есть транзакция Алиса,
[08:10.000 --> 08:16.000]  из которой мы получаем две монеты.
[08:16.000 --> 08:25.000]  И мы выпускаем свою транзакцию.
[08:25.000 --> 08:32.000]  Один выход мы отправляем в магазин,
[08:32.000 --> 08:37.000]  а второй выход мы отправляем себе.
[08:37.000 --> 08:38.000]  Ну вот, сдача.
[08:38.000 --> 08:41.000]  Получили сдачу одну монету.
[08:41.000 --> 08:50.000]  В общем случае мы скажем, что транзакции выглядят как вот такие вот спруты.
[08:50.000 --> 09:01.000]  У них может быть много выходов.
[09:01.000 --> 09:13.000]  И много входов.
[09:13.000 --> 09:25.000]  Ну и что разумно потребовать относительно соотношения вот этих ЦИ и ЦАО?
[09:25.000 --> 09:28.000]  Чтобы сумма на входах,
[09:28.000 --> 09:30.000]  количество монет, которые мы получаем на вход,
[09:30.000 --> 09:35.000]  было бы не меньше, чем количество монет, которые мы отправляем на выход.
[09:35.000 --> 09:36.000]  Почему не равно?
[09:36.000 --> 09:39.000]  Ну вот увидим чуть позже, но не равно будет больше.
[09:39.000 --> 09:42.000]  Если странно, то вообще-то что равно пока.
[09:42.000 --> 09:44.000]  Ну уж точно не меньше.
[09:44.000 --> 09:48.000]  Потому что это было бы подозрительно.
[09:48.000 --> 09:50.000]  Итак, значит, мы ограничились.
[09:50.000 --> 09:54.000]  Мы сказали, что можно потратить выход транзакции только целиком.
[09:54.000 --> 09:56.000]  Но можно получать сдачу.
[09:56.000 --> 09:58.000]  Ну и как-то можно более гибко распределять монеты.
[09:58.000 --> 10:00.000]  То есть можно собирать их из разных выходов.
[10:00.000 --> 10:03.000]  И тоже тратить довольно по-разному.
[10:03.000 --> 10:06.000]  Вот это ограничение, что мы тратим выход транзакции целиком.
[10:06.000 --> 10:10.000]  Заодно нам решает проблема, которая осталась с прошлого раза.
[10:10.000 --> 10:12.000]  А именно exactly once.
[10:12.000 --> 10:16.000]  Мы в прошлый раз придумывали в PBFT, что же может делать византийский праймари.
[10:16.000 --> 10:18.000]  Мы сказали, что он может выкидывать транзакции.
[10:18.000 --> 10:20.000]  Мы с этим боролись с тайм-аутами.
[10:20.000 --> 10:22.000]  Мы сказали, что он может назначать разные команды.
[10:22.000 --> 10:25.000]  Разным командам один и тот же порядковый номер.
[10:25.000 --> 10:31.000]  Мы с этим поборолись с разными фазами prepare, с собиранием сертификатов.
[10:31.000 --> 10:35.000]  И у нас была проблема с тем, что праймари может дублировать транзакции.
[10:35.000 --> 10:42.000]  Даже если он их будет дублировать, то понятно, что одна из транзакций потратит выход целиком.
[10:42.000 --> 10:45.000]  И вторая транзакция потратить его не сможет.
[10:45.000 --> 10:51.000]  Но правда, в этом-то и проблема, что непонятно, кто из них первый, а кто из них вторая транзакция.
[10:51.000 --> 10:57.000]  Вся эта конструкция, она действительно будет работать, но не решает проблемы, которые называются double spend.
[10:57.000 --> 11:04.000]  А именно вот Боб, получив две монеты от Алисы, может потратить еще дважды.
[11:04.000 --> 11:07.000]  Он может выпустить две транзакции, которые эту монету тратит.
[11:07.000 --> 11:11.000]  И каждый из них пройдет верификацию, потому что действительно обе эти транзакции выпустил Боб.
[11:11.000 --> 11:15.000]  Они обе могут приконнектиться к одному и тому же выходу.
[11:15.000 --> 11:21.000]  Значит, Боб в этом смысле может этот выход использовать, может эти монеты потратить.
[11:21.000 --> 11:25.000]  Но вот для того, чтобы такие проблемы решить, нам нужно транзакцию порядочить.
[11:25.000 --> 11:33.000]  Нам нужно вести на ней глобальный порядок, тогда правила валидации модифицируются и примут свой разумный вид.
[11:33.000 --> 11:39.000]  Транзакция штрихованная может потратить выход этой нештрихованной транзакции,
[11:39.000 --> 11:47.000]  если мы проверяем цифровую подпись и она сходится, то есть действительно деньги адресуются нам.
[11:47.000 --> 11:56.000]  Плюс не было до этого в нашем глобальном порядке другой транзакции, которая уже успела бы потратить вот такой вот выход.
[11:56.000 --> 12:02.000]  Так что к нашим транзакциям нужно, все наши транзакции нужно упорядочить.
[12:02.000 --> 12:09.000]  И для этого нам потребуется сущность, которая называется, поскольку мы уже говорим про криптовалюта,
[12:09.000 --> 12:12.000]  она называется в этом контексте Ledger.
[12:20.000 --> 12:26.000]  Все транзакции, которые выпускаются пользователями в этом Ledger получат свои порядковые номера.
[12:26.000 --> 12:36.000]  Как-то будут цепляться друг за друга, то есть вся наша электронная, все наши электронные деньги образуют вот такой вот граф из таких вот спрутиков,
[12:36.000 --> 12:42.000]  которые цепляются друг за друга, но при этом на них есть сквозной порядок для того, чтобы мы могли валидировать эти транзакции,
[12:42.000 --> 12:46.000]  проверять, что выход еще действительно не потрачен.
[12:46.000 --> 12:55.000]  Ну вот, общее устройство это конструкция. Вот так выглядят электронные деньги, электронные монеты.
[12:55.000 --> 13:03.000]  Давайте теперь подумаем, чего же нам не хватает в этой конструкции. Нам не хватает инфраструктуры, которая бы все это обслуживала.
[13:03.000 --> 13:13.000]  Во-первых, нам не хватает инфраструктуры для поддержки вот этого самого Ledger, для лого-транзакций.
[13:13.000 --> 13:19.000]  Кто-то должен его хранить, кто-то должен получать транзакции, упорядочивать их, верифицировать их.
[13:19.000 --> 13:29.000]  Во-вторых, нам нужна организация, нужен участник, который сможет печатать монеты, чеканить монеты.
[13:29.000 --> 13:34.000]  Это нужно делать аккуратно, потому что вы понимаете, что если вдруг центральный банк напечатает грузовик денег завтра,
[13:34.000 --> 13:39.000]  то деньги станут дешевле. Поэтому этот процесс должен быть какой-то очень понятный, очень контролируемый.
[13:39.000 --> 13:46.000]  То есть, во-первых, поддержка этого самого Ledger, бухгалтерской книги, во-вторых, чеканка монет.
[13:46.000 --> 13:55.000]  В-третьих, что еще нам нужно для того, чтобы вся эта конструкция работала?
[13:55.000 --> 14:03.000]  Ну, я сказал, что это часть Ledger, то есть мы упорядочиваем транзакции, и с помощью этого порядка мы верифицируем.
[14:03.000 --> 14:08.000]  И что ты имеешь в виду?
[14:08.000 --> 14:14.000]  Помимо банка, который будет поддерживать этот транзакций, помимо центрального банка, который будет печатать деньги,
[14:14.000 --> 14:20.000]  нам еще нужен удостоверяющий центр, который сможет сопоставлять вот этого самого Боба,
[14:20.000 --> 14:26.000]  который записан в адресатах, и его публичный ключ.
[14:26.000 --> 14:34.000]  Вот Боб, а это identity здесь.
[14:34.000 --> 14:40.000]  Итого, мы должны решить три задачи, чтобы эта схема действительно заработала.
[14:40.000 --> 14:45.000]  Но можно было бы сказать, что пусть три эти задачи решаются банком.
[14:45.000 --> 14:54.000]  Он будет и монет, мы ему доверяем, он будет печатать чеканец монеты, он будет упорядочивать транзакции, их верифицировать.
[14:54.000 --> 15:00.000]  И чтобы с ним работать, нужно к нему будет ногами прийти, показать паспорт, показать публичный ключ,
[15:00.000 --> 15:09.000]  и он выпишет сертификат, что, действительно, эта транзакция, в смысле этот публичный ключ, связан с нами.
[15:09.000 --> 15:15.000]  Но это не то, чего мы хотим. Если мы не хотим доверять банку, или мы не хотим доверять разным организациям,
[15:15.000 --> 15:23.000]  если мы распределим между ними эти обязанности. Мы хотим доверять алгоритмам, хотим доверять криптографии.
[15:23.000 --> 15:27.000]  И вот эту централизацию мы хотим исключить.
[15:27.000 --> 15:33.000]  Вот тут мы переходим к Биткоину. Давайте я вам покажу статью.
[15:39.000 --> 15:43.000]  Мне очень ярко видно, но лучше, наверное, не получится сейчас.
[15:43.000 --> 15:50.000]  Статья была написана в 2008 году, и поинт этой статье, что давайте никому не доверять.
[15:50.000 --> 15:56.000]  Давайте всю эту конструкцию организуем децентрализованно.
[15:56.000 --> 16:01.000]  Эта статья довольно любопытная, потому что... Ну я по ходу дела объясню, почему.
[16:01.000 --> 16:06.000]  Ну вот для нас, для людей, которые слушают курс про распределенную систему, она любопытна тем,
[16:06.000 --> 16:10.000]  что мы собираемся решать довольно понятную нам задачу.
[16:10.000 --> 16:17.000]  Мы хотим что-то децентрализованно-распределенно упорядочивать, мы этим давно занимаемся.
[16:17.000 --> 16:22.000]  И в Биткоине возникает та же самая задача. Ну, еще пара дополнительных задач.
[16:22.000 --> 16:28.000]  Но все же, основная, наверное, все же здесь. Точнее, они совмещены все, ладно, я буду аккуратнее говорить.
[16:28.000 --> 16:32.000]  Так вот, эта статья решает известную задачу.
[16:32.000 --> 16:39.000]  Но при этом эта статья полностью вырвана из контекста всей теории, которую мы тут уже три месяца обсуждаем.
[16:39.000 --> 16:46.000]  В ней нет ни слова про консенсус, в ней нет ни слова про какие-то FLP, про все, что мы говорили, про кворумы.
[16:46.000 --> 16:50.000]  Здесь абсолютно альтернативная лексика, абсолютно альтернативный мир.
[16:50.000 --> 16:55.000]  Эта статья родилась не в Академии, она родилась в сообществе криптоанархистов, ну и как их называть.
[16:55.000 --> 17:00.000]  В общем, у них там абсолютно своя атмосфера, своя лексика, свои задачи, свой взгляд на мир.
[17:00.000 --> 17:05.000]  И поэтому, если вы будете читать статью, то в ней ничего этого не будет.
[17:05.000 --> 17:10.000]  Но наша цель сегодня не просто объяснить, как Биткоин работает, ну, разумеется, само собой,
[17:10.000 --> 17:16.000]  а еще и в том, чтобы вот этот Биткоин и все, что мы дальше будем придумывать, как-то погрузить в ту теорию,
[17:16.000 --> 17:21.000]  в ту лексику, в те задачи, которые мы с вами уже давно рассматриваем.
[17:21.000 --> 17:26.000]  В самой статье этого ничего нет, но это не значит, что в Биткоине на самом деле этого нет.
[17:26.000 --> 17:31.000]  Как раз вот параллелей будет очень много, и параллелей будет очень много с прошлым алгоритмом,
[17:31.000 --> 17:38.000]  то есть будут решаться одни и те же задачи примерно разным способом, но декомпозиция будет, я бы сказал, что схожая.
[17:38.000 --> 17:42.000]  Идеи будут похожие.
[17:42.000 --> 17:47.000]  Ну и еще один любопытный момент про это статью.
[17:47.000 --> 17:51.000]  Ну, смотрите, сколько места оно занимает.
[17:56.000 --> 18:00.000]  Вот, кончается какой-то программой маленькой на языке C.
[18:00.000 --> 18:05.000]  Ну, в общем, так, если вы, наверное, представляете, академические статьи не пишут.
[18:05.000 --> 18:09.000]  Это такой очень короткий дизайн-док или, не знаю, черновик дизайн-дока.
[18:09.000 --> 18:12.000]  Как будто бы торопился, очень коротко, емко все написал.
[18:12.000 --> 18:16.000]  Тут все, что нужно, описано. Все остальные детали можно додумать.
[18:16.000 --> 18:21.000]  Вот супер-емко, но при этом вы понимаете, чем эта статья закончилась для современного мира.
[18:21.000 --> 18:27.000]  Какой эффект она на него произвела.
[18:27.000 --> 18:30.000]  В общем, удивительная, совершенно удивительная статья.
[18:30.000 --> 18:35.000]  Почитайте она, действительно, пять страничек. Можно это за час освоить.
[18:35.000 --> 18:41.000]  Не то чтобы написано было супер-понятно, я бы сказал, в некоторых местах можно было написать аккуратнее.
[18:41.000 --> 18:48.000]  Но все же, она описывает только главные идеи, максимально сжато.
[18:48.000 --> 18:53.000]  Ну, а мы сейчас разберем их, наверное, немного подробнее.
[18:53.000 --> 18:59.000]  Итак, мы с вами теперь переходим, наконец, к Биткоину.
[19:05.000 --> 19:22.000]  Итак, главная идея. Мы хотим избавиться от любой централизации.
[19:22.000 --> 19:28.000]  От удостоверяющего центра, от централизованного печатного станка, от банка, который упорядочивает транзакции.
[19:28.000 --> 19:33.000]  Мы хотим все хранить открыто, децентрализованно.
[19:33.000 --> 19:35.000]  Но давайте поговорим сначала про открытость.
[19:35.000 --> 19:41.000]  Мы собираемся этот грузбук, этот лог транзакций хранить так, чтобы он был доступен всем участникам Биткоина,
[19:41.000 --> 19:46.000]  всем участникам сети, ну, вообще всем людям, которые могут, они могут прийти и все проверить.
[19:46.000 --> 19:50.000]  Это довольно странно, потому что, ну, почему мы доверяем банку?
[19:50.000 --> 19:58.000]  Потому что, видимо, мы хотим сохранить приватность, мы хотим, чтобы наши транзакции не были доступны третьим лицам.
[19:58.000 --> 20:03.000]  Если мы собираемся этот грузбук хранить в открытом виде, то нам нужно эту проблему решать.
[20:03.000 --> 20:06.000]  Биткоин решает ее очень эрегантно.
[20:06.000 --> 20:16.000]  А именно, он избавляется в том числе сразу от удостоверяющего центра следующим способом.
[20:16.000 --> 20:29.000]  Ну, скажем, что identity в Биткоине просто тождественно публичному ключу, открытому ключу.
[20:29.000 --> 20:40.000]  Когда вы адресуете ваши монеты кому-то, вы посылаете их не Бобу, вы посылаете участнику с заданным публичным ключом.
[20:40.000 --> 20:51.000]  Адрес, которому вы адресуете получателя, это все же не публичный ключ, а это хэш от публичного ключа.
[20:51.000 --> 20:54.000]  Каким-то образом еще модифицировано, не очень важно.
[20:54.000 --> 21:01.000]  Вот это адрес.
[21:01.000 --> 21:04.000]  Ну, это такой очень специальный адрес, вы по нему не можете отправить сообщение,
[21:04.000 --> 21:10.000]  только деньги можете отправить по нему. Вот эти деньги потом можно будет получить.
[21:10.000 --> 21:14.000]  Ну, а дальше мы собираемся теперь лог этих транзакций.
[21:14.000 --> 21:16.000]  Да, вот это называется псевдонимность.
[21:16.000 --> 21:21.000]  Это не анонимность, потому что наблюдатель, который смотрит на блокчейн,
[21:21.000 --> 21:28.000]  он может склеить в один подграф все транзакции, которые связаны, в принципе, с одним человеком.
[21:28.000 --> 21:32.000]  Но если вы переиспользуете один и тот же адрес, то все ваши действия склеиваются.
[21:32.000 --> 21:38.000]  Это немного неприятный эффект, и можно с этим разными забавными способами бороться.
[21:38.000 --> 21:40.000]  Это псевдонимность.
[21:40.000 --> 21:45.000]  И вот автор статьи со то, что на ком-то это тоже псевдоним, совсем не понятно, кто это,
[21:45.000 --> 21:52.000]  что это за человек, жив ли он, это неизвестно.
[21:52.000 --> 22:00.000]  Итак, в наших транзакциях будут теперь вместо получателей хэшированные публичные ключи.
[22:00.000 --> 22:08.000]  И мы собираемся граф этих транзакций, граф этих спрутиков, лог, в который мы уложили этот граф,
[22:08.000 --> 22:13.000]  хранить в открытом виде распределенно и децентрализованно.
[22:18.000 --> 22:20.000]  Вот у нас будет большая-большая сеть.
[22:20.000 --> 22:31.000]  И каждый узел в этой сети будет поддерживать копию этого самого логотранзакции.
[22:31.000 --> 22:36.000]  Что важно, в чем принципиальное отличие биткоина от того же PBFT,
[22:36.000 --> 22:40.000]  да почти от всех протоколов, которые мы рассмотрели в этом курсе,
[22:40.000 --> 22:46.000]  в том, что в эту сеть можно свободно заходить, к ней можно свободно присоединяться.
[22:46.000 --> 22:51.000]  У нее нет никакой жесткой конфигурации.
[22:51.000 --> 22:56.000]  Разумеется, мы ее раньше могли переконфигурацию выполнять в том же RAFT или Multipax,
[22:56.000 --> 23:03.000]  но в каждый момент времени конфигурация там все же фиксировалась и через консенсус менялась.
[23:03.000 --> 23:07.000]  Вот здесь алгоритм называется permissionless.
[23:07.000 --> 23:11.000]  Вы можете свободно стать участником этой сети, участвовать в консенсусе,
[23:11.000 --> 23:13.000]  никого в этом не предупреждая.
[23:13.000 --> 23:16.000]  Ни о чем договариваться с другими вам не нужно.
[23:16.000 --> 23:21.000]  И вот именно из этого свойства будут вытекать все различия, которые у нас сегодня появятся.
[23:21.000 --> 23:26.000]  Вот именно эта деталь, именно это свойство поменяет нам весь алгоритм.
[23:29.000 --> 23:35.000]  Как мы сам леджер, как мы сам логотранзакции будем представлять физически?
[23:35.000 --> 23:38.000]  Мы будем представлять его в виде блокчейна.
[23:41.000 --> 23:49.000]  Он состоит из, вы догадываетесь, блоков.
[23:49.000 --> 23:52.000]  Каждый блок – это набор транзакций.
[23:52.000 --> 23:54.000]  Первый блок.
[24:11.000 --> 24:15.000]  Начинается с некоторого блока B0.
[24:21.000 --> 24:26.000]  Почему мы говорим именно про блоки, а не про цепочку транзакций?
[24:26.000 --> 24:30.000]  Пока можно считать, что это такая оптимизация.
[24:30.000 --> 24:35.000]  Так же, как в RSM, не нужно коммитить команды в лог по одной, нужно их объединять в пачке,
[24:35.000 --> 24:39.000]  потому что их просто очень много, и снижать накладные расходы на отдельную транзакцию.
[24:39.000 --> 24:44.000]  Вот так же и здесь можно собирать транзакции в блоки и блоками уже их добавлять.
[24:44.000 --> 24:49.000]  То есть мы снижаем накладные расходы на обслуживание отдельной транзакции.
[24:49.000 --> 24:51.000]  Откуда появляются эти блоки?
[24:51.000 --> 24:55.000]  Вот их формируют узлы сети.
[24:55.000 --> 25:00.000]  Вот у нас есть пользователи, давайте мы разноцветных пользователей сделаем.
[25:00.000 --> 25:04.000]  Вот у нас есть пользователи, давайте мы разноцветных пользователей сделаем.
[25:07.000 --> 25:14.000]  У нас есть пользователям, и они отправляют в сеть свои транзакции.
[25:25.000 --> 25:28.000]  Узлы сети их распространяют через гостепротокол.
[25:28.000 --> 25:34.000]  Вот это еще одно различие, которое сразу является средствами того, что у нас система децентрализованная
[25:34.000 --> 25:36.000]  и конфигурация нефиксированная.
[25:36.000 --> 25:40.000]  Мы не можем отправить сообщение всем, потому что всех непонятно сколько,
[25:40.000 --> 25:42.000]  и это число постоянно меняется.
[25:42.000 --> 25:44.000]  Поэтому мы общаемся через гостепротокол.
[25:44.000 --> 25:46.000]  Суть его такова.
[25:46.000 --> 25:49.000]  Вы не знаете всех участников сети, но вы знаете каких-то участников сети.
[25:49.000 --> 25:53.000]  Условно такую некоторую окрестность вашу, не то чтобы географическая окрестность.
[25:53.000 --> 25:59.000]  И каждый раунд вы выбираете случайный узел из числа тех, которые вы знаете,
[25:59.000 --> 26:01.000]  и обмениваете с ним информацией.
[26:01.000 --> 26:03.000]  Говорите, что у меня появились такие транзакции,
[26:03.000 --> 26:06.000]  он вам тоже сообщает о каких-то своих изменениях.
[26:06.000 --> 26:10.000]  Вот если у вас есть такой протокол, то можно аккуратно и сложно показать,
[26:10.000 --> 26:16.000]  что для того, чтобы распространить какие-то сведения в сети, вам достаточно, например, алгорифма итерации.
[26:16.000 --> 26:21.000]  Если они появляются на одном узле, то за разумное время они распространяются по всем.
[26:22.000 --> 26:28.000]  Эти узлы принимают транзакции от пользователей,
[26:28.000 --> 26:32.000]  раздают их через гостеп и формируют блоки.
[26:35.000 --> 26:42.000]  Где-то на этом узле рождается очередной блок.
[26:43.000 --> 26:48.000]  И узел, накопив этот блок, хочет его добавить в блокчейн.
[26:51.000 --> 27:11.000]  Но, разумеется, в этой сети, желающих добавить очередной блок, блокчейн довольно много.
[27:11.000 --> 27:18.000]  Поэтому мы должны придумать, как именно мы будем выбирать того узла, который сможет свой блок добавить.
[27:18.000 --> 27:21.000]  Кто должен это сделать?
[27:21.000 --> 27:26.000]  Как мы раньше это делали? Раньше мы выбирали для этого лидера.
[27:26.000 --> 27:32.000]  И он получал все транзакции, упорядочивал их, но, может быть, группировал в пачке для эффективности
[27:32.000 --> 27:35.000]  и назначал им порядковые номера.
[27:35.000 --> 27:39.000]  Здесь у нас лидера не будет, но это довольно сложно было бы сделать,
[27:39.000 --> 27:46.000]  потому что не понятно, сколько всего узлов, и каждый из них может пропасть или оказаться предателем.
[27:46.000 --> 27:54.000]  Поэтому мы разыгрываем право добавить в блокчейн очередной блок в распределенную лотерею.
[27:54.000 --> 27:57.000]  Как эта лотерея устроена?
[27:57.000 --> 28:03.000]  Это, наверное, самое известное новшество Биткоина.
[28:03.000 --> 28:09.000]  Но придумана эта идея совсем не там, придумана она в другом контексте.
[28:09.000 --> 28:14.000]  Представим, что мы пишем почтовый сервер.
[28:17.000 --> 28:22.000]  Давайте это здесь нарисуем.
[28:22.000 --> 28:29.000]  И есть какие-то пользователи, которые сюда отправляют свои письма.
[28:29.000 --> 28:31.000]  Почтовый сервер.
[28:31.000 --> 28:36.000]  Вот пользователи бывают честными, и отлично мы их письма должны принимать.
[28:36.000 --> 28:38.000]  А бывают спамеры.
[28:38.000 --> 28:42.000]  И они хотят положить в этот почтовый сервер миллион писем.
[28:42.000 --> 28:46.000]  Вообще говоря, понятно, что мы хотим их запретить.
[28:46.000 --> 28:48.000]  Но как это сделать?
[28:48.000 --> 28:50.000]  Есть идеи.
[28:53.000 --> 28:58.000]  Просто запретить одному полюсу, положить в почтовый ящик миллион писем нельзя.
[28:58.000 --> 29:04.000]  Потому что, в конце концов, если узел спамер, то он может наплатить несколько виртуальных сущностей.
[29:04.000 --> 29:08.000]  И это как будто будет миллион участников, которые отправили по одному письму.
[29:09.000 --> 29:14.000]  Ну, возможно, ты не хочешь читать чужие письма.
[29:14.000 --> 29:18.000]  Нет, не можешь, наверное.
[29:18.000 --> 29:22.000]  Хочешь какое-то машинное обучение здесь запустить?
[29:22.000 --> 29:26.000]  Нет, это не тот курс.
[29:26.000 --> 29:32.000]  Так вот, смотрите, мы не можем просто настоять rate limit,
[29:32.000 --> 29:37.000]  потому что rate limit, как правило, привязан каким-то участником к identity.
[29:37.000 --> 29:41.000]  А эти identity можно создавать виртуальные.
[29:41.000 --> 29:43.000]  Так что мы хотим поступить другим способом.
[29:43.000 --> 29:49.000]  Мы хотим, чтобы каждый отправитель вместе со своим письмом
[29:49.000 --> 29:53.000]  приложил некоторое доказательство криптографическое этого факта,
[29:53.000 --> 29:58.000]  что это отправка письма, он за нее заплатил, короче говоря.
[30:00.000 --> 30:04.000]  Так что, если даже у нас будет спамер с миллионами виртуальных сущностей,
[30:04.000 --> 30:09.000]  с миллиона таких марионеток, то ему все равно будет дорого отправить миллион письм,
[30:09.000 --> 30:14.000]  потому что виртуальной сущности у него много, а физические ресурсы ограничены все же.
[30:14.000 --> 30:18.000]  Как же будет выглядеть доказательство?
[30:18.000 --> 30:23.000]  Почтовый сервер выбирает, фиксирует с самого начала хэш-функцию h
[30:23.000 --> 30:32.000]  и некоторый параметр d, сложность.
[30:32.000 --> 30:41.000]  И говорит, что если ты, допустим, Алиса частная, хочешь отправить мне письмо,
[30:41.000 --> 30:48.000]  положить письмо в почтовый ящик, то, пожалуйста, возьми свое сообщение
[30:48.000 --> 31:01.000]  и найди такое, это называется нонс, что хэш от конкатинации твоего сообщения и нонс
[31:01.000 --> 31:07.000]  даст хэш, который будет выглядеть так. Он будет начинаться с D0.
[31:07.000 --> 31:12.000]  Вот там, 16-речная запись.
[31:12.000 --> 31:16.000]  Понятная идея?
[31:16.000 --> 31:21.000]  Нонс, как он переводится или что?
[31:21.000 --> 31:37.000]  Вот нонс, смысл его, как называется вся конструкция, называется proof of work.
[31:37.000 --> 31:41.000]  Смотрите, в чем смысл. Хэш-функция криптографическая, что это значит?
[31:41.000 --> 31:46.000]  По ней можно думать так, что вы подаёте ей вход,
[31:46.000 --> 31:50.000]  и внутри хэш-функции сидит такой маленький гоблин,
[31:50.000 --> 31:54.000]  и он подбрасывает несколько раз монетку.
[31:54.000 --> 32:00.000]  И она 256 раз подбрасывает, и получает 256 случайных битов.
[32:00.000 --> 32:07.000]  И запоминает, что вот этому входу соответствует такой выход.
[32:07.000 --> 32:11.000]  Это такая идеальная криптографическая хэш-функция.
[32:11.000 --> 32:17.000]  Люди пытаются строить хэш-функции, которые на такие идеальные похожи.
[32:17.000 --> 32:21.000]  То есть они обладают таким эффектом лавинным, что вы меняете один бит на входе,
[32:21.000 --> 32:24.000]  и на выходе переворачивается половина бит.
[32:24.000 --> 32:31.000]  Если хэш-функция ведет себя таким образом, то найти этот самый нонс,
[32:31.000 --> 32:35.000]  который бы дал Дэн Урей на выходе, никаким разумным способом нельзя.
[32:35.000 --> 32:40.000]  Нет никакой стратегии лучше, чем просто перебирать все подряд значения.
[32:40.000 --> 32:43.000]  Так что если Алиса хочет отправить письмо, то она должна выбрать,
[32:43.000 --> 32:46.000]  возьмет нонс, не знаю, ноль, и потом будет его инкремитировать до тех пор,
[32:46.000 --> 32:50.000]  пока хэш не станет вот такого вида.
[32:50.000 --> 32:52.000]  Ну и Дэ подбирается таким...
[32:52.000 --> 32:55.000]  Да, никакой лучшей стратегии для того, чтобы подобрать такой нонс
[32:55.000 --> 33:02.000]  для данного сообщения данной хэш-функции и для данного значения параметра D, нет.
[33:02.000 --> 33:06.000]  Поэтому если Алиса вместе со своим письмом приложила этот самый нонс,
[33:06.000 --> 33:09.000]  то таким образом она доказывает почтовому серверу,
[33:09.000 --> 33:13.000]  что она действительно потратила некоторые усилия, потратила процессорное время,
[33:13.000 --> 33:16.000]  потратила электричество для того, чтобы письмо отправить.
[33:16.000 --> 33:20.000]  D выбирается таким образом, чтобы Алисе было нехлопотно отправить одно письмо.
[33:20.000 --> 33:26.000]  Она секунду вычисляет хэш-функцию у себя на процессоре, и письмо отправится.
[33:26.000 --> 33:30.000]  Но если вы спаммер, который хочет отправить с одного компьютера миллион писем,
[33:30.000 --> 33:32.000]  то вам потребуется уже миллион секунд потратить,
[33:32.000 --> 33:35.000]  потому что сообщения отличаются адресатами, видимо,
[33:35.000 --> 33:38.000]  поэтому они меняют хэш. Нужен для каждого свой нонс.
[33:38.000 --> 33:42.000]  И никаким образом подобрать много разных нонсов для разных M нельзя уже,
[33:42.000 --> 33:45.000]  кроме как сделать много-много вычислений.
[33:47.000 --> 33:49.000]  Идея понятна?
[33:55.000 --> 33:57.000]  Одной...
[33:57.000 --> 33:59.000]  А зачем?
[33:59.000 --> 34:04.000]  Если ты спаммер, ты хочешь отправить не одно сообщение человеку миллион раз,
[34:04.000 --> 34:07.000]  а, наверное, миллион сообщений похожих, разным людям,
[34:07.000 --> 34:10.000]  у них адресаты разные, заголовки разные.
[34:11.000 --> 34:15.000]  Здесь мы понимаем, что в этом сообщении, конечно, и заголовки лежат.
[34:15.000 --> 34:17.000]  То есть кто получит этого?
[34:24.000 --> 34:26.000]  Мне из головы выпало, к сожалению.
[34:29.000 --> 34:37.000]  Ну, что-то такое, да, не очень хорошо переводится, насколько я помню.
[34:40.000 --> 34:44.000]  Итак, у нас есть такая идея, как она относится к распределенной лотереи.
[34:44.000 --> 34:55.000]  Смотрите, когда мы добавляем новый блок, мы же добавляем в какую-то позицию блокчейна.
[34:55.000 --> 34:59.000]  Мы должны... Во-первых, этот блок состоит из каких-то транзакций,
[34:59.000 --> 35:02.000]  во-вторых, он следует за каким-то другим блоком.
[35:02.000 --> 35:04.000]  Вот если мы блок нарисуем,
[35:08.000 --> 35:14.000]  то в нем есть транзакция и есть заголовок.
[35:14.000 --> 35:16.000]  Вот заголовок образован чем?
[35:16.000 --> 35:22.000]  Во-первых, в нем лежит такой кумулятивный хэш всех транзакций.
[35:22.000 --> 35:29.000]  Ну, как он считается, это тоже отдельная история, его нужно считать аккуратно,
[35:29.000 --> 35:32.000]  с помощью дерева-меркла.
[35:32.000 --> 35:37.000]  Кроме того, в этом блоке есть то, что называется хэш-поинтер.
[35:37.000 --> 35:41.000]  Это хэш предыдущего блока.
[35:41.000 --> 35:46.000]  То есть так мы ссылаемся на блок, за которым мы хотим прицепить наш.
[35:52.000 --> 35:57.000]  Ну и, собственно, нонс.
[35:57.000 --> 36:03.000]  И мы, если мы хотим выиграть в распределенную лотерею, мы покупаем беретик.
[36:03.000 --> 36:05.000]  Мы придумываем нонс.
[36:05.000 --> 36:12.000]  И считаем хэш от хэш-поинтера, сконкатинированного с хэшом
[36:12.000 --> 36:16.000]  кумулятивного всех транзакций блоки, сконкатинированным с нонсом.
[36:16.000 --> 36:22.000]  Давайте даже рисуем побольше.
[36:22.000 --> 36:28.000]  Вот, и вот этот хэш должен принять известный нам уже вид.
[36:28.000 --> 36:31.000]  Он должен начинаться с D0.
[36:31.000 --> 36:47.000]  Вот, поиск этого, вот такая задача найти нонс для данного блока,
[36:47.000 --> 36:50.000]  для данного набора транзакций и для данного хэш-поинтера,
[36:50.000 --> 36:54.000]  в биткоине называется пазлом.
[36:54.000 --> 36:59.000]  А поиск решения этого нонса, то есть перебор разных значений случайных,
[36:59.000 --> 37:01.000]  называется майнинга.
[37:01.000 --> 37:04.000]  Ну а узел, который занимается этим всем, называется майнером.
[37:04.000 --> 37:07.000]  То есть он копает землю в надежде найти вот этот золотой самородок,
[37:07.000 --> 37:12.000]  который позволит ему поместить свой блок в блокчейн.
[37:12.000 --> 37:14.000]  Идея понятна?
[37:14.000 --> 37:18.000]  Вот этот процесс полностью децентрализованный.
[37:18.000 --> 37:20.000]  Этим занимается каждый отдельный узел сети.
[37:20.000 --> 37:22.000]  Сколько этих узлов непонятно.
[37:22.000 --> 37:27.000]  Каждый из них независимо от других перебирает свои нонс.
[37:27.000 --> 37:34.000]  Ну и рано или поздно кто-то из них должен выиграть.
[37:34.000 --> 37:36.000]  Давайте подумаем, на что это похоже.
[37:36.000 --> 37:38.000]  Я вот говорю, что все, что с ним будет возникать,
[37:38.000 --> 37:42.000]  должно быть похоже на то, что мы уже видели в курсе.
[37:42.000 --> 37:45.000]  Будет очень странно, если бы мы придумали что-то...
[37:45.000 --> 37:47.000]  Когда появился биткоин, это действительно выглядело
[37:47.000 --> 37:49.000]  как что-то совершенно принципиально новое,
[37:49.000 --> 37:52.000]  но все же тут можно привести очень прямые параллели.
[37:52.000 --> 37:55.000]  Вот еще раз напомню, какую задачу мы решали.
[37:55.000 --> 37:57.000]  Мы решали задачу упорядочивания этих блоков.
[37:57.000 --> 37:59.000]  Кто назначит следующий?
[37:59.000 --> 38:01.000]  Раньше этим занимался лидер.
[38:01.000 --> 38:03.000]  Вот в RAF-те мы выбирали лидера каким-то способом.
[38:03.000 --> 38:07.000]  В мультипаксе вообще бы как можно было выбирать.
[38:07.000 --> 38:10.000]  В PBFT нужно уже было выбирать аккуратнее.
[38:10.000 --> 38:11.000]  Почему?
[38:11.000 --> 38:13.000]  Потому что выбор лидера это та еврестика,
[38:13.000 --> 38:15.000]  которая обеспечивает нам свойства Лайонес.
[38:15.000 --> 38:18.000]  То есть что каждая транзакция рано или поздно попадет
[38:18.000 --> 38:22.000]  в наш журнал лог-транзакций.
[38:22.000 --> 38:25.000]  Но мы не знаем, каким узлам можно доверять и каким нет.
[38:25.000 --> 38:28.000]  Если узел в чем-то подозревается,
[38:28.000 --> 38:30.000]  то не факт, что он византийский,
[38:30.000 --> 38:32.000]  может быть просто он залип на сборке мусора.
[38:32.000 --> 38:34.000]  Поэтому мы с одной стороны должны каждому дать шанс
[38:34.000 --> 38:36.000]  и в то же время гарантировать,
[38:36.000 --> 38:38.000]  что каждая транзакция попадет в блокчейн,
[38:38.000 --> 38:42.000]  то есть рано или поздно лидером станет честный узел.
[38:42.000 --> 38:44.000]  Вот для этого мы придумали в прошлый раз новую идею,
[38:44.000 --> 38:46.000]  которой у нас до этого не было.
[38:46.000 --> 38:48.000]  Называлась ротация праймари.
[38:48.000 --> 38:51.000]  У нас была конфигурация из четырех узлов,
[38:51.000 --> 38:53.000]  чтобы перевести один византийский сбой.
[38:53.000 --> 38:55.000]  И мы праймари назначали по кругу.
[38:55.000 --> 38:57.000]  Сначала это был просто первый узел,
[38:57.000 --> 38:59.000]  если мы его подозревали в чем-то,
[38:59.000 --> 39:01.000]  то мы меняли, переводили систему через эпоху
[39:01.000 --> 39:05.000]  и праймари становился второй узел и так по кругу.
[39:05.000 --> 39:09.000]  Вот видите ли вы аналогию с этим протоколом,
[39:09.000 --> 39:11.000]  с этой лотереей?
[39:17.000 --> 39:20.000]  Ну вот мы точно также не пытаемся здесь выбрать
[39:20.000 --> 39:24.000]  этот узел, который будет единолично назначить порядок.
[39:24.000 --> 39:28.000]  Мы не знаем, кто этот честный,
[39:28.000 --> 39:30.000]  поэтому мы просто пробуем всех.
[39:30.000 --> 39:32.000]  Но раньше мы могли перебирать всех по кругу,
[39:32.000 --> 39:34.000]  потому что у нас была жесткая конфигурация.
[39:34.000 --> 39:36.000]  Теперь у нас система permissionless,
[39:36.000 --> 39:38.000]  в нее можно просто приходить в любой момент.
[39:38.000 --> 39:42.000]  Поэтому мы пробуем случайные узлы.
[39:42.000 --> 39:44.000]  Но смысл точно такой же, что рано или поздно,
[39:44.000 --> 39:46.000]  если у нас есть транзакции от честного пользователя
[39:46.000 --> 39:48.000]  и честных майнеров,
[39:48.000 --> 39:50.000]  и честных майнеров довольно много,
[39:50.000 --> 39:54.000]  то в какой-то момент честный майнер выиграет в эту лотерею
[39:54.000 --> 39:56.000]  и транзакция попадет в лог.
[39:56.000 --> 40:00.000]  Но вот в BFT мы меняли эпоху и перевыбирали праймари,
[40:00.000 --> 40:04.000]  когда мы старого праймари в чем-то подозревали коллективно,
[40:04.000 --> 40:06.000]  а здесь мы назначаем нового праймари,
[40:06.000 --> 40:10.000]  то есть новый узел, который формирует и добавляет новый блок,
[40:10.000 --> 40:12.000]  просто на каждом раунде.
[40:12.000 --> 40:16.000]  Это происходит просто на каждом очередном блоке,
[40:16.000 --> 40:20.000]  где выбирается свой праймари, так условно назовем.
[40:24.000 --> 40:26.000]  Получилось?
[40:30.000 --> 40:34.000]  Тут нет уже никаких эпох в том-то и дело.
[40:34.000 --> 40:36.000]  Это в BFT они были, потому что у нас была эпоха,
[40:36.000 --> 40:40.000]  которой руководил некоторый праймари,
[40:40.000 --> 40:44.000]  в которой этот праймари назначал порядковые номера транзакции.
[40:44.000 --> 40:48.000]  Но у нас эпоха вырвелась в один блок.
[40:48.000 --> 40:52.000]  В каждой эпохе условной выбирается новый лидер,
[40:52.000 --> 40:54.000]  и он добавляет один новый блок.
[40:54.000 --> 40:56.000]  Так что об этом можно просто уже не думать.
[40:56.000 --> 40:58.000]  Но идея точно такая же.
[40:58.000 --> 41:00.000]  Мы точно таким же образом достигаем лавенес.
[41:00.000 --> 41:02.000]  Мы пробуем разные узлы.
[41:04.000 --> 41:06.000]  Но теперь мы делаем это децентрализованно
[41:06.000 --> 41:08.000]  с помощью такой распределенной лотереи.
[41:08.000 --> 41:10.000]  Каждый узел, независимо от других,
[41:10.000 --> 41:12.000]  ищет вот этот самый нонс.
[41:16.000 --> 41:20.000]  Да, если мы майнер нашли вот этот нонс,
[41:20.000 --> 41:24.000]  достали выигрыш на лотерейный беретик,
[41:24.000 --> 41:26.000]  то это криптографическое доказательство того,
[41:26.000 --> 41:28.000]  что мы проделали некоторую работу,
[41:28.000 --> 41:30.000]  что мы выиграли лотерею,
[41:30.000 --> 41:32.000]  и мы госпом раздаем его другим узлам.
[41:38.000 --> 41:42.000]  И когда другой узел получает от нас блок,
[41:42.000 --> 41:44.000]  получает по сети блок,
[41:44.000 --> 41:48.000]  то вот именно он в этот момент
[41:48.000 --> 41:50.000]  добавляет в его блокчейн
[41:50.000 --> 41:52.000]  и верифицирует транзакции.
[41:54.000 --> 41:56.000]  Он может проверить подпись,
[41:56.000 --> 41:58.000]  и он может проверить,
[41:58.000 --> 42:00.000]  что эта транзакция цепляется
[42:00.000 --> 42:02.000]  к еще не потраченному выходу.
[42:02.000 --> 42:04.000]  То есть эта верификация,
[42:04.000 --> 42:06.000]  она теперь выполняет,
[42:06.000 --> 42:08.000]  она теперь выполняется
[42:08.000 --> 42:10.000]  на каждом узле нашей сети,
[42:10.000 --> 42:12.000]  когда тот получает блок от счастливого майнера.
[42:18.000 --> 42:20.000]  Я бы сказал, что разумеется это проблема,
[42:20.000 --> 42:22.000]  потому что лотерея распределенная,
[42:22.000 --> 42:24.000]  и ты знаешь, что иногда призовой фон
[42:24.000 --> 42:26.000]  делится между победителями.
[42:26.000 --> 42:28.000]  В биткоине не так будет,
[42:28.000 --> 42:30.000]  но проблема есть.
[42:30.000 --> 42:32.000]  Действительно в лотереи могут выиграть два узла,
[42:32.000 --> 42:34.000]  потому что не то чтобы они один и тот же нонс нашли,
[42:34.000 --> 42:36.000]  а просто у них были разные блоки,
[42:36.000 --> 42:38.000]  разные наборы транзакций,
[42:38.000 --> 42:40.000]  они по-разному хэшировались.
[42:42.000 --> 42:44.000]  Так сложился случай.
[42:44.000 --> 42:46.000]  Они нашли два блока
[42:46.000 --> 42:48.000]  с двумя нонсами,
[42:48.000 --> 42:50.000]  и теперь оба претендуют на то,
[42:50.000 --> 42:52.000]  чтобы свой блок добавить в блокчейн.
[42:54.000 --> 42:56.000]  Это проблема, но, возможно,
[42:56.000 --> 42:58.000]  есть проблема более масштабная,
[42:58.000 --> 43:00.000]  а может быть и нет,
[43:00.000 --> 43:02.000]  но мы пока об этом не подумали почему-то.
[43:02.000 --> 43:04.000]  У нас же разные узлы,
[43:04.000 --> 43:06.000]  все узлы в сети, их могут быть
[43:06.000 --> 43:08.000]  тысячи, десятки, сотни тысяч,
[43:08.000 --> 43:10.000]  они формируют,
[43:10.000 --> 43:12.000]  они получают пользователей одни и те же транзакции,
[43:12.000 --> 43:14.000]  формируют из них блоки,
[43:14.000 --> 43:16.000]  но в принципе эти блоки могут повторяться,
[43:16.000 --> 43:18.000]  одни и те же транзакции в одном и том же порядке.
[43:20.000 --> 43:22.000]  Почему же так не получится,
[43:22.000 --> 43:24.000]  что разные майнеры будут майнить
[43:24.000 --> 43:26.000]  этот самый нонс для
[43:26.000 --> 43:28.000]  одного и того же хэшпоинтера
[43:28.000 --> 43:30.000]  и одного и того же набора транзакций
[43:30.000 --> 43:32.000]  и просто одновременно его находить?
[43:36.000 --> 43:38.000]  Пока это не ясно,
[43:38.000 --> 43:40.000]  из того, что я изложил, пока невозможно ответить на этот вопрос,
[43:40.000 --> 43:42.000]  пока такое может быть.
[43:46.000 --> 43:48.000]  Да, действительно, разные майнеры
[43:48.000 --> 43:50.000]  окажутся чуть позже,
[43:50.000 --> 43:52.000]  что разные майнеры решают все-таки разные пазлы.
[43:54.000 --> 43:56.000]  То есть даже если у них одинаковые транзакции,
[43:56.000 --> 43:58.000]  все равно пазлы у них будут разными.
[44:00.000 --> 44:06.000]  Ну, смотри,
[44:06.000 --> 44:08.000]  если разные майнеры будут решать
[44:08.000 --> 44:10.000]  на тот же пазл,
[44:10.000 --> 44:12.000]  то у них будут...
[44:12.000 --> 44:14.000]  в сети будет появляться много...
[44:14.000 --> 44:16.000]  Ладно, окей,
[44:16.000 --> 44:18.000]  я понимаю, о чем ты говоришь, что раз блок одинаковый
[44:18.000 --> 44:20.000]  будет полностью, наверное, и разница в них кто его нашел.
[44:20.000 --> 44:22.000]  В общем,
[44:22.000 --> 44:24.000]  это некоторая деталь, которую мы обсудим чуть позже,
[44:24.000 --> 44:26.000]  но просто запомните, что
[44:26.000 --> 44:28.000]  мы должны к этому вернуться.
[44:28.000 --> 44:30.000]  Прямо у нас есть определенная лотерея,
[44:30.000 --> 44:32.000]  и в нее выиграли двое,
[44:32.000 --> 44:34.000]  два майнера,
[44:34.000 --> 44:36.000]  и они нашли два разных блока.
[44:38.000 --> 44:40.000]  Давайте они будут разноцветными.
[44:40.000 --> 44:42.000]  Что?
[44:42.000 --> 44:44.000]  Пока пазлы не разные.
[44:44.000 --> 44:46.000]  Но мы считаем, что они разные,
[44:46.000 --> 44:48.000]  потому что они будут разные.
[44:48.000 --> 44:50.000]  Ну, пока вот пусть
[44:50.000 --> 44:52.000]  два разных майнера для двух разных блоков,
[44:52.000 --> 44:54.000]  у них были разные наборы транзакций,
[44:54.000 --> 44:56.000]  допустим, нашли два продолжения.
[44:58.000 --> 45:00.000]  Вот.
[45:22.000 --> 45:24.000]  Вот карта этих двух блоков, в принципе,
[45:24.000 --> 45:26.000]  имеет право прицепиться к блокчейну.
[45:28.000 --> 45:30.000]  Вот то, что получилось,
[45:30.000 --> 45:32.000]  называется форком.
[45:34.000 --> 45:36.000]  У нас блокчейн
[45:36.000 --> 45:38.000]  начал ветвиться,
[45:38.000 --> 45:40.000]  и, видимо, он больше не блокчейн,
[45:40.000 --> 45:42.000]  а блок 3 на самом деле.
[45:48.000 --> 45:50.000]  Ну как, это будет, конечно, подозрительно,
[45:50.000 --> 45:52.000]  если наш грозбух будет деревом,
[45:52.000 --> 45:54.000]  не совсем понятно, как мы там собираемся
[45:54.000 --> 45:56.000]  валидировать транзакции.
[45:56.000 --> 45:58.000]  Все-таки выделим некоторые блокчейн.
[45:58.000 --> 46:00.000]  Но пока вот это дерево получилось.
[46:02.000 --> 46:04.000]  И вот этот форк нужно как-то разрешить.
[46:06.000 --> 46:08.000]  Как мы собираемся его разрешать?
[46:08.000 --> 46:10.000]  У нас конкуренция есть.
[46:12.000 --> 46:14.000]  Вот мы, кажется, конкуренцию всегда
[46:14.000 --> 46:16.000]  исправляли примерно одним способом.
[46:16.000 --> 46:18.000]  Мы заставляли узлы сети голосовать.
[46:18.000 --> 46:20.000]  Квор мы там собирали разные.
[46:20.000 --> 46:22.000]  Но вот теперь собрать квор мы не можем,
[46:22.000 --> 46:24.000]  потому что непонятно, сколько всего узлов.
[46:24.000 --> 46:26.000]  Вот раньше каждый узел голосовал
[46:26.000 --> 46:28.000]  своим identity. У нас теперь число узлов
[46:28.000 --> 46:30.000]  переменное, но и хуже того,
[46:30.000 --> 46:32.000]  виртуальные узлы могут добавлять,
[46:32.000 --> 46:34.000]  византийские узлы могут
[46:34.000 --> 46:36.000]  делать виртуальных участников,
[46:36.000 --> 46:38.000]  так что identity уже не является
[46:38.000 --> 46:40.000]  голосом, не может быть голосом.
[46:40.000 --> 46:42.000]  Так что нужно голосовать
[46:42.000 --> 46:44.000]  как-то аккуратнее.
[46:44.000 --> 46:46.000]  И тут нужно на самом деле увидеть
[46:46.000 --> 46:48.000]  одну очень крутую идею,
[46:48.000 --> 46:50.000]  которая в блокчейне появилась, в биткоине
[46:50.000 --> 46:52.000]  появилась, которая
[46:52.000 --> 46:54.000]  очень сильно все меняет и
[46:54.000 --> 46:56.000]  в будущем нам пригодится даже
[46:56.000 --> 46:58.000]  в контексте систем, где конфигурация
[46:58.000 --> 47:00.000]  фиксирована. Вот смотрите
[47:02.000 --> 47:04.000]  на этот самый нонс, который решение пазла.
[47:04.000 --> 47:06.000]  Это криптографическое
[47:06.000 --> 47:08.000]  доказательство того, что какой-то
[47:08.000 --> 47:10.000]  узел проделал работу, нашел блок.
[47:10.000 --> 47:12.000]  Что этот нонс доказывает?
[47:12.000 --> 47:14.000]  Что вот есть
[47:16.000 --> 47:18.000]  блок B
[47:18.000 --> 47:20.000]  и вот этот блок
[47:20.000 --> 47:22.000]  он следует
[47:24.000 --> 47:26.000]  за некоторым блоком
[47:26.000 --> 47:28.000]  B'.
[47:28.000 --> 47:30.000]  Ну, потому что
[47:30.000 --> 47:32.000]  в заголовке
[47:36.000 --> 47:38.000]  вот этого блока был
[47:38.000 --> 47:40.000]  хэшпоинтер, то есть хэш предшествующего блока.
[47:42.000 --> 47:44.000]  То есть мы с помощью нонса
[47:44.000 --> 47:46.000]  доказываем, то есть мы вообще говорим
[47:46.000 --> 47:48.000]  здесь не про индексы, мы про индексы уже
[47:48.000 --> 47:50.000]  в этой реакции вообще не говорим, мы говорим про цепочки.
[47:50.000 --> 47:52.000]  Это очень важно.
[47:52.000 --> 47:54.000]  Это сейчас станет важно.
[47:54.000 --> 47:56.000]  Мы не просто занимаем какое-то место в блокчейне.
[47:56.000 --> 47:58.000]  Мы цепляемся к какому-то конкретному блоку
[47:58.000 --> 48:00.000]  и нонс доказывает другим.
[48:00.000 --> 48:02.000]  Но
[48:02.000 --> 48:04.000]  как формируется хэш вот этого
[48:04.000 --> 48:06.000]  блока B'?
[48:06.000 --> 48:08.000]  Он считается от его заголовка.
[48:08.000 --> 48:10.000]  А в заголовке
[48:10.000 --> 48:12.000]  блока B' есть хэшпоинтер,
[48:12.000 --> 48:14.000]  то есть хэш предшествующего блока.
[48:16.000 --> 48:18.000]  И в итоге, когда мы находим нонс,
[48:18.000 --> 48:20.000]  то он доказывает
[48:20.000 --> 48:22.000]  остальным участникам сети,
[48:22.000 --> 48:24.000]  что не просто этот блок
[48:24.000 --> 48:26.000]  следует за этим блоком,
[48:26.000 --> 48:28.000]  а на самом деле
[48:28.000 --> 48:30.000]  гораздо больше, что этот блок
[48:30.000 --> 48:32.000]  цепляется к конкретной ветке блоков,
[48:32.000 --> 48:34.000]  которая сходится
[48:34.000 --> 48:36.000]  в конце концов к блоку B'
[48:36.000 --> 48:38.000]  который называется дженезит блок.
[48:42.000 --> 48:44.000]  То есть да, это дерево,
[48:44.000 --> 48:46.000]  но нонс говорит, что наш блок
[48:46.000 --> 48:48.000]  прицепился к конкретной ветке.
[48:48.000 --> 48:50.000]  Это очень мощное свойство.
[48:50.000 --> 48:52.000]  И мы сейчас собираемся им воспользоваться.
[48:52.000 --> 48:54.000]  Мы собираемся...
[48:54.000 --> 48:56.000]  Вот у нас возник форк.
[48:56.000 --> 48:58.000]  Мы хотим, чтобы участники проголосовали
[48:58.000 --> 49:00.000]  за одно из продолжений.
[49:00.000 --> 49:02.000]  Либо за эту ветку, либо за эту ветку.
[49:02.000 --> 49:04.000]  Как они будут голосовать?
[49:04.000 --> 49:06.000]  Они будут голосовать тем же самым майнингом.
[49:06.000 --> 49:08.000]  Они просто будут майнить очередной блок.
[49:10.000 --> 49:12.000]  Но когда они майнят блок, они выбирают
[49:12.000 --> 49:14.000]  за кем этот блок пристроится.
[49:14.000 --> 49:16.000]  За этим блоком или за этим.
[49:16.000 --> 49:18.000]  И таким образом,
[49:18.000 --> 49:20.000]  решая новый пазл,
[49:20.000 --> 49:22.000]  они вкладывают в свое процессорное время
[49:22.000 --> 49:24.000]  в то, чтобы
[49:24.000 --> 49:26.000]  утвердить либо одну ветку, либо другую ветку.
[49:26.000 --> 49:28.000]  То есть с одной стороны
[49:28.000 --> 49:30.000]  они по-прежнему решают, они просто
[49:30.000 --> 49:32.000]  пытаются выгнать лотерею, чтобы добавить блок самим.
[49:32.000 --> 49:34.000]  А с другой стороны, они вот
[49:34.000 --> 49:36.000]  этой лотереей заодно
[49:36.000 --> 49:38.000]  укрепляют одну из двух веток.
[49:42.000 --> 49:44.000]  Ну и смотрите, что выходит.
[49:44.000 --> 49:46.000]  Вот у нас есть такая ситуация.
[49:46.000 --> 49:48.000]  У нас есть сеть
[49:48.000 --> 49:50.000]  и есть красный
[49:50.000 --> 49:52.000]  майнер, который нашел блок
[49:52.000 --> 49:54.000]  B'.
[49:54.000 --> 49:56.000]  И есть синий майнер,
[49:56.000 --> 49:58.000]  который нашел блок B''.
[50:06.000 --> 50:08.000]  Когда майнеры нашли эти блоки, они начинают их
[50:08.000 --> 50:10.000]  распространять.
[50:12.000 --> 50:14.000]  И каждый
[50:14.000 --> 50:16.000]  майнер,
[50:16.000 --> 50:18.000]  который в этой сети находился,
[50:18.000 --> 50:20.000]  получив один из блоков,
[50:20.000 --> 50:22.000]  он понимает, что
[50:22.000 --> 50:24.000]  ему
[50:24.000 --> 50:26.000]  правила универсальные, которые
[50:26.000 --> 50:28.000]  используются в блокчейне, называются
[50:28.000 --> 50:30.000]  LaunchesChainWin.
[50:30.000 --> 50:32.000]  Каждый майнер
[50:32.000 --> 50:34.000]  майнит
[50:34.000 --> 50:36.000]  блок B''.
[50:36.000 --> 50:38.000]  И каждый
[50:38.000 --> 50:40.000]  майнер, который
[50:40.000 --> 50:42.000]  майнит
[50:44.000 --> 50:46.000]  продолжение самой длинной цепочки
[50:46.000 --> 50:48.000]  в блок 3.
[50:54.000 --> 50:56.000]  Вот какой-то майнер здесь неудачливый,
[50:56.000 --> 50:58.000]  он майнил продолжение вот этой цепочки.
[50:58.000 --> 51:00.000]  Ему из сети прилетает, допустим,
[51:00.000 --> 51:02.000]  красный блок. Он говорит, что
[51:02.000 --> 51:04.000]  все, я проиграл эту лотерею,
[51:04.000 --> 51:06.000]  попробую заново, попробую выиграть в новый.
[51:06.000 --> 51:08.000]  Бросает свой блок и начинает майнить
[51:08.000 --> 51:10.000]  за красной веткой.
[51:10.000 --> 51:12.000]  Вот эти узлы, получив синий блок,
[51:12.000 --> 51:14.000]  начинают майнить за синей веткой.
[51:14.000 --> 51:16.000]  Ну и если вдруг
[51:16.000 --> 51:18.000]  при Gossipе сеть поделилась
[51:18.000 --> 51:20.000]  не совсем пополам,
[51:20.000 --> 51:22.000]  а в какой-то пропорции, там большая часть,
[51:22.000 --> 51:24.000]  меньшая часть, то получится, что часть
[51:24.000 --> 51:26.000]  сети будет майнить
[51:26.000 --> 51:28.000]  красную ветку,
[51:28.000 --> 51:30.000]  меньшая часть будет майнить синюю ветку.
[51:30.000 --> 51:32.000]  Ну и тут всякое может случиться,
[51:32.000 --> 51:34.000]  но, скорее всего,
[51:34.000 --> 51:36.000]  вот эта большая часть
[51:36.000 --> 51:38.000]  найдет
[51:38.000 --> 51:40.000]  новый блок
[51:42.000 --> 51:44.000]  B3',
[51:44.000 --> 51:46.000]  который следует
[51:46.000 --> 51:48.000]  за блоком B', который следует
[51:48.000 --> 51:50.000]  за этой цепочкой.
[51:50.000 --> 51:52.000]  И уже в одиночестве
[51:52.000 --> 51:54.000]  победитель, то есть
[51:54.000 --> 51:56.000]  тут майнер, который нашел блок B3',
[51:56.000 --> 51:58.000]  распространит его по сети,
[51:58.000 --> 52:00.000]  и вся сеть будет следовать за этой цепочкой.
[52:02.000 --> 52:04.000]  То есть, майнинг это с одной стороны
[52:04.000 --> 52:06.000]  распределенная лотерея, а с другой стороны
[52:06.000 --> 52:08.000]  это голосование, голосование
[52:08.000 --> 52:10.000]  процессорными мощностями.
[52:10.000 --> 52:12.000]  Тут дело, еще раз
[52:12.000 --> 52:14.000]  обращаю внимание в том, что мы не просто
[52:14.000 --> 52:16.000]  хотим занять какой-то индекс в этом логе,
[52:16.000 --> 52:18.000]  а мы хотим прицепиться
[52:18.000 --> 52:20.000]  к цепочке, поэтому сам майнинг является
[52:20.000 --> 52:22.000]  голосованием.
[52:22.000 --> 52:24.000]  Но голосование здесь не в терминах
[52:24.000 --> 52:26.000]  Identity, не в терминах Quorum'ов,
[52:26.000 --> 52:28.000]  а голосование
[52:28.000 --> 52:30.000]  голосуем мы процессорами,
[52:30.000 --> 52:32.000]  посвящая их решению
[52:32.000 --> 52:34.000]  пазла для одной или другой ветки.
[52:38.000 --> 52:40.000]  Понятная идея?
[52:46.000 --> 52:48.000]  Ты получаешь блок, во-первых,
[52:48.000 --> 52:50.000]  ты его валидируешь. То есть, ты проверяешь,
[52:50.000 --> 52:52.000]  что действительно автор
[52:52.000 --> 52:54.000]  этого блока нашел решение пазла,
[52:54.000 --> 52:56.000]  и ты проверяешь теперь, у тебя есть
[52:56.000 --> 52:58.000]  цепочка,
[52:58.000 --> 53:00.000]  которой цепляется этот блок, и ты
[53:00.000 --> 53:02.000]  можешь провалидировать каждую транзакцию
[53:02.000 --> 53:04.000]  в этом блоке, проверить, что действительно
[53:04.000 --> 53:06.000]  мачится цифровые подписи, и проверить,
[53:06.000 --> 53:08.000]  что
[53:08.000 --> 53:10.000]  транзакции тратят только не потраченные
[53:10.000 --> 53:12.000]  ранее выходы.
[53:18.000 --> 53:20.000]  Что это имеешь в виду? Ну, ты вот отправляешь
[53:20.000 --> 53:22.000]  вот этот блок с транзакциями.
[53:22.000 --> 53:24.000]  Просто вот B3'
[53:24.000 --> 53:26.000]  не прицепится к B2'
[53:26.000 --> 53:28.000]  То есть, когда оно дойдет...
[53:28.000 --> 53:30.000]  Так, смотри, B3'
[53:30.000 --> 53:32.000]  Когда ты майнишь блок, когда ты ищешь решение пазла,
[53:32.000 --> 53:34.000]  вот еще раз, ты не просто
[53:34.000 --> 53:36.000]  в контексте одного блока думаешь.
[53:36.000 --> 53:38.000]  Чтобы майнить блок, ты должен выбрать,
[53:38.000 --> 53:40.000]  к какому блоку ты цепляешься.
[53:40.000 --> 53:42.000]  Вот ты выбираешь эту ветку,
[53:42.000 --> 53:44.000]  голосуешь за нее, а дальше
[53:44.000 --> 53:46.000]  ты голосуешь за нее,
[53:46.000 --> 53:48.000]  начиная решать пазл для вот этого
[53:48.000 --> 53:50.000]  хэшпоинтера.
[53:50.000 --> 53:52.000]  Так что,
[53:52.000 --> 53:54.000]  когда ты находишь B3'
[53:54.000 --> 53:56.000]  то это значит, что он следует за вот B'.
[53:56.000 --> 53:58.000]  Он цепляется
[53:58.000 --> 54:00.000]  вот к этому, но он доказывает именно
[54:00.000 --> 54:02.000]  это.
[54:14.000 --> 54:16.000]  Ну, они не то чтобы полностью
[54:16.000 --> 54:18.000]  выбросили его из своего
[54:18.000 --> 54:20.000]  состояния. Они, конечно, помнят про
[54:20.000 --> 54:22.000]  то, что вот есть fork, есть один
[54:22.000 --> 54:24.000]  и другой. Но, когда они
[54:24.000 --> 54:26.000]  выбирают, за кого майнить, они, ну, допустим,
[54:26.000 --> 54:28.000]  майнет первый полученный блок.
[54:28.000 --> 54:30.000]  Но держат память оба, потому что они не знают
[54:30.000 --> 54:32.000]  заранее, чем fork разрешится.
[54:36.000 --> 54:38.000]  B2' ассиротеет.
[54:38.000 --> 54:40.000]  То есть, он...
[54:40.000 --> 54:42.000]  За ним никто не будет следовать, и он просто повиснет
[54:42.000 --> 54:44.000]  в этом дереве, такой маленький отрасток.
[54:48.000 --> 54:50.000]  Но он все-таки теряет то, что он
[54:50.000 --> 54:52.000]  пользовал того, что он ему посчитал.
[54:52.000 --> 54:54.000]  Ну, пока никакой пользы для него и не было,
[54:54.000 --> 54:56.000]  он просто радовался, что он выиграл в лутерею.
[54:56.000 --> 54:58.000]  Это такая непонятно, в чем именно польза
[54:58.000 --> 55:00.000]  для него была.
[55:00.000 --> 55:02.000]  Но, да, он думал, что он победил в лутерею.
[55:02.000 --> 55:04.000]  На самом деле, у него выигрыш отняли.
[55:10.000 --> 55:12.000]  Ну, как обычно, у нас всегда есть
[55:12.000 --> 55:14.000]  некоторая оценка снизу, сколько отказов мы можем
[55:14.000 --> 55:16.000]  пережить. Вот у нас была
[55:16.000 --> 55:18.000]  византийская модель, где узлы взрывались,
[55:18.000 --> 55:20.000]  и мы говорили, что чтобы решить консенсус,
[55:20.000 --> 55:22.000]  мы можем пережить менее половины
[55:22.000 --> 55:24.000]  отказов. Если мы решаем консенсус,
[55:24.000 --> 55:26.000]  то мы переживаем менее половины отказов.
[55:26.000 --> 55:28.000]  Когда мы пришли в византийскую модель
[55:28.000 --> 55:30.000]  и системы с жесткой конфигурацией,
[55:30.000 --> 55:32.000]  то мы доказывали оценку
[55:32.000 --> 55:34.000]  n больше 3f. Чтобы пережить
[55:34.000 --> 55:36.000]  f отказов, нужно, по крайней мере, 3f
[55:36.000 --> 55:38.000]  плюс один узел.
[55:38.000 --> 55:40.000]  Сейчас все эти оценки
[55:40.000 --> 55:42.000]  можно выбросить, потому что
[55:42.000 --> 55:44.000]  они в терминах кворумов этих конфигураций.
[55:44.000 --> 55:46.000]  Сейчас никаких конфигураций нет,
[55:46.000 --> 55:48.000]  у нас перемышленная система,
[55:48.000 --> 55:50.000]  и следствие нашего выбора,
[55:50.000 --> 55:52.000]  что система полностью децентрализована,
[55:52.000 --> 55:54.000]  и состав не фиксирован,
[55:54.000 --> 55:56.000]  помимо замены Rotating Primary
[55:56.000 --> 55:58.000]  на Allutereo, это еще и отказ
[55:58.000 --> 56:00.000]  от кворумов, а значит отказ
[56:00.000 --> 56:02.000]  от всех этих теорий. Но смысл
[56:02.000 --> 56:04.000]  остался такой же. По-прежнему большинство
[56:04.000 --> 56:06.000]  выбирает, что происходит, но большинство теперь
[56:06.000 --> 56:08.000]  формулируется не в терминах identity,
[56:08.000 --> 56:10.000]  а в терминах процессионных мощностей.
[56:10.000 --> 56:12.000]  Вот если
[56:12.000 --> 56:14.000]  в руках
[56:14.000 --> 56:16.000]  честных узлов, которые соблюдают
[56:16.000 --> 56:18.000]  протокол, находятся большинство
[56:18.000 --> 56:20.000]  процессоров,
[56:20.000 --> 56:22.000]  не в количестве, конечно, не в штуках,
[56:22.000 --> 56:24.000]  а в хэш-рейте,
[56:24.000 --> 56:26.000]  то есть сколько хэша они могут в секунду считать.
[56:26.000 --> 56:28.000]  Но вот эти честные
[56:28.000 --> 56:30.000]  узлы следуют протоколу, и скорее всего
[56:30.000 --> 56:32.000]  их ветка будет выигрывать.
[56:32.000 --> 56:34.000]  Но бывает всякое.
[56:34.000 --> 56:36.000]  И если у тебя
[56:36.000 --> 56:38.000]  вместо
[56:38.000 --> 56:40.000]  таких вот оценок
[56:40.000 --> 56:42.000]  ты говоришь,
[56:42.000 --> 56:44.000]  что у тебя есть
[56:44.000 --> 56:46.000]  так условно называется это
[56:46.000 --> 56:48.000]  атака 51%.
[56:50.000 --> 56:52.000]  Если вдруг византийские
[56:52.000 --> 56:54.000]  участники получили контроль
[56:54.000 --> 56:56.000]  над 51%,
[56:56.000 --> 56:58.000]  над
[56:58.000 --> 57:00.000]  больше чем половиной
[57:00.000 --> 57:02.000]  процессорных мощностей,
[57:02.000 --> 57:04.000]  то они могут направить блокчейн
[57:04.000 --> 57:06.000]  в любую сторону.
[57:06.000 --> 57:08.000]  То есть они сказали, что такое блокчейн.
[57:08.000 --> 57:10.000]  Вот теперь блокчейн
[57:10.000 --> 57:12.000]  это просто максимальная
[57:12.000 --> 57:14.000]  цепочка.
[57:14.000 --> 57:16.000]  Именно ее майнят честные
[57:16.000 --> 57:18.000]  майнеры.
[57:18.000 --> 57:20.000]  Так вот, если у тебя есть блокчейн,
[57:20.000 --> 57:22.000]  но при этом какая-то максимальная
[57:22.000 --> 57:24.000]  цепочка, построенная, наверное, честными узлами
[57:24.000 --> 57:26.000]  пока, и тут появляется,
[57:26.000 --> 57:28.000]  скажем, инопланетянин, у которого есть
[57:28.000 --> 57:30.000]  какой-то очень мощный компьютер,
[57:30.000 --> 57:32.000]  и просто большинство процессоров переходят
[57:32.000 --> 57:34.000]  в какие-то в руки
[57:34.000 --> 57:36.000]  узлоумышленника,
[57:36.000 --> 57:38.000]  то он может взять
[57:38.000 --> 57:40.000]  твою самую большую, самую длинную
[57:40.000 --> 57:42.000]  цепочку.
[57:42.000 --> 57:44.000]  Вот, допустим, мы нашли этот блок,
[57:44.000 --> 57:46.000]  вот этот блок,
[57:46.000 --> 57:48.000]  вот этот блок,
[57:48.000 --> 57:50.000]  дальше
[57:50.000 --> 57:52.000]  эта история как-то продолжилась.
[57:52.000 --> 57:54.000]  Так вот, если есть византийские
[57:54.000 --> 57:56.000]  узлы с большим
[57:56.000 --> 57:58.000]  количеством процессоров,
[57:58.000 --> 58:00.000]  то они могут сказать, что
[58:00.000 --> 58:02.000]  они могут начать майнить вот эту
[58:02.000 --> 58:04.000]  старую цепочку,
[58:04.000 --> 58:06.000]  и если действительно у них
[58:06.000 --> 58:08.000]  вот столько вычислительных мощностей,
[58:08.000 --> 58:10.000]  то eventually они
[58:10.000 --> 58:12.000]  видимо перемайнят вот эту цепочку.
[58:14.000 --> 58:16.000]  И она станет блокчейном.
[58:20.000 --> 58:22.000]  Ну, смотри,
[58:22.000 --> 58:24.000]  мы делаем электронные деньги для
[58:24.000 --> 58:26.000]  того, чтобы ты мог купить на них Ferrari себе.
[58:26.000 --> 58:28.000]  А вот теперь представь человек, который продает
[58:28.000 --> 58:30.000]  Ferrari.
[58:30.000 --> 58:32.000]  Он вот здесь
[58:32.000 --> 58:34.000]  получил от тебя биткоины,
[58:34.000 --> 58:36.000]  отдал тебе Ferrari.
[58:36.000 --> 58:38.000]  А потом эта цепочка была признана
[58:38.000 --> 58:40.000]  откатившейся. И теперь
[58:40.000 --> 58:42.000]  Ferrari у него нет, и биткоинов, которые он получил,
[58:42.000 --> 58:44.000]  тоже нет, потому что они не вошли
[58:44.000 --> 58:46.000]  в самую длинную цепь.
[58:46.000 --> 58:48.000]  Поэтому это неприятная ситуация.
[58:48.000 --> 58:50.000]  Понятно, что
[58:50.000 --> 58:52.000]  протокол не может алгоритмически
[58:52.000 --> 58:54.000]  пережить византийский отказ большого
[58:54.000 --> 58:56.000]  количества узлов, но большой доли сети,
[58:56.000 --> 58:58.000]  в смысле процессоров.
[58:58.000 --> 59:00.000]  Но тут есть одно любопытное
[59:00.000 --> 59:02.000]  отличие, которое выделяет
[59:02.000 --> 59:04.000]  биткоин среди прошлых алгоритмов.
[59:04.000 --> 59:06.000]  Действительно, никакой алгоритм не может
[59:06.000 --> 59:08.000]  от такой проблемы
[59:08.000 --> 59:10.000]  защититься с помощью
[59:10.000 --> 59:12.000]  своих механик.
[59:12.000 --> 59:14.000]  Вот таких алгоритмических идей, графических.
[59:14.000 --> 59:16.000]  Но есть одна особенность.
[59:16.000 --> 59:18.000]  А именно
[59:18.000 --> 59:20.000]  мы делаем деньги, мы реплицируем
[59:20.000 --> 59:22.000]  деньги.
[59:22.000 --> 59:24.000]  И это важно по разным причинам.
[59:24.000 --> 59:26.000]  В частности, это важно для самого протокола,
[59:26.000 --> 59:28.000]  потому что...
[59:28.000 --> 59:30.000]  Немного откачусь.
[59:30.000 --> 59:32.000]  У нас проблема с тем, что у нас в таком протоколе,
[59:32.000 --> 59:34.000]  протокол называется Nakamoto Consensus,
[59:34.000 --> 59:36.000]  условно, что в нем даже комита нет.
[59:36.000 --> 59:38.000]  То есть мы не понимаем, какая транзакция
[59:38.000 --> 59:40.000]  зафиксирована. Никакая.
[59:40.000 --> 59:42.000]  Потому что всегда можно перемайнить с почку.
[59:42.000 --> 59:44.000]  Это еще одно
[59:44.000 --> 59:46.000]  неприятное следствие того, что мы отказались
[59:46.000 --> 59:48.000]  от жесткой конфигурации. У нас изменилось
[59:48.000 --> 59:50.000]  правило выбора лидера.
[59:50.000 --> 59:52.000]  То есть мы сделали лотерею. У нас изменилось голосование.
[59:52.000 --> 59:54.000]  Теперь мы голосуем личностями, процессором.
[59:54.000 --> 59:56.000]  И мы потеряли комит.
[01:00:00.000 --> 01:00:02.000]  Дизайн-спейс у нас такой. Мы поменяли
[01:00:02.000 --> 01:00:04.000]  условия на входе, поменяли
[01:00:04.000 --> 01:00:06.000]  решение.
[01:00:06.000 --> 01:00:08.000]  Но все это в целом работает
[01:00:08.000 --> 01:00:10.000]  правда непонятно
[01:00:10.000 --> 01:00:12.000]  по какой причине. Точнее, по какой причине
[01:00:12.000 --> 01:00:14.000]  тысячи и десятки тысяч узлов
[01:00:14.000 --> 01:00:16.000]  согласно этот протокол
[01:00:16.000 --> 01:00:18.000]  поддерживать. Потому что
[01:00:18.000 --> 01:00:20.000]  поддержание протокола стоит довольно дорого
[01:00:20.000 --> 01:00:22.000]  для всей этой сети. Потому что каждый
[01:00:22.000 --> 01:00:24.000]  участник, каждый майнер
[01:00:24.000 --> 01:00:26.000]  грузит процессор свой.
[01:00:26.000 --> 01:00:28.000]  Их должно быть довольно много
[01:00:28.000 --> 01:00:30.000]  честных майнеров, чтобы убедить нечестных.
[01:00:30.000 --> 01:00:32.000]  Так вот, пока непонятно
[01:00:34.000 --> 01:00:36.000]  какова мотивация
[01:00:36.000 --> 01:00:38.000]  отдельного майнера. Почему он
[01:00:38.000 --> 01:00:40.000]  решает нонс и проигрывает в лотерею и продолжает
[01:00:40.000 --> 01:00:42.000]  и продолжает это делать.
[01:00:42.000 --> 01:00:44.000]  Вот тут
[01:00:44.000 --> 01:00:46.000]  становится важно, что мы реплицируем
[01:00:46.000 --> 01:00:48.000]  не произвольное состояние, а мы реплицируем
[01:00:48.000 --> 01:00:50.000]  именно деньги. Потому что биткоин
[01:00:50.000 --> 01:00:52.000]  от этих самых денег, от монет неотделим.
[01:01:10.000 --> 01:01:12.000]  Почему они будут
[01:01:12.000 --> 01:01:14.000]  отвергать их?
[01:01:14.000 --> 01:01:16.000]  Подожди, они отвергать их не будут, потому что
[01:01:16.000 --> 01:01:18.000]  блоки валидные. То есть форки могут
[01:01:18.000 --> 01:01:20.000]  быть в биткоине.
[01:01:20.000 --> 01:01:22.000]  Это нормально. Блок валиден,
[01:01:22.000 --> 01:01:24.000]  если нонс
[01:01:24.000 --> 01:01:26.000]  действительно дает право прицепиться
[01:01:26.000 --> 01:01:28.000]  к цепочке. И если каждая
[01:01:28.000 --> 01:01:30.000]  транзакция внутри этого блока тоже валидна.
[01:01:30.000 --> 01:01:32.000]  То есть там цифровая подпись исходится, и
[01:01:32.000 --> 01:01:34.000]  транзакции тратят неподрочные выходы.
[01:01:34.000 --> 01:01:36.000]  Проблемов в этом нет.
[01:01:36.000 --> 01:01:38.000]  То есть честный узел будет
[01:01:38.000 --> 01:01:40.000]  накапливать форк, и если в
[01:01:40.000 --> 01:01:42.000]  какой-то момент этот форк перегонит ту ветку,
[01:01:42.000 --> 01:01:44.000]  которую minor-miner,
[01:01:44.000 --> 01:01:46.000]  то он перекручится на самую длинную ветку.
[01:01:46.000 --> 01:01:48.000]  Но по умолчанию minor-miner
[01:01:48.000 --> 01:01:50.000]  манит самую длинную,
[01:01:50.000 --> 01:01:52.000]  что у него есть.
[01:02:08.000 --> 01:02:10.000]  Ты должен понять, когда ты расстанешься
[01:02:10.000 --> 01:02:12.000]  со своей Ferrari, да?
[01:02:12.000 --> 01:02:14.000]  Я поговорю об этом чуть позже,
[01:02:14.000 --> 01:02:16.000]  пока я не могу ответить на этот вопрос.
[01:02:22.000 --> 01:02:24.000]  Можно, конечно.
[01:02:24.000 --> 01:02:26.000]  То есть ты можешь
[01:02:26.000 --> 01:02:28.000]  со своими приятелями выделиться
[01:02:28.000 --> 01:02:30.000]  в такую группировку и манить свой альтернативный блокчейн,
[01:02:30.000 --> 01:02:32.000]  который начинается с B2B0.
[01:02:32.000 --> 01:02:34.000]  Ну да, ты можешь так делать.
[01:02:34.000 --> 01:02:36.000]  Ты имеешь на это полное право.
[01:02:36.000 --> 01:02:38.000]  Еще и другие люди
[01:02:38.000 --> 01:02:40.000]  имеют полное право игнорировать твой блокчейн,
[01:02:40.000 --> 01:02:42.000]  потому что он будет по некоторым причинам
[01:02:42.000 --> 01:02:44.000]  проигрывать главному.
[01:02:58.000 --> 01:03:00.000]  Злоумышленник может делать double spend.
[01:03:04.000 --> 01:03:06.000]  Злоумышленник может
[01:03:06.000 --> 01:03:08.000]  игнорировать
[01:03:08.000 --> 01:03:10.000]  новые чужие транзакции, просто не помещая
[01:03:10.000 --> 01:03:12.000]  их в свой блокчейн, в свою ветку.
[01:03:16.000 --> 01:03:18.000]  Давайте вернемся к моей мысли о том,
[01:03:18.000 --> 01:03:20.000]  что блокчейн неотделим от денег,
[01:03:20.000 --> 01:03:22.000]  потому что нужно чем-то майнеров
[01:03:22.000 --> 01:03:24.000]  мотивировать, чтобы они продолжали
[01:03:24.000 --> 01:03:26.000]  искать решения пазла, тратить процессорное время,
[01:03:26.000 --> 01:03:28.000]  тратить электричество.
[01:03:28.000 --> 01:03:30.000]  Мы реплицируем деньги,
[01:03:30.000 --> 01:03:32.000]  майнеров нужно
[01:03:32.000 --> 01:03:34.000]  чем-то отблагодарить.
[01:03:34.000 --> 01:03:36.000]  Ну вот давайте мы будем благодарить
[01:03:36.000 --> 01:03:38.000]  теми самыми деньгами, которые мы в этом блокчейне
[01:03:38.000 --> 01:03:40.000]  реализуются.
[01:03:42.000 --> 01:03:44.000]  Смотрите, в чем смысл.
[01:03:48.000 --> 01:03:50.000]  Вот вся эта конструкция,
[01:03:50.000 --> 01:03:52.000]  она поддерживает сама себя.
[01:03:56.000 --> 01:03:58.000]  У вас есть вот такие вот
[01:03:58.000 --> 01:04:00.000]  электронные монеты, цифровые монеты,
[01:04:00.000 --> 01:04:02.000]  биткоины,
[01:04:02.000 --> 01:04:04.000]  но при этом непонятно, почему люди
[01:04:04.000 --> 01:04:06.000]  готовы к этой конструкции.
[01:04:06.000 --> 01:04:08.000]  Но при этом непонятно, почему люди
[01:04:08.000 --> 01:04:10.000]  готовы использовать их как
[01:04:10.000 --> 01:04:12.000]  средства,
[01:04:12.000 --> 01:04:14.000]  как валюта, как деньги.
[01:04:14.000 --> 01:04:16.000]  Почему они готовы расставаться
[01:04:16.000 --> 01:04:18.000]  с Феррари за эти монеты.
[01:04:18.000 --> 01:04:20.000]  Но они так будут готовы делать,
[01:04:20.000 --> 01:04:22.000]  только если они будут уверены, что вот
[01:04:22.000 --> 01:04:24.000]  вся эта инфраструктура работает надежно.
[01:04:26.000 --> 01:04:28.000]  Что транзакции,
[01:04:28.000 --> 01:04:30.000]  если положили в этот распределенный
[01:04:30.000 --> 01:04:32.000]  ledger децентрализованный,
[01:04:32.000 --> 01:04:34.000]  она туда не откатится.
[01:04:36.000 --> 01:04:38.000]  И транзакции падают в блокчейн за разумное время
[01:04:38.000 --> 01:04:40.000]  и из него не пропадают.
[01:04:42.000 --> 01:04:44.000]  Если этого не будет, если транзакции начнут
[01:04:44.000 --> 01:04:46.000]  откатываться, то конечно же
[01:04:46.000 --> 01:04:48.000]  этой валюте никто доверять не будет.
[01:04:48.000 --> 01:04:50.000]  Она потеряет всю свою стоимость.
[01:04:50.000 --> 01:04:52.000]  Поэтому стоимость всех этих биткоинов
[01:04:52.000 --> 01:04:54.000]  она дерется на том, что у нас есть
[01:04:54.000 --> 01:04:56.000]  стабильный децентрализованный
[01:04:56.000 --> 01:04:58.000]  лог.
[01:04:58.000 --> 01:05:00.000]  А стабильный децентрализованный лог
[01:05:00.000 --> 01:05:02.000]  зависит от того, насколько много
[01:05:02.000 --> 01:05:04.000]  в нашей сети честных майнеров, которые решают
[01:05:04.000 --> 01:05:06.000]  получать базу.
[01:05:06.000 --> 01:05:08.000]  Так вот, если мы будем
[01:05:08.000 --> 01:05:10.000]  платить майнерам этими самыми
[01:05:10.000 --> 01:05:12.000]  биткоинами, то они
[01:05:12.000 --> 01:05:14.000]  будут заинтересованы, чтобы биткоины, которые они получают
[01:05:14.000 --> 01:05:16.000]  в качестве премии за свою работу,
[01:05:16.000 --> 01:05:18.000]  были стабильными. Для этого они должны
[01:05:18.000 --> 01:05:20.000]  хорошо поддерживать консенсус.
[01:05:22.000 --> 01:05:24.000]  Понятно? Вот такой вот цикл
[01:05:24.000 --> 01:05:26.000]  получается. Так вот, а как же
[01:05:26.000 --> 01:05:28.000]  эти майнеры будут получать
[01:05:28.000 --> 01:05:30.000]  премию за свою работу в этих самых
[01:05:30.000 --> 01:05:32.000]  биткоинах?
[01:05:32.000 --> 01:05:34.000]  Для этого мы скажем,
[01:05:34.000 --> 01:05:36.000]  что в каждом блоке есть специальная
[01:05:36.000 --> 01:05:38.000]  транзакция. Вот эта ноль,
[01:05:38.000 --> 01:05:40.000]  она называется Coinbase.
[01:05:44.000 --> 01:05:46.000]  Она выглядит так.
[01:05:46.000 --> 01:05:48.000]  У этой транзакции нет входа,
[01:05:48.000 --> 01:05:50.000]  и она переводит
[01:05:50.000 --> 01:05:52.000]  некоторое количество монет
[01:05:54.000 --> 01:05:56.000]  самому майнеру.
[01:05:56.000 --> 01:05:58.000]  То есть, майнер, когда он строит блок,
[01:05:58.000 --> 01:06:00.000]  он получает какие-то транзакции
[01:06:00.000 --> 01:06:02.000]  из сети, но в качестве первой
[01:06:02.000 --> 01:06:04.000]  транзакции он
[01:06:04.000 --> 01:06:06.000]  строит транзакцию,
[01:06:06.000 --> 01:06:08.000]  которая печатает биткоины
[01:06:08.000 --> 01:06:10.000]  и отдает ему.
[01:06:10.000 --> 01:06:12.000]  И вот именно этой транзакции
[01:06:12.000 --> 01:06:14.000]  будут отличаться блоки
[01:06:14.000 --> 01:06:16.000]  и пазлы всех майнеров в сети.
[01:06:18.000 --> 01:06:20.000]  Поэтому они решают разные пазлы.
[01:06:22.000 --> 01:06:24.000]  И вот тут-то мы решаем,
[01:06:24.000 --> 01:06:26.000]  кажется, последнюю проблему
[01:06:26.000 --> 01:06:28.000]  с централизацией, которая у нас была.
[01:06:28.000 --> 01:06:30.000]  Вот помните, где у нас была централизация?
[01:06:30.000 --> 01:06:32.000]  Мы должны были поддерживать
[01:06:32.000 --> 01:06:34.000]  и верифицировать
[01:06:34.000 --> 01:06:36.000]  лог, но для этого у нас
[01:06:36.000 --> 01:06:38.000]  есть такой протокол консенсса.
[01:06:40.000 --> 01:06:42.000]  Мы должны были
[01:06:42.000 --> 01:06:44.000]  связывать identity и публичные открытые ключи.
[01:06:44.000 --> 01:06:46.000]  Мы от этой проблемы вообще избавились,
[01:06:46.000 --> 01:06:48.000]  сказав, что identity и открытые ключи
[01:06:48.000 --> 01:06:50.000]  одно и то же.
[01:06:50.000 --> 01:06:52.000]  И у нас осталась
[01:06:52.000 --> 01:06:54.000]  последняя задача, которая решалась
[01:06:54.000 --> 01:06:56.000]  централизованная, это
[01:06:56.000 --> 01:06:58.000]  брать денег.
[01:06:58.000 --> 01:07:00.000]  Чеканка монет.
[01:07:00.000 --> 01:07:02.000]  И вот мы, станок, который чеканит эти монеты,
[01:07:02.000 --> 01:07:04.000]  встраиваем сейчас в сам блокчейн.
[01:07:04.000 --> 01:07:06.000]  Каждый блок порождает
[01:07:06.000 --> 01:07:08.000]  новые монеты и отдаёт
[01:07:08.000 --> 01:07:10.000]  их майнеру.
[01:07:14.000 --> 01:07:16.000]  И именно вот эта награда
[01:07:20.000 --> 01:07:22.000]  мотивирует майнера
[01:07:22.000 --> 01:07:24.000]  работать честно,
[01:07:24.000 --> 01:07:26.000]  поддерживать лог стабильным,
[01:07:26.000 --> 01:07:28.000]  потому что без этого его награда обесценится.
[01:07:30.000 --> 01:07:32.000]  И вот то,
[01:07:32.000 --> 01:07:34.000]  что мы реплицируем деньги здесь,
[01:07:34.000 --> 01:07:36.000]  становится важно,
[01:07:36.000 --> 01:07:38.000]  ещё и потому, что, смотрите,
[01:07:38.000 --> 01:07:40.000]  вот если так
[01:07:40.000 --> 01:07:42.000]  1,51%, когда у
[01:07:42.000 --> 01:07:44.000]  византийских узлов
[01:07:44.000 --> 01:07:46.000]  слишком много процессорных мощностей,
[01:07:46.000 --> 01:07:48.000]  и, казалось бы, они могут
[01:07:48.000 --> 01:07:50.000]  делать double span, то есть положить
[01:07:50.000 --> 01:07:52.000]  в красные блоки транзакцию,
[01:07:52.000 --> 01:07:54.000]  где они покупают что-то,
[01:07:54.000 --> 01:07:56.000]  а потом идёт катить перемайни в другой блокчейн,
[01:07:56.000 --> 01:07:58.000]  то есть потратить в ней те же монеты дважды.
[01:07:58.000 --> 01:08:00.000]  Так вот,
[01:08:00.000 --> 01:08:02.000]  алгоритмически мы этого защититься не можем.
[01:08:02.000 --> 01:08:04.000]  Но тут работает другой фактор.
[01:08:08.000 --> 01:08:10.000]  Смотрите,
[01:08:10.000 --> 01:08:12.000]  византийские узлы, чтобы
[01:08:12.000 --> 01:08:14.000]  получить...
[01:08:14.000 --> 01:08:16.000]  Как византийским узлам контролировать вот такую долю
[01:08:16.000 --> 01:08:18.000]  числительных ресурсов?
[01:08:18.000 --> 01:08:20.000]  Им нужно иметь много процессоров.
[01:08:20.000 --> 01:08:22.000]  Не просто много процессоров,
[01:08:22.000 --> 01:08:24.000]  им нужно иметь много быстрых процессоров.
[01:08:24.000 --> 01:08:26.000]  Ну, потому что от количества
[01:08:26.000 --> 01:08:28.000]  процессоров, в принципе,
[01:08:28.000 --> 01:08:30.000]  от того, насколько большой у них хэшрейт,
[01:08:30.000 --> 01:08:32.000]  в их руках зависит объём выигрыша,
[01:08:32.000 --> 01:08:34.000]  который они получают.
[01:08:34.000 --> 01:08:36.000]  То есть
[01:08:36.000 --> 01:08:38.000]  чем больше хэшрейт, тем больше выигрыш,
[01:08:38.000 --> 01:08:40.000]  тем больше биткоинов.
[01:08:40.000 --> 01:08:42.000]  Но чем стали заниматься люди?
[01:08:42.000 --> 01:08:44.000]  Участники сети, они с одной стороны
[01:08:44.000 --> 01:08:46.000]  частные, а с другой стороны нерациональные.
[01:08:46.000 --> 01:08:48.000]  Они хотят свою выигрышу максимизировать.
[01:08:48.000 --> 01:08:50.000]  Но они заметили, что можно перебирать хэши на процессоре
[01:08:50.000 --> 01:08:52.000]  на ноутбуке, а можно
[01:08:52.000 --> 01:08:54.000]  на видеокарточке перебирать что-то.
[01:08:54.000 --> 01:08:56.000]  Или можно в конце концов
[01:08:56.000 --> 01:08:58.000]  построить просто специальный процессор,
[01:08:58.000 --> 01:09:00.000]  который будет делать
[01:09:00.000 --> 01:09:02.000]  уметь только одно.
[01:09:02.000 --> 01:09:04.000]  Быстро считать SHA-256 от SHA-256,
[01:09:04.000 --> 01:09:06.000]  это хэш-функция в биткоине.
[01:09:06.000 --> 01:09:08.000]  То есть мы строим специальное оборудование,
[01:09:08.000 --> 01:09:10.000]  которое предназначено только для того, чтобы майнить.
[01:09:10.000 --> 01:09:12.000]  И если мы хотим
[01:09:12.000 --> 01:09:14.000]  часто выигрывать,
[01:09:14.000 --> 01:09:16.000]  то мы покупаем очень много такого оборудования.
[01:09:16.000 --> 01:09:18.000]  У нас такие огромные криптофермы
[01:09:18.000 --> 01:09:20.000]  получаются
[01:09:20.000 --> 01:09:22.000]  из этих процессоров.
[01:09:22.000 --> 01:09:24.000]  И действительно тогда
[01:09:24.000 --> 01:09:26.000]  мы можем заполучить в свои руки
[01:09:26.000 --> 01:09:28.000]  очень много, ну большую долю
[01:09:28.000 --> 01:09:30.000]  хэш-рейта, больше половины.
[01:09:30.000 --> 01:09:32.000]  И можем делать дабл спенд.
[01:09:32.000 --> 01:09:34.000]  Но нам это теперь не выгодно делать,
[01:09:34.000 --> 01:09:36.000]  потому что если мы сделаем дабл спенд,
[01:09:36.000 --> 01:09:38.000]  то это скопирует сам биткоин,
[01:09:38.000 --> 01:09:40.000]  и он просто потеряет свою стоимость на рынке.
[01:09:40.000 --> 01:09:42.000]  Но кто теперь
[01:09:42.000 --> 01:09:44.000]  отдаст до него феррари, когда могут,
[01:09:44.000 --> 01:09:46.000]  фрага ты отдашь, а биткоины тоже могут отнять.
[01:09:46.000 --> 01:09:48.000]  Поэтому если
[01:09:48.000 --> 01:09:50.000]  ты потратил очень много денег
[01:09:50.000 --> 01:09:52.000]  на вот такое специальное оборудование,
[01:09:52.000 --> 01:09:54.000]  тебе уже не выгодно делать такую атаку.
[01:09:54.000 --> 01:09:56.000]  Потому что все твои инвестиции,
[01:09:56.000 --> 01:09:58.000]  они пропадут.
[01:09:58.000 --> 01:10:00.000]  Так что алгоритмически мы не защищаемся от такой проблемы,
[01:10:00.000 --> 01:10:02.000]  но вот тут уже другие факторы работают.
[01:10:02.000 --> 01:10:04.000]  Нам уже экономически не выгодно.
[01:10:06.000 --> 01:10:08.000]  Идея понятна?
[01:10:10.000 --> 01:10:12.000]  Окей.
[01:10:12.000 --> 01:10:14.000]  Отличный вопрос.
[01:10:16.000 --> 01:10:18.000]  Я, кажется, уже говорил сегодня,
[01:10:18.000 --> 01:10:20.000]  что если ты печатаешь деньги грузовиками
[01:10:20.000 --> 01:10:22.000]  на станке, то они обесцениваются.
[01:10:22.000 --> 01:10:24.000]  Поэтому здесь мы тоже должны
[01:10:24.000 --> 01:10:26.000]  каким-то образом
[01:10:26.000 --> 01:10:28.000]  контролировать эмиссию,
[01:10:28.000 --> 01:10:30.000]  чтобы биткоин сохранял свою стоимость.
[01:10:30.000 --> 01:10:32.000]  Так что мы
[01:10:32.000 --> 01:10:34.000]  договариваемся,
[01:10:34.000 --> 01:10:36.000]  что...
[01:10:36.000 --> 01:10:38.000]  Ну не мы договариваемся, в биткоине заложен
[01:10:38.000 --> 01:10:40.000]  такой фундаментальный параметр.
[01:10:40.000 --> 01:10:42.000]  Десять минут
[01:10:42.000 --> 01:10:44.000]  фундаментальная константа.
[01:10:46.000 --> 01:10:48.000]  Десять минут плюс
[01:10:48.000 --> 01:10:50.000]  стартовый выигрыш в 50
[01:10:50.000 --> 01:10:52.000]  биткоинов,
[01:10:52.000 --> 01:10:54.000]  плюс
[01:10:54.000 --> 01:10:56.000]  уполовинивание выигрыша, но
[01:10:56.000 --> 01:10:58.000]  уполовинивание пока не важно.
[01:10:58.000 --> 01:11:00.000]  В общем, на старте системы фиксируется, что
[01:11:00.000 --> 01:11:02.000]  фиксируется размер
[01:11:02.000 --> 01:11:04.000]  выигрыша, который приносит
[01:11:04.000 --> 01:11:06.000]  каждый блок.
[01:11:06.000 --> 01:11:08.000]  Если ты назначил себе выигрыш больше, то твой блок просто
[01:11:08.000 --> 01:11:10.000]  повалидируется честными
[01:11:10.000 --> 01:11:12.000]  узлами.
[01:11:12.000 --> 01:11:14.000]  То есть ты написал, что ты получаешь миллион
[01:11:14.000 --> 01:11:16.000]  биткоинов в Coinbase транзакции,
[01:11:16.000 --> 01:11:18.000]  нашел нонс для этого блока,
[01:11:18.000 --> 01:11:20.000]  отправил этот блок всем, ну а все сказали, что
[01:11:20.000 --> 01:11:22.000]  он нам не нравится.
[01:11:22.000 --> 01:11:24.000]  Он не похож на разумный.
[01:11:28.000 --> 01:11:30.000]  Ну и
[01:11:32.000 --> 01:11:34.000]  тут есть еще такие соображения, что
[01:11:34.000 --> 01:11:36.000]  не соображения пока.
[01:11:40.000 --> 01:11:42.000]  В биткоине
[01:11:42.000 --> 01:11:44.000]  каждый блок генерируется
[01:11:44.000 --> 01:11:46.000]  не то чтобы с конкретно
[01:11:46.000 --> 01:11:48.000]  сфиксированной частотой, но в
[01:11:48.000 --> 01:11:50.000]  среднем с частотой раз в 10 минут.
[01:11:50.000 --> 01:11:52.000]  Это
[01:11:52.000 --> 01:11:54.000]  позволяет контролировать эмиссию, то есть скорость
[01:11:54.000 --> 01:11:56.000]  появления монет.
[01:11:56.000 --> 01:11:58.000]  Если вдруг
[01:11:58.000 --> 01:12:00.000]  в сети удвоится количество
[01:12:00.000 --> 01:12:02.000]  участников, то это не значит, что денег
[01:12:02.000 --> 01:12:04.000]  будет запускаться в единицу времени в два раза больше,
[01:12:04.000 --> 01:12:06.000]  потому что в два раза больше
[01:12:06.000 --> 01:12:08.000]  блока будет находиться.
[01:12:08.000 --> 01:12:10.000]  Вот мы такого
[01:12:10.000 --> 01:12:12.000]  допустить не хотим. Мы говорим, что
[01:12:12.000 --> 01:12:14.000]  блоки должны появляться в среднем раз в 10
[01:12:14.000 --> 01:12:16.000]  минут.
[01:12:16.000 --> 01:12:18.000]  Ну а для этого у нас есть
[01:12:18.000 --> 01:12:20.000]  настройка, а именно параметр
[01:12:20.000 --> 01:12:22.000]  D, сложность пазла.
[01:12:22.000 --> 01:12:24.000]  Вот D это
[01:12:24.000 --> 01:12:26.000]  не константа уже, D это
[01:12:26.000 --> 01:12:28.000]  величина, которая регулируется,
[01:12:28.000 --> 01:12:30.000]  децентрализована, настраивается отдельными
[01:12:30.000 --> 01:12:32.000]  вот D должно быть
[01:12:32.000 --> 01:12:34.000]  D это некоторый глобальный
[01:12:34.000 --> 01:12:36.000]  параметр, но он как бы у каждого
[01:12:36.000 --> 01:12:38.000]  узла свое понимание текущего D.
[01:12:38.000 --> 01:12:40.000]  И это
[01:12:40.000 --> 01:12:42.000]  общее понимание
[01:12:42.000 --> 01:12:44.000]  складывающееся из локальных
[01:12:44.000 --> 01:12:46.000]  мнений относительно D
[01:12:46.000 --> 01:12:48.000]  должно быть таким, чтобы
[01:12:48.000 --> 01:12:50.000]  несмотря на меняющийся hash rate
[01:12:50.000 --> 01:12:52.000]  всей сети,
[01:12:52.000 --> 01:12:54.000]  D должен быть таким, чтобы блок
[01:12:54.000 --> 01:12:56.000]  появлялся бы каждый раз в 10 минут
[01:12:56.000 --> 01:12:58.000]  и приносил бы фиксированный выигрыш
[01:12:58.000 --> 01:13:00.000]  Майнеру через Coinbase транзакцию.
[01:13:02.000 --> 01:13:04.000]  Каким образом устроена
[01:13:04.000 --> 01:13:06.000]  регулировка этого D может возникнуть
[01:13:06.000 --> 01:13:08.000]  вопрос? Как Майнеры его настраивают?
[01:13:12.000 --> 01:13:14.000]  Они настраивают его
[01:13:14.000 --> 01:13:16.000]  каждые
[01:13:16.000 --> 01:13:18.000]  пересматривают значение D каждые
[01:13:18.000 --> 01:13:20.000]  две недели, каждые там
[01:13:20.000 --> 01:13:22.000]  2016 блоков или что-то похожее
[01:13:22.000 --> 01:13:24.000]  могу собрать.
[01:13:24.000 --> 01:13:26.000]  Раз в две недели Майнер смотрит
[01:13:26.000 --> 01:13:28.000]  на
[01:13:28.000 --> 01:13:30.000]  в какой-то позиции лого
[01:13:30.000 --> 01:13:32.000]  в какой-то длине цепочки, он смотрит
[01:13:32.000 --> 01:13:34.000]  на блокчейн и смотрит
[01:13:34.000 --> 01:13:36.000]  как на хвостике этого блокчейна
[01:13:36.000 --> 01:13:38.000]  появлялись блоки. Нужно ли увеличить
[01:13:38.000 --> 01:13:40.000]  сложность D? Может быть, боти стали
[01:13:40.000 --> 01:13:42.000]  превратиться слишком часто.
[01:13:42.000 --> 01:13:44.000]  Вот тогда D увеличивается. Если стали
[01:13:44.000 --> 01:13:46.000]  слишком редко, D уменьшается.
[01:13:46.000 --> 01:13:48.000]  Вот эту корректировку D
[01:13:48.000 --> 01:13:50.000]  каждый узел в сети делает
[01:13:50.000 --> 01:13:52.000]  локально, но эта процедура, хоть она
[01:13:52.000 --> 01:13:54.000]  локальна, но она детерминирована, поэтому
[01:13:54.000 --> 01:13:56.000]  все узлы меняют D одинаково.
[01:13:56.000 --> 01:13:58.000]  В смысле синхронно относительно
[01:13:58.000 --> 01:14:00.000]  индекса высоты каждого блока.
[01:14:02.000 --> 01:14:04.000]  Так что какие-то византийские узлы
[01:14:04.000 --> 01:14:06.000]  могут, скажем, это дело игнорировать.
[01:14:06.000 --> 01:14:08.000]  То есть они могут
[01:14:08.000 --> 01:14:10.000]  не увеличить себе D и искать блоки быстрее,
[01:14:10.000 --> 01:14:12.000]  находить их чаще, и у них будет блокчейн
[01:14:12.000 --> 01:14:14.000]  длиннее. Но
[01:14:14.000 --> 01:14:16.000]  честные узлы, просто привалидации будут
[01:14:16.000 --> 01:14:18.000]  эти блоки отвергать, потому что они считают,
[01:14:18.000 --> 01:14:20.000]  что в текущей позиции, в текущей высоте
[01:14:20.000 --> 01:14:22.000]  D должен быть больше.
[01:14:24.000 --> 01:14:26.000]  Если ты подключишься к Биткоину
[01:14:26.000 --> 01:14:28.000]  и будешь майнить на ноутбуке,
[01:14:28.000 --> 01:14:30.000]  ты никогда не заработаешь денег.
[01:14:30.000 --> 01:14:32.000]  Просто потому, что
[01:14:32.000 --> 01:14:34.000]  люди уже понастроили специальных
[01:14:34.000 --> 01:14:36.000]  процессоров, и
[01:14:36.000 --> 01:14:38.000]  вычислительная мощность сети Биткоина
[01:14:38.000 --> 01:14:40.000]  сейчас 150, кажется, 160
[01:14:40.000 --> 01:14:42.000]  экзохэшей в секунду.
[01:14:42.000 --> 01:14:44.000]  Ты соперничать не сможешь
[01:14:44.000 --> 01:14:46.000]  с ними.
[01:14:46.000 --> 01:14:48.000]  Если бы они не были,
[01:14:48.000 --> 01:14:50.000]  они бы не были.
[01:14:50.000 --> 01:14:52.000]  Это интересный вопрос.
[01:14:52.000 --> 01:14:54.000]  Я не знаю, сколько у нас времени осталось
[01:14:54.000 --> 01:14:56.000]  лекции, но давно закончилось,
[01:14:56.000 --> 01:14:58.000]  наверное, но еще не закончилось.
[01:14:58.000 --> 01:15:00.000]  Мы сделаем прерыв, потом продолжим.
[01:15:00.000 --> 01:15:02.000]  Это такое одно большое занятие.
[01:15:06.000 --> 01:15:08.000]  Так вот, вернемся.
[01:15:08.000 --> 01:15:10.000]  Я говорил про то, что
[01:15:10.000 --> 01:15:12.000]  Биткоин неразрывно связан
[01:15:12.000 --> 01:15:14.000]  с деньгами, с тем, что он реплицирует
[01:15:14.000 --> 01:15:16.000]  печатный станок и вот всю эту систему
[01:15:16.000 --> 01:15:18.000]  с транзакциями, потому что в этом
[01:15:18.000 --> 01:15:20.000]  то, что он реплицирует всю эту систему с транзакциями,
[01:15:20.000 --> 01:15:22.000]  потому что, во-первых, нужно матиировать
[01:15:22.000 --> 01:15:24.000]  майнеров, продолжать работу, поддерживать стабильный лог.
[01:15:24.000 --> 01:15:26.000]  Для этого мы платим им Биткоинами
[01:15:26.000 --> 01:15:28.000]  через Coinbase-транзакции.
[01:15:28.000 --> 01:15:30.000]  Во-вторых, мы
[01:15:30.000 --> 01:15:32.000]  регулируем
[01:15:32.000 --> 01:15:34.000]  скорость эмиссии,
[01:15:34.000 --> 01:15:36.000]  скорость работы печатного станка,
[01:15:36.000 --> 01:15:38.000]  подстраивая это так, чтобы каждый бот
[01:15:38.000 --> 01:15:40.000]  появлялся в среднем раз в 10 минут.
[01:15:40.000 --> 01:15:42.000]  Понятно, что он может появляться быстрее,
[01:15:42.000 --> 01:15:44.000]  может появиться через 3-5 минут,
[01:15:44.000 --> 01:15:46.000]  но просто потому, что пазл так работает,
[01:15:46.000 --> 01:15:48.000]  потому что кто-то в лутере выиграл раньше.
[01:15:48.000 --> 01:15:50.000]  На большом интервале это будет
[01:15:50.000 --> 01:15:52.000]  в среднем раз в 10 минут.
[01:15:52.000 --> 01:15:54.000]  И еще одно замечание,
[01:15:54.000 --> 01:15:56.000]  которое касается
[01:15:56.000 --> 01:15:58.000]  вот этого неравенства.
[01:15:58.000 --> 01:16:00.000]  Эмиссия Биткоина, в принципе, ограничена,
[01:16:00.000 --> 01:16:02.000]  то есть рано или поздно
[01:16:02.000 --> 01:16:04.000]  новые Биткоины перестанут появляться,
[01:16:04.000 --> 01:16:06.000]  потому что каждый
[01:16:06.000 --> 01:16:08.000]  несколько лет
[01:16:08.000 --> 01:16:10.000]  выигрыш
[01:16:10.000 --> 01:16:12.000]  за нахождение очередного блока,
[01:16:12.000 --> 01:16:14.000]  победу за выигрыш
[01:16:14.000 --> 01:16:16.000]  в лутере уполовинивается.
[01:16:16.000 --> 01:16:18.000]  Изначально он был равен 50 Биткоинам,
[01:16:18.000 --> 01:16:20.000]  сейчас это 6.25.
[01:16:22.000 --> 01:16:24.000]  В какой-то момент выигрыш станет
[01:16:24.000 --> 01:16:26.000]  неотличим от нуря,
[01:16:26.000 --> 01:16:28.000]  и мотивация у майнеров
[01:16:28.000 --> 01:16:30.000]  пропадет.
[01:16:30.000 --> 01:16:32.000]  Майнить блоки ради этой coinbase транзакции.
[01:16:32.000 --> 01:16:34.000]  Что же заставит их
[01:16:34.000 --> 01:16:36.000]  продолжать работу?
[01:16:36.000 --> 01:16:38.000]  Просто вот это
[01:16:38.000 --> 01:16:40.000]  это правило,
[01:16:40.000 --> 01:16:42.000]  оно зашито,
[01:16:42.000 --> 01:16:44.000]  зашито
[01:16:44.000 --> 01:16:46.000]  с старта Биткоина,
[01:16:46.000 --> 01:16:48.000]  зашито в протокол.
[01:16:48.000 --> 01:16:50.000]  Рано или поздно Биткоины перестанут
[01:16:50.000 --> 01:16:52.000]  печататься.
[01:16:52.000 --> 01:16:54.000]  Что же заставит майнеров
[01:16:54.000 --> 01:16:56.000]  все же продолжать майнинг,
[01:16:56.000 --> 01:16:58.000]  заставит их тратить электричество?
[01:17:06.000 --> 01:17:08.000]  Чтобы продать
[01:17:08.000 --> 01:17:10.000]  тот же Биткоин
[01:17:10.000 --> 01:17:12.000]  нужно, чтобы системы работали.
[01:17:12.000 --> 01:17:14.000]  Ну а тем, у кого
[01:17:14.000 --> 01:17:16.000]  Биткоинов не очень много,
[01:17:16.000 --> 01:17:18.000]  они могут бросить их.
[01:17:22.000 --> 01:17:24.000]  Дело в этом,
[01:17:24.000 --> 01:17:26.000]  выигрыш
[01:17:26.000 --> 01:17:28.000]  не должен уменьшаться,
[01:17:28.000 --> 01:17:30.000]  природа этого выигрыша
[01:17:30.000 --> 01:17:32.000]  изменится.
[01:17:32.000 --> 01:17:34.000]  Когда мы говорили по транзакции,
[01:17:34.000 --> 01:17:36.000]  мы сказали, что сумма на входе
[01:17:36.000 --> 01:17:38.000]  должна быть не меньше, чем сумма на выходе.
[01:17:38.000 --> 01:17:40.000]  Это понятно, потому что мы деньги
[01:17:40.000 --> 01:17:42.000]  из воздуха тогда берем.
[01:17:42.000 --> 01:17:44.000]  Но она может быть больше.
[01:17:44.000 --> 01:17:46.000]  То есть мы потратили какое-то количество монет,
[01:17:46.000 --> 01:17:48.000]  точнее мы у себя
[01:17:48.000 --> 01:17:50.000]  забрали какое-то количество монет,
[01:17:50.000 --> 01:17:52.000]  а передали магазином
[01:17:52.000 --> 01:17:54.000]  или себе на сдачу меньше,
[01:17:54.000 --> 01:17:56.000]  чем у нас было.
[01:17:56.000 --> 01:17:58.000]  У нас какие-то излишки образовались, куда они пошли?
[01:17:58.000 --> 01:18:00.000]  Вот эта дельта, эта разница
[01:18:00.000 --> 01:18:02.000]  между суммой входов
[01:18:02.000 --> 01:18:04.000]  и суммой выходов,
[01:18:04.000 --> 01:18:06.000]  она отправляется майнеру в качестве
[01:18:06.000 --> 01:18:08.000]  комиссии, которую мы платим майнеру
[01:18:08.000 --> 01:18:10.000]  за то, чтобы он включил наш транзакцию в блок.
[01:18:10.000 --> 01:18:12.000]  И тут
[01:18:12.000 --> 01:18:14.000]  просто происходит аукцион.
[01:18:14.000 --> 01:18:16.000]  Вот вы, не знаю,
[01:18:16.000 --> 01:18:18.000]  бедняк, у которого есть транзакция,
[01:18:18.000 --> 01:18:20.000]  который хочет одну
[01:18:20.000 --> 01:18:22.000]  миллиардную биткоин
[01:18:22.000 --> 01:18:24.000]  перевести.
[01:18:24.000 --> 01:18:26.000]  И у вас нет денег на комиссию, зато есть другие люди,
[01:18:26.000 --> 01:18:28.000]  которые переводят там, не знаю, миллион долларов,
[01:18:28.000 --> 01:18:30.000]  и у них комиссия какая-то существенная.
[01:18:30.000 --> 01:18:32.000]  Так вот, майнер вашу транзакцию переводит просто.
[01:18:32.000 --> 01:18:34.000]  Просто потому, что ему не выгодно
[01:18:34.000 --> 01:18:36.000]  включать вашу, потому что размер блока ограничен,
[01:18:36.000 --> 01:18:38.000]  он не может быть слишком большим.
[01:18:38.000 --> 01:18:40.000]  Потому что этот блок нужно распространить
[01:18:40.000 --> 01:18:42.000]  по сети еще довольно эффективно.
[01:18:42.000 --> 01:18:44.000]  Размер блока в биткоине это
[01:18:44.000 --> 01:18:46.000]  порядка мегабайт, полуторамегабайт.
[01:18:48.000 --> 01:18:50.000]  И вот майнер, который получает транзакцию
[01:18:50.000 --> 01:18:52.000]  от пользователей, он смотрит на их комиссии
[01:18:52.000 --> 01:18:54.000]  и понимает, какие транзакции ему в первую очередь
[01:18:54.000 --> 01:18:56.000]  выгодно поместить в блок, который он майнит.
[01:18:58.000 --> 01:19:00.000]  Если вы предложите ему
[01:19:00.000 --> 01:19:02.000]  большую комиссию, то
[01:19:02.000 --> 01:19:04.000]  скорее всего, он согласится.
[01:19:04.000 --> 01:19:06.000]  Вот когда майнер перестанет получать выигрыш
[01:19:06.000 --> 01:19:08.000]  из coinbase транзакции,
[01:19:10.000 --> 01:19:12.000]  природа этого выигрыша
[01:19:12.000 --> 01:19:14.000]  изменится.
[01:19:14.000 --> 01:19:16.000]  Он станет формироваться преимущественно из комиссии.
[01:19:24.000 --> 01:19:26.000]  Она не откуда берется, она помещается просто в блок.
[01:19:26.000 --> 01:19:28.000]  Это транзакция, которая занимает
[01:19:28.000 --> 01:19:30.000]  это первая транзакция в блоке,
[01:19:30.000 --> 01:19:32.000]  эта транзакция
[01:19:32.000 --> 01:19:34.000]  не имеет входа,
[01:19:34.000 --> 01:19:36.000]  она просто печатает деньги из воздуха.
[01:19:36.000 --> 01:19:38.000]  Там есть только выход.
[01:19:38.000 --> 01:19:40.000]  И вот майнер,
[01:19:40.000 --> 01:19:42.000]  который формирует блок, он вправе в блок
[01:19:42.000 --> 01:19:44.000]  поместить одну такую транзакцию
[01:19:44.000 --> 01:19:46.000]  по протоколу
[01:19:46.000 --> 01:19:48.000]  и выплатить выигрыш себе.
[01:19:48.000 --> 01:19:50.000]  Выигрыш определяется детерминированно, исходя из длины цепочки.
[01:19:50.000 --> 01:19:52.000]  Но это один способ
[01:19:52.000 --> 01:19:54.000]  сжечь деньги.
[01:19:54.000 --> 01:19:56.000]  Если ты хочешь деньги уничтожить,
[01:19:56.000 --> 01:19:58.000]  ты можешь отправить их на
[01:19:58.000 --> 01:20:00.000]  несуществующий адрес.
[01:20:20.000 --> 01:20:22.000]  Я бы сказал, другая проблема есть,
[01:20:22.000 --> 01:20:24.000]  но не то, что
[01:20:24.000 --> 01:20:26.000]  тебе скорее должно беспокоить то,
[01:20:26.000 --> 01:20:28.000]  что если ты вдруг лишишься
[01:20:28.000 --> 01:20:30.000]  своего секретного ключа,
[01:20:30.000 --> 01:20:32.000]  которым ты подписываешь
[01:20:32.000 --> 01:20:34.000]  свои транзакции,
[01:20:34.000 --> 01:20:36.000]  то все биткоины, которые тебя отправили,
[01:20:36.000 --> 01:20:38.000]  они станут недоступны для тебя,
[01:20:38.000 --> 01:20:40.000]  ну и не для кого, для всех станут недоступны.
[01:20:40.000 --> 01:20:42.000]  Таких историй много,
[01:20:42.000 --> 01:20:44.000]  но я думаю, что
[01:20:44.000 --> 01:20:46.000]  это не то,
[01:20:46.000 --> 01:20:48.000]  что ты искал,
[01:20:48.000 --> 01:20:50.000]  ну таких историй много,
[01:20:50.000 --> 01:20:52.000]  да,
[01:20:52.000 --> 01:20:54.000]  это та самая история.
[01:20:54.000 --> 01:20:56.000]  То есть ты уже не сможешь прийти в банк с паспортом,
[01:20:56.000 --> 01:20:58.000]  потому что нет никакого банка,
[01:20:58.000 --> 01:21:00.000]  мы решили от него отказаться,
[01:21:00.000 --> 01:21:02.000]  и паспорт у тебя тоже никто не спрашивал на входе,
[01:21:02.000 --> 01:21:04.000]  поэтому у тебя есть только твой секретный ключ,
[01:21:04.000 --> 01:21:06.000]  только им ты можешь доказать, если ты его лишился,
[01:21:06.000 --> 01:21:08.000]  то все.
[01:21:16.000 --> 01:21:18.000]  Но сейчас выигрыш есть,
[01:21:18.000 --> 01:21:20.000]  и комиссии тоже есть.
[01:21:20.000 --> 01:21:22.000]  Ну как бы это рынок,
[01:21:22.000 --> 01:21:24.000]  то есть если вдруг ты начнешь требовать больших комиссий,
[01:21:24.000 --> 01:21:26.000]  то понятно, что есть другой
[01:21:26.000 --> 01:21:28.000]  майнер, и он может
[01:21:28.000 --> 01:21:30.000]  все устроить.
[01:21:30.000 --> 01:21:32.000]  Вопрос?
[01:21:46.000 --> 01:21:48.000]  Да, вот,
[01:21:48.000 --> 01:21:50.000]  давайте вернемся к комиту,
[01:21:50.000 --> 01:21:52.000]  я обещал и забыл про это.
[01:21:54.000 --> 01:21:56.000]  Мне нужно было про 10 минут рассказать.
[01:21:56.000 --> 01:21:58.000]  Вот блоки
[01:21:58.000 --> 01:22:00.000]  появляются не слишком часто,
[01:22:00.000 --> 01:22:02.000]  потому что если они будут появляться слишком часто,
[01:22:02.000 --> 01:22:04.000]  непредсказуемо, или они станут очень большими,
[01:22:04.000 --> 01:22:06.000]  то это просто повысит
[01:22:06.000 --> 01:22:08.000]  вероятность форка, но система будет часто в нестабильном состоянии.
[01:22:08.000 --> 01:22:10.000]  Вот
[01:22:10.000 --> 01:22:12.000]  параметры подобраны и подогнаны таким
[01:22:12.000 --> 01:22:14.000]  образом, чтобы все-таки блокчейн
[01:22:14.000 --> 01:22:16.000]  не стабилизировался, и там форка в длиной
[01:22:16.000 --> 01:22:18.000]  больше одного-двух не бывает особо.
[01:22:18.000 --> 01:22:20.000]  Поэтому,
[01:22:20.000 --> 01:22:22.000]  ну а в принципе
[01:22:22.000 --> 01:22:24.000]  гарантировать, что если,
[01:22:24.000 --> 01:22:26.000]  гарантировать, что транзакция в этом блоке
[01:22:26.000 --> 01:22:28.000]  навечно принадлежит блокчейну,
[01:22:28.000 --> 01:22:30.000]  то есть самые длинные цепочки в этом дереве
[01:22:30.000 --> 01:22:32.000]  нельзя, невозможно. Всегда
[01:22:32.000 --> 01:22:34.000]  можно перемайнить.
[01:22:34.000 --> 01:22:36.000]  Поэтому
[01:22:36.000 --> 01:22:38.000]  используют такое виприческое правило.
[01:22:38.000 --> 01:22:40.000]  Но, кстати,
[01:22:40.000 --> 01:22:42.000]  немного похоже на рафт. Смотрите,
[01:22:42.000 --> 01:22:44.000]  вот каждый блок,
[01:22:44.000 --> 01:22:46.000]  когда он появляется
[01:22:46.000 --> 01:22:48.000]  с каким-то нонсом, то он,
[01:22:48.000 --> 01:22:50.000]  то есть с одной стороны
[01:22:50.000 --> 01:22:52.000]  мы знаем, что какой-то майнер выиграл
[01:22:52.000 --> 01:22:54.000]  лутерею, а с другой
[01:22:54.000 --> 01:22:56.000]  стороны мы знаем, что большая часть
[01:22:56.000 --> 01:22:58.000]  сети, большая часть сети
[01:22:58.000 --> 01:23:00.000]  проголосовала за продолжение этой цепочки.
[01:23:02.000 --> 01:23:04.000]  Вот каждый блок, который накрывает,
[01:23:04.000 --> 01:23:06.000]  мы закоммитили транзакцию,
[01:23:06.000 --> 01:23:08.000]  а вот она здесь,
[01:23:08.000 --> 01:23:10.000]  ну не закоммитили, мы
[01:23:10.000 --> 01:23:12.000]  поместили в блокчейн транзакцию
[01:23:12.000 --> 01:23:14.000]  и каждый блок,
[01:23:14.000 --> 01:23:16.000]  который сверху ее накрывает,
[01:23:16.000 --> 01:23:18.000]  он ее как бы придавливает.
[01:23:18.000 --> 01:23:20.000]  Это вот голос большей части сети
[01:23:20.000 --> 01:23:22.000]  за вот эту ветку,
[01:23:22.000 --> 01:23:24.000]  в том числе за ветку
[01:23:24.000 --> 01:23:26.000]  с блоком с этой транзакцией.
[01:23:28.000 --> 01:23:30.000]  Поэтому действует так, если
[01:23:30.000 --> 01:23:32.000]  твою транзакцию накрыла
[01:23:32.000 --> 01:23:34.000]  6 блоков, то ты считаешь, что
[01:23:34.000 --> 01:23:36.000]  перемайниться эта ветка, скорее всего, не сможет.
[01:23:36.000 --> 01:23:38.000]  Ты этому веришь.
[01:23:40.000 --> 01:23:42.000]  Но есть разные способы
[01:23:42.000 --> 01:23:44.000]  это ускорять.
[01:23:44.000 --> 01:23:46.000]  Можно задействовать банк, который
[01:23:46.000 --> 01:23:48.000]  возьмет на себе риски.
[01:23:48.000 --> 01:23:50.000]  Понимаешь, да,
[01:23:50.000 --> 01:23:52.000]  примерно, чем я клоню к тому, что
[01:23:52.000 --> 01:23:54.000]  если твою транзакцию накрыла
[01:23:54.000 --> 01:23:56.000]  еще один блок, то это
[01:23:56.000 --> 01:23:58.000]  такой шашок в сторону комита.
[01:23:58.000 --> 01:24:00.000]  Вот банк может посмотреть и сказать
[01:24:00.000 --> 01:24:02.000]  магазину условному, что да, я верю,
[01:24:02.000 --> 01:24:04.000]  что транзакция не откатится.
[01:24:04.000 --> 01:24:06.000]  Сделка состоится сразу, а банк
[01:24:06.000 --> 01:24:08.000]  возьмет на себе риски в случае, если транзакция
[01:24:08.000 --> 01:24:10.000]  не откатится.
[01:24:10.000 --> 01:24:12.000]  Тут можно разные эвристики,
[01:24:12.000 --> 01:24:14.000]  идеи использовать.
[01:24:14.000 --> 01:24:16.000]  Очень сложная инфраструктура вообще биткоина.
[01:24:16.000 --> 01:24:18.000]  Это не про алгоритмы, но не только про алгоритмы.
[01:24:18.000 --> 01:24:20.000]  Это про очень много разных вещей про экономику,
[01:24:20.000 --> 01:24:22.000]  про криптографию,
[01:24:22.000 --> 01:24:24.000]  про самые разные области.
[01:24:26.000 --> 01:24:28.000]  Алгоритмически мы не можем гарантировать
[01:24:28.000 --> 01:24:30.000]  комит. В биткоине, в блокчейнах
[01:24:30.000 --> 01:24:32.000]  это называется, там все называется
[01:24:32.000 --> 01:24:34.000]  альтернативным образом, там у нас не логи
[01:24:34.000 --> 01:24:36.000]  аледжеры,
[01:24:36.000 --> 01:24:38.000]  не команда, не логи,
[01:24:38.000 --> 01:24:40.000]  а транзакции блокчейна
[01:24:40.000 --> 01:24:42.000]  и не комит, а свойство
[01:24:42.000 --> 01:24:44.000]  финалити, оно называется.
[01:24:46.000 --> 01:24:48.000]  Вот этого нет. Если мы
[01:24:48.000 --> 01:24:50.000]  используем протоколы типа
[01:24:50.000 --> 01:24:52.000]  BFT, то есть. Если мы используем
[01:24:52.000 --> 01:24:54.000]  протоколы, где у нас
[01:24:54.000 --> 01:24:56.000]  число участников не фиксировано,
[01:24:56.000 --> 01:24:58.000]  то комита у нас больше нет,
[01:24:58.000 --> 01:25:00.000]  финалити у нас нет.
[01:25:06.000 --> 01:25:08.000]  Так здесь нет никаких часов.
[01:25:08.000 --> 01:25:10.000]  Сейчас, подожди, что ты имеешь в виду?
[01:25:10.000 --> 01:25:12.000]  Майнинг он на часы не завязан никак.
[01:25:12.000 --> 01:25:14.000]  Мы просто майним самую длинную ветку.
[01:25:16.000 --> 01:25:18.000]  Ну да, в блоках есть
[01:25:18.000 --> 01:25:20.000]  временная метка. Она
[01:25:20.000 --> 01:25:22.000]  не обязана быть точной.
[01:25:22.000 --> 01:25:24.000]  Честно говоря,
[01:25:24.000 --> 01:25:26.000]  я вот здесь детали не знаю, но легко
[01:25:26.000 --> 01:25:28.000]  предположить, что верификация
[01:25:28.000 --> 01:25:30.000]  может проверять, что временная метка какая-то разумная.
[01:25:32.000 --> 01:25:34.000]  Ну, по крайней мере, они монотонные.
[01:25:34.000 --> 01:25:36.000]  Понятно.
[01:25:36.000 --> 01:25:38.000]  Да, в блок добавляется
[01:25:38.000 --> 01:25:40.000]  временная метка.
[01:25:40.000 --> 01:25:42.000]  Это важно,
[01:25:42.000 --> 01:25:44.000]  потому что правило пересчета D
[01:25:44.000 --> 01:25:46.000]  зависит очевидно от этих временных меток.
[01:25:50.000 --> 01:25:52.000]  А правило
[01:25:52.000 --> 01:25:54.000]  коррекции D должно быть детерминировано,
[01:25:54.000 --> 01:25:56.000]  работать одинаково на всех частных узлах.
[01:26:04.000 --> 01:26:06.000]  Вопросы кончились?
[01:26:08.000 --> 01:26:10.000]  Давайте тогда какой-то итог
[01:26:10.000 --> 01:26:12.000]  подведем.
[01:26:14.000 --> 01:26:16.000]  Кажется, мы решили
[01:26:16.000 --> 01:26:18.000]  задачу репликации лого
[01:26:18.000 --> 01:26:20.000]  принципиально другим способом.
[01:26:20.000 --> 01:26:22.000]  Выглядит все очень
[01:26:22.000 --> 01:26:24.000]  непохоже, но я бы сказал, что
[01:26:24.000 --> 01:26:26.000]  во-первых, похоже, я сейчас объясню
[01:26:26.000 --> 01:26:28.000]  повторю еще раз, почему я так считаю,
[01:26:28.000 --> 01:26:30.000]  а во-вторых, в чем причина всех этих
[01:26:30.000 --> 01:26:32.000]  различий? Причина кажется ровно в одном месте.
[01:26:32.000 --> 01:26:34.000]  В этот момент, она появилась в этот момент,
[01:26:34.000 --> 01:26:36.000]  возникла эта причина, когда мы
[01:26:36.000 --> 01:26:38.000]  решили, что число узлов
[01:26:38.000 --> 01:26:40.000]  в нашей сети будет нефиксированным
[01:26:40.000 --> 01:26:42.000]  и к этой сети можно свободно
[01:26:42.000 --> 01:26:44.000]  присоединяться.
[01:26:44.000 --> 01:26:46.000]  Именно поэтому, то есть мы по смыслу
[01:26:46.000 --> 01:26:48.000]  также ротировали лидера,
[01:26:48.000 --> 01:26:50.000]  ротировали узел, который
[01:26:50.000 --> 01:26:52.000]  продолжает цепочку, продолжает наш
[01:26:52.000 --> 01:26:54.000]  лог. Но в PBFT
[01:26:54.000 --> 01:26:56.000]  мы ротировали его относительно жесткой
[01:26:56.000 --> 01:26:58.000]  конфигурации, просто увеличивали индекс,
[01:26:58.000 --> 01:27:00.000]  брали по модулю. Сейчас
[01:27:00.000 --> 01:27:02.000]  мы вместо этого используем децентрализованную лутерею.
[01:27:02.000 --> 01:27:04.000]  Но задача,
[01:27:04.000 --> 01:27:06.000]  то есть цели этого механизма
[01:27:06.000 --> 01:27:08.000]  ровно такие же.
[01:27:08.000 --> 01:27:10.000]  Раньше мы обеспечивали,
[01:27:10.000 --> 01:27:12.000]  мы голосовали
[01:27:12.000 --> 01:27:14.000]  кворумами, голосовали
[01:27:14.000 --> 01:27:16.000]  своими уникальными идентификаторами,
[01:27:16.000 --> 01:27:18.000]  которые формировали
[01:27:18.000 --> 01:27:20.000]  всю систему. Сейчас у нас
[01:27:20.000 --> 01:27:22.000]  снова состав узлов переменный,
[01:27:22.000 --> 01:27:24.000]  идентификаторам верить нельзя, потому что
[01:27:24.000 --> 01:27:26.000]  византийские узлы могут порождать
[01:27:26.000 --> 01:27:28.000]  виртуальные идентификаторы,
[01:27:28.000 --> 01:27:30.000]  виртуальных
[01:27:30.000 --> 01:27:32.000]  майнеров,
[01:27:32.000 --> 01:27:34.000]  виртуальных майнеров не могут порождать
[01:27:34.000 --> 01:27:36.000]  в этом идее. В том, что виртуальный участник
[01:27:36.000 --> 01:27:38.000]  с идентификатором может быть, а виртуального
[01:27:38.000 --> 01:27:40.000]  процессора быть не может. Процессор должен быть
[01:27:40.000 --> 01:27:42.000]  настоящий в конце концов. Поэтому мы
[01:27:42.000 --> 01:27:44.000]  голосуем не идентификаторами, мы голосуем
[01:27:44.000 --> 01:27:46.000]  процессорами. Но смысл примерно такой же
[01:27:46.000 --> 01:27:48.000]  мы снова требуем большинства.
[01:27:50.000 --> 01:27:52.000]  Дальше.
[01:27:52.000 --> 01:27:54.000]  Какие еще сходства?
[01:27:54.000 --> 01:27:56.000]  Снова есть какая-то нижняя граница.
[01:27:56.000 --> 01:27:58.000]  Только какую долю византийских отказов
[01:27:58.000 --> 01:28:00.000]  мы можем пережить?
[01:28:00.000 --> 01:28:02.000]  У нас была треть, половина
[01:28:02.000 --> 01:28:04.000]  для византийских треть. Сейчас у нас
[01:28:04.000 --> 01:28:06.000]  снова половина, но уже опять в процессорах.
[01:28:06.000 --> 01:28:08.000]  Правда, теперь
[01:28:08.000 --> 01:28:10.000]  нас эта граница не так беспокоит,
[01:28:10.000 --> 01:28:12.000]  потому что если вдруг появятся
[01:28:12.000 --> 01:28:14.000]  византийские узлы,
[01:28:14.000 --> 01:28:16.000]  появится византийский
[01:28:16.000 --> 01:28:18.000]  участник с огромными
[01:28:18.000 --> 01:28:20.000]  вычислительными мощностями, то он все равно не сможет
[01:28:20.000 --> 01:28:22.000]  сделать дабл спенд, потому что вот просто
[01:28:22.000 --> 01:28:24.000]  экономические соображения его остановят.
[01:28:26.000 --> 01:28:28.000]  И мне кажется,
[01:28:28.000 --> 01:28:30.000]  самая мощная идея,
[01:28:30.000 --> 01:28:32.000]  это все про сходства,
[01:28:32.000 --> 01:28:34.000]  а про различия,
[01:28:34.000 --> 01:28:36.000]  мне кажется, что очень мощная идея,
[01:28:36.000 --> 01:28:38.000]  которая у нас здесь возникла, это
[01:28:38.000 --> 01:28:40.000]  хэшпоинтеры.
[01:28:40.000 --> 01:28:42.000]  Мы отказались от индексов,
[01:28:42.000 --> 01:28:44.000]  мы теперь не рассматриваем позиции в логе
[01:28:44.000 --> 01:28:46.000]  независимого, мы майним именно цепочки.
[01:28:46.000 --> 01:28:48.000]  И когда мы находим нонс,
[01:28:48.000 --> 01:28:50.000]  то есть вот этот proof of work, который лежит
[01:28:50.000 --> 01:28:52.000]  в основе всего этого
[01:28:52.000 --> 01:28:54.000]  алгоритма, он с одной стороны, да,
[01:28:54.000 --> 01:28:56.000]  реализует выбор лидера, а с другой стороны,
[01:28:56.000 --> 01:28:58.000]  он с помощью вот
[01:28:58.000 --> 01:29:00.000]  кумулятивности этих хэшпоинтеров,
[01:29:00.000 --> 01:29:02.000]  которые вкладываются один в другой,
[01:29:02.000 --> 01:29:04.000]  позволяют нам и голосование
[01:29:04.000 --> 01:29:06.000]  устраивать.
[01:29:06.000 --> 01:29:08.000]  И вот если вы помните,
[01:29:08.000 --> 01:29:10.000]  в следующий раз я об этом расскажу
[01:29:10.000 --> 01:29:12.000]  на последнем занятии,
[01:29:12.000 --> 01:29:14.000]  как можно биткоин объединить с PBFT.
[01:29:14.000 --> 01:29:16.000]  Идея главная там такая,
[01:29:16.000 --> 01:29:18.000]  помните, как было в PBFT,
[01:29:18.000 --> 01:29:20.000]  мы получали транзакцию
[01:29:20.000 --> 01:29:22.000]  с порядковым номером от Primary,
[01:29:22.000 --> 01:29:24.000]  а потом обменивались
[01:29:24.000 --> 01:29:26.000]  и пытались понять, что на большинстве
[01:29:26.000 --> 01:29:28.000]  частных реплик транзакция
[01:29:28.000 --> 01:29:30.000]  эта транзакция,
[01:29:30.000 --> 01:29:32.000]  а потом мы еще раз обменивались
[01:29:32.000 --> 01:29:34.000]  и пытались понять, что большинство частных реплик знают,
[01:29:34.000 --> 01:29:36.000]  что на большинстве частных реплик это транзакция.
[01:29:36.000 --> 01:29:38.000]  Ну, это знание
[01:29:38.000 --> 01:29:40.000]  как бы кумулятивно накапливается с каждым раундом.
[01:29:42.000 --> 01:29:44.000]  И для каждого слота это было все независимо.
[01:29:44.000 --> 01:29:46.000]  А здесь
[01:29:46.000 --> 01:29:48.000]  это знание накапливается через блокчейн.
[01:29:48.000 --> 01:29:50.000]  Через вот эти нонс, через хэшпоинтеры.
[01:29:50.000 --> 01:29:54.000]  В смысле, вот эта вся конструкция, она накапливает это знание, и если это
[01:29:54.000 --> 01:29:56.960]  аккуратно склеить с корумбными сетификатами, то можно получить очень
[01:29:56.960 --> 01:30:04.000]  быстрый фиксированный PBFT. Ну это вот в следующий раз.
[01:30:04.000 --> 01:30:11.240]  Там будет фиксированная конфигурация, но мы, используя вот эту идею,
[01:30:11.240 --> 01:30:18.000]  которую в принципе можно от биткоина-то оторвать, можем ускорить тот протокол.
[01:30:18.000 --> 01:30:26.000]  В блокчейнах есть два мира. Один мир permissionless, где сеть не фиксирована,
[01:30:26.000 --> 01:30:31.000]  число участников не фиксирована, и второй мир это, где у нас конфигурация жёсткая.
[01:30:31.000 --> 01:30:35.000]  Ну и вот в одном случае используется Quorum, и в другом случае используется...
[01:30:35.000 --> 01:30:41.000]  Да, в чём ещё отличие, точнее параллель. У нас был бродкаст, где мы общались со всеми.
[01:30:41.000 --> 01:30:45.000]  Сейчас у нас Gossip. Ну короче, вот все различия и все сходства, они есть,
[01:30:45.000 --> 01:30:49.000]  потому что задача одна и та же, а все различия в одних и тех же подзадачах,
[01:30:49.000 --> 01:30:55.000]  они возникают потому, что у нас число участников динамическое.
[01:30:55.000 --> 01:31:00.000]  Ну вот эта идея, её можно в обратную сторону перенести с хэшпоинтерами.
[01:31:00.000 --> 01:31:06.000]  Использовать её и в статической конфигурации.
[01:31:06.000 --> 01:31:14.000]  Ну и чтобы эту часть занятия завершить, давайте я поговорю про два забавных нюанса.
[01:31:14.000 --> 01:31:19.000]  Вот смотрите, мы вроде бы избежали...
[01:31:19.000 --> 01:31:24.000]  Да, и последнее различие я забыл. Самое главное, мы решились коммитом.
[01:31:24.000 --> 01:31:28.000]  Именно из-за динамичности.
[01:31:28.000 --> 01:31:36.000]  Теперь про децентрализацию немного. Вот с одной стороны, мы от банков избавились.
[01:31:36.000 --> 01:31:41.000]  То есть нам банки не нужны для того, чтобы скрывать этот лог для приватности,
[01:31:41.000 --> 01:31:45.000]  или для того, чтобы упорядочивать официальные транзакции, можем делать распределённо.
[01:31:45.000 --> 01:31:50.000]  Нам не нужен банк, чтобы он печатал деньги заданным рейтом.
[01:31:50.000 --> 01:31:56.000]  И нам не нужен банк для того, чтобы связывать идентити и открытые ключи.
[01:31:56.000 --> 01:32:00.000]  Вроде бы мы никому не доверяем.
[01:32:00.000 --> 01:32:03.000]  Но вот есть место, где мы всё-таки доверяем кому-то.
[01:32:03.000 --> 01:32:09.000]  То есть невозможно запустить систему децентрализованную византийскую совсем без доверия.
[01:32:09.000 --> 01:32:12.000]  Где-то на старте мы должны кому-то доверять.
[01:32:12.000 --> 01:32:17.000]  Вот где здесь доверие сосредоточено во всей этой конструкции?
[01:32:17.000 --> 01:32:21.000]  Нет, во-первых, один человек не имеет смысла формировать.
[01:32:21.000 --> 01:32:24.000]  Нужно объединяться в целые группы, а во-вторых, когда транзакция...
[01:32:24.000 --> 01:32:29.000]  Сейчас, подожди. Один человек, это немного про другую речь.
[01:32:29.000 --> 01:32:33.000]  Вот я говорил, что система Bitcoin поддерживает сам себя.
[01:32:33.000 --> 01:32:38.000]  У нас у валюты будет стоимость, когда под ней будет надёжный реплицированный лог.
[01:32:38.000 --> 01:32:42.000]  А эта надежность реплицированного лога достигается честной работы майнеров.
[01:32:42.000 --> 01:32:47.000]  А майнеры продолжают работать, потому что они майнят валюту, получают в этих монетах выигрыш,
[01:32:47.000 --> 01:32:50.000]  поэтому они заинтересованы, чтобы целость сохранялась.
[01:32:50.000 --> 01:32:53.000]  Вот получается такая система, она поддерживает сама себя.
[01:32:53.000 --> 01:32:56.000]  Но на старте, конечно, этого ничего нет.
[01:32:56.000 --> 01:33:00.000]  На старте у нас есть один условный Сатоша неизвестный,
[01:33:00.000 --> 01:33:03.000]  который майнит в одиночку на своём компьютере, получает весь выигрыш.
[01:33:03.000 --> 01:33:08.000]  Ну, я покажу после первого сам Блокчейн, с чего он начинался.
[01:33:08.000 --> 01:33:12.000]  Это один человек, он майнит на своей одной машине.
[01:33:12.000 --> 01:33:15.000]  И, конечно же, легко злоумышленнику прийти и перемайнить всё.
[01:33:15.000 --> 01:33:18.000]  Но с другой стороны, какой в этом прок, потому что Bitcoin пока ничего не стоит.
[01:33:18.000 --> 01:33:21.000]  Он стоит ноль, потому что им пользуется один человек.
[01:33:21.000 --> 01:33:24.000]  Так что и атаки делать бесполезно на эту криптовалюкту.
[01:33:24.000 --> 01:33:27.000]  Ну, если просто вы не злобный какой-то очень.
[01:33:27.000 --> 01:33:34.000]  Так что вот если система набрала ход, то да, она сама поддерживает себя и довольно устойчиво.
[01:33:34.000 --> 01:33:39.000]  На старте, конечно, она неустойчива, но с другой стороны, она никому не интересна.
[01:33:39.000 --> 01:33:42.000]  Но это про другое речь, это не про доверие всё же.
[01:33:44.000 --> 01:33:46.000]  Так где bootstrap-то?
[01:33:50.000 --> 01:33:53.000]  Ну вот нам нужно бы ноль знать.
[01:33:53.000 --> 01:33:56.000]  Вот бы ноль — это некоторый произвол.
[01:33:56.000 --> 01:34:01.000]  Вот нам автор блокчейна говорит, что хэш первого, хэш нулевого блока — вот он.
[01:34:03.000 --> 01:34:07.000]  Вообще вот представьте себе, что вы приходите в систему, и вам нужно узнать блокчейн.
[01:34:07.000 --> 01:34:10.000]  Как вы поймёте, какой блокчейн нужно майнить?
[01:34:10.000 --> 01:34:11.000]  Да.
[01:34:11.000 --> 01:34:13.000]  А как мы вообще приходим в систему?
[01:34:13.000 --> 01:34:16.000]  Ну это гость, и ты должен иметь некоторых сидов всегда.
[01:34:16.000 --> 01:34:20.000]  То есть чтобы войти в систему, тебе нужно знать какие-то узлы, которые системе принадлежат.
[01:34:21.000 --> 01:34:27.000]  Да, ну ещё я бы сказал, что GitHub — это тоже источник централизации,
[01:34:27.000 --> 01:34:32.000]  потому что я вам в чате кидал ссылку Yellow Paper Эфириума.
[01:34:32.000 --> 01:34:35.000]  Такая вот формальная спецификация, там много деталей.
[01:34:35.000 --> 01:34:37.000]  У Биткоина, кажется, такой нет спецификации.
[01:34:37.000 --> 01:34:39.000]  Ну то есть это как в Пайтоне.
[01:34:39.000 --> 01:34:42.000]  Стандарт Пайтона — это вот имплементация виртуальной машины CPython.
[01:34:42.000 --> 01:34:47.000]  Это вот то, как язык себе должен вести следовательно за реализацией.
[01:34:47.000 --> 01:34:53.000]  Кажется, точно так же есть клиент Биткоина, и это такая точка истины.
[01:34:53.000 --> 01:34:55.000]  Как должен работать протокол, в конце концов.
[01:34:55.000 --> 01:34:59.000]  Так что мы доверяемся здесь ещё группе людей.
[01:34:59.000 --> 01:35:03.000]  Люди сходятся в том, что репозитория на GitHub — это действительно Биткоин.
[01:35:03.000 --> 01:35:07.000]  Именно этот репозиторий — это протокол Биткоина.
[01:35:11.000 --> 01:35:13.000]  Ну вот видишь, ты как бы порождаешь разделение какое-то.
[01:35:13.000 --> 01:35:19.000]  Люди договорились, что всё-таки Биткоин на GitHub — это вот правильный Биткоин.
[01:35:25.000 --> 01:35:27.000]  Так что значит потеряют? Они его и не хранят.
[01:35:27.000 --> 01:35:32.000]  Это просто в скрижалях выписано, что вот хэш нырёвого блока такой.
[01:35:32.000 --> 01:35:35.000]  Если блокчейн начинается с другого блока, то это не блокчейн.
[01:35:35.000 --> 01:35:37.000]  Блокчейн не Биткоина, возможно, что-то другого.
[01:35:37.000 --> 01:35:41.000]  Ну вот об этом, то есть вопрос, как пойти в систему.
[01:35:41.000 --> 01:35:45.000]  Подожди, как пойти в систему? Вот это написано где-то.
[01:35:45.000 --> 01:35:51.000]  Как пойти в систему? Ну, ты должен знать участник, который уже находится в системе.
[01:35:55.000 --> 01:35:57.000]  Это может быть написано в интернете где угодно.
[01:35:57.000 --> 01:35:59.000]  Может быть какой-нибудь DNS-адрес, который мачится в какие-то СИДы.
[01:35:59.000 --> 01:36:01.000]  В любом случае тебя могут обмануть.
[01:36:01.000 --> 01:36:03.000]  Это никогда не кончится, можно часами говорить.
[01:36:15.000 --> 01:36:19.000]  Ну база в смысле блокчейна — это вот джанезис-блок и в него все верят.
[01:36:19.000 --> 01:36:25.000]  В этом джанезис-блоке в тексте транзакции есть цитата из газетной заметки.
[01:36:25.000 --> 01:36:29.000]  Ты знаешь, что в этом блоке, прямо у этого хэша, должна быть заметка газетной газеты за такое число.
[01:36:29.000 --> 01:36:33.000]  Поэтому если ты веришь, что газета тебе не обманывает, я архив не обманываю тебе.
[01:36:33.000 --> 01:36:37.000]  Ты можешь еще проверить. Мы доверяем вот еще этому.
[01:36:37.000 --> 01:36:39.000]  Но вот только на старте больше никому не доверяем.
[01:36:39.000 --> 01:36:45.000]  По поводу твоего вопроса, ты приходишь в систему и ты общаешься с разными узлами.
[01:36:45.000 --> 01:36:49.000]  И кто-то из них может давать тебе честные блокчейны, кто-то может набрать.
[01:36:49.000 --> 01:36:53.000]  Ну во-первых, тут любопытное замечание. В этой системе нет снапшотов.
[01:36:53.000 --> 01:36:56.000]  Вот у нас логи растут, они растут, кажется, неограниченно.
[01:36:56.000 --> 01:36:59.000]  Раньше мы снапшоты делали.
[01:36:59.000 --> 01:37:02.000]  Но раньше мы делали снапшоты просто независимо на каждом узле
[01:37:02.000 --> 01:37:05.000]  и верили другому узлу, к которому присылается снапшот.
[01:37:05.000 --> 01:37:09.000]  В прошлый раз в PFT мы перестали так делать, в смысле верить, к которому присылается снапшот.
[01:37:09.000 --> 01:37:15.000]  Нам нужно было приложить к нему сертификат, что вот в каждом узле мы делали снипшоты.
[01:37:15.000 --> 01:37:18.000]  Когда мы делали снапшот, нам нужно было приложить к нему сертификат,
[01:37:18.000 --> 01:37:24.000]  что вот в этой позиции лога большинство честных узлов сделали снапшот с этим кэшом.
[01:37:24.000 --> 01:37:28.000]  Вот тут это больше не работает, потому что сколько узлов непонятно,
[01:37:28.000 --> 01:37:30.000]  и такой сертификат не собрать уже.
[01:37:30.000 --> 01:37:33.000]  Поэтому блокчейн копится вот с самого начала.
[01:37:33.000 --> 01:37:37.000]  Но правда он копится относительно медленно, то есть он сейчас занимает сколько?
[01:37:37.000 --> 01:37:40.000]  300 гигабайт, кажется, можно с этим жить.
[01:37:40.000 --> 01:37:46.000]  Но тем не менее, мы должны провалидировать сам блокчейн.
[01:37:46.000 --> 01:37:51.000]  Разумеется, если блокчейн сходится не в B0, значит это неправильный блокчейн.
[01:37:51.000 --> 01:37:57.000]  А дальше мы получаем от разных узлов, там есть честные, там есть византийские, разные блокчейны, они сходятся к B0.
[01:37:57.000 --> 01:38:04.000]  Мы можем провалидировать эти блокчейны, они все честные, в смысле транзакции нонсосходятся,
[01:38:04.000 --> 01:38:09.000]  транзакции не тратят потраченные выходы, сложность адаптирует сразу.
[01:38:09.000 --> 01:38:15.000]  Короче, мы можем проверить эти блокчейны по отдельности, они все валидные, но они разные.
[01:38:15.000 --> 01:38:19.000]  У них разная длина, разная сложность, мы должны между ними как-то выбрать.
[01:38:19.000 --> 01:38:23.000]  Такая проблема действительно у тебя может быть. Как же ты поступишь?
[01:38:26.000 --> 01:38:28.000]  Самый длинный.
[01:38:29.000 --> 01:38:35.000]  Самый длинный. Я сел за свой компьютер и начал генерировать блоки.
[01:38:35.000 --> 01:38:41.000]  Я выбрал D очень маленькое, поэтому я генерирую очень быстро, напишу там какие-то сомнительные временные метки внутри.
[01:38:41.000 --> 01:38:46.000]  У меня очень длинный блокчейн, он может быть даже длиннее, чем настоящий.
[01:38:48.000 --> 01:38:52.000]  А может быть еще очень короткий блокчейн, он короче настоящего, но он сложный.
[01:38:52.000 --> 01:38:55.000]  Там D больше, а настоящего ты все равно не знаешь.
[01:38:55.000 --> 01:39:01.000]  То есть ты не можешь сказать, что он короче настоящего, нет никакого настоящего, есть просто три варианта у тебя.
[01:39:02.000 --> 01:39:05.000]  Как ты это переживешь?
[01:39:10.000 --> 01:39:13.000]  Так нет, джанейз блок у всех одинаковый.
[01:39:13.000 --> 01:39:31.000]  Вообще кажется даже в клиента встраивают чекпоинты, то есть какой-то там 100 тысячный блок был с таким хэшом.
[01:39:31.000 --> 01:39:38.000]  Но это отступление от принципов биткоина, потому что ты доверяешься какому-то одному источнику.
[01:39:39.000 --> 01:39:45.000]  Смотрите, как можно отделить. Представим, что есть очень короткий блокчейн, но очень сложный.
[01:39:45.000 --> 01:39:50.000]  Почему мы его оттечем? Он короче настоящего и сложнее настоящего.
[01:39:50.000 --> 01:39:55.000]  Почему мы его оттечем? Потому что он не будет расти раз десять минут.
[01:39:55.000 --> 01:40:00.000]  А из тех, кто будет расти, мы просто оставим тот, который самый сложный.
[01:40:00.000 --> 01:40:02.000]  Вот и все.
[01:40:04.000 --> 01:40:08.000]  То есть слишком сложный честный он не растет.
[01:40:08.000 --> 01:40:14.000]  А из тех, кто растет, видимо, самый сложный, это тот, кто над кем трудится большая часть сети.
[01:40:14.000 --> 01:40:20.000]  Если ты живешь в изоляции где-то и не можешь узнать ни одного честного узла, то в принципе тебя могут умолнуть,
[01:40:20.000 --> 01:40:22.000]  ты будешь майнить, что ты не то.
[01:40:22.000 --> 01:40:29.000]  Но если ты не совсем изолирован от окружающего мира, то скорее всего ты попадешь в какие-то честные узлы
[01:40:29.000 --> 01:40:34.000]  и сможешь из них достать правильный блокчейн, присоединиться к нему.
[01:40:38.000 --> 01:40:41.000]  Ну да, это фундаментальная константа.
[01:40:44.000 --> 01:40:47.000]  Среди них самый сложный выбирать будем.
[01:40:47.000 --> 01:40:55.000]  Потому что мы знаем, что в него вложены максимальные усилия, максимальные процессорные мощности.
[01:41:00.000 --> 01:41:03.000]  Ну что, давайте сделаем перерыв, если вопросов у нас пока не осталось.
[01:41:03.000 --> 01:41:06.000]  Вопросы пока закончились, потому что я рассказал.
[01:41:06.000 --> 01:41:08.000]  И после перерыва продолжим.
[01:41:12.000 --> 01:41:15.000]  Ну что, давайте начинать, на чем мы остановились.
[01:41:15.000 --> 01:41:19.000]  Тут можно на самом деле про биткоин и про блокчейн и миллиард вещей обсудить.
[01:41:19.000 --> 01:41:21.000]  Они все касаются распределенности.
[01:41:21.000 --> 01:41:24.000]  И про распределенность мы договоримся в следующий раз.
[01:41:24.000 --> 01:41:28.000]  Но какие-то вещи касаются, а вот есть некоторые вещи, про которые просто невозможно не рассказать.
[01:41:28.000 --> 01:41:33.000]  Например, как биткоин использует криптографию.
[01:41:33.000 --> 01:41:35.000]  Вообще примеров миллион.
[01:41:35.000 --> 01:41:39.000]  Ну вот мы уже видели про криптографические хэш-функции, про адреса.
[01:41:39.000 --> 01:41:44.000]  Кстати, да, мы не поговорили, почему мы готовы адресовать транзакции хэшами.
[01:41:44.000 --> 01:41:47.000]  Пока вы можете об этом подумать, если что.
[01:41:47.000 --> 01:41:49.000]  Ну зачем я спрашиваю вас.
[01:41:49.000 --> 01:41:55.000]  Вот есть еще один забавный криптографический инструмент, который в биткоине используется, который описан прямо в исходной статье.
[01:41:55.000 --> 01:41:59.000]  Итак, у нас есть большой блокчейн.
[01:41:59.000 --> 01:42:02.000]  Он хранится на всех узлах сети.
[01:42:02.000 --> 01:42:15.000]  И вот узел, узлы валидируют, получают новые блоки, встраивают, их блокчейн валидируют, транзакции валидируют, нонсы валидируют, сложность, награду, который получил Майнер.
[01:42:15.000 --> 01:42:19.000]  Они хранят довольно много данных.
[01:42:19.000 --> 01:42:29.000]  А теперь представим, что вы торгуете бургерами, и вы не хотите поддерживать всю эту информацию у себя и валидировать.
[01:42:29.000 --> 01:42:31.000]  Вот можно ли вам как-то сэкономить?
[01:42:31.000 --> 01:42:35.000]  Вот ожидается, что можно, потому что можно, если вы просто магазин, вы можете у себя хранить.
[01:42:35.000 --> 01:42:40.000]  Но вам нужно, конечно, понимать, когда транзакция, которая приводит вам деньги, закомитилась.
[01:42:40.000 --> 01:42:44.000]  То есть она попала в блокчейн, и ее накрыло достаточным количеством других блоков.
[01:42:44.000 --> 01:42:50.000]  Но с другой стороны, вы не хотите все эти транзакции из всего блокчейна хранить у себя.
[01:42:50.000 --> 01:42:58.000]  Для этого вы можете сделать следующее. Вы можете хранить из этого блокчейна или блокдерева только заголовки.
[01:42:58.000 --> 01:43:02.000]  Ну, потому что хэш считается по заголовку.
[01:43:02.000 --> 01:43:08.000]  То есть кумулятивный хэш транзакций считается по всем транзакциям.
[01:43:08.000 --> 01:43:12.000]  В заголовке остается этот хэш, но вот его достаточно, чтобы проверить нонсы.
[01:43:12.000 --> 01:43:18.000]  Магазину достаточно хранить цепочку из заголовков блоков.
[01:43:18.000 --> 01:43:26.000]  Как же теперь вы покупать или докажете магазину, что ваша транзакция вошла в блокчейн и лежит там уже час?
[01:43:30.000 --> 01:43:34.000]  Если у магазина есть только заголовок соответствующего блока.
[01:43:34.000 --> 01:43:38.000]  Но вы говорите, что вы принадлежите к такому-то блоку, ваша транзакция попала в такой-то блок,
[01:43:38.000 --> 01:43:46.000]  и вы должны приложить сертификат, который докажет криптографически, что действительно эта транзакция в этом блоке встречается.
[01:43:46.000 --> 01:43:50.000]  Для этого важно, как считается хэш кумулятивный для заголовка.
[01:43:50.000 --> 01:43:56.000]  Он считается с помощью дерева Меркла. То есть мы берем все транзакции, считаем их хэши.
[01:43:56.000 --> 01:44:04.000]  Потом мы организуем все эти хэши, делаем их листьями бинального дерева.
[01:44:04.000 --> 01:44:09.000]  И пересчитываем, агрегируем хэши в изученных узлах.
[01:44:09.000 --> 01:44:13.000]  Комбинируем левого и правого потомка.
[01:44:13.000 --> 01:44:18.000]  И вот корень этого дерева, корневой хэш, это то, что лежит в заголовке блока.
[01:44:18.000 --> 01:44:22.000]  Если у вас в заголовке блока лежит хэш, построенный таким образом,
[01:44:22.000 --> 01:44:29.000]  то чтобы доказать, что ваша транзакция принадлежит блокчейну, вам не обязательно предъявлять все транзакции в этом блоке.
[01:44:29.000 --> 01:44:32.000]  Вы можете построить сертификат алгоритмического числа транзакции размера,
[01:44:32.000 --> 01:44:36.000]  а именно вы можете предложить свою транзакцию, по которой можно посчитать хэш.
[01:44:36.000 --> 01:44:46.000]  И посчитать и предложить хэши соседей на пути от вашей транзакции до корня дерева.
[01:44:46.000 --> 01:44:51.000]  То есть вы прикладываете свою транзакцию, раз хэш и два хэш.
[01:44:51.000 --> 01:44:55.000]  И вот эта информация доказывает магазину, что действительно ваша транзакция содержится в блоке
[01:44:55.000 --> 01:44:57.000]  вот с таким вот корневым хэшом.
[01:45:04.000 --> 01:45:08.000]  Давайте теперь просто покажу, чтобы мы видели.
[01:45:08.000 --> 01:45:11.000]  Вот блокчейн-эксплорер.
[01:45:11.000 --> 01:45:15.000]  И вот, пожалуйста, прямо сейчас майнятся какие-то блоки, подают какие-то транзакции.
[01:45:15.000 --> 01:45:20.000]  Вот видно, что частота появления блоков, это не то чтобы раз в 10 минут, но как поведет.
[01:45:20.000 --> 01:45:22.000]  Вот тут раз в 2 минуты блок появился.
[01:45:22.000 --> 01:45:26.000]  Через 2 минуты блок появился, просто потому что так лотерея сложилась.
[01:45:26.000 --> 01:45:33.000]  Высота сейчас, то есть количество блоков, вот 700 тысяч.
[01:45:33.000 --> 01:45:37.000]  Ну и давайте посмотрим на какой-то блок.
[01:45:37.000 --> 01:45:40.000]  Вот, в нем есть coinbase-транзакция.
[01:45:40.000 --> 01:45:43.000]  Победитель получил с одной стороны 6 с 25 битковинов,
[01:45:43.000 --> 01:45:49.000]  просто потому что так приписывает протокол, потому что сейчас станок так настроен.
[01:45:49.000 --> 01:45:57.000]  И вот суммарная комиссия, которую майнер получил от всех транзакций, которые в этот блок вошли.
[01:45:57.000 --> 01:46:00.000]  Сам блок довольно небольшого размера получился.
[01:46:00.000 --> 01:46:04.000]  Вот нонс, который этот блок верифицирует.
[01:46:04.000 --> 01:46:08.000]  Корень, дерево меркло, это кумулятивный хэш всех транзакций.
[01:46:08.000 --> 01:46:11.000]  Транзакций, как видно, немного.
[01:46:11.000 --> 01:46:15.000]  Вот видите, размер блока это какие-то единицы мегабайт.
[01:46:15.000 --> 01:46:17.000]  Количество транзакций тысячи.
[01:46:17.000 --> 01:46:19.000]  Каждый блок появляется раз в 10 минут.
[01:46:19.000 --> 01:46:22.000]  Rate с мехотворной.
[01:46:22.000 --> 01:46:28.000]  То есть это не сравнить с банком, насколько он может в секунду транзакции обрабатывать.
[01:46:28.000 --> 01:46:31.000]  Ну представьте себе, любое число разумное, которое приходит в голову,
[01:46:31.000 --> 01:46:36.000]  а тут раз в 10 минут обработано было тысячи транзакций.
[01:46:36.000 --> 01:46:44.000]  Не похоже на систему, которая претендует на замену наличным деньгам.
[01:46:44.000 --> 01:46:52.000]  Давайте посмотрим на...
[01:46:52.000 --> 01:46:55.000]  Где-то у меня был открыт, наверное.
[01:46:55.000 --> 01:46:58.000]  Вот нулевой блок, вот канонический хэш, вот мы ему должны верить.
[01:46:58.000 --> 01:47:00.000]  Вот первый выигрыш, который был получен.
[01:47:00.000 --> 01:47:04.000]  Там была всего лишь одна транзакция, то есть некому было деньги еще переводить.
[01:47:04.000 --> 01:47:07.000]  Блок состоял только из coinbase-транзакции.
[01:47:07.000 --> 01:47:11.000]  И Саташа получил 50 биткоинов.
[01:47:11.000 --> 01:47:22.000]  И смотрите, вот самое начало истории биткоина.
[01:47:22.000 --> 01:47:28.000]  Тут все транзакции, мне кажется, все блоки пока довольно неинтересно устроены,
[01:47:28.000 --> 01:47:32.000]  только coinbase-транзакция.
[01:47:32.000 --> 01:47:38.000]  И где-то должен появиться первый блок, в котором совершена
[01:47:38.000 --> 01:47:48.000]  первый трансфер биткоинов настоящий.
[01:47:48.000 --> 01:48:06.000]  Честно не знаю, может быть, сходу не скажу.
[01:48:06.000 --> 01:48:14.000]  Ну смотрите, видите, человек выключил компьютер.
[01:48:14.000 --> 01:48:20.000]  Вот этот блокчейн не слишком устойчивый, понятно, к атакам.
[01:48:20.000 --> 01:48:25.000]  Да, здесь, наверное, первый перевод.
[01:48:25.000 --> 01:48:35.000]  Исторический момент.
[01:48:35.000 --> 01:48:44.000]  Давайте посмотрим, где-то должна быть статистика сети.
[01:48:44.000 --> 01:48:50.000]  Вот смотрите, когда-то манил один человек на одном компьютере, на одном процессоре.
[01:48:50.000 --> 01:48:55.000]  Сейчас у нас в секунду считается 160 экзохэшей.
[01:48:55.000 --> 01:48:58.000]  Это 10-18, кажется.
[01:48:58.000 --> 01:49:00.000]  Откуда так много?
[01:49:00.000 --> 01:49:04.000]  Ну потому что это уже не процессор, потому что это специальные компьютеры,
[01:49:04.000 --> 01:49:10.000]  которые специальные железки, которые предназначены только для того, чтобы эффективно вычислять хэши.
[01:49:10.000 --> 01:49:19.000]  Так что вы на этом рынке, в этом мире уже не можете тягаться.
[01:49:19.000 --> 01:49:26.000]  Ваши вычислительные возможности, ваш компьютер, ваш ноутбук – это просто бесконечно малая капля в этом море.
[01:49:26.000 --> 01:49:32.000]  И если вы хотите вдруг войти в систему и повысить ее надежность, то от вас пользы никакой.
[01:49:32.000 --> 01:49:34.000]  И выигрыш у вас тоже никакого не будет.
[01:49:34.000 --> 01:49:38.000]  Может быть на бесконечности вы выиграете, но в жизни никогда вы не выиграете ничего.
[01:49:38.000 --> 01:49:40.000]  Вы не заработаете ни одного биткоина.
[01:49:40.000 --> 01:49:42.000]  Поэтому как же быть?
[01:49:42.000 --> 01:49:46.000]  Вы вроде бы участвуете в лутереи, но билетиков столько много,
[01:49:46.000 --> 01:49:55.000]  и у ваших конкурентов столько много билетов накапывается, что вы не можете их обыграть.
[01:49:55.000 --> 01:50:01.000]  Что делать, если ты не можешь выиграть в лутерею и прожить на это всю жизнь?
[01:50:01.000 --> 01:50:05.000]  Ты идешь на работу, то есть ты продаешь свое время другому человеку.
[01:50:05.000 --> 01:50:07.000]  Как это происходит?
[01:50:07.000 --> 01:50:09.000]  Как это происходит в биткоине?
[01:50:11.000 --> 01:50:15.000]  Ты маленький компьютер, ты участник с маленьким компьютером,
[01:50:15.000 --> 01:50:18.000]  и ты не можешь сам в одиночку ничего найти.
[01:50:18.000 --> 01:50:23.000]  Но ты можешь передать свои вычислительные мощности работодателю,
[01:50:23.000 --> 01:50:26.000]  он может их саккумулировать,
[01:50:26.000 --> 01:50:31.000]  и он уже обладает совокупностью процессоров, уже сможет что-то выиграть.
[01:50:31.000 --> 01:50:34.000]  Так появляются пулы.
[01:50:34.000 --> 01:50:36.000]  У пула есть оператор.
[01:50:36.000 --> 01:50:41.000]  Это участник, который формирует блок, который нужно будет майнить,
[01:50:41.000 --> 01:50:44.000]  нонс для которого нужно будет искать.
[01:50:44.000 --> 01:50:49.000]  И оператор пула назначает coinbase-транзакцию в этом блоке, который переводит деньги ему.
[01:50:49.000 --> 01:50:55.000]  Если этот пул выиграет 6.25 биткоина, то оператор пула эти деньги получит.
[01:50:55.000 --> 01:51:02.000]  И оператор пула предлагает всем участникам этого пула майнить этот блок.
[01:51:02.000 --> 01:51:09.000]  Если какой-то участник найдет нонс для этого блока, то понятно, что он забрать выигрыш себе не может.
[01:51:09.000 --> 01:51:13.000]  Потому что coinbase-транзакция не ему адресована.
[01:51:13.000 --> 01:51:18.000]  В блоке есть coinbase-транзакция, которая направляет выигрыш кому-то.
[01:51:18.000 --> 01:51:20.000]  Кто-то это оператор пула.
[01:51:20.000 --> 01:51:25.000]  Так что если ты даже найдешь решение пулы, то ты найдешь его для работодателя своего.
[01:51:25.000 --> 01:51:29.000]  Но почему ты так делаешь?
[01:51:29.000 --> 01:51:32.000]  Потому что ты вообще не веришь, что ты найдешь решение пузла.
[01:51:32.000 --> 01:51:36.000]  Но все же ты хочешь, чтобы за твою работу, пусть даже бесполезную,
[01:51:36.000 --> 01:51:39.000]  то есть ты носишь маленький вклад в это вычисление,
[01:51:39.000 --> 01:51:42.000]  ты хочешь, чтобы тебе за него заплатили.
[01:51:42.000 --> 01:51:49.000]  Так что ты надеешься, что оператор будет тебе просто выплачивать некоторые фиксированные зарплаты.
[01:51:49.000 --> 01:51:52.000]  Если оператор этого делать не будет, то ты просто уйдешь,
[01:51:52.000 --> 01:51:54.000]  просто потому что зачем тебе такой работодатель?
[01:51:54.000 --> 01:51:56.000]  Так что проблема у тебя нет.
[01:51:56.000 --> 01:51:59.000]  Проблема у работодателя, у оператора пула,
[01:51:59.000 --> 01:52:05.000]  а как именно распределить награду за участие в вычислениях.
[01:52:05.000 --> 01:52:09.000]  Вот ты оператор пула, у тебя там, не знаю, 150 машин, 150 участников.
[01:52:09.000 --> 01:52:14.000]  Они что-то делают, и возможно кто-то из них находит решение пузла.
[01:52:14.000 --> 01:52:18.000]  Но вот остальным тоже нужно заплатить, потому что они тоже могли выиграть.
[01:52:18.000 --> 01:52:20.000]  Ты уже не знаешь, кто из них будет полезен.
[01:52:20.000 --> 01:52:22.000]  А возможно они ничего не делают.
[01:52:22.000 --> 01:52:25.000]  Возможно они ничего не делают, да. Возможно они просто пьют кофе целый день.
[01:52:25.000 --> 01:52:30.000]  Но может пропорциональное число просчитанных хешей?
[01:52:30.000 --> 01:52:34.000]  Да как ты узнаешь, сколько хешей перебрал участник пула?
[01:52:34.000 --> 01:52:37.000]  Ну если рапорта не сочетается.
[01:52:37.000 --> 01:52:41.000]  Ну если рапорта не сочетается.
[01:52:41.000 --> 01:52:46.000]  Так вот, если вы не умеете доказывать оператору пула, что вы полезны,
[01:52:46.000 --> 01:52:53.000]  то его заплатить не будет.
[01:52:53.000 --> 01:52:59.000]  Ну если мы строим систему бездоверия, то непонятно.
[01:52:59.000 --> 01:53:04.000]  Вот, можно как доказать оператору пула, что вы сделали что-то полезное.
[01:53:04.000 --> 01:53:08.000]  Но вы не сможете найти хеш, который начинается, скажем, с 19 нулей.
[01:53:08.000 --> 01:53:11.000]  Но может быть вы найдете хеш, который начинается с 18 нулей.
[01:53:11.000 --> 01:53:15.000]  Это значит, что вы довольно полезны, весьма полезны.
[01:53:15.000 --> 01:53:18.000]  А может быть вы найдете хеш, который начинается с трех нулей,
[01:53:18.000 --> 01:53:20.000]  потому что вы на калькуляторе маните.
[01:53:20.000 --> 01:53:22.000]  Есть в интернете статья, где человек манит на бумаге.
[01:53:22.000 --> 01:53:25.000]  Просто рассчитывает, перебирает и читает SHA-256.
[01:53:25.000 --> 01:53:27.000]  Ну вот, у каждого свои возможности.
[01:53:27.000 --> 01:53:32.000]  Так вот, вы можете вычислить, то есть вы можете найти хеш,
[01:53:32.000 --> 01:53:34.000]  который начинается с какого-то количества нулей.
[01:53:34.000 --> 01:53:39.000]  И чем больше этих нулей, тем, видимо, больше ваш вклад в работу пула.
[01:53:39.000 --> 01:53:41.000]  Тем более вы полезны.
[01:53:41.000 --> 01:53:45.000]  Ну и вот на основе, вы можете провести раунд, ничего не найти.
[01:53:45.000 --> 01:53:49.000]  То есть кто-то нашел блок с 19 нурями в начале хеша,
[01:53:49.000 --> 01:53:51.000]  а вы нашли блок с 15 нурями.
[01:53:51.000 --> 01:53:55.000]  Ну вот вы этот хеш предъявите оператору и скажете, что вот я постарался.
[01:54:03.000 --> 01:54:08.000]  Ну прямо скажем, ты хотя бы один ноль получишь раз в 16 блоков.
[01:54:08.000 --> 01:54:10.000]  Ну раз после 16 попыток.
[01:54:11.000 --> 01:54:14.000]  Почему чем больше нулей, тем лучше?
[01:54:14.000 --> 01:54:17.000]  Ну это единственный способ измерить твою чистотительную мощность.
[01:54:17.000 --> 01:54:20.000]  Либо тебе повезло, но тебе не будет вести так бесконечно.
[01:54:20.000 --> 01:54:23.000]  Если ты хочешь рассчитывать на какую-то зарплату предсказуемую,
[01:54:23.000 --> 01:54:27.000]  ты в среднем будешь находить какое-то количество нулей.
[01:54:27.000 --> 01:54:30.000]  Не разумно, чтобы все же перебирали?
[01:54:30.000 --> 01:54:32.000]  Не разумно, но их можно рандомизировать.
[01:54:32.000 --> 01:54:35.000]  Но действительно, тут блок одинаковый, коем-бейс транзакция одинаковая,
[01:54:35.000 --> 01:54:38.000]  но они могут выбирать просто случайные схиты для того,
[01:54:38.000 --> 01:54:41.000]  от которых они отчитывают нонсы.
[01:55:01.000 --> 01:55:04.000]  Зачем дериться своим выигрышем, не очень понимаю.
[01:55:09.000 --> 01:55:12.000]  Ладно, загадка.
[01:55:12.000 --> 01:55:17.000]  В таком случае можно просто обманывать того, кто делает пул.
[01:55:17.000 --> 01:55:20.000]  Кто-то один считает, и они распределяют это.
[01:55:20.000 --> 01:55:23.000]  Это усредняет их зарплату.
[01:55:23.000 --> 01:55:28.000]  Ты уже не рассчитываешь на везение, что ты выигрыш 7,9,
[01:55:28.000 --> 01:55:31.000]  а ты всегда получаешь 4, как и блок.
[01:55:31.000 --> 01:55:35.000]  И это может быть выгоднее, если ты слабый, например.
[01:55:35.000 --> 01:55:40.000]  Я не думаю, что выигрыш за один нонс выплачивается многократно,
[01:55:40.000 --> 01:55:42.000]  зарплата за один нонс найденной.
[01:55:42.000 --> 01:55:44.000]  Это было бы странно.
[01:55:56.000 --> 01:56:01.000]  Ну смотри, это просто способ оценить хэш-рейт участника.
[01:56:02.000 --> 01:56:05.000]  Тут не речь о том, насколько ты был близок к тому, чтобы найти блок.
[01:56:05.000 --> 01:56:09.000]  Это способ оценить распределение ресурсов внутри пула.
[01:56:19.000 --> 01:56:22.000]  Наверное, но мне кажется, это не очень полезный вопрос.
[01:56:22.000 --> 01:56:25.000]  Давай, движемся дальше.
[01:56:26.000 --> 01:56:28.000]  К чему я клоню?
[01:56:28.000 --> 01:56:31.000]  К тому, почему вообще есть биткоин?
[01:56:31.000 --> 01:56:33.000]  Почему его придумали?
[01:56:33.000 --> 01:56:35.000]  Почему есть PBFT, а есть биткоин?
[01:56:35.000 --> 01:56:40.000]  Потому что биткоин на бумаге, на стадии задумки,
[01:56:40.000 --> 01:56:43.000]  должен быть гораздо более децентрализован
[01:56:43.000 --> 01:56:46.000]  чем PBFT на несколько десяток реплик.
[01:56:46.000 --> 01:56:49.000]  Мы вполне себе можем решать византийский консенсус.
[01:56:49.000 --> 01:56:51.000]  Мы в прошлый раз это сделали.
[01:56:52.000 --> 01:56:56.000]  Взять PBFT, который строил сервис упорядочивающей транзакции.
[01:56:56.000 --> 01:56:59.000]  И в качестве транзакции взять вот эти самые транзакции,
[01:56:59.000 --> 01:57:05.000]  которые печатают монетой, которые переводят эти монеты другим участникам.
[01:57:05.000 --> 01:57:09.000]  И вот получить те же самые деньги.
[01:57:09.000 --> 01:57:12.000]  Видимо, мы хотим использовать другой подход,
[01:57:12.000 --> 01:57:15.000]  потому что он нам обещает, что мы сможем масштабироваться
[01:57:15.000 --> 01:57:19.000]  и доверять не 50 репликам, а десяткам тысяч репликов,
[01:57:19.000 --> 01:57:22.000]  или сотен тысяч узлов.
[01:57:22.000 --> 01:57:26.000]  То есть по задумке децентрализация здесь неограничена.
[01:57:26.000 --> 01:57:30.000]  И вот каждый участник, вы можете войти в систему и сделать ее надежнее.
[01:57:30.000 --> 01:57:36.000]  Но вот мир таков, люди таковых, что они хотят максимизировать свою прибыль,
[01:57:36.000 --> 01:57:39.000]  поэтому они начинают выдумывать специальное устройство,
[01:57:39.000 --> 01:57:42.000]  а не майнить на процессорах, было бы идеально.
[01:57:42.000 --> 01:57:46.000]  Они начинают строить фермы, переехать в страны, где электричество подешевле.
[01:57:46.000 --> 01:57:49.000]  И в итоге децентрализация возникает.
[01:57:49.000 --> 01:57:51.000]  Она возникает в форме пулов.
[01:57:51.000 --> 01:57:57.000]  И вот, смотрите, распределение найденных блоков по пулам.
[01:57:57.000 --> 01:58:02.000]  Вот увидите, что можно пулы перечислять по пальцам двух рук точно.
[01:58:02.000 --> 01:58:05.000]  И вот это примерно количество участников,
[01:58:05.000 --> 01:58:15.000]  от которых зависит надежность функционирования всей криптовалюты.
[01:58:15.000 --> 01:58:19.000]  Если бы мы использовали PBFT, мы могли бы даже сделать более децентрализованно.
[01:58:19.000 --> 01:58:22.000]  В смысле, мы могли бы вот еще больше набрать участников,
[01:58:22.000 --> 01:58:27.000]  которые независимы друг от друга, чтобы они поддерживали реплики системы.
[01:58:27.000 --> 01:58:30.000]  То есть по задумке, да, биткоин должен быть очень децентрализован.
[01:58:30.000 --> 01:58:32.000]  На практике он очень децентрализован.
[01:58:32.000 --> 01:58:39.000]  Просто потому что иначе участникам не выгодно майнить, не выгодно перебирать хаши.
[01:58:45.000 --> 01:59:03.000]  С пулами есть еще одна интересная история.
[01:59:03.000 --> 01:59:05.000]  Давайте про нее поговорим.
[01:59:15.000 --> 01:59:44.000]  Сегодня, если вот мне очень нравится то, что биткоин определяет много энергии,
[01:59:44.000 --> 02:00:09.000]  ну, возможно, да, ты решишь пул.
[02:00:09.000 --> 02:00:27.000]  Опять же, так можно кому-то навредить, если у тебя довольно много ресурсов вычислительных.
[02:00:27.000 --> 02:00:28.000]  Можно сделать по-другому.
[02:00:28.000 --> 02:00:31.000]  Можно сказать, давайте мы будем майнить честно на процессорах.
[02:00:31.000 --> 02:00:42.000]  И каждый будет майнить дома, и все будут получать выигрыши, и система будет децентрализована.
[02:00:42.000 --> 02:00:47.000]  Ну, просто это возможно только в мире, там, где единорогие радуги.
[02:00:47.000 --> 02:00:49.000]  В нашем мире невозможно.
[02:00:49.000 --> 02:00:52.000]  Просто потому что участники, они нечестные, они рациональные.
[02:00:52.000 --> 02:00:55.000]  Но когда дело касается денег, они становятся рациональными, а нечестными.
[02:00:55.000 --> 02:00:58.000]  На этом вся экономическая теория построена.
[02:00:58.000 --> 02:01:04.000]  И вот сейчас давайте мы поговорим про эти оценки, потому что на самом деле они не очень точны.
[02:01:04.000 --> 02:01:10.000]  То есть можно придумать правила поведения, которые будут, ну так, честным,
[02:01:10.000 --> 02:01:17.000]  но которые позволят максимизировать, увеличить долю выигрыш, которую мы получаем.
[02:01:17.000 --> 02:01:23.000]  Вот пусть мы пул, пусть у нас довольно много процессоров.
[02:01:23.000 --> 02:01:27.000]  Называется selfish mining, альтернативная стратегия майнинга.
[02:01:31.000 --> 02:01:34.000]  Эгоистичный майнинг.
[02:01:34.000 --> 02:01:42.000]  Пусть мы пул, достаточно большой пул, у нас доля альфа всех процессоров.
[02:01:42.000 --> 02:01:47.000]  У нас все-таки не половина, чтобы мы могли творить что угодно.
[02:01:47.000 --> 02:01:51.000]  Но достаточно много, чтобы мы регулярно находили блоки.
[02:01:54.000 --> 02:02:03.000]  Если у нас доля альфа, то мы будем находить каждые единицы на альфа-блок в среднем.
[02:02:03.000 --> 02:02:09.000]  Ну и получать долю альфа всего выигрыша, который системе порождается.
[02:02:09.000 --> 02:02:17.000]  Можем ли мы повысить долю выигрыша, не повышая долю, не повышая свой hash rate?
[02:02:17.000 --> 02:02:19.000]  Вот оказывается, что можем.
[02:02:19.000 --> 02:02:23.000]  Давайте подумаем, как этого можно было добиться.
[02:02:23.000 --> 02:02:26.000]  Как можно повысить эффективные альфы?
[02:02:28.000 --> 02:02:32.000]  Нет, подожди, транзакции нам не важны, нам важны блоки.
[02:02:32.000 --> 02:02:35.000]  Мы предполагаем, мы про комиссии не думаем.
[02:02:35.000 --> 02:02:38.000]  Мы говорим про блоки, про награду за найденный блок.
[02:02:38.000 --> 02:02:45.000]  Вот как можно получить больше выигрыша за найденные блоки, при этом больше, чем альфа,
[02:02:45.000 --> 02:02:49.000]  обладая долей альфы вычислительных ресурсов?
[02:02:56.000 --> 02:02:59.000]  Нет, ну подожди, hash получается непредсказуемым для нас.
[02:02:59.000 --> 02:03:03.000]  Мы не можем каким-то образом влиять на proof of work, то есть на майнинг.
[02:03:03.000 --> 02:03:05.000]  Hash довольно случайный.
[02:03:05.000 --> 02:03:10.000]  Если мы будем честно его перебирать, а мы не можем перебирать более честно или менее честно.
[02:03:10.000 --> 02:03:13.000]  У нас нет лучшей стратегии, чем просто пробовать разные.
[02:03:13.000 --> 02:03:15.000]  На этом мы влиять не можем.
[02:03:22.000 --> 02:03:25.000]  Но мы меньше одной-второй.
[02:03:25.000 --> 02:03:28.000]  Мы, конечно, можем их отклонять, но а что толк?
[02:03:28.000 --> 02:03:43.000]  Смотрите, мы можем находить, то есть мы майним долю альфы всех блоков.
[02:03:43.000 --> 02:03:46.000]  Это неизбежно. Мы не можем больше.
[02:03:46.000 --> 02:03:50.000]  Мы не можем математику обманывать, криптографию обманывать.
[02:03:50.000 --> 02:03:53.000]  Но при этом мы хотим получать выигрыш больше.
[02:03:54.000 --> 02:03:59.000]  Сложность мы не можем регулировать.
[02:03:59.000 --> 02:04:07.000]  Нет, мы можем сложность убирать неправильно, но тогда она будет отклоняться другими узлами, честными их большинство.
[02:04:12.000 --> 02:04:15.000]  Мы можем, тогда мы.
[02:04:15.000 --> 02:04:19.000]  Не понимаете, да, идея? Ну ладно, тогда придется рассказать.
[02:04:19.000 --> 02:04:22.000]  Блокчейн, он же дерево на самом деле.
[02:04:22.000 --> 02:04:25.000]  И он иногда ветвится.
[02:04:25.000 --> 02:04:28.000]  И в случае форка только одна ветка побеждает.
[02:04:28.000 --> 02:04:32.000]  А другая ветка, она вот отросла немножко, а потом она забывается.
[02:04:32.000 --> 02:04:38.000]  И блок найден, ресурсы на него потрачены, а комиссия за него не получена.
[02:04:38.000 --> 02:04:41.000]  Ну просто потому что она не входит в блокчейн.
[02:04:41.000 --> 02:04:45.000]  Транзакция, coinbase-транзакция, которая находится в этом блоке, она выводилась в блокчейна.
[02:04:45.000 --> 02:04:50.000]  Поэтому если мы такой эгоистичный пул, который хочет повысить долю выигрыша,
[02:04:50.000 --> 02:04:53.000]  то он не может находить больше блоков сам.
[02:04:53.000 --> 02:04:58.000]  Но он может стараться делать так, чтобы чужие блоки постоянно вываливались из блокчейна.
[02:04:58.000 --> 02:05:04.000]  И чем больше мы скинем из блокчейна чужих блоков, тем больше доля будет нашего выигрыша.
[02:05:04.000 --> 02:05:09.000]  Количество блоков будет такое же найденных, а доля выигрыша будет больше, чем альфа.
[02:05:11.000 --> 02:05:16.000]  Итак, давайте я изображу стратегию, которая позволит этого добиться.
[02:05:16.000 --> 02:05:19.000]  Итак, у нас есть блокчейн.
[02:05:20.000 --> 02:05:23.000]  Мы обозначим такое состояние за ноль.
[02:05:23.000 --> 02:05:26.000]  Вот был какой-то блокчейн, он заканчивался каким-то блоком.
[02:05:29.000 --> 02:05:32.000]  Что происходит дальше?
[02:05:32.000 --> 02:05:35.000]  Мы будем сейчас рисовать граф переходов между состояниями.
[02:05:35.000 --> 02:05:39.000]  Они будут с какими-то вероятностями, и потом мы посчитаем распределение по ним.
[02:05:39.000 --> 02:05:42.000]  Ну, в общем, ясно будет.
[02:05:42.000 --> 02:05:46.000]  Значит, это блок, нулевое состояние, вот нейтральное.
[02:05:46.000 --> 02:05:49.000]  Что может тут случиться?
[02:05:49.000 --> 02:05:52.000]  Ну, мы злоумышленники будем красными.
[02:05:52.000 --> 02:05:55.000]  Ну, не злоумышленники, мы эгоистичные майнеры будем красными.
[02:05:55.000 --> 02:05:58.000]  И есть честные майнеры.
[02:05:58.000 --> 02:06:04.000]  Вот с вероятностью альфа, мы эгоистичные майнеры, наш пул найдет продолжение первым.
[02:06:04.000 --> 02:06:11.000]  С вероятностью 1 минус альфа мы попадем сюда, сделаем петлю.
[02:06:13.000 --> 02:06:16.000]  1 минус альфа.
[02:06:17.000 --> 02:06:28.000]  А вот с вероятностью альфа мы получим блокчейн, который выглядит вот так вот.
[02:06:28.000 --> 02:06:31.000]  То есть мы первыми нашли продолжение.
[02:06:32.000 --> 02:06:38.000]  Но я рисую его пунктиром, потому что мы, эгоистичные майнеры, этот блок скрываем.
[02:06:38.000 --> 02:06:40.000]  Мы не публикуем его.
[02:06:40.000 --> 02:06:43.000]  Честный майнер, найдя блок, распространяет его по сети.
[02:06:43.000 --> 02:06:49.000]  Он добавляется в историю и все продолжают майнить относительно него.
[02:06:49.000 --> 02:06:51.000]  Вот это состояние 1.
[02:06:51.000 --> 02:06:54.000]  У нас есть такой предварительный выигрыш.
[02:06:54.000 --> 02:06:56.000]  Он еще не зафиксирован.
[02:07:04.000 --> 02:07:08.000]  Вообще-то мы здесь рискуем, когда мы не публикуем блок.
[02:07:08.000 --> 02:07:10.000]  Потому что раньше мы могли опубликовать его.
[02:07:10.000 --> 02:07:14.000]  Если бы мы были честными, мы бы опубликовали его и получили свои монеты.
[02:07:14.000 --> 02:07:16.000]  Сейчас мы его скрываем.
[02:07:16.000 --> 02:07:23.000]  И если вдруг, пока мы его скрываем, у честных майнеров появится свой блок,
[02:07:23.000 --> 02:07:28.000]  то они его сразу опубликуют, и тогда, возможно, мы проиграем.
[02:07:28.000 --> 02:07:30.000]  Ну, по крайней мере, гонка начнется.
[02:07:30.000 --> 02:07:33.000]  Мы можем выложить свой блок, мы эгоистичные майнеры, они будут соревноваться,
[02:07:33.000 --> 02:07:35.000]  возможно, мы проиграем.
[02:07:35.000 --> 02:07:37.000]  Но мы надеемся не на это.
[02:07:37.000 --> 02:07:39.000]  То есть мы здесь подвергаемся риску дополнительному.
[02:07:39.000 --> 02:07:42.000]  Мы откладываем свой возможный выигрыш, мы рискуем им,
[02:07:42.000 --> 02:07:46.000]  потому что мы надеемся, что если у нас альфа все же не слишком маленькая,
[02:07:46.000 --> 02:07:53.000]  то, возможно, мы продолжим майнить уже эту ветку, про которую другие не знают.
[02:07:53.000 --> 02:07:56.000]  И перейдем в состояние 2.
[02:08:00.000 --> 02:08:04.000]  Где наша преимущество достигнет 2 блоков.
[02:08:09.000 --> 02:08:12.000]  Ну и может быть 3, и так далее.
[02:08:12.000 --> 02:08:16.000]  Понятно, что наше преимущество может достигать бесконечности
[02:08:16.000 --> 02:08:19.000]  с какой-то смехотворной вероятностью.
[02:08:39.000 --> 02:08:42.000]  То есть номер состояния – это количество блоков,
[02:08:42.000 --> 02:08:45.000]  которые у нас в нашей секретной цепочке накопилось.
[02:08:49.000 --> 02:08:52.000]  Как мы собираемся этим преимуществом распоряжаться?
[02:08:55.000 --> 02:08:59.000]  Я напомню, что наша цель – максимизировать свой выигрыш.
[02:08:59.000 --> 02:09:05.000]  Для этого мы должны стараться выбрасывать чужие блоки честных узлов из блокчейна.
[02:09:05.000 --> 02:09:07.000]  Ну вот, например, смотрим на состояние 3.
[02:09:07.000 --> 02:09:11.000]  В этом состоянии какой-то узел честный мог найти блок,
[02:09:11.000 --> 02:09:14.000]  который продолжает эту цепочку, потому что про эту цепочку он ничего не знает.
[02:09:14.000 --> 02:09:17.000]  Она скрыта эгоистичными майнерами.
[02:09:20.000 --> 02:09:26.000]  И тогда мы откатимся в состояние 2, но только это состояние будет выглядеть уже иначе.
[02:09:26.000 --> 02:09:29.000]  Что нам делать на месте эгоистичных майнеров?
[02:09:35.000 --> 02:09:37.000]  В этом состоянии будет выглядеть уже иначе.
[02:09:37.000 --> 02:09:39.000]  Что нам делать на месте эгоистичных майнеров?
[02:09:56.000 --> 02:10:01.000]  Ну, смотрите, если мы дошли до состояния 2, то мы точно знаем,
[02:10:01.000 --> 02:10:05.000]  ну, 2 или больше, то мы точно знаем, что мы свой выигрыш зафиксируем.
[02:10:07.000 --> 02:10:11.000]  Потому что если мы докатились до такого состояния,
[02:10:11.000 --> 02:10:18.000]  если мы из 2 переходим в 1, то мы уже на самом деле не переходим из 2 в 1.
[02:10:18.000 --> 02:10:25.000]  Если мы дошли до 2, и вдруг честный пул...
[02:10:25.000 --> 02:10:29.000]  То есть пока мы в таком состоянии, вот в таком или в таком,
[02:10:29.000 --> 02:10:32.000]  нам выгодно свои блоки прятать, держать в секрете,
[02:10:32.000 --> 02:10:37.000]  потому что мы надеемся, что мы будем ждать, пока честный пул потратит свои ресурсы
[02:10:37.000 --> 02:10:40.000]  на то, чтобы найти продолжение вот этой ветки.
[02:10:40.000 --> 02:10:46.000]  И когда он вплотную к нам приблизится, когда разница станет в 1 блок,
[02:10:46.000 --> 02:10:52.000]  то мы после этого опубликуем всю нашу цепочку.
[02:10:52.000 --> 02:10:56.000]  То есть если в состоянии 2 честный пул находит блок,
[02:10:56.000 --> 02:11:07.000]  то мы переходим в состояние 0 штрих, где...
[02:11:07.000 --> 02:11:11.000]  Сейчас, нет, я вру по-моему.
[02:11:17.000 --> 02:11:20.000]  Давайте аккуратно.
[02:11:26.000 --> 02:11:32.000]  Да, и состояние 2 нужно переходить только в 0,
[02:11:32.000 --> 02:11:35.000]  потому что мы просто фиксируем выигрыш.
[02:11:35.000 --> 02:11:41.000]  Но проблема в состоянии 1, когда мы еще преимущества не достигли.
[02:11:46.000 --> 02:11:49.000]  То есть если мы накопили преимущества в 2 блока,
[02:11:49.000 --> 02:11:53.000]  то когда этот честный пул найдет продолжение 2,
[02:11:53.000 --> 02:11:58.000]  тогда, когда наши цепочки почти сравняются, мы опубликуем свою приватную ветку,
[02:11:58.000 --> 02:12:01.000]  и она победит, и вот эти 2 блока откатываются.
[02:12:01.000 --> 02:12:05.000]  То есть мы стремимся сначала попасть в такое состояние, где у нас преимущество большое,
[02:12:05.000 --> 02:12:09.000]  пытаемся его максимизировать, и таким образом мы максимизируем в конечном итоге
[02:12:09.000 --> 02:12:15.000]  количество блоков, которые мы отбросим с блокчейна у честного пула.
[02:12:15.000 --> 02:12:18.000]  То есть если мы попали сюда, то мы уже ничем не рискуем.
[02:12:18.000 --> 02:12:21.000]  Но мы рискуем здесь.
[02:12:21.000 --> 02:12:25.000]  Когда у нас уже есть выигрыш, который мы не фиксируем.
[02:12:25.000 --> 02:12:32.000]  Вот если мы пришли в состояние 1, то есть мы опередили честный пул,
[02:12:32.000 --> 02:12:35.000]  а потом получилось так, что следующим ходом,
[02:12:35.000 --> 02:12:39.000]  следующим событием стал майнинг честным пулом очередного блока,
[02:12:39.000 --> 02:12:42.000]  то мы переходим вот в такое состояние.
[02:12:51.000 --> 02:13:05.000]  То есть тут уже ни у кого нет преимущества, это состояние 0',
[02:13:05.000 --> 02:13:09.000]  и тут возникает гонка.
[02:13:09.000 --> 02:13:12.000]  И какими сходами она может разрешиться?
[02:13:21.000 --> 02:13:23.000]  Что?
[02:13:23.000 --> 02:13:25.000]  Ну, смотри, еще раз принцип сам.
[02:13:25.000 --> 02:13:28.000]  Если ты оторвался с приватной веткой,
[02:13:28.000 --> 02:13:33.000]  если ты пул из эгоистичных майнеров вырвался вперед на два блока,
[02:13:33.000 --> 02:13:40.000]  скрывая свою ветку, то ты знаешь, что ты уже точно получишь выигрыш за каждый свой блок.
[02:13:40.000 --> 02:13:44.000]  Потому что когда преимущество твое достигнет единицы,
[02:13:44.000 --> 02:13:48.000]  то ты опубликуешь свою приватную ветку
[02:13:48.000 --> 02:13:52.000]  и тем самым отбросишь ветку, которую нашли честные майнеры.
[02:13:52.000 --> 02:13:57.000]  То есть если ты попал сюда, то все, ты свой выигрыш получишь.
[02:13:57.000 --> 02:14:00.000]  Но чтобы добраться сюда, ты должен пройти через это состояние.
[02:14:00.000 --> 02:14:03.000]  Оно довольно хрупкое. Раньше ты просто находил блок и публиковал его
[02:14:03.000 --> 02:14:05.000]  и получал свою долю альфы в выигрыше.
[02:14:05.000 --> 02:14:09.000]  А сейчас ты его откладываешь в надежде получить больше.
[02:14:09.000 --> 02:14:16.000]  Но если из состояния 1 следующим событием будет не твой красный блок в твоем пуле,
[02:14:16.000 --> 02:14:21.000]  а блок честного майнера, то ты в этом месте можешь проиграть.
[02:14:21.000 --> 02:14:27.000]  То есть переход по 1 минус альфа пройдет сюда.
[02:14:27.000 --> 02:14:32.000]  Тут 1 минус альфа, мы видим, откатываемся вот сюда.
[02:14:32.000 --> 02:14:37.000]  Потому что мы публикуем свою ветку.
[02:14:37.000 --> 02:14:40.000]  Так вот, из состояния 0 штрих, куда мы можем попасть?
[02:14:40.000 --> 02:14:45.000]  Ну, только в ноль, но разными способами.
[02:14:45.000 --> 02:14:48.000]  Вопрос в том, кто найдет следующий блок.
[02:14:48.000 --> 02:14:56.000]  Либо он найдет красный, с вероятностью альфа,
[02:14:56.000 --> 02:15:02.000]  либо его найдет, кто? Честный пул.
[02:15:02.000 --> 02:15:07.000]  Но честный пул может найти его двумя способами.
[02:15:07.000 --> 02:15:11.000]  Он может прицепить честный блок своему блоку,
[02:15:11.000 --> 02:15:15.000]  а может быть честные участники выберут красный блок,
[02:15:15.000 --> 02:15:20.000]  потому что эти два блока соревновались между собой в сети.
[02:15:20.000 --> 02:15:24.000]  И у вас будет нулевой выигрыш.
[02:15:24.000 --> 02:15:27.000]  Это 1 минус альфа.
[02:15:27.000 --> 02:15:33.000]  Но мы ведем еще один параметр гамма, который про то, кто побеждает в случае гонки.
[02:15:33.000 --> 02:15:37.000]  Если мы скажем, что гамма 1 вторая, то это значит, что в случае конкуренции
[02:15:37.000 --> 02:15:44.000]  честного и эгоистичного пула, эгоистичный пул выигрывает с вероятностью гамма.
[02:15:44.000 --> 02:15:49.000]  Так вот, с вероятностью 1 минус альфа умножить на гамма,
[02:15:49.000 --> 02:15:53.000]  честная цепочка продолжится вот здесь вот.
[02:15:53.000 --> 02:15:58.000]  Честные узлы найдут следующий блок, но продолжат эту цепочку.
[02:15:58.000 --> 02:16:05.000]  И с вероятностью 1 минус альфа на 1 минус гамма,
[02:16:05.000 --> 02:16:12.000]  честные узлы продолжат свою цепочку.
[02:16:12.000 --> 02:16:17.000]  Гамма это параметр, это вероятность того, что в случае, когда в сети появляются два блока,
[02:16:17.000 --> 02:16:23.000]  то есть вот у нас было такое состояние, эгоистичные узлы нашли блок, держат его в секрете,
[02:16:23.000 --> 02:16:26.000]  надеясь максимизировать свой отрыв.
[02:16:26.000 --> 02:16:31.000]  Но у них не получилось этого добиться, потому что честный майнер нашел блок.
[02:16:31.000 --> 02:16:34.000]  И он сразу его публиковал, потому что он честный.
[02:16:34.000 --> 02:16:41.000]  Тогда мы, чтобы не потерять найденный блок, публикуем его, и они между собой гоняются.
[02:16:41.000 --> 02:16:45.000]  То есть они раздаются госипом по сети, и каждый узел начинает майнить ту цепочку,
[02:16:45.000 --> 02:16:47.000]  которую он получил первый.
[02:16:47.000 --> 02:16:59.000]  Так вот, гамма это вероятность того, что в будущем при гонке этих блоков
[02:16:59.000 --> 02:17:06.000]  следующий блок найденный будет цепляться за нашу красную цепочку, а не за черную.
[02:17:06.000 --> 02:17:12.000]  Что? Да.
[02:17:12.000 --> 02:17:16.000]  Вот такова стратегия, и что про нее можно доказать?
[02:17:16.000 --> 02:17:22.000]  Давайте мы посмотрим на...
[02:17:22.000 --> 02:17:26.000]  Что?
[02:17:26.000 --> 02:17:34.000]  Да.
[02:17:34.000 --> 02:17:43.000]  С самого начала. Если мы сразу публикуем найденный блок, то мы выигрываем долю альфы.
[02:17:43.000 --> 02:17:47.000]  Вот эта стратегия утверждается способна долю выигрыша повысить.
[02:17:47.000 --> 02:17:52.000]  Потому что в случае, если мы достигли преимущества в два блока и скрываем это,
[02:17:52.000 --> 02:17:58.000]  то мы дождемся пока честные узлы найдут продолжение этой цепочки, вот такой вот.
[02:17:58.000 --> 02:18:03.000]  Опубликуем свою приватную цепочку, и она откатит тот блок, который нашли честные узлы.
[02:18:03.000 --> 02:18:08.000]  То есть они потратили ресурсы, но потратили их напрасно. Они не получили за это выигрыш.
[02:18:08.000 --> 02:18:10.000]  Почему это выгодно?
[02:18:10.000 --> 02:18:14.000]  Ну, еще раз, потому что выигрыш зависит...
[02:18:14.000 --> 02:18:21.000]  Почему это выгодно? Ну, потому что выигрыш ты получаешь за блоки в блокчейне, в максимальной цепочке в дереве.
[02:18:21.000 --> 02:18:28.000]  И вот в этой цепочке максимально твоих блоков становится больше, потому что чужих блоков становится меньше.
[02:18:28.000 --> 02:18:33.000]  Все, отлично.
[02:18:34.000 --> 02:18:38.000]  Зачем мы рассматриваем ситуацию, где только один блок?
[02:18:38.000 --> 02:18:43.000]  Почему только один? Мы не честные?
[02:18:43.000 --> 02:18:50.000]  Ну, смотри, ответ, наверное, такой, потому что сложная.
[02:18:50.000 --> 02:19:05.000]  Еще мне кажется, что вероятности закинуться в 0,4 сильно больше, чем 1,4, потому что они уже манили, они уже искали этот блок.
[02:19:05.000 --> 02:19:08.000]  Нет.
[02:19:08.000 --> 02:19:12.000]  Сейчас.
[02:19:12.000 --> 02:19:16.000]  То есть они уже давно подбирают хеш.
[02:19:16.000 --> 02:19:24.000]  Мне кажется, что так рассуждать не стоит. Если ты подбросил монетку какое-то количество раз, то, видимо, участвующие бросания на следующие не влияют.
[02:19:24.000 --> 02:19:26.000]  Нет?
[02:19:26.000 --> 02:19:33.000]  То есть у нас много монеток?
[02:19:33.000 --> 02:19:39.000]  Ну вот, кажется, я не наврал в диаграмме, да?
[02:19:39.000 --> 02:19:41.000]  Похоже.
[02:19:41.000 --> 02:19:47.000]  Вот, и там начинается все это решать, строить систему, решают ее.
[02:19:47.000 --> 02:19:55.000]  И приходит к такому выводу. Ну вот, графики в зависимости от гаммы и вот здесь вот альфа.
[02:19:55.000 --> 02:19:58.000]  Графики разные для разных гамм.
[02:19:58.000 --> 02:20:04.000]  И на этой оси доля выигрыша, которую мы можем заработать.
[02:20:04.000 --> 02:20:08.000]  Тут не очень здорово видно, наверное. Надеюсь, достаточно видно.
[02:20:08.000 --> 02:20:11.000]  Но вот почему вообще разные гаммы можно рассматривать?
[02:20:11.000 --> 02:20:15.000]  Казалось бы, если у нас соревнования, то выиграет либо один, либо другой.
[02:20:15.000 --> 02:20:19.000]  Но, то есть можно брать одну вторую смело.
[02:20:19.000 --> 02:20:24.000]  Но с другой стороны, можно сказать так, что если у нас узлы эгоистичные,
[02:20:24.000 --> 02:20:30.000]  и в случае им этот сценарий неприятен, когда появляется гонка между двумя блоками.
[02:20:30.000 --> 02:20:34.000]  Но вот их же довольно много, их доля целых альфа.
[02:20:34.000 --> 02:20:39.000]  Так вот, они получая блоки от честных узлов, могут их придерживать.
[02:20:39.000 --> 02:20:42.000]  Ну, то есть чуть замедлять их распространение в сети.
[02:20:42.000 --> 02:20:46.000]  Поэтому, в принципе, гамма может склоняться в нашу пользу.
[02:20:46.000 --> 02:20:55.000]  Но если мы берем гамма одна вторая, то мы получаем, что...
[02:20:55.000 --> 02:21:02.000]  Ну вот здесь график в зависимости гаммы, альфы от...
[02:21:02.000 --> 02:21:09.000]  Мы берем разные гаммы и смотрим, при каком альфа вот эта стратегия начнет давать выигрыш относительно честного майнинга.
[02:21:09.000 --> 02:21:13.000]  И вот если мы берем гамма одна вторая, консервативная, то мы получаем, что
[02:21:13.000 --> 02:21:20.000]  пул размером 1 четверть уже может зарабатывать больше, если он ведет себя эгоистично, а не честно.
[02:21:25.000 --> 02:21:31.000]  Это странный вопрос.
[02:21:31.000 --> 02:21:35.000]  Насколько больше? Ну вот если у тебя график, то вот он.
[02:21:35.000 --> 02:21:39.000]  Ну, это, в смысле, точка перехода такой.
[02:21:43.000 --> 02:21:47.000]  Ну вот, смотри, зеленый график это гамма одна вторая.
[02:21:47.000 --> 02:21:53.000]  И вот у тебя зависимость размера пула, то есть доля вычислительных ресурсов в пуле.
[02:21:53.000 --> 02:22:00.000]  И зависимость доли выигрыша от доли ресурсов в пуле.
[02:22:00.000 --> 02:22:07.000]  Ну вот, если ты, если ты эгоистичный пул, и ты почти половина, то ты забираешь себе весь выигрыш.
[02:22:10.000 --> 02:22:14.000]  Так что если есть эгоистичный пул, то очень разумно к нему присоединяться,
[02:22:14.000 --> 02:22:17.000]  потому что он выигрывает больше, чем его положено.
[02:22:17.000 --> 02:22:19.000]  Этот пул будет расти.
[02:22:23.000 --> 02:22:28.000]  Так вот, верно ли, что вот эта стратегия угрожает биткоину?
[02:22:31.000 --> 02:22:35.000]  Нет один же соображение, что и раньше.
[02:22:35.000 --> 02:22:40.000]  Потому что когда разыжка большой, то все боятся храна своих денег.
[02:22:40.000 --> 02:22:44.000]  Ну и то есть не только он выигрывает себя нечестно.
[02:22:44.000 --> 02:22:47.000]  Ну вообще-то он не то чтобы нечестно себя ведет.
[02:22:47.000 --> 02:22:49.000]  Он ведет себя всего лишь...
[02:22:49.000 --> 02:22:52.000]  Это не византийское поведение, это эгоистичное поведение.
[02:22:52.000 --> 02:22:54.000]  Он максимизирует свою прибыль.
[02:22:54.000 --> 02:22:58.000]  Но, конечно, это бросает некоторую тень на валюту.
[02:22:58.000 --> 02:23:01.000]  Но, смотри, если у тебя есть дабл спендинг,
[02:23:01.000 --> 02:23:04.000]  то ты можешь довольно легко это обнаружить.
[02:23:05.000 --> 02:23:07.000]  А здесь никакого дабл спенда нет.
[02:23:17.000 --> 02:23:21.000]  Ну это такое, ты разведчика посылаешь на виду шпиона.
[02:23:24.000 --> 02:23:25.000]  Я про другое.
[02:23:25.000 --> 02:23:30.000]  Как можно, просто наблюдая за блокчейном, следить, что в нем завелся эгоистичный пул.
[02:23:31.000 --> 02:23:36.000]  Если эту атаку можно проводить секретно, никому не раскрывая свои деятельности,
[02:23:36.000 --> 02:23:39.000]  то, наверное, мы можем пострадать от этого.
[02:23:39.000 --> 02:23:57.000]  У нас просто возрастает число откатов, то есть число этих орфанов, переводится,
[02:23:57.000 --> 02:24:01.000]  число вот таких вот сиротских блоков, которые свершиваются с блокчейна.
[02:24:01.000 --> 02:24:05.000]  Вот если их доля возросла, значит в сети завелся эгоистичный пул.
[02:24:06.000 --> 02:24:09.000]  То есть это атаку трудно провести секретно.
[02:24:10.000 --> 02:24:12.000]  Она задевает наблюдаемый блокчейн.
[02:24:18.000 --> 02:24:21.000]  Ну просто смотреть на гостеп, это более сложно и более децентрализовано,
[02:24:21.000 --> 02:24:24.000]  чем просто посмотреть на блокчейн, как он себя ведет на структуру его.
[02:24:24.000 --> 02:24:28.000]  Если там появляются вот эти висящие сироты, то их стало больше сильно,
[02:24:28.000 --> 02:24:33.000]  то, видимо, кто-то не раскрывает свои блоки, кто-то действует эгоистично.
[02:24:36.000 --> 02:24:37.000]  Что?
[02:24:40.000 --> 02:24:43.000]  Мы отказаться не можем принимать его блоки, мы можем отказаться Bitcoin применять,
[02:24:43.000 --> 02:24:46.000]  принимать, если он магазин.
[02:24:47.000 --> 02:24:51.000]  То есть тут вопрос в том, насколько мы доверяем такой валюте,
[02:24:51.000 --> 02:24:54.000]  где участники нарушают протокол.
[02:24:59.000 --> 02:25:03.000]  Ну кажется, что был какой-то блокчейн, в котором люди так делали,
[02:25:03.000 --> 02:25:06.000]  но это обнаружилось, потому что такой способ есть.
[02:25:06.000 --> 02:25:08.000]  В Биткоине такого никто не делал.
[02:25:08.000 --> 02:25:11.000]  То есть это скорее теоретическая угроза, которая не реализуется.
[02:25:12.000 --> 02:25:15.000]  Но опять же, примерно те же самые соображения, что что делать,
[02:25:15.000 --> 02:25:18.000]  если у кого-то завелось половина вычислительных ресурсов.
[02:25:18.000 --> 02:25:21.000]  Вот мы видели картинку с пулами, и так уже пулов больших много,
[02:25:21.000 --> 02:25:24.000]  поэтому они уже могли бы, как-то координированно, делать что-то плохое.
[02:25:24.000 --> 02:25:26.000]  Но они так не делают, потому что это невыгодно.
[02:25:26.000 --> 02:25:28.000]  Невыгодно так делать.
[02:25:28.000 --> 02:25:30.000]  Алгоритм сам этого не защищает.
[02:25:31.000 --> 02:25:33.000]  Окей.
[02:25:35.000 --> 02:25:37.000]  Идем дальше.
[02:25:39.000 --> 02:25:41.000]  Давайте еще раз скажу забавную, не историю,
[02:25:41.000 --> 02:25:44.000]  забавную деталь, про которую времени нет, потому что это криптография.
[02:25:44.000 --> 02:25:47.000]  Но Биткоин тоже об этом не заботился,
[02:25:47.000 --> 02:25:50.000]  а вообще говоря, нас, как пользователи, это могло бы волновать.
[02:25:50.000 --> 02:25:55.000]  Мы говорили про анонимность, про то, что мы тоже оставляем личности участников
[02:25:55.000 --> 02:25:57.000]  и открытые ключи.
[02:25:57.000 --> 02:25:59.000]  Но в то же время, если мы так делаем,
[02:25:59.000 --> 02:26:02.000]  то наблюдатели могут связывать наши транзакции.
[02:26:02.000 --> 02:26:05.000]  Совет универсальный, заводите себе больше кошельков,
[02:26:05.000 --> 02:26:09.000]  в смысле больше открытых ключей, больше вот этих виртуальных личностей,
[02:26:09.000 --> 02:26:11.000]  но в какой-то момент вы все равно будете собирать деньги,
[02:26:11.000 --> 02:26:13.000]  и все это будет связываться.
[02:26:13.000 --> 02:26:16.000]  Так вот, можно делать прачечные,
[02:26:16.000 --> 02:26:22.000]  где вот устраиваются такие блоки обмена деньгами,
[02:26:22.000 --> 02:26:24.000]  где все перемешивается, и вот на выходе,
[02:26:24.000 --> 02:26:27.000]  непонятно, как входы связаны с выходами.
[02:26:27.000 --> 02:26:30.000]  Но это такая прачечная, которая построена на доверии.
[02:26:30.000 --> 02:26:32.000]  То есть ты строишь сервис и говоришь, что я принимаю транзакции,
[02:26:32.000 --> 02:26:35.000]  принимаю Биткоина, потом я их могу отдавать наружу,
[02:26:35.000 --> 02:26:38.000]  и вот смешаю все входы и выходы.
[02:26:38.000 --> 02:26:43.000]  А на самом деле криптография умеет строить криптографические прачечные
[02:26:43.000 --> 02:26:45.000]  очень красивым образом.
[02:26:45.000 --> 02:26:49.000]  Можно это называть, ну вы, наверное, знаете,
[02:26:49.000 --> 02:26:53.000]  доказательства с нулевым разглашением.
[02:26:53.000 --> 02:26:55.000]  Знаете про это?
[02:26:55.000 --> 02:27:01.000]  Как доказать, что вы умеете считать количество листьев на деревьях?
[02:27:01.000 --> 02:27:03.000]  Не умеете доказывать это?
[02:27:03.000 --> 02:27:05.000]  Как же вы живете?
[02:27:05.000 --> 02:27:07.000]  Ну, представьте, что у вас есть суперсила,
[02:27:07.000 --> 02:27:09.000]  вы умеете считать число листьев на деревьях.
[02:27:09.000 --> 02:27:13.000]  Но это довольно сложно доказать, потому что вы...
[02:27:13.000 --> 02:27:16.000]  Нет, можно поступить, конечно, на как сказать число,
[02:27:16.000 --> 02:27:19.000]  а потом человек возьмет и пересчитает листья,
[02:27:19.000 --> 02:27:21.000]  это займет у него некоторое время.
[02:27:21.000 --> 02:27:23.000]  Так вот, можно доказать, что вы так умеете делать,
[02:27:23.000 --> 02:27:25.000]  а число не раскрывать?
[02:27:25.000 --> 02:27:27.000]  Что?
[02:27:27.000 --> 02:27:32.000]  Смотрите, вы делаете так, вы отворачиваетесь,
[02:27:32.000 --> 02:27:35.000]  а проверяющий отрывает листик от дерева или не отрывает,
[02:27:35.000 --> 02:27:38.000]  и говорит, сколько сейчас стало больше или столько же?
[02:27:38.000 --> 02:27:42.000]  И вот такой тест, в котором вы, если вы не умеете,
[02:27:42.000 --> 02:27:46.000]  это все одно второе, а если вы умеете, то вы и не ошибаетесь.
[02:27:46.000 --> 02:27:49.000]  Так вот, есть такая область математики,
[02:27:49.000 --> 02:27:51.000]  которая этим занимается, такие доказательства исследует.
[02:27:51.000 --> 02:27:53.000]  Можно делать их неинтерактивными,
[02:27:53.000 --> 02:27:56.000]  которые не требуют коммуникации того, кто доказывает,
[02:27:56.000 --> 02:27:58.000]  того, кто проверяет доказательства.
[02:27:58.000 --> 02:28:00.000]  То есть, вы можете опубликовать, вы можете проверить,
[02:28:00.000 --> 02:28:02.000]  при этом не раскрыв содержимое.
[02:28:02.000 --> 02:28:04.000]  Так вот, в биткоине...
[02:28:04.000 --> 02:28:07.000]  Это называется ZeroCoin, ZeroCash, наверное, сейчас не помню.
[02:28:07.000 --> 02:28:10.000]  Короче, идея такая, что вы можете делать специальные транзакции,
[02:28:10.000 --> 02:28:13.000]  можно расширить так протокол всей этой системы,
[02:28:13.000 --> 02:28:16.000]  что есть, добавив к нему транзакции,
[02:28:16.000 --> 02:28:20.000]  в которых вы отправляете деньги не Бобу,
[02:28:20.000 --> 02:28:23.000]  а кладете их в ящичек.
[02:28:23.000 --> 02:28:26.000]  И у вас в блокчейне появляются такие вот ящики с планетами.
[02:28:26.000 --> 02:28:29.000]  То есть, транзакция имеет выходом эти ящики.
[02:28:29.000 --> 02:28:31.000]  А потом вы можете опубликовать транзакцию,
[02:28:31.000 --> 02:28:34.000]  где вы доказываете, что вы берете одну из монет из этих ящиков.
[02:28:34.000 --> 02:28:36.000]  А из какого вы не говорите?
[02:28:36.000 --> 02:28:38.000]  То есть, можно убедиться, можно доказать проверяющему,
[02:28:38.000 --> 02:28:41.000]  что действительно монета взята из одного из этих ящиков,
[02:28:41.000 --> 02:28:43.000]  и что вы не брали из одного ящика дважды.
[02:28:43.000 --> 02:28:46.000]  Но при этом не рассчитывается какого.
[02:28:46.000 --> 02:28:48.000]  Это суперкрасиво.
[02:28:48.000 --> 02:28:50.000]  Но это не имеет отношения к распределенности,
[02:28:50.000 --> 02:28:52.000]  поэтому мы про это не говорим.
[02:28:52.000 --> 02:28:56.000]  Но если вам интересно, то вы почитаете про это.
[02:28:56.000 --> 02:28:58.000]  Про распределенность.
[02:28:58.000 --> 02:29:01.000]  Опять, прямого отношения это не имеет,
[02:29:01.000 --> 02:29:04.000]  но мне кажется, что это важно.
[02:29:04.000 --> 02:29:06.000]  Вот смотрите.
[02:29:06.000 --> 02:29:09.000]  Вернемся вот к этому рисунку.
[02:29:09.000 --> 02:29:12.000]  У нас есть транзакция Алисы, транзакция Боба,
[02:29:12.000 --> 02:29:15.000]  и они склеиваются вот здесь.
[02:29:15.000 --> 02:29:20.000]  И для того, чтобы провалидировать, что эта склейка имеет место,
[02:29:20.000 --> 02:29:22.000]  нужно с одной стороны проверить подпись,
[02:29:22.000 --> 02:29:26.000]  с другой стороны проверить, что Боб не тратит выход повторно.
[02:29:26.000 --> 02:29:30.000]  Так вот, на самом деле вот эта процедура валидации,
[02:29:30.000 --> 02:29:35.000]  она не зашлита жестко в протокол блокчейна.
[02:29:35.000 --> 02:29:39.000]  Не то чтобы узел сети, который получает блок,
[02:29:39.000 --> 02:29:42.000]  смотрит на транзакцию, считает там фиксировано,
[02:29:42.000 --> 02:29:45.000]  проверяет свою подпись и говорит да нет.
[02:29:45.000 --> 02:29:48.000]  На самом деле вот здесь происходит нечто более гибкое.
[02:29:48.000 --> 02:29:56.000]  Потому что процедура валидации может быть составлена самой Алисой.
[02:29:56.000 --> 02:30:01.000]  Потому что процедура валидации это на самом деле некоторая программа.
[02:30:01.000 --> 02:30:04.000]  Вот когда вы пишете транзакцию в биткоине,
[02:30:04.000 --> 02:30:06.000]  то вы пишете не то чтобы голыми руками,
[02:30:06.000 --> 02:30:10.000]  но вы на самом деле пишете программу.
[02:30:10.000 --> 02:30:13.000]  Давайте мы опустим проект.
[02:30:26.000 --> 02:30:43.000]  Когда у вас есть транзакция с входом и выходом,
[02:30:43.000 --> 02:30:45.000]  на самом деле это два скрипта.
[02:30:45.000 --> 02:30:49.000]  Скрипта для некоторой виртуальной стековой машины.
[02:30:49.000 --> 02:30:52.000]  Вот знаете ли вы, что такое стековая виртуальная машина?
[02:30:52.000 --> 02:30:54.000]  Как работает Python, например?
[02:30:54.000 --> 02:30:56.000]  Есть регистровая машина, есть стековая машина.
[02:30:56.000 --> 02:31:03.000]  То есть вы эмулируете компьютер, но только он устроен попроще.
[02:31:03.000 --> 02:31:07.000]  Например, как вы вычисляете риффетическое выражение в польской аннотации?
[02:31:07.000 --> 02:31:10.000]  Знаете, когда вы строите дерево разбора,
[02:31:10.000 --> 02:31:14.000]  обходите его пластиковым обходом, получаете польскую аннотацию,
[02:31:14.000 --> 02:31:18.000]  и у вас написано 1, 2+.
[02:31:18.000 --> 02:31:20.000]  Вот считается оно так, вы единицу кладете на стек,
[02:31:20.000 --> 02:31:22.000]  вы кладете на стек, когда видите плюс,
[02:31:22.000 --> 02:31:25.000]  то вы снимаете со стека два верхних элемента,
[02:31:25.000 --> 02:31:28.000]  складываете их, кладете обратный результат.
[02:31:28.000 --> 02:31:33.000]  Это немного другой способ построить байт-кор для виртуальной машины.
[02:31:33.000 --> 02:31:38.000]  Он с одной стороны компактнее, с другой стороны немного более...
[02:31:38.000 --> 02:31:42.000]  Ну короче, есть свои плюсы и минусы по сравнению с регистровыми машинами.
[02:31:42.000 --> 02:31:45.000]  Так вот, биткоин на самом деле стековая виртуальная машина,
[02:31:45.000 --> 02:31:48.000]  и каждый узел, когда он выполняет валидацию блоков,
[02:31:48.000 --> 02:31:50.000]  валидацию транзакций, он делает следующее.
[02:31:50.000 --> 02:31:54.000]  Он берет скрипт, то есть программу вот на этом,
[02:31:54.000 --> 02:31:58.000]  программу из инструкции байт-кода,
[02:31:58.000 --> 02:32:02.000]  вот можно их здесь перечислить,
[02:32:04.000 --> 02:32:08.000]  берет программу транзакции, которая цепляется,
[02:32:08.000 --> 02:32:11.000]  то есть программа, которая получает монеты,
[02:32:11.000 --> 02:32:14.000]  берет программу, которая отправляет монеты,
[02:32:14.000 --> 02:32:19.000]  конкатинирует их, то есть вот это output, это input.
[02:32:19.000 --> 02:32:22.000]  И выполняет эту программу.
[02:32:22.000 --> 02:32:26.000]  И если программа завершается успешно, то это значит, что транзакция валидируется.
[02:32:26.000 --> 02:32:28.000]  Она корректна.
[02:32:28.000 --> 02:32:32.000]  Вот если мы говорим просто про перевод денег, то он устроен так.
[02:32:32.000 --> 02:32:36.000]  Вот когда мы отправляем деньги кому-то, то мы отправляем их по адресу.
[02:32:36.000 --> 02:32:39.000]  Адрес – это хэш открытого ключа.
[02:32:39.000 --> 02:32:43.000]  И вот в транзакции в input, в output транзакции Алисы
[02:32:43.000 --> 02:32:47.000]  был написан хэш открытого ключа Боба.
[02:32:47.000 --> 02:32:51.000]  И Боб, чтобы потратить эти монеты,
[02:32:51.000 --> 02:32:56.000]  получить эти монеты, он должен предоставить свой открытый ключ.
[02:32:56.000 --> 02:32:59.000]  И при проверке нужно сделать две вещи.
[02:32:59.000 --> 02:33:03.000]  Во-первых, его похэшировать, проверить, что хэш совпадает с этим.
[02:33:03.000 --> 02:33:06.000]  А во-вторых, что действительно это Боб,
[02:33:06.000 --> 02:33:10.000]  и он обладает секретным ключом данного открытого ключа.
[02:33:10.000 --> 02:33:14.000]  Вот для этого берется такая программа.
[02:33:14.000 --> 02:33:18.000]  Алисы пишет проверку, Боб пишет входные данные для этой проверки.
[02:33:18.000 --> 02:33:25.000]  Мы это конкатинируем и запускаем программу на этом stack-овом компьютере.
[02:33:25.000 --> 02:33:28.000]  Первая инструкция – мы кладем подпись на stack.
[02:33:28.000 --> 02:33:32.000]  Вторая инструкция – из input транзакции Боба
[02:33:32.000 --> 02:33:36.000]  мы кладем публичный ключ на stack.
[02:33:36.000 --> 02:33:42.000]  После этого первая инструкция в output транзакции Алисы – это дубликация.
[02:33:42.000 --> 02:33:46.000]  То есть мы дублируем вершину stack.
[02:33:46.000 --> 02:33:51.000]  После этого следующая инструкция – мы считаем хэш.
[02:33:51.000 --> 02:33:56.000]  Снимаем аргумент с вершины stack и кладем результат на вершину stack.
[02:33:56.000 --> 02:34:05.000]  После этого следующая инструкция, так условно здесь написано,
[02:34:05.000 --> 02:34:11.000]  мы должны проверить верно лишь, что на вершине stack лежит такое же значение, что и у нас.
[02:34:11.000 --> 02:34:16.000]  Проверяем, совпало, хорошо, снимаем с вершины stack этот хэш.
[02:34:16.000 --> 02:34:19.000]  На stack-е остается только открытый ключ и подпись.
[02:34:19.000 --> 02:34:26.000]  И дальше последняя инструкция проверяет, что действительно подпись соответствует открытому ключу.
[02:34:26.000 --> 02:34:31.000]  Принцип понятен?
[02:34:31.000 --> 02:34:38.000]  То есть правило валидации транзакции отправитель составляет сам.
[02:34:38.000 --> 02:34:40.000]  Почему это может быть полезно?
[02:34:40.000 --> 02:34:45.000]  Потому что транзакции бывают сложнее, чем просто перевести деньги от Алисы к Бобу.
[02:34:45.000 --> 02:34:47.000]  Так вот безусловно.
[02:34:47.000 --> 02:34:52.000]  Потому что в транзакциях можно составлять какие-то более сложные проверки.
[02:34:52.000 --> 02:34:56.000]  Но что интересно, вот смотрите, вы начинаете, вот теперь можно сказать,
[02:34:56.000 --> 02:34:59.000]  что вы реплицируете компьютер уже, виртуальную машину.
[02:34:59.000 --> 02:35:04.000]  То есть каждый узел в сети блокчейна, он на самом деле получает блоки,
[02:35:04.000 --> 02:35:08.000]  склеивает транзакции и исполняет программы.
[02:35:08.000 --> 02:35:11.000]  Тут можно поэтому по-разному на блокчейн смотреть.
[02:35:11.000 --> 02:35:14.000]  Можно смотреть на него как на совокупность транзакций, которые двигают деньги.
[02:35:14.000 --> 02:35:19.000]  Можно думать про вот сам блокчейн биткоина, как про, ну почти что гид,
[02:35:19.000 --> 02:35:21.000]  потому что мы ссылаемся с хэшами.
[02:35:21.000 --> 02:35:23.000]  Можно думать про вот такой компьютер.
[02:35:23.000 --> 02:35:28.000]  Но вот смотрите, если вы начинаете распределенно выполнять на вот этих компьютерах какие-то программы,
[02:35:28.000 --> 02:35:31.000]  то у вас могут подстригать неприятности.
[02:35:31.000 --> 02:35:34.000]  Ну, во-первых, программы, конечно, должны быть детерминированными.
[02:35:34.000 --> 02:35:40.000]  А во-вторых, в них желательно не писать бесконечных циклов.
[02:35:40.000 --> 02:35:42.000]  То есть хорошо, чтобы эти программы останавливались,
[02:35:42.000 --> 02:35:46.000]  потому что если блок будет корректным, а при валидации мы напишем бесконечный цикл,
[02:35:46.000 --> 02:35:48.000]  то дело закончится плохо.
[02:35:48.000 --> 02:35:54.000]  Поэтому в блокчейне, в биткоине этот язык, скрипт не содержит циклов.
[02:35:54.000 --> 02:35:57.000]  Он не терян полный, вы не можете писать все, что угодно.
[02:35:57.000 --> 02:36:03.000]  То есть любая программа, она гарантированно завершается.
[02:36:03.000 --> 02:36:05.000]  Это приятное свойство.
[02:36:05.000 --> 02:36:13.000]  Но вот есть Ethereum, альтернативный блокчейн, и вот там уже вы можете писать произвольные программы.
[02:36:16.000 --> 02:36:19.000]  Нет, ну если делать не думая, то, конечно, опасно.
[02:36:19.000 --> 02:36:21.000]  В смысле, если делать блокчейн не думая.
[02:36:21.000 --> 02:36:26.000]  Конечно же, если ты делаешь Ethereum, ты подумаешь о том, что там ты можешь...
[02:36:26.000 --> 02:36:30.000]  Блокчейн – это гораздо более сложная штука,
[02:36:30.000 --> 02:36:35.000]  и в нем фактически репозитория для программ.
[02:36:35.000 --> 02:36:37.000]  Ты можешь методы вызывать.
[02:36:37.000 --> 02:36:41.000]  То есть такие условные акторы, контракты, ты можешь дергать их методы.
[02:36:42.000 --> 02:36:45.000]  И, конечно же, там ты можешь писать уже более сложную логику.
[02:36:45.000 --> 02:36:47.000]  Там у тебя есть выразительный язык.
[02:36:56.000 --> 02:37:00.000]  Там ты пишешь уже какие-то программы с какими-то циклами.
[02:37:00.000 --> 02:37:04.000]  То есть это вполне себе полный язык.
[02:37:04.000 --> 02:37:07.000]  Он, конечно, переводится в некоторый байт-код.
[02:37:07.000 --> 02:37:09.000]  То есть ты front-end можешь поменять.
[02:37:09.000 --> 02:37:13.000]  Да, и виртуальная машина Ethereum называется EVM.
[02:37:13.000 --> 02:37:15.000]  Догадываетесь, что довольно забавно само по себе.
[02:37:15.000 --> 02:37:17.000]  Так вот, почему же Ethereum?
[02:37:17.000 --> 02:37:21.000]  Ну, потому, что у тебя есть виртуальная машина.
[02:37:21.000 --> 02:37:23.000]  И это Ethereum называется EVM.
[02:37:23.000 --> 02:37:25.000]  Догадываетесь, что довольно забавно само по себе.
[02:37:25.000 --> 02:37:29.000]  Так вот, почему же Ethereum не боится, что вы напишете там бесконечный цикл?
[02:37:29.000 --> 02:37:31.000]  Чтобы вы можете.
[02:37:31.000 --> 02:37:35.000]  И вы этот бесконечный цикл реплицируете на тысячи машин.
[02:37:35.000 --> 02:37:37.000]  И исполните его там.
[02:37:37.000 --> 02:37:41.000]  Ну, примерно.
[02:37:41.000 --> 02:37:47.000]  Вот, действительно, ты можешь написать функцию, вызов которой не завершается.
[02:37:47.000 --> 02:37:51.000]  Но, с другой стороны, у проверяющего нет мотивации.
[02:37:51.000 --> 02:37:53.000]  Исполнить такой код бесконечно долго.
[02:37:53.000 --> 02:37:57.000]  Когда ты публикуешь транзакцию,
[02:37:57.000 --> 02:38:03.000]  то в биткоине есть комиссия, чтобы эта транзакция попала в блок.
[02:38:03.000 --> 02:38:07.000]  А здесь комиссия устроена немного иначе.
[02:38:07.000 --> 02:38:11.000]  Ты говори, ну, точнее, не так.
[02:38:11.000 --> 02:38:15.000]  В виртуальной машине каждая инструкция в твоей программе,
[02:38:15.000 --> 02:38:19.000]  ну, не в этом языке, а в тот, в который эта программа скомпилируется,
[02:38:19.000 --> 02:38:21.000]  каждая инструкция имеет цену.
[02:38:21.000 --> 02:38:23.000]  Она называется топливо.
[02:38:23.000 --> 02:38:25.000]  Сколько это единиц топлива?
[02:38:27.000 --> 02:38:31.000]  Кто-то уже пытался майнить на этом языке?
[02:38:31.000 --> 02:38:33.000]  Ethereum это второй после биткоина блокчейн.
[02:38:33.000 --> 02:38:37.000]  Ну, ты рассылаешь все программы, они все начинают майнить.
[02:38:37.000 --> 02:38:41.000]  Подожди, майнить, майнинг это про другое.
[02:38:41.000 --> 02:38:51.000]  Вот yellow paper показывает спецификация.
[02:38:51.000 --> 02:38:55.000]  То есть тут все описано, и вот тут есть стоимость инструкции.
[02:38:55.000 --> 02:39:01.000]  Так вот, когда вы публикуете транзакцию,
[02:39:01.000 --> 02:39:05.000]  то есть какую-то программу, которая будет исполняется на разных репликах,
[02:39:05.000 --> 02:39:11.000]  вы говорите, что я готов, вы назначаете цену за единицу топлива.
[02:39:15.000 --> 02:39:19.000]  И вот вы покупаете топливо для своей программы за какие-то деньги.
[02:39:21.000 --> 02:39:25.000]  Вы покупаете у майнера, который найдет ноанс для блоков,
[02:39:25.000 --> 02:39:29.000]  в которых придет транзакция топлива по этой цене.
[02:39:29.000 --> 02:39:35.000]  И когда кто-то получает блок с этой транзакцией,
[02:39:35.000 --> 02:39:39.000]  он запускает вашу программу, и она исполняется до тех пор,
[02:39:39.000 --> 02:39:45.000]  пока у отправителя этой транзакции есть на балансе эфир,
[02:39:45.000 --> 02:39:47.000]  чтобы покупать топливо для исполнения этой программы.
[02:39:47.000 --> 02:39:50.000]  То есть программа может быть бесконечной, но рано или поздно
[02:39:50.000 --> 02:39:54.000]  деньги кончатся, за исполнение будет платить нечем, и исполнение завершится.
[02:39:54.000 --> 02:39:58.000]  Понятная идея?
[02:40:02.000 --> 02:40:06.000]  То есть это такой аналог комиссии, то есть выигрыш,
[02:40:06.000 --> 02:40:09.000]  то есть деньги, которые потрачены на исполнение программы,
[02:40:09.000 --> 02:40:13.000]  они уходят майнеру, который нашел блок с этой транзакцией.
[02:40:17.000 --> 02:40:20.000]  Так что мы здесь себя ничем не ограничиваем, мы не ограничиваем
[02:40:20.000 --> 02:40:24.000]  instruction set, но мы вот с помощью такого довольно странного механизма
[02:40:24.000 --> 02:40:28.000]  ограничиваем время исполнения программы.
[02:40:35.000 --> 02:40:38.000]  Да, ну их же много.
[02:40:38.000 --> 02:40:41.000]  Ты надеешься, что ты получаешь транзакцию от пользователя,
[02:40:41.000 --> 02:40:44.000]  ты добавляешь ее в блок, потому что ты надеешься, что именно ты
[02:40:44.000 --> 02:40:48.000]  в блок добавляешь блокчейн, тогда ты получишь плату
[02:40:48.000 --> 02:40:52.000]  топлива для исполнения этой программы.
[02:40:52.000 --> 02:40:56.000]  Ну а все остальные это просто реплики, они должны повторять все это.
[02:40:56.000 --> 02:41:00.000]  Так вот, какая же польза от того, что мы
[02:41:00.000 --> 02:41:04.000]  реплицируем именно компьютер, от того, что мы можем писать
[02:41:04.000 --> 02:41:08.000]  более сложные программы, в эфире они называются smart contracts.
[02:41:08.000 --> 02:41:12.000]  Ну давайте я покажу пример задачи, где
[02:41:12.000 --> 02:41:16.000]  нужно делать уже более сложные правила валидации.
[02:41:16.000 --> 02:41:20.000]  И все это в контексте биткоина.
[02:41:38.000 --> 02:41:42.000]  Итак, мы посмотрим на задачу, которая с распределенностью уже связана напрямую,
[02:41:42.000 --> 02:41:46.000]  и в которой используется возможность писать более сложные правила валидации.
[02:41:46.000 --> 02:41:50.000]  Прежде чем мы к этому перейдем,
[02:41:50.000 --> 02:41:54.000]  маленький вопрос по мотивам того, что было ранее.
[02:41:54.000 --> 02:41:58.000]  Как сделать random в таком языке?
[02:42:06.000 --> 02:42:10.000]  Вот транзакция, когда она отправляется, она не знает, в какой блок она попадет,
[02:42:10.000 --> 02:42:14.000]  потому что это очень невозможно предсказать, потому что это зависит от nonce,
[02:42:14.000 --> 02:42:18.000]  от других транзакций, которые в этот блок тоже войдут.
[02:42:18.000 --> 02:42:22.000]  Так вот, в качестве источника случайности для программы внутри блока можно использовать
[02:42:22.000 --> 02:42:26.000]  как раз хэш этого самого блока.
[02:42:26.000 --> 02:42:30.000]  Потому что все должно быть детерминировано, потому что исполняется на разных компьютерах.
[02:42:30.000 --> 02:42:34.000]  Итак, задача следующая.
[02:42:34.000 --> 02:42:38.000]  У нас есть Алиса и Боб.
[02:42:38.000 --> 02:42:42.000]  У Алисы, у Боба есть биткоины.
[02:42:42.000 --> 02:42:46.000]  В количестве B штук.
[02:42:46.000 --> 02:42:50.000]  У Алисы есть некоторые альткоины из альтернативного блокчейна.
[02:42:50.000 --> 02:42:54.000]  И Алиса с Бобом хотят обменяться деньгами.
[02:42:54.000 --> 02:42:58.000]  Алиса хочет получить биткоины, Боб хочет получить альткоины.
[02:42:58.000 --> 02:43:02.000]  Задача называется atomic swap.
[02:43:08.000 --> 02:43:18.000]  Итак, вот есть Алиса, у нее альткоинов, у него есть Боб, у него B биткоинов.
[02:43:18.000 --> 02:43:26.000]  Алиса живет на одном блокчейне, Боб живет на другом блокчейне.
[02:43:26.000 --> 02:43:32.000]  Давайте думать, как обменяться деньгами.
[02:43:38.000 --> 02:43:42.000]  Это некоторые альтернативные блокчейны.
[02:43:42.000 --> 02:43:46.000]  Само собой.
[02:43:46.000 --> 02:43:50.000]  Алиса готова получить биткоины, у нее уже есть открытый ключ.
[02:43:50.000 --> 02:43:56.000]  Боб тоже готов получить альткоины, они об этом позаботились заранее.
[02:43:56.000 --> 02:44:00.000]  В чем проблема? В том, что Алиса и Боб могут обманывать друг друга.
[02:44:00.000 --> 02:44:04.000]  Они могут, во-первых, просто отказать, потому что у нас распределенная система.
[02:44:04.000 --> 02:44:08.000]  Они могут потерять кошелек, пароль кошелька, ну либо кто-то может вести себя нечестно.
[02:44:08.000 --> 02:44:12.000]  Поэтому мы хотим придумать такой протокол, который был бы устойчив, разумеется, к отказам,
[02:44:12.000 --> 02:44:16.000]  к исчезновению одной из сторон.
[02:44:16.000 --> 02:44:20.000]  И он был бы устойчив к византийскому поведению одной из сторон.
[02:44:20.000 --> 02:44:24.000]  То есть если кто-то нарушает протокол, то он не может получить больше денег,
[02:44:24.000 --> 02:44:28.000]  чем при честном поведении.
[02:44:28.000 --> 02:44:34.000]  Вот есть Алиса, и она выпускает транзакцию,
[02:44:34.000 --> 02:44:46.000]  которая переводит Бобу в альткоине свои а монет.
[02:44:46.000 --> 02:44:52.000]  Что вы скажете про такое начало?
[02:44:52.000 --> 02:44:58.000]  Да, это правда, Бобу можно уходить.
[02:44:58.000 --> 02:45:04.000]  Бобу можно забирать деньги и покидать эту сделку, больше ему ничего не нужно.
[02:45:04.000 --> 02:45:10.000]  Видимо, это решение плохое. Нужно сделать так, чтобы Боб, пока он не опубликует свою транзакцию,
[02:45:10.000 --> 02:45:14.000]  потратить транзакцию Алисы не смог.
[02:45:14.000 --> 02:45:20.000]  Для этого нужно здесь, в выходе этой транзакции Т1, написать какие-то более сложные правила валидации.
[02:45:20.000 --> 02:45:28.000]  Мы сделаем так. Пусть Алиса сгенирирует себе секрет.
[02:45:28.000 --> 02:45:34.000]  Просто с помощью генератора случайных чисел получит некоторый секрет.
[02:45:34.000 --> 02:45:38.000]  Бобу она не говорит секрет.
[02:45:38.000 --> 02:45:44.000]  И в своей транзакции, которую она кладет на блокчейн альткоина, она проверяет следующее.
[02:45:44.000 --> 02:45:58.000]  Она говорит, что эту транзакцию можно потратить только если вы Боб и плюс вы знаете секрет.
[02:45:58.000 --> 02:46:02.000]  Каким образом можно проверить, что Боб знает секрет?
[02:46:02.000 --> 02:46:04.000]  Каким образом можно написать такое правило?
[02:46:04.000 --> 02:46:09.000]  Вы говорите, что во-первых, у транзакции должна быть подпись Боба,
[02:46:09.000 --> 02:46:19.000]  а во-вторых, в транзакции должен фигулировать сам секрет, а вы здесь напишите хэш от секрета.
[02:46:19.000 --> 02:46:28.000]  Это называется хэшлог.
[02:46:28.000 --> 02:46:33.000]  То есть Боб должен приложить свою подпись, открытый ключ, как и раньше, плюс приложить секрет,
[02:46:33.000 --> 02:46:39.000]  и эта программа возьмет этот секрет, хэширует его и сравнит с тем значением, которое было написано здесь.
[02:46:39.000 --> 02:46:42.000]  Алиса может опубликовать такую транзакцию с хэшом от секрета,
[02:46:42.000 --> 02:46:46.000]  а Боб, поскольку он не может обращать криптографические хэш-функции,
[02:46:46.000 --> 02:46:50.000]  просто ждет от Алисы чего-то, пока он этот секрет раскроет.
[02:46:50.000 --> 02:47:00.000]  Боб просто потратить деньги не может, но правда он все еще может просто уйти и заблокировать деньги Алисы, что неприятно.
[02:47:00.000 --> 02:47:05.000]  Но, по крайней мере, забрать ее деньги он сейчас не сможет.
[02:47:05.000 --> 02:47:10.000]  Что он делает, чтобы все-таки получить от Алисы рано или поздно секрет?
[02:47:10.000 --> 02:47:17.000]  Он публикует свою транзакцию.
[02:47:17.000 --> 02:47:31.000]  Которая как будет устроена?
[02:47:31.000 --> 02:47:39.000]  Эта транзакция адресует Б Биткоина в Алисе, но только если у нее есть секрет.
[02:47:39.000 --> 02:47:45.000]  Только если она его опубликует.
[02:47:45.000 --> 02:47:52.000]  Это один и тот же хэш от одного и того же секрета.
[02:47:52.000 --> 02:47:56.000]  То есть Боб готов отдать свои биткоины, только если Алиса опубликует свои секреты,
[02:47:56.000 --> 02:48:00.000]  если она его опубликует, то мы на месте Боба можем этим секретом воспользоваться,
[02:48:00.000 --> 02:48:06.000]  чтобы забрать свои деньги и свои альткоины на том блокчейне.
[02:48:06.000 --> 02:48:10.000]  Если Алиса захочет получить свои биткоины теперь,
[02:48:10.000 --> 02:48:15.000]  но Боб не может получить эти деньги, эти альткоинов, потому что у него нет секрет.
[02:48:15.000 --> 02:48:20.000]  Но у секрета есть у Алисы, поэтому она может выпустить транзакцию,
[02:48:20.000 --> 02:48:27.000]  где здесь будет написано S.
[02:48:27.000 --> 02:48:33.000]  Ну и дальше эти деньги потратить куда-нибудь.
[02:48:33.000 --> 02:48:37.000]  Вот, Боб узнает про этот секрет, он же в блокчейне лежит в открытом доступе,
[02:48:37.000 --> 02:48:41.000]  и этим секретом воспользуется, чтобы забрать свои деньги.
[02:48:41.000 --> 02:48:45.000]  Никто другой не может, потому что еще цифровая подпись Боба проверяется.
[02:48:45.000 --> 02:48:55.000]  Ну вот давайте подумаем, что может пойти не так в этом протоколе.
[02:48:55.000 --> 02:49:02.000]  Нет, ну подделывать подпись мы к счастью не можем, ломать фотографию мы не можем.
[02:49:02.000 --> 02:49:06.000]  Ну во-первых, Алиса, тут как бы симметричное действие,
[02:49:06.000 --> 02:49:13.000]  Алиса может дождаться транзакции от Боба и ничего не сделать, не опубликовать секрет.
[02:49:13.000 --> 02:49:16.000]  У Боба заблокируются деньги.
[02:49:16.000 --> 02:49:20.000]  Или даже на предыдущем шаге Боб просто не опубликует свою транзакцию, это два,
[02:49:20.000 --> 02:49:24.000]  и тогда у Алисы заблокируются деньги, и то и другое неприятно.
[02:49:24.000 --> 02:49:27.000]  Поэтому должен быть какой-то запасной план, если другая сторона откажет,
[02:49:27.000 --> 02:49:35.000]  но не будет делать то, что он должен.
[02:49:35.000 --> 02:49:40.000]  Ну нам нужен тайм-аут.
[02:49:40.000 --> 02:49:47.000]  То есть мы выплачиваем деньги Бобу, если у него есть секрет,
[02:49:47.000 --> 02:50:01.000]  или же мы возвращаем деньги себе, но просто по некоторому тайм-ауту.
[02:50:01.000 --> 02:50:04.000]  Видимо, Боба беспокоит то же самое, что Алиса бросит выполнить протокол,
[02:50:04.000 --> 02:50:08.000]  не опубликует свою транзакцию с секретом, поэтому здесь тоже должен быть тайм-аут,
[02:50:08.000 --> 02:50:16.000]  который вернет деньги Бобу.
[02:50:16.000 --> 02:50:22.000]  Как сделать тайм-аут, мы сейчас поговорим, но вот даже в такой схеме пока есть проблема.
[02:50:22.000 --> 02:50:26.000]  Если, допустим, тайм-аут у нас есть.
[02:50:26.000 --> 02:50:38.000]  Какой вопрос?
[02:50:38.000 --> 02:50:46.000]  Я не понял, честно говоря.
[02:50:46.000 --> 02:50:49.000]  Боб не опубликует никакой секрет, секрет есть только у Алисы,
[02:50:49.000 --> 02:50:51.000]  она управляет всем этим протоколом.
[02:50:51.000 --> 02:50:54.000]  Если она бросит этот протокол, не опубликует свой секрет,
[02:50:54.000 --> 02:51:04.000]  не потратит деньги Боба, то Боб не сможет получить деньги от Алисы.
[02:51:04.000 --> 02:51:10.000]  Давай обойдемся без секретов больше, секретов достаточно.
[02:51:10.000 --> 02:51:12.000]  В чем уязвимость такой схемы?
[02:51:12.000 --> 02:51:16.000]  Пока мы не говорим, как сделать тайм-ауты, но вот если мы их умеем делать,
[02:51:16.000 --> 02:51:24.000]  то все равно Алиса может навредить Бобу.
[02:51:24.000 --> 02:51:29.000]  Да, Алиса, которая приближается к тайм-ауту, вот этот вот,
[02:51:29.000 --> 02:51:32.000]  Алиса в этот момент публикует свою транзакцию,
[02:51:32.000 --> 02:51:35.000]  забирает деньги у Боба, публикует секрет,
[02:51:35.000 --> 02:51:37.000]  но просто не дает Бобу этим воспользоваться,
[02:51:37.000 --> 02:51:39.000]  потому что здесь протухает такой же тайм-аут,
[02:51:39.000 --> 02:51:41.000]  и деньги возвращаются Алисе.
[02:51:41.000 --> 02:51:45.000]  То есть она и свои забирает, и у Боба подрезала деньги.
[02:51:45.000 --> 02:51:50.000]  Поэтому что нужно сделать?
[02:51:50.000 --> 02:52:00.000]  Вот, нужно взять разные тайм-ауты, ну и не знаю, сказать, что это.
[02:52:00.000 --> 02:52:03.000]  Мне кажется, не наоборот.
[02:52:03.000 --> 02:52:07.000]  Если Алиса публикует транзакцию с секретом,
[02:52:07.000 --> 02:52:13.000]  то она дает Бобу запас времени для того, чтобы этим секретом воспользоваться.
[02:52:13.000 --> 02:52:21.000]  Если Алиса не публикует секрет, деньги вернутся Бобу.
[02:52:21.000 --> 02:52:28.000]  Окей, протокол почти готов, но мы не поговорили, как сделать тайм-ауты.
[02:52:28.000 --> 02:52:31.000]  Ну вообще говоря, в Биткоине нельзя сделать тайм-ауты в таком виде,
[02:52:31.000 --> 02:52:36.000]  то есть написать, что эту транзакцию можно потратить не раньше, чем какое-то время.
[02:52:36.000 --> 02:52:41.000]  Но в Биткоине есть тайм-локи.
[02:52:41.000 --> 02:52:48.000]  То есть вы можете в транзакции добавить ограничения, что эта транзакция не может попасть в блокчейн,
[02:52:48.000 --> 02:52:52.000]  если высота блока меньше, чем что-то.
[02:52:52.000 --> 02:52:55.000]  Или если тайм-стэм блока меньше, чем что-то.
[02:52:55.000 --> 02:53:00.000]  То есть тайм-аут в виде либо высоты блока, то есть позиции порядкового номера,
[02:53:00.000 --> 02:53:05.000]  либо в смысле временной метки.
[02:53:05.000 --> 02:53:10.000]  То есть тайм-аут, он на самом деле на транзакции, которые тратят деньги.
[02:53:10.000 --> 02:53:15.000]  Они отправляют.
[02:53:15.000 --> 02:53:20.000]  Ну и это правило, оно валидируется на узлах точно так же, как и все остальные транзакции.
[02:53:20.000 --> 02:53:25.000]  То есть помимо выполнения скрипта, узел, который получил блок с такой транзакцией,
[02:53:25.000 --> 02:53:34.000]  проверяет, что сравнивает тайм-лог транзакции и высоту или временную метку блока.
[02:53:34.000 --> 02:53:45.000]  То есть чтобы Алиса получила свои деньги обратно, ей нужна еще одна транзакция,
[02:53:45.000 --> 02:54:00.000]  у которой будет тайм-лог.
[02:54:00.000 --> 02:54:05.000]  Но Боб же про нее ничего не знает.
[02:54:05.000 --> 02:54:08.000]  Это же транзакция Алиса.
[02:54:08.000 --> 02:54:19.000]  Как он будет уверен, что она не... какой тайм-аут она себе установила?
[02:54:19.000 --> 02:54:24.000]  Понятен вопрос?
[02:54:24.000 --> 02:54:25.000]  Нет.
[02:54:25.000 --> 02:54:27.000]  Окей, честно признался.
[02:54:27.000 --> 02:54:29.000]  Но вот тайм-аут он логически здесь.
[02:54:29.000 --> 02:54:32.000]  То есть ты не можешь потратить этот выход раньше, чем что-то.
[02:54:32.000 --> 02:54:36.000]  Но так вот получилось, что в биткоине тайм-лог, он на транзакции, которые вот здесь.
[02:54:36.000 --> 02:54:41.000]  То есть эта транзакция не может попасть в блокчейн раньше, чем.
[02:54:41.000 --> 02:54:45.000]  Но Боб про эту транзакцию ничего не знает, потому что она транзакция, которую Алиса выпускает.
[02:54:45.000 --> 02:54:47.000]  Ну по крайней мере, в нашем протоколе он ничего не знает.
[02:54:47.000 --> 02:54:56.000]  То есть мы... границу на... короче, тайм-аут настраивается вот на эти транзакции.
[02:54:56.000 --> 02:55:02.000]  Поэтому Боб, если он соглашается на такую сделку, должен быть уверен, что Алиса не может выпустить транзакцию,
[02:55:02.000 --> 02:55:13.000]  которая потратит выход раньше, чем через там... 24 часа.
[02:55:13.000 --> 02:55:19.000]  Поэтому альтернативный способ потратить этот выход такой.
[02:55:19.000 --> 02:55:31.000]  Транзакция отправляет аальткоинов либо Бобу, если он предоставит секрет, либо Алисе,
[02:55:31.000 --> 02:55:39.000]  если транзакция Алисы подписана еще и Бобу.
[02:55:39.000 --> 02:55:47.000]  И когда Алиса участвует в этом протоколе, она готовит эту транзакцию, готовит эту транзакцию
[02:55:47.000 --> 02:55:55.000]  и отправляет эту транзакцию Бобу. И Боб тоже ее подписывает.
[02:55:55.000 --> 02:56:01.000]  И Боб теперь уверен, что альткоин потратится либо по публикации секрета,
[02:56:01.000 --> 02:56:07.000]  либо спустя 24 часа деньги вернутся Алисе. Но он, наверное, согласен на эти 24 часа Алисе.
[02:56:07.000 --> 02:56:12.000]  И он знает, что Алиса не может никак жульничать, потому что любая транзакция,
[02:56:12.000 --> 02:56:16.000]  которая тратит деньги альтернативным способом, а не переводит их Бобу,
[02:56:16.000 --> 02:56:26.000]  должна содержать подпись Боба. Ну и симметрично все.
[02:56:26.000 --> 02:56:36.000]  Ну что, сложилось? А теперь вопрос, что это похоже?
[02:56:36.000 --> 02:56:40.000]  Я сегодня на лекции рассказывал, что все, что мы делаем в Биткои, не похоже.
[02:56:40.000 --> 02:56:48.000]  Не похоже, но параллелится с PBFT. Гворумы в процессорах, в голосах, вращающийся лидер
[02:56:48.000 --> 02:56:56.000]  через лотерею или через модуль, нижняя оценка, правила комита, снапшоты.
[02:56:56.000 --> 02:57:04.000]  В общем, параллелей очень много. Называем случайные слова. Не совсем.
[02:57:04.000 --> 02:57:09.000]  В смысле совсем нет, вообще не то. Это двухфазный комит.
[02:57:09.000 --> 02:57:14.000]  Вот кто-то приходил на лекцию про двухфазный комит и знает про двухфазный комит.
[02:57:14.000 --> 02:57:22.000]  Напомню, в чем там была суть. Мы делали двухфазные блокировки распределенной системе.
[02:57:22.000 --> 02:57:28.000]  Распределенная система означала, что у нас есть большая-большая логическая таблица,
[02:57:28.000 --> 02:57:33.000]  мы делим ее на кусочки, и за каждый кусочек отвечает свой шарт.
[02:57:33.000 --> 02:57:38.000]  И когда мы делаем двухфазные блокировки, то мы должны взять локи на каждом шарде.
[02:57:38.000 --> 02:57:44.000]  Но поскольку клиент может отказывать, мы открываем сессию, берем локи в рамках сессии,
[02:57:44.000 --> 02:57:48.000]  если сессия протухает, то транзакция откатывается на шарде.
[02:57:48.000 --> 02:57:54.000]  И в итоге каждый шарт мог независимо транзакцию либо применить, либо откатить ее.
[02:57:54.000 --> 02:58:00.000]  И нам нужно было сделать автоматный комит, чтобы все шарды согласились, что транзакция применяется.
[02:58:00.000 --> 02:58:04.000]  Для этого у нас был протокол, как назывался, двухфазный комит.
[02:58:04.000 --> 02:58:09.000]  И там был координатор, он на первой фазе
[02:58:20.000 --> 02:58:27.000]  отправлял на все шарды команду Prepare, говорил, пожалуйста, примите решение,
[02:58:27.000 --> 02:58:32.000]  вы с транзакцией согласны или нет. Вот если вы ее хотите откатить, то скажите об этом.
[02:58:32.000 --> 02:58:36.000]  А если готовы накатить ее, то, пожалуйста, не отменяйте больше своего решения.
[02:58:36.000 --> 02:58:41.000]  И если мы получали одобрение от каждого шарда, мой координатор,
[02:58:41.000 --> 02:58:46.000]  то после этого мы отправляли им команду commit.
[02:58:46.000 --> 02:58:50.000]  А если получали хотя бы один отказ, то мы всем отправляли аборт.
[02:58:50.000 --> 02:58:55.000]  Ну и нужно было делать аккуратно, а именно учитывать возможность отказа
[02:58:55.000 --> 02:58:59.000]  или рестарта шардов и координатора. Вот когда мы говорили про спандер,
[02:58:59.000 --> 02:59:03.000]  у нас шард не мог отказать, потому что он отказаустойчивый, это RSM.
[02:59:03.000 --> 02:59:08.000]  Но он мог перезагрузиться, то есть поменять лидера, тогда у него сгорало состояние.
[02:59:08.000 --> 02:59:15.000]  Поэтому на фазе Prepare мы что-то сохраняли надежно через RSM, через реплицированный лог.
[02:59:15.000 --> 02:59:20.000]  Потом сам координатор мог отказать, поэтому мы делали координатором одного из шардов.
[02:59:20.000 --> 02:59:27.000]  И когда он получал решение каждого шарда, он тоже его сохранил на диске, чтобы не забыть.
[02:59:27.000 --> 02:59:33.000]  Здесь то же самое. Вот у нас есть два участника, у них есть координатор.
[02:59:33.000 --> 02:59:38.000]  Это Алиса. Что такое Prepare?
[02:59:38.000 --> 02:59:42.000]  У нас есть два шарда, очевидно, два блокчейна.
[02:59:42.000 --> 02:59:47.000]  Что такое Prepare? Это фиксация своих намерений. Я согласен перевести деньги.
[02:59:47.000 --> 02:59:50.000]  Это публикация блокчейн транзакций вот такой вот.
[02:59:50.000 --> 02:59:54.000]  Если она не опубликована, то истекает тайм-аут, транзакция отменяется по тайм-ауту.
[02:59:54.000 --> 02:59:59.000]  Но если два участника опубликовали свои транзакции, то есть до этого дошло,
[02:59:59.000 --> 03:00:04.000]  то протокол вошел в такую стадию, где все, транзакция может совершиться.
[03:00:04.000 --> 03:00:07.000]  И просто на все воля координатора Алисы.
[03:00:07.000 --> 03:00:14.000]  Если она принимает решение закомититься, то есть опубликует транзакцию секретом, то все, протокол докатывается.
[03:00:14.000 --> 03:00:21.000]  Если она вдруг решает откатить транзакцию, то она не публикует секрет, и транзакция по тайм-ауту откатывается.
[03:00:21.000 --> 03:00:25.000]  Ну, это почти то же самое. В некоторых местах все-таки немного по-другому.
[03:00:25.000 --> 03:00:28.000]  Но суть абсолютно такая же.
[03:00:28.000 --> 03:00:32.000]  У нас есть некоторая предварительная работа. Мы посылаем транзакции, подписываем.
[03:00:32.000 --> 03:00:34.000]  Может быть, там уже не сошлось что-то.
[03:00:34.000 --> 03:00:37.000]  Но если сошлось, и мы опубликовали две транзакции в двух блокчейнах,
[03:00:37.000 --> 03:00:42.000]  то после этого мы можем сделать вот этот комит, опубликовать такую транзакцию.
[03:00:42.000 --> 03:00:49.000]  Конечно же, никто в мире блокчейнов не называет это двухфазным комитом,
[03:00:49.000 --> 03:00:52.000]  потому что они про эту теорию ничего не знают и игнорируют ее.
[03:00:52.000 --> 03:00:55.000]  Но смысл опять такой же.
[03:00:55.000 --> 03:01:02.000]  И этот протокол можно обобщить, на самом деле, не на двух участников, а на большие цепочки.
[03:01:03.000 --> 03:01:10.000]  И доказать строго, что выход из протокола в любом месте не может повышать,
[03:01:10.000 --> 03:01:14.000]  не может никому навредить и не может принести вам больше выигрыш.
[03:01:14.000 --> 03:01:17.000]  Ну вот, двухфазный комит.
[03:01:17.000 --> 03:01:20.000]  А теперь очень забавный нюанс.
[03:01:20.000 --> 03:01:23.000]  По поводу технического воплощения этого протокола.
[03:01:23.000 --> 03:01:27.000]  Смотрите, мы требуем от разных блокчейнов, чтобы они умели две вещи.
[03:01:27.000 --> 03:01:30.000]  Чтобы они умели хэшлоки и таймлоки.
[03:01:30.000 --> 03:01:34.000]  Вот кажется, что и то и другое настолько разумно и естественно,
[03:01:34.000 --> 03:01:37.000]  что было бы странно строить блокчейн, которого бы этого не умел.
[03:01:37.000 --> 03:01:44.000]  То есть это такое ограничение, можно было бы ожидать, что любой блокчейн такие механизмы имеет.
[03:01:44.000 --> 03:01:51.000]  Но просто хотя бы для интероперабельности между разными блокчейнами.
[03:01:51.000 --> 03:01:57.000]  То есть любой блокчейн не фиксирует семантику транзакций, не фиксирует правила валидации,
[03:01:57.000 --> 03:02:02.000]  он позволяет вам писать какие-то свои программы и дает вам такие базовые примитивы.
[03:02:02.000 --> 03:02:06.000]  Ну этот тайм-аут вам нужен для отказа устойчивости, понятно.
[03:02:06.000 --> 03:02:13.000]  Хэшлоки вам нужны просто потому, что это такой очевидный криптографический инструмент хэш-функции.
[03:02:13.000 --> 03:02:19.000]  Но у нас здесь есть еще одно забавное ограничение, которое может быть неочевидным, без которого все ломается.
[03:02:19.000 --> 03:02:25.000]  Вот представьте себе, что у вас хэш-функции в блокчейнах разные.
[03:02:25.000 --> 03:02:30.000]  Что это поломает? В принципе же что, у Алисы есть секрет.
[03:02:30.000 --> 03:02:38.000]  Она публикует вот такую транзакцию, а Боб не может публиковать такую же транзакцию, потому что хэш-функция у него другая.
[03:02:38.000 --> 03:02:44.000]  Но в конце концов, он же секрет это и не знал.
[03:02:44.000 --> 03:02:50.000]  Может ли ему Алиса просто отправить хэш 2 с?
[03:02:50.000 --> 03:02:54.000]  Нет.
[03:02:54.000 --> 03:02:56.000]  Почему не может?
[03:02:56.000 --> 03:02:58.000]  Мы не можем подтвердить, что это реальный хэш.
[03:02:58.000 --> 03:03:06.000]  Ну вот да, Боб все держится здесь на таком предположении, что если секрет будет публикован в этом блокчейне,
[03:03:06.000 --> 03:03:13.000]  то поскольку хэш-функция одна и та же, хэш один и тот же, то и Боб сможет применить, написать такую же транзакцию, чтобы тратить этот выход.
[03:03:13.000 --> 03:03:17.000]  Если хэш-функции будут разными, то как Алису убедить Боба?
[03:03:17.000 --> 03:03:27.000]  То есть она таким способом уже не может убедить Боба, что публикация секрета для этого хэша даст возможность Бобу потратить этот выход для другого хэша.
[03:03:27.000 --> 03:03:31.000]  Так что мы еще от этого зависим.
[03:03:36.000 --> 03:03:39.000]  Ну вот, протокол готов.
[03:03:39.000 --> 03:03:41.000]  Вот видите, мы здесь можем...
[03:03:41.000 --> 03:03:48.000]  Ну вот в таких случаях приходится писать более сложные правила валидации транзакций,
[03:03:48.000 --> 03:03:53.000]  и Ethereum дает вам возможность писать совершенно произвольные.
[03:03:58.000 --> 03:04:00.000]  Ну что ж, я немного утомился.
[03:04:00.000 --> 03:04:02.000]  Есть у нас вопросы?
[03:04:10.000 --> 03:04:14.000]  Так нет, криптографические инструменты там вполне себе есть.
[03:04:14.000 --> 03:04:17.000]  Ты просто не можешь циклы писать, может быть тебе не нужно циклы писать.
[03:04:17.000 --> 03:04:20.000]  Биткоин говорит, что ты обойдешься без циклов.
[03:04:20.000 --> 03:04:25.000]  В эфире там все сложно, там можно странные вещи делать.
[03:04:25.000 --> 03:04:33.000]  Там есть вот эти смарт-контракты, то есть такие грубо говоря сервисы, в которые ты приходишь и дергаешь методы.
[03:04:33.000 --> 03:04:38.000]  И там можно писать все что угодно, огромное количество разных приложений, условно говоря.
[03:04:38.000 --> 03:04:42.000]  Там есть, кажется, такое безумное, называется король эфира, что ли.
[03:04:42.000 --> 03:04:44.000]  Знаете про него?
[03:04:44.000 --> 03:04:48.000]  Вот там есть такой виртуальный трон, на который можно залезть, заплатить деньги.
[03:04:48.000 --> 03:04:52.000]  Если ты хочешь их вернуть, нужно чтобы кто-то сел выше тебя, то есть заплатил больше,
[03:04:52.000 --> 03:04:56.000]  и тебе разница вернется, но ты перестанешь уже быть главным на этом.
[03:04:56.000 --> 03:04:59.000]  Ты уже не на троне.
[03:04:59.000 --> 03:05:03.000]  А если никто не захочет, то у тебя проблемы некоторые.
[03:05:04.000 --> 03:05:07.000]  Потому что можешь.
[03:05:07.000 --> 03:05:12.000]  Это просто пример того, что можно написать абсолютно любую логику, можно что-то полезное делать, конечно же.
[03:05:12.000 --> 03:05:14.000]  Ну и много полезного.
[03:05:14.000 --> 03:05:19.000]  Я к тому, что язык позволяет делать, а в биткоине ты так делать не можешь, но, наверное, обойдешься.
[03:05:23.000 --> 03:05:27.000]  Если ты хочешь какие-то правила валидации разумно писать, то у тебя есть инструменты для этого.
[03:05:27.000 --> 03:05:30.000]  Там половина инструкшн с этой про криптографию.
[03:05:30.000 --> 03:05:34.000]  Если эфириум — это такой компьютер настоящий, то это скорее калькулятор.
[03:05:34.000 --> 03:05:37.000]  То есть ты на нем можешь гораздо меньше делать.
[03:05:37.000 --> 03:05:43.000]  Но инструкшн с этой калькулятором криптографический, потому что, понятно, мы не можем...
[03:05:43.000 --> 03:05:47.000]  Вам бы там много раз говорили, у нас клиенты тоже византийские, не составляют странные транзакции,
[03:05:47.000 --> 03:05:50.000]  делают странные вещи, и только криптографией можно от них защититься.
[03:05:50.000 --> 03:06:00.000]  Что еще?
[03:06:00.000 --> 03:06:03.000]  Ну давайте, у нас осталось, не знаю, сколько у нас осталось.
[03:06:03.000 --> 03:06:05.000]  Сколько у меня сил осталось?
[03:06:05.000 --> 03:06:08.000]  Подумаем, что в следующий раз можно сделать.
[03:06:08.000 --> 03:06:11.000]  Вот можно, я хочу поговорить про алгоритм Hot Stuff,
[03:06:11.000 --> 03:06:19.000]  про то, как можно идеи из биткоина и PBFT объединить в некоторый более оптимальный алгоритм.
[03:06:19.000 --> 03:06:25.000]  Потому что PBFT совершает очень много раундов,
[03:06:25.000 --> 03:06:32.000]  и, очевидно, их можно было бы как-то схлопнуть, сделать меньше фаз на пути к комиту.
[03:06:32.000 --> 03:06:36.000]  И для этого можно использовать хэшпоинтеры.
[03:06:36.000 --> 03:06:40.000]  Я могу что-то рассказать про альтернативные блокчейны.
[03:06:40.000 --> 03:06:44.000]  Но там, конечно, деталей уже настолько много и настолько сложно, что мы запутаемся.
[03:06:44.000 --> 03:06:47.000]  Может быть, не запутаемся, не знаю.
[03:06:47.000 --> 03:06:51.000]  Есть история, про которую совсем не рассказал сегодня, это альтернатива Proof of Work,
[03:06:51.000 --> 03:06:56.000]  потому что очевидно, что Proof of Work — это не самое оптимальное, ну, в смысле.
[03:06:56.000 --> 03:07:00.000]  Кажется, на самом деле, что это самое лучшее, что можно придумать,
[03:07:00.000 --> 03:07:04.000]  потому что никакая альтернатива, она пока сильно не...
[03:07:04.000 --> 03:07:07.000]  Нашлось никакой хорошей альтернативы.
[03:07:07.000 --> 03:07:11.000]  Вот Ethereum, он до сих пор не может перейти на альтернативный протокол.
[03:07:11.000 --> 03:07:15.000]  Но проблема Proof of Work в том, что мы тратим огромное количество электрической энергии.
[03:07:15.000 --> 03:07:19.000]  Мы употребляем... Bitcoin употребляет его целая страна,
[03:07:19.000 --> 03:07:22.000]  оставляет огромный экологический след.
[03:07:22.000 --> 03:07:26.000]  Поэтому хочется использовать протокол, который также будет децентрализован,
[03:07:26.000 --> 03:07:29.000]  но которому не требуется просто жечь электричества.
[03:07:29.000 --> 03:07:33.000]  И тут, с одной стороны, есть разные альтернативные идеи.
[03:07:33.000 --> 03:07:36.000]  Ну, например, предлагает блок тот, у кого много денег,
[03:07:36.000 --> 03:07:39.000]  потому что он иначе рискует.
[03:07:39.000 --> 03:07:42.000]  Он не хочет подвергать свои активы риску.
[03:07:42.000 --> 03:07:48.000]  Он поэтому не может скомплементировать сам блокчейн, саму криптовалюту.
[03:07:48.000 --> 03:07:53.000]  Есть способы, где вы доказываете, что вы не потратили не процессорное время,
[03:07:53.000 --> 03:07:57.000]  а вы просто храните распределенно какие-то большие файлы, кусочки больших файлов.
[03:07:57.000 --> 03:08:01.000]  Ну, короче, можно самые разные сертификаты придумывать,
[03:08:01.000 --> 03:08:05.000]  но проблема примерно одинаковая.
[03:08:05.000 --> 03:08:10.000]  Что можно каким-то образом все это объюзить,
[03:08:10.000 --> 03:08:14.000]  ну и как в Биткоине, в конце концов, построить специальное оборудование
[03:08:14.000 --> 03:08:18.000]  или что-то сделать специально, что повысит частоту вашего выигрыша.
[03:08:18.000 --> 03:08:22.000]  Вот кажется, что никакой отличной идеи, которая бы решила эту проблему,
[03:08:22.000 --> 03:08:25.000]  до сих пор не найдена.
[03:08:25.000 --> 03:08:29.000]  То есть человечество, эгоистичные люди, которые хотят максимизировать выигрыши,
[03:08:29.000 --> 03:08:32.000]  все равно сведут все к централизации.
[03:08:32.000 --> 03:08:36.000]  То есть такие наивные соображения, что вы не можете поменять хэш-функцию в Биткоине.
[03:08:36.000 --> 03:08:39.000]  То есть вы можете поменять хэш-функцию в Биткоине,
[03:08:39.000 --> 03:08:42.000]  но в Биткоине вы не можете уже, потому что никто не даст,
[03:08:42.000 --> 03:08:44.000]  потому что слишком большие деньги вложены в оборудование.
[03:08:44.000 --> 03:08:48.000]  Вы можете сделать новый altcoin, но тогда просто там построить другое оборудование,
[03:08:48.000 --> 03:08:51.000]  которое будет другую хэш-функцию быстро считать.
[03:08:51.000 --> 03:08:54.000]  И вот то есть никакого такого наивного способа победить это нет.
[03:08:54.000 --> 03:08:59.000]  Люди с этим борются, ну и оптимального решения пока не найдено,
[03:08:59.000 --> 03:09:04.000]  ну и эфириум пытается найти оптимальное решение, в смысле перейти на другое, может быть я про него расскажу.
[03:09:04.000 --> 03:09:14.000]  Но в следующий раз я точно расскажу про алгоритм hotstuff, который как раз из биткоина берет идеи,
[03:09:14.000 --> 03:09:22.000]  но при этом он все еще работает в статической конфигурации, потому что, ну как мы видим,
[03:09:22.000 --> 03:09:26.000]  на бумаге биткоин не централизованная система, на практике довольно централизованная,
[03:09:26.000 --> 03:09:33.000]  поэтому может быть не стоит так цепляться за децентрализованность, за permissionless свойства,
[03:09:33.000 --> 03:09:38.000]  а можно просто сделать более оптимальный алгоритм, который будет работать на сотнях узлов,
[03:09:38.000 --> 03:09:44.000]  и этого будет достаточно. Ну так или иначе два мира, все равно они будут жить параллельно,
[03:09:44.000 --> 03:09:52.000]  вот может быть мы какую-то инточку между ними проведем.
[03:09:52.000 --> 03:10:01.000]  Ну что, если вопросы есть, то давайте я на них попытаюсь ответить.
[03:10:01.000 --> 03:10:06.000]  А, вот что мы не... ну раз уж я здесь, просто это нарисовано на доске, я вспомнил,
[03:10:06.000 --> 03:10:13.000]  почему мы адресуем транзакции хэшами? Последние умственные усилия на сегодня.
[03:10:13.000 --> 03:10:20.000]  Почему это работает? Что? Нет, в смысле, почему так можно делать?
[03:10:20.000 --> 03:10:24.000]  Ну ты не знай, я делаю примерно одно и то же, я получаю деньги от Арисы
[03:10:24.000 --> 03:10:30.000]  и трачу их на гамбургер, делаю это каждый день. У меня какие-то транзакции одинаковые,
[03:10:30.000 --> 03:10:37.000]  у них одинаковые хэши, это все не работает. Почему я могу адресовать транзакцию хэшом?
[03:10:37.000 --> 03:10:54.000]  А почему он разный? Что? Что? Не понял тебя. Почему здесь форки?
[03:10:54.000 --> 03:11:00.000]  Форки это репликация, а транзакция, я говорю про граф транзакций,
[03:11:00.000 --> 03:11:10.000]  он с репликацией слабо связан, ну по крайней мере в первом приближении.
[03:11:10.000 --> 03:11:26.000]  Сейчас в блоке. Ты понял мой вопрос, да? Отлично.
[03:11:26.000 --> 03:11:30.000]  Она хорошо перемешивает, просто если мы хэшируем одно и то же, то мы хорошо не перемешиваем,
[03:11:30.000 --> 03:11:36.000]  мы получим одно и то же. Ну еще раз, у нас транзакции по смыслу похожи.
[03:11:36.000 --> 03:11:52.000]  Что? Не понимаю о чем ты. Таймстэмп где есть? Таймстэмп в блоке есть, у нас транзакции.
[03:11:52.000 --> 03:11:57.000]  Ну еще раз, вот есть граф транзакций, и он просто выложен в блокчейн.
[03:11:57.000 --> 03:12:03.000]  Я говорю сейчас про транзакции, вот этот рисунок он блокчейна не учитывал никак.
[03:12:03.000 --> 03:12:09.000]  Я сказал, что мы рисуем транзакции хэшами. Не совсем понятно, почему не бывает двух транзакций,
[03:12:09.000 --> 03:12:17.000]  которые просто похожи друг на друга, и у них будут одинаковые хэши.
[03:12:17.000 --> 03:12:24.000]  Я еще раз говорю, каждый день я в одно и то же время покупаю себе BigMac.
[03:12:24.000 --> 03:12:32.000]  В одном и том же месте деньги берут из одного и того же источника.
[03:12:32.000 --> 03:12:42.000]  Это не совсем правда, тут уже начали говорить, как на самом деле, но просто не договорили.
[03:12:42.000 --> 03:12:47.000]  Где различия-то берутся?
[03:12:47.000 --> 03:12:55.000]  Ну смотри, чтобы потратить деньги, любые, нужно, чтобы они где-то появились, родились.
[03:12:55.000 --> 03:13:04.000]  И если мы отправляем деньги кому-то, то мы можем проследить историю этих монет до самого-самого корня.
[03:13:04.000 --> 03:13:09.000]  И разумеется, каждая монета тратится один раз.
[03:13:09.000 --> 03:13:14.000]  В смысле, мы не можем один и тот же выход дважды потратить.
[03:13:14.000 --> 03:13:18.000]  Так вот, уникальность берется откуда? Отсюда.
[03:13:18.000 --> 03:13:23.000]  Потому что вот эти транзакции, они довольно специальные, вот они уникальные.
[03:13:23.000 --> 03:13:28.000]  Если они не уникальные, то тогда можно легко построить...
[03:13:28.000 --> 03:13:32.000]  Вот представьте, что у вас есть две транзакции, которые...
[03:13:32.000 --> 03:13:37.000]  Алиса дважды выиграла 6,25 биткоинов, сгенерировала два блока.
[03:13:37.000 --> 03:13:42.000]  Потом она дважды перевела деньги Боба. Две одинаковые транзакции, составляются на две одинаковые транзакции.
[03:13:42.000 --> 03:13:44.000]  Хэши везде совпадают.
[03:13:44.000 --> 03:13:50.000]  Хэши не совпадают, потому что эти транзакции все же будут уникальными, несмотря на то, что они приводят одни и те же деньги одному и тому же участнику,
[03:13:50.000 --> 03:13:57.000]  потому что в них будет написан, я уже не помню каким способом, то ли хэш, то ли высота блока.
[03:13:57.000 --> 03:14:02.000]  И не бывает двух транзакций, которые чеконят монеты, с одинаковой высотой в блокчейне.
[03:14:02.000 --> 03:14:06.000]  Ну, в дереве могут быть, а в блокчейне не могут быть.
[03:14:06.000 --> 03:14:09.000]  Поэтому дальше там все рандомизируется.
[03:14:09.000 --> 03:14:14.000]  Ну, понятно, что может быть какая-то корридия супер-редкая, но это уже мелочь.
[03:14:14.000 --> 03:14:17.000]  Так что страшного-то?
[03:14:17.000 --> 03:14:21.000]  Ну, будет корридия. Почему это может привести?
[03:14:21.000 --> 03:14:32.000]  Появляем, мы присылаемся на транзакцию, происходит коллизия, мы присылаемся на транзакцию, которая была значительно раньше.
[03:14:32.000 --> 03:14:36.000]  Но мы же не можем чужие деньги потратить.
[03:14:36.000 --> 03:14:40.000]  Ну, что плохого может произойти?
[03:14:40.000 --> 03:14:43.000]  Не знаю, можно подумать.
[03:14:43.000 --> 03:14:49.000]  Ну, вообще-то мы коллизию искусственно строить вообще не можем, кэш-функции.
[03:14:49.000 --> 03:14:55.000]  Но вопрос про то, что будет ли коллизия все-таки произойдет против нашей воли?
[03:14:55.000 --> 03:14:58.000]  Мы в это не очень верим, но вдруг так случилось.
[03:14:58.000 --> 03:15:21.000]  Ну, я не знаю на самом деле ответа, потому что я не представляю, что будет, если хэш все-таки совпадет,
[03:15:21.000 --> 03:15:35.000]  если есть две транзакции, в одной лежит на выходе миллиард долларов, я не могу их забрать, потому что не понятно, что будет в этом случае.
[03:15:35.000 --> 03:15:38.000]  То есть понятно, что я не смогу прицепиться к чужой транзакции, потому что там валидация не пройдет.
[03:15:38.000 --> 03:15:43.000]  Но если вдруг есть две транзакции, одна не валидируется, а другая валидируется,
[03:15:43.000 --> 03:15:50.000]  то есть я не знаю есть ли детерминированные правила, которые говорят, что, окей, одна тратится.
[03:15:50.000 --> 03:15:53.000]  Ладно, нужно разобраться.
[03:16:00.000 --> 03:16:03.000]  Ну что, на сегодня тогда все. Спасибо вам.
