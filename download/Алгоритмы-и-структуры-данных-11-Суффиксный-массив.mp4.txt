[00:00.000 --> 00:08.400]  Ну давайте вспомним, на чем мы вообще остановились, о чем там у нас вообще.
[00:08.400 --> 00:17.040]  То есть мы помним, чем мы вообще занимаемся. Мы ищем подстроку в строке. Ищем соответственно
[00:17.040 --> 00:22.000]  подстроку в строке, хотим найти все ее вхождения, но при этом затратить единицы дополнительной
[00:22.000 --> 00:29.240]  памяти. В принципе алгоритма мы напоминать не будем, но пожалуй такие леммочки все-таки
[00:29.240 --> 00:35.400]  основные напомним. Так, ну, так, ну, во-первых, давайте помните вышедшее префиксный период.
[00:35.400 --> 00:46.000]  Ну, это который встречается что-то там. Ну, точнее так, давайте начнем вот с чего. Давайте,
[00:46.000 --> 00:54.440]  давайте напомним. Определение значит строка там допустим с базовая, если что.
[00:54.440 --> 01:14.840]  На что? Нет, тут все проще. Строка с базовая,
[01:14.840 --> 01:20.040]  если ее нельзя представить в виде конкатинации больше чем одной одинаковой строки.
[01:20.040 --> 01:29.800]  А вот, ну, вот, то есть также у нас еще было определение, что с у нас допустим
[01:29.800 --> 01:42.480]  L периодично. Давайте уж так напомним, да, если там допустим S от 1. Вот я, ну, по-разному это
[01:42.480 --> 01:53.880]  можно писать, но я вот могу написать так. Вот, можно и вот таким образом определение написать.
[01:53.880 --> 02:04.400]  Да, мы писали раньше по-разному, мы говорили, что любые два символа на расстоянии L в строке
[02:04.400 --> 02:11.680]  S совпадают, но легко убедиться, что это ровно то же самое. Вот, но это, конечно, такие достаточно
[02:11.680 --> 02:18.880]  стандартные определения. То есть самое нестандартное, но при этом ключевое, это мы говорим, что там допустим
[02:18.880 --> 02:37.160]  T префиксный период S и вот тут уже принципиально. Префиксный период S, если T в степени K, значит
[02:37.160 --> 02:50.880]  префикс S и T базовая. Вот, да, напоминаем, что у нас есть мистическая константа K равно 4.
[02:50.880 --> 03:15.280]  Да, префикс, да, важно написать префикс S. Ну вот, ну и в принципе, да, то есть все у нас, в общем-то,
[03:15.280 --> 03:21.880]  плесало вокруг префиксного периода, вокруг этого понятия, и мы вообще всячески хотели минимизировать
[03:21.880 --> 03:30.680]  понятие префиксный период. Вот, ну у нас там была, нет, ну вы говорите, может я, кстати, зря тратю время
[03:30.680 --> 03:36.520]  на то, чтобы что-то выписывать или не зря? Потому что в принципе я пишу то, что по идее у вас и так есть.
[03:36.520 --> 03:43.200]  Вот, ну кратенько давайте тогда свяжем, что у нас есть с вами лемма о периодичности,
[03:43.200 --> 04:10.680]  которая говорит так, что если S, P периодично, Q периодично, значит и модуль S больше либо равно
[04:10.680 --> 04:26.680]  P плюс Q, то тогда мы знаем, что S, GCD от PQ периодично. Вот, ну у нас там было более сильное утверждение,
[04:26.680 --> 04:33.560]  там модул S больше либо равно P плюс Q минус GCD, но нам это сейчас не пригодится. Там повторять
[04:33.560 --> 04:41.960]  старые доказательства сейчас не будем. Вот, то есть, ну это такая, ну вот это в принципе общая лемма,
[04:41.960 --> 04:50.720]  которую вообще полезно знать. Вот, есть лемма, ну вот, но есть вот две леммы, которые мы уже
[04:50.720 --> 04:56.160]  пользовались для того, чтобы даже построить сам алгоритм в предположении одной те реммы. Так,
[04:56.160 --> 05:06.040]  но для этого надо воспомнить еще одно понятие мистическое. Напомните-ка мне,
[05:06.040 --> 05:23.720]  пожалуйста, что такое shift с индексом S от Q. Наименьший период. Наименьший период? Ну в принципе да,
[05:23.720 --> 05:36.960]  то есть это минимальное такое L такое что? Минимальный период кого? Это какая-то чиселка
[05:36.960 --> 05:58.680]  от одного до модул S. Да, совершенно верно. Да, оказывается, это действительно у нас очень
[05:58.680 --> 06:16.840]  удобно. Так вот, лемма один. Лемма один у нас говорила следующее, что если shift с индексом S
[06:16.840 --> 06:35.880]  от Q меньше либо равен чем Q делить на K, вот, то S соответственно от 1 boom boom shift с индексом S
[06:35.880 --> 06:49.480]  от Q. Это что? Как это да? Чекакашный вопрос. Завершите лему двумя словами.
[06:49.480 --> 07:02.600]  Конечно, конечно. А какими еще тут двумя словами можно закончить лему? А так да,
[07:02.600 --> 07:22.200]  это у нас лемма один. Так вот, то есть в принципе действительно оказывается очень удобно. Ну вот,
[07:22.200 --> 07:29.640]  ну и дальше говорим лемма два. Лемма два у нас говорит, ну тут у нее пострашнее были условия.
[07:29.640 --> 07:48.040]  Если оказалось, что S1 boom boom L это префиксный период, вот, то оказывалось эквивалентное,
[07:48.040 --> 07:57.280]  то есть вот это вот условие, что L равно вот этому шифту, и поэтому этот шифт еще и меньше либо
[07:57.280 --> 08:05.880]  равно чем Q делить на K, и это верно тогда и только тогда, когда K умножить на L оказывается меньше
[08:05.880 --> 08:22.720]  либо равно Q, меньше либо равно reach с индексом S от Q. Да, то есть можно сказать, что для любого Q вот это верно.
[08:22.720 --> 08:37.840]  Вот, были такие леммы, помните? Вот, это в принципе мы это доказывали и этим даже пользуемся,
[08:37.840 --> 08:43.720]  вот, потому что у нас есть там действительно какой-то, действительно есть какая-то мистическая
[08:43.720 --> 08:51.200]  модификация там методок, но там урис аппарата, но вот, который там позволяет как-то аккуратно
[08:51.200 --> 09:03.600]  насчитывать вот этот reach. О, кстати, не вспомнили, а помните, что такое reach? Насколько сейчас максимальный L периодичный префикс?
[09:03.600 --> 09:12.000]  Да, да, да, вот я давайте вот здесь напишу. Ну да, то есть коротко можно определение написать так,
[09:12.000 --> 09:22.040]  reach S от L просто равен, на самом деле, L плюс Z функция в точке L плюс 1. Да, мы писали тогда
[09:22.040 --> 09:29.040]  другое определение, мы писали, что reach это там максимальный префикс статист, который является L периодичным.
[09:29.040 --> 09:51.120]  А мы не можем L 1 написать в обе стороны? В обе стороны. Ага, да, да, да. Ну, почему ловушка-то сразу? Наоборот, может, хорошо.
[09:51.120 --> 10:00.120]  Ну, мы пока толком и не начали, на самом деле. Мы пока это воспоминаем. Вот, например, сейчас вот
[10:00.120 --> 10:05.440]  действительно Никита задал интересный вопрос, а нельзя ли L 1 написать в обратную сторону? Вот,
[10:05.440 --> 10:14.000]  допустим, жил был у какой-то, жил был у строки S префиксный период. То есть, да, понятно, вот,
[10:14.000 --> 10:24.440]  точнее так, получается, жило было какое-нибудь Q такое, что shift S оказался префиксным периодом строки S.
[10:24.440 --> 10:32.280]  Да, ну, тут, видимо, подразумевается, что префиксный период строки S, конечно. Вот,
[10:32.280 --> 10:43.280]  внимание, вопрос, следует ли этого, что shift S от Q меньше либо равен Q делить на K? Вот, давайте подумаем.
[10:43.280 --> 10:55.520]  Ну, если это префиксный период. Так, и что? Ага, куда?
[11:04.520 --> 11:12.720]  Так, давайте, давайте, давайте. Ну, да. Ну, так,
[11:12.800 --> 11:17.880]  его четыре копии. Да, совершенно верно. Да, то есть, на самом деле, то есть, конечно,
[11:17.880 --> 11:25.600]  Лема в таком, в обратном виде утверждает, что если у какого-то Q есть, для какого-то Q есть shift,
[11:25.600 --> 11:32.560]  который является префиксным периодом, то четыре копии этого shift обязаны помещаться в Q. Но это,
[11:32.560 --> 11:36.560]  конечно, вовсе не так. То есть, мы просто берем префиксный период и в качестве Q берем длину
[11:36.560 --> 11:45.760]  этого префиксного периода, плюс один, например. Да, поэтому нет. Вот, но, тем не менее, вот,
[11:45.760 --> 11:53.400]  то есть, в обратную сторону, что если shift умещается, то он все-таки действительно префиксным
[11:53.400 --> 12:04.280]  периодом, он, естественно, является. Вот, так, это у нас такая штука была. Да, поэтому, я говорю,
[12:04.280 --> 12:11.640]  мы пока воспоминаем. Да, потом была вторая, да, а потом прошло еще две, а потом прошло еще две,
[12:11.640 --> 12:20.480]  если не три недели. То есть, там прошло две недели, то есть, более-то, вот тут вообще там, ну да-да-да,
[12:20.480 --> 12:27.360]  нет, все еще ходит туда, тут еще кто-то вместо меня приходил. Вот, так, соответственно, это
[12:27.360 --> 12:35.200]  отдельная песня. Вот, так что, поэтому придется воспомнить. Ну, на самом деле, остановились мы,
[12:35.200 --> 12:40.800]  в общем-то, на, то есть, мы пытаемся, то есть, остановились мы на том, что мы пытаемся доказать
[12:40.800 --> 12:56.640]  мистическую теорему 3, ладно, не теорему 3, а теорему о декомпозиции. Что это за теорема? Она говорит
[12:56.640 --> 13:20.080]  нам, что любую строку P можно порисонуть на строчке P равно UV, где в некотором смысле, значит,
[13:20.080 --> 13:47.880]  у В не более чем один префиксный период. Ну вот, и У, ну вот, и длина У равно О от шифта этого В.
[13:50.080 --> 13:57.000]  Вот. Мы пытаемся доказать такую теорему, потому что, если мы, то есть, мы пытаемся доказать не
[13:57.000 --> 14:02.880]  просто, что такая теорема верна, а еще взять строку P и распилить ее на две такие части, то есть,
[14:02.880 --> 14:10.480]  явно в виде найти эти все УВ. А еще и совсем в идеале, конечно, УВ неплохо было найти и,
[14:10.480 --> 14:18.800]  ну вот, соответственно, и какой-нибудь шифт от В, и, ну вот, там, желательно найти шифт от В,
[14:18.800 --> 14:29.120]  и, конечно, ну вот, и, собственно, этот префиксный период. Вот. А вот, кстати,
[14:29.120 --> 14:36.440]  а давайте действительно на эту тему подумаем. А вот, допустим, нам дана строковая, нам известно,
[14:36.440 --> 14:43.880]  что у нее не более чем один префиксный период. Вот задачка. Найти этот префиксный период.
[14:43.880 --> 14:58.560]  Понятно. Желательно. Вот как его найти? В любом случае, все равно пригодится,
[14:58.560 --> 15:08.360]  поэтому давайте попробуем повключаться тут. Вот задача. Как найти, или даже по факту это будет
[15:08.360 --> 15:20.720]  в общем случае, как по заданной строке В найти минимальный префиксный период? Соответственно В.
[15:20.720 --> 15:39.640]  Так, что LMA-1 говорит? Ну как? Ну что значит нужна? На самом деле она может сильно пригодиться в
[15:39.640 --> 15:46.800]  доказательстве, но как минимум заметим следующее, что есть подозрение, что минимальный, скажи так.
[15:46.800 --> 15:55.200]  Он автоматически базовый будет. Нет, подождите. Ну как сказать? Ну, скажем так. Ну да, можно,
[15:55.200 --> 16:01.880]  конечно, заметить, что наша бы задача найти минимальную строку Т такую, что Т в степени К
[16:01.880 --> 16:07.800]  префикс С. Утверждение, да, утверждение. Это Т, если такое существует, оно заведомо базовое.
[16:07.800 --> 16:26.720]  Это мы понимаем почему, да? Понимаем, да? Вот. Что у нас еще есть? Так, к сожалению, так, напоминаю,
[16:26.720 --> 16:30.640]  у нас фишка, просто префиксы за эту функцию мы насчитать не можем, потому что мы живем в мире,
[16:30.640 --> 16:36.360]  где до памяти должна быть вот единица, поэтому мы тут вообще страдаем. Так-то в общем-то задача
[16:36.360 --> 16:40.520]  поиски подстроки в страте с до памяти у нас уже давно решена и сильно более простыми средствами.
[16:40.520 --> 16:50.440]  Ну, во-первых, у нас еще сувмасс есть. Так, но это тоже, но это будет тоже просто достаточно,
[16:50.440 --> 16:57.640]  но после этого точно. Так, но давайте думать, как же это вообще можно сделать? Но для этого мы
[16:57.640 --> 17:05.360]  вспомним, что у нас есть вообще, давайте вспомним, у нас был мистический рыжий механизм. Вот вы можете
[17:05.360 --> 17:11.560]  этот старый конспект поднять и вспомнить, что у нас основу даже алгоритма шел какой-то вот
[17:11.560 --> 17:19.360]  мистический механизм. Ну вот, то есть там механизм, что у нас была какая-то, значит, то есть какая-то
[17:19.360 --> 17:32.480]  пара PQ, которая была равна там изначально 1, 0, да? Ну вот, и дальше там механизм мог идти как? Ну,
[17:32.480 --> 17:41.440]  давайте вспомним там, скажем, ваил, там, ну, допустим, я не знаю, P там меньше, чем модулес,
[17:41.440 --> 17:51.200]  там у нас алгоритм звучал как-то так. То есть мы поддерживали, что такое PQ? Ну,
[17:51.200 --> 18:02.800]  то есть инвариант говорил так, что S от P плюс 1, пум-пум, там, P плюс Q равно чему? Ну, когда мы искали
[18:02.800 --> 18:11.280]  под строку P в строке S, то он должен был быть равен там что-то типа префиксу 1, пум-пум, Q. Помните,
[18:11.280 --> 18:19.040]  да? И мы, в общем-то, это Q, но это Q мы вот всем или иным способом пытались подкрутить, то есть там
[18:19.040 --> 18:28.720]  в данном случае там ваил оказывалось там P плюс Q плюс 1, там, значит, меньше либо равно, видимо,
[18:28.720 --> 18:35.720]  там, модуль S, там, ну и, видимо, надо еще, в данном случае придется еще сказать, что Q плюс 1 меньше
[18:35.720 --> 18:45.680]  либо равно модуль P, там, and-and что-то еще. А что еще было? А еще было, ну и, соответственно,
[18:45.680 --> 18:53.800]  если выяснилось, что не просто там, а выясняется, что PQ плюс 1 равно S от P плюс Q плюс 1, ну, значит,
[18:53.800 --> 19:03.440]  мы делаем плюс-плюс Q, вот. То есть мы вот так вот как-то идем, то есть поддерживаем такое минимальное Q,
[19:03.440 --> 19:11.160]  и там, ну, где-то говорим, что если оказалось, что там Q равно равно модуль P, то как бы пум-пум-пум типа
[19:11.160 --> 19:20.720]  вхождения, вхождение идентифицировано, да. А потом мы говорим, что PQ неожиданно превращается в
[19:20.720 --> 19:29.400]  P-Q-. И это был такой мета-алгоритм, да. То есть главное, чтобы вот, то есть, в принципе,
[19:29.400 --> 19:38.000]  все решает вот эта волшебная функция. Ну, давайте воспомним, да, что, ну вот, но теперь давайте,
[19:38.000 --> 19:44.000]  вообще, к чему она может быть равна? Ну, самый, ну, идеальный вариант, конечно, какой у нас идеальный
[19:44.000 --> 19:55.600]  вариант? Идеальный вариант — это сказать, что, там, в идеале Q штрих равно shift с индексом P от Q.
[19:55.600 --> 20:07.160]  Ну, и понятно, P штрих, естественно, равно P плюс Q минус Q штрих. Это был бы, это прям вот идеальный
[20:07.160 --> 20:12.640]  вариант. То есть, если этот, я утверждаю, что этот shift присылают нам с небес по факсу, то, в общем-то,
[20:12.640 --> 20:19.920]  это практически алгоритм Кнута Мориса, правда, в явном виде. Пока ими кто-то так считает. Да, мы,
[20:19.920 --> 20:25.880]  конечно, с точки зрения префикс-функции смотрим на это немного иначе, но, на самом деле, суть понята.
[20:25.880 --> 20:29.200]  Так вот, действительно понятно, почему, если бы у нас вот такое было, то алгоритм работает.
[20:29.200 --> 20:46.080]  Ну, там идея такая. Так, давайте я просто это нарисую. Вот жила была строка S. И вот мы
[20:46.080 --> 20:54.480]  неожиданно нашли какую-то позицию P и обнаружили, что вот, начиная с этой позиции, вот на P плюс Q,
[20:54.480 --> 21:02.800]  вот эта вот позиция является префиксом строки P. Ну вот, теперь возникает вопрос,
[21:02.800 --> 21:09.360]  где может начаться следующее вхождение? Мы замечаем, что следующее вхождение может начаться вот
[21:09.360 --> 21:16.600]  в какой-то такой позиции. Такой, что, если мы отсюда начнем искать совпадение с префиксом,
[21:16.600 --> 21:22.600]  то мы дойдем вот как минимум до сюда, правда? Но тогда это будет означать, что это тоже префикс
[21:22.600 --> 21:28.160]  строки P, и тогда отсюда будет следовать, что вот это вот совпадет с вот этим. Логично, да?
[21:28.160 --> 21:37.360]  То есть, так как вот это сам префикс строки P, получается, надо у него взять шифт, вот минимальный
[21:37.360 --> 22:04.560]  шифт. А мы Q сделали не меньше, мы Q меньше. Ну Q' меньше, чем Q. Конечно. Ну, вроде да. Вот. Тут,
[22:04.560 --> 22:09.560]  конечно, классная коллизия, что типа букву P обозначает и позицию строку. Да, проблема.
[22:09.560 --> 22:19.600]  Проблема. Ну, хорошо. Ну, можем пока не поздно быстренько строку P и строку S подбегать на другие
[22:19.600 --> 22:27.480]  буквы, какие мы предпочитаем. Т у нас уже базовый префикс. Ну, не важно. Нет, мне кажется, это не
[22:27.480 --> 22:33.600]  обозначение базового префиса. Ну, хорошо. Ищем, хорошо. Т, префисный период. Давайте не Т. На что?
[22:33.600 --> 22:45.440]  Т точно. Давайте R. Р, пожалуйста. Ищем R, V, S. Так, хорошо. Ищем R, V, S. Тогда давайте вот тут везде,
[22:45.440 --> 22:56.000]  где P. Нет, ну, P, V, R поменять, знаете, это простая вещь. Даже зачекивать ничего не надо. А в те
[22:56.000 --> 23:09.400]  время декомпозиции? Ну, в те время. Да, пожалуйста. А это непринципиально. Ну, давайте уж тогда уж. Ну,
[23:09.400 --> 23:12.880]  в первую очередь понятно. Мы-то, в общем-то, строку R в итоге обрабатываем для того,
[23:12.880 --> 23:18.160]  чтобы было удобно ее искать. Там, в общем-то, идея была в том, что... То есть там идея была какая вообще?
[23:18.160 --> 23:23.880]  Там была идея в том, что мы находим... То есть мы по факту будем искать вхождение именно строки V.
[23:23.880 --> 23:31.200]  И для каждого найденного вхождения строки V будем еще от шифта еще и проверять. Там линейность,
[23:31.200 --> 23:35.400]  по крайней мере, этой проверки заключалась в том, что каждое следующее вхождение V будет не
[23:35.400 --> 23:42.960]  менее чем через шифт от V, поэтому получалось хорошо. Поэтому конкретно эти проверки работали
[23:42.960 --> 23:51.640]  за линию. Да, это было для нас прям вот хорошо. Так, ну что ж, вас помнили. Так что вас помнили.
[23:51.640 --> 23:59.280]  В принципе, в идеале было бы так, но для этого, конечно. Но чтобы знать шифт, необходимы такие
[23:59.280 --> 24:02.040]  идеальные шифты. Это то же самое, что знать префикс функцию, по сути.
[24:02.040 --> 24:06.600]  Ну, кстати, в такой постановке не очевидно, почему это за линию работает.
[24:06.600 --> 24:15.520]  Почему это за линию работает? Ну, например, заметим, что P плюс Q... Ну, заметим, скажем, что у нас
[24:15.520 --> 24:22.080]  P плюс Q никогда не уменьшается. Потому что P плюс Q – это граница этой строчки. Она влево не двигается.
[24:22.080 --> 24:32.400]  Поэтому как бы два указателя налицо. Так что здесь-то еще все понятно. Вопрос как бы в том,
[24:32.400 --> 24:40.240]  что заметим, что знать шифт то же самое, что знать префикс функцию. Помним такое? Потому что на самом
[24:40.240 --> 24:47.160]  деле шифт мы могли вообще определить, как Q минус префикс функции от Q по факту. Прям вот в
[24:47.160 --> 24:59.800]  явном виде. Ну, на самом деле там алгоритм был посложнее. Ну, там предлагалось, что если УВ
[24:59.800 --> 25:09.320]  нет вообще префиксного периода, то была альтернативная версия. Давайте себе представим,
[25:09.320 --> 25:17.000]  ну давайте так вот. Воспомним, что если УР нет, допустим, префиксного периода. То есть,
[25:17.000 --> 25:26.440]  тогда из этого следовало у нас, что P штрих Q штрих равно чему? Что-то там P плюс Q делить на K,
[25:26.440 --> 25:42.080]  запятая ноль вообще. Неожиданно нам заявляли. А почему нам это давать? Ну давайте так.
[25:42.080 --> 25:52.600]  По сути да, LEMMA-1 или вот идейно, ну то есть интуицию тоже можно немножко покачать. Оказывалось,
[25:52.600 --> 25:59.620]  что если мы тут нашли вот такой префикс, у которого шифт там меньше, чем KТ часть, то есть вот этих
[25:59.620 --> 26:06.200]  вот шифтов, то есть это вот шифт, а я тут могу этих шифтов еще 4 штуки набить. Ну вот этот шифт,
[26:06.200 --> 26:14.080]  то тогда это или что-то меньшее должно было быть префиксным периодом. Вот. Поэтому получалось так.
[26:14.080 --> 26:22.120]  Ну а если префиксный период есть, хотя бы нот, то там тоже выясняется, что если он в этот префикс
[26:22.120 --> 26:42.160]  совмещается, то где-то он маленький. Нет, давайте нот. Ну то есть действительно давайте нот,
[26:42.160 --> 26:46.640]  ну давайте тогда. Тут как бы вот префиксный период есть. Нет, а вот давайте представим, давайте
[26:46.640 --> 26:52.940]  вот уже разминаться так до конца. А если у нас ровно один префиксный период у строки V есть и он
[26:52.940 --> 27:03.240]  равен P, что делать? Ну смотрите, вот мы только что сказали, что пусть у строки R нет префиксного
[27:03.240 --> 27:10.240]  периода. Тогда мы сказали, что мы просто перескакиваем вот так и не паримся, потому что как бы вот.
[27:10.240 --> 27:21.400]  Ну вот. А теперь представим себе, что префиксный период есть, но он один и он равен P. Там у R есть
[27:21.400 --> 27:35.080]  там префиксный период, длины. Так P. А у нас опять коллизия, да? Да что ж ты будешь делать? А там M?
[27:35.080 --> 27:46.840]  О господи. Нет, давайте так. Ладно, будем следовать статье P1. Ну там будет второй префиксный период,
[27:46.840 --> 27:59.440]  он будет P2. Вот это оно. Тогда что? Пусть у нас есть один префиксный период. Воспоминаем,
[27:59.440 --> 28:03.040]  а также воспоминаем интуицию. Почему? Потому что вся эта интуиция у нас там дальше начнет
[28:03.040 --> 28:07.880]  работать. Просто мы там искать префиксные периоды будем примерно тем же методом. То есть знаете,
[28:08.080 --> 28:22.760]  то есть идеи будут примерно вот вокруг этого крутиться. Вот, значит, смотрите. Ну вот давайте
[28:22.760 --> 28:28.840]  смотреть. Итак, представим, что у нас есть префиксный период длины P1. И вот мы нашли какой-то
[28:28.840 --> 28:35.440]  префикс. И тогда у нас как бы два случая. То есть случая номер первый. Там префиксный период,
[28:35.440 --> 28:44.640]  то есть четыре копия этого префиксного периода у нас никуда не вкладываются. Спрашивается,
[28:44.640 --> 29:11.960]  насколько тогда можно сдвинуться. Ну да. Ну то есть оказалось, что вот этот P1 умножить на
[29:11.960 --> 29:33.560]  K оказалось больше, допустим, чем Q. Заметим, как бы в этом месте мы как-то пользуемся леммой 2.
[29:33.560 --> 29:48.040]  А что нам говорила лемма 2? То есть как бы она в этом месте говорила, что Q, видимо,
[29:48.040 --> 30:01.240]  меньше ли ровно reach от этого префиксного периода. Хотя, но с другой стороны, она как бы не больше
[30:01.240 --> 30:09.800]  либо равна, чем K умножить на P1. Следовательно, то есть вот эта лемма в наглую нам говорила,
[30:09.800 --> 30:17.120]  что эта лемма у нас оказывается, то есть из этого следовало, что shift от этого Q больше,
[30:17.120 --> 30:29.880]  чем Q поделить на K заведомо. И более того, отсюда даже из картинки даже можно быстренько понять,
[30:29.880 --> 30:38.400]  откуда мы это взяли. Потому что предположим, что здесь есть какой-то мелкий shift. Вот предположим,
[30:38.400 --> 30:51.320]  что у нас возник какой-нибудь такой мелкий shift, у которого тут 4 копии есть, хотя бы 4 копии. Но
[30:51.320 --> 30:55.680]  тогда утверждается, что самый минимальный shift, он по-любому должен быть префиксным периодом,
[30:55.680 --> 31:08.840]  правда? В том числе и строки P, в том числе и строки R. Поэтому здесь мы получаем противоречия
[31:08.840 --> 31:15.240]  с единственностью префиксного периода у строки R. Следовательно, в этом случае тоже оказывается,
[31:15.240 --> 31:28.440]  надо сдвигаться на Q поделить на K без проблем. Нет, это если достаточно далеко. А было другой
[31:28.440 --> 31:41.680]  случай. Если совершенно случайно выяснилось, что префиксный период P1, то есть вот эти как
[31:41.680 --> 32:02.600]  минимум 4 копии сюда прекрасно втискиваются. Что у нас верно тогда?
[32:11.680 --> 32:20.960]  Префиксный период длины P1, значит он помещается в R. Ну в R-то он по-любому помещается, это да.
[32:20.960 --> 32:35.120]  Мы тут стартовали в позиции P строки S, и насчитали с этого момента максимальную подстрочку,
[32:35.120 --> 32:57.120]  совпадающую с префиксом R. Выясняется, что 4 копии строки R могут сюда не попадать. Вот,
[32:57.120 --> 33:09.360]  то есть они могут попадать, а могут не попадать. Вот, ну что делать, если они сюда попадают? Ну тут
[33:09.360 --> 33:19.120]  на самом деле одно из двух. На самом деле верно здесь одно из двух. То есть смотрите, так как на этот
[33:19.120 --> 33:29.280]  раз вот это условие верно, правда? То есть Kу на P1 меньше либо равно Q, правда? В данном случае да.
[33:29.280 --> 33:39.160]  Значит, если он меньше либо равно Q, то теперь проверка. Верно ли, что Q меньше либо равно
[33:39.160 --> 33:50.880]  reach. В данном случае с индексом R от P1. Ну то есть если мы вот возьмем этот префиксный период и
[33:50.880 --> 33:59.560]  зациклим его до длины вот найденной нами Q, то прям возьмем и зациклим, зациклим, зациклим,
[33:59.560 --> 34:12.680]  зациклим. То есть доскачит ли она до Q самой строки R? Ну да, мы просто расшифровываем,
[34:12.680 --> 34:25.760]  что оно значит, да. Ну правда, только что в предыдущем случае не выполнялось. Нет,
[34:25.760 --> 34:32.480]  из леммы ничего не следует. Нет, тут лемма говорит, что вот эти утверждения эквивалентны вот этим
[34:32.480 --> 34:46.080]  утверждением. Я понял. Вот. Сейчас у нас по определению L shift от Q меньше либо равно, чем K1 на Q,
[34:46.080 --> 35:05.080]  потому что мы так. Ну да. Нет, про shift мы ничего не знаем. Ну shift хотя бы наш префиксный период.
[35:05.080 --> 35:20.120]  Ну мы пытаемся понять. Ну действительно да, shift у нас действительно не имеет. Ну тут неважно.
[35:20.120 --> 35:26.280]  Да, тут везде shift у нас не должен быть меньше префиксного периода. По камере в данном случае
[35:26.280 --> 35:41.360]  здесь. Ну да, хорошо. Точнее здесь точно в предыдущем случае могло быть больше вопросов на самом деле.
[35:41.360 --> 35:49.600]  А тогда shift как минимум столько, ну теперь возникает вопрос, ну возникает вопрос сколько? Что? Ну тогда
[35:49.600 --> 35:54.560]  просто надо проверять. То есть если вот этот reach там достигается, а там заранее в строке R,
[35:54.560 --> 35:59.640]  это проверить можно, если вы уже знаете префиксный период. То есть вы один раз знаете префиксный период,
[35:59.640 --> 36:12.000]  то reach от него вы можете прям в явном виде насчитать. Ну да. Что нет? Вот. Ну раз мы его можем насчитать,
[36:12.000 --> 36:16.760]  то там дальше выникала победа. Ну вот. Ну вот тогда получается, что если этот reach доходит до Q,
[36:16.760 --> 36:22.080]  то есть эта строка действительно P1, то есть этот префикс строки R, он еще и P там периодичен,
[36:22.080 --> 36:27.360]  то действительно мы с чистой совестью можем сказать, что shift прям тогда в явном виде равен,
[36:27.360 --> 36:37.160]  то есть вот этому сдвигу, то есть вот P1, и тогда мы там просто действуем вот по этому правилу. То
[36:37.160 --> 36:43.240]  есть P сдвигаем P равно P плюс 1, Q там минус равно P1, то есть тогда вот это тоже совпадающий префикс УРА.
[36:43.240 --> 36:55.720]  Ну Q минус равно P1, а P плюс равно P1. То есть как бы если тут вот зацикл, то есть по сути,
[36:55.720 --> 37:03.680]  если тут зацикл есть, то надо сдвигать ровно на P1, не на шоу кроме. Вот. Но если этого reach нету,
[37:03.680 --> 37:08.200]  то есть reach оказался имею, то есть там этот зацикл, зацикленность P1 достигает там,
[37:08.200 --> 37:17.640]  заканчивается раньше, чем Q. Да, тогда мы вынуждены действительно сдвигать на Q делить на K, оказывается.
[37:17.640 --> 37:29.560]  Вот давайте еще раз, давайте еще раз. Давайте попробуем еще раз все это собрать. И так,
[37:29.560 --> 37:34.360]  предположим, что у нас совершенно случайно выяснилось, то есть мы вот догнали вот это
[37:34.360 --> 37:43.880]  вот Q у нас, да, вот это вот Q, то есть это вот позиция P плюс Q. Вот. И выяснилось,
[37:43.880 --> 37:55.320]  что префиксный период, то есть четыре копии префиксного периода сюда не попадают. Вот.
[37:55.320 --> 38:06.600]  Ну да. То есть если тут рисовать четыре копии, то они доходят до Q и уходят дальше. Тогда
[38:06.600 --> 38:15.760]  я утверждаю, что shift заведомо больше, чем Q делить на K. Почему? Ну просто потому,
[38:15.760 --> 38:24.880]  что если тут shift, если тут у Q есть shift меньше, чем Q делить на K, то этот shift явно тут является
[38:24.880 --> 38:32.760]  префиксным периодом, как мы уже раньше выясняли. Это даже не лемма два, а просто лемма один. Но
[38:32.760 --> 38:37.200]  тогда тут был бы префиксный период, противоречие с тем, что у нас нет другого префиксного периода.
[38:37.200 --> 38:49.480]  Понимаете, да? Вот. Значит, у нас пока его нет. Так. Вот. Поэтому здесь получается,
[38:49.480 --> 38:53.680]  что мы просто сдвигаем P просто на Q делить на K, а Q обнуляем. Вот, кстати,
[38:53.680 --> 38:58.400]  с линейностью у вас здесь могут быть вопросы. Потому что раньше у нас линейность достигалась
[38:58.400 --> 39:03.800]  за то, что правая граница никогда вправо не двигается. А здесь она резко, то есть влево не
[39:03.800 --> 39:12.200]  двигается. Вот. Потому что, смотрите, просто в этом случае мы делаем переход такой. P превращается
[39:12.200 --> 39:22.040]  в позицию P плюс Q делить на K, а Q превращается в ноль. То есть мы с этого момента начинаем
[39:22.040 --> 39:34.640]  двигаться в тупую. Вот. Не понятно. Вот. Поэтому здесь линейность уже, то есть линейность
[39:34.640 --> 39:46.520]  здесь не так очевидна, на самом деле. Отка. А, ну домножение на K, да. Ну, то есть утверждается
[39:46.520 --> 39:56.960]  следующее, что... Ну вот. Ну да. Ну, по сути, да. То есть смотрите, как интересно. Ну, на самом деле,
[39:56.960 --> 40:01.640]  действительно, здесь можно в этом убедиться следующим образом. То есть у нас гарантировалось
[40:01.640 --> 40:09.640]  следующее, что если у нас P увеличилась на какую-то величину, скажем, дельта X, то тогда это
[40:09.640 --> 40:15.000]  гарантирует, что вот с этим вот Q, то есть это Q не более чем 4 дельта X. Ну, в смысле как дельта
[40:15.000 --> 40:22.080]  X, да. И это означает, что у нас обработка была не более чем 4 на дельта X. То есть тогда,
[40:22.080 --> 40:27.240]  получается, если просуммировать по всем дельта X, то получается, что суммарно у нас все здесь
[40:27.240 --> 40:33.840]  сделалось не более чем за 4 длины строки S. Понятно, да? То есть поэтому вот это удобно. То есть если
[40:33.840 --> 40:39.440]  мы сдвигаем P, даже вот обнуляя Q, хоть на какую-то вот Q делить на константу, то это как бы нормально.
[40:39.440 --> 40:47.600]  Вот. Ну, вот. Ну, это правда, если мы сдвигаем только настолько. Ну, там, конечно, есть комбинация,
[40:47.600 --> 40:54.720]  потому что мы сдвигаем иногда вот так, а иногда по шифту. Ну, а с другой стороны, там тоже ничего
[40:54.720 --> 40:59.360]  страшного нету, потому что тогда у нас получается, что у нас мы с какого-то момента начали к уровну 0,
[40:59.360 --> 41:05.600]  оно тут шло-шло, мы там двигали-двигали-двигали-двигали, а потом, наконец, все-таки решили обрубить. Но в этом
[41:05.600 --> 41:10.920]  случае тоже легко обнаружить, что если рассмотреть вот эту суммарную Q, вот на которую мы тут с самого
[41:10.920 --> 41:17.360]  начала сдвинулись, то как бы это итоговая P здесь там переместится тоже как минимум на вот глобальные
[41:17.360 --> 41:30.120]  эти сдвиги поделить на K по фактам. Понятно, да? Вот. Да, то есть поэтому здесь вот такая нот. То есть
[41:30.120 --> 41:38.000]  это у нас такая интуиция, почему это все линейно работает. Да. Что мы делаем, если помещается? Да. Ну,
[41:38.000 --> 41:44.120]  это мы дальше тогда. Значит, если, значит, если не помещалось, то мы чуть-чуть, мы только что обсудили,
[41:44.120 --> 41:56.840]  а вот если неожиданно, если помещается, если помещается, то есть допустим, что у нас тут вот P1
[41:56.840 --> 41:58.920]  неожиданно поместилось. Давайте вот я тут буду.
[42:26.840 --> 42:41.240]  Точно нет. Это мы точно знаем. Потому что, да, был бы меньше shift, был бы меньше префиксный
[42:41.240 --> 42:50.520]  период. Вот, бесспорно. Вот, поэтому, но вот. Да, но может так случиться, что штиф равен P1. Как мы это делаем?
[42:50.520 --> 42:55.560]  Это мы заранее выясняем, так как у нас у строки, напоминаю, R единственный префиксный период,
[42:55.560 --> 43:00.880]  поэтому для него за линию можно выяснить, отчему равен reach от него. То есть насколько
[43:00.880 --> 43:09.560]  префикс длины R может быть P1 периодичным, прям в тупую выяснение. И оказывается, если как бы этот
[43:09.560 --> 43:15.960]  префикс, P1 периодичный префикс длины Q или более оказался, то мы можем просто сказать,
[43:15.960 --> 43:23.400]  что shift равен P1 и сказать, что P равно P плюс 1, а Q равно Q минус P1. И получится, что, то есть
[43:23.400 --> 43:31.520]  следующий раз Q стартует как бы с этой же позиции, по сути. Понятно, да? Вот, ну а в любом ином случае
[43:31.520 --> 43:40.800]  что делать? То есть, допустим, если P, но вот, но теперь, если оказалось, что, то есть, P1 периодичности
[43:40.800 --> 43:52.800]  у нас нет, но тогда, тогда, но тогда утверждается, что тогда можно смело сдвигаться хотя бы на Q
[43:52.800 --> 44:06.720]  делить на K. Почему? Ну, во-первых, у нас в лиме написано, что это так. Ну, точнее так, вот это утверждение,
[44:06.720 --> 44:14.240]  ну, хотя нет, лима, конечно, говорит не совсем это. То есть подлость заключается в том, что на самом
[44:14.240 --> 44:19.080]  деле, если вот это утверждение не верно, то в общем-то, конечно, и то, что не верно уже вот это вот,
[44:19.080 --> 44:26.400]  и то, что shift больше, чем Q делить на K, там само по себе никто не говорил. Нет. Сейчас у нас
[44:26.400 --> 44:32.520]  эквалентность же. Эквалентность-то да, но эквалентность прям всех вместе условий. А так у нас
[44:32.520 --> 44:40.760]  выяснилось, что K умножить на P1 оказалось меньше либо равно Q, но Q при этом больше, чем reach. То есть,
[44:40.760 --> 44:50.640]  это условие не верно. Ну, вот. Да. Нет. Может быть не верно просто, что P1 не равен shift.
[44:50.640 --> 45:06.240]  Так что формально это еще ничего не значит. Поэтому придется как бы снова пушировать
[45:06.240 --> 45:14.440]  нашу интуицию. Давайте подумаем. Но тем не менее, очень хочется сказать, что меньше, чем Q делить
[45:14.440 --> 45:19.800]  на K, двигаться не придется, если тут вот прям. Но действительно, потому что, предположим,
[45:19.800 --> 45:25.560]  что обнаружено, что у нас есть какой-то мистический сдвиг, какой-то P-штрих. Такой,
[45:25.560 --> 45:30.640]  что вот строка P-штрих периодично, и при этом тут хотя бы четыре копии P-штриха найдутся.
[45:30.640 --> 45:40.320]  Мы доказываем следующее, что предположим, что оказалось, что у нас четыре копии этого
[45:40.320 --> 45:47.200]  префиксного периода P1 влезают в Q, но при этом вот эта строка длины Q, то есть она же префикс
[45:47.200 --> 46:03.000]  длины Q строки R, P1 периодично не является. Вот. Тогда я утверждаю, что если мы найдем вот этот
[46:03.000 --> 46:11.920]  shift P-штрих, то я утверждаю, что shift должен быть больше, чем Q делить на K. Потому что, говорим,
[46:11.920 --> 46:19.920]  пусть у нас найдется shift P-штрих, который меньше, чем Q делить на K, но меньше либо равен. То есть
[46:19.920 --> 46:30.560]  четыре копии тут как бы есть. Что тогда можно сказать? Ну, как минимум, можно заметить,
[46:30.560 --> 46:37.280]  что, ну, конечно, нельзя сказать, что P-штрих это префиксный период, конечно, да? Хотя почему
[46:37.280 --> 46:47.820]  нельзя? Можно. Да, то, конечно, да, он прям префиксный период и есть. Но у нас же нет
[46:47.820 --> 46:58.480]  другого префиксного периода, кроме P1. Ну все, фейл. Вывод, значит, на Q делить так, а двигаться
[46:58.480 --> 47:07.280]  можно. То есть вот такая у нас была интуиция. Такая интуиция, такая логика, такое шел.
[47:07.280 --> 47:15.560]  Так, это мы еще, но это мы воспомнили. А теперь попробуем решить уже новую для нас задачу.
[47:15.560 --> 47:25.960]  Ну практически, но сейчас нет. Да, нет, это была не новая задача, да. Нет, мы решали полтора часа
[47:25.960 --> 47:32.720]  на прошлой паре, мы решали другую задачу немножко. Сейчас я, да, ну прошлую со мной хорошо вот так.
[47:32.720 --> 47:40.600]  Нет, прошлую с вами и Галилом. И Галилом? О, ну да. С вами прошлая была с субтитров. А, ну да,
[47:40.600 --> 47:50.160]  только. Да, да, да, да, да, да. Да, да, да, да, да. Ой, господи, как все сложно. Ой, господи, то это,
[47:50.160 --> 48:00.960]  то это. То Бабин с миобиусом еще придут и Дерехле. Нет, вот там Дерехле с миобиусом было, да? А ты не был?
[48:00.960 --> 48:10.920]  Нет, я не пришел. Отсчеток. Ну вообще у нас. Нет, ну частично, нет, одно дело, другое дело с точки
[48:10.920 --> 48:16.520]  зрения алгоритмов. Нет, там, нет, там иронично, зато там было, насколько я был в Бестия, наоборот,
[48:16.520 --> 48:23.840]  пришли люди, которые обычно сюда не ходят. Ну да, ну просто да, как давно я Васю Дубинину, например,
[48:23.840 --> 48:37.320]  не видел. Ну сюда и сюда не ходят. Нет, нет, ну сформулируем так. Обычно, скажи так,
[48:37.320 --> 48:45.480]  те, кто сейчас вот на втором курсе сюда стабильно ходил, я вроде более-менее знаю. Так что да. Так
[48:45.480 --> 48:58.800]  что да. Ладно. Ну вот, ну хорошо будет, да. Ладно, так вот, значит теперь у нас новая для
[48:58.800 --> 49:06.120]  нас задачка. Дана строка R, найдите, пожалуйста, ее там, ладно, или даже дана строка V, надо
[49:06.120 --> 49:13.320]  найти ее минимальный префиксный период. Вот очень хочется, точнее, понять, желать назвать,
[49:13.320 --> 49:21.000]  есть ли у нее префиксный период, если да, то вот минимальный какой. Вот такой вот задачка.
[49:21.000 --> 49:30.680]  Давайте попробуем, глядя вот на этот механизм, понять, а не можем ли мы случайно такую штуку
[49:30.680 --> 49:39.480]  найти. Давай. У нас был один случай, в котором мы сдвигались не на Q, делить на K, а на P1. Да.
[49:39.480 --> 49:47.240]  Не могли в этом случае тоже сдвинуться на Q, делить на K. Нет. Некорректно было. Нет, ну точно,
[49:47.240 --> 49:54.480]  сдвинуться, нет, куда, ну вот. Нет, ну там просто shift, ну просто в чем цель сдвига? Когда мы сдвигаем
[49:55.080 --> 50:02.320]  мы гарантируем, что начиная с более ранних позиций, интересных вхождений нет. А что такое интересное
[50:02.320 --> 50:09.200]  вхождение? Мы хотим, чтобы начиная с этого момента подстрока совпадала с префиксом длины хотя бы
[50:09.200 --> 50:19.120]  вот дотягивающимся досюда. Вот у нас в этом цели была. То есть если она заведомо не дотягивается,
[50:19.120 --> 50:27.000]  то их даже рассматривать бессмысленно. Вот. Там такого было нельзя, потому что там какой-то есть,
[50:27.000 --> 50:36.480]  то есть мы знали, что такой префикс есть, начиная с позиции P плюс shift. Ну когда как? Нет, смотри,
[50:36.480 --> 50:40.600]  там два варианта. Если мы знаем, что shift меньше, чем Q делить на K, то приходится на этот shift
[50:40.600 --> 50:45.240]  сдвигаться, но тогда мы знаем, что это за shift, и знаем, что тогда он дотянется хотя бы досюда,
[50:45.240 --> 50:50.960]  и Q может стартовать прямо с этого места. Вот. А если мы знаем, что shift там, мы не знаем,
[50:50.960 --> 50:56.840]  какой shift, но мы знаем, что он больше, чем Q делить на K, значит начиная с Q делить на K
[50:56.840 --> 51:06.640]  и смотреть здесь, начиная с Q равно нулю, мы вполне можем. Так вот, такой вот глубокий смысл.
[51:06.640 --> 51:15.760]  Во, так же и да. А, все настолько просто, что Миша уже смотрит в учебник по матанализм.
[51:15.760 --> 51:31.040]  Там есть ответ вот на это. Ничего себе. Так, ну ладно, давайте смотреть про минимальный
[51:31.040 --> 51:36.320]  пресексный период. Как же искать минимальный пресексный период? Так вот, я утверждаю,
[51:36.320 --> 51:41.440]  что искать его надо примерно так же. Вот просто буквально тем же механизмом,
[51:41.440 --> 51:47.280]  только мы будем работать не с двумя строками, а с одной. Ну давайте так, начнем вот с чего.
[51:47.280 --> 52:07.720]  Когда вот этот алгоритм, в итоге, да, пользовались. А здесь не факт. Но смотрите,
[52:07.720 --> 52:12.880]  в чем фишка. Смотрите, а что нам вообще нужно? Тем не менее, забираю вперед, я даже скажу,
[52:12.880 --> 52:21.460]  мы там даже два минимальных пресексных периода найдем. Да, пока вам это может
[52:21.460 --> 52:24.960]  рвать шаблон, но тем не менее, я думаю, сейчас мы в этом убедимся. Смотрите,
[52:24.960 --> 52:31.040]  ну начнем с простого. Ищем минимальный пресексный период. Как его найти? Ну нам
[52:31.040 --> 52:37.200]  нужно найти минимальное такое, по сути, то есть, минимальное такое P. Так, ну,
[52:37.800 --> 52:49.880]  минимальное такое P, что там reach от P хотя бы 4P. Ну да. Логично, да? То есть,
[52:49.880 --> 52:53.960]  фактически, надо минимальное такое P найти или убедиться, что его нет.
[52:53.960 --> 53:01.880]  Тогда идея такая, тупой алгоритм мог так и выглядеть. Давайте переберем тупо все P,
[53:01.880 --> 53:05.920]  для каждого P прям в тупую, но считаем reach. Да, это будет за квадрат, но это будет работать,
[53:05.920 --> 53:14.400]  правда? Но теперь идея, что давайте попробуем пользоваться вот этими методами. Как мы будем
[53:14.400 --> 53:22.360]  пользоваться вот этими методами? А очень просто, смотрите, жила была строка V. Допустим, вот это
[53:22.360 --> 53:30.720]  была строка V, и мы тут в какой-то момент исследовали вот такое P. То есть, насчитали
[53:30.800 --> 53:41.600]  мы тут у него reach, да? То есть, насчитали тут это P плюс Q такое, что префикс длины P плюс Q
[53:41.600 --> 53:56.960]  П периодичен, да? И оказалось, что P плюс Q строго меньше, чем КП. Пока меньше. Вот,
[53:56.960 --> 54:01.960]  ну потому что как только мы начнем, найдем первое, то есть как только мы начнем, найдем первое P такое,
[54:01.960 --> 54:07.760]  что там P плюс Q, кажется, больше либо равно КП, и это будет P периодичная строчка, да? То как бы
[54:07.760 --> 54:16.280]  значит мы победили. Вот, но это пока оно меньше, теперь давайте думать. Так, ну давайте думать,
[54:16.280 --> 54:22.680]  насколько нам, то есть скажем, имеет ли нам, то есть куда нам имеет смысл сдвигаться?
[54:22.680 --> 54:35.400]  То есть, нам имеет смысл сдвигаться вперед. То есть, нам хочется сдвинуться на какую-то вот
[54:35.400 --> 54:40.880]  такую штуку. То есть, нам сказать, что хочется сдвинуться на куда-то, на какую-то P плюс,
[54:40.880 --> 54:49.400]  там P штрих, допустим, да? Хочется как-то вот сдвинуться на P плюс P штрих, какой-то,
[54:49.880 --> 54:57.760]  то есть гарантировать, что между P и P плюс P штрих подходящих вот этих штук точно нет. Вот,
[54:57.760 --> 55:06.040]  но что мы здесь делаем? Здесь мы делаем, на самом деле, смотрите, интуитивно, вот здесь надо
[55:06.040 --> 55:12.600]  заметить важную вещь, что когда мы проверяем вот этот вот ритч, мы по сути ищем вхождение строки
[55:12.600 --> 55:25.160]  V в самой себе, правда? В самой себе. Ну, смотри, ну, когда мы, то есть, по сути, когда мы тут ищем
[55:25.160 --> 55:30.000]  ритч, мы прям вот этот символ сравниваем с первым символом строки P, вот этот со вторым,
[55:30.000 --> 55:35.800]  этот с третьим и так далее, пока совпадают. То есть, по сути, это вот раньше мы делали то же
[55:35.800 --> 55:42.320]  самое, когда искали строку R в строке S, да? То есть, по сути, у нас теперь задача, ну вот, то есть,
[55:42.320 --> 55:48.160]  у нас теперь примерно то же самое, то есть, мы пытаемся, то есть, по сути, мы пытаемся найти
[55:48.160 --> 55:55.600]  вхождение строки V в самой себе. Ну, что-то типа Z функции насчитать, правда? То есть, просто идея
[55:55.600 --> 56:01.480]  такая, то есть, идея такая, то есть, мы хотим найти вхождение, то есть, совпадение с префиксом,
[56:01.480 --> 56:07.960]  у подстроки с префиксом, причем префиксом достаточно длинным. Тогда, смотрите, вот это должно быть
[56:07.960 --> 56:14.320]  префиксом. И тогда, чтобы нам было интересно, потому что, если мы сдвинем позицию P вправо,
[56:14.320 --> 56:21.160]  то требование на Q должно быть еще больше, да? А отсюда следует, что вот это, то есть, смотрите,
[56:21.160 --> 56:27.880]  то есть, вот это префикс строки V и вот это тоже префикс строки V. Ну, чтобы нам хотя бы интересно
[56:27.880 --> 56:35.120]  было, точнее, он должен претендовать на это. То есть, получается, значит, P штрих, ну, то есть,
[56:35.120 --> 56:42.440]  получается, вот этот двиг, то есть, в идеале хотелось бы, чтобы, ну, вот, что здесь хочется,
[56:42.440 --> 56:50.120]  в идеале хотелось бы, ну, совсем в идеале, чтобы P штрих был равен shift, конечно, от чего, от Q. Вот
[56:50.120 --> 56:56.480]  в идеале можно было бы делать так, тогда бы Q вправо не двигалось. И тогда мы бы все успешно
[56:56.480 --> 57:10.600]  делали, правда? Да, да. Ну, это в идеале.
[57:26.480 --> 57:45.440]  Мы хотим, чтобы все вот это вот было префиксом, точнее, да, префикс, с P до P плюс Q префикс.
[57:45.440 --> 57:54.320]  Самое главное, с P плюс P штрих до P плюс Q префикс. То есть, вот это префикс, ну, в идеале хотелось бы,
[57:54.320 --> 57:59.840]  чтобы это было префиксом, да? Ну, то есть, если мы хотим, чтобы это было, ну, вот, то есть, как бы
[57:59.840 --> 58:04.000]  интересным префиксом, то есть, на самом деле, интересной позицией является только то, что, хотя,
[58:04.000 --> 58:10.200]  что ничто не противоречит тому, что это, что здесь, что вот это могло бы быть префиксом.
[58:10.200 --> 58:21.040]  Так, да, а если это оба префиксы, то получаем, что... Ну, это минимально, чтобы было шифт,
[58:21.040 --> 58:28.800]  потому что идея... Если это оба префиксы, то, в частности, второй префикс, первое, и вот этот вот зазор, это шифт.
[58:28.800 --> 58:33.680]  Ну, да. Ну, в идеале хотелось бы. Но проблема в том, что этого шифта мы, естественно, не знаем,
[58:33.680 --> 58:41.920]  но знаем, как всегда, другое. Мы знаем, что я утверждаю, что шифт V от Q, он будет заведомо больше,
[58:41.920 --> 58:56.360]  чем Q делить на K. Да ладно. Все догадываетесь, да? Как бы мозг в этом случае должен уже стандартный
[58:56.360 --> 59:03.080]  шаблон подставлять, да? Ну, либо, ну, либо стандартно ссылаться на L1, либо подставать
[59:03.080 --> 59:10.400]  стандартный шаблон, который ее, по сути, доказывает. Если у нас уже есть... Но там говорилось бы так,
[59:10.400 --> 59:16.800]  что, предположим, шифт оказался меньше, да? Тогда тут, оказывается, есть четыре периода. Ну,
[59:16.800 --> 59:21.720]  там шаблон почти такой же. Он говорит так, что тогда это является префикс, то есть это как бы
[59:21.720 --> 59:27.560]  префиксный период, но тогда в том числе и префиксный период строки V, причем меньшей длины. Ну вот,
[59:27.560 --> 59:39.000]  а мы его пока не нашли. А мы его типа пока не нашли. Ну вот, да. То есть, да, смотрите,
[59:39.000 --> 59:43.480]  то есть обратите внимание, то есть нам плевать, сколько V префиксных периодов, нам главное,
[59:43.480 --> 59:48.600]  что пока мы не нашли первый, как бы на той части строки, где мы работали, его не было. Мы это
[59:48.600 --> 59:56.200]  достоверно знали. Поэтому как бы приятная новость для нас, приятная новость для нас заключается в том,
[59:56.200 --> 01:00:04.480]  ну вот, заключается в том, что первый нод, что, оказывается, мы, если у нас минимальный,
[01:00:04.480 --> 01:00:11.400]  ну, если префиксного периода нет вообще, то мы за O от V это поймем. А если префиксный период
[01:00:11.400 --> 01:00:18.720]  есть, и он равен, допустим, P1, то я утверждаю, что мы его найдем, причем за O от P1. Ладно,
[01:00:18.720 --> 01:00:24.440]  формально умножить на K. Но K это константа, поэтому нам неинтересно. Неплохо, правда?
[01:00:24.440 --> 01:00:33.000]  То есть, в принципе, когда у нас, получается, в теореме декомпозиции желательно, то есть просто,
[01:00:33.000 --> 01:00:36.640]  если нам дадут вот эти УВ, и гарантируют, что у нас не более одного префиксного периода,
[01:00:36.640 --> 01:00:47.640]  то мы в принципе этот префиксный период уже найдем. Ну, по сути, да.
[01:00:47.640 --> 01:00:54.080]  Хотя, на самом деле, честно скажу, при поиске само разбиения мы эту логику тоже будем учитывать,
[01:00:54.080 --> 01:00:57.920]  то есть, поэтому я ее не столько для того, что она, то есть, как бы нам пригодится сама логика,
[01:00:57.920 --> 01:01:04.080]  а не непосредственно этот алгоритм. Хотя, нам пригодится, знаете, какой алгоритм? Нам
[01:01:04.080 --> 01:01:10.480]  пригодится более сложный алгоритм. Как найти два минимальных префиксных периода?
[01:01:17.640 --> 01:01:31.840]  Нет, ну а что не так? Ну, допустим, более того, мы ровно тем же алгоритмом найдем первый
[01:01:31.840 --> 01:01:46.920]  префиксный период. Так вот, допустим. Так, ну теперь давайте посмотрим. Да, мы можем, конечно,
[01:01:47.080 --> 01:01:52.280]  это аккуратно... Да, но заметим следующее, что если... Да, то есть, смотрите, тут фишка такая. Вот у нас
[01:01:52.280 --> 01:01:56.800]  тут был алгоритм, который когда мы работали в предположении, что строки R, ровно один префиксный
[01:01:56.800 --> 01:02:03.120]  период. По сути, на самом деле, можем применять ту же саму идею, пока мы не нашли второй префиксный
[01:02:03.120 --> 01:02:16.520]  период. Правда? Ну, давайте так. Хорошо. Так. Значит, смотрите. Так. Ну, тут эти красоту тут навести
[01:02:16.520 --> 01:02:22.560]  так. У меня уже такой соблазн. Вот эти определения можно стереть? Блин, я на них постоянно смотрю.
[01:02:22.560 --> 01:02:32.920]  Хорошо, не буду. Ладно. Ну да. Так, господи. Знаете, мы на Саше Бабина две доски из
[01:02:32.920 --> 01:02:43.600]  другой аудитории тащили. Ух ты. Там он писал какие-то стрёмными маркерами, которые через час и акция
[01:02:43.600 --> 01:02:51.400]  всю доску загадили. А, поэтому, да. Поэтому мы принесли две другие и делали... И их тоже загадили. Нет. Нет, ребята. Нет, самое...
[01:02:51.400 --> 01:02:55.360]  Нет, знаете, самое грустное на самом деле был интересный момент, потому что вот когда я год
[01:02:55.360 --> 01:03:00.840]  назад это читал, как-то это было в аудитории 9244, но это менее принципиально, более принципиально,
[01:03:00.840 --> 01:03:06.440]  что там было две доски. Это было так удобно, что на одной доске пишутся все определения илемы, а на другой
[01:03:06.440 --> 01:03:11.800]  собственно мы и тут работаем. А тут мы немножко упихиваемся. Правда, тут есть преимущество, там как бы
[01:03:11.800 --> 01:03:19.440]  на камеру две доски не помещались. Да. Ну, там было легче, потому что там камеру никто не таскивал. Там
[01:03:19.440 --> 01:03:25.840]  сидел Антон Садович и снимал всё на свой айфон. Ну вот. Так. Хорошее качество, кстати, было. Ну,
[01:03:26.200 --> 01:03:35.640]  можете сами посмотреть. В общем-то там лекции-то никуда не делись. Вот. Соответственно, да. Вот. Да,
[01:03:35.640 --> 01:03:44.440]  хочется сказать, я там был ещё молодой. Нет, Антона там не было. Нет, показывали там, в основном,
[01:03:44.440 --> 01:03:47.680]  только меня. Ну, почему? Ладно, насчёт меня это на самом деле шутка, потому что выглядел я там
[01:03:47.680 --> 01:03:58.120]  буквально так же. Вот прям буквально. Прям с точностью до одежды. На самом деле. Ну, это год
[01:03:58.120 --> 01:04:04.480]  назад было чего. Вот, отлично. Так вот. Значит, смотрите. Давайте сначала. Итак. Смотрите. Жила была
[01:04:04.480 --> 01:04:12.800]  строка В. И мы запускаем наш вот этот механизм, который ищет префиксный период. Ну, там вот. Ну,
[01:04:12.800 --> 01:04:16.720]  в идеале нам что? Как мы искали штуку для нас минимальный префиксный период? Мы хотели найти
[01:04:16.720 --> 01:04:26.880]  такое П, что Рич от П больше либо равно, чем К на П. Правда? Или там К-1П, как мы там Рича
[01:04:26.880 --> 01:04:34.520]  определили? А, ну да, КП. И вот, допустим, мы её нашли. Вот такой вот П1. То есть этот наш алгоритм
[01:04:34.520 --> 01:04:45.320]  шёл-шёл и дошёл до П1, где вот это вот П плюс К оказалось, П1 плюс К оказалось больше либо равно,
[01:04:45.320 --> 01:05:03.120]  чем КП1. Ну, теперь вот вгибание вопрос. Как вы думаете, теперь мы должны найти ещё
[01:05:03.600 --> 01:05:08.520]  какой-то... Теперь мы должны найти такое П2, которое больше, чем П1, так, чтобы П2 было
[01:05:08.520 --> 01:05:15.280]  префиксным периодом. Давайте подумаем. Какие условия нам нужны для того, чтобы сказать,
[01:05:15.280 --> 01:05:29.400]  что какое-то П2 нам подходит? Вот. Что это за второй префиксный период? Ну, как минимум,
[01:05:29.400 --> 01:05:46.280]  конечно, нужно, чтобы... Да, что ж ты будешь делать? Как минимум, нам нужно... То есть шифт В от П2 на
[01:05:46.280 --> 01:05:53.720]  самом деле был больше либо равно, чем КП2. Так, ладно, только не шифт, а, пардон, Рич. Хотелось бы,
[01:05:53.720 --> 01:06:07.400]  да? И, конечно, но при этом хотелось бы, чтобы П2 было больше, чем П1. Так, действительно. Ещё
[01:06:07.400 --> 01:06:22.280]  логичнее, да. Так, скажем так, это необходимые условия, но достаточно или... Вот. Ну, тут надо
[01:06:22.280 --> 01:06:34.280]  смотреть. Потому что, смотрите. Потому что... Ну, смотрите, давайте... Ну, на самом деле так. Мы же,
[01:06:34.280 --> 01:06:41.480]  в принципе, можем вот этот алгоритм продолжать. Что? Если у нас будет П1 повторён 8 раз,
[01:06:41.480 --> 01:06:56.040]  то 2П1 мы подумаем, что это П2. А это не базовая строка. Ну, вот. Это давайте прям точно ли не
[01:06:56.040 --> 01:07:04.640]  базовая? Ну, 2П1 не базовая строка. Ну, 2П1, конечно, не базовая строка. Это правда проблема. Да,
[01:07:04.640 --> 01:07:10.000]  не то есть... Ну, у нас тут ломается разумзение, что префикс... Ну, короче, про базовость ломается,
[01:07:10.000 --> 01:07:17.680]  что она автоматически строк. Ну, понятно, понятно, да. Нет. Но давайте смотреть. Да,
[01:07:17.680 --> 01:07:20.580]  круто. Ну, то есть, смотрите. Там действительно до какого-то... Ну, то есть, на самом деле,
[01:07:20.580 --> 01:07:27.320]  тут идея такая. То есть, давайте так, продолжим тот же алгоритм, что мы делали раньше. То есть,
[01:07:27.320 --> 01:07:31.920]  по сути, что нам нужно. Ну, до какого... То есть, мы говорим, что алгоритм, по сути, занимается тем,
[01:07:31.920 --> 01:07:39.120]  что ищет все такие позиции p, что rich от p больше либо равно, чем kp, правда?
[01:07:39.120 --> 01:07:45.020]  Точнее, ну пока какие-то ищут. Вот мы нашли сейчас самую первую. А давайте
[01:07:45.020 --> 01:07:48.580]  продолжим этот же алгоритм. Только единственная разница будет в том, что если
[01:07:48.580 --> 01:07:52.460]  раньше мы говорили, что shift это точно хотя бы q поделить на k, поэтому просто
[01:07:52.460 --> 01:07:58.260]  сдвигаем, обнуляем q и не паримся, то теперь у нас, как у нас и в этой
[01:07:58.260 --> 01:08:02.820]  части могут быть проблемы. Проблема могут быть связаны с тем, что как бы shift на
[01:08:02.820 --> 01:08:06.660]  самом деле может оказаться меньше, чем q делить на k, но у нас фишка в том, что
[01:08:06.660 --> 01:08:13.700]  этот shift в этом случае обязан быть равен ровно p1. Помним, да? То есть у нас вот
[01:08:13.700 --> 01:08:17.500]  этот алгоритм базировался на том, что если у вас пока у строке есть только
[01:08:17.500 --> 01:08:23.740]  один префиксный период, пока у вас есть в строке
[01:08:23.740 --> 01:08:30.380]  только один префиксный период, мы гарантируем, что shift у нас только один
[01:08:30.380 --> 01:08:36.780]  и он равен p1. Правда, да, тут вытекает, конечно, вопрос, а может быть вот в этой
[01:08:36.780 --> 01:08:42.040]  вот строке на самом деле уже префиксный период достаточно маленький. То есть может
[01:08:42.040 --> 01:08:46.100]  окажется, что даже четыре строки p2 на самом деле сюда вкладываются,
[01:08:46.100 --> 01:08:54.140]  что вот этот префикс может быть очень длинным. Вдруг вот четыре копии p2 даже
[01:08:54.140 --> 01:08:57.780]  сюда прекрасно вкладываются, ведь вот эта q может быть очень длинным, она же
[01:08:57.780 --> 01:09:05.700]  не обязана быть ровно 4p1. То есть по нему мы только знаем, что оно больше
[01:09:05.700 --> 01:09:11.260]  либо там больше либо равно, чем 3p1, но насколько больше мы не знаем.
[01:09:12.260 --> 01:09:23.860]  Если p2 меньше, чем q делить на k, то кажется это будет несколько раз повторенный p1.
[01:09:23.860 --> 01:09:32.220]  Ну пока да. То есть более того первое, что мы скажем, то что вот у этой строки shift он
[01:09:32.220 --> 01:09:42.980]  заведомо p1, правда. И более того, и более того заметим следующее, смотрите, что shift
[01:09:42.980 --> 01:09:51.180]  так не равен ровно p1, ну других там, то есть там других шифтов у нее очевидно нету, но тогда
[01:09:51.180 --> 01:10:00.700]  если мы тут сдвинули на p1, то тогда мы получаем здесь снова нот, то есть тогда мы получаем
[01:10:00.700 --> 01:10:05.740]  действительно снова p1, там, периодичную какую-то строчку. То есть в принципе есть
[01:10:05.740 --> 01:10:10.060]  подозрение, что пока эта строчка не станет достаточно маленькой, то, наверное, мы просто
[01:10:10.060 --> 01:10:16.260]  тут на p1 можем честно сдвигаться. То есть дело в том, что дальше у нас все равно shift станется
[01:10:16.260 --> 01:10:29.260]  таким, но дальше он просто не сдвинется. Почему так? Потому что получается, что раз вот эта
[01:10:29.260 --> 01:10:34.340]  вся строка была p1 периодично, а мы тут сдвинулись ровно на p1, то есть сказали,
[01:10:34.340 --> 01:10:42.020]  что вот это вот 2p1, то по крайней мере поначалу будет оказываться, что мы этот символ будем
[01:10:42.020 --> 01:10:50.500]  сравнивать с абсолютно тем же символом, что и раньше. Понимаете, да? Ну вот, то есть с каким-то
[01:10:50.980 --> 01:11:01.500]  тем же. Поэтому получается, что до некоторого момента будут проблемы. Другой вопрос,
[01:11:01.500 --> 01:11:08.140]  а какие условия у нас были для того, чтобы гарантировать, что у нас shift будет ровно такой?
[01:11:08.140 --> 01:11:16.340]  Достаточно короткая, потому что сейчас у нас для того, чтобы гарантировать,
[01:11:16.340 --> 01:11:22.780]  что shift только либо p1, либо qdelete на k. Пока нам требовалось, чтобы p1 мог на это претендовать,
[01:11:22.780 --> 01:11:29.620]  у нас тут было условие, что это у нас хотя бы 4 копии тут есть. Может быть тут и 5, и 6, и так далее.
[01:11:29.620 --> 01:11:40.380]  Ну да, да, да, 3, хорошо. Ну хорошо, 3 копии точно. Вот так давайте, хорошо я нарисую. Да, 3 копии.
[01:11:40.380 --> 01:11:51.180]  Да нет, нормально. Так, вот, то есть жили были вот такие 3 копии, с ними все в порядке. Ну вот,
[01:11:51.180 --> 01:11:59.700]  ну хотя тут действительно отдельная песня, потому что в принципе, то есть на самом деле,
[01:11:59.700 --> 01:12:04.500]  если этот p1 оказался больше, чем qdelete на k, то в принципе уже можно на qdelete на k сдвигаться,
[01:12:04.500 --> 01:12:16.660]  потому что все равно других шрифтов типа нет. Ну скажем так, с одной стороны мы ничего нового,
[01:12:16.660 --> 01:12:24.780]  ну скажем так, ну давайте так, с одной стороны мы ничего нового не откроем, с другой стороны мы
[01:12:24.780 --> 01:12:31.420]  как бы shift будем точно знать. То есть если это был shift, p1 это shift, то мы в принципе q уже знаем,
[01:12:31.420 --> 01:12:35.940]  что оно вот такое и в принципе можем продолжить за линию. Другой вопрос, что копий тут может
[01:12:35.940 --> 01:12:43.340]  быть настолько много, что здесь этот reach тоже может быть там больше, чем k на вот это вот. Такое
[01:12:43.340 --> 01:12:48.940]  вполне, ну вот, то есть действительно такое у нас теоретически вполне может быть.
[01:12:48.940 --> 01:13:01.980]  Вот, но другой вопрос, что мне почему-то все равно очень хочется утверждать, что не может быть так,
[01:13:01.980 --> 01:13:09.020]  что самое главное для нас, что на самом деле kp2 вкладывается вот в это вот, по 1 плюс q.
[01:13:09.020 --> 01:13:23.300]  Ну в принципе вообще у нас когда-то было верно маленькое утверждение,
[01:13:23.300 --> 01:13:28.300]  что если у нас есть два разных префиксных периода, то эти префиксные периоды отличаются
[01:13:28.300 --> 01:13:37.420]  друг от друга хотя бы в k-1 раз. Когда-то давным-давно такое утверждение было. Почему оно было?
[01:13:37.420 --> 01:13:55.820]  Почему именно k-1, кстати, а не k? Ну вот нет, на самом деле идея очень простая. Нет, потому что там
[01:13:55.820 --> 01:14:04.900]  просто идея была такая, что допустим у нас есть какой-то префиксный период p2, который длины
[01:14:04.900 --> 01:14:14.540]  меньше чем 3p1. Тогда у нас оказывается, что там хотя бы строка длины вот этой вот, там p2
[01:14:14.540 --> 01:14:22.260]  плюс p1, она и p2 периодично. Вот, то есть вот так вот, и еще вот так вот, и вот так вот, типа p2
[01:14:22.260 --> 01:14:28.900]  плюс p1. То есть оказывалось, что это строка и p1 периодично, и p2 периодично. Следовательно,
[01:14:28.900 --> 01:14:37.780]  она гцд от p1 и p2 периодично. Следовательно, как минимум вот эта строка не базовая до свидания.
[01:14:37.780 --> 01:14:49.780]  Понимаете, да? Вот, поэтому в принципе отсюда можно сделать вывод. То есть отсюда можно
[01:14:49.780 --> 01:14:59.420]  действительно сделать маленький приятный вывод, что p2 имеет смысл искать только, ну как минимум,
[01:14:59.420 --> 01:15:09.460]  начинает с k-1 на p1. Это как минимум. А как максимум, на самом деле, ровно по этой же причине. Я
[01:15:09.460 --> 01:15:17.220]  утверждаю, что p2 имеет смысл искать, начиная, ну то есть такие, утверждается такое. Скажем так,
[01:15:17.220 --> 01:15:24.020]  во-первых, то есть так, p2 должно быть больше либо равно, чем k-1 на p1. Это я уже могу сказать. А еще
[01:15:24.020 --> 01:15:33.420]  я могу из тех же утверждений утверждать, что p2 должно быть больше либо равно, чем, знаете,
[01:15:33.420 --> 01:15:52.180]  что? Чем вот эта вот старая q? Даже я бы сказал, строго больше, чем q. Да, q это длина вот этой строки.
[01:15:52.180 --> 01:15:59.460]  Ну то есть вот это минус p1. Если у меня p2 будет где-то, то есть если p2 будет заканчиваться хотя бы
[01:15:59.460 --> 01:16:15.420]  на p1 раньше, чем вот этот речь, то рассуждение будет абсолютно то же самое. Ну типа того. Вот,
[01:16:15.420 --> 01:16:23.100]  ну то есть, нет, ну да, то есть применяем ГЦД радость. Так вот, так вот, идея такая. Так давайте
[01:16:23.180 --> 01:16:29.740]  вот с какого-нибудь, да, с какого-нибудь максимума из вот этого и этого и начнем.
[01:16:29.740 --> 01:16:39.340]  Или просто начнем с максимума из, ну или может быть просто надо сказать, что p2 давайте с q и
[01:16:39.340 --> 01:16:48.460]  начнем и просто с нуля. Так вот, хочется, но просто чем это приятно? Это приятно тем, что если мы
[01:16:48.460 --> 01:16:54.100]  возьмем такое достаточно большое p2, то kp2 заведомо закончится позже, чем здесь, правда?
[01:16:54.100 --> 01:17:02.540]  Нет, вот изначально-то у нас этого не было, мы из-за этого в общем-то и страдаем. То есть просто
[01:17:02.540 --> 01:17:09.540]  начиная с какой-то позиции там, то есть как бы есть тут периодов не 3, а 33, то как бы 2п1 нам
[01:17:09.540 --> 01:17:14.620]  тогда вот с точки зрения вот этого речи подойдет 3п1 подойдет, что угодно подойдет. А мы и хотим,
[01:17:14.620 --> 01:17:21.660]  чтобы оно подходило. Но если мы стартуем, что p2 это хотя бы, извиняюсь, просто там p1
[01:17:21.660 --> 01:17:29.860]  плюс q и минус p1 еще, там плюс p, то уже заведомо тогда 4 штуки, то есть даже уже вторая копия p2
[01:17:29.860 --> 01:17:35.380]  уже за пределы этого префикса выйдет, правда? Но теперь хочется утверждать следующее. Так давайте
[01:17:35.380 --> 01:17:42.020]  начиная с этого момента искать себе действительно вот эту штуку ровно по этому механизму,
[01:17:42.020 --> 01:17:48.420]  да? И тогда утверждаю, что если мы начиная с этого момента найдем там какую-то вот,
[01:17:48.420 --> 01:17:54.860]  начиная с этой позиции, начнем какую-то вот какую-то там позицию x, что рич у нас от x будет
[01:17:54.860 --> 01:18:01.020]  больше либо равен 4x, то я утверждаю, что этот x как раз вторым префиксным периодом и станет.
[01:18:01.020 --> 01:18:09.580]  Так, ну пока мне хочется, я еще пока не понял, почему это так.
[01:18:09.580 --> 01:18:30.100]  Так, ну давайте еще рассмотреть, да, то есть давайте вот начиная с этого момента, то есть
[01:18:30.260 --> 01:18:35.340]  хорошо, вот p1 у нас какой-то префиксный период есть и вот оно вот, давайте вот сейчас еще раз
[01:18:35.340 --> 01:18:47.620]  отрушу, чтобы тут было красиво, то есть давайте думать, что у нас тут могло теперь быть. А тут я
[01:18:47.620 --> 01:18:57.100]  могу хоть вот так вешать. Так, еще раз, рич от p, то есть жила было p1, он был какой-то маленький,
[01:18:57.980 --> 01:19:03.740]  и вот мы искали-искали и нашли какую-то вот мистическую позицию, вон тут далеко x,
[01:19:03.740 --> 01:19:14.900]  что у нее тут вот 4 копии нашлось, вот и x причем достаточно большое, то есть настолько большое,
[01:19:14.900 --> 01:19:23.700]  что как бы 3 копии p1 точно в этот x умещаются, да, и даже в рич это все умещается. Вот вы текаетесь
[01:19:23.700 --> 01:19:29.860]  первый вопрос, нашли такой видимо минимальный x, возникает вопрос, верно ли, что этот x базовый,
[01:19:29.860 --> 01:19:42.140]  ну вот, то есть что вот это минимально, ну вот, ну давайте смотреть, потому что если x оказался
[01:19:42.140 --> 01:19:47.380]  не базовый, то значит у нас тут где-то что-то типа то ли x пополам, то ли x поделить на 3,
[01:19:47.380 --> 01:19:53.220]  в общем первое вхождение было какое-то сильно раньше, но единственная у нас проблема, что мы
[01:19:53.220 --> 01:20:05.220]  его могли попытаться приноть, но что это за база могла быть, что это за база могла быть,
[01:20:05.220 --> 01:20:13.900]  вот здесь уже не просто работает, что у нас других прификсных периодов нет, да,
[01:20:13.900 --> 01:20:29.460]  но вот теоретически да, теоретически это вполне может быть, вот, а почему, потому что если не
[01:20:29.460 --> 01:20:36.180]  базовая, значит есть какой-то период, так и есть его период, его период, его период, да, ну возьмем
[01:20:36.180 --> 01:20:42.900]  короче, давайте, хорошо, возьмем минимальный, ну как всегда, возьмем минимальный, возьмем
[01:20:42.900 --> 01:20:57.020]  минимальный период x, он точно базовый, но скажем так, ну вот, ну что это может быть, действительно,
[01:20:57.020 --> 01:21:05.580]  что это может быть, нет, скажем так, вопрос, кстати, сколько у этих x будет этих копий одинаковых,
[01:21:05.580 --> 01:21:14.900]  если этих копий одинаковых хотя бы четыре, нет, вот уже внутри самого x есть, как бы сам x это
[01:21:14.900 --> 01:21:20.860]  четыре копии одного и того же или больше, тогда длина этой копии, ну вот, тогда длина этой копии
[01:21:20.860 --> 01:21:27.900]  может быть чем, ну тогда что-то очень хочется сказать, что больше чем p1, потому что кроме как
[01:21:27.900 --> 01:21:48.060]  p1 она ничем быть не может, ну вот, ну да, то есть действительно, если она, ну как кратно, ну вот,
[01:21:48.060 --> 01:21:54.940]  кратно p1 она, ну да, ну да, то есть это тот период, он не может делиться на p1, потому что тогда,
[01:21:54.940 --> 01:21:59.740]  во-первых, тогда понятно, что просто p1 это просто период этого префикса, причем на целый делящийся,
[01:21:59.740 --> 01:22:06.300]  и тогда получается, что x тут у нас, то есть x в этот reach входит, а мы x брали достаточно большим,
[01:22:06.300 --> 01:22:12.580]  чтобы он тут как бы в этот reach, ну то есть в reach может быть и не входил, точнее так, x может
[01:22:12.580 --> 01:22:20.980]  входить в reach, но x умножить на 4 полностью в reach не входит, поэтому тогда получается,
[01:22:20.980 --> 01:22:29.220]  что если этот меньше период есть, то он как бы получается не p1, то есть видимо и не кратен p1,
[01:22:29.220 --> 01:22:36.020]  значит, следовательно, ну вот, ну вот, но так как x у нас как минимум 3 p1, то тогда получается,
[01:22:36.020 --> 01:22:42.420]  что этот префикс у нас gcd от p1 и чего-то там еще периодичен, и тогда получается,
[01:22:42.420 --> 01:22:51.420]  что мы нашли меньше период. Нет, наоборот, мы же уже, мы сказали, что x больше, чем 3 p1,
[01:22:51.420 --> 01:23:04.260]  мы же только начиная с этого момента ищем, вот, то есть напоминаю, что у нас x, то есть что у нас
[01:23:04.260 --> 01:23:13.660]  произошло, x, во-первых, больше, чем k-1 на p1, то есть те самые 3, и x больше, чем, по сути,
[01:23:13.660 --> 01:23:28.660]  я так скажу, reach с индексом v от p1, минус p1. Вот. В общем-то, то есть вот это условие,
[01:23:28.980 --> 01:23:33.620]  то есть это условие нам гарантистировано, что, то есть, допустим, мы нашли вот такой,
[01:23:33.620 --> 01:23:38.780]  то есть такой минимальный x, допустим, мы нашли такой минимальный x, что верно, вот это условие,
[01:23:38.780 --> 01:23:50.020]  это условие, и reach оказался от x больше либо равен, чем kx. Вот утверждается, что если мы такой
[01:23:50.020 --> 01:23:55.660]  минимальный x случайно найдем, минимальный, то он и есть второй префиксный период, а до этого
[01:23:55.660 --> 01:24:03.420]  момента никаких префиксных периодов, кроме охраня p1, не было. База очевидна, потому что мы
[01:24:03.420 --> 01:24:07.940]  уже знаем, что вот в этих позициях не превосходящих вот этого, вот никаких других префиксных периодов
[01:24:07.940 --> 01:24:16.580]  по-любому нет. Помним, да? Помним, да. Отлично. Есть у нас теперь reach, есть у нас minimum,
[01:24:16.580 --> 01:24:29.660]  есть радость. Что у нас теперь еще есть? Значит, идем теперь на vx. Вот, то есть теперь мы говорим,
[01:24:29.660 --> 01:24:33.780]  что фактически, что нам нужно доказать? То есть нам нужно, по сути, доказать, что вот эта строка
[01:24:33.780 --> 01:24:42.100]  базовая. Хотим мы это доказать? Хотим. И теперь говорим, что пусть она не базовая, то есть пусть
[01:24:42.100 --> 01:24:50.980]  неожиданно выяснилось, что v от 1 x равно, на самом деле, какой-нибудь там t в степени l, где l больше
[01:24:50.980 --> 01:25:02.260]  одного. Тогда, смотрите, тогда отсюда следует, что в принципе вот это вот v от 1 делить на x,
[01:25:02.260 --> 01:25:19.260]  она p0. Ну, что при нее тогда можно сказать? Ну, как минимум, она модуль t периодично. Так, то есть
[01:25:19.260 --> 01:25:28.740]  она модуль t периодично. Что, какой из этого можно сделать вывод? Ну, на самом деле, да, то есть
[01:25:28.740 --> 01:25:32.820]  нельзя сказать, что вот это строка не обязательно p1 периодично, потому что x может быть совсем
[01:25:32.820 --> 01:25:53.940]  больше. Но, вот. Но, в чем она? В чем у нас тогда может быть противоречие? Ну, допустим, вот,
[01:25:53.940 --> 01:25:58.940]  Ну, то есть, модуль Т периодично, казалось бы. В чем проблема?
[01:25:58.940 --> 01:26:06.940]  Не, но если модуль Т сам, если Т само удовлетворяет вот этим условиям, то противоречит тем, что мы нашли минимальный х.
[01:26:06.940 --> 01:26:12.940]  Угу. Так. И что? Ну, хорошо, допустим, модуль Т... Дам.
[01:26:12.940 --> 01:26:16.940]  Конечно, тогда, допустим, тогда модуль Т не удовлетворяет этим условиям, что...
[01:26:16.940 --> 01:26:18.940]  Вот. Если он удовлетворяет, то...
[01:26:18.940 --> 01:26:19.940]  Так.
[01:26:19.940 --> 01:26:22.940]  Ну, то, то будет, то Т плюс П1.
[01:26:22.940 --> 01:26:23.940]  Ну, такие давайте...
[01:26:23.940 --> 01:26:25.940]  И Т периодично, и П1 периодично.
[01:26:28.940 --> 01:26:31.940]  Так. Ну, там как повезет. Может, еще Т достаточно маленькая, кстати.
[01:26:31.940 --> 01:26:32.940]  Ну, оно хотя бы...
[01:26:32.940 --> 01:26:35.940]  Ну, точнее так. Давайте так. То есть, давайте так. Модуль...
[01:26:35.940 --> 01:26:39.940]  То есть, смотрите, давайте так. Модуль Т удовлетворяет вот этому условию, да?
[01:26:41.940 --> 01:26:43.940]  Ну, вот этому-то оно точно удовлетворяет?
[01:26:43.940 --> 01:26:44.940]  Ну, так.
[01:26:44.940 --> 01:26:45.940]  Модуль Т?
[01:26:45.940 --> 01:26:47.940]  Да. Модуль Т удовлетворяет вот этому условию.
[01:26:47.940 --> 01:26:49.940]  Ну, если вместо х подставить модуль Т.
[01:26:50.940 --> 01:26:55.940]  Ну, потому что если тут 4 копии х и сам х делится на Т, то само Т тоже там 4 копии.
[01:26:55.940 --> 01:27:00.940]  Там даже 4... Там 4 умножить на... Там х делить на Т найдется.
[01:27:00.940 --> 01:27:01.940]  Вот.
[01:27:01.940 --> 01:27:03.940]  Ну, значит, тогда получается...
[01:27:03.940 --> 01:27:08.940]  Если Т меньше, чем П1, то, причем, речь о с выбором П1.
[01:27:08.940 --> 01:27:09.940]  Ну да.
[01:27:10.940 --> 01:27:11.940]  Заметим. Да.
[01:27:11.940 --> 01:27:12.940]  Что да?
[01:27:12.940 --> 01:27:16.940]  Тогда, значит, модуль Т больше... Давайте пишем. Больше, чем П1.
[01:27:16.940 --> 01:27:19.940]  То есть, там больше либо равно П1.
[01:27:20.940 --> 01:27:21.940]  Ну, вот. Иначе...
[01:27:23.940 --> 01:27:25.940]  Иначе Т было бы...
[01:27:27.940 --> 01:27:29.940]  ...прификсным периодом.
[01:27:31.940 --> 01:27:33.940]  Вот. Так. Хорошо.
[01:27:35.940 --> 01:27:36.940]  Ну, с другой... Так. И что?
[01:27:36.940 --> 01:27:44.940]  С другой стороны, да. Заметим, что модуль Т не равно П1.
[01:27:44.940 --> 01:27:46.940]  Вот так скажем. Да?
[01:27:46.940 --> 01:27:47.940]  Почему?
[01:27:47.940 --> 01:27:52.940]  Потому что наша... Ну, иначе у нас вся эта строка П1 периодично.
[01:27:53.940 --> 01:27:54.940]  Ну, вот.
[01:27:54.940 --> 01:27:56.940]  А мы уже вылезли по определению.
[01:27:56.940 --> 01:27:58.940]  Ну, вот. Иначе...
[01:27:59.940 --> 01:28:01.940]  Ну да. То есть, иначе...
[01:28:01.940 --> 01:28:02.940]  Иначе, значит...
[01:28:05.940 --> 01:28:08.940]  То есть, иначе, на самом деле, оказывается, что...
[01:28:08.940 --> 01:28:10.940]  Действительно, это Т нот.
[01:28:10.940 --> 01:28:13.940]  То есть, у нас эти 4 Х оказываются в речи от П1.
[01:28:13.940 --> 01:28:15.940]  То есть, иначе КХ нот.
[01:28:15.940 --> 01:28:23.940]  Иначе получается КХ меньше либо равно речь от П1.
[01:28:26.940 --> 01:28:27.940]  С индексом. Да.
[01:28:31.940 --> 01:28:32.940]  Ну, вот.
[01:28:32.940 --> 01:28:33.940]  А это невозможно.
[01:28:33.940 --> 01:28:35.940]  А почему это невозможно, кстати?
[01:28:37.940 --> 01:28:39.940]  Что именно невозможно?
[01:28:40.940 --> 01:28:44.940]  Ну, почему невозможно, что КХ...
[01:28:44.940 --> 01:28:48.940]  Почему не может так оказаться, что КХ меньше либо равен, чем речь от П1?
[01:28:48.940 --> 01:28:50.940]  Это у вас в условиях? А, нет?
[01:28:50.940 --> 01:28:53.940]  Нет. У меня в условиях написано немножко другое.
[01:28:53.940 --> 01:28:58.940]  Короче говоря, вы взяли Х так, чтобы его 4 вхождения вылезали за пределы.
[01:28:58.940 --> 01:28:59.940]  Угу.
[01:28:59.940 --> 01:29:00.940]  Ну...
[01:29:01.940 --> 01:29:02.940]  Нет, ну да.
[01:29:03.940 --> 01:29:04.940]  Ну вот.
[01:29:04.940 --> 01:29:05.940]  Так, ну да.
[01:29:05.940 --> 01:29:06.940]  Но заметим, что...
[01:29:06.940 --> 01:29:09.940]  Уже два вхождения Х вылезают за пределы, и с первых двух не нравится.
[01:29:09.940 --> 01:29:10.940]  Ну да.
[01:29:11.940 --> 01:29:14.940]  Ну да. То есть, заметим, что речь...
[01:29:15.940 --> 01:29:23.940]  Ну, то есть, из этого следует, что КХ должно быть строго меньше, если верить этому условию, как Х плюс П1.
[01:29:23.940 --> 01:29:31.940]  Да, то есть, из этого должно следовать, что П1 больше, чем, получается, Х умножить на...
[01:29:33.940 --> 01:29:34.940]  Нет.
[01:29:34.940 --> 01:29:42.940]  Ну, смотрите, у вас Х от К-1 на П1, и потом вы знаете, что Х больше, чем речь, минус П1.
[01:29:42.940 --> 01:29:43.940]  Ну...
[01:29:43.940 --> 01:29:45.940]  Очевидно, К-1 на П1 больше, чем...
[01:29:45.940 --> 01:29:47.940]  Нет, давайте так. Х...
[01:29:47.940 --> 01:29:51.940]  Значит, 2Х больше, чем речь П1.
[01:29:51.940 --> 01:29:53.940]  Больше, чем речь П1.
[01:29:53.940 --> 01:29:54.940]  Во.
[01:29:54.940 --> 01:29:56.940]  А, впрочем, это неважно.
[01:29:56.940 --> 01:29:57.940]  А, ну можно и так...
[01:29:57.940 --> 01:29:59.940]  А, можно просто вот фейл с этим условием.
[01:29:59.940 --> 01:30:01.940]  Я просуммирую эти условия.
[01:30:02.940 --> 01:30:03.940]  Ну...
[01:30:04.940 --> 01:30:05.940]  Ну можно, ну как угодно.
[01:30:05.940 --> 01:30:08.940]  Ладно, это уже не так принципиально.
[01:30:09.940 --> 01:30:10.940]  Так.
[01:30:11.940 --> 01:30:13.940]  То есть, в принципе, да, Х...
[01:30:14.940 --> 01:30:15.940]  Хотя нет, погодите.
[01:30:15.940 --> 01:30:19.940]  Нет, Х меньше, чем П1 делить на К-1.
[01:30:19.940 --> 01:30:21.940]  Но он должен быть больше, чем П1 умножить на К-1.
[01:30:21.940 --> 01:30:22.940]  Даже так.
[01:30:22.940 --> 01:30:23.940]  Ну, типа.
[01:30:24.940 --> 01:30:25.940]  Да.
[01:30:25.940 --> 01:30:26.940]  Ладно, ну в общем, как угодно.
[01:30:26.940 --> 01:30:27.940]  Хорошо.
[01:30:27.940 --> 01:30:28.940]  Модуль Т больше, чем П1.
[01:30:28.940 --> 01:30:29.940]  Что это значит?
[01:30:29.940 --> 01:30:30.940]  Так.
[01:30:31.940 --> 01:30:32.940]  Ну еще, наверное, почему-то...
[01:30:35.940 --> 01:30:39.940]  Ну еще, наверное, и так значит модуль Т больше, чем П1, как мы выяснили.
[01:30:40.940 --> 01:30:41.940]  Да.
[01:30:41.940 --> 01:30:46.940]  Так, я утверждаю, что еще модуль Т не делится на П1.
[01:30:49.940 --> 01:30:50.940]  Ну...
[01:30:50.940 --> 01:30:51.940]  Нет, вот это уже...
[01:30:51.940 --> 01:30:53.940]  Хотя нет, вот это уже не так очевидно.
[01:30:53.940 --> 01:30:56.940]  Не, ну потому что тогда Х тоже...
[01:30:56.940 --> 01:30:58.940]  Потому что тогда Т не базовая.
[01:30:59.940 --> 01:31:00.940]  Что?
[01:31:00.940 --> 01:31:01.940]  Нет, не факт.
[01:31:02.940 --> 01:31:03.940]  Нет, знаете, там как может быть?
[01:31:03.940 --> 01:31:10.940]  У вас вот П1, П1, П1, П1, там любая бредятина, а потом П1, П1, П1, П1, любая бредятина.
[01:31:12.940 --> 01:31:13.940]  Так, ну хорошо.
[01:31:13.940 --> 01:31:16.940]  Сейчас, ну если Т делится на П1, а Х делится на Т...
[01:31:16.940 --> 01:31:22.940]  Еще раз, Т меньше, чем К-1 на П1.
[01:31:24.940 --> 01:31:27.940]  У нас пока ограничение на Т только...
[01:31:27.940 --> 01:31:30.940]  Короче говоря, у нас Т не удовлетворяет условиям на Х.
[01:31:31.940 --> 01:31:35.940]  Нет, погодите, пока мы доказали только то, что Т строго больше, чем П1.
[01:31:35.940 --> 01:31:36.940]  Это все, что мы знаем.
[01:31:36.940 --> 01:31:39.940]  Т не удовлетворяет условиям на Х, иначе у нас модулы Х.
[01:31:40.940 --> 01:31:41.940]  Так?
[01:31:41.940 --> 01:31:42.940]  Это мы тоже знаем.
[01:31:43.940 --> 01:31:49.940]  Но если она не удовлетворяет условиям на Х, то она должна быть левее, чем reach В от П1.
[01:31:59.940 --> 01:32:06.940]  Если она левее, чем reach В от П1, и делится на П1, тогда она просто П1 умножить на что-то.
[01:32:06.940 --> 01:32:10.940]  Ну да, или у этой строки есть период меньше, чем П1.
[01:32:10.940 --> 01:32:11.940]  Не, она не базовая.
[01:32:11.940 --> 01:32:12.940]  Да-да-да.
[01:32:12.940 --> 01:32:14.940]  Нет, ну Т, ну да.
[01:32:15.940 --> 01:32:16.940]  А, ну да, можно было...
[01:32:16.940 --> 01:32:17.940]  Ну вот.
[01:32:17.940 --> 01:32:18.940]  Так, ну хорошо.
[01:32:18.940 --> 01:32:20.940]  И так, модуль Т мы доказали больше, чем П1.
[01:32:20.940 --> 01:32:23.940]  А еще мы говорим, что...
[01:32:25.940 --> 01:32:26.940]  Ну вот.
[01:32:28.940 --> 01:32:29.940]  Так, сейчас давай так...
[01:32:29.940 --> 01:32:32.940]  Интересно, кстати, почему Т не удовлетворяет условиям на Х.
[01:32:32.940 --> 01:32:37.940]  Да, если бы Т удовлетворяла эти условия, то мы бы в качестве...
[01:32:37.940 --> 01:32:39.940]  То есть тогда противоречие с выбором Х.
[01:32:40.940 --> 01:32:41.940]  Понимаете, да?
[01:32:42.940 --> 01:32:43.940]  Вот.
[01:32:43.940 --> 01:32:44.940]  Так, вы там это живы?
[01:32:47.940 --> 01:32:48.940]  Хорошо.
[01:32:48.940 --> 01:32:50.940]  И так, жил был модуль Т.
[01:32:50.940 --> 01:32:54.940]  Но получается, единственное условие, которое мы доказали больше, чем П1.
[01:32:54.940 --> 01:32:55.940]  Ну да.
[01:32:56.940 --> 01:32:57.940]  Хорошо.
[01:32:58.940 --> 01:33:00.940]  И так, жил был модуль Т.
[01:33:00.940 --> 01:33:02.940]  Но получается, единственное условие...
[01:33:04.940 --> 01:33:05.940]  Нет, хотя подождите.
[01:33:05.940 --> 01:33:08.940]  Каким условием это действительно может нарушать?
[01:33:08.940 --> 01:33:09.940]  Какие условия могут нарушать?
[01:33:09.940 --> 01:33:11.940]  Так, это условие точно выполнено.
[01:33:11.940 --> 01:33:14.940]  А вот какие-то вот эти условия как бы уже не факт.
[01:33:20.940 --> 01:33:22.940]  Я не понимаю вопроса.
[01:33:22.940 --> 01:33:23.940]  Слишком.
[01:33:25.940 --> 01:33:27.940]  Слушай, ну мы скажем так.
[01:33:27.940 --> 01:33:33.940]  Учитывая там длинную цепочку, мы сейчас глобально ищем второй префиксный период.
[01:33:33.940 --> 01:33:35.940]  Мы доказываем, что Х не будет.
[01:33:35.940 --> 01:33:38.940]  Мы доказываем, что Т не делится на П1.
[01:33:38.940 --> 01:33:40.940]  Мы доказываем, что Х базовая.
[01:33:40.940 --> 01:33:41.940]  Нет, мы хотим так.
[01:33:41.940 --> 01:33:46.940]  Мы, допустим, мы нашли какой-то такой минимальный Х, удовлетворяющий вот этим условиям.
[01:33:46.940 --> 01:33:49.940]  Вот этим, точнее, просто вот, минимальный Х, удовлетворяющий этим условиям.
[01:33:49.940 --> 01:33:53.940]  Мы пытаемся доказать, что Х это и есть второй префиксный период.
[01:33:53.940 --> 01:33:56.940]  Ну тогда пусть есть такое Т, тогда, тогда, тогда.
[01:33:56.940 --> 01:33:57.940]  Точнее, да.
[01:33:57.940 --> 01:34:00.940]  Для начала мы доказываем, что...
[01:34:00.940 --> 01:34:02.940]  Ну то есть, точнее так.
[01:34:02.940 --> 01:34:05.940]  Единственное, что мы доказываем, это то, что Х базовая, по сути.
[01:34:05.940 --> 01:34:06.940]  Что Х базовая.
[01:34:06.940 --> 01:34:08.940]  Это все, что нам надо.
[01:34:08.940 --> 01:34:12.940]  Мы говорим, так пусть у нас Х оказалась случайно не базовой.
[01:34:12.940 --> 01:34:17.940]  То есть она оказалась там Т в степени L, L больше 1, в чем, естественно, L мы берем максимально возможно.
[01:34:17.940 --> 01:34:20.940]  А T максимально маленькая.
[01:34:20.940 --> 01:34:24.940]  Мы показали, что T больше, чем P1.
[01:34:24.940 --> 01:34:25.940]  Вот.
[01:34:25.940 --> 01:34:28.940]  Значит, заявили мы.
[01:34:28.940 --> 01:34:33.940]  Еще мы утверждаем, что T не удовлетворяет вот этим условиям.
[01:34:33.940 --> 01:34:35.940]  Точнее, одновременно всем трех не удовлетворяет.
[01:34:35.940 --> 01:34:39.940]  Потому что иначе бы мы противоречили с выбором Х.
[01:34:39.940 --> 01:34:40.940]  Но следовательно...
[01:34:40.940 --> 01:34:43.940]  Но смотрите, но так как Х удовлетворяет вот этому условию,
[01:34:43.940 --> 01:34:47.940]  то, очевидно, вот это Т тоже будет удовлетворять этому условию еще и с большим запасом.
[01:34:47.940 --> 01:34:48.940]  Правда?
[01:34:48.940 --> 01:34:49.940]  Да.
[01:34:49.940 --> 01:34:54.940]  Следовательно, они удовлетворяют кому-то из вот этих условий.
[01:34:54.940 --> 01:34:56.940]  Угу. Все проще.
[01:34:56.940 --> 01:34:58.940]  Вот.
[01:34:58.940 --> 01:35:07.940]  То есть, по сути, получается, что T меньше либо равно, чем K-1 на P1.
[01:35:07.940 --> 01:35:16.940]  Или модуль T меньше либо равно, чем reach от P1 минус P1.
[01:35:16.940 --> 01:35:19.940]  Вот.
[01:35:19.940 --> 01:35:26.940]  Но теперь хочется сказать, что с каждым из этих условий у нас получится и должно получиться какое-то противоречие.
[01:35:26.940 --> 01:35:30.940]  Какое?
[01:35:30.940 --> 01:35:33.940]  Ну...
[01:35:33.940 --> 01:35:36.940]  Если мы к Т прибавим еще P1 символов,
[01:35:36.940 --> 01:35:39.940]  мы все еще будем меньше, чем reach от V.
[01:35:39.940 --> 01:35:40.940]  Хотя...
[01:35:40.940 --> 01:35:41.940]  Давайте так.
[01:35:41.940 --> 01:35:45.940]  Начнем с того, что какое-то из этих утверждений не верно.
[01:35:45.940 --> 01:35:47.940]  Но заметим, что если...
[01:35:47.940 --> 01:35:48.940]  Давайте так.
[01:35:48.940 --> 01:35:49.940]  Заметим, что...
[01:35:49.940 --> 01:35:50.940]  То есть, какое-то из этих утверждений точно верно.
[01:35:50.940 --> 01:35:56.940]  Но заметим, что если вот это верно, то это точно верно, потому что reach от P1 больше либо равно, чем K-P1.
[01:35:56.940 --> 01:35:57.940]  Правда?
[01:35:57.940 --> 01:35:59.940]  Да.
[01:35:59.940 --> 01:36:00.940]  Да?
[01:36:00.940 --> 01:36:01.940]  Да.
[01:36:01.940 --> 01:36:02.940]  То есть, в принципе, мы заведы...
[01:36:02.940 --> 01:36:03.940]  То есть, в принципе, я тут...
[01:36:03.940 --> 01:36:04.940]  Сорочу нас с выборочными условиями.
[01:36:04.940 --> 01:36:05.940]  То есть, на самом деле, да.
[01:36:05.940 --> 01:36:09.940]  То есть, в общем-то, по факту мы можем рассматривать только вот это условие.
[01:36:09.940 --> 01:36:14.940]  Потому что вот это условие просто более сильное.
[01:36:14.940 --> 01:36:18.940]  И так, значит, тогда мы его, значит, вот это мы не рассматриваем.
[01:36:18.940 --> 01:36:21.940]  И просто говорим, жил-был вот этот reach.
[01:36:21.940 --> 01:36:24.940]  То есть, модуль T оказался таким.
[01:36:24.940 --> 01:36:27.940]  Вот.
[01:36:27.940 --> 01:36:31.940]  Но тогда из этого я могу сделать вывод.
[01:36:31.940 --> 01:36:35.940]  Тогда, значит, из этого всего я делаю такой вывод.
[01:36:35.940 --> 01:36:49.940]  Что префикс длины модуль T плюс P1, P1 периодичен и модуль T периодичен.
[01:36:55.940 --> 01:36:58.940]  Ну, модуль P1 периодичен ровно вот по этой...
[01:36:58.940 --> 01:36:59.940]  Ну, вот.
[01:36:59.940 --> 01:37:00.940]  То есть, ровно вот по этой причине.
[01:37:00.940 --> 01:37:03.940]  Потому что вот эта строка входит в reach от P1.
[01:37:03.940 --> 01:37:05.940]  А модуль T периодично.
[01:37:05.940 --> 01:37:12.940]  Ну, просто потому что на самом деле у нас как минимум две копии T в начале строки V существует.
[01:37:12.940 --> 01:37:13.940]  Вот.
[01:37:13.940 --> 01:37:17.940]  Но тогда из этого следует что?
[01:37:17.940 --> 01:37:20.940]  Тогда из этого следует, что у нас...
[01:37:20.940 --> 01:37:21.940]  Тогда вот эту нот.
[01:37:21.940 --> 01:37:24.940]  Тогда у этого V есть...
[01:37:24.940 --> 01:37:27.940]  То есть, тогда у нас тут есть период у T и P1.
[01:37:27.940 --> 01:37:31.940]  То есть, у T есть период GCD от T и P1.
[01:37:34.940 --> 01:37:36.940]  Но в принципе это уже противоречие.
[01:37:36.940 --> 01:37:40.940]  Потому что тогда сама противоречие даже не с базовостью строки P.
[01:37:40.940 --> 01:37:42.940]  Там P1 вот этой.
[01:37:42.940 --> 01:37:44.940]  А с базовостью строки T.
[01:37:47.940 --> 01:37:51.940]  То есть отсюда в принципе автоматически следует, что V от...
[01:37:51.940 --> 01:37:54.940]  Да, тут 1 T.
[01:37:55.940 --> 01:38:04.940]  Она, оказывается, нот от модуль T запятая P1 периодично.
[01:38:06.940 --> 01:38:09.940]  И этот период он строго меньше, чем T.
[01:38:11.940 --> 01:38:13.940]  С одной стороны он строго меньше, чем T.
[01:38:13.940 --> 01:38:16.940]  С другой стороны является делителем модуль T, потому что это GCD.
[01:38:16.940 --> 01:38:18.940]  Вывод какой?
[01:38:20.940 --> 01:38:22.940]  Вывод тогда получается, что T не базовая.
[01:38:22.940 --> 01:38:27.940]  А если бы мы вот эту L взяли как можно больше, она была бы базовая.
[01:38:27.940 --> 01:38:30.940]  А можно и по-другому сказать, что мы же L взяли как можно больше.
[01:38:30.940 --> 01:38:34.940]  А вот эта GCD означает, что мы эту T можем саму распилить на одинаковые копии.
[01:38:34.940 --> 01:38:36.940]  И тем самым там L увеличить.
[01:38:41.940 --> 01:38:42.940]  То есть, вывод.
[01:38:42.940 --> 01:38:46.940]  Мы действительно ищем минимальное такое X.
[01:38:46.940 --> 01:38:47.940]  Большее.
[01:38:47.940 --> 01:38:51.940]  То есть, начиная с какого-то момента ищем минимальное такое X.
[01:38:52.940 --> 01:38:53.940]  Удовлетворяющие.
[01:38:54.940 --> 01:38:57.940]  То есть, минимальное такое X, вот начиная с этого момента.
[01:38:57.940 --> 01:39:01.940]  Что L больше ли брал, чем KX, это и будет второй перификсный период.
[01:39:04.940 --> 01:39:05.940]  Доказали, да?
[01:39:07.940 --> 01:39:08.940]  Так, ну что ж.
[01:39:11.940 --> 01:39:12.940]  Нет, смотрите.
[01:39:12.940 --> 01:39:16.940]  Перерыв, я думаю, имеет смысл сделать после того, как мы убедимся.
[01:39:16.940 --> 01:39:18.940]  Теперь еще и поймем, видимо, более простую часть.
[01:39:18.940 --> 01:39:19.940]  А как теперь этот X найти?
[01:39:21.940 --> 01:39:24.940]  Я хотел есть подозрение, что самую интеллектуальную часть мы сделали.
[01:39:24.940 --> 01:39:26.940]  Ну, сдвинуть и вот это.
[01:39:26.940 --> 01:39:29.940]  Ну, то есть, решение такое, что давайте, мы говорим так.
[01:39:29.940 --> 01:39:30.940]  За O от P1.
[01:39:32.940 --> 01:39:35.940]  Ну, где-то за O от P1K мы вот это нашли.
[01:39:35.940 --> 01:39:40.940]  Ну, на самом деле, за O от Richard P1 мы теперь можем и сам Richard P1 найти, правда?
[01:39:41.940 --> 01:39:42.940]  Можем?
[01:39:43.940 --> 01:39:44.940]  Вот, нашли.
[01:39:44.940 --> 01:39:46.940]  И теперь давайте стартуем.
[01:39:46.940 --> 01:39:47.940]  То есть, алгоритм теперь так.
[01:39:47.940 --> 01:39:50.940]  Начинаем, стартуем с позиции вот этой плюс один.
[01:39:52.940 --> 01:39:57.940]  И начинаем абсолютно в тупую искать абсолютно нот.
[01:39:57.940 --> 01:39:59.940]  То есть, просто искать вот эти вот Q.
[01:39:59.940 --> 01:40:01.940]  То есть, двигать их абсолютно так же.
[01:40:01.940 --> 01:40:08.940]  До тех пор, пока не найдем такое Q, которое оказалось равно 3 умножить на свою очередную позицию.
[01:40:11.940 --> 01:40:13.940]  Как мы это будем делать?
[01:40:15.940 --> 01:40:17.940]  Ну, собственно, ровно тем же способом.
[01:40:17.940 --> 01:40:18.940]  Потому что, да?
[01:40:18.940 --> 01:40:20.940]  То есть, давайте вот еще раз.
[01:40:20.940 --> 01:40:22.940]  Так, ладно, в утверждение мы уже поверили.
[01:40:22.940 --> 01:40:24.940]  Поэтому давайте я сейчас все это сотру.
[01:40:26.940 --> 01:40:27.940]  И вот.
[01:40:33.940 --> 01:40:34.940]  Так.
[01:40:35.940 --> 01:40:38.940]  Вот оно, вот оно, вот оно.
[01:40:38.940 --> 01:40:39.940]  Так.
[01:40:43.940 --> 01:40:44.940]  Не-не-не.
[01:40:48.940 --> 01:40:49.940]  Так.
[01:40:49.940 --> 01:40:50.940]  Так-так-так.
[01:40:50.940 --> 01:40:51.940]  Так-так-так.
[01:40:51.940 --> 01:40:52.940]  Вот так вот.
[01:40:54.940 --> 01:40:55.940]  Значит, логика.
[01:40:56.940 --> 01:40:57.940]  Итак.
[01:40:57.940 --> 01:40:59.940]  Начиная с этого момента.
[01:40:59.940 --> 01:41:02.940]  То есть, где-то у нас там был какой-то очень далекий P1.
[01:41:03.940 --> 01:41:04.940]  И вот мы тут.
[01:41:04.940 --> 01:41:06.940]  То есть, как бы алгоритм звучит так.
[01:41:06.940 --> 01:41:08.940]  То мы опять ищем какой-то P.
[01:41:10.940 --> 01:41:12.940]  То есть, ищем P, который больше, чем вот это.
[01:41:12.940 --> 01:41:14.940]  И ищем Q.
[01:41:14.940 --> 01:41:15.940]  Прям вот в тупую.
[01:41:17.940 --> 01:41:19.940]  Вот прям P плюс Q, чтобы оно вот совпадало.
[01:41:19.940 --> 01:41:22.940]  Как только Q станет равно 3P.
[01:41:23.940 --> 01:41:25.940]  Мы говорим, что ура, мы победили.
[01:41:25.940 --> 01:41:26.940]  Вот как мы только что доказали.
[01:41:28.940 --> 01:41:30.940]  А что делать, если Q оказалось меньше?
[01:41:32.940 --> 01:41:34.940]  Ну, тогда идея опять такая же.
[01:41:34.940 --> 01:41:35.940]  То есть, надо.
[01:41:36.940 --> 01:41:39.940]  То есть, получается, надо сдвинуть P так.
[01:41:40.940 --> 01:41:41.940]  То есть, как-то вот сдвинуть так.
[01:41:42.940 --> 01:41:46.940]  Чтобы опять получить какой-то P плюс P'.
[01:41:46.940 --> 01:41:51.940]  Так, чтобы, если я тут буду делать речь, то мы могли дойти хотя бы до сюда.
[01:41:54.940 --> 01:41:55.940]  Вот.
[01:41:55.940 --> 01:41:56.940]  Ну, логика опять была такая же.
[01:41:58.940 --> 01:41:59.940]  Но тут возникает вопрос.
[01:41:59.940 --> 01:42:00.940]  Что?
[01:42:00.940 --> 01:42:03.940]  Ну, опять у нас, конечно, в идеале была бы мечта.
[01:42:03.940 --> 01:42:05.940]  Что давайте P' это просто Q делить на K.
[01:42:05.940 --> 01:42:08.940]  Потому что, типа, раньше никаких сдвигов не будет.
[01:42:09.940 --> 01:42:10.940]  Но у нас опять та же логика.
[01:42:10.940 --> 01:42:11.940]  Логика говорит.
[01:42:12.940 --> 01:42:14.940]  То есть, логика говорит, что в принципе этим сдвигом.
[01:42:16.940 --> 01:42:22.940]  Вот, что в некоторых случаях окажется, что сдвигом может быть вполне себе и P1 на этот раз.
[01:42:25.940 --> 01:42:26.940]  Ну, точнее так.
[01:42:26.940 --> 01:42:27.940]  Давайте так.
[01:42:27.940 --> 01:42:28.940]  Какие сдвиги?
[01:42:29.940 --> 01:42:30.940]  Ну, то есть, какие у нас могут быть проблемы?
[01:42:30.940 --> 01:42:34.940]  Что нам мешает просто сказать, что это P плюс Q делить на K и не париться?
[01:42:35.940 --> 01:42:36.940]  Какие проблемы могут быть?
[01:42:38.940 --> 01:42:39.940]  Единственное.
[01:42:39.940 --> 01:42:41.940]  Давайте вот просто опять повторяем те же самые рассуждения.
[01:42:41.940 --> 01:42:43.940]  Но тут надо их повторять, чтобы их привыкнуть.
[01:42:49.940 --> 01:42:50.940]  А теперь давайте думать.
[01:42:51.940 --> 01:42:54.940]  Вот, допустим, вот это P плюс Q делить на K.
[01:42:54.940 --> 01:42:55.940]  Теперь давайте думать.
[01:42:55.940 --> 01:42:56.940]  Давайте думать.
[01:42:56.940 --> 01:43:01.940]  Может же так оказаться, что на самом деле shift от Q.
[01:43:01.940 --> 01:43:06.940]  По сути, shift от Q оказался вполне себе меньше, чем Q делить на K.
[01:43:07.940 --> 01:43:08.940]  Правда?
[01:43:08.940 --> 01:43:09.940]  Могло такое быть?
[01:43:10.940 --> 01:43:11.940]  Могло.
[01:43:11.940 --> 01:43:12.940]  Ну, теперь давайте подумаем.
[01:43:12.940 --> 01:43:13.940]  А shift такое?
[01:43:15.940 --> 01:43:16.940]  Так.
[01:43:16.940 --> 01:43:22.940]  То есть, замечаем, что этот shift, это такой shift, что у него.
[01:43:22.940 --> 01:43:27.940]  То есть, этот shift обладает таким свойством, что 4 копии этого шифта в Q вкладываются.
[01:43:28.940 --> 01:43:30.940]  Следовательно, это префиксный период.
[01:43:38.940 --> 01:43:44.940]  Но с другой стороны, у нас на текущий момент, скажем так, получается, меньше P1 это быть точно не может.
[01:43:45.940 --> 01:43:48.940]  Потому что мы знаем, что меньше P1 у нас такого безобразия нет.
[01:43:53.940 --> 01:43:55.940]  Ну вот, может быть, сам P1?
[01:43:56.940 --> 01:43:57.940]  Да.
[01:43:57.940 --> 01:43:58.940]  Вполне может быть.
[01:43:59.940 --> 01:44:01.940]  А может быть, это больше, чем P1?
[01:44:04.940 --> 01:44:05.940]  Что больше, чем P1?
[01:44:05.940 --> 01:44:07.940]  Вот этот вот shift оказаться больше, чем P1.
[01:44:08.940 --> 01:44:11.940]  Это может быть делитель, кажется, кратный P1?
[01:44:11.940 --> 01:44:12.940]  Нет.
[01:44:13.940 --> 01:44:14.940]  Ну, с одной стороны, да.
[01:44:14.940 --> 01:44:15.940]  Ну, ничего страшного.
[01:44:16.940 --> 01:44:23.940]  Нет, ну там просто фишка будет в том, что это делителем, кратно P1 она будет...
[01:44:23.940 --> 01:44:24.940]  Ну, хотя нет.
[01:44:24.940 --> 01:44:28.940]  Может, делителем P1 тоже, может быть, там же никто не сказал, что периодов будет ровно P.
[01:44:28.940 --> 01:44:29.940]  Фишка будет в другом.
[01:44:29.940 --> 01:44:36.940]  Фишка будет в том, что если это есть, то мы тогда, получается, в это...
[01:44:36.940 --> 01:44:43.940]  То есть, если это будет больше, чем P1, то тогда получается, что это было уже префиксным периодом, который мы почему-то раньше не нашли.
[01:44:45.940 --> 01:44:49.940]  А мы должны были его найти, потому что тогда вот в этой позиции...
[01:44:49.940 --> 01:44:54.940]  То есть, когда мы рассматривали эту позицию, мы должны были там идентифицировать эту Z и победить.
[01:44:56.940 --> 01:44:58.940]  А мы этого как бы раньше не сделали.
[01:44:59.940 --> 01:45:02.940]  Просто вот именно что конкретно раньше.
[01:45:09.940 --> 01:45:10.940]  Вот эту.
[01:45:10.940 --> 01:45:13.940]  Да, но тут мы, конечно, еще в явном виде пользуемся, что Q у нас маленькая.
[01:45:13.940 --> 01:45:16.940]  Потому что теоретически P1 могло оказаться и больше, чем даже P.
[01:45:21.940 --> 01:45:22.940]  В смысле?
[01:45:22.940 --> 01:45:23.940]  Ну, теоретически.
[01:45:23.940 --> 01:45:24.940]  Нет?
[01:45:24.940 --> 01:45:25.940]  Да, практически нет.
[01:45:25.940 --> 01:45:27.940]  Вот именно потому, что Q маленькая.
[01:45:27.940 --> 01:45:31.940]  Ну, Q меньше, чем 3 делить на P.
[01:45:34.940 --> 01:45:37.940]  Как могло P1 оказаться больше, чем P?
[01:45:37.940 --> 01:45:39.940]  Ну, если бы Q было очень...
[01:45:39.940 --> 01:45:40.940]  Ну, как бы это...
[01:45:40.940 --> 01:45:41.940]  Ну, как бы...
[01:45:41.940 --> 01:45:42.940]  Мы ищем P, а после P.
[01:45:42.940 --> 01:45:46.940]  Нет, ну да, подождите, мы же P, мы же очень сильно вправо отодвинулись.
[01:45:49.940 --> 01:45:53.940]  Мы взяли reach P1-P1, плюс 1.
[01:45:53.940 --> 01:45:54.940]  И?
[01:45:55.940 --> 01:45:56.940]  Ну, мало ли.
[01:45:57.940 --> 01:46:00.940]  В плане, мы ищем вправо вот P1, P.
[01:46:00.940 --> 01:46:02.940]  Оно всегда больше, чем P1.
[01:46:03.940 --> 01:46:05.940]  Нет, от Q, может быть?
[01:46:05.940 --> 01:46:06.940]  Нет, ну Q...
[01:46:06.940 --> 01:46:09.940]  Нет, про Q мы знаем только одно, что Q меньше, чем 3P.
[01:46:09.940 --> 01:46:10.940]  Все.
[01:46:10.940 --> 01:46:11.940]  Да.
[01:46:11.940 --> 01:46:12.940]  Но тогда мы в принципе...
[01:46:12.940 --> 01:46:14.940]  Ну, из этого мы раз Q меньше...
[01:46:14.940 --> 01:46:17.940]  Ну, то есть P плюс Q меньше, чем 4P.
[01:46:17.940 --> 01:46:20.940]  Ну, из этого следует автоматически, да?
[01:46:20.940 --> 01:46:21.940]  Ну, что из этого следует?
[01:46:21.940 --> 01:46:28.940]  Что вот этот вот шифтик, я имею в виду шифтик, он должен быть меньше, чем вот эти 3P поделить на 4.
[01:46:28.940 --> 01:46:31.940]  То есть получается меньше, чем P, да?
[01:46:35.940 --> 01:46:36.940]  Это важно.
[01:46:36.940 --> 01:46:38.940]  Потому что, чтобы сказать, что мы как бы...
[01:46:38.940 --> 01:46:39.940]  Потому что у нас цель какая?
[01:46:39.940 --> 01:46:43.940]  Сказать, что если тут был какой-то вот эта штука, то мы ее должны были найти раньше.
[01:46:46.940 --> 01:46:47.940]  Ну вот.
[01:46:47.940 --> 01:46:52.940]  Но для того, чтобы доказать, что мы это могли найти раньше, мы должны доказать, что этот шифт обязан быть меньше, чем P.
[01:46:59.940 --> 01:47:00.940]  Вот.
[01:47:00.940 --> 01:47:02.940]  Но мы и показали, что такой шифт должен не превосходить.
[01:47:02.940 --> 01:47:03.940]  Получается...
[01:47:04.940 --> 01:47:06.940]  Что там он не должен происходить?
[01:47:07.940 --> 01:47:09.940]  Получается там трех четвертей P.
[01:47:10.940 --> 01:47:15.940]  Но с другой стороны, как мы выяснили, тогда в этом случае он как бы больше, чем P1.
[01:47:15.940 --> 01:47:19.940]  То есть получается больше, чем P1 в этом предположении он быть не может.
[01:47:19.940 --> 01:47:21.940]  Потому что мы тогда его действительно раньше нашли.
[01:47:24.940 --> 01:47:26.940]  То есть получается вывод...
[01:47:26.940 --> 01:47:27.940]  Ну вот.
[01:47:27.940 --> 01:47:28.940]  То есть тогда вывод...
[01:47:28.940 --> 01:47:30.940]  То есть меньше он быть не может, больше не может быть.
[01:47:30.940 --> 01:47:35.940]  Значит получается единственное, к чему может быть равен шифт меньше, чем Q делить на K.
[01:47:36.940 --> 01:47:37.940]  То есть Q делить на 4.
[01:47:37.940 --> 01:47:39.940]  Это, собственно, P1.
[01:47:39.940 --> 01:47:44.940]  Остается только проверить, не является ли у этой строки шифт действительно P1.
[01:47:47.940 --> 01:47:48.940]  А как это проверить?
[01:47:51.940 --> 01:47:58.940]  Ну, совсем в тупую нельзя, но просто мы же можем сказать, что верно ли, что ричи от P1 больше ли равен Q.
[01:47:58.940 --> 01:47:59.940]  Да или нет?
[01:47:59.940 --> 01:48:01.940]  Мы же ричи уже нашли когда-то.
[01:48:06.940 --> 01:48:07.940]  Да.
[01:48:07.940 --> 01:48:08.940]  Потому что это сам префикс.
[01:48:08.940 --> 01:48:09.940]  Да.
[01:48:09.940 --> 01:48:10.940]  То есть вот и вся идея.
[01:48:14.940 --> 01:48:15.940]  Да.
[01:48:15.940 --> 01:48:16.940]  Ну, все, ура.
[01:48:18.940 --> 01:48:19.940]  То есть вывод простой.
[01:48:19.940 --> 01:48:27.940]  То есть получается в этих случаях надо проверить, что если P1 оказалось меньше либо равно, чем Q делить на K, то просто проверяем, можно ли сдвинуться на P1.
[01:48:27.940 --> 01:48:29.940]  А вот понять, зачем нам это нужно?
[01:48:29.940 --> 01:48:30.940]  Нет.
[01:48:30.940 --> 01:48:32.940]  Это нам нужно было для того, чтобы найти второй префиксный период.
[01:48:32.940 --> 01:48:33.940]  Ну да.
[01:48:33.940 --> 01:48:44.940]  То есть в сухом оставке говорим так, мы можем найти, то есть скажем так, мы можем за O от V проверить, есть ли тут хотя бы два префиксных периода.
[01:48:44.940 --> 01:48:55.940]  И более того, если есть два префиксных периода P1 меньше, чем P2, то мы сделали это за, я утверждаю, от P2 умножь на K, то есть от P2.
[01:48:57.940 --> 01:48:58.940]  Вот.
[01:48:58.940 --> 01:48:59.940]  Это все, что я.
[01:48:59.940 --> 01:49:02.940]  То есть вот на самом деле, что мы сейчас достигли.
[01:49:03.940 --> 01:49:06.940]  Это на самом деле будет значительная часть нашего.
[01:49:06.940 --> 01:49:07.940]  Подождите.
[01:49:07.940 --> 01:49:08.940]  Жду.
[01:49:08.940 --> 01:49:10.940]  Рич мы за сколько считаем?
[01:49:10.940 --> 01:49:15.940]  За, ну рич от P1 мы считаем за O от рич.
[01:49:15.940 --> 01:49:17.940]  Прям буквально.
[01:49:17.940 --> 01:49:19.940]  Ну а это может быть вся строка.
[01:49:19.940 --> 01:49:20.940]  Может.
[01:49:20.940 --> 01:49:24.940]  Ну то есть, ну типа нам тут ничего не дает вот это вот.
[01:49:24.940 --> 01:49:25.940]  Дает, дает, дает.
[01:49:25.940 --> 01:49:26.940]  Знаете почему?
[01:49:26.940 --> 01:49:30.940]  Потому что мы знаем, что второй префиксный период, он должен быть хотя бы вот столько.
[01:49:30.940 --> 01:49:31.940]  Нет, нет, нет.
[01:49:31.940 --> 01:49:32.940]  Нет, нет, нет.
[01:49:32.940 --> 01:49:36.940]  Я имею в виду, что у нас суммарно алгоритм работает за O от В.
[01:49:36.940 --> 01:49:37.940]  Нет.
[01:49:37.940 --> 01:49:38.940]  Да.
[01:49:38.940 --> 01:49:39.940]  А рич как?
[01:49:39.940 --> 01:49:48.940]  Если мы нашли два P1 и P2, то утверждается, что P2 по длине всего он порядка ричит P1.
[01:49:48.940 --> 01:49:49.940]  Нет.
[01:49:49.940 --> 01:49:51.940]  Рич от P1 за сколько ты находишь?
[01:49:51.940 --> 01:49:56.940]  Если я на P2, то я его нахожу не больше, чем за P2.
[01:49:58.940 --> 01:50:00.940]  Если P2 есть.
[01:50:00.940 --> 01:50:02.940]  То есть смотри, если у тебя есть P2.
[01:50:02.940 --> 01:50:04.940]  Ну по сути следующее.
[01:50:04.940 --> 01:50:09.940]  То есть по сути алгоритм у тебя останавливается в тот момент, когда ты нашел P1.
[01:50:09.940 --> 01:50:13.940]  То есть ты, когда алгоритм у тебя, предположим, что P2 есть.
[01:50:13.940 --> 01:50:15.940]  Тогда что сделает твой алгоритм?
[01:50:15.940 --> 01:50:19.940]  Он найдет P1, потратит на это, найдет за рич.
[01:50:19.940 --> 01:50:21.940]  То есть за O от P1 он найдет P1.
[01:50:21.940 --> 01:50:24.940]  За O от рич от P1 он найдет рич от P1.
[01:50:25.940 --> 01:50:28.940]  Потом стартует с этого момента.
[01:50:28.940 --> 01:50:32.940]  А этот момент, напоминаю, как минимум 3 четверти P1, кстати.
[01:50:33.940 --> 01:50:36.940]  Ну, потому что рич это как минимум 4 P1.
[01:50:38.940 --> 01:50:42.940]  Начиная с этого момента, он будет искать X и куда-то двигаться вправо.
[01:50:42.940 --> 01:50:48.940]  Но как только он найдет X, от которого он вправо сдвинется, аж до 4X, он ровно в этот момент закончится.
[01:50:48.940 --> 01:50:50.940]  Нам вот эта оценка принципиальна.
[01:50:50.940 --> 01:50:52.940]  Что?
[01:50:53.940 --> 01:50:56.940]  То, что мы написали, тут P2, а не V.
[01:50:56.940 --> 01:50:58.940]  Это играет какую-то роль или нет?
[01:50:58.940 --> 01:51:00.940]  Может сыграть.
[01:51:00.940 --> 01:51:02.940]  Потому что мы...
[01:51:02.940 --> 01:51:04.940]  Ну, потому что...
[01:51:04.940 --> 01:51:06.940]  Ну, скажем так, в будущем алгоритме...
[01:51:06.940 --> 01:51:10.940]  Нет, в будущем алгоритм у нас будет по сути...
[01:51:10.940 --> 01:51:14.940]  Там будет заниматься чем-то типа, найди префиксный период и отпили его.
[01:51:14.940 --> 01:51:16.940]  Чего?
[01:51:16.940 --> 01:51:18.940]  Да, вот такое веселье.
[01:51:18.940 --> 01:51:20.940]  Ну, потому что...
[01:51:20.940 --> 01:51:22.940]  Ну, просто давайте подумаем.
[01:51:22.940 --> 01:51:26.940]  Как эта терематика декомпозиции, в принципе, может быть доказана?
[01:51:26.940 --> 01:51:28.940]  Она может там теоретически быть доказана, что...
[01:51:28.940 --> 01:51:30.940]  Так, давайте думать.
[01:51:30.940 --> 01:51:34.940]  Нет ли случайно у строки R префиксного периода?
[01:51:34.940 --> 01:51:36.940]  Двух префиксных периодов.
[01:51:36.940 --> 01:51:38.940]  Ну вот, тут мы начинаем думать.
[01:51:40.940 --> 01:51:42.940]  Тут мы начинаем думать.
[01:51:42.940 --> 01:51:44.940]  Так, давайте найдем эти два префиксных периода.
[01:51:44.940 --> 01:51:46.940]  Будем искали-искали, и вот бабах!
[01:51:46.940 --> 01:51:50.940]  В какой-то момент отсекли, нашли, что, оказывается, есть два префиксных периода.
[01:51:50.940 --> 01:51:52.940]  И там идея может быть такая.
[01:51:52.940 --> 01:51:54.940]  А давайте вот эту первую часть...
[01:51:54.940 --> 01:51:56.940]  Просто отпилим эти четыре префиксных периода.
[01:51:58.940 --> 01:52:02.940]  И у оставшейся строки V повторим операцию.
[01:52:02.940 --> 01:52:04.940]  И так далее, и так далее.
[01:52:04.940 --> 01:52:06.940]  Ну ладно, увидим.
[01:52:06.940 --> 01:52:08.940]  Вот, примерно.
[01:52:08.940 --> 01:52:10.940]  Конечно, там будет несколько не так, там будет похитрее.
[01:52:10.940 --> 01:52:12.940]  Но суть будет примерно такая.
[01:52:14.940 --> 01:52:16.940]  Так что вот получила нот.
[01:52:16.940 --> 01:52:18.940]  Так что вот получилась такая красота.
[01:52:18.940 --> 01:52:22.940]  Но, конечно, сейчас перерыв сделать уже время явно пришло.
[01:52:26.940 --> 01:52:30.940]  Так, ладно, мы научились искать даже и один префиксный период, и два префиксных периода.
[01:52:30.940 --> 01:52:34.940]  Спрашивается, зачем нам все это надо?
[01:52:36.940 --> 01:52:40.940]  Ну, давайте вспоминать, зачем нам все это надо.
[01:52:40.940 --> 01:52:42.940]  Так, ну что?
[01:52:44.940 --> 01:52:48.940]  Ну что, интересно, идти в этом месте сначала или с конца?
[01:52:50.940 --> 01:52:52.940]  Ну, как понятнее.
[01:52:52.940 --> 01:52:54.940]  Как понятнее?
[01:52:54.940 --> 01:52:56.940]  Ну, там, может быть, от перестановки мест сложаемых иногда бывает.
[01:52:58.940 --> 01:53:00.940]  Ну ладно, давайте так, сначала так сначала.
[01:53:00.940 --> 01:53:04.940]  Давайте попробуем теперь все-таки столкнуться с тем, на чем мы остановились в прошлый раз.
[01:53:04.940 --> 01:53:08.940]  Так, да, тирема, декомпозицию у нас есть.
[01:53:08.940 --> 01:53:10.940]  Так, мы на эти шифты продолжаем смотреть?
[01:53:10.940 --> 01:53:12.940]  Ну...
[01:53:14.940 --> 01:53:16.940]  Ладно, ладно, у меня наглая просьба.
[01:53:16.940 --> 01:53:18.940]  Если вы хотите на них смотреть, фотографируйте их, пожалуйста.
[01:53:18.940 --> 01:53:20.940]  Ну, они так-то и в тетради есть.
[01:53:20.940 --> 01:53:22.940]  Ну, как бы на доске, конечно, удобнее.
[01:53:22.940 --> 01:53:24.940]  Ну ладно, можно есть.
[01:53:24.940 --> 01:53:28.940]  Нет, то просто, я не знаю, просто у меня ощущение, что если я буду вот это вот рисовать просто на верхней части доски,
[01:53:28.940 --> 01:53:30.940]  по-моему, всем будет сильно виднее.
[01:53:30.940 --> 01:53:32.940]  Нет?
[01:53:32.940 --> 01:53:34.940]  Или всем по барабану.
[01:53:34.940 --> 01:53:36.940]  Ну ладно.
[01:53:36.940 --> 01:53:38.940]  Независимо от ответа.
[01:53:38.940 --> 01:53:40.940]  Ну ладно.
[01:53:40.940 --> 01:53:42.940]  Но в конце концов, я думаю, что такое базовая столка, что такое периодичная, что такое префиксный период,
[01:53:42.940 --> 01:53:44.940]  я думаю, мы уже и так запомнили.
[01:53:44.940 --> 01:53:46.940]  Как бы я думаю.
[01:53:46.940 --> 01:53:50.940]  Если мы вот это еще вспоминаем, то понятно, что нам, конечно, титанически сложно.
[01:53:50.940 --> 01:53:56.940]  Но я думаю, что мы уже, по-моему, уже эту схему более-менее выучили.
[01:53:58.940 --> 01:54:00.940]  Нет?
[01:54:00.940 --> 01:54:02.940]  Нет, ну...
[01:54:04.940 --> 01:54:06.940]  Ну ладно, хотя я уже думал, что такое префиксный период,
[01:54:06.940 --> 01:54:08.940]  что такое префиксный период, я думаю, мы все равно знаем,
[01:54:08.940 --> 01:54:10.940]  что такое shift, в общем-то, интуитивно уже тоже.
[01:54:10.940 --> 01:54:12.940]  Там всякие нюансы могут быть.
[01:54:12.940 --> 01:54:14.940]  Ладно, Леммо я...
[01:54:16.940 --> 01:54:18.940]  Ну вот, так, ладно, Ричи это, да.
[01:54:18.940 --> 01:54:22.940]  Так, Ричи, да, кара в 0,4, мы, наверное, тоже помним.
[01:54:22.940 --> 01:54:24.940]  Так, хорошо.
[01:54:24.940 --> 01:54:26.940]  Просто на самом деле мы пытались,
[01:54:26.940 --> 01:54:28.940]  то есть мы остановились в том, что мы пытались ввести
[01:54:28.940 --> 01:54:30.940]  Леммо 3.
[01:54:30.940 --> 01:54:32.940]  Леммо 3
[01:54:32.940 --> 01:54:34.940]  говорила нам следующее.
[01:54:34.940 --> 01:54:36.940]  Попоминаем, да?
[01:54:36.940 --> 01:54:38.940]  Леммо 3 говорила,
[01:54:38.940 --> 01:54:40.940]  что пусть у нас есть какое-то W
[01:54:40.940 --> 01:54:42.940]  и это базовая строка.
[01:54:42.940 --> 01:54:44.940]  Это важно.
[01:54:44.940 --> 01:54:46.940]  Базовая строка.
[01:54:46.940 --> 01:54:48.940]  Тогда
[01:54:50.940 --> 01:54:52.940]  говорим мы.
[01:54:54.940 --> 01:54:56.940]  Тогда неожиданно оказывалось, что
[01:54:56.940 --> 01:54:58.940]  можно...
[01:54:58.940 --> 01:55:00.940]  Тогда оказывалось, что, ну давайте так,
[01:55:00.940 --> 01:55:02.940]  существует разбиение.
[01:55:04.940 --> 01:55:06.940]  Там w равно
[01:55:06.940 --> 01:55:08.940]  w1, w2
[01:55:08.940 --> 01:55:10.940]  такой,
[01:55:10.940 --> 01:55:12.940]  что
[01:55:12.940 --> 01:55:14.940]  любая строка
[01:55:14.940 --> 01:55:16.940]  вида там w2,
[01:55:16.940 --> 01:55:18.940]  w1 в степени
[01:55:18.940 --> 01:55:20.940]  k-1, w'
[01:55:24.940 --> 01:55:26.940]  не имеет
[01:55:28.940 --> 01:55:30.940]  префиксного периода.
[01:55:34.940 --> 01:55:36.940]  Меньшего,
[01:55:36.940 --> 01:55:38.940]  чем модуль w.
[01:55:38.940 --> 01:55:40.940]  Вот такая заяла у нас.
[01:55:44.940 --> 01:55:46.940]  Да, вот они
[01:55:46.940 --> 01:55:48.940]  формулировали в таком виде.
[01:55:48.940 --> 01:55:50.940]  Не,
[01:55:50.940 --> 01:55:52.940]  а это тогда у тебя шо?
[01:55:58.940 --> 01:56:00.940]  Че, у тебя
[01:56:00.940 --> 01:56:02.940]  лемма 0 была?
[01:56:02.940 --> 01:56:04.940]  Или
[01:56:04.940 --> 01:56:06.940]  типа это утверждение ты пропустил,
[01:56:06.940 --> 01:56:08.940]  как самоочевидно?
[01:56:10.940 --> 01:56:12.940]  Да, я б не пропускал.
[01:56:16.940 --> 01:56:18.940]  Это у меня вообще как лемма
[01:56:18.940 --> 01:56:20.940]  не написано, но просто написано.
[01:56:20.940 --> 01:56:22.940]  Понятно. Ну вот, ладно,
[01:56:22.940 --> 01:56:24.940]  будем мыслить так. Итак,
[01:56:24.940 --> 01:56:26.940]  значит откуда мы берем?
[01:56:26.940 --> 01:56:28.940]  Значит такое счастье.
[01:56:28.940 --> 01:56:30.940]  Так, ну давайте воспомним.
[01:56:30.940 --> 01:56:32.940]  Мы в принципе уже начали как-то ее доказывать.
[01:56:34.940 --> 01:56:36.940]  Потому что начали мы на самом деле с того,
[01:56:36.940 --> 01:56:38.940]  что показали, что в общем-то
[01:56:38.940 --> 01:56:40.940]  какое w' подставлять,
[01:56:40.940 --> 01:56:42.940]  сюда в общем-то значение не имеет.
[01:56:44.940 --> 01:56:46.940]  Попытались мы это доказать за счет
[01:56:46.940 --> 01:56:48.940]  того, что этот префиксный период
[01:56:48.940 --> 01:56:50.940]  со всеми k-копиями
[01:56:50.940 --> 01:56:52.940]  видимо обязан
[01:56:52.940 --> 01:56:54.940]  пропихиваться куда-то сюда.
[01:56:54.940 --> 01:56:56.940]  Просто в w2,
[01:56:56.940 --> 01:56:58.940]  w1 в степени k-1.
[01:57:00.940 --> 01:57:02.940]  Почему?
[01:57:02.940 --> 01:57:04.940]  Потому что там идея была такая.
[01:57:04.940 --> 01:57:06.940]  Смотрите, вот у нас есть,
[01:57:06.940 --> 01:57:08.940]  давайте я тут нарисую 4 копии w.
[01:57:16.940 --> 01:57:18.940]  Мы доказываем математическую лему.
[01:57:20.940 --> 01:57:22.940]  И вот w, w, w, w.
[01:57:24.940 --> 01:57:26.940]  И вот мы распилили ее на w1
[01:57:26.940 --> 01:57:28.940]  и w2.
[01:57:30.940 --> 01:57:32.940]  И еще сюда прицепили
[01:57:32.940 --> 01:57:34.940]  какой-то там w'.
[01:57:36.940 --> 01:57:38.940]  Теперь говорим, что означает,
[01:57:38.940 --> 01:57:40.940]  что у нее есть префиксный период
[01:57:40.940 --> 01:57:42.940]  меньше, чем w.
[01:57:42.940 --> 01:57:44.940]  Это означает, что у нее есть
[01:57:44.940 --> 01:57:46.940]  какой-то, то есть вот этот вот.
[01:57:46.940 --> 01:57:48.940]  То есть если этот префиксный период равен p,
[01:57:48.940 --> 01:57:50.940]  то получается
[01:57:50.940 --> 01:57:52.940]  хотя бы две копии сюда уместятся.
[01:57:52.940 --> 01:57:54.940]  Я бы сказал даже хотя бы три.
[01:57:56.940 --> 01:57:58.940]  Четвертая может уже отправиться в аут.
[01:58:00.940 --> 01:58:02.940]  Копии сюда уместятся, правда?
[01:58:04.940 --> 01:58:06.940]  Вот.
[01:58:06.940 --> 01:58:08.940]  Но тогда
[01:58:08.940 --> 01:58:10.940]  я утверждаю следующее, что
[01:58:10.940 --> 01:58:12.940]  тогда на самом деле можно заметить,
[01:58:12.940 --> 01:58:14.940]  что можно заметить.
[01:58:18.940 --> 01:58:20.940]  Я утверждаю следующее,
[01:58:20.940 --> 01:58:22.940]  что на самом деле я утверждаю,
[01:58:22.940 --> 01:58:24.940]  что четвертая копия
[01:58:24.940 --> 01:58:26.940]  на самом деле в аут не отправится.
[01:58:26.940 --> 01:58:28.940]  Это как раз и будет означать,
[01:58:28.940 --> 01:58:30.940]  что нам в общем
[01:58:30.940 --> 01:58:32.940]  на w' плевать.
[01:58:36.940 --> 01:58:38.940]  То есть я просто хочу доказать,
[01:58:38.940 --> 01:58:40.940]  что на самом деле,
[01:58:40.940 --> 01:58:42.940]  что если префиксный период есть,
[01:58:44.940 --> 01:58:46.940]  то есть на самом деле,
[01:58:46.940 --> 01:58:48.940]  что если такое разбиение есть,
[01:58:48.940 --> 01:58:50.940]  то в этом разбиении префиксный период
[01:58:50.940 --> 01:58:52.940]  будет все равно достаточно маленьким.
[01:58:52.940 --> 01:58:54.940]  И он даже будет
[01:58:54.940 --> 01:58:56.940]  больше у строки w2 и w1 в степени k-1.
[01:59:00.940 --> 01:59:02.940]  Доказательство очень простое.
[01:59:02.940 --> 01:59:04.940]  Предположим, что
[01:59:04.940 --> 01:59:06.940]  4 копии p1 не влезли.
[01:59:06.940 --> 01:59:08.940]  Вот до сюда не влезли.
[01:59:08.940 --> 01:59:10.940]  Видно, да?
[01:59:10.940 --> 01:59:12.940]  Тогда получается вот эта вот
[01:59:12.940 --> 01:59:14.940]  строка длины.
[01:59:14.940 --> 01:59:16.940]  То есть какая тут длина этой строки?
[01:59:16.940 --> 01:59:18.940]  Длина этой строки получается
[01:59:18.940 --> 01:59:20.940]  какая у нас?
[01:59:20.940 --> 01:59:22.940]  3 модуль w плюс w2.
[01:59:22.940 --> 01:59:24.940]  Достаточно большая строка.
[01:59:24.940 --> 01:59:26.940]  Это заведомо больше,
[01:59:26.940 --> 01:59:28.940]  чем, скажем,
[01:59:28.940 --> 01:59:30.940]  модуль w плюс p1.
[01:59:30.940 --> 01:59:32.940]  Согласны?
[01:59:32.940 --> 01:59:34.940]  Но тогда
[01:59:34.940 --> 01:59:36.940]  эта строка и w периодично,
[01:59:36.940 --> 01:59:38.940]  и p1 периодично,
[01:59:38.940 --> 01:59:40.940]  раз мы тут четвертая копия,
[01:59:40.940 --> 01:59:42.940]  аж куда-то в аут отправилась, да?
[01:59:42.940 --> 01:59:44.940]  Почему вы тут
[01:59:44.940 --> 01:59:46.940]  рисуете w, если у нас
[01:59:46.940 --> 01:59:48.940]  w1?
[01:59:50.940 --> 01:59:52.940]  Господи, потому что
[01:59:52.940 --> 01:59:54.940]  мне почему-то тупое интуитивное
[01:59:54.940 --> 01:59:56.940]  желание написать тут единицу
[01:59:56.940 --> 01:59:58.940]  на автомате, причем уже второй год подряд
[01:59:58.940 --> 02:00:00.940]  поворачивать, я вчера там запись смотрел,
[02:00:00.940 --> 02:00:02.940]  у меня тут тоже это было, я не знаю почему.
[02:00:02.940 --> 02:00:04.940]  Потому что тут, конечно, имеется в виду
[02:00:04.940 --> 02:00:06.940]  w.
[02:00:12.940 --> 02:00:14.940]  Поэтому я тут рисую w.
[02:00:14.940 --> 02:00:16.940]  Если у меня p1, значит, тут четвертая копия
[02:00:16.940 --> 02:00:18.940]  отправляет в аут, значит, это все p1 периодично
[02:00:18.940 --> 02:00:20.940]  и w периодично.
[02:00:22.940 --> 02:00:24.940]  Но тогда
[02:00:24.940 --> 02:00:26.940]  здесь автоматически противоречие с
[02:00:26.940 --> 02:00:28.940]  чем?
[02:00:30.940 --> 02:00:32.940]  Чего?
[02:00:32.940 --> 02:00:34.940]  Нет, ну как бы да, понятно,
[02:00:34.940 --> 02:00:36.940]  что это строка, нод
[02:00:36.940 --> 02:00:38.940]  w p1 периодично.
[02:00:38.940 --> 02:00:40.940]  Но этот нод
[02:00:40.940 --> 02:00:42.940]  так как p1 меньше,
[02:00:42.940 --> 02:00:44.940]  чем w у нас по предположению,
[02:00:44.940 --> 02:00:46.940]  то получается, что
[02:00:46.940 --> 02:00:48.940]  вся эта строка
[02:00:48.940 --> 02:00:50.940]  нод
[02:00:50.940 --> 02:00:52.940]  где-то там d периодично,
[02:00:52.940 --> 02:00:54.940]  где d делитель w.
[02:00:54.940 --> 02:00:56.940]  Противоречие с
[02:00:56.940 --> 02:00:58.940]  базовостью строки w.
[02:01:00.940 --> 02:01:02.940]  Видно, да?
[02:01:04.940 --> 02:01:06.940]  То есть, вывод такой,
[02:01:06.940 --> 02:01:08.940]  что мы сейчас доказали? Мы доказали следующее,
[02:01:08.940 --> 02:01:10.940]  что
[02:01:10.940 --> 02:01:12.940]  в любом таком, если
[02:01:12.940 --> 02:01:14.940]  в каком-то разбиении нашелся
[02:01:14.940 --> 02:01:16.940]  префиксный период меньше w,
[02:01:16.940 --> 02:01:18.940]  то его 4 копии
[02:01:18.940 --> 02:01:20.940]  вот сюда укладываются,
[02:01:20.940 --> 02:01:22.940]  вот в эту строчку.
[02:01:22.940 --> 02:01:24.940]  И в принципе, какой w штрих
[02:01:24.940 --> 02:01:26.940]  нам приписывать, нам абсолютно все равно.
[02:01:28.940 --> 02:01:30.940]  То есть, по большому счету,
[02:01:30.940 --> 02:01:32.940]  задача будет в том, что надо
[02:01:32.940 --> 02:01:34.940]  найти такое разбиение, чтобы
[02:01:34.940 --> 02:01:36.940]  префиксный период меньше,
[02:01:36.940 --> 02:01:38.940]  чем w был уже в строке w2,
[02:01:38.940 --> 02:01:40.940]  там w в степени k-1.
[02:01:46.940 --> 02:01:48.940]  Поэтому для удобства доказательства,
[02:01:48.940 --> 02:01:50.940]  это утверждение нужно для удобства
[02:01:50.940 --> 02:01:52.940]  доказательства сказать, что на самом деле нам все равно,
[02:01:52.940 --> 02:01:54.940]  что приписывать в качестве w штрих,
[02:01:54.940 --> 02:01:56.940]  поэтому мы будем говорить, а давайте я тут просто
[02:01:56.940 --> 02:01:58.940]  еще w в бесконечном количестве
[02:01:58.940 --> 02:02:00.940]  приписываю.
[02:02:00.940 --> 02:02:02.940]  Вот, ну и так далее.
[02:02:04.940 --> 02:02:06.940]  Да, сейчас мы на самом деле повторяем то,
[02:02:06.940 --> 02:02:08.940]  с чем мы в прошлый раз как раз справились.
[02:02:12.940 --> 02:02:14.940]  Вот, как мы будем сейчас с этим справляться?
[02:02:16.940 --> 02:02:18.940]  Мы с этим будем
[02:02:18.940 --> 02:02:20.940]  справляться мистическим алгоритмом.
[02:02:20.940 --> 02:02:22.940]  Алгоритм будет говорить следующее.
[02:02:26.940 --> 02:02:28.940]  То есть, он нам будет говорить,
[02:02:28.940 --> 02:02:30.940]  значит, алгоритм будет такой,
[02:02:30.940 --> 02:02:32.940]  то есть, жила была вот эта строчка,
[02:02:32.940 --> 02:02:34.940]  пока вот мы, чему равно w1, w2,
[02:02:34.940 --> 02:02:36.940]  мы не знаем, пока у нас
[02:02:36.940 --> 02:02:38.940]  просто есть вот эта строчка w, w, w, w.
[02:02:40.940 --> 02:02:42.940]  То есть, я так и напишу.
[02:02:48.940 --> 02:02:50.940]  То есть, алгоритм будет такой,
[02:02:50.940 --> 02:02:52.940]  то есть, s присвоить w в степени бесконечность,
[02:02:54.940 --> 02:02:56.940]  и будем дальше говорить while
[02:02:58.940 --> 02:03:00.940]  То есть, будем говорить
[02:03:00.940 --> 02:03:02.940]  есть
[02:03:02.940 --> 02:03:04.940]  префикс
[02:03:06.940 --> 02:03:08.940]  z с
[02:03:08.940 --> 02:03:10.940]  модуль z
[02:03:10.940 --> 02:03:12.940]  в степени k
[02:03:12.940 --> 02:03:14.940]  префикс s
[02:03:18.940 --> 02:03:20.940]  и модуль z
[02:03:20.940 --> 02:03:22.940]  меньше модуль w
[02:03:24.940 --> 02:03:26.940]  мы будем говорить, что давайте
[02:03:26.940 --> 02:03:28.940]  отпилим
[02:03:32.940 --> 02:03:34.940]  минимальный такой z
[02:03:34.940 --> 02:03:36.940]  от строки s.
[02:03:38.940 --> 02:03:40.940]  Вот такой алгоритм.
[02:03:42.940 --> 02:03:44.940]  Кстати, как мы уже интуитивно догадываемся,
[02:03:44.940 --> 02:03:46.940]  мы алгоритм ровно в таком виде
[02:03:46.940 --> 02:03:48.940]  можем в принципе реализовать,
[02:03:48.940 --> 02:03:50.940]  даже за адекватную симпатику.
[02:03:50.940 --> 02:03:52.940]  Потому что я минимальный такой z могу найти
[02:03:52.940 --> 02:03:54.940]  за o от z, как мы выяснили.
[02:03:54.940 --> 02:03:56.940]  Потому что это тот самый минимальный
[02:03:56.940 --> 02:03:58.940]  префиксный период, правда?
[02:03:58.940 --> 02:04:00.940]  Понимаете?
[02:04:00.940 --> 02:04:02.940]  Отлично.
[02:04:02.940 --> 02:04:04.940]  Значит, смотрите, сейчас магия будет.
[02:04:04.940 --> 02:04:06.940]  Ну вот.
[02:04:06.940 --> 02:04:08.940]  В прошлый момент вот где-то вот там
[02:04:08.940 --> 02:04:10.940]  началась подлянка.
[02:04:10.940 --> 02:04:12.940]  Да.
[02:04:12.940 --> 02:04:14.940]  Но подлянка началась, ну вот.
[02:04:14.940 --> 02:04:16.940]  Но сейчас, как бы,
[02:04:16.940 --> 02:04:18.940]  сейчас, наверное, интуитивно должно быть проще,
[02:04:18.940 --> 02:04:20.940]  потому что в результате предыдущих двух часов
[02:04:20.940 --> 02:04:22.940]  как бы мы поняли, что этот алгоритм не совсем
[02:04:22.940 --> 02:04:24.940]  на то истинно даже,
[02:04:24.940 --> 02:04:26.940]  что можно его в принципе и...
[02:04:26.940 --> 02:04:28.940]  Вот.
[02:04:28.940 --> 02:04:30.940]  И спрашивает, что тогда?
[02:04:30.940 --> 02:04:32.940]  Нет, в чем у нас была
[02:04:32.940 --> 02:04:34.940]  подлянка?
[02:04:34.940 --> 02:04:36.940]  Ну, нет, нам просто действительно...
[02:04:36.940 --> 02:04:38.940]  Так, ну у нас просто хотим проанализировать
[02:04:38.940 --> 02:04:40.940]  этот алгоритм.
[02:04:40.940 --> 02:04:42.940]  Алгоритм говорит...
[02:04:42.940 --> 02:04:44.940]  Так, теперь возникает вопрос, не до бесконечности
[02:04:44.940 --> 02:04:46.940]  ли мы будем отпиливать?
[02:04:46.940 --> 02:04:48.940]  Значит, выясняется следующее,
[02:04:48.940 --> 02:04:50.940]  что если мы будем отпиливать
[02:04:50.940 --> 02:04:52.940]  с точки Z1, Z2,
[02:04:52.940 --> 02:04:54.940]  Z3 и так далее,
[02:04:54.940 --> 02:04:56.940]  то, оказывается,
[02:04:56.940 --> 02:04:58.940]  верна мистическая штука.
[02:04:58.940 --> 02:05:00.940]  Знаете какая?
[02:05:00.940 --> 02:05:02.940]  Даже...
[02:05:02.940 --> 02:05:04.940]  Ну, во-первых, давайте это отметим,
[02:05:04.940 --> 02:05:06.940]  что каждая следующая строка не короче
[02:05:06.940 --> 02:05:08.940]  предыдущей, но на самом деле
[02:05:08.940 --> 02:05:10.940]  верну более сильное утверждение.
[02:05:10.940 --> 02:05:12.940]  Каждая Z и T
[02:05:12.940 --> 02:05:14.940]  префикс
[02:05:14.940 --> 02:05:16.940]  следующей строки.
[02:05:16.940 --> 02:05:18.940]  Вот.
[02:05:20.940 --> 02:05:22.940]  То есть мистическое утверждение.
[02:05:24.940 --> 02:05:26.940]  Хотя, в общем-то, если вдуматься,
[02:05:26.940 --> 02:05:28.940]  утверждение не самое сложное.
[02:05:38.940 --> 02:05:40.940]  Откуда оно берется?
[02:05:40.940 --> 02:05:42.940]  Откуда оно берется?
[02:05:46.940 --> 02:05:48.940]  Давайте внимательно посмотрим.
[02:05:48.940 --> 02:05:50.940]  Смотрите.
[02:05:50.940 --> 02:05:52.940]  Вот мы, допустим, отпилили...
[02:05:52.940 --> 02:05:54.940]  Ну, там вот идем, идем, идем.
[02:05:54.940 --> 02:05:56.940]  В каждый момент времени у нас строка W периодично.
[02:05:56.940 --> 02:05:58.940]  Кстати, это мы понимаем, да?
[02:05:58.940 --> 02:06:00.940]  Но это даже не важно.
[02:06:00.940 --> 02:06:02.940]  Важно другое.
[02:06:02.940 --> 02:06:04.940]  Давайте и так в какой-то момент
[02:06:04.940 --> 02:06:06.940]  мы решили отпилить
[02:06:06.940 --> 02:06:08.940]  Z и T.
[02:06:08.940 --> 02:06:10.940]  А что значит мы решили отпилить
[02:06:10.940 --> 02:06:12.940]  Z и T?
[02:06:12.940 --> 02:06:14.940]  Это означает, что у нас дальше, вот в этой бесконечной
[02:06:14.940 --> 02:06:16.940]  строке строка, у нас бесконечная,
[02:06:16.940 --> 02:06:18.940]  есть еще как минимум три
[02:06:18.940 --> 02:06:20.940]  копии
[02:06:20.940 --> 02:06:22.940]  Z и T, правда?
[02:06:24.940 --> 02:06:26.940]  Вот.
[02:06:26.940 --> 02:06:28.940]  И теперь мы абсолютно
[02:06:28.940 --> 02:06:30.940]  неожиданно
[02:06:30.940 --> 02:06:32.940]  решили отпилить еще
[02:06:32.940 --> 02:06:34.940]  какой-то Z и
[02:06:34.940 --> 02:06:36.940]  плюс один.
[02:06:38.940 --> 02:06:40.940]  Ну, теперь давайте думать.
[02:06:40.940 --> 02:06:42.940]  В принципе, из этой картинки уже очевидно
[02:06:42.940 --> 02:06:44.940]  становится, что либо Z и префикс
[02:06:44.940 --> 02:06:46.940]  Z и плюс один, либо, наоборот,
[02:06:46.940 --> 02:06:48.940]  Z и плюс один префикс Z и.
[02:06:48.940 --> 02:06:50.940]  Потому что Z и плюс один
[02:06:50.940 --> 02:06:52.940]  начинается где-то здесь. То есть он либо
[02:06:52.940 --> 02:06:54.940]  закончится раньше этой позиции, либо позже.
[02:06:54.940 --> 02:06:56.940]  Согласны, да?
[02:06:56.940 --> 02:06:58.940]  То есть нам, по сути,
[02:06:58.940 --> 02:07:00.940]  надо доказать...
[02:07:00.940 --> 02:07:02.940]  То есть, по сути, наоборот,
[02:07:02.940 --> 02:07:04.940]  надо просто показать, что этот Z и плюс один
[02:07:04.940 --> 02:07:06.940]  не мог закончиться раньше.
[02:07:06.940 --> 02:07:08.940]  Ну, тут идея очень простая.
[02:07:08.940 --> 02:07:10.940]  Вопрос.
[02:07:10.940 --> 02:07:12.940]  Где закончились его четыре копии?
[02:07:12.940 --> 02:07:14.940]  Ну, четыре копии
[02:07:14.940 --> 02:07:16.940]  в Z и...
[02:07:16.940 --> 02:07:18.940]  В трех Z и закончиться не могли.
[02:07:18.940 --> 02:07:20.940]  Потому что иначе они бы и тут тогда
[02:07:20.940 --> 02:07:22.940]  были, и тогда спрашивается, почему мы отпиливали
[02:07:22.940 --> 02:07:24.940]  вообще Z и, правда?
[02:07:24.940 --> 02:07:26.940]  Понимаете, да?
[02:07:26.940 --> 02:07:28.940]  Но, только есть маленькая проблема.
[02:07:28.940 --> 02:07:30.940]  Если тут нашлось вот,
[02:07:30.940 --> 02:07:32.940]  допустим, три копии
[02:07:32.940 --> 02:07:34.940]  и четвертая пошла в аут,
[02:07:34.940 --> 02:07:36.940]  то опять получается, что у нас строка
[02:07:36.940 --> 02:07:38.940]  Z и периодично,
[02:07:38.940 --> 02:07:40.940]  Z и плюс один периодично.
[02:07:40.940 --> 02:07:42.940]  То есть, следовательно, она
[02:07:42.940 --> 02:07:44.940]  GCD от этих двух чисел
[02:07:44.940 --> 02:07:46.940]  периодично.
[02:07:46.940 --> 02:07:48.940]  Ну, потому что она достаточно длинная, да?
[02:07:48.940 --> 02:07:50.940]  Но GCD
[02:07:50.940 --> 02:07:52.940]  тогда это GCD является делителем
[02:07:52.940 --> 02:07:54.940]  Z и не совпадающим Z и,
[02:07:54.940 --> 02:07:56.940]  следовательно, Z и T
[02:07:56.940 --> 02:07:58.940]  ну, можно сказать, Z и T не базовое.
[02:08:00.940 --> 02:08:02.940]  А это означает, что мы тут вместо Z и могли
[02:08:02.940 --> 02:08:04.940]  тут префиксы поменьше взять.
[02:08:04.940 --> 02:08:06.940]  Все. То есть опять вот,
[02:08:06.940 --> 02:08:08.940]  какая-то вот эта абсолютно стандартная
[02:08:08.940 --> 02:08:10.940]  идея, которую мы, конечно, просто эксплуатируем,
[02:08:10.940 --> 02:08:12.940]  просто,
[02:08:12.940 --> 02:08:14.940]  что называется, фост и взрыв.
[02:08:14.940 --> 02:08:16.940]  Так.
[02:08:16.940 --> 02:08:18.940]  Вот.
[02:08:18.940 --> 02:08:20.940]  Итак,
[02:08:20.940 --> 02:08:22.940]  то есть получается, что каждая следующая,
[02:08:22.940 --> 02:08:24.940]  что мы отпиливаем, оно получается
[02:08:24.940 --> 02:08:26.940]  как минимум тоже,
[02:08:26.940 --> 02:08:28.940]  что было раньше, только, вот,
[02:08:28.940 --> 02:08:30.940]  только следующей.
[02:08:30.940 --> 02:08:32.940]  Вот.
[02:08:32.940 --> 02:08:34.940]  Только к нему еще приписали что-то.
[02:08:34.940 --> 02:08:36.940]  Вот.
[02:08:36.940 --> 02:08:38.940]  Ну, теперь выясняет
[02:08:38.940 --> 02:08:40.940]  вопрос. Ну, теперь, на самом деле,
[02:08:40.940 --> 02:08:42.940]  как теперь доказать, что эта последовательность
[02:08:42.940 --> 02:08:44.940]  от пилов не бесконечна?
[02:08:46.940 --> 02:08:48.940]  Ну, точнее так.
[02:08:48.940 --> 02:08:50.940]  Ну, точнее, что рано или поздно нам потребуется
[02:08:50.940 --> 02:08:52.940]  отпилить что-то, равное W.
[02:08:52.940 --> 02:08:54.940]  Да.
[02:08:54.940 --> 02:08:56.940]  Но заметим следующее, что единственное,
[02:08:56.940 --> 02:08:58.940]  почему оно, если оно всегда меньше W,
[02:08:58.940 --> 02:09:00.940]  то тогда найдется длина,
[02:09:00.940 --> 02:09:02.940]  которая, начиная с какого-то момента,
[02:09:02.940 --> 02:09:04.940]  пойдет навсегда.
[02:09:04.940 --> 02:09:06.940]  Ну что, значит, она пойдет какая-то длина.
[02:09:06.940 --> 02:09:08.940]  Если тут все Z биометал photograph's
[02:09:08.940 --> 02:09:10.940]  пойдут длины l, то тогда это означает,
[02:09:10.940 --> 02:09:12.940]  что, начиная с какого-то момента,
[02:09:12.940 --> 02:09:14.940]  строка станет просто l периодичной.
[02:09:14.940 --> 02:09:16.940]  В общем, l меньше, чем W.
[02:09:18.940 --> 02:09:20.940]  Это запрещено.
[02:09:20.940 --> 02:09:22.940]  Да. Но просто этот суффикс будет...
[02:09:22.940 --> 02:09:24.940]  Но тогда просто это означает, что как бы
[02:09:24.940 --> 02:09:26.940]  вся эта строка, начиная с какого-то момента,
[02:09:26.940 --> 02:09:33.540]  и w периодично, а следовательно она будет в hcd от l и w периодично, значит w не базовая, потому что
[02:09:33.540 --> 02:09:42.580]  опять там, потому что этот hcd является делителем w, но не совпадает с самим w. Да, так, то есть смотрите,
[02:09:42.580 --> 02:09:53.580]  уже неплохо, то есть этот алгоритм закончится. Чудо, да? Ну а запнулись мы даже не в этом месте,
[02:09:54.260 --> 02:10:01.740]  с этим мы справились, запнулись мы на более серьезном утверждении. Нам было заявлено,
[02:10:01.740 --> 02:10:11.500]  что этот алгоритм становится раньше, чем закончится первая копия w. То есть утверждается,
[02:10:11.500 --> 02:10:21.180]  что этот алгоритм отпилит строчек суммарной длины строго меньше, чем w. Ну кстати, давайте
[02:10:21.180 --> 02:10:27.100]  поймем. Давайте вообще поймем, зачем этот алгоритм вообще нужен, какое он клемия вообще
[02:10:27.100 --> 02:10:42.380]  имеет отношение. Ну я скажу так, давайте мы вот где-то остановились, мы знаем, что мы остановились
[02:10:42.380 --> 02:10:49.060]  не на целой части w, потому что иначе мы бы зациклились. Заметим, что алгоритм ни в коем
[02:10:49.220 --> 02:10:56.860]  времени так или иначе не мог отпилить несколько целых копий w и больше ничего. Потому что если
[02:10:56.860 --> 02:11:00.940]  это так произошло, значит он зациклится. А мы убедились, что это невозможно. Так вот,
[02:11:00.940 --> 02:11:08.860]  значит он где-то остановился. Я утверждаю, что это и есть w, надо взять как w2, а это w1. Ну потому
[02:11:08.860 --> 02:11:13.700]  что здесь становится достаточно очевидно, потому что тогда вот этот алгоритм и будет нам гарантировать,
[02:11:13.700 --> 02:11:19.100]  что у этой строки префиксного периода меньше, чем w нет. Ну что, понимаете, минимальная такая,
[02:11:19.100 --> 02:11:23.300]  минимальный такой префикс и есть минимальный префиксный период, как мы поняли, да? Потому что
[02:11:23.300 --> 02:11:28.700]  z по любасику базовая. Поэтому получается, то есть зачем нам нужен этот алгоритм? Забабахаем этот
[02:11:28.700 --> 02:11:40.620]  алгоритм, что какой огрузок от w в конце останется, w2 мы в качестве w2 берем и радуемся. Теперь фишка
[02:11:40.620 --> 02:11:44.820]  еще в том, то есть она нам еще поможет, что на самом деле вот это вот финальный распил,
[02:11:44.820 --> 02:11:49.020]  он произойдет не здесь, а на самом деле здесь. То есть мы не можем в какой-то момент сказать,
[02:11:49.020 --> 02:11:59.700]  что мы скушаем целую строчку w и пойдем дальше. И вот на этом мы запнулись. И вот теперь, значит,
[02:11:59.700 --> 02:12:14.020]  пришло время разопнуться. Так, где бы нам это сделать? Все? Ты готов к этому? Так, Никита готов.
[02:12:14.020 --> 02:12:30.700]  А все готовы? Так. Как-то что-то не уверенно как-то. Ну это, конечно, да, но это называется,
[02:12:30.700 --> 02:12:38.260]  как это, да. А еще, да, надо разбить большую гору, не выкинуть ли нам для этого молотки.
[02:12:44.020 --> 02:12:51.620]  А, это ты отправил, да? Пришлось по всем конкурентам по одному приходить. Ну да, да, да. Ну ладно,
[02:12:51.620 --> 02:12:57.380]  неважно. Окей, хорошо. Ладно, давайте все. К сожалению, придется это убрать. Ну потому что я, кстати,
[02:12:57.380 --> 02:13:05.060]  не уверен, что леммы в таком виде нам вообще понадобятся, кстати. Да? Уверен? Да, вот эти
[02:13:05.060 --> 02:13:08.140]  леммы, наверное, уже в таком виде. Вот тебе лемма понадобится, потому что по большому счету мы
[02:13:08.140 --> 02:13:16.020]  занимаемся тем, что доказываем ее, да. Нормально. Значит, смотрите. Поехали. Давайте я тут побольше
[02:13:16.020 --> 02:13:34.660]  нарисую. В. В. Господи. Значит, смотрите. Будем отпиливать. Отпиливаем зетки. Отпиливаем,
[02:13:34.660 --> 02:13:41.260]  отпиливаем, отпиливаем, отпиливаем. И тут опа, неожиданно перескочили границу. Да, как мы уже
[02:13:41.260 --> 02:13:47.460]  сказали, вот это вот границы отпилов. Так вот, заметим, что вот это вот само w отпилом быть не
[02:13:47.460 --> 02:13:56.740]  может. Почему? Потому что если мы отпилили в какой-то момент ровно w, значит будет зацикл,
[02:13:56.740 --> 02:14:05.780]  а это невозможно. Более, я вам даже больше скажу. Смотрите, вот допустим, вот эта вот штука у меня
[02:14:05.780 --> 02:14:15.500]  будет равна, ну допустим, она равна, этот отпил будет равен w плюс p. Тогда, смотрите, рассмотрим,
[02:14:15.500 --> 02:14:25.900]  где-то тут рассмотрим число p. Так вот, утверждение, число p отпилом не является. Вот смотрите,
[02:14:25.900 --> 02:14:29.340]  ну пусть, смотрите, пусть мы в какой-то момент перескочили через границу w. Пусть
[02:14:29.340 --> 02:14:41.380]  первый отпил после w это w плюс p. Утверждение, p, то есть за w, спасибо. Ну вот, p, не отпил.
[02:14:41.380 --> 02:14:51.700]  Спасибо. p не отпил. Почему? Потому что если у нас и p отпил, то есть если у нас p отпил,
[02:14:51.700 --> 02:15:00.980]  а потом w плюс p отпил, то опять зацикл налицо. Ну тогда смотрите, какая магия. Вот рассмотрим,
[02:15:00.980 --> 02:15:06.340]  то есть p находится между какими-то отпилами. Да, кстати, 0 мы тоже будем считать отпилом для
[02:15:06.340 --> 02:15:23.540]  удобства. Так вот, смотрите, идея такая. Давайте я вот эти вот две строчки назову x и y. Тогда
[02:15:23.540 --> 02:15:29.180]  я утверждаю следующее. Ну легко показывать, что так как мы решили вот эту строку x плюс y отпилить,
[02:15:29.180 --> 02:15:46.780]  то, наверное, где-то здесь было 4x плюс y, да? Логично, да? А, вы еще налево. У нас в
[02:15:46.780 --> 02:15:57.820]  прошлый раз y был x. А теперь вот. А, нет, все. Черт. Тут уже не принципиально, на самом деле,
[02:15:57.820 --> 02:16:03.420]  то, что было в прошлый раз надо вообще забыть. Вот. Но нет, как хочешь, если ты хочешь ввести
[02:16:03.420 --> 02:16:15.420]  другие буквы, давай пока не поздно. Давай вместо x. Вместо x. Да? Да. Пожалуйста. Хорошо. Так,
[02:16:15.660 --> 02:16:23.580]  пусть это будет x. Ну, хорошо. Пусть это будет x. А дальше мы отпилили. Мы смотрим, когда мы отпилили
[02:16:23.580 --> 02:16:30.300]  сам x, да? Не совсем. Ну, нет, сам x мы никогда не отпиливали. Так, вот у нас тут слева есть и это.
[02:16:30.300 --> 02:16:37.500]  Так, придется тут ввести другие буквы. Мы там вводили какие-нибудь буквы? Ну, можно z,
[02:16:37.500 --> 02:16:45.340]  например. z, а тут? Ну, мы, короче, не вводили для двух частей. Хорошо. Ладно, я введу a и b.
[02:16:45.340 --> 02:16:55.020]  A и z, хорошо. Значит, итак, ab, ab, ab, ab. Ну, как-то там накладывается. Так вот. Ну, понятно, да?
[02:16:55.020 --> 02:16:59.380]  Потому что раз мы отпилили вот эту строку a плюс b, значит, тут еще три копии a плюс b было. У нас
[02:16:59.380 --> 02:17:10.900]  алгоритм так устроен, да? А теперь смотрите внимательно. Заметим, что строка, начинающая
[02:17:10.900 --> 02:17:15.460]  с x и строка, начинающая с w плюс x, это одно и то же.
[02:17:27.460 --> 02:17:32.740]  Верно. К чему это нас приводит? А приводит нас так вот к чему. Это означает, что эта строка
[02:17:32.740 --> 02:17:45.460]  начинается со строк b, ab, ab, ab. Ну, я просто вот это переписал. Абсолютно то же самое. Что там
[02:17:45.460 --> 02:17:54.860]  дальше я не знаю, но уж тут точно будет b, ab, ab, ab. Это я гарантирую. Ну, в принципе,
[02:17:54.900 --> 02:18:08.700]  гарантирую, что тут еще и ab было на самом деле. Вот. А теперь магия. А теперь супермагия. Вы же
[02:18:08.700 --> 02:18:14.700]  помните, что каждый следующий отпил, то есть каждый предыдущий отпил является префиксом всех
[02:18:14.700 --> 02:18:25.100]  следующих, да? Чего? Я помню. Каждый отпил является префиксом следующего. Да, у нас бы тут
[02:18:25.100 --> 02:18:31.780]  уже даже записали этот. Было, было. Только что было. Пять минут назад было. И тогда, кстати, тоже.
[02:18:31.780 --> 02:18:48.820]  Нет. Нет, префикс это вообще не правда. Правда, правда, правда. Ну, в целом, да. Ну, как бы,
[02:18:48.820 --> 02:18:56.020]  логично следующее, что ладно, если мы верим в то, что они не убывают, то после того, как вы отпилили
[02:18:56.020 --> 02:19:01.700]  z и, у вас там дальше идут три копии z и. Так что понятно, что то, что вы, если вы отпиливаете не
[02:19:01.700 --> 02:19:08.660]  менее чем z и, значит, вы отпилили z и еще что-то. Так что нет. Так, все, разобрались, не кидывали
[02:19:08.660 --> 02:19:15.460]  зай. Давай. Все. Потому что теперь, смотрите, но тогда, смотрите, у нас имел место отпил ab, да?
[02:19:15.460 --> 02:19:26.740]  Значит, любой следующий отпил имеет префикс ab. Догадываетесь, что это значит? Это означает,
[02:19:26.740 --> 02:19:38.540]  что в этом месте, да, да, в этом месте есть, имеет место строчка ab, то есть после wx мы начинаем с ab.
[02:19:38.540 --> 02:19:53.420]  Нет, а вдруг это был самый последний отпил? Самый последний отпил? Смотри, а это неважно. Самое
[02:19:53.420 --> 02:19:58.740]  главное, что, хорошо, формальное доказательство. Давай так, формальное доказательство. Ладно,
[02:19:58.740 --> 02:20:05.260]  хорошо, более формальное доказательство звучит так. Вот у нас был последний отпил. У него есть
[02:20:05.260 --> 02:20:12.620]  префикс ab, но тогда, когда мы его отпилили, значит, тут дальше идут как минимум три копии этого же,
[02:20:12.620 --> 02:20:19.580]  значит, префикс ab тут точно есть. Да, спасибо за уточнение, да, действительно, это важно. А то,
[02:20:19.580 --> 02:20:33.420]  мало ли, начну там на экзамене спрашивать. Ну и что? А я скажу, не доказали, минус 8. Ну ладно,
[02:20:33.540 --> 02:20:48.140]  но это вопрос, какой конкретный фистер слил полуфинал, а то, знаешь, там 18 человек поедут,
[02:20:48.140 --> 02:20:54.620]  я надеюсь. Нет, если, конечно, фистер слёт четверть финала столько, что тогда поедет не 18 человек,
[02:20:54.620 --> 02:20:59.500]  тогда я действительно расстроюсь, это да. Но с другой стороны, как вы видите, по 17 году,
[02:20:59.500 --> 02:21:10.540]  хотя хрен его знает, там уровень конкурентов тоже вырос. Ну это проблема. А то жалко вы на
[02:21:10.540 --> 02:21:16.540]  тренировки не ходите обычно, а то в воскресенье там мы писали просто Петрозаводск зимой 14-го года.
[02:21:16.540 --> 02:21:22.340]  Ну вот, скажем, шавер мастерс так просто слёту там в контесте третье место заняли.
[02:21:22.340 --> 02:21:32.580]  Это будет в Фистех-Сити? Да. Кто, что? Можно туда конкурентов не пускать. Не, нельзя. Так, всё.
[02:21:32.580 --> 02:21:39.780]  Это никак не позволяет захода от команды Фистеха. А, ты хочешь из Фистеха не пускать? Ну,
[02:21:39.780 --> 02:21:44.900]  посмотрим. Ну, посмотрим. Ну, письмак по ТФКП в следующее воскресенье. Чего? Теория функции
[02:21:44.900 --> 02:21:49.220]  комплексного переменного, что-то такое. И что? Так, слушай, так, сразу что сказал,
[02:21:49.220 --> 02:21:55.300]  смотри, если вы заморочитесь заранее, его освободят от этого дела. И вообще,
[02:21:55.300 --> 02:21:59.780]  то есть я думаю, тогда просто если мы заранее предупреждим об этом Рыгородского, то я думаю,
[02:21:59.780 --> 02:22:06.220]  Рыгородский в этом месте на встречу пойдёт. Рыгородский в плане, это не кафедра ДМА? Ну,
[02:22:06.220 --> 02:22:09.620]  тем не менее, но это факультет, так что я думаю, как-то порешать вопрос, мне кажется, по крайней
[02:22:09.620 --> 02:22:14.780]  мере, попытаться стоит. Так, то есть вы утверждаете, погодите, то есть поэтому, как вы так, обязательно
[02:22:14.780 --> 02:22:18.660]  напишите мне, там, когда у кого какая контроль, какая там принципиальная контрольная по ТФКП.
[02:22:18.660 --> 02:22:48.660]  Не во время четверти. Чего? Не во время четверти, а во время трени. Аааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааааа
[02:22:48.660 --> 02:23:16.660]  Не-не-не, нет, слушайте, нет, я вас уверен, там, на полуфинал, за поехавших на полуфинал, я думаю, тут точно прижёмся. Так вот, ладно, не будем это, пока, значит, смотрите, тогда смотрите, какая магия, он начинается с, это, значит, W плюс X, дальше идёт строка AB, то есть он начинается с AB, но ещё он начинается с BA. То есть вывод очень простой. AB, RAVDO, BA, и чё это значит, как вы думаете?
[02:23:16.660 --> 02:23:34.660]  Нет, ну не, ну не группа, ну, а, ну, так, нет, давайте, нет, давайте подумаем, в чём противоречие? Вот я утверждаю, что вот это, этот факт того, что здесь, как бы, что вот AB...
[02:23:34.660 --> 02:23:37.660]  Ну, видимо, мы могли определить сильно меньше в тот раз.
[02:23:37.660 --> 02:23:50.660]  На самом деле, смотрите, нет, ну да, ну, по сути, да, AB равно BA, это означает, что у этой строчки есть период, ну, не прям нацело, но период меньше, чем A плюс B.
[02:23:50.660 --> 02:24:11.660]  Ну, то есть утверждение такое, это строка модуль A периодично. Вот это строка модуля A периодично, почему? Потому что вот это равно вот этому, то есть, если вот этот суффикс длинный там, вот, сдвините налево на A, то получится то же самое.
[02:24:11.660 --> 02:24:26.660]  А ещё, ну, она не просто A периодично, она ещё и B периодично, ровно по той же причине. Ну, если она A периодичная, и B периодичная, и её длина A плюс B, следовательно, она GCD от AB периодично.
[02:24:26.660 --> 02:24:40.660]  Ну, можно сказать просто всё, она не, ну, вот, то есть она не базовая. Ну, раз она не базовая, то есть её можно распилить на одинаковые копии, но тогда получается, что вот эту четвёрку можно было уже здесь и поменьше сделать.
[02:24:41.660 --> 02:24:44.660]  Ага, да, вот на чём мы не додумались в прошлый раз.
[02:24:54.660 --> 02:25:03.660]  Так что вот такая неожиданная магия. То есть вот, да, как-то вот такое, то есть вот такой вот оказался момент, до которого мы просто взяли и не додумались.
[02:25:04.660 --> 02:25:10.660]  Вот. Да, то есть очень красивый момент.
[02:25:14.660 --> 02:25:32.660]  Ну, да. Ну, чё, нет, почему наклона нет. Классика это называется «Дубинки» там в фильме «Проморозка». Там что-то в надо, как бы это, в начале фильма там, что-то летом, называется, Иванушка взял дубинки, отправил в небо, сказал ось к зиме вернуться, а потом в самый нужный момент зимой они реально вернулись.
[02:25:32.660 --> 02:25:36.660]  Причём упали на голову ровно тому, кому надо. Это было красиво.
[02:25:38.660 --> 02:25:53.660]  Вот. Хорошо. Так вот, смотрите. Значит, это у нас АВ. Так, ну хорошо, то есть мы доказали, что отпиливать мы будем не более, чем w. То есть закончим отпилы мы раньше, чем закончится w.
[02:25:54.660 --> 02:26:07.660]  А знаете, что это значит? Это значит, что мы же можем, как мы уже поняли, мы вот этот алгоритм можем в явном виде, то есть вот этот z найти и отпилить мы можем за o от z, мы это уже выяснили, да? Согласны?
[02:26:09.660 --> 02:26:20.660]  Это означает, что в принципе верна не просто лемма, а верно ещё то, что вот сами по себе эту w2 и w1 мы прекрасно можем найти за o от w.
[02:26:23.660 --> 02:26:27.660]  А я даже больше скажу. За o от w1, я бы сказал.
[02:26:33.660 --> 02:26:38.660]  По факту алгоритм у нас работает за o от суммарной длины того, что мы отпилили.
[02:26:40.660 --> 02:26:41.660]  А зачем он 2?
[02:26:42.660 --> 02:26:43.660]  Кто 2?
[02:26:43.660 --> 02:26:44.660]  Зачем он было 2?
[02:26:45.660 --> 02:26:53.660]  Ну мы ещё не весь алгоритм описали. Мы же только про лему говорим, а не про всю теорию модекомпозиции.
[02:26:53.660 --> 02:27:08.660]  Итак, пока мы просто говорим, что, скажем так, у нас есть алгоритм, который распилил w на w1, w2 с вот таким вот мистическим свойством.
[02:27:08.660 --> 02:27:21.660]  Вот. Спрашивается, зачем это нам? То есть алгоритм есть, он работает за o там, получается, при желании даже не просто o от w, а o от w1.
[02:27:22.660 --> 02:27:28.660]  Вот. Так вот, дальше пришло время теперь доказывать теорию модекомпозиции.
[02:27:29.660 --> 02:27:32.660]  Вот. Так, всё, вот это запомнили.
[02:27:33.660 --> 02:27:37.660]  Далее. Ну вот. А теорию модекомпозиции мы уже запомнили?
[02:27:38.660 --> 02:27:42.660]  Ну ладно, теорию модекомпозиции я, пожалуй, стирать не буду, потому что мы её доказываем сейчас.
[02:27:43.660 --> 02:27:50.660]  Да, вот это вот всё, да, это всё мы можем уже убрать спокойненько. Там это мы убираем, это мы убираем.
[02:27:51.660 --> 02:27:58.660]  Ну вот. Так, алгоритм запомнили, запомнили, что он будет работать ещё и за o от w1, при желании, да.
[02:27:59.660 --> 02:28:03.660]  То есть будем отпиливать, отпиливать, отпиливать и отпиливать.
[02:28:04.660 --> 02:28:07.660]  Потому что дальше появляется алгоритм, который работает следующим образом.
[02:28:08.660 --> 02:28:13.660]  Так, смотрите. Так, мы доказываем вот эту вот строку r, да.
[02:28:14.660 --> 02:28:18.660]  Так вот. Сейчас мы к этой строке r применим следующий алгоритм.
[02:28:19.660 --> 02:28:27.660]  While у r хотя бы два префиксных периода.
[02:28:34.660 --> 02:28:44.660]  Что мы делаем? Мы скажем, что пусть у меня p2 это второй префиксный период.
[02:28:49.660 --> 02:28:52.660]  О, красота, красота.
[02:28:57.660 --> 02:29:14.660]  Значит дальше алгоритм говорит так. Найти такое i меньше модуль r, такое что, ладно, вру, меньше, ладно, меньше не i, а меньше, чем p2.
[02:29:14.660 --> 02:29:40.660]  Такое что r от i, r не имеет префиксного периода, короче, p2.
[02:29:44.660 --> 02:29:49.660]  Ну и просто говорим, что r присвоит этой штуке, то есть отпил.
[02:29:49.660 --> 02:29:53.660]  Вот.
[02:30:09.660 --> 02:30:14.660]  Давайте, так, давайте, раскусите этот алгоритм.
[02:30:14.660 --> 02:30:16.660]  Пожалуйста.
[02:30:17.660 --> 02:30:19.660]  Пожалуйста.
[02:30:19.660 --> 02:30:24.660]  Давайте.
[02:30:24.660 --> 02:30:26.660]  Давайте.
[02:30:43.660 --> 02:30:49.660]  Да, почему? Так, ну напоминаю, мы как бы не лему 3 доказываем, мы уже теперь моде композиции доказываем, да.
[02:30:49.660 --> 02:30:59.660]  Да, у нас цель распилить r на две части, так и можно, чтобы у второй части префиксный период был не более чем один.
[02:31:00.660 --> 02:31:07.660]  И мы говорим, пока у r хотя бы два есть, то мы выполняем какой-то добрый отпил.
[02:31:14.660 --> 02:31:16.660]  А что за i меньше, чем p2?
[02:31:16.660 --> 02:31:26.660]  Найти такую, вот смотри, а вот, мы находим мы, ну наш, ну вот, вот здесь, то есть мы находим какую-то позицию i такую, что все перед i надо отпилить.
[02:31:27.660 --> 02:31:28.660]  Почему надо?
[02:31:28.660 --> 02:31:29.660]  Хотим.
[02:31:30.660 --> 02:31:35.660]  Ну, хотим, говорит, а у нас есть два префиксных периода, хотя бы два, пусть они p1 и p2, да.
[02:31:36.660 --> 02:31:44.660]  Так вот, я хочу найти у r такой суффикс, у которого префиксный период минимальный, минимальный, хотя бы p2.
[02:31:47.660 --> 02:31:53.660]  То есть, лемма гарантировала, что я могу это сделать.
[02:31:54.660 --> 02:31:56.660]  Такой, что префиксный период.
[02:31:57.660 --> 02:32:03.660]  Не имеет префиксного периода, короче, p2, ладно, я тут сразу петую написал.
[02:32:04.660 --> 02:32:06.660]  Ну да, в плане, а почему сейчас такой?
[02:32:07.660 --> 02:32:12.660]  А потому что, смотри, сейчас картинку нарисуем, жила была r, да.
[02:32:13.660 --> 02:32:14.660]  Почему они монотонные в плане?
[02:32:14.660 --> 02:32:15.660]  Да почему?
[02:32:15.660 --> 02:32:16.660]  Сейчас, смотри, ну в смысле монотонные.
[02:32:17.660 --> 02:32:18.660]  Нет, я так отпиливаю, смотри.
[02:32:19.660 --> 02:32:22.660]  Потому что идея такая, жил был у меня префиксный период, даже не минимальный, вот он.
[02:32:23.660 --> 02:32:26.660]  Но это префиксный период, p2, p2, p2, p2.
[02:32:27.660 --> 02:32:32.660]  То есть, вот у меня вот, давай вот эту строку я, ну вот, тогда утверждение такое.
[02:32:33.660 --> 02:32:38.660]  Давай я скажу, пусть у меня w, это равно вот это вот префикс длины p2.
[02:32:41.660 --> 02:32:42.660]  Тогда что говорит лемма 3?
[02:32:42.660 --> 02:32:43.660]  Что говорит лемма 3?
[02:32:44.660 --> 02:32:51.660]  Лемма 3 говорит, что w можно распилить на, то есть, вот это вот w на, как бы, w1, w2.
[02:32:52.660 --> 02:32:54.660]  И тут автоматически w1, w2.
[02:32:55.660 --> 02:32:57.660]  W, потому что p2 базовый.
[02:32:58.660 --> 02:32:59.660]  Ну вот.
[02:33:00.660 --> 02:33:01.660]  Да, p2 базовый, это важно.
[02:33:02.660 --> 02:33:08.660]  И тогда оказывается, что можно распилить таким образом, чтобы вот это, чтобы вот эта вот строка,
[02:33:08.660 --> 02:33:14.660]  то есть w2, 3 копии w и еще абсолютно любая хрень здесь, как сказал бы классик.
[02:33:15.660 --> 02:33:16.660]  Вот.
[02:33:17.660 --> 02:33:20.660]  Соответственно, не имеет префиксного периода меньше, чем длина этого w, то есть p2.
[02:33:21.660 --> 02:33:22.660]  Вот.
[02:33:23.660 --> 02:33:24.660]  Такая небольшая магия.
[02:33:25.660 --> 02:33:26.660]  Вы ищете любой такой.
[02:33:27.660 --> 02:33:28.660]  Абсолютно любой.
[02:33:29.660 --> 02:33:32.660]  Я какой-нибудь вот такой и неожиданно найду.
[02:33:33.660 --> 02:33:39.660]  Более того, я уже, более того, мы уже описали, какие был алгоритм за o от w1, я его даже найду.
[02:33:40.660 --> 02:33:41.660]  Помните, да?
[02:33:42.660 --> 02:33:46.660]  То есть я там за o от w1 его найду, отпилю.
[02:33:47.660 --> 02:33:48.660]  И скажу, что у меня радость.
[02:33:49.660 --> 02:33:50.660]  Но, впочем, это неважно.
[02:33:51.660 --> 02:33:54.660]  Что за o от w1, я вам забегаю вперед скажу, но уже хорошо.
[02:33:55.660 --> 02:33:56.660]  Сейчас.
[02:33:56.660 --> 02:33:57.660]  Вот.
[02:34:00.660 --> 02:34:02.660]  То есть мы смотрим префиксный период.
[02:34:05.660 --> 02:34:07.660]  Вот наш алгоритм умеет искать два префисных периода.
[02:34:08.660 --> 02:34:09.660]  Ага.
[02:34:10.660 --> 02:34:15.660]  А потом нам нужно найти, а потом нам нужно находить отпиливать, пока у нас не придет w2.
[02:34:16.660 --> 02:34:17.660]  Нет, не совсем так, все еще круче.
[02:34:18.660 --> 02:34:19.660]  Мы найдем два префиксных периода.
[02:34:20.660 --> 02:34:22.660]  То есть на самом деле алгоритм будет звучать, ну, не важно как будет.
[02:34:23.660 --> 02:34:24.660]  Как мы будем искать вот это w2?
[02:34:25.660 --> 02:34:26.660]  А как раньше отписали.
[02:34:27.660 --> 02:34:32.660]  Прямо в явном виде возьмем вот эту строчку, прямо даже вот эту строчку.
[02:34:33.660 --> 02:34:35.660]  Но можно там, мысленно пятую копию прихвЫсовать, ну, это не важно.
[02:34:36.660 --> 02:34:40.660]  И будем от нее просто честно отпиливать, то есть находить минимальный префиксный период отпиливать,
[02:34:41.660 --> 02:34:42.660]  потом опять находить минимальный префиксный период отпиливать,
[02:34:43.660 --> 02:34:46.660]  до тех пор, пока этот минимальный префиксный период, он не окажется хотя бы p2.
[02:34:46.660 --> 02:34:57.220]  хотя бы п2, да, то есть заметим, что каждый отпил мы будем находить за от его длины,
[02:34:57.220 --> 02:35:02.660]  поэтому как бы суммарно это получится за сколько нам надо. Ну вот, но правда и сам второй прификсный,
[02:35:02.660 --> 02:35:06.500]  правда всю эту операцию мы все равно, то есть получается сделаем за от п2, потому что нам
[02:35:06.500 --> 02:35:12.380]  нужна от п2 для того, чтобы вообще второй прификсный период найти. Но это пока не важно,
[02:35:12.380 --> 02:35:20.580]  пока как бы важно, что мы теорему доказываем. Сейчас нам важно другое. То есть хорошо, вот мы
[02:35:20.580 --> 02:35:28.540]  применили этот алгоритм. Да, в принципе становится очевидно, что, ну хотя нет, пока вообще даже не
[02:35:28.540 --> 02:35:34.020]  очевидно, закончится ли вообще этот алгоритм. А вот действительно закончится ли этот алгоритм.
[02:35:34.020 --> 02:35:39.500]  Да, ну правда заметим в следующий, что мы что-то отпиливаем, но заметим, что от п2 мы никогда не
[02:35:39.500 --> 02:35:47.300]  отпилем все по этому алгоритму. Обратите внимание, да? Нет, все мы не отпилем, потому что по определению.
[02:35:47.300 --> 02:35:57.380]  Ну в смысле не больше, чем у АТР шагов. Да, на самом деле меньше либо равно. Вот так.
[02:35:57.380 --> 02:36:05.900]  Нет, ну нам не хотелось бы, чтобы пустая строчка была. Нам принципиально, чтобы вот эта В была
[02:36:05.900 --> 02:36:13.020]  не пустая, причем у нас даже есть сильное условие, что она должна быть очень не пустая. Точнее так,
[02:36:13.020 --> 02:36:21.180]  она может быть настолько не пустая, что у это от шифта даже ее. А теперь давайте думать.
[02:36:21.180 --> 02:36:28.820]  Ну то есть отдельно закончится ли вообще? Ну то есть да, алгоритм конечно закончится.
[02:36:28.820 --> 02:36:39.180]  Вот. Но на самом деле заметим, что он будет заканчиваться быстрее, чем кажется. Знаете,
[02:36:39.180 --> 02:36:43.660]  почему? Потому что у нас была мистическая теорема, когда-то давным-давно, не будем сейчас
[02:36:43.660 --> 02:36:48.100]  повторять доказательства, что если у нас есть два префиксных периода, то не отличается друг от друга
[02:36:48.100 --> 02:36:56.340]  хотя бы в к-минус один раз. Даже Серге, по-моему, уже что-то повторяли. Да, то есть если у тебя есть два разных,
[02:36:56.340 --> 02:37:00.980]  у строки есть два разных префиксных периода, то они отличаются друг от друга даже строго больше,
[02:37:00.980 --> 02:37:09.380]  чем в к-минус один раз. Была такая теорема. Но тогда это означает следующее. Все, смотрите,
[02:37:09.380 --> 02:37:14.660]  если у нас сейчас, то есть тогда мы заметим, что у нас сейчас П2 это второй префиксный период,
[02:37:14.660 --> 02:37:23.140]  да, и он на следующем шаге будет, даже первый префиксный период будет не менее чем П2. То есть
[02:37:23.140 --> 02:37:27.820]  следовательно, у нас длина второго префиксного периода на каждом шаге получается в три раза
[02:37:27.820 --> 02:37:35.500]  больше, чем в прошлые разы. То есть получается итерация, которая сделает этот вайл, но это не
[02:37:35.500 --> 02:37:43.260]  сильно претепляет, даже не более, чем логарифм получается. Да, но не то чтобы нам это сейчас сильно
[02:37:43.260 --> 02:37:50.140]  помогает, но пока просто для понимания происходящего. Сейчас мы еще более внимательно посмотрим,
[02:37:50.140 --> 02:37:56.140]  какие строки он отпиливает и убедимся, что на самом деле, что на самом деле, действительно,
[02:37:56.140 --> 02:38:14.060]  не слишком много отпилит вот в этом вот плане. Давайте внимательно думать, потому что давайте,
[02:38:14.620 --> 02:38:24.180]  тут еще верно следующее, что каждая вот эта итерация вайла, она сделается за от П2 и при этом отпилит
[02:38:24.180 --> 02:38:37.340]  меньше, чем П2 элементов, правда? Ну, не больше, чем П2. Она отпилит, да, не более, чем П2 элементов.
[02:38:37.340 --> 02:38:47.100]  Ну, она отпилит строго меньше, чем П2, на самом деле. Она отпилит и минус один. Понимаете, да? Ну,
[02:38:47.100 --> 02:38:58.180]  тогда, вот, так что она это отпилит. Но самое главное для нас вот, что и так в самом конце,
[02:38:58.180 --> 02:39:05.940]  у нас осталась какая-то строка R, у которой есть только один префиксный период. Ну, не более,
[02:39:05.940 --> 02:39:15.500]  чем один. Вот. Ну, теперь возникает вопрос. Ну, то есть, нам теперь нужно вот что-то про шифт
[02:39:15.500 --> 02:39:24.140]  доказать, да? Ну, во-первых, заметим вот что. Смотрите, у этой строки, смотрите, когда мы тут
[02:39:24.140 --> 02:39:32.940]  отпиливали, у нас были первые префиксные периоды. Давайте их назовем P1, P2, P3 и так далее. Вот,
[02:39:32.940 --> 02:39:42.900]  допустим, мы отпиливали L раз, да? Вот. Вот. И в конце вот у нас осталась финальная строка R,
[02:39:42.900 --> 02:39:50.940]  в которой там P1, L плюс 1, который может быть какой-нибудь там, может быть бесконечностью,
[02:39:50.940 --> 02:39:59.100]  в смысле, не существует. Значит, это у нас первые префиксные периоды. А еще у нас были
[02:39:59.100 --> 02:40:10.580]  вторые префиксные периоды. То есть, я так нарисую. Они были P2, P1, P2, P2. Нет, нет, нет, нет, не факт,
[02:40:10.580 --> 02:40:21.300]  не факт. Они не совсем не совпадают, они не совпадают, они вот такие. Вот там меньше либо равно.
[02:40:21.300 --> 02:40:30.620]  Ну да. Ну вот. Но при этом мы знаем, что каждый следующий вот здесь, он как бы строго больше,
[02:40:30.620 --> 02:40:40.860]  чем вот умножить на K. Потому что второй префикс, это префиксные периоды одной и той же строки. Это
[02:40:40.860 --> 02:40:52.660]  первый, это второй. Да. Понятно, да? То есть, как у нас эта последовательность растет? То есть,
[02:40:52.660 --> 02:41:06.900]  тут надо умножить на там, ой, как тут это поворачиваться-то? K-1, вот на K-1. Ну вот, и тут.
[02:41:06.900 --> 02:41:17.780]  Да, тут можно тоже это написать. Тут меньше либо равно, тут строго больше, чем умножить на K-1. Вот.
[02:41:17.780 --> 02:41:22.580]  То есть, вот так эти префиксные периоды вообще, последовательности префиксных периодов устроены.
[02:41:22.580 --> 02:41:40.900]  Вот. Ну теперь давайте думать. Теперь давайте думать. Чему равен shift от V? Вот, действительно,
[02:41:40.900 --> 02:41:52.420]  давайте подумаем. Ну вот. Но я утверждаю следующее. Ну, в принципе, по большому счету мы уже
[02:41:52.420 --> 02:42:00.340]  топтались вокруг этого движения. Можем теперь заявить. Ну, во-первых, что удвижение такое. Shift
[02:42:00.340 --> 02:42:09.060]  от V, он, если у нас не более, ну давайте так. То есть, мы уже много раз пользовались тем, что если у строки
[02:42:09.140 --> 02:42:19.740]  нет префиксного периода, то shift он не менее, чем длина строки поделить на K. Было дело, да? Ну,
[02:42:19.740 --> 02:42:24.980]  действительно, если у вас сдвиг меньше, чем длина делить на K, за 4 копии найдутся, значит префиксный
[02:42:24.980 --> 02:42:36.260]  период есть, правда? Более того, как бы могли заметить, если у вас сдвиг, то есть, более того,
[02:42:36.580 --> 02:42:41.380]  следующее, что если минимальный сдвиг у вас есть, и он меньше, чем длина строки делить на K,
[02:42:41.380 --> 02:42:55.860]  то этот сдвиг является префиксным периодом, правда? Ну, давайте еще раз. Ищем shift у какой-нибудь
[02:42:55.860 --> 02:43:01.780]  рандомной строки. И пусть выяснилось, что этот shift, вот длина строки у нас равна N, и, допустим,
[02:43:02.260 --> 02:43:08.100]  этот shift оказался меньше, чем N делить на K. То есть, shift означает, что она вот столько
[02:43:08.100 --> 02:43:13.380]  периодичной, как минимум 4 копии тут есть, и еще дальше что-то идет. Тогда утверждение,
[02:43:13.380 --> 02:43:17.820]  если мы найдем минимальный такой shift, то это строка базовая. Потому что была бы не базовая,
[02:43:17.820 --> 02:43:26.180]  тут был бы меньше период. Вывод. Shift является префиксным периодом. Ну, то есть, если shift
[02:43:26.180 --> 02:43:30.020]  меньше, чем N делить на K, то он является префиксным периодом. Следовательно, если у вас
[02:43:30.020 --> 02:43:41.100]  префиксный период в принципе один, то это он. То есть, у вас префиксный период либо не меньше,
[02:43:41.100 --> 02:43:47.740]  то есть shift у вас либо как минимум вся строка делить на K, то есть, получается тета от ее длины,
[02:43:47.740 --> 02:43:58.420]  либо вот этот префиксный период. Понятно, да? Ну, причем более того, мы выяснили, что если его нет,
[02:43:58.420 --> 02:44:04.620]  так, ну теперь давайте рассмотрим два случая. Пусть его нет. То есть, если префиксного периода нет,
[02:44:04.620 --> 02:44:13.580]  тогда shift у вас, тогда этот shift получается равен чему? V делить на K не менее. Но давайте подумаем,
[02:44:13.580 --> 02:44:23.100]  а сколько мы отпилили? Ну, на самом деле, смотрите, мы отпилили, мы всего отпилили не более чем вот
[02:44:23.100 --> 02:44:28.300]  стока, плюс вот стока, плюс вот сток, плюс вот сток. Правда? Ну, теперь давайте следующее. То есть, мы
[02:44:28.300 --> 02:44:41.660]  пишем отпилили меньше либо равно, чем P2,1, плюс P2,2, плюс P2,3, плюс и так далее, плюс P2,L. Как мы уже
[02:44:41.660 --> 02:44:48.380]  поняли, это не превосходит P2,L умножить на пум-пум-пум-пум-пум. Вот тут с конца лучше писать
[02:44:48.380 --> 02:44:58.460]  1 плюс 1 делить на K минус 1, плюс 1 делить на K минус 1 в квадрате, плюс и так далее. Это, в общем,
[02:44:58.460 --> 02:45:11.700]  короче говоря, это равно θ от P2,L. Понимаете, да? Ну, тогда, то есть, ну, вывод тогда получается
[02:45:11.700 --> 02:45:18.300]  очень простой. Тогда у нас просто два варианта. Если префикс этого периода у итоговой строки нет,
[02:45:18.300 --> 02:45:28.500]  то тогда P2,L, ну, тогда мы просто говорим, что shift это от V, это θ от V, потому что не
[02:45:28.500 --> 02:45:38.340]  менее, чем V поделить на K, правда? Чего? Что не так? С какого? Значит, смотрите. Так вот, мы поняли,
[02:45:38.340 --> 02:45:45.260]  что мы отпилили ровно θ от последнего второго префиксного периода. Тогда у итоговой строки
[02:45:45.260 --> 02:45:54.660]  префиксного периода не оказалось вообще. Тогда ее shift это θ от V, потому что не менее, чем V делить
[02:45:54.660 --> 02:46:09.980]  на K, но не более V. То есть, оно получается такое не более, чем V. Но тогда утверждение следующее,
[02:46:09.980 --> 02:46:22.140]  что P2, наверное, вряд ли очень сильно превосходит V. Причина очень проста. Смотрите, у нас P2,L
[02:46:22.900 --> 02:46:30.820]  перед последним отпилом, P2,L было префиксным периодом. То есть, у нас было 4 раза по P2,L,
[02:46:30.820 --> 02:46:39.660]  у нас еще было в строке R. А мы отпилили меньше, чем одну копию. То есть, следовательно, P2,L не
[02:46:39.660 --> 02:46:51.420]  превосходит даже R поделить на 4. Ну, само P2,L. То есть, P2,L получается не более,
[02:46:51.420 --> 02:46:58.700]  чем треть от остатка V. Ну, или там K минус первая часть. Поэтому получается,
[02:46:58.700 --> 02:47:02.660]  что если у финальной строки префиксного периода нет, то действительно это победа.
[02:47:02.660 --> 02:47:14.740]  А если префиксный период есть, то тогда shift становится либо P0. Но тогда у нас два варианта.
[02:47:15.100 --> 02:47:21.620]  Либо это, то есть, либо он оказывает нот. То есть, тогда либо оказывается, что префиксный период
[02:47:21.620 --> 02:47:26.980]  больше, чем Q делить на K, и утверждение абсолютно доказывается также. Либо эта единственная
[02:47:26.980 --> 02:47:31.580]  проблема может быть, когда вот этот префиксный период все-таки меньше, чем остаток делить на K.
[02:47:31.580 --> 02:47:38.260]  Но тогда из этого следует, что, из этого автоматически следует, что и этот второй
[02:47:38.260 --> 02:47:45.500]  префиксный период, предыдущий был тоже менее, чем… Ну, тогда shift был P1, как мы уже выяснили,
[02:47:45.500 --> 02:47:52.580]  да? Ну, и победа автоматическая. То есть, тогда этот shift будет в P1, а это O от этой штуки.
[02:47:52.580 --> 02:48:03.100]  Поздравляю, все время доказано. Вообще не просто доказано, а исходя из всего остального,
[02:48:03.100 --> 02:48:13.700]  мы вообще-то уже это все уже реализовали. Ну, если у вас не осталось вопросов,
[02:48:13.700 --> 02:48:23.340]  вы уже все поняли. Так, ну давайте так. Теорему доказали, да? Потому что раньше, когда-то,
[02:48:23.340 --> 02:48:28.460]  мы закончили на следующем, что если мы поверили в это, что нам для победы нужно только не просто
[02:48:28.460 --> 02:48:33.620]  поверить в эту теорему, но в явном виде научиться за линию искать вот эти вот УВ, а УВ еще и найти
[02:48:33.620 --> 02:48:42.140]  этот префиксный период, если он есть. Так вот, на самом деле я описал алгоритм, как мы это делаем.
[02:48:42.140 --> 02:48:50.460]  Но теперь смотрите. То есть алгоритм говорит, что мы ищем честно за… То есть мы умеем,
[02:48:50.460 --> 02:48:55.260]  во-первых, мы научились за линию для строки проверять, есть ли у нее два префиксных периода,
[02:48:55.260 --> 02:49:00.040]  и более того, если есть, то мы умеем находить второй префиксный период и заявлять, что мы
[02:49:00.040 --> 02:49:06.580]  проделали действие не более чем от П2. Мы теперь говорим, что мы это несколько раз делали и по
[02:49:06.580 --> 02:49:12.740]  отпиливали. Да? Сами по себе префиксные периоды мы находили за вот эту вот асимптотику, и выяснилось,
[02:49:12.740 --> 02:49:19.500]  что она сумма от последнего отпила, да? А последний отпил мы за линию. Ну вот, это раз. А во-вторых,
[02:49:19.500 --> 02:49:27.060]  вот это интеллектуальное нахождение мы тоже внутри себя научились делать за от П2. Потому что мы там
[02:49:27.060 --> 02:49:30.700]  тоже просто находим минимальные префиксные периоды, отпиливаем, отпиливаем, отпиливаем, до тех пор пока
[02:49:30.700 --> 02:49:36.100]  отпиливается. А выяснится, что быстро отпиливается. Ну что, за последний час, за оставшийся час нам нужно
[02:49:36.100 --> 02:49:53.380]  успеть обсудить дерево денденных повторов. Нет, ну как сказать? Нет, ну скажем так, дерево дендных
[02:49:53.380 --> 02:50:01.340]  повторов я боюсь придется отменить. Нет, ну сформулируем так, оно бы было, если бы я был в прошлый
[02:50:01.340 --> 02:50:07.140]  раз. Ну в прошлый раз я, к сожалению, проболел. Вот. Нет, на самом деле, мне тоже нравится, что вместо
[02:50:07.140 --> 02:50:12.260]  него появилось. Мне кажется, это даже более полезно, на самом деле, если честно было. Ну там важные
[02:50:12.260 --> 02:50:18.180]  чешные алгоритмы были. Вот. Ну соответственно, а вот сувмасс нам обсудить придется. Ну думаю,
[02:50:18.180 --> 02:50:25.260]  мы сегодня за час его спокойно обсудим. Ну вот, а здесь, ну там мы победили. Можете быстро повторить,
[02:50:25.260 --> 02:50:31.540]  что мы делаем, если p1 или plus 1 не бесконечно. Если он не бесконечно, у нас тогда два варианта.
[02:50:31.540 --> 02:50:41.660]  Там либо, если этот p1 оказался все равно больше, чем q делить на k, а ладно, он не оказался. Если он
[02:50:41.660 --> 02:50:47.580]  есть, то он по-любому меньше, чем q делить на k. Но тогда утверждение следующее, что у меня shift,
[02:50:47.580 --> 02:50:52.180]  ну там просто ключевое утверждение, тогда shift в этом случае, либо вот этот префиксный
[02:50:52.180 --> 02:51:02.100]  период, либо тупо q делить на k, либо не менее, чем q делить на k. То есть других шифтов нет там,
[02:51:02.100 --> 02:51:06.620]  потому что если есть shift меньше, значит там с p1 проблемы с его минимальностью префиксного
[02:51:06.620 --> 02:51:14.820]  периода. А если там есть shift меньше, чем q делить на k, но больше, чем p1, ну тоже коллизии. Ну там
[02:51:14.820 --> 02:51:22.980]  с этими периодами, базовостями и так далее. Поэтому мы говорим, что единственным, то есть получается,
[02:51:22.980 --> 02:51:31.020]  то есть shift у нас как минимум омега от p1. Вот так скажем в любом случае. Но мы доказали,
[02:51:31.020 --> 02:51:39.260]  что мы раньше отпилили о от p2l, который не превосходит этого префиксного периода. Все. Ура.
[02:51:44.940 --> 02:51:52.260]  Так что вот такая разница. Есть ли тут вопросы?
[02:51:52.260 --> 02:52:15.980]  Почему p1 и q1 меньше, чем q9 на k? Потому что по определению префиксного периода. То есть
[02:52:15.980 --> 02:52:24.380]  как бы p является префиксным периодом строки, значит 4 копии p. Где я произнес такое умное слово?
[02:52:24.380 --> 02:52:29.860]  Где я произнес q? Ну для нас строки делить на k хорошо.
[02:52:45.980 --> 02:53:14.300]  Вот. Ну что? Да нет, наверное. Окей.
[02:53:14.300 --> 02:53:24.820]  Ура, мы справились. Да, это конечно стоило нам больше негрных клеток, чем я изначально думал,
[02:53:24.820 --> 02:53:33.780]  если честно. Но мы в итоге справились. Ну посмотрим. Интересно, что будет в следующем
[02:53:33.780 --> 02:53:42.340]  году на самом деле. Потому что в этом году что-то как-то так заходит, что то ли все упорно молчат,
[02:53:42.340 --> 02:53:50.940]  то ли как-то там даже софт хип оказался не очень сложным алгоритмом. Ну тогда нет, то есть правда
[02:53:50.940 --> 02:53:57.500]  это хор, то что тогда на отл. То есть я не знаю, это придумать вот это с нуля или софт хип там.
[02:53:57.500 --> 02:54:05.860]  По токе. Нет, у меня теоретически была мечта. У меня были силы. Я бы вообще, на самом деле,
[02:54:05.860 --> 02:54:10.100]  можно было забабахать просто отдельный спецкульс типа там супер продвинутые алгоритмы.
[02:54:10.100 --> 02:54:18.220]  Нет, ну как бесполезно. Нет, с точки зрения науки это интересно. Там много чего копать,
[02:54:18.220 --> 02:54:23.260]  потому что если изучать алгоритмы, то знаешь, что тоже голубая мечта, из этого можно хоть там
[02:54:23.260 --> 02:54:38.140]  спецкульс сделать. Можно, можно. Ну это называется да. Ну да. Ну как сказать, вы уже на последних
[02:54:38.140 --> 02:54:49.740]  контестах какую-то там элементарную задачу на потоке не сдали. Да ты так что, ты ж кубок не
[02:54:49.740 --> 02:54:59.740]  пишешь. Давай. А ну нет, у тебя в принципе есть опция написать еще последний этап кубка. Да,
[02:54:59.740 --> 02:55:16.460]  ну твое право. Хотя зря там висит, там висело на самом деле. Да, конечно, в принципе неожиданно,
[02:55:16.460 --> 02:55:20.380]  конечно, заканчивать курс по строкам именно этим алгоритмам, учитывая, что мы в принципе с вами
[02:55:20.380 --> 02:55:25.420]  обсудили. То есть смотрите, на самом деле мало того, что мы это с вами как бы обсудили более
[02:55:25.420 --> 02:55:28.980]  сложные алгоритмы, так более того и в принципе парадокс в том, что мы сейчас будем изучать
[02:55:28.980 --> 02:55:35.740]  алгоритм строения суфмасса за n log n, хотя с помощью суффиксного дерева, дфс, можно эту, там все,
[02:55:35.740 --> 02:55:42.140]  что мы будем изучать дальше построить за линию, причем очень легко. Потому что что такое суффиксный
[02:55:42.140 --> 02:55:47.860]  массив? Да, ну как всегда, напомним, где мы находимся. То есть мы напоминаем, что мы ищем соответственно
[02:55:47.860 --> 02:55:53.460]  подстрок, там пытаемся искать подстроки в строке, но пытаемся искать это в онлайне. То есть дан текст,
[02:55:53.460 --> 02:55:58.780]  мы его как-то как-то обрабатываем, потом подстроки искаем в онлайне, желательно за o от их длины,
[02:55:58.780 --> 02:56:05.900]  ну или хотя бы за там o от их длины плюс что-то связанное с алгоритмом. Но давайте думать.
[02:56:05.900 --> 02:56:11.820]  Значит, с помощью суффмасса в принципе, да, за o от p я вам не обещаю, но p плюс log s достигнем.
[02:56:11.820 --> 02:56:19.260]  Итак, что такое суффиксный массив? Да, внимание, внимание, важный момент, сейчас будет неожиданно,
[02:56:19.260 --> 02:56:25.980]  но мы будем жить в ноль индексации. Вот, да, ну просто мы тут раньше жили в один индексации,
[02:56:25.980 --> 02:56:31.620]  только что два часа. Сейчас будем жить в ноль индексации. Как же мы это будем делать?
[02:56:31.620 --> 02:56:38.580]  Будем делать так. Ну вот, то есть идея такая, значит, что такое суффиксный массив? Мы просто
[02:56:38.580 --> 02:56:44.780]  возьмем числа 0 и 1, там s-1, и расположим их в порядке лексиграфического возрастания
[02:56:44.780 --> 02:56:53.580]  соответствующих суффиксов. Напомню, что, что такое yt-суффикс? Да, совершенно верно. Ну,
[02:56:53.580 --> 02:56:58.140]  тут может быть путрица, кто-то считает, что yt-суффикс, это там либо yt-суффикс уже в ацертировом
[02:56:58.140 --> 02:57:03.100]  порядке, либо суффикс длины i. Так вот, нет, ни в коем случае ни то, ни другое. То есть yt-суффикс для
[02:57:03.100 --> 02:57:10.140]  нас, по умолчанию, это суффикс, начинающийся с yt-го символа. Вот, так вот, если их так расположить,
[02:57:10.140 --> 02:57:14.220]  то, в общем, это суффиксным массивом и является. То есть, суффиксный массив – это перестановка
[02:57:14.220 --> 02:57:22.220]  чисел. Вот. Ну, в принципе, вот для строки Аббатсаба, как легко убедиться, там суффиксный массив просто
[02:57:22.220 --> 02:57:30.780]  ищется по телефону 6402513. Так, ну что? Так. Ладно, требуется на доске нарисовать, откуда это берется?
[02:57:30.780 --> 02:57:45.580]  Нет. Ну, тут, думаю, все понятно. Вот. Чего? Ну, да. Ну, я не знаю. Значит, как его построить? Ну,
[02:57:45.580 --> 02:57:48.740]  тут, в принципе, отдельная письма. Есть большой соблазн вообще спросить так, а кто вообще этот
[02:57:48.740 --> 02:57:56.860]  алгоритм знает, как его ZN-Logan строить? Все подымают руки. Нет, не все? Ладно, обсуждаем. Ну,
[02:57:56.860 --> 02:58:04.620]  задача просто. Кто знает вообще, как строить суффиксный массив ZN-Logan? Ну, да. Ну, в принципе,
[02:58:04.620 --> 02:58:09.700]  кто-то может не знать. Ну, здесь мы сформулируем так. Мы это воспомним и заодно еще так воспомним,
[02:58:09.700 --> 02:58:19.180]  как это эффективно писать. Вот. То есть, да. Значит, смотрите. Ну, вообще, отметим, какие еще вещи
[02:58:19.180 --> 02:58:24.700]  можно? Можно это делать в тупую, в худшем случае, за s2 log s. Но как мы уже отметили, что если строка
[02:58:24.700 --> 02:58:30.020]  какая-нибудь достаточно рандомная, то, в принципе, этого вам может и хватить, потому что вы сравнивать
[02:58:30.020 --> 02:58:37.140]  будете за быстро. А еще можно сделать s log s2, кстати. Еще можно, если вы делаете бинпоиск с хшами.
[02:58:37.140 --> 02:58:43.940]  То есть, любые два суффикса можно спринять бинпоиском и хшами за логарифом. Ну, точнее,
[02:58:43.940 --> 02:58:50.740]  бинпоиском найти их максимальный общий префикс и, соответственно, и следующий символ в явном
[02:58:50.740 --> 02:58:55.780]  виде сравнить. Вот. Так что вот. Ну, кстати, еще вбор можно еще запихнуть. То есть,
[02:58:55.780 --> 02:59:02.260]  за s2, пожалуйста. Тут еще такие простые вещи есть. Но у нас есть классический алгоритм
[02:59:02.260 --> 02:59:08.820]  кавк по миллеру Розенфельда, который будет его строить за s log s. Тут есть парадокс. Мы умеем
[02:59:08.820 --> 02:59:14.220]  с вами строить, конечно, суффиксный массив за быстрее с помощью DFS в суффиксном дереве. То есть,
[02:59:14.220 --> 02:59:18.540]  как можно построить такое дерево? Очень просто. Давайте припишем к строке $, построим суффиксное
[02:59:18.540 --> 02:59:23.420]  дерево и запустим DFS. Как только пришли в какой-то лист, этому листу соответствуют суффиксы
[02:59:23.420 --> 02:59:34.300]  своей длины, мы его и записываем. Вот. Это понятная идея, да? Вот. Тем не менее, оказывается,
[02:59:34.300 --> 02:59:44.420]  что быстрее, чем s log s, суффиксный массив построить нельзя. В каком смысле нельзя? А вот в каком.
[02:59:44.420 --> 02:59:49.300]  Предположим, смотрите, у нас, чтобы построить суффиксный массив, подразумевается, что буковки
[02:59:49.300 --> 02:59:54.100]  между собой сравниваются, правда? То есть, мы знаем, что каждая буковка меньше или больше какой-то
[02:59:54.100 --> 03:00:00.260]  любой другой буквы, правда? А теперь предположим, что это все, что нам известно. То есть, известно,
[03:00:00.260 --> 03:00:05.940]  что у нас буковки — это те самые камешки из сортировки. То есть, все, что мы можем — это взять
[03:00:05.940 --> 03:00:13.180]  два камешка, положить их на весы, и весы нам скажут, кто меньше. Тогда заметим, что суффиксный массив
[03:00:13.180 --> 03:00:18.020]  быстрее, чем за s log s, построить нельзя в принципе. Почему? Потому что, если все буковки попарно
[03:00:18.020 --> 03:00:24.940]  различны, то это эквивалент тупо сортировки этих камешков. Поэтому парадокс, что, с одной стороны,
[03:00:24.940 --> 03:00:30.780]  быстрее, чем за s log s нельзя, но, с другой стороны, если алфавит константный, то, конечно, все вполне
[03:00:30.780 --> 03:00:38.460]  возможно. То есть, скажем, Уканина на самом деле, как вы помните, мы строили не за o от s, а за o от s
[03:00:38.460 --> 03:00:47.100]  алгоритм алфавита. Поэтому, если бы алгоритм был различный, то есть, если мы там храним все в
[03:00:47.100 --> 03:00:52.620]  мапчике, допустим, то, в принципе, получился бы вполне себе s log s, потому что у вас в корне было бы там
[03:00:52.620 --> 03:01:03.020]  n различных символов. Так вот, но как же этот s log s будет работать? Так, ну вот, мы уже упоминали
[03:01:03.020 --> 03:01:10.700]  добавить в s какой-нибудь символ. Я почему-то сказал доллар, но здесь предлагается все-таки диезик. То
[03:01:10.700 --> 03:01:17.780]  есть, первая идея, которая возникает, давайте к строке s припилим диезик. Диезик – это символ,
[03:01:17.780 --> 03:01:24.380]  который будет считаться меньше всех остальных. Ну и основная идея будет заключаться в том, что,
[03:01:24.380 --> 03:01:30.340]  если вы припилите к двум суффиксам строки по диезику, то результат их сравнения этикографического
[03:01:30.340 --> 03:01:38.100]  от этого не поменяется. То есть, разница будет только в том, что ни один из суффиксов больше не
[03:01:38.100 --> 03:01:49.700]  будет являться префиксом другого. Понимаете, да? Более того, оказывается, что теперь можно в
[03:01:49.700 --> 03:01:58.860]  принципе сказать, что давайте теперь сравнивать не суффиксы, а циклические сдвиги. Понятная
[03:01:58.860 --> 03:02:03.260]  идея, да? То есть, более того, будет идея, что мы эти циклические сдвиги будем считать, что их
[03:02:03.260 --> 03:02:08.300]  длина бесконечна. То есть, мы эти циклические сдвиги будем просто записывать друг за другом
[03:02:08.300 --> 03:02:14.340]  бесконечно. Вот и оказывается, что теперь мы будем сортировать именно их. То есть,
[03:02:14.340 --> 03:02:17.340]  функция построить суффиксный массив на самом деле у нас…
[03:02:33.260 --> 03:03:00.420]  В нашем определении пустой суффикс мы не сортируем. Хотя, если вы его хотите сортировать,
[03:03:00.420 --> 03:03:07.780]  то пожалуйста. Вот. И четвертая строка – ретурн А. Все. То есть, получается все. Мы научились
[03:03:07.780 --> 03:03:11.380]  искать суффиксный массив в четыре строчки. Правда, с вызовом функции, которую нам придется
[03:03:11.380 --> 03:03:21.380]  реализовать. Это вот понятная идея, да? Или нет? Понятно, да? Не, я могу там вам чуть позже код
[03:03:21.380 --> 03:03:27.860]  показать. У меня там еще и код есть. Вот. Там это будет. Ну ладно, это мы дойдем. Итак, значит,
[03:03:27.860 --> 03:03:35.020]  начиная с этого момента, мы не строим суффиксный массив, мы сортируем циклические сдвиги. Вот.
[03:03:35.020 --> 03:03:39.460]  Значит, мы эти циклические сдвиги считаем бесконечными. Но основная идея, то есть,
[03:03:39.460 --> 03:03:45.900]  мы будем делать log s иterации, где просто мы будем сортировать эти циклические сдвиги по первым…
[03:03:45.900 --> 03:04:03.620]  Чего? А, это l, между прочим. Это такая l, выделенная курсивом. Да. А не то, что мы подумали. Вот.
[03:04:03.620 --> 03:04:06.700]  То есть, будем сначала сорвать по первому одному символу, потом по первому двумя,
[03:04:06.700 --> 03:04:12.500]  потом по первому четырем, потом по первому восьми. Так что, не так? Нет, ты просто так
[03:04:12.500 --> 03:04:23.620]  смотришь, что началось. Я это изучал очень давно, но там что-то другое было. Везде рассказывается
[03:04:23.620 --> 03:04:31.460]  вроде этот алгоритм. Вот. Итак. Ну, понятно, как только эта степень двойки станет больше либо равна s,
[03:04:31.460 --> 03:04:36.900]  значит, циклические сдвиги отсортированы полностью. Как же мы это будем делать? Ну,
[03:04:36.900 --> 03:04:41.460]  первую итерацию по одному символу мы прямо честно сортируем по одному символу. Можно подсчетом
[03:04:41.460 --> 03:04:47.140]  сортировать, ну или если там у вас реально камешки, значит, честно за n log. Но идея такая,
[03:04:47.140 --> 03:04:51.620]  что начиная с этого момента, после того, как вы отсортировали по первому символу, вы уже точно
[03:04:51.620 --> 03:04:58.740]  можете считать, что… То есть, все символы считать, что они от одного до n. Ну, потому что можно символы
[03:04:58.740 --> 03:05:04.620]  заранее, скажем, отсортировать и перенумеровать их с одного по n, сохраняя порядок. Правда? Поэтому
[03:05:04.620 --> 03:05:18.580]  базовую итерацию делаем. А теперь идея такая. Пока нет. А что? Нет, пока нет. Итак. А теперь
[03:05:18.580 --> 03:05:25.620]  идея такая. Значит, у нас теперь будет говорить следующее. Значит, каждая итерация теперь будет
[03:05:25.620 --> 03:05:31.460]  говорить так. Вот мы уже имеем циклические сдвиги, отсортированные по l символам. То есть,
[03:05:31.460 --> 03:05:37.660]  мы будем считать, что у нас есть массив a, в котором вся эта сортировка уже есть. И более того,
[03:05:37.660 --> 03:05:45.700]  для каждой подстроки длины l мы будем еще и заведем ее цвет. Причем цвет будет говорить,
[03:05:45.700 --> 03:05:51.500]  что сравнивать строки мы будем по цветам. То есть, во-первых, одинаковым строкам одинаковые цвета,
[03:05:51.500 --> 03:05:58.700]  разным строкам разные цвета, причем в меньшей строке меньший цвет. Ну да. Причем с сохранением порядка.
[03:05:58.700 --> 03:06:10.780]  Вот. И теперь на каждой итерации, то есть, что нам надо делать? Требуется тоже вычислить те
[03:06:10.780 --> 03:06:23.740]  же самые массивы a и c, но для преферсов уже не длины l, а длины 2l. Как же это сделать? Ну,
[03:06:23.820 --> 03:06:31.980]  в общем-то, легко. Да, тут написан какой-то страшный текст, но краткая идея стоит в следующем,
[03:06:31.980 --> 03:06:37.300]  что каждую строку длины 2l, то есть, каждая строка длины 2l – это конкотинация двух
[03:06:37.300 --> 03:06:43.740]  строк длины l. И про каждую строчек длины l мы знаем ее цвет, вот эта класса эквивалентности. То есть,
[03:06:43.740 --> 03:06:49.460]  по сути нам нужно просто отсортировать пары чисел от 1 до n. Сначала по первому числу,
[03:06:49.460 --> 03:06:56.300]  а при равных первых – по второму. И идея в том, что мы умеем это делать. Мы уже обсуждали,
[03:06:56.300 --> 03:07:00.020]  когда там год назад, даже больше, чем год назад, там соответствующие сортировки.
[03:07:00.020 --> 03:07:05.300]  Мне кажется, мы не обсуждали. Обсуждали, обсуждали. Сортировки были?
[03:07:05.300 --> 03:07:09.860]  У нас бы там… Бинплейс, конечно. Да, бинплейс. Сортировки? Нет. Сортировки – нет. Это все
[03:07:09.860 --> 03:07:15.900]  мои подсчеты, и конкретно эти мы подробно обсуждали. Вот. И там было… Но давайте напомним,
[03:07:15.900 --> 03:07:22.260]  что как отсортировать пары чисел… Пусть у нас есть n пар чисел, каждое число от 1 до n. Как
[03:07:22.260 --> 03:07:28.140]  их отсортировать за линию? Для нас удобный способ будет такой. Отсортируем сначала подсчетом их по
[03:07:28.140 --> 03:07:34.980]  второму символу. По второму чиселку. А потом полученный массив отсортируем устойчивым образом,
[03:07:34.980 --> 03:07:46.780]  по первому. Это подсчет, когда… Подсчет – это когда у вас просто даны числа от 1 до n отсортируете.
[03:07:46.780 --> 03:07:54.300]  Бакетсорт – это когда у вас даны кортежи таких чисел. То есть 2, 3, 4 и так далее. А наша цифровая
[03:07:54.300 --> 03:08:00.500]  сортировка, кстати. То есть мы же так же можем строить… Если у вас там даны 100 тысяч чисел,
[03:08:00.500 --> 03:08:05.460]  каждая длина 50, то вы можете их отсортировать за 100 тысяч умножить на 50. Вот ровно этим способом.
[03:08:05.460 --> 03:08:17.180]  Ну там 50 будет на 100 тысяч плюс 10. Ну или сколько у вас там цифр. Вот. То есть, ну как бы,
[03:08:17.180 --> 03:08:24.740]  в принципе, идея на алгоритм, в общем-то, на этом закончился. Но практически есть маленький лайфхак.
[03:08:24.740 --> 03:08:30.300]  Ведь сортировка пар чисел, у вас будет что подразумевать? Она вас будет подразумевать,
[03:08:30.300 --> 03:08:36.020]  что вы уже все отсортируете, что, в принципе, вы сделаете две сортировки подсчета. Правда?
[03:08:36.020 --> 03:08:44.260]  Ну сначала по второму, потом по первому. Но есть маленькая неосимпатическая идея,
[03:08:44.260 --> 03:08:49.780]  которая, в принципе, ваше время работы оптимизирует где-то раз в два. Она будет
[03:08:49.780 --> 03:08:55.900]  сказать так, что после первого шара, на самом деле, что вам известно после первого шара? У вас есть
[03:08:55.900 --> 03:09:01.100]  массив А, в котором все циклические сдвиги отсортированы по первым L символам. Правда?
[03:09:01.100 --> 03:09:08.980]  Так вот, идея такая. А давайте возьмем массив А и с каждого числа вычтем L, ну с учетом за цикла.
[03:09:08.980 --> 03:09:15.900]  Тогда у вас получатся циклические сдвиги, отсортированные по вторым L символам.
[03:09:15.900 --> 03:09:27.580]  Но это и будет означать, что вам, в общем-то, получается, одну из этих двух фас устойчивой
[03:09:27.580 --> 03:09:33.660]  сортировки делать не надо. То есть по второму мы уже отсортировали, теперь остается только по первому
[03:09:33.660 --> 03:09:43.100]  сортировать. То есть получается, на каждом шаге только одна сортировка подсчетом нужна,
[03:09:43.100 --> 03:09:47.900]  но правда красивая. И в результате код получается вот примерно такой.
[03:09:47.900 --> 03:10:00.740]  Так, ну сейчас. Да, ну начнем вот с чего. Вот эта маленькая функция, которую я говорил. Видите, да?
[03:10:00.740 --> 03:10:12.620]  Да, все-таки три строчки. Начиная с этого момента, сортируем циклические сдвиги.
[03:10:12.620 --> 03:10:17.300]  Как же мы это делаем? Делаем это вот так.
[03:10:17.300 --> 03:10:39.620]  Нет, вот еще вот этими.
[03:10:39.620 --> 03:10:50.580]  Ну по сути да, но так как у меня передаются стринги, то я замечаю, что у меня как бы символов там не более чем 256.
[03:10:50.580 --> 03:10:59.540]  Ну на самом деле даже 128, если честно. То есть я это делаю тоже честной сортировкой за линию.
[03:10:59.540 --> 03:11:05.020]  Ну так, для унификации. Да, это не принципиально.
[03:11:05.540 --> 03:11:26.180]  Ну так сказать, знаете, как будет. Смотрите, у вас вот этот весь код работает за n log n, да?
[03:11:26.180 --> 03:11:32.300]  И вот этот за n log n. Поэтому там как бы, ну понятно, константа у этой штуки, наверное, чуть поменьше,
[03:11:32.380 --> 03:11:36.220]  но я думаю, какой-то значимый процент она все-таки занимать будет, если вы n log n замените на n.
[03:11:36.220 --> 03:11:42.860]  Вот так что в принципе, я думаю, какой-то профит это скорее всего даст.
[03:11:42.860 --> 03:11:49.940]  Вот, впрочем, да, если строка маленькая, ну если строка маленькая, вообще можно не заморачиваться,
[03:11:49.940 --> 03:11:56.860]  но может быть даже быстрее будет. Вот, ну так в принципе да, вот мы, я тут в принципе честно написал
[03:11:56.860 --> 03:12:07.700]  вот эту сортировочку. Да, кстати, да, не забываем свапать вектора вот таким образом. Нет, здесь я просто
[03:12:07.700 --> 03:12:11.740]  подчеркиваю, что я хочу свапать вектора так, чтобы они свапались за у от единицы, а не за линию.
[03:12:11.740 --> 03:12:19.260]  Да, современный c++, конечно, свапа та это нас ведет к этому, но не современный не обязан этого делать.
[03:12:19.260 --> 03:12:30.700]  То есть какой? Подожди, в 98 стандакте есть вектора? Да ладно, по-моему даже самих векторов там нет.
[03:12:30.700 --> 03:12:41.260]  Да, но между 98 и 11 стандакты были. Там по-моему...
[03:12:41.260 --> 03:12:48.860]  А, ну третий. Ну короче, мысль в том, что до 11-го очень долго ничего не было, потому что они готовили вот это вот.
[03:12:48.860 --> 03:13:00.260]  Да, да, да. Ну может быть, но и третьим. Ну понятно. Типа люди 8 лет. Не, 8 лет готовят.
[03:13:00.260 --> 03:13:05.260]  Ну правильно, нет, ну там просто по сравнению с тем, что было раньше, там действительно в 11-м революция произошла.
[03:13:06.260 --> 03:13:13.260]  Ну не другой, он как бы совместим с тем, что был, но как бы...
[03:13:13.260 --> 03:13:28.260]  Ну понятно. Ладно, ну я как бы да, я в принципе с тех старых времен, как вы понимаете, как вы уже можете посчитать, я как бы впервые съездил на полуфиналы CPC до того, как появился 11-й стандарт.
[03:13:35.260 --> 03:13:42.260]  Не, ну дело было не в этом. Честно скажу, до Мещерина там глубоко это все не изучали на самом деле.
[03:13:42.260 --> 03:13:51.260]  То есть как бы исторически там произошло просто, что на самом деле Мещерин там стал просто... То есть там изначально произвало, что вот по нашему предмету мы одновременно должны C++ изучать.
[03:13:51.260 --> 03:13:56.260]  Поэтому нас было двое. Ну вот обычно у меня как бы в напарниках был человек, который брал техническую часть.
[03:13:56.260 --> 03:14:04.260]  И он пришел в Мещерин и прям очень жестко взял, потому что он там в какой-то момент обнаружил, что да, потому что я это как бы так совсем глубоко не копал.
[03:14:04.260 --> 03:14:12.260]  Ну вот, а он так обнаружил, что это можно сделать и копнул. Ну вот стал копать так, что вот это произвел в отдельный курс, так что кайф.
[03:14:12.260 --> 03:14:28.260]  Вот. Вот так вот, значит смотрите. Значит тут у нас посортировали, ну в принципе вот это классический код на самом деле, который мы когда-то видели.
[03:14:28.260 --> 03:14:37.260]  Ну и дальше возникает вот эта вот теперь классика. То есть обратите внимание, то есть мы тут в данном месте размеры корзин считаем честно,
[03:14:37.260 --> 03:14:42.260]  потому что нам, когда мы их считаем, нам не важно в каком порядке перебирать суффиксы.
[03:14:42.260 --> 03:14:49.260]  Но видите, когда мы Ашки берем, то есть каждый раз мы берем не АИТ вот в устойчивом порядке, а вот это вот А-Л+.
[03:14:49.260 --> 03:14:54.260]  Да, кстати, важная неосимпатическая оптимизация, конечно, избавляться от этого процентика.
[03:14:54.260 --> 03:14:59.260]  Потому что, видите, он N log N раз берется, и этого может очень жирно быть.
[03:14:59.260 --> 03:15:06.260]  Поэтому, то есть пока я тут до предела не оптимизировал, но как бы можно написать и так.
[03:15:06.260 --> 03:15:13.260]  Вот. Ну и в конце, конечно, не забыть насчитать собственно сами вот эти вот С-шки.
[03:15:13.260 --> 03:15:23.260]  Вот. Так что вот такая идея. Ну в принципе есть еще, конечно, такая отсечка, что если вы поняли, что в конце, что col C равно N, то в общем-то сортировку на этом можно и закончить.
[03:15:23.260 --> 03:15:27.260]  Ну вообще-то говоря, вот это как раз максимально полезная оптимизация.
[03:15:27.260 --> 03:15:35.260]  Нет, ну на самом деле, ну скажем так, сформулировать так, потому что она работает, по-моему, так. То есть надо подумать, потому что есть подозрение.
[03:15:35.260 --> 03:15:46.260]  Это несколько задач, в которых типа если не писать col C равно N, ну если не оптикаться по col C равно N, а прям делать честный лоу, они начинают работать несколько раз медленнее и иногда даже не заходят.
[03:15:46.260 --> 03:15:52.260]  А вот это, смотри. Вот мы тут насчитываем количество новых, то есть новые цвета.
[03:15:52.260 --> 03:16:03.260]  Col C это количество разных цветов. То есть если выяснилось, что у тебя разных цветов N, то в принципе уже по текущим L-символам в принципе все суффиксы оказались попарно различными.
[03:16:03.260 --> 03:16:09.260]  Видимо дело в том, что типа если строчка нормальная, то будет продвигаться?
[03:16:09.260 --> 03:16:15.260]  Ну да, это называется непереводимая, то в части сдачи, ну просто для нее ответ сам быстро посчитается.
[03:16:15.260 --> 03:16:25.260]  Ну да, но там надо думать, потому что начинается, знаешь, какой чит. Там чит начинается, что давайте прежде чем это запускать, давайте Z функции найдем какой-нибудь минимальный период этой строки.
[03:16:25.260 --> 03:16:27.260]  Хотя, кстати, ну вот.
[03:16:27.260 --> 03:16:28.260]  А зачем?
[03:16:28.260 --> 03:16:29.260]  А хотя, нет, не поможет.
[03:16:29.260 --> 03:16:43.260]  Ну да, но к сожалению Col C для строки A, A, A, A, A, A и даже диезик он, кстати, не обвалится.
[03:16:43.260 --> 03:16:54.260]  Ну это да, в принципе да. Ну тут да, то есть какие-то серьезные совпадения разных постройщик тут должны быть.
[03:16:54.260 --> 03:17:02.260]  Да, ну в общем такой вот получается алгоритм. Да, мы его, конечно, немножко берло обсудили, но в общем-то да, ничего сложного в нем нет.
[03:17:02.260 --> 03:17:04.260]  Чего?
[03:17:04.260 --> 03:17:07.260]  Вот.
[03:17:07.260 --> 03:17:08.260]  Вот.
[03:17:08.260 --> 03:17:13.260]  Но заметим, что сам по себе суффиксный массив на самом деле нужен, там помогает не особо.
[03:17:13.260 --> 03:17:20.260]  Ну точнее так, как с помощью суффиксного массива искать подстройки в строке?
[03:17:20.260 --> 03:17:26.260]  Само, так вот ответ, само по себе никак, просто не никак, а за P log S.
[03:17:26.260 --> 03:17:31.260]  Просто bin поиском для каждой строки P и нещем куда ее вставить в суффиксный массив.
[03:17:31.260 --> 03:17:33.260]  Понимаете, да?
[03:17:33.260 --> 03:17:40.260]  Хотя в принципе с помощью хэшей на самом деле можно это оптимизировать за P plus log S.
[03:17:40.260 --> 03:17:42.260]  Да, конечно.
[03:17:42.260 --> 03:17:46.260]  Ну прям конечно, прям всем очевидно, как?
[03:17:46.260 --> 03:17:48.260]  Мне тоже не очевидно.
[03:17:48.260 --> 03:17:50.260]  Просто сказал.
[03:17:50.260 --> 03:17:52.260]  Давайте, а вот тут давайте включим свет.
[03:17:52.260 --> 03:17:56.260]  Ладно, я не успел подумать, но в целом это очевидно.
[03:17:56.260 --> 03:17:58.260]  Нет, ну давайте.
[03:17:58.260 --> 03:18:00.260]  А вот давайте.
[03:18:00.260 --> 03:18:02.260]  Так, ладно.
[03:18:02.260 --> 03:18:07.260]  Вот, как говорится, замечательный вид спорта токволи. Играйте в токволи, вам понравится.
[03:18:07.260 --> 03:18:09.260]  Не знаю, для этого да, для этого нужно.
[03:18:09.260 --> 03:18:11.260]  Ну можно и спуск делать так-то.
[03:18:11.260 --> 03:18:13.260]  О господи. Так.
[03:18:13.260 --> 03:18:15.260]  По постам Марса.
[03:18:15.260 --> 03:18:17.260]  Ладно, единственная проблема, что я попрошу свет включить.
[03:18:17.260 --> 03:18:19.260]  Так, потому что.
[03:18:29.260 --> 03:18:30.260]  Коскодирование.
[03:18:30.260 --> 03:18:32.260]  Так, ладно, значит свет временно выключим.
[03:18:42.260 --> 03:18:43.260]  Не понял.
[03:18:45.260 --> 03:18:47.260]  Спасибо.
[03:18:47.260 --> 03:18:49.260]  Нет, ну сейчас мы его обратно включим.
[03:18:49.260 --> 03:18:51.260]  Но пока смотрите.
[03:18:51.260 --> 03:18:53.260]  Значит, итак, как всегда.
[03:18:53.260 --> 03:18:59.260]  Ищем строку P в строке S.
[03:18:59.260 --> 03:19:01.260]  Так, давайте строка.
[03:19:01.260 --> 03:19:03.260]  Давайте строка у нас будет какой?
[03:19:03.260 --> 03:19:04.260]  Она будет черной.
[03:19:04.260 --> 03:19:06.260]  Как всегда.
[03:19:06.260 --> 03:19:10.260]  Как всегда, в чем-то черном мы ищем что-то рыжее.
[03:19:10.260 --> 03:19:14.260]  И так, ну суффиксный массив я очень люблю рисовать вот таким вот нехитрым способом.
[03:19:20.260 --> 03:19:21.260]  Ну как-то так вот.
[03:19:21.260 --> 03:19:22.260]  Какие-то домики.
[03:19:22.260 --> 03:19:24.260]  Ладно, эти там домики я тоже высокими нарисую.
[03:19:24.260 --> 03:19:28.260]  Хотя понятно, что где-то тут домики бывают и совсем длинные, один мелкий.
[03:19:28.260 --> 03:19:31.260]  Но я буду, значит, искать строку P.
[03:19:31.260 --> 03:19:35.260]  То есть буду пытаться искать бенпольском, куда ее можно вставить.
[03:19:35.260 --> 03:19:37.260]  Что значит искать бенпольском?
[03:19:37.260 --> 03:19:45.260]  Это означает, что в каждый момент времени у меня есть такие вот суффиксы L и R.
[03:19:45.260 --> 03:19:52.260]  Буду считать такие, что этот суффикс меньше строки P, а этот суффикс больше строки R.
[03:19:52.260 --> 03:19:55.260]  Ну, лексерографически, конечно.
[03:19:55.260 --> 03:20:00.260]  Ну, стандартный бенпоиск сказал бы, что я теперь должен взять средний суффикс между ними.
[03:20:00.260 --> 03:20:02.260]  Ладно, давайте я еще поправее R нарисую.
[03:20:02.260 --> 03:20:03.260]  Вот где-нибудь.
[03:20:03.260 --> 03:20:05.260]  Вот здесь.
[03:20:05.260 --> 03:20:06.260]  Вот.
[03:20:06.260 --> 03:20:08.260]  Ну вот.
[03:20:08.260 --> 03:20:13.260]  И должен теперь сравнить его и тогда в соответствии с этим сдвинуть либо L, либо R.
[03:20:13.260 --> 03:20:18.260]  Я это буду делать чуть хитрее, потому что я буду подразумевать, что у меня есть не только L и R,
[03:20:18.260 --> 03:20:27.260]  но у меня еще есть Lcpl и Lcpr.
[03:20:30.260 --> 03:20:32.260]  Что такое Lcpr?
[03:20:32.260 --> 03:20:42.260]  Это, то есть Lcpl здесь, это минимальный общий префикс вот этого суффикса и строки P.
[03:20:42.260 --> 03:20:46.260]  Да, в принципе, да, мы будем, то есть можно даже сразу определение сказать,
[03:20:46.260 --> 03:20:48.260]  какое-нибудь такое зелененькое, давайте напишем.
[03:20:48.260 --> 03:20:50.260]  Ой, давайте вот этим напишем.
[03:20:50.260 --> 03:20:51.260]  Определение.
[03:20:51.260 --> 03:20:53.260]  Ой.
[03:20:53.260 --> 03:20:56.260]  Видно?
[03:20:56.260 --> 03:20:58.260]  Видно.
[03:20:58.260 --> 03:20:59.260]  Вам видно.
[03:20:59.260 --> 03:21:03.260]  А камере видно?
[03:21:03.260 --> 03:21:05.260]  Да, вот во всех наборах есть вот этот маркер.
[03:21:05.260 --> 03:21:10.260]  Но не всегда понятно, зачем он сдушит.
[03:21:10.260 --> 03:21:15.260]  Поэтому придется взять наш любимый рабочий крестьянский маркер.
[03:21:15.260 --> 03:21:19.260]  Значит, смотрите, я тут веду определение такое, давайте.
[03:21:19.260 --> 03:21:23.260]  Lcp для строчек каких-нибудь там.
[03:21:23.260 --> 03:21:26.260]  Я не знаю, там.
[03:21:26.260 --> 03:21:30.260]  Ладно, давайте s и t.
[03:21:30.260 --> 03:21:35.260]  Это минимальное такое лен.
[03:21:35.260 --> 03:21:39.260]  Такое, что s от 0 до лен.
[03:21:39.260 --> 03:21:42.260]  Ладно, не минимальное, а максимальное, конечно.
[03:21:42.260 --> 03:21:48.260]  Там лен, значит, равно t от 0 до лен минус 1.
[03:21:48.260 --> 03:21:57.260]  Догадывайте, как расшифровывается аббревиатура lcp.
[03:21:57.260 --> 03:22:00.260]  List common ancestor.
[03:22:00.260 --> 03:22:02.260]  Мимо.
[03:22:02.260 --> 03:22:04.260]  Все равно мимо.
[03:22:04.260 --> 03:22:05.260]  Только longest.
[03:22:05.260 --> 03:22:08.260]  Да, longest common prefix или largest common prefix.
[03:22:08.260 --> 03:22:12.260]  Да, наибольший общий префикс.
[03:22:12.260 --> 03:22:14.260]  Тут все дословненько.
[03:22:14.260 --> 03:22:16.260]  Вот.
[03:22:16.260 --> 03:22:18.260]  Так вот.
[03:22:18.260 --> 03:22:19.260]  Именно в этом месте.
[03:22:19.260 --> 03:22:26.260]  Lcpl рыженьким я помечаю в знак того, что тут мы берем lcp этого суффикса и строки p.
[03:22:26.260 --> 03:22:27.260]  Ну и здесь.
[03:22:27.260 --> 03:22:30.260]  Ну и vary lcpr здесь.
[03:22:30.260 --> 03:22:32.260]  Так вот, первая идея.
[03:22:32.260 --> 03:22:34.260]  Рассмотрим случай, когда...
[03:22:34.260 --> 03:22:39.260]  Мы сейчас будем рассматривать случай, когда lcpl меньше, чем lcpr.
[03:22:39.260 --> 03:22:46.260]  Я выберу такой случай, потому что если он будет больше, то будем рассматривать аналогично, просто симметрично.
[03:22:46.260 --> 03:22:49.260]  Во-первых, начнем вот с чего.
[03:22:49.260 --> 03:23:02.260]  Я утверждаю, что lcp у всех вот этих суффиксов между lr со строкой p, хотя бы lcpl.
[03:23:02.260 --> 03:23:05.260]  А как вы еще раз ввели lcpl?
[03:23:05.260 --> 03:23:07.260]  Это lcpl.
[03:23:07.260 --> 03:23:09.260]  Так, ну хорошо, давайте так.
[03:23:09.260 --> 03:23:12.260]  Где-то у меня тут нот.
[03:23:12.260 --> 03:23:16.260]  То есть, да, у меня тут есть пассив sa, и теперь утверждение.
[03:23:16.260 --> 03:23:19.260]  В плане левой правой утверждения по первому l.
[03:23:19.260 --> 03:23:22.260]  Нет, это граница бинпоиска.
[03:23:22.260 --> 03:23:24.260]  То есть, допустим.
[03:23:24.260 --> 03:23:26.260]  Смотри, пишу так.
[03:23:26.260 --> 03:23:31.260]  Пишем invariant.
[03:23:31.260 --> 03:23:51.260]  Значит, я знаю, что s от saL, модуль s-1 меньше p, меньше, чем s от saL, модуль s-1.
[03:23:51.260 --> 03:23:54.260]  Давайте вот так сделаем.
[03:23:54.260 --> 03:23:58.260]  Это первый invariant.
[03:23:58.260 --> 03:23:59.260]  Второе.
[03:23:59.260 --> 03:24:14.260]  Еще я знаю, что lcpl это равно lcp от этого l, этого суффикса, saL, модуль s-1 и p.
[03:24:14.260 --> 03:24:16.260]  Что?
[03:24:16.260 --> 03:24:19.260]  sa, suffix array.
[03:24:19.260 --> 03:24:22.260]  Да, sa это суффиксный массив.
[03:24:22.260 --> 03:24:32.260]  Да, давайте я тут еще и черненьким напишу.
[03:24:32.260 --> 03:24:33.260]  Почему черненьким?
[03:24:33.260 --> 03:24:38.260]  Потому что суффиксный массив ни от какого бинпоиска, естественно, не зависит.
[03:24:38.260 --> 03:24:42.260]  В общем, тогда правильнее было бы вообще вот так написать, конечно.
[03:24:42.260 --> 03:24:50.260]  Но это ладно, совсем уж так переписывать не буду.
[03:24:50.260 --> 03:24:53.260]  А это какое алгоритм сейчас происходит?
[03:24:53.260 --> 03:24:56.260]  За p-logs или за p-plus-logs?
[03:24:56.260 --> 03:24:59.260]  Вот я пытаюсь с помощью хэшей сделать за p-plus-logs.
[03:24:59.260 --> 03:25:02.260]  Ну просто p-logs это мы бы просто не заморачивались.
[03:25:02.260 --> 03:25:06.260]  Мы просто делали logs страции бинпоиска и saL от p.
[03:25:06.260 --> 03:25:16.260]  Но мы сейчас с помощью хэшей, а в будущем и без хэшей, как вы догадываетесь, на самом деле...
[03:25:16.260 --> 03:25:21.260]  Так, ну здесь то же самое, только вместо l у меня r.
[03:25:21.260 --> 03:25:23.260]  Вот. То есть вот такой вариант.
[03:25:23.260 --> 03:25:36.260]  Я хочу поддерживать, то есть я хочу в бинпоиске поддерживать lcpl и lcpr.
[03:25:36.260 --> 03:25:41.260]  Короче, по смыслу...
[03:25:41.260 --> 03:25:45.260]  Ну, по смыслу...
[03:25:45.260 --> 03:25:48.260]  Да я правильно понимаю, что мы просто поддерживаем левый и правый суффикс,
[03:25:48.260 --> 03:25:50.260]  которые совпадают с первыми...
[03:25:50.260 --> 03:25:53.260]  Самый левый и самый правый суффикс, которые совпадают с первыми и символами строки p?
[03:25:53.260 --> 03:25:56.260]  Нет.
[03:25:56.260 --> 03:26:01.260]  Напоминаю, у нас бинпоиск.
[03:26:01.260 --> 03:26:05.260]  Ну я не знаю, просто по идее вот эти слова уже должны объяснять, что такое lr,
[03:26:05.260 --> 03:26:10.260]  но если нет, значит видимо у тебя какое-то очень извращенное понимание бинпоиска.
[03:26:10.260 --> 03:26:11.260]  Потому что обычно в классическом...
[03:26:11.260 --> 03:26:15.260]  Когда ты в бинпоиске в массиве что-то ищешь, у тебя в каждом время говоришь то,
[03:26:15.260 --> 03:26:22.260]  что ты ищешь, что находится между l элементом массива и r элементом массива.
[03:26:22.260 --> 03:26:24.260]  То есть по смыслу...
[03:26:24.260 --> 03:26:26.260]  Вот это отражает инвариант.
[03:26:26.260 --> 03:26:30.260]  То есть тут написано следующее, что вот этот суффикс меньше строки p,
[03:26:30.260 --> 03:26:32.260]  а вот этот суффикс больше строки p.
[03:26:32.260 --> 03:26:34.260]  Это пока все, что мы знаем.
[03:26:34.260 --> 03:26:42.260]  Нет, еще мы знаем lcp между l суффиксом и p и lcp между r суффиксом и p.
[03:26:42.260 --> 03:26:45.260]  Мы эти числа будем поддерживать.
[03:26:45.260 --> 03:26:52.260]  Так вот, я предположил, что lcp меньше, чем lcp, считаю, что второй случай симметричен.
[03:26:52.260 --> 03:26:56.260]  Так вот, утверждение такое, рассмотрим все суффиксы между l и r.
[03:26:57.260 --> 03:27:04.260]  Я утверждаю, что lcp у каждого из этих суффиксов с p, как минимум, вот столько.
[03:27:08.260 --> 03:27:10.260]  Но причина очень простая.
[03:27:10.260 --> 03:27:14.260]  Если суффиксы отсортированы, у этого суффикса эти символы совпадают с префиксом p,
[03:27:14.260 --> 03:27:20.260]  и этот вот префикс совпадает с префиксом p.
[03:27:20.260 --> 03:27:24.260]  Следовательно, по сортировке получается, что у всех вот этих вот суффиксов,
[03:27:24.260 --> 03:27:26.260]  у каждого lcp символов такие же.
[03:27:26.260 --> 03:27:30.260]  То есть, значит, тут как минимум вот столько будет.
[03:27:32.260 --> 03:27:35.260]  Я просто смотрел сверху вниз, а не снизу вверх.
[03:27:35.260 --> 03:27:39.260]  Нет, давайте, смотрим снизу вверх.
[03:27:39.260 --> 03:27:42.260]  То есть, как начало снизу.
[03:27:42.260 --> 03:27:47.260]  Тут подразумевается, что тут единый уровень, на самом деле.
[03:27:47.260 --> 03:27:50.260]  Это диаграмма по количеству.
[03:27:50.260 --> 03:27:56.260]  Видимо, надо было нарисовать, потому что суффиксный массив в строте Аббатсабы я себе воображаю вот так.
[03:28:04.260 --> 03:28:06.260]  Сверху вниз никогда не знал.
[03:28:10.260 --> 03:28:14.260]  Подожди, у тебя суффиксный массив, вот он слева направо написан.
[03:28:14.260 --> 03:28:18.260]  А мы каждый индекс раскрываем его соответствующий суффикс.
[03:28:18.260 --> 03:28:20.260]  Ну куда нам его раскрывать? Вверх.
[03:28:20.260 --> 03:28:23.260]  Так, вот смотрите, вот я себе суффиксный массив вот так воображаю.
[03:28:23.260 --> 03:28:25.260]  Это суффиксный массив в строте Аббатсабы.
[03:28:25.260 --> 03:28:27.260]  Все снизу вверх.
[03:28:27.260 --> 03:28:29.260]  Снизу вверх, слева направо.
[03:28:29.260 --> 03:28:30.260]  Вот.
[03:28:30.260 --> 03:28:33.260]  Да ладно, задачи про референдум как рисовали.
[03:28:33.260 --> 03:28:36.260]  Какую задачу про референдум?
[03:28:36.260 --> 03:28:37.260]  Да ладно.
[03:28:37.260 --> 03:28:39.260]  Это как тебе объясняли?
[03:28:39.260 --> 03:28:41.260]  Да ладно, это где интересный...
[03:28:41.260 --> 03:28:43.260]  У нас дерево календромов про референдум.
[03:28:43.260 --> 03:28:44.260]  Нет, вопрос в другом.
[03:28:44.260 --> 03:28:47.260]  Это где же так рассказывают задачи про суффиксный массив,
[03:28:47.260 --> 03:28:49.260]  где не рассказывают задачи про референдум?
[03:28:49.260 --> 03:28:51.260]  Это, по идее, обычный стандартный план лекции.
[03:28:51.260 --> 03:28:55.260]  Расскажи про суффиксный массив, расскажи про лца, расскажи задачи про референдум.
[03:28:58.260 --> 03:29:01.260]  Если это было года четыре назад, то...
[03:29:02.260 --> 03:29:05.260]  Нет, просто там очень интересно,
[03:29:05.260 --> 03:29:08.260]  что задача про референдум как бы обошлась без этой картинки,
[03:29:08.260 --> 03:29:10.260]  на которой как бы прямоугольник рисуется.
[03:29:10.260 --> 03:29:12.260]  Ну ладно, дойдем до этого.
[03:29:12.260 --> 03:29:13.260]  Хорошо.
[03:29:13.260 --> 03:29:15.260]  Нет, это просто методология очень интересная,
[03:29:15.260 --> 03:29:17.260]  просто я такого не встречал.
[03:29:17.260 --> 03:29:18.260]  Вот.
[03:29:18.260 --> 03:29:19.260]  Ладно, смотрите.
[03:29:19.260 --> 03:29:20.260]  Хорошо.
[03:29:20.260 --> 03:29:22.260]  Итак, LCPL везде совпало, да?
[03:29:22.260 --> 03:29:23.260]  Да.
[03:29:23.260 --> 03:29:24.260]  Так вот.
[03:29:24.260 --> 03:29:25.260]  Ну идея у нас какая?
[03:29:25.260 --> 03:29:27.260]  Вообще мы берем вот какой-то мид,
[03:29:27.260 --> 03:29:29.260]  то есть мидовый суффикс, так его и назовем.
[03:29:29.260 --> 03:29:31.260]  Вот мид.
[03:29:32.260 --> 03:29:36.260]  И теперь нам нужно найти теперь LCP mid.
[03:29:39.260 --> 03:29:41.260]  То есть какая-то вот такая мечта.
[03:29:41.260 --> 03:29:44.260]  То есть найти тут какой-то LCP mid.
[03:29:45.260 --> 03:29:47.260]  И следующий несовпадающий символ
[03:29:47.260 --> 03:29:49.260]  с соответствующим силой строки P
[03:29:49.260 --> 03:29:51.260]  и сравнить и в соответствии с этим понять,
[03:29:51.260 --> 03:29:54.260]  пойти влево или пойти вправо.
[03:29:56.260 --> 03:29:59.260]  Идейно нам нужно вот это, правда?
[03:30:01.260 --> 03:30:04.260]  Но в принципе, если у нас есть хэши, кстати,
[03:30:04.260 --> 03:30:09.260]  этот LCPL mid можно найти было бы и пенпоиском, правда?
[03:30:09.260 --> 03:30:11.260]  И в принципе тогда алгоритм у вас бы работал
[03:30:11.260 --> 03:30:16.260]  за P плюс лог модуль S лог модуль P.
[03:30:17.260 --> 03:30:18.260]  Да, почему P?
[03:30:18.260 --> 03:30:21.260]  Чтобы хэши для строки P насчитать, естественно.
[03:30:22.260 --> 03:30:24.260]  А хэши для строки S придется насчитывать
[03:30:24.260 --> 03:30:26.260]  в предподсчете изначально.
[03:30:26.260 --> 03:30:28.260]  Мы хотим найти, где больше СПД или что?
[03:30:28.260 --> 03:30:31.260]  Нет, мы хотим вот дан мидовый суффикс,
[03:30:31.260 --> 03:30:33.260]  вот этот L plus R пополам, да?
[03:30:33.260 --> 03:30:35.260]  Надо найти LCP mid, а зная LCP mid
[03:30:35.260 --> 03:30:37.260]  мы можем за вот единицы сравнить этот суффикс
[03:30:37.260 --> 03:30:38.260]  со строкой P.
[03:30:46.260 --> 03:30:47.260]  В смысле, за вот единицы?
[03:30:48.260 --> 03:30:49.260]  А, хэшами?
[03:30:50.260 --> 03:30:51.260]  Нет, причем это хэши.
[03:30:52.260 --> 03:30:53.260]  Так, утверждение.
[03:30:53.260 --> 03:30:55.260]  Если вы у двух строк знаете их LCP,
[03:30:55.260 --> 03:30:58.260]  то сравниваете стихографически, вы можете за вот единицы.
[03:31:00.260 --> 03:31:01.260]  Хорошо.
[03:31:01.260 --> 03:31:04.260]  А, вы ищете, вы сначала нашли LCPL?
[03:31:04.260 --> 03:31:05.260]  Да.
[03:31:05.260 --> 03:31:07.260]  Если вам его с небес по факсу прислали,
[03:31:07.260 --> 03:31:09.260]  то надо просто вот этот символ,
[03:31:09.260 --> 03:31:10.260]  учитывая, что у нас 0 линдексация,
[03:31:10.260 --> 03:31:12.260]  тут посравнить у строк S и T.
[03:31:12.260 --> 03:31:13.260]  У кого меньше, тот и меньше.
[03:31:13.260 --> 03:31:14.260]  Все.
[03:31:15.260 --> 03:31:19.260]  Обязательно ли LCP mid будет выше, чем LCPR?
[03:31:19.260 --> 03:31:21.260]  Вот.
[03:31:21.260 --> 03:31:22.260]  А вот это и магия.
[03:31:22.260 --> 03:31:25.260]  Вот в решении за такое симпатическое нам плевать.
[03:31:26.260 --> 03:31:28.260]  Потому что мы можем вот этим фактом про LCPL
[03:31:28.260 --> 03:31:29.260]  даже не пользоваться.
[03:31:29.260 --> 03:31:31.260]  Просто bin поиском найти и все.
[03:31:31.260 --> 03:31:32.260]  Ну и с хэшами, да?
[03:31:32.260 --> 03:31:34.260]  Ну, мы попытаемся обойтись.
[03:31:35.260 --> 03:31:38.260]  Ну, мы попытаемся урезать хэши.
[03:31:39.260 --> 03:31:40.260]  Ну, пока совсем не избавимся,
[03:31:40.260 --> 03:31:43.260]  но потом с помощью массива LCP мы избавимся.
[03:31:44.260 --> 03:31:45.260]  Смотрите.
[03:31:46.260 --> 03:31:52.260]  Вы правильно заметили, что ключевой вопрос для нас будет такой.
[03:31:52.260 --> 03:31:56.260]  А этот LCP mid выше, чем LCPR или нет?
[03:31:56.260 --> 03:31:59.260]  Ну, потому что, смотрите, тупой алгоритм мог быть так.
[03:31:59.260 --> 03:32:03.260]  Давайте LCP mid найдем в тупую, начиная с LCPL.
[03:32:04.260 --> 03:32:05.260]  Вот прям в тупую.
[03:32:05.260 --> 03:32:07.260]  То есть вот до этого момента точно совпадает,
[03:32:07.260 --> 03:32:09.260]  а дальше идем, идем, идем, идем, идем.
[03:32:11.260 --> 03:32:12.260]  Вот.
[03:32:13.260 --> 03:32:15.260]  И тогда в какой-то момент остановимся,
[03:32:15.260 --> 03:32:17.260]  ну и пойдем там влево или вправо.
[03:32:20.260 --> 03:32:21.260]  Ну вот.
[03:32:21.260 --> 03:32:23.260]  То есть в принципе такой алгоритм тоже будет работать,
[03:32:23.260 --> 03:32:25.260]  даже без всяких хэшей, обратите внимание.
[03:32:25.260 --> 03:32:27.260]  Но вопрос только за какую симпатику?
[03:32:30.260 --> 03:32:32.260]  Потому что очень хотелось бы сказать.
[03:32:37.260 --> 03:32:38.260]  Ну вот.
[03:32:38.260 --> 03:32:40.260]  Ну, потому что что очень хотелось бы сказать?
[03:32:40.260 --> 03:32:43.260]  Ну, в идеале кажется, что действительно какая нам разница?
[03:32:43.260 --> 03:32:46.260]  То есть можно заметить, что если мы от LCPL,
[03:32:46.260 --> 03:32:48.260]  а тут идем, идем и не сильно далеко дойдем,
[03:32:48.260 --> 03:32:51.260]  вот LCP mid тут окажется ниже, чем LCPR.
[03:32:51.260 --> 03:32:53.260]  То мы заведомо пойдем вправо, правда?
[03:32:53.260 --> 03:32:55.260]  И тогда у нас получится LCP mid и LCPR,
[03:32:55.260 --> 03:32:57.260]  и получается, что LCPR не поменялся,
[03:32:57.260 --> 03:33:00.260]  а LCP mid увеличился на столько шаров, сколько мы сделали, правда?
[03:33:02.260 --> 03:33:03.260]  То есть попахивает как...
[03:33:04.260 --> 03:33:08.260]  Ну потому что, смотрите, у нас есть два суффикса.
[03:33:09.260 --> 03:33:11.260]  У большего из них совпадает LCPL символов.
[03:33:12.260 --> 03:33:13.260]  Вот.
[03:33:13.260 --> 03:33:15.260]  А у меньшего из них совпадает меньше символов.
[03:33:15.260 --> 03:33:18.260]  Так вот, наверное, есть подозрение, что P будет больше этого суффикса.
[03:33:20.260 --> 03:33:21.260]  Вот.
[03:33:21.260 --> 03:33:24.260]  Поэтому если LCP mid окажется меньше, чем LCPR, конечно, да?
[03:33:24.260 --> 03:33:26.260]  То есть попахивает какой-то амортизацией, правда?
[03:33:27.260 --> 03:33:29.260]  Правда, есть одна маленькая подлянка.
[03:33:29.260 --> 03:33:31.260]  Что делать, если LCP mid больше?
[03:33:33.260 --> 03:33:34.260]  Ну, в общем-то, тоже кайфец.
[03:33:34.260 --> 03:33:37.260]  Если мы пойдем вправо, то в принципе кайфец.
[03:33:37.260 --> 03:33:39.260]  Потому что мы сделали вот столько шаров
[03:33:39.260 --> 03:33:40.260]  и увеличили LCP mid.
[03:33:40.260 --> 03:33:41.260]  Ну, в общем-то, тоже кайфец.
[03:33:41.260 --> 03:33:44.260]  Если мы пойдем вправо, то в принципе кайфец.
[03:33:44.260 --> 03:33:47.260]  То есть мы сделали вот столько шаров и увеличили LCPL на это, да?
[03:33:48.260 --> 03:33:50.260]  Но подлянка заключается в том, что мы,
[03:33:50.260 --> 03:33:54.260]  если LCP mid больше, чем LCPR, то ничто нам не мешает пойти влево.
[03:33:54.260 --> 03:33:55.260]  Там всякое бывает.
[03:33:56.260 --> 03:33:59.260]  Но тогда, смотрите, тогда с потенциалом у нас возникнут трудности.
[03:33:59.260 --> 03:34:02.260]  А именно, то есть мы сделали шаров вот аж настолько,
[03:34:02.260 --> 03:34:05.260]  а потенциал увеличился там только настолько.
[03:34:06.260 --> 03:34:09.260]  То есть получается, вот эти вот походы между LCPL и LCPR
[03:34:09.260 --> 03:34:12.260]  мы должны как-то оплатить.
[03:34:12.260 --> 03:34:14.260]  То есть как вот это неоплачено.
[03:34:17.260 --> 03:34:18.260]  Что же делать?
[03:34:18.260 --> 03:34:20.260]  А потенциал у вас просто сумма.
[03:34:20.260 --> 03:34:21.260]  Ну, типа да.
[03:34:21.260 --> 03:34:24.260]  Ну, это даже формально не совсем потенциал, конечно, да.
[03:34:24.260 --> 03:34:25.260]  Да, ну вот.
[03:34:25.260 --> 03:34:27.260]  Но идея, на самом деле, очень простая.
[03:34:27.260 --> 03:34:29.260]  Смотрите, мы здесь воспользуемся хэшами
[03:34:29.260 --> 03:34:31.260]  чисто внутри строки S.
[03:34:32.260 --> 03:34:35.260]  То есть для строки P мы даже не будем насчитывать хэши.
[03:34:35.260 --> 03:34:37.260]  А идея будет такая.
[03:34:37.260 --> 03:34:39.260]  Неверно ли, случайно?
[03:34:39.260 --> 03:34:41.260]  То есть для этого, на самом деле, идея такая.
[03:34:41.260 --> 03:34:45.260]  Давайте посмотрим на уровень LCPR и попытаемся сравнить.
[03:34:45.260 --> 03:34:48.260]  А LCPL имеет он больше LCPR или меньше?
[03:34:48.260 --> 03:34:50.260]  Как это сделать?
[03:34:50.260 --> 03:34:51.260]  Значит, просто надо сравнить.
[03:34:51.260 --> 03:34:55.260]  Верно ли, что вот эта строка равна вот этой строке?
[03:34:57.260 --> 03:35:00.260]  Заметьте, это можно сделать чисто внутри строки S.
[03:35:00.260 --> 03:35:01.260]  Обратите внимание.
[03:35:01.260 --> 03:35:04.260]  То есть для строки P даже хэши уже больше насчитывать не надо.
[03:35:06.260 --> 03:35:09.260]  И тогда, если LCPR как минимум стока,
[03:35:09.260 --> 03:35:12.260]  то начиная с этого момента насчитываем в тупую.
[03:35:15.260 --> 03:35:17.260]  И тогда с потенциалом все в порядке.
[03:35:17.260 --> 03:35:21.260]  А если он меньше, то тогда насчитываем его в тупую, начиная с LCPL.
[03:35:21.260 --> 03:35:26.260]  Но тогда эта сумма LCPL плюс LCPR точно будет увеличиваться ровно на это.
[03:35:28.260 --> 03:35:30.260]  То есть таким образом мы убили.
[03:35:30.260 --> 03:35:32.260]  Нет, не это мы убили.
[03:35:32.260 --> 03:35:33.260]  Вот это мы убили.
[03:35:33.260 --> 03:35:37.260]  Вместо этого остается только лог S на сам Бинпоиск.
[03:35:40.260 --> 03:35:45.260]  Плюс P остается, потому что за P мы теперь считаем не хэши для строки P,
[03:35:45.260 --> 03:35:47.260]  а два указателя, вот эти.
[03:35:48.260 --> 03:35:49.260]  Понятна логика, да?
[03:35:52.260 --> 03:35:55.260]  То есть по большому счету в этом алгоритме
[03:35:56.260 --> 03:36:00.260]  на самом деле нам единственное, где от нас вот эти хэши,
[03:36:00.260 --> 03:36:03.260]  где нужны хэши, то есть нам нужен это небеса,
[03:36:03.260 --> 03:36:05.260]  то есть где нам нужны небеса и факс.
[03:36:05.260 --> 03:36:08.260]  Только для того, чтобы вот, для отвечать на вот такой запрос.
[03:36:09.260 --> 03:36:13.260]  Даны две подстроки строки S, скажите, пожалуйста, равны ли они.
[03:36:13.260 --> 03:36:16.260]  На этот раз просто да или нет
[03:36:19.260 --> 03:36:20.760]  Даже не по строке, а два суф 모양?
[03:36:21.260 --> 03:36:24.260]  Нет, это префиксы двух суффиксов.
[03:36:24.260 --> 03:36:26.260]  Но префикс суффикса это по сути подстрока.
[03:36:27.760 --> 03:36:31.260]  То есть по сути нам хочется...
[03:36:31.260 --> 03:36:34.300]  Если бы мы хотя бы научились отвечать на запрос данные две строки,
[03:36:34.300 --> 03:36:38.260]  вот задаются двумя парами индек disastров, скажите, пожалуйста, равны ли они, да или нет.
[03:36:39.260 --> 03:36:44.260]  Если бы мы научились это делать без хэшей, то мы в принципе вот этот бинпорк забабахали бы без хэшей.
[03:36:45.260 --> 03:36:47.260]  Как же это сделать?
[03:36:48.260 --> 03:36:55.260]  А сделается это с помощью достаточно классической штуки.
[03:36:56.260 --> 03:36:59.260]  Конечно, знаменитый массив ЛЦП.
[03:37:00.260 --> 03:37:08.260]  То есть тут у нас появляются, это конечно неполиткорректно поговорить, но с другой стороны точнее как 5 азиатов, это не назовешь.
[03:37:10.260 --> 03:37:13.260]  Мне кажется, что кок не азиат.
[03:37:14.260 --> 03:37:15.260]  Чего?
[03:37:16.260 --> 03:37:17.260]  Нету там никакого кока.
[03:37:18.260 --> 03:37:22.260]  Нет, если ты имеешь в виду алгоритм кока-янгера-косами, то он к этому не имеет отношения.
[03:37:23.260 --> 03:37:24.260]  Вот.
[03:37:25.260 --> 03:37:31.260]  То есть на самом деле будем, будем, будем, просто я это на презентации сделаю.
[03:37:32.260 --> 03:37:33.260]  Когда?
[03:37:34.260 --> 03:37:35.260]  Сегодня.
[03:37:36.260 --> 03:37:37.260]  Сегодня кончается через 9 минут.
[03:37:37.260 --> 03:37:38.260]  Ой, да мы быстро, господи.
[03:37:39.260 --> 03:37:45.260]  Стоп, в смысле как вы, то есть вы нам покажете за быстро построение сапмасса за ОАТН?
[03:37:46.260 --> 03:37:47.260]  Нет, нет.
[03:37:48.260 --> 03:37:49.260]  Нет, этого я вам уже не покажу.
[03:37:50.260 --> 03:37:51.260]  Не, не волнуйтесь.
[03:37:52.260 --> 03:37:55.260]  Нет, по сути я с вами должен сейчас обсудить только ЛЦПшки, как их построить, ну и быстренько задать про рефрен.
[03:37:56.260 --> 03:37:57.260]  А, ну все тогда.
[03:37:58.260 --> 03:37:59.260]  Вот.
[03:38:00.260 --> 03:38:01.260]  Но это, но это я вас уверяю, это не сложная вещь.
[03:38:02.260 --> 03:38:04.260]  Так, во-первых, смотрите, тут для этого мы вводим определение, то есть такое.
[03:38:04.260 --> 03:38:10.260]  То есть давайте, то есть я ввожу такой массив ЛЦП от нуля до модуля с минус два,
[03:38:11.260 --> 03:38:18.260]  где я говорю, что ЛЦП ИТ это будет просто ЛЦП двух суффиксов ИТ и плюс первого.
[03:38:21.260 --> 03:38:22.260]  Там модуля с минус один.
[03:38:23.260 --> 03:38:24.260]  То есть вот определение вот такое.
[03:38:25.260 --> 03:38:29.260]  С, СА и плюс один.
[03:38:30.260 --> 03:38:32.260]  Там модуля с минус один.
[03:38:35.260 --> 03:38:36.260]  Вот.
[03:38:37.260 --> 03:38:41.260]  То есть вот, предположим, что у меня вот такой массив откуда-то нарисовался.
[03:38:42.260 --> 03:38:45.260]  Вот, например, если у нас тут вот суффиксный массив для аббатсаба это шестьсот сорок двадцать пять тринадцать,
[03:38:46.260 --> 03:38:50.260]  то, смотрите, вот смотрите сейчас сюда на картинку, как я его себе здесь воображаю.
[03:38:53.260 --> 03:38:55.260]  Вот, я его воображаю как тринадцать десять двадцать.
[03:38:56.260 --> 03:38:57.260]  Вот так видно, да?
[03:38:58.260 --> 03:39:00.260]  И здесь я, в общем-то, его себе воображу ровно таким же способом.
[03:39:01.260 --> 03:39:04.260]  То есть как-то вот так, вот так, там вот так, вот так, там может быть,
[03:39:05.260 --> 03:39:09.260]  то есть я не знаю, там вот так, ну и тут, скорее всего, там как-то вот так и вот так.
[03:39:10.260 --> 03:39:11.260]  Ладно, и вот так.
[03:39:12.260 --> 03:39:13.260]  Видно, да?
[03:39:14.260 --> 03:39:16.260]  То есть вот так я себе воображаю ЛЦП.
[03:39:17.260 --> 03:39:18.260]  Теперь предположим, что их нам пристали с небес по факсу.
[03:39:19.260 --> 03:39:24.260]  То есть на презентации чуть позже мы, ну, как минимум, заметим, кстати, для простоты,
[03:39:24.260 --> 03:39:29.260]  там в какой-нибудь школе n log n, вам могут, например, даже еще и подробно рассказать,
[03:39:30.260 --> 03:39:32.260]  как это за соответствующую симпатику найти бин поиском и хэшами.
[03:39:33.260 --> 03:39:35.260]  Ну типа, учитывая, что у нас СУФМА строится за n log n.
[03:39:36.260 --> 03:39:37.260]  Ну да.
[03:39:38.260 --> 03:39:41.260]  Но правда нет, они там, как кому-то, они, кстати, СУФМА за n log квадрат бин поиском и хэшами рассказывали,
[03:39:42.260 --> 03:39:43.260]  считали, что этого достаточно.
[03:39:44.260 --> 03:39:45.260]  Кто они?
[03:39:46.260 --> 03:39:47.260]  Ну, те, кто потом, ну, школа n log n.
[03:39:48.260 --> 03:39:49.260]  Что за школа?
[03:39:49.260 --> 03:39:50.260]  Какая, какая?
[03:39:51.260 --> 03:39:53.260]  Ну есть такая школа миссисофты, ну есть такая школа миссисофты делают.
[03:39:54.260 --> 03:39:56.260]  Она так называется?
[03:39:57.260 --> 03:39:58.260]  Школа n log n, да.
[03:39:59.260 --> 03:40:00.260]  А?
[03:40:01.260 --> 03:40:05.260]  Нет, у них, в принципе, еще даже, можете найти, даже там n log n contest info, это вообще классная тестирующая система.
[03:40:06.260 --> 03:40:07.260]  Ну как тестирующая система?
[03:40:08.260 --> 03:40:12.260]  Она не тестирующая система, она, скажи так, она сама мало чего тестирует, она умеет как бы, как бы,
[03:40:13.260 --> 03:40:17.260]  брать задачи с какими-нибудь там код форсисов, яндексов и прочего и посылать их в соответствующую систему.
[03:40:17.260 --> 03:40:18.260]  То есть она так.
[03:40:19.260 --> 03:40:20.260]  А еще она умеет по ним хорошо искать.
[03:40:21.260 --> 03:40:26.260]  То есть в принципе, если у вас задача собрать, то есть она как бы умеет, то есть удобно как бы собирать мэшапы,
[03:40:27.260 --> 03:40:31.260]  если вы хотите собирать их не только с код форса, а там, скажем, с код форсиса, яндекса, там, тимуса и так далее.
[03:40:32.260 --> 03:40:34.260]  То есть на самом деле классная вещь.
[03:40:35.260 --> 03:40:36.260]  Если б не глючило, конечно.
[03:40:37.260 --> 03:40:38.260]  Да, да, да.
[03:40:39.260 --> 03:40:40.260]  Вот, но это так.
[03:40:41.260 --> 03:40:42.260]  Так вот.
[03:40:43.260 --> 03:40:44.260]  Но не важно.
[03:40:45.260 --> 03:40:49.260]  Чуть позже мы скажем, как это, там, как бы придут пять изиатов и скажут, как, собственно, эту штуку искать за линию,
[03:40:50.260 --> 03:40:51.260]  если у вас уже есть суфмасс.
[03:40:52.260 --> 03:40:54.260]  Все без всяких хэшей и очень простым алгоритмом.
[03:40:55.260 --> 03:40:57.260]  Но предположим, что эта ЛЦПшка у вас есть.
[03:40:58.260 --> 03:41:00.260]  Тогда есть ключевое утверждение.
[03:41:01.260 --> 03:41:03.260]  Утверждение говорит следующее.
[03:41:05.260 --> 03:41:08.260]  Что пусть у вас, допустим, и меньше жи.
[03:41:09.260 --> 03:41:14.260]  Тогда, если вы хотите найти ЛЦП двух суффиксов,
[03:41:15.260 --> 03:41:17.260]  и этого в суффиксном массиве,
[03:41:21.260 --> 03:41:22.260]  и житого,
[03:41:22.260 --> 03:41:23.260]  и житого,
[03:41:31.260 --> 03:41:38.260]  то он просто равен минимуму из ЛЦПитого,
[03:41:39.260 --> 03:41:43.260]  ЛЦПи плюс первого и так далее,
[03:41:44.260 --> 03:41:46.260]  ЛЦПжи минус первого.
[03:41:47.260 --> 03:41:49.260]  Вот такое мистическое утверждение.
[03:41:52.260 --> 03:41:55.260]  Оставлю в качестве упражнений убедиться, почему это так.
[03:41:56.260 --> 03:42:00.260]  Ну, в принципе, понятно, что ровно столько символов у всех совпадает.
[03:42:01.260 --> 03:42:03.260]  Получается, по вот столько плюс первому они все отсортированы,
[03:42:04.260 --> 03:42:06.260]  и поэтому там и получается.
[03:42:07.260 --> 03:42:09.260]  В принципе, что нам дает это утверждение?
[03:42:10.260 --> 03:42:14.260]  Утверждение дает, что если вы хотите сравнить две какие-то подстроки одинаковые,
[03:42:15.260 --> 03:42:17.260]  то вы можете сделать это.
[03:42:17.260 --> 03:42:18.260]  Что нам дает это утверждение?
[03:42:19.260 --> 03:42:22.260]  Утверждение дает, что если вы хотите сравнить две какие-то подстроки одинаковой длины,
[03:42:23.260 --> 03:42:25.260]  то вы говорите, так, берем суффиксы,
[03:42:26.260 --> 03:42:29.260]  которые начинаются с них, смотрим, в каком месте они начинаются в суффиксном массиве,
[03:42:30.260 --> 03:42:32.260]  ну, там обратную перестановку можно предподсчитать,
[03:42:33.260 --> 03:42:34.260]  и ищем минимум на отрезки.
[03:42:35.260 --> 03:42:38.260]  Если вы хотим делать за от единицы, то просто на этих ЛЦПшках вам, по сути,
[03:42:39.260 --> 03:42:40.260]  надо SparkStable насчитать.
[03:42:41.260 --> 03:42:45.260]  Или, ну, можно в фарах Колтенбендера, но вы все равно уже многое на обстрельнее сухмасса потратили,
[03:42:45.260 --> 03:42:46.260]  так что не важно.
[03:42:47.260 --> 03:42:50.260]  Да, то есть, в принципе, такая, есть такая, какая теоретически мощная комбинация.
[03:42:51.260 --> 03:42:53.260]  Суффиксная массив, ЛЦАшки и Спарсы на них.
[03:42:54.260 --> 03:42:55.260]  ЛЦАшки.
[03:42:56.260 --> 03:42:58.260]  То есть, ЛЦАшки и Спарсы на них.
[03:43:00.260 --> 03:43:02.260]  Ну, вот, то есть, в принципе, это мощная комбинация,
[03:43:03.260 --> 03:43:04.260]  которая, в принципе, позволяет кое-что решать.
[03:43:05.260 --> 03:43:06.260]  Вот.
[03:43:07.260 --> 03:43:10.260]  Ой, можете, кстати, ту задачку на дерево палендровых,
[03:43:11.260 --> 03:43:14.260]  кстати, попробовать решить с помощью этой комбинации, кстати, она решается.
[03:43:15.260 --> 03:43:18.260]  Правда, без хэшей вы там, по-моему, не обойдетесь, но не важно.
[03:43:19.260 --> 03:43:20.260]  Вот.
[03:43:21.260 --> 03:43:22.260]  Так вот.
[03:43:23.260 --> 03:43:25.260]  То есть, теперь вы вот, то есть, в принципе, что эта штука делает?
[03:43:26.260 --> 03:43:28.260]  Тогда получается вот эту вот задачу, получается, сравнить две подстроки,
[03:43:29.260 --> 03:43:32.260]  то есть, вам теперь, получается, вы с помощью этой комбинации делаете очень легко.
[03:43:33.260 --> 03:43:34.260]  Понимаете, да?
[03:43:36.260 --> 03:43:37.260]  Вот.
[03:43:38.260 --> 03:43:39.260]  Что еще?
[03:43:40.260 --> 03:43:41.260]  Ну, вот.
[03:43:42.260 --> 03:43:43.260]  Ну, в принципе, да.
[03:43:43.260 --> 03:43:46.260]  То есть, с помощью ТЛЦПшки вам становится очень легко решать даже задачу про рефрен.
[03:43:47.260 --> 03:43:49.260]  Вот давайте вспомним, да, мы уже обсуждали.
[03:43:50.260 --> 03:43:51.260]  Вот задача про рефрен говорит так.
[03:43:52.260 --> 03:43:55.260]  Найдите подстроку такую, что ее длина на количество вхождения в строку С максимально возможна.
[03:43:56.260 --> 03:43:57.260]  Да.
[03:43:58.260 --> 03:44:01.260]  Но если вкратце, то заметим следующее, что суперсы, которые начинаются с вхождения одной же, той же подстроки,
[03:44:02.260 --> 03:44:03.260]  они здесь идут подряд.
[03:44:04.260 --> 03:44:07.260]  То есть, они идут, обратите внимание, они идут как-то подряд,
[03:44:08.260 --> 03:44:10.260]  при этом не просто подряд,
[03:44:10.260 --> 03:44:14.260]  а заметим, что их вхождение образует вот такой прямоугольник,
[03:44:15.260 --> 03:44:20.260]  который находится, у которого верхняя граница не выше, чем вот эти вот ЛЦПшки в промежутках.
[03:44:21.260 --> 03:44:22.260]  Видно, да?
[03:44:23.260 --> 03:44:24.260]  Тут я не там нарисовал.
[03:44:27.260 --> 03:44:34.260]  Причем, по большому счету, заметим, что этот прямоугольник всегда можно прям упереть в один из промежуточных ЛЦАшек, вот этих.
[03:44:34.260 --> 03:44:44.260]  То есть, по большому счету, вам нужно найти вот такого рода прямоугольник в максимальной площади, правда?
[03:44:45.260 --> 03:44:47.260]  Как его это сделать?
[03:44:48.260 --> 03:44:50.260]  Ну, в принципе, да, достаточно просто.
[03:44:51.260 --> 03:44:55.260]  То есть, на самом деле получается, что высота его должна упираться в какой-то ЛЦП.
[03:44:56.260 --> 03:45:00.260]  Давайте переберем вот в эту ЛЦПшку и скажем, какой максимальный прямоугольник будет упираться именно в эту ЛЦП.
[03:45:00.260 --> 03:45:06.260]  Но для этого нужно пойти вправо и слева найти ближайшую ЛЦПшку, которая меньше.
[03:45:07.260 --> 03:45:08.260]  Строго меньше.
[03:45:09.260 --> 03:45:11.260]  А тут найти ближайшую ЛЦПшку, которая тоже строго меньше.
[03:45:12.260 --> 03:45:14.260]  И дальше начинается стандартная задача, вида дан массив.
[03:45:15.260 --> 03:45:19.260]  Для каждого числа найдите, пожалуйста, слева ближайшая, которая меньше.
[03:45:20.260 --> 03:45:23.260]  Ну, надеюсь, не надо расписывать, каким стэком это делается, да?
[03:45:24.260 --> 03:45:25.260]  Или надо?
[03:45:26.260 --> 03:45:27.260]  Почему отвратительная?
[03:45:28.260 --> 03:45:29.260]  Да ладно, со стэком очень легко.
[03:45:30.260 --> 03:45:33.260]  У вас возникали проблемы с тем, чтобы написать какие-то форумы.
[03:45:34.260 --> 03:45:38.260]  Нужно аккуратно вывести, идти с конца или сначала, нужно аккуратно вывести, брать меньше или больше?
[03:45:39.260 --> 03:45:40.260]  Ну, что делать?
[03:45:41.260 --> 03:45:48.260]  Потому что я боюсь, вот такие методы еще там, на олимпиадах до восьмого класса, как бы, задачи будут просто на это давать постоянно.
[03:45:49.260 --> 03:45:51.260]  Типа да, их дают постоянно и понятно, но приходится каждый раз, типа...
[03:45:52.260 --> 03:45:53.260]  Ну да, ну что делать?
[03:45:54.260 --> 03:45:55.260]  Ну окей, ладно.
[03:45:56.260 --> 03:45:59.260]  Ну вот, в принципе, классическое решение задачи на референ на самом деле вот такое.
[03:46:00.260 --> 03:46:04.260]  Если хотите попроще, пожалуйста, пишите суффиксное дерево или там, или даже суфо...
[03:46:05.260 --> 03:46:07.260]  А, ну, кстати, пожалуйста, можете суфо-автомат с динамикой написать.
[03:46:08.260 --> 03:46:10.260]  Да, суфо-автомат с динамикой тоже, пожалуйста, все что угодно.
[03:46:11.260 --> 03:46:12.260]  Да.
[03:46:13.260 --> 03:46:14.260]  Ну, на ваше усмотрение.
[03:46:15.260 --> 03:46:19.260]  Хотя суфо-автомат, в общем-то, по коду пишется, кстати, по-моему, примерно так же, как суфмасс плюс ЛЦП.
[03:46:21.260 --> 03:46:22.260]  Вот.
[03:46:23.260 --> 03:46:24.260]  Так же, но соответственно.
[03:46:25.260 --> 03:46:27.260]  Так, это мы проговорили про задачу референ.
[03:46:28.260 --> 03:46:34.260]  Более того, прежде чем я сейчас выключу свет и мы покажем, как эти ЛЦП-шки искать, я, конечно, должен отметить еще одну.
[03:46:35.260 --> 03:46:39.260]  Надо обсудить, как на самом деле быстро построить суффиксное дерево.
[03:46:40.260 --> 03:46:41.260]  Ага.
[03:46:42.260 --> 03:46:45.260]  Ну, глядя на эту картинку, вы уже догадываетесь, как построить суффиксное дерево.
[03:46:48.260 --> 03:46:50.260]  А, ну, собственно, вот эти ЛЦП-шки...
[03:46:50.260 --> 03:46:51.260]  Да.
[03:46:52.260 --> 03:46:59.260]  То есть, на самом деле, если вы будете добавлять суффиксное дерево суффикса именно в этом порядке, то эти ЛЦП-шки вам в явном виде показывают, где вы должны ответвиться.
[03:47:00.260 --> 03:47:10.260]  То есть ключевое соображение, когда вы будете искать это место ответвления, вы должны в суффиксе идти не от корня к листу, а, наоборот, от листа к корню.
[03:47:12.260 --> 03:47:13.260]  Понимаете почему, да?
[03:47:17.260 --> 03:47:18.260]  Так, понимаете почему?
[03:47:19.260 --> 03:47:20.260]  Так, не надо.
[03:47:21.260 --> 03:47:22.260]  Но там просто идея в том, что...
[03:47:23.260 --> 03:47:24.260]  Но там два варианта.
[03:47:25.260 --> 03:47:28.260]  Либо у вас как бы этот соответствующий путь по количеству ребер будет как бы в стеке, и вы ребрами выкидываете.
[03:47:29.260 --> 03:47:32.260]  Ну, либо можно еще говорить так, что вы, по сути, это дерево просто ДФС-ом пройдете.
[03:47:33.260 --> 03:47:41.260]  Потому что у вас есть текущий суффикс, и вы идете как бы от листа, идете вот сюда-сюда-сюда, и в этом месте ответвляетесь, и идете сюда.
[03:47:42.260 --> 03:47:43.260]  Вот.
[03:47:44.260 --> 03:47:45.260]  Ну, тут много классики, конечно.
[03:47:46.260 --> 03:47:49.260]  Потому что классическая задача, я вам рекомендую, не буду сейчас рассказывать, но вообще, знаете...
[03:47:50.260 --> 03:47:55.260]  Ну, во-первых, как бы всеми этими способами легко решить какую-нибудь задачу в духе о сколько различных подстрок в строке, правда?
[03:47:57.260 --> 03:48:01.260]  Ну, здесь очевидно это как делать через лца, можно там в суффиксном дереве это делать.
[03:48:02.260 --> 03:48:03.260]  А есть более веселая задача.
[03:48:04.260 --> 03:48:06.260]  А теперь дана строка, и у вас есть запросы.
[03:48:07.260 --> 03:48:08.260]  Пушбек в строку.
[03:48:09.260 --> 03:48:13.260]  Ну, во-первых, просто, смотрите, дана строка, у вас есть запросы. Пушбек в строку и найди количество различных подстрок.
[03:48:15.260 --> 03:48:17.260]  Ну, в автомате сложнее, а вот в дереве на халяву.
[03:48:18.260 --> 03:48:23.260]  Потому что поддерживать в дереве суммарную длину листов, как бы, никаких, суммарную длину рыбек, никаких проблем нет.
[03:48:24.260 --> 03:48:25.260]  Вот.
[03:48:26.260 --> 03:48:27.260]  Да.
[03:48:27.260 --> 03:48:28.260]  Но на самом деле есть более крутая задача.
[03:48:29.260 --> 03:48:33.260]  Когда у вас есть запросы, пушбек и попбек, такая антиамортизация.
[03:48:34.260 --> 03:48:37.260]  Пушбек, попбек, и после каждого запроса вы видите, что у вас есть запрос.
[03:48:38.260 --> 03:48:40.260]  А если у вас есть запрос, пушбек и попбек.
[03:48:40.260 --> 03:48:42.260]  Пушбек, такая антиамортизация.
[03:48:43.260 --> 03:48:46.260]  Пушбек, попбек, и после каждого запроса вы видите, сколько у вас подстрочек.
[03:48:47.260 --> 03:48:48.260]  Не, ну там может быть персистент.
[03:48:49.260 --> 03:48:50.260]  Хе-хе-хе.
[03:48:51.260 --> 03:48:52.260]  Вот задача.
[03:48:53.260 --> 03:48:55.260]  Как написать этого персистентного укранина?
[03:48:56.260 --> 03:48:57.260]  Персистент, амортизация и не укранина.
[03:48:58.260 --> 03:48:59.260]  Вот.
[03:49:00.260 --> 03:49:01.260]  Ну да.
[03:49:02.260 --> 03:49:04.260]  Могу только в качестве маленькой подсказки, почему вспомнил об этой задачи именно сейчас, а не в теме про укранина.
[03:49:05.260 --> 03:49:06.260]  Хе-хе-хе.
[03:49:07.260 --> 03:49:08.260]  Шикарная задача.
[03:49:08.260 --> 03:49:10.260]  Ну там попробуйте сами подумать, а потом расскажите.
[03:49:11.260 --> 03:49:13.260]  Если не придумаете, отдельно расскажу.
[03:49:14.260 --> 03:49:15.260]  Шикарное решение, на самом деле.
[03:49:16.260 --> 03:49:17.260]  Хе-хе-хе.
[03:49:18.260 --> 03:49:19.260]  Ладно.
[03:49:20.260 --> 03:49:21.260]  Но закончим и сегодня не едем.
[03:49:22.260 --> 03:49:23.260]  Сейчас я вас попрошу снова выключить свет.
[03:49:24.260 --> 03:49:25.260]  Ой.
[03:49:26.260 --> 03:49:28.260]  Двойник свектового.
[03:49:29.260 --> 03:49:31.260]  Мы не будем обсуждать, сколько я умираю.
[03:49:32.260 --> 03:49:33.260]  Потому что это вообще не связано.
[03:49:34.260 --> 03:49:35.260]  Потому что это алгоритм.
[03:49:36.260 --> 03:49:37.260]  Извините.
[03:49:38.260 --> 03:49:39.260]  Так.
[03:49:40.260 --> 03:49:41.260]  Вы его будете обсуждать в формалках.
[03:49:42.260 --> 03:49:43.260]  Можешь включить на сколько-то?
[03:49:44.260 --> 03:49:45.260]  Сейчас я включу его.
[03:49:46.260 --> 03:49:47.260]  А, там проектор включится?
[03:49:48.260 --> 03:49:49.260]  Да, я сейчас проектор включу, конечно.
[03:49:50.260 --> 03:49:51.260]  Я видимо название перепутал просто.
[03:49:52.260 --> 03:49:53.260]  Не-не-не.
[03:49:54.260 --> 03:49:57.260]  Это задача вида, что дана грамматика, скажи...
[03:49:58.260 --> 03:50:00.260]  Дана грамматика, дано слово, скажи, пожалуйста.
[03:50:01.260 --> 03:50:02.260]  Слово вылезает в грамматике или нет.
[03:50:03.260 --> 03:50:04.260]  Причем желательно...
[03:50:04.260 --> 03:50:09.260]  Причем алгоритм еще, по-моему, требует, чтобы она была еще в адекватной форме Хомского.
[03:50:10.260 --> 03:50:11.260]  Вот.
[03:50:12.260 --> 03:50:14.260]  Ну, если она в адекватной форме Хомского, то это как бы по нашим...
[03:50:15.260 --> 03:50:16.260]  По олимпиадным меркам это стандартная ДП-шка.
[03:50:19.260 --> 03:50:20.260]  Так.
[03:50:21.260 --> 03:50:23.260]  Так, давайте не путать Накамуру и Аримуру.
[03:50:24.260 --> 03:50:25.260]  Это разные люди.
[03:50:26.260 --> 03:50:27.260]  Слушай, а как бы Накамура не занимается алгоритмами.
[03:50:28.260 --> 03:50:29.260]  У него нет времени.
[03:50:30.260 --> 03:50:32.260]  Он там сидит в интернете и стримит, как он в блице играет по шахматам.
[03:50:32.260 --> 03:50:33.260]  На самом деле...
[03:50:34.260 --> 03:50:38.260]  А еще в перерывах он там на текущий момент второй в мире по классическим шахматам.
[03:50:39.260 --> 03:50:42.260]  На самом деле, как ни странно, есть Рэнзист.
[03:50:43.260 --> 03:50:45.260]  Самый великий Рэнзист.
[03:50:46.260 --> 03:50:50.260]  У него там стоя одна потрясающая задача.
[03:50:51.260 --> 03:50:52.260]  Абсолютно не поднимаем, он очень красивый.
[03:50:53.260 --> 03:50:54.260]  Ну окей, хорошо.
[03:50:55.260 --> 03:50:58.260]  Ну это хорошо, но я боюсь, как бы это не тот Накамура.
[03:50:59.260 --> 03:51:00.260]  Эх, Накамура.
[03:51:00.260 --> 03:51:01.260]  Ну хотя малый, потом тут Накамура.
[03:51:02.260 --> 03:51:03.260]  Еще вопрос откуда.
[03:51:04.260 --> 03:51:06.260]  Шахматы Накамура, он, как известно, американский.
[03:51:07.260 --> 03:51:08.260]  Ну да.
[03:51:09.260 --> 03:51:10.260]  Как это классика.
[03:51:11.260 --> 03:51:12.260]  Да, американские.
[03:51:13.260 --> 03:51:14.260]  Да, эти замечательные американские шахматисты.
[03:51:15.260 --> 03:51:16.260]  Там ведущие.
[03:51:17.260 --> 03:51:19.260]  Это называется Накамура.
[03:51:20.260 --> 03:51:21.260]  Фабиана Каруана.
[03:51:22.260 --> 03:51:23.260]  Кто там еще есть?
[03:51:24.260 --> 03:51:26.260]  Левон Оранян, конечно.
[03:51:27.260 --> 03:51:29.260]  Ой, кого там только нету.
[03:51:30.260 --> 03:51:31.260]  А, Уэс Лисо, конечно.
[03:51:32.260 --> 03:51:33.260]  Ха-ха-ха.
[03:51:34.260 --> 03:51:36.260]  То есть, в общем, Ханс Ниммон там.
[03:51:37.260 --> 03:51:39.260]  Не, Ханс Ниммон тоже такое имя не совсем американское.
[03:51:40.260 --> 03:51:41.260]  Ладно.
[03:51:42.260 --> 03:51:43.260]  Так вот.
[03:51:44.260 --> 03:51:45.260]  Ну у нас, значит, ой.
[03:51:46.260 --> 03:51:47.260]  Что за...
[03:51:48.260 --> 03:51:49.260]  Так.
[03:51:50.260 --> 03:51:51.260]  Да, это у меня тут определение, кстати.
[03:51:53.260 --> 03:51:54.260]  Вот.
[03:51:54.260 --> 03:51:55.260]  Ну и здесь все просто.
[03:51:56.260 --> 03:51:57.260]  Ну а это все про ЛЦПшки.
[03:51:58.260 --> 03:51:59.260]  Тут даже доказательства есть при желании.
[03:52:00.260 --> 03:52:01.260]  Так что можете там их почитать.
[03:52:02.260 --> 03:52:03.260]  Бла-бла-бла.
[03:52:04.260 --> 03:52:05.260]  Бла-бла-бла.
[03:52:06.260 --> 03:52:07.260]  Бинпоиск.
[03:52:08.260 --> 03:52:09.260]  Ой, не понял.
[03:52:10.260 --> 03:52:11.260]  Это как вообще?
[03:52:25.260 --> 03:52:26.260]  А.
[03:52:29.260 --> 03:52:31.260]  Так, нет, что-то самовал горит, но тут как будто нет.
[03:52:32.260 --> 03:52:33.260]  Странно.
[03:52:34.260 --> 03:52:35.260]  Ладно.
[03:52:36.260 --> 03:52:38.260]  А вот он, потому что вот он.
[03:52:39.260 --> 03:52:40.260]  Во.
[03:52:48.260 --> 03:52:49.260]  Да.
[03:52:55.260 --> 03:52:56.260]  Значит, смотрите.
[03:52:57.260 --> 03:52:58.260]  Итак.
[03:52:59.260 --> 03:53:00.260]  А, уже убегаешь?
[03:53:01.260 --> 03:53:02.260]  Ну я только знаю.
[03:53:03.260 --> 03:53:04.260]  Ааа.
[03:53:05.260 --> 03:53:06.260]  Так может все знают его?
[03:53:07.260 --> 03:53:08.260]  Ты не знаешь Супмасс, но знаешь ЛЦП.
[03:53:09.260 --> 03:53:10.260]  Хороший.
[03:53:11.260 --> 03:53:12.260]  Ну окей.
[03:53:13.260 --> 03:53:14.260]  Ну ладно, Лед.
[03:53:15.260 --> 03:53:16.260]  Ну окей, хорошо, хорошо.
[03:53:17.260 --> 03:53:18.260]  Да, ну может ты это Хэшами Бинпоиском пихнул.
[03:53:19.260 --> 03:53:20.260]  Внухо, молодец.
[03:53:21.260 --> 03:53:22.260]  Хорошо.
[03:53:22.260 --> 03:53:28.260]  Так, ну во-первых, смотрите какое интересное утверждение.
[03:53:29.260 --> 03:53:30.260]  Вот.
[03:53:31.260 --> 03:53:35.260]  Во-первых, конечно в этих леммах вводится понятие поз ИТ.
[03:53:36.260 --> 03:53:38.260]  Это типа где находится ИТ-суффикс в суффиксном массиве.
[03:53:39.260 --> 03:53:40.260]  Но обратная перестановка та самая, да?
[03:53:41.260 --> 03:53:43.260]  Так вот, идея такая.
[03:53:44.260 --> 03:53:46.260]  Давайте будем искать ЛЦП-шки именно в этом порядке.
[03:53:47.260 --> 03:53:50.260]  То есть сначала для поз нулевого, потом для поз первого и так далее.
[03:53:51.260 --> 03:53:56.260]  Ключевое утверждение говорит о том, что каждое следующее это не менее, чем предыдущее минус 1.
[03:54:00.260 --> 03:54:09.260]  Ну в принципе я думаю достаточно очевидно, что если мы в это поверим, то тупой алгоритм поиска ЛЦП, который будет пользоваться этим, сработает за линию, правда?
[03:54:11.260 --> 03:54:12.260]  Ну потому что у нас есть какая-то текущая влечина.
[03:54:13.260 --> 03:54:14.260]  Изначально 0, всегда не меньше n.
[03:54:15.260 --> 03:54:17.260]  Значит уменьшается она не более чем n раз.
[03:54:18.260 --> 03:54:20.260]  Следовательно увеличивается она не более чем 2n раз.
[03:54:21.260 --> 03:54:23.260]  Ой тут даже кода нету, жалко.
[03:54:24.260 --> 03:54:27.260]  Все что нам остается это утверждение доказать.
[03:54:30.260 --> 03:54:33.260]  Ну утверждение доказывается, да тут написано опять какой-то текст.
[03:54:39.260 --> 03:54:41.260]  Да, легче было конечно свет не выключать.
[03:54:42.260 --> 03:54:44.260]  Ну потому что идея в общем такая.
[03:54:45.260 --> 03:54:47.260]  Рассмотрим этот ИТ-суффикс.
[03:54:48.260 --> 03:54:51.260]  А, вот здесь я даже свет не надо включать на самом деле.
[03:54:52.260 --> 03:54:55.260]  Да, как это часто бывает в строчках, тут написано какой-то текст.
[03:54:56.260 --> 03:54:58.260]  Давайте-ка я сейчас на доске просто нарисую, что он значит.
[03:54:59.260 --> 03:55:01.260]  Так, где я нарисую?
[03:55:02.260 --> 03:55:04.260]  Ну где-то здесь я нарисую, короче.
[03:55:05.260 --> 03:55:06.260]  Смотрите.
[03:55:07.260 --> 03:55:09.260]  То есть идея на самом деле просто так.
[03:55:10.260 --> 03:55:12.260]  То есть идея на самом деле простая.
[03:55:15.260 --> 03:55:17.260]  То есть жил был...
[03:55:18.260 --> 03:55:21.260]  То есть жил был у нас тут какой-то суффиксный массив.
[03:55:26.260 --> 03:55:28.260]  Допустим жил был у нас тут ИТ-суффикс.
[03:55:29.260 --> 03:55:31.260]  Вот эта вот позиция posi.
[03:55:32.260 --> 03:55:34.260]  И у него lcp было где-то здесь.
[03:55:35.260 --> 03:55:36.260]  Это был суффикс номер.
[03:55:36.260 --> 03:55:38.260]  Это был posi и ты-суффикс.
[03:55:39.260 --> 03:55:42.260]  Это был там pos от какого-то икса.
[03:55:43.260 --> 03:55:44.260]  Допустим, да?
[03:55:45.260 --> 03:55:46.260]  Ну, во-первых, смотрите.
[03:55:47.260 --> 03:55:51.260]  Если это lcp было равно нулю, то утверждение очевидно, правда?
[03:55:53.260 --> 03:55:56.260]  Ну, потому что как бы такая lcp следующая больше, чем минус один.
[03:55:57.260 --> 03:55:58.260]  Ну, да.
[03:55:59.260 --> 03:56:01.260]  Но если оно оказалось больше нуля,
[03:56:01.260 --> 03:56:06.260]  то тогда оказывается, что у этих товарищей совпадают первые буковки.
[03:56:08.260 --> 03:56:10.260]  Ну, там, ладно, пусть они будут d.
[03:56:11.260 --> 03:56:12.260]  Тогда смотрите.
[03:56:13.260 --> 03:56:15.260]  Что делать, если взять у этих двух суффиксов и отпилить две буковки?
[03:56:16.260 --> 03:56:18.260]  Тогда окажется суффикс номер posi...
[03:56:19.260 --> 03:56:23.260]  То есть какой-то и плюс первый суффикс и икс плюс первый суффикс.
[03:56:24.260 --> 03:56:27.260]  И плюс первый будет меньше, чем икс плюс первый, правда?
[03:56:27.260 --> 03:56:33.260]  То есть это означает, что pos и плюс один будет где-то тут в массиве находиться.
[03:56:34.260 --> 03:56:35.260]  Неважно слева-справа от них.
[03:56:36.260 --> 03:56:40.260]  Но главное, что где-то справа от него будет pos икс плюс один.
[03:56:41.260 --> 03:56:44.260]  То есть самое главное, что вот этот правее этого.
[03:56:45.260 --> 03:56:49.260]  То есть они могут казаться оба правее вот этих двух, могут оба левее.
[03:56:50.260 --> 03:56:51.260]  Может этот левее, этот правее.
[03:56:52.260 --> 03:56:54.260]  Может кто-то из них даже с кем-то совпадает, кстати, вполне.
[03:56:55.260 --> 03:56:56.260]  Но это не важно.
[03:56:57.260 --> 03:56:58.260]  Вот этот правее этого.
[03:56:59.260 --> 03:57:02.260]  Но смотрите, если этот правее этого и между ними...
[03:57:03.260 --> 03:57:05.260]  Но тогда между ними lcp хотя бы столько минус один.
[03:57:06.260 --> 03:57:12.260]  То есть если вот тут lcp равно l, то тут уж хотя бы l минус один точно есть, правда?
[03:57:13.260 --> 03:57:15.260]  Ну точнее вот между ними lcp l минус один.
[03:57:17.260 --> 03:57:21.260]  Но тогда мы гарантируем, что между этим и следующим точно уж хотя бы l минус один да есть.
[03:57:22.260 --> 03:57:23.260]  А может и больше.
[03:57:24.260 --> 03:57:25.260]  Ну все, доказательство окончено.
[03:57:28.260 --> 03:57:30.260]  Все, мы победили.
[03:57:32.260 --> 03:57:35.260]  Собственно, не сильно сложная победа оказалась.
[03:57:47.260 --> 03:57:50.260]  Ну в общем-то по сути это все, что я должен был рассказать про суффиксный массив.
[03:57:52.260 --> 03:57:56.260]  Так что да, ладно, до дерево тандемных повторов, к сожалению, не дожили.
[03:57:57.260 --> 03:57:58.260]  Увы, жалко.
[03:58:00.260 --> 03:58:01.260]  Ну вот, ну ничего страшного.
[03:58:02.260 --> 03:58:03.260]  Ну вот.
[03:58:04.260 --> 03:58:06.260]  Ну ладно, потому что в следующий раз никакого дерево тандемных повторов не будет,
[03:58:07.260 --> 03:58:09.260]  потому что времени уже мало, придется начинать геометрию.
[03:58:10.260 --> 03:58:13.260]  И так уже опасаюсь, что не придется в какой-нибудь понедельник и дополнительно собраться.
[03:58:14.260 --> 03:58:15.260]  Вот.
[03:58:16.260 --> 03:58:17.260]  Очень надеюсь, что не придется.
