[00:00.000 --> 00:12.640]  Ну что, давайте начнём, значит сегодня мы изучаем NP полные задачи,
[00:22.640 --> 00:28.360]  значит NP полных задач очень много разных, их буквально сотни тысяч,
[00:28.360 --> 00:37.360]  есть такой старый учебник, ещё в 1979 году написан и в 82-м изданном в СССР,
[00:37.360 --> 00:43.960]  называется по-английски Computer and Interactability, по-русски вычислительные машины и трудно решаемые
[00:43.960 --> 00:54.360]  задачи, авторы Гэри и Джонсон, и там в конце учебника большой список разных NP полных,
[00:54.360 --> 01:01.800]  ну и разных других задач, то есть такая большая классификация, хотя основной материал несколько
[01:01.800 --> 01:07.920]  устарел, ну просто гораздо больше всего придумали, но вот эта классификация, она в общем до сих пор
[01:07.920 --> 01:15.280]  актуальна, и очень многие задачи имеют как бы свой номер в этой классификации Гэри и Джонсона.
[01:15.280 --> 01:24.480]  Значит мы конечно охватим только маленькую часть, некоторые самые важные задачи изучим,
[01:24.480 --> 01:31.880]  вот, но ещё на самом деле хочу сказать, что в одной из групп на PMI-информатика уже много чего
[01:31.880 --> 01:40.160]  изучили, да, некоторые что конструкции изучили, так что я отчасти повторюсь в плане задач, но
[01:40.160 --> 01:48.480]  скажу другие сводимости, да, так что даже если вы это уже прошли, то вы увидите что-то новое,
[01:48.480 --> 01:58.480]  вот, хорошо, значит давайте я напомню, что мы вообще изучили, значит у нас были эти сводимости,
[01:58.480 --> 02:07.120]  да, я запишу, чтобы было в разъёме, что означает, что задача связывается с предназначением,
[02:07.120 --> 02:24.720]  что означает, что существует лес, предназначение, что значит X, значит X нежит 2, тогда это
[02:24.720 --> 02:36.720]  значит X нежит в B, значит соответственно если B нежит в B и A находится в B, то A тоже нежит в B,
[02:36.720 --> 02:46.720]  значит это то зачем своим с приёмом, значит дальше поделение ПП на П, значит BNP полное,
[02:46.720 --> 03:10.720]  если B нежит в P, и для любого A из NP верно, что A сводится в P, значит также у нас было утверждение,
[03:10.720 --> 03:32.720]  значит утверждение такое, что если BNP полное, B сводится к C, и C лежит в NP, тогда C у нас тоже NP полное,
[03:32.720 --> 03:46.720]  вот это утверждение, которое позволяет получить новую NP полную задачу, надо получить NP полную задачу,
[03:46.720 --> 03:52.720]  нам нужно доказать, во-первых, что она лежит в NP, но как правило это часть очевидна или очень проста,
[03:52.720 --> 04:00.720]  получается исключение, наверное, легко, но обычно-то легко, ну и вторая часть, что какую-то уже известную
[04:00.720 --> 04:08.720]  NP полную задачу свести к нашей, то есть это в принципе такой процесс как снежный пол, да, такая репидемия,
[04:08.720 --> 04:15.720]  что как только мы свели какую-то NP полную задачу, какую-то новую, эту новую можно использовать для доказательств
[04:15.720 --> 04:24.720]  этого NP еще в следующих задачах. Получается такая как бы сеть соединений, ну и она начинается с того,
[04:24.720 --> 04:33.720]  что мы изучили в прошлый раз, да, то есть в прошлый раз была такая точка, да, конечно, во-первых,
[04:33.720 --> 04:39.720]  во-вторых, почему-то работает это из-за транзитивности, да, что любая сводится в В, а потом В сводится в С,
[04:39.720 --> 04:49.720]  поэтому любая сводится в С. Так, значит любая NP у нас сводится, значит, в ТАИ-Амсад,
[04:49.720 --> 05:00.720]  вот, дальше ТАИ-Амсад сводится в С, вот такой приоритет. Но это было круче нас, что у нас есть машина, вход.
[05:00.720 --> 05:09.720]  Пошел с другими аргументами, первый вход, я пришли на время работая, и вопрос, можно ли добавлять второй вход,
[05:09.720 --> 05:17.720]  так, чтобы машина на этих двух входах выдала единицу, ну и второй вход там ограничен от длины,
[05:17.720 --> 05:24.720]  и при этом работала бы за время, которое еще задано на банарной записи, тоже как аргумент.
[05:24.720 --> 05:33.720]  Но, в принципе, это тогда можно их наделивать, да, значит, можно прям напрямую считать, да, как это этап зашитого определения А,
[05:33.720 --> 05:38.720]  да, я считаю, что теория Поклевина, что любой А сводится к САД.
[05:38.720 --> 05:43.720]  Вот, а есть, в принципе, и наоборот, бывает, что еще промежуточные варианты сюда вставляют,
[05:43.720 --> 05:51.720]  это так называют задачи сервера к САД, значит, задача выполненности для будет схемы.
[05:51.720 --> 06:00.720]  Вот, ну, между акцией семестра, может, поградим про какую-то схему, вот, ну, вот, значит, а дальше САД сводится к САД.
[06:01.720 --> 06:09.720]  Ну, и вот три САД, это уже задача, которую удобно сводить куда-то дальше, потому что ее четкость другого, значит, такой три САД.
[06:09.720 --> 06:21.720]  Эта задача выполнена с 3КНФ, да, то есть там есть переменная, есть скобки, которые дизлются в переменах этих отрисаний,
[06:21.720 --> 06:23.720]  и есть комьюнция всех этих скобок.
[06:23.720 --> 06:32.720]  Соответственно, можно сводить три САД, куда-то прибудут какие-то конструкции для переменных, какие-то конструкции для скобок,
[06:32.720 --> 06:34.720]  и как-то это все друг другу губятся.
[06:36.720 --> 06:47.720]  Вот, значит, вот такая цепочка, да, то есть дальше мы будем начинать вот с этой вот три САД.
[06:49.720 --> 06:50.720]  Хорошо.
[06:53.720 --> 07:00.720]  Ну, давайте, как говорили, сначала про три задачи, которые уже друг другу хорошо сводятся.
[07:01.720 --> 07:07.720]  Это было бы в семинарах, а если не было, я просто чую, вы что, пройдете, да, или это вообще там собрались, да, 5 секунд?
[07:08.720 --> 07:10.720]  Да, в общем, перечислю.
[07:10.720 --> 07:13.720]  Задача, значит, задача акрития.
[07:14.720 --> 07:37.720]  Значит, задача акрития, это вот что по, из графа и числа, значит, таких, что в графе же есть полный подкрас, полный подкрас, и скобка.
[07:41.720 --> 07:44.720]  Полный подкрас, так что называется клик.
[07:46.720 --> 07:57.720]  Значит, обратите внимание, что если мы спрашиваем, равняется кликовое число к, да, то есть верно, что наибольший клик имеет размер к,
[07:58.720 --> 08:03.720]  то это уже не факт, что в НТ лежит, а даже, скорее всего, не лежит.
[08:04.720 --> 08:09.720]  Да, потому что, чтобы доказать, что есть клик размера к, можно просто и предъявить.
[08:10.720 --> 08:15.720]  Вот, а чтобы доказать, что у меня больше клика имеет размер к, нужно еще доказать, что больше клики нет.
[08:16.720 --> 08:25.720]  А это же непонятно, да, это кое-какая задача, что больше клики нету, да, что такое можно предъявить, чтобы доказать, что, там, в любом случае, уже нельзя набрать.
[08:26.720 --> 08:29.720]  Непонятно, что. Но это и не действие, в самом деле.
[08:30.720 --> 08:36.720]  На этой задаче ставится именно так, да, значит, можно набрать хотя бы, конечно.
[08:37.720 --> 08:42.720]  Так, значит, дальше еще одна задача – независимое множество.
[08:43.720 --> 09:00.720]  Значит, независимое множество – не то же самое, тут есть граф и число, но и, конечно, на нашей графике же есть независимое множество.
[09:00.720 --> 09:06.720]  Независимое множество. Независимое множество и ста вершин.
[09:10.720 --> 09:14.720]  То есть ста вершин, которые попали в независимые лёгкие.
[09:15.720 --> 09:20.720]  И третья задача в этой серии – это вершины погрузки.
[09:21.720 --> 09:23.720]  Так, лёгких скала.
[09:24.720 --> 09:26.720]  Или ноут камеры, когда встречается.
[09:29.720 --> 09:33.720]  Значит, это множество по-настоящему.
[09:34.720 --> 09:36.720]  Значит, таких, что найдется.
[09:37.720 --> 09:41.720]  Значит, существует множество вершин.
[09:42.720 --> 09:47.720]  С. Нет, под множество. С под множество вершин.
[09:48.720 --> 10:12.720]  Значит, такое, что в нём кадр вершин и для любого вертала из графа мы получаем, что хотя бы одна вершина лежит в этом множестве.
[10:13.720 --> 10:19.720]  То есть вершинная покрытия – это набор вершин, которые покрывают серию.
[10:20.720 --> 10:28.720]  Значит, можно представить такую задачу практическую, что если авиакомпания, у которой есть какие-то рейсы между аэропортами,
[10:29.720 --> 10:33.720]  включается граф рейсов авиакомпании, ну, будет всё еще и что-нибудь двустороннее.
[10:34.720 --> 10:36.720]  Ну, это даже не важно.
[10:37.720 --> 10:39.720]  Даже если они ориентированы, то мы просто снимем ориентацию.
[10:39.720 --> 10:46.720]  И дальше компания хочет сделать представительство, чтобы для каждого рейса хотя бы на одном конце было бы представительство.
[10:47.720 --> 10:49.720]  Вот это и будет вершинной покрытия.
[10:50.720 --> 10:53.720]  Видно отличие предыдущих двух.
[10:54.720 --> 11:00.720]  Значит, клипаешь, и если нужно будет клипить побольше, то вершинной покрытия будет поменьше.
[11:01.720 --> 11:04.720]  Если мы берем все вершины, то это точно вершинной покрытия.
[11:05.720 --> 11:07.720]  Вопрос, насколько маленькие мы можем взять.
[11:10.720 --> 11:18.720]  Ну, значит, ясно, что это всё лишь ВНП, потому что можно просто предъявить.
[11:19.720 --> 11:23.720]  Да, поглядя, если грав, ЗАН и ВНП, как список ЙОГО, это пример.
[11:24.720 --> 11:31.720]  Далее, как матрица смежности, то ясно, что это К будет не больше, чем число вершин, чтобы была смысленная задача.
[11:31.720 --> 11:41.720]  Там можно просто предъявить такие объекты, такие наборы нужного размера и действительно легко проверить, что все эти условия выполняются.
[11:48.720 --> 11:51.720]  Ну, опять же, это задача оптимизации, это всё задача оптимизации.
[11:52.720 --> 11:58.720]  Но в задачах оптимизации, если нас интересует точное значение оптимума, то это сложнее, чем ВНП.
[12:01.720 --> 12:06.720]  Мы можем доказать, что данное значение принимается, вот это задача из ВНП.
[12:07.720 --> 12:10.720]  Именно существует покрытие такого размера.
[12:11.720 --> 12:17.720]  То, что минимальное покрытие имеет такой размер, это уже более сложная задача, более сложная, чем ВНП.
[12:18.720 --> 12:23.720]  Но глобально, конечно, в первый дух мы максимизируем, в третьем минимизируем.
[12:24.720 --> 12:30.720]  Так, хорошо, значит, эти три, все задачи друг другу эквивалентны.
[12:36.720 --> 12:42.720]  Значит, клика, так, под стрелочкой я понимаю наличие свадимости в обе стороны.
[12:43.720 --> 12:52.720]  Значит, клика эквивалентна независимому множеству, а она эквивалентна вершину покрытия.
[12:53.720 --> 12:57.720]  Так, значит, если это не очевидно, то на семинарах будет разобрано.
[12:57.720 --> 13:02.720]  Вот, значит, поэтому смотрите, что дальше получается, исходя из вот этого утверждения,
[13:03.720 --> 13:09.720]  что если мы к одной из этих задач сведем что-нибудь ВНП полное, например, 3-сад,
[13:10.720 --> 13:14.720]  то все остальные тоже станут ВНП полными за счет вот этих свадимостей.
[13:17.720 --> 13:23.720]  Так, ну, в общем-то, в общем-то, в общем-то, в общем-то, в общем-то, в общем-то,
[13:24.720 --> 13:31.720]  так, ну, давайте я покажу, как 3-сад свести к вершинному покрытию.
[13:36.720 --> 13:43.720]  Значит, 3-сад сводится к вершинному покрытию.
[13:43.720 --> 13:53.720]  Так, ну, смотрите, как вообще все подобные свадимости устроены?
[13:54.720 --> 14:02.720]  Значит, там есть какие-то конструкции, которые принято назвать гаджетами.
[14:03.720 --> 14:10.720]  Есть специальные гаджеты для переменных, гаджеты для скобок,
[14:10.720 --> 14:16.720]  ну, и какая-то связь между ними, которая отражает структуру формулы.
[14:17.720 --> 14:25.720]  Ну, и вот в данном случае получается прям очень хорошо,
[14:26.720 --> 14:30.720]  граф разбивается на гаджеты для переменных и гаджеты для скобок.
[14:31.720 --> 14:35.720]  Так, хорошо, пусть у нас есть, что нам вообще нужно сделать?
[14:35.720 --> 14:42.720]  Нам нужно phi превратить в какой-то граф и число,
[14:43.720 --> 14:47.720]  значит, граф g phi и число k phi t.
[14:48.720 --> 14:55.720]  Ну, такое, что phi выполнимо тогда и только тогда,
[14:56.720 --> 15:03.720]  когда существует вершинное покрытие s графа g phi t,
[15:03.720 --> 15:07.720]  размера k phi t.
[15:08.720 --> 15:12.720]  Что у нас есть в формуле?
[15:13.720 --> 15:19.720]  В формуле у нас есть переменные и скобки.
[15:20.720 --> 15:30.720]  Будем считать, что у нас есть n переменных и m скобок.
[15:33.720 --> 15:42.720]  Значит, каждой, сейчас я буду рассказывать, как строится вот эта пара из графа и числа.
[15:43.720 --> 15:51.720]  Значит, каждой переменной я сопоставляю просто ребро, отдельно выделенное ребро.
[15:51.720 --> 16:01.720]  Значит, переменная P, но вот некоторое отдельное ребро.
[16:08.720 --> 16:16.720]  Ну, и мы будем считать... Так, давайте я покрупнее нарисую, чтобы...
[16:16.720 --> 16:20.720]  Я хочу сами вершины пометить.
[16:23.720 --> 16:30.720]  Одна вершина будет помечена P, а второй переменная, другая вероится P.
[16:31.720 --> 16:35.720]  А, вот сейчас мы умерли по нему.
[16:35.720 --> 16:39.720]  Нет, нет, нет. У нас переменная в одном раз вовеке.
[16:40.720 --> 16:44.720]  Часть вхождения она сама, часть ввыцает сами.
[16:45.720 --> 16:49.720]  Но одной выделенной переменной мы сопоставляем одно воздействие на ребро.
[16:50.720 --> 16:54.720]  Подождите, подождите, подождите.
[16:55.720 --> 16:59.720]  Ну, что, что у нас есть в форме?
[16:59.720 --> 17:03.720]  Дальше. Значит, скобка.
[17:07.720 --> 17:11.720]  Значит, скобка имеет вид дизьюнция трех литералов.
[17:12.720 --> 17:16.720]  Литералы – это переменные или отрицания переменных.
[17:16.720 --> 17:20.720]  Значит, скобка имеет вид дизьюнция трех литералов.
[17:21.720 --> 17:25.720]  Литералы – это переменные или отрицания переменных.
[17:26.720 --> 17:30.720]  Скажем, вот там L1, или L2, или L3.
[17:34.720 --> 17:38.720]  Значит, тут будет треугольник.
[17:39.720 --> 17:43.720]  Значит, треугольник...
[17:43.720 --> 17:47.720]  Который как раз помечен вот этими вот литералами.
[17:49.720 --> 17:53.720]  Да, значит, я обращаю внимание, что это я так пишу L1, L2, L3.
[17:54.720 --> 17:58.720]  А на самом деле каждая лита – это либо переменная, либо отрицание переменной.
[17:59.720 --> 18:03.720]  Да, то есть вообще, так говоря, метки на треугольниках и метки на ребрах
[18:04.720 --> 18:08.720]  не имеют никакого значения.
[18:08.720 --> 18:12.720]  Метки на треугольниках и метки на ребрах –
[18:13.720 --> 18:17.720]  это метки одной природы.
[18:18.720 --> 18:22.720]  И, конечно, нужно их как-то связать друг с другом еще,
[18:23.720 --> 18:27.720]  чтобы отразить структуру формулы, какие перемены входят в какие скобки.
[18:32.720 --> 18:36.720]  Нет, наоборот. Разные вершины могут иметь одну и ту же метку.
[18:38.720 --> 18:42.720]  Подождите, еще раз. Мы по формуле строим граф.
[18:44.720 --> 18:48.720]  По формуле строим граф. Я его еще не достроил, я пока начал строить.
[18:49.720 --> 18:53.720]  Во-первых, для каждой переменной мы заводим отдельное ребро.
[18:54.720 --> 18:58.720]  Во-вторых, для каждой скобки мы заводим отдельный треугольник.
[18:59.720 --> 19:03.720]  Вот с такими метками. Соответственно, тут
[19:03.720 --> 19:07.720]  каждая метка входит в граф на один больше, чем она входит в формулу.
[19:08.720 --> 19:12.720]  То есть каждая метка один раз встречается на ребре
[19:13.720 --> 19:17.720]  и еще один раз для каждого вхождения в нужном треугольнике.
[19:19.720 --> 19:23.720]  И теперь, наконец, как мы соединяем эти две части?
[19:26.720 --> 19:30.720]  Мы просто делаем так, как мы делали,
[19:31.720 --> 19:35.720]  значит, мы просто соединяем
[19:38.720 --> 19:44.720]  вершины из ребер и вершины из треугольников, которые имеют одинаковые метки.
[19:45.720 --> 19:49.720]  Тут очень важно, что не вообще все одинаковые метки соединяем,
[19:50.720 --> 19:54.720]  а только метку из ребра со всеми такими же метками в треугольниках.
[19:54.720 --> 19:58.720]  Значит, каждую вершину из ребра...
[20:03.720 --> 20:07.720]  Сейчас я нарисую, как это будет выглядеть на конкретном примере.
[20:08.720 --> 20:12.720]  Каждая вершина из ребра соединяется
[20:14.720 --> 20:18.720]  с также помеченными вершинами
[20:18.720 --> 20:20.720]  из треугольников.
[20:24.720 --> 20:27.720]  Так, сейчас какой-нибудь пример придумаем,
[20:28.720 --> 20:32.720]  и я вам покажу, как это выглядит.
[20:33.720 --> 20:36.720]  И еще, кстати, еще нужно сказать, чему равно k.
[20:37.720 --> 20:39.720]  Ну, k, на самом деле, можно просто сказать,
[20:40.720 --> 20:44.720]  значит, у каждого из ребров, у каждого из ребров,
[20:44.720 --> 20:47.720]  ну, k, на самом деле, можно просто сказать,
[20:48.720 --> 20:52.720]  значит, k будет n плюс 2m.
[20:55.720 --> 20:58.720]  А почему это так, сейчас обсудим.
[21:02.720 --> 21:04.720]  Так, значит, пока я стираю,
[21:05.720 --> 21:07.720]  может быть, даже непонятно вообще, почему это работает,
[21:08.720 --> 21:11.720]  но я думаю, должно быть понятно, почему это пальномиально.
[21:11.720 --> 21:16.720]  Да, значит, там нужно как-то синтактически разобрать формулу,
[21:17.720 --> 21:23.720]  ну и дальше ясно, что у графа будет примерно такой же размер, как у формулы.
[21:25.720 --> 21:31.720]  То есть тут будет сколько? 3m плюс 2n вершин у графа будет,
[21:32.720 --> 21:33.720]  ну и ясно, как его строить.
[21:34.720 --> 21:37.720]  В общем, видно, что это несложная задача,
[21:38.720 --> 21:40.720]  вычислить, что получается.
[21:41.720 --> 21:44.720]  Ну а теперь давайте разберемся, почему это работает.
[21:45.720 --> 21:47.720]  Ну, давайте какой-нибудь пример,
[21:48.720 --> 21:51.720]  какая-нибудь формула, например,
[21:52.720 --> 21:56.720]  p или не q или r,
[21:57.720 --> 22:02.720]  и, скажем, не p или не r или не s,
[22:03.720 --> 22:08.720]  и, скажем, q или не r или s.
[22:08.720 --> 22:17.720]  Вот, например, я взял, что 4 переменных, получается, и 3 скобки.
[22:18.720 --> 22:26.720]  Так, хорошо, ну давайте посмотрим, как это будет выглядеть.
[22:27.720 --> 22:28.720]  Значит, p или не p.
[22:29.720 --> 22:33.720]  Так, дальше, а, слушайте, давайте я вот так вот нарисую,
[22:33.720 --> 22:37.720]  чтобы меньше было пересечений.
[22:38.720 --> 22:45.720]  Значит, r не r, так, и тут s не s.
[22:46.720 --> 22:49.720]  Так, вот это одна часть графа, как бы отдельные ребра.
[22:50.720 --> 22:52.720]  Так, теперь треугольники.
[22:53.720 --> 22:58.720]  Так, вот треугольник p, не q,
[22:58.720 --> 23:04.720]  так, вот треугольник p, не q, r.
[23:05.720 --> 23:08.720]  Так, это у меня соединяется вот так вот,
[23:09.720 --> 23:10.720]  это соединяется вот так вот,
[23:11.720 --> 23:12.720]  это соединяется вот так вот.
[23:13.720 --> 23:26.720]  Так, значит, дальше не p, не r, не s.
[23:26.720 --> 23:30.720]  Значит, это соединяется вот так вот,
[23:31.720 --> 23:32.720]  это соединяется вот так вот,
[23:33.720 --> 23:34.720]  это соединяется вот так вот.
[23:35.720 --> 23:44.720]  Так, и последнее осталось q, не r, и s.
[23:45.720 --> 23:49.720]  Так, значит, это у меня вот сюда вот,
[23:49.720 --> 23:57.720]  не r вот сюда вот, и s вот сюда вот.
[24:00.720 --> 24:03.720]  Так, ну вроде еще можно углядели структуру.
[24:06.720 --> 24:10.720]  В общем, вот видно, что тут как бы вот такие две части.
[24:11.720 --> 24:15.720]  Значит, одна часть относится к переменам, другая часть относится к скобкам.
[24:16.720 --> 24:17.720]  Так, хорошо.
[24:18.720 --> 24:23.720]  Значит, теперь, смотрите, нужно в две стороны доказать.
[24:24.720 --> 24:26.720]  То есть очень важно, что вот здесь вот равносильность.
[24:27.720 --> 24:29.720]  Нужно одновременно показать две вещи,
[24:30.720 --> 24:32.720]  что если существует выполняющий набор,
[24:33.720 --> 24:34.720]  то тогда есть покрытие,
[24:35.720 --> 24:37.720]  и наоборот, если есть покрытие, то есть выполняющий набор.
[24:39.720 --> 24:41.720]  Вот это очень важно не забывать,
[24:42.720 --> 24:43.720]  когда вы сами придумываете конструкцию,
[24:43.720 --> 24:45.720]  то нужно обе вещи показывать.
[24:46.720 --> 24:47.720]  Так, ну в одну сторону.
[24:48.720 --> 24:49.720]  Значит, в одну сторону,
[24:50.720 --> 24:52.720]  конечно, это выполнимая формула, тут очень много выполняющих наборов,
[24:53.720 --> 24:55.720]  но давайте какой-нибудь один из них выберем.
[24:56.720 --> 25:00.720]  Например, пусть здесь выполнено p,
[25:02.720 --> 25:04.720]  значит, здесь выполнено не r,
[25:05.720 --> 25:06.720]  и здесь выполнено s.
[25:07.720 --> 25:09.720]  Вот, а q вообще не важно, чему равно.
[25:10.720 --> 25:11.720]  Ну, чему-то равно.
[25:11.720 --> 25:12.720]  Ну, например, q равно 1.
[25:15.720 --> 25:17.720]  Вот, тогда что мы сделаем?
[25:18.720 --> 25:24.720]  Значит, в каждом ребре мы возьмем как раз ту вершину,
[25:25.720 --> 25:27.720]  которая соответствует частинам литералу.
[25:28.720 --> 25:31.720]  То есть в данном случае, ну, например,
[25:32.720 --> 25:34.720]  п, вот это возьмем.
[25:35.720 --> 25:39.720]  Так, q единиц, я сказал, q дальше r равно 0,
[25:39.720 --> 25:40.720]  то есть вот это вот.
[25:41.720 --> 25:43.720]  Значит, и s равно единиц, и вот это вот.
[25:44.720 --> 25:47.720]  И это как раз n вершин.
[25:48.720 --> 25:50.720]  Это вот эти вот n вершин.
[25:51.720 --> 25:53.720]  Значит, а теперь в треугольниках.
[25:56.720 --> 25:58.720]  Значит, смотрите,
[25:59.720 --> 26:04.720]  у нас из каждой вершин треугольника есть ребро, выходящее в другую часть графа.
[26:05.720 --> 26:08.720]  И это ребро должно быть покрыто, как вообще все ребра.
[26:09.720 --> 26:13.720]  Ну, вот, например, вот в этом треугольнике,
[26:14.720 --> 26:17.720]  значит, вот это вот ребро уже покрыто с той стороны.
[26:18.720 --> 26:20.720]  И тогда с этой его не обязательно покрывать.
[26:21.720 --> 26:24.720]  Вот, а вот эти вот не покрыты, но мы, соответственно,
[26:25.720 --> 26:27.720]  возьмем вот это и вот это.
[26:30.720 --> 26:33.720]  Если форма выполнима, тогда в графе есть покрытие.
[26:34.720 --> 26:37.720]  Это как построить покрытие по выполняющему набору.
[26:40.720 --> 26:41.720]  Вот.
[26:42.720 --> 26:44.720]  Ну, соответственно, в этих треугольниках точно так же.
[26:45.720 --> 26:48.720]  Здесь вот это вот, идущее сюда,
[26:49.720 --> 26:51.720]  покрыто с этой стороны.
[26:52.720 --> 26:56.720]  Значит, соответственно, вот эти вот два ребра мы покрываем за счет вот этих вот двух.
[26:58.720 --> 27:02.720]  Вот. Ну, и конечно, у этого тут как бы целых два покрыто.
[27:03.720 --> 27:07.720]  Но смотрите, в треугольнике все равно нужно хотя бы две вершины покрыть,
[27:07.720 --> 27:10.720]  чтобы покрыть те ребра, которые внутри треугольника.
[27:11.720 --> 27:12.720]  Их же тоже надо покрыть.
[27:13.720 --> 27:15.720]  Вот. Ну, раз уж я по...
[27:16.720 --> 27:18.720]  А, тут они вообще все три даже покрыты, да?
[27:21.720 --> 27:24.720]  Вот, которые здесь, значит, 1-1-0-1.
[27:28.720 --> 27:30.720]  Вот. 1-1-0-1.
[27:32.720 --> 27:35.720]  Вот. Значит, в этом треугольнике сразу все три получились покрыты.
[27:35.720 --> 27:38.720]  Но нам все равно нужно сам треугольник покрыть.
[27:39.720 --> 27:41.720]  Ну, и, например, раз уж я подчеркну вот это вот,
[27:42.720 --> 27:44.720]  то мы считаем, что вот это вот ребро покрыто с этой стороны.
[27:45.720 --> 27:49.720]  Ну, а вот эти вот оставшиеся две вершины нужно покрыть.
[27:51.720 --> 27:53.720]  Вот. Ну, вот и получается n плюс 2m.
[27:54.720 --> 27:59.720]  Получается, что n вершин в этой части покрыты,
[28:00.720 --> 28:03.720]  и в каждом из m треугольников две вершины покрыты в этой части.
[28:03.720 --> 28:04.720]  Поэтому n плюс 2m.
[28:05.720 --> 28:08.720]  Вот. И дальше действительно все ребра покрыты.
[28:09.720 --> 28:11.720]  Почему? Все ребра вот эти вот отдельные покрыты,
[28:12.720 --> 28:16.720]  потому что мы один конец выбрали и им покрыли.
[28:17.720 --> 28:18.720]  Все ребра в треугольнике покрыты,
[28:19.720 --> 28:22.720]  потому что мы в каждом треугольнике две вершины выбрали.
[28:23.720 --> 28:26.720]  Вот. А все ребра между двумя частями покрыты
[28:27.720 --> 28:29.720]  ровно потому, что это выполняющий набор.
[28:29.720 --> 28:30.720]  Мы так выбирали, какие две покрывать,
[28:31.720 --> 28:33.720]  так, чтобы третья оставалась покрыта с другой стороны.
[28:35.720 --> 28:38.720]  Ну, вот. Значит, это действительно покрытие.
[28:41.720 --> 28:42.720]  Вот.
[28:46.720 --> 28:49.720]  Подождите. n переменных, m скобок.
[28:50.720 --> 28:52.720]  А k это размер покрытия.
[28:52.720 --> 28:53.720]  Вот.
[28:54.720 --> 28:56.720]  Хорошо. А теперь другую сторону.
[28:58.720 --> 29:02.720]  Смотрите, на самом деле покрытия обязаны выглядеть как-то вот так вот.
[29:03.720 --> 29:04.720]  Почему?
[29:04.720 --> 29:07.720]  Потому что среди вот этих вот ребра должны быть покрыты,
[29:08.720 --> 29:09.720]  и они вообще все отдельны друг от друга.
[29:10.720 --> 29:13.720]  Поэтому хотя бы одну вершину из каждого из них нужно взять.
[29:14.720 --> 29:15.720]  Дальше.
[29:16.720 --> 29:17.720]  Вот.
[29:17.720 --> 29:18.720]  Вот.
[29:29.720 --> 29:31.720]  Ну, если мы берем одну вершину из этих n ребер
[29:32.720 --> 29:35.720]  и две вершины из m треугольников,
[29:36.720 --> 29:38.720]  то есть тут, n вот этих ребер,
[29:39.720 --> 29:40.720]  значит, m треугольников,
[29:42.720 --> 29:44.720]  значит,, тут одна вершина, тут две вершины,
[29:44.720 --> 29:51.080]  тут две вершины, то у нас больше ничего не остается, у нас всего n плюс 2m вершин,
[29:51.080 --> 29:56.600]  и как бы что-то типа принципа Дерехле, что хотя бы одна всюду здесь, хотя бы две всюду здесь,
[29:56.600 --> 30:07.840]  и значит ровно одна всюду здесь, и ровно две всюду здесь. Ну а дальше, смотрите, если у нас ровно
[30:07.840 --> 30:15.960]  одна в каждом ребре, то это сдает какой-то набор. Если выделена вершина с переменной,
[30:15.960 --> 30:20.600]  то значит это примерно равна единице, если выделена вершина с отрицанием переменной,
[30:20.600 --> 30:26.600]  то переменная равна нулю. То есть какой-то набор у нас есть. И он обязательно должен быть
[30:26.600 --> 30:31.920]  выполняющий. Почему? Потому что в каждом треугольнике будет две вершины покрытые,
[30:31.920 --> 30:37.680]  а из третьей тоже идет ребро, и это ребро тоже покрыто, значит он покрыт с другой стороны.
[30:37.680 --> 30:47.080]  Но тогда, если мы считаем, что метки на покрытых вершинах истинные, то это означает, что вот
[30:47.080 --> 30:52.480]  это вот P будет истинно в этой скобке. Значит скобка выполнена. И так в каждом треугольнике,
[30:52.480 --> 31:00.080]  то есть в каждой скобке, то и все скобки истинны. Значит формула истинна. Вот такое рассуждение.
[31:00.080 --> 31:12.400]  Так, ну что, киньте вопросы. Все понятно?
[31:21.920 --> 31:27.120]  Сейчас, значит смотрите, еще раз. Чтобы покрыть вот это ребро, нам нужно выбрать одну вершину.
[31:27.120 --> 31:32.600]  Чтобы покрыть треугольник, нам нужно выбрать две вершины. То есть у нас больше либо равно одной
[31:32.600 --> 31:36.680]  вершины, покрытой на каждом ревре, и больше либо равно двух вершин, покрытых в каждом треугольнике.
[31:36.680 --> 31:44.880]  То есть всего у нас больше либо равно, чем n плюс 2m покрыто. Но у нас ровно столько покрыто. Это
[31:44.880 --> 31:49.640]  даже не столько принципа Дерехлева, сколько что мы суммируем неравенство и получаем равенство,
[31:49.640 --> 32:00.000]  значит они все равенство были. Ну вот, а дальше получается, что непокрытая в треугольнике должна
[32:00.000 --> 32:11.120]  соответствовать истинному литералу в скобке. Потому что покрыты как раз истинные литералы в
[32:11.120 --> 32:17.560]  этой части, и раз это ребро покрыто с той стороны, значит это будет точность истинной литерал в скобке.
[32:17.560 --> 32:33.000]  Нет, конечно, не каждый. Но вот там вот в том определении NP-полноты,
[32:33.000 --> 32:37.640]  значит в определении сводимости, которую я стер, там же не требуется, чтобы f было сюръекцией,
[32:37.640 --> 32:44.800]  и даже не требуется, чтобы она была инъекцией, она просто функция какая-то. Получается, что уже
[32:44.800 --> 32:53.120]  частный случай вот с такими графами и с таким числом k, он уже настолько же сложный, насколько все NP.
[32:53.120 --> 33:02.720]  То есть если, ну можно сказать так, что если мы научились решать вообще вершины покрытия,
[33:02.720 --> 33:08.280]  любое, то в том числе мы его научились решать для графа такого вида, а тогда мы научились
[33:08.360 --> 33:15.600]  решать 3 SAT, а тогда мы научились решать все NP. Поэтому нам все нужно, чтобы все графы получались.
[33:15.600 --> 33:32.880]  Это, кстати, можно как некоторую общую теорему сформулировать, что если
[33:32.880 --> 33:42.720]  частный случай, ну, кстати, в данном случае даже это тюрем не подойдет, потому что,
[33:42.720 --> 33:49.600]  или я не уверен, что подойдет, потому что не очень понятно, как проверять, если у вас граф изначально
[33:49.600 --> 33:55.040]  задан, да, то не очень понятно, как проверять, имеет он вообще такой вид или нет. Может и можно,
[33:55.040 --> 34:12.960]  но это не тривиальная задача. Вот так, но давайте я те мнения сформулирую, значит, теорема о частном случае.
[34:12.960 --> 34:41.320]  Так, значит, смотрите, пусть у вас, смотрите, если А лежит в NP,
[34:41.320 --> 34:57.720]  Б лежит в П, значит, А лежит в NP, Б лежит в П, и при этом А в пересечении с Б NP полное,
[34:57.720 --> 35:10.120]  значит, то тогда и само А NP полное.
[35:10.120 --> 35:30.040]  Да, то есть если у нас, ну, пример, да, давайте пример, как эта теория работает,
[35:30.040 --> 35:47.640]  значит, можно рассмотреть просто задачу о раскраске. Раскраска это множество пар из графа G и числа
[35:47.640 --> 36:04.040]  Х, так что есть раскраска в К цветов. Значит, существует правильная раскраска вершин графа в К цветов.
[36:04.040 --> 36:24.800]  Значит, это вообще раскраска. Есть три раскраска, значит, три раскраска. Вот, это просто, когда у нас есть граф,
[36:24.800 --> 36:40.400]  так что существует, ну, это было у нас, значит, существует раскраска в три цвета. Вот, но, конечно,
[36:40.400 --> 36:49.280]  так как написано это не совсем, как в теореме написано, но можно вместо, значит, чтобы это
[36:49.360 --> 36:55.880]  подходило под теорему, нам нужно вместо G написать пару из графа G и числа 3. Значит,
[36:55.880 --> 37:03.520]  если тут, значит, если тут будет, значит, граф G и число 3, значит, то как в теореме.
[37:03.520 --> 37:17.040]  Да, потому что, что такое B будет? B это множество пар из графов и числа, где число равно триом. Да,
[37:17.040 --> 37:26.680]  это очевидно в P будет лежать, а пересечение будет как раз три раскраска. Вот так, ну,
[37:26.680 --> 37:35.760]  а почему теорема-то верна? Ну, потому что, смотрите, пусть у нас там произвольное доказательство теоремы.
[37:35.760 --> 37:43.960]  Да, соответственно, получается, что если мы докажем, что три раскраска NP полна,
[37:43.960 --> 37:58.160]  то тогда и просто раскраска тоже NP полна. Вот так. Ну, а как доказывается теорема? Ну,
[37:58.160 --> 38:08.960]  смотрите, у нас произвольный язык X сводится вот к A пересечения с B. Да, то есть получается,
[38:08.960 --> 38:20.840]  что там X мало лежит в X большом, тогда и только тогда, когда F от X лежит в пересечении A и B.
[38:20.840 --> 38:30.880]  Так, хорошо, тогда можно новую, значит, новую функцию написать. Так, сейчас я докажу и сделаем
[38:30.880 --> 38:47.440]  перерывчик. Значит, F штрих, другая функция, F штрих от X. Значит, это будет вот что, это будет
[38:47.440 --> 39:02.840]  F от X, если F от X лежит в B. И поскольку B лежит в B, то мы это можем проверить. Вот, ну а если не лежит в B,
[39:02.840 --> 39:12.360]  то, если F от X не лежит в B, то он точно лежит в пересечении, и значит, X точно не лежит,
[39:12.360 --> 39:21.600]  X мало точно не лежит в X большом. Значит, нам нужно, чтобы тогда F штрих от X не лежало в A. Ну,
[39:21.600 --> 39:26.040]  это неважно, мы возьмем какую-нибудь константу, которая не лежит в A. Посмотрите, поскольку,
[39:26.040 --> 39:34.400]  сейчас, тут на самом деле есть какой-нибудь выраженный случай, если P равно NP и A это все вместе,
[39:34.400 --> 39:41.360]  то, наверное, это будет неправда. Вот, а во всех остальных случаях это будет правда. Да,
[39:41.360 --> 39:51.840]  в общем, нужно взять какой-то отдельный элемент, который не лежит на какой-то A0. Значит, если F от
[39:51.840 --> 40:04.840]  X не лежит в B, значит, где A0 не лежит в A. Вот, ну и тут даже неважно, откуда мы его возьмем,
[40:04.840 --> 40:11.520]  потому что это просто один элемент, и его можно как бы зашить в описании программы F штрих.
[40:11.520 --> 40:27.120]  Почему это работает? Ну, потому что теперь, если X лежит в X, значит, тогда получается,
[40:27.120 --> 40:36.400]  что F от X лежит в пересечении A и B, и тогда получается, в частности, что F от X лежит в B,
[40:36.400 --> 40:52.360]  и тогда F штрих от X равно F от X, и то есть получается, что F штрих от X лежит в A. Вот,
[40:52.360 --> 41:03.960]  это одно, а если X не лежит в X, то тогда F от X не лежит в пересечении, и тогда получается одно из двух,
[41:03.960 --> 41:17.160]  либо F от X не лежит в B, либо F от X лежит в B, но не лежит в A. Значит, если он не лежит в B,
[41:17.160 --> 41:26.320]  то мы получаем, что F штрих от X равно A0 и не лежит в A. А нам и нужно, чтобы F штрих от X не лежало в A.
[41:26.320 --> 41:41.200]  А в этом случае получается, что F штрих от X равно F от X и так тоже не лежит в A. Не лежит в A,
[41:41.200 --> 41:46.920]  потому что оно в этом предположении лежит в A. Значит, равно F от X.
[41:46.920 --> 42:01.480]  Не, не, не, про пересечение у нас было в предположении. Смотрите, нет, нужно нам,
[42:01.480 --> 42:09.880]  что X лежит в X большом, только когда F штрих от X лежит в A. Значит, вот это нам нужно,
[42:09.880 --> 42:19.360]  а вот это нам дано изначально. То есть вот это за счет полноты пересечения.
[42:19.360 --> 42:30.520]  А вот если F от X лежит в B? Если, если F от X лежит в B.
[42:30.520 --> 42:39.560]  Не знаем, это мы потом вот здесь рассуждаем, что это сработает.
[42:39.560 --> 42:54.360]  Вот здесь вот. Тут-то мы знаем все-таки, потому что если мы пройдем назад,
[42:54.560 --> 43:01.200]  то F от X лежит в пересечении, значит в A лежит. Ну, то есть тут это как-будто из двух будет следовать.
[43:01.200 --> 43:10.760]  Так, ну ладно, я почти всю перемену занял,
[43:10.760 --> 43:14.160]  давай сейчас сделаем перерыв на пять минут и потом продолжим.
[43:14.160 --> 43:34.840]  Так, давайте продолжим. Значит, раз я уже сказал про три-раскраску, давайте для три-раскраски я расскажу,
[43:34.840 --> 43:41.920]  почему она NP полная. Вот, но я расскажу не ту конструкцию, которая у меня в книжке написана,
[43:41.920 --> 43:50.440]  а другую. И там будет еще одна задача по дороге. Задача по дороге будет не связана с графами,
[43:50.440 --> 44:05.840]  а связана с выполнимостью. Значит, будет вот такая цепочка. Значит, три-сад сводится к задаче нае-три-сад.
[44:05.840 --> 44:17.360]  Значит, где сейчас скажу, что такое нае, а это уже будет к три-кол. Значит, нае означает not all equal,
[44:17.360 --> 44:26.800]  то есть не все одинаковые. Вот, и это будет вот что такое. Это множество phi, таких что phi это 3 KnF,
[44:26.800 --> 44:36.320]  и существует не просто выполняющий набор, а такой набор, что в каждой скобке есть и единица, и ноль.
[44:36.320 --> 44:47.320]  Значит, существует набор значений такой, что в каждой скобке
[44:47.320 --> 45:05.960]  в каждой скобке есть и истинные, и ложные предикаты. Не предикаты, в смысле, а литералы.
[45:05.960 --> 45:24.840]  Вот, то есть как бы просто выполнимость из восьми вариантов семь оставляет, кроме трех нулей,
[45:24.840 --> 45:33.000]  а здесь остается шесть вариантов, все варианты кроме трех нулей и трех единиц. Значит, ясно,
[45:33.000 --> 45:39.200]  что это в НП лежит по той же причине, если нам даны значения, мы можем вычислить значение каждой скобке,
[45:39.200 --> 45:45.400]  точнее даже не значение, а посчитать число единиц в каждой скобке и увидеть что-либо единиц, либо два,
[45:45.400 --> 45:58.320]  а не ноль и не три. Вот, хорошо. Значит, теперь как это делается. Значит, конструкция здесь такая,
[45:58.320 --> 46:06.480]  из каждой скобки из исходной формулы мы делаем две скобки в новой формуле.
[46:06.480 --> 46:20.960]  То есть пусть фи это будет, ну какая-то там конъюнция, ц1 и так далее, ц2 и так далее ценная.
[46:20.960 --> 46:42.600]  И дальше каждая цит преобразуется в пару, ну какой-нибудь там дит и еит.
[46:42.600 --> 46:52.320]  То есть из каждой скобки старые, получается две скобки новых. Кстати, на самом деле в такой
[46:52.320 --> 46:57.400]  постановке даже не очень важно, что у нас тут стоит конъюнция, потому что у нас более сложные условия.
[46:57.400 --> 47:03.160]  Ну, можно считать так.
[47:13.800 --> 47:23.920]  Кстати, такое упражнение. Почему не подходят то, что на первый взгляд кажется, что мы возьмем из
[47:23.920 --> 47:29.760]  каждой скобки сделан как бы ее и противоположную. То есть если у нас там было p или q или r, то мы
[47:29.760 --> 47:39.480]  добавляем еще формулу не p или не q или не r. Почему вот это вот не подойдет такое упражнение подумать.
[47:39.480 --> 47:56.520]  Ну хорошо, значит как это будет выглядеть. Ну смотрите, пусть вот это было, ну не знаю,
[47:56.520 --> 48:10.440]  какой-нибудь там а-и-т или б-и-т или ц-и-т. Вот была такая скобка. Значит мы преобразуем ее вот в
[48:10.440 --> 48:28.120]  такую вот пару. Значит смотрите, а-и-т или б-и-т или, скажем, х-и-т и не х-и-т или ц-и-т или з-т.
[48:28.120 --> 48:43.880]  Где z не и-т. Значит х-и-т свое для каждой скобки, а z одно и то же для всех. Значит х-и-т свое, то есть
[48:43.880 --> 49:01.240]  своя переменная для каждого и, значит а-z общее для всех. Так, ну вот утверждается, что это вся
[49:01.240 --> 49:15.240]  конструкция, надо только понять, почему она работает. Н плюс одна переменная, число скобок
[49:15.240 --> 49:21.380]  удваивается. Это все означает, что сводимость полинамиальная, у нас нет какого-то там огромного
[49:21.380 --> 49:32.980]  роста. Так, а, кстати, тут надо скорее M написать, чтобы совпадало с предыдущим. У нас же было
[49:32.980 --> 49:34.580]  N переменных до I-M скобок.
[50:02.980 --> 50:12.820]  Ну, смотрите, тут на самом деле нужно некоторый перебор сделать. Небольшой. Давайте, вот я
[50:12.820 --> 50:23.220]  прямо это перепишу. Значит а-и-т или б-и-т или ц-и-т. Здесь дальше а-и-т или б-и-т или х-и-т.
[50:23.220 --> 50:43.340]  Значит и тут не х-и-т или ц-и-т или z. Так, хорошо, значит дальше тут будут варианты,
[50:43.340 --> 51:06.780]  7 вариантов. 0-0-1, 0-1-0, 0-1-1, значит 1-0-0, 1-0-1, значит 1-1-0, 1-1-1. Значит 7 вариантов. Так,
[51:06.780 --> 51:17.940]  ну тут соответственно будет 0-0, 0-1, а, давайте прям сюда поделять, значит 0-0-1, так тут 0-1-0,
[51:17.940 --> 51:35.540]  значит 0-1-1, значит 1-0-0, 1-0-1, значит 1-1-0, 4 и 1-1-1. Так, ну смотрите, я утверждаю,
[51:35.540 --> 51:47.420]  что можно дополнить такие значения х-и-т и z, значит что всюду будут хотя бы 1-0. Так,
[51:47.420 --> 51:54.020]  ну смотрите, на самом деле вот тут где 0-1-0-1, 1-0-1-0, тут вообще совершенно неважно,
[51:54.020 --> 52:01.220]  какой будет х-и-т, уже условие в левой скобке выполнено. Вот, значит можно за счет х-и-т выполнить
[52:01.220 --> 52:10.660]  условие в правой скобке, то есть тут взять 1, тут 0, тут 0, тут 1, значит тут 1, тут 0, значит тут 0,
[52:10.660 --> 52:19.300]  тут 1. Вот, даже неважно, какой z, в этих четырех случаях уже все выполнено. Так, вот в этих случаях
[52:19.300 --> 52:27.180]  х-и-ты однозначно указывается, она должна быть не таким, как вот эти два. Соответственно тут 1,
[52:27.180 --> 52:40.020]  тут 0, значит тут 0, тут 1, тут 0, тут 1. Так, и значит в правой части видно, что в шести случаях уже
[52:40.020 --> 52:49.180]  выполнено условие, и только в последнем, значит только в последнем еще нужно z. И тут видно,
[52:49.180 --> 52:54.340]  почему z можно одним и тем же, потому что нужно взять 0, чтобы в последней строчке было выполнено,
[52:54.340 --> 53:08.900]  ну а соответственно во всех случаях она тоже 0 получается. Почему это важно? Потому что в какой-то
[53:08.900 --> 53:16.180]  другой скобке она могла быть нулем, но мы ее всюду делали нулем. Значит, смотрите, это в одну сторону,
[53:16.180 --> 53:24.820]  это в одну сторону, что если в исходной форме все вот эти вот содержали хотя бы одну единицу,
[53:24.820 --> 53:34.500]  то в новой каждой скобке будет содержать хотя бы одну единицу, хотя бы 1,0. Так, теперь в другую
[53:34.500 --> 53:47.620]  сторону. Смотрите, если это самое общее z равно нулю, то тогда понятно, что abc не мог быть нулями,
[53:47.620 --> 53:57.260]  одновременно, потому что тут будет 2 нуля, тут будет 2 нуля, а эти противоположные, и хотя бы в одной
[53:57.260 --> 54:09.780]  штуке будет 3 нуля. То есть, если набор, это уже в обратную сторону, если у нас есть наe набор
[54:09.780 --> 54:27.740]  с z равно нулю, то тогда, значит, не может быть, что ait равно bit равно cit равно нулю. Ну и, значит,
[54:27.740 --> 54:37.220]  та дезинкция была выполнима. Понятно почему, да? Потому что как раз будет по 2 нуля в каждой,
[54:37.220 --> 54:42.580]  и эти противоположные, значит, где-то должно быть 3 нуля, будет противоречие. Но вопрос, а что будет,
[54:42.580 --> 54:53.820]  если есть наe набор с z равно 1? Тогда это все уже не будет работать, но есть некоторый трюк. Значит,
[54:53.820 --> 55:05.500]  если есть наe набор с z равно 1, то тогда возьмем как бы его полное отрицание, то есть перевернем
[55:05.500 --> 55:23.540]  значение каждой переменной. Возьмем противоположное значение всех переменных. И смотрите,
[55:23.540 --> 55:30.180]  что происходит. Значит, у нас все переменные перевернулись, но если в каждой скобке были
[55:30.180 --> 55:38.140]  1 и 0, то после переворота тоже в каждой скобке будут 1 и 0. То есть отрицание наe набор это тоже
[55:38.140 --> 55:46.820]  наe набор. Ну и тогда мы свели этот вариант к предыдущему. То есть если есть набор с z
[55:46.820 --> 55:58.020]  равно 1, то его отрицание будет набором с z равно 0. Подождите, у нас, смотрите, наe набор, значит,
[55:58.020 --> 56:09.660]  не все одинаковые. Значит, есть и 0, и 1. И тогда среди отрицаний тоже есть и 0, и 1. Ну вот,
[56:09.660 --> 56:20.580]  значит, эта сводимость работает. Действительно, в обе стороны. Так, ну ладно, теперь вторая
[56:20.580 --> 56:40.060]  сводимость, что наe3sad сводится к три-раскраске. Довольно простая конструкция. Есть конструкция
[56:40.060 --> 56:50.860]  для 3sad к три-раскраске, она посложнее. Вот, а вот эта конструкция довольно простая. Значит, смотрите,
[56:50.860 --> 57:11.660]  наe3sad к три-раскраске. Ну первая идея такая, что, смотрите, раскраски, они как бы не появляются
[57:11.660 --> 57:17.500]  поодиночке. Что если у вас есть одна раскраска, то можно взять любую перестановку цветов и
[57:17.500 --> 57:34.180]  перекрасить соответствующим образом тоже будет правильная раскраска. Поэтому для конкретной вершины
[57:34.180 --> 57:40.340]  можно считать, что у задника конкретный цвет. Если там какой-то другой, то мы перекрасим так, чтобы у этой
[57:40.340 --> 57:54.060]  вершины был конкретный цвет. Так, значит, тогда мы будем считать, что есть три цвета, значит,
[57:54.060 --> 58:11.100]  истинный, ложный и служебный. Так, теперь, но у нас будет, дайте себе тоже, например,
[58:11.100 --> 58:17.740]  какой-нибудь формулы. Ну давайте той же самой, которая у нас была, ну или, не знаю, может, не так перепишу.
[58:17.740 --> 58:26.780]  Значит, в общем, точно так же с тремя скобками, с тремя переменными. Значит, там, по-моему, так было,
[58:26.780 --> 58:42.460]  значит, P или не Q или R и не Q или не R или не S и, значит, не P или Q или S. Так.
