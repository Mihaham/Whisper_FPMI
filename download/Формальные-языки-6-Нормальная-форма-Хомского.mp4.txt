[00:00.000 --> 00:05.000]  Редактор субтитров А.Синецкая Корректор А.Кулакова
[00:30.000 --> 00:33.000]  Корректор А.Кулакова
[01:00.000 --> 01:03.000]  Корректор А.Кулакова
[01:30.000 --> 01:33.000]  Корректор А.Кулакова
[02:00.000 --> 02:03.000]  Корректор А.Кулакова
[02:30.000 --> 02:33.000]  Корректор А.Кулакова
[03:00.000 --> 03:03.000]  Корректор А.Кулакова
[03:30.000 --> 03:33.000]  Корректор А.Кулакова
[04:00.000 --> 04:03.000]  Корректор А.Кулакова
[04:30.000 --> 04:33.000]  Корректор А.Кулакова
[05:00.000 --> 05:03.000]  Корректор А.Кулакова
[05:30.000 --> 05:33.000]  Корректор А.Кулакова
[06:00.000 --> 06:03.000]  Корректор А.Кулакова
[06:30.000 --> 06:33.000]  Корректор А.Кулакова
[06:42.000 --> 06:45.000]  Корректор А.Кулакова
[07:00.000 --> 07:03.000]  Корректор А.Кулакова
[07:30.000 --> 07:33.000]  Корректор А.Кулакова
[08:00.000 --> 08:03.000]  Корректор А.Кулакова
[08:30.000 --> 08:33.000]  Корректор А.Кулакова
[09:00.000 --> 09:03.000]  Корректор А.Кулакова
[09:30.000 --> 09:33.000]  Корректор А.Кулакова
[10:00.000 --> 10:03.000]  Корректор А.Кулакова
[10:30.000 --> 10:33.000]  Корректор А.Кулакова
[11:00.000 --> 11:03.000]  Корректор А.Кулакова
[11:30.000 --> 11:33.000]  Корректор А.Кулакова
[12:00.000 --> 12:03.000]  Корректор А.Кулакова
[12:30.000 --> 12:33.000]  Корректор А.Кулакова
[13:00.000 --> 13:03.000]  Корректор А.Кулакова
[13:30.000 --> 13:33.000]  Корректор А.Кулакова
[14:00.000 --> 14:03.000]  Корректор А.Кулакова
[14:30.000 --> 14:33.000]  Корректор А.Кулакова
[15:00.000 --> 15:03.000]  Корректор А.Кулакова
[15:30.000 --> 15:33.000]  Корректор А.Кулакова
[16:00.000 --> 16:03.000]  Корректор А.Кулакова
[16:30.000 --> 16:33.000]  Корректор А.Кулакова
[17:00.000 --> 17:03.000]  Корректор А.Кулакова
[17:03.000 --> 17:06.000]  Корректор А.Кулакова
[17:06.000 --> 17:09.000]  Корректор А.Кулакова
[17:09.000 --> 17:12.000]  Корректор А.Кулакова
[17:12.000 --> 17:15.000]  Корректор А.Кулакова
[17:15.000 --> 17:18.000]  Корректор А.Кулакова
[17:18.000 --> 17:21.000]  Корректор А.Кулакова
[17:21.000 --> 17:24.000]  Корректор А.Кулакова
[17:24.000 --> 17:27.000]  Корректор А.Кулакова
[17:27.000 --> 17:30.000]  Корректор А.Кулакова
[17:30.000 --> 17:33.000]  Корректор А.Кулакова
[17:33.000 --> 17:36.000]  Корректор А.Кулакова
[17:36.000 --> 17:39.000]  Корректор А.Кулакова
[17:39.000 --> 17:42.000]  Корректор А.Кулакова
[17:42.000 --> 17:45.000]  Корректор А.Кулакова
[17:45.000 --> 17:48.000]  Корректор А.Кулакова
[17:48.000 --> 17:51.000]  Корректор А.Кулакова
[17:51.000 --> 17:54.000]  Корректор А.Кулакова
[17:54.000 --> 17:57.000]  Корректор А.Кулакова
[17:57.000 --> 18:00.000]  Корректор А.Кулакова
[18:00.000 --> 18:03.000]  Корректор А.Кулакова
[18:03.000 --> 18:06.000]  Корректор А.Кулакова
[18:06.000 --> 18:09.000]  Корректор А.Кулакова
[18:09.000 --> 18:12.000]  Корректор А.Кулакова
[18:12.000 --> 18:15.000]  Корректор А.Кулакова
[18:15.000 --> 18:18.000]  Корректор А.Кулакова
[18:42.000 --> 18:45.000]  Корректор А.Кулакова
[19:12.000 --> 19:15.000]  Корректор А.Кулакова
[19:15.000 --> 19:18.000]  Корректор А.Кулакова
[19:18.000 --> 19:21.000]  Корректор А.Кулакова
[19:21.000 --> 19:24.000]  Корректор А.Кулакова
[19:24.000 --> 19:27.000]  Корректор А.Кулакова
[19:27.000 --> 19:30.000]  Корректор А.Кулакова
[19:30.000 --> 19:33.000]  Корректор А.Кулакова
[19:33.000 --> 19:36.000]  Корректор А.Кулакова
[19:36.000 --> 19:39.000]  Корректор А.Кулакова
[19:39.000 --> 19:42.000]  Корректор А.Кулакова
[19:42.000 --> 19:45.000]  Корректор А.Кулакова
[19:45.000 --> 19:48.000]  Корректор А.Кулакова
[19:48.000 --> 19:51.000]  Корректор А.Кулакова
[19:51.000 --> 19:54.000]  Корректор А.Кулакова
[19:54.000 --> 19:57.000]  Корректор А.Кулакова
[19:57.000 --> 20:00.000]  Корректор А.Кулакова
[20:00.000 --> 20:03.000]  Корректор А.Кулакова
[20:03.000 --> 20:06.000]  Корректор А.Кулакова
[20:06.000 --> 20:18.600]  Понимаете, почему?
[20:18.600 --> 20:25.880]  Ну да, из нём-то равно что-то.
[20:25.880 --> 20:30.000]  Вы просто, знаете, представьте себе ёлку, на которую вы
[20:30.000 --> 20:33.680]  хотите гирляндами обвесить, ой, это, гирляндами, игрушками
[20:33.680 --> 20:34.680]  обвесить, да?
[20:35.120 --> 20:37.920]  Ну, по сути, ваша цель – нарядить ёлку в конце концов.
[20:37.920 --> 20:41.240]  Как вы вешаете гирлянды и это вообще не играет роли.
[20:41.240 --> 20:44.400]  То есть вы могли сначала, я не знаю, шарики туда положить,
[20:44.400 --> 20:46.040]  потом гирлянды повесить.
[20:46.040 --> 20:49.640]  Либо наоборот, сначала гирлянды повесить, потом шарики положить.
[20:49.640 --> 20:56.160]  Ну, тут, к сожалению, а может, к счастью, ничего не меняется.
[20:56.160 --> 21:00.440]  Ну вот, давайте теперь воспользуемся этой идеей и что скажем?
[21:00.480 --> 21:12.840]  Во-первых, если у нас v принадлежит lg2, то что это значит?
[21:12.840 --> 21:18.120]  То когда-то мы, если мы прошлись по длинному правилу, давайте
[21:18.120 --> 21:21.200]  я на примере, я на каком-то вот таком примере сделаю.
[21:21.200 --> 21:32.640]  Вот, у нас это за один переход было осуществлено.
[21:32.640 --> 21:35.000]  Ну тогда что мы с вами можем сделать?
[21:35.000 --> 21:43.280]  И, допустим, дальше мы выводили какое-то слово w.
[21:43.280 --> 21:48.120]  Точнее, давайте формально.
[21:49.120 --> 21:57.080]  D, w, B, C, w, E, F.
[21:59.560 --> 22:02.000]  То каким образом мы его еще могли вывести?
[22:05.520 --> 22:08.880]  Ну да, ну могли бы, это у нас, если что, в g2.
[22:08.880 --> 22:12.120]  Тогда аналогичная картинка в g3 выглядела бы вот так.
[22:12.800 --> 22:19.480]  Мы из A за один шаг вывели бы D, B, C, E, F.
[22:19.480 --> 22:23.480]  Потом бы раскрыли эти D, C, F.
[22:32.360 --> 22:34.160]  И потом бы вывели то же самое слово.
[22:34.160 --> 22:42.840]  Ну тут можно это к какой-нибудь индукции по длине дерева вывода сделать.
[22:42.840 --> 22:49.760]  Да, на самом деле в обратную сторону тоже доказательства аналогичны.
[22:49.760 --> 22:55.640]  Мы просто говорим, что давайте мы будем сразу раскрывать не терминалы,
[22:55.640 --> 22:57.440]  которые будут выводить в одну букву.
[22:57.440 --> 23:01.440]  То есть в порядке bfs раскрывать.
[23:01.440 --> 23:08.480]  То есть это у нас, это факт такой.
[23:08.480 --> 23:20.160]  А если мы говорим w, я напишу, что это аналогично, только раскрываем в порядке bfs.
[23:20.160 --> 23:43.600]  В первую очередь D, W, D и подобное.
[23:43.600 --> 23:49.720]  Понятно, что произошло?
[23:49.720 --> 23:52.720]  Нормально?
[23:52.720 --> 23:56.200]  А то мы все загрустили так уже.
[23:56.200 --> 24:02.840]  Итак, у нас теперь ушли смешанные правила.
[24:02.840 --> 24:07.480]  У нас теперь есть длинные правила, вот такие вот.
[24:07.480 --> 24:09.600]  Давайте это.
[24:09.600 --> 24:12.120]  Что мы сделаем?
[24:12.120 --> 24:13.600]  Мы сделаем вот такую замену.
[24:13.600 --> 24:18.520]  То есть разобьем последовательность многих символов на последовательность из двух символов.
[24:19.040 --> 24:21.560]  Давайте сейчас мы это добьем и на перыбчик свалим.
[24:36.960 --> 24:38.600]  Итак, у нас с вами что?
[24:38.600 --> 24:54.920]  Ан, мы заменяем на, из b выводят b1, a1.
[24:54.920 --> 24:59.520]  Так, я кажется баг запустил.
[24:59.520 --> 25:01.400]  Да, да, да.
[25:08.600 --> 25:12.200]  Надо буквы не стоим поменять.
[25:12.200 --> 25:21.880]  Так, до какого там добем минус первого.
[25:21.880 --> 25:38.400]  Ну, теперь давайте покажем, что это все верно.
[25:38.440 --> 25:42.720]  Опять же, for-fact тот же самый, это у нас пусть g4 громочка будет.
[25:42.720 --> 25:51.920]  Ну, если у нас v принадлежит l от g3, да, тогда если у нас из s выявилось какое-то
[25:51.920 --> 26:04.400]  правило b, из него за один переход был an, и потом выводилось v, то какая последовательность
[26:04.400 --> 26:21.400]  у нас здесь будет, в g4, так, тут я контекст забыл, да, пусть у нас p и p тут, что мы
[26:21.400 --> 26:30.480]  должны сделать?
[26:30.480 --> 26:32.400]  Мы хотим дерево вывода в g4 построить.
[26:34.400 --> 26:57.600]  Ну, надо b заменять, phi, b1, psi, потом один раз заменяем phi, дальше у нас будет
[26:57.600 --> 27:12.320]  phi.
[27:12.320 --> 27:24.400]  Ну и дальше из этого мы можем вывести то же самое слово w, это в одну сторону, а
[27:24.400 --> 27:31.760]  в обратную сторону.
[27:31.760 --> 27:38.160]  Что мы сделаем?
[27:38.160 --> 27:49.200]  Ну, допустим, у нас из s выводился w.
[27:50.200 --> 27:53.360]  Какие два случая у нас могут быть?
[27:53.360 --> 28:08.960]  Да, значит, смотрите, первая история какая, давайте b и t не встречаются, тогда что
[28:08.960 --> 28:11.960]  мы делаем?
[28:12.720 --> 28:23.800]  Ну, да, все то же самое, второе случая, b и t встречается, встречается какое-то
[28:23.800 --> 28:40.160]  bk и t, тогда что происходит, если у нас bk и t встречается?
[28:40.360 --> 28:50.360]  Тогда у нас bk и t встретиться могло, так, это значит, что у нас в дереве вывода
[28:50.360 --> 28:57.360]  встречается bk и t, его мы каким-то макаром должны были получить, ну а каким макаром
[28:57.360 --> 28:58.360]  мы его можем получить?
[28:58.360 --> 29:06.360]  Только через bk минус 1, а что из него выводится, из него выводится bk плюс 1, ну либо конец
[29:06.560 --> 29:18.560]  могло, ну и тогда мы понимаем, что тогда сразу встречается b, b1 и так далее bn, bn
[29:18.560 --> 29:21.560]  минус 1.
[29:21.560 --> 29:31.560]  Ну, а дальше делаем в обратную сторону, здесь тот переход, который у нас уже был.
[29:36.560 --> 29:41.560]  То есть, вот это вот действие мы, повторяем, протидаем вот сюда.
[29:59.560 --> 30:01.560]  Угу, понятно?
[30:06.560 --> 30:08.560]  Ну, хорошо, давайте перерыв тогда сделаем.
[30:27.560 --> 30:33.560]  Значит, у нас остались только такие правила, кого следующим убивать будем?
[30:33.760 --> 30:40.760]  Правила из A выходят эпсилон, но тут немножко более нетривиальное свойство, которое нам
[30:40.760 --> 30:43.760]  нужно проявить, нам нужно убить все эпсилон порождающие символы.
[30:43.760 --> 30:49.760]  Смотрите, давайте определение дадим, символ E называется эпсилон порождающим,
[30:49.760 --> 30:51.760]  если из E выводится эпсилон.
[30:58.760 --> 31:00.760]  Давайте я напишу где-нибудь.
[31:00.960 --> 31:02.960]  Где у нас цепочки?
[31:05.960 --> 31:07.960]  Вот тут кажется.
[31:12.960 --> 31:17.960]  Какое правило у нас пойдет под откос?
[31:30.960 --> 31:32.960]  Если из E выводится E.
[31:37.960 --> 31:39.960]  Угу.
[31:40.960 --> 31:46.960]  Как искать эпсилон порождающую, это та еще история, но давайте теперь подумаем,
[31:46.960 --> 31:48.960]  что мы будем делать.
[31:48.960 --> 31:50.960]  Мы будем делать такую замену.
[31:50.960 --> 31:55.960]  А первое, что мы будем дербанить правила из A вследует BC.
[31:56.160 --> 32:05.160]  То есть, если у нас из A вследует BC и C эпсилон порождающую, то мы добавляем правила из A вследует B.
[32:08.160 --> 32:17.160]  А если есть правила из A вследует BC, из B выводит E, добавляем правила A вследует C.
[32:17.160 --> 32:19.160]  Контрольный вопрос, который я хочу задать.
[32:19.360 --> 32:24.360]  А если у нас символы в одном правиле, символы B и C эпсилон порождающие, то сколько правил мы добавим?
[32:42.360 --> 32:44.360]  Ну мы добавим два правила с вами.
[32:44.560 --> 32:52.560]  Ну то есть, если у нас из A вследует BC и B и C эпсилон порождающие, то у нас добавится как правила как A вследует B, так и A вследует C.
[32:53.560 --> 32:56.560]  И удалим все правила из A вследует E.
[33:02.560 --> 33:04.560]  Вот.
[33:05.560 --> 33:09.560]  Утверждение, которое мы с вами сейчас... это у нас будет уже с вами грамматика G5.
[33:09.760 --> 33:15.760]  И нам надо будет показать с вами, что L от G4 равно L от G5.
[33:19.760 --> 33:21.760]  Не, не, мы не заменяем.
[33:26.760 --> 33:30.760]  Не-не-не, у нас пока есть еще и одиночные правила, ну потом это одиночные будем избавляться.
[33:32.760 --> 33:36.760]  Так, ну что, давайте попытаемся доказать.
[33:39.760 --> 33:44.760]  Эту всю вещь, то есть у нас добавляются правила и убираются одиночные правила.
[33:46.760 --> 33:48.760]  Ага, получаем грамматику G5.
[33:49.760 --> 33:54.760]  Итак, тут такое неформальное доказательство.
[33:54.960 --> 33:57.960]  Смотрите, если вы принадлежите 4,
[34:06.960 --> 34:11.960]  4, то выделим под деревья максимальной мощности, из которых выводится эпсилон.
[34:12.960 --> 34:16.960]  Я сейчас нарисую картинку, то есть у вас есть, допустим, из S,
[34:17.960 --> 34:21.960]  там вы... может на новой доске нарисовать, на большой?
[34:22.160 --> 34:25.160]  Мне кажется, картинку нужно на большой доске рисовать.
[34:29.160 --> 34:33.160]  Ну нет, это по сути, у нас есть не терминал какой-то, да,
[34:33.160 --> 34:36.160]  из него что-то подвыводится, это вот по сути все под дерево.
[34:40.160 --> 34:45.160]  Не-не-не, мы берем слово, мы берем дерево вывода для слова W.
[34:47.160 --> 34:49.160]  Вот смотрите, сейчас я покажу.
[34:49.360 --> 34:51.360]  Вот у нас есть с вами S,
[34:53.360 --> 34:55.360]  есть с вами W, вот оно в конце где-то.
[34:58.360 --> 35:01.360]  И мы смотрим на вот такое большое дерево вывода.
[35:01.360 --> 35:03.360]  Это вот, это считайте, елка вот у нас такая.
[35:06.360 --> 35:09.360]  И, допустим, у нас находится здесь какой-то не терминал A,
[35:14.360 --> 35:17.360]  и из него могло вывестись какое-то под слово.
[35:17.560 --> 35:19.560]  Вот эта вот штучка, это под дерево.
[35:25.560 --> 35:26.560]  Ага, понятно?
[35:30.560 --> 35:34.560]  Давайте рассмотрим все под деревья максимальной мощности,
[35:34.560 --> 35:35.560]  которые выводит Эпсилон.
[35:35.560 --> 35:37.560]  Допустим, у нас из него B,
[35:38.560 --> 35:40.560]  и у него под деревом какое-то вот такое вот,
[35:40.560 --> 35:42.560]  и тут выводится пустое слово.
[35:47.560 --> 35:48.560]  Угу.
[35:51.560 --> 35:53.560]  Вопрос, который я хочу вам задать.
[35:54.560 --> 35:57.560]  Как мы получили в этой истории из W следует Эпсилон?
[36:01.560 --> 36:04.560]  Как мы получили не терминалы B в этом дереве?
[36:05.560 --> 36:07.560]  Могла ли быть у нас вот такая картинка,
[36:07.560 --> 36:09.560]  когда из C только выводилось B?
[36:12.560 --> 36:13.560]  Почему?
[36:17.560 --> 36:18.560]  Ну, мы это делаем.
[36:18.560 --> 36:21.560]  Мы смотрим в грамматике G4 дерево вывода.
[36:25.560 --> 36:26.560]  Да.
[36:27.560 --> 36:29.560]  Но давайте поймем, почему нельзя.
[36:29.560 --> 36:32.560]  Я пишу, что все деревья под деревья максимальной мощности,
[36:32.560 --> 36:34.560]  которые выводят слово Эпсилон.
[36:35.560 --> 36:38.560]  Вот смотрите, вот это дерево из B выводит Эпсилон.
[36:38.560 --> 36:40.560]  Оно теперь становится не максимальной мощностью,
[36:40.560 --> 36:42.560]  потому что мы можем подняться на одну вершинку вверх
[36:42.560 --> 36:45.560]  и получить более большое пространство.
[36:45.760 --> 36:47.760]  И с C выводит Эпсилон.
[36:51.760 --> 36:53.760]  Но B это не терминал какой-то,
[36:53.760 --> 36:55.760]  который появился в дереве вывода,
[36:55.760 --> 36:57.760]  и он был эксилонопорождающий.
[36:57.760 --> 37:01.760]  То есть из него вывелось в дереве разбору пустое слово.
[37:05.760 --> 37:08.760]  Мог ли быть родителем в дереве вывода,
[37:08.760 --> 37:11.760]  для того чтобы выводить это слово?
[37:11.960 --> 37:13.960]  Мог ли быть родителем в дереве вывода,
[37:13.960 --> 37:17.960]  для вершины B вершина C по правилу C следует B?
[37:19.960 --> 37:22.960]  То есть у нас из B выводится Эпсилон,
[37:22.960 --> 37:24.960]  а из C выводится B.
[37:26.960 --> 37:28.960]  Ответ нет, потому что тогда
[37:31.960 --> 37:33.960]  у нас из C выводился B-эпсилон.
[37:39.960 --> 37:40.960]  Понятно?
[37:41.960 --> 37:42.960]  Хорошо.
[37:42.960 --> 37:44.960]  Если такой картинки быть не может,
[37:44.960 --> 37:46.960]  тогда это.
[37:50.960 --> 37:53.960]  Тогда каким еще образом мог появиться не терминал B
[37:53.960 --> 37:55.960]  в этом дереве вывода?
[37:59.960 --> 38:01.960]  Осталось не так много вариантов.
[38:11.960 --> 38:13.960]  Вот смотрите, пусть у нас
[38:13.960 --> 38:16.960]  родитель вершины B это вершина C.
[38:24.960 --> 38:26.960]  Но что еще с ней могло быть?
[38:32.960 --> 38:36.960]  Какого вида правила у нас есть в G4?
[38:37.160 --> 38:40.160]  Да, смотрите, у нас могла быть такая картинка.
[38:40.160 --> 38:42.160]  C выводит BD,
[38:42.160 --> 38:44.160]  или C выводит Db.
[38:48.160 --> 38:51.160]  Ну и дальше тут вот крона у нас с вами.
[38:52.160 --> 38:53.160]  Пустое слово.
[38:55.160 --> 38:57.160]  Здесь крона, пустое слово.
[39:00.160 --> 39:01.160]  Угу.
[39:01.360 --> 39:03.360]  Тогда скажите, что нам надо сделать
[39:03.360 --> 39:06.360]  для того, чтобы получить LADG5?
[39:08.360 --> 39:10.360]  Какое дерево разбора в LADG5?
[39:10.360 --> 39:12.360]  Можем ли мы теперь его предоставить с вами?
[39:19.360 --> 39:20.360]  Хорошо.
[39:20.360 --> 39:21.360]  Пример.
[39:21.360 --> 39:22.360]  Вы в огороде когда-нибудь работали?
[39:23.360 --> 39:24.360]  В саду?
[39:25.360 --> 39:26.360]  Да.
[39:26.360 --> 39:27.360]  В саду.
[39:27.360 --> 39:28.360]  В саду.
[39:28.360 --> 39:29.360]  В саду.
[39:29.360 --> 39:30.360]  В саду.
[39:30.560 --> 39:31.560]  В саду.
[39:32.560 --> 39:33.560]  Что осеньи делают?
[39:36.560 --> 39:37.560]  С деревьями.
[39:39.560 --> 39:41.560]  Да, подрезают под деревью,
[39:41.560 --> 39:44.560]  чтобы дерево не пускало лишние ветки,
[39:44.560 --> 39:46.560]  а во-вторых, еще и обрабатывают.
[39:46.560 --> 39:48.560]  Но давайте сделаем то же самое.
[39:48.560 --> 39:50.560]  У нас же, по сути, говорится следующее,
[39:50.560 --> 39:54.560]  что если у нас в грамматике G4 есть вот такие вещи,
[39:54.560 --> 39:58.560]  то в грамматике G5 у нас есть обрубленные,
[39:58.760 --> 40:00.760]  подрезанные вот такие вот под деревья.
[40:00.760 --> 40:02.760]  Здесь есть такое,
[40:03.760 --> 40:06.760]  а здесь есть такое.
[40:07.760 --> 40:09.760]  Где у нас нету вот этого B?
[40:16.760 --> 40:17.760]  Вот.
[40:17.760 --> 40:19.760]  Ну вы, по сути, можете тут пенек оставить какой-то,
[40:19.760 --> 40:21.760]  засечку, что вот тут нет.
[40:28.760 --> 40:30.760]  Понятно, что произошло?
[40:34.760 --> 40:35.760]  Еще раз.
[40:35.760 --> 40:36.760]  Смотрите.
[40:36.760 --> 40:40.760]  Рассмотрим в B4 эти под деревья,
[40:40.760 --> 40:42.760]  которые не плодоносят.
[40:42.760 --> 40:45.760]  То есть, которые порождают эпсилум.
[40:45.760 --> 40:48.760]  Что мы хотим, когда мы обрабатываем яблони,
[40:48.760 --> 40:49.760]  которые цветет?
[40:49.760 --> 40:51.760]  Обрубить под корень те ветки,
[40:51.760 --> 40:53.760]  которые не плодоносят.
[40:54.760 --> 40:56.760]  Абстракция здесь ровно такая же.
[40:56.960 --> 40:58.960]  Мы хотим обрубить ветки, которые не плодоносят.
[40:58.960 --> 41:01.960]  А как понять, что ветка не плодоносят?
[41:01.960 --> 41:03.960]  То, что выше ее плодоносят.
[41:03.960 --> 41:05.960]  Если у нас есть правило,
[41:05.960 --> 41:07.960]  из C выводит B,
[41:07.960 --> 41:09.960]  то мы обрубаем не там,
[41:09.960 --> 41:11.960]  потому что можно обрубить выше,
[41:11.960 --> 41:13.960]  и дерево будет плодоносить,
[41:13.960 --> 41:15.960]  не будет плодоносить.
[41:17.960 --> 41:19.960]  Поэтому у нас случай такой,
[41:19.960 --> 41:21.960]  как ни терминал B,
[41:21.960 --> 41:23.960]  который порождает эпсилум,
[41:23.960 --> 41:25.960]  мог появиться.
[41:26.160 --> 41:28.160]  Либо в таком случае.
[41:29.160 --> 41:31.160]  А какие правила у нас есть?
[41:31.160 --> 41:33.160]  У нас есть правило,
[41:33.160 --> 41:35.160]  что если из C следует BD
[41:35.160 --> 41:37.160]  и B эпсилум порождающий,
[41:37.160 --> 41:39.160]  то у нас есть дополнительное правило
[41:39.160 --> 41:41.160]  в грамматике G5,
[41:41.160 --> 41:43.160]  которое говорит,
[41:43.160 --> 41:45.160]  что из C мы можем вывести D.
[41:45.160 --> 41:47.160]  Заменяем его,
[41:47.160 --> 41:49.160]  а по сути это эмуляция обрубленного
[41:49.160 --> 41:51.160]  куска дерева.
[41:53.160 --> 41:55.160]  Таким образом мы строим
[41:55.160 --> 41:57.160]  вывод в грамматике G5.
[42:03.160 --> 42:05.160]  Так, и G4 в G5.
[42:05.160 --> 42:07.160]  Понятен переход теперь?
[42:07.160 --> 42:09.160]  Через это,
[42:09.160 --> 42:11.160]  через стодоносческие эти
[42:13.160 --> 42:15.160]  абсорбации.
[42:15.160 --> 42:17.160]  Обратная ситуация,
[42:17.160 --> 42:19.160]  давайте протезы сделаем
[42:19.160 --> 42:21.160]  нашему дереву.
[42:21.160 --> 42:23.160]  Пусть V лежит в G5.
[42:25.160 --> 42:27.160]  Посмотрим все те места,
[42:27.160 --> 42:29.160]  которые обстригалось дерево.
[42:31.160 --> 42:33.160]  То есть представим себе,
[42:33.160 --> 42:35.160]  что V
[42:37.160 --> 42:39.160]  лежит в G5.
[42:39.160 --> 42:41.160]  Рассмотрим правила.
[42:47.160 --> 42:49.160]  Из C выводится D.
[42:51.160 --> 42:53.160]  В дереве S
[42:53.160 --> 42:55.160]  выводится V.
[42:55.160 --> 42:57.160]  При этом
[42:59.160 --> 43:01.160]  C
[43:01.160 --> 43:03.160]  не было в G4.
[43:09.160 --> 43:11.160]  Тогда что мы делаем?
[43:13.160 --> 43:15.160]  Да?
[43:15.160 --> 43:17.160]  Программируем.
[43:17.160 --> 43:19.160]  Программируем.
[43:19.160 --> 43:21.160]  Правило C
[43:21.160 --> 43:23.160]  следует D,
[43:23.160 --> 43:25.160]  не было в G4.
[43:27.160 --> 43:29.160]  Ну тогда какое у нас правило было с вами,
[43:29.160 --> 43:31.160]  если его не было в G4?
[43:33.160 --> 43:35.160]  Ну да, C выводится,
[43:35.160 --> 43:37.160]  скорее всего было правило C выводится
[43:37.160 --> 43:39.160]  BD.
[43:39.160 --> 43:41.160]  Или Db.
[43:43.160 --> 43:45.160]  А при этом B выводила
[43:45.160 --> 43:47.160]  ε. Ну давайте теперь
[43:47.160 --> 43:49.160]  подстроим как раз
[43:49.160 --> 43:51.160]  у нас было дерево
[43:51.160 --> 43:53.160]  и по сути мы с вами пристроим
[43:53.160 --> 43:55.160]  как порождалась
[43:55.160 --> 43:57.160]  ε, из этого не терминала B.
[44:03.160 --> 44:05.160]  Такое, протезир, это как называется?
[44:05.160 --> 44:07.160]  Искусственное отращивание.
[44:07.160 --> 44:09.160]  Мне бы оно не помешало,
[44:09.160 --> 44:11.160]  но я как бы это привык
[44:11.160 --> 44:13.160]  ходить лысым,
[44:13.160 --> 44:15.160]  поэтому мне норм.
[44:17.160 --> 44:19.160]  То есть видите, специально
[44:19.160 --> 44:21.160]  подрубки мы оставили здесь,
[44:21.160 --> 44:23.160]  в которых если что мы можем отрастить.
[44:25.160 --> 44:27.160]  Так, с этим разобрались?
[44:27.160 --> 44:29.160]  С этим переходом.
[44:31.160 --> 44:33.160]  Хорошо, прикол, я вас где-то обманул.
[44:33.160 --> 44:35.160]  Давайте поймем, где я вас обманул.
[44:53.160 --> 44:55.160]  Да, а что если
[44:55.160 --> 44:57.160]  из этого выводилась ε,
[44:57.160 --> 44:59.160]  тогда доказательства вот ровно в этом случае
[44:59.160 --> 45:01.160]  ломаются.
[45:01.160 --> 45:03.160]  Да, потому что мы сразу все дерево
[45:03.160 --> 45:05.160]  обрубаем.
[45:05.160 --> 45:07.160]  Под корень.
[45:07.160 --> 45:09.160]  Вот, то есть если у нас
[45:09.160 --> 45:11.160]  есть хотя бы один символ,
[45:11.160 --> 45:13.160]  то это работает.
[45:17.160 --> 45:19.160]  И мы его тоже убрали, поэтому нам нужно
[45:19.160 --> 45:21.160]  обработать, то есть смотрите, в чем прикол.
[45:23.160 --> 45:25.160]  Сразу сделайте себе
[45:25.160 --> 45:27.160]  пометку.
[45:27.160 --> 45:29.160]  lg5
[45:29.160 --> 45:31.160]  равно lg4
[45:31.160 --> 45:33.160]  без ε.
[45:37.160 --> 45:39.160]  Без пустого слова.
[45:41.160 --> 45:43.160]  Как его вернем?
[45:45.160 --> 45:47.160]  Да, с вводит ε, но смотрите, мы сделаем
[45:47.160 --> 45:49.160]  чуть-чуть другой лайфхак.
[45:51.160 --> 45:53.160]  Да, вот.
[45:53.160 --> 45:55.160]  В общем,
[45:55.160 --> 45:57.160]  sreps он в правилах выкинута, а дальше
[45:57.160 --> 45:59.160]  мы бы обрубали, но ничего не случилось.
[45:59.160 --> 46:01.160]  Поэтому, лечится
[46:01.160 --> 46:03.160]  так, смотрите, в заводе
[46:03.160 --> 46:05.160]  в новый не терминал s' делаем его стартовым.
[46:13.160 --> 46:15.160]  А, где стерка?
[46:23.160 --> 46:25.160]  То есть мы делаем s'.
[46:27.160 --> 46:29.160]  Добавляем правила, из s' следует s.
[46:33.160 --> 46:35.160]  Если s выводит ε,
[46:37.160 --> 46:39.160]  то добавляем
[46:41.160 --> 46:43.160]  из s' выводит ε.
[46:45.160 --> 46:47.160]  Да, то есть делаем новое
[46:47.160 --> 46:49.160]  стартовое состояние, новый стартовый не терминал.
[46:53.160 --> 46:55.160]  Получаем
[46:55.160 --> 46:57.160]  грамматику g6.
[46:57.160 --> 46:59.160]  Вопрос, какого зайца мы еще прибили по ходу дела?
[47:07.160 --> 47:09.160]  Идите и ищите
[47:09.160 --> 47:11.160]  в определении нормально Фармахомского.
[47:17.160 --> 47:19.160]  Там есть очень тонкий момент, который
[47:19.160 --> 47:21.160]  мы сейчас как раз прибили с вами.
[47:23.160 --> 47:25.160]  Ну и что?
[47:25.160 --> 47:27.160]  Ну мы теперь переобозначим грамматику.
[47:29.160 --> 47:31.160]  Да, второе, из a следует
[47:31.160 --> 47:33.160]  bc, смотрите.
[47:37.160 --> 47:39.160]  Что в скобках написано?
[47:43.160 --> 47:45.160]  Смотрите, что b и c не являются стартовыми.
[47:47.160 --> 47:49.160]  То есть мы с вами,
[47:49.160 --> 47:51.160]  когда вводим s',
[47:53.160 --> 47:55.160]  вот, вот видите,
[47:55.160 --> 47:57.160]  вводим s',
[47:57.160 --> 47:59.160]  и s' нигде в правой части не
[47:59.160 --> 48:01.160]  находится.
[48:01.160 --> 48:03.160]  Да?
[48:03.160 --> 48:05.160]  Ну все.
[48:05.160 --> 48:07.160]  Типа
[48:07.160 --> 48:09.160]  получаем
[48:09.160 --> 48:11.160]  такой вот переход.
[48:11.160 --> 48:13.160]  А хорошо, а теперь у нас остались
[48:13.160 --> 48:15.160]  так, остались правила такого
[48:15.160 --> 48:17.160]  вида.
[48:19.160 --> 48:21.160]  Что делать будем?
[48:23.160 --> 48:25.160]  А?
[48:27.160 --> 48:29.160]  Да, надо предпоследних избавляться.
[48:29.160 --> 48:31.160]  На самом деле
[48:31.160 --> 48:33.160]  я вам сейчас открою страшную
[48:33.160 --> 48:35.160]  тайну. Избавляться от них ровно так же,
[48:35.160 --> 48:37.160]  как от эпсилом переходов в автомате.
[48:39.160 --> 48:41.160]  Да, да, да.
[48:41.160 --> 48:43.160]  Мы будем искать путь
[48:43.160 --> 48:45.160]  замыкания по a и b, и потом
[48:45.160 --> 48:47.160]  встретим первый переход, который
[48:47.160 --> 48:49.160]  не идет в то же самое.
[48:49.160 --> 48:51.160]  Ну, транзитивное
[48:51.160 --> 48:53.160]  замыкание. То есть если у нас есть
[48:53.160 --> 48:55.160]  в последовательности b, следует b1, b2,
[48:55.160 --> 48:57.160]  и так далее bn, и так далее,
[48:57.160 --> 48:59.160]  переход cd и va, то мы их заменяем
[48:59.160 --> 49:01.160]  на такое правило.
[49:03.160 --> 49:05.160]  И после этого мы с вами можем удалить
[49:05.160 --> 49:07.160]  одиночные правила.
[49:15.160 --> 49:17.160]  Тут можно сказать,
[49:17.160 --> 49:19.160]  что любое правило вида
[49:19.160 --> 49:21.160]  cd, va можно рассматривать как цель
[49:21.160 --> 49:23.160]  из нуля и более одиночных переходов,
[49:23.160 --> 49:25.160]  а вы можете написать себе,
[49:25.160 --> 49:27.160]  что доказательство
[49:27.160 --> 49:29.160]  ровно аналогично тому, как удаляют
[49:29.160 --> 49:31.160]  эпсилом переходов в автомате.
[49:31.160 --> 49:33.160]  Там ничего
[49:33.160 --> 49:35.160]  с такого
[49:35.160 --> 49:37.160]  фундаментального не будет нового.
[49:39.160 --> 49:41.160]  А, это значит, что, смотри,
[49:41.160 --> 49:43.160]  у нас может быть такое, что
[49:43.160 --> 49:45.160]  из bn может быть
[49:45.160 --> 49:47.160]  правило вида cd,
[49:47.160 --> 49:49.160]  а из bn может быть правило va.
[49:49.160 --> 49:51.160]  Ну, соответственно, либо то, либо то, в зависимости
[49:51.160 --> 49:53.160]  от ситуации.
[50:07.160 --> 50:09.160]  Ну что, товарищ,
[50:09.160 --> 50:11.160]  мы победили с вами?
[50:11.160 --> 50:13.160]  Вроде бы.
[50:17.160 --> 50:19.160]  Да, ну тут спрашивается, почему
[50:19.160 --> 50:21.160]  новых слов не появилось,
[50:21.160 --> 50:23.160]  но опять же доказательство это будет аналогично
[50:23.160 --> 50:25.160]  тому, как мы удаляем одиночные переходы
[50:25.160 --> 50:27.160]  в автомат.
[50:27.160 --> 50:29.160]  Так, ну получилась у нас нормальная форма
[50:29.160 --> 50:31.160]  холмского, вроде бы.
[50:33.160 --> 50:35.160]  То есть у нас убилось последнее правило,
[50:35.160 --> 50:37.160]  из a следует bc, ну и все.
[50:39.160 --> 50:41.160]  Ура, мы с вами доказали
[50:41.160 --> 50:43.160]  переход
[50:43.160 --> 50:45.160]  приведение к
[50:45.160 --> 50:47.160]  нормальной форме холмского.
[50:47.160 --> 50:49.160]  Какие тонкие моменты у нас с вами остаются
[50:49.160 --> 50:51.160]  в этом алгоритме? Давайте я уточню.
[50:51.160 --> 50:53.160]  Нам нужно показать некоторые сложности
[50:53.160 --> 50:55.160]  алгоритмов.
[50:55.160 --> 50:57.160]  Как это именно реализовывать?
[50:59.160 --> 51:01.160]  Ну мы же практику тоже хотим понять.
[51:01.160 --> 51:03.160]  Вопрос, как искать
[51:03.160 --> 51:05.160]  непорождающие символы?
[51:11.160 --> 51:13.160]  Ну, dfs, да, нам нужно
[51:13.160 --> 51:15.160]  на самом деле найти все порождающие символы.
[51:15.160 --> 51:17.160]  Как найти все порождающие символы?
[51:17.160 --> 51:19.160]  Ну там такой аналог dfs.
[51:19.160 --> 51:21.160]  Я тут
[51:21.160 --> 51:23.160]  написал вкратце,
[51:23.160 --> 51:25.160]  значит смотрите, закидываем множество порождающих символов
[51:27.160 --> 51:29.160]  в множество тех порождающих символов,
[51:29.160 --> 51:31.160]  все терминалы, для которых есть сразу
[51:31.160 --> 51:33.160]  вывод, что справа идет конец слова.
[51:33.160 --> 51:35.160]  Сразу он выводит слово, значит он автоматом
[51:35.160 --> 51:37.160]  порождающий.
[51:37.160 --> 51:39.160]  А потом, по сути,
[51:39.160 --> 51:41.160]  для этой штуки нужно закидывать bfs,
[51:41.160 --> 51:43.160]  то есть вы берете все множество
[51:43.160 --> 51:45.160]  не терминалов,
[51:45.160 --> 51:47.160]  которые есть. Смотрите,
[51:47.160 --> 51:49.160]  из тех множеств не терминалов,
[51:49.160 --> 51:51.160]  которые у вас сейчас есть на текущий момент, пытайтесь
[51:51.160 --> 51:53.160]  собрать правую часть правила.
[51:53.160 --> 51:55.160]  Если у вас правая часть правила
[51:55.160 --> 51:57.160]  собирается целиком,
[51:57.160 --> 51:59.160]  это там комбинация.
[51:59.160 --> 52:01.160]  То есть,
[52:01.160 --> 52:03.160]  давайте я напишу.
[52:05.160 --> 52:07.160]  То есть, представим себе, что
[52:07.160 --> 52:09.160]  у нас есть правило из a,
[52:09.160 --> 52:11.160]  следует b, c, d,
[52:11.160 --> 52:13.160]  и в сети есть, допустим,
[52:15.160 --> 52:17.160]  b, c и d,
[52:17.160 --> 52:19.160]  ну тогда мы a можем тоже
[52:19.160 --> 52:21.160]  в это множество добавить.
[52:21.160 --> 52:23.160]  Да, просто надо
[52:23.160 --> 52:25.160]  этот bfs аккуратненько
[52:25.160 --> 52:27.160]  реализовать.
[52:29.160 --> 52:31.160]  Да?
[52:31.160 --> 52:33.160]  Я думаю, вы понимаете,
[52:33.160 --> 52:35.160]  как bfs писать.
[52:35.160 --> 52:37.160]  Или надо подробнее.
[52:39.160 --> 52:41.160]  Нет,
[52:41.160 --> 52:43.160]  если есть вопрос,
[52:43.160 --> 52:45.160]  задавайте.
[52:47.160 --> 52:49.160]  То есть, сначала закидываем
[52:49.160 --> 52:51.160]  все правила, в которых мы можем
[52:51.160 --> 52:53.160]  закинуть все не терминалы,
[52:53.160 --> 52:55.160]  то есть, которые сразу
[52:55.160 --> 52:57.160]  являются порождающими за один шаг,
[52:57.160 --> 52:59.160]  а потом мы собираем их
[52:59.160 --> 53:01.160]  в множество и понимаем,
[53:01.160 --> 53:03.160]  допустим, у нас сначала оказалось b в множестве,
[53:03.160 --> 53:05.160]  потом через несколько литераций оказалось c в множестве,
[53:05.160 --> 53:07.160]  потом через несколько литераций d оказалось в множестве,
[53:07.160 --> 53:09.160]  так как сыграет правило,
[53:09.160 --> 53:11.160]  из a следует bcd и это.
[53:13.160 --> 53:15.160]  И мы получаем a.
[53:15.160 --> 53:17.160]  Тогда a является порождающим.
[53:19.160 --> 53:21.160]  Так, давайте дальше.
[53:21.160 --> 53:23.160]  Удаление недостижимых символов.
[53:23.160 --> 53:25.160]  Каким алгоритмом можно сделать?
[53:25.160 --> 53:27.160]  Как найти все недостижимые символы?
[53:29.160 --> 53:31.160]  Dfs от стартовой вершины.
[53:31.160 --> 53:33.160]  Ну, bfs.
[53:33.160 --> 53:35.160]  Найдем все недостижимые символы.
[53:37.160 --> 53:39.160]  Ну, тут надо понять,
[53:39.160 --> 53:41.160]  насколько эта рация остановится.
[53:43.160 --> 53:45.160]  Ну, тут можно как раз, по сути,
[53:45.160 --> 53:47.160]  построить граф
[53:47.160 --> 53:49.160]  по не терминалам.
[53:51.160 --> 53:53.160]  По сути,
[53:53.160 --> 53:55.160]  если у вас из a есть правило bcd,
[53:55.160 --> 53:57.160]  то вы ребра
[53:57.160 --> 53:59.160]  так строите. Вы строите из a
[53:59.160 --> 54:01.160]  b,
[54:01.160 --> 54:03.160]  ребров c, ребров d.
[54:03.160 --> 54:05.160]  И смотрите, в какие вершины
[54:05.160 --> 54:07.160]  вы не попали в этом графе.
[54:07.160 --> 54:09.160]  Вам нужно найти компоненту слабой связности
[54:09.160 --> 54:11.160]  от стартового состояния.
[54:11.160 --> 54:13.160]  Так, все знают
[54:13.160 --> 54:15.160]  что такое компонент слабой связности?
[54:17.160 --> 54:19.160]  Да, да, да.
[54:19.160 --> 54:21.160]  Хорошо.
[54:21.160 --> 54:23.160]  Эпсилон порождающий, как искать?
[54:29.160 --> 54:31.160]  Ну, да.
[54:31.160 --> 54:33.160]  А у нас еще есть алгоритм нахождения порождающих символов.
[54:35.160 --> 54:37.160]  Да, давайте просто
[54:37.160 --> 54:39.160]  допустим тот же самый алгоритм,
[54:39.160 --> 54:41.160]  как нахождение порождающих символов,
[54:41.160 --> 54:43.160]  только учитываем, что это именно
[54:43.160 --> 54:45.160]  эпсилон порождающий символ.
[54:45.160 --> 54:47.160]  Да, ровно так же.
[54:49.160 --> 54:51.160]  Так, удаление
[54:51.160 --> 54:53.160]  одиночных правил
[54:53.160 --> 54:55.160]  это алгоритм транзитивного замыкания графа.
[54:55.160 --> 54:57.160]  Вот у него сложность вот такая вот.
[54:59.160 --> 55:01.160]  Количество не терминалов, то есть количество правил
[55:01.160 --> 55:03.160]  повножено на сумму количества длин
[55:03.160 --> 55:05.160]  лавовых частей.
[55:05.160 --> 55:07.160]  Это сложность алгоритма всего приведения к нормальной форме Хомского.
[55:09.160 --> 55:11.160]  Тут учитаны все асимпточки.
[55:13.160 --> 55:15.160]  Ну, потому что DFS они достаточно простые.
[55:17.160 --> 55:19.160]  Да, а вот перемножение как раз
[55:19.160 --> 55:21.160]  составляется на нахождение транзитивного замыкания.
[55:25.160 --> 55:27.160]  По-моему, я где-то тут квадрат забыл.
[55:29.160 --> 55:31.160]  Да, тут квадрат. Тут третья степень должна получиться.
[55:33.160 --> 55:35.160]  По-моему,
[55:37.160 --> 55:39.160]  надо посмотреть.
[55:39.160 --> 55:41.160]  По-моему,
[55:43.160 --> 55:45.160]  количество вершин на количество ребер
[55:45.160 --> 55:47.160]  количество ребер там
[55:51.160 --> 55:53.160]  скорее всего у левой скобки
[55:53.160 --> 55:55.160]  квадрат там стоит. То есть сложность алгоритма
[55:55.160 --> 55:57.160]  количество P
[55:57.160 --> 55:59.160]  плюс количество N в квадрате
[55:59.160 --> 56:01.160]  на количество всех переходов.
[56:01.160 --> 56:03.160]  Сумму длин всех правых частей правил.
[56:09.160 --> 56:11.160]  Кто хочет
[56:11.160 --> 56:13.160]  на практический поток, может потихонечку
[56:13.160 --> 56:15.160]  начать его реализовывать.
[56:17.160 --> 56:19.160]  Полез.
[56:19.160 --> 56:21.160]  Ну, смотрите, давайте под конец я сегодня разбавлю вас.
[56:23.160 --> 56:25.160]  Я хочу, сегодня мы успеем по крайней мере
[56:25.160 --> 56:27.160]  одного проявления рассказать про него.
[56:27.160 --> 56:29.160]  Первое, самое тупое проявление, которое
[56:29.160 --> 56:31.160]  в нем состоит, это, наконец-таки, мы можем построить
[56:31.160 --> 56:33.160]  с вами первый синтоксический парсер.
[56:33.160 --> 56:35.160]  То есть алгоритм,
[56:35.160 --> 56:37.160]  который по слову проверит
[56:37.160 --> 56:39.160]  принадлежность его грамматики или нет.
[56:41.160 --> 56:43.160]  Значит, смотрите, задача парсинга
[56:43.160 --> 56:45.160]  состоит в том, что
[56:45.160 --> 56:47.160]  по грамматике G
[56:47.160 --> 56:49.160]  и слову V нам нужно ответить на два вопроса.
[56:49.160 --> 56:51.160]  Первый вопрос, лежит ли слово
[56:51.160 --> 56:53.160]  в языке, задаваемой грамматикой?
[56:53.160 --> 56:55.160]  И второй, если ответ на предыдущий вопрос
[56:55.160 --> 56:57.160]  положительно, то построить дерево разбора
[56:57.160 --> 56:59.160]  дерева вывода для этой грамматики.
[57:03.160 --> 57:05.160]  А теперь тупая идея.
[57:05.160 --> 57:07.160]  Значит,
[57:07.160 --> 57:09.160]  давайте, может быть, порассуждаем
[57:11.160 --> 57:13.160]  доказательства.
[57:15.160 --> 57:17.160]  Смотрите, вот у нас есть
[57:17.160 --> 57:19.160]  правило,
[57:19.160 --> 57:21.160]  из A выводится BC.
[57:21.160 --> 57:23.160]  Да?
[57:25.160 --> 57:27.160]  Если мы, допустим, у нас
[57:27.160 --> 57:29.160]  есть A, и оно выводит
[57:29.160 --> 57:31.160]  какое-то под слово
[57:31.160 --> 57:33.160]  отвитого до житого символа,
[57:33.160 --> 57:35.160]  не включая.
[57:37.160 --> 57:39.160]  Тогда что мы можем с вами
[57:39.160 --> 57:41.160]  сделать?
[57:41.160 --> 57:43.160]  Как проверить, выводит ли символ A
[57:43.160 --> 57:45.160]  под слово
[57:45.160 --> 57:47.160]  отвитого символа до житого символа?
[57:47.160 --> 57:49.160]  В счет того, что у нас есть
[57:49.160 --> 57:51.160]  правило вида A, из A выводит BC.
[58:01.160 --> 58:03.160]  А?
[58:03.160 --> 58:05.160]  Перебрать среднюю границу, смотрите.
[58:05.160 --> 58:07.160]  Вон там слово отвитого до житого символа.
[58:11.160 --> 58:13.160]  Но смотрите, тогда нам нужно перебрать границу
[58:13.160 --> 58:15.160]  КТ, что
[58:15.160 --> 58:17.160]  вот это выводится из
[58:17.160 --> 58:19.160]  B,
[58:19.160 --> 58:21.160]  а вот это выводится из C.
[58:25.160 --> 58:27.160]  Как такой тип алгоритмов называется?
[58:31.160 --> 58:33.160]  А? Не-не-не,
[58:33.160 --> 58:35.160]  это жёстко.
[58:35.160 --> 58:37.160]  Нет.
[58:41.160 --> 58:43.160]  Аналог задачи, задача
[58:43.160 --> 58:45.160]  о количестве нахождения,
[58:45.160 --> 58:47.160]  о быстром перемножении матриц,
[58:47.160 --> 58:49.160]  которые у вас есть
[58:49.160 --> 58:51.160]  в последствии с матриц в ряд,
[58:51.160 --> 58:53.160]  вы хотите их быстро перемножить?
[58:53.160 --> 58:55.160]  А?
[58:55.160 --> 58:57.160]  Динамика.
[58:57.160 --> 58:59.160]  Динамика почему?
[58:59.160 --> 59:01.160]  Да, динамика по подотрезкам.
[59:01.160 --> 59:03.160]  То есть на самом деле
[59:03.160 --> 59:05.160]  нам нужно посчитать такую динамику.
[59:05.160 --> 59:07.160]  Из A
[59:07.160 --> 59:09.160]  следует под слово
[59:09.160 --> 59:11.160]  отвитого до житого.
[59:11.160 --> 59:13.160]  И будем хранить это в динамике.
[59:13.160 --> 59:15.160]  Будут ошеляться перебор в динамике.
[59:15.160 --> 59:17.160]  Но вы идёте по всем правилам грамматики,
[59:17.160 --> 59:19.160]  которые выводят из A в B,
[59:19.160 --> 59:21.160]  перебирайте все
[59:21.160 --> 59:23.160]  определители и проверяйте,
[59:23.160 --> 59:25.160]  выводится ли из B
[59:25.160 --> 59:27.160]  по словам
[59:27.160 --> 59:29.160]  ЖКТ,
[59:29.160 --> 59:31.160]  АСС,
[59:31.160 --> 59:33.160]  ой, и КТ.
[59:33.160 --> 59:35.160]  Выводится
[59:35.160 --> 59:37.160]  К
[59:37.160 --> 59:39.160]  ЖТ.
[59:43.160 --> 59:45.160]  Динамика
[59:45.160 --> 59:47.160]  по длине слова
[59:47.160 --> 59:49.160]  и динамике.
[59:49.160 --> 59:51.160]  Да, даже больше ещё.
[59:51.160 --> 59:53.160]  Вот,
[59:53.160 --> 59:55.160]  я тут слово написал,
[59:55.160 --> 59:57.160]  тут смотрите, динамика
[59:57.160 --> 59:59.160]  по длине слова,
[59:59.160 --> 01:00:01.160]  раз,
[01:00:01.160 --> 01:00:03.160]  одна буква на переход, думал как-нибудь заменить.
[01:00:03.160 --> 01:00:05.160]  Второе,
[01:00:05.160 --> 01:00:07.160]  перебирается старт,
[01:00:07.160 --> 01:00:09.160]  перебирается
[01:00:09.160 --> 01:00:11.160]  правила грамматики и перебирается
[01:00:11.160 --> 01:00:13.160]  средняя позиция. То есть, это не квадрата длины слова,
[01:00:13.160 --> 01:00:15.160]  это куба длины слова.
[01:00:17.160 --> 01:00:19.160]  То есть, грамматика
[01:00:19.160 --> 01:00:21.160]  имеет
[01:00:21.160 --> 01:00:23.160]  симптотику O длины слова в кубе
[01:00:23.160 --> 01:00:25.160]  умножить на, опять же,
[01:00:25.160 --> 01:00:27.160]  сумму правых частей правил.
[01:00:27.160 --> 01:00:29.160]  Ну, давайте скажем,
[01:00:29.160 --> 01:00:31.160]  что это просто количество правил
[01:00:31.160 --> 01:00:33.160]  в грамматике.
[01:00:33.160 --> 01:00:35.160]  Четвёртая степень, товарищи.
[01:00:35.160 --> 01:00:37.160]  Ну, тут давайте я пропущу,
[01:00:37.160 --> 01:00:39.160]  кто хочет может посмотреть,
[01:00:39.160 --> 01:00:41.160]  индукция по длине слова,
[01:00:41.160 --> 01:00:43.160]  я думаю, вы уже задолбались
[01:00:43.160 --> 01:00:45.160]  от меня слушать слово индукции.
[01:00:45.160 --> 01:00:47.160]  Вопрос, вы доказывали
[01:00:47.160 --> 01:00:49.160]  динамику по водорезкам,
[01:00:49.160 --> 01:00:51.160]  как работает?
[01:00:51.160 --> 01:00:53.160]  Хоть раз в жизни своей.
[01:00:53.160 --> 01:00:55.160]  Было такое?
[01:00:59.160 --> 01:01:01.160]  Мне нравится такой ответ.
[01:01:01.160 --> 01:01:03.160]  Ну, если что, я думаю, корректность алгоритм
[01:01:03.160 --> 01:01:05.160]  вы можете показать.
[01:01:09.160 --> 01:01:11.160]  Кратко объяснить.
[01:01:11.160 --> 01:01:13.160]  Ну, идём индукции по длине слова.
[01:01:13.160 --> 01:01:15.160]  Да, в одну сторону.
[01:01:15.160 --> 01:01:17.160]  Если у нас из A вводится BG,
[01:01:17.160 --> 01:01:19.160]  значит, у нас существует
[01:01:19.160 --> 01:01:21.160]  разбор за одно правило.
[01:01:21.160 --> 01:01:23.160]  Делаем индукционный переход,
[01:01:23.160 --> 01:01:25.160]  победили.
[01:01:25.160 --> 01:01:27.160]  По обратную сторону.
[01:01:27.160 --> 01:01:29.160]  А, тут тех поехал.
[01:01:29.160 --> 01:01:31.160]  A и G true,
[01:01:31.160 --> 01:01:33.160]  значит, для некоторого
[01:01:33.160 --> 01:01:35.160]  midposition у нас работал
[01:01:35.160 --> 01:01:37.160]  вот этот вот этот.
[01:01:37.160 --> 01:01:39.160]  14 строка обновления динамики.
[01:01:39.160 --> 01:01:41.160]  Тоже переписываем,
[01:01:41.160 --> 01:01:43.160]  получаем индукционный переход.
[01:01:43.160 --> 01:01:45.160]  Это вкратце.
[01:01:47.160 --> 01:01:49.160]  А симпточка от N в кубе на P.
[01:01:51.160 --> 01:01:53.160]  И что у нас получается
[01:01:53.160 --> 01:01:55.160]  от N в кубе на P?
[01:01:55.160 --> 01:01:57.160]  Ну, дофига, в общем.
[01:01:57.160 --> 01:01:59.160]  Долго.
[01:01:59.160 --> 01:02:01.160]  Мы ещё в курсе...
[01:02:01.160 --> 01:02:03.160]  А?
[01:02:03.160 --> 01:02:05.160]  А, да, да, да.
[01:02:05.160 --> 01:02:07.160]  Я ошибся.
[01:02:07.160 --> 01:02:09.160]  Сорри.
[01:02:09.160 --> 01:02:11.160]  О, длины слова в кубе на P.
[01:02:11.160 --> 01:02:13.160]  Спасибо за опечатку.
[01:02:13.160 --> 01:02:15.160]  Вот она, симпточка.
[01:02:15.160 --> 01:02:17.160]  Мы будем рассматривать
[01:02:17.160 --> 01:02:19.160]  более быстро алгоритмы
[01:02:19.160 --> 01:02:21.160]  и для большого класса языков,
[01:02:21.160 --> 01:02:23.160]  который используется также
[01:02:23.160 --> 01:02:25.160]  в компиляторах, а симпточку
[01:02:25.160 --> 01:02:27.160]  можно свести до...
[01:02:27.160 --> 01:02:29.160]  Не поверите.
[01:02:31.160 --> 01:02:33.160]  О, длины слова.
[01:02:35.160 --> 01:02:37.160]  Ну, это долгий тернистый путь.
[01:02:37.160 --> 01:02:39.160]  Вот.
[01:02:43.160 --> 01:02:45.160]  Так, товарищи, у меня тут есть
[01:02:45.160 --> 01:02:47.160]  ещё лемно-разрастание, но мне кажется,
[01:02:47.160 --> 01:02:49.160]  что нам, я думаю, что лучше сегодня
[01:02:49.160 --> 01:02:51.160]  чуть-чуть пораньше закончить
[01:02:51.160 --> 01:02:53.160]  и спрашивать некоторые вопросы.
[01:02:53.160 --> 01:02:55.160]  Но, смотрите,
[01:02:55.160 --> 01:02:57.160]  практическое применение лемно-разрастания
[01:02:57.160 --> 01:02:59.160]  это построение парсеров,
[01:02:59.160 --> 01:03:01.160]  а теоретическое применение это будет
[01:03:01.160 --> 01:03:03.160]  лемно-разрастание, с которым, я думаю,
[01:03:03.160 --> 01:03:05.160]  мы начнём как раз в следующий раз.
[01:03:05.160 --> 01:03:07.160]  Нашу пару.
[01:03:07.160 --> 01:03:09.160]  Вот она.
[01:03:11.160 --> 01:03:13.160]  Буковок чуть-чуть побольше появилось.
[01:03:15.160 --> 01:03:17.160]  Да, да, да.
[01:03:17.160 --> 01:03:19.160]  Ну, и идея, на самом деле,
[01:03:19.160 --> 01:03:21.160]  ровно та же. Давайте,
[01:03:21.160 --> 01:03:23.160]  раз уж пошло.
[01:03:23.160 --> 01:03:25.160]  Короче,
[01:03:25.160 --> 01:03:27.160]  нужно найти вот такую ерунду.
[01:03:29.160 --> 01:03:31.160]  Вот и всё.
[01:03:31.160 --> 01:03:33.160]  Находим такую ерунду,
[01:03:33.160 --> 01:03:35.160]  сами понимаем, что
[01:03:35.160 --> 01:03:37.160]  мы можем вот эту ерунду вставлять кучу раз
[01:03:37.160 --> 01:03:39.160]  и получать разрастание.
[01:03:39.160 --> 01:03:41.160]  Ну, формально мы это в следующий раз
[01:03:41.160 --> 01:03:43.160]  с вами покажем.
[01:03:43.160 --> 01:03:45.160]  Всё, на этом сегодня всё.
[01:03:45.160 --> 01:03:47.160]  Спасибо.
