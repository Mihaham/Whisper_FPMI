[00:00.000 --> 00:24.800]  Так вот, то есть у нас простая тема, казалось бы.
[00:24.800 --> 00:51.800]  Нет, BFS. Нет, DFS это посложнее, тема будет проще посмотреть. Ну, увидите. Ну, например, потому что в DFS есть деревья доминаторов, а в BFS есть... ну, хотя ладно, да, да, теория Смита в DFS есть на самом деле, да, да, да, да, да, да. И вот начинается 0.7, начинается сложность, да, да, да.
[00:51.800 --> 01:17.800]  Нет, ну, это все еще достаточно просто. Но здесь нужно сразу оговориться. Вообще говоря, мы в некотором смысле припадаем к истокам, на самом деле. Потому что когда у нас появляется просто такая абстракция как граф, ну, там, ориентированный, неориентированный, не особо важно, какая первая задача вообще возникает. Ну, естественно, одна из первых задач – найти корочеший путь.
[01:17.800 --> 01:46.800]  Ну, вот. Ну, естественно, там активная какая-то задача, то есть там где-то постоянно, то есть там во все времена вам нужно как-то дойти из точки A до точки B. Ну, и, собственно, хочется там ходить. Вы не можете просто там ходить по прямой, ну, потому что там, я не знаю, овраги там какие-то или там где-то еще домики какие-то стоят, сквозь них тоже ходить, к сожалению, нельзя, да. Вот, поэтому, собственно, приходится искать какие-то качественные пути. В общем-то, все достаточно естественно.
[01:47.800 --> 02:15.800]  Вот. Ну, и, казалось бы, начинается все с простого. Вот есть у нас, допустим, ориентированный граф. Как же, и, допустим, для разминочки не взвешенный. Вот мы и подразумеваем, что у нас есть вот какие-то дороги, по этим дорогам мы ходим, надо как-то пройти. Вот. Ну, как-нибудь вот так вот сделаем. Как же нам это сделать?
[02:17.800 --> 02:32.800]  Ну, если мы ищем кратчайшее расстояние от какой-то стартовой вершины, ну, обычно говорят до какой-то там вершины T, но мы будем, давайте, искать от одной вершины до всех остальных, то возникает, конечно, такая естественная идея.
[02:32.800 --> 02:59.800]  Так. Ну, до какой вершины у нас расстояние ноль? Ну, наверное, до себя любимой и больше никакой. Так, а до каких? Что? Нет. Мы в графе. Мы в графе. Абсолютно обычный невзвешенный граф. В нашем случае еще и конечный. Да. Как говорится, да, скукотище, конечно, жуткое, но что делать?
[02:59.800 --> 03:27.800]  Ну, хотя бы неравенство треугольника. Нет. Просто все весоребия равны единице. Невзвешенный даже. Да, я понимаю, что, видимо, совсем downgrade, но вот что делать? Да. Как бы начать надо с базы. Да. То есть так, что дай себе как-то. Вот. Вот. Да, вот даже несимметричные, даже там вот.
[03:29.800 --> 03:46.800]  Вот. Значит, то теперь есть у нас расстояние ноль до себя. Хорошо. А докуда расстояние один? Вот. Ну, наверное, до всех вершин, до которых можно дойти по одному ребру из нулевой вершины. Логично, да? Из старта.
[03:46.800 --> 04:03.800]  Так. А есть ли вершины до которых расстояние два? Ну, наверное, есть. Что это за вершины? Это все вершины, до которых можно за один шаг дойти из вершин, до которых расстояние один.
[04:03.800 --> 04:13.800]  До которых мы еще не дошли. Да. Важное точение. Спасибо. Потому что, да. Потому что заметим, что, в принципе, без этой оговорки можно было и там иногда и эту вершину иногда поставить.
[04:13.800 --> 04:26.800]  Если тут вот такое ребро поставить. И вот это. Да, конечно. Ой, нет, это я зря делаю. Вот. Да, вот у нас два. Так, что у нас дальше?
[04:26.800 --> 04:36.800]  Ну, если у нас из вершин с расстоянием два можно сделать еще шаг, внепщенный ранее вершины, то до всех этих вершин расстояние, наверное, три.
[04:36.800 --> 04:48.800]  Ну, в общем-то, и так далее, и так далее, и так далее. То есть, в общем-то, вот в данном случае получается вот такая штука. То есть, вот четыре, и вот до этой вершины расстояние пять.
[04:48.800 --> 05:01.800]  Ну, очевидно, мы, конечно, как бы разбить не весь граф можем так разбить на слои, а только те вершины, до которых мы и стартовые вершины вообще дойти можем.
[05:01.800 --> 05:13.800]  Вот. Ну, там скажем, потому что могут быть вот какие-то там еще независимые части. В ориентированном графе еще бывают вот когда из этих частей можно там прийти к нам, но нельзя вот прийти обратно, ну и так далее.
[05:14.800 --> 05:20.800]  Ну, там про всякие компоненты сильной связности мы, естественно, сейчас говорить не будем, но вот всякие такие случаи бывают.
[05:20.800 --> 05:25.800]  Ну, то до всех их у нас расстояние так и остается плюс бесконечность.
[05:25.800 --> 05:35.800]  Ну, просто потому что нет пути от стартовых вершин до них, поэтому длина этого минимального пути мы будем считать плюс бесконечность как минимум пустого множества.
[05:35.800 --> 05:42.800]  Вот. Так что вот, по идее, такой стандартный алгоритм у нас возникает.
[05:42.800 --> 05:58.800]  Ну, вот как вам сказать? Тут, конечно, тут тонкая неизвестная общепринятая разница, но я бы, конечно, назвал это скорее волновой алгоритм, на самом деле.
[05:58.800 --> 06:02.800]  Вот. Который будет у нас использоваться. Волновой алгоритм.
[06:02.800 --> 06:09.800]  Вот. И в принципе мы его даже кодируем немножко по-другому.
[06:09.800 --> 06:16.800]  То есть, да, то кто от БФС в Сочи, который вы привыкли, это даже не совсем базовый.
[06:16.800 --> 06:21.800]  Вот. То есть, потому что на самом деле более базовым оказывается вот такой волновой алгоритм.
[06:21.800 --> 06:26.800]  И выглядит он примерно к следующему.
[06:26.800 --> 06:28.800]  Так.
[06:32.800 --> 06:35.800]  Какие два стэка? Где два стэка?
[06:41.800 --> 06:44.800]  6 стэков, 8 стэков.
[06:45.800 --> 06:48.800]  Ну, да.
[06:51.800 --> 06:53.800]  Боже.
[06:53.800 --> 06:56.800]  Персистентный БФС.
[06:56.800 --> 07:02.800]  Так, очень. Вот. Так, у меня тут сохранились какие-то коды, поэтому я сейчас не буду.
[07:03.800 --> 07:06.800]  А что с ним делать?
[07:15.800 --> 07:21.800]  Ну, потому что, может, его надо доводкнуть.
[07:21.800 --> 07:23.800]  Так.
[07:23.800 --> 07:25.800]  Ну, разве что.
[07:25.800 --> 07:27.800]  Ну, вот.
[07:27.800 --> 07:29.800]  Знаете, смотрите.
[07:30.800 --> 07:34.800]  Да, может быть, легче было написать, конечно. Да, ну ладно.
[07:35.800 --> 07:38.800]  Ну, вот. Давайте, смотрите.
[07:39.800 --> 07:45.800]  То есть, в принципе, основа этого волнового алгоритма может выглядеть вот примерно таким образом.
[07:45.800 --> 07:47.800]  Если уж там совсем разбивать на процедура.
[07:47.800 --> 07:53.800]  То есть, суть будет заключаться в том, что эти слои находить в явном виде.
[07:54.800 --> 07:57.800]  Так, что там за шум?
[07:58.800 --> 08:00.800]  Вот.
[08:01.800 --> 08:05.800]  То есть, мы прям эти слои создаем в явном виде.
[08:05.800 --> 08:08.800]  Ну, конкретно, конечно, в классическом случае.
[08:08.800 --> 08:13.800]  То есть, в классическом, когда у нас никаких весов нет, то в каждом интервью мы берем последний слой.
[08:13.800 --> 08:16.800]  Вот я его даже по ссылочке в наглую беру.
[08:17.800 --> 08:23.800]  Вот. И, соответственно, создаю следующий слой.
[08:25.800 --> 08:27.800]  Вот. То есть, видите, да.
[08:27.800 --> 08:33.800]  Но, правда, естественно, мне приходится завести массив юзет, в котором я помечаю, какие вершины у меня в слои уже попали.
[08:34.800 --> 08:37.800]  Вот. Ну, конкретно, в данном случае будем так делать.
[08:37.800 --> 08:41.800]  То есть, вот получается такая, такой вот поиск слоев.
[08:42.800 --> 08:43.800]  Вот.
[08:43.800 --> 08:50.800]  Ну, и более того, конечно, по известным слоям, конечно, расстояние до вершин найти уже достаточно просто.
[08:51.800 --> 08:54.800]  Ну, просто пробегаемся по вектору векторов этих слоев.
[08:54.800 --> 08:58.800]  И, соответственно, если вершина попала в слой 57, значит, расстояние до нее 57.
[08:58.800 --> 09:00.800]  Тут, в общем-то.
[09:01.800 --> 09:04.800]  А ни в чем.
[09:04.800 --> 09:05.800]  Оно скорее теоретическое.
[09:05.800 --> 09:08.800]  Я не агитирую за то, что это лучше, чем реализация с очередью.
[09:08.800 --> 09:09.800]  Боже упаси.
[09:09.800 --> 09:11.800]  Ну, собственно, это, очевидно, не так.
[09:12.800 --> 09:13.800]  Вот.
[09:13.800 --> 09:19.800]  Но это просто такая, может быть, идейная база, на которой у нас, может быть, даже на которой у нас будут базироваться просто алгоритмы.
[09:19.800 --> 09:21.800]  Поэтому я начинаю с нее.
[09:23.800 --> 09:24.800]  Ну, из нее.
[09:24.800 --> 09:25.800]  То есть, в общем-то, вот из нее.
[09:25.800 --> 09:26.800]  То есть, на ней уже.
[09:26.800 --> 09:28.800]  То есть, основной BFS вот с очередью.
[09:28.800 --> 09:29.800]  Ну, вот он.
[09:29.800 --> 09:30.800]  Вот этот вот, который.
[09:30.800 --> 09:31.800]  Да.
[09:31.800 --> 09:32.800]  Знакомая.
[09:32.800 --> 09:33.800]  Классический код.
[09:34.800 --> 09:37.800]  То есть, он, конечно, он на самом деле вырастает из этого.
[09:38.800 --> 09:39.800]  Каким образом вырастает?
[09:40.800 --> 09:41.800]  Да, очень простым.
[09:42.800 --> 09:48.800]  Мы обнаружим, что, на самом деле, там, если наша задача только найти расстояние, но не найти слои.
[09:48.800 --> 09:53.800]  Ну, в принципе, заметим, что вектор слоев и вектор расстояния, они взаимозаменяемые.
[09:53.800 --> 09:54.800]  По одному можно найти другое.
[09:54.800 --> 09:55.800]  Наоборот.
[09:55.800 --> 09:58.800]  Поэтому, если мы не хотим искать слои, но хотим найти расстояние.
[09:59.800 --> 10:01.800]  То есть, можно попытаться оптимизировать процесс.
[10:02.800 --> 10:03.800]  Каким образом?
[10:04.800 --> 10:10.800]  Ну, первая оптимизация заключается в том, что мы могли бы не хранить вектор векторов, а могли бы хранить только два слоя.
[10:11.800 --> 10:13.800]  Типа, предыдущие и следующие.
[10:15.800 --> 10:16.800]  Вот, могли быть такое.
[10:16.800 --> 10:20.800]  Да, у нас как раз в задаче о рюкзаке там, собственно, такое уже встречалось.
[10:21.800 --> 10:22.800]  Вот.
[10:23.800 --> 10:24.800]  Далее.
[10:24.800 --> 10:25.800]  Далее.
[10:25.800 --> 10:26.800]  Чего?
[10:27.800 --> 10:28.800]  Ну, как вот.
[10:29.800 --> 10:30.800]  Я бы даже не говорил, что не было.
[10:31.800 --> 10:32.800]  Вот.
[10:32.800 --> 10:33.800]  Значит, к чему это нас приводит?
[10:34.800 --> 10:38.800]  То есть, первая идея, что давайте хранить только два вектора, а потом следующая идея.
[10:39.800 --> 10:44.800]  А потом следующая идея возникает, что давайте все вершины, вместо того, чтобы хранить их в этих двух векторах, хранить в очереди.
[10:45.800 --> 10:46.800]  Почему?
[10:46.800 --> 10:51.800]  Потому что заметим, что у нас эти слои обходятся по очереди.
[10:52.800 --> 10:57.800]  Ну, действительно, мы по-любому обрабатываем сначала вершины нулевого слоя, потом первого, потом второго и так далее.
[10:59.800 --> 11:09.800]  И оказывается, что, действительно, если мы будем просто вершины, каждую новую вершину класть в очередь, то оказывается, что в каждый момент времени будет, что у нас находиться.
[11:10.800 --> 11:12.800]  Но в данном случае все просто.
[11:13.800 --> 11:14.800]  В каждый момент времени будет находиться слой, который мы обрабатываем.
[11:15.800 --> 11:16.800]  Часть его.
[11:17.800 --> 11:18.800]  Вот, например, если брать такую реализацию.
[11:19.800 --> 11:20.800]  И следующий слой.
[11:21.800 --> 11:27.000]  там следующий слой ну там по камере него какая-то неполная часть как только мы как бы обработаем
[11:27.000 --> 11:32.200]  выкинем из очереди предыдущий слой значит следующий там в этот момент времени в очередь
[11:32.200 --> 11:39.880]  будет в точности следующий слой удобно правда вот то есть но это вот конкретно но это конкретно
[11:39.880 --> 11:44.520]  следствие да вот так можно очень просто реализовать это ехать но это я еще тут слова
[11:44.520 --> 11:52.120]  дистанцию с употреблением там д писать код вообще будет минималистически вот так что это вот
[11:52.120 --> 12:00.640]  такой это классический волновой алгоритм но вот это его реализация вот в виде бфс вот ну
[12:00.640 --> 12:05.640]  действительно тут пока тут пока все просто алгоритм известен тут даже это было называется
[12:05.640 --> 12:11.520]  слишком смешно даже спрашивать писали вы его когда-нибудь вот соответственно но вот но пойдем
[12:11.520 --> 12:17.520]  дай нот но возникает следующий день да то есть это конечно решает пока задачу только в графе
[12:17.520 --> 12:24.160]  только просто в невзвешенном графе хоть конечно и это идеальный алгоритм флом плане что он
[12:24.160 --> 12:32.640]  работает за время в плюсе да быстрее невозможно потому что надо просто данные считать вот но
[12:32.640 --> 12:44.280]  возникает следующая идея если у вас отвалился микрофон так что делать что делать что делать
[12:44.280 --> 12:57.800]  ну как сказать как это не обсуждается да но или обсуждается ну вот видите до шутки не заходит
[12:57.800 --> 13:04.000]  не это как бы слишком слабый вариант так а вот где бы нам еще взять так у нас еще так у нас еще
[13:04.000 --> 13:12.720]  еще и этого вытирать нету что ли господи кто что то что так грабил я не понял так
[13:12.720 --> 13:22.080]  ладненько сейчас я тогда да прям с микрофоном пойду сейчас будете меня слушать да вот так
[13:22.080 --> 13:37.200]  добрый день так мне требуется что-нибудь чем можно стирать а вот
[13:37.760 --> 13:49.800]  а спасибо так если тогда еще пару маркеров тоже воюем так это ой это флипча ой это флипча
[13:49.820 --> 13:53.720]  по красненьке и
[13:53.720 --> 14:01.240]  что такое?
[14:01.240 --> 14:06.680]  О, ничего.
[14:06.680 --> 14:08.580]  Всё.
[14:08.580 --> 14:12.680]  Всё, принято.
[14:12.680 --> 14:14.460]  Спасибо.
[14:14.460 --> 14:22.720]  И enzyme2 quests на 4ait возможно?
[14:22.720 --> 14:43.040]  Так вот, господа, господа, вот, раз-раз, значит что будет
[14:43.040 --> 14:44.040]  дальше?
[14:44.040 --> 14:47.480]  Но дальше выясняет, естественно, идея, но ведь часто же бывает,
[14:47.480 --> 14:51.480]  что дороги на улице, наверное, разные, длинные, а сталкивались
[14:51.480 --> 14:52.480]  с такой ситуацией.
[14:52.480 --> 14:59.800]  Никогда такого не было, и вот, представьте, оказалось,
[14:59.800 --> 15:03.880]  что дороги бывают, ну, разные длины, но давайте начнем
[15:03.880 --> 15:05.800]  с какой-нибудь разминочки.
[15:05.800 --> 15:11.800]  Допустим, длина бывает 1, 2, 3, 4, 5, ну, в общем случае
[15:11.800 --> 15:15.680]  к, но вот, понимаем, к пока не очень большое, и тоже
[15:15.680 --> 15:19.520]  хочется находить кратчайшее расстояние, но я только
[15:19.520 --> 15:21.760]  договорюсь, что да, по-хорошему еще хочется найти кратчайшие
[15:21.760 --> 15:24.560]  пути, но думаю, там, написать массив по решке, думаю,
[15:24.560 --> 15:26.640]  для вас не проблема, так что не будем сейчас излишне
[15:26.640 --> 15:31.280]  на этом оцентировать внимание, вот, значит, спрашивается,
[15:31.280 --> 15:34.080]  а как же найти кратчайшие пути, если вот длинные
[15:34.080 --> 15:37.800]  ребер бывают и побольше, то есть, вот, совсем такой
[15:37.800 --> 15:39.680]  алгоритм уже не работает.
[15:39.680 --> 15:46.760]  Ну, самое тупое, что можно делать, да, если у вас есть
[15:46.760 --> 15:51.600]  ребро длинной 4, то самое тупое, что можно делать,
[15:51.600 --> 15:55.200]  это распилить это ребро, ну, то есть, поставить, так
[15:55.200 --> 15:59.840]  сказать, на ребре контрольные точки, вот, и запустить
[15:59.840 --> 16:03.560]  абсолютно обычные BFS, да, это самое такое логичное
[16:03.560 --> 16:06.800]  решение, таки первое, таки первое, приходящее в голову,
[16:06.800 --> 16:14.200]  из-за сколько, из-за, из-за какое время оно работает,
[16:14.200 --> 16:20.600]  ну, я бы так сказал, В, там, В плюс Е умножить на К, вот
[16:20.600 --> 16:27.240]  так, вот, ну, потому что, да, то есть, ну, а чем точка
[16:27.240 --> 16:32.600]  вот, ну, два ЕК может быть, но суть такая, да, вот самое
[16:32.600 --> 16:36.920]  тупое, действительно, можно сделать так, но это даже
[16:36.920 --> 16:39.960]  не самое простое по реализации, ну, тем более, что понятно,
[16:39.960 --> 16:43.440]  что, да, что хотелось бы в идеале, конечно, домножать
[16:43.440 --> 16:47.480]  К не на Е, а, наверное, на В, да и как-то размножать
[16:47.480 --> 16:50.040]  ребре, это значит, что по заданному графу надо какой-то
[16:50.040 --> 16:54.000]  другой граф строить, это далеко не всегда удобно,
[16:54.000 --> 17:05.800]  вот, ой, боже мой, господи, кашпак, вот у вас, да, как
[17:05.800 --> 17:09.800]  так, да, ну, скажем так, да, вот, видимо, у нас сегодня
[17:09.800 --> 17:11.800]  будет такой, я вот не случайно писал волновой алгоритм
[17:11.800 --> 17:14.600]  и мы сегодня будем менять фундамент, да, то есть, да,
[17:14.600 --> 17:17.000]  я понимаю, что у вас там почти навек, да, когда вам
[17:17.000 --> 17:19.400]  сказали БФС, вам просто сразу сказали, что вот,
[17:19.400 --> 17:24.960]  вот БФС, он пишется, вот так, нет, ух ты, а как, прям
[17:24.960 --> 17:29.600]  сам вот это придумал, а, ну вот, ну вот и хорошо,
[17:29.600 --> 17:32.200]  кстати, Тарасе проще будет, потому что на самом деле
[17:32.200 --> 17:34.000]  на его основе, на самом деле сейчас там большинство
[17:34.000 --> 17:37.440]  остальных алгоритмов сейчас и придумываются, вот, да,
[17:37.440 --> 17:40.080]  хорошо, а как вам еще рассказывали про БФС?
[17:40.080 --> 17:50.080]  Да, это БФС, он пишется вот так вперед, да, ну, да,
[17:50.080 --> 17:56.360]  ну, понятно, да, окей, ну вот, ну, а на самом деле есть,
[17:56.360 --> 17:59.240]  то есть, на самом деле идея может заключаться в том,
[17:59.240 --> 18:02.680]  что давайте, то есть, на самом деле реализовывать тот
[18:02.680 --> 18:04.160]  же самый волновой алгоритм.
[18:04.160 --> 18:12.240]  Так, пока нет, хотя забегай вперед, не будет тут, с ноль
[18:12.240 --> 18:15.680]  ребрами никаких проблем в таком виде, ну, сейчас увидите,
[18:15.680 --> 18:20.200]  короче, не волнуйтесь, сейчас все будет, значит, смотрите,
[18:20.200 --> 18:25.720]  вот, идея будет такая, вот, жил-был-эс, и тут мы говорим,
[18:25.720 --> 18:29.000]  так, вот у нас есть нулевой слой, и по-видимому там никаких
[18:29.000 --> 18:32.600]  вершин больше не будет, да, и тут мы говорим, так, у
[18:33.320 --> 18:39.520]  нас есть, допустим, ребро длины 5, ребро длины 3 и,
[18:39.520 --> 18:42.960]  допустим, два ребра, там, ладно, три ребра длины один,
[18:45.200 --> 18:45.680]  вот.
[18:45.720 --> 18:49.760]  Тогда мы говорим, что до этих вершин мы нашли путь длинный
[18:49.760 --> 18:52.060]  один, прямо пробежавшись по ребрам и пишем.
[18:52.080 --> 18:54.340]  До этой вершины мы дошли путь длины три, до этой
[18:54.380 --> 18:56.520]  вершины мы нашли путь длины пять.
[18:56.520 --> 19:07.440]  так на этом нулевой слой закончился так рассмотрим первый слой так но есть
[19:07.440 --> 19:14.240]  подозрение что все вершины слоя один мы уже нашли правда ну по камере интуитивно
[19:14.240 --> 19:18.520]  кажется так кажется чуть позже мы поговорим о том как механизме как же
[19:18.520 --> 19:22.640]  формального доказательства этого всего такого все объемы еще но значит вот
[19:22.640 --> 19:27.080]  можно перебирать этот слой вот давайте возьмем эту вершину так что мы в ней
[19:27.080 --> 19:35.120]  видим мы в ней видим что например вот у нас сюда идет ребро веса 3 и тут
[19:35.120 --> 19:40.640]  получается опа оказывается до этой вершины есть более короткий путь путь
[19:40.640 --> 19:50.200]  длины 4 так такая релаксация произошла неплохо значит мысленно вот значит
[19:50.800 --> 19:55.560]  а также есть еще вот сюда ребро веса 3 значит мы дошли до этой вершины путь
[19:55.560 --> 20:03.280]  длины 4 но здесь он нам не интересен но потому что вершинка находится собственно
[20:03.280 --> 20:09.480]  уже мы нашли до нее путь длины 3 да пока не интересно так ну что-то еще могло
[20:09.480 --> 20:15.680]  быть вот но еще могло быть давайте тут еще какие-нибудь дополнительные ребра тут
[20:15.680 --> 20:21.480]  порисую допустим вот такое можно вот такое давайте вот путь длины 2 нарисуем и
[20:21.480 --> 20:28.320]  что-нибудь еще ну а ну и давайте а это вершина тупиковая так ну что у нас тогда
[20:28.320 --> 20:40.440]  получается тогда у нас получается маленькая приятная штука вот вот то есть
[20:40.440 --> 20:48.560]  теперь мы переходим к слою длины 2 слоя номер два но в этом слое вершин нет но им
[20:48.560 --> 20:54.280]  больше и взяться неоткуда что прийти в него можем только из вершин слоев 0 1 но
[20:54.280 --> 20:58.960]  также мы понимаем что тогда получается слой 3 мы уже полностью знаем и это вот
[20:58.960 --> 21:06.760]  он из него мы тоже делаем какую-то релаксацию но и тогда в результате получается
[21:06.760 --> 21:11.680]  примерно вот можно это сделать примерно так то есть давайте попытаемся слои реально вот
[21:11.680 --> 21:27.440]  хранить в реальном виде так если каждый слой искать за от в то вам будет больно
[21:27.440 --> 21:40.800]  но не совсем на самом нет это еще не фортбелла потому что как я сказал пока бы храним все
[21:40.800 --> 21:51.080]  слои в явном виде как говорится открываю демонстрирую так и так я штаб демонстрирую да во
[21:51.080 --> 22:05.360]  но не если бы только маленькая проблема мы релаксируем не следующий слой если
[22:05.360 --> 22:08.400]  релаксируешь прибру 3 то ты как бы релаксируешь не следующий слой
[22:08.400 --> 22:25.880]  но глобально произошло что у нас веса добавились ну как бы как бы если мы находимся сейчас слой
[22:25.880 --> 22:31.680]  57 у нас ребро 3 то как бы да мы отправляем вершину слой 60 если она еще не но во-первых
[22:31.680 --> 22:51.640]  если она еще не оказалась слои там 59 да то есть обратите внимание то есть обратите внимание то
[22:51.640 --> 22:58.560]  есть у нас появился появился новый волновой алгоритм внимание смотрите внимательно то есть
[22:58.560 --> 23:03.560]  Обратите внимание, мы говорим, что у нас этих волн целых k.
[23:03.560 --> 23:08.560]  То есть целых k умножить на n, на самом деле, обратите внимание.
[23:08.560 --> 23:12.560]  Но я тут более точную, конечно, оценку написал, но суть, в общем, такая.
[23:15.560 --> 23:21.560]  Но заметим, что если вершина попала в волну номер 60, вот из 57, то как мы уже увидели,
[23:21.560 --> 23:24.560]  это не значит, что она там навсегда останется.
[23:24.560 --> 23:29.560]  Потому что вполне может на этот трасс оказаться, что чуть позже до него расстояние окажется
[23:29.560 --> 23:31.560]  и вполне себе 59 или даже 58.
[23:33.560 --> 23:34.560]  k это да.
[23:35.560 --> 23:39.560]  И пока что важно, веса целые положительные.
[23:43.560 --> 23:45.560]  Поэтому я их так вот пользуюсь.
[23:45.560 --> 23:49.560]  Ну ладно, вот мы не знаем, что такое BFS, но вот мы знаем, что такое set.
[23:49.560 --> 23:51.560]  Правда, не знаем, что такое hash set.
[23:54.560 --> 23:57.560]  Мы пробегаем слои, то есть мы явно пробегаемся по слоям.
[23:57.560 --> 23:58.560]  Да.
[23:58.560 --> 24:01.560]  Но мы же когда-то, как мы второй раз пробежимся, или мы еще раз выбираемся?
[24:01.560 --> 24:03.560]  В смысле? Зачем второй раз?
[24:03.560 --> 24:06.560]  Ну а как нам меньше запустить типа пересчет?
[24:06.560 --> 24:08.560]  Нет, в смысле, а вот идея очень простая.
[24:08.560 --> 24:12.560]  Смотри, изначально у тебя есть только нулевой слой, в котором находится стартовая вершина.
[24:12.560 --> 24:13.560]  Да.
[24:13.560 --> 24:17.560]  Значит, мы говорим, мы пробегаемся по всем слоям в порядке возрастания.
[24:17.560 --> 24:21.560]  И в каждом слое, в слое номер L, говорим, вот у меня есть пустой слой.
[24:21.560 --> 24:22.560]  Точнее не пустой слой.
[24:22.560 --> 24:24.560]  Я достаю из него новую вершину.
[24:24.560 --> 24:26.560]  Простым, естественным образом.
[24:28.560 --> 24:29.560]  Вот.
[24:29.560 --> 24:31.560]  Значит, дальше происходит, что...
[24:31.560 --> 24:33.560]  Значит, что мы делаем дальше?
[24:33.560 --> 24:36.560]  Мы перебираем все ребра, торчащие из ГИО.
[24:36.560 --> 24:41.560]  И говорим, что я вот так, вот конец этого ребра, назовем его NW,
[24:41.560 --> 24:45.560]  и я нашел до этой вершины новый путь длины L,
[24:45.560 --> 24:49.560]  до этой вершины новый путь длины L плюс вес ребра.
[24:50.560 --> 24:54.560]  Если оказалось, что это лучшее, чем мы нашли раньше,
[24:54.560 --> 24:57.560]  в массиве D, естественно, храню такие пути,
[25:00.560 --> 25:02.560]  вот, то...
[25:03.560 --> 25:04.560]  В смысле...
[25:14.560 --> 25:15.560]  Правильно.
[25:15.560 --> 25:16.560]  И мы это делаем.
[25:16.560 --> 25:17.560]  Обрати внимание.
[25:17.560 --> 25:19.560]  Давайте я побольше нарисую.
[25:19.560 --> 25:20.560]  Вот.
[25:20.560 --> 25:21.560]  Пожалуйста.
[25:21.560 --> 25:22.560]  То есть я...
[25:22.560 --> 25:27.560]  Вот я тут не случайно пишу, что если вершина уже в каком-то слое находится,
[25:27.560 --> 25:30.560]  а ведь по сути обратить внимание D, это не просто расстояние,
[25:30.560 --> 25:32.560]  это в каком слое она находится.
[25:33.560 --> 25:36.560]  Пока у нас все целое, это вообще одно и то же.
[25:36.560 --> 25:37.560]  Зачем нам удалять?
[25:37.560 --> 25:39.560]  Мы можем просто добавлять новое?
[25:40.560 --> 25:43.560]  Пока для, может быть, какой-то простоты.
[25:44.560 --> 25:46.560]  То есть давайте отдельно мы поговорим о том, что понятно,
[25:46.560 --> 25:48.560]  что можно избавиться от анордера сетов,
[25:48.560 --> 25:51.560]  и вообще есть BFS-нака очередях, до которого мы сейчас дойдем.
[25:51.560 --> 25:52.560]  Естественно есть.
[25:53.560 --> 25:58.560]  Но как бы мы давайте все-таки будем все-таки с базы начинать.
[25:58.560 --> 25:59.560]  Вот.
[25:59.560 --> 26:01.560]  Здесь я взял максимально простую базу,
[26:01.560 --> 26:03.560]  когда вот я хотел визуализировать,
[26:03.560 --> 26:06.560]  что вершина может перемещаться из слоя в слой.
[26:07.560 --> 26:09.560]  И вот здесь я это реализую с помощью hash-сета.
[26:10.560 --> 26:12.560]  То есть если она лежала в каком-то слое,
[26:12.560 --> 26:16.560]  я ее оттуда достаю, ну и потом, соответственно, я ее туда помещаю.
[26:16.560 --> 26:17.560]  Сейчас.
[26:17.560 --> 26:18.560]  Я не очень понимаю...
[26:18.560 --> 26:19.560]  Видите?
[26:19.560 --> 26:21.560]  Мы же сейчас...
[26:21.560 --> 26:24.560]  Мы делаем что-то подобие DFS или мы просто...
[26:24.560 --> 26:26.560]  Я не очень понимаю, почему у нас поддерживается вариант,
[26:26.560 --> 26:28.560]  что мы всех меньших ловят со души.
[26:28.560 --> 26:30.560]  Вот я это понимаю.
[26:30.560 --> 26:31.560]  Вот.
[26:31.560 --> 26:32.560]  Так.
[26:32.560 --> 26:33.560]  Но раз возникает вопрос...
[26:33.560 --> 26:35.560]  Но раз возникает такой вопрос, значит,
[26:35.560 --> 26:37.560]  приходит время действительно формального доказательства.
[26:38.560 --> 26:40.560]  Значит, формального доказательства того,
[26:40.560 --> 26:43.560]  что действительно такой алгоритм действительно работает.
[26:44.560 --> 26:45.560]  Ну, доказательства...
[26:45.560 --> 26:46.560]  Так.
[26:46.560 --> 26:47.560]  Ну а теперь первое утверждение.
[26:47.560 --> 26:52.560]  Если вершина находится в слое номер L,
[26:52.560 --> 26:57.560]  это означает, что мы реально нашли какой-то путь длины L до нее.
[26:58.560 --> 26:59.560]  Это понятно, да?
[26:59.560 --> 27:00.560]  Да.
[27:00.560 --> 27:01.560]  Вот.
[27:01.560 --> 27:03.560]  Ну там можно по индукции.
[27:03.560 --> 27:04.560]  Теперь остается только показать...
[27:04.560 --> 27:05.560]  Ну вот.
[27:05.560 --> 27:07.560]  Теперь остается только показать,
[27:07.560 --> 27:11.560]  что, значит, каждая вершина обязательно окажется в L-том слое.
[27:12.560 --> 27:15.560]  Причем до того, как мы...
[27:15.560 --> 27:19.560]  Причем желательно до того, как мы этот L-ти слой будем обрабатывать.
[27:19.560 --> 27:20.560]  Но если до вершины...
[27:20.560 --> 27:21.560]  Я имею в виду пусть до вершины...
[27:21.560 --> 27:22.560]  То есть утверждение.
[27:22.560 --> 27:24.560]  Пусть до вершины V расстояние L.
[27:25.560 --> 27:26.560]  Тогда A.
[27:26.560 --> 27:28.560]  Она попадет в L-ты слой.
[27:29.560 --> 27:30.560]  B.
[27:30.560 --> 27:31.560]  Что важно.
[27:31.560 --> 27:33.560]  Это произойдет до того,
[27:33.560 --> 27:34.560]  как мы вообще дойдем...
[27:34.560 --> 27:38.560]  Как у нас форик дойдет до L-того слоя и начнет его обрабатывать.
[27:40.560 --> 27:41.560]  Нет.
[27:41.560 --> 27:42.560]  Вот сейчас тут очень важно.
[27:42.560 --> 27:43.560]  Действительно.
[27:43.560 --> 27:46.560]  Потому что вот в какой-то момент действительно у нас так схема может...
[27:46.560 --> 27:48.560]  Как бы можно поверить излишне в схему,
[27:48.560 --> 27:50.560]  а она в какой-то момент начнет давать сбой.
[27:51.560 --> 27:53.560]  Доказать, что будет такое.
[27:53.560 --> 27:58.560]  Рассмотрим кратчайший путь от вершины S до вершины V.
[27:58.560 --> 27:59.560]  Ну там какой-нибудь.
[28:01.560 --> 28:02.560]  Вот.
[28:02.560 --> 28:03.560]  И длина тут L.
[28:03.560 --> 28:07.560]  Тут, допустим, 0, 3, там, 5, 9 и так далее.
[28:10.560 --> 28:14.560]  Значит, теперь пройдемся по всем вот этим вершинам.
[28:14.560 --> 28:15.560]  Ну там можно включать индукцию,
[28:15.560 --> 28:17.560]  но, думаю, суть будет понятна и без нее.
[28:17.560 --> 28:22.560]  Эта вершина сразу попадает в нулевой слой и обрабатывается там, правда?
[28:23.560 --> 28:26.560]  Но это означает, что вот эта вершина,
[28:28.560 --> 28:32.560]  просто при обработке этой вершины из нулевого слоя,
[28:32.560 --> 28:34.560]  попадет в слой №3.
[28:35.560 --> 28:36.560]  Логично, да?
[28:37.560 --> 28:41.560]  Более того, она никуда оттуда не денется.
[28:41.560 --> 28:42.560]  Почему она никуда не денется?
[28:42.560 --> 28:45.560]  Да просто потому, что если она куда-то денется, значит,
[28:45.560 --> 28:47.560]  до нее есть путь короче, чем №3.
[28:47.560 --> 28:50.560]  А это тогда бы и этот путь сделала короче, правда?
[28:51.560 --> 28:55.560]  Значит, эта вершина ровно в этот момент попадет в слой №3
[28:55.560 --> 28:58.560]  и, в общем-то, больше с ней ничего не произойдет.
[28:59.560 --> 29:00.560]  Вот, понятно, да?
[29:01.560 --> 29:03.560]  Теперь дошли до этой вершины.
[29:04.560 --> 29:08.560]  Но при релаксации из нее вот эта вершина попадет в слой №3.
[29:08.560 --> 29:12.560]  Но при релаксации из нее вот эта вершина попадет в слой №5.
[29:13.560 --> 29:16.560]  Ну, с оговоркой, тут уже не совсем верно утверждение,
[29:16.560 --> 29:19.560]  что она попадет именно в этот момент, она могла туда попасть раньше.
[29:20.560 --> 29:21.560]  Но нам это не важно.
[29:21.560 --> 29:25.560]  Нам важно, что она, то есть не позже, чем при обработке третьего слоя,
[29:25.560 --> 29:27.560]  эта вершина попадет в пятый слой.
[29:30.560 --> 29:33.560]  Вот, и никуда оттуда не денется, потому что это тоже корочешее расстояние.
[29:33.560 --> 29:34.560]  Ну и так далее.
[29:34.560 --> 29:37.560]  То есть таким же образом эта вершина, там, 9-ый, 10-ый и так далее.
[29:37.560 --> 29:41.560]  В общем, короче говоря, каждая из этих вершин будет обработана в своем слое.
[29:41.560 --> 29:43.560]  В общем-то, доказательство окончено.
[29:44.560 --> 29:47.560]  А правда, что это просто дээкстрация квадратная?
[29:48.560 --> 29:50.560]  Нет, пока нет.
[29:51.560 --> 29:53.560]  Которая пробегает просто по всем лишним насам, которые не используются?
[29:53.560 --> 29:55.560]  Нет, пока на самом деле нет.
[29:57.560 --> 30:00.560]  Нет, я бы сказал, скажем так, тут у меня немножко другая точка зрения.
[30:00.560 --> 30:04.560]  Я скажу, что дээкстра, это вот это вот, только слоев бесконечно много.
[30:08.560 --> 30:09.560]  На самом деле.
[30:09.560 --> 30:11.560]  Но мы давайте просто не будем бежать.
[30:11.560 --> 30:15.560]  Да, я понимаю, тут у нас все продвинутые люди, но все-таки давайте постепенно.
[30:17.560 --> 30:20.560]  Вот, то есть вот таким образом у нас получается такое удобное.
[30:20.560 --> 30:26.560]  Это мы будем называть, ну да, получается не совсем 1K BFS,
[30:26.560 --> 30:29.560]  это как бы 1K волновой алгоритм.
[30:30.560 --> 30:32.560]  Вот.
[30:36.560 --> 30:38.560]  Ну, на самом деле, да.
[30:38.560 --> 30:40.560]  Ну, 1K.
[30:40.560 --> 30:44.560]  Сразу возьмите такой замечательный вопрос.
[30:45.560 --> 30:48.560]  Действительно, можно ли это реализовать без анордорицитов?
[30:50.560 --> 30:52.560]  Вот, ну и на самом деле, конечно, да.
[30:54.560 --> 30:57.560]  Ну, во-первых, действительно, как уже было сказано.
[30:57.560 --> 30:59.560]  Так, интересно, что у меня тут было?
[30:59.560 --> 31:01.560]  Ой, боже мой, что это такое?
[31:02.560 --> 31:03.560]  Так.
[31:04.560 --> 31:07.560]  Да, но на самом деле обратите внимание вот на что.
[31:07.560 --> 31:13.560]  Да, то есть можно это в принципе реализовать на фактически к очередях.
[31:14.560 --> 31:16.560]  Ну, первая идея возникает такая,
[31:17.560 --> 31:23.560]  что на самом деле вот эти сыты можно прекрасно заменить на обычные векторы или даже очереди.
[31:24.560 --> 31:29.560]  Единственная только проблема будет, что мы вершину из очереди вынуть просто так уже не можем.
[31:30.560 --> 31:32.560]  Но это сама по себе не проблема. Почему?
[31:34.560 --> 31:36.560]  Да, мы просто потому что мы можем достаем,
[31:36.560 --> 31:38.560]  говорить, достаем вершину из очереди
[31:39.560 --> 31:45.560]  и говорить, так, если у нее там дешка у нее меньше, чем слой, с которой мы ее достали, значит мы ее игнорируем.
[31:46.560 --> 31:48.560]  Или там, ну если мы там...
[31:49.560 --> 31:50.560]  Чего?
[31:51.560 --> 31:52.560]  Почему?
[31:54.560 --> 31:55.560]  Можем.
[31:56.560 --> 32:02.560]  Ну теперь давайте вопрос, а сколько, хорошо, сколько раз в совокупности мы будем добавлять вершины со всеми дубликатами во все очереди?
[32:03.560 --> 32:05.560]  Это ее входящая степень.
[32:06.560 --> 32:13.560]  Но потом мы для каждого из этого раза, если мы будем прибирать ее к соседе, это будет ее выходящая степень, и если мы перемножим, то будет тоже.
[32:14.560 --> 32:19.560]  Да, но тогда правда теперь оговоримся, что в одну очередь одна вершина больше одного раза не будет добавлена.
[32:20.560 --> 32:21.560]  Это правда.
[32:21.560 --> 32:22.560]  Это правда.
[32:23.560 --> 32:24.560]  А, если у нас...
[32:24.560 --> 32:29.560]  Потому что мы как бы ее добавляем только в случае, если расстояние строго уменьшилось.
[32:30.560 --> 32:31.560]  Да.
[32:32.560 --> 32:33.560]  Так что да.
[32:35.560 --> 32:39.560]  Не, ну хотя бы один раз мы уже, как вы уже выяснили, она добавлена будет, так что...
[32:40.560 --> 32:41.560]  Что если у нас у ребер могут быть и самой?
[32:42.560 --> 32:43.560]  Пока еще не бывает.
[32:44.560 --> 32:47.560]  Ну, во-первых, пока не бывает, чуть позже обсудим,
[32:47.560 --> 32:48.560]  что принципиально меняется.
[32:49.560 --> 32:50.560]  Да, подсказка.
[32:51.560 --> 32:52.560]  Ничего.
[32:53.560 --> 32:54.560]  Вот.
[32:55.560 --> 33:00.560]  И в результате получается, что на самом деле, да, можно заменить это на очереди и даже сильно не париться.
[33:01.560 --> 33:02.560]  Вот.
[33:03.560 --> 33:04.560]  И на самом деле...
[33:05.560 --> 33:07.560]  Но на самом деле теперь можно заметить, что каждый раз, когда мы...
[33:08.560 --> 33:16.560]  Вот раньше, когда мы писали обычный БФС, мы просто обнаруживали, что в каждый момент времени у нас есть только два непустых с этой точки зрения слоя, текущий и следующий.
[33:17.560 --> 33:20.560]  Ну, все предыдущие опустошены, а следующих больше нету.
[33:21.560 --> 33:22.560]  Вот.
[33:23.560 --> 33:24.560]  Поэтому оставалось только всего два слоя.
[33:25.560 --> 33:26.560]  И как бы мы их запихивали в одну очередь.
[33:27.560 --> 33:29.560]  А на самом деле можно завести K плюс одну очередь.
[33:30.560 --> 33:43.560]  Ну, потому что заметим, что если мы сейчас находимся там в слое номер L, то у нас только расстояние до вершин могут быть не более, чем L плюс K, который мы нашли на текущий момент.
[33:44.560 --> 33:46.560]  Поэтому получается K плюс одна очередь.
[33:47.560 --> 33:52.560]  Ну и, на самом деле, чтобы их там не сдвигать по циклу, получается вот примерно такая реализация.
[33:56.560 --> 33:57.560]  Вот. Видно, да?
[33:58.560 --> 34:03.560]  То есть, видите, тут даже... То есть, на самом деле, видите, мы просто берем предыдущий код и немножко его переделываем.
[34:04.560 --> 34:06.560]  Видите, да?
[34:07.560 --> 34:10.560]  Вот. То есть, в каждом моменте... То есть, обратите внимание, как мы это делаем, да?
[34:11.560 --> 34:15.560]  То есть, у нас L – это все еще тот же самый слой, вообще, который был раньше.
[34:15.560 --> 34:16.560]  Да? Видите, да?
[34:18.560 --> 34:23.560]  Вот. Но при этом, как бы, L-ты слой будет находиться в очереди номер L процент K плюс один.
[34:24.560 --> 34:31.560]  То есть, мы как бы в каждом моменте не храним не все VK-очередей, хотя могли бы, а только K плюс одну, ту, которую нам вообще надо.
[34:33.560 --> 34:34.560]  Вот.
[34:35.560 --> 34:37.560]  Видите, значит, мы из нее достаем, соответственно, элемент.
[34:38.560 --> 34:40.560]  Ну, проверяем, адекватно ли мы его достали.
[34:40.560 --> 34:43.560]  Вот. Ну и, конечно, после этого, конечно, пытаемся релаксировать.
[34:45.560 --> 34:46.560]  Вот. Видно, да?
[34:48.560 --> 34:49.560]  Да, нет, наверное.
[34:50.560 --> 34:55.560]  То есть, это вот такой классический... То есть, вот это можно назвать, собственно, 1K BFS.
[34:55.560 --> 35:02.560]  Ай-яй-яй-яй. Ой. Ну вот. А в лошебагу не нашли. Ай-яй-яй-яй. Ну ладно.
[35:05.560 --> 35:08.560]  Так, нет, надо было так оставить, просто сказать. Да, вот.
[35:09.560 --> 35:10.560]  Вот.
[35:11.560 --> 35:12.560]  Вот.
[35:13.560 --> 35:14.560]  Вот.
[35:15.560 --> 35:16.560]  Вот.
[35:17.560 --> 35:18.560]  Вот.
[35:19.560 --> 35:20.560]  Вот.
[35:21.560 --> 35:22.560]  Вот.
[35:22.560 --> 35:24.560]  Надо было так оставить, просто сказать. Да, вот.
[35:26.560 --> 35:29.560]  А то будет кто-то списывать, а потом будет думать, о, оно не работает.
[35:30.560 --> 35:31.560]  Да. Вот.
[35:32.560 --> 35:35.560]  А, ну правда, оно поронтаймится практически сразу, да, логично.
[35:36.560 --> 35:38.560]  Это все равно не совсем понятно, что происходит.
[35:39.560 --> 35:40.560]  Сейчас. У нас...
[35:41.560 --> 35:42.560]  Это...
[35:43.560 --> 35:44.560]  Это...
[35:46.560 --> 35:49.560]  Ну, смотри, давай вот вернемся к старой версии. Вот в этой версии...
[35:49.560 --> 35:51.560]  А, я понял, это как раз мы по циклу ходим.
[35:52.560 --> 35:53.560]  Да.
[35:54.560 --> 36:00.560]  Ну да, то есть старая версия NL это номер очереди, в которой бы мы находились, но просто мы храним как бы только K плюс одну очередь и ходим, да, именно по циклу.
[36:01.560 --> 36:04.560]  Вот. То есть это называется BFS така очередя.
[36:05.560 --> 36:07.560]  А ну-ка поднимите руки, кто сталкивался с чем-то подобным.
[36:08.560 --> 36:11.560]  Или хотя бы с таким словосочетанием, да. Ага. Окей.
[36:11.560 --> 36:12.560]  Окей.
[36:19.560 --> 36:21.560]  Ну, мы и делаем пока не пусто.
[36:29.560 --> 36:32.560]  Нет, ну, но сформулируем аккуратно, да, тут...
[36:33.560 --> 36:37.560]  Нет, ну не факт, в худшем случае по-любому будет WK, потому что если у вас...
[36:38.560 --> 36:39.560]  В общем, да, но...
[36:40.560 --> 36:44.560]  Нет, ну да, можно там действительно делать какие-то отсечки, я согласен, но это вот такие гилочки.
[36:53.560 --> 36:54.560]  Ну да, да, да. Пожалуй.
[36:55.560 --> 36:56.560]  Но это уже детали.
[36:57.560 --> 36:58.560]  Да, значит пока мы видим...
[36:59.560 --> 37:02.560]  Да, то есть видишь, что это вот один KBFS такой получился.
[37:02.560 --> 37:05.560]  В общем-то пока оказалось очень сложно, это у нас работает...
[37:06.560 --> 37:07.560]  За сколько это работает?
[37:08.560 --> 37:09.560]  А, ну я могу не вставать, да.
[37:10.560 --> 37:14.560]  Это все еще работает за V умножить на K плюс E.
[37:17.560 --> 37:18.560]  Вот.
[37:20.560 --> 37:21.560]  Так.
[37:21.560 --> 37:24.560]  Но правда тут возникают, конечно, какие еще идеи возникают.
[37:25.560 --> 37:26.560]  Ну, можно сразу оговориться.
[37:27.560 --> 37:28.560]  Давайте вместо...
[37:29.560 --> 37:34.560]  Тут написано, что это у нас не один KBFS, а ноль KBFS.
[37:41.560 --> 37:47.560]  Ну, что вот это работает, это он как бы обысковывается так же, как и это, потому что это просто чуть-чуть измененная реализация, не более того.
[37:49.560 --> 37:56.560]  То есть интеллектуально добавлено только одно, что заметим, что когда мы обрабатываем слой номер L, у нас не пустые слои,
[37:56.560 --> 37:59.560]  только L, L плюс 1 и так далее, L плюс K.
[38:00.560 --> 38:03.560]  И все остальное здесь, это просто их аккуратная реалия, просто как их хранить.
[38:04.560 --> 38:05.560]  Все.
[38:06.560 --> 38:07.560]  Вот.
[38:08.560 --> 38:18.560]  То есть можно по индукции говорить, что там, если у вершины вес от L до L плюс K, то есть сейчас длина, то она хранится в слое номер там, вот этот вот L там, процент К плюс 1.
[38:19.560 --> 38:20.560]  Но доказывается абсолютно так же.
[38:20.560 --> 38:29.560]  Вот выясняется вопрос, а сильно ли меняет что-то, если мы скажем, что у нас помимо весов от одного докка, бывает еще вес ноль?
[38:30.560 --> 38:34.560]  Ну, она разорвается в свою очередь, но…
[38:35.560 --> 38:40.560]  В смысле, вес ноль, это значит, что мы можем просто где-то и кайлы бы запустить DFS.
[38:41.560 --> 38:42.560]  Почему DFS?
[38:43.560 --> 38:45.560]  Ну, потому что мы можем просто сказать, что все, что достижено из вершины…
[38:46.560 --> 38:47.560]  Мы не знаем DFS.
[38:48.560 --> 38:49.560]  Ну…
[38:50.560 --> 38:54.560]  Нет, там нет, на самом деле нет, боже упаси, нам не нужно запускать DFS.
[38:55.560 --> 38:57.560]  Списать отдельный DFS нам не нужно.
[39:00.560 --> 39:08.560]  Да, то есть на самом деле произойдет только одно, что вершина будет добавлена просто в тот слой, который мы прямо сейчас обрабатываем.
[39:09.560 --> 39:10.560]  Ну, если что.
[39:11.560 --> 39:14.560]  Но возникает вопрос, сильно ли для нас это страшно?
[39:14.560 --> 39:17.560]  Ну, ответ дает очень простой, да.
[39:18.560 --> 39:20.560]  У нас есть вообще механизм формального доказательства.
[39:21.560 --> 39:28.560]  Вот давайте проверим, а насколько он сломается, если там вес очередного ребра окажется ноль на этом пути?
[39:31.560 --> 39:42.560]  Ну, на самом деле, то есть, да, у нас, конечно, чуть-чуть сломается, потому что мы пользовались утверждением, что вершина попадет в слой до того, как этот слой начнет обрабатываться.
[39:43.560 --> 39:49.560]  Теперь это неверно, но не криминально, потому что для нас, оказывается, важно…
[39:50.560 --> 40:03.560]  То есть тут, конечно, тонкая разница, что здесь оказывается, что эта вершина попадет в свой слой, причем, что важно, причем более того, до…
[40:04.560 --> 40:08.560]  Да, до того, как мы закончим обрабатывать этот слой.
[40:08.560 --> 40:14.560]  И это означает, что, как бы, из нее реалаксация произойдет, но, короче говоря, в общем, индукция продолжает работать.
[40:15.560 --> 40:26.560]  То есть отсюда получается, что на самом деле, то есть, как бы, да, один кал, вот, то есть, на самом деле, дописать сюда нолик, по крайней мере, пока никаких проблем нам не делает.
[40:27.560 --> 40:31.560]  Сейчас начнем, что мы сначала берем ребра весом ноль, обрабатывайте подъем.
[40:32.560 --> 40:33.560]  Не, вообще не надо, зачем?
[40:33.560 --> 40:34.560]  А какая разница?
[40:36.560 --> 40:38.560]  Так тот-то и прикол, что ничего не надо.
[40:39.560 --> 40:42.560]  Как говорится, вот этот же алгоритм без всяких изменений работает.
[40:43.560 --> 40:45.560]  И все предыдущие, кстати, тоже.
[40:46.560 --> 40:52.560]  Сейчас можете еще раз, с самого начала, повторить формально доказательства, почему 1k и 0k просто не работают?
[40:53.560 --> 40:55.560]  Ну и 1k и 0k, значит, ну, суть одна.
[40:55.560 --> 40:58.560]  Рассмотрим кратчайшее расстояние до вершины V в смысле кратчайший путь.
[40:59.560 --> 41:05.560]  Ну, у нас продолжает работать, что если вершина оказалась в слое номер L, значит, мы до нее реально нашли путь длинной L, да?
[41:08.560 --> 41:09.560]  Вот.
[41:10.560 --> 41:15.560]  То есть, остается только доказать, что мы до этой вершины V путь реально найдем длинной L.
[41:16.560 --> 41:17.560]  Вот.
[41:18.560 --> 41:22.560]  То есть, остается только доказать, что мы до этой вершины V путь реально найдем длинной L.
[41:26.560 --> 41:27.560]  Ну, слушайте, что, ну вот.
[41:28.560 --> 41:29.560]  Что мы не доем ее раньше, чем мы.
[41:30.560 --> 41:33.560]  Ну, нет, ну, как сказать, ну, нет, вот исходно.
[41:34.560 --> 41:35.560]  Что нам надо доказать, да?
[41:36.560 --> 41:42.560]  То есть, нам надо доказать, что как бы до вершины V будет, там, чтобы вершина V попадет в этот слой, да?
[41:43.560 --> 41:44.560]  Вот.
[41:45.560 --> 41:49.560]  Это означает, что, значит, ну, пока утверждение такое, что да.
[41:50.560 --> 41:54.560]  То есть, если мы вершина попала в какой-то слой, значит, мы путь такой длины реально нашли.
[41:55.560 --> 41:56.560]  Вот.
[41:57.560 --> 41:59.560]  Ну, в самом деле, может быть, просто мы этот путь не найдем.
[42:00.560 --> 42:02.560]  Но давайте рассмотрим кратчайший путь вот этой длины L до вершины V.
[42:03.560 --> 42:07.560]  Доказательства базируются на том, что мы теперь проходимся по этим вершинам вдоль этого пути.
[42:07.560 --> 42:10.560]  И доказываем, что каждая вершина попадет в соответствующий слой.
[42:11.560 --> 42:15.560]  Там номер, там длина от пути, вот от стартовой вершины до вот этой.
[42:16.560 --> 42:19.560]  То есть, нам индукция по длине пути.
[42:20.560 --> 42:25.560]  Я бы сказал, в данном случае, по, как бы, нет, по количеству ребер на пути, я бы сказал.
[42:26.560 --> 42:27.560]  По количеству ребер.
[42:28.560 --> 42:30.560]  Да, ну, чтобы столиком обработать, да, по количеству ребер.
[42:31.560 --> 42:33.560]  Ну, в смысле, в количестве ребер?
[42:34.560 --> 42:39.560]  То есть мы говорим, что для, что-то не я все еще не нашел нормального обоснования?
[42:40.560 --> 42:41.560]  Как?
[42:42.560 --> 42:44.560]  В смысле, а в чем проблема?
[42:45.560 --> 42:46.560]  Смотри, вот, то есть вот жила-была вершина, да?
[42:47.560 --> 42:49.560]  Ну, допустим, вот, там база индукции, понятно.
[42:50.560 --> 42:52.560]  Да, эта вершина попадет в нулевой слой и будет там обработана.
[42:53.560 --> 42:54.560]  Переход.
[42:55.560 --> 42:59.560]  Допустим, вот, то есть доказали, что вот эта вершина попадет в свой слой и будет там обработана, да?
[43:00.560 --> 43:04.720]  Ну теперь берем следующее ребро, вот в худшем случае
[43:04.720 --> 43:05.720]  ноль.
[43:05.720 --> 43:09.560]  Но даже это любое, ну вот, тогда заметим, что когда
[43:09.560 --> 43:12.880]  мы обрабатываем эту вершину в своем правильном слое,
[43:12.880 --> 43:16.360]  вот эта вершина тоже будет попробовать поместиться
[43:16.360 --> 43:17.360]  в правильный слой.
[43:17.360 --> 43:19.120]  Почему попробовать, потому что может быть она там была
[43:19.120 --> 43:20.120]  уже раньше.
[43:20.120 --> 43:21.120]  Вот.
[43:22.120 --> 43:23.120]  Вот.
[43:23.120 --> 43:26.120]  Нам нужно аккуратно шаг оформить как-то.
[43:26.120 --> 43:29.120]  Ну, в смысле, нет, для 1 кб, понятно, вопрос.
[43:29.120 --> 43:33.120]  Предполагаю, что для всех ребер на пути меньше ноль.
[43:33.120 --> 43:37.120]  Почему для вот 0, почему у нас в предыдущей вершине?
[43:37.120 --> 43:41.120]  По сути у нас как бы, у нас то, что веса ребер не больше
[43:41.120 --> 43:44.120]  нуля, они отвечают за то, что у нас работает переход
[43:44.120 --> 43:45.120]  ноль.
[43:45.120 --> 43:46.120]  Не больше нуля?
[43:46.120 --> 43:47.120]  В смысле?
[43:47.120 --> 43:48.120]  Не меньше ноль.
[43:48.120 --> 43:50.120]  Нет, у нас пока, нет, смотрите, у нас пока все как-то
[43:50.120 --> 43:53.120]  жестко базируется на том, что у нас веса еще и целая.
[43:53.120 --> 43:56.120]  Мы пользуемся в индукционном переходе тем, что для предыдущей
[43:56.120 --> 43:58.120]  вершины у нас все работает.
[43:58.120 --> 43:59.120]  Да.
[43:59.120 --> 44:03.120]  Но теоретически если вес 0, то как бы, ну если вес
[44:03.120 --> 44:07.120]  1, то это просто индукция по номеру слоя.
[44:07.120 --> 44:10.120]  А если вес 0, то индукция по номеру слоя уже не сработает.
[44:10.120 --> 44:13.120]  Нет, да, но сработает следующее.
[44:13.120 --> 44:14.120]  Тут два варианта.
[44:14.120 --> 44:17.120]  Когда вы попытались прорелаксировать по этому ребру, у вас два
[44:17.120 --> 44:18.120]  варианта.
[44:18.120 --> 44:22.120]  Либо эта вершина уже оказалась в данном случае в девятом
[44:22.120 --> 44:23.120]  слое.
[44:23.120 --> 44:27.120]  И тогда это означает, что до нее уже был там ранее
[44:27.120 --> 44:29.120]  какой-то другой путь длины 9.
[44:29.120 --> 44:32.120]  И это значит, что она будет обработана в этом девятом
[44:32.120 --> 44:33.120]  слое.
[44:33.120 --> 44:34.120]  Все в порядке.
[44:34.120 --> 44:35.120]  Вот.
[44:35.120 --> 44:40.120]  Либо эта вершина прямо сейчас будет добавлена в конец
[44:40.120 --> 44:41.120]  очереди.
[44:41.120 --> 44:44.120]  Вот это важно, что мы добавляем именно в конец очереди.
[44:44.120 --> 44:47.120]  Ну, девятая, конечно, очередь.
[44:47.120 --> 44:49.120]  И, соответственно, она там тоже будет обработана.
[44:49.120 --> 44:52.120]  Видимо, можно сказать так.
[44:52.120 --> 44:55.120]  Для каждой компонента связанности из нулей в момент начала
[44:55.120 --> 44:58.120]  обработки кат и очереди у нас хотя бы одна вершина
[44:58.120 --> 44:59.120]  из этой компоненты будет...
[44:59.120 --> 45:01.120]  Ой, не надо так говорить.
[45:01.120 --> 45:04.120]  В ориентированном графе нет понятия компонента связанности.
[45:04.120 --> 45:07.120]  Почему вообще как-то отдельно рассматривать игру в
[45:07.120 --> 45:09.120]  персональце, а не в принципиальном ничем?
[45:09.120 --> 45:11.120]  Смотри, у тебя индукция по номеру слоя.
[45:11.120 --> 45:12.120]  Ну...
[45:12.120 --> 45:13.120]  Если доверить...
[45:13.120 --> 45:14.120]  Тихо, тихо, тихо.
[45:14.120 --> 45:15.120]  Вот, спокойно.
[45:15.120 --> 45:18.120]  Нет, лучше в данном случае просто рассмотрим путь,
[45:18.120 --> 45:20.120]  сделаем индукцию по числу ребер на пути.
[45:20.120 --> 45:21.120]  Все.
[45:21.120 --> 45:23.120]  И не парится.
[45:23.120 --> 45:24.120]  Значит, берем...
[45:24.120 --> 45:27.120]  Для каждой вершины определяем минимальное...
[45:27.120 --> 45:31.120]  Значит, минимальное число ребер на пути минимального
[45:31.120 --> 45:32.120]  веса.
[45:32.120 --> 45:33.120]  Да?
[45:33.120 --> 45:34.120]  Минимальное число...
[45:34.120 --> 45:35.120]  Ну, типа того.
[45:35.120 --> 45:37.120]  Берем путь с минимальным числом ребер среди тех,
[45:37.120 --> 45:40.120]  в которых минимальный вес, и делаем индукцию по
[45:40.120 --> 45:42.120]  количеству ребер на таком пути.
[45:42.120 --> 45:43.120]  Ну...
[45:43.120 --> 45:46.120]  Сначала по весу, потом по количеству ребер.
[45:46.120 --> 45:47.120]  Ну, можно.
[45:47.120 --> 45:48.120]  В принципе, можно, наверное, и так.
[45:48.120 --> 45:49.120]  Кажется, и так строго будешь.
[45:49.120 --> 45:52.120]  Ну, можно, но тут не знаю.
[45:52.120 --> 45:53.120]  Как по мне текущая.
[45:53.120 --> 45:56.120]  Строгость, по-моему, вполне адекватна.
[45:56.120 --> 45:59.120]  Ну, если на экзамене такая строгость пройдет,
[45:59.120 --> 46:00.120]  то нормально.
[46:00.120 --> 46:01.120]  Господи.
[46:01.120 --> 46:04.120]  Господи, когда у меня такая строгость, тогда такая
[46:04.120 --> 46:07.120]  уже строгость не проходила.
[46:07.120 --> 46:10.120]  Ну, окей.
[46:10.120 --> 46:12.120]  Так вот.
[46:12.120 --> 46:13.120]  Значит...
[46:13.120 --> 46:14.120]  Вот.
[46:14.120 --> 46:17.120]  Ну, это значит такой 0kbfs.
[46:17.120 --> 46:20.120]  Ну, значит, так что видим, что...
[46:20.120 --> 46:24.120]  Ну, единственное, конечно, нужно отметить 01bfs, конечно.
[46:24.120 --> 46:27.120]  Знаменитый, да?
[46:27.120 --> 46:29.120]  Ну, как бы, да, 0kbfs мы написали.
[46:29.120 --> 46:32.120]  Мы могли бы написать 01bfs, где у нас хранится всего
[46:32.120 --> 46:34.120]  две очереди в каждый момент времени.
[46:34.120 --> 46:39.120]  Но, на самом деле, чем у нас отличается 01bfs, да?
[46:39.120 --> 46:42.120]  Ну, давайте я уж тут покопи пастю чуть-чуть.
[46:46.120 --> 46:51.120]  А мы требуем, чтобы все расстояния не больше 0?
[46:51.120 --> 46:54.120]  Ну, в 01bfs, да.
[46:54.120 --> 46:56.120]  Нет, там просто вот...
[46:56.120 --> 46:58.120]  Вот давайте bfs 01.
[46:58.120 --> 47:01.120]  Тогда что у нас тут происходит?
[47:01.120 --> 47:04.120]  Ой.
[47:04.120 --> 47:05.120]  Ну, да.
[47:05.120 --> 47:07.120]  А, это он и есть, господи.
[47:07.120 --> 47:09.120]  Оказывается.
[47:09.120 --> 47:11.120]  Ну, давайте это...
[47:11.120 --> 47:14.120]  Да, пишем bfs, а он на самом деле 01, да.
[47:14.120 --> 47:16.120]  Все ж, да, все ж было уже, да.
[47:16.120 --> 47:19.120]  То есть, ну, разница оказывается такая, что если раньше мы
[47:19.120 --> 47:22.120]  храним просто все кладем в одну очередь и говорим,
[47:22.120 --> 47:25.120]  что там в каждом момент времени там конец текущего
[47:25.120 --> 47:29.120]  слоя и начало следующего, то в данном случае мы вот
[47:29.120 --> 47:30.120]  оговариваемся таким способом.
[47:30.120 --> 47:32.120]  То есть, заметим, что нам не сильно принципиально
[47:32.120 --> 47:35.120]  в каком порядке вершины внутри слоя рассматривать,
[47:35.120 --> 47:36.120]  правда?
[47:36.120 --> 47:38.120]  То есть, мы как бы в каждое время говорим, у нас есть
[47:38.120 --> 47:40.120]  какой-то мешочек вершин, давайте достанем из него
[47:40.120 --> 47:42.120]  вершинку, любую.
[47:42.120 --> 47:44.120]  И поэтому говорим так.
[47:44.120 --> 47:46.120]  А давайте заведем вместо очереди deck.
[47:49.120 --> 47:52.120]  И будем говорить так, что если я релаксирую по ребру
[47:52.120 --> 47:55.120]  номер 1, то я кладу в конец, то есть я как бы добавляю
[47:55.120 --> 47:56.120]  в следующий слой.
[47:56.120 --> 47:59.120]  А если я релаксирую по ребру веса 0, то я добавляю
[47:59.120 --> 48:00.120]  в начало.
[48:00.120 --> 48:03.120]  Это как бы я добавляю еще типа в текущий слой.
[48:06.120 --> 48:07.120]  Вот.
[48:07.120 --> 48:09.120]  Но правда, здесь, конечно, оговорка, что мы плохо следим
[48:09.120 --> 48:12.120]  за тем, что мы вершину добавили два раза, она могла в deck
[48:12.120 --> 48:13.120]  и два раза попасть.
[48:13.120 --> 48:17.120]  Но на самом деле тут мы пользуемся тем, что, наверное,
[48:17.120 --> 48:20.120]  пробежаться по всем ребрам из вершины два раза – это
[48:20.120 --> 48:21.120]  не так криминально.
[48:21.120 --> 48:23.120]  Ну просто да.
[48:23.120 --> 48:26.120]  То есть, второй раз, конечно, бессмысленно, просто потому,
[48:26.120 --> 48:28.120]  что релаксация уже не сработает.
[48:28.120 --> 48:35.120]  Но тем не менее, асимпатических проблем это нам не даст.
[48:35.120 --> 48:40.120]  В каком случае она могла попасть два раза?
[48:40.120 --> 48:46.120]  Ну, потому что, допустим, она могла попасть два раза,
[48:46.120 --> 48:50.120]  потому что, допустим, жила была вершина V57, и мы сделали
[48:50.120 --> 48:54.120]  релаксацию в вершину U до расстояния 58.
[48:54.120 --> 48:57.120]  А потом выяснилось, что, например, до этой вершины
[48:57.120 --> 49:01.120]  из этой же вершины или другой вершины из слоя 57 есть
[49:01.120 --> 49:04.120]  ребро веса 0.
[49:04.120 --> 49:07.120]  Вот.
[49:07.120 --> 49:09.120]  И тогда получается она и два раза.
[49:09.120 --> 49:11.120]  Ну, заметим, и здесь вообще мы отмечаем, что когда у
[49:11.120 --> 49:15.120]  нас 0kbfs, вершина может быть добавлена в очереди
[49:15.120 --> 49:20.120]  в совокупности k плюс один раз.
[49:20.120 --> 49:23.120]  Соответственно, это вполне возможно.
[49:23.120 --> 49:25.120]  То есть мы пользуемся тем, что суммарно количество
[49:25.120 --> 49:28.120]  вершин со всеми дубликатами, которые добавляются в очередь
[49:28.120 --> 49:30.120]  не более чем е, потому что по одному ребру вершина
[49:30.120 --> 49:33.120]  добавляется не более чем один раз.
[49:33.120 --> 49:35.120]  Вот.
[49:35.120 --> 49:36.120]  Так что вот.
[49:36.120 --> 49:39.120]  И это вот 0, да, это вот, собственно, так, классический
[49:39.120 --> 49:42.120]  0,1 bfs, но он, в принципе, почему бы не анод.
[49:42.120 --> 49:46.120]  То есть такое тоже приятная такая штука имеет место быть.
[49:48.120 --> 49:50.120]  Вот.
[49:50.120 --> 49:52.120]  Ну, и теперь вопрос.
[49:52.120 --> 49:54.120]  Какой следующий уровень?
[49:58.120 --> 50:00.120]  Не угадали.
[50:01.120 --> 50:03.120]  Нет, нет, нет, нет.
[50:03.120 --> 50:05.120]  Да, вы сейчас.
[50:05.120 --> 50:10.120]  Сейчас мы неожиданно попытаемся ввести не целые.
[50:10.120 --> 50:12.120]  Не целые.
[50:12.120 --> 50:15.120]  Комплексные расстояния это интересно, а минимизировать
[50:15.120 --> 50:17.120]  как?
[50:17.120 --> 50:19.120]  Ну, по модулю, очевидно.
[50:21.120 --> 50:23.120]  О, точно, полярный угол.
[50:23.120 --> 50:25.120]  А какой?
[50:25.120 --> 50:27.120]  Любой полярный угол, можно как бы из него вычитать
[50:27.120 --> 50:29.120]  два пи до бесконечности.
[50:29.120 --> 50:31.120]  Ну, можно загнать.
[50:31.120 --> 50:33.120]  Да.
[50:33.120 --> 50:36.120]  Да, это интеллектуально, конечно, будет, но, пожалуй,
[50:36.120 --> 50:38.120]  да, мы так делать не будем.
[50:38.120 --> 50:40.120]  Интеллектуальная минимизация.
[50:40.120 --> 50:42.120]  А теперь давайте так.
[50:42.120 --> 50:44.120]  Так, тихо.
[50:44.120 --> 50:46.120]  Тихо.
[50:46.120 --> 50:48.120]  Ой, классно.
[50:48.120 --> 50:51.120]  Ой, да, жалко технокубок такой.
[50:51.120 --> 50:53.120]  Жалко технокубок закончился, да.
[50:53.120 --> 50:55.120]  Дать бы школьникам задачи программ.
[50:55.120 --> 50:57.120]  Не то, что вот это.
[50:57.120 --> 50:59.120]  Не, ну там, господи, там жаловались, что там
[50:59.120 --> 51:01.120]  все, как бы система по-любому тормозила.
[51:01.120 --> 51:03.120]  Так что.
[51:03.120 --> 51:05.120]  Ну, как бы там среди
[51:05.120 --> 51:07.120]  среди всех первых ни одной попытки
[51:07.120 --> 51:09.120]  на нее сдать.
[51:09.120 --> 51:11.120]  Ну, последнюю, да.
[51:11.120 --> 51:13.120]  Там только более нижние, но тесты хорошие.
[51:13.120 --> 51:15.120]  Ну, нет, ну будут, да, решивать.
[51:15.120 --> 51:17.120]  Чего в чем проблема?
[51:17.120 --> 51:19.120]  На прекрасной платформе, пока будут решивать.
[51:19.120 --> 51:21.120]  Ну, да.
[51:21.120 --> 51:23.120]  Вот.
[51:23.120 --> 51:25.120]  Значит, так, 1К.
[51:25.120 --> 51:27.120]  А теперь давайте, нет, давайте
[51:27.120 --> 51:29.120]  представим себе, что у нас
[51:29.120 --> 51:31.120]  веса.
[51:31.120 --> 51:33.120]  Ну, вот у нас
[51:33.120 --> 51:35.120]  веса от 1
[51:35.120 --> 51:37.120]  до 2.
[51:41.120 --> 51:43.120]  Ну, да, в чем подлянка? Подлянка в том, что они
[51:43.120 --> 51:45.120]  бывают вещественные. То есть, может быть, вес там есть корень из 2,
[51:45.120 --> 51:47.120]  например.
[51:47.120 --> 51:49.120]  Или там 1.57.
[51:49.120 --> 51:51.120]  Да, вполне.
[51:51.120 --> 51:53.120]  Ну, можно еще е пополам.
[51:53.120 --> 51:55.120]  Можно, можно.
[51:55.120 --> 51:57.120]  Вот.
[51:57.120 --> 51:59.120]  Ну, можно корень из е там какой-нибудь.
[51:59.120 --> 52:01.120]  Вот.
[52:01.120 --> 52:03.120]  Все, что угодно.
[52:03.120 --> 52:05.120]  Что же в таком случае делать?
[52:07.120 --> 52:09.120]  Ну, на самом деле,
[52:09.120 --> 52:11.120]  вот.
[52:11.120 --> 52:13.120]  Вот что, да, что
[52:13.120 --> 52:15.120]  в таком случае
[52:15.120 --> 52:17.120]  можно делать?
[52:17.120 --> 52:19.120]  Ну, на самом деле, да, смотрите.
[52:19.120 --> 52:21.120]  Нет, погодите, погодите.
[52:21.120 --> 52:23.120]  Как это? Мы не знаем, что такое
[52:23.120 --> 52:25.120]  дэкстра.
[52:25.120 --> 52:27.120]  Да, напоминаю, мы сейчас из этого, мы
[52:27.120 --> 52:29.120]  выведем дэкстру, а не скажем, что там
[52:29.120 --> 52:31.120]  какая-то дэкстра есть, она нас выручит.
[52:31.120 --> 52:33.120]  Ну, лодка такая.
[52:33.120 --> 52:35.120]  Вообще, действительно, правильно замечено, что
[52:35.120 --> 52:37.120]  предположим, допустим, что у нас
[52:37.120 --> 52:39.120]  есть веса 1.1, 1.2
[52:39.120 --> 52:41.120]  и так далее, 1.9,
[52:41.120 --> 52:43.120]  предположим, что только такие бывают.
[52:43.120 --> 52:45.120]  Да?
[52:45.120 --> 52:47.120]  Тогда мы, как минимум мысленно,
[52:47.120 --> 52:49.120]  мы могли бы действительно все веса
[52:49.120 --> 52:51.120]  домножить на 10 и забабахать там
[52:51.120 --> 52:53.120]  какой-то там уже обычный
[52:53.120 --> 52:55.120]  BFS.
[52:55.120 --> 52:57.120]  Вот.
[52:57.120 --> 52:59.120]  Но это, конечно, долговато.
[52:59.120 --> 53:01.120]  Тем больше точность там весов,
[53:01.120 --> 53:03.120]  тем, конечно, у нас будут больше проблем.
[53:03.120 --> 53:05.120]  А если там это еще и реально
[53:05.120 --> 53:07.120]  корень из двух,
[53:07.120 --> 53:09.120]  вот.
[53:09.120 --> 53:11.120]  Что тогда можно делать?
[53:11.120 --> 53:13.120]  Ну, на самом деле, заметим,
[53:13.120 --> 53:15.120]  вот, идейно,
[53:15.120 --> 53:17.120]  идейно, пока я не верю себе, можно вообразить так.
[53:17.120 --> 53:19.120]  То есть,
[53:19.120 --> 53:21.120]  но хотя нет, чуть позже будем так себе
[53:21.120 --> 53:23.120]  воображать.
[53:23.120 --> 53:25.120]  Пока будем воображать
[53:25.120 --> 53:27.120]  по-другому.
[53:27.120 --> 53:29.120]  Ну, ладно, вот, идейно можно
[53:29.120 --> 53:31.120]  воображить все так. А кто сказал, что у нас
[53:31.120 --> 53:33.120]  слои имеют номера только 0, 3, 5,
[53:33.120 --> 53:35.120]  9 и так далее? А давайте
[53:35.120 --> 53:37.120]  себе вообразим, что у нас бывает слой номер
[53:37.120 --> 53:39.120]  корень из двух плюс пять.
[53:39.120 --> 53:41.120]  Или там E в степени
[53:41.120 --> 53:43.120]  не понадобится.
[53:43.120 --> 53:45.120]  Да,
[53:45.120 --> 53:47.120]  но заметим, что мы
[53:47.120 --> 53:49.120]  обрабатываем слои все-таки в порядке
[53:49.120 --> 53:51.120]  возрастания.
[53:51.120 --> 53:53.120]  Нет,
[53:53.120 --> 53:55.120]  пока мы на идейном
[53:55.120 --> 53:57.120]  уровне говорим.
[53:57.120 --> 53:59.120]  Это мы чуть позже обсудим.
[53:59.120 --> 54:01.120]  Но тут по-разному можно говорить.
[54:01.120 --> 54:03.120]  То есть, оставлю я тут как бы сейчас
[54:03.120 --> 54:05.120]  ответвление будет небольшое, да.
[54:05.120 --> 54:07.120]  Потому что идейно, конечно, да, если бы мы могли
[54:07.120 --> 54:09.120]  слои перебирать не дискретно,
[54:09.120 --> 54:11.120]  а непрерывно,
[54:11.120 --> 54:13.120]  то, в принципе,
[54:13.120 --> 54:15.120]  то же самое доказательство спокойно
[54:15.120 --> 54:17.120]  прокатывало бы,
[54:17.120 --> 54:19.120]  причем для весов от нуля до плюс
[54:19.120 --> 54:21.120]  бесконечности.
[54:21.120 --> 54:23.120]  Правда, пока это
[54:23.120 --> 54:25.120]  металгоритм, потому что непонятно, как слои
[54:25.120 --> 54:27.120]  реально перебирать.
[54:27.120 --> 54:29.120]  Но здесь есть два способа.
[54:29.120 --> 54:31.120]  Вот способ
[54:31.120 --> 54:33.120]  номер раз. Предположим, что веса у нас
[54:33.120 --> 54:35.120]  абсолютно произвольной и рациональности.
[54:35.120 --> 54:37.120]  То есть, может так случиться, что мы там даже
[54:37.120 --> 54:39.120]  живем в поле, а плюс Б как не из двух, да,
[54:39.120 --> 54:41.120]  поэтому все честно.
[54:41.120 --> 54:43.120]  Но мы знаем, что все веса ребер
[54:43.120 --> 54:45.120]  от единицы до двойки.
[54:45.120 --> 54:47.120]  Мы знаем, что веса ребер вычислимые.
[54:47.120 --> 54:49.120]  Нет, описываемые.
[54:49.120 --> 54:51.120]  Ну, мы подразумеваем,
[54:51.120 --> 54:53.120]  что у нас есть веса,
[54:53.120 --> 54:55.120]  они находятся в каком-то там
[54:55.120 --> 54:57.120]  нашем реализованном поле,
[54:57.120 --> 54:59.120]  там есть арифметика, который вообще делает
[54:59.120 --> 55:01.120]  завод единицы.
[55:01.120 --> 55:03.120]  Что делать с весами ребер, которые описываемые,
[55:03.120 --> 55:05.120]  но не вычислимые?
[55:05.120 --> 55:07.120]  О, Господи. Идти
[55:07.120 --> 55:09.120]  на другой предмет.
[55:17.120 --> 55:19.120]  Так, нет, мы здесь спокойно.
[55:19.120 --> 55:21.120]  Мы здесь все-таки программисты. Да, давайте без
[55:21.120 --> 55:23.120]  лишних парней.
[55:23.120 --> 55:25.120]  Так, спокойно.
[55:25.120 --> 55:27.120]  Так, Миша.
[55:27.120 --> 55:29.120]  Так, Миша, спокойно.
[55:29.120 --> 55:31.120]  Так, Миша, ау.
[55:31.120 --> 55:33.120]  Все, тихо.
[55:33.120 --> 55:35.120]  Значит, мы программисты, у нас все спокойно.
[55:35.120 --> 55:37.120]  Веса заданы.
[55:37.120 --> 55:39.120]  Мы можем, конечно, только еще сказать, что
[55:39.120 --> 55:41.120]  они там принадлежат какому-то типу
[55:41.120 --> 55:43.120]  данных, которые реализуют какое-то поле,
[55:43.120 --> 55:45.120]  которое умеет делать плюс-минус умножение
[55:45.120 --> 55:47.120]  какой-нибудь деления и сравнения.
[55:47.120 --> 55:49.120]  Ну ладно, нам по большому счету
[55:49.120 --> 55:51.120]  в общем-то только сложение вычитания надо здесь,
[55:51.120 --> 55:53.120]  поэтому...
[55:53.120 --> 55:55.120]  Вот. Но типичный пример,
[55:55.120 --> 55:57.120]  который может возникнуть, как я уже сказал, это
[55:57.120 --> 55:59.120]  A плюс B корней из двух, где A и B
[55:59.120 --> 56:01.120]  это рациональные числа, реализованные в какой-нибудь там
[56:01.120 --> 56:03.120]  стильной арифметике.
[56:07.120 --> 56:09.120]  Вот я поэтому и говорю,
[56:09.120 --> 56:11.120]  что у нас есть тип данных, кто это делает.
[56:11.120 --> 56:13.120]  Я говорю, у меня референс
[56:13.120 --> 56:15.120]  A плюс B корней из двух, где A и B рациональные числа.
[56:17.120 --> 56:19.120]  Ну да.
[56:19.120 --> 56:21.120]  В такую математику мы копать не будем.
[56:21.120 --> 56:23.120]  Нет, абстрактно я лучше так бы ушел.
[56:23.120 --> 56:25.120]  У нас есть тип...
[56:25.120 --> 56:27.120]  То есть они принадлежат какому-то типу данных
[56:27.120 --> 56:29.120]  T.
[56:29.120 --> 56:31.120]  То есть это под множество действительных чисел,
[56:31.120 --> 56:33.120]  и которая конкретно на этих числах
[56:33.120 --> 56:35.120]  умеет там делать сложение
[56:35.120 --> 56:37.120]  вычитания в идеале умножения деления
[56:37.120 --> 56:39.120]  и сравнения.
[56:41.120 --> 56:43.120]  Можно сказать, что можно делать погрешность
[56:43.120 --> 56:45.120]  ε, но тогда все.
[56:45.120 --> 56:47.120]  Нет, нельзя.
[56:47.120 --> 56:49.120]  У нас веса могут быть
[56:49.120 --> 56:51.120]  действительные теперь.
[56:53.120 --> 56:55.120]  Не, вот фишка в том, что сейчас
[56:55.120 --> 56:57.120]  мы придумаем алгоритм, который погрешности не потребует.
[56:59.120 --> 57:01.120]  Но потребует, правда, он от числа
[57:01.120 --> 57:03.120]  неожиданно еще одну
[57:03.120 --> 57:05.120]  конечно читерскую оптимизацию,
[57:05.120 --> 57:07.120]  читерскую штуку,
[57:07.120 --> 57:09.120]  это мы по числу должны
[57:09.120 --> 57:11.120]  уметь получать это число
[57:11.120 --> 57:13.120]  округленное вниз.
[57:17.120 --> 57:19.120]  Нет, у одного веса да,
[57:19.120 --> 57:21.120]  но если я сложу несколько таких чисел, у меня числа
[57:21.120 --> 57:23.120]  получится и больше.
[57:23.120 --> 57:25.120]  Ой, ой, ой, ой, ой
[57:27.120 --> 57:29.120]  Господи, вот, как сложно
[57:29.120 --> 57:31.120]  рассказывать простые вещи в продвинутом потоке.
[57:31.120 --> 57:33.120]  Да, никто не может поверить,
[57:33.120 --> 57:35.120]  что я рассказываю простые вещи,
[57:35.120 --> 57:37.120]  а не там, как говорится,
[57:37.120 --> 57:39.120]  да, мы сейчас точно цепных требей не будет.
[57:39.120 --> 57:41.120]  Нет.
[57:41.120 --> 57:43.120]  Не будет. Ну хотя, афурье,
[57:43.120 --> 57:45.120]  ну хотя бы линкат,
[57:45.120 --> 57:47.120]  да, ой,
[57:47.120 --> 57:49.120]  ну хотя бы тору, мы
[57:49.120 --> 57:51.120]  сегодня обсудим, а.
[57:51.120 --> 58:04.120]  это вот алгоритм, который умеет искать кратчайшие расстояния в целых неотрицательных весах за V+,
[58:04.120 --> 58:12.120]  правда с оговоркой, целые неотрицательные веса, которые вылезают в разрядность процессора,
[58:13.120 --> 58:24.120]  но это очень сложно алгоритм, чтобы за V+, а мы говорим предействительное,
[58:24.120 --> 58:34.120]  оказывается, если мы владеем такой операцией каким-то мистическим образом, то это работает неожиданным образом,
[58:35.120 --> 58:43.120]  то есть оказывается такое, то есть раньше мы говорили, что у каждой вершины есть слой,
[58:43.120 --> 58:47.120]  и этот слой совпадает с расстоянием, которое мы до него дошли, правда?
[58:47.120 --> 58:59.120]  Так вот, сейчас мы будем различать эти понятия, то есть будет понятие D от V, то есть это текущее расстояние, прям честное расстояние, которое мы нашли,
[58:59.120 --> 59:11.120]  а будет еще понятие, в каком слое она лежит, и layer от V будет то самое D от V, но округленное вниз.
[59:18.120 --> 59:20.120]  Ну, а вот у нас алгоритм такой.
[59:20.120 --> 59:34.120]  Что-то поменяется, поменяется то, что номер слоя не будет целым, а в такой версии он будет целым.
[59:34.120 --> 59:45.120]  Да, вот сейчас будет очень важно, да, вот сейчас формальные доказательства должны стать прям максимально.
[59:45.120 --> 59:54.120]  Чего? Чего N-вершин? Нет, смотрите, теперь я утверждаю следующее, то есть теперь у меня будет идея такая,
[59:54.120 --> 01:00:01.120]  то есть я буду запущу абсолютно тот же самый волновой алгоритм, или даже тот же самый алгоритм на двух очередях, на трех,
[01:00:01.120 --> 01:00:11.120]  на двух, в смысле трех, но фишка в том, что каждую вершину я буду класть в слой номер вот такой.
[01:00:11.120 --> 01:00:24.120]  Но я утверждаю тем не менее, что если у нас ребра от единицы до двойки, именно от единицы до двойки, то это будет работать.
[01:00:24.120 --> 01:00:42.120]  Это мы требуем для того, чтобы у нас, чтобы слоев было все-таки от v. Если это будет от одного до k, то это будет вот тоже vk плюс e.
[01:00:42.120 --> 01:00:48.120]  А если там было от 0,5 до 2, то нужно умножить на 2?
[01:00:48.120 --> 01:00:55.120]  Да, ну сейчас дойдем, давайте пока рассмотрим 1,2. То есть алгоритм вот тот же zvk плюс e.
[01:00:55.120 --> 01:01:01.120]  То есть разница в том, что, заметьте, может вообще так произойти, интересно, что d уменьшилось, а слой нет.
[01:01:01.120 --> 01:01:08.120]  Ну вдруг расстояние было 3,5, а мы нашли расстояние 3,42.
[01:01:08.120 --> 01:01:13.120]  Тогда, получается, вершина как лежала в слой номер 3, так и останется лежать в слой номер 3.
[01:01:13.120 --> 01:01:16.120]  Сейчас k – это длиннейший путь или что?
[01:01:16.120 --> 01:01:24.120]  Нет, k – это вот это вот. Ну просто в общем случае, то есть чуть продвинутая версия от одного до k, вот так будет.
[01:01:24.120 --> 01:01:28.120]  Одного до двух, что я еще раз?
[01:01:28.120 --> 01:01:34.120]  Вес каждого ребра. Либо от одного до двух, либо в следующей версии от одного до k.
[01:01:35.120 --> 01:01:42.120]  Это работает vk плюс e, а ну и vk равно 2, соответственно, это работает zvk плюс e.
[01:01:42.120 --> 01:01:44.120]  Так вот.
[01:01:44.120 --> 01:01:50.120]  А почему в vk плюс e? Ну то есть разве у нас каждая решима входит не больше, чем zvk?
[01:01:50.120 --> 01:01:59.120]  Ну да, но vk у нас только по одной причине, потому что мы эти vk слоев перебираем в явном виде.
[01:01:59.120 --> 01:02:06.120]  Понимаете, у нас там вот где-то в коде, а вот, видите, мы перебираем, у нас есть форик, который перебирает в vk.
[01:02:06.120 --> 01:02:10.120]  Вот ровно этот форик работает в vk.
[01:02:10.120 --> 01:02:14.120]  То есть вот этот форик и проверка на пустоту всех слоев.
[01:02:14.120 --> 01:02:18.120]  Со всеми не пустыми слоями мы реально работаем за o от e на самом деле.
[01:02:30.120 --> 01:02:34.120]  Ну да, добавить вершины может быть много раз, но суммарно e.
[01:02:34.120 --> 01:02:38.120]  Но vk возникает из-за того, что мы перебираем слои в честном виде.
[01:02:38.120 --> 01:02:46.120]  Вот я утверждаю, что оказывается, так, кстати, нет ли у меня, так, нет ли у меня мистического кода на эту тему.
[01:02:46.120 --> 01:02:49.120]  Так, здесь нету.
[01:02:53.120 --> 01:02:56.120]  О, а вот тут есть.
[01:02:59.120 --> 01:03:01.120]  Во.
[01:03:03.120 --> 01:03:05.120]  Вот, и обратите внимание.
[01:03:05.120 --> 01:03:09.120]  То есть представьте себе, что вектор d у нас теперь уже с long doubles.
[01:03:09.120 --> 01:03:12.120]  Ну или там просто с doubles, не важно.
[01:03:13.120 --> 01:03:15.120]  Вот.
[01:03:15.120 --> 01:03:18.120]  И работает это в итоге примерно вот в следующем образом.
[01:03:20.120 --> 01:03:23.120]  То есть, видите, ничего не поменялось, код прям идентичен.
[01:03:23.120 --> 01:03:31.120]  Возможно только n, то есть обратите внимание, что nd это типа long double и номер веса у нас вот такой.
[01:03:34.120 --> 01:03:42.120]  Ну я тут сделал, то есть, да, видите, вот этот код поменялся только в том плане, что мы тут что-то округлили куда-то там и к int загнали.
[01:03:43.120 --> 01:03:50.120]  Но в реальности, хотя тут могло произойти эпическая ситуация, что мы тут это вытянули вершину из слоя и тут же в нее добавили обратно.
[01:03:53.120 --> 01:03:54.120]  Нет, стоп.
[01:03:58.120 --> 01:03:59.120]  Могло, могло.
[01:04:00.120 --> 01:04:06.120]  Нет, нет, оно могло быть, потому что это происходит всегда, когда вот d от nv строго уменьшилось.
[01:04:07.120 --> 01:04:15.120]  Но если оно уменьшилось, как я уже сказал, от 3.5 до 3.42, то как бы тогда мы ее как бы выкинем из третьего слоя и тут же в нее добавим обратно.
[01:04:24.120 --> 01:04:29.120]  Нет, ну это, ну в long double это погрешность, да, но сейчас мы как бы опускаем эти вопросы.
[01:04:30.120 --> 01:04:35.120]  Но это не глобально, ну подумайте, если будет 2.9, то добавим во второй слой, ничего страшного не произойдет само по себе.
[01:04:39.120 --> 01:04:40.120]  Вот, ну теперь выискает вопрос.
[01:04:41.120 --> 01:04:48.120]  Но тут обратите внимание, у нас теперь парадигма совсем поменялся, у нас уже номер слоя, у нас уже не совпадает с расстоянием.
[01:04:49.120 --> 01:04:58.120]  То есть более того, оказывается даже неверно, что вершины перебираются в порядке возрастания или хотя бы неубывания расстояний до них, правда?
[01:04:59.120 --> 01:05:10.120]  То есть вполне вероятно, вот по вышеописанным причинам, что может быть, что в одном слое будет лежать вершина, до которой состояние 3.5, 3.4, 3.9, 3.2, там 3.5 и так далее.
[01:05:13.120 --> 01:05:17.120]  Вот, поэтому снова врубаем его величество, формальное доказательство.
[01:05:19.120 --> 01:05:21.120]  Ну да, формальность, конечно, да, разное бывает.
[01:05:22.120 --> 01:05:24.120]  Ну вот действительно, давайте себе представим.
[01:05:29.120 --> 01:05:32.120]  Что было бы, если бы у нас тут вот так.
[01:05:32.120 --> 01:05:57.120]  Вот, допустим у нас тут расстояние действительно 3.4, 1.7, так нет, 3.4 у нас не бывает, 1.1, 1, просто 1, 1.1, 2 и 1.57.
[01:05:57.120 --> 01:06:03.120]  Вот, значит смотрите, тогда работать будет так.
[01:06:04.120 --> 01:06:11.120]  То есть база понятна, что эта вершина попадет в нулевой слой с расстоянием ноль и будет там обработана, правда?
[01:06:13.120 --> 01:06:14.120]  Но теперь важный момент.
[01:06:14.120 --> 01:06:35.120]  При этой обработке нулевого слоя тогда получается, вот эта вершина попадет в слой номер 1, но не просто попадет в слой номер 1, она окажется там именно с расстоянием 1.4, она же могла попасть в слой номер 1 и с другим расстоянием, правда?
[01:06:36.120 --> 01:06:43.120]  Но она попадет, но в нее будет расстояние 1.4, причем до того, как мы начнем обрабатывать слой номер 1.
[01:06:44.120 --> 01:07:01.120]  Далее при обработке этой вершины с корректным расстоянием в третий слой, там в третьем слой окажется вершина, ну может или она там уже была, но она там теперь окажется с расстоянием 3.1.
[01:07:02.120 --> 01:07:04.120]  Ну в общем-то и так далее, видите, да?
[01:07:05.120 --> 01:07:17.120]  То есть у нас фишка оказывается в том, что просто каждая вершина найдет свое расстояние как бы до того, как мы ее слой будем обрабатывать.
[01:07:18.120 --> 01:07:23.120]  Вот здесь мы очень важно пользуемся тем, что у нас веса не меньше единицы.
[01:07:24.120 --> 01:07:26.120]  Вот, понятно, да?
[01:07:29.120 --> 01:07:36.120]  То есть получается, что если у вас дробные веса от 1 до 2, то никаких этих ваших декстер не надо.
[01:07:41.120 --> 01:07:45.120]  Более того, да, если верить Капилевичу, то в науке это называется А2АБФС.
[01:07:46.120 --> 01:07:57.120]  Ну в том плане, что, заметим, пусть у нас веса не от 1 до 2, а там от А до 2А, где А это там, я не знаю, миллиард, например.
[01:07:58.120 --> 01:08:05.120]  То представьте, да, вот задача, вам нужно идти к кратчайшей путь в графе, а веса у вас от миллиарда до 2 миллиардов, а вы знаете только БФС.
[01:08:06.120 --> 01:08:09.120]  Вот, на самом деле оказывается никаких проблем нет.
[01:08:10.120 --> 01:08:15.120]  Да, если вы знаете обычный А1КБФС, то вы его и забабахиваете.
[01:08:16.120 --> 01:08:20.120]  Просто каждая вершина попадает в слой номер расстояния делить на миллиард.
[01:08:21.120 --> 01:08:23.120]  Ну да, в данном случае понятно, делить на А условно.
[01:08:24.120 --> 01:08:26.120]  Ну в данном случае просто целочисленное деление.
[01:08:27.120 --> 01:08:28.120]  Да, если там это миллиард.
[01:08:29.120 --> 01:08:35.120]  То есть оказывается, да, видите, если у вас ребра большие, но при этом не слишком маленькие, то тоже в общем-то не проблема.
[01:08:36.120 --> 01:08:37.120]  Что?
[01:08:38.120 --> 01:08:46.120]  Ну как я уже сказал, то есть оказывается, то есть у вас как бы, знаете, не проблема, если у вас ребра бывают до 2 миллиардов.
[01:08:47.120 --> 01:08:49.120]  Проблема, если они при этом бывают меньше миллиарда.
[01:08:50.120 --> 01:08:52.120]  Если они при этом бывают меньше одной миллиарды.
[01:08:53.120 --> 01:08:54.120]  Да.
[01:08:55.120 --> 01:09:01.120]  То есть если у вас веса от миллиарда до 2 миллиардов, то оказывается в кратчайшей состоянии, что за то же самое В плюс Е.
[01:09:02.120 --> 01:09:03.120]  Вот это вот важный момент.
[01:09:03.120 --> 01:09:08.120]  Не, ну если они у вас целые от миллиарда до 2 миллиарда, то никаких проблем с точностями, естественно, нет.
[01:09:09.120 --> 01:09:10.120]  Вот, понятно?
[01:09:11.120 --> 01:09:12.120]  Есть проблема с симпатикой В на А.
[01:09:13.120 --> 01:09:14.120]  Вот.
[01:09:15.120 --> 01:09:16.120]  Ну почему?
[01:09:17.120 --> 01:09:30.120]  Ну там, ну как сказать, на самом деле, если у вас ребра, значит у вас действительно на отрезке от А до В, то это работает за О от получается В, В делить на А плюс Е.
[01:09:33.120 --> 01:09:38.120]  Вот такая красота.
[01:09:39.120 --> 01:09:42.120]  Но правда здесь оговорка, что А больше нуля.
[01:09:43.120 --> 01:09:45.120]  Это видно.
[01:09:46.120 --> 01:09:47.120]  Да.
[01:09:48.120 --> 01:09:54.120]  Потому что, нет, а давайте так, вот раньше мы заметили, что давайте введем нулевые ребра и скажем, что ничего не поменяется.
[01:09:55.120 --> 01:09:57.120]  Не, можно еще столько меньше попросить.
[01:09:58.120 --> 01:09:59.120]  Меньше нуля?
[01:09:59.120 --> 01:10:05.120]  Нет, ну давайте поаккуратнее.
[01:10:06.120 --> 01:10:07.120]  Ну потому что, опять же, так еще с простого.
[01:10:08.120 --> 01:10:12.120]  Почему в эту схему даже с целыми чистыми нельзя добавить, например, минус 1?
[01:10:13.120 --> 01:10:24.120]  Потому что, да, если у нас тут было ребро веса минус 1, то ломается инвариант на тему того, что как бы мы вершину добавим в нужный слой, причем до того, как этот слой закончит обрабатываться.
[01:10:25.120 --> 01:10:27.120]  Теперь это не так.
[01:10:27.120 --> 01:10:31.120]  Потому что как бы мы эту вершину добавим во второй слой, когда обрабатываем третий.
[01:10:32.120 --> 01:10:35.120]  Тогда нам надо либо возвращаться во второй слой, либо признавать, что мы не все обработали.
[01:10:36.120 --> 01:10:37.120]  Понимаете, да?
[01:10:38.120 --> 01:10:39.120]  Вот.
[01:10:40.120 --> 01:10:46.120]  Так что-то, ну, так что получается, что с отрицательными фейл уже в целых числах.
[01:10:47.120 --> 01:10:48.120]  А?
[01:10:49.120 --> 01:10:51.120]  Ну, у нас почему от нуля мы не можем?
[01:10:52.120 --> 01:10:53.120]  От нуля?
[01:10:54.120 --> 01:11:01.120]  А теперь давайте предположим, что у нас помимо весов от 1 до 2 есть просто, ну, допустим, даже хотя бы ноль.
[01:11:02.120 --> 01:11:03.120]  А почему просто от нуля до 2?
[01:11:04.120 --> 01:11:07.120]  Или даже просто от нуля до 2, еще сложнее.
[01:11:10.120 --> 01:11:19.120]  Давайте напишем отдельно, ну, как бы, когда из каждой вершины перед тем, как запускать обычный БФС будем запускать БФС 0.2.
[01:11:20.120 --> 01:11:21.120]  Ну, вот.
[01:11:22.120 --> 01:11:23.120]  Ага, казалось бы.
[01:11:24.120 --> 01:11:26.120]  Но только нужно аккуратно, чтобы 8 точек не поломать.
[01:11:27.120 --> 01:11:30.120]  Ну, есть одна, да, понимаете, просто есть одна марк.
[01:11:31.120 --> 01:11:36.120]  Нет, нужно ставить вершину марк, что типа мы из этой вершины уже, мы эту вершину уже проходили в таком БФС.
[01:11:37.120 --> 01:11:38.120]  Да, казалось бы, да.
[01:11:39.120 --> 01:11:40.120]  Но только вот теперь давайте посмотрим.
[01:11:41.120 --> 01:11:43.120]  Смотрим на наши доказательства здесь по индукции.
[01:11:46.120 --> 01:11:48.120]  Подлянка в том, что предположим, что у нас тут вес 0.
[01:11:50.120 --> 01:11:59.120]  Тогда оказывается, что эта вершина, значит, да, эта вершина, видимо, окажется в слое номер 3 и тоже с весом 3.1.
[01:12:00.120 --> 01:12:02.120]  Но есть одна маленькая проблема.
[01:12:03.120 --> 01:12:05.120]  Мы уже находимся в третьем слое.
[01:12:06.120 --> 01:12:11.120]  А кто сказал, что эта вершина не была обработана раньше?
[01:12:12.120 --> 01:12:19.120]  Вот могло же так произойти, что эта вершина была обработана в этом же слое раньше, только до нее расстояние было 3.2.
[01:12:20.120 --> 01:12:28.120]  Давайте добавляем вершину, добавляем вершину в слое, только если у нас целая часть уменьшается.
[01:12:30.120 --> 01:12:35.120]  Ну, в смысле, так мы когда ее, когда 3.2 было, там же все уменьшалось.
[01:12:35.120 --> 01:12:37.120]  У нее целая часть 3.2, у нее целая часть 3.
[01:12:38.120 --> 01:12:41.120]  Стал 3.1, целая часть тоже 3, но мы не добавляем вершину.
[01:12:42.120 --> 01:12:43.120]  Да, не добавляем.
[01:12:44.120 --> 01:12:45.120]  Но да, мы проиграли уже.
[01:12:46.120 --> 01:12:47.120]  Давайте сделаем гомотетическое.
[01:12:48.120 --> 01:12:50.120]  Потому что мы релаксировали из нее, предположили, что ее станет 3.2, а на самом деле 3.1.
[01:12:51.120 --> 01:12:55.120]  Давайте снова сделаем гомотетическое с коэффициентом 1 ате, и тогда такой ситуации уже не будет.
[01:12:56.120 --> 01:12:57.120]  Оили.
[01:12:58.120 --> 01:12:59.120]  А это минимальный вес больше 0 в ребра.
[01:13:00.120 --> 01:13:01.120]  Нет, супер.
[01:13:02.120 --> 01:13:04.120]  Но заметим, что у нас тут пофейлилась, есть у нас вес ребра 0, а не 0.бла-бла-бла.
[01:13:05.120 --> 01:13:06.120]  Нет, наоборот.
[01:13:07.120 --> 01:13:11.120]  Мы как бы, смотрите, мы отдельно разделяем вес ребра весу 0, и отдельно все остальные.
[01:13:12.120 --> 01:13:16.120]  И умножаем все ребра на такой вес, чтобы все, чтобы минимально.
[01:13:17.120 --> 01:13:18.120]  Да, да, да, кайфец, кайфец, кайфец.
[01:13:19.120 --> 01:13:21.120]  А после этого у нас такой ситуации уже не будет.
[01:13:22.120 --> 01:13:23.120]  Да, Оили.
[01:13:24.120 --> 01:13:29.120]  Потому что мы вершину, ну у нас как бы, мы не обработаем вершину с не своим.
[01:13:30.120 --> 01:13:31.120]  Сейчас.
[01:13:32.120 --> 01:13:33.120]  А мы не можем.
[01:13:33.120 --> 01:13:36.120]  Можем просто по словам пройтись два раза.
[01:13:37.120 --> 01:13:42.120]  Сначала рассматриваем только игроков веса 0, а потом уже рассматриваем адекватные ерунды.
[01:13:43.120 --> 01:13:47.120]  А вы гарантируете, что там не будет разветленная сеть нулевых, там, этих нулей?
[01:13:48.120 --> 01:13:52.120]  Давайте дотовый объект запустим нашим ритмом, сделаем супер вершины сжатые по ребрам весом.
[01:13:53.120 --> 01:13:54.120]  Сейчас, тихо, тихо, тихо, погоди.
[01:13:55.120 --> 01:13:56.120]  По очереди, пожалуйста.
[01:13:57.120 --> 01:14:00.120]  Сейчас каждую вершину в слой добавлю не более 1 раз, ну там юсты зарезут.
[01:14:00.120 --> 01:14:01.120]  Нет, в смысле, какая разница?
[01:14:02.120 --> 01:14:04.120]  Ну вы добавили, а это тут при чем?
[01:14:05.120 --> 01:14:07.120]  Вопрос же, проблема уже у нас не в том, сколько раз мы добавили вершину и не добавили.
[01:14:08.120 --> 01:14:15.120]  Проблема в том, что когда мы в слое до нее дожли и стали из нее релаксировать, как бы успели ли мы уже сделать ее расстояние правильным?
[01:14:16.120 --> 01:14:18.120]  Или она правильная только с точностью до слоя?
[01:14:23.120 --> 01:14:27.120]  Ну да, следующая, да, правильная идея будет, давайте находить минимальную, но это будет.
[01:14:28.120 --> 01:14:29.120]  Так, чего, давай.
[01:14:30.120 --> 01:14:38.120]  До того, как запускать алгоритм, сожмем все компоненты связности, ну как бы по ребрам веса 0 в одном супер вершине.
[01:14:39.120 --> 01:14:42.120]  И сразу, вот знаете, за что я действительно буду бить на экзамене?
[01:14:43.120 --> 01:14:46.120]  Это за употребление понятия компонента связности в ориентированном графе.
[01:14:47.120 --> 01:14:49.120]  А если слабая компонент связности?
[01:14:50.120 --> 01:14:54.120]  Да, понятия связности в ориентированном графе нету.
[01:14:55.120 --> 01:14:56.120]  Да, сейчас, ну я про это говорю.
[01:14:57.120 --> 01:14:59.120]  Есть понятие сильная связность, есть понятие слабая связность.
[01:15:00.120 --> 01:15:01.120]  Но понятия связности нет.
[01:15:03.120 --> 01:15:04.120]  Вот, такая важная оговорка.
[01:15:05.120 --> 01:15:06.120]  Да, давай.
[01:15:06.120 --> 01:15:08.120]  Я не понял все равно, почему не сняли.
[01:15:09.120 --> 01:15:19.120]  Просто сначала опять идти по слою и добавить в робро весу 0, а потом уже нормально его просмотреть.
[01:15:26.120 --> 01:15:28.120]  Ну как сказать, и...
[01:15:29.120 --> 01:15:32.120]  Нормально, если мы говорим, что они меньше единицы.
[01:15:33.120 --> 01:15:34.120]  Поэтому следующий слой.
[01:15:34.120 --> 01:15:36.120]  Нет, ну следующий-то слой, да, но...
[01:15:37.120 --> 01:15:42.120]  Ну не знаю, ну просто вот, а если, ну тогда, а если будет такая цепочка из нулей?
[01:15:43.120 --> 01:15:45.120]  Ну это мы пройдем в ФС 0.
[01:15:46.120 --> 01:15:53.120]  Ну когда мы, хорошо, когда мы пройдем по первой раз и рассмотрим только вот это вот нулевое,
[01:15:54.120 --> 01:15:57.120]  то может оказаться, что да, вот эту вершину 3.2 мы превратим в 3.1.
[01:15:58.120 --> 01:16:01.120]  Ну вот, но как бы из этой вершины, ну вот...
[01:16:04.120 --> 01:16:09.120]  Ну вот, но как бы вот эта, ну вот, но как бы вот эта вершина так 3.2 и останется,
[01:16:10.120 --> 01:16:13.120]  потому что мы эту вершину, допустим, в списке пробегали раньше и релаксировали из нее только 3.2.
[01:16:14.120 --> 01:16:17.120]  Так что ты как бы отложишь проблему на более длинную цепочку.
[01:16:19.120 --> 01:16:23.120]  А, вот я спрашиваю, то есть вершина может в слою лежать в новый раз?
[01:16:24.120 --> 01:16:25.120]  Да нет, да нет, почему много раз?
[01:16:26.120 --> 01:16:30.120]  Просто вот эта вершина лежит в слою раньше, и было у нее изначально 3.2, да?
[01:16:31.120 --> 01:16:35.120]  Ну вот, а эта лежит, допустим, еще раньше, там вообще было 3.5.
[01:16:36.120 --> 01:16:40.120]  Тогда при твоем проходе сначала мы увидим эту вершину и скажем, что это 3.2,
[01:16:41.120 --> 01:16:43.120]  а потом увидим эту вершину и скажем, что это 3.1.
[01:16:46.120 --> 01:16:48.120]  Мы можем на них топ сорта попасть?
[01:16:49.120 --> 01:16:54.120]  Топ, не факт, там бывают нулевые циклы вот эти.
[01:16:55.120 --> 01:16:58.120]  Нулевые циклы как раз без проблем, то есть это будет топ сорта с циклами,
[01:16:58.120 --> 01:16:59.120]  ну в плане как обычно.
[01:17:00.120 --> 01:17:03.120]  Отлично, только тема конденсация графа это другая тема,
[01:17:04.120 --> 01:17:07.120]  мы ее будем рассматривать, видимо, когда там, ну наверное недельки через две.
[01:17:09.120 --> 01:17:15.120]  А нет, не будем, а не будем, а не будем, а уже ДФС будет, да, логично.
[01:17:16.120 --> 01:17:19.120]  Почему не будем, потому что сегодня мы рассматриваем кратчайшее расстояние,
[01:17:20.120 --> 01:17:22.120]  дальше у нас теория игр идет, раз ПФС, да.
[01:17:23.120 --> 01:17:26.120]  Поэтому ДФС это, а потом, видимо, включим уже ДФС будет,
[01:17:26.120 --> 01:17:29.120]  у нас там все компоненты вершины и трехсвязности, вот.
[01:17:36.120 --> 01:17:38.120]  Осталось так понять, что это да, вот.
[01:17:39.120 --> 01:17:41.120]  И существуют ли они? Тут еще такой вопрос.
[01:17:42.120 --> 01:17:43.120]  Ладно, ну это будем отдельно писать.
[01:17:44.120 --> 01:17:47.120]  Ну вот, то есть да, там конечно можно пытаться как-то выкручиваться,
[01:17:48.120 --> 01:17:51.120]  но там разность топа, я просто хотел показать, что к сожалению,
[01:17:52.120 --> 01:17:55.120]  вещественные числа ноля, к сожалению, так просто не записывают.
[01:17:56.120 --> 01:18:00.120]  То есть это парадигма, вот, действительно, в этой парадигме, видите,
[01:18:01.120 --> 01:18:03.120]  то есть вот, кстати, вот полезная формальность, потому что вот, да,
[01:18:04.120 --> 01:18:06.120]  формальное доказательство не сработало, я обнаружил,
[01:18:07.120 --> 01:18:09.120]  что на самом деле там действительно принципиальная проблема этого алгоритма.
[01:18:10.120 --> 01:18:11.120]  Но как его можно допиливать?
[01:18:12.120 --> 01:18:16.120]  Ну, ведь, смотрите, вот магия ДФС-то была в том, что вот, знаете,
[01:18:17.120 --> 01:18:20.120]  вот ноль работал, когда у нас веса были целые, вот.
[01:18:21.120 --> 01:18:25.120]  А когда веса стали не целые, ноль работать перестал.
[01:18:26.120 --> 01:18:27.120]  Вот.
[01:18:28.120 --> 01:18:32.120]  Но поэтому мы сейчас пойдем, значит, забудем тогда, значит, да, хорошо,
[01:18:33.120 --> 01:18:35.120]  А2, БФС можно вот так вот локально прикольно закодить,
[01:18:36.120 --> 01:18:38.120]  но теперь давайте себе представим.
[01:18:39.120 --> 01:18:41.120]  Давайте вернемся, теперь пойдем немножко другим путем.
[01:18:48.120 --> 01:18:50.120]  Значит, пойдем немножко другим путем.
[01:18:51.120 --> 01:18:53.120]  Давайте себе представим, что у нас веса целые,
[01:18:56.120 --> 01:18:58.120]  но на этот раз до бесконечности.
[01:19:00.120 --> 01:19:01.120]  Ну, или просто, то есть.
[01:19:02.120 --> 01:19:03.120]  Но веса не бывает до бесконечности.
[01:19:04.120 --> 01:19:05.120]  Да, ну можно.
[01:19:06.120 --> 01:19:07.120]  Но сколько она большая, это значит, что будет бесконечности.
[01:19:08.120 --> 01:19:10.120]  Ну, можно до бесконечности, или просто обнаруживается,
[01:19:11.120 --> 01:19:15.120]  что не до бесконечности, а до к, но к уже не 5, 10, 20, 40,
[01:19:16.120 --> 01:19:18.120]  а к там, я не знаю, 10 в пятый, например.
[01:19:19.120 --> 01:19:25.120]  Ну, к, это видимо то, что не может присутствовать в общем-то.
[01:19:26.120 --> 01:19:30.120]  Ну, да, что-нибудь такое, может даже, может даже 10 в пятый,
[01:19:31.120 --> 01:19:32.120]  может даже 10 в девятый, да.
[01:19:33.120 --> 01:19:37.120]  Чтобы уже как бы там, то есть как бы все пути влезают, влезают,
[01:19:38.120 --> 01:19:39.120]  там соответственно в типа.
[01:19:46.120 --> 01:19:47.120]  Что значит испортить?
[01:19:48.120 --> 01:19:51.120]  А, или имеется в виду, что мы хотим сделать, чтобы у нас
[01:19:52.120 --> 01:19:53.120]  с методикой никак не зависело от к.
[01:19:54.120 --> 01:19:56.120]  А, ну хотелось бы, да.
[01:19:57.120 --> 01:19:59.120]  Но правда, ну, или по крайней мере думать.
[01:20:00.120 --> 01:20:01.120]  Нет, у нас даже пока более простая задача.
[01:20:02.120 --> 01:20:03.120]  Что делать, если у нас веса бывает от одного до миллиарда?
[01:20:04.120 --> 01:20:06.120]  Пока у нас просто нет приемлемого решения.
[01:20:07.120 --> 01:20:10.120]  Потому что vk плюс e нас в таком случае не устраивает.
[01:20:13.120 --> 01:20:15.120]  Ну, то есть, хотя в чем у нас проблема?
[01:20:15.120 --> 01:20:17.120]  Вk плюс e все еще маленькая.
[01:20:18.120 --> 01:20:22.120]  А vk, вот теперь вот внимательно давайте смотреть на алгоритм и думать.
[01:20:23.120 --> 01:20:26.120]  А за счет чего возникает 8 точки вот это vk плюс e?
[01:20:28.120 --> 01:20:31.120]  Вот в каком месте мы делаем именно vk действий?
[01:20:35.120 --> 01:20:39.120]  Да, когда, как так, когда перебираем слои и...
[01:20:45.120 --> 01:20:47.120]  Да, и все, да.
[01:20:48.120 --> 01:20:50.120]  Ну ладно, когда их еще создаем?
[01:20:52.120 --> 01:20:56.120]  Вот, заметим, что то, что происходит, то есть, по большому счету,
[01:20:57.120 --> 01:20:59.120]  реально в k раз мы делаем только вот эти две строчки.
[01:21:00.120 --> 01:21:02.120]  И вот это вот создание.
[01:21:03.120 --> 01:21:06.120]  Вот, но это создание я могу заменить на, скажем, там unordered map.
[01:21:07.120 --> 01:21:09.120]  И вот это вот создание.
[01:21:10.120 --> 01:21:14.120]  Вот, но это создание я могу заменить на, скажем, там unordered map.
[01:21:15.120 --> 01:21:20.120]  И замечаем, что вот это вот все, да?
[01:21:21.120 --> 01:21:24.120]  Ну, такой, для каждой вершины вот это мы проделываем v раз,
[01:21:25.120 --> 01:21:27.120]  не vk, а v раз.
[01:21:28.120 --> 01:21:30.120]  А вот это вот мы проделаем вообще e раз.
[01:21:31.120 --> 01:21:32.120]  Понимаем, да?
[01:21:33.120 --> 01:21:34.120]  Поэтому что нам нужно оптимизировать?
[01:21:35.120 --> 01:21:39.120]  По большому счету нам с вами нужно оптимизировать только одно.
[01:21:40.120 --> 01:21:43.120]  То есть, нам нужно сделать, то есть, по большому счету перебирать не vk слоев.
[01:21:43.120 --> 01:21:44.120]  Но заметим, что и...
[01:21:45.120 --> 01:21:46.120]  Но как же нам перебирать не vk слоев?
[01:21:47.120 --> 01:21:50.120]  Ну, мы заметим, что у нас вообще подавляющее большинство слоев,
[01:21:51.120 --> 01:21:52.120]  которые мы перебираем, они пустые.
[01:21:53.120 --> 01:21:57.120]  Да, но не факт, что именно они более чем v слоев будут пустыми всегда.
[01:21:58.120 --> 01:21:59.120]  Конечно же.
[01:22:00.120 --> 01:22:05.120]  Вот, то есть, у нас там гарантируется, что не пустых может быть вплоть до e слоев.
[01:22:06.120 --> 01:22:10.120]  Но заметим, что по большому счету каждый раз, когда мы ищем новую вершину,
[01:22:10.120 --> 01:22:17.120]  мы говорим о том, что так, нам в каждый момент времени нужен минимальный не пустой слой.
[01:22:18.120 --> 01:22:19.120]  Правда?
[01:22:20.120 --> 01:22:22.120]  Может быть, это текущий слой, если мы из него не все достали.
[01:22:23.120 --> 01:22:27.120]  А если он закончился, значит нам нужно следующий не пустой слой.
[01:22:28.120 --> 01:22:29.120]  Логично, да?
[01:22:32.120 --> 01:22:33.120]  Логично?
[01:22:34.120 --> 01:22:37.120]  И возникает такая естественная оптимизация.
[01:22:37.120 --> 01:22:45.120]  А давайте, ну такой, самый тупой, что можно сделать, а действительно, а давайте заведем там, я не знаю, мапчик.
[01:22:46.120 --> 01:22:49.120]  Ну, мапчик из nta в unordered set.
[01:22:52.120 --> 01:22:55.120]  На этот раз в чем мап не unordered, это обычный.
[01:22:57.120 --> 01:23:01.120]  И мы там честно храним все не пустые слои.
[01:23:03.120 --> 01:23:05.120]  Вот, но я так не буду сейчас писать, но вообразить себе такое можно.
[01:23:05.120 --> 01:23:06.120]  Вот то же самое, храним мапчик.
[01:23:07.120 --> 01:23:19.120]  И вот вместо этого фора, там ищем какой-нибудь там, допустим, пишем там что-нибудь там int l, там равно, условно этот, там map.
[01:23:22.120 --> 01:23:26.120]  точка там begin, frost, вот.
[01:23:27.120 --> 01:23:28.120]  Очень эмоциональный мап.
[01:23:29.120 --> 01:23:30.120]  Ну да.
[01:23:31.120 --> 01:23:32.120]  Вот, может вот что-нибудь такое.
[01:23:32.120 --> 01:23:33.120]  Вот.
[01:23:34.120 --> 01:23:35.120]  И дальше вот мы.
[01:23:36.120 --> 01:23:41.120]  А, ну ладно, мап у нас видимо, ладно, мап у нас видимо waves называется на самом деле, да.
[01:23:44.120 --> 01:23:45.120]  Так, ну ладно.
[01:23:47.120 --> 01:23:50.120]  Нет, слушайте, нет, мне что-то даже интересно стало, так.
[01:23:51.120 --> 01:23:54.120]  Так, мне что-то вот, даже интересно стало, давайте попробуем.
[01:23:54.120 --> 01:23:55.120]  Вот так давайте скажем.
[01:24:02.120 --> 01:24:03.120]  Вот, big k.
[01:24:08.120 --> 01:24:13.120]  Так, и вместо вот этого вот пишем, что waves у нас будет свой локальный, и это будет прям мап.
[01:24:14.120 --> 01:24:15.120]  Мап, а по-моему это мап.
[01:24:15.120 --> 01:24:22.120]  Так, и вместо вот этого вот пишем, что waves у нас будет свой локальный, и это будет прям мап.
[01:24:23.120 --> 01:24:26.120]  Map, int и там соответственно unordered set.
[01:24:32.120 --> 01:24:33.120]  Ну соответственно waves.
[01:24:34.120 --> 01:24:39.120]  И видимо на всякий случай, да k будет настолько большим, что тут будет long long.
[01:24:42.120 --> 01:24:43.120]  Ну и конечно.
[01:24:45.120 --> 01:24:46.120]  Давайте еще что-то тут.
[01:24:50.120 --> 01:24:51.120]  Так, что такое int, правда?
[01:24:52.120 --> 01:24:53.120]  Нет, безобразие.
[01:24:56.120 --> 01:24:59.120]  Ну ладно, тут можно 1g18 написать и не париться.
[01:25:00.120 --> 01:25:03.120]  А, ну или там, как там можно было написать еще?
[01:25:05.120 --> 01:25:11.120]  Так, слушайте, там как там этот выставили, это максимальное значение типа называется?
[01:25:12.120 --> 01:25:13.120]  Нет.
[01:25:30.120 --> 01:25:31.120]  А, вот так.
[01:25:31.120 --> 01:25:32.120]  Во.
[01:25:34.120 --> 01:25:38.120]  Не, unsigned long long это, наверное, ну можно везде unsigned, ну ладно, не важно.
[01:25:39.120 --> 01:25:40.120]  Не будем сейчас на эту тему париться.
[01:25:43.120 --> 01:25:44.120]  Значит, поехали.
[01:25:46.120 --> 01:25:47.120]  Теперь, значит, что поменять?
[01:25:47.120 --> 01:25:49.120]  Вот делаем прям вот абсолютно то же самое.
[01:25:52.120 --> 01:25:54.120]  Значит, только разница будет такая.
[01:25:54.120 --> 01:26:01.120]  Значит, вместо вот этого фора пишем while пока не waves.empty, вот сам по себе, да?
[01:26:06.120 --> 01:26:07.120]  И дальше пишем.
[01:26:10.120 --> 01:26:16.120]  Значит, давайте, можно так написать long long l равно, вот как мы вот это заклинание написали.
[01:26:25.120 --> 01:26:26.120]  Да.
[01:26:28.120 --> 01:26:34.120]  Да ладно, вот так waves.begin first.
[01:26:38.120 --> 01:26:40.120]  Ну и дальше вот мы это все и говорим.
[01:26:41.120 --> 01:26:49.120]  Ну и для того, чтобы это было адекватно, мы еще не забудем в конце сказать waves.erase от waves.begin.
[01:26:54.120 --> 01:26:55.120]  Да.
[01:26:55.120 --> 01:27:04.120]  Ну и для того, чтобы этот day не умер у нас в вакууме, мы напишем вот так.
[01:27:14.120 --> 01:27:15.120]  Да, тут, конечно, да.
[01:27:15.120 --> 01:27:17.120]  Вот получается вот такой волновой алгоритм.
[01:27:26.120 --> 01:27:27.120]  Вот.
[01:27:45.120 --> 01:28:05.120]  Ну да, ну ладно, есть тут еще одна маленькая оговорочка.
[01:28:08.120 --> 01:28:09.120]  Вот.
[01:28:09.120 --> 01:28:15.120]  Ну и в конце, конечно, return d.
[01:28:18.120 --> 01:28:19.120]  Ну distances.
[01:28:20.120 --> 01:28:22.120]  Вот такая красота получается.
[01:28:28.120 --> 01:28:31.120]  Нет, ну первым шагом мы берем нулевую волну.
[01:28:32.120 --> 01:28:35.120]  Значит, достаем оттуда по очереди все вершины.
[01:28:36.120 --> 01:28:40.120]  А, потому что, а, я тут забыл эту дайту, я строчку зря убрал.
[01:28:54.120 --> 01:28:58.120]  Ну да, waves.hotel действительно точка begin first.
[01:29:00.120 --> 01:29:02.120]  А нет, в данном случае еще прочее.
[01:29:03.120 --> 01:29:04.120]  Вот так.
[01:29:04.120 --> 01:29:05.120]  Да.
[01:29:05.120 --> 01:29:06.120]  Все.
[01:29:11.120 --> 01:29:12.120]  Вот.
[01:29:12.120 --> 01:29:16.120]  То есть вот тут в общем-то все достаточно получается просто вот с этой точки зрения.
[01:29:17.120 --> 01:29:18.120]  Вот.
[01:29:19.120 --> 01:29:28.120]  И получается этот алгоритм прекрасно работает с весами от одного до ка и даже от нуля до ка, если они целые.
[01:29:29.120 --> 01:29:31.120]  Ну доказательства абсолютно такое же.
[01:29:31.120 --> 01:29:38.120]  То есть разница только в том, что мы как бы просто все пустые слои пропускаем и на каждом шаге тупо находим минимальный свободный слой.
[01:29:40.120 --> 01:29:42.120]  То есть поэтому vk у нас исчезает.
[01:29:45.120 --> 01:29:46.120]  А вот да, вот вопрос.
[01:29:46.120 --> 01:29:48.120]  Вот я и спрашиваю, какая симптотика получается?
[01:29:48.120 --> 01:29:54.120]  То есть vk мы теперь убили, вот, как раму восьмого в Тайланде, да?
[01:29:54.120 --> 01:29:55.120]  Вот.
[01:29:56.120 --> 01:29:57.120]  Вот.
[01:29:58.120 --> 01:29:59.120]  Соответственно.
[01:29:59.120 --> 01:30:01.120]  А вот с ешкой у нас проблема теперь.
[01:30:05.120 --> 01:30:06.120]  В каком месте получается ve?
[01:30:08.120 --> 01:30:16.120]  Ну, типа если посмотреть вершинку, мы ее можем в очереди добавить условно по каждому ребру.
[01:30:18.120 --> 01:30:19.120]  Но не более.
[01:30:21.120 --> 01:30:23.120]  Ааа, ой-ой-ой.
[01:30:24.120 --> 01:30:26.120]  А у нас тут нет на эту тему отсечки.
[01:30:26.120 --> 01:30:28.120]  Ой-ой-ой.
[01:30:29.120 --> 01:30:30.120]  Ой-ой-ой.
[01:30:31.120 --> 01:30:32.120]  Ой-ой-ой.
[01:30:33.120 --> 01:30:34.120]  А почему ее нет?
[01:30:34.120 --> 01:30:35.120]  Ой-ой-ой.
[01:30:35.120 --> 01:30:39.120]  Потому что мы вершину прежде чем добавить в сет, мы ее удаляем из сета.
[01:30:39.120 --> 01:30:40.120]  Ой-ой-ой.
[01:30:44.120 --> 01:30:47.120]  Так что получается, да, вершина обработана не более чем один раз.
[01:30:48.120 --> 01:30:57.120]  И вот в такой реализации она в каждый момент времени работает за, в каждый момент времени вершина находится не более чем в одной, в одном сете.
[01:31:00.120 --> 01:31:01.120]  Да.
[01:31:02.120 --> 01:31:05.120]  Да, мелкая проблема, что мы тут делаем операции с сетом.
[01:31:05.120 --> 01:31:06.120]  Это нам важно.
[01:31:07.120 --> 01:31:16.120]  Поэтому делая сет, у нас получается ze log vk.
[01:31:18.120 --> 01:31:23.120]  Потому что слои у нас бывают, ну хотя, давайте.
[01:31:24.120 --> 01:31:25.120]  Максимум.
[01:31:25.120 --> 01:31:26.120]  А, да, все.
[01:31:27.120 --> 01:31:28.120]  Да, уговорил, уговорил, уговорил.
[01:31:28.120 --> 01:31:29.120]  Да, все, все, все, все.
[01:31:29.120 --> 01:31:31.120]  Неправ, неправ, неправ, неправ, все.
[01:31:32.120 --> 01:31:34.120]  Вот, вот теперь хорошо.
[01:31:35.120 --> 01:31:38.120]  То есть так, v плюс e log k.
[01:31:38.120 --> 01:31:41.120]  Это если вещественные веса, это если целые веса.
[01:31:41.120 --> 01:31:42.120]  Пока целые, да.
[01:31:43.120 --> 01:31:45.120]  С одной стороны, то есть смотрите.
[01:31:45.120 --> 01:31:47.120]  С одной стороны,
[01:31:48.120 --> 01:31:55.120]  С одной стороны, да, пока у нас целые, видим, да, то есть как бы работоспособность этого алгоритма сомнений не вызывает.
[01:31:56.120 --> 01:32:00.120]  Даже если, я тут еще и могу нолик прорисовать, это тоже будет работать, правда?
[01:32:00.120 --> 01:32:01.120]  Это даже работает.
[01:32:02.120 --> 01:32:03.120]  Вот.
[01:32:04.120 --> 01:32:05.120]  Но теперь фишка такая.
[01:32:05.120 --> 01:32:06.120]  Чего?
[01:32:07.120 --> 01:32:09.120]  Ну потому что, ну в смысле.
[01:32:10.120 --> 01:32:11.120]  Почему не елки?
[01:32:11.120 --> 01:32:13.120]  То есть у нас же каждая.
[01:32:14.120 --> 01:32:16.120]  А, ну кстати еще.
[01:32:16.120 --> 01:32:18.120]  Ладно, вот v плюс e на log k.
[01:32:18.120 --> 01:32:19.120]  У нас вообще log k.
[01:32:20.120 --> 01:32:22.120]  А потому что у нас, потому что.
[01:32:25.120 --> 01:32:30.120]  Ну в идеале хотелось бы сказать, что у нас размер сета в каждый момент времени не более чем k.
[01:32:31.120 --> 01:32:34.120]  Кажется не v плюс e log k, а v плюс e log k.
[01:32:34.120 --> 01:32:35.120]  Ну v плюс e, нет.
[01:32:35.120 --> 01:32:36.120]  Ну почему v плюс e, нет.
[01:32:36.120 --> 01:32:42.120]  Ну v, ну как бы, мы же как бы удаляем вот этот вот минимальный слой как бы из мапа за log k.
[01:32:42.120 --> 01:32:44.120]  Мы же не добавляем те вершины, которые недостижимы.
[01:32:44.120 --> 01:32:45.120]  Не добавляем.
[01:32:45.120 --> 01:32:47.120]  Но мы же, ну удаление это за log k делается.
[01:32:47.120 --> 01:32:48.120]  Вот это вот.
[01:32:48.120 --> 01:32:50.120]  Видите, вот это вот последняя строчечка.
[01:32:51.120 --> 01:32:52.120]  Это log k.
[01:32:52.120 --> 01:32:54.120]  Поэтому v log k мы добавить должны.
[01:32:55.120 --> 01:32:56.120]  Хотя.
[01:32:56.120 --> 01:32:58.120]  Ну не каждая вершина, а только те которые.
[01:32:59.120 --> 01:33:00.120]  А, ну ты прав в принципе, да.
[01:33:00.120 --> 01:33:01.120]  Ну ладно.
[01:33:01.120 --> 01:33:02.120]  Ну да, согласен.
[01:33:02.120 --> 01:33:05.120]  Да, мы добавляем только вершины, которые доступны из.
[01:33:06.120 --> 01:33:07.120]  Из эски да, потому что.
[01:33:08.120 --> 01:33:09.120]  Ну да.
[01:33:09.120 --> 01:33:10.120]  Как мы получили делу?
[01:33:12.120 --> 01:33:13.120]  Ну потому что нет.
[01:33:13.120 --> 01:33:17.120]  Количество вершин, которые мы обрабатываем, не менее чем там количество river плюс один.
[01:33:19.120 --> 01:33:20.120]  Ладно, не более.
[01:33:24.120 --> 01:33:25.120]  Почему log v?
[01:33:32.120 --> 01:33:33.120]  Ну у нас еще более сильная оценка.
[01:33:34.120 --> 01:33:35.120]  Ну а тут разные оценки, да.
[01:33:36.120 --> 01:33:37.120]  Нет, смотрите.
[01:33:37.120 --> 01:33:38.120]  Просто и то и то можно.
[01:33:38.120 --> 01:33:41.120]  Есть оценка log k, потому что мы в каждый момент времени храним не более чем k слоев.
[01:33:42.120 --> 01:33:44.120]  Но можно сказать, что это е log v.
[01:33:45.120 --> 01:33:47.120]  Да, можно сказать действительно е log v.
[01:33:48.120 --> 01:33:50.120]  Хотя тут мелкая проблема.
[01:33:50.120 --> 01:33:52.120]  Пустые слои мы просто так не подчищаем.
[01:33:52.120 --> 01:33:53.120]  Обратите внимание.
[01:33:56.120 --> 01:33:57.120]  Обратите внимание.
[01:33:57.120 --> 01:34:00.120]  Для того, чтобы это так было, мы должны были сказать, что вот делаем erase.
[01:34:00.120 --> 01:34:04.120]  И если сет опустел, то значит мы должны перерезить.
[01:34:06.120 --> 01:34:08.120]  Ну констант, может какой-то стоит.
[01:34:08.120 --> 01:34:09.120]  Хотя в принципе если.
[01:34:10.120 --> 01:34:11.120]  Да, если это.
[01:34:11.120 --> 01:34:12.120]  Ладно, так.
[01:34:12.120 --> 01:34:13.120]  Давайте так напишем.
[01:34:13.120 --> 01:34:15.120]  Е log v с...
[01:34:16.120 --> 01:34:19.120]  А это стоит в том, что у нас будет не е log k, а именно е log v.
[01:34:20.120 --> 01:34:21.120]  Да, с оговоркой.
[01:34:21.120 --> 01:34:25.120]  Хотя без этого как бы на самом деле будет всего лишь е log e.
[01:34:26.120 --> 01:34:28.120]  Е log e всего лишь что?
[01:34:29.120 --> 01:34:30.120]  Это е v.
[01:34:31.120 --> 01:34:35.120]  Заметим следующее, что мы добавляем вершину слоя не более чем е раз, но е плюс один.
[01:34:36.120 --> 01:34:39.120]  Ну один, потому что мы стартовую с нулем добавляем.
[01:34:40.120 --> 01:34:45.120]  То есть каждое ребро и ицирует не более одну попытку добавления, следовательно не более один новый слой.
[01:34:45.120 --> 01:34:47.120]  Следовательно слоев всего не более чем е.
[01:34:47.120 --> 01:34:48.120]  Даже без...
[01:34:48.120 --> 01:34:53.120]  То есть как бы без этой оговорки с подчисткой е log e, с оговоркой с подчисткой е log v.
[01:34:54.120 --> 01:35:01.120]  Но правда это на самом деле не принципиально, потому что по модулю того, что как мы уже говорили, мы можем как бы кратный реобраз сжать.
[01:35:02.120 --> 01:35:04.120]  За o от v плюс e без всяких мабов.
[01:35:05.120 --> 01:35:08.120]  И после этого тогда log e и log v это будет одно и то же.
[01:35:09.120 --> 01:35:11.120]  Ну потому что е не больше чем v квадрат.
[01:35:12.120 --> 01:35:14.120]  Почему у нас вообще log k было изначально?
[01:35:14.120 --> 01:35:15.120]  Потому что к слою.
[01:35:15.120 --> 01:35:18.120]  Ну потому что ты сейчас обрабатываешь слой номер l.
[01:35:18.120 --> 01:35:24.120]  Заметим, что тогда у тебя актуальными слоями может быть только слой l, l плюс один, l плюс два и так далее, l плюс k.
[01:35:24.120 --> 01:35:27.120]  Потому что до больших расстояний ты просто не дожел, а все меньшее ты зачистил.
[01:35:28.120 --> 01:35:32.120]  Следовательно там, ну ладно, не log k, а там формально можно вообще сказать k плюс один.
[01:35:33.120 --> 01:35:35.120]  Ну вдруг там k у вас ноль.
[01:35:35.120 --> 01:35:37.120]  Хотя что это за задача вообще такая, да?
[01:35:38.120 --> 01:35:42.120]  А нет, ну знаете, это надо, потому что если k равно 1, у вас логарифом будет ноль.
[01:35:42.120 --> 01:35:43.120]  И это не очень хорошо.
[01:35:45.120 --> 01:35:46.120]  Поэтому лучше k плюс один.
[01:35:46.120 --> 01:35:47.120]  Написать это будет надежно.
[01:36:03.120 --> 01:36:04.120]  Сейчас какое удаление?
[01:36:08.120 --> 01:36:09.120]  Ну это да.
[01:36:14.120 --> 01:36:15.120]  Ну пойди, пойди, пойди.
[01:36:15.120 --> 01:36:16.120]  Ну тут давай вот.
[01:36:16.120 --> 01:36:18.120]  Нет, тут на эту тему можно вообще думать.
[01:36:19.120 --> 01:36:20.120]  Нет.
[01:36:20.120 --> 01:36:23.120]  Ну скажем так, просто не порти асимптотику.
[01:36:23.120 --> 01:36:26.120]  Нет, понятно, что unordered set лучше убрать там скажем.
[01:36:26.120 --> 01:36:27.120]  Ну его можно заменить.
[01:36:27.120 --> 01:36:30.120]  Ну сам unordered set можно, как уже говорилось ранее, заменить на очередь.
[01:36:32.120 --> 01:36:34.120]  Да, там сложнее будет удалять.
[01:36:34.120 --> 01:36:36.120]  Ну там, дайте, там есть разные читы.
[01:36:36.120 --> 01:36:37.120]  Знаете, есть такой чит.
[01:36:37.120 --> 01:36:42.120]  А давайте вместо этого unordered set, если вас константа смущает, сделаем двусвязный список.
[01:36:44.120 --> 01:36:45.120]  И будем удалять оттуда.
[01:36:45.120 --> 01:36:48.120]  И на каждую вершину, естественно, хранить итератор, по нему удалять, потом вставлять.
[01:36:49.120 --> 01:36:50.120]  Вот, ну конечно, да.
[01:36:51.120 --> 01:36:53.120]  Наверное, по константе будет лучше.
[01:36:53.120 --> 01:36:58.120]  Ну нет, ладно, это психологически лучше для нас, потому что unordered set пока для нас какая-то черная магия с ушами.
[01:37:00.120 --> 01:37:03.120]  Нет, ну там где-то амортизация, где-то вероятность.
[01:37:04.120 --> 01:37:05.120]  Нет, подождите.
[01:37:05.120 --> 01:37:07.120]  Нет, лист экологически честный, да.
[01:37:08.120 --> 01:37:09.120]  Вот.
[01:37:09.120 --> 01:37:11.120]  Так что set он, да, лист он молодец.
[01:37:12.120 --> 01:37:16.120]  Можно на самом деле даже обойтись и обычными векторами или даже очередями.
[01:37:17.120 --> 01:37:19.120]  То есть для этого просто достаточно завести массив user.
[01:37:22.120 --> 01:37:23.120]  И так.
[01:37:24.120 --> 01:37:26.120]  Ну вот, и тогда как бы никаких криминалов не будет.
[01:37:27.120 --> 01:37:28.120]  Вот.
[01:37:28.120 --> 01:37:29.120]  Можно.
[01:37:29.120 --> 01:37:33.120]  Как бы не обязательно, потому что когда рассматриваем вершину слова, мы знаем какое расстояние для этого.
[01:37:34.120 --> 01:37:35.120]  Ну вот.
[01:37:35.120 --> 01:37:37.120]  Мы можем проверять, что расстояние вершины совпадает с расстоянием слова.
[01:37:38.120 --> 01:37:41.120]  Э, ну, а, пока да, хорошо.
[01:37:42.120 --> 01:37:43.120]  Это не достаточно, потому что у нас вершина.
[01:37:43.120 --> 01:37:44.120]  Ладно, уговорили, пока да.
[01:37:46.120 --> 01:37:52.120]  Ну вот, так что-то у нас пока получился вот такой вот красивый bfs, прости, господи.
[01:37:53.120 --> 01:37:54.120]  Да, за е лог е.
[01:37:54.120 --> 01:37:55.120]  Ну или там е лог в.
[01:37:55.120 --> 01:37:57.120]  А, нет, не может быть, не может быть.
[01:37:58.120 --> 01:37:59.120]  Ну просто.
[01:37:59.120 --> 01:38:00.120]  Нет, просто погодите.
[01:38:00.120 --> 01:38:01.120]  Сейчас погодите.
[01:38:01.120 --> 01:38:03.120]  Ладно, давайте сейчас не будем говорить о коде.
[01:38:03.120 --> 01:38:04.120]  Давайте поговорим об идейности.
[01:38:05.120 --> 01:38:11.120]  То есть идейно у нас появился алгоритм, который работает за е лог в с весами целыми от 1 до бесконечности.
[01:38:12.120 --> 01:38:13.120]  Хотя я хочу сказать вопрос.
[01:38:14.120 --> 01:38:18.120]  А если я добавлю дробные веса?
[01:38:21.120 --> 01:38:25.120]  Добавлю дробные веса, но у меня здесь вместо лонг-лонга.
[01:38:27.120 --> 01:38:28.120]  Вместо лонг-лонга, да?
[01:38:29.120 --> 01:38:30.120]  Появится лонг-дабл.
[01:38:40.120 --> 01:38:41.120]  А шо такое?
[01:38:43.120 --> 01:38:44.120]  Нет.
[01:38:45.120 --> 01:38:49.120]  Лонг-дабл мы не храним в анордерит ците, мы его храним в мапе, причем не анордерит.
[01:38:51.120 --> 01:38:52.120]  Так шо все нормально.
[01:38:58.120 --> 01:39:00.120]  Лонг-лонг-дабл это что-то очень странное.
[01:39:01.120 --> 01:39:04.120]  А вы это смеетесь, да, ну ладно, уберу.
[01:39:05.120 --> 01:39:09.120]  Вообще на самом деле лонг-дабл в мапе это очень плохо.
[01:39:10.120 --> 01:39:11.120]  Ой, да, да, да, давайте.
[01:39:12.120 --> 01:39:13.120]  Все.
[01:39:16.120 --> 01:39:17.120]  Так, хорошо.
[01:39:18.120 --> 01:39:20.120]  Давайте сделаем так, как мы уже поступали на этом занятии.
[01:39:21.120 --> 01:39:23.120]  Да, так, сделаем так, как мы поступали.
[01:39:24.120 --> 01:39:25.120]  Ой, так, все.
[01:39:26.120 --> 01:39:28.120]  Нет, поступим, как мы уже поступали раньше.
[01:39:29.120 --> 01:39:32.120]  Представим на месте лонг-дабла другой тип и продолжим получать удовольствие.
[01:39:33.120 --> 01:39:34.120]  Вот.
[01:39:35.120 --> 01:39:36.120]  Соответственно.
[01:39:37.120 --> 01:39:38.120]  Все просто.
[01:39:39.120 --> 01:39:42.120]  Пообразите себе вместо лонг-дабла этот ваш любимый тип А плюс Б корней из двух.
[01:39:45.120 --> 01:39:46.120]  Символ не вычисляет.
[01:39:47.120 --> 01:39:48.120]  То есть нет, а что?
[01:39:49.120 --> 01:39:50.120]  Причем тут символы А плюс Б корней из двух?
[01:39:51.120 --> 01:39:53.120]  Это числа, которые вы можете абсолютно точно складывать, учитать, умножать, делить, сравнивать, правда?
[01:39:53.120 --> 01:39:54.120]  Абсолютно точно, целых числа.
[01:39:55.120 --> 01:40:04.120]  По модулю какой-то там длинной арифметики, возможно, фуриатины, но мы пока будем считать, что это все равно за единицу делается, потому что веса там адекватные.
[01:40:05.120 --> 01:40:06.120]  Вот.
[01:40:09.120 --> 01:40:11.120]  Ну вот, вообрази в себе такую ситуацию.
[01:40:12.120 --> 01:40:13.120]  Да, лонг-дабл без погрешностей.
[01:40:14.120 --> 01:40:16.120]  Тогда будет ли работать такой алгоритм?
[01:40:19.120 --> 01:40:22.120]  Вот парадоксально, но такой алгоритм работает.
[01:40:23.120 --> 01:40:24.120]  Ну да.
[01:40:25.120 --> 01:40:37.120]  Потому что да, мы отвергли в свое время идею о том, что как бы у нас не могут быть слой с непрерывными весами, но на самом деле вот в этой реализации они неожиданно появились.
[01:40:38.120 --> 01:40:46.120]  То есть теперь у нас есть все слои, то есть от нуля до плюс бесконечности, просто реально мы там в мапе храним только те, которые нам реально понадобились.
[01:40:48.120 --> 01:40:51.120]  И заметь, и доказательство вполне себе работает.
[01:40:52.120 --> 01:41:02.120]  То есть обратите внимание, да, то есть у нас там доказательство получается так, то есть доказательство вполне себе, то есть получается на это мы рассматриваем прям путь.
[01:41:03.120 --> 01:41:19.120]  И тогда замечаем, что если тут у нас 1.7, 1.9, корень из двух и так далее, то каждая вершина действительно оказывается в слое номер 1.7, 3.6, 3.6 плюс корень из двух и так далее.
[01:41:20.120 --> 01:41:21.120]  Понимаете, да?
[01:41:22.120 --> 01:41:35.120]  То есть заметим, что у нас тут не может быть так, что у вершины там внутри одного слоя там бывают какие-то изменения, там 3.4, 3.3, то есть теперь у нас все, 3.3 и 3.4 это теперь два разных слоя железобетона.
[01:41:36.120 --> 01:41:40.120]  То есть Вася и Вася плюс Эпсилон это две принципиально разные личности.
[01:41:41.120 --> 01:41:42.120]  Вот.
[01:41:43.120 --> 01:41:45.120]  И поэтому получается, что про алгоритм работает.
[01:41:45.120 --> 01:41:46.120]  Ну почему?
[01:41:47.120 --> 01:41:48.120]  Нет, ну в чем проблема?
[01:41:48.120 --> 01:41:49.120]  Ну что делать?
[01:41:49.120 --> 01:41:50.120]  Да.
[01:41:50.120 --> 01:41:51.120]  Нет, почему жалко-то?
[01:41:51.120 --> 01:41:53.120]  Кто сказал, что как бы этот Эпсилон меняет в худшую сторону?
[01:41:54.120 --> 01:41:55.120]  Уменяет личность.
[01:41:56.120 --> 01:41:57.120]  И что?
[01:41:58.120 --> 01:42:00.120]  Ну личность это по-любому такая штука, которая как бы либо...
[01:42:01.120 --> 01:42:02.120]  Изменение это раздвоение.
[01:42:03.120 --> 01:42:04.120]  Ну да.
[01:42:05.120 --> 01:42:08.120]  Как бы любая личность по-любому либо развивается, либо деградирует как-то, знаете.
[01:42:08.120 --> 01:42:11.120]  А, потому что деградация это развитие со знаком минус, ну да-да-да.
[01:42:12.120 --> 01:42:13.120]  Ой, ну это уже да.
[01:42:15.120 --> 01:42:18.120]  Я не деградирую, я отрицательно развиваюсь.
[01:42:19.120 --> 01:42:20.120]  Да.
[01:42:20.120 --> 01:42:22.120]  Я просто сторонник отрицательного развития, да.
[01:42:23.120 --> 01:42:24.120]  Вот.
[01:42:24.120 --> 01:42:25.120]  Отлично.
[01:42:25.120 --> 01:42:26.120]  Всегда буду использовать.
[01:42:27.120 --> 01:42:28.120]  Ну по-любому.
[01:42:29.120 --> 01:42:30.120]  Да, по-любому.
[01:42:31.120 --> 01:42:32.120]  Да, по-любому.
[01:42:33.120 --> 01:42:34.120]  Да, по-любому.
[01:42:35.120 --> 01:42:36.120]  Да.
[01:42:36.120 --> 01:42:37.120]  Всегда буду использовать.
[01:42:38.120 --> 01:42:40.120]  Ну можно так сказать, конечно, да.
[01:42:41.120 --> 01:42:42.120]  Так вот.
[01:42:43.120 --> 01:42:47.120]  Но заметим, что магия это работает и считает так, что не просто работает с вещественными весами.
[01:42:48.120 --> 01:42:55.120]  Но еще и заметим, что она на самом деле будет прекрасно работать, даже если веса от нуля до бесконечности произвольны.
[01:43:00.120 --> 01:43:01.120]  Включить-то.
[01:43:01.120 --> 01:43:02.120]  А что думаешь мне?
[01:43:03.120 --> 01:43:06.120]  А не включительно, ну как бы давайте считать нули к эпсилонам и радоваться жить.
[01:43:07.120 --> 01:43:08.120]  А не включительно, понятно.
[01:43:09.120 --> 01:43:20.120]  А также абсолютно идентично, потому что если у тебя тут ноль, значит вот эта вершина будет добавлена в очередь номер 3.6 плюс корень из двух.
[01:43:23.120 --> 01:43:24.120]  Если она там не была раньше, конечно.
[01:43:25.120 --> 01:43:27.120]  Ну просто в это, просто почему здесь все стало хорошо?
[01:43:27.120 --> 01:43:30.120]  Потому что, да, очередей стало континуально много.
[01:43:33.120 --> 01:43:34.120]  Вот.
[01:43:35.120 --> 01:43:38.120]  Но зато мы гарантируем, что теперь номер очереди совпадает с реальным расстоянием.
[01:43:40.120 --> 01:43:44.120]  То есть вот когда мы их начали различать, у нас там в айхике какие-то проблемы.
[01:43:46.120 --> 01:43:47.120]  Вот.
[01:43:48.120 --> 01:43:49.120]  А теперь проблем никаких нет.
[01:43:50.120 --> 01:43:51.120]  То есть теперь расстояние есть я.
[01:43:52.120 --> 01:43:53.120]  Да, все.
[01:43:54.120 --> 01:43:55.120]  Расстояние есть номер слоя.
[01:43:55.120 --> 01:44:12.120]  Так что получается, но так же получается мы только что научились за е-лог-е искать кратчайшие пути в графе, где веса абсолютно произвольные, ну по модулю всяких эпсилонов, но не меньше нуля.
[01:44:13.120 --> 01:44:19.120]  То есть мы продолжаем пользоваться тем, что веса не меньше нуля, чтобы у нас как бы не оказывалось, что мы идем в предыдущий слой, который уже ранее обработали.
[01:44:20.120 --> 01:44:22.120]  То есть видите, мы пользуемся тем, что мы слои перебираем в порядке возрастания.
[01:44:26.120 --> 01:44:27.120]  Неплохо так, правда?
[01:44:30.120 --> 01:44:32.120]  Это такой волновой БФС на бесконечность.
[01:44:34.120 --> 01:44:37.120]  Да, правда, станут дарицитами или векторами.
[01:44:38.120 --> 01:44:46.120]  Но на самом деле есть вполне себе естественная оптимизация, которая говорит нам следующее.
[01:44:47.120 --> 01:44:52.120]  Слушайте, а вот ж по этому раскладу нам вообще эти волны не хранить.
[01:44:56.120 --> 01:45:03.120]  Потому что вот альтернативная реализация, так сейчас давайте вот эпшилон дабл, сейчас я ее, вот так.
[01:45:04.120 --> 01:45:05.120]  Смотрите, сейчас будет весело.
[01:45:06.120 --> 01:45:09.120]  Это у нас работает за, напоминаю да, е-лог-е.
[01:45:10.120 --> 01:45:11.120]  Е.
[01:45:12.120 --> 01:45:13.120]  Чего?
[01:45:14.120 --> 01:45:16.120]  Ну ладно, плюс В.
[01:45:20.120 --> 01:45:24.120]  А теперь смотрите, сейчас мы сделаем абсолютно то же самое.
[01:45:25.120 --> 01:45:26.120]  Не без волны.
[01:45:29.120 --> 01:45:31.120]  Нет волнов.
[01:45:32.120 --> 01:45:33.120]  Нет волнов.
[01:45:34.120 --> 01:45:35.120]  Да, да, да.
[01:45:36.120 --> 01:45:38.120]  Но нет волнов, нет.
[01:45:39.120 --> 01:45:42.120]  Как сделать это без волнов?
[01:45:45.120 --> 01:45:46.120]  Нет.
[01:45:47.120 --> 01:45:49.120]  Используй альтернативную реализацию.
[01:45:50.120 --> 01:45:51.120]  Нет.
[01:45:51.120 --> 01:45:52.120]  В.
[01:45:54.120 --> 01:45:55.120]  Вэйтэмон.
[01:45:58.120 --> 01:45:59.120]  Значит, смотрите.
[01:46:00.120 --> 01:46:02.120]  Смотрите, ZD is quite простая.
[01:46:03.120 --> 01:46:05.120]  Нет, плохо звучит.
[01:46:08.120 --> 01:46:12.120]  Да, господи, слушай, я сейчас гугл транслейт включу.
[01:46:15.120 --> 01:46:16.120]  Ну да.
[01:46:17.120 --> 01:46:18.120]  Заказали тут, а можно на китайском.
[01:46:18.120 --> 01:46:21.120]  В связи с последними новостями, у всех R1, поэтому.
[01:46:22.120 --> 01:46:23.120]  Что?
[01:46:24.120 --> 01:46:25.120]  У всех R1 чего? Китайского?
[01:46:26.120 --> 01:46:27.120]  Да.
[01:46:28.120 --> 01:46:29.120]  Да.
[01:46:30.120 --> 01:46:31.120]  А что за новости?
[01:46:32.120 --> 01:46:33.120]  А R1 это что значит?
[01:46:34.120 --> 01:46:35.120]  Это типа, что все английские знают или что?
[01:46:36.120 --> 01:46:37.120]  А что за?
[01:46:38.120 --> 01:46:39.120]  А что за новости?
[01:46:40.120 --> 01:46:41.120]  Я не в теме.
[01:46:42.120 --> 01:46:46.120]  Все, у кого B2+, автоматически на китайском показывают.
[01:46:46.120 --> 01:46:47.120]  Пока.
[01:46:48.120 --> 01:46:49.120]  Китайский B2, короче, будет.
[01:46:50.120 --> 01:46:52.120]  А, ну да, да, да.
[01:46:53.120 --> 01:46:55.120]  Как говорится, да.
[01:46:56.120 --> 01:47:00.120]  Да, всем привет, а если в прошлом, тогда всем бонжур, да.
[01:47:01.120 --> 01:47:02.120]  А если в будущем, ну тогда нихао, действительно.
[01:47:03.120 --> 01:47:06.120]  Нет, самое страшное, что это шутка от азиатов еще 16-го года.
[01:47:07.120 --> 01:47:12.120]  Но, видимо, в Киргизии действительно было давно уже ощущение, что в будущем будет нихао, да.
[01:47:13.120 --> 01:47:14.120]  Так, ладно.
[01:47:14.120 --> 01:47:15.120]  Так.
[01:47:16.120 --> 01:47:18.120]  Так, почему вы начали говорить о Киргизии?
[01:47:19.120 --> 01:47:22.120]  В какой момент вылезла нихао, да?
[01:47:23.120 --> 01:47:24.120]  Кыргызский.
[01:47:25.120 --> 01:47:26.120]  О, да.
[01:47:27.120 --> 01:47:28.120]  Не, ну правильно, да, потому что.
[01:47:29.120 --> 01:47:32.120]  Да, почему? Да, ну потому что Казах без понтов это Кыргыз, там вот это все.
[01:47:33.120 --> 01:47:36.120]  Казах без понтов это без понтовый Казах.
[01:47:37.120 --> 01:47:38.120]  Ну, нет.
[01:47:39.120 --> 01:47:42.120]  Это классическое выражение, а потом кто-то было да Казах без понтов это Кыргыз.
[01:47:42.120 --> 01:47:44.120]  Казах без понтов это Кыргыз, ой, извините.
[01:47:45.120 --> 01:47:46.120]  Вот.
[01:47:47.120 --> 01:47:50.120]  Но я не знаю, конкретно в Астане эта шутка там просто зашла на ура на самом деле.
[01:47:51.120 --> 01:47:52.120]  Ладно.
[01:47:53.120 --> 01:47:54.120]  Так вот, значит, делаем так.
[01:47:55.120 --> 01:47:57.120]  Слои не храним, вместо этого делаем следующее.
[01:47:58.120 --> 01:48:02.120]  Для каждой вершины мы храним, во-первых, да, в каком слое она лежит.
[01:48:03.120 --> 01:48:05.120]  И, во-вторых, конечно же, помещена ли она.
[01:48:06.120 --> 01:48:11.120]  Вместо того, чтобы вейс, ну вот, значит, делаем, то есть мап мы убираем.
[01:48:13.120 --> 01:48:17.120]  Значит, вот эту мы убираем, то есть вот эту мы вот можем даже закомментировать пока.
[01:48:18.120 --> 01:48:20.120]  Вот давайте я тут все буду пока комментировать.
[01:48:21.120 --> 01:48:24.120]  Это буду тоже комментировать, потому что вейвсов больше не существует.
[01:48:27.120 --> 01:48:35.120]  Так, ну и while-waves-empty заменяется на более оптимальный по проверке код while-true.
[01:48:35.120 --> 01:48:42.120]  Ну да, конечно, операция на проверке хотимна меньше.
[01:48:43.120 --> 01:48:45.120]  Причем один из них хватит.
[01:48:46.120 --> 01:48:48.120]  Сейчас все будет. Смотрите int-v равно минус один.
[01:48:49.120 --> 01:48:51.120]  Значит, перебираем.
[01:48:52.120 --> 01:48:53.120]  Так, знаете, что нам не хватает?
[01:48:54.120 --> 01:48:56.120]  Вот что нам реально не хватает? А, у нас n есть, слава Богу.
[01:48:57.120 --> 01:48:58.120]  For int i равно нулю и меньше n.
[01:48:59.120 --> 01:49:02.120]  Пробираемся по всем, без того, чтобы, то есть самый тупой вариант.
[01:49:02.120 --> 01:49:07.120]  Пробираемся по всем вершинам и говорим, что если она еще не юзит,
[01:49:08.120 --> 01:49:16.120]  и еще оказалось, что при этом v меньше нуля или у нее слишком большой слой,
[01:49:17.120 --> 01:49:19.120]  пишем v равно i.
[01:49:20.120 --> 01:49:24.120]  Значит, если v меньше нуля, то мы выбрасываем все из цикла.
[01:49:25.120 --> 01:49:27.120]  Да, с криком все.
[01:49:27.120 --> 01:49:29.120]  Так, а что теперь делаем?
[01:49:30.120 --> 01:49:31.120]  Значит, v равно i.
[01:49:32.120 --> 01:49:33.120]  Значит, теперь важная строчка.
[01:49:34.120 --> 01:49:35.120]  Uset от v равно true.
[01:49:36.120 --> 01:49:37.120]  Потому что прямо сейчас мы ее будем обрабатывать.
[01:49:38.120 --> 01:49:41.120]  Вот, а вместо вот этого всего,
[01:49:42.120 --> 01:49:44.120]  это вот мы вместо вот этого всего делали,
[01:49:45.120 --> 01:49:48.120]  нам остается только взять вот эту вот замечательную штуку
[01:49:49.120 --> 01:49:51.120]  и проделать вот буквально это.
[01:49:52.120 --> 01:49:54.120]  Только вот заканчиваем.
[01:49:54.120 --> 01:49:55.120]  Вот буквально это.
[01:49:56.120 --> 01:49:58.120]  Только вот закомментить еще вот эту штуку.
[01:50:05.120 --> 01:50:06.120]  А, и еще вот эту.
[01:50:09.120 --> 01:50:10.120]  Упс.
[01:50:11.120 --> 01:50:12.120]  Что за бред?
[01:50:13.120 --> 01:50:15.120]  Не обновляйте.
[01:50:16.120 --> 01:50:17.120]  Как-то не вот обновил.
[01:50:18.120 --> 01:50:21.120]  Вы обновили расстояние, но вы не добавили больше, чтобы...
[01:50:21.120 --> 01:50:22.120]  Да.
[01:50:23.120 --> 01:50:25.120]  В том-то и чит. У меня больше нет очередей, нет волн.
[01:50:26.120 --> 01:50:27.120]  Я просто для всех...
[01:50:28.120 --> 01:50:30.120]  Я в весе того, чтобы говорить, найдите мне минимальную не пустую волну,
[01:50:31.120 --> 01:50:33.120]  я говорю, так, так, а какие у нас вообще вершины есть еще,
[01:50:34.120 --> 01:50:35.120]  которые не пройденные?
[01:50:36.120 --> 01:50:37.120]  Ага, вот эти. Так, давайте я среди вас переберу
[01:50:38.120 --> 01:50:40.120]  и найду там минимальную вершину с минимальной волной.
[01:50:41.120 --> 01:50:42.120]  А вы с квадрат делаете?
[01:50:43.120 --> 01:50:44.120]  Да.
[01:50:45.120 --> 01:50:46.120]  Вот такой вот чит.
[01:50:47.120 --> 01:50:48.120]  Чтобы было понятнее, да,
[01:50:48.120 --> 01:50:50.120]  может показаться, что это прям очень страшный код,
[01:50:51.120 --> 01:50:53.120]  но теперь я сделаю совсем крутую версию.
[01:50:56.120 --> 01:50:58.120]  No waves, no comments.
[01:50:58.120 --> 01:50:59.120]  Ну, это заявка на успех, конечно.
[01:51:17.120 --> 01:51:19.120]  Вот, значит, смотрите, сейчас я сделаю абсолютно то же самое,
[01:51:20.120 --> 01:51:21.120]  только вот уберу комментарии.
[01:51:26.120 --> 01:51:27.120]  Да, код ставил без комментариев,
[01:51:28.120 --> 01:51:29.120]  это, конечно, да.
[01:51:32.120 --> 01:51:33.120]  Чего Илья Мещерин?
[01:51:38.120 --> 01:51:39.120]  Ну, это да.
[01:51:40.120 --> 01:51:42.120]  Илья Мещерин в курсе, что мы тут математикой занимаемся,
[01:51:43.120 --> 01:51:44.120]  а не программированием, поэтому...
[01:51:47.120 --> 01:51:48.120]  Ну да, но вот он занимается программированием,
[01:51:49.120 --> 01:51:51.120]  как бы я занимаюсь математикой, да.
[01:51:52.120 --> 01:51:53.120]  Ну, логично, да.
[01:51:54.120 --> 01:51:55.120]  Как бы, точнее, олимпиадные школы, правильно?
[01:51:56.120 --> 01:51:57.120]  Тут как бы у меня математика, у него программирование,
[01:51:58.120 --> 01:51:59.120]  вот так.
[01:52:01.120 --> 01:52:03.120]  Ну да, олимпиадные школы, да.
[01:52:04.120 --> 01:52:07.120]  Вот, и получился вот такой минималистичный код.
[01:52:12.120 --> 01:52:13.120]  Вот, работает он, очевидно.
[01:52:14.120 --> 01:52:15.120]  Но, правда, минус такого кода заключается в том,
[01:52:16.120 --> 01:52:18.120]  что мы теперь, конечно, каждый новый слой ищем за УАТВ.
[01:52:21.120 --> 01:52:23.120]  И это работает в квадрат плюс Е.
[01:52:24.120 --> 01:52:26.120]  Вот здесь, кстати, тоже терминологический момент.
[01:52:27.120 --> 01:52:29.120]  Так вот, по крайней мере, с моей точки зрения,
[01:52:30.120 --> 01:52:32.120]  вот это называется алгоритм ДЕКСТР.
[01:52:35.120 --> 01:52:38.120]  Ну, нет, там я просто в последнее время стал...
[01:52:39.120 --> 01:52:40.120]  Ну, просто тут забавная ситуация произошла,
[01:52:41.120 --> 01:52:42.120]  потому что когда я изучал алгоритм ДЕКСТР,
[01:52:43.120 --> 01:52:44.120]  мне рассказали вот это.
[01:52:45.120 --> 01:52:47.120]  Правда, рассказали, что как найти кратчайшее расстояние?
[01:52:48.120 --> 01:52:49.120]  Найти его вот так, доказательство.
[01:52:50.120 --> 01:52:51.120]  Ну, и там дается доказательство, мы его, кстати,
[01:52:52.120 --> 01:52:53.120]  тоже рассмотрим обязательно.
[01:52:53.120 --> 01:52:55.120]  Потому что, по большому счету, мы там въектом,
[01:52:56.120 --> 01:52:57.120]  в смысле, рассматриваем слои какие-то,
[01:52:58.120 --> 01:52:59.120]  вот как-то там идем и так далее.
[01:53:00.120 --> 01:53:02.120]  Вот, в общем-то, можно проще было сказать,
[01:53:03.120 --> 01:53:05.120]  там просто докажем, что каждый раз, когда мы берем вершину,
[01:53:06.120 --> 01:53:07.120]  там кратчайшее расстояние, доказательство.
[01:53:08.120 --> 01:53:10.120]  Ну, там, ну, поднимите руки, кто даже вообще изучал
[01:53:11.120 --> 01:53:12.120]  когда-то доказательство алгоритма ДЕКСТР.
[01:53:13.120 --> 01:53:14.120]  Ну, вот.
[01:53:15.120 --> 01:53:16.120]  Ну, разумеется.
[01:53:17.120 --> 01:53:18.120]  Да, конечно, спасибо.
[01:53:19.120 --> 01:53:20.120]  Вот.
[01:53:21.120 --> 01:53:22.120]  Ну, просто я в последнее время стал,
[01:53:23.120 --> 01:53:24.120]  стал сталкиваться с тем, что кто-то
[01:53:25.120 --> 01:53:26.120]  вообще даже не в курсе, что алгоритм ДЕКСТР
[01:53:27.120 --> 01:53:28.120]  бывает без кучи.
[01:53:29.120 --> 01:53:30.120]  Или там без сета.
[01:53:31.120 --> 01:53:32.120]  То есть, на самом деле, да.
[01:53:33.120 --> 01:53:34.120]  Я бы просто лично для меня как-то ощущение
[01:53:35.120 --> 01:53:36.120]  все равно осталось, что вот это вот алгоритм ДЕКСТР,
[01:53:37.120 --> 01:53:38.120]  это на самом деле вот это.
[01:53:39.120 --> 01:53:40.120]  То есть, следующее, это можно заметить,
[01:53:41.120 --> 01:53:42.120]  что он работает за В квадрат плюс Е,
[01:53:43.120 --> 01:53:44.120]  и если В квадрат это много, то давайте как-то оптимизировать.
[01:53:45.120 --> 01:53:46.120]  А как оптимизировать?
[01:53:47.120 --> 01:53:48.120]  Ну, самое тупое это, конечно,
[01:53:49.120 --> 01:53:50.120]  давайте действительно хранить,
[01:53:51.120 --> 01:53:52.120]  хранить все доступные там
[01:53:53.120 --> 01:53:54.120]  не в массиве юзет,
[01:53:55.120 --> 01:53:56.120]  а в каком-то сете там
[01:53:57.120 --> 01:53:58.120]  с компаратором по дэшке.
[01:53:59.120 --> 01:54:00.120]  Ну, не с компаратором, а там пары храним.
[01:54:01.120 --> 01:54:02.120]  Да.
[01:54:03.120 --> 01:54:05.120]  То есть, это вот алгоритм ДЕКСТР.
[01:54:06.120 --> 01:54:07.120]  Да, то есть, вот теперь абсолютно та же версия
[01:54:08.120 --> 01:54:10.120]  там с сетом.
[01:54:13.120 --> 01:54:14.120]  Вот, например, самое тупое
[01:54:15.120 --> 01:54:16.120]  по современным меркам, это бывает сет.
[01:54:19.120 --> 01:54:21.120]  Это вот, да, вместо массива юзет
[01:54:21.120 --> 01:54:26.120]  мы заводим просто set per long double.
[01:54:27.120 --> 01:54:28.120]  Значит, int.
[01:54:29.120 --> 01:54:30.120]  Сет.
[01:54:31.120 --> 01:54:33.120]  И в результате тут прям сразу пишем, да.
[01:54:42.120 --> 01:54:43.120]  Ну, по большому счету, да.
[01:54:44.120 --> 01:54:46.120]  По большому счету, это он и есть.
[01:54:47.120 --> 01:54:48.120]  Ну да, то есть, на самом деле, да.
[01:54:49.120 --> 01:54:50.120]  ДЕКСТР это такой продвинутый BFS,
[01:54:51.120 --> 01:54:52.120]  как вот.
[01:54:53.120 --> 01:54:54.120]  И нам потребовалось его лишь там порядка пары часов,
[01:54:55.120 --> 01:54:56.120]  чтобы понять, почему.
[01:54:57.120 --> 01:54:58.120]  Собственно, да.
[01:54:59.120 --> 01:55:00.120]  Вот, видите.
[01:55:01.120 --> 01:55:02.120]  То есть, вот получается теперь то,
[01:55:03.120 --> 01:55:04.120]  то есть, вот такая вот сетовая версия.
[01:55:05.120 --> 01:55:06.120]  То есть, вот это мы убираем.
[01:55:07.120 --> 01:55:08.120]  Там.
[01:55:09.120 --> 01:55:10.120]  Тут мы даже вот...
[01:55:11.120 --> 01:55:12.120]  Там.
[01:55:21.120 --> 01:55:22.120]  Вот.
[01:55:23.120 --> 01:55:25.120]  Так, intv равно p.second.
[01:55:27.120 --> 01:55:28.120]  Вот.
[01:55:29.120 --> 01:55:30.120]  Да, юзет убираем.
[01:55:35.120 --> 01:55:36.120]  Так.
[01:55:36.120 --> 01:55:37.120]  Ну, теперь смотрите.
[01:55:37.120 --> 01:55:38.120]  Тут важно.
[01:55:38.120 --> 01:55:39.120]  Вот.
[01:55:40.120 --> 01:55:41.120]  Видите, я тут надежно пишу,
[01:55:42.120 --> 01:55:43.120]  потому что erase в этом смысле приятный.
[01:55:44.120 --> 01:55:45.120]  Да, если вы удаляете как бы из сета по ключу,
[01:55:46.120 --> 01:55:47.120]  то как бы если его нет, то он ничего и не удалит.
[01:55:48.120 --> 01:55:49.120]  Вот.
[01:55:53.120 --> 01:55:54.120]  Вот.
[01:55:55.120 --> 01:55:56.120]  Вот.
[01:55:57.120 --> 01:55:58.120]  Вот.
[01:55:59.120 --> 01:56:00.120]  Вот.
[01:56:01.120 --> 01:56:02.120]  Вот.
[01:56:03.120 --> 01:56:04.120]  Вот.
[01:56:05.120 --> 01:56:06.120]  Вот.
[01:56:07.120 --> 01:56:08.120]  Вот.
[01:56:09.120 --> 01:56:10.120]  Вот получается такая версия.
[01:56:11.120 --> 01:56:12.120]  Но это уже, конечно же.
[01:56:13.120 --> 01:56:14.120]  Там сколько получается?
[01:56:15.120 --> 01:56:16.120]  В плюс Е лог В.
[01:56:17.120 --> 01:56:18.120]  Вот.
[01:56:19.120 --> 01:56:20.120]  Да.
[01:56:21.120 --> 01:56:22.120]  Но это...
[01:56:23.120 --> 01:56:24.120]  Да, если мы вспомним, что на самом деле в этом месте,
[01:56:25.120 --> 01:56:26.120]  вместо сета может быть абсолютно любая куча.
[01:56:27.120 --> 01:56:28.120]  Ну, там, конечно...
[01:56:29.120 --> 01:56:30.120]  То есть, если вы напишете самописную кучу,
[01:56:31.120 --> 01:56:32.120]  которая умеет как бы делать дикриски, то да.
[01:56:33.120 --> 01:56:34.120]  Да.
[01:56:34.120 --> 01:56:35.120]  Да, ну вот так.
[01:56:36.120 --> 01:56:37.120]  Оговоримся, что да.
[01:56:38.120 --> 01:56:40.120]  То есть, да, тут нам могла бы помочь куча фибоначчи действительно.
[01:56:41.120 --> 01:56:42.120]  О.
[01:56:43.120 --> 01:56:45.120]  А, ну, чего мы паримся, раз уж мы тут...
[01:56:46.120 --> 01:56:47.120]  Раз уж мы код пишем.
[01:56:48.120 --> 01:56:49.120]  Не, ничего страшного.
[01:56:50.120 --> 01:56:51.120]  Так, смотрите.
[01:56:52.120 --> 01:56:53.120]  Ничего страшного, в этом тоже будет.
[01:56:54.120 --> 01:56:56.120]  Сейчас мы не в самой особой теме.
[01:56:57.120 --> 01:56:58.120]  Мы сейчас будем писать фибоначки.
[01:56:59.120 --> 01:57:03.120]  Ну, нет, конечно, мы не будем писать кучу фибоначчи.
[01:57:04.120 --> 01:57:05.120]  Фибоначчи.
[01:57:06.120 --> 01:57:07.120]  Значит, смотрите.
[01:57:08.120 --> 01:57:10.120]  Тут мы сделаем вот так.
[01:57:15.120 --> 01:57:16.120]  Значит, здесь мы сделаем вот как.
[01:57:17.120 --> 01:57:18.120]  Место сета.
[01:57:21.120 --> 01:57:22.120]  Значит...
[01:57:23.120 --> 01:57:24.120]  Значит...
[01:57:29.120 --> 01:57:30.120]  Ну, вот.
[01:57:31.120 --> 01:57:32.120]  Так.
[01:57:33.120 --> 01:57:35.120]  Ну, значит, теперь мы заведем следующее.
[01:57:36.120 --> 01:57:37.120]  Значит, у нас тут будет фибоначчи-сиб.
[01:57:39.120 --> 01:57:41.120]  Значит, фибоначчи-сиб.
[01:57:42.120 --> 01:57:44.120]  Значит, ну типов у нас будет два, допустим.
[01:57:45.120 --> 01:57:49.120]  Ну, допустим, во-первых, на вершину и там какой-нибудь лонг-дабл.
[01:57:51.120 --> 01:57:56.120]  Ну, просто мы будем подразумевать, что у нас там type-name там...
[01:57:57.120 --> 01:57:59.120]  Там сейчас как там это называется?
[01:58:00.120 --> 01:58:08.120]  Там template, type-name t-vertex, t-weight.
[01:58:17.120 --> 01:58:19.120]  Значит, фибоначчи-хип пишем мы.
[01:58:22.120 --> 01:58:23.120]  Ну, так и пишем fh.
[01:58:25.120 --> 01:58:26.120]  Ладно, или просто hip.
[01:58:27.120 --> 01:58:30.120]  А, и это зарезервировано в STL-слово, поэтому лучше не надо.
[01:58:32.120 --> 01:58:33.120]  Fh.
[01:58:34.120 --> 01:58:35.120]  Что?
[01:58:37.120 --> 01:58:39.120]  Нет, hip зарезервировано.
[01:58:40.120 --> 01:58:42.120]  Нет, я тут не хочу писать фибоначчи-хип, прям вот это.
[01:58:43.120 --> 01:58:46.120]  То есть, правильно написать, конечно, фибоначчи-хип.
[01:58:47.120 --> 01:58:48.120]  Вот так вот, да.
[01:58:49.120 --> 01:58:50.120]  Вот.
[01:58:51.120 --> 01:58:53.120]  Ну, во-первых, это тоже неправильно, потому что надо что более умное написать.
[01:58:53.120 --> 01:58:55.120]  Дистанцистом, например, вот это.
[01:58:56.120 --> 01:58:57.120]  Вот.
[01:59:00.120 --> 01:59:01.120]  Так.
[01:59:05.120 --> 01:59:08.120]  Ну, во-первых, здесь мы и здесь пишем такое.
[01:59:12.120 --> 01:59:13.120]  Ну, вот.
[01:59:18.120 --> 01:59:19.120]  Вот, напишем такое.
[01:59:19.120 --> 01:59:20.120]  Вот, напишем такое.
[01:59:21.120 --> 01:59:27.120]  Я напишу так, у него будет метод дикой ски, но здесь я буду говорить, что просто если вершины нету, но я не умею проверять, если вершина, да.
[01:59:28.120 --> 01:59:29.120]  Но я буду говорить так же, ладно.
[01:59:30.120 --> 01:59:35.120]  Ну, там, хотя нам придется, конечно, для кучи фибоначчи каким-то образом мистическим хранить там, какие вершины в ней есть.
[01:59:36.120 --> 01:59:40.120]  Может быть, внутри ее есть сет, который тупо хранит, какие вершины в ней вообще есть, да.
[01:59:42.120 --> 01:59:43.120]  Ну, вот. Ну, ладно.
[01:59:46.120 --> 01:59:48.120]  Ну, вот. Ну, я так вот. Сейчас будут некоторые такие оговорочки.
[01:59:50.120 --> 01:59:53.120]  Там можно массив юзет ввести для аккуратности.
[01:59:54.120 --> 01:59:56.120]  А, вот давайте ладно, я введу так и быть.
[01:59:57.120 --> 01:59:58.120]  Нет, хотя нет.
[01:59:59.120 --> 02:00:00.120]  Правда, юзет.
[02:00:01.120 --> 02:00:04.120]  Правда, здесь нам придется немножко по-другому сделать.
[02:00:06.120 --> 02:00:07.120]  Да, вектор бул.
[02:00:08.120 --> 02:00:10.120]  Is in heap.
[02:00:20.120 --> 02:00:21.120]  Вот так.
[02:00:22.120 --> 02:00:24.120]  Можно вот так вот читерить.
[02:00:25.120 --> 02:00:28.120]  Просто это я буду делать для того, чтобы понимать, мне как бы делать ставку или...
[02:00:29.120 --> 02:00:30.120]  Вот, а это мы убираем.
[02:00:31.120 --> 02:00:35.120]  Теперь, пока наша мистическая куча не пустая.
[02:00:42.120 --> 02:00:43.120]  То мы делаем следующее.
[02:00:43.120 --> 02:00:49.120]  Ну, допустим, там int v равно, допустим, экстракт мин.
[02:00:50.120 --> 02:00:55.120]  Ну, таки там h, как там, h, как там?
[02:00:56.120 --> 02:00:57.120]  fh.extract-min.
[02:00:58.120 --> 02:00:59.120]  Видим, да?
[02:01:00.120 --> 02:01:01.120]  Так.
[02:01:01.120 --> 02:01:03.120]  Можно даже не int v, а, допустим...
[02:01:05.120 --> 02:01:06.120]  Как там это?
[02:01:07.120 --> 02:01:08.120]  Как там вот...
[02:01:08.120 --> 02:01:09.120]  Что-то там тоже убили.
[02:01:10.120 --> 02:01:11.120]  Как там это?
[02:01:12.120 --> 02:01:14.120]  Что-то там тоже умное слово есть, вот это.
[02:01:15.120 --> 02:01:18.120]  Так, auto, по-моему, v запятая w равно...
[02:01:19.120 --> 02:01:20.120]  Вот что-то такое, да?
[02:01:21.120 --> 02:01:22.120]  Все, не было такого?
[02:01:23.120 --> 02:01:24.120]  Умное слово.
[02:01:25.120 --> 02:01:26.120]  Ну, вот, да.
[02:01:27.120 --> 02:01:30.120]  Давайте int v, long w.
[02:01:31.120 --> 02:01:32.120]  А, уже этого даже не надо делать?
[02:01:33.120 --> 02:01:34.120]  Не надо.
[02:01:35.120 --> 02:01:36.120]  Ого, красиво.
[02:01:36.120 --> 02:01:37.120]  Иначе бы это было более технично.
[02:01:38.120 --> 02:01:39.120]  Значит...
[02:01:40.120 --> 02:01:41.120]  Это не было бы умное слово, иначе.
[02:01:42.120 --> 02:01:43.120]  Значит, смотрите.
[02:01:44.120 --> 02:01:45.120]  Значит, tnl равно вот...
[02:01:46.120 --> 02:01:47.120]  Да, но здесь вот делается то же самое, но теперь надо...
[02:01:48.120 --> 02:01:57.120]  Так, значит, теперь говорим, если из int, значит, hip от int v,
[02:01:58.120 --> 02:02:04.120]  то мы делаем s.decriski от int v.
[02:02:05.120 --> 02:02:09.120]  От nv и, соответственно, вот этого nl.
[02:02:10.120 --> 02:02:12.120]  В противном случае делаем...
[02:02:13.120 --> 02:02:14.120]  Что мы делаем?
[02:02:15.120 --> 02:02:21.120]  Is in hip от nv равно true, и действительно реально делаем вставку.
[02:02:26.120 --> 02:02:27.120]  Вот, а это мы убираем.
[02:02:29.120 --> 02:02:32.120]  Только делаем это не vs, а, конечно, vfash.
[02:02:34.120 --> 02:02:37.120]  То есть вот, в принципе, так может выглядеть алгоритм Dijkstra.
[02:02:38.120 --> 02:02:40.120]  Ну ладно, это мы уже вообще уберем.
[02:02:41.120 --> 02:02:42.120]  С кучей Fibonacci.
[02:02:43.120 --> 02:02:45.120]  Ну или любой другой кучей, на самом деле.
[02:02:46.120 --> 02:02:49.120]  То есть, видите, у меня тут, конечно, есть маленькая оговорка,
[02:02:50.120 --> 02:02:54.120]  что я подразумеваю, что по Dikriski он сразу автоматически найдет вершину, где она находится.
[02:02:55.120 --> 02:02:58.120]  То есть, по-хорошему вам, конечно, надо хранить какие-то мистические итераторы,
[02:02:59.120 --> 02:03:00.120]  по этим итераторам, собственно, Dikriski делать.
[02:03:01.120 --> 02:03:02.120]  Понимаете, да?
[02:03:03.120 --> 02:03:04.120]  Вот.
[02:03:05.120 --> 02:03:06.120]  Ну мы, ладно, там не будем повторяться,
[02:03:07.120 --> 02:03:09.120]  мы в прошлом году, в прошлом семестре уже обсуждали технологии,
[02:03:10.120 --> 02:03:11.120]  как это теоретически может работать.
[02:03:12.120 --> 02:03:13.120]  Вот.
[02:03:14.120 --> 02:03:15.120]  Но, значит, в чем фишка?
[02:03:16.120 --> 02:03:17.120]  Фишка, зачем мы это сделали?
[02:03:18.120 --> 02:03:22.120]  Сделали мы это затем, да, то есть раньше мы v оценивали как e,
[02:03:23.120 --> 02:03:25.120]  но теперь замечаем, что у нас происходит, да,
[02:03:26.120 --> 02:03:29.120]  что мы, конечно, это что у нас insert и Dikriski делаются за вот единицы,
[02:03:29.120 --> 02:03:31.120]  а вот экстракт мины делается, правда, за логарифом.
[02:03:32.120 --> 02:03:38.120]  Поэтому теперь у нас лог v не при e-шке, а при v-шке.
[02:03:40.120 --> 02:03:43.120]  Получился вот уже обсуждавшийся наименит алгоритм,
[02:03:44.120 --> 02:03:48.120]  алгоритм Dijkstra с той кучей фибоначи теперь,
[02:03:49.120 --> 02:03:53.120]  вот, который уже работает за v лог v плюс e.
[02:03:56.120 --> 02:03:57.120]  Вот, понятно?
[02:03:58.120 --> 02:03:59.120]  Вот.
[02:04:00.120 --> 02:04:01.120]  Так что вот так мы вот и вы.
[02:04:02.120 --> 02:04:03.120]  Ну вот.
[02:04:04.120 --> 02:04:05.120]  Так и вывели алгоритм Dijkstra.
[02:04:08.120 --> 02:04:09.120]  Мечты, мечты.
[02:04:10.120 --> 02:04:11.120]  Нет, к сожалению, нет.
[02:04:12.120 --> 02:04:14.120]  Ну, понимаете, просто есть куча базовых вещей,
[02:04:15.120 --> 02:04:17.120]  которые мы с вами обсудить так или иначе должны.
[02:04:18.120 --> 02:04:20.120]  То есть мы с вами должны что-то обладеть там,
[02:04:21.120 --> 02:04:24.120]  ну, во-первых, мы должны обсудить Флойд и Фордон Белмана,
[02:04:24.120 --> 02:04:26.120]  а во-вторых, самое главное, на самом деле,
[02:04:27.120 --> 02:04:29.120]  тут у Dijkstra есть еще обобщение, на самом деле.
[02:04:30.120 --> 02:04:33.120]  Так что не все это, так что просто так от Dijkstra не пойдем.
[02:04:34.120 --> 02:04:35.120]  Так, ну вот, до Dijkstra дошли.
[02:04:36.120 --> 02:04:38.120]  Ладно, думаю, если нет вопросов, то в этом месте, пожалуй,
[02:04:39.120 --> 02:04:40.120]  пришло время перерыва.
[02:04:41.120 --> 02:04:42.120]  Как у нас вообще по-хорошему, давайте помним,
[02:04:43.120 --> 02:04:44.120]  доказывается алгоритм Dijkstra?
[02:04:45.120 --> 02:04:47.120]  Обычно он доказывается так, что в каждый момент времени
[02:04:48.120 --> 02:04:50.120]  у нас есть типа зона, где находятся вершины,
[02:04:51.120 --> 02:04:52.120]  до которых мы расстояние типа нашли.
[02:04:53.120 --> 02:04:54.120]  Да?
[02:05:01.120 --> 02:05:02.120]  Вот там какие-то вот такие.
[02:05:03.120 --> 02:05:05.120]  А есть вот вершины, до которых мы расстояние еще типа не нашли.
[02:05:06.120 --> 02:05:10.120]  Ну, типа у которых use it равно false вот в версии без сетов.
[02:05:12.120 --> 02:05:14.120]  И нам хочется теперь аккуратненько доказать,
[02:05:15.120 --> 02:05:17.120]  что каждый раз, когда мы находим вершину и добавляем ее в use it,
[02:05:18.120 --> 02:05:22.120]  то дэшка до нее реально корректна.
[02:05:24.120 --> 02:05:26.120]  Вот нам хочется такое доказать, да?
[02:05:27.120 --> 02:05:28.120]  Как мы это доказываем?
[02:05:30.120 --> 02:05:31.120]  Доказываем это вот как.
[02:05:32.120 --> 02:05:36.120]  Допустим, у нас вот это, то есть что такое D от U,
[02:05:37.120 --> 02:05:38.120]  вот если это вершина U?
[02:05:39.120 --> 02:05:42.120]  Это очевидно D от V, D от V плюс вес вот этот W, правда?
[02:05:43.120 --> 02:05:44.120]  Вот.
[02:05:45.120 --> 02:05:49.120]  И теперь предположим, предположим,
[02:05:50.120 --> 02:05:54.120]  что там чисто теоретически может быть какой-то более короткий путь, да?
[02:05:57.120 --> 02:06:02.120]  Который тут вот ходит и ходит и ходит и ходит.
[02:06:03.120 --> 02:06:06.120]  Про него можно сказать только одно, что в какой-то момент времени,
[02:06:07.120 --> 02:06:10.120]  ой, я тут еще не сюда пришел,
[02:06:10.120 --> 02:06:11.120]  вот.
[02:06:13.120 --> 02:06:15.120]  То есть про него можно сказать, что он хотя бы один раз выйдет
[02:06:16.120 --> 02:06:18.120]  за пределы зоны use it.
[02:06:19.120 --> 02:06:20.120]  Да?
[02:06:21.120 --> 02:06:23.120]  Он в принципе может туда вернуться, тут гулять там вообще как угодно
[02:06:24.120 --> 02:06:25.120]  и прийти в U.
[02:06:26.120 --> 02:06:28.120]  И что?
[02:06:29.120 --> 02:06:32.120]  Мы доказываем, что вот смотрите, вот мы говорим, что вот у нас
[02:06:33.120 --> 02:06:36.120]  на очередной трассе D extra мы перебрали все непомеченные вершины
[02:06:36.120 --> 02:06:39.120]  и выбрали вершину U, у которой вот этот use it минимальный,
[02:06:40.120 --> 02:06:41.120]  вот D-шка минимальная.
[02:06:42.120 --> 02:06:44.120]  Мы утверждаем, что это реальное расстояние.
[02:06:45.120 --> 02:06:47.120]  Ну почему это реальное расстояние?
[02:06:48.120 --> 02:06:51.120]  Ну потому что, во-первых, это длина реально какого-то пути, да?
[02:06:52.120 --> 02:06:54.120]  То есть, помните, у нас просто сохраняется этот принцип,
[02:06:55.120 --> 02:06:57.120]  что каждая D-шка это длина какого-то пути до этой вершины,
[02:06:58.120 --> 02:06:59.120]  тут без вариантов.
[02:07:00.120 --> 02:07:01.120]  Понимаете, да?
[02:07:02.120 --> 02:07:03.120]  Вот, это была D-шка.
[02:07:03.120 --> 02:07:04.120]  Вот, теперь предположим, что...
[02:07:05.120 --> 02:07:08.120]  Значит, рассмотрим произвольный путь от S до U.
[02:07:09.120 --> 02:07:14.120]  Так, ну существует первый раз, когда этот путь выходит за пределы
[02:07:15.120 --> 02:07:21.120]  помеченной зоны, и это будет происходить через ребро V' U' с весом W'.
[02:07:22.120 --> 02:07:23.120]  Понимаете, да?
[02:07:26.120 --> 02:07:27.120]  Ну, теперь пишем.
[02:07:28.120 --> 02:07:30.120]  Значит, вес вот этого штуки,
[02:07:30.120 --> 02:07:34.120]  это вот экзотической штуки, вот всей вот этой вот, да?
[02:07:35.120 --> 02:07:36.120]  Я ее так напишу.
[02:07:37.120 --> 02:07:38.120]  Так, видно там?
[02:07:42.120 --> 02:07:44.120]  Ой, или меня только не видно, но и не слышно?
[02:07:45.120 --> 02:07:47.120]  Видно, видно, слышно, слышно?
[02:07:48.120 --> 02:07:49.120]  Слышно там?
[02:07:50.120 --> 02:07:51.120]  А, да, все, да.
[02:07:52.120 --> 02:07:53.120]  Вот.
[02:07:54.120 --> 02:07:57.120]  Значит, смотрите, больше это, больше либо равно,
[02:07:57.120 --> 02:07:59.120]  больше это, больше либо равно.
[02:08:01.120 --> 02:08:02.120]  Ну, во-первых, это, конечно,
[02:08:04.120 --> 02:08:09.120]  больше либо равно, чем, значит, W от...
[02:08:12.120 --> 02:08:15.120]  до вот этого, до вот этого вот ребра V' U'.
[02:08:21.120 --> 02:08:22.120]  Логично, да?
[02:08:22.120 --> 02:08:23.120]  Ну, почему?
[02:08:27.120 --> 02:08:30.120]  Потому что у нас как бы, да, мы тут, в этом месте мы пользуемся тем,
[02:08:31.120 --> 02:08:33.120]  что у нас путь ребра не отрицательная, да?
[02:08:34.120 --> 02:08:36.120]  Поэтому если я длинный от пути просто отпилил суффикс,
[02:08:37.120 --> 02:08:39.120]  то вес пути от этого только уменьшился.
[02:08:40.120 --> 02:08:41.120]  Вот.
[02:08:42.120 --> 02:08:43.120]  Дальше.
[02:08:44.120 --> 02:08:46.120]  Теперь заметим, что вот это вот...
[02:08:47.120 --> 02:08:50.120]  можно заменить на кратчайший путь до вершины V', правда?
[02:08:50.120 --> 02:08:51.120]  Да.
[02:08:52.120 --> 02:08:53.120]  Поэтому так и пишем.
[02:08:55.120 --> 02:08:56.120]  Значит, D от V'
[02:08:58.120 --> 02:09:00.120]  плюс W'.
[02:09:04.120 --> 02:09:05.120]  Вот.
[02:09:10.120 --> 02:09:11.120]  Вот.
[02:09:12.120 --> 02:09:13.120]  Заметим, ну, теперь замечаем, что это
[02:09:14.120 --> 02:09:18.120]  больше либо равно, чем текущее W'
[02:09:20.120 --> 02:09:21.120]  Логично, да?
[02:09:22.120 --> 02:09:25.120]  Ну, потому что раз уж W' был, то мы как минимум этим релаксировали.
[02:09:26.120 --> 02:09:28.120]  Может, релаксировали чем-то лучше, я не знаю.
[02:09:29.120 --> 02:09:30.120]  Вот.
[02:09:31.120 --> 02:09:33.120]  А это больше либо равно D от U?
[02:09:35.120 --> 02:09:37.120]  Потому что по определению U, правда?
[02:09:40.120 --> 02:09:41.120]  Вот, все.
[02:09:42.120 --> 02:09:43.120]  В принципе отсюда следует, что длина...
[02:09:44.120 --> 02:09:45.120]  если взять этот произвольный путь,
[02:09:46.120 --> 02:09:48.120]  то длина этого пути не более, чем
[02:09:49.120 --> 02:09:51.120]  там D от U,
[02:09:53.120 --> 02:09:57.120]  которая там в данном случае равна, обратите внимание,
[02:09:58.120 --> 02:09:59.120]  D от V' плюс W'.
[02:10:00.120 --> 02:10:01.120]  Ну, здесь уже по определению.
[02:10:02.120 --> 02:10:03.120]  Вот, понятно?
[02:10:05.120 --> 02:10:06.120]  Вот.
[02:10:07.120 --> 02:10:08.120]  То есть, в принципе, вот классическое доказательство выглядит...
[02:10:09.120 --> 02:10:10.120]  ну, я так немножко его может быть экзотически нарисовал,
[02:10:11.120 --> 02:10:12.120]  но выглядит оно обычно примерно таким образом, да?
[02:10:15.120 --> 02:10:16.120]  Значит, ну вот.
[02:10:17.120 --> 02:10:18.120]  Это вот еще один способ, на самом деле,
[02:10:19.120 --> 02:10:20.120]  доказательств D' и, в принципе, все BFS,
[02:10:21.120 --> 02:10:22.120]  которые у нас были.
[02:10:23.120 --> 02:10:24.120]  Вот.
[02:10:25.120 --> 02:10:26.120]  В' уже U'.
[02:10:27.120 --> 02:10:28.120]  Да.
[02:10:29.120 --> 02:10:30.120]  То есть, смотрите, V' и U' – это первое ребро
[02:10:31.120 --> 02:10:32.120]  на этом вот каком-то пути,
[02:10:33.120 --> 02:10:34.120]  которое как бы выходит за пределы U'.
[02:10:35.120 --> 02:10:36.120]  То есть, V' – это его начало,
[02:10:37.120 --> 02:10:39.120]  еще в помеченное, а U' – не помеченное.
[02:10:40.120 --> 02:10:43.120]  Или, что то же самое, U' – первая не помеченная вершина на пути.
[02:10:44.120 --> 02:10:45.120]  U' – первая не помеченная вершина.
[02:10:46.120 --> 02:10:47.120]  Да.
[02:10:48.120 --> 02:10:49.120]  Вот.
[02:10:50.120 --> 02:10:51.120]  Давайте, вот, я тут помечу.
[02:10:52.120 --> 02:10:53.120]  Это V', это U', это V'.
[02:10:54.120 --> 02:10:55.120]  То есть, вот такой простой доказательств.
[02:10:56.120 --> 02:10:57.120]  Значит, к чему я это?
[02:10:58.120 --> 02:10:59.120]  Да, может оказывать и так.
[02:11:00.120 --> 02:11:02.120]  Но обычно вот, да, классическое доказательство такое.
[02:11:03.120 --> 02:11:04.120]  Но теперь вытекает идея.
[02:11:05.120 --> 02:11:08.120]  Как вы говорите, а как бы нам эту дырку обобщить?
[02:11:09.120 --> 02:11:10.120]  А на что?
[02:11:11.120 --> 02:11:12.120]  А вот.
[02:11:13.120 --> 02:11:14.120]  А вот, смотрите, просто дело в том, что...
[02:11:14.120 --> 02:11:18.120]  Ну, вот, да, мы сейчас говорим о такой достаточно ограниченной задачи,
[02:11:19.120 --> 02:11:21.120]  виду, что у нас есть ребра, у ребер есть веса,
[02:11:22.120 --> 02:11:26.120]  и вес пути – это сумма весов ребер.
[02:11:27.120 --> 02:11:30.120]  Ну, мы точно так же и максимум, и минимум.
[02:11:31.120 --> 02:11:32.120]  Вот.
[02:11:33.120 --> 02:11:34.120]  А теперь вот вытекает такое.
[02:11:35.120 --> 02:11:36.120]  А ведь функционалы бывают разные.
[02:11:37.120 --> 02:11:40.120]  Потому что вес бывает, может, например, длина пути – это максимум весов, например.
[02:11:41.120 --> 02:11:42.120]  Или минимум.
[02:11:43.120 --> 02:11:47.120]  Или два максимума как пара, типа первый максимум, второй максимум.
[02:11:48.120 --> 02:11:49.120]  Вот.
[02:11:50.120 --> 02:11:51.120]  Что еще?
[02:11:52.120 --> 02:11:53.120]  А, или вообще автобусы.
[02:11:54.120 --> 02:11:55.120]  Ну-ка, сталкивались вот с...
[02:11:56.120 --> 02:12:00.120]  Ну, не в этом смысле.
[02:12:05.120 --> 02:12:06.120]  Да.
[02:12:07.120 --> 02:12:08.120]  Но я имею в виду, конечно, задачу на информатике – все автобусы, а не там.
[02:12:09.120 --> 02:12:10.120]  Да.
[02:12:10.120 --> 02:12:12.120]  Задача с автобусом – это интересный опыт, конечно.
[02:12:13.120 --> 02:12:14.120]  Ну да.
[02:12:15.120 --> 02:12:17.120]  Интересно послушать, конечно, тех, кто это сделал.
[02:12:18.120 --> 02:12:19.120]  Если получится.
[02:12:20.120 --> 02:12:21.120]  Ну да.
[02:12:22.120 --> 02:12:23.120]  Вот.
[02:12:24.120 --> 02:12:25.120]  Но я просто имею в виду задачу на информатике – все автобусы.
[02:12:26.120 --> 02:12:28.120]  Ну-ка, погибите руки, кто с ней сталкивался.
[02:12:29.120 --> 02:12:30.120]  Я не помню названия.
[02:12:31.120 --> 02:12:33.120]  Мы, к сожалению, не знаем задачи с информатикой по названиям.
[02:12:34.120 --> 02:12:35.120]  Да, хорошо.
[02:12:36.120 --> 02:12:37.120]  Ладно, сейчас я расскажу задачу.
[02:12:38.120 --> 02:12:39.120]  Задача такая.
[02:12:40.120 --> 02:12:43.120]  Если вы хотите попасть в граф, вы хотите попасть из вершины номер один в вершину номер н.
[02:12:44.120 --> 02:12:46.120]  Но не все так просто.
[02:12:47.120 --> 02:12:48.120]  Да.
[02:12:49.120 --> 02:12:50.120]  Между городами ходят односторонние автобусы.
[02:12:51.120 --> 02:12:52.120]  Вот.
[02:12:53.120 --> 02:12:57.120]  Но они, хаты такие, у них ходят по расписанию.
[02:12:58.120 --> 02:13:03.120]  То есть как бы для каждого автобуса известно, в какой момент он выедет из города и в какой момент туда приедет.
[02:13:04.120 --> 02:13:05.120]  Сканлайн.
[02:13:06.120 --> 02:13:07.120]  Сканлайн?
[02:13:08.120 --> 02:13:09.120]  Какой сканлайн?
[02:13:10.120 --> 02:13:11.120]  Время.
[02:13:12.120 --> 02:13:13.120]  Вот.
[02:13:14.120 --> 02:13:25.120]  Ну, правда, тут, конечно, начинаются мелкие оговорки в ДУТе, что, конечно, там садиться в следующий автобус вы можете там не ранее, чем вылезли из предыдущего в том же городе.
[02:13:26.120 --> 02:13:28.120]  Ну, кажется, это решается ровно также.
[02:13:29.120 --> 02:13:30.120]  Вот, да.
[02:13:31.120 --> 02:13:32.120]  Это еще один пример вот какого-то функционала.
[02:13:33.120 --> 02:13:35.120]  То есть как бы сейчас мы это попробуем обобщить.
[02:13:36.120 --> 02:13:38.120]  Ну, там просто местосложение будет, сложение со взятием максимум.
[02:13:38.120 --> 02:13:39.120]  Вот.
[02:13:40.120 --> 02:13:50.120]  То есть представим себе, что у нас есть какой-то мистический, то есть у нас как бы вместо D от V вот плюс double есть, то есть как бы есть пути, есть какой-то мистический F от пути.
[02:13:51.120 --> 02:13:52.120]  Ладно.
[02:13:53.120 --> 02:13:54.120]  Обычно мы это будем называть как F от RO.
[02:13:55.120 --> 02:13:56.120]  Эту крылью просто поменьше нарисовал.
[02:13:57.120 --> 02:13:58.120]  Вот.
[02:13:59.120 --> 02:14:00.120]  Так, давайте я красненьким начну рисовать.
[02:14:01.120 --> 02:14:03.120]  То есть вот F от RO это будет.
[02:14:03.120 --> 02:14:08.120]  Вот, где RO это вот какая-то вот такая загогулина, там путь, ну путь, короче.
[02:14:09.120 --> 02:14:10.120]  Есть F от RO.
[02:14:12.120 --> 02:14:18.120]  И более того, да, то есть мы умеем, конечно, брать пути и как-то пририсовывать к нему еще ребро.
[02:14:19.120 --> 02:14:26.120]  То есть поэтому вот такую операцию мы типа тоже за O от единицы умеем делать для того, чтобы алгоритм DX3 можно было запустить вообще.
[02:14:27.120 --> 02:14:34.120]  Ну, то есть потому что в D у нас вот F от какого-то RO будет храниться в D-шке, и вот вместо D от V4 плюс W будет храниться вот это.
[02:14:37.120 --> 02:14:48.120]  И вот нам просто жутко интересно, можно ли вообще, нам хочется выработать какие-то критерии на этот функционал, на свойство этого функционала, чтобы алгоритм DX3 доказательно работал.
[02:14:49.120 --> 02:14:54.120]  То есть иногда может быть даже тестировать где-то, да, то есть можно ли запустить DX3 и там вот проверить критерии.
[02:14:54.120 --> 02:14:56.120]  Если критерии будут ветерять, значит DX3 работает.
[02:14:57.120 --> 02:14:58.120]  RO это вершина?
[02:14:59.120 --> 02:15:00.120]  Что?
[02:15:00.120 --> 02:15:01.120]  RO это вершина.
[02:15:01.120 --> 02:15:02.120]  Нет, RO это путь.
[02:15:03.120 --> 02:15:07.120]  RO это путь, E это ребро, которое мы прицепляем к концу этого пути.
[02:15:08.120 --> 02:15:12.120]  Ну точно должно быть, не равенство, что F от RO плюс E больше.
[02:15:13.120 --> 02:15:14.120]  Телефончик у тебя тоже забирать, да?
[02:15:16.120 --> 02:15:19.120]  Господи, да, все-таки ты не можешь делать меньше двух дел одновременно, да?
[02:15:20.120 --> 02:15:21.120]  Не получается.
[02:15:21.120 --> 02:15:23.120]  Не получается, а надо вот сосредотачиваться, да.
[02:15:25.120 --> 02:15:27.120]  Так что переворачивай, переворачивай.
[02:15:30.120 --> 02:15:31.120]  Давай-давай-давай.
[02:15:34.120 --> 02:15:35.120]  А он с тобой там играет, что ли?
[02:15:39.120 --> 02:15:42.120]  Откуда ты знаешь, заканчивается у того времени, заканчивается.
[02:15:47.120 --> 02:15:48.120]  Так, все.
[02:15:48.120 --> 02:15:50.120]  Я сам это читал неделю назад.
[02:15:50.120 --> 02:15:51.120]  Чего?
[02:15:51.120 --> 02:15:53.120]  Я сам это неделю назад рассказывал.
[02:15:53.120 --> 02:15:54.120]  Где?
[02:15:54.120 --> 02:15:56.120]  Ну, в репетиторстве немного просто.
[02:15:56.120 --> 02:15:57.120]  О господи.
[02:15:57.120 --> 02:15:58.120]  А кого ты так репетиторишь?
[02:15:58.120 --> 02:16:00.120]  Тебе надо было об общении DX рассказывать.
[02:16:02.120 --> 02:16:03.120]  Блин, задачи-то решать надо.
[02:16:05.120 --> 02:16:08.120]  Ну, я не прям сильно формально, но с доказательствами.
[02:16:11.120 --> 02:16:12.120]  Ну понятно, понятно.
[02:16:14.120 --> 02:16:15.120]  Ну ладно, давайте тогда разбираться.
[02:16:16.120 --> 02:16:18.120]  Или все это знают, это можно промотать.
[02:16:19.120 --> 02:16:20.120]  Может быть что-то случайно.
[02:16:21.120 --> 02:16:23.120]  Может быть, какие-то пробелы могут быть случайны.
[02:16:23.120 --> 02:16:24.120]  Ну могут, да.
[02:16:24.120 --> 02:16:25.120]  Ну, собственно, да.
[02:16:25.120 --> 02:16:26.120]  По этим причинам это все обычно и рассказывают.
[02:16:26.120 --> 02:16:29.120]  По этим причинам придется рассказывать, что такое DFS.
[02:16:30.120 --> 02:16:33.120]  Нет, там просто будет договор, когда там на самом деле, я просто сразу скажу.
[02:16:33.120 --> 02:16:35.120]  Во-первых, надо понимать, что такое белый, серый, черный цвета.
[02:16:35.120 --> 02:16:37.120]  Там что такое обратное эго, там прямое эго.
[02:16:37.120 --> 02:16:39.120]  Там надо терминологию договариваться.
[02:16:39.120 --> 02:16:40.120]  Там какие-то свойства еще там.
[02:16:40.120 --> 02:16:42.120]  Потому что есть вообще понятие LEMO о белых путях.
[02:16:43.120 --> 02:16:45.120]  Как показывает практика, если просто у рандомного человека спросить.
[02:16:45.120 --> 02:16:49.120]  Все знают, что это такое, но если рандомно спросить, то даны рандомные ответы.
[02:16:51.120 --> 02:16:52.120]  Ну вот.
[02:16:53.120 --> 02:16:56.120]  LEMO в безопасном прибрее, это не на DFS, это на Остове.
[02:16:56.120 --> 02:16:58.120]  Ну, до Остовов мы тоже доживем.
[02:16:58.120 --> 02:17:00.120]  Ну, там до Остовы хотя бы прикольные алгоритмы будут.
[02:17:00.120 --> 02:17:02.120]  А, как будто на DFS не будет дерева доминаторов, да.
[02:17:06.120 --> 02:17:09.120]  Или это прям не все знают, что такое компоненты вершины двух связностей, например.
[02:17:11.120 --> 02:17:12.120]  Ну вот.
[02:17:14.120 --> 02:17:15.120]  Ну, там.
[02:17:15.120 --> 02:17:17.120]  Ну, противладно, это мы с вами выясним еще.
[02:17:17.120 --> 02:17:18.120]  Так вот.
[02:17:18.120 --> 02:17:20.120]  Ладно, давайте с F-ками попробуем это обобщить.
[02:17:22.120 --> 02:17:24.120]  Значит, какие свойства нам вообще нужны?
[02:17:25.120 --> 02:17:29.120]  Ну, нам желательно, чтобы вот это доказательство желательно вот в таком виде прокатывало, да.
[02:17:33.120 --> 02:17:34.120]  Значит, что нам нужно?
[02:17:35.120 --> 02:17:39.120]  Ну, во-первых, W от это тут превращается до F от вот этого РО.
[02:17:39.120 --> 02:17:42.120]  Это должно быть больше либо равно, чем F от, так сказать, РО штрих.
[02:17:42.120 --> 02:17:44.120]  Так сказать, обрубленное, да.
[02:17:47.120 --> 02:17:48.120]  Вот.
[02:17:48.120 --> 02:17:56.120]  Это больше либо равно, должно быть, это у нас должно быть больше либо равно, чем F от, значит, РО, РО оптимальная от В-штрих.
[02:18:00.120 --> 02:18:01.120]  Плюс Е.
[02:18:02.120 --> 02:18:06.120]  Значит, РО оптимальная от В-штрих.
[02:18:08.120 --> 02:18:12.120]  Плюс Е от вот этого вот В-штрих, У-штрих, W-штрих.
[02:18:13.120 --> 02:18:16.120]  Так, давайте эту, так, эту красоту я сотру.
[02:18:20.120 --> 02:18:21.120]  Так.
[02:18:28.120 --> 02:18:29.120]  Чего?
[02:18:30.120 --> 02:18:37.120]  Так, ладно, давайте-ка я даже вот не в строчку буду вписывать, пожалуй, давайте я это лучше отдельно буду писать, чтобы было понятно.
[02:18:38.120 --> 02:18:40.120]  Значит, смотрите, что у нас происходит?
[02:18:41.120 --> 02:18:50.120]  F от вот этого абсолютно рандомного пути, да, где-то тут вот возникает вот это ребро В-штрих, У-штрих, да.
[02:18:51.120 --> 02:18:57.120]  Должно быть больше либо равно, чем F от вот этого вот пути В-штрих, У-штрих.
[02:19:00.120 --> 02:19:05.120]  Видите, мы этим явно, ну вот, я вот просто вот эти неральства переписываю аккуратно, да.
[02:19:06.120 --> 02:19:08.120]  Дальше, больше либо равно.
[02:19:09.120 --> 02:19:18.120]  Это больше либо равно, чем, ну, у нас тут такой, такой интересный шаг, мы тут вот этот часть пути заменили на оптимальный.
[02:19:19.120 --> 02:19:27.120]  То есть, вот этот вот оптимальный путь, ну, типа кратчайший ДВ-штрих и плюс У-штрих, ну, потому что мы ж вот так вот релаксировали.
[02:19:29.120 --> 02:19:30.120]  Вот.
[02:19:34.120 --> 02:19:39.120]  Ну, вообще, так, потом мы сказали, что это должно быть больше либо равно, чем ДАТУ-штрих.
[02:19:40.120 --> 02:19:42.120]  Ну, а здесь это больше либо равно, чем ДАТУ.
[02:19:44.120 --> 02:19:52.120]  Вот. Ну, а это равно типа РО от, соответственно, оптимального пути до В и с приписанным вот этим ребром.
[02:19:52.120 --> 02:19:59.120]  Вот. То есть, вот такое доказательство мы хотим, чтобы прокатывало.
[02:20:00.120 --> 02:20:02.120]  Именно так.
[02:20:03.120 --> 02:20:06.120]  Ну, заметим, такие, значит, что нам требуется?
[02:20:09.120 --> 02:20:12.120]  Ну, заметим, вот это свойство на самом деле не так тривиально.
[02:20:13.120 --> 02:20:15.120]  Вот уже первые требования не так тривиальны.
[02:20:16.120 --> 02:20:24.120]  То есть, этот свойство говорит так, что мы отпилили от пути несколько ребер и от этого, там, с конца от этого хуже не стало.
[02:20:26.120 --> 02:20:33.120]  Вот. Тогда придется ввести такое первое свойство, что отпилили БРО, хуже не станет.
[02:20:34.120 --> 02:20:39.120]  То есть, F от РО плюс Е должно быть больше либо равно, чем F от РО.
[02:20:41.120 --> 02:20:42.120]  Понятно, да?
[02:20:43.120 --> 02:20:45.120]  А, ну, то есть, например, минимум уже не равно.
[02:20:46.120 --> 02:20:47.120]  Да. То есть, это вот, да.
[02:20:48.120 --> 02:20:49.120]  То есть, минимум вылетает.
[02:20:50.120 --> 02:20:53.120]  Но минимум действительно имеет такой аналог, как минус один, да, то есть, слой уменьшается.
[02:20:54.120 --> 02:20:57.120]  Ну, то есть, логично, да, что с проходом по либру слой должен расти.
[02:20:58.120 --> 02:21:00.120]  Ну, тут тоже есть понятие слой, да, но я не знаю, насколько.
[02:21:01.120 --> 02:21:06.120]  То есть, понятно, что подразумевается, что F у нас это выдает значение в каком-то, видимо, линейном порядке на множестве, естественно.
[02:21:07.120 --> 02:21:09.120]  Максимум, как мы знаем, прекрасно подходит.
[02:21:09.120 --> 02:21:11.120]  Да, точно знаем.
[02:21:12.120 --> 02:21:13.120]  А, впрочем, сейчас выясним.
[02:21:14.120 --> 02:21:18.120]  Да, господи, мы же пишем эту технологию, чтобы убедиться, как это выяснить.
[02:21:20.120 --> 02:21:21.120]  Так, и теперь двоечка.
[02:21:22.120 --> 02:21:24.120]  Значит, какие еще свойства надо?
[02:21:25.120 --> 02:21:27.120]  А тут, на самом деле, второе свойство не так тривиально.
[02:21:28.120 --> 02:21:33.120]  Вообще, иногда, на первый взгляд, не очень внимательный взгляд, можно даже не заметить, что тут еще что-то вообще надо.
[02:21:35.120 --> 02:21:36.120]  Казалось бы...
[02:21:37.120 --> 02:21:38.120]  Ассоциативность?
[02:21:38.120 --> 02:21:39.120]  Нет.
[02:21:40.120 --> 02:21:41.120]  Нет, какая ассоциативность?
[02:21:42.120 --> 02:21:43.120]  Тут еще круче.
[02:21:44.120 --> 02:21:45.120]  Вот, смотрите, мы сделали такую операцию, что жил-был какой-то путь.
[02:21:46.120 --> 02:21:49.120]  Мы в нем взяли префикс и заменили его на более короткий путь до этой вершины.
[02:21:52.120 --> 02:21:53.120]  Так вот.
[02:21:54.120 --> 02:22:01.120]  На самом деле, далеко не всегда можно задуматься, а следует ли из этого, что если к этим двум путям пририсовать одно и то же ребро, то как бы неравенство будет в ту же сторону.
[02:22:02.120 --> 02:22:07.120]  А вдруг бывает так, что это дорога короткая, а это длинная.
[02:22:08.120 --> 02:22:11.120]  Но если прерисовать не одно и то же ребро, то, наоборот, это станет длиннее, это короче.
[02:22:12.120 --> 02:22:13.120]  Трансситивность, да, в общем?
[02:22:14.120 --> 02:22:15.120]  Вот.
[02:22:16.120 --> 02:22:17.120]  Чего?
[02:22:18.120 --> 02:22:19.120]  Нет, не трансситивность.
[02:22:20.120 --> 02:22:21.120]  Корридионалность добавления...
[02:22:22.120 --> 02:22:23.120]  Ну, за ординалы не скажу.
[02:22:24.120 --> 02:22:26.120]  Я не знаю, какой может тут пример привести.
[02:22:26.120 --> 02:22:29.120]  Ординал, если слева прибавлять, то оно не будет строганным.
[02:22:30.120 --> 02:22:31.120]  Ну, хотя бы не строганным.
[02:22:32.120 --> 02:22:33.120]  Ну вот.
[02:22:34.120 --> 02:22:36.120]  Будет у нас такой экзотический пример, как сумма двух минимумов на пути.
[02:22:41.120 --> 02:22:47.120]  Ну, допустим, вот на одном пути минимум был, допустим, там были путь 2, 3, 5, а на другом там 1, 100, 200.
[02:22:50.120 --> 02:22:52.120]  Тогда сумма двух минимумов здесь оказалась меньше.
[02:22:53.120 --> 02:23:00.120]  Но если вы прерисовали новое ребро, которое было веса 0, то неожиданно пошел обгон.
[02:23:02.120 --> 02:23:03.120]  А зачем нам это свойство?
[02:23:04.120 --> 02:23:06.120]  Ну вот, это такой экзотический пример.
[02:23:07.120 --> 02:23:14.120]  Но это просто, заметим, что просто, то есть оказывается, что вот это свойство на таком функционале обломается.
[02:23:16.120 --> 02:23:17.120]  Да, вот такая экзотика.
[02:23:19.120 --> 02:23:20.120]  А, потому что, ну да, понятно.
[02:23:21.120 --> 02:23:29.120]  Ну, для того, потому что мы тут, видите, подменяем префикс пути на, так сказать, кратчайшие и, должно сказать, то есть нам, по идее, желательно вот такое свойство.
[02:23:31.120 --> 02:23:45.120]  Что если у нас есть какой-то путь, что, что, допустим, у нас есть вот два пути до вершины какой-нибудь В, назовем их РО и РО штрих, и тут еще торчит какое-то ребро Е.
[02:23:46.120 --> 02:24:01.120]  И тогда свойство должно быть такое, что если F от РО больше либо равно, чем E от РО штрих, то из этого должно следовать, что F от РО плюс Е тоже больше либо равен, чем F от РО штрих плюс Е.
[02:24:09.120 --> 02:24:10.120]  Вот, это второе.
[02:24:12.120 --> 02:24:14.120]  Вот, чтобы вот это неравенство заходило.
[02:24:15.120 --> 02:24:17.120]  У нас разве вот этот путь не есть, ну, кратчайших?
[02:24:18.120 --> 02:24:19.120]  Как кто сказал?
[02:24:20.120 --> 02:24:24.120]  Вот, я что-то же говорю, проблема, что у нас произошло следующее. У нас был вот такой какой-то путь здесь, да?
[02:24:25.120 --> 02:24:28.120]  А мы хотим вот этот путь заменить на кратчайший, но он кратчайший для этой вершины.
[02:24:29.120 --> 02:24:38.120]  И может так оказаться, вот это вот, да, конторинтуитивно, но если вот этот путь, допустим, короче, вот этого, то кто сказал, что вот этот путь будет короче этого?
[02:24:39.120 --> 02:24:41.120]  Да, это не конторинтуитивно даже.
[02:24:42.120 --> 02:24:43.120]  Те же самые автобусы.
[02:24:44.120 --> 02:24:50.120]  Нет, в автобусах как раз нормально, потому что если вы там сюда приехали раньше, то как бы с этим ребром вы приедете одинаково.
[02:24:51.120 --> 02:24:56.120]  Просто показать, что как минимум мы можем в одно время уехать, несмотря на то, что в разное приехали.
[02:24:57.120 --> 02:25:02.120]  Да, но главное, что мы раньше приехали, потому что нет, мы же могли позже приехать и не успеть на автобус.
[02:25:03.120 --> 02:25:04.120]  Да, да.
[02:25:05.120 --> 02:25:06.120]  Чего?
[02:25:07.120 --> 02:25:13.120]  Нет, в первом переходе мы делали другое. Мы брали вот путь и отпилили от него с конца ребра.
[02:25:14.120 --> 02:25:15.120]  Это что за путь?
[02:25:16.120 --> 02:25:18.120]  Да, рассмотрим какой-то вот этот вот путь до вершины У.
[02:25:19.120 --> 02:25:25.120]  Мы пытаемся доказать, что вот этот путь, который мы нашли, да, там вот такой вот, да, через релаксацию, он не хуже.
[02:25:26.120 --> 02:25:32.120]  И для этого мы используем вот эту цепочку неравенств, которая превратилась вот там с Ф-ками вот в такую цепочку неравенств.
[02:25:32.120 --> 02:25:37.120]  А мы обязательно используем это свойство, если мы в самом случае просто не релаксируем.
[02:25:38.120 --> 02:25:39.120]  Что значит не релаксировать?
[02:25:40.120 --> 02:25:41.120]  Я не очень понимаю, зачем нам это свойство.
[02:25:42.120 --> 02:25:44.120]  В смысле, нам это свойство?
[02:25:45.120 --> 02:25:50.120]  Нам это звучит очевидно, но в том плане, что глобально, если мы что-то лучше вычисляем.
[02:25:51.120 --> 02:25:55.120]  Нет, в смысле, а где? Ну, релаксировать там надо, потому что мы же по дешкам минимум выбираем.
[02:25:56.120 --> 02:25:59.120]  Но в плане, бывают ли адекватные примеры, в которых первое свойство работает, а второе не работает?
[02:25:59.120 --> 02:26:00.120]  Это работает, а второе не работает.
[02:26:01.120 --> 02:26:02.120]  Потому что сам еду к минимуму, и первое ломается.
[02:26:03.120 --> 02:26:04.120]  Угу.
[02:26:06.120 --> 02:26:07.120]  Так, ну это да.
[02:26:08.120 --> 02:26:11.120]  Да, ну это называется да, что-то да, что-то да.
[02:26:12.120 --> 02:26:15.120]  Да не, можно придумать, чтобы ломалось второе?
[02:26:16.120 --> 02:26:17.120]  Наверное, можно, они достаточно независимы.
[02:26:18.120 --> 02:26:19.120]  Ну, вот так-то вроде да.
[02:26:19.120 --> 02:26:34.120]  Можно, нет, ну можно как минимум накрутить пример в духе, что к каждому, то есть к каждому, то есть длина пути это сумма весов плюс количество ребер умножить на какой-нибудь там плюс бесконечность.
[02:26:35.120 --> 02:26:38.120]  Ну там что-нибудь типа пара из количества ребер.
[02:26:39.120 --> 02:26:43.120]  Сначала мы меряем по количеству ребер, а при равных количествах ребер меряем расстояние.
[02:26:46.120 --> 02:26:47.120]  Например.
[02:26:47.120 --> 02:26:48.120]  Например.
[02:26:49.120 --> 02:26:52.120]  Ну правда, в чем расстояние, меряем по любому функционалу.
[02:26:53.120 --> 02:26:54.120]  На этот раз.
[02:26:55.120 --> 02:26:56.120]  На этом вроде Dx работает нормально.
[02:26:57.120 --> 02:26:58.120]  Ну не совсем.
[02:26:59.120 --> 02:27:06.120]  Нет, если, ну вот, первое будет выполнено, а если мы второй вес вот при одинаковом количестве ребер будем мерить как угодно, то мы вот подсовываем вот эту вот сумму двух минимумов.
[02:27:08.120 --> 02:27:09.120]  Ну блин, ладно.
[02:27:10.120 --> 02:27:13.120]  Ну смотри, как говорится, супер мега эвка.
[02:27:14.120 --> 02:27:15.120]  Супер мега эвка.
[02:27:16.120 --> 02:27:17.120]  Значит у нее два параметра.
[02:27:18.120 --> 02:27:19.120]  Первое, количество ребер на пути.
[02:27:20.120 --> 02:27:22.120]  Второе, сумма двух минимумов этих ребер.
[02:27:23.120 --> 02:27:24.120]  А, не, ну сумма двух минимумов, ладно, да.
[02:27:25.120 --> 02:27:26.120]  Вот, плюс сумма, да.
[02:27:27.120 --> 02:27:29.120]  Ну если сумма и просто расстояние, то нормально.
[02:27:30.120 --> 02:27:31.120]  Ну конечно, да.
[02:27:32.120 --> 02:27:34.120]  Так-то конечно работает, прям вот здесь же и убеждаемся, да.
[02:27:35.120 --> 02:27:37.120]  То есть там в общем то обе свойства работают, очевидно.
[02:27:38.120 --> 02:27:39.120]  Вот.
[02:27:40.120 --> 02:27:42.120]  Так что вот такая красота получается.
[02:27:43.120 --> 02:27:48.120]  Ну опять, да, по-хорошему еще надо проверить, так, нужно ли еще тут какие-то свойства нарисовать.
[02:27:51.120 --> 02:27:55.120]  Но заметим это просто, но заметим, что все остальное верно просто по структуре алгоритма.
[02:27:57.120 --> 02:27:58.120]  Понимаете, да?
[02:28:00.120 --> 02:28:01.120]  Ну еще ладно, да.
[02:28:01.120 --> 02:28:02.120]  Ну еще ладно, да.
[02:28:03.120 --> 02:28:05.120]  То есть это как бы по алгоритмам, по алгоритмам.
[02:28:06.120 --> 02:28:07.120]  Но еще тут, конечно, что DATU это реально расстояние.
[02:28:11.120 --> 02:28:12.120]  Ну а, ну хотя нам это в общем-то и не важно.
[02:28:13.120 --> 02:28:15.120]  Потому что DATU это длина какого-то пути реально.
[02:28:16.120 --> 02:28:17.120]  Мы доказываем по большому счету, что.
[02:28:18.120 --> 02:28:26.120]  Ну еще для того, чтобы алгоритм работал за быстро нам бы хотелось, чтобы мы могли адекватно пересчитывать, как меняется дешка при добавлении ребра.
[02:28:27.120 --> 02:28:28.120]  Да, ну конечно.
[02:28:28.120 --> 02:28:31.120]  Да, это подразумевается, что у нас F как-то вот хорошо устроено, да.
[02:28:32.120 --> 02:28:33.120]  Ну не просто.
[02:28:34.120 --> 02:28:35.120]  Да, понятно.
[02:28:36.120 --> 02:28:43.120]  Да, потому что может там вообще развлекаться, что там е, там вес строки, то есть вес ребра это строка, а там вес пути это конкотинация.
[02:28:45.120 --> 02:28:46.120]  Вот.
[02:28:47.120 --> 02:28:49.120]  И как мы сравниваем веса, ну естественно, лексикографически.
[02:28:50.120 --> 02:28:51.120]  Количество вхождения одно и в другое.
[02:28:52.120 --> 02:28:54.120]  Правда, там уже больше похоже на циклы отрицательного веса будут, конечно.
[02:28:55.120 --> 02:28:58.120]  Потому что типа нам придется в какой-то момент обязательно прийти, потому что, знаете, вот это.
[02:28:59.120 --> 02:29:03.120]  Не, вершина это строки, а длина ребра это количество вхождения там одно и в другую.
[02:29:04.120 --> 02:29:05.120]  Хотя не так интересно, так сильно посчитали и все.
[02:29:06.120 --> 02:29:07.120]  Мясо, да.
[02:29:08.120 --> 02:29:09.120]  Что-нибудь интереснее можно.
[02:29:10.120 --> 02:29:12.120]  Нет, фишка, я говорю, конкотинация строчек-то на нарисованных на ребрах.
[02:29:13.120 --> 02:29:14.120]  Ну тогда там получается такой эпический тест.
[02:29:15.120 --> 02:29:16.120]  Вот такой.
[02:29:17.120 --> 02:29:19.120]  А, хотя да, потому что мясо точно.
[02:29:24.120 --> 02:29:26.120]  Да, если строки ищем лексикографически, то.
[02:29:27.120 --> 02:29:28.120]  Да.
[02:29:31.120 --> 02:29:32.120]  То мы немножко умираем.
[02:29:35.120 --> 02:29:36.120]  Да.
[02:29:37.120 --> 02:29:38.120]  Но он даже не отрицательный.
[02:29:39.120 --> 02:29:40.120]  Как это называется, какая минимальная строчка будет в хит?
[02:29:41.120 --> 02:29:42.120]  Минус бесконечность, да.
[02:29:43.120 --> 02:29:44.120]  Ну, кстати, он с строками это очень хороший пример.
[02:29:47.120 --> 02:29:48.120]  Это прикольный.
[02:29:49.120 --> 02:29:50.120]  Строка длины минус бесконечность.
[02:29:54.120 --> 02:29:55.120]  Да.
[02:29:58.120 --> 02:29:59.120]  Нет, ну да.
[02:30:00.120 --> 02:30:01.120]  Какое мясо надо.
[02:30:02.120 --> 02:30:04.120]  Нет, на самом деле это в принципе, конечно, уже это начинает
[02:30:05.120 --> 02:30:06.120]  нас приводить вообще к отрицательным ребрам.
[02:30:07.120 --> 02:30:09.120]  Потому что заметим, что, да, вот видите, то есть в некоторых
[02:30:10.120 --> 02:30:12.120]  компаратах функционала вообще бывает так, что можно
[02:30:13.120 --> 02:30:14.120]  то есть накручивать сколь угодно, да.
[02:30:15.120 --> 02:30:16.120]  Но сейчас будем думать.
[02:30:17.120 --> 02:30:19.120]  Потому что заметим, что у Dexter'я, конечно, принципиально
[02:30:20.120 --> 02:30:22.120]  функциональное ограничение, вот как минимум уже первое, о том, что
[02:30:22.120 --> 02:30:24.120]  как бы у нас должны быть какие-то слои и мы по ним как-то
[02:30:25.120 --> 02:30:26.120]  непрерывно движемся.
[02:30:27.120 --> 02:30:28.120]  Ну, вот.
[02:30:29.120 --> 02:30:30.120]  Ну, вот.
[02:30:31.120 --> 02:30:33.120]  Дик, ты первое ограничение, что у нас адекватные условия задачи.
[02:30:34.120 --> 02:30:35.120]  Ну, вот.
[02:30:36.120 --> 02:30:37.120]  Адекватная?
[02:30:38.120 --> 02:30:40.120]  Ну, мы не можем там бегать условно в прошлое.
[02:30:41.120 --> 02:30:42.120]  Ну, нет.
[02:30:43.120 --> 02:30:44.120]  Ну, это как бы наше восприятие такое.
[02:30:45.120 --> 02:30:48.120]  Потому что, в общем-то, возникают задачи, если уж идти дальше.
[02:30:49.120 --> 02:30:50.120]  Так, ну здесь вот, там.
[02:30:50.120 --> 02:30:52.120]  А, ну хотя нет, давайте вот, если тут пообобщать, то тут
[02:30:53.120 --> 02:30:54.120]  как бы можно уже рассматривать примеры, да.
[02:30:55.120 --> 02:30:56.120]  То есть, например, тупо.
[02:30:57.120 --> 02:30:58.120]  Если мы ищем максимум на пути, например, да.
[02:30:59.120 --> 02:31:00.120]  Ну, мы обнаружим, что если пути у нас максимум на пути,
[02:31:01.120 --> 02:31:03.120]  то заметим, что первое условие, очевидно, выполнено, да.
[02:31:04.120 --> 02:31:05.120]  Вот.
[02:31:06.120 --> 02:31:08.120]  И, там, если жили были два пути, первые больше второго,
[02:31:09.120 --> 02:31:11.120]  то если к ним добавили ребро, то мы берем максимум этого
[02:31:12.120 --> 02:31:13.120]  и этого и максимум этого и этого.
[02:31:14.120 --> 02:31:15.120]  Ну, очевидно, что это меньше не стало.
[02:31:16.120 --> 02:31:17.120]  Правда?
[02:31:18.120 --> 02:31:19.120]  Ну, логично, да?
[02:31:20.120 --> 02:31:23.120]  Ну, минимум, ну, вылетает в трубу.
[02:31:24.120 --> 02:31:26.120]  Там два минимума, там вылетает тоже в трубу.
[02:31:27.120 --> 02:31:28.120]  Там что еще?
[02:31:29.120 --> 02:31:30.120]  Автобусы.
[02:31:31.120 --> 02:31:32.120]  Ну, тут автобусов самое интересное тут сформулировать,
[02:31:33.120 --> 02:31:34.120]  а что такое F от РО в терминах автобуса.
[02:31:35.120 --> 02:31:37.120]  Ну, там это, конечно, просто рассмотрим путь, последовательность ребер,
[02:31:38.120 --> 02:31:40.120]  и скажем, что длина пути это минимальное время,
[02:31:41.120 --> 02:31:43.120]  когда мы на таком пути можем приехать вообще по такому пути.
[02:31:44.120 --> 02:31:45.120]  Ну, просто жадно выбирая автобус, либо плюс бесконечность,
[02:31:46.120 --> 02:31:47.120]  если по такому пути приехать вообще нельзя.
[02:31:47.120 --> 02:31:50.120]  Ну, тогда первое слово, первое свойство логично,
[02:31:51.120 --> 02:31:54.120]  потому что мы приезжаем в заданное время и как бы там все-таки едем.
[02:31:55.120 --> 02:31:57.120]  То есть там подразумевается главное, что автобусы в прошлое и не ездят.
[02:31:58.120 --> 02:32:02.120]  На второе, да, если, допустим, я в эту вершину Паро приезжаю чуть позже,
[02:32:03.120 --> 02:32:08.120]  чем Ро Штрих, то как бы прицепляя ребро Е, я, наверное, в У через вот это раньше не приеду.
[02:32:09.120 --> 02:32:11.120]  Потому что, как минимум, тем же автобусом, который я уехал здесь,
[02:32:12.120 --> 02:32:13.120]  могу уехать и здесь.
[02:32:14.120 --> 02:32:15.120]  Так что вот, соответственно, классика.
[02:32:15.120 --> 02:32:17.120]  О, ты значит, ты кому-то прям вот это рассказывал.
[02:32:18.120 --> 02:32:24.120]  Ну, примерно так, только без эфок и не заводя сильно формирую.
[02:32:25.120 --> 02:32:26.120]  Из общего случая как-то.
[02:32:27.120 --> 02:32:29.120]  Ну, это да, нет, просто обычно там задачи автобусы там часто даются проще.
[02:32:30.120 --> 02:32:32.120]  Там рассказывается просто алгоритм дэкстри, а потом в контесте дается эта задача.
[02:32:33.120 --> 02:32:36.120]  А потом на разборе говорим, она решается алгоритм дэкстри, доказательства,
[02:32:37.120 --> 02:32:39.120]  вот приэмулируем доказательства, обнаружим шуфу.
[02:32:40.120 --> 02:32:41.120]  Это совсем треш.
[02:32:41.120 --> 02:32:42.120]  Это совсем треш.
[02:32:43.120 --> 02:32:44.120]  Ну, почти.
[02:32:45.120 --> 02:32:49.120]  В смысле, это просто какая-то неочевидная из названия задача алгоритм дэкстри.
[02:32:50.120 --> 02:32:53.120]  В плане, когда тебе дэкстри читают в первый раз, наверное, это...
[02:32:54.120 --> 02:32:55.120]  Наверное, это может.
[02:32:56.120 --> 02:32:59.120]  Так делают волкаша в параллели ц, и это действительно писано.
[02:33:00.120 --> 02:33:02.120]  Сейчас делаю как? Прямо вот с этим вот рассказываю?
[02:33:03.120 --> 02:33:04.120]  В смысле, рассказывают просто дэкстри.
[02:33:05.120 --> 02:33:06.120]  Правильно.
[02:33:07.120 --> 02:33:08.120]  И это нормально придумывается.
[02:33:09.120 --> 02:33:10.120]  Это примерно то же самое.
[02:33:11.120 --> 02:33:12.120]  Да-да-да. Ну окей, окей.
[02:33:14.120 --> 02:33:16.120]  Единственная проблема, а где волкаша потом рассказывают?
[02:33:17.120 --> 02:33:18.120]  Вот это вот.
[02:33:19.120 --> 02:33:20.120]  Наверное, они разнесут.
[02:33:21.120 --> 02:33:22.120]  На разборе потом.
[02:33:23.120 --> 02:33:24.120]  А, ну могут.
[02:33:25.120 --> 02:33:26.120]  Да, Гайля рассказывали?
[02:33:27.120 --> 02:33:28.120]  Ух ты, а кто вел?
[02:33:29.120 --> 02:33:30.120]  Что?
[02:33:31.120 --> 02:33:32.120]  Что такое разбор волкаша?
[02:33:33.120 --> 02:33:34.120]  Панамарев.
[02:33:35.120 --> 02:33:36.120]  А, ну окей.
[02:33:37.120 --> 02:33:38.120]  Ну окей, хорошо.
[02:33:39.120 --> 02:33:40.120]  Посмотри, тогда просто интересно.
[02:33:42.120 --> 02:33:44.120]  Ой, ну это да, нет.
[02:33:45.120 --> 02:33:49.120]  Интересно иногда просливать цепочки, потому что мне это рассказывал еще мой великий предшественник.
[02:33:50.120 --> 02:33:51.120]  Ну, Гальштейн, который.
[02:33:52.120 --> 02:33:53.120]  Виталий Борисович.
[02:33:54.120 --> 02:33:55.120]  В этом видео.
[02:33:56.120 --> 02:33:57.120]  Вот еще интересно.
[02:33:58.120 --> 02:33:59.120]  Ну окей.
[02:34:00.120 --> 02:34:02.120]  Так что вот такая красота получается.
[02:34:03.120 --> 02:34:06.120]  Ну, значит теперь попробуем копнуть в другую сторону.
[02:34:06.120 --> 02:34:07.120]  В другую сторону.
[02:34:08.120 --> 02:34:10.120]  Ну сейчас тоже будет не совсем тривиально.
[02:34:11.120 --> 02:34:18.120]  Это, конечно, там волкаша тоже и звучает, а волкаша это часто такое, как какая-то отдельная маленькая ветчика, которую как-то не все запоминают.
[02:34:20.120 --> 02:34:21.120]  Так.
[02:34:22.120 --> 02:34:23.120]  Хотя нет, почало, конечно, запоминает тебе.
[02:34:24.120 --> 02:34:26.120]  Потому что что делать, если мы ищем корчайший путь, и там бывают отрицательные веса.
[02:34:27.120 --> 02:34:29.120]  Да, мы сейчас возвращаемся все в обычное время.
[02:34:32.120 --> 02:34:33.120]  То есть в обычное, там.
[02:34:34.120 --> 02:34:35.120]  Ну сейчас.
[02:34:36.120 --> 02:34:40.120]  Она, по-моему, на циклу отрицательного веса не работает.
[02:34:41.120 --> 02:34:42.120]  Сейчас.
[02:34:43.120 --> 02:34:44.120]  Вот сейчас все.
[02:34:45.120 --> 02:34:48.120]  Не, ну тебе же нужно понять, что цикл отрицательного веса есть, а не просто где-то.
[02:34:49.120 --> 02:34:50.120]  Да.
[02:34:51.120 --> 02:34:52.120]  Не волнуйтесь, сейчас все будет.
[02:34:53.120 --> 02:34:57.120]  Бронетанк наших лекций сейчас как бы все это перемелет спокойно, не волнуйтесь.
[02:34:58.120 --> 02:35:02.120]  Если нам гарантируется нет циклов, то можно реально потенциалы расставить.
[02:35:02.120 --> 02:35:06.120]  Ну, правда, для того, чтобы их расставить, тебе придется найти корчайшее расстояние, да.
[02:35:07.120 --> 02:35:10.120]  Посмотрите, что у тебя цельнейших реактораций.
[02:35:11.120 --> 02:35:13.120]  Нет, смотрите, тут какую задачу решать.
[02:35:14.120 --> 02:35:15.120]  Стоп, давайте начнем.
[02:35:16.120 --> 02:35:17.120]  Ну пока, например, мы решаем задачу.
[02:35:22.120 --> 02:35:23.120]  Как она называется?
[02:35:25.120 --> 02:35:28.120]  Сейчас, там просто какие-то, есть просто умная аббревиатура на самом деле.
[02:35:28.120 --> 02:35:29.120]  Там что-то там.
[02:35:30.120 --> 02:35:31.120]  В данном случае, по-моему.
[02:35:32.120 --> 02:35:33.120]  Так, S, S, A.
[02:35:34.120 --> 02:35:35.120]  Вот что там, D, что ли, получается.
[02:35:37.120 --> 02:35:39.120]  Потому что вот такие задачи, есть там вот такие понятия.
[02:35:41.120 --> 02:35:42.120]  Ну вот.
[02:35:43.120 --> 02:35:44.120]  Там S, S, S, ну допустим.
[02:35:45.120 --> 02:35:46.120]  Похоже на трагму.
[02:35:47.120 --> 02:35:48.120]  Т.
[02:35:49.120 --> 02:35:50.120]  Нет, там нет.
[02:35:51.120 --> 02:35:53.120]  Нет, просто я не помню точные буквы, как бы, но классическая там вот.
[02:35:54.120 --> 02:35:55.120]  Как бы расшифровывается так.
[02:35:55.120 --> 02:35:56.120]  Сингл сорс, там сингл таркет.
[02:35:57.120 --> 02:35:58.120]  Или сингл финиш.
[02:35:59.120 --> 02:36:00.120]  Вот я вот там вместо таргета, что-то другие какие-то могут быть буквы.
[02:36:01.120 --> 02:36:02.120]  Там P, по-моему.
[02:36:03.120 --> 02:36:04.120]  Да, один из паттернов в программе.
[02:36:05.120 --> 02:36:06.120]  Нет, просто что это.
[02:36:07.120 --> 02:36:09.120]  Кажется, есть SSSP и сингл сорс шортеспас.
[02:36:10.120 --> 02:36:11.120]  А, шортеспас, точно.
[02:36:12.120 --> 02:36:13.120]  Да.
[02:36:14.120 --> 02:36:15.120]  А, ну значит.
[02:36:16.120 --> 02:36:17.120]  Вот.
[02:36:18.120 --> 02:36:19.120]  А, хорошо.
[02:36:20.120 --> 02:36:21.120]  Да, спасибо, точно.
[02:36:22.120 --> 02:36:23.120]  Да, точно, точно, точно, точно.
[02:36:23.120 --> 02:36:24.120]  Да, точно, точно, точно, точно.
[02:36:25.120 --> 02:36:26.120]  Как паттерн в программировании.
[02:36:27.120 --> 02:36:28.120]  Да.
[02:36:29.120 --> 02:36:30.120]  Да.
[02:36:31.120 --> 02:36:32.120]  Значит.
[02:36:33.120 --> 02:36:34.120]  Ну, тут вот, да.
[02:36:35.120 --> 02:36:36.120]  То есть обычно, то есть разница такая.
[02:36:37.120 --> 02:36:38.120]  То есть бывает разные задачи.
[02:36:39.120 --> 02:36:40.120]  Бывает задача просто дана старта вершины, дана финишни вершины.
[02:36:41.120 --> 02:36:42.120]  И найдите корчайший путь.
[02:36:43.120 --> 02:36:44.120]  Ну, это просто вот на уровне.
[02:36:45.120 --> 02:36:46.120]  Тут есть SSSP.
[02:36:47.120 --> 02:36:48.120]  Ну вот, есть там наоборот.
[02:36:49.120 --> 02:36:50.120]  У него тут есть APSP.
[02:36:50.120 --> 02:36:51.120]  Это как бы all pairs.
[02:36:52.120 --> 02:36:53.120]  То есть, типа, давайте найдем, корчайшие пути между всеми парами вершин.
[02:36:54.120 --> 02:36:55.120]  Есть что-то еще.
[02:36:56.120 --> 02:36:57.120]  Ну, какой-нибудь, видимо, one pair шортеспас.
[02:36:58.120 --> 02:36:59.120]  Нет, ну есть там.
[02:37:00.120 --> 02:37:01.120]  Сингл пейер там, да.
[02:37:02.120 --> 02:37:03.120]  Я вот не помню, как называется задача, которую сейчас решаем мы.
[02:37:04.120 --> 02:37:05.120]  То есть, типа, сингл сорс, но там, собственно, все таргеты.
[02:37:06.120 --> 02:37:07.120]  Вот.
[02:37:08.120 --> 02:37:09.120]  Это, наверное, SSSP.
[02:37:10.120 --> 02:37:11.120]  Вроде это есть SSSP.
[02:37:12.120 --> 02:37:13.120]  Да.
[02:37:14.120 --> 02:37:15.120]  Да.
[02:37:16.120 --> 02:37:17.120]  Да.
[02:37:18.120 --> 02:37:19.120]  Да.
[02:37:20.120 --> 02:37:21.120]  А, да?
[02:37:22.120 --> 02:37:23.120]  А, ну окей, хорошо.
[02:37:24.120 --> 02:37:25.120]  Ладно, пусть.
[02:37:26.120 --> 02:37:27.120]  Ну, наверное, хорошо.
[02:37:28.120 --> 02:37:29.120]  Да, да, да, да.
[02:37:30.120 --> 02:37:31.120]  Ну вот, да, вот так вот, да.
[02:37:32.120 --> 02:37:33.120]  Мы пока ищем корчайшие расстояния от одной вершины до всех остальных.
[02:37:34.120 --> 02:37:35.120]  Чего?
[02:37:36.120 --> 02:37:37.120]  Ну.
[02:37:38.120 --> 02:37:39.120]  А.
[02:37:40.120 --> 02:37:41.120]  А, это ничего.
[02:37:42.120 --> 02:37:43.120]  Это я букву вспоминал.
[02:37:44.120 --> 02:37:45.120]  Так.
[02:37:46.120 --> 02:37:48.120]  Вот, определение SSSP это для всех достижимых из одной вершины.
[02:37:48.120 --> 02:37:49.120]  Нет, ну не совсем.
[02:37:50.120 --> 02:37:51.120]  Но я говорю так.
[02:37:52.120 --> 02:37:53.120]  Найдем все корчайшие расстояния.
[02:37:54.120 --> 02:37:55.120]  Просто иногда оно бывает плюс бесконечность.
[02:37:56.120 --> 02:37:57.120]  Вот.
[02:37:58.120 --> 02:37:59.120]  Да.
[02:38:00.120 --> 02:38:01.120]  Вот.
[02:38:02.120 --> 02:38:03.120]  Та переча.
[02:38:04.120 --> 02:38:05.120]  Значит, теперь, что делать, если у нас.
[02:38:06.120 --> 02:38:07.120]  Ну вот, у нас бывает.
[02:38:08.120 --> 02:38:09.120]  Если у нас есть отрицательные ребра.
[02:38:10.120 --> 02:38:11.120]  То, конечно, да.
[02:38:12.120 --> 02:38:13.120]  Дэкстрей там со всякими BFS-ами тут вылетает в трубу.
[02:38:14.120 --> 02:38:15.120]  Даже если тут единица и минус единица.
[02:38:16.120 --> 02:38:17.120]  Там пять какой-нибудь.
[02:38:18.120 --> 02:38:19.120]  Там шесть.
[02:38:20.120 --> 02:38:21.120]  Там минус восемь.
[02:38:22.120 --> 02:38:23.120]  Там все что угодно может быть.
[02:38:24.120 --> 02:38:25.120]  Вот.
[02:38:26.120 --> 02:38:27.120]  Ну а что можно сделать?
[02:38:28.120 --> 02:38:29.120]  Ну вот.
[02:38:30.120 --> 02:38:31.120]  Тут бывает маленькая проблема.
[02:38:32.120 --> 02:38:33.120]  Ну вот.
[02:38:34.120 --> 02:38:37.120]  Бывает еще проблема, что у нас иногда бывают циклы отрицательного веса.
[02:38:42.120 --> 02:38:43.120]  Это подлянка.
[02:38:44.120 --> 02:38:45.120]  Нет, это не смерть.
[02:38:45.120 --> 02:38:51.120]  Это просто знак того, что расстояние до вершины бывает не только плюс бесконечность, когда просто пути нет.
[02:38:52.120 --> 02:38:53.120]  Но и бывает минус бесконечность.
[02:38:54.120 --> 02:38:57.120]  То есть это означает, что можно накрутить путь сколь угодно малого веса.
[02:38:58.120 --> 02:38:59.120]  В чем?
[02:39:00.120 --> 02:39:01.120]  Малого не по модуле, а в смысле отрицательности.
[02:39:02.120 --> 02:39:05.120]  То есть такое, как минимум, может быть.
[02:39:06.120 --> 02:39:09.120]  И это придется учитывать.
[02:39:10.120 --> 02:39:12.120]  Но как мы это сделаем?
[02:39:13.120 --> 02:39:14.120]  Ну первое, что придется в голову.
[02:39:15.120 --> 02:39:16.120]  Хорошо.
[02:39:17.120 --> 02:39:18.120]  Вот как накрутить минус бесконечность?
[02:39:19.120 --> 02:39:22.120]  Найти отрицательный цикл и собственно и накручивать на нем сколько угодно.
[02:39:23.120 --> 02:39:28.120]  Но правда, для этого нужно найти цикл отрицательного веса, через который можно от этой вершины до этой дойти.
[02:39:29.120 --> 02:39:33.120]  То есть в таком графе цикл отрицательного веса есть, но путь до этой вершины вполне себе...
[02:39:34.120 --> 02:39:36.120]  То есть расстояние до нее вполне себе пять.
[02:39:37.120 --> 02:39:40.120]  Потому что цикл отрицательного веса где-то в ауте.
[02:39:42.120 --> 02:39:43.120]  Но тут давайте какая-то вопрос.
[02:39:44.120 --> 02:39:45.120]  Хорошо.
[02:39:46.120 --> 02:39:51.120]  А может ли обойтись без цикла отрицательного веса и тем не менее получить минус бесконечность?
[02:39:52.120 --> 02:39:53.120]  А можно вопрос?
[02:39:54.120 --> 02:39:55.120]  А, все, нет вопроса.
[02:39:56.120 --> 02:39:58.120]  Но без цикла отрицательного веса и минус бесконечность?
[02:39:59.120 --> 02:40:02.120]  Нет, если у нас путь какой-то, чтобы путь был скорой годно малого веса, он должен быть бесконечным.
[02:40:03.120 --> 02:40:05.120]  Ну нет, бесконечным он быть не обязан?
[02:40:06.120 --> 02:40:07.120]  Нет.
[02:40:08.120 --> 02:40:09.120]  Ну давай туда.
[02:40:09.120 --> 02:40:14.120]  Ну я думаю, что нам не вовремя заходить по одной и той же вершине два раза, если у нас нет цикла.
[02:40:15.120 --> 02:40:16.120]  Ну да.
[02:40:17.120 --> 02:40:18.120]  Точнее, нам не выгодно проходить по циклу и не отрицательного веса.
[02:40:19.120 --> 02:40:20.120]  Нет, ну как не...
[02:40:21.120 --> 02:40:22.120]  Ну ладно.
[02:40:23.120 --> 02:40:24.120]  Идея...
[02:40:25.120 --> 02:40:26.120]  Так, ну ладно, понятно, да.
[02:40:27.120 --> 02:40:28.120]  Не отрицательного веса.
[02:40:29.120 --> 02:40:30.120]  Так, ну понятно.
[02:40:31.120 --> 02:40:34.120]  В общем, идея понятная, это конечно суть вопрос разных формулировок или разных, но суть действительно одна.
[02:40:35.120 --> 02:40:36.120]  То есть просто докажем.
[02:40:36.120 --> 02:40:49.120]  То есть утверждение, можно доказать так, утверждение, расстояние от S до T равно минус бесконечности.
[02:40:50.120 --> 02:40:55.120]  Тогда и только тогда, когда существует цикл отрицательного веса...
[02:40:56.120 --> 02:40:58.120]  На пути из S до T, видимо.
[02:40:59.120 --> 02:41:01.120]  Ну не точная формулировка.
[02:41:01.120 --> 02:41:05.120]  Как бы эта формулировка просто валится вот каким-то вот таким красивым тестом.
[02:41:06.120 --> 02:41:08.120]  Вот такой балалаечкой.
[02:41:09.120 --> 02:41:11.120]  Так я ж не говорю, что на качающем пути.
[02:41:12.120 --> 02:41:13.120]  Нет, ну вот просто...
[02:41:14.120 --> 02:41:16.120]  Ну ассоциации немножко не те, да.
[02:41:17.120 --> 02:41:21.120]  Поэтому сказать, если существует цикл отрицательного веса...
[02:41:22.120 --> 02:41:23.120]  Достижимый...
[02:41:24.120 --> 02:41:25.120]  Ну я так скажу, достижимый...
[02:41:27.120 --> 02:41:29.120]  Достижимый из S...
[02:41:30.120 --> 02:41:32.120]  Ну вот и из...
[02:41:33.120 --> 02:41:36.120]  Ну допустим, из которого достижима T.
[02:41:40.120 --> 02:41:41.120]  Вот.
[02:41:42.120 --> 02:41:44.120]  Вот такое утверждение.
[02:41:45.120 --> 02:41:50.120]  В обратную сторону очевидно, потому что пришли в этот цикл, накрутили сколько нам нужно и пришли в T.
[02:41:51.120 --> 02:41:53.120]  Там всякие подлые тесты на эту тему есть.
[02:41:53.120 --> 02:41:54.120]  Здесь, да.
[02:41:55.120 --> 02:41:56.120]  Тут бывает 10 девятый.
[02:41:57.120 --> 02:41:58.120]  Тут какой-нибудь мелкий тест.
[02:41:59.120 --> 02:42:00.120]  Минус один, минус один, минус один.
[02:42:01.120 --> 02:42:02.120]  И 10 девятый.
[02:42:04.120 --> 02:42:09.120]  Основная подлянка, кстати, бывает еще задачей в том, что тут бывает еще ребро веса минус 10.
[02:42:10.120 --> 02:42:16.120]  И тогда, знаете, очень легко допустить ошибку, которая вот тут минус бесконечности не идентифицирует.
[02:42:17.120 --> 02:42:19.120]  Ну и очень зря.
[02:42:20.120 --> 02:42:21.120]  Ну и другое.
[02:42:21.120 --> 02:42:22.120]  Эта задача, конечно...
[02:42:23.120 --> 02:42:24.120]  Да, но это, в общем-то, это...
[02:42:25.120 --> 02:42:31.120]  Невозможно решить эту задачу на информатике, где нужно находить все пары, короче, расстояния со всеми этими случаями.
[02:42:32.120 --> 02:42:33.120]  Ну почему? Прекрасно можно.
[02:42:34.120 --> 02:42:38.120]  Нет, это можно сделать из асимптутику Форда Белмана и из асимптутику Флойда. В чем проблема?
[02:42:39.120 --> 02:42:41.120]  Проблема в том, что баги, баги, баги.
[02:42:42.120 --> 02:42:44.120]  А, ну, это всегда проблема, знаете?
[02:42:45.120 --> 02:42:46.120]  Это не проблема задачи, да?
[02:42:47.120 --> 02:42:48.120]  Да. Нет, ну почему?
[02:42:48.120 --> 02:42:49.120]  Ну почему?
[02:42:50.120 --> 02:42:51.120]  Ага.
[02:42:52.120 --> 02:42:57.120]  Но это хорошо. Просто если принять это за абсолютную истину, то тогда причин не любить геометрию нет.
[02:42:58.120 --> 02:43:02.120]  Потому что геометрия тоже там не любит, потому что по причине баги, баги, баги, баги.
[02:43:03.120 --> 02:43:05.120]  Глобально в геометрии все хорошо.
[02:43:06.120 --> 02:43:07.120]  А еще подобрать епсилон.
[02:43:08.120 --> 02:43:12.120]  По моему опту в 97% случаев там называется бага не в епсилонах.
[02:43:13.120 --> 02:43:16.120]  А бага просто, что вы там либо случай не рассмотрели, либо просто сильно опираетесь на картинку.
[02:43:16.120 --> 02:43:21.120]  Мне очень интересно, что приходилось будет епсилон, чтобы получить типа 50 из 100.
[02:43:22.120 --> 02:43:23.120]  Угу.
[02:43:24.120 --> 02:43:25.120]  Ну бывает.
[02:43:26.120 --> 02:43:31.120]  Нет, просто многие геометрические задачи, они там бывают на такие, там бывает такое, что решение на самом деле существует целых числа.
[02:43:32.120 --> 02:43:37.120]  В нашем 11 классе епсилон решал 70-100 баллов просто по задаче.
[02:43:38.120 --> 02:43:39.120]  А, ну окей.
[02:43:39.120 --> 02:43:43.120]  А в баллах был епсилон какой-то типа 1-11, по-моему.
[02:43:44.120 --> 02:43:45.120]  Неплохо.
[02:43:46.120 --> 02:43:47.120]  1-10 не получало 100.
[02:43:48.120 --> 02:43:49.120]  А, неплохо.
[02:43:50.120 --> 02:43:51.120]  Но правда, да, а потом не выяснилось?
[02:43:52.120 --> 02:43:53.120]  Это было вообще не очевидно, что нужно именно так покрутить.
[02:43:54.120 --> 02:43:59.120]  Нет, вопрос только не выяснилось ли потом, что у жюри на самом деле, как это в таких случаях положено, есть решение без епсилонов.
[02:44:00.120 --> 02:44:01.120]  Нет, там не было.
[02:44:02.120 --> 02:44:04.120]  Да? Тогда жюри откуда они знают, что это епсилон правильный, да?
[02:44:05.120 --> 02:44:07.120]  Ну просто нет, епсилон приходит тест и все.
[02:44:08.120 --> 02:44:09.120]  Да, а тест, нет, проблема.
[02:44:10.120 --> 02:44:15.120]  Но тесты писали, да, то тесты основаны на, ответ на тесты основан на авторском решении, которое писали авторы, спрашивается антроний.
[02:44:16.120 --> 02:44:19.120]  На задачу был просто, вот там есноу зависело от епсилов.
[02:44:20.120 --> 02:44:24.120]  Вот так вот, внимание просто, откуда жюри знают, что у них правильные ответы тогда в таком случае.
[02:44:25.120 --> 02:44:27.120]  Тогда уже вопрос доказательности.
[02:44:28.120 --> 02:44:32.120]  Нет, я помню Макс Ахмедов, как бы я помню, Петр Заводский там умел там отвечать на такие вопросы.
[02:44:32.120 --> 02:44:40.120]  Ну там действительно был что-то эпик, действительно с епсилонами, но и там говорили, что мы просто проводили эксперименты и обнаруживали, что там вот, и просто выводили правильный епсилон.
[02:44:41.120 --> 02:44:45.120]  Что там как бы они там все кто-то кучкуется, а потом бабах большой гэп и опять кучкуется.
[02:44:46.120 --> 02:44:51.120]  Там в этом смысле мы проводили прям эксперименты, это действительно так, поэтому все хорошо.
[02:44:52.120 --> 02:44:53.120]  Вот.
[02:44:53.120 --> 02:45:02.120]  Кстати, на одну из команд, которые обсуждают, писали по-моему что-то про кода, тоже приходилось епсилон геомикрутить.
[02:45:03.120 --> 02:45:04.120]  Да, ух ты.
[02:45:05.120 --> 02:45:07.120]  Ну бывает. Ну окей, хорошо.
[02:45:08.120 --> 02:45:09.120]  Так, ладно, убираем.
[02:45:10.120 --> 02:45:11.120]  Так вот, господа.
[02:45:12.120 --> 02:45:14.120]  Так, господа, что-то шум пошел какой-то.
[02:45:15.120 --> 02:45:18.120]  Значит, смотрите, идем в эту сторону, все понятно, а вот в другую сторону вопрос.
[02:45:18.120 --> 02:45:25.120]  Ну вот, верно, если путь минус бесконечность, то почему существует центр цикла отрицательного веса, через который можно пройти?
[02:45:26.120 --> 02:45:28.120]  Пусть на пути нет цикла отрицательного веса.
[02:45:29.120 --> 02:45:30.120]  Нет, на каком пути?
[02:45:31.120 --> 02:45:32.120]  На каком пути?
[02:45:33.120 --> 02:45:34.120]  Возьмем.
[02:45:35.120 --> 02:45:39.120]  Да, минус бесконечность, это вещь такая, у нас нет пути длины минус бесконечность.
[02:45:40.120 --> 02:45:46.120]  У нас любой путь, который мы рассматриваем, он как бы скостает из конечного числа ребер и, соответственно, нет.
[02:45:47.120 --> 02:45:49.120]  И, соответственно, имеет какой-то вполне себе конечный вес.
[02:45:50.120 --> 02:45:52.120]  Возьмем минимальный вес ребра.
[02:45:53.120 --> 02:45:54.120]  Домножим его на n.
[02:45:55.120 --> 02:45:59.120]  И скажем, что у нас есть путь веса меньше, чем n на минимальный вес ребра.
[02:46:00.120 --> 02:46:04.120]  Нет, ладно, идея верная, только формулировка из цикла уже нужна, если шнурки в повторной связности.
[02:46:05.120 --> 02:46:08.120]  В повторном связывании, когда вы хотите проверить про удовольствие вам пристрелить себе ногу.
[02:46:09.120 --> 02:46:12.120]  Потому что более короткая формулировка звучит так.
[02:46:13.120 --> 02:46:17.120]  Рассмотрим минимальный по весу простой путь из СПТ.
[02:46:20.120 --> 02:46:24.120]  Ну, заметим, что простых путей у нас в конечном графе конечное количество, правда?
[02:46:25.120 --> 02:46:29.120]  Поэтому и кратчайший простой путь существует. Вот у него, допустим, вес w.
[02:46:30.120 --> 02:46:36.120]  Дист от w равно минус бесконечности означает, что существует путь веса меньше w.
[02:46:37.120 --> 02:46:40.120]  Вот. Рассмотрим путь длины меньше w.
[02:46:41.120 --> 02:46:47.120]  Вот. Тогда заметим, что этот путь рано или поздно зациклится.
[02:46:48.120 --> 02:46:51.120]  Вот я буду идти-идти, пусть я первый раз попал в вершину, да?
[02:46:52.120 --> 02:46:58.120]  И тогда, либо у меня этот цикл отрицательный, тогда мы победили, либо он не отрицательный, тогда я его выкидываю.
[02:46:59.120 --> 02:47:03.120]  То есть на пути уменьшилось количество ребер, а вес все еще остался меньше w.
[02:47:04.120 --> 02:47:10.120]  Дальше идем, идем, идем, идем, идем, и вот тоже находим цикл, если он не отрицательного веса, то отпиливаем.
[02:47:11.120 --> 02:47:18.120]  Ну и, в общем, рано или поздно мы вынуждены будем заключить, что либо мы наткнемся на цикл отрицательного веса, либо мы убьем все циклы.
[02:47:19.120 --> 02:47:22.120]  Ну вот. И тогда у нас получится просто простой путь.
[02:47:23.120 --> 02:47:26.120]  Да, просто простой путь, да. Вот.
[02:47:28.120 --> 02:47:30.120]  Так что вот такое простое доказательство.
[02:47:30.120 --> 02:47:33.120]  Ну, собственно, основные идеи мы, в общем-то, заранее высказали. Это да.
[02:47:38.120 --> 02:47:47.120]  Ну да. Ну, то есть, что такое расстояние? Рассмотрим все пути из s в t, рассмотрим их веса и выберем минимум этого множества.
[02:47:48.120 --> 02:47:51.120]  Вот. То есть плюс бесконечность, это означает, что множество пустое.
[02:47:52.120 --> 02:47:57.120]  Минус бесконечность, это означает, что для любого числа w найдется путь, вес которого меньше.
[02:48:00.120 --> 02:48:09.120]  Вот. Ну, то есть, просто логично, то есть, если мы рассмотрим произвольное под множество действительных чисел, то как бы минимум бывает у них плюс бесконечность, минус бесконечность или что-то конкретное.
[02:48:11.120 --> 02:48:18.120]  Вот. Оказывается, что здесь бывает минус бесконечность, но тогда и только тогда, когда мы наткнулись на цикл отрицательного веса.
[02:48:20.120 --> 02:48:21.120]  Вот. Понимаете, да?
[02:48:24.120 --> 02:48:25.120]  Чего еще раз?
[02:48:25.120 --> 02:48:26.120]  Необходимость.
[02:48:28.120 --> 02:48:32.120]  Необходимость. Ну, смотрите еще раз. Пусть у нас расстояние от s до t минус бесконечность.
[02:48:33.120 --> 02:48:39.120]  Рассмотрим, пусть, рассмотрим все простые пути из s в t. Что такое простой путь?
[02:48:40.120 --> 02:48:44.120]  Простой путь, напоминаю, это путь, который не проходит по два раза, не по одной вершине.
[02:48:45.120 --> 02:48:49.120]  Таких простых путей у нас конечное количество, правда?
[02:48:50.120 --> 02:48:55.120]  Вот. Следовательно, минимум у них вполне можно взять, пусть это w.
[02:48:56.120 --> 02:49:02.120]  Раз расстояние минус бесконечность, значит существует путь от s до t, который меньше w, да?
[02:49:03.120 --> 02:49:08.120]  Рассмотрим этот путь. Он заведомо зацикливается, правда?
[02:49:09.120 --> 02:49:17.120]  И дальше будем говорить, будем идти, идти, идти. Если мы нашли цикл, то либо мы нашли цикл отрицательного веса, и тогда все доказано,
[02:49:17.120 --> 02:49:21.120]  потому что вот мы до него дошли, и мы из него до t дошли, да?
[02:49:22.120 --> 02:49:27.120]  Ну и может, ну может оказаться, что этот цикл не отрицательного веса.
[02:49:30.120 --> 02:49:34.120]  Ну бывает, ну мало ли. Всякое бывает.
[02:49:35.120 --> 02:49:40.120]  Нет, ну как бы это, нет, тогда, ну да, аккуратное доказательство дальше звучит так.
[02:49:41.120 --> 02:49:44.120]  Мы выкидываем этот цикл и начинаем, идем по этому пути заново, да?
[02:49:44.120 --> 02:49:50.120]  Ну количество ребер на пути уменьшается, поэтому как бы рано или поздно мы тогда либо обнаружим, что циклов нет вообще,
[02:49:51.120 --> 02:49:55.120]  и тогда получится просто простой путь от s до t с весом меньше, чем w противоречия, да?
[02:49:56.120 --> 02:49:59.120]  Либо мы все-таки наткнемся на цикл отрицательного веса.
[02:50:00.120 --> 02:50:04.120]  Можно просто сразу сказать, что раз у нас вес меньше w, значит это не простой путь.
[02:50:05.120 --> 02:50:06.120]  Да.
[02:50:07.120 --> 02:50:10.120]  И при этом раз он меньше w, значит у него есть цикл обязательно отрицательного.
[02:50:11.120 --> 02:50:12.120]  Почему обязательно отрицательного?
[02:50:13.120 --> 02:50:14.120]  Ну, на нем обязательно есть цикл.
[02:50:15.120 --> 02:50:16.120]  Безусловно.
[02:50:17.120 --> 02:50:18.120]  Если на нем есть цикл положительного веса, то он…
[02:50:19.120 --> 02:50:20.120]  То как бы мы его выкидываем, да.
[02:50:21.120 --> 02:50:23.120]  Ну ладно, наверное это нельзя вот так просто заменить.
[02:50:24.120 --> 02:50:25.120]  Можно.
[02:50:26.120 --> 02:50:29.120]  Ну да, нет, в такой формулировке надо просто добавить фразу,
[02:50:30.120 --> 02:50:33.120]  из всех таких путей выберем путь с минимальным числом ребер.
[02:50:36.120 --> 02:50:40.120]  Вот, на нем есть цикл, не отрицательного веса он быть не может,
[02:50:40.120 --> 02:50:44.120]  потому что мы как бы его выкидываем и находим путь с меньшим числом ребер тем же свойством.
[02:50:45.120 --> 02:50:46.120]  Значит он отрицательного веса, все.
[02:50:47.120 --> 02:50:48.120]  Да, вот можно так рассуждать.
[02:50:49.120 --> 02:50:52.120]  Это, ну тут уже это, на вкус и цвет фломастеры разные.
[02:50:53.120 --> 02:50:55.120]  О, кстати, какие они интересные, да.
[02:50:56.120 --> 02:50:57.120]  На вкус соленый.
[02:50:58.120 --> 02:50:59.120]  А, вы пробовали, да?
[02:51:02.120 --> 02:51:03.120]  Нет, ну соленый, не да.
[02:51:04.120 --> 02:51:05.120]  Так вот.
[02:51:06.120 --> 02:51:08.120]  Ой, соленый, копченый, да.
[02:51:08.120 --> 02:51:09.120]  О, хорошее блюдо.
[02:51:10.120 --> 02:51:12.120]  Фломастер копченый со спиртом, да.
[02:51:15.120 --> 02:51:16.120]  Так вот.
[02:51:17.120 --> 02:51:20.120]  Итак, ну хорошо, значит маленькое утверждение доказано.
[02:51:22.120 --> 02:51:24.120]  Маленькое утверждение доказано.
[02:51:25.120 --> 02:51:26.120]  Но при этом.
[02:51:27.120 --> 02:51:30.120]  Так, но теперь все равно, как искать коричайший путь не очень понятно.
[02:51:31.120 --> 02:51:35.120]  Значит, идея, ну, идея тупая такая, да.
[02:51:35.120 --> 02:51:37.120]  Мы помним, да, мы не знаем никаких дэекстров.
[02:51:38.120 --> 02:51:39.120]  Мы ничего не знаем о графах.
[02:51:40.120 --> 02:51:42.120]  Но мы знаем динамическое программирование.
[02:51:43.120 --> 02:51:44.120]  Ой.
[02:51:45.120 --> 02:51:47.120]  Вот действительно, представьте себе, что такая ситуация.
[02:51:48.120 --> 02:51:50.120]  Вы только что научились программировать и изучили динамическое программирование.
[02:51:51.120 --> 02:51:52.120]  До того ЛЦС включительно.
[02:51:53.120 --> 02:51:54.120]  Ну, такая типичная ситуация, да.
[02:51:55.120 --> 02:51:57.120]  И только после этого узнали, что существуют графы.
[02:51:59.120 --> 02:52:01.120]  Да, вот внезапно так вот как-то произошло.
[02:52:02.120 --> 02:52:03.120]  Нет, это в целом вполне нормальная ситуация.
[02:52:03.120 --> 02:52:04.120]  Ну да.
[02:52:05.120 --> 02:52:07.120]  Ну, с одной стороны, да, взрослые меня подозрили, что все-таки нет.
[02:52:08.120 --> 02:52:09.120]  Ну, просто нет.
[02:52:10.120 --> 02:52:13.120]  Знаете, у меня была когда-то, знаете, вот пока я стираю, могу байку рассказать на эту тему.
[02:52:14.120 --> 02:52:16.120]  То есть иногда была в какой-то момент идея.
[02:52:17.120 --> 02:52:18.120]  Вот когда мы, особенно, видеокурсы на стейпах записывали.
[02:52:19.120 --> 02:52:23.120]  То есть могла быть такая идея, что можно учить, как обычно учат во всех школах, да.
[02:52:24.120 --> 02:52:27.120]  Обычно там вы приезжаете, и вам у вас учат там некоторым разным темам.
[02:52:28.120 --> 02:52:31.120]  Чуть-чуть графов, чуть-чуть динамики, там чуть-чуть течешки какой-нибудь и так далее.
[02:52:31.120 --> 02:52:32.120]  И там гиомочки чуть-чуть.
[02:52:33.120 --> 02:52:34.120]  Ну, как бы все примерно вот так вот.
[02:52:35.120 --> 02:52:36.120]  То есть такое вот чуть-чуть.
[02:52:37.120 --> 02:52:39.120]  И когда вы приедете в следующий раз, вот тоже будет всего по чуть-чуть.
[02:52:40.120 --> 02:52:41.120]  Ну, она как бы более продвинута на все.
[02:52:42.120 --> 02:52:43.120]  Вот. И была идея.
[02:52:44.120 --> 02:52:45.120]  А ведь можно же на самом деле немножко по-другому.
[02:52:46.120 --> 02:52:49.120]  Можно создать курс, в котором изучать только динамическое программирование.
[02:52:50.120 --> 02:52:51.120]  Так, с нуля.
[02:52:52.120 --> 02:52:56.120]  То есть, знаете, там первая лекция, то есть обычная ДП, намерная ДП, двумерная ДП.
[02:52:57.120 --> 02:52:59.120]  Потом, соответственно, значит, НВП, НУП.
[02:52:59.120 --> 02:53:00.120]  Потом тот ЛУЦС.
[02:53:01.120 --> 02:53:03.120]  Значит, потом там ДП по профилю, соответственно.
[02:53:04.120 --> 02:53:05.120]  И так далее.
[02:53:06.120 --> 02:53:07.120]  Где?
[02:53:08.120 --> 02:53:09.120]  Ну, если НВП за налогами...
[02:53:10.120 --> 02:53:12.120]  Нет, НВП за налогами для этого нужно только бинпоиск изучить.
[02:53:13.120 --> 02:53:15.120]  Очень много ДП, в которых используешь доложку.
[02:53:16.120 --> 02:53:17.120]  Нет, смотрите.
[02:53:18.120 --> 02:53:19.120]  Да, ну а...
[02:53:20.120 --> 02:53:22.120]  Допустимизации ДП, ДП на деревьях, ДП на графах, да, так все изучено.
[02:53:23.120 --> 02:53:24.120]  Ну, тут все постепенно.
[02:53:25.120 --> 02:53:26.120]  Нет, погодите, погодите.
[02:53:26.120 --> 02:53:28.120]  Проблема. ДП на графах, бездание графов, это что?
[02:53:29.120 --> 02:53:30.120]  Нет, все необязательно.
[02:53:31.120 --> 02:53:32.120]  Нет, смотрите, ну там технологии работают так.
[02:53:33.120 --> 02:53:34.120]  Нет, смотрите, там у меня получалось немножко по-другому.
[02:53:35.120 --> 02:53:36.120]  Нет, это все...
[02:53:37.120 --> 02:53:40.120]  То есть, ДП с использованием ДО, естественно, надо использовать, когда вы будете потом изучать ДО.
[02:53:41.120 --> 02:53:46.120]  Но просто, как бы, у вас на этот момент ДП уже будет изучено, поэтому, значит, ДО будете применять.
[02:53:47.120 --> 02:53:51.120]  Не, просто изучаем только ДП, но в ДП пришлось внутри ДП еще изучить ДО, графы там...
[02:53:51.120 --> 02:53:54.120]  Нет, на самом деле, по такому курсу получалось что-то комбинаторико.
[02:53:55.120 --> 02:53:57.120]  Особенно если вы учите, что курс на степи, он должен быть коротенький, то нормально.
[02:53:58.120 --> 02:54:02.120]  То есть вам придется там изучить, что такое сезон по кашечке там всякие вот эти...
[02:54:03.120 --> 02:54:07.120]  Ну вот, а потом уже там начинается, можно там отдельно структуры данных изучить.
[02:54:08.120 --> 02:54:10.120]  А, ну где-то надо изучить, что такое бинпоис, конечно, ну вот.
[02:54:11.120 --> 02:54:12.120]  И да, тоже для ДП.
[02:54:13.120 --> 02:54:14.120]  Ну, это такая база относительная, да.
[02:54:15.120 --> 02:54:20.120]  Вот там где-то отдельно ДП, потом отдельно курс по структурам данных, отдельно курс на строки, там где-то они...
[02:54:21.120 --> 02:54:22.120]  Миксуются, там под...
[02:54:23.120 --> 02:54:24.120]  А, потом геома.
[02:54:25.120 --> 02:54:30.120]  В геоме тоже сразу с нуля до театрамы Воронова сразу просто без лишних проблем, да.
[02:54:31.120 --> 02:54:32.120]  Чего?
[02:54:33.120 --> 02:54:34.120]  Мы же еще не изучали.
[02:54:35.120 --> 02:54:36.120]  Чего не изучали?
[02:54:37.120 --> 02:54:38.120]  Бинпоис.
[02:54:39.120 --> 02:54:41.120]  Не, ну в бинпоис мы все-таки поверили.
[02:54:42.120 --> 02:54:46.120]  Да, в бинпоис мы все-таки поверили, что мы его знаем, поэтому тут все-таки, да.
[02:54:47.120 --> 02:54:48.120]  Так вот, ладно, пока я четверт.
[02:54:48.120 --> 02:54:49.120]  Все.
[02:54:50.120 --> 02:54:51.120]  Итак, задача.
[02:54:52.120 --> 02:54:53.120]  Давайте предположим, что у нас есть граф.
[02:54:54.120 --> 02:54:58.120]  То есть, как всегда, g равно w, e и, допустим, какие-то веса еще.
[02:54:59.120 --> 02:55:04.120]  И, допустим, нам известно пока для простоты, что нет циклов отрицательного веса.
[02:55:06.120 --> 02:55:09.120]  Это эквивалентно тому, что пути...
[02:55:10.120 --> 02:55:16.120]  Что кратчайшие пути не бывают минус бесконечностями, а еще логично, конечно, что кратчайшие пути достаточно искать среди...
[02:55:17.120 --> 02:55:19.120]  Ну, можно сказать, среди простых путей, да.
[02:55:20.120 --> 02:55:26.120]  А еще можно заметить, что кратчайший путь всегда достижим за не более чем n минус 1 ребро, правда?
[02:55:27.120 --> 02:55:28.120]  Логично?
[02:55:29.120 --> 02:55:33.120]  Поэтому получается вполне себе такое естественное решение.
[02:55:34.120 --> 02:55:36.120]  А именно, пишем динамику.
[02:55:37.120 --> 02:55:39.120]  dp, то есть массив такой...
[02:55:40.120 --> 02:55:43.120]  То есть, типа dp, v, l.
[02:55:44.120 --> 02:55:48.120]  То есть, v это вершина, l у нас от 0 до n минус 1.
[02:55:49.120 --> 02:55:52.120]  Ну, в смысле, там n точно равно модуль v, естественно.
[02:55:53.120 --> 02:55:54.120]  Вот.
[02:55:55.120 --> 02:55:56.120]  Это...
[02:55:57.120 --> 02:55:58.120]  Минимальная...
[02:55:59.120 --> 02:56:00.120]  Длина...
[02:56:01.120 --> 02:56:02.120]  Пути...
[02:56:03.120 --> 02:56:05.120]  Просто пути, заметьте, не обязательно простого.
[02:56:06.120 --> 02:56:07.120]  От s до v...
[02:56:09.120 --> 02:56:10.120]  Состоящее...
[02:56:14.120 --> 02:56:15.120]  Ровно...
[02:56:16.120 --> 02:56:17.120]  Ровно из...
[02:56:19.120 --> 02:56:21.120]  l ребер.
[02:56:25.120 --> 02:56:27.120]  То есть, мы рассматриваем пути из l ребер.
[02:56:28.120 --> 02:56:29.120]  Ровно.
[02:56:30.120 --> 02:56:32.120]  Вот такую dp-шку я хочу посчитать.
[02:56:35.120 --> 02:56:36.120]  Да.
[02:56:37.120 --> 02:56:38.120]  Вправивается, как я это сделаю.
[02:56:38.120 --> 02:56:39.120]  Ну, здесь все достаточно просто.
[02:56:40.120 --> 02:56:43.120]  Ну, потому что понятно, что dp от v0 равно...
[02:56:44.120 --> 02:56:45.120]  Знаете, это база, да?
[02:56:46.120 --> 02:56:48.120]  То есть, равно 0, если s равно v.
[02:56:49.120 --> 02:56:50.120]  И плюс бесконечности иначе.
[02:56:53.120 --> 02:56:54.120]  Вот.
[02:56:55.120 --> 02:56:57.120]  Но в противном случае, dp от v, l...
[02:56:59.120 --> 02:57:02.120]  Равно, естественно, минимум по всем, значит...
[02:57:03.120 --> 02:57:04.120]  Именно.
[02:57:04.120 --> 02:57:06.120]  Естественно, минимум по всем, значит...
[02:57:07.120 --> 02:57:10.120]  Имеющимся входящим v ребрам.
[02:57:12.120 --> 02:57:17.120]  dp от u, l-1, плюс w.
[02:57:20.120 --> 02:57:21.120]  Вот.
[02:57:22.120 --> 02:57:23.120]  Так, опять с сидифончиком.
[02:57:28.120 --> 02:57:29.120]  Нет.
[02:57:30.120 --> 02:57:31.120]  Слушай, что-то соблазн какой-то большой.
[02:57:32.120 --> 02:57:33.120]  Давай.
[02:57:34.120 --> 02:57:35.120]  Не отвлекай.
[02:57:36.120 --> 02:57:37.120]  Вот.
[02:57:38.120 --> 02:57:39.120]  Получается вот такой прикол.
[02:57:40.120 --> 02:57:41.120]  Вот.
[02:57:42.120 --> 02:57:43.120]  Пока простая тема.
[02:57:44.120 --> 02:57:45.120]  Все просто, да?
[02:57:46.120 --> 02:57:48.120]  А если правильно это еще реализовать с помощью динамики вперед,
[02:57:49.120 --> 02:57:50.120]  то, как бы, действительно, код у вас...
[02:57:51.120 --> 02:57:52.120]  Все это у вас будет работать за o от v.
[02:57:53.120 --> 02:57:54.120]  Ну, правда ладно.
[02:57:55.120 --> 02:57:56.120]  Это вы только dp-шку насчитали.
[02:57:57.120 --> 02:57:59.120]  А как расстояние от s до t найти?
[02:58:00.120 --> 02:58:01.120]  В чем проблема динамики назад?
[02:58:01.120 --> 02:58:06.120]  Ну, в том, что входящие ребра придется перебирать.
[02:58:07.120 --> 02:58:08.120]  Ну, строим обратный граф.
[02:58:09.120 --> 02:58:10.120]  Да.
[02:58:11.120 --> 02:58:14.120]  Минус заключает в том, что строить обратный граф хочется очень не...
[02:58:15.120 --> 02:58:20.120]  Ну, да, это я и говорю, поэтому динамика вперед, я и говорю.
[02:58:21.120 --> 02:58:22.120]  Да.
[02:58:23.120 --> 02:58:26.120]  Ну, естественно, да.
[02:58:26.120 --> 02:58:27.120]  Ну, понятно, что это...
[02:58:28.120 --> 02:58:29.120]  Ну, кстати, пр-шка это отдельно...
[02:58:30.120 --> 02:58:32.120]  Нет, во-первых, давайте начнем с того, что как бы...
[02:58:33.120 --> 02:58:34.120]  Как найти расстояние от s до t вообще?
[02:58:39.120 --> 02:58:40.120]  Ну, dp, t, n.
[02:58:41.120 --> 02:58:42.120]  Да.
[02:58:43.120 --> 02:58:44.120]  А если подумать?
[02:58:45.120 --> 02:58:47.120]  У нас есть отрицательные ребра или нет?
[02:58:48.120 --> 02:58:49.120]  Конечно, есть.
[02:58:50.120 --> 02:58:51.120]  У нас только циклов отрицательного веса пока нету.
[02:58:52.120 --> 02:58:55.120]  Это по всем длинам, видимо, минимум.
[02:58:57.120 --> 02:59:00.120]  Да, тут, внимание, тут, на самом деле, есть две разные концепции.
[02:59:01.120 --> 02:59:02.120]  На самом деле, я вот люблю эту, она такая более железобетонная.
[02:59:03.120 --> 02:59:04.120]  Вот.
[02:59:05.120 --> 02:59:07.120]  Потому что есть концепция, потому что я говорю, dp от vl, когда ровный из l-rubber.
[02:59:08.120 --> 02:59:10.120]  Да, можно считать, когда она не более, чем из l-rubber.
[02:59:11.120 --> 02:59:12.120]  Да, тогда там...
[02:59:13.120 --> 02:59:14.120]  В данном случае...
[02:59:15.120 --> 02:59:16.120]  Да, так, конечно, так сильно проще восстанавливается.
[02:59:17.120 --> 02:59:18.120]  Нет, так...
[02:59:19.120 --> 02:59:20.120]  Ну, в предыдущем варианте тоже ответ восстанавливается.
[02:59:23.120 --> 02:59:24.120]  Вот.
[02:59:25.120 --> 02:59:26.120]  Ну, не совсем.
[02:59:27.120 --> 02:59:28.120]  Там за большее страдание предоказательств.
[02:59:29.120 --> 02:59:30.120]  Знаете, у меня там любимая...
[02:59:31.120 --> 02:59:33.120]  На самом деле, в одно время у меня самый сложный вопрос был.
[02:59:34.120 --> 02:59:35.120]  Докажите, что там ответ восстанавливается правильно.
[02:59:36.120 --> 02:59:38.120]  И там люди там четыре часа сидели и не могли доказать.
[02:59:39.120 --> 02:59:42.120]  В том числе и будущие медалисты acpc, насколько я помню.
[02:59:43.120 --> 02:59:45.120]  То есть, если меньше или ровно проблемы с дыхательством?
[02:59:46.120 --> 02:59:47.120]  Ну да.
[02:59:48.120 --> 02:59:49.120]  Особенно, если вы это еще...
[02:59:50.120 --> 02:59:52.120]  Особенно, если вы все это еще и в одном массиве делаете.
[02:59:53.120 --> 02:59:55.120]  Ну, как мы будем делать далее в целом?
[02:59:56.120 --> 02:59:57.120]  Ну вот, поэтому я...
[02:59:58.120 --> 02:59:59.120]  То есть, вот как бы два пути.
[03:00:00.120 --> 03:00:01.120]  Либо все-таки сказать, что нет.
[03:00:02.120 --> 03:00:03.120]  Одним массивом можно, там все адекватно доказывается.
[03:00:04.120 --> 03:00:05.120]  Потому что в каждый момент времени там...
[03:00:06.120 --> 03:00:09.120]  Там у вас на порешках строится какой-то корректный дерево.
[03:00:10.120 --> 03:00:11.120]  Там кратчайших на текущий момент путей.
[03:00:12.120 --> 03:00:13.120]  И все в порядке.
[03:00:14.120 --> 03:00:16.120]  Ну или там каких-то просто путей.
[03:00:17.120 --> 03:00:18.120]  Что там цикла...
[03:00:19.120 --> 03:00:20.120]  Что это дерево никогда не зацикливается, поэтому все в порядке.
[03:00:21.120 --> 03:00:22.120]  Хотя нет, это в районе.
[03:00:23.120 --> 03:00:24.120]  Так.
[03:00:25.120 --> 03:00:26.120]  Ну в общем, там...
[03:00:27.120 --> 03:00:28.120]  В общем, геморрой тут еще.
[03:00:29.120 --> 03:00:30.120]  То есть там, по-моему, кому-то удавалось.
[03:00:31.120 --> 03:00:32.120]  Может даже там вот так пример как-то валится.
[03:00:33.120 --> 03:00:34.120]  Хотя вроде нет.
[03:00:35.120 --> 03:00:36.120]  Но не важно.
[03:00:37.120 --> 03:00:38.120]  Но в данном случае железо-бетона.
[03:00:39.120 --> 03:00:40.120]  Диста, ТС, Т. Это что такое?
[03:00:41.120 --> 03:00:42.120]  Это минимум.
[03:00:43.120 --> 03:00:44.120]  Минимум по всем вершинам.
[03:00:45.120 --> 03:00:46.120]  Точнее, минимум по всем элькам.
[03:00:47.120 --> 03:00:48.120]  От 0 до N-1.
[03:00:49.120 --> 03:00:50.120]  Да.
[03:00:51.120 --> 03:00:52.120]  D, P, A, T, L.
[03:00:53.120 --> 03:00:54.120]  Все.
[03:00:55.120 --> 03:00:56.120]  Вот такая красота.
[03:00:57.120 --> 03:00:58.120]  Ну там правда начинается...
[03:00:59.120 --> 03:01:00.120]  Ну просто откуда все проблемы начинаются?
[03:01:01.120 --> 03:01:02.120]  Все проблемы начинаются с того, что вы хотите восстанавливать путь,
[03:01:03.120 --> 03:01:04.120]  но при этом не жрать О от В квадрат памяти.
[03:01:05.120 --> 03:01:06.120]  Ну хотелось бы.
[03:01:07.120 --> 03:01:08.120]  Да.
[03:01:09.120 --> 03:01:10.120]  Потому что заметим, что диста-то вы найдете заворозовые.
[03:01:11.120 --> 03:01:13.120]  Потому что каждый слой как бы требует только предыдущего.
[03:01:14.120 --> 03:01:15.120]  Да?
[03:01:16.120 --> 03:01:17.120]  Но как восстанавливать теперь этот ответ?
[03:01:18.120 --> 03:01:19.120]  Ну тут как всегда, да.
[03:01:20.120 --> 03:01:22.120]  При большом желании можно конечно забабахать технологию Хиршберга в общем-то.
[03:01:23.120 --> 03:01:24.120]  Как?
[03:01:25.120 --> 03:01:27.120]  Ну просто ищите путь от S, ищите путь до T.
[03:01:28.120 --> 03:01:29.120]  Там вот это все, да?
[03:01:30.120 --> 03:01:31.120]  Сейчас.
[03:01:37.120 --> 03:01:38.120]  А что?
[03:01:39.120 --> 03:01:40.120]  Не, не, все нормально.
[03:01:41.120 --> 03:01:42.120]  Показалось, что там есть некая проблема.
[03:01:43.120 --> 03:01:44.120]  Почему мы с Телепом ждем?
[03:01:45.120 --> 03:01:46.120]  А потому что мы можем...
[03:01:46.120 --> 03:01:47.120]  Ну по раме.
[03:01:48.120 --> 03:01:50.120]  Ну по раме, ну вот...
[03:01:51.120 --> 03:01:53.120]  Ну по количеству ребер в смысле.
[03:01:54.120 --> 03:01:56.120]  Так, давайте разделять понятия длина пути и количества ребер.
[03:01:57.120 --> 03:01:58.120]  На пути это разная вещь.
[03:01:59.120 --> 03:02:01.120]  Нет, то это просто разговорный вопрос принципиальный.
[03:02:02.120 --> 03:02:04.120]  Да, по количеству ребер, да, разделять их вполне можно.
[03:02:05.120 --> 03:02:06.120]  Просто не то, чтобы очень есть предельцы.
[03:02:07.120 --> 03:02:08.120]  Что?
[03:02:09.120 --> 03:02:10.120]  Просто не очень есть предельцы, поэтому...
[03:02:11.120 --> 03:02:12.120]  Почему? Нет, смотри.
[03:02:13.120 --> 03:02:15.120]  Ну просто фишка в том, что мы можем развернуть граф и по обратным ребрам тоже запускать.
[03:02:16.120 --> 03:02:17.120]  Так.
[03:02:18.120 --> 03:02:24.120]  Во-первых, по счетам динамику один раз мы вообще можем понять, а, значит, какой вообще ответ на задачу, и б, какое там л, правда?
[03:02:25.120 --> 03:02:27.120]  А теперь, значит, как эти л найти?
[03:02:28.120 --> 03:02:29.120]  Делим это л пополам.
[03:02:30.120 --> 03:02:31.120]  Вот.
[03:02:32.120 --> 03:02:34.120]  И находим, значит, ДПшки на л пополам от Ски.
[03:02:35.120 --> 03:02:37.120]  И находим такие же ДПшки, но уже по обратным ребрам от Тешки.
[03:02:37.120 --> 03:02:39.120]  А, да, а на этой заключается, потому что мы вершины на две половины недели.
[03:02:46.120 --> 03:02:48.120]  Ну да, нет, это технология там...
[03:02:49.120 --> 03:02:51.120]  Нет, ну такая эта технология нам даст восстановление ответа за там время там...
[03:02:52.120 --> 03:02:54.120]  Что-то типа ВЕЛОГВ?
[03:02:55.120 --> 03:02:57.120]  Что-то типа ВЕЛОГВ?
[03:02:58.120 --> 03:03:00.120]  Что-то типа ВЕЛОГВ?
[03:03:01.120 --> 03:03:03.120]  Что-то типа ВЕЛОГВ?
[03:03:03.120 --> 03:03:05.120]  Что-то типа ВЕЛОГВ?
[03:03:09.120 --> 03:03:15.120]  Смотри, допустим, ты вот с помощью этой технологии за ВЕ выяснил, что у тебя есть кратчайший путь, он состоит из л-рёбер,
[03:03:16.120 --> 03:03:20.120]  и где-то посередине у него на л пополам находится какая-то вершина В.
[03:03:21.120 --> 03:03:23.120]  Спрашивается, а дальше что?
[03:03:24.120 --> 03:03:28.120]  Вот ты запускаешься рекурсивно, и тут ты работаешь, получается, за сколько?
[03:03:29.120 --> 03:03:31.120]  Рекурсивно чего, от всего графа?
[03:03:32.120 --> 03:03:34.120]  Ну, получается, да.
[03:03:35.120 --> 03:03:37.120]  А, ну, слушай, он влез, он влез.
[03:03:38.120 --> 03:03:40.120]  Ну сейчас, ну понятно, что там...
[03:03:41.120 --> 03:03:42.120]  Ну вот, хотя...
[03:03:43.120 --> 03:03:46.120]  В худшем случае, понятно дело, что мы весь граф покрываем всеми удалительными слоёв, но...
[03:03:47.120 --> 03:03:51.120]  Меня больше напрягает сам переход, я не очень понимаю, как перейти от л пополам к L.
[03:03:54.120 --> 03:03:55.120]  Ну, в смысле?
[03:03:56.120 --> 03:03:57.120]  Как ты меня не понял?
[03:03:57.120 --> 03:03:59.120]  Ну, тут переход-то понятно, что мы...
[03:04:00.120 --> 03:04:03.120]  Л мы нашли, значит находим просто там...
[03:04:04.120 --> 03:04:06.120]  Ну, может, для двух вершин мы это всё считаем, только для С, да?
[03:04:07.120 --> 03:04:12.120]  Конечно. И находим вершину В такую, что вот этот кратчайший плюс этот кратчайший равен то, что нам надо.
[03:04:13.120 --> 03:04:16.120]  Если мы кратчайшие, то мы стоим, там вершины всё-таки пополам поделятся,
[03:04:17.120 --> 03:04:23.120]  и все, которые у вас будут не плюс без конечности, можно их добавить в левый рекурсивный,
[03:04:24.120 --> 03:04:25.120]  который...
[03:04:26.120 --> 03:04:28.120]  Но там проблема в том, что...
[03:04:29.120 --> 03:04:30.120]  Нет, погодите, погодите.
[03:04:31.120 --> 03:04:32.120]  Нет, что значит достижимый?
[03:04:33.120 --> 03:04:36.120]  Проблема разникает в том, что он очень будет понятно, как бы, вот...
[03:04:41.120 --> 03:04:42.120]  Но память мы используем только...
[03:04:43.120 --> 03:04:45.120]  Но память хочется использовать вот от В плюс Е, да.
[03:04:46.120 --> 03:04:47.120]  В плюс. Ну, мы...
[03:04:48.120 --> 03:04:49.120]  Ну да, мы наверное используем В плюс Е.
[03:04:50.120 --> 03:04:52.120]  Вот единица слоёв мы имеем право хранить.
[03:04:53.120 --> 03:04:54.120]  Окей.
[03:04:55.120 --> 03:04:57.120]  Хотя тут уже даже интересно, можно ли тут херьку упихнуть.
[03:04:58.120 --> 03:04:59.120]  Ну я думал, что у нас херька за...
[03:05:00.120 --> 03:05:03.120]  Вот в данном случае будем работать за В елой.
[03:05:04.120 --> 03:05:05.120]  Да.
[03:05:06.120 --> 03:05:07.120]  Луговая, да.
[03:05:08.120 --> 03:05:09.120]  Ну или луговая.
[03:05:10.120 --> 03:05:11.120]  Ну это луговая, да.
[03:05:12.120 --> 03:05:13.120]  Но пока получается луговая.
[03:05:14.120 --> 03:05:15.120]  Да, можно ли выкрутиться?
[03:05:16.120 --> 03:05:17.120]  Потому что можно попытаться, наверное, для каждой...
[03:05:18.120 --> 03:05:21.120]  Можно ещё попытаться, наверное, для каждой вершины ещё понять там что-нибудь в духе.
[03:05:21.120 --> 03:05:24.120]  Там, действительно, она должна быть там, скажем...
[03:05:25.120 --> 03:05:27.120]  Она как бы лежит вот на этой части пути или на этом.
[03:05:28.120 --> 03:05:32.120]  Если удастся так разделить, то, как бы, в этом нормальный ВЕ вас поприветствует.
[03:05:33.120 --> 03:05:35.120]  Кажется, в полном графе они не имеются.
[03:05:36.120 --> 03:05:37.120]  Понимаешь? Чего?
[03:05:39.120 --> 03:05:42.120]  Ну короче, не понятно, какие же люди делают без потенции по 8 точке.
[03:05:43.120 --> 03:05:44.120]  Нет, слушайте, а я, конечно, понял.
[03:05:47.120 --> 03:05:50.120]  Смотрите, то есть нам нужно за L пополам ребер
[03:05:51.120 --> 03:05:52.120]  и АТС ДВ.
[03:05:53.120 --> 03:05:54.120]  И за L пополам ребер за человек ЛДТ.
[03:05:55.120 --> 03:05:56.120]  И это как чайший путь такой, да.
[03:05:57.120 --> 03:05:58.120]  И мы ещё и L взяли, как чайший.
[03:05:59.120 --> 03:06:00.120]  Так вот, заметим, что мы ещё можем...
[03:06:01.120 --> 03:06:04.120]  То есть мы ещё можем сделать вообще такой следующий чит.
[03:06:05.120 --> 03:06:06.120]  А.
[03:06:07.120 --> 03:06:08.120]  Храни парку, как чайший путь ЛДТ.
[03:06:09.120 --> 03:06:10.120]  А, нет, пару не можем.
[03:06:11.120 --> 03:06:13.120]  Потому что одновременно надо либо S ходить.
[03:06:14.120 --> 03:06:15.120]  Мы как бы в две стороны, хотя, наверное...
[03:06:16.120 --> 03:06:20.120]  Ну, на самом деле, мы могли бы расправить обратно путь по прямым реберам обратно.
[03:06:21.120 --> 03:06:22.120]  Чтобы сейчас...
[03:06:23.120 --> 03:06:24.120]  Угу.
[03:06:25.120 --> 03:06:26.120]  Ну ладно, в общем...
[03:06:27.120 --> 03:06:28.120]  В чем он вообще может лопать?
[03:06:29.120 --> 03:06:30.120]  В смысле...
[03:06:31.120 --> 03:06:32.120]  Какая?
[03:06:33.120 --> 03:06:35.120]  Распилить вершины так, что какие вершины лежат тут, какие тут?
[03:06:36.120 --> 03:06:37.120]  Ну...
[03:06:38.120 --> 03:06:41.120]  Мы же не можем просто построить граф, как чайший путь, и...
[03:06:42.120 --> 03:06:43.120]  Ну, если...
[03:06:44.120 --> 03:06:47.120]  Ну, если у нас как раз-то, да, в том-то и смысл, что да.
[03:06:48.120 --> 03:06:49.120]  Ну, в смысле граф в тупую.
[03:06:50.120 --> 03:06:51.120]  Нет, в тупую построить.
[03:06:52.120 --> 03:06:53.120]  Но у нас ДП-шка сейчас такого не позволяет.
[03:06:54.120 --> 03:06:57.120]  Нет, как бы, да, можно как бы единую ДП-шку взять за там...
[03:06:58.120 --> 03:07:00.120]  За ОТВ памяти и пытаться там это дерево поддерживать,
[03:07:01.120 --> 03:07:03.120]  но тогда просто мы же пытаемся как раз избегать того, чтобы там доказывать,
[03:07:04.120 --> 03:07:06.120]  что это реально дерево, оно будет корректно работать.
[03:07:08.120 --> 03:07:10.120]  То есть там надо доказывать, что...
[03:07:11.120 --> 03:07:12.120]  Да, там...
[03:07:13.120 --> 03:07:15.120]  Там главное непонятно, что доказывать, потому что даже когда вы там...
[03:07:16.120 --> 03:07:18.120]  У вас там пути могут подменяться, и там в каждый момент времени,
[03:07:19.120 --> 03:07:20.120]  у вас там...
[03:07:21.120 --> 03:07:25.120]  Нельзя просто хранить вершины, у которых расстояние от ОТВ меньше,
[03:07:26.120 --> 03:07:30.120]  чем расстояние ОТВ, и тогда они должны как-то хорошо поделить.
[03:07:31.120 --> 03:07:34.120]  Сейчас, а что такое расстояние? По количеству ребр, потому что непонятно.
[03:07:35.120 --> 03:07:36.120]  Не по количеству ребр, по ДП-шке.
[03:07:37.120 --> 03:07:40.120]  Так в смысле, у нас же, у нас же там бывают отрицательные ребра,
[03:07:41.120 --> 03:07:44.120]  поэтому там как бы абсолютная величина расстояния вам не скажет ничего
[03:07:45.120 --> 03:07:46.120]  о том, сколько там ребр.
[03:07:46.120 --> 03:07:47.120]  Если бы...
[03:07:48.120 --> 03:07:49.120]  Их не было, то почему?
[03:07:50.120 --> 03:07:51.120]  Ну вот так что.
[03:07:52.120 --> 03:07:54.120]  Так, ладно, не будем в это копать.
[03:07:55.120 --> 03:07:58.120]  Да, ладно, с Хиршпырком, к сожалению, мы нагрелись, жалко.
[03:07:59.120 --> 03:08:01.120]  Так что можно теперь будет отдельная песня на тему того,
[03:08:02.120 --> 03:08:03.120]  как-то упитывать в ОТВ памяти.
[03:08:04.120 --> 03:08:05.120]  Ну, с восстановлением ответа.
[03:08:06.120 --> 03:08:09.120]  Но хотя, но для нас, ладно, начнем пока с более простой задачи.
[03:08:10.120 --> 03:08:12.120]  Это пока, но по камере мы ДП-шку, уверенно, если нет циклов
[03:08:13.120 --> 03:08:14.120]  отрицательного веса, упихались.
[03:08:14.120 --> 03:08:15.120]  Упихались?
[03:08:16.120 --> 03:08:17.120]  Упихались.
[03:08:18.120 --> 03:08:21.120]  А теперь что делать, если цикл отрицательного веса есть?
[03:08:24.120 --> 03:08:26.120]  Извините, а мы учились это восстанавливать?
[03:08:27.120 --> 03:08:28.120]  Нет.
[03:08:29.120 --> 03:08:30.120]  А это вообще...
[03:08:31.120 --> 03:08:33.120]  Точнее так, восстанавливать, нет, вообще восстанавливать,
[03:08:34.120 --> 03:08:35.120]  если вы ДП-шку храните целиком?
[03:08:36.120 --> 03:08:37.120]  Да, конечно, очевидно.
[03:08:38.120 --> 03:08:40.120]  А вот за память, вот хороший вопрос.
[03:08:41.120 --> 03:08:42.120]  Ну я...
[03:08:42.120 --> 03:08:43.120]  Вы знаете решение?
[03:08:44.120 --> 03:08:45.120]  В слету нет.
[03:08:46.120 --> 03:08:48.120]  Нет, я подозрение, что если 10 минут подумать,
[03:08:49.120 --> 03:08:50.120]  что-то придумается.
[03:08:51.120 --> 03:08:53.120]  А не из-за того, что какое восстановление не будет работать,
[03:08:54.120 --> 03:08:55.120]  просто врать и...
[03:08:56.120 --> 03:08:57.120]  Ну, вот это...
[03:08:58.120 --> 03:08:59.120]  В Фордибелле мы немножко другой вариант поддерживаем все-таки.
[03:09:00.120 --> 03:09:01.120]  Нет, смотри, я...
[03:09:02.120 --> 03:09:04.120]  Нет, если мы будем писать классическую версию,
[03:09:05.120 --> 03:09:08.120]  типа Dp от 0 до n-1 равно там плюс бесконечность,
[03:09:09.120 --> 03:09:11.120]  и там Dp от s равно нулю, да?
[03:09:12.120 --> 03:09:13.120]  Да.
[03:09:14.120 --> 03:09:15.120]  А дальше там...
[03:09:16.120 --> 03:09:17.120]  Нет, у нас есть просто тупой вариант восстановления,
[03:09:18.120 --> 03:09:20.120]  опять зарядим, просто убрать и хранить тупого предка.
[03:09:21.120 --> 03:09:22.120]  Да, ну...
[03:09:23.120 --> 03:09:24.120]  Да, но это предположение, что мы и все Dp-шки храним,
[03:09:25.120 --> 03:09:26.120]  и всех предков храним.
[03:09:27.120 --> 03:09:28.120]  Для каждой линейки.
[03:09:29.120 --> 03:09:30.120]  Нет, вот Dp-шки мы постоянно пересчитываем, правда?
[03:09:31.120 --> 03:09:32.120]  Ну и что?
[03:09:33.120 --> 03:09:34.120]  Мы можем также просто предков постоянно пересчитывать.
[03:09:35.120 --> 03:09:38.120]  Ну потому что для пяти ребер там будет один предок,
[03:09:39.120 --> 03:09:40.120]  для восьми будет другой.
[03:09:40.120 --> 03:09:41.120]  Какой?
[03:09:42.120 --> 03:09:44.120]  Предки будут теми же самыми, что и для...
[03:09:45.120 --> 03:09:46.120]  Что и для...
[03:09:47.120 --> 03:09:48.120]  Нормально.
[03:09:49.120 --> 03:09:51.120]  У нас может ухудшаться ответ, если мы взяли больше ребер.
[03:09:52.120 --> 03:09:53.120]  Из-за того, что мы ровно или ровно требуем,
[03:09:54.120 --> 03:09:55.120]  у нас ответ может стать хуже.
[03:09:56.120 --> 03:09:57.120]  У нас может просто, допустим,
[03:09:58.120 --> 03:09:59.120]  в зависимости от чётности пути быть или не быть.
[03:10:00.120 --> 03:10:01.120]  У нас идёт...
[03:10:02.120 --> 03:10:03.120]  Нет, ну сейчас, давайте так.
[03:10:04.120 --> 03:10:05.120]  Так, ну давайте так.
[03:10:06.120 --> 03:10:08.120]  Просто восстановление ответа говорит нам, что у нас есть, допустим,
[03:10:08.120 --> 03:10:09.120]  ПР от ВН.
[03:10:10.120 --> 03:10:11.120]  Наши Dp-шки неудобные,
[03:10:12.120 --> 03:10:13.120]  у нас удобные Dp-шки.
[03:10:14.120 --> 03:10:15.120]  Зачем их использовать так?
[03:10:16.120 --> 03:10:17.120]  Ну в удобные...
[03:10:18.120 --> 03:10:20.120]  Там просто ещё более худшие проблемы будут, я боюсь.
[03:10:21.120 --> 03:10:22.120]  Ещё, ну вот.
[03:10:23.120 --> 03:10:24.120]  Так вот, значит, ПР от ВН.
[03:10:25.120 --> 03:10:26.120]  Так вот, можно, в принципе, вот...
[03:10:27.120 --> 03:10:28.120]  Не написать.
[03:10:29.120 --> 03:10:30.120]  Ну вот, то есть, не знаю.
[03:10:31.120 --> 03:10:32.120]  Кажется, если я правильно понял Филиппа,
[03:10:33.120 --> 03:10:34.120]  ну, который не я,
[03:10:35.120 --> 03:10:36.120]  да, можно уточнить.
[03:10:36.120 --> 03:10:37.120]  Но предлагает следующее.
[03:10:38.120 --> 03:10:39.120]  Значит, предлагается, что...
[03:10:40.120 --> 03:10:41.120]  Значит, давайте пытаться...
[03:10:42.120 --> 03:10:45.120]  Ну, вместо Dp от ВЛ храним в Dp-шке текущий слой динамики.
[03:10:46.120 --> 03:10:49.120]  В ПР-шке, ну, тоже можно хранить текущий слой динамики, допустим, да.
[03:10:50.120 --> 03:10:51.120]  Ну вот, а вместо этого можно хранить,
[03:10:52.120 --> 03:10:54.120]  ну, вот, один из вариантов, ПР-опт, например.
[03:10:55.120 --> 03:10:56.120]  ПР-опт от В.
[03:10:57.120 --> 03:10:58.120]  То есть...
[03:10:59.120 --> 03:11:01.120]  А, ну и параллельно просто хранить D-опт от В.
[03:11:02.120 --> 03:11:04.120]  То есть, D-опт от В – это минимальная дэшка
[03:11:04.120 --> 03:11:06.120]  среди всех дэшек для этой вершины,
[03:11:07.120 --> 03:11:08.120]  которую мы к текущему моменту насчитали, да.
[03:11:09.120 --> 03:11:11.120]  И давайте хранить к ней ПР-шку.
[03:11:12.120 --> 03:11:13.120]  Просто конкретно ею...
[03:11:14.120 --> 03:11:15.120]  То есть, дэшку мы легко поддерживать
[03:11:16.120 --> 03:11:18.120]  и как бы конкретную ПР-шку тоже вот можно к ней насчитывать.
[03:11:19.120 --> 03:11:20.120]  Кажется, мы получили форда Балмана в домашнем пустое.
[03:11:21.120 --> 03:11:23.120]  В этом, видимо, была идея.
[03:11:24.120 --> 03:11:25.120]  Так...
[03:11:26.120 --> 03:11:27.120]  Теперь...
[03:11:28.120 --> 03:11:30.120]  Да, теперь возникает такой естественный вопрос.
[03:11:31.120 --> 03:11:33.120]  Почему-то хотя бы при условии отсутствия циклов
[03:11:34.120 --> 03:11:35.120]  этого веса работает.
[03:11:36.120 --> 03:11:37.120]  Что такое ПР-эль?
[03:11:38.120 --> 03:11:39.120]  Ну, вообще...
[03:11:40.120 --> 03:11:41.120]  Смотрите, вот D-опт от В.
[03:11:42.120 --> 03:11:43.120]  Это вот такой минимум, да.
[03:11:44.120 --> 03:11:46.120]  Так вот, ПР-эль от В.
[03:11:47.120 --> 03:11:50.120]  Это арк минимум абсолютно того же самого.
[03:11:55.120 --> 03:11:58.120]  Ну вот, там прям идентично, идентично, идентично.
[03:11:59.120 --> 03:12:00.120]  Идентично.
[03:12:01.120 --> 03:12:02.120]  То есть, как бы в идеале,
[03:12:02.120 --> 03:12:04.120]  если бы у нас мы хранили квадратную динамику честно,
[03:12:05.120 --> 03:12:06.120]  то мы могли бы хранить квадратную ПР-эльшку
[03:12:07.120 --> 03:12:08.120]  и естественным образом восстанавливать ответ, правда?
[03:12:09.120 --> 03:12:10.120]  Вот.
[03:12:11.120 --> 03:12:12.120]  А теперь у нас есть какая-то такая идея.
[03:12:13.120 --> 03:12:14.120]  Давайте, если мы уж не можем хранить эту динамику,
[03:12:15.120 --> 03:12:16.120]  но можем хранить там два соседних слоя,
[03:12:17.120 --> 03:12:18.120]  текущие и следующие, да,
[03:12:19.120 --> 03:12:21.120]  то давайте тогда хранить еще D-опт и ПР-опт.
[03:12:22.120 --> 03:12:23.120]  Что такое D-опт и ПР-опт?
[03:12:24.120 --> 03:12:25.120]  D-опт это...
[03:12:26.120 --> 03:12:27.120]  Вот мы прошли, например, сколько L-слоев,
[03:12:28.120 --> 03:12:29.120]  и значит D-опт это какую минимальную длину пути
[03:12:30.120 --> 03:12:31.120]  за эти L-слоев мы нашли?
[03:12:32.120 --> 03:12:33.120]  Вот.
[03:12:34.120 --> 03:12:36.120]  А ПР-опт это рассмотрим вот то L,
[03:12:37.120 --> 03:12:38.120]  при котором это было оптимально,
[03:12:39.120 --> 03:12:40.120]  и ту ПР-эшку мы и запишем.
[03:12:41.120 --> 03:12:43.120]  Вот возникает естественный вопрос.
[03:12:44.120 --> 03:12:49.120]  А почему, собственно, у нас не восстановится ответ?
[03:12:50.120 --> 03:12:51.120]  Если мы по этим ПР-эшкам,
[03:12:52.120 --> 03:12:53.120]  потом из тэшки будем скакать.
[03:12:54.120 --> 03:12:55.120]  Не восстановится.
[03:12:56.120 --> 03:12:57.120]  Ну или наоборот, почему восстановится?
[03:12:58.120 --> 03:13:00.120]  То есть как бы это вот такой есть алгоритм,
[03:13:00.120 --> 03:13:01.120]  и потом его надо доказать или опровергнуть.
[03:13:02.120 --> 03:13:03.120]  Кажется, что восстановится.
[03:13:07.120 --> 03:13:08.120]  Да.
[03:13:09.120 --> 03:13:12.120]  Да, действительно, кажется, что восстановится.
[03:13:13.120 --> 03:13:17.120]  Просто мы делаем перескоки, видимо, с непонятных...
[03:13:18.120 --> 03:13:20.120]  Ну вот, нет, там просто основные подлянки возникали в том,
[03:13:21.120 --> 03:13:23.120]  что у нас раньше вот эти ПР-эшки там у всяких D-экстрах
[03:13:24.120 --> 03:13:25.120]  и BFS-х базировались на том,
[03:13:26.120 --> 03:13:28.120]  что как бы с каждым таким перескоком у нас D-эшка уменьшается,
[03:13:28.120 --> 03:13:29.120]  поэтому за циклов нет.
[03:13:31.120 --> 03:13:32.120]  А тут еще как бы бывают подлянки,
[03:13:33.120 --> 03:13:35.120]  что как бы вы перескочили в D-шку, а там она увеличилась.
[03:13:36.120 --> 03:13:38.120]  И поэтому бывает, может теоретически так случиться,
[03:13:39.120 --> 03:13:40.120]  то есть там, если неудачно вводите варианты,
[03:13:41.120 --> 03:13:42.120]  там получалось, что...
[03:13:43.120 --> 03:13:44.120]  А не получилось ли там какое-нибудь цикло веса 0,
[03:13:45.120 --> 03:13:47.120]  на этих ПР-эшках, по которому мы скачем?
[03:13:49.120 --> 03:13:52.120]  Заметим, что, во-первых, мы можем порезть,
[03:13:53.120 --> 03:13:54.120]  в каких фрешенах рецензий на вес.
[03:13:55.120 --> 03:13:57.120]  До каких фрешен, точнее, есть циклы.
[03:13:58.120 --> 03:14:07.120]  Ну вот, давайте так, вспомним,
[03:14:08.120 --> 03:14:09.120]  что у нас пока циклов отрицательного веса нет.
[03:14:10.120 --> 03:14:11.120]  А, все, отлично.
[03:14:12.120 --> 03:14:13.120]  Да, пока, да.
[03:14:14.120 --> 03:14:15.120]  Пока, вот, да.
[03:14:18.120 --> 03:14:20.120]  На самом деле, можно это обосновать примерно так же, наверное,
[03:14:21.120 --> 03:14:22.120]  как и for the wealth все-таки.
[03:14:22.120 --> 03:14:38.120]  Ну, да, совершенно верно.
[03:14:39.120 --> 03:14:42.120]  Не, ну как, ну не совсем так, конечно, но...
[03:14:43.120 --> 03:14:45.120]  Нет, ну да, в итоге, конечно,
[03:14:46.120 --> 03:14:47.120]  D-opt в самом конце совпадет, конечно,
[03:14:48.120 --> 03:14:50.120]  с реальными расстояниями от СДВ, да.
[03:14:50.120 --> 03:14:51.120]  Это правда.
[03:14:52.120 --> 03:14:55.120]  Ну, да, то есть, логично, и это как бы,
[03:14:56.120 --> 03:14:57.120]  то есть, смотрите, это как бы логично,
[03:14:58.120 --> 03:14:59.120]  что мы берем вершину T,
[03:15:00.120 --> 03:15:01.120]  у нее написана какая-то D-шка и какая-то P-эшка,
[03:15:02.120 --> 03:15:03.120]  которая возникла, да?
[03:15:04.120 --> 03:15:05.120]  Спрашивать, хорошо, мы перейдем в эту V-шку.
[03:15:06.120 --> 03:15:07.120]  И логично, что из V, на самом деле,
[03:15:08.120 --> 03:15:10.120]  до вершины S тоже логично идти по кратчайшему пути.
[03:15:11.120 --> 03:15:14.120]  Сейчас еще раз, что у вас может вообще глобально прийти не так?
[03:15:15.120 --> 03:15:16.120]  То есть, непонятно, что путь, который мы вот взяли,
[03:15:17.120 --> 03:15:18.120]  если мы будем как-то по P-эшкам прыгать,
[03:15:18.120 --> 03:15:19.120]  то мы какой-нибудь путь найдем.
[03:15:20.120 --> 03:15:21.120]  А вот не факт.
[03:15:22.120 --> 03:15:23.120]  Тут как минимум основной вопрос возникает.
[03:15:24.120 --> 03:15:25.120]  То есть, скажем так, я готов, может быть,
[03:15:26.120 --> 03:15:27.120]  ну вот, хотя тут надо думать.
[03:15:28.120 --> 03:15:32.120]  Тут, первое, ну, первое, ну, потому что там нужно доказывать так,
[03:15:33.120 --> 03:15:34.120]  во-первых, почему мы вообще до вершины S дойдем?
[03:15:35.120 --> 03:15:36.120]  Ну, что у нас в динамике,
[03:15:37.120 --> 03:15:38.120]  по которому поражку пересчитывали, L будет уменьшаться.
[03:15:39.120 --> 03:15:40.120]  Да.
[03:15:41.120 --> 03:15:45.120]  Ну, мы и так пересчитывали, что парок ведет в какую-то, но не в нашу.
[03:15:46.120 --> 03:15:47.120]  Так.
[03:15:48.120 --> 03:15:49.120]  То есть, хорошо.
[03:15:50.120 --> 03:15:53.120]  То есть, ты хочешь сказать, что когда мы вот так скачем,
[03:15:54.120 --> 03:15:57.120]  то есть, ты очень, значит, ты, если я тебя правильно понял,
[03:15:58.120 --> 03:16:00.120]  то ты хочешь сказать, что, значит, смотрите, давайте вот,
[03:16:01.120 --> 03:16:05.120]  так, для формальности давайте введем D, Opt, Pro Opt и L Opt еще.
[03:16:06.120 --> 03:16:08.120]  Так, ну понятно, что L Opt, да?
[03:16:09.120 --> 03:16:10.120]  Ну да, пусть будет.
[03:16:11.120 --> 03:16:12.120]  Так.
[03:16:12.120 --> 03:16:16.120]  Но L Opt это типа, вот это вот D, Opt, при каком L оно возникло.
[03:16:17.120 --> 03:16:21.120]  То есть, про это, из какой вершины мы пришли, а L это в каком слое.
[03:16:23.120 --> 03:16:24.120]  Ну да.
[03:16:25.120 --> 03:16:28.120]  Ну, это, ну, мы так, но шо, мы иногда налипято по математике
[03:16:29.120 --> 03:16:32.120]  с таким приходим, чо, там доказать серии его программы,
[03:16:33.120 --> 03:16:34.120]  доказательства, запустим DFS.
[03:16:35.120 --> 03:16:37.120]  Там запустим DFS, есть основное дерево, все остальные ребра обратные,
[03:16:38.120 --> 03:16:39.120]  там бла-бла-бла-бла-бла-бла-бла-бла, все.
[03:16:40.120 --> 03:16:41.120]  То есть, ешь вот такие вот?
[03:16:42.120 --> 03:16:51.480]  если граф не ориентированный. Да, ну там разные. Я думаю, слушайте, есть вообще, как бы это, есть
[03:16:51.480 --> 03:17:00.840]  вообще же вот это, лемма холла, или теория махолла. Доказательства. Поставим СТ, запустим поток. Макс
[03:17:00.840 --> 03:17:08.920]  поток равен минразрезу. Рассмотрим минимальный разрез. Докажем, что вместо этого разреза, вот.
[03:17:08.920 --> 03:17:16.480]  Да, так это, ой, это я вам спалил начало третьего семестра, да. А, или там терема. Рассмотрим там
[03:17:16.480 --> 03:17:21.560]  двудольный дирекулярный граф. Докажем, что в нем есть совершенное пресочетание. Доказательства.
[03:17:21.560 --> 03:17:28.200]  Построим, запустим, построим исток, исток, запустим поток. Поток равен разрезу. Поехали.
[03:17:28.200 --> 03:17:39.800]  Да, а про сочетание ищется. Чем? Куном. Правильно, потоком. Да, построим сеть,
[03:17:39.800 --> 03:17:46.760]  запустим Деница. Докажем, что он еще и быстрее вашего куна работает. Это называется алгоритм
[03:17:46.760 --> 03:17:56.520]  Хопкофта Карпа. Сейчас быстрее, в смысле асимпатически. Да, Е как НИЗВ. Е как НИЗВ, да. Все знают, что куна
[03:17:56.520 --> 03:18:02.280]  работает, а вопрос Е. Ну, как это называется, да. Поговорим об этом на экзамене.
[03:18:02.280 --> 03:18:17.640]  Выделим, но кто сказал, что прешки с ним как-то связаны. Так.
[03:18:32.280 --> 03:18:45.000]  Ну, по большому счету, ладно, угадал, примерно это и хотелось сделать. Или что то же самое, я просто хотел
[03:18:45.000 --> 03:18:51.040]  показать, что на, действительно, когда мы будем скакать, L будет строго уменьшаться. Вот я утверждаю,
[03:18:51.040 --> 03:18:56.160]  что действительно, если мы хотим D-opt, P-opt и L-opt, то L-opt будет строго уменьшаться. Этого нам достаточно
[03:18:56.160 --> 03:19:04.160]  для того, чтобы показать, что, да, зациклов не будет. Ну, потому что, да. Потому что логика такая,
[03:19:04.160 --> 03:19:11.080]  вот пусть у нас там L-opt от T, допустим, равно какому-то L. Это значит, что где-то, когда мы пересчитывали
[03:19:11.080 --> 03:19:17.280]  какой-то L минус, возможно, первый слой. То есть, где-то, видимо, откуда этот путь взялся? Значит,
[03:19:17.280 --> 03:19:25.600]  на L минус первом слое была какая-то вершина V, которая у нас равна вот P-opt от T. Ну, P-opt,
[03:19:25.600 --> 03:19:37.600]  так сказать, от T-L. Мы ее в этот момент пересчитывали, и D-opt от T оказалась вот как D-opt от T-L в этот
[03:19:37.600 --> 03:19:46.800]  момент. И хуже она потом не стала. Следовательно, вот это вот происходило, видимо, в слое L. Получается
[03:19:46.800 --> 03:19:58.680]  хранится, хранилось слое L минус 1. Правда, следует ли из-за этого, что L-opt от V равно L-1? Ну,
[03:19:58.680 --> 03:20:06.200]  само по себе пока еще нет. Потому что, да, в этот момент у нее был какой-то путь такой, что вот этот
[03:20:06.200 --> 03:20:12.680]  путь плюс это ребро, это минимальный путь до T, это да. То есть, само по себе, а может быть,
[03:20:12.680 --> 03:20:18.600]  L потом поменялся? Ну, когда-нибудь потом, после L минус первого шара. Может, L-opt равен,
[03:20:18.600 --> 03:20:28.640]  то есть L-opt, он как бы не меньше, видимо, чем L-1? У V? Если больше, то мы обновили или мы обновили ее?
[03:20:28.640 --> 03:20:37.480]  Нет, смотрите, подождите. Нет, мы у нас, вот смотрите, P-opt это та самая вершина, по которой мы
[03:20:37.480 --> 03:20:51.400]  обновили T на L там слое, и это оказался чемпионский вариант. Это означает, что L-opt от T все-таки равно L-1,
[03:20:51.400 --> 03:20:56.240]  мы бы записали, или L наоборот. То есть, если мы записали L, это значит, что обновляли ее с L-1 слоя.
[03:20:56.240 --> 03:21:05.360]  Но возникает вопрос, верно ли, что у вершины V там L-opt хотя бы нас устроит меньше либо равен,
[03:21:05.360 --> 03:21:21.000]  чем L-1? В будущем нашли еще более короткий путь до вершины V, и значит,
[03:21:21.000 --> 03:21:35.960]  приоритетические даты мы могли, конечно, найти еще более короткий путь. Ну все вот эти поражки мы
[03:21:35.960 --> 03:21:59.800]  сейчас, мы сейчас в это верим, да, и что? Почему?
[03:22:05.960 --> 03:22:13.760]  Да, но длиниться не могут, потому что по этому ребру веса 0 релаксации никогда не
[03:22:13.760 --> 03:22:26.920]  произойдет. Да, но конкретная поражка-то от этого все равно не поменяет. А что это даст?
[03:22:36.920 --> 03:22:41.840]  Да, с этим максимумом то, что как бы DP в каждом столб V столб C, возможно, со
[03:22:41.840 --> 03:22:50.520]  временем не увеличивается. Потому что, типа, хотите зайти на 179 ребер, подойдите за 57 и,
[03:22:50.520 --> 03:22:52.600]  собственно, накрутите 122, разве что.
[03:22:52.600 --> 03:23:18.200]  Нет, просто чит в том, что, как бы, да, это хороший чит, правильно говоря,
[03:23:18.800 --> 03:23:24.320]  просто чит в том, что есть вторая формулировка, где тут меньше либо равно нарисовано, да, и мы,
[03:23:24.320 --> 03:23:29.760]  допустим, мы на ней пытаемся эти все оптимальные, вот эти все штуки забабахать. И тогда оказывается,
[03:23:29.760 --> 03:23:33.640]  что она легко просто, то есть, на самом деле, не жесткая формулировка, это на самом деле та же
[03:23:33.640 --> 03:23:37.880]  самая жесткая, только в предположении, что у нас в украшении вершины есть эта нулевая петля.
[03:23:37.880 --> 03:23:51.960]  Ну да, то есть, разница в том, что у нас, как бы, мы вот эту DP от ВЭЛ до каждом шаге
[03:23:51.960 --> 03:23:58.000]  инцелизируем не плюс бесконечность, а тем, что было раньше, то есть, из предыдущего слоя копируем.
[03:23:58.000 --> 03:24:03.320]  Так что, в принципе, да, можно даже и так накрутить. Хотя, ну, давайте так это, на всякий
[03:24:03.320 --> 03:24:06.640]  случай, добьем. Ну, тут мы поняли, что, да, больше тут быть не может, потому что, иначе,
[03:24:06.640 --> 03:24:13.960]  меньше путь будет. Поэтому, да, тут получается что-то типа меньше либо равно l-1, то есть,
[03:24:13.960 --> 03:24:22.000]  может оказаться, что там, ну, хотя нет, сомнительно. Нет, знаете, скорее всего,
[03:24:22.000 --> 03:24:26.360]  тут будет равно l-1, потому что, если тут меньше l-1, то и тут было бы меньше, чем l,
[03:24:26.360 --> 03:24:35.880]  потому что мы бы этого просто достигли за меньшее число гребря. Ну, и по большому счету, да. Ну,
[03:24:36.360 --> 03:24:41.200]  это уже технические детали. В общем, как бы, основную суть мы уже победили, так что все решение
[03:24:41.200 --> 03:25:01.040]  существует. Так что, гори все пропадом и пойдем спать, как всегда. Вот. Вот. Нет. Ну, это так
[03:25:01.040 --> 03:25:04.760]  получается автоматически. Нет, смотрите, у нас просто дело вот в чем. Если у вас была,
[03:25:04.760 --> 03:25:10.320]  если у вас какая-то dp-шка была найдена за 57 ребер, а потом вы обнаружили ту же пытается,
[03:25:10.320 --> 03:25:15.040]  ту же самую за 79, ну, вы просто не пререлаксируете, потому что релаксация будет на строго меньше.
[03:25:15.040 --> 03:25:20.200]  Получается, что количество ребер вы как бы релаксируете автоматически. То есть, l-opt реально,
[03:25:20.200 --> 03:25:25.200]  обратите внимание, можно не считать, достаточно считать только d-шки и p-r-шки. Нет, правда,
[03:25:25.200 --> 03:25:30.880]  есть маленькая оговорка. Этот алгоритм требует, чтобы вы все-таки хранили два слоя и разделяли
[03:25:30.880 --> 03:25:37.520]  понятие один слой и другой слой. Хотя, с другой стороны, добавление нулевых ребер намекает,
[03:25:37.520 --> 03:25:41.960]  что можно на самом деле в одном слое все сделать, по факту будет то же самое. А нет, нет, нет, нет,
[03:25:41.960 --> 03:25:48.600]  нет, не так, не так, не так, не так, не совсем. Ну, просто в одном слое у вас там просто одна вершина
[03:25:48.600 --> 03:25:53.560]  будет влиять на другие прям быстрее, чем если вы как бы от одного слоя аккуратно переходите в
[03:25:53.560 --> 03:25:58.840]  другой. То есть, да, вы, конечно, да, поэтому, то есть, помните, здесь мы как бы, то есть, мы сумели
[03:25:58.840 --> 03:26:05.800]  выкрутиться за там от v-е времени и от v-плюс e-памяти, то есть, от v-дополнительной памяти. Ну, вот, но,
[03:26:05.800 --> 03:26:09.760]  но, но, но, но, но, но. Но только с оговорками, что мы тут как бы на каждом шаге все-таки два
[03:26:09.760 --> 03:26:22.040]  слоя хранили. А что, какой топ-сорт? А каком топ-сорт? Циклы-то есть? Нет циклов отрицательного веса,
[03:26:22.040 --> 03:26:29.240]  но вообще циклы есть. Ну, короче, топ-сорт на цикле. Да, то никто включает и не знает,
[03:26:29.240 --> 03:26:34.040]  что это такое, да. А тем более, что мы и сами-то не знаем, что такое топ-сорт, что интересно, да.
[03:26:34.040 --> 03:26:51.800]  Ну, по большому счету, да. Нет, погоди,
[03:26:51.800 --> 03:26:58.200]  я пока не очень понял, как... Нет, предположим, что мы все это в одной dp-шке делаем, вот это вот.
[03:26:58.200 --> 03:27:05.480]  То есть, допустим, если мы вот действительно делаем это вот по схеме, вот for it равно от 0 до 1,
[03:27:05.480 --> 03:27:16.720]  там for там u, v, w, пробираемся по всем ребрам, и вот это вот dp от v, там min равно dp от u плюс w.
[03:27:16.720 --> 03:27:22.920]  Ну, там релакс какой-то. Вот в идеале как бы хочется, да, вот я бы не сказал,
[03:27:22.920 --> 03:27:25.880]  чтобы вот такую, прям вот такую схему мы доказали.
[03:27:25.880 --> 03:27:51.640]  Корректная dp-шка, корректная, да. Ну, там просто проблема в том,
[03:27:51.640 --> 03:27:56.080]  как непонятно в какой момент она появится. Ну, как только такая dp-шка появится,
[03:27:56.080 --> 03:28:15.880]  наверное, она не изменится никогда, это да. Ну, наверное, да. Ну, тогда это вообще будет уже
[03:28:15.880 --> 03:28:20.320]  общее доказательство в духе, что... А давайте в каждый момент времени следить, как только... То есть,
[03:28:20.320 --> 03:28:24.880]  очевидно, следующее, что да, по такой схеме кратчайшее расстояние мы, естественно, найдем.
[03:28:24.880 --> 03:28:32.200]  Просто потому что после l-то итерации здесь будет храниться что-то непревосходящее там вот этого
[03:28:32.200 --> 03:28:40.840]  dp-о... d-opto в старой итерации. Нет, то просто железобетонно. Просто, кстати, простое утверждение
[03:28:40.840 --> 03:28:47.080]  по индукции. После l-о итерации, значит, dp от v будет меньше либо равно d-opto от v,
[03:28:47.080 --> 03:28:51.720]  которое было бы тут после l-о итерации. Да, просто доказательство простой по индукции,
[03:28:51.720 --> 03:28:57.880]  потому что, как бы, ну, бажарирует там, релаксация та же, понятно. Теперь как доказать,
[03:28:57.880 --> 03:29:03.080]  что будут хорошие p-r-шки? Ну, заметь, мы будем говорить так, что что такое p-r-шка нас вообще
[03:29:03.080 --> 03:29:07.920]  не интересует, но нас интересует следующее, что как только dp от v стало кратчайшим расстоянием,
[03:29:07.920 --> 03:29:18.360]  оно больше не поменяется никогда. Верите в такое утверждение? Никогда. Ну, тогда возникает такое.
[03:29:18.360 --> 03:29:24.920]  Тогда идея такая. А давайте вот будем называть вершину хорошей, если у нее dp-шка стала оптимальной.
[03:29:24.920 --> 03:29:30.280]  Ну, то есть вершины изначально все плохие, кроме s-ки, а потом они, значит, постепенно... как
[03:29:30.280 --> 03:29:35.560]  каждое становится там похоже на предыдущую. То есть постепенно становится хорошей. Ну,
[03:29:35.600 --> 03:29:39.160]  тогда я утверждаю следующее, что в каждый момент времени, ну, то есть, допустим,
[03:29:39.160 --> 03:29:45.400]  s-ка, рассмотрим, пусть у нас какая-то вершина стала хорошей. Неожиданно. За счет чего она могла
[03:29:45.400 --> 03:29:51.280]  стать хорошей? Ну, я утверждаю, что только за счет того, что мы пререлаксировали ее правильным
[03:29:51.280 --> 03:30:00.560]  ребром из вершины s. Почему? Ну вот, да, просто потому что, если это произошло через другое,
[03:30:00.560 --> 03:30:06.000]  через какую-нибудь вершину постороннюю v-штрих, то тогда эта вершина v-штрих вынуждена уже быть
[03:30:06.000 --> 03:30:11.240]  хорошей, правда? Потому что, если она еще нехорошая, а этот путь, типа, кратчайший,
[03:30:11.240 --> 03:30:14.640]  да, в этом, мы, типа, заменим этот путь на хороший, и получается, до вершины v-штрих
[03:30:14.640 --> 03:30:21.920]  мы некорректный путь нашли, правда? То есть, поэтому, то есть, получается, что в общем случае, получается,
[03:30:21.920 --> 03:30:27.040]  что у нас в каждый момент времени есть вот такое дерево корректных путей, вот этих на p-r-шках,
[03:30:27.040 --> 03:30:33.960]  значит, на хороших вершинах, и каждая новая вершина, хорошая вершина, она, получается,
[03:30:33.960 --> 03:30:39.280]  за счет релаксации из какой-то уже на тот момент ранее ставшей хорошей вершины.
[03:30:39.280 --> 03:30:51.480]  Да, общими усилиями вроде выкрутились, да? Даже вроде не сильно сложным способом,
[03:30:51.480 --> 03:31:12.600]  да, хотя по Денису не скажешь, да. Ты живой? Да. Окей. Да, ну да, потому что это ты все
[03:31:12.600 --> 03:31:30.680]  тоже, естественно, там совсем рассказываешь, да? Вот. Ой, ну классно, да. Нет, просто, если после
[03:31:30.680 --> 03:31:40.680]  l-1 шага ДП там обновилась пряжка, значит, обновился D-opt. Это значит, что мы нашли еще более короткий путь
[03:31:40.680 --> 03:31:47.080]  до v, но тогда мы нашли тем самым и более короткий путь до t, чем вот то, что мы тут релаксировали. А
[03:31:47.080 --> 03:31:54.200]  это противоречие. Потому что мы утверждали, что тут путь, который мы тут смотрели до t, он был кратчайший.
[03:31:54.200 --> 03:32:02.040]  То есть как бы тщит, видите, заключается в том, что циклов кислотного веса нет, значит, кратчайшие
[03:32:02.040 --> 03:32:18.120]  пути все железобетонно существуют. Типа по индукции, да. Ну или не по индукции, там просто оказывалось,
[03:32:18.120 --> 03:32:24.400]  что нет, мы доказали, у нас по большому счету мы доказали простую вещь, что пр, ну потому что
[03:32:24.400 --> 03:32:30.480]  что такое пр? Это на каком слое эта штука стала оптимальной, да? Мы просто взяли пр и доказали,
[03:32:30.480 --> 03:32:37.720]  что там пр от этой вершины меньше. То есть получается, мы на более ранней интерации сказали,
[03:32:37.720 --> 03:32:42.000]  что у нее кратчайшее расстояние до нее кратчайшее. Потом повторили, повторили, и так дошли до s,
[03:32:42.000 --> 03:32:47.920]  и мы не зациклились, потому что l уменьшаются. Да. А, ну, кстати, может, по-моему, кто-то так даже,
[03:32:47.920 --> 03:32:53.400]  может быть, и выключился. Хотя вот концепция, да, назовем вершину хорошей, если до нее кратчайшее
[03:32:53.400 --> 03:33:00.440]  расстояние dp-шкой достигнуто, она, по-моему, даже вот эту реализацию решает. Да, даже просто
[03:33:00.440 --> 03:33:10.560]  как-то оказалось. Вот классненько, классненько. Но, так сколько у нас? Чего? Уже? Господи, вот я бы, да,
[03:33:10.560 --> 03:33:14.880]  я боялся, что сейчас все будет быстро, придется все игры начинать. Теперь придется бояться,
[03:33:14.880 --> 03:33:26.240]  что не успеем. Ну ладно. Чего? Обычно мы боимся второго. Да? Чего? Потому что мы не успеем. Ну,
[03:33:26.240 --> 03:33:33.760]  посмотрим, ладно. Не, ну, так. Ой, ну ладно, сейчас посмотрим, что успеем. Потому что, значит,
[03:33:33.760 --> 03:33:39.520]  смотрите, это пока был простой вариант Форда Бэлмана, значит, когда циклов отрицательного веса нет.
[03:33:39.520 --> 03:33:50.400]  Теперь интеллектуальная ситуация. Да, когда циклы есть и надо идентифицировать минус бесконечности.
[03:33:50.400 --> 03:34:03.120]  Так, давайте это я временно сотру. Нет, вы доказали следующее, но я даже продолжу. Я утверждаю,
[03:34:03.120 --> 03:34:11.460]  что если ДП от В, то есть реально расстояние от С до Т не минус бесконечность, то вот эта
[03:34:11.460 --> 03:34:21.320]  технология его все еще корректно находит и даже порешками там все восстанавливается. А вот тут,
[03:34:21.320 --> 03:34:26.160]  а вот тут, кстати, во всех литературах подлянка. Там доказывают, что сделаем МТ шаг,
[03:34:26.160 --> 03:34:33.760]  если хоть где-то что-то поменялось, значит, цикл отрицательного веса есть. Да, то есть где-то
[03:34:33.760 --> 03:34:41.240]  есть. Поэтому, значит, придется сказать следующее. Вот, там на самом деле много подлянок, там,
[03:34:41.240 --> 03:34:46.080]  я думаю, там всякие, там кто-то, те, кто там в задаче лабиринта натыкались на какие-то ватрицы
[03:34:46.080 --> 03:35:01.560]  с хвостиком. Наверное, догадываются, что там подлянки есть и много. Но нам не нужно искать
[03:35:01.560 --> 03:35:05.760]  все циклы отрицательного веса, но тем более, что их бесконечное количество. То есть нам на
[03:35:05.760 --> 03:35:11.760]  самом деле нужно вот, значит, какая тут идея. Я предлагаю вот эту ДП, я вот люблю эту честную
[03:35:11.760 --> 03:35:18.360]  ДП. Значит, я ее буду, раз цикл отрицательного веса есть, я ее буду насчитывать. Но, оказывается,
[03:35:18.360 --> 03:35:36.160]  не до N. Ну, давайте. Ну, я бы сказал так. Ну, во-первых, можем запустить, прости господи,
[03:35:36.160 --> 03:35:44.320]  ДФС. А зачем ДФС? BFS. И выкинуть все ребра, все вершины, до которых мы из С дойти не можем.
[03:35:44.320 --> 03:35:51.040]  Поэтому, в принципе, без особого значительного ограничения обществе мы всегда можем сказать,
[03:35:51.040 --> 03:35:58.000]  что у нас все вершины из С достижимы. А мы не можем умнее? Мы не можем посчитать последний слой,
[03:35:58.000 --> 03:36:02.600]  посмотреть все вершины, в которых мы прорелаксировались, и из них параллельно
[03:36:02.600 --> 03:36:07.480]  запустить BFS и посмотреть, дошли ли мы до конца. Если дошли, то есть цикл отрицательного веса
[03:36:07.480 --> 03:36:14.200]  на пути. Ну, хватит ли этого? А почему нет? Ну, вот давайте разбираться. Ну, сейчас давайте все
[03:36:14.200 --> 03:36:18.920]  постепенно. Ладно, ну давайте, хорошо. Хорошо, как там Денис заказывает? Давайте, значит,
[03:36:18.920 --> 03:36:27.360]  идея просто вызекает такая. Ну, идея вызекает такая, что рассмотрим, давайте сделаем не N-1
[03:36:27.360 --> 03:36:44.160]  атерацию, а N. Значит, мистическое утверждение. Вот в нашей терминологии воспользуемся Lopt от V
[03:36:44.160 --> 03:36:53.040]  равно N. То есть, если вершина неожиданно, если у вершины Dopt неожиданно обновился на N-ной атерации,
[03:36:53.040 --> 03:37:07.480]  то утверждается, что dist, то, во-первых, A dist от Sv равно, наверное, минус бесконечность. И B,
[03:37:07.480 --> 03:37:22.800]  если U достижимо из V, ну, автоматически, то dist от U тоже равен минус бесконечность. Ну,
[03:37:22.800 --> 03:37:34.920]  если мы, очевидно, если мы в A поверим, то B автоматически. Так, но верно ли A? Ну, действительно,
[03:37:34.920 --> 03:37:44.120]  заметим, что, да, это верно. Почему? Потому что заметим, что после N-1 атерации, то есть,
[03:37:44.120 --> 03:37:56.200]  после N-1 атерации, очевидно, Dopt от V это не превосходило длины минимального простого пути.
[03:37:56.200 --> 03:38:02.960]  Да, если нашелся, да, то есть, если оказалось, что на N-ой атерации произошло обновление,
[03:38:02.960 --> 03:38:10.440]  значит, он, значит, это заведомо путь из N-рёбер, да, может быть, ну да, N-рёбер. И тогда получается,
[03:38:10.440 --> 03:38:15.880]  что там на нём цикл отрицательного веса есть, значит, минус бесконечность. Появляется
[03:38:15.880 --> 03:38:23.680]  естественный лайфхак. Сделаем N-ную атерацию, возьмём минус бесконечности, вот, понимаете,
[03:38:23.680 --> 03:38:30.400]  да? Да, и из этих вершин запустим BFS, просто пометить все вершины, которые достижимы из вот
[03:38:30.400 --> 03:38:39.360]  таких вот V. И всех их пометим минус бесконечностью. Да, то есть, смотрите ещё раз, значит, вот мы
[03:38:39.360 --> 03:38:45.160]  поверили в это утверждение, даже не поверили, а доказали, да. Тогда, значит, модификация алгоритма,
[03:38:45.160 --> 03:38:51.720]  значит, считаем абсолютно ту же динамику, но на N-интерациях. Если неожиданно потом пробираемся
[03:38:51.720 --> 03:39:02.880]  по всем вершинам трёх OPT равен N, и из них запускаем единый BFS. Ну, BFS, а, ну да, тут важная такая тема,
[03:39:02.880 --> 03:39:08.680]  да, никто никогда не рассказывает, это BFS из нескольких стартовых вершин. Да, ну, я поверюсь,
[03:39:08.680 --> 03:39:12.640]  что для вас, наверное, это является простой идеей, что в очередь запихнём не одну стартовую вершину,
[03:39:12.640 --> 03:39:18.960]  а сразу несколько, и до всех 0 напишем, да. Вот, и из них запустим BFS, то есть получится, что мы
[03:39:18.960 --> 03:39:25.680]  пробежимся ровно по всем вершинам, которые из этих вот вершин, вот этих вот достижены, да. До них
[03:39:25.680 --> 03:39:35.280]  расстояние минус бесконечности это тоже очевидно. Остаётся только теперь внимание вопрос. Значит,
[03:39:35.280 --> 03:39:42.200]  смотрите, значит, что мы, что мы получили, значит, утверждение, то есть, ну, как бы заметим, что, как бы,
[03:39:42.200 --> 03:39:47.400]  да, до этих вершин точно минус бесконечности. Также очевидно, что если до вершины реальное
[03:39:47.400 --> 03:39:54.840]  расстояние не минус бесконечности, то мы этим алгоритмом его тоже найдём. Остаётся только маленький
[03:39:54.840 --> 03:40:02.120]  момент, что нам осталось? Да, внимание, вопрос, есть ли, да, минус бесконечности, совершенно верно,
[03:40:02.120 --> 03:40:32.120]  которое мы не нашли? Почему? Заметим следующее, что, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да, да
[03:40:32.120 --> 03:41:02.120]  могло ли такое быть? Так, ну, давайте разбираться. Значит, ну, тут, конечно, требуется, может быть, там, да, некоторая аккуратность, но давайте рассмотрим произвольную вершину Т, до которой у нас расстояние минус бесконечность, да? Как мы доказали в самом начале, мы так заблаговременно об этом позаботились, да? Значит, у нас существует, то есть,
[03:41:02.120 --> 03:41:19.120]  можно дойти до какого-то цикла отрицательного веса, прогуляться по нему и потом прийти сюда, да? Более того, я тут еще простую картинку нарисовал, хотя, как бы, по-хорошему, мы тут можем, тут, на самом деле, тут любая крокозябра может вполне себе быть в роли этого цикла.
[03:41:19.120 --> 03:41:40.120]  Но заметим следующее, что на самом деле, как бы, утверждение такое, да, что если это, давайте сделаем аккуратно, если, я вот сейчас, конечно, неформально произвучу, но если это можно сделать через просто цикл отрицательного веса, то это можно делать через простой цикл отрицательного веса.
[03:41:40.120 --> 03:41:52.120]  Ну, то есть, я могу цикл отрицательного веса вот этот подменить на простой, ну, не всегда я могу подменить его на простой, потому что, ну, помните этот пример с балалайкой, да?
[03:41:52.120 --> 03:42:16.120]  Вот, ну, могу и ребер на простой, да, ну, но на самом деле, просто идея такая, что, ну, на самом деле, утверждение такое, если, как бы, внутри цикла отрицательного веса, да, то есть, внутри, ну, среди вершин и ребер цикла отрицательного веса, я могу вычленить простой цикл отрицательного веса.
[03:42:16.120 --> 03:42:31.120]  Ну, доказательство там то же самое, идем по этому циклу, найдем первый зацикл, да, если это цикл отрицательного веса, то он простой и все хорошо, если нет, выкидываем, получился цикл отрицательного веса с меньшим числом ребер.
[03:42:31.120 --> 03:42:57.120]  Повторяем операцию, вот, все выкидываем, знаете, это, да, то есть, знаете, да, там вот, ну, в общем, понимаете припол, да, то есть, рано или поздно, как бы, вы наткнетесь на зацикл, который отрицательный, потому что, как бы, если у вас все циклы выкинутся, останется только одна вершина, ну, значит, тогда у вас и цикл был не отрицательного веса, очевидно.
[03:42:57.120 --> 03:43:02.120]  Мы ищем простой цикл отрицательного веса.
[03:43:02.120 --> 03:43:05.120]  Да, внутри просто цикл отрицательного веса.
[03:43:05.120 --> 03:43:08.120]  Как мы еще раз, мы разбиваем на простые по…
[03:43:08.120 --> 03:43:22.120]  Не, не, даже не разбиваем, мы тупо берем первую попавшуюся вершину на этом цикле, да, и идем по циклу, прям жадно, жадно, прям идем, идем, идем, идем до тех пор, пока не зациклились, то есть, когда мы в первой жизни встретили вершину, которую видели раньше.
[03:43:22.120 --> 03:43:25.120]  Это простой цикл, да?
[03:43:25.120 --> 03:43:26.120]  Да.
[03:43:26.120 --> 03:43:30.120]  Теперь, если он отрицательный, то мы победили.
[03:43:30.120 --> 03:43:31.120]  Ну да, легко понять.
[03:43:31.120 --> 03:43:35.120]  Да, потому что, значит, вот внутри цикла мы его нашли, ура, как подпуть.
[03:43:35.120 --> 03:43:39.120]  Если он не отрицательного веса, то давайте его вытянем.
[03:43:39.120 --> 03:43:45.120]  Цикл отрицательного веса от этого останется циклом отрицательного веса, только в нем станет меньшее число ребер.
[03:43:45.120 --> 03:43:50.120]  Повторяем операцию, то есть идем, теперь идем, идем, идем, тоже опять сначала, например.
[03:43:50.120 --> 03:43:53.120]  Идем, идем, идем, идем, идем, опять натыкаемся.
[03:43:53.120 --> 03:43:56.120]  Ну мы всегда будем натыкаться на зацикл, просто потому что это в принципе цикл.
[03:43:56.120 --> 03:44:01.120]  Ну да, пожалуйста, можно, ну как угодно.
[03:44:01.120 --> 03:44:06.120]  Можно, да, те же, можно главное вот эти юзиды снять, а вот эти юзиды оставить, да.
[03:44:06.120 --> 03:44:09.120]  Ну там это уже технический вопрос.
[03:44:09.120 --> 03:44:14.120]  В реальности это нам нужно только для математики, поэтому не понадобится.
[03:44:14.120 --> 03:44:16.120]  Так вот.
[03:44:17.120 --> 03:44:21.120]  Я не понимаю, еще раз, что происходит у нас?
[03:44:21.120 --> 03:44:24.120]  Что мы делаем вообще в принципе?
[03:44:24.120 --> 03:44:27.120]  Зачем мы удаляем циклы какие-то, я не понимаю.
[03:44:27.120 --> 03:44:29.120]  То есть мы хотим найти цикл отрицательного веса у нас.
[03:44:29.120 --> 03:44:31.120]  Мы сейчас доказать что-то пытаемся.
[03:44:31.120 --> 03:44:34.120]  Мы доказать пытаемся или пытаемся вывести алгоритм?
[03:44:34.120 --> 03:44:36.120]  Нет, мы доказать пытаемся пока.
[03:44:36.120 --> 03:44:42.120]  Ой, да, хорошо, что напомнили, да, конечно там, да, поиск или вот циклы действительно где-то здесь рядом будет бродить, конечно.
[03:44:42.120 --> 03:44:45.120]  Но это будет про ДФС, поэтому не заморачиваемся.
[03:44:46.120 --> 03:44:53.120]  Доказать пытаемся следующее, что я могу в качестве цикла отрицательного веса здесь рассматривать простой цикл отрицательного веса.
[03:44:55.120 --> 03:45:00.120]  То есть существует простой цикл отрицательного веса, через который можно из СПТ дойти.
[03:45:02.120 --> 03:45:06.120]  Если реальное расстояние до Т равно минус бесконечности.
[03:45:11.120 --> 03:45:14.120]  Да, все просто. На самом деле мы ничего умного пока не делали.
[03:45:14.120 --> 03:45:18.120]  Мы просто жадно сказали, что если цикл вредный, то давайте сделаем из него не вредный.
[03:45:23.120 --> 03:45:29.120]  Потому что мы удалили цикл не отрицательного веса, то есть суммарный вес только уменьшился.
[03:45:31.120 --> 03:45:35.120]  То есть был отрицательный, стал еще более отрицательным или по крайней мере что-то не поменялось.
[03:45:35.120 --> 03:45:37.120]  Так вот.
[03:45:40.120 --> 03:45:42.120]  Так вот. Чему нас это приводит?
[03:45:43.120 --> 03:45:46.120]  Так у нас находится какой-то простой цикл отрицательного веса.
[03:45:47.120 --> 03:45:49.120]  Вот я даже вот так напишу.
[03:45:50.120 --> 03:45:54.120]  Есть какой-то простой цикл отрицательного веса, до которого мы можем дойти и из которого мы можем выйти.
[03:45:54.120 --> 03:45:56.120]  Вот так.
[03:46:00.120 --> 03:46:07.120]  Причем более того заметим, что я же могу дойти до этого цикла и рассмотреть такой путь, который не пересекается по вершинам с этим циклом.
[03:46:09.120 --> 03:46:12.120]  Ну мне же в общем-то не сильно важно как мы дойдем, правда?
[03:46:14.120 --> 03:46:16.120]  И дальше.
[03:46:16.120 --> 03:46:18.120]  Вот.
[03:46:19.120 --> 03:46:23.120]  Ну исходя из этого, хочется теперь показать только одно.
[03:46:24.120 --> 03:46:26.120]  Хочется показать, что...
[03:46:27.120 --> 03:46:29.120]  Так, что нам хочется показать?
[03:46:30.120 --> 03:46:36.120]  Нам очень-очень-очень хочется показать, что действительно какая-то из этих вершин...
[03:46:39.120 --> 03:46:40.120]  Вот, нам...
[03:46:41.120 --> 03:46:42.120]  Так, тих-тих-тих.
[03:46:42.120 --> 03:46:48.120]  Нам очень хочется показать, что на n-й итерации хотя бы одна из этих вершин...
[03:46:51.120 --> 03:46:55.120]  Хотя бы одна из этих вершин действительно проявит себя с приятной стороны.
[03:46:57.120 --> 03:46:58.120]  Очень хочется, да.
[03:46:59.120 --> 03:47:00.120]  Вот.
[03:47:01.120 --> 03:47:02.120]  Прям очень-очень-очень-очень.
[03:47:03.120 --> 03:47:05.120]  Вы хочется верить в то, что я всю свою жизнь называл мне лажа.
[03:47:07.120 --> 03:47:08.120]  Вот.
[03:47:09.120 --> 03:47:11.120]  Ну не знаю, а может выясним, что это лажа?
[03:47:13.120 --> 03:47:14.120]  Хе-хе-хе.
[03:47:16.120 --> 03:47:17.120]  Сейчас, ну...
[03:47:18.120 --> 03:47:24.120]  Во-первых, можно сказать, что вот в отрицательном цикле у нас на каждой итерации будет какая-то релаксация.
[03:47:25.120 --> 03:47:26.120]  Каждый раз будет происходить какая-то релаксация.
[03:47:27.120 --> 03:47:28.120]  Не скажи.
[03:47:29.120 --> 03:47:31.120]  Ну, смотря в какой версии. Вот в этой не факт.
[03:47:32.120 --> 03:47:35.120]  Для начала нам хочется не больше, чем n-ребер.
[03:47:36.120 --> 03:47:37.120]  Да.
[03:47:38.120 --> 03:47:39.120]  Так.
[03:47:40.120 --> 03:47:42.120]  Нет, ну не более, чем n-ребер, пожалуйста.
[03:47:43.120 --> 03:47:44.120]  Я же сказал, у нас простой цикл и простые ребя.
[03:47:45.120 --> 03:47:46.120]  Я эту технологию ровно ради этого и забабахил.
[03:47:47.120 --> 03:47:49.120]  Поэтому, да, тут не более, чем n-ребер.
[03:47:50.120 --> 03:47:51.120]  Вершинно простой.
[03:47:52.120 --> 03:47:53.120]  Ну.
[03:47:54.120 --> 03:47:56.120]  Вершинно простой по модулю вот этого финального зацикла.
[03:47:57.120 --> 03:47:58.120]  А, ну ладно.
[03:47:59.120 --> 03:48:00.120]  То есть вот этот вот, я могу рассмотреть путь вот такой и вот такой.
[03:48:00.120 --> 03:48:05.120]  Это как бы и реберно, и вершинно по модулю зацикла простой путь.
[03:48:06.120 --> 03:48:07.120]  Состоящий из не более, чем n-ребер.
[03:48:12.120 --> 03:48:13.120]  Поэтому, да.
[03:48:14.120 --> 03:48:15.120]  Да.
[03:48:24.120 --> 03:48:28.120]  Нет, ну нам надо доказать, что именно на n-ном шаге одна из этих вершин повалится.
[03:48:28.120 --> 03:48:32.120]  Нужно доказать, что на каком-то шаге будет релаксироваться сама вершина входа.
[03:48:33.120 --> 03:48:34.120]  Вот.
[03:48:35.120 --> 03:48:39.120]  А по нашей ДПОшке означает, что на предыдущем шаге тоже какая-то до этого релаксировалась.
[03:48:40.120 --> 03:48:45.120]  И так можно обратно идти и доказать, что на всех предыдущих шагах была хотя бы одна релаксация.
[03:48:46.120 --> 03:48:47.120]  Ну.
[03:48:48.120 --> 03:48:49.120]  На этом подграфе.
[03:48:50.120 --> 03:48:51.120]  Нет, ну может и была, и что.
[03:48:52.120 --> 03:48:53.120]  Так.
[03:48:54.120 --> 03:48:55.120]  Ну и все, значит у вас была на n-ном шаге релаксация.
[03:48:55.120 --> 03:48:57.120]  Она могла быть только в этом шее.
[03:48:58.120 --> 03:48:59.120]  Стоп.
[03:49:00.120 --> 03:49:01.120]  Сейчас.
[03:49:02.120 --> 03:49:03.120]  Допустим, у нас нет ни одной релаксации.
[03:49:04.120 --> 03:49:06.120]  Докажем, что у нас и после этого не будет релаксации.
[03:49:07.120 --> 03:49:10.120]  Нет, релаксация может и быть.
[03:49:11.120 --> 03:49:12.120]  У нас больше проблема.
[03:49:13.120 --> 03:49:14.120]  Нам нужно доказать, что...
[03:49:15.120 --> 03:49:16.120]  А, ну хотя...
[03:49:17.120 --> 03:49:22.120]  Да, нам нужно доказать, что на n-ном шаге должна произойти релаксация.
[03:49:22.120 --> 03:49:28.120]  Давайте докажем, что если у нас не было релаксации на n-ном шаге, то у нас и на всех дальше шагах не будет релаксации.
[03:49:29.120 --> 03:49:30.120]  Ну да.
[03:49:31.120 --> 03:49:32.120]  Реала.
[03:49:33.120 --> 03:49:34.120]  Сейчас.
[03:49:35.120 --> 03:49:36.120]  Если у нас не было релаксации, то...
[03:49:37.120 --> 03:49:41.120]  А если у нас на всех дальше шагах не будет релаксации, то в частности не будет двоя, то...
[03:49:42.120 --> 03:49:43.120]  Ну да, ну давайте смотреть.
[03:49:44.120 --> 03:49:46.120]  Предположим, что нам фантастически повезло.
[03:49:47.120 --> 03:49:49.120]  И, значит, на n-ном шаге не на одной из этих вершин.
[03:49:49.120 --> 03:49:50.120]  Не на одной из этих вершин.
[03:49:51.120 --> 03:49:52.120]  Давайте их, кстати, так и назовем.
[03:49:53.120 --> 03:49:54.120]  V1, V2, V3 и так далее.
[03:49:55.120 --> 03:49:56.120]  V...
[03:49:57.120 --> 03:49:58.120]  Ну да.
[03:49:59.120 --> 03:50:00.120]  K мы не использовали, поэтому можно.
[03:50:04.120 --> 03:50:05.120]  Нет, ну почему?
[03:50:06.120 --> 03:50:10.120]  Так, и давайте высалом их будут W1, W2, W3 и так далее.
[03:50:11.120 --> 03:50:12.120]  Wk.
[03:50:13.120 --> 03:50:14.120]  Так.
[03:50:15.120 --> 03:50:16.120]  И мы говорим, что...
[03:50:17.120 --> 03:50:18.120]  Как бы...
[03:50:19.120 --> 03:50:20.120]  Ну как релаксация?
[03:50:21.120 --> 03:50:23.120]  На n-ном шаге могла с ними произойти релаксация.
[03:50:24.120 --> 03:50:28.120]  Релаксация почти наверно и произошла, потому что исходно там вообще написано плюс бесконечности.
[03:50:29.120 --> 03:50:30.120]  Какие-то пути мы всегда найдем.
[03:50:34.120 --> 03:50:35.120]  На этом?
[03:50:36.120 --> 03:50:37.120]  Ну, так.
[03:50:38.120 --> 03:50:42.120]  Вот если вы внимательно посмотрите на ДП-шку, вы поймете, что релаксация на n-ном шаге, конечно же, всегда произойдет.
[03:50:43.120 --> 03:50:45.120]  Если у вас ДП-шка неровная?
[03:50:46.120 --> 03:50:48.120]  Ну потому что вот в этой ДП-шке, да, она произойдет обязательно.
[03:50:49.120 --> 03:50:50.120]  Куда же она денется?
[03:50:51.120 --> 03:50:55.120]  Нет, я не случайно это не просто написал и еще никогда не стирал.
[03:50:56.120 --> 03:51:01.120]  Да, мы обсуждали, что с помощью этой ДП-шки можно свестись к другой и там будет плюс-минус идентично.
[03:51:02.120 --> 03:51:04.120]  Но исходно мы пляшем от этой ДП-шки.
[03:51:07.120 --> 03:51:08.120]  Так, и вот внимание и вопрос.
[03:51:09.120 --> 03:51:10.120]  Тогда у нас просто на каждом шаге будет релаксация.
[03:51:11.120 --> 03:51:13.120]  Но релаксация это, видите, у нас же утверждение требует не этого.
[03:51:14.120 --> 03:51:20.120]  У нас утверждение требует, чтобы релаксация сказала, чтобы прям обновили не просто ДП, а ДП-опт обновили.
[03:51:41.120 --> 03:51:42.120]  И что?
[03:51:59.120 --> 03:52:00.120]  Ну вот хочется это и доказать.
[03:52:00.120 --> 03:52:01.120]  Нет, еще раз.
[03:52:02.120 --> 03:52:03.120]  Вот допустим, у нас ничего не релаксировалось.
[03:52:04.120 --> 03:52:06.120]  Тогда у нас все ДП-шки остались теми же.
[03:52:07.120 --> 03:52:09.120]  Нет, что такое все ДП-шки остались теми же.
[03:52:12.120 --> 03:52:14.120]  Тут как бы картинка, я боюсь, с этой ДП-шкой не совпадает.
[03:52:15.120 --> 03:52:18.120]  Все ДП-шки уровня от 0 до n-1 остались теми же, потому что мы их не трогаем.
[03:52:19.120 --> 03:52:22.120]  А n-ные изначально вообще были плюс-бесконечности, поэтому релаксации там будут.
[03:52:23.120 --> 03:52:24.120]  N-ты стали такими же, как n-1.
[03:52:25.120 --> 03:52:26.120]  Ну вот.
[03:52:27.120 --> 03:52:28.120]  Нет, они, с какого перепуга?
[03:52:29.120 --> 03:52:32.120]  Да потому что у нас ДП-шка идиотская, надо нормально ДП-шку записать.
[03:52:33.120 --> 03:52:36.120]  Нет, давайте не будем работать по принципу, мы все неправильно делаем, давайте себе подменять.
[03:52:37.120 --> 03:52:38.120]  Этого надо избирать.
[03:52:39.120 --> 03:52:40.120]  Мы уже зафиксировали ДП-шку, значит давайте смотреть.
[03:52:41.120 --> 03:52:42.120]  А почему не работает?
[03:52:43.120 --> 03:52:44.120]  Если мы меньше липаем, чем это?
[03:52:45.120 --> 03:52:46.120]  Ну потому что пока невозможно нечетко липать.
[03:52:47.120 --> 03:52:49.120]  Но давайте аккуратно смотреть.
[03:52:50.120 --> 03:52:54.120]  Что означает, что не для одной из этих вершин ДП-опт не обновился?
[03:52:55.120 --> 03:52:57.120]  Значит ДП-2, n меньше липает.
[03:52:58.120 --> 03:52:59.120]  То есть это означает следующее.
[03:53:00.120 --> 03:53:03.120]  То есть мы можем, давайте введем такое понятие.
[03:53:04.120 --> 03:53:08.120]  Ну мы можем ввести такое понятие, как ДП-опт от VL.
[03:53:09.120 --> 03:53:13.120]  То есть ДП-опт, какой он был после L-итерации, да?
[03:53:14.120 --> 03:53:15.120]  Можем такое сделать?
[03:53:16.120 --> 03:53:17.120]  Можем.
[03:53:18.120 --> 03:53:19.120]  Ну это виртуально мы себе такое сделаем, конечно, да?
[03:53:20.120 --> 03:53:22.120]  У нас консистентные массивы.
[03:53:23.120 --> 03:53:26.120]  Значит мы хотим показать, что существует такое И.
[03:53:27.120 --> 03:53:40.120]  Что ДП-опт от VL-итерации N оказался строго меньше, чем ДП-опт от VL-итерации N-1.
[03:53:41.120 --> 03:53:45.120]  Вот по сути мы хотим доказать, что найдется И вот где-то вот от одного ДК.
[03:53:46.120 --> 03:53:47.120]  Почему?
[03:53:48.120 --> 03:53:49.120]  Чем ДП-опт отличается от ДП?
[03:53:50.120 --> 03:53:55.120]  Ну тем, что ДП-опт это, ну короче, минимум на префексе суффикса.
[03:53:57.120 --> 03:54:04.120]  Существует И такое, что ДП-опт от VL-итерации N-ого строго меньше, чем ДП-опт от VL-итерации N-1.
[03:54:05.120 --> 03:54:15.120]  Это эквивалентно тому, но на самом деле это эквивалентно тому, что существует И такое, что вот L-опт от И равно L.
[03:54:16.120 --> 03:54:18.120]  То, равно N.
[03:54:19.120 --> 03:54:21.120]  Ну это то, что мы хотим доказать.
[03:54:22.120 --> 03:54:23.120]  Да.
[03:54:23.120 --> 03:54:25.120]  Да, мы это переформулировали, мы теперь вот это хотим доказать.
[03:54:26.120 --> 03:54:29.120]  Теперь мы говорим, пусть для этих шин это не так.
[03:54:30.120 --> 03:54:36.120]  Тогда релаксация не удалась, в том числе и по этим ребрам, правда?
[03:54:37.120 --> 03:54:43.120]  И это означает, что, то есть если мы идем, как говорят на латыни, ad absurdum.
[03:54:46.120 --> 03:54:47.120]  Вот.
[03:54:48.120 --> 03:54:51.120]  Ну там это говорит ad absurdum, да, так что они так и говорят буквально.
[03:54:52.120 --> 03:55:01.120]  Значит получается следующее, что если ничего не получилось, то мы вынуждены заключить, что, смотрите, я так и напишу,
[03:55:01.120 --> 03:55:23.120]  Dp от VL-1 плюс W1 оказалось больше либо равно, чем Dp от VL-1.
[03:55:26.120 --> 03:55:27.120]  Сейчас.
[03:55:28.120 --> 03:55:29.120]  Да.
[03:55:29.120 --> 03:55:30.120]  Ну так и оказалось, да.
[03:55:32.120 --> 03:55:34.120]  Только не V, а вот V2.
[03:55:36.120 --> 03:55:38.120]  Вот согласно таким утверждениям, да?
[03:55:39.120 --> 03:55:43.120]  Потому что этой величиной мы этот Dpопт пытались обновить, правда?
[03:55:44.120 --> 03:56:01.120]  А еще мы попытались сказать, что Dp от V2 N-1 плюс W2 оказалось больше либо равно, чем Dpопт от V3 N-1.
[03:56:02.120 --> 03:56:04.120]  Ну и так далее, видимо.
[03:56:05.120 --> 03:56:06.120]  Так.
[03:56:07.120 --> 03:56:12.120]  Ну и теперь в конце получается Dpопт от, от чего там?
[03:56:13.120 --> 03:56:14.120]  Тут V1.
[03:56:16.120 --> 03:56:18.120]  И тут соответственно Dp.
[03:56:19.120 --> 03:56:20.120]  В общем мы зацепились и умерли.
[03:56:21.120 --> 03:56:23.120]  Ага, вот сейчас давайте разбираться, умерли мы или нет.
[03:56:24.120 --> 03:56:25.120]  Уверен?
[03:56:26.120 --> 03:56:30.120]  Вот давай, вот расскажи мне почему мы, почему вот из этого следует, что мы каким-то мистическим образом умерли.
[03:56:30.120 --> 03:56:31.120]  А, ну хотя.
[03:56:32.120 --> 03:56:35.120]  Это у нас, собственно, получилось, если по подставлять.
[03:56:36.120 --> 03:56:37.120]  Просуммируем.
[03:56:38.120 --> 03:56:40.120]  Нет, если просто подставить, типа.
[03:56:41.120 --> 03:56:46.120]  Давайте просуммируем, а V1 N-1 плюс W2 меньше нуля по определению.
[03:56:47.120 --> 03:56:48.120]  И что?
[03:56:49.120 --> 03:56:51.120]  И чем это поможет?
[03:56:52.120 --> 03:56:53.120]  Ну у нас.
[03:56:54.120 --> 03:56:55.120]  А, Dp.
[03:56:56.120 --> 03:56:57.120]  Не, а почему у нас?
[03:56:57.120 --> 03:56:58.120]  А, Dp.
[03:56:59.120 --> 03:57:00.120]  Не, а почему у нас?
[03:57:01.120 --> 03:57:02.120]  Почему мы работаем с Dp?
[03:57:03.120 --> 03:57:04.120]  Почему у него просто Dp?
[03:57:05.120 --> 03:57:06.120]  В смысле?
[03:57:07.120 --> 03:57:09.120]  Ну потому что просто, вообще как вы просто Dp напишем?
[03:57:10.120 --> 03:57:11.120]  Ну у нас до этого было просто.
[03:57:12.120 --> 03:57:14.120]  Потому что нам нужно, чтобы произошло обновление лёпта.
[03:57:15.120 --> 03:57:16.120]  Ну и с Dp же он тоже прожидает.
[03:57:17.120 --> 03:57:18.120]  Dp это же обычный формат.
[03:57:19.120 --> 03:57:20.120]  И что?
[03:57:21.120 --> 03:57:23.120]  Если мы не обновили, значит у нас на Dp есть такое неравенство.
[03:57:24.120 --> 03:57:25.120]  Да.
[03:57:25.120 --> 03:57:27.120]  Зачем нам кидать ещё Dp?
[03:57:28.120 --> 03:57:30.120]  Я могу уезжать без опта.
[03:57:31.120 --> 03:57:34.120]  Ну как бы я такого гарантировать не могу.
[03:57:35.120 --> 03:57:37.120]  Нет, ну в смысле там без.
[03:57:38.120 --> 03:57:39.120]  Сейчас.
[03:57:41.120 --> 03:57:43.120]  Так, ну да вот давайте разбираться.
[03:57:44.120 --> 03:57:46.120]  Что из этого вообще следует?
[03:57:47.120 --> 03:57:50.120]  Да, в идеале хочется, конечно, всё эти неравенства просуммировать.
[03:57:51.120 --> 03:57:54.120]  А, ну всё, кажется же всё прекрасно.
[03:57:55.120 --> 03:57:56.120]  Да.
[03:57:57.120 --> 03:57:59.120]  Чем категорически отличается DpOpt?
[03:58:00.120 --> 03:58:02.120]  Dp это минимум на префиксе.
[03:58:03.120 --> 03:58:08.120]  То есть DpOpt это минимум из вот этого и ещё того, что выше.
[03:58:13.120 --> 03:58:14.120]  DpOpt это минимум.
[03:58:15.120 --> 03:58:16.120]  Вот это.
[03:58:17.120 --> 03:58:19.120]  Ну ладно, вот это DpOpt от этого.
[03:58:20.120 --> 03:58:22.120]  Это минимум из вот этого и того, что выше.
[03:58:22.120 --> 03:58:23.120]  Что значит того, что выше?
[03:58:24.120 --> 03:58:25.120]  На префиксу собственно.
[03:58:26.120 --> 03:58:27.120]  Ну как бы.
[03:58:28.120 --> 03:58:29.120]  Ну по столцам.
[03:58:30.120 --> 03:58:32.120]  Я просто себе воображаю, что вершины идут с таблицы так, а расстояние вот.
[03:58:33.120 --> 03:58:35.120]  Мне не видно, как вы себе этого воображаете.
[03:58:36.120 --> 03:58:39.120]  Длина пути не больше равна, чем наша.
[03:58:40.120 --> 03:58:41.120]  Потому что такое выше было непонятно.
[03:58:42.120 --> 03:58:43.120]  Длина пути не больше равна, чем наша.
[03:58:44.120 --> 03:58:45.120]  Всё как...
[03:58:46.120 --> 03:58:47.120]  Сейчас, какой длина пути что?
[03:58:48.120 --> 03:58:49.120]  Всё.
[03:58:49.120 --> 03:58:51.120]  Длина пути не больше, либо равна, чем наша.
[03:58:52.120 --> 03:58:53.120]  Какая длина пути?
[03:58:54.120 --> 03:58:55.120]  Не больше, либо равна, ни фига вы не оформляете.
[03:58:56.120 --> 03:58:57.120]  Ну DpOpt.
[03:58:58.120 --> 03:59:00.120]  Ну DpOpt меньше равен Dp.
[03:59:01.120 --> 03:59:02.120]  Нам мало что даёт.
[03:59:03.120 --> 03:59:04.120]  Нет, что нам это даёт, я не понял.
[03:59:09.120 --> 03:59:10.120]  Так, что мы должны сделать, я не понял.
[03:59:11.120 --> 03:59:12.120]  Нет, я говорю, что такое DpOpt.
[03:59:12.120 --> 03:59:13.120]  ДпOpt.
[03:59:15.120 --> 03:59:21.120]  Правда DpOpt это минимальная, напоминаю, минимальная длина пути, состоящего не более, чем из одного количества ребр.
[03:59:22.120 --> 03:59:24.120]  А Dp это из любого числа ребр.
[03:59:25.120 --> 03:59:26.120]  Что?
[03:59:27.120 --> 03:59:30.120]  Нет, это ровно n-1.
[03:59:31.120 --> 03:59:32.120]  Всё, всё, я понял.
[03:59:33.120 --> 03:59:34.120]  Вот.
[03:59:35.120 --> 03:59:38.120]  То есть Dp это ровно, а DpOpt это неровно, это меньше либо равно.
[03:59:39.120 --> 03:59:40.120]  Ну да.
[03:59:40.120 --> 03:59:41.120]  Да.
[03:59:44.120 --> 03:59:51.120]  Ну вот, само по себе, если я это всё просуммирую, то как бы получится, что вот эта сумма Dp очевидно будет больше, чем сумма вот этих Dp.
[03:59:53.120 --> 03:59:58.120]  Ну вот, поэтому как бы то, что тут цикл отрицает этого веса, само по себе ничего страшного не даст.
[03:59:59.120 --> 04:00:00.120]  Это да.
[04:00:01.120 --> 04:00:02.120]  Ещё раз.
[04:00:03.120 --> 04:00:06.120]  Так, если просто всё дополнительно сложить там не будет.
[04:00:07.120 --> 04:00:08.120]  Что? Какое предложение?
[04:00:08.120 --> 04:00:10.120]  Я думаю, что вот если мы просуммируем, то...
[04:00:11.120 --> 04:00:15.120]  Ну просто, не, ну как бы в идеале хочется сказать, что давайте просуммируем.
[04:00:16.120 --> 04:00:22.120]  Когда получится, что сумма вот этих Dp-шек плюс сумма, плюс длина цикла, больше либо равна DpOpt.
[04:00:23.120 --> 04:00:24.120]  Сумма DpOpt.
[04:00:25.120 --> 04:00:27.120]  Но как бы само по себе это противоречие не рожает.
[04:00:28.120 --> 04:00:32.120]  Это не рожает противоречие?
[04:00:33.120 --> 04:00:35.120]  Ну просто у нас сумма Dp-шек, которая вообще там...
[04:00:36.120 --> 04:00:37.120]  Из этой системы не нравится?
[04:00:38.120 --> 04:00:39.120]  Нет.
[04:00:40.120 --> 04:00:42.120]  А DpOpt равно?
[04:00:43.120 --> 04:00:45.120]  Нет, оно меньше либо равно.
[04:00:46.120 --> 04:00:47.120]  Ну тут давайте думать.
[04:00:48.120 --> 04:00:54.120]  А мы не можем использовать то, что оно меньше или равно Dp для этого размера?
[04:00:55.120 --> 04:00:57.120]  Просто меньше равно не помогает.
[04:00:58.120 --> 04:01:00.120]  А мы не можем?
[04:01:01.120 --> 04:01:02.120]  Стоп, ещё раз.
[04:01:03.120 --> 04:01:04.120]  Ну минусы не вряд ли что-то.
[04:01:05.120 --> 04:01:09.120]  Так, ребят, я не слышу ничего.
[04:01:10.120 --> 04:01:13.120]  Скажите, почему мы не можем сократить Dp-шки слева и DpOpt и справа?
[04:01:14.120 --> 04:01:15.120]  Потому что это разные вещи.
[04:01:16.120 --> 04:01:17.120]  Что такое Dp?
[04:01:18.120 --> 04:01:20.120]  Ну, в смысле, за n шагов.
[04:01:21.120 --> 04:01:23.120]  Ровно n шагов.
[04:01:24.120 --> 04:01:29.120]  Хорошо, а вот если мы рассмотрим постановку задачи не жёсткую, то...
[04:01:30.120 --> 04:01:31.120]  Нет, ну не...
[04:01:32.120 --> 04:01:34.120]  Вот пока не хочется подменять.
[04:01:35.120 --> 04:01:38.120]  Подсмотреть туда, как доказывали там, типа...
[04:01:39.120 --> 04:01:40.120]  Можно попробовать?
[04:01:41.120 --> 04:01:45.120]  Если рассмотреть не жёсткую, то да, будет Dp тут, Dp тут, и они схлопнутся.
[04:01:46.120 --> 04:01:48.120]  А мы до этого доказывали, что вообще-то у нас не жёсткая, она как бы...
[04:01:49.120 --> 04:01:50.120]  Ну да, но всё-таки.
[04:01:51.120 --> 04:01:55.120]  Мы предложили конкретный алгоритм пока, который основан всё-таки на этой Dp-шке.
[04:01:55.120 --> 04:01:57.120]  Мы пытаемся проверить, обвалится ли он.
[04:01:58.120 --> 04:02:01.120]  То, что вы говорите, это давайте рассмотрим другой алгоритм и заметим, что он не обвалится.
[04:02:02.120 --> 04:02:04.120]  Ну да, просто тот мог алгоритм...
[04:02:05.120 --> 04:02:06.120]  Ну в том, в принципе, да.
[04:02:07.120 --> 04:02:08.120]  Более того, я вам даже больше скажу.
[04:02:09.120 --> 04:02:15.120]  Можно даже этот алгоритм докрутить, что считаем динамику Dn-1, а потом возьмём DpOpt и попытаемся прелоксировать.
[04:02:16.120 --> 04:02:19.120]  То есть для кого получится, значит у тех минус бесконечность.
[04:02:20.120 --> 04:02:22.120]  Можно так сделать, можно сразу там так выкрутить.
[04:02:22.120 --> 04:02:23.120]  Так выкрутить.
[04:02:24.120 --> 04:02:25.120]  Но мы пытаемся сделать ещё более жёстко.
[04:02:26.120 --> 04:02:27.120]  Давайте прямо здесь насчитаем, наверное.
[04:02:28.120 --> 04:02:29.120]  Где насчитаем?
[04:02:30.120 --> 04:02:31.120]  Где ещё насчитаем?
[04:02:33.120 --> 04:02:36.120]  Вот вы сказали, прямо здесь насчитаем, вот здесь.
[04:02:37.120 --> 04:02:38.120]  В этой Dp-шке.
[04:02:39.120 --> 04:02:41.120]  Ещё один злой насчитываем.
[04:02:42.120 --> 04:02:43.120]  Вот.
[04:02:44.120 --> 04:02:48.120]  Вот если мы даже вот эту такую Dp-шку, вот интересно понять, чтобы глубже понять происходящее.
[04:02:49.120 --> 04:02:51.120]  То есть действительно ли окажется, что это не поможет?
[04:02:52.120 --> 04:02:53.120]  Может test можно найти, где это валится.
[04:02:54.120 --> 04:02:55.120]  Не понятно.
[04:02:56.120 --> 04:02:59.120]  Хочется взять не рандомный цикл, а отрицательный вес какой-то самый такой плохой.
[04:03:00.120 --> 04:03:02.120]  Какой-то самый плохой?
[04:03:03.120 --> 04:03:04.120]  А что такое?
[04:03:05.120 --> 04:03:06.120]  Что такое какой-то самый плохой?
[04:03:07.120 --> 04:03:09.120]  Не, ну можно как бы напрашивать, скажем, вариант.
[04:03:10.120 --> 04:03:14.120]  Давайте нажмём вот этот путь и этот цикл, так чтобы суммарная длина была как можно меньше.
[04:03:15.120 --> 04:03:19.120]  Можно, конечно, но если это нам что-то даст.
[04:03:20.120 --> 04:03:21.120]  Или наоборот, как можно больше.
[04:03:22.120 --> 04:03:24.120]  Не совсем понятны параметры.
[04:03:25.120 --> 04:03:26.120]  Вот.
[04:03:29.120 --> 04:03:33.120]  Я до сих пор не понимаю, почему мы рассматриваем это в жёсткую формировку, а не в мягкую формировку.
[04:03:34.120 --> 04:03:39.120]  Если в мягкую формировку, то просто всё работает, но только всё проще доказывается.
[04:03:40.120 --> 04:03:41.120]  Почему это?
[04:03:42.120 --> 04:03:47.120]  Ну вот, потому что Денис предложил такой вариант, мы стали рассматривать его.
[04:03:48.120 --> 04:03:50.120]  Я предложил вместо 2n рассматривать n.
[04:03:50.120 --> 04:03:51.120]  Ну да.
[04:03:55.120 --> 04:03:58.120]  ДПшку у нас, ДПшку я точно не предлагал.
[04:03:59.120 --> 04:04:02.120]  Нет, ну на самом деле да, просто вот моя версия была другая.
[04:04:03.120 --> 04:04:05.120]  Давайте тут не n было написали, а 2n-1.
[04:04:06.120 --> 04:04:08.120]  Вот для 2n-1 это доказывается сильно проще.
[04:04:09.120 --> 04:04:12.120]  Я могу вам подобрать задачу, где вы 2n-1 не выпихнёте.
[04:04:13.120 --> 04:04:14.120]  Это вряд ли.
[04:04:15.120 --> 04:04:20.120]  Когда ты квадратичные вещи такие пишешь, вполне себе подбираются.
[04:04:21.120 --> 04:04:22.120]  Ну вот.
[04:04:23.120 --> 04:04:38.120]  Например, если бы тут было не n, а 2n-1, то доказательства, то тогда я бы утверждал, что на всех этих вершинах обновление произойдёт.
[04:04:39.120 --> 04:04:42.120]  Мы бы там смотрели просто разные разницы за последние n шагов, наверное, и всё.
[04:04:42.120 --> 04:04:43.120]  Нет, ну не совсем.
[04:04:44.120 --> 04:04:45.120]  Я бы сказал так.
[04:04:46.120 --> 04:04:56.120]  Рассмотрим как бы кратчайший путь до вершины v1, допустим из s до вершины v1, состоящий из не более чем n-1 ребра.
[04:05:02.120 --> 04:05:03.120]  Вот кратчайший, ну вот.
[04:05:05.120 --> 04:05:09.120]  То есть вот этот кратчайший путь, то есть этот, который берётся из DPopt.
[04:05:12.120 --> 04:05:16.120]  Значит DPopt соответственно от v1 и n-1.
[04:05:17.120 --> 04:05:19.120]  Вот рассмотрим путь, который тут имеется в виду.
[04:05:20.120 --> 04:05:26.120]  Так вот, я утверждаю, что давайте к этому пути прицепим вот этот цикл отрицательного веса длины не более чем n, да?
[04:05:28.120 --> 04:05:30.120]  Тогда, ну вот.
[04:05:32.120 --> 04:05:38.120]  Тогда если его прицепить, то как бы, если он вот, ну тогда получится путь какой-то меньший.
[04:05:39.120 --> 04:05:46.120]  Но если количество ребер в нём останется меньше чем n-1, меньше либо равно, то тогда противоречие с определением вот этого DPopt, конечно.
[04:05:47.120 --> 04:05:52.120]  Ну значит в нём ребер будет, с одной стороны, больше чем n-1, но не более чем 2n-1 при этом.
[04:05:53.120 --> 04:05:55.120]  Следовательно, DPopt поменяется.
[04:05:55.120 --> 04:05:59.120]  Вот, там было вот, если тут описать 2n-1, то как бы вот тут такое доказательство.
[04:06:00.120 --> 04:06:04.120]  И там оказывается, что вот у всех этих вершин vopt заведомо поменяется.
[04:06:09.120 --> 04:06:11.120]  Вот, понятно?
[04:06:12.120 --> 04:06:14.120]  Ну типа того, да.
[04:06:15.120 --> 04:06:17.120]  Какой?
[04:06:17.120 --> 04:06:19.120]  Нет, нам нужна была цель.
[04:06:20.120 --> 04:06:28.120]  Нет, мы пытались доказать, что для минус бесконечности достаточно запускать DFS только из тех вершин, у которых только n-на итерация обновилась.
[04:06:29.120 --> 04:06:31.120]  То есть обновился опт именно.
[04:06:31.120 --> 04:06:33.120]  А почему просто с DP не работает?
[04:06:34.120 --> 04:06:41.120]  Ну то есть, если просто с DP, то у нас понятно, что на каждом цикле отрезовенного веса оно точно обновится?
[04:06:42.120 --> 04:06:45.120]  Непонятно. Вот тут у нас и проблемы возникли, что это непонятно.
[04:06:46.120 --> 04:06:47.120]  Что?
[04:06:48.120 --> 04:06:52.120]  Потому что видимо у многих просто в голове как бы не понятно, что это будет, что это будет.
[04:06:53.120 --> 04:06:55.120]  А что это будет?
[04:06:55.120 --> 04:07:01.120]  Просто если у вас DP-opt в один момент становится больше n, то когда-то он был на единичку меньше, и так далее, и можно спускаться до n.
[04:07:02.120 --> 04:07:09.120]  Ну там возникнут вопросы, а почему он именно на этих вершинах, может он там, они обновления пришли вот откуда там слева, справа, сверху, снизу, там вот так далее.
[04:07:10.120 --> 04:07:12.120]  То есть в прямом.
[04:07:13.120 --> 04:07:14.120]  В прямом?
[04:07:15.120 --> 04:07:16.120]  В прямом.
[04:07:17.120 --> 04:07:18.120]  В прямом.
[04:07:19.120 --> 04:07:20.120]  В прямом.
[04:07:20.120 --> 04:07:24.120]  Нет, если мы дошли до вершины цикла, то нам не важно даже, где они произошли.
[04:07:25.120 --> 04:07:27.120]  Нет, ну как бы, ну я не знаю.
[04:07:28.120 --> 04:07:35.120]  Если мы BFS-ом дошли до вот этой компонента с этим циклом, то все, нам уже в целом не важно, где у нас DP-opt, да и n увеличился.
[04:07:36.120 --> 04:07:39.120]  Ну каким BFS-ом вообще? Не понимаю, я ничего не понимаю.
[04:07:40.120 --> 04:07:41.120]  Еще раз.
[04:07:41.120 --> 04:07:45.120]  У нас идея какая? Посмотреть, где DP-opt стал равен n, и от этих вершин запустится BFS-ом.
[04:07:46.120 --> 04:07:47.120]  Ну да.
[04:07:47.120 --> 04:07:53.120]  Нет, ну я согласен, что если мы докажем, что это произошло там либо на этом цикле, либо на этом пути до него, то в принципе да, это нам тоже хватит.
[04:07:53.120 --> 04:07:54.120]  Я согласен.
[04:07:55.120 --> 04:08:04.120]  Ну вот, только вот, кто сказал, что вот на этом вот все, действительно это тоже повыше, то, что мы знаем, что это было на этом цикле, то мы тоже знаем, что это было на этом цикле.
[04:08:04.120 --> 04:08:11.000]  но вот только вот кто-то только кто сказал что и вот на этом вот всем действительно это тоже
[04:08:11.000 --> 04:08:24.160]  произошло если даже спуститесь обратно куда-то не в этот цикл вы потом сможете дойти из той вершины
[04:08:24.160 --> 04:08:32.160]  в этот цикл кстати да сейчас не понял не в этом цикле он стал н в каком-то другом цикле
[04:08:32.160 --> 04:08:38.400]  в каком-то другом месте нет что значит можете обратно добраться до этого цикла
[04:08:38.400 --> 04:08:50.640]  но это вот так вот и почему это все произойдет и потом мы доказываем что вы а потом вы просто
[04:08:50.640 --> 04:08:55.640]  поэтому же пути возвращаетесь хорошо то есть вы хотите доказать хорошо выходить как что найдется
[04:08:55.640 --> 04:09:02.160]  вершина достижима из с молоды гиммина рассматриваем низко то дара да у которой лёб стал равен н из
[04:09:02.160 --> 04:09:09.600]  которых этот цикл достижим это вы прямо гарантируете это легко гарантировать почему потому что вот ваша
[04:09:09.600 --> 04:09:15.480]  ситуация там с двоим шагов давайте рассмотрим ее просто с точки зрения математики понятно же что
[04:09:15.480 --> 04:09:22.800]  понятно что у нас будет дп опт там больше и больше или равен и у всех этих вершин он будет таким
[04:09:22.800 --> 04:09:28.960]  да ну значит сколько-то шагов назад он был там на единицу меньше на два меньше на три меньше
[04:09:28.960 --> 04:09:43.160]  это кого у кого у этих вершин у каких-то вершин из которых достижим этот цикл так можно откатываться
[04:09:43.160 --> 04:09:51.520]  по одному шагу откатимся до n да откатимся до вершины который цикл достижим так всего
[04:09:51.520 --> 04:09:54.680]  а
[04:09:54.680 --> 04:10:08.600]  смотрите ну-ка давайте еще попробуем давайте сейчас еще раз вариант может нет знаете может
[04:10:08.600 --> 04:10:14.640]  сейчас как бы спокойно надавали хорошо ладно в таком виде утверждение сработало значит так
[04:10:14.640 --> 04:10:23.400]  чем попытались доказать да то есть мы пытаемся доказать не это вот значит мы пытаемся доказать
[04:10:23.400 --> 04:10:29.880]  более то есть мы пытаемся доказать теперь немножко другое все циклы значит зациклиться у нас не
[04:10:29.880 --> 04:10:40.080]  получилось но нас этой не интересует значит мы говорим все еще у нас тут n и мы говорим что значит
[04:10:40.080 --> 04:10:48.600]  хочется доказать следующее что если у нас была есть цикл отрицательного веса то значит то тогда
[04:10:48.600 --> 04:10:59.000]  значит существуют такие хотим доказать что существует такие вершина у и значит существует
[04:10:59.000 --> 04:11:13.760]  такая вершина у что значит во-первых dp значит opt от u равен n ладно не dp opt от lopt и из u
[04:11:13.760 --> 04:11:26.200]  достижимы но там вот эти вот v1 vk да заметим что в общем-то этого нам хватит на самом деле
[04:11:26.200 --> 04:11:31.760]  чтобы сказать что алгоритм правильно работает правда то есть то есть как бы не может быть до
[04:11:31.760 --> 04:11:41.160]  этих ничего не обновилось а вот из лоптов обновились окей так как же мы это будем доказывать
[04:11:41.160 --> 04:11:48.800]  доказательства звучит так заметим да давайте мысленно действительно да мысленно вместо n
[04:11:48.800 --> 04:11:58.840]  интерации добабахаем до 2 n-1 тогда заметим что для всех как мы уже раньше выяснили для всех
[04:11:58.840 --> 04:12:08.960]  этих вершин elopt за эти интерации уж точно поменяется вот теперь давайте рассмотрим что пусть он у
[04:12:08.960 --> 04:12:20.280]  вершины v1 значит соответственно значит у вершины l1 elopt оказался равен ну допустим там я не знаю
[04:12:20.280 --> 04:12:35.880]  n плюс d это плохая буква да n плюс x значит да это означает что была вершина у 1 у которой когда-то
[04:12:35.880 --> 04:12:46.640]  вот так бывал n плюс x минус 1 ну раз вот это произошло значит наверное и в какой-то вершины
[04:12:46.640 --> 04:12:54.360]  у 1 такое было правда ну просто в тот момент когда elopt становился n плюс x значит мы пришли
[04:12:54.360 --> 04:13:08.880]  а нет непонятно да непонятно у 1 elopt может быть нет скажем так он был в тот момент когда
[04:13:08.880 --> 04:13:15.000]  происходила релаксация он был меньше либо равен n плюс x минус 1 да но из этого не следует
[04:13:15.000 --> 04:13:24.920]  может он был меньше либо равно n минус 1 и на самом деле все плохо нет мы отрелаксировались
[04:13:24.920 --> 04:13:34.320]  из динамика n плюс x минус 1 но какой там elopt если вы берете по минимальному количеству ребер
[04:13:34.320 --> 04:13:47.240]  да аккуратное доказательство рассмотрим кратчайший путь и состоящий из не более чем n плюс x ребер
[04:13:47.240 --> 04:13:54.600]  да рассмотрим этот кратчай там какой-нибудь кратчайший путь или несколько кратчайших путей ну
[04:13:54.600 --> 04:14:00.680]  такие могут быть да тогда утверждение такого когда мы первый раз это получили тогда значит
[04:14:00.680 --> 04:14:06.080]  это предыдущая вершина из которой мы делали релаксацию у нее обязана было elopt тогда быть
[04:14:06.080 --> 04:14:13.640]  n плюс x минус 1 почему потому что если там было меньше то при том же самом расстоянии да да да
[04:14:13.640 --> 04:14:21.280]  окей то есть тогда получается существовала вершина у 1 значит с которой есть ребров в 1 у которой
[04:14:21.280 --> 04:14:32.520]  elopt был даже ровно l плюс x минус 1 так хорошо аналогичным образом тогда существует вершина у 2 из
[04:14:32.520 --> 04:14:41.800]  которой есть ребров у 1 где elopt n плюс x минус ой щас да так ну классно ну таки вот такой же цепочкой
[04:14:41.800 --> 04:14:47.400]  получается что существовала вершина для которой elopt бывал n из которых вот это все достижимо
[04:14:47.400 --> 04:14:52.880]  в 1 как следствие все остальное так что следовательно достаточна так что двойной
[04:14:52.880 --> 04:15:02.200]  террации можно не делать достаточно сделать n и этого хватит ну да так что вот ну там конечно
[04:15:02.200 --> 04:15:07.400]  возить тут еще 2 и минус одну итерацию бывает полезно делать если вам хочется еще и там
[04:15:07.400 --> 04:15:19.560]  попытаться восстановить цикл отрицательного веса да ну какой-нибудь там да вот ну и хорошо так
[04:15:19.560 --> 04:15:20.960]  что вот но ладно
