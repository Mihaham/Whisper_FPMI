[00:00.000 --> 00:19.320]  Окей, поехали. У нас сегодня простая тема, одновременно с этим важная. Так, лекция 3. Мы
[00:19.320 --> 00:32.240]  будем с вами говорить о поиске кратчайших путей сегодня. Кратчайшие пути. В общем-то,
[00:32.240 --> 00:37.520]  мы начали об этом говорить еще в прошлый раз, когда проходили БФС. Вот, но мы там так,
[00:37.520 --> 00:44.440]  тактично умолчали об этом. Точнее, сказали, что задача такая, но не стали как-то отдельно
[00:44.560 --> 01:09.040]  акцентировать. Определение. Тройка ВЕВ это взвешенный граф, если g равный ВЕ это граф,
[01:09.040 --> 01:21.800]  и ВВ это какая-то функция, действующая из E, какое-то k под множество r, может равное r.
[01:21.800 --> 01:37.240]  Собственно, будем так это определять. В частности, в 0kBFS, чему было равно k? Ну,
[01:37.240 --> 01:44.560]  только с нуля начинаем. Ну-ка, маленькая. Вот. Окей, то есть мы с вами имеем решать задачу,
[01:44.560 --> 01:49.480]  когда у нас такой вот конечномерный случай. Это очень грустно, давайте решать в общем случае.
[01:49.480 --> 01:54.040]  Собственно, сегодня реакция подфишена тому, чтобы в общем случае решать эту задачу,
[01:54.040 --> 02:12.360]  то есть поиск кратчайших путей. Давайте определение еще напишем. Пусть V1, Vn, это элементы
[02:12.360 --> 02:24.920]  множества вершин, тогда весом пути V1, Vn обозначим
[02:24.920 --> 02:48.880]  такую вот сумму весов. Ну, пример. Давайте это stt обозначим. Мы поставим веса какие-нибудь.
[02:48.880 --> 03:07.120]  7, 6. Тогда расстояние от вершины S до этой abc. Давайте в общем длину пути S, B, C, A. Это что
[03:07.120 --> 03:19.960]  такое? Это S, B, 2, ну плюс 3, плюс 7, то есть 12. Вот. Ну, очевидно, что от S до A есть другой
[03:19.960 --> 03:34.480]  путь, который короче вес 1, в общем-то, это ребро S, A. Определение. Функции dist от S до T
[03:34.480 --> 03:58.280]  определим величину. Минимум по... Такую вот величину интересную. То есть это минимум по всем
[03:58.280 --> 04:23.040]  возможным путям из S в T. Вот. Окей. Вообще-то мы готовы к тому, чтобы начинать. Первый алгоритм
[04:23.040 --> 04:36.560]  это алгоритм Dijkstra. По-моему, он нидерландский вроде как математик, Эдгард Дейкстра. Автор
[04:36.560 --> 04:51.840]  этого алгоритма. Как задача у нас стоит? W будет действовать из E в R+, то есть 0 и все положительные
[04:51.840 --> 05:10.520]  числа. Вот так вот запишем. 4+, не столько положительные, можно еще 0. Хотим для вершины
[05:10.520 --> 05:23.080]  S из V найти любой вершины T из W, от S до T. То есть мы ищем кратчайший путь из родной вершины
[05:23.080 --> 05:31.240]  до всех остальных. Ну, вроде применимость этого, плюс-минус, очевидно. Ну вот банально, вы идите в
[05:31.240 --> 05:35.360]  такси, вам нужно добраться там откуда-то до Фистеха, у вас есть грав-дорог, вы знаете,
[05:35.360 --> 05:41.600]  сколько по ним ехать, хотите добраться. В общем-то, как-то так. Ну, висает там, сколько вам времени
[05:41.600 --> 05:46.680]  потребуется, чтобы переехать из одного перекрестка на другой, допустим. Ну, там как-нибудь по-другому это
[05:46.680 --> 05:56.200]  вершины выделяются там. Конечно, там не Dijkstra внутри стоит, там немножко получше лекции на 5,
[05:56.200 --> 06:06.200]  ну, все равно. Ну, базовые идеи вот отсюда берутся. Так, вот, наверное, алгоритм сначала сформулируем.
[06:10.200 --> 06:21.200]  Как выстроен сам алгоритм? Шаг первый. Говорим, что давайте у нас будет массив DIST, обозначим,
[06:21.200 --> 06:37.920]  что давайте далее DIST от T, это будет DIST от S до T, такое у нас S зафиксировано. Очевидно,
[06:37.920 --> 06:43.440]  DIST от S равен нулю, но это вроде тривиальное замечание. Раз у вас веса не отрицательные,
[06:43.440 --> 07:03.120]  то вы не можете получить минус. Будем поддерживать множество L. Такое, что для любой вершины V из L
[07:03.120 --> 07:16.560]  известна DIST от V, практическое значение, что мы знаем. И последнее обозначение,
[07:16.560 --> 07:37.960]  это что D от V – текущая оценка вверху на DIST от V. То есть мы будем получать какие-то оценки
[07:37.960 --> 07:41.120]  на DIST от V и в какой-то момент говорить, что вот мы получили оптимальную оценку,
[07:41.120 --> 08:06.240]  что она равна кратчайшему расстоянию. Вот. Изначально вот так вот. Вот наш старт алгоритма,
[08:06.240 --> 08:15.280]  наш обозначение, и мы поддерживаем множество L. Очевидно, что L – это итог старта вершины S.
[08:15.280 --> 08:24.720]  Я буду рисовать на этом примере потом. Что у нас происходит? Мы рассматриваем два подножия
[08:24.720 --> 08:32.080]  вершин. То, что нам известно, и то, что неизвестно. Так называемый разрез проводим в графе. Дальше мы
[08:32.080 --> 08:40.640]  смотрим ребро минимального веса, пересекающий разрез. Ребра пересекающие разрез TSA и SB. Графически
[08:40.640 --> 08:45.280]  на это почему они пересекают? Фактически, потому что один конец лежит в одной стороне, другой в
[08:45.280 --> 09:13.960]  другой. Так, шаг два. Пусть V. Так, не пусть. Давайте по-другому напишем, что мы... Давайте
[09:13.960 --> 09:32.920]  ведем еще процедуру релаксации так называемого. Релаксация. В чем она заключается? В том, что у вас D от V.
[09:32.920 --> 09:44.880]  То есть, смотрите, вы берете вершину S из текущего множества и пытаетесь оптимизировать ответ для всех
[09:44.880 --> 10:03.840]  ее соседей. То есть, для A и для B. Дист от S плюс W от S до W. Логично здесь полагать, что если ребра нет, то вес
[10:03.840 --> 10:21.200]  бесконечность, просто-напросто. Вот. То есть, давайте выписывать здесь массив D и DIST, ну и для вершинок
[10:21.200 --> 10:37.440]  соответственно. S, A, B, C, T. Это массив D, это массив DIST. Ну, на первом шаге просто будет равно. Потом будет
[10:37.440 --> 10:48.560]  не на равно, да. Так, на первом шаге это мы знаем, что это нули. Дальше что происходит? Ну, здесь D
[10:48.680 --> 10:58.960]  бесконечность. Теперь, ну здесь DIST тоже бесконечность, очевидно. Дальше мы делаем
[10:58.960 --> 11:04.880]  из S. Смотрим все ребра пересекающие разрез, T, S, A, B. Пытаемся обновить ответ до вершины B.
[11:04.880 --> 11:16.360]  Ну, получаем, что ответ A это 1. Ответ до B это 2.
[11:16.360 --> 11:37.520]  Где W? Это сосед S. Ну, просто, чтобы было проще жить. Шаг третий, ну третий-четвёртые шаги не будут
[11:37.520 --> 11:58.760]  повторяться, пока S не опустеет. Ну, что L точнее. А берем вершину с минимальным DATV такую, что W лежит V без L.
[11:58.760 --> 12:06.360]  То есть мы берем вершину из правой части минимальную, которая DATV минимальный.
[12:06.360 --> 12:16.400]  Кто у нас лежит в правой части? A, B, C, T. Вот эти 4 штуки. OK, D минимальная до вершины A.
[12:16.400 --> 12:33.880]  Пусть это U. Говорим, что DIST от U равно D от U. То есть утверждается тогда, что вот на этом этапе
[12:33.880 --> 12:55.640]  текущая оценка D это оптимальный ответ. Это будем доказывать еще. Шаг четыре. Релаксация из U.
[12:55.640 --> 13:09.280]  Давайте здесь напишем, что S равно S в объединении с U. Потому что я добавляю просто вершину.
[13:09.280 --> 13:29.040]  OK, то есть я закинул вершину L, а теперь у меня разрез выглядит по-другому.
[13:29.040 --> 13:41.000]  И у меня ребра пересекают разрез. Раз, два. Релаксация из вершины A. Это я пытаюсь
[13:41.000 --> 13:49.240]  обновить расстояние до единицы. Плюс единицы это много. Это два, там будет ноль.
[13:49.240 --> 14:14.120]  То есть что я делаю? Смотрю на CD A, CD A это S. Говорю, что первый вариант это
[14:14.120 --> 14:23.040]  какой-то ноль. Второй вариант это один. Это DIST от A. Плюс W от AS. Плюс один. То есть два.
[14:23.040 --> 14:31.480]  Очевидно, два больше ноля. Здесь не обновляем. Дальше кто сосед A? Это C. Получается до нее
[14:31.480 --> 14:40.760]  текущая оценка D это 8. Потому что у нас есть DIST от A плюс ребро A-C. Поэтому оценка на C у нас
[14:40.760 --> 14:56.480]  стала равной 8. Давайте напишем, что это L. Дальше следующий шаг. Выбираем минимальную вершинку.
[14:56.480 --> 15:04.000]  Что это будет? Это будет двойка. Вершинка B, потому что до нее оценка минимальности,
[15:04.000 --> 15:21.480]  что не вылежат. Вот понятно почему. Прием. Отлично. И релаксируем ответы с B до остальных.
[15:21.480 --> 15:30.000]  Кто у B соседей? Это S и C. Не получится оптимизировать. А вот до C получим, что это 2 плюс 3.
[15:30.000 --> 15:41.960]  В самом деле оценка 5. Окей, тогда остается C добавить. Здесь расстояние 5. И все,
[15:41.960 --> 15:49.200]  вроде понятно, что дальше происходит. Потому что когда добавить это,
[15:49.200 --> 15:56.880]  вот автоматически добавится оценка на T. И все. Давайте сначала время работы подумаем.
[15:56.880 --> 16:10.280]  Сколько это работает вообще. Для этого посмотрим следующее, что я хочу. Я хочу сначала посмотреть,
[16:10.280 --> 16:14.560]  сколько у меня операций поиска вот такой вот вершинки минимальной.
[16:14.560 --> 16:34.720]  Ну да, потому что каждую вершину таскиваем. Извлечение вершины минимальным D от V от
[16:34.720 --> 16:43.000]  модули V. Это первая составляющая. Вторая составляющая – это релаксация. Но я же хочу
[16:43.000 --> 16:52.480]  найти минимальную вершинку, до которой D от V минимальный. Ну зачем, у вас же есть умные контейнеры,
[16:52.480 --> 17:01.160]  мы с семестром не зря страдали прошлый. Вообще да, сначала будем искать линейно,
[17:01.160 --> 17:10.280]  потом поймем, что можно лучше. Второе – это релаксация, то есть изменение D от V. Что это такое
[17:10.880 --> 17:18.840]  по сути. По сути это дикрийские операции, уменьшить значение по ключу. Это релаксация.
[17:18.840 --> 17:30.480]  Сколько суммарно раз будет вызвано вот эта вот штука. Вообще два умножения числа ребер.
[17:30.480 --> 17:35.760]  Ну да, потому что у вас каждое ребро рассматривается не более двух раз, из одной вершины и из второй.
[17:35.760 --> 17:51.480]  То есть мы с вами знаем, сколько это делается. Осталось оценить, сколько мы хотим по времени,
[17:51.480 --> 17:59.240]  чтобы делась каждая операция. Что это такое. По сути мы сказали, что это экстракт. Почему?
[17:59.240 --> 18:03.440]  Потому что вы удаляете из множества непосещенных вершин. Вот так вот можно сказать.
[18:03.440 --> 18:24.760]  А это операция дикрийские. Кто умеет такие штуки делать? Ну да. Поэтому первый вариант на массиве.
[18:29.240 --> 18:36.800]  Что мы получаем. Что у нас в излечении вершины золото V работает. Потому что нам нужно минимум искать.
[18:36.800 --> 18:40.680]  С другой стороны у нас релаксация всего золото единицы каждый раз будет делаться.
[18:40.680 --> 18:43.720]  Потому что это просто изменение по индексу.
[18:43.720 --> 18:57.160]  Так вот напишем. Что бы было нагляднее.
[18:57.160 --> 19:19.920]  Почему я здесь не пишу плюс е. Ну да. У нас е уже входит в квадрат.
[19:19.920 --> 19:38.320]  На бинарной куче. Делаем модуль V раз. Это излечение вершины с минимальным D.
[19:38.320 --> 19:45.040]  Вот модуль V. Ой, не модуль V, локвы здесь будут.
[19:45.040 --> 19:57.560]  Плюс е тоже на модуль V.
[20:08.920 --> 20:19.520]  Вот. Ну это уже лучше, чем это, да? А вот нет. На полных графах это хуже, чем это.
[20:19.520 --> 20:33.840]  У вас на полном графе е порядка V квадрат. Вы для каждой вершинки е с каждой соединяете.
[20:33.840 --> 20:43.360]  Получается V на V-1 пополам. Ну все. Тут, конечно, эксперты скажут, что это все полная лажа.
[20:43.360 --> 20:54.040]  Есть еще круче штука. Все бы иначе куча. Но мы о ней тактично умолчим. Я всего лишь скажу, что здесь будет стоять от единицы, а здесь будет локвы стоять.
[20:54.040 --> 21:03.200]  Все бы иначе куча. Поэтому там будет е плюс V локвы. Ну понятно дело, что в реальной жизни, не в реальной жизни, а в коде вы будете скорее всего использовать
[21:03.200 --> 21:15.720]  стэфсет просто. И брать, типа менять значение, это просто удалить и вставить новое. Вот. Как-то так вы будете это делать.
[21:15.720 --> 21:25.280]  А теперь надо доказывать корректность алгоритма до экстра. Да? В чем стоит корректность? В том, что по сути, я имею право держать вот это вот.
[21:25.280 --> 21:26.560]  Это единственное, что мне надо доказывать.
[21:36.080 --> 21:39.680]  Алгоритм до экстры.
[21:42.040 --> 21:42.600]  Корректирую.
[21:46.320 --> 21:49.960]  Доказательства. Индукция по размеру L.
[21:55.280 --> 22:05.360]  Ну почему это так делать? Потому что мы, судя по сути, добавляем вершинку V, каждый раз, когда мы до нее говорим оптимальный дист.
[22:05.360 --> 22:08.320]  Поэтому это звучит адекватно.
[22:08.320 --> 22:11.120]  База индукции.
[22:11.120 --> 22:30.440]  База индукции, когда у вас фальят одна вершина, это стартовая. Ну для нее ответ, очевидно, верен.
[22:30.440 --> 22:36.160]  Очевидно, верно.
[22:36.160 --> 22:42.000]  Потому что вы не можете получить расстояние меньше нуля просто-напросто.
[22:42.000 --> 22:44.720]  Теперь переход.
[22:44.720 --> 22:52.760]  Как будем переход оформлять?
[22:52.760 --> 22:57.720]  У меня уже доказывается, что D статура равно D от U. Да?
[22:57.720 --> 23:23.240]  Пусть U такая вершина из V без L, что берату минимален.
[23:23.240 --> 23:36.920]  Я хочу доказать, хотим D от U равно D стату.
[23:36.920 --> 23:48.480]  Ну давайте докажем, что, таким образом, надпротивим. Представим, что это неправда.
[23:48.480 --> 24:03.120]  То есть я хочу сказать, что D от U строго больше, чем D от U.
[24:03.120 --> 24:07.360]  Я хочу из этого ввести противоречие.
[24:07.360 --> 24:12.120]  Как оно здесь выводится?
[24:12.120 --> 24:26.800]  Рассмотрим кричащий путь из S.D.U.
[24:42.800 --> 24:46.800]  Случай первый.
[24:46.800 --> 25:07.400]  U это единственная вершина на кратчайшем пути, что не лежит L.
[25:08.280 --> 25:12.080]  Что это значит? Это значит, что у вас путь как-то так устроен.
[25:16.080 --> 25:20.080]  То есть он как-то ходит по L, добрался до вершины V и в одно ребро прыгнул в V.
[25:20.080 --> 25:23.080]  Как мы могли получить D от U?
[25:23.080 --> 25:29.080]  D от U мы могли получить, просто пройдя как-то по L, а потом срелаксировав вдоль одного ребра V.
[25:29.080 --> 25:32.080]  При этом в этом случае D от U минимально.
[25:32.080 --> 25:34.080]  Но почему оно равно D?
[25:34.760 --> 25:38.760]  Если бы существовал путь лучше, то он проходил как-то вот так вот.
[25:38.760 --> 25:48.760]  Но тогда у нас получилось бы, что мы все равно рассмотрели бы этот путь рано или поздно.
[25:48.760 --> 25:52.760]  Почему? Потому что если этот путь кратчайший, то оно все равно устроено абсолютно так же.
[25:52.760 --> 25:59.760]  Рассуждение здесь такое, что рассмотрим все такие пути, которые целиком лежат в L, потом в U.
[26:00.440 --> 26:06.440]  Очевидно, что один из них кратчайший, если мы предполагаем, что кратчайший устроен вот так вот.
[26:06.440 --> 26:09.440]  Но тогда мы в любом случае его бы нашли.
[26:09.440 --> 26:11.440]  Все, ну так вот делается.
[26:11.440 --> 26:13.440]  Здесь даже противоречие надо приводить.
[26:16.440 --> 26:26.440]  Все такие пути наш алгоритм рассмотрел бы.
[26:30.440 --> 26:42.440]  И нашел бы D от U, просто-напросто.
[26:44.440 --> 26:50.440]  Потому что если у вас кратчайший путь устроен именно так, что он целиком лежит в L, потом одним ребром прыгает в правую часть.
[26:50.440 --> 26:54.440]  То очевидно, мы бы рассмотрели бы уже все такие пути к этому моменту.
[26:55.120 --> 27:01.120]  И у нас D от U равен D от U просто потому, что D от U это минимальная оценка на все такие штуки.
[27:01.120 --> 27:07.120]  Вот второй случай, он, казалось бы, интеллектуальный, но вроде проще гораздо анализируется.
[27:07.800 --> 27:09.800]  Случай два.
[27:09.800 --> 27:31.800]  Это кратчайший путь от S до U содержит вершины из V без L.
[27:32.480 --> 28:00.480]  Хорошо, ну тогда пусть ребро A-B последнее на кратчайшем пути, что A лежит в L, B лежит V без L.
[28:01.160 --> 28:19.160]  Ну, короче говоря, хочется доказать, что на самом деле мы бы рассмотрели бы вершину B на этом шаге просто.
[28:19.160 --> 28:23.160]  Потому что вот этот кусок пути, его вес хотя бы ноль.
[28:23.160 --> 28:27.160]  То есть нам было бы не принципиально какую вершинку рассматривать на этом шаге.
[28:27.160 --> 28:30.160]  Как-то будем доказывать.
[28:30.840 --> 28:32.840]  Давайте рассмотрим D от U.
[28:32.840 --> 28:48.840]  Все-таки я соглашусь с тем, что это D от B плюс W от U.
[28:48.840 --> 28:50.840]  Давайте D от A.
[28:51.520 --> 29:01.520]  Ну, тогда я знаю, что D от A это дистота по предложению индукции.
[29:10.520 --> 29:12.520]  Вот так вот выпишем теперь.
[29:12.520 --> 29:14.520]  Одну ребро откусим.
[29:14.520 --> 29:16.520]  Хорошо.
[29:17.200 --> 29:19.200]  Что теперь я хочу сказать?
[29:19.200 --> 29:33.200]  Что это будто бы больше либо равно, чем D от A плюс W от A-B, потому что здесь веса не отрицательные.
[29:34.200 --> 29:36.200]  Что равно D от B.
[29:41.200 --> 29:45.200]  То есть я получил, что D от U больше чем D от B.
[29:47.200 --> 29:53.200]  Но из этого следует, что просто-напросто U не минимальный дист, не минимальная D точнее.
[29:55.200 --> 30:03.200]  U не минимальный дист, не минимальная D.
[30:06.200 --> 30:11.200]  То есть я должен был бы брать либо B, либо без разницы брать либо B, либо U на этом шаге.
[30:11.880 --> 30:13.880]  То есть я предполагаю, что U это минимум.
[30:14.880 --> 30:16.880]  То есть я предполагаю, что вот это вот верно.
[30:16.880 --> 30:18.880]  D от U больше, чем D от U.
[30:19.880 --> 30:22.880]  Но я получил D от U больше, чем D от B.
[30:23.880 --> 30:25.880]  Но...
[30:25.880 --> 30:27.880]  Как бы...
[30:28.880 --> 30:30.880]  Ну, короче, можно строго пить при течении.
[30:30.880 --> 30:32.880]  Но это вроде то же самое, что можно получить.
[30:34.880 --> 30:36.880]  И вроде это хватает для доказательства, да?
[30:37.880 --> 30:39.880]  Ну да, все.
[30:40.560 --> 30:42.560]  Вопросы?
[30:46.560 --> 30:48.560]  Ну окей.
[30:48.560 --> 30:50.560]  Ну мы рассматриваем, мы хотим от противного.
[30:50.560 --> 30:52.560]  То есть мы хотим показать, что
[30:53.560 --> 30:55.560]  либо D от U больше D от U,
[30:56.560 --> 30:58.560]  либо U было не оптимально брать на этом шаге просто-напросто.
[31:00.560 --> 31:03.560]  Первый случай, это у нас U единственная вершина на крещающем пути.
[31:03.560 --> 31:06.560]  То есть у нас выглядит как-то вот так вот это все.
[31:07.240 --> 31:09.240]  Это вершинка V,
[31:09.240 --> 31:11.240]  дальше вершинка U прыгаем по одному ребру.
[31:12.240 --> 31:14.240]  Это первый случай.
[31:16.240 --> 31:18.240]  В первом случае, что мы сказали?
[31:18.240 --> 31:20.240]  Мы сказали, что раз мы рассмотрели все вершины из L,
[31:20.240 --> 31:22.240]  мы знаем ответы.
[31:22.240 --> 31:24.240]  То...
[31:24.240 --> 31:26.240]  И U это такая вершина с минимальным D.
[31:26.240 --> 31:28.240]  Да?
[31:28.240 --> 31:30.240]  То... Ну...
[31:30.240 --> 31:32.240]  Скажем так, что...
[31:32.240 --> 31:34.240]  Что?
[31:34.240 --> 31:36.240]  Ну да, просто если я возьму какой-то
[31:36.920 --> 31:38.920]  другую вершинку,
[31:38.920 --> 31:40.920]  то я построю потом до U,
[31:40.920 --> 31:42.920]  и этот путь такой вот извилистый достаточно.
[31:42.920 --> 31:44.920]  Вот, но у меня есть путь лучше,
[31:44.920 --> 31:46.920]  очевидно, потому что у меня просто здесь
[31:46.920 --> 31:48.920]  не будет этого куска.
[31:48.920 --> 31:50.920]  Вот, и все такие пути просто рассмотрел
[31:50.920 --> 31:52.920]  даже на первом шаге, на самом деле,
[31:52.920 --> 31:54.920]  которые полностью в L лежат и прыгают одним ребром.
[31:54.920 --> 31:56.920]  Вот, поэтому если я предполагал,
[31:56.920 --> 31:58.920]  что крещающий путь устроен именно так,
[31:58.920 --> 32:00.920]  то тогда я просто нашел бы
[32:00.920 --> 32:02.920]  явно этот минимальный путь
[32:02.920 --> 32:04.920]  просто по определению D.
[32:05.600 --> 32:07.600]  Ну и все, поэтому D от U равно Dist от U.
[32:07.600 --> 32:09.600]  Второй случай, это у меня есть
[32:09.600 --> 32:11.600]  какое-то ребро A-B-A.
[32:11.600 --> 32:13.600]  Ну и здесь есть какое-то продолжение.
[32:13.600 --> 32:15.600]  То я просто расписываю D от U по определению.
[32:15.600 --> 32:17.600]  Это D от A
[32:17.600 --> 32:19.600]  плюс W от A до U.
[32:19.600 --> 32:21.600]  Вес пути.
[32:21.600 --> 32:23.600]  Но это крещайший путь, естественно, предполагается.
[32:23.600 --> 32:25.600]  Дальше.
[32:25.600 --> 32:27.600]  Раз это крещайший путь, то что у меня первое
[32:27.600 --> 32:29.600]  известно по индукции, что это D от A
[32:29.600 --> 32:31.600]  это Dist от A, потому что L лежат в L.
[32:31.600 --> 32:33.600]  Ну и плюс разбиваю
[32:33.600 --> 32:35.600]  это крещайший путь на два куска.
[32:35.600 --> 32:37.600]  Это вес ребра плюс вес UB.
[32:37.600 --> 32:39.600]  Ну, БУ точнее.
[32:39.600 --> 32:41.600]  Ну, так
[32:41.600 --> 32:43.600]  эта штука больше ребра на нуля,
[32:43.600 --> 32:45.600]  значит Dist от A плюс W
[32:45.600 --> 32:47.600]  от A-B равно D от B.
[32:47.600 --> 32:49.600]  Ну все.
[32:49.600 --> 32:51.600]  Ну дальше
[32:51.600 --> 32:53.600]  я получаю, что если бы
[32:53.600 --> 32:55.600]  D от B строго меньше, чем D от U,
[32:55.600 --> 32:57.600]  то просто бы U не брал. Если равенство,
[32:57.600 --> 32:59.600]  то тогда не принципиально.
[32:59.600 --> 33:01.600]  И тогда я бы рассмотрел обязательно
[33:01.600 --> 33:03.600]  даже вот так вот, потому что здесь только одно
[33:03.600 --> 33:05.600]  ребро пересекающее разрез. Здесь какой-то путь странный.
[33:05.600 --> 33:07.600]  Еще есть.
[33:07.600 --> 33:09.600]  Так, все, надо ускоряться.
[33:09.600 --> 33:11.600]  Алгоритм Форда Белмана.
[33:25.600 --> 33:27.600]  W будет действовать
[33:27.600 --> 33:29.600]  из E.
[33:29.600 --> 33:31.600]  R просто уже.
[33:31.600 --> 33:33.600]  То есть мы себе разрешаем
[33:33.600 --> 33:35.600]  ребра от писательного веса.
[33:35.600 --> 33:37.600]  Дальше, что мы хотим?
[33:37.600 --> 33:39.600]  Для любой вершины
[33:39.600 --> 33:41.600]  W найти
[33:43.600 --> 33:45.600]  Dist
[33:45.600 --> 33:47.600]  от S до W.
[33:49.600 --> 33:51.600]  И смотрите внимательно, что здесь нужно сказать.
[33:51.600 --> 33:53.600]  Здесь есть плохая ситуация.
[33:53.600 --> 33:55.600]  Такой вот классный граф.
[33:57.600 --> 33:59.600]  Вопрос, чему равно
[33:59.600 --> 34:01.600]  Dist от S?
[34:03.600 --> 34:05.600]  Почему это?
[34:05.600 --> 34:07.600]  Минус здесь, конечно,
[34:07.600 --> 34:09.600]  сколько угодно ходить по кругу.
[34:09.600 --> 34:11.600]  Классно, да?
[34:11.600 --> 34:13.600]  Круче граф.
[34:17.600 --> 34:19.600]  Поэтому давайте будем считать
[34:19.600 --> 34:21.600]  следующее, что у нас нет
[34:21.600 --> 34:23.600]  циклов отрицательного веса,
[34:23.600 --> 34:25.600]  чтобы Dist от S
[34:25.600 --> 34:27.600]  для произвольной вершины
[34:27.600 --> 34:29.600]  поднялась корректно.
[34:29.600 --> 34:31.600]  Что дается отрицательными циклами,
[34:31.600 --> 34:33.600]  видимо, останется на семинар,
[34:33.600 --> 34:35.600]  потому что не успеем сегодня.
[34:35.600 --> 34:37.600]  В графе
[34:39.600 --> 34:41.600]  нет циклов
[34:43.600 --> 34:45.600]  отрицательного веса.
[34:47.600 --> 34:49.600]  То есть нет такого цикла,
[34:49.600 --> 34:51.600]  что суммарно его вес
[34:51.600 --> 34:53.600]  строго меньше нуля.
[34:53.600 --> 34:55.600]  Нулевые циклы нормально,
[34:55.600 --> 34:57.600]  они не могут бесконечно улучшать ответ.
[34:57.600 --> 34:59.600]  Отрицательные могут.
[35:01.600 --> 35:03.600]  Тогда что мы делаем?
[35:03.600 --> 35:05.600]  Здесь будет динамика идти.
[35:07.600 --> 35:09.600]  Давайте
[35:11.600 --> 35:13.600]  такую динамику введем.
[35:13.600 --> 35:15.600]  Дп от ВК
[35:19.600 --> 35:21.600]  это будет
[35:25.600 --> 35:27.600]  минимальное расстояние
[35:31.600 --> 35:33.600]  от С
[35:33.600 --> 35:35.600]  до В
[35:37.600 --> 35:39.600]  вдоль пути длины К.
[35:43.600 --> 35:45.600]  Можно и меньше,
[35:45.600 --> 35:47.600]  или ровно К.
[35:47.600 --> 35:49.600]  Посмотрим, может подкорректируем чутка.
[35:49.600 --> 35:51.600]  Чему равна база?
[35:51.600 --> 35:53.600]  Что нам известно?
[35:55.600 --> 35:57.600]  Очевидно,
[35:57.600 --> 35:59.600]  что Dp от С
[35:59.600 --> 36:01.600]  от нуля равно нулю.
[36:03.600 --> 36:05.600]  Будет длина 0,
[36:05.600 --> 36:07.600]  это классный путь.
[36:07.600 --> 36:09.600]  Думаю, вы с этим ознакомились
[36:09.600 --> 36:11.600]  уже с помощью контеста.
[36:13.600 --> 36:15.600]  Все остальные равны бесконечности.
[36:19.600 --> 36:21.600]  Как можно пересчитывать?
[36:21.600 --> 36:23.600]  Пересчитывать будем
[36:23.600 --> 36:25.600]  увеличением ПК.
[36:25.600 --> 36:27.600]  Просто-напросто.
[36:27.600 --> 36:29.600]  Какой путь максимальной длины
[36:29.600 --> 36:31.600]  может быть?
[36:31.600 --> 36:33.600]  В-1
[36:33.600 --> 36:35.600]  В-2
[36:35.600 --> 36:37.600]  В-3
[36:37.600 --> 36:39.600]  В-4
[36:39.600 --> 36:41.600]  В-5
[36:41.600 --> 36:43.600]  В-6
[36:43.600 --> 36:45.600]  В-7
[36:45.600 --> 36:47.600]  В-8
[36:47.600 --> 36:49.600]  В-9
[36:49.600 --> 36:51.600]  В-10
[36:51.600 --> 36:53.600]  В-11
[36:53.600 --> 36:55.600]  В-12
[36:55.600 --> 36:57.600]  В-13
[36:57.600 --> 36:59.600]  В-14
[36:59.600 --> 37:01.600]  В-14
[37:01.600 --> 37:03.600]  В-14
[37:03.600 --> 37:05.600]  В-14
[37:05.600 --> 37:07.600]  В-14
[37:07.600 --> 37:09.600]  В-14
[37:09.600 --> 37:11.600]  OK
[37:15.600 --> 37:17.600]  Ну что можно сказать?
[37:17.600 --> 37:19.600]  Как я могу пересчитать для произвольного казана
[37:19.600 --> 37:21.600]  k-1?
[37:21.600 --> 37:23.600]  Просто приткнись по рёбрам,
[37:23.600 --> 37:25.600]  расслабляй.
[37:25.600 --> 37:52.600]  Что? Нет. Какой В? Какой К? Нет. Зачем? Вдоль пути длины К. Длина реберная имеется в виду. Число ребер на пути.
[37:52.600 --> 38:22.520]  Ну тогда просто dp от V кt мин равно dp от U к-1 плюс w. Вот чего до чего от У.
[38:22.520 --> 38:48.160]  Dp посчитано. Держит ответ. Чему равен dp от V? Вот я сдаваю. Это мин пока.
[38:48.160 --> 39:17.520]  Вот dp от V кt. Сколько это работает? В на Е. Так, здесь может быть не очень видно. Давайте произнесу.
[39:17.520 --> 39:30.520]  Это минимум по всем K от 1 до mw-1. Оно здесь. Давайте вот так напишем. Строго меньше чем В. Потому что у нас mw-1 тоже должно быть зацеплено. Ну или меньше либо равно надо было писать.
[39:30.520 --> 39:39.520]  Вот dp от V к. Ну все. Потому что мы не знаем какой длина оптимальный путь.
[39:39.520 --> 39:53.520]  Ну тогда не нужно брать минимум пока. У нас путь считается длиной меньше чем 1. Ну мы накатываем.
[40:09.520 --> 40:32.520]  Ну тогда мы должны инициализировать, что dp от V к равно dp от V к-1. Да. То есть если вы сюда пишете строку dp от V к перед пересчетом равно dp от V к-1, тогда вы действительно учитываете длины меньше либо равные K.
[40:32.520 --> 40:48.520]  Ну тогда у вас будет ответ просто. Это будет dp от V к модуле V к-1. Вот так вот. У корректности вроде плюс-минус трибиально здесь. Потому что динамика.
[40:48.520 --> 41:06.520]  Время. К чему равна память?
[41:06.520 --> 41:18.520]  Да. Заметим, что мы по сути используем только пересчет предыдущий. Тут можно вспомнить матричное dp, где мы только использовали предыдущий слой для пересчета. Бла-бла-бла. Давайте без этого.
[41:18.520 --> 41:31.520]  Вот. Потому что здесь все-таки это не нужно. И по сути нам нужно только два последних слоя. То есть мы можем хранить dp в 0 и dp в 1. И здесь брать K%2 просто-напросто. Их пересчитывать так.
[41:31.520 --> 41:45.520]  То есть мы можем хранить только два последних слоя. Это значит, что нам достаточно от V вообще памяти на самом деле.
[41:45.520 --> 41:52.520]  Окей. Давайте последний алгоритм сегодня. Так, алгоритм.
[41:52.520 --> 42:09.520]  Ой, да. Совсем плохо получилось. Уборшило. Нормально. Успеваем по времени. В чем суть алгоритма?
[42:09.520 --> 42:26.520]  W также действует из EWR. Нет циклов отрицательного веса также.
[42:26.520 --> 42:42.520]  Ну, вот так вот. Здесь будет проще жить, что их нет. И что еще? Хотим для любых VU-SV дист от V до U.
[42:42.520 --> 43:10.520]  Хотим между всеми парами почти отключать расстояние. Так называемая задача APSP. All payers shortest paths.
[43:12.520 --> 43:30.520]  Будем действовать динамикой снова. Такая динамика трехмерная будет. Dp от WK. Что это такое?
[43:30.520 --> 43:58.520]  Это дист от U до V, если оставить в графе вершины U, V и с номерами меньше либо равными K.
[44:00.520 --> 44:11.520]  У нас вершины как-то продумированы от 1 до V. Вот. То есть у нас номерация вершин.
[44:11.520 --> 44:31.520]  Вот так вот. Надо написать код пересчет, наверное. Проще всего пересчитывать по K сначала.
[44:31.520 --> 44:41.520]  А, база не обозначена. Ладно, сейчас я допишу эту строку. K меньше либо равно, чем модуль V.
[44:41.520 --> 44:50.520]  Но здесь сказано, смотрите, для 1 индексации вершин. Значит там надо от 0 до меньше модуль V будет писать.
[44:50.520 --> 45:00.520]  Это я так и напишу. Не, мне базу будет тогда неудобно задавать. Какая база у нас у динамики?
[45:00.520 --> 45:19.520]  Ну да, если нет петель. Давайте считать, что нет петель. Если есть петли, то понятно, как считать ответ.
[45:19.520 --> 45:29.520]  Ну да, да. Не, если это специальная петля, то понятно, как делать. У вас есть циклы от счетного веса, у вас таких нет.
[45:29.520 --> 45:52.520]  Ну да. Поэтому мы считаем, что dp от u0 равна 0. Но это не вся база еще есть. Ну вообще подразумевается, что здесь вы можете считать простые пути.
[45:52.520 --> 46:02.520]  То есть вы можете сохранять предка, откуда вы срелоксировали ответ. Вы типа не можете ходить обратно. Можно, например, такое ограничение сделать.
[46:02.520 --> 46:15.520]  Нет, тогда у вас циклы от счетного веса получается. А мы такого не допускаем. У нас есть еще ребра в графе.
[46:15.520 --> 46:25.520]  Видите, что мы здесь вершины u и v берем и ставим u и v равной k. Но у и v это всегда есть. Поэтому есть еще база такая вот.
[46:25.520 --> 46:48.520]  Если угол из ребр бесконечности иначе. Ну или определить, что вес ребра бесконечности, если ребра нет и все. И победа.
[46:48.520 --> 47:14.520]  Теперь к пересчету. Дальше for u, v. Такие три классных цикла.
[47:14.520 --> 47:33.520]  Пересчитываем ответ. Что такое это будет? dp, u, v, k. Это будет min равно.
[47:33.520 --> 47:47.520]  Давайте подумаем, чему это не равно. Какие у нас пути могут быть? У v. Вот был какой-то путь оттуда v.
[47:47.520 --> 47:57.520]  Что мы сделали, когда мы здесь написали k? Мы себе открыли вершину k, просто на самом деле. Видите, у нас здесь были номера меньше и равные k, минус 1 на прошлой итерации.
[47:57.520 --> 48:08.520]  Теперь номера меньше либо равные k. Поэтому мы себе открыли вершину k. Куда следующий у нас кратчайший путь может теперь быть вот таким вот.
[48:08.520 --> 48:21.520]  Чему равен вес вот этого? Оптимально вот эта штука. 23 измерения в dp.
[48:21.520 --> 48:39.520]  Это dp из вершины u до вершины с номером k. Здесь k, минус 1. Потому что у нас здесь все меньше чем k, минус 1 номера.
[48:39.520 --> 48:51.520]  Ну и здесь будет то же самое. Из k до v с номерами, не превосходящими k, минус 1.
[48:51.520 --> 49:12.520]  Ну и здесь мы говорим, естественно, что здесь еще можно с uv k-1 просто сравнить. Ну или сказать, что dp uv k изначально равно dp uv k-1, дальше форум перебирать.
[49:12.520 --> 49:25.520]  Можно так? Нет. k это номера вершин. То есть мы выпускаем все вершины с номером не больше чем k.
[49:25.520 --> 49:35.520]  Почему? Поч, посмотрели. Вот здесь вот мы посмотрели все вершины. Мы смотрели здесь все пары вершин вообще.
[49:42.520 --> 49:54.520]  Вершины uv содержатся в пути вне зависимости от номера.
[49:54.520 --> 50:03.520]  А так мы смотрели и k оставляли? Да. А что же вы говорите со мной? Ув с номерами меньше либо равно k.
[50:03.520 --> 50:20.520]  И с номерами меньше либо равно k. Все? Ну это надо осознать. С этим надо прожить. Ну экзамен будет, там осознай.
[50:20.520 --> 50:31.520]  Все. Ну ответ, я думаю, понятно где лежит. Это просто выставлять k равное модулю v.
[50:35.520 --> 50:44.520]  Кто не верит, может закодить и загнать в контест. Оно сработает. Что?
[50:45.520 --> 50:49.520]  Время.
[50:53.520 --> 51:02.520]  Причем здесь очень маленькая константа на самом деле будет. Потому что у вас здесь нет нетривиальных операций.
[51:02.520 --> 51:12.520]  Более того, для эффективности можно попробовать как-то переставлять индексы. То есть тут не uvk, а какой-нибудь kuv или что-нибудь еще.
[51:12.520 --> 51:17.520]  Может это вам даст больше эффективность за счет всяких физических особенностей.
[51:17.520 --> 51:25.520]  Окей, поуду памяти. Идея абсолютно та же. Для пересчета катовых слов мы используем только минус первый.
[51:25.520 --> 51:29.520]  Поэтому можно от v квадрата ложиться.
[51:34.520 --> 51:39.520]  Да, наверное лучше было k в первое измерение поставить, чтобы это было нагляднее.
[51:39.520 --> 51:46.520]  Не срослось. Напишите с k в первом измерении сами. Упражнение.
[51:47.520 --> 51:50.520]  Так, нам остается 5 минут.
[51:50.520 --> 51:58.520]  Давайте, наверное, быстренько скажу, что с социальным циклами делать. Без доказательств.
[52:01.520 --> 52:06.520]  Как вы его нашли? Нюанс в этом. Вы их не умеете искать пока что.
[52:06.520 --> 52:12.520]  Ну короче говоря, почему... Нет.
[52:14.520 --> 52:18.520]  Там могут быть положительные, но минус два, три, минус два цикл.
[52:21.520 --> 52:25.520]  Утверждается, смотрите. Утверждается. Оказывается, сейчас это не буду уже.
[52:25.520 --> 52:28.520]  Видимо на следующую лекцию оставлю. Ну или на семинары.
[52:28.520 --> 52:37.520]  Посмотрим. Утверждается следующее, что если мы сделаем еще один блок внутренней форда Белмана,
[52:37.520 --> 52:46.520]  и если от какой-то вершины расстояние уменьшилось, то утверждается, что из нее достижем отрицательный цикл.
[52:47.520 --> 52:51.520]  Нет, наоборот. Вы будете идти по предкам потом. Искать цикл.
[52:52.520 --> 52:55.520]  Потому что вы из цикла смогли срелоксировать ответ до нее.
[52:59.520 --> 53:01.520]  Ну да, я так и сказал.
[53:06.520 --> 53:08.520]  Что? Нет. Ладно, не суть.
[53:08.520 --> 53:13.520]  Ну короче, если вы сделаете еще одну итерацию, и найдется такая вершина В,
[53:14.520 --> 53:27.520]  что dp от V модуль V минус один строго больше, чем dp от V модуль V,
[53:28.520 --> 53:33.520]  из этого следует, что V достижима из отрицательного цикла.
[53:33.520 --> 53:36.520]  Ну более того, это на самом деле равносильность критерий.
[53:39.520 --> 53:45.520]  То есть вы находите себе вершину, которая уменьшилась, и при этом вы должны запоминать предков,
[53:45.520 --> 53:47.520]  откуда был достигнут минимальный ответ.
[53:47.520 --> 53:52.520]  Тогда утверждается, что прыгая по предкам и получив цикл, вы получите цикл отрицательного верса.
