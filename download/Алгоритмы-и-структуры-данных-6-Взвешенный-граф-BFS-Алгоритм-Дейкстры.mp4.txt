[00:00.000 --> 00:28.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[00:28.000 --> 00:37.000]  На всех ребрах будут написаны числа, веса и стоимость верёжки.
[00:37.000 --> 00:47.000]  И нас будет интересовать вопрос о том, за какое наименьшее расстояние, за какое наименьшему стоимость можно добраться до навершинки.
[00:47.000 --> 01:00.000]  Отделение с нормальным графом, как я могу говорить, это стоимость на ребрах.
[01:00.000 --> 01:04.000]  Формально можно определить так.
[01:04.000 --> 01:14.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:14.000 --> 01:19.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:19.000 --> 01:24.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:24.000 --> 01:28.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:28.000 --> 01:31.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:31.000 --> 01:34.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:34.000 --> 01:37.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:37.000 --> 01:40.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:40.000 --> 01:43.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:43.000 --> 01:46.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:46.000 --> 01:49.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:49.000 --> 01:52.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:52.000 --> 01:55.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:55.000 --> 01:58.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[01:58.000 --> 02:01.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:01.000 --> 02:04.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:04.000 --> 02:07.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:07.000 --> 02:10.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:10.000 --> 02:13.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:13.000 --> 02:16.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:16.000 --> 02:19.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:19.000 --> 02:22.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:22.000 --> 02:25.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:25.000 --> 02:28.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:28.000 --> 02:31.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:31.000 --> 02:34.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:34.000 --> 02:37.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:37.000 --> 02:40.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:40.000 --> 02:43.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:43.000 --> 02:46.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:46.000 --> 02:49.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:49.000 --> 02:52.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:52.000 --> 02:55.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:55.000 --> 02:58.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[02:58.000 --> 03:01.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:01.000 --> 03:04.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:04.000 --> 03:07.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:07.000 --> 03:10.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:10.000 --> 03:13.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:13.000 --> 03:16.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:16.000 --> 03:19.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:19.000 --> 03:22.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:22.000 --> 03:25.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:25.000 --> 03:28.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:28.000 --> 03:31.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:31.000 --> 03:34.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:34.000 --> 03:37.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:37.000 --> 03:40.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:40.000 --> 03:43.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:43.000 --> 03:46.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:46.000 --> 03:49.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:49.000 --> 03:52.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:52.000 --> 03:55.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:55.000 --> 03:58.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[03:58.000 --> 04:01.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:01.000 --> 04:04.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:04.000 --> 04:07.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:07.000 --> 04:10.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:10.000 --> 04:13.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:13.000 --> 04:16.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:16.000 --> 04:19.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:19.000 --> 04:22.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:22.000 --> 04:25.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:25.000 --> 04:28.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:28.000 --> 04:31.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:31.000 --> 04:34.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:34.000 --> 04:37.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:37.000 --> 04:40.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:40.000 --> 04:43.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:43.000 --> 04:46.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:46.000 --> 04:49.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:49.000 --> 04:52.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:52.000 --> 04:55.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:55.000 --> 04:58.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[04:58.000 --> 05:01.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:01.000 --> 05:04.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:04.000 --> 05:07.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:07.000 --> 05:10.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:10.000 --> 05:13.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:13.000 --> 05:16.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:16.000 --> 05:19.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:19.000 --> 05:22.000]  Добрый вечер, переходим к изучению кратчайших путей графов.
[05:22.000 --> 05:25.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:25.000 --> 05:28.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:28.000 --> 05:31.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:31.000 --> 05:34.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:34.000 --> 05:37.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:37.000 --> 05:40.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:40.000 --> 05:43.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:43.000 --> 05:46.000]  Расстояние между двумя крышинами равно минимальным крышинам.
[05:46.000 --> 05:51.500]  Расстояние между двумя крышинами равно минимαςrip youtubers ideia
[05:51.500 --> 05:55.460]  Расстояние между двумя крышинами равно минимась resulting
[05:55.460 --> 06:00.760]  1. Расстояние между двумя крышинами равно 1.1 m.
[06:00.760 --> 06:02.640]  1. Расстояние между двумя крышинами равно 1.zione
[06:02.640 --> 06:06.800]  1. Расстояние между двумя крышинами равно 1.osing
[06:06.800 --> 06:07.740]  1. Ironablo 2. Earthx hold
[06:07.920 --> 06:09.500]  1.Bromwells знаю
[06:09.500 --> 06:11.460]  2. DPS
[06:11.460 --> 06:14.000]  1. Part forecasting
[06:14.000 --> 06:26.000]  Входит в ширину, а он начинает следующую задачу.
[06:26.000 --> 06:34.000]  Он принимает нынешний граф, то есть граф, в котором до уива равно единица,
[06:34.000 --> 06:41.000]  принимает также ненависть в С, и находит состояние вот в С до всей стороны.
[06:42.000 --> 06:46.000]  Дальше удастся найти единицу.
[06:46.000 --> 06:59.000]  С разрешу В, для всех хороших найти прошедшее состояние от С до В.
[06:59.000 --> 07:04.000]  Вот, у меня фиксируется какой-то старший, оттуда я хочу посчитать все расстояния.
[07:04.000 --> 07:08.000]  И вот код С, это всех по всевершим графу, я хочу найти прошедшее состояние.
[07:08.000 --> 07:11.000]  А в данном случае расстояние по члену реверсу, то есть какой наименьший член реверс,
[07:11.000 --> 07:15.000]  нужно пройти по графу, чтобы попасть в каждое направление до уива.
[07:18.000 --> 07:22.000]  Вот, где здесь будет очень проста, то есть что алдейты будут работать примерно там.
[07:22.000 --> 07:28.000]  Ну смотрите, мы знаем, что единственная вершина расстояния до которой ноль, это сама С.
[07:28.000 --> 07:34.000]  Потому что на любое расстояние значит, что никуда идти не нужно, но понятно, что это только С.
[07:34.000 --> 07:38.000]  Дальше, как выглядят вершины, до которых в состоянии 1?
[07:38.000 --> 07:42.000]  Ну понятно, эти вершины, когда есть ребро из С.
[07:42.000 --> 07:44.000]  Я все исходящие кебра рассматриваю.
[07:44.000 --> 07:49.000]  Понятно, что для них до всех не страшно еметься.
[07:49.000 --> 07:50.000]  И только для них.
[07:50.000 --> 07:55.000]  А нет никаких других вершин, до которых есть не умеют еметься.
[07:55.000 --> 07:59.000]  Дальше, до каких вершин есть два?
[07:59.000 --> 08:02.000]  Ну, видимо, это те, которые вот как раз одну ребро из С взяли,
[08:02.000 --> 08:04.000]  потом еще одну ребро взяли из той вершины.
[08:04.000 --> 08:08.000]  Дальше рассматриваем все вот эти исходящие реверс.
[08:08.000 --> 08:11.000]  И говорим, что до этих вершин, как сказать, равно не будет.
[08:11.000 --> 08:13.000]  Ну и так далее.
[08:13.000 --> 08:16.000]  У нас граф раскладывается из слои.
[08:16.000 --> 08:20.000]  В каждом слое расстояние вот С у них какое-то фиксированное.
[08:20.000 --> 08:21.000]  Ну и у нас как вот так.
[08:21.000 --> 08:24.000]  Итеративно, слой за слоем мы их будем получать.
[08:24.000 --> 08:27.000]  Вот, что если мы нашли слой с каким-нибудь фиксированным расстоянием,
[08:27.000 --> 08:29.000]  то дальше нужно перебрать все из них исходящие ребра
[08:29.000 --> 08:31.000]  и мы получим следующий слой.
[08:31.000 --> 08:33.000]  Ну, вроде так.
[08:35.000 --> 08:36.000]  Вот.
[08:36.000 --> 08:41.000]  Ну, давайте я вот напишу, как это можно сделать.
[08:41.000 --> 08:43.000]  Я заведу...
[08:43.000 --> 08:44.000]  Да.
[08:44.000 --> 08:46.000]  Первое, что мне нужно, я хочу завести с вами процедуру
[08:46.000 --> 08:50.000]  раскрытие вершинки для удобства.
[08:50.000 --> 08:52.000]  Раскрытие вершинки.
[08:57.000 --> 09:00.000]  То есть раскрытие в каждом этих переборах всех отстоячих ребр
[09:00.000 --> 09:04.000]  и обновление ответа для всех концов всех вот этих ребр.
[09:04.000 --> 09:07.000]  Что я хочу от процедуры рейкспана?
[09:07.000 --> 09:10.000]  Мы понимаем, что в рейкспане В
[09:10.000 --> 09:12.000]  ведет себя примерно так.
[09:12.000 --> 09:13.000]  Ну вот.
[09:13.000 --> 09:14.000]  В.
[09:14.000 --> 09:17.000]  Я хочу рассмотреть все исходящие ребра
[09:17.000 --> 09:21.000]  и обновить ответ для всех вот этих концов всех этих ребр.
[09:21.000 --> 09:23.000]  Ну понятно, здесь будет какое-то расстояние К,
[09:23.000 --> 09:26.000]  но здесь расстояние К может быть.
[09:26.000 --> 09:28.000]  Ну давайте так и сделаем, значит.
[09:28.000 --> 09:31.000]  Для того, чтобы их синтез не сплощу.
[09:31.000 --> 09:32.000]  Давайте.
[09:32.000 --> 09:34.000]  Я сделаю цикл по всем ребрам,
[09:34.000 --> 09:38.000]  лежащим по списке жевут В.
[09:38.000 --> 09:39.000]  Вот.
[09:39.000 --> 09:41.000]  То есть, а как обычно жевут В?
[09:41.000 --> 09:44.000]  Это список всех ребр, которые торчат из зашинки В.
[09:44.000 --> 09:47.000]  Ну и есть какая-то структура, которая хранит информацию про ребро.
[09:47.000 --> 09:49.000]  Все, что нужно.
[09:49.000 --> 09:51.000]  А как ребро характеризуется?
[09:51.000 --> 09:54.000]  Ну, наверное, началом, концом, весом.
[09:54.000 --> 09:56.000]  Если надо еще номер какой-нибудь, это атака,
[09:56.000 --> 09:58.000]  то есть уникальный админификат.
[09:58.000 --> 10:01.000]  Ну и такая структура,
[10:01.000 --> 10:04.000]  которая отвечает за ребро.
[10:04.000 --> 10:06.000]  Вот.
[10:06.000 --> 10:09.000]  Так вот, чтобы админифицировать ребра.
[10:09.000 --> 10:12.000]  Немного.
[10:12.000 --> 10:13.000]  А...
[10:13.000 --> 10:15.000]  Ну давайте просто обновим.
[10:15.000 --> 10:18.000]  Давайте вот скажем, что...
[10:18.000 --> 10:19.000]  Д.
[10:19.000 --> 10:22.000]  Давайте для красности будем писать Д, а не И.
[10:22.000 --> 10:25.000]  А потом будем писать, что D вот есть у шторку.
[10:25.000 --> 10:27.000]  А где ребро Е,
[10:27.000 --> 10:29.000]  идет из точки в ровную,
[10:29.000 --> 10:32.000]  из точки в хвостикую.
[10:32.000 --> 10:33.000]  Вот.
[10:33.000 --> 10:34.000]  Д вот есть у шторку,
[10:34.000 --> 10:37.000]  а линия сразу там уже лежала.
[10:37.000 --> 10:39.000]  Да, потому что мало ли вдруг,
[10:39.000 --> 10:42.000]  где этот шин уже и так ранее найден в категории короткого ответа.
[10:42.000 --> 10:43.000]  Я не хочу его затирать.
[10:43.000 --> 10:44.000]  Я не хочу его затирать.
[10:44.000 --> 10:46.000]  Я не хочу его затирать.
[10:46.000 --> 10:47.000]  Ответ я не хочу его затирать.
[10:47.000 --> 10:49.000]  Я либо оставляю старый ответ,
[10:49.000 --> 10:51.000]  либо пишу то, что было в В плюс 1.
[10:51.000 --> 10:53.000]  Сделаю в В плюс 1.
[10:56.000 --> 10:58.000]  Так работает эксплана.
[11:03.000 --> 11:06.000]  Ну, в общем случае, здесь будет написано вместо единички
[11:06.000 --> 11:08.000]  в верхнюю штуку В,
[11:08.000 --> 11:10.000]  то есть если про Е.
[11:10.000 --> 11:13.000]  Ну, пока что в нашем случае в случае дает просто единичка,
[11:13.000 --> 11:15.000]  то же самое, что здесь.
[11:16.000 --> 11:17.000]  Вот.
[11:30.000 --> 11:31.000]  Теперь.
[11:31.000 --> 11:34.000]  А как мне будет установлен смартфон БМС?
[11:36.000 --> 11:38.000]  Давайте я заведу сначала вот эту миссию D,
[11:38.000 --> 11:40.000]  где мы узнаем все расстояния.
[11:41.000 --> 11:43.000]  Ну, будет БМС, да, это объекта.
[11:43.000 --> 11:46.000]  Изначально мы скажем бесконечности.
[11:48.000 --> 11:51.000]  Считаем изначально, что вот все расстояния бесконечности.
[11:51.000 --> 11:53.000]  Пока что из D не докудываем до C.
[11:55.000 --> 11:57.000]  Можно сказать, что в каждом 3D адреса 0,
[11:57.000 --> 11:59.000]  потому что мы знаем, что как человек,
[11:59.000 --> 12:01.000]  в каждом 3D адреса есть 0.
[12:01.000 --> 12:03.000]  Вот, ну и давайте я заберу очередь вершины,
[12:05.000 --> 12:07.000]  которые мне предстоит раскрыть.
[12:07.000 --> 12:09.000]  То есть вот я буду в очередь складировать те вершины,
[12:09.000 --> 12:11.000]  которые, как бы, я уже обнаружил,
[12:11.000 --> 12:13.000]  но которые еще не раскрыл.
[12:13.000 --> 12:15.000]  То есть я по вот этому вот графу
[12:15.000 --> 12:17.000]  буду идти, к примеру, на танки.
[12:17.000 --> 12:19.000]  Я сначала на S расстою, потом одну за другой
[12:19.000 --> 12:21.000]  буду раскрывать вот эти вершинки,
[12:21.000 --> 12:23.000]  и пока я их раскрываю,
[12:23.000 --> 12:25.000]  вершинкой следующего слоя тоже очередь добавляюсь.
[12:25.000 --> 12:27.000]  То есть я вот так вот по первому слою
[12:27.000 --> 12:29.000]  и в это же время я добавляю в очередь все вершины
[12:29.000 --> 12:31.000]  с второго слоя.
[12:31.000 --> 12:33.000]  Вот, в очередь у меня нет вершин.
[12:33.000 --> 12:35.000]  Повторяю очередь вершин.
[12:39.000 --> 12:41.000]  Изначально я в очередь добавляю вершину S.
[12:43.000 --> 12:45.000]  Я так, единственное, раскрываю.
[12:45.000 --> 12:47.000]  Дальше, пока у меня есть вершины, которые
[12:47.000 --> 12:49.000]  нужно мне раскрывать,
[12:49.000 --> 12:51.000]  там по карту не пустая.
[12:55.000 --> 12:57.000]  Я достаю из очереди
[12:57.000 --> 12:59.000]  первую вершину.
[12:59.000 --> 13:01.000]  Будучка top.
[13:01.000 --> 13:03.000]  Сразу ее удаляю
[13:03.000 --> 13:05.000]  из очереди.
[13:07.000 --> 13:09.000]  Раскрываю.
[13:13.000 --> 13:15.000]  Вот.
[13:15.000 --> 13:17.000]  Раскрываю.
[13:17.000 --> 13:19.000]  И мне нужно для всех тех новых вершин,
[13:19.000 --> 13:21.000]  которые я только что увидел, да?
[13:21.000 --> 13:23.000]  То есть, когда я сразу вот эту вот слою осматриваю,
[13:23.000 --> 13:25.000]  мне нужно добавить в очередь все вершинки,
[13:25.000 --> 13:27.000]  которые я только что увидел в первый раз.
[13:27.000 --> 13:29.000]  То есть, когда я увидел
[13:29.000 --> 13:31.000]  новый путь.
[13:31.000 --> 13:33.000]  Раньше я их вообще не видел.
[13:33.000 --> 13:35.000]  Раньше было дыра, но было бесконечно.
[13:35.000 --> 13:37.000]  Теперь я увидел, что теперь остается
[13:37.000 --> 13:39.000]  не двое вершин.
[13:39.000 --> 13:41.000]  Ну, их надо в очередь больше балансить.
[13:41.000 --> 13:43.000]  Давайте перепишем.
[13:43.000 --> 13:45.000]  То есть, по факту, я перепишу Ришпэн,
[13:45.000 --> 13:47.000]  только с условием того, что я еще
[13:47.000 --> 13:49.000]  новые вершины добавляю в очередь.
[13:53.000 --> 13:55.000]  Перебираю вершины,
[13:55.000 --> 13:57.000]  то есть,
[13:57.000 --> 13:59.000]  напишу это так.
[13:59.000 --> 14:01.000]  Если
[14:01.000 --> 14:03.000]  д под конца
[14:03.000 --> 14:05.000]  этого вера было равно плюс бесконечности,
[14:07.000 --> 14:09.000]  тогда, ну, во-первых, мне нужно
[14:09.000 --> 14:11.000]  это растение обновить.
[14:11.000 --> 14:13.000]  Ну, скажем, что
[14:13.000 --> 14:15.000]  две вершины с одином.
[14:15.000 --> 14:17.000]  Вот.
[14:17.000 --> 14:19.000]  А во-вторых, мне вершин
[14:19.000 --> 14:21.000]  надо добавить в очередь.
[14:21.000 --> 14:23.000]  И двух вершин.
[14:25.000 --> 14:27.000]  Ну, вроде бы и все.
[14:37.000 --> 14:39.000]  По сути, вот то, что здесь
[14:39.000 --> 14:41.000]  написано.
[14:41.000 --> 14:43.000]  То есть, я раскрываю,
[14:43.000 --> 14:45.000]  обновляю состояние все, которые
[14:45.000 --> 14:47.000]  получил.
[14:47.000 --> 14:49.000]  То есть, у меня двух вершин.
[14:49.000 --> 14:51.000]  Какой-то длинный, у меня будет 30 секунд
[14:51.000 --> 14:53.000]  до дешевого, длинный один побольше.
[14:53.000 --> 14:55.000]  Ну, давайте покажем
[14:55.000 --> 14:57.000]  корректность
[14:57.000 --> 14:59.000]  подтверждения.
[14:59.000 --> 15:01.000]  Во-первых,
[15:01.000 --> 15:03.000]  то есть,
[15:03.000 --> 15:05.000]  ДФС
[15:05.000 --> 15:07.000]  выбирает вершины.
[15:07.000 --> 15:09.000]  То есть, я рассматриваю вершины,
[15:09.000 --> 15:11.000]  порядка застанет, нет?
[15:11.000 --> 15:13.000]  Ну,
[15:13.000 --> 15:15.000]  ну,
[15:15.000 --> 15:17.000]  ну,
[15:17.000 --> 15:19.000]  ну,
[15:19.000 --> 15:21.000]  ну,
[15:21.000 --> 15:23.000]  ну,
[15:31.000 --> 15:33.000]  это не умывание
[15:35.000 --> 15:37.000]  значения для
[15:41.000 --> 15:43.000]  вот такой скорых.
[15:47.000 --> 15:49.000]  Почти пишу так.
[15:51.000 --> 15:58.000]  после рассмотрения последней вершины
[16:02.000 --> 16:06.000]  со значением t равно k
[16:09.000 --> 16:15.000]  когда у меня BFS, рассмотрел все первые k-слоёв
[16:15.000 --> 16:19.000]  и катастрофь тоже полностью рассмотрел
[16:19.000 --> 16:24.000]  к моменту рассмотрения последней вершины с d равно t
[16:24.000 --> 16:31.000]  у меня все вершины с состоянием не больше k-плюс один
[16:31.000 --> 16:34.000]  найдены и в них написано правильно d
[16:34.000 --> 16:39.000]  давайте подишем так, чтобы не было и не было
[16:39.000 --> 16:44.000]  если расстояние BFS могло не превосходить k-плюс один
[16:44.000 --> 16:49.000]  то с d-о-тру корректно найдены
[16:56.000 --> 17:00.000]  я не говорю, что для всех вершин я нашел ответ
[17:00.000 --> 17:06.000]  я говорю, что я нашел правильный ответ только для тех вершин, до которых расстояние больше k-плюс один
[17:06.000 --> 17:13.000]  во-вторых, в очереди будут лежать все вершины, до которых расстояние ровное
[17:13.000 --> 17:30.000]  в очереди лежат в точности все вершины, для которых расстояние равно k-плюс один
[17:36.000 --> 17:46.000]  когда я осмотрел левое 1-2-ое педали ката-слой
[17:46.000 --> 17:49.000]  к моменту разрешения рассмотрения ката-слой
[17:49.000 --> 17:53.000]  у меня в очереди будет лежать полностью k-плюс 1-2-ой
[17:53.000 --> 17:57.000]  вот что ожидается на этой доске
[17:57.000 --> 18:06.000]  если мы это докажем, то у нас получается такое впечатление
[18:06.000 --> 18:13.000]  что BFS правильно находит все расстояния
[18:13.000 --> 18:19.000]  именно потому что он работает по слоям
[18:19.000 --> 18:22.000]  сначала он правильно обработал левое 1-ое педали ката-слой
[18:22.000 --> 18:24.000]  дальше добавил BFS 1-ое педали ката-слой
[18:24.000 --> 18:28.000]  то есть BFS находит правильные листи
[18:28.000 --> 18:33.000]  BFS находит корректное расстояние
[18:33.000 --> 18:40.000]  и причем делает он это за линейное время
[18:40.000 --> 18:47.000]  потому что ввиду этого выпущения, ввиду первого пункта
[18:47.000 --> 18:53.000]  каждый решинка мне размножится всего один раз
[18:53.000 --> 19:01.000]  и суммарно время раскрытий будет по отэму
[19:01.000 --> 19:06.000]  чтобы суммарно работать все расстояния
[19:06.000 --> 19:09.000]  каждый решинка добавит всего один раз
[19:09.000 --> 19:12.000]  и суммарно все экшванышни работают по отэму
[19:13.000 --> 19:18.000]  каждый решинок добавит всего один раз
[19:18.000 --> 19:25.000]  давайте впечатления указать
[19:25.000 --> 19:29.000]  ну, первое, это совсем понятно
[19:29.000 --> 19:32.000]  просто так алкоголиками устроим, что сначала есть только одно
[19:32.000 --> 19:34.000]  нулевое значение в массиве D
[19:34.000 --> 19:39.000]  потом, если я рассматриваю решение, если D в углу РК
[19:39.000 --> 19:41.000]  я добавляю только большее значение
[19:41.000 --> 19:44.000]  значит, извлекаемое без того, что ростовое
[19:44.000 --> 19:48.000]  я добавляю только большее, значит, извлекаемое значение может увеличить
[19:48.000 --> 19:51.000]  вот, почему вот это верно?
[19:51.000 --> 19:53.000]  давайте покажем
[19:53.000 --> 19:57.000]  1, 2, 2
[19:57.000 --> 20:03.000]  2 за карамон 0
[20:03.000 --> 20:10.000]  очень видно, что происходит с карамоном 0
[20:10.000 --> 20:16.000]  при карамону 0 я говорю, что у меня в очереди изначально лежит только С
[20:16.000 --> 20:20.000]  после рассмотрения этой самой последней вершинки, то есть после рассмотрения С
[20:20.000 --> 20:23.000]  ну понятно, когда я все рассматриваю
[20:23.000 --> 20:26.000]  я как раз нахожу все вершины на расстоянии ровно один
[20:26.000 --> 20:28.000]  и все их добавляю в очередь
[20:28.000 --> 20:32.000]  значит, к моменту завершения рассмотрения любого слоя
[20:32.000 --> 20:38.000]  у меня в очереди будут лежать все вершины только первого слоя
[20:38.000 --> 20:40.000]  понятно?
[20:40.000 --> 20:44.000]  вот, вот переход
[20:44.000 --> 20:48.000]  спустит верно для РК
[20:48.000 --> 20:50.000]  а что это значит?
[20:50.000 --> 20:57.000]  это значит, что я нашел все вершины на расстоянии большего слоя как раз один
[20:57.000 --> 21:01.000]  и в очереди лежат все вершины на расстоянии ровно 2
[21:01.000 --> 21:04.000]  как раз 2
[21:04.000 --> 21:10.000]  то есть я рассмотрел все предыдущие слои, теперь в очередь у меня просто вот этот карпус 2
[21:10.000 --> 21:12.000]  ну дальше как об этом говорить?
[21:12.000 --> 21:15.000]  дальше он рассматривает целиком один свой
[21:15.000 --> 21:17.000]  все эти вершины раскрывает
[21:17.000 --> 21:22.000]  и все, что из них достижено за одно репро, добавляет опять в очередь
[21:22.000 --> 21:26.000]  но тогда понятно, что с одной стороны все вершины в сцене карпус 2 мы найдем
[21:26.000 --> 21:30.000]  с другой стороны ничего лишнего не добавят
[21:30.000 --> 21:34.000]  поэтому мы же и дуем
[21:34.000 --> 21:38.000]  да, то есть еще раз, когда я рассматриваю целиком свой
[21:38.000 --> 21:40.000]  во-первых
[21:40.000 --> 21:45.000]  ну понятно, я добавляю только вершины, которые я еще не видел
[21:45.000 --> 21:48.000]  значит в очереди, в конце рассмотрения этой очереди
[21:48.000 --> 21:51.000]  добавят только вершины на сцене карпус 2
[21:51.000 --> 21:54.000]  и они добавятся все, потому что если есть какой-то путь
[21:54.000 --> 21:58.000]  а если есть какая-то вершина с расстоянием равном на карпус 2
[21:58.000 --> 22:01.000]  то можно рассмотреть на этот путь и последнее репро
[22:01.000 --> 22:04.000]  тогда на этой вершине расстояние равно карпус 1
[22:04.000 --> 22:09.000]  и значит нам отдельно здесь в очереди присутствует, а значит я вот эту вершину должен добавить
[22:09.000 --> 22:14.000]  то есть если лишним не добавлю, с другой стороны все, что нужно, я тоже должен добавить
[22:18.000 --> 22:20.000]  надо подробно делать
[22:24.000 --> 22:26.000]  вот
[22:30.000 --> 22:32.000]  вот понятно
[22:37.000 --> 22:42.000]  ну все, чтобы работать за линией, находить расстояние будет с, до всех станет хорошо
[22:45.000 --> 22:47.000]  хорошо
[22:50.000 --> 22:52.000]  хорошо
[22:54.000 --> 22:56.000]  так, ну теперь небольшое обобщение
[22:56.000 --> 22:58.000]  называется ноль-капель
[23:02.000 --> 23:04.000]  это обобщение, это балдаритма
[23:04.000 --> 23:07.000]  на случай, когда у нас висовая функция не совсем такая групповая
[23:07.000 --> 23:09.000]  и схема бревна и ничек представляет
[23:09.000 --> 23:14.000]  а это случай, когда все веса это целое число отряду капель
[23:19.000 --> 23:21.000]  маленькие целые числа
[23:21.000 --> 23:26.000]  я считаю, что здесь какой-нибудь кайф, небольшое целое число, там типа 15
[23:33.000 --> 23:35.000]  ну идея здесь следующая
[23:35.000 --> 23:37.000]  что мы делали это раньше
[23:37.000 --> 23:41.000]  я просто, я довел одну большую очередь, в которую сваливал все вершины по мере их находения
[23:41.000 --> 23:45.000]  а и так получалось, что я находил вершины порядка увеличения расстояния в них
[23:45.000 --> 23:49.000]  вот и просто в этот порядок шел, шел и находился в новой вершине
[23:49.000 --> 23:51.000]  теперь давайте что-то по-другому сделаем
[23:51.000 --> 23:55.000]  давайте я заведу явным образом для каждого расстояния
[23:55.000 --> 23:57.000]  для каждого х
[23:57.000 --> 24:01.000]  очередь вершин с расстоянием ровно х
[24:01.000 --> 24:03.000]  а вот для каждого х
[24:03.000 --> 24:05.000]  заведем очередь
[24:07.000 --> 24:10.000]  очередь под х
[24:11.000 --> 24:14.000]  куда будем складывать вершины с расстоянием х
[24:20.000 --> 24:22.000]  машина
[24:25.000 --> 24:27.000]  с наденьем расстояния х
[24:39.000 --> 24:41.000]  вот, то есть не в одной очереди все пройдется
[24:41.000 --> 24:44.000]  а по слоям, попробуем говорить
[24:44.000 --> 24:46.000]  у меня есть, скажем, с
[24:46.000 --> 24:48.000]  в любой слое отдельно будет первый слое
[24:48.000 --> 24:50.000]  второй слое и так далее
[24:50.000 --> 24:52.000]  и для каждого слоя будет своя очередь
[24:52.000 --> 24:54.000]  вот не в одной, а по девять
[24:54.000 --> 24:58.000]  вот, ну во-первых, скажите, пожалуйста, какое еще ограничение на х?
[24:58.000 --> 25:00.000]  сколько нам достаточно для очередей?
[25:06.000 --> 25:10.000]  ну да, точно хватит вот столько очередей
[25:10.000 --> 25:14.000]  потому что, как я уже сказал, в случае неоприцательности всех игр
[25:14.000 --> 25:18.000]  ребер достаточно рассматривать только простые пути
[25:18.000 --> 25:20.000]  пути без цикливаний
[25:20.000 --> 25:22.000]  а значит на всех этих путях максимум n-1 ребра
[25:22.000 --> 25:24.000]  то есть мы где-то начинаем, где-то заканчиваем
[25:24.000 --> 25:26.000]  и никогда не повторяемся, не зацикливаемся
[25:26.000 --> 25:30.000]  то значит различных ребер там максимум n-1
[25:30.000 --> 25:32.000]  ну, то есть даже можно было бы у нас с вами написать там
[25:32.000 --> 25:34.000]  х на минус 1, но не буду, не буду встать
[25:34.000 --> 25:36.000]  пора встать на констанцию
[25:36.000 --> 25:39.000]  вот, значит, n, ребер по другому ряду пути
[25:39.000 --> 25:41.000]  и каждый имеет вес максимум k
[25:42.000 --> 25:46.000]  ну вот, заведем столько очередей
[25:46.000 --> 25:50.000]  и дальше будем делать иначе похожее
[26:12.000 --> 26:16.000]  так, ну, здесь давайте напишу
[26:16.000 --> 26:18.000]  вот тут будет сфальт
[26:18.000 --> 26:21.000]  и сфальт будет работать
[26:21.000 --> 26:24.000]  к скрэншу, а, скрэншу, к химии в
[26:24.000 --> 26:26.000]  вот здесь совершенно в
[26:26.000 --> 26:30.000]  а я вижу, что у него опять где-то дикие коллекции урок
[26:30.000 --> 26:32.000]  причем они могут быть уже разными кусок
[26:32.000 --> 26:36.000]  ну и, наверное, я хочу сказать, что если у меня
[26:36.000 --> 26:39.000]  если мне неизвестен какой-то акуль в ход пресса
[26:39.000 --> 26:41.000]  скажем, в состоянии отверстия
[26:41.000 --> 26:43.000]  то дальше я пусть могу продлить приклеиванием
[26:43.000 --> 26:46.000]  вот каждый из этих, получить путь
[26:46.000 --> 26:49.000]  новой длины до всех вот этих вот крышин
[26:49.000 --> 26:51.000]  ну и давайте опять-таки обнолим
[26:51.000 --> 26:54.000]  до всех вот этих крышин кратчайшее расстояние
[26:54.000 --> 26:57.000]  через вот этот путь, вот этот вот
[26:57.000 --> 27:00.000]  дай дальше, плюс приклеивание
[27:00.000 --> 27:04.000]  вот, ну, посмотрите, здесь может быть такая закройстка небольшая, что
[27:04.000 --> 27:06.000]  давайте в картинку нанесем
[27:09.000 --> 27:14.000]  вот так
[27:14.000 --> 27:17.000]  вот так
[27:17.000 --> 27:21.000]  смотрите, если я начну вот в этом графе работать
[27:21.000 --> 27:24.000]  с, тогда у меня сначала одно понятно
[27:24.000 --> 27:27.000]  вот до этой вершины будет найдено расстояние 1
[27:27.000 --> 27:29.000]  до этой вершины будет найдено расстояние 10
[27:29.000 --> 27:32.000]  в частности, вот эта вершина поместится в десятую опцию
[27:32.000 --> 27:34.000]  ну, потому что до ее найдения длины 10
[27:34.000 --> 27:37.000]  эта вершина будет держать в десятую опцию
[27:37.000 --> 27:41.000]  но с другой стороны, потом, когда я буду рассматривать вот эту вершину уже
[27:41.000 --> 27:44.000]  я найду до нее более короткий путь длины, суммарно, 2
[27:44.000 --> 27:47.000]  вот в этой левая веточке путь будет длиной 2
[27:47.000 --> 27:50.000]  а значит к этой вершине я опять добавлю тоже в очередь
[27:50.000 --> 27:51.000]  вот во второй лодке
[27:51.000 --> 27:53.000]  то есть я изначально нашел путь длины 10
[27:53.000 --> 27:56.000]  а дальше смогу просто пройти до пути длины 2
[27:56.000 --> 27:58.000]  ну и так возможно
[27:58.000 --> 28:01.000]  каждая вершинка может быть в нескольких очередях
[28:01.000 --> 28:04.000]  если я до нее нахожу все более и более короткой пути
[28:04.000 --> 28:08.000]  значит, в принципе, в этом самом случае может быть в нескольких очередях
[28:08.000 --> 28:11.000]  в каком наибольшем количестве очередей она может покупать?
[28:15.000 --> 28:18.000]  ну, то ли k, то ли k плюс 1, да
[28:19.000 --> 28:22.000]  в самом деле, видимо, k плюс 1, потому что
[28:25.000 --> 28:27.000]  сейчас или k
[28:34.000 --> 28:36.000]  нет, получается k плюс 1, да
[28:36.000 --> 28:38.000]  потому что, например, есть вершинка s
[28:38.000 --> 28:41.000]  из нее есть ребро веса k
[28:41.000 --> 28:43.000]  какую-нибудь нашу вершину 2v
[28:43.000 --> 28:46.000]  и дальше по ребрам нулевого веса, например
[28:47.000 --> 28:49.000]  достижены вот такие вот
[28:49.000 --> 28:52.000]  ребра 1, 2, и так далее
[28:52.000 --> 28:55.000]  тогда если я сначала найду до корей
[28:55.000 --> 28:57.000]  добавлю вершину k в очередь
[28:57.000 --> 28:59.000]  потом обработаю вот такой путь
[28:59.000 --> 29:01.000]  добавлю вершину k в очередь в первую очередь
[29:01.000 --> 29:03.000]  и так далее, в конце концов набуду в 0,8
[29:03.000 --> 29:05.000]  ну, не важно, главное, что вершину нужно
[29:05.000 --> 29:07.000]  покупать в нескольких очередях сразу
[29:07.000 --> 29:10.000]  и чтобы нам не раскрывать одну эту вершину много раз
[29:10.000 --> 29:13.000]  потому что, ну, нет смысла, если мы вершину уже когда-то раскрыли
[29:13.000 --> 29:16.000]  на меньшему расстоянию, нет смысла ее раскрывать на большем расстоянии
[29:16.000 --> 29:20.000]  потому что это нам не даст уменьшение пути
[29:20.000 --> 29:25.000]  а откуда нам знать, что она не может выбывать в большом количестве очередей, чем k?
[29:26.000 --> 29:29.000]  ну, давайте осмотрим первое время, когда она добавится
[29:29.000 --> 29:31.000]  пусть она добавится в очередь на 0,8
[29:31.000 --> 29:33.000]  Как она могла туда добавить?
[29:33.000 --> 29:35.000]  Я рассматривал нашу вершину
[29:35.000 --> 29:37.000]  Нашел рифро, вес не больше k
[29:37.000 --> 29:39.000]  Так что суммарно
[29:39.000 --> 29:41.000]  Здесь получается расстояние x
[29:41.000 --> 29:43.000]  Тогда понятно, что она могла добавить
[29:43.000 --> 29:45.000]  сколько больше здесь номеральных
[29:45.000 --> 29:47.000]  Вот вот этой и вот этой
[29:47.000 --> 29:49.000]  Ну окей, давай
[29:49.000 --> 29:51.000]  Пусть вот досюда
[29:51.000 --> 29:53.000]  было расстояние k
[29:53.000 --> 29:55.000]  Пусть здесь написано
[29:55.000 --> 29:57.000]  Какой-нибудь вес, да?
[29:57.000 --> 29:59.000]  Вес не больше, чем k
[29:59.000 --> 30:01.000]  Тогда вот эта вот вершина добавится
[30:01.000 --> 30:03.000]  в очередь номером l плюс w
[30:05.000 --> 30:07.000]  Понятно, что в очередь
[30:07.000 --> 30:09.000]  с большими номерами мы ее добавлять не будем
[30:09.000 --> 30:11.000]  Потому что мы добавляем только, если мы нашли
[30:11.000 --> 30:13.000]  как-то более круглые ответы
[30:13.000 --> 30:15.000]  С одной стороны, мы ее нашли
[30:15.000 --> 30:17.000]  Мы добавили ее в очередь
[30:17.000 --> 30:19.000]  С другой стороны, мы в этот момент
[30:19.000 --> 30:21.000]  раскрываем вершину l и очередь
[30:21.000 --> 30:23.000]  То есть мы нашли v, когда раскрывали l
[30:23.000 --> 30:25.000]  Ну тогда потенциально
[30:25.000 --> 30:27.000]  l могла купать только в очереди между ними
[30:27.000 --> 30:29.000]  l плюс w
[30:29.000 --> 30:31.000]  Потому что меньше путь, чем до v
[30:31.000 --> 30:33.000]  будет не может, потому что
[30:33.000 --> 30:35.000]  мы докажем это, что
[30:35.000 --> 30:37.000]  если мы раскрываем вашу круглую
[30:37.000 --> 30:39.000]  а v еще не найдено, значит до v
[30:39.000 --> 30:41.000]  не может постоянно быть меньше, чем до v
[30:41.000 --> 30:43.000]  То есть мы будем раскрывать вершину
[30:43.000 --> 30:45.000]  в порядке увеличения в тюрьме
[30:45.000 --> 30:47.000]  Поэтому до v путь меньше, чем до v
[30:47.000 --> 30:49.000]  будет не может
[30:49.000 --> 30:51.000]  Значит, это могло быть l плюс w
[30:51.000 --> 30:53.000]  и здесь как раз максимум капусты
[30:53.000 --> 30:55.000]  Вот, но мораль была такая, что
[30:55.000 --> 30:57.000]  потенциально я буду брать в несколько очередей
[30:57.000 --> 30:59.000]  и поэтому я буду входить в гулевский флаг
[30:59.000 --> 31:01.000]  раскрывал и я буду отвергать
[31:01.000 --> 31:03.000]  И если я вза мной раскрывал
[31:03.000 --> 31:05.000]  если я его не раскрывал
[31:07.000 --> 31:09.000]  то я просто сделаю v
[31:09.000 --> 31:11.000]  а иначе сразу
[31:11.000 --> 31:13.000]  вымешать и раскрывать
[31:21.000 --> 31:23.000]  Ну дальше делаю обычно раскрывать
[31:23.000 --> 31:25.000]  и перевернуть все ребра
[31:25.000 --> 31:27.000]  И если я до этого вершины
[31:27.000 --> 31:29.000]  нашел более короткий путь
[31:29.000 --> 31:31.000]  то добавляю эту вершину в очередь в нудную
[31:35.000 --> 31:37.000]  по всем ребрам
[31:41.000 --> 31:43.000]  Давайте сберем тот самый x
[31:43.000 --> 31:45.000]  равный d от v
[31:45.000 --> 31:47.000]  плюс стоимость ребра
[31:47.000 --> 31:49.000]  то есть e точку w
[31:49.000 --> 31:51.000]  Дальше тот самый x
[31:51.000 --> 31:53.000]  В какую очередь нужно положить вершину w
[31:53.000 --> 31:55.000]  e точка t
[31:55.000 --> 31:57.000]  Ну и если это реально осмысленно
[31:57.000 --> 31:59.000]  то есть если расстояние до нее
[31:59.000 --> 32:01.000]  больше чем x
[32:01.000 --> 32:03.000]  то я кладу туда x
[32:05.000 --> 32:07.000]  и добавляю эту вершину в x в очередь
[32:15.000 --> 32:17.000]  Конец
[32:19.000 --> 32:21.000]  Здравствуй, Кирюш
[32:41.000 --> 32:43.000]  Вот, ну и собственно
[32:43.000 --> 32:45.000]  самая крутая скачка будет
[32:45.000 --> 32:47.000]  если он заводит
[32:47.000 --> 32:49.000]  в чучь очередей
[32:49.000 --> 32:51.000]  0 до nk
[32:51.000 --> 32:53.000]  изначально в нудную добавляет s
[32:57.000 --> 32:59.000]  дальше идет моим очередям в порядке
[32:59.000 --> 33:01.000]  разрастания номера
[33:01.000 --> 33:03.000]  и раскрывает следующую кинемию
[33:03.000 --> 33:05.000]  дальше в цикле по x
[33:05.000 --> 33:07.000]  от 0 до nk
[33:09.000 --> 33:11.000]  ну давайте я просто пишу
[33:11.000 --> 33:13.000]  пока код x не густо
[33:17.000 --> 33:19.000]  значит раскрывает следующую кинемию
[33:19.000 --> 33:21.000]  раскрывает
[33:21.000 --> 33:23.000]  раскрывает
[33:23.000 --> 33:25.000]  следующую кинемию
[33:35.000 --> 33:37.000]  я просто иду по слоям
[33:37.000 --> 33:39.000]  и раскрываю в том же порядке
[33:39.000 --> 33:41.000]  что у меня был в обычном вирфейсе
[33:41.000 --> 33:43.000]  просто в порядке застанем номера
[33:47.000 --> 33:49.000]  так, ну давайте к этому кинем
[33:49.000 --> 33:51.000]  разоряканность
[33:55.000 --> 33:57.000]  я знаю что
[33:57.000 --> 33:59.000]  после
[33:59.000 --> 34:01.000]  рассмотрения
[34:01.000 --> 34:03.000]  x в очереди
[34:03.000 --> 34:05.000]  в x в очереди
[34:07.000 --> 34:09.000]  а в нудную добавляю
[34:09.000 --> 34:11.000]  в нудную добавляю
[34:11.000 --> 34:13.000]  в нудную добавляю
[34:13.000 --> 34:15.000]  в нудную добавляю
[34:15.000 --> 34:17.000]  а
[34:29.000 --> 34:31.000]  а вот так
[34:31.000 --> 34:33.000]  после рассмотрения x в очереди
[34:33.000 --> 34:35.000]  все вершины
[34:35.000 --> 34:37.000]  все вершины v
[34:37.000 --> 34:39.000]  расстояние которых меньше
[34:39.000 --> 34:41.000]  чем x
[34:41.000 --> 34:43.000]  во первых будут раскрыты
[34:45.000 --> 34:47.000]  во вторых
[34:47.000 --> 34:49.000]  до них будет найдено правильное расстояние
[34:51.000 --> 34:53.000]  будут раскрыты
[34:53.000 --> 34:55.000]  и
[34:55.000 --> 34:57.000]  до них найдено правильное расстояние
[35:11.000 --> 35:13.000]  как раз
[35:13.000 --> 35:15.000]  в этом процессе
[35:15.000 --> 35:17.000]  обхода всех очередей
[35:17.000 --> 35:19.000]  левая, фера, вторая и так далее
[35:19.000 --> 35:21.000]  и дальше внутри каждой очереди
[35:21.000 --> 35:23.000]  просто раскрыты все вершины
[35:23.000 --> 35:25.000]  пока очереди не опустеют
[35:25.000 --> 35:27.000]  к моменту завершения
[35:27.000 --> 35:29.000]  рассмотрения x в очереди
[35:29.000 --> 35:31.000]  все вершинки с расстоянием v
[35:31.000 --> 35:33.000]  будут найдены
[35:33.000 --> 35:35.000]  до них будет просчитано правильное расстояние
[35:35.000 --> 35:37.000]  и более того будут раскрыты
[35:37.000 --> 35:39.000]  через них все остальные ответы
[35:39.000 --> 35:41.000]  так
[35:41.000 --> 35:43.000]  если в сервисе будет больше x
[35:43.000 --> 35:45.000]  то я неужели раскрыл
[35:45.000 --> 35:47.000]  и до всех соседей тоже ответ
[35:47.000 --> 35:49.000]  уже как бы обновил и пересчитал
[35:49.000 --> 35:51.000]  так, ну до церкви
[35:51.000 --> 35:53.000]  будет церкви x
[35:53.000 --> 35:55.000]  база
[35:55.000 --> 35:57.000]  x равно 0
[35:59.000 --> 36:01.000]  что такое x равно 0?
[36:01.000 --> 36:03.000]  мне нужно понять
[36:03.000 --> 36:05.000]  когда завершится нулевая расстояние
[36:05.000 --> 36:07.000]  ну изначально там лежит только tс
[36:07.000 --> 36:09.000]  но потенциально
[36:09.000 --> 36:11.000]  туда можно еще что-то добавлять
[36:11.000 --> 36:13.000]  потому что если внезапно
[36:13.000 --> 36:15.000]  не создаётся есть ревро нулевого веса
[36:15.000 --> 36:17.000]  то они тоже будут добавляться
[36:17.000 --> 36:19.000]  в ту же самую очередь
[36:19.000 --> 36:21.000]  потому что до них расстояние будет тоже нулевым
[36:21.000 --> 36:23.000]  они будут постепенно добавляться вот здесь и там
[36:23.000 --> 36:25.000]  если x 0
[36:25.000 --> 36:27.000]  и вес будет 0
[36:27.000 --> 36:29.000]  тогда будут добавляться все на нулевую
[36:29.000 --> 36:31.000]  но это нормально
[36:31.000 --> 36:33.000]  главное что смотрите
[36:33.000 --> 36:34.000]  Ψ
[36:34.000 --> 36:38.000]  то я точно найду все верхи на сцене 0
[36:41.000 --> 36:43.000]  ну если я разм restoлю ревро нулевого веса
[36:43.000 --> 36:45.000]  то все что достельно к ревру нулевого веса из с
[36:45.000 --> 36:47.000]  я точно обойдусь
[36:47.000 --> 36:49.000]  я сначала рас häрс
[36:49.000 --> 36:51.000]  и получу такие першинки
[36:51.000 --> 36:53.000]  теперь мы격м раскроем
[36:53.000 --> 36:55.000]  – и т.д. wounds
[36:55.000 --> 36:57.000]  понятно что я нашел все вершиныdog
[36:57.000 --> 36:59.000]  если я поочеленно буду все вершины раскрывать
[36:59.000 --> 37:01.000]  то это за решение нулевого веса
[37:01.000 --> 37:03.000]  то значит найдется
[37:03.000 --> 37:05.000]  вот, значит будет момент времени
[37:05.000 --> 37:09.000]  понятно, что очередь целиком обойдет все вот эти вот вершинки
[37:09.000 --> 37:12.000]  до них найдет правильное расстояние равное нулю
[37:12.000 --> 37:14.000]  и все их расстроят
[37:14.000 --> 37:17.000]  поэтому база более или менее чрезвычайна
[37:17.000 --> 37:23.000]  надо обратить за решением, что нулевой вовсе нет
[37:24.000 --> 37:26.000]  вот нуля
[37:26.000 --> 37:28.000]  побывает
[37:30.000 --> 37:32.000]  все вершины
[37:35.000 --> 37:38.000]  в расстоянии до которых одно нулю
[37:42.000 --> 37:44.000]  ну и, конечно, только
[37:44.000 --> 37:46.000]  ни каких-либо других вершин это больше не будет
[37:46.000 --> 37:50.000]  ну и понятно, если они в очередь поповали, то они сейчас уже раскрылись
[37:55.000 --> 37:57.000]  ну теперь переход
[38:00.000 --> 38:02.000]  переход вот эти насадьи
[38:16.000 --> 38:18.000]  вот
[38:20.000 --> 38:22.000]  то есть я считаю, что в моменте
[38:22.000 --> 38:24.000]  решения цимуста первой очереди
[38:24.000 --> 38:26.000]  я ее все рассмотрел
[38:26.000 --> 38:28.000]  нашел все вершины в расстоянии не больше нити минус один
[38:28.000 --> 38:30.000]  и все их раскрыли
[38:31.000 --> 38:33.000]  ну давайте поймем
[38:33.000 --> 38:34.000]  то есть теперь что?
[38:34.000 --> 38:38.000]  теперь нам нужно показать, что все вершины на расстоянии х будут рассмотрены в этой очереди
[38:38.000 --> 38:40.000]  и раскроются
[38:40.000 --> 38:42.000]  все вершины с меньшим расстоянием уже
[38:42.000 --> 38:44.000]  они уже доказаны
[38:44.000 --> 38:46.000]  теперь мы рассмотрим путь вершин на расстоянии х
[38:46.000 --> 38:48.000]  в своем договаривании
[38:48.000 --> 38:50.000]  х на миллионов на микс
[38:54.000 --> 38:56.000]  дырный микс
[38:58.000 --> 39:00.000]  мне нужно доказать, что эта вершинка побывает
[39:00.000 --> 39:02.000]  в очереди с уровнем х
[39:02.000 --> 39:04.000]  и раскроется
[39:04.000 --> 39:06.000]  а я за нее найду край вот этой
[39:06.000 --> 39:08.000]  ну хорошо, вот если здесь путь
[39:08.000 --> 39:10.000]  имеет вес х
[39:10.000 --> 39:12.000]  то давайте рассмотрим вот на эту пути
[39:12.000 --> 39:14.000]  вот последнюю вершинку
[39:14.000 --> 39:16.000]  на которой расстояние не х
[39:16.000 --> 39:18.000]  это такая вершина
[39:18.000 --> 39:20.000]  на пути, что она может стоимость уменьшиться
[39:20.000 --> 39:22.000]  ну понятно, если все суммарно х
[39:22.000 --> 39:24.000]  то у меня может быть несколько
[39:24.000 --> 39:26.000]  последних, которые нулевые
[39:26.000 --> 39:28.000]  ну я вот сейчас
[39:28.000 --> 39:30.000]  нахожу первое не нулевое его
[39:30.000 --> 39:32.000]  и смотрю на его начало
[39:34.000 --> 39:36.000]  это последняя вершина
[39:36.000 --> 39:38.000]  на этой пути
[39:38.000 --> 39:40.000]  расстояние которой не х
[39:42.000 --> 39:44.000]  такая же, что
[39:44.000 --> 39:46.000]  расстояние у нее
[39:46.000 --> 39:48.000]  уменьшилось
[39:50.000 --> 39:52.000]  вот
[39:52.000 --> 39:54.000]  ну тогда понятно, что
[39:54.000 --> 39:56.000]  по предположению нукции
[39:56.000 --> 39:58.000]  у была уже рассмотрена
[39:58.000 --> 40:00.000]  да у нее было найдено правильное расстояние
[40:00.000 --> 40:02.000]  и она была раскрыта
[40:02.000 --> 40:04.000]  а если у меня
[40:04.000 --> 40:06.000]  у меня есть
[40:06.000 --> 40:08.000]  у меня есть
[40:08.000 --> 40:10.000]  у меня есть
[40:10.000 --> 40:12.000]  и она была раскрыта
[40:12.000 --> 40:14.000]  да, значит
[40:14.000 --> 40:16.000]  по предположению нукции ум
[40:16.000 --> 40:18.000]  проскрыта
[40:18.000 --> 40:20.000]  ну раз она раскрыта
[40:20.000 --> 40:22.000]  то значит в частности вот в этой вершинке
[40:22.000 --> 40:24.000]  тоже найдено правильное расстояние
[40:24.000 --> 40:26.000]  потому что у меня вот
[40:26.000 --> 40:28.000]  все эта часть одного простащего пути
[40:28.000 --> 40:30.000]  я знаю про чьем состояние вот крестного ум
[40:30.000 --> 40:32.000]  и еще плюс этой вершинкой я тоже добавил
[40:32.000 --> 40:34.000]  в компьютером участие
[40:34.000 --> 40:36.000]  вот, ну а дальше здесь серебрами
[40:36.000 --> 40:38.000]  это его местная пути
[40:38.000 --> 40:40.000]  и я рассматриваю
[40:40.000 --> 40:42.000]  последнее не нулевое ребро
[40:42.000 --> 40:44.000]  а дальше у меня будет куча нулевых ребр
[40:44.000 --> 40:46.000]  и понятно, что если вот эта вершинка
[40:46.000 --> 40:48.000]  Т
[40:48.000 --> 40:50.000]  я ее добавил, понятное дело в очередь
[40:50.000 --> 40:52.000]  и дальше из нее я увижу все ребра нулевого веса
[40:52.000 --> 40:54.000]  точно так
[40:54.000 --> 40:56.000]  если у меня Т в очереди
[40:56.000 --> 40:58.000]  значит по ребрам нулевого веса
[40:58.000 --> 41:00.000]  я тоже все буду потихонечку раскрывать
[41:00.000 --> 41:02.000]  значит Т у меня тоже
[41:02.000 --> 41:04.000]  просмотрено
[41:04.000 --> 41:06.000]  да не будет найдено правильное расстояние
[41:06.000 --> 41:08.000]  ладно, что у нас просмотрено
[41:08.000 --> 41:10.000]  до Т
[41:12.000 --> 41:14.000]  найдено правильное расстояние
[41:16.000 --> 41:18.000]  правильное расстояние
[41:20.000 --> 41:22.000]  и она
[41:22.000 --> 41:24.000]  лежит в X, конечно
[41:30.000 --> 41:32.000]  значит
[41:32.000 --> 41:34.000]  В тоже
[41:34.000 --> 41:36.000]  все будет нравится
[41:50.000 --> 41:52.000]  похоже на право
[41:58.000 --> 42:00.000]  просмотрено
[42:00.000 --> 42:02.000]  а Т точно попадет в X
[42:02.000 --> 42:04.000]  не в X минус первую
[42:04.000 --> 42:06.000]  если до У расстояние
[42:06.000 --> 42:08.000]  скажем для определенности
[42:08.000 --> 42:10.000]  Х минус один
[42:10.000 --> 42:12.000]  ведь до Т нулевое ребро
[42:12.000 --> 42:14.000]  я взял на последнюю
[42:14.000 --> 42:16.000]  на которой расстояние меньше Х
[42:16.000 --> 42:18.000]  до всех нулевых ребро ровно Х
[42:18.000 --> 42:20.000]  то есть между У и Т не нулевое ребро
[42:20.000 --> 42:22.000]  между У и Т не нулевое
[42:22.000 --> 42:24.000]  по факту рассматриваю
[42:24.000 --> 42:26.000]  последнее не нулевое ребро
[42:26.000 --> 42:28.000]  вот это не ноль, а все остальные
[42:32.000 --> 42:34.000]  ну хорошо
[42:34.000 --> 42:36.000]  тогда давайте перейдем еще 5 минут
[42:36.000 --> 42:38.000]  потом продолжим
[42:38.000 --> 42:40.000]  вот здесь будет
[42:40.000 --> 42:42.000]  такая
[42:42.000 --> 42:44.000]  карту С
[42:44.000 --> 42:46.000]  ну почему
[42:46.000 --> 42:48.000]  на эту слоганную облему
[42:48.000 --> 42:50.000]  оно берется от того, что каждая крышина будет раскрыта
[42:50.000 --> 42:52.000]  максимум один раз
[42:52.000 --> 42:54.000]  за счет того, что я восстановил коллажончик
[42:54.000 --> 42:56.000]  а эта крышина раскрыта
[42:56.000 --> 42:58.000]  я больше ее не раскрываю
[42:58.000 --> 43:00.000]  поэтому суммарно
[43:00.000 --> 43:02.000]  она будет раскрыта на один раз
[43:02.000 --> 43:04.000]  ну а НК
[43:04.000 --> 43:06.000]  потому что у меня НК 4
[43:06.000 --> 43:08.000]  и каждая крышина потенциально может быть
[43:08.000 --> 43:10.000]  запушена максимум
[43:10.000 --> 43:12.000]  как раз к капусту на очередь
[43:12.000 --> 43:14.000]  показали, что
[43:14.000 --> 43:16.000]  если крышина впервые была добавлена в очередь
[43:16.000 --> 43:18.000]  в номер Х, тогда потенциально она может добавиться
[43:18.000 --> 43:20.000]  в очередь из минус один, а если вдвоем взяли под
[43:20.000 --> 43:22.000]  Х минус К
[43:22.000 --> 43:24.000]  а меньше в очередь добавлена быть не может
[43:24.000 --> 43:26.000]  потому что она должна была быть рассматривана как раньше
[43:26.000 --> 43:28.000]  ну значит суммарно
[43:28.000 --> 43:30.000]  НК примерно
[43:30.000 --> 43:32.000]  один, ну не важно
[43:32.000 --> 43:34.000]  вот
[43:34.000 --> 43:36.000]  ну и поэтому суммарно
[43:36.000 --> 43:38.000]  10 будет прекрасно
[43:38.000 --> 43:40.000]  вот
[43:40.000 --> 43:42.000]  ну это очень хорошо, если
[43:42.000 --> 43:44.000]  маленькое число какое-нибудь
[43:44.000 --> 43:46.000]  да, если в НК все может быть
[43:46.000 --> 43:48.000]  так, ну это
[43:48.000 --> 43:50.000]  последняя вариация
[43:50.000 --> 43:52.000]  ВФС, это второнний ВФС
[43:52.000 --> 43:54.000]  второнний
[43:54.000 --> 43:56.000]  второнний ВФС
[43:56.000 --> 43:58.000]  ВФС
[43:58.000 --> 44:00.000]  здесь
[44:00.000 --> 44:02.000]  задача такая, что у вас
[44:02.000 --> 44:04.000]  данные
[44:04.000 --> 44:06.000]  у вас граф показывает
[44:06.000 --> 44:08.000]  опять нерфешные, то есть серебрайничного веса
[44:08.000 --> 44:10.000]  вот
[44:10.000 --> 44:12.000]  и вам дадут две конкретные вершины
[44:12.000 --> 44:14.000]  между которыми есть какие-то расстояния
[44:22.000 --> 44:24.000]  вот, то есть не вот одной до всех
[44:24.000 --> 44:26.000]  а от одной до другой
[44:26.000 --> 44:28.000]  конкретной, другой вершины
[44:28.000 --> 44:30.000]  ну понятно
[44:30.000 --> 44:32.000]  в частном случае обычного ВФС
[44:32.000 --> 44:34.000]  можно будет делать обычный ВФС
[44:34.000 --> 44:36.000]  в частности
[44:36.000 --> 44:38.000]  мы тогда получили здесь вот ДСДС
[44:38.000 --> 44:40.000]  но вот здесь можно сделать
[44:40.000 --> 44:42.000]  второнний ВФС, который иногда работает
[44:42.000 --> 44:44.000]  чуть-чуть эффективнее
[44:44.000 --> 44:46.000]  больше, чем когда надо
[44:46.000 --> 44:48.000]  ну идея очень простая
[44:48.000 --> 44:50.000]  давайте просто ВФС запустим с двух сторон
[44:50.000 --> 44:52.000]  у нас сначала
[44:52.000 --> 44:54.000]  мы скажем, с решенной стене будет
[44:54.000 --> 44:56.000]  1.С
[44:56.000 --> 44:58.000]  и на сцене 1.С
[44:58.000 --> 45:00.000]  потом от НИР
[45:00.000 --> 45:02.000]  найдем все решенные на сцене 2.С
[45:02.000 --> 45:04.000]  от НИР решенные на сцене 2.С
[45:04.000 --> 45:06.000]  ну и так далее, в каким-то состоянии будем идти, пока они в перегрузе не перезерутся
[45:08.000 --> 45:10.000]  я нашел на позицию
[45:10.000 --> 45:12.000]  на расстоянии К здесь
[45:12.000 --> 45:14.000]  и на сцене К здесь, и не больше
[45:14.000 --> 45:16.000]  то есть ожидай вот этих областей
[45:16.000 --> 45:18.000]  и выиграй здесь
[45:18.000 --> 45:20.000]  вот, и тогда ты узнаешь, что
[45:20.000 --> 45:22.000]  расстояние ДСДСС
[45:22.000 --> 45:24.000]  правильное расстояние
[45:24.000 --> 45:26.000]  будет странно
[45:26.000 --> 45:28.000]  видим
[45:28.000 --> 45:30.000]  по всем промежуточным решением М
[45:30.000 --> 45:32.000]  расстояние играется так
[45:32.000 --> 45:34.000]  ДСМ
[45:34.000 --> 45:36.000]  плюс ДТМСМ
[45:40.000 --> 45:42.000]  ну где ДСМ
[45:42.000 --> 45:44.000]  это то расстояние, которое приходится
[45:44.000 --> 45:46.000]  к расстоянию ДСДСС
[45:46.000 --> 45:48.000]  это тот ДССС
[45:48.000 --> 45:50.000]  то есть ДЗОДСС
[45:50.000 --> 45:52.000]  ДСПМТР
[45:52.000 --> 45:54.000]  это то расстояние, которое приходится к ДТМСМ
[45:56.000 --> 45:58.000]  вот
[45:58.000 --> 46:00.000]  вот так вот, да?
[46:00.000 --> 46:02.000]  ну да
[46:10.000 --> 46:12.000]  ну, а если здесь я вам что-то сказать
[46:12.000 --> 46:14.000]  нормально, что то факто
[46:14.000 --> 46:16.000]  прозвучает параллельно к ДВДССС
[46:16.000 --> 46:18.000]  первый
[46:18.000 --> 46:20.000]  это обычный BFX
[46:20.000 --> 46:22.000]  на обычном графе
[46:22.000 --> 46:24.000]  который по слоям все рассматривает
[46:24.000 --> 46:26.000]  а второй
[46:26.000 --> 46:28.000]  это на самом деле BFX на обратном графе
[46:28.000 --> 46:30.000]  потому что мне нужно сказать
[46:30.000 --> 46:32.000]  вот это вот
[46:32.000 --> 46:34.000]  поэтому мне лучше было
[46:34.000 --> 46:36.000]  вот эти все ребра развернуть
[46:36.000 --> 46:38.000]  я вожу противоположную ориентацию
[46:38.000 --> 46:40.000]  все ребра инвертирую
[46:40.000 --> 46:42.000]  и запускаю BFX
[46:42.000 --> 46:44.000]  на реверсный граф
[46:44.000 --> 46:46.000]  на реверсный граф
[46:46.000 --> 46:48.000]  здесь реверсный граф
[46:48.000 --> 46:50.000]  и все направления к инвертирую
[46:50.000 --> 46:52.000]  потому что мне нужно идти противоположную ориентацию
[46:52.000 --> 46:54.000]  вот
[46:54.000 --> 46:56.000]  давайте еще раз пропишу сюда
[46:56.000 --> 46:58.000]  как бы завершаем
[47:02.000 --> 47:04.000]  когда будет финальная
[47:04.000 --> 47:06.000]  вершина
[47:06.000 --> 47:08.000]  или как бы
[47:08.000 --> 47:10.000]  собеса
[47:10.000 --> 47:12.000]  когда
[47:12.000 --> 47:14.000]  будет финальная
[47:16.000 --> 47:18.000]  вершина В
[47:22.000 --> 47:24.000]  просмотрена с обеих сторон
[47:32.000 --> 47:34.000]  и дальше я скажу
[47:34.000 --> 47:36.000]  что вот эта вершина вот эта
[47:36.000 --> 47:38.000]  вот
[47:40.000 --> 47:42.000]  заметьте
[47:42.000 --> 47:44.000]  я не утверждаю
[47:44.000 --> 47:46.000]  что расстояние обязательно будет
[47:46.000 --> 47:48.000]  через эту вершину В
[47:48.000 --> 47:50.000]  возможно оно будет как по-другому
[47:50.000 --> 47:52.000]  то есть
[47:52.000 --> 47:54.000]  не всегда
[47:54.000 --> 47:56.000]  правильный будет вот эта вершина
[47:56.000 --> 47:58.000]  вот эта вершина
[47:58.000 --> 48:00.000]  которая вы нашли
[48:00.000 --> 48:02.000]  а
[48:04.000 --> 48:06.000]  ну сейчас
[48:06.000 --> 48:08.000]  заметьте
[48:10.000 --> 48:12.000]  а
[48:14.000 --> 48:16.000]  а
[48:20.000 --> 48:22.000]  цветы вот перед ней
[48:26.000 --> 48:28.000]  если вы может не нашли
[48:28.000 --> 48:30.000]  значит нас
[48:30.000 --> 48:32.000]  меньше
[48:32.000 --> 48:34.000]  ну как бы то да
[48:34.000 --> 48:36.000]  ну дело в том что мы могли
[48:36.000 --> 48:38.000]  найти за одно расширение
[48:38.000 --> 48:40.000]  сразу много вершин
[48:40.000 --> 48:42.000]  если какую-то мы нашли первой
[48:42.000 --> 48:44.000]  это еще не значит что она подходит
[48:44.000 --> 48:46.000]  наверное
[48:46.000 --> 48:48.000]  ну ни в кого да
[48:48.000 --> 48:50.000]  тогда будут расширенные вершины
[48:50.000 --> 48:52.000]  да у меня больше капель секунды
[48:52.000 --> 48:54.000]  я полностью рассмотрел
[48:54.000 --> 48:56.000]  давайте так
[48:56.000 --> 48:58.000]  я делаю так
[48:58.000 --> 49:00.000]  я сначала нашел первый свой с обеих сторон
[49:00.000 --> 49:02.000]  потом второй свой с обеих сторон
[49:02.000 --> 49:04.000]  я пересекся когда они впервые пересеклись
[49:04.000 --> 49:06.000]  то есть нашлась вершина с обеих сторон
[49:06.000 --> 49:08.000]  я до конца обрабатывал оба слоя
[49:08.000 --> 49:10.000]  с левой и с правой
[49:10.000 --> 49:12.000]  и вот после этого нахожу вот эту вершину
[49:12.000 --> 49:14.000]  давайте совершим охот
[49:14.000 --> 49:16.000]  когда
[49:16.000 --> 49:18.000]  будет найдена вершина
[49:18.000 --> 49:20.000]  и будут целиком
[49:20.000 --> 49:22.000]  а мы имеем оба слоя
[49:22.000 --> 49:24.000]  и будут целиком рассмотрены оба слоя
[49:24.000 --> 49:26.000]  вот еще
[49:26.000 --> 49:28.000]  вот это
[49:28.000 --> 49:30.000]  почему нужно
[49:30.000 --> 49:32.000]  лечь свой слоя
[49:32.000 --> 49:34.000]  рассмотреть
[49:36.000 --> 49:38.000]  может не нужно
[49:42.000 --> 49:44.000]  давайте я делаю так
[49:44.000 --> 49:46.000]  сейчас докажу потом пойму
[49:46.000 --> 49:48.000]  может быть там что-то там
[49:48.000 --> 49:50.000]  например давай так
[49:50.000 --> 49:52.000]  почему-то это верно
[49:54.000 --> 49:56.000]  ну смотрите если
[49:56.000 --> 49:58.000]  поскольку у меня есть вот эта вершина
[49:58.000 --> 50:00.000]  которая попала в оба облачка
[50:00.000 --> 50:02.000]  с левой и с правой
[50:02.000 --> 50:04.000]  то я точно знаю что расстояние
[50:04.000 --> 50:06.000]  не больше чем 2к
[50:06.000 --> 50:08.000]  я прям железно знаю
[50:08.000 --> 50:10.000]  если я с левой обработал целиком
[50:10.000 --> 50:12.000]  с левой и с правой
[50:12.000 --> 50:14.000]  и они пересеклись значит есть
[50:14.000 --> 50:16.000]  будны не больше чем 2к
[50:16.000 --> 50:18.000]  ну теперь понятно
[50:18.000 --> 50:20.000]  ответ не больше чем вот столько
[50:20.000 --> 50:22.000]  и примерно такой величины
[50:22.000 --> 50:24.000]  я не нашел
[50:24.000 --> 50:26.000]  я знаю будны
[50:26.000 --> 50:28.000]  что-то в этом
[50:28.000 --> 50:30.000]  ну пусть есть только более
[50:30.000 --> 50:32.000]  короткий путь
[50:32.000 --> 50:34.000]  предположим что будет расстояние
[50:34.000 --> 50:36.000]  меньше чем 2к
[50:42.000 --> 50:44.000]  ну давайте мы нарисуем
[50:52.000 --> 50:54.000]  давайте мы нарисуем
[50:56.000 --> 50:58.000]  пусть на пути
[50:58.000 --> 51:00.000]  я в кзт л и
[51:00.000 --> 51:02.000]  л меньше чем 2к
[51:02.000 --> 51:04.000]  ну смотрите
[51:04.000 --> 51:06.000]  во-первых если незаметно есть
[51:06.000 --> 51:08.000]  не больше чем 2к
[51:10.000 --> 51:12.000]  тогда
[51:12.000 --> 51:14.000]  такой путь я точно найду
[51:14.000 --> 51:16.000]  если л не больше чем k
[51:16.000 --> 51:18.000]  то ну этот путь будет найден
[51:18.000 --> 51:20.000]  потому что я целиком слезу
[51:20.000 --> 51:22.000]  то есть я по парку расширялся до 2к
[51:22.000 --> 51:24.000]  если я попала не больше чем 2к
[51:24.000 --> 51:26.000]  то я точно найду
[51:26.000 --> 51:28.000]  вот здесь
[51:28.000 --> 51:30.000]  3т равный т
[51:30.000 --> 51:32.000]  я получу правильно
[51:32.000 --> 51:34.000]  т
[51:34.000 --> 51:36.000]  обнаружится
[51:36.000 --> 51:38.000]  одна руки на слева
[51:40.000 --> 51:42.000]  следует
[51:42.000 --> 51:44.000]  тс т
[51:44.000 --> 51:46.000]  будет правильно
[51:50.000 --> 51:52.000]  ну а иначе здесь
[51:52.000 --> 51:54.000]  если это будет достаточно большое
[51:54.000 --> 51:56.000]  то давайте рассмотрим на этом пути
[51:56.000 --> 51:58.000]  типа вершинку с номером k
[52:02.000 --> 52:04.000]  давайте рассмотрим вершину
[52:04.000 --> 52:06.000]  по расстоянию которой ровно k
[52:10.000 --> 52:12.000]  вот здесь вот получается
[52:12.000 --> 52:14.000]  точность и карера
[52:14.000 --> 52:16.000]  здесь вот да вот здесь
[52:16.000 --> 52:18.000]  карера
[52:18.000 --> 52:20.000]  значит тогда вот внутри
[52:20.000 --> 52:22.000]  там найдется сколько
[52:24.000 --> 52:26.000]  л минус k
[52:26.000 --> 52:28.000]  с одной стороны с другой стороны
[52:28.000 --> 52:30.000]  поскольку л меньше чем 2к
[52:30.000 --> 52:32.000]  то здесь меньше чем k
[52:34.000 --> 52:36.000]  вот
[52:36.000 --> 52:38.000]  ну значит м будет найдена с обеих сторон
[52:38.000 --> 52:40.000]  с левой и с правой
[52:40.000 --> 52:42.000]  то есть м лежит
[52:42.000 --> 52:44.000]  на расстоянии k по л дс
[52:44.000 --> 52:46.000]  значит будет найдена
[52:46.000 --> 52:48.000]  потому что я k с этой стороны посмотрел
[52:48.000 --> 52:50.000]  то есть с правой стороны
[52:50.000 --> 52:52.000]  то есть с стороны d
[52:52.000 --> 52:54.000]  потому что здесь я тоже k смотрел
[52:54.000 --> 52:56.000]  в этом случае
[52:56.000 --> 52:58.000]  м будет
[52:58.000 --> 53:00.000]  найдена с обеих сторон
[53:18.000 --> 53:20.000]  не совсем
[53:20.000 --> 53:22.000]  смотрите я
[53:22.000 --> 53:24.000]  утверждаю что
[53:24.000 --> 53:26.000]  нет я просто хочу
[53:26.000 --> 53:28.000]  доказать
[53:28.000 --> 53:30.000]  что минимум вот этот
[53:30.000 --> 53:32.000]  минимум в правильном расстоянии
[53:32.000 --> 53:34.000]  как я это делаю
[53:34.000 --> 53:36.000]  я говорю что если оно
[53:36.000 --> 53:38.000]  ровно 2к то я вот здесь
[53:38.000 --> 53:40.000]  нашел
[53:40.000 --> 53:42.000]  если оно вдруг меньше
[53:42.000 --> 53:44.000]  то я утверждаю что
[53:44.000 --> 53:46.000]  если оно меньше
[53:46.000 --> 53:48.000]  то я утверждаю что существует
[53:48.000 --> 53:50.000]  такое дым для которого
[53:50.000 --> 53:52.000]  такая сумма равна тому числу
[53:52.000 --> 53:54.000]  я здесь не делаю
[53:54.000 --> 53:56.000]  я знаю что отсюда до сюда
[53:56.000 --> 53:58.000]  я нашел расстояние k
[53:58.000 --> 54:00.000]  и отсюда до сюда я нашел расстояние m
[54:00.000 --> 54:02.000]  вот эти расположенные правила
[54:02.000 --> 54:04.000]  их сумма равна тому числу
[54:04.000 --> 54:06.000]  если будет более короткий
[54:06.000 --> 54:08.000]  то я знаю через какую центральную
[54:08.000 --> 54:10.000]  решению
[54:10.000 --> 54:12.000]  ну наверно это можно уточнить
[54:12.000 --> 54:14.000]  на случай когда я читал
[54:14.000 --> 54:16.000]  по ссылке в описании
[54:16.000 --> 54:18.000]  под видео
[54:18.000 --> 54:20.000]  так
[54:20.000 --> 54:22.000]  ну а так вроде бы доказать
[54:26.000 --> 54:28.000]  вот то есть за счет
[54:28.000 --> 54:30.000]  это может быть нужно
[54:30.000 --> 54:32.000]  как раз вот так
[54:32.000 --> 54:34.000]  инстинкционно расширяющаяся графка
[54:34.000 --> 54:36.000]  представьте что у вас
[54:36.000 --> 54:38.000]  есть какая-то решетка
[54:38.000 --> 54:40.000]  и у каждой расширы примерно
[54:40.000 --> 54:42.000]  одинаковое количество средей
[54:42.000 --> 54:46.160]  Каждый раз, когда он приходит в вершинку, у вас появляются несколько новых соседей
[54:46.160 --> 54:50.040]  Здесь выгибает вам 3 таких соседей
[54:50.040 --> 54:54.480]  У каждого из них, давайте, там, еще 3 таких новых соседей
[54:54.480 --> 54:57.680]  И каждый из них опять еще дает таких новых соседей, и так далее
[54:57.680 --> 55:01.760]  То есть у вас будет походка, там, каждый свой специально растет, каждый раз все три раза
[55:01.760 --> 55:03.760]  И то же самое с названием D
[55:03.760 --> 55:08.000]  У D есть соседа, у каждого из них есть 3 новых соседа
[55:08.000 --> 55:10.000]  И так далее, драф потенциально растет
[55:10.000 --> 55:15.040]  Ну и вот теперь представьте, что если вы этот драф ухранить как бы не хотите
[55:15.040 --> 55:18.080]  Нам, например, ждать минуту
[55:18.080 --> 55:20.560]  Сейчас потом может быть можно, если вы какую-нибудь головоломку решаете
[55:20.560 --> 55:23.360]  У вас вершина графа, это состояние головоломки
[55:23.360 --> 55:26.240]  Где какие числа таблички распологены
[55:26.240 --> 55:31.280]  Как именно киньти кубики лежат в большом квадратике
[55:31.280 --> 55:37.280]  Например, у вас какая-нибудь головоломка такая, что у вас какие-нибудь квадратики здесь лежали
[55:37.280 --> 55:39.280]  И можно так перевернуть, переставить
[55:39.280 --> 55:44.800]  Вот, тогда вершина графа может задавать расположение этих квадратиков внутри большого квадрата
[55:44.800 --> 55:48.800]  Ну а ребро – это переход, да, один ход, как можно один вместе
[55:48.800 --> 55:50.800]  Какая-нибудь головоломка
[55:50.800 --> 55:53.840]  Ну и тогда, как раз, у вас степень кажущей примерно одинаковая
[55:53.840 --> 55:57.360]  Потому что количество ходов из каждого состояния примерно одинаковая
[55:57.360 --> 56:02.000]  Вот, и тогда, вместо того, чтобы упускать обычные ДВП с СТС в Т
[56:02.000 --> 56:04.000]  Чтобы найти внимание к действию
[56:04.720 --> 56:06.720]  Которая, собственно, вот так вот
[56:06.720 --> 56:09.920]  Она и каждый раз все больше и больше вершин рассматривала голову
[56:09.920 --> 56:15.600]  Значит, тогда в этом случае вы бы рассмотрели, типа, там, 3 степени л вершины
[56:15.600 --> 56:18.400]  А в случае, когда вы идете параллельно с двух сторон
[56:18.400 --> 56:22.400]  Вы рассмотрите примерно 2 на 300 миллиметров по лампочкам
[56:26.400 --> 56:28.880]  Вы закончите, когда они в первой игре иссякаются
[56:28.880 --> 56:30.880]  Вы рассмотрите, например, левый пополам
[56:30.960 --> 56:34.960]  Вот, и поэтому можно в силе сэкономить вершин в основном
[56:34.960 --> 56:38.960]  Ну вот, и там нужны, наверное, некоторые таблицы, чтобы эффективно хранить
[56:38.960 --> 56:43.920]  Вот здесь, за такой реализацией, я не храню граф явно
[56:43.920 --> 56:47.920]  Потому что если храню граф явно, то быстрее, чем в обычном ВФС, не получится сделать
[56:47.920 --> 56:55.920]  Ну а если вот эту же функцию Д, которую я храню, если хранить там в коинструктурке
[56:55.920 --> 56:58.960]  То есть если хранить таблицы, например, в состоянии расшириваться
[56:58.960 --> 57:07.960]  И расстояние в них хранить кэшматы, то вполне себе получится ускорение по сравнению с обычным односпоронним
[57:16.960 --> 57:20.960]  Да, но, наверное, получится, если хранить все это в обычной форме
[57:20.960 --> 57:24.960]  Просто потому что мы пройдемся по меньшему числе
[57:25.000 --> 57:29.000]  Ну, да, это справедливость, в общем-то, да
[57:29.000 --> 57:33.000]  Но вместо того, если у вас есть ресурсы, как хранить граф
[57:33.000 --> 57:37.000]  То почему оно мне обойтись?
[57:37.000 --> 57:41.000]  Ну, тут, как говорится, в целом, да
[57:41.000 --> 57:45.000]  Если у нас есть память для хранения, и у меня нет памяти на то, чтобы еще раз хранить
[57:45.000 --> 57:47.000]  То можно так сделать, согласен
[57:49.000 --> 57:51.000]  Попросим
[57:51.040 --> 57:55.040]  Так а можете еще раз объяснить, как с хэш-таблицей?
[57:55.040 --> 57:57.040]  С хэш-таблицей, ну, смотрите, мне нужно хранить
[57:57.040 --> 57:59.040]  Мне нужно хранить по факту расстояния D
[57:59.040 --> 58:02.040]  Да, у меня ВФС использует массив D
[58:02.040 --> 58:04.040]  Мне нужно до каждой шины хранить расстояние до 0
[58:06.040 --> 58:09.040]  Вот поскольку теперь у меня граф огромный
[58:09.040 --> 58:13.040]  И, ну, я не хочу заводить массив D до каждой шины
[58:13.040 --> 58:15.040]  Все они хотят заводить, так разве что, свое значение
[58:15.040 --> 58:18.040]  Я храню по факту хэш-таблицей, которую постепенно добавляю
[58:18.080 --> 58:20.080]  Когда мне нужно
[58:20.080 --> 58:22.080]  Ну, да
[58:22.080 --> 58:24.080]  Ну, как мавку вот говорят
[58:24.080 --> 58:26.080]  Когда появляется необходимость хранить D, вы его заводите
[58:26.080 --> 58:28.080]  Пока нет, все будет
[58:30.080 --> 58:34.080]  А тогда, как мы, ребра хранить, которые тоже великой массива?
[58:36.080 --> 58:38.080]  Ну, данный контент, значит, можно не хранить
[58:38.080 --> 58:40.080]  А каждый раз на ходу вычислять
[58:40.080 --> 58:42.080]  Если вы знаете состояние вашей игрунки
[58:42.080 --> 58:44.080]  То вам не надо хранить все ровно
[58:44.080 --> 58:46.080]  Вы же сами можете посчитать
[58:46.120 --> 58:48.120]  А когда передвинуть? Как оно происходит?
[58:48.120 --> 58:50.120]  Ладно, более или нет?
[58:50.120 --> 58:52.120]  Понятно
[58:52.120 --> 58:54.120]  Так, хорошо
[58:54.120 --> 58:56.120]  Тогда едем дальше
[58:56.120 --> 58:58.120]  Переходим к его виду D-ти
[59:05.120 --> 59:08.120]  Вот это решение задача хрэш-таблицей
[59:08.120 --> 59:11.120]  В случае произволения отрицательной функции стоить
[59:11.120 --> 59:14.120]  Здесь, к этому либу, это просто
[59:16.120 --> 59:19.120]  Функция, что не отрицает отрицательную функцию
[59:19.120 --> 59:20.120]  Вот
[59:20.120 --> 59:22.120]  И опять задача будет с
[59:22.120 --> 59:24.120]  Найти все расстояния вот здесь, вот здесь
[59:26.120 --> 59:28.120]  Найти здесь, вот здесь
[59:28.160 --> 59:30.160]  Так
[59:44.160 --> 59:46.160]  Так
[59:46.160 --> 59:48.160]  Идея здесь будет такая
[59:48.160 --> 59:50.160]  В каком смысле будет обобщение
[59:50.160 --> 59:52.160]  того, что мы делали в BFS
[59:52.160 --> 59:54.160]  В BFS, на самом деле, я всегда
[59:54.160 --> 59:56.160]  что в обычном BFS, что в 0k BFS
[59:56.200 --> 59:58.200]  делал следующее
[59:58.200 --> 01:00:00.200]  Я брал вершину с минимальным D
[01:00:00.200 --> 01:00:02.200]  и раскрывал ее
[01:00:02.200 --> 01:00:04.200]  Они не лежат в каких-то очередях
[01:00:04.200 --> 01:00:06.200]  Но, по сути, я просто выбирал вершину
[01:00:06.200 --> 01:00:07.200]  с минимальным значением D
[01:00:07.200 --> 01:00:08.200]  и ее раскрывал
[01:00:08.200 --> 01:00:10.200]  Так делал, пока есть нераспредележность
[01:00:10.200 --> 01:00:12.200]  Давайте ровно это сделаем
[01:00:12.200 --> 01:00:13.200]  Пока
[01:00:13.200 --> 01:00:15.200]  Ну, там, как обычно, изначально
[01:00:15.200 --> 01:00:18.200]  Д, на самом деле, у него все остальные бесконечности
[01:00:18.200 --> 01:00:20.200]  Все остальные
[01:00:20.200 --> 01:00:22.200]  Бесконечности
[01:00:22.200 --> 01:00:24.200]  Пока
[01:00:24.240 --> 01:00:26.240]  Есть нераспредележность
[01:00:33.240 --> 01:00:35.240]  Я беру вершину с минимальным значением D
[01:00:35.240 --> 01:00:37.240]  А среди не раскрываю
[01:00:37.240 --> 01:00:39.240]  Выбираю вершину с минимальным значением D
[01:00:39.240 --> 01:00:41.240]  и раскрываю
[01:00:43.240 --> 01:00:47.240]  Среди всех нераспредележност
[01:00:49.240 --> 01:00:51.240]  B
[01:00:51.240 --> 01:00:53.240]  B
[01:00:53.280 --> 01:00:55.280]  С минимальным значением D
[01:01:00.280 --> 01:01:02.280]  И раскрываю
[01:01:06.280 --> 01:01:08.280]  Конец
[01:01:23.280 --> 01:01:25.280]  Возьмите вершину с минимальным значением D
[01:01:35.280 --> 01:01:37.280]  Возьмите вершину с минимальным значением D
[01:01:37.280 --> 01:01:39.280]  Возьмите вершину с минимальным значением D
[01:01:39.280 --> 01:01:41.280]  Возьмите вершину с минимальным значением D
[01:01:41.280 --> 01:01:43.280]  Возьмите вершину с минимальным значением D
[01:01:43.280 --> 01:01:45.280]  Возьмите вершину с минимальным значением D
[01:01:45.280 --> 01:01:47.280]  Возьмите вершину с минимальным значением D
[01:01:47.280 --> 01:01:49.280]  Возьмите вершину с минимальным значением D
[01:01:49.280 --> 01:01:51.280]  Возьмите вершину с минимальным значением D
[01:01:51.320 --> 01:01:53.320]  Держится следующее
[01:01:58.320 --> 01:02:00.320]  Что когда я какую-то вершину раскрываю
[01:02:00.320 --> 01:02:02.320]  В этот момент Dnion найдено правильное расстояние
[01:02:02.320 --> 01:02:04.320]  То есть так же как раньше
[01:02:04.320 --> 01:02:06.320]  Потенциально для каждой вершинки
[01:02:06.320 --> 01:02:08.320]  D от V может много раз обновляться
[01:02:08.320 --> 01:02:10.320]  Я нашел один путь
[01:02:10.320 --> 01:02:12.320]  Потому что более короткий, еще более короткий
[01:02:12.320 --> 01:02:14.320]  То есть само по себе D от V
[01:02:14.320 --> 01:02:16.320]  Может уменьшаться
[01:02:16.320 --> 01:02:18.320]  Может уменьшаться для данной вершины
[01:02:18.320 --> 01:02:20.320]  Но в момент, когда я ее раскрываю
[01:02:20.320 --> 01:02:22.320]  То есть когда ее D минимально возможно
[01:02:22.320 --> 01:02:24.320]  Среди всех не раскрывается
[01:02:24.320 --> 01:02:26.320]  Вот в этот момент Dnion посчитано
[01:02:26.320 --> 01:02:28.320]  Уже правильное расстояние
[01:02:28.320 --> 01:02:30.320]  Потому что никак по-другому я его уменьшить не смогу
[01:02:30.320 --> 01:02:32.320]  Я нашел какой-то путь, раскрываю
[01:02:32.320 --> 01:02:34.320]  Значит никаких более коротких идей
[01:02:34.320 --> 01:02:36.320]  Я Dnion не найду
[01:02:36.320 --> 01:02:38.320]  Вот собственно утверждается, что
[01:02:38.320 --> 01:02:40.320]  В момент раскрытия V
[01:02:40.320 --> 01:02:42.320]  В момент раскрытия V
[01:02:46.320 --> 01:02:48.320]  У меня будет верно, что Dnion V
[01:02:48.320 --> 01:02:50.320]  К тому Dnion S
[01:02:52.320 --> 01:02:54.320]  Ну а если это верно, то я рано или поздно
[01:02:54.320 --> 01:02:56.320]  Обойду весь граф, все вершинки раскрою
[01:02:56.320 --> 01:02:58.320]  И значит для всех вершин
[01:02:58.320 --> 01:03:00.320]  Будет найдено правильное расстояние
[01:03:04.320 --> 01:03:06.320]  Так, почему это верно?
[01:03:12.320 --> 01:03:14.320]  Ну смотрите, значит
[01:03:14.320 --> 01:03:16.320]  Давайте начнем, как вот так
[01:03:18.320 --> 01:03:20.320]  Пусть у меня вот это будет раскрыто
[01:03:20.320 --> 01:03:22.320]  Может раскрыто
[01:03:22.320 --> 01:03:24.320]  Раскрыто или не раскрыто
[01:03:28.320 --> 01:03:30.320]  Вот это все вершинки, которые уже раскрыты
[01:03:30.320 --> 01:03:32.320]  Это вершинки, которые еще не раскрыты
[01:03:34.320 --> 01:03:36.320]  Давайте первое замечание такое
[01:03:36.320 --> 01:03:38.320]  Пусть есть какая-то вершина Q
[01:03:38.320 --> 01:03:40.320]  Среди не раскрытых
[01:03:40.320 --> 01:03:42.320]  До которой кратчайший путь
[01:03:42.320 --> 01:03:44.320]  Устроен в следующем образе
[01:03:44.320 --> 01:03:46.320]  Он как-то ходит по раскрытым
[01:03:46.320 --> 01:03:48.320]  И потом заодно ребро
[01:03:48.320 --> 01:03:50.320]  Перепрыгивает из раскрытых
[01:03:52.320 --> 01:03:54.320]  И больше не победит не раскрытым никого
[01:03:54.320 --> 01:03:56.320]  То есть я начинаю так
[01:03:56.320 --> 01:03:58.320]  Пусть у не раскрытая
[01:04:00.320 --> 01:04:02.320]  И пусть кратчайший путь
[01:04:02.320 --> 01:04:04.320]  Вот с до у
[01:04:04.320 --> 01:04:06.320]  Проходит только по раскрытым
[01:04:06.320 --> 01:04:08.320]  То есть только по раскрытым и в путь
[01:04:08.320 --> 01:04:10.320]  Никакой не раскрытой функции
[01:04:12.320 --> 01:04:14.320]  Пусть кратчайший путь
[01:04:14.320 --> 01:04:16.320]  И за свободу
[01:04:18.320 --> 01:04:20.320]  Не использует других не раскрытых кратчей
[01:04:28.320 --> 01:04:30.320]  Тогда я выключаю
[01:04:30.320 --> 01:04:32.320]  Если это верно
[01:04:32.320 --> 01:04:34.320]  Если в какой-то момент времени
[01:04:34.320 --> 01:04:36.320]  У не раскрытой, но до нее кратчайший путь
[01:04:36.320 --> 01:04:38.320]  Не проходит по другим не раскрытым
[01:04:38.320 --> 01:04:40.320]  Тогда я выключаю чтобы ее тоже найдено
[01:04:40.320 --> 01:04:42.320]  На правильном расстоянии
[01:04:44.320 --> 01:04:46.320]  Вот
[01:04:50.320 --> 01:04:52.320]  Вот
[01:04:52.320 --> 01:04:54.320]  То есть я на самом деле
[01:04:54.320 --> 01:04:56.320]  Вот этому же им доказываю
[01:04:56.320 --> 01:04:58.320]  Как обычно по индукции
[01:04:58.320 --> 01:05:00.320]  Я считаю, что вот эти все вершинки раскрыты
[01:05:00.320 --> 01:05:02.320]  До них почти направлено расстояние
[01:05:02.320 --> 01:05:04.320]  Тогда если эти вершины почти направлено
[01:05:04.320 --> 01:05:06.320]  И все они раскрыты
[01:05:06.320 --> 01:05:08.320]  То в частности в момент раскрытия этой вершинки
[01:05:08.320 --> 01:05:10.320]  Я обновил расстояние до уку
[01:05:10.320 --> 01:05:12.320]  И посчитал его как правильное
[01:05:12.320 --> 01:05:14.320]  То есть я учел вот этот путь
[01:05:14.320 --> 01:05:16.320]  Отсюда потом плюсит ребро
[01:05:16.320 --> 01:05:18.320]  И значит я до уку в частности нашел кратчайший путь
[01:05:18.320 --> 01:05:20.320]  Значит то, что там лежит до уку
[01:05:20.320 --> 01:05:22.320]  Это правильное расстояние
[01:05:22.320 --> 01:05:24.320]  То есть я его нашел
[01:05:24.320 --> 01:05:26.320]  Потому что оно никакие другие еще не раскрытые кратча
[01:05:26.320 --> 01:05:28.320]  Не использует
[01:05:28.320 --> 01:05:30.320]  А эти все здесь все кратчайшие вершинки нашли
[01:05:32.320 --> 01:05:34.320]  А первая замечательная
[01:05:36.320 --> 01:05:38.320]  Дальше, товарищ Варум
[01:05:38.320 --> 01:05:40.320]  Оно противно
[01:05:42.320 --> 01:05:44.320]  Дальше противно
[01:05:46.320 --> 01:05:48.320]  Пусть
[01:05:48.320 --> 01:05:50.320]  Вот это все раскрыто
[01:05:50.320 --> 01:05:52.320]  Это не раскрыто
[01:05:52.320 --> 01:05:54.320]  И пусть вершина В
[01:05:54.320 --> 01:05:56.320]  Это вершина
[01:05:56.320 --> 01:05:58.320]  С минимальным D
[01:05:58.320 --> 01:06:00.320]  Среди не раскрыто
[01:06:00.320 --> 01:06:02.320]  Пусть В
[01:06:02.320 --> 01:06:04.320]  Это вершина
[01:06:04.320 --> 01:06:06.320]  С минимальным значением D
[01:06:06.320 --> 01:06:08.320]  Среди не раскрыто
[01:06:10.320 --> 01:06:12.320]  Среди не раскрыто
[01:06:20.320 --> 01:06:22.320]  Вот
[01:06:22.320 --> 01:06:24.320]  Мне хотелось бы доказать вот это утверждение
[01:06:24.320 --> 01:06:26.320]  А что если D
[01:06:26.320 --> 01:06:28.320]  Снимально не раскрыто
[01:06:28.320 --> 01:06:30.320]  То сейчас когда ее начнут раскрывать
[01:06:30.320 --> 01:06:32.320]  То у нее уже начнется правильное расстояние
[01:06:32.320 --> 01:06:34.320]  То есть то, что в ней лежит до уку
[01:06:34.320 --> 01:06:36.320]  Пусть
[01:06:36.320 --> 01:06:38.320]  Делает В
[01:06:38.320 --> 01:06:40.320]  Больше или меньше
[01:06:40.320 --> 01:06:42.320]  Ну понятно
[01:06:42.320 --> 01:06:44.320]  Меньше или меньше не может быть
[01:06:44.320 --> 01:06:46.320]  Потому что у нас есть только какие-то корректные пути
[01:06:46.320 --> 01:06:48.320]  А может быть только такое
[01:06:48.320 --> 01:06:50.320]  Что я какой-то контейнный кратчайший путь не учу
[01:06:50.320 --> 01:06:52.320]  Я нашел какой-то больший
[01:06:52.320 --> 01:06:54.320]  Но не нашел кратчайший
[01:06:54.320 --> 01:06:56.320]  А может быть не больше
[01:06:56.320 --> 01:06:58.320]  Ну и давайте вы нарисуем
[01:06:58.320 --> 01:07:00.320]  Давайте нарисуем правильный кратчайший путь
[01:07:00.320 --> 01:07:02.320]  С
[01:07:02.320 --> 01:07:04.320]  В
[01:07:04.320 --> 01:07:06.320]  Давайте нарисуем кратчайший путь
[01:07:06.320 --> 01:07:08.320]  От С
[01:07:08.320 --> 01:07:10.320]  Как он идет?
[01:07:10.320 --> 01:07:12.320]  Ну он там как-то ходит по раскрытым
[01:07:12.320 --> 01:07:14.320]  Потом когда-то в первые, скажем, пересекает
[01:07:14.320 --> 01:07:16.320]  И попадает в множество нераскрытых
[01:07:16.320 --> 01:07:18.320]  Потом как-то ходит здесь
[01:07:18.320 --> 01:07:20.320]  Возможно вот что-нибудь сюда
[01:07:20.320 --> 01:07:22.320]  Вот это я написал кратчайший путь от С
[01:07:22.320 --> 01:07:24.320]  Кратчайший путь от С
[01:07:30.320 --> 01:07:34.320]  Пусть у это первое нераскрытое множество нераскрытое
[01:07:38.320 --> 01:07:40.320]  Тогда
[01:07:42.320 --> 01:07:44.320]  Тогда
[01:07:44.320 --> 01:07:46.320]  Ну что тут надо сказать
[01:07:48.320 --> 01:07:50.320]  То есть мы с одной стороны
[01:07:50.320 --> 01:07:52.320]  По этому в shin tap
[01:07:52.320 --> 01:07:54.320]  Вот эта рома
[01:07:54.320 --> 01:07:56.320]  Под downs
[01:07:56.320 --> 01:07:58.320]  Ну как раз иzedит вот на эту роль
[01:07:58.320 --> 01:08:00.320]  Роль того ш steal
[01:08:00.320 --> 01:08:02.320]  Потому что если в Mic startled
[01:08:02.320 --> 01:08:08.320]  Кратчайший путь réalizing
[01:08:08.320 --> 01:08:10.320]  Вот эта роль будет кратчайший
[01:08:10.320 --> 01:08:12.320]  По хру King
[01:08:12.320 --> 01:08:14.320]  random
[01:08:14.320 --> 01:08:24.320]  а по предыдущему замечанию, del2 равно dist sql
[01:08:24.320 --> 01:08:26.320]  это с одной стороны
[01:08:26.320 --> 01:08:35.320]  с другой стороны, понятно, что dist sql не больше, чем dist sv
[01:08:35.320 --> 01:08:43.320]  потому что это какой-то префикс, больше, чем ути
[01:08:43.320 --> 01:08:51.320]  и дальше у меня есть строгая граница, dist sv строга меньше, чем del2
[01:08:51.320 --> 01:09:00.320]  ну все, это тогда как два ежащих, то есть мы получим, что del2 строга меньше, чем del2
[01:09:00.320 --> 01:09:02.320]  но Q при этом тоже не раскрыто
[01:09:02.320 --> 01:09:06.320]  а значит вы не являетесь минимальней жестом
[01:09:06.320 --> 01:09:11.320]  а вот есть тоже не раскрытая горшина, D значение которой меньше
[01:09:11.320 --> 01:09:13.320]  вы можете противоречиваться этим
[01:09:20.320 --> 01:09:24.320]  такого не бывает, предыдущие всегда корректно работают
[01:09:33.320 --> 01:09:35.320]  так, понятно?
[01:09:36.320 --> 01:09:38.320]  хорошо
[01:09:38.320 --> 01:09:43.320]  корректность доказательств, сейчас давайте просим точку
[01:09:43.320 --> 01:09:49.320]  смотрите, можно наивно реализовать просто за вот этим квадратом
[01:09:49.320 --> 01:09:53.320]  ну во-первых, можно взять вот так
[01:09:53.320 --> 01:09:57.320]  потому что можно просто все эти проверки делать наивно
[01:09:57.320 --> 01:10:01.320]  а как найти минимальную нераскрытую?
[01:10:01.320 --> 01:10:05.320]  можно просто пройтись по всем нераскрытым и найти ту, которая D минимальна
[01:10:05.320 --> 01:10:07.320]  итак, амбас
[01:10:07.320 --> 01:10:12.320]  у меня суммарно был первое открытие, пусть каждая нераскрытая будет за вот этим
[01:10:12.320 --> 01:10:16.320]  то есть у меня 10 квадрат времени уходит на то, чтобы находить нераскрытую
[01:10:16.320 --> 01:10:19.320]  ну и суммарно раскрытие будет работать за вот Эмму
[01:10:19.320 --> 01:10:24.320]  я, конечно, имею в виду, что Эмму не больше нераскрытой
[01:10:24.320 --> 01:10:30.320]  ну понятно, в случае, если нет кратных фребер, то Эмму максимально подразделяет
[01:10:30.320 --> 01:10:32.320]  наивно реализацию
[01:10:40.320 --> 01:10:44.320]  но иногда это можно сделать побыстрее
[01:10:44.320 --> 01:10:46.320]  потому что, смотрите, что нам нужно?
[01:10:46.320 --> 01:10:50.320]  нам нужно найти массив D, находить в нем минимум
[01:10:50.320 --> 01:10:54.320]  там мне нужно найти там минимальное значение дёртвы
[01:10:54.320 --> 01:10:56.320]  и раскрывать
[01:10:56.320 --> 01:10:59.320]  а при раскрытии у меня происходит только уменьшение D
[01:10:59.320 --> 01:11:01.320]  то есть, смотрите, мне нужно что сделать?
[01:11:01.320 --> 01:11:03.320]  мне нужно M раз к Эмму
[01:11:04.320 --> 01:11:06.320]  M раз к Эмму
[01:11:08.320 --> 01:11:12.320]  и максимум M раз уменьшать значение
[01:11:12.320 --> 01:11:15.320]  потому что при раскрытии какие-то дешки могли уменьшаться
[01:11:15.320 --> 01:11:19.320]  и нужно M раз взять уменьшение значения
[01:11:20.320 --> 01:11:22.320]  уменьшить значение
[01:11:27.320 --> 01:11:29.320]  что можно использовать?
[01:11:29.320 --> 01:11:30.320]  кучу
[01:11:30.320 --> 01:11:32.320]  ну кучу, да, проще всего
[01:11:34.320 --> 01:11:36.320]  кучу как раз ровно этой делаем
[01:11:36.320 --> 01:11:39.320]  там у меня есть дёртвик с ракмином и декрестин
[01:11:40.320 --> 01:11:43.320]  вот, если взять обычную динарную кучу
[01:11:43.320 --> 01:11:46.320]  у нас будет лучше всего взять M0
[01:11:47.320 --> 01:11:50.320]  ну потому что декризы работают за логарифом
[01:11:50.320 --> 01:11:52.320]  экстракты работают за логарифом
[01:11:52.320 --> 01:11:56.320]  это в случае, что M хотя бы имеется в виду
[01:11:59.320 --> 01:12:02.320]  ну понятно, если M сильнее чем N, то граф не связан
[01:12:02.320 --> 01:12:04.320]  можно обрубить всё, что недостижимо
[01:12:04.320 --> 01:12:06.320]  тогда M будет как раз в этом
[01:12:06.320 --> 01:12:08.320]  это обычная бинарная куча
[01:12:08.320 --> 01:12:10.320]  но если использовать кучу Моначи
[01:12:10.320 --> 01:12:12.320]  то у нас получится асимптотика
[01:12:12.320 --> 01:12:14.320]  асимптотика чуть получше будет приемливаться в Моначи
[01:12:16.320 --> 01:12:18.320]  это куча Моначи
[01:12:18.320 --> 01:12:20.320]  ну потому что в куче Моначи декрестки работают
[01:12:20.320 --> 01:12:22.320]  и учётно за единичку амортизированную
[01:12:22.320 --> 01:12:24.320]  поэтому суммарный вклад декрестки
[01:12:24.320 --> 01:12:26.320]  были как раз у отм
[01:12:26.320 --> 01:12:28.320]  потому что там единичка амортизированная
[01:12:28.320 --> 01:12:30.320]  ну а экстракты работают за логариф
[01:12:32.320 --> 01:12:34.320]  бинарная куча, да, бинарная куча
[01:12:34.320 --> 01:12:36.320]  это Моначи
[01:12:36.320 --> 01:12:38.320]  вот
[01:12:38.320 --> 01:12:40.320]  ну поэтому как бы
[01:12:40.320 --> 01:12:42.320]  кучу использовать в этом плане лучше
[01:12:42.320 --> 01:12:44.320]  потому что
[01:12:44.320 --> 01:12:46.320]  ну например, куча Моначи, которые декрестки очень позволяют улучшить
[01:12:46.320 --> 01:12:48.320]  а если вы делаете это с помощью сета
[01:12:48.320 --> 01:12:50.320]  то лучше ему это будет выглядеть
[01:12:52.320 --> 01:12:54.320]  ну вот
[01:12:56.320 --> 01:12:58.320]  такие дела
[01:12:58.320 --> 01:13:00.320]  то есть вторая дает гарантированное улучшение
[01:13:00.320 --> 01:13:02.320]  а первая только вот с условием
[01:13:02.320 --> 01:13:04.320]  не, не, ну
[01:13:06.320 --> 01:13:08.320]  смотрите
[01:13:08.320 --> 01:13:10.320]  вот это условие
[01:13:10.320 --> 01:13:12.320]  это не условие, на самом деле
[01:13:12.320 --> 01:13:14.320]  это как бы
[01:13:14.320 --> 01:13:16.320]  это не то что ограничение
[01:13:16.320 --> 01:13:18.320]  а да, это констатация факта
[01:13:18.320 --> 01:13:20.320]  да, констатация факта
[01:13:22.320 --> 01:13:24.320]  то есть формально
[01:13:24.320 --> 01:13:26.320]  должен быть с тем логен и с тем логен
[01:13:26.320 --> 01:13:28.320]  потому что у меня хрен на экстрактах
[01:13:28.320 --> 01:13:30.320]  но поскольку
[01:13:30.320 --> 01:13:32.320]  вот это вот верно
[01:13:32.320 --> 01:13:34.320]  всегда можно считать
[01:13:34.320 --> 01:13:36.320]  то, что я опускаю и оставляю только М-лог
[01:13:36.320 --> 01:13:38.320]  а это верно
[01:13:38.320 --> 01:13:40.320]  потому что если М меньше
[01:13:40.320 --> 01:13:42.320]  то граф не связан
[01:13:42.320 --> 01:13:44.320]  я могу отбросить сначала то, что не достижено в принципе
[01:13:44.320 --> 01:13:46.320]  и тогда уже М будет равно
[01:13:46.320 --> 01:13:48.320]  хотя вот М-1
[01:13:48.320 --> 01:13:50.320]  дело в том, что если ребер
[01:13:50.320 --> 01:13:52.320]  квадратичное количество
[01:13:52.320 --> 01:13:54.320]  то М-квадрат логен даже хуже
[01:13:54.320 --> 01:13:56.320]  правильно, я не сказал, но это надо сказать
[01:13:56.320 --> 01:13:58.320]  да, это правильно
[01:13:58.320 --> 01:14:00.320]  эта штука не всегда выглядит
[01:14:00.320 --> 01:14:02.320]  чем вот эта
[01:14:02.320 --> 01:14:04.320]  то здесь будет по-прежнему квадрат
[01:14:04.320 --> 01:14:06.320]  а здесь будет Н-квадрат логен
[01:14:06.320 --> 01:14:08.320]  и вот такая активизация, она будет даже хуже
[01:14:08.320 --> 01:14:10.320]  чем обычные наивные ДЕКСЫ
[01:14:10.320 --> 01:14:12.320]  поэтому сдвигите обратно
[01:14:12.320 --> 01:14:14.320]  значит если у вас тема очень большая
[01:14:14.320 --> 01:14:16.320]  то эффективнее всего просто обычную ДЕКСИю не писать
[01:14:16.320 --> 01:14:18.320]  вот это будет даже лучше
[01:14:18.320 --> 01:14:20.320]  видимо кучей банансов, потому что здесь тоже будет квадрат
[01:14:20.320 --> 01:14:22.320]  и это, в общем, не лучше
[01:14:22.320 --> 01:14:24.320]  чем самый-самый квадрат ДЕКСИ
[01:14:24.320 --> 01:14:26.320]  на плотных графах ДЕКСИ можно писать вообще без кучи
[01:14:26.320 --> 01:14:28.320]  лучше всего
[01:14:28.320 --> 01:14:30.320]  ну вот
[01:14:32.320 --> 01:14:34.320]  вот
[01:14:38.320 --> 01:14:40.320]  замечание
[01:14:44.320 --> 01:14:46.320]  или нет, они будут замечать
[01:14:48.320 --> 01:14:50.320]  не заметно
[01:14:56.320 --> 01:14:58.320]  последнее, значит это второннее ДЕКСИ
[01:14:58.320 --> 01:15:00.320]  второннее зрение ДЕКСИ
[01:15:02.320 --> 01:15:04.320]  поскольку это такая же как в БФСе
[01:15:04.320 --> 01:15:06.320]  есть две вершинки
[01:15:06.320 --> 01:15:08.320]  мне нужно найти расстояние между ними
[01:15:08.320 --> 01:15:10.320]  то есть есть расстояние нужно найти
[01:15:10.320 --> 01:15:12.320]  ну а рисовая функция у меня просто есть более не отрицательная
[01:15:18.320 --> 01:15:20.320]  вот, ну второннее ДЕКСИ работает
[01:15:20.320 --> 01:15:22.320]  собственно как ДЕКСИ в двух сторонах
[01:15:22.320 --> 01:15:24.320]  я запускаю парамерно
[01:15:24.320 --> 01:15:26.320]  ДЕКСИ вот отсюда
[01:15:26.320 --> 01:15:28.320]  она как бы рассматривает все вот эти кучи
[01:15:28.320 --> 01:15:30.320]  находящие расстояние
[01:15:30.320 --> 01:15:32.320]  и в обратную сторону
[01:15:32.320 --> 01:15:34.320]  то есть я здесь графы разворачиваю
[01:15:34.320 --> 01:15:36.320]  и нахожу постепенно вот эти вот все
[01:15:36.320 --> 01:15:38.320]  вершинки как раз
[01:15:38.320 --> 01:15:40.320]  расстояния в двух сторонах
[01:15:40.320 --> 01:15:42.320]  да, ну парамерно ДЕКСИ в двух сторонах
[01:15:44.320 --> 01:15:46.320]  вот, и значит я останавливаюсь
[01:15:46.320 --> 01:15:48.320]  да, я завершаю этот обход
[01:15:48.320 --> 01:15:50.320]  ааа
[01:15:56.320 --> 01:15:58.320]  когда опять вершины будут раскрыты
[01:15:58.320 --> 01:16:00.320]  будет слово
[01:16:00.320 --> 01:16:02.320]  останавливаемся
[01:16:06.320 --> 01:16:08.320]  когда
[01:16:08.320 --> 01:16:10.320]  некая вершина будет
[01:16:12.320 --> 01:16:14.320]  будет
[01:16:14.320 --> 01:16:16.320]  осмотрена с вершином
[01:16:16.320 --> 01:16:18.320]  вот
[01:16:22.320 --> 01:16:24.320]  вот
[01:16:24.320 --> 01:16:26.320]  значит как это формально работает
[01:16:26.320 --> 01:16:28.320]  у меня есть
[01:16:28.320 --> 01:16:30.320]  по факту две кучи
[01:16:30.320 --> 01:16:32.320]  одна куча здесь
[01:16:32.320 --> 01:16:34.320]  другая куча как бы в Т
[01:16:34.320 --> 01:16:36.320]  я параллельно запускаю вот какую ДЕКСИ
[01:16:36.320 --> 01:16:38.320]  и ДЕКСИ вот по обратному графу вот отсюда
[01:16:38.320 --> 01:16:40.320]  дальше у меня есть две кучи
[01:16:40.320 --> 01:16:42.320]  я извлекаю
[01:16:42.320 --> 01:16:44.320]  как бы я смотрю на минимум
[01:16:44.320 --> 01:16:46.320]  на минимум в обеих кучах
[01:16:46.320 --> 01:16:48.320]  и тот который меньше я обрабатываю
[01:16:48.320 --> 01:16:50.320]  а то есть
[01:16:50.320 --> 01:16:52.320]  если здесь минимальная вершина
[01:16:52.320 --> 01:16:54.320]  5, а здесь 3
[01:16:54.320 --> 01:16:56.320]  то я сначала обрабатываю В
[01:16:56.320 --> 01:16:58.320]  то есть я буквально обрабатываю возрастание расстояния
[01:16:58.320 --> 01:17:00.320]  а если у меня две кучи
[01:17:00.320 --> 01:17:02.320]  достаю минимум и смотрю кто меньше
[01:17:02.320 --> 01:17:04.320]  я обрабатываю тот, кто меньше
[01:17:06.320 --> 01:17:08.320]  вот, и когда впервые
[01:17:08.320 --> 01:17:10.320]  какая-то вершинка В будет найдена
[01:17:10.320 --> 01:17:12.320]  и обработана и отсюда и отсюда
[01:17:12.320 --> 01:17:14.320]  то есть я ее нашел с обеих сторон
[01:17:14.320 --> 01:17:16.320]  раскрыл с обеих сторон
[01:17:16.320 --> 01:17:18.320]  и вот впервые когда какая-то вершина раскрыта с обеих сторон
[01:17:18.320 --> 01:17:20.320]  я завершаюсь
[01:17:20.320 --> 01:17:22.320]  и опять где я говорю что расстояние
[01:17:24.320 --> 01:17:26.320]  это минимум по центру вершины в одном креме
[01:17:26.320 --> 01:17:28.320]  ДОКСИ
[01:17:28.320 --> 01:17:30.320]  плюс ДЕКСИ
[01:17:42.320 --> 01:17:44.320]  ВЕРШИНКА ВОЛЯТОВАЯ
[01:17:54.320 --> 01:17:56.320]  так, почему ты веришь?
[01:17:58.320 --> 01:18:00.320]  почему минимальная вот такая вот сумма
[01:18:00.320 --> 01:18:02.320]  ВУТРОНА ДЕСИТЕЛЬНАЯ СТОЯТЬ
[01:18:02.320 --> 01:18:04.320]  ну хорошо, давайте
[01:18:04.320 --> 01:18:06.320]  действуем
[01:18:06.320 --> 01:18:08.320]  что мы получили
[01:18:08.320 --> 01:18:10.320]  что какая-то вершинка была
[01:18:10.320 --> 01:18:13.300]  Вылазав, если он найд şeh meta, я Свинь.
[01:18:13.300 --> 01:18:15.160]  Ну пусть, скажем, вот здесь настоянийPoint, корMusik, я не знаю...
[01:18:19.280 --> 01:18:23.480]  Ну опять давайте скажем, что мы получили что-нибудь расходом AimTest.
[01:18:23.480 --> 01:18:31.040]  Точно не больше Какого-нибудь Мака, здесь настоянийlikür- dois grain powder подل Lawrenceaj Дмитриев confrontation-like planter.
[01:18:31.040 --> 01:18:33.740]  И, ну как-еббо такой Quest지 от psDarен, игрlie framework.
[01:18:35.140 --> 01:18:37.680]  Опять, могут ли быть более короткиеอก Sempre announcing, что оба=#2idän Chapman Esto дляochimetre в Pinage.
[01:18:37.680 --> 01:18:39.680]  и с расстоянием меньше нумака.
[01:18:49.680 --> 01:18:52.680]  Ну, во-первых, если l не больше чем k,
[01:18:55.680 --> 01:19:00.680]  то я утверждаю, что d, s, d вот с t это ответ.
[01:19:01.680 --> 01:19:04.680]  Странно, потому что если l не больше чем k,
[01:19:07.680 --> 01:19:11.680]  то значит расстояние до t будет еще не больше чем k.
[01:19:12.680 --> 01:19:16.680]  А если я рассмотрю вот эту вот вершинку,
[01:19:17.680 --> 01:19:20.680]  то значит все вершины на расстоянии меньше и на равном.
[01:19:21.680 --> 01:19:24.680]  Так, ну так, наверное, хорошо говорить?
[01:19:25.680 --> 01:19:28.680]  Давайте я здесь включу ровно k, а здесь лучше меньше.
[01:19:30.680 --> 01:19:33.680]  То есть если l меньше чем k,
[01:19:34.680 --> 01:19:36.680]  а я здесь раскрою вершины в стене ровно k,
[01:19:37.680 --> 01:19:39.680]  то значит все меньше, я тоже вот точно рассмотрел, точно раскрою.
[01:19:40.680 --> 01:19:41.680]  Поэтому вот это расстояние точно правильно найдено,
[01:19:42.680 --> 01:19:44.680]  и значит будет учтено в ответе.
[01:19:45.680 --> 01:19:49.680]  То есть если я сажу d, s от t и d, s от t,
[01:19:50.680 --> 01:19:51.680]  а вот это будет 0.
[01:19:52.680 --> 01:19:54.680]  То есть я как раз получу, я как раз так же расстоян.
[01:19:55.680 --> 01:19:57.680]  Ну, а если вещь достаточно большая,
[01:19:57.680 --> 01:19:59.680]  то я опять найду просто садовую вершину на этом пути.
[01:20:00.680 --> 01:20:03.680]  А, давайте я рассмотрю прощаживание d от t.
[01:20:08.680 --> 01:20:10.680]  Возьму на этом пути, видимо,
[01:20:14.680 --> 01:20:17.680]  первую вершину расстояния, которая хотя бы k,
[01:20:20.680 --> 01:20:23.680]  такое, что вот здесь вот больше равном k,
[01:20:24.680 --> 01:20:26.680]  а вот здесь вот меньше чем k.
[01:20:27.680 --> 01:20:29.680]  То есть пусть это правильный прощаживание,
[01:20:30.680 --> 01:20:32.680]  я найду на нем первую вершину расстояния,
[01:20:33.680 --> 01:20:34.680]  которая хотя бы k.
[01:20:35.680 --> 01:20:37.680]  То есть до конца будет меньше чем k, а до конца будет меньше чем k.
[01:20:38.680 --> 01:20:40.680]  Так, ну тогда, смотрите,
[01:20:41.680 --> 01:20:45.680]  с одной стороны d, s от q правильно посчитано,
[01:20:48.680 --> 01:20:49.680]  d, s от q корректно,
[01:20:50.680 --> 01:20:51.680]  потому что вот эта вершина,
[01:20:52.680 --> 01:20:53.680]  до этой вершины расстояния меньше чем k,
[01:20:53.680 --> 01:20:54.680]  значит она просмотрена и раскрыта ранее.
[01:20:55.680 --> 01:20:58.680]  Значит, для этого раскрыта и до q найдено правильное расстояние.
[01:20:59.680 --> 01:21:02.680]  Если q раскрыта, то вдоль этой вершины будет правильный ответ,
[01:21:03.680 --> 01:21:05.680]  и для q найдено правильное расстояние вот вверху q.
[01:21:06.680 --> 01:21:07.680]  Значит, вот это корректно.
[01:21:08.680 --> 01:21:11.680]  С другой стороны, оставшиеся расстояния от q до t
[01:21:12.680 --> 01:21:13.680]  меньше чем k.
[01:21:14.680 --> 01:21:16.680]  Потому что если здесь хотя бы k,
[01:21:17.680 --> 01:21:19.680]  то у нас будет меньше чем q.
[01:21:20.680 --> 01:21:22.680]  Потому что если здесь хотя бы k,
[01:21:23.680 --> 01:21:26.680]  но l меньше, вот l меньше чем 2k,
[01:21:27.680 --> 01:21:28.680]  значит здесь сумма меньше чем 2k.
[01:21:29.680 --> 01:21:32.680]  Значит, с той стороны она тоже рассмотрена и раскрыта.
[01:21:33.680 --> 01:21:34.680]  Теперь это тоже корректно.
[01:21:35.680 --> 01:21:37.680]  Корректно расставлено и не даже раскрыто.
[01:21:38.680 --> 01:21:41.680]  Ну и все, сейчас я их сложу, у меня будет корректный на q.
[01:21:42.680 --> 01:21:46.680]  А вы можете повторить почему d, s, q корректно?
[01:21:46.680 --> 01:21:47.680]  D, s, q.
[01:21:48.680 --> 01:21:52.680]  Вот, смотрите, я такова, что вот это расстояние больше либо равно
[01:21:53.680 --> 01:21:54.680]  от q до t меньше чем k.
[01:21:55.680 --> 01:21:57.680]  То есть эта первая вершина такая, что сумма надо найти.
[01:21:59.680 --> 01:22:00.680]  Тогда давайте откатимся назад сюда.
[01:22:01.680 --> 01:22:02.680]  Посмотрим на предпоследнюю ширину.
[01:22:03.680 --> 01:22:04.680]  Здесь 2мм меньше чем k.
[01:22:05.680 --> 01:22:09.680]  Значит, эта вершина была просмотрена и раскрыта при действии слева.
[01:22:10.680 --> 01:22:14.680]  То есть если я вышел до v и y, то все меньше и пода.
[01:22:14.680 --> 01:22:17.680]  Поэтому эта раскрыта и длина птиц распространена вот сюда.
[01:22:18.680 --> 01:22:19.680]  Поэтому здесь вот что-то.
[01:22:21.680 --> 01:22:23.680]  Ну вот, какой бы ни был путь,
[01:22:24.680 --> 01:22:26.680]  то есть я написал, что в какой бы ни был путь,
[01:22:27.680 --> 01:22:28.680]  в каждой ни был бы стройник.
[01:22:29.680 --> 01:22:31.680]  Я точно знаю какую-то центральную ширину,
[01:22:32.680 --> 01:22:34.680]  до которой излево и справа костюмы правильное расстояние.
[01:22:35.680 --> 01:22:37.680]  Значит, если я это просумирую, я буду учтем.
[01:22:40.680 --> 01:22:41.680]  Ну вот.
[01:22:41.680 --> 01:22:44.680]  Ну и опять эта штука полезна в случае такого большого графа.
[01:22:45.680 --> 01:22:48.680]  Дает, собственно, такой же примучный как этот стройник BFS,
[01:22:49.680 --> 01:22:51.680]  только в случае, когда у вас ребра взвешиваются.
[01:22:53.680 --> 01:22:54.680]  Ну все, спасибо.
