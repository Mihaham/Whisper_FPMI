[00:00.000 --> 00:13.820]  Добрый день! Я вижу, что у регулярных посетителей на носу не только очки, но еще и Новый год,
[00:13.820 --> 00:26.640]  поэтому сегодня будет сказка. Сказка о красной сапочке, а также ее подруге корове.
[00:26.640 --> 00:45.000]  Так, некий Новый год красной сапочке решили принести подарки, и Дед Мороз притащил этой красной
[00:45.000 --> 00:55.240]  сапочке некую программу, некую сервис, и сказал, так, разложи, пожалуйста, этот файл,
[00:55.240 --> 01:10.600]  этот файл в этот, этот в этот, а после этого еще выполнили несколько команд. Стоп,
[01:10.600 --> 01:17.360]  сказала красная сапочка. Это кажется другой сказке. Я тебе не Золушка, чтобы разбирать,
[01:17.360 --> 01:40.280]  что, где, в каком каталоге должно лежать. Может быть, мне нужно вообще разложить разные программы,
[01:40.280 --> 01:52.960]  не то по разным каталогам, а хуже того, мне нужно будет потом их еще и удалить как-то. Может
[01:52.960 --> 02:02.520]  быть, их нужно обновлять, а как я пойму, этот файл от какой программы? Нет уж, Дедушка,
[02:02.520 --> 02:11.400]  ты давай, складывай все в мешок или в пакет. Говорит так, чтобы я просто пакет положил,
[02:11.400 --> 02:27.120]  и оно все разложилось, разбежалось по елочке и полностью засияло. Подумал Дед Мороз, ну вроде
[02:27.120 --> 02:44.400]  коллега подсвет в шапочки. Значит, нужно выполнять пожелания. Ну и сделал компанию Red Hat,
[02:44.400 --> 02:53.920]  которая сделала Red Hat Package Manager для упаковки всяких программ. Ну что ж, посмотрим, как он
[02:53.920 --> 03:11.760]  работает. Вот что может делать. У нас есть куча различных пакетов. Интересно, какие здесь установлены?
[03:11.760 --> 03:25.040]  Сколько всяких разных пакетов? Что-то такое кеховское.
[03:41.760 --> 03:54.360]  В этот пакет у нас входят вот такие вот файлы.
[04:11.760 --> 04:33.600]  Вот с неким текстом.
[04:33.600 --> 04:54.440]  Устроим на него кота. Вот обычный текст читается. Тут красная шапочка задалась важным вопросом.
[04:54.440 --> 05:06.480]  Вот все эти подарки нам собираются повесить на елочку. Но вопрос, может быть, чтобы один подарок
[05:06.480 --> 05:16.640]  работал, нужен другой? А то вдруг выяснится, гирлянду повесили, а электроэнергию к елочке
[05:16.640 --> 05:28.520]  провести забыли. И без этого она не работает. Может быть, нужно для этого еще что-то. Может быть,
[05:28.520 --> 05:37.640]  для электроэнергии нужно еще что-нибудь. Например, для дизельного генератора нам нужен еще нефтеперерабатывающий
[05:37.640 --> 05:46.520]  завод. Для нефтеперерабатывающего завода нужна нефтяная вышка. Ну вот молодец красная шапочка попросила
[05:46.520 --> 06:05.920]  гирлянду на елочку, получила нефтяную вышку в комплекте. Ну интересно, а что же такое потребует
[06:05.920 --> 06:35.000]  наш пакет? Никто его не требует, он сам по себе. А вот что он требует сам.
[06:35.000 --> 06:50.800]  Например, библиотеку для принесения подарков красной шапочки. А также какие-то части теха.
[07:05.000 --> 07:14.800]  А что он предоставляет? Вот такие возможности.
[07:35.000 --> 07:50.920]  Один руку пакет этого у нас не предоставляет. А какой пакет предоставляет нам
[07:50.920 --> 08:16.800]  вот этот пакет. Вот этот пакет предоставляет нам возможности под названием теха. То есть
[08:16.800 --> 08:26.160]  пакеты связаны какими-то отношениями, что какое-то требует чего-то. И в результате объединяются в некую
[08:26.160 --> 08:46.920]  структуру бодибатическую. Как вы думаете какую? Да, ориентированный ациклический граф со зависимостими.
[08:46.920 --> 08:59.080]  И чтобы что-то поставить, нужно выяснить, что этот пакет требует. А если он требует посмотреть,
[08:59.080 --> 09:05.120]  кто это предоставляет. Этот пакет в свою очередь может что-то тоже потребовать. Взять эти пакеты,
[09:05.120 --> 09:12.480]  сделать с ними топологическую сортировку и расставить их по нашей файловой системе.
[09:12.480 --> 09:31.080]  Но это если пакет у нас уже скачан. А если же у нас этого пакета нет,
[09:31.080 --> 09:40.720]  его нужно поискать в интернете. Но естественно, нужно поискать в интернете,
[09:40.760 --> 09:45.200]  ткнуть на первую попавшуюся ссылку с рекламой, поставить первую попавшуюся ставкину,
[09:47.200 --> 09:55.080]  которая может быть не сделает с вашим компьютером ничего плохого. Впрочем,
[09:55.080 --> 10:04.200]  есть альтернативные варианты. Например, откуда вы ставите приложение на ваши телефоны.
[10:04.200 --> 10:17.960]  Существуют какие-то места, которые вроде как доверенные, в которых и находится только
[10:17.960 --> 10:29.040]  предложение, предназначенное для хороших вещей. Но правда какая вещь хорошая, а какая нет,
[10:29.040 --> 10:36.600]  может быть разная. Например, вещь под названием топор. С точки зрения елочки, она крайне вредная.
[10:36.600 --> 10:59.440]  Так что все, что гарантирует нам какой-то магазин приложений, это то, что соответствует
[10:59.440 --> 11:21.440]  описанию, делать именно то, что описано. Ну и наш дедушка Мороз приехал и привез нам целый
[11:21.440 --> 11:36.240]  РПМ-пакет подарков на тряшке, запряженной собаками. В соответствии с правилами дорожного движения
[11:36.240 --> 11:46.600]  и с тем, чтобы они были заметны на дороге, на каждую собаку он наделся этот отражающий желтый жилет.
[11:46.600 --> 12:03.720]  И вот скачет по дороге целая стая желтых собак и обновляет всеми елочки. А он имя правит,
[12:03.720 --> 12:13.320]  он менеджер желтых собак, ну или Yellow Dog Update Manager. Yellow Dog Update Manager или YUM это оболочка
[12:13.320 --> 12:23.040]  РПМ, потому что РПМ предоставляет самые базовые операции, а YUM пытается пройтись по всяким
[12:23.040 --> 12:36.680]  репозиториям, найти и что-то узнать. Вот, например, на этой машине установлены всяческие репозитории.
[12:36.680 --> 12:49.400]  Ну вот, например, где у нас растет вот эта репа.
[13:06.680 --> 13:23.600]  Репа под названием EVPL и Extra Packages for Enterprise Linux растет у нас на Fedora Project
[13:23.800 --> 13:49.840]  вот по этому адресу. Другой репозиторий. Вот по этому адресу. При этом мы проверяем
[13:49.840 --> 13:59.000]  криптографически, что то, что мы скачали, это именно то, что исходит от него. У нас есть
[13:59.000 --> 14:10.440]  его публичный ключик и с помощью него мы проверяем подписи. Потому что мы собираемся установить себе
[14:10.440 --> 14:16.680]  программу, она будет как-то работать, что-то делать на нашем компьютере. Должи же мы хотя бы проверять,
[14:16.680 --> 14:45.080]  что мы получили этот доверийного источника. А вот другая ссылочка.
[14:47.080 --> 14:56.360]  Еще вместо доменного имени тут почему-то IP-адрес, даже соединение не шифрованное.
[14:56.360 --> 15:10.240]  Ну а дело в том, что по этому адресу сети МФТ находится зеркало зеркала Яндекса. То есть
[15:10.720 --> 15:24.160]  Яндекс сделал себе зеркало всяческих репозиторий. В нашей сети есть зеркало этого зеркала. Для того,
[15:24.160 --> 15:35.680]  чтобы всякие сервера, обновления не копировали одно и то же много раз откуда-то извне, а все качали
[15:35.680 --> 15:46.480]  по локальной сети. Потому что канал наружу все-таки ограничен. Можно конечно его расширять,
[15:46.480 --> 15:54.360]  но на это требуются деньги. Но вряд ли студенты согласятся, чтобы интернет в общаге стал стоить
[15:54.360 --> 16:06.200]  еще дороже. Поэтому лучше по возможности трафика экономить и качать все с локальных репозиторий.
[16:06.200 --> 16:25.000]  Вот 8.9.5.9.6 это наш локальный. Ну некоторые настроены ламироваться на тус.org, но
[16:25.000 --> 16:35.480]  в файле tchost, который просматривается до того, как обращаться ко всем DNS серверам,
[16:35.480 --> 16:41.840]  у нас написано, что мир и цен тус.org у нас вот здесь, а не где-то в другом месте.
[16:41.840 --> 16:50.840]  Ну сделаем DNS запрос, он находится где-то в другом месте,
[16:50.840 --> 17:02.280]  но как видим обращение идет к локальному серверу.
[17:11.840 --> 17:18.880]  Можем попробовать что-нибудь поставить. Ну какие предложения, что мы будем ставить?
[17:18.880 --> 17:24.840]  Программы для каких целей?
[17:24.840 --> 17:38.080]  Какой?
[17:54.840 --> 18:11.800]  Ну, DNS тоже оболочка над УПМ.
[18:11.800 --> 18:24.960]  Не вошли.
[18:24.960 --> 18:37.200]  Какие еще версии?
[18:42.800 --> 18:59.600]  Мы поискали во всяких репозиториях пакетик,
[18:59.600 --> 19:07.040]  название которых есть слово emacs. Вот, например, дошли...
[19:07.040 --> 19:33.680]  Несколько странное, хоть и у нас нет этого в названии пакета, но по крайней мере есть в кратком
[19:33.680 --> 19:39.680]  описании. ВИЛАЙКЕМАКС. Некий гибрид ВИМАСЕМАКСОМ.
[19:39.680 --> 19:51.960]  Ну что ж, не дожидейте, что это за гибрид пульдога со сарогом. Давайте его попробуем поставить.
[20:03.680 --> 20:21.920]  Что он хочет сделать? Мы попросили поставить ВИЛИ. Он требует для этого ВИЛИ КОМОН, все это
[20:21.920 --> 20:40.160]  собрано по трахитектуре x86.6.4 и берется из репозитория EPL. Ну что ж, нам предлагают скачать огромный объем 1,3 мегабайта, объем изменений 5 мегабайт.
[20:40.160 --> 20:50.920]  Так, даже не знаю, даже не знаю, хватит нам места. Так, так, сколько у нас места?
[20:50.920 --> 20:59.400]  Диск фримин с хьюн лейдеримом нам скажут. Так, 13 гигабайт на кореневой файловой системе. Должно влезть.
[21:10.160 --> 21:32.560]  Устанавливается пакет.
[21:40.160 --> 22:07.160]  Там есть сам ВИЛИ. Еще какие-то программы связанные с ним.
[22:07.160 --> 22:10.920]  И документация.
[22:10.920 --> 22:22.600]  Замечательно, мы можем открыть по этому программу.
[22:22.600 --> 22:36.760]  Ну, ВИЛАЙК, да, похоже, новим немножко. Пока непонятно.
[22:52.600 --> 23:02.760]  Грация включается.
[23:02.760 --> 23:19.240]  Ну, это, скорее всего, спрашивает любителей Макса.
[23:19.240 --> 23:37.240]  Возможно, как-то похоже. Но главное, что вот он поставился. Все необходимые файлы он раскидал по нужным местам. Запустил какие-то скриплеты. То есть, то, что нужно запустить какие-то команды после установки.
[23:49.240 --> 24:07.240]  Ну, мы можем удалить. Проходимся по графу.
[24:07.240 --> 24:35.240]  Мы, чтобы не забыли ВИЛИ КОММОН, поставим только потому, что от него зависит ВИЛЯ, и поэтому мы можем тоже его удалить. Ну ладно, поживем.
[24:35.240 --> 24:49.240]  Если мы удаляем ВИЛИ, то у нас не остается ни одного пакета, который требует ВИЛИ.
[24:49.240 --> 25:17.240]  Значит, мы можем его просто удалить. А то есть, не требует ВИЛИ КОММОН, значит, мы можем его просто удалить. И сохранимся аж целых 5 МБ дискового пространства.
[25:19.240 --> 25:44.240]  Ну бывает, конечно, и побольше. Что у нас требует, например, ХТТПД.
[25:44.240 --> 26:09.240]  Требует, чтобы что-то было, или чтобы что-то было конкретной версии.
[26:09.240 --> 26:28.240]  Или там не меньше конкретной версии.
[26:28.240 --> 26:40.240]  Ровно такой версии. Версии там не меньше какой-то. Или просто чтобы было.
[26:58.240 --> 27:08.240]  Кто нам предоставляет вот этот разделяемый объект?
[27:08.240 --> 27:28.240]  Нам представляет этот пакет TheLib версии 1.2.1.19, собранный под специально и предназначенный для нашей красной шапочкой Red Hat Enterprise Linux.
[27:28.240 --> 27:51.240]  Для артефактуры Intel V686. Вот у нас есть.
[27:51.240 --> 28:20.240]  Какие еще библиотеки он хочет? Например, он хочет математическую библиотеку, поддержку Луо, поддержку Perk Lompatibular Regular Expressions, Postx Threads, Security on Hanford Linux. Вот сколько библиотек требует нашего веб-серва.
[28:20.240 --> 28:43.240]  Но сказка была бы не полной, если бы в красной шапочке не пришла ее подруга. Рова.
[28:43.240 --> 28:47.240]  Кто же опознал, что это за подруга?
[29:13.240 --> 29:33.240]  Вот такие пасхалочки иногда встраиваются.
[29:33.240 --> 29:46.240]  Ну, например, как только появился формат ELF, exeql.link был в формат кто-то, сделал формат DWARF.
[29:46.240 --> 29:58.240]  Ну, название GNOME было уже занято.
[29:58.240 --> 30:17.240]  Аналогично у нас может быть такая же инфраструктура с пакетами, с зависимостьми между ними, публичными репозиториями. У того кладутся подписанные пакеты.
[30:17.240 --> 30:28.240]  И инструменты, которые будут ими управлять.
[30:28.240 --> 30:39.240]  Например, в мире Dibian distributives есть миллион пакетов DEP.
[30:39.240 --> 31:04.240]  Вот сколько у нас всяческих пакетов тут стоит.
[31:04.240 --> 31:32.240]  Что это за пакет такой?
[31:32.240 --> 31:54.240]  Ну, например, инструмент для того, чтобы перехватывать то, что приложение делается с файлом системы и сетью, и случайно меняется какие-то битвы во вводе.
[31:54.240 --> 31:59.240]  И записывают. Вот так сделали.
[31:59.240 --> 32:05.240]  Искать баги.
[32:05.240 --> 32:21.240]  А что будет, если мы возьмем и поменяем какие-то биты в входных данных? Как наши программы обработают?
[32:21.240 --> 32:42.240]  А может она упадет? А может она выполнит произвольный код?
[32:42.240 --> 32:46.240]  Аналогично.
[32:46.240 --> 32:56.240]  Ну, вот версия.
[32:56.240 --> 33:09.240]  Пакетик для разработки. Вот кто его делал. Занимает 179 килобайт английского пространства.
[33:09.240 --> 33:13.240]  А что они так мало занимают?
[33:13.240 --> 33:24.240]  Солидно большая крутая программа должна занимать десяток Blu-ray дисков.
[33:24.240 --> 33:43.240]  Ну, во-первых, потому что они связаны друг с другом и используют стандартные вещи от стандартной библиотеки.
[33:43.240 --> 33:49.240]  То есть реализуют только свою функциональность, но не тащат с собой копии стандартной библиотеки.
[33:49.240 --> 34:07.240]  То есть он требует Lipsy 6.
[34:07.240 --> 34:27.240]  Сколько пакетов со стандартной библиотекой из оси?
[34:27.240 --> 34:33.240]  Ну, правда, здесь одна у нас есть. Во многих сущностях.
[34:33.240 --> 34:55.240]  Например, собранная под AMD 6.4, под ARM, с поддержкой, плохо кто любит с поддержкой, 32-4-убитную, MIPS 32-4-убитную.
[34:55.240 --> 35:18.240]  Она уже есть, используется многими программами.
[35:18.240 --> 35:32.240]  Пакет Lipsy 6.
[35:32.240 --> 35:42.240]  В принципе опциональный. Относится и к библиотекам.
[35:42.240 --> 35:57.240]  Исходник. Огнули Lipsy. Разрабатывают его дебяновские мейнтейнеры. Основный размер 12.6 мегабайт.
[35:57.240 --> 36:01.240]  По сравнению с теми килобайтами.
[36:01.240 --> 36:18.240]  Рекомендуют поставить дополнительный пакет, но не требуют.
[36:18.240 --> 36:22.240]  К сожалению, с некоторыми она конфликтует.
[36:22.240 --> 36:29.240]  Либо такой пакет, либо другой. Вместе они пытаются, например, писать в один тот же файл.
[36:29.240 --> 36:41.240]  Или запускаться. Либо то будет, либо та, либо другая.
[36:41.240 --> 36:47.240]  Если его поставить, то поломается вот это.
[36:47.240 --> 36:55.240]  При условии, что версии меньше какой-то.
[36:55.240 --> 37:00.240]  Оставлено вручную? Нет. Откуда поставлено?
[37:00.240 --> 37:04.240]  В зеркало, в зеркало и в еду.
[37:04.240 --> 37:14.240]  В чем заключается отличие работы программы и отсутствия наличия рекомендованных пакетов?
[37:14.240 --> 37:20.240]  Как они могут прийти в тайну?
[37:20.240 --> 37:23.240]  Рекомендованных?
[37:23.240 --> 37:37.240]  Ну, смотри.
[37:37.240 --> 37:47.240]  Наша красная шапочка обрадовалась подаркам и решила приготовить деду морозу на огонь и ужин.
[37:47.240 --> 37:52.240]  Нам нужно собрать пакет под названием селедка под шубой.
[37:52.240 --> 38:03.240]  Вот реквирис. Селедка такой-то версии, свекла такой-то версии.
[38:03.240 --> 38:08.240]  Селедка под шубой рекомендует салат оливье.
[38:08.240 --> 38:14.240]  Нужна ли нам свекла, чтобы приготовить селедку под шубой?
[38:14.240 --> 38:19.240]  Сможем ли мы приготовить ее без селедки?
[38:19.240 --> 38:28.240]  Не сможем. Это требуется.
[38:28.240 --> 38:36.240]  А сможем ли мы есть ее без оливья?
[38:36.240 --> 38:38.240]  Да вполне сможем.
[38:38.240 --> 38:50.240]  Ну, мы говорим, что те, кто готовит селедку под шубой, скорее всего готовят к тому же празднику, до которой оливье.
[38:50.240 --> 38:56.240]  А вот, например, пакет пасхальный кулич рекомендует каштные яйца.
[38:56.240 --> 39:07.240]  Если у нас есть каштные яйца, пасхальный кулич когда-то устанет и готовится быстрее быть более вкусным?
[39:07.240 --> 39:09.240]  Не станет.
[39:09.240 --> 39:21.240]  Но разработчики знают, что, скорее всего, вам это понадобится, поэтому сразу рекомендуем.
[39:21.240 --> 39:25.240]  Но именно рекомендации не что более.
[39:37.240 --> 40:04.240]  Вот, видим.
[40:04.240 --> 40:09.240]  Тут есть еще две заполнительные записи.
[40:09.240 --> 40:13.240]  Сам пакет с такой версией.
[40:13.240 --> 40:32.240]  И еще парочку апдейтов к нему.
[40:32.240 --> 41:01.240]  Вот.
[41:01.240 --> 41:15.240]  Вот такие вот у нас пакеты.
[41:15.240 --> 41:30.240]  Что у нас, ядра, что нет?
[41:30.240 --> 41:58.240]  Апдейт весьма критичен. Говорит, что Command Line Interface нестабилен.
[41:58.240 --> 42:12.240]  Еще у нас, говорится, всякие модули для ядра, например, для NVIDIA.
[42:28.240 --> 42:43.240]  А нет у нас ядра. Как так может быть?
[42:43.240 --> 42:47.240]  Пустой буд.
[42:47.240 --> 42:50.240]  Как же такое случилось?
[42:50.240 --> 43:04.240]  Значит, что-то ломает.
[43:04.240 --> 43:26.240]  А у нас вот эта рубриотека Lipsy что-то ломает.
[43:26.240 --> 43:38.240]  Как бы нам сделать так, чтобы она у нас стояла и то и другое, но не ломалась?
[43:38.240 --> 43:43.240]  Чтобы они даже не знали друг от друга.
[43:43.240 --> 43:57.240]  Итак, красная шапочка осознала, что вешать на елку синий и зеленый шарики не сочетается.
[43:57.240 --> 44:02.240]  Почему она так решила, не важно.
[44:02.240 --> 44:12.240]  Но у нее есть какое-то решение. У нее есть целый лес. Что же она сделает?
[44:12.240 --> 44:19.240]  Главное, чтобы эти елки росли из разного корня.
[44:19.240 --> 44:26.240]  Так есть у нас есть.
[44:26.240 --> 44:36.240]  Но они стоят рядом, не сочетаются. Что же делать?
[44:36.240 --> 44:51.240]  К счастью, она живет в цивилизованном лесу.
[44:51.240 --> 45:02.240]  И в нем есть морской порт, есть морские контейнеры.
[45:02.240 --> 45:11.240]  Поэтому мы елочку любить не будем. Мы ее аккуратно выкопаем, чтобы ее можно было посадить как крупномер.
[45:11.240 --> 45:16.240]  Засунем стандартный морской 20-футовый контейнер.
[45:16.240 --> 45:19.240]  Прокроем его.
[45:19.240 --> 45:25.240]  И другую елочку синим шариком тоже.
[45:25.240 --> 45:30.240]  Вот у нас 2 отдельных контейнера.
[45:30.240 --> 45:38.240]  Один с одной елочкой, другой с другой.
[45:38.240 --> 45:46.240]  Чтобы посмотреть, нужно открыть этот контейнер, заглянуть, потом закрываем и смотрим следующий.
[45:46.240 --> 45:53.240]  В таком случае они одновременно растут. Никто их не трогает.
[45:53.240 --> 45:57.240]  Они полностью изолированы друг от друга.
[45:57.240 --> 46:04.240]  Всякие процессы роста и веточки на них растут независимо.
[46:04.240 --> 46:20.240]  Аналогично что-то у них общего.
[46:20.240 --> 46:24.240]  Только то, что они на земле. Только ядро земли у них общее.
[46:24.240 --> 46:34.240]  Аналогично. У нас здесь использована виртуализация.
[46:34.240 --> 46:54.240]  И на базе параллес сервер, как раз единый сервер, физический, разделён намного.
[46:54.240 --> 47:03.240]  У них есть общее ядро, поэтому ядра нет в каждом контейнере.
[47:03.240 --> 47:13.240]  В каждом контейнере есть своя файловая система, свой корень файловой системы, свои процессы.
[47:13.240 --> 47:19.240]  Изнутри контейнера не видны все процессы и файлы других.
[47:19.240 --> 47:30.240]  Снаружи ядро они видны, но модифицированное ядро позволяет такое разделение, виртуализацию.
[47:30.240 --> 47:40.240]  Мы в каждом контейнере можем ставить что захотим и оно замнимше.
[47:40.240 --> 47:50.240]  Вдруг дерево залезло некое животное,
[47:50.240 --> 48:00.240]  которое стало шептать наши красные шапочки страшные слова.
[48:00.240 --> 48:22.240]  Ты зря слушаешь всяких рекомендаций, что менеджер пакетов должен быть только один,
[48:22.240 --> 48:27.240]  который контролирует все пакеты в твоей системе.
[48:27.240 --> 48:39.240]  Попробуй что-нибудь ещё и ты узнаешь, какие бывают добрые пакеты.
[48:39.240 --> 48:47.240]  Вот такой фрукт поставишь себе.
[48:47.240 --> 48:53.240]  Что же это за зверь такой забрался на нашу ёлочку?
[48:53.240 --> 49:11.240]  Тут было предположение, что змей. Интересно, какой змей у нас тут заводится?
[49:11.240 --> 49:24.240]  Ну и у него тоже есть свой менеджер пакетов.
[49:24.240 --> 49:36.240]  Возможно он где-то ещё тоже вводится.
[49:54.240 --> 50:17.240]  Вот какие пакеты поставил наш ПИП.
[50:17.240 --> 50:31.240]  Теоретически оба менеджера пакетов могут работать одновременно в системе.
[50:31.240 --> 50:49.240]  По крайней мере до тех пор, пока они будут пытаться изменять те каталоги, которые пытаются менять другие.
[50:49.240 --> 51:00.240]  В WarLib RPM находится база данных RPM, которая по крайней мере не должна повредить.
[51:00.240 --> 51:14.240]  Возможно сами пакеты разложенные по системе тоже не должны повреждаться другим менеджерам пакетов, если он здесь вдруг работает.
[51:14.240 --> 51:32.240]  Что же у нас умеет ПИП?
[51:32.240 --> 51:42.240]  Например, может проверить по зависимости между пакетами.
[51:42.240 --> 52:00.240]  Проходится по графу и убеждается, что у нас нет никаких зависимостей, которые ведут отсутствующий пакет.
[52:00.240 --> 52:14.240]  Допустим, красивый суп №4, он же Beautiful Soup.
[52:14.240 --> 52:19.240]  Вот такая библиотека.
[52:19.240 --> 52:33.240]  Куда она ставится, они могут не подраться.
[52:49.240 --> 53:17.240]  Аналогично, у нас та же функциональность, что за пакет мы можем попробовать что-нибудь.
[53:17.240 --> 53:42.240]  К сожалению, теперь больше не поддерживает поиск.
[53:42.240 --> 54:07.240]  Увы, мы не смогли его поставить, но нам подсказывают.
[54:07.240 --> 54:21.240]  Мы можем поставить от имени отдельного пользователя, поскольку это не системы библиотеки, а дополнительные пакетики.
[54:21.240 --> 54:35.240]  И использовать только от конкретного пользователя, не мешая другим пользователям.
[54:35.240 --> 54:49.240]  Вот такая вот типа контейнеризации, только на уровне петонских пакетиков и для конкретного пользователя.
[54:49.240 --> 55:10.240]  Но это у нас как раз настоящий физический сервер, поэтому у него есть ядро.
[55:10.240 --> 55:25.240]  У него есть заполненный каталог BOOT, все уже полностью живое и натуральное.
[55:25.240 --> 55:44.240]  Полностью растет наша елочка корнем из гидрозивли. Даром, что она железная.
[55:44.240 --> 55:56.240]  А можно ли ставить как-то без пакетиков?
[55:56.240 --> 56:24.240]  В принципе можно, если ваш разработчик софта не позаботился о том, чтобы все это упаковать в пакетик.
[56:24.240 --> 56:52.240]  То, например, вы выкачиваете архивчик и в ручную ставите. Обычно конфигурую make-make-install.
[56:52.240 --> 57:16.240]  То есть когда запускаем конфигура, он генерирует make-file.
[57:16.240 --> 57:40.240]  В принципе так тоже можно, но какие возникают проблемы?
[57:40.240 --> 57:55.240]  Проблема прежде всего в том, что вы не можете проверить, какой файл к чему относится.
[57:55.240 --> 58:00.240]  Зачем нам понадобился этот файл? Можно ли его снести?
[58:00.240 --> 58:04.240]  Хорошо, нам нужно что-то обновить. А ничего у нас не поломается от этого?
[58:04.240 --> 58:13.240]  Нам нужно поставить что-то, оно не работает без чего-то. Мы узнаем, потому что он не запустится, а документацию, что оно от чего зависит, нет.
[58:13.240 --> 58:28.240]  Наличие связи позволит автоматически подгрузить какие-то зависимости.
[58:28.240 --> 58:38.240]  Есть дестрибутивы в линуксе, в которых нет зависимости. В качестве менеджера пакета используется архиватор TGZ.
[58:38.240 --> 58:55.240]  Слить много файлов в один, как бы на магнитную ленту записать и сжать.
[58:55.240 --> 59:06.240]  Просто распаковывая файлы, в принципе, работает. Ногу поставил пакет, не запустил, не работает. Оказывается, зависимости нет.
[59:06.240 --> 59:13.240]  А зависимости не предусмотрено. Есть, впрочем, еще версии.
[59:13.240 --> 59:32.240]  Например, есть дистрибутивы, в которых вы все ставите из исходников. Вы просто скачиваете исходные тексты, компилируете себя.
[59:32.240 --> 59:55.240]  Конечно, получается замечательная система, быстрая. Вы скачиваете самые свежие исходные тексты, не дожидаясь пока кто-нибудь их закращает в пакетике.
[59:55.240 --> 01:00:10.240]  Ну а в чем проблема? Никто не проверял, как они совместимы. А также компиляция будет долгой.
[01:00:10.240 --> 01:00:23.240]  То есть сборка системы может занять несколько суток, когда вы вообще абсолютно все собираете из исходников.
[01:00:23.240 --> 01:00:30.240]  Ну, может быть, вы, эти исходники, перед этим как-то слегка правите под свои задачи.
[01:00:30.240 --> 01:00:42.240]  Полностью конфигуруемая, полностью ваша система, и вот так построен дистрибутив Gen2.
[01:00:42.240 --> 01:00:57.240]  Тоже в принципе имеют право на жизнь, но как-то ограничено в применении.
[01:00:57.240 --> 01:01:26.240]  Ну, у App тоже есть свои репозитории. То есть просто ссылки, откуда нам брать пакеты и какие ветки брать.
[01:01:26.240 --> 01:01:36.240]  То есть хотим ли мы брать несвободные пакеты, пакеты-контрибуторов основные, там старые.
[01:01:36.240 --> 01:01:50.240]  Ну вот по этим ссылкам мы хотим, или не очень хотим, это все настраивается.
[01:01:50.240 --> 01:02:11.240]  Ну, аналогично настроены на местный репозиторий.
[01:02:11.240 --> 01:02:22.240]  Ну, плюс такой мини-фаервол для блоки или мини-энтблок, прямо от ITC-хоса написано.
[01:02:41.240 --> 01:03:04.240]  То есть для того, чтобы все это собрать, нужно и самому собрать пакетик, нужно, естественно, все исходники.
[01:03:04.240 --> 01:03:29.240]  Нужно описать spec-файл со спецификацией, что у нас.
[01:03:29.240 --> 01:03:56.240]  Причем из таких мелочей Vim автоматически подсказывает формат spec-файла, то есть что нам написать в качестве названия, версии, номера релиза, описание.
[01:03:56.240 --> 01:04:03.240]  Откуда взялось, что требуется для сборки, что требуется для запуска.
[01:04:03.240 --> 01:04:07.240]  Например, компилятор нам требуется для сборки, но для запуска он не требуется.
[01:04:07.240 --> 01:04:19.240]  Что нужно, чтобы подготовиться к этой операции, до установки, как установить, ну и как поставить.
[01:04:19.240 --> 01:04:33.240]  Ну вот, возможный пример на примеры того же tmux.
[01:04:49.240 --> 01:05:08.240]  Указываю, что библиотека у нас будет здесь, указываю опцию обойтись безразделяемым библиотек.
[01:05:08.240 --> 01:05:17.240]  То есть заходим в разные каталоги, делаем какие-то операции необходимые, указываем флаги для компиляции,
[01:05:17.240 --> 01:05:22.240]  по которым уже будет сгенерирован make-файл.
[01:05:22.240 --> 01:05:29.240]  То есть конфигура, make и make-install.
