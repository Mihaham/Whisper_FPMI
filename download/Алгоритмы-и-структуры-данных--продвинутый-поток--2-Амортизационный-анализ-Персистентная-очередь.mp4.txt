[00:00.000 --> 00:10.200]  что мы сегодня будем обсуждать, да, вот мы сегодня будем обсуждать эмоциональный
[00:10.200 --> 00:14.840]  анализ, то есть у нас еще одно такое занятие будет на не столько алгоритмы, хотя надеюсь
[00:14.840 --> 00:19.040]  сегодня ближе к концу у нас будет сегодня такой алгоритм, где мозг придется немножко повзрывать,
[00:19.040 --> 00:24.880]  вот, но сейчас немножко фундамента, потому что вот вы уже упоминали кучу фибоначи,
[00:24.880 --> 00:30.480]  а на самом деле там изучать кучу фибоначи без четкого знания того, что такое эмоциональный
[00:30.480 --> 00:38.680]  анализ, к сожалению, невозможно, вот, ну потому что о чем вообще речь, вот, но речь идет о
[00:38.680 --> 00:47.000]  следующем, вот почти наверное вы все сталкивались с такой реализацией очереди, как очередь на двух
[00:47.480 --> 00:55.200]  стэках сталкивались даже на 6 стэках сталкивались. Так, а ну-ка, кто сталкивался с очередью на
[00:55.200 --> 01:06.040]  двух стэках, кто сталкивался с очередью на шести стэках? А кто писал очередь до шести стэках,
[01:06.040 --> 01:16.120]  ух ты, здорово! Очередь на декартовых деревьях. Заметит, понятно, хорошо, ладно, значит,
[01:16.120 --> 01:24.160]  вам сегодня будет немножко скучно в какой-то момент. Ну что делать? Смотрите, как же у нас
[01:24.160 --> 01:31.200]  устроено, давайте вспомним, очередь на двух стеках. Устроено это примерно следующим образом. То есть у
[01:31.200 --> 01:41.000]  нас есть два стека. То есть в один мы кладем элементы, в другой из другого мы достаем
[01:41.000 --> 01:45.200]  элементы. То есть у нас вот в каждый момент времени типа сколько-то элементов тут,
[01:45.200 --> 01:49.920]  сколько-то элементов тут. Если приходит запрос положить элемент, положить в очередь,
[01:49.920 --> 01:55.960]  прошу прощения, то мы кладем в этот стек. Если пришел запрос вынуть элементы,
[01:55.960 --> 02:04.160]  достаем из этого стек. Но важный момент. Что делать, если оказалось, что этот стек оказался
[02:04.160 --> 02:12.080]  пустым, а вы из него хотите что-то достать. И при этом выяснилось, что в стеке И что-то так и есть.
[02:12.080 --> 02:20.880]  Что делать? Ну тогда в этот момент мы быстренько, насколько можем, перекладываем все элементы из
[02:20.880 --> 02:27.440]  этого стека сюда. Вот, то есть слету технология может показаться не тривиальной, но вот, хотя,
[02:27.440 --> 02:32.240]  как показывает Амаяк, Акапьян, Спокойной ночи, малыши, на самом деле просто стеки надо класть
[02:32.240 --> 02:43.040]  немножко по-другому. То есть на самом деле стек нужно вот стек ин класть вот так, а вот класть
[02:43.040 --> 02:49.800]  вот так. И еще вот тут покрасть. Тогда вот оказывается максимально наглядно, тогда видно,
[02:49.800 --> 02:57.200]  почему действительно эта реализация действительно реализует очередь. Вот, то есть единственная
[02:57.200 --> 03:02.480]  проблема, что тут где-то в очереди у нас такая дыхка и приходится искусственно перекладывать эти
[03:02.480 --> 03:16.000]  элементы отсюда-сюда. Да нет? То-то и прикол, что нет. Смотрите, что... Нет, нет, смотрите внимательно.
[03:16.000 --> 03:23.200]  Ну потому что, смотрите, стек, видите, дно стека у ин находится вот здесь, а у аута находится здесь.
[03:23.200 --> 03:29.600]  Поэтому выглядит так. То есть если тут стек стал пустым, а тут лежат элементы, допустим, там,
[03:29.600 --> 03:38.520]  я не знаю, один, два, три, четыре, пять, семь. Вот. То в принципе, чтобы очередь сохранялась, нам
[03:38.520 --> 03:42.080]  нужно положить их так, чтобы они тут тоже были справа, там, слева направо. Один, два, три, четыре,
[03:42.080 --> 03:52.400]  пять, семь. Что для этого мы делаем? Достаем элемент семь и кладем его сюда. Потом берем
[03:52.400 --> 03:58.760]  элемент пять и кладем его сюда. Вот ведь просто часто достали из стека, положили в стек и так далее.
[03:58.760 --> 04:05.800]  Все, так что тут получается без вопросов. Один, два, три, четыре, ура. Так что с порядком тут прям все так,
[04:05.800 --> 04:12.800]  как как раз нужно. Да, ну в общем, действительно, достаточно простой такой веселый алгоритм,
[04:12.800 --> 04:22.880]  вот. Но у него есть маленький недостаток с точки зрения анализа. Вот. То есть если мы, например,
[04:22.880 --> 04:29.840]  хотим сказать, за какую асимптотику работают его операции. Да, вот мы как раз в прошлый раз
[04:29.840 --> 04:37.120]  изучали, что такое асимптотика, да. Вот. И вот спрашивается, за какое время мы можем положить
[04:37.120 --> 04:44.200]  элемент в такую очередь? Казалось бы, да. Да, за от единицы, действительно, без вопросов. Да,
[04:44.200 --> 04:51.000]  четенько, за от единицы. Вот. А за какое время мы можем достать элементы из такой очереди?
[04:51.000 --> 05:01.920]  А вот. Ну вот. Ну вот. То есть формально на текущий момент можно сказать, что точное время там
[05:01.920 --> 05:07.440]  действительно от, там условно, там один плюс количество элементов в ине, если не повезет. Ну,
[05:07.440 --> 05:14.000]  так, да. Ну вот, а в худшем случае мы такое можем оценить только как у отн. Потому что может
[05:14.000 --> 05:19.480]  так случиться, что вы реально будете n элементов перегонять из стека им в стека, и ничего не
[05:19.480 --> 05:25.760]  поделать. Но тогда еще у нас верхняя оценка на операцию поп у отн. Тогда получается, что n
[05:25.760 --> 05:34.160]  операции с такой очередью мы делаем за отн квадрат. Вот из такого простого анализа получается
[05:34.160 --> 05:43.400]  н квадрат. Зачем нам такая очередь? Неужели мы лучше не можем реализовать? Вот. Но оказывается,
[05:43.400 --> 05:52.760]  что действительно, да, как иногда модно говорить, не все так однозначно. Что тут неоднозначно? Ну вот,
[05:52.760 --> 05:59.640]  потому что кто-то заметит, что на самом деле в некотором смысле суммарно это будет работать за
[05:59.640 --> 06:06.120]  линию. Или, как еще говорят, иногда в среднем это работает за 1. Тут разные словосочетания
[06:06.120 --> 06:15.680]  применяются. Ну, что имеется в виду? А имеется в виду следующее, заметим шо. Заметим шо, да,
[06:15.680 --> 06:21.080]  мы перекидываем какие-то элементы, но с другой стороны заметим, что с каждым конкретным добавленным
[06:21.080 --> 06:27.800]  в эту очередь элементом мы делаем О от единицы операции. Даже не от единицы, а просто 3. Ну там
[06:27.800 --> 06:36.720]  не более трех. А именно мы кладем этот элемент в stack in, перекладываем его из stack in в stack out
[06:36.720 --> 06:41.640]  и достаем из stack out. Ну, в других редакциях можно считать, что там, конечно, мы за две операции
[06:41.640 --> 06:47.800]  его достаем из иной и кладем в out, но это уже мелочи технически. То есть с каждым конкретным
[06:47.800 --> 06:53.960]  элементом мы делаем О от единицы действий и тогда получается, что если мы дам дана пустая очередь и мы
[06:53.960 --> 07:03.040]  делаем н операции, то суммарно они могут быть сделаны за О от н. То есть выполнены за О от н. То есть
[07:03.040 --> 07:09.880]  стандарты. То есть что получается? То есть получается, да, одна конкретная какая-то операция может
[07:09.880 --> 07:21.920]  работать долго, но суммарно они работают быстро. Вот такая вот интересная диспозиция. И замечаем,
[07:21.920 --> 07:25.960]  что стандартным анализом, когда мы просто оцениваем каждую операцию сверху, мы такое
[07:25.960 --> 07:33.200]  адекватно исследовать не можем, потому что тогда мы вот такие возможности упускаем. То есть да,
[07:33.200 --> 07:37.680]  это, конечно, не идеальность, действительно определенная там определенного рода. То есть
[07:37.680 --> 07:45.240]  в некоторых местах такие алгоритмы запрещены, потому что в некоторых местах иногда там
[07:45.240 --> 07:49.160]  разрабатывается какой-нибудь там процессор совсем, там какие-нибудь базы, там мелкие какие-то вещи,
[07:49.160 --> 07:54.280]  там зашиваются только алгоритмы, которые работают железо-бетона. Потому что там вот принципиально,
[07:54.280 --> 07:58.560]  чтобы там каждая конкретная операция делалась вот зафиксирована, за там какую-то фиксированную
[07:58.560 --> 08:05.160]  долю секунды. Но чтобы не было такого, что раз миллион операций она зависнет. Не потому,
[08:05.160 --> 08:11.880]  что она поломалась, а потому что там вот это, но потому что тут кто-то там вот перекладывал
[08:11.880 --> 08:23.040]  какие-то элементы. Но тем не менее такие приемы иногда имеют смысл. То есть иногда они сильно
[08:23.040 --> 08:27.920]  расширяют возможности, поэтому нам потребуется в частности куча фибоначий. На самом деле будет
[08:27.920 --> 08:37.800]  хорошим примером именно такой вот амортизации. Поэтому что мы будем делать? Вот поэтому нам
[08:37.800 --> 08:44.960]  придется вести некоторую теоретическую базу под это, то есть такой некий инструментарий.
[08:44.960 --> 08:54.560]  Итак, амортизационная, как же мы это будем делать? Ну вот на самом деле на примере очереди
[08:54.560 --> 09:03.760]  двух стеков мы будем это демонстрировать, как мы будем мыслить. Ну точнее терминологию,
[09:03.760 --> 09:10.080]  то есть рассказать как конкретно вы будете мыслить мне, конечно, сложно. То есть каждый все-таки по
[09:10.080 --> 09:17.160]  своему будет мыслить. Вот у кого-то конечно есть мечта, чтобы все вышли и мыслили одинаково,
[09:17.160 --> 09:33.960]  но как бы сомнительно. И так, чего, что значит? Ничего не значит. Понятно. Значит смотрите,
[09:33.960 --> 09:44.760]  и так амортизационный анализ. Но как можно решить такую ситуацию, анализировать? Но анализировать
[09:44.760 --> 09:49.960]  на самом деле можно по-разному. Смотрите. То есть в принципе, да, ну обычно считается,
[09:49.960 --> 09:56.000]  что давайте вот вообразим себе, что вот у нас есть там выполнена N операции и каждая работает
[09:56.000 --> 10:02.840]  за какое-то время. Ну и там может быть оценка. Вот так сказать, вот допустим, оно там С2, С3,
[10:02.840 --> 10:21.800]  С4, С5 и так далее. Вот. Да. Ну и тихо плана. Пока не поздно могу на Т поменять, надо. Давайте
[10:21.800 --> 10:27.840]  это хорошо. Ну так ладно. В каких-то стандартных книжках на самом деле может быть С. Да, в роли
[10:27.840 --> 10:33.280]  стандартной книжки. Книжка Бобенко-Левин. Там алгоритмы и структуры данных. Да, кстати,
[10:33.280 --> 10:37.240]  давайте на всякие штуки сразу напишу, потому что какие-то там книжка, к сожалению, не самая
[10:37.240 --> 10:42.720]  толстая, но какие-то интересные алгоритмы, причем с четким математическим анализом там есть.
[10:42.720 --> 11:10.440]  Так что вот здесь могу очень. Ну вот. Вот. Какой из? Не-не-не-не-не-не. Нет. Нет, это не тот,
[11:10.440 --> 11:14.520]  который теряем у Кука Левина там и так далее. Нет, там просто это. Это сильно более молодое,
[11:14.520 --> 11:25.120]  это чуть более молодое поколение, конечно. Вот. Вот. А вот Максим Бобенко, да, тот самый. Вот.
[11:25.120 --> 11:38.240]  Так. Так значит. И так. Вот, допустим, у нас какие-то времена, мы их будем звать реальное время.
[11:38.240 --> 11:54.600]  Вот. Но нам, значит, ну, то есть наша цель на самом деле будет иногда, значит, найти такое более
[11:54.600 --> 12:02.760]  экзотическую вещь. Мы это будем рисовать как там ТРИТЭ с крышечкой. Да, вот такой крышечкой.
[12:02.760 --> 12:11.000]  Вот. Знаете, кто-то считает, что крышечка это такой польский режиссер. Ну, вот. Но у нас крышечка
[12:11.000 --> 12:16.600]  будет вот такая. Не-не-не. Именно вот. Нет, там польский там какой-то. Там это Гжегж крышечка,
[12:16.600 --> 12:25.080]  что-то в этом роде. Не, ну ладно, это я от балды сказал, конечно. Ну ладно. Так. Ну вот. Вот.
[12:25.080 --> 12:31.560]  Значит. Но зачем он нам понадобился? Вот. Такие крышки. Значит. Что это такое вообще? Что это за
[12:31.560 --> 12:40.520]  Т с крышечкой? Вот. Это вот что. То есть это у нас некоторое ученое. То есть это так называемое учетное
[12:40.520 --> 12:47.520]  время. Значит. То есть это тоже как бы время. То есть мы будем говорить, что у нас как бы
[12:47.520 --> 12:54.520]  там время работы, там третья операция была вот такое. Но, конечно, с реальностью оно может
[12:54.520 --> 13:01.000]  сильно расходиться. Но с реальностью оно может очень сильно расходиться. Но, на самом деле,
[13:01.000 --> 13:10.200]  причем в разные стороны. Оно может быть меньше реального, а может быть и сильно больше. Но,
[13:10.200 --> 13:15.160]  на самом деле, конечно, чтобы... Ну какие-то, что мы тут можем нарисовать? В принципе, мы эти Т с
[13:15.160 --> 13:20.120]  крышечкой можем нарисовать какие угодно вообще. Можно просто заявить, что там дикартовые деревья
[13:20.120 --> 13:27.400]  работают в завод единицы. Или там, что еще там бывает? Фу, я тоже самый завод единицы
[13:27.400 --> 13:34.480]  работает, вы знали? Вот. То есть просто. То есть это из цикла сказать можно все что угодно. Можно
[13:34.480 --> 13:42.120]  там сказать, что время бывает отрицательным, там что-нибудь еще и так далее. Ну вот. Ну и сказать,
[13:42.120 --> 13:48.360]  что оно. А время работы деревоотресков зависит от фазы луны. Там, например. А дикартового дерева
[13:48.360 --> 13:56.280]  нет. Вот. Можно. Поэтому отрицательный вопрос. То есть нужны какие-то естественные ограничения,
[13:56.280 --> 14:02.640]  потому что это же должно быть как-то связано вообще с жизнью и нам как-то полезно. Поэтому в идеале нам
[14:02.640 --> 14:10.140]  бы хотелось, конечно, то есть на это учетное время поставить следующее ограничение. Что хочется,
[14:10.140 --> 14:21.260]  чтобы для любого и было верно, чтобы сумма t житых с g равно от единицы до и не превосходила t с
[14:21.260 --> 14:30.100]  крышечкой. Вот. То есть так. То есть видите, мы здесь, конечно, не требуем, чтобы каждая конкретная
[14:30.100 --> 14:35.880]  крышечка была больше своего бескрышечного собрата. Но мы хотим, чтобы сумма на префиксах
[14:35.880 --> 14:45.720]  учетного времени оценивала сверху реальное время. Вот что нам, собственно, хочется. То есть какие
[14:45.720 --> 14:51.220]  возможности это нам дает? То есть в принципе это нам дает возможность на самом деле это время
[14:51.220 --> 15:01.080]  накапливать. То есть чтобы это работало. Как мы тогда будем действовать? Каким образом можно
[15:01.080 --> 15:07.060]  эти учетные времена назначать? То есть это наша такая мечта. Но есть три конкретные, ну то есть по
[15:07.060 --> 15:11.320]  разному можно время назначать. То есть там действительно как-то. Но есть три такие стандартные
[15:11.320 --> 15:17.880]  технологии или там способа мышления. В данном случае просто такие вот очень известные.
[15:17.880 --> 15:28.520]  Ну в общем-то да. Более того самое смешное, что иногда крышечкой бывают даже отрицательными. И это
[15:28.520 --> 15:35.480]  нас даже не сильно пугает. Сейчас вы увидите почему. Ну не сейчас может быть, но в целом. Хотя
[15:35.480 --> 15:39.640]  если у вас там получится отрицательный, ну господи замените его на единицу и как бы хуже не
[15:39.640 --> 15:48.320]  станет. Вот. Но иногда вот бывает хорошо. Потому что бывает тут следующее. Значит,
[15:48.320 --> 15:53.320]  способы анализа тут такие. Так, давайте я это сотру. А то прям большенькие ощущения, что это
[15:53.320 --> 16:01.000]  способы анализа прям Бобенко-Левин и придумали. Хотя, хотя да, я уже запамятовал на чем я в этом
[16:01.000 --> 16:05.400]  месте базировался. Но возможно, кстати, на этой книжке и базировался в этом месте. А ну пока и
[16:05.400 --> 16:11.640]  мере про третий способ, который мы вот до которого мы дойдем. Точно вот на них базируется. Значит,
[16:11.640 --> 16:25.440]  смотрите. И так значит способ номер раз. Способ номер раз называется анализ в среднем. Вот мы
[16:25.440 --> 16:30.360]  сегодня уже упоминали это слово сочетание. Но здесь на самом деле сразу предупрежу может быть
[16:30.360 --> 16:35.640]  маленькая двусмысленность. То есть в нашем курсе на самом деле понятие в среднем может нести два
[16:35.640 --> 16:42.040]  смысла. Второй из них это в вероятностном смысле. То есть там допустим у вас вероятность алгоритм и в
[16:42.040 --> 16:48.000]  среднем будет означать, что математическое ожидание времени работы равно там чему-то там. Вот. Но
[16:48.000 --> 16:53.880]  как бы мы сейчас вообще не говорим, например, о вероятности. Да, то есть у нас алгоритмы
[16:53.880 --> 17:00.200]  детерминированы абсолютно. Там детерминированная, там на всех случаях непараллельная. Там если что,
[17:00.200 --> 17:12.760]  ну мало ли. Вот соответственно. И анализ в среднем у нас будет означать следующее. То есть нам на
[17:12.760 --> 17:22.360]  самом деле мы просто скажем, что t и t с крышечкой это будет равно какая-то оценка на t1 плюс t2 плюс
[17:22.360 --> 17:34.960]  и так далее. Плюс обратите внимание n поделить на n. То есть тупо говоря, то есть мы говорим,
[17:34.960 --> 17:44.800]  что, ну то есть это анализ такой, самый такой. Так как мы еще раз. Называется дубаломно-прямолинейный.
[17:44.800 --> 17:49.880]  Вот вспомнил. А то сразу в голове straight forward. Вот в голове сразу. Вот как вот. Вот это да.
[17:49.880 --> 17:55.640]  Да, дубаломно-прямолинейный. Вот самый такой. То есть мы говорим, что нам не интересно,
[17:55.640 --> 18:00.640]  каждая конкретная операция, давайте думать, как они будут работать в сумме. Как это работает в
[18:00.640 --> 18:08.440]  очереди на двух стеках? В очереди на двух стеках, так как мы говорим, так вот мы сделали n операции.
[18:08.440 --> 18:14.440]  Значит в очередь было добавлено не более чем n элементов. И с каждым из этих элементов было
[18:14.440 --> 18:20.840]  проделано не более чем от единицы операции. Там три или там четыре соответственно. Значит,
[18:20.840 --> 18:32.280]  получается суммарно эти операции были выполнены за отn. А в среднем, в среднем, в среднем каждая
[18:32.280 --> 18:40.560]  операция делается за от1. То есть вот так вот можно проанализировать в среднем очередь на двух
[18:40.560 --> 18:56.520]  стеках. Нет, обратите внимание, мы взяли все n, у нас даже и t, вот эта учетная стоимость зависит
[18:56.520 --> 19:03.600]  от n, видите. То есть обратите внимание, то есть я среднеархметически беру не префикс, а именно
[19:03.600 --> 19:24.240]  всего. Так, ух ты, подляночка, действительно подляночка. Действительно, то есть в целом это
[19:24.240 --> 19:29.040]  действительно у нас работает, но вот такому требованию действительно не удовлетворяет.
[19:29.040 --> 19:34.920]  Хотя парадокс заключается, но вот, хотя просто в этом месте на самом деле просто,
[19:34.920 --> 19:41.200]  но в этом месте такой формализм не заморачивается. А во-вторых, на самом деле просто есть в тот момент,
[19:41.200 --> 19:47.080]  когда у вас выполнены и операции, на самом деле учетные стоимости оказываются другими. Потому
[19:47.080 --> 19:52.440]  что когда вы сделали и операции, тогда у вас как бы n равно и, и у вас среднеархметически берется
[19:52.920 --> 20:02.960]  вот, то есть как бы они как бы, получается, что они так это модифицируются. Да, но на самом,
[20:02.960 --> 20:14.840]  но вот, нет, ну в принципе, наверное, да, ну хотя в идеале на самом деле хотелось бы именно такого,
[20:14.840 --> 20:23.840]  но да, хотя, конечно, да. Хорошо, ладно, давайте, ладно, сделаем так. Хорошо, сильное условие,
[20:23.840 --> 20:31.320]  давайте сделаем так. То есть давайте, можно ввести так, сильное условие такое, а есть просто
[20:31.320 --> 20:41.560]  слабое условие. То есть слабое условие будет говорить, что действительно сумма по всем g равно
[20:41.560 --> 20:55.840]  от 1 до n, g меньше либо равно суммы g равно 1n, tg с режиссером. Вот, и так, хорошо, да,
[20:55.840 --> 20:59.640]  то есть такому слабому оно действительно удовлетворять будет, хотя, может быть,
[20:59.640 --> 21:05.040]  в общем случае, может быть, так часто бывает, что этого может оказаться и достаточно, на самом
[21:05.040 --> 21:09.080]  деле. Потому что, по большому счету, когда вы примете амортизационный анализ, на самом деле,
[21:09.400 --> 21:14.720]  вам нужно гарантирует, так, ладно, у меня там это, так, массив длины n, там что-то q запросов,
[21:14.720 --> 21:18.680]  и мне нужно просто выполнить эти q запросов за адекватное время. То есть в принципе вот этого
[21:18.680 --> 21:28.880]  хватит, то есть вот этого на самом деле вам хватит. Вот, и так, значит, да, но так или иначе,
[21:28.880 --> 21:35.160]  действительно такой вот анализ среднем, то есть он действительно, то есть он, может быть,
[21:35.160 --> 21:39.440]  технически самый простой, но с другой стороны, каждую там структуру, на самом деле, такие,
[21:39.440 --> 21:44.160]  как кучу фибоначили, там сплей дерева тоже самое, то есть, конечно, анализировать в таком виде не
[21:44.160 --> 21:49.520]  получится. То есть сейчас у нас просто получилось, что мы, у нас очередь на двух стеках достаточно
[21:49.520 --> 21:54.280]  простая структура данных, на которую мы просто сумели посмотреть просто сверху и там все о ней
[21:54.280 --> 22:04.160]  понять. Ну вот, во всяких сплейах так, конечно, не получится прямо сверху посмотреть. Вот, значит,
[22:04.160 --> 22:15.560]  какие тут еще есть вариант. Значит, метод второй. Так, давайте-ка я лучше... Ой, тут я все-таки
[22:15.560 --> 22:23.000]  стирать буду. Так, потому что тут вы все равно записываете. А, и камера записывает, так что,
[22:23.000 --> 22:31.160]  неважно. Итак, смотрите, метод второй называется метод бухгалтерского учета.
[22:31.160 --> 22:52.640]  Вот. Или метод монетки. Вот. Ну, по-разному, на самом деле, на самом деле... Ой, дай бог поймите. Не знаю.
[22:52.640 --> 23:03.280]  Вот. Ну, на самом деле, да, можно просто так. Метод монетки. Значит, он предлагает... Ну,
[23:03.280 --> 23:08.360]  честно скажу, на самом деле, в разной литературе будут разные интерпретации, поэтому вот. Вот,
[23:08.360 --> 23:15.320]  но у меня интерпретация такая. Смотрите, значит, что мы себе добавляем еще одну сущность. Помимо
[23:15.400 --> 23:26.120]  того, что мы во время работы делаем какие-то действия, у нас появляются монетки. Эти монетки мы
[23:26.120 --> 23:36.840]  иногда получаем, а иногда тратим. Вот. То есть, такой вот интересный способ нот. Но при этом,
[23:36.840 --> 23:42.320]  значит, за что мы платим? А платим мы за то, что мы говорим, что некоторые действия... Вот за
[23:42.320 --> 23:47.520]  некоторые действия мы платим монетку. И что это значит? Это означает, что мы эти действия не считаем.
[23:47.520 --> 24:00.400]  То есть, вот такой чит. То есть, значит, как это выглядит на очереди из двух стеков? Как это
[24:00.400 --> 24:10.840]  выглядит? А вот как. Значит, идея такая. Значит, вот у вас стек есть in и есть стек out. Да. Мы
[24:10.840 --> 24:19.240]  по-прежнему добавляем элементы в стек in, но, внимание, к каждому элементу скотчем
[24:19.240 --> 24:34.840]  прицепляем монетку. Вот. Какую-то монетку. Идея следующая. Что такое монетка? Монетка
[24:34.840 --> 24:44.200]  это то, за что можно оплатить, собственно, переезд на другую сторону вот этого вот стикса. Вот. На
[24:44.200 --> 24:50.240]  этой вот рейке. То есть, мы как бы оплачиваем. То есть, когда мы перетаскиваем элементы и стакаем
[24:50.240 --> 24:54.560]  стек out. То есть, за перетаскивание каждого элемента мы эту монетку платим. То есть,
[24:54.560 --> 25:01.080]  когда элемент попадает в стек out, то есть, монетки у него уже нет. Но за то получается,
[25:01.080 --> 25:11.600]  что мы больше за это, но за то мы как бы эти действия как бы игнорируем. Вот. Но тогда,
[25:11.600 --> 25:20.520]  если мы игнорируем, тогда получается, что все действия здесь выполняются за от единицы. Вот.
[25:20.520 --> 25:26.760]  Но оказался конкретно в таком виде, конечно, это может выглядеть подозрительно. Потому что
[25:26.760 --> 25:30.600]  можно сказать, а почему мы только одну монетку кладем? Давайте там сразу по миллиону долларов
[25:30.600 --> 25:38.040]  на каждую эту класть и все оплачивать. Все. И тогда все будет бесплатно. Вот. Жалко, да. Да,
[25:38.040 --> 25:43.080]  это да. Но, к сожалению, да. То есть, ну ладно. Наверное, скорее к счастью, конечно, чем к
[25:43.080 --> 25:48.000]  сожалению. У нас компьютер в такую коррупцию пока не умеет. Потому что мы не можем просто там,
[25:48.000 --> 25:57.040]  потому что сам по себе компьютер, там сам по себе компьютеру деньги не нужны. Вот. Да и, в общем-то,
[25:57.040 --> 26:02.880]  идеальной математике, в общем-то, тоже. Но общий чит здесь заключается в следующем. Да. Он
[26:02.880 --> 26:08.600]  заключается именно в том, что мы не сильно много монеток вообще получили, не сильно много монеток
[26:08.600 --> 26:13.440]  получили. То есть, можно, в принципе, свести это сразу к анализу в среднем и сказать, смотрите,
[26:13.440 --> 26:22.080]  что у нас как бы на каждом шаге от единицы неоплаченных действий. Да. Это значит, то есть,
[26:22.080 --> 26:30.360]  суммарно у нас получается от неоплаченных действий плюс действия оплаченные монетками. Да. Но здесь
[26:30.360 --> 26:35.240]  есть два важных момента. Первый. Это вот важный принцип, без которого вообще никуда. Мы никогда
[26:35.240 --> 26:42.640]  не тратим монеток больше, чем получаем. Да, вот это вот важный принцип. Да, в долг мы не работаем.
[26:42.640 --> 26:54.760]  Да. Чего нельзя? Нет, крит. Ну, кредит нельзя. Да. Не, ну там, можно там теоретически, наверное,
[26:54.760 --> 27:03.360]  брать какой-то контролируемый кредит, конечно, но... В каком смысле мы их получаем, если не приклеены к элементам? То есть, мы получаем... Ну, то есть, да. Да, но в каком?
[27:03.360 --> 27:09.000]  Мы их получаем. То есть, когда мы получаем новый элемент, мы как бы вместе с ним получаем монетку. Ну, это
[27:09.000 --> 27:15.200]  как когда вы посылаете там, собственно, какое-то письмо в конверте. То есть, вы как бы клеите на него
[27:15.200 --> 27:23.960]  марку. Это типа... Да, конечно. Ну, и самого элемента еще нет. То есть, условно говоря, нам на почту как бы его
[27:23.960 --> 27:29.960]  как бы кладут. То есть, тем более, что мы его даже особо не кладем, потому что мы в данном случае это
[27:29.960 --> 27:38.400]  такой вот черный ящик, в который есть как бы два окошечка. То есть, в одно окошечко нам подсовывают
[27:38.400 --> 27:44.160]  элемент, который надо добавить, а в одном там это кладут, там жмут кнопочку, и мы должны там
[27:44.160 --> 27:51.680]  другое окошечко выдать элемент. Вот. То есть, как бы элементы, они как бы даже не берутся от нас.
[27:51.680 --> 27:57.360]  Как более того, мы даже толком не знаем, какие сами эти элементы. То есть, вы это будете особенно
[27:57.360 --> 28:03.000]  хорошо понимать, когда будете там на C++ изучать шаблоны. Вот. То есть, видите, нам же не принципиально,
[28:03.000 --> 28:08.360]  что это такое сами элементы. Инты, даблы, там, поинты какие-нибудь, там еще какое-нибудь
[28:08.360 --> 28:15.920]  безобразие. То есть, нам не принципиально. Вот. Как бы мы просто сидим, мы сидим в черном ящике и как бы
[28:15.920 --> 28:21.600]  думаем. Это, кстати, вот очень удобный способ программировать сложные задачи. Вот зачем эта
[28:21.600 --> 28:27.880]  все опешность нужна. То есть, очень удобно, что ставить свою сложную программу как набор вот таких
[28:27.880 --> 28:33.480]  черных ящиков. Потому что каждый черный ящик четко себе прописал, что я умею делать вот это,
[28:33.480 --> 28:39.160]  все больше я ничего не умею. Тогда внутри черного ящика вы думаете, как это обеспечить,
[28:39.160 --> 28:43.880]  а вне черного ящика вы думаете, как им пользоваться, но вы не думаете о том и о другом единовременно.
[28:43.880 --> 29:04.160]  Чего можно? Ну, как сказать? Ну, как сказать? Нет, ну, все в этом мире можно использовать. Да,
[29:04.160 --> 29:09.560]  понятно. Это уже, конечно, что-то из цикла надо уничтожить компьютер, потому что существует там
[29:10.560 --> 29:19.240]  в котором эти наркотики продаются. Да, ну, мы сейчас изучаем, как строить алгоритмы. Да,
[29:19.240 --> 29:24.000]  любой инструмент, конечно, понятно. Ну, тут, да, понятно, классический инструмент. Тут, конечно,
[29:24.000 --> 29:29.440]  как про какой-нибудь хирургический скальпель, которым, в принципе, можно тупо там пырнуть и
[29:29.440 --> 29:35.240]  убить человека, а можно, в принципе, наоборот, там спасти ему жизнь. Да, ну, или там, понятно,
[29:35.720 --> 29:43.160]  классические примеры, тут нет смысла остановить. Да, ну, мы сейчас как бы, да, ну, мы сейчас
[29:43.160 --> 29:50.240]  занимаемся тем, что изучаем инструментарии, значит, поэтому смотрим. Итак, значит, первая, значит,
[29:50.240 --> 29:55.160]  идея, что с одной стороны, что мы никогда не тратим монет больше, чем получаем, а во-вторых,
[29:55.160 --> 30:00.520]  оказывается, что мы не так много монеток и получаем, а именно, мы получаем одну монетку
[30:00.520 --> 30:08.120]  на один добавленный элемент. То есть, за n операции мы получим не более, чем n элементов. И тогда
[30:08.120 --> 30:17.040]  из этого следует, что суммарные n операции делаются за o от n. То есть, в принципе, на самом деле,
[30:17.040 --> 30:26.080]  бывает достаточно помыслить это так. А можно поводить и четкие такие учетные времена,
[30:26.080 --> 30:33.120]  но так, чтобы было совсем красиво. В данном случае, смотрите, то есть, в данном случае мы
[30:33.120 --> 30:50.080]  будем писать так. Значит, t и t с режиссером равно t и t без режиссера плюс, ладно, не будем заморачиваться,
[30:50.080 --> 31:05.520]  плюс p и t, минус q и t. Что это такое? Нет, это не потенциал, потому что метод потенциалов это
[31:05.520 --> 31:16.000]  другой метод. Ну, потому что это не совсем оно, потому что, в принципе, это может так оно и будет,
[31:17.000 --> 31:22.000]  потенциал это немножко другое. В этой технологии потенциал это, сколько у тебя сейчас денег в
[31:22.000 --> 31:30.840]  кошельке лежит всего. А это не то немножко, потому что здесь я пишу, что p и t это сколько получили,
[31:30.840 --> 31:41.360]  именно прямо сейчас. Сколько нам выдали, да. То есть, сколько нам в черный ящик монеток поступило.
[31:41.360 --> 32:03.800]  И минус q и t это сколько потратили. Что ж там? Почему нет, наоборот. Нет, в этом смысле,
[32:03.800 --> 32:07.600]  что мы когда тратим монетку, мы как бы не считаем действия. Вот ровно поэтому здесь
[32:07.600 --> 32:20.360]  минус сик. Это важно. Вот. Ну вот, то есть, здесь тогда, но тогда обратите внимание, то есть,
[32:20.360 --> 32:25.520]  если у нас поддинот, тогда вот зачем нам нужно вот тогда, что к чему нас приводит вот это
[32:25.520 --> 32:32.000]  требование, что мы не тратим монеток больше, чем получаем. То есть, в принципе, тогда отсюда следует,
[32:32.000 --> 32:41.800]  что действительно там действительно сумма этих t житых с режиссером у нас равна чему. То есть,
[32:41.800 --> 32:52.160]  она равна сумме, значит, вот так вот t и t, там t житых, плюс сумма p житых, минус сумма q житых.
[32:52.160 --> 33:01.200]  Вот. Получается так. И что мы тогда имеем? Ну вот, но есть, но в принципе, что означает,
[33:01.200 --> 33:06.040]  что мы никогда не тратим больше, чем получили. Это означает, что на каждом шаге, на этот раз,
[33:06.040 --> 33:11.880]  на каждом шаге, обратите внимание, у нас тогда вот это вот больше либо равно вот этого. То есть,
[33:11.880 --> 33:22.520]  отсюда получается, что это больше либо равно сумме, чем g равно 1 и t житых. Вот. То есть,
[33:22.520 --> 33:29.360]  вот получается на этот раз вот так, даже вот сильное условие выполнилось. Вот. То есть,
[33:29.760 --> 33:34.880]  вот такой способ оценки. Или на самом деле, в данном случае речь идет даже не столько об оценке,
[33:34.880 --> 33:41.440]  сколько о перераспределении. То есть, по большому счету, да. То есть, это что означает? То есть,
[33:41.440 --> 33:46.200]  вот давайте внимательно посмотрим, за что получается выигрыш. То есть, вот, например,
[33:46.200 --> 33:59.280]  у нас вот операция push в реальности работает за единицу времени. Ну,
[33:59.280 --> 34:11.880]  вот. А pop у нас работает за 1 плюс. Чего? Ну, не совсем. Ладно. Правильнее. Ладно,
[34:11.880 --> 34:19.880]  давайте, чтобы не путаться, писать так. Обычный pop работает так, а pop с перетаскиванием,
[34:19.880 --> 34:31.480]  он работает за время. Ну, давайте, скажем, 1 плюс там 1 плюс к. Ладно,
[34:31.480 --> 34:39.680]  просто букву напишем. Хотя да, k это размер ина, да. Вот. То есть, в реальности это происходит так.
[34:39.680 --> 34:48.720]  А теперь давайте посмотрим, значит, каково у нас вот это вот учетное время.
[34:48.720 --> 34:57.920]  Ну, давайте посмотрим. Тогда каждый push добавляет нам одну монетку. Тогда у нас
[34:57.920 --> 35:06.000]  получается учетное время работы два. Да. Ну, это работает. Нет. Ну, не идеально. Ну, там,
[35:06.000 --> 35:11.720]  понятно. В данном случае стараемся поточнее писать. То есть, это просто важно. Понятно,
[35:11.720 --> 35:16.080]  что это единица, конечно, но вот. Но, как бы, чтобы понимать, откуда у нас что. Значит,
[35:16.080 --> 35:21.480]  получается поп. Значит, поп за что работает. Но он, на самом деле, просто достает монетки,
[35:21.480 --> 35:27.040]  не меняет монетки, он не трогает никак. Значит, поп с перекладыванием. Вот это последнее выкладывание
[35:27.040 --> 35:34.680]  действительно один. Но, в общем-то, и все. Потому что вот эти, значит, мы новых монеток не получаем,
[35:34.680 --> 35:41.720]  но, наоборот, ка монеток тратим. Поэтому остается вот этот вот один. То есть, видите, да. То есть,
[35:42.680 --> 35:46.560]  действительно важный момент, что действительно оказалось, что вот учетное время работы здесь
[35:46.560 --> 35:53.480]  вот у Пуша больше. И это, в принципе, нормально. Потому что, да, может, как бы, эта магия, на самом
[35:53.480 --> 36:00.440]  деле, не создает никаких новых действий и, наоборот, не уничтожает ничего. То есть, она их,
[36:00.440 --> 36:06.640]  на самом деле, перекладывает. То есть, по большому счету, этой махинации с деньгами мы сделали очень
[36:06.640 --> 36:11.520]  простую вещь. То есть, мы, на самом деле, вот эти вот ка действия, которые мы сделали,
[36:11.520 --> 36:19.000]  они никуда не делись. Мы их просто разложили, на самом деле, по ка Пушам, по большому счету. Вот,
[36:19.000 --> 36:25.640]  видите, да. То есть, получается, в принципе, это может быть скрыто, потому что, если я напишу
[36:25.640 --> 36:31.400]  асимпатически, получится, что реальное время работы от единицы, учетное время от единицы. И,
[36:31.400 --> 36:39.800]  потом, вот единицы, вот единицы. Попс с перекладыванием от 1 плюс ка и тут от единицы. Да, я тут пишу 1
[36:39.800 --> 36:46.080]  плюс ка, пускай может быть нулем, а от нуля это так себе. Вот. И, как бы, может показаться, что я
[36:46.080 --> 36:52.000]  просто каким-то там что-то помахал руками и что-то исчезло. То есть, куда оно исчезло? На самом деле,
[36:52.000 --> 36:59.200]  просто вот эта, то есть, вот эта ошка, она просто более жирная. Да, я ее даже вот так вот нарисовать
[36:59.200 --> 37:11.080]  могу. Да, вот жирная такая. Вот жирная ошка. Вот. Вот. То есть, на самом деле, это вот один,
[37:11.080 --> 37:19.560]  ну вот, это такой, может быть, самый удобный метод с точки зрения думания. То есть, потому что вот
[37:19.560 --> 37:25.280]  очень удобно думать. Видно, так, давайте тут кладем там что-то, какие-нибудь монетки. Может,
[37:25.280 --> 37:29.080]  иногда там начинаются какие-нибудь махинации в духе, даже что мы монетки иногда не тратим,
[37:29.080 --> 37:40.080]  а начинаем их куда-нибудь перекладывать даже. Вот. Вот. Соответственно. Все уже сложно пошло, да?
[37:40.080 --> 37:54.960]  Вот. Вот. То есть, вот тут такая радость получается от единичной радости. Вот. Ну,
[37:54.960 --> 37:57.760]  то есть, вот это всякое такое. То есть, вот мы действительно в основном, может быть,
[37:57.760 --> 38:06.480]  этими монетками начнем пользоваться. Вот. Но есть и третий метод. Третий метод. Он у нас,
[38:06.480 --> 38:13.680]  то есть, это метод, его чаще можно найти в каких-нибудь статьях, потому что он может быть,
[38:13.680 --> 38:21.440]  как бы, наиболее красиво помогает формализировать анализ. Вот именно, чтобы красиво, формально это
[38:21.440 --> 38:25.280]  все записать. Потому что, в принципе, можно как бы на монетках там, скажем, в какой-нибудь там
[38:25.280 --> 38:36.320]  мягкой куче, например, действительно, все там тоже на монетках. Ну,
[38:36.320 --> 38:41.960]  вот. Нет. Вопрос способа мышления. Да. То есть, идейно-математически суть может одна и та же,
[38:41.960 --> 38:48.560]  но как бы просто, как удобно мыслить, просто как удобнее мыслить. Вот сейчас давайте я тогда
[38:48.560 --> 38:57.200]  веду этот третий метод. Смотрите. То есть, как бы, суть сейчас будет очень похожая, но как вы будете,
[38:57.640 --> 39:15.520]  значит, смотрите. Значит, у нас было вот такое. Значит, третий метод у нас называется метод потенциалов.
[39:15.520 --> 39:25.600]  Вот. Вот.
[39:25.600 --> 39:48.200]  Значит, что это такое? Значит, мы здесь начинаем мыслить в следующих терминах. То есть, мы начинаем
[39:48.200 --> 39:56.560]  мыслить в терминах, что у нас между какими-то, между операциями есть состояние. То есть, какое-то
[39:56.560 --> 40:06.280]  состояние системы. И это состояние будет характеризоваться мистическим числом фи. Но
[40:06.280 --> 40:19.640]  обратите внимание, мы начинаем их там нумеровать с нуля. Там фи 4, там фи 5. Там и тут вот фи. Это
[40:19.640 --> 40:35.080]  значит фи это число, которое мы будем называть потенциал. Вот. Спасибо. То есть, это вот потенциалы.
[40:35.080 --> 40:47.240]  Вот. Значит, мы будем говорить следующее. Вот. То есть, это может быть вот такой потенциал,
[40:47.240 --> 40:52.360]  может быть какая-то энергия накапливающаяся. Значит, формально пишется так. Требования к
[40:52.360 --> 41:02.160]  потенциалу такие. Требуется, чтобы, во-первых, значит, требования, значит, все фи больше
[41:02.160 --> 41:15.720]  либо равно нуля, для любого и. А вот нам так удобно мыслить. И второй смысл, что фи нулевое,
[41:15.720 --> 41:31.160]  оно должно быть равно нулю. Вот. То есть, вот такие требования. То есть, чтобы хочется вводить
[41:31.160 --> 41:41.200]  потенциалы так, чтобы они были вот такие. И тогда, в этом случае, мы начинаем говорить. Мы начинаем
[41:41.200 --> 41:57.240]  говорить, что у нас TGT. Такие так. TIT с режиссером равно TIT без режиссера плюс потенциал в конце,
[41:57.560 --> 42:15.640]  минус потенциал в начале. Вот. Потенциал в конце, минус потенциал в начале. Вот. И так. Значит,
[42:15.640 --> 42:25.840]  что же это такое получается? Вот. Ну, давайте посмотрим, действительно, насколько у нас тут
[42:25.840 --> 42:33.720]  действительно там выполнены какие-то из этих условий. Вот. Ну, давайте вот проверим сильные
[42:33.720 --> 42:43.920]  условия. Ну, тогда сильные условия. Получается следующее. Что сумма, значит, всех TG с крышечкой,
[42:43.920 --> 42:51.480]  G равно от 1 до I. Она равна чему? Я даже вот сейчас сумму писать не буду, даже так проще будет.
[42:51.480 --> 43:08.040]  Смотрите. T1 плюс phi1 минус phi0. Плюс. Значит, T2 плюс phi2 минус phi1. Плюс T3 плюс phi3 минус phi2.
[43:08.040 --> 43:20.920]  Плюс и так далее. Плюс. Значит, T там и T получается. Плюс phi и T. Минус phi и минус 1. Вот.
[43:20.920 --> 43:32.240]  Ну, здесь снова появляется наш любимый классик, который говорит нам шлёп-шлёп. Шлёп-шлёп. Шлёп-шлёп.
[43:32.240 --> 43:44.680]  Ну, и в конце там вот такой шлёп-шлёп. Вот. Вот такая вот интересная идея. И это получается равно
[43:44.680 --> 43:56.640]  T1 плюс T2 плюс и так далее. Плюс Ti. Плюс phi и минус phi0. То есть получается, видите, та же самая
[43:56.640 --> 44:06.400]  суба на самом деле. Только плюс потенциал в конце, минус потенциал в начале. Вот. Ну, в принципе заметим,
[44:06.400 --> 44:12.680]  что для сильного, ну вот. То есть для сильного условия на самом деле достаточно было бы,
[44:12.680 --> 44:21.320]  просто что phi0 на самом деле минимальный среди всех потенциалов. Да, но да, потому что в принципе
[44:21.920 --> 44:27.200]  в принципе, как и физики, в общем-то само значение потенциала нам важно не особо,
[44:27.200 --> 44:37.160]  но нам на самом деле важна разность потенциалов. Вот. Да. Вот. Получается так.
[44:37.160 --> 44:44.800]  А количество монет разве не является? Но на самом деле да. При правильном проведённом
[44:44.800 --> 44:49.480]  методе бухгалтерского учёта количество монет у вас в кошельке суммарной является таким потенциалом.
[44:49.480 --> 44:56.160]  Ну вот. Ну, обычно просто в таких терминах не очень удобно думать. То есть в данном случае
[44:56.160 --> 45:00.320]  на самом деле просто вообще можно забыть о всяких монетках. Нет никаких монеток.
[45:00.320 --> 45:13.240]  Просто вот всё. Никак. Нет никаких монеток. Никаких монеток нет. А вместо этого мы говорим,
[45:13.240 --> 45:22.440]  что вот в нашем конкретном случае в очереди мы объявляем, что потенциал равен размеру стека
[45:22.440 --> 45:33.640]  in в момент времени и. Вот так я напишу. Это у нас вот такой потенциал. Аж хочется упрямить
[45:33.640 --> 45:40.480]  слово сочетание какой-то потенциальная энергия. Ну нет, смысл тот же на самом деле. То есть как бы
[45:40.760 --> 45:47.320]  то есть мы как бы иногда накапливаем какую-то энергию на будущее. А потом, чтобы потом в нужный
[45:47.320 --> 46:04.360]  момент стрельнуть. То есть. Ну вот. Ну вот. Вот. И так значит тогда давайте посмотрим как-то
[46:04.360 --> 46:15.680]  значит получится ли при таком потенциале выжить. Ну давайте смотреть. Так. Значит давайте смотреть.
[46:15.680 --> 46:31.760]  Получается примерно следующее. Значит учётное время. Значит учётное время. Значит пуш. То что
[46:31.760 --> 46:42.480]  получается? Получается один, но плюс. Плюс что? Плюс потенциал в конце, минус потенциал в начале.
[46:42.480 --> 46:52.720]  То есть какое-то если изначально было если в стеке было к элементов, то тогда в конце будет
[46:52.720 --> 47:06.800]  их ка плюс один и тут минус ка. И получается это равно два. Нет. Один. Потому что в потенциал,
[47:06.800 --> 47:12.080]  потому что то что мы достаём элементы стека аут никак не влияет на размер стека и. Поэтому
[47:12.080 --> 47:26.760]  тут получается один плюс ка минус ка и это равно все еще один. Ну в принципе да. Но это нормально.
[47:26.760 --> 47:33.880]  Сейчас вот давайте это допишу я вам даже больше скажу там господи там вы знали что там это
[47:33.880 --> 47:44.200]  доставание элементов из двоичной кучи работает за ноль. Вот ровно по этой причине. Вот. Значит попс
[47:44.200 --> 47:52.760]  перетаскивание. Значит у нас что тогда получается? Значит работает это за один плюс ка. Но. Значит
[47:52.760 --> 47:59.080]  плюс потенциал в конце будет ноль. А потенциал в начале был ка. То есть опять пошлёп-шлёпали
[47:59.080 --> 48:11.560]  получается единиц. Вот. Ну да. Тут видите. Очень удобно. Вот. Вот получается что мы так немножко.
[48:11.560 --> 48:18.520]  То есть там получили там обнаружили возможность немножко поразмазывать операции и получил так.
[48:18.520 --> 48:43.400]  Ну так то в принципе да. Ну да. Ну к сожалению да. Бывает. Я помню одна группа как-то там это
[48:43.400 --> 48:54.760]  после. После очередного задания по линалу там просто вывел свое. Самый популярный метод
[48:54.760 --> 49:01.840]  решения задачи тюрьмы групп. Заметим что. Вот не знаю. Ну не леда. Вот как-то да. То есть к
[49:01.840 --> 49:10.600]  сожалению для этого приходится иногда отправлять интуицию в полет. Соответственно да. Но увы. Увы. Вот.
[49:10.600 --> 49:18.120]  Но. Но тем не менее. То есть да. То есть конечно это правильно. То есть что конечно да. Это
[49:18.120 --> 49:25.720]  конечно инструменты. Инструменты с которыми можно работать. Но конечно идею они не подменят. Да.
[49:25.720 --> 49:34.960]  Тут ничего не поделаешь. Да. То есть это вот всего лишь терминологи. Вот. Но тем не менее значит
[49:34.960 --> 49:38.560]  соответственно. Вот. То есть основные такие три. По крайней мере стандартных технологий. Но в
[49:38.560 --> 49:42.880]  каждой из этих терминов можно мыслить. Потому что можно действительно подгонять потенциал каким-то
[49:42.880 --> 49:48.040]  образом. Чтобы вот он сходился. Ну вот. Ну вот. Чаще. Вот. То есть можно там иногда посмотреть на
[49:48.040 --> 49:51.720]  некоторые структуры. Просто сказать что там как бы в среднем все адекватно. Потому что вон там
[49:51.800 --> 49:56.520]  адекватные элементы перекидываются. Но можно там чаще всего. Конечно бывает что лучше давайте
[49:56.520 --> 50:03.040]  там класть куда-то монетки. С этими монетками работать. Ну на мой вкус это чаще всего там
[50:03.040 --> 50:07.960]  оказывается удобно именно мыслить. То есть давайте так. Давайте чтоб это оплатить. Вот
[50:07.960 --> 50:13.840]  так своего получается монетки. Так тут логарифм-монеток кладём в принципе. Да можно
[50:13.840 --> 50:20.200]  логарифм-монеток. Клазь в принципе. И в общем-то мы будем этим заниматься на самом деле. Вот.
[50:20.200 --> 50:27.200]  Вот, значит, соответственно. Вот, то есть это вот у нас такие три метода на простом примере.
[50:27.200 --> 50:40.200]  Так, есть ли тут какие-то вопросы? Нету. Так, ну хорошо, тогда мы повысим планочку.
[50:41.200 --> 50:49.200]  Тогда сейчас, ладно, раз уж мы тут написали очередь, а теперь мы изобретем вектор.
[50:49.200 --> 50:54.200]  Ну, не этот, который есть стрелочка в геометрии, конечно.
[50:54.200 --> 51:02.200]  А, конечно, имеется в виду структура данных вектов. Вот давайте думать, а что такое вектор вообще?
[51:03.200 --> 51:12.200]  Да, а вот возникает вопрос. Что мы обычно, обычно хотим от вектора?
[51:24.200 --> 51:29.200]  Ну, тут разные вещи, на самом деле, от него можно хотеть.
[51:29.200 --> 51:37.200]  Вот. Более того, сейчас я сразу предупрежу. Да, тут такой парадокс, что мы сейчас захотим от него даже больше, чем от него реально требуют вы стоили.
[51:37.200 --> 51:39.200]  И это, кстати, большая подлянка.
[51:48.200 --> 51:56.200]  Да, нет, он там, скажем, ну я не знаю. Кстати, интересно, есть ли там требования по непереводным кусок памяти?
[52:00.200 --> 52:04.200]  Нет, это, конечно, да.
[52:09.200 --> 52:17.200]  Да, прям, в смысле, прям такое есть или? Нет, иметь в стандарте C++ такое прописано?
[52:17.200 --> 52:33.200]  Ну, в принципе, ладно, наша реализация этому будет удовлетворять, потому что хранить их не подряд смысла, на самом деле, нет.
[52:33.200 --> 52:38.200]  Нет, есть там, типа, чтобы корень из N дополнительной памяти был, а не N?
[52:38.200 --> 52:46.200]  Ну, это уже, там, следующий вопрос. Ладно, сейчас это, как бы, мы сегодня пока все-таки еще попроще, попроще говорить, да.
[52:46.200 --> 52:55.200]  Ну, там это корень из N дополнительной памяти, а типа, а типа, создавать только блок?
[53:00.200 --> 53:03.200]  И прямо ее от единицы прям сходится?
[53:05.200 --> 53:12.200]  А, ну в принципе, а, ну можно, ладно. Да, наверное, можно, да, хорошо, да, можно об этом думать, действительно.
[53:12.200 --> 53:17.200]  Ну, значит, предлагается тут у нас следующее. Значит, какая технология? Значит, что нам хочется от вектора?
[53:18.200 --> 53:24.200]  Значит, от вектора нам хочется, во-первых, операция, в первую очередь, видимо, pushback.
[53:25.200 --> 53:31.200]  То есть, да, чем он отличается от обычного массива? Да, он отличается тем, что мы умеем пихать элементы в конец.
[53:32.200 --> 53:36.200]  А еще умеем доставать элементы из конца.
[53:36.200 --> 53:50.200]  И еще мы. Вот так напишем. В общем, какую-то адресацию.
[53:51.200 --> 54:01.200]  Ну да, как вы вскоре узнаете, собственно, на парах. То есть, у вектора, на самом деле, вот к этому элементу можно обратиться с помощью квадратных скобочек.
[54:01.200 --> 54:07.200]  А можно обратиться с помощью метода add. То есть, мы можем писать этот вектор .add и в скобочках и.
[54:08.200 --> 54:13.200]  Это практически то же самое, но там разница только в том, что это безопасно, а это нет.
[54:14.200 --> 54:21.200]  То есть, тут он прям в явном виде будет проверять и вообще попало там в размер от нуля до сайза, там минус один или нет.
[54:21.200 --> 54:31.200]  Ну вот, и если не попало, то возопит. Вот. Ну да, как называется? Возопит будет выбрасываться там, ну и.
[54:32.200 --> 54:41.200]  Ну terminate, короче. Нет, ну не обязательно. Нет, ну panic это называется там, ладно. Научно это называется кинет исключения.
[54:41.200 --> 54:59.200]  Ну это, но там конкретные детали на эту тему действительно мы оставим вам на C++, там они будут там очень в серьезных подробностях.
[55:00.200 --> 55:05.200]  Ну вот мы сейчас изучим математическую суть. Значит, нам хочется реализовать такую структуру данных.
[55:05.200 --> 55:12.200]  Нам очень хочется, чтобы все это делалось за, ну в идеале вот считается, что вектор работает за от единиц.
[55:15.200 --> 55:20.200]  Но спрашивается, как это можно было бы сделать, чтобы это работало за от единиц?
[55:21.200 --> 55:27.200]  На самом деле сделать, конечно, ну какой-нибудь там относительно там начинающих репиагих точно скажут.
[55:28.200 --> 55:33.200]  Ну и что, так давайте создадим там просто сразу массив там на там, там сколько вы операции хотите в задаче делать?
[55:33.200 --> 55:40.200]  Миллион. Ну давайте создадим массив на миллион и в общем-то все. В общем-то даже там вот тебе pushback, вот тебе popback.
[55:42.200 --> 55:54.200]  Вот. Но мы, наверное, хотим конечно структуру посильнее, потому что нам часто, потому что если бы нам, у нас был бы один массив вообще в жизни, то да, вектор создавать может быть даже не выгодно.
[55:54.200 --> 56:00.200]  Вот может быть. Поэтому она нам хочется таких массивчиков создавать несколько.
[56:01.200 --> 56:06.200]  Но если мы хотим создать несколько таких массивчиков, то у нас есть какие-то требования.
[56:07.200 --> 56:12.200]  Требования у нас потому что есть не только по времени, но и по памяти.
[56:13.200 --> 56:17.200]  Потому что нам бы очень хотелось, чтобы это жрало не очень много памяти.
[56:18.200 --> 56:31.200]  Потому что если мы на каждый вектор будем класть сразу по миллионам, там выделять память на миллион элементов под каждый из векторов, а векторов у нас будет тоже миллион, то там, называется, мы погорим достаточно быстро.
[56:33.200 --> 56:44.200]  Поэтому мы себе потребуем, то есть я сейчас веду такое требование, то есть в каждый момент времени у вас должно быть памяти.
[56:47.200 --> 56:53.200]  О от текущего размера вектора.
[56:54.200 --> 57:00.200]  Ладно, просто О от СЗ, я так не пишу. Да, не модуль СЗ, конечно, СЗ.
[57:01.200 --> 57:05.200]  А, ну в данном случае можно просто О от САЙС написать, что я тут СЗ пишу.
[57:05.200 --> 57:09.200]  А если мы докинули кучу всего, а потом выкинули кучу всего памяти.
[57:10.200 --> 57:13.200]  Вот, а мы захотим, чтобы шринкнулось. Да, вот абсолютно правильно.
[57:14.200 --> 57:22.200]  Вектор есть такая проблема, что если вы сделаете миллион пушбеков в том там миллион попбеков, то, к сожалению, память у него будет все еще выделена на миллион.
[57:25.200 --> 57:26.200]  Все они уже научились?
[57:27.200 --> 57:37.200]  Вот, я не знаю, в какой-то момент, на момент несколькой летней лекции давности, просто провели эксперимент и измеряли капасти вектора.
[57:38.200 --> 57:40.200]  Ну сейчас скажу, что это такое.
[57:41.200 --> 57:46.200]  И выяснилось, что он все плюс-плюс увеличивается, но не уменьшается.
[57:47.200 --> 57:48.200]  И это подло.
[57:49.200 --> 57:50.200]  Вот.
[57:51.200 --> 57:55.200]  Поэтому оказывается, что мы сейчас, конечно, себе возьмем больше.
[57:56.200 --> 58:00.200]  Но давайте сразу так перейдем к этому. Как же мы вообще действительно вектор строить будем?
[58:01.200 --> 58:04.200]  Да, тут мы уже начинаем ругаться какими-нибудь словами, кто-то, возможно, их не знает.
[58:05.200 --> 58:09.200]  Ну, собственно, и не должен знать, потому что, по идее, как раз вот я сейчас должен сказать, что это такое.
[58:10.200 --> 58:11.200]  Ну, как вообще реализовывать вектор?
[58:12.200 --> 58:24.200]  Ну, естественно, идея такая, что, да, но первая идея, конечно, говорит о том, что просто реализовать это так, чтобы все это было за вот единицы, это, ну, ладно, скажу аккуратно, науке неизвестно как.
[58:26.200 --> 58:31.200]  Если мы имеем в виду, если имеем в виду честно, то есть, куда прям доказать? Доказательно невозможно.
[58:33.200 --> 58:39.200]  Ну, скажем так, значит, не сильно много инструментария доказывает, что что-то невозможно.
[58:42.200 --> 58:47.200]  Да, ну, скажем так, если пришлешь точную ссылочку, буду очень благодарен.
[58:56.200 --> 59:02.200]  Ну, скажем так, если есть прям доказательства этого, то доказательства и пришлешь ссылочку, буду благодарен. Да, это очень интересно.
[59:03.200 --> 59:04.200]  Вот так скажем.
[59:06.200 --> 59:08.200]  Значит, ну вот, ну так как же нам реализовывать?
[59:09.200 --> 59:17.200]  Ну, во-первых, конечно, первая идея заключается в том, такая идея номер ноль, что естественно мы говорим о амортизированной стоимости, то есть учетной стоимости.
[59:20.200 --> 59:24.200]  Тогда какие возможности это нам дает?
[59:25.200 --> 59:29.200]  Значит, это дает нам возможность следующий такой.
[59:30.200 --> 59:33.200]  Ну, во-первых, вот это от size нам дает возможность говорить так.
[59:34.200 --> 59:40.200]  Мы храним вектор в каком-то выделенном в памяти массиве. Это реальный абсолютно сишный массив.
[59:41.200 --> 59:43.200]  Это выделенный через new.
[59:46.200 --> 59:50.200]  Ух ты, молодцы, молодцы, да.
[59:51.200 --> 59:55.200]  Ой, нет, ну это нормально, я сейчас плюс-плюс на продвинутом уровне никогда не изучал.
[01:00:02.200 --> 01:00:03.200]  Ладно, хорошо.
[01:00:04.200 --> 01:00:06.200]  Нет, ну с другой стороны, что делать? Ну хорошо там, хорошо там.
[01:00:07.200 --> 01:00:11.200]  Хотя ладно, ладно, в реальном векте, кстати, вполне вероятно, что они там молок какой-нибудь забабахают.
[01:00:12.200 --> 01:00:18.200]  Хотя нет, все-таки new. Хотя нет, new, потому что там будет стандартный аллокатор, стандартный аллокатор и все через new делается.
[01:00:18.200 --> 01:00:20.200]  Вот, да, вот.
[01:00:21.200 --> 01:00:30.200]  Ну да, то есть вы там, вы, конечно, там можете подсунуть свой, но это ладно, это уже там для, ну это, это будет на основном потоке там, продвинутом, все это будет.
[01:00:31.200 --> 01:00:36.200]  Так что если, так что это если, если, если кто этого не знает, не пугайтесь, все будет.
[01:00:37.200 --> 01:00:41.200]  Хотя с другой стороны, ну как, кто здесь из продвинутого потока по C++?
[01:00:42.200 --> 01:00:45.200]  Да ладно, по C++, не по алгоритмам.
[01:00:45.200 --> 01:00:49.200]  А, понятно, то есть, а, то есть прям корреляция прям такая большая, да.
[01:00:50.200 --> 01:00:52.200]  Ну окей, хорошо. Ладно.
[01:00:53.200 --> 01:00:59.200]  Ладно, ну в суть, в следующем. То есть мы заводим какой-то массив размера capacity.
[01:01:01.200 --> 01:01:05.200]  Ну capacity, да. Ну понятно, capacity, yeah, capacity, yeah.
[01:01:06.200 --> 01:01:10.200]  Вот. Ну по-русски это называется емкость.
[01:01:10.200 --> 01:01:11.200]  Емкость.
[01:01:12.200 --> 01:01:15.200]  Хотя, конечно, часто по-русски называют это capacity.
[01:01:16.200 --> 01:01:17.200]  Вот.
[01:01:18.200 --> 01:01:19.200]  Вот. Ну, что делать.
[01:01:20.200 --> 01:01:21.200]  Да, capacity.
[01:01:22.200 --> 01:01:28.200]  Значит, идея в следующем. То есть, то есть как бы это мы выделили, да, массив естественно называется буфер.
[01:01:32.200 --> 01:01:37.200]  Значит, в начале этого массива хранятся собственно элементы.
[01:01:38.200 --> 01:01:40.200]  И мы еще храним size.
[01:01:43.200 --> 01:01:46.200]  Вот. Ну у нас как бы есть запас.
[01:01:49.200 --> 01:01:53.200]  То есть, в принципе, вот мы в принципе аккуратненько, честно делаем.
[01:01:54.200 --> 01:01:58.200]  То есть, если нам пришел pushback, то мы просто докидываем еще элементы, и как бы size увеличивается на 1.
[01:01:59.200 --> 01:02:06.200]  Если мы захотим сделать pop, мы как бы просто size уменьшаем на 1, по большому счету самым элементом мы ничего не делаем.
[01:02:08.200 --> 01:02:11.200]  То есть, вот до некоторого момента этого нам хватает.
[01:02:12.200 --> 01:02:18.200]  То есть, в общем-то и все. То есть, на самом деле как-то не парадоксально, что вектор занимает всего 12 байт памяти.
[01:02:19.200 --> 01:02:25.200]  Если вы это не верите, вы просто возьмите C++ вектор, вызовите у него size от него. Получите 12.
[01:02:26.200 --> 01:02:30.200]  Ну потому что там в структуре данных всего 3 элемента.
[01:02:31.200 --> 01:02:32.200]  Очень просто.
[01:02:33.200 --> 01:02:38.200]  Значит, потому что в самом классе написано и там условно int, ну там не int.
[01:02:39.200 --> 01:02:41.200]  Ну хорошо, хорошо.
[01:02:42.200 --> 01:02:44.200]  Не указатель, это 8 байт.
[01:02:45.200 --> 01:02:48.200]  Ну хорошо 24, легче стало.
[01:02:49.200 --> 01:02:53.200]  Ну я не знаю, в каких-то версиях компилятора было 12. Мы тоже запускали.
[01:02:53.200 --> 01:02:58.200]  SizeTekCapacity и значит там T, звездочка, буфер.
[01:03:00.200 --> 01:03:01.200]  Все.
[01:03:02.200 --> 01:03:05.200]  То есть, в общем-то по большому счету класс вектор устроен вот так.
[01:03:07.200 --> 01:03:08.200]  Вот все.
[01:03:09.200 --> 01:03:13.200]  То есть, просто size как бы он не будет лазить по указателю и смотреть, что там.
[01:03:14.200 --> 01:03:17.200]  Потому что указатель, ну это, что такое указатель, это такая чиселка тоже.
[01:03:17.200 --> 01:03:21.200]  На самом деле, такая же как sizeTek, просто она обозначает конкретно там ячейку в памяти.
[01:03:22.200 --> 01:03:23.200]  Не более того.
[01:03:24.200 --> 01:03:25.200]  Вот.
[01:03:26.200 --> 01:03:27.200]  Да, вот такой неожиданный прикол.
[01:03:28.200 --> 01:03:35.200]  Вот, но фишка конечно кроется не в самих этих полях, а конечно в методах.
[01:03:36.200 --> 01:03:38.200]  Ой, а вы же на C++ узнали, что такое методы?
[01:03:39.200 --> 01:03:40.200]  Да.
[01:03:41.200 --> 01:03:42.200]  Да, когда вы, ух ты прям успели уже.
[01:03:43.200 --> 01:03:44.200]  Нет.
[01:03:44.200 --> 01:03:45.200]  Чего?
[01:03:50.200 --> 01:03:52.200]  Нет, нет, я говорю не про методы, я говорю по C++.
[01:03:53.200 --> 01:03:54.200]  Нет, ну нет, да-да-да, нет.
[01:03:55.200 --> 01:04:02.200]  На первом занятии по C++ вы должны были там видимо изучать собственно сами там как минимум репетические операции и там что-то еще, да.
[01:04:05.200 --> 01:04:06.200]  А Linux, да.
[01:04:07.200 --> 01:04:08.200]  Да.
[01:04:08.200 --> 01:04:09.200]  Да.
[01:04:12.200 --> 01:04:13.200]  А Linux.
[01:04:16.200 --> 01:04:17.200]  Понятно, ладно.
[01:04:18.200 --> 01:04:19.200]  Ну хорошо, ладно.
[01:04:20.200 --> 01:04:22.200]  Нет, ну ладно, это как бы все вы тоже там в ближайшее время изучите, собственно.
[01:04:23.200 --> 01:04:24.200]  Никуда от этого не деться.
[01:04:25.200 --> 01:04:26.200]  Вот.
[01:04:27.200 --> 01:04:28.200]  Ну это ладно.
[01:04:29.200 --> 01:04:30.200]  Ну интересно, да.
[01:04:31.200 --> 01:04:34.200]  Ну собственно в методах серее, чем в операциях, нам придется кое-что прописать.
[01:04:34.200 --> 01:04:44.200]  Потому что, да, то есть в принципе мы могли бы конечно так и жить, то есть эти pushback просто там двигаем size, popback двигаем size, квадратные скобочки автоматически реализуются, да.
[01:04:45.200 --> 01:04:50.200]  То есть пишем там, то есть к этому указателю применяем квадратные скобки и не паримся, да.
[01:04:51.200 --> 01:04:55.200]  Ну или можно к указателю прибавить нужное число элементов, в общем понятно.
[01:04:57.200 --> 01:05:01.200]  Вот, но есть две маленькие проблемы.
[01:05:01.200 --> 01:05:02.200]  Первая маленькая проблема.
[01:05:02.200 --> 01:05:04.200]  Че делать, если буфер кончился?
[01:05:06.200 --> 01:05:09.200]  То есть вы тут делали тут size, size, size, size, size, size, size.
[01:05:10.200 --> 01:05:13.200]  Пушбек, пушбек, пушбек, пушбек, пушбек, пушбек, пушбек, пушбек.
[01:05:15.200 --> 01:05:16.200]  Буфер аверфло.
[01:05:17.200 --> 01:05:21.200]  Да, когда выслышишь, когда size равно капать, что в этом случае делать?
[01:05:23.200 --> 01:05:24.200]  Нет, ну предлагается.
[01:05:27.200 --> 01:05:28.200]  Вility.
[01:05:28.200 --> 01:05:47.000]  что сразу плохого господи мы уже да но да да ой господи да заклинание значит
[01:05:47.000 --> 01:05:52.840]  смотрите но идея такая есть у нас сайс равно кап значит если мы делаем в пушбеке сайс
[01:05:52.840 --> 01:06:03.160]  равно capacity то есть вот допустим так оказалось то тогда идея такая что мы просто удваиваем
[01:06:03.160 --> 01:06:18.080]  капость что значит удваиваем это означает шум и прям запрашиваем в памяти новый кусок в два
[01:06:19.080 --> 01:06:32.800]  раньше и прям тупо перекопируем туда все имеющиеся элементы а старый буфер уничтожаем прям вот
[01:06:32.800 --> 01:06:41.920]  уничтожаем вот то есть это как бы приводит с точки зрения как бы использование вектора это
[01:06:41.920 --> 01:06:47.080]  приводит к подлянке в подлянке что если вы там завели себе какой-нибудь указатель или ссылку
[01:06:47.080 --> 01:06:51.640]  на какой-то элемент вектора то помните что в любой момент это ссылка может инвалидироваться
[01:06:51.640 --> 01:06:57.760]  то есть поэтому да то есть это особенность которую надо помнить
[01:06:57.760 --> 01:07:18.360]  но пока ты ищешь я еще могу на самом деле писать у меня страшный прецедент на эту
[01:07:18.360 --> 01:07:25.760]  тему был вот знаете я как-то в петерзаводске писал у конина вот и значит там почему-то он
[01:07:25.760 --> 01:07:30.920]  получал хоть там runtime 35 или что-то в этом роде то есть пришлось там полдня если не день вообще
[01:07:30.920 --> 01:07:37.280]  убил на поиске оказано вот причем было но вот причем более того в процессе на тусы начали
[01:07:37.280 --> 01:07:44.760]  фантастическую вещь у меня там была какая-то строчка там значит вида вы и там условно там
[01:07:44.760 --> 01:07:59.040]  там но диете там там но диет ну условно там но диете равно там что там было но но и там какой
[01:07:59.040 --> 01:08:14.280]  какой-то там калк суфикс линкс или что там что-то в этом роде там от и вот так ну допустим вот но
[01:08:14.280 --> 01:08:18.680]  фишка но вот я обнаружу что вот это да вот в этом методе то есть на кроме теста получается у меня
[01:08:18.680 --> 01:08:25.560]  почему-то runtime но действительно я делаю что я делаю я делаю технически какой-то то есть я делаю
[01:08:25.560 --> 01:08:34.160]  какой-то там дебаг там ну как сделать дебаг но вот там но можно можно его сделать там по
[01:08:34.160 --> 01:08:41.760]  принципу там скажем вот можно вместо вот этого написать там скажем но диет этом равно там
[01:08:41.760 --> 01:08:49.280]  еще не будь там принта например ну там принт там ты точку что-нибудь там и так далее и там
[01:08:49.280 --> 01:08:57.200]  сказать там но диета равно ты но почему-то после этого значит выясняется если так же вот что
[01:08:57.200 --> 01:09:01.760]  подобно так вот написать то почему-то бак перестанет бак исчезает по камерам тайма не
[01:09:01.760 --> 01:09:09.600]  происходит а если написать да его действительно оказалась пишка следующая что как бы знаю да
[01:09:09.600 --> 01:09:14.760]  если выставки с алгоритмом укрена то помните что эта функция на самом деле то есть на самом
[01:09:14.760 --> 01:09:21.560]  деле добавляет новые вершины да ноде было вектором и оказывалось что видимо все плюс-плюс делал
[01:09:21.560 --> 01:09:27.600]  следующий он вычислял ссылку на этот элемент перед присваиванием да потом запускал эту функцию
[01:09:27.600 --> 01:09:35.880]  значит эта функция меняла ветра и это ссылка инвалидировалась согласен но материться все
[01:09:35.880 --> 01:09:44.360]  равно не надо хотя вот сутью согласен полностью вот да то есть вот оказалось такое то есть
[01:09:44.360 --> 01:09:49.560]  вот с вектором вот действительно есть такие подлянки действительно вот поэтому как бы надо
[01:09:49.560 --> 01:09:57.440]  просто это иметь в виду вот так она вот только что но ты одна из причин но вот ну в данном случае
[01:09:57.440 --> 01:10:02.520]  датам по бэков там не было поэтому вот но вот такой эффект вот ровно так все плюс-плюс работая там
[01:10:02.520 --> 01:10:07.640]  все плюс-плюс и вектор работает поэтому вот будьте аккуратны там то есть поэтому старайтесь
[01:10:07.640 --> 01:10:12.200]  лучше там не хранить указательный элемент вектора или ссылку но то есть понятно что если вы там
[01:10:12.200 --> 01:10:17.720]  вектор один раз создали он вам больше никогда не нужен то пожалуйста но когда на самом деле лучше
[01:10:17.720 --> 01:10:30.960]  стараться это делать не все-таки вот и так вот в принципе в общем-то на самом деле си плюс-плюс
[01:10:31.080 --> 01:10:34.640]  вектор примерно так и работает в общем-то и все то есть при пушбеке если там куча с
[01:10:34.640 --> 01:10:40.240]  копастью 2 копасти не пасть но дальше по бэк там двигаем влево там понятно квадрат на скобке все
[01:10:40.240 --> 01:10:48.320]  в порядке но возникает маленькая проблема но вот в принципе да можно давайте еще подумаем
[01:10:48.320 --> 01:11:01.800]  ну да ну да здесь мы будем по умолчанию считать что дарю что есть какой-то минимальный размер
[01:11:01.800 --> 01:11:08.720]  копасти нет но на практике все да все что угодно можно там на самом деле там разные варианты есть
[01:11:08.720 --> 01:11:14.200]  ну то есть понятно нет а практике наверное там выгоднее окажется не один элемент а все-таки
[01:11:14.200 --> 01:11:19.880]  там 2 4 или сколько-нибудь что в этом роде на самом деле иметь там по мелочи но понятно не сильно
[01:11:19.880 --> 01:11:25.680]  много конечно чтоб там можно было много векторов создать но понятно нет но в прочем есть разные
[01:11:25.680 --> 01:11:29.560]  варианты потому что есть вариант как бы на самом деле если 0 то реально ничего не храним потому
[01:11:29.560 --> 01:11:33.200]  что все равно все пушбеки по бэки в этом месте завод единицы будут делать как бы мы их не
[01:11:33.200 --> 01:11:45.640]  реализовывали так что математически ничего не изменится вот соответственно вот поэтому
[01:11:45.640 --> 01:11:49.840]  то есть это все на самом деле локальность вообще глобально давайте посмотрим а работает ли это все
[01:11:49.840 --> 01:11:59.040]  завод единицы вот в виде какой-то амортизации но давайте попробуем в этом убедиться всеми
[01:11:59.040 --> 01:12:06.360]  тремя способами покоя вы всеми тремя способами то есть у нас сейчас задали нам сейчас хочется
[01:12:06.360 --> 01:12:14.320]  отработать три способа вот давайте первый способ попробуем значит первый способ говорит нам о том
[01:12:14.320 --> 01:12:21.840]  что мы где нот то есть то есть первое что мы хотим как-то посмотреть на это все среднем то есть
[01:12:21.840 --> 01:12:29.160]  там в общем дай посмотреть сколько суммарной операции было выполнено вот но давайте представим
[01:12:29.160 --> 01:12:41.400]  себе что мы выполнили n операции и capacity у нас стало равно чему ну capacity стало равно c тогда
[01:12:41.400 --> 01:12:49.440]  давайте посмотрим заметим что все операции кроме вот это вот пересоздание буфера да кстати тут есть
[01:12:49.440 --> 01:12:59.840]  на самом деле умное слово реаллокация вот от английского я локation ну ну и между прочим
[01:12:59.840 --> 01:13:08.680]  не лишено между прочим сходство действительно я релак да но это вот тут все-таки пишется
[01:13:08.680 --> 01:13:20.280]  именно так уж там ри элокейшн нот ри элокейшн ри элокейшн да
[01:13:20.280 --> 01:13:32.560]  нет ну что такое имеет смысл
[01:13:32.560 --> 01:13:49.000]  нет нормальный стэкс ну я бы сказал что нормальный стэкс
[01:13:49.600 --> 01:13:56.080]  конечно но там датчик позже мы об этом поговорим кстати там как как реализовывать стэки на самом
[01:13:56.080 --> 01:14:02.160]  деле там там разные спецэффекты тоже могут быть вот ну да а то мало ли тем более нам
[01:14:02.160 --> 01:14:07.720]  персистентные стэки еще понадобится когда-нибудь о персистентный стэк с двуличными подъемами
[01:14:07.720 --> 01:14:15.800]  вот значит ладно значит смотрите давайте вы начать какие операции мы суммарно за вот есть у нас
[01:14:15.800 --> 01:14:21.640]  там было вот был у нас пустой вектор сделали мы с ним эн операции там pushback вот и там вот
[01:14:21.640 --> 01:14:29.920]  эти квадратных скобочек но заметим что все кроме реаллокации мы делаем за от да но теперь давайте
[01:14:29.920 --> 01:14:40.320]  думать за какое время мы делали локацию но последний шаг когда буфер стал реально ц мы сделали
[01:14:40.320 --> 01:14:50.680]  за время ц о ц правда перед этим он соответственно был ц пополам и созда и тогда получается
[01:14:50.680 --> 01:14:57.760]  реаллокацию в него мы тоже наверное делали за ц пополам перед этим было там цена 4 цена 8 и
[01:14:57.760 --> 01:15:06.960]  так далее это не превосходит 2 ц ну короче от ц но это равно отн почему потому что так как
[01:15:06.960 --> 01:15:13.720]  легко заметить у нас в каждый момент времени ну кроме там но то в каждый момент времени реальный
[01:15:13.720 --> 01:15:21.400]  сайта то есть обычно capacity не более чем в два раза больше сайза ну кроме может быть там вот этой
[01:15:21.400 --> 01:15:28.840]  ситуации когда сайс равно нулю вот то есть тогда получается что все реаллокации суммарно выполнены
[01:15:29.440 --> 01:15:35.800]  и но то все остальные операции делаются за единицу но вроде все хорошо вот понятно
[01:15:35.800 --> 01:15:47.640]  да понятно идем дальше вот но вот как но вот но что еще можно делать можно изобрести монетки
[01:15:47.640 --> 01:15:59.720]  спрашивается как нам изобрести монетки да когда как нам почувствует сколько настроения то
[01:15:59.720 --> 01:16:08.840]  вообще нормально спасибо вот так как-то она вот так как там как нам почувствует себя центробанком
[01:16:08.840 --> 01:16:15.560]  да вот но центра да ну ладно мы тут центробанка все они чувствуют что мы как бы деньги из воздуха
[01:16:15.560 --> 01:16:33.320]  не создаем хотя а вы думали в этом смысл нашего предмета да неожиданно вот ну ладно нет я бы
[01:16:33.320 --> 01:16:40.960]  сказал так да мы не задумываемся о том откуда деньги берутся на самом деле да ну нет ну как
[01:16:40.960 --> 01:16:44.480]  да мы считаем что да мы в черном ящике и говорим что давайте с каждым или в этом и
[01:16:44.480 --> 01:16:50.880]  что-нибудь говорим а говорим мы следующее значит медбукал церковь учета будет говорить так так
[01:16:50.880 --> 01:16:55.120]  пожалуйста если вы хотите по пушбэркать элемент дайте его нам пожалуйста вместе с монеткой
[01:16:55.120 --> 01:17:10.040]  о господи в черном ящике находится сергей собягин ухлос пудина и что сразу что да не
[01:17:10.040 --> 01:17:22.480]  но так ладно все это сейчас мы спаковать сейчас подумаем нет ну тут вопрос какая монетка
[01:17:22.840 --> 01:17:30.040]  валюту-то мы можем выбирать но в принципе смотрите давайте подумаем так тихо тихо тихо тихо
[01:17:30.040 --> 01:17:39.000]  но скажем так молок может работать за сколько угодно на самом деле но фишка в том что мы
[01:17:39.000 --> 01:17:48.600]  делаем не только молоко еще и перекопируем но в этом мы верим что все-таки он адекватен нет
[01:17:48.600 --> 01:17:56.680]  понятно что да вот видим ну да ну тогда он не работает нет вот там так я не знаю по-хорошему
[01:17:56.680 --> 01:18:03.080]  нет понятно даша скорее там он может решить алгоритм какой-нибудь работать да но вот но но
[01:18:03.080 --> 01:18:09.880]  я не знаю в этом месте конечно да верно оголок и мы верим что действительно выделить вылить
[01:18:09.880 --> 01:18:19.440]  массив за n можно за там отэн да ладно не скажи извини если мы внутри программы потребовали
[01:18:19.440 --> 01:18:29.880]  выделить новую память то это время нашей программы да так ну а таких деталей я уже
[01:18:29.880 --> 01:18:38.680]  не готов обсуждать ладно ладно значит смотрите в любом случае если n тогда вот идея такая давайте
[01:18:38.680 --> 01:18:46.560]  то есть давайте положим мы будем класть на каждый элемент монетку и тогда к тому моменту да
[01:18:46.560 --> 01:18:52.600]  иногда у нас бывает pushback но ничего страшного значит означает что там монетка куда-то исчезла
[01:18:52.600 --> 01:19:04.200]  вот нам несут и несут несут и несут и в результате когда у нас пришло время делать
[01:19:04.200 --> 01:19:12.920]  новое capacity у нас уже образовалась capacity пополам монетки то есть вот capacity пополам
[01:19:12.920 --> 01:19:18.640]  монетки да тут у нас как бы монеток не было вот и тогда идея что мы вот за эти capacity пополам
[01:19:18.640 --> 01:19:29.480]  монеток должны выполнить получается операцию превративую там удвоить capacity вот ну здесь можно
[01:19:29.480 --> 01:19:37.200]  подумать ну по разному да потому что но нет почему нет ну 6 непонятно почему виды 6 там вот 2 или 4
[01:19:37.200 --> 01:19:43.760]  можно думать но смотрите за capacity то есть у нас сейчас у нас capacity пополам монеток и ну вот а
[01:19:43.760 --> 01:19:52.320]  нужно получить массив размера 2 capacity поэтому с этой точки зрения и там можно по-разному думать
[01:19:52.320 --> 01:19:58.280]  то есть как бы слава богу валюту мы подгоняемся как бы вопрос то есть можно говорить о том скажем
[01:19:58.280 --> 01:20:04.320]  что там какую ценность мы придаем этой монетке то есть условно там это там рубль там допустим или
[01:20:04.320 --> 01:20:11.320]  там доллар или там евро вот то есть другой способ конечно поменять валюту это сказать что ну
[01:20:11.840 --> 01:20:16.040]  мы вместо одной монетке полут действительно давайте две монетки класть вот как нам предлагали
[01:20:16.040 --> 01:20:22.080]  или четыре монетки то есть ничего страшного то есть как бы главное то есть как бы каждая
[01:20:22.080 --> 01:20:27.720]  монетка она должна просто то есть она должна оплачивать фиксированное количество действий но
[01:20:27.720 --> 01:20:31.520]  это фиксированное количество может быть один может быть два может быть три может быть 53 так
[01:20:31.520 --> 01:20:38.120]  что но но это просто главное что это оно как бы не менялось бесконечное число рост процесс and
[01:20:38.120 --> 01:20:43.040]  она всегда фиксировалась вот то есть это как бы но это как бы в любом случае
[01:20:43.040 --> 01:20:49.160]  константа потому что по факту да то есть нас устраивает что у нас есть это от
[01:20:49.160 --> 01:20:54.840]  capacity монеток которые мы за которые мы делаем значит это от capacity операции
[01:20:54.840 --> 01:21:00.120]  как оно-то конкретная константа это уже на самом деле вторичный вопрос если не
[01:21:00.120 --> 01:21:06.800]  третичный вот то есть вот с монетками оказывается очень удобно то есть это вот
[01:21:06.800 --> 01:21:10.520]  то есть это символизирует но чем очень удобно все это то есть конечно важно
[01:21:10.520 --> 01:21:16.160]  прописать себе вариант а что после что важно что важно прописать что после
[01:21:16.160 --> 01:21:22.400]  реаллокации каждый раз у нас сайса то ровно половина capacity но но вот и никаких
[01:21:22.400 --> 01:21:27.000]  монеток у нас нет вот то есть мы этим пользуемся то есть мы знаем что до
[01:21:27.000 --> 01:21:31.120]  следующей реаллокации значит вот как минимум вот тут вот стоит вот столько
[01:21:31.120 --> 01:21:36.880]  операции будет вообще-то монетки так а теперь внимание вопрос теперь а как же
[01:21:36.880 --> 01:21:43.960]  нам это решить если мы хотим это сделать методов потенциал ну-ка давайте
[01:21:43.960 --> 01:21:48.160]  вопрос какой потенциал предложить
[01:21:50.560 --> 01:21:57.920]  ну на самом деле да тогда ну давайте попробуем сейчас ну так но разные
[01:21:57.920 --> 01:22:05.680]  варианты но давайте хорошо фи там фи и ты присвоить значит capacity это
[01:22:05.680 --> 01:22:10.840]  минус айс ну может быть умноженная на константу это мы так пока прописывать
[01:22:10.840 --> 01:22:20.560]  не будем но для но скажем так чтобы это подогнать мы себе
[01:22:20.560 --> 01:22:26.600]  мы себе скажем что если размер 0 то и capacity 0 а если сайс не 0 то capacity там
[01:22:26.600 --> 01:22:34.800]  соответственно то есть если сайс равно 1 то capacity равно 1 но вот ну а если сайс 0 то
[01:22:34.800 --> 01:22:43.280]  capacity 0 а во всех остальных случаях работаем вот по этой схеме вот так вот
[01:22:43.280 --> 01:22:48.720]  значит поехали давайте вот глобальный случай тогда и рассмотрим так что у нас
[01:22:48.720 --> 01:22:54.720]  тогда но что у нас тогда получается так ну давайте значит ну понятно значит
[01:22:54.720 --> 01:22:59.680]  квадратные скоба значит там давайте начнем с простого квадратные скобочки у
[01:22:59.680 --> 01:23:05.800]  нас реальное время то есть там реальное время 1 и учетное время 1 потому что
[01:23:05.800 --> 01:23:16.440]  потенциал не меняется так по бэк а вот здесь интересно потому что заметим что
[01:23:16.440 --> 01:23:24.120]  capacity не меняется а сайс уменьшается на 1 то есть получается смотрите 1 плюс
[01:23:24.920 --> 01:23:36.040]  то есть был то есть потенциал в конце равен c минус там сз плюс 1 вот а потенциал в начале
[01:23:36.040 --> 01:23:49.200]  в начале это с минус сз так ну что мы тут видим мы видим шлёп шлёп минус 1 хорошо вот тут шлёп
[01:23:49.200 --> 01:24:01.400]  шлёп и тут шлёп шлёп так и что получается это равно 2 так но отлично то есть видим
[01:24:01.400 --> 01:24:05.280]  видите то есть видимо по бэк нам действительно сохраняет еще лишнюю монетку это называется
[01:24:05.280 --> 01:24:11.800]  но на самом деле мы ее как бы игнорируем но как будто так ладно давайте смотреть с пушбеком
[01:24:11.800 --> 01:24:23.760]  там пушбек простой пушбек простой но здесь будет то же самое там 1 плюс ц минус значит
[01:24:23.760 --> 01:24:40.320]  на этот раз сз плюс 1 и тут минус ц минус сз это 0 нет учетная стоимость
[01:24:40.320 --> 01:24:58.240]  учетная стоимость получилось 0 вот вот то есть как бы получается до пушбек это то есть пушбек
[01:24:58.240 --> 01:25:10.240]  мы делаем бесплатно если он простой так что же будет если у нас будет пушбек прям классический
[01:25:10.240 --> 01:25:24.520]  с реаллокацией так но давайте смотреть что же у нас получится он будет работать за ночь
[01:25:24.520 --> 01:25:33.800]  реальное время работы у нас сколько ну допустим ц да вот ладно ц плюс 1
[01:25:33.800 --> 01:25:47.480]  значит пота значит потенциал в конце будет 2 ц минус сз плюс 1 потенциал в начале ц минус
[01:25:47.480 --> 01:26:04.280]  так так ну что шлеп шлеп у нас вроде где-то есть да вот ну шлеп шлеп где-то есть я даже
[01:26:04.280 --> 01:26:11.640]  не но я правда давайте для аккуратно я его даже не здесь сделаю а вот здесь так но сз
[01:26:11.640 --> 01:26:19.720]  у нас пошлепалась и получилось у нас осталось сколько у нас осталось 2 ц у нас осталось да у
[01:26:19.720 --> 01:26:39.440]  нас единички тоже пошлеп шлеплись так ну да видишь ну да казалось бы да действительно тут
[01:26:39.480 --> 01:26:45.160]  потенциал не работает и даже да если я тут скажу что он работает не ц плюс 1 времени 4 ц плюс
[01:26:45.160 --> 01:26:56.920]  один цер튜�й не поможет вот да да да там да да очень хотелось чтобы каждыйgardы
[01:26:56.920 --> 01:27:03.880]  пуш увеличивал потенциал действительно они уменьшал поэтому да действительно оказывается
[01:27:03.880 --> 01:27:10.840]  хорошо работает у нас действительно потенциал действительно 2 size минус capacity
[01:27:10.840 --> 01:27:27.160]  ну хорошо да
[01:27:27.160 --> 01:27:35.560]  я хочу сделать сейчас по меньше действий маркера
[01:27:35.560 --> 01:27:46.680]  ну как сказать
[01:27:46.680 --> 01:27:54.600]  нету на самом деле просто да такой потенциал на погребе но нету смотрите давайте думать
[01:27:54.600 --> 01:27:59.880]  но здесь тогда получится так ладно сейчас не буду прописывать но мы видим что потенциал при
[01:27:59.880 --> 01:28:08.600]  аккуратном при полбеке меняется на 1 правда поэтому если потенциал меняется на 1 в ту или
[01:28:08.600 --> 01:28:14.840]  иную сторону неважно да и где и реально в реальное время вот единицы тогда понятно и учетное время
[01:28:14.840 --> 01:28:21.880]  вот единицы не проблема да с пушбеком без релокации тоже то же самое изменение там вот от единицы
[01:28:21.880 --> 01:28:29.640]  реального действия там вот единицы изменения потенциал так а теперь вот это вот а тут вот
[01:28:29.640 --> 01:28:38.280]  это вот именно при реалокации но при реалокации получается следующее давайте вот здесь здесь тогда
[01:28:38.280 --> 01:28:48.520]  получается что 2 size минус то есть реальное время цеплю с 1 значит модуль получается значит
[01:28:48.520 --> 01:28:58.240]  значит потенциал в конце у нас получается какой то есть условно там 2 с плюс 2 минус 2 с
[01:28:58.240 --> 01:29:09.840]  ну заметим что с из-за привод пушбеке на самом деле при реалокации там бывший то есть бывший
[01:29:10.200 --> 01:29:18.960]  это одно и то же поэтому я тут для декатности цепишь и минус потенциал ну какой тут был потенциал
[01:29:18.960 --> 01:29:31.320]  ну да тут было 2 с минус ц значит тут получается шлёп шлёп тут получается шлёп шлёп и тут
[01:29:31.320 --> 01:29:38.400]  получается шлёп шлёп равно 3 давай
[01:29:38.400 --> 01:29:59.560]  сейчас ничего не понял к чему просто не понял то есть смотрите нас учетное время
[01:29:59.560 --> 01:30:21.200]  да 2 цена получил и чего ну нету какие-то выводы сделать можно но просто это как бы
[01:30:21.200 --> 01:30:27.360]  не идеальное использование метода просто то-то просто смотрите просто тут еще как бы то то есть
[01:30:27.920 --> 01:30:35.440]  когда мы с вами допустим разговариваем да при этом вот видя это все аккуратно то да мы
[01:30:35.440 --> 01:30:39.760]  там можем себе позволять полностью потому что мы друг друга поймем но в общем науке обычно там
[01:30:39.760 --> 01:30:45.640]  говорят вот да но структура данных которые делают у которой учетная стоимость вот такая да и понятно
[01:30:45.640 --> 01:30:49.920]  что-то там они там будут вам прочитать то есть это будет означать что там либо у них потенциал
[01:30:49.920 --> 01:30:55.280]  хороший либо у них с монетками все сойдется но вот но как бы обычно учетная стоимость будет тоже
[01:30:55.280 --> 01:31:00.560]  вот там все-таки будет фиксировано что-то все операции учетная стоимость имеет за от единиц
[01:31:00.560 --> 01:31:08.680]  вот так но в данном случае дает релокации видим что такой потенциал действительно релокацию уже
[01:31:08.680 --> 01:31:19.880]  вот единицы отправил ну потому что мы как бы за отце значит сделали релокацию и еще
[01:31:19.880 --> 01:31:26.160]  одну операцию потратили на собственно пушбек да нет можно было даже по-другому проанализировать
[01:31:26.160 --> 01:31:34.800]  можно было сказать что учетная стоимость релокации там например 0 вот тогда бы у нас вот этих
[01:31:34.800 --> 01:31:41.520]  троечек не было то есть у нас то то есть на самом деле можно ответить что там троечка в данном
[01:31:41.520 --> 01:31:47.520]  случае это учетная стоимость самого пушбека вот это ну в принципе это очень удобно когда
[01:31:47.520 --> 01:31:53.440]  оказывается что мы можем что мы когда делаем какую-то операцию она оказывается бесплатной вот
[01:31:53.440 --> 01:31:58.800]  это прям красиво вот мы будем много с таким сталкиваться вот в том числе и вот то есть
[01:31:58.800 --> 01:32:05.920]  просто начинает с той же кучи фибоначи на самом деле вот так что получается такая радость вот ну
[01:32:05.920 --> 01:32:11.680]  в принципе да вот вы стояли это работает так но мы заметим что требования у нас конечно к вектору
[01:32:11.680 --> 01:32:21.840]  сильно больше потому что вот это условие не выполняется потому что мы можем заметить что
[01:32:21.840 --> 01:32:27.640]  если мы сделали как вы уже начали говорили миллион пушбеков и потом сделали там хотя бы там
[01:32:27.640 --> 01:32:35.800]  есть это там почти миллион по бэков но там оставили где-нибудь там 5 элементов то там
[01:32:35.800 --> 01:32:45.080]  память будет остается порядка миллиона и это нас не устраивает поэтому нам придется усилить
[01:32:45.080 --> 01:32:53.120]  век но как-то сделать мы будем обсуждать после перерыва и так что же делать как же нам добиться
[01:32:53.120 --> 01:33:12.080]  того чтобы у нас была какая-нибудь адекватная память нет резервировать-то не обязательно но да
[01:33:12.080 --> 01:33:18.000]  но в принципе да то есть каши классическая идея тут визика и действительно простая что а давайте
[01:33:18.600 --> 01:33:22.880]  вот давайте будем говорить что если у нас совершенно случайно сайс оказался слишком
[01:33:22.880 --> 01:33:32.720]  маленький например капасти поделить на 4 то давайте ка действительно буфер урежем но урежем не в четыре
[01:33:32.720 --> 01:33:40.840]  раза а в два чтоб запас оставался то есть как бы вы поддерживаем ряд что после реаллокации у
[01:33:40.840 --> 01:33:49.200]  нас действительно сайс это половина капасти вот но тогда возникнет вопрос
[01:33:49.200 --> 01:34:03.960]  нет ну скорее четыре нас да ну можно и так ну почему-то по-разному можно то есть но то есть
[01:34:04.400 --> 01:34:11.280]  но то есть целимся так что сайс всегда от capacity поделить на 4 до capacity после реаллокации
[01:34:11.280 --> 01:34:18.280]  сайс ровно capacity пополам но внимание хорошо но если мы так будем делить то есть сокращать
[01:34:18.280 --> 01:34:24.720]  capacity в два раза если сайс это четверть capacity но будет ли это работать за адекватное время ведь
[01:34:24.720 --> 01:34:38.600]  ну давайте но давайте ладно раз уж потенциал давайте начнем с него вот давайте так вот начнем
[01:34:38.600 --> 01:34:45.000]  с него так хорошо потому что но то есть если оставить тот же самый потенциал то в принципе
[01:34:45.000 --> 01:34:53.760]  там скажем так то есть до вот этого момента в общем-то анализ не меняется но что делать если
[01:34:53.760 --> 01:35:14.120]  у нас есть поп back реаллокейша реаллок так что у нас тогда в этом случае вот ну во-первых да была
[01:35:14.120 --> 01:35:20.160]  нот да мы заметим что здесь у нас перед этим попом было получается размер с поделить так 4
[01:35:20.160 --> 01:35:26.880]  плюс один потому что в результате этого попа случилась реаллокация поэтому получается пишем
[01:35:26.880 --> 01:35:37.240]  цей делить на 4 плюс один значит поехали плюс так был у нас capacity так плюс модуль
[01:35:37.240 --> 01:35:51.160]  2 ц поделить на 4 плюс 1 минус с это был нот нет стоп вру вру вру вру это минус это потенциал
[01:35:51.160 --> 01:35:59.640]  это потенциал в начале поэтому его нужно вычитать а какой потенциал стал в конце он стал
[01:35:59.640 --> 01:36:16.160]  модуль 2 ц поделить на 4 минус с пополам так и я что-то забыл что я забыл
[01:36:20.760 --> 01:36:28.160]  да я забыл что при копировании в реальной стоимости тоже должен а нет нет нет я все учел
[01:36:28.560 --> 01:36:39.640]  4 нет я все учел но оно оно как бы тоже вписывается по константе то ли в эту
[01:36:39.640 --> 01:36:48.800]  единицу то ли вот в это цепа делить на 4 ну почему в данном случае free может работать и за
[01:36:48.800 --> 01:37:03.720]  линию это будет нормально ну фрии мы ну если мы ну я не знаю можно написать но пэнтик как бы
[01:37:03.720 --> 01:37:17.360]  проблема такая это как бы как бы константа но потому вот ну потому что почему нет с это как бы
[01:37:17.360 --> 01:37:24.320]  capacity которое было непосредственно перед этим попом но вот сайда сайс перед ним был цепы дитя 4
[01:37:24.320 --> 01:37:37.240]  плюс 1 вот остался поделить на 4 но и capacity стало цепь пола вот но у самого себе в этом
[01:37:37.240 --> 01:37:44.960]  что страшного нету но вот нету можно по разному сказать нету как сказать нету есть но потому
[01:37:44.960 --> 01:37:48.960]  что мы можем сказать что мы действительно работаем за единицу плюс отце поделить на
[01:37:48.960 --> 01:37:57.880]  4 да вроде он вот может что-то я локусь у нас за цепи дитя 4 работает и считаешь что там
[01:37:57.880 --> 01:38:02.400]  далее локация это как бы цены тоже работает за цепь дитя 4 умножить может быть на какой-то
[01:38:02.400 --> 01:38:09.760]  константу например 4 вот так что это все локалишь ну и потом да то есть сразу скажу что мы могли
[01:38:09.760 --> 01:38:19.320]  бы тут вместо цепи дитя 4 написать с и увеличить потенциал в 4 раза ну можно нету бред давайте так
[01:38:19.320 --> 01:38:27.680]  напишем что у нас получит цепи дитя 4 плюс 1 значит что у нас тут так тут у нас получается в
[01:38:27.680 --> 01:38:35.640]  скобочках у нас что получается там плюс точнее так минус в скобочках цепь пополам минус 2 если
[01:38:35.720 --> 01:38:46.040]  правильно понял да я правильно понял а тот будет плюс 0 так и получается очень получается что-то
[01:38:46.040 --> 01:38:59.400]  там отрицательное а именно минус с поделить на 4 минус 1 но то есть да хорошо плюс 3 так плюс 3
[01:38:59.400 --> 01:39:06.440]  вот если цель очень маленькая может быть это выйдет это тройка даже вытащит это в плюс да да
[01:39:06.440 --> 01:39:13.640]  если церковно 4 например или там церковно 8 еще садится нормально да ну в принципе да тут и
[01:39:13.640 --> 01:39:20.000]  очень интересно видите учетная стоимость может оказаться отрицательной да но на самом деле пугать
[01:39:20.000 --> 01:39:32.200]  нас не пугать нас это принципе не должно можно принципе это но то есть как бы вот то есть как
[01:39:32.200 --> 01:39:36.720]  бы главное то есть как бы мы-то точно знаем что у нас все суммарно на самом деле все работает
[01:39:36.720 --> 01:39:51.280]  поэтому ничего страшного ну может и так нету как среду божьей но может так выйти потенциал это
[01:39:51.280 --> 01:39:59.080]  энергия такая да то есть это вот у нас такая такая такая энергия что мы там иногда начина капливаем
[01:39:59.080 --> 01:40:05.600]  энергию на то иногда тратим ее на то чтобы там не страдать на больших операциях вот но в данном
[01:40:05.920 --> 01:40:09.000]  случае оказалось что действительно мы потратили то есть в данном случае видимо
[01:40:09.000 --> 01:40:14.720]  может оказаться что мы потратили может быть даже больше энергии чем на самом деле требовалось но
[01:40:14.720 --> 01:40:19.760]  по большому счету это вот ровно это значит то есть по большому счету да то есть просто у нас вот
[01:40:19.760 --> 01:40:26.140]  там выплеск оказался больше чем чем мог бы быть но обычно тут нет с Això что-то под burg є так
[01:40:26.140 --> 01:40:31.760]  ширисы вот так что получается вот такой вот то есть вектор так и в более идеальном мире мог бы
[01:40:31.760 --> 01:40:36.640]  быть но на самом деле там по-разному конечно можно его делать это можно делать в два раза
[01:40:36.640 --> 01:40:41.080]  если хотите экономить можно это то есть на самом деле в принципе абсолютно там подобный анализ
[01:40:41.080 --> 01:40:47.720]  можно провести если бы компасе увеличилась не в два раза например в полтора то есть в принципе
[01:40:47.720 --> 01:40:52.000]  любая константа больше единицы тут могла бы работать вот аналогичным примерно образом на самом
[01:40:52.000 --> 01:41:02.720]  деле вот так но это был метод потенциал так а где у нас нот а теперь давайте посмотрим как бы
[01:41:02.720 --> 01:41:12.560]  это могло как бы бог выглядит этот анализ в виде монет монетки это же просто производные
[01:41:12.560 --> 01:41:21.200]  нет ну да но как бы тут вопрос в способе мышления да то есть давайте посмотрим как
[01:41:21.200 --> 01:41:27.680]  это выглядело бы если бы тут клали монетки но здесь просто монетки надо класть чуть-чуть
[01:41:27.680 --> 01:41:34.280]  похитрее но чтобы совсем красиво было надо говорить так что если вы делаете pushback
[01:41:34.280 --> 01:41:42.600]  но здесь есть граница то есть у вас такая вот есть вот это вот граница на копастье пополам есть
[01:41:42.600 --> 01:41:48.360]  вот это вот граница на цепы 4 тогда идея такая если вы тогда идея тут такая да то есть то есть
[01:41:48.360 --> 01:41:53.160]  идея такая то есть как бы у нас равновесное состояние когда сайс находится вот в цепы пополам
[01:41:53.160 --> 01:41:58.600]  да и тогда идея такая то есть мы как бы должны накопить энергию накопить вот этих вот монеток
[01:41:58.600 --> 01:42:05.280]  так чтобы вот на операцию их хватило вот тогда идея действительно такая то есть как и ранее то
[01:42:05.280 --> 01:42:10.440]  есть если мы делаем pushback и элемент кладется справа от этой границы мы как бы кладем монетки
[01:42:10.440 --> 01:42:18.760]  там по две монетки например ну и там если шоу вычеркиваем но начитай изначально видим что тут
[01:42:18.760 --> 01:42:25.080]  конечно элементы есть но если мы решили там но если мы начинаем делать по бэки и вычеркивать
[01:42:25.080 --> 01:42:30.720]  здесь элементы мы на каждое вычеркнутое место обретите внимание не на сам элемент она вычеркнутое
[01:42:30.720 --> 01:42:41.280]  место кладем по 4 монетки например вот да а если делаем наоборот pushback значит получается у нас
[01:42:41.280 --> 01:42:53.480]  образовались лишние монетки которые просто выкидываем вот да правда как и наоборот если мы делаем
[01:42:53.480 --> 01:42:59.400]  по бэк отсюда то как бы и монетки которые лежали на элементе мы тоже выкидываем вот то есть как бы
[01:42:59.400 --> 01:43:04.640]  монетки не пригодились это называется но получается действительно что когда мы дойдем
[01:43:04.640 --> 01:43:09.800]  перед этой границы у нас будет получается гарантируется ц лишних монеток которыми мы
[01:43:09.800 --> 01:43:17.480]  оплатим ц шнуре локацию а если мы дойдем до сюда то мы получается у нас здесь будет на пустых
[01:43:17.480 --> 01:43:28.680]  местах лежать ц монеток которая то на которой мы тоже все прекрасно оплатим почему
[01:43:28.680 --> 01:43:40.200]  ой ну это давайте шутку инфляции это до шутка в данном случае пляца компьютер стал медленнее
[01:43:40.760 --> 01:43:51.240]  ну не оно там уже другое там там там уже немножко другие механизмы поэтому там
[01:43:51.240 --> 01:43:58.600]  такой степени аналогии могут не работать вот но так в принципе нету как сжигают но на
[01:43:58.600 --> 01:44:02.440]  самом деле нет монетки как бы да они на самом деле не сжигает это просто символ того то есть это
[01:44:02.440 --> 01:44:06.920]  на самом деле определенный символ перекидывание элемент то есть как бы дал меня если я локация
[01:44:06.920 --> 01:44:10.840]  но я как бы эту локацию могу распределить то есть это что-то типа то есть это что-то
[01:44:10.840 --> 01:44:16.280]  похожее на анализ среднем может быть да потому что можешь карман но если переходить к анализу
[01:44:16.280 --> 01:44:21.880]  среднем то обнаружим что целиком мы на этот раз поглядеть на это все не можем правда то есть
[01:44:21.880 --> 01:44:26.600]  как ранее мы не могли сказать что там суммарно все реалокации работают за какую-то арифметическую
[01:44:26.600 --> 01:44:32.000]  про там геометрическую прогрессию которая там куда-то там сходится увы в данном случае не
[01:44:32.000 --> 01:44:39.360]  получится но примерно в среднем можно было бы говорить так что рассмотрим момент то есть
[01:44:39.360 --> 01:44:44.640]  рассмотрим действия между реалокациями то есть заметим что реалокация то есть если у нас массив
[01:44:44.640 --> 01:44:50.920]  размера с превращается во что-то то мы можем заметить что во первых любая реалокация будет
[01:44:50.920 --> 01:44:57.560]  следующее делаться за за тета от цевремени в чем не оценивать это от цеды а с другой стороны мы
[01:44:57.560 --> 01:45:06.140]  заметим что что что на этот раз важно что до этой реалокации будет будет омега от ц операции
[01:45:06.140 --> 01:45:11.120]  правда на этот раз не тетасе а именно омега цеп потому что их конечно может быть тут сильно
[01:45:11.120 --> 01:45:18.040]  больше вот этих вот тут тудым-сюдым колеблется этих всех вот поэтому поэтому получается поэтому
[01:45:18.040 --> 01:45:23.380]  получается что действительно можно перераспределить эти суммы так что в среднем было вот единицы
[01:45:23.380 --> 01:45:29.700]  Но идеального анализа прям совсем такого, как говорится, дубаломно-приблинейного не получается.
[01:45:29.700 --> 01:45:41.820]  Вот. Так что вот такая вот у нас красота с вектором. Так, ну что, есть ли тут какие-то вопросы?
[01:45:41.820 --> 01:45:51.700]  Нет. Нету? Так, ну хорошо. Так, ну ладно, тогда, видимо.
[01:45:51.700 --> 01:45:59.140]  Господи, слушайте. Слушайте, как здорово, по-моему, это, как говорится,
[01:45:59.140 --> 01:46:03.500]  по-моему, впервые в жизни. По-моему, впервые в жизни вообще какое-то поколение студентов
[01:46:03.500 --> 01:46:12.100]  с нетерпением ждет либо ночевому кучу. Нет, ну нет. Нет, я очень рад, на самом деле,
[01:46:12.100 --> 01:46:19.820]  потому что структура данных действительно очаровательна. Это да. Вряд ли, если честно.
[01:46:19.820 --> 01:46:27.180]  Хотя нет, ладно, нет, у вас проблем, на самом деле, это не вызовет по одной простой причине,
[01:46:27.180 --> 01:46:32.380]  там в кормании есть хоть на псевдокодену реализация. Так что никаких проблем.
[01:46:32.380 --> 01:46:40.220]  Ну как бы, да. Как это названо?
[01:46:40.220 --> 01:46:57.660]  Тебя пустят на открытую Олимпиаду? А сейчас, а сейчас уже нельзя? Офигеть,
[01:46:57.660 --> 01:47:07.260]  ну я знаю. Нет, ну будем честные, знаете, там, ну куча фибоначи, в общем-то, не то, чтобы сильно
[01:47:07.260 --> 01:47:15.900]  используется на практике, на самом деле. Просто, ну там, ну и что, помогает? Тут, как бы,
[01:47:15.900 --> 01:47:23.340]  проблема в том, что у него константа так жигновато немножко, поэтому, да. Ладно. Чего?
[01:47:23.340 --> 01:47:53.340]  Ой, слушайте, аис. Ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, ой, о
[01:47:53.340 --> 01:48:02.460]  чё хотелось так ну ладно
[01:48:09.380 --> 01:48:16.460]  так ну ладно значит смотрите так ладно давайте так так так так так так так
[01:48:16.460 --> 01:48:21.900]  так ну ладно так ладно давайте-ка обсудим быстренько все-таки этот алгоритм
[01:48:21.900 --> 01:48:29.780]  на самом деле чтоб домашнее задание было целостным так нет да не не за задачей
[01:48:29.780 --> 01:48:35.820]  будет сильно более простая называется называется ка партишн
[01:48:39.980 --> 01:48:44.020]  но там это просто первая задача в домашке поэтому значит надо быстренько
[01:48:44.020 --> 01:48:49.340]  обсудить по-хорошему да стоило это дело там в едином занятии про сортировки вот
[01:48:49.340 --> 01:48:52.860]  но я просто не я просто не верю что как бы очень хочется сегодня сейчас перейти
[01:48:52.860 --> 01:48:56.140]  к персидентам структуры там немножко персидентных структурах и поговорить
[01:48:56.140 --> 01:49:00.900]  про эту персидентную очередь но честно скажу я не могу гарантировать что мы как
[01:49:00.900 --> 01:49:05.420]  бы после этого еще что-то успеем обсудить потому что там структура будет
[01:49:05.420 --> 01:49:13.500]  действительно мозгов взрывательная да ну это очередь на шестерке на шести
[01:49:13.500 --> 01:49:24.420]  стэках вот это да нет ну стэк мы тоже обсудим там можно там есть но пока мы
[01:49:24.420 --> 01:49:31.740]  катенька поговорим про задачу ка партишн об чем задача начинать очень
[01:49:31.740 --> 01:49:45.700]  простая да но дан массив из n элемент вот что это за элементы мы не знаем то
[01:49:45.700 --> 01:49:49.780]  есть можно вообще себе воображать что такие камешки и все что мы умеем это
[01:49:49.780 --> 01:49:57.660]  сравнивать их что такое сравнивать это у нас есть супер весы в чем это совершенно
[01:49:58.220 --> 01:50:04.580]  весы мы имеем право класть на каждую чашку весов только по одному камешку значит весы
[01:50:04.580 --> 01:50:10.500]  вообще не двигаются при этом но при этом на экранчике появляется информация о том кто
[01:50:10.500 --> 01:50:24.220]  из них меньше вот ну так и быть напишет а это для того чтобы на глаз не определять это прям
[01:50:24.220 --> 01:50:30.620]  вот чуть-чуть меньше или прям вот ну совсем меньше вот так но по хорошему я конечно должен
[01:50:30.620 --> 01:50:34.140]  был бы сказать что на самом деле это просто у вас есть просто черный ящик который принимает
[01:50:34.140 --> 01:50:39.700]  обход два камешка и говорит верно лишь что первый из них меньше другого да это называется
[01:50:39.700 --> 01:50:52.980]  компаратор кстати одинаковая но будем для простоты считать что нет ну как нет но
[01:50:52.980 --> 01:51:03.580]  пащет не особо принципиально на самом деле ну давайте нет давай давайте так нет я утверждаю
[01:51:04.460 --> 01:51:12.460]  нет смотри ты просто за нет он будет работать если ты нет если брать рандомный алгоритм то он
[01:51:12.460 --> 01:51:18.060]  будет работать если ты просто там когда будешь выбирать ты больше ты не просто будешь говорить
[01:51:18.060 --> 01:51:24.660]  кто меньше кто больше еще и заодно посчитаешь сколько равных вот их там тоже себе возьмешь это
[01:51:24.660 --> 01:51:33.700]  тоже в принципе нормально нет отдельная кстати висеть и просто вести если мы получаем
[01:51:33.700 --> 01:51:44.020]  что равно просто ну можно так да потом нет а там разный прикол нет а сам не дайте в качестве
[01:51:44.020 --> 01:51:49.300]  упражнения на самом деле зайдет на каких-нибудь собеседуе могут дать такую значит отречь вот
[01:51:49.300 --> 01:51:54.740]  кстати лада об этом но нет принципе об этом на самом деле лада раз уж об этом заходит речь то
[01:51:54.740 --> 01:52:02.620]  в принципе на самом деле бывает это там есть задача в украинском флаге украинском ну ладно
[01:52:02.620 --> 01:52:12.220]  ну если хотите можете о польском пожалуйста вот значит смотрите задача такая но то по сути
[01:52:12.220 --> 01:52:23.900]  там задача такая там данные то то есть вам дан массив и да и дан и да но допустим да но
[01:52:23.900 --> 01:52:31.540]  какой-нибудь число икс вам нужно переупорядочить элементы в этом массиве так чтобы слева были
[01:52:31.540 --> 01:52:38.740]  элементы меньше икса справа больше их ну там больше либо равно но важная фишка это нужно
[01:52:38.780 --> 01:52:46.080]  сделать завод единицы памяти дополнительной памяти то есть никто нету никаких считываний если что то
[01:52:46.080 --> 01:52:50.700]  есть да понятно что есть соблазн конечно завести этот массив считывать и записывать куда надо это
[01:52:50.700 --> 01:52:52.940]  да но нет то есть фишка в том что вот представят то есть больше себе представят что вас там есть
[01:52:52.940 --> 01:53:02.140]  То есть фишка в том, что вот представить, то есть можете себе представить, что у вас там есть функция, которая переслала вам по какой-нибудь ссылке, значит, вектор, или даже массив по указателю.
[01:53:02.780 --> 01:53:07.420]  Вот вам нужно, используя от единицы дополнительной памяти, в этом же массиве переставить элементы.
[01:53:07.980 --> 01:53:17.060]  То есть внутри, среди вот этого, как меньше х, это как бы без разницы в каком порядке, с этой стороны тоже без разницы в каком порядке.
[01:53:17.260 --> 01:53:29.260]  Ну, типа просто итеративно начать строить, ну, хранить границу, где у нас уже построена область меньше, где у нас построена область больше или равно х, когда мы видим, ну, мы идем, ну, идти одновременно по праву, область и по слову, ну, как бы.
[01:53:29.660 --> 01:53:30.540]  Да, ну...
[01:53:31.020 --> 01:53:34.300]  Не, ну, просто идем, а на момент, кстати, мы находим оба элемента, которые нет.
[01:53:34.300 --> 01:53:41.380]  Ну, пора, да, так, так, придите, вы уже, да, вы уже говорите о два разных решениях, на самом деле, да, вот.
[01:53:42.340 --> 01:53:48.100]  Ну, то, действительно, пора, да, можно, потому что у меня в голову, потому что есть, конечно, классическое решение, которое обычно пишут, когда кто-то пишет quicksort.
[01:53:49.420 --> 01:53:54.820]  Решение там, там и в результате код, вот сейчас прям, так, попробую паскаль немножко вспомнить.
[01:53:56.900 --> 01:53:57.420]  Давайте.
[01:53:59.300 --> 01:54:00.700]  Господи, ты кудил на паскале?
[01:54:03.020 --> 01:54:03.940]  О, классно.
[01:54:04.460 --> 01:54:07.980]  Нет, нет, ну, как сказать, нет, значит, объясни ситуацию.
[01:54:07.980 --> 01:54:15.140]  Дело в том, что я был, я учился, значит, в такие стародавние времена, когда, значит, паскаль еще был полноценным олимпиадным языком.
[01:54:16.420 --> 01:54:19.740]  Ну, то я просто, у меня год поступлений, год поступлений на пистерии в 2009.
[01:54:20.980 --> 01:54:24.340]  В те времена Геннадий Короткевич там на паскале межнарный выиграл.
[01:54:27.900 --> 01:54:32.020]  Да, господи, сейчас, да, сейчас я современно уже начинаю забывать, кто такой Геннадий Короткевич.
[01:54:34.700 --> 01:54:38.140]  Да, кто такой Петя Митричев уже не знает, видимо, уже вообще никто там.
[01:54:39.220 --> 01:54:39.740]  Кошмар.
[01:54:40.660 --> 01:54:49.420]  Не, ну, понятно, что ладно, там, хотя ладно, человек, хотя нет, просто Петр Митричев, это чемпион в кошмар, там, по-моему, и два линии 2000 нового года.
[01:54:51.220 --> 01:54:54.460]  Да, более того, он был тогда единственный, кто решил там эту эпическую задачу.
[01:54:56.180 --> 01:54:58.900]  Нет, там была, да, в кошпе дали такую просто абсолютно эпическую задачу.
[01:54:58.900 --> 01:55:02.420]  Сейчас, а, симпатичный узор она называлась.
[01:55:03.940 --> 01:55:15.140]  Ну, вот это классическая, то есть, с какими способами можно раскатить табличку N на M так, чтобы в два цвета, так чтобы не было одноцветных квадратиков, два на два.
[01:55:16.780 --> 01:55:19.140]  Походу, да, до того, как это стало мейнстримом.
[01:55:21.700 --> 01:55:27.700]  Ну да, нет, видимо, перед этим, видимо, тогда ее придумали, собственно, составители контеста.
[01:55:28.660 --> 01:55:39.180]  Вот, но это, да, это, конечно, но, как бы, да, сейчас понятно, сейчас это уже классика, которую всем расскажут еще одна, но в 2000 году, в кошпе такое дали, вот он, вот его команда это решила.
[01:55:40.060 --> 01:55:44.100]  Ну, в общем, они тогда, по-моему, в кошпо, они там, по-моему, второе место на две задачи порвали, по-моему.
[01:55:45.100 --> 01:55:51.780]  Ну, правда, чтобы, по-моему, там, времена такие были, что это был счет семь пять, по-моему, а контест был вообще на восьми задач.
[01:55:53.060 --> 01:55:54.980]  Была, была, какая-то была.
[01:55:56.220 --> 01:55:57.540]  Или там скачивали тесты?
[01:55:57.540 --> 01:56:11.340]  Нет, нет, нет, нет, тогда что-то все-таки, по-моему, уже было локально, то есть, нет, когда-то это все-таки, когда-то еще в девяностые, да, на чемпионате мира ICPC, действительно, там люди с дискетами к жюри бегали, это да.
[01:56:12.540 --> 01:56:26.980]  Ну, понятно, что учитывая, что чемпионат ICPC вообще, видимо, там считается начало своей истории семьдесят седьмой год вообще, но, правда, все времена, правда, там не участвовали команды со всего мира, это был все-таки чемпионат Фисте, там все-таки это не все американский.
[01:56:28.060 --> 01:56:28.340]  Да.
[01:56:30.700 --> 01:56:52.380]  Нет, ну, кстати, Фистех, в общем-то, относительно недавно даже в этом все участвовал, потому что там пошло расширение на мир, то есть, там, по-моему, впервые, там где-то в районе девяностого года, там, по-моему, впервые там участвовали представители, собственно, России, там, по-моему, это, по-моему, первыми были, там, ну, первыми вузами были, кто, не помню, не помню, кто из них был конкретно первый, но это были ИТМОС, СПБГУ и МГУ, соответственно.
[01:56:53.180 --> 01:57:06.860]  То есть какие-то, ну, потом пошло, там какие-то медальки были, что-то там пошло, в результате потом, ну, как минимум, можно сказать, что в двухтысячном году там Андрей, там, собственно, Андрей Лопатин, Коля Дуров и там с двумя сакомандниками стали двукратными чемпионами мира.
[01:57:08.860 --> 01:57:12.980]  Нет, во-первых, нет, в те времена уже три, хотя изначально было четыре, кстати.
[01:57:13.580 --> 01:57:41.580]  Нет, ну, история была простая, потому что задача приехали программисты посоревноваться по программированию, но компьютеров тогда было, собственно, небогато, и вот я обнаружил, что их было сильно меньше, ну, ладно, давайте, пусть они поделятся на команду, и вот, собственно, по числу компьютеров, в команде тогда было четыре человека, ну, потом как-то сошлось, что их, все-таки, в команде стало три человека, и вот с тех пор этот чемпионат в этом виде существует, вот, так что, да, весело было.
[01:57:42.180 --> 01:57:43.180]  Вот.
[01:57:43.180 --> 01:57:48.180]  Первая задача с полностью ослабленическим тестированием в девяностом году, что ли, была?
[01:57:48.180 --> 01:58:05.180]  Наверное, да, потому что, ну да, это вот какие-то точно девяностые годы, тем более, что там, да, то есть, это нет, ну, там, межнара, это межнара, это отдельная песня, конечно, да, хотя прикольно было знать, что была вообще сборная Советского Союза, на самом деле, по информатике, кстати, ну, видимо, последние пару лет, но была.
[01:58:06.180 --> 01:58:07.180]  Вот.
[01:58:07.180 --> 01:58:08.180]  Как она выступала?
[01:58:08.180 --> 01:58:14.480]  но вот но как-то вы как-то выступала господи не помню но не помню так настолько
[01:58:14.480 --> 01:58:18.380]  глубоко ладно неважно это все ладно мы так ладно лирическое отступление все но
[01:58:18.380 --> 01:58:25.880]  вот я просто пропускали на самом деле это все про эти рейдеры может и может и был
[01:58:25.880 --> 01:58:31.420]  не знаю ну скажем так ну понятно что там крим за золотым призером и cpc он был
[01:58:31.420 --> 01:58:36.360]  чемпионом мира не гарантирует но помота по моему золотая медаль 96 года cpc не
[01:58:36.360 --> 01:58:42.360]  ошибаюсь может две я не помню вот то есть как это приезжайте на полуфинал вам там
[01:58:42.360 --> 01:58:45.760]  фотки об этом обязательно покажут скорее всего потому что там потому что них он
[01:58:45.760 --> 01:58:53.800]  выигрывал вот это было дело вот ну ладно я просто что пропускать вспомнил да
[01:58:53.800 --> 01:58:56.960]  просто да чем паскаль отличается от всех остальных языков тем что там
[01:58:56.960 --> 01:59:08.400]  устроенной сортировки нет нет хуже ее надо было сказать во время тура вот но
[01:59:08.400 --> 01:59:12.020]  ничего страшного в этом не было потому что в этом месте писался код вот
[01:59:12.020 --> 01:59:19.400]  примерно следующего содержание там вот так давайте л присвоить 0 нет ладно
[01:59:19.400 --> 01:59:32.200]  нет пусть ежи все-таки вот ваил и меньше жи ду паскаль так паскаль беден нет
[01:59:32.200 --> 01:59:36.360]  вот этот язык там в общем-то попаси то что практически идентичен сам по полу по
[01:59:36.360 --> 01:59:43.160]  воду ли там это этого там по модулю какого-нибудь это контралаша вот так
[01:59:43.160 --> 01:59:59.120]  значит что там дальше было значит ваил значит а вот так смотреть сейчас x присвоить а от значит
[01:59:59.120 --> 02:00:07.240]  а и плюс а вот ой ну да если уж кусок писать тогда это вообще было вот так и равно l да
[02:00:07.240 --> 02:00:14.000]  мы сортируем подотрезок от вот вот так это сортировка у нас так ладно что тут
[02:00:14.000 --> 02:00:40.760]  чушь тут греха таить процедуре кусок вот да вот так не правильно еще тут надо писать
[02:00:40.760 --> 02:00:54.240]  вар внутренний бодидаров значит и жи икс лонгинт боже упаси писать интеджер а то как бы
[02:00:54.240 --> 02:01:06.760]  наделся будет работать она при паскали нет вот ну ой вот так да да ну вот да во-первых и в там
[02:01:06.760 --> 02:01:26.680]  l больше либо равно r то exit да ладно вы что это реально записываете что так ну ладно не ну неважно
[02:01:26.680 --> 02:01:30.640]  короче я тут вел переменные и жи икс как-то принято по паскальский написал там какой-то
[02:01:30.720 --> 02:01:36.320]  типа если там l больше либо равно r то выбрасываемся сразу то есть там ничего
[02:01:36.320 --> 02:01:40.600]  содержательного то есть содержательная часть вы видите собственно безмещерина вот
[02:01:40.600 --> 02:01:51.840]  смотрите дальше происходит следующее так ваил получается значит дальше мы говорим
[02:01:51.840 --> 02:02:06.480]  ваил а это но вот а это меньше икс ду инк от и это инкримент ну плюс плюс и короче не как-то
[02:02:06.480 --> 02:02:12.080]  не странно я тут ничего не забыл нет бегин я не забыл что однострочный бегин для однострочного
[02:02:12.080 --> 02:02:24.520]  вайла бегин энки требовался но вот в плюсах это было бы плюс плюс и да а ну
[02:02:24.520 --> 02:02:51.320]  иф зен зен бегин значит ну короче свап а это житого инк и дек жи
[02:02:51.320 --> 02:03:14.800]  энд и тут энд а я смог как там было иф и меньше эр зен зен у сорт от и эр иф а видим вот поэтому
[02:03:14.800 --> 02:03:27.720]  вот этой гадость это не писалось я вспомнил да вот в принципе вот тогда классия классическая
[02:03:27.720 --> 02:03:33.480]  классический кусок обычно пишется вот так вот тогда но единственное там конечно могло быть
[02:03:33.480 --> 02:03:38.640]  отличия как-то раз на зачете в лкш подловили что такой кус что там все-таки подсунули теста на
[02:03:38.640 --> 02:03:45.560]  котором этот кусок получает да потому что формально говоря а всем точка этого алгоритма
[02:03:45.560 --> 02:03:53.120]  квадрат почему потому что вам может постоянно не вести и вы вы вот здесь будете выбирать минимум
[02:03:53.120 --> 02:04:02.280]  есть нет есть именно поэтому как бы это как бы там как бы это тель превратился в окей быстро да
[02:04:02.280 --> 02:04:11.640]  потому что рандом там есть я не помню как он пишется но значит он есть обрабатывает
[02:04:11.640 --> 02:04:17.520]  она нет скажем так я но вот нет она их пока нет чего она прекрасно обрабатывает на самом деле
[02:04:17.520 --> 02:04:25.480]  нет смотрите обратить внимание тут не случайно не строги именно строгие равенства потому что
[02:04:25.620 --> 02:04:32.300]  мы где-то указатель надкнется на и extension тоже остановится так что то есть на самом деле поэтому
[02:04:32.300 --> 02:04:36.720]  там если строить и ижи встретят два одинаковых элемента них тоже как бы посва Por Meter
[02:04:36.720 --> 02:04:43.820]  пойдут дальше если и наткнется на меньше элемент а endure на ть на равный 1 на 그런 passing от
[02:04:43.820 --> 02:04:51.760]  цена больше элемент ажин О종 ногт 임ф тоже по с clapprov Meow Fool дальше да по факту да то есть
[02:04:51.760 --> 02:04:56.260]  То есть как там с равными действительно происходит действительно что-то там рандомное, там это да.
[02:05:05.260 --> 02:05:06.760]  Чего? Вайл с дожи поставить?
[02:05:09.260 --> 02:05:10.760]  Нет, ну смотрите, там логика такая.
[02:05:10.760 --> 02:05:14.260]  Во-первых, начнем с того, что первая итерация вайла за...
[02:05:14.260 --> 02:05:17.260]  У нас есть элемент равный х, поэтому за него нет.
[02:05:18.260 --> 02:05:21.260]  Потому что х это элемент, по которому мы сбиваем массив.
[02:05:21.260 --> 02:05:25.260]  Нет, смотрите, парадокс, но ничего ставить не надо.
[02:05:26.260 --> 02:05:30.260]  Потому что, смотрите, на первой итерации вот этого вайла ничего не произойдет.
[02:05:30.260 --> 02:05:35.260]  Почему? Потому что в этом массиве есть х, и и ж как минимум на нем и становится. Правда?
[02:05:35.260 --> 02:05:42.760]  А после того, как произойдет свап, тогда оно всегда будет гарантироваться, что справа от и есть элемент не меньше х.
[02:05:42.760 --> 02:05:45.760]  И слева от ж есть элемент не больше х.
[02:05:45.760 --> 02:05:52.760]  Поэтому прежде чем они этих элементов достигнут, они как бы обгонят друг друга.
[02:05:52.760 --> 02:05:54.760]  Поэтому выходов не произойдет.
[02:05:56.760 --> 02:06:03.760]  Это действительно парадокс, я просто помню там в группе С ЛКШ, а когда-то давным-давно в ЛКШ была группа С.
[02:06:04.760 --> 02:06:06.760]  Да ладно.
[02:06:08.760 --> 02:06:10.760]  Сейчас стоят чиселки. В те времена были все просто.
[02:06:11.760 --> 02:06:15.760]  Тогда можно было приехать в Д и учиться практически с нуля.
[02:06:15.760 --> 02:06:21.760]  Но не совсем с нуля, то есть там на каком-то уровне язык стать надо было, но не на самом продвижении.
[02:06:21.760 --> 02:06:23.760]  Чего?
[02:06:23.760 --> 02:06:27.760]  Нет, П это промышленное программируемое, это вообще не об этом.
[02:06:27.760 --> 02:06:30.760]  То есть это как бы не из линейки алгоритмического программирования.
[02:06:30.760 --> 02:06:36.760]  Нет, ну была классная вещь, но это просто немножко не об этом.
[02:06:36.760 --> 02:06:39.760]  То есть была и параллель М, где занимались чистой математикой.
[02:06:41.760 --> 02:06:46.760]  Ой, ну ее переименовали, она была Z, она была 0 и так далее.
[02:06:46.760 --> 02:06:48.760]  Ой, там...
[02:06:48.760 --> 02:06:50.760]  Не-не-не, это было типа для межнаров.
[02:06:52.760 --> 02:06:54.760]  То есть чтобы...
[02:06:54.760 --> 02:06:56.760]  Нет, М это для шестиклассих.
[02:06:56.760 --> 02:07:00.760]  Так ладно, я могу вам там отдельно рассказать, но я там эти байки могу рассказывать.
[02:07:00.760 --> 02:07:02.760]  Там просто у нас пара закончится.
[02:07:02.760 --> 02:07:04.760]  Там это просто...
[02:07:04.760 --> 02:07:06.760]  Пуше как бы дай.
[02:07:06.760 --> 02:07:08.760]  По свою бурную молодость я там могу, знаете.
[02:07:10.760 --> 02:07:12.760]  Ой.
[02:07:12.760 --> 02:07:14.760]  Пуше в конце концов, да, как бы это...
[02:07:14.760 --> 02:07:16.760]  Ой, когда...
[02:07:16.760 --> 02:07:18.760]  Да, это помню, еда был, да, я помню, был на всероссе.
[02:07:18.760 --> 02:07:20.760]  Ой, какой там был футбол.
[02:07:22.760 --> 02:07:24.760]  Ну и контест тоже прикольный.
[02:07:24.760 --> 02:07:26.760]  Ладно, значит, смотрите.
[02:07:26.760 --> 02:07:30.760]  Ну вот, ну нет, это вот паскаль, просто я помню, в группе целка шалатка.
[02:07:30.760 --> 02:07:32.760]  Вот.
[02:07:32.760 --> 02:07:34.760]  Нет.
[02:07:34.760 --> 02:07:36.760]  Это мы тут немножко отвлеклись.
[02:07:36.760 --> 02:07:38.760]  Ладно.
[02:07:38.760 --> 02:07:40.760]  И сейчас пока скажу, что кусок.
[02:07:40.760 --> 02:07:42.760]  То есть в принципе, что у нас тут делать?
[02:07:42.760 --> 02:07:46.760]  По большому счету, вот эта функция до рекурсивных вызовов, она вызывает...
[02:07:46.760 --> 02:07:48.760]  Она разделяет массив на две части.
[02:07:48.760 --> 02:07:52.760]  На как бы меньшее кого-то и большее кого-то.
[02:07:52.760 --> 02:07:54.760]  Ну то есть в принципе, почему задача называется...
[02:07:54.760 --> 02:07:56.760]  Задача об украинском флаге.
[02:07:56.760 --> 02:08:02.760]  Допустим, у нас есть нечто, которое берет элемент и говорит, он синий или желтый.
[02:08:04.760 --> 02:08:06.760]  И тогда в принципе можно было...
[02:08:06.760 --> 02:08:12.760]  То есть мы хотим перепорядочить элементы так, чтобы сначала шли все синие, а потом шли все желтые.
[02:08:14.760 --> 02:08:16.760]  Нет, это не из учебника, это у меня из школы.
[02:08:16.760 --> 02:08:19.760]  Когда я учился в школе, было нормально.
[02:08:19.760 --> 02:08:21.760]  Вот, ну и сейчас.
[02:08:21.760 --> 02:08:23.760]  Но на самом деле исхода была...
[02:08:23.760 --> 02:08:27.760]  Но исхода на самом деле задача даже не об украинском флаге, а о голландском.
[02:08:31.760 --> 02:08:32.760]  Нет.
[02:08:32.760 --> 02:08:35.760]  Нет, там фишка в том, что...
[02:08:36.760 --> 02:08:37.760]  Нет, да.
[02:08:37.760 --> 02:08:40.760]  То есть надо их упорядочить так, чтобы были меньше х, равные х и больше.
[02:08:40.760 --> 02:08:42.760]  Их тоже надо завод единицы памяти.
[02:08:45.760 --> 02:08:47.760]  Нет, ну, погодите.
[02:08:47.760 --> 02:08:49.760]  Нет, ну на самом деле, да.
[02:08:49.760 --> 02:08:53.760]  Один из тупых вариантов проделать вот это.
[02:08:53.760 --> 02:08:59.760]  И обнаружить, что у вас там, действительно, от 3 до j будут элементы меньше либо равные, справа-то больше либо равные.
[02:08:59.760 --> 02:09:04.760]  И тогда внутри уже вы их можете перепорядочить на меньшее и равное соответственно.
[02:09:06.760 --> 02:09:07.760]  Вот.
[02:09:07.760 --> 02:09:08.760]  Впрочем, там по-разному.
[02:09:08.760 --> 02:09:11.760]  Можно на самом деле не заморачиваться, потому что есть такой метод.
[02:09:11.760 --> 02:09:13.760]  Теоретически мог бы быть другой метод.
[02:09:13.760 --> 02:09:15.760]  Вы просто тупо идете слева направо.
[02:09:15.760 --> 02:09:21.760]  Допустим, я вот дошел до сюда, и у меня вот где-то вот здесь находятся элементы меньше х, а тут находятся больше.
[02:09:21.760 --> 02:09:25.760]  И тогда, когда я вижу очередной элемент, то как бы у меня два варианта.
[02:09:25.760 --> 02:09:27.760]  Если больше х, то я просто тупо иду дальше.
[02:09:27.760 --> 02:09:31.760]  А если меньше х, то я тупо свапаю вот с этим элементом и двигаю вот этот указатель.
[02:09:31.760 --> 02:09:33.760]  В принципе, тоже можно.
[02:09:33.760 --> 02:09:34.760]  Вот.
[02:09:34.760 --> 02:09:39.760]  Ну, там отдельная задача, как бы это сделать все-таки за условно один проход, а не условно за два.
[02:09:39.760 --> 02:09:41.760]  Но это уже там деталь.
[02:09:41.760 --> 02:09:45.760]  Ну, в принципе, на самом деле задачи такого типа на всяких собеседованиях могут встретиться.
[02:09:45.760 --> 02:09:52.760]  Ну, то есть обычно задачи подобного типа там для продвинутых олимпианников там обычно проблем не вызывают.
[02:09:52.760 --> 02:09:53.760]  Вот.
[02:09:53.760 --> 02:09:54.760]  На соответствии.
[02:09:54.760 --> 02:09:55.760]  Так вот.
[02:09:55.760 --> 02:09:57.760]  Вернемся к...
[02:09:57.760 --> 02:09:59.760]  Ладно, поговорили об этой техке.
[02:09:59.760 --> 02:10:01.760]  Вернемся к К-партишену.
[02:10:01.760 --> 02:10:04.760]  Начну к...
[02:10:04.760 --> 02:10:05.760]  Начну...
[02:10:05.760 --> 02:10:06.760]  Да.
[02:10:06.760 --> 02:10:09.760]  Или даже...
[02:10:09.760 --> 02:10:10.760]  Вот.
[02:10:10.760 --> 02:10:12.760]  Или еще одно название.
[02:10:12.760 --> 02:10:18.760]  Q-order-статистика.
[02:10:18.760 --> 02:10:22.760]  Потому что по-русски эта задача называется задачей о кат- и порядковой статистике.
[02:10:22.760 --> 02:10:23.760]  Значит, а при чем?
[02:10:23.760 --> 02:10:26.760]  Что такое кат- и порядковая статистика массива?
[02:10:26.760 --> 02:10:35.760]  Мы говорим, что какой элемент окажется кат-ым, если мы этот массив ацертируем?
[02:10:35.760 --> 02:10:36.760]  Ну, или там.
[02:10:36.760 --> 02:10:42.760]  То есть в простой постановке говорим так, что пусть у нас равных элементов нет, все элементы попарно различны.
[02:10:42.760 --> 02:10:50.760]  И тогда скажи, найдите, пожалуйста, элемент, который больше, чем ровно K-1 других элементов.
[02:10:50.760 --> 02:10:51.760]  Вот.
[02:10:51.760 --> 02:10:54.760]  Можно еще вот так эту задачу сформулировать.
[02:10:54.760 --> 02:10:55.760]  Вот.
[02:10:55.760 --> 02:11:01.760]  Сформулировать там вот в телефонах.
[02:11:01.760 --> 02:11:04.760]  Просто если никак, лучше тогда их убрать, тогда это бессмысленно просто.
[02:11:04.760 --> 02:11:06.760]  Соответственно.
[02:11:06.760 --> 02:11:07.760]  Ой.
[02:11:07.760 --> 02:11:10.760]  Так вот.
[02:11:10.760 --> 02:11:13.760]  Значит, соответственно.
[02:11:13.760 --> 02:11:16.760]  Итак.
[02:11:16.760 --> 02:11:17.760]  Ну, возникает вопрос.
[02:11:17.760 --> 02:11:21.760]  Как же эту кат-у порядковую статистику искать в предположении, что мы там массив можем...
[02:11:21.760 --> 02:11:24.760]  В массиве элементы переставлять можем.
[02:11:24.760 --> 02:11:25.760]  Есть классический вариант.
[02:11:25.760 --> 02:11:26.760]  Такой рандомный.
[02:11:26.760 --> 02:11:29.760]  Давайте выберем рандомный элемент.
[02:11:29.760 --> 02:11:31.760]  Ну, вот это вот.
[02:11:31.760 --> 02:11:34.760]  Типа так же, но рандомно.
[02:11:34.760 --> 02:11:36.760]  Вот.
[02:11:36.760 --> 02:11:37.760]  Ну да.
[02:11:37.760 --> 02:11:39.760]  И, значит, проделаем ту же операцию.
[02:11:39.760 --> 02:11:42.760]  Ну, вот тогда вызывать рекурсивно будем не...
[02:11:42.760 --> 02:11:47.760]  Вызывать рекурсивно будем не два раза, как в сортировке, а только один в ту сторону, которую нам надо.
[02:11:47.760 --> 02:11:49.760]  Ну, и с правильно подогнанной кашкой.
[02:11:49.760 --> 02:11:51.760]  Там уже детали, я думаю, нет смысла прописать.
[02:11:51.760 --> 02:11:52.760]  Вот.
[02:11:52.760 --> 02:11:53.760]  Ну, кстати, да.
[02:11:53.760 --> 02:11:55.760]  Тогда за сколько это работает?
[02:11:55.760 --> 02:12:00.760]  Ну, если нам будет фантастически не вести, то это будет работать за квадрат.
[02:12:00.760 --> 02:12:01.760]  Ну, ладно.
[02:12:01.760 --> 02:12:02.760]  За...
[02:12:02.760 --> 02:12:04.760]  Это может работать за n умножить на k.
[02:12:04.760 --> 02:12:09.760]  Или это может работать за n умножить на n-минус k.
[02:12:09.760 --> 02:12:12.760]  Ну, потому что, если там в нужную сторону будет не вести.
[02:12:12.760 --> 02:12:14.760]  Вот.
[02:12:14.760 --> 02:12:15.760]  Ну, в принципе, да.
[02:12:15.760 --> 02:12:20.760]  Заметим, что там еще алгоритм может отказывать, потому что если гарантируется, что k не превосходит 10,
[02:12:20.760 --> 02:12:26.760]  то, в принципе, выгодно, наверное, просто запустить 10 итераций пузырька какого-нибудь.
[02:12:26.760 --> 02:12:29.760]  Что я сейчас сказал?
[02:12:29.760 --> 02:12:30.760]  Ну, да.
[02:12:30.760 --> 02:12:31.760]  Ну, или так, да.
[02:12:31.760 --> 02:12:33.760]  Просто 10 раз найти минимум.
[02:12:33.760 --> 02:12:34.760]  Ну, ладно.
[02:12:34.760 --> 02:12:35.760]  Так, ладно.
[02:12:35.760 --> 02:12:39.760]  Давайте поделите, кто знает, что такое сортировка пузырьком.
[02:12:39.760 --> 02:12:44.760]  Нет, все знают.
[02:12:44.760 --> 02:12:48.760]  Но считайте, что в процессе, типа, до каждой итерации там какие-то большие элементы,
[02:12:48.760 --> 02:12:53.760]  типа, да, там пульбулька всплывают, да, вот так как-то.
[02:12:53.760 --> 02:12:56.760]  Но там это отдельно.
[02:12:56.760 --> 02:12:57.760]  Вот.
[02:12:57.760 --> 02:12:58.760]  Ну, хорошо.
[02:12:58.760 --> 02:12:59.760]  Ладно.
[02:12:59.760 --> 02:13:00.760]  Вот.
[02:13:00.760 --> 02:13:01.760]  Так что можно так?
[02:13:01.760 --> 02:13:03.760]  Ну, в худшем случае, если будет не вести, да.
[02:13:03.760 --> 02:13:10.760]  Но с другой стороны, на самом деле, при разумных предположениях о везении, на самом деле алгоритм явно будет работать за какую-то линию.
[02:13:10.760 --> 02:13:15.760]  Ну, например, предположим, мы гарантируем, что на каждом таком шаре будет отсекаться.
[02:13:15.760 --> 02:13:22.760]  Ну, например, где-то хотя бы десятая часть всех элементов.
[02:13:22.760 --> 02:13:24.760]  Ну, нормально такое предложение, да?
[02:13:24.760 --> 02:13:26.760]  Тогда за какое время будет работать алгоритм?
[02:13:26.760 --> 02:13:27.760]  Он тогда будет работать за время.
[02:13:27.760 --> 02:13:29.760]  Первая фаза работает за n.
[02:13:29.760 --> 02:13:31.760]  Вторая за 9 десятых n.
[02:13:31.760 --> 02:13:38.760]  Вторая за 9 десятых в квадрате n.
[02:13:38.760 --> 02:13:39.760]  Ну, вот.
[02:13:39.760 --> 02:13:40.760]  Потом в кубе n.
[02:13:40.760 --> 02:13:41.760]  Ну и так далее.
[02:13:41.760 --> 02:13:43.760]  До конца дописывать не буду.
[02:13:43.760 --> 02:13:45.760]  Ну, не потому, что мне лень, а просто там нет конца.
[02:13:45.760 --> 02:13:47.760]  Вот.
[02:13:47.760 --> 02:13:48.760]  Да.
[02:13:48.760 --> 02:13:49.760]  Ну, а что это такое?
[02:13:49.760 --> 02:13:57.760]  Это равно n на сумму геометрической прогрессии 9 десятых в степени i.
[02:13:57.760 --> 02:14:00.760]  Вот так меньше либо равно.
[02:14:00.760 --> 02:14:02.760]  Вот.
[02:14:02.760 --> 02:14:04.760]  Но заметим, что этот ряд у нас сходится.
[02:14:04.760 --> 02:14:07.760]  И сходится к чему?
[02:14:07.760 --> 02:14:09.760]  Ну, не примерно, а в точности.
[02:14:09.760 --> 02:14:10.760]  Это 10n.
[02:14:10.760 --> 02:14:12.760]  Ну, потому что у нас, да.
[02:14:12.760 --> 02:14:15.760]  То есть, если вы там складывать 1 плюс q, плюс q в квадрат, плюс и так далее.
[02:14:15.760 --> 02:14:17.760]  Там в кубе плюс и так далее.
[02:14:17.760 --> 02:14:22.760]  То это равно 1 делить на 1 минус q.
[02:14:22.760 --> 02:14:24.760]  Ну, просто потому, что если бы, да.
[02:14:24.760 --> 02:14:27.760]  Ну, на всякий случай, да.
[02:14:27.760 --> 02:14:30.760]  То есть, если вы просто складываете там n в степени q,
[02:14:30.760 --> 02:14:35.760]  это будет равно там 1 минус q в степени n поделить на 1 минус q.
[02:14:35.760 --> 02:14:37.760]  Вот.
[02:14:37.760 --> 02:14:40.760]  Ну, если q меньше единицы, понятно, что это стремится к нулю.
[02:14:40.760 --> 02:14:42.760]  Поэтому в пределе будет вот это.
[02:14:42.760 --> 02:14:44.760]  Вот.
[02:14:44.760 --> 02:14:45.760]  Получается 10n.
[02:14:45.760 --> 02:14:48.760]  Получается, что вы где-то не более, чем за 10n элементов.
[02:14:48.760 --> 02:14:51.760]  То есть, 10n всего найдете.
[02:14:51.760 --> 02:14:53.760]  Ну, там думаете, ну, вам иногда будет...
[02:14:53.760 --> 02:14:59.760]  Ну, там примерно раз в 10 итераций вам, конечно, так вести не будет.
[02:14:59.760 --> 02:15:00.760]  Но, возможно, это...
[02:15:00.760 --> 02:15:03.760]  Но где-то это, наверное, вам может компенсироваться тем,
[02:15:03.760 --> 02:15:06.760]  что где-то вам будет отсекаться ни одна десятая побольше.
[02:15:06.760 --> 02:15:09.760]  Ну, по-хорошему, конечно, тут надо уже тягу вверх вводить.
[02:15:09.760 --> 02:15:12.760]  То есть, прокурсор тоже, можно сказать, что вам может фантастически не вести,
[02:15:12.760 --> 02:15:14.760]  и это будет работать за квадрат.
[02:15:14.760 --> 02:15:16.760]  Более того, под каждой...
[02:15:16.760 --> 02:15:20.760]  То есть, в принципе, под практически любую реализацию можно подогнать контратест.
[02:15:20.760 --> 02:15:23.760]  Даже под рандом, потому что рандом, как известно, это псевдорандом.
[02:15:23.760 --> 02:15:26.760]  Поэтому, если вы знаете, как он генерится, то подогнать можно.
[02:15:26.760 --> 02:15:29.760]  А как подогнать, например, зону под твистер?
[02:15:29.760 --> 02:15:31.760]  Под что?
[02:15:31.760 --> 02:15:33.760]  Ну, под...
[02:15:33.760 --> 02:15:34.760]  Как там?
[02:15:35.760 --> 02:15:40.760]  Ну, получается, стоит 600 с чем-то.
[02:15:51.760 --> 02:15:54.760]  Ну да, там, конечно, в этом смысле веселье.
[02:15:54.760 --> 02:15:59.760]  А почему для любой последности рандомов будет тест, на котором все варится?
[02:15:59.760 --> 02:16:01.760]  Упражнения читательные?
[02:16:01.760 --> 02:16:04.760]  Потому что, если ты умеешь...
[02:16:04.760 --> 02:16:08.760]  Ну, там тест будет работать примерно так, что...
[02:16:08.760 --> 02:16:13.760]  То есть, тебе нужно сделать так, чтобы вот этот элемент стал минимумом.
[02:16:13.760 --> 02:16:16.760]  То есть, если ты знаешь ранд, ты предскажешь, где минимум должен оказаться.
[02:16:16.760 --> 02:16:18.760]  И все.
[02:16:25.760 --> 02:16:28.760]  Почему невозможно?
[02:16:38.760 --> 02:16:39.760]  Ну да.
[02:16:39.760 --> 02:16:41.760]  Но если ты заранее...
[02:16:41.760 --> 02:16:43.760]  Нет, просто утверждение такое.
[02:16:43.760 --> 02:16:47.760]  Предположим, что ты заранее знаешь последовательность из N-рандомов, которые тут будет выдана.
[02:16:47.760 --> 02:16:52.760]  Тогда я утверждаю, что можно подогнать последовательство, которое на каждом рандоме
[02:16:52.760 --> 02:16:56.760]  в этом подмассиве будет выдавать тебе минимальный элемент.
[02:17:07.760 --> 02:17:12.760]  Нет, это показывает просто то, что для любого такого, может существовать тест,
[02:17:12.760 --> 02:17:16.760]  который работает за квадрат, не более того.
[02:17:16.760 --> 02:17:18.760]  Понятно, что там...
[02:17:18.760 --> 02:17:20.760]  То есть, в принципе, если анализировать...
[02:17:20.760 --> 02:17:22.760]  Можно анализировать с вероятностью.
[02:17:22.760 --> 02:17:24.760]  Если у вас будет идеальный рандом, то...
[02:17:24.760 --> 02:17:25.760]  Ну, там дальше так.
[02:17:25.760 --> 02:17:31.760]  Простой анализ говорит, что математическое ожидание времени работы этого кусорта будет N-лога.
[02:17:31.760 --> 02:17:36.760]  Но на самом деле там есть более глубокие анализы, которые говорят о том, что вероятность того,
[02:17:36.760 --> 02:17:47.760]  что это по глубине будет глубже, чем 4 логарифмы или 16, вероятность будет крайне мала.
[02:17:48.760 --> 02:17:52.760]  То есть, там оценится, что это совсем-совсем крайне мала.
[02:17:52.760 --> 02:17:54.760]  Понятно, что как сделать этот алгоритм...
[02:17:54.760 --> 02:18:02.760]  Ну, нет, конкретно кусорт вам вряд ли рассказывать о вероятности, конечно,
[02:18:02.760 --> 02:18:08.760]  но в рубрике вероятностных алгоритмов мы, я думаю, это обсудим в той или иной степени.
[02:18:08.760 --> 02:18:15.760]  Ну вот, там же мы обсудим, что вот этот маленький брат, конечно,
[02:18:15.760 --> 02:18:20.760]  по матожеданию работает за линию.
[02:18:20.760 --> 02:18:24.760]  Ну и, конечно, еще отметим, что там, конечно, начинаются разные читы,
[02:18:24.760 --> 02:18:28.760]  то есть, на самом деле, потому что, как бы да, то есть, матожедание N-лога это круто,
[02:18:28.760 --> 02:18:34.760]  но тем не менее это не избавляет вас от вероятности того, что алгоритм будет работать не за N-лога.
[02:18:34.760 --> 02:18:37.760]  Но тут можно по-разному выкручиваться.
[02:18:37.760 --> 02:18:40.760]  То есть, конечно, тупой вариант, конечно, выкручиваться, просто говорим,
[02:18:40.760 --> 02:18:44.760]  так, даем время N-лога, чтобы ты отсортировал, ладно, там, сколько там матожедания?
[02:18:44.760 --> 02:18:47.760]  3 N-лога, ладно, даем тебе время 8 N-лога.
[02:18:47.760 --> 02:18:53.760]  И тогда идея, что если ты за 8 N-лога не завершился, ладно, тогда мы тебя обрубаем и начинаем заново.
[02:18:53.760 --> 02:19:00.760]  И еще раз, и еще раз, и еще раз, пока не успеешь.
[02:19:00.760 --> 02:19:03.760]  Нет, в принципе, это, кстати, не самый плохой вариант,
[02:19:03.760 --> 02:19:07.760]  потому что если у вас матожедание 3 N-лога, а вы ждете 8 N-лога,
[02:19:07.760 --> 02:19:16.760]  тогда вероятность того, что у вас за 8 N-лога не сойдется, она не превосходит 3 восьмых.
[02:19:16.760 --> 02:19:26.760]  Ну да, просто неравенство, это я тупо неравенство Маркова взял.
[02:19:26.760 --> 02:19:32.760]  Нет, там самый простой неравенство, который можно взять, 3 восьмых.
[02:19:32.760 --> 02:19:38.760]  А можно считать 6 N-лога, и тогда вероятность будет одна вторая, и это оценка сверху.
[02:19:38.760 --> 02:19:44.760]  То есть тогда это означает, что в среднем вы будете сходиться за O от единицы, на самом деле, операции.
[02:19:44.760 --> 02:19:47.760]  Но правда, проблема остается, да, согласен.
[02:19:47.760 --> 02:19:53.760]  Да, в принципе, скорее всего, в среднем...
[02:19:53.760 --> 02:19:57.760]  Но на самом деле, как вы стояли, поступают в этом месте по-другому.
[02:19:57.760 --> 02:20:04.760]  Они там просто говорят, что да, вот запускаем вот этот вот кусок, но если мы неожиданно поняли, что глубина рекурсии прям...
[02:20:04.760 --> 02:20:06.760]  Ну там два лайфхака.
[02:20:06.760 --> 02:20:14.760]  Говорят так, что если у вас массив размера не больше, чем, по-моему, 16, то мы его сортируем чем-то там.
[02:20:14.760 --> 02:20:17.760]  Вставками какими-то там, пузырьком или так далее.
[02:20:17.760 --> 02:20:22.760]  Потому что оказывается, что там квадратические сортировки бывают сильно лучше на маленьких массивах,
[02:20:22.760 --> 02:20:26.760]  потому что они в массивах просто по константе выигрывают, чем вот это вот безобразие с рекурсией.
[02:20:26.760 --> 02:20:28.760]  Или там хипы еще какие-то и так далее.
[02:20:28.760 --> 02:20:30.760]  Вот, это один лайфхак.
[02:20:30.760 --> 02:20:32.760]  Но второй лайфхак.
[02:20:32.760 --> 02:20:38.760]  То есть маленький массивчик будет просто быстренько внутри себя посортирован и уйдем.
[02:20:38.760 --> 02:20:45.760]  Но если там выяснится, что вы очень глубоко ушли в рекурсию, очень глубоко, что типа два алгоритма или еще куда-то,
[02:20:45.760 --> 02:20:51.760]  то на этот раз алгоритм останавливается и мы его досортироваем хип-сортом.
[02:20:52.760 --> 02:20:53.760]  Вот.
[02:20:53.760 --> 02:20:57.760]  То есть это реально, что пропагандируется в Estee Lauder.
[02:20:57.760 --> 02:21:03.760]  Вот, ну не знаю, там требуется ли в стандарте, чтобы там в STD-сорте было написано именно это.
[02:21:03.760 --> 02:21:05.760]  Но чаще всего пишут так.
[02:21:05.760 --> 02:21:07.760]  Почему пишут так?
[02:21:07.760 --> 02:21:09.760]  Почему бы, действительно, оказалось бы, если вы хотели...
[02:21:09.760 --> 02:21:14.760]  То есть требуется, конечно, чтобы сортировка железо-бетонно работала за N-логан.
[02:21:14.760 --> 02:21:17.760]  Возникает вопрос, почему не написать какой-нибудь тип-сорт вообще?
[02:21:18.760 --> 02:21:19.760]  Константа огромная.
[02:21:19.760 --> 02:21:20.760]  Да, почему мертв?
[02:21:20.760 --> 02:21:22.760]  Но у мержа есть недостаток.
[02:21:22.760 --> 02:21:24.760]  Он требует дополнительной памяти.
[02:21:24.760 --> 02:21:28.760]  Или очень-очень-очень больших страданий, чтобы ее избежать.
[02:21:28.760 --> 02:21:34.760]  Вот, видимо, возможно, в следующий раз мы еще и обсудим, каких конкретно страданий.
[02:21:34.760 --> 02:21:36.760]  Вот.
[02:21:36.760 --> 02:21:41.760]  В принципе, можно мерш-сорт реализовать за вот единицу допамяти, но это будет больно.
[02:21:43.760 --> 02:21:44.760]  Чего?
[02:21:44.760 --> 02:21:49.760]  Там есть in-place-merge.
[02:21:49.760 --> 02:21:52.760]  Специально, отдельно выделенные, которые работают за вот единицы памяти.
[02:21:52.760 --> 02:21:54.760]  Но помните, он жирнее.
[02:21:54.760 --> 02:21:55.760]  По Константе.
[02:21:55.760 --> 02:21:59.760]  То есть STL предоставляет вам возможность самим выбирать, чем вы готовы пожертвовать.
[02:21:59.760 --> 02:22:01.760]  Памятью или временем.
[02:22:01.760 --> 02:22:02.760]  Вот.
[02:22:02.760 --> 02:22:10.760]  То есть, кстати, ровно по этой причине иногда на самом деле STL не делает всего того, что можно.
[02:22:11.760 --> 02:22:19.760]  Могли, наверное, задуматься на тему того, почему вектора, например, работы с памяти нет.
[02:22:19.760 --> 02:22:24.760]  Почему они только расширяют, но не сужают, например.
[02:22:24.760 --> 02:22:25.760]  Казалось бы, логично.
[02:22:25.760 --> 02:22:28.760]  Но, на самом деле, сложно сказать, почему конкретно в данном случае.
[02:22:28.760 --> 02:22:35.760]  Но суть такая, что во всех случаях там, видимо, комитет сидел, рассматривал плюсы и минусы и выбрал вот такую реализацию.
[02:22:36.760 --> 02:22:37.760]  Вот.
[02:22:37.760 --> 02:22:38.760]  Потому что нет.
[02:22:38.760 --> 02:22:42.760]  Самый эпический пример, на самом деле, с которым, я думаю, от которого страдали многие олимпиадники.
[02:22:42.760 --> 02:22:43.760]  Там отчасти.
[02:22:43.760 --> 02:22:46.760]  В STD-сете нет понятия найти кат-элемент.
[02:22:48.760 --> 02:22:50.760]  То есть, надо писать, либо вписать свой...
[02:22:50.760 --> 02:22:51.760]  Нет.
[02:22:51.760 --> 02:22:57.760]  Свой дикартак, слава богу, писать не обязательно, потому что там в гнусных версиях C++, не гнусных, а гнусных, не путать.
[02:22:58.760 --> 02:23:05.760]  Значит, там так называемое расширение называется Policy Based Data Structures или PBDS.
[02:23:05.760 --> 02:23:15.760]  И в них есть какие-то обертки, какие-то более продвинутые версии сетак, которые можно поднастраивать и отдать в стандартных строек.
[02:23:18.760 --> 02:23:19.760]  Ну, почему?
[02:23:22.760 --> 02:23:24.760]  Выучить или записать в ТИМ ноутбук можно.
[02:23:24.760 --> 02:23:32.760]  Так что, ну да, то есть, конечно, может быть глобально бывает оптимальный дикартак, потому что в дикартаке вы можете буквально сделать все.
[02:23:33.760 --> 02:23:35.760]  Ну, то есть, знаете, это классический анекдот.
[02:23:35.760 --> 02:23:39.760]  Как говорится, это называется в GEN2 Linux, вы можете сделать все своими руками.
[02:23:39.760 --> 02:23:43.760]  Более того, вы будете делать все своими руками.
[02:23:45.760 --> 02:23:48.760]  Но нет, в принципе, свои преимущества это действительно умеет.
[02:23:48.760 --> 02:23:51.760]  Вы можете сделать все, что хотите.
[02:23:51.760 --> 02:23:53.760]  Но правда все это мелочи придется делать самостоятельно.
[02:23:53.760 --> 02:23:56.760]  То есть, понятно, есть другой подход популярный в программировании.
[02:23:56.760 --> 02:24:02.760]  Я помню один из преподавателей там по одному из прибетов говорил вообще, что замечательно.
[02:24:02.760 --> 02:24:05.760]  Чем отличается хороший программист от плохого?
[02:24:05.760 --> 02:24:10.760]  Хороший программист знает в отличие от плохого, что все, что можно было реализовать, уже давно реализовали.
[02:24:10.760 --> 02:24:13.760]  А чем отличается отличный программист от хорошего?
[02:24:13.760 --> 02:24:15.760]  Отличный знает, откуда достать.
[02:24:16.760 --> 02:24:17.760]  Вот.
[02:24:17.760 --> 02:24:21.760]  То есть, в принципе, такой подход, особенно во многих промышленных областях,
[02:24:21.760 --> 02:24:23.760]  в общем, действительно применим.
[02:24:23.760 --> 02:24:26.760]  Потому что это срогие изобретения велосипедов.
[02:24:26.760 --> 02:24:28.760]  Скорее всего там, действительно.
[02:24:28.760 --> 02:24:29.760]  То есть, чаще всего вам...
[02:24:32.760 --> 02:24:37.760]  Потому что, опять же, по причине черной ящиковости.
[02:24:37.760 --> 02:24:41.760]  Потому что это структура данных, которая умеет вот это, это, это.
[02:24:41.760 --> 02:24:43.760]  По-хорошему вам не нужно знать, что это какое-то там дерево.
[02:24:43.760 --> 02:24:44.760]  Дерево какое-то там.
[02:24:46.760 --> 02:24:47.760]  Да?
[02:24:47.760 --> 02:24:48.760]  Да ладно.
[02:24:48.760 --> 02:24:49.760]  По стандарту?
[02:24:49.760 --> 02:24:55.760]  Я думаю, так, по стандарту регламентировано, что там есть требования, что там все должно работать за лжарифом.
[02:24:55.760 --> 02:24:59.760]  И не сильно много жрет до памяти.
[02:25:04.760 --> 02:25:05.760]  Так, ребят, во-первых.
[02:25:08.760 --> 02:25:09.760]  Так, да.
[02:25:10.760 --> 02:25:11.760]  Вот.
[02:25:11.760 --> 02:25:14.760]  Ну, то есть, ну, то есть, далее, нет, ну, далее, отдельная, да.
[02:25:14.760 --> 02:25:19.760]  Да, на всякий случай еще напоминаю, что, собственно, вас снимает эта не особо скрытая камера.
[02:25:19.760 --> 02:25:21.760]  На всякий случай, да.
[02:25:23.760 --> 02:25:24.760]  Вот.
[02:25:24.760 --> 02:25:25.760]  Привет, Ютуб.
[02:25:25.760 --> 02:25:26.760]  Ну, да.
[02:25:27.760 --> 02:25:28.760]  Ну, в принципе, да, да, да.
[02:25:28.760 --> 02:25:30.760]  Подписывайтесь там, да, ставьте лайки.
[02:25:30.760 --> 02:25:31.760]  Да, да, да.
[02:25:31.760 --> 02:25:32.760]  Мы помним.
[02:25:32.760 --> 02:25:33.760]  Там пять просмотров.
[02:25:33.760 --> 02:25:34.760]  Вот.
[02:25:34.760 --> 02:25:37.760]  Мне кажется, после двух с половиной часов...
[02:25:37.760 --> 02:25:39.760]  Ну, после, ну, да.
[02:25:39.760 --> 02:25:42.760]  Ну, знаете, ближе к экзаменам количество просмотров, наверное, увеличится.
[02:25:42.760 --> 02:25:43.760]  Да.
[02:25:43.760 --> 02:25:44.760]  Но это неважно.
[02:25:44.760 --> 02:25:46.760]  Ладно, важно, но важно, на самом деле, другое.
[02:25:46.760 --> 02:25:49.760]  То есть, там, ну, на самом деле, там не совсем все равно.
[02:25:49.760 --> 02:25:53.760]  Потому что там многие деревья, то есть, многие деревья, на самом деле, туда не пойдут.
[02:25:53.760 --> 02:25:57.760]  Скажем, дикартачи, на самом деле, в сплей, то есть, в сет встануть нельзя.
[02:25:58.760 --> 02:25:59.760]  Почему дикартачи?
[02:25:59.760 --> 02:26:01.760]  Потому что дикартачи скотина вероятностная.
[02:26:02.760 --> 02:26:03.760]  Чего?
[02:26:04.760 --> 02:26:05.760]  В принципе, да.
[02:26:07.760 --> 02:26:08.760]  Возможно.
[02:26:08.760 --> 02:26:10.760]  Кстати, возможно.
[02:26:11.760 --> 02:26:13.760]  Зачем ты продолжаешь накидывать идеи?
[02:26:14.760 --> 02:26:15.760]  Да.
[02:26:15.760 --> 02:26:17.760]  Не, ну ладно, это идея, но это идея не новая.
[02:26:17.760 --> 02:26:18.760]  Ладно.
[02:26:19.760 --> 02:26:20.760]  Вот.
[02:26:21.760 --> 02:26:22.760]  Не.
[02:26:22.760 --> 02:26:23.760]  Ну, нет.
[02:26:23.760 --> 02:26:24.760]  Ну, персидент это два-три дерева.
[02:26:24.760 --> 02:26:25.760]  Да, надо.
[02:26:25.760 --> 02:26:27.760]  В сердце как-то в сердце был прикол, что надо было там написать персидент это 2-3 дерева,
[02:26:27.760 --> 02:26:28.760]  чтобы получить 100 баллов.
[02:26:28.760 --> 02:26:29.760]  По-моему, никто это не сделал.
[02:26:29.760 --> 02:26:33.760]  Но это типичный пример хорошей задачи, в которой, как бы, на разборе, там, в том
[02:26:33.760 --> 02:26:36.760]  числе и все, в том числе и лидер узнает там много, там много нового интересного.
[02:26:36.760 --> 02:26:38.760]  Так что нет, это хорошая идея была.
[02:26:38.760 --> 02:26:39.760]  Это они молодцы, что сделали.
[02:26:40.760 --> 02:26:41.760]  Вот.
[02:26:42.760 --> 02:26:43.760]  Да.
[02:26:43.760 --> 02:26:44.760]  Вот.
[02:26:44.760 --> 02:26:48.760]  Но там просто я к тому, что подойдет только, то есть надо там, то есть в СЭТ тогда
[02:26:48.760 --> 02:26:52.760]  ВЛ, то есть подойдет только дерево, у которого логарифм железобетонный.
[02:26:53.760 --> 02:26:55.760]  То есть, скорее всего, даже сплей дерева, я думаю, не подойдет.
[02:26:56.760 --> 02:26:57.760]  Вот.
[02:26:58.760 --> 02:27:00.760]  Да не стоит так, господи.
[02:27:01.760 --> 02:27:02.760]  Так.
[02:27:02.760 --> 02:27:04.760]  О чем мы говорили вообще, да?
[02:27:04.760 --> 02:27:05.760]  Да.
[02:27:07.760 --> 02:27:08.760]  Да.
[02:27:08.760 --> 02:27:09.760]  Давайте.
[02:27:09.760 --> 02:27:10.760]  Нет.
[02:27:10.760 --> 02:27:11.760]  Ну, как сказать это?
[02:27:11.760 --> 02:27:13.760]  Эти вещи тоже, на самом деле, в том или ином виде в какой-то момент придется
[02:27:13.760 --> 02:27:14.760]  все равно обсуждать.
[02:27:14.760 --> 02:27:17.760]  Так что не то, чтобы мы прям принципиально время тратим, на самом деле.
[02:27:17.760 --> 02:27:18.760]  Вот.
[02:27:19.760 --> 02:27:22.760]  То есть, как бы, да, вещи такое.
[02:27:22.760 --> 02:27:23.760]  Значит, смотрите.
[02:27:23.760 --> 02:27:25.760]  Но тут у нас вот теперь задача.
[02:27:25.760 --> 02:27:26.760]  Как избавиться от рандома?
[02:27:27.760 --> 02:27:32.760]  Вот мне хочется найти как-то порядку статистику, но не думать о том, что там с какой-то вероятностью,
[02:27:32.760 --> 02:27:36.760]  что мне может не повести там и, собственно, будет все плохо.
[02:27:37.760 --> 02:27:40.760]  То есть, я хочу, я хочу чего-то железобетонного.
[02:27:41.760 --> 02:27:42.760]  Так вот.
[02:27:43.760 --> 02:27:48.760]  Но тут, правда, да, за это отсутствие рандома мы, конечно, платим приличной константой.
[02:27:49.760 --> 02:27:52.760]  И требованием выучить пять фамилия авторов.
[02:27:53.760 --> 02:28:00.760]  Ибо изучать мы сейчас будем алгоритм Блюма, Флойда, Пратта, Ривиста, Тариана.
[02:28:00.760 --> 02:28:03.760]  Если я никакую фамилию не перепутал.
[02:28:06.760 --> 02:28:07.760]  Да.
[02:28:08.760 --> 02:28:09.760]  Ну, я не знаю.
[02:28:09.760 --> 02:28:11.760]  Вот я не знаю, кто там первым автором стоит, если честно.
[02:28:13.760 --> 02:28:14.760]  Ну да.
[02:28:15.760 --> 02:28:16.760]  Пять.
[02:28:17.760 --> 02:28:18.760]  Да.
[02:28:18.760 --> 02:28:22.760]  Ну, я, ну, Тарья, ну, Тарья у нас в какой-то момент вообще хедлайером станет.
[02:28:22.760 --> 02:28:26.760]  Особенно когда мы там в графы пойдем, там просто без него вообще практически ничего не обойдет.
[02:28:27.760 --> 02:28:31.760]  Ну, Блюм это известный человек, потому что есть такая штука, как фильтр Блюма, на самом деле, кто-то.
[02:28:33.760 --> 02:28:41.760]  То есть фильтр Блюма, это знаете, как быстро, то есть если у вас там иногда задача бывает, как быстро проверить там, если у вас множество какой-то элемента,
[02:28:41.760 --> 02:28:45.760]  это означает, что вы читаете его хэш и в таблице помечаете, что этот хэш есть.
[02:28:45.760 --> 02:28:46.760]  Там в массивчике просто.
[02:28:47.760 --> 02:28:50.760]  И тогда получается очень быстро, что как бы если такого хэша нет, значит элемента нет.
[02:28:50.760 --> 02:28:51.760]  То есть такой быстрый тест.
[02:28:52.760 --> 02:28:54.760]  Понятно, односторонний, но как бы тоже помогает.
[02:28:54.760 --> 02:29:00.760]  То есть есть там несколько уровней фильтра Блюма, когда таких таблиц вы строите несколько с разными хэшами.
[02:29:00.760 --> 02:29:03.760]  То есть если хотя бы одного хэша нет, значит вы вылетели.
[02:29:03.760 --> 02:29:05.760]  То есть в принципе такой бывает удобно.
[02:29:09.760 --> 02:29:14.760]  Ну да, ну Флойда мы тоже знаем по алгоритму Флойда Уотшелла, да, более известного как алгоритм.
[02:29:16.760 --> 02:29:18.760]  Так, да, Пратта, где мы знаем Пратта?
[02:29:18.760 --> 02:29:23.760]  Да, есть алгоритм Кнута Мориса Пратта, да, более известная как поиск префикс функции, это да.
[02:29:24.760 --> 02:29:26.760]  Так, вот тут Ривист, интересно, или кто-то еще?
[02:29:30.760 --> 02:29:31.760]  Да.
[02:29:31.760 --> 02:29:36.760]  Не, у меня первая ассоциация, это один из авторов книжки про Кормана, книжки Кормана.
[02:29:36.760 --> 02:29:38.760]  Не про Кормана, да, Кормана.
[02:29:39.760 --> 02:29:43.760]  Ну и конечно его величество Торьянда, Роберт Эндре Торьянда.
[02:29:43.760 --> 02:29:51.760]  Да, Роберт Эндре Торьянда, как-то самое, да, в чем знаете, в чем действительно, он просто да, очень, да, очень много.
[02:29:51.760 --> 02:29:54.760]  Да, он автор, кстати, Кучи Фибоначи, как следует из названия, да.
[02:29:57.760 --> 02:30:01.760]  Да, нет, он, нет, но также он автор там дерева доминаторов на самом деле.
[02:30:01.760 --> 02:30:05.760]  А, но также он, по-моему, автор первой возможно содержательной статьи про ДФС.
[02:30:05.760 --> 02:30:07.760]  Ну по примеру, которую я знаю, может есть раньше.
[02:30:07.760 --> 02:30:10.760]  Первая линия алгоритма поиска про Эль Геракта.
[02:30:10.760 --> 02:30:15.760]  А, да, ой, этого я уже не знаю, но вот значит вот много чего у него есть, так что такое.
[02:30:15.760 --> 02:30:16.760]  Все в этом случае сада.
[02:30:16.760 --> 02:30:21.760]  Самый, да, самый радостный вопрос на самом деле в этом плане у меня, кстати, в каком году умер Торьян.
[02:30:23.760 --> 02:30:25.760]  Да, вот именно по этому вопросу радости.
[02:30:25.760 --> 02:30:27.760]  Да, он, собственно, жив и работает, да.
[02:30:27.760 --> 02:30:31.760]  То есть понятно ему там, по-моему, 80 лет, по-моему, там уже, но он...
[02:30:32.760 --> 02:30:34.760]  Нет, он постоянно статьи выпускает.
[02:30:34.760 --> 02:30:38.760]  Знаете, забавно там в 2012 году была там у него статья в САВТОКСе.
[02:30:38.760 --> 02:30:40.760]  Видимо, какой-то ученик, который там...
[02:30:40.760 --> 02:30:45.760]  Видимо, статья занималась тем, что куча фибоначи доводилась до, собственно, не амортизированной версии.
[02:30:45.760 --> 02:30:47.760]  По-моему, куча продала...
[02:30:47.760 --> 02:30:48.760]  Нет, не путайся, нет.
[02:30:48.760 --> 02:30:50.760]  Нет, да, потому что, да.
[02:30:51.760 --> 02:30:56.760]  Нет, ну да, нет, куча продала касаки, да, это 96-го года, но это как бы другая структура данных.
[02:30:56.760 --> 02:31:00.760]  Да, а тут как бы, видимо, задача была, чтобы именно кучу фибоначи допилить.
[02:31:01.760 --> 02:31:04.760]  Но куча продала касаки, она же может все тоже самое...
[02:31:04.760 --> 02:31:06.760]  Ну да, ну видимо, да.
[02:31:07.760 --> 02:31:08.760]  Вряд ли.
[02:31:09.760 --> 02:31:11.760]  Нет, ну как сказать, знаете, очень много бы хотелось,
[02:31:11.760 --> 02:31:12.760]  что времени у нас не так много.
[02:31:12.760 --> 02:31:15.760]  На самом деле программа уже, на самом деле, забита очень вообще веселыми вещами,
[02:31:15.760 --> 02:31:18.760]  которые там более надо знать, хотя в принципе...
[02:31:20.760 --> 02:31:24.760]  Нет, в какой-то момент можно развлечь там, знаете, там много какие алгоритмы можно изучать.
[02:31:24.760 --> 02:31:25.760]  Ладно.
[02:31:26.760 --> 02:31:30.760]  Но если мы сейчас будем все это обсуждать, вот именно поэтому времени, в общем-то, и не хватает.
[02:31:32.760 --> 02:31:34.760]  У нас будут типа алгоритмы на выбор.
[02:31:35.760 --> 02:31:36.760]  На чем?
[02:31:36.760 --> 02:31:38.760]  Алгоритмы на выбор реализовать одной из структур.
[02:31:39.760 --> 02:31:40.760]  Возможно.
[02:31:41.760 --> 02:31:42.760]  Вот так вот.
[02:31:42.760 --> 02:31:44.760]  Значит, так алгоритм вот этих вот пяти товарищей.
[02:31:44.760 --> 02:31:47.760]  Значит, да, и собрались эти вот пять, в общем-то,
[02:31:47.760 --> 02:31:49.760]  давайте серьезных имен.
[02:31:49.760 --> 02:31:51.760]  А поэтому там по пять элементов.
[02:31:51.760 --> 02:32:06.760]  Ну, наверное, не поэтому, но давайте, ладно, сейчас для тех, кто не знает, давайте расскажем.
[02:32:06.760 --> 02:32:08.760]  Что имеется в виду?
[02:32:08.760 --> 02:32:11.760]  Мы эти, как вы это все делаете?
[02:32:11.760 --> 02:32:12.760]  Делаем очень просто.
[02:32:12.760 --> 02:32:15.760]  Мы делим массив на блоки по пять элементов.
[02:32:16.760 --> 02:32:19.760]  Ну, если количество элементов не делится на пять,
[02:32:19.760 --> 02:32:23.760]  ну, как бы без потери асимботики, это решается там энцитю способами.
[02:32:23.760 --> 02:32:28.760]  Можно там мысленно последний блок докинуть там, добить до пяти, чтобы там было плюс бесконечность.
[02:32:28.760 --> 02:32:32.760]  Но я бы предпочел, конечно, нет, я бы предпочел другое.
[02:32:32.760 --> 02:32:38.760]  Я бы предпочел просто пробежаться по массиву и найти там нужное количество максимумов там от нуля до четырех.
[02:32:40.760 --> 02:32:47.760]  И после этого спокойно считать, что имеющийся у нас размер массива делится там это число, делящиеся на пять.
[02:32:49.760 --> 02:32:51.760]  Так вот, идея такая.
[02:32:52.760 --> 02:32:55.760]  Пробежимся по всем вот этим вот пятеркам.
[02:32:58.760 --> 02:33:02.760]  Каждую из них отсортируем, например.
[02:33:03.760 --> 02:33:06.760]  Ну, можно вот допустим отсортируем.
[02:33:14.760 --> 02:33:18.760]  И соответственно, это помогает там в каждой пятерке найти медиану.
[02:33:18.760 --> 02:33:21.760]  Ну, в принципе, можно просто сказать, давайте в каждой пятерке найдем медиан.
[02:33:21.760 --> 02:33:28.760]  Это понятно, будет завод единицы, независимо от того, будете ли вы делать это сортировка или там какими-то еще методами.
[02:33:36.760 --> 02:33:43.760]  Итак, у нас тогда появится n поделить на пять медиан.
[02:33:43.760 --> 02:33:58.760]  Ну, давайте будем считать, что неполных блоков нет, потому что неполный блок, то есть если у нас там будет неполный блок размера три, мы от него избавимся, просто пробежавшись три раза по массиву и найти три максимума.
[02:33:59.760 --> 02:34:02.760]  Там поместя их, собственно, в конец массива и все.
[02:34:02.760 --> 02:34:15.760]  Может быть, это с точки зрения какой-то именно технической реализации, может быть, это не самый оптимальный вариант, но как бы математически можно и так.
[02:34:16.760 --> 02:34:21.760]  Вот, ну, математически, правда, можно и суфмассу коненном за линию строить, да, но это уже там.
[02:34:23.760 --> 02:34:28.760]  Так вот, значит, идея такая, у нас теперь есть n поделить на пять медиан.
[02:34:28.760 --> 02:34:38.760]  Так вот, в этом месте мы вызываем этот алгоритм рекурсивно.
[02:34:39.760 --> 02:34:52.760]  Мы пишем, значит, мы хотим, значит, q order statistics, говорим мы, от вот этого вот массива медиан размера n поделить на пять.
[02:34:52.760 --> 02:35:00.760]  И мы хотим в этом массиве найти медиану, то есть, так сказать, медиану медиан.
[02:35:01.760 --> 02:35:07.760]  То есть, выражаясь питоновским языком, k равно n поделить на 10.
[02:35:08.760 --> 02:35:11.760]  На питоне можно так писать, это, конечно, классно.
[02:35:12.760 --> 02:35:18.760]  Это вам не эти ваши ищи, да, с плюсами или без.
[02:35:18.760 --> 02:35:23.760]  Вот, и так у вас нашлась какая-то медиана.
[02:35:26.760 --> 02:35:30.760]  Теперь идея такая, значит, вы нашли этот элемент, он равен x.
[02:35:31.760 --> 02:35:40.760]  Ну, тогда идея такая, ну, тогда утверждайте, что после этого надо просто, значит, вызвать capartition действительно с этим x.
[02:35:40.760 --> 02:35:47.760]  Ну, это да, вот этот вот механизм провернуть.
[02:35:48.760 --> 02:35:55.760]  То есть, разбить элементы на меньше этого элемента и больше этого элемента и от нужной половины сделать второй q order statistics.
[02:35:57.760 --> 02:35:59.760]  Ну, понятно, в нужную сторону, понятно, да?
[02:36:02.760 --> 02:36:04.760]  То есть, вот такой алгоритм.
[02:36:05.760 --> 02:36:09.760]  То есть, алгоритм подозревает два рекурсивных вызова q order statistics.
[02:36:10.760 --> 02:36:15.760]  То есть, первый для поиска медианы, а второй поиск уже с какой-то кашкой или ее модификацией.
[02:36:17.760 --> 02:36:18.760]  Вот, понятно?
[02:36:19.760 --> 02:36:20.760]  Вот.
[02:36:23.760 --> 02:36:25.760]  Но возникает естественный вопрос.
[02:36:26.760 --> 02:36:28.760]  За какую асимптотику это работает?
[02:36:29.760 --> 02:36:30.760]  Мы завершили развивку объяснения?
[02:36:31.760 --> 02:36:32.760]  Да.
[02:36:33.760 --> 02:36:35.760]  Значит, мы делаем медиан и медиан.
[02:36:36.760 --> 02:36:45.760]  Делим массивы, располагаем там, перепорядочиваем массив так, что сначала элементы идут там, значит, там меньше этого x, значит, снова x и тут больше x.
[02:36:46.760 --> 02:36:47.760]  Тоже за линию делаем, да?
[02:36:48.760 --> 02:36:53.760]  И после этого запускаем второй q order statistics уже для нахождения ответа от нужной из частей.
[02:36:54.760 --> 02:36:59.760]  Ну, или если повезет этот алгоритм и этот элемент оказался cut, ну, значит, выбрасываем все с криком ура.
[02:36:59.760 --> 02:37:00.760]  Ну, в смысле с криком x, конечно.
[02:37:06.760 --> 02:37:07.760]  Вот.
[02:37:09.760 --> 02:37:14.760]  Так что вот такая красота. То есть, нам иногда может вести, а может не вести.
[02:37:17.760 --> 02:37:20.760]  Да, это было бы хорошо выйти из-под две камеры. Было, конечно, да.
[02:37:22.760 --> 02:37:24.760]  Но знаете, классик, журналисты это...
[02:37:24.760 --> 02:37:33.760]  Журналисты это люди, которые профессионально делят любую фразу на две части, чтобы вторую часть сказать другую камеру.
[02:37:34.760 --> 02:37:35.760]  Ну, вот эта классика такая, да.
[02:37:41.760 --> 02:37:43.760]  Так, а вот интересный тест. Ну-ка, поднимите руки.
[02:37:44.760 --> 02:37:45.760]  Кто знает, откуда я эту шутку взял?
[02:37:45.760 --> 02:37:47.760]  Ну, да. Да, ну, КВН можно поднимать пальцем тосом, да.
[02:37:48.760 --> 02:37:51.760]  Может более глубокий вопрос. Какая команда это сказала, да?
[02:37:54.760 --> 02:37:58.760]  Не, как есть, не. Не, ну, как есть, это не фистись, это...
[02:38:00.760 --> 02:38:02.760]  Ладно. Нет, ну, если твердая, так.
[02:38:03.760 --> 02:38:07.760]  Я уж забыл, как команда этих девочек называть. А, без баб они называются почему-то.
[02:38:09.760 --> 02:38:10.760]  Хотя я не знаю, почему.
[02:38:10.760 --> 02:38:12.760]  Главное, команда вообще выглядит совершенно не так, как вы сейчас можете вообразить.
[02:38:13.760 --> 02:38:16.760]  Потому что четыре очень, вообще, очень интеллигентные, симпатичные девушки, на самом деле.
[02:38:17.760 --> 02:38:21.760]  Нет, пока, да, пока, к сожалению, не дотянули до высокого уровня, там, но...
[02:38:22.760 --> 02:38:25.760]  Ну, вот, но как бы рекомендую, если что, на самом деле вам понравится.
[02:38:26.760 --> 02:38:27.760]  Мне кажется. Ладно.
[02:38:28.760 --> 02:38:29.760]  Окей.
[02:38:30.760 --> 02:38:31.760]  Ладно.
[02:38:32.760 --> 02:38:33.760]  Ладно, по-настоящему.
[02:38:34.760 --> 02:38:35.760]  Поняли, что значит, ладно.
[02:38:36.760 --> 02:38:37.760]  Значит, окей, КВН никто не смотрит.
[02:38:38.760 --> 02:38:39.760]  Значит, можно использовать шутки.
[02:38:41.760 --> 02:38:42.760]  Ну, или, ну, впрочем, неважно.
[02:38:43.760 --> 02:38:44.760]  Вот. Ладно.
[02:38:46.760 --> 02:38:48.760]  Значит, смотри, значит, соответственно.
[02:38:49.760 --> 02:38:51.760]  Теперь давайте думать, почему этот алгоритм работает за линию.
[02:38:53.760 --> 02:38:56.760]  Да, ну, потому что, в принципе, особенно, если не заморачиваться, то, что мы делаем,
[02:38:57.760 --> 02:39:00.760]  то, что мы делаем, то, что мы делаем, то, что мы делаем, то, что мы делаем, то, что мы делаем.
[02:39:00.760 --> 02:39:05.760]  Да, ну, потому что, в принципе, особенно, если не заморачиваться об прям округлении какие-то, да.
[02:39:06.760 --> 02:39:09.760]  Да, он у нас работает, что время работает, ТАТ.
[02:39:10.760 --> 02:39:11.760]  Получается...
[02:39:12.760 --> 02:39:13.760]  Как он работает? Давайте так.
[02:39:14.760 --> 02:39:16.760]  ТАТ равно Т от N поделить на 5.
[02:39:17.760 --> 02:39:19.760]  Ну, да, можно округлить вниз при желании.
[02:39:20.760 --> 02:39:21.760]  Не то же самое.
[02:39:22.760 --> 02:39:23.760]  Не то же самое.
[02:39:24.760 --> 02:39:25.760]  Тоже.
[02:39:26.760 --> 02:39:27.760]  Ну, давайте оценивать время.
[02:39:27.760 --> 02:39:30.760]  А потом у нас будет это максимальное время работы с массивами от N операции,
[02:39:31.760 --> 02:39:32.760]  независимо от того, какое К берем.
[02:39:33.760 --> 02:39:35.760]  То есть, по всем К тоже максимум выбираем.
[02:39:36.760 --> 02:39:40.760]  Плюс какое-то что-то мы делаем за О от N, вот эти вот партишины, да.
[02:39:41.760 --> 02:39:42.760]  Плюс Т от...
[02:39:43.760 --> 02:39:44.760]  Чего?
[02:39:46.760 --> 02:39:48.760]  А вот тут оказывается интересный момент.
[02:39:49.760 --> 02:39:50.760]  А теперь давайте думать, да.
[02:39:51.760 --> 02:39:52.760]  Просто зачем мы все это делали?
[02:39:53.760 --> 02:39:54.760]  Понятно, что если бы нам будет не вести...
[02:39:54.760 --> 02:39:58.760]  Если будет оказываться N минус 1, то мы так жестко пофейлимся.
[02:39:59.760 --> 02:40:00.760]  Но...
[02:40:00.760 --> 02:40:01.760]  Так, тихо, тихо, тихо.
[02:40:02.760 --> 02:40:03.760]  Так, смотрите.
[02:40:04.760 --> 02:40:05.760]  Оказывается, примеры следующие.
[02:40:06.760 --> 02:40:08.760]  Давайте мысленно эти медианы отсортируем.
[02:40:09.760 --> 02:40:10.760]  Подчеркиваю, мысленно.
[02:40:11.760 --> 02:40:14.760]  То есть, в реальности их, естественно, отсортировать никто не будет.
[02:40:15.760 --> 02:40:19.760]  И тогда вот у нас возник вот этот вот мистический Х.
[02:40:20.760 --> 02:40:21.760]  Тогда, смотрите.
[02:40:21.760 --> 02:40:25.760]  Оказывается, что есть тогда целый вот этот вот блок элементов,
[02:40:26.760 --> 02:40:28.760]  которые меньше либо равны Х.
[02:40:30.760 --> 02:40:32.760]  И сколько в этом блоке элементов?
[02:40:35.760 --> 02:40:36.760]  Ну, примерно.
[02:40:37.760 --> 02:40:38.760]  Ну, примерно там плюс-минус.
[02:40:39.760 --> 02:40:40.760]  Значит, N поделить...
[02:40:41.760 --> 02:40:45.760]  То есть, ну, во-первых, тут массивов тут примерно N поделить на 10.
[02:40:46.760 --> 02:40:47.760]  И в каждом...
[02:40:47.760 --> 02:40:48.760]  И в каждом...
[02:40:50.760 --> 02:40:51.760]  Ну вот, и в каждом по три элемента.
[02:40:52.760 --> 02:40:53.760]  То есть, получается, умножаем на 3.
[02:40:54.760 --> 02:40:55.760]  Получается, 3 десятых N.
[02:40:56.760 --> 02:40:58.760]  То есть, получается, слева как бы...
[02:40:59.760 --> 02:41:03.760]  То есть, тут получается, слева будет как минимум 3 десятых N элементов.
[02:41:06.760 --> 02:41:09.760]  Но по абсолютно аналогичным причинам.
[02:41:10.760 --> 02:41:13.760]  И справа будет хотя бы 3 десятых N элемента.
[02:41:14.760 --> 02:41:20.760]  Тогда это означает, что t здесь смело могу писать 7 десятых N.
[02:41:23.760 --> 02:41:25.760]  То есть, это такая еще верхняя оценка.
[02:41:26.760 --> 02:41:27.760]  То есть, вот так можно.
[02:41:28.760 --> 02:41:29.760]  Вот так, меньше либо равно можно писать.
[02:41:36.760 --> 02:41:37.760]  Да, вот хороший вопрос.
[02:41:38.760 --> 02:41:40.760]  Хотя, конечно, в данном случае, наверное, придется поверить.
[02:41:41.760 --> 02:41:42.760]  Ну вот.
[02:41:44.760 --> 02:41:45.760]  Так.
[02:41:46.760 --> 02:41:47.760]  Но давайте так.
[02:41:48.760 --> 02:41:51.760]  Если мы поверим, что вот этот вот O от N для N будет больше, чем для N-1,
[02:41:52.760 --> 02:41:54.760]  то, в принципе, можно доказать по индукции, наверное.
[02:41:55.760 --> 02:41:56.760]  Хотя...
[02:42:01.760 --> 02:42:02.760]  Ну да.
[02:42:03.760 --> 02:42:04.760]  Заметим, что тут может быть реально максимум.
[02:42:05.760 --> 02:42:06.760]  Тоже можно тесты подгонять.
[02:42:10.760 --> 02:42:11.760]  Ну да.
[02:42:11.760 --> 02:42:12.760]  Но на самом деле неважно.
[02:42:13.760 --> 02:42:14.760]  Пока оцениваем, на самом деле неважно.
[02:42:15.760 --> 02:42:16.760]  Да.
[02:42:17.760 --> 02:42:18.760]  Нет, ну нет.
[02:42:19.760 --> 02:42:20.760]  Правильно было отмечено, что...
[02:42:22.760 --> 02:42:24.760]  Что тут на самом деле правильно писать, что t от N равно
[02:42:25.760 --> 02:42:27.760]  всегда t от N поделить на 5, плюс O от N, плюс t от чего-то
[02:42:28.760 --> 02:42:29.760]  не происходящего 7 десятых N.
[02:42:30.760 --> 02:42:32.760]  Если только внимание вопрос, почему меньше либо равно отсюда,
[02:42:33.760 --> 02:42:34.760]  можно перенести сюда.
[02:42:35.760 --> 02:42:36.760]  Да, правильный вопрос.
[02:42:37.760 --> 02:42:38.760]  Но мы, пожалуй, забьем на него.
[02:42:38.760 --> 02:42:40.760]  Хотя, конечно, формально можно попредираться.
[02:42:41.760 --> 02:42:42.760]  Вот.
[02:42:43.760 --> 02:42:44.760]  Ну то есть другой вопрос.
[02:42:45.760 --> 02:42:46.760]  Ну как-то...
[02:42:47.760 --> 02:42:48.760]  Ну или другой вопрос.
[02:42:49.760 --> 02:42:50.760]  Что, наверное, там...
[02:42:51.760 --> 02:42:53.760]  Ну как бы интуитивно поверим, наверное, в то, что...
[02:42:54.760 --> 02:42:56.760]  Действительно, чем меньше N, тем алгоритм по камере там...
[02:42:57.760 --> 02:42:59.760]  Нет, тем алгоритм все-таки, наверное, будет быстрее работать.
[02:43:00.760 --> 02:43:01.760]  Просто потому, что...
[02:43:04.760 --> 02:43:05.760]  Ну просто потому, что...
[02:43:05.760 --> 02:43:09.760]  Ну просто потому, что для любого N всегда найдется тест,
[02:43:10.760 --> 02:43:11.760]  который здесь сведется...
[02:43:12.760 --> 02:43:14.760]  То есть сведется именно к какому-нибудь максимуму,
[02:43:15.760 --> 02:43:16.760]  поэтому там доказательство будет по индукции.
[02:43:17.760 --> 02:43:18.760]  Вот так скажу.
[02:43:21.760 --> 02:43:22.760]  Или...
[02:43:23.760 --> 02:43:24.760]  Ну ладно, неважно.
[02:43:25.760 --> 02:43:26.760]  Так вот, значит, к чему нас это приводит?
[02:43:27.760 --> 02:43:28.760]  И это нас формально приводит к следующему.
[02:43:29.760 --> 02:43:31.760]  Так, ну теперь мы пытаемся доказать, что это...
[02:43:32.760 --> 02:43:33.760]  Что это O от N.
[02:43:35.760 --> 02:43:36.760]  Как вы это делаете?
[02:43:37.760 --> 02:43:38.760]  Ну в принципе, да, у нас есть как бы...
[02:43:39.760 --> 02:43:40.760]  С прошлого раза у нас есть классический вагер.
[02:43:41.760 --> 02:43:43.760]  Притаемся доказать, что T от N не превосходит C от N.
[02:43:44.760 --> 02:43:45.760]  По индукции, да?
[02:43:46.760 --> 02:43:47.760]  И тогда пишем, что по индукции T от N не превосходит...
[02:43:48.760 --> 02:43:50.760]  Пытаемся написать шаблон C от N поделить на 5,
[02:43:51.760 --> 02:43:56.760]  плюс A от N, плюс 7 десятых C от N.
[02:43:57.760 --> 02:43:58.760]  Вот так.
[02:43:59.760 --> 02:44:00.760]  Но 7 десятых плюс одна пятая, это сколько?
[02:44:01.760 --> 02:44:04.760]  Это 9 десятых C от N, плюс A от N.
[02:44:05.760 --> 02:44:08.760]  Это меньше либо равно действительно C от N,
[02:44:09.760 --> 02:44:12.760]  при этом C больше либо равно, ну скажем, 10A.
[02:44:13.760 --> 02:44:14.760]  Ну видно, да?
[02:44:16.760 --> 02:44:19.760]  То есть здесь получается такое достаточно простое догадательство.
[02:44:21.760 --> 02:44:22.760]  Вот.
[02:44:24.760 --> 02:44:27.760]  Но соответственно, в домашнем задании у вас возникнет вопрос.
[02:44:28.760 --> 02:44:30.760]  А почему делить на 5?
[02:44:31.760 --> 02:44:32.760]  А нельзя ли делить на...
[02:44:33.760 --> 02:44:34.760]  Там по троечкам?
[02:44:35.760 --> 02:44:36.760]  Или по семерочкам?
[02:44:37.760 --> 02:44:38.760]  Или по девяточкам?
[02:44:39.760 --> 02:44:40.760]  Не по N.
[02:44:42.760 --> 02:44:44.760]  Не, ну по N-очкам не по N, это надо по-любому на константу,
[02:44:45.760 --> 02:44:47.760]  но по идее можешь делить на нечётные какие-то константы.
[02:44:48.760 --> 02:44:49.760]  И вот...
[02:44:59.760 --> 02:45:01.760]  Ещё прям быстрее будет?
[02:45:02.760 --> 02:45:03.760]  Не знаю.
[02:45:05.760 --> 02:45:06.760]  Так, заправы.
[02:45:26.760 --> 02:45:27.760]  Значит, это было...
[02:45:28.760 --> 02:45:29.760]  Так, так вот.
[02:45:30.760 --> 02:45:31.760]  Так.
[02:45:32.760 --> 02:45:33.760]  Так, чего там?
[02:45:33.760 --> 02:45:34.760]  Ну вот.
[02:45:35.760 --> 02:45:36.760]  Но в принципе да.
[02:45:37.760 --> 02:45:38.760]  Хотя на самом деле задача...
[02:45:39.760 --> 02:45:40.760]  Нет, хотя...
[02:45:41.760 --> 02:45:42.760]  Итак.
[02:45:43.760 --> 02:45:45.760]  То есть действительно отдельная песня, когда там рекуррента сходиться будет,
[02:45:46.760 --> 02:45:47.760]  а когда не будет.
[02:45:48.760 --> 02:45:49.760]  То есть сразу скажу, будет технический момент,
[02:45:50.760 --> 02:45:51.760]  что в некоторых случаях действительно это не сходится,
[02:45:52.760 --> 02:45:55.760]  но как бы, как вы помните, что если вот это вот не сходится,
[02:45:56.760 --> 02:46:00.760]  это не значит, что рекуррент, что T от N не является тому от N.
[02:46:01.760 --> 02:46:02.760]  Помните, да?
[02:46:03.760 --> 02:46:04.760]  Это будет, конечно, отдельная пида.
[02:46:05.760 --> 02:46:08.760]  Нет, это просто я просто объясняю, что как бы подразумевается в этой задаче.
[02:46:09.760 --> 02:46:10.760]  Нет, ну вот.
[02:46:23.760 --> 02:46:24.760]  Ну в принципе...
[02:46:25.760 --> 02:46:26.760]  Нет, ну ладно, лучше давайте не будем забивать,
[02:46:27.760 --> 02:46:29.760]  потому что всё равно там у вас есть более сложные задачи на эту тему.
[02:46:30.760 --> 02:46:31.760]  Вот.
[02:46:31.760 --> 02:46:32.760]  Ладно.
[02:46:33.760 --> 02:46:34.760]  Ну там, в общем-то, видите, когда тут линия,
[02:46:35.760 --> 02:46:37.760]  когда нет логарифмов корней, там как раз округление у вас проблем не вызвали.
[02:46:38.760 --> 02:46:39.760]  Так что так.
[02:46:40.760 --> 02:46:43.760]  Можете разомнитесь на самом деле перед работой с логарифмами и корнями.
[02:46:44.760 --> 02:46:46.760]  А то там в некоторых задачах такие ответы начинаются.
[02:46:47.760 --> 02:46:48.760]  Ой.
[02:46:49.760 --> 02:46:50.760]  Ладно.
[02:46:51.760 --> 02:46:52.760]  Так, ну что ж.
[02:46:53.760 --> 02:46:54.760]  Это был, значит, такой вот...
[02:46:55.760 --> 02:46:56.760]  Это мы тут неожиданно обсудили кусор три-корда статистики.
[02:46:57.760 --> 02:46:58.760]  Так, ну что?
[02:46:59.760 --> 02:47:00.760]  Ой-ой-ой.
[02:47:01.760 --> 02:47:02.760]  Так.
[02:47:03.760 --> 02:47:04.760]  Спрашивается, да.
[02:47:05.760 --> 02:47:06.760]  Так, не пришло ли время перерыва?
[02:47:07.760 --> 02:47:08.760]  Но нет, пока ещё не пришло вроде.
[02:47:09.760 --> 02:47:10.760]  Или пришло.
[02:47:11.760 --> 02:47:12.760]  Итак.
[02:47:13.760 --> 02:47:15.760]  Поговорим немножко, значит, да.
[02:47:16.760 --> 02:47:17.760]  А так ещё чуть-чуть о stacker deck.
[02:47:18.760 --> 02:47:19.760]  Вот.
[02:47:20.760 --> 02:47:21.760]  Вот.
[02:47:22.760 --> 02:47:24.760]  Но на самом деле, да, раз уж мы сегодня заговорили об этом,
[02:47:25.760 --> 02:47:26.760]  то имеет смысл действительно вспомнить.
[02:47:27.760 --> 02:47:28.760]  Как вообще реализовывать stack?
[02:47:29.760 --> 02:47:30.760]  Ну что такое stack для начала?
[02:47:31.760 --> 02:47:32.760]  Мы всё с нуля изучаем, да.
[02:47:33.760 --> 02:47:35.760]  Ну, по идее, stack – это такая простая структура данных,
[02:47:36.760 --> 02:47:37.760]  у которых...
[02:47:38.760 --> 02:47:39.760]  Хочется сказать соблазном такое сказать.
[02:47:40.760 --> 02:47:41.760]  У stack есть две...
[02:47:42.760 --> 02:47:43.760]  Там такая структура данных, то есть две операции.
[02:47:44.760 --> 02:47:45.760]  Push и pop.
[02:47:47.760 --> 02:47:52.760]  Push кладёт элемент stack, а pop достаёт последний добавленный элемент.
[02:47:53.760 --> 02:47:54.760]  То есть тот элемент из тех, кто сейчас в stack есть,
[02:47:55.760 --> 02:47:56.760]  которые были добавлены позже всего.
[02:47:57.760 --> 02:47:59.760]  Спрашивается, как проще всего реализовать
[02:47:59.760 --> 02:48:01.760]  озвученную мной структуру данных?
[02:48:02.760 --> 02:48:03.760]  Нет.
[02:48:04.760 --> 02:48:05.760]  Нет.
[02:48:06.760 --> 02:48:07.760]  Нет.
[02:48:08.760 --> 02:48:09.760]  Не очень сложно.
[02:48:10.760 --> 02:48:11.760]  Вот именно, именно.
[02:48:12.760 --> 02:48:13.760]  Потому что в том виде, в котором я сказал,
[02:48:14.760 --> 02:48:15.760]  на самом деле есть такая реализация.
[02:48:16.760 --> 02:48:18.760]  Это реализация, в которой вы вызываете операцию,
[02:48:19.760 --> 02:48:20.760]  а структура говорит...
[02:48:21.760 --> 02:48:22.760]  Угу.
[02:48:23.760 --> 02:48:24.760]  Потому что в принципе заметим,
[02:48:25.760 --> 02:48:26.760]  с помощью этого интерфейса вы никак не проверите,
[02:48:27.760 --> 02:48:28.760]  что она ничего не делает.
[02:48:29.760 --> 02:48:30.760]  Угу.
[02:48:31.760 --> 02:48:32.760]  Вот.
[02:48:33.760 --> 02:48:34.760]  То есть всегда...
[02:48:35.760 --> 02:48:36.760]  То есть знаете, простой тест на то,
[02:48:37.760 --> 02:48:38.760]  что всё-всё вы определили.
[02:48:39.760 --> 02:48:40.760]  То есть если структура данных может делать...
[02:48:41.760 --> 02:48:42.760]  Угу.
[02:48:43.760 --> 02:48:44.760]  И всё, значит, соответственно.
[02:48:45.760 --> 02:48:46.760]  Но обычно есть третья операция.
[02:48:47.760 --> 02:48:48.760]  Операция называется top.
[02:48:49.760 --> 02:48:50.760]  И она как раз возвращает вам элемент,
[02:48:51.760 --> 02:48:52.760]  который прямо сейчас на вершине stack находится.
[02:48:53.760 --> 02:48:54.760]  Вот.
[02:48:55.760 --> 02:48:56.760]  Тогда тут уже не обойдёшься.
[02:48:57.760 --> 02:48:58.760]  Вот.
[02:48:59.760 --> 02:49:00.760]  И как это реализовывать,
[02:49:01.760 --> 02:49:02.760]  становится действительно интересно.
[02:49:03.760 --> 02:49:04.760]  Потому что...
[02:49:05.760 --> 02:49:06.760]  Ну вот.
[02:49:07.760 --> 02:49:08.760]  Какие есть подходы.
[02:49:09.760 --> 02:49:10.760]  Но есть два основных подхода.
[02:49:11.760 --> 02:49:12.760]  Первый базируется на массиве.
[02:49:13.760 --> 02:49:14.760]  Вы заводите какой-то большой массив,
[02:49:15.760 --> 02:49:16.760]  и там двигаете какой-то указатель.
[02:49:17.760 --> 02:49:18.760]  Вот.
[02:49:19.760 --> 02:49:20.760]  Ну в принципе хороший подход.
[02:49:21.760 --> 02:49:22.760]  По констанции работает хорошо,
[02:49:23.760 --> 02:49:24.760]  но минус заключается в том,
[02:49:25.760 --> 02:49:26.760]  что непонятно, что делать,
[02:49:27.760 --> 02:49:28.760]  если память бухер закончится.
[02:49:29.760 --> 02:49:30.760]  То есть заморачиваться
[02:49:31.760 --> 02:49:32.760]  и там куда-то что-то перекладывать.
[02:49:33.760 --> 02:49:34.760]  То есть там перекладывать
[02:49:35.760 --> 02:49:36.760]  вот эти вот технологии с буфером
[02:49:37.760 --> 02:49:38.760]  забабахивать там и так далее.
[02:49:40.760 --> 02:49:42.760]  Ну не говоря уже о том минусе,
[02:49:43.760 --> 02:49:45.760]  что в данном случае,
[02:49:46.760 --> 02:49:47.760]  если вы забабахиваете прям очень большой буфер,
[02:49:48.760 --> 02:49:49.760]  тогда у вас будут проблемы с тем,
[02:49:50.760 --> 02:49:51.760]  что если стэк маленький,
[02:49:52.760 --> 02:49:53.760]  что даже маленький стэк будет
[02:49:54.760 --> 02:49:55.760]  жрать очень много памяти.
[02:49:56.760 --> 02:49:57.760]  Поэтому есть...
[02:49:57.760 --> 02:49:58.760]  Да, если вы владеете
[02:49:59.760 --> 02:50:00.760]  мистической технологией указатель,
[02:50:01.760 --> 02:50:02.760]  так вот тут нетривиальный вопрос.
[02:50:03.760 --> 02:50:04.760]  Ну как?
[02:50:05.760 --> 02:50:06.760]  Кто вообще писал когда-нибудь
[02:50:07.760 --> 02:50:08.760]  что-нибудь, связанное с указателями?
[02:50:09.760 --> 02:50:10.760]  Так, а кто когда-нибудь успешно
[02:50:11.760 --> 02:50:12.760]  писал что-нибудь с указателями?
[02:50:13.760 --> 02:50:14.760]  Вот, хорошо.
[02:50:15.760 --> 02:50:16.760]  Нет, я должен был спросить,
[02:50:17.760 --> 02:50:18.760]  потому что не самая тривиальная тема,
[02:50:19.760 --> 02:50:22.760]  и в некоторых там в общем смысле школах
[02:50:23.760 --> 02:50:24.760]  иногда пытаются указатели
[02:50:25.760 --> 02:50:26.760]  просто даже при изучении дикартящик
[02:50:27.760 --> 02:50:28.760]  и правдами и неправдами избежать.
[02:50:29.760 --> 02:50:30.760]  То есть даже говорим, что,
[02:50:31.760 --> 02:50:32.760]  господи, дикартящик, зачем там нужно указатели?
[02:50:33.760 --> 02:50:34.760]  Давайте лучше там заведем общий вектор,
[02:50:35.760 --> 02:50:36.760]  вместо указателей будет там
[02:50:37.760 --> 02:50:38.760]  индексы какие-то писать.
[02:50:39.760 --> 02:50:40.760]  Вот, а кто-нибудь когда-нибудь писал дикартящик
[02:50:41.760 --> 02:50:42.760]  в таком виде?
[02:50:43.760 --> 02:50:44.760]  А, чего?
[02:50:45.760 --> 02:50:46.760]  Четыре байта.
[02:50:47.760 --> 02:50:48.760]  Там даже регулярный был.
[02:50:49.760 --> 02:50:50.760]  Ну окей, да, хорошо, хорошо.
[02:50:51.760 --> 02:50:52.760]  Ладно, понял.
[02:50:53.760 --> 02:50:54.760]  Но тут уже менее поднятые руки, конечно.
[02:50:55.760 --> 02:50:56.760]  Да, так что да.
[02:50:57.760 --> 02:51:03.760]  Нет, ну суфтоват он и по умолчанию на массиве пишет.
[02:51:04.760 --> 02:51:05.760]  Но это не древесная структура данных,
[02:51:06.760 --> 02:51:07.760]  поэтому там указателями баловаться
[02:51:08.760 --> 02:51:09.760]  себе дороже будет.
[02:51:10.760 --> 02:51:11.760]  Да, ссылки.
[02:51:12.760 --> 02:51:13.760]  Ну как мы уже обсуждали, что происходит,
[02:51:14.760 --> 02:51:16.760]  если вы делаете, если вершины
[02:51:17.760 --> 02:51:18.760]  смотрят указателями, а их хранятся
[02:51:19.760 --> 02:51:20.760]  при этом векторе.
[02:51:21.760 --> 02:51:22.760]  Вот мы сегодня уже обсуждали,
[02:51:23.760 --> 02:51:24.760]  каким веселым спецэффектом это приводит.
[02:51:25.760 --> 02:51:26.760]  Поэтому обычно да.
[02:51:27.760 --> 02:51:29.760]  Суффиксное дерево, да, там указатели
[02:51:30.760 --> 02:51:34.760]  как бы более там, там больше подходят.
[02:51:35.760 --> 02:51:36.760]  Вот, ну а почему я заговорил про указатели?
[02:51:37.760 --> 02:51:38.760]  Потому что есть действительно вторая,
[02:51:39.760 --> 02:51:40.760]  потому что есть вторая версия,
[02:51:41.760 --> 02:51:42.760]  как реализовать указатели.
[02:51:43.760 --> 02:51:44.760]  То есть просто реализовать на,
[02:51:45.760 --> 02:51:46.760]  то есть действительно на указателях,
[02:51:47.760 --> 02:51:48.760]  то есть в каждом элементе есть два поля.
[02:51:49.760 --> 02:51:50.760]  То есть, собственно, сама чиселка
[02:51:51.760 --> 02:51:52.760]  и, так сказать, указатель
[02:51:53.760 --> 02:51:54.760]  на предыдущий элемент.
[02:51:55.760 --> 02:51:56.760]  Вот.
[02:51:59.760 --> 02:52:00.760]  Вот.
[02:52:05.760 --> 02:52:06.760]  Ну да.
[02:52:07.760 --> 02:52:08.760]  И последний указатель просто указывает
[02:52:09.760 --> 02:52:10.760]  в никуда, вот я и буду крестиком
[02:52:11.760 --> 02:52:12.760]  помечать никуда.
[02:52:13.760 --> 02:52:14.760]  Вот.
[02:52:15.760 --> 02:52:16.760]  И у нас еще будет у строка указатель топ,
[02:52:17.760 --> 02:52:20.760]  который будет указывать на верхнюю вершину.
[02:52:21.760 --> 02:52:22.760]  То есть, действительно, тогда делать
[02:52:22.760 --> 02:52:23.760]  пушерчик просто.
[02:52:24.760 --> 02:52:25.760]  Вы просто создаете с помощью просто
[02:52:26.760 --> 02:52:27.760]  той же функции new, ну или там мало
[02:52:28.760 --> 02:52:29.760]  какого-нибудь, не знаю, значит,
[02:52:30.760 --> 02:52:31.760]  новую вершину.
[02:52:32.760 --> 02:52:33.760]  Там топ перенаправляете сюда
[02:52:34.760 --> 02:52:35.760]  и этот указатель копируете сюда
[02:52:36.760 --> 02:52:37.760]  и записываете тут этот новый элемент.
[02:52:38.760 --> 02:52:41.760]  Как сделать поп?
[02:52:42.760 --> 02:52:43.760]  Ну, там топ, ну, точнее, функция топ
[02:52:44.760 --> 02:52:45.760]  после этого, там метод будет работать
[02:52:46.760 --> 02:52:47.760]  очень просто.
[02:52:48.760 --> 02:52:49.760]  Ну а поп?
[02:52:50.760 --> 02:52:51.760]  Ну, как бы, да, на Олимпиаде вам хватит
[02:52:52.760 --> 02:52:53.760]  указатель на следующий элемент.
[02:52:54.760 --> 02:52:56.760]  Но, конечно, на C++ вас такое
[02:52:57.760 --> 02:52:58.760]  будет очень больно бить.
[02:52:59.760 --> 02:53:00.760]  Вот поэтому, конечно, прежде чем
[02:53:01.760 --> 02:53:02.760]  перенаправлять указатель, вот эту вершинку
[02:53:03.760 --> 02:53:04.760]  лучше поделить, конечно.
[02:53:05.760 --> 02:53:06.760]  Да, помните, что C++ это такой редкий язык,
[02:53:07.760 --> 02:53:08.760]  где за память отвечаете только вы.
[02:53:09.760 --> 02:53:10.760]  Помните, да, то есть, как бы, если вы
[02:53:11.760 --> 02:53:12.760]  выделили память, но ее не освободили,
[02:53:13.760 --> 02:53:14.760]  то до конца работы программы эта память
[02:53:15.760 --> 02:53:16.760]  вообще-то освобождена не будет.
[02:53:17.760 --> 02:53:18.760]  Можно умные указатели?
[02:53:19.760 --> 02:53:20.760]  Это другой вопрос.
[02:53:20.760 --> 02:53:21.760]  Да, да, есть умные указатели, там,
[02:53:22.760 --> 02:53:23.760]  со своими оверхедами, спецэффектами вы это
[02:53:24.760 --> 02:53:25.760]  тоже будете очень подробно изучать.
[02:53:26.760 --> 02:53:27.760]  Вот там, во всех деталях.
[02:53:28.760 --> 02:53:29.760]  Да, можно так, но в данном случае, как бы,
[02:53:30.760 --> 02:53:31.760]  нет необходимости, потому что, как бы,
[02:53:32.760 --> 02:53:33.760]  все сами контролируете.
[02:53:34.760 --> 02:53:35.760]  Да, можно там использовать умные указатели,
[02:53:36.760 --> 02:53:37.760]  можно использовать что-то еще там, но просто
[02:53:38.760 --> 02:53:39.760]  суть в том, что вы сами контролируете.
[02:53:40.760 --> 02:53:41.760]  Условный джави есть, например, пылесоса.
[02:53:42.760 --> 02:53:43.760]  Ну, ладно.
[02:53:44.760 --> 02:53:45.760]  Да, то есть, там, пылесоса, да, но официальное
[02:53:46.760 --> 02:53:47.760]  название garbage collector, естественно, да.
[02:53:48.760 --> 02:53:49.760]  Ну вот, это пыленод.
[02:53:50.760 --> 02:53:51.760]  Пылесоса периодически включается,
[02:53:52.760 --> 02:53:53.760]  становится программой и пылесосит все,
[02:53:54.760 --> 02:53:55.760]  к чему вы потеряли доступ.
[02:53:56.760 --> 02:53:57.760]  Да, ну, а чем-то в джаве такой,
[02:53:58.760 --> 02:53:59.760]  в питоне такой спецэффект есть,
[02:54:00.760 --> 02:54:01.760]  то есть, в питоне вы тоже не заморачиваетесь
[02:54:02.760 --> 02:54:03.760]  там об память, то есть, там, считаете,
[02:54:04.760 --> 02:54:05.760]  что в амортизированном каком-то виде,
[02:54:06.760 --> 02:54:07.760]  то есть, там, вот именно амортизированным способом,
[02:54:08.760 --> 02:54:09.760]  но в какой-то момент там лишняя память
[02:54:10.760 --> 02:54:11.760]  очистится.
[02:54:12.760 --> 02:54:13.760]  Вот, вы не знаете, в какой, но это уже
[02:54:14.760 --> 02:54:15.760]  там джава-машина сама решает, ну, или там,
[02:54:16.760 --> 02:54:17.760]  этот ваш интерпретат.
[02:54:18.760 --> 02:54:19.760]  В C++ вам придется, в C++ приходится
[02:54:20.760 --> 02:54:21.760]  это отвечать.
[02:54:22.760 --> 02:54:23.760]  Может, благодаря этому на самом деле
[02:54:24.760 --> 02:54:25.760]  как-то вот, да, был вопрос.
[02:54:26.760 --> 02:54:27.760]  Кем отвечает C++ и джава?
[02:54:28.760 --> 02:54:29.760]  C++, как вы пишете, что угодно,
[02:54:30.760 --> 02:54:31.760]  и только вы отвечаете за то,
[02:54:32.760 --> 02:54:33.760]  что это не рванет.
[02:54:34.760 --> 02:54:35.760]  Ну вот, в джаве надо писать четко по правилам,
[02:54:36.760 --> 02:54:37.760]  но зато все будет надежно работать
[02:54:38.760 --> 02:54:39.760]  и не рванет точно.
[02:54:40.760 --> 02:54:41.760]  Вот.
[02:54:42.760 --> 02:54:43.760]  Вот, ну, я вот слышал такое мнение,
[02:54:44.760 --> 02:54:45.760]  как бы не могу там,
[02:54:46.760 --> 02:54:47.760]  поручиться, насколько правда,
[02:54:48.760 --> 02:54:49.760]  видимо, там, насколько это правда скажет
[02:54:50.760 --> 02:54:51.760]  соответственно.
[02:54:52.760 --> 02:54:53.760]  Вот.
[02:54:54.760 --> 02:54:55.760]  То есть, какие преимущества
[02:54:56.760 --> 02:54:57.760]  у такого стека?
[02:54:58.760 --> 02:54:59.760]  Такое у стека преимущество в том,
[02:55:00.760 --> 02:55:01.760]  что в каждый момент времени мы храним
[02:55:02.760 --> 02:55:03.760]  ровно там тета, то есть памяти,
[02:55:04.760 --> 02:55:05.760]  ровно там тета от 1 плюс количество
[02:55:06.760 --> 02:55:07.760]  элементов, которые вы храните.
[02:55:08.760 --> 02:55:09.760]  Логично, да?
[02:55:10.760 --> 02:55:11.760]  Логично, да.
[02:55:12.760 --> 02:55:13.760]  Вот.
[02:55:14.760 --> 02:55:15.760]  Значит, вот это да.
[02:55:16.760 --> 02:55:17.760]  То есть, хранится ровно столько,
[02:55:18.760 --> 02:55:19.760]  сколько надо, никаких пуфер,
[02:55:20.760 --> 02:55:21.760]  но у каждой этой недостатки
[02:55:22.760 --> 02:55:23.760]  у этой реализации есть,
[02:55:24.760 --> 02:55:25.760]  потому что все-таки операция Нью
[02:55:26.760 --> 02:55:27.760]  в любом виде, она все-таки скотина,
[02:55:28.760 --> 02:55:29.760]  во-первых, дорогая,
[02:55:30.760 --> 02:55:31.760]  а во-вторых, на самом деле,
[02:55:32.760 --> 02:55:33.760]  у вас тогда вот эти вершины
[02:55:34.760 --> 02:55:35.760]  в памяти будут расположены
[02:55:36.760 --> 02:55:37.760]  так более достаточно рандомно.
[02:55:38.760 --> 02:55:39.760]  Вот.
[02:55:40.760 --> 02:55:41.760]  Это в некоторых случаях тоже вызывает
[02:55:42.760 --> 02:55:43.760]  пресс-верк, потому что на самом деле,
[02:55:44.760 --> 02:55:45.760]  если вы хотите пробежаться, скажем,
[02:55:46.760 --> 02:55:47.760]  по стеку и пописать элементы,
[02:55:48.760 --> 02:55:49.760]  то если вы будете скакать
[02:55:50.760 --> 02:55:51.760]  особенностей на самом деле
[02:55:52.760 --> 02:55:53.760]  устройства работы в памяти,
[02:55:54.760 --> 02:55:55.760]  это мы тоже в следующий раз
[02:55:56.760 --> 02:55:57.760]  так немножко обсудим.
[02:55:58.760 --> 02:55:59.760]  Вот.
[02:56:00.760 --> 02:56:01.760]  Там вот, кстати, я там вот проматывал,
[02:56:02.760 --> 02:56:03.760]  там тоже слайды есть на эту тему.
[02:56:04.760 --> 02:56:05.760]  Вот.
[02:56:06.760 --> 02:56:07.760]  Поэтому, то есть, это тоже как бы не идеальный вариант.
[02:56:08.760 --> 02:56:09.760]  Поэтому, в принципе, есть гибридная версия,
[02:56:10.760 --> 02:56:11.760]  которую можно чаще использовать.
[02:56:12.760 --> 02:56:13.760]  Гибридная версия заключается в том,
[02:56:14.760 --> 02:56:15.760]  что да, мы храним такую цепочку вершин,
[02:56:16.760 --> 02:56:17.760]  но только в каждой вершине
[02:56:18.760 --> 02:56:19.760]  мы храним не один элемент,
[02:56:20.760 --> 02:56:21.760]  но один элемент.
[02:56:22.760 --> 02:56:23.760]  Вот.
[02:56:24.760 --> 02:56:25.760]  То есть, вот как-то вот так это происходит.
[02:56:26.760 --> 02:56:27.760]  То есть, тогда как бы не U-шек
[02:56:28.760 --> 02:56:29.760]  происходит немножко.
[02:56:30.760 --> 02:56:31.760]  То есть, не U-шек происходит меньше,
[02:56:32.760 --> 02:56:34.760]  там и получается чуть-чуть лучше.
[02:56:35.760 --> 02:56:36.760]  То есть, там отдельно только надо уже.
[02:56:37.760 --> 02:56:38.760]  То есть, дальше, конечно, все зависит от того,
[02:56:39.760 --> 02:56:40.760]  под какие конкретно нужды вам надо,
[02:56:41.760 --> 02:56:42.760]  потому что там и что вам конкретно надо.
[02:56:43.760 --> 02:56:44.760]  Часто бывает, что STL, конечно,
[02:56:45.760 --> 02:56:46.760]  на реальной практике,
[02:56:47.760 --> 02:56:48.760]  теперь STL переписывают.
[02:56:49.760 --> 02:56:50.760]  Иногда.
[02:56:51.760 --> 02:56:52.760]  Ну, скажем, например, в компании Яндекс,
[02:56:53.760 --> 02:56:54.760]  например, в стандартной библиотеке,
[02:56:55.760 --> 02:56:56.760]  которая называется Аркадия,
[02:56:57.760 --> 02:56:58.760]  то есть STL-ем пользоваться нельзя.
[02:56:59.760 --> 02:57:00.760]  Можно пользоваться оберткой,
[02:57:01.760 --> 02:57:02.760]  это яндексовая обертка STL.
[02:57:05.760 --> 02:57:06.760]  Да, ну и сейчас, возможно, уже нет.
[02:57:07.760 --> 02:57:08.760]  Хотя да.
[02:57:09.760 --> 02:57:10.760]  Нет, ну класс строка, да, так и да,
[02:57:11.760 --> 02:57:12.760]  исторически сложилось, что он есть.
[02:57:13.760 --> 02:57:14.760]  Нет, при том, что есть код стайл,
[02:57:15.760 --> 02:57:16.760]  который запрещает использовать русские,
[02:57:16.760 --> 02:57:17.760]  но в данном случае,
[02:57:18.760 --> 02:57:21.760]  это вот такое исключение полуисторическое.
[02:57:22.760 --> 02:57:23.760]  Да, так называется строка.
[02:57:24.760 --> 02:57:25.760]  Ну там,
[02:57:26.760 --> 02:57:27.760]  ну там,
[02:57:28.760 --> 02:57:29.760]  ну я не помню, строка, вытрока,
[02:57:30.760 --> 02:57:31.760]  но есть тест рингвуф там был вообще, помню,
[02:57:32.760 --> 02:57:34.760]  но я не знаю, у меня мог быть устаревшие сведения,
[02:57:35.760 --> 02:57:36.760]  потому что я как бы работал в компании Яндекс,
[02:57:37.760 --> 02:57:38.760]  когда там с,
[02:57:39.760 --> 02:57:42.760]  ну получается, где-то там с сентября 12-го года,
[02:57:43.760 --> 02:57:44.760]  по апрель 15-го, в общем-то,
[02:57:44.760 --> 02:57:45.760]  поэтому с тех пор там могло все поменяться,
[02:57:46.760 --> 02:57:47.760]  я не знаю, то есть там уже,
[02:57:48.760 --> 02:57:51.760]  те, кто там работал или работает,
[02:57:52.760 --> 02:57:53.760]  ну какие-нибудь ваши старшие товарищи там сейчас,
[02:57:54.760 --> 02:57:56.760]  там почти, наверное, в большом количестве стажируются
[02:57:57.760 --> 02:57:58.760]  или работают даже,
[02:57:59.760 --> 02:58:00.760]  они там могут рассказать подробнее.
[02:58:01.760 --> 02:58:02.760]  Вот, но там была фишка такая,
[02:58:03.760 --> 02:58:04.760]  что, скажем, STD сетом пользоваться нельзя.
[02:58:05.760 --> 02:58:08.760]  Ну можно было пользоваться структурой данных Y-сет.
[02:58:09.760 --> 02:58:10.760]  Y-сет.
[02:58:11.760 --> 02:58:12.760]  Это, ну на самом деле,
[02:58:12.760 --> 02:58:13.760]  на самом деле это фактически,
[02:58:14.760 --> 02:58:15.760]  фактически такое,
[02:58:16.760 --> 02:58:18.760]  на самом деле такое фактически обертка сета,
[02:58:19.760 --> 02:58:20.760]  обертка сета, даже наследник его,
[02:58:21.760 --> 02:58:24.760]  но просто с прописанным Яндексом
[02:58:25.760 --> 02:58:26.760]  аллокатором.
[02:58:32.760 --> 02:58:33.760]  Хороший вопрос,
[02:58:34.760 --> 02:58:35.760]  хороший вопрос точно не скажу.
[02:58:42.760 --> 02:58:43.760]  Нет,
[02:58:44.760 --> 02:58:45.760]  нет, ну как сказать,
[02:58:46.760 --> 02:58:47.760]  тут вот проблема,
[02:58:48.760 --> 02:58:49.760]  потому что дело в том,
[02:58:50.760 --> 02:58:51.760]  там он не быстрее,
[02:58:52.760 --> 02:58:53.760]  потому что действительно стек и очередь это такая обертка от дека,
[02:58:54.760 --> 02:58:55.760]  обертка просто,
[02:58:56.760 --> 02:58:57.760]  фактически потому что стек умеет то же самое,
[02:58:58.760 --> 02:58:59.760]  что дек,
[02:59:00.760 --> 02:59:01.760]  просто чуть меньше.
[02:59:02.760 --> 02:59:03.760]  Вот, но подлянка,
[02:59:04.760 --> 02:59:05.760]  поэтому там просто какие-то операции запрещаются,
[02:59:06.760 --> 02:59:07.760]  но подлянка там заключается в том,
[02:59:08.760 --> 02:59:09.760]  что у дека в STD есть операция квадратной скупки.
[02:59:10.760 --> 02:59:11.760]  Да.
[02:59:12.760 --> 02:59:13.760]  Потому что это все становится сильно более сложно.
[02:59:14.760 --> 02:59:16.760]  Вот, у вас домашнее задание будет это,
[02:59:17.760 --> 02:59:18.760]  придумать реализацию такого дека,
[02:59:19.760 --> 02:59:20.760]  чтобы можно было это делать pushback,
[02:59:21.760 --> 02:59:22.760]  pushback, pushfront, pushfront.
[02:59:23.760 --> 02:59:24.760]  Конечно.
[02:59:25.760 --> 02:59:26.760]  Четыре стека будет?
[02:59:27.760 --> 02:59:28.760]  Ну,
[02:59:29.760 --> 02:59:30.760]  ну если придумаете на четыре стека,
[02:59:31.760 --> 02:59:32.760]  то пожалуйста.
[02:59:33.760 --> 02:59:34.760]  Амортизация разрешена,
[02:59:35.760 --> 02:59:36.760]  но ее нужно будет четко проанализировать.
[02:59:37.760 --> 02:59:38.760]  Это я так предупреждаю,
[02:59:39.760 --> 02:59:40.760]  что будет в домашнем задании.
[02:59:40.760 --> 02:59:41.760]  Ну, придумать...
[02:59:42.760 --> 02:59:43.760]  Нет, это...
[02:59:44.760 --> 02:59:45.760]  Нет, это то, что я сказал,
[02:59:46.760 --> 02:59:47.760]  это теоретическая задача.
[02:59:48.760 --> 02:59:49.760]  Возможно, в плюсовом курсе вам придется это реализовать.
[02:59:50.760 --> 02:59:51.760]  Но это, нет, это просто другая задача,
[02:59:52.760 --> 02:59:53.760]  там просто, то есть понятно,
[02:59:54.760 --> 02:59:55.760]  что там идейно там не будет ничего сложного,
[02:59:56.760 --> 02:59:57.760]  но как бы судьба в том,
[02:59:58.760 --> 02:59:59.760]  чтобы это реализовать правильно,
[03:00:00.760 --> 03:00:01.760]  в точке зрения языка C++.
[03:00:02.760 --> 03:00:03.760]  Понятно, да, но это как бы немножко уже другое.
[03:00:04.760 --> 03:00:05.760]  Вот, значится,
[03:00:06.760 --> 03:00:07.760]  значится, да, это у нас стек.
[03:00:08.760 --> 03:00:09.760]  Ну да, вот в рядах там был,
[03:00:10.760 --> 03:00:11.760]  там играх, хэш-сет и так далее.
[03:00:12.760 --> 03:00:13.760]  Вот.
[03:00:14.760 --> 03:00:15.760]  Но если вот, ладно,
[03:00:16.760 --> 03:00:18.760]  если забыть говорить об амортизации,
[03:00:19.760 --> 03:00:21.760]  то есть если вот там говорить об какой-то...
[03:00:22.760 --> 03:00:23.760]  Ну...
[03:00:24.760 --> 03:00:25.760]  Сейчас, что я хотел сказать-то вообще?
[03:00:26.760 --> 03:00:27.760]  Что-то, наверное.
[03:00:28.760 --> 03:00:29.760]  Да, со мной такое бывает, да.
[03:00:30.760 --> 03:00:31.760]  Ну вот.
[03:00:32.760 --> 03:00:33.760]  То есть, ну, в принципе, действительно,
[03:00:34.760 --> 03:00:35.760]  стек можно так реализовать,
[03:00:36.760 --> 03:00:37.760]  но можно в принципе на двусвязном списке
[03:00:38.760 --> 03:00:39.760]  можно реализовать и очередь.
[03:00:40.760 --> 03:00:41.760]  Вы понимаете, кто когда-нибудь реализовывал
[03:00:42.760 --> 03:00:43.760]  вообще хоть какую-нибудь версию списков?
[03:00:46.760 --> 03:00:47.760]  А, вот уже не все, да.
[03:00:48.760 --> 03:00:49.760]  Не все до этого ждали.
[03:00:54.760 --> 03:00:55.760]  Не, не понял.
[03:00:58.760 --> 03:00:59.760]  Ну, по-разному.
[03:01:00.760 --> 03:01:01.760]  Да, это жалко.
[03:01:02.760 --> 03:01:03.760]  По-хорошему, ладно, давайте пробежи.
[03:01:04.760 --> 03:01:05.760]  Ладно, на эту тему пробежимся немножко.
[03:01:06.760 --> 03:01:07.760]  А, ну, в принципе, да,
[03:01:08.760 --> 03:01:09.760]  у меня что-то...
[03:01:10.760 --> 03:01:11.760]  Есть вон.
[03:01:12.760 --> 03:01:13.760]  Все.
[03:01:14.760 --> 03:01:15.760]  Да.
[03:01:16.760 --> 03:01:17.760]  Нет, просто так быстрее будет.
[03:01:18.760 --> 03:01:19.760]  Просто чтобы...
[03:01:20.760 --> 03:01:21.760]  Чтобы потом были уверены,
[03:01:22.760 --> 03:01:23.760]  что все это уже видели,
[03:01:24.760 --> 03:01:25.760]  чтобы не выяснилось, что я для кого-то
[03:01:26.760 --> 03:01:27.760]  тут начал говорить про заклинание.
[03:01:28.760 --> 03:01:29.760]  Но вы тоже на всякий случай спрашивайте.
[03:01:30.760 --> 03:01:31.760]  Потому что бывает две проблемы.
[03:01:32.760 --> 03:01:33.760]  С одной стороны, многие стесняются
[03:01:34.760 --> 03:01:35.760]  задать какой-то вопрос.
[03:01:36.760 --> 03:01:37.760]  Ну вот.
[03:01:38.760 --> 03:01:39.760]  А потом жалуются, что...
[03:01:40.760 --> 03:01:41.760]  В лекциях ничего не понятно.
[03:01:42.760 --> 03:01:43.760]  Там максимум шесть человек вообще хоть что-то понимают.
[03:01:44.760 --> 03:01:45.760]  А!
[03:01:46.760 --> 03:01:47.760]  Вот.
[03:01:48.760 --> 03:01:49.760]  Ну вот.
[03:01:51.760 --> 03:01:52.760]  Понимаете, да.
[03:01:53.760 --> 03:01:54.760]  Нет, ну как сказать?
[03:01:55.760 --> 03:01:56.760]  Понятно, что я не первый год лекции читаю,
[03:01:57.760 --> 03:01:58.760]  поэтому местами могу предсказать,
[03:01:59.760 --> 03:02:00.760]  что я должен на всякий случай проговорить.
[03:02:01.760 --> 03:02:02.760]  Что кажется очевидным,
[03:02:03.760 --> 03:02:04.760]  но для кого-то не очевидно это да.
[03:02:05.760 --> 03:02:06.760]  Но как бы правтыки могут случаться.
[03:02:07.760 --> 03:02:08.760]  То есть правтыки могут случаться.
[03:02:08.760 --> 03:02:10.760]  Поэтому если я в какой-то момент начал
[03:02:11.760 --> 03:02:12.760]  говорить на китайском языке случайно,
[03:02:13.760 --> 03:02:15.760]  то пожалуйста, просьба быстренько меня просто останавливать.
[03:02:16.760 --> 03:02:18.760]  Ну, условно-китайском.
[03:02:19.760 --> 03:02:20.760]  Я не знаю.
[03:02:21.760 --> 03:02:22.760]  Я считаю, что я его не знаю, но может выясниться,
[03:02:23.760 --> 03:02:24.760]  что я на нем неожиданно говорю.
[03:02:25.760 --> 03:02:26.760]  Да, это может оказаться японский язык,
[03:02:27.760 --> 03:02:28.760]  лингонский язык или что-нибудь еще в этом роде,
[03:02:29.760 --> 03:02:30.760]  но соответственно.
[03:02:31.760 --> 03:02:32.760]  То есть я неслучайно тут действительно поддерживаю атмосферу,
[03:02:33.760 --> 03:02:34.760]  что как бы не я.
[03:02:35.760 --> 03:02:36.760]  Не я просто даю знания,
[03:02:36.760 --> 03:02:38.760]  а вы прям молча отомкиваете и там что-то записываете.
[03:02:39.760 --> 03:02:40.760]  Вот я вот специально поддерживаю атмосферу,
[03:02:41.760 --> 03:02:42.760]  что вот хочется, чтобы если возникает вопрос,
[03:02:43.760 --> 03:02:44.760]  его можно сразу задать.
[03:02:45.760 --> 03:02:48.760]  Поэтому активно призываю вас активно участвовать.
[03:02:49.760 --> 03:02:52.760]  Потому что тем более,
[03:02:53.760 --> 03:02:54.760]  если вы так будете засыпать, то знаете,
[03:02:55.760 --> 03:02:56.760]  это тоже еще один классический пример,
[03:02:57.760 --> 03:03:00.760]  который там тоже в КВН очень хорошо еще прорисовали на самом деле.
[03:03:01.760 --> 03:03:02.760]  Что будет, если чуть-чуть проспать?
[03:03:03.760 --> 03:03:04.760]  То есть вот ситуация.
[03:03:04.760 --> 03:03:05.760]  Представьте, человек сходил на первую лекцию по химии,
[03:03:06.760 --> 03:03:07.760]  там все было понятно,
[03:03:08.760 --> 03:03:09.760]  и он там решил, ладно, вторую пропущу,
[03:03:10.760 --> 03:03:11.760]  что там будет.
[03:03:12.760 --> 03:03:14.760]  И там приходит на третью лекцию,
[03:03:15.760 --> 03:03:17.760]  и думает, ну что там непонятно, все понятно.
[03:03:18.760 --> 03:03:19.760]  Приходит, а там называется,
[03:03:20.760 --> 03:03:21.760]  здравствуйте, тема там,
[03:03:22.760 --> 03:03:23.760]  все в очередной лекции плавно вытекает из предыдущих двух,
[03:03:24.760 --> 03:03:25.760]  и так там сублибация сублирагов очень резидентна
[03:03:26.760 --> 03:03:27.760]  по отношению к лекции мобисознательному.
[03:03:28.760 --> 03:03:29.760]  Мы проходим там некоторое, в некотором виде,
[03:03:30.760 --> 03:03:31.760]  предельных углеводородов.
[03:03:32.760 --> 03:03:33.760]  Подождите, а где химия эта наука, вещества?
[03:03:34.760 --> 03:03:39.760]  Там где сера плюс водород равно сера-водород?
[03:03:40.760 --> 03:03:41.760]  Так, конечно, было на первой лекции.
[03:03:42.760 --> 03:03:43.760]  А это третья.
[03:03:44.760 --> 03:03:46.760]  Ну вот и там начинается там всякие вопросы.
[03:03:47.760 --> 03:03:48.760]  Какие-то, да.
[03:03:49.760 --> 03:03:50.760]  Ну-ка, расскажите мне, действительно,
[03:03:51.760 --> 03:03:53.760]  как были формулы оксида Берилия?
[03:03:54.760 --> 03:03:55.760]  Все поднимают руки вон.
[03:03:56.760 --> 03:03:57.760]  Да как так-то!
[03:03:58.760 --> 03:03:59.760]  Ну и тогда, смотрите, поняли, я думаю, о чем речь идет.
[03:04:00.760 --> 03:04:03.760]  Поэтому суть в том, что желательно просто не выпадать.
[03:04:04.760 --> 03:04:06.760]  То есть, если вы поняли, что где-то вот выпадаете
[03:04:07.760 --> 03:04:08.760]  или что-то непонятно, лучше меня тормозить,
[03:04:09.760 --> 03:04:10.760]  я лучше расскажу еще раз, но как бы будет понятно.
[03:04:11.760 --> 03:04:12.760]  А то потом вы там заснете.
[03:04:13.760 --> 03:04:14.760]  То есть, кажется, все будет просто.
[03:04:15.760 --> 03:04:16.760]  Вот сейчас я понимаю, что многим из вас
[03:04:17.760 --> 03:04:18.760]  то, что я рассказываю, достаточно просто.
[03:04:19.760 --> 03:04:20.760]  Но если вы там расслабитесь, то в любой момент,
[03:04:21.760 --> 03:04:22.760]  в какой-то момент вы проснетесь,
[03:04:23.760 --> 03:04:24.760]  и потом будет, действительно, я говорю,
[03:04:25.760 --> 03:04:26.760]  сублимация сублирагов очень резидентна
[03:04:27.760 --> 03:04:28.760]  по отношению к лекции мобисознательному.
[03:04:29.760 --> 03:04:30.760]  И все вокруг вас, да-да-да, конечно, понятно.
[03:04:31.760 --> 03:04:32.760]  Естественно, да.
[03:04:32.760 --> 03:04:33.760]  Вот.
[03:04:34.760 --> 03:04:35.760]  И так далее.
[03:04:36.760 --> 03:04:37.760]  Поэтому, соответственно.
[03:04:38.760 --> 03:04:39.760]  Небольшое такое нужно было сделать.
[03:04:40.760 --> 03:04:41.760]  Значит, смотрите.
[03:04:42.760 --> 03:04:43.760]  Что такое односвязанный список?
[03:04:44.760 --> 03:04:45.760]  По идее, односвязанный список – это фактически структура данных,
[03:04:46.760 --> 03:04:47.760]  на которой мы реализовали стэк.
[03:04:48.760 --> 03:04:49.760]  Сама по себе она значит, что у нас есть
[03:04:50.760 --> 03:04:51.760]  действительно голова этого списка,
[03:04:52.760 --> 03:04:53.760]  и у каждого элемента есть следующий элемент.
[03:04:54.760 --> 03:04:55.760]  Да, вот тут подло еще подляночка.
[03:04:56.760 --> 03:04:58.760]  Это понятие список не имеет никакого отношения
[03:04:59.760 --> 03:05:00.760]  к понятию список в языке питон.
[03:05:00.760 --> 03:05:01.760]  Ну, потому что то, что называется
[03:05:02.760 --> 03:05:04.760]  списком в языке питон, в остальном мире называется массив.
[03:05:05.760 --> 03:05:06.760]  Да.
[03:05:07.760 --> 03:05:08.760]  Но тут, к сожалению, такая вот терминологическая проблема есть.
[03:05:09.760 --> 03:05:10.760]  Поэтому.
[03:05:11.760 --> 03:05:12.760]  Ну да.
[03:05:13.760 --> 03:05:14.760]  Потому что вектор...
[03:05:15.760 --> 03:05:16.760]  Нет, ну как сказать, вектор все-таки еще не во всем.
[03:05:17.760 --> 03:05:18.760]  Ну да, вектор есть геометрический хотя бы, да.
[03:05:19.760 --> 03:05:20.760]  Это да.
[03:05:21.760 --> 03:05:22.760]  Но что делать?
[03:05:23.760 --> 03:05:24.760]  Вот.
[03:05:25.760 --> 03:05:26.760]  Ну какие еще списки бывают?
[03:05:27.760 --> 03:05:28.760]  Ну, бывает, конечно, удобно, когда у вас есть
[03:05:28.760 --> 03:05:29.760]  двусвязанный список.
[03:05:30.760 --> 03:05:31.760]  Что такое двусвязанный список?
[03:05:32.760 --> 03:05:33.760]  Ну, двусвязанный список тактик,
[03:05:34.760 --> 03:05:35.760]  когда у вас есть голова и хвост,
[03:05:36.760 --> 03:05:38.760]  и как бы каждый элемент имеет указатель
[03:05:39.760 --> 03:05:40.760]  и на следующий, и на предыдущий.
[03:05:41.760 --> 03:05:42.760]  Вот.
[03:05:43.760 --> 03:05:44.760]  Но скажем так, это в принципе
[03:05:45.760 --> 03:05:47.760]  очень удобный способ сохранить какие-нибудь элементы,
[03:05:48.760 --> 03:05:50.760]  если вам от них не сильно много что нужно.
[03:05:51.760 --> 03:05:52.760]  Ну, что можно делать теперь с двусвязным списком?
[03:05:53.760 --> 03:05:55.760]  Ну, туда можно достаточно легко добавлять элементы,
[03:05:56.760 --> 03:05:57.760]  а также если у вас есть указатель
[03:05:58.760 --> 03:05:59.760]  и на следующий элемент,
[03:06:00.760 --> 03:06:01.760]  его достаточно легко удалить.
[03:06:02.760 --> 03:06:03.760]  Прям вот за 1 это очень удобно.
[03:06:04.760 --> 03:06:06.760]  Не все структуры данных обладают этим замечательным свойством.
[03:06:07.760 --> 03:06:13.760]  В куче фибоначи она удаляет минимум все равно за логарифом.
[03:06:14.760 --> 03:06:15.760]  Уменьшить по указательам можно за 1.
[03:06:16.760 --> 03:06:17.760]  Чего?
[03:06:18.760 --> 03:06:19.760]  Уменьшить по указательам можно за 1.
[03:06:20.760 --> 03:06:21.760]  Ну, типа да.
[03:06:22.760 --> 03:06:23.760]  Да, это можно.
[03:06:24.760 --> 03:06:25.760]  Но дело уменьшить, дело удалить.
[03:06:26.760 --> 03:06:27.760]  Но в списке вы все это делаете за 1.
[03:06:28.760 --> 03:06:29.760]  Вы можете там каты какой-нибудь.
[03:06:30.760 --> 03:06:31.760]  То есть, к сожалению, есть недостаток.
[03:06:32.760 --> 03:06:33.760]  Кат-элемент вы тут не найдете.
[03:06:34.760 --> 03:06:35.760]  Не по порядку, не просто вот хотя бы это.
[03:06:36.760 --> 03:06:37.760]  То есть, пробегаться надо.
[03:06:38.760 --> 03:06:39.760]  Но, условно говоря, если вам нужно хранить только вот,
[03:06:40.760 --> 03:06:41.760]  что вот есть такой набор элементов,
[03:06:42.760 --> 03:06:44.760]  иногда элементы нужно, скажем, доставать оттуда быстро,
[03:06:45.760 --> 03:06:46.760]  и вы знаете, где находится, то удобно.
[03:06:47.760 --> 03:06:48.760]  В общем, что еще удобнее?
[03:06:49.760 --> 03:06:50.760]  Если у вас есть указательный элемент,
[03:06:51.760 --> 03:06:52.760]  то если вы добавите в список какой-то другой элемент,
[03:06:53.760 --> 03:06:55.760]  то указатель на этот элемент не инвалидируется.
[03:06:56.760 --> 03:06:57.760]  То есть, как бы он все еще есть.
[03:06:58.760 --> 03:06:59.760]  Это очень удобно,
[03:07:00.760 --> 03:07:01.760]  потому что в каком-нибудь там условном сете
[03:07:02.760 --> 03:07:03.760]  или даже векторе оказывается с этим проблемой.
[03:07:04.760 --> 03:07:05.760]  То есть, там какие-то оговорки начинаются.
[03:07:06.760 --> 03:07:07.760]  Вот.
[03:07:08.760 --> 03:07:09.760]  Так что вот такие элементы.
[03:07:10.760 --> 03:07:11.760]  Ну да, вот очень удобно еще,
[03:07:12.760 --> 03:07:13.760]  что такие списки теперь можно объединять.
[03:07:14.760 --> 03:07:15.760]  Ну правда, односвязанные списки, конечно,
[03:07:16.760 --> 03:07:17.760]  объединять не очень удобно,
[03:07:18.760 --> 03:07:19.760]  если только вы, конечно, указатель,
[03:07:20.760 --> 03:07:21.760]  прям хвост, последний элемент не поддерживаете.
[03:07:22.760 --> 03:07:23.760]  Но какой-нибудь двусвязанный список, понятно,
[03:07:24.760 --> 03:07:25.760]  объединяете, просто за 1 очень удобно.
[03:07:26.760 --> 03:07:27.760]  Вот, да, тут.
[03:07:28.760 --> 03:07:29.760]  То есть, вот, в принципе,
[03:07:30.760 --> 03:07:31.760]  какая-нибудь есть простая реализация.
[03:07:32.760 --> 03:07:33.760]  То есть, вот, примерно вот,
[03:07:34.760 --> 03:07:35.760]  да, ну, там стиль такой, не будем сейчас,
[03:07:36.760 --> 03:07:37.760]  наверное, время тратить.
[03:07:38.760 --> 03:07:39.760]  Вот, но, конечно, да.
[03:07:40.760 --> 03:07:41.760]  То есть, список, конечно, не массив,
[03:07:42.760 --> 03:07:43.760]  потому что нет доступа по импексу,
[03:07:44.760 --> 03:07:45.760]  не говоря уже о расходах,
[03:07:46.760 --> 03:07:47.760]  о допамяти в лице тех же самых указателей.
[03:07:48.760 --> 03:07:51.760]  Ну и, конечно же, есть разреженное расположение в памяти.
[03:07:52.760 --> 03:07:54.760]  Это означает, что помимо элементов
[03:07:55.760 --> 03:07:57.760]  вам приходится хранить сами указатели.
[03:07:59.760 --> 03:08:00.760]  Ну, как тебе сказать?
[03:08:01.760 --> 03:08:02.760]  Ну, как тебе сказать?
[03:08:03.760 --> 03:08:04.760]  Если у тебя список интов,
[03:08:05.760 --> 03:08:06.760]  то у тебя рядом с интом хранится нечто,
[03:08:07.760 --> 03:08:08.760]  что весит не меньше самого инта.
[03:08:09.760 --> 03:08:10.760]  А в современных компиляторах,
[03:08:11.760 --> 03:08:12.760]  а в 6-7-битых, видимо, и больше.
[03:08:13.760 --> 03:08:14.760]  То есть, как бы, да, то есть,
[03:08:15.760 --> 03:08:16.760]  понятно, что в процентном соотношении,
[03:08:17.760 --> 03:08:18.760]  чем больше ты хранишь информацию в списке,
[03:08:19.760 --> 03:08:21.760]  тем, конечно, меньше жрет этот указатель.
[03:08:22.760 --> 03:08:24.760]  Но, тем не менее, это такой,
[03:08:25.760 --> 03:08:26.760]  то есть, хранишь ин элементов,
[03:08:26.760 --> 03:08:27.760]  хранишь меньше ин элементов,
[03:08:28.760 --> 03:08:29.760]  получается, тратишь там лишние 4n или 8n байт.
[03:08:30.760 --> 03:08:33.760]  Это не всегда есть хорошо.
[03:08:34.760 --> 03:08:35.760]  Ну, точнее так, такой недостаток есть.
[03:08:36.760 --> 03:08:38.760]  Ну, недостаток или, может быть, спецэффект.
[03:08:39.760 --> 03:08:40.760]  Просто о нем надо помнить, то есть, понятно.
[03:08:41.760 --> 03:08:42.760]  Чаще всего он, как бы, проблем не вызывает,
[03:08:43.760 --> 03:08:44.760]  но иногда по памяти надо приходится оптимизировать.
[03:08:45.760 --> 03:08:47.760]  Но зато, как бы, в списке можно вставлять,
[03:08:48.760 --> 03:08:50.760]  делать быструю вставку, в чем рандомное место достаточно,
[03:08:51.760 --> 03:08:52.760]  и быстро удалять тоже достаточно рандом.
[03:08:53.760 --> 03:08:54.760]  Вот.
[03:08:54.760 --> 03:08:55.760]  Вот.
[03:08:56.760 --> 03:08:57.760]  Так.
[03:08:58.760 --> 03:08:59.760]  Ну, соответственно, мы уже обсудили,
[03:09:00.760 --> 03:09:01.760]  что такое stack.
[03:09:02.760 --> 03:09:03.760]  Единственное, что тут надо объявить,
[03:09:04.760 --> 03:09:05.760]  это что такое у нас ATD.
[03:09:06.760 --> 03:09:07.760]  Абстрактный тип данных?
[03:09:08.760 --> 03:09:09.760]  Да.
[03:09:10.760 --> 03:09:11.760]  Да не что-то типа оточет.
[03:09:12.760 --> 03:09:13.760]  Да, это оно.
[03:09:14.760 --> 03:09:15.760]  Ну, это такое, действительно,
[03:09:16.760 --> 03:09:17.760]  такое математическое понятие,
[03:09:18.760 --> 03:09:19.760]  действительно абстрактный тип данных.
[03:09:20.760 --> 03:09:21.760]  То есть, за которым мы будем подразумевать,
[03:09:22.760 --> 03:09:23.760]  что у нас есть какой-то черный ящик,
[03:09:24.760 --> 03:09:25.760]  на котором мы имеем нотку,
[03:09:26.760 --> 03:09:27.760]  который внутри себя хранит какие-то элементы
[03:09:28.760 --> 03:09:29.760]  и умеет с ними делать вот это.
[03:09:30.760 --> 03:09:31.760]  Ну ладно, еще соговорка и топ.
[03:09:32.760 --> 03:09:33.760]  Ну, хотя есть еще, можно еще сделать то,
[03:09:34.760 --> 03:09:35.760]  что когда вы делаете поп,
[03:09:36.760 --> 03:09:37.760]  вы не просто делаете, а еще и возвращаете элемент,
[03:09:38.760 --> 03:09:39.760]  который и достали.
[03:09:40.760 --> 03:09:41.760]  То есть, он не просто вы его уничтожаете.
[03:09:42.760 --> 03:09:43.760]  Хотя обычно поп и топ это все-таки разные вещи,
[03:09:44.760 --> 03:09:45.760]  ну, как вы стояли, например.
[03:09:46.760 --> 03:09:47.760]  Но обычно вот под абстрактным типом данных,
[03:09:48.760 --> 03:09:49.760]  действительно, подразумевает такой потенциальный черный ящик,
[03:09:50.760 --> 03:09:51.760]  который вот с внешним миром взаимодействует
[03:09:52.760 --> 03:09:53.760]  только через интерфейс.
[03:09:54.760 --> 03:09:55.760]  И кто-то его использует,
[03:09:56.760 --> 03:09:57.760]  а тот, кто его использует, не знает,
[03:09:58.760 --> 03:09:59.760]  что там внутри себя делает стэк.
[03:10:00.760 --> 03:10:01.760]  Вот.
[03:10:02.760 --> 03:10:03.760]  Да, это называется черный ящик.
[03:10:04.760 --> 03:10:05.760]  Вот.
[03:10:06.760 --> 03:10:07.760]  Ну, стэк у нас мы поняли.
[03:10:08.760 --> 03:10:09.760]  Да, мы уже обсудили.
[03:10:10.760 --> 03:10:11.760]  Можно илизовать там с помощью массива.
[03:10:12.760 --> 03:10:13.760]  Вот есть очередь.
[03:10:14.760 --> 03:10:15.760]  Ну ладно, здесь, я думаю, тоже все понятно.
[03:10:16.760 --> 03:10:17.760]  Вот.
[03:10:18.760 --> 03:10:19.760]  Поддержка минимумов, это мы сегодня обсуждали.
[03:10:20.760 --> 03:10:21.760]  Вот.
[03:10:22.760 --> 03:10:23.760]  Да, это.
[03:10:24.760 --> 03:10:25.760]  Вот.
[03:10:26.760 --> 03:10:27.760]  Нет, ну, можем это обсудить,
[03:10:28.760 --> 03:10:29.760]  можем быстро обсудить как двоечную кучу,
[03:10:30.760 --> 03:10:31.760]  чтобы там потом не заморачиваться.
[03:10:32.760 --> 03:10:34.760]  Но, на самом деле, зачем нам нужна очередь из шести стэков,
[03:10:35.760 --> 03:10:36.760]  когда у нас есть очередь из двух стэков?
[03:10:37.760 --> 03:10:38.760]  Ну вот.
[03:10:39.760 --> 03:10:40.760]  Нам иногда хочется,
[03:10:41.760 --> 03:10:42.760]  ну нет, амортизация чаще всего, это круто, конечно,
[03:10:43.760 --> 03:10:44.760]  но иногда она не помогает.
[03:10:45.760 --> 03:10:47.760]  В каких ситуациях она не помогает?
[03:10:48.760 --> 03:10:50.760]  Ну, например, ну, типичная ситуация,
[03:10:51.760 --> 03:10:52.760]  когда она не помогает,
[03:10:52.760 --> 03:10:55.760]  это когда вам хочется делать персистентность.
[03:10:56.760 --> 03:10:57.760]  Ну, что такое персистентность, да?
[03:10:58.760 --> 03:11:01.760]  Ну, так вот персистентность это ка вы не просто реализуетez у Структура данных,
[03:11:02.760 --> 03:11:06.760]  а хотите в некотором смысле хранить все промежуточные версии,
[03:11:07.760 --> 03:11:09.760]  то есть структура, которые имели место.
[03:11:10.760 --> 03:11:11.760]  То есть, например,
[03:11:12.760 --> 03:11:13.760]  то есть, например, вот самое тупое,
[03:11:14.760 --> 03:11:15.760]  то есть персистентный стэк,
[03:11:16.760 --> 03:11:17.760]  то есть, например, вы там делаете какие-то,
[03:11:18.760 --> 03:11:21.760]  там, какие-тоänd finely то операции, например.
[03:11:22.760 --> 03:11:33.760]  то есть например вот предположим что у вас там есть операция допустим push 5 допустим push 7 push
[03:11:33.760 --> 03:11:57.160]  12 поп да значит push 34 push 57 push 179 поп вот вот в принципе вот очень хочется хранить
[03:11:57.160 --> 03:12:02.840]  ну вот то есть очень хочется иногда иметь доступ к не просто тому что получится в конце
[03:12:02.840 --> 03:12:09.800]  а хочется еще но ты мить доступ ко всем версиям то что в процессе на самом деле стэк претерпел 8
[03:12:09.800 --> 03:12:15.920]  изменений и после каждого он был в каком-то состоянии получается даже там 9 даже версии
[03:12:15.920 --> 03:12:23.240]  потому что есть изначально нулевая версия которая была пустая и что же у нас получается то есть нулевая
[03:12:23.240 --> 03:12:29.920]  версия у нас получается это пустой стэк первая версия это вот крестик и соответственно питочок
[03:12:29.920 --> 03:12:40.320]  вот их и вторая таки там вторая версия и так пишу вот давайте вот так 0 1 2 так то есть тут
[03:12:40.320 --> 03:12:52.040]  питочок тут питочок семерочкой значит дальше идет там крестик питочок с 12 это третья версия
[03:12:52.040 --> 03:12:58.840]  четвертая версия на самом деле практически идентична второй версии но и так далее понимаете
[03:12:58.840 --> 03:13:04.600]  да вот ну на самом деле да то есть это то есть например стэк это могло бы выглядеть так то есть
[03:13:04.600 --> 03:13:10.760]  конечно там действительно там можно захотеть делать допустим персистентную очередь персистентное
[03:13:10.760 --> 03:13:15.800]  дерево отрезков там скажем да я думаю многие из вас даже приписали что-нибудь подобное да ну как
[03:13:16.320 --> 03:13:26.480]  кто когда-нибудь писал какую-нибудь персистентную структуру данных хорошо вот да действительно
[03:13:26.480 --> 03:13:30.160]  такое в чем действительно видим что персистентность тут один из тех вопросов где легко ответил
[03:13:30.160 --> 03:13:35.400]  просто зачем это нужно ну потому что как бы персистентность в том или ином виде нужда
[03:13:35.400 --> 03:13:39.840]  просто в любой системе контрольной версии то есть в любом дите там и свои не лишене еще в этом
[03:13:39.840 --> 03:13:45.160]  роде практически да то есть понятно что там если вы там решили поменять на самом деле там одну
[03:13:45.160 --> 03:13:50.520]  строчку в одном файлике то наверно там звать там весь код всей компании наверно менять от этого
[03:13:50.520 --> 03:13:57.400]  не хочется то есть там как отдельно копировать куда-то правда поэтому поэтому хочется конечно
[03:13:57.400 --> 03:14:04.880]  делать как-то более оптимально но тогда возникает действительно интересный вопрос как же это делать
[03:14:04.880 --> 03:14:10.840]  но то есть как же это более оптимально сделать и например стэка в общем-то мы видим что это не
[03:14:10.840 --> 03:14:18.440]  очень сложно делается потому что на самом деле можно просто то есть действительно говорить то
[03:14:18.440 --> 03:14:23.160]  есть хранить вот как и какой-то вот такого рода дерево да то есть если уж кратко говорить там
[03:14:23.160 --> 03:14:34.760]  12 нет вроде 12 здесь вот а здесь ответвление на 34 вот так там 57 179 получается ну можно сколько
[03:14:34.760 --> 03:14:39.760]  угодно ветвиться и на каждый элемент то есть мы элементы как бы не удаляем и можно включать
[03:14:39.760 --> 03:14:47.200]  Gilbert то есть получается там действительно 0 ну оглашение нулевая версия указывает сюда
[03:14:47.200 --> 03:14:51.960]  первая версия указывает сюда вторая версия указывает сюда третья оказывается это четвертая
[03:14:51.960 --> 03:14:59.640]  указывает сюда же значит пятая версия оказывает сюда шестая сюда седьмая сюда и восьмая сюда же
[03:14:59.640 --> 03:15:15.320]  Очередь можно реализовать на двусвязанном списке, да саму по себе очередь, пожалуйста. А вот, а теперь
[03:15:15.320 --> 03:15:21.920]  вопрос, а как реализовать персистентную очередь? Вот персистентный stack реализовать с полпинка,
[03:15:21.920 --> 03:15:28.760]  вот равно как практически любую структуру данных, в которой как бы все подвешено за какой-то корень
[03:15:28.760 --> 03:15:34.720]  и доступ только вот сверху вниз, то есть потом, скажем, деревоотреска персистентируется очень
[03:15:34.720 --> 03:15:43.600]  легко. Само ссылающиеся, то есть, ну, то есть, если они там, если там, да, вот с двусвязанным
[03:15:43.600 --> 03:15:48.080]  списком будут проблемы, да. То есть, можно как бы делать персистентный массив идентичный,
[03:15:48.080 --> 03:15:51.880]  но обычно там первая статуя, что персистентный массив, это что-то типа персистентного
[03:15:51.880 --> 03:15:55.960]  деревоотреска. Ну, там, конечно, по-разному может быть, там все зависит от того,
[03:15:56.320 --> 03:16:05.040]  какую задачу вы решаете, что от вас требуется, да, там по-разному можно, но, да. И так, значит,
[03:16:05.040 --> 03:16:10.120]  это мы все, это у нас все имеем, вот, поэтому с персистентной очередью возникают проблемы,
[03:16:10.120 --> 03:16:14.560]  да. Ну, так и так, можно реализовать как персистентный там какой-нибудь массив,
[03:16:14.560 --> 03:16:19.240]  действительно, да, это не там, но это тогда придет к тому, что операции в очередь будут работать за
[03:16:19.240 --> 03:16:25.600]  логарифом. Вот, но, казалось бы, специально для этого у нас есть очереди из двух стэков,
[03:16:25.600 --> 03:16:31.080]  и каждый стэк может быть, там, можно реализовать персистентно. В общем, даже не каждая просто там
[03:16:31.080 --> 03:16:36.160]  персистентно сделать там в одном месте, просто тут будут там, где-то, где-то здесь будут указатель
[03:16:36.160 --> 03:16:44.680]  там in и указатель out, в чем проблема, да. Но проблема в том, что структура амортизирована. То есть,
[03:16:45.120 --> 03:16:51.240]  то есть, проблема в том, что некоторые операции работают не за О от единицы. И вот тут разница,
[03:16:51.240 --> 03:16:55.960]  да, что если они мы просто делали операции последовательно и не хранили там предыдущие версии,
[03:16:55.960 --> 03:17:02.560]  то да, мы могли говорить, что да, что у нас есть какие-то монетки, что мы там можем говорить,
[03:17:02.560 --> 03:17:09.200]  что да, у нас может так случиться, что операция будет работать там за О от Н, но это означает,
[03:17:09.200 --> 03:17:14.280]  что перед этим у нас было О от Н операции, которые работали за О от единицы, поэтому в среднем
[03:17:14.280 --> 03:17:21.400]  получается нормально, да. Ну, по большому счету, да, можно так говорить. Но в персистентности такое,
[03:17:21.400 --> 03:17:30.800]  персистентность, конечно, такой подход обрубает на корню. Потому что фишка персистентности не
[03:17:30.800 --> 03:17:35.280]  только в том, чтобы хранить, а в том, что иногда может захотеться просто делать операции не с
[03:17:35.280 --> 03:17:41.360]  последней версией стека, а с новыми, со всеми новыми. То есть, просто я скажу, возьми-ка версия,
[03:17:41.360 --> 03:17:46.600]  которая была вот здесь и сделай к ней что-нибудь. Вот, и тогда у меня тут вот к ней еще указатель
[03:17:46.600 --> 03:17:53.640]  прорисуется. Вот, если сделаем очередь на двух таких стеках, то можно на самом деле брать версию,
[03:17:53.640 --> 03:18:00.760]  в которой push приводит к каким-то проблемам и постоянно туда делать push. Вот, и тогда это будет
[03:18:00.760 --> 03:18:08.440]  долго. То есть, как выяснится, что да, как сказал бы Classic, ух ты, я могу заставить того старого
[03:18:08.440 --> 03:18:18.280]  хрюча поковырять в носу еще раз, и еще раз, и еще раз. Вот, да. Ну, как вы помните, так баловался
[03:18:18.280 --> 03:18:24.520]  Ron Weasley с вот этим вот моноклим, с повтором на чемпионате мира по квитичу. Вот, да, потому что
[03:18:24.520 --> 03:18:28.720]  там была функция замедленного повтора, какого-то замедленного повтора. Да, поэтому да, я могу
[03:18:28.720 --> 03:18:37.400]  заставить того хрюча поковырять в носу. Да, вот, вот здесь то же самое. Вот, и тогда получается,
[03:18:37.400 --> 03:18:42.080]  что уже любая абортизация превращается в то, что вы уже реально не можете гарантировать,
[03:18:42.080 --> 03:18:48.320]  что у вас будет работать недолго. Поэтому, как бы, если вы хотите реализовать очередь на стеках,
[03:18:48.320 --> 03:18:56.960]  то нужно реализовать ее таким образом, чтобы все операции работали за от единицы в честную. Вот.
[03:18:56.960 --> 03:19:05.360]  Именно, но попытки это как-то модифицировать, именно приводят к, собственно, очереди на шести
[03:19:05.520 --> 03:19:13.760]  стеках. То есть наша цель реализовать, то есть какая у нас цель теперь, то есть наша цель
[03:19:13.760 --> 03:19:20.800]  реализовать очередь, то есть там как вот на шести таким образом, чтобы как бы каждый пуш и каждый
[03:19:20.800 --> 03:19:27.760]  поп гарантированно делал вот от единицы операции, причем жестко, не в среднем, а именно жестко. Вот.
[03:19:27.760 --> 03:19:37.320]  И это важно. Да, ну сейчас у нас будет такой многоинтерационный подход. То есть как бы это
[03:19:37.320 --> 03:19:42.080]  одна из тех структур данных, когда придется, значит, это обсудить ее, значит, постепенно, значит,
[03:19:42.080 --> 03:19:50.200]  один раз, потом вернуться, обсудить второй, потом третий и так далее. Так что работает она так.
[03:19:50.200 --> 03:19:59.320]  Значит, у нее есть, значит, в очереди есть шесть стек. Значит, ну, по идее, как бы начало вот L&R это те
[03:19:59.320 --> 03:20:03.880]  самые стеки, которые мы рисовали только в другую сторону. То есть как бы по умолчанию сюда
[03:20:03.880 --> 03:20:15.320]  добавляется, отсюда достается. Да, то есть основная идея будет заключать в том, что вот эти все стеки
[03:20:15.320 --> 03:20:27.480]  нужны, чтобы там делать в фоновом режиме перекопировки. Ну да, но если считается,
[03:20:27.480 --> 03:20:37.720]  что новый буфер создается за от единицы, то да. В принципе, да, можно. Вот. Но что у нас для этого
[03:20:37.720 --> 03:20:43.120]  будет? Но для того, чтобы это адекватно делать, у нас есть два режима. Есть режим, когда мы реально
[03:20:43.120 --> 03:20:53.440]  начинаем в фоновом режиме что-то перекопировать. Ну вот. А это, сейчас, давай, не будем одновременно
[03:20:53.440 --> 03:21:00.640]  отвечать на один тот же вопрос. Вот. Идея в фоновом режиме в данном случае означает следующее, что мы
[03:21:00.640 --> 03:21:06.440]  хотим делать операцию за от единицы, но константу мы себе не прописали. Поэтому идея будет такая,
[03:21:06.440 --> 03:21:12.120]  что когда у нас там придет операция, мы сделаем за от единицы операцию, то есть там достанем нужный
[03:21:12.120 --> 03:21:20.120]  элемент или засунем. Но при этом, но также в эту константу мы еще потратим сколько-то времени,
[03:21:20.120 --> 03:21:25.240]  чтобы, скажем, перекопировать сколько-то еще элементов, например, три. Ну у нас тут константа
[03:21:25.240 --> 03:21:33.400]  будет три, ну понятно, может быть там 4, 5, 10, но как бы суть одна. Ну да. Ну то есть один элемент и
[03:21:33.400 --> 03:21:38.040]  еще что-то делать. То есть мы в константу это жрем. То есть как бы, то есть, по сути, да, мы
[03:21:38.040 --> 03:21:43.000]  победим абортизацию с помощью еще более жирной константы. По большому счету, да. Просто,
[03:21:43.000 --> 03:21:53.240]  ну да. То есть это что-то из цикла, что как бы не все, что мы делаем действительно,
[03:21:53.240 --> 03:21:57.960]  товарищ директор, какой-нибудь там пользователь действительно увидит, ему может показаться,
[03:21:57.960 --> 03:22:02.960]  господи, вы просто суете в стерпи, что вы там так тормозите? Отормозите, потому что вы там в тихую
[03:22:03.040 --> 03:22:09.920]  еще там какие-то махинации по манипуляции проводите. Вот. Но проводите вы, то есть и пользователю
[03:22:09.920 --> 03:22:15.600]  об этом знать не обязательно, но если только, конечно, он не сильно нервничает от этого. Вот.
[03:22:15.600 --> 03:22:19.720]  Но он как бы сильно больше будет нервничать, если вы больше операции будете, да, быстро-быстро-быстро-быстро,
[03:22:19.720 --> 03:22:25.840]  а потом придет какой-нибудь вот эта абортизация, и тогда на операцию на миллион вы вообще зависите.
[03:22:25.840 --> 03:22:32.440]  Вот. То есть лучше как бы приучить его к тому, что он будет ждать чуть дольше,
[03:22:32.440 --> 03:22:41.680]  зато железобетона. И так. В нормальном режиме этого не происходит. То есть пока у нас в этом
[03:22:41.680 --> 03:22:48.560]  стеке элементов меньше, чем вот в этом. То есть мы спокойно работаем и не паримся. Более того,
[03:22:48.560 --> 03:22:54.560]  правда, мы еще гарантируем, интересный факт, мы еще гарантируем, что вот это, будьте здоровы,
[03:22:54.560 --> 03:23:04.160]  вот счастье. Эти два стека, на самом деле, в них одни и те же элементы. Зачем нам это нужно? Сразу
[03:23:04.160 --> 03:23:08.760]  скажу. То есть когда включится, когда мы будем заниматься перекопированием, да, то есть что у нас,
[03:23:08.760 --> 03:23:14.080]  когда мы включим режим перекопирования, вот когда в L будет больше элементов, чем в R,
[03:23:14.080 --> 03:23:20.600]  да, то наша цель будет, то тогда произойдет следующее. То есть у нас тут будет какой-то L,
[03:23:20.600 --> 03:23:25.280]  тут будет какой-то R. Наша задача будет добиться того, чтобы эти L и R оказались в одном стеке.
[03:23:25.280 --> 03:23:33.320]  Понимаете, да? Но при этом пока мы это делаем, у нас как бы будут еще какие-то работы, в том числе
[03:23:33.320 --> 03:23:37.840]  с R-кой. И нам нужно хранить как бы какие-то вот эти вот элементы, которые надо доставать из
[03:23:37.840 --> 03:23:44.600]  очереди. Именно для этого мы храним как бы копию. То есть позже эта копия будет там ликвидирована,
[03:23:44.600 --> 03:23:49.680]  соответственно. Но пока мы с ней работаем, а тем самым мы там и будем заниматься тем,
[03:23:49.680 --> 03:24:00.880]  что будем делать какое-то перекопирование. Пока L меньше, нет, пока L меньше, то мы ничего не
[03:24:00.880 --> 03:24:10.400]  делаем. Если L, если нам пришел push, добавляем в L, если пришел pop, удаляем из R и из RC. И еще,
[03:24:10.400 --> 03:24:15.440]  если в RC штрих может так случиться, что у нас тут есть какие-то лишние элементы, давайте пару
[03:24:15.440 --> 03:24:22.760]  тройка элементов еще отсюда зачистим. Если тут еще в RC штрихе, ну как мы позже увидим,
[03:24:22.760 --> 03:24:27.040]  тут могут оказаться еще какие-то лишние, ну в зависимости от реализации. По идее я бы,
[03:24:27.040 --> 03:24:31.800]  конечно, по умолчанию, особенно без презентации, рассказывал бы версию, где в этом режиме тут все,
[03:24:31.800 --> 03:24:36.600]  вот эти стеки пусты, их больше не существует. То есть они не существуют, они просто пустые,
[03:24:36.600 --> 03:24:42.160]  больше ничего делать не надо. Но там как бы по-разному можно реализовывать. Значит, смотрите,
[03:24:42.160 --> 03:24:54.800]  а вот дальше начинается шоу. Давайте разбираться, что тут написано и нарисовано. А нарисовано вот,
[03:24:54.800 --> 03:25:01.280]  что как только L, тут в стеке стало на один элемент больше, чем R, сразу врубается режим
[03:25:01.280 --> 03:25:09.880]  перекопирования. Какова цель этого режима перекопирования? Цель заключается в том,
[03:25:09.880 --> 03:25:17.280]  чтобы все поместить в, чтобы был вот у нас L, R, а надо сделать так, чтобы все эти элементы
[03:25:17.280 --> 03:25:26.800]  в том же порядке оказались вот в этом стеке. Понимаете, да? Ну то есть смотрите. Ну то есть
[03:25:26.800 --> 03:25:31.720]  наша цель такая, давайте я тут, вот тут я, пожалуй, порисую. То есть хочется сделать так,
[03:25:31.720 --> 03:25:38.200]  теоретически, чтобы у нас вот этот стек L, вот у нас R. Вот в какой-то момент, тут оказалось там,
[03:25:38.200 --> 03:25:50.040]  допустим, 9, 7, 2, 5, 8, а тут там 4, 3, 2, 1. Я хочу провернуть какие-то махинации,
[03:25:50.040 --> 03:25:57.320]  чтобы у меня вот этот стек стал типа пустым, по крайней мере без этих элементов, прочего,
[03:25:57.320 --> 03:26:13.120]  ну вот. А тут оказались 9, 7, значит 2, 5, 8, 4, 3, 2, 1. Вот по крайней мере в первом приближении я хочу
[03:26:13.120 --> 03:26:25.800]  вот это. Вот у меня такая идея. То есть смотрите, как это будет работать. То есть когда у меня это
[03:26:25.800 --> 03:26:32.040]  только началось, но по факту это будет работать немножко по-другому. Значит, теперь идея будет
[03:26:32.040 --> 03:26:37.280]  такая. Вот сейчас мы будем раскрывать, зачем мне нужны остальные стеки. Остальные стеки нужны
[03:26:37.280 --> 03:26:46.680]  вот зачем. Значит, жил был L, жил был L'. Помните, который был пустым, да? Так вот, идея такая.
[03:26:46.680 --> 03:26:54.200]  Теперь, то есть я буду делать какие-то махинации по перегонке вот этого всего вот сюда, но мне
[03:26:55.080 --> 03:27:06.680]  нужно делать пуши и мне нужно делать попы тем временем. Значит, пуши я буду делать в стек L'. Вот сюда
[03:27:06.680 --> 03:27:15.640]  я буду делать пуш. Помните, я поддерживал вариант, что у меня есть не только стек R, но и его копия.
[03:27:15.760 --> 03:27:23.600]  Так вот, я буду доставать элементы из него и у меня будет цель, но тогда у меня, значит,
[03:27:23.600 --> 03:27:29.840]  я ставлю цель, что до того, как он опустеет, у меня будет цель, соответственно, завершить
[03:27:29.840 --> 03:27:37.520]  перекопирование. Но что я должен делать для перекопирования? Для перекопирования я буду
[03:27:37.520 --> 03:27:45.440]  делать следующее. Комбинация следующая. Что я хочу сделать? Я хочу, значит, на первом шаге,
[03:27:45.440 --> 03:27:52.400]  как я это перекопирование сделаю? В реальности я его сделаю так. Первое, что я хочу, вот сейчас
[03:27:52.400 --> 03:28:00.040]  я просто тоже на доске сейчас нарисую. Так, доска там, кстати, адекватная, видна? Окей, все хорошо.
[03:28:00.040 --> 03:28:05.720]  Вот, значит, смотрите, то есть реально буду я это делать так. То есть вот это я вот продекларировал,
[03:28:05.720 --> 03:28:14.480]  что я хочу. Значит, первое, что я хочу, значит, я хочу сделать так, чтобы у меня теперь в L было
[03:28:14.480 --> 03:28:23.360]  то же, что было, 9, 7, 2, 5, 8. В R, вот это L, в R у меня должна быть пустота, а все эти элементы
[03:28:23.360 --> 03:28:37.240]  у меня будут находиться в S. Я, честно говоря, не знаю. Ну, не знаю, может его, конечно, надо было
[03:28:37.240 --> 03:28:45.600]  TMP назвать, но не важно. Нет, не скажите, потому что, скажем так, потому что здесь так, смотрите,
[03:28:45.600 --> 03:28:50.360]  но этимология, да, ну LR это просто потому что мы тебе воображаем очередь двух стеков как слева
[03:28:50.360 --> 03:29:01.440]  направо. Значит, RC это значит R копия. RC штрих это запасная копия R. Ну, заранее скажу, так как
[03:29:01.440 --> 03:29:06.360]  мы с RC будем работать, из нее что-то добавлять, то когда мы будем возвращать все элементы в R и
[03:29:06.360 --> 03:29:12.000]  закидывать новые, мы будем добавлять не только в R, но и в RC штрих. И тогда, когда мы все сделаем,
[03:29:12.000 --> 03:29:20.200]  мы просто посвапаем стеки RC и RC штрих. Да, да, ну понятно, да, ну сразу оговоримся, да, посвапать,
[03:29:20.200 --> 03:29:24.680]  например, посвапать два стека, проблем обычно нет, надо просто посвапать указательных вершины,
[03:29:24.680 --> 03:29:31.320]  правда? Вот, да, но на всякий случай, да, из прелевских контейнеров практически все поддерживают метод
[03:29:31.320 --> 03:29:36.680]  swap, который позволяет их свапать за O от единицы. Ну, как вы все любите, векторы тоже очень легко
[03:29:36.680 --> 03:29:42.000]  посвапать за O от единицы, да, потому что что там посвапать? Посвапать сайзы, посвапать
[03:29:42.000 --> 03:29:48.160]  capacity, посвапать указатель на буфер, все, больше ничего не надо. Вот, поэтому это делается за O от
[03:29:48.160 --> 03:29:53.560]  единицы. Ну, там аналогично там делаются всякие сеты, мапы и прочее, но вот поэтому там умеют,
[03:29:53.560 --> 03:30:03.200]  поэтому как бы прикольно иногда писать там какой-нибудь вектор, век.swap. Ну, по-моему, да,
[03:30:03.200 --> 03:30:08.720]  скорее всего, почти, наверное, swap у всех контейнеров перегружен так, что он вызывает именно этот
[03:30:08.720 --> 03:30:15.520]  метод, да, это да, но это уже подробнее на сях. Так вот, значит, это я просто говорил того,
[03:30:15.520 --> 03:30:20.400]  что свапа со стеков, это там техническая, это простая техническая деталь. Теперь, смотрите,
[03:30:20.400 --> 03:30:26.480]  значит, R пустой, значит, из этого и тут мы достали элементы и положили их сюда, как мы их положили,
[03:30:26.480 --> 03:30:31.120]  ну, в этом же порядке получилось и положили, ну, как вот один, потом два, потом три, потом четыре,
[03:30:31.120 --> 03:30:47.520]  получилось вот так. Видите, да? Это первая часть. Это мы делаем какое-то константное число операции
[03:30:47.520 --> 03:30:59.680]  из вот это вот, что мы хотим. Нет, ну, не только, но нам нужна, как бы понятно, нам сделают...
[03:30:59.680 --> 03:31:06.960]  Ну, нам будет полезно представить, что у нас тут x элементов, а тут x плюс один изначально был, да, то есть
[03:31:06.960 --> 03:31:18.320]  нам нужно сделать x перекладывание отсюда-сюда, то есть x попов и x push, да? Ну да, то есть пока Rc, да,
[03:31:18.320 --> 03:31:25.000]  то есть, конечно, Rc опустошится там не раньше, чем через x попов, да, то есть это означает,
[03:31:25.000 --> 03:31:32.760]  что за x попов мы должны проделать вот это перекопирование. Значит, да, сделать мы хотим конкретно
[03:31:32.760 --> 03:31:39.960]  следующее, перегнать x элементов stack s, вот он, да, второе, что мы хотим теперь сделать, перегнать
[03:31:39.960 --> 03:31:47.440]  вот эти элементы из L в R, то есть будет вот примерно так, то есть вот тут 9, 7, 2, 5, 8 будет,
[03:31:47.440 --> 03:32:02.680]  вот, ну вот, и а в S пока сохранятся те же 4, 3, 2, 1 и третья операция вернуть элементы из S в R,
[03:32:02.680 --> 03:32:10.440]  то есть у меня будет пустой L, пустой S, а в R будет все, правда, с маленькой оговоркой, конечно,
[03:32:10.440 --> 03:32:15.840]  еще, правда, с маленькой оговоркой нам придется следить, потому что дело в том, что пока вы это
[03:32:15.840 --> 03:32:23.960]  делаете, какие-то из этих элементов могут быть попопаны, но понятно, это маленькая техническая
[03:32:23.960 --> 03:32:29.320]  деталь, просто когда вы вот на вот этой фазе, когда вы пытаетесь добавить сюда что-то, то вы говорите,
[03:32:29.320 --> 03:32:35.680]  что если уже там произошел, ну здесь вряд ли, да, но вот, но на этом перекладывании, когда там начал
[03:32:35.680 --> 03:32:40.480]  происходить, если приходить добавить элементов, он уже был попопан, ну по количеству определяете,
[03:32:40.480 --> 03:32:58.160]  то значит его туда добавлять не надо уже, ну да, ну да, и чего мы хотим, да, но да, но да,
[03:32:58.160 --> 03:33:04.880]  важный момент, дело в том, что когда мы вот это делаем, мы это делаем, да, то есть мы это делаем
[03:33:04.880 --> 03:33:11.920]  еще с участием rc-штрих, потому что rc-штрих здесь пустой, здесь s изначально пустой, когда вы
[03:33:11.920 --> 03:33:29.800]  перекладывали из r в s, конечно же, rc-штрих у вас все еще пустой, да, далее, перекладываем из l в r,
[03:33:29.800 --> 03:33:35.640]  но при этом каждый раз, когда мы кладем элемент в r, мы кладем его еще и в rc-штрих, то есть rc-штрих
[03:33:35.640 --> 03:33:46.720]  в итоге будет тоже 9, 7, 2, 5, 8, и более того, когда из s в r мы возвращаем элементы, мы тоже говорим,
[03:33:46.720 --> 03:33:59.040]  что вот у меня в rc-штрих тоже будет это вот все, вот, да, то есть rc, да, для этого, да, то есть мы все попы
[03:33:59.040 --> 03:34:16.920]  делаем из rc, пуши делаем в l-штрих, вот, ну да, а теперь смотрите, важный момент, после этого,
[03:34:16.920 --> 03:34:23.720]  ну после того, как только у вас это перекопирование закончится, ну давайте так, вот это перекопирование,
[03:34:23.720 --> 03:34:30.680]  ну сколько нам операции требует? Оно требует, ну как легко убедиться, там сколько? 3x плюс 1 операции,
[03:34:30.680 --> 03:34:42.120]  но я обычно положить элемент в r и rc-штрих, я считаю тут заодно, я именно перегонку считаю,
[03:34:42.120 --> 03:34:51.120]  ну да, чтобы rc выжил, нужно, чтобы там было действительно x элементов, да,
[03:34:51.120 --> 03:35:02.840]  вот, ну даже не x, а x плюс 1, потому что когда вы сделали вот этот пуш,
[03:35:02.840 --> 03:35:08.920]  который привел режим перекопирования, вы уже сразу можете его начать, поэтому оказывается,
[03:35:08.920 --> 03:35:17.480]  что вам в принципе у вас не x шаров на это, а x плюс 1, поэтому оказывается, что в принципе можно
[03:35:17.480 --> 03:35:22.480]  на каждом шаре, вот, то есть при каждом далее следующем пуш и попе вы можете сделать,
[03:35:22.480 --> 03:35:41.320]  на самом деле только достаточно сделать 3 из этих операций, да, так, нет, достаем из rc,
[03:35:41.320 --> 03:35:45.720]  если нам приходит, то есть там говорят, если пришел пуш, мы будем так, кладем в l-штрих и
[03:35:45.720 --> 03:35:53.880]  делаем 3 из этих операций, если нам пришел поп, то мы, говорим, достаем из rc и делаем еще 3 операции,
[03:35:53.880 --> 03:35:58.320]  еще, кстати, как только режим перекопирования делается, мы тоже делаем 3 операции,
[03:35:58.320 --> 03:36:11.640]  так мы его в l-штрих кладем, в режиме перекопирования мы кладем элементы не в l, а в l-штрих,
[03:36:12.240 --> 03:36:23.520]  да, то есть в конце мы, конечно, свапаем, во-первых, rc с rc-штрих, а во-вторых, мы свапаем l с l-штрихом,
[03:36:23.520 --> 03:36:30.640]  это важно, то есть как бы l-штрих будет пустой, s будет пустой, в l-е что-то находится, вот единственная
[03:36:30.640 --> 03:36:37.120]  только оговорочка, что в результате этого свапа может оказаться, что в rc на самом деле есть какое-то
[03:36:37.120 --> 03:36:44.320]  количество элементов, которые, потому что не все попали, то есть именно поэтому на самом деле у нас
[03:36:44.320 --> 03:36:53.680]  тут хранится вот этот вот, то есть вот эти вот x и как, потому что по окончании перекопирования,
[03:36:53.680 --> 03:36:59.800]  да, вот у вас r и rc, это бывший rc-штрих, у них будут одинаковые элементы, тут все актуально и хорошо,
[03:36:59.800 --> 03:37:07.880]  вот тем более, что тут все актуально и хорошо, более того, там еще есть какой-то определенный
[03:37:07.880 --> 03:37:12.720]  запас есть, даже интересно посмотреть, то есть даже сейчас проанализирую, можно проанализировать,
[03:37:12.720 --> 03:37:18.600]  сколько элементов тут, сколько элементов тут, но в rc-штрихе что-то осталось, что мы не попали,
[03:37:18.600 --> 03:37:22.400]  поэтому вам придется, видимо, в фоновом режиме, пока нормальный режим работает,
[03:37:22.400 --> 03:37:37.560]  все-таки тут что-то зачищать. В нормальном режиме удаляем 3 раза, пытаемся сделать pop из rc-штриха,
[03:37:37.560 --> 03:37:44.480]  ну пытаемся в том плане, если пустой, то не делаем, вот так что вот такая вот,
[03:37:44.480 --> 03:37:51.840]  но s он автоматически опустошается, потому что когда вы все передали, видите, вот в этом
[03:37:51.840 --> 03:37:56.680]  месте он как бы в начале перекопирования пустой, в конце пустой, больше мы его не пользуем,
[03:37:56.680 --> 03:38:12.640]  в нормальном режиме s мы не пользуем, так что вот еще раз, так что получается вот такой режим,
[03:38:13.240 --> 03:38:28.800]  то есть режим перекопирования такой. Ну да, мы подразумеваем такое. Да, вот, ну вот,
[03:38:28.800 --> 03:38:34.400]  на самом деле это естественный вопрос, что у нас в нормальном режиме в rc-штрихе что-то
[03:38:34.400 --> 03:38:40.160]  находится и не случится ли так, что прежде чем мы опустошим rc-штрих, окажется, что у нас там на
[03:38:40.160 --> 03:39:10.120]  самом деле включился новый перекопирование. Да, вы правы, можно и так,
[03:39:11.080 --> 03:39:23.880]  но там разные варианты есть. Нет, это шло вот откуда, нам нужно поддерживать одновременно r и rc в
[03:39:23.880 --> 03:39:27.800]  нормальном режиме, это нужно для того, чтобы когда начнется перекопирование, мы как бы с
[03:39:27.800 --> 03:39:34.920]  rc работали, а была надежная копия, с которой мы работаем. Вот, да, поэтому как бы нам нужно,
[03:39:34.920 --> 03:39:38.600]  чтобы когда перекопирование закончится, у нас будут два равных, вот две равных r,
[03:39:38.600 --> 03:39:46.520]  поэтому нам нужен rc-штрих. Нет, нет, нет, мы их свапаем, оно становится rc-штрих, и то,
[03:39:46.520 --> 03:39:51.680]  что отсюда не попопали, значит мы там попаем либо в нормальном режиме, либо это. Ну, мне
[03:39:51.680 --> 03:40:10.720]  показали, что. Ну, да, то, что в принципе, да, то есть заметь, то есть, ну да, то есть,
[03:40:10.720 --> 03:40:27.120]  ну да, давайте, давайте я еще скажу, потому что, да, у меня и микрофон, не в смысле,
[03:40:27.120 --> 03:40:31.640]  что я крутой, а в смысле, что нашим телезрителям будет сложнее услышать ответы из зала, вот,
[03:40:31.640 --> 03:40:36.960]  соответственно, вот, но да, действительно, действительно, есть вот действительно такой
[03:40:36.960 --> 03:40:41.960]  эффект, что находится, что будет находиться по окончании перекопирования в rc-штрих. На самом
[03:40:41.960 --> 03:40:48.000]  деле, какой-то префикс вот этого r, который был на момент начала перекопирования. Да, ну,
[03:40:48.000 --> 03:40:52.360]  просто, ну, на самом деле, там будет сколько-то элементов, то есть те же элементы, но минус,
[03:40:52.360 --> 03:41:05.040]  сколько было по оно. Ну, да, то есть, это означает, да, в принципе, нет, более того,
[03:41:05.080 --> 03:41:10.160]  смотрите, по большому счету можно даже сказать так, я вот даже попробую расписать так, ладно,
[03:41:10.160 --> 03:41:19.440]  сейчас нас, конечно, начнут выгонять, на самом деле. Ну, да, нет, ну, сейчас просто вот, сейчас вот
[03:41:19.440 --> 03:41:25.000]  формальное окончание пара, да, через 10 минут нас точно начнут жестко выгонять, ладно, но сейчас я
[03:41:25.000 --> 03:41:34.000]  думаю, это мы уложим, да. Значит, получается примерно следующее. Внимание, внимание, вот, то есть,
[03:41:34.000 --> 03:41:39.600]  просто, ну, допустим, можно даже проанализировать, смотрите, предположим, что у вас rc-штрих изначально
[03:41:39.600 --> 03:41:45.840]  пустой, а вот тут оказалось, что в l-ке у нас x плюс один элемент, в r-ке оказалось, значит,
[03:41:45.840 --> 03:41:53.280]  x элементов, ну, там понятно, в rc автоматически тоже оказалось x элементов, да. Итак, мы начинаем
[03:41:53.280 --> 03:41:59.760]  перекопирование, которое закончится через x операции, да, и давайте себе представим, что в
[03:41:59.760 --> 03:42:10.280]  этом x-е было, там, допустим, k пушей, вот в этим x-е операции и, соответственно, x минус k попов,
[03:42:10.280 --> 03:42:20.160]  да. Тогда давайте посмотрим, тогда какая у нас будет диспозиция по окончании перекопирования,
[03:42:20.160 --> 03:42:25.840]  то есть, когда мы l и l-штрих местами поменяем, rc, rc-штрих, тогда мы обнаружим, что в l-ке у нас
[03:42:25.840 --> 03:42:37.480]  будет ровно k элементов, логично, да, а в r-ке будет, ну, вот сколько будет элементов в r-ке,
[03:42:37.480 --> 03:42:48.800]  да, 2, совершенно верно, 2x плюс 1 минус x плюс k, то есть, в переводе говоря, x плюс k и еще и плюс
[03:42:48.800 --> 03:42:57.560]  эти, но при этом, значит, это у нас l-ка, это у нас r-ка, да, ну, rc, понятно, копия,
[03:42:57.560 --> 03:43:05.040]  копия, поэтому тут будет x плюс k плюс 1, а сколько будет элементов в rc-штрих?
[03:43:05.040 --> 03:43:17.760]  Ну вот, нет, не скажите, их будет ровно k, потому что это будет ровно те элементы,
[03:43:17.760 --> 03:43:26.880]  то есть, сколько было не попов, а их было ровно k. В режиме перекопирования будет выполнена,
[03:43:26.880 --> 03:43:31.960]  вот если мы будем в режиме перекопирования делать x-операции по 3, то у нас получится,
[03:43:32.040 --> 03:43:36.600]  на перекопирование потребуется потом ровно и, то есть, будет ровно x-операции.
[03:43:36.600 --> 03:43:53.720]  Но оно опустеет ровно через x, то есть, для этого нужно x попов сделать.
[03:43:53.720 --> 03:44:01.360]  Нет, ну тогда по факту перекопирования закончивших мы к этому моменту уже все перегоним.
[03:44:01.360 --> 03:44:06.040]  Мы все перегоним, ну да, ну тогда у нас получается, что, ну а дальше будем просто использовать
[03:44:06.040 --> 03:44:12.640]  h-трих и rc, пока rc не закончится. Надо запомнить, что мы завершили перекопирование и тогда просто
[03:44:12.640 --> 03:44:20.000]  включить нормальный режим. Ну да, но там просто может быть более точная, потому что я вот говорил,
[03:44:20.000 --> 03:44:25.240]  что мы сейчас ничего не включаем и сейчас вот смотрим, что у нас получится, потому что
[03:44:25.240 --> 03:44:31.320]  до момента окончания перекопирования тогда будет ровно вот это, то есть, перекопирование закончится
[03:44:31.320 --> 03:44:35.720]  в том виде, в котором мы писали ровно через x, да, я понял, что могут быть другие версии, да, то есть,
[03:44:35.720 --> 03:44:40.880]  другие версии, может они там кому-то поражут более понятными, да, но просто давайте уже сейчас,
[03:44:40.880 --> 03:44:46.840]  если мы сейчас углубимся просто в обсуждении того, что это разное, то есть, я буду, там кому-то будет
[03:44:46.840 --> 03:44:54.640]  непонятно. Так вот, итак, вот у нас h-трих пустое, s пустое, значит l такое, но тогда смотрите,
[03:44:54.920 --> 03:45:00.280]  получается, значит, здесь у нас находится, то есть здесь у нас находятся элементов,
[03:45:00.280 --> 03:45:06.840]  получается k, здесь, но, здесь находится элементов на x плюс 1 больше. То есть означает, что режим
[03:45:06.840 --> 03:45:12.180]  перекопирования начнется в лучшем случае через x плюс 2 элемент, а x плюс 2 больше,
[03:45:12.180 --> 03:45:18.040]  поэтому в принципе оказывается, что вы там, в фоновом режиме на фоне нормального режима
[03:45:18.040 --> 03:45:23.040]  и живо, можете отсюда выпиливать даже не по три элемента, а по одному даже.
[03:45:23.040 --> 03:45:28.040]  Да, тогда на фазе перекопирования нам РЦ-шрифт тоже будет обрабатывать.
[03:45:28.040 --> 03:45:36.040]  Нет, тогда на фазе перекопирования... Нет, просто к следующему перекопированию РЦ-шрифт уже будет пустым. Гарантированно.
[03:45:36.040 --> 03:45:38.040]  Нет, на фазе перекопирования нам РЦ-шрифт уже будет обрабатывать.
[03:45:38.040 --> 03:45:41.040]  Давайте просто добавим кучу элементов в ВЭЛЬ.
[03:45:41.040 --> 03:45:46.040]  Ну и что? Да, только на каждом добавлении ВЭЛЬ ты выкинешь РЦ-шрифт.
[03:45:46.040 --> 03:45:51.040]  Потому что в данном случае ты там добавишь девятку, выкинули игр, добавили десятку.
[03:45:51.040 --> 03:45:57.040]  А потому что мы себе добавляем, что в нормальном режиме делаем еще допоговорку.
[03:45:57.040 --> 03:45:59.040]  То есть дополнительный оговорок.
[03:45:59.040 --> 03:46:04.040]  Выкинули игры, если у нас элементы иксы, то идут по сути после единицы.
[03:46:04.040 --> 03:46:15.040]  Нет, потому что по факту эти актуальная очередь хранится в ЭЛЕР.
[03:46:15.040 --> 03:46:19.040]  Нет, в ЭЛЕР и в РЦ, потому что мы их посвапали.
[03:46:19.040 --> 03:46:23.040]  Мы посвапали там в конце режима перекопирования и ЦРЦ-шрифт.
[03:46:23.040 --> 03:46:27.040]  Поэтому тут получаются адекватные копии, а тут по факту уже мусор.
[03:46:27.040 --> 03:46:36.040]  Если представить, что вот эта ситуация сразу после завершения режима перекопирования, то у нас х равно 2 и х 0,1.
[03:46:36.040 --> 03:46:39.040]  Ну, кстати, да.
[03:46:39.040 --> 03:46:41.040]  Нет, кстати, нет.
[03:46:41.040 --> 03:46:43.040]  Хотя...
[03:46:43.040 --> 03:46:47.040]  Ну, там неравны именно 2 и 1.
[03:46:47.040 --> 03:46:53.040]  Потому что, по-видимому, режим перекопирования закончился, потому что тут было 5,4,3, тут было 2 и 1.
[03:46:53.040 --> 03:46:56.040]  То есть это уже мусор, потому что копируется как бы.
[03:46:56.040 --> 03:46:59.040]  Нет, это можно сказать, откуда этот мусор взялся.
[03:46:59.040 --> 03:47:08.040]  То есть у нас был вот этот стек РЦ, из которого мы делали поп, пока мы тут делали перекопирование сюда.
[03:47:08.040 --> 03:47:16.040]  То есть он изначально совпадал с Р, но после этого он совпадать с Р перестал, потому что туда добавили элементы из начала.
[03:47:16.040 --> 03:47:19.040]  И с ним мы работали, но какие-то элементы были выкинуты.
[03:47:19.040 --> 03:47:25.040]  Но тогда после того, как обнаружилось в какой-то момент, что перекопирование закончено, Р и РЦ-шрифт совпадают,
[03:47:25.040 --> 03:47:32.040]  поэтому эти два мы тупо свапаем, и получается, что в этом бывшем РЦ теперь сошли храницы уже неважно.
[03:47:32.040 --> 03:47:35.040]  Остается его только аккуратненько зачистить.
[03:47:35.040 --> 03:47:39.040]  Как мы обрабатываем эти вот попы, которые произошли во время перекопирования?
[03:47:39.040 --> 03:47:43.040]  Предельно тупо. Тупо достаем из РЦ и больше ничего не делаем.
[03:47:43.040 --> 03:47:44.040]  Это неправда.
[03:47:44.040 --> 03:47:46.040]  Ну кроме шагов перекопирования, конечно.
[03:47:46.040 --> 03:47:49.040]  Когда мы копируем из СВР обратно, потом мы смотрим.
[03:47:49.040 --> 03:47:55.040]  Когда перекопирование закончится, по идее будут пропавшие элементы?
[03:47:55.040 --> 03:47:57.040]  Будут не существующие элементы.
[03:47:57.040 --> 03:48:05.040]  А, ну да, мы делали эту оговорку, что когда мы пытаемся в конце, когда мы добавляем...
[03:48:05.040 --> 03:48:12.040]  Вот когда мы идем из СВР, то есть когда мы делаем из ЛВР, потом из СВР, мы как бы достаем элементы стека,
[03:48:12.040 --> 03:48:20.040]  но при этом, когда смотрим на Р, говорим, во-первых, что не получилось ли так, что этот элемент уже был попан.
[03:48:20.040 --> 03:48:23.040]  Но если получилось, то выкидываем.
[03:48:23.040 --> 03:48:31.040]  Более того, да, на самом деле, если вы делаете поп из РЦ и оказалось, что этот элемент был добавлен в Р,
[03:48:31.040 --> 03:48:34.040]  значит его оттуда тоже попать надо.
[03:48:35.040 --> 03:48:36.040]  Как это проверять?
[03:48:36.040 --> 03:48:37.040]  Ну по размеру.
[03:48:37.040 --> 03:48:39.040]  По размеру РЦ.
[03:48:39.040 --> 03:48:41.040]  На самом деле, да.
[03:48:43.040 --> 03:48:44.040]  Ну типа того.
[03:48:44.040 --> 03:48:45.040]  Ну тут разные варианты.
[03:48:45.040 --> 03:48:50.040]  То есть конкретно тут в этой презентации есть какой-то вариант, как это вообще выглядит.
[03:48:50.040 --> 03:48:54.040]  То есть утверждается, что это реально сделать и это будет не больно.
[03:48:54.040 --> 03:48:55.040]  Ну да.
[03:48:55.040 --> 03:48:58.040]  Ну нет, тут даже есть вот красивая какая-то реализация.
[03:48:59.040 --> 03:49:00.040]  Вот.
[03:49:00.040 --> 03:49:01.040]  Ну нет.
[03:49:01.040 --> 03:49:07.040]  То есть как бы тут смысл в том, что надо, может быть, по этому алгоритму собраться несколько раз и как бы все это собрать в кучу.
[03:49:07.040 --> 03:49:11.040]  Потому что в принципе понятно, реализация действительно будет не особо сложной.
[03:49:11.040 --> 03:49:13.040]  Это просто обычно реализовали.
[03:49:13.040 --> 03:49:15.040]  Она вообще персистентная.
[03:49:15.040 --> 03:49:17.040]  Ну персистентная очередь.
[03:49:17.040 --> 03:49:19.040]  Ну скажем так.
[03:49:19.040 --> 03:49:21.040]  Там персистентная очередь реализуется понятно.
[03:49:21.040 --> 03:49:26.040]  Это как бы просто персистентные 6 стеков.
[03:49:26.040 --> 03:49:29.040]  Ну и персистентные эти бульды плаги, которые у нас персисуются.
[03:49:29.040 --> 03:49:30.040]  Нет.
[03:49:30.040 --> 03:49:31.040]  Ну зачем?
[03:49:31.040 --> 03:49:32.040]  Нет.
[03:49:32.040 --> 03:49:34.040]  Это ты хранишь просто в каждой версии.
[03:49:34.040 --> 03:49:37.040]  То есть как бы часто чем персистентность отличается от не персистентности?
[03:49:37.040 --> 03:49:44.040]  Тем, что там во-первых, вы возвращаете там на запрос не только ответ, но и как бы новую версию.
[03:49:44.040 --> 03:49:46.040]  То есть как бы новый такой классик.
[03:49:46.040 --> 03:49:51.040]  И в нем какие-то переменные хранить.
[03:49:51.040 --> 03:49:52.040]  То есть да, поэтому понятно.
[03:49:52.040 --> 03:49:54.040]  Персистентная булевая переменная.
[03:49:54.040 --> 03:49:56.040]  Это, конечно, интересно.
[03:49:56.040 --> 03:50:00.040]  Но обычно это решается тем, что вам придется вектор булов хранить.
[03:50:00.040 --> 03:50:02.040]  Ну не вектор булов, ладно.
[03:50:02.040 --> 03:50:05.040]  По факту вы будете хранить вектор структура check.
[03:50:05.040 --> 03:50:09.040]  То есть в каждой из которых хранятся по 6 указателей на соответствующей версии стека.
[03:50:09.040 --> 03:50:12.040]  И какие-то еще дополнительные информации.
[03:50:12.040 --> 03:50:14.040]  Вот типа вот этих флагов.
[03:50:16.040 --> 03:50:17.040]  Так что-то получилось.
[03:50:17.040 --> 03:50:20.040]  Что-то не совсем даже взрыв мозга по ходу.
[03:50:22.040 --> 03:50:23.040]  Вот.
[03:50:23.040 --> 03:50:24.040]  Нет, ну как хотите.
[03:50:24.040 --> 03:50:27.040]  Если будет желание, можем в следующий раз это обсудить еще раз.
[03:50:27.040 --> 03:50:28.040]  Пробежаться.
[03:50:31.040 --> 03:50:33.040]  Ну скажи так, это будет на экзамене.
[03:50:35.040 --> 03:50:37.040]  Рассказывать.
[03:50:37.040 --> 03:50:38.040]  Ага.
[03:50:39.040 --> 03:50:40.040]  Ну да.
[03:50:40.040 --> 03:50:41.040]  Думаешь?
[03:50:41.040 --> 03:50:42.040]  Ну-ну.
[03:50:44.040 --> 03:50:45.040]  Ну а как же?
[03:50:46.040 --> 03:50:51.040]  Ну а что тут верить?
[03:50:51.040 --> 03:50:52.040]  Нет, ну скажем так.
[03:50:52.040 --> 03:50:57.040]  Алгоритм устроен так, что очевидно, что каждый шаг делается за 1 честного.
[03:50:57.040 --> 03:51:03.040]  Да, то есть доказывать надо тут скорее, что тут по переменным все сойдется.
[03:51:03.040 --> 03:51:06.040]  Да, ну там что-то подобные вещи.
[03:51:07.040 --> 03:51:08.040]  Нет, ну так-то да.
[03:51:10.040 --> 03:51:11.040]  Ну типа вот.
[03:51:12.040 --> 03:51:13.040]  Ну как хотите, в общем.
[03:51:13.040 --> 03:51:14.040]  Да, реализация.
[03:51:14.040 --> 03:51:15.040]  Давай.
[03:51:16.040 --> 03:51:21.040]  У нас вообще когда мы встречаемся в режиме прикупирования, это размер L больше размер f.
[03:51:22.040 --> 03:51:26.040]  Но единственное ограничение на это то, что мы прикидываем им по 3 операции,
[03:51:26.040 --> 03:51:29.040]  когда у нас в своем режиме прикупирования делаем 3 операции за 1.
[03:51:29.040 --> 03:51:30.040]  Да.
[03:51:30.040 --> 03:51:33.040]  По идее если мы начинаем прикупирование, когда у нас например L больше чем 2,
[03:51:33.040 --> 03:51:37.040]  нам просто надо будет делать по 6 операции за 1.
[03:51:38.040 --> 03:51:39.040]  Ну в принципе да.
[03:51:39.040 --> 03:51:41.040]  Ну можно, ну в принципе да.
[03:51:41.040 --> 03:51:42.040]  Можно поиграть с косметиками.
[03:51:42.040 --> 03:51:47.000]  но нет можно поиграться и делать просто копирование быстрее да конечно ну
[03:51:47.000 --> 03:51:50.440]  можно и в таком виде на самом деле просто режим при этом вместо трех
[03:51:50.440 --> 03:51:55.680]  операции делать 10 и перекопирование будет быстрее происходить и вот но
[03:51:55.680 --> 03:51:59.600]  просто по троечкам может быть делать лучше потому что тогда пуши и попы то
[03:51:59.600 --> 03:52:03.320]  есть тогда все операции будут там более близки по реальному времени
[03:52:03.320 --> 03:52:09.040]  потому что как бы разница 1-3 и разница 10-1 это разная вещь
