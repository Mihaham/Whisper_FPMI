[00:00.000 --> 00:13.000]  Значит, сегодня мы, по крайней мере, начнем с такой маленькой, действительно простой задачи, как динамическая связность без циклов.
[00:13.000 --> 00:20.000]  Мы попытаемся с вами тут побаловаться деревьями.
[00:20.000 --> 00:26.000]  Ситуация будет такая. У нас будет, как всегда, n вершин.
[00:26.000 --> 00:43.000]  Вот. Думаете, дальше будет сложнее?
[00:43.000 --> 00:47.000]  Ну окей.
[00:48.000 --> 00:53.000]  Ну вот. Значит, смотрите. Начнем с такой разминочной задачи.
[00:53.000 --> 01:00.000]  Представим себе, что у нас есть подвешенные деревья. Вот подвешенные там за какие-то корни.
[01:00.000 --> 01:06.000]  Вот. И у нас, скажем, я далеко не ушел.
[01:06.000 --> 01:14.000]  И с ними нужно делать два запроса. Вот начнем с простой версии.
[01:14.000 --> 01:17.000]  Значит, запрос номер раз.
[01:17.000 --> 01:20.000]  Link.
[01:20.000 --> 01:26.000]  Значит, от вершины v к вершине, допустим, u.
[01:26.000 --> 01:32.000]  Это означает, что вершина v корень какого-то под дерево.
[01:32.000 --> 01:36.000]  Значит, u не потомок v.
[01:36.000 --> 01:38.000]  Почему корень? Подожди.
[01:38.000 --> 01:43.000]  Ну вот. Потому что v мы будем подвешивать q.
[01:43.000 --> 01:44.000]  Все. Хочешь наоборот?
[01:44.000 --> 01:48.000]  Нет. Я о том, что почему у нас нет линк от двух произвольных вершин.
[01:48.000 --> 01:51.000]  А вот мы и такие вот. Мы разминаемся.
[01:51.000 --> 01:53.000]  Нет. Потом мы и научимся переподвешивать дерево.
[01:53.000 --> 01:55.000]  Это не будет для нас проблемой.
[01:55.000 --> 01:57.000]  Но пока вот для разминочки давайте не переподвешивать.
[01:57.000 --> 02:03.000]  Просто вот есть у нас корень. Значит, u у нас не потомок v.
[02:03.000 --> 02:11.000]  И соответственно цель, понятно, что берем этот корень v и вот давайте даже каким-нибудь красивым режим образом.
[02:12.000 --> 02:16.000]  Именно так.
[02:16.000 --> 02:23.000]  И v мы подвешиваем к вершине u, которая корнем быть не обязана, но может им быть.
[02:23.000 --> 02:25.000]  То есть тут все, что угодно может быть.
[02:25.000 --> 02:28.000]  Главное, чтобы просто мы не зацикли.
[02:28.000 --> 02:36.000]  И второй тип запросов это cat. Cat от v.
[02:36.000 --> 02:38.000]  Где v нет.
[02:38.000 --> 02:41.000]  Если других запросов нет, я готов отвечать за 1.
[02:41.000 --> 02:43.000]  Отлично.
[02:43.000 --> 02:49.000]  То есть если у нас v не корень, то значит мы берем v, берем этого всего родителя.
[02:49.000 --> 02:51.000]  Тут какое-то безобразие.
[02:51.000 --> 02:53.000]  И ликвидируем это ребром.
[02:53.000 --> 02:57.000]  v торжественно объявляется новым корнем своего дерева.
[02:57.000 --> 03:00.000]  Это самая легкая постановка задачи.
[03:00.000 --> 03:04.000]  Ее все умеют решать за 1, я надеюсь.
[03:04.000 --> 03:06.000]  Ничего не делаете?
[03:07.000 --> 03:09.000]  Кто-то даже да.
[03:09.000 --> 03:11.000]  Именно метод.
[03:11.000 --> 03:16.000]  Потому что от вас не просят доказательств того, что вы это реально сделали.
[03:16.000 --> 03:20.000]  А вот, например, если от вас все...
[03:24.000 --> 03:28.000]  А вот если от вас попросят что-нибудь такое в духе.
[03:28.000 --> 03:36.000]  Там are they in one?
[03:41.000 --> 03:45.000]  Then we should think a bit.
[03:50.000 --> 03:52.000]  Consolidate.
[03:53.000 --> 03:56.000]  Нет, куча фибонач, тут не причем.
[03:56.000 --> 03:58.000]  Значит, это смотреть.
[03:58.000 --> 04:00.000]  Но давайте думать.
[04:00.000 --> 04:04.000]  Что тут вообще, говоря, можно сделать?
[04:04.000 --> 04:07.000]  На самом деле подходы могут быть разные.
[04:07.000 --> 04:11.000]  Если смотреть по асимптотике, то можно в конце концов делать это в тупую.
[04:11.000 --> 04:15.000]  Запускать тут, скажем, DFS, например.
[04:15.000 --> 04:19.000]  Тогда вот подвешивание, там можно вообще за 1 делать.
[04:19.000 --> 04:21.000]  И вырезание тоже.
[04:21.000 --> 04:26.000]  Если в списке смежности, вы будете хранить буквально списки.
[04:30.000 --> 04:32.000]  Корнячка, ну...
[04:39.000 --> 04:43.000]  Нет, а S&M даже не нужен, кстати, в этой корнячке.
[04:43.000 --> 04:45.000]  Ну, давайте подробно.
[04:45.000 --> 04:47.000]  Ну, смотрите, да.
[04:47.000 --> 04:50.000]  То есть, допустим, если мы хотим делать это корнячкой.
[04:50.000 --> 04:55.000]  То есть, корнячка от слова корень, но не вот этот вот корень, а вот этот вот корень.
[04:55.000 --> 04:57.000]  Ну, вы поняли, да?
[04:57.000 --> 05:00.000]  Радикальный, хорошо.
[05:00.000 --> 05:02.000]  То, действительно.
[05:02.000 --> 05:06.000]  И вам еще повезло, и у вас все в офлайне запросы даны.
[05:06.000 --> 05:08.000]  Вот повезло.
[05:08.000 --> 05:13.000]  То тогда, на самом деле, у вас есть такой весьма неожиданный чит.
[05:13.000 --> 05:18.000]  Значит, мы берем списочек наших запросов.
[05:18.000 --> 05:23.000]  Вот он, запросы, запросы, запросы, запросы, запросы, запросы, запросы, запросы, запросы, запросы, запросы.
[05:23.000 --> 05:27.000]  И делим их на блоки по бубен.
[05:27.000 --> 05:30.000]  Ну, тут, ладно, тут на самом деле нет смысла особо тянуть интригу.
[05:30.000 --> 05:33.000]  На этот раз он будет честный койм.
[05:33.000 --> 05:34.000]  Вот.
[05:36.000 --> 05:39.000]  Количество вершин.
[05:39.000 --> 05:41.000]  Нет, ну просто идея такая.
[05:41.000 --> 05:46.000]  Да, я хочу койм из этих запросов обрабатывать суммарно за отэн.
[05:46.000 --> 05:48.000]  Вот, мне, вот, вот, хочу.
[05:48.000 --> 05:50.000]  Вот, вот, вот, вот, вот, хочу.
[05:50.000 --> 05:52.000]  Вот, вот, вот, вот, хочу.
[05:52.000 --> 05:55.000]  Вот.
[05:55.000 --> 05:57.000]  Значит, ну вот.
[05:57.000 --> 06:02.000]  И тогда, если я с этим справлюсь, у меня получится синтетика кукарниза.
[06:02.000 --> 06:05.000]  Так, ну понятно, откуда взялось, да?
[06:05.000 --> 06:07.000]  Вправивается.
[06:07.000 --> 06:10.000]  Откуда я это возьму?
[06:10.000 --> 06:26.000]  Значит, идея будет очень простая. Значит, в начале каждого блока, что приятно, количество живых ребер, которые у меня там в дереве есть, их ровно от n, а точнее n-1. Согласны? Зря.
[06:26.000 --> 06:29.000]  В смысле, еще раз, смотря с чем согласны?
[06:29.000 --> 06:34.000]  Осторожно, с тем, что ребер n-1, я бы не торопился соглашаться.
[06:34.000 --> 06:35.000]  Я согласился, что их хватает.
[06:36.000 --> 06:43.000]  Вот, их хватает. Ну, их наставили, что их ровно n-1. Это, конечно, не верно, потому что в реальности их n минус количество деревьев.
[06:47.000 --> 06:49.000]  Нет, тут я вроде правду говорю.
[06:49.000 --> 06:51.000]  Вот, значит, смотрите.
[06:55.000 --> 06:56.000]  Да.
[06:57.000 --> 06:58.000]  Значит, да, за от.
[06:58.000 --> 06:59.000]  За от.
[07:03.000 --> 07:04.000]  Нет, q корней из n.
[07:04.000 --> 07:09.000]  Ну, потому что, смотрите, блоков у вас q поделить на корень из n, и каждый обрабатываете за n.
[07:09.000 --> 07:10.000]  Поэтому q корней из n.
[07:13.000 --> 07:14.000]  Нет, тут вроде все нормально.
[07:15.000 --> 07:16.000]  Так вот.
[07:17.000 --> 07:18.000]  Значит, смотрите.
[07:18.000 --> 07:19.000]  Что можно сделать за от?
[07:20.000 --> 07:28.000]  Значит, заметим, что у нас есть, ну вот, что, значит, рассмотрим вот этот блок.
[07:28.000 --> 07:32.000]  Значит, на вот этот момент времени у нас есть какие-то деревья.
[07:33.000 --> 07:36.000]  Нет, мы не будем торопиться на них прям строить компоненты связности.
[07:36.000 --> 07:43.000]  Мы заметим, что тут есть некие линки, и что самое для нас сейчас главное, некоторые каты.
[07:45.000 --> 07:46.000]  Вот, каты у нас есть.
[07:46.000 --> 07:47.000]  Вот.
[07:49.000 --> 07:50.000]  Значит, идея такая.
[07:50.000 --> 07:53.000]  Все ребра, все вот эти катовые ребра.
[07:56.000 --> 07:57.000]  Вот.
[07:58.000 --> 08:00.000]  Мы сейчас временно удалим.
[08:02.000 --> 08:04.000]  Ну, заранее вот перед этим блоком.
[08:05.000 --> 08:06.000]  Вот сейчас временно удалим.
[08:07.000 --> 08:08.000]  Нет, потом мы, ну вот.
[08:08.000 --> 08:11.000]  И вот только после этого мы создадим компоненты связности.
[08:11.000 --> 08:14.000]  То есть у нас действительно есть там, скажем, какие-нибудь вот эти вот подвешенные.
[08:14.000 --> 08:17.000]  На этот момент будут подвешенные деревья.
[08:18.000 --> 08:22.000]  То есть, заметим, что черным я сейчас рисую ребра, которые...
[08:23.000 --> 08:26.000]  То есть так как я вот убрал ребра, которые связаны с линками и катами.
[08:26.000 --> 08:30.000]  Да, пожалуй, с линками тоже я уберу, потому что мог быть кат этого же ребра.
[08:31.000 --> 08:36.000]  Заметим теперь маленькую приятную вещь, что вот здесь черным я уже здесь.
[08:36.000 --> 08:46.000]  Заметим теперь маленькую приятную вещь, то есть вот здесь в черном я рисую ребра, которые в течение этого блока тронуты не будут.
[08:46.000 --> 08:57.000]  К чему это нас приводит? Приводит это нас соответственно к тому, что конкретно вот эти под деревья можно действительно аккуратно сжать.
[08:58.000 --> 09:06.000]  Единственный конечно момент, что некоторые из этих ребер на самом деле мы поторопились удалять, потому что конкретно на этот момент времени они еще живы.
[09:06.000 --> 09:15.000]  То есть поэтому тут может быть какая-нибудь вот такая вот странная, какая-нибудь вот такая ситуация, когда вот этого ребра еще нет.
[09:15.000 --> 09:21.000]  То есть наоборот оно вот еще есть, но будет когда-нибудь удалено. И более того, на нем даже что-нибудь висит.
[09:22.000 --> 09:32.000]  Это в принципе тоже нормально. Вот, ну вот, значит красненький тут, ну вот тут, тут еще что-нибудь красненькое вообще всякое бывает.
[09:32.000 --> 09:39.000]  Вот, ну и так далее. Значит, так вот, значит тут красненькая, тут красненькая.
[09:39.000 --> 09:43.000]  Ну и теоретически да, мы знаем, что тут могут быть еще какие-то ребра, но не суть.
[09:44.000 --> 09:57.000]  Значит, почему не суть? Потому что после того, как мы сожмем эти компоненты связности, да, а мы их можем сжать, потому что они вот в таком виде обязательно будут, у нас теперь происходит следующее.
[10:00.000 --> 10:10.000]  То есть после этого у нас остается на самом деле такой граф на там не более чем корень и зен метавершинах.
[10:11.000 --> 10:17.000]  Согласны? Ну вот.
[10:22.000 --> 10:27.000]  Понимаете, подлянка, может быть так, например, что изначально реберта нет вообще.
[10:30.000 --> 10:34.000]  То есть может быть вообще реберта нет вообще и тогда у вас просто N корней.
[10:35.000 --> 10:41.000]  Да, поэтому, конечно, утверждать, что у нас N компонент неправильно, а правильно утверждать следующее.
[10:44.000 --> 10:53.000]  Ну, можно так сказать, а можно сказать, что нас на самом деле, то есть нас на самом деле будут интересовать не более чем от корня компонент связности из них.
[10:53.000 --> 11:08.000]  Да, но тут видимо начинается, что дальше эту проблему можно решить десятью способами. Видимо у меня с тобой разные способы.
[11:08.000 --> 11:16.000]  Потому что, смотри, у меня способ такой. Дальше я могу там, скажем, заметить, то есть рассмотреть просто какие у меня тут ребра какие компоненты соединяют.
[11:17.000 --> 11:22.000]  Ну вот и самое интересное, какие еще компоненты я там, скажем, просматриваю, например.
[11:23.000 --> 11:27.000]  Да, то есть вот это Rz тоже вот эти. Вот, то есть какие компоненты.
[11:28.000 --> 11:34.000]  То есть я замечаю, что вот есть только не более чем от корня компонент, с которыми я дальше начинаю реально работать.
[11:34.000 --> 11:36.000]  Можно еще раз пояснить почему так?
[11:37.000 --> 11:43.000]  Ну, потому что, смотри, каждый из корней из N запросов работает с одной или двумя компонентами.
[11:44.000 --> 11:49.000]  Вот, поэтому суммарно они все затрагивают не более чем два корней из N компонентов.
[11:50.000 --> 11:52.000]  Ага, то есть вообще что запросы тогда? Сколько их реально мы не знаем?
[11:53.000 --> 11:58.000]  Ну, сколько их реально мы и там можем. Ну, можем узнать, у нас сейчас ОАТН действий есть.
[11:59.000 --> 12:00.000]  Ну, ОАТН это реально.
[12:00.000 --> 12:04.000]  Вот, так что соответственно, корень из N. Ну, хотя дальше можно сказать так.
[12:05.000 --> 12:09.000]  Вот, то есть от корней из N компонент нас действительно интересует.
[12:10.000 --> 12:14.000]  То есть они там как-то будут. И дальше получается маленькая приятная вещь.
[12:15.000 --> 12:21.000]  Дальше получается маленькая приятная вещь, что теперь мы, да, ну, сначала мы добавляем те ребра, которые тут есть.
[12:22.000 --> 12:24.000]  В общем, добавляем их в смысле честно, то есть вот мы там.
[12:25.000 --> 12:26.000]  За вот единицы.
[12:26.000 --> 12:30.000]  Да, то есть за вот единицы прямо в список смежности этих мета-вершин мы их добавляем.
[12:31.000 --> 12:33.000]  Боже упаси их объединять. Как-то потому что это ребро может быть потом удалено.
[12:35.000 --> 12:39.000]  Вот. И, собственно, ну, там скорее всего и будет удалено.
[12:40.000 --> 12:45.000]  Ну, и после этого все, что нам остается. Значит, у нас фактически есть граф на О от корней из N вершин.
[12:46.000 --> 12:53.000]  И нам на нем нужно делать запросы, добавить ребро, удалить ребро, проверить, лежат ли две вершины в одной компоненте связанности.
[12:53.000 --> 12:58.000]  При этом на каждый запрос мы можем потратить О от корней из N вершин.
[12:59.000 --> 13:01.000]  А у нас граф фактически на корне из N вершин.
[13:02.000 --> 13:03.000]  Ну да.
[13:04.000 --> 13:11.000]  Или вот как можно было еще и правильно сказать, что граф может быть большой, но самое главное, что любая компонента связанности в нем содержит не более чем корень из N вершин.
[13:12.000 --> 13:13.000]  Ладно, О от корни из N вершин.
[13:14.000 --> 13:22.000]  К чему это нас приводит? То есть приводит к тому, что тогда мы просто там каждый вот эту штуку запускаем просто тупо, тупой DFS просто.
[13:23.000 --> 13:25.000]  А мы не знаем, что такое DFS. BFS.
[13:27.000 --> 13:28.000]  Вот.
[13:29.000 --> 13:30.000]  Ну да.
[13:31.000 --> 13:36.000]  Нет, ну то есть по сути, смотрите, мы запускаем, то есть мы берем просто тут вот две вершины.
[13:37.000 --> 13:42.000]  Ну если они оказались в одной мета вершине, то сразу выводим шлаки они на месте.
[13:43.000 --> 13:46.000]  А иначе там берем одну мета вершины и запускаем из нее DFS.
[13:47.000 --> 13:48.000]  И только из нее.
[13:49.000 --> 13:50.000]  Ну BFS, да.
[13:51.000 --> 13:52.000]  Да.
[13:53.000 --> 13:54.000]  Ну да.
[13:55.000 --> 14:01.000]  То есть тут будет только тонкость, чтобы в массиве юзит, который может у вас быть размером N, не запускать очистку за O от N.
[14:02.000 --> 14:03.000]  Ну понятно, это техническая.
[14:04.000 --> 14:07.000]  Ну я просто вот упомяну, что при реализации такая техническая деталь может возникнуть.
[14:08.000 --> 14:12.000]  А то иногда забудешь такую вещь сделать и бах тебе ты или потом вот внезапно.
[14:13.000 --> 14:14.000]  Можно уточнить здесь.
[14:15.000 --> 14:16.000]  Да.
[14:17.000 --> 14:18.000]  Мы храним это как список смешанности.
[14:19.000 --> 14:20.000]  Да.
[14:21.000 --> 14:22.000]  Кат и Кат.
[14:23.000 --> 14:24.000]  И Кат.
[14:25.000 --> 14:27.000]  Ну можно даже в тупую прибегаться.
[14:28.000 --> 14:32.000]  На самом деле Кат легко сделать за O от единицы, если список смешанности у тебя будет реально списком.
[14:33.000 --> 14:34.000]  Реально списком.
[14:43.000 --> 14:44.000]  Но не совсем.
[14:45.000 --> 14:46.000]  Ну как вы смотрите, в данном случае так.
[14:46.000 --> 14:47.000]  Ну вот.
[14:51.000 --> 14:52.000]  Нет, ну смотрите, нет.
[14:53.000 --> 14:59.000]  Ну во-первых, про каждое ребро вы можете в явном виде хранить, где оно конкретно находится в списке обеих своих вершин.
[15:01.000 --> 15:07.000]  Во-вторых, для каждой вершины можно хранить ребро, которое является предком, поэтому за O от единицы выкрутиться можно.
[15:08.000 --> 15:09.000]  Да, это не нужно, согласен.
[15:10.000 --> 15:15.000]  Да, для этой асимптотики это не нужно, но вот чисто теоретически это как бы проблема решаемая.
[15:16.000 --> 15:17.000]  Вот.
[15:21.000 --> 15:22.000]  Ну да, да.
[15:23.000 --> 15:28.000]  На самом деле да, легко можно заметить что конкретно в такой постановке задачи действительно это особо не надо.
[15:29.000 --> 15:30.000]  Это да.
[15:30.000 --> 15:31.000]  Это да.
[15:32.000 --> 15:33.000]  Вот.
[15:34.000 --> 15:41.000]  То есть да, когда нот пока не корневые, ну пока мы решаем вот закон.
[15:41.000 --> 15:47.440]  Вот, хотя, ну вот, тут закурит вот такая вот, такая достаточно
[15:47.440 --> 15:51.320]  одна из стандартных технологий, корниэнод эскорты декомпозиции.
[15:51.320 --> 15:55.080]  Вот, так что теоретически можно так написать даже
[15:55.080 --> 15:56.080]  без лишних заморочек.
[15:56.080 --> 15:59.960]  Так, ну есть-то какие-то вопросы?
[15:59.960 --> 16:03.440]  Вроде пока все нормально, логично.
[16:03.440 --> 16:04.440]  Вот.
[16:04.440 --> 16:07.200]  Но, правда, конкретно в такой постановке задачи
[16:07.200 --> 16:10.680]  все-таки на самом деле можно попробовать это все-таки
[16:10.680 --> 16:13.120]  сделать не за корень, а за логариф.
[16:13.120 --> 16:14.120]  Именно.
[16:14.120 --> 16:15.120]  Именно.
[16:15.120 --> 16:16.120]  Вот.
[16:16.120 --> 16:23.240]  Значит, да, но на этот, но сейчас нам, ну чтобы его
[16:23.240 --> 16:26.560]  использовать, нам все-таки потребуется сейчас, чтобы
[16:26.560 --> 16:27.560]  деревья были корневые.
[16:27.560 --> 16:31.000]  Вот.
[16:31.000 --> 16:33.120]  Почему нам это потребуется?
[16:33.120 --> 16:34.120]  Вот.
[16:34.120 --> 16:36.200]  Потому что, да, сейчас, ну вот, потому что сейчас
[16:36.200 --> 16:39.440]  мы используем штуку, которая у нас когда-то уже была,
[16:40.400 --> 16:43.600]  правда, мы ее эллеровым обходом, возможно, даже не называли.
[16:57.600 --> 17:00.440]  Ну, сейчас вот, вот сейчас то, что я скажу, сейчас будем
[17:00.440 --> 17:02.440]  смотреть, как это будет преобразовываться.
[17:10.440 --> 17:13.440]  Ну, доживем.
[17:13.440 --> 17:16.160]  Нет, в итоге у нас будет, конечно, линка 3, которая
[17:16.160 --> 17:19.440]  будет уметь спокойно перепадать там, делать корнем что угодно,
[17:19.440 --> 17:20.440]  но вот.
[17:20.440 --> 17:21.440]  Ну.
[17:21.440 --> 17:22.440]  Ну, сейчас доживем.
[17:22.440 --> 17:25.440]  Ну, давайте для начала предположим, что не умеет.
[17:25.440 --> 17:27.440]  Пока доживем до этого.
[17:27.440 --> 17:28.440]  И так.
[17:28.440 --> 17:29.440]  Хорошо.
[17:29.440 --> 17:33.440]  Значит, ну, что предлагает, что имеется в виду под эллеровым
[17:33.440 --> 17:34.440]  обходом?
[17:34.440 --> 17:37.840]  Ну, на самом деле предлагается то, то безобразие, которым
[17:37.840 --> 17:40.840]  бы мы Элца сводили к РМКу плюс-минус 1.
[17:40.840 --> 17:41.840]  Ну, хорошо.
[17:41.840 --> 17:48.840]  Тут уже, как сказать, как сказать, знаете, часто в этом
[17:48.840 --> 17:51.840]  месте употребляется такой, видимо, активный программистский
[17:51.840 --> 17:54.840]  сленг, я вот у многих команд слышал, но у меня почему-то
[17:54.840 --> 17:57.840]  это ассоциируется с матерными словами, поэтому я не буду
[17:57.840 --> 17:58.840]  его употреблять.
[17:58.840 --> 17:59.840]  Вот.
[17:59.840 --> 18:00.840]  Вот.
[18:00.840 --> 18:02.840]  Поэтому я в этом месте говорю безобразие.
[18:02.840 --> 18:03.840]  Вот.
[18:03.840 --> 18:06.840]  Значит, смотрите, то есть, ну, как это работает?
[18:06.840 --> 18:07.840]  Ну, очень просто.
[18:07.840 --> 18:11.840]  То есть мы запустим DFS и будем, напишем сначала корень,
[18:11.840 --> 18:13.840]  а потом будем писать все вершины.
[18:13.840 --> 18:16.840]  Причем вершину будем писать каждый раз, когда мы в нее
[18:16.840 --> 18:18.840]  попадаем, причем неважно, мы в нее приходим сверху
[18:18.840 --> 18:19.840]  или снизу.
[18:19.840 --> 18:22.840]  Ну, то есть, помните, да, если я тут вот напишу какие-то
[18:22.840 --> 18:28.840]  вот эти вот буковки g, там a, b, там, я не знаю, какая там
[18:28.840 --> 18:31.840]  следующая буква h, там x, ну и так далее.
[18:31.840 --> 18:34.840]  То есть в результате это будет выглядеть как там
[18:34.840 --> 18:41.840]  c, d, e, f, e, a, e, h, x, там h.
[18:41.840 --> 18:43.840]  Ну, в принципе, вы помните, да?
[18:43.840 --> 18:46.840]  Да, но только здесь, когда у нас одно дерево, может быть...
[18:46.840 --> 18:47.840]  Нет.
[18:47.840 --> 18:48.840]  Сейчас, сейчас все будет.
[18:48.840 --> 18:51.840]  Значит, пока для каждого дерева мы высленно вот это
[18:51.840 --> 18:54.840]  все храним, причем более того, там, естественно, рядом
[18:54.840 --> 18:56.840]  храним и глубину.
[18:56.840 --> 18:57.840]  Вот.
[18:57.840 --> 18:59.840]  На этот раз даже не для того, чтобы искать там минимум
[18:59.840 --> 19:03.840]  отрезки, а вот будет немножко с другими целями.
[19:03.840 --> 19:06.840]  Значит, там h будем хранить, x будем хранить.
[19:06.840 --> 19:08.840]  Значит, что там дальше?
[19:08.840 --> 19:11.840]  Там 3, 4, 3, ну и так далее.
[19:11.840 --> 19:14.840]  Вот.
[19:14.840 --> 19:17.840]  Значит, соответственно, что дальше?
[19:17.840 --> 19:19.840]  Что дальше?
[19:19.840 --> 19:20.840]  Вот.
[19:20.840 --> 19:21.840]  Ну вот.
[19:21.840 --> 19:25.840]  Ну, идея будет заключаться в следующем.
[19:25.840 --> 19:30.840]  Давайте, давайте для каждого дерева вот этот вот обход,
[19:30.840 --> 19:33.840]  ну, этот обход, он же является массивом, да?
[19:33.840 --> 19:36.840]  Ну, так его логично хранить в каком-нибудь дереве по
[19:36.840 --> 19:37.840]  неявному ключу.
[19:37.840 --> 19:38.840]  Ну, например...
[19:38.840 --> 19:41.840]  Ну, например, в ВВЛке.
[19:41.840 --> 19:43.840]  Очень приятно.
[19:43.840 --> 19:44.840]  Особенно сплит мне касается.
[19:44.840 --> 19:47.840]  Ну, сплит, мерч, да.
[19:47.840 --> 19:49.840]  Нет, ну, просто в ВВЛе как бы железобетонно это.
[19:49.840 --> 19:54.840]  Ну, не нравится ВВЛ, можно красночерное взять, пожалуйста.
[19:54.840 --> 19:57.840]  Да, сплей мы еще доживем сегодня.
[19:57.840 --> 20:00.840]  Да, сплей сегодня сыграет важную роль.
[20:00.840 --> 20:02.840]  Это да, но это мы забегаем вперед.
[20:02.840 --> 20:03.840]  Пока давайте что-нибудь простое.
[20:03.840 --> 20:04.840]  Вот, АВЛ.
[20:04.840 --> 20:06.840]  Вот, значит, смотрите.
[20:06.840 --> 20:08.840]  Значит, какая тут возникает идея?
[20:08.840 --> 20:11.840]  Просто давайте вот хранить эти массивы там, собственно,
[20:11.840 --> 20:14.840]  в декартовом дереве.
[20:14.840 --> 20:16.840]  Ой, я декартово сказал, ну ладно.
[20:16.840 --> 20:17.840]  Ладно, АВЛ.
[20:17.840 --> 20:20.840]  Ну, говорим декартово, подразумеваем АВЛ и вообще.
[20:20.840 --> 20:25.840]  Ну, как же, да.
[20:25.840 --> 20:30.840]  Так вот, да, любое сбалансированное двоичное дерево поиска, да, вот, пойдет.
[20:30.840 --> 20:33.840]  Вот, и значит самое, ну, ты что, что для нас?
[20:33.840 --> 20:37.840]  И тогда, и самое главное, для каждой вершины храним,
[20:37.840 --> 20:42.840]  в каком дереве она находится, а желательно храним, где она там хранится.
[20:42.840 --> 20:44.840]  Что такое где?
[20:44.840 --> 20:45.840]  А что такое где?
[20:45.840 --> 20:47.840]  Ну, что такое дерево поиска?
[20:47.840 --> 20:51.840]  Это что-то вот весящее, вот это вот на указателях.
[20:51.840 --> 20:53.840]  Да, вот это вот.
[20:53.840 --> 20:55.840]  На указателях, на указателях, на указателях.
[20:55.840 --> 20:57.840]  там вот, там как-то находится.
[20:57.840 --> 20:59.840]  Так вот, я для какой-нибудь вершины х, там,
[20:59.840 --> 21:02.840]  просто буду тоже тупо хранить указатель,
[21:02.840 --> 21:04.840]  где эта вершина х находится.
[21:04.840 --> 21:11.840]  А мы будем хранить, где находится самое первое ее вхождение.
[21:11.840 --> 21:14.840]  Ну, вот.
[21:14.840 --> 21:16.840]  А на всякий случай мы еще будем хранить,
[21:16.840 --> 21:18.840]  хранить, где находится ее последнее вхождение.
[21:18.840 --> 21:20.840]  Тоже удачи.
[21:20.840 --> 21:22.840]  Да, ну давай.
[21:22.840 --> 21:24.840]  Давай посмотрим.
[21:24.840 --> 21:26.840]  Чего мы очень делаем?
[21:26.840 --> 21:28.840]  Ну вот. Чего-чего?
[21:28.840 --> 21:30.840]  Нам недостаточно первое в последнее вхождение в хождении?
[21:30.840 --> 21:32.840]  Нет, в смысле это не стоит.
[21:32.840 --> 21:34.840]  Ага.
[21:34.840 --> 21:36.840]  Ну вот, ну возможно недостаточно.
[21:38.840 --> 21:40.840]  Ну сейчас мы это увидим.
[21:40.840 --> 21:42.840]  Сейчас мы внимательно подумаем,
[21:42.840 --> 21:44.840]  что нам надо.
[21:44.840 --> 21:46.840]  Нет, смотрите.
[21:46.840 --> 21:48.840]  Нет, у нас мечта такая.
[21:48.840 --> 21:50.840]  Для каждой вершины
[21:50.840 --> 21:52.840]  мы на всякий случай
[21:52.840 --> 21:54.840]  храним первое вхождение в массив
[21:54.840 --> 21:56.840]  и последнее в виде ссылок
[21:56.840 --> 21:58.840]  просто на вершины.
[21:58.840 --> 22:00.840]  А, да, на всякий случай, конечно,
[22:00.840 --> 22:02.840]  мы вводим такую редко реализуемую
[22:02.840 --> 22:04.840]  на практике вещь, как
[22:04.840 --> 22:06.840]  для каждой вершины указываем ее родителям.
[22:06.840 --> 22:08.840]  Но в данном случае
[22:08.840 --> 22:10.840]  это нам реально понадобится.
[22:10.840 --> 22:12.840]  К сожалению, я очень долго
[22:12.840 --> 22:14.840]  думал, как это сделать персистентно,
[22:14.840 --> 22:16.840]  потому что персистентно
[22:16.840 --> 22:18.840]  на деревьях нельзя
[22:18.840 --> 22:20.840]  на родителей.
[22:20.840 --> 22:22.840]  И, короче, поход не как.
[22:22.840 --> 22:24.840]  Ну бывает, да.
[22:24.840 --> 22:26.840]  Пишу, да.
[22:26.840 --> 22:28.840]  Нет, это то самое
[22:28.840 --> 22:30.840]  сбалансированное двоичное дерево поиска,
[22:30.840 --> 22:32.840]  в котором мы храним вот этот вот массивчик.
[22:32.840 --> 22:34.840]  Один или все?
[22:34.840 --> 22:36.840]  Один. Каждый массив
[22:36.840 --> 22:38.840]  храним в своем дереве.
[22:38.840 --> 22:40.840]  Я думал, что какой-то ВЛ-дерев, который все массивы хранит.
[22:40.840 --> 22:42.840]  У нас ВЛ-дерев будет
[22:42.840 --> 22:44.840]  по числу деревьев.
[22:46.840 --> 22:48.840]  Так вот.
[22:48.840 --> 22:50.840]  Зачем нам нужны родители?
[22:50.840 --> 22:52.840]  Это для того, чтобы, например, понять,
[22:52.840 --> 22:54.840]  где х находится в смысле
[22:54.840 --> 22:56.840]  индекса в массиве и делать
[22:56.840 --> 22:58.840]  правильные сплиты.
[22:58.840 --> 23:00.840]  Ведь действительно,
[23:00.840 --> 23:02.840]  что такое выпилить деревья?
[23:02.840 --> 23:04.840]  Что такое выпилить, скажем, дерево
[23:04.840 --> 23:06.840]  х?
[23:06.840 --> 23:08.840]  То есть сделать вот этот вот кат
[23:08.840 --> 23:10.840]  и объявить это дерево.
[23:10.840 --> 23:12.840]  Ну, практически для этого нужно
[23:12.840 --> 23:14.840]  сделать два вещи.
[23:14.840 --> 23:16.840]  Во-первых, выпилить соответствующий этому
[23:16.840 --> 23:18.840]  поддереву подотрезок,
[23:18.840 --> 23:20.840]  а ведь каждому поддереву, обратите внимание, соответствует подотрезок,
[23:20.840 --> 23:22.840]  то есть мы его можем тупо
[23:22.840 --> 23:24.840]  выпилить, просто вот двумя сплетами
[23:24.840 --> 23:26.840]  и сказать, что вот это дерево
[23:26.840 --> 23:28.840]  теперь живет само по себе этот подотрезок.
[23:30.840 --> 23:32.840]  Есть только один, но единственное,
[23:32.840 --> 23:34.840]  что когда вы его выпилите и
[23:34.840 --> 23:36.840]  померзите вот эти вот все штуки,
[23:36.840 --> 23:38.840]  то есть обнаружится, что у вас тут
[23:38.840 --> 23:40.840]  какие-то две ешки будут идти подряд.
[23:40.840 --> 23:42.840]  То есть поэтому надо просто одну
[23:42.840 --> 23:44.840]  удалить.
[23:44.840 --> 23:46.840]  Мы же записываем,
[23:46.840 --> 23:48.840]  когда мы приходим в вершину,
[23:48.840 --> 23:50.840]  когда, короче, каждый раз там
[23:50.840 --> 23:52.840]  по оказываемой вершине.
[23:52.840 --> 23:54.840]  Да, ну поэтому...
[23:54.840 --> 23:56.840]  У нас всего два раза появится та
[23:56.840 --> 23:58.840]  линия вершинка.
[23:58.840 --> 24:00.840]  Нет, не-не-не, смотри, вот конкретно эта
[24:00.840 --> 24:02.840]  вершина появится столько раз, сколько...
[24:02.840 --> 24:04.840]  Да, она появится
[24:04.840 --> 24:06.840]  столько раз, сколько в нее ребер ведет.
[24:06.840 --> 24:08.840]  Вот, или что
[24:08.840 --> 24:10.840]  то же самое. На самом деле она более общие
[24:10.840 --> 24:12.840]  утверждение, которое не для корня,
[24:12.840 --> 24:14.840]  которая для корня тоже работает. Она появится
[24:14.840 --> 24:16.840]  столько раз, сколько у нее детей плюс один.
[24:16.840 --> 24:18.840]  Потому что мы придем в нее, обойдем
[24:18.840 --> 24:20.840]  первое под дерево, тыкнем все еще раз,
[24:20.840 --> 24:22.840]  пройдем второе по дерево, тыкнем все еще раз,
[24:22.840 --> 24:24.840]  пройдем третье под дерево, тыкнем все
[24:24.840 --> 24:30.840]  последний раз.
[24:30.840 --> 24:32.840]  Кого удалить?
[24:32.840 --> 24:40.840]  А, ну вот тоже его просто найдем, где оно находится по индексу с помощью того же самого...
[24:40.840 --> 24:44.840]  У нас есть 2 отрезка. Мы знаем, что он окружен двумя вершинами.
[24:44.840 --> 24:46.840]  А, ну или так, да.
[24:46.840 --> 24:48.840]  Мы собираем первую вершину массива и умеем.
[24:48.840 --> 24:52.840]  Ну, пожалуйста, или так. На усмотрение, на усмотрение.
[24:52.840 --> 24:54.840]  Нам пока не нужны родители даже.
[24:54.840 --> 24:58.840]  Пока что да. Они нужны уже для того, чтобы проверять, в одном ли дереве находятся две вершины.
[24:58.840 --> 25:04.840]  Нет, погоди, родители нужны для того, чтобы определить, какое под деревом мы выпиливаем.
[25:04.840 --> 25:06.840]  По-моему.
[25:06.840 --> 25:08.840]  Да так.
[25:08.840 --> 25:14.840]  Если у тебя есть ссылка на указание в дереве, как ты будешь выпиливать постепенно?
[25:14.840 --> 25:18.840]  Ну, так шо, увы. Не так все просто.
[25:18.840 --> 25:20.840]  Еще раз, зачем здесь родители?
[25:20.840 --> 25:22.840]  Родители, ну для того, чтобы...
[25:22.840 --> 25:28.840]  Вот тебе хочется выпилить подотрезок, где находится 1 аш и где находится последний.
[25:28.840 --> 25:30.840]  Но ты индексов не знаешь.
[25:30.840 --> 25:32.840]  Знаешь указательное место.
[25:32.840 --> 25:36.840]  Да, ты знаешь указательное соответствующую вершину в дереве.
[25:36.840 --> 25:38.840]  Да, на первую и последнюю.
[25:38.840 --> 25:42.840]  Да, на первую и последнюю. Но кто она там, 5, 7, 8, 13, ты не знаешь.
[25:42.840 --> 25:44.840]  Хорошо, а как узнать?
[25:44.840 --> 25:46.840]  Вот. Вот для этого нужны родители.
[25:46.840 --> 25:50.840]  Ну, например, часто проходишься вот до корня.
[25:50.840 --> 25:52.840]  Оттуда и оттуда найти.
[25:52.840 --> 25:54.840]  Ну, да.
[25:54.840 --> 26:02.840]  Можно просто дойти до корня, записать путь, а потом пройти сверху вниз и найти его порядковый номер стандартным способом.
[26:02.840 --> 26:04.840]  Ну, либо на самом деле сделать это все за один проход.
[26:04.840 --> 26:12.840]  Просто идем наверх, идти поговорим, что если ребро, по которому ты поднялся, оказалось правым, то к ответу прибавляем что-нибудь.
[26:12.840 --> 26:14.840]  Вот это вот.
[26:14.840 --> 26:18.840]  Вот за этим родители откровенно нужны.
[26:18.840 --> 26:22.840]  Но они не так понадобятся, чтобы искать, что в одной компоненте.
[26:22.840 --> 26:27.840]  Да, и тем более, что да, как мы будем отвечать, находятся ли две вершины в одной компоненте.
[26:27.840 --> 26:29.840]  Ну, вот ровно тем же самым способом.
[26:29.840 --> 26:36.840]  Только для этого мы просто выясним, а как бы поднимемся из одной вершины в корень, из другой вершины в корень.
[26:36.840 --> 26:40.840]  Потом посмотрим внутрь и скажем, а не в одном ли мы корне находимся.
[26:40.840 --> 26:42.840]  Вот.
[26:42.840 --> 26:46.840]  Вот такая вот простая технология.
[26:47.840 --> 26:49.840]  Вот.
[26:49.840 --> 26:58.840]  Ну, при большом желании вы можете пытаться хранить, нет, хотя, глубину вершины, но это у вас не получится, поэтому не надо.
[26:58.840 --> 27:10.840]  Тем более, что, смотрите, если вы хотите хранить глубину вершины, а это бывает иногда полезно, то на самом деле вам придется делать отложенную операцию вида прибавления на поддерево.
[27:10.840 --> 27:13.840]  Да, изи, особенно когда вы тут сверху вниз поднимаетесь.
[27:13.840 --> 27:19.840]  Поэтому, но там придется два прохода, то есть нашли путь, а потом по этому пути делаете, пробегаете свеку, опускаете.
[27:19.840 --> 27:24.840]  А почему нельзя хранить первое хранение и последнее?
[27:24.840 --> 27:26.840]  А вот сейчас.
[27:26.840 --> 27:30.840]  Какие хранения на что?
[27:30.840 --> 27:35.840]  На вершины ВВМ дереве.
[27:35.840 --> 27:37.840]  Мы их храним.
[27:39.840 --> 27:41.840]  Что с ними дальше делать?
[27:41.840 --> 27:45.840]  Ну да, у нас в вершине самый индекс не хранится, если что.
[27:48.840 --> 27:53.840]  Про что сейчас было отступление про отложенные операции?
[27:53.840 --> 27:55.840]  Ну, это, да.
[27:55.840 --> 27:57.840]  А зачем?
[27:57.840 --> 28:03.840]  Ну, пока да, да и вообще, нет, в такой подзадаче, в общем-то, и незачем, да и вообще почти никогда незачем.
[28:03.840 --> 28:06.840]  Нет, иногда бывает интересно, но вот.
[28:06.840 --> 28:07.840]  Для LCA?
[28:07.840 --> 28:09.840]  Хотя, не-не-не, ну LCA.
[28:09.840 --> 28:15.840]  Нет, тут LCA не причем, что LCA вот в этом деревеньку отношения к LCA в этом дереве не имеет.
[28:15.840 --> 28:19.840]  Хотя иногда да, мы хотим, наверное, на подотреске минимум искать, поэтому.
[28:19.840 --> 28:24.840]  Это в виду высота вершины исходного дерева, который отвечает вершине АВН дерева.
[28:24.840 --> 28:26.840]  Ну да.
[28:26.840 --> 28:28.840]  Ну да.
[28:28.840 --> 28:31.840]  Нет, ну да, иногда это может захотятся делать, вот соответственно.
[28:31.840 --> 28:33.840]  Значит, далее.
[28:33.840 --> 28:34.840]  Ну хорошо.
[28:34.840 --> 28:39.840]  Значит, там с этими вот, да, используя на максимум всех родителей, значит, КАД запилит.
[28:39.840 --> 28:43.840]  Повторите, что мы выпиливаем под дерево из исходного дерева.
[28:43.840 --> 28:45.840]  Ну, смотри, значит, еще раз.
[28:45.840 --> 28:49.840]  Значит, мы выпиливаем под дерево какой-то вершины, вот в нашем случае АШ.
[28:49.840 --> 28:54.840]  Значит, в нашем, значит, у нас у этой АШ есть первое вхождение в дерево.
[28:54.840 --> 28:56.840]  И есть последнее вхождение в дерево.
[28:56.840 --> 28:58.840]  Да, мы знаем соответственно вершину.
[28:58.840 --> 29:00.840]  Да, мы знаем, где они находятся.
[29:00.840 --> 29:03.840]  В смысле, можем тыкнуть в вершину в декартовом дереве.
[29:03.840 --> 29:05.840]  В смысле ВВЛ.
[29:05.840 --> 29:06.840]  Да, хорошо, да.
[29:06.840 --> 29:08.840]  Но, значит, хорошо.
[29:08.840 --> 29:13.840]  Значит, по этим вершинам мы восстанавливаем их индексы в этом дереве.
[29:13.840 --> 29:14.840]  Зачем?
[29:14.840 --> 29:16.840]  Для того, чтобы потом сделать сплит по неявному ключу.
[29:16.840 --> 29:20.840]  Так, ладно, тут сошлемся, что это была программа экзамена.
[29:20.840 --> 29:21.840]  Вот.
[29:21.840 --> 29:25.840]  Мы, ладно, пока мы поверим в качестве черного ящика, тогда шоу.
[29:25.840 --> 29:27.840]  Да, там за логарифом это делается.
[29:27.840 --> 29:28.840]  Ну да.
[29:28.840 --> 29:29.840]  Ну да.
[29:29.840 --> 29:33.840]  Но если мы знаем, что мы как бы хотим вырезать подотрезы крылья, то как бы мы тогда должны
[29:33.840 --> 29:39.840]  сначала отпилить первую L-1 вершину, а потом отпилить первую L-2 вершину.
[29:39.840 --> 29:40.840]  Ну да.
[29:40.840 --> 29:41.840]  Ну да.
[29:41.840 --> 29:42.840]  Ну да.
[29:42.840 --> 29:43.840]  Ну да.
[29:43.840 --> 29:48.840]  Мы должны сначала отпилить первую L-1 вершину, а потом из там правого полученного
[29:48.840 --> 29:51.840]  дерева отпилить еще вот L-1.
[29:51.840 --> 29:59.840]  Ну это уже, я в этом смысле живу в один индексации, но это уже как бы не те мелочи,
[29:59.840 --> 30:01.840]  которые сильно принципиально.
[30:01.840 --> 30:02.840]  Вот.
[30:02.840 --> 30:06.840]  Значит, мы сейчас как бы плюс-минус единички сейчас нет смысла особо обсуждать.
[30:06.840 --> 30:07.840]  Вот.
[30:07.840 --> 30:11.840]  Ну а теперь, значит, возникает только один вопрос.
[30:11.840 --> 30:15.840]  Как нам сделать линк?
[30:15.840 --> 30:17.840]  Как нам сделать линк?
[30:17.840 --> 30:20.840]  Да, в общем-то так же.
[30:20.840 --> 30:22.840]  Да, в общем-то так же.
[30:22.840 --> 30:24.840]  Потому что что нам теперь надо?
[30:24.840 --> 30:28.840]  Ну теперь самое главное, заметим маленькую приятную вещь.
[30:28.840 --> 30:34.840]  Нам в общем-то достаточно все равно, вот если я вот хочу к вершине Z подвесить нового ребенка,
[30:34.840 --> 30:36.840]  а каким он у меня будет?
[30:36.840 --> 30:37.840]  Первым?
[30:37.840 --> 30:38.840]  Вторым?
[30:38.840 --> 30:39.840]  Пятым?
[30:39.840 --> 30:41.840]  Да, на самом деле абсолютно все равно.
[30:41.840 --> 30:44.840]  Вот давайте, может быть, для удобства первым.
[30:44.840 --> 30:47.840]  Ну или последним тоже самое на самом деле будет.
[30:47.840 --> 30:52.840]  То есть тогда это означает следующее, что вы берете эту вершину E.
[30:52.840 --> 30:57.840]  Ну вот давайте, мы берем где-то у нас в списке нот.
[30:57.840 --> 31:01.840]  Где-то у нас в этом, ну я рисую массив, подразумеваю дерево, естественно, да?
[31:01.840 --> 31:06.840]  Потому что я для массива подразумеваю, вот у меня первое вхождение вот это E.
[31:06.840 --> 31:11.840]  И тогда я очень хочу вот в это место вставить, что вставить?
[31:11.840 --> 31:17.840]  Вот этот вот новый подмассив для вершины H, вот этот вот H, X, H, blah blah blah.
[31:17.840 --> 31:21.840]  И еще одну букву E.
[31:21.840 --> 31:24.840]  Вот, понимаете, да?
[31:28.840 --> 31:31.840]  Суть одна от слова вообще.
[31:31.840 --> 31:34.840]  Да, можно сюда, можно слева, можно после конца,
[31:34.840 --> 31:37.840]  можно перед концом, пожалуйста.
[31:37.840 --> 31:39.840]  То есть на усмотрение.
[31:39.840 --> 31:44.840]  То есть я сейчас поставил вот это для того, чтобы указатель на первую E не менялся.
[31:44.840 --> 31:52.840]  Это неприятно, потому что здесь нужно будет выклипать, поменялся ли указатель на последнюю E.
[31:52.840 --> 31:55.840]  Да, ну может, да, но да.
[31:55.840 --> 32:00.840]  Проще оставить перед E и гарантированно поменять указатель на первую E.
[32:00.840 --> 32:03.840]  А синтетически не важно?
[32:03.840 --> 32:05.840]  Вкусовщина немножко, да?
[32:05.840 --> 32:07.840]  Ну окей, хорошо, пожалуйста.
[32:07.840 --> 32:09.840]  Вот, да, действительно.
[32:09.840 --> 32:12.840]  Давайте, значит, мы тут перед E вставляем эту штуку, вставляем еще одну E,
[32:12.840 --> 32:16.840]  и указатель на самую первую E меняем.
[32:23.840 --> 32:26.840]  А мы все не храним, мы только первую и последнюю храним.
[32:26.840 --> 32:38.840]  Ну, потому что мы можем отпилить из этой штуки все под деревья.
[32:49.840 --> 32:51.840]  Ну как тебе сказать?
[32:51.840 --> 32:57.840]  Ну как сказать, меньше нот.
[32:57.840 --> 33:05.840]  Нет, надо подумать, что в принципе...
[33:05.840 --> 33:10.840]  Ну в принципе, да.
[33:10.840 --> 33:15.840]  Главное, чтобы под дерево начиналось и заканчивалось с себя любимое, а дальше...
[33:15.840 --> 33:17.840]  Да, да, да.
[33:17.840 --> 33:19.840]  А в какой нельзя?
[33:19.840 --> 33:23.840]  Вот сейчас начнем переподвешивать деревья.
[33:23.840 --> 33:26.840]  Ну, когда мы начнем переподвешивать...
[33:26.840 --> 33:31.840]  Нет, ну когда мы начнем переподвешивать закони, у него все равно появится линкап.
[33:31.840 --> 33:33.840]  Вот, нет, ой-ой-ой.
[33:33.840 --> 33:35.840]  Трик позволяет переподвешивать.
[33:35.840 --> 33:37.840]  Ой-ой-ой.
[33:37.840 --> 33:39.840]  Каким же образом интересно.
[33:39.840 --> 33:41.840]  Очень неприятно.
[33:41.840 --> 33:44.840]  Ну, а что нам мешает?
[33:44.840 --> 33:47.840]  Что должно поменяться при переподвешивании с другими вершинами?
[33:47.840 --> 33:49.840]  Как нас меняется альтертура?
[33:49.840 --> 33:50.840]  Ну как?
[33:50.840 --> 33:54.840]  У нас подотрезок переворачивается и пара штук свапается.
[33:54.840 --> 33:56.840]  Делаем реверс на отрезке.
[33:56.840 --> 33:58.840]  Но для этого нужен какой-то отрезок.
[33:58.840 --> 34:01.840]  Вот я хочу, например, вот эту ажи сделать корнем.
[34:01.840 --> 34:03.840]  Ну вот, что тогда?
[34:03.840 --> 34:05.840]  Как выглядел альтертура?
[34:05.840 --> 34:07.840]  Как стал выглядеть альтертура?
[34:07.840 --> 34:08.840]  Ну, выглядел страшно.
[34:08.840 --> 34:10.840]  С внутри Д, внутри Е, внутри Аж.
[34:10.840 --> 34:11.840]  А теперь должно быть наоборот.
[34:11.840 --> 34:13.840]  Аж внутри Е, внутри Д, внутри С.
[34:14.840 --> 34:17.840]  То есть, значит, внутри вот этих вот подотрезков.
[34:27.840 --> 34:29.840]  Нет, конкретно тут-то без вопросов, да.
[34:29.840 --> 34:33.840]  Просто следующая ставка была, что хочется там что-нибудь переподвешивать
[34:33.840 --> 34:35.840]  и, может быть, даже LCA искать.
[34:35.840 --> 34:37.840]  Кстати, вот, действительно.
[34:39.840 --> 34:42.840]  Ну вот, и утверждалось, что как-то можно.
[34:42.840 --> 34:45.840]  Хотя, не знаю, если тут начинаются реверсы на подотрезке,
[34:45.840 --> 34:48.840]  может уже легче сразу писать линкаты и не париться.
[34:49.840 --> 34:51.840]  Не-не-не, вешаться не надо.
[34:52.840 --> 34:53.840]  Как говорится, вешаться не надо.
[34:53.840 --> 34:55.840]  Пусть деревья вешаются.
[34:57.840 --> 34:59.840]  Значит, смотрите.
[34:59.840 --> 35:02.840]  Значит, на самом деле, конечно, мы тут, да,
[35:02.840 --> 35:04.840]  хоть как-то действительно можно делать,
[35:04.840 --> 35:06.840]  действительно обойтись какими-то вот просто
[35:06.840 --> 35:08.840]  высплечиваниями, вмерживаниями.
[35:08.840 --> 35:12.840]  Но, на самом деле, конечно, хочется...
[35:12.840 --> 35:14.840]  Мало того, что хочется вводить, значит,
[35:14.840 --> 35:17.840]  помимо операции линк-кат там,
[35:17.840 --> 35:20.840]  и вот этого еще какую-нибудь там функцию
[35:20.840 --> 35:23.840]  эверт, вот будем ее называть там по классике,
[35:23.840 --> 35:28.840]  эверт от V, это сделать
[35:28.840 --> 35:32.840]  вершину V корнем
[35:32.840 --> 35:34.840]  своего поддерева.
[35:34.840 --> 35:36.840]  Вот это вот хочется делать, например.
[35:38.840 --> 35:40.840]  Что?
[35:46.840 --> 35:48.840]  Ну да, линк, конечно,
[35:48.840 --> 35:51.840]  продолжает подвешивать корень к чему-нибудь.
[35:51.840 --> 35:54.840]  Нет, она может и корню подвешивать, но самое главное, что V корень.
[35:54.840 --> 35:56.840]  Да.
[35:56.840 --> 35:58.840]  Ну V это корень, чтобы как бы структура под деревьев
[35:58.840 --> 35:59.840]  осталась под деревью.
[35:59.840 --> 36:01.840]  Ну теперь это уже не проблема, потому что как бы
[36:01.840 --> 36:03.840]  если вы хотите подвесить ни корень, ни корню,
[36:03.840 --> 36:05.840]  то как бы вы просто там делаете
[36:05.840 --> 36:07.840]  соответственно под деревом нужную вершину корнем
[36:07.840 --> 36:08.840]  и подвешиваете.
[36:08.840 --> 36:10.840]  То есть это уже такое.
[36:10.840 --> 36:13.840]  Но это еще только техническая задача.
[36:13.840 --> 36:15.840]  Вот.
[36:15.840 --> 36:17.840]  Потому что
[36:17.840 --> 36:19.840]  тут начинается, потому что мы
[36:19.840 --> 36:22.840]  на этом не останавливаемся. Мы уже в прошлый раз
[36:22.840 --> 36:25.840]  начали тут мечтать о каких-то там вещах в духе, что
[36:25.840 --> 36:28.840]  давайте для каждой вершины,
[36:28.840 --> 36:31.840]  что в каждой вершине у нас хранится какая-то там чиселка
[36:31.840 --> 36:34.840]  фиолетовая.
[36:34.840 --> 36:37.840]  А, не, малиновая.
[36:37.840 --> 36:40.840]  Вот.
[36:40.840 --> 36:42.840]  Ну вот.
[36:42.840 --> 36:45.840]  Все когда-то бывает в первый раз.
[36:45.840 --> 36:48.840]  Нет, а что такое?
[36:48.840 --> 36:49.840]  Во.
[36:49.840 --> 36:52.840]  В изначальном дереве мы хранили в вершинах какие-то значения.
[36:52.840 --> 36:55.840]  Да просто, даже не в изначальном, а просто в каждой вершине
[36:55.840 --> 36:58.840]  хранятся какие-то значения.
[36:58.840 --> 36:59.840]  В каждой вершине ничего.
[36:59.840 --> 37:02.840]  В каждой вершине исходное... Нет, мы забываем про вот эти
[37:02.840 --> 37:05.840]  картячки. Да, исходного дерева.
[37:05.840 --> 37:08.840]  То есть мы сейчас говорим об обстановке задачи.
[37:08.840 --> 37:11.840]  Ну бора у нас нет на дереве.
[37:11.840 --> 37:13.840]  Для какого?
[37:13.840 --> 37:16.840]  Чего? Какой? Где бы?
[37:16.840 --> 37:19.840]  В программировании слово «бор» имеет принципиально
[37:19.840 --> 37:21.840]  другой смысл.
[37:21.840 --> 37:24.840]  Ну вот о простройке мы пока не говорим, поэтому
[37:24.840 --> 37:26.840]  бором это лучше не называть.
[37:26.840 --> 37:29.840]  Да, в английском языке, наверное, такого каламбура бы не было, но
[37:29.840 --> 37:32.840]  в английском языке говорим, поэтому как бы «бор» это другое.
[37:32.840 --> 37:35.840]  Как бы набор деревьев называется «лес», если что.
[37:35.840 --> 37:38.840]  Вот, тем более.
[37:38.840 --> 37:39.840]  Ну вот.
[37:39.840 --> 37:43.840]  А, ну, кстати, в английском языке он тоже называется «форест», если что.
[37:43.840 --> 37:45.840]  Вот.
[37:45.840 --> 37:47.840]  Да, forest, yeah.
[37:47.840 --> 37:50.840]  Moreover, there is some problems like
[37:50.840 --> 37:53.840]  minimal spanning forest, for example.
[37:53.840 --> 37:56.840]  Instead of minimal spanning tree.
[37:56.840 --> 37:58.840]  Вот.
[37:58.840 --> 38:01.840]  Согласен.
[38:06.840 --> 38:09.840]  Не, ну там типа...
[38:09.840 --> 38:12.840]  Ну, фактически, да, найти миностобов в всех компонентах связности.
[38:12.840 --> 38:14.840]  Ну, такое понятие есть.
[38:14.840 --> 38:16.840]  Там оно просто удобно бывает.
[38:16.840 --> 38:18.840]  Потому что там есть куча алгоритмов в духе.
[38:18.840 --> 38:20.840]  Давайте вытянем какие-то ребра.
[38:20.840 --> 38:23.840]  Раф распадется, значит, на компоненты связности в каждом языке.
[38:23.840 --> 38:26.840]  Там найдем этот минимальный лес.
[38:26.840 --> 38:27.840]  Вот.
[38:27.840 --> 38:30.840]  Сожмем их в компоненты, значит, ввернем старые ребра, повторим операцию.
[38:30.840 --> 38:33.840]  То есть там вот на подобных технологиях...
[38:33.840 --> 38:35.840]  Ну, там, естественно, удалять будем не просто так,
[38:35.840 --> 38:39.840]  чтобы там убеждаться, что те ребра, которые мы удалили, они там не сильно нам помешают.
[38:39.840 --> 38:41.840]  Ну и прочее, прочее, прочее.
[38:41.840 --> 38:42.840]  Вот.
[38:42.840 --> 38:44.840]  Значит.
[38:44.840 --> 38:45.840]  Ну, там разные технологии есть.
[38:45.840 --> 38:47.840]  В свое время мы это обязательно все увидим.
[38:47.840 --> 38:48.840]  Ну, вот.
[38:48.840 --> 38:51.840]  Значит, то есть вот хочется рисовать вот какие-то тут чиселки.
[38:53.840 --> 38:55.840]  Что?
[38:56.840 --> 38:57.840]  Объекты какие?
[38:57.840 --> 38:58.840]  Да, любые.
[38:58.840 --> 38:59.840]  Ну...
[39:00.840 --> 39:05.840]  Мы к задаче добавили еще два условия числа и сделать вывод.
[39:05.840 --> 39:07.840]  Да.
[39:07.840 --> 39:08.840]  Вот.
[39:08.840 --> 39:11.840]  И более того, у нас тут начинаются еще какие-нибудь веселые запросы.
[39:11.840 --> 39:13.840]  Ну, значит, теперь у нас...
[39:13.840 --> 39:16.840]  Ну да, то есть теперь эта штука будет называться...
[39:16.840 --> 39:18.840]  Там КОСТ, допустим, АТВ.
[39:18.840 --> 39:21.840]  То есть там нам будет очень хотеться для каждой вершины узнавать,
[39:21.840 --> 39:23.840]  а что у нее там написано.
[39:24.840 --> 39:26.840]  Ну, и это тоже.
[39:26.840 --> 39:28.840]  Нет, если бы просто было, что в ней написано,
[39:28.840 --> 39:30.840]  это, конечно, было бы глубоко неинтересно.
[39:31.840 --> 39:36.840]  Интереснее, конечно, такой веселый запрос, как...
[39:36.840 --> 39:39.840]  Как говорится, прошу перейти, правильно, МИН-КОСТ.
[39:41.840 --> 39:43.840]  Нет, если у вас возникли ассоциации с какими-то там потоками,
[39:43.840 --> 39:45.840]  забудьте о них, пожалуйста.
[39:46.840 --> 39:49.840]  Как говорится, до них мы тоже доживем, конечно же, но...
[39:49.840 --> 39:51.840]  Ну...
[39:52.840 --> 39:54.840]  Думаете, да ладно.
[39:54.840 --> 39:56.840]  Не, ну это вы... Не, не надейтесь.
[39:58.840 --> 40:00.840]  Нет, вы понимаете, тут ситуация простая.
[40:00.840 --> 40:02.840]  Даже если вы переведетесь в основной поток,
[40:02.840 --> 40:05.840]  то, соответственно, там потоки тоже будут.
[40:11.840 --> 40:13.840]  Да, но без МИН-КОСТов в этом не обойдетесь, я думаю.
[40:14.840 --> 40:18.840]  Так что не выживут только те, кто либо переведется в базовый, либо это отчислится.
[40:19.840 --> 40:21.840]  Ну вот, ну тогда вы перейдете в какой-нибудь другой вуз,
[40:21.840 --> 40:23.840]  и там тоже будет МИН-КОСТ.
[40:23.840 --> 40:25.840]  Что это такое?
[40:25.840 --> 40:27.840]  Что это такое? Что такое отчислится?
[40:27.840 --> 40:29.840]  Нет, не буду я отвечать на этот вопрос.
[40:29.840 --> 40:31.840]  А МИН-КОСТ, да, именно.
[40:31.840 --> 40:36.840]  То есть вы хотите найти, рассмотреть путь от вершины В до своего текущего корня,
[40:36.840 --> 40:38.840]  вот этого вот.
[40:39.840 --> 40:43.840]  Рассмотреть все веса вот этих вот всех вершин, вершин, вершин, вершин.
[40:44.840 --> 40:47.840]  И хотите найти минимальный среди них.
[40:49.840 --> 40:51.840]  Вот такой вот простой идея.
[40:54.840 --> 40:56.840]  Ну, это пока для примера.
[40:56.840 --> 40:58.840]  Потому что на самом деле,
[41:00.840 --> 41:03.840]  естественно, на самом деле нам захочется менять.
[41:03.840 --> 41:08.840]  На самом деле, конечно, мы себе в перспективе имеем в виду,
[41:08.840 --> 41:11.840]  что мы на самом деле можем там всегда делать...
[41:13.840 --> 41:15.840]  Зачем лца первую вершину?
[41:15.840 --> 41:17.840]  Да, да, да, боже упаси.
[41:17.840 --> 41:21.840]  А на самом деле захочется, как всегда, там делать присваивание на пути.
[41:21.840 --> 41:23.840]  Ну, как в Хэви-Лайте, да.
[41:23.840 --> 41:25.840]  Присваивание, там, добавление на пути.
[41:26.840 --> 41:28.840]  Там сумму на пути, минимум на пути.
[41:28.840 --> 41:30.840]  Вот, пожалуйста, минимум на пути.
[41:30.840 --> 41:32.840]  Ну, в общем, как всегда.
[41:39.840 --> 41:41.840]  Нет, самое смешное, что можно.
[41:42.840 --> 41:44.840]  На самом-то деле.
[41:44.840 --> 41:46.840]  Отвратительно.
[41:46.840 --> 41:48.840]  Даже алгоритм деревьев.
[41:49.840 --> 41:50.840]  Нет, нет.
[41:50.840 --> 41:52.840]  Нет, какая разница?
[41:52.840 --> 41:54.840]  Тебе это очень как раз не понравилось.
[41:54.840 --> 41:58.840]  Нет, что такое? Ты все помержал, все свои суффиксы пересчитал и там...
[41:58.840 --> 42:00.840]  Да, я да.
[42:00.840 --> 42:02.840]  Я дерево построил,
[42:02.840 --> 42:04.840]  прификсы суффиксы насчитал,
[42:04.840 --> 42:06.840]  левые, правые под деревья там
[42:06.840 --> 42:08.840]  насчитал, запускаю, хану,
[42:08.840 --> 42:10.840]  пыщем бы, хащем бы, шайтанам ада.
[42:14.840 --> 42:16.840]  Что, не было такого?
[42:16.840 --> 42:18.840]  Не сталкивались.
[42:18.840 --> 42:20.840]  Не сталкивались.
[42:20.840 --> 42:22.840]  Ну, мало ли.
[42:22.840 --> 42:24.840]  Иногда сейс-админы любят так разговаривать.
[42:24.840 --> 42:26.840]  Вот.
[42:26.840 --> 42:28.840]  Так, тут нет сейс-админов, ну ладно.
[42:28.840 --> 42:30.840]  Ладно, хорошо, хорошо.
[42:30.840 --> 42:32.840]  Ладно, так, смотрите.
[42:32.840 --> 42:34.840]  Значит, что тут предлагается?
[42:34.840 --> 42:36.840]  Значит, туда всякие там апдейты
[42:36.840 --> 42:38.840]  эти делать.
[42:38.840 --> 42:40.840]  Значит, что тут предлагается делать?
[42:40.840 --> 42:42.840]  Предлагается делать
[42:42.840 --> 42:44.840]  маленькую приятную вещь.
[42:44.840 --> 42:46.840]  Значит, смотрите.
[42:46.840 --> 42:48.840]  Значит, каждое дерево
[42:48.840 --> 42:50.840]  предлагается снова
[42:50.840 --> 42:52.840]  декомпозировать на пути.
[42:54.840 --> 42:56.840]  Да нет?
[42:56.840 --> 42:58.840]  Потому что на этот раз
[42:58.840 --> 43:00.840]  мы не будем говорить о том,
[43:00.840 --> 43:02.840]  как же мы конкретно будем декомпозировать
[43:02.840 --> 43:04.840]  на пути.
[43:04.840 --> 43:06.840]  То есть, это понятие будет динамическим.
[43:06.840 --> 43:08.840]  То есть, если раньше там...
[43:08.840 --> 43:10.840]  Когда у нас дерево было статическим,
[43:10.840 --> 43:12.840]  да, у нас там во всех хевилайтах,
[43:12.840 --> 43:14.840]  во всех ледерах и прочей радости
[43:14.840 --> 43:16.840]  мы действительно хранили там,
[43:16.840 --> 43:18.840]  что давайте пути будем хранить так,
[43:18.840 --> 43:20.840]  что из каждой вершины ребро ведет
[43:20.840 --> 43:22.840]  в каком-то самого жирного ребенка
[43:22.840 --> 43:24.840]  и так далее.
[43:24.840 --> 43:26.840]  Да, все такое бывало у нас.
[43:26.840 --> 43:28.840]  Но в данном случае мы себе
[43:28.840 --> 43:30.840]  не будем привязываться к тому,
[43:30.840 --> 43:32.840]  кто там жирный, кто там нет.
[43:34.840 --> 43:36.840]  Вот.
[43:36.840 --> 43:38.840]  Мы просто будем говорить, что у нас
[43:38.840 --> 43:40.840]  здесь дерево декомпозируется
[43:40.840 --> 43:42.840]  на какие-то пути.
[43:44.840 --> 43:46.840]  Ребра, которые у нас лежат
[43:46.840 --> 43:48.840]  в этих путях, мы будем называть
[43:48.840 --> 43:50.840]  жирными, сплошными.
[43:52.840 --> 43:54.840]  Вот.
[43:58.840 --> 44:00.840]  А в каждом лесе мы будем то же самое делать.
[44:00.840 --> 44:02.840]  Вот. Значит, это будет сплошным.
[44:02.840 --> 44:04.840]  Вот. Сплошным.
[44:04.840 --> 44:06.840]  Ну вот. Или вот.
[44:06.840 --> 44:08.840]  В английской литературе они просто
[44:08.840 --> 44:10.840]  называются solid.
[44:10.840 --> 44:12.840]  Вот. Нет, я
[44:12.840 --> 44:14.840]  мог бы тут их нарисовать.
[44:14.840 --> 44:16.840]  Нет, смотрите, забегай вперед.
[44:16.840 --> 44:18.840]  Я мог бы их нарисовать, что давайте их рисовать
[44:18.840 --> 44:20.840]  красными и синими, но я не буду этого делать.
[44:20.840 --> 44:22.840]  Потому что красные и синие нам потребуется.
[44:22.840 --> 44:24.840]  Да, потому что
[44:24.840 --> 44:26.840]  красные и синие, помните, у нас были в
[44:26.840 --> 44:28.840]  heavy light тяжелые и легкие.
[44:28.840 --> 44:30.840]  Так вот, сегодня нам они понадобятся.
[44:30.840 --> 44:32.840]  Так что здесь?
[44:34.840 --> 44:36.840]  Как говорится, нет.
[44:36.840 --> 44:38.840]  Как вы знаете, было такое шоу
[44:38.840 --> 44:40.840]  когда-то, феномен.
[44:40.840 --> 44:42.840]  А пути все вертикальные?
[44:42.840 --> 44:44.840]  Да, пути все вертикальные.
[44:44.840 --> 44:46.840]  Так вот, было вот шоу феномен, пока я тут
[44:46.840 --> 44:48.840]  рисую. Вот там
[44:48.840 --> 44:50.840]  действительно, суть была в том, что там
[44:50.840 --> 44:52.840]  шоу об экстрасенсах, там был
[44:52.840 --> 44:54.840]  какой-то главный экстрасенс, который все время показывал какую-то
[44:54.840 --> 44:56.840]  магию, и вот функция ведущего
[44:56.840 --> 44:58.840]  в этом мини была там что-то стоять сзади
[44:58.840 --> 45:00.840]  и просто через каждое слово говорить там поразительно,
[45:00.840 --> 45:02.840]  я не могу в это поверить.
[45:02.840 --> 45:04.840]  То есть в результате кто-то там
[45:04.840 --> 45:06.840]  в породе хорошо, поэтому прошлись,
[45:06.840 --> 45:08.840]  когда в какой-то момент этот
[45:08.840 --> 45:10.840]  ульзю не сказал. Вот смотрите,
[45:10.840 --> 45:12.840]  видите, вот у меня в руках вилка
[45:12.840 --> 45:14.840]  ведущая сзади, поразительно, я не могу в это
[45:14.840 --> 45:16.840]  поверить.
[45:18.840 --> 45:20.840]  Так вот, на самом деле
[45:20.840 --> 45:22.840]  вот это вот как-то у меня вот такие
[45:22.840 --> 45:24.840]  ассоциации вызывает.
[45:24.840 --> 45:28.840]  Значит, смотрите,
[45:28.840 --> 45:30.840]  значит, смотрите, то есть мы
[45:30.840 --> 45:32.840]  декомпозировали дерево на пути
[45:32.840 --> 45:34.840]  каким-то образом,
[45:34.840 --> 45:36.840]  каким-то абсолютно мистическим
[45:36.840 --> 45:38.840]  образом. Так вот, все ребра,
[45:38.840 --> 45:40.840]  из которых состоят эти пути мы будем называть
[45:40.840 --> 45:42.840]  сплошными,
[45:42.840 --> 45:44.840]  а все остальные ребра мы будем называть
[45:44.840 --> 45:46.840]  пунктирными.
[45:46.840 --> 45:48.840]  Не обязательно,
[45:48.840 --> 45:50.840]  не все ребра
[45:50.840 --> 45:52.840]  в пути.
[45:52.840 --> 45:54.840]  Конечно же, не все ребра.
[45:54.840 --> 45:56.840]  Нет, у нас, если все
[45:56.840 --> 45:58.840]  ребра в пути, то дерево бомбуча.
[45:58.840 --> 46:00.840]  Вот.
[46:00.840 --> 46:02.840]  Вот.
[46:02.840 --> 46:04.840]  Господи, бля.
[46:04.840 --> 46:06.840]  Вот.
[46:18.840 --> 46:20.840]  Это оно есть.
[46:20.840 --> 46:22.840]  Дэшт.
[46:28.840 --> 46:30.840]  Вот.
[46:34.840 --> 46:36.840]  Вот.
[46:38.840 --> 46:40.840]  Так вот.
[46:40.840 --> 46:42.840]  Нет.
[46:42.840 --> 46:44.840]  Нет, сагдельки это другой предмет.
[46:44.840 --> 46:46.840]  Так.
[46:46.840 --> 46:48.840]  Ну вот, значит, тут что-то
[46:48.840 --> 46:50.840]  висит какое-то безобразие.
[46:50.840 --> 46:52.840]  Вот так вот.
[46:52.840 --> 46:54.840]  Вот.
[46:54.840 --> 46:56.840]  Ну, вот так.
[46:56.840 --> 46:58.840]  Дело в том, что,
[46:58.840 --> 47:00.840]  как я уже сказал,
[47:00.840 --> 47:02.840]  гарантировать можем только одно, что из каждой
[47:02.840 --> 47:04.840]  режимы в какого-то ее ребенка
[47:04.840 --> 47:06.840]  ведет не более одного сплошного
[47:06.840 --> 47:08.840]  ребра.
[47:08.840 --> 47:10.840]  Да, может быть ноль, пожалуйста.
[47:10.840 --> 47:12.840]  Даже при наличии
[47:12.840 --> 47:14.840]  детей.
[47:14.840 --> 47:16.840]  Как это у нас, типа, много детей
[47:16.840 --> 47:18.840]  и не одного сплошного. Все пунктирные.
[47:18.840 --> 47:20.840]  Вот.
[47:20.840 --> 47:22.840]  Значит, что у нас тогда дальше?
[47:22.840 --> 47:24.840]  Значит,
[47:24.840 --> 47:26.840]  но фиксировать
[47:26.840 --> 47:28.840]  мы это разбиение, раз и навсегда,
[47:28.840 --> 47:30.840]  естественно, не будем, потому что у нас деревья будут
[47:30.840 --> 47:32.840]  отпиливаться.
[47:32.840 --> 47:34.840]  Значит,
[47:34.840 --> 47:36.840]  более того,
[47:36.840 --> 47:38.840]  мы себе введем,
[47:38.840 --> 47:40.840]  вот, как бы, если уж
[47:40.840 --> 47:42.840]  упоминали сплэй-деревья, значит,
[47:42.840 --> 47:44.840]  по аналогии с ним мы введем
[47:44.840 --> 47:46.840]  мистическую функцию
[47:46.840 --> 47:48.840]  expose
[47:48.840 --> 47:50.840]  от v.
[47:50.840 --> 47:52.840]  Это будет такая внутренняя функция.
[47:52.840 --> 47:54.840]  То есть она нужна нам только
[47:54.840 --> 47:56.840]  внутри самой структуры данных.
[47:56.840 --> 47:58.840]  И делать, ну вот,
[47:58.840 --> 48:00.840]  цель ее будет очень простой.
[48:00.840 --> 48:02.840]  Ее целью будет
[48:02.840 --> 48:04.840]  взять какую-нибудь вершину v
[48:04.840 --> 48:06.840]  и
[48:06.840 --> 48:08.840]  сделать так,
[48:08.840 --> 48:10.840]  чтобы был, чтобы появился
[48:10.840 --> 48:12.840]  путь,
[48:12.840 --> 48:14.840]  который начинается в корне
[48:14.840 --> 48:16.840]  и заканчивается v, ну или наоборот,
[48:16.840 --> 48:18.840]  как вы там храните.
[48:18.840 --> 48:20.840]  Советуют, кстати,
[48:20.840 --> 48:22.840]  сохранить именно снизу вверх
[48:22.840 --> 48:24.840]  путь.
[48:24.840 --> 48:26.840]  Но авторы хотят, чтобы...
[48:26.840 --> 48:28.840]  авторы рекомендуют, что вот эта вот штука
[48:28.840 --> 48:30.840]  это начало пути, а вот это конец.
[48:30.840 --> 48:32.840]  Вот.
[48:32.840 --> 48:34.840]  Вот.
[48:34.840 --> 48:36.840]  Да, если чтобы это... Да-да-да, вот это ребро,
[48:36.840 --> 48:38.840]  кстати, они предлагают действительно делать
[48:38.840 --> 48:40.840]  пунктирным. И, соответственно,
[48:40.840 --> 48:42.840]  ну и здесь, соответственно, вот это вот ребро тоже
[48:42.840 --> 48:44.840]  пунктирное. Ну, в общем случае
[48:44.840 --> 48:46.840]  понятно, что там действительно исходный
[48:46.840 --> 48:48.840]  путь мог быть на самом деле вот каким-то вот
[48:48.840 --> 48:50.840]  действительно вот таким.
[48:50.840 --> 48:52.840]  Там вот, да, вот как мы рисовали, да.
[48:52.840 --> 48:54.840]  Там вот как-то вот так вот, да.
[48:54.840 --> 48:56.840]  То есть тут много чего может быть.
[48:56.840 --> 48:58.840]  И тогда мы тут действительно
[48:58.840 --> 49:00.840]  очень много...
[49:00.840 --> 49:02.840]  То есть если вот эта вершина v,
[49:02.840 --> 49:04.840]  то вот это ребро мы делаем, значит,
[49:04.840 --> 49:06.840]  от сплики, ну вот объявляем пунктирным.
[49:06.840 --> 49:08.840]  Значит, путь действительно строим
[49:08.840 --> 49:10.840]  вот таким вот образом.
[49:10.840 --> 49:12.840]  И, соответственно, все вот эти вот...
[49:12.840 --> 49:14.840]  Такие вот ребра
[49:14.840 --> 49:16.840]  мы объявляем.
[49:16.840 --> 49:18.840]  А чтобы они хранимы,
[49:18.840 --> 49:20.840]  они не разрешены юрагителям?
[49:20.840 --> 49:22.840]  Не разрешены юрагителям в деревне?
[49:22.840 --> 49:24.840]  Ну...
[49:24.840 --> 49:26.840]  Вот.
[49:26.840 --> 49:28.840]  Но на самом деле не совсем.
[49:28.840 --> 49:30.840]  В явном виде родителя мы не храним.
[49:30.840 --> 49:32.840]  Вот.
[49:32.840 --> 49:34.840]  Ну вот мы
[49:34.840 --> 49:36.840]  можем делать это чуть-чуть похитрее.
[49:36.840 --> 49:38.840]  Хотя
[49:38.840 --> 49:40.840]  можно добиться того, чтобы мы это делали.
[49:40.840 --> 49:42.840]  Потому что вопрос, как мы будем хранить
[49:42.840 --> 49:44.840]  эти пути?
[49:44.840 --> 49:46.840]  А пути мы будем хранить
[49:46.840 --> 49:48.840]  весьма простым образом. Каждый конкретный
[49:48.840 --> 49:50.840]  путь мы будем хранить
[49:50.840 --> 49:52.840]  в каком-то, пока
[49:52.840 --> 49:54.840]  каком-то двоичном дереве
[49:54.840 --> 49:56.840]  поиска.
[49:56.840 --> 49:58.840]  Значит, пока для простоты
[49:58.840 --> 50:00.840]  каком-то.
[50:00.840 --> 50:02.840]  Вот.
[50:02.840 --> 50:04.840]  Ну, разница ставка будет такая.
[50:04.840 --> 50:06.840]  Дело в том, что...
[50:08.840 --> 50:10.840]  По неявному ключу.
[50:12.840 --> 50:14.840]  Вот. По неявному ключу. То есть как бы
[50:14.840 --> 50:16.840]  каждый путь это такой массив.
[50:16.840 --> 50:18.840]  Вот. Последовательность вершин.
[50:18.840 --> 50:20.840]  Вот давайте, как мы только что
[50:20.840 --> 50:22.840]  уже делали на этом массиве строить
[50:22.840 --> 50:24.840]  дерево.
[50:24.840 --> 50:26.840]  То есть какое-нибудь двоичное дерево
[50:26.840 --> 50:28.840]  для того, чтобы мерчить. Ну, потому что вот тут для
[50:28.840 --> 50:30.840]  разминочки вот предлагается такое.
[50:30.840 --> 50:32.840]  Давайте представим себе, что нам фантастически
[50:32.840 --> 50:34.840]  везло все это время.
[50:34.840 --> 50:36.840]  И все под...
[50:36.840 --> 50:38.840]  И у нас все под деревья, которые у нас были,
[50:38.840 --> 50:40.840]  это бамбуки.
[50:40.840 --> 50:42.840]  Вот мы работаем
[50:42.840 --> 50:44.840]  с бамбуками.
[50:44.840 --> 50:46.840]  И все, что от нас просят, это постоянно там...
[50:48.840 --> 50:50.840]  Ну, по факту получается свержить
[50:50.840 --> 50:52.840]  два бамбука или распилить бамбук на два.
[50:52.840 --> 50:54.840]  То есть тогда как бы
[50:54.840 --> 50:56.840]  делается без проблем.
[50:56.840 --> 50:58.840]  Мы там храним каждый бамбук
[50:58.840 --> 51:00.840]  в ВВЛ-дереве и своем задачу
[51:00.840 --> 51:02.840]  к сплету и мерчу массивов. Правда?
[51:02.840 --> 51:04.840]  То есть тут, в общем-то, даже все за логарифом работает.
[51:06.840 --> 51:08.840]  Более того, если нам очень хочется
[51:08.840 --> 51:10.840]  сказать, что корень теперь вот этого
[51:10.840 --> 51:12.840]  дерева теперь не вот эта вершина, а вот эта,
[51:12.840 --> 51:14.840]  то реверс ВВЛ-дереве, это тоже для нас
[51:14.840 --> 51:16.840]  уже непроблемная операция. Правда?
[51:18.840 --> 51:20.840]  А если в серединке?
[51:20.840 --> 51:22.840]  Чего в серединке?
[51:22.840 --> 51:24.840]  Если мы хотим, чтобы Борин сделать серединку.
[51:24.840 --> 51:26.840]  А, ну тогда он перестанет быть бамбучей.
[51:28.840 --> 51:30.840]  А, логично.
[51:30.840 --> 51:32.840]  Пока это было бы для нас
[51:32.840 --> 51:34.840]  вообще не проблема.
[51:34.840 --> 51:36.840]  Ну вот, хотя вот
[51:36.840 --> 51:38.840]  в домашней визитации, вы помните, у вас там была одна веселая задача,
[51:38.840 --> 51:40.840]  где, скажем,
[51:40.840 --> 51:42.840]  где надо делать фактически что-то типа
[51:42.840 --> 51:44.840]  динамической связности, только даже с расстояниями,
[51:44.840 --> 51:46.840]  но вам гарантируется, что степень
[51:46.840 --> 51:48.840]  каждой вершины не более чем два, помните?
[51:48.840 --> 51:50.840]  Ну да,
[51:50.840 --> 51:52.840]  задача тоже обнаружена, что там все
[51:52.840 --> 51:54.840]  либо бамбук, либо
[51:54.840 --> 51:56.840]  замкнутый бамбук, соответственно,
[51:56.840 --> 51:58.840]  и вот
[51:58.840 --> 52:00.840]  и это действительно
[52:00.840 --> 52:02.840]  изначально используется определенного рода техники.
[52:02.840 --> 52:04.840]  Не самые, может быть, приятные, но тем не менее.
[52:06.840 --> 52:08.840]  Значится далее.
[52:08.840 --> 52:10.840]  Но, конечно же,
[52:10.840 --> 52:12.840]  ну вот,
[52:12.840 --> 52:14.840]  значит, конечно же, в нашем случае
[52:14.840 --> 52:16.840]  становится
[52:16.840 --> 52:18.840]  немножко больно.
[52:18.840 --> 52:20.840]  Потому что,
[52:20.840 --> 52:22.840]  ну, действительно,
[52:22.840 --> 52:24.840]  на самом деле, конечно,
[52:24.840 --> 52:26.840]  теперь у нас
[52:26.840 --> 52:28.840]  как выполнять все эти запросы?
[52:28.840 --> 52:30.840]  Идея будет такая,
[52:30.840 --> 52:32.840]  основная идея
[52:32.840 --> 52:34.840]  будет следующая,
[52:34.840 --> 52:36.840]  что мы с вами,
[52:36.840 --> 52:38.840]  значит, прежде чем сделать вот любую из
[52:38.840 --> 52:40.840]  вот для начала вот этих операций,
[52:42.840 --> 52:44.840]  делаем expose.
[52:46.840 --> 52:48.840]  Вот, да.
[52:48.840 --> 52:50.840]  Как бы и да, все
[52:50.840 --> 52:52.840]  не случайно причем, да.
[52:52.840 --> 52:54.840]  Но самое смешное,
[52:54.840 --> 52:56.840]  но тут аккуратно, на самом деле это мы где-то
[52:56.840 --> 52:58.840]  видели что-то похожее на это.
[52:58.840 --> 53:00.840]  Потому что парадокс такой, линкад был придуман
[53:00.840 --> 53:02.840]  за два года до сплей 3.
[53:02.840 --> 53:04.840]  Вот.
[53:04.840 --> 53:06.840]  То есть более того, они
[53:06.840 --> 53:08.840]  у них изначально линкад работал за логорифом,
[53:08.840 --> 53:10.840]  но они там примут,
[53:10.840 --> 53:12.840]  до этого придумали какое-то там полуукуренное
[53:12.840 --> 53:14.840]  дерево. Но я не знаю,
[53:14.840 --> 53:16.840]  может я честно не копал, может оно
[53:16.840 --> 53:18.840]  не такое укуренное, как кажется, но
[53:18.840 --> 53:20.840]  в статье я
[53:20.840 --> 53:22.840]  посмотрел, выглядело страшно. То есть там дерево
[53:22.840 --> 53:24.840]  с какими-то там зубодробительными условиями,
[53:24.840 --> 53:26.840]  хотя я подозреваю, что просто, видимо,
[53:26.840 --> 53:28.840]  что-то более продвинутая версия того, чтобы вот
[53:28.840 --> 53:30.840]  с вами там в хэви лайте рисовали, на самом деле.
[53:30.840 --> 53:32.840]  Вот. Но там
[53:32.840 --> 53:34.840]  были какой-то безобразие. Вот.
[53:34.840 --> 53:36.840]  Но потом через два года появилась сплей дерева,
[53:36.840 --> 53:38.840]  которая гемахом решила там кучу сразу проблем,
[53:38.840 --> 53:40.840]  в том числе и эту.
[53:40.840 --> 53:42.840]  Ну, помните, да, у нас сплей дерева, почему у нас появилась
[53:42.840 --> 53:44.840]  сплей дерева, когда у нас как бы все, все что
[53:44.840 --> 53:46.840]  нужно мы можем делать и B деревом,
[53:46.840 --> 53:48.840]  и VN деревом, и так далее, да, помните?
[53:48.840 --> 53:50.840]  То есть там вот было там,
[53:50.840 --> 53:52.840]  потому что иногда нам хочется не просто честного
[53:52.840 --> 53:54.840]  алгорифма, а хочется, чтобы у нас были какие-то,
[53:54.840 --> 53:56.840]  что там какие-то запросы мы делаем
[53:56.840 --> 53:58.840]  часто, какие-то редко. И хочется,
[53:58.840 --> 54:01.840]  чтобы дерево это как-то учитывало и работало с этим оптимальнее.
[54:01.840 --> 54:03.840]  Ну вот оказывается, что там какие бы оптимальности,
[54:03.840 --> 54:06.840]  то есть сплэй дерево в этом смысле тоже идеально работает,
[54:06.840 --> 54:08.840]  на самом деле тоже можно оценить.
[54:08.840 --> 54:10.840]  Вот.
[54:10.840 --> 54:13.840]  Так вот, ну здесь правда сплэй дерево тоже нужно будет работать аккуратно,
[54:13.840 --> 54:18.840]  до этого мы доживем, пока давайте, то есть пока для этого нам нужно научиться работать с произвольным.
[54:18.840 --> 54:23.840]  То есть да, забирая вперед скажем, что на самом деле ставка у нас будет такая.
[54:23.840 --> 54:28.840]  Если мы тут ставим произвольную АВЛ-ку с Б-шкой,
[54:28.840 --> 54:34.840]  то тогда я утверждаю, что все эти запросы мы будем делать за лог квадрат.
[54:34.840 --> 54:39.840]  Вот мы это прям просто докажем, что это будет лог квадрат.
[54:39.840 --> 54:42.840]  Ну да, а у нас и, ну как бы у нас все будет амортизировано,
[54:42.840 --> 54:46.840]  но если как только мы введем сплэй,
[54:46.840 --> 54:51.840]  еще и чуть-чуть проследим за тем, как правильно тут что делать,
[54:54.840 --> 54:59.840]  то тогда логарифом у нас, как мы докажем, торжественно превратится,
[54:59.840 --> 55:02.840]  вот такие квадраты торжественно ликвидируются.
[55:02.840 --> 55:07.840]  Вот такая у нас сегодня ставка.
[55:07.840 --> 55:11.840]  Вот ставка, понятно?
[55:11.840 --> 55:13.840]  Вот.
[55:13.840 --> 55:18.840]  Ну, значится, поехали.
[55:18.840 --> 55:20.840]  Значится, поехали.
[55:20.840 --> 55:22.840]  Ну, что ж нам делать?
[55:22.840 --> 55:26.840]  Ну, во-первых, сделать так, чтобы вершина В была первой вершиной в своем пути,
[55:26.840 --> 55:32.840]  и это без труда, потому что вы делаете просто сплит соответствующего дерева, правда?
[55:32.840 --> 55:36.840]  Вот, согласны?
[55:36.840 --> 55:37.840]  Ну, мы говорим так.
[55:37.840 --> 55:39.840]  Вот, итак, начинаем.
[55:39.840 --> 55:41.840]  Значит, первое, что нам нужно сделать эксполс.
[55:41.840 --> 55:43.840]  Ладно, давайте договоримся.
[55:43.840 --> 55:48.840]  Если у нас будет черномагический эксполс, который будет перешаманивать вот путь таким образом,
[55:48.840 --> 55:51.840]  чтобы был путь от В до корня,
[55:51.840 --> 55:54.840]  то это все, что поменялось.
[55:54.840 --> 55:59.840]  Ну, то есть условно понятно, что для этого там какой-нибудь вот этот путь трогать не надо, например, да?
[55:59.840 --> 56:04.840]  Ну, вот, то есть все, что он будет делать, это на самом деле идти от вершины В до корня,
[56:04.840 --> 56:08.840]  и все сплошные ребра, которые он встретит, прям в честную объявлять,
[56:08.840 --> 56:11.840]  все не сплошные, наоборот, объявлять сплошными.
[56:11.840 --> 56:17.840]  Ну, еще, да, соответствующее, если там было другое сплошное ребро, то соответственно объявить его пункти.
[56:17.840 --> 56:21.840]  Но это все, что он будет делать, больше он никого трогать не будет.
[56:21.840 --> 56:28.840]  То есть если мы каким-то мистическим образом докажем, что эксполс у нас там за какой-то лог-квадрат или лог работает,
[56:28.840 --> 56:33.840]  то давайте внимательно посмотрим, что мы с этого можем состричь.
[56:33.840 --> 56:36.840]  Ну, начнем с простого. Так, корень.
[56:36.840 --> 56:38.840]  Переподвесить корень.
[56:38.840 --> 56:42.840]  А мы фактически храним все пути, правильно?
[56:42.840 --> 56:45.840]  И каждый путь храним в своем АВЛ-дереве.
[56:45.840 --> 56:48.840]  Вот. Значит, та переча.
[56:48.840 --> 56:50.840]  Если мы хотим делать эверт.
[56:50.840 --> 56:55.840]  Эверт делается без труда одним эксполсом, правда?
[56:55.840 --> 57:00.840]  Ну, эксполсом и реверсом дерева.
[57:00.840 --> 57:05.840]  Да.
[57:05.840 --> 57:09.840]  Ну, потому что идея такая, я хочу, чтобы В стал корнем, что мне надо?
[57:09.840 --> 57:14.840]  Так, ну давайте я запускаю эксполс. Теперь у меня есть путь, который начинается в В и заканчивается в корне.
[57:14.840 --> 57:18.840]  А мы храним, что может сломаться?
[57:18.840 --> 57:24.840]  Нет, пока у нас ничего нет. Я описал просто структуру и сказал, что у нас есть мистический эксполс,
[57:24.840 --> 57:27.840]  который мы пока будем потом эти небеса и факсы изобретать.
[57:27.840 --> 57:30.840]  А мы храним только путей? Сами деревья уже?
[57:30.840 --> 57:32.840]  Нет, храним. Почему храним?
[57:32.840 --> 57:38.840]  Ну, конечно же, в каждом дереве, то есть из каждого дерева идет вверх один пунктирное ребро.
[57:38.840 --> 57:41.840]  Ну, кроме корневого, конечно.
[57:41.840 --> 57:46.840]  И мы в каждом пути, в корне этого пути обязательно это ребро храним.
[57:46.840 --> 57:49.840]  Есть дикартач, построенный на элеровом пути?
[57:49.840 --> 57:50.840]  Нет.
[57:50.840 --> 57:56.840]  Все, мы забыли все про элеровые обходы, они нам тут не понадобятся.
[57:56.840 --> 58:05.840]  Да, то есть это то рассказали, что то версия, как бы она, может быть, более простая была, тут вот действительно можно.
[58:05.840 --> 58:11.840]  А, мы храним этот пунктирный ребро сверху просто как еще на леврогу пути?
[58:11.840 --> 58:12.840]  Чего еще раз?
[58:12.840 --> 58:16.840]  Для каждой вершины храним ее предка, но не обязательно корректная.
[58:16.840 --> 58:17.840]  Нет.
[58:17.840 --> 58:20.840]  Важно, чтобы для всех пунктов у нас были корректные предки.
[58:20.840 --> 58:23.840]  Ну, не совсем. Ну, тут по-разному можно делать.
[58:23.840 --> 58:29.840]  Вообще советую просто, что у вас есть дерево, в нем при желании, как бы понятно, в любом овл дереве
[58:29.840 --> 58:35.840]  вы можете хранить там этот двусвязанный список вершин в нужном порядке при желании.
[58:35.840 --> 58:36.840]  Ну, и, смотри, вот ситуация.
[58:36.840 --> 58:42.840]  Допустим, тебе там для каждой вершины нужно поддерживать, кто там следующий, кто там предыдущий, в чем в массиве они в этом.
[58:42.840 --> 58:47.840]  При очень большом желании ты можешь просто в каждой вершине хранить ссылку на следующего и предыдущего.
[58:47.840 --> 58:48.840]  Зачем нет?
[58:48.840 --> 58:49.840]  Это другой вопрос.
[58:49.840 --> 58:50.840]  Зачем нет?
[58:50.840 --> 58:53.840]  Я сказал, что сейчас нет, сейчас вообще незачем.
[58:53.840 --> 58:55.840]  Хорошо, тогда я не буду рассказывать.
[58:55.840 --> 58:58.840]  Ну, вот. Нет, ну, как бы при желании.
[58:58.840 --> 59:04.840]  Ну, при желании это как бы не сильно большая проблема, потому что, ну, под дерево всегда можно хранить там самые левые, самые правые.
[59:04.840 --> 59:08.840]  Поэтому, когда вы их межете, там, как-то иначе их никогда не проблема.
[59:08.840 --> 59:09.840]  Вот.
[59:13.840 --> 59:14.840]  Нет.
[59:14.840 --> 59:22.840]  Ну, потому что, нет, в ИСТЛ, к сожалению, там функционал, там товар, там структур сильно меньше, чем хотелось бы.
[59:22.840 --> 59:23.840]  Ну, вот.
[59:23.840 --> 59:31.840]  Ну, потому что они сделали, потому что для того, чтобы это делать, вам нужно хранить кучу операций, которые в половине случаев использования сетапа тупо не нужны.
[59:31.840 --> 59:34.840]  Поэтому они в этом смысле пошли по большей эффективности.
[59:34.840 --> 59:36.840]  То есть, как бы, и поэтому в таких бнот.
[59:36.840 --> 59:42.840]  Поэтому в таких случаях, то есть, как бы, если вам нужно что-то более продвинутое, либо лезьте в PBDS, либо пишите сами.
[59:42.840 --> 59:43.840]  Вот.
[59:43.840 --> 59:45.840]  Ну, потому что это просто менее такое.
[59:45.840 --> 59:46.840]  Вот.
[59:46.840 --> 59:47.840]  Сразу вопрос.
[59:47.840 --> 59:48.840]  А?
[59:48.840 --> 59:55.840]  Значит, вот как мы будем быстро понимать, является ли либро сплошным или...
[59:55.840 --> 59:58.840]  А нам это особо и не надо.
[59:58.840 --> 59:59.840]  А как это?
[59:59.840 --> 01:00:00.840]  Где нам нужно это понимать?
[01:00:00.840 --> 01:00:01.840]  Нет, а где нам нужно?
[01:00:01.840 --> 01:00:02.840]  Нам в реальности нужно следующее.
[01:00:02.840 --> 01:00:03.840]  Жила-была-вершина В.
[01:00:03.840 --> 01:00:04.840]  После обдумывания.
[01:00:04.840 --> 01:00:05.840]  Мы будем подниматься, но где будем?
[01:00:05.840 --> 01:00:06.840]  Какую классировку?
[01:00:06.840 --> 01:00:07.840]  А нам же?
[01:00:07.840 --> 01:00:09.840]  А как мы будем быстро проверять?
[01:00:09.840 --> 01:00:11.840]  Мы пока не делаем экстоз.
[01:00:11.840 --> 01:00:12.840]  Нет.
[01:00:12.840 --> 01:00:13.840]  Значит, не выделаем.
[01:00:13.840 --> 01:00:14.840]  А что мы сейчас...
[01:00:14.840 --> 01:00:15.840]  Нет, смотри, все гораздо проще.
[01:00:15.840 --> 01:00:16.840]  Нет.
[01:00:16.840 --> 01:00:17.840]  Погоди.
[01:00:17.840 --> 01:00:18.840]  Пока мы его не делаем.
[01:00:18.840 --> 01:00:19.840]  Нет.
[01:00:19.840 --> 01:00:20.840]  Пока мы сказали так.
[01:00:20.840 --> 01:00:23.840]  Поверим, что вот Expose, там с Кибес по факсу сказали, что
[01:00:23.840 --> 01:00:25.840]  Expose работает залог-квадрат или залог.
[01:00:25.840 --> 01:00:29.840]  Просто поверим, что так можно.
[01:00:29.840 --> 01:00:30.840]  Пока поверим.
[01:00:30.840 --> 01:00:32.840]  Чуть позже, конечно, разберемся.
[01:00:32.840 --> 01:00:33.840]  Пока вот хочется...
[01:00:33.840 --> 01:00:38.840]  На этом этапе хочется убедиться, что Expose действительно нам
[01:00:38.840 --> 01:00:39.840]  решит все вопросы.
[01:00:39.840 --> 01:00:40.840]  Хорошо.
[01:00:40.840 --> 01:00:41.840]  А что дальше?
[01:00:41.840 --> 01:00:42.840]  Ну вот.
[01:00:42.840 --> 01:00:43.840]  Потому что идея такая.
[01:00:43.840 --> 01:00:46.840]  Вот мы стали обсуждать, как сделать верт с помощью
[01:00:46.840 --> 01:00:47.840]  Expose.
[01:00:47.840 --> 01:00:49.840]  То есть как он сделали?
[01:00:49.840 --> 01:00:53.840]  Мы взяли вершину V тогда, объявили, значит, сделали Expose
[01:00:53.840 --> 01:00:55.840]  нам теперь на одном пути с корнем.
[01:00:55.840 --> 01:00:58.840]  Все, что нам теперь остается, это сделать реверс пути.
[01:00:58.840 --> 01:00:59.840]  Какого пути?
[01:00:59.840 --> 01:01:02.840]  Вот этого, который начинается в V и заканчивается вот в
[01:01:02.840 --> 01:01:03.840]  корне.
[01:01:03.840 --> 01:01:04.840]  Мы делаем реверс.
[01:01:04.840 --> 01:01:07.840]  И теперь получается, что V у нас теперь более высокая,
[01:01:07.840 --> 01:01:08.840]  а это более низкая.
[01:01:08.840 --> 01:01:10.840]  То есть по сути мы вот этот путь как бы развернули.
[01:01:10.840 --> 01:01:11.840]  Все.
[01:01:12.840 --> 01:01:13.840]  А вы еще не меняете?
[01:01:13.840 --> 01:01:14.840]  Да.
[01:01:14.840 --> 01:01:15.840]  У нас корневое дерево?
[01:01:15.840 --> 01:01:16.840]  Да.
[01:01:16.840 --> 01:01:17.840]  Тогда надо корень изменить на V.
[01:01:17.840 --> 01:01:20.840]  Да, а ну перезаписать, что корень теперь V, да.
[01:01:20.840 --> 01:01:21.840]  А куда перезаписать?
[01:01:21.840 --> 01:01:22.840]  А можно не перезаписывать.
[01:01:22.840 --> 01:01:24.840]  А мы где мы это вообще храним?
[01:01:24.840 --> 01:01:26.840]  Ну, будем структурой леса, которые будут структурой деревьев.
[01:01:26.840 --> 01:01:27.840]  Нет, на самом деле...
[01:01:27.840 --> 01:01:28.840]  Нет, где мы храним корень?
[01:01:28.840 --> 01:01:30.840]  Нет, на самом деле идея очень простая.
[01:01:30.840 --> 01:01:32.840]  У каждого этого дерева глобально корень...
[01:01:32.840 --> 01:01:37.840]  Корень, что такое корень, это конец пути, из которого
[01:01:37.840 --> 01:01:39.840]  верхний ведет пунктирного ребра.
[01:01:40.840 --> 01:01:42.840]  Или нету родителя.
[01:01:42.840 --> 01:01:45.840]  Ну, или что ж самое, нету родителя, да.
[01:01:45.840 --> 01:01:47.840]  То есть это...
[01:01:47.840 --> 01:01:50.840]  То есть где у него тут в качестве вот этого пунктирного родителя
[01:01:50.840 --> 01:01:52.840]  собственно лежит нул.
[01:01:52.840 --> 01:01:53.840]  Вот.
[01:01:53.840 --> 01:01:54.840]  У всех остальных не нул.
[01:01:54.840 --> 01:01:55.840]  Хорошо.
[01:01:55.840 --> 01:01:56.840]  Мы научились делать...
[01:01:56.840 --> 01:01:57.840]  Да.
[01:01:57.840 --> 01:01:58.840]  Вот.
[01:01:58.840 --> 01:01:59.840]  Ну, например.
[01:01:59.840 --> 01:02:02.840]  Ну, абсолютно аналогичным образом мы ищем всякие вот
[01:02:02.840 --> 01:02:04.840]  эти вот минкосты, а также присваивания.
[01:02:04.840 --> 01:02:05.840]  Вот.
[01:02:05.840 --> 01:02:08.840]  Всякие вот присваивания там минимумы на пути.
[01:02:08.840 --> 01:02:10.840]  Идея будет очень простая.
[01:02:10.840 --> 01:02:11.840]  Вот.
[01:02:11.840 --> 01:02:14.840]  Сначала мы объявляем U корнем.
[01:02:14.840 --> 01:02:16.840]  С помощью эвекта.
[01:02:16.840 --> 01:02:19.840]  После этого мы вызываем expose от V.
[01:02:19.840 --> 01:02:20.840]  Теперь у нас U.
[01:02:20.840 --> 01:02:23.840]  Теперь это тот самый путь от U до V.
[01:02:23.840 --> 01:02:27.840]  То есть он теперь у нас не из логарифа путей состоит.
[01:02:27.840 --> 01:02:28.840]  Из них мы должны...
[01:02:28.840 --> 01:02:30.840]  Да, мы их теперь собрали в один.
[01:02:30.840 --> 01:02:33.840]  Причем так, что еще один тут начинает...
[01:02:33.840 --> 01:02:36.840]  В один начинается тут, заканчивается в корне.
[01:02:37.840 --> 01:02:38.840]  Да.
[01:02:38.840 --> 01:02:39.840]  И теперь...
[01:02:39.840 --> 01:02:41.840]  То есть у нас этот единый путь, поэтому на этом пути
[01:02:41.840 --> 01:02:44.840]  мы теперь делаем абсолютно любую отложенную операцию.
[01:02:45.840 --> 01:02:47.840]  Вот именно я зашел.
[01:02:47.840 --> 01:02:48.840]  Там понятно.
[01:02:48.840 --> 01:02:51.840]  То есть минимум, там хэш какой-нибудь там под строки
[01:02:51.840 --> 01:02:52.840]  и так далее.
[01:02:52.840 --> 01:02:53.840]  Не надо.
[01:02:54.840 --> 01:02:56.840]  У этого есть название?
[01:02:56.840 --> 01:02:57.840]  LinkCut.
[01:02:57.840 --> 01:02:58.840]  Так и называется.
[01:02:58.840 --> 01:03:01.840]  То, что ты описал только что, называется LinkCut.
[01:03:01.840 --> 01:03:02.840]  Да.
[01:03:02.840 --> 01:03:03.840]  Все это...
[01:03:03.840 --> 01:03:06.840]  Ну, если будет такое, LinkCut 3.
[01:03:06.840 --> 01:03:08.840]  Или LinkingCutting 3 еще.
[01:03:08.840 --> 01:03:10.840]  До этого задача была...
[01:03:10.840 --> 01:03:11.840]  Или вот еще?
[01:03:11.840 --> 01:03:12.840]  Это был...
[01:03:12.840 --> 01:03:15.840]  Нет, это называется так структура данных, это называется.
[01:03:16.840 --> 01:03:17.840]  Вот.
[01:03:17.840 --> 01:03:19.840]  Вот у нас каждое дерево представляется как...
[01:03:19.840 --> 01:03:23.840]  Ну, то есть именно хранится в программе как просто набор путей.
[01:03:23.840 --> 01:03:24.840]  Да, именно.
[01:03:24.840 --> 01:03:25.840]  И как ты эти...
[01:03:25.840 --> 01:03:26.840]  Да.
[01:03:26.840 --> 01:03:28.840]  Как ты эти ребра перебрасываешь.
[01:03:28.840 --> 01:03:29.840]  Посмотри, никак не хранится.
[01:03:30.840 --> 01:03:32.840]  Он у тебя где-то лежит в памяти,
[01:03:32.840 --> 01:03:35.840]  а единственный доступ к этой структуре
[01:03:35.840 --> 01:03:38.840]  это у тебя каждая вершина хранит ссылку
[01:03:38.840 --> 01:03:43.840]  на свою соответствующую ноду в дереве.
[01:03:43.840 --> 01:03:44.840]  Понятно.
[01:03:44.840 --> 01:03:45.840]  В каком дереве?
[01:03:45.840 --> 01:03:46.840]  Ага.
[01:03:46.840 --> 01:03:48.840]  А там-то тоже в дереве просто есть предка или нет?
[01:03:48.840 --> 01:03:49.840]  Нет.
[01:03:49.840 --> 01:03:50.840]  Чего?
[01:03:50.840 --> 01:03:51.840]  Где?
[01:03:51.840 --> 01:03:52.840]  Какого предка?
[01:03:52.840 --> 01:03:53.840]  Нет.
[01:03:53.840 --> 01:03:54.840]  В каждом дереве мы храним...
[01:03:54.840 --> 01:03:56.840]  Каждому дереву, кроме корневого,
[01:03:56.840 --> 01:03:58.840]  то есть каждому пути, кроме корневого,
[01:03:58.840 --> 01:03:59.840]  соответствует пунктирное ребро.
[01:03:59.840 --> 01:04:00.840]  Нет.
[01:04:00.840 --> 01:04:01.840]  Именно что в каждом...
[01:04:01.840 --> 01:04:02.840]  Ну, в каждом...
[01:04:02.840 --> 01:04:03.840]  В каждом путь это дерево...
[01:04:03.840 --> 01:04:04.840]  Ну, я поняла ключи.
[01:04:04.840 --> 01:04:05.840]  И в нём нам придётся кондеплет.
[01:04:05.840 --> 01:04:07.840]  Родительская карта нам будет подниматься.
[01:04:07.840 --> 01:04:08.840]  Нет.
[01:04:08.840 --> 01:04:09.840]  Зачем?
[01:04:09.840 --> 01:04:10.840]  Там всё просто.
[01:04:10.840 --> 01:04:11.840]  Там...
[01:04:11.840 --> 01:04:12.840]  Ну, во-первых...
[01:04:12.840 --> 01:04:13.840]  Нет.
[01:04:13.840 --> 01:04:14.840]  Ну, как подниматься?
[01:04:14.840 --> 01:04:15.840]  Во-первых, в каждом дереве мы...
[01:04:15.840 --> 01:04:16.840]  В каждом пути мы легко можем хранить,
[01:04:16.840 --> 01:04:17.840]  с кого оно начинается,
[01:04:17.840 --> 01:04:18.840]  с кого оно...
[01:04:18.840 --> 01:04:19.840]  Где оно заканчивается.
[01:04:19.840 --> 01:04:20.840]  Вот.
[01:04:20.840 --> 01:04:21.840]  Это раз.
[01:04:21.840 --> 01:04:22.840]  А также там в каждом...
[01:04:22.840 --> 01:04:24.840]  Обращение сплит по вершине.
[01:04:24.840 --> 01:04:25.840]  Ну, сплит по вершине.
[01:04:25.840 --> 01:04:26.840]  Да.
[01:04:27.840 --> 01:04:28.840]  Но сплит по вершине мы, кажется,
[01:04:28.840 --> 01:04:30.840]  только что что-то подобное уже делали.
[01:04:30.840 --> 01:04:31.840]  Антон, а ты сказал?
[01:04:31.840 --> 01:04:32.840]  Что нужно релизно будет хранить.
[01:04:32.840 --> 01:04:33.840]  А, ну...
[01:04:33.840 --> 01:04:34.840]  А, в самом дереве?
[01:04:34.840 --> 01:04:35.840]  Ну да.
[01:04:35.840 --> 01:04:36.840]  Но это уже детали.
[01:04:36.840 --> 01:04:37.840]  Вот.
[01:04:37.840 --> 01:04:39.840]  То есть, я сейчас говорил,
[01:04:39.840 --> 01:04:40.840]  что как хранить?
[01:04:40.840 --> 01:04:41.840]  Это глобально,
[01:04:41.840 --> 01:04:42.840]  а не что хранится конкретно в дереве.
[01:04:42.840 --> 01:04:43.840]  Так-то...
[01:04:43.840 --> 01:04:44.840]  Так-то да.
[01:04:44.840 --> 01:04:45.840]  Надо.
[01:04:45.840 --> 01:04:46.840]  Увы.
[01:04:46.840 --> 01:04:47.840]  Хотя нет.
[01:04:47.840 --> 01:04:48.840]  Вот.
[01:04:48.840 --> 01:04:49.840]  Ну, родителей придётся хранить.
[01:04:49.840 --> 01:04:50.840]  Так или иначе.
[01:04:50.840 --> 01:04:51.840]  Да.
[01:04:51.840 --> 01:04:52.840]  Мы тут умеем делать линк, кат и...
[01:04:52.840 --> 01:04:53.840]  Вот.
[01:04:53.840 --> 01:04:54.840]  Сейчас доживём.
[01:04:54.840 --> 01:04:55.840]  Смотрите.
[01:04:55.840 --> 01:04:56.840]  Вот эти вот все безобразия,
[01:04:56.840 --> 01:04:58.840]  пока деревья сами не меняются,
[01:04:58.840 --> 01:04:59.840]  мы делаем без проблем.
[01:04:59.840 --> 01:05:00.840]  Вот.
[01:05:00.840 --> 01:05:02.840]  Ну, с У и В.
[01:05:02.840 --> 01:05:05.840]  Тоже можно тут развлечься, на самом деле.
[01:05:05.840 --> 01:05:06.840]  Там делаем эксполз.
[01:05:06.840 --> 01:05:07.840]  Ну, там делаем...
[01:05:07.840 --> 01:05:08.840]  Ну, точнее так.
[01:05:08.840 --> 01:05:09.840]  Тут мы делаем просто.
[01:05:09.840 --> 01:05:10.840]  Смотрите.
[01:05:10.840 --> 01:05:11.840]  Делаем У корнем.
[01:05:11.840 --> 01:05:12.840]  Делаем эксполз от В.
[01:05:12.840 --> 01:05:13.840]  И смотрим.
[01:05:13.840 --> 01:05:14.840]  Другой конец пути от В случайно не У оказался.
[01:05:14.840 --> 01:05:15.840]  Например.
[01:05:15.840 --> 01:05:16.840]  Можно сделать два эксполза
[01:05:16.840 --> 01:05:17.840]  и сохранить конец пути.
[01:05:17.840 --> 01:05:18.840]  Можно...
[01:05:18.840 --> 01:05:19.840]  Не-не-не.
[01:05:19.840 --> 01:05:20.840]  Ну, не совсем.
[01:05:20.840 --> 01:05:21.840]  Нет, смотрите.
[01:05:22.840 --> 01:05:23.840]  Если делать эксползату,
[01:05:23.840 --> 01:05:24.840]  а потом эксполз от В.
[01:05:24.840 --> 01:05:25.840]  Кстати, давайте разберём этот вопрос.
[01:05:25.840 --> 01:05:26.840]  Это очень интересно, на самом деле.
[01:05:26.840 --> 01:05:27.840]  Потому что, смотрите.
[01:05:27.840 --> 01:05:28.840]  Вот, допустим, мы вот, да,
[01:05:28.840 --> 01:05:29.840]  делаем вот этот запрос.
[01:05:29.840 --> 01:05:30.840]  Да?
[01:05:30.840 --> 01:05:31.840]  Делаем эксползату.
[01:05:31.840 --> 01:05:32.840]  Да?
[01:05:32.840 --> 01:05:33.840]  Вот у нас получается путь до корня.
[01:05:33.840 --> 01:05:34.840]  Делаем эксполз от В.
[01:05:34.840 --> 01:05:35.840]  Сохраняем, что лежит на другом грамме пути.
[01:05:35.840 --> 01:05:36.840]  Так.
[01:05:36.840 --> 01:05:37.840]  А.
[01:05:37.840 --> 01:05:38.840]  Ну, допустим.
[01:05:38.840 --> 01:05:39.840]  Вот.
[01:05:39.840 --> 01:05:40.840]  Теперь приходит вершина В.
[01:05:40.840 --> 01:05:41.840]  Вот.
[01:05:41.840 --> 01:05:42.840]  Вот.
[01:05:42.840 --> 01:05:43.840]  Вот.
[01:05:43.840 --> 01:05:44.840]  Теперь приходит вершина В.
[01:05:44.840 --> 01:05:45.840]  Ну, тогда у нас два варианта.
[01:05:45.840 --> 01:05:46.840]  Либо...
[01:05:46.840 --> 01:05:47.840]  Если...
[01:05:47.840 --> 01:05:48.840]  Либо...
[01:05:48.840 --> 01:05:49.840]  Либо...
[01:05:49.840 --> 01:05:50.840]  После этого эксполза от В, значит,
[01:05:50.840 --> 01:05:51.840]  на этом конце тоже будет Х.
[01:05:51.840 --> 01:05:52.840]  И тогда мы победили.
[01:05:52.840 --> 01:05:53.840]  И тогда мы легко тут вот на этот запрос
[01:05:53.840 --> 01:05:54.840]  ответили.
[01:05:54.840 --> 01:05:55.840]  Да?
[01:05:55.840 --> 01:05:56.840]  Да.
[01:05:56.840 --> 01:05:57.840]  Есть другой вариант.
[01:05:57.840 --> 01:05:58.840]  В находится в другом дереве.
[01:05:58.840 --> 01:05:59.840]  И тогда эксполз от неё
[01:05:59.840 --> 01:06:00.840]  её соединить с другим корнем.
[01:06:00.840 --> 01:06:01.840]  Упс.
[01:06:01.840 --> 01:06:02.840]  Какая проблема?
[01:06:02.840 --> 01:06:03.840]  Да.
[01:06:03.840 --> 01:06:04.840]  Какая проблема?
[01:06:04.840 --> 01:06:05.840]  Да.
[01:06:05.840 --> 01:06:06.840]  Ну.
[01:06:06.840 --> 01:06:07.840]  Ну.
[01:06:07.840 --> 01:06:08.840]  Ну.
[01:06:08.840 --> 01:06:09.840]  Ну.
[01:06:09.840 --> 01:06:10.840]  Ну.
[01:06:10.840 --> 01:06:11.840]  Ну.
[01:06:11.840 --> 01:06:12.840]  Ну.
[01:06:12.840 --> 01:06:13.840]  Да.
[01:06:13.840 --> 01:06:14.840]  Да.
[01:06:14.840 --> 01:06:15.840]  Да.
[01:06:15.840 --> 01:06:16.840]  Ну.
[01:06:16.840 --> 01:06:17.840]  Да.
[01:06:17.840 --> 01:06:18.840]  Так.
[01:06:18.840 --> 01:06:19.840]  Да.
[01:06:19.840 --> 01:06:20.840]  Да.
[01:06:20.840 --> 01:06:21.840]  Но почему я хочу это
[01:06:21.840 --> 01:06:22.840]  именно рассказать?
[01:06:22.840 --> 01:06:23.840]  Потому что тут
[01:06:23.840 --> 01:06:24.840]  очень интересно, просто что
[01:06:24.840 --> 01:06:25.840]  конкретно произойдёт.
[01:06:25.840 --> 01:06:26.840]  Потому что, смотрите.
[01:06:26.840 --> 01:06:27.840]  Потому что, если тут В
[01:06:27.840 --> 01:06:28.840]  находится в том же дереве,
[01:06:28.840 --> 01:06:29.840]  в том же дереве, то произойдёт
[01:06:29.840 --> 01:06:30.840]  что-то такое.
[01:06:30.840 --> 01:06:31.840]  То есть на самом деле,
[01:06:31.840 --> 01:06:32.840]  у нас теперь будет новый путь.
[01:06:32.840 --> 01:06:33.840]  То есть появится вот такой вот путь.
[01:06:33.840 --> 01:06:34.840]  Вот.
[01:06:34.840 --> 01:06:35.840]  И вот тут
[01:06:35.840 --> 01:06:36.840]  появится сплошное ребро.
[01:06:36.840 --> 01:06:37.840]  Да.
[01:06:37.840 --> 01:06:38.840]  Да.
[01:06:38.840 --> 01:06:39.840]  Да.
[01:06:39.840 --> 01:06:40.840]  Да.
[01:06:40.840 --> 01:06:46.320]  Просто тогда, смотрите, просто что приятно, дело в том, что вот эта вот вершинка,
[01:06:47.320 --> 01:06:50.040]  она у нас именуемая среди мирного населения ЛЦА,
[01:06:51.920 --> 01:06:56.320]  вот, теперь она может быть очень легко найдена. Обратите внимание.
[01:06:59.600 --> 01:07:05.760]  Не, ну не только это ЛЦА, ну как видите, это только он один из, то есть мы тут девятым списком мы тут себе это ЛЦА пишем.
[01:07:10.840 --> 01:07:14.840]  А то это структурно было за один линкат, а просто дерево решающее все.
[01:07:15.840 --> 01:07:16.840]  За логорифом, правда.
[01:07:17.840 --> 01:07:20.840]  А то он потом подсунул задачу, где ЛЦА надо за единицу искать удачи.
[01:07:21.840 --> 01:07:24.840]  А то, как вы догадываетесь, константа тут тоже не самая приятная.
[01:07:26.840 --> 01:07:29.840]  А смотрите, а идея очень простая.
[01:07:30.840 --> 01:07:34.840]  Просто так как тут появился одно сплошной путь, то есть путь от У до Х развалился на два.
[01:07:35.840 --> 01:07:39.840]  То есть получается, тогда теперь ЛЦА вы находите просто, берете эту вершину У,
[01:07:39.840 --> 01:07:43.840]  берете путь, проходите по пунктирному ребру, куда пришли тут то и ЛЦА.
[01:07:45.840 --> 01:07:46.840]  Вот.
[01:07:47.840 --> 01:07:49.840]  Так что вот, вот такой вот красота.
[01:07:51.840 --> 01:07:55.840]  Вот. Ну, ну или нет, на самом деле тут есть еще один.
[01:07:56.840 --> 01:08:01.840]  То есть это, конечно, тут сопорены картинку в предположении, что У и В не являются родителями друг друга.
[01:08:04.840 --> 01:08:08.840]  Вот. То есть на самом деле тут остальные случаи надо рассмотреть, точнее один из них.
[01:08:09.840 --> 01:08:15.840]  То есть если у нас тут вершина В на самом деле чисто случайно оказалась на пути от У до Х,
[01:08:16.840 --> 01:08:22.840]  то на самом деле, да, мы обнаруживаем, что сработает это ровно тем же самым способом.
[01:08:23.840 --> 01:08:26.840]  Тут кажется, что будет случай, когда у нас В ниже У.
[01:08:27.840 --> 01:08:32.840]  Да, вот, да, может быть, да, случай, когда В, наоборот, будет УВ.
[01:08:33.840 --> 01:08:34.840]  Мы ничего не найдем тогда.
[01:08:34.840 --> 01:08:39.840]  Нет, ну, смотрите, давайте посмотрим, да, тогда у нас конкретно этот метод не сработает,
[01:08:40.840 --> 01:08:46.840]  но когда мы тут вот распилим вот так, то мы просто можем обнаружить, что мы пойдем, делаем то же самое.
[01:08:47.840 --> 01:08:53.840]  Мы берем У, отправляемся, значит, берем путь, берем так чаще из него пунктирное ребро, обнаруживаем, что оно не ведет никуда.
[01:08:54.840 --> 01:08:58.840]  Мы замечаем, что это бывает ровно в одном единственном случае, когда У являлся предком В.
[01:08:59.840 --> 01:09:00.840]  Следовательно, он и есть ЛЦА.
[01:09:01.840 --> 01:09:03.840]  То есть, да, такую, вот такую мелочи рассмотреть придется.
[01:09:04.840 --> 01:09:06.840]  Вот, но это один маленький ИВчик в конце.
[01:09:07.840 --> 01:09:11.840]  Откуда мы умеем уходить по пунктирным ребрам?
[01:09:12.840 --> 01:09:16.840]  От каждой вершины ребра пунктирной, если у нее же нет ребра.
[01:09:17.840 --> 01:09:18.840]  Нет, ну, я, ну...
[01:09:19.840 --> 01:09:23.840]  Аксиф, это для каждой вершины по номеру храним ее предком.
[01:09:24.840 --> 01:09:30.840]  Единственное, что этот предок обязан быть корректным, если это что-то ребро пунктирное, и не обязан быть корректным во всех составах.
[01:09:30.840 --> 01:09:32.840]  Ну, не массив, а, точнее, да.
[01:09:33.840 --> 01:09:38.840]  Но, на самом деле, ну, массив сложно нам хранить именно массив, потому что массив, мы помним, деревья, дерево какое-то подвешенное.
[01:09:39.840 --> 01:09:45.840]  Поэтому обычно рекомендуется это подвешенное, обычно рекомендуется это пунктирное ребро хранить, скажем, в корне этого дерева.
[01:09:47.840 --> 01:09:51.840]  Можно в корне, можно в самой правой вершине, пожалуйста.
[01:09:52.840 --> 01:09:53.840]  Да.
[01:09:54.840 --> 01:09:55.840]  В корне аварельки.
[01:09:56.840 --> 01:09:57.840]  Например.
[01:09:57.840 --> 01:09:58.840]  Вот.
[01:09:59.840 --> 01:10:01.840]  То есть, например, можно в самом правом, там, пожалуйста, это...
[01:10:02.840 --> 01:10:04.840]  В явном виде массив?
[01:10:05.840 --> 01:10:06.840]  Как?
[01:10:07.840 --> 01:10:09.840]  Это же вершины, все пронумерованные, все номера индивидуальные.
[01:10:10.840 --> 01:10:11.840]  Ну и что, а потом ты эти пути померчал?
[01:10:12.840 --> 01:10:13.840]  Как ты их переписывать будешь, что ли?
[01:10:14.840 --> 01:10:16.840]  Когда я мержу по земле, я вообще ничего не перемешиваю.
[01:10:17.840 --> 01:10:20.840]  Тогда у нас принципиально разные понимания, словосочетания, храню массив.
[01:10:21.840 --> 01:10:31.840]  Храню массив из n элементов в каждой ячейке int, который говорит у вершины номер ноль, предок номер десять, у вершины номер один, предок номер пять.
[01:10:32.840 --> 01:10:36.840]  Ну, по-моему, это называется уже как конкретно хранишь AVL дерево на указателях или...
[01:10:37.840 --> 01:10:40.840]  Нет, предок в смысле не в AVL дереве, а в предок в смысле пунктирное ребро.
[01:10:41.840 --> 01:10:46.840]  Ну, конечно, храним что-то, ну, как бы, куда из нее ведет AVL дерево, но если так пунктирует...
[01:10:47.840 --> 01:10:48.840]  Храним что угодно.
[01:10:48.840 --> 01:10:50.840]  А, ну, какая, ну, я не знаю, ну, хранить его в...
[01:10:51.840 --> 01:10:53.840]  Ну, это называют то же самое, что хранить в самой правой вершине.
[01:10:54.840 --> 01:10:55.840]  AVL?
[01:10:55.840 --> 01:10:56.840]  Да.
[01:10:57.840 --> 01:10:58.840]  Ну, и так проще, чем AVL.
[01:10:59.840 --> 01:11:01.840]  Ну, на вкус и цвет вам мастера разная, это называется.
[01:11:02.840 --> 01:11:06.840]  Ну, на вкус и цвет, я не знаю, у слейтера и тарьяна, например, другое мнение по данному вопросу.
[01:11:07.840 --> 01:11:08.840]  Ну, вот...
[01:11:09.840 --> 01:11:10.840]  Ну, это другой вопрос.
[01:11:11.840 --> 01:11:14.840]  Ах, да-да-да-да. Ой, ну, они это тоже писали, есть такое подозрение.
[01:11:15.840 --> 01:11:16.840]  Они, конечно, не олимпиадники, это да.
[01:11:16.840 --> 01:11:26.840]  Ну, знаете, кто как, кто как, знаете, кто-то тут глядишь на полуфинал, доедет еще. Нет?
[01:11:27.840 --> 01:11:30.840]  Нет-нет-нет, кто-то в среде, я думаю, еще нет, все.
[01:11:31.840 --> 01:11:36.840]  Да, есть, ну, едет-едет, кто-то из вас даже на сборе в Петрозаводске подключался.
[01:11:37.840 --> 01:11:38.840]  Или...
[01:11:39.840 --> 01:11:40.840]  Да, можно пасть кто угодно.
[01:11:41.840 --> 01:11:42.840]  Ну, нет, не совсем.
[01:11:42.840 --> 01:11:45.840]  Нет, кто-когда, кто-когда, кто угодно, кого заявим мы.
[01:11:46.840 --> 01:11:49.840]  А мы все-таки в первую очередь полуфиналистов заявляли.
[01:11:50.840 --> 01:11:51.840]  Ну, это другой вопрос.
[01:11:52.840 --> 01:11:54.840]  Ну, не совсем так, видите, там это все-таки такое...
[01:11:55.840 --> 01:11:56.840]  Ну, да-да, вопрос только бесплатный.
[01:11:57.840 --> 01:11:58.840]  При желании, так, конечно, пожалуйста, да.
[01:11:59.840 --> 01:12:00.840]  Вот.
[01:12:01.840 --> 01:12:03.840]  Но на полуфинал вот уже кто, просто так уже вы не приедете.
[01:12:04.840 --> 01:12:05.840]  Вот, да.
[01:12:06.840 --> 01:12:07.840]  Так что, ну, соответственно, это вот ждем.
[01:12:07.840 --> 01:12:08.840]  Ну, соответственно, это вот ждем.
[01:12:09.840 --> 01:12:11.840]  Когда-нибудь мы надеемся весной там в какой-нибудь Марте или апреле.
[01:12:12.840 --> 01:12:15.840]  Наконец-то мы там съездим в Питер, там сходим в Маринку, как всегда, ну и так далее.
[01:12:16.840 --> 01:12:17.840]  Вот, Маринка.
[01:12:18.840 --> 01:12:19.840]  Господи.
[01:12:20.840 --> 01:12:21.840]  О, Господи.
[01:12:22.840 --> 01:12:23.840]  Господи.
[01:12:24.840 --> 01:12:27.840]  Вообще тихо на что-то не то, какое-то плохое отношение к Маринке.
[01:12:28.840 --> 01:12:29.840]  Вот, безобразие.
[01:12:30.840 --> 01:12:31.840]  Вот.
[01:12:32.840 --> 01:12:33.840]  Ну, ладно.
[01:12:33.840 --> 01:12:34.840]  Вот.
[01:12:35.840 --> 01:12:36.840]  Значит, смотрите.
[01:12:37.840 --> 01:12:39.840]  Значит, теперь, значит, поняли, что много чего можно делать с помощью эксполза.
[01:12:40.840 --> 01:12:41.840]  У вас небольшой вопрос.
[01:12:42.840 --> 01:12:44.840]  Когда у нас У и В оказываются в разных деревьях, что будет происходить?
[01:12:45.840 --> 01:12:48.840]  Когда вы лца ищете?
[01:12:49.840 --> 01:12:57.840]  Только вы просто обнаружите, что когда вы делали эксползату, эксползату В, корнями оказались разные вершины.
[01:12:58.840 --> 01:12:59.840]  Тогда у них...
[01:13:00.840 --> 01:13:03.840]  Просто на пути, который не существует, ты можешь сделать УВ.
[01:13:04.840 --> 01:13:09.840]  Ну, обычно в таком случае говорят, вы видите там, я не знаю, ссылку на вершину.
[01:13:10.840 --> 01:13:16.840]  Ну, обычно у Тарьяна в этом смысле говорят, верните ссылку на вершину или верните Ну, если ЛСАшки нету.
[01:13:17.840 --> 01:13:18.840]  Вон непонятная ситуация.
[01:13:19.840 --> 01:13:26.840]  Да. Ну, как бы очень, знаете, джавайная логика, джавайно-питоновая алголовая, она на самом деле иногда имеет место быть на самом деле.
[01:13:28.840 --> 01:13:32.840]  Нет, в джавае нет. Именно там имеется в виду именно ссылку вернуть.
[01:13:33.840 --> 01:13:35.840]  Да, в СИШной логике это называется верните указатель.
[01:13:36.840 --> 01:13:41.840]  Нет, ну тут по эти нет, просто есть разница, потому что в джаваях и питонах указателей нет в принципе.
[01:13:42.840 --> 01:13:49.840]  А вместо этого у нас есть как бы классы, к которым мы обращаемся по сути по ссылкам, и когда присваиваем переменные, мы переприсваиваем по сути ссылки.
[01:13:50.840 --> 01:13:51.840]  Вот.
[01:13:52.840 --> 01:13:56.840]  На самом деле, да, то есть помните, да, что если мы хотим скопировать, мы должны явно сказать, что да, мы именно копируем.
[01:13:57.840 --> 01:13:59.840]  А всякак бы, когда мы присваиваем, мы по умолчанию именно копируем.
[01:14:00.840 --> 01:14:04.840]  Вот поэтому там вот начинаются всякие детали наподобие тех, которые вот вы сегодня обсуждали.
[01:14:05.840 --> 01:14:13.840]  Что как бы это, да, что хотите предприсвоить что-нибудь, значит то, что там было раньше надо уничтожить, поэтому проследить, что вы не себя присвоили там, ну и так далее и тому подобное.
[01:14:14.840 --> 01:14:17.840]  Да. Ой, Господи.
[01:14:18.840 --> 01:14:19.840]  Как говорится, какая интриба.
[01:14:20.840 --> 01:14:23.840]  Ой, ну вот. Ну окей, окей, окей, да.
[01:14:24.840 --> 01:14:25.840]  Ладно.
[01:14:26.840 --> 01:14:28.840]  Экспоуз так экспоуз, да. Ну, пожалуй, действительно самое интересное.
[01:14:29.840 --> 01:14:31.840]  Так вот. Ну, экспоуз.
[01:14:32.840 --> 01:14:37.840]  Ну, на самом деле, мы уже практически описали, как конкретно будет работать экспоуз.
[01:14:38.840 --> 01:14:44.840]  Потому что первое, что мы делаем, это, собственно, отпилим все, что лежало ниже вершины В, если такое было.
[01:14:45.840 --> 01:14:47.840]  Ну, вот просят нас почему-то такое делать, ну давайте так делать.
[01:14:48.840 --> 01:14:50.840]  Далее у нас все очень просто.
[01:14:51.840 --> 01:14:54.840]  Значит, после этого, значит, жила была вершина В, она была началом какого-то пути.
[01:14:55.840 --> 01:14:56.840]  Этот путь куда-то пришел.
[01:14:57.840 --> 01:15:00.840]  Если это корень, то мы уже победили.
[01:15:01.840 --> 01:15:06.840]  Если нет, то из нее так считает какое-то пунктирное ребро.
[01:15:07.840 --> 01:15:09.840]  Ведущая нас в какой-то вершине У.
[01:15:09.840 --> 01:15:11.840]  Ну, можно на самом деле тут...
[01:15:12.840 --> 01:15:13.840]  Ну, теперь где такая?
[01:15:14.840 --> 01:15:17.840]  Теперь мы выполняем такую операцию, как splice.
[01:15:18.840 --> 01:15:25.840]  А именно, мы смотрим, есть ли у этой вершины У, значит, какой-то вот тут сплошной ребенок.
[01:15:26.840 --> 01:15:32.840]  Ну, вот если есть, то, соответственно, это безобразие мы отспличиваем, а пути смершиваем.
[01:15:33.840 --> 01:15:35.840]  И повторяем операцию.
[01:15:36.840 --> 01:15:37.840]  И повторяем операцию.
[01:15:38.840 --> 01:15:40.840]  То есть теперь у нас есть более длинный путь.
[01:15:41.840 --> 01:15:42.840]  Мы этот путь видим.
[01:15:43.840 --> 01:15:44.840]  Сейчас рыженьким нарисуем.
[01:15:45.840 --> 01:15:46.840]  Вот тут еще.
[01:15:47.840 --> 01:15:51.840]  Если он тут еще дальше идет какое-то пунктирное ребро, мы повторяем операцию.
[01:15:52.840 --> 01:15:53.840]  Вот.
[01:15:54.840 --> 01:15:55.840]  Ну и так далее, пока не дойдем до корня.
[01:15:56.840 --> 01:16:01.840]  Вот прям splice, то есть вот этот expose, вот это вот в тупую будет делать.
[01:16:01.840 --> 01:16:04.840]  Вот, splice мы будем называть вот эту вот операцию.
[01:16:07.840 --> 01:16:16.840]  Это когда мы, значит, когда мы путь подключаем к более высокому пути, возможно, отпиливая от более верхнего пути то, что было ниже.
[01:16:17.840 --> 01:16:18.840]  То есть то, что пошло не туда.
[01:16:23.840 --> 01:16:26.840]  Вот такая вот у нас идея.
[01:16:26.840 --> 01:16:29.840]  То есть соответственно, то есть вот под expose, поэтому я пишу splice.
[01:16:33.840 --> 01:16:34.840]  Тоже там от вершины v.
[01:16:35.840 --> 01:16:36.840]  Я бы сказал даже скорее от вершины u, наверное.
[01:16:38.840 --> 01:16:39.840]  Ну неважно.
[01:16:40.840 --> 01:16:42.840]  То есть фактически expose, ну вот.
[01:16:43.840 --> 01:16:45.840]  То есть теперь мы замечаем,
[01:16:45.840 --> 01:16:55.840]  что, ну как бы, если пока мы пишем вл, мы можем очень просто мыслить, что реальное время работы expose это количество splice, ну, умножить на логариф.
[01:16:56.840 --> 01:16:57.840]  Это если вот так в тупую оценивать.
[01:16:59.840 --> 01:17:03.840]  Поэтому для доказательства симптоидов с кило квадрата она будет естественно учетная.
[01:17:03.840 --> 01:17:13.840]  Вот мы тогда, ну вот мы тогда попробуем доказать, что у нас за там m, там скажем, или даже за q запросов было не сильно много splice.
[01:17:16.840 --> 01:17:17.840]  Ну понятно, не сильно много splice.
[01:17:17.840 --> 01:17:19.840]  Это понятно что-то типа n плюс q умножить на логариф.
[01:17:22.840 --> 01:17:23.840]  Может быть на какую-то константу там множество.
[01:17:26.840 --> 01:17:27.840]  А нет, ну link-cut, ладно.
[01:17:28.840 --> 01:17:37.840]  Ну мы тогда попробуем доказать, что у нас за там m, там скажем, или даже за q запросов было не сильно много splice.
[01:17:40.840 --> 01:17:45.840]  Ну понятно, не сильно много, это понятно что-то типа n плюс q умножить на логариф.
[01:17:47.840 --> 01:18:00.840]  Ну link-cut еще не обсудили, но здесь вот, ну да, link-cut стоит обсудить, конечно, в том плане, что когда мы тут подвешиваем, тут для нас очень важно вот у этой вершины вызвать splice.
[01:18:01.840 --> 01:18:04.840]  Ну давайте уже давим вот, что тут от этой вершины вызвать u и еще v подвесить.
[01:18:06.840 --> 01:18:08.840]  Ну вот, в чем желать подвесить так, чтобы как бы от v до u был путь.
[01:18:09.840 --> 01:18:11.840]  Ну cut, ну с cut-ом понятно, вызвали expose отпилили.
[01:18:14.840 --> 01:18:15.840]  Так что вот такой вот splice.
[01:18:17.840 --> 01:18:26.840]  Нет, на самом деле тут в этом месте начинается такая техника, что как бы вот переподвешивает вот этот путь.
[01:18:29.840 --> 01:18:42.840]  Ну вот скажем так, с нашей текущей точки зрения не зачем, а вот в будущем, потому что когда мы будем тут вставлять splice, нам может потребоваться более тонкий анализ, поэтому может быть нам это пригодится.
[01:18:47.840 --> 01:19:06.840]  Ну тут как бы, ну понимаете, там же просто как бы забегая вперед, как вы догадываетесь, нам придется вводить какой-то потенциал, причем более сложный даже, чем там был может быть в исходном сплее, и надо как-то вот анализировать так, чтобы вот эти операции не сильно его увеличивали, поэтому мы должны быть очень аккуратны.
