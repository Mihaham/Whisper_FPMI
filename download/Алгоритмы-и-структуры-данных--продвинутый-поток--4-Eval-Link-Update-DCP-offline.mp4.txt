[00:00.000 --> 00:11.120]  сегодня у нас конечно все будет попроще вот настолько попроще что возможно что скорее всего
[00:11.120 --> 00:19.840]  к концу занятия мы все-таки будем обсуждать фурия так что да но тем не менее кое-что веселенькое
[00:19.840 --> 00:29.040]  мы все-таки обсудим например фурия да в общем-то дать это действительно понятно до шоу да была
[00:29.040 --> 00:33.800]  бы конечно мечта нет а давайте-ка отсудим как построить миностов с помощью собственно софт хипа
[00:33.800 --> 00:40.320]  но нет мы этого мы этого пока делать не будем значит вместо этого закроем пару дырочек которые
[00:40.320 --> 00:46.120]  остались с прошлого раза там с прошлых разов ну во первых самая простая дырочка как построить
[00:46.120 --> 00:55.400]  линейное время миностов с помощью атомной кучи вот но на самом деле секрет лакчик там открывается
[00:55.400 --> 00:59.640]  просто да вот мы с вами вчера в прошлый раз пытались там подогнать симпатику пользуясь тем
[00:59.640 --> 01:06.000]  что там там все работа что там экстракт мин работает не за логарифом а за логарифом делить
[01:06.000 --> 01:13.840]  налогариф логарифов и у нас ничего не получилось так вот это нормально называется выжимается кайф там
[01:13.840 --> 01:20.040]  не за счет этого что про атоме потому что атомик хип круп даже не этим потому что помните да
[01:20.040 --> 01:28.160]  атомик хип да но напомним да в каких случаях по перемене матамики вообще кстати оптичках
[01:28.160 --> 01:37.840]  но тут проблема такая же мы не можем просто к абсолютно призвольным элементам взять
[01:37.840 --> 01:47.480]  применить атомик хип давайте вспоминаем о чем это вообще да это о целых б битных числах помните
[01:47.480 --> 01:53.680]  да то есть мы то есть скажи это не о даблах это не о призвольных там шаблон с компаратором нет то
[01:53.680 --> 01:57.440]  есть ну как вы понимаете да не может быть так чтобы то есть как бы в призвольном случае как
[01:57.440 --> 02:02.560]  вы помните не может быть вот этой вот кучи которая у нас там за от леденицы делает все кроме
[02:03.560 --> 02:08.080]  там достает экстракт мин за меньше чем логарифом потому что тогда у нас ассортировка работает
[02:08.080 --> 02:14.040]  быстрее чем за логан а такого невозможно да вот но если вы знаете что числа это какие-нибудь ваши
[02:14.040 --> 02:19.840]  б битные числа то есть числа с которыми работает ваш процессор то тогда атомик хип с ними
[02:19.840 --> 02:25.080]  справляется но сила атомик хипа даже не в том что там логан делит налог логан это даже скорее
[02:25.080 --> 02:34.200]  следствие потому что основная идея заключается в том что если у вас или анот то есть если у вас
[02:34.200 --> 02:53.040]  количество элементов хипе не превосходит лог квадрат n где n это что где 222 все перешел вот это
[02:53.040 --> 03:06.480]  два степени максимально число ну да где n да ну типа да где n влезает в эту вашу разрядность то
[03:06.480 --> 03:12.480]  есть там как минимум меньше там чем два степени б может быть в некотором смысле даже сильно там
[03:12.480 --> 03:17.720]  не будем сейчас вдаваться в эти подробности вот ой точно может это дереван md boss еще можно
[03:17.720 --> 03:26.400]  обсудить вот если у вас есть вот такое n и вас гарантируется но и у вас там гарантируется что в
[03:26.400 --> 03:31.040]  каждый момент времени элементов в куче не больше чем вот столько они могут быть произвольные
[03:31.040 --> 03:38.640]  битные числа но их вот не более чем вот столько то тогда выясняется что у нас тогда и даже экстракт
[03:38.640 --> 03:48.040]  мин начинает работать за от единицы то есть крутизна в этом на самом деле понимаете да ну
[03:48.040 --> 03:52.040]  как вы уже радуетесь помните там по структуре можно радоваться что лог квадрат тут может
[03:52.040 --> 03:57.800]  быть достаточно условен что нет хотя нет нет лог квадрата принципиально ладно не будем то есть
[03:57.800 --> 04:03.200]  можно подумать на тему того а нельзя ли то же самое доказать про лог куб там лог 4 лог 5 там
[04:03.200 --> 04:11.920]  и так далее но этого мы пожалуй пока на всякий случай делать не будем вот и так вот у нас есть
[04:11.920 --> 04:18.240]  такой лог квадрат вот таки все делается за от единицы как же нам тогда искать минус 100 с
[04:18.240 --> 04:27.280]  такими весами а оказывается предельно просто то есть это означает что мы какую-то фазу то есть
[04:27.280 --> 04:33.360]  помню в чем нас вообще заключался алгоритм фред монотериана он заключался в том что мы
[04:33.360 --> 04:43.120]  фиксировали какой-то можем зафиксировать какое-то число к и за время я плюс в лог к с помощью там
[04:43.120 --> 04:52.520]  какой-то кучи фиба начи мы мы создавали какие-то под компания под деревья будущего минимального
[04:53.520 --> 05:00.800]  причем так чтобы разверх каждого был как мы каждый содержал как минимум коверши вот мы
[05:00.800 --> 05:07.120]  вот ну не будем сейчас повторяться но мы вот мистическим образом это умели делать делали мы
[05:07.120 --> 05:13.320]  это вот с помощью там кучи фиба начи и пользовались мы тем что экстракт мин у нее работает за лог
[05:13.320 --> 05:24.560]  а все остальное включая декрески работает за единицу чем нам помогает атомик хип а вот чем
[05:24.560 --> 05:30.720]  она вот ну чем там чем нам поможет вот и более того там оказывалось что если там первую фазу
[05:30.720 --> 05:35.840]  мы как-нибудь делаем что кара в но допустим там двое там двое делить новое а лучше два в степени
[05:35.840 --> 05:41.480]  двое делить новое то тогда получается что это вот и дальше там подозревалось что мы заводим к
[05:41.920 --> 05:49.160]  2 к 3 где там каждое следующее равно два степени предыдущие и тогда получалось каждое следующее
[05:49.160 --> 05:58.440]  фаза е плюс там что-то типа вы и ты делить на два степени к и т на там нет просто на к и т а тут
[05:58.440 --> 06:05.960]  на там логарифом двоичной два степени к и т ну и получался вполне себе шлеп шлеп то есть
[06:06.840 --> 06:11.840]  фаза получается спокойно так вот то есть но столько каждый следующий фаза работает в зву
[06:11.840 --> 06:19.040]  плюс я теперь если у нас есть атомик хип то что у нас получается то когда есть у нас есть
[06:19.040 --> 06:28.640]  атомик хип то давайте просто скажем что к1 равно даже не лог квадрат а просто лог в тогда заметим
[06:28.640 --> 06:34.720]  что у нас все операции с такой ключей будут работать за единицу логичной и тогда получается
[06:34.720 --> 06:46.480]  получается первая фаза будет тупо работать за я плюс вы что да но это была
[06:46.480 --> 06:54.320]  куча фибоначи а вот с атомик сипом да то есть да заметим что вторую фазу мы
[06:54.320 --> 06:58.480]  конечно уже будем делать вполне себе кучу фиб можем уже даже делать кучу
[06:58.480 --> 07:03.760]  фибоначи можно даже оставить тот же атомик хип но не принципиально вот ну
[07:03.760 --> 07:08.240]  хотя там даже лучше не атомик хипа вот эту вот вторую версию то есть внутреннюю
[07:08.240 --> 07:13.400]  версию которая вот с этим вот так вот тогда но заметим что к2 можно вполне
[07:13.400 --> 07:22.960]  себе делать как два степени к1 то есть тупо в и тогда получается е плюс в
[07:22.960 --> 07:30.800]  делить на логарифм двоичный в умножен логарифм двоичный в шлёп шлёп радость то
[07:30.800 --> 07:34.400]  есть таким образом получается что просто за две итерации фредба нотариана
[07:34.400 --> 07:44.600]  линейная мы все но мы нашли минус то ура вот то есть вот такой вот пихалыч
[07:44.600 --> 07:50.240]  получился но даже не пихалки так что все что вам остается просто реализовать
[07:50.240 --> 07:56.240]  атомик хип вот тут конечно маленькая подляночка да что реализовать его мягко
[07:56.240 --> 08:04.480]  говоря не просто хотя нет хотя нет реализовать его очень просто учитывая что у нас давайте
[08:04.480 --> 08:10.560]  подумаем что вам для этого нужно вам нужно реализовать кучу ну помним да мы сводим вам
[08:10.560 --> 08:20.480]  уже то есть n нас не происходит 2 в ладно так и быть 64 так там 264 то есть вам нужно реализовать
[08:20.480 --> 08:27.080]  кучу которая содержит в себе не более чем 64 в квадрате элементов но мы помним как мы это
[08:27.080 --> 08:34.720]  делали мы это сводили к там с помощью там каких-то хитрых деревьев мы это сводили к какой-то тот
[08:34.720 --> 08:44.400]  же самый там тоже те же размер только степень не одна не два а 1 пятая так но с другой стороны да
[08:45.000 --> 08:52.960]  но вот то есть в нашем случае логан не превосходит 64 то есть там видимо меньше чем там два в шестой
[08:52.960 --> 09:00.040]  получается в степени 1 пятая ну то есть приводим вам остается только реализовать кучу которая
[09:00.040 --> 09:12.600]  работает за от единицы если в ней содержится не более чем 3 элемента может 4 я верю вас вот
[09:12.600 --> 09:22.560]  структура данных явно придумывается с прицелом на далекое будущее когда-нибудь когда-нибудь когда
[09:22.560 --> 09:28.800]  битность будет миллионной там вот это все тогда это алгоритм может начнет нормально работать вот
[09:28.800 --> 09:38.640]  может и не начнет вот да но тем не менее вот значит это первое что хотелось бы тут значит
[09:38.640 --> 09:47.120]  как какую дырочку добить если тут вопрос какие-то вот нет отлично тогда мы значит это мы убираем
[09:47.120 --> 09:59.920]  значит так ну к миношу но вот значит это мы еще вернемся это мы еще вернемся а пока значит закроем
[09:59.920 --> 10:07.240]  более сложную дырочку значит мы вернемся сейчас вектор смысле к дереву доминаторов
[10:07.240 --> 10:23.920]  казалось бы какую дырочку мы там не закрыли ну даже не алгоритм а структура данных да мечта у нас была
[10:23.920 --> 10:37.640]  следующим да то есть нам хотелось реализовать структуру эвол линк апдейт значит вот такая
[10:37.640 --> 10:47.920]  вот значит эвол линк апдейт что за структура данных но нам хотелось чего-то но нам там хотелось
[10:47.920 --> 10:57.560]  чего-то примерно следующего у нас есть подвешенные деревья вот есть у нас какие-то там подвешенные
[10:57.560 --> 11:06.960]  деревья и мы не будем сейчас совсем уж обобщать но хотелось пример следующий да у нас вот есть
[11:06.960 --> 11:13.120]  несколько деревьев но самое главное на каждой вершинке написано какая-то там чиселка
[11:13.120 --> 11:26.160]  вот вот там несколько таких деревьев изначально у нас вообще как всегда там
[11:26.160 --> 11:32.720]  n деревьев каждый стоит из одной вершинки и нам с этой структурой данных хочется делать
[11:32.720 --> 11:44.200]  следующие вещи во первых хочется делать эвол от в что такое эвол эвол означает что мы берем
[11:44.200 --> 11:51.360]  какую-нибудь первую попавшуюся вершину в хотим пробежаться от нее до корня и что-то вычислить
[11:51.360 --> 11:58.680]  то есть от этих чиселок но в общем случае там можно там там тариан в этом здесь начинает
[11:58.680 --> 12:03.880]  вводить там какая-то ассоциативная операция там причем операция которую вполне себе можно
[12:03.880 --> 12:11.280]  назвать быть вот вот да можно ее но мы мы еще но но мы сейчас этим заниматься не будем совсем то
[12:11.280 --> 12:20.400]  есть что вот то есть какая-то такая операция но вот в нашем случае это мы очень хотим делать мим
[12:20.400 --> 12:27.280]  вот ну там да там какие-то там высота какие-то там таймы на и там какие-то там из доминаторов
[12:27.280 --> 12:33.360]  там каких-то вот это вот все там было не будем сейчас повторять в общем суть вот суть такая что
[12:33.360 --> 12:50.880]  еще хочется делать еще хочется делать линк линк от в в это означает взять корень в и подвесить к
[12:50.880 --> 13:03.120]  нему корень в нет ладно врал нет или не наврал нет не наврал да давайте вот мы рассмотрим
[13:03.120 --> 13:09.320]  такой вот может это может это более простая версия хотя на самом деле нет вот рассмотрим
[13:09.320 --> 13:15.320]  такую вещь когда мы подвешиваем корень корлю это важно и остается кое-что еще
[13:15.320 --> 13:30.440]  и его величество апдейт от в и на этот раз x в нашем случае это операция сказать что вал от
[13:30.440 --> 13:50.680]  в мим равно x вот такую структуру данно хотелось бы реализовать вот так ну вот ну как оказалось
[13:50.680 --> 13:56.000]  вот как что если вот то есть в принципе мы помнишь мы научились реализовывать дерево доминаторов
[13:56.000 --> 14:08.680]  за линии за от чего от н линков плюс м эвалов помнится там даже толком апдейтов не было хотя
[14:08.680 --> 14:15.040]  нет апдейты может и были почему потому что когда но что возможно когда мы там к вершине подвешивали
[14:15.040 --> 14:20.240]  какие-то под деревья мы проем мы там ровно в этот момент узнавали там ее какой-то полудоминатор
[14:20.240 --> 14:25.560]  поэтому апдейт возможно и будет вот мы не будем сейчас вдаваться такие детали тем более чтобы
[14:25.560 --> 14:31.480]  все равно вот ровно в этом виде сейчас все и порешаем вот не будем сейчас это все переповторять
[14:31.480 --> 14:39.360]  вот почему мы сейчас не будем переповторять потому что тут вытекает такой вопрос вот
[14:39.360 --> 14:43.520]  за какой всем точку мы могли бы реализовать вот это вот
[14:43.520 --> 14:55.000]  вот давайте хотя бы со вот хотя бы слету
[14:55.000 --> 15:01.200]  ну где-то лагарифа но это называется какой лагарифа
[15:01.200 --> 15:14.240]  прям вот так да да действительно да действительно без ар служит противорятием от всех этих зелий
[15:14.240 --> 15:25.080]  действительно зачем что-то готовить это да да это проще да в самом деле ради чего мы в прошлый раз
[15:25.920 --> 15:27.880]  не страдали но допустим страдали
[15:27.880 --> 15:44.360]  так а керман у нас поди где пристес тогда а где еще собственно где еще да да мы ж
[15:44.360 --> 15:52.980]  пока еще это алгоритм этого построения дерево через софт и пусть уж не придумали вот вот а на
[15:52.980 --> 15:59.980]  самом деле мы страдали для того чтобы во первых доказать две мистические теоремы теоремы
[15:59.980 --> 16:10.380]  говорят следующее что в принципе заметим что основная идея первое заключается в том что на
[16:10.380 --> 16:18.700]  этом вот можно делать эвристику сжатия путей потому что мы не делаем никаких откатов ну
[16:18.700 --> 16:26.500]  с про откатом еще поговорим вот соответственно в данном случае как очевидно что там достаточно
[16:26.500 --> 16:32.980]  легко там делать сжатия путей поддерживать не например минимум хотя кстати да сразу скажем
[16:32.980 --> 16:39.000]  что бывает минимум можно тут делать плюс там допустим можно делать например вот сумму и тут
[16:39.000 --> 16:46.240]  делать плюс равно почему в общем-то и вот и можно достаточно легко делать там какой-нибудь сжатия
[16:46.240 --> 16:54.840]  путей и у нас была даже мистическая теорема про снм которая применима в принципе сюда она говорит
[16:54.840 --> 17:02.800]  что если там подключать подвешивать деревья абсолютно произвольным образом давайте напишем
[17:02.800 --> 17:15.780]  рема 1 у нас была то есть если в этом там то есть если в снм использовать только эвристику сжатия
[17:15.780 --> 17:38.120]  путей там только эвристику сжатия путей то но то тогда то время работы у нас какое
[17:46.560 --> 18:02.080]  там не превосходит у нас от чего если бы если все было так просто нет все благо все было сложнее у
[18:02.080 --> 18:13.120]  нас все было гораздо сложнее сейчас где же она у нас где же у нас это маги это ой сам ее не
[18:13.120 --> 18:25.620]  помню то что вот а вот она это от м умножить на максимум из единицы и логарифом n квадрат
[18:25.620 --> 18:43.000]  делит на м через на логарифом 2 н делить на м ну да да да неправильно да конечно
[18:43.000 --> 18:52.940]  ну хорошо хорошо ну конечно конечно ну понятно понятно все вы придираетесь
[18:52.940 --> 19:03.160]  да было доказано в круге чему да мы конечно доказывали логарифом но и просто логарифом но на
[19:03.160 --> 19:09.000]  самом деле вот этот результат чуть мощнее шедак где м равно n это про в чистом виде логарифом это
[19:09.000 --> 19:13.880]  да но если м начинает приближаться к н квадрату то эта штука начинает приближаться к единицу и
[19:13.880 --> 19:31.360]  это логично вот чего что он кто сказал у нас м запросов ну вот нету не надо звать
[19:31.360 --> 19:44.560]  вот но если надо и со мной вам по-хорошему тоже называть не надо это не садом все-таки вот но
[19:44.560 --> 19:49.140]  к эсене мы здесь отсылаемся потому что мы делаем буквально тоже что в сенеме как бы не заморачивать
[19:49.140 --> 19:58.440]  поэтому так вот ну конечно в нашем случае n равно m прошпакает логарифа но как бы у нас была и вторая
[19:58.440 --> 20:09.480]  терема которая стоила нам еще там потребовал там куча каких-то там лем там если используется
[20:09.480 --> 20:21.180]  эвристика сжатия нот используется эвристика сжатия путей стека сжатия путей
[20:21.180 --> 20:39.720]  вот и и для любого аж нот и а нет сейчас вот сейчас мы сейчас мы экзотически напишем и
[20:39.720 --> 20:48.640]  существуют такие константы с больше либо равно единицы и а больше единицы такие что для любого
[20:48.640 --> 21:06.280]  аж больше либо равно нуля верно что количество вершин ранга аж в не сжатом
[21:06.280 --> 21:11.160]  дереве
[21:11.160 --> 21:31.160]  не не превосходит cn делить на а в степени аж то время работы
[21:37.280 --> 21:39.080]  tm операции
[21:39.080 --> 21:50.760]  вот тут оно и возникает от м на том обратную функцию кермана от чего-то там чего-то
[21:50.760 --> 22:14.280]  было ну да ладно мы это называем альфа тм помните такую тему вот и помнить она была в наглую заявил
[22:14.280 --> 22:21.920]  нам тарьян статья про эволинк апдейт со ссылкой на статью пресса дым в котором
[22:21.920 --> 22:32.540]  такой те ремни не было там был немного вот то есть дайте там это такая типичная ситуация
[22:32.540 --> 22:40.920]  шоу ну как бы язык чуть подумать то это станет очевидно почему это станет очевидно потому что
[22:40.920 --> 22:47.880]  ну давайте помню даже давайте напомню что такой ранг вообще до высота поддельно да то есть
[22:47.880 --> 22:53.600]  или что то же самое расстояние до там максимальное расстояние до листа находящегося у меня в подделье
[22:53.600 --> 23:04.760]  вот там доказательства базировалась на том что что вершин ранга аж у нас не более чем
[23:04.760 --> 23:13.560]  н делить на 2 в степени аж ну там но мы это базировали на чем мы это мы там делали весовую
[23:13.560 --> 23:23.800]  ивристику и поэтому гарантирует что у вершины ранга x хотя бы 2 в степени x потоп вот вот но
[23:23.800 --> 23:29.360]  здесь но вот но здесь неожиданно почему-то оказывается очевидным что на самом деле можно
[23:29.360 --> 23:37.800]  вот так то есть заява такая что если мы будем по две если линки у нас будут организованы таким
[23:37.800 --> 23:45.760]  образом что будет верно вот это условие то тогда оценка керма но обратная функция керма на достигнута
[23:45.760 --> 23:53.840]  будет более того но я не буду сейчас конечно передаказывать все леммы ну собственно
[23:53.840 --> 24:02.960]  тем более все там передаказывать особо и не надо в общем-то вот заметим что то есть ключевое у
[24:02.960 --> 24:07.840]  нас в общем-то другое помните у нас там была мистическая лемма в которой мы доказывали штаб
[24:07.840 --> 24:14.200]  н и ты минус элитой не происходит 5 восьмых н где сначала мы поверили шла да пусть будет двое
[24:14.200 --> 24:21.800]  но потом доказали про 37 так вот там помните так вот помните там просто основная но основная там
[24:21.800 --> 24:26.700]  базировалась начал на том основной базировалась основное там базиров oxidato что у вас возникало
[24:26.700 --> 24:35.160]  там мистическая сумма помните там что то вот что то сумма какая-то аитель там что-то а и тжطые там
[24:35.160 --> 24:46.440]  делит на два в степени аить и жито tra 2Dr дает ну мы поняли вот мы
[24:46.440 --> 24:50.880]  это говорили что это не происходит там 2n какой-то у нас в ляда бесконечностей мы знаем что это в
[24:50.880 --> 24:55.280]  короче от единиц там можно конкретно подкручивать там какая конкретно
[24:55.280 --> 25:01.080]  константа но сути одна вот то есть в общем-то доказательства легко подкрутить
[25:01.080 --> 25:05.800]  в том плане что если как бы что поменяется если у нас треба если у нас нам
[25:05.800 --> 25:09.000]  придется пользоваться этим ну поменять столько тем что тут придется
[25:09.000 --> 25:16.320]  забабахивать с ну вот оно собственно там где-то а здесь надо просто не не двойку
[25:16.320 --> 25:19.880]  забабахивает вот эту константу а
[25:20.880 --> 25:27.480]  теперь вот давайте подумаем верно ли что вот их делить на в степени x это
[25:27.480 --> 25:42.840]  сходящийся ряд а почему чего а будут так так погодите а чего так чем вы сейчас
[25:42.840 --> 25:54.160]  на мотане занимаетесь римана ничего себе обычный интервал у вас уже были а это
[25:54.160 --> 26:00.080]  есть обычные точно вот это да ну да да да да да сейчас интернет а это другое это
[26:00.080 --> 26:05.120]  реклама была знаете там вообще нету знаете прикол там просто в общаге там
[26:05.120 --> 26:08.120]  была реклама там помимо всего порченда был интервал и бега интервью и все
[26:08.120 --> 26:12.320]  широчайшие возможности от действия нуля до функции дирекля не верьте слухом
[26:12.320 --> 26:16.480]  распространяемым старым римом о том что там существует функции которые не
[26:16.480 --> 26:21.040]  интегрируем и полибегу до сих пор ни одна из этих функций не построена в явном виде
[26:21.040 --> 26:25.280]  вот так как и такая реклама была очаровательной может а в четверке до
[26:25.280 --> 26:32.800]  сих пор висит можете там погулять посмотреть вот так ладно ну ничего но
[26:32.800 --> 26:37.160]  просто лиды поиди у вас стоп лидис вы сейчас интервью идите чем и пошел в
[26:37.160 --> 26:44.760]  прошлом семестре занимались чего а ну вот нет ну как бы нет это все будет то
[26:44.760 --> 26:48.080]  есть у вас там начнется там признаки тирихле принципе обеда там сходимости
[26:48.080 --> 26:53.120]  и так далее нет этого веселье у вас там этого да добра навалом но но в нашем
[26:53.120 --> 26:56.280]  случае в общем-то ладно это доказать тоже не сильно сложно потому что
[26:56.280 --> 27:00.040]  доказательства будет примерно такой же потому что давайте эту сумму распишем
[27:00.040 --> 27:10.920]  так распишем 1 1 Więкла. А 1 делить на там а в квадрате а тут даже не 1 получается
[27:10.920 --> 27:16.560]  так вот так 1 делить на квадрате 1 делить на вкубе там один делить на в4 и так
[27:16.560 --> 27:21.960]  далееila 1 велик на в квадрате один делить на вкубе один делить на в 4 и
[27:21.960 --> 27:26.520]  и так далее. Тут 1 делить на f кубе, 1 делить на f четвертой и так далее, ну и так далее.
[27:26.520 --> 27:36.920]  Вот. Вот. Все. Мы это доказываем в сходимости этого ряда пока. Вот. Ну раскладываем вот в
[27:36.920 --> 27:43.840]  такие слагаемые. Ну тут как раз вот тут один раз один делить на а, тут два раза там один делить на
[27:43.840 --> 27:49.120]  а в квадрате, ну и так далее. Теперь заметим, что теперь мы знаем, что если а больше единицы,
[27:49.120 --> 27:56.840]  то эта штука сходится. Правда? Теперь фишка. Мы знаем, что она сходится. Она сходится
[27:56.840 --> 28:04.080]  к какой-то мистической величине b. Допустим, да? Но теперь заметим, что тогда вот эта штука
[28:04.080 --> 28:10.200]  сходится к b делить на а. Это b делить на а в квадрат, это b делить на а в кубе, ну и так далее.
[28:10.200 --> 28:17.040]  В общем, и того тогда получаем, что эта сумма не превосходит b в квадрате. Ну даже уже неважно,
[28:17.040 --> 28:28.120]  чего главное сходится. То есть оставляем вот. Чего? Вопрос? Так что вот такая вот красота получается.
[28:28.120 --> 28:33.240]  Ну вот, то есть и действительно получается, что на самом деле теорема есть, но как бы да. Правда?
[28:33.240 --> 28:38.200]  Как говорится, тальян считает такие доработки очевидными. Ну собственно, надо представить,
[28:38.200 --> 28:47.320]  действительно, ничего сильно сложного тут нет. Вот. Но остается только маленький вопрос. Да,
[28:47.320 --> 28:55.360]  как же нам этого добиться? Вот давайте подумаем. Вот дело в том, что в эсенеме понятно, как можно
[28:55.360 --> 29:01.080]  этого добиться. Потому что когда в эсенеме от нас просят объединить два дерева, там то,
[29:01.080 --> 29:09.760]  какое дерево к какому подвешивать, оставляют на наше усмотрение. А здесь этого нет. Здесь нам
[29:09.760 --> 29:20.080]  прям линк задает, какое дерево на какое вешать. Вот возникает вопрос, что можно было бы сделать?
[29:20.080 --> 29:38.680]  Менять местами. Какие значения местами менять? Да, ну в идеале хотелось бы. Осталось только,
[29:38.680 --> 29:46.600]  чтобы, то есть нет, это в принципе, конечно, все можно. Осталось только, ну вот. Осталось только
[29:46.600 --> 29:51.240]  действительно как-то аккуратно делать. Вот давайте просто для разминки хотя бы поймем вот простую
[29:51.240 --> 29:58.920]  вещь. Вот допустим у нас операция сложения, вот хотя бы. Как нам все-таки подвешивать получше?
[29:58.920 --> 30:10.760]  Нет, так же как в эсэдем, ну пока нельзя. То есть нам принципиально, потому что когда вы
[30:10.760 --> 30:16.680]  подвешиваете w к v, то d, то как бы результаты валов для всех вершин под дерево w должны
[30:16.680 --> 30:26.760]  увеличиться на вершину v, на значение вершины v. И при этом, что важно, для вершины, для вот этих
[30:26.760 --> 30:35.880]  всех вершин ничего поменяться не должно. Да, ну вот действительно есть такой действительно красивый
[30:35.880 --> 30:42.680]  чит. Да, что если, ну вообще так, предположим выяснилось, что там размер под дерево w больше,
[30:42.680 --> 30:52.020]  чем размер под дерево v, и хочется конечно подвешивать w к v, а наоборот. Вот, ну тогда
[30:52.020 --> 30:59.600]  идея такая, что если тут допустим было написано какое-то число, если у w тут написано какое-то
[30:59.600 --> 31:08.800]  число aw, а тут написано какое-то число av, то действительно возникает тогда идея такая, что
[31:08.800 --> 31:18.480]  подвесить надо конечно v к w. Ну вот, но при этом немножко пошаманить с чиселками. Каким образом
[31:18.480 --> 31:29.760]  пошаманить? Да очень просто. Надо здесь написать там что-то типа av плюс aw, а здесь написать что?
[31:29.760 --> 31:47.120]  Нет, не совсем так, погодите, погодите. Если я напишу здесь av минус aw, а просто
[31:47.120 --> 31:55.520]  minus aw. Да, вот теперь хорошо. Ну по модулю того, что как бы у нас получается тут тонкая разница,
[31:55.520 --> 32:02.080]  что есть, что у каждой вершины есть реальный, то есть как бы есть оригинальный корень,
[32:02.080 --> 32:06.560]  который должен быть, есть какой-то реальный корень, который мы сюда храним, даже наоборот,
[32:06.560 --> 32:11.360]  нет, он называется нереальный, он наоборот называется виртуальный. Ну, тонкая разница,
[32:11.360 --> 32:15.500]  смотрите, то есть как бы есть понятие, то есть у Тарьяна, Тарьяна в этом месте говорит, что есть
[32:15.500 --> 32:20.380]  вот такое нормальное дерево, так сказать, реальное, а есть виртуальное дерево, то есть это,
[32:20.380 --> 32:25.660]  которое там вот в результате всяких вот этих вот сжатий путей тут образовалось, а в нашем случае
[32:25.660 --> 32:32.300]  все еще хуже, потому что у нас окрасы еще и корень мог подшаманиться. Вот, но конкретно в операции
[32:32.300 --> 32:39.940]  плюс нас это особо не волнует, вот, потому что здесь действительно для каждой, потому что как бы
[32:39.940 --> 32:46.500]  для каждой вершины мы можем найти корень и для каждой вершины мы гарантируем, что действительно
[32:46.500 --> 32:54.260]  сумма равна чему надо. Ну и конечно, ну вот, ну вот, ну и конечно апдейт в корне дерева делается,
[32:54.260 --> 32:58.500]  ну понятно, элементарно, надо пойти в виртуальный корень и к нему соответственно прибавить
[32:58.500 --> 33:04.620]  чиселки и получится хорошо. Вот, то есть вот тут такой кайф, в оригинальной статье Тарьяна в этом
[33:04.620 --> 33:10.500]  месте говорим, что пусть это операция ассоциативная, у нее есть какой-то там правый обратный или левый
[33:10.500 --> 33:16.020]  обратный, ну и так далее, в общем, или что-то в этом роде. Вот, ладно, нам сейчас это не особо
[33:16.020 --> 33:23.100]  интересно, потому что самое интересное для нас, конечно же, это что? Это научиться работать с минимумом.
[33:23.100 --> 33:31.980]  Апдейт, ну апдейт делается, тут ключевое, что v обязан быть корнем,
[33:31.980 --> 33:39.100]  поэтому делается он просто, то есть как бы что значит vx? В точке зрения плюс равно x это означает,
[33:39.100 --> 33:44.060]  что ко всем эвалам теоретически нужно уметь прибавлять просто один и тот же x, то есть вы
[33:44.060 --> 33:49.020]  отправляетесь в корень дерева, ну он правда будет не v, а там какой-то реальный корень и к его значению
[33:49.020 --> 33:59.980]  тупо прибавляйте x, как бы никаких проблем нет. Вот, да, но здесь вот, да, но это для нас не самое
[33:59.980 --> 34:06.340]  интересное, то есть точка зрения дерева доминаторов нам жутко интересно, чтобы эта штука помирилась
[34:06.340 --> 34:14.940]  с минимумом. Вот, да, ну здесь, кстати, давайте я даже вот эту сумси, ну вот, то есть это я сейчас
[34:15.340 --> 34:20.980]  сотру, давайте это я сотру, так все давайте забыли о сумме, то есть вот эта идея осталась,
[34:20.980 --> 34:27.980]  а вот сумма нам сейчас не интересна, сумма слишком легко побеждается, была для примеров. Да, но здесь
[34:27.980 --> 34:33.420]  конечно важно подчеркнуть, что в апдейте мы делаем именно мин равно, то есть не заменить значение
[34:33.420 --> 34:39.900]  корня на произвольное, а именно его уменьшить, декриски сделать по сути, но в данном случае скорее
[34:39.900 --> 34:56.220]  декрис root получается, но соответственно, вот, но что же получается, значит как же этот минимум сделать,
[34:56.220 --> 35:06.060]  но здесь возникает маленькая подлярчик, вот, значит, да, значит, смотрите внимательно,
[35:06.060 --> 35:12.820]  сейчас будет немножко, да, сейчас будет немножко магии, вот, потому что действительно мы тут не
[35:12.820 --> 35:18.340]  случайно вводим теорию, неожиданно начинаем усложнять теорию, потому что сразу скажу,
[35:18.340 --> 35:25.400]  просто так гарантировать, что у нас, просто так гарантировать, что у нас все будет хорошо,
[35:25.400 --> 35:32.300]  нельзя, да, а что такое хорошо, ну, мы будем говорить, давайте я сейчас веду маленькое,
[35:32.300 --> 35:44.940]  значит, возникает такое маленькое техническое определение, значит, определение, значит,
[35:44.940 --> 35:53.900]  ребро, допустим, в, у, которое равно, там, ради, там, parent от в,
[35:53.900 --> 36:14.420]  будем называть его хорошие, да, ой, извините, так хочется побаловаться, хорошие или не баловаться,
[36:14.420 --> 36:28.500]  ну вот, ну ладно, значит, если сз от у больше либо равно 2сз от в,
[36:28.500 --> 36:50.580]  нет, ладно, не буду, ладно, не буду баловаться, вот. Чего? Нет, нет, нет, нет, нет, это, ну, опять
[36:50.580 --> 36:56.020]  это у нас легкое ребро, а в-третьих, в данном случае нет понятия легкости тяжелости такого,
[36:56.020 --> 37:03.660]  почему, потому что, на самом деле, у нас, там, победа, собственно, в основном эсэнемия заключалась в том,
[37:03.660 --> 37:12.660]  что у нас все ребра делались лёгкими целенаправленно, все ребра были хорошие, поэтому победа, вот,
[37:12.660 --> 37:27.540]  здесь нам придётся сразу, скажу, ослабить опенчение, значит, определение такое, ребро,
[37:27.540 --> 37:50.220]  в и у, которое равно parent от в, значит, мы его будем называть среденькое, среденькое, если сз от parent
[37:50.220 --> 38:03.420]  от у больше либо равен, чем 2сз от в, да, подразумевается, что этот parent ещё и существует,
[38:03.420 --> 38:32.580]  вот, да, значит, сз имеется в виду в не сжатом дереве, вот, сейчас это вот, сейчас, да, там написано
[38:32.580 --> 38:49.140]  2, да, это важно, давайте, тут я, давайте, вот, то есть, как видите, в чём заключается средненькость, да,
[38:49.140 --> 38:53.860]  то есть, как бы, вот, то есть, как бы, жёстко это ребро хорошее всё, идёшь к родителю, родитель два
[38:53.860 --> 39:01.420]  раза круче тебя, вот, всё, тогда это ребро хорошее, оно прям вот улучшает жизнь в два раза, а вот ребро
[39:01.420 --> 39:07.620]  средненько, если, ну, как бы, обращение к родителю ещё так не помогает, но если дойти до дедушки, то точно
[39:07.620 --> 39:15.620]  всё хорошо, так что ребро средненькое, ну, я не знаю, честно говоря, я не знаю, вот как бы вы перевели
[39:15.620 --> 39:24.420]  введённый Тарьяном термин медиокр, вот как-то переводить, вот, вот тут, тут реально гуд было,
[39:24.420 --> 39:34.900]  ну, вот, да, вот, нет, ну, давайте, смотри, потому что по таким синоним, вот, пожалуйста, средненько,
[39:34.900 --> 39:40.580]  ну, средненько и получается такое, да, хотя, наверное, можно было перевести неплохое,
[39:40.580 --> 39:53.580]  заурядное, не, ну, заурядное, а там в серию говорю, заурядное, что, ну, а так как это, да, как говорили,
[39:53.580 --> 40:00.700]  все натуральные, да, да, терема, да, терема, да, против это терема, все натуральные числа интересные,
[40:00.700 --> 40:06.380]  надо доказать, что пусть это не так, тогда найдётся минимальное, там, неинтересное число, ух ты,
[40:06.380 --> 40:18.020]  интересно, чем же оно такое неинтересное, это классика, да, так вот, так вот, утверждается,
[40:18.020 --> 40:31.300]  значит, так вот, терема, значит, сейчас будет, может быть, с известными оговорками, но, тем не менее,
[40:31.300 --> 40:52.820]  если, я так сформулирую, если все ребра, допустим, средненькие, ну, ладно, давайте, я говорю,
[40:52.820 --> 41:20.060]  или ведут в корень, в корни, точнее, то тогда, я вот, ну, вот, то деревья, я так напишу, удовлетворяют,
[41:23.820 --> 41:40.420]  условия, теремы два, с, там, с равно, а равно, корень из двух, вот такая неожиданная заява,
[41:40.420 --> 41:56.340]  вот, да, я, по идее, да, если совсем патальяно, то я должен бы сказать,
[41:56.340 --> 42:05.180]  что дерево называется сбалансированным, если вот это вот, вот, ну, вот такая интересная заява,
[42:05.180 --> 42:27.180]  спрашивается, а точно, верите ли вы, так, нет, ну, давайте, нет, просто зачем введено
[42:27.180 --> 42:35.700]  с, корень из двух, а введено, ну, вот зачем, мы хотим показать, что, там, при вот таком, при вот
[42:35.700 --> 42:41.300]  таких условиях, мы хотим показать, что количество вершин ранга h у нас не более чем, там, получается,
[42:41.300 --> 42:49.020]  в нашем случае, корень из двух n поделить на корень из двух в степени h, ну, если h равно нулю,
[42:49.020 --> 42:56.300]  то все очевидно, а если h равно один, то тоже все очевидно, потому что шлеп-шлеп n радость,
[42:56.300 --> 43:03.100]  да, вот, зачем, собственно, этот корень из двух и взялся, так, что, может быть, чисто для базы
[43:03.100 --> 43:12.380]  индукции, так, давайте, разбираться с переходом, так, вот, как, там, доказать, действительно,
[43:12.380 --> 43:17.020]  то есть, вот эту штуку, если у нас h больше либо равен двух, в предположении, что для
[43:17.020 --> 43:19.020]  меньших рангов все доказано.
[43:19.020 --> 43:44.540]  Ну, да, хочется, конечно, осталось только выяснить, а из каких соображений мы вообще можем сказать,
[43:44.540 --> 43:53.660]  что у нас вершин ранга h не более чем хоть сколько-нибудь, а чем оно поможет? Вот,
[43:53.660 --> 44:05.500]  как, там, в данном случае, средненькость поможет. Ну, да, ну, хотелось бы, но они говорят что-то
[44:05.500 --> 44:11.940]  про СССР, поэтому в идеале, конечно, наверное, хотелось бы, наверное, что, то есть, это,
[44:11.940 --> 44:25.540]  видимо, будет следовать из там леммы, что там какой-нибудь леммы, что если, ну, такое, что СЗ
[44:25.540 --> 44:35.300]  от вершины В должно быть больше либо равно, чем что-то там связанное с рангом, а что связанное с
[44:35.300 --> 44:51.140]  рангом? Ну, наверное, ну, давайте попробуем, что корень из двух в степени h минус один. Ну, в принципе,
[44:51.140 --> 45:03.020]  ну, заметим, что если я сейчас, да, где я вот напишу, что h равно ранг от В. Ну, заметим,
[45:03.020 --> 45:07.980]  по большому счету, что, в общем-то, из этой леммы, если нам такую лемму удастся доказать, вот эта
[45:07.980 --> 45:15.620]  сиаремма доказывается автоматически, правда? Видно, почему? То есть, видно, почему тут я вообще
[45:15.620 --> 45:27.220]  минус один какой-то написал, да? Вот, да, тут действительно так. Вот, ну, давайте разбираться.
[45:27.220 --> 45:36.500]  Вот. Ну, действительно, как это доказать? Ну, видим, база индукции там для h равно 0 и 1, очевидно,
[45:36.500 --> 45:45.940]  да, минус 1 подогнанными для того, чтобы для h равно 1 работал. Так, ну, теперь давайте смотреть.
[45:45.940 --> 45:52.580]  Ну, если у вершины ранг больше либо равен 2, то есть, вот жила была вершина В, у нее ранг h,
[45:52.580 --> 46:02.780]  но тогда у этой вершины есть внучек. В общем, не просто там внучков у него может быть много,
[46:02.780 --> 46:12.620]  но у нее есть явно внучек ранга h-2. По предположению индукции, у нее тут СЗ больше либо равен,
[46:12.620 --> 46:24.900]  чем корень из двух в степени h-2-1. Логично, да? Просто я вот то же самое условие написал. Так,
[46:24.900 --> 46:34.420]  переходим сюда. И что же здесь получается? Тогда вот, то есть, мы знаем, что все эти ребра,
[46:34.420 --> 46:39.780]  все такие ребра, которые не ведут прямо в корень, являются средненькими. Значит,
[46:39.780 --> 46:52.780]  переходим к дедушке и получаем, что здесь СЗ от В больше либо равно, чем получается 2 на корень
[46:52.780 --> 47:04.460]  из двух в степени h-2-1. Ну, так как у нас корень из двух в квадрате это 2, то получается шлеп-шлеп.
[47:04.460 --> 47:16.980]  Равно корень из двух в степени h-1. Доказательство окончено. То есть, вот такое вот неожиданное
[47:16.980 --> 47:24.500]  послабление. Ну, в принципе, отсюда можно вывести, что мы теоретически могли бы ослаблять и до
[47:24.500 --> 47:34.340]  про дедушек и так далее. Но нам сейчас достаточно ослабить только, собственно, до дедушки. То есть,
[47:34.340 --> 47:39.620]  таким образом, задача в минимуме сводится к следующему. Надо так организовать операции
[47:39.620 --> 47:48.980]  и слияния, чтобы у нас все деревья, которые получаются, состояли исключительно из средненьких
[47:48.980 --> 47:54.020]  ребер. То есть, если они будут состоять из средних ребер, то мы автоматически победили.
[47:54.020 --> 48:09.060]  Так, есть ли на этот момент какие-то вопросы? Так, все понятно? Вот, да, в телефоне тоже самое написано.
[48:09.060 --> 48:20.540]  Значит, тут теперь начинается самое интересное. Так, сейчас я вот это все... Так, ладно, это все
[48:20.540 --> 48:33.380]  можно убирать? Так, вот это все можно убирать или что-то из этого желательно оставить? Вот. Ну,
[48:33.380 --> 48:38.340]  давайте так. Ладно, мысленно, только главное, что сейчас надо запомнить, это определение средненького
[48:38.340 --> 48:48.020]  ребра. Вот, как бы запомнили, что как бы мы победим. Ну, вот что, как бы средненькость это победа.
[48:48.020 --> 48:51.020]  То есть, нам да.
[49:08.340 --> 49:19.740]  Так, а у нас теперь вот что. Значит, сейчас тут будет действительно немножко магии. Так, значит, мы
[49:19.740 --> 49:24.660]  делаем минимум. Так, главное сейчас не перепутать, потому что, к сожалению, вредный тарьян в оригинале
[49:24.660 --> 49:43.180]  делает максимум, сразу предупреждаю. Так, значит, смотрите. Значит, идея такая. Значит, сейчас, значит,
[49:43.180 --> 49:53.420]  начнем сразу со страшного слова. Значит, каждое дерево я буду хранить не совсем в виде дерева.
[49:53.420 --> 50:03.300]  Я и сделаю неожиданную штуку. Смотрите. Значит, только данных будет. Ну, понятно, что изначально у меня там
[50:03.300 --> 50:08.540]  все. Ну, понятно, что изначально у меня там, понятно, все деревья состоят из одной вершины, да. Ну, из одной
[50:08.540 --> 50:18.140]  вершины дерево там состоит, понятно как. А теперь смотрите. Каждое дерево. Ой, не тот маркер. Значит,
[50:18.140 --> 50:27.020]  каждое дерево будет у меня состоять из цепочки деревьев. Смотрите внимательно. То есть у меня будет вот такая
[50:27.020 --> 50:40.940]  цепочка деревьев с корнями V1, там допустим V2. Ну, V1 равно V. Это будет основной корень. Но внутри будут
[50:40.940 --> 50:54.860]  вспомогательные корни. Вот. То есть они будут соединены вот в такую цепочку. Ну, там, там список
[50:54.860 --> 51:00.780]  какой-нибудь там, что угодно, неважно. Вот, смотрите. То есть все, то есть идея будет такая. Смотрите
[51:00.780 --> 51:05.380]  внимательно. Все вершины будут находиться, ну, которые должны находиться в под деревья, будут
[51:05.380 --> 51:12.020]  находиться вот в этих вот деревьях. Ну, не обязательно пяти, но вот сколько их тут есть. Ну, давайте я тут
[51:12.020 --> 51:20.220]  поставлю многоточие VK, чтобы не было. Значит, тут вот висеть какие-то деревья, да, забирая вперед они
[51:20.220 --> 51:27.100]  будут хорошими, там, средненькими. Да, хорошими они не будут, на среднем, но это как бы мы будем потом по индукции
[51:27.100 --> 51:33.700]  доказывать. Вот, вначале они какие-то будут. Значит, идея будет такая. Значит, еще будет такой важный вариант,
[51:33.700 --> 51:52.580]  что там, допустим, что вал от V1 будет у нас, да, там, допустим, больше, чем вал от V2, больше,
[51:52.580 --> 52:05.380]  чем вал от V3, больше и так далее, больше, чем вал от V3. Ну, значит, сразу такую сформирую так. Если там есть
[52:05.380 --> 52:11.500]  равенство, то на самом деле никто не мешает вам из этих двух деревьев быстренько сделать одно, причем подвесить
[52:11.500 --> 52:26.220]  одно за другое так, как вы считаете нужным, то есть по адекватной ССДшке. Нет, в корне минимум храниться не
[52:26.220 --> 52:36.700]  обязан, тот и проблема. Ну и, как вы уже догадались, когда у вас будет цель сделать апдейт от какой-то
[52:36.700 --> 52:43.060]  вершины, лежащей тут где-нибудь внутри, то вы будете делать это сжатие путей только до своего
[52:43.060 --> 52:49.540]  промежуточного корня. То есть вот сюда вы бегать и сжимать не будете, то есть только внутри этого
[52:49.540 --> 53:06.340]  дерева. Понятно, да? Эвал. Да, как будет делаться апдейт? Нет, хотя нет. Как делаться апдейт, как всегда,
[53:06.340 --> 53:15.140]  понимание операции значит, что сейчас будет уровень easy, уровень medium, уровень hard, уровень easy. Как делать
[53:15.140 --> 53:25.660]  эвал? Эвал просто делать сжатие путей в своем дереве. За пределы его мы не выходим, то есть там вот
[53:25.660 --> 53:34.020]  дошли до V4, все, значит, вот выше не ходим. Понятно, да? Ну, собственно, тут очень-то бесполезно, потому что,
[53:34.020 --> 53:43.420]  ну тут очевидно, да, это как бы бесполезно, потому что здесь все равно валы больше. То есть мы такое
[53:43.420 --> 53:52.900]  делаем, сжатие путей, но не сжимаем. Да, потому что можно было бы сказать, что у нас есть виртуальное
[53:52.900 --> 54:00.500]  дерево, оно состоит так из вот этих вот деревьев и вот эти все корни тоже на самом деле тут идут,
[54:00.500 --> 54:08.140]  вот это, так сказать, потом как родители, то есть корни. Ну вот, но просто вот конкретно эти
[54:08.140 --> 54:17.380]  ребра мы просто так на халяву не сжимаем, пока во время эвала точно. Да, что делать с эвалом? Что
[54:17.380 --> 54:27.740]  делать с апдейтом? Да, но еще важный момент, конечно, в каждой вершине мы СЗ-шку храним. Ну,
[54:27.740 --> 54:33.660]  обычно в корне дерева, как вы помните, СЗ-шку хранить в общем-то не проблема. Значит, смотрите,
[54:33.660 --> 54:42.820]  немножко магии. Значит, как делать апдейт? А что нам нужно, чтобы сделать апдейт? Нам
[54:42.820 --> 54:50.620]  нужно сделать мин равно х. То есть нам дам какой-то х, и надо вал в один заменить на
[54:50.620 --> 54:59.060]  минимум из себя любимого и х. Но если х оказался больше либо равен этого вала, то вообще ничего
[54:59.060 --> 55:09.980]  делать не надо. Но, допустим, оказалось, что х все-таки меньше. Причем, скорее всего, что-то мне так
[55:09.980 --> 55:19.660]  подсказывает, что-то мне почему-то подсказывает, что х на самом деле будет меньше чаще всего не
[55:19.660 --> 55:28.020]  только вал от В1, но и меньше всех вешек на некотором префексе. Вот до какого-то момента он
[55:28.020 --> 55:34.620]  будет меньше, а потом в какой-то момент он бац и старит там больше либо равен. Логично, да? То есть тут
[55:34.620 --> 55:45.700]  больше либо равен, а тут меньше. Тогда идея такая. Тогда, во-первых, начнем с того, что можно все эти
[55:45.700 --> 55:59.860]  значения, тогда все все значения в корне мы заменяем на х. Это, во-первых. Во-вторых, следующее,
[55:59.860 --> 56:08.620]  что имеет смысл сделать, что имеет смысл сделать, это, конечно же, объединить эти деревья в одно. Ну
[56:08.620 --> 56:13.500]  прямо вот по цепочке вот эти два объединить, потом результат объединить вот с этим, ну и так далее.
[56:13.500 --> 56:23.980]  Объединяем, конечно же, таким образом, что подвешиваем меньше пассажки дерева к большему. То есть это
[56:23.980 --> 56:32.900]  очень удобно, потому что у нас, ну это удобно как минимум, потому что новые ребра, которые появляются,
[56:32.900 --> 56:40.860]  они уже сразу хорошие. Да, кстати, да, маленькая лемма, хорошее ребро, хорошее ребро является
[56:40.860 --> 56:51.220]  средненьким. Ну ладно, хорошо, да. Ну хорошо, как только оно перестанет вести в корень, оно будет
[56:51.220 --> 57:01.980]  средненькое. Вот так. Значит, хорошо, средненькое, так средненькое. Вот. Ну правда, это, конечно,
[57:01.980 --> 57:06.460]  еще не гарантирует, что там ребра, которые перед этим вели в корень, стали средненькими сами по себе.
[57:06.460 --> 57:12.980]  Но это мы будем доказывать постепенно. Вот. Но здесь, соответственно, это сжатие делаем, и более того,
[57:12.980 --> 57:18.660]  уже на уровне амортизации выявляет ощущение, что эти слияния деревьев нам достанутся за бесплатно,
[57:18.660 --> 57:24.140]  потому что, как вы уже догадываетесь, у нас количество деревьев увеличиваться не будет,
[57:24.140 --> 57:29.180]  только уменьшаться. Поэтому никаких проянот. Поэтому сжатие нам достается фактически за
[57:29.180 --> 57:39.300]  бесплатно. Вот. И так. Но это был уровень медью. Тут пока все просто. А теперь начинается
[57:39.300 --> 57:55.060]  уровень хард. А как, собственно, объединить два таких интеллектуальных путя? Пути. Путей.
[57:55.060 --> 58:11.300]  Путю это вообще язык, что-то это единственное число какое-то. Путёв. Вот.
[58:11.300 --> 58:29.220]  Смерчить. Ага. И предлагает прям честно бегать по этим путям и их мерчить. Ну, будет сомнительно
[58:29.220 --> 58:33.180]  просто потому, что на это количество деревьев не будет уменьшаться и непонятно, откуда возьмется
[58:33.180 --> 58:40.060]  там хоть какая-то амортизированная симпатика. Вот. То есть это как-то само вообще долговато.
[58:40.060 --> 58:47.340]  Поэтому, значит, действовать будем немножко по-другому. Так. И так делаем. Внимание. Делаем линк.
[58:47.340 --> 59:02.540]  Значит, первое, что делаем, то есть первое, просто сразу, это делаем update a w значением
[59:02.540 --> 59:14.660]  вал от w. Прям вот сразу с порога. Просто как волфой на счёт два сразу. Просто. Раз, два,
[59:14.660 --> 59:22.660]  update w, вал w. Всё. Вот. Ну, я надеюсь, вы от этого там, собственно, не перекуридулись через себя
[59:22.660 --> 59:50.620]  три раза. Вот. Начится. Перекуридулись. А в чём вопрос? Ну, так. Так. Ну, вот. Значит,
[59:50.620 --> 01:00:05.260]  сейчас мы хотим слить вот эти два дерева. Вот. V и W. Мы гарантируем, что вал здесь. То есть сейчас
[01:00:05.260 --> 01:00:14.060]  мы уже гарантируем, что вал от V меньше либо равен, чем вал от W. Нет, хуже. Больше либо равен.
[01:00:14.060 --> 01:00:30.700]  Ну, это так. На всякий пожарный. Вот. Ну, и теперь высягает вопрос. Так кого же, куда же подвешивать
[01:00:30.700 --> 01:00:45.580]  G? Как же подвешивать G? Вот. Ну, наверное, надо подвешивать меньше к большему. Да. Ну,
[01:00:45.580 --> 01:00:50.780]  потому что, да, начнём с того, что в вершине V и W можно хранить не только СЗ каждого поддерева,
[01:00:50.780 --> 01:00:59.100]  но и можно хранить, наверное, СЗ всего, всей вот этой вот конструкции. Правда? Не очень сложно.
[01:00:59.100 --> 01:01:09.260]  Так вот. Так. Ну, давайте, давайте ещё деревья как-нибудь обзовём. Альфа 1, альфа 2, альфа 3,
[01:01:09.260 --> 01:01:20.580]  альфа 4, альфа 5. А эти деревья назовём там бета 1, бета 2, бета 3, бета 4, бета 5, бета 6, бета 7.
[01:01:20.580 --> 01:01:40.620]  Ну и так далее. Вот. Та переча. Значит, кого же, куда же подвесить G? Как G жить G? Ну, жить
[01:01:40.620 --> 01:01:49.060]  оказывается достаточно несложно. Значит, мы хотим подвесить. Всё, нет, сложно жить, да? Нет? Ладно.
[01:01:49.060 --> 01:01:57.980]  Господи. Вот. Как говорится, да. Как это страшно, когда о сложности жизни говорят студенты первого
[01:01:57.980 --> 01:02:08.860]  курса. Да. Ладно. Значит, смотрите. Ну, а первым, значит, рассмотрим два случая. Значит, такой стандартный
[01:02:08.860 --> 01:02:16.620]  метод. От создателей таких хитов как, заметим, что там, называется там, докажем по индукции.
[01:02:16.620 --> 01:02:27.180]  Значит, рассмотрим два случая. Случай номер раз. Неожиданно оказался, что глобал СЗ от В оказался
[01:02:27.180 --> 01:02:39.660]  неожиданно больше либо равен глобал СЗ от В. Тогда, что мы делаем?
[01:02:39.660 --> 01:03:09.140]  Хочу. Так или не делай. Хотя надо подумать или нет. Вот, если глобал СЗ или локал СЗ.
[01:03:09.140 --> 01:03:24.340]  Нет. Вопрос не введения, а вопрос в данном случае именно по сути. Ладно. Значит, смотрите. Идея
[01:03:24.340 --> 01:03:30.860]  вот такая, что хочется подвешивать меньше к большему вот в таком интересном формате. Значит,
[01:03:30.860 --> 01:03:37.340]  в этом случае мы будем делать так. Значит, вот эти вот альфы никуда не денутся. То есть это всем,
[01:03:37.340 --> 01:03:51.420]  значит, это вот все как бы будет. Там В3, там допустим. То есть там В4, В5. Это все на месте. Это
[01:03:51.420 --> 01:03:57.660]  все на месте. Это все никуда не девается. Это все хорошо. То есть тут альфа 2, альфа 3, альфа 4,
[01:03:57.660 --> 01:04:07.700]  альфа 5. Вот. Так. А вот если я... Ну вот, но идея такая. Так вот, дело в том, что я хочу просто
[01:04:07.700 --> 01:04:17.380]  взять вот эту вершину, на которой висит вот это целое под дерево. Вот это вот альфа 1. Так вот,
[01:04:17.380 --> 01:04:31.940]  я хочу на него еще кое-что навесить. Кое-что это бета 1, бета 2. Ну, принцип вы поняли. Бета 7.
[01:04:31.940 --> 01:04:44.380]  Так что у меня теперь вот такое вот супер под дерево вершины В. И тупо взял и повесил. В чем?
[01:04:44.380 --> 01:04:52.220]  Обратите внимание, хуже, пока что с точки зрения правильных эвалов, хуже не стало. Правда? Это вот
[01:04:52.220 --> 01:05:00.860]  самое главное. Это прям основное. Да, без этого там смысла нет. Но утверждается, что достаточно,
[01:05:00.860 --> 01:05:18.380]  тогда если у нас с СЗшкой повезло, надо просто повесить вот так и не заморачиваться. Вот. Так что
[01:05:18.380 --> 01:05:30.820]  вот такая вот неожиданная нот, такая вот неожиданная красота. Вот. Хотя, действительно,
[01:05:30.820 --> 01:05:34.500]  глобал СЗ для этого нужен или нет? Потому что нам же нужно теперь по индукции доказывать,
[01:05:34.500 --> 01:05:44.460]  что серебро средненький. Вот. Ну, впрочем, ладно, по нотам, что нам это пока дало? Пока нам это
[01:05:45.420 --> 01:05:49.940]  дало, что у нас появились ноты. Там появились какие-то новые. Ну, давайте смотреть. И теперь
[01:05:49.940 --> 01:05:56.940]  второй случай. Второй случай, когда выясняется глобал, ну, будьте готовы стереть у себя,
[01:05:56.940 --> 01:06:10.820]  может и локал будет сейчас. Когда наоборот. Когда как-то вот тут много, тут мало. А вешать
[01:06:10.820 --> 01:06:24.580]  хочется В к В. Что делать? А тут, смотрите. А тут тогда возникает идея такая. Мы все равно будем
[01:06:24.580 --> 01:06:35.940]  вешать В к В. Но в более хитром виде. Значит, у нас теперь будет супер цепочка В. Значит,
[01:06:35.940 --> 01:07:03.380]  вот это вот W со своими В1, В2, В3, В7. Сколько там? В5, В5, В6. Вот это вот. В4. Вот. Значит,
[01:07:03.380 --> 01:07:07.660]  все это мы подвесим к W. Заметим. И вариант сохраняется. Ну ладно, если тут равенство,
[01:07:07.660 --> 01:07:19.260]  то мы их схлопнем как-нибудь. Вот. Но на вершине В, на вершину В я теперь повешу все. Все в смысле
[01:07:19.260 --> 01:07:38.420]  альфа-1, альфа-2 и так далее альфа-5. Вот такая вот у меня идея. То есть повешу прям вот так,
[01:07:38.420 --> 01:07:43.740]  прям в явном виде. То есть у меня вот альфа-1 будет. То есть вот давайте я даже более точную
[01:07:43.740 --> 01:08:05.340]  картинку нарисую. Что да, ну да, много ребр создаем. Сейчас, где-где? Что имеет в виду?
[01:08:13.740 --> 01:08:39.500]  Ну типа. Вот. Вот. Вот. Так. И вот тут-то мы начинаем выяснять. Что мы начинаем выяснять?
[01:08:39.500 --> 01:08:50.340]  Ну кроме того, что кто-то уже засыпает, конечно. Отличается тем, что в первом случае мы схлопнули
[01:08:50.340 --> 01:09:01.060]  вот это подвешиваемое дерево. А тут мы схлопнули то, к которому подвешивают. Ну как схлопнули,
[01:09:01.060 --> 01:09:07.100]  вот так подвесились. Конечно, внутри меньких жатей не делали. И теперь нам хочется поглядеть
[01:09:07.100 --> 01:09:15.140]  на эту интеллектуальную картинку и неожиданно сказать, что ура! У нас теперь внутри там деревья
[01:09:15.140 --> 01:09:22.420]  все ребра средненькие. Остается только маленький вопрос. С какого перепуга?
[01:09:22.420 --> 01:09:39.340]  Нет, ну давайте разбираться. Что? По индукции. Нет, ну смотрите. Ну логично, что, наверное,
[01:09:39.340 --> 01:09:45.900]  по индукции. Ну можно по индукции, а можно просто. Смотрите. В каждом из этих двух жатей у нас
[01:09:45.900 --> 01:09:55.620]  появляются новые ребра. И хочется доказать, что эти ребра в будущем будут средникими. Логично,
[01:09:55.620 --> 01:10:01.300]  да? Ну как это доказать? Ну очень просто. Во-первых, смотрите. Кстати, важно обратить
[01:10:01.300 --> 01:10:09.820]  внимание, что новые ребра у нас появляются не только в рамках линка, но и в рамках апдейта.
[01:10:09.820 --> 01:10:15.260]  Правда? Более того, кстати, какая-то часть апдейта уже могла тут появиться, потому что, помните,
[01:10:15.820 --> 01:10:20.820]  если у нас тут образуются равные какие-то элементы, мы их там хотим схлопывать. Но заметим,
[01:10:20.820 --> 01:10:27.900]  что они нам погоды не делают, потому что ребро, которое появляется в результате объединения двух
[01:10:27.900 --> 01:10:33.180]  вершин с одинаковым корнем, оно автоматически становится хорошим. Но хорошее ребро значит в
[01:10:33.180 --> 01:10:42.140]  будущем уж средненькое точно. Хорошее ребро в будущем не ниже среднего будет. Пока логично.
[01:10:42.140 --> 01:10:54.500]  Вот. Топереча. Топереча. Но что же делать? Нет, это очень приятно. А что делать с вот этими
[01:10:54.500 --> 01:11:00.980]  ребрами, которые вот образовались либо вот в этом случае, либо вот в этом? Ну для этого надо
[01:11:00.980 --> 01:11:09.340]  посмотреть. То есть мы знаем, что когда-нибудь в будущем, возможно, из вершины В1 будет торчать
[01:11:09.340 --> 01:11:18.460]  ребро куда-то в родителя. И нам хочется в этот момент сказать, что когда этот родитель определится,
[01:11:18.460 --> 01:11:24.260]  все эти ребра будут средники. Ну, собственно, по сути, ровно это и надо доказать. Тут может
[01:11:24.260 --> 01:11:28.940]  быть немножко нетривиальная индукция какая-то, может быть, там покажется нетривиально. Но вот
[01:11:28.940 --> 01:11:34.340]  смотреть надо именно с этой точки зрения. То есть надо посмотреть, когда появляются новые ребра и
[01:11:34.340 --> 01:11:39.660]  показать, что они в будущем когда-нибудь, то есть когда они перестанут быть корневыми,
[01:11:39.660 --> 01:11:47.660]  они станут средникими. Но давайте смотреть. Во-первых, когда, вот давайте вот первый случай рассмотрим.
[01:11:47.660 --> 01:11:53.900]  Жила была вершина В1 и в какой-то момент в будущем она перестала быть корнем, там ее куда-то повесили.
[01:11:53.900 --> 01:12:04.260]  Но куда повесили? Если ее повесили в результате какого-то апдейта, то ее повесили на хорошие
[01:12:04.260 --> 01:12:14.820]  ребра, а хорошее ребро своих детей автоматически делает средниками. Вот, логично, да? Вот, поэтому это
[01:12:14.820 --> 01:12:24.900]  не очень интересный случай. Вот, более интересный случай, и вот тут-то нам вот с этими глобулами
[01:12:24.900 --> 01:12:32.860]  придется подумать, глобул имеется в виду или локал какой-нибудь. Надо тогда подумать. Хорошо,
[01:12:33.020 --> 01:12:40.220]  вот мы здесь тут действительно что-то повесили. А теперь, хорошо, а каким может,
[01:12:40.220 --> 01:12:47.020]  откуда еще может взяться ребро из В1 куда-нибудь, если не из апдейта? Откуда еще такое ребро может
[01:12:47.020 --> 01:13:03.540]  взяться? Да, ну тут что-то же происходит. Переподвешивание, да, но может быть в процессе
[01:13:03.540 --> 01:13:11.820]  предповешения вершины В подвесить? Да, а каким образом может это произойти? Каким-то может быть.
[01:13:11.820 --> 01:13:23.820]  Да, да, это называется не видно, а вот так, вот, да, конечно, да, то есть, конечно, то есть,
[01:13:23.820 --> 01:13:33.020]  на самом деле это может, то есть, либо произойдет в апдейте, либо произойдет вот так. Хотя,
[01:13:33.020 --> 01:13:41.460]  нет, ладно, даже не так, не важно. Хотя, да, ладно, даже не так, то есть, не сведение конкретно
[01:13:41.460 --> 01:13:47.500]  к этому случаю, а просто глобально, когда неожиданно будет линк, который уже вершину В подвесит к чему-нибудь.
[01:13:47.500 --> 01:13:58.180]  Но давайте посмотрим, что там будет, ну вот, что там, соответственно, будет происходить. Так,
[01:13:58.260 --> 01:14:03.940]  ну а теперь давайте думать, а какой случай. Ну вот, с другой стороны, заметим, что схлопывание,
[01:14:03.940 --> 01:14:09.020]  может быть, вот, то есть там будет какое-то схлопывание, но схлопывание кого непонятно.
[01:14:09.020 --> 01:14:17.740]  То есть, схлопывание кого там будет понятно не очень. Но с другой стороны, заметим,
[01:14:17.740 --> 01:14:27.460]  ну вот, то есть, заметим, что сейчас у нас ребра ведут вершину В, и на них, и новыми
[01:14:27.460 --> 01:14:34.420]  ребрами стали вот эти вот б1 б2 и так далее да заметим следующее что если новое
[01:14:34.420 --> 01:14:38.980]  схлопывание второе произошло по второй схеме то тогда у нас объединились
[01:14:38.980 --> 01:14:44.020]  буквально вот эти вот деревья правда
[01:14:44.700 --> 01:14:55.060]  но тогда если они объединились то тогда заметим что тогда но то есть то есть они
[01:14:55.060 --> 01:14:59.780]  как бы все объединились и подвесились к новому корню да и тогда у этого корня
[01:14:59.780 --> 01:15:08.820]  сз оказался больше чем глобал сз вот этого вот а глобал сз этого вот больше
[01:15:08.820 --> 01:15:17.660]  либо равен чем даже два глобал сз в потому что мы его сюда присоединили так
[01:15:17.660 --> 01:15:24.620]  вот смотрите давайте давайте внимательно значит тут значит так тебе бы это где бы
[01:15:24.620 --> 01:15:30.940]  это аккуратно нарисовать и так давайте представим что у нас был выполнен линк
[01:15:30.940 --> 01:15:36.740]  там линк от vw по первой схеме
[01:15:36.740 --> 01:15:43.740]  а потом был выполнен линк от
[01:15:43.740 --> 01:15:56.060]  допустим ув по второй схеме тогда смотрите что у нас произошло
[01:15:56.060 --> 01:16:06.340]  значит если у нас линк от vw вот по такой схеме произошел то новыми то у нас как бы к
[01:16:06.340 --> 01:16:13.260]  вершине v то есть на вершине v висели вот и висел вот этот вот альфа 1 а также там еще на ней
[01:16:13.260 --> 01:16:23.060]  продолжает висеть там альфа 2 альфа 3 и так далее но вот но новинка заключилась в том что мы сюда
[01:16:23.060 --> 01:16:32.820]  повесили вот новые деревья новые балалаечки вот эти б1 б2 и там соответственно б это ну сколько
[01:16:32.820 --> 01:16:38.940]  там допустим 7 на нас собственно сейчас вот про эти ребра интересует да то есть вот эти
[01:16:38.940 --> 01:16:43.980]  ребра стали новыми поэтому нас интересует эти ребра в будущем будут ли средниками или нет
[01:16:43.980 --> 01:16:51.540]  но что произойдет дальше потом появился линк от ув то есть линк от у то есть допустим у нас
[01:16:51.540 --> 01:16:58.660]  тут был еще какой-то давайте еще где-то посередине образовалась вершина у и у нее тут деревья там
[01:16:58.660 --> 01:17:10.860]  где вот это гамма 1 гамма 2 гамма 3 там допустим гамма 4 ну и допустим все так вот и решили и не
[01:17:10.860 --> 01:17:15.780]  она вот решили мы к ней подвесить вершину вы и неожиданно это образовалась по второй схеме
[01:17:15.780 --> 01:17:21.340]  но вот
[01:17:21.340 --> 01:17:37.060]  тогда значит что он вот что у нас тогда произошло тогда но вот действительно если
[01:17:37.060 --> 01:17:49.460]  мы решили по ноту решили решили подвесить в акул а у нее размер а нота сейчас ну да ее размер
[01:17:49.460 --> 01:17:57.100]  оказался меньше начало то есть то есть у нее но тогда тут будет что тогда получается что мы
[01:17:57.100 --> 01:18:03.260]  должны были вот схлопнуть вот эту гамму правда то есть получилось примерно следующее
[01:18:03.260 --> 01:18:20.700]  но вот то есть получилось у нас действительно какой-то там с там допустим гамма 1 там гамма 1
[01:18:20.700 --> 01:18:32.540]  тут получается гамма 2 там какие-то вот еще гамма 3 допустим гамма 4 еще и тут еще цепочка что это
[01:18:32.540 --> 01:18:40.660]  за гамма я но вот значит тут получается дабл ее значит и тут висят соответственно бета 1 бета 2
[01:18:40.660 --> 01:18:56.540]  бета 3 и так далее вот нет и правильно да значит неправильно потому что во первых тут альфа альфа
[01:18:56.540 --> 01:19:10.220]  2 альфа 3 и так далее а во вторых тут еще висят какие-то бешки так что это поменяло
[01:19:10.220 --> 01:19:17.220]  мы заметим длительного ничего не поменялось они остались корневые пока все в порядке правда
[01:19:17.220 --> 01:19:25.620]  поэтому на самом деле да то есть интерес то есть скорее интересно становится
[01:19:25.620 --> 01:19:36.100]  но вот это интересно когда вот это вот но вот это но теперь ждем когда у нас сама
[01:19:36.100 --> 01:19:50.460]  вершина в еще куда не подвесится но это но теперь смотрите вот тут два варианта то есть
[01:19:50.460 --> 01:19:59.540]  действительно что может поменяться для вершины в почему ну вот и да теперь да теперь да страшно
[01:19:59.540 --> 01:20:08.540]  но теперь у нас тоже два варианта и вон вот потому что там и в одном из этих нот и в одном из этих
[01:20:08.540 --> 01:20:23.540]  вариантов все вот эти под деревья подвесится к вершине у видно все ноты все эти деревья подвесится
[01:20:23.540 --> 01:20:36.500]  вот потому что для них пока для них ничего не поменялось пока ничего не
[01:20:36.500 --> 01:20:41.020]  очевидно и ничего не поменялось они как были корневыми вот эти новые красные
[01:20:41.020 --> 01:20:49.020]  гобры так и остались нет они все еще висят на корне своего дерева то есть в напоминаю
[01:20:49.020 --> 01:20:55.860]  она не подвешена на самом деле то есть просто вы перестала быть глобальным корнем но
[01:20:55.860 --> 01:21:04.500]  локальным корнем своих деревьев она осталась вот теперь не текает вопрос а что собственно в
[01:21:04.500 --> 01:21:14.180]  будущем может произойти вот в будущем но в будущем на самом деле может произойти примерно
[01:21:14.180 --> 01:21:21.260]  следующие то есть вершина то есть на самом деле в будущем один из вариантов это то что вот все это
[01:21:21.260 --> 01:21:25.780]  дерево слопнется воду то есть мы неожиданно захотим все вот это вот подвесить к вершине
[01:21:25.780 --> 01:21:34.780]  что это за вариант кстати она это вот тот самый вариант вот то есть если мы к вершине
[01:21:34.780 --> 01:21:43.820]  у захотим подвесить еще что-то причем большего размера и тогда получается да что эти деревья
[01:21:43.820 --> 01:21:55.940]  станут потомками вершины у на которые висит вот это все вот но вот но соответственно теперь
[01:21:55.940 --> 01:22:01.100]  очень хочется сказать что конечно же и конечно с этот глобально там на созерту будет висеть
[01:22:01.100 --> 01:22:05.940]  весь этот глобальный размер который хотя бы в два раза больше чем глобальный размер вот этих бэш
[01:22:05.940 --> 01:22:15.180]  вот хочется почему-то в это поверить
[01:22:15.180 --> 01:22:28.500]  а почему нам это не поверить а ведь обратите внимание вот когда мы делали линк в в по 1 мы
[01:22:28.500 --> 01:22:33.980]  это делали в предположении что вот эти вот деревья суммарно имеют вес меньше чем вот это правда
[01:22:33.980 --> 01:22:42.980]  следовательно вот глобальный cz от этого увеличился хотя бы в два раза правда поэтому если то есть мы
[01:22:42.980 --> 01:22:48.580]  в значит соответственно подвесили к у а потом в какой-то момент это дерево схлопнулась в чем
[01:22:48.580 --> 01:22:53.860]  не важно в у она схлопнулась или во что-то еще но хотя заметим теперь следующее что у нас там
[01:22:53.860 --> 01:23:02.100]  ну заметим следующее что дерево у нас дерево у нас теперь устроен так что ну либо схлопнется
[01:23:02.100 --> 01:23:09.620]  но либо глобально схлопнется объединиться все в одно да в будущем либо но там допустим вот эти
[01:23:09.620 --> 01:23:14.060]  ув или кто-то там еще они неожиданно объединяться потому что них там окажутся одинаковые лейблы
[01:23:14.060 --> 01:23:19.660]  но как мы помним если вершина в подвесит в результате такого объединения то там уже все
[01:23:19.660 --> 01:23:26.780]  ребро хорошее оно автоматически сделать эти ребра средники да а если мы вот а если в какой-то
[01:23:26.780 --> 01:23:33.740]  момент там произойдет вот это вот схлопывание а пока оно не произойдет принципе с вершины
[01:23:33.740 --> 01:23:42.220]  останется корнем но то тогда кажется что там она то тогда все это все эти ребра будут участвовать
[01:23:42.220 --> 01:23:47.980]  значит в глобальном дереве то есть окажутся так сказать то есть эти эти деревья оказывается внуками
[01:23:48.300 --> 01:23:54.420]  то есть эти вершины окажутся внуками корни и сзшка у них будет содержать все эти альфы поэтому
[01:23:54.420 --> 01:23:58.380]  значит их поэтому тут будут явно больше чем в два раза чем то что было раньше
[01:23:58.380 --> 01:24:08.940]  вот так что получается что значит что у нас получается мы рассмотрели случаи когда у
[01:24:08.940 --> 01:24:21.260]  нас линк vw был по 1 а линк от ув по 2 видно да ну да есть только не выяснито что это
[01:24:21.260 --> 01:24:29.300]  стало что это основной интересный случай ну давайте разбираться потому что давайте посмотрим а что
[01:24:29.300 --> 01:24:35.340]  делать если у нас линк ув окажется то есть там действительно линк ув окажется по первому
[01:24:35.340 --> 01:24:53.580]  случаю нет почему не пойдет как раз пойдет вот давайте разбираться так хорошо вот
[01:24:53.580 --> 01:25:00.260]  случай 1 2 допустим рассмотрели да вот хорошо давайте сейчас я вот давайте давайте уши давайте
[01:25:00.260 --> 01:25:05.780]  рисовать сейчас на картинке так рисовать где тут запутаться действительно есть
[01:25:05.780 --> 01:25:14.820]  смотрите внимательно значит линк ув допустим теперь по 1 что у нас тогда что у нас тогда
[01:25:14.820 --> 01:25:24.660]  а тогда будет следующее значит то есть что у нас произошло значит что такое слияние по 1 это
[01:25:24.660 --> 01:25:34.260]  означает что нас вот эти ушки остались то есть жила вот это ушко на месте гаммы на месте вот
[01:25:34.260 --> 01:25:45.460]  вот гаммы вот и значит и к ним мы неожиданно решили подвесить вот это все
[01:25:45.460 --> 01:25:57.660]  ну да то есть получилось альфа 1 ну давайте так повесим тут альфа 1 альфа 2 там альфа 3 и
[01:25:57.660 --> 01:26:04.660]  так далее но самое для нас приятное шумы тут но вот нет ситуация
[01:26:04.660 --> 01:26:19.460]  тут на самом деле есть маленькая хитрость маленькая хитрость ситуация на самом деле
[01:26:19.460 --> 01:26:24.980]  ухудшилась потому что куда делось верх�� è вотblind вот в этой первой ситуации куда
[01:26:24.980 --> 01:26:33.400]  делать сама вершину W, то есть она на самом деле
[01:26:33.400 --> 01:26:39.720]  куда-то делась, она находится вот здесь W1, поэтому сама
[01:26:39.720 --> 01:26:43.960]  вершина V на самом деле куэрнот, то есть на самом деле, поэтому
[01:26:43.960 --> 01:26:47.760]  я тут немножко наврал, альфа 1 висит мне здесь, то есть
[01:26:47.760 --> 01:26:54.840]  на самом деле в результате этого слияния, то есть
[01:26:54.840 --> 01:27:01.560]  теперь бесит вот здесь на нем бесит альфа-1 и вот это все
[01:27:01.560 --> 01:27:13.200]  бета-1 бета-2 и так далее и все вот это вот это теперь
[01:27:13.200 --> 01:27:22.520]  единое дерево вот с гаммой вот с гаммой 1 вот поэтому
[01:27:22.520 --> 01:27:32.480]  не все так просто поэтому в этот момент эти эти красенькие да то есть это вот да не
[01:27:32.480 --> 01:27:38.600]  совсем так я плохо рисовал то есть вот теперь бета-1 тут висит бета-2 висит и так далее поэтому
[01:27:38.600 --> 01:27:44.280]  вот эти красные ребра они теперь уже они уже не корневые и надо прямо сейчас доказывать что они
[01:27:44.280 --> 01:27:55.720]  средненькие как же нам это сделать вот это интересно смотрите глобал смотрите
[01:27:55.720 --> 01:28:02.360]  глобалта сайс увеличился а локал нам же нам же локал нужен
[01:28:02.360 --> 01:28:20.200]  ну давайте так ну да чего нет у нас ладно смотрите но так нет но опять мы знаем следующее
[01:28:20.200 --> 01:28:29.960]  что сумма всех гамм она больше чем сумма всех вот этих вот в плюс в почему потому что мы так
[01:28:29.960 --> 01:28:43.560]  складываем вот да но да но с другой стороны да заметим что сумма всех альф при этом напоминаю
[01:28:43.560 --> 01:28:49.760]  да больше ли правда чем сумма всех бет потому что вот мы тут так сливали да поэтому да то есть
[01:28:49.760 --> 01:28:55.800]  эти ребра бы на этих ребах висели беты а вот на этом на этой вершине уже теперь висят не только
[01:28:55.800 --> 01:29:10.920]  все беты но и все альфа поэтому все в порядке нет вот скажи чего нет не обязательно смотрите
[01:29:10.920 --> 01:29:20.160]  ребра из бет ведут вершину который помимо самих бет висит только альфа 1 остальные альфа выше
[01:29:20.160 --> 01:29:29.320]  висят да поэтому да вот поэтому да поэтому нет но от хорошести еще нет так таким образом
[01:29:29.320 --> 01:29:39.760]  случаи один один рассмотрели так ну что осталось еще два случая господи тесно генерида и тесне
[01:29:39.760 --> 01:29:45.440]  не взяли четыре случая как-то быстрее и рассмотреть пошутить альфа там что-то там просто пару строчек
[01:29:45.440 --> 01:29:55.600]  написал там типа из разряда ну там все там вот вот но собственно нам-то нам-то в общем-то не
[01:29:55.600 --> 01:30:08.520]  принципиально так как бы мы люди мы люди простые надо рассмотрим 8 случаев и 16 и 32 и 64 вот так
[01:30:08.520 --> 01:30:18.160]  да потом нам немножко надоест позовем мудрецов потом выяснилось что нас ограбили потом да вот
[01:30:18.160 --> 01:30:26.680]  потом мы вспомним что там один шахматист уже так одного правителя нагрел по этой схеме знаете
[01:30:26.680 --> 01:30:35.200]  про знаете схему да нет но там легенда была такая что там там разные варианты но суть такая что
[01:30:35.200 --> 01:30:42.240]  там звать условно там один один крутой там шахтам впал в депрессию выражай современным языком
[01:30:42.240 --> 01:30:48.400]  абсолютно депрессия просто типа все скучно то есть там я типа там вроде все есть как бы да все
[01:30:48.400 --> 01:30:53.240]  везде все удовольствие как-то что-то нет и пришел какой-то бегя корея но ты говори слушай да сейчас
[01:30:53.240 --> 01:30:58.000]  эти излечу он да откуда ты можешь знать меня тут он самый крутый лекарь не знает что со мной а я
[01:30:58.000 --> 01:31:04.120]  знаю допишите просто скучно ну просто ты как тебя как-то не чем думать за те другие думать нечего
[01:31:04.120 --> 01:31:09.560]  делать за тебя все делают в общем короче эти принес лекарства которые заставит тебя думать и
[01:31:09.560 --> 01:31:16.480]  показывает ему шахматы вот вот это игру назвал шахматами потому что нужно излечить шаха вот
[01:31:16.480 --> 01:31:23.880]  но вот и стали играть шахматы но вот и но как-то стал выздоравливать потому что действительно так
[01:31:23.880 --> 01:31:28.560]  стало и вообще стало интересно стал вообще долго вообще думать на размышляет от каждым ходом ну там
[01:31:28.560 --> 01:31:35.240]  играли играли в какой-то момент он даже первые партию выиграл и возрадовался вот и говорит слушай
[01:31:35.240 --> 01:31:42.480]  давай слушай я тебе слушай спасибо тебе огромное слушай вообще что ты хочешь дам тебе все он слушай
[01:31:42.480 --> 01:31:49.040]  у тебя в стране столько бога но то там разные легенды говорят до доброго слушай понимаешь
[01:31:49.040 --> 01:31:53.840]  что мне слушай у тебя в стране столько бедных накормить пожалуйста вот лучшим подарком ой да
[01:31:54.440 --> 01:32:00.200]  давай я тебя хочу дарить а не ну мне-то немного надо смотри вот видишь шахмату доску смотри значит
[01:32:00.200 --> 01:32:06.700]  мне немножко риса надо вот смотри значит вот это на первую клетку кладешь одну рисинку на
[01:32:06.700 --> 01:32:14.680]  следующую две на следующую четыре и так удваивай пока доска не кончится да да господи да легко
[01:32:14.680 --> 01:32:26.480]  сейчас мы тебе это ну догадывается чем закончилось да да да да да не закончится
[01:32:26.480 --> 01:32:31.760]  но у него всех хранили чехла все бы там да в общем ночем одна из версий легенд говорит шуму вот
[01:32:31.760 --> 01:32:41.840]  то что товарищи в итоге голову отрубили да вот другие легенды нет но чем вы это шок был вот так
[01:32:41.840 --> 01:32:50.080]  что вот такая вот так что такая вот схема да простая вот значит что у нас теперь значит какие
[01:32:50.080 --> 01:32:57.360]  у нас случаи а ну теперь у нас значит поехали так давайте предположим что у нас теперь произошел
[01:32:57.360 --> 01:33:08.720]  линк в в по 2 по второй схеме то есть тут у нас оказалось наоборот альфы меньше бет поэтому у нас
[01:33:08.720 --> 01:33:21.520]  теперь целая значит у нас тут целая цепочка вот этих бет целая цепочка вот этих там вот
[01:33:21.520 --> 01:33:31.320]  бет не буду дорисовывать то а тут есть вершина в на который неожиданно повесились все альфы там
[01:33:31.320 --> 01:33:42.320]  альфа 1 альфа 2 и так далее так что мне причем ну как повесились ладно не все повесились альфа 1
[01:33:42.320 --> 01:33:49.720]  он не повесился потому что он на ней так и висел а все остальные а вот все остальные за новые ребра
[01:33:49.720 --> 01:33:58.240]  повесились вот и вот там про эти ребра теперь жутко интересно так ну теперь давайте разбираться
[01:33:58.240 --> 01:34:08.600]  что же про и зайдет дальше так ну видимо давайте аккуратненько два случая рассматривать если
[01:34:08.600 --> 01:34:20.200]  дальше у нас ну заметим да что тут у нас могло произойти что могло произойти ну во первых
[01:34:20.200 --> 01:34:27.040]  заметим что прежде чем мы вершину вы куда-то повесили могло схлопнуться вот это все правда
[01:34:27.040 --> 01:34:33.680]  могло сломаться но с другой стороны ладно от того что она схлопнулась нам не горячо не холодно
[01:34:33.680 --> 01:34:40.960]  ну ладно хотя нет если заметим что если хотя бы вот этот путь уже схлопнулся то тоже хорошо
[01:34:40.960 --> 01:34:49.600]  почему потому что вот эти ребра неожиданно стали хорошими уже в принципе победа вот ну а теперь
[01:34:49.600 --> 01:34:54.800]  давайте думать а могло ли так случиться что эти ребра перестали то есть вершина вы перестала
[01:34:54.800 --> 01:35:01.880]  быть корнем но при этом дерево не схлопнулась как такое может быть ну кроме объединений в обдайте
[01:35:01.880 --> 01:35:11.840]  конечно да то есть это могло но вот но то есть это могло конечно случиться когда мы неожиданно
[01:35:12.480 --> 01:35:22.740]  то есть когда мы неожиданно года опять reduce видимо вершина w пристать быть корнем ну заметьте
[01:35:22.740 --> 01:35:28.040]  давить у нас кое-кое не стой advance, как вы его то есть если линк то есть линке вот вершина в
[01:35:28.040 --> 01:35:37.840]  остается корнем всегда вот поэтому да поэтому неизбежно attractedทуве но давайте смотрите по
[01:35:37.840 --> 01:35:45.000]  какой себе ну давайте ладно давайте уж по порядочку пойдем по первому да
[01:35:45.000 --> 01:35:52.480]  аналогично аналогично прошлому по два ну ладно ладно хорошо ладно но впрочем
[01:35:52.480 --> 01:35:59.600]  линк ув по два к чему он нас приводит но нас опять приводит к той же ситуации
[01:35:59.600 --> 01:36:05.800]  жила была вершина у жила была вершина в на которые висят там и дальше все эти
[01:36:05.800 --> 01:36:24.440]  беты вот вот значит соответственно тут у нас альфа один тут значит вот эти вот
[01:36:24.440 --> 01:36:33.160]  ребра но пока ничего не произошло они остались к огневым вот но с другой стороны мы теперь
[01:36:33.160 --> 01:36:38.000]  знаем что в общем теперь свершено вы ничего не произойдет пока все это дерево не схлопнется
[01:36:38.000 --> 01:36:47.880]  понимаем да но при этом когда это дерево схлопнется эти все то есть когда все это
[01:36:47.880 --> 01:36:54.840]  дерево слопнется вероя то есть это все эти деревья поветость тут подвесится к одной вершине может
[01:36:54.840 --> 01:37:01.080]  уможет там какой-то еще будущей вершине на который будут висеть уже не только в со своими альфами но
[01:37:01.080 --> 01:37:08.080]  и там к ней будут подвешены все беты а мы знаем что сумма всех альф у нас меньше чем сумма всех
[01:37:08.080 --> 01:37:21.560]  бет понимаем да поэтому получается что в будущем никаких проблем не будет понимаем или убираем
[01:37:21.560 --> 01:37:31.360]  ну мало ли вот то есть поэтому да то есть в будущем будет так то есть потом видимо ничего
[01:37:31.360 --> 01:37:39.680]  кроме схлопывания произойти не сможет вот а если у нас линка тувэ произошел по первой схеме
[01:37:39.680 --> 01:37:49.040]  если он произошел по первой схеме то что тогда так ну по первой схеме это означается что
[01:37:49.040 --> 01:37:58.440]  но вот это значит что у нас там образовалась какая-то вершина у к которой неожиданно подвесили
[01:37:58.440 --> 01:38:08.280]  саму вершин там то есть тут как ну во первых тут гаммы какие-то всякие да тут там гамма один тут
[01:38:08.280 --> 01:38:13.840]  вот давайте вот даже более аккуратно нарисую тут гамма 2 и так далее но вот но вот это вот под
[01:38:13.840 --> 01:38:21.360]  дерево неожиданно объединилось с кучей всего а именно во первых тут то есть на ней повесилась
[01:38:21.360 --> 01:38:31.720]  вершина в со своими альфами и вот этими вот радостями альфа 2 альфа 3 там альфа 3 да вот а
[01:38:31.720 --> 01:38:41.120]  вторых ноги еще и что самое для нас приятное повесились все беты там бета 1 бета 2 и так далее
[01:38:41.120 --> 01:38:49.000]  вот ну что тут тогда сказать что уж в вершине у теперь на вершине у лежа висят не только все
[01:38:49.000 --> 01:38:57.760]  альфы но и все беты а вес всех бет был больше вот то есть видео но то есть как бы у нас такое
[01:38:57.760 --> 01:39:03.440]  отложенное подвешивание получилось то есть как бы то есть везде логика оказалось в том что мы
[01:39:03.440 --> 01:39:09.600]  как бы больше то есть больше то есть меньшее деревья подвешиваем к большей цепочке в расчете
[01:39:09.600 --> 01:39:17.640]  на то что в будущем это большая цепочка схлопнется и тогда эти ребра собственно и станут среденькими то
[01:39:17.640 --> 01:39:23.040]  есть вот такая вот то есть такая вот красивая версия оказалась которую в принципе даже не
[01:39:23.040 --> 01:39:28.840]  очень сложно реализовать если вам когда-нибудь такое потребуется ну там мало и дадут вам задачу
[01:39:28.840 --> 01:39:39.840]  в которой там это дерево доминатором за инлоген не работает ты или ц вот прям сидите прям уминайте
[01:39:39.840 --> 01:39:46.000]  но там мало и можно дадут вам там дерево доминаторов на 5 миллионов там мало ли мы все тогда вам все
[01:39:46.000 --> 01:39:52.560]  что вам останется просто реализовать вот это вот собственно вроде как даже нет ну в общем-то
[01:39:53.560 --> 01:39:58.480]  что это откровенное на убой да то есть как всегда то есть чип сложит то есть сложнее
[01:39:58.480 --> 01:40:03.880]  действительно убедиться что все это работает но идеи на ничего сложного нет то есть обратите
[01:40:03.880 --> 01:40:09.880]  внимание то есть вам даже за рангами следить не надо то есть обратите внимание за рангами даже
[01:40:09.880 --> 01:40:14.840]  не надо следить все что вам нужно следить за со смер coping contrasts вы вот как всегда в общем как
[01:40:14.840 --> 01:40:20.480]  а как это очень-то в в классическом основе принято рамки считать не надо надо считать
[01:40:20.480 --> 01:40:25.840]  сэшки глобал сэшки и повешивать одно другому и там немножко стека ну в общем-то как бы есть
[01:40:25.840 --> 01:40:31.560]  подозрение шоу как бы вы на своем жизни реализовывали что-то и повеселее например
[01:40:31.560 --> 01:40:39.600]  декспер мутейшн на подотрезке не реализовывали ну ладно а ну как с этим кто в итоге реализовал
[01:40:39.600 --> 01:40:47.760]  декспер мутейшн на подотрезке а ну вот кто-то реализовал таки да вот ну окей хорошо
[01:40:47.760 --> 01:40:57.800]  так ну да пожалуй действительно пришло время пойти за кофе вот сейчас мы поговорим про
[01:40:57.800 --> 01:41:03.920]  минимальные астовы в ориентированных графах так вот сразу уже прошлый раз возник вопрос а как
[01:41:03.920 --> 01:41:11.080]  это вообще а суть на самом деле предельно простая у нас есть граф ну то что мы называли графом
[01:41:11.080 --> 01:41:17.360]  потока управления то есть у нас есть граф в котором ориентированный граф в котором все вершины
[01:41:17.360 --> 01:41:25.080]  достижимы из корня и это все что известно то есть никаких там от цикличности никто естественно
[01:41:25.080 --> 01:41:30.720]  не гарантирует то есть тут все что угодно может быть даже может быть даже как-нибудь вот так
[01:41:30.720 --> 01:41:39.000]  хотя-таки ребра нам не принципиально вот но все ребра взвешенные то есть тут какие-то
[01:41:39.000 --> 01:41:44.320]  чиселки могут быть даже отрицательные числа что самое страшное не то чтобы нам это сильно
[01:41:44.320 --> 01:41:57.000]  принципиально но тем не менее вот вот и наша задача найти минимальный астов что такое вообще
[01:41:57.000 --> 01:42:05.760]  астов в данном случае астов это просто подвешенные за вот эту вершину эр просто абсолютно любое
[01:42:05.760 --> 01:42:15.360]  астовное дерево ну то есть такие n-1 ребер по которым из эр можно дойти до всех вершин но
[01:42:15.360 --> 01:42:22.520]  вот как-то так это примерно и будет выглядеть ну например вот так вот какой-нибудь вот такой
[01:42:22.520 --> 01:42:38.760]  типичный астов ну и наша задача конечно же найти астов минимального веса так ну вот
[01:42:38.760 --> 01:42:48.280]  спрашивается как же это сделать как же найти астов минимального веса ну для начала хотя бы
[01:42:48.280 --> 01:42:55.480]  за какую-нибудь датику да леммочек на этот раз у нас к сожалению не будет но будет вместо этого
[01:42:55.480 --> 01:43:03.360]  мелкое соображение мы заметим что в каждую вершину да начнем с простого давайте убьем
[01:43:03.360 --> 01:43:11.960]  отрицательные ребра заметим что можно убить отрицательные ребра простым естественным
[01:43:11.960 --> 01:43:19.720]  лайфхаком дело в том что в каждую вершину кроме корня будет входить в любом астове будет
[01:43:19.720 --> 01:43:29.120]  входить ровно одно ребро поэтому если я каждому весу вершины в ходе там ребе ко всем ребрам
[01:43:29.120 --> 01:43:40.800]  входящим в какую-то вершину добавлю допустим 3 то давайте тут плюс 3 и еще тут плюс 3 а было
[01:43:40.800 --> 01:43:52.920]  тут допустим но минус 2 пусть будет пусть было вот где ну тут-то есть мы сейчас про это вершины
[01:43:52.920 --> 01:43:59.760]  мы говорим про все ребра которые входят вот в эту вершину вот им прибавили 3 я утверждаю что
[01:43:59.760 --> 01:44:07.680]  минимальные астовы от этого не поменялись да потому что это же следующее что у всех всех всех
[01:44:07.680 --> 01:44:15.000]  астовов теперь вес увеличился на 3 поэтому кто из них минимальный кто максимальный не поменялся
[01:44:15.000 --> 01:44:22.960]  да здесь все предельно просто и мы можем заметить что прибежавшие за в плюсе я могу в общем-то
[01:44:22.960 --> 01:44:32.120]  полечить этот вопрос для всех вершин более того я даже могу еще обнаглеть я ж могу не только
[01:44:32.120 --> 01:44:38.360]  прибавлять эти ветвица но если они оказались слишком большие еще и повычитать я могу добиться
[01:44:38.360 --> 01:44:44.040]  того чтобы в каждую вершину в каждой вершины минимальные ребра которые в нее входила имела
[01:44:44.040 --> 01:44:59.880]  вес 0 могу такое сделать да вот сделаю я такое за в плюсе и тогда у меня можно и тогда еще за
[01:44:59.880 --> 01:45:06.680]  в плюсе можно проверить просто сразу голубую мечту идиота а нельзя ли случайно на нулевых
[01:45:06.680 --> 01:45:19.800]  ребрах построить астов вот просто нельзя ли дфс от дойти до всего если повезет то удастся
[01:45:19.800 --> 01:45:27.960]  и в этом случае тогда надо просто сказать что это минус 100 мы победили но что делать если нам
[01:45:27.960 --> 01:45:43.400]  не повезло говорят нам два китайца а почему они нам это говорят так кстати а что знает так
[01:45:43.400 --> 01:45:51.280]  а кто кстати знает что говорят эти два китайца так что прямой вот кто знает алгоритм двух китайцев
[01:45:51.280 --> 01:46:00.640]  да да да а кто знает как зовут этих китайцев я не знаю там нет в программе экзаменов там
[01:46:00.640 --> 01:46:07.920]  написано что-то но я не помню там помоги одного зовут литвен хонг по моему а другого как-то еще
[01:46:07.920 --> 01:46:19.040]  вот правильно да для китайцев да смотреть первые те которые возникают и так мы тут
[01:46:19.040 --> 01:46:23.600]  что-то пошаманили допустим значит мы сейчас знаем пока имели что у нас все ребра не отрицательные
[01:46:23.600 --> 01:46:30.520]  поэтому я говорю следующее смотрите допустим у меня неожиданно образовалось ребро который
[01:46:30.520 --> 01:46:41.360]  идет из корня куда-нибудь веса 0 утверждение я прямо сейчас должен его добавить в астов
[01:46:41.360 --> 01:46:50.200]  но точнее не то чтобы должен там бывают я не могу гарантировать то есть тут надо быть как
[01:46:50.200 --> 01:46:55.800]  всегда аккуратно я не могу гарантировать что это ребро лежит во всех минимальных астовах это
[01:46:55.800 --> 01:47:00.400]  конечно может быть неправда потому что тут мало ли какие тут нулевые рюм вот тут какая цепочка
[01:47:00.400 --> 01:47:09.280]  нулевых рюм да но точное утверждение звучит так существует минимальный астов с этим ребром
[01:47:09.280 --> 01:47:20.600]  доказательства предельно просто то есть допустим рассмотрим минимальные астов которые
[01:47:20.600 --> 01:47:28.160]  не содержат это ребро вот ну как-то вот так вот тогда идея такая в эту вершину какое-то
[01:47:28.160 --> 01:47:35.360]  ребро входит и оно больше либо внуля но теперь аккуратно заметим что мы можем да на этой вершине
[01:47:35.360 --> 01:47:40.640]  даже еще и какой там под дерево висит но тут вот тут нужна аккуратность да то есть видите
[01:47:40.640 --> 01:47:46.240]  аккуратно видно что так у нас ребро из корня то мы можем убить это ребро и добавить вот это
[01:47:46.240 --> 01:47:55.480]  ребро в астов и астов главное останется астовом и главное хуже не станет так что получается такое
[01:47:55.480 --> 01:48:01.360]  у нас появилось первое шагное соображение если появилось такое есть такое ребро просто быстро
[01:48:01.360 --> 01:48:10.800]  добавляем в астов можем мысленно пока мысленно даже эти две вершины теперь сжать в одну ну потому
[01:48:10.800 --> 01:48:17.720]  что это ребро у нас уже все нужно у нас навсегда но теперь мы можем повторить эту операцию причем
[01:48:17.720 --> 01:48:22.640]  повторить эту операцию можем не только с ребром торчащим именно из эра но и из этой вершины
[01:48:22.640 --> 01:48:30.920]  выводит нас к это следующим вот мы запускали dfs то думали куда мы можем из эра дойти по ну
[01:48:30.920 --> 01:48:43.640]  левым рёбрам ну левым рёбрам вот так вот как то красиво радостно красиво и радостно
[01:48:43.640 --> 01:48:57.040]  вот тогда отрижайте нам возможно мы дойдем не до всего такое вполне возможно но по камере
[01:48:57.040 --> 01:49:08.920]  докуда дошли мы точно можем спокойно добавлять в астов и не заморачивать понимаете да хорошо
[01:49:08.920 --> 01:49:26.160]  говорим и да это мы можем теперь добавить в астов им и это сжать в одну ну минимальное ну не
[01:49:26.160 --> 01:49:33.960]  минимальное а нулевое напомню что мы напомним мы добились того чтобы у нас каждый все ребра
[01:49:34.960 --> 01:49:44.000]  но чтобы каждую вершину ходила хотя бы одну нулевую вот это вот это то же самое что рассмотрим
[01:49:44.000 --> 01:49:52.800]  скажешь каждую вершину минимальный ребро который в нее ходит вот что это за нули заметим следующие
[01:49:52.800 --> 01:50:03.120]  шутка как каждую вершину входит 0 то мы вынуждены заключить вот жадным образом ходя ходив
[01:50:04.320 --> 01:50:21.880]  походя походив походю ну вот точно передвигается назад по ребрам ну а реально спасибо мы явно
[01:50:21.880 --> 01:50:31.360]  рано или поздно зациклимся то есть мы нашли вот такой цикл то есть хотя бы хотя бы один
[01:50:31.360 --> 01:50:40.800]  нет просто нет еще хуже у нас есть сколько-то там кавершин в каждую из них ходит ребро причем
[01:50:40.800 --> 01:50:54.880]  не из этих поэтому в таком графе цикл обязательно есть вот на самом деле вытекает неожиданная идея
[01:50:54.880 --> 01:51:11.120]  этот цикл тоже можно сжать в мета вершины в каком смысле а вот в каком ну просто идея у нас
[01:51:11.120 --> 01:51:17.120]  будет такая мы сожмем вот эту вершину вот это в мета вершины и вот это мета вершины у нас
[01:51:17.120 --> 01:51:24.680]  граф получится меньше и мы можем запуститься типа рекурсивно и тогда вот и тогда будет идея
[01:51:24.680 --> 01:51:32.480]  действительно такая что потом когда мы будем разжимать ну понятно что в корне все вот это
[01:51:32.480 --> 01:51:37.600]  разожмется и там ребра ведущие из этой мета вершины превратятся в ребра ведущие откуда-то отсюда и все
[01:51:37.600 --> 01:51:45.960]  хорошо вот что будет происходить вот с этой металлической вершины из вот этого цикла
[01:51:45.960 --> 01:51:57.440]  вот давайте тут 0000 вот и у нас обнаружится какое-то ребро входит когда мы тут построили какие-то
[01:51:57.440 --> 01:52:03.600]  там начинают выходить но мы замечаем что вот это входящий ребро входит в круг из этих четырех вершин
[01:52:03.600 --> 01:52:27.400]  вот такие идеи у нас возникает более того заметим что я тут вместо к циклу мог взять
[01:52:27.400 --> 01:52:33.320]  просто какую-нибудь не тривиальную компонент усиленной связности даже обратите внимание только
[01:52:33.320 --> 01:52:43.000]  но здесь уже только текает вопрос а почему это сработает но проблема в том что вот тут мы это
[01:52:43.000 --> 01:52:49.640]  доказывали просто добавляя по одному ребро аккуратненько а вот здесь на самом деле это не
[01:52:49.640 --> 01:52:57.600]  так очевидно то есть почему вообще вот это сжатие валидно почему обязательно их надо объединять
[01:52:57.600 --> 01:53:15.560]  вот в единое такое нулевое поддельном уж не надо этого делать нет ну не факт подождите в дереве не
[01:53:15.560 --> 01:53:28.120]  факт ну внутри нет что иметь в виду достижим они как же будут да давайте
[01:53:28.120 --> 01:53:47.520]  это ребро это это ребро это как
[01:53:47.520 --> 01:54:12.800]  тут ничего не поделаешь но это не совсем так дело даже не в том что это не оранжево-красный
[01:54:12.800 --> 01:54:25.800]  может быть маленькая подлянка подлянка может заключаться в том нет там как бы
[01:54:25.800 --> 01:54:30.960]  просто аккуратно тут надо быть аккуратно что как бы эти вершины не оказались в этом дереве предками
[01:54:30.960 --> 01:54:42.520]  этой просто это может привести к зациклу вот почему я говорю тут аккуратно потому что очень
[01:54:42.520 --> 01:54:48.280]  хочется сказать что давайте аккуратненько докажем да давайте просто аккуратненько докажем что вот
[01:54:48.280 --> 01:54:54.440]  просто эти серебра можно там что эти ребра можно вставить взамен каких-то и получится просто дерево
[01:54:54.440 --> 01:55:01.280]  не хуже но в чем подлянка теперь будет подлянка будет такая жила была казалось бы вот это первая
[01:55:01.280 --> 01:55:08.960]  вершина вот да у нее тут было входящее да и вот мы тут решили рассмотреть вот это вот ребро с
[01:55:08.960 --> 01:55:20.280]  нулем вот тогда но и мы тут говорим так в эту же вершину наверно кто-то входит да ну так давайте
[01:55:20.280 --> 01:55:28.920]  это ребро убьем а это добавим хуже не стало только теперь начнет вопрос а почему при этом
[01:55:28.920 --> 01:55:38.160]  дерево осталось дерево казалось бы как дерево могло перестать быть деревом простым естественным
[01:55:38.160 --> 01:55:47.120]  образом ну собственно это единственная ситуация когда такое в общем-то возможно примете да
[01:55:47.120 --> 01:56:05.440]  удалилось это другое а тут сюда то есть могло то есть как бы это ребро то есть
[01:56:05.520 --> 01:56:12.640]  могло так оказаться что это ребро ведет из потомков предка в том деле и тогда пора вот то есть
[01:56:12.640 --> 01:56:18.240]  заметим что вот это вот подмену нулевого ребра можно делать только в том случае если на текущий
[01:56:18.240 --> 01:56:26.840]  момент оно не ведет из потомков предка вот если оно ведет из если оно ведет не не в своего предка
[01:56:26.840 --> 01:56:34.640]  то такую замену локально по крайней мере сделать вполне можно почему нет поэтому
[01:56:34.640 --> 01:56:43.240]  вот поэтому теперь нужно привести эти замены аккуратно ну нам в общем-то не нужно доказывать
[01:56:43.240 --> 01:56:49.240]  что нужно привести именно эти ребра нам нужно доказывать что просто хотя бы там то есть что
[01:56:49.240 --> 01:56:53.320]  можно этот цикл сжать вершину то просто доказать что это они образуют связанные дерево
[01:56:53.320 --> 01:57:04.040]  логично вот на самом деле скорее такая то есть как бы рассмотрим наше дерево то есть если прям
[01:57:04.040 --> 01:57:09.000]  вот очень аккуратно да то есть рассмотрим наше дерево дерево дерево дерево и вот эти вот четыре
[01:57:09.000 --> 01:57:18.240]  вершины окажутся где-то под дереву раскиданы тогда у меня возникает естественная идея то есть
[01:57:18.240 --> 01:57:24.440]  да выберем просто из этих четырех вершин там вот этой вот этой вот этой вот этой выберем
[01:57:24.440 --> 01:57:36.240]  просто тупо самую высокую и все и тогда из нее уже тут нулевые ребра можно проводить правда
[01:57:36.240 --> 01:57:43.400]  операцию нужно проводить аккуратно потому что дело в том что там допустим скажем вот тут вот
[01:57:44.400 --> 01:57:49.760]  скажем так после того как вы тут подменили вот это ребро допустим на вот это то есть тут как-то
[01:57:49.760 --> 01:57:56.120]  предки потомки сильно поменялись но правда при этом вот это нулевое ребро вы уже не трогаете вы
[01:57:56.120 --> 01:58:02.000]  как бы можете вы уже сказали что это ребро существует поэтому его как бы жали да и потом после этого
[01:58:02.000 --> 01:58:06.680]  сжатия как бы у вас тут вот допустим какой-то из этих ребер сжалось и вы тут в этом цикле
[01:58:06.680 --> 01:58:15.520]  повторяйте операцию понимаете да в алгоритме этого делать из-за в коде это делать естественно
[01:58:15.520 --> 01:58:23.320]  не надо мы просто доказываем что эту вершину можно сжать и будет все хорошо то есть что мы
[01:58:23.320 --> 01:58:28.600]  доказываем что существует тут надо тоже аккуратно сформулировать да что даже после вот
[01:58:28.600 --> 01:58:34.200]  этой сжатия вот этой мета вершины то есть можно сжать эту вершину то есть существует дерево в
[01:58:34.600 --> 01:58:40.400]  вот эти вершины образуют связанное под дерево на рулевых ребрах что именно после
[01:58:40.400 --> 01:58:52.100]  жабы потому что тот факт что существует такое дерево и существует дерево с этим иishops у
[01:58:52.100 --> 01:59:01.100]  и с этим вот ну просто это мои любимые предъявки на экзамене там какого-нибудь вот сами понимаете
[01:59:01.100 --> 01:59:10.220]  вот вот то есть мы здесь достаточно независима то есть на самом деле к алгоритме это конечно приводит
[01:59:10.220 --> 01:59:17.940]  к достаточно простым вещам потому что мы делаем это то есть теперь говорится так мы делаем
[01:59:17.940 --> 01:59:29.020]  и террации на каждой и террации мы во первых запускаем дфс из эра по нуля по нулевым ребрам и
[01:59:29.020 --> 01:59:36.060]  все вот это сжимаем да если мы уже все обошли то мы победили а если нет то вот таким жадным
[01:59:36.060 --> 01:59:43.340]  образом находим цикл а лучше раз уж все равно мы делаем за линейное время так найдем компоненты
[01:59:43.340 --> 01:59:50.180]  сильной связности прямо жадно найдем компоненты сильной связности и все их сожжем но очевидно что
[01:59:50.180 --> 01:59:59.500]  независимые компоненты можно сжать там аккуратненько убедиться вот значит все это сжали и после этого
[01:59:59.500 --> 02:00:07.100]  ищем минимальный остов рекурсивно и после этого значит потом все это аккуратненько разжимаем вот
[02:00:07.100 --> 02:00:16.300]  по этой технологии то есть это собственно классический алгоритм двух китайцев
[02:00:16.300 --> 02:00:25.020]  то теперь высказывает вопрос за какой чем точку он работает
[02:00:25.020 --> 02:00:36.460]  да да к сожалению лучше чем вы такой конкретно алгоритм в такой интерпретации оценить не
[02:00:36.460 --> 02:00:43.900]  получается почему да просто потому что нам возможно нам на каждой итерации не ведет и
[02:00:43.900 --> 02:00:52.460]  мы схлопываем только один цикл из двух вершин ну ладно может из трех получается вейт ну как бы
[02:00:52.460 --> 02:00:56.940]  каждую итерацию мы конечно делаем за в плюсе в смысле за е потому что я как минимум вы минус
[02:00:56.940 --> 02:01:08.580]  один вот поэтому отсюда и получается вы и вот но оказывается есть и вот но оказывается
[02:01:08.580 --> 02:01:16.820]  действительно можно попытаться что-нибудь и более продвинутая спрашивается что же тут можно
[02:01:16.820 --> 02:01:27.300]  сделать более продвинутого но оказывается да идея на самом деле оказывается такой да оказывается
[02:01:27.300 --> 02:01:35.380]  нам то есть но то есть оказывается неожиданность такая ну а первых заметим что на каждом шаге
[02:01:35.380 --> 02:01:41.060]  прям заниматься тем что за в плюсе там добиваться того что у нас серебра не отрицательные и там
[02:01:41.500 --> 02:01:47.460]  и каждую векшину хоть нулевую габароном не обязательно что я для этого потому что на самом деле
[02:01:47.460 --> 02:01:54.580]  каждой же мы просто можем сказать что назовем ребра там просто там назовем грибра хорошим если
[02:01:54.580 --> 02:02:05.980]  она сейчас минимальное более-то в ближе и но вот правда и нам вот тогда что у нас происходит тогда
[02:02:05.980 --> 02:02:10.260]  когда на самом деле может просто сказать то есть можно вот так делать а можно просто сказать что
[02:02:10.480 --> 02:02:14.100]  заметим то есть можно алгоритм делать чуть-чуть по-другому
[02:02:15.240 --> 02:02:19.620]  не так вот глобально по нулевым ребрам компоненты сильной связности Principal
[02:02:20.940 --> 02:02:22.840]  все будет еще проще
[02:02:22.840 --> 02:02:29.440]  то есть давайте возьмем первую Say specifically
[02:02:29.520 --> 02:02:31.620]  просто минимальная входящие в нее ребра
[02:02:31.620 --> 02:02:40.220]  не более, но теперь смотрите какая идея то есть на самом деле можно интерпретировать это так
[02:02:40.220 --> 02:02:49.820]  значит потом мы значит из этой вершины значит тоже в нем находим тоже берем минимальное ребро
[02:02:49.820 --> 02:02:59.900]  значит идем идем идем идем и рано или поздно произойдет одно из двух событий первое либо
[02:02:59.900 --> 02:03:07.780]  мы неожиданно придем в корень и тогда это означает что все вот эти ребра можно спокойно
[02:03:07.780 --> 02:03:17.820]  добавить во 100 и просто вот это вот все схлопнуть понимаете да то есть сломнуть в единую вершину и
[02:03:17.820 --> 02:03:25.940]  больше не рассматривать вот ну хотя отдельная песня а что такое схлопнуть мы же не хотим
[02:03:26.540 --> 02:03:34.900]  плюс все все слопать но с другой стороны да но как бы снм то у нас никто не отменял например да
[02:03:34.900 --> 02:03:40.740]  как как слопать вершины можно с помощью сломать сломать ну можно с помощью но желать то конечно
[02:03:40.740 --> 02:03:45.940]  какой-нибудь откатываемый сэмм делать конечно чтобы потом разжимать удобно хотя при этом в
[02:03:45.940 --> 02:03:49.540]  данном случае это не обязательно потому что мы уже записали что вот эти ребра идут в ответ
[02:03:49.540 --> 02:03:55.740]  ну маленький технический нюанс понятно что ребра у вас конечно меняются потому что раньше
[02:03:55.740 --> 02:04:01.060]  ребра шло из пятерки в семерку теперь оно шло там из девятнадцати в двадцать три потому что
[02:04:01.060 --> 02:04:06.180]  пятерки семерков такие мета вершины попали допустим да но как бы и самая простая вещь
[02:04:06.180 --> 02:04:13.700]  данном случае это просто каждому ребру прицепить на прикладе идейшки мой записываем что у нас там
[02:04:13.700 --> 02:04:20.420]  восток пойдут ребра там первое второе третье и двадцать мое вот ну и три последних ряда еще вот
[02:04:20.420 --> 02:04:26.500]  ну как бы там ну знаете да вот вы там как олигархи вы исходно мансийска галстуки
[02:04:26.500 --> 02:04:32.580]  покупают вот так же вот этот этот этот три последних ряда вот вот есть то же самое вот
[02:04:32.580 --> 02:04:41.020]  значит смотрите что нас будет дальше хорошо с этими ребрами взорвались высотом мета вершину
[02:04:41.020 --> 02:04:47.980]  создали берем следующую вершину да это теперь как невая поэтому значит берем следующую вершину
[02:04:47.980 --> 02:04:55.300]  и делаем то же самое идем идем идем и возможно она в нашу мета вершину и пришла но ничего
[02:04:55.300 --> 02:05:08.020]  при схлопнем ничего страшно вот но в какой-то момент значит тут идем идем идем идем идем
[02:05:08.020 --> 02:05:30.180]  идем пришли и такое бывает вот спрашивается что в таком случае делать тогда заметим
[02:05:30.180 --> 02:05:40.620]  что логично схлопнуть это все в единую вершину вот значит сломать единую вершину и пойти из
[02:05:40.620 --> 02:05:48.020]  нее дальше единственное только мелкая оговорка когда вы схлопываете вершины надо научиться
[02:05:48.020 --> 02:05:58.220]  искать из них минимальные ребра вот как же их искать если на каждом шаге прям то есть в данном
[02:05:58.940 --> 02:06:04.540]  что ну как сказать минимальные ребра вот они тут схлопнулись то есть придется что-то
[02:06:04.540 --> 02:06:11.140]  придется что-то выпить вот придется как то вот выкинуть то есть нам нужна какая то
[02:06:11.140 --> 02:06:15.860]  есть оказывается нужна какаяencial структура данных который умеет по этом во первых по верше не
[02:06:15.860 --> 02:06:22.380]  находить минимальные ребра в ahhmeет как-то во-первых во-вторых умеет как-то объединить
[02:06:22.380 --> 02:06:28.140]  какие-то два множества и в третьем еще и какие-то ребра если я оказалась что мы 1947
[02:06:28.140 --> 02:06:35.820]  еще и удалять да вот да у нас самое простое что у нас для этого есть от
[02:06:35.820 --> 02:06:41.660]  сливаемой кучи вот да кто-то там конечно может написать там переливайку
[02:06:41.660 --> 02:06:49.580]  какой-нибудь но переливайка не надо переливайка это лог квадрат нам лог
[02:06:49.580 --> 02:06:55.300]  квадрат не нужен у нас есть сливаемая куча которые все это делают за логарифом
[02:06:55.300 --> 02:07:00.420]  вот то есть оказывается действительно давайте для каждой
[02:07:00.420 --> 02:07:06.300]  вершины все входящие в нейоробрах они в сливаемой куче по компаратору веса и
[02:07:06.300 --> 02:07:11.020]  тогда у нас действительно на каждом шаге мы из вершины просто берем находим
[02:07:11.020 --> 02:07:15.740]  должны найти просто минимальное ребро то есть просто стоим минимальное ребро
[02:07:15.740 --> 02:07:19.300]  если оно ведет стужи мета вершину как мы по СНМ узнали то мы это ребро
[02:07:19.300 --> 02:07:29.700]  выкидываем соответственно выкидываем и собственно повторяем нот и дальше там
[02:07:29.700 --> 02:07:33.580]  соответственно идем но правда здесь конечно есть мелкая оговорка оговорка
[02:07:33.580 --> 02:07:38.100]  будет заключаться в том что вам потом этот цикл придется конечно как-то раз
[02:07:38.100 --> 02:07:48.740]  сжать вот такая вот то есть такая на самом деле мелкая проблема возникнет вот
[02:07:48.740 --> 02:07:57.140]  значит но это собственно не особая проблема потому что когда вот ну то есть
[02:07:57.140 --> 02:08:03.300]  технически это решается просто потому что то есть потому что в будущем когда
[02:08:03.300 --> 02:08:06.300]  вы будете разжимать вершины у вас просто у вас уже будет дерево в которую будет
[02:08:06.300 --> 02:08:10.140]  сходящее ребро поэтому вы собственно просто из этого цикла будете знать там
[02:08:10.140 --> 02:08:16.540]  начиная с начиная с какого момента ребра вообще брать или что то же самое
[02:08:16.540 --> 02:08:24.660]  какое из этих ребер выкинуть даже этого достаточно вот то есть тут тогда то есть
[02:08:24.660 --> 02:08:27.540]  это будет конечно да не немного неприятно может быть технически
[02:08:27.540 --> 02:08:30.900]  реализовывать но ничего страшного на самом деле в этом не будет так потому
[02:08:30.900 --> 02:08:34.380]  что подлянка конечно будет потому что за циклов тут будет сколько угодно
[02:08:35.060 --> 02:08:41.800]  будет например еще за цикл какой-нибудь да вот мы тут там скажем вот еще зациклились вот
[02:08:41.800 --> 02:08:48.140]  потом мы тут пошли пошли пошли пошли еще и вообще и прям вот сюда н formed и
[02:08:48.140 --> 02:08:56.620]  прям сюда неожиданно пришли вот потом бабаха еще даток вот подлянка в этом плане
[02:08:56.620 --> 02:09:00.820]  да тут тут тут вообще вот так вот глобально да то есть на самом деле у
[02:09:00.820 --> 02:09:06.100]  вас тут целая иерархия на самом деле появится но ничего страшного потому что
[02:09:06.100 --> 02:09:10.540]  если вы потому что смотрите я вы же для каждой компоненты у вас тут компонент
[02:09:10.540 --> 02:09:14.260]  очевидно не более чем 2 и минус 1 получится и для каждой компоненты вы
[02:09:14.260 --> 02:09:17.780]  можете прям в явном визе виде вектор и векторов там просто выписывать а из
[02:09:17.780 --> 02:09:22.740]  каких компонент вы их вообще взяли из каких компонент а самое главное из
[02:09:22.740 --> 02:09:28.260]  каких ребер по идишникам правда поэтому на самом деле то есть когда вы будете
[02:09:28.260 --> 02:09:32.660]  распаковывать какую-то компоненту но там просто в обратном порядке вы будете
[02:09:32.660 --> 02:09:36.860]  распаковывать вы для меня будете знать какой входящий в него либо будет
[02:09:36.860 --> 02:09:41.100]  собственно будет находиться и после этого собственно все эти там ребры из
[02:09:41.100 --> 02:09:49.860]  цикла брать но потом уже распаковывать сами по себе компоненты вот так же вот
[02:09:49.860 --> 02:09:53.860]  ну да то есть особенно если для каждой компоненты хранить в явном виде какое
[02:09:53.860 --> 02:09:58.060]  ребро в нее входит, а вы это, параллельно, господи, что получается вообще, что-то на
[02:09:58.060 --> 02:10:02.780]  скидку получается не сильно сложная реализация, причем более того работает она
[02:10:02.780 --> 02:10:11.460]  уже за сильно более удобоваримую асимптотику E log V получается. Почему E log V?
[02:10:11.460 --> 02:10:28.860]  Да, действительно, действительно. Хотя здесь, здесь начинается применять стандартный
[02:10:28.860 --> 02:10:40.060]  лайфхак. Не, ну не в смысле там это зачеркнуть и переписать, конечно, да. А идея простая. На самом деле я
[02:10:40.540 --> 02:10:46.820]  не только не меньше, чем V-1, но и не больше, чем V квадрат. Почему? Потому что, в принципе,
[02:10:46.820 --> 02:10:56.020]  ничем не мешает, потратив внимание Z plus V времени, избавиться от кратных ребер. Да,
[02:10:56.020 --> 02:11:00.300]  но напомню, да, классическая идея заключается в том, что мы ребра можем отсортировать по вершинам,
[02:11:00.300 --> 02:11:06.420]  причем за линейное время. Ну, честным подсчетом отсортировать сначала там по первой вершине,
[02:11:06.420 --> 02:11:12.380]  при равных первых по второму. Ну, будет просто аналог цифровой сортировки, правда? Вот. И тогда,
[02:11:12.380 --> 02:11:17.460]  после того, как выход сортировки, у вас в списке все кратные ребра будут идти подряд, и вы с чистой
[02:11:17.460 --> 02:11:23.780]  совесть можете оставить из них перебросы минимальным. Вот. Поэтому, то есть, на самом деле,
[02:11:23.780 --> 02:11:32.580]  да, Z log V, но которая спокойно упиливается до Z log V. Вот. То есть, просто ликвидации. Ну,
[02:11:32.580 --> 02:11:38.660]  просто ликвидации, да. Вот. То есть, вот получается еще один, ну, вот один такой,
[02:11:38.660 --> 02:11:44.420]  тоже красивый алгоритм. Да. То есть, к сожалению, мы тут, видимо, не будем копать вообще, а они
[02:11:44.420 --> 02:11:59.460]  нельзя ли еще быстрее. Ведь, наверное, можно, наверное, человечество придумало. Нет, там. Ну,
[02:11:59.460 --> 02:12:04.300]  и чем он поможет? Лог В поделит. А, ну ладно, он лог В в данном случае поделит на лог лог В. И что?
[02:12:04.300 --> 02:12:10.540]  Такой алгоритм, да. Хорошо. Кроме, что лог В делит на лог лог В, ну, может, ну, вот,
[02:12:10.540 --> 02:12:15.460]  вот, на всякий вопрос, не могут ли тут и тут прийти фареды-гутарьяны и сказать, что надо просто
[02:12:15.460 --> 02:12:27.020]  это буду делать, и будет ха-ха-ха. Ну, тут можно думать, потому что там везде можно, на самом деле,
[02:12:27.020 --> 02:12:42.220]  раскапывать. Вот, что, уже нагуглили что-то. Е плюс В лог В. Нет, Е плюс В лог В это, нет, Е плюс В лог В начинаю
[02:12:42.220 --> 02:12:51.020]  думать, а не пихнуть ли нам кучу фибоначи. Так, стоп. Так, хорошо. Погодите, а я действительно,
[02:12:51.020 --> 02:12:59.500]  ну, правда, прям четыре умные фамилии на кучу фибоначи. Нет, ну, давайте подумать, да, давайте,
[02:12:59.500 --> 02:13:11.020]  если это будет еще и куча фибоначи. Так, чем это нам поможет? Ну, на самом деле, тут проблема,
[02:13:11.020 --> 02:13:17.020]  сильно нам это не поможет. Почему? Может, так, к сожалению, экстракт минов у нас будет все еще Е.
[02:13:17.020 --> 02:13:24.420]  Почему? Потому что нам придется подоставить, потому что вполне вероятно, что нам придется
[02:13:24.420 --> 02:13:31.780]  подоставать еще кучу ребер, на самом деле, кучу ребер, прежде чем мы найдем, действительно,
[02:13:31.780 --> 02:13:39.300]  ребро, которое из этой компоненты куда-то ведет. Такая техническая проблема есть. К сожалению,
[02:13:39.300 --> 02:13:44.100]  доставание из кучи фибоначи у нас, все-таки, быстрее, чем с логарифом не работает. Поэтому,
[02:13:44.100 --> 02:13:51.980]  конечно, видимо, чтобы адекватно ее использовать, видимо, нам придется подумать. Да, потому что,
[02:13:51.980 --> 02:13:59.700]  в конце концов, четыре автора просто так на это набросились, очевидно. Да, еще и пять. А там
[02:13:59.700 --> 02:14:10.940]  еще и Тарьян пришел, да, сверху. Ну, мало ли. Нет, ну, тут, да, действительно, надо допиливать,
[02:14:10.940 --> 02:14:18.500]  вообще, слушайте, хорошая идея. Нет, на самом деле, вот этих вот мелочей, на самом деле,
[02:14:18.500 --> 02:14:23.940]  как вот как-то допилить, это, на самом деле, можно изучать достаточно долго. Потому что,
[02:14:23.940 --> 02:14:28.940]  вот если переходить к следующей теме, да, по этой теме пока тут, есть какие-то вопросы по этой
[02:14:28.940 --> 02:14:57.020]  теме. Нет. Нет, а я пришел, это лучший алгоритм. Ух ты. Ой, классно. Ну да,
[02:14:57.020 --> 02:15:03.340]  погоди, погоди, погоди. Но дело в том, что когда тебе все равно из кучи придется удалять
[02:15:03.340 --> 02:15:12.980]  ребро, потому что тебе ж эти списки слить придется. Нет, смотри, в каждой вершине это размер V,
[02:15:12.980 --> 02:15:19.380]  отсортировать их можно, но просто, а вот в мета-вершине это уже проблема. То есть там надо
[02:15:19.380 --> 02:15:24.380]  либо в этой вершине действить, там просто как бы, как бы мы не дошли до, ну, я не знаю,
[02:15:24.500 --> 02:15:32.140]  насколько читикской будет использовать хэшмапчики. Нет, ну, в принципе, есть такой чит,
[02:15:32.140 --> 02:15:37.900]  потому что никто нам не мешает здесь использовать какие-нибудь сливаемые хэшмапчики. Ну, сливаем,
[02:15:37.900 --> 02:15:43.340]  ну, в смысле, хэшмапчики, короче. Ну, это для того, чтобы избавляться от кратных ребер. Ну,
[02:15:43.340 --> 02:15:47.140]  правда, вы от них избавитесь, а потом вам все равно их придется сортировать. Это как бы вам не
[02:15:47.140 --> 02:15:57.260]  поможет. Хотя, нет, хотя нет, хотя да. Нет, ну, просто да, это получится, вы будете V лог V тратить
[02:15:57.260 --> 02:16:03.780]  на сортировку, делать вы это будете там где-то там 2V раз, получается V квадрат лог V. Нет, в общем,
[02:16:03.780 --> 02:16:07.780]  ладно, там давайте не, ладно, есть подозрение, что вряд ли мы сейчас с вами окажемся за 5 минут,
[02:16:07.780 --> 02:16:13.180]  у меня там, собственно, где-то, типа, там пяти очень умных авторов. Ну, как очень
[02:16:13.180 --> 02:16:16.500]  удобно, потому что, по крайней мере, эти фамилии там фигурируют, собственно, не только здесь,
[02:16:16.500 --> 02:16:23.500]  потому что, скажем, главное, вообще фигурирует еще в одном месте, которое, которое тут нам,
[02:16:23.500 --> 02:16:27.980]  на самом деле, сейчас тоже может оказаться полезным. Ну, как-то сейчас, в общем-то, не очень,
[02:16:27.980 --> 02:16:33.500]  потому что если говорить о динамике инвективити оффлайн. Так, а кто знает, как у нас писать
[02:16:33.500 --> 02:16:42.340]  динамик инвективити оффлайн за корень? Нет, так, давайте так, об чем вообще задача? Так, ну,
[02:16:42.340 --> 02:16:48.100]  задача такая, дан неориентированный крафт изначально допустит, надо отвечать на 3 типа
[02:16:48.100 --> 02:16:52.460]  запроса. Первый тип запроса добавить ребро, второй удалить ребро, третий, скажи, пожалуйста,
[02:16:52.460 --> 02:16:58.180]  вот эти две решения в одной компанице связаны с телевизором. Так, вот, внимание, вопрос,
[02:16:58.180 --> 02:17:04.420]  кто умеет это, значит, мы будем решать это в оффлайне? Все запросы даны, надо заканчивать
[02:17:04.420 --> 02:17:09.700]  удопомогимое, всем против, у нас на запросы ответить. Правовается, кто умеет решать
[02:17:09.700 --> 02:17:20.020]  динамик инвективити оффлайн за корень? Ну, допустим, корни из В, или там корни из Q.
[02:17:20.020 --> 02:17:45.300]  Ну, вот, нет, что так. Так, сейчас дойдем, лог-лог. Нахер смотрите. Так, мои, значит,
[02:17:45.300 --> 02:18:08.620]  кто умеет? А кто умеет залог? Вот. А Копелевики умеет? Вот. А теперь будем пить им мы. Ну,
[02:18:08.620 --> 02:18:12.460]  вдольный. Ну, в первую очередь, что он тут умеет, он умеет, говори, в параллельно,
[02:18:12.460 --> 02:18:17.500]  добавить ребра, удалить, там, добавить ребра, удалить ребра и говорить, сколько в графе мостов.
[02:18:17.500 --> 02:18:24.340]  Да ладно, сейчас мы это тоже будем уметь. Ну, там диплом просто небольшой, там 20 проничек,
[02:18:24.340 --> 02:18:32.380]  в общем-то, поэтому, это грех не суметь. Да, это, да, у нас официальная отсылка на литературу такая
[02:18:32.380 --> 02:18:38.060]  будет. Да, дипломная работа Сергея Копелевич. Научный, да, как это, научный руководитель А.С.
[02:18:38.060 --> 02:18:45.380]  Лопатин, рецензент А.С. Танкевич и так далее. Ну, и там, и кто-то допущен к защите там завкафедры,
[02:18:45.380 --> 02:18:54.180]  вот его фамилию я уже не помню. Вот, ну, можете гуглануть. Да, пожалуйста. Нет, кстати, самый простой
[02:18:54.180 --> 02:18:58.460]  способ, на самом деле, найти дипломную работу, один из самых простых, это загуглить следующее.
[02:18:58.460 --> 02:19:18.340]  Чего? Адамант? А что? Ну, Адамант. Ну, что? Ну, фирма такая в Питере есть, там это, а еще
[02:19:18.340 --> 02:19:29.060]  керлинг-клуб там такой есть, там сборная России тренируется, ничего. Ну, вот. Ну, вот. Ну,
[02:19:29.060 --> 02:19:36.700]  а еще это там, ну, а еще это ваши старшие товарищи. По имени Александр Кульков, да. Нет, просто это
[02:19:36.700 --> 02:19:40.140]  очень удобно, потому что если погуглить, там появится пост на Кодфорсе от него, где там есть
[02:19:40.140 --> 02:19:45.980]  какое-то описание от него, ну, у него есть просто прямая ссылка на этот диплом. Вот. Вот, тоже можно
[02:19:45.980 --> 02:19:58.580]  подсчитать. Вот. Вот, конечно, тоже. То есть, честно, да, допустим, я тебе не могу сказать, что он там
[02:19:58.580 --> 02:20:11.980]  идеальный, но вот, в принципе, премьер-клепяник, я думаю, поймет. Так, ну, начнем, ладно, давайте начнем,
[02:20:11.980 --> 02:20:22.620]  разминку. Куко-корнейство не получится, но куко-корнейство гарантировать могу. Потому что, в принципе,
[02:20:22.620 --> 02:20:32.100]  динамик конвективити у нас может решаться по запросу просто идея такая давайте разобьем
[02:20:32.100 --> 02:20:44.860]  наши запросы на блоке по ну например корень нот по коренеску вот по коренеску запрос то есть
[02:20:44.860 --> 02:20:54.060]  получится у нас уделить на корень низку или даже ладно давайте простоты зафиксируем как
[02:20:54.060 --> 02:21:01.300]  оторвать выберем больше давайте будем обрабатывать гроза просто группками пока
[02:21:01.300 --> 02:21:11.140]  но идея такая ближайшие ка запросов они будут касаться не более чем ка логично
[02:21:11.140 --> 02:21:20.940]  поэтому дейта давайте временно удалим эти ка ребер из графа вообще даже если они тут
[02:21:20.940 --> 02:21:28.180]  были но все остальные рёбра соответственно они либо полностью в этом блоке будут либо полностью
[02:21:28.180 --> 02:21:36.380]  не будут поэтому давайте запут потратим в плюсе времени ну ладно но вот давайте там и потратим
[02:21:36.460 --> 02:21:41.940]  в плюсе временно это реально в плюсе потому что связать графа никто не обещал и соответственно
[02:21:41.940 --> 02:21:47.580]  сожмем этот граф в компоненты связности в каком плане потому что заметим что запросы будут
[02:21:47.580 --> 02:21:55.340]  касаться не более чем заданных 2 к вершин ровно как и ребра правда поэтому в принципе можно то
[02:21:55.340 --> 02:22:01.860]  есть на самом деле все остальные то есть на самом деле все остальные все остальные рёбра и вершины
[02:22:01.860 --> 02:22:07.980]  более чем там 2 к интересующих нас компонент связности чин надо просто жать компоненты
[02:22:07.980 --> 02:22:14.180]  связности оставить из них не более чем пока те кто нас вообще интересует после этого мы
[02:22:14.180 --> 02:22:19.420]  честно проходимся по запросам если надо удалить ребра удаляем если надо добавлять добавляем если
[02:22:19.420 --> 02:22:26.220]  надо проверить лежат ли вершины в одной компоненте связности запускаем dfs в чем
[02:22:26.220 --> 02:22:33.580]  dfs будет работать за от как потому что к вершины карьеру в результате получается в плюсе плюс
[02:22:33.580 --> 02:22:48.820]  что такое значит еще раз на хигевуха начинать запросы добавить там вот прям честные запросы
[02:22:48.820 --> 02:22:53.860]  запроса запроса просто просто добавить удалить проверить проверить проверить проверить мы делим
[02:22:53.860 --> 02:23:03.660]  на блоке по к вот пока запрос мы хотим обработать этот блок напоминаем мы живем
[02:23:03.660 --> 02:23:14.500]  обрабатывать будем во первых заметим что все эти запросы во первых они коснуться не более чем
[02:23:14.500 --> 02:23:22.980]  коробер а во вторых не более чем 2 к вершин поэтому идея такая давайте выкинем временно все
[02:23:22.980 --> 02:23:30.380]  ребра которые задействованы в этих запросах а все остальные сожмем в компоненты связанности из
[02:23:30.380 --> 02:23:35.620]  этих компонент связанности мы рассматриваем только те не более чем 2 к компонент которые
[02:23:35.620 --> 02:23:44.300]  касаются вершин и так у нас сейчас есть два не более чем два к вершин и не более но после
[02:23:44.300 --> 02:23:48.820]  этого да добавим да там после этого надо не забыть добавить те ребра которые мы здесь
[02:23:48.980 --> 02:23:56.500]  удалили а зря на который на этот момент еще существует что мы после этого делать тогда
[02:23:56.500 --> 02:24:01.700]  после этого мы честно проходимся по этим к запросам и честно добавляем и удаляем
[02:24:01.700 --> 02:24:13.780]  ребра а если но вот но вот а если нам соответственно приходит какой-то запрос то есть приходит запрос
[02:24:13.780 --> 02:24:20.100]  проверить ли две вершины лежат и в одной компоненте мы тупо запускаем dfs ну ладно я
[02:24:20.100 --> 02:24:36.460]  набрал как квадрат конечно вот ну и равно это получается ку к плюс ку на вот ка плюс там в
[02:24:36.460 --> 02:24:46.180]  плюс е делить на ка и на самом деле получается от ку корней из в плюс е на самом деле при ка
[02:24:46.180 --> 02:25:07.460]  равно корень из в плюс е очевидно но можно решить и вот не могу сказать что это будет
[02:25:08.460 --> 02:25:27.600]  но тем не менее классическая ситуация что вы написали корнем уху доказали что это не корень
[02:25:27.600 --> 02:25:36.800]  лог а именно корень написали но она работает 12 секунд от 4 авторские авторы разводят руками
[02:25:36.800 --> 02:25:44.460]  говорят извините у нас было решение целого квадрат который работает полторы типичная
[02:25:44.460 --> 02:25:52.600]  ситуация подобного рода задачи вы конечно не знаете какой-нибудь другой технологии параллельно
[02:25:53.200 --> 02:25:58.920]  но его мы тоже можем заодно обсудить так а кто когда-нибудь встречался с параллельным
[02:25:58.920 --> 02:26:17.800]  бен поиском так кто свидетель я а что случилось что да с параллельным бен поиском сталкивай
[02:26:17.800 --> 02:26:35.800]  все а ну тоже примерно те вот это ну да а вот какие-нибудь сливаемые так никто не
[02:26:35.800 --> 02:26:42.120]  да в диване вопрос какие алгоритмы используется в элипиадах ну ничего
[02:26:42.120 --> 02:26:51.320]  поэтому действительно давайте разбираться и так откуда же
[02:26:51.320 --> 02:27:09.720]  а или его все знают нету вообще все
[02:27:09.720 --> 02:27:21.680]  перминт 3 биц нет но это которая мастер но хотя бы базовая версия которая мастер но
[02:27:21.680 --> 02:27:41.680]  делает например ну как всем ну что такое всем нужно да потому что как бы тем
[02:27:41.680 --> 02:27:54.520]  но с другой стороны это касается уже всех предметов какой из них пригодится вопрос
[02:27:54.520 --> 02:28:11.720]  если ей заниматься не дать им до сколько людей заниматься культурой не не но скажи так
[02:28:11.720 --> 02:28:24.120]  перенадриваться тоже не надо но есть на 7 на 7 пожалуй ну тут смотря какой то есть
[02:28:24.120 --> 02:28:28.240]  перия там переубиваться это физкультура конечно не надо обычно там классическая
[02:28:28.240 --> 02:28:32.600]  рекомендация обычно там говорят что там ходить если будете там ходить хотя бы там день 10 тысяч
[02:28:32.600 --> 02:28:36.560]  шагов то в принципе нормально тем более что в какие-то дни естественно если занимаетесь
[02:28:36.560 --> 02:28:41.000]  какой-то там другой то там волейбол там играете плавание там какой-нибудь в принципе это тоже
[02:28:41.000 --> 02:28:55.800]  пойдет то есть совмещать это с десятью тысячами не но это то что поделать так
[02:28:55.800 --> 02:29:06.600]  в следующий раз будем изучать сермины трибис по китайским статьям литература будет вот это
[02:29:06.600 --> 02:29:16.260]  китайский что тут пошли какие-то разговоры про вот эти вот вещи мы удивляемся что это
[02:29:16.260 --> 02:29:22.600]  так популярно что у нас китая как-то все это уже давно давно на завтра кушают но я тут поэтому
[02:29:22.600 --> 02:29:29.360]  тут составил статью шума там составил статью шумов китайная поэтому все буду ну вот и там
[02:29:29.360 --> 02:29:39.000]  перечисление такому задачу как минимум 15 все стоит что-то такое ладно беремся к динамикой
[02:29:39.000 --> 02:29:47.520]  connectivity offline хотя бы беремся к динамикой connectivity offline предлагается совершенно неожиданно
[02:29:47.520 --> 02:29:51.880]  раз уж у нас все запросы есть а давайте-ка на этих запросах запросы выигрываем на
[02:29:51.880 --> 02:30:04.680]  100 градусов я имею ввиду просто я нарисую вот так вот я больше
[02:30:04.680 --> 02:30:09.120]  и нарисуем на них дерево отрезков
[02:30:09.120 --> 02:30:32.840]  так вот что раз вы есть как у запросов давайте вот это дерево отрезков
[02:31:02.840 --> 02:31:16.880]  такие вещи неожиданно но на самом деле в каждой вершине мы храним все ребра которые существуют
[02:31:16.880 --> 02:31:25.680]  на протяжении всего соответствующего момента для каждого ребра существует так называемое время
[02:31:25.680 --> 02:31:40.280]  жизни у каждого ребра есть как бы дата рождения и дата смерти а любой отрезок жизни может разбить
[02:31:40.280 --> 02:31:54.480]  на логарифом отрезочков деревья вот так вот у меня выскакивает идея такая допустим у меня отрезок
[02:31:54.480 --> 02:32:05.440]  живет ну я не знаю допустим вот допустим вот он появился а вот допустим вот ну допустим вот
[02:32:05.440 --> 02:32:13.480]  в этом месте он там вот в этом месте комте он убился тогда я просто добавляю это ребро вот
[02:32:13.480 --> 02:32:28.280]  сюда вот сюда вот сюда вот сюда и вот сюда а сюда и добавляю вот именно ребра это важно
[02:32:28.280 --> 02:32:47.040]  вот именно ребра мы храним и тогда эти так а ну а первых заметим что суммарный размер тогда
[02:32:47.040 --> 02:32:58.240]  сумме суммарная количество ребер во всем дереве естественно получается влога так вот так не
[02:32:58.240 --> 02:33:11.440]  попались плацейку конечно у нас же тут кузов вот так вот я теперь идея такая нет у меня теперь
[02:33:11.440 --> 02:33:30.320]  идея такая да потому что у нас понятие как такового ну или если вы считаете что
[02:33:30.320 --> 02:33:36.520]  изначально у вас и ребер было тогда вам придется сказать где плеску на лоб если быть вот ну думаю
[02:33:36.520 --> 02:33:43.800]  тоже поняли шутню значит суть предлагается такая что нам нужно значит зачем мы все это сделали
[02:33:43.800 --> 02:33:52.640]  сделали вот зачем рассмотрим вот этот момент времени допустим вот это я хочу знать а какие
[02:33:52.640 --> 02:34:00.960]  ребра у меня в этот момент времени вообще в графе есть ну допустим не в этот момент времени а
[02:34:00.960 --> 02:34:11.280]  сразу после него какие у меня есть очевидно ровно те что находятся вот в этих вот вершинах
[02:34:11.280 --> 02:34:28.680]  дерева просто это все аккуратно вот а как у нас объединить какие наши структуры данных
[02:34:28.680 --> 02:34:51.080]  которые умеют хорошо объединять ребра но это самое смешное нет просто с линкатом уже
[02:34:51.080 --> 02:34:59.320]  может зайти нет просто смотрите просто оказалось бы это нет просто какая тут просто идея
[02:34:59.320 --> 02:35:04.560]  возникает а пока без линката может и зайти и садить просто действительно то есть по идее если
[02:35:04.560 --> 02:35:10.000]  вы хоть допустим вот это ну если это запрос на добавление удаления не очень уже интересно а вот
[02:35:10.000 --> 02:35:14.680]  если это запрос на лежат ли две вершины в одной компоненте тогда выскакать такая идея а давайте
[02:35:15.680 --> 02:35:22.280]  давайте просто с помощью cnm добавим графу все вот эти ребра потом вот эти ребра потом вот эти
[02:35:22.280 --> 02:35:31.800]  ребра потом вот эти ребра потом вот эти и после этого проверь у квадрата у квадрата
[02:35:32.800 --> 02:35:46.920]  еще не квадрат это бесконечное число да да да да да да очень-очень-очень-очень-очень
[02:35:46.920 --> 02:35:55.680]  очень медленно растущая но бесконечно большая поэтому поэтому хочется конечно много раз
[02:35:55.680 --> 02:36:00.680]  например вот эти все ребра в граф не добавлять хотя заметим что если тут есть какие-то ребра то они
[02:36:00.680 --> 02:36:09.800]  добавятся навсегда поэтому хочется научиться делать так называемый смм с адкатами
[02:36:09.800 --> 02:36:17.280]  смм с адкатами что такое смм с адкатами
[02:36:17.280 --> 02:36:38.480]  это такая структура данных которая хочет уметь делать find от в там юниум от уэ и cancel
[02:36:39.080 --> 02:36:54.800]  просто cancel why just cancel because this operation cancels previous operation and and exactly
[02:36:54.800 --> 02:36:56.600]  previous and forever
[02:36:56.600 --> 02:37:19.800]  да что операция отменяет навсегда вы можете сказать что у вас сделанные операции хранятся
[02:37:19.800 --> 02:37:25.800]  в стеке find и там вот эти вот юнионы даже даже не файн да именно юниор хотя и файлы можно тоже
[02:37:25.800 --> 02:37:31.920]  но по факту нас интересует именно и то есть они будут они находятся как бы в стеке и cancel
[02:37:31.920 --> 02:37:41.000]  делает делать следующий он берет юнион и отменяет его то есть отменяет его результат то есть и
[02:37:42.000 --> 02:37:57.720]  вот тут начинается интересный вопрос за кое-чем точку мы такое можем забабах так ну вот да вот
[02:37:57.720 --> 02:38:04.400]  заметим что обратная функция вот не да тот конечно кобелевич пишет важную приятную штуку на
[02:38:04.400 --> 02:38:12.480]  самом деле cancel не отменяет асимптотику того что было раньше потому что все действия нет там
[02:38:12.480 --> 02:38:19.560]  вот почти буквально такое написано вот там буквально до дезберева что в принципе на асимптотику
[02:38:19.560 --> 02:38:26.120]  действительно cancel и не влияет почему потому что то что делалось при непосредственно юнионе можно
[02:38:26.120 --> 02:38:31.560]  в явном виде просто сделать те же операции но в обратном порядке он допишет буквально а давайте
[02:38:31.560 --> 02:38:41.040]  прямо просто писать каких нечейках памяти мы шоу и на шоу поменяли я вот примитивно тупо вот
[02:38:41.040 --> 02:38:48.360]  вот а потом просто вот то есть возьмем и перезапишем вот то есть там буквально такое написано но
[02:38:48.360 --> 02:38:55.160]  видимо но поэтому после этого хочется как-то тогда файнд юнион получается за а керману работают
[02:38:55.160 --> 02:39:03.000]  ну вот к сожалению да потому что тоже сказали что мои слова выдраны из контекста как всегда
[02:39:03.000 --> 02:39:12.240]  конечно же да нет амортизатор это это все работает без амортизации то честно асимптотика была
[02:39:12.240 --> 02:39:20.760]  честной то конечно никаких проблем буквально так это и делается вот но но но но то есть если вы
[02:39:20.760 --> 02:39:25.720]  там есть у вас там будут держать я путей которые вы будете там которые вы будете
[02:39:25.720 --> 02:39:31.480]  составлять ковырять носу еще раз и еще раз и еще раз и еще ну вот ну вот соответственно у вас
[02:39:31.480 --> 02:39:40.760]  будут проблемы да так ну пробовала так это чемпионат вера по кличу можно обсуждали да да хорошо
[02:39:40.760 --> 02:39:52.000]  вот ну как это да это как-то бинокль с функцией повтора но вот вот то же самое
[02:39:52.000 --> 02:39:58.800]  не должны быть потому что у нас амортизатор это было как бы так он вывезли исследует амортизацию
[02:39:58.800 --> 02:40:08.560]  вот это уже было значит поэтому конечно просто так не получится конечно то есть если мы хотим
[02:40:08.560 --> 02:40:17.920]  делать такой cnm с амкатами то нам нужен find union честный какие есть ну есть ли аживная
[02:40:17.920 --> 02:40:22.840]  версия а давайте ну как бы самая большая проблема у нас что она делает амортизацию
[02:40:22.840 --> 02:40:33.360]  по сути эвристика сжатия путей давайте ее отменим нет не cancel а в смысле даже начинать
[02:40:34.240 --> 02:40:39.720]  зато будем использовать весовую в рейсе ну или ранговую то в данном случае уже не
[02:40:39.720 --> 02:40:46.720]  принципиально тогда если делать только ранговую рейс и ко или весовой то тогда у вас
[02:40:46.720 --> 02:41:02.000]  файн будет работать за логовая а юнион как сказать можно сказать логовая а можно сказать единица
[02:41:02.000 --> 02:41:13.760]  если подозревать что у его это подним нет проблема в том что у нас там все операции
[02:41:13.760 --> 02:41:19.200]  амортизированные то есть нам гарантируется что если вы делаете все эти операции подряд со всеми
[02:41:19.200 --> 02:41:24.080]  сжатиями то будет м на сжатия а если вы каждую операцию можете отменить ну как векторе короче
[02:41:24.080 --> 02:41:30.320]  то есть если векторе честно отменять пушбэк путем отмену все эмортизации которая там была то
[02:41:30.320 --> 02:41:38.000]  как бы лимейности вот если делать все честно то юнион отменить вообще кстати предельно просто
[02:41:38.000 --> 02:41:44.720]  даже еще проще потому что для этого нужно просто сказать что как бы так при юнионе мы назначили
[02:41:44.720 --> 02:41:52.120]  тебе родителя так вот родителя больше нет в смысле не не не он то есть просто как бы ты
[02:41:52.120 --> 02:42:05.520]  снова крутой квалифанта ну вот ну классическая ситуация такой вот логовая на самом деле формально
[02:42:05.520 --> 02:42:13.160]  говоря тут появляется конечно опять товарищ габов уже упоминавшийся сегодня и более того
[02:42:13.160 --> 02:42:25.400]  опять не один и он выявляет точнее они мы тут с товарищами посоветовались хотя это с чего
[02:42:25.400 --> 02:42:36.600]  я взял хотя с чего я взял что он с кавказа и решили что на самом деле см с честной асимптотикой
[02:42:36.600 --> 02:42:52.640]  может быть сделан с асимптотикой логовая делит на лог логовая это круче чем логовая
[02:42:52.640 --> 02:43:02.920]  а лучше не придумали да можете гугла мы придумали скажем так такое как минимум упоминается в
[02:43:02.920 --> 02:43:09.760]  дипломе капеллевича но диплом не устаревший там года 12 там 12 года может быть с тех пор
[02:43:09.760 --> 02:43:19.560]  что-то поменял вот хотя там мало ли там он взрослый решал эти задачки более того мы сейчас
[02:43:19.560 --> 02:43:24.960]  будем обсуждать тоже самое но с мостами и тут он сказал следующий я честно там поискал там
[02:43:24.960 --> 02:43:29.320]  покинута по каким-то там журналам действительно еще и там по статьям вот с этими вот авторами
[02:43:29.320 --> 02:43:34.040]  и вообще ничего на эту тему не нашел да у меня оказывается лучше это мне я придумал
[02:43:34.040 --> 02:43:40.600]  что типа более крутой алгоритм хотя я нот почерно как так получилось я не понял практически
[02:43:40.600 --> 02:43:45.880]  честно написал в статье это называется этот факт мне представляется удивительным
[02:43:45.880 --> 02:43:55.880]  тоже отдельная песня вот даже это это тоже так в качестве локального прикола можно видимо
[02:43:55.880 --> 02:44:06.800]  заботить какой-то момент хотя да вот но не важно но давайте поймем какой чем
[02:44:06.800 --> 02:44:11.920]  точку нам этот логу возможность делать это за лог выдают то есть как это вообще нам помогает
[02:44:11.920 --> 02:44:20.600]  помогать следующий запустим дфс поэтому берем а когда мы входим в вершину мы как бы добавляем
[02:44:20.600 --> 02:44:28.000]  ребра в граф честно там сжимаем компоненты а потом когда выходим из вершины мы отменяем
[02:44:28.000 --> 02:44:44.080]  все эти действия в самой вершине в самой вершине тут вам потребуется максимум там
[02:44:44.080 --> 02:44:51.160]  два файнда сделать вот и но и на каждый ребро соответственно тоже сделать юнион который
[02:44:51.160 --> 02:44:58.320]  тоже типа два файнда и одна отмена но получается то есть у нас получается общее число ребер в
[02:44:58.320 --> 02:45:07.000]  дереве отрисков значит у нас это получается на паре то есть на алгоритм получается асимптотика
[02:45:07.000 --> 02:45:26.760]  кулаку логовая ну при большом желании делить налог логовая да кто-то да кто-то уже попытался
[02:45:26.760 --> 02:45:33.600]  это сделать не ну не совсем квадрат ну квадрат пока
[02:45:33.600 --> 02:45:48.800]  квадрат или новое получится не а нет а вот ну согласен надо оптимизировать
[02:45:48.800 --> 02:45:58.480]  так сколько у нас времени то вообще ах ну что вот ладно давайте смотреть нет давайте
[02:45:58.480 --> 02:46:06.800]  теперь с вами вы внимательно подумаем давайте давайте не вот давайте немножко внимательно
[02:46:06.800 --> 02:46:13.000]  подумаем а каким был вот после наша цель сейчас будет локально все-таки сократить это хотя бы
[02:46:13.000 --> 02:46:21.520]  сократить это до кулок чего-нибудь не помнит а мокку получится логовая но вот до чего-нибудь
[02:46:21.520 --> 02:46:32.440]  вот давайте теперь думать как бы нам действительно но то есть как бы нам действительно давайте
[02:46:32.440 --> 02:46:40.680]  подобно счет чего но что было бы на самом деле эти лог квадраты поубивать но сразу подсказка
[02:46:40.680 --> 02:46:59.960]  то есть вот нельзя ли было бы нам вот эти вот конечно вот вот как-то вот вот возникает вопрос
[02:46:59.960 --> 02:47:12.360]  а главное за счет чего вот нет просто даже даже вот интересно как какие ассоциации вообще
[02:47:12.360 --> 02:47:23.600]  могут быть у вас вообще в какую сторону теоретически вообще можно в этом лдп с и так есть пока
[02:47:23.600 --> 02:47:38.040]  так вот откуда как вообще лог квадрат приводите вообще теоретики иногда превращается в лог
[02:47:38.040 --> 02:47:51.720]  нет четырех не ну 4 русских там 4 русских просто все логи убирают на самом деле
[02:47:51.720 --> 02:48:08.640]  не ну да одна из людей на самом деле действительно вытекает том что близких
[02:48:08.640 --> 02:48:14.280]  вершины то есть вот в низких вершинах действительно хочется рассматривать поменьше вершин просто
[02:48:14.280 --> 02:48:20.360]  заметим что если но это заметно что нету ни одного запроса то в нем можно опять вообще не ходить
[02:48:20.360 --> 02:48:32.040]  нет нажимать даже не за счет вот чего а да но а если запросы в ней есть вот допустим там
[02:48:32.040 --> 02:48:39.720]  у этой вершины 4 запроса то связано не более чем с 8 вершинами поэтому можно задуматься они
[02:48:39.720 --> 02:48:44.560]  взяли на более высоких уровнях вот например вот на этом уровне попробовать свести задачу к
[02:48:44.560 --> 02:48:52.040]  графу на 8 вершинах и там и канут то есть уже там каком-то адекват адекватно сжатому
[02:48:52.040 --> 02:49:02.400]  графу который вас интересует только вот эти 8 вот ну потому что вот да да потому что реально
[02:49:02.400 --> 02:49:07.040]  интересует 8 вершин потому что даже если тут какие-то ребра там допустим добавляется удаляется да
[02:49:07.040 --> 02:49:16.800]  да потому что да запросы тут на 8 вершин максимум но с другой стороны там добавить
[02:49:16.800 --> 02:49:23.480]  от нас могли попросить чуть побольше претекает вопрос действительно как же
[02:49:24.420 --> 02:49:38.560]  а с другой стороны можно делать следующие вот можно
[02:49:38.560 --> 02:49:46.480]  так же как Amy как тут можно действительно аккуратненько работатьPlease
[02:49:46.480 --> 02:49:50.980]  давайте думать как тут можно действительно аккуратненько работать так чтобы без SM
[02:49:50.980 --> 02:50:00.540]  ведь самое смешное что на самом деле а что она а зачем нам нужен и сыном то вообще
[02:50:00.540 --> 02:50:13.820]  да лежа но действительно действительно там допустим лежат ли в одной компоненте или нет
[02:50:13.820 --> 02:50:18.620]  но с другой стороны мы эти компоненты постоянно тут каждый векшине сжимаем сжимаем сжимаем да
[02:50:18.620 --> 02:50:38.140]  а если мы эти компоненты непонятной коррупции вот тупо дфсом ну например
[02:50:38.140 --> 02:50:48.100]  да казалось бы вы скажете дфс работает за не за от количества гребер а за от в плюс
[02:50:48.100 --> 02:50:59.020]  количество но на самом деле заметим что сжимать компоненты я могу именно за от количества гребер
[02:50:59.020 --> 02:51:08.260]  здесь но при условии что вот эти более ранние уже сжат я это могу очень легко сделать но причем
[02:51:08.260 --> 02:51:15.880]  в принципе отменяема так ну а первых так смотрите первая технология я думаю сталкивается такой
[02:51:15.880 --> 02:51:23.140]  ситуации когда вам нужно мотив юзер то есть дфс и при этом мотив юзер внулять за от единиц
[02:51:23.140 --> 02:51:28.980]  садились когда-нибудь такой технологии ну такая чемпионе в налоге вспомним что
[02:51:28.980 --> 02:51:34.820]  у нас будет интон и у нас будет мистическое значение цепь будет означать что вершина
[02:51:34.820 --> 02:51:39.980]  помечена и будем говорить что если вышина цета там юзер я написано ц значено помещено если
[02:51:39.980 --> 02:51:45.620]  написано что угодно другое значение помещено и тогда как все зачистить просто увеличить цены
[02:51:45.620 --> 02:51:58.580]  единичку классической технологии это но этот но тут можно тоже чуть чуть усложнить можно но
[02:51:58.580 --> 02:52:06.140]  первых этот юзер можно зачистить а во вторых теперь можно добавив соответственно то есть
[02:52:06.140 --> 02:52:12.020]  теперь можно сказать так допустим у нас то есть идея у нас будет так а когда мы уже приходим в
[02:52:12.020 --> 02:52:18.140]  эту вершину сверху мы будем считать что у нас уже есть какой-то граф на каких-то вершинах
[02:52:18.140 --> 02:52:24.540]  причем список этих вершин у нас есть то есть есть у нас просто граф нам просто список вершин
[02:52:24.540 --> 02:52:35.860]  первая вторая третья там 57 179 все хорошо 104 там 404 еще 218 вот и на них тут и все какие-то
[02:52:35.860 --> 02:52:45.740]  поэтому я но вот мы там добавляем ребра на этих вершинах честно запускаем dfs если выясняем что
[02:52:45.740 --> 02:52:56.420]  57 179 объединяется ну в какую башу они объявляются 236 очевидно вот логично вот вот соответственно
[02:52:56.420 --> 02:53:00.540]  ну и так далее ну или просто если во что-то объединяется компоненты то там появляется
[02:53:00.540 --> 02:53:08.260]  вершина номер следующая и мы все эти вершины теперь просто перекрашиваем в этот цвет вот ну и
[02:53:08.260 --> 02:53:11.940]  вообще для каждой вершины но вот ну и там допустим для каждой вершины как-нибудь там
[02:53:11.940 --> 02:53:24.140]  аккуратненько храним ее там текущие номера что что сейчас сейчас как выходить
[02:53:24.140 --> 02:53:33.260]  смотрите но тут разные технологии могут быть ну во первых при такой технологии как я сказал
[02:53:33.260 --> 02:53:38.740]  можно делать так смотрите для каждой вершины мы просто говорим в какой компонент она попала
[02:53:38.740 --> 02:53:46.060]  логично да вот ну вот но заметим что это следующая компонента тоже там на более
[02:53:47.060 --> 02:53:54.740]  следующую компоненту попасть правда ну могло такое быть но тогда получается когда мы дойдем аж
[02:53:54.740 --> 02:54:00.860]  надо сюда у нас будут две вершины и у каждой получится такая цепочка высоты логарифа
[02:54:00.860 --> 02:54:07.780]  поэтому можно поэтому сейчас мы требуем себе кулаку поэтому как бы мы можем тут за честную
[02:54:07.780 --> 02:54:12.340]  асимптотику в общем-то за честно за честный логариф просто прогуляться и выяснить они в одной
[02:54:12.340 --> 02:54:19.900]  компоненте или нет то есть все что нам нужно это просто выпускать dfs вот этот вот вот это вот
[02:54:19.900 --> 02:54:29.740]  единственная только единственная проблема что для то есть единственная проблема что проблема
[02:54:29.740 --> 02:54:35.900]  почему это так просто не сработает но фишка будет том что для каждого ребра в будущем вот здесь
[02:54:35.900 --> 02:54:42.500]  нужно будет тем же методом проверять а каким компонентом оно вообще принадлежит поэтому не
[02:54:42.500 --> 02:54:50.380]  все так просто если в ядном виде делать это для каждого здесь ребра то у лог квадрат снова
[02:54:50.380 --> 02:54:58.380]  начинает нас привет вот теперь внимание вопрос как же нам выкрутить но когда же какие варианты
[02:54:58.380 --> 02:55:20.700]  у вас так ну то есть вы предлагаете все но тогда что сейчас но просто уверена смотрите вершина то
[02:55:20.700 --> 02:55:26.460]  у нас просто ребра у нас как бы заданы в исходных вершинах и мы же наверное не хотим трогать эти
[02:55:26.460 --> 02:55:39.300]  вот ребра до того как мы тут вот пройдем и все сожраем или хоть так так у вершины нет вершины
[02:55:39.300 --> 02:55:47.580]  ты мы конечно таким так а ну да действительно то есть идея получается такая то есть давайте
[02:55:47.580 --> 02:55:57.340]  в каждом час погодите погодите каждый а в принципе да тоже получается что-то типа с
[02:55:57.340 --> 02:56:02.180]  откатами то есть давайте будем поддерживать то есть когда то есть допустим когда мы пришли
[02:56:02.180 --> 02:56:06.940]  в вершину мы уже то есть мы для каждой исходной вершины мы знаем в какой компоненте она сейчас
[02:56:06.940 --> 02:56:14.020]  лежит в чем честно то есть вообразить себе можно это так на самом деле для каждой вершины можно
[02:56:14.020 --> 02:56:19.860]  завести просто стэк просто стэк компонент в которых она лежит то есть когда если там
[02:56:19.860 --> 02:56:24.260]  две компоненты объединились в одну то для каждой из вершин компонент мы добавляем стэк новую
[02:56:24.260 --> 02:56:29.460]  компоненту а потом когда выходим типа обратно мы и стэк ее выкидываем то есть
[02:56:29.600 --> 02:56:33.660]  будет
[02:56:38.580 --> 02:56:45.940]  тогда мы тогда мы для каждой вершины который Заметь им, что мы в каждой вершине дерево
[02:56:45.940 --> 02:56:52.160]  отрезков можем в тупую хранить какие вершины тут вообще есть и для каждой из них, и допустим
[02:56:52.160 --> 02:56:57.460]  у нас будет вариант для каждой из этих вершин мы уже тупо знаем в какой компоненте она вот по
[02:56:57.460 --> 02:57:03.780]  результатом предыдущих связанности лежит тогда идея такая запускаем вот
[02:57:03.780 --> 02:57:10.220]  этот вот для каждой вершины часто прописываем себе и добавляем стэк в какую
[02:57:10.220 --> 02:57:15.940]  новую компоненту она попала или даже осталась в старой понимаете пока да
[02:57:15.940 --> 02:57:26.380]  понимаете или или умираете или даже не юз нету юз от как я уже сказал он как
[02:57:26.380 --> 02:57:35.620]  бы отменяемый это как бы не проблема вот хотя в принципе можно юзет можно
[02:57:35.620 --> 02:57:40.740]  делать можно юзет делать и как бы обычные просто как бы очищать не все
[02:57:40.740 --> 02:57:43.980]  вершины права одного до миллиона а только те которые тут явно в виде
[02:57:43.980 --> 02:57:48.980]  прописаны вот вот вот но пишка в том что во-первых мы пробежать в серебра мы
[02:57:48.980 --> 02:57:55.900]  значит часто переименовали на них запустили дфс то есть на них запустили
[02:57:55.900 --> 02:58:00.700]  дфс жали компоненты все это сделалось получается за от вот количество вершин
[02:58:00.700 --> 02:58:05.460]  которые тут среди то есть видите как каждую вершину обрабатываемся количество
[02:58:05.460 --> 02:58:10.940]  вершин после этого мы соответственно торжество пошли сюда с отменой потом
[02:58:10.940 --> 02:58:15.340]  пошли сюда с отменой потом отменились из себя что значит отменились мы еще
[02:58:15.340 --> 02:58:19.300]  раз пробежались по всем этим вершинам и отменили сведения о новых компонентах
[02:58:19.300 --> 02:58:26.500]  то есть до там достали истеком да вот тогда получается что и после нот и тогда
[02:58:26.500 --> 02:58:30.060]  заметим что мы когда приходим запрос то мы на этот запрос отвечаем вообще уже
[02:58:30.060 --> 02:58:35.980]  за единицу просто за единицу из каждой вершины мы теперь
[02:58:35.980 --> 02:58:41.140]  работаем за количество вот вершин которые тут в этих запросах есть
[02:58:41.140 --> 02:58:43.140]  ну все вот
[02:59:11.140 --> 02:59:16.660]  реализация тоже вроде как даже сильно убойный не вы
[02:59:16.660 --> 02:59:27.940]  убили вот ладно логовое убили вот но кулаку у нас теперь есть вот то есть вот
[02:59:27.940 --> 02:59:32.380]  получается такая как-то да как тут честно сказал каприлёвич ладно это не
[02:59:32.380 --> 02:59:37.540]  первоисторический алгоритм который решает эту задачу за кулаку но как бы
[02:59:37.540 --> 02:59:40.980]  утверждается что-то алгоритм там где в 92 года который был раньше он был
[02:59:40.980 --> 02:59:46.340]  сложнее да тут как-то попроще там видимо все другие компоненты
[02:59:46.340 --> 02:59:54.420]  но вот ну тут вот для пляжа для программирования помогает вот так что
[02:59:54.420 --> 03:00:01.740]  получается что оказывается кулак за за кулаку это упихывается так ну вот ну
[03:00:01.740 --> 03:00:08.220]  ладно там действительно да вот да ну ладно раз уж мы где-то рядом ходим
[03:00:08.220 --> 03:00:12.020]  наверное стоит на всякий случай упомянуть про параллельный бин поезд то
[03:00:12.020 --> 03:00:17.260]  параллельным бин поиском правда решается не совсем эта задача ну
[03:00:17.260 --> 03:00:23.980]  классическая задача я сказал на параллельный бин поиск скорее такая немножко
[03:00:23.980 --> 03:00:27.740]  другая задача вот давайте уголки предположим что у вас ребра только
[03:00:27.740 --> 03:00:33.020]  добавляются вот вам заранее известно что вот добавляются ребра
[03:00:33.020 --> 03:00:42.380]  ну вот так вот и у вас есть куча значит 100 тысяч ребр добавляете 100 тысяч
[03:00:42.380 --> 03:00:46.780]  запроса значит запросы значит каждый запрос даны
[03:00:46.780 --> 03:00:53.900]  вершины ув и вас спрашивают начинает с какого момента эти вершины лежат свои
[03:00:54.460 --> 03:01:01.020]  в одной компанией связанности то есть ну понятно изначально они были не в одной
[03:01:01.020 --> 03:01:05.060]  компанией связанности в конце они скорее всего там граф стал связан спрашивать
[03:01:05.060 --> 03:01:12.420]  начинает с какого момента вот ну и классический метод ну просто рассказываю
[03:01:12.420 --> 03:01:18.220]  на всякий случай вдруг там там кто-то не знает вот то есть да классическая
[03:01:18.220 --> 03:01:22.980]  технология звучит так прогуляемся поэтому значит то есть идея такая
[03:01:22.980 --> 03:01:26.220]  значит как будет но по идее для каждого так как у нас это функция
[03:01:26.220 --> 03:01:29.520]  монотонная то есть сначала нет нет нет я потом да да да да да да да то
[03:01:29.520 --> 03:01:35.860]  теоретически для каждого ребра мы могли запустить бин поиск вот но это было бы
[03:01:35.860 --> 03:01:42.260]  долго это было бы там сколько куна ве на там и кирмана какого-то
[03:01:42.260 --> 03:01:57.780]  чего ну да да еще бин поиск еще и лишний лог поэтому мы пойдем другим путем мы
[03:01:57.780 --> 03:02:02.500]  скажем так вот у нас допустим где-то был вот момент времени ку пополам
[03:02:02.500 --> 03:02:10.300]  успеху пополам запрос давайте приближимся прям честно заку пополам то есть за там
[03:02:10.300 --> 03:02:16.180]  потратим значит ку на альфа времени чтобы узнать у каких запросов ответ не
[03:02:16.180 --> 03:02:22.780]  превосходит ку пополам а у каких превосходит ну потому что она а сколько
[03:02:22.780 --> 03:02:27.220]  у нас тут ребер а давай а ладно давай чтобы не путать это будет ку а вот тут
[03:02:27.220 --> 03:02:35.980]  ребер будет е тогда ладно тогда значит давайте тут будет е пополам и тогда у
[03:02:35.980 --> 03:02:39.380]  нас тут получается там е на обратную функцию кирмана какую-то там
[03:02:39.380 --> 03:02:47.780]  е и вы вы тогда легко получите ответ на эту задачу вот пока я имею у вас будет
[03:02:47.780 --> 03:02:55.220]  группа запросов у которых ответ там меньше этой границы и будет группа
[03:02:55.220 --> 03:03:00.140]  запросов которых больше да размеры как-то с сопоставляет что там между
[03:03:00.140 --> 03:03:05.900]  собой соотносится как угодно но теперь у меня идея такая ведь смотрите для
[03:03:05.900 --> 03:03:11.900]  этих ребер по идее пин поиск должен запросить е поделить на 4 а для этих 3
[03:03:11.900 --> 03:03:16.140]  е делить на 4 да но знаете что и тех и тех мы теперь
[03:03:16.140 --> 03:03:22.740]  можем обработать за единые и операции я потрачу теперь еще е на обратную
[03:03:22.740 --> 03:03:29.420]  функцию кирмана операции и значит тогда рассматриваю е делить на 4
[03:03:29.420 --> 03:03:39.980]  и вот тут еще 3 е поделить на 4 сначала эти потом эти вот и у меня тогда тут
[03:03:39.980 --> 03:03:44.180]  разобьются ребра которых ответ где-то здесь и тут ребра которые где-то здесь ну
[03:03:44.180 --> 03:03:51.340]  и здесь тут есть какие-то ребра вот тут здесь а какие-то ребра вот здесь вот
[03:03:51.340 --> 03:03:56.980]  получается у каждого ребра пин поиск выполняется то есть мы за от е на
[03:03:57.360 --> 03:04:02.700]  folder для каждой для каждого ребра выясняем в какую сторону бин поиск ему отправить
[03:04:02.700 --> 03:04:08.480]  то есть на каждый этот то есть так получится логарифом и террации то есть
[03:04:08.480 --> 03:04:13.400]  на каждой террации у каждого ребра есть отрезок на который он попадает то есть
[03:04:13.400 --> 03:04:16.100]  понятно что когда он попадает на какой-то отрезок значит мы берем
[03:04:16.100 --> 03:04:19.660]  середину этого трезвика говорим что мы вот в этом месте то есть фактически мы
[03:04:19.660 --> 03:04:23.740]  прогуливаемся опять по этим ребрам и в нужном месте просто хотим проверить так
[03:04:23.740 --> 03:04:30.140]  это место это ребро в этом месте эти вершины из одной компоненты связанности или не из одной
[03:04:30.140 --> 03:04:35.620]  и в зависимости от этого значит у нас отрезок двигается там сокращается наполовину либо влево
[03:04:35.620 --> 03:04:42.700]  либо вправо. В результате итоговая симптутика получается О на Е, на там получается сколько там
[03:04:42.700 --> 03:04:50.540]  логариф, ну во-первых на обратную функцию термана, а во-вторых на дот и в конце мы делаем это получается
[03:04:50.540 --> 03:05:01.420]  ЛОГ-ЗЕ-РАС. Вот это называется параллельный бен поиск. Я так понимаю подробнее о нем
[03:05:01.420 --> 03:05:31.420]  Говорить нет смысла потому что многие из вас не... Что? Где Куууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууууу
[03:05:31.420 --> 03:05:33.460]  Бамана тоже жрут
[03:05:38.860 --> 03:05:42.420]  Нет, нет, смотрите, должно быть лог Е почему?
[03:05:42.420 --> 03:05:45.240]  Что в бинпоиске лог Е итерации
[03:05:50.120 --> 03:05:54.300]  Не-не-не, да Е пополам
[03:05:54.300 --> 03:05:57.120]  Е это ребра которые мы добавляли в граф
[03:05:57.120 --> 03:05:59.720]  Кууу это количество вот этих паров
[03:05:59.720 --> 03:06:17.360]  потому что у нас все запросы работают за керман в явном виде запросы к см м принадлежат
[03:06:17.360 --> 03:06:22.420]  и две вершины одной компания связности в этот момент времени это в явном виде запросы к
[03:06:22.420 --> 03:06:45.620]  керману к см м но к обратному керману да так что такая вот красивая у нас ситуация
[03:06:46.620 --> 03:06:53.380]  еще какие-то вопросы тут чего алгоритм алгоритм у
[03:06:53.380 --> 03:07:04.280]  алгоритма имеет куда-то где-то в параллельном поиске ну нет ну это может так кажется но
[03:07:04.280 --> 03:07:12.820]  дело в том что мы не ну как-то ощущение но это да вы знаете тогда обидно да обидно это бывает когда
[03:07:12.820 --> 03:07:17.100]  вы выкладывает в контексте что вы там дали кучу одинаковых задач они как бы если внимательно
[03:07:17.100 --> 03:07:25.500]  посмотреть они не одинаковые просто одна на поток другая на просочетание да просто одна
[03:07:25.500 --> 03:07:30.340]  на строке она на геометрию но просто так как везде сконлайн поэтому кажется что они одинаковые
[03:07:30.340 --> 03:07:35.820]  ну нет не но знаете ситуация вы проводите конкурс задачи обещаете лучшие задачи взять на
[03:07:35.820 --> 03:07:43.500]  контесте вам значит присылают задачи а вам все жалко выкинуть ну все хорошие нет понятный там
[03:07:43.500 --> 03:07:56.620]  топ 3 вы конечно награждаете но вот ну почти тоже жалко понимаете там просто условия конкурса
[03:07:56.620 --> 03:08:06.220]  если мы задачу не дали возвращаем ее автор ну мы так проводим мы так конкурс задачи проводили как-то
[03:08:06.220 --> 03:08:13.420]  как-то раз вот даже на первой курсе даже китайский автор нам задачку прислал даже да хорошо было
[03:08:13.420 --> 03:08:24.060]  нет хорошей задачи были нет всего я больше скажу да что третье место дали вот давно
[03:08:24.060 --> 03:08:32.300]  так обнаружилось что конечно на конкурс дать никому в общем-то это да обычно да
[03:08:32.300 --> 03:08:41.460]  авторам задачи скорее всего вам есть и куда предложить и так без всяких там вот эти не говоря
[03:08:41.460 --> 03:08:46.420]  уже о том что да видимо пока это по каким претензия вызывается там красивые задачи конечно с
[03:08:46.420 --> 03:08:53.060]  объективизм чистой вот нет там претензий вроде особо не было хотя у меня в последнее время
[03:08:53.060 --> 03:08:58.460]  возникает ощущение что там мое представление хорошести там задачи конкурса сильно расходится
[03:08:58.460 --> 03:09:10.260]  там сомнения в сообщество ну вот то есть я не всегда понимаю почему но вот сейчас видимо
[03:09:10.260 --> 03:09:14.980]  приходит время перерыва но после перерыва нам придется подумать над более сложной задачей
[03:09:14.980 --> 03:09:21.620]  значит вернуться к этому и подумать а как тут искать мосты а вот это уже можно реально
[03:09:21.620 --> 03:09:25.460]  называть будет алгоритм капелевича нет хотя это тоже можно назвать алгоритм да
[03:09:25.460 --> 03:09:39.260]  так задача новая теперь продвинутая задача теперь у нас задача ну можно так ну по-разному
[03:09:39.260 --> 03:09:48.020]  можно но на самом деле как выяснилось удобнее даже усложнить задачу удобно мысли так даны
[03:09:48.020 --> 03:09:54.700]  дайн граф у каждого ребра есть вес они тоже добавляются удаляются так вот у вас есть запросы
[03:09:54.700 --> 03:10:16.420]  добавить ребро удалить ребро и найти сумму весов всех мостов можно пытаться делать ну или там
[03:10:16.420 --> 03:10:22.300]  параллельно вот там можно это вот так удобно можно ее как-то поддерживать или еще ну или
[03:10:22.300 --> 03:10:26.820]  принципе основной крыша запрос индустрируемый здесь такой данные две вершины лежат ли они в
[03:10:26.820 --> 03:10:34.180]  одной компоненте ребриду следовательств да или нет или иногда вам может посадить то
[03:10:34.180 --> 03:10:47.060]  забыл предъявить я не люблю когда я с кем-то разговариваю кто-то в телефоне сидит вот просто
[03:10:47.060 --> 03:10:56.740]  девушки к сожалению совсем не понимают тем не менее вот девушки умеют делать параллельно
[03:10:56.740 --> 03:11:11.420]  так интересно так нет да наверное так ладно ну как кто сталкивался
[03:11:11.420 --> 03:11:20.820]  с девушками сталкивались наверное все у нас тут как минимум одна группа есть
[03:11:20.820 --> 03:11:40.980]  уже не было ну было две ну так ладно ладно сложный прикол ладно хорошо ладно
[03:11:40.980 --> 03:11:55.340]  беремся к постам и так задачи как же нам все-таки так же нам все-таки ту же технологию нацеливаем
[03:11:55.340 --> 03:12:03.860]  примерно на ту же самую там на тоже самое кубок куб ставочку но при этом нам очень каким-то
[03:12:04.860 --> 03:12:13.460]  но при этом чтобы это были махты они тут после так но теперь заметим что просто так с
[03:12:13.460 --> 03:12:23.540]  нотой заметим просто так объединить конечно не получится в том плане что объединить мы конечно
[03:12:23.540 --> 03:12:30.260]  можем за линейное время объединить то есть там допустим за линейное время обе найти все
[03:12:30.260 --> 03:12:37.220]  компоненты реберной ду связности это для нас не проблема проблема будет заключаться в том что
[03:12:37.220 --> 03:12:46.860]  конечно граф которые получат компоненты на ду связности это дерево более того не просто дерево
[03:12:46.860 --> 03:12:52.580]  а большого дерева то есть сказать что оно там вот допустим будет вот на этих двух вершинах ну нельзя
[03:12:52.580 --> 03:13:04.340]  пока имели на халяву нельзя в принципе да мы себе ну можем наверно там попытаться то есть
[03:13:04.340 --> 03:13:20.660]  попытаться как-то это действительно по представлять ну хорошо давайте вспомним еще раз повторить как
[03:13:20.660 --> 03:13:41.460]  вы добились того что у нас кубку было здесь руками помахали так ну да нет ну у нас было два момента
[03:13:41.460 --> 03:13:46.260]  во первых мы ухитрялись как бы рассмотрев тут все то есть мы говорили что мы рассматриваем
[03:13:46.380 --> 03:13:55.620]  те вершины действительно которые затрагиваются и при этом еще но вот затрагиваются вот когда мы
[03:13:55.620 --> 03:14:00.740]  сверху пришли какие компоненты были мы рассматриваем только нужные нам вершины и с ними и вокруг
[03:14:00.740 --> 03:14:06.740]  них как-то пляж ну тут заметь но тут так просто не получится потому что может получиться дерево
[03:14:06.740 --> 03:14:12.620]  и ребро тут может там и каждый там дополненный ребро может там объединять целый большой цикл
[03:14:12.620 --> 03:14:26.180]  давайте начнем за какую-нибудь адекватную симптомику мы можем решить вопрос давайте
[03:14:26.180 --> 03:14:38.380]  вот поймем хотя бы просто ну не которые у квадрата естественно ну давайте подумаем
[03:14:38.380 --> 03:14:43.500]  ну давайте так вот можно было бы вообще не заморачиваться может какими-то
[03:14:44.100 --> 03:14:47.820]  сапкатами там или что-нибудь еще в этом роде могли бы мы попытаться
[03:14:47.820 --> 03:15:10.940]  ну да но правда и только для того чтобы понимать кого объединять во второй снэп
[03:15:10.940 --> 03:15:20.860]  вот нам нужно на самом деле еще хранить кое-что там придет хранить эти дерева этих компонент
[03:15:20.860 --> 03:15:34.140]  могли бы мы хранить какой-нибудь основные дерево
[03:15:34.140 --> 03:15:46.100]  ну-ка вот ну просто добыча в каждом из тех ребер которые у нас есть хранить
[03:15:46.100 --> 03:16:06.300]  какой-нибудь основные дерева вот да самое туда то есть самое тупое даже если добавление
[03:16:06.300 --> 03:16:10.140]  ребра привело к объединению двух компонентов значит оно у нас в дереве значит оно добавляется
[03:16:10.580 --> 03:16:17.900]  ну вот нет нет более того дерево можно даже сделать подвешенным ну самое тупое как его
[03:16:17.900 --> 03:16:36.220]  можно сделать это конечно линкат вот нет не совсем так нет вы с нами оно не совсем подвешенное
[03:16:36.220 --> 03:16:40.260]  потому что как бы когда там добавляется ребра вы не знаете кого кого с кем вы
[03:16:40.260 --> 03:16:44.620]  соединяете двух этих компонентах вы там не обязательно корень с корнем соединяете
[03:16:44.620 --> 03:16:50.780]  даже корень с не корнем вот поэтому не все так просто вот тут возникает вопрос как бы нам
[03:16:50.780 --> 03:17:00.260]  можно как бы нам сделать так чтобы действительно объединять именно но вот чтобы чтобы нам допустим
[03:17:00.260 --> 03:17:07.180]  объединять именно чтобы нас там появлялись какие-то подвешенные деревья как бы нам такое сделать
[03:17:07.180 --> 03:17:23.260]  что да ну да да нет ну как сказать нет ну что такое мы линку нет там в амортизации будет
[03:17:23.260 --> 03:17:28.660]  хорошая потому что как бы мы отменить линк за логарифом можем потому что отмена линка линка
[03:17:28.660 --> 03:17:39.340]  называется кат да вы умеете но правда да не хотела на первых порах можно поверить в линк
[03:17:39.340 --> 03:17:48.620]  но хорошо даже если мы это но даже если мы это дерево будем хранить линкатом первой
[03:17:48.620 --> 03:17:55.580]  секрет вопрос дать чем это нам будет помогать помогать там пока но пока это будет не очень то
[03:17:55.580 --> 03:18:02.580]  что когда мы захотим потому что что нам потребуется в этом линкате делать да причем
[03:18:02.580 --> 03:18:09.140]  самое страшное что линкат в этом месте и рискует пофейлится потому что жил был у вас линкат
[03:18:09.140 --> 03:18:19.860]  вот оно и вам тут неожиданно вот этой вершине приходит ребро вот это ребро добавить что логично
[03:18:19.860 --> 03:18:26.340]  сделать логично наверное найти вот этот вот путь дай бог чтобы это еще потом как предку
[03:18:26.340 --> 03:18:39.420]  было они вот и все вот это вот жать мне кажется но это называется кажется что ну
[03:18:39.420 --> 03:18:47.860]  вот как за вот тут кажется полномочия тут его немножко все кончились нельзя просто так взять
[03:18:47.860 --> 03:18:54.740]  линкат мертв
[03:18:54.740 --> 03:19:09.540]  вот линкат мертв да
[03:19:09.540 --> 03:19:28.260]  можно ли как-то дерево сделать чтобы как-то было попроще вот можно ли какой-нибудь
[03:19:28.260 --> 03:19:32.940]  не линкат сделать а чтобы это дерево было там какой-нибудь в явном виде там в явном виде
[03:19:33.540 --> 03:19:55.460]  ну да ну и желательно чтоб вода шел какие-то деда мы желаем
[03:19:55.460 --> 03:20:21.260]  нет удалять надо да нет ну как онлайне но там нет но там много чего надо уметь
[03:20:21.260 --> 03:20:29.060]  ну конечно если у нас была структура данных тоже что мне делать только еще и там брать
[03:20:29.060 --> 03:20:38.820]  допустим какой-то пути объединять его и тоже налоговить ну вот то кажется при это в принципе
[03:20:38.820 --> 03:20:44.940]  кажется кулок квадратное лицо особенно если вы еще и судно там храните но помните мы что
[03:20:44.940 --> 03:20:49.900]  там хотели типа там сумму весовка сумму каких-то нам весов мостов хранить да да
[03:21:14.940 --> 03:21:40.860]  только откатывать потом не забудь откатывать присваивание тут как бы такое вот поэтому
[03:21:40.860 --> 03:21:47.820]  мне тут конечно придется действительно делать какую-то аккуратность вот хотя с другой стороны
[03:21:47.820 --> 03:21:52.140]  давайте подумать но хотя да мечта была бы как-то по дереву хотя вот действительно то есть
[03:21:52.140 --> 03:21:56.700]  теоретически мечта была бы наоборот раз у нас оффлайн они взяли то есть может быть там просто
[03:21:56.700 --> 03:22:02.180]  деревья хранить так чтобы заранее предсказывать там собственно корни будет ну просто кого там
[03:22:02.180 --> 03:22:12.420]  куда подвешивать будут чтобы взять на самом деле надо еще думать а если в этом необходимость
[03:22:12.420 --> 03:22:22.540]  почему а вот почему потому что но на самом деле на самом деле но вот то что когда вы
[03:22:22.540 --> 03:22:34.260]  работаете с вот этими ребрами мы говорим может возникнуть такая идея что ладно если у нас
[03:22:34.260 --> 03:22:45.220]  там идея на самом деле возникает такая что предположим что у вас не выглядит оно каким-то
[03:22:45.220 --> 03:22:55.220]  таким вот и сильно экзотическим вот так вот и вот так вот и вот так вот
[03:22:55.220 --> 03:23:10.900]  но допустим что образовалась в этой вершине поэтому вы знаете что эта вершина на самом
[03:23:10.900 --> 03:23:36.180]  деле будет связана только с какими-то запросами тогда возникает такой если тоже
[03:23:36.180 --> 03:23:44.700]  еще один красивый олимпиадный лайфхак где-то оно сжато вопрос как его сжать но вот мы знаем
[03:23:44.700 --> 03:23:50.500]  что все запросы как то добавление удаления там проверка на двух ребер да или там найдите там
[03:23:50.500 --> 03:23:57.540]  сумму какого-нибудь да а на пути потому что если она будет ну или это будет означать что
[03:23:58.140 --> 03:24:16.660]  в одной компоненте утверждается надо у всех этих пар вершин взять л цашки тупо вот я буду
[03:24:16.660 --> 03:24:21.980]  закрашенным цветом выбирать просто взять это то есть любую вершину который в двух различных
[03:24:21.980 --> 03:24:45.740]  под деревьях есть значит там я скажу что вот они хорошие вот тогда окажется что любые то есть
[03:24:45.740 --> 03:24:57.260]  то окажется что любые какие-нибудь две эти вершины соединены путем таган рок и шахта да да да
[03:24:57.260 --> 03:25:05.100]  но фишка в том что если две вершины соединены путем которых нет вот никаких промежуточных
[03:25:05.100 --> 03:25:10.740]  фиолетовых то фишка кажется в том что на этих промежуточных даже если на них тут висят под
[03:25:10.740 --> 03:25:19.740]  деревья в этих под деревьях ничего фиолетового нет с точки зрения будущих запросов на самом деле
[03:25:19.740 --> 03:25:25.220]  то есть вот это вот этот мост навсегда останется мостом он там будет там придаток висеть но его
[03:25:25.220 --> 03:25:31.860]  там можно не рассматривать но более того а вот эти пути это тоже все эти мосты они будут либо
[03:25:31.860 --> 03:25:37.380]  одновременно будут мостами либо одновременно не будут поэтому по факту их можно заменить на
[03:25:37.420 --> 03:25:47.220]  единый мост весом равным там просто сумме старых весов это позволяет нам соответственно с
[03:25:47.220 --> 03:25:56.420]  нот сжать грав вот действительно было у нас допустим допустим каких-нибудь б вот этих вот
[03:25:56.420 --> 03:26:13.140]  обведенных прошу а сколько у нас тогда будет закрашен ну вот и минус одна да
[03:26:13.140 --> 03:26:22.260]  вот на самом деле такая
[03:26:22.260 --> 03:26:40.980]  вот а знаете почему потому что б у него
[03:26:40.980 --> 03:26:52.700]  вот этих вершин там интересных но то наверно то наверно там можно добавить 2
[03:26:52.700 --> 03:27:02.180]  ну да то есть ну то есть общий число вершин не более чем 4 но в общем короче линия
[03:27:02.620 --> 03:27:11.540]  сейчас зор starving
[03:27:13.540 --> 03:27:21.100]  идеально за идеально быстро ну идеально быстро а то есть за идеальный быстр intuitive
[03:27:21.100 --> 03:27:25.140]  ну хорошо как его да но после измена и не коп nuovo colonel да вы как бы наверно
[03:27:25.140 --> 03:27:30.140]  ДФС по нему какой-нибудь запускать можем, да, то есть мы можем какую-то предобработку за линью делать.
[03:27:30.140 --> 03:27:37.140]  Поэтому тут появляются ноты. То есть тут появляются наши любимые Farah Colton и Bender.
[03:27:37.140 --> 03:27:44.140]  За спиной которых сидят, собственно, полюбившиеся нам четыре руки.
[03:27:44.140 --> 03:27:50.140]  И говорят, что в принципе можно сделать линейный подсчет и LCA искать за единицу.
[03:27:51.140 --> 03:27:58.140]  Все LCA мы найдем, и после этого вот этот сжатый граф мы уже тогда...
[03:27:58.140 --> 03:28:03.140]  Ну, по крайней мере, сжатый граф с точки зрения вот этих вершин мы находить можем.
[03:28:06.140 --> 03:28:07.140]  Вот.
[03:28:09.140 --> 03:28:17.140]  Ну вот. То есть более того, после того как мы сделали вот этот сжатень, перешли в репусю, например, вот сюда.
[03:28:17.140 --> 03:28:22.140]  Теперь получается мы добавляем порядка B ребер.
[03:28:22.140 --> 03:28:30.140]  И, в принципе, на этих добавивших ребра мы можем прям за то же линейное время, в явном виде,
[03:28:30.140 --> 03:28:34.140]  все компоненты ребер нужно связанно с ней найти и даже это дерево пересчитать.
[03:28:36.140 --> 03:28:37.140]  Могли бы, да?
[03:28:39.140 --> 03:28:40.140]  Вот.
[03:28:41.140 --> 03:28:43.140]  Да, Игорь, ну...
[03:28:44.140 --> 03:28:45.140]  Что-что?
[03:28:47.140 --> 03:28:50.140]  Ну, да. Единственное там... Что, не так?
[03:28:51.140 --> 03:28:55.140]  Еще раз, сколько мы находим черные, в смысле, закрашенные перелеты?
[03:28:57.140 --> 03:29:05.140]  Да, вот. Хотя самое смешное, что, по-моему, за DFS по этому дереву и находим. Даже 4 русских, по-моему, даже не надо.
[03:29:07.140 --> 03:29:08.140]  Почему не надо?
[03:29:08.140 --> 03:29:12.140]  Потому что нам, потому что фактически можно заметить следующее.
[03:29:12.140 --> 03:29:15.140]  Вот, понятно, нам нужно LCA, потом LCA, LCA и так далее, казалось бы.
[03:29:15.140 --> 03:29:19.140]  Но, на самом деле, я утверждаю следующее. Нас интересует только вершины.
[03:29:19.140 --> 03:29:24.140]  Под деревьях, как минимум, двух различных, под деревьях которых есть что-то фиолетовое.
[03:29:26.140 --> 03:29:27.140]  В общем, да, правда, ну вот.
[03:29:28.140 --> 03:29:32.140]  То есть, на самом деле, там, на самом деле, 4 русских тут даже, по-моему, не нужны.
[03:29:33.140 --> 03:29:36.140]  Хотя, нет, может, где-то и нужно, потому что, ну, капеллеры еще они где-то там были.
[03:29:37.140 --> 03:29:38.140]  Я пока не понял.
[03:29:39.140 --> 03:29:42.140]  Потому что, ну, вы знаете, может, мы сейчас будут еще понаблюдать.
[03:29:42.140 --> 03:29:43.140]  Но смотрите внимательно.
[03:29:43.140 --> 03:29:44.140]  Ну, смотрите внимательно.
[03:29:44.140 --> 03:29:45.140]  То есть, как бы, то есть, люди...
[03:29:53.140 --> 03:29:56.140]  Нет, DFS будет делать за количество тех вершин, которые ему передали.
[03:29:57.140 --> 03:29:59.140]  Да, а то есть, эти вершины?
[03:30:00.140 --> 03:30:02.140]  Да, но это же будет, по сути...
[03:30:03.140 --> 03:30:07.140]  Ну, смотрите, то есть, это будет, ну вот, то есть, это будет предобработка, как бы, здесь.
[03:30:08.140 --> 03:30:10.140]  Потому что что мы делаем?
[03:30:10.140 --> 03:30:11.140]  Ну вот.
[03:30:11.140 --> 03:30:12.140]  Ну, просто идея такая.
[03:30:12.140 --> 03:30:15.140]  То есть, нам изначально, то есть, изначально дан граф.
[03:30:15.140 --> 03:30:19.140]  В общем, даже не дерево обратить внимание, а вообще лес, по-хорошему, нам дан.
[03:30:20.140 --> 03:30:21.140]  То есть, отмеченно, ну вот.
[03:30:21.140 --> 03:30:22.140]  То есть, нам дан лес.
[03:30:24.140 --> 03:30:26.140]  В янтом виде леска бывает.
[03:30:27.140 --> 03:30:31.140]  Когда мы приходим в вершину, значит, нам известно, ну вот...
[03:30:33.140 --> 03:30:39.140]  Когда мы приходим в вершину, то есть, нам дается лес не более, чем там получается, допустим,
[03:30:41.140 --> 03:30:43.140]  не более, чем два B-вершин.
[03:30:44.140 --> 03:30:46.140]  Где, ну ладно, не более, ну вот.
[03:30:46.140 --> 03:30:51.140]  То есть, не более, чем где-то там 4 или 5 B-вершин, где B это количество запросов на этом отрезке.
[03:30:52.140 --> 03:30:53.140]  Допустим, да?
[03:30:55.140 --> 03:30:57.140]  Вот. И мы с этим деревом, ну вот.
[03:30:57.140 --> 03:31:00.140]  Ну и там, понятно, про каждую вершину, тут, естественно, мы можем считать,
[03:31:00.140 --> 03:31:06.140]  ну, случайно, вот этих старых технологий, там, с обновляемыми юситами и вот этими стэками всеми, да?
[03:31:06.140 --> 03:31:10.140]  Что про каждое ребро мы уже знаем, кто они вот в этой терминологии, да?
[03:31:11.140 --> 03:31:15.140]  И нам теперь нужно два раза вести задачу вот этой и вот этой.
[03:31:17.140 --> 03:31:21.140]  Значит, сюда мы пришли, нам дано уже это дерево в терминах вот этих вершин.
[03:31:21.140 --> 03:31:22.140]  Что мы делаем?
[03:31:23.140 --> 03:31:25.140]  У нас есть, значит, от там 5 B...
[03:31:26.140 --> 03:31:29.140]  У нас есть 5, там сколько там, 5 B-вершин, да?
[03:31:29.140 --> 03:31:32.140]  И есть B, возможно, новых ребер.
[03:31:32.140 --> 03:31:33.140]  Ну вот.
[03:31:33.140 --> 03:31:35.140]  Ну, сколько-то вот здесь ребер.
[03:31:35.140 --> 03:31:37.140]  Их, очевидно, не больше, чем B, да?
[03:31:38.140 --> 03:31:39.140]  Очевидно?
[03:31:40.140 --> 03:31:41.140]  Не очевидно.
[03:31:42.140 --> 03:31:44.140]  Это не очевидно, потому что их не черта.
[03:31:44.140 --> 03:31:46.140]  Да, потому что их не черта, а не B.
[03:31:47.140 --> 03:31:49.140]  Их может быть сколько угодно.
[03:31:52.140 --> 03:31:54.140]  То есть, на самом деле, да, придется...
[03:31:55.140 --> 03:32:01.140]  Да, то есть, к сожалению, то есть, возможно, тут как бы в качестве помещенных ребер придется...
[03:32:01.140 --> 03:32:03.140]  Ну, хотя в общем-то это и не важно.
[03:32:04.140 --> 03:32:06.140]  Потому что, да, у нас есть до 6 ребер.
[03:32:07.140 --> 03:32:10.140]  Но для всех этих ребер мы знаем, кто они в терминах.
[03:32:10.140 --> 03:32:11.140]  Хотя нет, не знаем.
[03:32:12.140 --> 03:32:13.140]  Да, неправда, мы не знаем.
[03:32:14.140 --> 03:32:15.140]  Нет.
[03:32:18.140 --> 03:32:19.140]  Знаем или не знаем?
[03:32:20.140 --> 03:32:21.140]  Не, не знаем.
[03:32:22.140 --> 03:32:24.140]  Вот, нет, пока еще не знаем.
[03:32:25.140 --> 03:32:27.140]  Вот, нет, пока еще не знаем.
[03:32:28.140 --> 03:32:32.140]  Скажите, кто они в терминах вот этих B, мы, к сожалению, не знаем.
[03:32:32.140 --> 03:32:34.140]  Хотя очень бы нам этого хотелось.
[03:32:44.140 --> 03:32:46.140]  Нет, у нас только одна маленькая фишка.
[03:32:46.140 --> 03:32:50.140]  У нас вот в этой вершине есть еще какие-то ребра, которые мы еще должны добавить.
[03:32:51.140 --> 03:32:52.140]  Вот.
[03:32:52.140 --> 03:32:55.140]  Мы как бы знаем, кто эти ребра в терминах старых с сжатей.
[03:32:58.140 --> 03:32:59.140]  Но вот.
[03:33:00.140 --> 03:33:01.140]  Но как бы мы...
[03:33:01.140 --> 03:33:05.140]  Но кто они в терминах вот этих вот B, этого мы еще не знаем.
[03:33:06.140 --> 03:33:08.140]  Потому что нам еще только предстоит эти сжатия сделать.
[03:33:10.140 --> 03:33:16.140]  То есть, как бы тут проблема такая, что не очень понятно, как сделать вот это сжатие до того, как мы добавили все ребра.
[03:33:16.140 --> 03:33:24.140]  Потому что если бы нам гарантировалось, что все ребра, с которыми мы в этом подзереве будем работать, они касаются только вот этих вершин, то, конечно, был бы кайф.
[03:33:25.140 --> 03:33:26.140]  То тогда, да.
[03:33:26.140 --> 03:33:28.140]  Тогда мы бы, честно, были бы сжатие.
[03:33:28.140 --> 03:33:30.140]  Вообще все, мы бы уже сразу победили.
[03:33:31.140 --> 03:33:34.140]  Так что, видимо, где-то здесь нам начинает...
[03:33:35.140 --> 03:33:39.140]  Нам нужны вот эти вот все фарохи, колтоны и прочие бендеры.
[03:33:41.140 --> 03:33:43.140]  Значит, как же нам справиться с этим?
[03:33:46.140 --> 03:33:48.140]  Вот реально, как же?
[03:33:55.140 --> 03:33:57.140]  То есть я сначала добавить, потом сжатие?
[03:33:58.140 --> 03:33:59.140]  Нет.
[03:33:59.140 --> 03:34:06.140]  Но проблема в том, что мы тут добавили сжали, но потом уложили еще тут вот в этих вершинах какие-то ребра, которых вы не знаете.
[03:34:09.140 --> 03:34:10.140]  Тоже видимо.
[03:34:13.140 --> 03:34:14.140]  Правда?
[03:34:15.140 --> 03:34:17.140]  Правда, есть вот эта маленькая кишка.
[03:34:19.140 --> 03:34:22.140]  Вот эти ребра, которые тут...
[03:34:23.140 --> 03:34:27.140]  Если ребро попало в эту вершину, значит оно заканчивается где-то здесь.
[03:34:28.140 --> 03:34:35.140]  Если бы оно попало в эту вершину и заканчивалось позже, то оно бы не попало в эту вершину, просто потому что оно было бы лучше.
[03:34:37.140 --> 03:34:43.140]  Поэтому заметим, что все эти ребра, которые тут дальше находятся, они уж к этому подотреску точно отношения имеют.
[03:34:45.140 --> 03:34:53.140]  Поэтому сжатие в этой точке после добавления вот этих ребер вполне валидно.
[03:35:00.140 --> 03:35:02.140]  Неужели мы обошлись без фарух колтон бендера?
[03:35:05.140 --> 03:35:08.140]  Ну давайте аккуратненько, максимально аккуратно.
[03:35:09.140 --> 03:35:11.140]  Какой вариант мы сраним?
[03:35:12.140 --> 03:35:14.140]  То есть мы утверждаем...
[03:35:19.140 --> 03:35:32.140]  Когда мы входим в вершину, мы гарантируем, что здесь у нас есть граф, который связан только...
[03:35:32.140 --> 03:35:42.140]  Гарантируется, что там есть граф, который связан только с ребрами, которые имеют отношение к предыдущей вершине.
[03:35:43.140 --> 03:35:45.140]  Не к той, к которой мы сейчас вошли, а именно к предыдущей.
[03:35:46.140 --> 03:35:47.140]  Понятно, да?
[03:35:48.140 --> 03:35:54.140]  То есть наша задача, когда мы переходим к детям рекурсивно, нам передать им граф, уже сжатый на моё подделье.
[03:35:55.140 --> 03:35:59.140]  А так у меня просто вот тут есть какой-то лес вот в этих вот фермерах.
[03:36:00.140 --> 03:36:01.140]  Вот.
[03:36:02.140 --> 03:36:07.140]  Но этот лес у нас ещё гарантируется, что он размера не более чем 5б, но б на этот раз это всё вот это.
[03:36:08.140 --> 03:36:09.140]  Понятно, да?
[03:36:10.140 --> 03:36:13.140]  То есть не более чем 5, допустим 5, хотя там 4.
[03:36:14.140 --> 03:36:17.140]  Ну вот, на количество запросов вот этих вот.
[03:36:29.140 --> 03:36:33.140]  Смотрите, смотри, в этом граф ровно не даёт.
[03:36:34.140 --> 03:36:39.140]  Просто мы пометим вот так вершину, если она запрадивается вот этим запросом вот здесь.
[03:36:40.140 --> 03:36:43.140]  Там, допустим, там каким-то там добавляя.
[03:36:46.140 --> 03:36:48.140]  То есть их там идёт лучше 5б.
[03:36:49.140 --> 03:36:50.140]  Вот.
[03:36:51.140 --> 03:36:58.140]  Поэтому те вот ребры, которые там будут добавляться здесь, как мы уже знаем, они тут на самом деле просто имеют этому отношение.
[03:36:59.140 --> 03:37:00.140]  Вот.
[03:37:01.140 --> 03:37:05.140]  Поэтому когда мы максимум, что может произойти, вы добавите ребро, оно соединяет два разных дерева.
[03:37:06.140 --> 03:37:08.140]  Но сейчас для нас в этом ничего страшного нет.
[03:37:09.140 --> 03:37:16.140]  Потому что вы добавляете, потому что у вас тут оказалось там б вершин.
[03:37:17.140 --> 03:37:18.140]  Да?
[03:37:19.140 --> 03:37:20.140]  То есть б, ну вот.
[03:37:21.140 --> 03:37:22.140]  Ну вот.
[03:37:23.140 --> 03:37:24.140]  Тут будет б.
[03:37:24.140 --> 03:37:33.140]  И если у вас тут будет б интересных вершин, то как бы гарантируется, что вы сюда передали дерево размера не более чем 5б.
[03:37:34.140 --> 03:37:35.140]  Это инвариант.
[03:37:36.140 --> 03:37:37.140]  Теперь идея такая.
[03:37:38.140 --> 03:37:44.140]  За время получается 5b плюс z с индексом v.
[03:37:45.140 --> 03:37:47.140]  То есть сколько тут ребр вот этих вот было, сколько их тут живёт.
[03:37:48.140 --> 03:37:51.140]  Вы, соответственно, вы добавили эти ребра в явном виде в граф.
[03:37:52.140 --> 03:37:56.140]  Потому что для каждого ребра вы знаете, кто у них эти вершины в этих терминах, да?
[03:37:57.140 --> 03:37:58.140]  А вы же знаете, что они имеют к ним отношение.
[03:37:59.140 --> 03:38:08.140]  И вы за это время честно находите прям все компоненты рёберной досвязности, которые тут образуются.
[03:38:09.140 --> 03:38:12.140]  Более того, не просто находите, а на них чуть дерево строите.
[03:38:13.140 --> 03:38:14.140]  Это всё делается за линию.
[03:38:15.140 --> 03:38:16.140]  Вот.
[03:38:17.140 --> 03:38:22.140]  После того, как вы сделали это за линию, теперь за примерно ту же линию.
[03:38:24.140 --> 03:38:29.140]  Значит, теперь вы берёте все вершины, которые тут вообще возникают в процессе.
[03:38:30.140 --> 03:38:32.140]  В запросах и тут 2b, да?
[03:38:34.140 --> 03:38:35.140]  Вот.
[03:38:37.140 --> 03:38:39.140]  Ладно, тут уже не 2b, тут уже их b-штрих, конечно.
[03:38:40.140 --> 03:38:42.140]  То есть берёте, значит, это b-штрих.
[03:38:42.140 --> 03:38:48.140]  И, соответственно, делаете после этого сжатия, ну, за время получается...
[03:38:49.140 --> 03:38:50.140]  Ну, сколько там получается?
[03:38:51.140 --> 03:38:59.140]  За эти вот 5b вы делаете сжатие на, получается, 5b-штрих.
[03:39:01.140 --> 03:39:02.140]  То есть где b-штрих?
[03:39:03.140 --> 03:39:05.140]  То есть b здесь, а b-штрих типа здесь.
[03:39:06.140 --> 03:39:07.140]  Вот.
[03:39:08.140 --> 03:39:12.140]  То есть сжали на b-штрих, и после этого этот граф вы уже с чистой совестью передаёте сначала сюда, потом сюда.
[03:39:13.140 --> 03:39:16.140]  Всё, что вам потом останется, это откатиться обратно.
[03:39:17.140 --> 03:39:19.140]  Но в данном случае, на самом деле, просто можно там...
[03:39:20.140 --> 03:39:26.140]  Ну да, откатиться, это значит там для каждой вершины восстановить её предыдущую компоненту, но это там старые технологии со стеком работают.
[03:39:27.140 --> 03:39:28.140]  Пока, вроде.
[03:39:29.140 --> 03:39:30.140]  Или нет.
[03:39:30.140 --> 03:39:33.140]  Капелёв ещё где-то хочет до фара Холтон Бендера.
[03:39:34.140 --> 03:39:36.140]  А мы пока, по ходу, не хотим.
[03:39:45.140 --> 03:39:46.140]  Нет.
[03:39:47.140 --> 03:39:48.140]  Ну выкидывай.
[03:39:49.140 --> 03:39:55.140]  Нет, ну как сказать, мы в явном виде храним какие вершины нам нужны, и на этих вершинах у нас есть дерево.
[03:39:56.140 --> 03:39:57.140]  Ладно, лес.
[03:39:57.140 --> 03:39:58.140]  Вот.
[03:39:59.140 --> 03:40:02.140]  А храним мы для каждой вершины только её компонент ураганидусвязности, в которой она лежит.
[03:40:03.140 --> 03:40:04.140]  Вот.
[03:40:05.140 --> 03:40:06.140]  Да, так что это да.
[03:40:07.140 --> 03:40:12.140]  Для каждой компоненты, когда она новообразовалась, мы как бы записываем из каких старых она образовалась, поэтому мы там...
[03:40:13.140 --> 03:40:14.140]  Сейчас.
[03:40:15.140 --> 03:40:19.140]  Хотя нет, мы храним из каких старых она образовалась, и нам нужна...
[03:40:20.140 --> 03:40:21.140]  Нет, погодите.
[03:40:22.140 --> 03:40:23.140]  А, знаете, тут ещё фишка, видимо.
[03:40:23.140 --> 03:40:24.140]  Сейчас, что у нас...
[03:40:25.140 --> 03:40:27.140]  Вот опять, мы на эту фишку уже...
[03:40:28.140 --> 03:40:33.140]  Для каждой конфетной вершины исходной у нас тут сказано, что эта вершина оказалась в пятой компоненте.
[03:40:34.140 --> 03:40:35.140]  Тут сказано, что пятая компонента превратилась в седьмую.
[03:40:36.140 --> 03:40:37.140]  Тут сказано, что седьмая перешла в двадцать третью.
[03:40:38.140 --> 03:40:39.140]  Ну и так далее.
[03:40:40.140 --> 03:40:42.140]  И тут вот возникает вопрос, не будет ли у нас опять...
[03:40:43.140 --> 03:40:46.140]  То есть как бы это, конечно, явно выдает нам какие-то лоб квадраты, но как бы вот возникает вопрос...
[03:40:47.140 --> 03:40:49.140]  Как там вообще для каждой вершины теперь...
[03:40:49.140 --> 03:40:51.140]  Там хранить, в какой она компоненте лежит.
[03:40:52.140 --> 03:40:56.140]  Ну, тот же, у нас есть массив снюд, который на самом деле массивстая там.
[03:40:57.140 --> 03:41:01.140]  И когда какая-то вершина какого-то сюда попадает в какой-то компонент, мы просто...
[03:41:02.140 --> 03:41:03.140]  А, ну да, заметим, что...
[03:41:04.140 --> 03:41:05.140]  Ну да, да, да, заметим, что да.
[03:41:06.140 --> 03:41:11.140]  Обновление у нас тут касается только этих вершин, поэтому обновляем мы столько и только с иби.
[03:41:13.140 --> 03:41:14.140]  Да, и откатываемся только с иби.
[03:41:15.140 --> 03:41:17.140]  Да, и откатываемся только с иби.
[03:41:18.140 --> 03:41:20.140]  А остальные вершины даже не трогаем, такие будь себя.
[03:41:22.140 --> 03:41:23.140]  Да или нет?
[03:41:25.140 --> 03:41:26.140]  Так, или так что, все...
[03:41:32.140 --> 03:41:33.140]  Не, ну не то чтобы...
[03:41:36.140 --> 03:41:37.140]  Линия оттекла.
[03:41:38.140 --> 03:41:40.140]  Не, ну что ты имеешь в виду?
[03:41:40.140 --> 03:41:45.660]  нет у нас появится вот эти вот фиолетовые вот эти вот сжатые
[03:41:45.660 --> 03:41:51.060]  нету мы знаем что которые фиолетовые вот не закрашены нет они вообще затронут
[03:41:51.060 --> 03:42:00.020]  этими запросами не будут вот поэтому то есть по сути у нас у каждой вот то есть
[03:42:00.020 --> 03:42:06.420]  получилось даже там где-то отсылка то есть вот нам как бы да самое главное
[03:42:06.420 --> 03:42:15.780]  чтобы нам вот для всех понять кто они вот в этих вот сегментах на самом деле вот поэтому
[03:42:15.780 --> 03:42:22.660]  вот то есть это вот это вот это для нас самое главное тут надо поэтому там надо уметь аккуратно
[03:42:22.660 --> 03:42:29.020]  потому что если мы тут аккуратно то есть во первых для видимо в каждой вершине как всегда
[03:42:29.020 --> 03:42:34.420]  нужно будет хранить список всех исходных вершин которые тут достигнуты и гарантировать что когда
[03:42:34.420 --> 03:42:39.100]  вы приходите в эту вершину вы про каждую вершину точно знаете кто она в новой терминологии и
[03:42:39.100 --> 03:42:50.180]  тогда уже эту новую терминологию и вроде так и вроде даже получается как потому что что вам
[03:42:50.180 --> 03:42:55.260]  нужно чтобы выкликнуть новую терминологию вам нужна компоненты ребра на двух связанности вот
[03:42:55.260 --> 03:43:11.220]  в этом графе правда значит каждую окей ну хорошо ну значит вот тогда нам уже так берем тут
[03:43:11.220 --> 03:43:16.260]  компоненты ребер на двух связанных взяв нам в виде их выписываем за от 5б прям как вектор
[03:43:16.260 --> 03:43:22.540]  векторов и каждую компоненту ребер на двух связанности объявляем как компонент и тогда
[03:43:22.660 --> 03:43:27.740]  перебираем все вот эти вершины для каждый из них прописываем что при запуске в рекурсию дальше
[03:43:27.740 --> 03:43:33.220]  они на самом деле будут еще новыми компонентами то есть вот и в стеку пикиваем потом достаем
[03:43:33.220 --> 03:43:43.300]  поэтому как бы получается что но вот после этого значит тогда для списка всех вершин и здесь и
[03:43:43.300 --> 03:44:00.140]  здесь мужик все знаем вот дайлса можно было находить за быстро в этом необходимости
[03:44:00.140 --> 03:44:10.500]  один один общий dfs сам все сделал что вот нет вроде даже никуда вроде даже нигде не
[03:44:10.980 --> 03:44:23.580]  вот такая вот ставочка так ну шо ура но как все-таки там каждый ну как все вершины мы работаем
[03:44:23.580 --> 03:44:28.260]  на линии числа вершин которые тут задействованы получается и передаем так что получается
[03:44:28.860 --> 03:44:38.940]  пишем статью что делаем то же самое но без фарах холтон бендера да да да да
[03:44:38.940 --> 03:44:46.100]  но
[03:44:46.100 --> 03:45:00.820]  как я уже сказала даман ходы портас вот это нет он там в конце же где-то сказал
[03:45:01.340 --> 03:45:09.860]  там что-то упоминал давайте пошли на конкретную статью
[03:45:09.860 --> 03:45:37.980]  да да вопрос как бы вопрос как бы в каком контексте на не сослался нет ну он как
[03:45:38.420 --> 03:45:53.420]  нет ну ну это да правда тут возникает вопрос зачем он как бы хотел он видимо
[03:45:53.420 --> 03:46:04.860]  хотел как-то в онлайне дерево сжимать что не да но тут на него сослался потому что дайлса
[03:46:04.860 --> 03:46:08.860]  можно искать за единицу поэтому как бы вопрос как бы где он это применяет потому что нам это вот
[03:46:08.860 --> 03:46:24.220]  тут не нужно мы с вами тоже с вами вещи пострашнее но как бы нету понятнее но то нет ну что там
[03:46:24.220 --> 03:46:38.060]  хорошо посылался в принципе дфс придумал но это кто придумал что такое придумал
[03:46:38.060 --> 03:46:43.060]  дфн шейте говорить стандартный рекурсивный перебор допустим какой-нибудь вообще как бы по
[03:46:43.060 --> 03:46:49.980]  тому там едва ли не в девятнадцатом веке какие подобные мысли уже были мы говорим что как бы
[03:46:49.980 --> 03:46:56.100]  вы говорим о тарьяне потому что по камере по камере это первая такая вразумитая именно активная
[03:46:56.100 --> 03:47:06.060]  статья именно дфс значит она именно тарьяна 75 года это которую видел я то есть нет кто придумал
[03:47:06.680 --> 03:47:13.340]  да да да да да да да наверное с китая да
[03:47:13.340 --> 03:47:26.180]  хотя не так тот первым был нет по этой логике можно думать а кто придумал поиск ширину стать
[03:47:26.180 --> 03:47:35.480]  интересно да массивы как технологию ну но я подозреваю что нет они там умею
[03:47:35.480 --> 03:47:39.100]  брать нот нет ну как сказать это уже придумали наверное программисты все таки
[03:47:39.100 --> 03:47:43.500]  да нет потом что такой массив массив это последовательность регистров на самом
[03:47:43.500 --> 03:47:48.060]  деле выделение их вот с точки зрения нашей модели это просто вот мы сказали
[03:47:48.060 --> 03:48:11.500]  шоу вот от сих до сих вот это массив да да уже надо хотя проблема тут я просто
[03:48:11.500 --> 03:48:14.980]  вот главное мне просто страшно это что вот я да страшно это откладывать то про
[03:48:15.860 --> 03:48:20.020]  теперь вот у нас выплыл сервен три бит а вот тоже хочется обсудить
[03:48:20.020 --> 03:48:38.020]  дополнить мне ну ну кон теста да да да да типа найдите сами не но это нет
[03:48:38.020 --> 03:48:48.580]  вот такой китайцы умеют доказывать что это логарифа
[03:48:48.580 --> 03:48:58.220]  4 русских не причем не можно предположить что только четыре русских вообще в мире
[03:48:58.220 --> 03:49:09.340]  только умеют доказывать сегменты да но тут оно в простых вещах вот там вопрос как
[03:49:09.340 --> 03:49:13.460]  всегда вопрос как каким конкретно и в разных разных задачах по-разному вылезает
[03:49:13.460 --> 03:49:21.380]  к сожалению да но технологии тем не менее есть ладно ладно будем думать ладно может я
[03:49:21.380 --> 03:49:24.780]  конечно могу взять так себе навсегда сейчас как-то до следующего делаем сервен
[03:49:24.780 --> 03:49:28.020]  три биться я прям свято клюшу больше ничего не будет но это как-то так не
[03:49:28.020 --> 03:49:31.100]  хочется я просто знаете еще просто проблему что просто пока настроение
[03:49:31.100 --> 03:49:34.060]  действительно это человек чувствует что к концу семестра как бы ничего нового
[03:49:34.060 --> 03:49:36.740]  скорее всего скажем так дать что-то новое будет сложнее
[03:49:36.740 --> 03:49:41.300]  ладно новая да правда новая это мои личные потому что новая относительно меня
[03:49:41.300 --> 03:49:54.500]  никогда вот тот и прикол да поэтому ну что делать не знаю я пока не знаю я
[03:49:54.500 --> 03:50:03.300]  пока не одно не рассказывал ой ну это нет ну как по себе биться не но там же
[03:50:03.300 --> 03:50:08.900]  нужно копать там такие отдельности я уже наверное там не копну то есть как бы нет
[03:50:08.900 --> 03:50:16.460]  вот нет ладно это бесконечно долго можно думать хотя хотя не знаю может
[03:50:16.460 --> 03:50:19.060]  конечно надо просто уже отдохнуть от нового будто не наконец уже действительно
[03:50:20.060 --> 03:50:27.380]  да надо но вот наверное да надо но вот но это надо бфс надо так что да что такое
[03:50:27.380 --> 03:50:37.740]  фурье а не но не забыть его потом просто такая тема которую можно
[03:50:37.740 --> 03:50:41.060]  обсудить уже там на последнем майском занятии действительно уже в сонном
[03:50:41.060 --> 03:50:45.660]  состоянии тогда потому что это не но нет кое-что не смотреть противопроведка кое-что
[03:50:45.660 --> 03:50:51.820]  там есть нет ну самое крутое что там есть из нового такой который может быть не
[03:50:51.820 --> 03:51:00.340]  все знают это а 2 а бфс конечно а 2 а бфс дайся а 2 а вот ситуация такая задача
[03:51:00.340 --> 03:51:05.780]  танка в эвершим сериала все веса от миллиарда до двух миллиардов найти
[03:51:05.780 --> 03:51:09.460]  как чаще расстояние от стартов и решим до всех остальных утверждений это
[03:51:09.460 --> 03:51:16.180]  делается за е плюс в да делается там мистически там мистически бфс
[03:51:16.180 --> 03:51:31.580]  а ну да ну да сосылка на меня так вот это они есть нет эти там там единая логика
[03:51:31.580 --> 03:51:35.460]  если так в качестве анонса что там может быть потому что на самом деле там
[03:51:35.460 --> 03:51:38.700]  получается так на чем мы как бы даже не с бфс освал нового алгоритма
[03:51:39.220 --> 03:51:42.260]  у меня терминологияיש волнового алгоритм который просто говорит вот
[03:51:42.260 --> 03:51:46.700]  есть стартовая вершина эти докторов можно дойти есть те documents
[03:51:46.700 --> 03:51:48.020]  которые можно дойти и как далее то есть можно там respects и
[03:51:48.220 --> 03:51:49.660]  веки
[03:51:56.460 --> 03:51:58.460]  у меня constitution
[03:51:58.580 --> 03:52:01.460]  обыosphere бф сомняrix вОр Todos abuse
[03:52:01.500 --> 03:52:06.220]  dairy а в perseбутеsom
[03:52:06.220 --> 03:52:14.220]  Мы начинаем добавлять веса, потому что с одной стороны веса бывают от одного до ка, пока целые, потом бывают от нуля до единия, потом еще и с нулем.
[03:52:14.220 --> 03:52:26.220]  Получается, получается делать, неправильно делать, за е плюс вк. Е плюс вк чисто из-за количества к череде, количества флоев, которые вы должны рассмотреть.
[03:52:26.220 --> 03:52:43.220]  Дальше, соответственно, выплывает, что слои там может быть по-разному. Оказывается, выясняется, что из серебра от одного до ка они могут быть и дробными, и просто слои, это просто ваше расстояние, которое вы нашли, только округленное вниз.
[03:52:43.220 --> 03:52:52.220]  И оказывается, это тоже прекрасно работает. Там надо аккуратно, потому что если веса от одного до ка дробные, то это работает, если веса от нуля до ка, то это фейлится.
[03:52:53.220 --> 03:53:05.220]  Ну вот. Ну просто вот. Ну вот. Но с другой стороны оказывается, что если у вас рёбра от одного до ка, и при этом потом у вас два варианта, либо слои вы в явном виде храните, но как-то округляете, либо у вас третья версия.
[03:53:05.220 --> 03:53:13.220]  Ну вот. А давайте просто воображать, что у нас слои какие угодно, но мы просто вместо этого храним в каком-нибудь сетике, какие слои вообще есть.
[03:53:13.220 --> 03:53:26.220]  Ну там слово за слово в общем-то выводится неожиданно. То есть тут интересно именно, что я вот дэкстр увожу не просто, а алгоритм дэкстр, он делается вот так. Доказательство вот такое. Ну как вам обычно рассказывают.
[03:53:26.220 --> 03:53:35.220]  На самом деле вот хочется вывести, что дэкстр это такой просто бфс на бесконечном числе слоев на самом деле. То есть абсолютно тот же бфс.
[03:53:36.220 --> 03:53:40.220]  То есть смысл этой части вот ровно в этом скорее.
[03:53:40.220 --> 03:53:47.220]  Ну вот. Дальше там ещё обобщение дэкстр, на какие ещё функционалы пути она может обобщиться, тоже надо обсудить.
[03:53:47.220 --> 03:53:52.220]  Ну там ещё всякие мелочи типа астарт. В общем, короче, там есть что обсуждать.
[03:53:52.220 --> 03:54:01.220]  Ну там про Флойда Форд Белман я молчу. Там тем более, что выясняется, что там восстанавливать путь, то на самом деле когда-то это был вопрос на отел.
[03:54:02.220 --> 03:54:12.220]  Ну да, потому что если просто от балды возьмёте какую-нибудь тупую версию, то там фиг докажете.
[03:54:12.220 --> 03:54:19.220]  Там будущее бронзовые призёры, там чемпионата мира, там могли 2-3 часа сидеть доказывать.
[03:54:20.220 --> 03:54:21.220]  Ну вот.
[03:54:27.220 --> 03:54:34.220]  Нет, там по-разному можно, просто либо жрать кучу памяти, тогда всё железо-бетонно, либо не жрать эту кучу памяти, тогда как бы удачи доказать.
[03:54:34.220 --> 03:54:44.220]  Нет, можно. Я тебе правильно делаю, но это просто надо правильно делать, потому что если неправильно делать, то возникают куча непоняток и всё.
[03:54:45.220 --> 03:54:50.220]  То есть это вот к тому, что он хочет рассказывать в кончайших путях.
[03:54:50.220 --> 03:54:58.220]  Нет, в общем-то ничего сложного. Нет, я чисто теоретически есть мечта, чтобы в курс вошёл, конечно, этот самый лучший алгоритм, конечно, который ЗВ плюс Е это всё делает.
[03:54:58.220 --> 03:55:06.220]  Да, алгоритм. Задача. Веса целая, не отрицательная, но произвольная. Ладно, бейбитная.
[03:55:06.220 --> 03:55:12.220]  Так. Найдите корчайшие пути. Так вот, есть алгоритм, который делает это ЗВ плюс Е.
[03:55:12.220 --> 03:55:15.220]  Ну, алгоритм. Да. Да, но это расстрел.
[03:55:23.220 --> 03:55:34.220]  Ну, когда-то был, но, скажем так, насколько я понял, был только в качестве лекции, тоже скорее в виде общих намёток, а не в виде конкретного логика, поверьте.
[03:55:34.220 --> 03:55:40.220]  Если мы будем конкретно это изучать прямо заново, то, как бы знаете, софт-хип действительно будет очень халявной структурой.
[03:55:42.220 --> 03:55:51.220]  Вот. Так что да. Нет, ну это другой вопрос. Нет, вероятно, алгоритм у нас сейчас не в теме изучения, вероятно, алгоритм.
[03:55:53.220 --> 03:55:59.220]  Да. Но там, правда, у нас нет корчайших путей. Там есть, да, там есть минус 100 за УАД Е.
[03:55:59.220 --> 03:56:08.220]  Ну, да, ну он с мыслям от ожидания. Вот Е. В чём очень простой алгоритм, в чём простой релиз, в чём даже алгоритм, но вот красивый.
[03:56:08.220 --> 03:56:10.220]  Ладно, всё. Ладно, да, у нас получилось всё.
